source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1f614.5 = global i32 0
@global_var_1f624.6 = global i32* @global_var_1f614.5
@global_var_1f784.12 = global i32 0
@global_var_10044.18 = constant i32 -382906384
@global_var_16afc.21 = constant [4 x i8] c"GET\00"
@1 = constant i32 47
@global_var_14234.25 = constant i32 -382910448
@global_var_16af4.27 = constant i32 32
@global_var_16acc.29 = constant [24 x i8] c" HTTP/1.1\0D\0AUser-Agent: \00"
@global_var_16ae4.31 = constant [9 x i8] c"\0D\0AHost: \00"
@global_var_16af0.33 = constant [3 x i8] c"\0D\0A\00"
@global_var_16b04.35 = constant [9 x i8] c"Cookie: \00"
@global_var_16b10.37 = constant [3 x i8] c"; \00"
@global_var_16b14.39 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_16b1c.41 = constant i32 59
@global_var_16b20.43 = constant [5 x i8] c"http\00"
@global_var_16b28.45 = constant [5 x i8] c"url=\00"
@global_var_16b30.47 = constant [5 x i8] c"POST\00"
@global_var_1389c.48 = constant i32 -439275520
@global_var_16b38.50 = constant i32 39
@global_var_16b3c.52 = constant i32 61
@global_var_1f7a0.56 = global i32 0
@global_var_a0cc.57 = constant i32 -352321546
@global_var_14e8c.58 = constant i32 -481296384
@global_var_1f7a4.60 = global i32 0
@global_var_1f7a8.61 = local_unnamed_addr global i32 0
@global_var_e394.67 = constant i32 -382906384
@global_var_e858.69 = constant i32 -382906384
@global_var_d740.71 = constant i32 -382906384
@global_var_cffc.74 = constant i32 -382906384
@global_var_c888.76 = constant i32 -382906384
@global_var_b7c8.78 = constant i32 -382906384
@global_var_c028.80 = constant i32 -382906384
@global_var_b0ac.82 = constant i32 -382906384
@global_var_a930.84 = constant i32 -382906384
@global_var_81cc.86 = constant i32 -382906384
@global_var_1f858.88 = global i32 0
@global_var_1f860.100 = global i32 0
@global_var_16b40.102 = constant [14 x i8] c"/proc/net/tcp\00"
@global_var_1f7c4.106 = global i32 0
@global_var_1f85c.108 = global i32 0
@global_var_ffb4.110 = constant i32 -382910352
@global_var_1f630.112 = global i32 80684
@global_var_fe44.113 = constant i32 -382909968
@global_var_1f628.115 = global i32 -1
@global_var_1f868.121 = local_unnamed_addr global i32 0
@global_var_1f867.122 = local_unnamed_addr global i32 0
@global_var_1f866.123 = local_unnamed_addr global i32 0
@global_var_fe2c.125 = constant i32 -442556408
@global_var_16b50.127 = constant [14 x i8] c"/dev/watchdog\00"
@global_var_1f865.132 = local_unnamed_addr global i32 0
@global_var_16ba4.134 = constant [3 x i8] c"/.\00"
@global_var_16b80.136 = constant i32 65092
@global_var_12f50.138 = constant i32 -509607552
@global_var_13008.141 = constant i32 -382906384
@global_var_12e98.143 = constant i32 -509607552
@global_var_16ba0.148 = constant i32 65068
@global_var_16b74.150 = constant i32 10
@global_var_16b60.152 = constant [19 x i8] c"/dev/misc/watchdog\00"
@global_var_1f62c.154 = global i32 -1
@global_var_13b2c.159 = constant i32 -382910224
@global_var_16b78.161 = constant i32 16777216
@global_var_1f7cc.163 = global i32 0
@global_var_1f7d8.165 = global i32 0
@global_var_1f7d0.167 = global i32 0
@global_var_1f7d4.169 = global i32 0
@global_var_16bb8.175 = constant [33 x i8] c"abcdefghijklmnopqrstuvw012345678\00"
@global_var_11180.184 = constant i32 -442695668
@global_var_1f87c.186 = global i32 0
@global_var_1f810.188 = global i32 0
@global_var_1f7dc.190 = global i32 0
@global_var_1f808.192 = global i32 0
@global_var_1f874.200 = global i32 0
@global_var_1f878.202 = global i32 0
@global_var_1f7e3.205 = local_unnamed_addr global i32 0
@global_var_1f7e2.206 = local_unnamed_addr global i32 0
@global_var_1f7f4.208 = global i32 0
@global_var_1f7e8.210 = local_unnamed_addr global i32 0
@global_var_1f7e5.211 = local_unnamed_addr global i32 0
@global_var_1f7f5.212 = local_unnamed_addr global i32 0
@global_var_1f7f7.213 = local_unnamed_addr global i32 0
@global_var_1f7e9.214 = local_unnamed_addr global i32 0
@global_var_1f7e4.215 = local_unnamed_addr global i32 0
@global_var_1f7f6.216 = local_unnamed_addr global i32 0
@global_var_1f803.218 = local_unnamed_addr global i32 0
@global_var_1f802.219 = local_unnamed_addr global i32 0
@global_var_16d44.221 = constant [5 x i8] c"PMMV\00"
@global_var_16d4c.223 = constant i32 387006810
@global_var_16d54.225 = constant [6 x i8] c"TKXZT\00"
@global_var_16d5c.227 = constant [6 x i8] c"CFOKL\00"
@global_var_16d64.229 = constant i32 437918234
@global_var_16d6c.231 = constant [8 x i8] c"ZOJFKRA\00"
@global_var_16d74.233 = constant [8 x i8] c"FGDCWNV\00"
@global_var_16d7c.235 = constant [9 x i8] c"HWCLVGAJ\00"
@global_var_16d88.237 = constant i32 370216979
@global_var_16d90.239 = constant i32 269555223
@global_var_16d98.241 = constant [8 x i8] c"QWRRMPV\00"
@global_var_16b18.243 = constant i32 0
@global_var_16bdc.245 = constant [9 x i8] c"RCQQUMPF\00"
@global_var_16be8.247 = constant i32 370216979
@global_var_16bf0.249 = constant [5 x i8] c"WQGP\00"
@global_var_16bf8.251 = constant [5 x i8] c"RCQQ\00"
@global_var_16c00.253 = constant i32 1263486531
@global_var_16c0c.255 = constant i32 320017171
@global_var_16c14.257 = constant [9 x i8] c"QOACFOKL\00"
@global_var_16c20.259 = constant i32 336860180
@global_var_16c28.261 = constant i32 370216979
@global_var_16c30.263 = constant i32 324292169
@global_var_16c38.265 = constant [14 x i8] c"cFOKLKQVPCVMP\00"
@global_var_16c48.267 = constant [7 x i8] c"OGKLQO\00"
@global_var_16c50.269 = constant [8 x i8] c"QGPTKAG\00"
@global_var_16c58.271 = constant [11 x i8] c"QWRGPTKQMP\00"
@global_var_16c64.273 = constant [6 x i8] c"EWGQV\00"
@global_var_16c6c.275 = constant i32 1263486531
@global_var_16c74.277 = constant [14 x i8] c"CFOKLKQVPCVMP\00"
@global_var_16c84.279 = constant [5 x i8] c"W@LV\00"
@global_var_16c8c.281 = constant i32 324292169
@global_var_16c94.283 = constant i32 390551160
@global_var_16c9c.285 = constant i32 387009354
@global_var_16ca4.287 = constant [6 x i8] c"HT@XF\00"
@global_var_16cac.289 = constant [5 x i8] c"CLIM\00"
@global_var_16cb4.291 = constant [6 x i8] c"XNZZ\0C\00"
@global_var_16cbc.293 = constant i32 1867011861
@global_var_16ccc.295 = constant i32 1867011861
@global_var_16cdc.297 = constant [7 x i8] c"Q[QVGO\00"
@global_var_16ce4.299 = constant [5 x i8] c"KIU@\00"
@global_var_16cec.301 = constant [9 x i8] c"FPGCO@MZ\00"
@global_var_16cf8.303 = constant [8 x i8] c"PGCNVGI\00"
@global_var_16d00.305 = constant i32 303174162
@global_var_16d0c.307 = constant i32 320017171
@global_var_16d14.309 = constant i32 319820054
@global_var_16d80.311 = constant [5 x i8] c"VGAJ\00"
@global_var_16d1c.313 = constant [7 x i8] c"OMVJGP\00"
@global_var_16d24.315 = constant [7 x i8] c"DWAIGP\00"
@global_var_1f7ec.316 = local_unnamed_addr global i32 0
@global_var_1f7ea.318 = local_unnamed_addr global i32 0
@global_var_1f7eb.319 = local_unnamed_addr global i32 0
@global_var_1f804.321 = local_unnamed_addr global i32 0
@global_var_1f805.322 = local_unnamed_addr global i32 0
@global_var_16d2c.327 = constant [5 x i8] c"ogin\00"
@global_var_16d34.329 = constant [6 x i8] c"enter\00"
@global_var_16da9.333 = constant i32 1377827839
@global_var_16da0.335 = constant i32 2095871
@global_var_16d3c.337 = constant [8 x i8] c"assword\00"
@global_var_1f884.339 = global i32 0
@global_var_1f638.342 = global i32 -559038737
@global_var_16dac.346 = constant [13 x i8] c"RKAGQ@PM\0CVI\22\00"
@global_var_1f89c.348 = local_unnamed_addr global i32 0
@global_var_1f8a0.349 = local_unnamed_addr global i32 0
@global_var_1f8a1.350 = local_unnamed_addr global i32 0
@global_var_16dbc.352 = constant i32 42786
@global_var_1f8a4.353 = local_unnamed_addr global i32 0
@global_var_1f8a8.354 = local_unnamed_addr global i32 0
@global_var_1f8a9.355 = local_unnamed_addr global i32 0
@global_var_1f914.356 = local_unnamed_addr global i32 0
@global_var_1f918.357 = local_unnamed_addr global i32 0
@global_var_1f919.358 = local_unnamed_addr global i32 0
@global_var_16dc0.360 = constant i32 36254
@global_var_1f91c.361 = local_unnamed_addr global i32 0
@global_var_1f920.362 = local_unnamed_addr global i32 0
@global_var_1f921.363 = local_unnamed_addr global i32 0
@global_var_16dc4.365 = constant i32 1448168270
@global_var_1f898.366 = local_unnamed_addr global i32 0
@global_var_1f894.367 = local_unnamed_addr global i32 0
@global_var_1f899.368 = local_unnamed_addr global i32 0
@global_var_16dd4.370 = constant i32 1381389898
@global_var_1f8b0.371 = local_unnamed_addr global i32 0
@global_var_1f8ac.372 = local_unnamed_addr global i32 0
@global_var_1f8b1.373 = local_unnamed_addr global i32 0
@global_var_16df4.375 = constant [8 x i8] c"\0DRPMA\0D\22\00"
@global_var_1f8b4.376 = local_unnamed_addr global i32 0
@global_var_1f8b8.377 = local_unnamed_addr global i32 0
@global_var_1f8b9.378 = local_unnamed_addr global i32 0
@global_var_16dfc.380 = constant [6 x i8] c"\0DGZG\22\00"
@global_var_1f8c0.381 = local_unnamed_addr global i32 0
@global_var_1f8bc.382 = local_unnamed_addr global i32 0
@global_var_1f8c1.383 = local_unnamed_addr global i32 0
@global_var_16e04.385 = constant i32 1195772418
@global_var_1f8c8.386 = local_unnamed_addr global i32 0
@global_var_1f8c4.387 = local_unnamed_addr global i32 0
@global_var_1f8c9.388 = local_unnamed_addr global i32 0
@global_var_16e10.390 = constant [5 x i8] c"\0DDF\22\00"
@global_var_1f8d0.391 = local_unnamed_addr global i32 0
@global_var_1f8cc.392 = local_unnamed_addr global i32 0
@global_var_1f8d1.393 = local_unnamed_addr global i32 0
@global_var_16e18.395 = constant [8 x i8] c"\0CCLKOG\22\00"
@global_var_1f8d4.396 = local_unnamed_addr global i32 0
@global_var_1f8d8.397 = local_unnamed_addr global i32 0
@global_var_1f8d9.398 = local_unnamed_addr global i32 0
@global_var_16e20.400 = constant [9 x i8] c"\0DQVCVWQ\22\00"
@global_var_1f8e0.401 = local_unnamed_addr global i32 0
@global_var_1f8dc.402 = local_unnamed_addr global i32 0
@global_var_1f8e1.403 = local_unnamed_addr global i32 0
@global_var_16e2c.405 = constant i32 1836214128
@global_var_1f8e8.406 = local_unnamed_addr global i32 0
@global_var_1f8e4.407 = local_unnamed_addr global i32 0
@global_var_1f8e9.408 = local_unnamed_addr global i32 0
@global_var_16e3c.410 = constant [11 x i8] c"jvvrdnmmf\22\00"
@global_var_1f8ec.411 = local_unnamed_addr global i32 0
@global_var_1f8f0.412 = local_unnamed_addr global i32 0
@global_var_1f8f1.413 = local_unnamed_addr global i32 0
@global_var_16e48.415 = constant [11 x i8] c"nmnlmevdm\22\00"
@global_var_1f8f4.416 = local_unnamed_addr global i32 0
@global_var_1f8f8.417 = local_unnamed_addr global i32 0
@global_var_1f8f9.418 = local_unnamed_addr global i32 0
@global_var_16e54.420 = constant i32 437738110
@global_var_1f900.421 = local_unnamed_addr global i32 0
@global_var_1f8fc.422 = local_unnamed_addr global i32 0
@global_var_1f901.423 = local_unnamed_addr global i32 0
@global_var_16e78.425 = constant [9 x i8] c"XMNNCPF\22\00"
@global_var_1f908.426 = local_unnamed_addr global i32 0
@global_var_1f904.427 = local_unnamed_addr global i32 0
@global_var_1f909.428 = local_unnamed_addr global i32 0
@global_var_16e84.430 = constant [12 x i8] c"egvnmacnkr\22\00"
@global_var_1f910.431 = local_unnamed_addr global i32 0
@global_var_1f90c.432 = local_unnamed_addr global i32 0
@global_var_1f911.433 = local_unnamed_addr global i32 0
@global_var_16e90.435 = constant [7 x i8] c"QJGNN\22\00"
@global_var_1f928.436 = local_unnamed_addr global i32 0
@global_var_1f924.437 = local_unnamed_addr global i32 0
@global_var_1f929.438 = local_unnamed_addr global i32 0
@global_var_16e98.440 = constant [8 x i8] c"GLC@NG\22\00"
@global_var_1f92c.441 = local_unnamed_addr global i32 0
@global_var_1f930.442 = local_unnamed_addr global i32 0
@global_var_1f931.443 = local_unnamed_addr global i32 0
@global_var_16ea0.445 = constant [8 x i8] c"Q[QVGO\22\00"
@global_var_1f934.446 = local_unnamed_addr global i32 0
@global_var_1f938.447 = local_unnamed_addr global i32 0
@global_var_1f939.448 = local_unnamed_addr global i32 0
@global_var_16ea8.450 = constant [4 x i8] c"QJ\22\00"
@global_var_1f940.451 = local_unnamed_addr global i32 0
@global_var_1f93c.452 = local_unnamed_addr global i32 0
@global_var_1f941.453 = local_unnamed_addr global i32 0
@global_var_16eac.455 = constant i32 1280000013
@global_var_1f944.456 = local_unnamed_addr global i32 0
@global_var_1f948.457 = local_unnamed_addr global i32 0
@global_var_1f949.458 = local_unnamed_addr global i32 0
@global_var_16ec0.460 = constant i32 1668311919
@global_var_1f950.461 = local_unnamed_addr global i32 0
@global_var_1f94c.462 = local_unnamed_addr global i32 0
@global_var_1f951.463 = local_unnamed_addr global i32 0
@global_var_16edc.465 = constant [10 x i8] c"LAMPPGAV\22\00"
@global_var_1f954.466 = local_unnamed_addr global i32 0
@global_var_1f958.467 = local_unnamed_addr global i32 0
@global_var_1f959.468 = local_unnamed_addr global i32 0
@global_var_16ee8.470 = constant i32 1280000013
@global_var_1f95c.471 = local_unnamed_addr global i32 0
@global_var_1f960.472 = local_unnamed_addr global i32 0
@global_var_1f961.473 = local_unnamed_addr global i32 0
@global_var_16efc.475 = constant i32 1280000013
@global_var_1f968.476 = local_unnamed_addr global i32 0
@global_var_1f964.477 = local_unnamed_addr global i32 0
@global_var_1f969.478 = local_unnamed_addr global i32 0
@global_var_16f14.480 = constant i32 1464693110
@global_var_1f970.481 = local_unnamed_addr global i32 0
@global_var_1f96c.482 = local_unnamed_addr global i32 0
@global_var_1f971.483 = local_unnamed_addr global i32 0
@global_var_16f2c.485 = constant [18 x i8] c"\0DGVA\0DPGQMNT\0CAMLD\22\00"
@global_var_1f978.486 = local_unnamed_addr global i32 0
@global_var_1f974.487 = local_unnamed_addr global i32 0
@global_var_1f979.488 = local_unnamed_addr global i32 0
@global_var_16f40.490 = constant i32 1196376908
@global_var_1f97c.491 = local_unnamed_addr global i32 0
@global_var_1f980.492 = local_unnamed_addr global i32 0
@global_var_1f981.493 = local_unnamed_addr global i32 0
@global_var_16f50.495 = constant i32 1280068961
@global_var_1f988.496 = local_unnamed_addr global i32 0
@global_var_1f984.497 = local_unnamed_addr global i32 0
@global_var_1f989.498 = local_unnamed_addr global i32 0
@global_var_16f68.500 = constant i32 1195458915
@global_var_1f990.501 = local_unnamed_addr global i32 0
@global_var_1f98c.502 = local_unnamed_addr global i32 0
@global_var_1f991.503 = local_unnamed_addr global i32 0
@global_var_16fbc.505 = constant i32 1195458915
@global_var_1f998.506 = local_unnamed_addr global i32 0
@global_var_1f994.507 = local_unnamed_addr global i32 0
@global_var_1f999.508 = local_unnamed_addr global i32 0
@global_var_16fe0.510 = constant i32 1447841121
@global_var_1f9a0.511 = local_unnamed_addr global i32 0
@global_var_1f99c.512 = local_unnamed_addr global i32 0
@global_var_1f9a1.513 = local_unnamed_addr global i32 0
@global_var_17014.515 = constant i32 1633044305
@global_var_1f9a4.516 = local_unnamed_addr global i32 0
@global_var_1f9a8.517 = local_unnamed_addr global i32 0
@global_var_1f9a9.518 = local_unnamed_addr global i32 0
@global_var_17024.520 = constant i32 1346651984
@global_var_1f9ac.521 = local_unnamed_addr global i32 0
@global_var_1f9b0.522 = local_unnamed_addr global i32 0
@global_var_1f9b1.523 = local_unnamed_addr global i32 0
@global_var_17030.525 = constant i32 1128353102
@global_var_1f9b4.526 = local_unnamed_addr global i32 0
@global_var_1f9b8.527 = local_unnamed_addr global i32 0
@global_var_1f9b9.528 = local_unnamed_addr global i32 0
@global_var_1703c.530 = constant i32 257312593
@global_var_1f9bc.531 = local_unnamed_addr global i32 0
@global_var_1f9c0.532 = local_unnamed_addr global i32 0
@global_var_1f9c1.533 = local_unnamed_addr global i32 0
@global_var_1704c.535 = constant i32 1447841089
@global_var_1f9c4.536 = local_unnamed_addr global i32 0
@global_var_1f9c8.537 = local_unnamed_addr global i32 0
@global_var_1f9c9.538 = local_unnamed_addr global i32 0
@global_var_17060.540 = constant i32 1279479894
@global_var_1f9cc.541 = local_unnamed_addr global i32 0
@global_var_1f9d0.542 = local_unnamed_addr global i32 0
@global_var_1f9d1.543 = local_unnamed_addr global i32 0
@global_var_17074.545 = constant [9 x i8] c"AJWLIGF\22\00"
@global_var_1f9d8.546 = local_unnamed_addr global i32 0
@global_var_1f9d4.547 = local_unnamed_addr global i32 0
@global_var_1f9d9.548 = local_unnamed_addr global i32 0
@global_var_16f5c.550 = constant i32 1380403017
@global_var_1f9e0.551 = local_unnamed_addr global i32 0
@global_var_1f9dc.552 = local_unnamed_addr global i32 0
@global_var_1f9e1.553 = local_unnamed_addr global i32 0
@global_var_17080.555 = constant i32 1280068929
@global_var_1f9e4.556 = local_unnamed_addr global i32 0
@global_var_1f9e8.557 = local_unnamed_addr global i32 0
@global_var_1f9e9.558 = local_unnamed_addr global i32 0
@global_var_17090.560 = constant i32 1414547281
@global_var_1f9f0.561 = local_unnamed_addr global i32 0
@global_var_1f9ec.562 = local_unnamed_addr global i32 0
@global_var_1f9f1.563 = local_unnamed_addr global i32 0
@global_var_170a4.565 = constant i32 1414547281
@global_var_1f9f8.566 = local_unnamed_addr global i32 0
@global_var_1f9f4.567 = local_unnamed_addr global i32 0
@global_var_1f9f9.568 = local_unnamed_addr global i32 0
@global_var_170c0.570 = constant i32 1264078191
@global_var_1f9fc.571 = local_unnamed_addr global i32 0
@global_var_1fa00.572 = local_unnamed_addr global i32 0
@global_var_1fa01.573 = local_unnamed_addr global i32 0
@global_var_17130.575 = constant i32 1264078191
@global_var_1fa04.576 = local_unnamed_addr global i32 0
@global_var_1fa08.577 = local_unnamed_addr global i32 0
@global_var_1fa09.578 = local_unnamed_addr global i32 0
@global_var_171a0.580 = constant i32 1264078191
@global_var_1fa0c.581 = local_unnamed_addr global i32 0
@global_var_1fa10.582 = local_unnamed_addr global i32 0
@global_var_1fa11.583 = local_unnamed_addr global i32 0
@global_var_17210.585 = constant i32 1264078191
@global_var_1fa18.586 = local_unnamed_addr global i32 0
@global_var_1fa14.587 = local_unnamed_addr global i32 0
@global_var_1fa19.588 = local_unnamed_addr global i32 0
@global_var_17280.590 = constant i32 1264078191
@global_var_1fa21.591 = local_unnamed_addr global i32 0
@global_var_1fa1c.592 = local_unnamed_addr global i32 0
@global_var_1fa20.593 = local_unnamed_addr global i32 0
@global_var_15874.596 = constant i32 -476053504
@global_var_14604.600 = constant i32 -443219956
@global_var_14770.605 = constant i32 -376111092
@global_var_1f84c.608 = global i32 0
@global_var_148ec.610 = constant i32 -456978431
@global_var_1fa24.612 = global i32 0
@global_var_1f814.614 = global i32 0
@global_var_1f738.617 = global i32 256
@global_var_1f63c.618 = global i32* @global_var_1f738.617
@global_var_1f83c.621 = global i32 0
@global_var_1faa4.623 = global i32 0
@global_var_16028.624 = constant i32 -382910416
@global_var_14870.625 = constant i32 -509595648
@global_var_14f0c.632 = constant i32 -442564520
@global_var_1f744.638 = global i32 0
@global_var_144b0.640 = constant i32 -481230848
@global_var_1f82c.642 = global i32 0
@global_var_15c78.644 = constant i32 -509587456
@global_var_17404.646 = constant i32 33554944
@global_var_1f77c.647 = global i32* @global_var_17404.646
@global_var_1f75c.650 = global i32 0
@global_var_1f830.654 = local_unnamed_addr global i32 0
@global_var_1562c.656 = constant i32 -352321419
@global_var_1f608.660 = global i32 -1
@global_var_1f840.663 = global i32 0
@global_var_1f844.665 = local_unnamed_addr global i32 0
@global_var_15860.666 = constant i32 -390234096
@global_var_172f8.668 = constant [10 x i8] c"/dev/null\00"
@global_var_1f848.670 = global i32 0
@global_var_1f834.675 = local_unnamed_addr global i32 0
@global_var_1f838.677 = global i32 0
@global_var_14850.679 = constant i32 -369096946
@global_var_1f774 = external local_unnamed_addr global i32
@global_var_14808.689 = constant i32 -442564608
@global_var_15b28.691 = constant i32 -335544664
@global_var_15c44.694 = constant i32 -275775369
@global_var_163bc.695 = constant i32 -382910352
@global_var_1f854.697 = global i32 0
@global_var_1fabc.700 = global i32 0
@global_var_1fac0.702 = global i32 0
@global_var_1f60c.705 = global i32 0
@global_var_1f780.3 = external global i8*
@global_var_1f79c.54 = external global i8*
@global_var_1f79d.65 = global i8 0
@2 = internal constant [2 x i8] c"\01\00"
@global_var_1f634.117 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0)
@global_var_1f864.120 = external global i8*
@global_var_1f7c8.157 = external global i8*
@global_var_1f80c.194 = external global i8*
@global_var_1f80d.195 = local_unnamed_addr global i8 0
@global_var_1f7e0.204 = external global i8*
@global_var_1f800.209 = local_unnamed_addr global i8 0
@global_var_1f801.217 = local_unnamed_addr global i8 0
@global_var_1f7f8.320 = local_unnamed_addr global i8 0
@global_var_1f7f0.317 = local_unnamed_addr global i8 0
@global_var_16b00.23 = constant [2 x i8] c"/\00"

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  store i32 %v0_80a0, i32* @r0, align 4
  %v1_80a4 = call i32 @function_16a6c(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1f780.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1f780.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1f624.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1f624.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1f624.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1f624.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1f780.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1f624.6, { 1, 0 }
  uselistorder i8** @global_var_1f780.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32 %arg1) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8124
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8124, %bb
  %v5_812c = load i32, i32* @r0, align 4
  ret i32 %v5_812c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 128536 to i32*), align 8
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 128536

bb2:                                              ; preds = %.thread
  ret i32 128536

; uselistorder directives
  uselistorder i32 128536, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_15914(i32 ptrtoint (i32* @global_var_10044.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 92840, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_152dc()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_81cc:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-328 = alloca i32, align 4
  %stack_var_-200 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-10568 = alloca i32, align 4
  %stack_var_-404 = alloca i32, align 4
  %stack_var_-20809 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_81cc = load i32, i32* @r4, align 4
  store i32 %v3_81cc, i32* %stack_var_-36, align 4
  %v6_81cc = load i32, i32* @r5, align 4
  %v9_81cc = load i32, i32* @r6, align 4
  %v15_81cc = load i32, i32* @r8, align 4
  %v1_81d8 = urem i32 %arg3, 256
  store i32 %v1_81d8, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_81e4 = urem i32 %arg1, 256
  store i32 %v1_81e4, i32* %ip.global-to-local, align 4
  store i32 21, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v1_81d8, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v5_8200 = inttoptr i32 %arg4 to i32*
  %v6_8200 = call i32 @function_9f84(i32 %v1_81d8, i32* %v5_8200, i32 21, i32 0, i32 %arg2)
  %v0_8204 = load i32, i32* @r5, align 4
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  %v0_8210 = load i32, i32* @r4, align 4
  store i32 %v0_8210, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_16afc.21 to i32), i32* %r3.global-to-local, align 4
  %v6_8218 = inttoptr i32 %v0_8204 to i32*
  %v7_8218 = call i32 @function_9f84(i32 %v0_8210, i32* %v6_8218, i32 20, i32 ptrtoint ([4 x i8]* @global_var_16afc.21 to i32), i32 %v6_8200)
  %v0_821c = load i32, i32* @r5, align 4
  store i32 %v0_821c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v7_8218, i32* %fp.global-to-local, align 4
  %v0_822c = load i32, i32* @r4, align 4
  store i32 %v0_822c, i32* %r0.global-to-local, align 4
  %v5_8230 = inttoptr i32 %v0_821c to i32*
  %v6_8230 = call i32 @function_9f84(i32 %v0_822c, i32* %v5_8230, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v0_8234 = load i32, i32* @r5, align 4
  store i32 %v0_8234, i32* %r1.global-to-local, align 4
  store i32 %v6_8230, i32* %sb.global-to-local, align 4
  store i32 22, i32* %r2.global-to-local, align 4
  %v0_8240 = load i32, i32* @r4, align 4
  store i32 %v0_8240, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([2 x i8]* @global_var_16b00.23 to i32), i32* %r3.global-to-local, align 4
  %v5_8248 = inttoptr i32 %v0_8234 to i32*
  %v6_8248 = call i32 @function_9f84(i32 %v0_8240, i32* %v5_8248, i32 22, i32 ptrtoint ([2 x i8]* @global_var_16b00.23 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_824c = load i32, i32* @r5, align 4
  store i32 %v0_824c, i32* %r1.global-to-local, align 4
  store i32 %v6_8248, i32* @sl, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_8258 = load i32, i32* @r4, align 4
  store i32 %v0_8258, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_8260 = inttoptr i32 %v0_824c to i32*
  %v5_8260 = call i32 @function_a4e8(i32 %v0_8258, i32* %v4_8260, i32 24, i32 1)
  %v0_8264 = load i32, i32* @r5, align 4
  store i32 %v0_8264, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  store i32 %v5_8260, i32* @r6, align 4
  %v0_8274 = load i32, i32* @r4, align 4
  store i32 %v0_8274, i32* %r0.global-to-local, align 4
  %v4_8278 = inttoptr i32 %v0_8264 to i32*
  %v5_8278 = call i32 @function_a4e8(i32 %v0_8274, i32* %v4_8278, i32 7, i32 80)
  %v2_8280 = ptrtoint i32* %stack_var_-20809 to i32
  %v3_8288 = mul i32 %v5_8278, 65536
  store i32 %v3_8288, i32* %r3.global-to-local, align 4
  %tmp199 = bitcast i32* %stack_var_-20809 to i8*
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 10241, i32* @r2, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_829c = urem i32 %v5_8278, 65536
  store i32 %v3_829c, i32* %r8.global-to-local, align 4
  %v3_82a0 = call i32 @function_14870(i8* %tmp199, i32 0)
  store i32 %v3_82a0, i32* %r0.global-to-local, align 4
  %v0_82a4 = load i32, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_82a4 = icmp slt i32 %v0_82a4, 0
  store i1 %v1_82a4, i1* %cpsr_n.global-to-local, align 1
  %v2_82a4 = icmp eq i32 %v0_82a4, 0
  store i1 %v2_82a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_82a4, label %.thread13, label %bb

bb:                                               ; preds = %dec_label_pc_81cc
  %v1_82a8 = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v2_82a8 = icmp slt i32 %v1_82a8, 0
  store i1 %v2_82a8, i1* %cpsr_n.global-to-local, align 1
  %v3_82a8 = icmp eq i32 %v1_82a8, 0
  store i1 %v3_82a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_82a8, label %bb200, label %dec_label_pc_82c4

.thread13:                                        ; preds = %dec_label_pc_81cc
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_82b8

bb200:                                            ; preds = %bb
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_82b8

dec_label_pc_82b8:                                ; preds = %bb200, %dec_label_pc_82e4, %.thread13, %dec_label_pc_82d4, %dec_label_pc_82c4
  %v29_82c0 = phi i32 [ %v2_82e8, %dec_label_pc_82e4 ], [ %v3_82a0, %.thread13 ], [ %v3_82a0, %bb200 ], [ %v2_82d8, %dec_label_pc_82d4 ], [ %v2_82c8, %dec_label_pc_82c4 ]
  %v2_82c0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_82c0, i32* %r4.global-to-local, align 4
  store i32 %v6_81cc, i32* %r5.global-to-local, align 4
  store i32 %v9_81cc, i32* %r6.global-to-local, align 4
  store i32 %v15_81cc, i32* %r8.global-to-local, align 4
  ret i32 %v29_82c0

dec_label_pc_82c4:                                ; preds = %bb
  store i32 0, i32* @r4, align 4
  store i32 %v0_82a4, i32* %r0.global-to-local, align 4
  %v1_82c8 = inttoptr i32 %v0_82a4 to i8*
  %v2_82c8 = call i32 @function_13874(i8* %v1_82c8)
  store i32 %v2_82c8, i32* %r0.global-to-local, align 4
  %v1_82cc = add i32 %v2_82c8, -255
  %v2_82cc = icmp ugt i32 %v2_82c8, 254
  store i1 %v2_82cc, i1* %cpsr_c.global-to-local, align 1
  %v3_82cc = sub i32 254, %v2_82c8
  %v4_82cc = and i32 %v3_82cc, %v2_82c8
  %v5_82cc = icmp slt i32 %v4_82cc, 0
  store i1 %v5_82cc, i1* %cpsr_v.global-to-local, align 1
  %v6_82cc = icmp slt i32 %v1_82cc, 0
  store i1 %v6_82cc, i1* %cpsr_n.global-to-local, align 1
  %v7_82cc = icmp eq i32 %v2_82c8, 255
  store i1 %v7_82cc, i1* %cpsr_z.global-to-local, align 1
  %v8_82d0 = icmp sgt i32 %v2_82c8, 255
  br i1 %v8_82d0, label %dec_label_pc_82b8, label %dec_label_pc_82d4

dec_label_pc_82d4:                                ; preds = %dec_label_pc_82c4
  %v0_82d4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_82d4, i32* %r0.global-to-local, align 4
  %v1_82d8 = inttoptr i32 %v0_82d4 to i8*
  %v2_82d8 = call i32 @function_13874(i8* %v1_82d8)
  store i32 %v2_82d8, i32* %r0.global-to-local, align 4
  %v1_82dc = add i32 %v2_82d8, -127
  %v2_82dc = icmp ugt i32 %v2_82d8, 126
  store i1 %v2_82dc, i1* %cpsr_c.global-to-local, align 1
  %v3_82dc = sub i32 126, %v2_82d8
  %v4_82dc = and i32 %v3_82dc, %v2_82d8
  %v5_82dc = icmp slt i32 %v4_82dc, 0
  store i1 %v5_82dc, i1* %cpsr_v.global-to-local, align 1
  %v6_82dc = icmp slt i32 %v1_82dc, 0
  store i1 %v6_82dc, i1* %cpsr_n.global-to-local, align 1
  %v7_82dc = icmp eq i32 %v2_82d8, 127
  store i1 %v7_82dc, i1* %cpsr_z.global-to-local, align 1
  %v8_82e0 = icmp sgt i32 %v2_82d8, 127
  br i1 %v8_82e0, label %dec_label_pc_82b8, label %dec_label_pc_82e4

dec_label_pc_82e4:                                ; preds = %dec_label_pc_82d4
  %v0_82e4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_82e4, i32* %r0.global-to-local, align 4
  %v1_82e8 = inttoptr i32 %v0_82e4 to i8*
  %v2_82e8 = call i32 @function_13874(i8* %v1_82e8)
  store i32 %v2_82e8, i32* %r0.global-to-local, align 4
  %v1_82ec = add i32 %v2_82e8, -9
  %v2_82ec = icmp ugt i32 %v2_82e8, 8
  store i1 %v2_82ec, i1* %cpsr_c.global-to-local, align 1
  %v3_82ec = sub i32 8, %v2_82e8
  %v4_82ec = and i32 %v3_82ec, %v2_82e8
  %v5_82ec = icmp slt i32 %v4_82ec, 0
  store i1 %v5_82ec, i1* %cpsr_v.global-to-local, align 1
  %v6_82ec = icmp slt i32 %v1_82ec, 0
  store i1 %v6_82ec, i1* %cpsr_n.global-to-local, align 1
  %v7_82ec = icmp eq i32 %v2_82e8, 9
  store i1 %v7_82ec, i1* %cpsr_z.global-to-local, align 1
  %v7_82f0 = icmp sgt i32 %v2_82e8, 9
  br i1 %v7_82f0, label %dec_label_pc_82b8, label %bb201

bb201:                                            ; preds = %dec_label_pc_82e4
  %v10_82f0 = ptrtoint i32* %stack_var_-404 to i32
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v8_82f4 = load i32, i32* @r4, align 4
  %v10_82f4 = add i32 %v10_82f0, 364
  %v11_82f4 = inttoptr i32 %v10_82f4 to i32*
  store i32 %v8_82f4, i32* %v11_82f4, align 4
  br label %dec_label_pc_82fc

dec_label_pc_82fc:                                ; preds = %bb201, %bb205
  %v0_82fc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_82fc, i32* %r0.global-to-local, align 4
  %v1_8300 = inttoptr i32 %v0_82fc to i8*
  %v2_8300 = call i32 @function_13874(i8* %v1_8300)
  store i32 %v2_8300, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_8308 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8308, i32* %ip.global-to-local, align 4
  %v2_830c = sub i32 %v2_8300, %v3_8308
  %v3_830c = icmp uge i32 %v2_8300, %v3_8308
  store i1 %v3_830c, i1* %cpsr_c.global-to-local, align 1
  %v4_830c = xor i32 %v3_8308, %v2_8300
  %v5_830c = xor i32 %v2_830c, %v2_8300
  %v6_830c = and i32 %v5_830c, %v4_830c
  %v7_830c = icmp slt i32 %v6_830c, 0
  store i1 %v7_830c, i1* %cpsr_v.global-to-local, align 1
  %v8_830c = icmp slt i32 %v2_830c, 0
  store i1 %v8_830c, i1* %cpsr_n.global-to-local, align 1
  %v9_830c = icmp eq i32 %v2_8300, %v3_8308
  store i1 %v9_830c, i1* %cpsr_z.global-to-local, align 1
  %v7_8310 = icmp sgt i32 %v2_8300, %v3_8308
  br i1 %v7_8310, label %dec_label_pc_8314, label %dec_label_pc_8340

dec_label_pc_8314:                                ; preds = %dec_label_pc_82fc
  %v0_8314 = load i32, i32* %fp.global-to-local, align 4
  %v2_8314 = add i32 %v0_8314, %v3_8308
  %v3_8314 = inttoptr i32 %v2_8314 to i8*
  %v4_8314 = load i8, i8* %v3_8314, align 1
  %v6_8314 = zext i8 %v4_8314 to i32
  %v1_8318 = add nsw i32 %v6_8314, -32
  store i32 %v1_8318, i32* %r2.global-to-local, align 4
  %v1_831c = add nsw i32 %v6_8314, -97
  store i32 %v1_831c, i32* %r3.global-to-local, align 4
  %v2_8320 = icmp ugt i32 %v1_831c, 24
  store i1 %v2_8320, i1* %cpsr_c.global-to-local, align 1
  %v3_8320 = sub nsw i32 121, %v6_8314
  %v4_8320 = and i32 %v3_8320, %v1_831c
  %v5_8320 = icmp slt i32 %v4_8320, 0
  store i1 %v5_8320, i1* %cpsr_v.global-to-local, align 1
  %v6_8320 = icmp ult i8 %v4_8314, 122
  store i1 %v6_8320, i1* %cpsr_n.global-to-local, align 1
  %v7_8320 = icmp eq i32 %v1_831c, 25
  store i1 %v7_8320, i1* %cpsr_z.global-to-local, align 1
  %v2_8324 = xor i1 %v2_8320, true
  %v3_8324 = or i1 %v7_8320, %v2_8324
  br i1 %v3_8324, label %bb202, label %bb203

bb202:                                            ; preds = %dec_label_pc_8314
  %v5_8324 = trunc i32 %v1_8318 to i8
  store i8 %v5_8324, i8* %v3_8314, align 1
  %v0_8328.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_8328.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb203

bb203:                                            ; preds = %dec_label_pc_8314, %bb202
  %v1_832c = phi i1 [ %v2_8320, %dec_label_pc_8314 ], [ %v1_8328.pre, %bb202 ]
  %v0_832c = phi i1 [ false, %dec_label_pc_8314 ], [ %v0_8328.pre, %bb202 ]
  %v2_8328 = xor i1 %v1_832c, true
  %v3_8328 = or i1 %v0_832c, %v2_8328
  br i1 %v3_8328, label %bb204, label %._crit_edge

._crit_edge:                                      ; preds = %bb203
  %v0_8334.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb205

bb204:                                            ; preds = %bb203
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v7_832c = load i32, i32* %v11_82f4, align 4
  store i32 %v7_832c, i32* %ip.global-to-local, align 4
  br label %bb205

bb205:                                            ; preds = %._crit_edge, %bb204
  %v0_8334 = phi i32 [ %v0_8334.pre, %._crit_edge ], [ %v7_832c, %bb204 ]
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v1_8334 = add i32 %v0_8334, 1
  store i32 %v1_8334, i32* %ip.global-to-local, align 4
  store i32 %v1_8334, i32* %stack_var_-40, align 4
  br label %dec_label_pc_82fc

dec_label_pc_8340:                                ; preds = %dec_label_pc_82fc
  store i32 36, i32* %r0.global-to-local, align 4
  %v1_8344 = call i32 @function_12f50(i32 36)
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_834c = call i32 @function_12f50(i32 37)
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_8354 = call i32 @function_12f50(i32 38)
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_835c = call i32 @function_12f50(i32 39)
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_8364 = call i32 @function_12f50(i32 40)
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_836c = call i32 @function_12f50(i32 41)
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_8374 = call i32 @function_12f50(i32 42)
  store i32 43, i32* %r0.global-to-local, align 4
  %v1_837c = call i32 @function_12f50(i32 43)
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_8384 = call i32 @function_12f50(i32 44)
  store i32 45, i32* %r0.global-to-local, align 4
  %v1_838c = call i32 @function_12f50(i32 45)
  store i32 %v1_838c, i32* %r0.global-to-local, align 4
  %v0_8390 = load i32, i32* @r6, align 4
  %v2_8390 = add i32 %v0_8390, -256
  %v3_8390 = icmp ugt i32 %v0_8390, 255
  store i1 %v3_8390, i1* %cpsr_c.global-to-local, align 1
  %v4_8390 = sub i32 255, %v0_8390
  %v5_8390 = and i32 %v4_8390, %v0_8390
  %v6_8390 = icmp slt i32 %v5_8390, 0
  store i1 %v6_8390, i1* %cpsr_v.global-to-local, align 1
  %v7_8390 = icmp slt i32 %v2_8390, 0
  store i1 %v7_8390, i1* %cpsr_n.global-to-local, align 1
  %v8_8390 = icmp eq i32 %v0_8390, 256
  store i1 %v8_8390, i1* %cpsr_z.global-to-local, align 1
  %v5_8394 = icmp slt i32 %v0_8390, 256
  br i1 %v5_8394, label %thread-pre-split, label %bb206

bb206:                                            ; preds = %dec_label_pc_8340
  store i32 256, i32* @r6, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_8340, %bb206
  %v0_839c = phi i32 [ 256, %bb206 ], [ %v0_8390, %dec_label_pc_8340 ]
  store i32 46, i32* %r0.global-to-local, align 4
  %v1_83a0 = call i32 @function_12f50(i32 46)
  store i32 %v0_839c, i32* %r0.global-to-local, align 4
  store i32 3140, i32* %r1.global-to-local, align 4
  %v2_83b0 = call i32 @function_14e34(i32 %v0_839c, i32 3140)
  store i32 %v2_83b0, i32* %r0.global-to-local, align 4
  store i32 %v0_839c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_83b8 = icmp slt i32 %v0_839c, 0
  store i1 %v1_83b8, i1* %cpsr_n.global-to-local, align 1
  %v2_83b8 = icmp eq i32 %v0_839c, 0
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_83b0, i32* @r5, align 4
  %tmp207 = icmp slt i32 %v0_839c, 1
  br i1 %tmp207, label %dec_label_pc_84f4, label %dec_label_pc_83c8

dec_label_pc_83c8:                                ; preds = %thread-pre-split
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_83cc

dec_label_pc_83cc:                                ; preds = %dec_label_pc_9e70, %dec_label_pc_83c8
  %v1_83d8 = phi i32 [ %v1_9e8c, %dec_label_pc_9e70 ], [ %v2_83b0, %dec_label_pc_83c8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 %v1_81e4, i32* %r1.global-to-local, align 4
  %v2_83d8 = inttoptr i32 %v1_83d8 to i32*
  store i32 -1, i32* %v2_83d8, align 4
  %v0_83dc = load i32, i32* %r3.global-to-local, align 4
  %v1_83dc = trunc i32 %v0_83dc to i8
  %v2_83dc = load i32, i32* @r5, align 4
  %v3_83dc = add i32 %v2_83dc, 4
  %v4_83dc = inttoptr i32 %v3_83dc to i8*
  store i8 %v1_83dc, i8* %v4_83dc, align 1
  %v0_83e0 = load i32, i32* @r7, align 4
  store i32 %v0_83e0, i32* %r0.global-to-local, align 4
  %v2_83e4 = call i32 @function_1405c(i32 %v0_83e0, i32 %v1_81e4)
  store i32 %v2_83e4, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v2_83f0 = and i32 %v2_83e4, 536870912
  %v3_83f0 = icmp ne i32 %v2_83f0, 0
  store i1 %v3_83f0, i1* %cpsr_c.global-to-local, align 1
  %v5_83f0 = mul i32 %v2_83e4, 24
  store i32 %v5_83f0, i32* %r3.global-to-local, align 4
  %v2_83f4 = add i32 %v5_83f0, %arg2
  store i32 %v2_83f4, i32* @r6, align 4
  %v1_83f8 = add i32 %v2_83f4, 16
  %v2_83f8 = inttoptr i32 %v1_83f8 to i32*
  %v3_83f8 = load i32, i32* %v2_83f8, align 4
  store i32 %v3_83f8, i32* %r2.global-to-local, align 4
  %v0_83fc = load i32, i32* @r5, align 4
  %v1_83fc = add i32 %v0_83fc, 532
  store i32 %v1_83fc, i32* @lr, align 4
  store i32 %v1_83fc, i32* @r0, align 4
  %v0_8404 = load i32, i32* @sl, align 4
  store i32 %v0_8404, i32* %r1.global-to-local, align 4
  %v2_8408 = add i32 %v0_83fc, 16
  %v3_8408 = inttoptr i32 %v2_8408 to i32*
  store i32 %v3_83f8, i32* %v3_8408, align 4
  %v0_840c = load i32, i32* @lr, align 4
  %v2_8410 = inttoptr i32 %v1_83fc to i8*
  %v3_8410 = call i32 @function_1389c(i8* %v2_8410, i32 %v0_8404)
  store i32 %v3_8410, i32* %r0.global-to-local, align 4
  %v0_8414 = load i32, i32* @r5, align 4
  %v1_8414 = add i32 %v0_8414, 532
  %v2_8414 = inttoptr i32 %v1_8414 to i8*
  %v3_8414 = load i8, i8* %v2_8414, align 1
  %v4_8414 = zext i8 %v3_8414 to i32
  store i32 %v4_8414, i32* %r3.global-to-local, align 4
  %v2_8418 = icmp ugt i8 %v3_8414, 46
  store i1 %v2_8418, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8418 = icmp ult i8 %v3_8414, 47
  store i1 %v6_8418, i1* %cpsr_n.global-to-local, align 1
  %v7_8418 = icmp eq i8 %v3_8414, 47
  store i1 %v7_8418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8418, label %dec_label_pc_8444, label %dec_label_pc_8420

dec_label_pc_8420:                                ; preds = %dec_label_pc_83cc
  store i32 %v0_840c, i32* %r0.global-to-local, align 4
  %v1_8424 = inttoptr i32 %v0_840c to i8*
  %v2_8424 = call i32 @function_13874(i8* %v1_8424)
  store i32 %v2_8424, i32* @r2, align 4
  %v0_842c = load i32, i32* @r5, align 4
  %v1_8430 = add i32 %v0_842c, 533
  store i32 %v1_8430, i32* @r0, align 4
  store i32 %v0_840c, i32* @r1, align 4
  %v3_8438 = call i32 @function_14860(i32 %v1_8430, i32 %v0_840c, i32 %v2_8424)
  store i32 %v3_8438, i32* %r0.global-to-local, align 4
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_8440 = load i32, i32* @r5, align 4
  %v3_8440 = add i32 %v2_8440, 532
  %v4_8440 = inttoptr i32 %v3_8440 to i8*
  store i8 47, i8* %v4_8440, align 1
  %v0_8448.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_8444

dec_label_pc_8444:                                ; preds = %dec_label_pc_83cc, %dec_label_pc_8420
  %v0_8448 = phi i32 [ %v0_8414, %dec_label_pc_83cc ], [ %v0_8448.pre, %dec_label_pc_8420 ]
  %v0_8444 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8444, i32* %r1.global-to-local, align 4
  %v1_8448 = add i32 %v0_8448, 1440
  store i32 %v1_8448, i32* @r0, align 4
  %v2_844c = inttoptr i32 %v1_8448 to i8*
  %v3_844c = call i32 @function_1389c(i8* %v2_844c, i32 %v0_8444)
  %v0_8450 = load i32, i32* @r5, align 4
  %v0_8454 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8454, i32* %r1.global-to-local, align 4
  %v1_8458 = add i32 %v0_8450, 1431
  store i32 %v1_8458, i32* @r0, align 4
  %v2_845c = inttoptr i32 %v1_8458 to i8*
  %v3_845c = call i32 @function_1389c(i8* %v2_845c, i32 %v0_8454)
  %v0_8460 = load i32, i32* @r5, align 4
  %v1_8464 = add i32 %v0_8460, 789
  store i32 %v1_8464, i32* @r0, align 4
  %v0_8468 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8468, i32* %r1.global-to-local, align 4
  %v2_846c = inttoptr i32 %v1_8464 to i8*
  %v3_846c = call i32 @function_1389c(i8* %v2_846c, i32 %v0_8468)
  store i32 %v3_846c, i32* %r0.global-to-local, align 4
  %v0_8470 = load i32, i32* @r6, align 4
  %v1_8470 = add i32 %v0_8470, 20
  %v2_8470 = inttoptr i32 %v1_8470 to i8*
  %v3_8470 = load i8, i8* %v2_8470, align 1
  %v4_8470 = zext i8 %v3_8470 to i32
  store i32 %v4_8470, i32* %r3.global-to-local, align 4
  %v2_8474 = icmp ugt i8 %v3_8470, 30
  store i1 %v2_8474, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8474 = icmp ult i8 %v3_8470, 31
  store i1 %v6_8474, i1* %cpsr_n.global-to-local, align 1
  %v7_8474 = icmp eq i8 %v3_8470, 31
  store i1 %v7_8474, i1* %cpsr_z.global-to-local, align 1
  %v2_8478 = xor i1 %v7_8474, true
  %v3_8478 = and i1 %v2_8474, %v2_8478
  br i1 %v3_8478, label %dec_label_pc_84c8, label %dec_label_pc_847c

dec_label_pc_847c:                                ; preds = %dec_label_pc_8444
  %v1_847c = add i32 %v0_8470, 16
  %v2_847c = inttoptr i32 %v1_847c to i32*
  %v3_847c = load i32, i32* %v2_847c, align 4
  store i32 %v3_847c, i32* @r4, align 4
  %v0_8480 = call i32 @function_10a44()
  store i32 %v0_8480, i32* %r0.global-to-local, align 4
  %v0_8484 = load i32, i32* @r4, align 4
  %v1_8488 = and i32 %v0_8484, 65280
  store i32 %v1_8488, i32* %r3.global-to-local, align 4
  %v1_8484 = udiv i32 %v0_8484, 256
  %v3_848c = and i32 %v1_8484, 65280
  store i32 %v3_848c, i32* %r2.global-to-local, align 4
  %v3_8490 = mul i32 %v0_8484, 16777216
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_8494 = mul nuw nsw i32 %v1_8488, 256
  %v5_8494 = or i32 %v4_8494, %v3_8490
  store i32 %v5_8494, i32* %r1.global-to-local, align 4
  %v0_8498 = load i32, i32* @r6, align 4
  %v1_8498 = add i32 %v0_8498, 20
  %v2_8498 = inttoptr i32 %v1_8498 to i8*
  %v3_8498 = load i8, i8* %v2_8498, align 1
  %v4_8498 = zext i8 %v3_8498 to i32
  store i32 %v4_8498, i32* %ip.global-to-local, align 4
  %v2_84a0 = call i32 @llvm.bswap.i32(i32 %v0_8484)
  %v7_84a4 = lshr i32 %v0_8480, %v4_8498
  %v8_84a4 = add i32 %v7_84a4, %v2_84a0
  store i32 %v8_84a4, i32* %r2.global-to-local, align 4
  %v3_84b0 = mul i32 %v8_84a4, 16777216
  %v1_84b4 = and i32 %v8_84a4, 65280
  store i32 %v1_84b4, i32* %r0.global-to-local, align 4
  %v4_84b8 = mul nuw nsw i32 %v1_84b4, 256
  %v5_84b8 = or i32 %v4_84b8, %v3_84b0
  store i32 %v5_84b8, i32* %r1.global-to-local, align 4
  %v2_84bc = and i32 %v8_84a4, 8388608
  %v3_84bc = icmp ne i32 %v2_84bc, 0
  store i1 %v3_84bc, i1* %cpsr_c.global-to-local, align 1
  %v2_84c0 = call i32 @llvm.bswap.i32(i32 %v8_84a4)
  store i32 %v2_84c0, i32* %r3.global-to-local, align 4
  %v1_84c4 = load i32, i32* @r5, align 4
  %v2_84c4 = add i32 %v1_84c4, 16
  %v3_84c4 = inttoptr i32 %v2_84c4 to i32*
  store i32 %v2_84c0, i32* %v3_84c4, align 4
  br label %dec_label_pc_84c8

dec_label_pc_84c8:                                ; preds = %dec_label_pc_8444, %dec_label_pc_847c
  %v0_84c8 = call i32 @function_10a44()
  store i32 %v0_84c8, i32* %r0.global-to-local, align 4
  store i32 5, i32* %r1.global-to-local, align 4
  %v2_84d0 = call i32 @function_13f90(i32 %v0_84c8, i32 5)
  store i32 %v2_84d0, i32* %r0.global-to-local, align 4
  %v1_84d4 = add i32 %v2_84d0, -4
  %v3_84d4 = sub i32 3, %v2_84d0
  %v4_84d4 = and i32 %v3_84d4, %v2_84d0
  %v5_84d4 = icmp slt i32 %v4_84d4, 0
  store i1 %v5_84d4, i1* %cpsr_v.global-to-local, align 1
  %v6_84d4 = icmp slt i32 %v1_84d4, 0
  store i1 %v6_84d4, i1* %cpsr_n.global-to-local, align 1
  %v7_84d4 = icmp eq i32 %v2_84d0, 4
  store i1 %v7_84d4, i1* %cpsr_z.global-to-local, align 1
  %v5_84d8 = and i32 %v2_84d0, 1073741824
  %v6_84d8 = icmp ne i32 %v5_84d8, 0
  store i1 %v6_84d8, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v2_84d0, label %dec_label_pc_9e70 [
    i32 0, label %dec_label_pc_9ed4
    i32 1, label %dec_label_pc_9f00
    i32 2, label %dec_label_pc_9f2c
    i32 3, label %dec_label_pc_9f58
    i32 4, label %dec_label_pc_9e48
  ]

dec_label_pc_84f4:                                ; preds = %thread-pre-split
  %v1_84f8 = add i32 %v2_83b0, 1456
  %v0_8500 = load i32, i32* %r8.global-to-local, align 4
  %v1_8500 = urem i32 %v0_8500, 256
  store i32 %v1_8500, i32* %r3.global-to-local, align 4
  %v1_8504 = add i32 %v2_83b0, 1464
  store i32 %v1_8504, i32* %r1.global-to-local, align 4
  %v2_8508 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_8508, i32* %r2.global-to-local, align 4
  store i32 %v1_84f8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_8528.preheader

dec_label_pc_8528.preheader:                      ; preds = %dec_label_pc_84f4, %dec_label_pc_9e94
  %storemerge148.in.in = phi i32 [ %v0_9ea8, %dec_label_pc_9e94 ], [ %v0_8500, %dec_label_pc_84f4 ]
  %stack_var_-20868.0.ph = phi i32 [ %v1_9ea0, %dec_label_pc_9e94 ], [ %v1_84f8, %dec_label_pc_84f4 ]
  %stack_var_-20860.0.ph = phi i32 [ %v1_9ea8, %dec_label_pc_9e94 ], [ %v1_8500, %dec_label_pc_84f4 ]
  %stack_var_-20872.0.ph = phi i32 [ %v1_9eac, %dec_label_pc_9e94 ], [ %v1_8504, %dec_label_pc_84f4 ]
  %stack_var_-20856.0.ph = phi i32 [ %v2_9eb0, %dec_label_pc_9e94 ], [ %v2_8508, %dec_label_pc_84f4 ]
  %storemerge148.in = and i32 %storemerge148.in.in, 128
  %storemerge148 = icmp ne i32 %storemerge148.in, 0
  store i1 %storemerge148, i1* %cpsr_c.global-to-local, align 1
  %v3_9eb8 = udiv i32 %storemerge148.in.in, 256
  store i32 %v3_9eb8, i32* %r8.global-to-local, align 4
  %v4_8590 = mul nuw nsw i32 %stack_var_-20860.0.ph, 256
  %v2_86d0 = ptrtoint i32* %stack_var_-148 to i32
  %v2_86e8 = ptrtoint i32* %stack_var_-40 to i32
  %v2_8728 = ptrtoint i32* %stack_var_-72 to i32
  %v3_8734 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v2_8748 = ptrtoint i32* %stack_var_-36 to i32
  %v1_8940 = inttoptr i32 %stack_var_-20856.0.ph to i8*
  %v1_8c94 = icmp slt i32 %v6_8200, 0
  %v2_8c94 = icmp eq i32 %v6_8200, 0
  %v4_8ce8 = inttoptr i32 %stack_var_-20856.0.ph to i32*
  %v1_8b90 = inttoptr i32 %v6_8200 to i8*
  %v2_87b4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_87b8 = ptrtoint i32* %stack_var_-200 to i32
  %v2_87bc = ptrtoint i32* %stack_var_-328 to i32
  %v2_921c = add i32 %v2_8748, -20773
  %v2_88a8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_88b4 = ptrtoint i32* %stack_var_-48 to i32
  %v5_8590 = or i32 %v4_8590, %v3_9eb8
  %v1_8594 = and i32 %v3_9eb8, 128
  %v2_8594 = icmp ne i32 %v1_8594, 0
  %v3_8594248 = udiv i32 %v5_8590, 256
  %v1_859c = add i32 %stack_var_-20872.0.ph, -1464
  %v1_85a4 = add i32 %stack_var_-20872.0.ph, -33
  %sext = mul i32 %v3_8594248, 16777216
  %v4_8710 = sdiv i32 %sext, 16777216
  %sext10 = mul i32 %v3_9eb8, 16777216
  %v4_8718 = sdiv i32 %sext10, 16777216
  %v2_85dc = add i32 %v2_86d0, 112
  br label %dec_label_pc_8528

dec_label_pc_8528:                                ; preds = %dec_label_pc_8794, %dec_label_pc_878c, %dec_label_pc_8574, %dec_label_pc_8838, %dec_label_pc_8528.preheader
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_852c = call i32 @function_14504(i32* null)
  store i32 %v2_852c, i32* %r0.global-to-local, align 4
  store i32 %v2_852c, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 20684, i32* %ip.global-to-local, align 4
  %v2_854c256 = load i32, i32* @sp, align 4
  %v3_854c257 = add i32 %v2_854c256, 20684
  %v4_854c258 = inttoptr i32 %v3_854c257 to i32*
  store i32 0, i32* %v4_854c258, align 4
  br label %dec_label_pc_853c.dec_label_pc_853c_crit_edge

dec_label_pc_853c.dec_label_pc_853c_crit_edge:    ; preds = %dec_label_pc_8528, %dec_label_pc_853c.dec_label_pc_853c_crit_edge
  %v0_853c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_854c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_8540 = add i32 %v0_853c.pre, 4
  store i32 %v1_8540, i32* %r3.global-to-local, align 4
  %v1_8544 = add i32 %v0_853c.pre, 20684
  store i32 %v1_8544, i32* %ip.global-to-local, align 4
  %v7_8548 = icmp eq i32 %v1_8540, 128
  %v2_854c = load i32, i32* @sp, align 4
  %v3_854c = add i32 %v2_854c, %v1_8544
  %v4_854c = inttoptr i32 %v3_854c to i32*
  store i32 %v0_854c.pre, i32* %v4_854c, align 4
  br i1 %v7_8548, label %dec_label_pc_8554, label %dec_label_pc_853c.dec_label_pc_853c_crit_edge

dec_label_pc_8554:                                ; preds = %dec_label_pc_853c.dec_label_pc_853c_crit_edge
  %v1_8548 = add i32 %v0_853c.pre, -124
  %v6_8548 = icmp slt i32 %v1_8548, 0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_8548, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_8554 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_8554, i32* %r0.global-to-local, align 4
  %v1_8560259 = add i32 %v0_8554, 4
  store i32 %v1_8560259, i32* %r3.global-to-local, align 4
  %v1_8564260 = add i32 %v0_8554, 20556
  store i32 %v1_8564260, i32* %lr.global-to-local, align 4
  %v7_8568261 = icmp eq i32 %v1_8560259, 128
  %v2_856c262 = load i32, i32* @sp, align 4
  %v3_856c263 = add i32 %v2_856c262, %v1_8564260
  %v4_856c264 = inttoptr i32 %v3_856c263 to i32*
  store i32 %v0_8554, i32* %v4_856c264, align 4
  br i1 %v7_8568261, label %dec_label_pc_8574, label %dec_label_pc_855c.dec_label_pc_855c_crit_edge

dec_label_pc_855c.dec_label_pc_855c_crit_edge:    ; preds = %dec_label_pc_8554, %dec_label_pc_855c.dec_label_pc_855c_crit_edge
  %v0_855c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_856c.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_8560 = add i32 %v0_855c.pre, 4
  store i32 %v1_8560, i32* %r3.global-to-local, align 4
  %v1_8564 = add i32 %v0_855c.pre, 20556
  store i32 %v1_8564, i32* %lr.global-to-local, align 4
  %v7_8568 = icmp eq i32 %v1_8560, 128
  %v2_856c = load i32, i32* @sp, align 4
  %v3_856c = add i32 %v2_856c, %v1_8564
  %v4_856c = inttoptr i32 %v3_856c to i32*
  store i32 %v0_856c.pre, i32* %v4_856c, align 4
  br i1 %v7_8568, label %dec_label_pc_8574, label %dec_label_pc_855c.dec_label_pc_855c_crit_edge

dec_label_pc_8574:                                ; preds = %dec_label_pc_855c.dec_label_pc_855c_crit_edge, %dec_label_pc_8554
  store i32 %v0_839c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_83b8, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %tmp207, label %dec_label_pc_8528, label %dec_label_pc_8580

dec_label_pc_8580:                                ; preds = %dec_label_pc_8574
  store i32 %stack_var_-20872.0.ph, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 %v5_8590, i32* %r2.global-to-local, align 4
  store i1 %v2_8594, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_8594248, i32* %lr.global-to-local, align 4
  %v0_8598 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8598, i32* @sl, align 4
  store i32 %v1_859c, i32* @r7, align 4
  store i32 %v0_8598, i32* @r8, align 4
  store i32 %v1_85a4, i32* @r6, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_8650

dec_label_pc_85b8:                                ; preds = %dec_label_pc_865c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v7_85b8 = icmp eq i8 %v3_8650, 2
  store i1 %v7_85b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85b8, label %dec_label_pc_8d68, label %dec_label_pc_85c0

dec_label_pc_85c0:                                ; preds = %dec_label_pc_85b8
  %v2_85c0 = icmp ugt i8 %v3_8650, 3
  store i1 %v2_85c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85c0 = icmp ult i8 %v3_8650, 4
  store i1 %v6_85c0, i1* %cpsr_n.global-to-local, align 1
  %v7_85c0 = icmp eq i8 %v3_8650, 4
  store i1 %v7_85c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85c0, label %dec_label_pc_890c, label %dec_label_pc_85c8

dec_label_pc_85c8:                                ; preds = %dec_label_pc_85c0
  %v2_85c8 = icmp ugt i8 %v3_8650, 5
  store i1 %v2_85c8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85c8 = icmp ult i8 %v3_8650, 6
  store i1 %v6_85c8, i1* %cpsr_n.global-to-local, align 1
  %v7_85c8 = icmp eq i8 %v3_8650, 6
  store i1 %v7_85c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85c8, label %.thread24, label %dec_label_pc_85e8

.thread24:                                        ; preds = %dec_label_pc_85c8
  %v2_85cc = add i32 %v3_8900, -1431
  %v3_85cc = inttoptr i32 %v2_85cc to i32*
  %v4_85cc = load i32, i32* %v3_85cc, align 4
  store i32 %v4_85cc, i32* %r0.global-to-local, align 4
  %v4_85d4 = udiv i32 %v4_85cc, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_85d8 = mul nuw nsw i32 %v4_85d4, 4
  store i32 %v2_85dc, i32* %r1.global-to-local, align 4
  %v3_85e0 = add i32 %v4_85d8, %v2_85dc
  store i32 %v3_85e0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_85e8:                                ; preds = %dec_label_pc_85c8
  %v2_85e8 = icmp ugt i8 %v3_8650, 6
  store i1 %v2_85e8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85e8 = icmp ult i8 %v3_8650, 7
  store i1 %v6_85e8, i1* %cpsr_n.global-to-local, align 1
  %v7_85e8 = icmp eq i8 %v3_8650, 7
  store i1 %v7_85e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85e8, label %.thread35, label %dec_label_pc_8608

.thread35:                                        ; preds = %dec_label_pc_85e8
  %v2_85ec = add i32 %v3_8900, -1431
  %v3_85ec = inttoptr i32 %v2_85ec to i32*
  %v4_85ec = load i32, i32* %v3_85ec, align 4
  store i32 %v4_85ec, i32* %r0.global-to-local, align 4
  %v4_85f4 = udiv i32 %v4_85ec, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_85f8 = mul nuw nsw i32 %v4_85f4, 4
  store i32 %v2_85dc, i32* %r2.global-to-local, align 4
  %v3_8600 = add i32 %v4_85f8, %v2_85dc
  store i32 %v3_8600, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_8608:                                ; preds = %dec_label_pc_85e8
  %v2_8608 = icmp ugt i8 %v3_8650, 9
  store i1 %v2_8608, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8608 = icmp ult i8 %v3_8650, 10
  store i1 %v6_8608, i1* %cpsr_n.global-to-local, align 1
  %v7_8608 = icmp eq i8 %v3_8650, 10
  store i1 %v7_8608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8608, label %dec_label_pc_8d30, label %dec_label_pc_8610

dec_label_pc_8610:                                ; preds = %dec_label_pc_8608
  %v1_8610 = add nsw i32 %v4_8650, -11
  %v2_8610 = icmp ugt i8 %v3_8650, 10
  store i1 %v2_8610, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8610 = icmp ult i8 %v3_8650, 11
  store i1 %v6_8610, i1* %cpsr_n.global-to-local, align 1
  %v7_8610 = icmp eq i8 %v3_8650, 11
  store i1 %v7_8610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8610, label %dec_label_pc_98a4, label %dec_label_pc_8618

dec_label_pc_8618:                                ; preds = %dec_label_pc_8d68, %dec_label_pc_8610
  store i32 0, i32* %r3.global-to-local, align 4
  store i8 0, i8* %v2_8650, align 1
  %v0_8620 = load i32, i32* @r6, align 4
  %v1_8620 = add i32 %v0_8620, -1431
  %v2_8620 = inttoptr i32 %v1_8620 to i32*
  %v3_8620 = load i32, i32* %v2_8620, align 4
  store i32 %v3_8620, i32* %r0.global-to-local, align 4
  %v1_8624 = call i32 @function_14234(i32 %v3_8620)
  store i32 %v1_8624, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_862c = load i32, i32* @r6, align 4
  %v2_862c = add i32 %v1_862c, -1431
  %v3_862c = inttoptr i32 %v2_862c to i32*
  store i32 -1, i32* %v3_862c, align 4
  br label %dec_label_pc_8630

dec_label_pc_8630:                                ; preds = %dec_label_pc_8ccc, %dec_label_pc_8d48, %dec_label_pc_8750, %dec_label_pc_8664, %dec_label_pc_98a4, %dec_label_pc_8618
  store i32 %v0_839c, i32* %lr.global-to-local, align 4
  %v0_8634 = load i32, i32* @r8, align 4
  %v1_8634 = add i32 %v0_8634, 1
  store i32 %v1_8634, i32* @r8, align 4
  %v0_8638 = load i32, i32* @r7, align 4
  %v0_863c = load i32, i32* @r6, align 4
  %v2_8640 = sub i32 %v0_839c, %v1_8634
  %v3_8640 = icmp uge i32 %v0_839c, %v1_8634
  store i1 %v3_8640, i1* %cpsr_c.global-to-local, align 1
  %v4_8640 = xor i32 %v1_8634, %v0_839c
  %v5_8640 = xor i32 %v2_8640, %v0_839c
  %v6_8640 = and i32 %v5_8640, %v4_8640
  %v7_8640 = icmp slt i32 %v6_8640, 0
  store i1 %v7_8640, i1* %cpsr_v.global-to-local, align 1
  %v8_8640 = icmp slt i32 %v2_8640, 0
  store i1 %v8_8640, i1* %cpsr_n.global-to-local, align 1
  %v9_8640 = icmp eq i32 %v0_839c, %v1_8634
  store i1 %v9_8640, i1* %cpsr_z.global-to-local, align 1
  %v1_8644 = add i32 %v0_8638, 3140
  store i32 %v1_8644, i32* @r7, align 4
  %v1_8648 = add i32 %v0_863c, 3140
  store i32 %v1_8648, i32* @r6, align 4
  br i1 %v9_8640, label %dec_label_pc_8630.dec_label_pc_878c_crit_edge, label %dec_label_pc_8650

dec_label_pc_8630.dec_label_pc_878c_crit_edge:    ; preds = %dec_label_pc_8630
  %v0_878c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_878c

dec_label_pc_8650:                                ; preds = %dec_label_pc_876c, %dec_label_pc_8630, %dec_label_pc_8580
  %v3_8900 = phi i32 [ %v1_85a4, %dec_label_pc_8580 ], [ %v1_8648, %dec_label_pc_8630 ], [ %v1_8784, %dec_label_pc_876c ]
  %v1_8650 = add i32 %v3_8900, -1427
  %v2_8650 = inttoptr i32 %v1_8650 to i8*
  %v3_8650 = load i8, i8* %v2_8650, align 1
  %v4_8650 = zext i8 %v3_8650 to i32
  store i32 %v4_8650, i32* %r3.global-to-local, align 4
  %v2_8654 = icmp ne i8 %v3_8650, 0
  store i1 %v2_8654, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8654 = icmp eq i8 %v3_8650, 0
  store i1 %v6_8654, i1* %cpsr_n.global-to-local, align 1
  %v7_8654 = icmp eq i8 %v3_8650, 1
  store i1 %v7_8654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8654, label %dec_label_pc_88f4, label %dec_label_pc_865c

dec_label_pc_865c:                                ; preds = %dec_label_pc_8650
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 %v6_8654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v6_8654, label %dec_label_pc_8664, label %dec_label_pc_85b8

dec_label_pc_8664:                                ; preds = %.thread43.dec_label_pc_8664_crit_edge, %dec_label_pc_865c
  %v0_8664 = phi i32 [ %v0_8664.pre, %.thread43.dec_label_pc_8664_crit_edge ], [ %v3_8900, %dec_label_pc_865c ]
  %v1_8664 = add i32 %v0_8664, -1431
  %v2_8664 = inttoptr i32 %v1_8664 to i32*
  %v3_8664 = load i32, i32* %v2_8664, align 4
  store i32 %v3_8664, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v1_8670 = add i32 %v3_8664, 1
  %v2_8670 = icmp eq i32 %v3_8664, -1
  store i1 %v2_8670, i1* %cpsr_c.global-to-local, align 1
  %v3_8670 = sub i32 0, %v3_8664
  %v4_8670 = and i32 %v1_8670, %v3_8670
  %v5_8670 = icmp slt i32 %v4_8670, 0
  store i1 %v5_8670, i1* %cpsr_v.global-to-local, align 1
  %v6_8670 = icmp slt i32 %v1_8670, 0
  store i1 %v6_8670, i1* %cpsr_n.global-to-local, align 1
  %v7_8670 = icmp eq i32 %v1_8670, 0
  store i1 %v7_8670, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-72, align 4
  %v1_8684 = xor i1 %v7_8670, true
  call void @__pseudo_cond_branch(i1 %v1_8684, i32 ptrtoint (i32* @global_var_14234.25 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_8690 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_8690, i32* %r2.global-to-local, align 4
  %v3_8694 = call i32 @function_14b30(i32 2, i32 1, i32 %v0_8690)
  store i32 %v3_8694, i32* %r0.global-to-local, align 4
  %v1_8698 = add i32 %v3_8694, 1
  %v2_8698 = icmp eq i32 %v3_8694, -1
  store i1 %v2_8698, i1* %cpsr_c.global-to-local, align 1
  %v3_8698 = sub i32 0, %v3_8694
  %v4_8698 = and i32 %v1_8698, %v3_8698
  %v5_8698 = icmp slt i32 %v4_8698, 0
  store i1 %v5_8698, i1* %cpsr_v.global-to-local, align 1
  %v6_8698 = icmp slt i32 %v1_8698, 0
  store i1 %v6_8698, i1* %cpsr_n.global-to-local, align 1
  %v7_8698 = icmp eq i32 %v1_8698, 0
  store i1 %v7_8698, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8694, i32* @r4, align 4
  %v1_86a0 = load i32, i32* @r6, align 4
  %v2_86a0 = add i32 %v1_86a0, -1431
  %v3_86a0 = inttoptr i32 %v2_86a0 to i32*
  store i32 %v3_8694, i32* %v3_86a0, align 4
  br i1 %v7_8698, label %dec_label_pc_8630, label %dec_label_pc_86a8

dec_label_pc_86a8:                                ; preds = %dec_label_pc_8664
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_86ac = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_86ac, i32* @r2, align 4
  %v0_86b0 = load i32, i32* %r0.global-to-local, align 4
  %v2_86b0 = call i32 @function_14144(i32 %v0_86b0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_86b8 = or i32 %v2_86b0, 2048
  store i32 %v1_86b8, i32* @r2, align 4
  %v0_86bc = load i32, i32* @r4, align 4
  store i32 %v0_86bc, i32* %r0.global-to-local, align 4
  %v2_86c0 = call i32 @function_14144(i32 %v0_86bc, i32 4)
  store i32 %v2_86c0, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 65535, i32* %ip.global-to-local, align 4
  store i32 %v2_86d0, i32* %r3.global-to-local, align 4
  %v0_86d4 = load i32, i32* @r6, align 4
  %v1_86d4 = add i32 %v0_86d4, -1431
  %v2_86d4 = inttoptr i32 %v1_86d4 to i32*
  %v3_86d4 = load i32, i32* %v2_86d4, align 4
  store i32 %v3_86d4, i32* %r0.global-to-local, align 4
  %v0_86d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_86d8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %stack_var_-40, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 %v2_86e8, i32* %r3.global-to-local, align 4
  %v6_86f0 = call i32 @function_14b00(i32 %v3_86d4, i32 %v0_86d8, i32 8, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_86f0, i32* %r0.global-to-local, align 4
  %v0_86f4 = load i32, i32* @r6, align 4
  %v1_86f4 = add i32 %v0_86f4, -1415
  %v2_86f4 = inttoptr i32 %v1_86f4 to i32*
  %v3_86f4 = load i32, i32* %v2_86f4, align 4
  store i32 %v3_86f4, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_8704 = add i32 %v0_86f4, -1431
  %v2_8704 = inttoptr i32 %v1_8704 to i32*
  %v3_8704 = load i32, i32* %v2_8704, align 4
  store i32 %v3_8704, i32* %r0.global-to-local, align 4
  %v3_870c = add i32 %v0_86f4, -1427
  %v4_870c = inttoptr i32 %v3_870c to i8*
  store i8 2, i8* %v4_870c, align 1
  store i32 %v4_8710, i32* %ip.global-to-local, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8714, i32* %stack_var_-72, align 4
  store i32 %v4_8718, i32* %r3.global-to-local, align 4
  store i32 %v2_8728, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_8730 = load i32, i32* %sb.global-to-local, align 4
  %v1_8730 = load i32, i32* @r6, align 4
  %v2_8730 = add i32 %v1_8730, -1423
  %v3_8730 = inttoptr i32 %v2_8730 to i32*
  store i32 %v0_8730, i32* %v3_8730, align 4
  %v4_8734 = call i32 @function_1498c(i32 %v3_8704, %sockaddr* nonnull %v3_8734, i32 16)
  store i32 %v4_8734, i32* %r0.global-to-local, align 4
  %v0_8738 = load i32, i32* @r6, align 4
  %v1_8738 = add i32 %v0_8738, -1431
  %v2_8738 = inttoptr i32 %v1_8738 to i32*
  %v3_8738 = load i32, i32* %v2_8738, align 4
  store i32 %v3_8738, i32* %r0.global-to-local, align 4
  %v3_8740 = udiv i32 %v3_8738, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8744 = mul nuw nsw i32 %v3_8740, 4
  store i32 %v3_8744, i32* %r3.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8750

dec_label_pc_8750:                                ; preds = %dec_label_pc_8d78, %dec_label_pc_86a8
  %v1_875c = phi i32 [ %v3_8738, %dec_label_pc_86a8 ], [ %v3_8d78, %dec_label_pc_8d78 ]
  %v3_8744.pn = phi i32 [ %v3_8744, %dec_label_pc_86a8 ], [ %v3_8d84, %dec_label_pc_8d78 ]
  %storemerge = add i32 %v3_8744.pn, %v2_8748
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v1_8750 = add i32 %storemerge, -292
  %v2_8750 = inttoptr i32 %v1_8750 to i32*
  %v3_8750 = load i32, i32* %v2_8750, align 4
  %v1_8754 = urem i32 %v1_875c, 32
  store i32 %v1_8754, i32* %r1.global-to-local, align 4
  %v1_8758 = load i32, i32* %fp.global-to-local, align 4
  %v7_8758 = shl i32 %v1_8758, %v1_8754
  %v8_8758 = or i32 %v7_8758, %v3_8750
  store i32 %v8_8758, i32* %r2.global-to-local, align 4
  %v0_875c = load i32, i32* @sl, align 4
  %v2_875c = sub i32 %v0_875c, %v1_875c
  %v3_875c = icmp uge i32 %v0_875c, %v1_875c
  store i1 %v3_875c, i1* %cpsr_c.global-to-local, align 1
  %v4_875c = xor i32 %v0_875c, %v1_875c
  %v5_875c = xor i32 %v2_875c, %v0_875c
  %v6_875c = and i32 %v5_875c, %v4_875c
  %v7_875c = icmp slt i32 %v6_875c, 0
  store i1 %v7_875c, i1* %cpsr_v.global-to-local, align 1
  %v8_875c = icmp slt i32 %v2_875c, 0
  store i1 %v8_875c, i1* %cpsr_n.global-to-local, align 1
  %v9_875c = icmp eq i32 %v0_875c, %v1_875c
  store i1 %v9_875c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8758, i32* %v2_8750, align 4
  %v2_8764 = xor i1 %v8_875c, %v7_875c
  br i1 %v2_8764, label %dec_label_pc_8768, label %dec_label_pc_8630

dec_label_pc_8768:                                ; preds = %dec_label_pc_8750
  %v0_8768 = load i32, i32* %r0.global-to-local, align 4
  %v1_8768 = add i32 %v0_8768, 1
  store i32 %v1_8768, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_876c:                                ; preds = %dec_label_pc_8d60, %dec_label_pc_8d28, %dec_label_pc_8768
  %v0_878c98 = phi i32 [ %v1_8d60, %dec_label_pc_8d60 ], [ %v1_8d28, %dec_label_pc_8d28 ], [ %v1_8768, %dec_label_pc_8768 ]
  store i32 %v0_839c, i32* %lr.global-to-local, align 4
  %v0_8770 = load i32, i32* @r8, align 4
  %v1_8770 = add i32 %v0_8770, 1
  store i32 %v1_8770, i32* @r8, align 4
  %v0_8774 = load i32, i32* @r7, align 4
  %v0_8778 = load i32, i32* @r6, align 4
  %v2_877c = sub i32 %v0_839c, %v1_8770
  %v3_877c = icmp uge i32 %v0_839c, %v1_8770
  store i1 %v3_877c, i1* %cpsr_c.global-to-local, align 1
  %v4_877c = xor i32 %v1_8770, %v0_839c
  %v5_877c = xor i32 %v2_877c, %v0_839c
  %v6_877c = and i32 %v5_877c, %v4_877c
  %v7_877c = icmp slt i32 %v6_877c, 0
  store i1 %v7_877c, i1* %cpsr_v.global-to-local, align 1
  %v8_877c = icmp slt i32 %v2_877c, 0
  store i1 %v8_877c, i1* %cpsr_n.global-to-local, align 1
  %v9_877c = icmp eq i32 %v0_839c, %v1_8770
  store i1 %v9_877c, i1* %cpsr_z.global-to-local, align 1
  %v1_8780 = add i32 %v0_8774, 3140
  store i32 %v1_8780, i32* @r7, align 4
  %v1_8784 = add i32 %v0_8778, 3140
  store i32 %v1_8784, i32* @r6, align 4
  br i1 %v9_877c, label %dec_label_pc_878c, label %dec_label_pc_8650

dec_label_pc_878c:                                ; preds = %dec_label_pc_876c, %dec_label_pc_8630.dec_label_pc_878c_crit_edge
  %v0_87c4 = phi i32 [ %v0_878c.pre, %dec_label_pc_8630.dec_label_pc_878c_crit_edge ], [ %v0_878c98, %dec_label_pc_876c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_878c = icmp slt i32 %v0_87c4, 0
  store i1 %v1_878c, i1* %cpsr_n.global-to-local, align 1
  %v2_878c = icmp eq i32 %v0_87c4, 0
  store i1 %v2_878c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_878c, label %dec_label_pc_8528, label %dec_label_pc_8794

dec_label_pc_8794:                                ; preds = %dec_label_pc_878c
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %stack_var_-56, align 4
  store i32 %v2_87b4, i32* %ip.global-to-local, align 4
  store i32 %v2_87b8, i32* %r1.global-to-local, align 4
  store i32 %v2_87bc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v0_87c4, i32* %r0.global-to-local, align 4
  %v5_87cc = call i32 @function_14454(i32 %v0_87c4, i32 %v2_87b8, i32 %v2_87bc, i32 0, i32 %v2_87b4)
  store i32 %v5_87cc, i32* @r4, align 4
  %v0_87d4 = load i32, i32* @r5, align 4
  store i32 %v0_87d4, i32* %r0.global-to-local, align 4
  %v1_87d8 = inttoptr i32 %v0_87d4 to i32*
  %v2_87d8 = call i32 @function_14504(i32* %v1_87d8)
  store i32 %v2_87d8, i32* %r0.global-to-local, align 4
  %v0_87dc = load i32, i32* @r4, align 4
  %v1_87dc = load i32, i32* @r5, align 4
  %v2_87dc = sub i32 %v0_87dc, %v1_87dc
  %v3_87dc = icmp uge i32 %v0_87dc, %v1_87dc
  store i1 %v3_87dc, i1* %cpsr_c.global-to-local, align 1
  %v4_87dc = xor i32 %v1_87dc, %v0_87dc
  %v5_87dc = xor i32 %v2_87dc, %v0_87dc
  %v6_87dc = and i32 %v5_87dc, %v4_87dc
  %v7_87dc = icmp slt i32 %v6_87dc, 0
  store i1 %v7_87dc, i1* %cpsr_v.global-to-local, align 1
  %v8_87dc = icmp slt i32 %v2_87dc, 0
  store i1 %v8_87dc, i1* %cpsr_n.global-to-local, align 1
  %v9_87dc = icmp eq i32 %v0_87dc, %v1_87dc
  store i1 %v9_87dc, i1* %cpsr_z.global-to-local, align 1
  %v7_87e4 = icmp sgt i32 %v0_87dc, %v1_87dc
  br i1 %v7_87e4, label %dec_label_pc_87e8, label %dec_label_pc_8528

dec_label_pc_87e8:                                ; preds = %dec_label_pc_8794
  store i32 %stack_var_-20868.0.ph, i32* @r8, align 4
  br label %dec_label_pc_8858

dec_label_pc_87f4:                                ; preds = %.thread38.dec_label_pc_87f4_crit_edge, %dec_label_pc_8868
  %v0_880c = phi i32 [ %v0_87f4.pre, %.thread38.dec_label_pc_87f4_crit_edge ], [ %v3_8858, %dec_label_pc_8868 ]
  %v3_87f4 = udiv i32 %v0_880c, 32
  store i32 %v2_8748, i32* %r2.global-to-local, align 4
  %v3_8800 = mul nuw nsw i32 %v3_87f4, 4
  %v2_8804 = add i32 %v3_8800, %v2_8748
  store i32 %v2_8804, i32* %r3.global-to-local, align 4
  %v1_8808 = add i32 %v2_8804, -164
  %v2_8808 = inttoptr i32 %v1_8808 to i32*
  %v3_8808 = load i32, i32* %v2_8808, align 4
  %v1_880c = urem i32 %v0_880c, 32
  store i32 %v1_880c, i32* %r1.global-to-local, align 4
  %v2_8810 = add nsw i32 %v1_880c, -1
  %v3_8810 = shl i32 1, %v2_8810
  %v4_8810 = and i32 %v3_8810, %v3_8808
  %v5_8810 = icmp ne i32 %v4_8810, 0
  store i1 %v5_8810, i1* %cpsr_c.global-to-local, align 1
  %v6_8810 = lshr i32 %v3_8808, %v1_880c
  store i32 %v6_8810, i32* %r2.global-to-local, align 4
  %v1_8814 = urem i32 %v6_8810, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8814 = icmp eq i32 %v1_8814, 0
  store i1 %v2_8814, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8814, label %dec_label_pc_8838, label %dec_label_pc_881c

dec_label_pc_881c:                                ; preds = %dec_label_pc_87f4
  %v0_881c = load i32, i32* @r8, align 4
  %v1_881c = add i32 %v0_881c, -1452
  %v2_881c = inttoptr i32 %v1_881c to i8*
  %v3_881c = load i8, i8* %v2_881c, align 1
  %v4_881c = zext i8 %v3_881c to i32
  store i32 %v4_881c, i32* %r3.global-to-local, align 4
  %v2_8820 = icmp ugt i8 %v3_881c, 5
  store i1 %v2_8820, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8820 = icmp ult i8 %v3_881c, 6
  store i1 %v6_8820, i1* %cpsr_n.global-to-local, align 1
  %v7_8820 = icmp eq i8 %v3_881c, 6
  store i1 %v7_8820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8820, label %dec_label_pc_8dd0, label %dec_label_pc_8828

dec_label_pc_8828:                                ; preds = %dec_label_pc_881c
  %v2_8828 = icmp ugt i8 %v3_881c, 6
  store i1 %v2_8828, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8828 = icmp ult i8 %v3_881c, 7
  store i1 %v6_8828, i1* %cpsr_n.global-to-local, align 1
  %v7_8828 = icmp eq i8 %v3_881c, 7
  store i1 %v7_8828, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8828, label %dec_label_pc_940c, label %dec_label_pc_8830

dec_label_pc_8830:                                ; preds = %dec_label_pc_8828
  %v2_8830 = icmp ugt i8 %v3_881c, 9
  store i1 %v2_8830, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8830 = icmp ult i8 %v3_881c, 10
  store i1 %v6_8830, i1* %cpsr_n.global-to-local, align 1
  %v7_8830 = icmp eq i8 %v3_881c, 10
  store i1 %v7_8830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8830, label %dec_label_pc_961c, label %dec_label_pc_8838

dec_label_pc_8838:                                ; preds = %dec_label_pc_9510, %dec_label_pc_9950, %dec_label_pc_9a98, %dec_label_pc_9914, %dec_label_pc_8830, %dec_label_pc_87f4, %dec_label_pc_8858, %dec_label_pc_9d84, %dec_label_pc_9b34, %dec_label_pc_9a7c, %dec_label_pc_9934, %dec_label_pc_98fc, %dec_label_pc_9884, %dec_label_pc_9400, %dec_label_pc_88dc, %dec_label_pc_965c
  store i32 %v0_839c, i32* %r3.global-to-local, align 4
  %v1_8840 = add i32 %stack_var_-20832.0, 1
  store i32 %v1_8840, i32* %r2.global-to-local, align 4
  %v0_8844 = load i32, i32* @r8, align 4
  %v2_8848 = sub i32 %v1_8840, %v0_839c
  %v3_8848 = icmp uge i32 %v1_8840, %v0_839c
  store i1 %v3_8848, i1* %cpsr_c.global-to-local, align 1
  %v4_8848 = xor i32 %v1_8840, %v0_839c
  %v5_8848 = xor i32 %v2_8848, %v1_8840
  %v6_8848 = and i32 %v5_8848, %v4_8848
  %v7_8848 = icmp slt i32 %v6_8848, 0
  store i1 %v7_8848, i1* %cpsr_v.global-to-local, align 1
  %v8_8848 = icmp slt i32 %v2_8848, 0
  store i1 %v8_8848, i1* %cpsr_n.global-to-local, align 1
  %v9_8848 = icmp eq i32 %v1_8840, %v0_839c
  store i1 %v9_8848, i1* %cpsr_z.global-to-local, align 1
  %v1_8850 = add i32 %v0_8844, 3140
  store i32 %v1_8850, i32* @r8, align 4
  br i1 %v9_8848, label %dec_label_pc_8528, label %dec_label_pc_8858

dec_label_pc_8858:                                ; preds = %dec_label_pc_8838, %dec_label_pc_87e8
  %v0_8860 = phi i32 [ %stack_var_-20868.0.ph, %dec_label_pc_87e8 ], [ %v1_8850, %dec_label_pc_8838 ]
  %stack_var_-20832.0 = phi i32 [ %v1_87dc, %dec_label_pc_87e8 ], [ %v1_8840, %dec_label_pc_8838 ]
  %v1_8858 = add i32 %v0_8860, -1456
  %v2_8858 = inttoptr i32 %v1_8858 to i32*
  %v3_8858 = load i32, i32* %v2_8858, align 4
  store i32 %v3_8858, i32* %r0.global-to-local, align 4
  %v1_885c = add i32 %v3_8858, 1
  %v2_885c = icmp eq i32 %v3_8858, -1
  store i1 %v2_885c, i1* %cpsr_c.global-to-local, align 1
  %v3_885c = sub i32 0, %v3_8858
  %v4_885c = and i32 %v1_885c, %v3_885c
  %v5_885c = icmp slt i32 %v4_885c, 0
  store i1 %v5_885c, i1* %cpsr_v.global-to-local, align 1
  %v6_885c = icmp slt i32 %v1_885c, 0
  store i1 %v6_885c, i1* %cpsr_n.global-to-local, align 1
  %v7_885c = icmp eq i32 %v1_885c, 0
  store i1 %v7_885c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8858, i32* %sb.global-to-local, align 4
  br i1 %v7_885c, label %dec_label_pc_8838, label %dec_label_pc_8868

dec_label_pc_8868:                                ; preds = %dec_label_pc_8858
  %v3_8868 = udiv i32 %v3_8858, 32
  %v3_8870 = mul nuw nsw i32 %v3_8868, 4
  store i32 %v2_8748, i32* @lr, align 4
  %v2_8878 = add i32 %v3_8870, %v2_8748
  store i32 %v2_8878, i32* %r3.global-to-local, align 4
  %v1_887c = add i32 %v2_8878, -292
  %v2_887c = inttoptr i32 %v1_887c to i32*
  %v3_887c = load i32, i32* %v2_887c, align 4
  %v1_8880 = urem i32 %v3_8858, 32
  store i32 %v1_8880, i32* %r1.global-to-local, align 4
  %v2_8884 = add nsw i32 %v1_8880, -1
  %v3_8884 = shl i32 1, %v2_8884
  %v4_8884 = and i32 %v3_887c, %v3_8884
  %v5_8884 = icmp ne i32 %v4_8884, 0
  store i1 %v5_8884, i1* %cpsr_c.global-to-local, align 1
  %v6_8884 = lshr i32 %v3_887c, %v1_8880
  store i32 %v6_8884, i32* %r2.global-to-local, align 4
  %v1_8888 = urem i32 %v6_8884, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8888 = icmp eq i32 %v1_8888, 0
  store i1 %v2_8888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8888, label %dec_label_pc_87f4, label %dec_label_pc_8890

dec_label_pc_8890:                                ; preds = %dec_label_pc_8868
  store i32 4, i32* @r4, align 4
  store i32 %v10_82f0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v2_88a8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 4, i32* %stack_var_-48, align 4
  store i32 %v2_88b4, i32* @lr, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v6_88c0 = call i32 @function_149e4(i32 %v3_8858, i32 1, i32 4, i32* nonnull %stack_var_-44, i32 %v2_88b4)
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_88c8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_88c8, i32* %r3.global-to-local, align 4
  %v2_88cc = or i32 %v3_88c8, %v6_88c0
  store i32 %v2_88cc, i32* %r0.global-to-local, align 4
  %v3_88cc = icmp slt i32 %v2_88cc, 0
  store i1 %v3_88cc, i1* %cpsr_n.global-to-local, align 1
  %v4_88cc = icmp eq i32 %v2_88cc, 0
  store i1 %v4_88cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_88cc, label %.thread38, label %dec_label_pc_88dc

.thread38:                                        ; preds = %dec_label_pc_8890
  %v1_88d0 = load i32, i32* @r8, align 4
  %v2_88d0 = add i32 %v1_88d0, -1456
  %v3_88d0 = inttoptr i32 %v2_88d0 to i32*
  %v4_88d0 = load i32, i32* %v3_88d0, align 4
  store i32 %v4_88d0, i32* %r0.global-to-local, align 4
  %v1_88d4 = load i32, i32* @r4, align 4
  %v2_88d4 = trunc i32 %v1_88d4 to i8
  %v4_88d4 = add i32 %v1_88d0, -1452
  %v5_88d4 = inttoptr i32 %v4_88d4 to i8*
  store i8 %v2_88d4, i8* %v5_88d4, align 1
  %v0_88d8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_88d8.pr.pr, label %.thread38.dec_label_pc_87f4_crit_edge, label %dec_label_pc_88dc

.thread38.dec_label_pc_87f4_crit_edge:            ; preds = %.thread38
  %v0_87f4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_87f4

dec_label_pc_88dc:                                ; preds = %dec_label_pc_8890, %.thread38
  %v0_88dc = load i32, i32* @r8, align 4
  %v1_88dc = add i32 %v0_88dc, -1456
  %v2_88dc = inttoptr i32 %v1_88dc to i32*
  %v3_88dc = load i32, i32* %v2_88dc, align 4
  store i32 %v3_88dc, i32* %r0.global-to-local, align 4
  %v1_88e0 = call i32 @function_14234(i32 %v3_88dc)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_88e8 = load i32, i32* @r8, align 4
  %v2_88e8 = add i32 %v1_88e8, -1456
  %v3_88e8 = inttoptr i32 %v2_88e8 to i32*
  store i32 -1, i32* %v3_88e8, align 4
  %v0_88ec = load i32, i32* @r5, align 4
  %v1_88ec = trunc i32 %v0_88ec to i8
  %v2_88ec = load i32, i32* @r8, align 4
  %v3_88ec = add i32 %v2_88ec, -1452
  %v4_88ec = inttoptr i32 %v3_88ec to i8*
  store i8 %v1_88ec, i8* %v4_88ec, align 1
  br label %dec_label_pc_8838

dec_label_pc_88f4:                                ; preds = %dec_label_pc_8650
  %v1_88f4 = add i32 %v3_8900, 25
  %v2_88f4 = inttoptr i32 %v1_88f4 to i32*
  %v3_88f4 = load i32, i32* %v2_88f4, align 4
  store i32 %v3_88f4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_88f8 = icmp slt i32 %v3_88f4, 0
  store i1 %v1_88f8, i1* %cpsr_n.global-to-local, align 1
  %v2_88f8 = icmp eq i32 %v3_88f4, 0
  store i1 %v2_88f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_88f8, label %.thread43, label %.thread41

.thread41:                                        ; preds = %dec_label_pc_88f4
  store i32 4, i32* %r3.global-to-local, align 4
  store i8 4, i8* %v2_8650, align 1
  %v0_8904.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8904.pr.pr, label %.thread41..thread43_crit_edge, label %dec_label_pc_890c

.thread41..thread43_crit_edge:                    ; preds = %.thread41
  %v1_8904.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_8904.pre = load i32, i32* @r6, align 4
  %extract.t = trunc i32 %v1_8904.pre to i8
  br label %.thread43

.thread43:                                        ; preds = %.thread41..thread43_crit_edge, %dec_label_pc_88f4
  %v3_8904 = phi i32 [ %v3_8904.pre, %.thread41..thread43_crit_edge ], [ %v3_8900, %dec_label_pc_88f4 ]
  %v1_8904.off0 = phi i8 [ %extract.t, %.thread41..thread43_crit_edge ], [ 0, %dec_label_pc_88f4 ]
  %v4_8904 = add i32 %v3_8904, -1427
  %v5_8904 = inttoptr i32 %v4_8904 to i8*
  store i8 %v1_8904.off0, i8* %v5_8904, align 1
  %v0_8908.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8908.pr, label %.thread43.dec_label_pc_8664_crit_edge, label %dec_label_pc_890c

.thread43.dec_label_pc_8664_crit_edge:            ; preds = %.thread43
  %v0_8664.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8664

dec_label_pc_890c:                                ; preds = %.thread41, %.thread43, %dec_label_pc_85c0
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_8914 = load i32, i32* @r7, align 4
  %v1_8914 = add i32 %v0_8914, 2112
  store i32 %v1_8914, i32* %r0.global-to-local, align 4
  %v1_8918 = load i32, i32* @r6, align 4
  %v2_8918 = add i32 %v1_8918, 33
  %v3_8918 = inttoptr i32 %v2_8918 to i32*
  store i32 -1, i32* %v3_8918, align 4
  %v0_891c = load i32, i32* %r0.global-to-local, align 4
  %v1_891c = add i32 %v0_891c, 4
  store i32 %v1_891c, i32* %r0.global-to-local, align 4
  store i32 1024, i32* %r1.global-to-local, align 4
  %v0_8924 = load i32, i32* @r5, align 4
  %v1_8924 = load i32, i32* @r6, align 4
  %v2_8924 = add i32 %v1_8924, 21
  %v3_8924 = inttoptr i32 %v2_8924 to i32*
  store i32 %v0_8924, i32* %v3_8924, align 4
  %v2_8928 = call i32 @function_13914(i32 %v1_891c, i32 1024)
  store i32 10240, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_8934 = load i32, i32* @r5, align 4
  %v1_8934 = load i32, i32* @r6, align 4
  %v2_8934 = add i32 %v1_8934, 681
  %v3_8934 = inttoptr i32 %v2_8934 to i32*
  store i32 %v0_8934, i32* %v3_8934, align 4
  %v2_8938 = call i32 @function_13914(i32 %stack_var_-20856.0.ph, i32 10240)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8940 = call i32 @function_13874(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  %v0_8948 = load i32, i32* @r6, align 4
  store i32 %v0_8948, i32* %r1.global-to-local, align 4
  %v2_894c = add i32 %v2_8940, %stack_var_-20856.0.ph
  store i32 %v2_894c, i32* @r0, align 4
  %v2_8950 = inttoptr i32 %v2_894c to i8*
  %v3_8950 = call i32 @function_1389c(i8* %v2_8950, i32 %v0_8948)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8958 = call i32 @function_13874(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16af4.27 to i32), i32* %r1.global-to-local, align 4
  %v2_8964 = add i32 %v2_8958, %stack_var_-20856.0.ph
  store i32 %v2_8964, i32* @r0, align 4
  %v2_8968 = inttoptr i32 %v2_8964 to i8*
  %v3_8968 = call i32 @function_1389c(i8* %v2_8968, i32 ptrtoint (i32* @global_var_16af4.27 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8970 = call i32 @function_13874(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  %v0_8978 = load i32, i32* @r7, align 4
  %v1_8978 = add i32 %v0_8978, 532
  store i32 %v1_8978, i32* %r1.global-to-local, align 4
  %v2_897c = add i32 %v2_8970, %stack_var_-20856.0.ph
  store i32 %v2_897c, i32* @r0, align 4
  %v2_8980 = inttoptr i32 %v2_897c to i8*
  %v3_8980 = call i32 @function_1389c(i8* %v2_8980, i32 %v1_8978)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8988 = call i32 @function_13874(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([24 x i8]* @global_var_16acc.29 to i32), i32* %r1.global-to-local, align 4
  %v2_8994 = add i32 %v2_8988, %stack_var_-20856.0.ph
  store i32 %v2_8994, i32* @r0, align 4
  %v3_8998 = inttoptr i32 %v2_8994 to i8*
  %v4_8998 = call i32 @function_1389c(i8* %v3_8998, i32 ptrtoint ([24 x i8]* @global_var_16acc.29 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89a0 = call i32 @function_13874(i8* %v1_8940)
  %v2_89a8 = add i32 %v2_89a0, %stack_var_-20856.0.ph
  store i32 %v2_89a8, i32* @r0, align 4
  %v0_89ac = load i32, i32* @r7, align 4
  %v1_89ac = add i32 %v0_89ac, 20
  store i32 %v1_89ac, i32* %r1.global-to-local, align 4
  %v2_89b0 = inttoptr i32 %v2_89a8 to i8*
  %v3_89b0 = call i32 @function_1389c(i8* %v2_89b0, i32 %v1_89ac)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89b8 = call i32 @function_13874(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16ae4.31 to i32), i32* %r1.global-to-local, align 4
  %v2_89c4 = add i32 %v2_89b8, %stack_var_-20856.0.ph
  store i32 %v2_89c4, i32* @r0, align 4
  %v3_89c8 = inttoptr i32 %v2_89c4 to i8*
  %v4_89c8 = call i32 @function_1389c(i8* %v3_89c8, i32 ptrtoint ([9 x i8]* @global_var_16ae4.31 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89d0 = call i32 @function_13874(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v0_89d8 = load i32, i32* @r7, align 4
  %v2_89dc = add i32 %v2_89d0, %stack_var_-20856.0.ph
  store i32 %v2_89dc, i32* @r0, align 4
  %v1_89e0 = add i32 %v0_89d8, 789
  store i32 %v1_89e0, i32* %r1.global-to-local, align 4
  %v2_89e4 = inttoptr i32 %v2_89dc to i8*
  %v3_89e4 = call i32 @function_1389c(i8* %v2_89e4, i32 %v1_89e0)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89ec = call i32 @function_13874(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32* %r1.global-to-local, align 4
  %v2_89f8 = add i32 %v2_89ec, %stack_var_-20856.0.ph
  store i32 %v2_89f8, i32* @r0, align 4
  %v3_89fc = inttoptr i32 %v2_89f8 to i8*
  %v4_89fc = call i32 @function_1389c(i8* %v3_89fc, i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32))
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_8a04 = call i32 @function_12f50(i32 32)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a0c = call i32 @function_13874(i8* %v1_8940)
  %v0_8a10 = load i32, i32* @r5, align 4
  store i32 %v0_8a10, i32* %r1.global-to-local, align 4
  store i32 %v2_8a0c, i32* @r4, align 4
  store i32 32, i32* %r0.global-to-local, align 4
  %v2_8a1c = inttoptr i32 %v0_8a10 to i32*
  %v3_8a1c = call i32 @function_12e6c(i32 32, i32* %v2_8a1c)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 %v3_8a1c, i32* %r1.global-to-local, align 4
  %v1_8a28 = load i32, i32* @r4, align 4
  %v2_8a28 = add i32 %v1_8a28, %stack_var_-20856.0.ph
  store i32 %v2_8a28, i32* @r0, align 4
  %v2_8a2c = inttoptr i32 %v2_8a28 to i8*
  %v3_8a2c = call i32 @function_1389c(i8* %v2_8a2c, i32 %v3_8a1c)
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_8a34 = call i32 @function_12e98(i32 32)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a3c = call i32 @function_13874(i8* %v1_8940)
  %v2_8a44 = add i32 %v2_8a3c, %stack_var_-20856.0.ph
  store i32 %v2_8a44, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32* %r1.global-to-local, align 4
  %v3_8a4c = inttoptr i32 %v2_8a44 to i8*
  %v4_8a4c = call i32 @function_1389c(i8* %v3_8a4c, i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32))
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_8a54 = call i32 @function_12f50(i32 33)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a5c = call i32 @function_13874(i8* %v1_8940)
  %v0_8a60 = load i32, i32* @r5, align 4
  store i32 %v0_8a60, i32* %r1.global-to-local, align 4
  store i32 %v2_8a5c, i32* @r4, align 4
  store i32 33, i32* %r0.global-to-local, align 4
  %v2_8a6c = inttoptr i32 %v0_8a60 to i32*
  %v3_8a6c = call i32 @function_12e6c(i32 33, i32* %v2_8a6c)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8a6c, i32* %r1.global-to-local, align 4
  %v1_8a78 = load i32, i32* @r4, align 4
  %v2_8a78 = add i32 %v1_8a78, %stack_var_-20856.0.ph
  store i32 %v2_8a78, i32* @r0, align 4
  %v2_8a7c = inttoptr i32 %v2_8a78 to i8*
  %v3_8a7c = call i32 @function_1389c(i8* %v2_8a7c, i32 %v3_8a6c)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_8a84 = call i32 @function_12e98(i32 33)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a8c = call i32 @function_13874(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32* %r1.global-to-local, align 4
  %v2_8a98 = add i32 %v2_8a8c, %stack_var_-20856.0.ph
  store i32 %v2_8a98, i32* @r0, align 4
  %v3_8a9c = inttoptr i32 %v2_8a98 to i8*
  %v4_8a9c = call i32 @function_1389c(i8* %v3_8a9c, i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32))
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_8aa4 = call i32 @function_12f50(i32 34)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8aac = call i32 @function_13874(i8* %v1_8940)
  %v0_8ab0 = load i32, i32* @r5, align 4
  store i32 %v0_8ab0, i32* %r1.global-to-local, align 4
  store i32 %v2_8aac, i32* @r4, align 4
  store i32 34, i32* %r0.global-to-local, align 4
  %v2_8abc = inttoptr i32 %v0_8ab0 to i32*
  %v3_8abc = call i32 @function_12e6c(i32 34, i32* %v2_8abc)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_8abc, i32* %r1.global-to-local, align 4
  %v1_8ac8 = load i32, i32* @r4, align 4
  %v2_8ac8 = add i32 %v1_8ac8, %stack_var_-20856.0.ph
  store i32 %v2_8ac8, i32* @r0, align 4
  %v2_8acc = inttoptr i32 %v2_8ac8 to i8*
  %v3_8acc = call i32 @function_1389c(i8* %v2_8acc, i32 %v3_8abc)
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_8ad4 = call i32 @function_12e98(i32 34)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8adc = call i32 @function_13874(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32* %r1.global-to-local, align 4
  %v2_8ae8 = add i32 %v2_8adc, %stack_var_-20856.0.ph
  store i32 %v2_8ae8, i32* @r0, align 4
  %v3_8aec = inttoptr i32 %v2_8ae8 to i8*
  %v4_8aec = call i32 @function_1389c(i8* %v3_8aec, i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32))
  store i32 %v4_8aec, i32* %r0.global-to-local, align 4
  store i32 %v6_8200, i32* %r1.global-to-local, align 4
  %v1_8af4 = load i32, i32* @r5, align 4
  %v2_8af4 = sub i32 %v6_8200, %v1_8af4
  %v3_8af4 = icmp uge i32 %v6_8200, %v1_8af4
  store i1 %v3_8af4, i1* %cpsr_c.global-to-local, align 1
  %v4_8af4 = xor i32 %v1_8af4, %v6_8200
  %v5_8af4 = xor i32 %v2_8af4, %v6_8200
  %v6_8af4 = and i32 %v5_8af4, %v4_8af4
  %v7_8af4 = icmp slt i32 %v6_8af4, 0
  store i1 %v7_8af4, i1* %cpsr_v.global-to-local, align 1
  %v8_8af4 = icmp slt i32 %v2_8af4, 0
  store i1 %v8_8af4, i1* %cpsr_n.global-to-local, align 1
  %v9_8af4 = icmp eq i32 %v6_8200, %v1_8af4
  store i1 %v9_8af4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8af4, label %dec_label_pc_8bcc, label %dec_label_pc_8afc

dec_label_pc_8afc:                                ; preds = %dec_label_pc_890c
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_8b00 = call i32 @function_12f50(i32 35)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b08 = call i32 @function_13874(i8* %v1_8940)
  %v0_8b0c = load i32, i32* @r5, align 4
  store i32 %v0_8b0c, i32* %r1.global-to-local, align 4
  store i32 %v2_8b08, i32* @r4, align 4
  store i32 35, i32* %r0.global-to-local, align 4
  %v2_8b18 = inttoptr i32 %v0_8b0c to i32*
  %v3_8b18 = call i32 @function_12e6c(i32 35, i32* %v2_8b18)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8b18, i32* %r1.global-to-local, align 4
  %v1_8b24 = load i32, i32* @r4, align 4
  %v2_8b24 = add i32 %v1_8b24, %stack_var_-20856.0.ph
  store i32 %v2_8b24, i32* @r0, align 4
  %v2_8b28 = inttoptr i32 %v2_8b24 to i8*
  %v3_8b28 = call i32 @function_1389c(i8* %v2_8b28, i32 %v3_8b18)
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_8b30 = call i32 @function_12e98(i32 35)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b38 = call i32 @function_13874(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32* %r1.global-to-local, align 4
  %v2_8b44 = add i32 %v2_8b38, %stack_var_-20856.0.ph
  store i32 %v2_8b44, i32* @r0, align 4
  %v3_8b48 = inttoptr i32 %v2_8b44 to i8*
  %v4_8b48 = call i32 @function_1389c(i8* %v3_8b48, i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b50 = call i32 @function_13874(i8* %v1_8940)
  %v0_8b54 = load i32, i32* @r5, align 4
  store i32 %v0_8b54, i32* %r1.global-to-local, align 4
  store i32 %v2_8b50, i32* %r4.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v2_8b60 = inttoptr i32 %v0_8b54 to i32*
  %v3_8b60 = call i32 @function_12e6c(i32 40, i32* %v2_8b60)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_8b60, i32* %r1.global-to-local, align 4
  %v2_8b6c = add i32 %v2_8b50, %stack_var_-20856.0.ph
  store i32 %v2_8b6c, i32* @r0, align 4
  %v2_8b70 = inttoptr i32 %v2_8b6c to i8*
  %v3_8b70 = call i32 @function_1389c(i8* %v2_8b70, i32 %v3_8b60)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b78 = call i32 @function_13874(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_16af4.27 to i32), i32* %r1.global-to-local, align 4
  %v2_8b84 = add i32 %v2_8b78, %stack_var_-20856.0.ph
  store i32 %v2_8b84, i32* @r0, align 4
  %v2_8b88 = inttoptr i32 %v2_8b84 to i8*
  %v3_8b88 = call i32 @function_1389c(i8* %v2_8b88, i32 ptrtoint (i32* @global_var_16af4.27 to i32))
  store i32 %v6_8200, i32* %r0.global-to-local, align 4
  %v2_8b90 = call i32 @function_13874(i8* %v1_8b90)
  store i32 %v2_8b90, i32* @r4, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b9c = call i32 @function_13874(i8* %v1_8940)
  %v2_8ba4 = add i32 %v2_8b9c, %stack_var_-20856.0.ph
  store i32 %v2_8ba4, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v0_8bac = load i32, i32* @r4, align 4
  store i32 %v0_8bac, i32* %r0.global-to-local, align 4
  %v3_8bb0 = trunc i32 %v0_8bac to i8
  %v4_8bb0 = call i32 @function_13d68(i8 %v3_8bb0, i32 10, i32 %v2_8ba4)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bb8 = call i32 @function_13874(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32* %r1.global-to-local, align 4
  %v2_8bc4 = add i32 %v2_8bb8, %stack_var_-20856.0.ph
  store i32 %v2_8bc4, i32* @r0, align 4
  %v3_8bc8 = inttoptr i32 %v2_8bc4 to i8*
  %v4_8bc8 = call i32 @function_1389c(i8* %v3_8bc8, i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32))
  store i32 %v4_8bc8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8bcc

dec_label_pc_8bcc:                                ; preds = %dec_label_pc_890c, %dec_label_pc_8afc
  %v0_8bcc = load i32, i32* @r6, align 4
  %v1_8bcc = add i32 %v0_8bcc, 37
  %v2_8bcc = inttoptr i32 %v1_8bcc to i32*
  %v3_8bcc = load i32, i32* %v2_8bcc, align 4
  store i32 %v3_8bcc, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8bd0 = icmp slt i32 %v3_8bcc, 0
  store i1 %v1_8bd0, i1* %cpsr_n.global-to-local, align 1
  %v2_8bd0 = icmp eq i32 %v3_8bcc, 0
  store i1 %v2_8bd0, i1* %cpsr_z.global-to-local, align 1
  %tmp208 = icmp slt i32 %v3_8bcc, 1
  br i1 %tmp208, label %dec_label_pc_8c78, label %dec_label_pc_8bd8

dec_label_pc_8bd8:                                ; preds = %dec_label_pc_8bcc
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bdc = call i32 @function_13874(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16b04.35 to i32), i32* %r1.global-to-local, align 4
  %v2_8be8 = add i32 %v2_8bdc, %stack_var_-20856.0.ph
  store i32 %v2_8be8, i32* @r0, align 4
  %v3_8bec = inttoptr i32 %v2_8be8 to i8*
  %v4_8bec = call i32 @function_1389c(i8* %v3_8bec, i32 ptrtoint ([9 x i8]* @global_var_16b04.35 to i32))
  store i32 %v4_8bec, i32* %r0.global-to-local, align 4
  %v0_8bf0 = load i32, i32* @r6, align 4
  %v1_8bf0 = add i32 %v0_8bf0, 37
  %v2_8bf0 = inttoptr i32 %v1_8bf0 to i32*
  %v3_8bf0 = load i32, i32* %v2_8bf0, align 4
  store i32 %v3_8bf0, i32* %r3.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8bf8 = icmp slt i32 %v3_8bf0, 0
  store i1 %v1_8bf8, i1* %cpsr_n.global-to-local, align 1
  %v2_8bf8 = icmp eq i32 %v3_8bf0, 0
  store i1 %v2_8bf8, i1* %cpsr_z.global-to-local, align 1
  %v0_8bfc = load i32, i32* @r5, align 4
  store i32 %v0_8bfc, i32* %stack_var_-40, align 4
  %tmp209 = icmp slt i32 %v3_8bf0, 1
  br i1 %tmp209, label %dec_label_pc_8c60, label %dec_label_pc_8c04

dec_label_pc_8c04:                                ; preds = %dec_label_pc_8bd8, %dec_label_pc_8c04
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c08 = call i32 @function_13874(i8* %v1_8940)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_8c10 = load i32, i32* %stack_var_-40, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v1_8c18 = and i32 %v3_8c10, 33554432
  %v2_8c18 = icmp ne i32 %v1_8c18, 0
  store i1 %v2_8c18, i1* %cpsr_c.global-to-local, align 1
  %v3_8c18 = mul i32 %v3_8c10, 128
  %v1_8c1c = add i32 %v3_8c18, 1472
  %v2_8c20 = add i32 %v2_8c08, %stack_var_-20856.0.ph
  store i32 %v2_8c20, i32* @r0, align 4
  %v0_8c24 = load i32, i32* @r7, align 4
  %v2_8c24 = add i32 %v1_8c1c, %v0_8c24
  store i32 %v2_8c24, i32* %r1.global-to-local, align 4
  %v2_8c28 = inttoptr i32 %v2_8c20 to i8*
  %v3_8c28 = call i32 @function_1389c(i8* %v2_8c28, i32 %v2_8c24)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c30 = call i32 @function_13874(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b10.37 to i32), i32* %r1.global-to-local, align 4
  %v2_8c3c = add i32 %v2_8c30, %stack_var_-20856.0.ph
  store i32 %v2_8c3c, i32* @r0, align 4
  %v3_8c40 = inttoptr i32 %v2_8c3c to i8*
  %v4_8c40 = call i32 @function_1389c(i8* %v3_8c40, i32 ptrtoint ([3 x i8]* @global_var_16b10.37 to i32))
  store i32 %v4_8c40, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v3_8c48 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8c48, i32* %r3.global-to-local, align 4
  %v0_8c4c = load i32, i32* @r6, align 4
  %v1_8c4c = add i32 %v0_8c4c, 37
  %v2_8c4c = inttoptr i32 %v1_8c4c to i32*
  %v3_8c4c = load i32, i32* %v2_8c4c, align 4
  store i32 %v3_8c4c, i32* %r2.global-to-local, align 4
  %v1_8c50 = add i32 %v3_8c48, 1
  store i32 %v1_8c50, i32* %ip.global-to-local, align 4
  %v2_8c54 = sub i32 %v3_8c4c, %v1_8c50
  %v3_8c54 = icmp uge i32 %v3_8c4c, %v1_8c50
  store i1 %v3_8c54, i1* %cpsr_c.global-to-local, align 1
  %v4_8c54 = xor i32 %v3_8c4c, %v1_8c50
  %v5_8c54 = xor i32 %v2_8c54, %v3_8c4c
  %v6_8c54 = and i32 %v5_8c54, %v4_8c54
  %v7_8c54 = icmp slt i32 %v6_8c54, 0
  store i1 %v7_8c54, i1* %cpsr_v.global-to-local, align 1
  %v8_8c54 = icmp slt i32 %v2_8c54, 0
  store i1 %v8_8c54, i1* %cpsr_n.global-to-local, align 1
  %v9_8c54 = icmp eq i32 %v3_8c4c, %v1_8c50
  store i1 %v9_8c54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8c50, i32* %stack_var_-40, align 4
  %v8_8c5c = icmp sgt i32 %v3_8c4c, %v1_8c50
  br i1 %v8_8c5c, label %dec_label_pc_8c04, label %dec_label_pc_8c60

dec_label_pc_8c60:                                ; preds = %dec_label_pc_8c04, %dec_label_pc_8bd8
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c64 = call i32 @function_13874(i8* %v1_8940)
  %v2_8c6c = add i32 %v2_8c64, %stack_var_-20856.0.ph
  store i32 %v2_8c6c, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32* %r1.global-to-local, align 4
  %v3_8c74 = inttoptr i32 %v2_8c6c to i8*
  %v4_8c74 = call i32 @function_1389c(i8* %v3_8c74, i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32))
  store i32 %v4_8c74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8c78

dec_label_pc_8c78:                                ; preds = %dec_label_pc_8bcc, %dec_label_pc_8c60
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c7c = call i32 @function_13874(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32* %r1.global-to-local, align 4
  %v2_8c88 = add i32 %v2_8c7c, %stack_var_-20856.0.ph
  store i32 %v2_8c88, i32* @r0, align 4
  %v3_8c8c = inttoptr i32 %v2_8c88 to i8*
  %v4_8c8c = call i32 @function_1389c(i8* %v3_8c8c, i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32))
  store i32 %v4_8c8c, i32* %r0.global-to-local, align 4
  store i32 %v6_8200, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_8c94, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_8c94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8c94, label %dec_label_pc_8cb4, label %dec_label_pc_8c9c

dec_label_pc_8c9c:                                ; preds = %dec_label_pc_8c78
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8ca0 = call i32 @function_13874(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v6_8200, i32* %r1.global-to-local, align 4
  %v2_8cac = add i32 %v2_8ca0, %stack_var_-20856.0.ph
  store i32 %v2_8cac, i32* @r0, align 4
  %v2_8cb0 = inttoptr i32 %v2_8cac to i8*
  %v3_8cb0 = call i32 @function_1389c(i8* %v2_8cb0, i32 %v6_8200)
  store i32 %v3_8cb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8cb4

dec_label_pc_8cb4:                                ; preds = %dec_label_pc_8c78, %dec_label_pc_8c9c
  %v0_8cb4 = load i32, i32* @r7, align 4
  %v1_8cb4 = add i32 %v0_8cb4, 1440
  store i32 %v1_8cb4, i32* %r4.global-to-local, align 4
  %v0_8cb8 = load i32, i32* @r6, align 4
  store i32 %v0_8cb8, i32* %r0.global-to-local, align 4
  store i32 %v1_8cb4, i32* %r1.global-to-local, align 4
  %v2_8cc0 = inttoptr i32 %v0_8cb8 to i8*
  %v3_8cc0 = call i32 @function_13c54(i8* %v2_8cc0, i32 %v1_8cb4)
  store i32 %v3_8cc0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8cc4 = icmp slt i32 %v3_8cc0, 0
  store i1 %v1_8cc4, i1* %cpsr_n.global-to-local, align 1
  %v2_8cc4 = icmp eq i32 %v3_8cc0, 0
  store i1 %v2_8cc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8cc4, label %dec_label_pc_960c, label %dec_label_pc_8ccc

dec_label_pc_8ccc:                                ; preds = %dec_label_pc_8cb4, %dec_label_pc_960c
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_8cd0 = load i32, i32* @r6, align 4
  %v1_8cd0 = add i32 %v0_8cd0, -1431
  %v2_8cd0 = inttoptr i32 %v1_8cd0 to i32*
  %v3_8cd0 = load i32, i32* %v2_8cd0, align 4
  store i32 %v3_8cd0, i32* @r4, align 4
  %v2_8cd4 = call i32 @function_13874(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v2_8cd4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8ce4 = load i32, i32* @r4, align 4
  store i32 %v0_8ce4, i32* %r0.global-to-local, align 4
  %v5_8ce8 = call i32 @function_14aa0(i32 %v0_8ce4, i32* %v4_8ce8, i32 %v2_8cd4, i32 16384)
  store i32 %v5_8ce8, i32* %r0.global-to-local, align 4
  %v0_8cec = load i32, i32* @r6, align 4
  %v1_8cec = add i32 %v0_8cec, -1431
  %v2_8cec = inttoptr i32 %v1_8cec to i32*
  %v3_8cec = load i32, i32* %v2_8cec, align 4
  store i32 %v3_8cec, i32* %r0.global-to-local, align 4
  %v3_8cf4 = udiv i32 %v3_8cec, 32
  %v3_8cf8 = mul nuw nsw i32 %v3_8cf4, 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8d00 = add i32 %v3_8cf8, %v2_8748
  store i32 %v2_8d00, i32* %r3.global-to-local, align 4
  %v1_8d04 = add i32 %v2_8d00, -164
  %v2_8d04 = inttoptr i32 %v1_8d04 to i32*
  %v3_8d04 = load i32, i32* %v2_8d04, align 4
  %v1_8d08 = urem i32 %v3_8cec, 32
  %v1_8d0c = load i32, i32* %fp.global-to-local, align 4
  %v7_8d0c = shl i32 %v1_8d0c, %v1_8d08
  %v8_8d0c = or i32 %v7_8d0c, %v3_8d04
  store i32 %v8_8d0c, i32* %r2.global-to-local, align 4
  %v0_8d10 = load i32, i32* @sl, align 4
  %v2_8d10 = sub i32 %v0_8d10, %v3_8cec
  %v3_8d10 = icmp uge i32 %v0_8d10, %v3_8cec
  store i1 %v3_8d10, i1* %cpsr_c.global-to-local, align 1
  %v4_8d10 = xor i32 %v0_8d10, %v3_8cec
  %v5_8d10 = xor i32 %v2_8d10, %v0_8d10
  %v6_8d10 = and i32 %v5_8d10, %v4_8d10
  %v7_8d10 = icmp slt i32 %v6_8d10, 0
  store i1 %v7_8d10, i1* %cpsr_v.global-to-local, align 1
  %v8_8d10 = icmp slt i32 %v2_8d10, 0
  store i1 %v8_8d10, i1* %cpsr_n.global-to-local, align 1
  %v9_8d10 = icmp eq i32 %v0_8d10, %v3_8cec
  store i1 %v9_8d10, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r1.global-to-local, align 4
  store i32 %v8_8d0c, i32* %v2_8d04, align 4
  %v0_8d1c = load i32, i32* %sb.global-to-local, align 4
  %v1_8d1c = load i32, i32* @r6, align 4
  %v2_8d1c = add i32 %v1_8d1c, -1419
  %v3_8d1c = inttoptr i32 %v2_8d1c to i32*
  store i32 %v0_8d1c, i32* %v3_8d1c, align 4
  %v0_8d20 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d20 = trunc i32 %v0_8d20 to i8
  %v2_8d20 = load i32, i32* @r6, align 4
  %v3_8d20 = add i32 %v2_8d20, -1427
  %v4_8d20 = inttoptr i32 %v3_8d20 to i8*
  store i8 %v1_8d20, i8* %v4_8d20, align 1
  %v0_8d24 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_8d24 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_8d24 = xor i1 %v0_8d24, %v1_8d24
  br i1 %v2_8d24, label %dec_label_pc_8d28, label %dec_label_pc_8630

dec_label_pc_8d28:                                ; preds = %dec_label_pc_8ccc
  %v0_8d28 = load i32, i32* %r0.global-to-local, align 4
  %v1_8d28 = add i32 %v0_8d28, 1
  store i32 %v1_8d28, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_8d30:                                ; preds = %dec_label_pc_8608
  %v1_8d30 = add i32 %v3_8900, -1431
  %v2_8d30 = inttoptr i32 %v1_8d30 to i32*
  %v3_8d30 = load i32, i32* %v2_8d30, align 4
  store i32 %v3_8d30, i32* %r0.global-to-local, align 4
  %v3_8d38 = udiv i32 %v3_8d30, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8d3c = mul nuw nsw i32 %v3_8d38, 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_8d44 = add i32 %v3_8d3c, %v2_8748
  store i32 %v2_8d44, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_8d48:                                ; preds = %.thread24, %.thread35, %dec_label_pc_8d30
  %v1_8d54 = phi i32 [ %v4_85ec, %.thread35 ], [ %v4_85cc, %.thread24 ], [ %v3_8d30, %dec_label_pc_8d30 ]
  %v1_8d58 = phi i32 [ %v3_8600, %.thread35 ], [ %v3_85e0, %.thread24 ], [ %v2_8d44, %dec_label_pc_8d30 ]
  %v1_8d48 = add i32 %v1_8d58, -164
  %v2_8d48 = inttoptr i32 %v1_8d48 to i32*
  %v3_8d48 = load i32, i32* %v2_8d48, align 4
  %v1_8d4c = urem i32 %v1_8d54, 32
  store i32 %v1_8d4c, i32* %r1.global-to-local, align 4
  %v1_8d50 = load i32, i32* %fp.global-to-local, align 4
  %v7_8d50 = shl i32 %v1_8d50, %v1_8d4c
  %v8_8d50 = or i32 %v7_8d50, %v3_8d48
  store i32 %v8_8d50, i32* %r2.global-to-local, align 4
  %v0_8d54 = load i32, i32* @sl, align 4
  %v2_8d54 = sub i32 %v0_8d54, %v1_8d54
  %v3_8d54 = icmp uge i32 %v0_8d54, %v1_8d54
  store i1 %v3_8d54, i1* %cpsr_c.global-to-local, align 1
  %v4_8d54 = xor i32 %v0_8d54, %v1_8d54
  %v5_8d54 = xor i32 %v2_8d54, %v0_8d54
  %v6_8d54 = and i32 %v5_8d54, %v4_8d54
  %v7_8d54 = icmp slt i32 %v6_8d54, 0
  store i1 %v7_8d54, i1* %cpsr_v.global-to-local, align 1
  %v8_8d54 = icmp slt i32 %v2_8d54, 0
  store i1 %v8_8d54, i1* %cpsr_n.global-to-local, align 1
  %v9_8d54 = icmp eq i32 %v0_8d54, %v1_8d54
  store i1 %v9_8d54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8d50, i32* %v2_8d48, align 4
  %v2_8d5c = xor i1 %v8_8d54, %v7_8d54
  br i1 %v2_8d5c, label %dec_label_pc_8d60, label %dec_label_pc_8630

dec_label_pc_8d60:                                ; preds = %dec_label_pc_8d48
  %v0_8d60 = load i32, i32* %r0.global-to-local, align 4
  %v1_8d60 = add i32 %v0_8d60, 1
  store i32 %v1_8d60, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_8d68:                                ; preds = %dec_label_pc_85b8
  %v1_8d68 = add i32 %v3_8900, -1423
  %v2_8d68 = inttoptr i32 %v1_8d68 to i32*
  %v3_8d68 = load i32, i32* %v2_8d68, align 4
  %v1_8d6c = load i32, i32* %sb.global-to-local, align 4
  %v2_8d6c = sub i32 %v1_8d6c, %v3_8d68
  store i32 %v2_8d6c, i32* %r3.global-to-local, align 4
  %v1_8d70 = add i32 %v2_8d6c, -30
  %v2_8d70 = icmp ugt i32 %v2_8d6c, 29
  store i1 %v2_8d70, i1* %cpsr_c.global-to-local, align 1
  %v3_8d70 = sub i32 29, %v2_8d6c
  %v4_8d70 = and i32 %v3_8d70, %v2_8d6c
  %v5_8d70 = icmp slt i32 %v4_8d70, 0
  store i1 %v5_8d70, i1* %cpsr_v.global-to-local, align 1
  %v6_8d70 = icmp slt i32 %v1_8d70, 0
  store i1 %v6_8d70, i1* %cpsr_n.global-to-local, align 1
  %v7_8d70 = icmp eq i32 %v2_8d6c, 30
  store i1 %v7_8d70, i1* %cpsr_z.global-to-local, align 1
  %v2_8d74 = xor i1 %v7_8d70, true
  %v3_8d74 = and i1 %v2_8d70, %v2_8d74
  br i1 %v3_8d74, label %dec_label_pc_8618, label %dec_label_pc_8d78

dec_label_pc_8d78:                                ; preds = %dec_label_pc_8d68
  %v1_8d78 = add i32 %v3_8900, -1431
  %v2_8d78 = inttoptr i32 %v1_8d78 to i32*
  %v3_8d78 = load i32, i32* %v2_8d78, align 4
  store i32 %v3_8d78, i32* %r0.global-to-local, align 4
  %v3_8d80 = udiv i32 %v3_8d78, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8d84 = mul nuw nsw i32 %v3_8d80, 4
  store i32 %v3_8d84, i32* %r3.global-to-local, align 4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_8750

dec_label_pc_8dd0:                                ; preds = %dec_label_pc_881c
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  %v2_8dd8 = call i32 @function_13914(i32 %v2_8280, i32 10240)
  store i32 %v2_8dd8, i32* %r0.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_8de4 = load i32, i32* @r8, align 4
  %v1_8de4 = add i32 %v0_8de4, -1456
  %v2_8de4 = inttoptr i32 %v1_8de4 to i32*
  %v3_8de4 = load i32, i32* %v2_8de4, align 4
  store i32 %v3_8de4, i32* %r0.global-to-local, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v5_8df0 = call i32 @function_14a40(i32 %v3_8de4, i32* nonnull %stack_var_-20809, i32 10240, i32 16386)
  store i32 %v5_8df0, i32* %r0.global-to-local, align 4
  store i32 %v5_8df0, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8df8 = icmp slt i32 %v5_8df0, 0
  store i1 %v1_8df8, i1* %cpsr_n.global-to-local, align 1
  %v2_8df8 = icmp eq i32 %v5_8df0, 0
  store i1 %v2_8df8, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  %tmp210 = icmp slt i32 %v5_8df0, 1
  br i1 %tmp210, label %dec_label_pc_9a7c, label %dec_label_pc_8e04

dec_label_pc_8e04:                                ; preds = %dec_label_pc_8dd0
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 %v5_8df0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16b14.39 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_8e14 = call i32 @function_13938(i32 %v2_8280, i32 %v5_8df0, i32 ptrtoint ([5 x i8]* @global_var_16b14.39 to i32), i32 4)
  store i32 %v5_8e14, i32* %r0.global-to-local, align 4
  %v1_8e18 = add i32 %v5_8e14, 1
  %v2_8e18 = icmp eq i32 %v5_8e14, -1
  store i1 %v2_8e18, i1* %cpsr_c.global-to-local, align 1
  %v3_8e18 = sub i32 0, %v5_8e14
  %v4_8e18 = and i32 %v1_8e18, %v3_8e18
  %v5_8e18 = icmp slt i32 %v4_8e18, 0
  store i1 %v5_8e18, i1* %cpsr_v.global-to-local, align 1
  %v6_8e18 = icmp slt i32 %v1_8e18, 0
  store i1 %v6_8e18, i1* %cpsr_n.global-to-local, align 1
  %v7_8e18 = icmp eq i32 %v1_8e18, 0
  store i1 %v7_8e18, i1* %cpsr_z.global-to-local, align 1
  %v0_9914 = load i32, i32* %fp.global-to-local, align 4
  br i1 %v7_8e18, label %dec_label_pc_9914, label %dec_label_pc_8e20

dec_label_pc_8e20:                                ; preds = %dec_label_pc_8e04, %dec_label_pc_9914
  store i32 ptrtoint ([5 x i8]* @global_var_16b14.39 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v0_9914, i32* %r1.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v5_8e30 = call i32 @function_13938(i32 %v2_8280, i32 %v0_9914, i32 ptrtoint ([5 x i8]* @global_var_16b14.39 to i32), i32 4)
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_8e3c = add i32 %v5_8e30, %v2_8748
  store i32 %v2_8e3c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v3_8e44 = load i32, i32* @r6, align 4
  %v4_8e44 = add i32 %v3_8e44, %v2_8e3c
  %v5_8e44 = inttoptr i32 %v4_8e44 to i8*
  store i8 0, i8* %v5_8e44, align 1
  %v0_8e48 = load i32, i32* @r5, align 4
  store i32 %v0_8e48, i32* %r1.global-to-local, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v2_8e50 = inttoptr i32 %v0_8e48 to i32*
  %v3_8e50 = call i32 @function_12e6c(i32 46, i32* %v2_8e50)
  %v0_8e54 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8e54, i32* @r1, align 4
  store i32 %v3_8e50, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8e60 = call i32 @function_13bc8(i8* %tmp199, i32 %v0_8e54, i32 %v3_8e50)
  store i32 %v4_8e60, i32* %r0.global-to-local, align 4
  %v1_8e64 = add i32 %v4_8e60, 1
  %v2_8e64 = icmp eq i32 %v4_8e60, -1
  store i1 %v2_8e64, i1* %cpsr_c.global-to-local, align 1
  %v3_8e64 = sub i32 0, %v4_8e60
  %v4_8e64 = and i32 %v1_8e64, %v3_8e64
  %v5_8e64 = icmp slt i32 %v4_8e64, 0
  store i1 %v5_8e64, i1* %cpsr_v.global-to-local, align 1
  %v6_8e64 = icmp slt i32 %v1_8e64, 0
  store i1 %v6_8e64, i1* %cpsr_n.global-to-local, align 1
  %v7_8e64 = icmp eq i32 %v1_8e64, 0
  store i1 %v7_8e64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e64, label %.thread45, label %bb211

bb211:                                            ; preds = %dec_label_pc_8e20
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_8e6c = load i32, i32* @r8, align 4
  %v3_8e6c = add i32 %v2_8e6c, -4
  %v4_8e6c = inttoptr i32 %v3_8e6c to i32*
  store i32 2, i32* %v4_8e6c, align 4
  br label %.thread45

.thread45:                                        ; preds = %dec_label_pc_8e20, %bb211
  %v0_8e70 = load i32, i32* @r5, align 4
  store i32 %v0_8e70, i32* %r1.global-to-local, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v2_8e78 = inttoptr i32 %v0_8e70 to i32*
  %v3_8e78 = call i32 @function_12e6c(i32 45, i32* %v2_8e78)
  %v0_8e7c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8e7c, i32* @r1, align 4
  store i32 %v3_8e78, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8e88 = call i32 @function_13bc8(i8* %tmp199, i32 %v0_8e7c, i32 %v3_8e78)
  store i32 %v4_8e88, i32* %r0.global-to-local, align 4
  %v1_8e8c = add i32 %v4_8e88, 1
  %v2_8e8c = icmp eq i32 %v4_8e88, -1
  store i1 %v2_8e8c, i1* %cpsr_c.global-to-local, align 1
  %v3_8e8c = sub i32 0, %v4_8e88
  %v4_8e8c = and i32 %v1_8e8c, %v3_8e8c
  %v5_8e8c = icmp slt i32 %v4_8e8c, 0
  store i1 %v5_8e8c, i1* %cpsr_v.global-to-local, align 1
  %v6_8e8c = icmp slt i32 %v1_8e8c, 0
  store i1 %v6_8e8c, i1* %cpsr_n.global-to-local, align 1
  %v7_8e8c = icmp eq i32 %v1_8e8c, 0
  store i1 %v7_8e8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e8c, label %.thread46, label %bb212

bb212:                                            ; preds = %.thread45
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_8e94 = load i32, i32* @r8, align 4
  %v3_8e94 = add i32 %v2_8e94, -4
  %v4_8e94 = inttoptr i32 %v3_8e94 to i32*
  store i32 1, i32* %v4_8e94, align 4
  br label %.thread46

.thread46:                                        ; preds = %.thread45, %bb212
  %v0_8e98 = load i32, i32* @r5, align 4
  store i32 %v0_8e98, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_8ea0 = load i32, i32* @r8, align 4
  %v2_8ea0 = inttoptr i32 %v1_8ea0 to i32*
  store i32 %v0_8e98, i32* %v2_8ea0, align 4
  %v2_8ea4 = inttoptr i32 %v0_8e98 to i32*
  %v3_8ea4 = call i32 @function_12e6c(i32 44, i32* %v2_8ea4)
  %v0_8ea8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ea8, i32* @r1, align 4
  store i32 %v3_8ea4, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8eb4 = call i32 @function_13bc8(i8* %tmp199, i32 %v0_8ea8, i32 %v3_8ea4)
  store i32 %v4_8eb4, i32* %r0.global-to-local, align 4
  %v1_8eb8 = add i32 %v4_8eb4, 1
  %v2_8eb8 = icmp eq i32 %v4_8eb4, -1
  store i1 %v2_8eb8, i1* %cpsr_c.global-to-local, align 1
  %v3_8eb8 = sub i32 0, %v4_8eb4
  %v4_8eb8 = and i32 %v1_8eb8, %v3_8eb8
  %v5_8eb8 = icmp slt i32 %v4_8eb8, 0
  store i1 %v5_8eb8, i1* %cpsr_v.global-to-local, align 1
  %v6_8eb8 = icmp slt i32 %v1_8eb8, 0
  store i1 %v6_8eb8, i1* %cpsr_n.global-to-local, align 1
  %v7_8eb8 = icmp eq i32 %v1_8eb8, 0
  store i1 %v7_8eb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8eb8, label %.thread47, label %dec_label_pc_8ec0

dec_label_pc_8ec0:                                ; preds = %.thread46
  %v0_8ec0 = load i32, i32* @r5, align 4
  store i32 %v0_8ec0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v2_8ec8 = inttoptr i32 %v0_8ec0 to i32*
  %v3_8ec8 = call i32 @function_12e6c(i32 44, i32* %v2_8ec8)
  %v0_8ecc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ecc, i32* @r1, align 4
  store i32 %v3_8ec8, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8ed8 = call i32 @function_13bc8(i8* %tmp199, i32 %v0_8ecc, i32 %v3_8ec8)
  store i32 %v4_8ed8, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8ee4 = add i32 %v4_8ed8, %v2_8748
  store i32 %v2_8ee4, i32* %r3.global-to-local, align 4
  %v1_8ee8 = load i32, i32* @r6, align 4
  %v2_8ee8 = add i32 %v1_8ee8, %v2_8ee4
  %v3_8ee8 = inttoptr i32 %v2_8ee8 to i8*
  %v4_8ee8 = load i8, i8* %v3_8ee8, align 1
  %v2_8ef0 = icmp ugt i8 %v4_8ee8, 31
  store i1 %v2_8ef0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8ef0 = icmp ult i8 %v4_8ee8, 32
  store i1 %v6_8ef0, i1* %cpsr_n.global-to-local, align 1
  %v7_8ef0 = icmp eq i8 %v4_8ee8, 32
  store i1 %v7_8ef0, i1* %cpsr_z.global-to-local, align 1
  %v2_8ef8 = zext i1 %v7_8ef0 to i32
  %v2_8ef8.v4_8ed8 = add i32 %v2_8ef8, %v4_8ed8
  store i32 %v2_8ef8.v4_8ed8, i32* @r4, align 4
  %v2_8efc = add i32 %v2_8ef8.v4_8ed8, %v2_8280
  store i32 %v2_8efc, i32* @r6, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8efc, i32* %r0.global-to-local, align 4
  %v1_8f08 = load i32, i32* %fp.global-to-local, align 4
  %v2_8f08 = sub i32 %v1_8f08, %v2_8ef8.v4_8ed8
  store i32 %v2_8f08, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8f10 = call i32 @function_13938(i32 %v2_8efc, i32 %v2_8f08, i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32 2)
  store i32 %v5_8f10, i32* %r0.global-to-local, align 4
  %v1_8f14 = add i32 %v5_8f10, 1
  %v2_8f14 = icmp eq i32 %v5_8f10, -1
  store i1 %v2_8f14, i1* %cpsr_c.global-to-local, align 1
  %v3_8f14 = sub i32 0, %v5_8f10
  %v4_8f14 = and i32 %v1_8f14, %v3_8f14
  %v5_8f14 = icmp slt i32 %v4_8f14, 0
  store i1 %v5_8f14, i1* %cpsr_v.global-to-local, align 1
  %v6_8f14 = icmp slt i32 %v1_8f14, 0
  store i1 %v6_8f14, i1* %cpsr_n.global-to-local, align 1
  %v7_8f14 = icmp eq i32 %v1_8f14, 0
  store i1 %v7_8f14, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_8f10, i32* %r2.global-to-local, align 4
  br i1 %v7_8f14, label %.thread47, label %dec_label_pc_8f20

dec_label_pc_8f20:                                ; preds = %dec_label_pc_8ec0
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_8f28 = load i32, i32* @r4, align 4
  %v2_8f28 = add i32 %v1_8f28, %v2_8748
  %v1_8f2c = add i32 %v5_8f10, -1
  %v2_8f2c = icmp ne i32 %v5_8f10, 0
  store i1 %v2_8f2c, i1* %cpsr_c.global-to-local, align 1
  %v3_8f2c = sub i32 0, %v5_8f10
  %v4_8f2c = and i32 %v5_8f10, %v3_8f2c
  %v5_8f2c = icmp slt i32 %v4_8f2c, 0
  store i1 %v5_8f2c, i1* %cpsr_v.global-to-local, align 1
  %v6_8f2c = icmp slt i32 %v1_8f2c, 0
  store i1 %v6_8f2c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f2c = icmp eq i32 %v5_8f10, 1
  store i1 %v7_8f2c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f30 = add i32 %v2_8f28, -20736
  store i32 %v1_8f30, i32* %r3.global-to-local, align 4
  %v7_8f34 = icmp sgt i32 %v5_8f10, 1
  br i1 %v7_8f34, label %bb213, label %bb214

bb213:                                            ; preds = %dec_label_pc_8f20
  %v9_8f34 = add i32 %v5_8f10, -2
  store i32 %v9_8f34, i32* %r2.global-to-local, align 4
  br label %bb214

bb214:                                            ; preds = %dec_label_pc_8f20, %bb213
  %v3_8f3c = phi i32 [ %v5_8f10, %dec_label_pc_8f20 ], [ %v9_8f34, %bb213 ]
  %v1_8f38 = add i32 %v2_8f28, -20773
  store i32 %v1_8f38, i32* %r3.global-to-local, align 4
  %v0_8f3c = load i32, i32* @r5, align 4
  %v1_8f3c = trunc i32 %v0_8f3c to i8
  %v4_8f3c = add i32 %v3_8f3c, %v1_8f38
  %v5_8f3c = inttoptr i32 %v4_8f3c to i8*
  store i8 %v1_8f3c, i8* %v5_8f3c, align 1
  %v0_8f40 = load i32, i32* @r6, align 4
  store i32 %v0_8f40, i32* %r0.global-to-local, align 4
  %v1_8f44 = inttoptr i32 %v0_8f40 to i8*
  %v2_8f44 = call i32 @function_13874(i8* %v1_8f44)
  %v0_8f48 = load i32, i32* @r5, align 4
  store i32 %v0_8f48, i32* %r1.global-to-local, align 4
  store i32 %v2_8f44, i32* @r4, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v2_8f54 = inttoptr i32 %v0_8f48 to i32*
  %v3_8f54 = call i32 @function_12e6c(i32 43, i32* %v2_8f54)
  %v0_8f58 = load i32, i32* @r4, align 4
  store i32 %v0_8f58, i32* @r1, align 4
  store i32 %v3_8f54, i32* %r2.global-to-local, align 4
  %v0_8f60 = load i32, i32* @r6, align 4
  store i32 %v0_8f60, i32* %r0.global-to-local, align 4
  %v3_8f64 = inttoptr i32 %v0_8f60 to i8*
  %v4_8f64 = call i32 @function_13bc8(i8* %v3_8f64, i32 %v0_8f58, i32 %v3_8f54)
  store i32 %v4_8f64, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8f68 = icmp slt i32 %v4_8f64, 0
  store i1 %v1_8f68, i1* %cpsr_n.global-to-local, align 1
  %v2_8f68 = icmp eq i32 %v4_8f64, 0
  store i1 %v2_8f68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f68, label %.thread47, label %bb215

bb215:                                            ; preds = %bb214
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_8f70 = load i32, i32* @r8, align 4
  %v3_8f70 = inttoptr i32 %v2_8f70 to i32*
  store i32 1, i32* %v3_8f70, align 4
  br label %.thread47

.thread47:                                        ; preds = %bb214, %dec_label_pc_8ec0, %.thread46, %bb215
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_8f80 = load i32, i32* @r8, align 4
  %v2_8f80 = add i32 %v1_8f80, 4
  %v3_8f80 = inttoptr i32 %v2_8f80 to i32*
  store i32 0, i32* %v3_8f80, align 4
  %v3_8f84 = call i32 @function_12e6c(i32 41, i32* null)
  %v0_8f88 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8f88, i32* @r1, align 4
  store i32 %v3_8f84, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8f94 = call i32 @function_13bc8(i8* %tmp199, i32 %v0_8f88, i32 %v3_8f84)
  store i32 %v4_8f94, i32* %r0.global-to-local, align 4
  %v1_8f9c = add i32 %v4_8f94, 1
  %v2_8f9c = icmp eq i32 %v4_8f94, -1
  store i1 %v2_8f9c, i1* %cpsr_c.global-to-local, align 1
  %v3_8f9c = sub i32 0, %v4_8f94
  %v4_8f9c = and i32 %v1_8f9c, %v3_8f9c
  %v5_8f9c = icmp slt i32 %v4_8f9c, 0
  store i1 %v5_8f9c, i1* %cpsr_v.global-to-local, align 1
  %v6_8f9c = icmp slt i32 %v1_8f9c, 0
  store i1 %v6_8f9c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f9c = icmp eq i32 %v1_8f9c, 0
  store i1 %v7_8f9c, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_8f9c, label %.thread48, label %dec_label_pc_8fa8

dec_label_pc_8fa8:                                ; preds = %.thread47
  %v0_8fa8 = load i32, i32* @r6, align 4
  store i32 %v0_8fa8, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v2_8fb0 = inttoptr i32 %v0_8fa8 to i32*
  %v3_8fb0 = call i32 @function_12e6c(i32 41, i32* %v2_8fb0)
  %v0_8fb4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8fb4, i32* @r1, align 4
  store i32 %v3_8fb0, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8fc0 = call i32 @function_13bc8(i8* %tmp199, i32 %v0_8fb4, i32 %v3_8fb0)
  store i32 %v4_8fc0, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8fcc = add i32 %v4_8fc0, %v2_8748
  store i32 %v2_8fcc, i32* %r3.global-to-local, align 4
  %v1_8fd0 = load i32, i32* @r5, align 4
  %v2_8fd0 = add i32 %v1_8fd0, %v2_8fcc
  %v3_8fd0 = inttoptr i32 %v2_8fd0 to i8*
  %v4_8fd0 = load i8, i8* %v3_8fd0, align 1
  %v2_8fd8 = icmp ugt i8 %v4_8fd0, 31
  store i1 %v2_8fd8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8fd8 = icmp ult i8 %v4_8fd0, 32
  store i1 %v6_8fd8, i1* %cpsr_n.global-to-local, align 1
  %v7_8fd8 = icmp eq i8 %v4_8fd0, 32
  store i1 %v7_8fd8, i1* %cpsr_z.global-to-local, align 1
  %v2_8fe0 = zext i1 %v7_8fd8 to i32
  %v2_8fe0.v4_8fc0 = add i32 %v2_8fe0, %v4_8fc0
  store i32 %v2_8fe0.v4_8fc0, i32* @r4, align 4
  %v2_8fe4 = add i32 %v2_8fe0.v4_8fc0, %v2_8280
  store i32 %v2_8fe4, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8fe4, i32* %r0.global-to-local, align 4
  %v1_8ff0 = load i32, i32* %fp.global-to-local, align 4
  %v2_8ff0 = sub i32 %v1_8ff0, %v2_8fe0.v4_8fc0
  store i32 %v2_8ff0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8ff8 = call i32 @function_13938(i32 %v2_8fe4, i32 %v2_8ff0, i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32 2)
  store i32 %v5_8ff8, i32* %r0.global-to-local, align 4
  %v1_8ffc = add i32 %v5_8ff8, 1
  %v2_8ffc = icmp eq i32 %v5_8ff8, -1
  store i1 %v2_8ffc, i1* %cpsr_c.global-to-local, align 1
  %v3_8ffc = sub i32 0, %v5_8ff8
  %v4_8ffc = and i32 %v1_8ffc, %v3_8ffc
  %v5_8ffc = icmp slt i32 %v4_8ffc, 0
  store i1 %v5_8ffc, i1* %cpsr_v.global-to-local, align 1
  %v6_8ffc = icmp slt i32 %v1_8ffc, 0
  store i1 %v6_8ffc, i1* %cpsr_n.global-to-local, align 1
  %v7_8ffc = icmp eq i32 %v1_8ffc, 0
  store i1 %v7_8ffc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_8ff8, i32* %r2.global-to-local, align 4
  br i1 %v7_8ffc, label %.thread48, label %dec_label_pc_9008

dec_label_pc_9008:                                ; preds = %dec_label_pc_8fa8
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_9010 = load i32, i32* @r4, align 4
  %v2_9010 = add i32 %v1_9010, %v2_8748
  %v1_9014 = add i32 %v5_8ff8, -1
  %v2_9014 = icmp ne i32 %v5_8ff8, 0
  store i1 %v2_9014, i1* %cpsr_c.global-to-local, align 1
  %v3_9014 = sub i32 0, %v5_8ff8
  %v4_9014 = and i32 %v5_8ff8, %v3_9014
  %v5_9014 = icmp slt i32 %v4_9014, 0
  store i1 %v5_9014, i1* %cpsr_v.global-to-local, align 1
  %v6_9014 = icmp slt i32 %v1_9014, 0
  store i1 %v6_9014, i1* %cpsr_n.global-to-local, align 1
  %v7_9014 = icmp eq i32 %v5_8ff8, 1
  store i1 %v7_9014, i1* %cpsr_z.global-to-local, align 1
  %v1_9018 = add i32 %v2_9010, -20736
  store i32 %v1_9018, i32* %r3.global-to-local, align 4
  %v7_901c = icmp sgt i32 %v5_8ff8, 1
  br i1 %v7_901c, label %bb216, label %bb217

bb216:                                            ; preds = %dec_label_pc_9008
  %v9_901c = add i32 %v5_8ff8, -2
  store i32 %v9_901c, i32* %r2.global-to-local, align 4
  br label %bb217

bb217:                                            ; preds = %dec_label_pc_9008, %bb216
  %v3_9024 = phi i32 [ %v5_8ff8, %dec_label_pc_9008 ], [ %v9_901c, %bb216 ]
  %v1_9020 = add i32 %v2_9010, -20773
  store i32 %v1_9020, i32* %r3.global-to-local, align 4
  %v0_9024 = load i32, i32* @r6, align 4
  %v1_9024 = trunc i32 %v0_9024 to i8
  %v4_9024 = add i32 %v3_9024, %v1_9020
  %v5_9024 = inttoptr i32 %v4_9024 to i8*
  store i8 %v1_9024, i8* %v5_9024, align 1
  %v0_9028 = load i32, i32* @r5, align 4
  store i32 %v0_9028, i32* %r0.global-to-local, align 4
  %v1_902c = inttoptr i32 %v0_9028 to i8*
  %v2_902c = call i32 @function_13874(i8* %v1_902c)
  %v0_9030 = load i32, i32* @r6, align 4
  store i32 %v0_9030, i32* %r1.global-to-local, align 4
  store i32 %v2_902c, i32* @r4, align 4
  store i32 42, i32* %r0.global-to-local, align 4
  %v2_903c = inttoptr i32 %v0_9030 to i32*
  %v3_903c = call i32 @function_12e6c(i32 42, i32* %v2_903c)
  %v0_9040 = load i32, i32* @r4, align 4
  store i32 %v0_9040, i32* @r1, align 4
  store i32 %v3_903c, i32* %r2.global-to-local, align 4
  %v0_9048 = load i32, i32* @r5, align 4
  store i32 %v0_9048, i32* %r0.global-to-local, align 4
  %v3_904c = inttoptr i32 %v0_9048 to i8*
  %v4_904c = call i32 @function_13bc8(i8* %v3_904c, i32 %v0_9040, i32 %v3_903c)
  store i32 %v4_904c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9050 = icmp slt i32 %v4_904c, 0
  store i1 %v1_9050, i1* %cpsr_n.global-to-local, align 1
  %v2_9050 = icmp eq i32 %v4_904c, 0
  store i1 %v2_9050, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9050, label %.thread48, label %bb218

bb218:                                            ; preds = %bb217
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9058 = load i32, i32* @r8, align 4
  %v3_9058 = add i32 %v2_9058, 4
  %v4_9058 = inttoptr i32 %v3_9058 to i32*
  store i32 1, i32* %v4_9058, align 4
  br label %.thread48

.thread48:                                        ; preds = %bb217, %dec_label_pc_8fa8, %.thread47, %bb218
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_9064 = call i32 @function_12e6c(i32 40, i32* null)
  %v0_9068 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9068, i32* @r1, align 4
  store i32 %v3_9064, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9074 = call i32 @function_13bc8(i8* %tmp199, i32 %v0_9068, i32 %v3_9064)
  store i32 %v4_9074, i32* %r0.global-to-local, align 4
  %v1_9078 = add i32 %v4_9074, 1
  %v2_9078 = icmp eq i32 %v4_9074, -1
  store i1 %v2_9078, i1* %cpsr_c.global-to-local, align 1
  %v3_9078 = sub i32 0, %v4_9074
  %v4_9078 = and i32 %v1_9078, %v3_9078
  %v5_9078 = icmp slt i32 %v4_9078, 0
  store i1 %v5_9078, i1* %cpsr_v.global-to-local, align 1
  %v6_9078 = icmp slt i32 %v1_9078, 0
  store i1 %v6_9078, i1* %cpsr_n.global-to-local, align 1
  %v7_9078 = icmp eq i32 %v1_9078, 0
  store i1 %v7_9078, i1* %cpsr_z.global-to-local, align 1
  store i32 -20737, i32* %r5.global-to-local, align 4
  br i1 %v7_9078, label %.thread, label %dec_label_pc_9090

.thread:                                          ; preds = %.thread48
  store i32 -20773, i32* %r5.global-to-local, align 4
  %v2_9088 = load i32, i32* @r8, align 4
  %v3_9088 = add i32 %v2_9088, 8
  %v4_9088 = inttoptr i32 %v3_9088 to i32*
  store i32 0, i32* %v4_9088, align 4
  br label %dec_label_pc_9124

dec_label_pc_9090:                                ; preds = %.thread48
  store i32 -20773, i32* @r5, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_9098 = call i32 @function_12e6c(i32 40, i32* null)
  %v0_909c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_909c, i32* @r1, align 4
  store i32 %v3_9098, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_90a8 = call i32 @function_13bc8(i8* %tmp199, i32 %v0_909c, i32 %v3_9098)
  store i32 %v4_90a8, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_90b4 = add i32 %v4_90a8, %v2_8748
  store i32 %v2_90b4, i32* %r3.global-to-local, align 4
  %v1_90b8 = load i32, i32* @r5, align 4
  %v2_90b8 = add i32 %v1_90b8, %v2_90b4
  %v3_90b8 = inttoptr i32 %v2_90b8 to i8*
  %v4_90b8 = load i8, i8* %v3_90b8, align 1
  %v2_90c0 = icmp ugt i8 %v4_90b8, 31
  store i1 %v2_90c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_90c0 = icmp ult i8 %v4_90b8, 32
  store i1 %v6_90c0, i1* %cpsr_n.global-to-local, align 1
  %v7_90c0 = icmp eq i8 %v4_90b8, 32
  store i1 %v7_90c0, i1* %cpsr_z.global-to-local, align 1
  %v2_90c8 = zext i1 %v7_90c0 to i32
  %v2_90c8.v4_90a8 = add i32 %v2_90c8, %v4_90a8
  store i32 %v2_90c8.v4_90a8, i32* @r4, align 4
  %v2_90cc = add i32 %v2_90c8.v4_90a8, %v2_8280
  store i32 %v2_90cc, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_90cc, i32* %r0.global-to-local, align 4
  %v1_90d8 = load i32, i32* %fp.global-to-local, align 4
  %v2_90d8 = sub i32 %v1_90d8, %v2_90c8.v4_90a8
  store i32 %v2_90d8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_90e0 = call i32 @function_13938(i32 %v2_90cc, i32 %v2_90d8, i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32 2)
  store i32 %v5_90e0, i32* %r0.global-to-local, align 4
  %v1_90e4 = add i32 %v5_90e0, 1
  %v2_90e4 = icmp eq i32 %v5_90e0, -1
  store i1 %v2_90e4, i1* %cpsr_c.global-to-local, align 1
  %v3_90e4 = sub i32 0, %v5_90e0
  %v4_90e4 = and i32 %v1_90e4, %v3_90e4
  %v5_90e4 = icmp slt i32 %v4_90e4, 0
  store i1 %v5_90e4, i1* %cpsr_v.global-to-local, align 1
  %v6_90e4 = icmp slt i32 %v1_90e4, 0
  store i1 %v6_90e4, i1* %cpsr_n.global-to-local, align 1
  %v7_90e4 = icmp eq i32 %v1_90e4, 0
  store i1 %v7_90e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_90e0, i32* %r2.global-to-local, align 4
  br i1 %v7_90e4, label %dec_label_pc_9124, label %dec_label_pc_90f0

dec_label_pc_90f0:                                ; preds = %dec_label_pc_9090
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_90f8 = load i32, i32* @r4, align 4
  %v2_90f8 = add i32 %v1_90f8, %v2_8748
  %v1_90fc = add i32 %v5_90e0, -1
  %v2_90fc = icmp ne i32 %v5_90e0, 0
  store i1 %v2_90fc, i1* %cpsr_c.global-to-local, align 1
  %v3_90fc = sub i32 0, %v5_90e0
  %v4_90fc = and i32 %v5_90e0, %v3_90fc
  %v5_90fc = icmp slt i32 %v4_90fc, 0
  store i1 %v5_90fc, i1* %cpsr_v.global-to-local, align 1
  %v6_90fc = icmp slt i32 %v1_90fc, 0
  store i1 %v6_90fc, i1* %cpsr_n.global-to-local, align 1
  %v7_90fc = icmp eq i32 %v5_90e0, 1
  store i1 %v7_90fc, i1* %cpsr_z.global-to-local, align 1
  %v1_9100 = add i32 %v2_90f8, -20736
  store i32 %v1_9100, i32* %r3.global-to-local, align 4
  %v7_9104 = icmp sgt i32 %v5_90e0, 1
  br i1 %v7_9104, label %bb219, label %bb220

bb219:                                            ; preds = %dec_label_pc_90f0
  %v9_9104 = add i32 %v5_90e0, -2
  store i32 %v9_9104, i32* %r2.global-to-local, align 4
  br label %bb220

bb220:                                            ; preds = %dec_label_pc_90f0, %bb219
  %v3_9118 = phi i32 [ %v5_90e0, %dec_label_pc_90f0 ], [ %v9_9104, %bb219 ]
  %v1_9108 = add i32 %v2_90f8, -20773
  store i32 %v1_9108, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v0_9110 = load i32, i32* @r5, align 4
  store i32 %v0_9110, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_9118 = add i32 %v3_9118, %v1_9108
  %v5_9118 = inttoptr i32 %v4_9118 to i8*
  store i8 0, i8* %v5_9118, align 1
  %v2_911c = inttoptr i32 %v0_9110 to i8*
  %v3_911c = call i32 @function_139a0(i8* %v2_911c, i32 10)
  store i32 %v3_911c, i32* %r0.global-to-local, align 4
  %v1_9120 = load i32, i32* @r8, align 4
  %v2_9120 = add i32 %v1_9120, 8
  %v3_9120 = inttoptr i32 %v2_9120 to i32*
  store i32 %v3_911c, i32* %v3_9120, align 4
  br label %dec_label_pc_9124

dec_label_pc_9124:                                ; preds = %.thread, %dec_label_pc_9090, %bb220
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9128:                                ; preds = %dec_label_pc_92fc, %dec_label_pc_927c, %dec_label_pc_9124
  %v1_9134 = phi i32 [ 0, %dec_label_pc_9124 ], [ %v0_927c, %dec_label_pc_927c ], [ %v1_9134.pre.pre, %dec_label_pc_92fc ]
  store i32 %v2_8280, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v2_9134 = add i32 %v1_9134, %v2_8280
  store i32 %v2_9134, i32* @r4, align 4
  %v3_9138 = call i32 @function_12e6c(i32 39, i32* null)
  %v0_913c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_913c, i32* @r1, align 4
  store i32 %v3_9138, i32* %r2.global-to-local, align 4
  %v0_9144 = load i32, i32* @r4, align 4
  store i32 %v0_9144, i32* %r0.global-to-local, align 4
  %v3_9148 = inttoptr i32 %v0_9144 to i8*
  %v4_9148 = call i32 @function_13bc8(i8* %v3_9148, i32 %v0_913c, i32 %v3_9138)
  store i32 %v4_9148, i32* %r0.global-to-local, align 4
  %v1_9150 = add i32 %v4_9148, 1
  %v2_9150 = icmp eq i32 %v4_9148, -1
  store i1 %v2_9150, i1* %cpsr_c.global-to-local, align 1
  %v3_9150 = sub i32 0, %v4_9148
  %v4_9150 = and i32 %v1_9150, %v3_9150
  %v5_9150 = icmp slt i32 %v4_9150, 0
  store i1 %v5_9150, i1* %cpsr_v.global-to-local, align 1
  %v6_9150 = icmp slt i32 %v1_9150, 0
  store i1 %v6_9150, i1* %cpsr_n.global-to-local, align 1
  %v7_9150 = icmp eq i32 %v1_9150, 0
  store i1 %v7_9150, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  br i1 %v7_9150, label %dec_label_pc_9328, label %dec_label_pc_915c

dec_label_pc_915c:                                ; preds = %dec_label_pc_9128
  %v0_915c = load i32, i32* @r8, align 4
  %v1_915c = add i32 %v0_915c, 12
  %v2_915c = inttoptr i32 %v1_915c to i32*
  %v3_915c = load i32, i32* %v2_915c, align 4
  store i32 %v3_915c, i32* %r3.global-to-local, align 4
  %v1_9160 = add i32 %v3_915c, -4
  %v2_9160 = icmp ugt i32 %v3_915c, 3
  store i1 %v2_9160, i1* %cpsr_c.global-to-local, align 1
  %v3_9160 = sub i32 3, %v3_915c
  %v4_9160 = and i32 %v3_9160, %v3_915c
  %v5_9160 = icmp slt i32 %v4_9160, 0
  store i1 %v5_9160, i1* %cpsr_v.global-to-local, align 1
  %v6_9160 = icmp slt i32 %v1_9160, 0
  store i1 %v6_9160, i1* %cpsr_n.global-to-local, align 1
  %v7_9160 = icmp eq i32 %v3_915c, 4
  store i1 %v7_9160, i1* %cpsr_z.global-to-local, align 1
  %v8_9164 = icmp sgt i32 %v3_915c, 4
  br i1 %v8_9164, label %dec_label_pc_9328, label %dec_label_pc_9168

dec_label_pc_9168:                                ; preds = %dec_label_pc_915c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v3_9170 = call i32 @function_12e6c(i32 39, i32* null)
  %v0_9174 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9174, i32* @r1, align 4
  store i32 %v3_9170, i32* %r2.global-to-local, align 4
  %v0_917c = load i32, i32* @r4, align 4
  store i32 %v0_917c, i32* %r0.global-to-local, align 4
  %v3_9180 = inttoptr i32 %v0_917c to i8*
  %v4_9180 = call i32 @function_13bc8(i8* %v3_9180, i32 %v0_9174, i32 %v3_9170)
  store i32 %v4_9180, i32* %r0.global-to-local, align 4
  %v0_9188 = load i32, i32* @r5, align 4
  %v2_9188 = add i32 %v0_9188, %v4_9180
  store i32 %v2_9188, i32* @sl, align 4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v2_9190 = add i32 %v2_9188, %v2_8748
  store i32 %v2_9190, i32* %r3.global-to-local, align 4
  %v1_9194 = load i32, i32* @r6, align 4
  %v2_9194 = add i32 %v1_9194, %v2_9190
  %v3_9194 = inttoptr i32 %v2_9194 to i8*
  %v4_9194 = load i8, i8* %v3_9194, align 1
  %v6_9194 = zext i8 %v4_9194 to i32
  store i32 %v6_9194, i32* %r2.global-to-local, align 4
  %v2_9198 = icmp ugt i8 %v4_9194, 31
  store i1 %v2_9198, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9198 = icmp ult i8 %v4_9194, 32
  store i1 %v6_9198, i1* %cpsr_n.global-to-local, align 1
  %v7_9198 = icmp eq i8 %v4_9194, 32
  store i1 %v7_9198, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9198, label %bb221, label %bb222

bb221:                                            ; preds = %dec_label_pc_9168
  %v2_919c = add i32 %v4_9180, 1
  store i32 %v2_919c, i32* %r0.global-to-local, align 4
  br label %bb222

bb222:                                            ; preds = %dec_label_pc_9168, %bb221
  %v2_91ac = phi i32 [ %v4_9180, %dec_label_pc_9168 ], [ %v2_919c, %bb221 ]
  %v1_91a0 = load i32, i32* %fp.global-to-local, align 4
  %v2_91a0 = sub i32 %v1_91a0, %v0_9188
  store i32 %v2_91a0, i32* %r3.global-to-local, align 4
  %v2_91a4 = sub i32 %v2_91a0, %v2_91ac
  store i32 %v2_91a4, i32* @r7, align 4
  %v0_91a8 = load i32, i32* @r4, align 4
  %v2_91a8 = add i32 %v0_91a8, %v2_91ac
  store i32 %v2_91a8, i32* @r6, align 4
  br i1 %v7_9198, label %bb223, label %bb224

bb223:                                            ; preds = %bb222
  %v3_91ac = add i32 %v2_91ac, %v0_9188
  store i32 %v3_91ac, i32* @sl, align 4
  br label %bb224

bb224:                                            ; preds = %bb222, %bb223
  store i32 %v2_91a4, i32* %r1.global-to-local, align 4
  store i32 %v2_91a8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_91c0 = call i32 @function_13938(i32 %v2_91a8, i32 %v2_91a4, i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32 2)
  store i32 %v5_91c0, i32* %r0.global-to-local, align 4
  %v1_91c4 = add i32 %v5_91c0, 1
  %v2_91c4 = icmp eq i32 %v5_91c0, -1
  store i1 %v2_91c4, i1* %cpsr_c.global-to-local, align 1
  %v3_91c4 = sub i32 0, %v5_91c0
  %v4_91c4 = and i32 %v1_91c4, %v3_91c4
  %v5_91c4 = icmp slt i32 %v4_91c4, 0
  store i1 %v5_91c4, i1* %cpsr_v.global-to-local, align 1
  %v6_91c4 = icmp slt i32 %v1_91c4, 0
  store i1 %v6_91c4, i1* %cpsr_n.global-to-local, align 1
  %v7_91c4 = icmp eq i32 %v1_91c4, 0
  store i1 %v7_91c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_91c0, i32* @r4, align 4
  br i1 %v7_91c4, label %dec_label_pc_927c, label %dec_label_pc_91d0

dec_label_pc_91d0:                                ; preds = %bb224
  store i32 %v2_8280, i32* %r2.global-to-local, align 4
  %v1_91d4 = add i32 %v5_91c0, -1
  %v2_91d4 = icmp ne i32 %v5_91c0, 0
  store i1 %v2_91d4, i1* %cpsr_c.global-to-local, align 1
  %v3_91d4 = sub i32 0, %v5_91c0
  %v4_91d4 = and i32 %v5_91c0, %v3_91d4
  %v5_91d4 = icmp slt i32 %v4_91d4, 0
  store i1 %v5_91d4, i1* %cpsr_v.global-to-local, align 1
  %v6_91d4 = icmp slt i32 %v1_91d4, 0
  store i1 %v6_91d4, i1* %cpsr_n.global-to-local, align 1
  %v7_91d4 = icmp eq i32 %v5_91c0, 1
  store i1 %v7_91d4, i1* %cpsr_z.global-to-local, align 1
  %v7_91d8 = icmp slt i32 %v5_91c0, 2
  br i1 %v7_91d8, label %bb226, label %bb225

bb225:                                            ; preds = %dec_label_pc_91d0
  %v9_91d8 = add i32 %v5_91c0, -2
  store i32 %v9_91d8, i32* @r4, align 4
  br label %bb226

bb226:                                            ; preds = %dec_label_pc_91d0, %bb225
  %v1_91dc = load i32, i32* @sl, align 4
  %v2_91dc = add i32 %v1_91dc, %v2_8280
  store i32 %v2_91dc, i32* @r5, align 4
  %v0_91e0 = load i32, i32* @r6, align 4
  store i32 %v0_91e0, i32* %r0.global-to-local, align 4
  %v0_91e4 = load i32, i32* @r7, align 4
  store i32 %v0_91e4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16b1c.41 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_91f0 = call i32 @function_13938(i32 %v0_91e0, i32 %v0_91e4, i32 ptrtoint (i32* @global_var_16b1c.41 to i32), i32 1)
  store i32 %v4_91f0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_91f4 = icmp slt i32 %v4_91f0, 0
  store i1 %v1_91f4, i1* %cpsr_n.global-to-local, align 1
  %v2_91f4 = icmp eq i32 %v4_91f0, 0
  store i1 %v2_91f4, i1* %cpsr_z.global-to-local, align 1
  %tmp227 = icmp slt i32 %v4_91f0, 1
  br i1 %tmp227, label %.dec_label_pc_9214_crit_edge, label %dec_label_pc_91fc

.dec_label_pc_9214_crit_edge:                     ; preds = %bb226
  %v1_921c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9214

dec_label_pc_91fc:                                ; preds = %bb226
  %v0_91fc = load i32, i32* @r6, align 4
  store i32 %v0_91fc, i32* %r0.global-to-local, align 4
  %v0_9200 = load i32, i32* @r7, align 4
  store i32 %v0_9200, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16b1c.41 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_920c = call i32 @function_13938(i32 %v0_91fc, i32 %v0_9200, i32 ptrtoint (i32* @global_var_16b1c.41 to i32), i32 1)
  store i32 %v4_920c, i32* %r0.global-to-local, align 4
  %v1_9210 = add i32 %v4_920c, -1
  store i32 %v1_9210, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9214

dec_label_pc_9214:                                ; preds = %.dec_label_pc_9214_crit_edge, %dec_label_pc_91fc
  %v1_921c = phi i32 [ %v1_921c.pre, %.dec_label_pc_9214_crit_edge ], [ %v1_9210, %dec_label_pc_91fc ]
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_9224 = add i32 %v2_921c, %v1_921c
  store i32 %v1_9224, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9234 = load i32, i32* @sl, align 4
  %v4_9234 = add i32 %v3_9234, %v1_9224
  %v5_9234 = inttoptr i32 %v4_9234 to i8*
  store i8 0, i8* %v5_9234, align 1
  %storemerge4.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_9254.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9254

dec_label_pc_9240:                                ; preds = %dec_label_pc_9254
  br i1 %v7_9244, label %dec_label_pc_9284, label %dec_label_pc_924c

dec_label_pc_924c:                                ; preds = %dec_label_pc_9240
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9254

dec_label_pc_9254:                                ; preds = %dec_label_pc_9214, %dec_label_pc_924c
  %v0_9254 = phi i32 [ %v0_9240, %dec_label_pc_924c ], [ %v0_9254.pre, %dec_label_pc_9214 ]
  %storemerge4 = phi i32 [ %v1_9268, %dec_label_pc_924c ], [ %storemerge4.pre, %dec_label_pc_9214 ]
  store i32 %storemerge4, i32* %stack_var_-40, align 4
  store i32 %v0_9254, i32* %r0.global-to-local, align 4
  %v1_9258 = inttoptr i32 %v0_9254 to i8*
  %v2_9258 = call i32 @function_13874(i8* %v1_9258)
  store i32 %v2_9258, i32* %r0.global-to-local, align 4
  %v3_9260 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9260, i32* %r4.global-to-local, align 4
  %v2_9264 = sub i32 %v2_9258, %v3_9260
  %v3_9264 = icmp uge i32 %v2_9258, %v3_9260
  store i1 %v3_9264, i1* %cpsr_c.global-to-local, align 1
  %v4_9264 = xor i32 %v3_9260, %v2_9258
  %v5_9264 = xor i32 %v2_9264, %v2_9258
  %v6_9264 = and i32 %v5_9264, %v4_9264
  %v7_9264 = icmp slt i32 %v6_9264, 0
  store i1 %v7_9264, i1* %cpsr_v.global-to-local, align 1
  %v8_9264 = icmp slt i32 %v2_9264, 0
  store i1 %v8_9264, i1* %cpsr_n.global-to-local, align 1
  %v9_9264 = icmp eq i32 %v2_9258, %v3_9260
  store i1 %v9_9264, i1* %cpsr_z.global-to-local, align 1
  %v1_9268 = add i32 %v3_9260, 1
  store i32 %v1_9268, i32* %ip.global-to-local, align 4
  %v8_926c = icmp sgt i32 %v2_9258, %v3_9260
  %v0_9240 = load i32, i32* @r5, align 4
  %v2_9240 = add i32 %v0_9240, %v3_9260
  %v3_9240 = inttoptr i32 %v2_9240 to i8*
  %v4_9240 = load i8, i8* %v3_9240, align 1
  %v6_9240 = zext i8 %v4_9240 to i32
  store i32 %v6_9240, i32* %r3.global-to-local, align 4
  %v2_9244 = icmp ugt i8 %v4_9240, 60
  store i1 %v2_9244, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9244 = icmp ult i8 %v4_9240, 61
  store i1 %v6_9244, i1* %cpsr_n.global-to-local, align 1
  %v7_9244 = icmp eq i8 %v4_9240, 61
  store i1 %v7_9244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_926c, label %dec_label_pc_9240, label %dec_label_pc_9270

dec_label_pc_9270:                                ; preds = %dec_label_pc_9254
  br i1 %v7_9244, label %dec_label_pc_9284, label %dec_label_pc_927c

dec_label_pc_927c:                                ; preds = %dec_label_pc_92c8, %dec_label_pc_92ec, %dec_label_pc_9270, %bb224
  %v0_927c = load i32, i32* @sl, align 4
  store i32 %v0_927c, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9284:                                ; preds = %dec_label_pc_9240, %dec_label_pc_9270
  %v0_9284 = load i32, i32* @r8, align 4
  %v1_9284 = add i32 %v0_9284, 12
  %v2_9284 = inttoptr i32 %v1_9284 to i32*
  %v3_9284 = load i32, i32* %v2_9284, align 4
  store i32 %v3_9284, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9290 = icmp slt i32 %v3_9284, 0
  store i1 %v1_9290, i1* %cpsr_n.global-to-local, align 1
  %v2_9290 = icmp eq i32 %v3_9284, 0
  store i1 %v2_9290, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp228 = icmp slt i32 %v3_9284, 1
  br i1 %tmp228, label %dec_label_pc_92ec, label %dec_label_pc_929c

dec_label_pc_929c:                                ; preds = %dec_label_pc_9284
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_92c8

dec_label_pc_92a4:                                ; preds = %dec_label_pc_92c8
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_92a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_92a8, i32* %r3.global-to-local, align 4
  %v0_92ac = load i32, i32* @r8, align 4
  %v1_92ac = add i32 %v0_92ac, 12
  %v2_92ac = inttoptr i32 %v1_92ac to i32*
  %v3_92ac = load i32, i32* %v2_92ac, align 4
  %v1_92b0 = add i32 %v3_92a8, 1
  store i32 %v1_92b0, i32* %ip.global-to-local, align 4
  %v2_92b4 = sub i32 %v3_92ac, %v1_92b0
  %v3_92b4 = icmp uge i32 %v3_92ac, %v1_92b0
  store i1 %v3_92b4, i1* %cpsr_c.global-to-local, align 1
  %v4_92b4 = xor i32 %v3_92ac, %v1_92b0
  %v5_92b4 = xor i32 %v2_92b4, %v3_92ac
  %v6_92b4 = and i32 %v5_92b4, %v4_92b4
  %v7_92b4 = icmp slt i32 %v6_92b4, 0
  store i1 %v7_92b4, i1* %cpsr_v.global-to-local, align 1
  %v8_92b4 = icmp slt i32 %v2_92b4, 0
  store i1 %v8_92b4, i1* %cpsr_n.global-to-local, align 1
  %v9_92b4 = icmp eq i32 %v3_92ac, %v1_92b0
  store i1 %v9_92b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 %v1_92b0, i32* %r1.global-to-local, align 4
  store i32 %v1_92b0, i32* %stack_var_-40, align 4
  %v7_92c4 = icmp sgt i32 %v3_92ac, %v1_92b0
  %v0_92d4.pre = load i32, i32* @r5, align 4
  br i1 %v7_92c4, label %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge, label %dec_label_pc_92ec

dec_label_pc_92a4.dec_label_pc_92c8_crit_edge:    ; preds = %dec_label_pc_92a4
  %v0_92d8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_92c8

dec_label_pc_92c8:                                ; preds = %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge, %dec_label_pc_929c
  %v0_92d8 = phi i32 [ %v0_92d8.pre, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ %v3_9260, %dec_label_pc_929c ]
  %v0_92d4 = phi i32 [ %v0_92d4.pre, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ %v0_9240, %dec_label_pc_929c ]
  %v0_92c8 = phi i32 [ %v1_92b0, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ 0, %dec_label_pc_929c ]
  %v1_92c8 = and i32 %v0_92c8, 33554432
  %v2_92c8 = icmp ne i32 %v1_92c8, 0
  store i1 %v2_92c8, i1* %cpsr_c.global-to-local, align 1
  %v3_92c8 = mul i32 %v0_92c8, 128
  %v1_92cc = add i32 %v3_92c8, 1472
  %v0_92d0 = load i32, i32* %sb.global-to-local, align 4
  %v2_92d0 = add i32 %v1_92cc, %v0_92d0
  store i32 %v2_92d0, i32* %r1.global-to-local, align 4
  store i32 %v0_92d4, i32* %r0.global-to-local, align 4
  store i32 %v0_92d8, i32* %r2.global-to-local, align 4
  %v3_92dc = inttoptr i32 %v0_92d4 to i8*
  %v4_92dc = call i32 @function_13cd8(i8* %v3_92dc, i32 %v2_92d0, i32 %v0_92d8)
  store i32 %v4_92dc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_92e0 = icmp slt i32 %v4_92dc, 0
  store i1 %v1_92e0, i1* %cpsr_n.global-to-local, align 1
  %v2_92e0 = icmp eq i32 %v4_92dc, 0
  store i1 %v2_92e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_92e0, label %dec_label_pc_92a4, label %dec_label_pc_927c

dec_label_pc_92ec:                                ; preds = %dec_label_pc_92a4, %dec_label_pc_9284
  %v0_92ec = phi i32 [ %v0_9240, %dec_label_pc_9284 ], [ %v0_92d4.pre, %dec_label_pc_92a4 ]
  store i32 %v0_92ec, i32* %r0.global-to-local, align 4
  %v1_92f0 = inttoptr i32 %v0_92ec to i8*
  %v2_92f0 = call i32 @function_13874(i8* %v1_92f0)
  store i32 %v2_92f0, i32* %r0.global-to-local, align 4
  %v1_92f4 = add i32 %v2_92f0, -127
  %v2_92f4 = icmp ugt i32 %v2_92f0, 126
  store i1 %v2_92f4, i1* %cpsr_c.global-to-local, align 1
  %v3_92f4 = sub i32 126, %v2_92f0
  %v4_92f4 = and i32 %v3_92f4, %v2_92f0
  %v5_92f4 = icmp slt i32 %v4_92f4, 0
  store i1 %v5_92f4, i1* %cpsr_v.global-to-local, align 1
  %v6_92f4 = icmp slt i32 %v1_92f4, 0
  store i1 %v6_92f4, i1* %cpsr_n.global-to-local, align 1
  %v7_92f4 = icmp eq i32 %v2_92f0, 127
  store i1 %v7_92f4, i1* %cpsr_z.global-to-local, align 1
  %v8_92f8 = icmp sgt i32 %v2_92f0, 127
  br i1 %v8_92f8, label %dec_label_pc_927c, label %dec_label_pc_92fc

dec_label_pc_92fc:                                ; preds = %dec_label_pc_92ec
  %v0_92fc = load i32, i32* @r8, align 4
  %v1_92fc = add i32 %v0_92fc, 12
  %v2_92fc = inttoptr i32 %v1_92fc to i32*
  %v3_92fc = load i32, i32* %v2_92fc, align 4
  %v1_9300 = and i32 %v3_92fc, 33554432
  %v2_9300 = icmp ne i32 %v1_9300, 0
  store i1 %v2_9300, i1* %cpsr_c.global-to-local, align 1
  %v3_9300 = mul i32 %v3_92fc, 128
  %v1_9304 = add i32 %v3_9300, 1472
  %v0_9308 = load i32, i32* @r5, align 4
  store i32 %v0_9308, i32* %r1.global-to-local, align 4
  %v0_930c = load i32, i32* %sb.global-to-local, align 4
  %v2_930c = add i32 %v1_9304, %v0_930c
  store i32 %v2_930c, i32* @r0, align 4
  %v2_9310 = inttoptr i32 %v2_930c to i8*
  %v3_9310 = call i32 @function_1389c(i8* %v2_9310, i32 %v0_9308)
  store i32 %v3_9310, i32* %r0.global-to-local, align 4
  %v0_9314 = load i32, i32* @r8, align 4
  %v1_9314 = add i32 %v0_9314, 12
  %v2_9314 = inttoptr i32 %v1_9314 to i32*
  %v3_9314 = load i32, i32* %v2_9314, align 4
  %v0_9318 = load i32, i32* @sl, align 4
  store i32 %v0_9318, i32* @r5, align 4
  %v1_931c = add i32 %v3_9314, 1
  store i32 %v1_931c, i32* %r3.global-to-local, align 4
  store i32 %v1_931c, i32* %v2_9314, align 4
  %v1_9134.pre.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9328:                                ; preds = %dec_label_pc_915c, %dec_label_pc_9128
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v3_9330 = call i32 @function_12e6c(i32 38, i32* null)
  %v0_9334 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9334, i32* @r1, align 4
  store i32 %v3_9330, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9340 = call i32 @function_13bc8(i8* %tmp199, i32 %v0_9334, i32 %v3_9330)
  store i32 %v4_9340, i32* %r0.global-to-local, align 4
  %v1_9344 = add i32 %v4_9340, 1
  %v2_9344 = icmp eq i32 %v4_9340, -1
  store i1 %v2_9344, i1* %cpsr_c.global-to-local, align 1
  %v3_9344 = sub i32 0, %v4_9340
  %v4_9344 = and i32 %v1_9344, %v3_9344
  %v5_9344 = icmp slt i32 %v4_9344, 0
  store i1 %v5_9344, i1* %cpsr_v.global-to-local, align 1
  %v6_9344 = icmp slt i32 %v1_9344, 0
  store i1 %v6_9344, i1* %cpsr_n.global-to-local, align 1
  %v7_9344 = icmp eq i32 %v1_9344, 0
  store i1 %v7_9344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9344, label %dec_label_pc_9678, label %dec_label_pc_934c

dec_label_pc_934c:                                ; preds = %dec_label_pc_9328
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v3_9354 = call i32 @function_12e6c(i32 38, i32* null)
  %v0_9358 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9358, i32* @r1, align 4
  store i32 %v3_9354, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9364 = call i32 @function_13bc8(i8* %tmp199, i32 %v0_9358, i32 %v3_9354)
  store i32 %v4_9364, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_9370 = add i32 %v4_9364, %v2_8748
  store i32 %v2_9370, i32* %r3.global-to-local, align 4
  %v1_9374 = load i32, i32* @r6, align 4
  %v2_9374 = add i32 %v1_9374, %v2_9370
  %v3_9374 = inttoptr i32 %v2_9374 to i8*
  %v4_9374 = load i8, i8* %v3_9374, align 1
  store i32 %v2_8280, i32* %lr.global-to-local, align 4
  %v2_937c = icmp ugt i8 %v4_9374, 31
  store i1 %v2_937c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_937c = icmp ult i8 %v4_9374, 32
  store i1 %v6_937c, i1* %cpsr_n.global-to-local, align 1
  %v7_937c = icmp eq i8 %v4_9374, 32
  store i1 %v7_937c, i1* %cpsr_z.global-to-local, align 1
  %v2_9384 = zext i1 %v7_937c to i32
  %v2_9384.v4_9364 = add i32 %v2_9384, %v4_9364
  store i32 %v2_9384.v4_9364, i32* @r4, align 4
  %v2_9388 = add i32 %v2_9384.v4_9364, %v2_8280
  store i32 %v2_9388, i32* @r5, align 4
  store i32 %v2_9388, i32* %r0.global-to-local, align 4
  %v1_9390 = load i32, i32* %fp.global-to-local, align 4
  %v2_9390 = sub i32 %v1_9390, %v2_9384.v4_9364
  store i32 %v2_9390, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_939c = call i32 @function_13938(i32 %v2_9388, i32 %v2_9390, i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32 2)
  store i32 %v5_939c, i32* %r0.global-to-local, align 4
  %v1_93a0 = add i32 %v5_939c, 1
  %v2_93a0 = icmp eq i32 %v5_939c, -1
  store i1 %v2_93a0, i1* %cpsr_c.global-to-local, align 1
  %v3_93a0 = sub i32 0, %v5_939c
  %v4_93a0 = and i32 %v1_93a0, %v3_93a0
  %v5_93a0 = icmp slt i32 %v4_93a0, 0
  store i1 %v5_93a0, i1* %cpsr_v.global-to-local, align 1
  %v6_93a0 = icmp slt i32 %v1_93a0, 0
  store i1 %v6_93a0, i1* %cpsr_n.global-to-local, align 1
  %v7_93a0 = icmp eq i32 %v1_93a0, 0
  store i1 %v7_93a0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_939c, i32* %lr.global-to-local, align 4
  br i1 %v7_93a0, label %dec_label_pc_9678, label %dec_label_pc_93ac

dec_label_pc_93ac:                                ; preds = %dec_label_pc_934c
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v1_93b4 = add i32 %v5_939c, -1
  %v2_93b4 = icmp ne i32 %v5_939c, 0
  store i1 %v2_93b4, i1* %cpsr_c.global-to-local, align 1
  %v3_93b4 = sub i32 0, %v5_939c
  %v4_93b4 = and i32 %v5_939c, %v3_93b4
  %v5_93b4 = icmp slt i32 %v4_93b4, 0
  store i1 %v5_93b4, i1* %cpsr_v.global-to-local, align 1
  %v6_93b4 = icmp slt i32 %v1_93b4, 0
  store i1 %v6_93b4, i1* %cpsr_n.global-to-local, align 1
  %v7_93b4 = icmp eq i32 %v5_939c, 1
  store i1 %v7_93b4, i1* %cpsr_z.global-to-local, align 1
  %v1_93b8 = load i32, i32* @r4, align 4
  %v2_93b8 = add i32 %v1_93b8, %v2_8748
  store i32 %v2_93b8, i32* %ip.global-to-local, align 4
  %v7_93bc = icmp sgt i32 %v5_939c, 1
  br i1 %v7_93bc, label %bb229, label %bb230

bb229:                                            ; preds = %dec_label_pc_93ac
  %v9_93bc = add i32 %v5_939c, -2
  store i32 %v9_93bc, i32* %lr.global-to-local, align 4
  br label %bb230

bb230:                                            ; preds = %dec_label_pc_93ac, %bb229
  %v3_93e0 = phi i32 [ %v5_939c, %dec_label_pc_93ac ], [ %v9_93bc, %bb229 ]
  %v1_93c4 = add i32 %v3_93e0, 1
  store i32 %v1_93c4, i32* %r6.global-to-local, align 4
  %v1_93c8 = add i32 %v2_93b8, -20773
  store i32 %v1_93c8, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v0_93d0 = load i32, i32* @r5, align 4
  store i32 %v0_93d0, i32* %r0.global-to-local, align 4
  store i32 %v1_93c4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16b20.43 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v4_93e0 = add i32 %v3_93e0, %v1_93c8
  %v5_93e0 = inttoptr i32 %v4_93e0 to i8*
  store i8 0, i8* %v5_93e0, align 1
  %v5_93e4 = call i32 @function_13938(i32 %v0_93d0, i32 %v1_93c4, i32 ptrtoint ([5 x i8]* @global_var_16b20.43 to i32), i32 4)
  store i32 %v5_93e4, i32* %r0.global-to-local, align 4
  %v1_93e8 = add i32 %v5_93e4, -4
  %v2_93e8 = icmp ugt i32 %v5_93e4, 3
  store i1 %v2_93e8, i1* %cpsr_c.global-to-local, align 1
  %v3_93e8 = sub i32 3, %v5_93e4
  %v4_93e8 = and i32 %v3_93e8, %v5_93e4
  %v5_93e8 = icmp slt i32 %v4_93e8, 0
  store i1 %v5_93e8, i1* %cpsr_v.global-to-local, align 1
  %v6_93e8 = icmp slt i32 %v1_93e8, 0
  store i1 %v6_93e8, i1* %cpsr_n.global-to-local, align 1
  %v7_93e8 = icmp eq i32 %v5_93e4, 4
  store i1 %v7_93e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93e8, label %dec_label_pc_9960, label %dec_label_pc_93f0

dec_label_pc_93f0:                                ; preds = %bb230
  store i32 %v2_8280, i32* %ip.global-to-local, align 4
  %v1_93f4 = load i32, i32* @r4, align 4
  %v2_93f4 = add i32 %v1_93f4, %v2_8280
  %v3_93f4 = inttoptr i32 %v2_93f4 to i8*
  %v4_93f4 = load i8, i8* %v3_93f4, align 1
  %v6_93f4 = zext i8 %v4_93f4 to i32
  store i32 %v6_93f4, i32* %r3.global-to-local, align 4
  %v2_93f8 = icmp ugt i8 %v4_93f4, 46
  store i1 %v2_93f8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_93f8 = icmp ult i8 %v4_93f4, 47
  store i1 %v6_93f8, i1* %cpsr_n.global-to-local, align 1
  %v7_93f8 = icmp eq i8 %v4_93f4, 47
  store i1 %v7_93f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93f8, label %dec_label_pc_9b54, label %dec_label_pc_9400

dec_label_pc_9400:                                ; preds = %dec_label_pc_94ac, %dec_label_pc_9a98, %dec_label_pc_9b84, %dec_label_pc_9b54, %dec_label_pc_9a30, %dec_label_pc_9a14, %dec_label_pc_93f0, %dec_label_pc_9ba0, %dec_label_pc_9a60
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9404 = load i32, i32* @r8, align 4
  %v3_9404 = add i32 %v2_9404, -1452
  %v4_9404 = inttoptr i32 %v3_9404 to i8*
  store i8 1, i8* %v4_9404, align 1
  br label %dec_label_pc_8838

dec_label_pc_940c:                                ; preds = %dec_label_pc_8828
  %v0_940c = call i32 @function_14808()
  store i32 %v0_940c, i32* %r0.global-to-local, align 4
  %v0_9410 = load i32, i32* %sb.global-to-local, align 4
  %v1_9410 = add i32 %v0_9410, 1472
  store i32 %v1_9410, i32* %r3.global-to-local, align 4
  %v0_9418 = load i32, i32* @r8, align 4
  %v1_9418 = add i32 %v0_9418, 656
  %v2_9418 = inttoptr i32 %v1_9418 to i32*
  %v3_9418 = load i32, i32* %v2_9418, align 4
  store i32 %v3_9418, i32* %r3.global-to-local, align 4
  %v1_9420 = add i32 %v3_9418, -1024
  %v2_9420 = icmp ugt i32 %v3_9418, 1023
  store i1 %v2_9420, i1* %cpsr_c.global-to-local, align 1
  %v3_9420 = sub i32 1023, %v3_9418
  %v4_9420 = and i32 %v3_9420, %v3_9418
  %v5_9420 = icmp slt i32 %v4_9420, 0
  store i1 %v5_9420, i1* %cpsr_v.global-to-local, align 1
  %v6_9420 = icmp slt i32 %v1_9420, 0
  store i1 %v6_9420, i1* %cpsr_n.global-to-local, align 1
  %v7_9420 = icmp eq i32 %v3_9418, 1024
  store i1 %v7_9420, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_940c, i32* %fp.global-to-local, align 4
  %v1_9428 = add i32 %v0_9410, 2116
  store i32 %v1_9428, i32* @r7, align 4
  br i1 %v7_9420, label %dec_label_pc_9528, label %dec_label_pc_9430

dec_label_pc_9430:                                ; preds = %dec_label_pc_940c, %dec_label_pc_9528, %dec_label_pc_951c
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_9434 = load i32, i32* %fp.global-to-local, align 4
  %v2_9434 = inttoptr i32 %v1_9434 to i32*
  store i32 0, i32* %v2_9434, align 4
  %v0_9438 = load i32, i32* @r8, align 4
  %v1_9438 = add i32 %v0_9438, 656
  %v2_9438 = inttoptr i32 %v1_9438 to i32*
  %v3_9438 = load i32, i32* %v2_9438, align 4
  store i32 %v3_9438, i32* %r1.global-to-local, align 4
  %v1_943c = add i32 %v0_9438, -1456
  %v2_943c = inttoptr i32 %v1_943c to i32*
  %v3_943c = load i32, i32* %v2_943c, align 4
  store i32 %v3_943c, i32* %r0.global-to-local, align 4
  %v1_9440 = sub i32 1024, %v3_9438
  store i32 %v1_9440, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9448 = load i32, i32* @r7, align 4
  %v2_9448 = add i32 %v0_9448, %v3_9438
  store i32 %v2_9448, i32* %r1.global-to-local, align 4
  %v4_944c = inttoptr i32 %v2_9448 to i32*
  %v5_944c = call i32 @function_14a40(i32 %v3_943c, i32* %v4_944c, i32 %v1_9440, i32 16384)
  store i32 %v5_944c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9450 = icmp slt i32 %v5_944c, 0
  store i1 %v1_9450, i1* %cpsr_n.global-to-local, align 1
  %v2_9450 = icmp eq i32 %v5_944c, 0
  store i1 %v2_9450, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9450, label %dec_label_pc_992c, label %dec_label_pc_9458

dec_label_pc_9458:                                ; preds = %dec_label_pc_9430
  %v1_9458 = add i32 %v5_944c, 1
  %v2_9458 = icmp eq i32 %v5_944c, -1
  store i1 %v2_9458, i1* %cpsr_c.global-to-local, align 1
  %v3_9458 = sub i32 0, %v5_944c
  %v4_9458 = and i32 %v1_9458, %v3_9458
  %v5_9458 = icmp slt i32 %v4_9458, 0
  store i1 %v5_9458, i1* %cpsr_v.global-to-local, align 1
  %v6_9458 = icmp slt i32 %v1_9458, 0
  store i1 %v6_9458, i1* %cpsr_n.global-to-local, align 1
  %v7_9458 = icmp eq i32 %v1_9458, 0
  store i1 %v7_9458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9458, label %dec_label_pc_9950, label %dec_label_pc_9460

dec_label_pc_9460:                                ; preds = %dec_label_pc_9458
  %v0_9460 = load i32, i32* @r8, align 4
  %v1_9460 = add i32 %v0_9460, 656
  %v2_9460 = inttoptr i32 %v1_9460 to i32*
  %v3_9460 = load i32, i32* %v2_9460, align 4
  store i32 %v2_87d8, i32* %r1.global-to-local, align 4
  %v2_9468 = add i32 %v3_9460, %v5_944c
  store i32 %v2_9468, i32* @r4, align 4
  store i32 %v2_9468, i32* %v2_9460, align 4
  %v0_9470 = load i32, i32* %r1.global-to-local, align 4
  %v1_9470 = load i32, i32* @r8, align 4
  %v2_9470 = add i32 %v1_9470, -1448
  %v3_9470 = inttoptr i32 %v2_9470 to i32*
  store i32 %v0_9470, i32* %v3_9470, align 4
  br label %dec_label_pc_94fc

dec_label_pc_9478:                                ; preds = %dec_label_pc_94fc
  %v1_9478 = add i32 %v0_94fc, -4
  %v2_9478 = inttoptr i32 %v1_9478 to i32*
  %v3_9478 = load i32, i32* %v2_9478, align 4
  store i32 %v3_9478, i32* @sl, align 4
  %v1_947c = load i32, i32* @r4, align 4
  %v5_9480 = icmp slt i32 %v3_94fc, %v1_947c
  %storemerge73 = select i1 %v5_9480, i32 %v3_94fc, i32 %v1_947c
  store i32 %storemerge73, i32* @r5, align 4
  %v2_9488 = sub i32 %v3_94fc, %storemerge73
  store i32 %v2_9488, i32* @r6, align 4
  %v1_948c = add i32 %v3_9478, -1
  %v2_948c = icmp ne i32 %v3_9478, 0
  store i1 %v2_948c, i1* %cpsr_c.global-to-local, align 1
  %v3_948c = sub i32 0, %v3_9478
  %v4_948c = and i32 %v3_9478, %v3_948c
  %v5_948c = icmp slt i32 %v4_948c, 0
  store i1 %v5_948c, i1* %cpsr_v.global-to-local, align 1
  %v6_948c = icmp slt i32 %v1_948c, 0
  store i1 %v6_948c, i1* %cpsr_n.global-to-local, align 1
  %v7_948c = icmp eq i32 %v3_9478, 1
  store i1 %v7_948c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9488, i32* %v2_94fc, align 4
  br i1 %v7_948c, label %dec_label_pc_9548, label %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge

dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge: ; preds = %dec_label_pc_9478
  %v0_9498.pr.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9498

dec_label_pc_9498:                                ; preds = %dec_label_pc_9508, %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge, %dec_label_pc_9570
  %v0_9498 = phi i32 [ %v3_9570, %dec_label_pc_9570 ], [ %v0_9498.pr.pre, %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge ], [ %v3_94fc, %dec_label_pc_9508 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9498 = icmp slt i32 %v0_9498, 0
  store i1 %v1_9498, i1* %cpsr_n.global-to-local, align 1
  %v2_9498 = icmp eq i32 %v0_9498, 0
  store i1 %v2_9498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9498, label %dec_label_pc_94a0, label %dec_label_pc_94c0

dec_label_pc_94a0:                                ; preds = %dec_label_pc_9498
  %v0_94a0 = load i32, i32* @r8, align 4
  %v1_94a0 = add i32 %v0_94a0, 4
  %v2_94a0 = inttoptr i32 %v1_94a0 to i32*
  %v3_94a0 = load i32, i32* %v2_94a0, align 4
  store i32 %v3_94a0, i32* @r4, align 4
  %v1_94a4 = add i32 %v3_94a0, -1
  %v2_94a4 = icmp ne i32 %v3_94a0, 0
  store i1 %v2_94a4, i1* %cpsr_c.global-to-local, align 1
  %v3_94a4 = sub i32 0, %v3_94a0
  %v4_94a4 = and i32 %v3_94a0, %v3_94a4
  %v5_94a4 = icmp slt i32 %v4_94a4, 0
  store i1 %v5_94a4, i1* %cpsr_v.global-to-local, align 1
  %v6_94a4 = icmp slt i32 %v1_94a4, 0
  store i1 %v6_94a4, i1* %cpsr_n.global-to-local, align 1
  %v7_94a4 = icmp eq i32 %v3_94a0, 1
  store i1 %v7_94a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_94a4, label %dec_label_pc_9578, label %dec_label_pc_94ac

dec_label_pc_94ac:                                ; preds = %dec_label_pc_94a0
  %v1_94ac = add i32 %v0_94a0, 656
  %v2_94ac = inttoptr i32 %v1_94ac to i32*
  %v3_94ac = load i32, i32* %v2_94ac, align 4
  %v0_94b0 = load i32, i32* @r5, align 4
  %v2_94b0 = sub i32 %v3_94ac, %v0_94b0
  store i32 %v2_94b0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94b4 = icmp slt i32 %v2_94b0, 0
  store i1 %v1_94b4, i1* %cpsr_n.global-to-local, align 1
  %v2_94b4 = icmp eq i32 %v2_94b0, 0
  store i1 %v2_94b4, i1* %cpsr_z.global-to-local, align 1
  %v2_94b8 = add i32 %v0_94a0, 8
  %v3_94b8 = inttoptr i32 %v2_94b8 to i32*
  store i32 %v2_94b0, i32* %v3_94b8, align 4
  br i1 %v2_94b4, label %dec_label_pc_9400, label %dec_label_pc_94c0

dec_label_pc_94c0:                                ; preds = %dec_label_pc_9498, %dec_label_pc_94ac, %dec_label_pc_9578, %dec_label_pc_9600
  %v0_94c0 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94c0 = icmp slt i32 %v0_94c0, 0
  store i1 %v1_94c0, i1* %cpsr_n.global-to-local, align 1
  %v2_94c0 = icmp eq i32 %v0_94c0, 0
  store i1 %v2_94c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94c0, label %dec_label_pc_9510, label %dec_label_pc_94c8

dec_label_pc_94c8:                                ; preds = %dec_label_pc_94c0
  %v0_94c8 = load i32, i32* @r8, align 4
  %v1_94c8 = add i32 %v0_94c8, 656
  %v2_94c8 = inttoptr i32 %v1_94c8 to i32*
  %v3_94c8 = load i32, i32* %v2_94c8, align 4
  store i32 %v3_94c8, i32* %r3.global-to-local, align 4
  %v2_94cc = sub i32 %v3_94c8, %v0_94c0
  store i32 %v2_94cc, i32* @r4, align 4
  store i32 %v2_94cc, i32* @r2, align 4
  store i32 %v2_94cc, i32* %v2_94c8, align 4
  %v0_94d8 = load i32, i32* @r7, align 4
  %v1_94d8 = load i32, i32* @r5, align 4
  %v2_94d8 = add i32 %v1_94d8, %v0_94d8
  store i32 %v2_94d8, i32* @r1, align 4
  store i32 %v0_94d8, i32* @r0, align 4
  %v3_94e0 = call i32 @function_14860(i32 %v0_94d8, i32 %v2_94d8, i32 %v2_94cc)
  store i32 %v3_94e0, i32* %r0.global-to-local, align 4
  %v0_94e4 = load i32, i32* @r8, align 4
  %v1_94e4 = add i32 %v0_94e4, 656
  %v2_94e4 = inttoptr i32 %v1_94e4 to i32*
  %v3_94e4 = load i32, i32* %v2_94e4, align 4
  store i32 %v3_94e4, i32* @r4, align 4
  store i32 0, i32* @lr, align 4
  %v1_94ec = load i32, i32* %sb.global-to-local, align 4
  %v2_94ec = add i32 %v1_94ec, %v3_94e4
  store i32 %v2_94ec, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94f0 = icmp slt i32 %v3_94e4, 0
  store i1 %v1_94f0, i1* %cpsr_n.global-to-local, align 1
  %v2_94f0 = icmp eq i32 %v3_94e4, 0
  store i1 %v2_94f0, i1* %cpsr_z.global-to-local, align 1
  %v3_94f4 = add i32 %v2_94ec, 2116
  %v4_94f4 = inttoptr i32 %v3_94f4 to i8*
  store i8 0, i8* %v4_94f4, align 1
  %v0_94f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_94f8, label %dec_label_pc_9510, label %dec_label_pc_94fc

dec_label_pc_94fc:                                ; preds = %dec_label_pc_94c8, %dec_label_pc_9460
  %v0_94fc = load i32, i32* @r8, align 4
  %v1_94fc = add i32 %v0_94fc, 8
  %v2_94fc = inttoptr i32 %v1_94fc to i32*
  %v3_94fc = load i32, i32* %v2_94fc, align 4
  store i32 %v3_94fc, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9500 = icmp slt i32 %v3_94fc, 0
  store i1 %v1_9500, i1* %cpsr_n.global-to-local, align 1
  %v2_9500 = icmp eq i32 %v3_94fc, 0
  store i1 %v2_9500, i1* %cpsr_z.global-to-local, align 1
  %v5_9504 = icmp sgt i32 %v3_94fc, 0
  br i1 %v5_9504, label %dec_label_pc_9478, label %dec_label_pc_9508

dec_label_pc_9508:                                ; preds = %dec_label_pc_94fc
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9498

dec_label_pc_9510:                                ; preds = %dec_label_pc_94c8, %dec_label_pc_94c0
  %v0_9510 = load i32, i32* @r8, align 4
  %v1_9510 = add i32 %v0_9510, -1452
  %v2_9510 = inttoptr i32 %v1_9510 to i8*
  %v3_9510 = load i8, i8* %v2_9510, align 1
  %v4_9510 = zext i8 %v3_9510 to i32
  store i32 %v4_9510, i32* %r3.global-to-local, align 4
  %v2_9514 = icmp ugt i8 %v3_9510, 6
  store i1 %v2_9514, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9514 = icmp ult i8 %v3_9510, 7
  store i1 %v6_9514, i1* %cpsr_n.global-to-local, align 1
  %v7_9514 = icmp eq i8 %v3_9510, 7
  store i1 %v7_9514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9514, label %dec_label_pc_951c, label %dec_label_pc_8838

dec_label_pc_951c:                                ; preds = %dec_label_pc_9510
  %v1_951c = add i32 %v0_9510, 656
  %v2_951c = inttoptr i32 %v1_951c to i32*
  %v3_951c = load i32, i32* %v2_951c, align 4
  store i32 %v3_951c, i32* %r3.global-to-local, align 4
  %v1_9520 = add i32 %v3_951c, -1024
  %v2_9520 = icmp ugt i32 %v3_951c, 1023
  store i1 %v2_9520, i1* %cpsr_c.global-to-local, align 1
  %v3_9520 = sub i32 1023, %v3_951c
  %v4_9520 = and i32 %v3_9520, %v3_951c
  %v5_9520 = icmp slt i32 %v4_9520, 0
  store i1 %v5_9520, i1* %cpsr_v.global-to-local, align 1
  %v6_9520 = icmp slt i32 %v1_9520, 0
  store i1 %v6_9520, i1* %cpsr_n.global-to-local, align 1
  %v7_9520 = icmp eq i32 %v3_951c, 1024
  store i1 %v7_9520, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9520, label %dec_label_pc_9528.loopexit, label %dec_label_pc_9430

dec_label_pc_9528.loopexit:                       ; preds = %dec_label_pc_951c
  %v0_9528.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_9528

dec_label_pc_9528:                                ; preds = %dec_label_pc_9528.loopexit, %dec_label_pc_940c
  %v0_9528 = phi i32 [ %v0_9528.pre, %dec_label_pc_9528.loopexit ], [ %v1_9428, %dec_label_pc_940c ]
  store i32 %v0_9528, i32* @r0, align 4
  %v1_952c = add i32 %v0_9528, 64
  store i32 %v1_952c, i32* @r1, align 4
  store i32 960, i32* @r2, align 4
  %v3_9534 = call i32 @function_14860(i32 %v0_9528, i32 %v1_952c, i32 960)
  store i32 %v3_9534, i32* %r0.global-to-local, align 4
  %v0_9538 = load i32, i32* @r8, align 4
  %v1_9538 = add i32 %v0_9538, 656
  %v2_9538 = inttoptr i32 %v1_9538 to i32*
  %v3_9538 = load i32, i32* %v2_9538, align 4
  store i32 %v3_9538, i32* %r3.global-to-local, align 4
  %v1_953c = add i32 %v3_9538, -64
  store i32 %v1_953c, i32* @r4, align 4
  store i32 %v1_953c, i32* %v2_9538, align 4
  br label %dec_label_pc_9430

dec_label_pc_9548:                                ; preds = %dec_label_pc_9478
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 36, i32* %r0.global-to-local, align 4
  %v3_9550 = call i32 @function_12e6c(i32 36, i32* null)
  %v0_9554 = load i32, i32* @r4, align 4
  store i32 %v0_9554, i32* %r1.global-to-local, align 4
  store i32 %v3_9550, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9560 = load i32, i32* @r7, align 4
  store i32 %v0_9560, i32* %r0.global-to-local, align 4
  %v4_9564 = call i32 @function_13938(i32 %v0_9560, i32 %v0_9554, i32 %v3_9550, i32 11)
  store i32 %v4_9564, i32* %r0.global-to-local, align 4
  %v2_9568 = add i32 %v4_9564, 1
  %v3_9568 = icmp eq i32 %v4_9564, -1
  store i1 %v3_9568, i1* %cpsr_c.global-to-local, align 1
  %v4_9568 = sub i32 0, %v4_9564
  %v5_9568 = and i32 %v2_9568, %v4_9568
  %v6_9568 = icmp slt i32 %v5_9568, 0
  store i1 %v6_9568, i1* %cpsr_v.global-to-local, align 1
  %v7_9568 = icmp slt i32 %v2_9568, 0
  store i1 %v7_9568, i1* %cpsr_n.global-to-local, align 1
  %v8_9568 = icmp eq i32 %v2_9568, 0
  store i1 %v8_9568, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9568, label %dec_label_pc_9570, label %dec_label_pc_9ad4

dec_label_pc_9570:                                ; preds = %dec_label_pc_9548
  %v0_9570 = load i32, i32* @r8, align 4
  %v1_9570 = add i32 %v0_9570, 8
  %v2_9570 = inttoptr i32 %v1_9570 to i32*
  %v3_9570 = load i32, i32* %v2_9570, align 4
  store i32 %v3_9570, i32* @r6, align 4
  br label %dec_label_pc_9498

dec_label_pc_9578:                                ; preds = %dec_label_pc_94a0
  %v0_9578 = load i32, i32* @r7, align 4
  store i32 %v0_9578, i32* %r0.global-to-local, align 4
  %v1_957c = add i32 %v0_94a0, 656
  %v2_957c = inttoptr i32 %v1_957c to i32*
  %v3_957c = load i32, i32* %v2_957c, align 4
  store i32 %v3_957c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9588 = call i32 @function_13938(i32 %v0_9578, i32 %v3_957c, i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32 2)
  store i32 %v5_9588, i32* %r0.global-to-local, align 4
  %v1_958c = add i32 %v5_9588, 1
  %v2_958c = icmp eq i32 %v5_9588, -1
  store i1 %v2_958c, i1* %cpsr_c.global-to-local, align 1
  %v3_958c = sub i32 0, %v5_9588
  %v4_958c = and i32 %v1_958c, %v3_958c
  %v5_958c = icmp slt i32 %v4_958c, 0
  store i1 %v5_958c, i1* %cpsr_v.global-to-local, align 1
  %v6_958c = icmp slt i32 %v1_958c, 0
  store i1 %v6_958c, i1* %cpsr_n.global-to-local, align 1
  %v7_958c = icmp eq i32 %v1_958c, 0
  store i1 %v7_958c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_958c, label %dec_label_pc_94c0, label %dec_label_pc_9594

dec_label_pc_9594:                                ; preds = %dec_label_pc_9578
  %v0_9594 = load i32, i32* @r8, align 4
  %v1_9594 = add i32 %v0_9594, 656
  %v2_9594 = inttoptr i32 %v1_9594 to i32*
  %v3_9594 = load i32, i32* %v2_9594, align 4
  store i32 %v3_9594, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v0_95a0 = load i32, i32* @r7, align 4
  store i32 %v0_95a0, i32* %r0.global-to-local, align 4
  %v5_95a4 = call i32 @function_13938(i32 %v0_95a0, i32 %v3_9594, i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32 2)
  %v1_95a8 = load i32, i32* %sb.global-to-local, align 4
  %v2_95a8 = add i32 %v1_95a8, %v5_95a4
  store i32 %v2_95a8, i32* %ip.global-to-local, align 4
  store i32 %v5_95a4, i32* @r5, align 4
  store i32 %v5_95a4, i32* %r1.global-to-local, align 4
  %v0_95b4 = load i32, i32* @r7, align 4
  store i32 %v0_95b4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16b1c.41 to i32), i32* %r2.global-to-local, align 4
  %v0_95bc = load i32, i32* @r4, align 4
  store i32 %v0_95bc, i32* %r3.global-to-local, align 4
  %v0_95c0 = load i32, i32* @r6, align 4
  %v1_95c0 = trunc i32 %v0_95c0 to i8
  %v3_95c0 = add i32 %v2_95a8, 2114
  %v4_95c0 = inttoptr i32 %v3_95c0 to i8*
  store i8 %v1_95c0, i8* %v4_95c0, align 1
  %v4_95c4 = call i32 @function_13938(i32 %v0_95b4, i32 %v5_95a4, i32 ptrtoint (i32* @global_var_16b1c.41 to i32), i32 %v0_95bc)
  store i32 %v4_95c4, i32* %r0.global-to-local, align 4
  %v1_95c8 = add i32 %v4_95c4, 1
  %v2_95c8 = icmp eq i32 %v4_95c4, -1
  store i1 %v2_95c8, i1* %cpsr_c.global-to-local, align 1
  %v3_95c8 = sub i32 0, %v4_95c4
  %v4_95c8 = and i32 %v1_95c8, %v3_95c8
  %v5_95c8 = icmp slt i32 %v4_95c8, 0
  store i1 %v5_95c8, i1* %cpsr_v.global-to-local, align 1
  %v6_95c8 = icmp slt i32 %v1_95c8, 0
  store i1 %v6_95c8, i1* %cpsr_n.global-to-local, align 1
  %v7_95c8 = icmp eq i32 %v1_95c8, 0
  store i1 %v7_95c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_95c8, label %dec_label_pc_95ec, label %dec_label_pc_95d0

dec_label_pc_95d0:                                ; preds = %dec_label_pc_9594
  %v0_95d0 = load i32, i32* @r7, align 4
  store i32 %v0_95d0, i32* %r0.global-to-local, align 4
  %v0_95d4 = load i32, i32* @r5, align 4
  store i32 %v0_95d4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16b1c.41 to i32), i32* %r2.global-to-local, align 4
  %v0_95dc = load i32, i32* @r4, align 4
  store i32 %v0_95dc, i32* %r3.global-to-local, align 4
  %v4_95e0 = call i32 @function_13938(i32 %v0_95d0, i32 %v0_95d4, i32 ptrtoint (i32* @global_var_16b1c.41 to i32), i32 %v0_95dc)
  %v1_95e4 = load i32, i32* %sb.global-to-local, align 4
  %v2_95e4 = add i32 %v1_95e4, %v4_95e0
  store i32 %v2_95e4, i32* %r0.global-to-local, align 4
  %v0_95e8 = load i32, i32* @r6, align 4
  %v1_95e8 = trunc i32 %v0_95e8 to i8
  %v3_95e8 = add i32 %v2_95e4, 2116
  %v4_95e8 = inttoptr i32 %v3_95e8 to i8*
  store i8 %v1_95e8, i8* %v4_95e8, align 1
  br label %dec_label_pc_95ec

dec_label_pc_95ec:                                ; preds = %dec_label_pc_9594, %dec_label_pc_95d0
  %v0_95ec = load i32, i32* @r7, align 4
  store i32 %v0_95ec, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  %v2_95f4 = inttoptr i32 %v0_95ec to i8*
  %v3_95f4 = call i32 @function_139a0(i8* %v2_95f4, i32 16)
  store i32 %v3_95f4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_95f8 = icmp slt i32 %v3_95f4, 0
  store i1 %v1_95f8, i1* %cpsr_n.global-to-local, align 1
  %v2_95f8 = icmp eq i32 %v3_95f4, 0
  store i1 %v2_95f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95f8, label %dec_label_pc_9d84, label %dec_label_pc_9600

dec_label_pc_9600:                                ; preds = %dec_label_pc_95ec
  %v1_9600 = add i32 %v3_95f4, 2
  store i32 %v1_9600, i32* %r6.global-to-local, align 4
  %v1_9604 = load i32, i32* @r8, align 4
  %v2_9604 = add i32 %v1_9604, 8
  %v3_9604 = inttoptr i32 %v2_9604 to i32*
  store i32 %v1_9600, i32* %v3_9604, align 4
  br label %dec_label_pc_94c0

dec_label_pc_960c:                                ; preds = %dec_label_pc_8cb4
  %v0_960c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_960c, i32* %r1.global-to-local, align 4
  %v0_9610 = load i32, i32* @r6, align 4
  store i32 %v0_9610, i32* @r0, align 4
  %v2_9614 = inttoptr i32 %v0_9610 to i8*
  %v3_9614 = call i32 @function_1389c(i8* %v2_9614, i32 %v0_960c)
  store i32 %v3_9614, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8ccc

dec_label_pc_961c:                                ; preds = %dec_label_pc_8830
  %v0_961c = call i32 @function_14808()
  store i32 %v0_961c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v0_961c, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9628:                                ; preds = %dec_label_pc_9648.dec_label_pc_9628_crit_edge, %dec_label_pc_961c
  %v1_9628 = phi i32 [ %v1_9628.pre, %dec_label_pc_9648.dec_label_pc_9628_crit_edge ], [ %v0_961c, %dec_label_pc_961c ]
  %v0_9628 = phi i32 [ %v0_9628.pre, %dec_label_pc_9648.dec_label_pc_9628_crit_edge ], [ 0, %dec_label_pc_961c ]
  %v2_9628 = inttoptr i32 %v1_9628 to i32*
  store i32 %v0_9628, i32* %v2_9628, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  %v0_9630 = load i32, i32* @r8, align 4
  %v1_9630 = add i32 %v0_9630, -1456
  %v2_9630 = inttoptr i32 %v1_9630 to i32*
  %v3_9630 = load i32, i32* %v2_9630, align 4
  store i32 %v3_9630, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_963c = call i32 @function_14a40(i32 %v3_9630, i32* nonnull %stack_var_-20809, i32 10240, i32 16384)
  store i32 %v5_963c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9640 = icmp slt i32 %v5_963c, 0
  store i1 %v1_9640, i1* %cpsr_n.global-to-local, align 1
  %v2_9640 = icmp eq i32 %v5_963c, 0
  store i1 %v2_9640, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9640, label %dec_label_pc_9920, label %dec_label_pc_9648

dec_label_pc_9648:                                ; preds = %dec_label_pc_9628
  %v2_9648 = add i32 %v5_963c, 1
  %v3_9648 = icmp eq i32 %v5_963c, -1
  store i1 %v3_9648, i1* %cpsr_c.global-to-local, align 1
  %v4_9648 = sub i32 0, %v5_963c
  %v5_9648 = and i32 %v2_9648, %v4_9648
  %v6_9648 = icmp slt i32 %v5_9648, 0
  store i1 %v6_9648, i1* %cpsr_v.global-to-local, align 1
  %v7_9648 = icmp slt i32 %v2_9648, 0
  store i1 %v7_9648, i1* %cpsr_n.global-to-local, align 1
  %v8_9648 = icmp eq i32 %v2_9648, 0
  store i1 %v8_9648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9648, label %dec_label_pc_9650, label %dec_label_pc_9648.dec_label_pc_9628_crit_edge

dec_label_pc_9648.dec_label_pc_9628_crit_edge:    ; preds = %dec_label_pc_9648
  %v0_9628.pre = load i32, i32* @r5, align 4
  %v1_9628.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9650:                                ; preds = %dec_label_pc_9648
  %v0_9650 = load i32, i32* @r4, align 4
  %v1_9650 = inttoptr i32 %v0_9650 to i32*
  %v2_9650 = load i32, i32* %v1_9650, align 4
  store i32 %v2_9650, i32* %r3.global-to-local, align 4
  %v1_9654 = add i32 %v2_9650, -11
  %v2_9654 = icmp ugt i32 %v2_9650, 10
  store i1 %v2_9654, i1* %cpsr_c.global-to-local, align 1
  %v3_9654 = sub i32 10, %v2_9650
  %v4_9654 = and i32 %v3_9654, %v2_9650
  %v5_9654 = icmp slt i32 %v4_9654, 0
  store i1 %v5_9654, i1* %cpsr_v.global-to-local, align 1
  %v6_9654 = icmp slt i32 %v1_9654, 0
  store i1 %v6_9654, i1* %cpsr_n.global-to-local, align 1
  %v7_9654 = icmp eq i32 %v2_9650, 11
  store i1 %v7_9654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9654, label %dec_label_pc_9a98, label %dec_label_pc_965c

dec_label_pc_965c:                                ; preds = %dec_label_pc_9650, %dec_label_pc_9920
  %v0_965c = load i32, i32* @r8, align 4
  %v1_965c = add i32 %v0_965c, -1456
  %v2_965c = inttoptr i32 %v1_965c to i32*
  %v3_965c = load i32, i32* %v2_965c, align 4
  store i32 %v3_965c, i32* %r0.global-to-local, align 4
  %v1_9660 = call i32 @function_14234(i32 %v3_965c)
  store i32 %v1_9660, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_966c = load i32, i32* @r8, align 4
  %v2_966c = add i32 %v1_966c, -1456
  %v3_966c = inttoptr i32 %v2_966c to i32*
  store i32 -1, i32* %v3_966c, align 4
  %v0_9670 = load i32, i32* %r1.global-to-local, align 4
  %v1_9670 = trunc i32 %v0_9670 to i8
  %v2_9670 = load i32, i32* @r8, align 4
  %v3_9670 = add i32 %v2_9670, -1452
  %v4_9670 = inttoptr i32 %v3_9670 to i8*
  store i8 %v1_9670, i8* %v4_9670, align 1
  br label %dec_label_pc_8838

dec_label_pc_9678:                                ; preds = %dec_label_pc_934c, %dec_label_pc_9328
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v3_9680 = call i32 @function_12e6c(i32 37, i32* null)
  %v0_9684 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9684, i32* @r1, align 4
  store i32 %v3_9680, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9690 = call i32 @function_13bc8(i8* %tmp199, i32 %v0_9684, i32 %v3_9680)
  store i32 %v4_9690, i32* %r0.global-to-local, align 4
  %v1_9698 = add i32 %v4_9690, 1
  %v2_9698 = icmp eq i32 %v4_9690, -1
  store i1 %v2_9698, i1* %cpsr_c.global-to-local, align 1
  %v3_9698 = sub i32 0, %v4_9690
  %v4_9698 = and i32 %v1_9698, %v3_9698
  %v5_9698 = icmp slt i32 %v4_9698, 0
  store i1 %v5_9698, i1* %cpsr_v.global-to-local, align 1
  %v6_9698 = icmp slt i32 %v1_9698, 0
  store i1 %v6_9698, i1* %cpsr_n.global-to-local, align 1
  %v7_9698 = icmp eq i32 %v1_9698, 0
  store i1 %v7_9698, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_9698, label %dec_label_pc_98c0, label %dec_label_pc_96a4

dec_label_pc_96a4:                                ; preds = %dec_label_pc_9678
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v3_96ac = call i32 @function_12e6c(i32 37, i32* null)
  %v0_96b0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_96b0, i32* @r1, align 4
  store i32 %v3_96ac, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_96bc = call i32 @function_13bc8(i8* %tmp199, i32 %v0_96b0, i32 %v3_96ac)
  store i32 %v4_96bc, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_96c8 = add i32 %v4_96bc, %v2_8748
  store i32 %v2_96c8, i32* %r3.global-to-local, align 4
  %v1_96cc = load i32, i32* @r5, align 4
  %v2_96cc = add i32 %v1_96cc, %v2_96c8
  %v3_96cc = inttoptr i32 %v2_96cc to i8*
  %v4_96cc = load i8, i8* %v3_96cc, align 1
  store i32 %v2_8280, i32* %lr.global-to-local, align 4
  %v2_96d4 = icmp ugt i8 %v4_96cc, 31
  store i1 %v2_96d4, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_96d4 = icmp ult i8 %v4_96cc, 32
  store i1 %v6_96d4, i1* %cpsr_n.global-to-local, align 1
  %v7_96d4 = icmp eq i8 %v4_96cc, 32
  store i1 %v7_96d4, i1* %cpsr_z.global-to-local, align 1
  %v2_96dc = zext i1 %v7_96d4 to i32
  %v2_96dc.v4_96bc = add i32 %v2_96dc, %v4_96bc
  store i32 %v2_96dc.v4_96bc, i32* @r4, align 4
  %v2_96e0 = add i32 %v2_96dc.v4_96bc, %v2_8280
  store i32 %v2_96e0, i32* @r6, align 4
  store i32 %v2_96e0, i32* %r0.global-to-local, align 4
  %v1_96e8 = load i32, i32* %fp.global-to-local, align 4
  %v2_96e8 = sub i32 %v1_96e8, %v2_96dc.v4_96bc
  store i32 %v2_96e8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_96f4 = call i32 @function_13938(i32 %v2_96e0, i32 %v2_96e8, i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32 2)
  store i32 %v5_96f4, i32* %r0.global-to-local, align 4
  %v1_96f8 = add i32 %v5_96f4, 1
  %v2_96f8 = icmp eq i32 %v5_96f4, -1
  store i1 %v2_96f8, i1* %cpsr_c.global-to-local, align 1
  %v3_96f8 = sub i32 0, %v5_96f4
  %v4_96f8 = and i32 %v1_96f8, %v3_96f8
  %v5_96f8 = icmp slt i32 %v4_96f8, 0
  store i1 %v5_96f8, i1* %cpsr_v.global-to-local, align 1
  %v6_96f8 = icmp slt i32 %v1_96f8, 0
  store i1 %v6_96f8, i1* %cpsr_n.global-to-local, align 1
  %v7_96f8 = icmp eq i32 %v1_96f8, 0
  store i1 %v7_96f8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_96f4, i32* @r7, align 4
  br i1 %v7_96f8, label %dec_label_pc_98c0, label %dec_label_pc_9704

dec_label_pc_9704:                                ; preds = %dec_label_pc_96a4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v1_970c = load i32, i32* @r4, align 4
  %v2_970c = add i32 %v1_970c, %v2_8748
  %v1_9710 = add i32 %v5_96f4, -1
  %v2_9710 = icmp ne i32 %v5_96f4, 0
  store i1 %v2_9710, i1* %cpsr_c.global-to-local, align 1
  %v3_9710 = sub i32 0, %v5_96f4
  %v4_9710 = and i32 %v5_96f4, %v3_9710
  %v5_9710 = icmp slt i32 %v4_9710, 0
  store i1 %v5_9710, i1* %cpsr_v.global-to-local, align 1
  %v6_9710 = icmp slt i32 %v1_9710, 0
  store i1 %v6_9710, i1* %cpsr_n.global-to-local, align 1
  %v7_9710 = icmp eq i32 %v5_96f4, 1
  store i1 %v7_9710, i1* %cpsr_z.global-to-local, align 1
  %v1_9714 = add i32 %v2_970c, -20736
  store i32 %v1_9714, i32* %r3.global-to-local, align 4
  %v7_9718 = icmp sgt i32 %v5_96f4, 1
  br i1 %v7_9718, label %bb231, label %bb232

bb231:                                            ; preds = %dec_label_pc_9704
  %v9_9718 = add i32 %v5_96f4, -2
  store i32 %v9_9718, i32* @r7, align 4
  br label %bb232

bb232:                                            ; preds = %dec_label_pc_9704, %bb231
  %v3_9724 = phi i32 [ %v5_96f4, %dec_label_pc_9704 ], [ %v9_9718, %bb231 ]
  %v1_971c = add i32 %v2_970c, -20773
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_9724 = add i32 %v1_971c, %v3_9724
  %v5_9724 = inttoptr i32 %v4_9724 to i8*
  store i8 0, i8* %v5_9724, align 1
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 %v2_8280, i32* @lr, align 4
  %v1_9738 = load i32, i32* @r4, align 4
  %v2_9738 = add i32 %v1_9738, %v2_8280
  %v3_9738 = inttoptr i32 %v2_9738 to i8*
  %v4_9738 = load i8, i8* %v3_9738, align 1
  %v6_9738 = zext i8 %v4_9738 to i32
  store i32 %v6_9738, i32* %r0.global-to-local, align 4
  %v1_973c = add nsw i32 %v6_9738, -48
  store i32 %v1_973c, i32* %r3.global-to-local, align 4
  %v2_9740 = icmp ugt i32 %v1_973c, 8
  store i1 %v2_9740, i1* %cpsr_c.global-to-local, align 1
  %v3_9740 = sub nsw i32 56, %v6_9738
  %v4_9740 = and i32 %v3_9740, %v1_973c
  %v5_9740 = icmp slt i32 %v4_9740, 0
  store i1 %v5_9740, i1* %cpsr_v.global-to-local, align 1
  %v6_9740 = icmp ult i8 %v4_9738, 57
  store i1 %v6_9740, i1* %cpsr_n.global-to-local, align 1
  %v7_9740 = icmp eq i32 %v1_973c, 9
  store i1 %v7_9740, i1* %cpsr_z.global-to-local, align 1
  %v2_9744 = xor i1 %v7_9740, true
  %v3_9744 = and i1 %v2_9740, %v2_9744
  br i1 %v3_9744, label %.thread142, label %dec_label_pc_974c

.thread142:                                       ; preds = %bb232
  %v4_9744 = load i32, i32* @r6, align 4
  br label %dec_label_pc_9774

dec_label_pc_974c:                                ; preds = %bb232
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_975c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9750

dec_label_pc_9750:                                ; preds = %dec_label_pc_9750, %dec_label_pc_974c
  %v0_9750 = phi i32 [ %v1_9750, %dec_label_pc_9750 ], [ 0, %dec_label_pc_974c ]
  %v1_9750 = add i32 %v0_9750, 1
  store i32 %v1_9750, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  store i32 %v1_9750, i32* %stack_var_-40, align 4
  %v2_975c = add i32 %v1_9750, %v1_975c.pre
  %v3_975c = inttoptr i32 %v2_975c to i8*
  %v4_975c = load i8, i8* %v3_975c, align 1
  %v6_975c = zext i8 %v4_975c to i32
  store i32 %v6_975c, i32* %r0.global-to-local, align 4
  %v1_9760 = add nsw i32 %v6_975c, -48
  %v2_9764 = icmp ugt i32 %v1_9760, 8
  store i1 %v2_9764, i1* %cpsr_c.global-to-local, align 1
  %v3_9764 = sub nsw i32 56, %v6_975c
  %v4_9764 = and i32 %v3_9764, %v1_9760
  %v5_9764 = icmp slt i32 %v4_9764, 0
  store i1 %v5_9764, i1* %cpsr_v.global-to-local, align 1
  %v6_9764 = icmp ult i8 %v4_975c, 57
  store i1 %v6_9764, i1* %cpsr_n.global-to-local, align 1
  %v7_9764 = icmp eq i32 %v1_9760, 9
  store i1 %v7_9764, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9750, i32* %r3.global-to-local, align 4
  %v2_976c = xor i1 %v2_9764, true
  %v3_976c = or i1 %v7_9764, %v2_976c
  br i1 %v3_976c, label %dec_label_pc_9750, label %dec_label_pc_9774

dec_label_pc_9774:                                ; preds = %dec_label_pc_9750, %.thread142
  %v2_9780 = phi i32 [ %v4_9744, %.thread142 ], [ %v2_975c, %dec_label_pc_9750 ]
  %v0_9774 = phi i32 [ %v6_9738, %.thread142 ], [ %v6_975c, %dec_label_pc_9750 ]
  store i32 %v2_9780, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9774 = icmp eq i32 %v0_9774, 0
  store i1 %v2_9774, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9774, label %dec_label_pc_98c0, label %dec_label_pc_977c

dec_label_pc_977c:                                ; preds = %dec_label_pc_9774
  store i32 0, i32* @r5, align 4
  %v3_9780 = inttoptr i32 %v2_9780 to i8*
  store i8 0, i8* %v3_9780, align 1
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9788 = load i32, i32* %stack_var_-40, align 4
  %v1_978c = add i32 %v3_9788, 1
  store i32 %v1_978c, i32* %ip.global-to-local, align 4
  store i32 %v1_978c, i32* %stack_var_-40, align 4
  %v0_9794 = load i32, i32* @r6, align 4
  %v2_9794 = add i32 %v0_9794, %v1_978c
  %v3_9794 = inttoptr i32 %v2_9794 to i8*
  %v4_9794 = load i8, i8* %v3_9794, align 1
  %v6_9794 = zext i8 %v4_9794 to i32
  store i32 %v6_9794, i32* %r3.global-to-local, align 4
  %v2_9798 = icmp ugt i8 %v4_9794, 31
  store i1 %v2_9798, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9798 = icmp ult i8 %v4_9794, 32
  store i1 %v6_9798, i1* %cpsr_n.global-to-local, align 1
  %v7_9798 = icmp eq i8 %v4_9794, 32
  store i1 %v7_9798, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9798, label %bb233, label %.thread56

.thread56:                                        ; preds = %dec_label_pc_977c
  store i32 %v2_9794, i32* @r4, align 4
  br label %bb234

bb233:                                            ; preds = %dec_label_pc_977c
  %v2_979c = add i32 %v3_9788, 2
  store i32 %v2_979c, i32* %ip.global-to-local, align 4
  %v2_97a0 = add i32 %v0_9794, %v2_979c
  store i32 %v2_97a0, i32* @r4, align 4
  store i32 %v2_979c, i32* %stack_var_-40, align 4
  br label %bb234

bb234:                                            ; preds = %.thread56, %bb233
  %v0_97a8 = phi i32 [ %v2_9794, %.thread56 ], [ %v2_97a0, %bb233 ]
  store i32 %v0_97a8, i32* %r0.global-to-local, align 4
  %v1_97ac = inttoptr i32 %v0_97a8 to i8*
  %v2_97ac = call i32 @function_13874(i8* %v1_97ac)
  store i32 ptrtoint ([5 x i8]* @global_var_16b28.45 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_97ac, i32* @r1, align 4
  %v0_97b8 = load i32, i32* @r4, align 4
  store i32 %v0_97b8, i32* %r0.global-to-local, align 4
  %v4_97bc = inttoptr i32 %v0_97b8 to i8*
  %v5_97bc = call i32 @function_13bc8(i8* %v4_97bc, i32 %v2_97ac, i32 ptrtoint ([5 x i8]* @global_var_16b28.45 to i32))
  store i32 %v5_97bc, i32* %r0.global-to-local, align 4
  %v1_97c0 = add i32 %v5_97bc, 1
  %v2_97c0 = icmp eq i32 %v5_97bc, -1
  store i1 %v2_97c0, i1* %cpsr_c.global-to-local, align 1
  %v3_97c0 = sub i32 0, %v5_97bc
  %v4_97c0 = and i32 %v1_97c0, %v3_97c0
  %v5_97c0 = icmp slt i32 %v4_97c0, 0
  store i1 %v5_97c0, i1* %cpsr_v.global-to-local, align 1
  %v6_97c0 = icmp slt i32 %v1_97c0, 0
  store i1 %v6_97c0, i1* %cpsr_n.global-to-local, align 1
  %v7_97c0 = icmp eq i32 %v1_97c0, 0
  store i1 %v7_97c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97c0, label %.thread60, label %dec_label_pc_97d0

.thread60:                                        ; preds = %bb234
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v4_97c8 = load i32, i32* %v11_82f4, align 4
  store i32 %v4_97c8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9804

dec_label_pc_97d0:                                ; preds = %bb234
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_97d4 = load i32, i32* %stack_var_-40, align 4
  %v0_97d8 = load i32, i32* @r6, align 4
  %v2_97d8 = add i32 %v0_97d8, %v3_97d4
  store i32 %v2_97d8, i32* @r4, align 4
  store i32 %v2_97d8, i32* %r0.global-to-local, align 4
  %v1_97e0 = inttoptr i32 %v2_97d8 to i8*
  %v2_97e0 = call i32 @function_13874(i8* %v1_97e0)
  store i32 ptrtoint ([5 x i8]* @global_var_16b28.45 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_97e0, i32* @r1, align 4
  %v0_97ec = load i32, i32* @r4, align 4
  store i32 %v0_97ec, i32* %r0.global-to-local, align 4
  %v4_97f0 = inttoptr i32 %v0_97ec to i8*
  %v5_97f0 = call i32 @function_13bc8(i8* %v4_97f0, i32 %v2_97e0, i32 ptrtoint ([5 x i8]* @global_var_16b28.45 to i32))
  store i32 %v5_97f0, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_97f8 = load i32, i32* %stack_var_-40, align 4
  %v2_97fc = add i32 %v3_97f8, %v5_97f0
  store i32 %v2_97fc, i32* %ip.global-to-local, align 4
  store i32 %v2_97fc, i32* %stack_var_-40, align 4
  br label %dec_label_pc_9804

dec_label_pc_9804:                                ; preds = %.thread60, %dec_label_pc_97d0
  %v0_9d8c = phi i32 [ %v4_97c8, %.thread60 ], [ %v2_97fc, %dec_label_pc_97d0 ]
  %v0_9804 = load i32, i32* @r6, align 4
  %v2_9804 = add i32 %v0_9804, %v0_9d8c
  %v3_9804 = inttoptr i32 %v2_9804 to i8*
  %v4_9804 = load i8, i8* %v3_9804, align 1
  %v6_9804 = zext i8 %v4_9804 to i32
  store i32 %v6_9804, i32* %r3.global-to-local, align 4
  %v2_9808 = icmp ugt i8 %v4_9804, 33
  store i1 %v2_9808, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9808 = icmp ult i8 %v4_9804, 34
  store i1 %v6_9808, i1* %cpsr_n.global-to-local, align 1
  %v7_9808 = icmp eq i8 %v4_9804, 34
  store i1 %v7_9808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9808, label %dec_label_pc_9d8c, label %dec_label_pc_9810

dec_label_pc_9810:                                ; preds = %dec_label_pc_9d8c, %dec_label_pc_9804, %dec_label_pc_9db4
  %v0_9810 = load i32, i32* @r6, align 4
  store i32 %v0_9810, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_9818 = inttoptr i32 %v0_9810 to i8*
  %v3_9818 = call i32 @function_139a0(i8* %v2_9818, i32 10)
  store i32 %v3_9818, i32* %r0.global-to-local, align 4
  %v1_981c = add i32 %v3_9818, -1
  store i32 %v1_981c, i32* %r3.global-to-local, align 4
  %v1_9820 = add i32 %v3_9818, -9
  %v2_9820 = icmp ugt i32 %v1_981c, 7
  store i1 %v2_9820, i1* %cpsr_c.global-to-local, align 1
  %v3_9820 = sub i32 8, %v3_9818
  %v4_9820 = and i32 %v3_9820, %v1_981c
  %v5_9820 = icmp slt i32 %v4_9820, 0
  store i1 %v5_9820, i1* %cpsr_v.global-to-local, align 1
  %v6_9820 = icmp slt i32 %v1_9820, 0
  store i1 %v6_9820, i1* %cpsr_n.global-to-local, align 1
  %v7_9820 = icmp eq i32 %v1_981c, 8
  store i1 %v7_9820, i1* %cpsr_z.global-to-local, align 1
  %v2_9824 = xor i1 %v2_9820, true
  %v3_9824 = or i1 %v7_9820, %v2_9824
  br i1 %v3_9824, label %dec_label_pc_9838.preheader, label %dec_label_pc_984c

dec_label_pc_9838.preheader:                      ; preds = %dec_label_pc_9810
  store i32 %v2_87d8, i32* %ip.global-to-local, align 4
  %v6_9828 = add i32 %v3_9818, %v2_87d8
  store i32 %v6_9828, i32* @r4, align 4
  br label %dec_label_pc_9838

dec_label_pc_9834:                                ; preds = %dec_label_pc_9838
  %v1_9834 = call i32 @function_15664(i32 1)
  store i32 %v1_9834, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9838

dec_label_pc_9838:                                ; preds = %dec_label_pc_9838.preheader, %dec_label_pc_9834
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_983c = call i32 @function_14504(i32* null)
  %v1_9840 = load i32, i32* @r4, align 4
  %v2_9840 = sub i32 %v2_983c, %v1_9840
  %v3_9840 = icmp uge i32 %v2_983c, %v1_9840
  store i1 %v3_9840, i1* %cpsr_c.global-to-local, align 1
  %v4_9840 = xor i32 %v1_9840, %v2_983c
  %v5_9840 = xor i32 %v2_9840, %v2_983c
  %v6_9840 = and i32 %v5_9840, %v4_9840
  %v7_9840 = icmp slt i32 %v6_9840, 0
  store i1 %v7_9840, i1* %cpsr_v.global-to-local, align 1
  %v8_9840 = icmp slt i32 %v2_9840, 0
  store i1 %v8_9840, i1* %cpsr_n.global-to-local, align 1
  %v9_9840 = icmp eq i32 %v2_983c, %v1_9840
  store i1 %v9_9840, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %r0.global-to-local, align 4
  br i1 %v3_9840, label %dec_label_pc_984c, label %dec_label_pc_9834

dec_label_pc_984c:                                ; preds = %dec_label_pc_9838, %dec_label_pc_9810
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_9850 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9850, i32* @r4, align 4
  %v0_9854 = load i32, i32* @r6, align 4
  %v2_9854 = add i32 %v0_9854, %v3_9850
  store i32 %v2_9854, i32* @r5, align 4
  store i32 %v2_9854, i32* %r0.global-to-local, align 4
  %v1_985c = inttoptr i32 %v2_9854 to i8*
  %v2_985c = call i32 @function_13874(i8* %v1_985c)
  store i32 ptrtoint ([5 x i8]* @global_var_16b20.43 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_985c, i32* @r1, align 4
  %v0_9868 = load i32, i32* @r5, align 4
  store i32 %v0_9868, i32* %r0.global-to-local, align 4
  %v4_986c = inttoptr i32 %v0_9868 to i8*
  %v5_986c = call i32 @function_13bc8(i8* %v4_986c, i32 %v2_985c, i32 ptrtoint ([5 x i8]* @global_var_16b20.43 to i32))
  store i32 %v5_986c, i32* %r0.global-to-local, align 4
  %v1_9870 = add i32 %v5_986c, -4
  %v2_9870 = icmp ugt i32 %v5_986c, 3
  store i1 %v2_9870, i1* %cpsr_c.global-to-local, align 1
  %v3_9870 = sub i32 3, %v5_986c
  %v4_9870 = and i32 %v3_9870, %v5_986c
  %v5_9870 = icmp slt i32 %v4_9870, 0
  store i1 %v5_9870, i1* %cpsr_v.global-to-local, align 1
  %v6_9870 = icmp slt i32 %v1_9870, 0
  store i1 %v6_9870, i1* %cpsr_n.global-to-local, align 1
  %v7_9870 = icmp eq i32 %v5_986c, 4
  store i1 %v7_9870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9870, label %dec_label_pc_9c68, label %dec_label_pc_9878

dec_label_pc_9878:                                ; preds = %dec_label_pc_984c
  %v0_9878 = load i32, i32* @r6, align 4
  %v1_9878 = load i32, i32* @r4, align 4
  %v2_9878 = add i32 %v1_9878, %v0_9878
  %v3_9878 = inttoptr i32 %v2_9878 to i8*
  %v4_9878 = load i8, i8* %v3_9878, align 1
  %v6_9878 = zext i8 %v4_9878 to i32
  store i32 %v6_9878, i32* %r3.global-to-local, align 4
  %v2_987c = icmp ugt i8 %v4_9878, 46
  store i1 %v2_987c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_987c = icmp ult i8 %v4_9878, 47
  store i1 %v6_987c, i1* %cpsr_n.global-to-local, align 1
  %v7_987c = icmp eq i8 %v4_9878, 47
  store i1 %v7_987c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_987c, label %dec_label_pc_9de0, label %dec_label_pc_9884

dec_label_pc_9884:                                ; preds = %dec_label_pc_9dfc, %dec_label_pc_9de0, %dec_label_pc_9d38, %dec_label_pc_9d1c, %dec_label_pc_9878, %dec_label_pc_9e2c, %dec_label_pc_9d68
  %v0_9884 = load i32, i32* %sb.global-to-local, align 4
  %v1_9888 = add i32 %v0_9884, 1431
  store i32 %v1_9888, i32* @r0, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_16afc.21 to i32), i32* @r1, align 4
  store i32 4, i32* @r2, align 4
  %v4_9894 = call i32 @function_14850(i32 %v1_9888, i32 ptrtoint ([4 x i8]* @global_var_16afc.21 to i32), i32 4)
  store i32 %v4_9894, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v2_989c = load i32, i32* @r8, align 4
  %v3_989c = add i32 %v2_989c, -1452
  %v4_989c = inttoptr i32 %v3_989c to i8*
  store i8 10, i8* %v4_989c, align 1
  br label %dec_label_pc_8838

dec_label_pc_98a4:                                ; preds = %dec_label_pc_8610
  store i32 %v1_8610, i32* %r3.global-to-local, align 4
  %v1_98a8 = trunc i32 %v1_8610 to i8
  store i8 %v1_98a8, i8* %v2_8650, align 1
  %v0_98ac = load i32, i32* @r6, align 4
  %v1_98ac = add i32 %v0_98ac, -1431
  %v2_98ac = inttoptr i32 %v1_98ac to i32*
  %v3_98ac = load i32, i32* %v2_98ac, align 4
  store i32 %v3_98ac, i32* %r0.global-to-local, align 4
  %v1_98b0 = call i32 @function_14234(i32 %v3_98ac)
  store i32 %v1_98b0, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_98b8 = load i32, i32* @r6, align 4
  %v2_98b8 = add i32 %v1_98b8, -1431
  %v3_98b8 = inttoptr i32 %v2_98b8 to i32*
  store i32 -1, i32* %v3_98b8, align 4
  br label %dec_label_pc_8630

dec_label_pc_98c0:                                ; preds = %dec_label_pc_9774, %dec_label_pc_96a4, %dec_label_pc_9678
  %v0_98c0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_98c0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16b14.39 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v5_98d0 = call i32 @function_13938(i32 %v2_8280, i32 %v0_98c0, i32 ptrtoint ([5 x i8]* @global_var_16b14.39 to i32), i32 4)
  %v0_98d4 = load i32, i32* %sb.global-to-local, align 4
  %v1_98d8 = add i32 %v0_98d4, 1431
  store i32 %v1_98d8, i32* @r4, align 4
  store i32 %v5_98d0, i32* @r5, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16b30.47 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_98d8, i32* %r0.global-to-local, align 4
  %v3_98e8 = inttoptr i32 %v1_98d8 to i8*
  %v4_98e8 = call i32 @function_13c54(i8* %v3_98e8, i32 ptrtoint ([5 x i8]* @global_var_16b30.47 to i32))
  store i32 %v4_98e8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_98ec = icmp slt i32 %v4_98e8, 0
  store i1 %v1_98ec, i1* %cpsr_n.global-to-local, align 1
  %v2_98ec = icmp eq i32 %v4_98e8, 0
  store i1 %v2_98ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_98ec, label %dec_label_pc_9aa8, label %dec_label_pc_98f4

dec_label_pc_98f4:                                ; preds = %dec_label_pc_9aa8, %dec_label_pc_98c0
  store i32 7, i32* %r3.global-to-local, align 4
  %v2_98f8 = load i32, i32* @r8, align 4
  %v3_98f8 = add i32 %v2_98f8, -1452
  %v4_98f8 = inttoptr i32 %v3_98f8 to i8*
  store i8 7, i8* %v4_98f8, align 1
  br label %dec_label_pc_98fc

dec_label_pc_98fc:                                ; preds = %bb240, %dec_label_pc_98f4
  %v0_98fc = load i32, i32* @r5, align 4
  store i32 %v0_98fc, i32* %r2.global-to-local, align 4
  %v0_9900 = load i32, i32* @r8, align 4
  %v1_9900 = add i32 %v0_9900, -1456
  %v2_9900 = inttoptr i32 %v1_9900 to i32*
  %v3_9900 = load i32, i32* %v2_9900, align 4
  store i32 %v3_9900, i32* %r0.global-to-local, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_990c = call i32 @function_14a40(i32 %v3_9900, i32* nonnull %stack_var_-20809, i32 %v0_98fc, i32 16384)
  store i32 %v5_990c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8838

dec_label_pc_9914:                                ; preds = %dec_label_pc_8e04
  %v2_9914 = add i32 %v0_9914, -10240
  %v3_9914 = icmp ugt i32 %v0_9914, 10239
  store i1 %v3_9914, i1* %cpsr_c.global-to-local, align 1
  %v4_9914 = sub i32 10239, %v0_9914
  %v5_9914 = and i32 %v4_9914, %v0_9914
  %v6_9914 = icmp slt i32 %v5_9914, 0
  store i1 %v6_9914, i1* %cpsr_v.global-to-local, align 1
  %v7_9914 = icmp slt i32 %v2_9914, 0
  store i1 %v7_9914, i1* %cpsr_n.global-to-local, align 1
  %v8_9914 = icmp eq i32 %v0_9914, 10240
  store i1 %v8_9914, i1* %cpsr_z.global-to-local, align 1
  %v5_9918 = icmp slt i32 %v0_9914, 10240
  br i1 %v5_9918, label %dec_label_pc_8838, label %dec_label_pc_8e20

dec_label_pc_9920:                                ; preds = %dec_label_pc_9628
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9924 = load i32, i32* @r4, align 4
  %v2_9924 = inttoptr i32 %v1_9924 to i32*
  store i32 104, i32* %v2_9924, align 4
  br label %dec_label_pc_965c

dec_label_pc_992c:                                ; preds = %dec_label_pc_9430
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9930 = load i32, i32* %fp.global-to-local, align 4
  %v2_9930 = inttoptr i32 %v1_9930 to i32*
  store i32 104, i32* %v2_9930, align 4
  br label %dec_label_pc_9934

dec_label_pc_9934:                                ; preds = %dec_label_pc_9950, %dec_label_pc_992c
  %v0_9934 = load i32, i32* @r8, align 4
  %v1_9934 = add i32 %v0_9934, -1456
  %v2_9934 = inttoptr i32 %v1_9934 to i32*
  %v3_9934 = load i32, i32* %v2_9934, align 4
  store i32 %v3_9934, i32* %r0.global-to-local, align 4
  %v1_9938 = call i32 @function_14234(i32 %v3_9934)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v1_9944 = load i32, i32* @r8, align 4
  %v2_9944 = add i32 %v1_9944, -1456
  %v3_9944 = inttoptr i32 %v2_9944 to i32*
  store i32 -1, i32* %v3_9944, align 4
  %v0_9948 = load i32, i32* %lr.global-to-local, align 4
  %v1_9948 = trunc i32 %v0_9948 to i8
  %v2_9948 = load i32, i32* @r8, align 4
  %v3_9948 = add i32 %v2_9948, -1452
  %v4_9948 = inttoptr i32 %v3_9948 to i8*
  store i8 %v1_9948, i8* %v4_9948, align 1
  br label %dec_label_pc_8838

dec_label_pc_9950:                                ; preds = %dec_label_pc_9458
  %v0_9950 = load i32, i32* %fp.global-to-local, align 4
  %v1_9950 = inttoptr i32 %v0_9950 to i32*
  %v2_9950 = load i32, i32* %v1_9950, align 4
  store i32 %v2_9950, i32* %r3.global-to-local, align 4
  %v1_9954 = add i32 %v2_9950, -11
  %v2_9954 = icmp ugt i32 %v2_9950, 10
  store i1 %v2_9954, i1* %cpsr_c.global-to-local, align 1
  %v3_9954 = sub i32 10, %v2_9950
  %v4_9954 = and i32 %v3_9954, %v2_9950
  %v5_9954 = icmp slt i32 %v4_9954, 0
  store i1 %v5_9954, i1* %cpsr_v.global-to-local, align 1
  %v6_9954 = icmp slt i32 %v1_9954, 0
  store i1 %v6_9954, i1* %cpsr_n.global-to-local, align 1
  %v7_9954 = icmp eq i32 %v2_9950, 11
  store i1 %v7_9954, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9954, label %dec_label_pc_8838, label %dec_label_pc_9934

dec_label_pc_9960:                                ; preds = %bb230
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_996c = load i32, i32* @r5, align 4
  %v1_996c = add i32 %v0_996c, 4
  %v2_996c = inttoptr i32 %v1_996c to i8*
  %v3_996c = load i8, i8* %v2_996c, align 1
  %v4_996c = zext i8 %v3_996c to i32
  store i32 %v4_996c, i32* %r3.global-to-local, align 4
  %v2_9970 = icmp ugt i8 %v3_996c, 114
  store i1 %v2_9970, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9970 = icmp ult i8 %v3_996c, 115
  store i1 %v6_9970, i1* %cpsr_n.global-to-local, align 1
  %v7_9970 = icmp eq i8 %v3_996c, 115
  store i1 %v7_9970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9970, label %bb235, label %.thread63

bb235:                                            ; preds = %dec_label_pc_9960
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread63

.thread63:                                        ; preds = %dec_label_pc_9960, %bb235
  %v3_9980 = phi i32 [ 7, %dec_label_pc_9960 ], [ 8, %bb235 ]
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 %v0_996c, i32* @r0, align 4
  %v1_9988 = load i32, i32* %r6.global-to-local, align 4
  %v2_9988 = sub i32 %v1_9988, %v3_9980
  store i32 %v2_9988, i32* @r2, align 4
  %v2_998c = add i32 %v3_9980, %v0_996c
  store i32 %v2_998c, i32* @r1, align 4
  %v3_9990 = call i32 @function_14860(i32 %v0_996c, i32 %v2_998c, i32 %v2_9988)
  store i32 %v3_9990, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v0_9998 = load i32, i32* @r7, align 4
  store i32 %v0_9998, i32* %stack_var_-40, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  %v1_99a0 = load i32, i32* @r4, align 4
  %v2_99a0 = add i32 %v1_99a0, %v2_8280
  %v3_99a0 = inttoptr i32 %v2_99a0 to i8*
  %v4_99a0 = load i8, i8* %v3_99a0, align 1
  %v6_99a0 = zext i8 %v4_99a0 to i32
  store i32 %v6_99a0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_99a4 = icmp eq i8 %v4_99a0, 0
  store i1 %v2_99a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_99a4, label %dec_label_pc_99e8, label %dec_label_pc_99ac

dec_label_pc_99ac:                                ; preds = %.thread63
  %v2_99ac = icmp ugt i8 %v4_99a0, 46
  store i1 %v2_99ac, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99ac = icmp ult i8 %v4_99a0, 47
  store i1 %v6_99ac, i1* %cpsr_n.global-to-local, align 1
  %v7_99ac = icmp eq i8 %v4_99a0, 47
  store i1 %v7_99ac, i1* %cpsr_z.global-to-local, align 1
  %v1_99b0 = load i32, i32* @r5, align 4
  br i1 %v7_99ac, label %bb236, label %dec_label_pc_99b8

bb236:                                            ; preds = %dec_label_pc_99ac
  store i32 %v1_99b0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9b48

dec_label_pc_99b8:                                ; preds = %dec_label_pc_99ac
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_99c8

dec_label_pc_99c0:                                ; preds = %dec_label_pc_99c8
  %v2_99c0 = icmp ugt i8 %v4_99d4, 46
  store i1 %v2_99c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99c0 = icmp ult i8 %v4_99d4, 47
  store i1 %v6_99c0, i1* %cpsr_n.global-to-local, align 1
  %v7_99c0 = icmp eq i8 %v4_99d4, 47
  store i1 %v7_99c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_99c0, label %dec_label_pc_9b48, label %dec_label_pc_99c8

dec_label_pc_99c8:                                ; preds = %dec_label_pc_99c0, %dec_label_pc_99b8
  %v0_99dc = phi i32 [ %v1_99dc, %dec_label_pc_99c0 ], [ 1, %dec_label_pc_99b8 ]
  store i32 %v0_99dc, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 %v0_99dc, i32* %stack_var_-40, align 4
  %v2_99d4 = add i32 %v0_99dc, %v1_99b0
  %v3_99d4 = inttoptr i32 %v2_99d4 to i8*
  %v4_99d4 = load i8, i8* %v3_99d4, align 1
  %v6_99d4 = zext i8 %v4_99d4 to i32
  store i32 %v6_99d4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_99d8 = icmp eq i8 %v4_99d4, 0
  store i1 %v2_99d8, i1* %cpsr_z.global-to-local, align 1
  %v1_99dc = add i32 %v0_99dc, 1
  store i32 %v1_99dc, i32* %r3.global-to-local, align 4
  store i32 %v2_99d4, i32* %r1.global-to-local, align 4
  br i1 %v2_99d8, label %dec_label_pc_99e8, label %dec_label_pc_99c0

dec_label_pc_99e8:                                ; preds = %dec_label_pc_99c8, %.thread63, %dec_label_pc_9b48
  %v0_99e8 = load i32, i32* @r5, align 4
  store i32 %v0_99e8, i32* %r0.global-to-local, align 4
  %v1_99ec = inttoptr i32 %v0_99e8 to i8*
  %v2_99ec = call i32 @function_13874(i8* %v1_99ec)
  store i32 %v2_99ec, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_99f0 = icmp slt i32 %v2_99ec, 0
  store i1 %v1_99f0, i1* %cpsr_n.global-to-local, align 1
  %v2_99f0 = icmp eq i32 %v2_99ec, 0
  store i1 %v2_99f0, i1* %cpsr_z.global-to-local, align 1
  %tmp237 = icmp slt i32 %v2_99ec, 1
  br i1 %tmp237, label %dec_label_pc_9a14, label %dec_label_pc_99f8

dec_label_pc_99f8:                                ; preds = %dec_label_pc_99e8
  %v0_99f8 = load i32, i32* @r5, align 4
  store i32 %v0_99f8, i32* %r0.global-to-local, align 4
  %v1_99fc = inttoptr i32 %v0_99f8 to i8*
  %v2_99fc = call i32 @function_13874(i8* %v1_99fc)
  store i32 %v2_99fc, i32* %r0.global-to-local, align 4
  %v1_9a00 = add i32 %v2_99fc, -127
  %v2_9a00 = icmp ugt i32 %v2_99fc, 126
  store i1 %v2_9a00, i1* %cpsr_c.global-to-local, align 1
  %v3_9a00 = sub i32 126, %v2_99fc
  %v4_9a00 = and i32 %v3_9a00, %v2_99fc
  %v5_9a00 = icmp slt i32 %v4_9a00, 0
  store i1 %v5_9a00, i1* %cpsr_v.global-to-local, align 1
  %v6_9a00 = icmp slt i32 %v1_9a00, 0
  store i1 %v6_9a00, i1* %cpsr_n.global-to-local, align 1
  %v7_9a00 = icmp eq i32 %v2_99fc, 127
  store i1 %v7_9a00, i1* %cpsr_z.global-to-local, align 1
  %v7_9a04 = icmp sgt i32 %v2_99fc, 127
  br i1 %v7_9a04, label %.thread66, label %bb238

bb238:                                            ; preds = %dec_label_pc_99f8
  %v8_9a04 = load i32, i32* %sb.global-to-local, align 4
  %v9_9a08 = add i32 %v8_9a04, 789
  store i32 %v9_9a08, i32* %r0.global-to-local, align 4
  %v8_9a0c = load i32, i32* @r5, align 4
  store i32 %v8_9a0c, i32* %r1.global-to-local, align 4
  br label %.thread66

.thread66:                                        ; preds = %dec_label_pc_99f8, %bb238
  store i32 39444, i32* %lr.global-to-local, align 4
  %v3_9a10 = xor i1 %v6_9a00, %v5_9a00
  %v4_9a10 = or i1 %v7_9a00, %v3_9a10
  call void @__pseudo_cond_branch(i1 %v4_9a10, i32 ptrtoint (i32* @global_var_1389c.48 to i32))
  br label %dec_label_pc_9a14

dec_label_pc_9a14:                                ; preds = %dec_label_pc_99e8, %.thread66
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9a18 = load i32, i32* %stack_var_-40, align 4
  %v0_9a1c = load i32, i32* @r5, align 4
  %v2_9a1c = add i32 %v3_9a18, 1
  %v1_9a20 = add i32 %v2_9a1c, %v0_9a1c
  store i32 %v1_9a20, i32* %r0.global-to-local, align 4
  %v1_9a24 = inttoptr i32 %v1_9a20 to i8*
  %v2_9a24 = call i32 @function_13874(i8* %v1_9a24)
  store i32 %v2_9a24, i32* %r0.global-to-local, align 4
  %v1_9a28 = add i32 %v2_9a24, -255
  %v2_9a28 = icmp ugt i32 %v2_9a24, 254
  store i1 %v2_9a28, i1* %cpsr_c.global-to-local, align 1
  %v3_9a28 = sub i32 254, %v2_9a24
  %v4_9a28 = and i32 %v3_9a28, %v2_9a24
  %v5_9a28 = icmp slt i32 %v4_9a28, 0
  store i1 %v5_9a28, i1* %cpsr_v.global-to-local, align 1
  %v6_9a28 = icmp slt i32 %v1_9a28, 0
  store i1 %v6_9a28, i1* %cpsr_n.global-to-local, align 1
  %v7_9a28 = icmp eq i32 %v2_9a24, 255
  store i1 %v7_9a28, i1* %cpsr_z.global-to-local, align 1
  %v8_9a2c = icmp sgt i32 %v2_9a24, 255
  br i1 %v8_9a2c, label %dec_label_pc_9400, label %dec_label_pc_9a30

dec_label_pc_9a30:                                ; preds = %dec_label_pc_9a14
  %v0_9a30 = load i32, i32* %sb.global-to-local, align 4
  %v1_9a34 = add i32 %v0_9a30, 533
  store i32 %v1_9a34, i32* @r4, align 4
  store i32 %v1_9a34, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9a40 = call i32 @function_13914(i32 %v1_9a34, i32 255)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9a48 = load i32, i32* %stack_var_-40, align 4
  %v0_9a4c = load i32, i32* @r5, align 4
  %v2_9a4c = add i32 %v3_9a48, 1
  %v1_9a50 = add i32 %v2_9a4c, %v0_9a4c
  store i32 %v1_9a50, i32* %r0.global-to-local, align 4
  %v1_9a54 = inttoptr i32 %v1_9a50 to i8*
  %v2_9a54 = call i32 @function_13874(i8* %v1_9a54)
  store i32 %v2_9a54, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9a58 = icmp slt i32 %v2_9a54, 0
  store i1 %v1_9a58, i1* %cpsr_n.global-to-local, align 1
  %v2_9a58 = icmp eq i32 %v2_9a54, 0
  store i1 %v2_9a58, i1* %cpsr_z.global-to-local, align 1
  %tmp239 = icmp slt i32 %v2_9a54, 1
  br i1 %tmp239, label %dec_label_pc_9400, label %dec_label_pc_9a60

dec_label_pc_9a60:                                ; preds = %dec_label_pc_9a30
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9a64 = load i32, i32* %stack_var_-40, align 4
  %v0_9a68 = load i32, i32* @r5, align 4
  %v0_9a6c = load i32, i32* @r4, align 4
  store i32 %v0_9a6c, i32* @r0, align 4
  %v2_9a68 = add i32 %v3_9a64, 1
  %v1_9a70 = add i32 %v2_9a68, %v0_9a68
  store i32 %v1_9a70, i32* %r1.global-to-local, align 4
  %v2_9a74 = inttoptr i32 %v0_9a6c to i8*
  %v3_9a74 = call i32 @function_1389c(i8* %v2_9a74, i32 %v1_9a70)
  store i32 %v3_9a74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9400

dec_label_pc_9a7c:                                ; preds = %dec_label_pc_8dd0
  %v0_9a7c = load i32, i32* @r8, align 4
  %v1_9a7c = add i32 %v0_9a7c, -1456
  %v2_9a7c = inttoptr i32 %v1_9a7c to i32*
  %v3_9a7c = load i32, i32* %v2_9a7c, align 4
  store i32 %v3_9a7c, i32* %r0.global-to-local, align 4
  %v1_9a80 = call i32 @function_14234(i32 %v3_9a7c)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_9a8c = load i32, i32* @r8, align 4
  %v2_9a8c = add i32 %v1_9a8c, -1456
  %v3_9a8c = inttoptr i32 %v2_9a8c to i32*
  store i32 -1, i32* %v3_9a8c, align 4
  %v0_9a90 = load i32, i32* %r3.global-to-local, align 4
  %v1_9a90 = trunc i32 %v0_9a90 to i8
  %v2_9a90 = load i32, i32* @r8, align 4
  %v3_9a90 = add i32 %v2_9a90, -1452
  %v4_9a90 = inttoptr i32 %v3_9a90 to i8*
  store i8 %v1_9a90, i8* %v4_9a90, align 1
  br label %dec_label_pc_8838

dec_label_pc_9a98:                                ; preds = %dec_label_pc_9650
  %v0_9a98 = load i32, i32* @r8, align 4
  %v1_9a98 = add i32 %v0_9a98, -1452
  %v2_9a98 = inttoptr i32 %v1_9a98 to i8*
  %v3_9a98 = load i8, i8* %v2_9a98, align 1
  %v4_9a98 = zext i8 %v3_9a98 to i32
  store i32 %v4_9a98, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9a9c = icmp eq i8 %v3_9a98, 0
  store i1 %v2_9a9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a9c, label %dec_label_pc_8838, label %dec_label_pc_9400

dec_label_pc_9aa8:                                ; preds = %dec_label_pc_98c0
  %v0_9aa8 = load i32, i32* @r4, align 4
  store i32 %v0_9aa8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_16afc.21 to i32), i32* %r1.global-to-local, align 4
  %v3_9ab0 = inttoptr i32 %v0_9aa8 to i8*
  %v4_9ab0 = call i32 @function_13c54(i8* %v3_9ab0, i32 ptrtoint ([4 x i8]* @global_var_16afc.21 to i32))
  store i32 %v4_9ab0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9ab4 = icmp slt i32 %v4_9ab0, 0
  store i1 %v1_9ab4, i1* %cpsr_n.global-to-local, align 1
  %v2_9ab4 = icmp eq i32 %v4_9ab0, 0
  store i1 %v2_9ab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9ab4, label %bb240, label %dec_label_pc_98f4

bb240:                                            ; preds = %dec_label_pc_9aa8
  %v0_9abc = load i32, i32* %fp.global-to-local, align 4
  %v1_9abc = load i32, i32* @r5, align 4
  %v2_9abc = sub i32 %v0_9abc, %v1_9abc
  %v3_9abc = icmp uge i32 %v0_9abc, %v1_9abc
  store i1 %v3_9abc, i1* %cpsr_c.global-to-local, align 1
  %v4_9abc = xor i32 %v1_9abc, %v0_9abc
  %v5_9abc = xor i32 %v2_9abc, %v0_9abc
  %v6_9abc = and i32 %v5_9abc, %v4_9abc
  %v7_9abc = icmp slt i32 %v6_9abc, 0
  store i1 %v7_9abc, i1* %cpsr_v.global-to-local, align 1
  %v8_9abc = icmp slt i32 %v2_9abc, 0
  store i1 %v8_9abc, i1* %cpsr_n.global-to-local, align 1
  %v9_9abc = icmp eq i32 %v0_9abc, %v1_9abc
  store i1 %v9_9abc, i1* %cpsr_z.global-to-local, align 1
  %v7_9ac0 = icmp sgt i32 %v0_9abc, %v1_9abc
  %. = select i1 %v7_9ac0, i32 10, i32 1
  store i32 %., i32* %r3.global-to-local, align 4
  %v9_9ac8 = trunc i32 %. to i8
  %v10_9ac8 = load i32, i32* @r8, align 4
  %v11_9ac8 = add i32 %v10_9ac8, -1452
  %v12_9ac8 = inttoptr i32 %v11_9ac8 to i8*
  store i8 %v9_9ac8, i8* %v12_9ac8, align 1
  br label %dec_label_pc_98fc

dec_label_pc_9ad4:                                ; preds = %dec_label_pc_9548
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 36, i32* %r0.global-to-local, align 4
  %v0_9adc = load i32, i32* @r8, align 4
  %v1_9adc = add i32 %v0_9adc, 656
  %v2_9adc = inttoptr i32 %v1_9adc to i32*
  %v3_9adc = load i32, i32* %v2_9adc, align 4
  store i32 %v3_9adc, i32* @r4, align 4
  %v3_9ae0 = call i32 @function_12e6c(i32 36, i32* null)
  %v0_9ae4 = load i32, i32* @r4, align 4
  store i32 %v0_9ae4, i32* %r1.global-to-local, align 4
  store i32 %v3_9ae0, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9af0 = load i32, i32* @r7, align 4
  store i32 %v0_9af0, i32* %r0.global-to-local, align 4
  %v4_9af4 = call i32 @function_13938(i32 %v0_9af0, i32 %v0_9ae4, i32 %v3_9ae0, i32 11)
  store i32 %v4_9af4, i32* %r0.global-to-local, align 4
  %v0_9af8 = load i32, i32* @r8, align 4
  %v1_9af8 = add i32 %v0_9af8, 656
  %v2_9af8 = inttoptr i32 %v1_9af8 to i32*
  %v3_9af8 = load i32, i32* %v2_9af8, align 4
  %v0_9afc = load i32, i32* @r7, align 4
  %v2_9afc = add i32 %v0_9afc, %v4_9af4
  store i32 %v2_9afc, i32* @r5, align 4
  store i32 %v4_9af4, i32* @r4, align 4
  %v2_9b04 = sub i32 %v3_9af8, %v4_9af4
  store i32 %v2_9b04, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16b38.50 to i32), i32* %r2.global-to-local, align 4
  %v0_9b0c = load i32, i32* @sl, align 4
  store i32 %v0_9b0c, i32* %r3.global-to-local, align 4
  store i32 %v2_9afc, i32* %r0.global-to-local, align 4
  %v4_9b14 = call i32 @function_13938(i32 %v2_9afc, i32 %v2_9b04, i32 ptrtoint (i32* @global_var_16b38.50 to i32), i32 %v0_9b0c)
  store i32 %v4_9b14, i32* %r0.global-to-local, align 4
  %v0_9b18 = load i32, i32* @r8, align 4
  %v1_9b18 = add i32 %v0_9b18, 12
  %v2_9b18 = inttoptr i32 %v1_9b18 to i32*
  %v3_9b18 = load i32, i32* %v2_9b18, align 4
  store i32 %v3_9b18, i32* %r3.global-to-local, align 4
  %v0_9b1c = load i32, i32* @r4, align 4
  %v2_9b1c = add i32 %v0_9b1c, %v4_9b14
  store i32 %v2_9b1c, i32* %r6.global-to-local, align 4
  %v1_9b20 = load i32, i32* %sb.global-to-local, align 4
  %v2_9b20 = add i32 %v1_9b20, %v2_9b1c
  store i32 %v2_9b20, i32* %r2.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v1_9b28 = add i32 %v3_9b18, -4
  %v2_9b28 = icmp ugt i32 %v3_9b18, 3
  store i1 %v2_9b28, i1* %cpsr_c.global-to-local, align 1
  %v3_9b28 = sub i32 3, %v3_9b18
  %v4_9b28 = and i32 %v3_9b28, %v3_9b18
  %v5_9b28 = icmp slt i32 %v4_9b28, 0
  store i1 %v5_9b28, i1* %cpsr_v.global-to-local, align 1
  %v6_9b28 = icmp slt i32 %v1_9b28, 0
  store i1 %v6_9b28, i1* %cpsr_n.global-to-local, align 1
  %v7_9b28 = icmp eq i32 %v3_9b18, 4
  store i1 %v7_9b28, i1* %cpsr_z.global-to-local, align 1
  %v3_9b2c = add i32 %v2_9b20, 2115
  %v4_9b2c = inttoptr i32 %v3_9b2c to i8*
  store i8 0, i8* %v4_9b2c, align 1
  %v7_9b30 = icmp sgt i32 %v3_9b18, 4
  br i1 %v7_9b30, label %dec_label_pc_9b34, label %dec_label_pc_9bbc

dec_label_pc_9b34:                                ; preds = %dec_label_pc_9ad4, %dec_label_pc_9bbc, %dec_label_pc_9bcc
  store i32 -1, i32* %r6.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_9b3c = load i32, i32* @r8, align 4
  %v2_9b3c = add i32 %v1_9b3c, 8
  %v3_9b3c = inttoptr i32 %v2_9b3c to i32*
  store i32 -1, i32* %v3_9b3c, align 4
  %v0_9b40 = load i32, i32* %r3.global-to-local, align 4
  %v1_9b40 = trunc i32 %v0_9b40 to i8
  %v2_9b40 = load i32, i32* @r8, align 4
  %v3_9b40 = add i32 %v2_9b40, -1452
  %v4_9b40 = inttoptr i32 %v3_9b40 to i8*
  store i8 %v1_9b40, i8* %v4_9b40, align 1
  br label %dec_label_pc_8838

dec_label_pc_9b48:                                ; preds = %dec_label_pc_99c0, %bb236
  %v2_9b4c = phi i32 [ %v1_99b0, %bb236 ], [ %v2_99d4, %dec_label_pc_99c0 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9b4c = inttoptr i32 %v2_9b4c to i8*
  store i8 0, i8* %v3_9b4c, align 1
  br label %dec_label_pc_99e8

dec_label_pc_9b54:                                ; preds = %dec_label_pc_93f0
  %v0_9b54 = load i32, i32* %sb.global-to-local, align 4
  %v1_9b58 = add i32 %v0_9b54, 533
  store i32 %v1_9b58, i32* @r4, align 4
  store i32 %v1_9b58, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9b64 = call i32 @function_13914(i32 %v1_9b58, i32 255)
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v3_9b6c = load i32, i32* %stack_var_-40, align 4
  %v0_9b70 = load i32, i32* @r5, align 4
  %v2_9b70 = add i32 %v3_9b6c, 1
  %v1_9b74 = add i32 %v2_9b70, %v0_9b70
  store i32 %v1_9b74, i32* %r0.global-to-local, align 4
  %v1_9b78 = inttoptr i32 %v1_9b74 to i8*
  %v2_9b78 = call i32 @function_13874(i8* %v1_9b78)
  store i32 %v2_9b78, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9b7c = icmp slt i32 %v2_9b78, 0
  store i1 %v1_9b7c, i1* %cpsr_n.global-to-local, align 1
  %v2_9b7c = icmp eq i32 %v2_9b78, 0
  store i1 %v2_9b7c, i1* %cpsr_z.global-to-local, align 1
  %tmp241 = icmp slt i32 %v2_9b78, 1
  br i1 %tmp241, label %dec_label_pc_9400, label %dec_label_pc_9b84

dec_label_pc_9b84:                                ; preds = %dec_label_pc_9b54
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9b88 = load i32, i32* %stack_var_-40, align 4
  %v0_9b8c = load i32, i32* @r5, align 4
  %v2_9b8c = add i32 %v3_9b88, 1
  %v1_9b90 = add i32 %v2_9b8c, %v0_9b8c
  store i32 %v1_9b90, i32* %r0.global-to-local, align 4
  %v1_9b94 = inttoptr i32 %v1_9b90 to i8*
  %v2_9b94 = call i32 @function_13874(i8* %v1_9b94)
  store i32 %v2_9b94, i32* %r0.global-to-local, align 4
  %v1_9b98 = add i32 %v2_9b94, -255
  %v2_9b98 = icmp ugt i32 %v2_9b94, 254
  store i1 %v2_9b98, i1* %cpsr_c.global-to-local, align 1
  %v3_9b98 = sub i32 254, %v2_9b94
  %v4_9b98 = and i32 %v3_9b98, %v2_9b94
  %v5_9b98 = icmp slt i32 %v4_9b98, 0
  store i1 %v5_9b98, i1* %cpsr_v.global-to-local, align 1
  %v6_9b98 = icmp slt i32 %v1_9b98, 0
  store i1 %v6_9b98, i1* %cpsr_n.global-to-local, align 1
  %v7_9b98 = icmp eq i32 %v2_9b94, 255
  store i1 %v7_9b98, i1* %cpsr_z.global-to-local, align 1
  %v8_9b9c = icmp sgt i32 %v2_9b94, 255
  br i1 %v8_9b9c, label %dec_label_pc_9400, label %dec_label_pc_9ba0

dec_label_pc_9ba0:                                ; preds = %dec_label_pc_9b84
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9ba4 = load i32, i32* %stack_var_-40, align 4
  %v0_9ba8 = load i32, i32* @r5, align 4
  %v0_9bac = load i32, i32* @r4, align 4
  store i32 %v0_9bac, i32* @r0, align 4
  %v2_9ba8 = add i32 %v3_9ba4, 1
  %v1_9bb0 = add i32 %v2_9ba8, %v0_9ba8
  store i32 %v1_9bb0, i32* %r1.global-to-local, align 4
  %v2_9bb4 = inttoptr i32 %v0_9bac to i8*
  %v3_9bb4 = call i32 @function_1389c(i8* %v2_9bb4, i32 %v1_9bb0)
  store i32 %v3_9bb4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9400

dec_label_pc_9bbc:                                ; preds = %dec_label_pc_9ad4
  %v0_9bbc = load i32, i32* @r5, align 4
  store i32 %v0_9bbc, i32* %r0.global-to-local, align 4
  %v1_9bc0 = inttoptr i32 %v0_9bbc to i8*
  %v2_9bc0 = call i32 @function_13874(i8* %v1_9bc0)
  store i32 %v2_9bc0, i32* %r0.global-to-local, align 4
  %v1_9bc4 = add i32 %v2_9bc0, -127
  %v2_9bc4 = icmp ugt i32 %v2_9bc0, 126
  store i1 %v2_9bc4, i1* %cpsr_c.global-to-local, align 1
  %v3_9bc4 = sub i32 126, %v2_9bc0
  %v4_9bc4 = and i32 %v3_9bc4, %v2_9bc0
  %v5_9bc4 = icmp slt i32 %v4_9bc4, 0
  store i1 %v5_9bc4, i1* %cpsr_v.global-to-local, align 1
  %v6_9bc4 = icmp slt i32 %v1_9bc4, 0
  store i1 %v6_9bc4, i1* %cpsr_n.global-to-local, align 1
  %v7_9bc4 = icmp eq i32 %v2_9bc0, 127
  store i1 %v7_9bc4, i1* %cpsr_z.global-to-local, align 1
  %v8_9bc8 = icmp sgt i32 %v2_9bc0, 127
  br i1 %v8_9bc8, label %dec_label_pc_9b34, label %dec_label_pc_9bcc

dec_label_pc_9bcc:                                ; preds = %dec_label_pc_9bbc
  %v0_9bcc = load i32, i32* @r8, align 4
  %v1_9bcc = add i32 %v0_9bcc, 12
  %v2_9bcc = inttoptr i32 %v1_9bcc to i32*
  %v3_9bcc = load i32, i32* %v2_9bcc, align 4
  store i32 %v1_9410, i32* %r2.global-to-local, align 4
  %v1_9bd4 = and i32 %v3_9bcc, 33554432
  %v2_9bd4 = icmp ne i32 %v1_9bd4, 0
  store i1 %v2_9bd4, i1* %cpsr_c.global-to-local, align 1
  %v3_9bd4 = mul i32 %v3_9bcc, 128
  %v0_9bd8 = load i32, i32* @r5, align 4
  store i32 %v0_9bd8, i32* %r1.global-to-local, align 4
  %v2_9bdc = add i32 %v3_9bd4, %v1_9410
  store i32 %v2_9bdc, i32* @r0, align 4
  %v2_9be0 = inttoptr i32 %v2_9bdc to i8*
  %v3_9be0 = call i32 @function_1389c(i8* %v2_9be0, i32 %v0_9bd8)
  store i32 %v3_9be0, i32* %r0.global-to-local, align 4
  %v0_9be4 = load i32, i32* @r8, align 4
  %v1_9be4 = add i32 %v0_9be4, 12
  %v2_9be4 = inttoptr i32 %v1_9be4 to i32*
  %v3_9be4 = load i32, i32* %v2_9be4, align 4
  store i32 %v1_9410, i32* %r3.global-to-local, align 4
  %v1_9bec = and i32 %v3_9be4, 33554432
  %v2_9bec = icmp ne i32 %v1_9bec, 0
  store i1 %v2_9bec, i1* %cpsr_c.global-to-local, align 1
  %v3_9bec = mul i32 %v3_9be4, 128
  %v2_9bf0 = add i32 %v3_9bec, %v1_9410
  store i32 %v2_9bf0, i32* %r4.global-to-local, align 4
  store i32 %v2_9bf0, i32* %r0.global-to-local, align 4
  %v1_9bf8 = inttoptr i32 %v2_9bf0 to i8*
  %v2_9bf8 = call i32 @function_13874(i8* %v1_9bf8)
  store i32 ptrtoint (i32* @global_var_16b3c.52 to i32), i32* %r1.global-to-local, align 4
  %v2_9c00 = add i32 %v2_9bf0, %v2_9bf8
  store i32 %v2_9c00, i32* @r0, align 4
  %v2_9c04 = inttoptr i32 %v2_9c00 to i8*
  %v3_9c04 = call i32 @function_1389c(i8* %v2_9c04, i32 ptrtoint (i32* @global_var_16b3c.52 to i32))
  store i32 %v3_9c04, i32* %r0.global-to-local, align 4
  %v0_9c08 = load i32, i32* %r6.global-to-local, align 4
  %v1_9c08 = add i32 %v0_9c08, 3
  store i32 %v1_9c08, i32* @r4, align 4
  %v0_9c0c = load i32, i32* @r8, align 4
  %v1_9c0c = add i32 %v0_9c0c, 656
  %v2_9c0c = inttoptr i32 %v1_9c0c to i32*
  %v3_9c0c = load i32, i32* %v2_9c0c, align 4
  %v0_9c10 = load i32, i32* @r7, align 4
  %v2_9c10 = add i32 %v0_9c10, %v1_9c08
  store i32 %v2_9c10, i32* %r6.global-to-local, align 4
  %v2_9c14 = sub i32 %v3_9c0c, %v1_9c08
  store i32 %v2_9c14, i32* %r1.global-to-local, align 4
  %v0_9c18 = load i32, i32* @sl, align 4
  store i32 %v0_9c18, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16b38.50 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9c10, i32* %r0.global-to-local, align 4
  %v4_9c24 = call i32 @function_13938(i32 %v2_9c10, i32 %v2_9c14, i32 ptrtoint (i32* @global_var_16b38.50 to i32), i32 %v0_9c18)
  store i32 %v4_9c24, i32* %r0.global-to-local, align 4
  %v0_9c28 = load i32, i32* @r8, align 4
  %v1_9c28 = add i32 %v0_9c28, 12
  %v2_9c28 = inttoptr i32 %v1_9c28 to i32*
  %v3_9c28 = load i32, i32* %v2_9c28, align 4
  store i32 %v1_9410, i32* %ip.global-to-local, align 4
  %v1_9c30 = and i32 %v3_9c28, 33554432
  %v2_9c30 = icmp ne i32 %v1_9c30, 0
  store i1 %v2_9c30, i1* %cpsr_c.global-to-local, align 1
  %v3_9c30 = mul i32 %v3_9c28, 128
  %v0_9c34 = load i32, i32* @r4, align 4
  %v1_9c34 = load i32, i32* %sb.global-to-local, align 4
  %v2_9c38 = add i32 %v3_9c30, %v1_9410
  store i32 %v2_9c38, i32* @r5, align 4
  %v2_9c34 = add i32 %v0_9c34, %v4_9c24
  %v2_9c3c = add i32 %v2_9c34, %v1_9c34
  store i32 %v2_9c3c, i32* @r4, align 4
  %v0_9c40 = load i32, i32* %fp.global-to-local, align 4
  %v1_9c40 = trunc i32 %v0_9c40 to i8
  %v3_9c40 = add i32 %v2_9c3c, 2115
  %v4_9c40 = inttoptr i32 %v3_9c40 to i8*
  store i8 %v1_9c40, i8* %v4_9c40, align 1
  %v0_9c44 = load i32, i32* @r5, align 4
  store i32 %v0_9c44, i32* %r0.global-to-local, align 4
  %v1_9c48 = inttoptr i32 %v0_9c44 to i8*
  %v2_9c48 = call i32 @function_13874(i8* %v1_9c48)
  %v0_9c4c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_9c4c, i32* %r1.global-to-local, align 4
  %v0_9c50 = load i32, i32* @r5, align 4
  %v2_9c50 = add i32 %v0_9c50, %v2_9c48
  store i32 %v2_9c50, i32* @r0, align 4
  %v2_9c54 = inttoptr i32 %v2_9c50 to i8*
  %v3_9c54 = call i32 @function_1389c(i8* %v2_9c54, i32 %v0_9c4c)
  store i32 %v3_9c54, i32* %r0.global-to-local, align 4
  %v0_9c58 = load i32, i32* @r8, align 4
  %v1_9c58 = add i32 %v0_9c58, 12
  %v2_9c58 = inttoptr i32 %v1_9c58 to i32*
  %v3_9c58 = load i32, i32* %v2_9c58, align 4
  %v1_9c5c = add i32 %v3_9c58, 1
  store i32 %v1_9c5c, i32* %r3.global-to-local, align 4
  store i32 %v1_9c5c, i32* %v2_9c58, align 4
  br label %dec_label_pc_9b34

dec_label_pc_9c68:                                ; preds = %dec_label_pc_984c
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_9c74 = load i32, i32* @r5, align 4
  %v1_9c74 = add i32 %v0_9c74, 4
  %v2_9c74 = inttoptr i32 %v1_9c74 to i8*
  %v3_9c74 = load i8, i8* %v2_9c74, align 1
  %v4_9c74 = zext i8 %v3_9c74 to i32
  store i32 %v4_9c74, i32* %r3.global-to-local, align 4
  %v2_9c78 = icmp ugt i8 %v3_9c74, 114
  store i1 %v2_9c78, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9c78 = icmp ult i8 %v3_9c74, 115
  store i1 %v6_9c78, i1* %cpsr_n.global-to-local, align 1
  %v7_9c78 = icmp eq i8 %v3_9c74, 115
  store i1 %v7_9c78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9c78, label %bb242, label %.thread69

bb242:                                            ; preds = %dec_label_pc_9c68
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread69

.thread69:                                        ; preds = %dec_label_pc_9c68, %bb242
  %v3_9c88 = phi i32 [ 7, %dec_label_pc_9c68 ], [ 8, %bb242 ]
  %v0_9c8c = load i32, i32* @r7, align 4
  %v1_9c8c = sub nsw i32 1, %v3_9c88
  %v2_9c90 = add i32 %v1_9c8c, %v0_9c8c
  store i32 %v2_9c90, i32* @r2, align 4
  store i32 %v0_9c74, i32* @r0, align 4
  %v2_9c98 = add i32 %v3_9c88, %v0_9c74
  store i32 %v2_9c98, i32* @r1, align 4
  %v3_9c9c = call i32 @function_14860(i32 %v0_9c74, i32 %v2_9c98, i32 %v2_9c90)
  store i32 %v3_9c9c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v0_9cac = load i32, i32* @r6, align 4
  %v1_9cac = load i32, i32* @r4, align 4
  %v2_9cac = add i32 %v1_9cac, %v0_9cac
  %v3_9cac = inttoptr i32 %v2_9cac to i8*
  %v4_9cac = load i8, i8* %v3_9cac, align 1
  %v6_9cac = zext i8 %v4_9cac to i32
  store i32 %v6_9cac, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v9_9cb0 = icmp eq i8 %v4_9cac, 0
  store i1 %v9_9cb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9cb0, label %dec_label_pc_9cf0, label %dec_label_pc_9cb8

dec_label_pc_9cb8:                                ; preds = %.thread69
  %v2_9cb8 = icmp ugt i8 %v4_9cac, 46
  store i1 %v2_9cb8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9cb8 = icmp ult i8 %v4_9cac, 47
  store i1 %v6_9cb8, i1* %cpsr_n.global-to-local, align 1
  %v7_9cb8 = icmp eq i8 %v4_9cac, 47
  store i1 %v7_9cb8, i1* %cpsr_z.global-to-local, align 1
  %v1_9cbc = load i32, i32* @r5, align 4
  br i1 %v7_9cb8, label %bb243, label %dec_label_pc_9cc4

bb243:                                            ; preds = %dec_label_pc_9cb8
  store i32 %v1_9cbc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9dd4

dec_label_pc_9cc4:                                ; preds = %dec_label_pc_9cb8
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9cd4

dec_label_pc_9ccc:                                ; preds = %dec_label_pc_9cd4
  %v2_9ccc = icmp ugt i8 %v4_9cdc, 46
  store i1 %v2_9ccc, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9ccc = icmp ult i8 %v4_9cdc, 47
  store i1 %v6_9ccc, i1* %cpsr_n.global-to-local, align 1
  %v7_9ccc = icmp eq i8 %v4_9cdc, 47
  store i1 %v7_9ccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9ccc, label %dec_label_pc_9dd4, label %dec_label_pc_9cd4

dec_label_pc_9cd4:                                ; preds = %dec_label_pc_9ccc, %dec_label_pc_9cc4
  %v1_9ce4 = phi i32 [ %v1_9ce8, %dec_label_pc_9ccc ], [ 1, %dec_label_pc_9cc4 ]
  store i32 %v10_82f0, i32* @lr, align 4
  store i32 %v1_9ce4, i32* %stack_var_-40, align 4
  %v2_9cdc = add i32 %v1_9ce4, %v1_9cbc
  %v3_9cdc = inttoptr i32 %v2_9cdc to i8*
  %v4_9cdc = load i8, i8* %v3_9cdc, align 1
  %v6_9cdc = zext i8 %v4_9cdc to i32
  store i32 %v6_9cdc, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9ce0 = icmp eq i8 %v4_9cdc, 0
  store i1 %v2_9ce0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9cdc, i32* %r1.global-to-local, align 4
  %v1_9ce8 = add i32 %v1_9ce4, 1
  store i32 %v1_9ce8, i32* %r3.global-to-local, align 4
  br i1 %v2_9ce0, label %dec_label_pc_9cf0, label %dec_label_pc_9ccc

dec_label_pc_9cf0:                                ; preds = %dec_label_pc_9cd4, %.thread69, %dec_label_pc_9dd4
  %v0_9cf0 = load i32, i32* @r5, align 4
  store i32 %v0_9cf0, i32* %r0.global-to-local, align 4
  %v1_9cf4 = inttoptr i32 %v0_9cf0 to i8*
  %v2_9cf4 = call i32 @function_13874(i8* %v1_9cf4)
  store i32 %v2_9cf4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9cf8 = icmp slt i32 %v2_9cf4, 0
  store i1 %v1_9cf8, i1* %cpsr_n.global-to-local, align 1
  %v2_9cf8 = icmp eq i32 %v2_9cf4, 0
  store i1 %v2_9cf8, i1* %cpsr_z.global-to-local, align 1
  %tmp244 = icmp slt i32 %v2_9cf4, 1
  br i1 %tmp244, label %dec_label_pc_9d1c, label %dec_label_pc_9d00

dec_label_pc_9d00:                                ; preds = %dec_label_pc_9cf0
  %v0_9d00 = load i32, i32* @r5, align 4
  store i32 %v0_9d00, i32* %r0.global-to-local, align 4
  %v1_9d04 = inttoptr i32 %v0_9d00 to i8*
  %v2_9d04 = call i32 @function_13874(i8* %v1_9d04)
  store i32 %v2_9d04, i32* %r0.global-to-local, align 4
  %v1_9d08 = add i32 %v2_9d04, -127
  %v2_9d08 = icmp ugt i32 %v2_9d04, 126
  store i1 %v2_9d08, i1* %cpsr_c.global-to-local, align 1
  %v3_9d08 = sub i32 126, %v2_9d04
  %v4_9d08 = and i32 %v3_9d08, %v2_9d04
  %v5_9d08 = icmp slt i32 %v4_9d08, 0
  store i1 %v5_9d08, i1* %cpsr_v.global-to-local, align 1
  %v6_9d08 = icmp slt i32 %v1_9d08, 0
  store i1 %v6_9d08, i1* %cpsr_n.global-to-local, align 1
  %v7_9d08 = icmp eq i32 %v2_9d04, 127
  store i1 %v7_9d08, i1* %cpsr_z.global-to-local, align 1
  %v7_9d0c = icmp sgt i32 %v2_9d04, 127
  br i1 %v7_9d0c, label %.thread72, label %bb245

bb245:                                            ; preds = %dec_label_pc_9d00
  %v8_9d0c = load i32, i32* %sb.global-to-local, align 4
  %v9_9d10 = add i32 %v8_9d0c, 789
  store i32 %v9_9d10, i32* %r0.global-to-local, align 4
  %v8_9d14 = load i32, i32* @r5, align 4
  store i32 %v8_9d14, i32* %r1.global-to-local, align 4
  br label %.thread72

.thread72:                                        ; preds = %dec_label_pc_9d00, %bb245
  store i32 40220, i32* @lr, align 4
  %v3_9d18 = xor i1 %v6_9d08, %v5_9d08
  %v4_9d18 = or i1 %v7_9d08, %v3_9d18
  call void @__pseudo_cond_branch(i1 %v4_9d18, i32 ptrtoint (i32* @global_var_1389c.48 to i32))
  br label %dec_label_pc_9d1c

dec_label_pc_9d1c:                                ; preds = %dec_label_pc_9cf0, %.thread72
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9d20 = load i32, i32* %stack_var_-40, align 4
  %v0_9d24 = load i32, i32* @r5, align 4
  %v2_9d24 = add i32 %v3_9d20, 1
  %v1_9d28 = add i32 %v2_9d24, %v0_9d24
  store i32 %v1_9d28, i32* %r0.global-to-local, align 4
  %v1_9d2c = inttoptr i32 %v1_9d28 to i8*
  %v2_9d2c = call i32 @function_13874(i8* %v1_9d2c)
  store i32 %v2_9d2c, i32* %r0.global-to-local, align 4
  %v1_9d30 = add i32 %v2_9d2c, -255
  %v2_9d30 = icmp ugt i32 %v2_9d2c, 254
  store i1 %v2_9d30, i1* %cpsr_c.global-to-local, align 1
  %v3_9d30 = sub i32 254, %v2_9d2c
  %v4_9d30 = and i32 %v3_9d30, %v2_9d2c
  %v5_9d30 = icmp slt i32 %v4_9d30, 0
  store i1 %v5_9d30, i1* %cpsr_v.global-to-local, align 1
  %v6_9d30 = icmp slt i32 %v1_9d30, 0
  store i1 %v6_9d30, i1* %cpsr_n.global-to-local, align 1
  %v7_9d30 = icmp eq i32 %v2_9d2c, 255
  store i1 %v7_9d30, i1* %cpsr_z.global-to-local, align 1
  %v8_9d34 = icmp sgt i32 %v2_9d2c, 255
  br i1 %v8_9d34, label %dec_label_pc_9884, label %dec_label_pc_9d38

dec_label_pc_9d38:                                ; preds = %dec_label_pc_9d1c
  %v0_9d38 = load i32, i32* %sb.global-to-local, align 4
  %v1_9d3c = add i32 %v0_9d38, 533
  store i32 %v1_9d3c, i32* @r4, align 4
  store i32 %v1_9d3c, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9d48 = call i32 @function_13914(i32 %v1_9d3c, i32 255)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9d50 = load i32, i32* %stack_var_-40, align 4
  %v0_9d54 = load i32, i32* @r5, align 4
  %v2_9d54 = add i32 %v3_9d50, 1
  %v1_9d58 = add i32 %v2_9d54, %v0_9d54
  store i32 %v1_9d58, i32* %r0.global-to-local, align 4
  %v1_9d5c = inttoptr i32 %v1_9d58 to i8*
  %v2_9d5c = call i32 @function_13874(i8* %v1_9d5c)
  store i32 %v2_9d5c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9d60 = icmp slt i32 %v2_9d5c, 0
  store i1 %v1_9d60, i1* %cpsr_n.global-to-local, align 1
  %v2_9d60 = icmp eq i32 %v2_9d5c, 0
  store i1 %v2_9d60, i1* %cpsr_z.global-to-local, align 1
  %tmp246 = icmp slt i32 %v2_9d5c, 1
  br i1 %tmp246, label %dec_label_pc_9884, label %dec_label_pc_9d68

dec_label_pc_9d68:                                ; preds = %dec_label_pc_9d38
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9d6c = load i32, i32* %stack_var_-40, align 4
  %v0_9d70 = load i32, i32* @r5, align 4
  %v0_9d74 = load i32, i32* @r4, align 4
  store i32 %v0_9d74, i32* @r0, align 4
  %v2_9d70 = add i32 %v3_9d6c, 1
  %v1_9d78 = add i32 %v2_9d70, %v0_9d70
  store i32 %v1_9d78, i32* %r1.global-to-local, align 4
  %v2_9d7c = inttoptr i32 %v0_9d74 to i8*
  %v3_9d7c = call i32 @function_1389c(i8* %v2_9d7c, i32 %v1_9d78)
  store i32 %v3_9d7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9884

dec_label_pc_9d84:                                ; preds = %dec_label_pc_95ec
  %v0_9d84 = load i32, i32* @r4, align 4
  %v1_9d84 = trunc i32 %v0_9d84 to i8
  %v2_9d84 = load i32, i32* @r8, align 4
  %v3_9d84 = add i32 %v2_9d84, -1452
  %v4_9d84 = inttoptr i32 %v3_9d84 to i8*
  store i8 %v1_9d84, i8* %v4_9d84, align 1
  br label %dec_label_pc_8838

dec_label_pc_9d8c:                                ; preds = %dec_label_pc_9804
  %v1_9d8c = add i32 %v0_9d8c, 1
  store i32 %v1_9d8c, i32* %ip.global-to-local, align 4
  %v2_9d90 = add i32 %v0_9804, %v1_9d8c
  store i32 %v2_9d90, i32* %r4.global-to-local, align 4
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 %v2_9d90, i32* %r0.global-to-local, align 4
  store i32 %v1_9d8c, i32* %stack_var_-40, align 4
  %v1_9da0 = inttoptr i32 %v2_9d90 to i8*
  %v2_9da0 = call i32 @function_13874(i8* %v1_9da0)
  store i32 %v2_9da0, i32* %r0.global-to-local, align 4
  %v0_9da4 = load i32, i32* %r4.global-to-local, align 4
  %v2_9da4 = add i32 %v0_9da4, %v2_9da0
  store i32 %v2_9da4, i32* @r4, align 4
  %v1_9da8 = add i32 %v2_9da4, -1
  %v2_9da8 = inttoptr i32 %v1_9da8 to i8*
  %v3_9da8 = load i8, i8* %v2_9da8, align 1
  %v4_9da8 = zext i8 %v3_9da8 to i32
  store i32 %v4_9da8, i32* %r3.global-to-local, align 4
  %v2_9dac = icmp ugt i8 %v3_9da8, 33
  store i1 %v2_9dac, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9dac = icmp ult i8 %v3_9da8, 34
  store i1 %v6_9dac, i1* %cpsr_n.global-to-local, align 1
  %v7_9dac = icmp eq i8 %v3_9da8, 34
  store i1 %v7_9dac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9dac, label %dec_label_pc_9db4, label %dec_label_pc_9810

dec_label_pc_9db4:                                ; preds = %dec_label_pc_9d8c
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9db8 = load i32, i32* %stack_var_-40, align 4
  %v0_9dbc = load i32, i32* @r6, align 4
  %v2_9dbc = add i32 %v0_9dbc, %v3_9db8
  store i32 %v2_9dbc, i32* %r4.global-to-local, align 4
  store i32 %v2_9dbc, i32* %r0.global-to-local, align 4
  %v1_9dc4 = inttoptr i32 %v2_9dbc to i8*
  %v2_9dc4 = call i32 @function_13874(i8* %v1_9dc4)
  store i32 %v2_9dc4, i32* %r0.global-to-local, align 4
  %v2_9dc8 = add i32 %v2_9dbc, %v2_9dc4
  store i32 %v2_9dc8, i32* @r4, align 4
  %v0_9dcc = load i32, i32* @r5, align 4
  %v1_9dcc = trunc i32 %v0_9dcc to i8
  %v3_9dcc = add i32 %v2_9dc8, -1
  %v4_9dcc = inttoptr i32 %v3_9dcc to i8*
  store i8 %v1_9dcc, i8* %v4_9dcc, align 1
  br label %dec_label_pc_9810

dec_label_pc_9dd4:                                ; preds = %dec_label_pc_9ccc, %bb243
  %v2_9dd8 = phi i32 [ %v1_9cbc, %bb243 ], [ %v2_9cdc, %dec_label_pc_9ccc ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_9dd8 = inttoptr i32 %v2_9dd8 to i8*
  store i8 0, i8* %v3_9dd8, align 1
  br label %dec_label_pc_9cf0

dec_label_pc_9de0:                                ; preds = %dec_label_pc_9878
  store i32 %v10_82f0, i32* %ip.global-to-local, align 4
  %v3_9de4 = load i32, i32* %stack_var_-40, align 4
  %v0_9de8 = load i32, i32* @r5, align 4
  %v2_9de8 = add i32 %v3_9de4, 1
  %v1_9dec = add i32 %v2_9de8, %v0_9de8
  store i32 %v1_9dec, i32* %r0.global-to-local, align 4
  %v1_9df0 = inttoptr i32 %v1_9dec to i8*
  %v2_9df0 = call i32 @function_13874(i8* %v1_9df0)
  store i32 %v2_9df0, i32* %r0.global-to-local, align 4
  %v1_9df4 = add i32 %v2_9df0, -255
  %v2_9df4 = icmp ugt i32 %v2_9df0, 254
  store i1 %v2_9df4, i1* %cpsr_c.global-to-local, align 1
  %v3_9df4 = sub i32 254, %v2_9df0
  %v4_9df4 = and i32 %v3_9df4, %v2_9df0
  %v5_9df4 = icmp slt i32 %v4_9df4, 0
  store i1 %v5_9df4, i1* %cpsr_v.global-to-local, align 1
  %v6_9df4 = icmp slt i32 %v1_9df4, 0
  store i1 %v6_9df4, i1* %cpsr_n.global-to-local, align 1
  %v7_9df4 = icmp eq i32 %v2_9df0, 255
  store i1 %v7_9df4, i1* %cpsr_z.global-to-local, align 1
  %v8_9df8 = icmp sgt i32 %v2_9df0, 255
  br i1 %v8_9df8, label %dec_label_pc_9884, label %dec_label_pc_9dfc

dec_label_pc_9dfc:                                ; preds = %dec_label_pc_9de0
  %v0_9dfc = load i32, i32* %sb.global-to-local, align 4
  %v1_9e00 = add i32 %v0_9dfc, 533
  store i32 %v1_9e00, i32* @r4, align 4
  store i32 %v1_9e00, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9e0c = call i32 @function_13914(i32 %v1_9e00, i32 255)
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_9e14 = load i32, i32* %stack_var_-40, align 4
  %v0_9e18 = load i32, i32* @r5, align 4
  %v2_9e18 = add i32 %v3_9e14, 1
  %v1_9e1c = add i32 %v2_9e18, %v0_9e18
  store i32 %v1_9e1c, i32* %r0.global-to-local, align 4
  %v1_9e20 = inttoptr i32 %v1_9e1c to i8*
  %v2_9e20 = call i32 @function_13874(i8* %v1_9e20)
  store i32 %v2_9e20, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9e24 = icmp slt i32 %v2_9e20, 0
  store i1 %v1_9e24, i1* %cpsr_n.global-to-local, align 1
  %v2_9e24 = icmp eq i32 %v2_9e20, 0
  store i1 %v2_9e24, i1* %cpsr_z.global-to-local, align 1
  %tmp247 = icmp slt i32 %v2_9e20, 1
  br i1 %tmp247, label %dec_label_pc_9884, label %dec_label_pc_9e2c

dec_label_pc_9e2c:                                ; preds = %dec_label_pc_9dfc
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9e30 = load i32, i32* %stack_var_-40, align 4
  %v0_9e34 = load i32, i32* @r5, align 4
  %v0_9e38 = load i32, i32* @r4, align 4
  store i32 %v0_9e38, i32* @r0, align 4
  %v2_9e34 = add i32 %v3_9e30, 1
  %v1_9e3c = add i32 %v2_9e34, %v0_9e34
  store i32 %v1_9e3c, i32* %r1.global-to-local, align 4
  %v2_9e40 = inttoptr i32 %v0_9e38 to i8*
  %v3_9e40 = call i32 @function_1389c(i8* %v2_9e40, i32 %v1_9e3c)
  store i32 %v3_9e40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9884

dec_label_pc_9e48:                                ; preds = %dec_label_pc_84c8
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9e4c = call i32 @function_12f50(i32 51)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 51, i32* %r0.global-to-local, align 4
  %v3_9e58 = call i32 @function_12e6c(i32 51, i32* null)
  store i32 %v3_9e58, i32* %r1.global-to-local, align 4
  %v0_9e60 = load i32, i32* @r5, align 4
  %v1_9e60 = add i32 %v0_9e60, 20
  store i32 %v1_9e60, i32* @r0, align 4
  %v2_9e64 = inttoptr i32 %v1_9e60 to i8*
  %v3_9e64 = call i32 @function_1389c(i8* %v2_9e64, i32 %v3_9e58)
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9e6c = call i32 @function_12e98(i32 51)
  store i32 %v1_9e6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9e70:                                ; preds = %dec_label_pc_84c8, %dec_label_pc_9f58, %dec_label_pc_9f2c, %dec_label_pc_9f00, %dec_label_pc_9ed4, %dec_label_pc_9e48
  %v0_9e70 = load i32, i32* @sl, align 4
  store i32 %v0_9e70, i32* %r1.global-to-local, align 4
  store i32 %v0_840c, i32* @r0, align 4
  %v2_9e78 = inttoptr i32 %v0_840c to i8*
  %v3_9e78 = call i32 @function_1389c(i8* %v2_9e78, i32 %v0_9e70)
  store i32 %v3_9e78, i32* %r0.global-to-local, align 4
  store i32 %v0_839c, i32* %r1.global-to-local, align 4
  %v0_9e80 = load i32, i32* @r7, align 4
  %v1_9e80 = add i32 %v0_9e80, 1
  store i32 %v1_9e80, i32* @r7, align 4
  %v0_9e84 = load i32, i32* @r5, align 4
  %v2_9e88 = sub i32 %v0_839c, %v1_9e80
  %v3_9e88 = icmp uge i32 %v0_839c, %v1_9e80
  store i1 %v3_9e88, i1* %cpsr_c.global-to-local, align 1
  %v4_9e88 = xor i32 %v1_9e80, %v0_839c
  %v5_9e88 = xor i32 %v2_9e88, %v0_839c
  %v6_9e88 = and i32 %v5_9e88, %v4_9e88
  %v7_9e88 = icmp slt i32 %v6_9e88, 0
  store i1 %v7_9e88, i1* %cpsr_v.global-to-local, align 1
  %v8_9e88 = icmp slt i32 %v2_9e88, 0
  store i1 %v8_9e88, i1* %cpsr_n.global-to-local, align 1
  %v9_9e88 = icmp eq i32 %v0_839c, %v1_9e80
  store i1 %v9_9e88, i1* %cpsr_z.global-to-local, align 1
  %v1_9e8c = add i32 %v0_9e84, 3140
  store i32 %v1_9e8c, i32* @r5, align 4
  br i1 %v9_9e88, label %dec_label_pc_9e94, label %dec_label_pc_83cc

dec_label_pc_9e94:                                ; preds = %dec_label_pc_9e70
  %v1_9ea0 = add i32 %v2_83b0, 1456
  %v0_9ea8 = load i32, i32* %r8.global-to-local, align 4
  %v1_9ea8 = urem i32 %v0_9ea8, 256
  store i32 %v1_9ea8, i32* %ip.global-to-local, align 4
  %v1_9eac = add i32 %v2_83b0, 1464
  store i32 %v1_9eac, i32* %r2.global-to-local, align 4
  %v2_9eb0 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_9eb0, i32* %r3.global-to-local, align 4
  store i32 %v1_9ea0, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8528.preheader

dec_label_pc_9ed4:                                ; preds = %dec_label_pc_84c8
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_9ed8 = call i32 @function_12f50(i32 47)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v3_9ee4 = call i32 @function_12e6c(i32 47, i32* null)
  store i32 %v3_9ee4, i32* %r1.global-to-local, align 4
  %v0_9eec = load i32, i32* @r5, align 4
  %v1_9eec = add i32 %v0_9eec, 20
  store i32 %v1_9eec, i32* @r0, align 4
  %v2_9ef0 = inttoptr i32 %v1_9eec to i8*
  %v3_9ef0 = call i32 @function_1389c(i8* %v2_9ef0, i32 %v3_9ee4)
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_9ef8 = call i32 @function_12e98(i32 47)
  store i32 %v1_9ef8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f00:                                ; preds = %dec_label_pc_84c8
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_9f04 = call i32 @function_12f50(i32 48)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 48, i32* %r0.global-to-local, align 4
  %v3_9f10 = call i32 @function_12e6c(i32 48, i32* null)
  store i32 %v3_9f10, i32* %r1.global-to-local, align 4
  %v0_9f18 = load i32, i32* @r5, align 4
  %v1_9f18 = add i32 %v0_9f18, 20
  store i32 %v1_9f18, i32* @r0, align 4
  %v2_9f1c = inttoptr i32 %v1_9f18 to i8*
  %v3_9f1c = call i32 @function_1389c(i8* %v2_9f1c, i32 %v3_9f10)
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_9f24 = call i32 @function_12e98(i32 48)
  store i32 %v1_9f24, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f2c:                                ; preds = %dec_label_pc_84c8
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_9f30 = call i32 @function_12f50(i32 49)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 49, i32* %r0.global-to-local, align 4
  %v3_9f3c = call i32 @function_12e6c(i32 49, i32* null)
  store i32 %v3_9f3c, i32* %r1.global-to-local, align 4
  %v0_9f44 = load i32, i32* @r5, align 4
  %v1_9f44 = add i32 %v0_9f44, 20
  store i32 %v1_9f44, i32* @r0, align 4
  %v2_9f48 = inttoptr i32 %v1_9f44 to i8*
  %v3_9f48 = call i32 @function_1389c(i8* %v2_9f48, i32 %v3_9f3c)
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_9f50 = call i32 @function_12e98(i32 49)
  store i32 %v1_9f50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f58:                                ; preds = %dec_label_pc_84c8
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_9f5c = call i32 @function_12f50(i32 50)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 50, i32* %r0.global-to-local, align 4
  %v3_9f68 = call i32 @function_12e6c(i32 50, i32* null)
  store i32 %v3_9f68, i32* %r1.global-to-local, align 4
  %v0_9f70 = load i32, i32* @r5, align 4
  %v1_9f70 = add i32 %v0_9f70, 20
  store i32 %v1_9f70, i32* @r0, align 4
  %v2_9f74 = inttoptr i32 %v1_9f70 to i8*
  %v3_9f74 = call i32 @function_1389c(i8* %v2_9f74, i32 %v3_9f68)
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_9f7c = call i32 @function_12e98(i32 50)
  store i32 %v1_9f7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

; uselistorder directives
  uselistorder i32 %v2_9eb0, { 1, 0 }
  uselistorder i32 %v1_9eac, { 1, 0 }
  uselistorder i32 %v1_9ea0, { 1, 0 }
  uselistorder i32 %v1_9e8c, { 1, 0 }
  uselistorder i32 %v2_9e88, { 1, 0 }
  uselistorder i32 %v1_9e80, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_9df0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9d8c, { 1, 0, 2 }
  uselistorder i32 %v2_9d2c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_9d04, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9ce8, { 1, 0 }
  uselistorder i8 %v4_9cdc, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v1_9ce4, { 1, 0, 2 }
  uselistorder i1 %v7_9ccc, { 1, 0 }
  uselistorder i32 %v1_9cbc, { 1, 0, 2 }
  uselistorder i1 %v7_9cb8, { 1, 0 }
  uselistorder i1 %v9_9cb0, { 1, 0 }
  uselistorder i32 %v2_9c90, { 1, 0 }
  uselistorder i32 %v0_9c74, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9c10, { 1, 0, 2 }
  uselistorder i32 %v1_9c08, { 1, 0, 2 }
  uselistorder i32 %v2_9bc0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_9b94, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v3_9b18, { 5, 1, 0, 4, 3, 2, 6 }
  uselistorder i32 %v2_9afc, { 1, 0, 2 }
  uselistorder i32 %v4_9af4, { 2, 1, 0, 3 }
  uselistorder i32 %v2_9abc, { 1, 0 }
  uselistorder i32 %v1_9abc, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_9abc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_9a24, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_99fc, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_99dc, { 1, 0 }
  uselistorder i8 %v4_99d4, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v0_99dc, { 1, 0, 3, 2 }
  uselistorder i1 %v7_99c0, { 1, 0 }
  uselistorder i32 %v1_99b0, { 1, 0, 2 }
  uselistorder i1 %v7_99ac, { 1, 0 }
  uselistorder i32 %v0_996c, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9950, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v5_986c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9840, { 1, 0 }
  uselistorder i32 %v1_9840, { 2, 0, 1, 3 }
  uselistorder i32 %v2_983c, { 3, 0, 1, 4, 2 }
  uselistorder i32 %v1_981c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9804, { 1, 0 }
  uselistorder i32 %v0_9d8c, { 1, 0 }
  uselistorder i32 %v1_97c0, { 1, 2, 0 }
  uselistorder i32 %v5_97bc, { 0, 2, 1, 3 }
  uselistorder i32 %v0_97a8, { 1, 0 }
  uselistorder i32 %v2_979c, { 1, 0, 2 }
  uselistorder i32 %v1_9760, { 0, 2, 1 }
  uselistorder i32 %v1_9750, { 1, 0, 3, 4, 2 }
  uselistorder i32 %v1_973c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_96f8, { 1, 2, 0 }
  uselistorder i32 %v5_96f4, { 1, 8, 2, 3, 6, 7, 5, 4, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_96dc.v4_96bc, { 1, 0, 2 }
  uselistorder i32 %v1_9698, { 1, 2, 0 }
  uselistorder i32 %v4_9690, { 0, 2, 1, 3 }
  uselistorder i32 %v2_9650, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9648, { 1, 2, 0 }
  uselistorder i32 %v5_963c, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v1_95c8, { 1, 2, 0 }
  uselistorder i32 %v4_95c4, { 0, 2, 1, 3 }
  uselistorder i32 %v5_95a4, { 1, 2, 3, 0 }
  uselistorder i32 %v1_958c, { 1, 2, 0 }
  uselistorder i32 %v5_9588, { 0, 2, 1, 3 }
  uselistorder i32 %v3_9570, { 1, 0 }
  uselistorder i32 %v2_9568, { 1, 2, 0 }
  uselistorder i32 %v4_9564, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9528, { 2, 1, 0 }
  uselistorder i32 %v3_951c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v3_94fc, { 4, 5, 6, 7, 3, 1, 2, 0 }
  uselistorder i32* %v2_94fc, { 1, 0 }
  uselistorder i32 %v0_94fc, { 1, 0 }
  uselistorder i32 %v3_94e4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_94d8, { 1, 2, 0 }
  uselistorder i32 %v0_94c0, { 0, 2, 1 }
  uselistorder i32 %v3_94a0, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %storemerge73, { 1, 0 }
  uselistorder i32 %v3_9478, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %v1_9458, { 1, 2, 0 }
  uselistorder i32 %v5_944c, { 1, 0, 3, 2, 4, 5, 6 }
  uselistorder i32 %v3_9418, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_9410, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i32 %v5_93e4, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_93c4, { 1, 0, 2 }
  uselistorder i32 %v1_93a0, { 1, 2, 0 }
  uselistorder i32 %v5_939c, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_9384.v4_9364, { 1, 0, 2 }
  uselistorder i32 %v1_9344, { 1, 2, 0 }
  uselistorder i32 %v4_9340, { 0, 2, 1, 3 }
  uselistorder i32 %v2_92f0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v0_92ec, { 1, 0 }
  uselistorder i32 %v0_92d4, { 1, 0 }
  uselistorder i32 %v0_92d8, { 1, 0 }
  uselistorder i32 %v2_92b4, { 1, 0 }
  uselistorder i32 %v1_92b0, { 3, 4, 2, 1, 6, 0, 7, 5, 8 }
  uselistorder i32 %v3_92ac, { 2, 4, 0, 1, 5, 3 }
  uselistorder i32 %v0_927c, { 1, 0 }
  uselistorder i1 %v7_9244, { 0, 2, 1 }
  uselistorder i32 %v1_9268, { 1, 0 }
  uselistorder i32 %v2_9264, { 1, 0 }
  uselistorder i32 %v3_9260, { 0, 1, 4, 3, 6, 2, 7, 5, 8 }
  uselistorder i32 %v2_9258, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v0_9254, { 1, 0 }
  uselistorder i32 %v1_91c4, { 1, 2, 0 }
  uselistorder i32 %v5_91c0, { 7, 6, 1, 4, 5, 3, 2, 8, 0, 10, 9, 11 }
  uselistorder i32 %v2_91a8, { 1, 0, 2 }
  uselistorder i32 %v2_91a4, { 1, 0, 2 }
  uselistorder i32 %v0_9188, { 0, 2, 1 }
  uselistorder i32 %v4_9180, { 1, 2, 0, 3 }
  uselistorder i32 %v3_915c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9150, { 1, 2, 0 }
  uselistorder i32 %v4_9148, { 0, 2, 1, 3 }
  uselistorder i32 %v1_90e4, { 1, 2, 0 }
  uselistorder i32 %v5_90e0, { 1, 2, 9, 4, 7, 8, 6, 5, 3, 0, 11, 10, 12 }
  uselistorder i32 %v2_90c8.v4_90a8, { 1, 0, 2 }
  uselistorder i32 %v1_9078, { 1, 2, 0 }
  uselistorder i32 %v4_9074, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8ffc, { 1, 2, 0 }
  uselistorder i32 %v5_8ff8, { 1, 3, 9, 4, 7, 8, 6, 5, 2, 0, 11, 10, 12 }
  uselistorder i32 %v2_8fe0.v4_8fc0, { 1, 0, 2 }
  uselistorder i32 %v1_8f9c, { 1, 2, 0 }
  uselistorder i32 %v4_8f94, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8f14, { 1, 2, 0 }
  uselistorder i32 %v5_8f10, { 1, 2, 9, 4, 7, 8, 6, 5, 3, 0, 11, 10, 12 }
  uselistorder i32 %v2_8ef8.v4_8ed8, { 1, 0, 2 }
  uselistorder i32 %v1_8eb8, { 1, 2, 0 }
  uselistorder i32 %v4_8eb4, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8e8c, { 1, 2, 0 }
  uselistorder i32 %v4_8e88, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8e64, { 1, 2, 0 }
  uselistorder i32 %v4_8e60, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9914, { 3, 7, 0, 4, 5, 6, 1, 2 }
  uselistorder i32 %v1_8e18, { 1, 2, 0 }
  uselistorder i32 %v5_8e14, { 0, 2, 1, 3 }
  uselistorder i32 %v5_8df0, { 2, 1, 0, 3, 4, 5, 6 }
  uselistorder i32 %v3_8d78, { 0, 2, 1 }
  uselistorder i32 %v2_8d6c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_8d60, { 1, 0 }
  uselistorder i32 %v2_8d54, { 1, 0 }
  uselistorder i32 %v0_8d54, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8d4c, { 1, 0 }
  uselistorder i32 %v1_8d54, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_8d30, { 1, 0, 2 }
  uselistorder i32 %v1_8d28, { 1, 0 }
  uselistorder i32 %v2_8d10, { 1, 0 }
  uselistorder i32 %v0_8d10, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_8cec, { 4, 2, 5, 3, 1, 0, 6 }
  uselistorder i32 %v2_8c54, { 1, 0 }
  uselistorder i32 %v1_8c50, { 2, 1, 4, 0, 5, 3, 6 }
  uselistorder i32 %v3_8c4c, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v2_8af4, { 1, 0 }
  uselistorder i32 %v1_8af4, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8880, { 2, 1, 0 }
  uselistorder i32 %v3_887c, { 1, 0 }
  uselistorder i32 %v1_885c, { 1, 2, 0 }
  uselistorder i32 %v3_8858, { 4, 1, 0, 2, 6, 5, 7, 3 }
  uselistorder i32 %v2_8848, { 1, 0 }
  uselistorder i32 %v1_8840, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i1 %v7_8830, { 1, 0 }
  uselistorder i1 %v7_8828, { 1, 0 }
  uselistorder i32 %v1_880c, { 2, 1, 0 }
  uselistorder i32 %v3_8808, { 1, 0 }
  uselistorder i32 %v0_880c, { 1, 0 }
  uselistorder i32 %v2_87dc, { 1, 0 }
  uselistorder i32 %v1_87dc, { 1, 2, 4, 0, 3, 5 }
  uselistorder i32 %v0_87dc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_87d8, { 0, 2, 1, 3 }
  uselistorder i32 %v0_87c4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8784, { 1, 0 }
  uselistorder i32 %v2_877c, { 1, 0 }
  uselistorder i32 %v1_8770, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_875c, { 1, 0 }
  uselistorder i32 %v0_875c, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8754, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v1_875c, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_8744, { 1, 0 }
  uselistorder i32 %v3_8738, { 1, 0, 2 }
  uselistorder i32 %v0_86f4, { 1, 0, 2 }
  uselistorder i32 %v1_8698, { 1, 2, 0 }
  uselistorder i32 %v3_8694, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v1_8670, { 1, 2, 0 }
  uselistorder i32 %v3_8664, { 0, 2, 1, 3 }
  uselistorder i32 %v4_8650, { 1, 0 }
  uselistorder i8 %v3_8650, { 16, 17, 18, 19, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %v2_8650, { 2, 0, 3, 1 }
  uselistorder i32 %v3_8900, { 3, 4, 5, 1, 2, 0, 8, 7, 6 }
  uselistorder i32 %v2_8640, { 1, 0 }
  uselistorder i32 %v1_8634, { 2, 0, 3, 1, 4 }
  uselistorder i1 %v7_8610, { 1, 0 }
  uselistorder i32 %v1_8610, { 1, 0 }
  uselistorder i1 %v7_8608, { 1, 0 }
  uselistorder i32 %v4_85ec, { 1, 0, 2 }
  uselistorder i1 %v7_85e8, { 1, 0 }
  uselistorder i32 %v4_85cc, { 1, 0, 2 }
  uselistorder i1 %v7_85c8, { 1, 0 }
  uselistorder i1 %v7_85c0, { 1, 0 }
  uselistorder i1 %v7_85b8, { 1, 0 }
  uselistorder i32 %v2_85dc, { 1, 0, 2, 3 }
  uselistorder i32 %v3_8594248, { 1, 0 }
  uselistorder i32 %v5_8590, { 1, 0 }
  uselistorder i8* %v1_8940, { 11, 10, 12, 8, 6, 7, 9, 0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %v2_8748, { 0, 21, 1, 20, 2, 23, 3, 22, 25, 4, 24, 5, 27, 6, 26, 7, 29, 8, 28, 9, 31, 10, 30, 11, 19, 34, 12, 33, 13, 35, 14, 17, 15, 18, 16, 36, 32 }
  uselistorder i32 %v2_86d0, { 1, 0 }
  uselistorder i32 %v3_9eb8, { 0, 2, 3, 1 }
  uselistorder i32 %stack_var_-20856.0.ph, { 59, 57, 0, 61, 60, 1, 56, 55, 2, 64, 3, 68, 67, 4, 66, 65, 5, 63, 62, 6, 79, 78, 7, 77, 8, 76, 75, 9, 74, 73, 10, 72, 71, 11, 70, 69, 12, 54, 53, 13, 52, 51, 14, 50, 49, 15, 48, 47, 16, 46, 17, 45, 44, 18, 43, 42, 19, 41, 40, 20, 39, 38, 21, 37, 22, 36, 35, 23, 34, 33, 24, 32, 31, 25, 30, 29, 26, 27, 58, 28 }
  uselistorder i32 %stack_var_-20872.0.ph, { 2, 1, 0 }
  uselistorder i32 %stack_var_-20860.0.ph, { 1, 0 }
  uselistorder i32 %v1_8500, { 1, 0 }
  uselistorder i32 %v0_8500, { 1, 0 }
  uselistorder i32 %v2_84d0, { 2, 1, 3, 0, 5, 4, 6 }
  uselistorder i32 %v2_84c0, { 1, 0 }
  uselistorder i32 %v8_84a4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_8484, { 2, 0, 1, 3 }
  uselistorder i32 %v0_840c, { 5, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_83b0, { 2, 1, 4, 3, 0, 5, 6 }
  uselistorder i32 %v0_839c, { 14, 0, 1, 15, 13, 28, 24, 2, 25, 23, 26, 11, 3, 4, 12, 10, 27, 8, 5, 6, 9, 7, 22, 21, 29, 18, 19, 20, 17, 16 }
  uselistorder i32 %v0_8390, { 1, 2, 6, 0, 3, 4, 5 }
  uselistorder i1 %v2_8320, { 1, 0, 2 }
  uselistorder i32 %v1_831c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_830c, { 1, 0 }
  uselistorder i32 %v3_8308, { 0, 2, 4, 1, 5, 3, 6 }
  uselistorder i32 %v2_8300, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32* %v11_82f4, { 1, 0, 2 }
  uselistorder i32 %v10_82f0, { 21, 20, 19, 11, 10, 17, 16, 15, 18, 14, 13, 34, 33, 32, 30, 29, 28, 31, 27, 26, 25, 12, 23, 22, 9, 8, 24, 7, 39, 38, 37, 36, 35, 44, 43, 42, 41, 40, 6, 5, 4, 3, 2, 1, 0, 45, 46 }
  uselistorder i32 %v2_82e8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_82d8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_82c8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v1_82a8, { 1, 0 }
  uselistorder i32 %v0_82a4, { 1, 0, 3, 2 }
  uselistorder i8* %tmp199, { 5, 6, 4, 7, 3, 8, 2, 9, 1, 10, 11, 12, 0 }
  uselistorder i32 %v2_8280, { 0, 16, 22, 23, 24, 1, 19, 2, 20, 21, 25, 10, 3, 15, 4, 17, 18, 26, 5, 14, 6, 27, 7, 13, 28, 8, 12, 29, 9, 11, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i32 %v5_8278, { 1, 0 }
  uselistorder i32 %v6_8200, { 5, 4, 6, 2, 11, 0, 1, 10, 12, 9, 3, 8, 7, 13 }
  uselistorder i32 %v1_81e4, { 2, 1, 0 }
  uselistorder i32 %v1_81d8, { 1, 2, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-20809, { 0, 2, 1, 3, 4 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0, 37, 38, 39, 40, 1, 41, 44, 42, 43 }
  uselistorder i32* %stack_var_-72, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2, 3 }
  uselistorder i32* %sb.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 10, 13, 11, 12, 17, 18, 16, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 4, 3, 5, 8, 6, 7 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 8, 5, 6, 7, 9, 12, 10, 11, 0 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 150, 43, 44, 45, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 46, 47, 48, 49, 50, 51, 53, 52, 54, 55, 56, 57, 58, 59, 61, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 146, 147, 148, 149, 97, 98, 99, 100, 104, 101, 102, 103, 105, 106, 109, 110, 107, 108, 111, 113, 112, 114, 115, 116, 117, 118, 123, 119, 120, 121, 122, 124, 126, 125, 3, 128, 127, 2, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 164, 145, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 102, 103, 104, 105, 106, 107, 108, 109, 110, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 99, 100, 101, 66, 67, 68, 69, 70, 73, 74, 71, 72, 75, 76, 77, 78, 79, 80, 81, 83, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 42, 25, 12, 13, 14, 15, 17, 16, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 43, 44, 45, 9, 46, 158, 159, 160, 163, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 151, 152, 153, 154, 155, 156, 157, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 117, 119, 120, 122, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 149, 0 }
  uselistorder i32* %r0.global-to-local, { 21, 20, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 207, 37, 143, 35, 77, 43, 38, 40, 39, 41, 44, 42, 46, 45, 48, 47, 49, 51, 50, 52, 55, 53, 54, 57, 56, 60, 58, 59, 61, 62, 63, 65, 64, 66, 67, 68, 70, 69, 71, 73, 72, 75, 74, 76, 79, 78, 81, 80, 82, 84, 83, 86, 85, 87, 89, 88, 90, 93, 91, 92, 95, 94, 98, 96, 97, 99, 101, 100, 103, 102, 105, 104, 106, 108, 107, 109, 111, 110, 112, 113, 114, 6, 116, 115, 118, 117, 119, 121, 120, 122, 123, 124, 329, 328, 331, 330, 332, 16, 333, 334, 15, 335, 14, 336, 13, 12, 11, 337, 338, 339, 341, 340, 342, 344, 343, 10, 345, 346, 347, 125, 127, 126, 128, 130, 129, 132, 131, 134, 133, 135, 137, 136, 138, 139, 141, 140, 18, 142, 145, 144, 147, 146, 149, 148, 152, 150, 151, 154, 153, 155, 157, 156, 158, 160, 159, 162, 161, 164, 163, 165, 167, 166, 168, 170, 169, 171, 172, 174, 173, 176, 175, 177, 179, 178, 180, 182, 181, 183, 184, 186, 185, 188, 187, 189, 191, 190, 192, 194, 193, 195, 197, 196, 198, 199, 201, 200, 203, 202, 210, 204, 205, 274, 206, 208, 209, 19, 211, 212, 4, 213, 214, 215, 216, 217, 218, 219, 221, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 255, 257, 258, 259, 260, 262, 261, 263, 264, 265, 5, 266, 1, 267, 269, 268, 2, 3, 271, 270, 279, 272, 273, 275, 277, 276, 278, 17, 280, 36, 282, 281, 9, 283, 284, 285, 286, 8, 287, 7, 288, 289, 291, 290, 293, 292, 294, 295, 296, 298, 297, 299, 300, 302, 301, 304, 303, 306, 305, 308, 307, 310, 309, 311, 312, 313, 314, 315, 316, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 31, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 30, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 0, 29 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 55, 56, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 53, 54, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 0, 46, 47, 48, 49, 50, 51, 52 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 6, 3, 2, 8, 26, 27, 28, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 7, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 51, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 139, 140, 97, 99, 98, 100, 101, 102, 107, 109, 108, 103, 104, 105, 106, 110, 111, 112, 113, 114, 115, 123, 124, 116, 117, 118, 119, 120, 121, 122, 125, 0, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138 }
  uselistorder i1* %cpsr_v.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 50, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 132, 133, 97, 98, 103, 102, 99, 100, 101, 104, 105, 106, 107, 108, 109, 117, 118, 110, 111, 112, 113, 114, 115, 116, 119, 0, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131 }
  uselistorder i1* %cpsr_n.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 50, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 135, 136, 97, 98, 99, 104, 106, 105, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 120, 121, 113, 114, 115, 116, 117, 118, 119, 122, 0, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 52, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 149, 150, 151, 102, 103, 108, 110, 109, 104, 105, 106, 107, 111, 112, 113, 114, 115, 116, 117, 127, 128, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 0, 134, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148 }
  uselistorder i32 ptrtoint (i32* @global_var_16b38.50 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_16b28.45 to i32), { 0, 2, 1, 3 }
  uselistorder i32 2116, { 1, 2, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_16b20.43 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_16b1c.41 to i32), { 1, 4, 0, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_16b14.39 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_16af4.27 to i32), { 0, 2, 1, 3 }
  uselistorder i32 20556, { 1, 0 }
  uselistorder i32 20684, { 2, 0, 1 }
  uselistorder i32 -20773, { 0, 4, 11, 5, 1, 7, 6, 2, 8, 3, 9, 10 }
  uselistorder i32 1464, { 1, 0 }
  uselistorder i32 533, { 1, 0, 3, 2, 4 }
  uselistorder i32 3140, { 5, 2, 0, 1, 3, 4, 6, 7 }
  uselistorder i32 43, { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([4 x i8]* @global_var_16afc.21 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %arg4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9e70, { 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_9d1c, { 1, 0 }
  uselistorder label %.thread72, { 1, 0 }
  uselistorder label %dec_label_pc_9cf0, { 2, 0, 1 }
  uselistorder label %.thread69, { 1, 0 }
  uselistorder label %dec_label_pc_9b34, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9a14, { 1, 0 }
  uselistorder label %.thread66, { 1, 0 }
  uselistorder label %dec_label_pc_99e8, { 2, 0, 1 }
  uselistorder label %.thread63, { 1, 0 }
  uselistorder label %dec_label_pc_9884, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder label %dec_label_pc_9838, { 1, 0 }
  uselistorder label %dec_label_pc_9810, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9804, { 1, 0 }
  uselistorder label %bb234, { 1, 0 }
  uselistorder label %bb232, { 1, 0 }
  uselistorder label %dec_label_pc_965c, { 1, 0 }
  uselistorder label %dec_label_pc_95ec, { 1, 0 }
  uselistorder label %dec_label_pc_94c0, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_9498, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9430, { 1, 2, 0 }
  uselistorder label %dec_label_pc_9400, { 7, 2, 3, 1, 8, 4, 5, 0, 6 }
  uselistorder label %bb230, { 1, 0 }
  uselistorder label %dec_label_pc_9284, { 1, 0 }
  uselistorder label %dec_label_pc_927c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9254, { 1, 0 }
  uselistorder label %dec_label_pc_9214, { 1, 0 }
  uselistorder label %bb226, { 1, 0 }
  uselistorder label %bb224, { 1, 0 }
  uselistorder label %bb222, { 1, 0 }
  uselistorder label %dec_label_pc_9124, { 2, 1, 0 }
  uselistorder label %bb220, { 1, 0 }
  uselistorder label %.thread48, { 3, 0, 1, 2 }
  uselistorder label %bb217, { 1, 0 }
  uselistorder label %.thread47, { 3, 0, 1, 2 }
  uselistorder label %bb214, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %.thread45, { 1, 0 }
  uselistorder label %dec_label_pc_8e20, { 1, 0 }
  uselistorder label %dec_label_pc_8d48, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8ccc, { 1, 0 }
  uselistorder label %dec_label_pc_8cb4, { 1, 0 }
  uselistorder label %dec_label_pc_8c78, { 1, 0 }
  uselistorder label %dec_label_pc_8c04, { 1, 0 }
  uselistorder label %dec_label_pc_8bcc, { 1, 0 }
  uselistorder label %dec_label_pc_890c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_88dc, { 1, 0 }
  uselistorder label %dec_label_pc_8838, { 7, 8, 2, 9, 1, 10, 3, 11, 12, 15, 0, 13, 14, 6, 4, 5 }
  uselistorder label %dec_label_pc_8630, { 4, 1, 0, 2, 3, 5 }
  uselistorder label %dec_label_pc_855c.dec_label_pc_855c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_853c.dec_label_pc_853c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_8528, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_8528.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_84c8, { 1, 0 }
  uselistorder label %dec_label_pc_8444, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb205, { 1, 0 }
  uselistorder label %bb203, { 1, 0 }
  uselistorder label %dec_label_pc_82fc, { 1, 0 }
  uselistorder label %dec_label_pc_82b8, { 1, 3, 4, 0, 2 }
}

define i32 @function_9f84(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9f84:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_9f84 = urem i32 %arg1, 256
  %v2_9f88 = icmp eq i32 %v1_9f84, 0
  %v1_9f90 = urem i32 %arg3, 256
  br i1 %v2_9f88, label %dec_label_pc_9fd4, label %dec_label_pc_9f9c

dec_label_pc_9f9c:                                ; preds = %dec_label_pc_9f84
  %v0_9f9c = load i32, i32* %r1.global-to-local, align 4
  %v1_9f9c = add i32 %v0_9f9c, 4
  %v2_9f9c = inttoptr i32 %v1_9f9c to i8*
  %v3_9f9c = load i8, i8* %v2_9f9c, align 1
  %v4_9f9c = zext i8 %v3_9f9c to i32
  %v9_9fa0 = icmp eq i32 %v4_9f9c, %v1_9f90
  br i1 %v9_9fa0, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4.preheader

dec_label_pc_9fc4.preheader:                      ; preds = %dec_label_pc_9f9c
  br label %dec_label_pc_9fc4

dec_label_pc_9fb4:                                ; preds = %dec_label_pc_9fc4
  %v1_9fb4 = add i32 %v0_9fbc.in, 12
  %v2_9fb4 = inttoptr i32 %v1_9fb4 to i8*
  %v3_9fb4 = load i8, i8* %v2_9fb4, align 1
  %v4_9fb4 = zext i8 %v3_9fb4 to i32
  %v9_9fb8 = icmp eq i32 %v4_9fb4, %v1_9f90
  br i1 %v9_9fb8, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4

dec_label_pc_9fc4:                                ; preds = %dec_label_pc_9fc4.preheader, %dec_label_pc_9fb4
  %v0_9fbc.in = phi i32 [ %v0_9f9c, %dec_label_pc_9fc4.preheader ], [ %v0_9fbc, %dec_label_pc_9fb4 ]
  %v0_9fc4 = phi i32 [ 0, %dec_label_pc_9fc4.preheader ], [ %v1_9fc4, %dec_label_pc_9fb4 ]
  %v0_9fbc = add i32 %v0_9fbc.in, 8
  %v1_9fc4 = add i32 %v0_9fc4, 1
  store i32 %v1_9fc4, i32* @lr, align 4
  %v9_9fc8 = icmp eq i32 %v1_9fc4, %v1_9f84
  store i32 %v0_9fbc, i32* %r1.global-to-local, align 4
  br i1 %v9_9fc8, label %dec_label_pc_9fd4, label %dec_label_pc_9fb4

dec_label_pc_9fd4:                                ; preds = %dec_label_pc_9fc4, %dec_label_pc_9f84
  ret i32 %arg4

dec_label_pc_9fdc:                                ; preds = %dec_label_pc_9fb4, %dec_label_pc_9f9c
  %v0_9fdc = phi i32 [ %v0_9f9c, %dec_label_pc_9f9c ], [ %v0_9fbc, %dec_label_pc_9fb4 ]
  %v1_9fdc = inttoptr i32 %v0_9fdc to i32*
  %v2_9fdc = load i32, i32* %v1_9fdc, align 4
  ret i32 %v2_9fdc

; uselistorder directives
  uselistorder i32 %v1_9fc4, { 1, 2, 0 }
  uselistorder i32 %v0_9fbc, { 1, 0, 2 }
  uselistorder i32 %v0_9fbc.in, { 1, 0 }
  uselistorder i32 %v0_9f9c, { 1, 0, 2 }
  uselistorder i32 %v1_9f90, { 1, 0 }
  uselistorder i32 %v1_9f84, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9fc4, { 1, 0 }
}

define i32 @function_9fe8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_9fe8:
  store i32 %arg1, i32* @r6, align 4
  %v1_9ff4 = urem i32 %arg2, 256
  store i32 %v1_9ff4, i32* @r7, align 4
  %v0_a000 = call i32 @function_14260()
  %v7_a004 = icmp eq i32 %v0_a000, -1
  %tmp23 = icmp slt i32 %v0_a000, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_9fe8
  br label %bb25

bb24:                                             ; preds = %dec_label_pc_9fe8
  %. = zext i1 %v7_a004 to i32
  store i32 %., i32* @r5, align 4
  %v2_a01c = icmp eq i1 %v7_a004, false
  br i1 %v2_a01c, label %bb26, label %bb25

bb25:                                             ; preds = %.thread2, %bb24
  ret i32 %v0_a000

bb26:                                             ; preds = %bb24
  %v0_a024 = call i32 @function_14260()
  %v7_a028 = icmp eq i32 %v0_a024, -1
  store i32 %v0_a024, i32* @r4, align 4
  br i1 %v7_a028, label %dec_label_pc_a058, label %dec_label_pc_a034

dec_label_pc_a034:                                ; preds = %bb26
  %v2_a034 = icmp eq i32 %v0_a024, 0
  br i1 %v2_a034, label %dec_label_pc_a03c, label %dec_label_pc_a060

dec_label_pc_a03c:                                ; preds = %dec_label_pc_a034
  %v0_a03c = load i32, i32* @r6, align 4
  %v1_a040 = call i32 @function_15664(i32 %v0_a03c)
  %v0_a044 = call i32 @function_142b8()
  %v2_a04c = call i32 @function_14334(i32 %v0_a044, i32 9)
  %v0_a050 = load i32, i32* @r4, align 4
  %v1_a054 = call i32 @function_155d0(i32 %v0_a050)
  br label %dec_label_pc_a058

dec_label_pc_a058:                                ; preds = %bb26, %dec_label_pc_a03c
  %v0_a058 = load i32, i32* @r5, align 4
  %v1_a05c = call i32 @function_155d0(i32 %v0_a058)
  br label %dec_label_pc_a060

dec_label_pc_a060:                                ; preds = %dec_label_pc_a034, %dec_label_pc_a058
  %v2_a064 = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a064 = zext i8 %v2_a064 to i32
  %v2_a068 = icmp eq i8 %v2_a064, 0
  br i1 %v2_a068, label %dec_label_pc_a0ac, label %dec_label_pc_a070

dec_label_pc_a070:                                ; preds = %dec_label_pc_a060
  %v2_a074 = load i32, i32* @global_var_1f7a0.56, align 4
  %v1_a078 = inttoptr i32 %v2_a074 to i32*
  %v2_a078 = load i32, i32* %v1_a078, align 4
  store i32 %v2_a078, i32* @ip, align 4
  %v1_a07c = add i32 %v2_a078, 4
  %v2_a07c = inttoptr i32 %v1_a07c to i8*
  %v3_a07c = load i8, i8* %v2_a07c, align 1
  %v4_a07c = zext i8 %v3_a07c to i32
  %v1_a080 = load i32, i32* @r7, align 4
  %v9_a080 = icmp eq i32 %v4_a07c, %v1_a080
  br i1 %v9_a080, label %dec_label_pc_a0b4, label %dec_label_pc_a0a0.preheader

dec_label_pc_a0a0.preheader:                      ; preds = %dec_label_pc_a070
  %v1_a084 = load i32, i32* @r5, align 4
  br label %dec_label_pc_a0a0

dec_label_pc_a090:                                ; preds = %dec_label_pc_a0a0
  %v4_a090 = mul i32 %v1_a0a0, 4
  %v5_a090 = add i32 %v4_a090, %v2_a074
  %v6_a090 = inttoptr i32 %v5_a090 to i32*
  %v7_a090 = load i32, i32* %v6_a090, align 4
  store i32 %v7_a090, i32* @ip, align 4
  %v1_a094 = add i32 %v7_a090, 4
  %v2_a094 = inttoptr i32 %v1_a094 to i8*
  %v3_a094 = load i8, i8* %v2_a094, align 1
  %v4_a094 = zext i8 %v3_a094 to i32
  %v9_a098 = icmp eq i32 %v4_a094, %v1_a080
  br i1 %v9_a098, label %dec_label_pc_a0b4, label %dec_label_pc_a0a0

dec_label_pc_a0a0:                                ; preds = %dec_label_pc_a0a0.preheader, %dec_label_pc_a090
  %v0_a0a0 = phi i32 [ %v1_a084, %dec_label_pc_a0a0.preheader ], [ %v1_a0a0, %dec_label_pc_a090 ]
  %v1_a0a0 = add i32 %v0_a0a0, 1
  %v9_a0a4 = icmp eq i32 %v1_a0a0, %v3_a064
  br i1 %v9_a0a4, label %dec_label_pc_a0ac, label %dec_label_pc_a090

dec_label_pc_a0ac:                                ; preds = %dec_label_pc_a0a0, %dec_label_pc_a060, %dec_label_pc_a0b4
  %v1_a0b0 = call i32 @function_155d0(i32 0)
  %v0_a0c8.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_a0b4

dec_label_pc_a0b4:                                ; preds = %dec_label_pc_a090, %dec_label_pc_a070, %dec_label_pc_a0ac
  %v0_a0c8 = phi i32 [ %v2_a078, %dec_label_pc_a070 ], [ %v0_a0c8.pre, %dec_label_pc_a0ac ], [ %v7_a090, %dec_label_pc_a090 ]
  %v1_a0c8 = inttoptr i32 %v0_a0c8 to i32*
  %v2_a0c8 = load i32, i32* %v1_a0c8, align 4
  call void @__pseudo_branch(i32 %v2_a0c8)
  br label %dec_label_pc_a0ac

; uselistorder directives
  uselistorder i32 %v1_a0a0, { 2, 0, 1 }
  uselistorder i32 %v0_a024, { 1, 2, 0 }
  uselistorder i1 %v7_a004, { 1, 0 }
  uselistorder i32 %v0_a000, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a0b4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a0ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a0a0, { 1, 0 }
  uselistorder label %dec_label_pc_a060, { 1, 0 }
  uselistorder label %dec_label_pc_a058, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
}

define i32 @function_a0d8(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a0d8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_a0d8 = load i32, i32* @r4, align 4
  %v6_a0d8 = load i32, i32* @r5, align 4
  %v9_a0d8 = load i32, i32* @r6, align 4
  %v12_a0d8 = load i32, i32* @r7, align 4
  %v15_a0d8 = load i32, i32* @r8, align 4
  %v18_a0d8 = load i32, i32* @sb, align 4
  %v21_a0d8 = load i32, i32* @sl, align 4
  %v27_a0d8 = load i32, i32* @lr, align 4
  %v7_a0dc = icmp eq i32 %arg2, 3
  store i1 %v7_a0dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_a0e8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_a0e8, i32* @r4, align 4
  %tmp33 = icmp ult i32 %arg2, 4
  br i1 %tmp33, label %dec_label_pc_a0fc, label %dec_label_pc_a0f0

dec_label_pc_a0f0:                                ; preds = %dec_label_pc_a0d8
  %v7_a0f0 = icmp eq i32 %arg2, 4
  store i1 %v7_a0f0, i1* %cpsr_z.global-to-local, align 1
  %v1_a0f4 = inttoptr i32 %v0_a0e8 to i32*
  %v2_a0f4 = load i32, i32* %v1_a0f4, align 4
  store i32 %v2_a0f4, i32* @sl, align 4
  br i1 %v7_a0f0, label %dec_label_pc_a0fc, label %dec_label_pc_a104

dec_label_pc_a0fc:                                ; preds = %dec_label_pc_a120, %.dec_label_pc_a0fc_crit_edge, %dec_label_pc_a0f0, %dec_label_pc_a114, %dec_label_pc_a104, %dec_label_pc_a0d8
  %v29_a100 = phi i32 [ %v29_a100.pre, %.dec_label_pc_a0fc_crit_edge ], [ %v0_a0e8, %dec_label_pc_a120 ], [ %v0_a0e8, %dec_label_pc_a0f0 ], [ %v0_a0e8, %dec_label_pc_a114 ], [ %v0_a0e8, %dec_label_pc_a104 ], [ %v0_a0e8, %dec_label_pc_a0d8 ]
  store i32 %v9_a0d8, i32* @r6, align 4
  store i32 %v12_a0d8, i32* @r7, align 4
  store i32 %v18_a0d8, i32* @sb, align 4
  store i32 %v21_a0d8, i32* @sl, align 4
  ret i32 %v29_a100

dec_label_pc_a104:                                ; preds = %dec_label_pc_a0f0
  %v7_a104 = icmp eq i32 %arg2, 5
  store i1 %v7_a104, i1* %cpsr_z.global-to-local, align 1
  %v1_a108 = add i32 %v0_a0e8, 4
  %v2_a108 = inttoptr i32 %v1_a108 to i8*
  %v3_a108 = load i8, i8* %v2_a108, align 1
  %v4_a108 = zext i8 %v3_a108 to i32
  store i32 %v4_a108, i32* %r1.global-to-local, align 4
  br i1 %v7_a104, label %dec_label_pc_a0fc, label %dec_label_pc_a114

dec_label_pc_a114:                                ; preds = %dec_label_pc_a104
  %v1_a114 = add i32 %v0_a0e8, 5
  %v2_a114 = inttoptr i32 %v1_a114 to i8*
  %v3_a114 = load i8, i8* %v2_a114, align 1
  %v4_a114 = zext i8 %v3_a114 to i32
  store i32 %v4_a114, i32* @r7, align 4
  %v2_a118 = icmp eq i8 %v3_a114, 0
  store i1 %v2_a118, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a118, label %dec_label_pc_a0fc, label %dec_label_pc_a120

dec_label_pc_a120:                                ; preds = %dec_label_pc_a114
  %v3_a120 = mul nuw nsw i32 %v4_a114, 4
  store i32 %v3_a120, i32* @sb, align 4
  %v1_a124 = add i32 %arg2, -6
  store i32 %v1_a124, i32* @r6, align 4
  %v2_a128 = mul nuw nsw i32 %v4_a114, 5
  store i32 %v2_a128, i32* @r8, align 4
  %v3_a12c = icmp ult i32 %v1_a124, %v2_a128
  %v9_a12c = icmp eq i32 %v1_a124, %v2_a128
  store i1 %v9_a12c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a12c, label %dec_label_pc_a0fc, label %dec_label_pc_a134

dec_label_pc_a134:                                ; preds = %dec_label_pc_a120
  store i32 %v4_a114, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_a13c = call i32 @function_14e34(i32 %v4_a114, i32 24)
  store i32 %v2_a13c, i32* %r0.global-to-local, align 4
  %v0_a140 = load i32, i32* @r7, align 4
  %v2_a140 = icmp eq i32 %v0_a140, 0
  store i1 %v2_a140, i1* %cpsr_z.global-to-local, align 1
  %v0_a148 = load i32, i32* @r4, align 4
  %v1_a148 = add i32 %v0_a148, 6
  store i32 %v1_a148, i32* %fp.global-to-local, align 4
  %tmp27 = icmp slt i32 %v0_a140, 1
  br i1 %tmp27, label %dec_label_pc_a1a0thread-pre-split, label %dec_label_pc_a150

dec_label_pc_a150:                                ; preds = %dec_label_pc_a134
  store i32 %v2_a13c, i32* %r1.global-to-local, align 4
  %v1_a154 = load i32, i32* @r8, align 4
  %v2_a154 = add i32 %v1_a154, %v0_a148
  store i32 %v2_a154, i32* %ip.global-to-local, align 4
  store i32 %v0_a148, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_a164

dec_label_pc_a164:                                ; preds = %dec_label_pc_a164.dec_label_pc_a164_crit_edge, %dec_label_pc_a150
  %v2_a174 = phi i32 [ %v1_a188, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v2_a13c, %dec_label_pc_a150 ]
  %v1_a170 = phi i32 [ %v1_a170.pre, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v2_a154, %dec_label_pc_a150 ]
  %v0_a16c = phi i32 [ %v0_a164.pre, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v0_a148, %dec_label_pc_a150 ]
  %v1_a164 = add i32 %v0_a16c, 10
  %v2_a164 = inttoptr i32 %v1_a164 to i8*
  %v3_a164 = load i8, i8* %v2_a164, align 1
  %v1_a168 = add i32 %v0_a16c, 6
  %v2_a168 = inttoptr i32 %v1_a168 to i32*
  %v3_a168 = load i32, i32* %v2_a168, align 4
  store i32 %v3_a168, i32* %r2.global-to-local, align 4
  %v1_a16c = add i32 %v0_a16c, 5
  store i32 %v1_a16c, i32* %r0.global-to-local, align 4
  %v9_a170 = icmp eq i32 %v1_a16c, %v1_a170
  store i1 %v9_a170, i1* %cpsr_z.global-to-local, align 1
  %v3_a174 = add i32 %v2_a174, 20
  %v4_a174 = inttoptr i32 %v3_a174 to i8*
  store i8 %v3_a164, i8* %v4_a174, align 1
  %v0_a178 = load i32, i32* %r2.global-to-local, align 4
  %v1_a178 = load i32, i32* %r1.global-to-local, align 4
  %v2_a178 = add i32 %v1_a178, 4
  %v3_a178 = inttoptr i32 %v2_a178 to i32*
  store i32 %v0_a178, i32* %v3_a178, align 4
  %v0_a17c = load i32, i32* %r2.global-to-local, align 4
  %v1_a17c = load i32, i32* %r1.global-to-local, align 4
  %v2_a17c = add i32 %v1_a17c, 16
  %v3_a17c = inttoptr i32 %v2_a17c to i32*
  store i32 %v0_a17c, i32* %v3_a17c, align 4
  %v0_a180 = load i32, i32* @r4, align 4
  %v1_a180 = trunc i32 %v0_a180 to i8
  %v2_a180 = load i32, i32* %r1.global-to-local, align 4
  %v3_a180 = inttoptr i32 %v2_a180 to i8*
  store i8 %v1_a180, i8* %v3_a180, align 1
  %v0_a184 = load i32, i32* @lr, align 4
  %v1_a184 = trunc i32 %v0_a184 to i8
  %v2_a184 = load i32, i32* %r1.global-to-local, align 4
  %v3_a184 = add i32 %v2_a184, 1
  %v4_a184 = inttoptr i32 %v3_a184 to i8*
  store i8 %v1_a184, i8* %v4_a184, align 1
  %v0_a188 = load i32, i32* %r1.global-to-local, align 4
  %v1_a188 = add i32 %v0_a188, 24
  store i32 %v1_a188, i32* %r1.global-to-local, align 4
  %v0_a18c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a18c, label %dec_label_pc_a190, label %dec_label_pc_a164.dec_label_pc_a164_crit_edge

dec_label_pc_a164.dec_label_pc_a164_crit_edge:    ; preds = %dec_label_pc_a164
  %v0_a164.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_a170.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a164

dec_label_pc_a190:                                ; preds = %dec_label_pc_a164
  %v0_a190 = load i32, i32* @sb, align 4
  %v1_a190 = load i32, i32* @r7, align 4
  %v1_a194 = load i32, i32* @r5, align 4
  %sum = add i32 %v1_a190, %v0_a190
  %v2_a194 = sub i32 %v1_a194, %sum
  %v0_a198 = load i32, i32* %r0.global-to-local, align 4
  %v1_a198 = add i32 %v0_a198, 6
  store i32 %v1_a198, i32* %fp.global-to-local, align 4
  %v1_a19c = add i32 %v2_a194, -6
  store i32 %v1_a19c, i32* @r6, align 4
  br label %dec_label_pc_a1a0

dec_label_pc_a1a0thread-pre-split:                ; preds = %dec_label_pc_a134
  %v0_a1a0.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_a1a0

dec_label_pc_a1a0:                                ; preds = %dec_label_pc_a1a0thread-pre-split, %dec_label_pc_a190
  %v0_a1ac = phi i32 [ %v1_a148, %dec_label_pc_a1a0thread-pre-split ], [ %v1_a198, %dec_label_pc_a190 ]
  %v1_a1a4 = phi i32 [ %v0_a1a0.pr, %dec_label_pc_a1a0thread-pre-split ], [ %v1_a19c, %dec_label_pc_a190 ]
  %v2_a1a0 = icmp eq i32 %v1_a1a4, 0
  store i1 %v2_a1a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a1a0, label %dec_label_pc_a2d8, label %dec_label_pc_a1ac

dec_label_pc_a1ac:                                ; preds = %dec_label_pc_a1a0
  %v1_a1ac = inttoptr i32 %v0_a1ac to i8*
  %v2_a1ac = load i8, i8* %v1_a1ac, align 1
  %v3_a1ac = zext i8 %v2_a1ac to i32
  store i32 %v3_a1ac, i32* @sb, align 4
  %v2_a1b0 = icmp eq i8 %v2_a1ac, 0
  store i1 %v2_a1b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a1b0, label %dec_label_pc_a290, label %dec_label_pc_a1c0

dec_label_pc_a1c0:                                ; preds = %dec_label_pc_a1ac
  store i32 %v3_a1ac, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a1c8 = call i32 @function_14e34(i32 %v3_a1ac, i32 8)
  store i32 %v2_a1c8, i32* %r0.global-to-local, align 4
  %v0_a1cc = load i32, i32* @sb, align 4
  %v2_a1cc = icmp eq i32 %v0_a1cc, 0
  store i1 %v2_a1cc, i1* %cpsr_z.global-to-local, align 1
  %tmp28 = icmp slt i32 %v0_a1cc, 1
  br i1 %tmp28, label %dec_label_pc_a290, label %dec_label_pc_a1dc

dec_label_pc_a1dc:                                ; preds = %dec_label_pc_a1c0
  %v0_a1dc = load i32, i32* @r6, align 4
  %v1_a1dc = add i32 %v0_a1dc, -1
  store i32 %v1_a1dc, i32* %r2.global-to-local, align 4
  %v7_a1dc = icmp eq i32 %v0_a1dc, 1
  store i1 %v7_a1dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a1dc, label %dec_label_pc_a2d8, label %dec_label_pc_a1e4

dec_label_pc_a1e4:                                ; preds = %dec_label_pc_a1dc
  %v0_a1e4 = load i32, i32* %fp.global-to-local, align 4
  %v1_a1e4 = add i32 %v0_a1e4, 1
  %v2_a1e4 = inttoptr i32 %v1_a1e4 to i8*
  %v3_a1e4 = load i8, i8* %v2_a1e4, align 1
  %v1_a1e8 = add i32 %v0_a1dc, -2
  store i32 %v1_a1e8, i32* %r2.global-to-local, align 4
  %v7_a1e8 = icmp eq i32 %v1_a1dc, 1
  store i1 %v7_a1e8, i1* %cpsr_z.global-to-local, align 1
  %v3_a1ec = add i32 %v2_a1c8, 4
  %v4_a1ec = inttoptr i32 %v3_a1ec to i8*
  store i8 %v3_a1e4, i8* %v4_a1ec, align 1
  %v0_a1f0 = load i32, i32* %fp.global-to-local, align 4
  %v1_a1f0 = add i32 %v0_a1f0, 1
  store i32 %v1_a1f0, i32* %r0.global-to-local, align 4
  %v0_a1f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a1f4, label %dec_label_pc_a2d8, label %dec_label_pc_a1f8

dec_label_pc_a1f8:                                ; preds = %dec_label_pc_a1e4
  %v1_a1f8 = add i32 %v0_a1f0, 2
  %v2_a1f8 = inttoptr i32 %v1_a1f8 to i8*
  %v3_a1f8 = load i8, i8* %v2_a1f8, align 1
  %v4_a1f8 = zext i8 %v3_a1f8 to i32
  store i32 %v4_a1f8, i32* @r4, align 4
  %v0_a1fc = load i32, i32* %r2.global-to-local, align 4
  %v1_a1fc = add i32 %v0_a1fc, -1
  store i32 %v1_a1fc, i32* @r8, align 4
  %v9_a200 = icmp eq i32 %v1_a1fc, %v4_a1f8
  store i1 %v9_a200, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a1f8, i32* %r0.global-to-local, align 4
  %v5_a208 = icmp slt i32 %v1_a1fc, %v4_a1f8
  br i1 %v5_a208, label %dec_label_pc_a2d8, label %dec_label_pc_a20c

dec_label_pc_a20c:                                ; preds = %dec_label_pc_a1f8
  store i32 %v2_a1c8, i32* @r5, align 4
  %v1_a214 = add i32 %v2_a1c8, 8
  %v1_a218 = add i32 %v0_a1f0, 3
  store i32 %v1_a218, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_a25c

dec_label_pc_a228:                                ; preds = %dec_label_pc_a25c
  %v0_a228 = load i32, i32* @r8, align 4
  %v1_a228 = load i32, i32* @r4, align 4
  %v2_a228 = sub i32 %v0_a228, %v1_a228
  store i32 %v2_a228, i32* %r2.global-to-local, align 4
  %v9_a228 = icmp eq i32 %v0_a228, %v1_a228
  store i1 %v9_a228, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a228, label %dec_label_pc_a2d8, label %dec_label_pc_a230

dec_label_pc_a230:                                ; preds = %dec_label_pc_a228
  %v1_a230 = load i32, i32* @r6, align 4
  %v2_a230 = add i32 %v1_a230, %v1_a228
  %v3_a230 = inttoptr i32 %v2_a230 to i8*
  %v4_a230 = load i8, i8* %v3_a230, align 1
  store i32 %v2_a230, i32* %r0.global-to-local, align 4
  %v1_a238 = add i32 %v2_a228, -1
  store i32 %v1_a238, i32* %r2.global-to-local, align 4
  %v7_a238 = icmp eq i32 %v2_a228, 1
  store i1 %v7_a238, i1* %cpsr_z.global-to-local, align 1
  %v3_a23c = add i32 %v2_a23c, 4
  %v4_a23c = inttoptr i32 %v3_a23c to i8*
  store i8 %v4_a230, i8* %v4_a23c, align 1
  %v0_a240 = load i32, i32* %r0.global-to-local, align 4
  %v0_a244 = load i32, i32* %r2.global-to-local, align 4
  %v1_a244 = add i32 %v0_a244, -1
  store i32 %v1_a244, i32* @r8, align 4
  %v1_a248 = add i32 %v0_a240, 2
  store i32 %v1_a248, i32* @r6, align 4
  %v0_a24c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a24c, label %dec_label_pc_a2d8, label %dec_label_pc_a250

dec_label_pc_a250:                                ; preds = %dec_label_pc_a230
  %v1_a240 = add i32 %v0_a240, 1
  %v2_a250 = inttoptr i32 %v1_a240 to i8*
  %v3_a250 = load i8, i8* %v2_a250, align 1
  %v4_a250 = zext i8 %v3_a250 to i32
  store i32 %v4_a250, i32* @r4, align 4
  %v2_a254 = sub i32 %v1_a244, %v4_a250
  %tmp30 = sub i32 0, %v2_a254
  %v6_a254 = and i32 %v1_a244, %tmp30
  %v7_a254 = icmp slt i32 %v6_a254, 0
  %v8_a254 = icmp slt i32 %v2_a254, 0
  %v9_a254 = icmp eq i32 %v1_a244, %v4_a250
  store i1 %v9_a254, i1* %cpsr_z.global-to-local, align 1
  %v2_a258 = xor i1 %v8_a254, %v7_a254
  br i1 %v2_a258, label %dec_label_pc_a2d8, label %dec_label_pc_a25c

dec_label_pc_a25c:                                ; preds = %dec_label_pc_a250, %dec_label_pc_a20c
  %v0_a260 = phi i32 [ %v4_a1f8, %dec_label_pc_a20c ], [ %v4_a250, %dec_label_pc_a250 ]
  %v2_a23c = phi i32 [ %v1_a214, %dec_label_pc_a20c ], [ %v1_a280, %dec_label_pc_a250 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_a260 = add nuw nsw i32 %v0_a260, 1
  store i32 %v1_a260, i32* %r0.global-to-local, align 4
  %v2_a264 = call i32 @function_14e34(i32 %v1_a260, i32 1)
  store i32 %v2_a264, i32* %r0.global-to-local, align 4
  %v0_a268 = load i32, i32* @r6, align 4
  store i32 %v0_a268, i32* %r1.global-to-local, align 4
  %v1_a26c = load i32, i32* @r5, align 4
  %v2_a26c = inttoptr i32 %v1_a26c to i32*
  store i32 %v2_a264, i32* %v2_a26c, align 4
  %v0_a270 = load i32, i32* @r4, align 4
  store i32 %v0_a270, i32* %r2.global-to-local, align 4
  %v3_a274 = call i32 @function_138f0(i32 %v2_a264, i32 %v0_a268, i32 %v0_a270)
  store i32 %v3_a274, i32* %r0.global-to-local, align 4
  store i32 %v2_a23c, i32* @r5, align 4
  %v0_a27c = load i32, i32* %fp.global-to-local, align 4
  %v1_a27c = add i32 %v0_a27c, 1
  store i32 %v1_a27c, i32* %fp.global-to-local, align 4
  %v1_a280 = add i32 %v2_a23c, 8
  store i32 %v1_a280, i32* %ip.global-to-local, align 4
  %v1_a284 = load i32, i32* @sb, align 4
  %v9_a284 = icmp eq i32 %v1_a27c, %v1_a284
  store i1 %v9_a284, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a284, label %dec_label_pc_a290, label %dec_label_pc_a228

dec_label_pc_a290:                                ; preds = %dec_label_pc_a25c, %dec_label_pc_a1c0, %dec_label_pc_a1ac
  %stack_var_-48.1 = phi i32 [ %v3_a1ac, %dec_label_pc_a1ac ], [ %v0_a1cc, %dec_label_pc_a1c0 ], [ %v0_a1cc, %dec_label_pc_a25c ]
  %stack_var_-52.2 = phi i32 [ %v3_a1ac, %dec_label_pc_a1ac ], [ %v2_a1c8, %dec_label_pc_a1c0 ], [ %v2_a1c8, %dec_label_pc_a25c ]
  %v0_a290 = call i32 @function_14808()
  %v0_a294 = load i32, i32* @sl, align 4
  store i32 %stack_var_-48.1, i32* %ip.global-to-local, align 4
  %v3_a2a0 = mul i32 %v0_a294, 16777216
  %v1_a294 = mul i32 %v0_a294, 256
  %v4_a2a4 = and i32 %v1_a294, 16711680
  %v5_a2a4 = or i32 %v4_a2a4, %v3_a2a0
  store i32 %v5_a2a4, i32* %r1.global-to-local, align 4
  %v1_a29c = udiv i32 %v0_a294, 256
  %v3_a2a8 = and i32 %v1_a29c, 65280
  store i32 %v3_a2a8, i32* %r2.global-to-local, align 4
  %v2_a2b0 = inttoptr i32 %v0_a290 to i32*
  store i32 0, i32* %v2_a2b0, align 4
  %v0_a2b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a2b4 = load i32, i32* @sl, align 4
  %v4_a2b4 = udiv i32 %v1_a2b4, 16777216
  %v5_a2b4 = or i32 %v4_a2b4, %v0_a2b4
  %v0_a2b8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-52.2, i32* @ip, align 4
  %v1_a2c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_a2c0 = or i32 %v5_a2b4, %v1_a2c0
  store i32 %v2_a2c0, i32* %r0.global-to-local, align 4
  store i32 %v4_a108, i32* %r1.global-to-local, align 4
  %v0_a2cc = load i32, i32* @r7, align 4
  store i32 %v0_a2cc, i32* %r2.global-to-local, align 4
  %v6_a2d4 = trunc i32 %v0_a2b8 to i8
  %v7_a2d4 = call i32 @function_9fe8(i32 %v2_a2c0, i32 %v4_a108, i32 %v0_a2cc, i32 %v2_a13c, i8 %v6_a2d4, i32 %stack_var_-52.2)
  store i32 %v7_a2d4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a2d8

dec_label_pc_a2d8:                                ; preds = %dec_label_pc_a250, %dec_label_pc_a230, %dec_label_pc_a228, %dec_label_pc_a1f8, %dec_label_pc_a1e4, %dec_label_pc_a1dc, %dec_label_pc_a1a0, %dec_label_pc_a290
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_a1a0 ], [ %stack_var_-52.2, %dec_label_pc_a290 ], [ %v2_a1c8, %dec_label_pc_a1dc ], [ %v2_a1c8, %dec_label_pc_a1e4 ], [ %v2_a1c8, %dec_label_pc_a1f8 ], [ %v2_a1c8, %dec_label_pc_a228 ], [ %v2_a1c8, %dec_label_pc_a230 ], [ %v2_a1c8, %dec_label_pc_a250 ]
  store i32 %v2_a13c, i32* %r1.global-to-local, align 4
  %v2_a2dc = icmp eq i32 %v2_a13c, 0
  store i1 %v2_a2dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2dc, label %bb31, label %bb

bb:                                               ; preds = %dec_label_pc_a2d8
  store i32 %v2_a13c, i32* %r0.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_a2d8, %bb
  %v1_a2e4 = xor i1 %v2_a2dc, true
  call void @__pseudo_cond_branch(i1 %v1_a2e4, i32 ptrtoint (i32* @global_var_14e8c.58 to i32))
  %v2_a2ec = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_a2ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2ec, label %.dec_label_pc_a0fc_crit_edge, label %dec_label_pc_a2f4

.dec_label_pc_a0fc_crit_edge:                     ; preds = %bb31
  %v29_a100.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a0fc

dec_label_pc_a2f4:                                ; preds = %bb31
  %v0_a2f4 = load i32, i32* @sb, align 4
  %v2_a2f4 = icmp eq i32 %v0_a2f4, 0
  store i1 %v2_a2f4, i1* %cpsr_z.global-to-local, align 1
  %tmp32 = icmp slt i32 %v0_a2f4, 1
  br i1 %tmp32, label %dec_label_pc_a31c, label %dec_label_pc_a2fc

dec_label_pc_a2fc:                                ; preds = %dec_label_pc_a2f4
  br label %dec_label_pc_a300

dec_label_pc_a300:                                ; preds = %dec_label_pc_a300, %dec_label_pc_a2fc
  %v0_a30c = phi i32 [ %v1_a30c, %dec_label_pc_a300 ], [ 0, %dec_label_pc_a2fc ]
  store i32 %stack_var_-52.3, i32* %ip.global-to-local, align 4
  %v4_a304 = mul i32 %v0_a30c, 8
  %v5_a304 = add i32 %v4_a304, %stack_var_-52.3
  %v6_a304 = inttoptr i32 %v5_a304 to i32*
  %v7_a304 = load i32, i32* %v6_a304, align 4
  store i32 %v7_a304, i32* %r0.global-to-local, align 4
  %v2_a308 = icmp eq i32 %v7_a304, 0
  store i1 %v2_a308, i1* %cpsr_z.global-to-local, align 1
  %v1_a30c = add i32 %v0_a30c, 1
  %v1_a310 = xor i1 %v2_a308, true
  call void @__pseudo_cond_branch(i1 %v1_a310, i32 ptrtoint (i32* @global_var_14e8c.58 to i32))
  %v0_a314 = load i32, i32* @sb, align 4
  %v9_a314 = icmp eq i32 %v0_a314, %v1_a30c
  store i1 %v9_a314, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a314, label %dec_label_pc_a31c, label %dec_label_pc_a300

dec_label_pc_a31c:                                ; preds = %dec_label_pc_a300, %dec_label_pc_a2f4
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_a0d8, i32* @r4, align 4
  store i32 %v6_a0d8, i32* @r5, align 4
  store i32 %v9_a0d8, i32* @r6, align 4
  store i32 %v12_a0d8, i32* @r7, align 4
  store i32 %v15_a0d8, i32* @r8, align 4
  store i32 %v18_a0d8, i32* @sb, align 4
  store i32 %v21_a0d8, i32* @sl, align 4
  store i32 %v27_a0d8, i32* @lr, align 4
  %v0_a328 = call i32 @function_14e8c()
  store i32 %v0_a328, i32* %r0.global-to-local, align 4
  ret i32 %v0_a328

; uselistorder directives
  uselistorder i32 %stack_var_-52.3, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a294, { 2, 0, 1 }
  uselistorder i32 %stack_var_-52.2, { 1, 0, 2 }
  uselistorder i32 %v1_a280, { 1, 0 }
  uselistorder i32 %v2_a23c, { 2, 1, 0 }
  uselistorder i32 %v2_a254, { 1, 0 }
  uselistorder i32 %v4_a250, { 0, 2, 1, 3 }
  uselistorder i32 %v1_a244, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a240, { 1, 0 }
  uselistorder i32 %v0_a1dc, { 0, 2, 1 }
  uselistorder i32 %v0_a1cc, { 0, 2, 1, 3 }
  uselistorder i32 %v2_a1c8, { 0, 1, 2, 8, 7, 6, 3, 5, 9, 10, 4, 11 }
  uselistorder i32 %v3_a1ac, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_a188, { 1, 0 }
  uselistorder i32 %v0_a16c, { 0, 2, 1 }
  uselistorder i32 %v0_a148, { 1, 2, 0, 3 }
  uselistorder i32 %v2_a13c, { 0, 3, 4, 5, 1, 2, 6 }
  uselistorder i32 %v2_a128, { 2, 1, 0 }
  uselistorder i32 %v4_a114, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v4_a108, { 1, 0, 2 }
  uselistorder i32 %v0_a0e8, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 6, 3, 4, 5, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 21, 4, 22, 5, 20, 11, 8, 6, 7, 9, 10, 17, 12, 14, 13, 15, 16, 19, 18, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 5, 3, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 1, 3, 2, 0, 5, 4, 6 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_a2d8, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_a0fc, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_a32c(i32 %arg1) local_unnamed_addr {
dec_label_pc_a32c:
  %r0.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_a32c = load i32, i32* @r4, align 4
  store i32 %v3_a32c, i32* %stack_var_-12, align 4
  %v6_a32c = load i32, i32* @r5, align 4
  %v9_a32c = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_1f7a4.60 to i32), i32* @r4, align 4
  %v2_a334 = load i32, i32* @global_var_1f7a4.60, align 4
  store i32 %v2_a334, i32* %r0.global-to-local, align 4
  %v2_a338 = icmp eq i32 %v2_a334, 0
  br i1 %v2_a338, label %dec_label_pc_a340, label %dec_label_pc_a3c0

dec_label_pc_a340:                                ; preds = %dec_label_pc_a32c
  %v3_a340 = load i32, i32* @global_var_1f7a8.61, align 4
  store i32 %v3_a340, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v2_a348 = icmp eq i32 %v3_a340, 0
  store i32 0, i32* @global_var_1f7a4.60, align 4
  br i1 %v2_a348, label %dec_label_pc_a354, label %dec_label_pc_a3dc

dec_label_pc_a354:                                ; preds = %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge, %dec_label_pc_a340
  %v0_a35c = phi i32 [ %v0_a35c.pre, %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge ], [ 0, %dec_label_pc_a340 ]
  %v1_a35c = phi i32 [ %v0_a354.pre, %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge ], [ ptrtoint (i32* @global_var_1f7a4.60 to i32), %dec_label_pc_a340 ]
  %v1_a354 = add i32 %v1_a35c, 8
  %v2_a354 = inttoptr i32 %v1_a354 to i32*
  %v3_a354 = load i32, i32* %v2_a354, align 4
  store i32 %v3_a354, i32* %r0.global-to-local, align 4
  %v2_a358 = icmp eq i32 %v3_a354, 0
  %v2_a35c = add i32 %v1_a35c, 4
  %v3_a35c = inttoptr i32 %v2_a35c to i32*
  store i32 %v0_a35c, i32* %v3_a35c, align 4
  br i1 %v2_a358, label %dec_label_pc_a364, label %dec_label_pc_a3f4

dec_label_pc_a364:                                ; preds = %dec_label_pc_a354, %dec_label_pc_a3dc
  %v0_a364 = load i32, i32* @r4, align 4
  %v1_a364 = add i32 %v0_a364, 12
  %v2_a364 = inttoptr i32 %v1_a364 to i32*
  %v3_a364 = load i32, i32* %v2_a364, align 4
  store i32 %v3_a364, i32* %r0.global-to-local, align 4
  %v2_a368 = icmp eq i32 %v3_a364, 0
  %v0_a36c = load i32, i32* %r5.global-to-local, align 4
  %v2_a36c = add i32 %v0_a364, 8
  %v3_a36c = inttoptr i32 %v2_a36c to i32*
  store i32 %v0_a36c, i32* %v3_a36c, align 4
  br i1 %v2_a368, label %dec_label_pc_a374, label %dec_label_pc_a40c

dec_label_pc_a374:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a3f4
  %v0_a374 = load i32, i32* @r4, align 4
  %v1_a374 = add i32 %v0_a374, 16
  %v2_a374 = inttoptr i32 %v1_a374 to i32*
  %v3_a374 = load i32, i32* %v2_a374, align 4
  store i32 %v3_a374, i32* %r0.global-to-local, align 4
  %v2_a378 = icmp eq i32 %v3_a374, 0
  %v0_a37c = load i32, i32* %r5.global-to-local, align 4
  %v2_a37c = add i32 %v0_a374, 12
  %v3_a37c = inttoptr i32 %v2_a37c to i32*
  store i32 %v0_a37c, i32* %v3_a37c, align 4
  br i1 %v2_a378, label %dec_label_pc_a384, label %dec_label_pc_a424

dec_label_pc_a384:                                ; preds = %dec_label_pc_a374, %dec_label_pc_a40c
  %v0_a384 = load i32, i32* @r4, align 4
  %v1_a384 = add i32 %v0_a384, 20
  %v2_a384 = inttoptr i32 %v1_a384 to i32*
  %v3_a384 = load i32, i32* %v2_a384, align 4
  store i32 %v3_a384, i32* %r0.global-to-local, align 4
  %v2_a388 = icmp eq i32 %v3_a384, 0
  %v0_a38c = load i32, i32* %r5.global-to-local, align 4
  %v2_a38c = add i32 %v0_a384, 16
  %v3_a38c = inttoptr i32 %v2_a38c to i32*
  store i32 %v0_a38c, i32* %v3_a38c, align 4
  br i1 %v2_a388, label %dec_label_pc_a394, label %dec_label_pc_a43c

dec_label_pc_a394:                                ; preds = %dec_label_pc_a384, %dec_label_pc_a424
  %v0_a394 = load i32, i32* @r4, align 4
  %v1_a394 = add i32 %v0_a394, 24
  %v2_a394 = inttoptr i32 %v1_a394 to i32*
  %v3_a394 = load i32, i32* %v2_a394, align 4
  store i32 %v3_a394, i32* %r0.global-to-local, align 4
  %v2_a398 = icmp eq i32 %v3_a394, 0
  %v0_a39c = load i32, i32* %r5.global-to-local, align 4
  %v2_a39c = add i32 %v0_a394, 20
  %v3_a39c = inttoptr i32 %v2_a39c to i32*
  store i32 %v0_a39c, i32* %v3_a39c, align 4
  br i1 %v2_a398, label %dec_label_pc_a3a4, label %dec_label_pc_a454

dec_label_pc_a3a4:                                ; preds = %dec_label_pc_a394, %dec_label_pc_a43c
  %v0_a3a4 = load i32, i32* @r4, align 4
  %v1_a3a4 = add i32 %v0_a3a4, 28
  %v2_a3a4 = inttoptr i32 %v1_a3a4 to i32*
  %v3_a3a4 = load i32, i32* %v2_a3a4, align 4
  store i32 %v3_a3a4, i32* %r0.global-to-local, align 4
  %v2_a3a8 = icmp eq i32 %v3_a3a4, 0
  %v0_a3ac = load i32, i32* %r5.global-to-local, align 4
  %v2_a3ac = add i32 %v0_a3a4, 24
  %v3_a3ac = inttoptr i32 %v2_a3ac to i32*
  store i32 %v0_a3ac, i32* %v3_a3ac, align 4
  br i1 %v2_a3a8, label %dec_label_pc_a3b4, label %dec_label_pc_a46c

dec_label_pc_a3b4:                                ; preds = %dec_label_pc_a3a4, %dec_label_pc_a454, %dec_label_pc_a46c
  %v0_a3b4 = load i32, i32* %r5.global-to-local, align 4
  %v1_a3b4 = load i32, i32* @r4, align 4
  %v2_a3b4 = add i32 %v1_a3b4, 28
  %v3_a3b4 = inttoptr i32 %v2_a3b4 to i32*
  store i32 %v0_a3b4, i32* %v3_a3b4, align 4
  %v2_a3b8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_a3b8, i32* @r4, align 4
  store i32 %v6_a32c, i32* @r5, align 4
  store i32 %v9_a32c, i32* @lr, align 4
  %v0_a3bc = call i32 @function_11500()
  store i32 %v0_a3bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a3c0

dec_label_pc_a3c0:                                ; preds = %dec_label_pc_a32c, %dec_label_pc_a3b4
  %v0_a3c4 = phi i32 [ %v2_a334, %dec_label_pc_a32c ], [ %v0_a3bc, %dec_label_pc_a3b4 ]
  %v2_a3c4 = call i32 @function_14334(i32 %v0_a3c4, i32 9)
  store i32 %v2_a3c4, i32* %r0.global-to-local, align 4
  %v0_a3c8 = load i32, i32* @r4, align 4
  %v1_a3c8 = add i32 %v0_a3c8, 4
  %v2_a3c8 = inttoptr i32 %v1_a3c8 to i32*
  %v3_a3c8 = load i32, i32* %v2_a3c8, align 4
  store i32 %v3_a3c8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v2_a3d0 = icmp eq i32 %v3_a3c8, 0
  %v2_a3d4 = inttoptr i32 %v0_a3c8 to i32*
  store i32 0, i32* %v2_a3d4, align 4
  br i1 %v2_a3d0, label %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge, label %dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge

dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge:    ; preds = %dec_label_pc_a3c0
  %v0_a3e0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a3dc

dec_label_pc_a3c0.dec_label_pc_a354_crit_edge:    ; preds = %dec_label_pc_a3c0
  %v0_a354.pre = load i32, i32* @r4, align 4
  %v0_a35c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_a354

dec_label_pc_a3dc:                                ; preds = %dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge, %dec_label_pc_a340
  %v0_a3e0 = phi i32 [ %v0_a3e0.pre, %dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge ], [ %v3_a340, %dec_label_pc_a340 ]
  %v2_a3e0 = call i32 @function_14334(i32 %v0_a3e0, i32 9)
  store i32 %v2_a3e0, i32* %r0.global-to-local, align 4
  %v0_a3e4 = load i32, i32* @r4, align 4
  %v1_a3e4 = add i32 %v0_a3e4, 8
  %v2_a3e4 = inttoptr i32 %v1_a3e4 to i32*
  %v3_a3e4 = load i32, i32* %v2_a3e4, align 4
  store i32 %v3_a3e4, i32* %r0.global-to-local, align 4
  %v2_a3e8 = icmp eq i32 %v3_a3e4, 0
  %v0_a3ec = load i32, i32* %r5.global-to-local, align 4
  %v2_a3ec = add i32 %v0_a3e4, 4
  %v3_a3ec = inttoptr i32 %v2_a3ec to i32*
  store i32 %v0_a3ec, i32* %v3_a3ec, align 4
  br i1 %v2_a3e8, label %dec_label_pc_a364, label %dec_label_pc_a3f4

dec_label_pc_a3f4:                                ; preds = %dec_label_pc_a354, %dec_label_pc_a3dc
  %v0_a3f8 = load i32, i32* %r0.global-to-local, align 4
  %v2_a3f8 = call i32 @function_14334(i32 %v0_a3f8, i32 9)
  store i32 %v2_a3f8, i32* %r0.global-to-local, align 4
  %v0_a3fc = load i32, i32* @r4, align 4
  %v1_a3fc = add i32 %v0_a3fc, 12
  %v2_a3fc = inttoptr i32 %v1_a3fc to i32*
  %v3_a3fc = load i32, i32* %v2_a3fc, align 4
  store i32 %v3_a3fc, i32* %r0.global-to-local, align 4
  %v2_a400 = icmp eq i32 %v3_a3fc, 0
  %v0_a404 = load i32, i32* %r5.global-to-local, align 4
  %v2_a404 = add i32 %v0_a3fc, 8
  %v3_a404 = inttoptr i32 %v2_a404 to i32*
  store i32 %v0_a404, i32* %v3_a404, align 4
  br i1 %v2_a400, label %dec_label_pc_a374, label %dec_label_pc_a40c

dec_label_pc_a40c:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a3f4
  %v0_a410 = load i32, i32* %r0.global-to-local, align 4
  %v2_a410 = call i32 @function_14334(i32 %v0_a410, i32 9)
  store i32 %v2_a410, i32* %r0.global-to-local, align 4
  %v0_a414 = load i32, i32* @r4, align 4
  %v1_a414 = add i32 %v0_a414, 16
  %v2_a414 = inttoptr i32 %v1_a414 to i32*
  %v3_a414 = load i32, i32* %v2_a414, align 4
  store i32 %v3_a414, i32* %r0.global-to-local, align 4
  %v2_a418 = icmp eq i32 %v3_a414, 0
  %v0_a41c = load i32, i32* %r5.global-to-local, align 4
  %v2_a41c = add i32 %v0_a414, 12
  %v3_a41c = inttoptr i32 %v2_a41c to i32*
  store i32 %v0_a41c, i32* %v3_a41c, align 4
  br i1 %v2_a418, label %dec_label_pc_a384, label %dec_label_pc_a424

dec_label_pc_a424:                                ; preds = %dec_label_pc_a374, %dec_label_pc_a40c
  %v0_a428 = load i32, i32* %r0.global-to-local, align 4
  %v2_a428 = call i32 @function_14334(i32 %v0_a428, i32 9)
  store i32 %v2_a428, i32* %r0.global-to-local, align 4
  %v0_a42c = load i32, i32* @r4, align 4
  %v1_a42c = add i32 %v0_a42c, 20
  %v2_a42c = inttoptr i32 %v1_a42c to i32*
  %v3_a42c = load i32, i32* %v2_a42c, align 4
  store i32 %v3_a42c, i32* %r0.global-to-local, align 4
  %v2_a430 = icmp eq i32 %v3_a42c, 0
  %v0_a434 = load i32, i32* %r5.global-to-local, align 4
  %v2_a434 = add i32 %v0_a42c, 16
  %v3_a434 = inttoptr i32 %v2_a434 to i32*
  store i32 %v0_a434, i32* %v3_a434, align 4
  br i1 %v2_a430, label %dec_label_pc_a394, label %dec_label_pc_a43c

dec_label_pc_a43c:                                ; preds = %dec_label_pc_a384, %dec_label_pc_a424
  %v0_a440 = load i32, i32* %r0.global-to-local, align 4
  %v2_a440 = call i32 @function_14334(i32 %v0_a440, i32 9)
  store i32 %v2_a440, i32* %r0.global-to-local, align 4
  %v0_a444 = load i32, i32* @r4, align 4
  %v1_a444 = add i32 %v0_a444, 24
  %v2_a444 = inttoptr i32 %v1_a444 to i32*
  %v3_a444 = load i32, i32* %v2_a444, align 4
  store i32 %v3_a444, i32* %r0.global-to-local, align 4
  %v2_a448 = icmp eq i32 %v3_a444, 0
  %v0_a44c = load i32, i32* %r5.global-to-local, align 4
  %v2_a44c = add i32 %v0_a444, 20
  %v3_a44c = inttoptr i32 %v2_a44c to i32*
  store i32 %v0_a44c, i32* %v3_a44c, align 4
  br i1 %v2_a448, label %dec_label_pc_a3a4, label %dec_label_pc_a454

dec_label_pc_a454:                                ; preds = %dec_label_pc_a394, %dec_label_pc_a43c
  %v0_a458 = load i32, i32* %r0.global-to-local, align 4
  %v2_a458 = call i32 @function_14334(i32 %v0_a458, i32 9)
  store i32 %v2_a458, i32* %r0.global-to-local, align 4
  %v0_a45c = load i32, i32* @r4, align 4
  %v1_a45c = add i32 %v0_a45c, 28
  %v2_a45c = inttoptr i32 %v1_a45c to i32*
  %v3_a45c = load i32, i32* %v2_a45c, align 4
  store i32 %v3_a45c, i32* %r0.global-to-local, align 4
  %v2_a460 = icmp eq i32 %v3_a45c, 0
  %v0_a464 = load i32, i32* %r5.global-to-local, align 4
  %v2_a464 = add i32 %v0_a45c, 24
  %v3_a464 = inttoptr i32 %v2_a464 to i32*
  store i32 %v0_a464, i32* %v3_a464, align 4
  br i1 %v2_a460, label %dec_label_pc_a3b4, label %dec_label_pc_a46c

dec_label_pc_a46c:                                ; preds = %dec_label_pc_a3a4, %dec_label_pc_a454
  %v0_a470 = load i32, i32* %r0.global-to-local, align 4
  %v2_a470 = call i32 @function_14334(i32 %v0_a470, i32 9)
  store i32 %v2_a470, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a3b4

; uselistorder directives
  uselistorder i32* %r5.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1, 10, 8, 9, 11, 12, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 2, 16, 1, 4, 18, 3, 6, 20, 5, 8, 22, 7, 10, 24, 9, 12, 26, 11, 15, 13, 14, 30, 0, 17, 19, 21, 23, 25, 27, 28, 29 }
  uselistorder label %dec_label_pc_a46c, { 1, 0 }
  uselistorder label %dec_label_pc_a454, { 1, 0 }
  uselistorder label %dec_label_pc_a43c, { 1, 0 }
  uselistorder label %dec_label_pc_a424, { 1, 0 }
  uselistorder label %dec_label_pc_a40c, { 1, 0 }
  uselistorder label %dec_label_pc_a3f4, { 1, 0 }
  uselistorder label %dec_label_pc_a3c0, { 1, 0 }
  uselistorder label %dec_label_pc_a3b4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a3a4, { 1, 0 }
  uselistorder label %dec_label_pc_a394, { 1, 0 }
  uselistorder label %dec_label_pc_a384, { 1, 0 }
  uselistorder label %dec_label_pc_a374, { 1, 0 }
  uselistorder label %dec_label_pc_a364, { 1, 0 }
}

define i32 @function_a47c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a47c:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_a47c = urem i32 %arg1, 256
  %v2_a480 = icmp eq i32 %v1_a47c, 0
  %v3_a484 = load i32, i32* @r4, align 4
  br i1 %v2_a480, label %dec_label_pc_a4cc, label %dec_label_pc_a490

dec_label_pc_a490:                                ; preds = %dec_label_pc_a47c
  %v0_a490 = load i32, i32* %r1.global-to-local, align 4
  %v1_a490 = add i32 %v0_a490, 4
  %v2_a490 = inttoptr i32 %v1_a490 to i8*
  %v3_a490 = load i8, i8* %v2_a490, align 1
  %v4_a490 = zext i8 %v3_a490 to i32
  %v1_a494 = urem i32 %arg3, 256
  %v9_a498 = icmp eq i32 %v4_a490, %v1_a494
  br i1 %v9_a498, label %dec_label_pc_a4d4, label %dec_label_pc_a4bc.preheader

dec_label_pc_a4bc.preheader:                      ; preds = %dec_label_pc_a490
  br label %dec_label_pc_a4bc

dec_label_pc_a4ac:                                ; preds = %dec_label_pc_a4bc
  %v1_a4ac = add i32 %v0_a4b4.in, 12
  %v2_a4ac = inttoptr i32 %v1_a4ac to i8*
  %v3_a4ac = load i8, i8* %v2_a4ac, align 1
  %v4_a4ac = zext i8 %v3_a4ac to i32
  %v9_a4b0 = icmp eq i32 %v1_a494, %v4_a4ac
  br i1 %v9_a4b0, label %dec_label_pc_a4d4, label %dec_label_pc_a4bc

dec_label_pc_a4bc:                                ; preds = %dec_label_pc_a4bc.preheader, %dec_label_pc_a4ac
  %v0_a4b4.in = phi i32 [ %v0_a490, %dec_label_pc_a4bc.preheader ], [ %v0_a4b4, %dec_label_pc_a4ac ]
  %v0_a4bc = phi i32 [ 0, %dec_label_pc_a4bc.preheader ], [ %v1_a4bc, %dec_label_pc_a4ac ]
  %v0_a4b4 = add i32 %v0_a4b4.in, 8
  %v1_a4bc = add i32 %v0_a4bc, 1
  %v9_a4c0 = icmp eq i32 %v1_a47c, %v1_a4bc
  store i32 %v0_a4b4, i32* %r1.global-to-local, align 4
  br i1 %v9_a4c0, label %dec_label_pc_a4cc, label %dec_label_pc_a4ac

dec_label_pc_a4cc:                                ; preds = %dec_label_pc_a4bc, %dec_label_pc_a4d4, %dec_label_pc_a47c
  store i32 %v3_a484, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_a4d4:                                ; preds = %dec_label_pc_a4ac, %dec_label_pc_a490
  %v0_a4d4 = phi i32 [ %v0_a490, %dec_label_pc_a490 ], [ %v0_a4b4, %dec_label_pc_a4ac ]
  %v1_a4d4 = inttoptr i32 %v0_a4d4 to i32*
  %v2_a4d4 = load i32, i32* %v1_a4d4, align 4
  store i32 %v2_a4d4, i32* @r0, align 4
  %v2_a4d8 = icmp eq i32 %v2_a4d4, 0
  br i1 %v2_a4d8, label %dec_label_pc_a4cc, label %dec_label_pc_a4e0

dec_label_pc_a4e0:                                ; preds = %dec_label_pc_a4d4
  store i32 %v3_a484, i32* @r4, align 4
  %v1_a4e4 = call i32 @function_14910(i32 %v2_a4d4)
  ret i32 %v1_a4e4

; uselistorder directives
  uselistorder i32 %v1_a4bc, { 1, 0 }
  uselistorder i32 %v0_a4b4, { 1, 0, 2 }
  uselistorder i32 %v0_a4b4.in, { 1, 0 }
  uselistorder i32 %v1_a494, { 1, 0 }
  uselistorder i32 %v0_a490, { 1, 0, 2 }
  uselistorder i32 %v3_a484, { 1, 0 }
  uselistorder i32 %v1_a47c, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a4cc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a4bc, { 1, 0 }
}

define i32 @function_a4e8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a4e8:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_a4e8 = urem i32 %arg1, 256
  %v2_a4ec = icmp eq i32 %v1_a4e8, 0
  %v3_a4f0 = load i32, i32* @r4, align 4
  %v6_a4f0 = load i32, i32* @lr, align 4
  br i1 %v2_a4ec, label %dec_label_pc_a538, label %dec_label_pc_a4fc

dec_label_pc_a4fc:                                ; preds = %dec_label_pc_a4e8
  %v0_a4fc = load i32, i32* %r1.global-to-local, align 4
  %v1_a4fc = add i32 %v0_a4fc, 4
  %v2_a4fc = inttoptr i32 %v1_a4fc to i8*
  %v3_a4fc = load i8, i8* %v2_a4fc, align 1
  %v4_a4fc = zext i8 %v3_a4fc to i32
  %v1_a500 = urem i32 %arg3, 256
  %v9_a504 = icmp eq i32 %v4_a4fc, %v1_a500
  br i1 %v9_a504, label %dec_label_pc_a540, label %dec_label_pc_a528.preheader

dec_label_pc_a528.preheader:                      ; preds = %dec_label_pc_a4fc
  br label %dec_label_pc_a528

dec_label_pc_a518:                                ; preds = %dec_label_pc_a528
  %v1_a518 = add i32 %v0_a520.in, 12
  %v2_a518 = inttoptr i32 %v1_a518 to i8*
  %v3_a518 = load i8, i8* %v2_a518, align 1
  %v4_a518 = zext i8 %v3_a518 to i32
  %v9_a51c = icmp eq i32 %v1_a500, %v4_a518
  br i1 %v9_a51c, label %dec_label_pc_a540, label %dec_label_pc_a528

dec_label_pc_a528:                                ; preds = %dec_label_pc_a528.preheader, %dec_label_pc_a518
  %v0_a520.in = phi i32 [ %v0_a4fc, %dec_label_pc_a528.preheader ], [ %v0_a520, %dec_label_pc_a518 ]
  %v0_a528 = phi i32 [ 0, %dec_label_pc_a528.preheader ], [ %v1_a528, %dec_label_pc_a518 ]
  %v0_a520 = add i32 %v0_a520.in, 8
  %v1_a528 = add i32 %v0_a528, 1
  store i32 %v1_a528, i32* @lr, align 4
  %v9_a52c = icmp eq i32 %v1_a4e8, %v1_a528
  store i32 %v0_a520, i32* %r1.global-to-local, align 4
  br i1 %v9_a52c, label %dec_label_pc_a538, label %dec_label_pc_a518

dec_label_pc_a538:                                ; preds = %dec_label_pc_a528, %dec_label_pc_a540, %dec_label_pc_a4e8
  store i32 %v3_a4f0, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_a540:                                ; preds = %dec_label_pc_a518, %dec_label_pc_a4fc
  %v0_a540 = phi i32 [ %v0_a4fc, %dec_label_pc_a4fc ], [ %v0_a520, %dec_label_pc_a518 ]
  %v1_a540 = inttoptr i32 %v0_a540 to i32*
  %v2_a540 = load i32, i32* %v1_a540, align 4
  %v2_a544 = icmp eq i32 %v2_a540, 0
  br i1 %v2_a544, label %dec_label_pc_a538, label %dec_label_pc_a54c

dec_label_pc_a54c:                                ; preds = %dec_label_pc_a540
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_a4f0, i32* @r4, align 4
  store i32 %v6_a4f0, i32* @lr, align 4
  %v2_a554 = inttoptr i32 %v2_a540 to i8*
  %v3_a554 = call i32 @function_139a0(i8* %v2_a554, i32 10)
  ret i32 %v3_a554

; uselistorder directives
  uselistorder i32 %v1_a528, { 1, 2, 0 }
  uselistorder i32 %v0_a520, { 1, 0, 2 }
  uselistorder i32 %v0_a520.in, { 1, 0 }
  uselistorder i32 %v1_a500, { 1, 0 }
  uselistorder i32 %v0_a4fc, { 1, 0, 2 }
  uselistorder i32 %v3_a4f0, { 1, 0 }
  uselistorder i32 %v1_a4e8, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_a538, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a528, { 1, 0 }
}

define i32 @function_a558(i32 %arg1) local_unnamed_addr {
dec_label_pc_a558:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_a558 = load i32, i32* @r4, align 4
  store i32 %v3_a558, i32* %stack_var_-20, align 4
  %v6_a558 = load i32, i32* @r5, align 4
  %v9_a558 = load i32, i32* @r6, align 4
  %v12_a558 = load i32, i32* @r7, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a564 = call i32 @function_14e34(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1f79c.54 to i32), i32* @r4, align 4
  %v2_a56c = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a56c = zext i8 %v2_a56c to i32
  store i32 ptrtoint (i32* @global_var_1f7a0.56 to i32), i32* @r6, align 4
  store i32 56584, i32* %r2.global-to-local, align 4
  store i32 %v2_a564, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a580 = mul nuw nsw i32 %v3_a56c, 4
  store i32 %v3_a580, i32* %r1.global-to-local, align 4
  %v2_a584 = load i32, i32* @global_var_1f7a0.56, align 4
  %v2_a588 = inttoptr i32 %v2_a564 to i32*
  store i32 56584, i32* %v2_a588, align 4
  %v3_a58c = load i32, i32* @r5, align 4
  %v4_a58c = add i32 %v3_a58c, 4
  %v5_a58c = inttoptr i32 %v4_a58c to i8*
  store i8 0, i8* %v5_a58c, align 1
  %v0_a590 = load i32, i32* %r1.global-to-local, align 4
  %v1_a590 = add i32 %v0_a590, 4
  store i32 %v1_a590, i32* %r1.global-to-local, align 4
  %v5_a594 = call i32 @function_14f7c(i32 %v2_a584, i32 %v1_a590, i32 56584, i32 0)
  %v2_a598 = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a598 = zext i8 %v2_a598 to i32
  store i32 %v3_a598, i32* %r3.global-to-local, align 4
  store i32 %v5_a594, i32* %ip.global-to-local, align 4
  %v0_a5a0 = load i32, i32* @r5, align 4
  %v5_a5a0 = mul nuw nsw i32 %v3_a598, 4
  %v6_a5a0 = add i32 %v5_a5a0, %v5_a594
  %v7_a5a0 = inttoptr i32 %v6_a5a0 to i32*
  store i32 %v0_a5a0, i32* %v7_a5a0, align 4
  store i32 ptrtoint (i8* @global_var_1f79d.65 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_a5b0 = load i32, i32* @r4, align 4
  %v4_a5b0 = inttoptr i32 %v3_a5b0 to i8*
  store i8 ptrtoint (i8* @global_var_1f79d.65 to i8), i8* %v4_a5b0, align 1
  %v0_a5b4 = load i32, i32* %ip.global-to-local, align 4
  %v1_a5b4 = load i32, i32* @r6, align 4
  %v2_a5b4 = inttoptr i32 %v1_a5b4 to i32*
  store i32 %v0_a5b4, i32* %v2_a5b4, align 4
  %v2_a5b8 = call i32 @function_14e34(i32 1, i32 8)
  %v2_a5bc = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a5bc = zext i8 %v2_a5bc to i32
  store i32 ptrtoint (i32* @global_var_e394.67 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  store i32 %v2_a5b8, i32* @r5, align 4
  %v3_a5cc = mul nuw nsw i32 %v3_a5bc, 4
  store i32 %v3_a5cc, i32* %r1.global-to-local, align 4
  %v2_a5d0 = load i32, i32* @global_var_1f7a0.56, align 4
  %v2_a5d4 = inttoptr i32 %v2_a5b8 to i32*
  store i32 ptrtoint (i32* @global_var_e394.67 to i32), i32* %v2_a5d4, align 4
  %v0_a5d8 = load i32, i32* @r7, align 4
  %v1_a5d8 = trunc i32 %v0_a5d8 to i8
  %v2_a5d8 = load i32, i32* @r5, align 4
  %v3_a5d8 = add i32 %v2_a5d8, 4
  %v4_a5d8 = inttoptr i32 %v3_a5d8 to i8*
  store i8 %v1_a5d8, i8* %v4_a5d8, align 1
  %v0_a5dc = load i32, i32* %r1.global-to-local, align 4
  %v1_a5dc = add i32 %v0_a5dc, 4
  store i32 %v1_a5dc, i32* %r1.global-to-local, align 4
  %v5_a5e0 = call i32 @function_14f7c(i32 %v2_a5d0, i32 %v1_a5dc, i32 sext (i8 ptrtoint (i8* @global_var_1f79d.65 to i8) to i32), i32 ptrtoint (i32* @global_var_e394.67 to i32))
  %v2_a5e4 = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a5e4 = zext i8 %v2_a5e4 to i32
  store i32 %v3_a5e4, i32* %r3.global-to-local, align 4
  store i32 %v5_a5e0, i32* %ip.global-to-local, align 4
  %v0_a5ec = load i32, i32* @r5, align 4
  %v5_a5ec = mul nuw nsw i32 %v3_a5e4, 4
  %v6_a5ec = add i32 %v5_a5ec, %v5_a5e0
  %v7_a5ec = inttoptr i32 %v6_a5ec to i32*
  store i32 %v0_a5ec, i32* %v7_a5ec, align 4
  %v0_a5f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5f0 = load i32, i32* @r7, align 4
  %v2_a5f0 = add i32 %v1_a5f0, %v0_a5f0
  store i32 %v2_a5f0, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a5fc = load i32, i32* %ip.global-to-local, align 4
  %v1_a5fc = load i32, i32* @r6, align 4
  %v2_a5fc = inttoptr i32 %v1_a5fc to i32*
  store i32 %v0_a5fc, i32* %v2_a5fc, align 4
  %v0_a600 = load i32, i32* %r2.global-to-local, align 4
  %v1_a600 = trunc i32 %v0_a600 to i8
  %v2_a600 = load i32, i32* @r4, align 4
  %v3_a600 = inttoptr i32 %v2_a600 to i8*
  store i8 %v1_a600, i8* %v3_a600, align 1
  %v2_a604 = call i32 @function_14e34(i32 %v1_a5f0, i32 8)
  %v2_a608 = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a608 = zext i8 %v2_a608 to i32
  store i32 ptrtoint (i32* @global_var_e858.69 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a604, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_a618 = mul nuw nsw i32 %v3_a608, 4
  store i32 %v3_a618, i32* %r1.global-to-local, align 4
  %v2_a61c = load i32, i32* @global_var_1f7a0.56, align 4
  %v2_a620 = inttoptr i32 %v2_a604 to i32*
  store i32 ptrtoint (i32* @global_var_e858.69 to i32), i32* %v2_a620, align 4
  %v3_a624 = load i32, i32* @r5, align 4
  %v4_a624 = add i32 %v3_a624, 4
  %v5_a624 = inttoptr i32 %v4_a624 to i8*
  store i8 2, i8* %v5_a624, align 1
  %v0_a628 = load i32, i32* %r1.global-to-local, align 4
  %v1_a628 = add i32 %v0_a628, 4
  store i32 %v1_a628, i32* %r1.global-to-local, align 4
  %v5_a62c = call i32 @function_14f7c(i32 %v2_a61c, i32 %v1_a628, i32 ptrtoint (i32* @global_var_e858.69 to i32), i32 2)
  %v2_a630 = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a630 = zext i8 %v2_a630 to i32
  store i32 %v3_a630, i32* %r3.global-to-local, align 4
  store i32 %v5_a62c, i32* %ip.global-to-local, align 4
  %v0_a638 = load i32, i32* @r5, align 4
  %v5_a638 = mul nuw nsw i32 %v3_a630, 4
  %v6_a638 = add i32 %v5_a638, %v5_a62c
  %v7_a638 = inttoptr i32 %v6_a638 to i32*
  store i32 %v0_a638, i32* %v7_a638, align 4
  %v0_a63c = load i32, i32* %r3.global-to-local, align 4
  %v1_a63c = load i32, i32* @r7, align 4
  %v2_a63c = add i32 %v1_a63c, %v0_a63c
  store i32 %v2_a63c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a648 = load i32, i32* %ip.global-to-local, align 4
  %v1_a648 = load i32, i32* @r6, align 4
  %v2_a648 = inttoptr i32 %v1_a648 to i32*
  store i32 %v0_a648, i32* %v2_a648, align 4
  %v0_a64c = load i32, i32* %r2.global-to-local, align 4
  %v1_a64c = trunc i32 %v0_a64c to i8
  %v2_a64c = load i32, i32* @r4, align 4
  %v3_a64c = inttoptr i32 %v2_a64c to i8*
  store i8 %v1_a64c, i8* %v3_a64c, align 1
  %v2_a650 = call i32 @function_14e34(i32 %v1_a63c, i32 8)
  %v2_a654 = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a654 = zext i8 %v2_a654 to i32
  store i32 ptrtoint (i32* @global_var_d740.71 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a650, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_a664 = mul nuw nsw i32 %v3_a654, 4
  store i32 %v3_a664, i32* %r1.global-to-local, align 4
  %v2_a668 = load i32, i32* @global_var_1f7a0.56, align 4
  %v2_a66c = inttoptr i32 %v2_a650 to i32*
  store i32 ptrtoint (i32* @global_var_d740.71 to i32), i32* %v2_a66c, align 4
  %v3_a670 = load i32, i32* @r5, align 4
  %v4_a670 = add i32 %v3_a670, 4
  %v5_a670 = inttoptr i32 %v4_a670 to i8*
  store i8 9, i8* %v5_a670, align 1
  %v0_a674 = load i32, i32* %r1.global-to-local, align 4
  %v1_a674 = add i32 %v0_a674, 4
  store i32 %v1_a674, i32* %r1.global-to-local, align 4
  %v5_a678 = call i32 @function_14f7c(i32 %v2_a668, i32 %v1_a674, i32 ptrtoint (i32* @global_var_d740.71 to i32), i32 9)
  %v2_a67c = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a67c = zext i8 %v2_a67c to i32
  store i32 %v3_a67c, i32* %r3.global-to-local, align 4
  store i32 %v5_a678, i32* %ip.global-to-local, align 4
  %v0_a684 = load i32, i32* @r5, align 4
  %v5_a684 = mul nuw nsw i32 %v3_a67c, 4
  %v6_a684 = add i32 %v5_a684, %v5_a678
  %v7_a684 = inttoptr i32 %v6_a684 to i32*
  store i32 %v0_a684, i32* %v7_a684, align 4
  %v0_a688 = load i32, i32* %r3.global-to-local, align 4
  %v1_a688 = load i32, i32* @r7, align 4
  %v2_a688 = add i32 %v1_a688, %v0_a688
  store i32 %v2_a688, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a694 = load i32, i32* %ip.global-to-local, align 4
  %v1_a694 = load i32, i32* @r6, align 4
  %v2_a694 = inttoptr i32 %v1_a694 to i32*
  store i32 %v0_a694, i32* %v2_a694, align 4
  %v0_a698 = load i32, i32* %r2.global-to-local, align 4
  %v1_a698 = trunc i32 %v0_a698 to i8
  %v2_a698 = load i32, i32* @r4, align 4
  %v3_a698 = inttoptr i32 %v2_a698 to i8*
  store i8 %v1_a698, i8* %v3_a698, align 1
  %v2_a69c = call i32 @function_14e34(i32 %v1_a688, i32 8)
  %v2_a6a0 = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a6a0 = zext i8 %v2_a6a0 to i32
  store i32 55844, i32* %r2.global-to-local, align 4
  store i32 %v2_a69c, i32* @r5, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v3_a6b0 = mul nuw nsw i32 %v3_a6a0, 4
  store i32 %v3_a6b0, i32* %r1.global-to-local, align 4
  %v2_a6b4 = load i32, i32* @global_var_1f7a0.56, align 4
  %v2_a6b8 = inttoptr i32 %v2_a69c to i32*
  store i32 55844, i32* %v2_a6b8, align 4
  %v3_a6bc = load i32, i32* @r5, align 4
  %v4_a6bc = add i32 %v3_a6bc, 4
  %v5_a6bc = inttoptr i32 %v4_a6bc to i8*
  store i8 12, i8* %v5_a6bc, align 1
  %v0_a6c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a6c0 = add i32 %v0_a6c0, 4
  store i32 %v1_a6c0, i32* %r1.global-to-local, align 4
  %v5_a6c4 = call i32 @function_14f7c(i32 %v2_a6b4, i32 %v1_a6c0, i32 55844, i32 12)
  %v2_a6c8 = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a6c8 = zext i8 %v2_a6c8 to i32
  store i32 %v3_a6c8, i32* %r3.global-to-local, align 4
  store i32 %v5_a6c4, i32* %ip.global-to-local, align 4
  %v0_a6d0 = load i32, i32* @r5, align 4
  %v5_a6d0 = mul nuw nsw i32 %v3_a6c8, 4
  %v6_a6d0 = add i32 %v5_a6d0, %v5_a6c4
  %v7_a6d0 = inttoptr i32 %v6_a6d0 to i32*
  store i32 %v0_a6d0, i32* %v7_a6d0, align 4
  %v0_a6d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a6d4 = load i32, i32* @r7, align 4
  %v2_a6d4 = add i32 %v1_a6d4, %v0_a6d4
  store i32 %v2_a6d4, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a6e0 = load i32, i32* %ip.global-to-local, align 4
  %v1_a6e0 = load i32, i32* @r6, align 4
  %v2_a6e0 = inttoptr i32 %v1_a6e0 to i32*
  store i32 %v0_a6e0, i32* %v2_a6e0, align 4
  %v0_a6e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a6e4 = trunc i32 %v0_a6e4 to i8
  %v2_a6e4 = load i32, i32* @r4, align 4
  %v3_a6e4 = inttoptr i32 %v2_a6e4 to i8*
  store i8 %v1_a6e4, i8* %v3_a6e4, align 1
  %v2_a6e8 = call i32 @function_14e34(i32 %v1_a6d4, i32 8)
  %v2_a6ec = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a6ec = zext i8 %v2_a6ec to i32
  store i32 ptrtoint (i32* @global_var_cffc.74 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a6e8, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_a6fc = mul nuw nsw i32 %v3_a6ec, 4
  store i32 %v3_a6fc, i32* %r1.global-to-local, align 4
  %v2_a700 = load i32, i32* @global_var_1f7a0.56, align 4
  %v2_a704 = inttoptr i32 %v2_a6e8 to i32*
  store i32 ptrtoint (i32* @global_var_cffc.74 to i32), i32* %v2_a704, align 4
  %v3_a708 = load i32, i32* @r5, align 4
  %v4_a708 = add i32 %v3_a708, 4
  %v5_a708 = inttoptr i32 %v4_a708 to i8*
  store i8 3, i8* %v5_a708, align 1
  %v0_a70c = load i32, i32* %r1.global-to-local, align 4
  %v1_a70c = add i32 %v0_a70c, 4
  store i32 %v1_a70c, i32* %r1.global-to-local, align 4
  %v5_a710 = call i32 @function_14f7c(i32 %v2_a700, i32 %v1_a70c, i32 ptrtoint (i32* @global_var_cffc.74 to i32), i32 3)
  %v2_a714 = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a714 = zext i8 %v2_a714 to i32
  store i32 %v3_a714, i32* %r3.global-to-local, align 4
  store i32 %v5_a710, i32* %ip.global-to-local, align 4
  %v0_a71c = load i32, i32* @r5, align 4
  %v5_a71c = mul nuw nsw i32 %v3_a714, 4
  %v6_a71c = add i32 %v5_a71c, %v5_a710
  %v7_a71c = inttoptr i32 %v6_a71c to i32*
  store i32 %v0_a71c, i32* %v7_a71c, align 4
  %v0_a720 = load i32, i32* %r3.global-to-local, align 4
  %v1_a720 = load i32, i32* @r7, align 4
  %v2_a720 = add i32 %v1_a720, %v0_a720
  store i32 %v2_a720, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a72c = load i32, i32* %ip.global-to-local, align 4
  %v1_a72c = load i32, i32* @r6, align 4
  %v2_a72c = inttoptr i32 %v1_a72c to i32*
  store i32 %v0_a72c, i32* %v2_a72c, align 4
  %v0_a730 = load i32, i32* %r2.global-to-local, align 4
  %v1_a730 = trunc i32 %v0_a730 to i8
  %v2_a730 = load i32, i32* @r4, align 4
  %v3_a730 = inttoptr i32 %v2_a730 to i8*
  store i8 %v1_a730, i8* %v3_a730, align 1
  %v2_a734 = call i32 @function_14e34(i32 %v1_a720, i32 8)
  %v2_a738 = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a738 = zext i8 %v2_a738 to i32
  store i32 ptrtoint (i32* @global_var_c888.76 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a734, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_a748 = mul nuw nsw i32 %v3_a738, 4
  store i32 %v3_a748, i32* %r1.global-to-local, align 4
  %v2_a74c = load i32, i32* @global_var_1f7a0.56, align 4
  %v2_a750 = inttoptr i32 %v2_a734 to i32*
  store i32 ptrtoint (i32* @global_var_c888.76 to i32), i32* %v2_a750, align 4
  %v3_a754 = load i32, i32* @r5, align 4
  %v4_a754 = add i32 %v3_a754, 4
  %v5_a754 = inttoptr i32 %v4_a754 to i8*
  store i8 4, i8* %v5_a754, align 1
  %v0_a758 = load i32, i32* %r1.global-to-local, align 4
  %v1_a758 = add i32 %v0_a758, 4
  store i32 %v1_a758, i32* %r1.global-to-local, align 4
  %v5_a75c = call i32 @function_14f7c(i32 %v2_a74c, i32 %v1_a758, i32 ptrtoint (i32* @global_var_c888.76 to i32), i32 4)
  %v2_a760 = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a760 = zext i8 %v2_a760 to i32
  store i32 %v3_a760, i32* %r3.global-to-local, align 4
  store i32 %v5_a75c, i32* %ip.global-to-local, align 4
  %v0_a768 = load i32, i32* @r5, align 4
  %v5_a768 = mul nuw nsw i32 %v3_a760, 4
  %v6_a768 = add i32 %v5_a768, %v5_a75c
  %v7_a768 = inttoptr i32 %v6_a768 to i32*
  store i32 %v0_a768, i32* %v7_a768, align 4
  %v0_a76c = load i32, i32* %r3.global-to-local, align 4
  %v1_a76c = load i32, i32* @r7, align 4
  %v2_a76c = add i32 %v1_a76c, %v0_a76c
  store i32 %v2_a76c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a778 = load i32, i32* %ip.global-to-local, align 4
  %v1_a778 = load i32, i32* @r6, align 4
  %v2_a778 = inttoptr i32 %v1_a778 to i32*
  store i32 %v0_a778, i32* %v2_a778, align 4
  %v0_a77c = load i32, i32* %r2.global-to-local, align 4
  %v1_a77c = trunc i32 %v0_a77c to i8
  %v2_a77c = load i32, i32* @r4, align 4
  %v3_a77c = inttoptr i32 %v2_a77c to i8*
  store i8 %v1_a77c, i8* %v3_a77c, align 1
  %v2_a780 = call i32 @function_14e34(i32 %v1_a76c, i32 8)
  %v2_a784 = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a784 = zext i8 %v2_a784 to i32
  store i32 ptrtoint (i32* @global_var_b7c8.78 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a780, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_a794 = mul nuw nsw i32 %v3_a784, 4
  store i32 %v3_a794, i32* %r1.global-to-local, align 4
  %v2_a798 = load i32, i32* @global_var_1f7a0.56, align 4
  %v2_a79c = inttoptr i32 %v2_a780 to i32*
  store i32 ptrtoint (i32* @global_var_b7c8.78 to i32), i32* %v2_a79c, align 4
  %v3_a7a0 = load i32, i32* @r5, align 4
  %v4_a7a0 = add i32 %v3_a7a0, 4
  %v5_a7a0 = inttoptr i32 %v4_a7a0 to i8*
  store i8 5, i8* %v5_a7a0, align 1
  %v0_a7a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a7a4 = add i32 %v0_a7a4, 4
  store i32 %v1_a7a4, i32* %r1.global-to-local, align 4
  %v5_a7a8 = call i32 @function_14f7c(i32 %v2_a798, i32 %v1_a7a4, i32 ptrtoint (i32* @global_var_b7c8.78 to i32), i32 5)
  %v2_a7ac = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a7ac = zext i8 %v2_a7ac to i32
  store i32 %v3_a7ac, i32* %r3.global-to-local, align 4
  store i32 %v5_a7a8, i32* %ip.global-to-local, align 4
  %v0_a7b4 = load i32, i32* @r5, align 4
  %v5_a7b4 = mul nuw nsw i32 %v3_a7ac, 4
  %v6_a7b4 = add i32 %v5_a7b4, %v5_a7a8
  %v7_a7b4 = inttoptr i32 %v6_a7b4 to i32*
  store i32 %v0_a7b4, i32* %v7_a7b4, align 4
  %v0_a7b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a7b8 = load i32, i32* @r7, align 4
  %v2_a7b8 = add i32 %v1_a7b8, %v0_a7b8
  store i32 %v2_a7b8, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a7c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_a7c4 = load i32, i32* @r6, align 4
  %v2_a7c4 = inttoptr i32 %v1_a7c4 to i32*
  store i32 %v0_a7c4, i32* %v2_a7c4, align 4
  %v0_a7c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a7c8 = trunc i32 %v0_a7c8 to i8
  %v2_a7c8 = load i32, i32* @r4, align 4
  %v3_a7c8 = inttoptr i32 %v2_a7c8 to i8*
  store i8 %v1_a7c8, i8* %v3_a7c8, align 1
  %v2_a7cc = call i32 @function_14e34(i32 %v1_a7b8, i32 8)
  %v2_a7d0 = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a7d0 = zext i8 %v2_a7d0 to i32
  store i32 ptrtoint (i32* @global_var_c028.80 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a7cc, i32* @r5, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v3_a7e0 = mul nuw nsw i32 %v3_a7d0, 4
  store i32 %v3_a7e0, i32* %r1.global-to-local, align 4
  %v2_a7e4 = load i32, i32* @global_var_1f7a0.56, align 4
  %v2_a7e8 = inttoptr i32 %v2_a7cc to i32*
  store i32 ptrtoint (i32* @global_var_c028.80 to i32), i32* %v2_a7e8, align 4
  %v3_a7ec = load i32, i32* @r5, align 4
  %v4_a7ec = add i32 %v3_a7ec, 4
  %v5_a7ec = inttoptr i32 %v4_a7ec to i8*
  store i8 11, i8* %v5_a7ec, align 1
  %v0_a7f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a7f0 = add i32 %v0_a7f0, 4
  store i32 %v1_a7f0, i32* %r1.global-to-local, align 4
  %v5_a7f4 = call i32 @function_14f7c(i32 %v2_a7e4, i32 %v1_a7f0, i32 ptrtoint (i32* @global_var_c028.80 to i32), i32 11)
  %v2_a7f8 = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a7f8 = zext i8 %v2_a7f8 to i32
  store i32 %v3_a7f8, i32* %r3.global-to-local, align 4
  store i32 %v5_a7f4, i32* %ip.global-to-local, align 4
  %v0_a800 = load i32, i32* @r5, align 4
  %v5_a800 = mul nuw nsw i32 %v3_a7f8, 4
  %v6_a800 = add i32 %v5_a800, %v5_a7f4
  %v7_a800 = inttoptr i32 %v6_a800 to i32*
  store i32 %v0_a800, i32* %v7_a800, align 4
  %v0_a804 = load i32, i32* %r3.global-to-local, align 4
  %v1_a804 = load i32, i32* @r7, align 4
  %v2_a804 = add i32 %v1_a804, %v0_a804
  store i32 %v2_a804, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a810 = load i32, i32* %ip.global-to-local, align 4
  %v1_a810 = load i32, i32* @r6, align 4
  %v2_a810 = inttoptr i32 %v1_a810 to i32*
  store i32 %v0_a810, i32* %v2_a810, align 4
  %v0_a814 = load i32, i32* %r2.global-to-local, align 4
  %v1_a814 = trunc i32 %v0_a814 to i8
  %v2_a814 = load i32, i32* @r4, align 4
  %v3_a814 = inttoptr i32 %v2_a814 to i8*
  store i8 %v1_a814, i8* %v3_a814, align 1
  %v2_a818 = call i32 @function_14e34(i32 %v1_a804, i32 8)
  %v2_a81c = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a81c = zext i8 %v2_a81c to i32
  store i32 ptrtoint (i32* @global_var_b0ac.82 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a818, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_a82c = mul nuw nsw i32 %v3_a81c, 4
  store i32 %v3_a82c, i32* %r1.global-to-local, align 4
  %v2_a830 = load i32, i32* @global_var_1f7a0.56, align 4
  %v2_a834 = inttoptr i32 %v2_a818 to i32*
  store i32 ptrtoint (i32* @global_var_b0ac.82 to i32), i32* %v2_a834, align 4
  %v3_a838 = load i32, i32* @r5, align 4
  %v4_a838 = add i32 %v3_a838, 4
  %v5_a838 = inttoptr i32 %v4_a838 to i8*
  store i8 6, i8* %v5_a838, align 1
  %v0_a83c = load i32, i32* %r1.global-to-local, align 4
  %v1_a83c = add i32 %v0_a83c, 4
  store i32 %v1_a83c, i32* %r1.global-to-local, align 4
  %v5_a840 = call i32 @function_14f7c(i32 %v2_a830, i32 %v1_a83c, i32 ptrtoint (i32* @global_var_b0ac.82 to i32), i32 6)
  %v2_a844 = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a844 = zext i8 %v2_a844 to i32
  store i32 %v3_a844, i32* %r3.global-to-local, align 4
  store i32 %v5_a840, i32* %ip.global-to-local, align 4
  %v0_a84c = load i32, i32* @r5, align 4
  %v5_a84c = mul nuw nsw i32 %v3_a844, 4
  %v6_a84c = add i32 %v5_a84c, %v5_a840
  %v7_a84c = inttoptr i32 %v6_a84c to i32*
  store i32 %v0_a84c, i32* %v7_a84c, align 4
  %v0_a850 = load i32, i32* %r3.global-to-local, align 4
  %v1_a850 = load i32, i32* @r7, align 4
  %v2_a850 = add i32 %v1_a850, %v0_a850
  store i32 %v2_a850, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a85c = load i32, i32* %ip.global-to-local, align 4
  %v1_a85c = load i32, i32* @r6, align 4
  %v2_a85c = inttoptr i32 %v1_a85c to i32*
  store i32 %v0_a85c, i32* %v2_a85c, align 4
  %v0_a860 = load i32, i32* %r2.global-to-local, align 4
  %v1_a860 = trunc i32 %v0_a860 to i8
  %v2_a860 = load i32, i32* @r4, align 4
  %v3_a860 = inttoptr i32 %v2_a860 to i8*
  store i8 %v1_a860, i8* %v3_a860, align 1
  %v2_a864 = call i32 @function_14e34(i32 %v1_a850, i32 8)
  %v2_a868 = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a868 = zext i8 %v2_a868 to i32
  store i32 ptrtoint (i32* @global_var_a930.84 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a864, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_a878 = mul nuw nsw i32 %v3_a868, 4
  store i32 %v3_a878, i32* %r1.global-to-local, align 4
  %v2_a87c = load i32, i32* @global_var_1f7a0.56, align 4
  %v2_a880 = inttoptr i32 %v2_a864 to i32*
  store i32 ptrtoint (i32* @global_var_a930.84 to i32), i32* %v2_a880, align 4
  %v3_a884 = load i32, i32* @r5, align 4
  %v4_a884 = add i32 %v3_a884, 4
  %v5_a884 = inttoptr i32 %v4_a884 to i8*
  store i8 7, i8* %v5_a884, align 1
  %v0_a888 = load i32, i32* %r1.global-to-local, align 4
  %v1_a888 = add i32 %v0_a888, 4
  store i32 %v1_a888, i32* %r1.global-to-local, align 4
  %v5_a88c = call i32 @function_14f7c(i32 %v2_a87c, i32 %v1_a888, i32 ptrtoint (i32* @global_var_a930.84 to i32), i32 7)
  %v2_a890 = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a890 = zext i8 %v2_a890 to i32
  store i32 %v3_a890, i32* %r3.global-to-local, align 4
  store i32 %v5_a88c, i32* %ip.global-to-local, align 4
  %v0_a898 = load i32, i32* @r5, align 4
  %v5_a898 = mul nuw nsw i32 %v3_a890, 4
  %v6_a898 = add i32 %v5_a898, %v5_a88c
  %v7_a898 = inttoptr i32 %v6_a898 to i32*
  store i32 %v0_a898, i32* %v7_a898, align 4
  %v0_a89c = load i32, i32* %r3.global-to-local, align 4
  %v1_a89c = load i32, i32* @r7, align 4
  %v2_a89c = add i32 %v1_a89c, %v0_a89c
  store i32 %v2_a89c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v1_a8a8 = trunc i32 %v2_a89c to i8
  %v2_a8a8 = load i32, i32* @r4, align 4
  %v3_a8a8 = inttoptr i32 %v2_a8a8 to i8*
  store i8 %v1_a8a8, i8* %v3_a8a8, align 1
  %v0_a8ac = load i32, i32* %ip.global-to-local, align 4
  %v1_a8ac = load i32, i32* @r6, align 4
  %v2_a8ac = inttoptr i32 %v1_a8ac to i32*
  store i32 %v0_a8ac, i32* %v2_a8ac, align 4
  %v2_a8b0 = call i32 @function_14e34(i32 %v1_a89c, i32 8)
  %v2_a8b4 = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a8b4 = zext i8 %v2_a8b4 to i32
  store i32 ptrtoint (i32* @global_var_81cc.86 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a8b0, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v3_a8c4 = mul nuw nsw i32 %v3_a8b4, 4
  store i32 %v3_a8c4, i32* %r1.global-to-local, align 4
  %v2_a8c8 = load i32, i32* @global_var_1f7a0.56, align 4
  %v2_a8cc = inttoptr i32 %v2_a8b0 to i32*
  store i32 ptrtoint (i32* @global_var_81cc.86 to i32), i32* %v2_a8cc, align 4
  %v3_a8d0 = load i32, i32* @r5, align 4
  %v4_a8d0 = add i32 %v3_a8d0, 4
  %v5_a8d0 = inttoptr i32 %v4_a8d0 to i8*
  store i8 10, i8* %v5_a8d0, align 1
  %v0_a8d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a8d4 = add i32 %v0_a8d4, 4
  store i32 %v1_a8d4, i32* %r1.global-to-local, align 4
  %v5_a8d8 = call i32 @function_14f7c(i32 %v2_a8c8, i32 %v1_a8d4, i32 ptrtoint (i32* @global_var_81cc.86 to i32), i32 10)
  %v2_a8dc = load i8, i8* bitcast (i8** @global_var_1f79c.54 to i8*), align 4
  %v3_a8dc = zext i8 %v2_a8dc to i32
  store i32 %v3_a8dc, i32* %r3.global-to-local, align 4
  %v1_a8e0 = load i32, i32* @r6, align 4
  %v2_a8e0 = inttoptr i32 %v1_a8e0 to i32*
  store i32 %v5_a8d8, i32* %v2_a8e0, align 4
  %v0_a8e4 = load i32, i32* @r5, align 4
  %v2_a8e4 = load i32, i32* %r3.global-to-local, align 4
  %v5_a8e4 = mul i32 %v2_a8e4, 4
  %v6_a8e4 = add i32 %v5_a8e4, %v5_a8d8
  %v7_a8e4 = inttoptr i32 %v6_a8e4 to i32*
  store i32 %v0_a8e4, i32* %v7_a8e4, align 4
  %v0_a8e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a8e8 = load i32, i32* @r7, align 4
  %v2_a8e8 = add i32 %v1_a8e8, %v0_a8e8
  store i32 %v2_a8e8, i32* %r2.global-to-local, align 4
  %v1_a8f0 = trunc i32 %v2_a8e8 to i8
  %v2_a8f0 = load i32, i32* @r4, align 4
  %v3_a8f0 = inttoptr i32 %v2_a8f0 to i8*
  store i8 %v1_a8f0, i8* %v3_a8f0, align 1
  %v2_a8f4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_a8f4, i32* @r4, align 4
  store i32 %v6_a558, i32* @r5, align 4
  store i32 %v9_a558, i32* @r6, align 4
  store i32 %v12_a558, i32* @r7, align 4
  ret i32 %v1_a8e8

; uselistorder directives
  uselistorder i32 %v1_a8e8, { 1, 0 }
  uselistorder i32 %v1_a89c, { 1, 0 }
  uselistorder i32 %v1_a850, { 1, 0 }
  uselistorder i32 %v1_a804, { 1, 0 }
  uselistorder i32 %v1_a7b8, { 1, 0 }
  uselistorder i32 %v1_a76c, { 1, 0 }
  uselistorder i32 %v1_a720, { 1, 0 }
  uselistorder i32 %v1_a6d4, { 1, 0 }
  uselistorder i32 %v1_a688, { 1, 0 }
  uselistorder i32 %v1_a63c, { 1, 0 }
  uselistorder i32 %v1_a5f0, { 1, 0 }
  uselistorder i8 7, { 4, 5, 6, 7, 0, 1, 2, 3 }
  uselistorder i32* @global_var_1f7a0.56, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12 }
  uselistorder i8* bitcast (i8** @global_var_1f79c.54 to i8*), { 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_a930(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a930:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_a930 = load i32, i32* @r4, align 4
  %v15_a930 = load i32, i32* @r8, align 4
  %v21_a930 = load i32, i32* @sl, align 4
  %v1_a934 = urem i32 %arg1, 256
  store i32 %v1_a934, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_a934, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_a94c = urem i32 %arg3, 256
  store i32 %v1_a94c, i32* @r4, align 4
  %v2_a950 = call i32 @function_14e34(i32 %v1_a934, i32 4)
  %v0_a954 = load i32, i32* @r5, align 4
  store i32 %v0_a954, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a964 = load i32, i32* @r4, align 4
  store i32 %v0_a964, i32* %r0.global-to-local, align 4
  %v5_a968 = inttoptr i32 %v0_a954 to i32*
  %v6_a968 = call i32 @function_a4e8(i32 %v0_a964, i32* %v5_a968, i32 2, i32 0)
  %v1_a974 = urem i32 %v6_a968, 256
  store i32 %v1_a974, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a980 = load i32, i32* @r5, align 4
  store i32 %v0_a980, i32* %r1.global-to-local, align 4
  %v0_a984 = load i32, i32* @r4, align 4
  store i32 %v0_a984, i32* %r0.global-to-local, align 4
  %v5_a988 = trunc i32 %v6_a968 to i8
  %v6_a98c = inttoptr i32 %v0_a980 to i32*
  %v7_a98c = call i32 @function_a4e8(i32 %v0_a984, i32* %v6_a98c, i32 3, i32 65535)
  %v0_a990 = load i32, i32* @r5, align 4
  store i32 %v0_a990, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a98c, i32* @r7, align 4
  %v0_a9a0 = load i32, i32* @r4, align 4
  store i32 %v0_a9a0, i32* %r0.global-to-local, align 4
  %v4_a9a4 = inttoptr i32 %v0_a990 to i32*
  %v5_a9a4 = call i32 @function_a4e8(i32 %v0_a9a0, i32* %v4_a9a4, i32 4, i32 64)
  %v1_a9ac = urem i32 %v5_a9a4, 256
  store i32 %v1_a9ac, i32* %ip.global-to-local, align 4
  %v0_a9b0 = load i32, i32* @r5, align 4
  store i32 %v0_a9b0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a9bc = load i32, i32* @r4, align 4
  store i32 %v0_a9bc, i32* %r0.global-to-local, align 4
  %v5_a9c0 = trunc i32 %v5_a9a4 to i8
  %v6_a9c4 = inttoptr i32 %v0_a9b0 to i32*
  %v7_a9c4 = call i32 @function_a4e8(i32 %v0_a9bc, i32* %v6_a9c4, i32 5, i32 1)
  %v1_a9d0 = urem i32 %v7_a9c4, 256
  store i32 %v1_a9d0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a9dc = load i32, i32* @r5, align 4
  store i32 %v0_a9dc, i32* %r1.global-to-local, align 4
  %v0_a9e0 = load i32, i32* @r4, align 4
  store i32 %v0_a9e0, i32* %r0.global-to-local, align 4
  %v5_a9e8 = inttoptr i32 %v0_a9dc to i32*
  %v6_a9e8 = call i32 @function_a4e8(i32 %v0_a9e0, i32* %v5_a9e8, i32 6, i32 65535)
  %v0_a9f0 = load i32, i32* @r5, align 4
  store i32 %v0_a9f0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_a9e8, i32* @sl, align 4
  %v0_aa00 = load i32, i32* @r4, align 4
  store i32 %v0_aa00, i32* %r0.global-to-local, align 4
  %v4_aa04 = inttoptr i32 %v0_a9f0 to i32*
  %v5_aa04 = call i32 @function_a4e8(i32 %v0_aa00, i32* %v4_aa04, i32 7, i32 65535)
  %v0_aa08 = load i32, i32* @r5, align 4
  store i32 %v0_aa08, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_aa04, i32* @r8, align 4
  %v0_aa18 = load i32, i32* @r4, align 4
  store i32 %v0_aa18, i32* %r0.global-to-local, align 4
  %v4_aa1c = inttoptr i32 %v0_aa08 to i32*
  %v5_aa1c = call i32 @function_a4e8(i32 %v0_aa18, i32* %v4_aa1c, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_aa2c = load i32, i32* @r5, align 4
  store i32 %v0_aa2c, i32* %r1.global-to-local, align 4
  %v0_aa30 = load i32, i32* @r4, align 4
  store i32 %v0_aa30, i32* %r0.global-to-local, align 4
  %v4_aa34 = inttoptr i32 %v0_aa2c to i32*
  %v5_aa34 = call i32 @function_a4e8(i32 %v0_aa30, i32* %v4_aa34, i32 1, i32 1)
  %v1_aa3c = urem i32 %v5_aa34, 256
  store i32 %v1_aa3c, i32* %ip.global-to-local, align 4
  %v0_aa40 = load i32, i32* @r5, align 4
  store i32 %v0_aa40, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_aa4c = load i32, i32* @r4, align 4
  store i32 %v0_aa4c, i32* %r0.global-to-local, align 4
  %v5_aa54 = inttoptr i32 %v0_aa40 to i32*
  %v6_aa54 = call i32 @function_a4e8(i32 %v0_aa4c, i32* %v5_aa54, i32 19, i32 0)
  %v0_aa5c = load i32, i32* @r5, align 4
  store i32 %v0_aa5c, i32* %r1.global-to-local, align 4
  %v2_aa60 = load i32, i32* @global_var_1f858.88, align 4
  store i32 %v2_aa60, i32* %r3.global-to-local, align 4
  store i32 %v6_aa54, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_aa6c = load i32, i32* @r4, align 4
  store i32 %v0_aa6c, i32* %r0.global-to-local, align 4
  %v4_aa70 = inttoptr i32 %v0_aa5c to i32*
  %v5_aa70 = call i32 @function_a4e8(i32 %v0_aa6c, i32* %v4_aa70, i32 25, i32 %v2_aa60)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_aa84 = call i32 @function_14b30(i32 2, i32 3, i32 6)
  store i32 %v3_aa84, i32* %r0.global-to-local, align 4
  %v7_aa88 = icmp eq i32 %v3_aa84, -1
  store i1 %v7_aa88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa88, label %dec_label_pc_af6c, label %dec_label_pc_aa94

dec_label_pc_aa94:                                ; preds = %dec_label_pc_a930
  store i32 1, i32* %stack_var_-40, align 4
  %v6_aa9c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_aa9c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_aab0 = call i32 @function_14b00(i32 %v3_aa84, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_aab0, i32* %r0.global-to-local, align 4
  %v7_aab4 = icmp eq i32 %v6_aab0, -1
  store i1 %v7_aab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aab4, label %dec_label_pc_af64, label %dec_label_pc_aabc

dec_label_pc_aabc:                                ; preds = %dec_label_pc_aa94
  %v0_aabc = load i32, i32* @sl, align 4
  %v3_aabc = mul i32 %v0_aabc, 65536
  store i32 %v3_aabc, i32* %sl.global-to-local, align 4
  %v0_aac0 = load i32, i32* @r8, align 4
  %v3_aac0 = mul i32 %v0_aac0, 65536
  store i32 %v3_aac0, i32* %r8.global-to-local, align 4
  %v0_aac8 = load i32, i32* @r7, align 4
  %v3_aac8 = mul i32 %v0_aac8, 65536
  %v0_aacc = load i32, i32* @r6, align 4
  %v1_aacc = urem i32 %v0_aacc, 256
  store i32 0, i32* %stack_var_-40, align 4
  %v3_aad4 = urem i32 %v0_aac8, 65536
  store i32 %v3_aad4, i32* %r2.global-to-local, align 4
  %v3_aad8 = urem i32 %v0_aabc, 65536
  store i32 %v3_aad8, i32* %r3.global-to-local, align 4
  %v3_aadc = urem i32 %v0_aac0, 65536
  store i32 %v3_aadc, i32* %r1.global-to-local, align 4
  %v0_aae0 = load i32, i32* @fp, align 4
  %v2_aae0 = icmp eq i32 %v0_aae0, 0
  store i1 %v2_aae0, i1* %cpsr_z.global-to-local, align 1
  %tmp88 = icmp slt i32 %v0_aae0, 1
  br i1 %tmp88, label %dec_label_pc_b08c, label %dec_label_pc_ab00

dec_label_pc_ab00:                                ; preds = %dec_label_pc_aabc
  %v3_ab04 = mul i32 %v5_aa1c, 65536
  %v0_aac8.not = or i32 %v0_aac8, -65536
  %v1_ab0c = xor i32 %v0_aac8.not, 65535
  %v1_ab14 = add i32 %v3_ab04, 4325376
  %v1_ab18 = urem i32 %v0_aabc, 256
  %v3_ab20 = udiv i32 %v1_ab14, 256
  %v1_ab24 = add i32 %v3_ab04, 524288
  %v1_ab2c = add i32 %v3_ab04, 1835008
  %v1_ab30 = urem i32 %v0_aac0, 256
  %v1_ab34 = and i32 %v3_ab20, 65280
  store i32 %v1_ab34, i32* %r0.global-to-local, align 4
  %v3_ab3c = udiv i32 %v1_ab2c, 256
  %tmp89 = mul nsw i32 %v1_ab0c, 256
  %v1_ab54 = and i32 %v3_ab3c, 65280
  store i32 %v1_ab54, i32* %ip.global-to-local, align 4
  %v1_ab58 = and i32 %tmp89, 65280
  store i32 %v1_ab58, i32* @lr, align 4
  %tmp91 = udiv i32 %v1_ab0c, 256
  %v4_ab44 = sdiv i32 %v1_ab14, 16777216
  %v5_ab74 = trunc i32 %tmp91 to i8
  %v3_ab80 = mul nuw nsw i32 %v1_ab18, 256
  %v3_ab88 = ashr i32 %v1_ab14, 31
  %v3_ab8c = mul nuw nsw i32 %v1_ab30, 256
  store i32 %v3_ab8c, i32* @r5, align 4
  %tmp92 = udiv i32 %v0_aabc, 256
  %v4_ab90 = urem i32 %tmp92, 256
  %v5_ab90 = or i32 %v4_ab90, %v3_ab80
  store i32 %v5_ab90, i32* @r7, align 4
  %v3_ab94 = udiv i32 %v1_ab24, 256
  %tmp93 = udiv i32 %v0_aac0, 256
  %v4_ab98 = urem i32 %tmp93, 256
  %v5_ab98 = or i32 %v4_ab98, %v3_ab8c
  store i32 %v5_ab98, i32* %sl.global-to-local, align 4
  %v5_ab9c = trunc i32 %v3_ab88 to i8
  %v3_aba4 = sdiv i32 %v3_aac8, 16777216
  %v7_aba4 = sdiv i32 %v1_ab2c, 16777216
  %v1_aba8 = and i32 %v3_ab94, 65280
  store i32 %v1_aba8, i32* @r6, align 4
  %v3_abac = ashr i32 %v3_aac8, 31
  %v3_abb0 = ashr i32 %v1_ab2c, 31
  %v3_abb4 = udiv i32 %v1_ab0c, 65536
  %v4_abb8 = udiv i32 %v1_ab24, 16777216
  %v5_abb8 = or i32 %v4_abb8, %v1_aba8
  store i32 %v5_abb8, i32* %r8.global-to-local, align 4
  store i32 %v1_ab18, i32* %r1.global-to-local, align 4
  store i32 %v1_ab30, i32* %r2.global-to-local, align 4
  %v3_abd037 = udiv i32 %v1_aba8, 256
  store i32 %v3_abd037, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_ac30 = sext i8 %v5_a9c0 to i32
  %v2_ad30 = icmp eq i32 %v1_aacc, 0
  %sext16 = mul i32 %v0_aabc, 16777216
  %v4_ad44 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_ab24, 256
  %v4_ad58 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_aac0, 16777216
  %v4_ad60 = sdiv i32 %sext18, 16777216
  %v1_ad68 = trunc i32 %v4_ad58 to i8
  br label %dec_label_pc_abe4

dec_label_pc_abe4:                                ; preds = %bb105, %dec_label_pc_ab00
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_abf0 = call i32 @function_14e34(i32 1510, i32 4)
  store i32 %v2_abf0, i32* %r0.global-to-local, align 4
  store i32 %v2_a950, i32* %r1.global-to-local, align 4
  %v3_abf8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_abf8, i32* %r3.global-to-local, align 4
  %v2_abfc = load i32, i32* @r4, align 4
  %v5_abfc = mul i32 %v2_abfc, 4
  %v6_abfc = add i32 %v5_abfc, %v2_a950
  %v7_abfc = inttoptr i32 %v6_abfc to i32*
  store i32 %v2_abf0, i32* %v7_abfc, align 4
  %v0_ac00 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac00 = load i32, i32* %r3.global-to-local, align 4
  %v4_ac00 = mul i32 %v1_ac00, 4
  %v5_ac00 = add i32 %v4_ac00, %v0_ac00
  %v6_ac00 = inttoptr i32 %v5_ac00 to i32*
  %v7_ac00 = load i32, i32* %v6_ac00, align 4
  store i32 %v7_ac00, i32* %r4.global-to-local, align 4
  %v1_ac04 = inttoptr i32 %v7_ac00 to i8*
  %v2_ac04 = load i8, i8* %v1_ac04, align 1
  %tmp = urem i8 %v2_ac04, 16
  %v1_ac08 = zext i8 %tmp to i32
  %v1_ac0c = or i32 %v1_ac08, 64
  store i32 %v1_ac0c, i32* %r2.global-to-local, align 4
  %v1_ac10 = trunc i32 %v1_ac0c to i8
  store i8 %v1_ac10, i8* %v1_ac04, align 1
  %v0_ac14 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac14 = inttoptr i32 %v0_ac14 to i8*
  %v2_ac14 = load i8, i8* %v1_ac14, align 1
  %v1_ac18 = and i8 %v2_ac14, -16
  %v1_ac1c = or i8 %v1_ac18, 5
  store i32 %v1_a9d0, i32* %r2.global-to-local, align 4
  store i8 %v1_ac1c, i8* %v1_ac14, align 1
  %v2_ac2c = load i32, i32* %r4.global-to-local, align 4
  %v3_ac2c = add i32 %v2_ac2c, 1
  %v4_ac2c = inttoptr i32 %v3_ac2c to i8*
  store i8 %v5_a988, i8* %v4_ac2c, align 1
  store i32 %v4_ac30, i32* %r1.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_ac38 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac38 = add i32 %v2_ac38, 8
  %v4_ac38 = inttoptr i32 %v3_ac38 to i8*
  store i8 %v5_a9c0, i8* %v4_ac38, align 1
  %v0_ac3c = load i32, i32* %r2.global-to-local, align 4
  %v1_ac3c = load i32, i32* %ip.global-to-local, align 4
  %v9_ac3c = icmp eq i32 %v0_ac3c, %v1_ac3c
  store i1 %v9_ac3c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ab88, i32* %r3.global-to-local, align 4
  store i32 %v4_ab44, i32* %r2.global-to-local, align 4
  %v2_ac48 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac48 = add i32 %v2_ac48, 3
  %v4_ac48 = inttoptr i32 %v3_ac48 to i8*
  store i8 %v5_ab9c, i8* %v4_ac48, align 1
  %v0_ac4c = load i32, i32* %r2.global-to-local, align 4
  %v1_ac4c = trunc i32 %v0_ac4c to i8
  %v2_ac4c = load i32, i32* %r4.global-to-local, align 4
  %v3_ac4c = add i32 %v2_ac4c, 2
  %v4_ac4c = inttoptr i32 %v3_ac4c to i8*
  store i8 %v1_ac4c, i8* %v4_ac4c, align 1
  %v0_ac50 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac50, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_abe4
  store i32 %v3_abac, i32* %r2.global-to-local, align 4
  %extract.t114 = trunc i32 %v3_abac to i8
  br label %bb94

bb:                                               ; preds = %dec_label_pc_abe4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v3_abac, i32* %r2.global-to-local, align 4
  %v3_ac58 = load i32, i32* %r4.global-to-local, align 4
  %v4_ac58 = add i32 %v3_ac58, 6
  %v5_ac58 = inttoptr i32 %v4_ac58 to i8*
  store i8 64, i8* %v5_ac58, align 1
  %v0_ac60.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t115 = trunc i32 %v0_ac60.pre to i8
  br label %bb94

bb94:                                             ; preds = %.thread, %bb
  %v3_abac.sink.off0 = phi i8 [ %extract.t114, %.thread ], [ %extract.t115, %bb ]
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_ac60 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac60 = add i32 %v2_ac60, 5
  %v4_ac60 = inttoptr i32 %v3_ac60 to i8*
  store i8 %v3_abac.sink.off0, i8* %v4_ac60, align 1
  store i32 %v3_aba4, i32* %r1.global-to-local, align 4
  %v0_ac68 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac68, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_ac68 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_ac68, i32* %r2.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_ac6c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac6c = trunc i32 %v0_ac6c to i8
  %v2_ac6c = load i32, i32* %r4.global-to-local, align 4
  %v3_ac6c = add i32 %v2_ac6c, 9
  %v4_ac6c = inttoptr i32 %v3_ac6c to i8*
  store i8 %v1_ac6c, i8* %v4_ac6c, align 1
  %v0_ac70 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac70, label %bb98, label %bb97

bb97:                                             ; preds = %bb96
  %v1_ac70 = load i32, i32* %r2.global-to-local, align 4
  %v2_ac70 = trunc i32 %v1_ac70 to i8
  %v3_ac70 = load i32, i32* %r4.global-to-local, align 4
  %v4_ac70 = add i32 %v3_ac70, 7
  %v5_ac70 = inttoptr i32 %v4_ac70 to i8*
  store i8 %v2_ac70, i8* %v5_ac70, align 1
  br label %bb98

bb98:                                             ; preds = %bb96, %bb97
  %v3_ac74 = load i32, i32* %stack_var_-40, align 4
  %v5_ac7c = mul i32 %v3_ac74, 24
  store i32 %v5_ac7c, i32* %r3.global-to-local, align 4
  store i32 %v5_aa70, i32* %r2.global-to-local, align 4
  %v1_ac84 = load i32, i32* %r4.global-to-local, align 4
  %v2_ac84 = add i32 %v1_ac84, 12
  %v3_ac84 = inttoptr i32 %v2_ac84 to i32*
  store i32 %v5_aa70, i32* %v3_ac84, align 4
  %v0_ac88 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac88 = load i32, i32* @sb, align 4
  %v2_ac88 = add i32 %v1_ac88, %v0_ac88
  store i32 %v2_ac88, i32* %r3.global-to-local, align 4
  %v1_ac8c = add i32 %v2_ac88, 16
  %v2_ac8c = inttoptr i32 %v1_ac8c to i32*
  %v3_ac8c = load i32, i32* %v2_ac8c, align 4
  store i32 %v3_ac8c, i32* %r2.global-to-local, align 4
  %v0_ac90 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac90 = trunc i32 %v0_ac90 to i8
  %v2_ac90 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac90 = add i32 %v2_ac90, 4
  %v4_ac90 = inttoptr i32 %v3_ac90 to i8*
  store i8 %v1_ac90, i8* %v4_ac90, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_ac98 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac98 = add i32 %v0_ac98, 20
  store i32 %v1_ac98, i32* %r1.global-to-local, align 4
  %v3_ac9c = add i32 %v0_ac98, 22
  %v4_ac9c = inttoptr i32 %v3_ac9c to i8*
  store i8 101, i8* %v4_ac9c, align 1
  %v0_aca0 = load i32, i32* %r2.global-to-local, align 4
  %v1_aca0 = load i32, i32* %r4.global-to-local, align 4
  %v2_aca0 = add i32 %v1_aca0, 16
  %v3_aca0 = inttoptr i32 %v2_aca0 to i32*
  store i32 %v0_aca0, i32* %v3_aca0, align 4
  %v0_aca4 = load i32, i32* %r4.global-to-local, align 4
  %v1_aca4 = add i32 %v0_aca4, 24
  store i32 %v1_aca4, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_acac = load i32, i32* %r3.global-to-local, align 4
  %v1_acac = add i32 %v0_acac, -93
  store i32 %v1_acac, i32* %r3.global-to-local, align 4
  %v2_acb0 = load i32, i32* %r1.global-to-local, align 4
  %v3_acb0 = add i32 %v2_acb0, 3
  %v4_acb0 = inttoptr i32 %v3_acb0 to i8*
  store i8 88, i8* %v4_acb0, align 1
  %v0_acb4 = load i32, i32* %r3.global-to-local, align 4
  %v1_acb4 = trunc i32 %v0_acb4 to i8
  %v2_acb4 = load i32, i32* %r0.global-to-local, align 4
  %v3_acb4 = add i32 %v2_acb4, 12
  %v4_acb4 = inttoptr i32 %v3_acb4 to i8*
  store i8 %v1_acb4, i8* %v4_acb4, align 1
  %v0_acb8 = load i32, i32* %ip.global-to-local, align 4
  %v1_acb8 = trunc i32 %v0_acb8 to i8
  %v2_acb8 = load i32, i32* %r0.global-to-local, align 4
  %v3_acb8 = add i32 %v2_acb8, 13
  %v4_acb8 = inttoptr i32 %v3_acb8 to i8*
  store i8 %v1_acb8, i8* %v4_acb8, align 1
  %v0_acbc = load i32, i32* %r4.global-to-local, align 4
  %v1_acbc = add i32 %v0_acbc, 38
  %v2_acbc = inttoptr i32 %v1_acbc to i8*
  %v3_acbc = load i8, i8* %v2_acbc, align 1
  %tmp116 = urem i8 %v3_acbc, 16
  %v1_acc0 = zext i8 %tmp116 to i32
  %v1_acc4 = or i32 %v1_acc0, 64
  store i32 %v1_acc4, i32* %r3.global-to-local, align 4
  %v1_acc8 = trunc i32 %v1_acc4 to i8
  store i8 %v1_acc8, i8* %v2_acbc, align 1
  %v0_accc = load i32, i32* %r4.global-to-local, align 4
  %v1_accc = add i32 %v0_accc, 38
  %v2_accc = inttoptr i32 %v1_accc to i8*
  %v3_accc = load i8, i8* %v2_accc, align 1
  %v1_acd0 = and i8 %v3_accc, -16
  %v1_acd4 = or i8 %v1_acd0, 5
  store i8 %v1_acd4, i8* %v2_accc, align 1
  %v0_ace0 = load i32, i32* %r4.global-to-local, align 4
  %v1_ace0 = add i32 %v0_ace0, 38
  store i32 %v1_ace0, i32* @r5, align 4
  %v3_ace4 = add i32 %v0_ace0, 39
  %v4_ace4 = inttoptr i32 %v3_ace4 to i8*
  store i8 %v5_a988, i8* %v4_ace4, align 1
  store i32 %v7_aba4, i32* %r1.global-to-local, align 4
  store i32 %tmp91, i32* %r3.global-to-local, align 4
  store i32 %v3_abb0, i32* %r2.global-to-local, align 4
  %v2_acf4 = load i32, i32* @r5, align 4
  %v3_acf4 = add i32 %v2_acf4, 4
  %v4_acf4 = inttoptr i32 %v3_acf4 to i8*
  store i8 %v5_ab74, i8* %v4_acf4, align 1
  %v0_acf8 = load i32, i32* %r1.global-to-local, align 4
  %v1_acf8 = trunc i32 %v0_acf8 to i8
  %v2_acf8 = load i32, i32* @r5, align 4
  %v3_acf8 = add i32 %v2_acf8, 2
  %v4_acf8 = inttoptr i32 %v3_acf8 to i8*
  store i8 %v1_acf8, i8* %v4_acf8, align 1
  %v0_acfc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_acfc, label %bb100, label %bb99

bb99:                                             ; preds = %bb98
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb100

bb100:                                            ; preds = %bb98, %bb99
  store i32 %v3_abb4, i32* %r1.global-to-local, align 4
  %v0_ad04 = load i32, i32* %r2.global-to-local, align 4
  %v1_ad04 = trunc i32 %v0_ad04 to i8
  %v2_ad04 = load i32, i32* @r5, align 4
  %v3_ad04 = add i32 %v2_ad04, 3
  %v4_ad04 = inttoptr i32 %v3_ad04 to i8*
  store i8 %v1_ad04, i8* %v4_ad04, align 1
  store i32 %v4_ac30, i32* %r2.global-to-local, align 4
  %v0_ad0c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ad0c, label %bb102, label %bb101

bb101:                                            ; preds = %bb100
  %v1_ad0c = load i32, i32* %r3.global-to-local, align 4
  %v2_ad0c = trunc i32 %v1_ad0c to i8
  %v3_ad0c = load i32, i32* @r5, align 4
  %v4_ad0c = add i32 %v3_ad0c, 6
  %v5_ad0c = inttoptr i32 %v4_ad0c to i8*
  store i8 %v2_ad0c, i8* %v5_ad0c, align 1
  br label %bb102

bb102:                                            ; preds = %bb100, %bb101
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_ad14 = load i32, i32* %r1.global-to-local, align 4
  %v1_ad14 = trunc i32 %v0_ad14 to i8
  %v2_ad14 = load i32, i32* @r5, align 4
  %v3_ad14 = add i32 %v2_ad14, 5
  %v4_ad14 = inttoptr i32 %v3_ad14 to i8*
  store i8 %v1_ad14, i8* %v4_ad14, align 1
  %v0_ad18 = load i32, i32* %r2.global-to-local, align 4
  %v1_ad18 = trunc i32 %v0_ad18 to i8
  %v2_ad18 = load i32, i32* @r5, align 4
  %v3_ad18 = add i32 %v2_ad18, 8
  %v4_ad18 = inttoptr i32 %v3_ad18 to i8*
  store i8 %v1_ad18, i8* %v4_ad18, align 1
  %v0_ad1c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ad1c, label %bb104, label %bb103

bb103:                                            ; preds = %bb102
  %v1_ad1c = load i32, i32* %ip.global-to-local, align 4
  %v2_ad1c = trunc i32 %v1_ad1c to i8
  %v3_ad1c = load i32, i32* @r5, align 4
  %v4_ad1c = add i32 %v3_ad1c, 7
  %v5_ad1c = inttoptr i32 %v4_ad1c to i8*
  store i8 %v2_ad1c, i8* %v5_ad1c, align 1
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v0_ad20 = load i32, i32* %r3.global-to-local, align 4
  %v1_ad20 = trunc i32 %v0_ad20 to i8
  %v2_ad20 = load i32, i32* @r5, align 4
  %v3_ad20 = add i32 %v2_ad20, 9
  %v4_ad20 = inttoptr i32 %v3_ad20 to i8*
  store i8 %v1_ad20, i8* %v4_ad20, align 1
  %v0_ad24 = call i32 @function_10a44()
  store i32 %v0_ad24, i32* %r0.global-to-local, align 4
  store i32 %v1_aacc, i32* %r1.global-to-local, align 4
  store i1 %v2_ad30, i1* %cpsr_z.global-to-local, align 1
  %v1_ad34 = sub i32 1023, %v0_ad24
  store i32 %v1_ad34, i32* %r3.global-to-local, align 4
  br i1 %v2_ad30, label %.thread21, label %.thread22

.thread21:                                        ; preds = %bb104
  %v2_ad3c = load i32, i32* @r5, align 4
  %v3_ad3c = add i32 %v2_ad3c, 16
  %v4_ad3c = inttoptr i32 %v3_ad3c to i32*
  store i32 %v1_ad34, i32* %v4_ad3c, align 4
  br label %bb105

.thread22:                                        ; preds = %bb104
  %v1_ad38 = load i32, i32* %r4.global-to-local, align 4
  %v2_ad38 = add i32 %v1_ad38, 16
  %v3_ad38 = inttoptr i32 %v2_ad38 to i32*
  %v4_ad38 = load i32, i32* %v3_ad38, align 4
  store i32 %v4_ad38, i32* %r3.global-to-local, align 4
  %v2_ad40 = load i32, i32* @r5, align 4
  %v3_ad40 = add i32 %v2_ad40, 16
  %v4_ad40 = inttoptr i32 %v3_ad40 to i32*
  store i32 %v4_ad38, i32* %v4_ad40, align 4
  br label %bb105

bb105:                                            ; preds = %.thread21, %.thread22
  store i32 %v4_ad44, i32* %r3.global-to-local, align 4
  %v0_ad48 = load i32, i32* %r4.global-to-local, align 4
  %v1_ad48 = add i32 %v0_ad48, 58
  store i32 %v1_ad48, i32* @r6, align 4
  %v1_ad4c = load i32, i32* @r5, align 4
  %v2_ad4c = add i32 %v1_ad4c, 12
  %v3_ad4c = inttoptr i32 %v2_ad4c to i32*
  store i32 %v0_ad24, i32* %v3_ad4c, align 4
  %v0_ad50 = load i32, i32* %r3.global-to-local, align 4
  %v1_ad50 = trunc i32 %v0_ad50 to i8
  %v2_ad50 = load i32, i32* @r6, align 4
  %v3_ad50 = add i32 %v2_ad50, 1
  %v4_ad50 = inttoptr i32 %v3_ad50 to i8*
  store i8 %v1_ad50, i8* %v4_ad50, align 1
  %v3_ad54 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ad54, i32* %r3.global-to-local, align 4
  store i32 %v4_ad58, i32* %r2.global-to-local, align 4
  %v1_ad5c = add i32 %v3_ad54, 1
  store i32 %v1_ad5c, i32* @r4, align 4
  store i32 %v4_ad60, i32* %r1.global-to-local, align 4
  %v1_ad64 = load i32, i32* @fp, align 4
  %v9_ad64 = icmp eq i32 %v1_ad5c, %v1_ad64
  store i1 %v9_ad64, i1* %cpsr_z.global-to-local, align 1
  %v2_ad68 = load i32, i32* @r6, align 4
  %v3_ad68 = add i32 %v2_ad68, 5
  %v4_ad68 = inttoptr i32 %v3_ad68 to i8*
  store i8 %v1_ad68, i8* %v4_ad68, align 1
  %v0_ad6c = load i32, i32* @r7, align 4
  %v1_ad6c = trunc i32 %v0_ad6c to i8
  %v2_ad6c = load i32, i32* @r6, align 4
  %v3_ad6c = inttoptr i32 %v2_ad6c to i8*
  store i8 %v1_ad6c, i8* %v3_ad6c, align 1
  %v0_ad70 = load i32, i32* %sl.global-to-local, align 4
  %v1_ad70 = trunc i32 %v0_ad70 to i8
  %v2_ad70 = load i32, i32* @r6, align 4
  %v3_ad70 = add i32 %v2_ad70, 2
  %v4_ad70 = inttoptr i32 %v3_ad70 to i8*
  store i8 %v1_ad70, i8* %v4_ad70, align 1
  %v0_ad74 = load i32, i32* %r1.global-to-local, align 4
  %v1_ad74 = trunc i32 %v0_ad74 to i8
  %v2_ad74 = load i32, i32* @r6, align 4
  %v3_ad74 = add i32 %v2_ad74, 3
  %v4_ad74 = inttoptr i32 %v3_ad74 to i8*
  store i8 %v1_ad74, i8* %v4_ad74, align 1
  %v0_ad78 = load i32, i32* %r8.global-to-local, align 4
  %v1_ad78 = trunc i32 %v0_ad78 to i8
  %v2_ad78 = load i32, i32* @r6, align 4
  %v3_ad78 = add i32 %v2_ad78, 4
  %v4_ad78 = inttoptr i32 %v3_ad78 to i8*
  store i8 %v1_ad78, i8* %v4_ad78, align 1
  %v0_ad7c = load i32, i32* @r4, align 4
  store i32 %v0_ad7c, i32* %stack_var_-40, align 4
  %v5_ad80 = icmp slt i32 %v1_ad5c, %v1_ad64
  br i1 %v5_ad80, label %dec_label_pc_abe4, label %dec_label_pc_ad84

dec_label_pc_ad84:                                ; preds = %bb105
  %v1_ad8c = add i32 %v5_aa1c, 8
  store i32 %v1_ad8c, i32* %r2.global-to-local, align 4
  %v1_ad90 = add i32 %v5_aa1c, 66
  store i32 %v1_ad90, i32* %r3.global-to-local, align 4
  %v0_ad9c.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_ad9c.preheader

dec_label_pc_ad9c.preheader:                      ; preds = %dec_label_pc_ad84, %dec_label_pc_b08c
  %v0_ad9c.pre = phi i32 [ %v0_ad9c.pre.pre, %dec_label_pc_ad84 ], [ %v0_aae0, %dec_label_pc_b08c ]
  %stack_var_-160.0.ph = phi i32 [ %v1_ad90, %dec_label_pc_ad84 ], [ %v1_b098, %dec_label_pc_b08c ]
  %stack_var_-156.0.ph = phi i32 [ %v1_ad8c, %dec_label_pc_ad84 ], [ %v1_b094, %dec_label_pc_b08c ]
  %v3_afec = icmp eq i32 %v3_aad4, 65535
  %v2_b05c = icmp eq i32 %v1_aacc, 0
  %v2_ae40 = ptrtoint i32* %stack_var_-44 to i32
  %v2_ae58 = ptrtoint i32* %stack_var_-48 to i32
  %v2_ae68 = ptrtoint i32* %stack_var_-52 to i32
  %v2_ae74 = ptrtoint i32* %stack_var_-50 to i32
  %v2_ae88 = icmp eq i32 %v1_aa3c, 0
  %v2_ade4 = icmp eq i32 %v5_aa70, -1
  %v7_ade4 = icmp eq i32 %v5_aa70, -1
  br label %dec_label_pc_ad9c

dec_label_pc_ad9c:                                ; preds = %dec_label_pc_ae90, %dec_label_pc_ad9c.preheader
  %v0_ad9c = phi i32 [ %v0_ad9c.pre, %dec_label_pc_ad9c.preheader ], [ %v1_af54, %dec_label_pc_ae90 ]
  %v2_ad9c = icmp eq i32 %v0_ad9c, 0
  store i1 %v2_ad9c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp106 = icmp slt i32 %v0_ad9c, 1
  br label %dec_label_pc_ada4

dec_label_pc_ada4:                                ; preds = %dec_label_pc_ada4, %dec_label_pc_ad9c
  br i1 %tmp106, label %dec_label_pc_ada4, label %dec_label_pc_ada8

dec_label_pc_ada8:                                ; preds = %dec_label_pc_ada4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_adb4

dec_label_pc_adb4:                                ; preds = %dec_label_pc_ae90, %dec_label_pc_ada8
  %v1_adc8 = phi i32 [ %v1_af50, %dec_label_pc_ae90 ], [ 0, %dec_label_pc_ada8 ]
  %v5_adb8 = mul i32 %v1_adc8, 24
  %v1_adbc = load i32, i32* @sb, align 4
  %v2_adbc = add i32 %v1_adbc, %v5_adb8
  store i32 %v2_adbc, i32* %r3.global-to-local, align 4
  store i32 %v2_a950, i32* %r1.global-to-local, align 4
  %v1_adc4 = add i32 %v2_adbc, 20
  %v2_adc4 = inttoptr i32 %v1_adc4 to i8*
  %v3_adc4 = load i8, i8* %v2_adc4, align 1
  %v4_adc4 = zext i8 %v3_adc4 to i32
  store i32 %v4_adc4, i32* %r2.global-to-local, align 4
  %v4_adc8 = mul i32 %v1_adc8, 4
  %v5_adc8 = add i32 %v4_adc8, %v2_a950
  %v6_adc8 = inttoptr i32 %v5_adc8 to i32*
  %v7_adc8 = load i32, i32* %v6_adc8, align 4
  store i32 %v7_adc8, i32* @r5, align 4
  %v7_adcc = icmp eq i8 %v3_adc4, 31
  store i1 %v7_adcc, i1* %cpsr_z.global-to-local, align 1
  %v1_add0 = add i32 %v7_adc8, 24
  store i32 %v1_add0, i32* @r8, align 4
  %v1_add4 = add i32 %v7_adc8, 38
  store i32 %v1_add4, i32* @r6, align 4
  %v1_add8 = add i32 %v7_adc8, 58
  store i32 %v1_add8, i32* @r7, align 4
  %tmp117 = icmp ult i8 %v3_adc4, 32
  br i1 %tmp117, label %dec_label_pc_af74, label %dec_label_pc_ade0

dec_label_pc_ade0:                                ; preds = %dec_label_pc_adb4
  store i32 %v5_aa70, i32* %r2.global-to-local, align 4
  store i1 %v7_ade4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ade4, label %dec_label_pc_afdc, label %dec_label_pc_adec

dec_label_pc_adec:                                ; preds = %dec_label_pc_af74, %dec_label_pc_ade0
  store i32 %v3_aad4, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_afec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_afec, label %dec_label_pc_aff8, label %dec_label_pc_ae00

dec_label_pc_ae00:                                ; preds = %dec_label_pc_afdc.dec_label_pc_ae00_crit_edge, %dec_label_pc_adec
  %v1_ae04 = phi i32 [ %v1_ae04.pre, %dec_label_pc_afdc.dec_label_pc_ae00_crit_edge ], [ 65535, %dec_label_pc_adec ]
  store i32 %v3_aad8, i32* %r1.global-to-local, align 4
  %v9_ae04 = icmp eq i32 %v3_aad8, %v1_ae04
  store i1 %v9_ae04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ae04, label %dec_label_pc_b030, label %dec_label_pc_ae0c

dec_label_pc_ae0c:                                ; preds = %dec_label_pc_aff8.dec_label_pc_ae0c_crit_edge, %dec_label_pc_ae00
  %v1_ae10 = phi i32 [ %v1_ae10.pre, %dec_label_pc_aff8.dec_label_pc_ae0c_crit_edge ], [ %v1_ae04, %dec_label_pc_ae00 ]
  store i32 %v3_aadc, i32* %r2.global-to-local, align 4
  %v9_ae10 = icmp eq i32 %v3_aadc, %v1_ae10
  store i1 %v9_ae10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ae10, label %dec_label_pc_b04c, label %dec_label_pc_ae18

dec_label_pc_ae18:                                ; preds = %dec_label_pc_b030, %dec_label_pc_ae0c
  store i32 %v1_aacc, i32* %r3.global-to-local, align 4
  store i1 %v2_b05c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b05c, label %dec_label_pc_b070, label %.thread23

.thread23:                                        ; preds = %dec_label_pc_ae18
  %v1_ae20 = load i32, i32* @r5, align 4
  %v2_ae20 = add i32 %v1_ae20, 16
  %v3_ae20 = inttoptr i32 %v2_ae20 to i32*
  %v4_ae20 = load i32, i32* %v3_ae20, align 4
  store i32 %v4_ae20, i32* %r3.global-to-local, align 4
  %v2_ae24 = load i32, i32* @r6, align 4
  %v3_ae24 = add i32 %v2_ae24, 16
  %v4_ae24 = inttoptr i32 %v3_ae24 to i32*
  store i32 %v4_ae20, i32* %v4_ae24, align 4
  br label %dec_label_pc_ae2c

dec_label_pc_ae2c:                                ; preds = %bb109, %.thread23, %dec_label_pc_b070
  %v0_ae2c = call i32 @function_10a44()
  store i32 %v0_ae2c, i32* %r0.global-to-local, align 4
  store i32 %v0_ae2c, i32* %stack_var_-44, align 4
  %v0_ae34 = call i32 @function_10a44()
  store i32 %v0_ae34, i32* %r0.global-to-local, align 4
  store i32 %v0_ae34, i32* %stack_var_-48, align 4
  %v0_ae3c = call i32 @function_10a44()
  store i32 %v2_ae40, i32* %r1.global-to-local, align 4
  store i32 %v0_ae3c, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_ae4c = load i32, i32* @r8, align 4
  store i32 %v0_ae4c, i32* %r0.global-to-local, align 4
  %v3_ae50 = call i32 @function_138f0(i32 %v0_ae4c, i32 %v2_ae40, i32 4)
  %v0_ae54 = load i32, i32* @r8, align 4
  %v1_ae54 = add i32 %v0_ae54, 6
  store i32 %v1_ae54, i32* %r0.global-to-local, align 4
  store i32 %v2_ae58, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_ae60 = call i32 @function_138f0(i32 %v1_ae54, i32 %v2_ae58, i32 4)
  %v0_ae64 = load i32, i32* @r8, align 4
  %v1_ae64 = add i32 %v0_ae64, 4
  store i32 %v1_ae64, i32* %r0.global-to-local, align 4
  store i32 %v2_ae68, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_ae70 = call i32 @function_138f0(i32 %v1_ae64, i32 %v2_ae68, i32 2)
  store i32 %v2_ae74, i32* %r1.global-to-local, align 4
  %v0_ae78 = load i32, i32* @r8, align 4
  %v1_ae78 = add i32 %v0_ae78, 10
  store i32 %v1_ae78, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_ae80 = call i32 @function_138f0(i32 %v1_ae78, i32 %v2_ae74, i32 2)
  store i32 %v3_ae80, i32* %r0.global-to-local, align 4
  store i32 %v1_aa3c, i32* %r1.global-to-local, align 4
  store i1 %v2_ae88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ae88, label %dec_label_pc_ae90, label %dec_label_pc_b07c

dec_label_pc_ae90:                                ; preds = %dec_label_pc_ae2c, %dec_label_pc_b07c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ae94 = load i32, i32* @sl, align 4
  %v1_ae94 = trunc i32 %v0_ae94 to i8
  %v2_ae94 = load i32, i32* @r5, align 4
  %v3_ae94 = add i32 %v2_ae94, 10
  %v4_ae94 = inttoptr i32 %v3_ae94 to i8*
  store i8 %v1_ae94, i8* %v4_ae94, align 1
  %v0_ae98 = load i32, i32* @sl, align 4
  %v1_ae98 = trunc i32 %v0_ae98 to i8
  %v2_ae98 = load i32, i32* @r5, align 4
  %v3_ae98 = add i32 %v2_ae98, 11
  %v4_ae98 = inttoptr i32 %v3_ae98 to i8*
  store i8 %v1_ae98, i8* %v4_ae98, align 1
  %v0_ae9c = load i32, i32* @r5, align 4
  store i32 %v0_ae9c, i32* @r0, align 4
  %v2_aea0 = call i32 @function_f008(i32 %v0_ae9c, i32 20)
  %v3_aea0 = trunc i32 %v2_aea0 to i8
  %v4_aea4 = sdiv i32 %v2_aea0, 256
  store i32 %v4_aea4, i32* %r3.global-to-local, align 4
  %v1_aea8 = trunc i32 %v4_aea4 to i8
  %v2_aea8 = load i32, i32* @r5, align 4
  %v3_aea8 = add i32 %v2_aea8, 11
  %v4_aea8 = inttoptr i32 %v3_aea8 to i8*
  store i8 %v1_aea8, i8* %v4_aea8, align 1
  %v3_aeac = load i32, i32* @r5, align 4
  %v4_aeac = add i32 %v3_aeac, 10
  %v5_aeac = inttoptr i32 %v4_aeac to i8*
  store i8 %v3_aea0, i8* %v5_aeac, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_aeb4 = load i32, i32* @sl, align 4
  %v1_aeb4 = trunc i32 %v0_aeb4 to i8
  %v2_aeb4 = load i32, i32* @r6, align 4
  %v3_aeb4 = add i32 %v2_aeb4, 10
  %v4_aeb4 = inttoptr i32 %v3_aeb4 to i8*
  store i8 %v1_aeb4, i8* %v4_aeb4, align 1
  %v0_aeb8 = load i32, i32* @sl, align 4
  %v1_aeb8 = trunc i32 %v0_aeb8 to i8
  %v2_aeb8 = load i32, i32* @r6, align 4
  %v3_aeb8 = add i32 %v2_aeb8, 11
  %v4_aeb8 = inttoptr i32 %v3_aeb8 to i8*
  store i8 %v1_aeb8, i8* %v4_aeb8, align 1
  %v0_aebc = load i32, i32* @r6, align 4
  store i32 %v0_aebc, i32* @r0, align 4
  %v2_aec0 = call i32 @function_f008(i32 %v0_aebc, i32 20)
  %v3_aec0 = trunc i32 %v2_aec0 to i8
  store i32 %v2_aec0, i32* %r0.global-to-local, align 4
  %v4_aec4 = sdiv i32 %v2_aec0, 256
  store i32 %v4_aec4, i32* %r3.global-to-local, align 4
  %v3_aec8 = load i32, i32* @r6, align 4
  %v4_aec8 = add i32 %v3_aec8, 10
  %v5_aec8 = inttoptr i32 %v4_aec8 to i8*
  store i8 %v3_aec0, i8* %v5_aec8, align 1
  %v0_aecc = load i32, i32* %r3.global-to-local, align 4
  %v1_aecc = trunc i32 %v0_aecc to i8
  %v2_aecc = load i32, i32* @r6, align 4
  %v3_aecc = add i32 %v2_aecc, 11
  %v4_aecc = inttoptr i32 %v3_aecc to i8*
  store i8 %v1_aecc, i8* %v4_aecc, align 1
  %v0_aed0 = load i32, i32* @r7, align 4
  %v1_aed0 = add i32 %v0_aed0, 4
  %v2_aed0 = inttoptr i32 %v1_aed0 to i8*
  %v3_aed0 = load i8, i8* %v2_aed0, align 1
  %v4_aed0 = zext i8 %v3_aed0 to i32
  store i32 %v4_aed0, i32* %r3.global-to-local, align 4
  %v1_aed4 = add i32 %v0_aed0, 5
  %v2_aed4 = inttoptr i32 %v1_aed4 to i8*
  %v3_aed4 = load i8, i8* %v2_aed4, align 1
  %v4_aed4 = zext i8 %v3_aed4 to i32
  store i32 %v0_aed0, i32* @r1, align 4
  %v4_aedc = mul nuw nsw i32 %v4_aed4, 256
  %v5_aedc = or i32 %v4_aedc, %v4_aed0
  store i32 %v5_aedc, i32* %r2.global-to-local, align 4
  %v0_aee0 = load i32, i32* @sl, align 4
  %v1_aee0 = trunc i32 %v0_aee0 to i8
  %v3_aee0 = add i32 %v0_aed0, 6
  %v4_aee0 = inttoptr i32 %v3_aee0 to i8*
  store i8 %v1_aee0, i8* %v4_aee0, align 1
  store i32 %stack_var_-156.0.ph, i32* %r3.global-to-local, align 4
  %v0_aee8 = load i32, i32* @sl, align 4
  %v1_aee8 = trunc i32 %v0_aee8 to i8
  %v2_aee8 = load i32, i32* @r7, align 4
  %v3_aee8 = add i32 %v2_aee8, 7
  %v4_aee8 = inttoptr i32 %v3_aee8 to i8*
  store i8 %v1_aee8, i8* %v4_aee8, align 1
  %v0_aeec = load i32, i32* @r6, align 4
  store i32 %v0_aeec, i32* %r0.global-to-local, align 4
  %v4_aef0 = call i32 @function_f064(i32 %v0_aeec, i32 %v0_aed0, i32 %v5_aedc, i32 %stack_var_-156.0.ph)
  %v5_aef0 = trunc i32 %v4_aef0 to i8
  store i32 %v4_aef0, i32* %r0.global-to-local, align 4
  %v3_aef4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_aef4, i32* %r3.global-to-local, align 4
  %v3_aef8 = mul i32 %v3_aef4, 32
  store i32 %v3_aef8, i32* %r2.global-to-local, align 4
  %v0_aefc = load i32, i32* @r5, align 4
  %v1_aefc = add i32 %v0_aefc, 16
  %v2_aefc = inttoptr i32 %v1_aefc to i32*
  %v3_aefc = load i32, i32* %v2_aefc, align 4
  store i32 %v3_aefc, i32* %r1.global-to-local, align 4
  %v5_af00 = mul i32 %v3_aef4, 24
  store i32 %v5_af00, i32* %r2.global-to-local, align 4
  %v4_af0442 = udiv i32 %v4_aef0, 256
  %v1_af08 = trunc i32 %v4_af0442 to i8
  %v2_af08 = load i32, i32* @r7, align 4
  %v3_af08 = add i32 %v2_af08, 7
  %v4_af08 = inttoptr i32 %v3_af08 to i8*
  store i8 %v1_af08, i8* %v4_af08, align 1
  %v0_af0c = load i32, i32* %r2.global-to-local, align 4
  %v1_af0c = load i32, i32* @sb, align 4
  %v2_af0c = add i32 %v1_af0c, %v0_af0c
  store i32 %v2_af0c, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_af14 = load i32, i32* @r7, align 4
  %v4_af14 = add i32 %v3_af14, 6
  %v5_af14 = inttoptr i32 %v4_af14 to i8*
  store i8 %v5_aef0, i8* %v5_af14, align 1
  %v0_af18 = load i32, i32* %r1.global-to-local, align 4
  %v1_af18 = load i32, i32* %lr.global-to-local, align 4
  %v2_af18 = add i32 %v1_af18, 4
  %v3_af18 = inttoptr i32 %v2_af18 to i32*
  store i32 %v0_af18, i32* %v3_af18, align 4
  %v0_af1c = load i32, i32* %r3.global-to-local, align 4
  %v1_af1c = trunc i32 %v0_af1c to i8
  %v2_af1c = load i32, i32* %r2.global-to-local, align 4
  %v3_af1c = load i32, i32* @sb, align 4
  %v4_af1c = add i32 %v3_af1c, %v2_af1c
  %v5_af1c = inttoptr i32 %v4_af1c to i8*
  store i8 %v1_af1c, i8* %v5_af1c, align 1
  %v0_af20 = load i32, i32* @sl, align 4
  %v1_af20 = trunc i32 %v0_af20 to i8
  %v2_af20 = load i32, i32* %lr.global-to-local, align 4
  %v3_af20 = add i32 %v2_af20, 2
  %v4_af20 = inttoptr i32 %v3_af20 to i8*
  store i8 %v1_af20, i8* %v4_af20, align 1
  %v0_af24 = load i32, i32* @sl, align 4
  %v1_af24 = trunc i32 %v0_af24 to i8
  %v2_af24 = load i32, i32* %lr.global-to-local, align 4
  %v3_af24 = add i32 %v2_af24, 1
  %v4_af24 = inttoptr i32 %v3_af24 to i8*
  store i8 %v1_af24, i8* %v4_af24, align 1
  %v0_af28 = load i32, i32* @sl, align 4
  %v1_af28 = trunc i32 %v0_af28 to i8
  %v2_af28 = load i32, i32* %lr.global-to-local, align 4
  %v3_af28 = add i32 %v2_af28, 3
  %v4_af28 = inttoptr i32 %v3_af28 to i8*
  store i8 %v1_af28, i8* %v4_af28, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_af34 = load i32, i32* @r5, align 4
  store i32 %v0_af34, i32* %r1.global-to-local, align 4
  store i32 %v3_aa84, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-160.0.ph, i32* %r2.global-to-local, align 4
  %v0_af40 = load i32, i32* %lr.global-to-local, align 4
  %v6_af48 = inttoptr i32 %v0_af34 to i32*
  %v7_af48 = call i32 @function_14acc(i32 %v3_aa84, i32* %v6_af48, i32 %stack_var_-160.0.ph, i32 16384, i32 %v0_af40, i32 16)
  %v3_af4c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_af4c, i32* %r3.global-to-local, align 4
  %v1_af50 = add i32 %v3_af4c, 1
  store i32 %v1_af50, i32* %r0.global-to-local, align 4
  %v1_af54 = load i32, i32* @fp, align 4
  %v9_af54 = icmp eq i32 %v1_af50, %v1_af54
  store i1 %v9_af54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_af50, i32* %stack_var_-40, align 4
  %v6_af5c = icmp slt i32 %v1_af50, %v1_af54
  br i1 %v6_af5c, label %dec_label_pc_adb4, label %dec_label_pc_ad9c

dec_label_pc_af64:                                ; preds = %dec_label_pc_aa94
  store i32 %v3_aa84, i32* %r0.global-to-local, align 4
  %v1_af68 = call i32 @function_14234(i32 %v3_aa84)
  store i32 %v1_af68, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_af6c

dec_label_pc_af6c:                                ; preds = %dec_label_pc_a930, %dec_label_pc_af64
  %v29_af70 = phi i32 [ %v3_aa84, %dec_label_pc_a930 ], [ %v1_af68, %dec_label_pc_af64 ]
  store i32 %v3_a930, i32* %r4.global-to-local, align 4
  store i32 %v15_a930, i32* %r8.global-to-local, align 4
  store i32 %v21_a930, i32* %sl.global-to-local, align 4
  ret i32 %v29_af70

dec_label_pc_af74:                                ; preds = %dec_label_pc_adb4
  %v1_af74 = add i32 %v2_adbc, 16
  %v2_af74 = inttoptr i32 %v1_af74 to i32*
  %v3_af74 = load i32, i32* %v2_af74, align 4
  store i32 %v3_af74, i32* %r4.global-to-local, align 4
  %v0_af78 = call i32 @function_10a44()
  store i32 %v0_af78, i32* %r0.global-to-local, align 4
  %v3_af7c = load i32, i32* %stack_var_-40, align 4
  %v5_af84 = mul i32 %v3_af7c, 24
  %v0_af88 = load i32, i32* %r4.global-to-local, align 4
  %v1_af8c = load i32, i32* @sb, align 4
  %v2_af8c = add i32 %v1_af8c, %v5_af84
  store i32 %v2_af8c, i32* %r1.global-to-local, align 4
  %v1_af90 = and i32 %v0_af88, 65280
  store i32 %v1_af90, i32* %r3.global-to-local, align 4
  %v1_af88 = udiv i32 %v0_af88, 256
  %v3_af94 = and i32 %v1_af88, 65280
  store i32 %v3_af94, i32* %r2.global-to-local, align 4
  %v3_af98 = mul i32 %v0_af88, 16777216
  store i32 %v3_af98, i32* %ip.global-to-local, align 4
  %v1_af9c = add i32 %v2_af8c, 20
  %v2_af9c = inttoptr i32 %v1_af9c to i8*
  %v3_af9c = load i8, i8* %v2_af9c, align 1
  %v4_af9c = zext i8 %v3_af9c to i32
  store i32 %v4_af9c, i32* %lr.global-to-local, align 4
  %v4_afa0 = mul nuw nsw i32 %v1_af90, 256
  %v5_afa0 = or i32 %v4_afa0, %v3_af98
  store i32 %v5_afa0, i32* %ip.global-to-local, align 4
  %v2_afa8 = call i32 @llvm.bswap.i32(i32 %v0_af88)
  %v7_afac = lshr i32 %v0_af78, %v4_af9c
  %v8_afac = add i32 %v7_afac, %v2_afa8
  %v3_afb8 = mul i32 %v8_afac, 16777216
  %v1_afbc = and i32 %v8_afac, 65280
  store i32 %v1_afbc, i32* %r0.global-to-local, align 4
  store i32 %v5_aa70, i32* %r2.global-to-local, align 4
  %v4_afc8 = mul nuw nsw i32 %v1_afbc, 256
  %v5_afc8 = or i32 %v4_afc8, %v3_afb8
  store i32 %v5_afc8, i32* %r1.global-to-local, align 4
  %v2_afcc = call i32 @llvm.bswap.i32(i32 %v8_afac)
  store i32 %v2_afcc, i32* %r3.global-to-local, align 4
  store i1 %v7_ade4, i1* %cpsr_z.global-to-local, align 1
  %v1_afd4 = load i32, i32* @r5, align 4
  %v2_afd4 = add i32 %v1_afd4, 16
  %v3_afd4 = inttoptr i32 %v2_afd4 to i32*
  store i32 %v2_afcc, i32* %v3_afd4, align 4
  br i1 %v2_ade4, label %dec_label_pc_afdc, label %dec_label_pc_adec

dec_label_pc_afdc:                                ; preds = %dec_label_pc_af74, %dec_label_pc_ade0
  %v0_afdc = call i32 @function_10a44()
  store i32 %v0_afdc, i32* %r0.global-to-local, align 4
  store i32 %v3_aad4, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_afec, i1* %cpsr_z.global-to-local, align 1
  %v1_aff0 = load i32, i32* @r5, align 4
  %v2_aff0 = add i32 %v1_aff0, 12
  %v3_aff0 = inttoptr i32 %v2_aff0 to i32*
  store i32 %v0_afdc, i32* %v3_aff0, align 4
  br i1 %v3_afec, label %dec_label_pc_aff8, label %dec_label_pc_afdc.dec_label_pc_ae00_crit_edge

dec_label_pc_afdc.dec_label_pc_ae00_crit_edge:    ; preds = %dec_label_pc_afdc
  %v1_ae04.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ae00

dec_label_pc_aff8:                                ; preds = %dec_label_pc_afdc, %dec_label_pc_adec
  %v0_aff8 = call i32 @function_10a44()
  %v3_b000 = urem i32 %v0_aff8, 65536
  store i32 %v3_b000, i32* %r0.global-to-local, align 4
  %v1_b008 = sub nsw i32 999, %v3_b000
  store i32 %v1_b008, i32* %r2.global-to-local, align 4
  %v3_b00c = sdiv i32 %v1_b008, 256
  store i32 %v3_b00c, i32* %r1.global-to-local, align 4
  %v3_b01039 = udiv i32 %v3_b000, 256
  store i32 %v3_b01039, i32* %r3.global-to-local, align 4
  %v1_b014 = trunc i32 %v3_b01039 to i8
  %v2_b014 = load i32, i32* @r5, align 4
  %v3_b014 = add i32 %v2_b014, 5
  %v4_b014 = inttoptr i32 %v3_b014 to i8*
  store i8 %v1_b014, i8* %v4_b014, align 1
  %v0_b018 = load i32, i32* %r0.global-to-local, align 4
  %v1_b018 = trunc i32 %v0_b018 to i8
  %v2_b018 = load i32, i32* @r5, align 4
  %v3_b018 = add i32 %v2_b018, 4
  %v4_b018 = inttoptr i32 %v3_b018 to i8*
  store i8 %v1_b018, i8* %v4_b018, align 1
  %v0_b01c = load i32, i32* %r1.global-to-local, align 4
  %v1_b01c = trunc i32 %v0_b01c to i8
  %v2_b01c = load i32, i32* @r6, align 4
  %v3_b01c = add i32 %v2_b01c, 5
  %v4_b01c = inttoptr i32 %v3_b01c to i8*
  store i8 %v1_b01c, i8* %v4_b01c, align 1
  store i32 %v3_aad8, i32* %r1.global-to-local, align 4
  %v1_b024 = load i32, i32* @r4, align 4
  %v9_b024 = icmp eq i32 %v3_aad8, %v1_b024
  store i1 %v9_b024, i1* %cpsr_z.global-to-local, align 1
  %v0_b028 = load i32, i32* %r2.global-to-local, align 4
  %v1_b028 = trunc i32 %v0_b028 to i8
  %v2_b028 = load i32, i32* @r6, align 4
  %v3_b028 = add i32 %v2_b028, 4
  %v4_b028 = inttoptr i32 %v3_b028 to i8*
  store i8 %v1_b028, i8* %v4_b028, align 1
  %v0_b02c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b02c, label %dec_label_pc_b030, label %dec_label_pc_aff8.dec_label_pc_ae0c_crit_edge

dec_label_pc_aff8.dec_label_pc_ae0c_crit_edge:    ; preds = %dec_label_pc_aff8
  %v1_ae10.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ae0c

dec_label_pc_b030:                                ; preds = %dec_label_pc_aff8, %dec_label_pc_ae00
  %v0_b030 = call i32 @function_10a44()
  %v1_b030 = trunc i32 %v0_b030 to i8
  store i32 %v0_b030, i32* %r0.global-to-local, align 4
  store i32 %v3_aadc, i32* %r2.global-to-local, align 4
  %v4_b038 = sdiv i32 %v0_b030, 256
  store i32 %v4_b038, i32* %r3.global-to-local, align 4
  %v1_b03c = load i32, i32* @r4, align 4
  %v9_b03c = icmp eq i32 %v3_aadc, %v1_b03c
  store i1 %v9_b03c, i1* %cpsr_z.global-to-local, align 1
  %v3_b040 = load i32, i32* @r5, align 4
  %v4_b040 = add i32 %v3_b040, 58
  %v5_b040 = inttoptr i32 %v4_b040 to i8*
  store i8 %v1_b030, i8* %v5_b040, align 1
  %v0_b044 = load i32, i32* %r3.global-to-local, align 4
  %v1_b044 = trunc i32 %v0_b044 to i8
  %v2_b044 = load i32, i32* @r7, align 4
  %v3_b044 = add i32 %v2_b044, 1
  %v4_b044 = inttoptr i32 %v3_b044 to i8*
  store i8 %v1_b044, i8* %v4_b044, align 1
  %v0_b048 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b048, label %dec_label_pc_b04c, label %dec_label_pc_ae18

dec_label_pc_b04c:                                ; preds = %dec_label_pc_b030, %dec_label_pc_ae0c
  %v0_b04c = call i32 @function_10a44()
  %v1_b04c = trunc i32 %v0_b04c to i8
  store i32 %v0_b04c, i32* %r0.global-to-local, align 4
  %v4_b05043 = udiv i32 %v0_b04c, 256
  %v1_b054 = trunc i32 %v4_b05043 to i8
  %v2_b054 = load i32, i32* @r7, align 4
  %v3_b054 = add i32 %v2_b054, 3
  %v4_b054 = inttoptr i32 %v3_b054 to i8*
  store i8 %v1_b054, i8* %v4_b054, align 1
  store i32 %v1_aacc, i32* %r3.global-to-local, align 4
  store i1 %v2_b05c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b05c, label %bb108, label %bb107

bb107:                                            ; preds = %dec_label_pc_b04c
  %v1_b060 = load i32, i32* @r5, align 4
  %v2_b060 = add i32 %v1_b060, 16
  %v3_b060 = inttoptr i32 %v2_b060 to i32*
  %v4_b060 = load i32, i32* %v3_b060, align 4
  store i32 %v4_b060, i32* %r3.global-to-local, align 4
  br label %bb108

bb108:                                            ; preds = %dec_label_pc_b04c, %bb107
  %v3_b064 = load i32, i32* @r7, align 4
  %v4_b064 = add i32 %v3_b064, 2
  %v5_b064 = inttoptr i32 %v4_b064 to i8*
  store i8 %v1_b04c, i8* %v5_b064, align 1
  %v0_b068 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b068, label %dec_label_pc_b070, label %bb109

bb109:                                            ; preds = %bb108
  %v1_b068 = load i32, i32* %r3.global-to-local, align 4
  %v2_b068 = load i32, i32* @r6, align 4
  %v3_b068 = add i32 %v2_b068, 16
  %v4_b068 = inttoptr i32 %v3_b068 to i32*
  store i32 %v1_b068, i32* %v4_b068, align 4
  br label %dec_label_pc_ae2c

dec_label_pc_b070:                                ; preds = %dec_label_pc_ae18, %bb108
  %v0_b070 = call i32 @function_10a44()
  store i32 %v0_b070, i32* %r0.global-to-local, align 4
  %v1_b074 = load i32, i32* @r6, align 4
  %v2_b074 = add i32 %v1_b074, 16
  %v3_b074 = inttoptr i32 %v2_b074 to i32*
  store i32 %v0_b070, i32* %v3_b074, align 4
  br label %dec_label_pc_ae2c

dec_label_pc_b07c:                                ; preds = %dec_label_pc_ae2c
  %v0_b07c = load i32, i32* @r7, align 4
  %v1_b07c = add i32 %v0_b07c, 8
  store i32 %v1_b07c, i32* %r0.global-to-local, align 4
  store i32 %v5_aa1c, i32* @r1, align 4
  %v1_b084 = inttoptr i32 %v1_b07c to i8*
  %v2_b084 = call i32 @function_10c20(i8* %v1_b084)
  store i32 %v2_b084, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ae90

dec_label_pc_b08c:                                ; preds = %dec_label_pc_aabc
  %v1_b094 = add i32 %v5_aa1c, 8
  store i32 %v1_b094, i32* %r1.global-to-local, align 4
  %v1_b098 = add i32 %v5_aa1c, 66
  store i32 %v1_b098, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ad9c.preheader

; uselistorder directives
  uselistorder i32 %v1_b098, { 1, 0 }
  uselistorder i32 %v1_b094, { 1, 0 }
  uselistorder i32 %v0_b04c, { 0, 2, 1 }
  uselistorder i32 %v0_b030, { 0, 2, 1 }
  uselistorder i32 %v3_b000, { 0, 2, 1 }
  uselistorder i32 %v2_afcc, { 1, 0 }
  uselistorder i32 %v8_afac, { 1, 2, 0 }
  uselistorder i32 %v3_af98, { 1, 0 }
  uselistorder i32 %v0_af88, { 2, 0, 1, 3 }
  uselistorder i32 %v1_af54, { 1, 2, 0 }
  uselistorder i32 %v1_af50, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_aef4, { 1, 0, 2 }
  uselistorder i32 %v4_aef0, { 0, 2, 1 }
  uselistorder i32 %v0_aed0, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_aec0, { 0, 2, 1 }
  uselistorder i32 %v4_aea4, { 1, 0 }
  uselistorder i32 %v7_adc8, { 2, 1, 0, 3 }
  uselistorder i32 %v0_ad9c, { 1, 0 }
  uselistorder i1 %v7_ade4, { 2, 1, 0 }
  uselistorder i1 %v2_b05c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_afec, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ad24, { 1, 0, 2 }
  uselistorder i32 %v3_abac, { 1, 0, 2 }
  uselistorder i32 %v3_ab8c, { 1, 0 }
  uselistorder i32 %tmp91, { 1, 0 }
  uselistorder i32 %v1_ab30, { 1, 0 }
  uselistorder i32 %v1_ab2c, { 2, 1, 0 }
  uselistorder i32 %v1_ab18, { 1, 0 }
  uselistorder i32 %v1_ab14, { 2, 1, 0 }
  uselistorder i32 %v1_ab0c, { 0, 2, 1 }
  uselistorder i32 %v3_ab04, { 2, 1, 0 }
  uselistorder i32 %v0_aae0, { 1, 0, 2 }
  uselistorder i32 %v3_aad4, { 2, 1, 3, 0 }
  uselistorder i32 %v1_aacc, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_aac8, { 1, 0 }
  uselistorder i32 %v0_aac8, { 2, 1, 0 }
  uselistorder i32 %v0_aac0, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_aabc, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_aab4, { 1, 0 }
  uselistorder i1 %v7_aa88, { 1, 0 }
  uselistorder i32 %v3_aa84, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_aa70, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_aa3c, { 1, 2, 0 }
  uselistorder i32 %v5_aa1c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_a9d0, { 1, 0 }
  uselistorder i8 %v5_a9c0, { 1, 0 }
  uselistorder i32 %v5_a9a4, { 1, 0 }
  uselistorder i32 %v6_a968, { 1, 0 }
  uselistorder i32 %v2_a950, { 0, 3, 1, 2 }
  uselistorder i32 %v1_a934, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %sl.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r8.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 43, 44, 46, 16, 47, 48, 49, 50, 51, 52, 53, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 16, 18, 17, 19, 20, 22, 21, 23, 24, 26, 25, 28, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 19, 18, 20, 21, 36, 37, 39, 38, 43, 40, 41, 42, 46, 44, 45, 22, 24, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 8, 9, 10, 11, 12, 13, 3, 4, 5, 6, 7 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 10, 11 }
  uselistorder label %dec_label_pc_b070, { 1, 0 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %dec_label_pc_af6c, { 1, 0 }
  uselistorder label %dec_label_pc_ae90, { 1, 0 }
  uselistorder label %dec_label_pc_ae2c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ad9c.preheader, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
}

define i32 @function_b0ac(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b0ac:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_b0ac = load i32, i32* @r4, align 4
  %v15_b0ac = load i32, i32* @r8, align 4
  %v1_b0b0 = urem i32 %arg1, 256
  store i32 %v1_b0b0, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_b0b0, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b0c8 = urem i32 %arg3, 256
  store i32 %v1_b0c8, i32* @r4, align 4
  %v2_b0cc = call i32 @function_14e34(i32 %v1_b0b0, i32 4)
  %v0_b0d0 = load i32, i32* @r5, align 4
  store i32 %v0_b0d0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b0e0 = load i32, i32* @r4, align 4
  store i32 %v0_b0e0, i32* %r0.global-to-local, align 4
  %v5_b0e4 = inttoptr i32 %v0_b0d0 to i32*
  %v6_b0e4 = call i32 @function_a4e8(i32 %v0_b0e0, i32* %v5_b0e4, i32 2, i32 0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b0fc = load i32, i32* @r5, align 4
  store i32 %v0_b0fc, i32* %r1.global-to-local, align 4
  %v0_b100 = load i32, i32* @r4, align 4
  store i32 %v0_b100, i32* %r0.global-to-local, align 4
  %v5_b104 = trunc i32 %v6_b0e4 to i8
  %v6_b108 = inttoptr i32 %v0_b0fc to i32*
  %v7_b108 = call i32 @function_a4e8(i32 %v0_b100, i32* %v6_b108, i32 3, i32 65535)
  %v0_b10c = load i32, i32* @r5, align 4
  store i32 %v0_b10c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b108, i32* @r7, align 4
  %v0_b11c = load i32, i32* @r4, align 4
  store i32 %v0_b11c, i32* %r0.global-to-local, align 4
  %v4_b120 = inttoptr i32 %v0_b10c to i32*
  %v5_b120 = call i32 @function_a4e8(i32 %v0_b11c, i32* %v4_b120, i32 4, i32 64)
  %v0_b12c = load i32, i32* @r5, align 4
  store i32 %v0_b12c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b138 = load i32, i32* @r4, align 4
  store i32 %v0_b138, i32* %r0.global-to-local, align 4
  %v5_b13c = trunc i32 %v5_b120 to i8
  %v6_b140 = inttoptr i32 %v0_b12c to i32*
  %v7_b140 = call i32 @function_a4e8(i32 %v0_b138, i32* %v6_b140, i32 5, i32 1)
  %v1_b14c = urem i32 %v7_b140, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b158 = load i32, i32* @r5, align 4
  store i32 %v0_b158, i32* %r1.global-to-local, align 4
  %v0_b15c = load i32, i32* @r4, align 4
  store i32 %v0_b15c, i32* %r0.global-to-local, align 4
  %v5_b164 = inttoptr i32 %v0_b158 to i32*
  %v6_b164 = call i32 @function_a4e8(i32 %v0_b15c, i32* %v5_b164, i32 6, i32 65535)
  %v0_b16c = load i32, i32* @r5, align 4
  store i32 %v0_b16c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_b164, i32* @sl, align 4
  %v0_b17c = load i32, i32* @r4, align 4
  store i32 %v0_b17c, i32* %r0.global-to-local, align 4
  %v4_b180 = inttoptr i32 %v0_b16c to i32*
  %v5_b180 = call i32 @function_a4e8(i32 %v0_b17c, i32* %v4_b180, i32 7, i32 65535)
  %v0_b184 = load i32, i32* @r5, align 4
  store i32 %v0_b184, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_b180, i32* @r8, align 4
  %v0_b194 = load i32, i32* @r4, align 4
  store i32 %v0_b194, i32* %r0.global-to-local, align 4
  %v4_b198 = inttoptr i32 %v0_b184 to i32*
  %v5_b198 = call i32 @function_a4e8(i32 %v0_b194, i32* %v4_b198, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b1a8 = load i32, i32* @r5, align 4
  store i32 %v0_b1a8, i32* %r1.global-to-local, align 4
  %v0_b1ac = load i32, i32* @r4, align 4
  store i32 %v0_b1ac, i32* %r0.global-to-local, align 4
  %v4_b1b0 = inttoptr i32 %v0_b1a8 to i32*
  %v5_b1b0 = call i32 @function_a4e8(i32 %v0_b1ac, i32* %v4_b1b0, i32 1, i32 1)
  %v1_b1b8 = urem i32 %v5_b1b0, 256
  %v0_b1bc = load i32, i32* @r5, align 4
  store i32 %v0_b1bc, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b1c8 = load i32, i32* @r4, align 4
  store i32 %v0_b1c8, i32* %r0.global-to-local, align 4
  %v5_b1d0 = inttoptr i32 %v0_b1bc to i32*
  %v6_b1d0 = call i32 @function_a4e8(i32 %v0_b1c8, i32* %v5_b1d0, i32 19, i32 0)
  %v0_b1d8 = load i32, i32* @r5, align 4
  store i32 %v0_b1d8, i32* %r1.global-to-local, align 4
  %v2_b1dc = load i32, i32* @global_var_1f858.88, align 4
  store i32 %v2_b1dc, i32* %r3.global-to-local, align 4
  store i32 %v6_b1d0, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b1e8 = load i32, i32* @r4, align 4
  store i32 %v0_b1e8, i32* %r0.global-to-local, align 4
  %v4_b1ec = inttoptr i32 %v0_b1d8 to i32*
  %v5_b1ec = call i32 @function_a4e8(i32 %v0_b1e8, i32* %v4_b1ec, i32 25, i32 %v2_b1dc)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b200 = call i32 @function_14b30(i32 2, i32 3, i32 6)
  store i32 %v3_b200, i32* %r0.global-to-local, align 4
  %v7_b204 = icmp eq i32 %v3_b200, -1
  store i1 %v7_b204, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b204, label %dec_label_pc_b684, label %dec_label_pc_b210

dec_label_pc_b210:                                ; preds = %dec_label_pc_b0ac
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b218 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b218, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b22c = call i32 @function_14b00(i32 %v3_b200, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b22c, i32* %r0.global-to-local, align 4
  %v7_b230 = icmp eq i32 %v6_b22c, -1
  store i1 %v7_b230, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b230, label %dec_label_pc_b67c, label %dec_label_pc_b238

dec_label_pc_b238:                                ; preds = %dec_label_pc_b210
  %v0_b238 = load i32, i32* @sl, align 4
  %v0_b244 = load i32, i32* @r8, align 4
  %v3_b244 = mul i32 %v0_b244, 65536
  store i32 %v3_b244, i32* %r8.global-to-local, align 4
  %v0_b248 = load i32, i32* @r7, align 4
  %v0_b24c = load i32, i32* @r6, align 4
  %v1_b24c = urem i32 %v0_b24c, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_b254 = urem i32 %v0_b238, 65536
  store i32 %v3_b254, i32* %r2.global-to-local, align 4
  %v3_b258 = urem i32 %v0_b244, 65536
  store i32 %v3_b258, i32* %r3.global-to-local, align 4
  %v0_b25c = load i32, i32* @fp, align 4
  %v2_b25c = icmp eq i32 %v0_b25c, 0
  store i1 %v2_b25c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %v3_b26c = urem i32 %v0_b248, 65536
  store i32 %v3_b26c, i32* @sl, align 4
  %tmp84 = icmp slt i32 %v0_b25c, 1
  br i1 %tmp84, label %dec_label_pc_b7a8, label %dec_label_pc_b27c

dec_label_pc_b27c:                                ; preds = %dec_label_pc_b238
  %v3_b280 = mul i32 %v5_b198, 65536
  %v1_b284 = add i32 %v3_b280, 3407872
  %v3_b28c = udiv i32 %v1_b284, 256
  %v0_b248.not = or i32 %v0_b248, -65536
  %v1_b29c = xor i32 %v0_b248.not, 65535
  %v1_b2a0 = urem i32 %v0_b244, 256
  %tmp85 = mul nsw i32 %v1_b29c, 256
  %v1_b2b8 = and i32 %v3_b28c, 65280
  %v1_b2bc = add i32 %v3_b280, 524288
  %v4_b2c0 = udiv i32 %v1_b284, 16777216
  %v5_b2c0 = or i32 %v1_b2b8, %v4_b2c0
  store i32 %v5_b2c0, i32* %r0.global-to-local, align 4
  %v1_b2c4 = add i32 %v3_b280, 1835008
  %v1_b2cc = and i32 %tmp85, 65280
  store i32 %v1_b2cc, i32* @lr, align 4
  %tmp86 = udiv i32 %v1_b29c, 256
  %tmp87 = udiv i32 %v0_b248, 256
  %v5_b2e0 = trunc i32 %tmp86 to i8
  %tmp88 = udiv i32 %v0_b238, 256
  %sext29 = mul i32 %tmp87, 16777216
  %v4_b300 = sdiv i32 %sext29, 16777216
  %v3_b30c = mul nuw nsw i32 %v1_b2a0, 256
  store i32 %v3_b30c, i32* @r5, align 4
  %v3_b310 = udiv i32 %v1_b2bc, 256
  %tmp89 = udiv i32 %v0_b244, 256
  %v4_b318 = urem i32 %tmp89, 256
  %v5_b318 = or i32 %v4_b318, %v3_b30c
  store i32 %v5_b318, i32* @r7, align 4
  %v3_b31c = ashr i32 %sext29, 31
  %v3_b328 = sdiv i32 %v1_b2c4, 16777216
  %v1_b32c = and i32 %v3_b310, 65280
  store i32 %v1_b32c, i32* @r6, align 4
  %sext30 = mul i32 %tmp88, 16777216
  %v4_b334 = sdiv i32 %sext30, 16777216
  %v3_b338 = ashr i32 %v1_b2c4, 31
  %v3_b33c = udiv i32 %v1_b29c, 65536
  %v4_b340 = udiv i32 %v1_b2bc, 16777216
  %v5_b340 = or i32 %v1_b32c, %v4_b340
  store i32 %v5_b340, i32* %r8.global-to-local, align 4
  %v3_b34c = ashr i32 %sext30, 31
  store i32 %v3_b34c, i32* %r1.global-to-local, align 4
  store i32 %v1_b2a0, i32* %r2.global-to-local, align 4
  %v3_b35441 = udiv i32 %v1_b32c, 256
  store i32 %v3_b35441, i32* %r3.global-to-local, align 4
  %v5_b35c = trunc i32 %v3_b34c to i8
  store i32 0, i32* @r4, align 4
  %v4_b3b8 = sext i8 %v5_b13c to i32
  %sext = mul i32 %v1_b284, 256
  %v4_b3c0 = sdiv i32 %sext, 16777216
  %sext16 = mul nuw i32 %v4_b2c0, 16777216
  %v4_b3d0 = sdiv i32 %sext16, 16777216
  %v2_b4a4 = icmp eq i32 %v1_b24c, 0
  %sext20 = mul i32 %v1_b2bc, 256
  %v4_b4c4 = sdiv i32 %sext20, 16777216
  %sext21 = mul i32 %v0_b244, 16777216
  %v7_b4dc = sdiv i32 %sext21, 16777216
  %v1_b3cc = trunc i32 %v4_b3c0 to i8
  br label %dec_label_pc_b36c

dec_label_pc_b36c:                                ; preds = %bb96, %dec_label_pc_b27c
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b378 = call i32 @function_14e34(i32 1510, i32 4)
  store i32 %v2_b378, i32* %r0.global-to-local, align 4
  store i32 %v2_b0cc, i32* %r1.global-to-local, align 4
  %v3_b380 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b380, i32* %r3.global-to-local, align 4
  %v2_b384 = load i32, i32* @r4, align 4
  %v5_b384 = mul i32 %v2_b384, 4
  %v6_b384 = add i32 %v5_b384, %v2_b0cc
  %v7_b384 = inttoptr i32 %v6_b384 to i32*
  store i32 %v2_b378, i32* %v7_b384, align 4
  %v0_b388 = load i32, i32* %r1.global-to-local, align 4
  %v1_b388 = load i32, i32* %r3.global-to-local, align 4
  %v4_b388 = mul i32 %v1_b388, 4
  %v5_b388 = add i32 %v4_b388, %v0_b388
  %v6_b388 = inttoptr i32 %v5_b388 to i32*
  %v7_b388 = load i32, i32* %v6_b388, align 4
  store i32 %v7_b388, i32* %r4.global-to-local, align 4
  %v1_b38c = inttoptr i32 %v7_b388 to i8*
  %v2_b38c = load i8, i8* %v1_b38c, align 1
  %tmp = urem i8 %v2_b38c, 16
  %v1_b390 = zext i8 %tmp to i32
  %v1_b394 = or i32 %v1_b390, 64
  store i32 %v1_b394, i32* %r2.global-to-local, align 4
  %v1_b398 = trunc i32 %v1_b394 to i8
  store i8 %v1_b398, i8* %v1_b38c, align 1
  %v0_b39c = load i32, i32* %r4.global-to-local, align 4
  %v1_b39c = inttoptr i32 %v0_b39c to i8*
  %v2_b39c = load i8, i8* %v1_b39c, align 1
  %v1_b3a0 = and i8 %v2_b39c, -16
  %v1_b3a4 = or i8 %v1_b3a0, 5
  store i32 %v1_b14c, i32* %r2.global-to-local, align 4
  store i8 %v1_b3a4, i8* %v1_b39c, align 1
  %v2_b3b4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b3b4 = add i32 %v2_b3b4, 1
  %v4_b3b4 = inttoptr i32 %v3_b3b4 to i8*
  store i8 %v5_b104, i8* %v4_b3b4, align 1
  store i32 %v4_b3b8, i32* %r1.global-to-local, align 4
  %v2_b3bc = load i32, i32* %r4.global-to-local, align 4
  %v3_b3bc = add i32 %v2_b3bc, 8
  %v4_b3bc = inttoptr i32 %v3_b3bc to i8*
  store i8 %v5_b13c, i8* %v4_b3bc, align 1
  store i32 %v4_b3c0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_b3c8 = load i32, i32* %r2.global-to-local, align 4
  %v9_b3c8 = icmp eq i32 %v0_b3c8, 0
  store i1 %v9_b3c8, i1* %cpsr_z.global-to-local, align 1
  %v2_b3cc = load i32, i32* %r4.global-to-local, align 4
  %v3_b3cc = add i32 %v2_b3cc, 3
  %v4_b3cc = inttoptr i32 %v3_b3cc to i8*
  store i8 %v1_b3cc, i8* %v4_b3cc, align 1
  store i32 %v4_b3d0, i32* %r2.global-to-local, align 4
  %v0_b3d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b3d4, label %.thread23, label %.thread

.thread:                                          ; preds = %dec_label_pc_b36c
  %v1_b3d4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_b3d4, i32* %r3.global-to-local, align 4
  %v2_b3d8 = trunc i32 %v1_b3d4 to i8
  %v3_b3d8 = load i32, i32* %r4.global-to-local, align 4
  %v4_b3d8 = add i32 %v3_b3d8, 7
  %v5_b3d8 = inttoptr i32 %v4_b3d8 to i8*
  store i8 %v2_b3d8, i8* %v5_b3d8, align 1
  %v0_b3dc.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b3dc.pr.pr, label %.thread23, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_b3e0 = load i32, i32* %r4.global-to-local, align 4
  %v4_b3e0 = add i32 %v3_b3e0, 6
  %v5_b3e0 = inttoptr i32 %v4_b3e0 to i8*
  store i8 64, i8* %v5_b3e0, align 1
  br label %.thread23

.thread23:                                        ; preds = %dec_label_pc_b36c, %.thread, %bb
  %v0_b3e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3e4 = trunc i32 %v0_b3e4 to i8
  %v2_b3e4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b3e4 = add i32 %v2_b3e4, 2
  %v4_b3e4 = inttoptr i32 %v3_b3e4 to i8*
  store i8 %v1_b3e4, i8* %v4_b3e4, align 1
  store i32 %v3_b31c, i32* %r2.global-to-local, align 4
  store i32 %v4_b300, i32* %r1.global-to-local, align 4
  %v2_b3f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b3f4 = add i32 %v2_b3f4, 9
  %v4_b3f4 = inttoptr i32 %v3_b3f4 to i8*
  store i8 47, i8* %v4_b3f4, align 1
  %v0_b3f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3f8 = trunc i32 %v0_b3f8 to i8
  %v2_b3f8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b3f8 = add i32 %v2_b3f8, 5
  %v4_b3f8 = inttoptr i32 %v3_b3f8 to i8*
  store i8 %v1_b3f8, i8* %v4_b3f8, align 1
  %v3_b3fc = load i32, i32* %stack_var_-40, align 4
  %v5_b404 = mul i32 %v3_b3fc, 24
  store i32 %v5_b404, i32* %r3.global-to-local, align 4
  store i32 %v5_b1ec, i32* %r2.global-to-local, align 4
  %v1_b40c = load i32, i32* %r4.global-to-local, align 4
  %v2_b40c = add i32 %v1_b40c, 12
  %v3_b40c = inttoptr i32 %v2_b40c to i32*
  store i32 %v5_b1ec, i32* %v3_b40c, align 4
  %v0_b410 = load i32, i32* %r3.global-to-local, align 4
  %v1_b410 = load i32, i32* @sb, align 4
  %v2_b410 = add i32 %v1_b410, %v0_b410
  store i32 %v2_b410, i32* %r3.global-to-local, align 4
  %v0_b414 = load i32, i32* %r1.global-to-local, align 4
  %v1_b414 = trunc i32 %v0_b414 to i8
  %v2_b414 = load i32, i32* %r4.global-to-local, align 4
  %v3_b414 = add i32 %v2_b414, 4
  %v4_b414 = inttoptr i32 %v3_b414 to i8*
  store i8 %v1_b414, i8* %v4_b414, align 1
  %v0_b418 = load i32, i32* %r3.global-to-local, align 4
  %v1_b418 = add i32 %v0_b418, 16
  %v2_b418 = inttoptr i32 %v1_b418 to i32*
  %v3_b418 = load i32, i32* %v2_b418, align 4
  store i32 %v3_b418, i32* %r2.global-to-local, align 4
  %v0_b41c = load i32, i32* %r4.global-to-local, align 4
  %v1_b41c = add i32 %v0_b41c, 20
  store i32 %v1_b41c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_b424 = load i32, i32* %r0.global-to-local, align 4
  %v1_b424 = trunc i32 %v0_b424 to i8
  %v3_b424 = add i32 %v0_b41c, 23
  %v4_b424 = inttoptr i32 %v3_b424 to i8*
  store i8 %v1_b424, i8* %v4_b424, align 1
  %v0_b428 = load i32, i32* %r3.global-to-local, align 4
  %v1_b428 = trunc i32 %v0_b428 to i8
  %v2_b428 = load i32, i32* %r1.global-to-local, align 4
  %v3_b428 = add i32 %v2_b428, 2
  %v4_b428 = inttoptr i32 %v3_b428 to i8*
  store i8 %v1_b428, i8* %v4_b428, align 1
  %v0_b42c = load i32, i32* %r4.global-to-local, align 4
  %v1_b42c = add i32 %v0_b42c, 24
  %v2_b42c = inttoptr i32 %v1_b42c to i8*
  %v3_b42c = load i8, i8* %v2_b42c, align 1
  %tmp104 = urem i8 %v3_b42c, 16
  %v1_b430 = zext i8 %tmp104 to i32
  %v1_b434 = or i32 %v1_b430, 64
  store i32 %v1_b434, i32* %r3.global-to-local, align 4
  %v1_b438 = trunc i32 %v1_b434 to i8
  store i8 %v1_b438, i8* %v2_b42c, align 1
  %v0_b43c = load i32, i32* %r2.global-to-local, align 4
  %v1_b43c = load i32, i32* %r4.global-to-local, align 4
  %v2_b43c = add i32 %v1_b43c, 16
  %v3_b43c = inttoptr i32 %v2_b43c to i32*
  store i32 %v0_b43c, i32* %v3_b43c, align 4
  %v0_b440 = load i32, i32* %r4.global-to-local, align 4
  %v1_b440 = add i32 %v0_b440, 24
  %v2_b440 = inttoptr i32 %v1_b440 to i8*
  %v3_b440 = load i8, i8* %v2_b440, align 1
  %v1_b444 = and i8 %v3_b440, -16
  %v1_b448 = or i8 %v1_b444, 5
  store i8 %v1_b448, i8* %v2_b440, align 1
  %v0_b454 = load i32, i32* %r4.global-to-local, align 4
  %v1_b454 = add i32 %v0_b454, 24
  store i32 %v1_b454, i32* @r5, align 4
  %v3_b458 = add i32 %v0_b454, 25
  %v4_b458 = inttoptr i32 %v3_b458 to i8*
  store i8 %v5_b104, i8* %v4_b458, align 1
  store i32 %v3_b328, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_b338, i32* %r2.global-to-local, align 4
  %v2_b468 = load i32, i32* @r5, align 4
  %v3_b468 = add i32 %v2_b468, 4
  %v4_b468 = inttoptr i32 %v3_b468 to i8*
  store i8 %v5_b2e0, i8* %v4_b468, align 1
  %v0_b46c = load i32, i32* %r1.global-to-local, align 4
  %v1_b46c = trunc i32 %v0_b46c to i8
  %v2_b46c = load i32, i32* @r5, align 4
  %v3_b46c = add i32 %v2_b46c, 2
  %v4_b46c = inttoptr i32 %v3_b46c to i8*
  store i8 %v1_b46c, i8* %v4_b46c, align 1
  %v0_b470 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b470, label %bb91, label %bb90

bb90:                                             ; preds = %.thread23
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb91

bb91:                                             ; preds = %.thread23, %bb90
  store i32 %v3_b33c, i32* %r1.global-to-local, align 4
  %v0_b478 = load i32, i32* %r2.global-to-local, align 4
  %v1_b478 = trunc i32 %v0_b478 to i8
  %v2_b478 = load i32, i32* @r5, align 4
  %v3_b478 = add i32 %v2_b478, 3
  %v4_b478 = inttoptr i32 %v3_b478 to i8*
  store i8 %v1_b478, i8* %v4_b478, align 1
  store i32 %v4_b3b8, i32* %r2.global-to-local, align 4
  %v0_b480 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b480, label %bb93, label %bb92

bb92:                                             ; preds = %bb91
  %v1_b480 = load i32, i32* %r3.global-to-local, align 4
  %v2_b480 = trunc i32 %v1_b480 to i8
  %v3_b480 = load i32, i32* @r5, align 4
  %v4_b480 = add i32 %v3_b480, 6
  %v5_b480 = inttoptr i32 %v4_b480 to i8*
  store i8 %v2_b480, i8* %v5_b480, align 1
  br label %bb93

bb93:                                             ; preds = %bb91, %bb92
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_b488 = load i32, i32* %r1.global-to-local, align 4
  %v1_b488 = trunc i32 %v0_b488 to i8
  %v2_b488 = load i32, i32* @r5, align 4
  %v3_b488 = add i32 %v2_b488, 5
  %v4_b488 = inttoptr i32 %v3_b488 to i8*
  store i8 %v1_b488, i8* %v4_b488, align 1
  %v0_b48c = load i32, i32* %r2.global-to-local, align 4
  %v1_b48c = trunc i32 %v0_b48c to i8
  %v2_b48c = load i32, i32* @r5, align 4
  %v3_b48c = add i32 %v2_b48c, 8
  %v4_b48c = inttoptr i32 %v3_b48c to i8*
  store i8 %v1_b48c, i8* %v4_b48c, align 1
  %v0_b490 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b490, label %bb95, label %bb94

bb94:                                             ; preds = %bb93
  %v1_b490 = load i32, i32* %r0.global-to-local, align 4
  %v2_b490 = trunc i32 %v1_b490 to i8
  %v3_b490 = load i32, i32* @r5, align 4
  %v4_b490 = add i32 %v3_b490, 7
  %v5_b490 = inttoptr i32 %v4_b490 to i8*
  store i8 %v2_b490, i8* %v5_b490, align 1
  br label %bb95

bb95:                                             ; preds = %bb93, %bb94
  %v0_b494 = load i32, i32* %r3.global-to-local, align 4
  %v1_b494 = trunc i32 %v0_b494 to i8
  %v2_b494 = load i32, i32* @r5, align 4
  %v3_b494 = add i32 %v2_b494, 9
  %v4_b494 = inttoptr i32 %v3_b494 to i8*
  store i8 %v1_b494, i8* %v4_b494, align 1
  %v0_b498 = call i32 @function_10a44()
  store i32 %v0_b498, i32* %r0.global-to-local, align 4
  store i32 %v1_b24c, i32* %r1.global-to-local, align 4
  store i1 %v2_b4a4, i1* %cpsr_z.global-to-local, align 1
  %v1_b4a8 = sub i32 1023, %v0_b498
  store i32 %v1_b4a8, i32* %r3.global-to-local, align 4
  br i1 %v2_b4a4, label %.thread24, label %.thread25

.thread24:                                        ; preds = %bb95
  %v2_b4b0 = load i32, i32* @r5, align 4
  %v3_b4b0 = add i32 %v2_b4b0, 16
  %v4_b4b0 = inttoptr i32 %v3_b4b0 to i32*
  store i32 %v1_b4a8, i32* %v4_b4b0, align 4
  br label %bb96

.thread25:                                        ; preds = %bb95
  %v1_b4ac = load i32, i32* %r4.global-to-local, align 4
  %v2_b4ac = add i32 %v1_b4ac, 16
  %v3_b4ac = inttoptr i32 %v2_b4ac to i32*
  %v4_b4ac = load i32, i32* %v3_b4ac, align 4
  store i32 %v4_b4ac, i32* %r3.global-to-local, align 4
  %v2_b4b4 = load i32, i32* @r5, align 4
  %v3_b4b4 = add i32 %v2_b4b4, 16
  %v4_b4b4 = inttoptr i32 %v3_b4b4 to i32*
  store i32 %v4_b4ac, i32* %v4_b4b4, align 4
  br label %bb96

bb96:                                             ; preds = %.thread24, %.thread25
  store i32 %v4_b334, i32* %r3.global-to-local, align 4
  %v0_b4bc = load i32, i32* %r4.global-to-local, align 4
  %v1_b4bc = add i32 %v0_b4bc, 44
  store i32 %v1_b4bc, i32* @r6, align 4
  %v1_b4c0 = load i32, i32* @r5, align 4
  %v2_b4c0 = add i32 %v1_b4c0, 12
  %v3_b4c0 = inttoptr i32 %v2_b4c0 to i32*
  store i32 %v0_b498, i32* %v3_b4c0, align 4
  store i32 %v4_b4c4, i32* %r2.global-to-local, align 4
  %v0_b4c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b4c8 = trunc i32 %v0_b4c8 to i8
  %v2_b4c8 = load i32, i32* @r6, align 4
  %v3_b4c8 = inttoptr i32 %v2_b4c8 to i8*
  store i8 %v1_b4c8, i8* %v3_b4c8, align 1
  %v3_b4cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b4cc, i32* %r3.global-to-local, align 4
  %v0_b4d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b4d0 = trunc i32 %v0_b4d0 to i8
  %v2_b4d0 = load i32, i32* @r6, align 4
  %v3_b4d0 = add i32 %v2_b4d0, 5
  %v4_b4d0 = inttoptr i32 %v3_b4d0 to i8*
  store i8 %v1_b4d0, i8* %v4_b4d0, align 1
  %v0_b4d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b4d4 = add i32 %v0_b4d4, 1
  store i32 %v1_b4d4, i32* @r4, align 4
  store i32 %v3_b34c, i32* %r1.global-to-local, align 4
  store i32 %v7_b4dc, i32* %r2.global-to-local, align 4
  %v1_b4e0 = load i32, i32* @fp, align 4
  %v9_b4e0 = icmp eq i32 %v1_b4d4, %v1_b4e0
  store i1 %v9_b4e0, i1* %cpsr_z.global-to-local, align 1
  %v2_b4e4 = load i32, i32* @r6, align 4
  %v3_b4e4 = add i32 %v2_b4e4, 1
  %v4_b4e4 = inttoptr i32 %v3_b4e4 to i8*
  store i8 %v5_b35c, i8* %v4_b4e4, align 1
  %v0_b4e8 = load i32, i32* @r7, align 4
  %v1_b4e8 = trunc i32 %v0_b4e8 to i8
  %v2_b4e8 = load i32, i32* @r6, align 4
  %v3_b4e8 = add i32 %v2_b4e8, 2
  %v4_b4e8 = inttoptr i32 %v3_b4e8 to i8*
  store i8 %v1_b4e8, i8* %v4_b4e8, align 1
  %v0_b4ec = load i32, i32* %r2.global-to-local, align 4
  %v1_b4ec = trunc i32 %v0_b4ec to i8
  %v2_b4ec = load i32, i32* @r6, align 4
  %v3_b4ec = add i32 %v2_b4ec, 3
  %v4_b4ec = inttoptr i32 %v3_b4ec to i8*
  store i8 %v1_b4ec, i8* %v4_b4ec, align 1
  %v0_b4f0 = load i32, i32* %r8.global-to-local, align 4
  %v1_b4f0 = trunc i32 %v0_b4f0 to i8
  %v2_b4f0 = load i32, i32* @r6, align 4
  %v3_b4f0 = add i32 %v2_b4f0, 4
  %v4_b4f0 = inttoptr i32 %v3_b4f0 to i8*
  store i8 %v1_b4f0, i8* %v4_b4f0, align 1
  %v0_b4f4 = load i32, i32* @r4, align 4
  store i32 %v0_b4f4, i32* %stack_var_-40, align 4
  %v5_b4f8 = icmp slt i32 %v1_b4d4, %v1_b4e0
  br i1 %v5_b4f8, label %dec_label_pc_b36c, label %dec_label_pc_b4fc

dec_label_pc_b4fc:                                ; preds = %bb96
  %v1_b504 = add i32 %v5_b198, 8
  store i32 %v1_b504, i32* %r3.global-to-local, align 4
  %v1_b508 = add i32 %v5_b198, 52
  store i32 %v1_b508, i32* %r1.global-to-local, align 4
  %v0_b514.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_b514.preheader

dec_label_pc_b514.preheader:                      ; preds = %dec_label_pc_b4fc, %dec_label_pc_b7a8
  %v0_b514.pre = phi i32 [ %v0_b514.pre.pre, %dec_label_pc_b4fc ], [ %v0_b25c, %dec_label_pc_b7a8 ]
  %stack_var_-120.0.ph = phi i32 [ %v1_b508, %dec_label_pc_b4fc ], [ %v1_b7b4, %dec_label_pc_b7a8 ]
  %stack_var_-152.0.ph = phi i32 [ %v1_b504, %dec_label_pc_b4fc ], [ %v1_b7b0, %dec_label_pc_b7a8 ]
  %v2_b78c = icmp eq i32 %v1_b1b8, 0
  %v2_b58c = icmp eq i32 %v1_b24c, 0
  %v2_b558 = icmp eq i32 %v5_b1ec, -1
  %v7_b558 = icmp eq i32 %v5_b1ec, -1
  br label %dec_label_pc_b514

dec_label_pc_b514:                                ; preds = %dec_label_pc_b5a8, %dec_label_pc_b514.preheader
  %v0_b514 = phi i32 [ %v0_b514.pre, %dec_label_pc_b514.preheader ], [ %v1_b66c, %dec_label_pc_b5a8 ]
  %v2_b514 = icmp eq i32 %v0_b514, 0
  store i1 %v2_b514, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp97 = icmp slt i32 %v0_b514, 1
  br label %dec_label_pc_b51c

dec_label_pc_b51c:                                ; preds = %dec_label_pc_b51c, %dec_label_pc_b514
  br i1 %tmp97, label %dec_label_pc_b51c, label %dec_label_pc_b520

dec_label_pc_b520:                                ; preds = %dec_label_pc_b51c
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_b52c

dec_label_pc_b52c:                                ; preds = %dec_label_pc_b5a8, %dec_label_pc_b520
  %v1_b540 = phi i32 [ %v1_b668, %dec_label_pc_b5a8 ], [ 0, %dec_label_pc_b520 ]
  %v5_b530 = mul i32 %v1_b540, 24
  %v1_b534 = load i32, i32* @sb, align 4
  %v2_b534 = add i32 %v1_b534, %v5_b530
  store i32 %v2_b534, i32* %r3.global-to-local, align 4
  store i32 %v2_b0cc, i32* %r1.global-to-local, align 4
  %v1_b53c = add i32 %v2_b534, 20
  %v2_b53c = inttoptr i32 %v1_b53c to i8*
  %v3_b53c = load i8, i8* %v2_b53c, align 1
  %v4_b53c = zext i8 %v3_b53c to i32
  store i32 %v4_b53c, i32* %r2.global-to-local, align 4
  %v4_b540 = mul i32 %v1_b540, 4
  %v5_b540 = add i32 %v4_b540, %v2_b0cc
  %v6_b540 = inttoptr i32 %v5_b540 to i32*
  %v7_b540 = load i32, i32* %v6_b540, align 4
  store i32 %v7_b540, i32* @r5, align 4
  %v7_b544 = icmp eq i8 %v3_b53c, 31
  store i1 %v7_b544, i1* %cpsr_z.global-to-local, align 1
  %v1_b548 = add i32 %v7_b540, 24
  store i32 %v1_b548, i32* @r6, align 4
  %v1_b54c = add i32 %v7_b540, 44
  store i32 %v1_b54c, i32* @r7, align 4
  %tmp105 = icmp ult i8 %v3_b53c, 32
  br i1 %tmp105, label %dec_label_pc_b68c, label %dec_label_pc_b554

dec_label_pc_b554:                                ; preds = %dec_label_pc_b52c
  store i32 %v5_b1ec, i32* %r2.global-to-local, align 4
  store i1 %v7_b558, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b558, label %dec_label_pc_b6f4, label %dec_label_pc_b560

dec_label_pc_b560:                                ; preds = %dec_label_pc_b68c, %dec_label_pc_b554
  store i32 65535, i32* @r4, align 4
  %v0_b568 = load i32, i32* @sl, align 4
  %v9_b568 = icmp eq i32 %v0_b568, 65535
  store i1 %v9_b568, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b568, label %dec_label_pc_b70c, label %dec_label_pc_b570

dec_label_pc_b570:                                ; preds = %dec_label_pc_b6f4.dec_label_pc_b570_crit_edge, %dec_label_pc_b560
  %v1_b574 = phi i32 [ %v1_b574.pre, %dec_label_pc_b6f4.dec_label_pc_b570_crit_edge ], [ 65535, %dec_label_pc_b560 ]
  store i32 %v3_b254, i32* %r3.global-to-local, align 4
  %v9_b574 = icmp eq i32 %v3_b254, %v1_b574
  store i1 %v9_b574, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b574, label %dec_label_pc_b744, label %dec_label_pc_b57c

dec_label_pc_b57c:                                ; preds = %dec_label_pc_b70c.dec_label_pc_b57c_crit_edge, %dec_label_pc_b570
  %v1_b580 = phi i32 [ %v1_b580.pre, %dec_label_pc_b70c.dec_label_pc_b57c_crit_edge ], [ %v1_b574, %dec_label_pc_b570 ]
  store i32 %v3_b258, i32* %r1.global-to-local, align 4
  %v9_b580 = icmp eq i32 %v3_b258, %v1_b580
  store i1 %v9_b580, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b580, label %dec_label_pc_b760, label %dec_label_pc_b588

dec_label_pc_b588:                                ; preds = %dec_label_pc_b744, %dec_label_pc_b57c
  store i32 %v1_b24c, i32* %r2.global-to-local, align 4
  store i1 %v2_b58c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b58c, label %dec_label_pc_b784, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_b588
  %v1_b590 = load i32, i32* @r5, align 4
  %v2_b590 = add i32 %v1_b590, 16
  %v3_b590 = inttoptr i32 %v2_b590 to i32*
  %v4_b590 = load i32, i32* %v3_b590, align 4
  store i32 %v4_b590, i32* %r3.global-to-local, align 4
  %v2_b594 = load i32, i32* @r6, align 4
  %v3_b594 = add i32 %v2_b594, 16
  %v4_b594 = inttoptr i32 %v3_b594 to i32*
  store i32 %v4_b590, i32* %v4_b594, align 4
  br label %dec_label_pc_b59c

dec_label_pc_b59c:                                ; preds = %bb102, %.thread26
  store i32 %v1_b1b8, i32* %r3.global-to-local, align 4
  store i1 %v2_b78c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b78c, label %dec_label_pc_b5a8, label %dec_label_pc_b798

dec_label_pc_b5a8:                                ; preds = %dec_label_pc_b59c, %dec_label_pc_b784, %dec_label_pc_b798
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b5ac = load i32, i32* @r8, align 4
  %v1_b5ac = trunc i32 %v0_b5ac to i8
  %v2_b5ac = load i32, i32* @r5, align 4
  %v3_b5ac = add i32 %v2_b5ac, 10
  %v4_b5ac = inttoptr i32 %v3_b5ac to i8*
  store i8 %v1_b5ac, i8* %v4_b5ac, align 1
  %v0_b5b0 = load i32, i32* @r8, align 4
  %v1_b5b0 = trunc i32 %v0_b5b0 to i8
  %v2_b5b0 = load i32, i32* @r5, align 4
  %v3_b5b0 = add i32 %v2_b5b0, 11
  %v4_b5b0 = inttoptr i32 %v3_b5b0 to i8*
  store i8 %v1_b5b0, i8* %v4_b5b0, align 1
  %v0_b5b4 = load i32, i32* @r5, align 4
  store i32 %v0_b5b4, i32* @r0, align 4
  %v2_b5b8 = call i32 @function_f008(i32 %v0_b5b4, i32 20)
  %v3_b5b8 = trunc i32 %v2_b5b8 to i8
  %v4_b5bc = sdiv i32 %v2_b5b8, 256
  store i32 %v4_b5bc, i32* %r3.global-to-local, align 4
  %v1_b5c0 = trunc i32 %v4_b5bc to i8
  %v2_b5c0 = load i32, i32* @r5, align 4
  %v3_b5c0 = add i32 %v2_b5c0, 11
  %v4_b5c0 = inttoptr i32 %v3_b5c0 to i8*
  store i8 %v1_b5c0, i8* %v4_b5c0, align 1
  %v3_b5c4 = load i32, i32* @r5, align 4
  %v4_b5c4 = add i32 %v3_b5c4, 10
  %v5_b5c4 = inttoptr i32 %v4_b5c4 to i8*
  store i8 %v3_b5b8, i8* %v5_b5c4, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b5cc = load i32, i32* @r8, align 4
  %v1_b5cc = trunc i32 %v0_b5cc to i8
  %v2_b5cc = load i32, i32* @r6, align 4
  %v3_b5cc = add i32 %v2_b5cc, 10
  %v4_b5cc = inttoptr i32 %v3_b5cc to i8*
  store i8 %v1_b5cc, i8* %v4_b5cc, align 1
  %v0_b5d0 = load i32, i32* @r8, align 4
  %v1_b5d0 = trunc i32 %v0_b5d0 to i8
  %v2_b5d0 = load i32, i32* @r6, align 4
  %v3_b5d0 = add i32 %v2_b5d0, 11
  %v4_b5d0 = inttoptr i32 %v3_b5d0 to i8*
  store i8 %v1_b5d0, i8* %v4_b5d0, align 1
  %v0_b5d4 = load i32, i32* @r6, align 4
  store i32 %v0_b5d4, i32* @r0, align 4
  %v2_b5d8 = call i32 @function_f008(i32 %v0_b5d4, i32 20)
  %v3_b5d8 = trunc i32 %v2_b5d8 to i8
  store i32 %v2_b5d8, i32* %r0.global-to-local, align 4
  %v4_b5dc = sdiv i32 %v2_b5d8, 256
  store i32 %v4_b5dc, i32* %r3.global-to-local, align 4
  %v3_b5e0 = load i32, i32* @r6, align 4
  %v4_b5e0 = add i32 %v3_b5e0, 10
  %v5_b5e0 = inttoptr i32 %v4_b5e0 to i8*
  store i8 %v3_b5d8, i8* %v5_b5e0, align 1
  %v0_b5e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b5e4 = trunc i32 %v0_b5e4 to i8
  %v2_b5e4 = load i32, i32* @r6, align 4
  %v3_b5e4 = add i32 %v2_b5e4, 11
  %v4_b5e4 = inttoptr i32 %v3_b5e4 to i8*
  store i8 %v1_b5e4, i8* %v4_b5e4, align 1
  %v0_b5e8 = load i32, i32* @r7, align 4
  %v1_b5e8 = add i32 %v0_b5e8, 4
  %v2_b5e8 = inttoptr i32 %v1_b5e8 to i8*
  %v3_b5e8 = load i8, i8* %v2_b5e8, align 1
  %v4_b5e8 = zext i8 %v3_b5e8 to i32
  store i32 %v4_b5e8, i32* %r3.global-to-local, align 4
  %v1_b5ec = add i32 %v0_b5e8, 5
  %v2_b5ec = inttoptr i32 %v1_b5ec to i8*
  %v3_b5ec = load i8, i8* %v2_b5ec, align 1
  %v4_b5ec = zext i8 %v3_b5ec to i32
  store i32 %v0_b5e8, i32* @r1, align 4
  %v4_b5f4 = mul nuw nsw i32 %v4_b5ec, 256
  %v5_b5f4 = or i32 %v4_b5f4, %v4_b5e8
  store i32 %v5_b5f4, i32* %r2.global-to-local, align 4
  %v0_b5f8 = load i32, i32* @r8, align 4
  %v1_b5f8 = trunc i32 %v0_b5f8 to i8
  %v3_b5f8 = add i32 %v0_b5e8, 6
  %v4_b5f8 = inttoptr i32 %v3_b5f8 to i8*
  store i8 %v1_b5f8, i8* %v4_b5f8, align 1
  store i32 %stack_var_-152.0.ph, i32* %r3.global-to-local, align 4
  %v0_b600 = load i32, i32* @r8, align 4
  %v1_b600 = trunc i32 %v0_b600 to i8
  %v2_b600 = load i32, i32* @r7, align 4
  %v3_b600 = add i32 %v2_b600, 7
  %v4_b600 = inttoptr i32 %v3_b600 to i8*
  store i8 %v1_b600, i8* %v4_b600, align 1
  %v0_b604 = load i32, i32* @r6, align 4
  store i32 %v0_b604, i32* %r0.global-to-local, align 4
  %v4_b608 = call i32 @function_f064(i32 %v0_b604, i32 %v0_b5e8, i32 %v5_b5f4, i32 %stack_var_-152.0.ph)
  %v5_b608 = trunc i32 %v4_b608 to i8
  store i32 %v4_b608, i32* %r0.global-to-local, align 4
  %v3_b60c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b60c, i32* %r3.global-to-local, align 4
  %v3_b610 = mul i32 %v3_b60c, 32
  store i32 %v3_b610, i32* %r2.global-to-local, align 4
  %v0_b614 = load i32, i32* @r5, align 4
  %v1_b614 = add i32 %v0_b614, 16
  %v2_b614 = inttoptr i32 %v1_b614 to i32*
  %v3_b614 = load i32, i32* %v2_b614, align 4
  store i32 %v3_b614, i32* %r1.global-to-local, align 4
  %v5_b618 = mul i32 %v3_b60c, 24
  store i32 %v5_b618, i32* %r2.global-to-local, align 4
  %v4_b61c42 = udiv i32 %v4_b608, 256
  %v1_b620 = trunc i32 %v4_b61c42 to i8
  %v2_b620 = load i32, i32* @r7, align 4
  %v3_b620 = add i32 %v2_b620, 7
  %v4_b620 = inttoptr i32 %v3_b620 to i8*
  store i8 %v1_b620, i8* %v4_b620, align 1
  %v0_b624 = load i32, i32* %r2.global-to-local, align 4
  %v1_b624 = load i32, i32* @sb, align 4
  %v2_b624 = add i32 %v1_b624, %v0_b624
  store i32 %v2_b624, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_b62c = load i32, i32* @r7, align 4
  %v4_b62c = add i32 %v3_b62c, 6
  %v5_b62c = inttoptr i32 %v4_b62c to i8*
  store i8 %v5_b608, i8* %v5_b62c, align 1
  %v0_b630 = load i32, i32* %r1.global-to-local, align 4
  %v1_b630 = load i32, i32* %lr.global-to-local, align 4
  %v2_b630 = add i32 %v1_b630, 4
  %v3_b630 = inttoptr i32 %v2_b630 to i32*
  store i32 %v0_b630, i32* %v3_b630, align 4
  %v0_b634 = load i32, i32* %r3.global-to-local, align 4
  %v1_b634 = trunc i32 %v0_b634 to i8
  %v2_b634 = load i32, i32* %r2.global-to-local, align 4
  %v3_b634 = load i32, i32* @sb, align 4
  %v4_b634 = add i32 %v3_b634, %v2_b634
  %v5_b634 = inttoptr i32 %v4_b634 to i8*
  store i8 %v1_b634, i8* %v5_b634, align 1
  %v0_b638 = load i32, i32* @r8, align 4
  %v1_b638 = trunc i32 %v0_b638 to i8
  %v2_b638 = load i32, i32* %lr.global-to-local, align 4
  %v3_b638 = add i32 %v2_b638, 2
  %v4_b638 = inttoptr i32 %v3_b638 to i8*
  store i8 %v1_b638, i8* %v4_b638, align 1
  %v0_b63c = load i32, i32* @r8, align 4
  %v1_b63c = trunc i32 %v0_b63c to i8
  %v2_b63c = load i32, i32* %lr.global-to-local, align 4
  %v3_b63c = add i32 %v2_b63c, 1
  %v4_b63c = inttoptr i32 %v3_b63c to i8*
  store i8 %v1_b63c, i8* %v4_b63c, align 1
  %v0_b640 = load i32, i32* @r8, align 4
  %v1_b640 = trunc i32 %v0_b640 to i8
  %v2_b640 = load i32, i32* %lr.global-to-local, align 4
  %v3_b640 = add i32 %v2_b640, 3
  %v4_b640 = inttoptr i32 %v3_b640 to i8*
  store i8 %v1_b640, i8* %v4_b640, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b64c = load i32, i32* @r5, align 4
  store i32 %v0_b64c, i32* %r1.global-to-local, align 4
  store i32 %v3_b200, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-120.0.ph, i32* %r2.global-to-local, align 4
  %v0_b658 = load i32, i32* %lr.global-to-local, align 4
  %v6_b660 = inttoptr i32 %v0_b64c to i32*
  %v7_b660 = call i32 @function_14acc(i32 %v3_b200, i32* %v6_b660, i32 %stack_var_-120.0.ph, i32 16384, i32 %v0_b658, i32 16)
  %v3_b664 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b664, i32* %r3.global-to-local, align 4
  %v1_b668 = add i32 %v3_b664, 1
  store i32 %v1_b668, i32* %r0.global-to-local, align 4
  %v1_b66c = load i32, i32* @fp, align 4
  %v9_b66c = icmp eq i32 %v1_b668, %v1_b66c
  store i1 %v9_b66c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b668, i32* %stack_var_-40, align 4
  %v6_b674 = icmp slt i32 %v1_b668, %v1_b66c
  br i1 %v6_b674, label %dec_label_pc_b52c, label %dec_label_pc_b514

dec_label_pc_b67c:                                ; preds = %dec_label_pc_b210
  store i32 %v3_b200, i32* %r0.global-to-local, align 4
  %v1_b680 = call i32 @function_14234(i32 %v3_b200)
  store i32 %v1_b680, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b684

dec_label_pc_b684:                                ; preds = %dec_label_pc_b0ac, %dec_label_pc_b67c
  %v29_b688 = phi i32 [ %v3_b200, %dec_label_pc_b0ac ], [ %v1_b680, %dec_label_pc_b67c ]
  store i32 %v3_b0ac, i32* %r4.global-to-local, align 4
  store i32 %v15_b0ac, i32* %r8.global-to-local, align 4
  ret i32 %v29_b688

dec_label_pc_b68c:                                ; preds = %dec_label_pc_b52c
  %v1_b68c = add i32 %v2_b534, 16
  %v2_b68c = inttoptr i32 %v1_b68c to i32*
  %v3_b68c = load i32, i32* %v2_b68c, align 4
  store i32 %v3_b68c, i32* %r4.global-to-local, align 4
  %v0_b690 = call i32 @function_10a44()
  store i32 %v0_b690, i32* %r0.global-to-local, align 4
  %v3_b694 = load i32, i32* %stack_var_-40, align 4
  %v5_b69c = mul i32 %v3_b694, 24
  %v0_b6a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_b6a4 = load i32, i32* @sb, align 4
  %v2_b6a4 = add i32 %v1_b6a4, %v5_b69c
  store i32 %v2_b6a4, i32* %r1.global-to-local, align 4
  %v1_b6a8 = and i32 %v0_b6a0, 65280
  store i32 %v1_b6a8, i32* %r3.global-to-local, align 4
  %v1_b6a0 = udiv i32 %v0_b6a0, 256
  %v3_b6ac = and i32 %v1_b6a0, 65280
  store i32 %v3_b6ac, i32* %r2.global-to-local, align 4
  %v1_b6b4 = add i32 %v2_b6a4, 20
  %v2_b6b4 = inttoptr i32 %v1_b6b4 to i8*
  %v3_b6b4 = load i8, i8* %v2_b6b4, align 1
  %v4_b6b4 = zext i8 %v3_b6b4 to i32
  store i32 %v4_b6b4, i32* %lr.global-to-local, align 4
  %v2_b6c0 = call i32 @llvm.bswap.i32(i32 %v0_b6a0)
  %v7_b6c4 = lshr i32 %v0_b690, %v4_b6b4
  %v8_b6c4 = add i32 %v7_b6c4, %v2_b6c0
  %v3_b6d0 = mul i32 %v8_b6c4, 16777216
  %v1_b6d4 = and i32 %v8_b6c4, 65280
  store i32 %v1_b6d4, i32* %r0.global-to-local, align 4
  store i32 %v5_b1ec, i32* %r2.global-to-local, align 4
  %v4_b6e0 = mul nuw nsw i32 %v1_b6d4, 256
  %v5_b6e0 = or i32 %v4_b6e0, %v3_b6d0
  store i32 %v5_b6e0, i32* %r1.global-to-local, align 4
  %v2_b6e4 = call i32 @llvm.bswap.i32(i32 %v8_b6c4)
  store i32 %v2_b6e4, i32* %r3.global-to-local, align 4
  store i1 %v7_b558, i1* %cpsr_z.global-to-local, align 1
  %v1_b6ec = load i32, i32* @r5, align 4
  %v2_b6ec = add i32 %v1_b6ec, 16
  %v3_b6ec = inttoptr i32 %v2_b6ec to i32*
  store i32 %v2_b6e4, i32* %v3_b6ec, align 4
  br i1 %v2_b558, label %dec_label_pc_b6f4, label %dec_label_pc_b560

dec_label_pc_b6f4:                                ; preds = %dec_label_pc_b68c, %dec_label_pc_b554
  %v0_b6f4 = call i32 @function_10a44()
  store i32 %v0_b6f4, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  %v0_b700 = load i32, i32* @sl, align 4
  %v9_b700 = icmp eq i32 %v0_b700, 65535
  store i1 %v9_b700, i1* %cpsr_z.global-to-local, align 1
  %v1_b704 = load i32, i32* @r5, align 4
  %v2_b704 = add i32 %v1_b704, 12
  %v3_b704 = inttoptr i32 %v2_b704 to i32*
  store i32 %v0_b6f4, i32* %v3_b704, align 4
  br i1 %v9_b700, label %dec_label_pc_b70c, label %dec_label_pc_b6f4.dec_label_pc_b570_crit_edge

dec_label_pc_b6f4.dec_label_pc_b570_crit_edge:    ; preds = %dec_label_pc_b6f4
  %v1_b574.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b570

dec_label_pc_b70c:                                ; preds = %dec_label_pc_b6f4, %dec_label_pc_b560
  %v0_b70c = call i32 @function_10a44()
  %v3_b714 = urem i32 %v0_b70c, 65536
  store i32 %v3_b714, i32* %r0.global-to-local, align 4
  %v3_b71815 = udiv i32 %v0_b70c, 256
  %v1_b71c = trunc i32 %v3_b71815 to i8
  %v2_b71c = load i32, i32* @r5, align 4
  %v3_b71c = add i32 %v2_b71c, 5
  %v4_b71c = inttoptr i32 %v3_b71c to i8*
  store i8 %v1_b71c, i8* %v4_b71c, align 1
  %v0_b720 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v3_b254, i32* %r3.global-to-local, align 4
  %v1_b728 = sub i32 999, %v0_b720
  store i32 %v1_b728, i32* %r2.global-to-local, align 4
  %v3_b72c = sdiv i32 %v1_b728, 256
  store i32 %v3_b72c, i32* %r1.global-to-local, align 4
  %v1_b730 = load i32, i32* @r4, align 4
  %v9_b730 = icmp eq i32 %v3_b254, %v1_b730
  store i1 %v9_b730, i1* %cpsr_z.global-to-local, align 1
  %v1_b734 = trunc i32 %v0_b720 to i8
  %v2_b734 = load i32, i32* @r5, align 4
  %v3_b734 = add i32 %v2_b734, 4
  %v4_b734 = inttoptr i32 %v3_b734 to i8*
  store i8 %v1_b734, i8* %v4_b734, align 1
  %v0_b738 = load i32, i32* %r1.global-to-local, align 4
  %v1_b738 = trunc i32 %v0_b738 to i8
  %v2_b738 = load i32, i32* @r6, align 4
  %v3_b738 = add i32 %v2_b738, 5
  %v4_b738 = inttoptr i32 %v3_b738 to i8*
  store i8 %v1_b738, i8* %v4_b738, align 1
  %v0_b73c = load i32, i32* %r2.global-to-local, align 4
  %v1_b73c = trunc i32 %v0_b73c to i8
  %v2_b73c = load i32, i32* @r6, align 4
  %v3_b73c = add i32 %v2_b73c, 4
  %v4_b73c = inttoptr i32 %v3_b73c to i8*
  store i8 %v1_b73c, i8* %v4_b73c, align 1
  %v0_b740 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b740, label %dec_label_pc_b744, label %dec_label_pc_b70c.dec_label_pc_b57c_crit_edge

dec_label_pc_b70c.dec_label_pc_b57c_crit_edge:    ; preds = %dec_label_pc_b70c
  %v1_b580.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b57c

dec_label_pc_b744:                                ; preds = %dec_label_pc_b70c, %dec_label_pc_b570
  %v0_b744 = call i32 @function_10a44()
  %v1_b744 = trunc i32 %v0_b744 to i8
  store i32 %v0_b744, i32* %r0.global-to-local, align 4
  store i32 %v3_b258, i32* %r1.global-to-local, align 4
  %v4_b74c = sdiv i32 %v0_b744, 256
  store i32 %v4_b74c, i32* %r3.global-to-local, align 4
  %v1_b750 = load i32, i32* @r4, align 4
  %v9_b750 = icmp eq i32 %v3_b258, %v1_b750
  store i1 %v9_b750, i1* %cpsr_z.global-to-local, align 1
  %v3_b754 = load i32, i32* @r5, align 4
  %v4_b754 = add i32 %v3_b754, 44
  %v5_b754 = inttoptr i32 %v4_b754 to i8*
  store i8 %v1_b744, i8* %v5_b754, align 1
  %v0_b758 = load i32, i32* %r3.global-to-local, align 4
  %v1_b758 = trunc i32 %v0_b758 to i8
  %v2_b758 = load i32, i32* @r7, align 4
  %v3_b758 = add i32 %v2_b758, 1
  %v4_b758 = inttoptr i32 %v3_b758 to i8*
  store i8 %v1_b758, i8* %v4_b758, align 1
  %v0_b75c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b75c, label %dec_label_pc_b760, label %dec_label_pc_b588

dec_label_pc_b760:                                ; preds = %dec_label_pc_b744, %dec_label_pc_b57c
  %v0_b760 = call i32 @function_10a44()
  %v1_b760 = trunc i32 %v0_b760 to i8
  store i32 %v0_b760, i32* %r0.global-to-local, align 4
  store i32 %v1_b24c, i32* %r2.global-to-local, align 4
  %v4_b768 = sdiv i32 %v0_b760, 256
  store i32 %v4_b768, i32* %r3.global-to-local, align 4
  store i1 %v2_b58c, i1* %cpsr_z.global-to-local, align 1
  %v1_b770 = trunc i32 %v4_b768 to i8
  %v2_b770 = load i32, i32* @r7, align 4
  %v3_b770 = add i32 %v2_b770, 3
  %v4_b770 = inttoptr i32 %v3_b770 to i8*
  store i8 %v1_b770, i8* %v4_b770, align 1
  %v0_b774 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b774, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_b760
  %v1_b774 = load i32, i32* @r5, align 4
  %v2_b774 = add i32 %v1_b774, 16
  %v3_b774 = inttoptr i32 %v2_b774 to i32*
  %v4_b774 = load i32, i32* %v3_b774, align 4
  store i32 %v4_b774, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_b760, %bb100
  %v3_b778 = load i32, i32* @r7, align 4
  %v4_b778 = add i32 %v3_b778, 2
  %v5_b778 = inttoptr i32 %v4_b778 to i8*
  store i8 %v1_b760, i8* %v5_b778, align 1
  %v0_b77c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b77c, label %dec_label_pc_b784, label %bb102

bb102:                                            ; preds = %bb101
  %v1_b77c = load i32, i32* %r3.global-to-local, align 4
  %v2_b77c = load i32, i32* @r6, align 4
  %v3_b77c = add i32 %v2_b77c, 16
  %v4_b77c = inttoptr i32 %v3_b77c to i32*
  store i32 %v1_b77c, i32* %v4_b77c, align 4
  br label %dec_label_pc_b59c

dec_label_pc_b784:                                ; preds = %dec_label_pc_b588, %bb101
  %v0_b784 = call i32 @function_10a44()
  store i32 %v0_b784, i32* %r0.global-to-local, align 4
  store i32 %v1_b1b8, i32* %r3.global-to-local, align 4
  store i1 %v2_b78c, i1* %cpsr_z.global-to-local, align 1
  %v1_b790 = load i32, i32* @r6, align 4
  %v2_b790 = add i32 %v1_b790, 16
  %v3_b790 = inttoptr i32 %v2_b790 to i32*
  store i32 %v0_b784, i32* %v3_b790, align 4
  br i1 %v2_b78c, label %dec_label_pc_b5a8, label %dec_label_pc_b798

dec_label_pc_b798:                                ; preds = %dec_label_pc_b59c, %dec_label_pc_b784
  %v0_b798 = load i32, i32* @r7, align 4
  %v1_b798 = add i32 %v0_b798, 8
  store i32 %v1_b798, i32* %r0.global-to-local, align 4
  store i32 %v5_b198, i32* @r1, align 4
  %v1_b7a0 = inttoptr i32 %v1_b798 to i8*
  %v2_b7a0 = call i32 @function_10c20(i8* %v1_b7a0)
  store i32 %v2_b7a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b5a8

dec_label_pc_b7a8:                                ; preds = %dec_label_pc_b238
  %v1_b7b0 = add i32 %v5_b198, 8
  store i32 %v1_b7b0, i32* %r2.global-to-local, align 4
  %v1_b7b4 = add i32 %v5_b198, 52
  store i32 %v1_b7b4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b514.preheader

; uselistorder directives
  uselistorder i32 %v1_b7b4, { 1, 0 }
  uselistorder i32 %v1_b7b0, { 1, 0 }
  uselistorder i32 %v4_b768, { 1, 0 }
  uselistorder i32 %v0_b760, { 0, 2, 1 }
  uselistorder i32 %v0_b744, { 0, 2, 1 }
  uselistorder i32 %v2_b6e4, { 1, 0 }
  uselistorder i32 %v8_b6c4, { 1, 2, 0 }
  uselistorder i32 %v0_b6a0, { 1, 0, 2 }
  uselistorder i32 %v1_b66c, { 1, 2, 0 }
  uselistorder i32 %v1_b668, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_b60c, { 1, 0, 2 }
  uselistorder i32 %v4_b608, { 0, 2, 1 }
  uselistorder i32 %v0_b5e8, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_b5d8, { 0, 2, 1 }
  uselistorder i32 %v4_b5bc, { 1, 0 }
  uselistorder i32 %v7_b540, { 1, 0, 2 }
  uselistorder i32 %v0_b514, { 1, 0 }
  uselistorder i1 %v7_b558, { 2, 1, 0 }
  uselistorder i1 %v2_b78c, { 2, 3, 1, 0 }
  uselistorder i32 %v1_b4d4, { 1, 0, 2 }
  uselistorder i32 %v0_b498, { 1, 0, 2 }
  uselistorder i32 %v3_b34c, { 0, 2, 1 }
  uselistorder i32 %v3_b30c, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0 }
  uselistorder i32 %v1_b2c4, { 1, 0 }
  uselistorder i32 %v1_b2a0, { 1, 0 }
  uselistorder i32 %v1_b29c, { 0, 2, 1 }
  uselistorder i32 %v3_b280, { 2, 1, 0 }
  uselistorder i32 %v0_b25c, { 1, 0, 2 }
  uselistorder i32 %v1_b24c, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_b248, { 0, 2, 1 }
  uselistorder i32 %v0_b244, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_b230, { 1, 0 }
  uselistorder i1 %v7_b204, { 1, 0 }
  uselistorder i32 %v3_b200, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_b1ec, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_b1b8, { 1, 0, 2 }
  uselistorder i32 %v5_b198, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8 %v5_b13c, { 1, 0 }
  uselistorder i32 %v2_b0cc, { 0, 3, 1, 2 }
  uselistorder i32 %v1_b0b0, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 36, 35, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 18, 23, 19, 20, 21, 22, 26, 24, 25, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29 }
  uselistorder i8 47, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder label %dec_label_pc_b798, { 1, 0 }
  uselistorder label %dec_label_pc_b784, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_b684, { 1, 0 }
  uselistorder label %dec_label_pc_b5a8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b514.preheader, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %.thread23, { 2, 1, 0 }
}

define i32 @function_b7c8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b7c8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_b7cc = urem i32 %arg1, 256
  store i32 %v1_b7cc, i32* @fp, align 4
  store i32 %v1_b7cc, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b7e4 = urem i32 %arg3, 256
  store i32 %v1_b7e4, i32* @r4, align 4
  %v2_b7e8 = call i32 @function_14e34(i32 %v1_b7cc, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b7f4 = load i32, i32* @fp, align 4
  store i32 %v0_b7f4, i32* %r0.global-to-local, align 4
  %v2_b7f8 = call i32 @function_14e34(i32 %v0_b7f4, i32 4)
  %v0_b7fc = load i32, i32* @r5, align 4
  store i32 %v0_b7fc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b80c = load i32, i32* @r4, align 4
  store i32 %v0_b80c, i32* %r0.global-to-local, align 4
  %v5_b810 = inttoptr i32 %v0_b7fc to i32*
  %v6_b810 = call i32 @function_a4e8(i32 %v0_b80c, i32* %v5_b810, i32 2, i32 0)
  %v1_b81c = urem i32 %v6_b810, 256
  store i32 %v1_b81c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b828 = load i32, i32* @r5, align 4
  store i32 %v0_b828, i32* %r1.global-to-local, align 4
  %v0_b82c = load i32, i32* @r4, align 4
  store i32 %v0_b82c, i32* %r0.global-to-local, align 4
  %v6_b834 = inttoptr i32 %v0_b828 to i32*
  %v7_b834 = call i32 @function_a4e8(i32 %v0_b82c, i32* %v6_b834, i32 3, i32 65535)
  %v0_b838 = load i32, i32* @r5, align 4
  store i32 %v0_b838, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b834, i32* @r6, align 4
  %v0_b848 = load i32, i32* @r4, align 4
  store i32 %v0_b848, i32* %r0.global-to-local, align 4
  %v4_b84c = inttoptr i32 %v0_b838 to i32*
  %v5_b84c = call i32 @function_a4e8(i32 %v0_b848, i32* %v4_b84c, i32 4, i32 64)
  %v1_b854 = urem i32 %v5_b84c, 256
  store i32 %v1_b854, i32* %ip.global-to-local, align 4
  %v0_b858 = load i32, i32* @r5, align 4
  store i32 %v0_b858, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b864 = load i32, i32* @r4, align 4
  store i32 %v0_b864, i32* %r0.global-to-local, align 4
  %v6_b86c = inttoptr i32 %v0_b858 to i32*
  %v7_b86c = call i32 @function_a4e8(i32 %v0_b864, i32* %v6_b86c, i32 5, i32 1)
  %v1_b878 = urem i32 %v7_b86c, 256
  store i32 %v1_b878, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b880 = load i32, i32* @r5, align 4
  store i32 %v0_b880, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b888 = load i32, i32* @r4, align 4
  store i32 %v0_b888, i32* %r0.global-to-local, align 4
  %v5_b890 = inttoptr i32 %v0_b880 to i32*
  %v6_b890 = call i32 @function_a4e8(i32 %v0_b888, i32* %v5_b890, i32 7, i32 65535)
  %v0_b894 = load i32, i32* @r5, align 4
  store i32 %v0_b894, i32* %r1.global-to-local, align 4
  %v3_b898 = mul i32 %v6_b890, 65536
  store i32 %v3_b898, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b8a4 = load i32, i32* @r4, align 4
  store i32 %v0_b8a4, i32* %r0.global-to-local, align 4
  %v4_b8a8 = inttoptr i32 %v0_b894 to i32*
  %v5_b8a8 = call i32 @function_a4e8(i32 %v0_b8a4, i32* %v4_b8a8, i32 11, i32 0)
  %v1_b8b0 = urem i32 %v5_b8a8, 256
  store i32 %v1_b8b0, i32* %ip.global-to-local, align 4
  %v0_b8b4 = load i32, i32* @r5, align 4
  store i32 %v0_b8b4, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b8c0 = load i32, i32* @r4, align 4
  store i32 %v0_b8c0, i32* %r0.global-to-local, align 4
  %v5_b8c8 = inttoptr i32 %v0_b8b4 to i32*
  %v6_b8c8 = call i32 @function_a4e8(i32 %v0_b8c0, i32* %v5_b8c8, i32 12, i32 1)
  %v1_b8d0 = urem i32 %v6_b8c8, 256
  store i32 %v1_b8d0, i32* %ip.global-to-local, align 4
  %v0_b8d4 = load i32, i32* @r5, align 4
  store i32 %v0_b8d4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b8e0 = load i32, i32* @r4, align 4
  store i32 %v0_b8e0, i32* %r0.global-to-local, align 4
  %v5_b8e8 = inttoptr i32 %v0_b8d4 to i32*
  %v6_b8e8 = call i32 @function_a4e8(i32 %v0_b8e0, i32* %v5_b8e8, i32 13, i32 1)
  %v1_b8f0 = urem i32 %v6_b8e8, 256
  store i32 %v1_b8f0, i32* %ip.global-to-local, align 4
  %v0_b8f4 = load i32, i32* @r5, align 4
  store i32 %v0_b8f4, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b900 = load i32, i32* @r4, align 4
  store i32 %v0_b900, i32* %r0.global-to-local, align 4
  %v5_b908 = inttoptr i32 %v0_b8f4 to i32*
  %v6_b908 = call i32 @function_a4e8(i32 %v0_b900, i32* %v5_b908, i32 14, i32 0)
  %v1_b910 = urem i32 %v6_b908, 256
  store i32 %v1_b910, i32* %ip.global-to-local, align 4
  %v0_b914 = load i32, i32* @r5, align 4
  store i32 %v0_b914, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b920 = load i32, i32* @r4, align 4
  store i32 %v0_b920, i32* %r0.global-to-local, align 4
  %v5_b928 = inttoptr i32 %v0_b914 to i32*
  %v6_b928 = call i32 @function_a4e8(i32 %v0_b920, i32* %v5_b928, i32 15, i32 0)
  %v1_b930 = urem i32 %v6_b928, 256
  store i32 %v1_b930, i32* %ip.global-to-local, align 4
  %v0_b934 = load i32, i32* @r5, align 4
  store i32 %v0_b934, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b940 = load i32, i32* @r4, align 4
  store i32 %v0_b940, i32* %r0.global-to-local, align 4
  %v5_b948 = inttoptr i32 %v0_b934 to i32*
  %v6_b948 = call i32 @function_a4e8(i32 %v0_b940, i32* %v5_b948, i32 16, i32 0)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_b948, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b958 = load i32, i32* @r5, align 4
  store i32 %v0_b958, i32* %r1.global-to-local, align 4
  %v0_b95c = load i32, i32* @r4, align 4
  store i32 %v0_b95c, i32* %r0.global-to-local, align 4
  %v1_b960 = urem i32 %v6_b948, 256
  store i32 %v1_b960, i32* @r8, align 4
  %v4_b964 = inttoptr i32 %v0_b958 to i32*
  %v5_b964 = call i32 @function_a4e8(i32 %v0_b95c, i32* %v4_b964, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b970 = load i32, i32* @r5, align 4
  store i32 %v0_b970, i32* %r1.global-to-local, align 4
  store i32 %v5_b964, i32* @sb, align 4
  %v0_b978 = load i32, i32* @r4, align 4
  store i32 %v0_b978, i32* %r0.global-to-local, align 4
  %v4_b97c = inttoptr i32 %v0_b970 to i32*
  %v5_b97c = call i32 @function_a4e8(i32 %v0_b978, i32* %v4_b97c, i32 1, i32 1)
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_b988 = urem i32 %v5_b97c, 256
  store i32 %v1_b988, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b998 = call i32 @function_14b30(i32 2, i32 3, i32 6)
  store i32 %v3_b998, i32* %r0.global-to-local, align 4
  %v0_b99c = load i32, i32* @r7, align 4
  %v3_b99c = udiv i32 %v0_b99c, 65536
  store i32 %v3_b99c, i32* %r1.global-to-local, align 4
  %v7_b9a0 = icmp eq i32 %v3_b998, -1
  store i1 %v7_b9a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b9a0, label %dec_label_pc_bbfc, label %dec_label_pc_b9b0

dec_label_pc_b9b0:                                ; preds = %dec_label_pc_b7c8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b9b8 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b9b8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b9cc = call i32 @function_14b00(i32 %v3_b998, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b9cc, i32* %r0.global-to-local, align 4
  %v7_b9d0 = icmp eq i32 %v6_b9cc, -1
  store i1 %v7_b9d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b9d0, label %dec_label_pc_bbf4, label %dec_label_pc_b9d8

dec_label_pc_b9d8:                                ; preds = %dec_label_pc_b9b0
  %v0_b9d8 = load i32, i32* @fp, align 4
  %v2_b9d8 = icmp eq i32 %v0_b9d8, 0
  store i1 %v2_b9d8, i1* %cpsr_z.global-to-local, align 1
  %v0_b9dc = load i32, i32* @r6, align 4
  %v3_b9dc = mul i32 %v0_b9dc, 65536
  store i32 %v3_b9dc, i32* %r0.global-to-local, align 4
  %v3_b9e0 = urem i32 %v0_b9dc, 65536
  store i32 %v3_b9e0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_b9d8, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_ba04.preheader

.thread18:                                        ; preds = %dec_label_pc_b9d8
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_be88

dec_label_pc_ba04.preheader:                      ; preds = %dec_label_pc_b9d8
  %v5_b9e8 = load i32, i32* @r7, align 4
  %v8_b9e8 = udiv i32 %v5_b9e8, 16777216
  %tmp73 = udiv i32 %v0_b9dc, 256
  %v8_b9ec = urem i32 %tmp73, 256
  store i32 %v8_b9ec, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_baf0 = icmp ugt i32 %v0_b99c, -65537
  %v2_bb14 = ptrtoint i32* %stack_var_-60 to i32
  %v3_bb20 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_bb50 = ptrtoint i32* %stack_var_-76 to i32
  %v2_bb54 = ptrtoint i32* %stack_var_-44 to i32
  %v2_bb58 = ptrtoint i32* %stack_var_-332 to i32
  %v4_bba4 = zext i8 %tmp31 to i32
  %v4_bba8 = zext i8 %tmp30 to i32
  %v4_bbb4 = mul nuw nsw i32 %v4_bba8, 256
  %v4_bbc4 = zext i8 %tmp to i32
  %v1_bbc8 = and i32 %v4_bbc4, 18
  %v2_bbcc = icmp eq i32 %v1_bbc8, 18
  %v1_bb00 = mul nuw nsw i32 %v3_b99c, 256
  %v4_bb04 = and i32 %v1_bb00, 65280
  %v5_bb04 = or i32 %v8_b9e8, %v4_bb04
  %v3_bb0893 = udiv i32 %v4_bb04, 256
  %v1_bb0c = trunc i32 %v3_bb0893 to i8
  %v1_bcd0 = mul i32 %v0_b9dc, 256
  %v4_bcd8 = and i32 %v1_bcd0, 65280
  %sext = mul i32 %v6_b810, 16777216
  %v4_bce8 = sdiv i32 %sext, 16777216
  %sext5 = mul i32 %v5_b84c, 16777216
  %v4_bd0c = sdiv i32 %sext5, 16777216
  %v5_bbb4 = or i32 %v4_bba4, %v4_bbb4
  %v1_bbd4 = and i32 %v4_bbc4, 5
  %v2_bbd4 = icmp eq i32 %v1_bbd4, 0
  %v1_bb10 = trunc i32 %v8_b9e8 to i8
  %v5_bcd8 = or i32 %v8_b9ec, %v4_bcd8
  %v1_bcf8 = trunc i32 %v4_bce8 to i8
  %v1_bdd8 = urem i32 %v5_b8a8, 2
  %tmp94 = sub nsw i32 0, %v1_bdd8
  %v4_bde0 = and i32 %tmp94, 32
  %v1_bdf0 = urem i32 %v6_b8c8, 2
  %tmp95 = sub nsw i32 0, %v1_bdf0
  %v4_bdf8 = and i32 %tmp95, 16
  %v1_be08 = urem i32 %v6_b8e8, 2
  %tmp96 = sub nsw i32 0, %v1_be08
  %v4_be10 = and i32 %tmp96, 8
  %v1_be20 = urem i32 %v6_b908, 2
  %tmp97 = sub nsw i32 0, %v1_be20
  %v4_be28 = and i32 %tmp97, 4
  %v1_be38 = urem i32 %v6_b928, 2
  %tmp98 = sub nsw i32 0, %v1_be38
  %v3_be40 = and i32 %tmp98, 2
  br label %dec_label_pc_ba04

dec_label_pc_ba04:                                ; preds = %dec_label_pc_be74, %dec_label_pc_bbdc, %dec_label_pc_ba04.preheader
  store i32 %v8_b9ec, i32* %r3.global-to-local, align 4
  %v0_ba10 = load i32, i32* @sb, align 4
  %v1_ba10 = add i32 %v0_ba10, 40
  store i32 %v1_ba10, i32* @sl, align 4
  br label %dec_label_pc_ba14

dec_label_pc_ba14:                                ; preds = %dec_label_pc_bbe8, %dec_label_pc_ba04
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_ba20 = call i32 @function_14b30(i32 2, i32 1, i32 0)
  store i32 %v3_ba20, i32* %r0.global-to-local, align 4
  %v7_ba24 = icmp eq i32 %v3_ba20, -1
  store i1 %v7_ba24, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ba20, i32* @r7, align 4
  br i1 %v7_ba24, label %dec_label_pc_be74, label %dec_label_pc_ba30

dec_label_pc_ba30:                                ; preds = %dec_label_pc_ba14
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_ba38 = call i32 @function_14144(i32 %v3_ba20, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_ba40 = or i32 %v2_ba38, 2048
  store i32 %v1_ba40, i32* @r2, align 4
  %v0_ba44 = load i32, i32* @r7, align 4
  store i32 %v0_ba44, i32* %r0.global-to-local, align 4
  %v2_ba48 = call i32 @function_14144(i32 %v0_ba44, i32 4)
  store i32 %v2_ba48, i32* %r0.global-to-local, align 4
  %v3_ba4c = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_ba5c = mul i32 %v3_ba4c, 24
  store i32 %v5_ba5c, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_ba6c = add i32 %v5_ba5c, %arg2
  store i32 %v2_ba6c, i32* %r2.global-to-local, align 4
  %v1_ba70 = add i32 %v2_ba6c, 20
  %v2_ba70 = inttoptr i32 %v1_ba70 to i8*
  %v3_ba70 = load i8, i8* %v2_ba70, align 1
  %v4_ba70 = zext i8 %v3_ba70 to i32
  store i32 %v4_ba70, i32* %r3.global-to-local, align 4
  %v2_ba74 = icmp ugt i8 %v3_ba70, 30
  %v7_ba74 = icmp eq i8 %v3_ba70, 31
  store i1 %v7_ba74, i1* %cpsr_z.global-to-local, align 1
  %v2_ba78 = xor i1 %v7_ba74, true
  %v3_ba78 = and i1 %v2_ba74, %v2_ba78
  %v5_ba78 = add i32 %v2_ba6c, 16
  %v6_ba78 = inttoptr i32 %v5_ba78 to i32*
  %v7_ba78 = load i32, i32* %v6_ba78, align 4
  br i1 %v3_ba78, label %dec_label_pc_bae4, label %dec_label_pc_ba84

dec_label_pc_ba84:                                ; preds = %dec_label_pc_ba30
  store i32 %v7_ba78, i32* @r4, align 4
  %v0_ba88 = call i32 @function_10a44()
  store i32 %v0_ba88, i32* %r0.global-to-local, align 4
  %v3_ba8c = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_ba98 = mul i32 %v3_ba8c, 24
  %v0_ba9c = load i32, i32* @r4, align 4
  %v2_baa0 = add i32 %v5_ba98, %arg2
  store i32 %v2_baa0, i32* %r1.global-to-local, align 4
  %v1_baa4 = and i32 %v0_ba9c, 65280
  store i32 %v1_baa4, i32* %r3.global-to-local, align 4
  %v1_ba9c = udiv i32 %v0_ba9c, 256
  %v3_baa8 = and i32 %v1_ba9c, 65280
  store i32 %v3_baa8, i32* %r2.global-to-local, align 4
  %v3_baac = mul i32 %v0_ba9c, 16777216
  store i32 %v3_baac, i32* %ip.global-to-local, align 4
  %v1_bab0 = add i32 %v2_baa0, 20
  %v2_bab0 = inttoptr i32 %v1_bab0 to i8*
  %v3_bab0 = load i8, i8* %v2_bab0, align 1
  %v4_bab0 = zext i8 %v3_bab0 to i32
  store i32 %v4_bab0, i32* %lr.global-to-local, align 4
  %v4_bab4 = mul nuw nsw i32 %v1_baa4, 256
  %v5_bab4 = or i32 %v4_bab4, %v3_baac
  store i32 %v5_bab4, i32* %ip.global-to-local, align 4
  %v2_babc = call i32 @llvm.bswap.i32(i32 %v0_ba9c)
  %v7_bac0 = lshr i32 %v0_ba88, %v4_bab0
  %v8_bac0 = add i32 %v7_bac0, %v2_babc
  store i32 %v8_bac0, i32* %r2.global-to-local, align 4
  %v3_bacc = mul i32 %v8_bac0, 16777216
  %v1_bad0 = and i32 %v8_bac0, 65280
  store i32 %v1_bad0, i32* %r0.global-to-local, align 4
  %v4_bad4 = mul nuw nsw i32 %v1_bad0, 256
  %v5_bad4 = or i32 %v4_bad4, %v3_bacc
  store i32 %v5_bad4, i32* %r1.global-to-local, align 4
  %v2_badc = call i32 @llvm.bswap.i32(i32 %v8_bac0)
  br label %dec_label_pc_bae4

dec_label_pc_bae4:                                ; preds = %dec_label_pc_ba30, %dec_label_pc_ba84
  %storemerge25 = phi i32 [ %v2_badc, %dec_label_pc_ba84 ], [ %v7_ba78, %dec_label_pc_ba30 ]
  store i32 %v3_b99c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_baf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_baf0, label %dec_label_pc_bc04, label %dec_label_pc_baf8

dec_label_pc_baf8:                                ; preds = %dec_label_pc_bae4
  store i32 %v8_b9e8, i32* %ip.global-to-local, align 4
  store i32 %v5_bb04, i32* %r3.global-to-local, align 4
  store i32 %v3_bb0893, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_bb14

dec_label_pc_bb14:                                ; preds = %dec_label_pc_bc04, %dec_label_pc_baf8
  %stack_var_-57.0 = phi i8 [ %v1_bc0c, %dec_label_pc_bc04 ], [ %v1_bb0c, %dec_label_pc_baf8 ]
  %storemerge = phi i8 [ %v1_bc04, %dec_label_pc_bc04 ], [ %v1_bb10, %dec_label_pc_baf8 ]
  store i32 %v2_bb14, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_bb1c = load i32, i32* @r7, align 4
  store i32 %v0_bb1c, i32* %r0.global-to-local, align 4
  %v4_bb20 = call i32 @function_1498c(i32 %v0_bb1c, %sockaddr* nonnull %v3_bb20, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bb28 = call i32 @function_14504(i32* null)
  store i32 %v2_bb28, i32* %r0.global-to-local, align 4
  store i32 %v2_bb28, i32* @r4, align 4
  %v9_bb88 = icmp eq i32 %tmp32, %storemerge25
  %v4_bbac = zext i8 %storemerge to i32
  %v4_bbb0 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_bb88 to i32
  %v9_bb9c = icmp eq i1 %v9_bb88, false
  %v4_bbb8 = mul nuw nsw i32 %v4_bbb0, 256
  %v5_bbb8 = or i32 %v4_bbb8, %v4_bbac
  %v9_bbbc = icmp eq i32 %v5_bbb8, %v5_bbb4
  br label %dec_label_pc_bb44

dec_label_pc_bb34:                                ; preds = %.thread23, %dec_label_pc_bba4, %dec_label_pc_bbd4, %bb75
  %v2_bb34 = call i32 @function_14504(i32* null)
  %v0_bb38 = load i32, i32* @r4, align 4
  %v2_bb38 = sub i32 %v2_bb34, %v0_bb38
  store i32 %v2_bb38, i32* %r0.global-to-local, align 4
  %v7_bb3c = icmp eq i32 %v2_bb38, 10
  store i1 %v7_bb3c, i1* %cpsr_z.global-to-local, align 1
  %v8_bb40 = icmp sgt i32 %v2_bb38, 10
  br i1 %v8_bb40, label %dec_label_pc_bbe8, label %dec_label_pc_bb44

dec_label_pc_bb44:                                ; preds = %dec_label_pc_bb34, %dec_label_pc_bb14
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_bb50, i32* %lr.global-to-local, align 4
  store i32 %v2_bb54, i32* %ip.global-to-local, align 4
  store i32 %v2_bb58, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b998, i32* %r0.global-to-local, align 4
  %v7_bb6c = call i32 @function_14a6c(i32 %v3_b998, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_bb50, i32 %v2_bb54)
  store i32 %v7_bb6c, i32* %r2.global-to-local, align 4
  %v7_bb74 = icmp eq i32 %v7_bb6c, -1
  store i1 %v7_bb74, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_bb74, label %dec_label_pc_bbfc, label %dec_label_pc_bb80

dec_label_pc_bb80:                                ; preds = %dec_label_pc_bb44
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_bb94 = icmp eq i32 %v7_bb6c, 40
  store i1 %v7_bb94, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_bb6c, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_bb80
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_bb34

bb75:                                             ; preds = %dec_label_pc_bb80
  store i1 %v9_bb9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bb9c, label %dec_label_pc_bb34, label %dec_label_pc_bba4

dec_label_pc_bba4:                                ; preds = %bb75
  store i32 %v4_bba8, i32* %r1.global-to-local, align 4
  store i32 %v4_bbac, i32* %ip.global-to-local, align 4
  store i32 %v4_bbb0, i32* %r2.global-to-local, align 4
  store i32 %v5_bbb4, i32* %r3.global-to-local, align 4
  store i32 %v5_bbb8, i32* @r5, align 4
  store i1 %v9_bbbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bbbc, label %dec_label_pc_bbc4, label %dec_label_pc_bb34

dec_label_pc_bbc4:                                ; preds = %dec_label_pc_bba4
  store i32 %v4_bbc4, i32* %r2.global-to-local, align 4
  store i32 %v1_bbc8, i32* %r3.global-to-local, align 4
  store i1 %v2_bbcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bbcc, label %dec_label_pc_bc18, label %dec_label_pc_bbd4

dec_label_pc_bbd4:                                ; preds = %dec_label_pc_bbc4
  store i1 %v2_bbd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bbd4, label %dec_label_pc_bb34, label %dec_label_pc_bbdc

dec_label_pc_bbdc:                                ; preds = %dec_label_pc_bbd4
  %v0_bbdc = load i32, i32* @r7, align 4
  store i32 %v0_bbdc, i32* %r0.global-to-local, align 4
  %v1_bbe0 = call i32 @function_14234(i32 %v0_bbdc)
  store i32 %v1_bbe0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ba04

dec_label_pc_bbe8:                                ; preds = %dec_label_pc_bb34
  %v0_bbe8 = load i32, i32* @r7, align 4
  store i32 %v0_bbe8, i32* %r0.global-to-local, align 4
  %v1_bbec = call i32 @function_14234(i32 %v0_bbe8)
  store i32 %v1_bbec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ba14

dec_label_pc_bbf4:                                ; preds = %dec_label_pc_b9b0
  store i32 %v3_b998, i32* %r0.global-to-local, align 4
  %v1_bbf8 = call i32 @function_14234(i32 %v3_b998)
  store i32 %v1_bbf8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bbfc

dec_label_pc_bbfc:                                ; preds = %dec_label_pc_bb44, %dec_label_pc_b7c8, %dec_label_pc_bbf4
  %v29_bc00 = phi i32 [ %v3_b998, %dec_label_pc_b7c8 ], [ %v1_bbf8, %dec_label_pc_bbf4 ], [ 0, %dec_label_pc_bb44 ]
  ret i32 %v29_bc00

dec_label_pc_bc04:                                ; preds = %dec_label_pc_bae4
  %v0_bc04 = call i32 @function_10a44()
  %v1_bc04 = trunc i32 %v0_bc04 to i8
  store i32 %v0_bc04, i32* %r0.global-to-local, align 4
  %v4_bc08 = sdiv i32 %v0_bc04, 256
  store i32 %v4_bc08, i32* %r3.global-to-local, align 4
  %v1_bc0c = trunc i32 %v4_bc08 to i8
  br label %dec_label_pc_bb14

dec_label_pc_bc18:                                ; preds = %dec_label_pc_bbc4
  %v3_bc18 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bc18, i32* @r4, align 4
  store i32 %v2_b7e8, i32* %r2.global-to-local, align 4
  %v3_bc20 = mul i32 %v3_bc18, 16
  store i32 %v3_bc20, i32* %ip.global-to-local, align 4
  %v3_bc24 = add i32 %v3_bc20, %v2_b7e8
  %v4_bc24 = inttoptr i32 %v3_bc24 to i32*
  store i32 %storemerge25, i32* %v4_bc24, align 4
  %v0_bc28 = load i32, i32* @r6, align 4
  %v1_bc28 = add i32 %v0_bc28, 4
  %v2_bc28 = inttoptr i32 %v1_bc28 to i32*
  %v3_bc28 = load i32, i32* %v2_bc28, align 4
  store i32 %v3_bc28, i32* %r0.global-to-local, align 4
  %v1_bc30 = and i32 %v3_bc28, 65280
  store i32 %v1_bc30, i32* %r1.global-to-local, align 4
  store i32 %v2_b7e8, i32* %lr.global-to-local, align 4
  %v3_bc38 = mul i32 %v3_bc28, 16777216
  %v4_bc40 = mul nuw nsw i32 %v1_bc30, 256
  %v5_bc40 = or i32 %v4_bc40, %v3_bc38
  store i32 %v5_bc40, i32* %r2.global-to-local, align 4
  %v1_bc48 = load i32, i32* %ip.global-to-local, align 4
  %v2_bc48 = add i32 %v1_bc48, %v2_b7e8
  store i32 %v2_bc48, i32* %ip.global-to-local, align 4
  %v2_bc4c = call i32 @llvm.bswap.i32(i32 %v3_bc28)
  store i32 %v2_bc4c, i32* %r3.global-to-local, align 4
  %v2_bc50 = add i32 %v2_bc48, 4
  %v3_bc50 = inttoptr i32 %v2_bc50 to i32*
  store i32 %v2_bc4c, i32* %v3_bc50, align 4
  %v0_bc54 = load i32, i32* @r6, align 4
  %v1_bc54 = add i32 %v0_bc54, 8
  %v2_bc54 = inttoptr i32 %v1_bc54 to i32*
  %v3_bc54 = load i32, i32* %v2_bc54, align 4
  store i32 %v3_bc54, i32* %r0.global-to-local, align 4
  %v1_bc5c = and i32 %v3_bc54, 65280
  store i32 %v1_bc5c, i32* %r1.global-to-local, align 4
  %v3_bc60 = mul i32 %v3_bc54, 16777216
  %v4_bc68 = mul nuw nsw i32 %v1_bc5c, 256
  %v5_bc68 = or i32 %v4_bc68, %v3_bc60
  store i32 %v5_bc68, i32* %r2.global-to-local, align 4
  %v2_bc70 = call i32 @llvm.bswap.i32(i32 %v3_bc54)
  store i32 %v2_bc70, i32* %r3.global-to-local, align 4
  %v1_bc74 = load i32, i32* %ip.global-to-local, align 4
  %v2_bc74 = add i32 %v1_bc74, 8
  %v3_bc74 = inttoptr i32 %v2_bc74 to i32*
  store i32 %v2_bc70, i32* %v3_bc74, align 4
  %v0_bc78 = load i32, i32* @r6, align 4
  %v1_bc78 = inttoptr i32 %v0_bc78 to i32*
  %v2_bc78 = load i32, i32* %v1_bc78, align 4
  %v3_bc7c = udiv i32 %v2_bc78, 65536
  store i32 %v3_bc7c, i32* %r2.global-to-local, align 4
  %v3_bc803 = udiv i32 %v2_bc78, 16777216
  store i32 %v3_bc803, i32* %r1.global-to-local, align 4
  %v0_bc84 = load i32, i32* @r5, align 4
  %v3_bc84 = sdiv i32 %v0_bc84, 256
  store i32 %v3_bc84, i32* %r3.global-to-local, align 4
  %v1_bc88 = trunc i32 %v3_bc84 to i8
  %v2_bc88 = load i32, i32* %ip.global-to-local, align 4
  %v3_bc88 = add i32 %v2_bc88, 15
  %v4_bc88 = inttoptr i32 %v3_bc88 to i8*
  store i8 %v1_bc88, i8* %v4_bc88, align 1
  %v0_bc8c = load i32, i32* %r1.global-to-local, align 4
  %v1_bc8c = trunc i32 %v0_bc8c to i8
  %v2_bc8c = load i32, i32* %ip.global-to-local, align 4
  %v3_bc8c = add i32 %v2_bc8c, 13
  %v4_bc8c = inttoptr i32 %v3_bc8c to i8*
  store i8 %v1_bc8c, i8* %v4_bc8c, align 1
  %v0_bc90 = load i32, i32* %r2.global-to-local, align 4
  %v1_bc90 = trunc i32 %v0_bc90 to i8
  %v2_bc90 = load i32, i32* %ip.global-to-local, align 4
  %v3_bc90 = add i32 %v2_bc90, 12
  %v4_bc90 = inttoptr i32 %v3_bc90 to i8*
  store i8 %v1_bc90, i8* %v4_bc90, align 1
  %v0_bc94 = load i32, i32* @r5, align 4
  %v1_bc94 = trunc i32 %v0_bc94 to i8
  %v2_bc94 = load i32, i32* %ip.global-to-local, align 4
  %v3_bc94 = add i32 %v2_bc94, 14
  %v4_bc94 = inttoptr i32 %v3_bc94 to i8*
  store i8 %v1_bc94, i8* %v4_bc94, align 1
  %v0_bc98 = load i32, i32* @sl, align 4
  store i32 %v0_bc98, i32* %r0.global-to-local, align 4
  %v1_bc9c = call i32 @function_14ce0(i32 %v0_bc98)
  store i32 %v1_bc9c, i32* %r0.global-to-local, align 4
  store i32 %v2_b7f8, i32* %r1.global-to-local, align 4
  %v3_bca4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bca4, i32* %r2.global-to-local, align 4
  %v2_bca8 = load i32, i32* @r4, align 4
  %v5_bca8 = mul i32 %v2_bca8, 4
  %v6_bca8 = add i32 %v5_bca8, %v2_b7f8
  %v7_bca8 = inttoptr i32 %v6_bca8 to i32*
  store i32 %v1_bc9c, i32* %v7_bca8, align 4
  %v0_bcac = load i32, i32* %r1.global-to-local, align 4
  %v1_bcac = load i32, i32* %r2.global-to-local, align 4
  %v4_bcac = mul i32 %v1_bcac, 4
  %v5_bcac = add i32 %v4_bcac, %v0_bcac
  %v6_bcac = inttoptr i32 %v5_bcac to i32*
  %v7_bcac = load i32, i32* %v6_bcac, align 4
  store i32 %v7_bcac, i32* @r4, align 4
  %v1_bcb0 = inttoptr i32 %v7_bcac to i8*
  %v2_bcb0 = load i8, i8* %v1_bcb0, align 1
  %tmp100 = urem i8 %v2_bcb0, 16
  %v1_bcb4 = zext i8 %tmp100 to i32
  %v1_bcb8 = or i32 %v1_bcb4, 64
  store i32 %v1_bcb8, i32* %r3.global-to-local, align 4
  %v1_bcbc = trunc i32 %v1_bcb8 to i8
  store i8 %v1_bcbc, i8* %v1_bcb0, align 1
  %v0_bcc0 = load i32, i32* @r4, align 4
  %v1_bcc0 = inttoptr i32 %v0_bcc0 to i8*
  %v2_bcc0 = load i8, i8* %v1_bcc0, align 1
  store i32 %v3_b9e0, i32* %ip.global-to-local, align 4
  %v1_bccc = and i8 %v2_bcc0, -16
  %v1_bcd4 = or i8 %v1_bccc, 5
  store i32 %v5_bcd8, i32* %r0.global-to-local, align 4
  %v0_bcdc = load i32, i32* @sl, align 4
  %v3_bcdc = mul i32 %v0_bcdc, 65536
  store i32 %v3_bcdc, i32* %r2.global-to-local, align 4
  store i32 %v1_b878, i32* %lr.global-to-local, align 4
  store i8 %v1_bcd4, i8* %v1_bcc0, align 1
  store i32 %v4_bce8, i32* %r1.global-to-local, align 4
  %v0_bcec = load i32, i32* %r2.global-to-local, align 4
  %v3_bcec = udiv i32 %v0_bcec, 65536
  %v1_bcf0 = urem i32 %v3_bcec, 256
  store i32 %v1_bcf0, i32* %r3.global-to-local, align 4
  %v3_bcf4 = udiv i32 %v0_bcec, 16777216
  store i32 %v3_bcf4, i32* %r2.global-to-local, align 4
  %v2_bcf8 = load i32, i32* @r4, align 4
  %v3_bcf8 = add i32 %v2_bcf8, 1
  %v4_bcf8 = inttoptr i32 %v3_bcf8 to i8*
  store i8 %v1_bcf8, i8* %v4_bcf8, align 1
  %v0_bcfc = load i32, i32* %r2.global-to-local, align 4
  %v1_bcfc = load i32, i32* %r3.global-to-local, align 4
  %v4_bcfc = mul i32 %v1_bcfc, 256
  %v5_bcfc = or i32 %v4_bcfc, %v0_bcfc
  store i32 %v5_bcfc, i32* %r2.global-to-local, align 4
  %v1_bd00 = trunc i32 %v0_bcfc to i8
  %v2_bd00 = load i32, i32* @r4, align 4
  %v3_bd00 = add i32 %v2_bd00, 2
  %v4_bd00 = inttoptr i32 %v3_bd00 to i8*
  store i8 %v1_bd00, i8* %v4_bd00, align 1
  %v0_bd04 = load i32, i32* %lr.global-to-local, align 4
  %v2_bd04 = icmp eq i32 %v0_bd04, 0
  store i1 %v2_bd04, i1* %cpsr_z.global-to-local, align 1
  %v0_bd08 = load i32, i32* %r2.global-to-local, align 4
  %v3_bd08 = sdiv i32 %v0_bd08, 256
  store i32 %v3_bd08, i32* %r3.global-to-local, align 4
  store i32 %v4_bd0c, i32* %r2.global-to-local, align 4
  %v1_bd10 = trunc i32 %v3_bd08 to i8
  %v2_bd10 = load i32, i32* @r4, align 4
  %v3_bd10 = add i32 %v2_bd10, 3
  %v4_bd10 = inttoptr i32 %v3_bd10 to i8*
  store i8 %v1_bd10, i8* %v4_bd10, align 1
  %v0_bd14 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd14, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_bc18
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_bc18, %bb76
  %v0_bd18 = load i32, i32* %r2.global-to-local, align 4
  %v1_bd18 = trunc i32 %v0_bd18 to i8
  %v2_bd18 = load i32, i32* @r4, align 4
  %v3_bd18 = add i32 %v2_bd18, 8
  %v4_bd18 = inttoptr i32 %v3_bd18 to i8*
  store i8 %v1_bd18, i8* %v4_bd18, align 1
  %v0_bd1c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd1c, label %.thread6, label %bb78

bb78:                                             ; preds = %bb77
  %v1_bd1c = load i32, i32* %r3.global-to-local, align 4
  %v2_bd1c = trunc i32 %v1_bd1c to i8
  %v3_bd1c = load i32, i32* @r4, align 4
  %v4_bd1c = add i32 %v3_bd1c, 6
  %v5_bd1c = inttoptr i32 %v4_bd1c to i8*
  store i8 %v2_bd1c, i8* %v5_bd1c, align 1
  %v0_bd20.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd20.pr, label %.thread6, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_bd28 = load i32, i32* @r4, align 4
  %v3_bd28 = add i32 %v2_bd28, 9
  %v4_bd28 = inttoptr i32 %v3_bd28 to i8*
  store i8 6, i8* %v4_bd28, align 1
  %v0_bd2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd2c, label %bb81, label %bb80

bb80:                                             ; preds = %.thread6
  %v1_bd2c = load i32, i32* %r2.global-to-local, align 4
  %v2_bd2c = trunc i32 %v1_bd2c to i8
  %v3_bd2c = load i32, i32* @r4, align 4
  %v4_bd2c = add i32 %v3_bd2c, 7
  %v5_bd2c = inttoptr i32 %v4_bd2c to i8*
  store i8 %v2_bd2c, i8* %v5_bd2c, align 1
  br label %bb81

bb81:                                             ; preds = %.thread6, %bb80
  %v2_bd34 = load i32, i32* @global_var_1f858.88, align 4
  store i32 %v2_bd34, i32* %r3.global-to-local, align 4
  %v0_bd38 = load i32, i32* %r0.global-to-local, align 4
  %v3_bd38 = sdiv i32 %v0_bd38, 256
  store i32 %v3_bd38, i32* %ip.global-to-local, align 4
  %v1_bd3c = load i32, i32* @r4, align 4
  %v2_bd3c = add i32 %v1_bd3c, 12
  %v3_bd3c = inttoptr i32 %v2_bd3c to i32*
  store i32 %v2_bd34, i32* %v3_bd3c, align 4
  %v0_bd40 = load i32, i32* %ip.global-to-local, align 4
  %v1_bd40 = trunc i32 %v0_bd40 to i8
  %v2_bd40 = load i32, i32* @r4, align 4
  %v3_bd40 = add i32 %v2_bd40, 5
  %v4_bd40 = inttoptr i32 %v3_bd40 to i8*
  store i8 %v1_bd40, i8* %v4_bd40, align 1
  %v3_bd44 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bd44, i32* %r2.global-to-local, align 4
  store i32 %v2_b7e8, i32* %ip.global-to-local, align 4
  %v4_bd4c = mul i32 %v3_bd44, 16
  %v5_bd4c = add i32 %v4_bd4c, %v2_b7e8
  %v6_bd4c = inttoptr i32 %v5_bd4c to i32*
  %v7_bd4c = load i32, i32* %v6_bd4c, align 4
  store i32 %v7_bd4c, i32* %r3.global-to-local, align 4
  %v0_bd50 = load i32, i32* %r0.global-to-local, align 4
  %v1_bd50 = trunc i32 %v0_bd50 to i8
  %v2_bd50 = load i32, i32* @r4, align 4
  %v3_bd50 = add i32 %v2_bd50, 4
  %v4_bd50 = inttoptr i32 %v3_bd50 to i8*
  store i8 %v1_bd50, i8* %v4_bd50, align 1
  %v0_bd54 = load i32, i32* %r3.global-to-local, align 4
  %v1_bd54 = load i32, i32* @r4, align 4
  %v2_bd54 = add i32 %v1_bd54, 16
  %v3_bd54 = inttoptr i32 %v2_bd54 to i32*
  store i32 %v0_bd54, i32* %v3_bd54, align 4
  %v0_bd58 = load i32, i32* %r2.global-to-local, align 4
  %v3_bd58 = mul i32 %v0_bd58, 16
  %v1_bd5c = load i32, i32* %ip.global-to-local, align 4
  %v2_bd5c = add i32 %v1_bd5c, %v3_bd58
  store i32 %v2_bd5c, i32* %r2.global-to-local, align 4
  %v1_bd60 = add i32 %v2_bd5c, 13
  %v2_bd60 = inttoptr i32 %v1_bd60 to i8*
  %v3_bd60 = load i8, i8* %v2_bd60, align 1
  %v4_bd60 = zext i8 %v3_bd60 to i32
  store i32 %v4_bd60, i32* %r1.global-to-local, align 4
  %v1_bd64 = add i32 %v2_bd5c, 12
  %v2_bd64 = inttoptr i32 %v1_bd64 to i8*
  %v3_bd64 = load i8, i8* %v2_bd64, align 1
  %v4_bd64 = zext i8 %v3_bd64 to i32
  %v4_bd68 = mul nuw nsw i32 %v4_bd60, 256
  %v5_bd68 = or i32 %v4_bd64, %v4_bd68
  store i32 %v5_bd68, i32* %r3.global-to-local, align 4
  %v2_bd6c = load i32, i32* @r4, align 4
  %v3_bd6c = add i32 %v2_bd6c, 20
  %v4_bd6c = inttoptr i32 %v3_bd6c to i8*
  store i8 %v3_bd64, i8* %v4_bd6c, align 1
  %v0_bd70 = load i32, i32* @r4, align 4
  %v1_bd70 = add i32 %v0_bd70, 20
  store i32 %v1_bd70, i32* @r6, align 4
  %v0_bd74 = load i32, i32* %r3.global-to-local, align 4
  %v3_bd74 = sdiv i32 %v0_bd74, 256
  store i32 %v3_bd74, i32* %r3.global-to-local, align 4
  %v1_bd78 = trunc i32 %v3_bd74 to i8
  %v3_bd78 = add i32 %v0_bd70, 21
  %v4_bd78 = inttoptr i32 %v3_bd78 to i8*
  store i8 %v1_bd78, i8* %v4_bd78, align 1
  %v0_bd7c = load i32, i32* @r6, align 4
  %v1_bd7c = add i32 %v0_bd7c, 13
  %v2_bd7c = inttoptr i32 %v1_bd7c to i8*
  %v3_bd7c = load i8, i8* %v2_bd7c, align 1
  %v4_bd7c = zext i8 %v3_bd7c to i32
  store i32 %v4_bd7c, i32* %r3.global-to-local, align 4
  %v0_bd80 = load i32, i32* %r2.global-to-local, align 4
  %v1_bd80 = add i32 %v0_bd80, 8
  %v2_bd80 = inttoptr i32 %v1_bd80 to i32*
  %v3_bd80 = load i32, i32* %v2_bd80, align 4
  store i32 %v3_bd80, i32* %r1.global-to-local, align 4
  %v1_bd84 = or i32 %v4_bd7c, 1
  store i32 %v1_bd84, i32* %r3.global-to-local, align 4
  %v1_bd88 = add i32 %v0_bd80, 15
  %v2_bd88 = inttoptr i32 %v1_bd88 to i8*
  %v3_bd88 = load i8, i8* %v2_bd88, align 1
  %v4_bd88 = zext i8 %v3_bd88 to i32
  store i32 %v4_bd88, i32* %ip.global-to-local, align 4
  %v1_bd8c = add i32 %v0_bd80, 14
  %v2_bd8c = inttoptr i32 %v1_bd8c to i8*
  %v3_bd8c = load i8, i8* %v2_bd8c, align 1
  %v4_bd8c = zext i8 %v3_bd8c to i32
  store i32 %v4_bd8c, i32* %r0.global-to-local, align 4
  %v2_bd90 = add i32 %v0_bd7c, 4
  %v3_bd90 = inttoptr i32 %v2_bd90 to i32*
  store i32 %v3_bd80, i32* %v3_bd90, align 4
  %v0_bd94 = load i32, i32* %r2.global-to-local, align 4
  %v1_bd94 = add i32 %v0_bd94, 4
  %v2_bd94 = inttoptr i32 %v1_bd94 to i32*
  %v3_bd94 = load i32, i32* %v2_bd94, align 4
  store i32 %v3_bd94, i32* %lr.global-to-local, align 4
  %v0_bd98 = load i32, i32* %r3.global-to-local, align 4
  %v1_bd98 = trunc i32 %v0_bd98 to i8
  %v2_bd98 = load i32, i32* @r6, align 4
  %v3_bd98 = add i32 %v2_bd98, 13
  %v4_bd98 = inttoptr i32 %v3_bd98 to i8*
  store i8 %v1_bd98, i8* %v4_bd98, align 1
  %v0_bd9c = load i32, i32* @r6, align 4
  %v1_bd9c = add i32 %v0_bd9c, 12
  %v2_bd9c = inttoptr i32 %v1_bd9c to i8*
  %v3_bd9c = load i8, i8* %v2_bd9c, align 1
  %v4_bd9c = zext i8 %v3_bd9c to i32
  store i32 %v4_bd9c, i32* %r2.global-to-local, align 4
  %v1_bda0 = add i32 %v0_bd9c, 13
  %v2_bda0 = inttoptr i32 %v1_bda0 to i8*
  %v3_bda0 = load i8, i8* %v2_bda0, align 1
  %v4_bda0 = zext i8 %v3_bda0 to i32
  %v0_bda4 = load i32, i32* %r0.global-to-local, align 4
  %v1_bda4 = load i32, i32* %ip.global-to-local, align 4
  %v4_bda4 = mul i32 %v1_bda4, 256
  %v5_bda4 = or i32 %v4_bda4, %v0_bda4
  store i32 %v5_bda4, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_bd9c, 16
  %v1_bda8 = zext i8 %tmp101 to i32
  %v3_bdac = sdiv i32 %v5_bda4, 256
  store i32 %v3_bdac, i32* %r1.global-to-local, align 4
  %v1_bdb0 = or i32 %v1_bda8, 128
  store i32 %v1_bdb0, i32* %r2.global-to-local, align 4
  %v1_bdb4 = or i32 %v4_bda0, 16
  store i32 %v1_bdb4, i32* %r3.global-to-local, align 4
  %v1_bdb8 = trunc i32 %v3_bdac to i8
  %v3_bdb8 = add i32 %v0_bd9c, 3
  %v4_bdb8 = inttoptr i32 %v3_bdb8 to i8*
  store i8 %v1_bdb8, i8* %v4_bdb8, align 1
  %v0_bdbc = load i32, i32* %lr.global-to-local, align 4
  %v1_bdbc = load i32, i32* @r6, align 4
  %v2_bdbc = add i32 %v1_bdbc, 8
  %v3_bdbc = inttoptr i32 %v2_bdbc to i32*
  store i32 %v0_bdbc, i32* %v3_bdbc, align 4
  %v0_bdc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_bdc0 = trunc i32 %v0_bdc0 to i8
  %v2_bdc0 = load i32, i32* @r6, align 4
  %v3_bdc0 = add i32 %v2_bdc0, 12
  %v4_bdc0 = inttoptr i32 %v3_bdc0 to i8*
  store i8 %v1_bdc0, i8* %v4_bdc0, align 1
  %v0_bdc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bdc4 = trunc i32 %v0_bdc4 to i8
  %v2_bdc4 = load i32, i32* @r6, align 4
  %v3_bdc4 = add i32 %v2_bdc4, 13
  %v4_bdc4 = inttoptr i32 %v3_bdc4 to i8*
  store i8 %v1_bdc4, i8* %v4_bdc4, align 1
  %v0_bdc8 = load i32, i32* %r0.global-to-local, align 4
  %v1_bdc8 = trunc i32 %v0_bdc8 to i8
  %v2_bdc8 = load i32, i32* @r6, align 4
  %v3_bdc8 = add i32 %v2_bdc8, 2
  %v4_bdc8 = inttoptr i32 %v3_bdc8 to i8*
  store i8 %v1_bdc8, i8* %v4_bdc8, align 1
  %v0_bdcc = call i32 @function_10a44()
  %v1_bdcc = trunc i32 %v0_bdcc to i8
  store i32 %v0_bdcc, i32* %r0.global-to-local, align 4
  store i32 %v1_b8b0, i32* %lr.global-to-local, align 4
  %v0_bdd4 = load i32, i32* @r6, align 4
  %v1_bdd4 = add i32 %v0_bdd4, 13
  %v2_bdd4 = inttoptr i32 %v1_bdd4 to i8*
  %v3_bdd4 = load i8, i8* %v2_bdd4, align 1
  %v4_bdd4 = zext i8 %v3_bdd4 to i32
  store i32 %v1_bdd8, i32* %r2.global-to-local, align 4
  %v1_bddc = and i32 %v4_bdd4, 223
  %v5_bde0 = or i32 %v1_bddc, %v4_bde0
  store i32 %v5_bde0, i32* %r3.global-to-local, align 4
  %v1_bde4 = trunc i32 %v5_bde0 to i8
  store i8 %v1_bde4, i8* %v2_bdd4, align 1
  store i32 %v1_b8d0, i32* %r1.global-to-local, align 4
  %v0_bdec = load i32, i32* @r6, align 4
  %v1_bdec = add i32 %v0_bdec, 13
  %v2_bdec = inttoptr i32 %v1_bdec to i8*
  %v3_bdec = load i8, i8* %v2_bdec, align 1
  %v4_bdec = zext i8 %v3_bdec to i32
  store i32 %v1_bdf0, i32* %r3.global-to-local, align 4
  %v1_bdf4 = and i32 %v4_bdec, 239
  %v5_bdf8 = or i32 %v1_bdf4, %v4_bdf8
  store i32 %v5_bdf8, i32* %r2.global-to-local, align 4
  %v1_bdfc = trunc i32 %v5_bdf8 to i8
  store i8 %v1_bdfc, i8* %v2_bdec, align 1
  store i32 %v1_b8f0, i32* %ip.global-to-local, align 4
  %v0_be04 = load i32, i32* @r6, align 4
  %v1_be04 = add i32 %v0_be04, 13
  %v2_be04 = inttoptr i32 %v1_be04 to i8*
  %v3_be04 = load i8, i8* %v2_be04, align 1
  %v4_be04 = zext i8 %v3_be04 to i32
  store i32 %v1_be08, i32* %r2.global-to-local, align 4
  %v1_be0c = and i32 %v4_be04, 247
  %v5_be10 = or i32 %v1_be0c, %v4_be10
  store i32 %v5_be10, i32* %r3.global-to-local, align 4
  %v1_be14 = trunc i32 %v5_be10 to i8
  store i8 %v1_be14, i8* %v2_be04, align 1
  %v0_be1c = load i32, i32* @r6, align 4
  %v1_be1c = add i32 %v0_be1c, 13
  %v2_be1c = inttoptr i32 %v1_be1c to i8*
  %v3_be1c = load i8, i8* %v2_be1c, align 1
  %v4_be1c = zext i8 %v3_be1c to i32
  store i32 %v1_be20, i32* %r3.global-to-local, align 4
  %v1_be24 = and i32 %v4_be1c, 251
  %v5_be28 = or i32 %v1_be24, %v4_be28
  store i32 %v5_be28, i32* %r2.global-to-local, align 4
  %v1_be2c = trunc i32 %v5_be28 to i8
  store i8 %v1_be2c, i8* %v2_be1c, align 1
  store i32 %v1_b930, i32* %r1.global-to-local, align 4
  %v0_be34 = load i32, i32* @r6, align 4
  %v1_be34 = add i32 %v0_be34, 13
  %v2_be34 = inttoptr i32 %v1_be34 to i8*
  %v3_be34 = load i8, i8* %v2_be34, align 1
  %v4_be34 = zext i8 %v3_be34 to i32
  store i32 %v1_be38, i32* %r2.global-to-local, align 4
  %v1_be3c = and i32 %v4_be34, 253
  %v4_be40 = or i32 %v1_be3c, %v3_be40
  store i32 %v4_be40, i32* %r3.global-to-local, align 4
  %v1_be44 = trunc i32 %v4_be40 to i8
  store i8 %v1_be44, i8* %v2_be34, align 1
  %v0_be48 = load i32, i32* @r6, align 4
  %v1_be48 = add i32 %v0_be48, 13
  %v2_be48 = inttoptr i32 %v1_be48 to i8*
  %v3_be48 = load i8, i8* %v2_be48, align 1
  %v4_be48 = zext i8 %v3_be48 to i32
  %v0_be4c = load i32, i32* @r8, align 4
  %v1_be4c = urem i32 %v0_be4c, 2
  %v1_be50 = and i32 %v4_be48, 254
  store i32 %v1_be50, i32* %r2.global-to-local, align 4
  %v4_be5427 = udiv i32 %v0_bdcc, 256
  %v2_be58 = or i32 %v1_be50, %v1_be4c
  store i32 %v2_be58, i32* %r3.global-to-local, align 4
  %v1_be5c = trunc i32 %v4_be5427 to i8
  %v3_be5c = add i32 %v0_be48, 15
  %v4_be5c = inttoptr i32 %v3_be5c to i8*
  store i8 %v1_be5c, i8* %v4_be5c, align 1
  %v3_be60 = load i32, i32* @r6, align 4
  %v4_be60 = add i32 %v3_be60, 14
  %v5_be60 = inttoptr i32 %v4_be60 to i8*
  store i8 %v1_bdcc, i8* %v5_be60, align 1
  %v0_be64 = load i32, i32* %r3.global-to-local, align 4
  %v1_be64 = trunc i32 %v0_be64 to i8
  %v2_be64 = load i32, i32* @r6, align 4
  %v3_be64 = add i32 %v2_be64, 13
  %v4_be64 = inttoptr i32 %v3_be64 to i8*
  store i8 %v1_be64, i8* %v4_be64, align 1
  %v0_be68 = load i32, i32* @r4, align 4
  %v1_be68 = add i32 %v0_be68, 40
  store i32 %v1_be68, i32* %r0.global-to-local, align 4
  %v0_be6c = load i32, i32* @sb, align 4
  store i32 %v0_be6c, i32* @r1, align 4
  %v1_be70 = inttoptr i32 %v1_be68 to i8*
  %v2_be70 = call i32 @function_10c20(i8* %v1_be70)
  store i32 %v2_be70, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_be74

dec_label_pc_be74:                                ; preds = %dec_label_pc_ba14, %bb81
  %v3_be74 = load i32, i32* %stack_var_-40, align 4
  %v1_be78 = add i32 %v3_be74, 1
  store i32 %v1_be78, i32* %r3.global-to-local, align 4
  %v1_be7c = load i32, i32* @fp, align 4
  %v9_be7c = icmp eq i32 %v1_be78, %v1_be7c
  store i1 %v9_be7c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_be78, i32* %stack_var_-40, align 4
  %v5_be84 = icmp slt i32 %v1_be78, %v1_be7c
  br i1 %v5_be84, label %dec_label_pc_ba04, label %dec_label_pc_be88

dec_label_pc_be88:                                ; preds = %dec_label_pc_be74, %.thread18
  %v0_be9012 = phi i32 [ %v0_b9d8, %.thread18 ], [ %v1_be7c, %dec_label_pc_be74 ]
  %v0_be88 = load i32, i32* @sb, align 4
  %v1_be88 = add i32 %v0_be88, 40
  store i32 %v1_be88, i32* @sl, align 4
  %v1_be8c = add i32 %v0_be88, 20
  store i32 %v1_be8c, i32* @r7, align 4
  %v2_bedc = icmp eq i32 %v1_b988, 0
  %v6_bebc = inttoptr i32 %v2_b7f8 to i32*
  %v3_bec4 = icmp eq i32 %v3_b9e0, 65535
  br label %dec_label_pc_be90

dec_label_pc_be90:                                ; preds = %dec_label_pc_beec, %dec_label_pc_be88
  %v0_be90 = phi i32 [ %v1_bfcc, %dec_label_pc_beec ], [ %v0_be9012, %dec_label_pc_be88 ]
  %v2_be90 = icmp eq i32 %v0_be90, 0
  store i1 %v2_be90, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_be90, 1
  br label %dec_label_pc_be98

dec_label_pc_be98:                                ; preds = %dec_label_pc_be98, %dec_label_pc_be90
  br i1 %tmp82, label %dec_label_pc_be98, label %dec_label_pc_be9c

dec_label_pc_be9c:                                ; preds = %dec_label_pc_be98
  %v0_be9c = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_be9c, 256
  %v1_bea4 = and i32 %tmp83, 65280
  %tmp84 = udiv i32 %v0_be9c, 256
  %v4_bea8 = urem i32 %tmp84, 256
  %v5_bea8 = or i32 %v4_bea8, %v1_bea4
  store i32 %v5_bea8, i32* @r8, align 4
  store i32 %v2_b7f8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_b9e0, i32* %ip.global-to-local, align 4
  %v7_bebc = load i32, i32* %v6_bebc, align 4
  store i32 %v7_bebc, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_bec4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_bed0 = add i32 %v7_bebc, 20
  store i32 %v1_bed0, i32* @r5, align 4
  br i1 %v3_bec4, label %dec_label_pc_bff8, label %dec_label_pc_bed8

dec_label_pc_bed8:                                ; preds = %dec_label_pc_bfd8, %dec_label_pc_be9c
  %v0_bee0 = phi i32 [ %v7_bfe4, %dec_label_pc_bfd8 ], [ %v7_bebc, %dec_label_pc_be9c ]
  store i32 %v1_b988, i32* %lr.global-to-local, align 4
  store i1 %v2_bedc, i1* %cpsr_z.global-to-local, align 1
  %v1_bee0 = add i32 %v0_bee0, 40
  store i32 %v1_bee0, i32* %r0.global-to-local, align 4
  %v0_bee4 = load i32, i32* @sb, align 4
  store i32 %v0_bee4, i32* @r1, align 4
  br i1 %v2_bedc, label %dec_label_pc_beec, label %dec_label_pc_c01c

dec_label_pc_beec:                                ; preds = %dec_label_pc_bed8, %dec_label_pc_bff8, %dec_label_pc_c01c
  %v2_beec = phi i32 [ %v0_bee0, %dec_label_pc_bed8 ], [ %v0_c010, %dec_label_pc_bff8 ], [ %v2_beec.pre, %dec_label_pc_c01c ]
  %v0_beec = load i32, i32* @r6, align 4
  %v1_beec = trunc i32 %v0_beec to i8
  %v3_beec = add i32 %v2_beec, 10
  %v4_beec = inttoptr i32 %v3_beec to i8*
  store i8 %v1_beec, i8* %v4_beec, align 1
  %v0_bef0 = load i32, i32* @r6, align 4
  %v1_bef0 = trunc i32 %v0_bef0 to i8
  %v2_bef0 = load i32, i32* @r4, align 4
  %v3_bef0 = add i32 %v2_bef0, 11
  %v4_bef0 = inttoptr i32 %v3_bef0 to i8*
  store i8 %v1_bef0, i8* %v4_bef0, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bef8 = load i32, i32* @r4, align 4
  store i32 %v0_bef8, i32* @r0, align 4
  %v2_befc = call i32 @function_f008(i32 %v0_bef8, i32 20)
  %v3_befc = trunc i32 %v2_befc to i8
  store i32 %v2_befc, i32* %r0.global-to-local, align 4
  %v3_bf00 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_b7e8, i32* %r2.global-to-local, align 4
  %v3_bf08 = mul i32 %v3_bf00, 16
  %v2_bf0c = add i32 %v3_bf08, %v2_b7e8
  store i32 %v2_bf0c, i32* %r1.global-to-local, align 4
  %v1_bf10 = add i32 %v2_bf0c, 4
  %v2_bf10 = inttoptr i32 %v1_bf10 to i32*
  %v3_bf10 = load i32, i32* %v2_bf10, align 4
  %v3_bf14 = mul i32 %v3_bf10, 65536
  store i32 %v3_bf14, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_bf10, 256
  %v1_bf1c = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_bf10, 256
  %v4_bf20 = urem i32 %tmp86, 256
  %v5_bf20 = or i32 %v4_bf20, %v1_bf1c
  store i32 %v5_bf20, i32* %r2.global-to-local, align 4
  %v1_bf24 = add i32 %v3_bf10, 1
  store i32 %v1_bf24, i32* %r3.global-to-local, align 4
  store i32 %v1_bf24, i32* %v2_bf10, align 4
  %v0_bf2c = load i32, i32* %r2.global-to-local, align 4
  %v1_bf2c = load i32, i32* @r5, align 4
  %v2_bf2c = add i32 %v1_bf2c, 4
  %v3_bf2c = inttoptr i32 %v2_bf2c to i32*
  store i32 %v0_bf2c, i32* %v3_bf2c, align 4
  %v0_bf30 = load i32, i32* %r1.global-to-local, align 4
  %v1_bf30 = add i32 %v0_bf30, 8
  %v2_bf30 = inttoptr i32 %v1_bf30 to i32*
  %v3_bf30 = load i32, i32* %v2_bf30, align 4
  %tmp87 = mul i32 %v3_bf30, 256
  %v1_bf3c = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_bf30, 256
  %v4_bf40 = urem i32 %tmp88, 256
  %v5_bf40 = or i32 %v4_bf40, %v1_bf3c
  store i32 %v5_bf40, i32* %r2.global-to-local, align 4
  %v4_bf4428 = udiv i32 %v2_befc, 256
  %v1_bf48 = trunc i32 %v4_bf4428 to i8
  %v2_bf48 = load i32, i32* @r4, align 4
  %v3_bf48 = add i32 %v2_bf48, 11
  %v4_bf48 = inttoptr i32 %v3_bf48 to i8*
  store i8 %v1_bf48, i8* %v4_bf48, align 1
  %v3_bf4c = load i32, i32* @r4, align 4
  %v4_bf4c = add i32 %v3_bf4c, 10
  %v5_bf4c = inttoptr i32 %v4_bf4c to i8*
  store i8 %v3_befc, i8* %v5_bf4c, align 1
  %v0_bf50 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf50 = load i32, i32* @r5, align 4
  %v2_bf50 = add i32 %v1_bf50, 8
  %v3_bf50 = inttoptr i32 %v2_bf50 to i32*
  store i32 %v0_bf50, i32* %v3_bf50, align 4
  %v0_bf54 = load i32, i32* @r5, align 4
  store i32 %v0_bf54, i32* @r1, align 4
  %v0_bf58 = load i32, i32* @r8, align 4
  store i32 %v0_bf58, i32* %r2.global-to-local, align 4
  %v0_bf5c = load i32, i32* @r7, align 4
  store i32 %v0_bf5c, i32* %r3.global-to-local, align 4
  %v0_bf60 = load i32, i32* @r4, align 4
  store i32 %v0_bf60, i32* %r0.global-to-local, align 4
  %v0_bf64 = load i32, i32* @r6, align 4
  %v1_bf64 = trunc i32 %v0_bf64 to i8
  %v3_bf64 = add i32 %v0_bf54, 16
  %v4_bf64 = inttoptr i32 %v3_bf64 to i8*
  store i8 %v1_bf64, i8* %v4_bf64, align 1
  %v0_bf68 = load i32, i32* @r6, align 4
  %v1_bf68 = trunc i32 %v0_bf68 to i8
  %v2_bf68 = load i32, i32* @r5, align 4
  %v3_bf68 = add i32 %v2_bf68, 17
  %v4_bf68 = inttoptr i32 %v3_bf68 to i8*
  store i8 %v1_bf68, i8* %v4_bf68, align 1
  %v4_bf6c = call i32 @function_f064(i32 %v0_bf60, i32 %v0_bf54, i32 %v0_bf58, i32 %v0_bf5c)
  %v5_bf6c = trunc i32 %v4_bf6c to i8
  store i32 %v4_bf6c, i32* %r0.global-to-local, align 4
  %v4_bf7029 = udiv i32 %v4_bf6c, 256
  %v1_bf74 = trunc i32 %v4_bf7029 to i8
  %v2_bf74 = load i32, i32* @r5, align 4
  %v3_bf74 = add i32 %v2_bf74, 17
  %v4_bf74 = inttoptr i32 %v3_bf74 to i8*
  store i8 %v1_bf74, i8* %v4_bf74, align 1
  %v3_bf78 = load i32, i32* @r5, align 4
  %v4_bf78 = add i32 %v3_bf78, 16
  %v5_bf78 = inttoptr i32 %v4_bf78 to i8*
  store i8 %v5_bf6c, i8* %v5_bf78, align 1
  %v3_bf7c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bf7c, i32* %r3.global-to-local, align 4
  %v0_bf80 = load i32, i32* @r4, align 4
  %v1_bf80 = add i32 %v0_bf80, 20
  %v2_bf80 = inttoptr i32 %v1_bf80 to i32*
  %v3_bf80 = load i32, i32* %v2_bf80, align 4
  %v5_bf88 = mul i32 %v3_bf7c, 24
  %v3_bf90 = udiv i32 %v3_bf80, 65536
  store i32 %v3_bf90, i32* %r2.global-to-local, align 4
  %v2_bf94 = add i32 %v5_bf88, %arg2
  store i32 %v2_bf94, i32* %ip.global-to-local, align 4
  %v3_bf984 = udiv i32 %v3_bf80, 16777216
  %v1_bf9c = trunc i32 %v3_bf984 to i8
  %v3_bf9c = add i32 %v2_bf94, 3
  %v4_bf9c = inttoptr i32 %v3_bf9c to i8*
  store i8 %v1_bf9c, i8* %v4_bf9c, align 1
  %v0_bfa0 = load i32, i32* %r2.global-to-local, align 4
  %v1_bfa0 = trunc i32 %v0_bfa0 to i8
  %v2_bfa0 = load i32, i32* %ip.global-to-local, align 4
  %v3_bfa0 = add i32 %v2_bfa0, 2
  %v4_bfa0 = inttoptr i32 %v3_bfa0 to i8*
  store i8 %v1_bfa0, i8* %v4_bfa0, align 1
  %v0_bfa4 = load i32, i32* @r4, align 4
  store i32 %v0_bfa4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b998, i32* %r0.global-to-local, align 4
  %v0_bfb0 = load i32, i32* @sl, align 4
  store i32 %v0_bfb0, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_bfb8 = load i32, i32* %ip.global-to-local, align 4
  %v6_bfc0 = inttoptr i32 %v0_bfa4 to i32*
  %v7_bfc0 = call i32 @function_14acc(i32 %v3_b998, i32* %v6_bfc0, i32 %v0_bfb0, i32 16384, i32 %v0_bfb8, i32 16)
  %v3_bfc4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bfc4, i32* %r3.global-to-local, align 4
  %v1_bfc8 = add i32 %v3_bfc4, 1
  store i32 %v1_bfc8, i32* %r0.global-to-local, align 4
  %v1_bfcc = load i32, i32* @fp, align 4
  %v9_bfcc = icmp eq i32 %v1_bfc8, %v1_bfcc
  store i1 %v9_bfcc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bfc8, i32* %stack_var_-40, align 4
  %v6_bfd4 = icmp slt i32 %v1_bfc8, %v1_bfcc
  br i1 %v6_bfd4, label %dec_label_pc_bfd8, label %dec_label_pc_be90

dec_label_pc_bfd8:                                ; preds = %dec_label_pc_beec
  store i32 %v2_b7f8, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_b9e0, i32* %ip.global-to-local, align 4
  %v4_bfe4 = mul i32 %v1_bfc8, 4
  %v5_bfe4 = add i32 %v4_bfe4, %v2_b7f8
  %v6_bfe4 = inttoptr i32 %v5_bfe4 to i32*
  %v7_bfe4 = load i32, i32* %v6_bfe4, align 4
  store i32 %v7_bfe4, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_bec4, i1* %cpsr_z.global-to-local, align 1
  %v1_bff0 = add i32 %v7_bfe4, 20
  store i32 %v1_bff0, i32* @r5, align 4
  br i1 %v3_bec4, label %dec_label_pc_bff8, label %dec_label_pc_bed8

dec_label_pc_bff8:                                ; preds = %dec_label_pc_bfd8, %dec_label_pc_be9c
  %v0_bff8 = call i32 @function_10a44()
  %v1_bff8 = trunc i32 %v0_bff8 to i8
  store i32 %v1_b988, i32* %lr.global-to-local, align 4
  %v4_c000 = sdiv i32 %v0_bff8, 256
  store i32 %v4_c000, i32* %r3.global-to-local, align 4
  store i1 %v2_bedc, i1* %cpsr_z.global-to-local, align 1
  %v3_c008 = load i32, i32* @r4, align 4
  %v4_c008 = add i32 %v3_c008, 4
  %v5_c008 = inttoptr i32 %v4_c008 to i8*
  store i8 %v1_bff8, i8* %v5_c008, align 1
  %v0_c00c = load i32, i32* %r3.global-to-local, align 4
  %v1_c00c = trunc i32 %v0_c00c to i8
  %v2_c00c = load i32, i32* @r4, align 4
  %v3_c00c = add i32 %v2_c00c, 5
  %v4_c00c = inttoptr i32 %v3_c00c to i8*
  store i8 %v1_c00c, i8* %v4_c00c, align 1
  %v0_c010 = load i32, i32* @r4, align 4
  %v1_c010 = add i32 %v0_c010, 40
  store i32 %v1_c010, i32* %r0.global-to-local, align 4
  %v0_c014 = load i32, i32* @sb, align 4
  store i32 %v0_c014, i32* @r1, align 4
  %v0_c018 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c018, label %dec_label_pc_beec, label %dec_label_pc_c01c

dec_label_pc_c01c:                                ; preds = %dec_label_pc_bed8, %dec_label_pc_bff8
  %v0_c01c = phi i32 [ %v1_bee0, %dec_label_pc_bed8 ], [ %v1_c010, %dec_label_pc_bff8 ]
  %v1_c01c = inttoptr i32 %v0_c01c to i8*
  %v2_c01c = call i32 @function_10c20(i8* %v1_c01c)
  store i32 %v2_c01c, i32* %r0.global-to-local, align 4
  %v2_beec.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_beec

; uselistorder directives
  uselistorder i32 %v0_c010, { 1, 0 }
  uselistorder i32 %v7_bfe4, { 1, 2, 0 }
  uselistorder i32 %v1_bfcc, { 1, 2, 0 }
  uselistorder i32 %v1_bfc8, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_bf6c, { 0, 2, 1 }
  uselistorder i32 %v0_bf54, { 1, 0, 2 }
  uselistorder i32 %v3_bf30, { 1, 0 }
  uselistorder i32 %v3_bf10, { 3, 2, 0, 1 }
  uselistorder i32 %v2_befc, { 0, 2, 1 }
  uselistorder i32 %v0_bee0, { 1, 0 }
  uselistorder i32 %v0_be9c, { 1, 0 }
  uselistorder i32 %v0_be90, { 1, 0 }
  uselistorder i1 %v3_bec4, { 2, 3, 1, 0 }
  uselistorder i32 %v1_be78, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bdcc, { 0, 2, 1 }
  uselistorder i32 %v3_bdac, { 1, 0 }
  uselistorder i32 %v0_bd80, { 1, 0, 2 }
  uselistorder i32 %v3_bd74, { 1, 0 }
  uselistorder i32 %v3_bd08, { 1, 0 }
  uselistorder i32 %v0_bcfc, { 1, 0 }
  uselistorder i32 %v3_bc84, { 1, 0 }
  uselistorder i32 %v2_bc70, { 1, 0 }
  uselistorder i32 %v3_bc54, { 1, 0, 2, 3 }
  uselistorder i32 %v2_bc4c, { 1, 0 }
  uselistorder i32 %v3_bc28, { 1, 0, 2, 3 }
  uselistorder i32 %v3_bc20, { 1, 0 }
  uselistorder i32 %v4_bc08, { 1, 0 }
  uselistorder i32 %v0_bc04, { 0, 2, 1 }
  uselistorder i1 %v7_bb74, { 1, 0 }
  uselistorder i32 %v7_bb6c, { 0, 2, 1, 3 }
  uselistorder i32 %v5_bbb8, { 1, 0 }
  uselistorder i1 %v9_bb9c, { 1, 0 }
  uselistorder i32 %v4_bbb0, { 1, 0 }
  uselistorder i32 %v4_bbac, { 1, 0 }
  uselistorder i32 %v8_bac0, { 1, 2, 0, 3 }
  uselistorder i32 %v3_baac, { 1, 0 }
  uselistorder i32 %v0_ba9c, { 2, 0, 1, 3 }
  uselistorder i1 %v7_ba24, { 1, 0 }
  uselistorder i32 %v3_ba20, { 2, 1, 0, 3 }
  uselistorder i32 %v1_be38, { 1, 0 }
  uselistorder i32 %v1_be20, { 1, 0 }
  uselistorder i32 %v1_be08, { 1, 0 }
  uselistorder i32 %v1_bdf0, { 1, 0 }
  uselistorder i32 %v1_bdd8, { 1, 0 }
  uselistorder i32 %v5_bbb4, { 1, 0 }
  uselistorder i32 %v3_bb0893, { 1, 0 }
  uselistorder i1 %v2_bbcc, { 1, 0 }
  uselistorder i32 %v1_bbc8, { 1, 0 }
  uselistorder i32 %v4_bbc4, { 2, 0, 1 }
  uselistorder i32 %v4_bba8, { 1, 0 }
  uselistorder i1 %v3_baf0, { 1, 0 }
  uselistorder i32 %v8_b9ec, { 2, 1, 0 }
  uselistorder i32 %v8_b9e8, { 1, 2, 0 }
  uselistorder i32 %v3_b9e0, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_b9dc, { 0, 1, 3, 2 }
  uselistorder i1 %v7_b9d0, { 1, 0 }
  uselistorder i1 %v7_b9a0, { 1, 0 }
  uselistorder i32 %v3_b99c, { 2, 0, 1 }
  uselistorder i32 %v3_b998, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_b988, { 1, 3, 2, 0 }
  uselistorder i32 %v1_b930, { 1, 0 }
  uselistorder i32 %v1_b8f0, { 1, 0 }
  uselistorder i32 %v1_b8d0, { 1, 0 }
  uselistorder i32 %v1_b8b0, { 1, 0 }
  uselistorder i32 %v1_b878, { 1, 0 }
  uselistorder i32 %v2_b7f8, { 0, 4, 5, 2, 1, 3 }
  uselistorder i32 %v2_b7e8, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_b7cc, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 44, 43, 45, 47, 46, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 19, 12, 13, 14, 15, 16, 17, 18, 23, 20, 21, 22, 24, 26, 25, 28, 27, 31, 29, 32, 33, 30, 34, 36, 35, 37, 38, 40, 39, 44, 41, 42, 43, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_c01c, { 1, 0 }
  uselistorder label %dec_label_pc_beec, { 2, 1, 0 }
  uselistorder label %dec_label_pc_be74, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread6, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_bbfc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bb34, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_bae4, { 1, 0 }
}

define i32 @function_c028(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c028:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_c02c = urem i32 %arg1, 256
  store i32 %v1_c02c, i32* @fp, align 4
  store i32 %v1_c02c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_c044 = urem i32 %arg3, 256
  store i32 %v1_c044, i32* @r4, align 4
  %v2_c048 = call i32 @function_14e34(i32 %v1_c02c, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_c054 = load i32, i32* @fp, align 4
  store i32 %v0_c054, i32* %r0.global-to-local, align 4
  %v2_c058 = call i32 @function_14e34(i32 %v0_c054, i32 4)
  %v0_c05c = load i32, i32* @r5, align 4
  store i32 %v0_c05c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c06c = load i32, i32* @r4, align 4
  store i32 %v0_c06c, i32* %r0.global-to-local, align 4
  %v5_c070 = inttoptr i32 %v0_c05c to i32*
  %v6_c070 = call i32 @function_a4e8(i32 %v0_c06c, i32* %v5_c070, i32 2, i32 0)
  %v1_c07c = urem i32 %v6_c070, 256
  store i32 %v1_c07c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c088 = load i32, i32* @r5, align 4
  store i32 %v0_c088, i32* %r1.global-to-local, align 4
  %v0_c08c = load i32, i32* @r4, align 4
  store i32 %v0_c08c, i32* %r0.global-to-local, align 4
  %v6_c094 = inttoptr i32 %v0_c088 to i32*
  %v7_c094 = call i32 @function_a4e8(i32 %v0_c08c, i32* %v6_c094, i32 3, i32 65535)
  %v0_c098 = load i32, i32* @r5, align 4
  store i32 %v0_c098, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_c094, i32* @r6, align 4
  %v0_c0a8 = load i32, i32* @r4, align 4
  store i32 %v0_c0a8, i32* %r0.global-to-local, align 4
  %v4_c0ac = inttoptr i32 %v0_c098 to i32*
  %v5_c0ac = call i32 @function_a4e8(i32 %v0_c0a8, i32* %v4_c0ac, i32 4, i32 64)
  %v1_c0b4 = urem i32 %v5_c0ac, 256
  store i32 %v1_c0b4, i32* %ip.global-to-local, align 4
  %v0_c0b8 = load i32, i32* @r5, align 4
  store i32 %v0_c0b8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c0c4 = load i32, i32* @r4, align 4
  store i32 %v0_c0c4, i32* %r0.global-to-local, align 4
  %v6_c0cc = inttoptr i32 %v0_c0b8 to i32*
  %v7_c0cc = call i32 @function_a4e8(i32 %v0_c0c4, i32* %v6_c0cc, i32 5, i32 1)
  %v1_c0d8 = urem i32 %v7_c0cc, 256
  store i32 %v1_c0d8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_c0e0 = load i32, i32* @r5, align 4
  store i32 %v0_c0e0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c0e8 = load i32, i32* @r4, align 4
  store i32 %v0_c0e8, i32* %r0.global-to-local, align 4
  %v5_c0f0 = inttoptr i32 %v0_c0e0 to i32*
  %v6_c0f0 = call i32 @function_a4e8(i32 %v0_c0e8, i32* %v5_c0f0, i32 7, i32 65535)
  %v0_c0f4 = load i32, i32* @r5, align 4
  store i32 %v0_c0f4, i32* %r1.global-to-local, align 4
  %v3_c0f8 = mul i32 %v6_c0f0, 65536
  store i32 %v3_c0f8, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c104 = load i32, i32* @r4, align 4
  store i32 %v0_c104, i32* %r0.global-to-local, align 4
  %v4_c108 = inttoptr i32 %v0_c0f4 to i32*
  %v5_c108 = call i32 @function_a4e8(i32 %v0_c104, i32* %v4_c108, i32 11, i32 1)
  %v1_c110 = urem i32 %v5_c108, 256
  store i32 %v1_c110, i32* %ip.global-to-local, align 4
  %v0_c114 = load i32, i32* @r5, align 4
  store i32 %v0_c114, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c120 = load i32, i32* @r4, align 4
  store i32 %v0_c120, i32* %r0.global-to-local, align 4
  %v5_c128 = inttoptr i32 %v0_c114 to i32*
  %v6_c128 = call i32 @function_a4e8(i32 %v0_c120, i32* %v5_c128, i32 12, i32 1)
  %v1_c130 = urem i32 %v6_c128, 256
  store i32 %v1_c130, i32* %ip.global-to-local, align 4
  %v0_c134 = load i32, i32* @r5, align 4
  store i32 %v0_c134, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c140 = load i32, i32* @r4, align 4
  store i32 %v0_c140, i32* %r0.global-to-local, align 4
  %v5_c148 = inttoptr i32 %v0_c134 to i32*
  %v6_c148 = call i32 @function_a4e8(i32 %v0_c140, i32* %v5_c148, i32 13, i32 1)
  %v1_c150 = urem i32 %v6_c148, 256
  store i32 %v1_c150, i32* %ip.global-to-local, align 4
  %v0_c154 = load i32, i32* @r5, align 4
  store i32 %v0_c154, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c160 = load i32, i32* @r4, align 4
  store i32 %v0_c160, i32* %r0.global-to-local, align 4
  %v5_c168 = inttoptr i32 %v0_c154 to i32*
  %v6_c168 = call i32 @function_a4e8(i32 %v0_c160, i32* %v5_c168, i32 14, i32 1)
  %v1_c170 = urem i32 %v6_c168, 256
  store i32 %v1_c170, i32* %ip.global-to-local, align 4
  %v0_c174 = load i32, i32* @r5, align 4
  store i32 %v0_c174, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c180 = load i32, i32* @r4, align 4
  store i32 %v0_c180, i32* %r0.global-to-local, align 4
  %v5_c188 = inttoptr i32 %v0_c174 to i32*
  %v6_c188 = call i32 @function_a4e8(i32 %v0_c180, i32* %v5_c188, i32 15, i32 1)
  %v1_c190 = urem i32 %v6_c188, 256
  store i32 %v1_c190, i32* %ip.global-to-local, align 4
  %v0_c194 = load i32, i32* @r5, align 4
  store i32 %v0_c194, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c1a0 = load i32, i32* @r4, align 4
  store i32 %v0_c1a0, i32* %r0.global-to-local, align 4
  %v5_c1a8 = inttoptr i32 %v0_c194 to i32*
  %v6_c1a8 = call i32 @function_a4e8(i32 %v0_c1a0, i32* %v5_c1a8, i32 16, i32 1)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_c1a8, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_c1b8 = load i32, i32* @r5, align 4
  store i32 %v0_c1b8, i32* %r1.global-to-local, align 4
  %v0_c1bc = load i32, i32* @r4, align 4
  store i32 %v0_c1bc, i32* %r0.global-to-local, align 4
  %v1_c1c0 = urem i32 %v6_c1a8, 256
  store i32 %v1_c1c0, i32* @r8, align 4
  %v4_c1c4 = inttoptr i32 %v0_c1b8 to i32*
  %v5_c1c4 = call i32 @function_a4e8(i32 %v0_c1bc, i32* %v4_c1c4, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c1d0 = load i32, i32* @r5, align 4
  store i32 %v0_c1d0, i32* %r1.global-to-local, align 4
  store i32 %v5_c1c4, i32* @sb, align 4
  %v0_c1d8 = load i32, i32* @r4, align 4
  store i32 %v0_c1d8, i32* %r0.global-to-local, align 4
  %v4_c1dc = inttoptr i32 %v0_c1d0 to i32*
  %v5_c1dc = call i32 @function_a4e8(i32 %v0_c1d8, i32* %v4_c1dc, i32 1, i32 1)
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_c1e8 = urem i32 %v5_c1dc, 256
  store i32 %v1_c1e8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c1f8 = call i32 @function_14b30(i32 2, i32 3, i32 6)
  store i32 %v3_c1f8, i32* %r0.global-to-local, align 4
  %v0_c1fc = load i32, i32* @r7, align 4
  %v3_c1fc = udiv i32 %v0_c1fc, 65536
  store i32 %v3_c1fc, i32* %r1.global-to-local, align 4
  %v7_c200 = icmp eq i32 %v3_c1f8, -1
  store i1 %v7_c200, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c200, label %dec_label_pc_c45c, label %dec_label_pc_c210

dec_label_pc_c210:                                ; preds = %dec_label_pc_c028
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c218 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c218, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c22c = call i32 @function_14b00(i32 %v3_c1f8, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_c22c, i32* %r0.global-to-local, align 4
  %v7_c230 = icmp eq i32 %v6_c22c, -1
  store i1 %v7_c230, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c230, label %dec_label_pc_c454, label %dec_label_pc_c238

dec_label_pc_c238:                                ; preds = %dec_label_pc_c210
  %v0_c238 = load i32, i32* @fp, align 4
  %v2_c238 = icmp eq i32 %v0_c238, 0
  store i1 %v2_c238, i1* %cpsr_z.global-to-local, align 1
  %v0_c23c = load i32, i32* @r6, align 4
  %v3_c23c = mul i32 %v0_c23c, 65536
  store i32 %v3_c23c, i32* %r0.global-to-local, align 4
  %v3_c240 = urem i32 %v0_c23c, 65536
  store i32 %v3_c240, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_c238, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_c264.preheader

.thread18:                                        ; preds = %dec_label_pc_c238
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_c6e8

dec_label_pc_c264.preheader:                      ; preds = %dec_label_pc_c238
  %v5_c248 = load i32, i32* @r7, align 4
  %v8_c248 = udiv i32 %v5_c248, 16777216
  %tmp73 = udiv i32 %v0_c23c, 256
  %v8_c24c = urem i32 %tmp73, 256
  store i32 %v8_c24c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_c350 = icmp ugt i32 %v0_c1fc, -65537
  %v2_c374 = ptrtoint i32* %stack_var_-60 to i32
  %v3_c380 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_c3b0 = ptrtoint i32* %stack_var_-76 to i32
  %v2_c3b4 = ptrtoint i32* %stack_var_-44 to i32
  %v2_c3b8 = ptrtoint i32* %stack_var_-332 to i32
  %v4_c404 = zext i8 %tmp31 to i32
  %v4_c408 = zext i8 %tmp30 to i32
  %v4_c414 = mul nuw nsw i32 %v4_c408, 256
  %v4_c424 = zext i8 %tmp to i32
  %v1_c428 = and i32 %v4_c424, 18
  %v2_c42c = icmp eq i32 %v1_c428, 18
  %v1_c360 = mul nuw nsw i32 %v3_c1fc, 256
  %v4_c364 = and i32 %v1_c360, 65280
  %v5_c364 = or i32 %v8_c248, %v4_c364
  %v3_c36893 = udiv i32 %v4_c364, 256
  %v1_c36c = trunc i32 %v3_c36893 to i8
  %v1_c530 = mul i32 %v0_c23c, 256
  %v4_c538 = and i32 %v1_c530, 65280
  %sext = mul i32 %v6_c070, 16777216
  %v4_c548 = sdiv i32 %sext, 16777216
  %sext5 = mul i32 %v5_c0ac, 16777216
  %v4_c56c = sdiv i32 %sext5, 16777216
  %v5_c414 = or i32 %v4_c404, %v4_c414
  %v1_c434 = and i32 %v4_c424, 5
  %v2_c434 = icmp eq i32 %v1_c434, 0
  %v1_c370 = trunc i32 %v8_c248 to i8
  %v5_c538 = or i32 %v8_c24c, %v4_c538
  %v1_c558 = trunc i32 %v4_c548 to i8
  %v1_c638 = urem i32 %v5_c108, 2
  %tmp94 = sub nsw i32 0, %v1_c638
  %v4_c640 = and i32 %tmp94, 32
  %v1_c650 = urem i32 %v6_c128, 2
  %tmp95 = sub nsw i32 0, %v1_c650
  %v4_c658 = and i32 %tmp95, 16
  %v1_c668 = urem i32 %v6_c148, 2
  %tmp96 = sub nsw i32 0, %v1_c668
  %v4_c670 = and i32 %tmp96, 8
  %v1_c680 = urem i32 %v6_c168, 2
  %tmp97 = sub nsw i32 0, %v1_c680
  %v4_c688 = and i32 %tmp97, 4
  %v1_c698 = urem i32 %v6_c188, 2
  %tmp98 = sub nsw i32 0, %v1_c698
  %v3_c6a0 = and i32 %tmp98, 2
  br label %dec_label_pc_c264

dec_label_pc_c264:                                ; preds = %dec_label_pc_c6d4, %dec_label_pc_c43c, %dec_label_pc_c264.preheader
  store i32 %v8_c24c, i32* %r3.global-to-local, align 4
  %v0_c270 = load i32, i32* @sb, align 4
  %v1_c270 = add i32 %v0_c270, 40
  store i32 %v1_c270, i32* @sl, align 4
  br label %dec_label_pc_c274

dec_label_pc_c274:                                ; preds = %dec_label_pc_c448, %dec_label_pc_c264
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c280 = call i32 @function_14b30(i32 2, i32 1, i32 0)
  store i32 %v3_c280, i32* %r0.global-to-local, align 4
  %v7_c284 = icmp eq i32 %v3_c280, -1
  store i1 %v7_c284, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c280, i32* @r7, align 4
  br i1 %v7_c284, label %dec_label_pc_c6d4, label %dec_label_pc_c290

dec_label_pc_c290:                                ; preds = %dec_label_pc_c274
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_c298 = call i32 @function_14144(i32 %v3_c280, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_c2a0 = or i32 %v2_c298, 2048
  store i32 %v1_c2a0, i32* @r2, align 4
  %v0_c2a4 = load i32, i32* @r7, align 4
  store i32 %v0_c2a4, i32* %r0.global-to-local, align 4
  %v2_c2a8 = call i32 @function_14144(i32 %v0_c2a4, i32 4)
  store i32 %v2_c2a8, i32* %r0.global-to-local, align 4
  %v3_c2ac = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_c2bc = mul i32 %v3_c2ac, 24
  store i32 %v5_c2bc, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_c2cc = add i32 %v5_c2bc, %arg2
  store i32 %v2_c2cc, i32* %r2.global-to-local, align 4
  %v1_c2d0 = add i32 %v2_c2cc, 20
  %v2_c2d0 = inttoptr i32 %v1_c2d0 to i8*
  %v3_c2d0 = load i8, i8* %v2_c2d0, align 1
  %v4_c2d0 = zext i8 %v3_c2d0 to i32
  store i32 %v4_c2d0, i32* %r3.global-to-local, align 4
  %v2_c2d4 = icmp ugt i8 %v3_c2d0, 30
  %v7_c2d4 = icmp eq i8 %v3_c2d0, 31
  store i1 %v7_c2d4, i1* %cpsr_z.global-to-local, align 1
  %v2_c2d8 = xor i1 %v7_c2d4, true
  %v3_c2d8 = and i1 %v2_c2d4, %v2_c2d8
  %v5_c2d8 = add i32 %v2_c2cc, 16
  %v6_c2d8 = inttoptr i32 %v5_c2d8 to i32*
  %v7_c2d8 = load i32, i32* %v6_c2d8, align 4
  br i1 %v3_c2d8, label %dec_label_pc_c344, label %dec_label_pc_c2e4

dec_label_pc_c2e4:                                ; preds = %dec_label_pc_c290
  store i32 %v7_c2d8, i32* @r4, align 4
  %v0_c2e8 = call i32 @function_10a44()
  store i32 %v0_c2e8, i32* %r0.global-to-local, align 4
  %v3_c2ec = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_c2f8 = mul i32 %v3_c2ec, 24
  %v0_c2fc = load i32, i32* @r4, align 4
  %v2_c300 = add i32 %v5_c2f8, %arg2
  store i32 %v2_c300, i32* %r1.global-to-local, align 4
  %v1_c304 = and i32 %v0_c2fc, 65280
  store i32 %v1_c304, i32* %r3.global-to-local, align 4
  %v1_c2fc = udiv i32 %v0_c2fc, 256
  %v3_c308 = and i32 %v1_c2fc, 65280
  store i32 %v3_c308, i32* %r2.global-to-local, align 4
  %v3_c30c = mul i32 %v0_c2fc, 16777216
  store i32 %v3_c30c, i32* %ip.global-to-local, align 4
  %v1_c310 = add i32 %v2_c300, 20
  %v2_c310 = inttoptr i32 %v1_c310 to i8*
  %v3_c310 = load i8, i8* %v2_c310, align 1
  %v4_c310 = zext i8 %v3_c310 to i32
  store i32 %v4_c310, i32* %lr.global-to-local, align 4
  %v4_c314 = mul nuw nsw i32 %v1_c304, 256
  %v5_c314 = or i32 %v4_c314, %v3_c30c
  store i32 %v5_c314, i32* %ip.global-to-local, align 4
  %v2_c31c = call i32 @llvm.bswap.i32(i32 %v0_c2fc)
  %v7_c320 = lshr i32 %v0_c2e8, %v4_c310
  %v8_c320 = add i32 %v7_c320, %v2_c31c
  store i32 %v8_c320, i32* %r2.global-to-local, align 4
  %v3_c32c = mul i32 %v8_c320, 16777216
  %v1_c330 = and i32 %v8_c320, 65280
  store i32 %v1_c330, i32* %r0.global-to-local, align 4
  %v4_c334 = mul nuw nsw i32 %v1_c330, 256
  %v5_c334 = or i32 %v4_c334, %v3_c32c
  store i32 %v5_c334, i32* %r1.global-to-local, align 4
  %v2_c33c = call i32 @llvm.bswap.i32(i32 %v8_c320)
  br label %dec_label_pc_c344

dec_label_pc_c344:                                ; preds = %dec_label_pc_c290, %dec_label_pc_c2e4
  %storemerge25 = phi i32 [ %v2_c33c, %dec_label_pc_c2e4 ], [ %v7_c2d8, %dec_label_pc_c290 ]
  store i32 %v3_c1fc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_c350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c350, label %dec_label_pc_c464, label %dec_label_pc_c358

dec_label_pc_c358:                                ; preds = %dec_label_pc_c344
  store i32 %v8_c248, i32* %ip.global-to-local, align 4
  store i32 %v5_c364, i32* %r3.global-to-local, align 4
  store i32 %v3_c36893, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c374

dec_label_pc_c374:                                ; preds = %dec_label_pc_c464, %dec_label_pc_c358
  %stack_var_-57.0 = phi i8 [ %v1_c46c, %dec_label_pc_c464 ], [ %v1_c36c, %dec_label_pc_c358 ]
  %storemerge = phi i8 [ %v1_c464, %dec_label_pc_c464 ], [ %v1_c370, %dec_label_pc_c358 ]
  store i32 %v2_c374, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_c37c = load i32, i32* @r7, align 4
  store i32 %v0_c37c, i32* %r0.global-to-local, align 4
  %v4_c380 = call i32 @function_1498c(i32 %v0_c37c, %sockaddr* nonnull %v3_c380, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c388 = call i32 @function_14504(i32* null)
  store i32 %v2_c388, i32* %r0.global-to-local, align 4
  store i32 %v2_c388, i32* @r4, align 4
  %v9_c3e8 = icmp eq i32 %tmp32, %storemerge25
  %v4_c40c = zext i8 %storemerge to i32
  %v4_c410 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_c3e8 to i32
  %v9_c3fc = icmp eq i1 %v9_c3e8, false
  %v4_c418 = mul nuw nsw i32 %v4_c410, 256
  %v5_c418 = or i32 %v4_c418, %v4_c40c
  %v9_c41c = icmp eq i32 %v5_c418, %v5_c414
  br label %dec_label_pc_c3a4

dec_label_pc_c394:                                ; preds = %.thread23, %dec_label_pc_c404, %dec_label_pc_c434, %bb75
  %v2_c394 = call i32 @function_14504(i32* null)
  %v0_c398 = load i32, i32* @r4, align 4
  %v2_c398 = sub i32 %v2_c394, %v0_c398
  store i32 %v2_c398, i32* %r0.global-to-local, align 4
  %v7_c39c = icmp eq i32 %v2_c398, 10
  store i1 %v7_c39c, i1* %cpsr_z.global-to-local, align 1
  %v8_c3a0 = icmp sgt i32 %v2_c398, 10
  br i1 %v8_c3a0, label %dec_label_pc_c448, label %dec_label_pc_c3a4

dec_label_pc_c3a4:                                ; preds = %dec_label_pc_c394, %dec_label_pc_c374
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_c3b0, i32* %lr.global-to-local, align 4
  store i32 %v2_c3b4, i32* %ip.global-to-local, align 4
  store i32 %v2_c3b8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_c1f8, i32* %r0.global-to-local, align 4
  %v7_c3cc = call i32 @function_14a6c(i32 %v3_c1f8, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_c3b0, i32 %v2_c3b4)
  store i32 %v7_c3cc, i32* %r2.global-to-local, align 4
  %v7_c3d4 = icmp eq i32 %v7_c3cc, -1
  store i1 %v7_c3d4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_c3d4, label %dec_label_pc_c45c, label %dec_label_pc_c3e0

dec_label_pc_c3e0:                                ; preds = %dec_label_pc_c3a4
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_c3f4 = icmp eq i32 %v7_c3cc, 40
  store i1 %v7_c3f4, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_c3cc, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_c3e0
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_c394

bb75:                                             ; preds = %dec_label_pc_c3e0
  store i1 %v9_c3fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c3fc, label %dec_label_pc_c394, label %dec_label_pc_c404

dec_label_pc_c404:                                ; preds = %bb75
  store i32 %v4_c408, i32* %r1.global-to-local, align 4
  store i32 %v4_c40c, i32* %ip.global-to-local, align 4
  store i32 %v4_c410, i32* %r2.global-to-local, align 4
  store i32 %v5_c414, i32* %r3.global-to-local, align 4
  store i32 %v5_c418, i32* @r5, align 4
  store i1 %v9_c41c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c41c, label %dec_label_pc_c424, label %dec_label_pc_c394

dec_label_pc_c424:                                ; preds = %dec_label_pc_c404
  store i32 %v4_c424, i32* %r2.global-to-local, align 4
  store i32 %v1_c428, i32* %r3.global-to-local, align 4
  store i1 %v2_c42c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c42c, label %dec_label_pc_c478, label %dec_label_pc_c434

dec_label_pc_c434:                                ; preds = %dec_label_pc_c424
  store i1 %v2_c434, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c434, label %dec_label_pc_c394, label %dec_label_pc_c43c

dec_label_pc_c43c:                                ; preds = %dec_label_pc_c434
  %v0_c43c = load i32, i32* @r7, align 4
  store i32 %v0_c43c, i32* %r0.global-to-local, align 4
  %v1_c440 = call i32 @function_14234(i32 %v0_c43c)
  store i32 %v1_c440, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c264

dec_label_pc_c448:                                ; preds = %dec_label_pc_c394
  %v0_c448 = load i32, i32* @r7, align 4
  store i32 %v0_c448, i32* %r0.global-to-local, align 4
  %v1_c44c = call i32 @function_14234(i32 %v0_c448)
  store i32 %v1_c44c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c274

dec_label_pc_c454:                                ; preds = %dec_label_pc_c210
  store i32 %v3_c1f8, i32* %r0.global-to-local, align 4
  %v1_c458 = call i32 @function_14234(i32 %v3_c1f8)
  store i32 %v1_c458, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c45c

dec_label_pc_c45c:                                ; preds = %dec_label_pc_c3a4, %dec_label_pc_c028, %dec_label_pc_c454
  %v29_c460 = phi i32 [ %v3_c1f8, %dec_label_pc_c028 ], [ %v1_c458, %dec_label_pc_c454 ], [ 0, %dec_label_pc_c3a4 ]
  ret i32 %v29_c460

dec_label_pc_c464:                                ; preds = %dec_label_pc_c344
  %v0_c464 = call i32 @function_10a44()
  %v1_c464 = trunc i32 %v0_c464 to i8
  store i32 %v0_c464, i32* %r0.global-to-local, align 4
  %v4_c468 = sdiv i32 %v0_c464, 256
  store i32 %v4_c468, i32* %r3.global-to-local, align 4
  %v1_c46c = trunc i32 %v4_c468 to i8
  br label %dec_label_pc_c374

dec_label_pc_c478:                                ; preds = %dec_label_pc_c424
  %v3_c478 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c478, i32* @r4, align 4
  store i32 %v2_c048, i32* %r2.global-to-local, align 4
  %v3_c480 = mul i32 %v3_c478, 16
  store i32 %v3_c480, i32* %ip.global-to-local, align 4
  %v3_c484 = add i32 %v3_c480, %v2_c048
  %v4_c484 = inttoptr i32 %v3_c484 to i32*
  store i32 %storemerge25, i32* %v4_c484, align 4
  %v0_c488 = load i32, i32* @r6, align 4
  %v1_c488 = add i32 %v0_c488, 4
  %v2_c488 = inttoptr i32 %v1_c488 to i32*
  %v3_c488 = load i32, i32* %v2_c488, align 4
  store i32 %v3_c488, i32* %r0.global-to-local, align 4
  %v1_c490 = and i32 %v3_c488, 65280
  store i32 %v1_c490, i32* %r1.global-to-local, align 4
  store i32 %v2_c048, i32* %lr.global-to-local, align 4
  %v3_c498 = mul i32 %v3_c488, 16777216
  %v4_c4a0 = mul nuw nsw i32 %v1_c490, 256
  %v5_c4a0 = or i32 %v4_c4a0, %v3_c498
  store i32 %v5_c4a0, i32* %r2.global-to-local, align 4
  %v1_c4a8 = load i32, i32* %ip.global-to-local, align 4
  %v2_c4a8 = add i32 %v1_c4a8, %v2_c048
  store i32 %v2_c4a8, i32* %ip.global-to-local, align 4
  %v2_c4ac = call i32 @llvm.bswap.i32(i32 %v3_c488)
  store i32 %v2_c4ac, i32* %r3.global-to-local, align 4
  %v2_c4b0 = add i32 %v2_c4a8, 4
  %v3_c4b0 = inttoptr i32 %v2_c4b0 to i32*
  store i32 %v2_c4ac, i32* %v3_c4b0, align 4
  %v0_c4b4 = load i32, i32* @r6, align 4
  %v1_c4b4 = add i32 %v0_c4b4, 8
  %v2_c4b4 = inttoptr i32 %v1_c4b4 to i32*
  %v3_c4b4 = load i32, i32* %v2_c4b4, align 4
  store i32 %v3_c4b4, i32* %r0.global-to-local, align 4
  %v1_c4bc = and i32 %v3_c4b4, 65280
  store i32 %v1_c4bc, i32* %r1.global-to-local, align 4
  %v3_c4c0 = mul i32 %v3_c4b4, 16777216
  %v4_c4c8 = mul nuw nsw i32 %v1_c4bc, 256
  %v5_c4c8 = or i32 %v4_c4c8, %v3_c4c0
  store i32 %v5_c4c8, i32* %r2.global-to-local, align 4
  %v2_c4d0 = call i32 @llvm.bswap.i32(i32 %v3_c4b4)
  store i32 %v2_c4d0, i32* %r3.global-to-local, align 4
  %v1_c4d4 = load i32, i32* %ip.global-to-local, align 4
  %v2_c4d4 = add i32 %v1_c4d4, 8
  %v3_c4d4 = inttoptr i32 %v2_c4d4 to i32*
  store i32 %v2_c4d0, i32* %v3_c4d4, align 4
  %v0_c4d8 = load i32, i32* @r6, align 4
  %v1_c4d8 = inttoptr i32 %v0_c4d8 to i32*
  %v2_c4d8 = load i32, i32* %v1_c4d8, align 4
  %v3_c4dc = udiv i32 %v2_c4d8, 65536
  store i32 %v3_c4dc, i32* %r2.global-to-local, align 4
  %v3_c4e03 = udiv i32 %v2_c4d8, 16777216
  store i32 %v3_c4e03, i32* %r1.global-to-local, align 4
  %v0_c4e4 = load i32, i32* @r5, align 4
  %v3_c4e4 = sdiv i32 %v0_c4e4, 256
  store i32 %v3_c4e4, i32* %r3.global-to-local, align 4
  %v1_c4e8 = trunc i32 %v3_c4e4 to i8
  %v2_c4e8 = load i32, i32* %ip.global-to-local, align 4
  %v3_c4e8 = add i32 %v2_c4e8, 15
  %v4_c4e8 = inttoptr i32 %v3_c4e8 to i8*
  store i8 %v1_c4e8, i8* %v4_c4e8, align 1
  %v0_c4ec = load i32, i32* %r1.global-to-local, align 4
  %v1_c4ec = trunc i32 %v0_c4ec to i8
  %v2_c4ec = load i32, i32* %ip.global-to-local, align 4
  %v3_c4ec = add i32 %v2_c4ec, 13
  %v4_c4ec = inttoptr i32 %v3_c4ec to i8*
  store i8 %v1_c4ec, i8* %v4_c4ec, align 1
  %v0_c4f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c4f0 = trunc i32 %v0_c4f0 to i8
  %v2_c4f0 = load i32, i32* %ip.global-to-local, align 4
  %v3_c4f0 = add i32 %v2_c4f0, 12
  %v4_c4f0 = inttoptr i32 %v3_c4f0 to i8*
  store i8 %v1_c4f0, i8* %v4_c4f0, align 1
  %v0_c4f4 = load i32, i32* @r5, align 4
  %v1_c4f4 = trunc i32 %v0_c4f4 to i8
  %v2_c4f4 = load i32, i32* %ip.global-to-local, align 4
  %v3_c4f4 = add i32 %v2_c4f4, 14
  %v4_c4f4 = inttoptr i32 %v3_c4f4 to i8*
  store i8 %v1_c4f4, i8* %v4_c4f4, align 1
  %v0_c4f8 = load i32, i32* @sl, align 4
  store i32 %v0_c4f8, i32* %r0.global-to-local, align 4
  %v1_c4fc = call i32 @function_14ce0(i32 %v0_c4f8)
  store i32 %v1_c4fc, i32* %r0.global-to-local, align 4
  store i32 %v2_c058, i32* %r1.global-to-local, align 4
  %v3_c504 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c504, i32* %r2.global-to-local, align 4
  %v2_c508 = load i32, i32* @r4, align 4
  %v5_c508 = mul i32 %v2_c508, 4
  %v6_c508 = add i32 %v5_c508, %v2_c058
  %v7_c508 = inttoptr i32 %v6_c508 to i32*
  store i32 %v1_c4fc, i32* %v7_c508, align 4
  %v0_c50c = load i32, i32* %r1.global-to-local, align 4
  %v1_c50c = load i32, i32* %r2.global-to-local, align 4
  %v4_c50c = mul i32 %v1_c50c, 4
  %v5_c50c = add i32 %v4_c50c, %v0_c50c
  %v6_c50c = inttoptr i32 %v5_c50c to i32*
  %v7_c50c = load i32, i32* %v6_c50c, align 4
  store i32 %v7_c50c, i32* @r4, align 4
  %v1_c510 = inttoptr i32 %v7_c50c to i8*
  %v2_c510 = load i8, i8* %v1_c510, align 1
  %tmp100 = urem i8 %v2_c510, 16
  %v1_c514 = zext i8 %tmp100 to i32
  %v1_c518 = or i32 %v1_c514, 64
  store i32 %v1_c518, i32* %r3.global-to-local, align 4
  %v1_c51c = trunc i32 %v1_c518 to i8
  store i8 %v1_c51c, i8* %v1_c510, align 1
  %v0_c520 = load i32, i32* @r4, align 4
  %v1_c520 = inttoptr i32 %v0_c520 to i8*
  %v2_c520 = load i8, i8* %v1_c520, align 1
  store i32 %v3_c240, i32* %ip.global-to-local, align 4
  %v1_c52c = and i8 %v2_c520, -16
  %v1_c534 = or i8 %v1_c52c, 5
  store i32 %v5_c538, i32* %r0.global-to-local, align 4
  %v0_c53c = load i32, i32* @sl, align 4
  %v3_c53c = mul i32 %v0_c53c, 65536
  store i32 %v3_c53c, i32* %r2.global-to-local, align 4
  store i32 %v1_c0d8, i32* %lr.global-to-local, align 4
  store i8 %v1_c534, i8* %v1_c520, align 1
  store i32 %v4_c548, i32* %r1.global-to-local, align 4
  %v0_c54c = load i32, i32* %r2.global-to-local, align 4
  %v3_c54c = udiv i32 %v0_c54c, 65536
  %v1_c550 = urem i32 %v3_c54c, 256
  store i32 %v1_c550, i32* %r3.global-to-local, align 4
  %v3_c554 = udiv i32 %v0_c54c, 16777216
  store i32 %v3_c554, i32* %r2.global-to-local, align 4
  %v2_c558 = load i32, i32* @r4, align 4
  %v3_c558 = add i32 %v2_c558, 1
  %v4_c558 = inttoptr i32 %v3_c558 to i8*
  store i8 %v1_c558, i8* %v4_c558, align 1
  %v0_c55c = load i32, i32* %r2.global-to-local, align 4
  %v1_c55c = load i32, i32* %r3.global-to-local, align 4
  %v4_c55c = mul i32 %v1_c55c, 256
  %v5_c55c = or i32 %v4_c55c, %v0_c55c
  store i32 %v5_c55c, i32* %r2.global-to-local, align 4
  %v1_c560 = trunc i32 %v0_c55c to i8
  %v2_c560 = load i32, i32* @r4, align 4
  %v3_c560 = add i32 %v2_c560, 2
  %v4_c560 = inttoptr i32 %v3_c560 to i8*
  store i8 %v1_c560, i8* %v4_c560, align 1
  %v0_c564 = load i32, i32* %lr.global-to-local, align 4
  %v2_c564 = icmp eq i32 %v0_c564, 0
  store i1 %v2_c564, i1* %cpsr_z.global-to-local, align 1
  %v0_c568 = load i32, i32* %r2.global-to-local, align 4
  %v3_c568 = sdiv i32 %v0_c568, 256
  store i32 %v3_c568, i32* %r3.global-to-local, align 4
  store i32 %v4_c56c, i32* %r2.global-to-local, align 4
  %v1_c570 = trunc i32 %v3_c568 to i8
  %v2_c570 = load i32, i32* @r4, align 4
  %v3_c570 = add i32 %v2_c570, 3
  %v4_c570 = inttoptr i32 %v3_c570 to i8*
  store i8 %v1_c570, i8* %v4_c570, align 1
  %v0_c574 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c574, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_c478
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_c478, %bb76
  %v0_c578 = load i32, i32* %r2.global-to-local, align 4
  %v1_c578 = trunc i32 %v0_c578 to i8
  %v2_c578 = load i32, i32* @r4, align 4
  %v3_c578 = add i32 %v2_c578, 8
  %v4_c578 = inttoptr i32 %v3_c578 to i8*
  store i8 %v1_c578, i8* %v4_c578, align 1
  %v0_c57c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c57c, label %.thread6, label %bb78

bb78:                                             ; preds = %bb77
  %v1_c57c = load i32, i32* %r3.global-to-local, align 4
  %v2_c57c = trunc i32 %v1_c57c to i8
  %v3_c57c = load i32, i32* @r4, align 4
  %v4_c57c = add i32 %v3_c57c, 6
  %v5_c57c = inttoptr i32 %v4_c57c to i8*
  store i8 %v2_c57c, i8* %v5_c57c, align 1
  %v0_c580.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c580.pr, label %.thread6, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_c588 = load i32, i32* @r4, align 4
  %v3_c588 = add i32 %v2_c588, 9
  %v4_c588 = inttoptr i32 %v3_c588 to i8*
  store i8 6, i8* %v4_c588, align 1
  %v0_c58c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c58c, label %bb81, label %bb80

bb80:                                             ; preds = %.thread6
  %v1_c58c = load i32, i32* %r2.global-to-local, align 4
  %v2_c58c = trunc i32 %v1_c58c to i8
  %v3_c58c = load i32, i32* @r4, align 4
  %v4_c58c = add i32 %v3_c58c, 7
  %v5_c58c = inttoptr i32 %v4_c58c to i8*
  store i8 %v2_c58c, i8* %v5_c58c, align 1
  br label %bb81

bb81:                                             ; preds = %.thread6, %bb80
  %v2_c594 = load i32, i32* @global_var_1f858.88, align 4
  store i32 %v2_c594, i32* %r3.global-to-local, align 4
  %v0_c598 = load i32, i32* %r0.global-to-local, align 4
  %v3_c598 = sdiv i32 %v0_c598, 256
  store i32 %v3_c598, i32* %ip.global-to-local, align 4
  %v1_c59c = load i32, i32* @r4, align 4
  %v2_c59c = add i32 %v1_c59c, 12
  %v3_c59c = inttoptr i32 %v2_c59c to i32*
  store i32 %v2_c594, i32* %v3_c59c, align 4
  %v0_c5a0 = load i32, i32* %ip.global-to-local, align 4
  %v1_c5a0 = trunc i32 %v0_c5a0 to i8
  %v2_c5a0 = load i32, i32* @r4, align 4
  %v3_c5a0 = add i32 %v2_c5a0, 5
  %v4_c5a0 = inttoptr i32 %v3_c5a0 to i8*
  store i8 %v1_c5a0, i8* %v4_c5a0, align 1
  %v3_c5a4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c5a4, i32* %r2.global-to-local, align 4
  store i32 %v2_c048, i32* %ip.global-to-local, align 4
  %v4_c5ac = mul i32 %v3_c5a4, 16
  %v5_c5ac = add i32 %v4_c5ac, %v2_c048
  %v6_c5ac = inttoptr i32 %v5_c5ac to i32*
  %v7_c5ac = load i32, i32* %v6_c5ac, align 4
  store i32 %v7_c5ac, i32* %r3.global-to-local, align 4
  %v0_c5b0 = load i32, i32* %r0.global-to-local, align 4
  %v1_c5b0 = trunc i32 %v0_c5b0 to i8
  %v2_c5b0 = load i32, i32* @r4, align 4
  %v3_c5b0 = add i32 %v2_c5b0, 4
  %v4_c5b0 = inttoptr i32 %v3_c5b0 to i8*
  store i8 %v1_c5b0, i8* %v4_c5b0, align 1
  %v0_c5b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5b4 = load i32, i32* @r4, align 4
  %v2_c5b4 = add i32 %v1_c5b4, 16
  %v3_c5b4 = inttoptr i32 %v2_c5b4 to i32*
  store i32 %v0_c5b4, i32* %v3_c5b4, align 4
  %v0_c5b8 = load i32, i32* %r2.global-to-local, align 4
  %v3_c5b8 = mul i32 %v0_c5b8, 16
  %v1_c5bc = load i32, i32* %ip.global-to-local, align 4
  %v2_c5bc = add i32 %v1_c5bc, %v3_c5b8
  store i32 %v2_c5bc, i32* %r2.global-to-local, align 4
  %v1_c5c0 = add i32 %v2_c5bc, 13
  %v2_c5c0 = inttoptr i32 %v1_c5c0 to i8*
  %v3_c5c0 = load i8, i8* %v2_c5c0, align 1
  %v4_c5c0 = zext i8 %v3_c5c0 to i32
  store i32 %v4_c5c0, i32* %r1.global-to-local, align 4
  %v1_c5c4 = add i32 %v2_c5bc, 12
  %v2_c5c4 = inttoptr i32 %v1_c5c4 to i8*
  %v3_c5c4 = load i8, i8* %v2_c5c4, align 1
  %v4_c5c4 = zext i8 %v3_c5c4 to i32
  %v4_c5c8 = mul nuw nsw i32 %v4_c5c0, 256
  %v5_c5c8 = or i32 %v4_c5c4, %v4_c5c8
  store i32 %v5_c5c8, i32* %r3.global-to-local, align 4
  %v2_c5cc = load i32, i32* @r4, align 4
  %v3_c5cc = add i32 %v2_c5cc, 20
  %v4_c5cc = inttoptr i32 %v3_c5cc to i8*
  store i8 %v3_c5c4, i8* %v4_c5cc, align 1
  %v0_c5d0 = load i32, i32* @r4, align 4
  %v1_c5d0 = add i32 %v0_c5d0, 20
  store i32 %v1_c5d0, i32* @r6, align 4
  %v0_c5d4 = load i32, i32* %r3.global-to-local, align 4
  %v3_c5d4 = sdiv i32 %v0_c5d4, 256
  store i32 %v3_c5d4, i32* %r3.global-to-local, align 4
  %v1_c5d8 = trunc i32 %v3_c5d4 to i8
  %v3_c5d8 = add i32 %v0_c5d0, 21
  %v4_c5d8 = inttoptr i32 %v3_c5d8 to i8*
  store i8 %v1_c5d8, i8* %v4_c5d8, align 1
  %v0_c5dc = load i32, i32* @r6, align 4
  %v1_c5dc = add i32 %v0_c5dc, 13
  %v2_c5dc = inttoptr i32 %v1_c5dc to i8*
  %v3_c5dc = load i8, i8* %v2_c5dc, align 1
  %v4_c5dc = zext i8 %v3_c5dc to i32
  store i32 %v4_c5dc, i32* %r3.global-to-local, align 4
  %v0_c5e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c5e0 = add i32 %v0_c5e0, 8
  %v2_c5e0 = inttoptr i32 %v1_c5e0 to i32*
  %v3_c5e0 = load i32, i32* %v2_c5e0, align 4
  store i32 %v3_c5e0, i32* %r1.global-to-local, align 4
  %v1_c5e4 = or i32 %v4_c5dc, 1
  store i32 %v1_c5e4, i32* %r3.global-to-local, align 4
  %v1_c5e8 = add i32 %v0_c5e0, 15
  %v2_c5e8 = inttoptr i32 %v1_c5e8 to i8*
  %v3_c5e8 = load i8, i8* %v2_c5e8, align 1
  %v4_c5e8 = zext i8 %v3_c5e8 to i32
  store i32 %v4_c5e8, i32* %ip.global-to-local, align 4
  %v1_c5ec = add i32 %v0_c5e0, 14
  %v2_c5ec = inttoptr i32 %v1_c5ec to i8*
  %v3_c5ec = load i8, i8* %v2_c5ec, align 1
  %v4_c5ec = zext i8 %v3_c5ec to i32
  store i32 %v4_c5ec, i32* %r0.global-to-local, align 4
  %v2_c5f0 = add i32 %v0_c5dc, 4
  %v3_c5f0 = inttoptr i32 %v2_c5f0 to i32*
  store i32 %v3_c5e0, i32* %v3_c5f0, align 4
  %v0_c5f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c5f4 = add i32 %v0_c5f4, 4
  %v2_c5f4 = inttoptr i32 %v1_c5f4 to i32*
  %v3_c5f4 = load i32, i32* %v2_c5f4, align 4
  store i32 %v3_c5f4, i32* %lr.global-to-local, align 4
  %v0_c5f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5f8 = trunc i32 %v0_c5f8 to i8
  %v2_c5f8 = load i32, i32* @r6, align 4
  %v3_c5f8 = add i32 %v2_c5f8, 13
  %v4_c5f8 = inttoptr i32 %v3_c5f8 to i8*
  store i8 %v1_c5f8, i8* %v4_c5f8, align 1
  %v0_c5fc = load i32, i32* @r6, align 4
  %v1_c5fc = add i32 %v0_c5fc, 12
  %v2_c5fc = inttoptr i32 %v1_c5fc to i8*
  %v3_c5fc = load i8, i8* %v2_c5fc, align 1
  %v4_c5fc = zext i8 %v3_c5fc to i32
  store i32 %v4_c5fc, i32* %r2.global-to-local, align 4
  %v1_c600 = add i32 %v0_c5fc, 13
  %v2_c600 = inttoptr i32 %v1_c600 to i8*
  %v3_c600 = load i8, i8* %v2_c600, align 1
  %v4_c600 = zext i8 %v3_c600 to i32
  %v0_c604 = load i32, i32* %r0.global-to-local, align 4
  %v1_c604 = load i32, i32* %ip.global-to-local, align 4
  %v4_c604 = mul i32 %v1_c604, 256
  %v5_c604 = or i32 %v4_c604, %v0_c604
  store i32 %v5_c604, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_c5fc, 16
  %v1_c608 = zext i8 %tmp101 to i32
  %v3_c60c = sdiv i32 %v5_c604, 256
  store i32 %v3_c60c, i32* %r1.global-to-local, align 4
  %v1_c610 = or i32 %v1_c608, 128
  store i32 %v1_c610, i32* %r2.global-to-local, align 4
  %v1_c614 = or i32 %v4_c600, 16
  store i32 %v1_c614, i32* %r3.global-to-local, align 4
  %v1_c618 = trunc i32 %v3_c60c to i8
  %v3_c618 = add i32 %v0_c5fc, 3
  %v4_c618 = inttoptr i32 %v3_c618 to i8*
  store i8 %v1_c618, i8* %v4_c618, align 1
  %v0_c61c = load i32, i32* %lr.global-to-local, align 4
  %v1_c61c = load i32, i32* @r6, align 4
  %v2_c61c = add i32 %v1_c61c, 8
  %v3_c61c = inttoptr i32 %v2_c61c to i32*
  store i32 %v0_c61c, i32* %v3_c61c, align 4
  %v0_c620 = load i32, i32* %r2.global-to-local, align 4
  %v1_c620 = trunc i32 %v0_c620 to i8
  %v2_c620 = load i32, i32* @r6, align 4
  %v3_c620 = add i32 %v2_c620, 12
  %v4_c620 = inttoptr i32 %v3_c620 to i8*
  store i8 %v1_c620, i8* %v4_c620, align 1
  %v0_c624 = load i32, i32* %r3.global-to-local, align 4
  %v1_c624 = trunc i32 %v0_c624 to i8
  %v2_c624 = load i32, i32* @r6, align 4
  %v3_c624 = add i32 %v2_c624, 13
  %v4_c624 = inttoptr i32 %v3_c624 to i8*
  store i8 %v1_c624, i8* %v4_c624, align 1
  %v0_c628 = load i32, i32* %r0.global-to-local, align 4
  %v1_c628 = trunc i32 %v0_c628 to i8
  %v2_c628 = load i32, i32* @r6, align 4
  %v3_c628 = add i32 %v2_c628, 2
  %v4_c628 = inttoptr i32 %v3_c628 to i8*
  store i8 %v1_c628, i8* %v4_c628, align 1
  %v0_c62c = call i32 @function_10a44()
  %v1_c62c = trunc i32 %v0_c62c to i8
  store i32 %v0_c62c, i32* %r0.global-to-local, align 4
  store i32 %v1_c110, i32* %lr.global-to-local, align 4
  %v0_c634 = load i32, i32* @r6, align 4
  %v1_c634 = add i32 %v0_c634, 13
  %v2_c634 = inttoptr i32 %v1_c634 to i8*
  %v3_c634 = load i8, i8* %v2_c634, align 1
  %v4_c634 = zext i8 %v3_c634 to i32
  store i32 %v1_c638, i32* %r2.global-to-local, align 4
  %v1_c63c = and i32 %v4_c634, 223
  %v5_c640 = or i32 %v1_c63c, %v4_c640
  store i32 %v5_c640, i32* %r3.global-to-local, align 4
  %v1_c644 = trunc i32 %v5_c640 to i8
  store i8 %v1_c644, i8* %v2_c634, align 1
  store i32 %v1_c130, i32* %r1.global-to-local, align 4
  %v0_c64c = load i32, i32* @r6, align 4
  %v1_c64c = add i32 %v0_c64c, 13
  %v2_c64c = inttoptr i32 %v1_c64c to i8*
  %v3_c64c = load i8, i8* %v2_c64c, align 1
  %v4_c64c = zext i8 %v3_c64c to i32
  store i32 %v1_c650, i32* %r3.global-to-local, align 4
  %v1_c654 = and i32 %v4_c64c, 239
  %v5_c658 = or i32 %v1_c654, %v4_c658
  store i32 %v5_c658, i32* %r2.global-to-local, align 4
  %v1_c65c = trunc i32 %v5_c658 to i8
  store i8 %v1_c65c, i8* %v2_c64c, align 1
  store i32 %v1_c150, i32* %ip.global-to-local, align 4
  %v0_c664 = load i32, i32* @r6, align 4
  %v1_c664 = add i32 %v0_c664, 13
  %v2_c664 = inttoptr i32 %v1_c664 to i8*
  %v3_c664 = load i8, i8* %v2_c664, align 1
  %v4_c664 = zext i8 %v3_c664 to i32
  store i32 %v1_c668, i32* %r2.global-to-local, align 4
  %v1_c66c = and i32 %v4_c664, 247
  %v5_c670 = or i32 %v1_c66c, %v4_c670
  store i32 %v5_c670, i32* %r3.global-to-local, align 4
  %v1_c674 = trunc i32 %v5_c670 to i8
  store i8 %v1_c674, i8* %v2_c664, align 1
  %v0_c67c = load i32, i32* @r6, align 4
  %v1_c67c = add i32 %v0_c67c, 13
  %v2_c67c = inttoptr i32 %v1_c67c to i8*
  %v3_c67c = load i8, i8* %v2_c67c, align 1
  %v4_c67c = zext i8 %v3_c67c to i32
  store i32 %v1_c680, i32* %r3.global-to-local, align 4
  %v1_c684 = and i32 %v4_c67c, 251
  %v5_c688 = or i32 %v1_c684, %v4_c688
  store i32 %v5_c688, i32* %r2.global-to-local, align 4
  %v1_c68c = trunc i32 %v5_c688 to i8
  store i8 %v1_c68c, i8* %v2_c67c, align 1
  store i32 %v1_c190, i32* %r1.global-to-local, align 4
  %v0_c694 = load i32, i32* @r6, align 4
  %v1_c694 = add i32 %v0_c694, 13
  %v2_c694 = inttoptr i32 %v1_c694 to i8*
  %v3_c694 = load i8, i8* %v2_c694, align 1
  %v4_c694 = zext i8 %v3_c694 to i32
  store i32 %v1_c698, i32* %r2.global-to-local, align 4
  %v1_c69c = and i32 %v4_c694, 253
  %v4_c6a0 = or i32 %v1_c69c, %v3_c6a0
  store i32 %v4_c6a0, i32* %r3.global-to-local, align 4
  %v1_c6a4 = trunc i32 %v4_c6a0 to i8
  store i8 %v1_c6a4, i8* %v2_c694, align 1
  %v0_c6a8 = load i32, i32* @r6, align 4
  %v1_c6a8 = add i32 %v0_c6a8, 13
  %v2_c6a8 = inttoptr i32 %v1_c6a8 to i8*
  %v3_c6a8 = load i8, i8* %v2_c6a8, align 1
  %v4_c6a8 = zext i8 %v3_c6a8 to i32
  %v0_c6ac = load i32, i32* @r8, align 4
  %v1_c6ac = urem i32 %v0_c6ac, 2
  %v1_c6b0 = and i32 %v4_c6a8, 254
  store i32 %v1_c6b0, i32* %r2.global-to-local, align 4
  %v4_c6b427 = udiv i32 %v0_c62c, 256
  %v2_c6b8 = or i32 %v1_c6b0, %v1_c6ac
  store i32 %v2_c6b8, i32* %r3.global-to-local, align 4
  %v1_c6bc = trunc i32 %v4_c6b427 to i8
  %v3_c6bc = add i32 %v0_c6a8, 15
  %v4_c6bc = inttoptr i32 %v3_c6bc to i8*
  store i8 %v1_c6bc, i8* %v4_c6bc, align 1
  %v3_c6c0 = load i32, i32* @r6, align 4
  %v4_c6c0 = add i32 %v3_c6c0, 14
  %v5_c6c0 = inttoptr i32 %v4_c6c0 to i8*
  store i8 %v1_c62c, i8* %v5_c6c0, align 1
  %v0_c6c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c6c4 = trunc i32 %v0_c6c4 to i8
  %v2_c6c4 = load i32, i32* @r6, align 4
  %v3_c6c4 = add i32 %v2_c6c4, 13
  %v4_c6c4 = inttoptr i32 %v3_c6c4 to i8*
  store i8 %v1_c6c4, i8* %v4_c6c4, align 1
  %v0_c6c8 = load i32, i32* @r4, align 4
  %v1_c6c8 = add i32 %v0_c6c8, 40
  store i32 %v1_c6c8, i32* %r0.global-to-local, align 4
  %v0_c6cc = load i32, i32* @sb, align 4
  store i32 %v0_c6cc, i32* @r1, align 4
  %v1_c6d0 = inttoptr i32 %v1_c6c8 to i8*
  %v2_c6d0 = call i32 @function_10c20(i8* %v1_c6d0)
  store i32 %v2_c6d0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c6d4

dec_label_pc_c6d4:                                ; preds = %dec_label_pc_c274, %bb81
  %v3_c6d4 = load i32, i32* %stack_var_-40, align 4
  %v1_c6d8 = add i32 %v3_c6d4, 1
  store i32 %v1_c6d8, i32* %r3.global-to-local, align 4
  %v1_c6dc = load i32, i32* @fp, align 4
  %v9_c6dc = icmp eq i32 %v1_c6d8, %v1_c6dc
  store i1 %v9_c6dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c6d8, i32* %stack_var_-40, align 4
  %v5_c6e4 = icmp slt i32 %v1_c6d8, %v1_c6dc
  br i1 %v5_c6e4, label %dec_label_pc_c264, label %dec_label_pc_c6e8

dec_label_pc_c6e8:                                ; preds = %dec_label_pc_c6d4, %.thread18
  %v0_c6f012 = phi i32 [ %v0_c238, %.thread18 ], [ %v1_c6dc, %dec_label_pc_c6d4 ]
  %v0_c6e8 = load i32, i32* @sb, align 4
  %v1_c6e8 = add i32 %v0_c6e8, 40
  store i32 %v1_c6e8, i32* @sl, align 4
  %v1_c6ec = add i32 %v0_c6e8, 20
  store i32 %v1_c6ec, i32* @r7, align 4
  %v2_c73c = icmp eq i32 %v1_c1e8, 0
  %v6_c71c = inttoptr i32 %v2_c058 to i32*
  %v3_c724 = icmp eq i32 %v3_c240, 65535
  br label %dec_label_pc_c6f0

dec_label_pc_c6f0:                                ; preds = %dec_label_pc_c74c, %dec_label_pc_c6e8
  %v0_c6f0 = phi i32 [ %v1_c82c, %dec_label_pc_c74c ], [ %v0_c6f012, %dec_label_pc_c6e8 ]
  %v2_c6f0 = icmp eq i32 %v0_c6f0, 0
  store i1 %v2_c6f0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_c6f0, 1
  br label %dec_label_pc_c6f8

dec_label_pc_c6f8:                                ; preds = %dec_label_pc_c6f8, %dec_label_pc_c6f0
  br i1 %tmp82, label %dec_label_pc_c6f8, label %dec_label_pc_c6fc

dec_label_pc_c6fc:                                ; preds = %dec_label_pc_c6f8
  %v0_c6fc = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_c6fc, 256
  %v1_c704 = and i32 %tmp83, 65280
  %tmp84 = udiv i32 %v0_c6fc, 256
  %v4_c708 = urem i32 %tmp84, 256
  %v5_c708 = or i32 %v4_c708, %v1_c704
  store i32 %v5_c708, i32* @r8, align 4
  store i32 %v2_c058, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_c240, i32* %ip.global-to-local, align 4
  %v7_c71c = load i32, i32* %v6_c71c, align 4
  store i32 %v7_c71c, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_c724, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_c730 = add i32 %v7_c71c, 20
  store i32 %v1_c730, i32* @r5, align 4
  br i1 %v3_c724, label %dec_label_pc_c858, label %dec_label_pc_c738

dec_label_pc_c738:                                ; preds = %dec_label_pc_c838, %dec_label_pc_c6fc
  %v0_c740 = phi i32 [ %v7_c844, %dec_label_pc_c838 ], [ %v7_c71c, %dec_label_pc_c6fc ]
  store i32 %v1_c1e8, i32* %lr.global-to-local, align 4
  store i1 %v2_c73c, i1* %cpsr_z.global-to-local, align 1
  %v1_c740 = add i32 %v0_c740, 40
  store i32 %v1_c740, i32* %r0.global-to-local, align 4
  %v0_c744 = load i32, i32* @sb, align 4
  store i32 %v0_c744, i32* @r1, align 4
  br i1 %v2_c73c, label %dec_label_pc_c74c, label %dec_label_pc_c87c

dec_label_pc_c74c:                                ; preds = %dec_label_pc_c738, %dec_label_pc_c858, %dec_label_pc_c87c
  %v2_c74c = phi i32 [ %v0_c740, %dec_label_pc_c738 ], [ %v0_c870, %dec_label_pc_c858 ], [ %v2_c74c.pre, %dec_label_pc_c87c ]
  %v0_c74c = load i32, i32* @r6, align 4
  %v1_c74c = trunc i32 %v0_c74c to i8
  %v3_c74c = add i32 %v2_c74c, 10
  %v4_c74c = inttoptr i32 %v3_c74c to i8*
  store i8 %v1_c74c, i8* %v4_c74c, align 1
  %v0_c750 = load i32, i32* @r6, align 4
  %v1_c750 = trunc i32 %v0_c750 to i8
  %v2_c750 = load i32, i32* @r4, align 4
  %v3_c750 = add i32 %v2_c750, 11
  %v4_c750 = inttoptr i32 %v3_c750 to i8*
  store i8 %v1_c750, i8* %v4_c750, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c758 = load i32, i32* @r4, align 4
  store i32 %v0_c758, i32* @r0, align 4
  %v2_c75c = call i32 @function_f008(i32 %v0_c758, i32 20)
  %v3_c75c = trunc i32 %v2_c75c to i8
  store i32 %v2_c75c, i32* %r0.global-to-local, align 4
  %v3_c760 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_c048, i32* %r2.global-to-local, align 4
  %v3_c768 = mul i32 %v3_c760, 16
  %v2_c76c = add i32 %v3_c768, %v2_c048
  store i32 %v2_c76c, i32* %r1.global-to-local, align 4
  %v1_c770 = add i32 %v2_c76c, 4
  %v2_c770 = inttoptr i32 %v1_c770 to i32*
  %v3_c770 = load i32, i32* %v2_c770, align 4
  %v3_c774 = mul i32 %v3_c770, 65536
  store i32 %v3_c774, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_c770, 256
  %v1_c77c = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_c770, 256
  %v4_c780 = urem i32 %tmp86, 256
  %v5_c780 = or i32 %v4_c780, %v1_c77c
  store i32 %v5_c780, i32* %r2.global-to-local, align 4
  %v1_c784 = add i32 %v3_c770, 1
  store i32 %v1_c784, i32* %r3.global-to-local, align 4
  store i32 %v1_c784, i32* %v2_c770, align 4
  %v0_c78c = load i32, i32* %r2.global-to-local, align 4
  %v1_c78c = load i32, i32* @r5, align 4
  %v2_c78c = add i32 %v1_c78c, 4
  %v3_c78c = inttoptr i32 %v2_c78c to i32*
  store i32 %v0_c78c, i32* %v3_c78c, align 4
  %v0_c790 = load i32, i32* %r1.global-to-local, align 4
  %v1_c790 = add i32 %v0_c790, 8
  %v2_c790 = inttoptr i32 %v1_c790 to i32*
  %v3_c790 = load i32, i32* %v2_c790, align 4
  %tmp87 = mul i32 %v3_c790, 256
  %v1_c79c = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_c790, 256
  %v4_c7a0 = urem i32 %tmp88, 256
  %v5_c7a0 = or i32 %v4_c7a0, %v1_c79c
  store i32 %v5_c7a0, i32* %r2.global-to-local, align 4
  %v4_c7a428 = udiv i32 %v2_c75c, 256
  %v1_c7a8 = trunc i32 %v4_c7a428 to i8
  %v2_c7a8 = load i32, i32* @r4, align 4
  %v3_c7a8 = add i32 %v2_c7a8, 11
  %v4_c7a8 = inttoptr i32 %v3_c7a8 to i8*
  store i8 %v1_c7a8, i8* %v4_c7a8, align 1
  %v3_c7ac = load i32, i32* @r4, align 4
  %v4_c7ac = add i32 %v3_c7ac, 10
  %v5_c7ac = inttoptr i32 %v4_c7ac to i8*
  store i8 %v3_c75c, i8* %v5_c7ac, align 1
  %v0_c7b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c7b0 = load i32, i32* @r5, align 4
  %v2_c7b0 = add i32 %v1_c7b0, 8
  %v3_c7b0 = inttoptr i32 %v2_c7b0 to i32*
  store i32 %v0_c7b0, i32* %v3_c7b0, align 4
  %v0_c7b4 = load i32, i32* @r5, align 4
  store i32 %v0_c7b4, i32* @r1, align 4
  %v0_c7b8 = load i32, i32* @r8, align 4
  store i32 %v0_c7b8, i32* %r2.global-to-local, align 4
  %v0_c7bc = load i32, i32* @r7, align 4
  store i32 %v0_c7bc, i32* %r3.global-to-local, align 4
  %v0_c7c0 = load i32, i32* @r4, align 4
  store i32 %v0_c7c0, i32* %r0.global-to-local, align 4
  %v0_c7c4 = load i32, i32* @r6, align 4
  %v1_c7c4 = trunc i32 %v0_c7c4 to i8
  %v3_c7c4 = add i32 %v0_c7b4, 16
  %v4_c7c4 = inttoptr i32 %v3_c7c4 to i8*
  store i8 %v1_c7c4, i8* %v4_c7c4, align 1
  %v0_c7c8 = load i32, i32* @r6, align 4
  %v1_c7c8 = trunc i32 %v0_c7c8 to i8
  %v2_c7c8 = load i32, i32* @r5, align 4
  %v3_c7c8 = add i32 %v2_c7c8, 17
  %v4_c7c8 = inttoptr i32 %v3_c7c8 to i8*
  store i8 %v1_c7c8, i8* %v4_c7c8, align 1
  %v4_c7cc = call i32 @function_f064(i32 %v0_c7c0, i32 %v0_c7b4, i32 %v0_c7b8, i32 %v0_c7bc)
  %v5_c7cc = trunc i32 %v4_c7cc to i8
  store i32 %v4_c7cc, i32* %r0.global-to-local, align 4
  %v4_c7d029 = udiv i32 %v4_c7cc, 256
  %v1_c7d4 = trunc i32 %v4_c7d029 to i8
  %v2_c7d4 = load i32, i32* @r5, align 4
  %v3_c7d4 = add i32 %v2_c7d4, 17
  %v4_c7d4 = inttoptr i32 %v3_c7d4 to i8*
  store i8 %v1_c7d4, i8* %v4_c7d4, align 1
  %v3_c7d8 = load i32, i32* @r5, align 4
  %v4_c7d8 = add i32 %v3_c7d8, 16
  %v5_c7d8 = inttoptr i32 %v4_c7d8 to i8*
  store i8 %v5_c7cc, i8* %v5_c7d8, align 1
  %v3_c7dc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c7dc, i32* %r3.global-to-local, align 4
  %v0_c7e0 = load i32, i32* @r4, align 4
  %v1_c7e0 = add i32 %v0_c7e0, 20
  %v2_c7e0 = inttoptr i32 %v1_c7e0 to i32*
  %v3_c7e0 = load i32, i32* %v2_c7e0, align 4
  %v5_c7e8 = mul i32 %v3_c7dc, 24
  %v3_c7f0 = udiv i32 %v3_c7e0, 65536
  store i32 %v3_c7f0, i32* %r2.global-to-local, align 4
  %v2_c7f4 = add i32 %v5_c7e8, %arg2
  store i32 %v2_c7f4, i32* %ip.global-to-local, align 4
  %v3_c7f84 = udiv i32 %v3_c7e0, 16777216
  %v1_c7fc = trunc i32 %v3_c7f84 to i8
  %v3_c7fc = add i32 %v2_c7f4, 3
  %v4_c7fc = inttoptr i32 %v3_c7fc to i8*
  store i8 %v1_c7fc, i8* %v4_c7fc, align 1
  %v0_c800 = load i32, i32* %r2.global-to-local, align 4
  %v1_c800 = trunc i32 %v0_c800 to i8
  %v2_c800 = load i32, i32* %ip.global-to-local, align 4
  %v3_c800 = add i32 %v2_c800, 2
  %v4_c800 = inttoptr i32 %v3_c800 to i8*
  store i8 %v1_c800, i8* %v4_c800, align 1
  %v0_c804 = load i32, i32* @r4, align 4
  store i32 %v0_c804, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_c1f8, i32* %r0.global-to-local, align 4
  %v0_c810 = load i32, i32* @sl, align 4
  store i32 %v0_c810, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c818 = load i32, i32* %ip.global-to-local, align 4
  %v6_c820 = inttoptr i32 %v0_c804 to i32*
  %v7_c820 = call i32 @function_14acc(i32 %v3_c1f8, i32* %v6_c820, i32 %v0_c810, i32 16384, i32 %v0_c818, i32 16)
  %v3_c824 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c824, i32* %r3.global-to-local, align 4
  %v1_c828 = add i32 %v3_c824, 1
  store i32 %v1_c828, i32* %r0.global-to-local, align 4
  %v1_c82c = load i32, i32* @fp, align 4
  %v9_c82c = icmp eq i32 %v1_c828, %v1_c82c
  store i1 %v9_c82c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c828, i32* %stack_var_-40, align 4
  %v6_c834 = icmp slt i32 %v1_c828, %v1_c82c
  br i1 %v6_c834, label %dec_label_pc_c838, label %dec_label_pc_c6f0

dec_label_pc_c838:                                ; preds = %dec_label_pc_c74c
  store i32 %v2_c058, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_c240, i32* %ip.global-to-local, align 4
  %v4_c844 = mul i32 %v1_c828, 4
  %v5_c844 = add i32 %v4_c844, %v2_c058
  %v6_c844 = inttoptr i32 %v5_c844 to i32*
  %v7_c844 = load i32, i32* %v6_c844, align 4
  store i32 %v7_c844, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_c724, i1* %cpsr_z.global-to-local, align 1
  %v1_c850 = add i32 %v7_c844, 20
  store i32 %v1_c850, i32* @r5, align 4
  br i1 %v3_c724, label %dec_label_pc_c858, label %dec_label_pc_c738

dec_label_pc_c858:                                ; preds = %dec_label_pc_c838, %dec_label_pc_c6fc
  %v0_c858 = call i32 @function_10a44()
  %v1_c858 = trunc i32 %v0_c858 to i8
  store i32 %v1_c1e8, i32* %lr.global-to-local, align 4
  %v4_c860 = sdiv i32 %v0_c858, 256
  store i32 %v4_c860, i32* %r3.global-to-local, align 4
  store i1 %v2_c73c, i1* %cpsr_z.global-to-local, align 1
  %v3_c868 = load i32, i32* @r4, align 4
  %v4_c868 = add i32 %v3_c868, 4
  %v5_c868 = inttoptr i32 %v4_c868 to i8*
  store i8 %v1_c858, i8* %v5_c868, align 1
  %v0_c86c = load i32, i32* %r3.global-to-local, align 4
  %v1_c86c = trunc i32 %v0_c86c to i8
  %v2_c86c = load i32, i32* @r4, align 4
  %v3_c86c = add i32 %v2_c86c, 5
  %v4_c86c = inttoptr i32 %v3_c86c to i8*
  store i8 %v1_c86c, i8* %v4_c86c, align 1
  %v0_c870 = load i32, i32* @r4, align 4
  %v1_c870 = add i32 %v0_c870, 40
  store i32 %v1_c870, i32* %r0.global-to-local, align 4
  %v0_c874 = load i32, i32* @sb, align 4
  store i32 %v0_c874, i32* @r1, align 4
  %v0_c878 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c878, label %dec_label_pc_c74c, label %dec_label_pc_c87c

dec_label_pc_c87c:                                ; preds = %dec_label_pc_c738, %dec_label_pc_c858
  %v0_c87c = phi i32 [ %v1_c740, %dec_label_pc_c738 ], [ %v1_c870, %dec_label_pc_c858 ]
  %v1_c87c = inttoptr i32 %v0_c87c to i8*
  %v2_c87c = call i32 @function_10c20(i8* %v1_c87c)
  store i32 %v2_c87c, i32* %r0.global-to-local, align 4
  %v2_c74c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c74c

; uselistorder directives
  uselistorder i32 %v0_c870, { 1, 0 }
  uselistorder i32 %v7_c844, { 1, 2, 0 }
  uselistorder i32 %v1_c82c, { 1, 2, 0 }
  uselistorder i32 %v1_c828, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_c7cc, { 0, 2, 1 }
  uselistorder i32 %v0_c7b4, { 1, 0, 2 }
  uselistorder i32 %v3_c790, { 1, 0 }
  uselistorder i32 %v3_c770, { 3, 2, 0, 1 }
  uselistorder i32 %v2_c75c, { 0, 2, 1 }
  uselistorder i32 %v0_c740, { 1, 0 }
  uselistorder i32 %v0_c6fc, { 1, 0 }
  uselistorder i32 %v0_c6f0, { 1, 0 }
  uselistorder i1 %v3_c724, { 2, 3, 1, 0 }
  uselistorder i32 %v1_c6d8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c62c, { 0, 2, 1 }
  uselistorder i32 %v3_c60c, { 1, 0 }
  uselistorder i32 %v0_c5e0, { 1, 0, 2 }
  uselistorder i32 %v3_c5d4, { 1, 0 }
  uselistorder i32 %v3_c568, { 1, 0 }
  uselistorder i32 %v0_c55c, { 1, 0 }
  uselistorder i32 %v3_c4e4, { 1, 0 }
  uselistorder i32 %v2_c4d0, { 1, 0 }
  uselistorder i32 %v3_c4b4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_c4ac, { 1, 0 }
  uselistorder i32 %v3_c488, { 1, 0, 2, 3 }
  uselistorder i32 %v3_c480, { 1, 0 }
  uselistorder i32 %v4_c468, { 1, 0 }
  uselistorder i32 %v0_c464, { 0, 2, 1 }
  uselistorder i1 %v7_c3d4, { 1, 0 }
  uselistorder i32 %v7_c3cc, { 0, 2, 1, 3 }
  uselistorder i32 %v5_c418, { 1, 0 }
  uselistorder i1 %v9_c3fc, { 1, 0 }
  uselistorder i32 %v4_c410, { 1, 0 }
  uselistorder i32 %v4_c40c, { 1, 0 }
  uselistorder i32 %v8_c320, { 1, 2, 0, 3 }
  uselistorder i32 %v3_c30c, { 1, 0 }
  uselistorder i32 %v0_c2fc, { 2, 0, 1, 3 }
  uselistorder i1 %v7_c284, { 1, 0 }
  uselistorder i32 %v3_c280, { 1, 2, 0, 3 }
  uselistorder i32 %v1_c698, { 1, 0 }
  uselistorder i32 %v1_c680, { 1, 0 }
  uselistorder i32 %v1_c668, { 1, 0 }
  uselistorder i32 %v1_c650, { 1, 0 }
  uselistorder i32 %v1_c638, { 1, 0 }
  uselistorder i32 %v5_c414, { 1, 0 }
  uselistorder i32 %v3_c36893, { 1, 0 }
  uselistorder i1 %v2_c42c, { 1, 0 }
  uselistorder i32 %v1_c428, { 1, 0 }
  uselistorder i32 %v4_c424, { 2, 0, 1 }
  uselistorder i32 %v4_c408, { 1, 0 }
  uselistorder i1 %v3_c350, { 1, 0 }
  uselistorder i32 %v8_c24c, { 2, 1, 0 }
  uselistorder i32 %v8_c248, { 1, 2, 0 }
  uselistorder i32 %v3_c240, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_c23c, { 0, 1, 3, 2 }
  uselistorder i1 %v7_c230, { 1, 0 }
  uselistorder i1 %v7_c200, { 1, 0 }
  uselistorder i32 %v3_c1fc, { 2, 0, 1 }
  uselistorder i32 %v3_c1f8, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_c1e8, { 1, 3, 2, 0 }
  uselistorder i32 %v1_c190, { 1, 0 }
  uselistorder i32 %v1_c150, { 1, 0 }
  uselistorder i32 %v1_c130, { 1, 0 }
  uselistorder i32 %v1_c110, { 1, 0 }
  uselistorder i32 %v1_c0d8, { 1, 0 }
  uselistorder i32 %v2_c058, { 0, 4, 5, 2, 1, 3 }
  uselistorder i32 %v2_c048, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_c02c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 41, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 43, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 22, 28, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 47, 46, 18, 20, 19, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 19, 12, 13, 14, 15, 16, 17, 18, 23, 20, 21, 22, 26, 28, 27, 30, 29, 33, 31, 34, 35, 32, 36, 38, 37, 39, 40, 42, 41, 46, 43, 44, 45, 47, 49, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 24, 25, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 768, { 0, 2, 1, 3 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_c87c, { 1, 0 }
  uselistorder label %dec_label_pc_c74c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c6d4, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread6, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_c45c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c394, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_c344, { 1, 0 }
}

define i32 @function_c888(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c888:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_c88c = urem i32 %arg1, 256
  store i32 %v1_c88c, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_c8a4 = urem i32 %arg3, 256
  store i32 %v1_c8a4, i32* @r4, align 4
  %v2_c8a8 = call i32 @function_14e34(i32 %v1_c88c, i32 4)
  %v0_c8ac = load i32, i32* @r5, align 4
  store i32 %v0_c8ac, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c8bc = load i32, i32* @r4, align 4
  %v5_c8c0 = inttoptr i32 %v0_c8ac to i32*
  %v6_c8c0 = call i32 @function_a4e8(i32 %v0_c8bc, i32* %v5_c8c0, i32 2, i32 0)
  %v1_c8cc = urem i32 %v6_c8c0, 256
  store i32 %v1_c8cc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c8d8 = load i32, i32* @r5, align 4
  store i32 %v0_c8d8, i32* %r1.global-to-local, align 4
  %v0_c8dc = load i32, i32* @r4, align 4
  %v5_c8e0 = trunc i32 %v6_c8c0 to i8
  %v6_c8e4 = inttoptr i32 %v0_c8d8 to i32*
  %v7_c8e4 = call i32 @function_a4e8(i32 %v0_c8dc, i32* %v6_c8e4, i32 3, i32 65535)
  %v0_c8e8 = load i32, i32* @r5, align 4
  store i32 %v0_c8e8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_c8e4, i32* @r8, align 4
  %v0_c8f8 = load i32, i32* @r4, align 4
  %v4_c8fc = inttoptr i32 %v0_c8e8 to i32*
  %v5_c8fc = call i32 @function_a4e8(i32 %v0_c8f8, i32* %v4_c8fc, i32 4, i32 64)
  %v1_c904 = urem i32 %v5_c8fc, 256
  store i32 %v1_c904, i32* %ip.global-to-local, align 4
  %v0_c908 = load i32, i32* @r5, align 4
  store i32 %v0_c908, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c914 = load i32, i32* @r4, align 4
  %v6_c91c = inttoptr i32 %v0_c908 to i32*
  %v7_c91c = call i32 @function_a4e8(i32 %v0_c914, i32* %v6_c91c, i32 5, i32 0)
  %v1_c928 = urem i32 %v7_c91c, 256
  store i32 %v1_c928, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c934 = load i32, i32* @r5, align 4
  store i32 %v0_c934, i32* %r1.global-to-local, align 4
  %v0_c938 = load i32, i32* @r4, align 4
  %v5_c940 = inttoptr i32 %v0_c934 to i32*
  %v6_c940 = call i32 @function_a4e8(i32 %v0_c938, i32* %v5_c940, i32 6, i32 65535)
  %v0_c948 = load i32, i32* @r5, align 4
  store i32 %v0_c948, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c940, i32* @r7, align 4
  %v0_c958 = load i32, i32* @r4, align 4
  %v4_c95c = inttoptr i32 %v0_c948 to i32*
  %v5_c95c = call i32 @function_a4e8(i32 %v0_c958, i32* %v4_c95c, i32 7, i32 65535)
  %v0_c964 = load i32, i32* @r5, align 4
  store i32 %v0_c964, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c95c, i32* @r6, align 4
  %v0_c974 = load i32, i32* @r4, align 4
  %v4_c978 = inttoptr i32 %v0_c964 to i32*
  %v5_c978 = call i32 @function_a4e8(i32 %v0_c974, i32* %v4_c978, i32 17, i32 65535)
  %v0_c984 = load i32, i32* @r5, align 4
  store i32 %v0_c984, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_c990 = load i32, i32* @r4, align 4
  %v5_c994 = inttoptr i32 %v0_c984 to i32*
  %v6_c994 = call i32 @function_a4e8(i32 %v0_c990, i32* %v5_c994, i32 18, i32 65535)
  %v0_c998 = load i32, i32* @r5, align 4
  store i32 %v0_c998, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c9a8 = load i32, i32* @r4, align 4
  %v5_c9ac = inttoptr i32 %v0_c998 to i32*
  %v6_c9ac = call i32 @function_a4e8(i32 %v0_c9a8, i32* %v5_c9ac, i32 11, i32 0)
  %v0_c9b0 = load i32, i32* @r5, align 4
  store i32 %v0_c9b0, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c9c0 = load i32, i32* @r4, align 4
  %v5_c9c4 = inttoptr i32 %v0_c9b0 to i32*
  %v6_c9c4 = call i32 @function_a4e8(i32 %v0_c9c0, i32* %v5_c9c4, i32 12, i32 1)
  %v0_c9c8 = load i32, i32* @r5, align 4
  store i32 %v0_c9c8, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c9d8 = load i32, i32* @r4, align 4
  %v5_c9dc = inttoptr i32 %v0_c9c8 to i32*
  %v6_c9dc = call i32 @function_a4e8(i32 %v0_c9d8, i32* %v5_c9dc, i32 13, i32 0)
  %v0_c9e0 = load i32, i32* @r5, align 4
  store i32 %v0_c9e0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c9f0 = load i32, i32* @r4, align 4
  %v5_c9f4 = inttoptr i32 %v0_c9e0 to i32*
  %v6_c9f4 = call i32 @function_a4e8(i32 %v0_c9f0, i32* %v5_c9f4, i32 14, i32 0)
  %v0_c9f8 = load i32, i32* @r5, align 4
  store i32 %v0_c9f8, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ca08 = load i32, i32* @r4, align 4
  %v5_ca0c = inttoptr i32 %v0_c9f8 to i32*
  %v6_ca0c = call i32 @function_a4e8(i32 %v0_ca08, i32* %v5_ca0c, i32 15, i32 0)
  %v0_ca10 = load i32, i32* @r5, align 4
  store i32 %v0_ca10, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ca20 = load i32, i32* @r4, align 4
  %v5_ca24 = inttoptr i32 %v0_ca10 to i32*
  %v6_ca24 = call i32 @function_a4e8(i32 %v0_ca20, i32* %v5_ca24, i32 16, i32 0)
  %v0_ca28 = load i32, i32* @r5, align 4
  store i32 %v0_ca28, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_ca38 = load i32, i32* @r4, align 4
  %v5_ca3c = inttoptr i32 %v0_ca28 to i32*
  %v6_ca3c = call i32 @function_a4e8(i32 %v0_ca38, i32* %v5_ca3c, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ca4c = load i32, i32* @r5, align 4
  store i32 %v0_ca4c, i32* %r1.global-to-local, align 4
  %v0_ca50 = load i32, i32* @r4, align 4
  %v4_ca54 = inttoptr i32 %v0_ca4c to i32*
  %v5_ca54 = call i32 @function_a4e8(i32 %v0_ca50, i32* %v4_ca54, i32 1, i32 1)
  %v2_ca60 = load i32, i32* @global_var_1f858.88, align 4
  store i32 %v2_ca60, i32* %r3.global-to-local, align 4
  %v1_ca64 = urem i32 %v5_ca54, 256
  store i32 %v1_ca64, i32* %ip.global-to-local, align 4
  %v0_ca68 = load i32, i32* @r5, align 4
  store i32 %v0_ca68, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_ca70 = load i32, i32* @r4, align 4
  %v5_ca78 = inttoptr i32 %v0_ca68 to i32*
  %v6_ca78 = call i32 @function_a47c(i32 %v0_ca70, i32* %v5_ca78, i32 25, i32 %v2_ca60, i32 %v1_ca64)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_ca8c = call i32 @function_14b30(i32 2, i32 3, i32 6)
  %v7_ca90 = icmp eq i32 %v3_ca8c, -1
  store i1 %v7_ca90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ca90, label %dec_label_pc_cec8, label %dec_label_pc_ca9c

dec_label_pc_ca9c:                                ; preds = %dec_label_pc_c888
  store i32 1, i32* %stack_var_-40, align 4
  %v6_caa4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_caa4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_cab8 = call i32 @function_14b00(i32 %v3_ca8c, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_cabc = icmp eq i32 %v6_cab8, -1
  store i1 %v7_cabc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cabc, label %dec_label_pc_cec0, label %dec_label_pc_cac4

dec_label_pc_cac4:                                ; preds = %dec_label_pc_ca9c
  %v0_cac4 = load i32, i32* @r8, align 4
  %v0_cac8 = load i32, i32* @r7, align 4
  %v0_cacc = load i32, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_cad4 = urem i32 %v0_cac4, 65536
  store i32 %v3_cad4, i32* %r2.global-to-local, align 4
  %v3_cad8 = urem i32 %v0_cac8, 65536
  store i32 %v3_cad8, i32* %r3.global-to-local, align 4
  %v3_cadc = urem i32 %v0_cacc, 65536
  store i32 %v3_cadc, i32* %ip.global-to-local, align 4
  %v0_cae0 = load i32, i32* @fp, align 4
  %v2_cae0 = icmp eq i32 %v0_cae0, 0
  store i1 %v2_cae0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp75 = icmp slt i32 %v0_cae0, 1
  br i1 %tmp75, label %dec_label_pc_cfe0, label %dec_label_pc_caf8

dec_label_pc_caf8:                                ; preds = %dec_label_pc_cac4
  %v1_cb00 = add i32 %v6_ca3c, 40
  %tmp76 = mul i32 %v1_cb00, 256
  %v1_cb14 = urem i32 %v0_cac8, 256
  %v1_cb18 = and i32 %tmp76, 65280
  %v3_cb1c = mul nuw nsw i32 %v1_cb14, 256
  %v1_cb24 = urem i32 %v0_cacc, 256
  %tmp77 = udiv i32 %v0_cacc, 256
  %v3_cb28 = urem i32 %tmp77, 256
  %tmp78 = udiv i32 %v1_cb00, 256
  %v4_cb2c = urem i32 %tmp78, 256
  %v5_cb2c = or i32 %v4_cb2c, %v1_cb18
  store i32 %v5_cb2c, i32* @lr, align 4
  %tmp79 = udiv i32 %v0_cac8, 256
  %v4_cb30 = urem i32 %tmp79, 256
  %v5_cb30 = or i32 %v4_cb30, %v3_cb1c
  store i32 %v5_cb30, i32* @sl, align 4
  %v4_cb34 = mul nuw nsw i32 %v1_cb24, 256
  %v5_cb34 = or i32 %v4_cb34, %v3_cb28
  store i32 %v5_cb34, i32* @r6, align 4
  %tmp80 = udiv i32 %v0_cac4, 256
  %v3_cb44 = urem i32 %tmp80, 256
  %v1_cb48 = urem i32 %v0_cac4, 256
  %tmp81 = mul i32 %v5_c978, 256
  %v1_cb50 = and i32 %tmp81, 65280
  %v1_cb54 = urem i32 %v6_c9ac, 2
  %v1_cb58 = urem i32 %v6_c9c4, 2
  %v1_cb5c = urem i32 %v6_c9dc, 2
  %tmp82 = udiv i32 %v5_c978, 256
  %v4_cb60 = urem i32 %tmp82, 256
  %v5_cb60 = or i32 %v4_cb60, %v1_cb50
  store i32 %v5_cb60, i32* @r8, align 4
  %v1_cb80 = urem i32 %v6_c9f4, 2
  %v1_cb84 = urem i32 %v6_ca0c, 2
  %v1_cb88 = urem i32 %v6_ca24, 2
  %v1_cb8c = urem i32 %v6_c9dc, 256
  %v4_cb90 = mul nuw nsw i32 %v1_cb48, 256
  %v5_cb90 = or i32 %v4_cb90, %v3_cb44
  store i32 %v5_cb90, i32* @r5, align 4
  %v3_cba425 = udiv i32 %v1_cb18, 256
  store i32 %v3_cba425, i32* %r3.global-to-local, align 4
  store i32 %v1_cb48, i32* %ip.global-to-local, align 4
  store i32 %v1_cb14, i32* %r1.global-to-local, align 4
  store i32 %v1_cb24, i32* %r2.global-to-local, align 4
  %v5_cbc0 = trunc i32 %v0_cac8 to i8
  store i32 0, i32* @r4, align 4
  %sext8 = mul i32 %v5_c8fc, 16777216
  %v4_cc1c = sdiv i32 %sext8, 16777216
  %sext9 = mul i32 %v0_cac4, 16777216
  %v4_cc28 = sdiv i32 %sext9, 16777216
  %sext10 = mul i32 %tmp78, 16777216
  %v4_cc3c = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %v1_cb00, 16777216
  %v4_cc40 = sdiv i32 %sext11, 16777216
  %tmp = sub nsw i32 0, %v1_cb54
  %v4_cc90 = and i32 %tmp, 32
  %tmp93 = sub nsw i32 0, %v1_cb58
  %v4_cca4 = and i32 %tmp93, 16
  %tmp94 = sub nsw i32 0, %v1_cb5c
  %v4_ccb8 = and i32 %tmp94, 8
  %tmp95 = sub nsw i32 0, %v1_cb80
  %v4_cccc = and i32 %tmp95, 4
  %tmp96 = sub nsw i32 0, %v1_cb84
  %v3_cce0 = and i32 %tmp96, 2
  %sext12 = mul i32 %v0_cacc, 16777216
  %v7_cd10 = sdiv i32 %sext12, 16777216
  %v1_cc24 = trunc i32 %v4_cc1c to i8
  %extract.t = trunc i32 %v4_cc28 to i8
  %v3_cd10 = sext i8 %v5_cbc0 to i32
  %v2_cd34 = icmp eq i32 %v1_cb8c, 0
  br label %dec_label_pc_cbcc

dec_label_pc_cbcc:                                ; preds = %bb89, %dec_label_pc_caf8
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_cbd8 = call i32 @function_14e34(i32 1510, i32 1)
  store i32 %v2_c8a8, i32* %ip.global-to-local, align 4
  %v2_cbe4 = load i32, i32* @r4, align 4
  %v5_cbe4 = mul i32 %v2_cbe4, 4
  %v6_cbe4 = add i32 %v5_cbe4, %v2_c8a8
  %v7_cbe4 = inttoptr i32 %v6_cbe4 to i32*
  store i32 %v2_cbd8, i32* %v7_cbe4, align 4
  %v3_cbe8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cbe8, i32* %r3.global-to-local, align 4
  %v0_cbec = load i32, i32* %ip.global-to-local, align 4
  %v4_cbec = mul i32 %v3_cbe8, 4
  %v5_cbec = add i32 %v0_cbec, %v4_cbec
  %v6_cbec = inttoptr i32 %v5_cbec to i32*
  %v7_cbec = load i32, i32* %v6_cbec, align 4
  store i32 %v7_cbec, i32* @r7, align 4
  %v1_cbf0 = inttoptr i32 %v7_cbec to i8*
  %v2_cbf0 = load i8, i8* %v1_cbf0, align 1
  %tmp97 = urem i8 %v2_cbf0, 16
  %v1_cbf4 = zext i8 %tmp97 to i32
  %v1_cbf8 = or i32 %v1_cbf4, 64
  store i32 %v1_cbf8, i32* %r2.global-to-local, align 4
  %v1_cbfc = trunc i32 %v1_cbf8 to i8
  store i8 %v1_cbfc, i8* %v1_cbf0, align 1
  %v0_cc00 = load i32, i32* @r7, align 4
  %v1_cc00 = inttoptr i32 %v0_cc00 to i8*
  %v2_cc00 = load i8, i8* %v1_cc00, align 1
  %v1_cc04 = and i8 %v2_cc00, -16
  %v1_cc08 = or i8 %v1_cc04, 5
  store i32 %v1_c928, i32* %r1.global-to-local, align 4
  store i8 %v1_cc08, i8* %v1_cc00, align 1
  %v2_cc18 = load i32, i32* @r7, align 4
  %v3_cc18 = add i32 %v2_cc18, 1
  %v4_cc18 = inttoptr i32 %v3_cc18 to i8*
  store i8 %v5_c8e0, i8* %v4_cc18, align 1
  store i32 %v4_cc1c, i32* %r3.global-to-local, align 4
  %v0_cc20 = load i32, i32* %r1.global-to-local, align 4
  %v2_cc20 = icmp eq i32 %v0_cc20, 0
  store i1 %v2_cc20, i1* %cpsr_z.global-to-local, align 1
  %v2_cc24 = load i32, i32* @r7, align 4
  %v3_cc24 = add i32 %v2_cc24, 8
  %v4_cc24 = inttoptr i32 %v3_cc24 to i8*
  store i8 %v1_cc24, i8* %v4_cc24, align 1
  store i32 %v4_cc28, i32* %r2.global-to-local, align 4
  %v0_cc2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cc2c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_cbcc
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_cc30 = load i32, i32* @r7, align 4
  %v4_cc30 = add i32 %v3_cc30, 6
  %v5_cc30 = inttoptr i32 %v4_cc30 to i8*
  store i8 64, i8* %v5_cc30, align 1
  %v0_cc38.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t26 = trunc i32 %v0_cc38.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_cbcc, %bb
  %v0_cc38.off0 = phi i8 [ %extract.t, %dec_label_pc_cbcc ], [ %extract.t26, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_cc38 = load i32, i32* @r7, align 4
  %v3_cc38 = add i32 %v2_cc38, 5
  %v4_cc38 = inttoptr i32 %v3_cc38 to i8*
  store i8 %v0_cc38.off0, i8* %v4_cc38, align 1
  store i32 %v4_cc3c, i32* %ip.global-to-local, align 4
  store i32 %v4_cc40, i32* %r1.global-to-local, align 4
  %v0_cc44 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cc44, label %bb84, label %bb83

bb83:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %.thread, %bb83
  %v0_cc48 = load i32, i32* %r3.global-to-local, align 4
  %v1_cc48 = trunc i32 %v0_cc48 to i8
  %v2_cc48 = load i32, i32* @r7, align 4
  %v3_cc48 = add i32 %v2_cc48, 9
  %v4_cc48 = inttoptr i32 %v3_cc48 to i8*
  store i8 %v1_cc48, i8* %v4_cc48, align 1
  %v0_cc4c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cc4c, label %bb86, label %bb85

bb85:                                             ; preds = %bb84
  %v1_cc4c = load i32, i32* %r2.global-to-local, align 4
  %v2_cc4c = trunc i32 %v1_cc4c to i8
  %v3_cc4c = load i32, i32* @r7, align 4
  %v4_cc4c = add i32 %v3_cc4c, 7
  %v5_cc4c = inttoptr i32 %v4_cc4c to i8*
  store i8 %v2_cc4c, i8* %v5_cc4c, align 1
  br label %bb86

bb86:                                             ; preds = %bb84, %bb85
  %v3_cc50 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cc50, i32* %r2.global-to-local, align 4
  %v0_cc54 = load i32, i32* %ip.global-to-local, align 4
  %v1_cc54 = trunc i32 %v0_cc54 to i8
  %v2_cc54 = load i32, i32* @r7, align 4
  %v3_cc54 = add i32 %v2_cc54, 2
  %v4_cc54 = inttoptr i32 %v3_cc54 to i8*
  store i8 %v1_cc54, i8* %v4_cc54, align 1
  store i32 %v6_ca78, i32* %ip.global-to-local, align 4
  %v0_cc5c = load i32, i32* %r2.global-to-local, align 4
  %v3_cc5c = mul i32 %v0_cc5c, 32
  store i32 %v3_cc5c, i32* %r3.global-to-local, align 4
  %v1_cc60 = load i32, i32* @r7, align 4
  %v2_cc60 = add i32 %v1_cc60, 12
  %v3_cc60 = inttoptr i32 %v2_cc60 to i32*
  store i32 %v6_ca78, i32* %v3_cc60, align 4
  %v0_cc64 = load i32, i32* %r3.global-to-local, align 4
  %v1_cc64 = load i32, i32* %r2.global-to-local, align 4
  %tmp98 = mul i32 %v1_cc64, -8
  %v5_cc64 = add i32 %v0_cc64, %tmp98
  %v1_cc68 = load i32, i32* @sb, align 4
  %v2_cc68 = add i32 %v1_cc68, %v5_cc64
  store i32 %v2_cc68, i32* %r3.global-to-local, align 4
  %v1_cc6c = add i32 %v2_cc68, 16
  %v2_cc6c = inttoptr i32 %v1_cc6c to i32*
  %v3_cc6c = load i32, i32* %v2_cc6c, align 4
  store i32 %v3_cc6c, i32* %r2.global-to-local, align 4
  %v0_cc70 = load i32, i32* %r1.global-to-local, align 4
  %v1_cc70 = trunc i32 %v0_cc70 to i8
  %v2_cc70 = load i32, i32* @r7, align 4
  %v3_cc70 = add i32 %v2_cc70, 3
  %v4_cc70 = inttoptr i32 %v3_cc70 to i8*
  store i8 %v1_cc70, i8* %v4_cc70, align 1
  %v0_cc74 = load i32, i32* @r5, align 4
  %v1_cc74 = trunc i32 %v0_cc74 to i8
  %v2_cc74 = load i32, i32* @r7, align 4
  %v3_cc74 = add i32 %v2_cc74, 4
  %v4_cc74 = inttoptr i32 %v3_cc74 to i8*
  store i8 %v1_cc74, i8* %v4_cc74, align 1
  %v0_cc78 = load i32, i32* %r2.global-to-local, align 4
  %v1_cc78 = load i32, i32* @r7, align 4
  %v2_cc78 = add i32 %v1_cc78, 16
  %v3_cc78 = inttoptr i32 %v2_cc78 to i32*
  store i32 %v0_cc78, i32* %v3_cc78, align 4
  %v0_cc7c = load i32, i32* @sl, align 4
  %v1_cc7c = trunc i32 %v0_cc7c to i8
  %v2_cc7c = load i32, i32* @r7, align 4
  %v3_cc7c = add i32 %v2_cc7c, 20
  %v4_cc7c = inttoptr i32 %v3_cc7c to i8*
  store i8 %v1_cc7c, i8* %v4_cc7c, align 1
  %v0_cc80 = load i32, i32* @r7, align 4
  %v1_cc80 = add i32 %v0_cc80, 20
  store i32 %v1_cc80, i32* @r4, align 4
  %v1_cc84 = add i32 %v0_cc80, 33
  %v2_cc84 = inttoptr i32 %v1_cc84 to i8*
  %v3_cc84 = load i8, i8* %v2_cc84, align 1
  %v4_cc84 = zext i8 %v3_cc84 to i32
  store i32 %v1_cb54, i32* %r1.global-to-local, align 4
  %v1_cc8c = and i32 %v4_cc84, 223
  %v5_cc90 = or i32 %v1_cc8c, %v4_cc90
  store i32 %v5_cc90, i32* %r3.global-to-local, align 4
  %v1_cc94 = trunc i32 %v5_cc90 to i8
  store i8 %v1_cc94, i8* %v2_cc84, align 1
  %v0_cc98 = load i32, i32* @r4, align 4
  %v1_cc98 = add i32 %v0_cc98, 13
  %v2_cc98 = inttoptr i32 %v1_cc98 to i8*
  %v3_cc98 = load i8, i8* %v2_cc98, align 1
  %v4_cc98 = zext i8 %v3_cc98 to i32
  store i32 %v1_cb58, i32* %r3.global-to-local, align 4
  %v1_cca0 = and i32 %v4_cc98, 239
  %v5_cca4 = or i32 %v1_cca0, %v4_cca4
  store i32 %v5_cca4, i32* %r2.global-to-local, align 4
  %v1_cca8 = trunc i32 %v5_cca4 to i8
  store i8 %v1_cca8, i8* %v2_cc98, align 1
  %v0_ccac = load i32, i32* @r4, align 4
  %v1_ccac = add i32 %v0_ccac, 13
  %v2_ccac = inttoptr i32 %v1_ccac to i8*
  %v3_ccac = load i8, i8* %v2_ccac, align 1
  %v4_ccac = zext i8 %v3_ccac to i32
  store i32 %v1_cb5c, i32* %ip.global-to-local, align 4
  %v1_ccb4 = and i32 %v4_ccac, 247
  %v5_ccb8 = or i32 %v1_ccb4, %v4_ccb8
  store i32 %v5_ccb8, i32* %r3.global-to-local, align 4
  %v1_ccbc = trunc i32 %v5_ccb8 to i8
  store i8 %v1_ccbc, i8* %v2_ccac, align 1
  %v0_ccc0 = load i32, i32* @r4, align 4
  %v1_ccc0 = add i32 %v0_ccc0, 13
  %v2_ccc0 = inttoptr i32 %v1_ccc0 to i8*
  %v3_ccc0 = load i8, i8* %v2_ccc0, align 1
  %v4_ccc0 = zext i8 %v3_ccc0 to i32
  store i32 %v1_cb80, i32* %r1.global-to-local, align 4
  %v1_ccc8 = and i32 %v4_ccc0, 251
  %v5_cccc = or i32 %v1_ccc8, %v4_cccc
  store i32 %v5_cccc, i32* %r2.global-to-local, align 4
  %v1_ccd0 = trunc i32 %v5_cccc to i8
  store i8 %v1_ccd0, i8* %v2_ccc0, align 1
  %v0_ccd4 = load i32, i32* @r4, align 4
  %v1_ccd4 = add i32 %v0_ccd4, 13
  %v2_ccd4 = inttoptr i32 %v1_ccd4 to i8*
  %v3_ccd4 = load i8, i8* %v2_ccd4, align 1
  %v4_ccd4 = zext i8 %v3_ccd4 to i32
  store i32 %v1_cb84, i32* %r2.global-to-local, align 4
  %v1_ccdc = and i32 %v4_ccd4, 253
  %v4_cce0 = or i32 %v1_ccdc, %v3_cce0
  store i32 %v4_cce0, i32* %r3.global-to-local, align 4
  %v1_cce4 = trunc i32 %v4_cce0 to i8
  store i8 %v1_cce4, i8* %v2_ccd4, align 1
  %v0_cce8 = load i32, i32* @r4, align 4
  %v1_cce8 = add i32 %v0_cce8, 12
  %v2_cce8 = inttoptr i32 %v1_cce8 to i8*
  %v3_cce8 = load i8, i8* %v2_cce8, align 1
  %v4_cce8 = zext i8 %v3_cce8 to i32
  store i32 %v4_cce8, i32* %r2.global-to-local, align 4
  %v1_ccec = add i32 %v0_cce8, 13
  %v2_ccec = inttoptr i32 %v1_ccec to i8*
  %v3_ccec = load i8, i8* %v2_ccec, align 1
  %v4_ccec = zext i8 %v3_ccec to i32
  store i32 %v1_cb88, i32* %ip.global-to-local, align 4
  %tmp99 = urem i8 %v3_cce8, 16
  %v1_ccf4 = zext i8 %tmp99 to i32
  %v1_ccf8 = and i32 %v4_ccec, 254
  %v2_ccfc = or i32 %v1_ccf8, %v1_cb88
  store i32 %v2_ccfc, i32* %r3.global-to-local, align 4
  %v1_cd00 = or i32 %v1_ccf4, 80
  store i32 %v1_cd00, i32* %r2.global-to-local, align 4
  %v1_cd04 = trunc i32 %v2_ccfc to i8
  store i8 %v1_cd04, i8* %v2_ccec, align 1
  %v0_cd08 = load i32, i32* %r2.global-to-local, align 4
  %v1_cd08 = trunc i32 %v0_cd08 to i8
  %v2_cd08 = load i32, i32* @r4, align 4
  %v3_cd08 = add i32 %v2_cd08, 12
  %v4_cd08 = inttoptr i32 %v3_cd08 to i8*
  store i8 %v1_cd08, i8* %v4_cd08, align 1
  store i32 %v3_cd10, i32* %r1.global-to-local, align 4
  store i32 %v7_cd10, i32* %r2.global-to-local, align 4
  %v2_cd14 = load i32, i32* @r4, align 4
  %v3_cd14 = add i32 %v2_cd14, 1
  %v4_cd14 = inttoptr i32 %v3_cd14 to i8*
  store i8 %v5_cbc0, i8* %v4_cd14, align 1
  %v0_cd18 = load i32, i32* %r2.global-to-local, align 4
  %v1_cd18 = trunc i32 %v0_cd18 to i8
  %v2_cd18 = load i32, i32* @r4, align 4
  %v3_cd18 = add i32 %v2_cd18, 3
  %v4_cd18 = inttoptr i32 %v3_cd18 to i8*
  store i8 %v1_cd18, i8* %v4_cd18, align 1
  %v0_cd1c = load i32, i32* @r6, align 4
  %v1_cd1c = trunc i32 %v0_cd1c to i8
  %v2_cd1c = load i32, i32* @r4, align 4
  %v3_cd1c = add i32 %v2_cd1c, 2
  %v4_cd1c = inttoptr i32 %v3_cd1c to i8*
  store i8 %v1_cd1c, i8* %v4_cd1c, align 1
  %v0_cd20 = load i32, i32* @r8, align 4
  %v1_cd20 = load i32, i32* @r4, align 4
  %v2_cd20 = add i32 %v1_cd20, 4
  %v3_cd20 = inttoptr i32 %v2_cd20 to i32*
  store i32 %v0_cd20, i32* %v3_cd20, align 4
  %v0_cd24 = call i32 @function_10a44()
  store i32 %v1_cb8c, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_cd24, 16777216
  %v1_cd2c = sdiv i32 %sext, 16777216
  store i32 %v1_cd2c, i32* %r2.global-to-local, align 4
  %v3_cd30 = ashr i32 %sext, 31
  store i32 %v3_cd30, i32* %r3.global-to-local, align 4
  store i1 %v2_cd34, i1* %cpsr_z.global-to-local, align 1
  %v1_cd38 = trunc i32 %v3_cd30 to i8
  %v2_cd38 = load i32, i32* @r4, align 4
  %v3_cd38 = add i32 %v2_cd38, 15
  %v4_cd38 = inttoptr i32 %v3_cd38 to i8*
  store i8 %v1_cd38, i8* %v4_cd38, align 1
  %v0_cd3c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_cd48.pre = load i32, i32* @r4, align 4
  br i1 %v0_cd3c, label %.thread13, label %bb87

bb87:                                             ; preds = %bb86
  %v2_cd3c = add i32 %v2_cd48.pre, 13
  %v3_cd3c = inttoptr i32 %v2_cd3c to i8*
  %v4_cd3c = load i8, i8* %v3_cd3c, align 1
  %v5_cd3c = zext i8 %v4_cd3c to i32
  %v2_cd40 = or i32 %v5_cd3c, 8
  store i32 %v2_cd40, i32* %r3.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %bb86, %bb87
  store i32 %v6_ca3c, i32* @r1, align 4
  %v0_cd48 = load i32, i32* %r2.global-to-local, align 4
  %v1_cd48 = trunc i32 %v0_cd48 to i8
  %v3_cd48 = add i32 %v2_cd48.pre, 14
  %v4_cd48 = inttoptr i32 %v3_cd48 to i8*
  store i8 %v1_cd48, i8* %v4_cd48, align 1
  %v0_cd4c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cd4c, label %bb89, label %bb88

bb88:                                             ; preds = %.thread13
  %v1_cd4c = load i32, i32* %r3.global-to-local, align 4
  %v2_cd4c = trunc i32 %v1_cd4c to i8
  %v3_cd4c = load i32, i32* @r4, align 4
  %v4_cd4c = add i32 %v3_cd4c, 13
  %v5_cd4c = inttoptr i32 %v4_cd4c to i8*
  store i8 %v2_cd4c, i8* %v5_cd4c, align 1
  br label %bb89

bb89:                                             ; preds = %.thread13, %bb88
  %v0_cd50 = load i32, i32* @r7, align 4
  %v1_cd50 = add i32 %v0_cd50, 40
  %v1_cd54 = inttoptr i32 %v1_cd50 to i8*
  %v2_cd54 = call i32 @function_10c20(i8* %v1_cd54)
  %v3_cd58 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cd58, i32* %r3.global-to-local, align 4
  %v1_cd5c = add i32 %v3_cd58, 1
  store i32 %v1_cd5c, i32* @r4, align 4
  %v0_cd60 = load i32, i32* @fp, align 4
  %v9_cd60 = icmp eq i32 %v0_cd60, %v1_cd5c
  store i1 %v9_cd60, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cd5c, i32* %stack_var_-40, align 4
  %v8_cd68 = icmp sgt i32 %v0_cd60, %v1_cd5c
  br i1 %v8_cd68, label %dec_label_pc_cbcc, label %dec_label_pc_cd6c

dec_label_pc_cd6c:                                ; preds = %bb89
  store i32 %v6_ca3c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_cd74.preheader

dec_label_pc_cd74.preheader:                      ; preds = %dec_label_pc_cd6c, %dec_label_pc_cfe0
  %v0_cd7417 = phi i32 [ %v0_cd60, %dec_label_pc_cd6c ], [ %v0_cae0, %dec_label_pc_cfe0 ]
  %stack_var_-168.0.ph = phi i32 [ %v1_cb00, %dec_label_pc_cd6c ], [ %v1_cfe8, %dec_label_pc_cfe0 ]
  %storemerge = add i32 %v6_ca3c, 20
  store i32 %storemerge, i32* @r8, align 4
  %v3_cf2c = icmp eq i32 %v6_ca78, -1
  %v8_cf2c = icmp eq i32 %v6_ca78, -1
  %v3_cf48 = icmp eq i32 %v3_cad4, 65535
  %v2_cfc4 = icmp eq i32 %v1_ca64, 0
  br label %dec_label_pc_cd74

dec_label_pc_cd74:                                ; preds = %dec_label_pc_ce1c, %dec_label_pc_cd74.preheader
  %v0_cd74 = phi i32 [ %v0_cd7417, %dec_label_pc_cd74.preheader ], [ %v0_ceb0, %dec_label_pc_ce1c ]
  %v2_cd74 = icmp eq i32 %v0_cd74, 0
  store i1 %v2_cd74, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp90 = icmp slt i32 %v0_cd74, 1
  br label %dec_label_pc_cd7c

dec_label_pc_cd7c:                                ; preds = %dec_label_pc_cd7c, %dec_label_pc_cd74
  br i1 %tmp90, label %dec_label_pc_cd7c, label %dec_label_pc_cd80

dec_label_pc_cd80:                                ; preds = %dec_label_pc_cd7c
  %v0_cd80 = load i32, i32* @r8, align 4
  %v3_cd80 = mul i32 %v0_cd80, 65536
  store i32 %v3_cd80, i32* %r2.global-to-local, align 4
  %tmp91 = mul i32 %v0_cd80, 256
  %v1_cd88 = and i32 %tmp91, 65280
  store i32 %v1_cd88, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %tmp92 = udiv i32 %v0_cd80, 256
  %v4_cd94 = urem i32 %tmp92, 256
  %v5_cd94 = or i32 %v4_cd94, %v1_cd88
  store i32 %v5_cd94, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_cd9c

dec_label_pc_cd9c:                                ; preds = %dec_label_pc_ce1c, %dec_label_pc_cd80
  %v1_cdb0 = phi i32 [ %v1_ceac, %dec_label_pc_ce1c ], [ 0, %dec_label_pc_cd80 ]
  %v5_cda0 = mul i32 %v1_cdb0, 24
  %v1_cda4 = load i32, i32* @sb, align 4
  %v2_cda4 = add i32 %v1_cda4, %v5_cda0
  store i32 %v2_cda4, i32* %r3.global-to-local, align 4
  store i32 %v2_c8a8, i32* %ip.global-to-local, align 4
  %v1_cdac = add i32 %v2_cda4, 20
  %v2_cdac = inttoptr i32 %v1_cdac to i8*
  %v3_cdac = load i8, i8* %v2_cdac, align 1
  %v4_cdac = zext i8 %v3_cdac to i32
  store i32 %v4_cdac, i32* %r2.global-to-local, align 4
  %v4_cdb0 = mul i32 %v1_cdb0, 4
  %v5_cdb0 = add i32 %v4_cdb0, %v2_c8a8
  %v6_cdb0 = inttoptr i32 %v5_cdb0 to i32*
  %v7_cdb0 = load i32, i32* %v6_cdb0, align 4
  store i32 %v7_cdb0, i32* @r5, align 4
  %v7_cdb4 = icmp eq i8 %v3_cdac, 31
  store i1 %v7_cdb4, i1* %cpsr_z.global-to-local, align 1
  %v1_cdb8 = add i32 %v7_cdb0, 20
  store i32 %v1_cdb8, i32* @r6, align 4
  %tmp100 = icmp ult i8 %v3_cdac, 32
  br i1 %tmp100, label %dec_label_pc_ced0, label %dec_label_pc_cdc0

dec_label_pc_cdc0:                                ; preds = %dec_label_pc_cd9c
  store i32 %v6_ca78, i32* %r1.global-to-local, align 4
  store i1 %v8_cf2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_cf2c, label %dec_label_pc_cf38, label %dec_label_pc_cdcc

dec_label_pc_cdcc:                                ; preds = %dec_label_pc_ced0, %dec_label_pc_cdc0
  store i32 %v3_cad4, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_cf48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_cf48, label %dec_label_pc_cf54, label %dec_label_pc_cde0

dec_label_pc_cde0:                                ; preds = %dec_label_pc_cf38.dec_label_pc_cde0_crit_edge, %dec_label_pc_cdcc
  %v1_cde4 = phi i32 [ %v1_cde4.pre, %dec_label_pc_cf38.dec_label_pc_cde0_crit_edge ], [ 65535, %dec_label_pc_cdcc ]
  store i32 %v3_cad8, i32* %r3.global-to-local, align 4
  %v9_cde4 = icmp eq i32 %v3_cad8, %v1_cde4
  store i1 %v9_cde4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cde4, label %dec_label_pc_cf70, label %dec_label_pc_cdec

dec_label_pc_cdec:                                ; preds = %dec_label_pc_cf54.dec_label_pc_cdec_crit_edge, %dec_label_pc_cde0
  %v1_cdf0 = phi i32 [ %v1_cdf0.pre, %dec_label_pc_cf54.dec_label_pc_cdec_crit_edge ], [ %v1_cde4, %dec_label_pc_cde0 ]
  store i32 %v3_cadc, i32* %ip.global-to-local, align 4
  %v9_cdf0 = icmp eq i32 %v3_cadc, %v1_cdf0
  store i1 %v9_cdf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cdf0, label %dec_label_pc_cf8c, label %dec_label_pc_cdf8

dec_label_pc_cdf8:                                ; preds = %dec_label_pc_cf70.dec_label_pc_cdf8_crit_edge, %dec_label_pc_cdec
  %v1_cdfc = phi i32 [ %v1_cdfc.pre, %dec_label_pc_cf70.dec_label_pc_cdf8_crit_edge ], [ %v1_cdf0, %dec_label_pc_cdec ]
  store i32 %v5_c978, i32* %r1.global-to-local, align 4
  %v9_cdfc = icmp eq i32 %v5_c978, %v1_cdfc
  store i1 %v9_cdfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cdfc, label %dec_label_pc_cfa8, label %dec_label_pc_ce04

dec_label_pc_ce04:                                ; preds = %dec_label_pc_cf8c.dec_label_pc_ce04_crit_edge, %dec_label_pc_cdf8
  %v1_ce08 = phi i32 [ %v1_ce08.pre, %dec_label_pc_cf8c.dec_label_pc_ce04_crit_edge ], [ %v1_cdfc, %dec_label_pc_cdf8 ]
  store i32 %v6_c994, i32* %r2.global-to-local, align 4
  %v9_ce08 = icmp eq i32 %v6_c994, %v1_ce08
  store i1 %v9_ce08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ce08, label %dec_label_pc_cfbc, label %dec_label_pc_ce10

dec_label_pc_ce10:                                ; preds = %dec_label_pc_cfa8, %dec_label_pc_ce04
  store i32 %v1_ca64, i32* %r3.global-to-local, align 4
  store i1 %v2_cfc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cfc4, label %dec_label_pc_ce1c, label %dec_label_pc_cfd0

dec_label_pc_ce1c:                                ; preds = %dec_label_pc_ce10, %dec_label_pc_cfbc, %dec_label_pc_cfd0
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ce20 = load i32, i32* @r7, align 4
  %v1_ce20 = trunc i32 %v0_ce20 to i8
  %v2_ce20 = load i32, i32* @r5, align 4
  %v3_ce20 = add i32 %v2_ce20, 10
  %v4_ce20 = inttoptr i32 %v3_ce20 to i8*
  store i8 %v1_ce20, i8* %v4_ce20, align 1
  %v0_ce24 = load i32, i32* @r7, align 4
  %v1_ce24 = trunc i32 %v0_ce24 to i8
  %v2_ce24 = load i32, i32* @r5, align 4
  %v3_ce24 = add i32 %v2_ce24, 11
  %v4_ce24 = inttoptr i32 %v3_ce24 to i8*
  store i8 %v1_ce24, i8* %v4_ce24, align 1
  %v0_ce28 = load i32, i32* @r5, align 4
  store i32 %v0_ce28, i32* @r0, align 4
  %v2_ce2c = call i32 @function_f008(i32 %v0_ce28, i32 20)
  %v3_ce2c = trunc i32 %v2_ce2c to i8
  %v4_ce3028 = udiv i32 %v2_ce2c, 256
  %v1_ce34 = trunc i32 %v4_ce3028 to i8
  %v2_ce34 = load i32, i32* @r5, align 4
  %v3_ce34 = add i32 %v2_ce34, 11
  %v4_ce34 = inttoptr i32 %v3_ce34 to i8*
  store i8 %v1_ce34, i8* %v4_ce34, align 1
  %v3_ce38 = load i32, i32* @r5, align 4
  %v4_ce38 = add i32 %v3_ce38, 10
  %v5_ce38 = inttoptr i32 %v4_ce38 to i8*
  store i8 %v3_ce2c, i8* %v5_ce38, align 1
  %v0_ce3c = load i32, i32* @r6, align 4
  store i32 %v0_ce3c, i32* @r1, align 4
  %v0_ce40 = load i32, i32* @sl, align 4
  store i32 %v0_ce40, i32* %r2.global-to-local, align 4
  %v0_ce44 = load i32, i32* @r8, align 4
  store i32 %v0_ce44, i32* %r3.global-to-local, align 4
  %v0_ce48 = load i32, i32* @r7, align 4
  %v1_ce48 = trunc i32 %v0_ce48 to i8
  %v3_ce48 = add i32 %v0_ce3c, 16
  %v4_ce48 = inttoptr i32 %v3_ce48 to i8*
  store i8 %v1_ce48, i8* %v4_ce48, align 1
  %v0_ce4c = load i32, i32* @r7, align 4
  %v1_ce4c = trunc i32 %v0_ce4c to i8
  %v2_ce4c = load i32, i32* @r6, align 4
  %v3_ce4c = add i32 %v2_ce4c, 17
  %v4_ce4c = inttoptr i32 %v3_ce4c to i8*
  store i8 %v1_ce4c, i8* %v4_ce4c, align 1
  %v0_ce50 = load i32, i32* @r5, align 4
  %v4_ce54 = call i32 @function_f064(i32 %v0_ce50, i32 %v0_ce3c, i32 %v0_ce40, i32 %v0_ce44)
  %v5_ce54 = trunc i32 %v4_ce54 to i8
  %v4_ce5829 = udiv i32 %v4_ce54, 256
  %v1_ce5c = trunc i32 %v4_ce5829 to i8
  %v2_ce5c = load i32, i32* @r6, align 4
  %v3_ce5c = add i32 %v2_ce5c, 17
  %v4_ce5c = inttoptr i32 %v3_ce5c to i8*
  store i8 %v1_ce5c, i8* %v4_ce5c, align 1
  %v3_ce60 = load i32, i32* @r6, align 4
  %v4_ce60 = add i32 %v3_ce60, 16
  %v5_ce60 = inttoptr i32 %v4_ce60 to i8*
  store i8 %v5_ce54, i8* %v5_ce60, align 1
  %v3_ce64 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ce64, i32* %r3.global-to-local, align 4
  %v0_ce68 = load i32, i32* @r5, align 4
  %v1_ce68 = add i32 %v0_ce68, 20
  %v2_ce68 = inttoptr i32 %v1_ce68 to i32*
  %v3_ce68 = load i32, i32* %v2_ce68, align 4
  %v3_ce70 = udiv i32 %v3_ce68, 65536
  store i32 %v3_ce70, i32* %r2.global-to-local, align 4
  %v5_ce74 = mul i32 %v3_ce64, 24
  %v1_ce78 = load i32, i32* @sb, align 4
  %v2_ce78 = add i32 %v1_ce78, %v5_ce74
  store i32 %v2_ce78, i32* %ip.global-to-local, align 4
  %v3_ce7c27 = udiv i32 %v3_ce68, 16777216
  %v1_ce80 = trunc i32 %v3_ce7c27 to i8
  %v3_ce80 = add i32 %v2_ce78, 3
  %v4_ce80 = inttoptr i32 %v3_ce80 to i8*
  store i8 %v1_ce80, i8* %v4_ce80, align 1
  %v0_ce84 = load i32, i32* %r2.global-to-local, align 4
  %v1_ce84 = trunc i32 %v0_ce84 to i8
  %v2_ce84 = load i32, i32* %ip.global-to-local, align 4
  %v3_ce84 = add i32 %v2_ce84, 2
  %v4_ce84 = inttoptr i32 %v3_ce84 to i8*
  store i8 %v1_ce84, i8* %v4_ce84, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ce8c = load i32, i32* @r5, align 4
  store i32 %v0_ce8c, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-168.0.ph, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_ce9c = load i32, i32* %ip.global-to-local, align 4
  %v6_cea4 = inttoptr i32 %v0_ce8c to i32*
  %v7_cea4 = call i32 @function_14acc(i32 %v3_ca8c, i32* %v6_cea4, i32 %stack_var_-168.0.ph, i32 16384, i32 %v0_ce9c, i32 16)
  %v3_cea8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cea8, i32* %r3.global-to-local, align 4
  %v1_ceac = add i32 %v3_cea8, 1
  %v0_ceb0 = load i32, i32* @fp, align 4
  %v9_ceb0 = icmp eq i32 %v0_ceb0, %v1_ceac
  store i1 %v9_ceb0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ceac, i32* %stack_var_-40, align 4
  %v7_ceb8 = icmp sgt i32 %v0_ceb0, %v1_ceac
  br i1 %v7_ceb8, label %dec_label_pc_cd9c, label %dec_label_pc_cd74

dec_label_pc_cec0:                                ; preds = %dec_label_pc_ca9c
  %v1_cec4 = call i32 @function_14234(i32 %v3_ca8c)
  br label %dec_label_pc_cec8

dec_label_pc_cec8:                                ; preds = %dec_label_pc_c888, %dec_label_pc_cec0
  %v29_cecc = phi i32 [ %v3_ca8c, %dec_label_pc_c888 ], [ %v1_cec4, %dec_label_pc_cec0 ]
  ret i32 %v29_cecc

dec_label_pc_ced0:                                ; preds = %dec_label_pc_cd9c
  %v1_ced0 = add i32 %v2_cda4, 16
  %v2_ced0 = inttoptr i32 %v1_ced0 to i32*
  %v3_ced0 = load i32, i32* %v2_ced0, align 4
  %v0_ced4 = call i32 @function_10a44()
  %v3_ced8 = load i32, i32* %stack_var_-40, align 4
  %v5_cee0 = mul i32 %v3_ced8, 24
  %v1_cee8 = load i32, i32* @sb, align 4
  %v2_cee8 = add i32 %v1_cee8, %v5_cee0
  store i32 %v2_cee8, i32* %r1.global-to-local, align 4
  %v1_ceec = and i32 %v3_ced0, 65280
  store i32 %v1_ceec, i32* %r3.global-to-local, align 4
  %v1_cee4 = udiv i32 %v3_ced0, 256
  %v3_cef0 = and i32 %v1_cee4, 65280
  store i32 %v3_cef0, i32* %r2.global-to-local, align 4
  %v3_cef4 = mul i32 %v3_ced0, 16777216
  store i32 %v3_cef4, i32* %ip.global-to-local, align 4
  %v1_cef8 = add i32 %v2_cee8, 20
  %v2_cef8 = inttoptr i32 %v1_cef8 to i8*
  %v3_cef8 = load i8, i8* %v2_cef8, align 1
  %v4_cef8 = zext i8 %v3_cef8 to i32
  %v4_cefc = mul nuw nsw i32 %v1_ceec, 256
  %v5_cefc = or i32 %v4_cefc, %v3_cef4
  store i32 %v5_cefc, i32* %ip.global-to-local, align 4
  %v2_cf04 = call i32 @llvm.bswap.i32(i32 %v3_ced0)
  %v7_cf08 = lshr i32 %v0_ced4, %v4_cef8
  %v8_cf08 = add i32 %v7_cf08, %v2_cf04
  store i32 %v8_cf08, i32* %r2.global-to-local, align 4
  %v2_cf24 = call i32 @llvm.bswap.i32(i32 %v8_cf08)
  store i32 %v2_cf24, i32* %r3.global-to-local, align 4
  store i32 %v6_ca78, i32* %r1.global-to-local, align 4
  store i1 %v8_cf2c, i1* %cpsr_z.global-to-local, align 1
  %v1_cf30 = load i32, i32* @r5, align 4
  %v2_cf30 = add i32 %v1_cf30, 16
  %v3_cf30 = inttoptr i32 %v2_cf30 to i32*
  store i32 %v2_cf24, i32* %v3_cf30, align 4
  br i1 %v3_cf2c, label %dec_label_pc_cf38, label %dec_label_pc_cdcc

dec_label_pc_cf38:                                ; preds = %dec_label_pc_ced0, %dec_label_pc_cdc0
  %v0_cf38 = call i32 @function_10a44()
  store i32 %v3_cad4, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_cf48, i1* %cpsr_z.global-to-local, align 1
  %v1_cf4c = load i32, i32* @r5, align 4
  %v2_cf4c = add i32 %v1_cf4c, 12
  %v3_cf4c = inttoptr i32 %v2_cf4c to i32*
  store i32 %v0_cf38, i32* %v3_cf4c, align 4
  br i1 %v3_cf48, label %dec_label_pc_cf54, label %dec_label_pc_cf38.dec_label_pc_cde0_crit_edge

dec_label_pc_cf38.dec_label_pc_cde0_crit_edge:    ; preds = %dec_label_pc_cf38
  %v1_cde4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cde0

dec_label_pc_cf54:                                ; preds = %dec_label_pc_cf38, %dec_label_pc_cdcc
  %v0_cf54 = call i32 @function_10a44()
  %v1_cf54 = trunc i32 %v0_cf54 to i8
  %v4_cf5830 = udiv i32 %v0_cf54, 256
  %v1_cf5c = trunc i32 %v4_cf5830 to i8
  %v2_cf5c = load i32, i32* @r5, align 4
  %v3_cf5c = add i32 %v2_cf5c, 5
  %v4_cf5c = inttoptr i32 %v3_cf5c to i8*
  store i8 %v1_cf5c, i8* %v4_cf5c, align 1
  store i32 %v3_cad8, i32* %r3.global-to-local, align 4
  %v1_cf64 = load i32, i32* @r4, align 4
  %v9_cf64 = icmp eq i32 %v3_cad8, %v1_cf64
  store i1 %v9_cf64, i1* %cpsr_z.global-to-local, align 1
  %v3_cf68 = load i32, i32* @r5, align 4
  %v4_cf68 = add i32 %v3_cf68, 4
  %v5_cf68 = inttoptr i32 %v4_cf68 to i8*
  store i8 %v1_cf54, i8* %v5_cf68, align 1
  %v0_cf6c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cf6c, label %dec_label_pc_cf70, label %dec_label_pc_cf54.dec_label_pc_cdec_crit_edge

dec_label_pc_cf54.dec_label_pc_cdec_crit_edge:    ; preds = %dec_label_pc_cf54
  %v1_cdf0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cdec

dec_label_pc_cf70:                                ; preds = %dec_label_pc_cf54, %dec_label_pc_cde0
  %v0_cf70 = call i32 @function_10a44()
  %v1_cf70 = trunc i32 %v0_cf70 to i8
  store i32 %v3_cadc, i32* %ip.global-to-local, align 4
  %v4_cf78 = sdiv i32 %v0_cf70, 256
  store i32 %v4_cf78, i32* %r3.global-to-local, align 4
  %v1_cf7c = load i32, i32* @r4, align 4
  %v9_cf7c = icmp eq i32 %v3_cadc, %v1_cf7c
  store i1 %v9_cf7c, i1* %cpsr_z.global-to-local, align 1
  %v3_cf80 = load i32, i32* @r5, align 4
  %v4_cf80 = add i32 %v3_cf80, 20
  %v5_cf80 = inttoptr i32 %v4_cf80 to i8*
  store i8 %v1_cf70, i8* %v5_cf80, align 1
  %v0_cf84 = load i32, i32* %r3.global-to-local, align 4
  %v1_cf84 = trunc i32 %v0_cf84 to i8
  %v2_cf84 = load i32, i32* @r6, align 4
  %v3_cf84 = add i32 %v2_cf84, 1
  %v4_cf84 = inttoptr i32 %v3_cf84 to i8*
  store i8 %v1_cf84, i8* %v4_cf84, align 1
  %v0_cf88 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cf88, label %dec_label_pc_cf8c, label %dec_label_pc_cf70.dec_label_pc_cdf8_crit_edge

dec_label_pc_cf70.dec_label_pc_cdf8_crit_edge:    ; preds = %dec_label_pc_cf70
  %v1_cdfc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cdf8

dec_label_pc_cf8c:                                ; preds = %dec_label_pc_cf70, %dec_label_pc_cdec
  %v0_cf8c = call i32 @function_10a44()
  %v1_cf8c = trunc i32 %v0_cf8c to i8
  store i32 %v5_c978, i32* %r1.global-to-local, align 4
  %v4_cf94 = sdiv i32 %v0_cf8c, 256
  store i32 %v4_cf94, i32* %r3.global-to-local, align 4
  %v1_cf98 = load i32, i32* @r4, align 4
  %v9_cf98 = icmp eq i32 %v5_c978, %v1_cf98
  store i1 %v9_cf98, i1* %cpsr_z.global-to-local, align 1
  %v1_cf9c = trunc i32 %v4_cf94 to i8
  %v2_cf9c = load i32, i32* @r6, align 4
  %v3_cf9c = add i32 %v2_cf9c, 3
  %v4_cf9c = inttoptr i32 %v3_cf9c to i8*
  store i8 %v1_cf9c, i8* %v4_cf9c, align 1
  %v3_cfa0 = load i32, i32* @r6, align 4
  %v4_cfa0 = add i32 %v3_cfa0, 2
  %v5_cfa0 = inttoptr i32 %v4_cfa0 to i8*
  store i8 %v1_cf8c, i8* %v5_cfa0, align 1
  %v0_cfa4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cfa4, label %dec_label_pc_cfa8, label %dec_label_pc_cf8c.dec_label_pc_ce04_crit_edge

dec_label_pc_cf8c.dec_label_pc_ce04_crit_edge:    ; preds = %dec_label_pc_cf8c
  %v1_ce08.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ce04

dec_label_pc_cfa8:                                ; preds = %dec_label_pc_cf8c, %dec_label_pc_cdf8
  %v0_cfa8 = call i32 @function_10a44()
  store i32 %v6_c994, i32* %r2.global-to-local, align 4
  %v1_cfb0 = load i32, i32* @r4, align 4
  %v9_cfb0 = icmp eq i32 %v6_c994, %v1_cfb0
  store i1 %v9_cfb0, i1* %cpsr_z.global-to-local, align 1
  %v1_cfb4 = load i32, i32* @r6, align 4
  %v2_cfb4 = add i32 %v1_cfb4, 4
  %v3_cfb4 = inttoptr i32 %v2_cfb4 to i32*
  store i32 %v0_cfa8, i32* %v3_cfb4, align 4
  br i1 %v9_cfb0, label %dec_label_pc_cfbc, label %dec_label_pc_ce10

dec_label_pc_cfbc:                                ; preds = %dec_label_pc_cfa8, %dec_label_pc_ce04
  %v0_cfbc = call i32 @function_10a44()
  store i32 %v1_ca64, i32* %r3.global-to-local, align 4
  store i1 %v2_cfc4, i1* %cpsr_z.global-to-local, align 1
  %v1_cfc8 = load i32, i32* @r6, align 4
  %v2_cfc8 = add i32 %v1_cfc8, 8
  %v3_cfc8 = inttoptr i32 %v2_cfc8 to i32*
  store i32 %v0_cfbc, i32* %v3_cfc8, align 4
  br i1 %v2_cfc4, label %dec_label_pc_ce1c, label %dec_label_pc_cfd0

dec_label_pc_cfd0:                                ; preds = %dec_label_pc_ce10, %dec_label_pc_cfbc
  %v0_cfd0 = load i32, i32* @r5, align 4
  %v1_cfd0 = add i32 %v0_cfd0, 40
  store i32 %v6_ca3c, i32* @r1, align 4
  %v1_cfd8 = inttoptr i32 %v1_cfd0 to i8*
  %v2_cfd8 = call i32 @function_10c20(i8* %v1_cfd8)
  br label %dec_label_pc_ce1c

dec_label_pc_cfe0:                                ; preds = %dec_label_pc_cac4
  store i32 %v6_ca3c, i32* %r3.global-to-local, align 4
  %v1_cfe8 = add i32 %v6_ca3c, 40
  store i32 %v1_cfe8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_cd74.preheader

; uselistorder directives
  uselistorder i32 %v1_cfe8, { 1, 0 }
  uselistorder i32 %v4_cf94, { 1, 0 }
  uselistorder i32 %v2_cf24, { 1, 0 }
  uselistorder i32 %v3_cef4, { 1, 0 }
  uselistorder i32 %v3_ced0, { 1, 3, 2, 0 }
  uselistorder i32 %v0_ceb0, { 1, 2, 0 }
  uselistorder i32 %v1_ceac, { 2, 0, 3, 1 }
  uselistorder i32 %v0_ce3c, { 1, 0, 2 }
  uselistorder i32 %v0_cd80, { 2, 0, 1 }
  uselistorder i32 %v0_cd74, { 1, 0 }
  uselistorder i1 %v2_cfc4, { 2, 3, 1, 0 }
  uselistorder i1 %v3_cf48, { 1, 0, 2, 3 }
  uselistorder i32 %v1_cd5c, { 1, 0, 2, 3 }
  uselistorder i8 %v5_cbc0, { 1, 0 }
  uselistorder i32 %v1_cb88, { 1, 0 }
  uselistorder i32 %v1_cb84, { 1, 0 }
  uselistorder i32 %v1_cb80, { 1, 0 }
  uselistorder i32 %v1_cb5c, { 1, 0 }
  uselistorder i32 %v1_cb58, { 1, 0 }
  uselistorder i32 %v1_cb54, { 1, 0 }
  uselistorder i32 %v1_cb48, { 1, 0 }
  uselistorder i32 %v1_cb24, { 1, 0 }
  uselistorder i32 %v1_cb14, { 1, 0 }
  uselistorder i32 %v1_cb00, { 3, 0, 2, 1 }
  uselistorder i32 %v0_cae0, { 1, 0, 2 }
  uselistorder i32 %v3_cad4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_cac8, { 3, 0, 1, 2 }
  uselistorder i32 %v0_cac4, { 0, 2, 1, 3 }
  uselistorder i1 %v7_cabc, { 1, 0 }
  uselistorder i1 %v7_ca90, { 1, 0 }
  uselistorder i32 %v3_ca8c, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v6_ca78, { 4, 3, 0, 5, 1, 2 }
  uselistorder i32 %v1_ca64, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_ca3c, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32 %v6_c994, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c978, { 2, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_c928, { 1, 0 }
  uselistorder i32 %v6_c8c0, { 1, 0 }
  uselistorder i32 %v2_c8a8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_c88c, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder label %dec_label_pc_cfd0, { 1, 0 }
  uselistorder label %dec_label_pc_cec8, { 1, 0 }
  uselistorder label %dec_label_pc_ce1c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cd74.preheader, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_cffc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_cffc:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_cffc = load i32, i32* @r4, align 4
  %v12_cffc = load i32, i32* @r7, align 4
  %v1_d000 = urem i32 %arg1, 256
  store i32 %v1_d000, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_d000, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_d018 = urem i32 %arg3, 256
  store i32 %v1_d018, i32* @r4, align 4
  %v2_d01c = call i32 @function_14e34(i32 %v1_d000, i32 4)
  %v0_d020 = load i32, i32* @r5, align 4
  store i32 %v0_d020, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_d01c, i32* %fp.global-to-local, align 4
  %v0_d030 = load i32, i32* @r4, align 4
  store i32 %v0_d030, i32* %r0.global-to-local, align 4
  %v4_d034 = inttoptr i32 %v0_d020 to i32*
  %v5_d034 = call i32 @function_a4e8(i32 %v0_d030, i32* %v4_d034, i32 2, i32 0)
  %v1_d040 = urem i32 %v5_d034, 256
  store i32 %v1_d040, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d04c = load i32, i32* @r5, align 4
  store i32 %v0_d04c, i32* %r1.global-to-local, align 4
  %v0_d050 = load i32, i32* @r4, align 4
  store i32 %v0_d050, i32* %r0.global-to-local, align 4
  %v5_d054 = trunc i32 %v5_d034 to i8
  %v6_d058 = inttoptr i32 %v0_d04c to i32*
  %v7_d058 = call i32 @function_a4e8(i32 %v0_d050, i32* %v6_d058, i32 3, i32 65535)
  %v0_d05c = load i32, i32* @r5, align 4
  store i32 %v0_d05c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_d06c = load i32, i32* @r4, align 4
  store i32 %v0_d06c, i32* %r0.global-to-local, align 4
  %v5_d070 = inttoptr i32 %v0_d05c to i32*
  %v6_d070 = call i32 @function_a4e8(i32 %v0_d06c, i32* %v5_d070, i32 4, i32 64)
  %v1_d078 = urem i32 %v6_d070, 256
  store i32 %v1_d078, i32* %ip.global-to-local, align 4
  %v0_d07c = load i32, i32* @r5, align 4
  store i32 %v0_d07c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d088 = load i32, i32* @r4, align 4
  store i32 %v0_d088, i32* %r0.global-to-local, align 4
  %v6_d090 = inttoptr i32 %v0_d07c to i32*
  %v7_d090 = call i32 @function_a4e8(i32 %v0_d088, i32* %v6_d090, i32 5, i32 1)
  %v1_d09c = urem i32 %v7_d090, 256
  store i32 %v1_d09c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d0a8 = load i32, i32* @r5, align 4
  store i32 %v0_d0a8, i32* %r1.global-to-local, align 4
  %v0_d0ac = load i32, i32* @r4, align 4
  store i32 %v0_d0ac, i32* %r0.global-to-local, align 4
  %v5_d0b4 = inttoptr i32 %v0_d0a8 to i32*
  %v6_d0b4 = call i32 @function_a4e8(i32 %v0_d0ac, i32* %v5_d0b4, i32 6, i32 65535)
  %v0_d0bc = load i32, i32* @r5, align 4
  store i32 %v0_d0bc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_d0b4, i32* @r7, align 4
  %v0_d0cc = load i32, i32* @r4, align 4
  store i32 %v0_d0cc, i32* %r0.global-to-local, align 4
  %v4_d0d0 = inttoptr i32 %v0_d0bc to i32*
  %v5_d0d0 = call i32 @function_a4e8(i32 %v0_d0cc, i32* %v4_d0d0, i32 7, i32 65535)
  %v0_d0d8 = load i32, i32* @r5, align 4
  store i32 %v0_d0d8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_d0d0, i32* @r6, align 4
  %v0_d0e8 = load i32, i32* @r4, align 4
  store i32 %v0_d0e8, i32* %r0.global-to-local, align 4
  %v4_d0ec = inttoptr i32 %v0_d0d8 to i32*
  %v5_d0ec = call i32 @function_a4e8(i32 %v0_d0e8, i32* %v4_d0ec, i32 17, i32 65535)
  %v0_d0f0 = load i32, i32* @r5, align 4
  store i32 %v0_d0f0, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d100 = load i32, i32* @r4, align 4
  store i32 %v0_d100, i32* %r0.global-to-local, align 4
  %v5_d104 = inttoptr i32 %v0_d0f0 to i32*
  %v6_d104 = call i32 @function_a4e8(i32 %v0_d100, i32* %v5_d104, i32 18, i32 0)
  %v0_d108 = load i32, i32* @r5, align 4
  store i32 %v0_d108, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d118 = load i32, i32* @r4, align 4
  store i32 %v0_d118, i32* %r0.global-to-local, align 4
  %v5_d11c = inttoptr i32 %v0_d108 to i32*
  %v6_d11c = call i32 @function_a4e8(i32 %v0_d118, i32* %v5_d11c, i32 11, i32 0)
  %v0_d120 = load i32, i32* @r5, align 4
  store i32 %v0_d120, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d130 = load i32, i32* @r4, align 4
  store i32 %v0_d130, i32* %r0.global-to-local, align 4
  %v5_d134 = inttoptr i32 %v0_d120 to i32*
  %v6_d134 = call i32 @function_a4e8(i32 %v0_d130, i32* %v5_d134, i32 12, i32 0)
  %v0_d138 = load i32, i32* @r5, align 4
  store i32 %v0_d138, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d148 = load i32, i32* @r4, align 4
  store i32 %v0_d148, i32* %r0.global-to-local, align 4
  %v5_d14c = inttoptr i32 %v0_d138 to i32*
  %v6_d14c = call i32 @function_a4e8(i32 %v0_d148, i32* %v5_d14c, i32 13, i32 0)
  %v0_d150 = load i32, i32* @r5, align 4
  store i32 %v0_d150, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d160 = load i32, i32* @r4, align 4
  store i32 %v0_d160, i32* %r0.global-to-local, align 4
  %v5_d164 = inttoptr i32 %v0_d150 to i32*
  %v6_d164 = call i32 @function_a4e8(i32 %v0_d160, i32* %v5_d164, i32 14, i32 0)
  %v0_d168 = load i32, i32* @r5, align 4
  store i32 %v0_d168, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d178 = load i32, i32* @r4, align 4
  store i32 %v0_d178, i32* %r0.global-to-local, align 4
  %v5_d17c = inttoptr i32 %v0_d168 to i32*
  %v6_d17c = call i32 @function_a4e8(i32 %v0_d178, i32* %v5_d17c, i32 15, i32 1)
  %v0_d180 = load i32, i32* @r5, align 4
  store i32 %v0_d180, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d190 = load i32, i32* @r4, align 4
  store i32 %v0_d190, i32* %r0.global-to-local, align 4
  %v5_d194 = inttoptr i32 %v0_d180 to i32*
  %v6_d194 = call i32 @function_a4e8(i32 %v0_d190, i32* %v5_d194, i32 16, i32 0)
  %v2_d1a0 = load i32, i32* @global_var_1f858.88, align 4
  store i32 %v2_d1a0, i32* %r3.global-to-local, align 4
  %v0_d1a4 = load i32, i32* @r5, align 4
  store i32 %v0_d1a4, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_d1ac = load i32, i32* @r4, align 4
  store i32 %v0_d1ac, i32* %r0.global-to-local, align 4
  %v5_d1b0 = inttoptr i32 %v0_d1a4 to i32*
  %v6_d1b0 = call i32 @function_a47c(i32 %v0_d1ac, i32* %v5_d1b0, i32 25, i32 %v2_d1a0, i32 %v6_d194)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_d1c4 = call i32 @function_14b30(i32 2, i32 3, i32 6)
  store i32 %v3_d1c4, i32* %r0.global-to-local, align 4
  %v7_d1c8 = icmp eq i32 %v3_d1c4, -1
  store i1 %v7_d1c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d1c4, i32* %sb.global-to-local, align 4
  br i1 %v7_d1c8, label %dec_label_pc_d734, label %dec_label_pc_d1d4

dec_label_pc_d1d4:                                ; preds = %dec_label_pc_cffc
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d1dc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d1dc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d1f0 = call i32 @function_14b00(i32 %v3_d1c4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_d1f0, i32* %r0.global-to-local, align 4
  %v7_d1f4 = icmp eq i32 %v6_d1f0, -1
  store i1 %v7_d1f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d1f4, label %dec_label_pc_d72c, label %dec_label_pc_d1fc

dec_label_pc_d1fc:                                ; preds = %dec_label_pc_d1d4
  store i32 0, i32* %stack_var_-40, align 4
  %v0_d210 = load i32, i32* @r7, align 4
  %v3_d210 = mul i32 %v0_d210, 65536
  store i32 %v3_d210, i32* %r4.global-to-local, align 4
  %v0_d214 = load i32, i32* @r6, align 4
  %v3_d218 = urem i32 %v7_d058, 65536
  store i32 %v3_d218, i32* %r3.global-to-local, align 4
  %v3_d21c = urem i32 %v0_d210, 65536
  store i32 %v3_d21c, i32* %ip.global-to-local, align 4
  %v3_d220 = urem i32 %v0_d214, 65536
  store i32 %v3_d220, i32* %r0.global-to-local, align 4
  %v1_d224 = urem i32 %v6_d11c, 256
  store i32 %v1_d224, i32* %r2.global-to-local, align 4
  %v0_d228 = load i32, i32* @sl, align 4
  %v2_d228 = icmp eq i32 %v0_d228, 0
  store i1 %v2_d228, i1* %cpsr_z.global-to-local, align 1
  %tmp69 = icmp slt i32 %v0_d228, 1
  br i1 %tmp69, label %dec_label_pc_d4d8, label %dec_label_pc_d240

dec_label_pc_d240:                                ; preds = %dec_label_pc_d1fc
  %v1_d250 = urem i32 %v0_d210, 256
  %v1_d258 = urem i32 %v7_d058, 256
  %v1_d25c = urem i32 %v0_d214, 256
  %tmp70 = mul i32 %v5_d0ec, 256
  %v3_d264 = mul nuw nsw i32 %v1_d25c, 256
  %v1_d268 = and i32 %tmp70, 65280
  %tmp71 = udiv i32 %v0_d214, 256
  %v4_d26c = urem i32 %tmp71, 256
  %v5_d26c = or i32 %v4_d26c, %v3_d264
  store i32 %v5_d26c, i32* @r6, align 4
  %tmp72 = udiv i32 %v5_d0ec, 256
  %v4_d270 = urem i32 %tmp72, 256
  %v5_d270 = or i32 %v4_d270, %v1_d268
  store i32 %v5_d270, i32* @r5, align 4
  %v3_d27c = mul nuw nsw i32 %v1_d258, 256
  %v1_d280 = urem i32 %v6_d11c, 2
  %tmp73 = udiv i32 %v7_d058, 256
  %v4_d284 = urem i32 %tmp73, 256
  %v5_d284 = or i32 %v4_d284, %v3_d27c
  store i32 %v5_d284, i32* @lr, align 4
  %v1_d288 = urem i32 %v6_d134, 2
  %v3_d298 = mul nuw nsw i32 %v1_d250, 256
  store i32 %v3_d298, i32* %r1.global-to-local, align 4
  %tmp74 = udiv i32 %v0_d210, 256
  %v4_d2a4 = urem i32 %tmp74, 256
  %v5_d2a4 = or i32 %v4_d2a4, %v3_d298
  store i32 %v5_d2a4, i32* @r7, align 4
  %v1_d2a8 = urem i32 %v6_d14c, 2
  %v1_d2ac = urem i32 %v6_d164, 2
  %v1_d2b0 = urem i32 %v6_d17c, 2
  %v1_d2c0 = urem i32 %v6_d194, 2
  store i32 %v1_d2c0, i32* %r0.global-to-local, align 4
  store i32 %v1_d258, i32* %r2.global-to-local, align 4
  store i32 %v1_d250, i32* %r3.global-to-local, align 4
  store i32 %v1_d25c, i32* %ip.global-to-local, align 4
  %v5_d2d0 = trunc i32 %tmp73 to i8
  %v5_d2e0 = trunc i32 %v0_d214 to i8
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v6_d070, 16777216
  %v4_d330 = sdiv i32 %sext, 16777216
  %sext8 = mul i32 %v7_d058, 16777216
  %v4_d348 = sdiv i32 %sext8, 16777216
  %tmp = sub nsw i32 0, %v1_d280
  %v4_d3a4 = and i32 %tmp, 32
  %tmp78 = sub nsw i32 0, %v1_d288
  %v4_d3b8 = and i32 %tmp78, 16
  %tmp79 = sub nsw i32 0, %v1_d2a8
  %v4_d3cc = and i32 %tmp79, 8
  %tmp80 = sub nsw i32 0, %v1_d2ac
  %v4_d3e0 = and i32 %tmp80, 4
  %tmp81 = sub nsw i32 0, %v1_d2b0
  %v3_d3f4 = and i32 %tmp81, 2
  %v7_d424 = sext i8 %v5_d2e0 to i32
  %sext77 = mul i32 %v0_d210, 16777216
  %v3_d424 = sdiv i32 %sext77, 16777216
  br label %dec_label_pc_d2e8

dec_label_pc_d2e8:                                ; preds = %bb76, %dec_label_pc_d240
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_d2f0 = call i32 @function_14e34(i32 128, i32 1)
  store i32 %v2_d2f0, i32* %r0.global-to-local, align 4
  %v3_d2f4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d2f4, i32* %r2.global-to-local, align 4
  %v1_d2f8 = load i32, i32* %fp.global-to-local, align 4
  %v2_d2f8 = load i32, i32* @r4, align 4
  %v5_d2f8 = mul i32 %v2_d2f8, 4
  %v6_d2f8 = add i32 %v5_d2f8, %v1_d2f8
  %v7_d2f8 = inttoptr i32 %v6_d2f8 to i32*
  store i32 %v2_d2f0, i32* %v7_d2f8, align 4
  %v0_d2fc = load i32, i32* %fp.global-to-local, align 4
  %v1_d2fc = load i32, i32* %r2.global-to-local, align 4
  %v4_d2fc = mul i32 %v1_d2fc, 4
  %v5_d2fc = add i32 %v4_d2fc, %v0_d2fc
  %v6_d2fc = inttoptr i32 %v5_d2fc to i32*
  %v7_d2fc = load i32, i32* %v6_d2fc, align 4
  store i32 %v7_d2fc, i32* %r4.global-to-local, align 4
  %v1_d300 = inttoptr i32 %v7_d2fc to i8*
  %v2_d300 = load i8, i8* %v1_d300, align 1
  %tmp82 = urem i8 %v2_d300, 16
  %v1_d304 = zext i8 %tmp82 to i32
  %v1_d308 = or i32 %v1_d304, 64
  store i32 %v1_d308, i32* %r3.global-to-local, align 4
  %v1_d30c = trunc i32 %v1_d308 to i8
  store i8 %v1_d30c, i8* %v1_d300, align 1
  %v0_d310 = load i32, i32* %r4.global-to-local, align 4
  %v1_d310 = inttoptr i32 %v0_d310 to i8*
  %v2_d310 = load i8, i8* %v1_d310, align 1
  %v1_d314 = and i8 %v2_d310, -16
  %v1_d318 = or i8 %v1_d314, 5
  store i32 %v1_d09c, i32* %r0.global-to-local, align 4
  store i8 %v1_d318, i8* %v1_d310, align 1
  %v2_d328 = load i32, i32* %r4.global-to-local, align 4
  %v3_d328 = add i32 %v2_d328, 1
  %v4_d328 = inttoptr i32 %v3_d328 to i8*
  store i8 %v5_d054, i8* %v4_d328, align 1
  store i32 %v4_d330, i32* %r2.global-to-local, align 4
  %v2_d334 = load i32, i32* %r4.global-to-local, align 4
  %v3_d334 = add i32 %v2_d334, 4
  %v4_d334 = inttoptr i32 %v3_d334 to i8*
  store i8 %v5_d2d0, i8* %v4_d334, align 1
  store i32 6, i32* %ip.global-to-local, align 4
  %v0_d340 = load i32, i32* %r0.global-to-local, align 4
  %v2_d340 = icmp eq i32 %v0_d340, 0
  store i1 %v2_d340, i1* %cpsr_z.global-to-local, align 1
  %v2_d344 = load i32, i32* %r4.global-to-local, align 4
  %v3_d344 = add i32 %v2_d344, 3
  %v4_d344 = inttoptr i32 %v3_d344 to i8*
  store i8 60, i8* %v4_d344, align 1
  store i32 %v4_d348, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d350 = load i32, i32* %r2.global-to-local, align 4
  %v1_d350 = trunc i32 %v0_d350 to i8
  %v2_d350 = load i32, i32* %r4.global-to-local, align 4
  %v3_d350 = add i32 %v2_d350, 8
  %v4_d350 = inttoptr i32 %v3_d350 to i8*
  store i8 %v1_d350, i8* %v4_d350, align 1
  %v0_d354 = load i32, i32* %ip.global-to-local, align 4
  %v1_d354 = trunc i32 %v0_d354 to i8
  %v2_d354 = load i32, i32* %r4.global-to-local, align 4
  %v3_d354 = add i32 %v2_d354, 9
  %v4_d354 = inttoptr i32 %v3_d354 to i8*
  store i8 %v1_d354, i8* %v4_d354, align 1
  %v0_d358 = load i32, i32* %r3.global-to-local, align 4
  %v1_d358 = trunc i32 %v0_d358 to i8
  %v2_d358 = load i32, i32* %r4.global-to-local, align 4
  %v3_d358 = add i32 %v2_d358, 2
  %v4_d358 = inttoptr i32 %v3_d358 to i8*
  store i8 %v1_d358, i8* %v4_d358, align 1
  %v3_d35c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d35c, i32* %r2.global-to-local, align 4
  %v0_d360 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d360, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d2e8
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_d364 = load i32, i32* %r4.global-to-local, align 4
  %v4_d364 = add i32 %v3_d364, 6
  %v5_d364 = inttoptr i32 %v4_d364 to i8*
  store i8 64, i8* %v5_d364, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d2e8, %bb
  %v0_d368 = load i32, i32* %r0.global-to-local, align 4
  %v1_d368 = trunc i32 %v0_d368 to i8
  %v2_d368 = load i32, i32* %r4.global-to-local, align 4
  %v3_d368 = add i32 %v2_d368, 5
  %v4_d368 = inttoptr i32 %v3_d368 to i8*
  store i8 %v1_d368, i8* %v4_d368, align 1
  %v0_d36c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d36c, label %.thread9, label %bb75

.thread9:                                         ; preds = %.thread
  store i32 %v6_d1b0, i32* %r0.global-to-local, align 4
  br label %bb76

bb75:                                             ; preds = %.thread
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v6_d1b0, i32* %r0.global-to-local, align 4
  %v3_d374 = load i32, i32* %r4.global-to-local, align 4
  %v4_d374 = add i32 %v3_d374, 7
  %v5_d374 = inttoptr i32 %v4_d374 to i8*
  store i8 0, i8* %v5_d374, align 1
  %v0_d37c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb76

bb76:                                             ; preds = %.thread9, %bb75
  %v0_d37c = phi i32 [ %v6_d1b0, %.thread9 ], [ %v0_d37c.pre, %bb75 ]
  %v0_d378 = load i32, i32* %r2.global-to-local, align 4
  %v3_d378 = mul i32 %v0_d378, 32
  store i32 %v3_d378, i32* %r3.global-to-local, align 4
  %v1_d37c = load i32, i32* %r4.global-to-local, align 4
  %v2_d37c = add i32 %v1_d37c, 12
  %v3_d37c = inttoptr i32 %v2_d37c to i32*
  store i32 %v0_d37c, i32* %v3_d37c, align 4
  %v0_d380 = load i32, i32* %r3.global-to-local, align 4
  %v1_d380 = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_d380, -8
  %v5_d380 = add i32 %v0_d380, %tmp83
  %v1_d384 = load i32, i32* @r8, align 4
  %v2_d384 = add i32 %v1_d384, %v5_d380
  store i32 %v2_d384, i32* %r3.global-to-local, align 4
  %v1_d388 = add i32 %v2_d384, 16
  %v2_d388 = inttoptr i32 %v1_d388 to i32*
  %v3_d388 = load i32, i32* %v2_d388, align 4
  store i32 %v3_d388, i32* %r2.global-to-local, align 4
  %v0_d38c = load i32, i32* @r7, align 4
  %v1_d38c = trunc i32 %v0_d38c to i8
  %v2_d38c = load i32, i32* %r4.global-to-local, align 4
  %v3_d38c = add i32 %v2_d38c, 20
  %v4_d38c = inttoptr i32 %v3_d38c to i8*
  store i8 %v1_d38c, i8* %v4_d38c, align 1
  %v0_d390 = load i32, i32* %r2.global-to-local, align 4
  %v1_d390 = load i32, i32* %r4.global-to-local, align 4
  %v2_d390 = add i32 %v1_d390, 16
  %v3_d390 = inttoptr i32 %v2_d390 to i32*
  store i32 %v0_d390, i32* %v3_d390, align 4
  %v0_d394 = load i32, i32* %r4.global-to-local, align 4
  %v1_d394 = add i32 %v0_d394, 20
  store i32 %v1_d394, i32* %r1.global-to-local, align 4
  %v1_d398 = add i32 %v0_d394, 33
  %v2_d398 = inttoptr i32 %v1_d398 to i8*
  %v3_d398 = load i8, i8* %v2_d398, align 1
  %v4_d398 = zext i8 %v3_d398 to i32
  store i32 %v1_d280, i32* %r2.global-to-local, align 4
  %v1_d3a0 = and i32 %v4_d398, 223
  %v5_d3a4 = or i32 %v1_d3a0, %v4_d3a4
  store i32 %v5_d3a4, i32* %r3.global-to-local, align 4
  %v1_d3a8 = trunc i32 %v5_d3a4 to i8
  store i8 %v1_d3a8, i8* %v2_d398, align 1
  %v0_d3ac = load i32, i32* %r1.global-to-local, align 4
  %v1_d3ac = add i32 %v0_d3ac, 13
  %v2_d3ac = inttoptr i32 %v1_d3ac to i8*
  %v3_d3ac = load i8, i8* %v2_d3ac, align 1
  %v4_d3ac = zext i8 %v3_d3ac to i32
  store i32 %v1_d288, i32* %r3.global-to-local, align 4
  %v1_d3b4 = and i32 %v4_d3ac, 239
  %v5_d3b8 = or i32 %v1_d3b4, %v4_d3b8
  store i32 %v5_d3b8, i32* %r2.global-to-local, align 4
  %v1_d3bc = trunc i32 %v5_d3b8 to i8
  store i8 %v1_d3bc, i8* %v2_d3ac, align 1
  %v0_d3c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_d3c0 = add i32 %v0_d3c0, 13
  %v2_d3c0 = inttoptr i32 %v1_d3c0 to i8*
  %v3_d3c0 = load i8, i8* %v2_d3c0, align 1
  %v4_d3c0 = zext i8 %v3_d3c0 to i32
  store i32 %v1_d2a8, i32* %ip.global-to-local, align 4
  %v1_d3c8 = and i32 %v4_d3c0, 247
  %v5_d3cc = or i32 %v1_d3c8, %v4_d3cc
  store i32 %v5_d3cc, i32* %r3.global-to-local, align 4
  %v1_d3d0 = trunc i32 %v5_d3cc to i8
  store i8 %v1_d3d0, i8* %v2_d3c0, align 1
  %v0_d3d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_d3d4 = add i32 %v0_d3d4, 13
  %v2_d3d4 = inttoptr i32 %v1_d3d4 to i8*
  %v3_d3d4 = load i8, i8* %v2_d3d4, align 1
  %v4_d3d4 = zext i8 %v3_d3d4 to i32
  store i32 %v1_d2ac, i32* %r0.global-to-local, align 4
  %v1_d3dc = and i32 %v4_d3d4, 251
  %v5_d3e0 = or i32 %v1_d3dc, %v4_d3e0
  store i32 %v5_d3e0, i32* %r2.global-to-local, align 4
  %v1_d3e4 = trunc i32 %v5_d3e0 to i8
  store i8 %v1_d3e4, i8* %v2_d3d4, align 1
  %v0_d3e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_d3e8 = add i32 %v0_d3e8, 13
  %v2_d3e8 = inttoptr i32 %v1_d3e8 to i8*
  %v3_d3e8 = load i8, i8* %v2_d3e8, align 1
  %v4_d3e8 = zext i8 %v3_d3e8 to i32
  store i32 %v1_d2b0, i32* %r2.global-to-local, align 4
  %v1_d3f0 = and i32 %v4_d3e8, 253
  %v4_d3f4 = or i32 %v1_d3f0, %v3_d3f4
  store i32 %v4_d3f4, i32* %r3.global-to-local, align 4
  %v1_d3f8 = trunc i32 %v4_d3f4 to i8
  store i8 %v1_d3f8, i8* %v2_d3e8, align 1
  %v0_d3fc = load i32, i32* %r1.global-to-local, align 4
  %v1_d3fc = add i32 %v0_d3fc, 12
  %v2_d3fc = inttoptr i32 %v1_d3fc to i8*
  %v3_d3fc = load i8, i8* %v2_d3fc, align 1
  %v4_d3fc = zext i8 %v3_d3fc to i32
  store i32 %v4_d3fc, i32* %r2.global-to-local, align 4
  %v1_d400 = add i32 %v0_d3fc, 13
  %v2_d400 = inttoptr i32 %v1_d400 to i8*
  %v3_d400 = load i8, i8* %v2_d400, align 1
  %v4_d400 = zext i8 %v3_d400 to i32
  %tmp84 = urem i8 %v3_d3fc, 16
  %v1_d408 = zext i8 %tmp84 to i32
  %v1_d40c = and i32 %v4_d400, 254
  %v2_d410 = or i32 %v1_d40c, %v1_d2c0
  %v1_d414 = or i32 %v1_d408, 160
  store i32 %v1_d414, i32* %r2.global-to-local, align 4
  %v1_d418 = trunc i32 %v2_d410 to i8
  store i8 %v1_d418, i8* %v2_d400, align 1
  %v0_d41c = load i32, i32* %r2.global-to-local, align 4
  %v1_d41c = trunc i32 %v0_d41c to i8
  %v2_d41c = load i32, i32* %r1.global-to-local, align 4
  %v3_d41c = add i32 %v2_d41c, 12
  %v4_d41c = inttoptr i32 %v3_d41c to i8*
  store i8 %v1_d41c, i8* %v4_d41c, align 1
  store i32 %v3_d424, i32* %r0.global-to-local, align 4
  store i32 %v7_d424, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_d430 = load i32, i32* %r1.global-to-local, align 4
  %v3_d430 = add i32 %v2_d430, 3
  %v4_d430 = inttoptr i32 %v3_d430 to i8*
  store i8 %v5_d2e0, i8* %v4_d430, align 1
  %v0_d434 = load i32, i32* %r0.global-to-local, align 4
  %v1_d434 = trunc i32 %v0_d434 to i8
  %v2_d434 = load i32, i32* %r1.global-to-local, align 4
  %v3_d434 = add i32 %v2_d434, 1
  %v4_d434 = inttoptr i32 %v3_d434 to i8*
  store i8 %v1_d434, i8* %v4_d434, align 1
  %v0_d438 = load i32, i32* @r6, align 4
  %v1_d438 = trunc i32 %v0_d438 to i8
  %v2_d438 = load i32, i32* %r1.global-to-local, align 4
  %v3_d438 = add i32 %v2_d438, 2
  %v4_d438 = inttoptr i32 %v3_d438 to i8*
  store i8 %v1_d438, i8* %v4_d438, align 1
  %v0_d43c = load i32, i32* @r5, align 4
  %v1_d43c = load i32, i32* %r1.global-to-local, align 4
  %v2_d43c = add i32 %v1_d43c, 4
  %v3_d43c = inttoptr i32 %v2_d43c to i32*
  store i32 %v0_d43c, i32* %v3_d43c, align 4
  %v0_d440 = load i32, i32* %ip.global-to-local, align 4
  %v1_d440 = trunc i32 %v0_d440 to i8
  %v2_d440 = load i32, i32* %r4.global-to-local, align 4
  %v3_d440 = add i32 %v2_d440, 41
  %v4_d440 = inttoptr i32 %v3_d440 to i8*
  store i8 %v1_d440, i8* %v4_d440, align 1
  %v0_d444 = load i32, i32* %r3.global-to-local, align 4
  %v1_d444 = trunc i32 %v0_d444 to i8
  %v2_d444 = load i32, i32* %r4.global-to-local, align 4
  %v3_d444 = add i32 %v2_d444, 40
  %v4_d444 = inttoptr i32 %v3_d444 to i8*
  store i8 %v1_d444, i8* %v4_d444, align 1
  %v0_d448 = call i32 @function_10a44()
  %v1_d44c = mul i32 %v0_d448, 256
  %v1_d450 = and i32 %v1_d44c, 3840
  %v1_d454 = or i32 %v1_d450, 28672
  %v3_d45c = add nuw nsw i32 %v1_d454, 2048
  %v3_d4687 = udiv i32 %v3_d45c, 256
  store i32 %v3_d4687, i32* %r1.global-to-local, align 4
  %v0_d46c = load i32, i32* %r4.global-to-local, align 4
  %v1_d46c = add i32 %v0_d46c, 42
  store i32 %v1_d46c, i32* %r2.global-to-local, align 4
  %v4_d470 = inttoptr i32 %v1_d46c to i8*
  store i8 5, i8* %v4_d470, align 1
  %v0_d474 = load i32, i32* %r1.global-to-local, align 4
  %v1_d474 = trunc i32 %v0_d474 to i8
  %v2_d474 = load i32, i32* %r2.global-to-local, align 4
  %v3_d474 = add i32 %v2_d474, 1
  %v4_d474 = inttoptr i32 %v3_d474 to i8*
  store i8 %v1_d474, i8* %v4_d474, align 1
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_d480 = load i32, i32* %r4.global-to-local, align 4
  %v3_d480 = add i32 %v2_d480, 47
  %v4_d480 = inttoptr i32 %v3_d480 to i8*
  store i8 10, i8* %v4_d480, align 1
  store i32 4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d48c = load i32, i32* %r3.global-to-local, align 4
  %v1_d48c = trunc i32 %v0_d48c to i8
  %v2_d48c = load i32, i32* %r4.global-to-local, align 4
  %v3_d48c = add i32 %v2_d48c, 46
  %v4_d48c = inttoptr i32 %v3_d48c to i8*
  store i8 %v1_d48c, i8* %v4_d48c, align 1
  %v0_d490 = load i32, i32* %r2.global-to-local, align 4
  %v1_d490 = trunc i32 %v0_d490 to i8
  %v2_d490 = load i32, i32* %r4.global-to-local, align 4
  %v3_d490 = add i32 %v2_d490, 45
  %v4_d490 = inttoptr i32 %v3_d490 to i8*
  store i8 %v1_d490, i8* %v4_d490, align 1
  %v0_d494 = load i32, i32* %r0.global-to-local, align 4
  %v1_d494 = trunc i32 %v0_d494 to i8
  %v2_d494 = load i32, i32* %r4.global-to-local, align 4
  %v3_d494 = add i32 %v2_d494, 44
  %v4_d494 = inttoptr i32 %v3_d494 to i8*
  store i8 %v1_d494, i8* %v4_d494, align 1
  %v0_d498 = call i32 @function_10a44()
  store i32 %v0_d498, i32* %r0.global-to-local, align 4
  %v2_d4a0 = load i32, i32* %r4.global-to-local, align 4
  %v3_d4a0 = add i32 %v2_d4a0, 56
  %v4_d4a0 = inttoptr i32 %v3_d4a0 to i8*
  store i8 1, i8* %v4_d4a0, align 1
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_d4b0 = load i32, i32* %r4.global-to-local, align 4
  %v2_d4b0 = add i32 %v1_d4b0, 48
  %v3_d4b0 = inttoptr i32 %v2_d4b0 to i32*
  store i32 %v0_d498, i32* %v3_d4b0, align 4
  %v0_d4b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d4b4 = trunc i32 %v0_d4b4 to i8
  %v2_d4b4 = load i32, i32* %r4.global-to-local, align 4
  %v3_d4b4 = add i32 %v2_d4b4, 58
  %v4_d4b4 = inttoptr i32 %v3_d4b4 to i8*
  store i8 %v1_d4b4, i8* %v4_d4b4, align 1
  %v0_d4b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_d4b8 = trunc i32 %v0_d4b8 to i8
  %v2_d4b8 = load i32, i32* %r4.global-to-local, align 4
  %v3_d4b8 = add i32 %v2_d4b8, 59
  %v4_d4b8 = inttoptr i32 %v3_d4b8 to i8*
  store i8 %v1_d4b8, i8* %v4_d4b8, align 1
  %v0_d4bc = load i32, i32* %ip.global-to-local, align 4
  %v1_d4bc = load i32, i32* %r4.global-to-local, align 4
  %v2_d4bc = add i32 %v1_d4bc, 52
  %v3_d4bc = inttoptr i32 %v2_d4bc to i32*
  store i32 %v0_d4bc, i32* %v3_d4bc, align 4
  %v0_d4c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_d4c0 = trunc i32 %v0_d4c0 to i8
  %v2_d4c0 = load i32, i32* %r4.global-to-local, align 4
  %v3_d4c0 = add i32 %v2_d4c0, 57
  %v4_d4c0 = inttoptr i32 %v3_d4c0 to i8*
  store i8 %v1_d4c0, i8* %v4_d4c0, align 1
  %v3_d4c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d4c4, i32* %r3.global-to-local, align 4
  %v1_d4c8 = add i32 %v3_d4c4, 1
  store i32 %v1_d4c8, i32* @r4, align 4
  %v0_d4cc = load i32, i32* @sl, align 4
  %v9_d4cc = icmp eq i32 %v0_d4cc, %v1_d4c8
  store i1 %v9_d4cc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d4c8, i32* %stack_var_-40, align 4
  %v8_d4d4 = icmp sgt i32 %v0_d4cc, %v1_d4c8
  br i1 %v8_d4d4, label %dec_label_pc_d2e8, label %dec_label_pc_d4d8

dec_label_pc_d4d8:                                ; preds = %bb76, %dec_label_pc_d1fc
  %v0_d4d8 = phi i32 [ %v0_d228, %dec_label_pc_d1fc ], [ %v0_d4cc, %bb76 ]
  %v2_d4d8 = icmp eq i32 %v0_d4d8, 0
  store i1 %v2_d4d8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_d690 = icmp eq i32 %v3_d218, 65535
  %v2_d70c = icmp eq i32 %v1_d224, 0
  %v2_d514 = icmp eq i32 %v6_d1b0, -1
  %v7_d514 = icmp eq i32 %v6_d1b0, -1
  br label %dec_label_pc_d4e0.outer

dec_label_pc_d4e0.outer:                          ; preds = %dec_label_pc_d60c, %dec_label_pc_d4d8
  %v1_d4e0.ph.in = phi i32 [ %v0_d600, %dec_label_pc_d60c ], [ %v0_d4d8, %dec_label_pc_d4d8 ]
  %v0_d4e0.ph = phi i1 [ %v2_d60c, %dec_label_pc_d60c ], [ %v2_d4d8, %dec_label_pc_d4d8 ]
  %v1_d4e0.ph = icmp slt i32 %v1_d4e0.ph.in, 0
  %v4_d4e0 = or i1 %v1_d4e0.ph, %v0_d4e0.ph
  br label %dec_label_pc_d4e0

dec_label_pc_d4e0:                                ; preds = %dec_label_pc_d4e0.outer, %dec_label_pc_d4e0
  br i1 %v4_d4e0, label %dec_label_pc_d4e0, label %dec_label_pc_d4e4

dec_label_pc_d4e4:                                ; preds = %dec_label_pc_d4e0
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_d4f0

dec_label_pc_d4f0:                                ; preds = %dec_label_pc_d56c, %dec_label_pc_d4e4
  %v1_d500 = phi i32 [ %v1_d5fc, %dec_label_pc_d56c ], [ 0, %dec_label_pc_d4e4 ]
  %v5_d4f4 = mul i32 %v1_d500, 24
  %v1_d4f8 = load i32, i32* @r8, align 4
  %v2_d4f8 = add i32 %v1_d4f8, %v5_d4f4
  store i32 %v2_d4f8, i32* %r3.global-to-local, align 4
  %v1_d4fc = add i32 %v2_d4f8, 20
  %v2_d4fc = inttoptr i32 %v1_d4fc to i8*
  %v3_d4fc = load i8, i8* %v2_d4fc, align 1
  %v4_d4fc = zext i8 %v3_d4fc to i32
  store i32 %v4_d4fc, i32* %r2.global-to-local, align 4
  %v0_d500 = load i32, i32* %fp.global-to-local, align 4
  %v4_d500 = mul i32 %v1_d500, 4
  %v5_d500 = add i32 %v0_d500, %v4_d500
  %v6_d500 = inttoptr i32 %v5_d500 to i32*
  %v7_d500 = load i32, i32* %v6_d500, align 4
  store i32 %v7_d500, i32* @r5, align 4
  %v7_d504 = icmp eq i8 %v3_d4fc, 31
  store i1 %v7_d504, i1* %cpsr_z.global-to-local, align 1
  %v1_d508 = add i32 %v7_d500, 20
  store i32 %v1_d508, i32* @r6, align 4
  %tmp85 = icmp ult i8 %v3_d4fc, 32
  br i1 %tmp85, label %dec_label_pc_d618, label %dec_label_pc_d510

dec_label_pc_d510:                                ; preds = %dec_label_pc_d4f0
  store i32 %v6_d1b0, i32* %r0.global-to-local, align 4
  store i1 %v7_d514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d514, label %dec_label_pc_d680, label %dec_label_pc_d51c

dec_label_pc_d51c:                                ; preds = %dec_label_pc_d618, %dec_label_pc_d510
  store i32 %v3_d218, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d690, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d690, label %dec_label_pc_d69c, label %dec_label_pc_d530

dec_label_pc_d530:                                ; preds = %dec_label_pc_d680.dec_label_pc_d530_crit_edge, %dec_label_pc_d51c
  %v1_d534 = phi i32 [ %v1_d534.pre, %dec_label_pc_d680.dec_label_pc_d530_crit_edge ], [ 65535, %dec_label_pc_d51c ]
  store i32 %v3_d21c, i32* %r3.global-to-local, align 4
  %v9_d534 = icmp eq i32 %v3_d21c, %v1_d534
  store i1 %v9_d534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d534, label %dec_label_pc_d6b8, label %dec_label_pc_d53c

dec_label_pc_d53c:                                ; preds = %dec_label_pc_d69c.dec_label_pc_d53c_crit_edge, %dec_label_pc_d530
  %v1_d540 = phi i32 [ %v1_d540.pre, %dec_label_pc_d69c.dec_label_pc_d53c_crit_edge ], [ %v1_d534, %dec_label_pc_d530 ]
  store i32 %v3_d220, i32* %ip.global-to-local, align 4
  %v9_d540 = icmp eq i32 %v3_d220, %v1_d540
  store i1 %v9_d540, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d540, label %dec_label_pc_d6d4, label %dec_label_pc_d548

dec_label_pc_d548:                                ; preds = %dec_label_pc_d6b8.dec_label_pc_d548_crit_edge, %dec_label_pc_d53c
  %v1_d54c = phi i32 [ %v1_d54c.pre, %dec_label_pc_d6b8.dec_label_pc_d548_crit_edge ], [ %v1_d540, %dec_label_pc_d53c ]
  store i32 %v5_d0ec, i32* %r0.global-to-local, align 4
  %v9_d54c = icmp eq i32 %v5_d0ec, %v1_d54c
  store i1 %v9_d54c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d54c, label %dec_label_pc_d6f0, label %dec_label_pc_d554

dec_label_pc_d554:                                ; preds = %dec_label_pc_d6d4.dec_label_pc_d554_crit_edge, %dec_label_pc_d548
  %v1_d558 = phi i32 [ %v1_d558.pre, %dec_label_pc_d6d4.dec_label_pc_d554_crit_edge ], [ %v1_d54c, %dec_label_pc_d548 ]
  store i32 %v6_d104, i32* %r2.global-to-local, align 4
  %v9_d558 = icmp eq i32 %v6_d104, %v1_d558
  store i1 %v9_d558, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d558, label %dec_label_pc_d704, label %dec_label_pc_d560

dec_label_pc_d560:                                ; preds = %dec_label_pc_d6f0, %dec_label_pc_d554
  store i32 %v1_d224, i32* %r3.global-to-local, align 4
  store i1 %v2_d70c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d70c, label %dec_label_pc_d56c, label %dec_label_pc_d718

dec_label_pc_d56c:                                ; preds = %dec_label_pc_d560, %dec_label_pc_d704, %dec_label_pc_d718
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_d570 = load i32, i32* %r7.global-to-local, align 4
  %v1_d570 = trunc i32 %v0_d570 to i8
  %v2_d570 = load i32, i32* @r5, align 4
  %v3_d570 = add i32 %v2_d570, 10
  %v4_d570 = inttoptr i32 %v3_d570 to i8*
  store i8 %v1_d570, i8* %v4_d570, align 1
  %v0_d574 = load i32, i32* %r7.global-to-local, align 4
  %v1_d574 = trunc i32 %v0_d574 to i8
  %v2_d574 = load i32, i32* @r5, align 4
  %v3_d574 = add i32 %v2_d574, 11
  %v4_d574 = inttoptr i32 %v3_d574 to i8*
  store i8 %v1_d574, i8* %v4_d574, align 1
  %v0_d578 = load i32, i32* @r5, align 4
  store i32 %v0_d578, i32* @r0, align 4
  %v2_d57c = call i32 @function_f008(i32 %v0_d578, i32 20)
  %v3_d57c = trunc i32 %v2_d57c to i8
  %v4_d58027 = udiv i32 %v2_d57c, 256
  %v1_d584 = trunc i32 %v4_d58027 to i8
  %v2_d584 = load i32, i32* @r5, align 4
  %v3_d584 = add i32 %v2_d584, 11
  %v4_d584 = inttoptr i32 %v3_d584 to i8*
  store i8 %v1_d584, i8* %v4_d584, align 1
  %v3_d588 = load i32, i32* @r5, align 4
  %v4_d588 = add i32 %v3_d588, 10
  %v5_d588 = inttoptr i32 %v4_d588 to i8*
  store i8 %v3_d57c, i8* %v5_d588, align 1
  %v0_d58c = load i32, i32* @r6, align 4
  store i32 %v0_d58c, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_d598 = load i32, i32* %r7.global-to-local, align 4
  %v1_d598 = trunc i32 %v0_d598 to i8
  %v3_d598 = add i32 %v0_d58c, 16
  %v4_d598 = inttoptr i32 %v3_d598 to i8*
  store i8 %v1_d598, i8* %v4_d598, align 1
  %v0_d59c = load i32, i32* %r7.global-to-local, align 4
  %v1_d59c = trunc i32 %v0_d59c to i8
  %v2_d59c = load i32, i32* @r6, align 4
  %v3_d59c = add i32 %v2_d59c, 17
  %v4_d59c = inttoptr i32 %v3_d59c to i8*
  store i8 %v1_d59c, i8* %v4_d59c, align 1
  %v0_d5a0 = load i32, i32* @r5, align 4
  store i32 %v0_d5a0, i32* %r0.global-to-local, align 4
  %v4_d5a4 = call i32 @function_f064(i32 %v0_d5a0, i32 %v0_d58c, i32 10240, i32 40)
  %v5_d5a4 = trunc i32 %v4_d5a4 to i8
  store i32 %v4_d5a4, i32* %r0.global-to-local, align 4
  %v4_d5a828 = udiv i32 %v4_d5a4, 256
  %v1_d5ac = trunc i32 %v4_d5a828 to i8
  %v2_d5ac = load i32, i32* @r6, align 4
  %v3_d5ac = add i32 %v2_d5ac, 17
  %v4_d5ac = inttoptr i32 %v3_d5ac to i8*
  store i8 %v1_d5ac, i8* %v4_d5ac, align 1
  %v3_d5b0 = load i32, i32* @r6, align 4
  %v4_d5b0 = add i32 %v3_d5b0, 16
  %v5_d5b0 = inttoptr i32 %v4_d5b0 to i8*
  store i8 %v5_d5a4, i8* %v5_d5b0, align 1
  %v3_d5b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d5b4, i32* %r3.global-to-local, align 4
  %v0_d5b8 = load i32, i32* @r5, align 4
  %v1_d5b8 = add i32 %v0_d5b8, 20
  %v2_d5b8 = inttoptr i32 %v1_d5b8 to i32*
  %v3_d5b8 = load i32, i32* %v2_d5b8, align 4
  %v3_d5c0 = udiv i32 %v3_d5b8, 65536
  store i32 %v3_d5c0, i32* %r2.global-to-local, align 4
  %v5_d5c4 = mul i32 %v3_d5b4, 24
  %v1_d5c8 = load i32, i32* @r8, align 4
  %v2_d5c8 = add i32 %v1_d5c8, %v5_d5c4
  store i32 %v2_d5c8, i32* %ip.global-to-local, align 4
  %v3_d5cc26 = udiv i32 %v3_d5b8, 16777216
  %v1_d5d0 = trunc i32 %v3_d5cc26 to i8
  %v3_d5d0 = add i32 %v2_d5c8, 3
  %v4_d5d0 = inttoptr i32 %v3_d5d0 to i8*
  store i8 %v1_d5d0, i8* %v4_d5d0, align 1
  %v0_d5d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d5d4 = trunc i32 %v0_d5d4 to i8
  %v2_d5d4 = load i32, i32* %ip.global-to-local, align 4
  %v3_d5d4 = add i32 %v2_d5d4, 2
  %v4_d5d4 = inttoptr i32 %v3_d5d4 to i8*
  store i8 %v1_d5d4, i8* %v4_d5d4, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d5dc = load i32, i32* @r5, align 4
  store i32 %v0_d5dc, i32* %r1.global-to-local, align 4
  %v0_d5e0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_d5e0, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_d5ec = load i32, i32* %ip.global-to-local, align 4
  %v6_d5f4 = inttoptr i32 %v0_d5dc to i32*
  %v7_d5f4 = call i32 @function_14acc(i32 %v0_d5e0, i32* %v6_d5f4, i32 60, i32 16384, i32 %v0_d5ec, i32 16)
  %v3_d5f8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d5f8, i32* %r3.global-to-local, align 4
  %v1_d5fc = add i32 %v3_d5f8, 1
  store i32 %v1_d5fc, i32* %r0.global-to-local, align 4
  %v0_d600 = load i32, i32* @sl, align 4
  %v9_d600 = icmp eq i32 %v0_d600, %v1_d5fc
  store i1 %v9_d600, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d5fc, i32* %stack_var_-40, align 4
  %v8_d608 = icmp sgt i32 %v0_d600, %v1_d5fc
  br i1 %v8_d608, label %dec_label_pc_d4f0, label %dec_label_pc_d60c

dec_label_pc_d60c:                                ; preds = %dec_label_pc_d56c
  %v2_d60c = icmp eq i32 %v0_d600, 0
  store i1 %v2_d60c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_d4e0.outer

dec_label_pc_d618:                                ; preds = %dec_label_pc_d4f0
  %v1_d618 = add i32 %v2_d4f8, 16
  %v2_d618 = inttoptr i32 %v1_d618 to i32*
  %v3_d618 = load i32, i32* %v2_d618, align 4
  store i32 %v3_d618, i32* %r4.global-to-local, align 4
  %v0_d61c = call i32 @function_10a44()
  store i32 %v0_d61c, i32* %r0.global-to-local, align 4
  %v3_d620 = load i32, i32* %stack_var_-40, align 4
  %v5_d628 = mul i32 %v3_d620, 24
  %v0_d62c = load i32, i32* %r4.global-to-local, align 4
  %v1_d630 = load i32, i32* @r8, align 4
  %v2_d630 = add i32 %v1_d630, %v5_d628
  store i32 %v2_d630, i32* %r1.global-to-local, align 4
  %v1_d634 = and i32 %v0_d62c, 65280
  store i32 %v1_d634, i32* %r3.global-to-local, align 4
  %v1_d62c = udiv i32 %v0_d62c, 256
  %v3_d638 = and i32 %v1_d62c, 65280
  store i32 %v3_d638, i32* %r2.global-to-local, align 4
  %v3_d63c = mul i32 %v0_d62c, 16777216
  store i32 %v3_d63c, i32* %ip.global-to-local, align 4
  %v1_d640 = add i32 %v2_d630, 20
  %v2_d640 = inttoptr i32 %v1_d640 to i8*
  %v3_d640 = load i8, i8* %v2_d640, align 1
  %v4_d640 = zext i8 %v3_d640 to i32
  %v4_d644 = mul nuw nsw i32 %v1_d634, 256
  %v5_d644 = or i32 %v4_d644, %v3_d63c
  store i32 %v5_d644, i32* %ip.global-to-local, align 4
  %v2_d64c = call i32 @llvm.bswap.i32(i32 %v0_d62c)
  %v7_d650 = lshr i32 %v0_d61c, %v4_d640
  %v8_d650 = add i32 %v7_d650, %v2_d64c
  store i32 %v8_d650, i32* %r2.global-to-local, align 4
  %v3_d65c = mul i32 %v8_d650, 16777216
  %v1_d654 = mul i32 %v8_d650, 256
  %v4_d660 = and i32 %v1_d654, 16711680
  %v5_d660 = or i32 %v4_d660, %v3_d65c
  store i32 %v5_d660, i32* %r1.global-to-local, align 4
  store i32 %v6_d1b0, i32* %r0.global-to-local, align 4
  %v2_d670 = call i32 @llvm.bswap.i32(i32 %v8_d650)
  store i32 %v2_d670, i32* %r3.global-to-local, align 4
  store i1 %v7_d514, i1* %cpsr_z.global-to-local, align 1
  %v1_d678 = load i32, i32* @r5, align 4
  %v2_d678 = add i32 %v1_d678, 16
  %v3_d678 = inttoptr i32 %v2_d678 to i32*
  store i32 %v2_d670, i32* %v3_d678, align 4
  br i1 %v2_d514, label %dec_label_pc_d680, label %dec_label_pc_d51c

dec_label_pc_d680:                                ; preds = %dec_label_pc_d618, %dec_label_pc_d510
  %v0_d680 = call i32 @function_10a44()
  store i32 %v0_d680, i32* %r0.global-to-local, align 4
  store i32 %v3_d218, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d690, i1* %cpsr_z.global-to-local, align 1
  %v1_d694 = load i32, i32* @r5, align 4
  %v2_d694 = add i32 %v1_d694, 12
  %v3_d694 = inttoptr i32 %v2_d694 to i32*
  store i32 %v0_d680, i32* %v3_d694, align 4
  br i1 %v3_d690, label %dec_label_pc_d69c, label %dec_label_pc_d680.dec_label_pc_d530_crit_edge

dec_label_pc_d680.dec_label_pc_d530_crit_edge:    ; preds = %dec_label_pc_d680
  %v1_d534.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d530

dec_label_pc_d69c:                                ; preds = %dec_label_pc_d680, %dec_label_pc_d51c
  %v0_d69c = call i32 @function_10a44()
  %v1_d69c = trunc i32 %v0_d69c to i8
  store i32 %v0_d69c, i32* %r0.global-to-local, align 4
  %v4_d6a029 = udiv i32 %v0_d69c, 256
  %v1_d6a4 = trunc i32 %v4_d6a029 to i8
  %v2_d6a4 = load i32, i32* @r5, align 4
  %v3_d6a4 = add i32 %v2_d6a4, 5
  %v4_d6a4 = inttoptr i32 %v3_d6a4 to i8*
  store i8 %v1_d6a4, i8* %v4_d6a4, align 1
  store i32 %v3_d21c, i32* %r3.global-to-local, align 4
  %v1_d6ac = load i32, i32* @r4, align 4
  %v9_d6ac = icmp eq i32 %v3_d21c, %v1_d6ac
  store i1 %v9_d6ac, i1* %cpsr_z.global-to-local, align 1
  %v3_d6b0 = load i32, i32* @r5, align 4
  %v4_d6b0 = add i32 %v3_d6b0, 4
  %v5_d6b0 = inttoptr i32 %v4_d6b0 to i8*
  store i8 %v1_d69c, i8* %v5_d6b0, align 1
  %v0_d6b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d6b4, label %dec_label_pc_d6b8, label %dec_label_pc_d69c.dec_label_pc_d53c_crit_edge

dec_label_pc_d69c.dec_label_pc_d53c_crit_edge:    ; preds = %dec_label_pc_d69c
  %v1_d540.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d53c

dec_label_pc_d6b8:                                ; preds = %dec_label_pc_d69c, %dec_label_pc_d530
  %v0_d6b8 = call i32 @function_10a44()
  %v1_d6b8 = trunc i32 %v0_d6b8 to i8
  store i32 %v0_d6b8, i32* %r0.global-to-local, align 4
  store i32 %v3_d220, i32* %ip.global-to-local, align 4
  %v4_d6c0 = sdiv i32 %v0_d6b8, 256
  store i32 %v4_d6c0, i32* %r3.global-to-local, align 4
  %v1_d6c4 = load i32, i32* @r4, align 4
  %v9_d6c4 = icmp eq i32 %v3_d220, %v1_d6c4
  store i1 %v9_d6c4, i1* %cpsr_z.global-to-local, align 1
  %v3_d6c8 = load i32, i32* @r5, align 4
  %v4_d6c8 = add i32 %v3_d6c8, 20
  %v5_d6c8 = inttoptr i32 %v4_d6c8 to i8*
  store i8 %v1_d6b8, i8* %v5_d6c8, align 1
  %v0_d6cc = load i32, i32* %r3.global-to-local, align 4
  %v1_d6cc = trunc i32 %v0_d6cc to i8
  %v2_d6cc = load i32, i32* @r6, align 4
  %v3_d6cc = add i32 %v2_d6cc, 1
  %v4_d6cc = inttoptr i32 %v3_d6cc to i8*
  store i8 %v1_d6cc, i8* %v4_d6cc, align 1
  %v0_d6d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d6d0, label %dec_label_pc_d6d4, label %dec_label_pc_d6b8.dec_label_pc_d548_crit_edge

dec_label_pc_d6b8.dec_label_pc_d548_crit_edge:    ; preds = %dec_label_pc_d6b8
  %v1_d54c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d548

dec_label_pc_d6d4:                                ; preds = %dec_label_pc_d6b8, %dec_label_pc_d53c
  %v0_d6d4 = call i32 @function_10a44()
  %v1_d6d4 = trunc i32 %v0_d6d4 to i8
  %v4_d6d8 = sdiv i32 %v0_d6d4, 256
  store i32 %v4_d6d8, i32* %r3.global-to-local, align 4
  %v3_d6dc = load i32, i32* @r6, align 4
  %v4_d6dc = add i32 %v3_d6dc, 2
  %v5_d6dc = inttoptr i32 %v4_d6dc to i8*
  store i8 %v1_d6d4, i8* %v5_d6dc, align 1
  store i32 %v5_d0ec, i32* %r0.global-to-local, align 4
  %v1_d6e4 = load i32, i32* @r4, align 4
  %v9_d6e4 = icmp eq i32 %v5_d0ec, %v1_d6e4
  store i1 %v9_d6e4, i1* %cpsr_z.global-to-local, align 1
  %v0_d6e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_d6e8 = trunc i32 %v0_d6e8 to i8
  %v2_d6e8 = load i32, i32* @r6, align 4
  %v3_d6e8 = add i32 %v2_d6e8, 3
  %v4_d6e8 = inttoptr i32 %v3_d6e8 to i8*
  store i8 %v1_d6e8, i8* %v4_d6e8, align 1
  %v0_d6ec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d6ec, label %dec_label_pc_d6f0, label %dec_label_pc_d6d4.dec_label_pc_d554_crit_edge

dec_label_pc_d6d4.dec_label_pc_d554_crit_edge:    ; preds = %dec_label_pc_d6d4
  %v1_d558.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d554

dec_label_pc_d6f0:                                ; preds = %dec_label_pc_d6d4, %dec_label_pc_d548
  %v0_d6f0 = call i32 @function_10a44()
  store i32 %v0_d6f0, i32* %r0.global-to-local, align 4
  store i32 %v6_d104, i32* %r2.global-to-local, align 4
  %v1_d6f8 = load i32, i32* @r4, align 4
  %v9_d6f8 = icmp eq i32 %v6_d104, %v1_d6f8
  store i1 %v9_d6f8, i1* %cpsr_z.global-to-local, align 1
  %v1_d6fc = load i32, i32* @r6, align 4
  %v2_d6fc = add i32 %v1_d6fc, 4
  %v3_d6fc = inttoptr i32 %v2_d6fc to i32*
  store i32 %v0_d6f0, i32* %v3_d6fc, align 4
  br i1 %v9_d6f8, label %dec_label_pc_d704, label %dec_label_pc_d560

dec_label_pc_d704:                                ; preds = %dec_label_pc_d6f0, %dec_label_pc_d554
  %v0_d704 = call i32 @function_10a44()
  store i32 %v0_d704, i32* %r0.global-to-local, align 4
  store i32 %v1_d224, i32* %r3.global-to-local, align 4
  store i1 %v2_d70c, i1* %cpsr_z.global-to-local, align 1
  %v1_d710 = load i32, i32* @r6, align 4
  %v2_d710 = add i32 %v1_d710, 8
  %v3_d710 = inttoptr i32 %v2_d710 to i32*
  store i32 %v0_d704, i32* %v3_d710, align 4
  br i1 %v2_d70c, label %dec_label_pc_d56c, label %dec_label_pc_d718

dec_label_pc_d718:                                ; preds = %dec_label_pc_d560, %dec_label_pc_d704
  %v0_d718 = call i32 @function_10a44()
  %v1_d718 = trunc i32 %v0_d718 to i8
  store i32 %v0_d718, i32* %r0.global-to-local, align 4
  %v4_d71c = sdiv i32 %v0_d718, 256
  store i32 %v4_d71c, i32* %r3.global-to-local, align 4
  %v1_d720 = trunc i32 %v4_d71c to i8
  %v2_d720 = load i32, i32* @r6, align 4
  %v3_d720 = add i32 %v2_d720, 19
  %v4_d720 = inttoptr i32 %v3_d720 to i8*
  store i8 %v1_d720, i8* %v4_d720, align 1
  %v3_d724 = load i32, i32* @r6, align 4
  %v4_d724 = add i32 %v3_d724, 18
  %v5_d724 = inttoptr i32 %v4_d724 to i8*
  store i8 %v1_d718, i8* %v5_d724, align 1
  br label %dec_label_pc_d56c

dec_label_pc_d72c:                                ; preds = %dec_label_pc_d1d4
  %v0_d72c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_d72c, i32* %r0.global-to-local, align 4
  %v1_d730 = call i32 @function_14234(i32 %v0_d72c)
  store i32 %v1_d730, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d734

dec_label_pc_d734:                                ; preds = %dec_label_pc_cffc, %dec_label_pc_d72c
  %v29_d738 = phi i32 [ %v3_d1c4, %dec_label_pc_cffc ], [ %v1_d730, %dec_label_pc_d72c ]
  store i32 %v3_cffc, i32* %r4.global-to-local, align 4
  store i32 %v12_cffc, i32* %r7.global-to-local, align 4
  ret i32 %v29_d738

; uselistorder directives
  uselistorder i32 %v4_d71c, { 1, 0 }
  uselistorder i32 %v0_d718, { 0, 2, 1 }
  uselistorder i32 %v0_d6b8, { 0, 2, 1 }
  uselistorder i32 %v0_d69c, { 0, 2, 1 }
  uselistorder i32 %v2_d670, { 1, 0 }
  uselistorder i32 %v8_d650, { 2, 0, 1, 3 }
  uselistorder i32 %v3_d63c, { 1, 0 }
  uselistorder i32 %v0_d62c, { 2, 0, 1, 3 }
  uselistorder i1 %v2_d60c, { 1, 0 }
  uselistorder i32 %v0_d600, { 1, 2, 3, 0 }
  uselistorder i32 %v1_d5fc, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_d5a4, { 0, 2, 1 }
  uselistorder i32 %v0_d58c, { 1, 0, 2 }
  uselistorder i1 %v7_d514, { 2, 1, 0 }
  uselistorder i1 %v2_d70c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_d690, { 1, 0, 2, 3 }
  uselistorder i32 %v1_d4c8, { 1, 0, 2, 3 }
  uselistorder i8 %v5_d2e0, { 1, 0 }
  uselistorder i32 %v1_d2c0, { 1, 0 }
  uselistorder i32 %v1_d2b0, { 1, 0 }
  uselistorder i32 %v1_d2ac, { 1, 0 }
  uselistorder i32 %v1_d2a8, { 1, 0 }
  uselistorder i32 %v3_d298, { 1, 0 }
  uselistorder i32 %v1_d288, { 1, 0 }
  uselistorder i32 %v1_d280, { 1, 0 }
  uselistorder i32 %v1_d25c, { 1, 0 }
  uselistorder i32 %v1_d258, { 1, 0 }
  uselistorder i32 %v1_d250, { 1, 0 }
  uselistorder i32 %v1_d224, { 2, 1, 3, 0 }
  uselistorder i32 %v3_d218, { 0, 1, 3, 2 }
  uselistorder i32 %v0_d214, { 3, 0, 1, 2 }
  uselistorder i32 %v0_d210, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_d1f4, { 1, 0 }
  uselistorder i1 %v7_d1c8, { 1, 0 }
  uselistorder i32 %v3_d1c4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_d1b0, { 6, 4, 0, 5, 1, 3, 2 }
  uselistorder i32 %v6_d104, { 3, 2, 1, 0 }
  uselistorder i32 %v5_d0ec, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_d09c, { 1, 0 }
  uselistorder i32 %v5_d034, { 1, 0 }
  uselistorder i32 %v1_d000, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 5, 6, 4, 7, 8, 10, 9, 12, 11, 13, 15, 14, 16, 17, 18, 21, 19, 20, 22, 23, 24, 25, 26, 54, 27, 28, 29, 30, 34, 31, 32, 33, 35, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32 10240, { 0, 6, 2, 7, 5, 8, 3, 9, 4, 10, 1, 11 }
  uselistorder i32 42, { 2, 0, 3, 1, 4 }
  uselistorder label %dec_label_pc_d734, { 1, 0 }
  uselistorder label %dec_label_pc_d718, { 1, 0 }
  uselistorder label %dec_label_pc_d56c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d4e0, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d740(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d740:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_d740 = load i32, i32* @fp, align 4
  %v1_d744 = urem i32 %arg1, 256
  store i32 %v1_d744, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_d75c = urem i32 %arg3, 256
  store i32 %v1_d75c, i32* @r4, align 4
  %v2_d760 = call i32 @function_14e34(i32 %v1_d744, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_d760, i32* @sl, align 4
  %v0_d76c = load i32, i32* @r7, align 4
  %v2_d770 = call i32 @function_14e34(i32 %v0_d76c, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_d77c = load i32, i32* @r6, align 4
  store i32 %v0_d77c, i32* %r1.global-to-local, align 4
  store i32 %v2_d770, i32* @sb, align 4
  %v0_d78c = load i32, i32* @r4, align 4
  %v4_d790 = inttoptr i32 %v0_d77c to i32*
  %v5_d790 = call i32 @function_a4e8(i32 %v0_d78c, i32* %v4_d790, i32 7, i32 65535)
  %v3_d798 = urem i32 %v5_d790, 65536
  %v0_d79c = load i32, i32* @r6, align 4
  store i32 %v0_d79c, i32* %r1.global-to-local, align 4
  %v0_d7a4 = load i32, i32* @r5, align 4
  %v0_d7a8 = load i32, i32* @r4, align 4
  %v5_d7b0 = inttoptr i32 %v0_d79c to i32*
  %v6_d7b0 = call i32 @function_a4e8(i32 %v0_d7a8, i32* %v5_d7b0, i32 6, i32 %v0_d7a4)
  %v0_d7b4 = load i32, i32* @r6, align 4
  store i32 %v0_d7b4, i32* %r1.global-to-local, align 4
  %v3_d7b8 = mul i32 %v6_d7b0, 65536
  store i32 %v3_d7b8, i32* %fp.global-to-local, align 4
  %v0_d7c4 = load i32, i32* @r4, align 4
  %v4_d7c8 = inttoptr i32 %v0_d7b4 to i32*
  %v5_d7c8 = call i32 @function_a4e8(i32 %v0_d7c4, i32* %v4_d7c8, i32 0, i32 512)
  %v0_d7d4 = load i32, i32* @r6, align 4
  store i32 %v0_d7d4, i32* %r1.global-to-local, align 4
  %v0_d7d8 = load i32, i32* @r4, align 4
  %v3_d7e0 = urem i32 %v5_d7c8, 65536
  store i32 %v3_d7e0, i32* @r6, align 4
  %v4_d7e4 = inttoptr i32 %v0_d7d4 to i32*
  %v5_d7e4 = call i32 @function_a4e8(i32 %v0_d7d8, i32* %v4_d7e4, i32 1, i32 1)
  %v0_d7e8 = load i32, i32* %fp.global-to-local, align 4
  %v3_d7e8 = udiv i32 %v0_d7e8, 65536
  %v1_d7f0 = load i32, i32* @r5, align 4
  %v9_d7f0 = icmp eq i32 %v3_d7e8, %v1_d7f0
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_d7f0, label %dec_label_pc_d818, label %bb

bb:                                               ; preds = %dec_label_pc_d740
  %v2_d804 = mul nuw nsw i32 %v3_d7e8, 256
  %v4_d808 = and i32 %v2_d804, 65280
  %v1_d80c = urem i32 %v5_d7e4, 256
  store i32 %v1_d80c, i32* @r8, align 4
  %v5_d810 = udiv i32 %v0_d7e8, 16777216
  %v6_d810 = or i32 %v4_d808, %v5_d810
  br label %dec_label_pc_d824

dec_label_pc_d818:                                ; preds = %dec_label_pc_d740
  %v1_d80c7 = urem i32 %v5_d7e4, 256
  store i32 %v1_d80c7, i32* @r8, align 4
  %v0_d818 = call i32 @function_10a44()
  %v3_d820 = urem i32 %v0_d818, 65536
  br label %dec_label_pc_d824

dec_label_pc_d824:                                ; preds = %bb, %dec_label_pc_d818
  %storemerge17 = phi i32 [ %v6_d810, %bb ], [ %v3_d820, %dec_label_pc_d818 ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_d824 = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_d824, 1
  br i1 %tmp41, label %dec_label_pc_d9cc.preheader, label %dec_label_pc_d82c

dec_label_pc_d9cc.preheader:                      ; preds = %dec_label_pc_d928, %dec_label_pc_d824
  %storemerge3.in12.ph = phi i32 [ %v0_d824, %dec_label_pc_d824 ], [ %v1_d880, %dec_label_pc_d928 ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_d994, label %dec_label_pc_d998.lr.ph

dec_label_pc_d82c:                                ; preds = %dec_label_pc_d824
  store i32 %v3_d798, i32* %r1.global-to-local, align 4
  %v3_d830 = udiv i32 %v5_d790, 256
  %v5_d83c = trunc i32 %v3_d830 to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_d854 = udiv i32 %v5_d790, 65536
  store i32 %v3_d854, i32* @r4, align 4
  %v4_d864 = trunc i32 %v3_d854 to i8
  store i8 %v4_d864, i8* %stack_var_-80, align 1
  %v3_d974 = icmp eq i32 %v3_d798, 65535
  %v2_d89c = ptrtoint i32* %stack_var_-52 to i32
  %v3_d8cc = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_d958

dec_label_pc_d86c:                                ; preds = %dec_label_pc_d958
  %v2_d86c = load i8, i8* %stack_var_-80, align 1
  %v3_d86c = sext i8 %v2_d86c to i32
  store i32 %v3_d86c, i32* %r1.global-to-local, align 4
  store i32 %v3_d830, i32* @r4, align 4
  %v2_d870 = load i32, i32* @r5, align 4
  %v3_d870 = add i32 %v2_d870, 2
  %v4_d870 = inttoptr i32 %v3_d870 to i8*
  store i8 %v5_d83c, i8* %v4_d870, align 1
  %v0_d874 = load i32, i32* %r1.global-to-local, align 4
  %v1_d874 = trunc i32 %v0_d874 to i8
  %v2_d874 = load i32, i32* @r5, align 4
  %v3_d874 = add i32 %v2_d874, 3
  %v4_d874 = inttoptr i32 %v3_d874 to i8*
  store i8 %v1_d874, i8* %v4_d874, align 1
  br label %dec_label_pc_d878

dec_label_pc_d878:                                ; preds = %dec_label_pc_d980, %dec_label_pc_d86c
  %v1_d880 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_d890 = call i32 @function_14b30(i32 2, i32 2, i32 17)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_d898 = icmp eq i32 %v3_d890, -1
  store i32 %v2_d89c, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v2_d8ac = load i32, i32* @sb, align 4
  %v3_d8ac = add i32 %v2_d8ac, %stack_var_-60.0
  %v4_d8ac = inttoptr i32 %v3_d8ac to i32*
  store i32 %v3_d890, i32* %v4_d8ac, align 4
  br i1 %v7_d898, label %dec_label_pc_d9d8, label %dec_label_pc_d8b4

dec_label_pc_d8b4:                                ; preds = %dec_label_pc_d878
  store i32 2, i32* %stack_var_-52, align 4
  %v4_d8cc = call i32 @function_14960(i32 %v3_d890, %sockaddr* %v3_d8cc, i32 16)
  %v0_d8d0 = load i32, i32* @r5, align 4
  %v1_d8d0 = add i32 %v0_d8d0, 20
  %v2_d8d0 = inttoptr i32 %v1_d8d0 to i8*
  %v3_d8d0 = load i8, i8* %v2_d8d0, align 1
  %tmp = icmp ugt i8 %v3_d8d0, 31
  br i1 %tmp, label %dec_label_pc_d928, label %dec_label_pc_d8dc

dec_label_pc_d8dc:                                ; preds = %dec_label_pc_d8b4
  %v1_d8dc = add i32 %v0_d8d0, 16
  %v2_d8dc = inttoptr i32 %v1_d8dc to i32*
  %v3_d8dc = load i32, i32* %v2_d8dc, align 4
  store i32 %v3_d8dc, i32* @r4, align 4
  %v0_d8e0 = call i32 @function_10a44()
  %v0_d8e4 = load i32, i32* @r4, align 4
  %v1_d8e8 = and i32 %v0_d8e4, 65280
  %v3_d8f0 = mul i32 %v0_d8e4, 16777216
  %v4_d8f4 = mul nuw nsw i32 %v1_d8e8, 256
  %v5_d8f4 = or i32 %v4_d8f4, %v3_d8f0
  store i32 %v5_d8f4, i32* %r1.global-to-local, align 4
  %v0_d8fc = load i32, i32* @r5, align 4
  %v1_d8fc = add i32 %v0_d8fc, 20
  %v2_d8fc = inttoptr i32 %v1_d8fc to i8*
  %v3_d8fc = load i8, i8* %v2_d8fc, align 1
  %v4_d8fc = zext i8 %v3_d8fc to i32
  %v2_d900 = call i32 @llvm.bswap.i32(i32 %v0_d8e4)
  %v7_d904 = lshr i32 %v0_d8e0, %v4_d8fc
  %v8_d904 = add i32 %v7_d904, %v2_d900
  %v3_d910 = mul i32 %v8_d904, 16777216
  %v1_d914 = and i32 %v8_d904, 65280
  %v4_d918 = mul nuw nsw i32 %v1_d914, 256
  %v5_d918 = or i32 %v4_d918, %v3_d910
  store i32 %v5_d918, i32* %r1.global-to-local, align 4
  %v2_d920 = call i32 @llvm.bswap.i32(i32 %v8_d904)
  %v2_d924 = add i32 %v0_d8fc, 4
  %v3_d924 = inttoptr i32 %v2_d924 to i32*
  store i32 %v2_d920, i32* %v3_d924, align 4
  %v0_d934.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_d928

dec_label_pc_d928:                                ; preds = %dec_label_pc_d8b4, %dec_label_pc_d8dc
  %v0_d934 = phi i32 [ %v0_d8d0, %dec_label_pc_d8b4 ], [ %v0_d934.pre, %dec_label_pc_d8dc ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_d930 = load i32, i32* @sb, align 4
  %v2_d930 = add i32 %v1_d930, %stack_var_-60.0
  %v3_d930 = inttoptr i32 %v2_d930 to i32*
  %v4_d930 = load i32, i32* %v3_d930, align 4
  store i32 %v0_d934, i32* %r1.global-to-local, align 4
  %v3_d938 = inttoptr i32 %v0_d934 to %sockaddr*
  %v4_d938 = call i32 @function_1498c(i32 %v4_d930, %sockaddr* %v3_d938, i32 16)
  %v1_d944 = add i32 %stack_var_-60.0, 4
  %v1_d948 = load i32, i32* @r7, align 4
  %v9_d948 = icmp eq i32 %v1_d880, %v1_d948
  %v0_d950 = load i32, i32* @r5, align 4
  %v1_d950 = add i32 %v0_d950, 24
  store i32 %v1_d950, i32* @r5, align 4
  br i1 %v9_d948, label %dec_label_pc_d9cc.preheader, label %dec_label_pc_d958

dec_label_pc_d958:                                ; preds = %dec_label_pc_d928, %dec_label_pc_d82c
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_d82c ], [ %v1_d944, %dec_label_pc_d928 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_d82c ], [ %v1_d880, %dec_label_pc_d928 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d964 = call i32 @function_14e34(i32 65535, i32 1)
  store i32 %v3_d798, i32* %r1.global-to-local, align 4
  %v2_d978 = load i32, i32* @sl, align 4
  %v3_d978 = add i32 %v2_d978, %stack_var_-60.0
  %v4_d978 = inttoptr i32 %v3_d978 to i32*
  store i32 %v2_d964, i32* %v4_d978, align 4
  br i1 %v3_d974, label %dec_label_pc_d980, label %dec_label_pc_d86c

dec_label_pc_d980:                                ; preds = %dec_label_pc_d958
  %v0_d980 = call i32 @function_10a44()
  %v1_d980 = trunc i32 %v0_d980 to i8
  %v4_d984 = sdiv i32 %v0_d980, 256
  %v1_d988 = trunc i32 %v4_d984 to i8
  %v2_d988 = load i32, i32* @r5, align 4
  %v3_d988 = add i32 %v2_d988, 3
  %v4_d988 = inttoptr i32 %v3_d988 to i8*
  store i8 %v1_d988, i8* %v4_d988, align 1
  %v3_d98c = load i32, i32* @r5, align 4
  %v4_d98c = add i32 %v3_d98c, 2
  %v5_d98c = inttoptr i32 %v4_d98c to i8*
  store i8 %v1_d980, i8* %v5_d98c, align 1
  br label %dec_label_pc_d878

dec_label_pc_d994:                                ; preds = %dec_label_pc_d9cc.loopexit, %dec_label_pc_d9cc.preheader, %dec_label_pc_d9d0.loopexit, %dec_label_pc_d994
  br label %dec_label_pc_d994

dec_label_pc_d998:                                ; preds = %dec_label_pc_d998.lr.ph, %dec_label_pc_d9d0.loopexit
  %v0_d998 = load i32, i32* @r8, align 4
  %v2_d998 = icmp eq i32 %v0_d998, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_d998, label %dec_label_pc_d9a0, label %dec_label_pc_d9e0

dec_label_pc_d9a0:                                ; preds = %dec_label_pc_d998
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_d9a8

dec_label_pc_d9a8:                                ; preds = %dec_label_pc_d9a8, %dec_label_pc_d9a0
  %v0_d9b0 = phi i32 [ %v1_d9b0, %dec_label_pc_d9a8 ], [ 0, %dec_label_pc_d9a0 ]
  %v0_d9a8 = phi i32 [ %v1_d9c4, %dec_label_pc_d9a8 ], [ 0, %dec_label_pc_d9a0 ]
  %v1_d9a8 = load i32, i32* @sb, align 4
  %v2_d9a8 = add i32 %v1_d9a8, %v0_d9a8
  %v3_d9a8 = inttoptr i32 %v2_d9a8 to i32*
  %v4_d9a8 = load i32, i32* %v3_d9a8, align 4
  %v1_d9ac = load i32, i32* @sl, align 4
  %v2_d9ac = add i32 %v1_d9ac, %v0_d9a8
  %v3_d9ac = inttoptr i32 %v2_d9ac to i32*
  %v4_d9ac = load i32, i32* %v3_d9ac, align 4
  store i32 %v4_d9ac, i32* %r1.global-to-local, align 4
  %v1_d9b0 = add i32 %v0_d9b0, 1
  %v0_d9b4 = load i32, i32* @r6, align 4
  %v4_d9bc = inttoptr i32 %v4_d9ac to i32*
  %v5_d9bc = call i32 @function_14aa0(i32 %v4_d9a8, i32* %v4_d9bc, i32 %v0_d9b4, i32 16384)
  %v1_d9c0 = load i32, i32* @r7, align 4
  %v9_d9c0 = icmp eq i32 %v1_d9b0, %v1_d9c0
  %v0_d9c4 = load i32, i32* @r4, align 4
  %v1_d9c4 = add i32 %v0_d9c4, 4
  store i32 %v1_d9c4, i32* @r4, align 4
  br i1 %v9_d9c0, label %dec_label_pc_d9cc.loopexit, label %dec_label_pc_d9a8

dec_label_pc_d9cc.loopexit:                       ; preds = %dec_label_pc_d9a8
  %tmp4247 = icmp slt i32 %v1_d9b0, 1
  br i1 %tmp4247, label %dec_label_pc_d994, label %dec_label_pc_d998.lr.ph

dec_label_pc_d998.lr.ph:                          ; preds = %dec_label_pc_d9cc.preheader, %dec_label_pc_d9cc.loopexit
  br label %dec_label_pc_d998

dec_label_pc_d9d0.loopexit:                       ; preds = %dec_label_pc_d9e8
  %tmp42 = icmp slt i32 %v0_da10, 1
  br i1 %tmp42, label %dec_label_pc_d994, label %dec_label_pc_d998

dec_label_pc_d9d8:                                ; preds = %dec_label_pc_d878
  store i32 %v24_d740, i32* %fp.global-to-local, align 4
  ret i32 %v3_d890

dec_label_pc_d9e0:                                ; preds = %dec_label_pc_d998
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_d9e8

dec_label_pc_d9e8:                                ; preds = %dec_label_pc_d9e8, %dec_label_pc_d9e0
  %v0_d9e8 = phi i32 [ %v1_da14, %dec_label_pc_d9e8 ], [ 0, %dec_label_pc_d9e0 ]
  %v1_d9e8 = load i32, i32* @sl, align 4
  %v2_d9e8 = add i32 %v1_d9e8, %v0_d9e8
  %v3_d9e8 = inttoptr i32 %v2_d9e8 to i32*
  %v4_d9e8 = load i32, i32* %v3_d9e8, align 4
  store i32 %v4_d9e8, i32* @r4, align 4
  %v0_d9ec = load i32, i32* @r6, align 4
  store i32 %v0_d9ec, i32* @r1, align 4
  %v1_d9f4 = inttoptr i32 %v4_d9e8 to i8*
  %v2_d9f4 = call i32 @function_10c20(i8* %v1_d9f4)
  %v0_d9f8 = load i32, i32* @r5, align 4
  %v1_d9f8 = add i32 %v0_d9f8, 1
  store i32 %v1_d9f8, i32* @r5, align 4
  %v0_d9fc = load i32, i32* @fp, align 4
  %v1_d9fc = load i32, i32* @sb, align 4
  %v2_d9fc = add i32 %v1_d9fc, %v0_d9fc
  %v3_d9fc = inttoptr i32 %v2_d9fc to i32*
  %v4_d9fc = load i32, i32* %v3_d9fc, align 4
  %v0_da00 = load i32, i32* @r4, align 4
  store i32 %v0_da00, i32* %r1.global-to-local, align 4
  %v0_da04 = load i32, i32* @r6, align 4
  %v4_da0c = inttoptr i32 %v0_da00 to i32*
  %v5_da0c = call i32 @function_14aa0(i32 %v4_d9fc, i32* %v4_da0c, i32 %v0_da04, i32 16384)
  %v0_da10 = load i32, i32* @r5, align 4
  %v1_da10 = load i32, i32* @r7, align 4
  %v9_da10 = icmp eq i32 %v0_da10, %v1_da10
  %v0_da14 = load i32, i32* @fp, align 4
  %v1_da14 = add i32 %v0_da14, 4
  store i32 %v1_da14, i32* @fp, align 4
  br i1 %v9_da10, label %dec_label_pc_d9d0.loopexit, label %dec_label_pc_d9e8

; uselistorder directives
  uselistorder i32 %v1_da14, { 1, 0 }
  uselistorder i32 %v0_da10, { 1, 0 }
  uselistorder i32 %v1_d9c4, { 1, 0 }
  uselistorder i32 %v1_d9b0, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_d934, { 1, 0 }
  uselistorder i32 %v8_d904, { 1, 2, 0 }
  uselistorder i32 %v0_d8e4, { 1, 0, 2 }
  uselistorder i32 %v3_d890, { 1, 3, 2, 0 }
  uselistorder i32 %v1_d880, { 1, 2, 0 }
  uselistorder i32 %v3_d854, { 1, 0 }
  uselistorder i32 %v3_d830, { 1, 0 }
  uselistorder i32 %v3_d798, { 0, 2, 1 }
  uselistorder i32 %v1_d744, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_d998.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_d998, { 1, 0 }
  uselistorder label %dec_label_pc_d994, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_d928, { 1, 0 }
  uselistorder label %dec_label_pc_d824, { 1, 0 }
}

define i32 @function_da24(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_da24:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_da24 = load i32, i32* @fp, align 4
  %v1_da28 = urem i32 %arg1, 256
  store i32 %v1_da28, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_da40 = urem i32 %arg3, 256
  store i32 %v1_da40, i32* @r4, align 4
  %v2_da44 = call i32 @function_14e34(i32 %v1_da28, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_da44, i32* @sl, align 4
  %v0_da50 = load i32, i32* @r7, align 4
  %v2_da54 = call i32 @function_14e34(i32 %v0_da50, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_da60 = load i32, i32* @r6, align 4
  store i32 %v0_da60, i32* %r1.global-to-local, align 4
  store i32 %v2_da54, i32* @sb, align 4
  %v0_da70 = load i32, i32* @r4, align 4
  %v4_da74 = inttoptr i32 %v0_da60 to i32*
  %v5_da74 = call i32 @function_a4e8(i32 %v0_da70, i32* %v4_da74, i32 7, i32 65535)
  %v3_da7c = urem i32 %v5_da74, 65536
  %v0_da80 = load i32, i32* @r6, align 4
  store i32 %v0_da80, i32* %r1.global-to-local, align 4
  %v0_da88 = load i32, i32* @r5, align 4
  %v0_da8c = load i32, i32* @r4, align 4
  %v5_da94 = inttoptr i32 %v0_da80 to i32*
  %v6_da94 = call i32 @function_a4e8(i32 %v0_da8c, i32* %v5_da94, i32 6, i32 %v0_da88)
  %v0_da98 = load i32, i32* @r6, align 4
  store i32 %v0_da98, i32* %r1.global-to-local, align 4
  %v3_da9c = mul i32 %v6_da94, 65536
  store i32 %v3_da9c, i32* %fp.global-to-local, align 4
  %v0_daa8 = load i32, i32* @r4, align 4
  %v4_daac = inttoptr i32 %v0_da98 to i32*
  %v5_daac = call i32 @function_a4e8(i32 %v0_daa8, i32* %v4_daac, i32 0, i32 1024)
  %v0_dab8 = load i32, i32* @r6, align 4
  store i32 %v0_dab8, i32* %r1.global-to-local, align 4
  %v0_dabc = load i32, i32* @r4, align 4
  %v3_dac4 = urem i32 %v5_daac, 65536
  store i32 %v3_dac4, i32* @r6, align 4
  %v4_dac8 = inttoptr i32 %v0_dab8 to i32*
  %v5_dac8 = call i32 @function_a4e8(i32 %v0_dabc, i32* %v4_dac8, i32 1, i32 1)
  %v0_dacc = load i32, i32* %fp.global-to-local, align 4
  %v3_dacc = udiv i32 %v0_dacc, 65536
  %v1_dad4 = load i32, i32* @r5, align 4
  %v9_dad4 = icmp eq i32 %v3_dacc, %v1_dad4
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_dad4, label %dec_label_pc_dafc, label %bb

bb:                                               ; preds = %dec_label_pc_da24
  %v2_dae8 = mul nuw nsw i32 %v3_dacc, 256
  %v4_daec = and i32 %v2_dae8, 65280
  %v1_daf0 = urem i32 %v5_dac8, 256
  store i32 %v1_daf0, i32* @r8, align 4
  %v5_daf4 = udiv i32 %v0_dacc, 16777216
  %v6_daf4 = or i32 %v4_daec, %v5_daf4
  br label %dec_label_pc_db08

dec_label_pc_dafc:                                ; preds = %dec_label_pc_da24
  %v1_daf07 = urem i32 %v5_dac8, 256
  store i32 %v1_daf07, i32* @r8, align 4
  %v0_dafc = call i32 @function_10a44()
  %v3_db04 = urem i32 %v0_dafc, 65536
  br label %dec_label_pc_db08

dec_label_pc_db08:                                ; preds = %bb, %dec_label_pc_dafc
  %storemerge17 = phi i32 [ %v6_daf4, %bb ], [ %v3_db04, %dec_label_pc_dafc ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_db08 = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_db08, 1
  br i1 %tmp41, label %dec_label_pc_dcb0.preheader, label %dec_label_pc_db10

dec_label_pc_dcb0.preheader:                      ; preds = %dec_label_pc_dc0c, %dec_label_pc_db08
  %storemerge3.in12.ph = phi i32 [ %v0_db08, %dec_label_pc_db08 ], [ %v1_db64, %dec_label_pc_dc0c ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_dc78, label %dec_label_pc_dc7c.lr.ph

dec_label_pc_db10:                                ; preds = %dec_label_pc_db08
  store i32 %v3_da7c, i32* %r1.global-to-local, align 4
  %v3_db14 = udiv i32 %v5_da74, 256
  %v5_db20 = trunc i32 %v3_db14 to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_db38 = udiv i32 %v5_da74, 65536
  store i32 %v3_db38, i32* @r4, align 4
  %v4_db48 = trunc i32 %v3_db38 to i8
  store i8 %v4_db48, i8* %stack_var_-80, align 1
  %v3_dc58 = icmp eq i32 %v3_da7c, 65535
  %v2_db80 = ptrtoint i32* %stack_var_-52 to i32
  %v3_dbb0 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_dc3c

dec_label_pc_db50:                                ; preds = %dec_label_pc_dc3c
  %v2_db50 = load i8, i8* %stack_var_-80, align 1
  %v3_db50 = sext i8 %v2_db50 to i32
  store i32 %v3_db50, i32* %r1.global-to-local, align 4
  store i32 %v3_db14, i32* @r4, align 4
  %v2_db54 = load i32, i32* @r5, align 4
  %v3_db54 = add i32 %v2_db54, 2
  %v4_db54 = inttoptr i32 %v3_db54 to i8*
  store i8 %v5_db20, i8* %v4_db54, align 1
  %v0_db58 = load i32, i32* %r1.global-to-local, align 4
  %v1_db58 = trunc i32 %v0_db58 to i8
  %v2_db58 = load i32, i32* @r5, align 4
  %v3_db58 = add i32 %v2_db58, 3
  %v4_db58 = inttoptr i32 %v3_db58 to i8*
  store i8 %v1_db58, i8* %v4_db58, align 1
  br label %dec_label_pc_db5c

dec_label_pc_db5c:                                ; preds = %dec_label_pc_dc64, %dec_label_pc_db50
  %v1_db64 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_db74 = call i32 @function_14b30(i32 2, i32 2, i32 0)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_db7c = icmp eq i32 %v3_db74, -1
  store i32 %v2_db80, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v2_db90 = load i32, i32* @sb, align 4
  %v3_db90 = add i32 %v2_db90, %stack_var_-60.0
  %v4_db90 = inttoptr i32 %v3_db90 to i32*
  store i32 %v3_db74, i32* %v4_db90, align 4
  br i1 %v7_db7c, label %dec_label_pc_dcbc, label %dec_label_pc_db98

dec_label_pc_db98:                                ; preds = %dec_label_pc_db5c
  store i32 2, i32* %stack_var_-52, align 4
  %v4_dbb0 = call i32 @function_14960(i32 %v3_db74, %sockaddr* %v3_dbb0, i32 16)
  %v0_dbb4 = load i32, i32* @r5, align 4
  %v1_dbb4 = add i32 %v0_dbb4, 20
  %v2_dbb4 = inttoptr i32 %v1_dbb4 to i8*
  %v3_dbb4 = load i8, i8* %v2_dbb4, align 1
  %tmp = icmp ugt i8 %v3_dbb4, 31
  br i1 %tmp, label %dec_label_pc_dc0c, label %dec_label_pc_dbc0

dec_label_pc_dbc0:                                ; preds = %dec_label_pc_db98
  %v1_dbc0 = add i32 %v0_dbb4, 16
  %v2_dbc0 = inttoptr i32 %v1_dbc0 to i32*
  %v3_dbc0 = load i32, i32* %v2_dbc0, align 4
  store i32 %v3_dbc0, i32* @r4, align 4
  %v0_dbc4 = call i32 @function_10a44()
  %v0_dbc8 = load i32, i32* @r4, align 4
  %v1_dbcc = and i32 %v0_dbc8, 65280
  %v3_dbd4 = mul i32 %v0_dbc8, 16777216
  %v4_dbd8 = mul nuw nsw i32 %v1_dbcc, 256
  %v5_dbd8 = or i32 %v4_dbd8, %v3_dbd4
  store i32 %v5_dbd8, i32* %r1.global-to-local, align 4
  %v0_dbe0 = load i32, i32* @r5, align 4
  %v1_dbe0 = add i32 %v0_dbe0, 20
  %v2_dbe0 = inttoptr i32 %v1_dbe0 to i8*
  %v3_dbe0 = load i8, i8* %v2_dbe0, align 1
  %v4_dbe0 = zext i8 %v3_dbe0 to i32
  %v2_dbe4 = call i32 @llvm.bswap.i32(i32 %v0_dbc8)
  %v7_dbe8 = lshr i32 %v0_dbc4, %v4_dbe0
  %v8_dbe8 = add i32 %v7_dbe8, %v2_dbe4
  %v3_dbf4 = mul i32 %v8_dbe8, 16777216
  %v1_dbf8 = and i32 %v8_dbe8, 65280
  %v4_dbfc = mul nuw nsw i32 %v1_dbf8, 256
  %v5_dbfc = or i32 %v4_dbfc, %v3_dbf4
  store i32 %v5_dbfc, i32* %r1.global-to-local, align 4
  %v2_dc04 = call i32 @llvm.bswap.i32(i32 %v8_dbe8)
  %v2_dc08 = add i32 %v0_dbe0, 4
  %v3_dc08 = inttoptr i32 %v2_dc08 to i32*
  store i32 %v2_dc04, i32* %v3_dc08, align 4
  %v0_dc18.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_dc0c

dec_label_pc_dc0c:                                ; preds = %dec_label_pc_db98, %dec_label_pc_dbc0
  %v0_dc18 = phi i32 [ %v0_dbb4, %dec_label_pc_db98 ], [ %v0_dc18.pre, %dec_label_pc_dbc0 ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_dc14 = load i32, i32* @sb, align 4
  %v2_dc14 = add i32 %v1_dc14, %stack_var_-60.0
  %v3_dc14 = inttoptr i32 %v2_dc14 to i32*
  %v4_dc14 = load i32, i32* %v3_dc14, align 4
  store i32 %v0_dc18, i32* %r1.global-to-local, align 4
  %v3_dc1c = inttoptr i32 %v0_dc18 to %sockaddr*
  %v4_dc1c = call i32 @function_1498c(i32 %v4_dc14, %sockaddr* %v3_dc1c, i32 16)
  %v1_dc28 = add i32 %stack_var_-60.0, 4
  %v1_dc2c = load i32, i32* @r7, align 4
  %v9_dc2c = icmp eq i32 %v1_db64, %v1_dc2c
  %v0_dc34 = load i32, i32* @r5, align 4
  %v1_dc34 = add i32 %v0_dc34, 24
  store i32 %v1_dc34, i32* @r5, align 4
  br i1 %v9_dc2c, label %dec_label_pc_dcb0.preheader, label %dec_label_pc_dc3c

dec_label_pc_dc3c:                                ; preds = %dec_label_pc_dc0c, %dec_label_pc_db10
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_db10 ], [ %v1_dc28, %dec_label_pc_dc0c ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_db10 ], [ %v1_db64, %dec_label_pc_dc0c ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_dc48 = call i32 @function_14e34(i32 65535, i32 1)
  store i32 %v3_da7c, i32* %r1.global-to-local, align 4
  %v2_dc5c = load i32, i32* @sl, align 4
  %v3_dc5c = add i32 %v2_dc5c, %stack_var_-60.0
  %v4_dc5c = inttoptr i32 %v3_dc5c to i32*
  store i32 %v2_dc48, i32* %v4_dc5c, align 4
  br i1 %v3_dc58, label %dec_label_pc_dc64, label %dec_label_pc_db50

dec_label_pc_dc64:                                ; preds = %dec_label_pc_dc3c
  %v0_dc64 = call i32 @function_10a44()
  %v1_dc64 = trunc i32 %v0_dc64 to i8
  %v4_dc68 = sdiv i32 %v0_dc64, 256
  %v1_dc6c = trunc i32 %v4_dc68 to i8
  %v2_dc6c = load i32, i32* @r5, align 4
  %v3_dc6c = add i32 %v2_dc6c, 3
  %v4_dc6c = inttoptr i32 %v3_dc6c to i8*
  store i8 %v1_dc6c, i8* %v4_dc6c, align 1
  %v3_dc70 = load i32, i32* @r5, align 4
  %v4_dc70 = add i32 %v3_dc70, 2
  %v5_dc70 = inttoptr i32 %v4_dc70 to i8*
  store i8 %v1_dc64, i8* %v5_dc70, align 1
  br label %dec_label_pc_db5c

dec_label_pc_dc78:                                ; preds = %dec_label_pc_dcb0.loopexit, %dec_label_pc_dcb0.preheader, %dec_label_pc_dcb4.loopexit, %dec_label_pc_dc78
  br label %dec_label_pc_dc78

dec_label_pc_dc7c:                                ; preds = %dec_label_pc_dc7c.lr.ph, %dec_label_pc_dcb4.loopexit
  %v0_dc7c = load i32, i32* @r8, align 4
  %v2_dc7c = icmp eq i32 %v0_dc7c, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_dc7c, label %dec_label_pc_dc84, label %dec_label_pc_dcc4

dec_label_pc_dc84:                                ; preds = %dec_label_pc_dc7c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_dc8c

dec_label_pc_dc8c:                                ; preds = %dec_label_pc_dc8c, %dec_label_pc_dc84
  %v0_dc94 = phi i32 [ %v1_dc94, %dec_label_pc_dc8c ], [ 0, %dec_label_pc_dc84 ]
  %v0_dc8c = phi i32 [ %v1_dca8, %dec_label_pc_dc8c ], [ 0, %dec_label_pc_dc84 ]
  %v1_dc8c = load i32, i32* @sb, align 4
  %v2_dc8c = add i32 %v1_dc8c, %v0_dc8c
  %v3_dc8c = inttoptr i32 %v2_dc8c to i32*
  %v4_dc8c = load i32, i32* %v3_dc8c, align 4
  %v1_dc90 = load i32, i32* @sl, align 4
  %v2_dc90 = add i32 %v1_dc90, %v0_dc8c
  %v3_dc90 = inttoptr i32 %v2_dc90 to i32*
  %v4_dc90 = load i32, i32* %v3_dc90, align 4
  store i32 %v4_dc90, i32* %r1.global-to-local, align 4
  %v1_dc94 = add i32 %v0_dc94, 1
  %v0_dc98 = load i32, i32* @r6, align 4
  %v4_dca0 = inttoptr i32 %v4_dc90 to i32*
  %v5_dca0 = call i32 @function_14aa0(i32 %v4_dc8c, i32* %v4_dca0, i32 %v0_dc98, i32 16384)
  %v1_dca4 = load i32, i32* @r7, align 4
  %v9_dca4 = icmp eq i32 %v1_dc94, %v1_dca4
  %v0_dca8 = load i32, i32* @r4, align 4
  %v1_dca8 = add i32 %v0_dca8, 4
  store i32 %v1_dca8, i32* @r4, align 4
  br i1 %v9_dca4, label %dec_label_pc_dcb0.loopexit, label %dec_label_pc_dc8c

dec_label_pc_dcb0.loopexit:                       ; preds = %dec_label_pc_dc8c
  %tmp4247 = icmp slt i32 %v1_dc94, 1
  br i1 %tmp4247, label %dec_label_pc_dc78, label %dec_label_pc_dc7c.lr.ph

dec_label_pc_dc7c.lr.ph:                          ; preds = %dec_label_pc_dcb0.preheader, %dec_label_pc_dcb0.loopexit
  br label %dec_label_pc_dc7c

dec_label_pc_dcb4.loopexit:                       ; preds = %dec_label_pc_dccc
  %tmp42 = icmp slt i32 %v0_dcf4, 1
  br i1 %tmp42, label %dec_label_pc_dc78, label %dec_label_pc_dc7c

dec_label_pc_dcbc:                                ; preds = %dec_label_pc_db5c
  store i32 %v24_da24, i32* %fp.global-to-local, align 4
  ret i32 %v3_db74

dec_label_pc_dcc4:                                ; preds = %dec_label_pc_dc7c
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_dccc

dec_label_pc_dccc:                                ; preds = %dec_label_pc_dccc, %dec_label_pc_dcc4
  %v0_dccc = phi i32 [ %v1_dcf8, %dec_label_pc_dccc ], [ 0, %dec_label_pc_dcc4 ]
  %v1_dccc = load i32, i32* @sl, align 4
  %v2_dccc = add i32 %v1_dccc, %v0_dccc
  %v3_dccc = inttoptr i32 %v2_dccc to i32*
  %v4_dccc = load i32, i32* %v3_dccc, align 4
  store i32 %v4_dccc, i32* @r4, align 4
  %v0_dcd0 = load i32, i32* @r6, align 4
  store i32 %v0_dcd0, i32* @r1, align 4
  %v1_dcd8 = inttoptr i32 %v4_dccc to i8*
  %v2_dcd8 = call i32 @function_10c20(i8* %v1_dcd8)
  %v0_dcdc = load i32, i32* @r5, align 4
  %v1_dcdc = add i32 %v0_dcdc, 1
  store i32 %v1_dcdc, i32* @r5, align 4
  %v0_dce0 = load i32, i32* @fp, align 4
  %v1_dce0 = load i32, i32* @sb, align 4
  %v2_dce0 = add i32 %v1_dce0, %v0_dce0
  %v3_dce0 = inttoptr i32 %v2_dce0 to i32*
  %v4_dce0 = load i32, i32* %v3_dce0, align 4
  %v0_dce4 = load i32, i32* @r4, align 4
  store i32 %v0_dce4, i32* %r1.global-to-local, align 4
  %v0_dce8 = load i32, i32* @r6, align 4
  %v4_dcf0 = inttoptr i32 %v0_dce4 to i32*
  %v5_dcf0 = call i32 @function_14aa0(i32 %v4_dce0, i32* %v4_dcf0, i32 %v0_dce8, i32 16384)
  %v0_dcf4 = load i32, i32* @r5, align 4
  %v1_dcf4 = load i32, i32* @r7, align 4
  %v9_dcf4 = icmp eq i32 %v0_dcf4, %v1_dcf4
  %v0_dcf8 = load i32, i32* @fp, align 4
  %v1_dcf8 = add i32 %v0_dcf8, 4
  store i32 %v1_dcf8, i32* @fp, align 4
  br i1 %v9_dcf4, label %dec_label_pc_dcb4.loopexit, label %dec_label_pc_dccc

; uselistorder directives
  uselistorder i32 %v1_dcf8, { 1, 0 }
  uselistorder i32 %v0_dcf4, { 1, 0 }
  uselistorder i32 %v1_dca8, { 1, 0 }
  uselistorder i32 %v1_dc94, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_dc18, { 1, 0 }
  uselistorder i32 %v8_dbe8, { 1, 2, 0 }
  uselistorder i32 %v0_dbc8, { 1, 0, 2 }
  uselistorder i32 %v3_db74, { 1, 3, 2, 0 }
  uselistorder i32 %v1_db64, { 1, 2, 0 }
  uselistorder i32 %v3_db38, { 1, 0 }
  uselistorder i32 %v3_db14, { 1, 0 }
  uselistorder i32 %v3_da7c, { 0, 2, 1 }
  uselistorder i32 %v1_da28, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_dc7c.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_dc7c, { 1, 0 }
  uselistorder label %dec_label_pc_dc78, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_dc0c, { 1, 0 }
  uselistorder label %dec_label_pc_db08, { 1, 0 }
}

define i32 @function_dd08(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_dd08:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_dd08 = load i32, i32* @sb, align 4
  %v24_dd08 = load i32, i32* @fp, align 4
  %v1_dd0c = urem i32 %arg1, 256
  store i32 %v1_dd0c, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_dd0c, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_dd24 = urem i32 %arg3, 256
  store i32 %v1_dd24, i32* @r4, align 4
  %v2_dd28 = call i32 @function_14e34(i32 %v1_dd0c, i32 4)
  %v0_dd2c = load i32, i32* @r5, align 4
  store i32 %v0_dd2c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_dd3c = load i32, i32* @r4, align 4
  store i32 %v0_dd3c, i32* %r0.global-to-local, align 4
  %v5_dd40 = inttoptr i32 %v0_dd2c to i32*
  %v6_dd40 = call i32 @function_a4e8(i32 %v0_dd3c, i32* %v5_dd40, i32 2, i32 0)
  %v1_dd4c = urem i32 %v6_dd40, 256
  store i32 %v1_dd4c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_dd58 = load i32, i32* @r5, align 4
  store i32 %v0_dd58, i32* %r1.global-to-local, align 4
  %v0_dd5c = load i32, i32* @r4, align 4
  store i32 %v0_dd5c, i32* %r0.global-to-local, align 4
  %v5_dd60 = trunc i32 %v6_dd40 to i8
  %v6_dd64 = inttoptr i32 %v0_dd58 to i32*
  %v7_dd64 = call i32 @function_a4e8(i32 %v0_dd5c, i32* %v6_dd64, i32 3, i32 65535)
  %v0_dd68 = load i32, i32* @r5, align 4
  store i32 %v0_dd68, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_dd64, i32* %fp.global-to-local, align 4
  %v0_dd78 = load i32, i32* @r4, align 4
  store i32 %v0_dd78, i32* %r0.global-to-local, align 4
  %v4_dd7c = inttoptr i32 %v0_dd68 to i32*
  %v5_dd7c = call i32 @function_a4e8(i32 %v0_dd78, i32* %v4_dd7c, i32 4, i32 64)
  %v1_dd84 = urem i32 %v5_dd7c, 256
  store i32 %v1_dd84, i32* %ip.global-to-local, align 4
  %v0_dd88 = load i32, i32* @r5, align 4
  store i32 %v0_dd88, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_dd94 = load i32, i32* @r4, align 4
  store i32 %v0_dd94, i32* %r0.global-to-local, align 4
  %v5_dd98 = trunc i32 %v5_dd7c to i8
  %v6_dd9c = inttoptr i32 %v0_dd88 to i32*
  %v7_dd9c = call i32 @function_a4e8(i32 %v0_dd94, i32* %v6_dd9c, i32 5, i32 0)
  %v1_dda8 = urem i32 %v7_dd9c, 256
  store i32 %v1_dda8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_ddb4 = load i32, i32* @r5, align 4
  store i32 %v0_ddb4, i32* %r1.global-to-local, align 4
  %v0_ddb8 = load i32, i32* @r4, align 4
  store i32 %v0_ddb8, i32* %r0.global-to-local, align 4
  %v5_ddc0 = inttoptr i32 %v0_ddb4 to i32*
  %v6_ddc0 = call i32 @function_a4e8(i32 %v0_ddb8, i32* %v5_ddc0, i32 6, i32 65535)
  %v0_ddc8 = load i32, i32* @r5, align 4
  store i32 %v0_ddc8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_ddc0, i32* @r7, align 4
  %v0_ddd8 = load i32, i32* @r4, align 4
  store i32 %v0_ddd8, i32* %r0.global-to-local, align 4
  %v4_dddc = inttoptr i32 %v0_ddc8 to i32*
  %v5_dddc = call i32 @function_a4e8(i32 %v0_ddd8, i32* %v4_dddc, i32 7, i32 65535)
  %v0_dde0 = load i32, i32* @r5, align 4
  store i32 %v0_dde0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_dddc, i32* %sb.global-to-local, align 4
  %v0_ddf0 = load i32, i32* @r4, align 4
  store i32 %v0_ddf0, i32* %r0.global-to-local, align 4
  %v4_ddf4 = inttoptr i32 %v0_dde0 to i32*
  %v5_ddf4 = call i32 @function_a4e8(i32 %v0_ddf0, i32* %v4_ddf4, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_de00 = load i32, i32* @r5, align 4
  store i32 %v0_de00, i32* %r1.global-to-local, align 4
  store i32 %v5_ddf4, i32* @r6, align 4
  %v0_de08 = load i32, i32* @r4, align 4
  store i32 %v0_de08, i32* %r0.global-to-local, align 4
  %v4_de0c = inttoptr i32 %v0_de00 to i32*
  %v5_de0c = call i32 @function_a4e8(i32 %v0_de08, i32* %v4_de0c, i32 1, i32 1)
  %v2_de18 = load i32, i32* @global_var_1f858.88, align 4
  store i32 %v2_de18, i32* %r3.global-to-local, align 4
  %v1_de1c = urem i32 %v5_de0c, 256
  store i32 %v1_de1c, i32* %ip.global-to-local, align 4
  %v0_de20 = load i32, i32* @r5, align 4
  store i32 %v0_de20, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_de28 = load i32, i32* @r4, align 4
  store i32 %v0_de28, i32* %r0.global-to-local, align 4
  %v5_de30 = inttoptr i32 %v0_de20 to i32*
  %v6_de30 = call i32 @function_a4e8(i32 %v0_de28, i32* %v5_de30, i32 25, i32 %v2_de18)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_de44 = call i32 @function_14b30(i32 2, i32 3, i32 17)
  store i32 %v3_de44, i32* %r0.global-to-local, align 4
  %v7_de48 = icmp eq i32 %v3_de44, -1
  store i1 %v7_de48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_de48, label %dec_label_pc_e270, label %dec_label_pc_de54

dec_label_pc_de54:                                ; preds = %dec_label_pc_dd08
  store i32 1, i32* %stack_var_-40, align 4
  %v6_de5c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_de5c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_de70 = call i32 @function_14b00(i32 %v3_de44, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_de70, i32* %r0.global-to-local, align 4
  %v7_de74 = icmp eq i32 %v6_de70, -1
  store i1 %v7_de74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_de74, label %dec_label_pc_e268, label %dec_label_pc_de7c

dec_label_pc_de7c:                                ; preds = %dec_label_pc_de54
  %v0_de7c = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_de88 = urem i32 %v0_de7c, 65536
  store i32 %v3_de88, i32* %r2.global-to-local, align 4
  %v3_de8c = icmp ugt i32 %v3_de88, 1459
  %v9_de8c = icmp eq i32 %v3_de88, 1460
  store i1 %v9_de8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_de8c, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_de7c
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_de7c, %bb
  %v0_de94 = phi i32 [ %v3_de88, %dec_label_pc_de7c ], [ 1460, %bb ]
  %v0_de98 = load i32, i32* %fp.global-to-local, align 4
  %v3_de98 = mul i32 %v0_de98, 65536
  store i32 %v3_de98, i32* %r0.global-to-local, align 4
  %v3_de9c = urem i32 %v0_de98, 65536
  store i32 %v3_de9c, i32* %r2.global-to-local, align 4
  %v0_dea0 = load i32, i32* @sl, align 4
  %v2_dea0 = icmp eq i32 %v0_dea0, 0
  store i1 %v2_dea0, i1* %cpsr_z.global-to-local, align 1
  %v0_dea4 = load i32, i32* %sb.global-to-local, align 4
  %v0_dea8 = load i32, i32* @r7, align 4
  %tmp72 = icmp slt i32 %v0_dea0, 1
  br i1 %tmp72, label %bb73, label %bb74

bb73:                                             ; preds = %bb71
  store i32 %v0_de94, i32* %r2.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  %v5_ded0 = phi i32 [ %v3_de9c, %bb71 ], [ %v0_de94, %bb73 ]
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_deb8 = urem i32 %v0_dea8, 65536
  store i32 %v3_deb8, i32* %r3.global-to-local, align 4
  %v3_debc = urem i32 %v0_dea4, 65536
  store i32 %v3_debc, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %tmp72, label %.thread, label %dec_label_pc_ded8

.thread:                                          ; preds = %bb74
  %v6_decc = add nsw i32 %v5_ded0, 28
  store i32 %v6_decc, i32* @fp, align 4
  %v6_ded0 = add nsw i32 %v5_ded0, 8
  store i32 %v6_ded0, i32* @sb, align 4
  br label %dec_label_pc_e04c

dec_label_pc_ded8:                                ; preds = %bb74
  %v1_dedc = add nuw nsw i32 %v0_de94, 28
  store i32 %v1_dedc, i32* @fp, align 4
  %tmp75 = mul nuw nsw i32 %v1_dedc, 256
  %v1_dee8 = and i32 %tmp75, 65280
  %tmp76 = udiv i32 %v0_de98, 256
  %v3_deec = urem i32 %tmp76, 256
  %v2_df00 = icmp eq i32 %v1_dda8, 0
  store i1 %v2_df00, i1* %cpsr_z.global-to-local, align 1
  %v1_df04 = urem i32 %v0_de98, 256
  %v1_df0c = add nuw nsw i32 %v0_de94, 8
  store i32 %v1_df0c, i32* @sb, align 4
  %v1_df14 = urem i32 %v0_dea8, 256
  %v1_df18 = urem i32 %v0_dea4, 256
  store i32 %v1_df18, i32* %ip.global-to-local, align 4
  store i32 %v1_dee8, i32* %r3.global-to-local, align 4
  %tmp77 = mul nuw nsw i32 %v1_df0c, 256
  %v4_df24 = mul nuw nsw i32 %v1_df04, 256
  %v5_df24 = or i32 %v4_df24, %v3_deec
  store i32 %v5_df24, i32* %r0.global-to-local, align 4
  %v3_df28 = mul nuw nsw i32 %v1_df14, 256
  store i32 %v3_df28, i32* %r2.global-to-local, align 4
  %tmp78 = udiv i32 %v0_dea4, 256
  %v3_df2c = urem i32 %tmp78, 256
  %v1_df30 = and i32 %tmp77, 65280
  store i32 %v1_df30, i32* %r1.global-to-local, align 4
  %tmp79 = udiv i32 %v1_dedc, 256
  %v4_df34 = urem i32 %tmp79, 256
  %v5_df34 = or i32 %v4_df34, %v1_dee8
  store i32 %v5_df34, i32* @lr, align 4
  %tmp80 = udiv i32 %v0_dea8, 256
  %v4_df38 = urem i32 %tmp80, 256
  %v5_df38 = or i32 %v4_df38, %v3_df28
  store i32 %v5_df38, i32* @r4, align 4
  %v5_df3c = trunc i32 %tmp79 to i8
  %v5_df40 = trunc i32 %tmp76 to i8
  %v4_df44 = mul nuw nsw i32 %v1_df18, 256
  %v5_df44 = or i32 %v4_df44, %v3_df2c
  store i32 %v5_df44, i32* @r5, align 4
  %tmp81 = udiv i32 %v1_df0c, 256
  %v4_df48 = urem i32 %tmp81, 256
  %v5_df48 = or i32 %v4_df48, %v1_df30
  store i32 %v5_df48, i32* @r7, align 4
  br i1 %v2_df00, label %dec_label_pc_df50, label %dec_label_pc_e278

dec_label_pc_df50:                                ; preds = %dec_label_pc_ded8
  %v3_df5036 = udiv i32 %v1_dee8, 256
  store i32 %v3_df5036, i32* %ip.global-to-local, align 4
  store i32 %v1_df04, i32* %r0.global-to-local, align 4
  store i32 %v1_df14, i32* %r1.global-to-local, align 4
  store i32 %v1_df18, i32* %r2.global-to-local, align 4
  %v3_df6037 = udiv i32 %v1_df30, 256
  store i32 %v3_df6037, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_dfc4 = sext i8 %v5_dd60 to i32
  %v4_e004 = sext i8 %v5_df40 to i32
  %sext15 = mul i32 %v0_de98, 16777216
  %v4_e008 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_dea8, 16777216
  %v4_e020 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_df0c, 16777216
  %v4_e024 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_dea4, 16777216
  %v4_e028 = sdiv i32 %sext18, 16777216
  %v1_e010 = trunc i32 %v1_dedc to i8
  %v1_e030 = trunc i32 %v4_e024 to i8
  br label %dec_label_pc_df7c

dec_label_pc_df7c:                                ; preds = %dec_label_pc_df7c, %dec_label_pc_df50
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_df88 = call i32 @function_14e34(i32 1510, i32 1)
  store i32 %v2_df88, i32* %r0.global-to-local, align 4
  store i32 %v2_dd28, i32* %ip.global-to-local, align 4
  %v3_df90 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_df90, i32* %r2.global-to-local, align 4
  %v2_df94 = load i32, i32* @r6, align 4
  %v5_df94 = mul i32 %v2_df94, 4
  %v6_df94 = add i32 %v5_df94, %v2_dd28
  %v7_df94 = inttoptr i32 %v6_df94 to i32*
  store i32 %v2_df88, i32* %v7_df94, align 4
  %v0_df98 = load i32, i32* %ip.global-to-local, align 4
  %v1_df98 = load i32, i32* %r2.global-to-local, align 4
  %v4_df98 = mul i32 %v1_df98, 4
  %v5_df98 = add i32 %v4_df98, %v0_df98
  %v6_df98 = inttoptr i32 %v5_df98 to i32*
  %v7_df98 = load i32, i32* %v6_df98, align 4
  store i32 %v7_df98, i32* %r1.global-to-local, align 4
  %v1_df9c = inttoptr i32 %v7_df98 to i8*
  %v2_df9c = load i8, i8* %v1_df9c, align 1
  %tmp = urem i8 %v2_df9c, 16
  %v1_dfa0 = zext i8 %tmp to i32
  %v1_dfa4 = or i32 %v1_dfa0, 64
  store i32 %v1_dfa4, i32* %r3.global-to-local, align 4
  %v1_dfa8 = trunc i32 %v1_dfa4 to i8
  store i8 %v1_dfa8, i8* %v1_df9c, align 1
  %v0_dfac = load i32, i32* %r1.global-to-local, align 4
  %v1_dfac = inttoptr i32 %v0_dfac to i8*
  %v2_dfac = load i8, i8* %v1_dfac, align 1
  %v3_dfac = zext i8 %v2_dfac to i32
  %v1_dfb0 = and i32 %v3_dfac, 240
  %v1_dfb4 = or i32 %v1_dfb0, 5
  store i32 %v1_dfb4, i32* %r2.global-to-local, align 4
  %v3_dfbc = add i32 %v0_dfac, 9
  %v4_dfbc = inttoptr i32 %v3_dfbc to i8*
  store i8 17, i8* %v4_dfbc, align 1
  %v0_dfc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_dfc0 = trunc i32 %v0_dfc0 to i8
  %v2_dfc0 = load i32, i32* %r1.global-to-local, align 4
  %v3_dfc0 = inttoptr i32 %v2_dfc0 to i8*
  store i8 %v1_dfc0, i8* %v3_dfc0, align 1
  store i32 %v4_dfc4, i32* %r0.global-to-local, align 4
  %v2_dfc8 = load i32, i32* %r1.global-to-local, align 4
  %v3_dfc8 = add i32 %v2_dfc8, 1
  %v4_dfc8 = inttoptr i32 %v3_dfc8 to i8*
  store i8 %v5_dd60, i8* %v4_dfc8, align 1
  %v2_dfd0 = load i32, i32* %r1.global-to-local, align 4
  %v3_dfd0 = add i32 %v2_dfd0, 8
  %v4_dfd0 = inttoptr i32 %v3_dfd0 to i8*
  store i8 %v5_dd98, i8* %v4_dfd0, align 1
  %v3_dfd4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_dfd4, i32* %r2.global-to-local, align 4
  store i32 %v6_de30, i32* %ip.global-to-local, align 4
  %v3_dfdc = mul i32 %v3_dfd4, 32
  store i32 %v3_dfdc, i32* %r3.global-to-local, align 4
  %v1_dfe0 = load i32, i32* %r1.global-to-local, align 4
  %v2_dfe0 = add i32 %v1_dfe0, 12
  %v3_dfe0 = inttoptr i32 %v2_dfe0 to i32*
  store i32 %v6_de30, i32* %v3_dfe0, align 4
  %v0_dfe4 = load i32, i32* %r3.global-to-local, align 4
  %v1_dfe4 = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_dfe4, -8
  %v5_dfe4 = add i32 %v0_dfe4, %tmp83
  %v1_dfe8 = load i32, i32* @r8, align 4
  %v2_dfe8 = add i32 %v5_dfe4, %v1_dfe8
  store i32 %v2_dfe8, i32* %r3.global-to-local, align 4
  %v1_dfec = add i32 %v2_dfe8, 16
  %v2_dfec = inttoptr i32 %v1_dfec to i32*
  %v3_dfec = load i32, i32* %v2_dfec, align 4
  %v1_dff0 = load i32, i32* %r1.global-to-local, align 4
  %v2_dff0 = add i32 %v1_dff0, 16
  %v3_dff0 = inttoptr i32 %v2_dff0 to i32*
  store i32 %v3_dfec, i32* %v3_dff0, align 4
  %v0_dff8 = load i32, i32* %r2.global-to-local, align 4
  %v1_dff8 = add i32 %v0_dff8, 1
  store i32 %v1_dff8, i32* @r6, align 4
  %v2_dffc = load i32, i32* %r1.global-to-local, align 4
  %v3_dffc = add i32 %v2_dffc, 2
  %v4_dffc = inttoptr i32 %v3_dffc to i8*
  store i8 %v5_df3c, i8* %v4_dffc, align 1
  store i32 %v4_e004, i32* %ip.global-to-local, align 4
  store i32 %v4_e008, i32* %r0.global-to-local, align 4
  %v0_e00c = load i32, i32* %r1.global-to-local, align 4
  %v1_e00c = add i32 %v0_e00c, 20
  store i32 %v1_e00c, i32* %r3.global-to-local, align 4
  %v3_e010 = add i32 %v0_e00c, 3
  %v4_e010 = inttoptr i32 %v3_e010 to i8*
  store i8 %v1_e010, i8* %v4_e010, align 1
  %v0_e014 = load i32, i32* %ip.global-to-local, align 4
  %v1_e014 = trunc i32 %v0_e014 to i8
  %v2_e014 = load i32, i32* %r1.global-to-local, align 4
  %v3_e014 = add i32 %v2_e014, 4
  %v4_e014 = inttoptr i32 %v3_e014 to i8*
  store i8 %v1_e014, i8* %v4_e014, align 1
  %v0_e018 = load i32, i32* %r0.global-to-local, align 4
  %v1_e018 = trunc i32 %v0_e018 to i8
  %v2_e018 = load i32, i32* %r1.global-to-local, align 4
  %v3_e018 = add i32 %v2_e018, 5
  %v4_e018 = inttoptr i32 %v3_e018 to i8*
  store i8 %v1_e018, i8* %v4_e018, align 1
  %v0_e01c = load i32, i32* @r4, align 4
  %v1_e01c = trunc i32 %v0_e01c to i8
  %v2_e01c = load i32, i32* %r1.global-to-local, align 4
  %v3_e01c = add i32 %v2_e01c, 20
  %v4_e01c = inttoptr i32 %v3_e01c to i8*
  store i8 %v1_e01c, i8* %v4_e01c, align 1
  store i32 %v4_e020, i32* %r2.global-to-local, align 4
  store i32 %v4_e024, i32* %r1.global-to-local, align 4
  store i32 %v4_e028, i32* %ip.global-to-local, align 4
  %v0_e02c = load i32, i32* @r6, align 4
  %v1_e02c = load i32, i32* @sl, align 4
  %v9_e02c = icmp eq i32 %v0_e02c, %v1_e02c
  store i1 %v9_e02c, i1* %cpsr_z.global-to-local, align 1
  %v2_e030 = load i32, i32* %r3.global-to-local, align 4
  %v3_e030 = add i32 %v2_e030, 5
  %v4_e030 = inttoptr i32 %v3_e030 to i8*
  store i8 %v1_e030, i8* %v4_e030, align 1
  %v0_e034 = load i32, i32* %r2.global-to-local, align 4
  %v1_e034 = trunc i32 %v0_e034 to i8
  %v2_e034 = load i32, i32* %r3.global-to-local, align 4
  %v3_e034 = add i32 %v2_e034, 1
  %v4_e034 = inttoptr i32 %v3_e034 to i8*
  store i8 %v1_e034, i8* %v4_e034, align 1
  %v0_e038 = load i32, i32* @r5, align 4
  %v1_e038 = trunc i32 %v0_e038 to i8
  %v2_e038 = load i32, i32* %r3.global-to-local, align 4
  %v3_e038 = add i32 %v2_e038, 2
  %v4_e038 = inttoptr i32 %v3_e038 to i8*
  store i8 %v1_e038, i8* %v4_e038, align 1
  %v0_e03c = load i32, i32* %ip.global-to-local, align 4
  %v1_e03c = trunc i32 %v0_e03c to i8
  %v2_e03c = load i32, i32* %r3.global-to-local, align 4
  %v3_e03c = add i32 %v2_e03c, 3
  %v4_e03c = inttoptr i32 %v3_e03c to i8*
  store i8 %v1_e03c, i8* %v4_e03c, align 1
  %v0_e040 = load i32, i32* @r7, align 4
  %v1_e040 = trunc i32 %v0_e040 to i8
  %v2_e040 = load i32, i32* %r3.global-to-local, align 4
  %v3_e040 = add i32 %v2_e040, 4
  %v4_e040 = inttoptr i32 %v3_e040 to i8*
  store i8 %v1_e040, i8* %v4_e040, align 1
  %v0_e044 = load i32, i32* @r6, align 4
  store i32 %v0_e044, i32* %stack_var_-40, align 4
  %v5_e048 = icmp slt i32 %v0_e02c, %v1_e02c
  br i1 %v5_e048, label %dec_label_pc_df7c, label %dec_label_pc_e04c

dec_label_pc_e04c:                                ; preds = %dec_label_pc_e2ac, %dec_label_pc_df7c, %.thread
  %v0_e04c = load i32, i32* @sl, align 4
  %v2_e04c = icmp eq i32 %v0_e04c, 0
  store i1 %v2_e04c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_e1f8 = icmp eq i32 %v3_de9c, 65535
  %v2_e0c4 = icmp eq i32 %v1_de1c, 0
  %v2_e08c = icmp eq i32 %v6_de30, -1
  %v7_e08c = icmp eq i32 %v6_de30, -1
  br label %dec_label_pc_e054.outer

dec_label_pc_e054.outer:                          ; preds = %dec_label_pc_e174, %dec_label_pc_e04c
  %v1_e054.ph.in = phi i32 [ %v1_e168, %dec_label_pc_e174 ], [ %v0_e04c, %dec_label_pc_e04c ]
  %v0_e054.ph = phi i1 [ %v2_e174, %dec_label_pc_e174 ], [ %v2_e04c, %dec_label_pc_e04c ]
  %v1_e054.ph = icmp slt i32 %v1_e054.ph.in, 0
  %v4_e054 = or i1 %v1_e054.ph, %v0_e054.ph
  br label %dec_label_pc_e054

dec_label_pc_e054:                                ; preds = %dec_label_pc_e054.outer, %dec_label_pc_e054
  br i1 %v4_e054, label %dec_label_pc_e054, label %dec_label_pc_e058

dec_label_pc_e058:                                ; preds = %dec_label_pc_e054
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_e064

dec_label_pc_e064:                                ; preds = %dec_label_pc_e0cc, %dec_label_pc_e058
  %v1_e078 = phi i32 [ %v1_e164, %dec_label_pc_e0cc ], [ 0, %dec_label_pc_e058 ]
  %v5_e068 = mul i32 %v1_e078, 24
  %v1_e06c = load i32, i32* @r8, align 4
  %v2_e06c = add i32 %v1_e06c, %v5_e068
  store i32 %v2_e06c, i32* %r3.global-to-local, align 4
  store i32 %v2_dd28, i32* %ip.global-to-local, align 4
  %v1_e074 = add i32 %v2_e06c, 20
  %v2_e074 = inttoptr i32 %v1_e074 to i8*
  %v3_e074 = load i8, i8* %v2_e074, align 1
  %v4_e074 = zext i8 %v3_e074 to i32
  store i32 %v4_e074, i32* %r2.global-to-local, align 4
  %v4_e078 = mul i32 %v1_e078, 4
  %v5_e078 = add i32 %v4_e078, %v2_dd28
  %v6_e078 = inttoptr i32 %v5_e078 to i32*
  %v7_e078 = load i32, i32* %v6_e078, align 4
  store i32 %v7_e078, i32* @r5, align 4
  %v7_e07c = icmp eq i8 %v3_e074, 31
  store i1 %v7_e07c, i1* %cpsr_z.global-to-local, align 1
  %v1_e080 = add i32 %v7_e078, 20
  store i32 %v1_e080, i32* @r6, align 4
  %tmp84 = icmp ult i8 %v3_e074, 32
  br i1 %tmp84, label %dec_label_pc_e180, label %dec_label_pc_e088

dec_label_pc_e088:                                ; preds = %dec_label_pc_e064
  store i32 %v6_de30, i32* %r0.global-to-local, align 4
  store i1 %v7_e08c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e08c, label %dec_label_pc_e1e8, label %dec_label_pc_e094

dec_label_pc_e094:                                ; preds = %dec_label_pc_e180, %dec_label_pc_e088
  store i32 %v3_de9c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_e1f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e1f8, label %dec_label_pc_e204, label %dec_label_pc_e0a8

dec_label_pc_e0a8:                                ; preds = %dec_label_pc_e1e8.dec_label_pc_e0a8_crit_edge, %dec_label_pc_e094
  %v1_e0ac = phi i32 [ %v1_e0ac.pre, %dec_label_pc_e1e8.dec_label_pc_e0a8_crit_edge ], [ 65535, %dec_label_pc_e094 ]
  store i32 %v3_deb8, i32* %r2.global-to-local, align 4
  %v9_e0ac = icmp eq i32 %v3_deb8, %v1_e0ac
  store i1 %v9_e0ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e0ac, label %dec_label_pc_e220, label %dec_label_pc_e0b4

dec_label_pc_e0b4:                                ; preds = %dec_label_pc_e204.dec_label_pc_e0b4_crit_edge, %dec_label_pc_e0a8
  %v1_e0b8 = phi i32 [ %v1_e0b8.pre, %dec_label_pc_e204.dec_label_pc_e0b4_crit_edge ], [ %v1_e0ac, %dec_label_pc_e0a8 ]
  store i32 %v3_debc, i32* %r3.global-to-local, align 4
  %v9_e0b8 = icmp eq i32 %v3_debc, %v1_e0b8
  store i1 %v9_e0b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e0b8, label %dec_label_pc_e23c, label %dec_label_pc_e0c0

dec_label_pc_e0c0:                                ; preds = %dec_label_pc_e220, %dec_label_pc_e0b4
  store i32 %v1_de1c, i32* %ip.global-to-local, align 4
  store i1 %v2_e0c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e0c4, label %dec_label_pc_e0cc, label %dec_label_pc_e258

dec_label_pc_e0cc:                                ; preds = %dec_label_pc_e0c0, %dec_label_pc_e23c, %dec_label_pc_e258
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_e0d0 = load i32, i32* @r7, align 4
  %v1_e0d0 = trunc i32 %v0_e0d0 to i8
  %v2_e0d0 = load i32, i32* @r5, align 4
  %v3_e0d0 = add i32 %v2_e0d0, 10
  %v4_e0d0 = inttoptr i32 %v3_e0d0 to i8*
  store i8 %v1_e0d0, i8* %v4_e0d0, align 1
  %v0_e0d4 = load i32, i32* @r7, align 4
  %v1_e0d4 = trunc i32 %v0_e0d4 to i8
  %v2_e0d4 = load i32, i32* @r5, align 4
  %v3_e0d4 = add i32 %v2_e0d4, 11
  %v4_e0d4 = inttoptr i32 %v3_e0d4 to i8*
  store i8 %v1_e0d4, i8* %v4_e0d4, align 1
  %v0_e0d8 = load i32, i32* @r5, align 4
  store i32 %v0_e0d8, i32* @r0, align 4
  %v2_e0dc = call i32 @function_f008(i32 %v0_e0d8, i32 20)
  %v3_e0dc = trunc i32 %v2_e0dc to i8
  store i32 %v2_e0dc, i32* %r0.global-to-local, align 4
  %v4_e0e0 = sdiv i32 %v2_e0dc, 256
  store i32 %v4_e0e0, i32* %r3.global-to-local, align 4
  %v1_e0e4 = trunc i32 %v4_e0e0 to i8
  %v2_e0e4 = load i32, i32* @r5, align 4
  %v3_e0e4 = add i32 %v2_e0e4, 11
  %v4_e0e4 = inttoptr i32 %v3_e0e4 to i8*
  store i8 %v1_e0e4, i8* %v4_e0e4, align 1
  %v3_e0e8 = load i32, i32* @r5, align 4
  %v4_e0e8 = add i32 %v3_e0e8, 10
  %v5_e0e8 = inttoptr i32 %v4_e0e8 to i8*
  store i8 %v3_e0dc, i8* %v5_e0e8, align 1
  %v0_e0ec = load i32, i32* @r7, align 4
  %v1_e0ec = trunc i32 %v0_e0ec to i8
  %v2_e0ec = load i32, i32* @r6, align 4
  %v3_e0ec = add i32 %v2_e0ec, 6
  %v4_e0ec = inttoptr i32 %v3_e0ec to i8*
  store i8 %v1_e0ec, i8* %v4_e0ec, align 1
  %v0_e0f0 = load i32, i32* @r7, align 4
  %v1_e0f0 = trunc i32 %v0_e0f0 to i8
  %v2_e0f0 = load i32, i32* @r6, align 4
  %v3_e0f0 = add i32 %v2_e0f0, 7
  %v4_e0f0 = inttoptr i32 %v3_e0f0 to i8*
  store i8 %v1_e0f0, i8* %v4_e0f0, align 1
  %v0_e0f4 = load i32, i32* @r5, align 4
  %v1_e0f4 = add i32 %v0_e0f4, 24
  %v2_e0f4 = inttoptr i32 %v1_e0f4 to i8*
  %v3_e0f4 = load i8, i8* %v2_e0f4, align 1
  %v4_e0f4 = zext i8 %v3_e0f4 to i32
  store i32 %v4_e0f4, i32* %r3.global-to-local, align 4
  %v1_e0f8 = add i32 %v0_e0f4, 25
  %v2_e0f8 = inttoptr i32 %v1_e0f8 to i8*
  %v3_e0f8 = load i8, i8* %v2_e0f8, align 1
  %v4_e0f8 = zext i8 %v3_e0f8 to i32
  %v0_e0fc = load i32, i32* @r6, align 4
  store i32 %v0_e0fc, i32* @r1, align 4
  %v4_e100 = mul nuw nsw i32 %v4_e0f8, 256
  %v5_e100 = or i32 %v4_e100, %v4_e0f4
  store i32 %v5_e100, i32* %r2.global-to-local, align 4
  store i32 %v0_e0f4, i32* %r0.global-to-local, align 4
  %v0_e108 = load i32, i32* @sb, align 4
  store i32 %v0_e108, i32* %r3.global-to-local, align 4
  %v4_e10c = call i32 @function_f064(i32 %v0_e0f4, i32 %v0_e0fc, i32 %v5_e100, i32 %v0_e108)
  %v5_e10c = trunc i32 %v4_e10c to i8
  store i32 %v4_e10c, i32* %r0.global-to-local, align 4
  %v4_e11038 = udiv i32 %v4_e10c, 256
  %v1_e114 = trunc i32 %v4_e11038 to i8
  %v2_e114 = load i32, i32* @r6, align 4
  %v3_e114 = add i32 %v2_e114, 7
  %v4_e114 = inttoptr i32 %v3_e114 to i8*
  store i8 %v1_e114, i8* %v4_e114, align 1
  %v3_e118 = load i32, i32* @r6, align 4
  %v4_e118 = add i32 %v3_e118, 6
  %v5_e118 = inttoptr i32 %v4_e118 to i8*
  store i8 %v5_e10c, i8* %v5_e118, align 1
  %v3_e11c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e11c, i32* %r3.global-to-local, align 4
  %v0_e120 = load i32, i32* @r5, align 4
  %v1_e120 = add i32 %v0_e120, 20
  %v2_e120 = inttoptr i32 %v1_e120 to i32*
  %v3_e120 = load i32, i32* %v2_e120, align 4
  %v3_e128 = udiv i32 %v3_e120, 65536
  store i32 %v3_e128, i32* %r2.global-to-local, align 4
  %v5_e12c = mul i32 %v3_e11c, 24
  %v1_e130 = load i32, i32* @r8, align 4
  %v2_e130 = add i32 %v1_e130, %v5_e12c
  store i32 %v2_e130, i32* %ip.global-to-local, align 4
  %v3_e13435 = udiv i32 %v3_e120, 16777216
  %v1_e138 = trunc i32 %v3_e13435 to i8
  %v3_e138 = add i32 %v2_e130, 3
  %v4_e138 = inttoptr i32 %v3_e138 to i8*
  store i8 %v1_e138, i8* %v4_e138, align 1
  %v0_e13c = load i32, i32* %r2.global-to-local, align 4
  %v1_e13c = trunc i32 %v0_e13c to i8
  %v2_e13c = load i32, i32* %ip.global-to-local, align 4
  %v3_e13c = add i32 %v2_e13c, 2
  %v4_e13c = inttoptr i32 %v3_e13c to i8*
  store i8 %v1_e13c, i8* %v4_e13c, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e144 = load i32, i32* @r5, align 4
  store i32 %v0_e144, i32* %r1.global-to-local, align 4
  store i32 %v3_de44, i32* %r0.global-to-local, align 4
  %v0_e14c = load i32, i32* @fp, align 4
  store i32 %v0_e14c, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_e154 = load i32, i32* %ip.global-to-local, align 4
  %v6_e15c = inttoptr i32 %v0_e144 to i32*
  %v7_e15c = call i32 @function_14acc(i32 %v3_de44, i32* %v6_e15c, i32 %v0_e14c, i32 16384, i32 %v0_e154, i32 16)
  %v3_e160 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e160, i32* %r3.global-to-local, align 4
  %v1_e164 = add i32 %v3_e160, 1
  store i32 %v1_e164, i32* %r0.global-to-local, align 4
  %v1_e168 = load i32, i32* @sl, align 4
  %v9_e168 = icmp eq i32 %v1_e164, %v1_e168
  store i1 %v9_e168, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e164, i32* %stack_var_-40, align 4
  %v5_e170 = icmp slt i32 %v1_e164, %v1_e168
  br i1 %v5_e170, label %dec_label_pc_e064, label %dec_label_pc_e174

dec_label_pc_e174:                                ; preds = %dec_label_pc_e0cc
  %v2_e174 = icmp eq i32 %v1_e168, 0
  store i1 %v2_e174, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e054.outer

dec_label_pc_e180:                                ; preds = %dec_label_pc_e064
  %v1_e180 = add i32 %v2_e06c, 16
  %v2_e180 = inttoptr i32 %v1_e180 to i32*
  %v3_e180 = load i32, i32* %v2_e180, align 4
  %v0_e184 = call i32 @function_10a44()
  store i32 %v0_e184, i32* %r0.global-to-local, align 4
  %v3_e188 = load i32, i32* %stack_var_-40, align 4
  %v5_e190 = mul i32 %v3_e188, 24
  %v1_e198 = load i32, i32* @r8, align 4
  %v2_e198 = add i32 %v1_e198, %v5_e190
  store i32 %v2_e198, i32* %r1.global-to-local, align 4
  %v1_e19c = and i32 %v3_e180, 65280
  store i32 %v1_e19c, i32* %r3.global-to-local, align 4
  %v1_e194 = udiv i32 %v3_e180, 256
  %v3_e1a0 = and i32 %v1_e194, 65280
  store i32 %v3_e1a0, i32* %r2.global-to-local, align 4
  %v3_e1a4 = mul i32 %v3_e180, 16777216
  store i32 %v3_e1a4, i32* %ip.global-to-local, align 4
  %v1_e1a8 = add i32 %v2_e198, 20
  %v2_e1a8 = inttoptr i32 %v1_e1a8 to i8*
  %v3_e1a8 = load i8, i8* %v2_e1a8, align 1
  %v4_e1a8 = zext i8 %v3_e1a8 to i32
  %v4_e1ac = mul nuw nsw i32 %v1_e19c, 256
  %v5_e1ac = or i32 %v4_e1ac, %v3_e1a4
  store i32 %v5_e1ac, i32* %ip.global-to-local, align 4
  %v2_e1b4 = call i32 @llvm.bswap.i32(i32 %v3_e180)
  %v7_e1b8 = lshr i32 %v0_e184, %v4_e1a8
  %v8_e1b8 = add i32 %v7_e1b8, %v2_e1b4
  store i32 %v8_e1b8, i32* %r2.global-to-local, align 4
  %v3_e1c4 = mul i32 %v8_e1b8, 16777216
  %v1_e1bc = mul i32 %v8_e1b8, 256
  %v4_e1c8 = and i32 %v1_e1bc, 16711680
  %v5_e1c8 = or i32 %v4_e1c8, %v3_e1c4
  store i32 %v5_e1c8, i32* %r1.global-to-local, align 4
  store i32 %v6_de30, i32* %r0.global-to-local, align 4
  %v2_e1d8 = call i32 @llvm.bswap.i32(i32 %v8_e1b8)
  store i32 %v2_e1d8, i32* %r3.global-to-local, align 4
  store i1 %v7_e08c, i1* %cpsr_z.global-to-local, align 1
  %v1_e1e0 = load i32, i32* @r5, align 4
  %v2_e1e0 = add i32 %v1_e1e0, 16
  %v3_e1e0 = inttoptr i32 %v2_e1e0 to i32*
  store i32 %v2_e1d8, i32* %v3_e1e0, align 4
  br i1 %v2_e08c, label %dec_label_pc_e1e8, label %dec_label_pc_e094

dec_label_pc_e1e8:                                ; preds = %dec_label_pc_e180, %dec_label_pc_e088
  %v0_e1e8 = call i32 @function_10a44()
  store i32 %v0_e1e8, i32* %r0.global-to-local, align 4
  store i32 %v3_de9c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_e1f8, i1* %cpsr_z.global-to-local, align 1
  %v1_e1fc = load i32, i32* @r5, align 4
  %v2_e1fc = add i32 %v1_e1fc, 12
  %v3_e1fc = inttoptr i32 %v2_e1fc to i32*
  store i32 %v0_e1e8, i32* %v3_e1fc, align 4
  br i1 %v3_e1f8, label %dec_label_pc_e204, label %dec_label_pc_e1e8.dec_label_pc_e0a8_crit_edge

dec_label_pc_e1e8.dec_label_pc_e0a8_crit_edge:    ; preds = %dec_label_pc_e1e8
  %v1_e0ac.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e0a8

dec_label_pc_e204:                                ; preds = %dec_label_pc_e1e8, %dec_label_pc_e094
  %v0_e204 = call i32 @function_10a44()
  %v1_e204 = trunc i32 %v0_e204 to i8
  store i32 %v0_e204, i32* %r0.global-to-local, align 4
  store i32 %v3_deb8, i32* %r2.global-to-local, align 4
  %v4_e20c = sdiv i32 %v0_e204, 256
  store i32 %v4_e20c, i32* %r3.global-to-local, align 4
  %v1_e210 = load i32, i32* @r4, align 4
  %v9_e210 = icmp eq i32 %v3_deb8, %v1_e210
  store i1 %v9_e210, i1* %cpsr_z.global-to-local, align 1
  %v1_e214 = trunc i32 %v4_e20c to i8
  %v2_e214 = load i32, i32* @r5, align 4
  %v3_e214 = add i32 %v2_e214, 5
  %v4_e214 = inttoptr i32 %v3_e214 to i8*
  store i8 %v1_e214, i8* %v4_e214, align 1
  %v3_e218 = load i32, i32* @r5, align 4
  %v4_e218 = add i32 %v3_e218, 4
  %v5_e218 = inttoptr i32 %v4_e218 to i8*
  store i8 %v1_e204, i8* %v5_e218, align 1
  %v0_e21c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e21c, label %dec_label_pc_e220, label %dec_label_pc_e204.dec_label_pc_e0b4_crit_edge

dec_label_pc_e204.dec_label_pc_e0b4_crit_edge:    ; preds = %dec_label_pc_e204
  %v1_e0b8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e0b4

dec_label_pc_e220:                                ; preds = %dec_label_pc_e204, %dec_label_pc_e0a8
  %v0_e220 = call i32 @function_10a44()
  %v1_e220 = trunc i32 %v0_e220 to i8
  store i32 %v0_e220, i32* %r0.global-to-local, align 4
  %v4_e224 = sdiv i32 %v0_e220, 256
  store i32 %v4_e224, i32* %r3.global-to-local, align 4
  %v3_e228 = load i32, i32* @r5, align 4
  %v4_e228 = add i32 %v3_e228, 20
  %v5_e228 = inttoptr i32 %v4_e228 to i8*
  store i8 %v1_e220, i8* %v5_e228, align 1
  %v0_e22c = load i32, i32* %r3.global-to-local, align 4
  %v1_e22c = trunc i32 %v0_e22c to i8
  %v2_e22c = load i32, i32* @r6, align 4
  %v3_e22c = add i32 %v2_e22c, 1
  %v4_e22c = inttoptr i32 %v3_e22c to i8*
  store i8 %v1_e22c, i8* %v4_e22c, align 1
  store i32 %v3_debc, i32* %r3.global-to-local, align 4
  %v1_e234 = load i32, i32* @r4, align 4
  %v9_e234 = icmp eq i32 %v3_debc, %v1_e234
  store i1 %v9_e234, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e234, label %dec_label_pc_e23c, label %dec_label_pc_e0c0

dec_label_pc_e23c:                                ; preds = %dec_label_pc_e220, %dec_label_pc_e0b4
  %v0_e23c = call i32 @function_10a44()
  %v1_e23c = trunc i32 %v0_e23c to i8
  store i32 %v0_e23c, i32* %r0.global-to-local, align 4
  store i32 %v1_de1c, i32* %ip.global-to-local, align 4
  %v4_e244 = sdiv i32 %v0_e23c, 256
  store i32 %v4_e244, i32* %r3.global-to-local, align 4
  store i1 %v2_e0c4, i1* %cpsr_z.global-to-local, align 1
  %v1_e24c = trunc i32 %v4_e244 to i8
  %v2_e24c = load i32, i32* @r6, align 4
  %v3_e24c = add i32 %v2_e24c, 3
  %v4_e24c = inttoptr i32 %v3_e24c to i8*
  store i8 %v1_e24c, i8* %v4_e24c, align 1
  %v3_e250 = load i32, i32* @r6, align 4
  %v4_e250 = add i32 %v3_e250, 2
  %v5_e250 = inttoptr i32 %v4_e250 to i8*
  store i8 %v1_e23c, i8* %v5_e250, align 1
  %v0_e254 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e254, label %dec_label_pc_e0cc, label %dec_label_pc_e258

dec_label_pc_e258:                                ; preds = %dec_label_pc_e0c0, %dec_label_pc_e23c
  %v0_e258 = load i32, i32* @r5, align 4
  %v1_e258 = add i32 %v0_e258, 28
  store i32 %v1_e258, i32* %r0.global-to-local, align 4
  store i32 %v0_de94, i32* @r1, align 4
  %v1_e260 = inttoptr i32 %v1_e258 to i8*
  %v2_e260 = call i32 @function_10c20(i8* %v1_e260)
  store i32 %v2_e260, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e0cc

dec_label_pc_e268:                                ; preds = %dec_label_pc_de54
  store i32 %v3_de44, i32* %r0.global-to-local, align 4
  %v1_e26c = call i32 @function_14234(i32 %v3_de44)
  store i32 %v1_e26c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e270

dec_label_pc_e270:                                ; preds = %dec_label_pc_dd08, %dec_label_pc_e268
  %v29_e274 = phi i32 [ %v3_de44, %dec_label_pc_dd08 ], [ %v1_e26c, %dec_label_pc_e268 ]
  store i32 %v18_dd08, i32* %sb.global-to-local, align 4
  store i32 %v24_dd08, i32* %fp.global-to-local, align 4
  ret i32 %v29_e274

dec_label_pc_e278:                                ; preds = %dec_label_pc_ded8
  %v3_e27c = sext i8 %v5_df3c to i32
  %v7_e27c = sext i8 %v5_df40 to i32
  %v3_e280 = sdiv i32 %v3_e27c, 256
  store i32 %v3_e280, i32* %r0.global-to-local, align 4
  %v3_e284 = sdiv i32 %v7_e27c, 256
  store i32 %v3_e284, i32* %r1.global-to-local, align 4
  store i32 %v1_df14, i32* %r2.global-to-local, align 4
  store i32 %v1_df18, i32* %r3.global-to-local, align 4
  %v3_e29034 = udiv i32 %v1_df30, 256
  store i32 %v3_e29034, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_e2fc = sext i8 %v5_dd98 to i32
  %sext11 = mul i32 %v1_df0c, 16777216
  %v4_e354 = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v0_dea8, 16777216
  %v4_e358 = sdiv i32 %sext12, 16777216
  %sext13 = mul i32 %v0_dea4, 16777216
  %v4_e374 = sdiv i32 %sext13, 16777216
  %v1_e360 = trunc i32 %v3_e284 to i8
  %v1_e37c = trunc i32 %v4_e374 to i8
  br label %dec_label_pc_e2ac

dec_label_pc_e2ac:                                ; preds = %dec_label_pc_e2ac, %dec_label_pc_e278
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_e2b8 = call i32 @function_14e34(i32 1510, i32 1)
  store i32 %v2_e2b8, i32* %r0.global-to-local, align 4
  store i32 %v2_dd28, i32* %r1.global-to-local, align 4
  %v3_e2c0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e2c0, i32* %r2.global-to-local, align 4
  %v2_e2c4 = load i32, i32* @r6, align 4
  %v5_e2c4 = mul i32 %v2_e2c4, 4
  %v6_e2c4 = add i32 %v5_e2c4, %v2_dd28
  %v7_e2c4 = inttoptr i32 %v6_e2c4 to i32*
  store i32 %v2_e2b8, i32* %v7_e2c4, align 4
  %v0_e2c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_e2c8 = load i32, i32* %r2.global-to-local, align 4
  %v4_e2c8 = mul i32 %v1_e2c8, 4
  %v5_e2c8 = add i32 %v4_e2c8, %v0_e2c8
  %v6_e2c8 = inttoptr i32 %v5_e2c8 to i32*
  %v7_e2c8 = load i32, i32* %v6_e2c8, align 4
  store i32 %v7_e2c8, i32* %r1.global-to-local, align 4
  %v1_e2cc = inttoptr i32 %v7_e2c8 to i8*
  %v2_e2cc = load i8, i8* %v1_e2cc, align 1
  %tmp85 = urem i8 %v2_e2cc, 16
  %v1_e2d0 = zext i8 %tmp85 to i32
  %v1_e2d4 = or i32 %v1_e2d0, 64
  store i32 %v1_e2d4, i32* %r3.global-to-local, align 4
  %v1_e2d8 = trunc i32 %v1_e2d4 to i8
  store i8 %v1_e2d8, i8* %v1_e2cc, align 1
  %v0_e2dc = load i32, i32* %r1.global-to-local, align 4
  %v1_e2dc = inttoptr i32 %v0_e2dc to i8*
  %v2_e2dc = load i8, i8* %v1_e2dc, align 1
  %v3_e2dc = zext i8 %v2_e2dc to i32
  %v1_e2e0 = and i32 %v3_e2dc, 240
  %v1_e2e4 = or i32 %v1_e2e0, 5
  store i32 %v1_e2e4, i32* %r2.global-to-local, align 4
  %v3_e2ec = add i32 %v0_e2dc, 9
  %v4_e2ec = inttoptr i32 %v3_e2ec to i8*
  store i8 17, i8* %v4_e2ec, align 1
  %v0_e2f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_e2f0 = trunc i32 %v0_e2f0 to i8
  %v2_e2f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_e2f0 = inttoptr i32 %v2_e2f0 to i8*
  store i8 %v1_e2f0, i8* %v3_e2f0, align 1
  %v2_e2f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_e2f8 = add i32 %v2_e2f8, 1
  %v4_e2f8 = inttoptr i32 %v3_e2f8 to i8*
  store i8 %v5_dd60, i8* %v4_e2f8, align 1
  store i32 %v4_e2fc, i32* %r0.global-to-local, align 4
  %v2_e300 = load i32, i32* %r1.global-to-local, align 4
  %v3_e300 = add i32 %v2_e300, 8
  %v4_e300 = inttoptr i32 %v3_e300 to i8*
  store i8 %v5_dd98, i8* %v4_e300, align 1
  %v3_e304 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e304, i32* %r2.global-to-local, align 4
  store i32 %v6_de30, i32* %ip.global-to-local, align 4
  %v3_e30c = mul i32 %v3_e304, 32
  store i32 %v3_e30c, i32* %r3.global-to-local, align 4
  %v1_e310 = load i32, i32* %r1.global-to-local, align 4
  %v2_e310 = add i32 %v1_e310, 12
  %v3_e310 = inttoptr i32 %v2_e310 to i32*
  store i32 %v6_de30, i32* %v3_e310, align 4
  %v0_e314 = load i32, i32* %r3.global-to-local, align 4
  %v1_e314 = load i32, i32* %r2.global-to-local, align 4
  %tmp86 = mul i32 %v1_e314, -8
  %v5_e314 = add i32 %v0_e314, %tmp86
  %v1_e318 = load i32, i32* @r8, align 4
  %v2_e318 = add i32 %v5_e314, %v1_e318
  store i32 %v2_e318, i32* %r3.global-to-local, align 4
  %v1_e31c = add i32 %v2_e318, 16
  %v2_e31c = inttoptr i32 %v1_e31c to i32*
  %v3_e31c = load i32, i32* %v2_e31c, align 4
  store i32 %v3_e31c, i32* %ip.global-to-local, align 4
  %v1_e320 = add i32 %v1_e314, 1
  store i32 %v1_e320, i32* @r6, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_e32c = load i32, i32* %r1.global-to-local, align 4
  %v3_e32c = add i32 %v2_e32c, 6
  %v4_e32c = inttoptr i32 %v3_e32c to i8*
  store i8 64, i8* %v4_e32c, align 1
  %v0_e330 = load i32, i32* %r2.global-to-local, align 4
  %v1_e330 = trunc i32 %v0_e330 to i8
  %v2_e330 = load i32, i32* %r1.global-to-local, align 4
  %v3_e330 = add i32 %v2_e330, 7
  %v4_e330 = inttoptr i32 %v3_e330 to i8*
  store i8 %v1_e330, i8* %v4_e330, align 1
  %v0_e334 = load i32, i32* %ip.global-to-local, align 4
  %v1_e334 = load i32, i32* %r1.global-to-local, align 4
  %v2_e334 = add i32 %v1_e334, 16
  %v3_e334 = inttoptr i32 %v2_e334 to i32*
  store i32 %v0_e334, i32* %v3_e334, align 4
  store i32 %v3_e280, i32* %r3.global-to-local, align 4
  store i32 %v7_e27c, i32* %ip.global-to-local, align 4
  %v2_e344 = load i32, i32* %r1.global-to-local, align 4
  %v3_e344 = add i32 %v2_e344, 2
  %v4_e344 = inttoptr i32 %v3_e344 to i8*
  store i8 %v5_df3c, i8* %v4_e344, align 1
  %v0_e348 = load i32, i32* %r3.global-to-local, align 4
  %v1_e348 = trunc i32 %v0_e348 to i8
  %v2_e348 = load i32, i32* %r1.global-to-local, align 4
  %v3_e348 = add i32 %v2_e348, 3
  %v4_e348 = inttoptr i32 %v3_e348 to i8*
  store i8 %v1_e348, i8* %v4_e348, align 1
  %v0_e34c = load i32, i32* %ip.global-to-local, align 4
  %v1_e34c = trunc i32 %v0_e34c to i8
  %v2_e34c = load i32, i32* %r1.global-to-local, align 4
  %v3_e34c = add i32 %v2_e34c, 4
  %v4_e34c = inttoptr i32 %v3_e34c to i8*
  store i8 %v1_e34c, i8* %v4_e34c, align 1
  store i32 %v3_e284, i32* %r2.global-to-local, align 4
  store i32 %v4_e354, i32* %r3.global-to-local, align 4
  store i32 %v4_e358, i32* %ip.global-to-local, align 4
  %v0_e35c = load i32, i32* %r1.global-to-local, align 4
  %v1_e35c = add i32 %v0_e35c, 20
  store i32 %v1_e35c, i32* %r0.global-to-local, align 4
  %v3_e360 = add i32 %v0_e35c, 5
  %v4_e360 = inttoptr i32 %v3_e360 to i8*
  store i8 %v1_e360, i8* %v4_e360, align 1
  %v0_e364 = load i32, i32* @r4, align 4
  %v1_e364 = trunc i32 %v0_e364 to i8
  %v2_e364 = load i32, i32* %r1.global-to-local, align 4
  %v3_e364 = add i32 %v2_e364, 20
  %v4_e364 = inttoptr i32 %v3_e364 to i8*
  store i8 %v1_e364, i8* %v4_e364, align 1
  %v0_e368 = load i32, i32* %r3.global-to-local, align 4
  %v1_e368 = trunc i32 %v0_e368 to i8
  %v2_e368 = load i32, i32* %r0.global-to-local, align 4
  %v3_e368 = add i32 %v2_e368, 5
  %v4_e368 = inttoptr i32 %v3_e368 to i8*
  store i8 %v1_e368, i8* %v4_e368, align 1
  %v0_e36c = load i32, i32* %ip.global-to-local, align 4
  %v1_e36c = trunc i32 %v0_e36c to i8
  %v2_e36c = load i32, i32* %r0.global-to-local, align 4
  %v3_e36c = add i32 %v2_e36c, 1
  %v4_e36c = inttoptr i32 %v3_e36c to i8*
  store i8 %v1_e36c, i8* %v4_e36c, align 1
  %v0_e370 = load i32, i32* @r5, align 4
  %v1_e370 = trunc i32 %v0_e370 to i8
  %v2_e370 = load i32, i32* %r0.global-to-local, align 4
  %v3_e370 = add i32 %v2_e370, 2
  %v4_e370 = inttoptr i32 %v3_e370 to i8*
  store i8 %v1_e370, i8* %v4_e370, align 1
  store i32 %v4_e374, i32* %r1.global-to-local, align 4
  %v0_e378 = load i32, i32* @r6, align 4
  %v1_e378 = load i32, i32* @sl, align 4
  %v9_e378 = icmp eq i32 %v0_e378, %v1_e378
  store i1 %v9_e378, i1* %cpsr_z.global-to-local, align 1
  %v2_e37c = load i32, i32* %r0.global-to-local, align 4
  %v3_e37c = add i32 %v2_e37c, 3
  %v4_e37c = inttoptr i32 %v3_e37c to i8*
  store i8 %v1_e37c, i8* %v4_e37c, align 1
  %v0_e380 = load i32, i32* @r7, align 4
  %v1_e380 = trunc i32 %v0_e380 to i8
  %v2_e380 = load i32, i32* %r0.global-to-local, align 4
  %v3_e380 = add i32 %v2_e380, 4
  %v4_e380 = inttoptr i32 %v3_e380 to i8*
  store i8 %v1_e380, i8* %v4_e380, align 1
  %v0_e384 = load i32, i32* @r6, align 4
  store i32 %v0_e384, i32* %stack_var_-40, align 4
  %v5_e388 = icmp slt i32 %v0_e378, %v1_e378
  br i1 %v5_e388, label %dec_label_pc_e2ac, label %dec_label_pc_e04c

; uselistorder directives
  uselistorder i32 %v1_e314, { 1, 0 }
  uselistorder i32 %v3_e284, { 2, 1, 0 }
  uselistorder i32 %v3_e280, { 1, 0 }
  uselistorder i32 %v7_e27c, { 1, 0 }
  uselistorder i32 %v4_e244, { 1, 0 }
  uselistorder i32 %v0_e23c, { 0, 2, 1 }
  uselistorder i32 %v0_e220, { 0, 2, 1 }
  uselistorder i32 %v4_e20c, { 1, 0 }
  uselistorder i32 %v0_e204, { 0, 2, 1 }
  uselistorder i32 %v2_e1d8, { 1, 0 }
  uselistorder i32 %v8_e1b8, { 2, 0, 1, 3 }
  uselistorder i32 %v3_e1a4, { 1, 0 }
  uselistorder i32 %v3_e180, { 1, 3, 2, 0 }
  uselistorder i1 %v2_e174, { 1, 0 }
  uselistorder i32 %v1_e168, { 1, 2, 3, 0 }
  uselistorder i32 %v1_e164, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_e10c, { 0, 2, 1 }
  uselistorder i32 %v0_e0f4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_e0e0, { 1, 0 }
  uselistorder i32 %v2_e0dc, { 0, 2, 1 }
  uselistorder i1 %v7_e08c, { 2, 1, 0 }
  uselistorder i1 %v3_e1f8, { 1, 0, 2, 3 }
  uselistorder i8 %v5_df3c, { 0, 2, 1 }
  uselistorder i32 %v3_df28, { 1, 0 }
  uselistorder i32 %v1_df18, { 2, 3, 0, 1 }
  uselistorder i32 %v1_df14, { 1, 2, 0 }
  uselistorder i32 %v1_df0c, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v1_df04, { 1, 0 }
  uselistorder i32 %v1_dedc, { 2, 1, 0, 3 }
  uselistorder i32 %v3_debc, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v3_de9c, { 2, 1, 4, 3, 0 }
  uselistorder i32 %v0_de98, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v0_de94, { 3, 0, 4, 1, 2 }
  uselistorder i32 %v3_de88, { 3, 1, 2, 0 }
  uselistorder i1 %v7_de74, { 1, 0 }
  uselistorder i1 %v7_de48, { 1, 0 }
  uselistorder i32 %v3_de44, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_de30, { 2, 1, 7, 5, 0, 6, 4, 3 }
  uselistorder i32 %v1_de1c, { 3, 1, 2, 0 }
  uselistorder i32 %v1_dda8, { 1, 0 }
  uselistorder i8 %v5_dd98, { 1, 0, 2 }
  uselistorder i32 %v5_dd7c, { 1, 0 }
  uselistorder i8 %v5_dd60, { 0, 2, 1 }
  uselistorder i32 %v6_dd40, { 1, 0 }
  uselistorder i32 %v2_dd28, { 0, 3, 1, 5, 2, 4 }
  uselistorder i32 %v1_dd0c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 14, 13 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 48, 47, 49, 50, 52, 51, 54, 53, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 10, 8, 9, 12, 11, 14, 13, 15, 16, 17, 19, 18, 21, 20, 22, 24, 23, 30, 25, 26, 27, 28, 29, 35, 31, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_e270, { 1, 0 }
  uselistorder label %dec_label_pc_e258, { 1, 0 }
  uselistorder label %dec_label_pc_e0cc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e054, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
}

define i32 @function_e394(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_e394:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_e394 = load i32, i32* @r4, align 4
  %v12_e394 = load i32, i32* @r7, align 4
  %v1_e398 = urem i32 %arg1, 256
  store i32 %v1_e398, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @sl, align 4
  %v1_e3ac = urem i32 %arg3, 256
  store i32 %v1_e3ac, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_e3b4 = call i32 @function_14e34(i32 %v1_e398, i32 4)
  %v0_e3b8 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_e3c4 = load i32, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_e3cc = inttoptr i32 %v0_e3b8 to i32*
  %v6_e3cc = call i32 @function_a4e8(i32 %v0_e3c4, i32* %v5_e3cc, i32 2, i32 0)
  %v1_e3d8 = urem i32 %v6_e3cc, 256
  store i32 %v1_e3d8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_e3e4 = load i32, i32* @r4, align 4
  %v0_e3e8 = load i32, i32* @r5, align 4
  %v5_e3ec = trunc i32 %v6_e3cc to i8
  %v6_e3f0 = inttoptr i32 %v0_e3e8 to i32*
  %v7_e3f0 = call i32 @function_a4e8(i32 %v0_e3e4, i32* %v6_e3f0, i32 3, i32 65535)
  %v0_e3f4 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_e3f0, i32* @r7, align 4
  %v0_e404 = load i32, i32* @r4, align 4
  %v4_e408 = inttoptr i32 %v0_e3f4 to i32*
  %v5_e408 = call i32 @function_a4e8(i32 %v0_e404, i32* %v4_e408, i32 4, i32 64)
  %v1_e410 = urem i32 %v5_e408, 256
  store i32 %v1_e410, i32* %ip.global-to-local, align 4
  %v0_e414 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_e420 = load i32, i32* @r4, align 4
  %v5_e424 = trunc i32 %v5_e408 to i8
  %v6_e428 = inttoptr i32 %v0_e414 to i32*
  %v7_e428 = call i32 @function_a4e8(i32 %v0_e420, i32* %v6_e428, i32 5, i32 0)
  %v1_e434 = urem i32 %v7_e428, 256
  store i32 %v1_e434, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_e440 = load i32, i32* @r4, align 4
  %v0_e444 = load i32, i32* @r5, align 4
  %v5_e44c = inttoptr i32 %v0_e444 to i32*
  %v6_e44c = call i32 @function_a4e8(i32 %v0_e440, i32* %v5_e44c, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_e45c = load i32, i32* @r5, align 4
  store i32 %v6_e44c, i32* @r6, align 4
  %v0_e464 = load i32, i32* @r4, align 4
  %v4_e468 = inttoptr i32 %v0_e45c to i32*
  %v5_e468 = call i32 @function_a4e8(i32 %v0_e464, i32* %v4_e468, i32 7, i32 27015)
  store i32 %v5_e468, i32* @r4, align 4
  %v1_e474 = call i32 @function_12f50(i32 29)
  %v3_e480 = call i32 @function_12e6c(i32 29, i32* nonnull %stack_var_-44)
  store i32 %v3_e480, i32* %r8.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_e494 = call i32 @function_14b30(i32 2, i32 3, i32 17)
  %v7_e498 = icmp eq i32 %v3_e494, -1
  store i1 %v7_e498, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_e494, i32* %fp.global-to-local, align 4
  br i1 %v7_e498, label %dec_label_pc_e84c, label %dec_label_pc_e4a4

dec_label_pc_e4a4:                                ; preds = %dec_label_pc_e394
  store i32 1, i32* %stack_var_-40, align 4
  %v6_e4ac = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_e4ac, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_e4c0 = call i32 @function_14b00(i32 %v3_e494, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_e4c4 = icmp eq i32 %v6_e4c0, -1
  store i1 %v7_e4c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e4c4, label %dec_label_pc_e844, label %dec_label_pc_e4cc

dec_label_pc_e4cc:                                ; preds = %dec_label_pc_e4a4
  %v0_e4cc = load i32, i32* @r4, align 4
  %v3_e4cc = mul i32 %v0_e4cc, 65536
  store i32 %v3_e4cc, i32* @lr, align 4
  %v0_e4d0 = load i32, i32* @r7, align 4
  %v0_e4d4 = load i32, i32* @r6, align 4
  %v3_e4d4 = mul i32 %v0_e4d4, 65536
  store i32 %v3_e4d4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_e4dc = urem i32 %v0_e4d0, 65536
  %v3_e4e0 = urem i32 %v0_e4d4, 65536
  store i32 %v3_e4e0, i32* %r2.global-to-local, align 4
  %v3_e4e4 = urem i32 %v0_e4cc, 65536
  store i32 %v3_e4e4, i32* %r3.global-to-local, align 4
  %v0_e4e8 = load i32, i32* %sb.global-to-local, align 4
  %v2_e4e8 = icmp eq i32 %v0_e4e8, 0
  store i1 %v2_e4e8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp50 = icmp slt i32 %v0_e4e8, 1
  br i1 %tmp50, label %dec_label_pc_e66c, label %dec_label_pc_e500

dec_label_pc_e500:                                ; preds = %dec_label_pc_e4cc
  %v1_e504 = urem i32 %v0_e4cc, 256
  %v1_e508 = urem i32 %v0_e4d0, 256
  %v3_e50c = mul nuw nsw i32 %v1_e504, 256
  %v1_e510 = urem i32 %v0_e4d4, 256
  %tmp51 = udiv i32 %v0_e4d0, 256
  %v3_e514 = urem i32 %tmp51, 256
  %tmp52 = udiv i32 %v0_e4d4, 256
  %v3_e518 = urem i32 %tmp52, 256
  store i32 %v3_e518, i32* %ip.global-to-local, align 4
  %v4_e51c = mul nuw nsw i32 %v1_e508, 256
  %v5_e51c = or i32 %v4_e51c, %v3_e514
  store i32 %v5_e51c, i32* @r7, align 4
  %v4_e520 = mul nuw nsw i32 %v1_e510, 256
  %v5_e520 = or i32 %v4_e520, %v3_e518
  store i32 %v5_e520, i32* @r6, align 4
  %tmp53 = udiv i32 %v0_e4cc, 256
  %v4_e524 = urem i32 %tmp53, 256
  %v5_e524 = or i32 %v4_e524, %v3_e50c
  store i32 %v5_e524, i32* @r5, align 4
  store i32 %v1_e510, i32* %r2.global-to-local, align 4
  store i32 %v1_e504, i32* %r3.global-to-local, align 4
  %v2_e5a0 = icmp eq i32 %v1_e434, 0
  %v4_e5a4 = sext i8 %v5_e424 to i32
  %sext = mul i32 %v0_e4d0, 16777216
  %v4_e5c0 = sdiv i32 %sext, 16777216
  %sext6 = mul i32 %v0_e4d4, 16777216
  %v4_e61c = sdiv i32 %sext6, 16777216
  %sext7 = mul i32 %v0_e4cc, 16777216
  %v4_e63c = sdiv i32 %sext7, 16777216
  br label %dec_label_pc_e540

dec_label_pc_e540:                                ; preds = %bb57, %dec_label_pc_e500
  %v2_e548 = call i32 @function_14e34(i32 128, i32 1)
  store i32 %v2_e3b4, i32* %r2.global-to-local, align 4
  %v3_e550 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e550, i32* %r3.global-to-local, align 4
  %v2_e554 = load i32, i32* @r4, align 4
  %v5_e554 = mul i32 %v2_e554, 4
  %v6_e554 = add i32 %v5_e554, %v2_e3b4
  %v7_e554 = inttoptr i32 %v6_e554 to i32*
  store i32 %v2_e548, i32* %v7_e554, align 4
  %v0_e558 = load i32, i32* %r2.global-to-local, align 4
  %v1_e558 = load i32, i32* %r3.global-to-local, align 4
  %v4_e558 = mul i32 %v1_e558, 4
  %v5_e558 = add i32 %v4_e558, %v0_e558
  %v6_e558 = inttoptr i32 %v5_e558 to i32*
  %v7_e558 = load i32, i32* %v6_e558, align 4
  store i32 %v7_e558, i32* @lr, align 4
  %v1_e55c = inttoptr i32 %v7_e558 to i8*
  %v2_e55c = load i8, i8* %v1_e55c, align 1
  %tmp = urem i8 %v2_e55c, 16
  %v1_e560 = zext i8 %tmp to i32
  %v1_e564 = or i32 %v1_e560, 64
  store i32 %v1_e564, i32* %r3.global-to-local, align 4
  %v1_e568 = trunc i32 %v1_e564 to i8
  store i8 %v1_e568, i8* %v1_e55c, align 1
  %v0_e56c = load i32, i32* @lr, align 4
  %v1_e56c = inttoptr i32 %v0_e56c to i8*
  %v2_e56c = load i8, i8* %v1_e56c, align 1
  %v1_e570 = and i8 %v2_e56c, -16
  %v1_e574 = or i8 %v1_e570, 5
  store i8 %v1_e574, i8* %v1_e56c, align 1
  %v2_e580 = load i32, i32* @lr, align 4
  %v3_e580 = add i32 %v2_e580, 1
  %v4_e580 = inttoptr i32 %v3_e580 to i8*
  store i8 %v5_e3ec, i8* %v4_e580, align 1
  %v3_e584 = load i32, i32* %stack_var_-44, align 4
  %v1_e588 = add i32 %v3_e584, 32
  %tmp54 = mul i32 %v1_e588, 256
  %v1_e594 = and i32 %tmp54, 65280
  %tmp55 = udiv i32 %v1_e588, 256
  %v4_e598 = urem i32 %tmp55, 256
  %v5_e598 = or i32 %v4_e598, %v1_e594
  store i32 %v5_e598, i32* %r2.global-to-local, align 4
  store i1 %v2_e5a0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_e5a4, i32* %r3.global-to-local, align 4
  %v2_e5a8 = load i32, i32* @lr, align 4
  %v3_e5a8 = add i32 %v2_e5a8, 8
  %v4_e5a8 = inttoptr i32 %v3_e5a8 to i8*
  store i8 %v5_e424, i8* %v4_e5a8, align 1
  %v0_e5ac = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e5ac, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_e540
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_e5b0 = load i32, i32* @lr, align 4
  %v4_e5b0 = add i32 %v3_e5b0, 6
  %v5_e5b0 = inttoptr i32 %v4_e5b0 to i8*
  store i8 64, i8* %v5_e5b0, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e540, %bb
  %v0_e5b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_e5b4 = trunc i32 %v0_e5b4 to i8
  %v2_e5b4 = load i32, i32* @lr, align 4
  %v3_e5b4 = add i32 %v2_e5b4, 2
  %v4_e5b4 = inttoptr i32 %v3_e5b4 to i8*
  store i8 %v1_e5b4, i8* %v4_e5b4, align 1
  %v0_e5b8 = load i32, i32* %r2.global-to-local, align 4
  %v3_e5b8 = sdiv i32 %v0_e5b8, 256
  store i32 %v3_e5b8, i32* %ip.global-to-local, align 4
  store i32 %v4_e5c0, i32* %r2.global-to-local, align 4
  %v2_e5c4 = load i32, i32* @lr, align 4
  %v3_e5c4 = add i32 %v2_e5c4, 9
  %v4_e5c4 = inttoptr i32 %v3_e5c4 to i8*
  store i8 17, i8* %v4_e5c4, align 1
  store i32 ptrtoint (i32* @global_var_1f858.88 to i32), i32* %r3.global-to-local, align 4
  %v0_e5cc = load i32, i32* %r2.global-to-local, align 4
  %v1_e5cc = trunc i32 %v0_e5cc to i8
  %v2_e5cc = load i32, i32* @lr, align 4
  %v3_e5cc = add i32 %v2_e5cc, 5
  %v4_e5cc = inttoptr i32 %v3_e5cc to i8*
  store i8 %v1_e5cc, i8* %v4_e5cc, align 1
  %v0_e5d0 = load i32, i32* %ip.global-to-local, align 4
  %v1_e5d0 = trunc i32 %v0_e5d0 to i8
  %v2_e5d0 = load i32, i32* @lr, align 4
  %v3_e5d0 = add i32 %v2_e5d0, 3
  %v4_e5d0 = inttoptr i32 %v3_e5d0 to i8*
  store i8 %v1_e5d0, i8* %v4_e5d0, align 1
  %v0_e5d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e5d4, label %.thread8, label %bb56

.thread8:                                         ; preds = %.thread
  %v3_e5d89 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e5d89, i32* %ip.global-to-local, align 4
  br label %bb57

bb56:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e5d8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e5d8, i32* %ip.global-to-local, align 4
  %v3_e5dc = load i32, i32* @lr, align 4
  %v4_e5dc = add i32 %v3_e5dc, 7
  %v5_e5dc = inttoptr i32 %v4_e5dc to i8*
  store i8 0, i8* %v5_e5dc, align 1
  %v0_e5e4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %bb56
  %v0_e5e4 = phi i32 [ %v3_e5d89, %.thread8 ], [ %v0_e5e4.pre, %bb56 ]
  %v2_e5e0 = load i32, i32* @global_var_1f858.88, align 4
  store i32 %v2_e5e0, i32* %r2.global-to-local, align 4
  %v3_e5e4 = mul i32 %v0_e5e4, 32
  store i32 %v3_e5e4, i32* %r3.global-to-local, align 4
  %v1_e5e8 = load i32, i32* @lr, align 4
  %v2_e5e8 = add i32 %v1_e5e8, 12
  %v3_e5e8 = inttoptr i32 %v2_e5e8 to i32*
  store i32 %v2_e5e0, i32* %v3_e5e8, align 4
  %v0_e5ec = load i32, i32* %r3.global-to-local, align 4
  %v1_e5ec = load i32, i32* %ip.global-to-local, align 4
  %tmp60 = mul i32 %v1_e5ec, -8
  %v5_e5ec = add i32 %v0_e5ec, %tmp60
  %v1_e5f0 = load i32, i32* @sl, align 4
  %v2_e5f0 = add i32 %v5_e5ec, %v1_e5f0
  store i32 %v2_e5f0, i32* %r3.global-to-local, align 4
  %v1_e5f4 = add i32 %v2_e5f0, 16
  %v2_e5f4 = inttoptr i32 %v1_e5f4 to i32*
  %v3_e5f4 = load i32, i32* %v2_e5f4, align 4
  %v1_e5f8 = load i32, i32* @lr, align 4
  %v2_e5f8 = add i32 %v1_e5f8, 16
  %v3_e5f8 = inttoptr i32 %v2_e5f8 to i32*
  store i32 %v3_e5f4, i32* %v3_e5f8, align 4
  %v3_e5fc = load i32, i32* %stack_var_-44, align 4
  %v1_e600 = add i32 %v3_e5fc, 12
  %tmp58 = mul i32 %v1_e600, 256
  %v1_e610 = and i32 %tmp58, 65280
  %tmp59 = udiv i32 %v1_e600, 256
  %v4_e614 = urem i32 %tmp59, 256
  %v5_e614 = or i32 %v4_e614, %v1_e610
  store i32 %v5_e614, i32* %ip.global-to-local, align 4
  %v1_e618 = load i32, i32* @lr, align 4
  %v2_e618 = add i32 %v1_e618, 28
  %v3_e618 = inttoptr i32 %v2_e618 to i32*
  store i32 -1, i32* %v3_e618, align 4
  store i32 %v4_e61c, i32* %r2.global-to-local, align 4
  %v0_e620 = load i32, i32* @lr, align 4
  %v1_e620 = add i32 %v0_e620, 20
  store i32 %v1_e620, i32* %r4.global-to-local, align 4
  %v0_e624 = load i32, i32* %ip.global-to-local, align 4
  %v3_e624 = sdiv i32 %v0_e624, 256
  store i32 %v3_e624, i32* %r3.global-to-local, align 4
  %v0_e628 = load i32, i32* @r7, align 4
  %v1_e628 = trunc i32 %v0_e628 to i8
  %v3_e628 = add i32 %v0_e620, 4
  %v4_e628 = inttoptr i32 %v3_e628 to i8*
  store i8 %v1_e628, i8* %v4_e628, align 1
  %v0_e62c = load i32, i32* @r6, align 4
  %v1_e62c = trunc i32 %v0_e62c to i8
  %v2_e62c = load i32, i32* @lr, align 4
  %v3_e62c = add i32 %v2_e62c, 20
  %v4_e62c = inttoptr i32 %v3_e62c to i8*
  store i8 %v1_e62c, i8* %v4_e62c, align 1
  %v0_e630 = load i32, i32* %r3.global-to-local, align 4
  %v1_e630 = trunc i32 %v0_e630 to i8
  %v2_e630 = load i32, i32* %r4.global-to-local, align 4
  %v3_e630 = add i32 %v2_e630, 5
  %v4_e630 = inttoptr i32 %v3_e630 to i8*
  store i8 %v1_e630, i8* %v4_e630, align 1
  %v0_e634 = load i32, i32* @r5, align 4
  %v1_e634 = trunc i32 %v0_e634 to i8
  %v2_e634 = load i32, i32* %r4.global-to-local, align 4
  %v3_e634 = add i32 %v2_e634, 2
  %v4_e634 = inttoptr i32 %v3_e634 to i8*
  store i8 %v1_e634, i8* %v4_e634, align 1
  %v0_e638 = load i32, i32* %r2.global-to-local, align 4
  %v1_e638 = trunc i32 %v0_e638 to i8
  %v2_e638 = load i32, i32* %r4.global-to-local, align 4
  %v3_e638 = add i32 %v2_e638, 1
  %v4_e638 = inttoptr i32 %v3_e638 to i8*
  store i8 %v1_e638, i8* %v4_e638, align 1
  store i32 %v4_e63c, i32* %r3.global-to-local, align 4
  %v0_e640 = load i32, i32* %ip.global-to-local, align 4
  %v1_e640 = trunc i32 %v0_e640 to i8
  %v2_e640 = load i32, i32* %r4.global-to-local, align 4
  %v3_e640 = add i32 %v2_e640, 4
  %v4_e640 = inttoptr i32 %v3_e640 to i8*
  store i8 %v1_e640, i8* %v4_e640, align 1
  %v0_e644 = load i32, i32* %r3.global-to-local, align 4
  %v1_e644 = trunc i32 %v0_e644 to i8
  %v2_e644 = load i32, i32* %r4.global-to-local, align 4
  %v3_e644 = add i32 %v2_e644, 3
  %v4_e644 = inttoptr i32 %v3_e644 to i8*
  store i8 %v1_e644, i8* %v4_e644, align 1
  %v0_e648 = load i32, i32* %r8.global-to-local, align 4
  %v0_e64c = load i32, i32* @lr, align 4
  %v1_e64c = add i32 %v0_e64c, 32
  %v3_e650 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_e650, i32* %r2.global-to-local, align 4
  %v3_e654 = call i32 @function_138f0(i32 %v1_e64c, i32 %v0_e648, i32 %v3_e650)
  %v3_e658 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e658, i32* %r3.global-to-local, align 4
  %v1_e65c = add i32 %v3_e658, 1
  store i32 %v1_e65c, i32* @r4, align 4
  %v1_e660 = load i32, i32* %sb.global-to-local, align 4
  %v9_e660 = icmp eq i32 %v1_e65c, %v1_e660
  store i1 %v9_e660, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e65c, i32* %stack_var_-40, align 4
  %v5_e668 = icmp slt i32 %v1_e65c, %v1_e660
  br i1 %v5_e668, label %dec_label_pc_e540, label %dec_label_pc_e66c

dec_label_pc_e66c:                                ; preds = %bb57, %dec_label_pc_e4cc
  %v0_e66c = phi i32 [ %v0_e4e8, %dec_label_pc_e4cc ], [ %v1_e660, %bb57 ]
  %v2_e66c = icmp eq i32 %v0_e66c, 0
  store i1 %v2_e66c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_e6b4 = icmp eq i32 %v3_e4dc, 65535
  br label %dec_label_pc_e674.outer

dec_label_pc_e674.outer:                          ; preds = %dec_label_pc_e784, %dec_label_pc_e66c
  %v1_e674.ph.in = phi i32 [ %v1_e778, %dec_label_pc_e784 ], [ %v0_e66c, %dec_label_pc_e66c ]
  %v0_e674.ph = phi i1 [ %v2_e784, %dec_label_pc_e784 ], [ %v2_e66c, %dec_label_pc_e66c ]
  %v1_e674.ph = icmp slt i32 %v1_e674.ph.in, 0
  %v4_e674 = or i1 %v1_e674.ph, %v0_e674.ph
  br label %dec_label_pc_e674

dec_label_pc_e674:                                ; preds = %dec_label_pc_e674.outer, %dec_label_pc_e674
  br i1 %v4_e674, label %dec_label_pc_e674, label %dec_label_pc_e678

dec_label_pc_e678:                                ; preds = %dec_label_pc_e674
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_e684

dec_label_pc_e684:                                ; preds = %dec_label_pc_e6d4, %dec_label_pc_e678
  %v1_e698 = phi i32 [ %v1_e774, %dec_label_pc_e6d4 ], [ 0, %dec_label_pc_e678 ]
  %v5_e688 = mul i32 %v1_e698, 24
  %v1_e68c = load i32, i32* @sl, align 4
  %v2_e68c = add i32 %v1_e68c, %v5_e688
  store i32 %v2_e68c, i32* %r3.global-to-local, align 4
  %v1_e694 = add i32 %v2_e68c, 20
  %v2_e694 = inttoptr i32 %v1_e694 to i8*
  %v3_e694 = load i8, i8* %v2_e694, align 1
  %v4_e694 = zext i8 %v3_e694 to i32
  store i32 %v4_e694, i32* %r2.global-to-local, align 4
  %v4_e698 = mul i32 %v1_e698, 4
  %v5_e698 = add i32 %v4_e698, %v2_e3b4
  %v6_e698 = inttoptr i32 %v5_e698 to i32*
  %v7_e698 = load i32, i32* %v6_e698, align 4
  store i32 %v7_e698, i32* @r5, align 4
  %v7_e6a0 = icmp eq i8 %v3_e694, 31
  store i1 %v7_e6a0, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_e6a8 = add i32 %v7_e698, 20
  store i32 %v1_e6a8, i32* @r6, align 4
  %tmp61 = icmp ult i8 %v3_e694, 32
  br i1 %tmp61, label %dec_label_pc_e790, label %dec_label_pc_e6b0

dec_label_pc_e6b0:                                ; preds = %dec_label_pc_e684
  store i32 %v3_e4dc, i32* %r2.global-to-local, align 4
  store i1 %v3_e6b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e6b4, label %dec_label_pc_e7f8, label %dec_label_pc_e6bc

dec_label_pc_e6bc:                                ; preds = %dec_label_pc_e790.dec_label_pc_e6bc_crit_edge, %dec_label_pc_e6b0
  %v1_e6c0 = phi i32 [ %v1_e6c0.pre, %dec_label_pc_e790.dec_label_pc_e6bc_crit_edge ], [ 65535, %dec_label_pc_e6b0 ]
  store i32 %v3_e4e0, i32* %r3.global-to-local, align 4
  %v9_e6c0 = icmp eq i32 %v3_e4e0, %v1_e6c0
  store i1 %v9_e6c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e6c0, label %dec_label_pc_e814, label %dec_label_pc_e6c8

dec_label_pc_e6c8:                                ; preds = %dec_label_pc_e7f8.dec_label_pc_e6c8_crit_edge, %dec_label_pc_e6bc
  %v1_e6cc = phi i32 [ %v1_e6cc.pre, %dec_label_pc_e7f8.dec_label_pc_e6c8_crit_edge ], [ %v1_e6c0, %dec_label_pc_e6bc ]
  %v9_e6cc = icmp eq i32 %v3_e4e4, %v1_e6cc
  store i1 %v9_e6cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e6cc, label %dec_label_pc_e830, label %dec_label_pc_e6d4

dec_label_pc_e6d4:                                ; preds = %dec_label_pc_e814, %dec_label_pc_e6c8, %dec_label_pc_e830
  %v0_e6d8 = load i32, i32* %r8.global-to-local, align 4
  %v1_e6d8 = trunc i32 %v0_e6d8 to i8
  %v2_e6d8 = load i32, i32* @r5, align 4
  %v3_e6d8 = add i32 %v2_e6d8, 10
  %v4_e6d8 = inttoptr i32 %v3_e6d8 to i8*
  store i8 %v1_e6d8, i8* %v4_e6d8, align 1
  %v0_e6dc = load i32, i32* %r8.global-to-local, align 4
  %v1_e6dc = trunc i32 %v0_e6dc to i8
  %v2_e6dc = load i32, i32* @r5, align 4
  %v3_e6dc = add i32 %v2_e6dc, 11
  %v4_e6dc = inttoptr i32 %v3_e6dc to i8*
  store i8 %v1_e6dc, i8* %v4_e6dc, align 1
  %v0_e6e0 = load i32, i32* @r5, align 4
  store i32 %v0_e6e0, i32* @r0, align 4
  %v2_e6e4 = call i32 @function_f008(i32 %v0_e6e0, i32 20)
  %v3_e6e4 = trunc i32 %v2_e6e4 to i8
  %v4_e6e8 = sdiv i32 %v2_e6e4, 256
  store i32 %v4_e6e8, i32* %r3.global-to-local, align 4
  %v1_e6ec = trunc i32 %v4_e6e8 to i8
  %v2_e6ec = load i32, i32* @r5, align 4
  %v3_e6ec = add i32 %v2_e6ec, 11
  %v4_e6ec = inttoptr i32 %v3_e6ec to i8*
  store i8 %v1_e6ec, i8* %v4_e6ec, align 1
  %v3_e6f0 = load i32, i32* @r5, align 4
  %v4_e6f0 = add i32 %v3_e6f0, 10
  %v5_e6f0 = inttoptr i32 %v4_e6f0 to i8*
  store i8 %v3_e6e4, i8* %v5_e6f0, align 1
  %v0_e6f4 = load i32, i32* %r8.global-to-local, align 4
  %v1_e6f4 = trunc i32 %v0_e6f4 to i8
  %v2_e6f4 = load i32, i32* @r6, align 4
  %v3_e6f4 = add i32 %v2_e6f4, 6
  %v4_e6f4 = inttoptr i32 %v3_e6f4 to i8*
  store i8 %v1_e6f4, i8* %v4_e6f4, align 1
  %v0_e6f8 = load i32, i32* %r8.global-to-local, align 4
  %v1_e6f8 = trunc i32 %v0_e6f8 to i8
  %v2_e6f8 = load i32, i32* @r6, align 4
  %v3_e6f8 = add i32 %v2_e6f8, 7
  %v4_e6f8 = inttoptr i32 %v3_e6f8 to i8*
  store i8 %v1_e6f8, i8* %v4_e6f8, align 1
  %v0_e6fc = load i32, i32* @r5, align 4
  %v1_e6fc = add i32 %v0_e6fc, 24
  %v2_e6fc = inttoptr i32 %v1_e6fc to i8*
  %v3_e6fc = load i8, i8* %v2_e6fc, align 1
  %v4_e6fc = zext i8 %v3_e6fc to i32
  store i32 %v4_e6fc, i32* %r3.global-to-local, align 4
  %v1_e700 = add i32 %v0_e6fc, 25
  %v2_e700 = inttoptr i32 %v1_e700 to i8*
  %v3_e700 = load i8, i8* %v2_e700, align 1
  %v4_e700 = zext i8 %v3_e700 to i32
  %v4_e704 = mul nuw nsw i32 %v4_e700, 256
  %v5_e704 = or i32 %v4_e704, %v4_e6fc
  store i32 %v5_e704, i32* %r2.global-to-local, align 4
  %v3_e708 = load i32, i32* %stack_var_-44, align 4
  %v0_e70c = load i32, i32* @r6, align 4
  store i32 %v0_e70c, i32* @r1, align 4
  %v1_e710 = add i32 %v3_e708, 12
  store i32 %v1_e710, i32* %r3.global-to-local, align 4
  %v4_e718 = call i32 @function_f064(i32 %v0_e6fc, i32 %v0_e70c, i32 %v5_e704, i32 %v1_e710)
  %v5_e718 = trunc i32 %v4_e718 to i8
  %v4_e71c24 = udiv i32 %v4_e718, 256
  %v1_e720 = trunc i32 %v4_e71c24 to i8
  %v2_e720 = load i32, i32* @r6, align 4
  %v3_e720 = add i32 %v2_e720, 7
  %v4_e720 = inttoptr i32 %v3_e720 to i8*
  store i8 %v1_e720, i8* %v4_e720, align 1
  %v3_e724 = load i32, i32* @r6, align 4
  %v4_e724 = add i32 %v3_e724, 6
  %v5_e724 = inttoptr i32 %v4_e724 to i8*
  store i8 %v5_e718, i8* %v5_e724, align 1
  %v3_e728 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e728, i32* %r3.global-to-local, align 4
  %v0_e72c = load i32, i32* @r5, align 4
  %v1_e72c = add i32 %v0_e72c, 20
  %v2_e72c = inttoptr i32 %v1_e72c to i32*
  %v3_e72c = load i32, i32* %v2_e72c, align 4
  %v5_e734 = mul i32 %v3_e728, 24
  %v1_e738 = load i32, i32* @sl, align 4
  %v2_e738 = add i32 %v1_e738, %v5_e734
  store i32 %v2_e738, i32* %ip.global-to-local, align 4
  %v3_e73c = udiv i32 %v3_e72c, 65536
  store i32 %v3_e73c, i32* %r2.global-to-local, align 4
  %v1_e740 = trunc i32 %v3_e73c to i8
  %v3_e740 = add i32 %v2_e738, 2
  %v4_e740 = inttoptr i32 %v3_e740 to i8*
  store i8 %v1_e740, i8* %v4_e740, align 1
  %v0_e744 = load i32, i32* %r2.global-to-local, align 4
  %v3_e74425 = udiv i32 %v0_e744, 256
  %v3_e748 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_e748, i32* %r2.global-to-local, align 4
  %v1_e74c = trunc i32 %v3_e74425 to i8
  %v2_e74c = load i32, i32* %ip.global-to-local, align 4
  %v3_e74c = add i32 %v2_e74c, 3
  %v4_e74c = inttoptr i32 %v3_e74c to i8*
  store i8 %v1_e74c, i8* %v4_e74c, align 1
  %v0_e750 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e758 = load i32, i32* %r2.global-to-local, align 4
  %v1_e758 = add i32 %v0_e758, 32
  store i32 %v1_e758, i32* %r2.global-to-local, align 4
  %v0_e75c = load i32, i32* %fp.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_e764 = load i32, i32* %ip.global-to-local, align 4
  %v6_e76c = inttoptr i32 %v0_e750 to i32*
  %v7_e76c = call i32 @function_14acc(i32 %v0_e75c, i32* %v6_e76c, i32 %v1_e758, i32 16384, i32 %v0_e764, i32 16)
  %v3_e770 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e770, i32* %r3.global-to-local, align 4
  %v1_e774 = add i32 %v3_e770, 1
  %v1_e778 = load i32, i32* %sb.global-to-local, align 4
  %v9_e778 = icmp eq i32 %v1_e774, %v1_e778
  store i1 %v9_e778, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e774, i32* %stack_var_-40, align 4
  %v5_e780 = icmp slt i32 %v1_e774, %v1_e778
  br i1 %v5_e780, label %dec_label_pc_e684, label %dec_label_pc_e784

dec_label_pc_e784:                                ; preds = %dec_label_pc_e6d4
  %v2_e784 = icmp eq i32 %v1_e778, 0
  store i1 %v2_e784, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e674.outer

dec_label_pc_e790:                                ; preds = %dec_label_pc_e684
  %v1_e790 = add i32 %v2_e68c, 16
  %v2_e790 = inttoptr i32 %v1_e790 to i32*
  %v3_e790 = load i32, i32* %v2_e790, align 4
  store i32 %v3_e790, i32* @r4, align 4
  %v0_e794 = call i32 @function_10a44()
  %v3_e798 = load i32, i32* %stack_var_-40, align 4
  %v5_e7a0 = mul i32 %v3_e798, 24
  %v0_e7a4 = load i32, i32* @r4, align 4
  %v1_e7a8 = and i32 %v0_e7a4, 65280
  store i32 %v1_e7a8, i32* %r3.global-to-local, align 4
  %v1_e7a4 = udiv i32 %v0_e7a4, 256
  %v3_e7ac = and i32 %v1_e7a4, 65280
  store i32 %v3_e7ac, i32* %r2.global-to-local, align 4
  %v1_e7b0 = load i32, i32* @sl, align 4
  %v2_e7b0 = add i32 %v1_e7b0, %v5_e7a0
  store i32 %v2_e7b0, i32* %ip.global-to-local, align 4
  %v1_e7bc = add i32 %v2_e7b0, 20
  %v2_e7bc = inttoptr i32 %v1_e7bc to i8*
  %v3_e7bc = load i8, i8* %v2_e7bc, align 1
  %v4_e7bc = zext i8 %v3_e7bc to i32
  %v2_e7c4 = call i32 @llvm.bswap.i32(i32 %v0_e7a4)
  %v7_e7c8 = lshr i32 %v0_e794, %v4_e7bc
  %v8_e7c8 = add i32 %v7_e7c8, %v2_e7c4
  store i32 %v3_e4dc, i32* %r2.global-to-local, align 4
  %v2_e7e8 = call i32 @llvm.bswap.i32(i32 %v8_e7c8)
  store i32 %v2_e7e8, i32* %r3.global-to-local, align 4
  %v1_e7ec = load i32, i32* %r7.global-to-local, align 4
  %v9_e7ec = icmp eq i32 %v3_e4dc, %v1_e7ec
  store i1 %v9_e7ec, i1* %cpsr_z.global-to-local, align 1
  %v1_e7f0 = load i32, i32* @r5, align 4
  %v2_e7f0 = add i32 %v1_e7f0, 16
  %v3_e7f0 = inttoptr i32 %v2_e7f0 to i32*
  store i32 %v2_e7e8, i32* %v3_e7f0, align 4
  br i1 %v9_e7ec, label %dec_label_pc_e7f8, label %dec_label_pc_e790.dec_label_pc_e6bc_crit_edge

dec_label_pc_e790.dec_label_pc_e6bc_crit_edge:    ; preds = %dec_label_pc_e790
  %v1_e6c0.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e6bc

dec_label_pc_e7f8:                                ; preds = %dec_label_pc_e790, %dec_label_pc_e6b0
  %v0_e7f8 = call i32 @function_10a44()
  %v1_e7f8 = trunc i32 %v0_e7f8 to i8
  %v4_e7fc26 = udiv i32 %v0_e7f8, 256
  %v1_e800 = trunc i32 %v4_e7fc26 to i8
  %v2_e800 = load i32, i32* @r5, align 4
  %v3_e800 = add i32 %v2_e800, 5
  %v4_e800 = inttoptr i32 %v3_e800 to i8*
  store i8 %v1_e800, i8* %v4_e800, align 1
  store i32 %v3_e4e0, i32* %r3.global-to-local, align 4
  %v1_e808 = load i32, i32* %r7.global-to-local, align 4
  %v9_e808 = icmp eq i32 %v3_e4e0, %v1_e808
  store i1 %v9_e808, i1* %cpsr_z.global-to-local, align 1
  %v3_e80c = load i32, i32* @r5, align 4
  %v4_e80c = add i32 %v3_e80c, 4
  %v5_e80c = inttoptr i32 %v4_e80c to i8*
  store i8 %v1_e7f8, i8* %v5_e80c, align 1
  %v0_e810 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e810, label %dec_label_pc_e814, label %dec_label_pc_e7f8.dec_label_pc_e6c8_crit_edge

dec_label_pc_e7f8.dec_label_pc_e6c8_crit_edge:    ; preds = %dec_label_pc_e7f8
  %v1_e6cc.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e6c8

dec_label_pc_e814:                                ; preds = %dec_label_pc_e7f8, %dec_label_pc_e6bc
  %v0_e814 = call i32 @function_10a44()
  %v1_e814 = trunc i32 %v0_e814 to i8
  %v4_e81c = sdiv i32 %v0_e814, 256
  store i32 %v4_e81c, i32* %r3.global-to-local, align 4
  %v1_e820 = load i32, i32* %r7.global-to-local, align 4
  %v9_e820 = icmp eq i32 %v3_e4e4, %v1_e820
  store i1 %v9_e820, i1* %cpsr_z.global-to-local, align 1
  %v3_e824 = load i32, i32* @r5, align 4
  %v4_e824 = add i32 %v3_e824, 20
  %v5_e824 = inttoptr i32 %v4_e824 to i8*
  store i8 %v1_e814, i8* %v5_e824, align 1
  %v0_e828 = load i32, i32* %r3.global-to-local, align 4
  %v1_e828 = trunc i32 %v0_e828 to i8
  %v2_e828 = load i32, i32* @r6, align 4
  %v3_e828 = add i32 %v2_e828, 1
  %v4_e828 = inttoptr i32 %v3_e828 to i8*
  store i8 %v1_e828, i8* %v4_e828, align 1
  %v0_e82c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e82c, label %dec_label_pc_e830, label %dec_label_pc_e6d4

dec_label_pc_e830:                                ; preds = %dec_label_pc_e814, %dec_label_pc_e6c8
  %v0_e830 = call i32 @function_10a44()
  %v1_e830 = trunc i32 %v0_e830 to i8
  %v4_e834 = sdiv i32 %v0_e830, 256
  store i32 %v4_e834, i32* %r3.global-to-local, align 4
  %v1_e838 = trunc i32 %v4_e834 to i8
  %v2_e838 = load i32, i32* @r6, align 4
  %v3_e838 = add i32 %v2_e838, 3
  %v4_e838 = inttoptr i32 %v3_e838 to i8*
  store i8 %v1_e838, i8* %v4_e838, align 1
  %v3_e83c = load i32, i32* @r6, align 4
  %v4_e83c = add i32 %v3_e83c, 2
  %v5_e83c = inttoptr i32 %v4_e83c to i8*
  store i8 %v1_e830, i8* %v5_e83c, align 1
  br label %dec_label_pc_e6d4

dec_label_pc_e844:                                ; preds = %dec_label_pc_e4a4
  %v0_e844 = load i32, i32* %fp.global-to-local, align 4
  %v1_e848 = call i32 @function_14234(i32 %v0_e844)
  br label %dec_label_pc_e84c

dec_label_pc_e84c:                                ; preds = %dec_label_pc_e394, %dec_label_pc_e844
  %v29_e850 = phi i32 [ %v3_e494, %dec_label_pc_e394 ], [ %v1_e848, %dec_label_pc_e844 ]
  store i32 %v3_e394, i32* %r4.global-to-local, align 4
  store i32 %v12_e394, i32* %r7.global-to-local, align 4
  ret i32 %v29_e850

; uselistorder directives
  uselistorder i32 %v4_e834, { 1, 0 }
  uselistorder i32 %v2_e7e8, { 1, 0 }
  uselistorder i32 %v0_e7a4, { 1, 0, 2 }
  uselistorder i1 %v2_e784, { 1, 0 }
  uselistorder i32 %v1_e778, { 1, 2, 3, 0 }
  uselistorder i32 %v1_e774, { 2, 0, 3, 1 }
  uselistorder i32 %v3_e73c, { 1, 0 }
  uselistorder i32 %v4_e6e8, { 1, 0 }
  uselistorder i1 %v3_e6b4, { 1, 0 }
  uselistorder i32 %v1_e65c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_e600, { 1, 0 }
  uselistorder i32 %v1_e588, { 1, 0 }
  uselistorder i32 %v1_e510, { 1, 0 }
  uselistorder i32 %v1_e504, { 1, 0 }
  uselistorder i32 %v0_e4d4, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_e4cc, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_e4c4, { 1, 0 }
  uselistorder i1 %v7_e498, { 1, 0 }
  uselistorder i32 %v3_e494, { 1, 2, 3, 0 }
  uselistorder i32 %v1_e434, { 1, 0 }
  uselistorder i8 %v5_e424, { 1, 0 }
  uselistorder i32 %v5_e408, { 1, 0 }
  uselistorder i32 %v6_e3cc, { 1, 0 }
  uselistorder i32 %v1_e398, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 1, 13, 12 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 17, 7, 8, 18, 9, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder label %dec_label_pc_e84c, { 1, 0 }
  uselistorder label %dec_label_pc_e6d4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e674, { 1, 0 }
  uselistorder label %bb57, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_e858(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_e858:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_e858 = load i32, i32* @r4, align 4
  %v15_e858 = load i32, i32* @r8, align 4
  %v18_e858 = load i32, i32* @sb, align 4
  %v21_e858 = load i32, i32* @sl, align 4
  %v24_e858 = load i32, i32* @fp, align 4
  %v1_e864 = urem i32 %arg1, 256
  store i32 %v1_e864, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_e870 = urem i32 %arg3, 256
  store i32 %v1_e870, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_e87c = call i32 @function_14e34(i32 %v1_e864, i32 4)
  %v0_e880 = load i32, i32* @r5, align 4
  store i32 %v0_e880, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_e88c = load i32, i32* @r4, align 4
  store i32 %v0_e88c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_e894 = inttoptr i32 %v0_e880 to i32*
  %v6_e894 = call i32 @function_a4e8(i32 %v0_e88c, i32* %v5_e894, i32 2, i32 0)
  %v1_e8a0 = urem i32 %v6_e894, 256
  store i32 %v1_e8a0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_e8ac = load i32, i32* @r4, align 4
  store i32 %v0_e8ac, i32* %r0.global-to-local, align 4
  %v0_e8b0 = load i32, i32* @r5, align 4
  store i32 %v0_e8b0, i32* %r1.global-to-local, align 4
  %v5_e8b4 = trunc i32 %v6_e894 to i8
  %v6_e8b8 = inttoptr i32 %v0_e8b0 to i32*
  %v7_e8b8 = call i32 @function_a4e8(i32 %v0_e8ac, i32* %v6_e8b8, i32 3, i32 65535)
  %v0_e8bc = load i32, i32* @r5, align 4
  store i32 %v0_e8bc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_e8c8 = load i32, i32* @r4, align 4
  store i32 %v0_e8c8, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_e8d0 = inttoptr i32 %v0_e8bc to i32*
  %v6_e8d0 = call i32 @function_a4e8(i32 %v0_e8c8, i32* %v5_e8d0, i32 4, i32 64)
  %v1_e8d8 = urem i32 %v6_e8d0, 256
  store i32 %v1_e8d8, i32* %ip.global-to-local, align 4
  %v0_e8dc = load i32, i32* @r5, align 4
  store i32 %v0_e8dc, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_e8e8 = load i32, i32* @r4, align 4
  store i32 %v0_e8e8, i32* %r0.global-to-local, align 4
  %v6_e8f0 = inttoptr i32 %v0_e8dc to i32*
  %v7_e8f0 = call i32 @function_a4e8(i32 %v0_e8e8, i32* %v6_e8f0, i32 5, i32 0)
  %v1_e8fc = urem i32 %v7_e8f0, 256
  store i32 %v1_e8fc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_e908 = load i32, i32* @r4, align 4
  store i32 %v0_e908, i32* %r0.global-to-local, align 4
  %v0_e90c = load i32, i32* @r5, align 4
  store i32 %v0_e90c, i32* %r1.global-to-local, align 4
  %v5_e914 = inttoptr i32 %v0_e90c to i32*
  %v6_e914 = call i32 @function_a4e8(i32 %v0_e908, i32* %v5_e914, i32 6, i32 65535)
  %v0_e918 = load i32, i32* @r5, align 4
  store i32 %v0_e918, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  store i32 %v6_e914, i32* %fp.global-to-local, align 4
  %v0_e928 = load i32, i32* @r4, align 4
  store i32 %v0_e928, i32* %r0.global-to-local, align 4
  %v4_e92c = inttoptr i32 %v0_e918 to i32*
  %v5_e92c = call i32 @function_a4e8(i32 %v0_e928, i32* %v4_e92c, i32 7, i32 53)
  %v0_e934 = load i32, i32* @r5, align 4
  store i32 %v0_e934, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v5_e92c, i32* %sb.global-to-local, align 4
  %v0_e944 = load i32, i32* @r4, align 4
  store i32 %v0_e944, i32* %r0.global-to-local, align 4
  %v4_e948 = inttoptr i32 %v0_e934 to i32*
  %v5_e948 = call i32 @function_a4e8(i32 %v0_e944, i32* %v4_e948, i32 9, i32 65535)
  %v0_e94c = load i32, i32* @r5, align 4
  store i32 %v0_e94c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 %v5_e948, i32* @sl, align 4
  %v0_e95c = load i32, i32* @r4, align 4
  store i32 %v0_e95c, i32* %r0.global-to-local, align 4
  %v4_e960 = inttoptr i32 %v0_e94c to i32*
  %v5_e960 = call i32 @function_a4e8(i32 %v0_e95c, i32* %v4_e960, i32 0, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_e96c = load i32, i32* @r5, align 4
  store i32 %v0_e96c, i32* %r1.global-to-local, align 4
  store i32 %v5_e960, i32* %r8.global-to-local, align 4
  %v0_e974 = load i32, i32* @r4, align 4
  store i32 %v0_e974, i32* %r0.global-to-local, align 4
  %v5_e978 = inttoptr i32 %v0_e96c to i32*
  %v6_e978 = call i32 @function_9f84(i32 %v0_e974, i32* %v5_e978, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_e984 = call i32 @function_12f50(i32 30)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_e990 = call i32 @function_12e6c(i32 30, i32* null)
  store i32 %v3_e990, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_e998 = inttoptr i32 %v3_e990 to i8*
  %v3_e998 = call i32 @function_14360(i8* %v2_e998, i32 0)
  store i32 %v3_e998, i32* @r4, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_e9a4 = call i32 @function_12e98(i32 30)
  store i32 %v1_e9a4, i32* %r0.global-to-local, align 4
  %v0_e9a8 = load i32, i32* @r4, align 4
  %v1_e9a8 = icmp slt i32 %v0_e9a8, 0
  %v2_e9a8 = icmp eq i32 %v0_e9a8, 0
  store i1 %v2_e9a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_e9a8, label %dec_label_pc_ef74, label %dec_label_pc_e9b0

dec_label_pc_e9b0:                                ; preds = %dec_label_pc_e858
  %v2_e9b4 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_e9b4, i32* @r6, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_e9b4, i32* %r1.global-to-local, align 4
  store i32 %v0_e9a8, i32* %r0.global-to-local, align 4
  %v4_e9c4 = call i32 @function_143fc(i32 %v0_e9a8, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_e9c4, i32* @r5, align 4
  %v0_e9cc = load i32, i32* @r4, align 4
  store i32 %v0_e9cc, i32* %r0.global-to-local, align 4
  %v1_e9d0 = call i32 @function_14234(i32 %v0_e9cc)
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_e9d8 = call i32 @function_12f50(i32 31)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v3_e9e4 = call i32 @function_12e6c(i32 31, i32* null)
  %v0_e9e8 = load i32, i32* @r5, align 4
  store i32 %v0_e9e8, i32* @r1, align 4
  store i32 %v3_e9e4, i32* %r2.global-to-local, align 4
  store i32 %v2_e9b4, i32* %r0.global-to-local, align 4
  %v3_e9f4 = bitcast i32* %stack_var_-2120 to i8*
  %v4_e9f4 = call i32 @function_13bc8(i8* %v3_e9f4, i32 %v0_e9e8, i32 %v3_e9e4)
  store i32 %v4_e9f4, i32* @r4, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_ea00 = call i32 @function_12e98(i32 31)
  store i32 %v1_ea00, i32* %r0.global-to-local, align 4
  %v0_ea04 = load i32, i32* @r4, align 4
  %v7_ea04 = icmp eq i32 %v0_ea04, -1
  store i1 %v7_ea04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea04, label %dec_label_pc_ef74, label %dec_label_pc_ea0c

dec_label_pc_ea0c:                                ; preds = %dec_label_pc_e9b0
  %v0_ea0c = load i32, i32* @r5, align 4
  %v9_ea0c = icmp eq i32 %v0_ea0c, %v0_ea04
  store i1 %v9_ea0c, i1* %cpsr_z.global-to-local, align 1
  %v7_ea10 = icmp sgt i32 %v0_ea0c, %v0_ea04
  br i1 %v7_ea10, label %dec_label_pc_ea14, label %dec_label_pc_ef74

dec_label_pc_ea14:                                ; preds = %dec_label_pc_ea0c
  store i32 %v0_ea0c, i32* %r3.global-to-local, align 4
  store i32 %v0_ea04, i32* %r2.global-to-local, align 4
  %v0_ea24 = load i32, i32* @r6, align 4
  %v2_ea24 = add i32 %v0_ea24, %v0_ea04
  store i32 %v2_ea24, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_ea2c = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_ea2c, i32* @r7, align 4
  %v1_ea5c = add i32 %v0_ea0c, -1
  br label %dec_label_pc_ea54

dec_label_pc_ea38:                                ; preds = %dec_label_pc_ea7c, %bb138
  %v9_ea38 = icmp eq i32 %v0_ea44, %v1_ea5c
  store i1 %v9_ea38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ea38, label %dec_label_pc_ea88, label %dec_label_pc_ea40

dec_label_pc_ea40:                                ; preds = %dec_label_pc_ea6c, %dec_label_pc_ea38, %bb
  %v0_ea7842 = phi i32 [ %v0_ea78, %dec_label_pc_ea6c ], [ %v0_ea7843, %dec_label_pc_ea38 ], [ %v0_ea78, %bb ]
  %v0_ea5838 = phi i32 [ 0, %dec_label_pc_ea6c ], [ %v0_ea5839, %dec_label_pc_ea38 ], [ 0, %bb ]
  store i32 %v0_ea0c, i32* %r0.global-to-local, align 4
  %v1_ea44 = add i32 %v0_ea44, 1
  store i32 %v1_ea44, i32* %r2.global-to-local, align 4
  %v9_ea48 = icmp eq i32 %v0_ea0c, %v1_ea44
  store i1 %v9_ea48, i1* %cpsr_z.global-to-local, align 1
  %v1_ea4c = add i32 %v0_ea4c, 1
  store i32 %v1_ea4c, i32* @r7, align 4
  br i1 %v9_ea48, label %dec_label_pc_ef74, label %dec_label_pc_ea54

dec_label_pc_ea54:                                ; preds = %dec_label_pc_ea40, %dec_label_pc_ea14
  %v0_ea4c = phi i32 [ %v1_ea4c, %dec_label_pc_ea40 ], [ %v2_ea2c, %dec_label_pc_ea14 ]
  %v0_ea44 = phi i32 [ %v1_ea44, %dec_label_pc_ea40 ], [ %v0_ea04, %dec_label_pc_ea14 ]
  %v0_ea78 = phi i32 [ %v0_ea7842, %dec_label_pc_ea40 ], [ 0, %dec_label_pc_ea14 ]
  %v0_ea58 = phi i32 [ %v0_ea5838, %dec_label_pc_ea40 ], [ 0, %dec_label_pc_ea14 ]
  %v0_ea60 = phi i32 [ %v1_ea60, %dec_label_pc_ea40 ], [ %v2_ea24, %dec_label_pc_ea14 ]
  %v1_ea54 = inttoptr i32 %v0_ea60 to i8*
  %v2_ea54 = load i8, i8* %v1_ea54, align 1
  %v3_ea54 = zext i8 %v2_ea54 to i32
  store i32 %v3_ea54, i32* %r3.global-to-local, align 4
  %v2_ea58 = icmp eq i32 %v0_ea58, 0
  store i1 %v2_ea58, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ea5c, i32* %ip.global-to-local, align 4
  %v1_ea60 = add i32 %v0_ea60, 1
  store i32 %v1_ea60, i32* %r1.global-to-local, align 4
  %v1_ea64 = add nsw i32 %v3_ea54, -48
  store i32 %v1_ea64, i32* %r0.global-to-local, align 4
  br i1 %v2_ea58, label %dec_label_pc_ea6c, label %dec_label_pc_ea7c

dec_label_pc_ea6c:                                ; preds = %dec_label_pc_ea54
  %v7_ea6c = icmp eq i8 %v2_ea54, 9
  store i1 %v7_ea6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea6c, label %dec_label_pc_ea40, label %bb

bb:                                               ; preds = %dec_label_pc_ea6c
  %v8_ea70 = icmp eq i8 %v2_ea54, 32
  store i1 %v8_ea70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea70, label %dec_label_pc_ea40, label %dec_label_pc_ea78

dec_label_pc_ea78:                                ; preds = %bb
  %v1_ea78 = add i32 %v0_ea78, 1
  store i32 %v1_ea78, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_ea7c

dec_label_pc_ea7c:                                ; preds = %dec_label_pc_ea54, %dec_label_pc_ea78
  %v0_ea7843 = phi i32 [ %v0_ea78, %dec_label_pc_ea54 ], [ %v1_ea78, %dec_label_pc_ea78 ]
  %v0_ea5839 = phi i32 [ %v0_ea58, %dec_label_pc_ea54 ], [ %v1_ea78, %dec_label_pc_ea78 ]
  %v7_ea7c = icmp eq i8 %v2_ea54, 46
  store i1 %v7_ea7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea7c, label %dec_label_pc_ea38, label %bb138

bb138:                                            ; preds = %dec_label_pc_ea7c
  %v8_ea80 = icmp eq i32 %v1_ea64, 9
  store i1 %v8_ea80, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_ea64, 10
  br i1 %tmp, label %dec_label_pc_ea38, label %dec_label_pc_ea88

dec_label_pc_ea88:                                ; preds = %dec_label_pc_ea38, %bb138
  %v0_ea44.lcssa = phi i32 [ %v1_ea5c, %dec_label_pc_ea38 ], [ %v0_ea44, %bb138 ]
  %v2_ea8c = sub i32 %v0_ea44.lcssa, %v0_ea04
  store i32 %v2_ea8c, i32* %r2.global-to-local, align 4
  store i32 %v2_ea24, i32* %r1.global-to-local, align 4
  store i32 %v2_ea2c, i32* %r0.global-to-local, align 4
  %v3_ea98 = call i32 @function_138f0(i32 %v2_ea2c, i32 %v2_ea24, i32 %v2_ea8c)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_ea2c, i32* @r0, align 4
  %v2_eaa8 = load i32, i32* @r7, align 4
  %v3_eaa8 = inttoptr i32 %v2_eaa8 to i8*
  store i8 0, i8* %v3_eaa8, align 1
  %v1_eaac = call i32 @function_14910(i32 %v2_ea2c)
  store i32 %v1_eaac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eab4

dec_label_pc_eab420:                              ; preds = %dec_label_pc_ef74
  unreachable

dec_label_pc_eab4:                                ; preds = %dec_label_pc_efec, %dec_label_pc_efdc, %dec_label_pc_efd0, %dec_label_pc_efbc, %dec_label_pc_ea88
  %v29_efb874 = phi i32 [ %v1_ef78, %dec_label_pc_efec ], [ %v1_ef78, %dec_label_pc_efdc ], [ %v1_ef78, %dec_label_pc_efd0 ], [ %v1_ef78, %dec_label_pc_efbc ], [ %v1_eaac, %dec_label_pc_ea88 ]
  %stack_var_-2176.0 = phi i32 [ 33686020, %dec_label_pc_efec ], [ 104859200, %dec_label_pc_efdc ], [ 707416650, %dec_label_pc_efd0 ], [ 134744072, %dec_label_pc_efbc ], [ %v1_eaac, %dec_label_pc_ea88 ]
  store i32 %v6_e978, i32* %ip.global-to-local, align 4
  %v2_eab8 = icmp eq i32 %v6_e978, 0
  store i1 %v2_eab8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eab8, label %dec_label_pc_efb0, label %dec_label_pc_eac0

dec_label_pc_eac0:                                ; preds = %dec_label_pc_eab4
  store i32 %v6_e978, i32* %r0.global-to-local, align 4
  %v1_eac4 = inttoptr i32 %v6_e978 to i8*
  %v2_eac4 = call i32 @function_13874(i8* %v1_eac4)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_ead8 = call i32 @function_14b30(i32 2, i32 3, i32 17)
  store i32 %v3_ead8, i32* %r0.global-to-local, align 4
  %v7_eadc = icmp eq i32 %v3_ead8, -1
  store i1 %v7_eadc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eadc, label %dec_label_pc_efb0, label %dec_label_pc_eae8

dec_label_pc_eae8:                                ; preds = %dec_label_pc_eac0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_eaf4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_eaf4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_eb08 = call i32 @function_14b00(i32 %v3_ead8, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_eb08, i32* %r0.global-to-local, align 4
  %v7_eb0c = icmp eq i32 %v6_eb08, -1
  store i1 %v7_eb0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb0c, label %dec_label_pc_efa8, label %dec_label_pc_eb14

dec_label_pc_eb14:                                ; preds = %dec_label_pc_eae8
  store i32 %v1_e864, i32* %r0.global-to-local, align 4
  %v3_eb1c = mul i32 %v7_e8b8, 65536
  store i32 %v3_eb1c, i32* %lr.global-to-local, align 4
  %v0_eb20 = load i32, i32* @sl, align 4
  %v3_eb20 = mul i32 %v0_eb20, 65536
  store i32 %v3_eb20, i32* %sl.global-to-local, align 4
  %v0_eb24 = load i32, i32* %r8.global-to-local, align 4
  %v0_eb28 = load i32, i32* %fp.global-to-local, align 4
  %v0_eb2c = load i32, i32* %sb.global-to-local, align 4
  %v3_eb2c = mul i32 %v0_eb2c, 65536
  store i32 %v3_eb2c, i32* %sb.global-to-local, align 4
  %v5_eb30 = trunc i32 %v0_eb24 to i8
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_eb38 = urem i32 %v7_e8b8, 65536
  store i32 %v3_eb38, i32* %r2.global-to-local, align 4
  %v3_eb3c = urem i32 %v0_eb28, 65536
  store i32 %v3_eb3c, i32* %r3.global-to-local, align 4
  %v3_eb40 = urem i32 %v0_eb2c, 65536
  store i32 %v3_eb40, i32* %r4.global-to-local, align 4
  %v3_eb44 = urem i32 %v0_eb20, 65536
  store i32 %v3_eb44, i32* %r8.global-to-local, align 4
  %v2_eb48 = icmp eq i32 %v1_e864, 0
  store i1 %v2_eb48, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_eb48, label %dec_label_pc_ef98, label %dec_label_pc_eb6c

dec_label_pc_eb6c:                                ; preds = %dec_label_pc_eb14
  %v4_eb70 = sext i8 %v5_eb30 to i32
  %v2_eb74 = add i32 %v4_eb70, %v2_eac4
  store i32 %v2_eb74, i32* @fp, align 4
  %v3_eb78 = mul i32 %v2_eb74, 65536
  %v1_eb7c = add i32 %v3_eb78, 1769472
  store i32 %v1_eb7c, i32* @r6, align 4
  %v1_eb80 = add i32 %v3_eb78, 3080192
  %v1_eb94 = urem i32 %v0_eb20, 256
  %v3_eba4 = udiv i32 %v1_eb7c, 256
  %v1_eba8 = urem i32 %v7_e8b8, 256
  %v1_ebac = and i32 %v3_eba4, 65280
  %v1_ebb0 = urem i32 %v0_eb2c, 256
  %v3_ebb4 = mul nuw nsw i32 %v1_eb94, 256
  %v1_ebbc = urem i32 %v0_eb28, 256
  %v3_ebc0 = mul nuw nsw i32 %v1_ebb0, 256
  %tmp139 = udiv i32 %v0_eb20, 256
  %v4_ebc4 = urem i32 %tmp139, 256
  %v5_ebc4 = or i32 %v4_ebc4, %v3_ebb4
  store i32 %v5_ebc4, i32* %r8.global-to-local, align 4
  %v4_ebc8 = udiv i32 %v1_eb7c, 16777216
  %v5_ebc8 = or i32 %v1_ebac, %v4_ebc8
  store i32 %v5_ebc8, i32* %sl.global-to-local, align 4
  %tmp140 = udiv i32 %v0_eb28, 256
  %v3_ebd4 = urem i32 %tmp140, 256
  %v4_ebd8 = sdiv i32 %v1_eb80, 16777216
  %tmp141 = udiv i32 %v7_e8b8, 256
  %v4_ebe0 = mul nuw nsw i32 %v1_ebbc, 256
  %v5_ebe0 = or i32 %v4_ebe0, %v3_ebd4
  store i32 %v5_ebe0, i32* @r5, align 4
  %tmp142 = udiv i32 %v0_eb2c, 256
  %v4_ebe4 = urem i32 %tmp142, 256
  %v5_ebe4 = or i32 %v4_ebe4, %v3_ebc0
  store i32 %v5_ebe4, i32* %sb.global-to-local, align 4
  store i32 %v1_eba8, i32* %r0.global-to-local, align 4
  %v1_ebf0 = add i32 %v2_eac4, 1
  store i32 %v1_ebf0, i32* @r7, align 4
  %v3_ebf4 = ashr i32 %v1_eb80, 31
  store i32 %v3_ebf4, i32* @lr, align 4
  store i32 %v1_ebbc, i32* %r1.global-to-local, align 4
  store i32 %v1_ebb0, i32* %r2.global-to-local, align 4
  %v3_ec0075 = udiv i32 %v1_ebac, 256
  store i32 %v3_ec0075, i32* %r3.global-to-local, align 4
  store i32 %v1_eb94, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_ec64 = sext i8 %v5_e8b4 to i32
  %sext13 = mul i32 %v6_e8d0, 16777216
  %v4_ec7c = sdiv i32 %sext13, 16777216
  %sext14 = mul i32 %tmp141, 16777216
  %v4_ec90 = sdiv i32 %sext14, 16777216
  %sext15 = mul i32 %v7_e8b8, 16777216
  %v4_ec94 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v1_eb7c, 256
  %v4_ecc4 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v0_eb2c, 16777216
  %v4_ecc8 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_eb28, 16777216
  %v4_ecec = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v0_eb20, 16777216
  %v4_ecf8 = sdiv i32 %sext19, 16777216
  %v1_ec74 = trunc i32 %v4_ebd8 to i8
  %extract.t = trunc i32 %v3_ebf4 to i8
  br label %dec_label_pc_ec24

dec_label_pc_ec24:                                ; preds = %dec_label_pc_ed8c, %dec_label_pc_eb6c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_ec2c = call i32 @function_14e34(i32 600, i32 1)
  store i32 %v2_ec2c, i32* %r0.global-to-local, align 4
  store i32 %v2_e87c, i32* %lr.global-to-local, align 4
  %v3_ec34 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ec34, i32* %r3.global-to-local, align 4
  %v2_ec38 = load i32, i32* @r4, align 4
  %v5_ec38 = mul i32 %v2_ec38, 4
  %v6_ec38 = add i32 %v5_ec38, %v2_e87c
  %v7_ec38 = inttoptr i32 %v6_ec38 to i32*
  store i32 %v2_ec2c, i32* %v7_ec38, align 4
  %v0_ec3c = load i32, i32* %lr.global-to-local, align 4
  %v1_ec3c = load i32, i32* %r3.global-to-local, align 4
  %v4_ec3c = mul i32 %v1_ec3c, 4
  %v5_ec3c = add i32 %v4_ec3c, %v0_ec3c
  %v6_ec3c = inttoptr i32 %v5_ec3c to i32*
  %v7_ec3c = load i32, i32* %v6_ec3c, align 4
  store i32 %v7_ec3c, i32* %r1.global-to-local, align 4
  %v1_ec40 = inttoptr i32 %v7_ec3c to i8*
  %v2_ec40 = load i8, i8* %v1_ec40, align 1
  %tmp154 = urem i8 %v2_ec40, 16
  %v1_ec44 = zext i8 %tmp154 to i32
  %v1_ec48 = or i32 %v1_ec44, 64
  store i32 %v1_ec48, i32* %r2.global-to-local, align 4
  %v1_ec4c = trunc i32 %v1_ec48 to i8
  store i8 %v1_ec4c, i8* %v1_ec40, align 1
  %v0_ec50 = load i32, i32* %r1.global-to-local, align 4
  %v1_ec50 = inttoptr i32 %v0_ec50 to i8*
  %v2_ec50 = load i8, i8* %v1_ec50, align 1
  %v1_ec54 = and i8 %v2_ec50, -16
  %v1_ec58 = or i8 %v1_ec54, 5
  store i32 %v1_e8fc, i32* %r0.global-to-local, align 4
  store i8 %v1_ec58, i8* %v1_ec50, align 1
  store i32 %v4_ec64, i32* %r2.global-to-local, align 4
  %v2_ec68 = load i32, i32* %r1.global-to-local, align 4
  %v3_ec68 = add i32 %v2_ec68, 1
  %v4_ec68 = inttoptr i32 %v3_ec68 to i8*
  store i8 %v5_e8b4, i8* %v4_ec68, align 1
  store i32 %v4_ebd8, i32* %r3.global-to-local, align 4
  %v0_ec70 = load i32, i32* %r0.global-to-local, align 4
  %v2_ec70 = icmp eq i32 %v0_ec70, 0
  store i1 %v2_ec70, i1* %cpsr_z.global-to-local, align 1
  %v2_ec74 = load i32, i32* %r1.global-to-local, align 4
  %v3_ec74 = add i32 %v2_ec74, 2
  %v4_ec74 = inttoptr i32 %v3_ec74 to i8*
  store i8 %v1_ec74, i8* %v4_ec74, align 1
  store i32 %v3_ebf4, i32* %r4.global-to-local, align 4
  store i32 %v4_ec7c, i32* %r0.global-to-local, align 4
  %v0_ec80 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ec80, label %.thread21, label %bb143

bb143:                                            ; preds = %dec_label_pc_ec24
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ec84 = load i32, i32* %r1.global-to-local, align 4
  %v4_ec84 = add i32 %v3_ec84, 6
  %v5_ec84 = inttoptr i32 %v4_ec84 to i8*
  store i8 64, i8* %v5_ec84, align 1
  %v0_ec8c.pre = load i32, i32* %r4.global-to-local, align 4
  %extract.t76 = trunc i32 %v0_ec8c.pre to i8
  br label %.thread21

.thread21:                                        ; preds = %dec_label_pc_ec24, %bb143
  %v0_ec8c.off0 = phi i8 [ %extract.t, %dec_label_pc_ec24 ], [ %extract.t76, %bb143 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_ec8c = load i32, i32* %r1.global-to-local, align 4
  %v3_ec8c = add i32 %v2_ec8c, 3
  %v4_ec8c = inttoptr i32 %v3_ec8c to i8*
  store i8 %v0_ec8c.off0, i8* %v4_ec8c, align 1
  store i32 %v4_ec90, i32* %ip.global-to-local, align 4
  store i32 %v4_ec94, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f858.88 to i32), i32* %r4.global-to-local, align 4
  %v0_ec9c = load i32, i32* %r0.global-to-local, align 4
  %v1_ec9c = trunc i32 %v0_ec9c to i8
  %v2_ec9c = load i32, i32* %r1.global-to-local, align 4
  %v3_ec9c = add i32 %v2_ec9c, 8
  %v4_ec9c = inttoptr i32 %v3_ec9c to i8*
  store i8 %v1_ec9c, i8* %v4_ec9c, align 1
  %v0_eca0 = load i32, i32* %r3.global-to-local, align 4
  %v1_eca0 = trunc i32 %v0_eca0 to i8
  %v2_eca0 = load i32, i32* %r1.global-to-local, align 4
  %v3_eca0 = add i32 %v2_eca0, 9
  %v4_eca0 = inttoptr i32 %v3_eca0 to i8*
  store i8 %v1_eca0, i8* %v4_eca0, align 1
  %v0_eca4 = load i32, i32* %lr.global-to-local, align 4
  %v1_eca4 = trunc i32 %v0_eca4 to i8
  %v2_eca4 = load i32, i32* %r1.global-to-local, align 4
  %v3_eca4 = add i32 %v2_eca4, 5
  %v4_eca4 = inttoptr i32 %v3_eca4 to i8*
  store i8 %v1_eca4, i8* %v4_eca4, align 1
  %v0_eca8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_eca8, label %.thread22, label %bb144

.thread22:                                        ; preds = %.thread21
  %v2_ecac23 = load i32, i32* @global_var_1f858.88, align 4
  store i32 %v2_ecac23, i32* %r3.global-to-local, align 4
  store i32 %v4_eb70, i32* %lr.global-to-local, align 4
  br label %bb145

bb144:                                            ; preds = %.thread21
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_ecac = load i32, i32* @global_var_1f858.88, align 4
  store i32 %v2_ecac, i32* %r3.global-to-local, align 4
  store i32 %v4_eb70, i32* %lr.global-to-local, align 4
  %v3_ecb4 = load i32, i32* %r1.global-to-local, align 4
  %v4_ecb4 = add i32 %v3_ecb4, 7
  %v5_ecb4 = inttoptr i32 %v4_ecb4 to i8*
  store i8 0, i8* %v5_ecb4, align 1
  %v0_ecbc.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_ecc0.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb145

bb145:                                            ; preds = %.thread22, %bb144
  %v0_ecc0 = phi i32 [ %v2_ecac23, %.thread22 ], [ %v0_ecc0.pre, %bb144 ]
  %v0_ecbc = phi i32 [ %v4_eb70, %.thread22 ], [ %v0_ecbc.pre, %bb144 ]
  %v0_ecb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_ecb8 = add i32 %v0_ecbc, 41
  %v2_ecbc = add i32 %v1_ecb8, %v0_ecb8
  store i32 %v2_ecbc, i32* %r4.global-to-local, align 4
  %v2_ecc0 = add i32 %v0_ecb8, 12
  %v3_ecc0 = inttoptr i32 %v2_ecc0 to i32*
  store i32 %v0_ecc0, i32* %v3_ecc0, align 4
  store i32 %v4_ecc4, i32* %r2.global-to-local, align 4
  store i32 %v4_ecc8, i32* %r3.global-to-local, align 4
  %v0_eccc = load i32, i32* %r1.global-to-local, align 4
  %v1_eccc = add i32 %v0_eccc, 20
  store i32 %v1_eccc, i32* %r0.global-to-local, align 4
  %v0_ecd0 = load i32, i32* %ip.global-to-local, align 4
  %v1_ecd0 = trunc i32 %v0_ecd0 to i8
  %v3_ecd0 = add i32 %v0_eccc, 4
  %v4_ecd0 = inttoptr i32 %v3_ecd0 to i8*
  store i8 %v1_ecd0, i8* %v4_ecd0, align 1
  %v0_ecd4 = load i32, i32* %r2.global-to-local, align 4
  %v1_ecd4 = trunc i32 %v0_ecd4 to i8
  %v2_ecd4 = load i32, i32* %r0.global-to-local, align 4
  %v3_ecd4 = add i32 %v2_ecd4, 5
  %v4_ecd4 = inttoptr i32 %v3_ecd4 to i8*
  store i8 %v1_ecd4, i8* %v4_ecd4, align 1
  %v0_ecd8 = load i32, i32* %r3.global-to-local, align 4
  %v1_ecd8 = trunc i32 %v0_ecd8 to i8
  %v2_ecd8 = load i32, i32* %r0.global-to-local, align 4
  %v3_ecd8 = add i32 %v2_ecd8, 3
  %v4_ecd8 = inttoptr i32 %v3_ecd8 to i8*
  store i8 %v1_ecd8, i8* %v4_ecd8, align 1
  %v0_ecdc = load i32, i32* %sb.global-to-local, align 4
  %v1_ecdc = trunc i32 %v0_ecdc to i8
  %v2_ecdc = load i32, i32* %r0.global-to-local, align 4
  %v3_ecdc = add i32 %v2_ecdc, 2
  %v4_ecdc = inttoptr i32 %v3_ecdc to i8*
  store i8 %v1_ecdc, i8* %v4_ecdc, align 1
  %v0_ece0 = load i32, i32* %sl.global-to-local, align 4
  %v1_ece0 = trunc i32 %v0_ece0 to i8
  %v2_ece0 = load i32, i32* %r0.global-to-local, align 4
  %v3_ece0 = add i32 %v2_ece0, 4
  %v4_ece0 = inttoptr i32 %v3_ece0 to i8*
  store i8 %v1_ece0, i8* %v4_ece0, align 1
  %v0_ece4 = load i32, i32* @r5, align 4
  %v1_ece4 = trunc i32 %v0_ece4 to i8
  %v2_ece4 = load i32, i32* %r1.global-to-local, align 4
  %v3_ece4 = add i32 %v2_ece4, 20
  %v4_ece4 = inttoptr i32 %v3_ece4 to i8*
  store i8 %v1_ece4, i8* %v4_ece4, align 1
  store i32 %v4_ecec, i32* %r2.global-to-local, align 4
  %v1_ecf0 = load i32, i32* %r1.global-to-local, align 4
  %v2_ecf0 = add i32 %v1_ecf0, 16
  %v3_ecf0 = inttoptr i32 %v2_ecf0 to i32*
  store i32 %stack_var_-2176.0, i32* %v3_ecf0, align 4
  %v0_ecf4 = load i32, i32* %r2.global-to-local, align 4
  %v1_ecf4 = trunc i32 %v0_ecf4 to i8
  %v2_ecf4 = load i32, i32* %r0.global-to-local, align 4
  %v3_ecf4 = add i32 %v2_ecf4, 1
  %v4_ecf4 = inttoptr i32 %v3_ecf4 to i8*
  store i8 %v1_ecf4, i8* %v4_ecf4, align 1
  store i32 %v4_ecf8, i32* %lr.global-to-local, align 4
  store i32 %v4_eb70, i32* %r0.global-to-local, align 4
  %v0_ed00 = load i32, i32* %r1.global-to-local, align 4
  %v1_ed00 = add i32 %v0_ed00, 28
  store i32 %v1_ed00, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ed0c = load i32, i32* %r8.global-to-local, align 4
  %v1_ed0c = trunc i32 %v0_ed0c to i8
  %v4_ed0c = inttoptr i32 %v1_ed00 to i8*
  store i8 %v1_ed0c, i8* %v4_ed0c, align 1
  %v0_ed10 = load i32, i32* %r3.global-to-local, align 4
  %v1_ed10 = trunc i32 %v0_ed10 to i8
  %v2_ed10 = load i32, i32* %ip.global-to-local, align 4
  %v3_ed10 = add i32 %v2_ed10, 5
  %v4_ed10 = inttoptr i32 %v3_ed10 to i8*
  store i8 %v1_ed10, i8* %v4_ed10, align 1
  %v0_ed14 = load i32, i32* %lr.global-to-local, align 4
  %v1_ed14 = trunc i32 %v0_ed14 to i8
  %v2_ed14 = load i32, i32* %ip.global-to-local, align 4
  %v3_ed14 = add i32 %v2_ed14, 1
  %v4_ed14 = inttoptr i32 %v3_ed14 to i8*
  store i8 %v1_ed14, i8* %v4_ed14, align 1
  %v0_ed18 = load i32, i32* %r3.global-to-local, align 4
  %v1_ed18 = trunc i32 %v0_ed18 to i8
  %v2_ed18 = load i32, i32* %ip.global-to-local, align 4
  %v3_ed18 = add i32 %v2_ed18, 2
  %v4_ed18 = inttoptr i32 %v3_ed18 to i8*
  store i8 %v1_ed18, i8* %v4_ed18, align 1
  %v0_ed1c = load i32, i32* @r6, align 4
  %v1_ed1c = trunc i32 %v0_ed1c to i8
  %v2_ed1c = load i32, i32* %ip.global-to-local, align 4
  %v3_ed1c = add i32 %v2_ed1c, 3
  %v4_ed1c = inttoptr i32 %v3_ed1c to i8*
  store i8 %v1_ed1c, i8* %v4_ed1c, align 1
  %v0_ed20 = load i32, i32* @r6, align 4
  %v1_ed20 = trunc i32 %v0_ed20 to i8
  %v2_ed20 = load i32, i32* %ip.global-to-local, align 4
  %v3_ed20 = add i32 %v2_ed20, 4
  %v4_ed20 = inttoptr i32 %v3_ed20 to i8*
  store i8 %v1_ed20, i8* %v4_ed20, align 1
  %v0_ed24 = load i32, i32* %r0.global-to-local, align 4
  %v1_ed24 = trunc i32 %v0_ed24 to i8
  %v2_ed24 = load i32, i32* %r1.global-to-local, align 4
  %v3_ed24 = add i32 %v2_ed24, 40
  %v4_ed24 = inttoptr i32 %v3_ed24 to i8*
  store i8 %v1_ed24, i8* %v4_ed24, align 1
  store i32 %v6_e978, i32* %r1.global-to-local, align 4
  %v0_ed2c = load i32, i32* @r7, align 4
  store i32 %v0_ed2c, i32* %r2.global-to-local, align 4
  %v0_ed30 = load i32, i32* %r4.global-to-local, align 4
  %v1_ed30 = add i32 %v0_ed30, 1
  store i32 %v1_ed30, i32* %r0.global-to-local, align 4
  %v3_ed34 = call i32 @function_138f0(i32 %v1_ed30, i32 %v6_e978, i32 %v0_ed2c)
  store i32 %v3_ed34, i32* %r0.global-to-local, align 4
  store i32 %v2_eac4, i32* %r1.global-to-local, align 4
  %v1_ed3c = load i32, i32* @r6, align 4
  %v9_ed3c = icmp eq i32 %v2_eac4, %v1_ed3c
  store i1 %v9_ed3c, i1* %cpsr_z.global-to-local, align 1
  %v7_ed40 = icmp sgt i32 %v2_eac4, %v1_ed3c
  store i32 %v1_ed3c, i32* %lr.global-to-local, align 4
  %v0_ed50 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ed50, i32* %r2.global-to-local, align 4
  %extract.t78 = trunc i32 %v1_ed3c to i8
  br i1 %v7_ed40, label %dec_label_pc_ed4c, label %dec_label_pc_ed8c

dec_label_pc_ed4c:                                ; preds = %bb145
  store i32 %v1_ed3c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ed58

dec_label_pc_ed58:                                ; preds = %bb148, %dec_label_pc_ed4c
  %v0_ed7485151 = phi i32 [ %v0_ed7485152, %bb148 ], [ %v1_ed3c, %dec_label_pc_ed4c ]
  %v1_ed6833 = phi i32 [ %v1_ed7891, %bb148 ], [ %v1_ed3c, %dec_label_pc_ed4c ]
  %v1_ed64.off0 = phi i8 [ %v1_ed6456.off0, %bb148 ], [ %extract.t78, %dec_label_pc_ed4c ]
  %v0_ed6832 = phi i32 [ %v0_ed68325488, %bb148 ], [ %v0_ed50, %dec_label_pc_ed4c ]
  store i32 %v6_e978, i32* %ip.global-to-local, align 4
  %v2_ed5c = add i32 %v1_ed6833, %v6_e978
  %v3_ed5c = inttoptr i32 %v2_ed5c to i8*
  %v4_ed5c = load i8, i8* %v3_ed5c, align 1
  %v6_ed5c = zext i8 %v4_ed5c to i32
  store i32 %v6_ed5c, i32* %r3.global-to-local, align 4
  %v7_ed60 = icmp eq i8 %v4_ed5c, 46
  store i1 %v7_ed60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed60, label %bb146, label %.thread31

.thread31:                                        ; preds = %dec_label_pc_ed58
  %v2_ed6834 = add i32 %v1_ed6833, %v0_ed6832
  store i32 %v2_ed6834, i32* %r0.global-to-local, align 4
  br label %.thread35

bb146:                                            ; preds = %dec_label_pc_ed58
  %v3_ed64 = load i32, i32* %r2.global-to-local, align 4
  %v4_ed64 = inttoptr i32 %v3_ed64 to i8*
  store i8 %v1_ed64.off0, i8* %v4_ed64, align 1
  %v0_ed6c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_ed68 = load i32, i32* %r4.global-to-local, align 4
  %v1_ed68 = load i32, i32* %r1.global-to-local, align 4
  %v2_ed68 = add i32 %v1_ed68, %v0_ed68
  store i32 %v2_ed68, i32* %r0.global-to-local, align 4
  br i1 %v0_ed6c.pr, label %bb147, label %bb146..thread35_crit_edge

bb146..thread35_crit_edge:                        ; preds = %bb146
  %v0_ed7485.pre = load i32, i32* %lr.global-to-local, align 4
  br label %.thread35

bb147:                                            ; preds = %bb146
  %v2_ed6c = add i32 %v2_ed68, 1
  store i32 %v2_ed6c, i32* %r2.global-to-local, align 4
  store i32 %v2_eac4, i32* %r0.global-to-local, align 4
  %v0_ed74 = load i32, i32* %lr.global-to-local, align 4
  %v1_ed74 = add i32 %v0_ed74, 1
  store i32 %v1_ed74, i32* %ip.global-to-local, align 4
  %v1_ed78 = add i32 %v1_ed68, 1
  store i32 %v1_ed78, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %bb148

.thread35:                                        ; preds = %bb146..thread35_crit_edge, %.thread31
  %v0_ed7485 = phi i32 [ %v0_ed7485.pre, %bb146..thread35_crit_edge ], [ %v0_ed7485151, %.thread31 ]
  %v0_ed78.ph = phi i32 [ %v1_ed68, %bb146..thread35_crit_edge ], [ %v1_ed6833, %.thread31 ]
  %v0_ed683254.ph = phi i32 [ %v0_ed68, %bb146..thread35_crit_edge ], [ %v0_ed6832, %.thread31 ]
  store i32 %v2_eac4, i32* %r0.global-to-local, align 4
  %v1_ed7486 = add i32 %v0_ed7485, 1
  store i32 %v1_ed7486, i32* %ip.global-to-local, align 4
  %v1_ed7887 = add i32 %v0_ed78.ph, 1
  store i32 %v1_ed7887, i32* %r1.global-to-local, align 4
  %v2_ed80 = urem i32 %v1_ed7486, 256
  store i32 %v2_ed80, i32* %lr.global-to-local, align 4
  %extract.t81 = trunc i32 %v1_ed7486 to i8
  br label %bb148

bb148:                                            ; preds = %bb147, %.thread35
  %v0_ed7485152 = phi i32 [ 0, %bb147 ], [ %v2_ed80, %.thread35 ]
  %v1_ed7891 = phi i32 [ %v1_ed78, %bb147 ], [ %v1_ed7887, %.thread35 ]
  %v0_ed68325488 = phi i32 [ %v0_ed68, %bb147 ], [ %v0_ed683254.ph, %.thread35 ]
  %v1_ed6456.off0 = phi i8 [ 0, %bb147 ], [ %extract.t81, %.thread35 ]
  %v9_ed84 = icmp eq i32 %v2_eac4, %v1_ed7891
  store i1 %v9_ed84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ed84, label %dec_label_pc_ed8c.loopexit, label %dec_label_pc_ed58

dec_label_pc_ed8c.loopexit:                       ; preds = %bb148
  %v2_ed8c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ed8c

dec_label_pc_ed8c:                                ; preds = %dec_label_pc_ed8c.loopexit, %bb145
  %v2_ed8c = phi i32 [ %v2_ed8c.pre, %dec_label_pc_ed8c.loopexit ], [ %v0_ed50, %bb145 ]
  %v0_ed8c.off0 = phi i8 [ %v1_ed6456.off0, %dec_label_pc_ed8c.loopexit ], [ %extract.t78, %bb145 ]
  %v3_ed8c = inttoptr i32 %v2_ed8c to i8*
  store i8 %v0_ed8c.off0, i8* %v3_ed8c, align 1
  %v3_ed90 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_eac4, i32* %r1.global-to-local, align 4
  %v0_ed98 = load i32, i32* %r4.global-to-local, align 4
  %v2_ed98 = add i32 %v0_ed98, %v2_eac4
  store i32 %v2_ed98, i32* %r3.global-to-local, align 4
  %v1_ed9c = add i32 %v3_ed90, 1
  store i32 %v1_ed9c, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* @lr, align 4
  %v9_edac = icmp eq i32 %v1_e864, %v1_ed9c
  store i1 %v9_edac, i1* %cpsr_z.global-to-local, align 1
  %v1_edb0 = add i32 %v2_ed98, 2
  store i32 %v1_edb0, i32* %r2.global-to-local, align 4
  %v4_edb4 = inttoptr i32 %v1_edb0 to i8*
  store i8 0, i8* %v4_edb4, align 1
  %v0_edb8 = load i32, i32* @lr, align 4
  %v1_edb8 = trunc i32 %v0_edb8 to i8
  %v2_edb8 = load i32, i32* %r2.global-to-local, align 4
  %v3_edb8 = add i32 %v2_edb8, 3
  %v4_edb8 = inttoptr i32 %v3_edb8 to i8*
  store i8 %v1_edb8, i8* %v4_edb8, align 1
  %v0_edbc = load i32, i32* @lr, align 4
  %v1_edbc = trunc i32 %v0_edbc to i8
  %v2_edbc = load i32, i32* %r2.global-to-local, align 4
  %v3_edbc = add i32 %v2_edbc, 1
  %v4_edbc = inttoptr i32 %v3_edbc to i8*
  store i8 %v1_edbc, i8* %v4_edbc, align 1
  %v0_edc0 = load i32, i32* %ip.global-to-local, align 4
  %v1_edc0 = trunc i32 %v0_edc0 to i8
  %v2_edc0 = load i32, i32* %r2.global-to-local, align 4
  %v3_edc0 = add i32 %v2_edc0, 2
  %v4_edc0 = inttoptr i32 %v3_edc0 to i8*
  store i8 %v1_edc0, i8* %v4_edc0, align 1
  %v0_edc4 = load i32, i32* @r4, align 4
  store i32 %v0_edc4, i32* %stack_var_-40, align 4
  %v8_edc8 = icmp sgt i32 %v1_e864, %v1_ed9c
  br i1 %v8_edc8, label %dec_label_pc_ec24, label %dec_label_pc_edcc

dec_label_pc_edcc:                                ; preds = %dec_label_pc_ed8c, %dec_label_pc_ef98
  %v4_ee3c.pre-phi = phi i32 [ %v4_ef9c, %dec_label_pc_ef98 ], [ %v4_eb70, %dec_label_pc_ed8c ]
  store i32 %v1_e864, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_eb48, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_edd8

dec_label_pc_edd8:                                ; preds = %dec_label_pc_edd8, %dec_label_pc_eefc, %dec_label_pc_edcc
  br i1 %v2_eb48, label %dec_label_pc_edd8, label %dec_label_pc_eddc

dec_label_pc_eddc:                                ; preds = %dec_label_pc_edd8
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r6, align 4
  %v0_edec = load i32, i32* @fp, align 4
  %v1_edec = add i32 %v0_edec, 27
  store i32 %v1_edec, i32* @sb, align 4
  %v1_edf0 = add i32 %v0_edec, 47
  store i32 %v1_edf0, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_edf8

dec_label_pc_edf8:                                ; preds = %dec_label_pc_ee38.dec_label_pc_edf8_crit_edge, %dec_label_pc_eddc
  %v1_ee18 = phi i32 [ %v1_ee04.pre, %dec_label_pc_ee38.dec_label_pc_edf8_crit_edge ], [ 65535, %dec_label_pc_eddc ]
  %v1_ee00 = phi i32 [ %v1_eee8, %dec_label_pc_ee38.dec_label_pc_edf8_crit_edge ], [ 0, %dec_label_pc_eddc ]
  store i32 %v2_e87c, i32* %r3.global-to-local, align 4
  store i32 %v3_eb38, i32* %r8.global-to-local, align 4
  %v4_ee00 = mul i32 %v1_ee00, 4
  %v5_ee00 = add i32 %v4_ee00, %v2_e87c
  %v6_ee00 = inttoptr i32 %v5_ee00 to i32*
  %v7_ee00 = load i32, i32* %v6_ee00, align 4
  store i32 %v7_ee00, i32* @r4, align 4
  %v9_ee04 = icmp eq i32 %v3_eb38, %v1_ee18
  store i1 %v9_ee04, i1* %cpsr_z.global-to-local, align 1
  %v1_ee08 = add i32 %v7_ee00, 20
  store i32 %v1_ee08, i32* @r5, align 4
  %v1_ee0c = add i32 %v7_ee00, 28
  store i32 %v1_ee0c, i32* @r8, align 4
  br i1 %v9_ee04, label %dec_label_pc_ef0c, label %dec_label_pc_ee14

dec_label_pc_ee14:                                ; preds = %dec_label_pc_edf8
  store i32 %v3_eb3c, i32* %ip.global-to-local, align 4
  %v9_ee18 = icmp eq i32 %v3_eb3c, %v1_ee18
  store i1 %v9_ee18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ee18, label %dec_label_pc_ef28, label %dec_label_pc_ee20

dec_label_pc_ee20:                                ; preds = %dec_label_pc_ef0c.dec_label_pc_ee20_crit_edge, %dec_label_pc_ee14
  %v1_ee24 = phi i32 [ %v1_ee24.pre, %dec_label_pc_ef0c.dec_label_pc_ee20_crit_edge ], [ %v1_ee18, %dec_label_pc_ee14 ]
  store i32 %v3_eb40, i32* @lr, align 4
  %v9_ee24 = icmp eq i32 %v3_eb40, %v1_ee24
  store i1 %v9_ee24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ee24, label %dec_label_pc_ef44, label %dec_label_pc_ee2c

dec_label_pc_ee2c:                                ; preds = %dec_label_pc_ef28.dec_label_pc_ee2c_crit_edge, %dec_label_pc_ee20
  %v1_ee30 = phi i32 [ %v1_ee30.pre, %dec_label_pc_ef28.dec_label_pc_ee2c_crit_edge ], [ %v1_ee24, %dec_label_pc_ee20 ]
  store i32 %v3_eb44, i32* %r0.global-to-local, align 4
  %v9_ee30 = icmp eq i32 %v3_eb44, %v1_ee30
  store i1 %v9_ee30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ee30, label %dec_label_pc_ef60, label %dec_label_pc_ee38

dec_label_pc_ee38:                                ; preds = %dec_label_pc_ef44, %dec_label_pc_ee2c, %dec_label_pc_ef60
  %v0_ee38 = load i32, i32* @r4, align 4
  %v1_ee38 = add i32 %v0_ee38, 41
  store i32 %v1_ee38, i32* %r0.global-to-local, align 4
  store i32 %v4_ee3c.pre-phi, i32* %r1.global-to-local, align 4
  %v2_ee40 = call i32 @function_10af8(i32 %v1_ee38, i32 %v4_ee3c.pre-phi)
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ee48 = load i32, i32* @r7, align 4
  %v1_ee48 = trunc i32 %v0_ee48 to i8
  %v2_ee48 = load i32, i32* @r4, align 4
  %v3_ee48 = add i32 %v2_ee48, 10
  %v4_ee48 = inttoptr i32 %v3_ee48 to i8*
  store i8 %v1_ee48, i8* %v4_ee48, align 1
  %v0_ee4c = load i32, i32* @r7, align 4
  %v1_ee4c = trunc i32 %v0_ee4c to i8
  %v2_ee4c = load i32, i32* @r4, align 4
  %v3_ee4c = add i32 %v2_ee4c, 11
  %v4_ee4c = inttoptr i32 %v3_ee4c to i8*
  store i8 %v1_ee4c, i8* %v4_ee4c, align 1
  %v0_ee50 = load i32, i32* @r4, align 4
  store i32 %v0_ee50, i32* @r0, align 4
  %v2_ee54 = call i32 @function_f008(i32 %v0_ee50, i32 20)
  %v3_ee54 = trunc i32 %v2_ee54 to i8
  store i32 %v2_ee54, i32* %r0.global-to-local, align 4
  %v4_ee58 = sdiv i32 %v2_ee54, 256
  store i32 %v4_ee58, i32* %r3.global-to-local, align 4
  %v1_ee5c = trunc i32 %v4_ee58 to i8
  %v2_ee5c = load i32, i32* @r4, align 4
  %v3_ee5c = add i32 %v2_ee5c, 11
  %v4_ee5c = inttoptr i32 %v3_ee5c to i8*
  store i8 %v1_ee5c, i8* %v4_ee5c, align 1
  %v3_ee60 = load i32, i32* @r4, align 4
  %v4_ee60 = add i32 %v3_ee60, 10
  %v5_ee60 = inttoptr i32 %v4_ee60 to i8*
  store i8 %v3_ee54, i8* %v5_ee60, align 1
  %v0_ee64 = load i32, i32* @r7, align 4
  %v1_ee64 = trunc i32 %v0_ee64 to i8
  %v2_ee64 = load i32, i32* @r5, align 4
  %v3_ee64 = add i32 %v2_ee64, 6
  %v4_ee64 = inttoptr i32 %v3_ee64 to i8*
  store i8 %v1_ee64, i8* %v4_ee64, align 1
  %v0_ee68 = load i32, i32* @r7, align 4
  %v1_ee68 = trunc i32 %v0_ee68 to i8
  %v2_ee68 = load i32, i32* @r5, align 4
  %v3_ee68 = add i32 %v2_ee68, 7
  %v4_ee68 = inttoptr i32 %v3_ee68 to i8*
  store i8 %v1_ee68, i8* %v4_ee68, align 1
  %v0_ee6c = load i32, i32* @r4, align 4
  %v1_ee6c = add i32 %v0_ee6c, 24
  %v2_ee6c = inttoptr i32 %v1_ee6c to i8*
  %v3_ee6c = load i8, i8* %v2_ee6c, align 1
  %v4_ee6c = zext i8 %v3_ee6c to i32
  store i32 %v4_ee6c, i32* %r3.global-to-local, align 4
  %v1_ee70 = add i32 %v0_ee6c, 25
  %v2_ee70 = inttoptr i32 %v1_ee70 to i8*
  %v3_ee70 = load i8, i8* %v2_ee70, align 1
  %v4_ee70 = zext i8 %v3_ee70 to i32
  %v0_ee74 = load i32, i32* @r5, align 4
  store i32 %v0_ee74, i32* @r1, align 4
  %v4_ee78 = mul nuw nsw i32 %v4_ee70, 256
  %v5_ee78 = or i32 %v4_ee78, %v4_ee6c
  store i32 %v5_ee78, i32* %r2.global-to-local, align 4
  store i32 %v0_ee6c, i32* %r0.global-to-local, align 4
  %v0_ee80 = load i32, i32* @sb, align 4
  store i32 %v0_ee80, i32* %r3.global-to-local, align 4
  %v4_ee84 = call i32 @function_f064(i32 %v0_ee6c, i32 %v0_ee74, i32 %v5_ee78, i32 %v0_ee80)
  %v5_ee84 = trunc i32 %v4_ee84 to i8
  store i32 %v4_ee84, i32* %r0.global-to-local, align 4
  %v3_ee88 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-2176.0, i32* %r2.global-to-local, align 4
  %v5_ee98 = mul i32 %v3_ee88, 24
  %v2_ee9c = add i32 %v5_ee98, %arg2
  store i32 %v2_ee9c, i32* %lr.global-to-local, align 4
  %v4_eea0 = sdiv i32 %v4_ee84, 256
  store i32 %v4_eea0, i32* %r3.global-to-local, align 4
  %v3_eea4 = load i32, i32* @r5, align 4
  %v4_eea4 = add i32 %v3_eea4, 6
  %v5_eea4 = inttoptr i32 %v4_eea4 to i8*
  store i8 %v5_ee84, i8* %v5_eea4, align 1
  %v0_eea8 = load i32, i32* %r3.global-to-local, align 4
  %v1_eea8 = trunc i32 %v0_eea8 to i8
  %v2_eea8 = load i32, i32* @r5, align 4
  %v3_eea8 = add i32 %v2_eea8, 7
  %v4_eea8 = inttoptr i32 %v3_eea8 to i8*
  store i8 %v1_eea8, i8* %v4_eea8, align 1
  %v0_eeac = load i32, i32* %r2.global-to-local, align 4
  %v1_eeac = load i32, i32* %lr.global-to-local, align 4
  %v2_eeac = add i32 %v1_eeac, 4
  %v3_eeac = inttoptr i32 %v2_eeac to i32*
  store i32 %v0_eeac, i32* %v3_eeac, align 4
  %v0_eeb0 = load i32, i32* @r4, align 4
  %v1_eeb0 = add i32 %v0_eeb0, 20
  %v2_eeb0 = inttoptr i32 %v1_eeb0 to i32*
  %v3_eeb0 = load i32, i32* %v2_eeb0, align 4
  %v3_eeb4 = udiv i32 %v3_eeb0, 65536
  store i32 %v3_eeb4, i32* %r3.global-to-local, align 4
  %v3_eeb812 = udiv i32 %v3_eeb0, 16777216
  %v1_eebc = trunc i32 %v3_eeb812 to i8
  %v2_eebc = load i32, i32* %lr.global-to-local, align 4
  %v3_eebc = add i32 %v2_eebc, 3
  %v4_eebc = inttoptr i32 %v3_eebc to i8*
  store i8 %v1_eebc, i8* %v4_eebc, align 1
  %v0_eec0 = load i32, i32* %r3.global-to-local, align 4
  %v1_eec0 = trunc i32 %v0_eec0 to i8
  %v2_eec0 = load i32, i32* %lr.global-to-local, align 4
  %v3_eec0 = add i32 %v2_eec0, 2
  %v4_eec0 = inttoptr i32 %v3_eec0 to i8*
  store i8 %v1_eec0, i8* %v4_eec0, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_eecc = load i32, i32* @r4, align 4
  store i32 %v0_eecc, i32* %r1.global-to-local, align 4
  store i32 %v3_ead8, i32* %r0.global-to-local, align 4
  %v0_eed4 = load i32, i32* @sl, align 4
  store i32 %v0_eed4, i32* %r2.global-to-local, align 4
  %v0_eed8 = load i32, i32* %lr.global-to-local, align 4
  %v6_eee0 = inttoptr i32 %v0_eecc to i32*
  %v7_eee0 = call i32 @function_14acc(i32 %v3_ead8, i32* %v6_eee0, i32 %v0_eed4, i32 16384, i32 %v0_eed8, i32 16)
  %v3_eee4 = load i32, i32* %stack_var_-40, align 4
  %v1_eee8 = add i32 %v3_eee4, 1
  store i32 %v1_eee8, i32* %r0.global-to-local, align 4
  store i32 %v1_e864, i32* %r3.global-to-local, align 4
  %v9_eef0 = icmp eq i32 %v1_e864, %v1_eee8
  store i1 %v9_eef0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_eee8, i32* %stack_var_-40, align 4
  %v8_eef8 = icmp sgt i32 %v1_e864, %v1_eee8
  br i1 %v8_eef8, label %dec_label_pc_ee38.dec_label_pc_edf8_crit_edge, label %dec_label_pc_eefc

dec_label_pc_ee38.dec_label_pc_edf8_crit_edge:    ; preds = %dec_label_pc_ee38
  %v1_ee04.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_edf8

dec_label_pc_eefc:                                ; preds = %dec_label_pc_ee38
  store i32 %v1_e864, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_edd8

dec_label_pc_ef0c:                                ; preds = %dec_label_pc_edf8
  %v0_ef0c = call i32 @function_10a44()
  %v1_ef0c = trunc i32 %v0_ef0c to i8
  store i32 %v0_ef0c, i32* %r0.global-to-local, align 4
  store i32 %v3_eb3c, i32* %ip.global-to-local, align 4
  %v4_ef14 = sdiv i32 %v0_ef0c, 256
  store i32 %v4_ef14, i32* %r3.global-to-local, align 4
  %v1_ef18 = load i32, i32* @r6, align 4
  %v9_ef18 = icmp eq i32 %v3_eb3c, %v1_ef18
  store i1 %v9_ef18, i1* %cpsr_z.global-to-local, align 1
  %v1_ef1c = trunc i32 %v4_ef14 to i8
  %v2_ef1c = load i32, i32* @r4, align 4
  %v3_ef1c = add i32 %v2_ef1c, 5
  %v4_ef1c = inttoptr i32 %v3_ef1c to i8*
  store i8 %v1_ef1c, i8* %v4_ef1c, align 1
  %v3_ef20 = load i32, i32* @r4, align 4
  %v4_ef20 = add i32 %v3_ef20, 4
  %v5_ef20 = inttoptr i32 %v4_ef20 to i8*
  store i8 %v1_ef0c, i8* %v5_ef20, align 1
  %v0_ef24 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ef24, label %dec_label_pc_ef28, label %dec_label_pc_ef0c.dec_label_pc_ee20_crit_edge

dec_label_pc_ef0c.dec_label_pc_ee20_crit_edge:    ; preds = %dec_label_pc_ef0c
  %v1_ee24.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ee20

dec_label_pc_ef28:                                ; preds = %dec_label_pc_ef0c, %dec_label_pc_ee14
  %v0_ef28 = call i32 @function_10a44()
  %v1_ef28 = trunc i32 %v0_ef28 to i8
  store i32 %v0_ef28, i32* %r0.global-to-local, align 4
  store i32 %v3_eb40, i32* @lr, align 4
  %v4_ef30 = sdiv i32 %v0_ef28, 256
  store i32 %v4_ef30, i32* %r3.global-to-local, align 4
  %v1_ef34 = load i32, i32* @r6, align 4
  %v9_ef34 = icmp eq i32 %v3_eb40, %v1_ef34
  store i1 %v9_ef34, i1* %cpsr_z.global-to-local, align 1
  %v3_ef38 = load i32, i32* @r4, align 4
  %v4_ef38 = add i32 %v3_ef38, 20
  %v5_ef38 = inttoptr i32 %v4_ef38 to i8*
  store i8 %v1_ef28, i8* %v5_ef38, align 1
  %v0_ef3c = load i32, i32* %r3.global-to-local, align 4
  %v1_ef3c = trunc i32 %v0_ef3c to i8
  %v2_ef3c = load i32, i32* @r5, align 4
  %v3_ef3c = add i32 %v2_ef3c, 1
  %v4_ef3c = inttoptr i32 %v3_ef3c to i8*
  store i8 %v1_ef3c, i8* %v4_ef3c, align 1
  %v0_ef40 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ef40, label %dec_label_pc_ef44, label %dec_label_pc_ef28.dec_label_pc_ee2c_crit_edge

dec_label_pc_ef28.dec_label_pc_ee2c_crit_edge:    ; preds = %dec_label_pc_ef28
  %v1_ee30.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ee2c

dec_label_pc_ef44:                                ; preds = %dec_label_pc_ef28, %dec_label_pc_ee20
  %v0_ef44 = call i32 @function_10a44()
  %v1_ef44 = trunc i32 %v0_ef44 to i8
  %v4_ef48 = sdiv i32 %v0_ef44, 256
  store i32 %v4_ef48, i32* %r3.global-to-local, align 4
  %v3_ef4c = load i32, i32* @r5, align 4
  %v4_ef4c = add i32 %v3_ef4c, 2
  %v5_ef4c = inttoptr i32 %v4_ef4c to i8*
  store i8 %v1_ef44, i8* %v5_ef4c, align 1
  store i32 %v3_eb44, i32* %r0.global-to-local, align 4
  %v1_ef54 = load i32, i32* @r6, align 4
  %v9_ef54 = icmp eq i32 %v3_eb44, %v1_ef54
  store i1 %v9_ef54, i1* %cpsr_z.global-to-local, align 1
  %v0_ef58 = load i32, i32* %r3.global-to-local, align 4
  %v1_ef58 = trunc i32 %v0_ef58 to i8
  %v2_ef58 = load i32, i32* @r5, align 4
  %v3_ef58 = add i32 %v2_ef58, 3
  %v4_ef58 = inttoptr i32 %v3_ef58 to i8*
  store i8 %v1_ef58, i8* %v4_ef58, align 1
  %v0_ef5c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ef5c, label %dec_label_pc_ef60, label %dec_label_pc_ee38

dec_label_pc_ef60:                                ; preds = %dec_label_pc_ef44, %dec_label_pc_ee2c
  %v0_ef60 = call i32 @function_10a44()
  %v1_ef60 = trunc i32 %v0_ef60 to i8
  store i32 %v0_ef60, i32* %r0.global-to-local, align 4
  %v4_ef64 = sdiv i32 %v0_ef60, 256
  store i32 %v4_ef64, i32* %r3.global-to-local, align 4
  %v3_ef68 = load i32, i32* @r4, align 4
  %v4_ef68 = add i32 %v3_ef68, 28
  %v5_ef68 = inttoptr i32 %v4_ef68 to i8*
  store i8 %v1_ef60, i8* %v5_ef68, align 1
  %v0_ef6c = load i32, i32* %r3.global-to-local, align 4
  %v1_ef6c = trunc i32 %v0_ef6c to i8
  %v2_ef6c = load i32, i32* @r8, align 4
  %v3_ef6c = add i32 %v2_ef6c, 1
  %v4_ef6c = inttoptr i32 %v3_ef6c to i8*
  store i8 %v1_ef6c, i8* %v4_ef6c, align 1
  br label %dec_label_pc_ee38

dec_label_pc_ef74:                                ; preds = %dec_label_pc_ea40, %dec_label_pc_ea0c, %dec_label_pc_e9b0, %dec_label_pc_e858
  %v0_ef74 = call i32 @function_10a44()
  %v1_ef78 = urem i32 %v0_ef74, 4
  store i32 %v1_ef78, i32* %r0.global-to-local, align 4
  %v2_ef7c = icmp eq i32 %v1_ef78, 3
  store i1 %v2_ef7c, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_ef74 to i2
  switch i2 %trunc, label %dec_label_pc_eab420 [
    i2 0, label %dec_label_pc_efbc
    i2 1, label %dec_label_pc_efd0
    i2 -2, label %dec_label_pc_efdc
    i2 -1, label %dec_label_pc_efec
  ]

dec_label_pc_ef98:                                ; preds = %dec_label_pc_eb14
  store i32 %v2_eac4, i32* %r0.global-to-local, align 4
  %v4_ef9c = sext i8 %v5_eb30 to i32
  store i32 %v4_ef9c, i32* %r1.global-to-local, align 4
  %v2_efa0 = add i32 %v4_ef9c, %v2_eac4
  store i32 %v2_efa0, i32* @fp, align 4
  br label %dec_label_pc_edcc

dec_label_pc_efa8:                                ; preds = %dec_label_pc_eae8
  store i32 %v3_ead8, i32* %r0.global-to-local, align 4
  %v1_efac = call i32 @function_14234(i32 %v3_ead8)
  store i32 %v1_efac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_efb0

dec_label_pc_efb0:                                ; preds = %dec_label_pc_eac0, %dec_label_pc_eab4, %dec_label_pc_efa8
  %v29_efb8 = phi i32 [ %v3_ead8, %dec_label_pc_eac0 ], [ %v29_efb874, %dec_label_pc_eab4 ], [ %v1_efac, %dec_label_pc_efa8 ]
  store i32 %v3_e858, i32* %r4.global-to-local, align 4
  store i32 %v15_e858, i32* %r8.global-to-local, align 4
  store i32 %v18_e858, i32* %sb.global-to-local, align 4
  store i32 %v21_e858, i32* %sl.global-to-local, align 4
  store i32 %v24_e858, i32* %fp.global-to-local, align 4
  ret i32 %v29_efb8

dec_label_pc_efbc:                                ; preds = %dec_label_pc_ef74
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_eab4

dec_label_pc_efd0:                                ; preds = %dec_label_pc_ef74
  store i32 707416650, i32* @r4, align 4
  br label %dec_label_pc_eab4

dec_label_pc_efdc:                                ; preds = %dec_label_pc_ef74
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_eab4

dec_label_pc_efec:                                ; preds = %dec_label_pc_ef74
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_eab4

; uselistorder directives
  uselistorder i32 %v4_ef9c, { 0, 2, 1 }
  uselistorder i32 %v1_ef78, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_ef74, { 1, 0 }
  uselistorder i32 %v0_ef60, { 0, 2, 1 }
  uselistorder i32 %v0_ef28, { 0, 2, 1 }
  uselistorder i32 %v4_ef14, { 1, 0 }
  uselistorder i32 %v0_ef0c, { 0, 2, 1 }
  uselistorder i32 %v1_eee8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_ee84, { 0, 2, 1 }
  uselistorder i32 %v0_ee6c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_ee58, { 1, 0 }
  uselistorder i32 %v2_ee54, { 0, 2, 1 }
  uselistorder i32 %v7_ee00, { 1, 0, 2 }
  uselistorder i32 %v4_ee3c.pre-phi, { 1, 0 }
  uselistorder i32 %v2_ed80, { 1, 0 }
  uselistorder i32 %v1_ed7486, { 1, 0, 2 }
  uselistorder i32 %v1_ed68, { 2, 1, 0 }
  uselistorder i32 %v0_ed68, { 1, 2, 0 }
  uselistorder i32 %v0_ed6832, { 1, 0 }
  uselistorder i32 %v1_ed6833, { 2, 0, 1 }
  uselistorder i8 %extract.t78, { 1, 0 }
  uselistorder i32 %v1_ed3c, { 2, 0, 4, 1, 3, 5, 6 }
  uselistorder i32 %v0_ecb8, { 1, 0 }
  uselistorder i32 %v3_ebf4, { 1, 0, 2 }
  uselistorder i32 %v1_ebbc, { 1, 0 }
  uselistorder i32 %v1_ebb0, { 1, 0 }
  uselistorder i32 %v1_eb94, { 1, 0 }
  uselistorder i32 %v1_eb80, { 1, 0 }
  uselistorder i32 %v3_eb78, { 1, 0 }
  uselistorder i32 %v4_eb70, { 0, 4, 2, 5, 3, 1 }
  uselistorder i8 %v5_eb30, { 1, 0 }
  uselistorder i32 %v0_eb2c, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_eb20, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_eb0c, { 1, 0 }
  uselistorder i1 %v7_eadc, { 1, 0 }
  uselistorder i32 %v3_ead8, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_eac4, { 0, 11, 1, 6, 4, 3, 7, 10, 9, 8, 5, 2 }
  uselistorder i32 %stack_var_-2176.0, { 1, 0 }
  uselistorder i32 %v1_eaac, { 1, 0, 2 }
  uselistorder i1 %v7_ea7c, { 1, 0 }
  uselistorder i32 %v1_ea78, { 1, 0, 2 }
  uselistorder i1 %v8_ea70, { 1, 0 }
  uselistorder i1 %v7_ea6c, { 1, 0 }
  uselistorder i32 %v1_ea60, { 1, 0 }
  uselistorder i8 %v2_ea54, { 2, 0, 1, 3 }
  uselistorder i32 %v0_ea58, { 1, 0 }
  uselistorder i32 %v0_ea78, { 3, 0, 2, 1 }
  uselistorder i32 %v0_ea44, { 0, 2, 1 }
  uselistorder i32 %v1_ea5c, { 0, 2, 1 }
  uselistorder i32 %v2_ea2c, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v2_ea24, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ea0c, { 1, 2, 0, 3, 4, 5 }
  uselistorder i1 %v7_ea04, { 1, 0 }
  uselistorder i32 %v0_ea04, { 2, 3, 1, 4, 6, 5, 0 }
  uselistorder i32 %v0_e9a8, { 1, 0, 3, 2 }
  uselistorder i32 %v6_e978, { 0, 3, 5, 4, 2, 1, 7, 6 }
  uselistorder i32 %v1_e8fc, { 1, 0 }
  uselistorder i32 %v7_e8b8, { 0, 1, 2, 4, 3 }
  uselistorder i8 %v5_e8b4, { 1, 0 }
  uselistorder i32 %v6_e894, { 1, 0 }
  uselistorder i32 %v2_e87c, { 0, 3, 1, 2 }
  uselistorder i32 %v1_e864, { 7, 4, 5, 6, 3, 8, 9, 10, 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 51, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 7, 6, 8, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 46, 45, 47, 49, 48, 51, 50, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 1, 2, 3, 6, 5, 7, 9, 8, 10, 13, 12, 14, 15, 16, 17, 11, 18, 19, 68, 33, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 34, 35, 36, 38, 40, 39, 41, 42, 43, 45, 44, 47, 46, 48, 49, 51, 50, 52, 54, 53, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 1, 2, 4, 5, 6, 8, 7, 9, 10, 11, 12, 13, 21, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 3, 4, 5, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 29, 26, 33, 34, 35 }
  uselistorder i32 41, { 5, 6, 7, 0, 1, 3, 8, 2, 9, 4, 10 }
  uselistorder i32 134744072, { 1, 0 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 33686020, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_a4e8, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 107, 108 }
  uselistorder label %dec_label_pc_efb0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ee38, { 2, 0, 1 }
  uselistorder label %dec_label_pc_edd8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_edcc, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %bb145, { 1, 0 }
  uselistorder label %.thread21, { 1, 0 }
  uselistorder label %dec_label_pc_ea88, { 1, 0 }
  uselistorder label %dec_label_pc_ea7c, { 1, 0 }
  uselistorder label %dec_label_pc_ea40, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ea38, { 1, 0 }
}

define i32 @function_f008(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f008:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_f038, label %dec_label_pc_f014

dec_label_pc_f014:                                ; preds = %dec_label_pc_f008
  %v0_f018.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_f018

dec_label_pc_f018:                                ; preds = %dec_label_pc_f018, %dec_label_pc_f014
  %v0_f02c = phi i32 [ %v2_f02c, %dec_label_pc_f018 ], [ 0, %dec_label_pc_f014 ]
  %v0_f020 = phi i32 [ %v1_f020, %dec_label_pc_f018 ], [ %arg1, %dec_label_pc_f014 ]
  %v0_f030 = phi i32 [ %v1_f030, %dec_label_pc_f018 ], [ %v0_f018.pre, %dec_label_pc_f014 ]
  %v1_f018 = inttoptr i32 %v0_f030 to i8*
  %v2_f018 = load i8, i8* %v1_f018, align 1
  %v3_f018 = zext i8 %v2_f018 to i32
  %v1_f01c = add i32 %v0_f030, 1
  %v2_f01c = inttoptr i32 %v1_f01c to i8*
  %v3_f01c = load i8, i8* %v2_f01c, align 1
  %v4_f01c = zext i8 %v3_f01c to i32
  %v1_f020 = add i32 %v0_f020, -2
  %v4_f024 = mul nuw nsw i32 %v4_f01c, 256
  %v5_f024 = or i32 %v4_f024, %v3_f018
  %v2_f02c = add i32 %v5_f024, %v0_f02c
  %v1_f030 = add i32 %v0_f030, 2
  store i32 %v1_f030, i32* @r0, align 4
  %v1_f020.cmp = icmp ugt i32 %v1_f020, 1
  br i1 %v1_f020.cmp, label %dec_label_pc_f018, label %dec_label_pc_f038

dec_label_pc_f038:                                ; preds = %dec_label_pc_f018, %dec_label_pc_f008
  %v1_f040 = phi i32 [ 0, %dec_label_pc_f008 ], [ %v2_f02c, %dec_label_pc_f018 ]
  %v0_f038 = phi i32 [ %arg1, %dec_label_pc_f008 ], [ %v1_f020, %dec_label_pc_f018 ]
  %v7_f038 = icmp eq i32 %v0_f038, 1
  br i1 %v7_f038, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_f038
  %v1_f03c = load i32, i32* @r0, align 4
  %v2_f03c = inttoptr i32 %v1_f03c to i8*
  %v3_f03c = load i8, i8* %v2_f03c, align 1
  %v4_f03c = zext i8 %v3_f03c to i32
  %v3_f040 = add i32 %v1_f040, %v4_f03c
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f038, %bb
  %v0_f044 = phi i32 [ %v1_f040, %dec_label_pc_f038 ], [ %v3_f040, %bb ]
  %v3_f048 = urem i32 %v0_f044, 65536
  %v4_f04c = udiv i32 %v0_f044, 65536
  %v5_f04c = add nuw nsw i32 %v4_f04c, %v3_f048
  %v4_f050 = udiv i32 %v5_f04c, 65536
  %v5_f050 = add nuw nsw i32 %v4_f050, %v5_f04c
  %v1_f054 = urem i32 %v5_f050, 65536
  %v3_f05c = xor i32 %v1_f054, 65535
  ret i32 %v3_f05c

; uselistorder directives
  uselistorder i32 %v5_f04c, { 1, 0 }
  uselistorder i32 %v1_f030, { 1, 0 }
  uselistorder i32 %v1_f020, { 1, 0, 2 }
  uselistorder i32 %v0_f030, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_f064(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_f064:
  %v3_f074 = urem i32 %arg2, 65536
  %v1_f078 = add i32 %arg1, 12
  %v1_f07c = inttoptr i32 %v1_f078 to i32*
  %v2_f07c = load i32, i32* %v1_f07c, align 4
  %v3_f07c = add i32 %arg1, 16
  %v4_f07c = inttoptr i32 %v3_f07c to i32*
  %v5_f07c = load i32, i32* %v4_f07c, align 4
  %v7_f080 = icmp sgt i32 %arg3, 1
  br i1 %v7_f080, label %dec_label_pc_f08c.preheader, label %dec_label_pc_f0ac

dec_label_pc_f08c.preheader:                      ; preds = %dec_label_pc_f064
  %v0_f08c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_f08c

dec_label_pc_f08c:                                ; preds = %dec_label_pc_f08c.preheader, %dec_label_pc_f08c
  %v0_f0a0 = phi i32 [ 0, %dec_label_pc_f08c.preheader ], [ %v2_f0a0, %dec_label_pc_f08c ]
  %v0_f094 = phi i32 [ %arg3, %dec_label_pc_f08c.preheader ], [ %v1_f094, %dec_label_pc_f08c ]
  %v0_f0a4 = phi i32 [ %v0_f08c.pre, %dec_label_pc_f08c.preheader ], [ %v1_f0a4, %dec_label_pc_f08c ]
  %v1_f08c = inttoptr i32 %v0_f0a4 to i8*
  %v2_f08c = load i8, i8* %v1_f08c, align 1
  %v3_f08c = zext i8 %v2_f08c to i32
  %v1_f090 = add i32 %v0_f0a4, 1
  %v2_f090 = inttoptr i32 %v1_f090 to i8*
  %v3_f090 = load i8, i8* %v2_f090, align 1
  %v4_f090 = zext i8 %v3_f090 to i32
  %v1_f094 = add nsw i32 %v0_f094, -2
  %v4_f098 = mul nuw nsw i32 %v4_f090, 256
  %v5_f098 = or i32 %v4_f098, %v3_f08c
  %v2_f0a0 = add i32 %v5_f098, %v0_f0a0
  %v1_f0a4 = add i32 %v0_f0a4, 2
  store i32 %v1_f0a4, i32* @r1, align 4
  %v8_f0a8 = icmp sgt i32 %v1_f094, 1
  br i1 %v8_f0a8, label %dec_label_pc_f08c, label %dec_label_pc_f0ac

dec_label_pc_f0ac:                                ; preds = %dec_label_pc_f08c, %dec_label_pc_f064
  %v1_f0b4 = phi i32 [ 0, %dec_label_pc_f064 ], [ %v2_f0a0, %dec_label_pc_f08c ]
  %v0_f0ac = phi i32 [ %arg3, %dec_label_pc_f064 ], [ %v1_f094, %dec_label_pc_f08c ]
  %v7_f0ac = icmp eq i32 %v0_f0ac, 1
  br i1 %v7_f0ac, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_f0ac
  %v1_f0b0 = load i32, i32* @r1, align 4
  %v2_f0b0 = inttoptr i32 %v1_f0b0 to i8*
  %v3_f0b0 = load i8, i8* %v2_f0b0, align 1
  %v4_f0b0 = zext i8 %v3_f0b0 to i32
  %v3_f0b4 = add i32 %v4_f0b0, %v1_f0b4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f0ac, %bb
  %v0_f0d8 = phi i32 [ %v1_f0b4, %dec_label_pc_f0ac ], [ %v3_f0b4, %bb ]
  %v3_f0bc = urem i32 %v2_f07c, 65536
  %v1_f0c4 = add i32 %arg1, 9
  %v2_f0c4 = inttoptr i32 %v1_f0c4 to i8*
  %v3_f0c4 = load i8, i8* %v2_f0c4, align 1
  %v4_f0c4 = zext i8 %v3_f0c4 to i32
  %v3_f0c8 = urem i32 %v5_f07c, 65536
  %v4_f0cc = udiv i32 %v2_f07c, 65536
  %v3_f0d4 = mul nuw nsw i32 %v4_f0c4, 256
  %v4_f0d8 = udiv i32 %v5_f07c, 65536
  %v5_f0d8 = add i32 %v0_f0d8, %v4_f0d8
  %v2_f0dc = add i32 %v5_f0d8, %v3_f0d4
  %v5_f0cc = add nuw nsw i32 %v3_f0bc, %v3_f074
  %v2_f0d0 = add nuw nsw i32 %v5_f0cc, %v4_f0cc
  %v2_f0e0 = add nuw nsw i32 %v2_f0d0, %v3_f0c8
  %v2_f0e4 = add i32 %v2_f0dc, %v2_f0e0
  %tmp = icmp ult i32 %v2_f0e4, 65536
  br i1 %tmp, label %dec_label_pc_f104, label %dec_label_pc_f0f0

dec_label_pc_f0f0:                                ; preds = %.thread, %dec_label_pc_f0f0
  %v2_f0f81 = phi i32 [ %v2_f0f8, %dec_label_pc_f0f0 ], [ %v2_f0e4, %.thread ]
  %v3_f0fc2.in = phi i32 [ %v2_f0f8, %dec_label_pc_f0f0 ], [ %v2_f0e4, %.thread ]
  %v3_f0fc2 = udiv i32 %v3_f0fc2.in, 65536
  %v3_f0f4 = urem i32 %v2_f0f81, 65536
  %v2_f0f8 = add nuw nsw i32 %v3_f0f4, %v3_f0fc2
  %tmp14 = icmp ult i32 %v2_f0f8, 65536
  br i1 %tmp14, label %dec_label_pc_f104.loopexit, label %dec_label_pc_f0f0

dec_label_pc_f104.loopexit:                       ; preds = %dec_label_pc_f0f0
  br label %dec_label_pc_f104

dec_label_pc_f104:                                ; preds = %dec_label_pc_f104.loopexit, %.thread
  %v0_f104 = phi i32 [ %v2_f0f8, %dec_label_pc_f104.loopexit ], [ %v2_f0e4, %.thread ]
  %v1_f104 = urem i32 %v0_f104, 65536
  %v3_f10c = xor i32 %v1_f104, 65535
  ret i32 %v3_f10c

; uselistorder directives
  uselistorder i32 %v2_f0f8, { 2, 1, 3, 0 }
  uselistorder i32 %v2_f0e4, { 3, 0, 2, 1 }
  uselistorder i32 %v1_f0b4, { 1, 0 }
  uselistorder i32 %v1_f0a4, { 1, 0 }
  uselistorder i32 %v1_f094, { 0, 2, 1 }
  uselistorder i32 %v0_f0a4, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_f0f0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_f08c, { 1, 0 }
}

define i32 @function_f114(i32 %arg1) local_unnamed_addr {
dec_label_pc_f114:
  %v2_f118 = load i32, i32* @global_var_1f860.100, align 4
  %v2_f120 = call i32 @function_14334(i32 %v2_f118, i32 9)
  %v0_f124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f124, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_f114
  %v3_f124 = udiv i32 %v2_f120, 65536
  %v8_f124 = and i32 %v3_f124, 9
  call void @__pseudo_branch(i32 %v8_f124)
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_f114, %bb
  ret i32 %v2_f120

; uselistorder directives
  uselistorder i32 %v2_f120, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_f128(i32 %arg1) local_unnamed_addr {
dec_label_pc_f128:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f128 = load i32, i32* @r4, align 4
  store i32 %v3_f128, i32* %stack_var_-36, align 4
  %v6_f128 = load i32, i32* @r5, align 4
  %v9_f128 = load i32, i32* @r6, align 4
  %v12_f128 = load i32, i32* @r7, align 4
  %v15_f128 = load i32, i32* @r8, align 4
  %v18_f128 = load i32, i32* @sb, align 4
  %v21_f128 = load i32, i32* @sl, align 4
  %v24_f128 = load i32, i32* @fp, align 4
  %v2_f13c = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_f13c, i32* @sl, align 4
  %v3_f144 = mul i32 %arg1, 65536
  store i32 %v3_f144, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_f150 = ptrtoint i32* %stack_var_-8773 to i32
  %v2_f15c = bitcast i32* %stack_var_-4677 to i8*
  %v3_f15c = call i32 @function_14870(i8* %v2_f15c, i32 0)
  store i32 4096, i32* @r2, align 4
  %v2_f174 = bitcast i32* %stack_var_-8773 to i8*
  %v3_f174 = call i32 @function_14870(i8* %v2_f174, i32 0)
  %v2_f178 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_f178, i32* @r6, align 4
  store i32 513, i32* @r2, align 4
  %v3_f198 = call i32 @function_14870(i8* nonnull %stack_var_-581, i32 0)
  %v2_f19c = ptrtoint i8* %stack_var_-68 to i32
  %v1_f1a4 = load i32, i32* @r5, align 4
  %v4_f1a4 = udiv i32 %v1_f1a4, 16777216
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_f1c4 = trunc i32 %v4_f1a4 to i8
  %v4_f1c4 = call i32 @function_13d68(i8 %v3_f1c4, i32 16, i32 %v2_f19c)
  %v2_f1cc = call i32 @function_13874(i8* nonnull %stack_var_-68)
  %v7_f1d0 = icmp eq i32 %v2_f1cc, 2
  br i1 %v7_f1d0, label %dec_label_pc_f664, label %dec_label_pc_f1d8

dec_label_pc_f1d8:                                ; preds = %dec_label_pc_f128, %dec_label_pc_f664
  %v1_f1dc = call i32 @function_12f50(i32 6)
  %v1_f1e4 = call i32 @function_12f50(i32 7)
  %v1_f1ec = call i32 @function_12f50(i32 9)
  %v0_f1f4 = load i32, i32* @r4, align 4
  %v4_f1f8 = call i32 @function_14360(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_16b40.102, i32 0, i32 0), i32 %v0_f1f4)
  %v7_f1fc = icmp eq i32 %v4_f1f8, -1
  store i32 %v4_f1f8, i32* @r8, align 4
  br i1 %v7_f1fc, label %dec_label_pc_f624, label %dec_label_pc_f208.preheader

dec_label_pc_f208.preheader:                      ; preds = %dec_label_pc_f1d8
  %v4_f21458 = call i32 @function_13acc(i8* nonnull %stack_var_-581, i32 512, i32 %v4_f1f8)
  %v2_f21860 = icmp eq i32 %v4_f21458, 0
  br i1 %v2_f21860, label %dec_label_pc_f3a8.loopexit, label %dec_label_pc_f220.lr.ph

dec_label_pc_f220.lr.ph:                          ; preds = %dec_label_pc_f208.preheader
  %v2_f268 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_f220

dec_label_pc_f220:                                ; preds = %dec_label_pc_f220.lr.ph, %dec_label_pc_f208.backedge
  %v3_f224 = load i8, i8* %stack_var_-581, align 1
  %v4_f224 = sext i8 %v3_f224 to i32
  %v2_f228 = icmp eq i8 %v3_f224, 0
  br i1 %v2_f228, label %bb130, label %bb

bb:                                               ; preds = %dec_label_pc_f220
  %v8_f22c = icmp eq i8 %v3_f224, 58
  br i1 %v8_f22c, label %.thread6, label %dec_label_pc_f240

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_f258

bb130:                                            ; preds = %dec_label_pc_f220
  br label %dec_label_pc_f258

dec_label_pc_f240:                                ; preds = %bb
  %v1_f248.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f244

dec_label_pc_f244:                                ; preds = %bb131, %dec_label_pc_f240
  %v0_f244 = phi i32 [ %v1_f244, %bb131 ], [ 0, %dec_label_pc_f240 ]
  %v1_f244 = add i32 %v0_f244, 1
  %v2_f248 = add i32 %v1_f244, %v1_f248.pre
  %v3_f248 = inttoptr i32 %v2_f248 to i8*
  %v4_f248 = load i8, i8* %v3_f248, align 1
  %v6_f248 = zext i8 %v4_f248 to i32
  %v2_f24c = icmp eq i8 %v4_f248, 0
  br i1 %v2_f24c, label %dec_label_pc_f258, label %bb131

bb131:                                            ; preds = %dec_label_pc_f244
  %v8_f250 = icmp eq i8 %v4_f248, 58
  br i1 %v8_f250, label %dec_label_pc_f258, label %dec_label_pc_f244

dec_label_pc_f258:                                ; preds = %dec_label_pc_f244, %bb131, %bb130, %.thread6
  %v1_f284 = phi i32 [ 0, %.thread6 ], [ 0, %bb130 ], [ %v1_f244, %bb131 ], [ %v1_f244, %dec_label_pc_f244 ]
  %v0_f258 = phi i32 [ %v4_f224, %.thread6 ], [ %v4_f224, %bb130 ], [ %v6_f248, %bb131 ], [ %v6_f248, %dec_label_pc_f244 ]
  %v2_f258 = icmp eq i32 %v0_f258, 0
  br i1 %v2_f258, label %dec_label_pc_f208.backedge, label %dec_label_pc_f260

dec_label_pc_f208.backedge:                       ; preds = %dec_label_pc_f258, %dec_label_pc_f330, %dec_label_pc_f37c, %dec_label_pc_f2a4
  %v0_f210 = load i32, i32* @r8, align 4
  %v4_f214 = call i32 @function_13acc(i8* nonnull %stack_var_-581, i32 512, i32 %v0_f210)
  %v2_f218 = icmp eq i32 %v4_f214, 0
  br i1 %v2_f218, label %dec_label_pc_f3a8.loopexit, label %dec_label_pc_f220

dec_label_pc_f260:                                ; preds = %dec_label_pc_f258
  %v1_f264 = add i32 %v1_f284, 2
  %v2_f26c = add i32 %v1_f264, %v2_f268
  %v1_f270 = add i32 %v2_f26c, -545
  %v2_f270 = inttoptr i32 %v1_f270 to i8*
  %v3_f270 = load i8, i8* %v2_f270, align 1
  %v2_f274 = icmp eq i8 %v3_f270, 0
  br i1 %v2_f274, label %bb133, label %bb132

bb132:                                            ; preds = %dec_label_pc_f260
  %v8_f278 = icmp eq i8 %v3_f270, 32
  br i1 %v8_f278, label %.thread10, label %dec_label_pc_f284

.thread10:                                        ; preds = %bb132
  store i32 %v1_f264, i32* @r5, align 4
  br label %dec_label_pc_f2a4

bb133:                                            ; preds = %dec_label_pc_f260
  store i32 %v1_f264, i32* @r5, align 4
  br label %dec_label_pc_f2a4

dec_label_pc_f284:                                ; preds = %bb132
  %v0_f284 = load i32, i32* @r6, align 4
  %v2_f284 = add i32 %v0_f284, %v1_f284
  br label %dec_label_pc_f288

dec_label_pc_f288:                                ; preds = %bb134, %dec_label_pc_f284
  %v0_f29413 = phi i32 [ %v1_f294, %bb134 ], [ %v2_f284, %dec_label_pc_f284 ]
  %v1_f288 = add i32 %v0_f29413, 3
  %v2_f288 = inttoptr i32 %v1_f288 to i8*
  %v3_f288 = load i8, i8* %v2_f288, align 1
  %v2_f28c = icmp eq i8 %v3_f288, 0
  br i1 %v2_f28c, label %.thread12, label %bb134

.thread12:                                        ; preds = %dec_label_pc_f288
  %v1_f29414 = add i32 %v0_f29413, 1
  br label %dec_label_pc_f29c

bb134:                                            ; preds = %dec_label_pc_f288
  %v8_f290 = icmp eq i8 %v3_f288, 32
  %v1_f294 = add i32 %v0_f29413, 1
  br i1 %v8_f290, label %dec_label_pc_f29c, label %dec_label_pc_f288

dec_label_pc_f29c:                                ; preds = %bb134, %.thread12
  %v1_f29415 = phi i32 [ %v1_f29414, %.thread12 ], [ %v1_f294, %bb134 ]
  %v2_f29c = sub i32 %v1_f29415, %v0_f284
  %v1_f2a0 = add i32 %v2_f29c, 2
  store i32 %v1_f2a0, i32* @r5, align 4
  br label %dec_label_pc_f2a4

dec_label_pc_f2a4:                                ; preds = %bb133, %.thread10, %dec_label_pc_f29c
  %v1_f2b0 = phi i32 [ %v1_f264, %.thread10 ], [ %v1_f264, %bb133 ], [ %v1_f2a0, %dec_label_pc_f29c ]
  %v0_f2a4 = load i32, i32* @r6, align 4
  %v2_f2a4 = add i32 %v0_f2a4, %v1_f264
  store i32 %v2_f2a4, i32* @r4, align 4
  %v2_f2b0 = add i32 %v1_f2b0, %v2_f268
  store i32 0, i32* @r7, align 4
  %v3_f2bc = add i32 %v2_f2b0, -545
  %v4_f2bc = inttoptr i32 %v3_f2bc to i8*
  store i8 0, i8* %v4_f2bc, align 1
  %v1_f2c0 = inttoptr i32 %v2_f2a4 to i8*
  %v2_f2c0 = call i32 @function_13874(i8* %v1_f2c0)
  store i32 %v2_f2c0, i32* @r1, align 4
  %v0_f2cc = load i32, i32* @r4, align 4
  %v3_f2d0 = inttoptr i32 %v0_f2cc to i8*
  %v4_f2d0 = call i32 @function_13bc8(i8* %v3_f2d0, i32 %v2_f2c0, i32 %v2_f19c)
  %v7_f2d4 = icmp eq i32 %v4_f2d0, -1
  br i1 %v7_f2d4, label %dec_label_pc_f208.backedge, label %dec_label_pc_f2f0.preheader

dec_label_pc_f2f0.preheader:                      ; preds = %dec_label_pc_f2a4
  %v1_f2d8 = load i32, i32* @r7, align 4
  %v1_f2dc = load i32, i32* @r6, align 4
  %v2_f2dc = load i32, i32* @r5, align 4
  %v3_f2dc = add i32 %v2_f2dc, %v1_f2dc
  store i32 %v1_f2d8, i32* @lr, align 4
  store i32 %v1_f2d8, i32* @r4, align 4
  %v1_f2f050 = add i32 %v3_f2dc, 2
  %v2_f2f051 = inttoptr i32 %v1_f2f050 to i8*
  %v3_f2f052 = load i8, i8* %v2_f2f051, align 1
  %v2_f2f454 = icmp eq i8 %v3_f2f052, 0
  %v1_f2f856 = add i32 %v2_f2dc, 2
  br i1 %v2_f2f454, label %dec_label_pc_f330, label %dec_label_pc_f300

dec_label_pc_f300:                                ; preds = %dec_label_pc_f2f0.preheader, %dec_label_pc_f2f0.backedge
  %v0_f33086 = phi i32 [ %v0_f33085, %dec_label_pc_f2f0.backedge ], [ %v1_f2d8, %dec_label_pc_f2f0.preheader ]
  %v0_f318.pr = phi i32 [ %v0_f318.pr71, %dec_label_pc_f2f0.backedge ], [ %v1_f2d8, %dec_label_pc_f2f0.preheader ]
  %v0_f634 = phi i32 [ %v0_f63474, %dec_label_pc_f2f0.backedge ], [ %v1_f2d8, %dec_label_pc_f2f0.preheader ]
  %v0_f2f882 = phi i32 [ %v1_f2f8, %dec_label_pc_f2f0.backedge ], [ %v1_f2f856, %dec_label_pc_f2f0.preheader ]
  %v0_f328 = phi i32 [ %v0_f2f0, %dec_label_pc_f2f0.backedge ], [ %v3_f2dc, %dec_label_pc_f2f0.preheader ]
  %v1_f304.in = phi i8 [ %v3_f2f0, %dec_label_pc_f2f0.backedge ], [ %v3_f2f052, %dec_label_pc_f2f0.preheader ]
  %v7_f300 = icmp eq i8 %v1_f304.in, 9
  br i1 %v7_f300, label %.thread23, label %bb135

bb135:                                            ; preds = %dec_label_pc_f300
  %v8_f304 = icmp eq i8 %v1_f304.in, 32
  br i1 %v8_f304, label %.thread23.thread35, label %dec_label_pc_f318

.thread23.thread35:                               ; preds = %bb135
  br label %dec_label_pc_f324

.thread23:                                        ; preds = %dec_label_pc_f300
  br label %dec_label_pc_f324

dec_label_pc_f318:                                ; preds = %bb135
  %v7_f318 = icmp eq i32 %v0_f318.pr, 1
  br i1 %v7_f318, label %dec_label_pc_f634, label %dec_label_pc_f320

dec_label_pc_f320:                                ; preds = %dec_label_pc_f634, %dec_label_pc_f318
  %v0_f32479 = phi i32 [ %v1_f634, %dec_label_pc_f634 ], [ %v0_f634, %dec_label_pc_f318 ]
  br label %dec_label_pc_f324

dec_label_pc_f324:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_f320
  %v0_f324 = phi i32 [ %v0_f634, %.thread23.thread35 ], [ %v0_f634, %.thread23 ], [ %v0_f32479, %dec_label_pc_f320 ]
  %v0_f318.pr72 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_f320 ]
  %v7_f32c = icmp sgt i32 %v0_f324, 6
  br i1 %v7_f32c, label %dec_label_pc_f330, label %dec_label_pc_f2f0.backedge

dec_label_pc_f330:                                ; preds = %dec_label_pc_f2f0.backedge, %dec_label_pc_f324, %dec_label_pc_f2f0.preheader
  %v1_f380 = phi i32 [ %v1_f2f856, %dec_label_pc_f2f0.preheader ], [ %v1_f2f8, %dec_label_pc_f2f0.backedge ], [ %v0_f2f882, %dec_label_pc_f324 ]
  %v0_f330 = phi i32 [ %v1_f2d8, %dec_label_pc_f2f0.preheader ], [ %v0_f33085, %dec_label_pc_f2f0.backedge ], [ %v0_f33086, %dec_label_pc_f324 ]
  %v2_f330 = icmp eq i32 %v0_f330, 0
  br i1 %v2_f330, label %dec_label_pc_f208.backedge, label %dec_label_pc_f33c

dec_label_pc_f33c:                                ; preds = %dec_label_pc_f330
  %v2_f344 = add i32 %v1_f380, %v2_f268
  %v1_f348 = add i32 %v2_f344, -545
  %v2_f348 = inttoptr i32 %v1_f348 to i8*
  %v3_f348 = load i8, i8* %v2_f348, align 1
  %v2_f34c = icmp eq i8 %v3_f348, 0
  br i1 %v2_f34c, label %dec_label_pc_f37c, label %bb136

bb136:                                            ; preds = %dec_label_pc_f33c
  %v8_f350 = icmp eq i8 %v3_f348, 32
  br i1 %v8_f350, label %dec_label_pc_f37c, label %dec_label_pc_f358

dec_label_pc_f358:                                ; preds = %bb136
  %v2_f358 = add i32 %v1_f380, %v1_f2dc
  br label %dec_label_pc_f35c

dec_label_pc_f35c:                                ; preds = %bb137, %dec_label_pc_f358
  %v0_f36828 = phi i32 [ %v1_f368, %bb137 ], [ %v1_f380, %dec_label_pc_f358 ]
  %v0_f35c = phi i32 [ %v1_f35c, %bb137 ], [ %v2_f358, %dec_label_pc_f358 ]
  %v1_f35c = add i32 %v0_f35c, 1
  %v2_f35c = inttoptr i32 %v1_f35c to i8*
  %v3_f35c = load i8, i8* %v2_f35c, align 1
  %v2_f360 = icmp eq i8 %v3_f35c, 0
  br i1 %v2_f360, label %.thread27, label %bb137

.thread27:                                        ; preds = %dec_label_pc_f35c
  %v1_f36829 = add i32 %v0_f36828, 1
  br label %dec_label_pc_f370

bb137:                                            ; preds = %dec_label_pc_f35c
  %v8_f364 = icmp eq i8 %v3_f35c, 32
  %v1_f368 = add i32 %v0_f36828, 1
  br i1 %v8_f364, label %dec_label_pc_f370, label %dec_label_pc_f35c

dec_label_pc_f370:                                ; preds = %bb137, %.thread27
  %v1_f378 = phi i32 [ %v1_f36829, %.thread27 ], [ %v1_f368, %bb137 ]
  %v2_f378 = add i32 %v1_f378, %v2_f268
  br label %dec_label_pc_f37c

dec_label_pc_f37c:                                ; preds = %dec_label_pc_f33c, %bb136, %dec_label_pc_f370
  %v2_f388 = phi i32 [ %v2_f344, %dec_label_pc_f33c ], [ %v2_f344, %bb136 ], [ %v2_f378, %dec_label_pc_f370 ]
  %v2_f380 = add i32 %v1_f380, %v1_f2dc
  store i32 %v2_f380, i32* @r4, align 4
  %v3_f388 = add i32 %v2_f388, -545
  %v4_f388 = inttoptr i32 %v3_f388 to i8*
  store i8 0, i8* %v4_f388, align 1
  %v1_f38c = inttoptr i32 %v2_f380 to i8*
  %v2_f38c = call i32 @function_13874(i8* %v1_f38c)
  %v8_f394 = icmp sgt i32 %v2_f38c, 15
  br i1 %v8_f394, label %dec_label_pc_f208.backedge, label %dec_label_pc_f398

dec_label_pc_f398:                                ; preds = %dec_label_pc_f37c
  %v0_f39c = load i32, i32* @r4, align 4
  %v2_f3a0 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_f3a0, i32* @r0, align 4
  %v2_f3a4 = bitcast i32* %stack_var_-52 to i8*
  %v3_f3a4 = call i32 @function_1389c(i8* %v2_f3a4, i32 %v0_f39c)
  br label %dec_label_pc_f3a8

dec_label_pc_f3a8.loopexit:                       ; preds = %dec_label_pc_f208.backedge, %dec_label_pc_f208.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre99 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_f3a8

dec_label_pc_f3a8:                                ; preds = %dec_label_pc_f3a8.loopexit, %dec_label_pc_f398
  %v1_f3b8.pre-phi = phi i8* [ %.pre99, %dec_label_pc_f3a8.loopexit ], [ %v2_f3a4, %dec_label_pc_f398 ]
  %v2_f3b4.pre-phi = phi i32 [ %.pre, %dec_label_pc_f3a8.loopexit ], [ %v2_f3a0, %dec_label_pc_f398 ]
  %v0_f3a8 = load i32, i32* @r8, align 4
  %v1_f3ac = call i32 @function_14234(i32 %v0_f3a8)
  %v2_f3b8 = call i32 @function_13874(i8* %v1_f3b8.pre-phi)
  store i32 %v2_f3b8, i32* @r4, align 4
  %v2_f3bc = icmp eq i32 %v2_f3b8, 0
  br i1 %v2_f3bc, label %dec_label_pc_f60c, label %dec_label_pc_f3c4

dec_label_pc_f3c4:                                ; preds = %dec_label_pc_f3a8
  %v3_f3cc = call i32 @function_12e6c(i32 6, i32* null)
  store i32 %v3_f3cc, i32* @r0, align 4
  %v1_f3d0 = call i32 @function_1463c(i32 %v3_f3cc)
  store i32 %v1_f3d0, i32* @r8, align 4
  %v2_f3d4 = icmp eq i32 %v1_f3d0, 0
  br i1 %v2_f3d4, label %dec_label_pc_f604, label %dec_label_pc_f3e4.preheader

dec_label_pc_f3e4.preheader:                      ; preds = %dec_label_pc_f3c4
  store i32 0, i32* @r5, align 4
  %v1_f3e845 = inttoptr i32 %v1_f3d0 to i32*
  %v2_f3e846 = call i32 @function_14738(i32* %v1_f3e845)
  %v2_f3ec48 = icmp eq i32 %v2_f3e846, 0
  br i1 %v2_f3ec48, label %dec_label_pc_f5f8, label %dec_label_pc_f3f4.preheader

dec_label_pc_f3e4.loopexit:                       ; preds = %dec_label_pc_f3fc, %dec_label_pc_f410, %dec_label_pc_f478
  %v0_f3e4 = load i32, i32* @r8, align 4
  %v1_f3e8 = inttoptr i32 %v0_f3e4 to i32*
  %v2_f3e8 = call i32 @function_14738(i32* %v1_f3e8)
  %v2_f3ec = icmp eq i32 %v2_f3e8, 0
  br i1 %v2_f3ec, label %dec_label_pc_f5f8, label %dec_label_pc_f3f4.preheader

dec_label_pc_f3f4.preheader:                      ; preds = %dec_label_pc_f3e4.preheader, %dec_label_pc_f3e4.loopexit
  %v0_f3fc94 = phi i32 [ %v2_f3e8, %dec_label_pc_f3e4.loopexit ], [ %v2_f3e846, %dec_label_pc_f3e4.preheader ]
  br label %dec_label_pc_f3f4

dec_label_pc_f3f4:                                ; preds = %dec_label_pc_f3f4.preheader, %dec_label_pc_f5e0
  %v0_f408 = phi i32 [ %v0_f3fc94, %dec_label_pc_f3f4.preheader ], [ %v2_f5ec, %dec_label_pc_f5e0 ]
  %v0_f3f4 = load i32, i32* @r5, align 4
  %v2_f3f4 = icmp eq i32 %v0_f3f4, 0
  br i1 %v2_f3f4, label %dec_label_pc_f3fc, label %dec_label_pc_f5f8

dec_label_pc_f3fc:                                ; preds = %dec_label_pc_f3f4
  %v1_f3fc = add i32 %v0_f408, 11
  %v2_f3fc = inttoptr i32 %v1_f3fc to i8*
  %v3_f3fc = load i8, i8* %v2_f3fc, align 1
  %v4_f3fc = zext i8 %v3_f3fc to i32
  %v1_f400 = add nsw i32 %v4_f3fc, -48
  store i32 %v1_f3fc, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_f400, 9
  br i1 %tmp, label %dec_label_pc_f3e4.loopexit, label %dec_label_pc_f410

dec_label_pc_f410:                                ; preds = %dec_label_pc_f3fc
  %v3_f418 = call i32 @function_12e6c(i32 6, i32* null)
  store i32 %v2_f13c, i32* @r0, align 4
  %v3_f424 = call i32 @function_1389c(i8* %v2_f15c, i32 %v3_f418)
  %v2_f42c = call i32 @function_13874(i8* %v2_f15c)
  %v0_f430 = load i32, i32* @r7, align 4
  %v0_f434 = load i32, i32* @sl, align 4
  %v2_f434 = add i32 %v0_f434, %v2_f42c
  store i32 %v2_f434, i32* @r0, align 4
  %v2_f438 = inttoptr i32 %v2_f434 to i8*
  %v3_f438 = call i32 @function_1389c(i8* %v2_f438, i32 %v0_f430)
  %v2_f440 = call i32 @function_13874(i8* %v2_f15c)
  %v0_f444 = load i32, i32* @r5, align 4
  store i32 %v2_f440, i32* @r4, align 4
  %v2_f450 = inttoptr i32 %v0_f444 to i32*
  %v3_f450 = call i32 @function_12e6c(i32 7, i32* %v2_f450)
  %v0_f458 = load i32, i32* @sl, align 4
  %v1_f458 = load i32, i32* @r4, align 4
  %v2_f458 = add i32 %v1_f458, %v0_f458
  store i32 %v2_f458, i32* @r0, align 4
  %v2_f45c = inttoptr i32 %v2_f458 to i8*
  %v3_f45c = call i32 @function_1389c(i8* %v2_f45c, i32 %v3_f450)
  %v4_f46c = call i32 @function_14428(i8* %v2_f15c, i32 %v2_f150, i32 4096)
  %v7_f470 = icmp eq i32 %v4_f46c, -1
  br i1 %v7_f470, label %dec_label_pc_f3e4.loopexit, label %dec_label_pc_f478

dec_label_pc_f478:                                ; preds = %dec_label_pc_f410
  %v0_f478 = load i32, i32* @r5, align 4
  %v2_f480 = inttoptr i32 %v0_f478 to i32*
  %v3_f480 = call i32 @function_12e6c(i32 6, i32* %v2_f480)
  store i32 %v2_f13c, i32* @r0, align 4
  %v3_f48c = call i32 @function_1389c(i8* %v2_f15c, i32 %v3_f480)
  %v2_f494 = call i32 @function_13874(i8* %v2_f15c)
  %v0_f498 = load i32, i32* @r7, align 4
  %v0_f49c = load i32, i32* @sl, align 4
  %v2_f49c = add i32 %v0_f49c, %v2_f494
  store i32 %v2_f49c, i32* @r0, align 4
  %v2_f4a0 = inttoptr i32 %v2_f49c to i8*
  %v3_f4a0 = call i32 @function_1389c(i8* %v2_f4a0, i32 %v0_f498)
  %v2_f4a8 = call i32 @function_13874(i8* %v2_f15c)
  %v0_f4ac = load i32, i32* @r5, align 4
  store i32 %v2_f4a8, i32* @r4, align 4
  %v2_f4b8 = inttoptr i32 %v0_f4ac to i32*
  %v3_f4b8 = call i32 @function_12e6c(i32 9, i32* %v2_f4b8)
  %v0_f4c0 = load i32, i32* @sl, align 4
  %v1_f4c0 = load i32, i32* @r4, align 4
  %v2_f4c0 = add i32 %v1_f4c0, %v0_f4c0
  store i32 %v2_f4c0, i32* @r0, align 4
  %v2_f4c4 = inttoptr i32 %v2_f4c0 to i8*
  %v3_f4c4 = call i32 @function_1389c(i8* %v2_f4c4, i32 %v3_f4b8)
  store i32 %v2_f13c, i32* @r0, align 4
  %v1_f4cc = call i32 @function_1463c(i32 %v2_f13c)
  store i32 %v1_f4cc, i32* @sb, align 4
  %v2_f4d0 = icmp eq i32 %v1_f4cc, 0
  br i1 %v2_f4d0, label %dec_label_pc_f3e4.loopexit, label %dec_label_pc_f4d8.preheader

dec_label_pc_f4d8.preheader:                      ; preds = %dec_label_pc_f478
  %v1_f4dc40 = inttoptr i32 %v1_f4cc to i32*
  %v2_f4dc41 = call i32 @function_14738(i32* %v1_f4dc40)
  store i32 %v2_f4dc41, i32* @r6, align 4
  %v2_f4e043 = icmp eq i32 %v2_f4dc41, 0
  br i1 %v2_f4e043, label %dec_label_pc_f5e0, label %dec_label_pc_f4f0thread-pre-split

dec_label_pc_f4d8.loopexit:                       ; preds = %dec_label_pc_f4f8, %dec_label_pc_f590
  %v0_f4d8 = load i32, i32* @sb, align 4
  %v1_f4dc = inttoptr i32 %v0_f4d8 to i32*
  %v2_f4dc = call i32 @function_14738(i32* %v1_f4dc)
  store i32 %v2_f4dc, i32* @r6, align 4
  %v2_f4e0 = icmp eq i32 %v2_f4dc, 0
  br i1 %v2_f4e0, label %dec_label_pc_f5e0, label %dec_label_pc_f4f0thread-pre-split

dec_label_pc_f4f0thread-pre-split:                ; preds = %dec_label_pc_f4d8.preheader, %dec_label_pc_f4d8.loopexit
  %v0_f4f0.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_f4f0

dec_label_pc_f4f0:                                ; preds = %dec_label_pc_f4f0thread-pre-split, %dec_label_pc_f5b8
  %v0_f4f0 = phi i32 [ %v0_f4f0.pr, %dec_label_pc_f4f0thread-pre-split ], [ 1, %dec_label_pc_f5b8 ]
  %v2_f4f0 = icmp eq i32 %v0_f4f0, 0
  br i1 %v2_f4f0, label %dec_label_pc_f4f8, label %dec_label_pc_f5e0

dec_label_pc_f4f8:                                ; preds = %dec_label_pc_f4f0
  %v2_f4f8 = call i32 @function_13914(i32 %v2_f150, i32 4096)
  %v0_f4fc = load i32, i32* @r5, align 4
  %v2_f504 = inttoptr i32 %v0_f4fc to i32*
  %v3_f504 = call i32 @function_12e6c(i32 6, i32* %v2_f504)
  store i32 %v2_f13c, i32* @r0, align 4
  %v3_f510 = call i32 @function_1389c(i8* %v2_f15c, i32 %v3_f504)
  %v2_f518 = call i32 @function_13874(i8* %v2_f15c)
  %v0_f51c = load i32, i32* @r7, align 4
  %v0_f520 = load i32, i32* @sl, align 4
  %v2_f520 = add i32 %v0_f520, %v2_f518
  store i32 %v2_f520, i32* @r0, align 4
  %v2_f524 = inttoptr i32 %v2_f520 to i8*
  %v3_f524 = call i32 @function_1389c(i8* %v2_f524, i32 %v0_f51c)
  %v2_f52c = call i32 @function_13874(i8* %v2_f15c)
  %v0_f530 = load i32, i32* @r5, align 4
  store i32 %v2_f52c, i32* @r4, align 4
  %v2_f53c = inttoptr i32 %v0_f530 to i32*
  %v3_f53c = call i32 @function_12e6c(i32 9, i32* %v2_f53c)
  %v0_f544 = load i32, i32* @sl, align 4
  %v1_f544 = load i32, i32* @r4, align 4
  %v2_f544 = add i32 %v1_f544, %v0_f544
  store i32 %v2_f544, i32* @r0, align 4
  %v2_f548 = inttoptr i32 %v2_f544 to i8*
  %v3_f548 = call i32 @function_1389c(i8* %v2_f548, i32 %v3_f53c)
  %v2_f550 = call i32 @function_13874(i8* %v2_f15c)
  %v0_f558 = load i32, i32* @sl, align 4
  %v2_f558 = add i32 %v0_f558, %v2_f550
  store i32 %v2_f558, i32* @r0, align 4
  %v2_f55c = inttoptr i32 %v2_f558 to i8*
  %v3_f55c = call i32 @function_1389c(i8* %v2_f55c, i32 ptrtoint ([2 x i8]* @global_var_16b00.23 to i32))
  %v2_f564 = call i32 @function_13874(i8* %v2_f15c)
  %v0_f568 = load i32, i32* @r6, align 4
  %v1_f568 = add i32 %v0_f568, 11
  %v0_f56c = load i32, i32* @sl, align 4
  %v2_f56c = add i32 %v0_f56c, %v2_f564
  store i32 %v2_f56c, i32* @r0, align 4
  %v2_f570 = inttoptr i32 %v2_f56c to i8*
  %v3_f570 = call i32 @function_1389c(i8* %v2_f570, i32 %v1_f568)
  %v4_f580 = call i32 @function_14428(i8* %v2_f15c, i32 %v2_f150, i32 4096)
  %v7_f584 = icmp eq i32 %v4_f580, -1
  br i1 %v7_f584, label %dec_label_pc_f4d8.loopexit, label %dec_label_pc_f590

dec_label_pc_f590:                                ; preds = %dec_label_pc_f4f8
  %v2_f590 = call i32 @function_13874(i8* %v2_f174)
  store i32 %v2_f590, i32* @r1, align 4
  %v4_f5a4 = call i32 @function_13bc8(i8* %v2_f174, i32 %v2_f590, i32 %v2_f3b4.pre-phi)
  %v7_f5a8 = icmp eq i32 %v4_f5a4, -1
  br i1 %v7_f5a8, label %dec_label_pc_f4d8.loopexit, label %dec_label_pc_f5b8

dec_label_pc_f5b8:                                ; preds = %dec_label_pc_f590
  %v0_f5b0 = load i32, i32* @r7, align 4
  %v2_f5b8 = inttoptr i32 %v0_f5b0 to i8*
  %v3_f5b8 = call i32 @function_139a0(i8* %v2_f5b8, i32 10)
  %v2_f5c0 = call i32 @function_14334(i32 %v3_f5b8, i32 9)
  %v0_f5c4 = load i32, i32* @sb, align 4
  %v1_f5c8 = inttoptr i32 %v0_f5c4 to i32*
  %v2_f5c8 = call i32 @function_14738(i32* %v1_f5c8)
  store i32 %v2_f5c8, i32* @r6, align 4
  %v2_f5cc = icmp eq i32 %v2_f5c8, 0
  store i32 1, i32* @r5, align 4
  br i1 %v2_f5cc, label %dec_label_pc_f5e0, label %dec_label_pc_f4f0

dec_label_pc_f5e0:                                ; preds = %dec_label_pc_f4d8.loopexit, %dec_label_pc_f5b8, %dec_label_pc_f4f0, %dec_label_pc_f4d8.preheader
  %v0_f5e0 = load i32, i32* @sb, align 4
  %v1_f5e4 = inttoptr i32 %v0_f5e0 to i32*
  %v2_f5e4 = call i32 @function_14588(i32* %v1_f5e4)
  %v0_f5e8 = load i32, i32* @r8, align 4
  %v1_f5ec = inttoptr i32 %v0_f5e8 to i32*
  %v2_f5ec = call i32 @function_14738(i32* %v1_f5ec)
  %v2_f5f0 = icmp eq i32 %v2_f5ec, 0
  br i1 %v2_f5f0, label %dec_label_pc_f5f8, label %dec_label_pc_f3f4

dec_label_pc_f5f8:                                ; preds = %dec_label_pc_f3e4.loopexit, %dec_label_pc_f5e0, %dec_label_pc_f3f4, %dec_label_pc_f3e4.preheader
  %v0_f5f8 = load i32, i32* @r8, align 4
  %v1_f5fc = inttoptr i32 %v0_f5f8 to i32*
  %v2_f5fc = call i32 @function_14588(i32* %v1_f5fc)
  %v0_f600 = load i32, i32* @r5, align 4
  %v1_f600 = urem i32 %v0_f600, 256
  br label %dec_label_pc_f604

dec_label_pc_f604:                                ; preds = %dec_label_pc_f3c4, %dec_label_pc_f5f8
  %storemerge = phi i32 [ %v1_f600, %dec_label_pc_f5f8 ], [ 0, %dec_label_pc_f3c4 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_f608 = call i32 @function_15664(i32 1)
  br label %dec_label_pc_f60c

dec_label_pc_f60c:                                ; preds = %dec_label_pc_f3a8, %dec_label_pc_f604
  %v1_f610 = call i32 @function_12e98(i32 6)
  %v1_f618 = call i32 @function_12e98(i32 7)
  %v1_f620 = call i32 @function_12e98(i32 9)
  br label %dec_label_pc_f624

dec_label_pc_f624:                                ; preds = %dec_label_pc_f1d8, %dec_label_pc_f60c
  %v0_f624 = load i32, i32* @r4, align 4
  %v2_f630 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f630, i32* @r4, align 4
  store i32 %v6_f128, i32* @r5, align 4
  store i32 %v9_f128, i32* @r6, align 4
  store i32 %v12_f128, i32* @r7, align 4
  store i32 %v15_f128, i32* @r8, align 4
  store i32 %v18_f128, i32* @sb, align 4
  store i32 %v21_f128, i32* @sl, align 4
  store i32 %v24_f128, i32* @fp, align 4
  ret i32 %v0_f624

dec_label_pc_f634:                                ; preds = %dec_label_pc_f318
  %v1_f634 = add i32 %v0_f634, 1
  store i32 %v1_f634, i32* @lr, align 4
  %v7_f638 = icmp eq i32 %v0_f634, 0
  br i1 %v7_f638, label %dec_label_pc_f640, label %dec_label_pc_f320

dec_label_pc_f640:                                ; preds = %dec_label_pc_f634
  %v1_f640 = add i32 %v0_f328, 3
  %v2_f640 = inttoptr i32 %v1_f640 to i8*
  %v3_f640 = load i8, i8* %v2_f640, align 1
  %v7_f644 = icmp eq i8 %v3_f640, 65
  br i1 %v7_f644, label %dec_label_pc_f654, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_f640
  br label %dec_label_pc_f2f0.backedge

dec_label_pc_f654:                                ; preds = %dec_label_pc_f640
  store i32 %v1_f634, i32* @r4, align 4
  br label %dec_label_pc_f2f0.backedge

dec_label_pc_f2f0.backedge:                       ; preds = %.thread33, %dec_label_pc_f654, %dec_label_pc_f324
  %v0_f33085 = phi i32 [ %v1_f634, %dec_label_pc_f654 ], [ %v0_f33086, %dec_label_pc_f324 ], [ %v0_f33086, %.thread33 ]
  %v0_f63474 = phi i32 [ %v1_f634, %dec_label_pc_f654 ], [ %v0_f324, %dec_label_pc_f324 ], [ %v1_f634, %.thread33 ]
  %v0_f318.pr71 = phi i32 [ 0, %dec_label_pc_f654 ], [ %v0_f318.pr72, %dec_label_pc_f324 ], [ 0, %.thread33 ]
  %v0_f2f0 = add i32 %v0_f328, 1
  %v1_f2f0 = add i32 %v0_f328, 3
  %v2_f2f0 = inttoptr i32 %v1_f2f0 to i8*
  %v3_f2f0 = load i8, i8* %v2_f2f0, align 1
  %v2_f2f4 = icmp eq i8 %v3_f2f0, 0
  %v1_f2f8 = add i32 %v0_f2f882, 1
  br i1 %v2_f2f4, label %dec_label_pc_f330, label %dec_label_pc_f300

dec_label_pc_f664:                                ; preds = %dec_label_pc_f128
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_f1d8

; uselistorder directives
  uselistorder i32 %v1_f2f8, { 1, 0 }
  uselistorder i8 %v3_f2f0, { 1, 0 }
  uselistorder i32 %v0_f33085, { 1, 0 }
  uselistorder i32 %v1_f634, { 4, 3, 0, 2, 5, 1 }
  uselistorder i32 %v2_f5ec, { 1, 0 }
  uselistorder i32 %v1_f35c, { 1, 0 }
  uselistorder i32 %v0_f36828, { 1, 0 }
  uselistorder i32 %v1_f380, { 0, 3, 1, 2 }
  uselistorder i32 %v0_f324, { 1, 0 }
  uselistorder i32 %v0_f2f882, { 1, 0 }
  uselistorder i32 %v0_f634, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_f33086, { 1, 2, 0 }
  uselistorder i32 %v1_f2f856, { 1, 0 }
  uselistorder i32 %v2_f2dc, { 1, 0 }
  uselistorder i32 %v1_f2d8, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v0_f29413, { 1, 0, 2 }
  uselistorder i32 %v0_f284, { 1, 0 }
  uselistorder i32 %v1_f264, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v4_f1f8, { 1, 2, 0 }
  uselistorder i32 %v2_f150, { 1, 0, 2 }
  uselistorder i32 %v2_f13c, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32)* @function_139a0, { 1, 0, 2, 4, 3 }
  uselistorder i32 ptrtoint ([2 x i8]* @global_var_16b00.23 to i32), { 2, 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_13acc, { 1, 0 }
  uselistorder label %dec_label_pc_f2f0.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_f624, { 1, 0 }
  uselistorder label %dec_label_pc_f60c, { 1, 0 }
  uselistorder label %dec_label_pc_f604, { 1, 0 }
  uselistorder label %dec_label_pc_f5f8, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_f5e0, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_f4f0, { 1, 0 }
  uselistorder label %dec_label_pc_f4f0thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_f4d8.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_f3f4, { 1, 0 }
  uselistorder label %dec_label_pc_f3f4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f3e4.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f37c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f324, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f300, { 1, 0 }
  uselistorder label %dec_label_pc_f2a4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f208.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_f258, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f220, { 1, 0 }
  uselistorder label %dec_label_pc_f1d8, { 1, 0 }
}

define i32 @function_f694(i32 %arg1) local_unnamed_addr {
dec_label_pc_f694:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-4312 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-8408 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-8428 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f694 = load i32, i32* @r4, align 4
  store i32 %v3_f694, i32* %stack_var_-36, align 4
  %v6_f694 = load i32, i32* @r5, align 4
  %v9_f694 = load i32, i32* @r6, align 4
  %v12_f694 = load i32, i32* @r7, align 4
  %v15_f694 = load i32, i32* @r8, align 4
  %v18_f694 = load i32, i32* @sb, align 4
  %v21_f694 = load i32, i32* @sl, align 4
  %v24_f694 = load i32, i32* @fp, align 4
  %v2_f6a4 = call i32 @function_14504(i32* null)
  store i32 %v2_f6a4, i32* @r7, align 4
  %v0_f6ac = call i32 @function_14260()
  %v7_f6b0 = icmp eq i32 %v0_f6ac, -1
  %. = zext i1 %v7_f6b0 to i32
  %tmp212 = icmp slt i32 %v0_f6ac, 1
  %storemerge174 = select i1 %tmp212, i32 %., i32 1
  store i32 %storemerge174, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1f860.100 to i32), i32* %r3.global-to-local, align 4
  %v2_f6cc = icmp eq i32 %storemerge174, 0
  store i32 %v0_f6ac, i32* @global_var_1f860.100, align 4
  br i1 %v2_f6cc, label %dec_label_pc_f6e4, label %dec_label_pc_f6d8

dec_label_pc_f6d8:                                ; preds = %dec_label_pc_f8b0, %dec_label_pc_f798, %dec_label_pc_f694
  %v29_f6e0 = phi i32 [ %v3_f83c, %dec_label_pc_f798 ], [ %v0_f6ac, %dec_label_pc_f694 ], [ 0, %dec_label_pc_f8b0 ]
  %v2_f6e0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f6e0, i32* @r4, align 4
  store i32 %v6_f694, i32* @r5, align 4
  store i32 %v9_f694, i32* @r6, align 4
  store i32 %v12_f694, i32* @r7, align 4
  store i32 %v15_f694, i32* @r8, align 4
  store i32 %v18_f694, i32* @sb, align 4
  store i32 %v21_f694, i32* @sl, align 4
  store i32 %v24_f694, i32* @fp, align 4
  ret i32 %v29_f6e0

dec_label_pc_f6e4:                                ; preds = %dec_label_pc_f694
  %v2_f6e4 = ptrtoint i32* %stack_var_-236 to i32
  store i32 %v2_f6e4, i32* %r1.global-to-local, align 4
  store i32 2, i32* @r6, align 4
  store i32 2, i32* %stack_var_-72, align 4
  %v1_f6fc = call i32 @function_f128(i32 5888)
  store i32 23, i32* %r3.global-to-local, align 4
  %v0_f708 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_f710 = load i32, i32* @r5, align 4
  store i32 %v0_f710, i32* %r2.global-to-local, align 4
  %v3_f71c = call i32 @function_14b30(i32 %v0_f708, i32 1, i32 %v0_f710)
  %v7_f720 = icmp eq i32 %v3_f71c, -1
  store i32 %v3_f71c, i32* @r4, align 4
  br i1 %v7_f720, label %dec_label_pc_f748, label %dec_label_pc_f72c

dec_label_pc_f72c:                                ; preds = %dec_label_pc_f6e4
  %v2_f730 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_f730, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_f738 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v4_f738 = call i32 @function_14960(i32 %v3_f71c, %sockaddr* %v3_f738, i32 16)
  %v0_f73c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_f744 = call i32 @function_14a14(i32 %v0_f73c, i32 1)
  br label %dec_label_pc_f748

dec_label_pc_f748:                                ; preds = %dec_label_pc_f6e4, %dec_label_pc_f72c
  %v1_f74c = call i32 @function_f128(i32 5632)
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_f758 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_f760 = load i32, i32* @r5, align 4
  store i32 %v0_f760, i32* %r2.global-to-local, align 4
  %v3_f76c = call i32 @function_14b30(i32 %v0_f758, i32 1, i32 %v0_f760)
  %v7_f770 = icmp eq i32 %v3_f76c, -1
  store i32 %v3_f76c, i32* @r4, align 4
  br i1 %v7_f770, label %dec_label_pc_f798, label %dec_label_pc_f77c

dec_label_pc_f77c:                                ; preds = %dec_label_pc_f748
  %v2_f780 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_f780, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_f788 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v4_f788 = call i32 @function_14960(i32 %v3_f76c, %sockaddr* %v3_f788, i32 16)
  %v0_f78c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_f794 = call i32 @function_14a14(i32 %v0_f78c, i32 1)
  br label %dec_label_pc_f798

dec_label_pc_f798:                                ; preds = %dec_label_pc_f748, %dec_label_pc_f77c
  %v1_f79c = call i32 @function_15664(i32 5)
  %v1_f7a4 = call i32 @function_14ce0(i32 4096)
  store i32 ptrtoint (i32* @global_var_1f7c4.106 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f85c.108 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_f7a4, i32* %r2.global-to-local, align 4
  %v0_f7b4 = load i32, i32* @r5, align 4
  %v1_f7b4 = trunc i32 %v0_f7b4 to i8
  %v3_f7b4 = inttoptr i32 %v1_f7a4 to i8*
  store i8 %v1_f7b4, i8* %v3_f7b4, align 1
  %v0_f7bc = load i32, i32* @r5, align 4
  %v1_f7bc = load i32, i32* %r3.global-to-local, align 4
  %v2_f7bc = inttoptr i32 %v1_f7bc to i32*
  store i32 %v0_f7bc, i32* %v2_f7bc, align 4
  %v0_f7c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_f7c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_f7c0 = inttoptr i32 %v1_f7c0 to i32*
  store i32 %v0_f7c0, i32* %v2_f7c0, align 4
  %v1_f7c4 = call i32 @function_12f50(i32 6)
  %v1_f7cc = call i32 @function_12f50(i32 7)
  %v0_f7d0 = load i32, i32* @r5, align 4
  store i32 %v0_f7d0, i32* %r1.global-to-local, align 4
  %v2_f7d8 = inttoptr i32 %v0_f7d0 to i32*
  %v3_f7d8 = call i32 @function_12e6c(i32 6, i32* %v2_f7d8)
  %v2_f7e0 = ptrtoint i32* %stack_var_-8408 to i32
  store i32 %v2_f7e0, i32* @r8, align 4
  store i32 %v3_f7d8, i32* %r1.global-to-local, align 4
  store i32 %v2_f7e0, i32* @r0, align 4
  %v2_f7ec = bitcast i32* %stack_var_-8408 to i8*
  %v3_f7ec = call i32 @function_1389c(i8* %v2_f7ec, i32 %v3_f7d8)
  %v0_f7f0 = load i32, i32* @r8, align 4
  %v2_f7f0 = add i32 %v0_f7f0, %v3_f7ec
  store i32 %v2_f7f0, i32* @r4, align 4
  %v0_f7f4 = call i32 @function_1428c()
  %v2_f7fc = ptrtoint i32* %stack_var_-88 to i32
  store i32 %v2_f7fc, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_f804 = trunc i32 %v0_f7f4 to i8
  %v4_f804 = call i32 @function_13d68(i8 %v3_f804, i32 10, i32 %v2_f7fc)
  store i32 %v4_f804, i32* %r1.global-to-local, align 4
  %v0_f80c = load i32, i32* @r4, align 4
  store i32 %v0_f80c, i32* @r0, align 4
  %v2_f810 = inttoptr i32 %v0_f80c to i8*
  %v3_f810 = call i32 @function_1389c(i8* %v2_f810, i32 %v4_f804)
  %v0_f814 = load i32, i32* @r5, align 4
  store i32 %v0_f814, i32* %r1.global-to-local, align 4
  %v0_f818 = load i32, i32* @r4, align 4
  %v2_f818 = add i32 %v0_f818, %v3_f810
  store i32 %v2_f818, i32* @r4, align 4
  %v2_f820 = inttoptr i32 %v0_f814 to i32*
  %v3_f820 = call i32 @function_12e6c(i32 7, i32* %v2_f820)
  store i32 %v3_f820, i32* %r1.global-to-local, align 4
  %v0_f828 = load i32, i32* @r4, align 4
  store i32 %v0_f828, i32* @r0, align 4
  %v2_f82c = inttoptr i32 %v0_f828 to i8*
  %v3_f82c = call i32 @function_1389c(i8* %v2_f82c, i32 %v3_f820)
  %v0_f830 = load i32, i32* @r5, align 4
  store i32 %v0_f830, i32* %r1.global-to-local, align 4
  store i32 %v3_f82c, i32* @r6, align 4
  %v3_f83c = call i32 @function_14360(i8* %v2_f7ec, i32 %v0_f830)
  %v7_f840 = icmp eq i32 %v3_f83c, -1
  br i1 %v7_f840, label %dec_label_pc_f6d8, label %dec_label_pc_f848

dec_label_pc_f848:                                ; preds = %dec_label_pc_f798
  %v1_f848 = call i32 @function_14234(i32 %v3_f83c)
  %v1_f850 = call i32 @function_12e98(i32 6)
  %v1_f858 = call i32 @function_12e98(i32 7)
  store i32 ptrtoint (i32* @global_var_1f85c.108 to i32), i32* %r3.global-to-local, align 4
  %v2_f864 = load i32, i32* @global_var_1f85c.108, align 4
  store i32 %v2_f864, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v4_f870 = call i32 @function_14428(i8* %v2_f7ec, i32 %v2_f864, i32 4095)
  %v7_f874 = icmp eq i32 %v4_f870, -1
  br i1 %v7_f874, label %.thread5.thread, label %bb215

.thread5.thread:                                  ; preds = %dec_label_pc_f848
  %v0_f88054 = load i32, i32* @r4, align 4
  %v1_f88055 = load i32, i32* @r6, align 4
  %v2_f88056 = add i32 %v1_f88055, %v0_f88054
  store i32 %v2_f88056, i32* %r1.global-to-local, align 4
  br label %bb216

bb215:                                            ; preds = %dec_label_pc_f848
  %v3_f87c = load i32, i32* @global_var_1f85c.108, align 4
  store i32 %v3_f87c, i32* %r3.global-to-local, align 4
  %v0_f880 = load i32, i32* @r4, align 4
  %v1_f880 = load i32, i32* @r6, align 4
  %v2_f880 = add i32 %v1_f880, %v0_f880
  store i32 %v2_f880, i32* %r1.global-to-local, align 4
  %v1_f884 = load i32, i32* @r5, align 4
  %v2_f884 = trunc i32 %v1_f884 to i8
  %v5_f884 = add i32 %v3_f87c, %v4_f870
  %v6_f884 = inttoptr i32 %v5_f884 to i8*
  store i8 %v2_f884, i8* %v6_f884, align 1
  %v1_f888.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb216

bb216:                                            ; preds = %.thread5.thread, %bb215
  %v1_f888 = phi i32 [ %v2_f88056, %.thread5.thread ], [ %v1_f888.pre, %bb215 ]
  %v0_f888 = load i32, i32* @r8, align 4
  %v2_f888 = sub i32 %v1_f888, %v0_f888
  store i32 %v2_f888, i32* %r1.global-to-local, align 4
  %v2_f890 = call i32 @function_13914(i32 %v2_f7e0, i32 %v2_f888)
  %v2_f89c = ptrtoint i32* %stack_var_-4312 to i32
  store i32 %v2_f89c, i32* %r1.global-to-local, align 4
  store i32 %v2_f89c, i32* %stack_var_-8428, align 4
  %v0_f8a4 = load i32, i32* @r5, align 4
  %v0_f8a8 = load i32, i32* @r7, align 4
  store i32 %v0_f8a8, i32* @r4, align 4
  store i32 400, i32* @r5, align 4
  %v2_f9a4 = ptrtoint i32* %stack_var_-152 to i32
  %v2_f9a8 = bitcast i32* %stack_var_-152 to i8*
  %v2_f9f4 = ptrtoint i32* %stack_var_-216 to i32
  %v2_f9f8 = bitcast i32* %stack_var_-216 to i8*
  %v2_fb68 = ptrtoint i32* %stack_var_-44 to i32
  %v2_fb78 = ptrtoint i32* %stack_var_-48 to i32
  %v2_fb8c = ptrtoint i32* %stack_var_-52 to i32
  %v2_fba0 = ptrtoint i32* %stack_var_-40 to i32
  %v2_fbb8 = ptrtoint i32* %stack_var_-56 to i32
  %v2_fa70 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_f8b0

dec_label_pc_f8b0:                                ; preds = %dec_label_pc_f968, %bb216
  %stack_var_-8420.0 = phi i32 [ %v0_f8a4, %bb216 ], [ %stack_var_-8420.3, %dec_label_pc_f968 ]
  %v1_f8b4 = call i32 @function_12f50(i32 6)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_f8c0 = call i32 @function_12e6c(i32 6, i32* null)
  store i32 %v3_f8c0, i32* @r0, align 4
  %v1_f8c4 = call i32 @function_1463c(i32 %v3_f8c0)
  store i32 %v1_f8c4, i32* @sl, align 4
  %v2_f8c8 = icmp eq i32 %v1_f8c4, 0
  br i1 %v2_f8c8, label %dec_label_pc_f6d8, label %dec_label_pc_f8d0

dec_label_pc_f8d0:                                ; preds = %dec_label_pc_f8b0
  %v1_f8d4 = call i32 @function_12e98(i32 6)
  %v0_f8d8117 = load i32, i32* @sl, align 4
  %v1_f8dc118 = inttoptr i32 %v0_f8d8117 to i32*
  %v2_f8dc119 = call i32 @function_14738(i32* %v1_f8dc118)
  %v2_f8e0121 = icmp eq i32 %v2_f8dc119, 0
  br i1 %v2_f8e0121, label %dec_label_pc_f968, label %dec_label_pc_f8e8.preheader

dec_label_pc_f8e8.preheader:                      ; preds = %dec_label_pc_f8d0, %dec_label_pc_f8d8.backedge
  %v0_f8e8133 = phi i32 [ %v2_f8dc, %dec_label_pc_f8d8.backedge ], [ %v2_f8dc119, %dec_label_pc_f8d0 ]
  %stack_var_-8420.1122 = phi i32 [ %stack_var_-8420.1.be, %dec_label_pc_f8d8.backedge ], [ %stack_var_-8420.0, %dec_label_pc_f8d0 ]
  br label %dec_label_pc_f8e8

dec_label_pc_f8e8:                                ; preds = %dec_label_pc_f8e8.preheader, %dec_label_pc_f950
  %v0_f8f8 = phi i32 [ %v2_f95c, %dec_label_pc_f950 ], [ %v0_f8e8133, %dec_label_pc_f8e8.preheader ]
  %stack_var_-8420.2 = phi i32 [ %v1_f90c, %dec_label_pc_f950 ], [ %stack_var_-8420.1122, %dec_label_pc_f8e8.preheader ]
  %v1_f8e8 = add i32 %v0_f8f8, 11
  %v2_f8e8 = inttoptr i32 %v1_f8e8 to i8*
  %v3_f8e8 = load i8, i8* %v2_f8e8, align 1
  %v4_f8e8 = zext i8 %v3_f8e8 to i32
  %v1_f8ec = add nsw i32 %v4_f8e8, -48
  store i32 %v1_f8ec, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_f8ec, 9
  br i1 %tmp, label %dec_label_pc_f8d8.backedge, label %dec_label_pc_f8f8

dec_label_pc_f8f8:                                ; preds = %dec_label_pc_f8e8
  store i32 %v1_f8e8, i32* @r6, align 4
  %v2_f900 = call i32 @function_15424(i8* %v2_f8e8)
  %v0_f908 = load i32, i32* @r5, align 4
  %v1_f90c = add i32 %stack_var_-8420.2, 1
  store i32 %v1_f90c, i32* %r2.global-to-local, align 4
  store i32 %v2_f900, i32* @r7, align 4
  %v5_f918 = icmp slt i32 %v0_f908, %v2_f900
  %v2_f978 = call i32 @function_14504(i32* null)
  br i1 %v5_f918, label %dec_label_pc_f974, label %dec_label_pc_f91c

dec_label_pc_f91c:                                ; preds = %dec_label_pc_f8f8
  %v0_f924 = load i32, i32* @r4, align 4
  %v2_f924 = sub i32 %v2_f978, %v0_f924
  %v7_f92c = icmp slt i32 %v2_f924, 601
  br i1 %v7_f92c, label %dec_label_pc_f934, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_f91c
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_f8d8.backedge

dec_label_pc_f934:                                ; preds = %dec_label_pc_f91c
  %v0_f934 = load i32, i32* @r7, align 4
  %v7_f938 = icmp slt i32 %v0_f934, 401
  br i1 %v7_f938, label %dec_label_pc_f8d8.backedge, label %dec_label_pc_f93c

dec_label_pc_f93c:                                ; preds = %dec_label_pc_f934
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_f944 = call i32 @function_13f90(i32 %v1_f90c, i32 10)
  %v2_f948 = icmp eq i32 %v2_f944, 0
  br i1 %v2_f948, label %dec_label_pc_f950, label %dec_label_pc_f8d8.backedge

dec_label_pc_f950:                                ; preds = %dec_label_pc_f93c
  %v1_f954 = call i32 @function_15664(i32 1)
  %v0_f958 = load i32, i32* @sl, align 4
  %v1_f95c = inttoptr i32 %v0_f958 to i32*
  %v2_f95c = call i32 @function_14738(i32* %v1_f95c)
  %v2_f960 = icmp eq i32 %v2_f95c, 0
  br i1 %v2_f960, label %dec_label_pc_f968, label %dec_label_pc_f8e8

dec_label_pc_f968:                                ; preds = %dec_label_pc_f8d8.backedge, %dec_label_pc_f950, %dec_label_pc_f8d0
  %stack_var_-8420.3 = phi i32 [ %stack_var_-8420.0, %dec_label_pc_f8d0 ], [ %v1_f90c, %dec_label_pc_f950 ], [ %stack_var_-8420.1.be, %dec_label_pc_f8d8.backedge ]
  %v0_f968 = load i32, i32* @sl, align 4
  %v1_f96c = inttoptr i32 %v0_f968 to i32*
  %v2_f96c = call i32 @function_14588(i32* %v1_f96c)
  br label %dec_label_pc_f8b0

dec_label_pc_f974:                                ; preds = %dec_label_pc_f8f8
  %v1_f984 = call i32 @function_12f50(i32 6)
  %v1_f98c = call i32 @function_12f50(i32 7)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_f998 = call i32 @function_12e6c(i32 6, i32* null)
  store i32 %v3_f998, i32* %r1.global-to-local, align 4
  store i32 %v2_f9a4, i32* @r0, align 4
  %v3_f9a8 = call i32 @function_1389c(i8* %v2_f9a8, i32 %v3_f998)
  store i32 %v2_f9a4, i32* %r3.global-to-local, align 4
  %v2_f9b4 = add i32 %v3_f9a8, %v2_f9a4
  store i32 %v2_f9b4, i32* %r5.global-to-local, align 4
  %v0_f9b8 = load i32, i32* @r6, align 4
  store i32 %v0_f9b8, i32* %r1.global-to-local, align 4
  store i32 %v2_f9b4, i32* @r0, align 4
  %v2_f9c0 = inttoptr i32 %v2_f9b4 to i8*
  %v3_f9c0 = call i32 @function_1389c(i8* %v2_f9c0, i32 %v0_f9b8)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_f9d0 = call i32 @function_12e6c(i32 7, i32* null)
  store i32 %v3_f9d0, i32* %r1.global-to-local, align 4
  %v0_f9d8 = load i32, i32* %r5.global-to-local, align 4
  %v2_f9d8 = add i32 %v3_f9c0, %v0_f9d8
  store i32 %v2_f9d8, i32* @r0, align 4
  %v2_f9dc = inttoptr i32 %v2_f9d8 to i8*
  %v3_f9dc = call i32 @function_1389c(i8* %v2_f9dc, i32 %v3_f9d0)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_f9e8 = call i32 @function_12e6c(i32 6, i32* null)
  store i32 %v3_f9e8, i32* %r1.global-to-local, align 4
  store i32 %v2_f9f4, i32* @r0, align 4
  %v3_f9f8 = call i32 @function_1389c(i8* %v2_f9f8, i32 %v3_f9e8)
  %v2_fa04 = add i32 %v3_f9f8, %v2_f9f4
  store i32 %v2_fa04, i32* @r5, align 4
  %v0_fa08 = load i32, i32* @r6, align 4
  store i32 %v0_fa08, i32* %r1.global-to-local, align 4
  store i32 %v2_fa04, i32* @r0, align 4
  %v2_fa10 = inttoptr i32 %v2_fa04 to i8*
  %v3_fa10 = call i32 @function_1389c(i8* %v2_fa10, i32 %v0_fa08)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_fa10, i32* @r4, align 4
  %v3_fa20 = call i32 @function_12e6c(i32 11, i32* null)
  store i32 %v3_fa20, i32* %r1.global-to-local, align 4
  %v0_fa28 = load i32, i32* @r5, align 4
  %v1_fa28 = load i32, i32* @r4, align 4
  %v2_fa28 = add i32 %v1_fa28, %v0_fa28
  store i32 %v2_fa28, i32* @r0, align 4
  %v2_fa2c = inttoptr i32 %v2_fa28 to i8*
  %v3_fa2c = call i32 @function_1389c(i8* %v2_fa2c, i32 %v3_fa20)
  %v1_fa34 = call i32 @function_12e98(i32 6)
  %v1_fa3c = call i32 @function_12e98(i32 7)
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_fa50 = load i32, i32* %stack_var_-8428, align 4
  store i32 %v2_fa50, i32* %r1.global-to-local, align 4
  %v4_fa54 = call i32 @function_14428(i8* %v2_f9a8, i32 %v2_fa50, i32 4095)
  %v7_fa5c = icmp eq i32 %v4_fa54, -1
  store i32 %v4_fa54, i32* @r5, align 4
  store i32 -4276, i32* @r2, align 4
  br i1 %v7_fa5c, label %dec_label_pc_fb24, label %dec_label_pc_fa6c

dec_label_pc_fa6c:                                ; preds = %dec_label_pc_f974
  store i32 %v2_fa70, i32* %r1.global-to-local, align 4
  %v2_fa74 = add i32 %v4_fa54, %v2_fa70
  store i32 %v2_fa74, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_fa7c = add i32 %v2_fa74, -4276
  %v5_fa7c = inttoptr i32 %v4_fa7c to i8*
  store i8 0, i8* %v5_fa7c, align 1
  %v1_fa84 = call i32 @function_12f50(i32 10)
  %v0_fa88 = load i32, i32* @r4, align 4
  store i32 %v0_fa88, i32* %r1.global-to-local, align 4
  %v2_fa90 = inttoptr i32 %v0_fa88 to i32*
  %v3_fa90 = call i32 @function_12e6c(i32 10, i32* %v2_fa90)
  %v0_fa94 = load i32, i32* @r5, align 4
  %v1_fa94 = add i32 %v0_fa94, -1
  store i32 %v1_fa94, i32* @r1, align 4
  store i32 %v3_fa90, i32* %r2.global-to-local, align 4
  %v2_fa9c = load i32, i32* %stack_var_-8428, align 4
  %v3_faa0 = inttoptr i32 %v2_fa9c to i8*
  %v4_faa0 = call i32 @function_13bc8(i8* %v3_faa0, i32 %v1_fa94, i32 %v3_fa90)
  %v7_faa4 = icmp eq i32 %v4_faa0, -1
  br i1 %v7_faa4, label %dec_label_pc_fac0, label %dec_label_pc_faac

dec_label_pc_faac:                                ; preds = %dec_label_pc_fa6c
  %v2_faac = load i32, i32* %stack_var_-8428, align 4
  %v1_fab0 = inttoptr i32 %v2_faac to i8*
  %v2_fab0 = call i32 @function_14530(i8* %v1_fab0)
  %v0_fab4 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_fabc = call i32 @function_14334(i32 %v0_fab4, i32 9)
  br label %dec_label_pc_fac0

dec_label_pc_fac0:                                ; preds = %dec_label_pc_fa6c, %dec_label_pc_faac
  %v1_fac4 = call i32 @function_12e98(i32 10)
  %v0_fac8 = call i32 @function_1428c()
  %v0_facc = load i32, i32* @r7, align 4
  %v9_facc = icmp eq i32 %v0_facc, %v0_fac8
  br i1 %v9_facc, label %dec_label_pc_faf8, label %dec_label_pc_fad4

dec_label_pc_fad4:                                ; preds = %dec_label_pc_fac0
  %v0_fad4 = call i32 @function_142b8()
  %v0_fad8 = load i32, i32* @r7, align 4
  %v9_fad8 = icmp eq i32 %v0_fad8, %v0_fad4
  br i1 %v9_fad8, label %dec_label_pc_faf8, label %dec_label_pc_fae0

dec_label_pc_fae0:                                ; preds = %dec_label_pc_fad4
  store i32 ptrtoint (i32* @global_var_1f85c.108 to i32), i32* %r2.global-to-local, align 4
  %v2_fae4 = load i32, i32* %stack_var_-8428, align 4
  %v2_fae8 = load i32, i32* @global_var_1f85c.108, align 4
  store i32 %v2_fae8, i32* %r1.global-to-local, align 4
  %v2_faec = inttoptr i32 %v2_fae4 to i8*
  %v3_faec = call i32 @function_13c54(i8* %v2_faec, i32 %v2_fae8)
  %v2_faf0 = icmp eq i32 %v3_faec, 0
  br i1 %v2_faf0, label %dec_label_pc_fb04, label %dec_label_pc_fae0.dec_label_pc_faf8_crit_edge

dec_label_pc_fae0.dec_label_pc_faf8_crit_edge:    ; preds = %dec_label_pc_fae0
  %v0_fafc.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_faf8

dec_label_pc_faf8:                                ; preds = %dec_label_pc_fae0.dec_label_pc_faf8_crit_edge, %dec_label_pc_fad4, %dec_label_pc_fac0
  %v0_fafc = phi i32 [ %v0_fafc.pre, %dec_label_pc_fae0.dec_label_pc_faf8_crit_edge ], [ %v0_fad4, %dec_label_pc_fad4 ], [ %v0_fac8, %dec_label_pc_fac0 ]
  store i32 %v2_f978, i32* @r4, align 4
  store i32 %v0_fafc, i32* @r5, align 4
  br label %dec_label_pc_f8d8.backedge

dec_label_pc_f8d8.backedge:                       ; preds = %dec_label_pc_f93c, %dec_label_pc_f934, %dec_label_pc_f8e8, %dec_label_pc_faf8, %dec_label_pc_fda8, %.thread11
  %stack_var_-8420.1.be = phi i32 [ %v1_f90c, %dec_label_pc_fda8 ], [ %v1_f90c, %dec_label_pc_faf8 ], [ %v1_f90c, %.thread11 ], [ %stack_var_-8420.2, %dec_label_pc_f8e8 ], [ %v1_f90c, %dec_label_pc_f934 ], [ %v1_f90c, %dec_label_pc_f93c ]
  %v0_f8d8 = load i32, i32* @sl, align 4
  %v1_f8dc = inttoptr i32 %v0_f8d8 to i32*
  %v2_f8dc = call i32 @function_14738(i32* %v1_f8dc)
  %v2_f8e0 = icmp eq i32 %v2_f8dc, 0
  br i1 %v2_f8e0, label %dec_label_pc_f968, label %dec_label_pc_f8e8.preheader

dec_label_pc_fb04:                                ; preds = %dec_label_pc_fae0
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_fb08 = load i32, i32* %stack_var_-8428, align 4
  %v2_fb0c = inttoptr i32 %v2_fb08 to i8*
  %v3_fb0c = call i32 @function_14360(i8* %v2_fb0c, i32 0)
  %v7_fb10 = icmp eq i32 %v3_fb0c, -1
  store i32 %v3_fb0c, i32* @r4, align 4
  br i1 %v7_fb10, label %dec_label_pc_fddc, label %dec_label_pc_fb1c

dec_label_pc_fb1c:                                ; preds = %dec_label_pc_fb04, %dec_label_pc_fddc
  %v0_fb1c = phi i32 [ %v3_fb0c, %dec_label_pc_fb04 ], [ %v0_fb1c.pre, %dec_label_pc_fddc ]
  %v1_fb20 = call i32 @function_14234(i32 %v0_fb1c)
  br label %dec_label_pc_fb24

dec_label_pc_fb24:                                ; preds = %dec_label_pc_f974, %dec_label_pc_fb1c
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_fb30 = call i32 @function_14360(i8* %v2_f9a8, i32 0)
  %v7_fb34 = icmp eq i32 %v3_fb30, -1
  br i1 %v7_fb34, label %dec_label_pc_fda8, label %dec_label_pc_fb40

dec_label_pc_fb40:                                ; preds = %dec_label_pc_fb24
  %v1_fb44 = call i32 @function_12f50(i32 12)
  %v1_fb4c = call i32 @function_12f50(i32 13)
  %v1_fb54 = call i32 @function_12f50(i32 14)
  %v1_fb5c = call i32 @function_12f50(i32 15)
  %v1_fb64 = call i32 @function_12f50(i32 16)
  store i32 %v2_fb68, i32* %r1.global-to-local, align 4
  %v3_fb70 = call i32 @function_12e6c(i32 12, i32* nonnull %stack_var_-44)
  store i32 %v2_fb78, i32* %r1.global-to-local, align 4
  store i32 %v3_fb70, i32* @r5, align 4
  %v3_fb84 = call i32 @function_12e6c(i32 13, i32* nonnull %stack_var_-48)
  store i32 %v2_fb8c, i32* %r1.global-to-local, align 4
  store i32 %v3_fb84, i32* @r6, align 4
  %v3_fb98 = call i32 @function_12e6c(i32 14, i32* nonnull %stack_var_-52)
  store i32 %v2_fba0, i32* %r1.global-to-local, align 4
  store i32 %v3_fb98, i32* @sb, align 4
  %v3_fbac = call i32 @function_12e6c(i32 15, i32* nonnull %stack_var_-40)
  store i32 %v3_fbac, i32* @fp, align 4
  store i32 %v2_fbb8, i32* %r1.global-to-local, align 4
  %v3_fbc0 = call i32 @function_12e6c(i32 16, i32* nonnull %stack_var_-56)
  store i32 %v2_f7e0, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_fbd4114 = call i32 @function_143fc(i32 %v3_fb30, i32* nonnull %stack_var_-8408, i32 4096)
  %tmp217 = icmp slt i32 %v4_fbd4114, 1
  br i1 %tmp217, label %dec_label_pc_fdec, label %dec_label_pc_fbe0

dec_label_pc_fbe0:                                ; preds = %dec_label_pc_fb40, %dec_label_pc_fbc8.backedge
  %v0_fc68105 = phi i32 [ %v4_fbd4, %dec_label_pc_fbc8.backedge ], [ %v4_fbd4114, %dec_label_pc_fb40 ]
  store i32 %v2_f6e4, i32* %r3.global-to-local, align 4
  %v3_fbe4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_fbe4, i32* @r4, align 4
  %v5_fbec = icmp slt i32 %v0_fc68105, %v3_fbe4
  br i1 %v5_fbec, label %dec_label_pc_fbfc, label %dec_label_pc_fca8.lr.ph

dec_label_pc_fca8.lr.ph:                          ; preds = %dec_label_pc_fbe0
  %v1_fca070 = add i32 %v0_fc68105, -1
  store i32 %v1_fca070, i32* %r1.global-to-local, align 4
  %v0_fca8.pre = load i32, i32* @r5, align 4
  %v1_fcac.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_fca8

dec_label_pc_fbfc:                                ; preds = %dec_label_pc_fca0.backedge, %dec_label_pc_fbe0
  %v3_fc00 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_fc00, i32* @r4, align 4
  %v5_fc08 = icmp slt i32 %v0_fc68105, %v3_fc00
  br i1 %v5_fc08, label %dec_label_pc_fc18, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_fbfc
  %v1_fcd479 = add i32 %v0_fc68105, -1
  store i32 %v1_fcd479, i32* %r1.global-to-local, align 4
  %v2_fcd480 = icmp eq i32 %v0_fc68105, 0
  br i1 %v2_fcd480, label %dec_label_pc_fc18, label %dec_label_pc_fcdc.lr.ph

dec_label_pc_fcdc.lr.ph:                          ; preds = %.thread28
  %v0_fcdc.pre = load i32, i32* @r6, align 4
  %v1_fce0.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_fcdc

dec_label_pc_fc18:                                ; preds = %dec_label_pc_fcd4.backedge, %.thread28, %dec_label_pc_fbfc
  store i32 %v2_f6e4, i32* %r1.global-to-local, align 4
  %v3_fc1c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_fc1c, i32* @r4, align 4
  %v5_fc24 = icmp slt i32 %v0_fc68105, %v3_fc1c
  br i1 %v5_fc24, label %dec_label_pc_fc34, label %.thread37

.thread37:                                        ; preds = %dec_label_pc_fc18
  %v1_fd0888 = add i32 %v0_fc68105, -1
  store i32 %v1_fd0888, i32* %r1.global-to-local, align 4
  %v2_fd0889 = icmp eq i32 %v0_fc68105, 0
  br i1 %v2_fd0889, label %dec_label_pc_fc34, label %dec_label_pc_fd10.lr.ph

dec_label_pc_fd10.lr.ph:                          ; preds = %.thread37
  %v0_fd10.pre = load i32, i32* @sb, align 4
  %v1_fd14.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_fd10

dec_label_pc_fc34:                                ; preds = %dec_label_pc_fd08.backedge, %.thread37, %dec_label_pc_fc18
  store i32 %v2_f6e4, i32* %r2.global-to-local, align 4
  %v3_fc38 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_fc38, i32* @r4, align 4
  %v5_fc40 = icmp slt i32 %v0_fc68105, %v3_fc38
  br i1 %v5_fc40, label %dec_label_pc_fc50, label %.thread46

.thread46:                                        ; preds = %dec_label_pc_fc34
  %v1_fd3c97 = add i32 %v0_fc68105, -1
  store i32 %v1_fd3c97, i32* %r1.global-to-local, align 4
  %v2_fd3c98 = icmp eq i32 %v0_fc68105, 0
  br i1 %v2_fd3c98, label %dec_label_pc_fc50, label %dec_label_pc_fd44.lr.ph

dec_label_pc_fd44.lr.ph:                          ; preds = %.thread46
  %v0_fd44.pre = load i32, i32* @fp, align 4
  %v1_fd48.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_fd44

dec_label_pc_fc50:                                ; preds = %dec_label_pc_fd3c.backedge, %.thread46, %dec_label_pc_fc34
  store i32 %v2_f6e4, i32* %r3.global-to-local, align 4
  %v3_fc54 = load i32, i32* %stack_var_-56, align 4
  %v5_fc5c = icmp slt i32 %v0_fc68105, %v3_fc54
  br i1 %v5_fc5c, label %dec_label_pc_fbc8.backedge, label %.thread52

dec_label_pc_fbc8.backedge:                       ; preds = %dec_label_pc_fc8c, %.thread52, %dec_label_pc_fc50
  store i32 %v2_f7e0, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_fbd4 = call i32 @function_143fc(i32 %v3_fb30, i32* nonnull %stack_var_-8408, i32 4096)
  %tmp218 = icmp slt i32 %v4_fbd4, 1
  br i1 %tmp218, label %dec_label_pc_fdec, label %dec_label_pc_fbe0

.thread52:                                        ; preds = %dec_label_pc_fc50
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_fc68107 = icmp eq i32 %v0_fc68105, 0
  br i1 %v2_fc68107, label %dec_label_pc_fbc8.backedge, label %dec_label_pc_fc70.lr.ph

dec_label_pc_fc70.lr.ph:                          ; preds = %.thread52
  %v1_fc78.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_fc70

dec_label_pc_fc70:                                ; preds = %dec_label_pc_fc8c, %dec_label_pc_fc70.lr.ph
  %v0_fc68.in = phi i32 [ %v0_fc68105, %dec_label_pc_fc70.lr.ph ], [ %v0_fc68, %dec_label_pc_fc8c ]
  %v0_fc8c = phi i32 [ 0, %dec_label_pc_fc70.lr.ph ], [ %v1_fc8c, %dec_label_pc_fc8c ]
  %v0_fc80 = phi i32 [ 0, %dec_label_pc_fc70.lr.ph ], [ %v1_fc80., %dec_label_pc_fc8c ]
  %v0_fc68 = add i32 %v0_fc68.in, -1
  store i32 %v3_fbc0, i32* %r3.global-to-local, align 4
  %v2_fc74 = add i32 %v0_fc80, %v3_fbc0
  %v3_fc74 = inttoptr i32 %v2_fc74 to i8*
  %v4_fc74 = load i8, i8* %v3_fc74, align 1
  %v6_fc74 = zext i8 %v4_fc74 to i32
  store i32 %v6_fc74, i32* %r2.global-to-local, align 4
  %v2_fc78 = add i32 %v0_fc8c, %v1_fc78.pre
  %v3_fc78 = inttoptr i32 %v2_fc78 to i8*
  %v4_fc78 = load i8, i8* %v3_fc78, align 1
  %v6_fc78 = zext i8 %v4_fc78 to i32
  store i32 %v6_fc78, i32* %r3.global-to-local, align 4
  %v9_fc7c = icmp eq i8 %v4_fc78, %v4_fc74
  %v1_fc80 = add i32 %v0_fc80, 1
  %v1_fc80. = select i1 %v9_fc7c, i32 %v1_fc80, i32 0
  store i32 %v1_fc80., i32* %r1.global-to-local, align 4
  br i1 %v9_fc7c, label %dec_label_pc_fd64, label %dec_label_pc_fc8c

dec_label_pc_fc8c:                                ; preds = %dec_label_pc_fd64, %dec_label_pc_fc70
  %v1_fc8c = add i32 %v0_fc8c, 1
  %v2_fc68 = icmp eq i32 %v0_fc68, 0
  br i1 %v2_fc68, label %dec_label_pc_fbc8.backedge, label %dec_label_pc_fc70

dec_label_pc_fc94:                                ; preds = %dec_label_pc_fca8
  %v9_fc94 = icmp eq i32 %v3_fbe4, %v1_fcb4.
  br i1 %v9_fc94, label %dec_label_pc_fd6c, label %dec_label_pc_fca0.backedge

dec_label_pc_fca0.backedge:                       ; preds = %dec_label_pc_fca8, %dec_label_pc_fc94
  %storemerge125 = add i32 %storemerge125.in, 1
  %v1_fca0 = add i32 %v0_fca0, -1
  store i32 %v1_fca0, i32* %r1.global-to-local, align 4
  %v2_fca0 = icmp eq i32 %v0_fca0, 0
  br i1 %v2_fca0, label %dec_label_pc_fbfc, label %dec_label_pc_fca8

dec_label_pc_fca8:                                ; preds = %dec_label_pc_fca0.backedge, %dec_label_pc_fca8.lr.ph
  %v0_fca0 = phi i32 [ %v1_fca070, %dec_label_pc_fca8.lr.ph ], [ %v1_fca0, %dec_label_pc_fca0.backedge ]
  %storemerge125.in = phi i32 [ 0, %dec_label_pc_fca8.lr.ph ], [ %storemerge125, %dec_label_pc_fca0.backedge ]
  %v0_fcb4 = phi i32 [ 0, %dec_label_pc_fca8.lr.ph ], [ %v1_fcb4., %dec_label_pc_fca0.backedge ]
  %v2_fca8 = add i32 %v0_fcb4, %v0_fca8.pre
  %v3_fca8 = inttoptr i32 %v2_fca8 to i8*
  %v4_fca8 = load i8, i8* %v3_fca8, align 1
  %v6_fca8 = zext i8 %v4_fca8 to i32
  store i32 %v6_fca8, i32* %r2.global-to-local, align 4
  %v2_fcac = add i32 %storemerge125.in, %v1_fcac.pre
  %v3_fcac = inttoptr i32 %v2_fcac to i8*
  %v4_fcac = load i8, i8* %v3_fcac, align 1
  %v6_fcac = zext i8 %v4_fcac to i32
  store i32 %v6_fcac, i32* %r3.global-to-local, align 4
  %v9_fcb0 = icmp eq i8 %v4_fcac, %v4_fca8
  %v1_fcb4 = add i32 %v0_fcb4, 1
  %v1_fcb4. = select i1 %v9_fcb0, i32 %v1_fcb4, i32 0
  br i1 %v9_fcb0, label %dec_label_pc_fc94, label %dec_label_pc_fca0.backedge

dec_label_pc_fcc8:                                ; preds = %dec_label_pc_fcdc
  %v9_fcc8 = icmp eq i32 %v3_fc00, %v1_fce8.
  br i1 %v9_fcc8, label %dec_label_pc_fd6c, label %dec_label_pc_fcd4.backedge

dec_label_pc_fcd4.backedge:                       ; preds = %dec_label_pc_fcdc, %dec_label_pc_fcc8
  %storemerge124 = add i32 %storemerge124.in, 1
  %v1_fcd4 = add i32 %v0_fcd4, -1
  store i32 %v1_fcd4, i32* %r1.global-to-local, align 4
  %v2_fcd4 = icmp eq i32 %v0_fcd4, 0
  br i1 %v2_fcd4, label %dec_label_pc_fc18, label %dec_label_pc_fcdc

dec_label_pc_fcdc:                                ; preds = %dec_label_pc_fcd4.backedge, %dec_label_pc_fcdc.lr.ph
  %v0_fcd4 = phi i32 [ %v1_fcd479, %dec_label_pc_fcdc.lr.ph ], [ %v1_fcd4, %dec_label_pc_fcd4.backedge ]
  %storemerge124.in = phi i32 [ 0, %dec_label_pc_fcdc.lr.ph ], [ %storemerge124, %dec_label_pc_fcd4.backedge ]
  %v0_fce8 = phi i32 [ 0, %dec_label_pc_fcdc.lr.ph ], [ %v1_fce8., %dec_label_pc_fcd4.backedge ]
  %v2_fcdc = add i32 %v0_fce8, %v0_fcdc.pre
  %v3_fcdc = inttoptr i32 %v2_fcdc to i8*
  %v4_fcdc = load i8, i8* %v3_fcdc, align 1
  %v6_fcdc = zext i8 %v4_fcdc to i32
  store i32 %v6_fcdc, i32* %r2.global-to-local, align 4
  %v2_fce0 = add i32 %storemerge124.in, %v1_fce0.pre
  %v3_fce0 = inttoptr i32 %v2_fce0 to i8*
  %v4_fce0 = load i8, i8* %v3_fce0, align 1
  %v6_fce0 = zext i8 %v4_fce0 to i32
  store i32 %v6_fce0, i32* %r3.global-to-local, align 4
  %v9_fce4 = icmp eq i8 %v4_fce0, %v4_fcdc
  %v1_fce8 = add i32 %v0_fce8, 1
  %v1_fce8. = select i1 %v9_fce4, i32 %v1_fce8, i32 0
  br i1 %v9_fce4, label %dec_label_pc_fcc8, label %dec_label_pc_fcd4.backedge

dec_label_pc_fcfc:                                ; preds = %dec_label_pc_fd10
  %v9_fcfc = icmp eq i32 %v3_fc1c, %v1_fd1c.
  br i1 %v9_fcfc, label %dec_label_pc_fd6c, label %dec_label_pc_fd08.backedge

dec_label_pc_fd08.backedge:                       ; preds = %dec_label_pc_fd10, %dec_label_pc_fcfc
  %storemerge123 = add i32 %storemerge123.in, 1
  %v1_fd08 = add i32 %v0_fd08, -1
  store i32 %v1_fd08, i32* %r1.global-to-local, align 4
  %v2_fd08 = icmp eq i32 %v0_fd08, 0
  br i1 %v2_fd08, label %dec_label_pc_fc34, label %dec_label_pc_fd10

dec_label_pc_fd10:                                ; preds = %dec_label_pc_fd08.backedge, %dec_label_pc_fd10.lr.ph
  %v0_fd08 = phi i32 [ %v1_fd0888, %dec_label_pc_fd10.lr.ph ], [ %v1_fd08, %dec_label_pc_fd08.backedge ]
  %storemerge123.in = phi i32 [ 0, %dec_label_pc_fd10.lr.ph ], [ %storemerge123, %dec_label_pc_fd08.backedge ]
  %v0_fd1c = phi i32 [ 0, %dec_label_pc_fd10.lr.ph ], [ %v1_fd1c., %dec_label_pc_fd08.backedge ]
  %v2_fd10 = add i32 %v0_fd1c, %v0_fd10.pre
  %v3_fd10 = inttoptr i32 %v2_fd10 to i8*
  %v4_fd10 = load i8, i8* %v3_fd10, align 1
  %v6_fd10 = zext i8 %v4_fd10 to i32
  store i32 %v6_fd10, i32* %r2.global-to-local, align 4
  %v2_fd14 = add i32 %storemerge123.in, %v1_fd14.pre
  %v3_fd14 = inttoptr i32 %v2_fd14 to i8*
  %v4_fd14 = load i8, i8* %v3_fd14, align 1
  %v6_fd14 = zext i8 %v4_fd14 to i32
  store i32 %v6_fd14, i32* %r3.global-to-local, align 4
  %v9_fd18 = icmp eq i8 %v4_fd14, %v4_fd10
  %v1_fd1c = add i32 %v0_fd1c, 1
  %v1_fd1c. = select i1 %v9_fd18, i32 %v1_fd1c, i32 0
  br i1 %v9_fd18, label %dec_label_pc_fcfc, label %dec_label_pc_fd08.backedge

dec_label_pc_fd30:                                ; preds = %dec_label_pc_fd44
  %v9_fd30 = icmp eq i32 %v3_fc38, %v1_fd50.
  br i1 %v9_fd30, label %dec_label_pc_fd6c, label %dec_label_pc_fd3c.backedge

dec_label_pc_fd3c.backedge:                       ; preds = %dec_label_pc_fd44, %dec_label_pc_fd30
  %storemerge = add i32 %storemerge.in, 1
  %v1_fd3c = add i32 %v0_fd3c, -1
  store i32 %v1_fd3c, i32* %r1.global-to-local, align 4
  %v2_fd3c = icmp eq i32 %v0_fd3c, 0
  br i1 %v2_fd3c, label %dec_label_pc_fc50, label %dec_label_pc_fd44

dec_label_pc_fd44:                                ; preds = %dec_label_pc_fd3c.backedge, %dec_label_pc_fd44.lr.ph
  %v0_fd3c = phi i32 [ %v1_fd3c97, %dec_label_pc_fd44.lr.ph ], [ %v1_fd3c, %dec_label_pc_fd3c.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_fd44.lr.ph ], [ %storemerge, %dec_label_pc_fd3c.backedge ]
  %v0_fd50 = phi i32 [ 0, %dec_label_pc_fd44.lr.ph ], [ %v1_fd50., %dec_label_pc_fd3c.backedge ]
  %v2_fd44 = add i32 %v0_fd50, %v0_fd44.pre
  %v3_fd44 = inttoptr i32 %v2_fd44 to i8*
  %v4_fd44 = load i8, i8* %v3_fd44, align 1
  %v6_fd44 = zext i8 %v4_fd44 to i32
  store i32 %v6_fd44, i32* %r2.global-to-local, align 4
  %v2_fd48 = add i32 %storemerge.in, %v1_fd48.pre
  %v3_fd48 = inttoptr i32 %v2_fd48 to i8*
  %v4_fd48 = load i8, i8* %v3_fd48, align 1
  %v6_fd48 = zext i8 %v4_fd48 to i32
  store i32 %v6_fd48, i32* %r3.global-to-local, align 4
  %v9_fd4c = icmp eq i8 %v4_fd48, %v4_fd44
  %v1_fd50 = add i32 %v0_fd50, 1
  %v1_fd50. = select i1 %v9_fd4c, i32 %v1_fd50, i32 0
  br i1 %v9_fd4c, label %dec_label_pc_fd30, label %dec_label_pc_fd3c.backedge

dec_label_pc_fd64:                                ; preds = %dec_label_pc_fc70
  %v9_fd64 = icmp eq i32 %v3_fc54, %v1_fc80.
  br i1 %v9_fd64, label %dec_label_pc_fd6c, label %dec_label_pc_fc8c

dec_label_pc_fd6c:                                ; preds = %dec_label_pc_fc94, %dec_label_pc_fcc8, %dec_label_pc_fcfc, %dec_label_pc_fd30, %dec_label_pc_fd64
  %v1_fd70 = call i32 @function_12e98(i32 12)
  %v1_fd78 = call i32 @function_12e98(i32 13)
  %v1_fd80 = call i32 @function_12e98(i32 14)
  %v1_fd88 = call i32 @function_12e98(i32 15)
  %v1_fd90 = call i32 @function_12e98(i32 16)
  %v1_fd98 = call i32 @function_14234(i32 %v3_fb30)
  %v0_fd9c = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_fda4 = call i32 @function_14334(i32 %v0_fd9c, i32 9)
  br label %dec_label_pc_fda8

dec_label_pc_fda8:                                ; preds = %dec_label_pc_fb24, %dec_label_pc_fdec, %dec_label_pc_fd6c
  store i32 64, i32* %r1.global-to-local, align 4
  %v2_fdb4 = call i32 @function_13914(i32 %v2_f9a4, i32 64)
  store i32 64, i32* %r1.global-to-local, align 4
  %v2_fdc4 = call i32 @function_13914(i32 %v2_f9f4, i32 64)
  %v1_fdcc = call i32 @function_15664(i32 1)
  store i32 %v2_f978, i32* @r4, align 4
  %v0_fdd4 = load i32, i32* @r7, align 4
  store i32 %v0_fdd4, i32* @r5, align 4
  br label %dec_label_pc_f8d8.backedge

dec_label_pc_fddc:                                ; preds = %dec_label_pc_fb04
  %v0_fddc = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_fde4 = call i32 @function_14334(i32 %v0_fddc, i32 9)
  %v0_fb1c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_fb1c

dec_label_pc_fdec:                                ; preds = %dec_label_pc_fbc8.backedge, %dec_label_pc_fb40
  %v1_fdf0 = call i32 @function_12e98(i32 12)
  %v1_fdf8 = call i32 @function_12e98(i32 13)
  %v1_fe00 = call i32 @function_12e98(i32 14)
  %v1_fe08 = call i32 @function_12e98(i32 15)
  %v1_fe10 = call i32 @function_12e98(i32 16)
  %v1_fe18 = call i32 @function_14234(i32 %v3_fb30)
  br label %dec_label_pc_fda8

; uselistorder directives
  uselistorder i32 %v1_fd50., { 1, 0 }
  uselistorder i1 %v9_fd4c, { 1, 0 }
  uselistorder i32 %v0_fd50, { 1, 0 }
  uselistorder i32 %v1_fd1c., { 1, 0 }
  uselistorder i1 %v9_fd18, { 1, 0 }
  uselistorder i32 %v0_fd1c, { 1, 0 }
  uselistorder i32 %v1_fce8., { 1, 0 }
  uselistorder i1 %v9_fce4, { 1, 0 }
  uselistorder i32 %v0_fce8, { 1, 0 }
  uselistorder i32 %v1_fcb4., { 1, 0 }
  uselistorder i1 %v9_fcb0, { 1, 0 }
  uselistorder i32 %v0_fcb4, { 1, 0 }
  uselistorder i32 %v1_fc80., { 1, 2, 0 }
  uselistorder i1 %v9_fc7c, { 1, 0 }
  uselistorder i32 %v0_fc80, { 1, 0 }
  uselistorder i32 %v0_fc8c, { 1, 0 }
  uselistorder i32 %v4_fbd4, { 1, 0 }
  uselistorder i32 %v3_fb30, { 3, 2, 4, 1, 0 }
  uselistorder i32 %v3_fb0c, { 1, 2, 0 }
  uselistorder i32 %v2_f8dc, { 1, 0 }
  uselistorder i32 %stack_var_-8420.1.be, { 1, 0 }
  uselistorder i32 %v4_fa54, { 1, 2, 0 }
  uselistorder i32 %v2_f95c, { 1, 0 }
  uselistorder i32 %v1_f90c, { 0, 1, 5, 4, 3, 2, 7, 8, 6 }
  uselistorder i32 %stack_var_-8420.0, { 1, 0 }
  uselistorder i32 %v2_f9f4, { 1, 0, 2 }
  uselistorder i32 %v2_f9a4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_f870, { 1, 0 }
  uselistorder i32 %v3_f83c, { 2, 0, 1 }
  uselistorder i32 %v2_f7e0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v3_f76c, { 2, 1, 0 }
  uselistorder i32 %v3_f71c, { 1, 2, 0 }
  uselistorder i32 %storemerge174, { 1, 0 }
  uselistorder i32 %v0_f6ac, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-72, { 0, 3, 1, 4, 2 }
  uselistorder i32* %stack_var_-8408, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %stack_var_-40, { 1, 0, 2 }
  uselistorder i32* %stack_var_-56, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* %r1.global-to-local, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 61, 15, 3, 2, 14, 1, 0, 4, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 30, 29, 31, 32, 33, 35, 34, 36, 37, 38, 40, 39, 41, 42, 43, 62, 44, 45, 46, 47, 49, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 }
  uselistorder i32 (i8*, i32, i32)* @function_13bc8, { 0, 1, 2, 3, 4, 5, 6, 21, 22, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32 (i32*)* @function_14738, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_1463c, { 2, 1, 0 }
  uselistorder i32* @global_var_1f85c.108, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_1f860.100, { 0, 2, 1 }
  uselistorder label %dec_label_pc_fda8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fd6c, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_fbe0, { 1, 0 }
  uselistorder label %dec_label_pc_fb24, { 1, 0 }
  uselistorder label %dec_label_pc_fb1c, { 1, 0 }
  uselistorder label %dec_label_pc_f8d8.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_fac0, { 1, 0 }
  uselistorder label %dec_label_pc_f8e8, { 1, 0 }
  uselistorder label %dec_label_pc_f8e8.preheader, { 1, 0 }
  uselistorder label %bb216, { 1, 0 }
  uselistorder label %dec_label_pc_f798, { 1, 0 }
  uselistorder label %dec_label_pc_f748, { 1, 0 }
}

define i32 @function_fe2c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_fe2c:
  store i32 ptrtoint (i32* @global_var_ffb4.110 to i32), i32* @global_var_1f630.112, align 4
  ret i32 %arg1
}

define i32 @function_fe44() local_unnamed_addr {
dec_label_pc_fe44:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_fe44 = load i32, i32* @r4, align 4
  %v9_fe44 = load i32, i32* @r6, align 4
  %v15_fe44 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_fe60 = call i32 @function_14b30(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1f628.115 to i32), i32* @r6, align 4
  %v7_fe68 = icmp eq i32 %v3_fe60, -1
  store i32 %v3_fe60, i32* @global_var_1f628.115, align 4
  br i1 %v7_fe68, label %dec_label_pc_ff28, label %dec_label_pc_fe74

dec_label_pc_fe74:                                ; preds = %dec_label_pc_fe44
  %v0_fe78 = load i32, i32* @r4, align 4
  %v6_fe88 = call i32 @function_14b00(i32 %v3_fe60, i32 %v0_fe78, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_fe8c = load i32, i32* @global_var_1f628.115, align 4
  store i32 %v2_fe8c, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_fe9c = call i32 @function_14144(i32 %v2_fe8c, i32 3)
  %v1_fea4 = or i32 %v2_fe9c, 2048
  store i32 %v1_fea4, i32* @r2, align 4
  %v0_fea8 = load i32, i32* @r4, align 4
  %v2_feac = call i32 @function_14144(i32 %v0_fea8, i32 4)
  store i32 ptrtoint (i8** @global_var_1f634.117 to i32), i32* @r8, align 4
  %v2_feb4 = load i8, i8* bitcast (i8** @global_var_1f634.117 to i8*), align 4
  %v2_feb8 = icmp eq i8 %v2_feb4, 0
  br i1 %v2_feb8, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_fe74
  br label %bb

.thread:                                          ; preds = %dec_label_pc_fe74
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_fef0 = call i32 @function_14808()
  %v0_fef4 = load i32, i32* @r5, align 4
  %v2_fef4 = inttoptr i32 %v0_fef0 to i32*
  store i32 %v0_fef4, i32* %v2_fef4, align 4
  %v2_fef8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_fef8, i32* @r7, align 4
  store i32 %v0_fef0, i32* @r4, align 4
  %v2_ff04 = load i32, i32* @global_var_1f628.115, align 4
  %v3_ff0c = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_ff0c = call i32 @function_14960(i32 %v2_ff04, %sockaddr* %v3_ff0c, i32 16)
  %v7_ff10 = icmp eq i32 %v4_ff0c, -1
  br i1 %v7_ff10, label %dec_label_pc_ff30, label %dec_label_pc_ff18

dec_label_pc_ff18:                                ; preds = %bb
  %v2_ff20 = load i32, i32* @global_var_1f628.115, align 4
  %v2_ff24 = call i32 @function_14a14(i32 %v2_ff20, i32 1)
  br label %dec_label_pc_ff28

dec_label_pc_ff28:                                ; preds = %dec_label_pc_fe44, %dec_label_pc_ff3c, %dec_label_pc_ff18
  %v20_ff2c = phi i32 [ %v3_fe60, %dec_label_pc_fe44 ], [ %v0_ff8c, %dec_label_pc_ff3c ], [ %v2_ff24, %dec_label_pc_ff18 ]
  store i32 %v3_fe44, i32* @r4, align 4
  store i32 %v9_fe44, i32* @r6, align 4
  store i32 %v15_fe44, i32* @r8, align 4
  ret i32 %v20_ff2c

dec_label_pc_ff30:                                ; preds = %bb
  %v0_ff30 = load i32, i32* @r4, align 4
  %v1_ff30 = inttoptr i32 %v0_ff30 to i32*
  %v2_ff30 = load i32, i32* %v1_ff30, align 4
  %v7_ff34 = icmp eq i32 %v2_ff30, 99
  br i1 %v7_ff34, label %dec_label_pc_ff94, label %dec_label_pc_ff3c

dec_label_pc_ff3c:                                ; preds = %dec_label_pc_ff94, %bb21, %dec_label_pc_ff30
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_ff54 = load i32, i32* @global_var_1f628.115, align 4
  %v4_ff6c = call i32 @function_1498c(i32 %v2_ff54, %sockaddr* %v3_ff0c, i32 16)
  %v1_ff74 = call i32 @function_15664(i32 5)
  %v2_ff78 = load i32, i32* @global_var_1f628.115, align 4
  %v1_ff7c = call i32 @function_14234(i32 %v2_ff78)
  %v1_ff88 = call i32 @function_f128(i32 58811)
  %v0_ff8c = call i32 @function_fe44()
  br label %dec_label_pc_ff28

dec_label_pc_ff94:                                ; preds = %dec_label_pc_ff30
  %v2_ff94 = load i8, i8* bitcast (i8** @global_var_1f634.117 to i8*), align 4
  %v3_ff94 = zext i8 %v2_ff94 to i32
  %v1_ff98 = load i32, i32* @r5, align 4
  %v9_ff98 = icmp eq i32 %v3_ff94, %v1_ff98
  br i1 %v9_ff98, label %dec_label_pc_ff3c, label %bb21

bb21:                                             ; preds = %dec_label_pc_ff94
  %v2_ffa0 = trunc i32 %v1_ff98 to i8
  store i8 %v2_ffa0, i8* bitcast (i8** @global_var_1f634.117 to i8*), align 4
  br label %dec_label_pc_ff3c

; uselistorder directives
  uselistorder i32 %v3_fe60, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_f128, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_14a14, { 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1f634.117 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1f634.117, { 1, 0 }
  uselistorder label %dec_label_pc_ff3c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ff28, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_ffb4() local_unnamed_addr {
dec_label_pc_ffb4:
  %stack_var_-16 = alloca i32, align 4
  %v3_ffb4 = load i32, i32* @r4, align 4
  store i32 %v3_ffb4, i32* %stack_var_-16, align 4
  %v1_ffbc = call i32 @function_12f50(i32 3)
  %v3_ffc8 = call i32 @function_12e6c(i32 3, i32* null)
  %v1_ffcc = inttoptr i32 %v3_ffc8 to i8*
  %v2_ffcc = call i32 @function_10d28(i8* %v1_ffcc)
  store i32 %v2_ffcc, i32* @r5, align 4
  %v1_ffd8 = call i32 @function_12e98(i32 3)
  %v0_ffdc = load i32, i32* @r5, align 4
  %v2_ffdc = icmp eq i32 %v0_ffdc, 0
  store i32 ptrtoint (i8** @global_var_1f864.120 to i32), i32* @r6, align 4
  br i1 %v2_ffdc, label %bb, label %bb5

bb:                                               ; preds = %dec_label_pc_ffb4
  ret i32 %v1_ffd8

bb5:                                              ; preds = %dec_label_pc_ffb4
  %v1_ffe8 = add i32 %v0_ffdc, 4
  %v2_ffe8 = inttoptr i32 %v1_ffe8 to i32*
  %v3_ffe8 = load i32, i32* %v2_ffe8, align 4
  store i32 %v3_ffe8, i32* @r4, align 4
  %v0_ffec = call i32 @function_10a44()
  %v0_fff0 = load i32, i32* @r5, align 4
  %v1_fff0 = inttoptr i32 %v0_fff0 to i8*
  %v2_fff0 = load i8, i8* %v1_fff0, align 1
  %v3_fff0 = zext i8 %v2_fff0 to i32
  %v2_fff4 = call i32 @function_13f90(i32 %v0_ffec, i32 %v3_fff0)
  %v0_fff8 = load i32, i32* @r4, align 4
  %v4_fff8 = mul i32 %v2_fff4, 4
  %v5_fff8 = add i32 %v0_fff8, %v4_fff8
  %v6_fff8 = inttoptr i32 %v5_fff8 to i32*
  %v7_fff8 = load i32, i32* %v6_fff8, align 4
  %v0_fffc = load i32, i32* @r5, align 4
  store i32 %v7_fff8, i32* @global_var_1f868.121, align 4
  %v1_10004 = call i32 @function_10d04(i32 %v0_fffc)
  %v1_1000c = call i32 @function_12f50(i32 4)
  %v3_10018 = call i32 @function_12e6c(i32 4, i32* null)
  %v4_10018 = inttoptr i32 %v3_10018 to i8*
  %v2_1001c = add i32 %v3_10018, 1
  %v3_1001c = inttoptr i32 %v2_1001c to i8*
  %v4_1001c = load i8, i8* %v3_1001c, align 1
  %v3_10020 = load i8, i8* %v4_10018, align 1
  store i8 %v4_1001c, i8* bitcast (i32* @global_var_1f867.122 to i8*), align 4
  store i8 %v3_10020, i8* bitcast (i32* @global_var_1f866.123 to i8*), align 4
  %v2_10038 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10038, i32* @r4, align 4
  %v1_1003c = call i32 @function_12e98(i32 4)
  %v0_10040 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10040, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  %v1_10040 = load i32, i32* @r1, align 4
  %v2_10040 = load i32, i32* @r4, align 4
  %v3_10040 = udiv i32 %v2_10040, 65536
  %v4_10040 = mul i32 %v2_10040, 65536
  %v5_10040 = or i32 %v3_10040, %v4_10040
  %v8_10040 = and i32 %v5_10040, %v1_10040
  call void @__pseudo_branch(i32 %v8_10040)
  br label %bb7

bb7:                                              ; preds = %bb5, %bb6
  ret i32 %v1_1003c

; uselistorder directives
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_10044(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10044:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %tmp13 = call i8 @__decompiler_undefined_function_1()
  %tmp19 = call i8 @__decompiler_undefined_function_1()
  %tmp23 = call i8 @__decompiler_undefined_function_1()
  %tmp27 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i8 @__decompiler_undefined_function_1()
  %tmp35 = call i8 @__decompiler_undefined_function_1()
  %tmp37 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-1616 = alloca i32, align 4
  %stack_var_-38 = alloca i8, align 1
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-592 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-170 = alloca i32, align 4
  %stack_var_-138 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-106 = alloca i8, align 1
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-464 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_10044 = load i32, i32* @r4, align 4
  store i32 %v3_10044, i32* %stack_var_-36, align 4
  %v6_10044 = load i32, i32* @r5, align 4
  %v2_10054 = ptrtoint i32* %stack_var_-464 to i32
  store i32 %v2_10054, i32* @r4, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_1005c = load i32, i32* %arg2, align 4
  store i32 %tmp, i32* @r6, align 4
  %v1_10064 = inttoptr i32 %v2_1005c to i8*
  %v2_10064 = call i32 @function_14530(i8* %v1_10064)
  store i32 %v2_10054, i32* @r0, align 4
  %v1_1006c = call i32 @function_14ba4(i32 %v2_10054)
  store i32 %v2_10054, i32* @r0, align 4
  %v2_10078 = call i32 @function_14b74(i32 %v2_10054, i32 2)
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_10088 = bitcast i32* %stack_var_-464 to %_TYPEDEF_sigset_t*
  %v4_10088 = call i32 @function_144b0(i32 0, %_TYPEDEF_sigset_t* %v3_10088, i32 0)
  %v2_10094 = call i32 @function_14bbc(i32 17, i32 1)
  %v2_100a0 = call i32 @function_14bbc(i32 5, i32 ptrtoint (i32* @global_var_fe2c.125 to i32))
  %v4_100ac = call i32 @function_14360(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_16b50.127, i32 0, i32 0), i32 2)
  %v7_100b0 = icmp eq i32 %v4_100ac, -1
  store i32 %v4_100ac, i32* @r4, align 4
  br i1 %v7_100b0, label %dec_label_pc_10434, label %dec_label_pc_100bc

dec_label_pc_100bc:                               ; preds = %dec_label_pc_10434, %dec_label_pc_10044
  %v0_100d0 = phi i32 [ %v4_1043c, %dec_label_pc_10434 ], [ %v4_100ac, %dec_label_pc_10044 ]
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_100d4 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_100d4, i32* %r2.global-to-local, align 4
  store i32 1, i32* %stack_var_-48, align 4
  %v5_100dc = call i32 @function_142e4(i32 %v0_100d0, i32 -2147199228, i32 %v2_100d4, i32 1, i32 1)
  %v0_100e0 = load i32, i32* @r4, align 4
  %v1_100e4 = call i32 @function_14234(i32 %v0_100e0)
  br label %dec_label_pc_100e8

dec_label_pc_100e8:                               ; preds = %dec_label_pc_10434, %dec_label_pc_100bc
  %v2_100ec = call i32 @function_14208(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @global_var_16b00.23, i32 0, i32 0))
  %v0_100f0 = call i32 @function_13b2c()
  store i32 ptrtoint (i32* @global_var_1f858.88 to i32), i32* @fp, align 4
  store i32 ptrtoint (i8** @global_var_1f864.120 to i32), i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_1010c = ptrtoint i8* %stack_var_-106 to i32
  store i32 2, i32* @r7, align 4
  store i8 80, i8* bitcast (i32* @global_var_1f867.122 to i8*), align 4
  store i32 902487617, i32* @global_var_1f868.121, align 4
  store i8 0, i8* bitcast (i32* @global_var_1f866.123 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1f865.132 to i8*), align 4
  store i32 %v0_100f0, i32* @global_var_1f858.88, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16ba4.134 to i32), i32* @r1, align 4
  store i32 18, i32* @r2, align 4
  store i8 2, i8* bitcast (i8** @global_var_1f864.120 to i8*), align 4
  store i32 %v2_1010c, i32* @r0, align 4
  %v0_10138 = load i32, i32* @r6, align 4
  %v1_10138 = inttoptr i32 %v0_10138 to i32*
  %v2_10138 = load i32, i32* %v1_10138, align 4
  store i32 %v2_10138, i32* @r5, align 4
  %v4_1013c = call i32 @function_14850(i32 %v2_1010c, i32 ptrtoint ([3 x i8]* @global_var_16ba4.134 to i32), i32 18)
  store i32 ptrtoint (i32* @global_var_16ba0.148 to i32), i32* @r4, align 4
  %v13_1015c = ptrtoint i32* %stack_var_-176 to i32
  store i32 %v13_1015c, i32* @lr, align 4
  store i32 add (i32 add (i32 ptrtoint (i32* @global_var_12e98.143 to i32), i32 add (i32 add (i32 add (i32 ptrtoint (i32* @global_var_fe44.113 to i32), i32 ptrtoint (i32* @global_var_12f50.138 to i32)), i32 77420), i32 ptrtoint (i32* @global_var_13008.141 to i32))), i32 161092), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_fe2c.125 to i32), i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_fe2c.125 to i32), i32* %stack_var_-176, align 4
  br i1 icmp eq (i32 add (i32 add (i32 ptrtoint (i32* @global_var_12e98.143 to i32), i32 add (i32 add (i32 add (i32 ptrtoint (i32* @global_var_fe44.113 to i32), i32 ptrtoint (i32* @global_var_12f50.138 to i32)), i32 77420), i32 ptrtoint (i32* @global_var_13008.141 to i32))), i32 161092), i32 0), label %dec_label_pc_10338, label %dec_label_pc_101a4

dec_label_pc_101a4:                               ; preds = %dec_label_pc_100e8
  %v3_101a4 = load i8, i8* %stack_var_-106, align 1
  %v4_101a4 = sext i8 %v3_101a4 to i32
  store i32 %v4_101a4, i32* %r2.global-to-local, align 4
  %v4_101a8 = zext i8 %tmp37 to i32
  store i32 %v4_101a8, i32* %r3.global-to-local, align 4
  %v0_101ac = load i32, i32* @r5, align 4
  store i8 %tmp37, i8* %stack_var_-72, align 1
  %v1_101b8 = inttoptr i32 %v0_101ac to i8*
  %v2_101b8 = call i32 @function_13874(i8* %v1_101b8)
  %v0_101c0 = load i32, i32* @r7, align 4
  %v2_101c4 = call i32 @function_1405c(i32 %v0_101c0, i32 %v2_101b8)
  %v4_101c8 = zext i8 %tmp35 to i32
  store i32 %v4_101c8, i32* %r2.global-to-local, align 4
  %v4_101cc = zext i8 %tmp34 to i32
  store i32 %v4_101cc, i32* %r3.global-to-local, align 4
  %v0_101d0 = load i32, i32* @r5, align 4
  %v2_101d0 = add i32 %v0_101d0, %v2_101c4
  %v3_101d0 = inttoptr i32 %v2_101d0 to i8*
  %v4_101d0 = load i8, i8* %v3_101d0, align 1
  %v6_101d0 = zext i8 %v4_101d0 to i32
  store i32 %v6_101d0, i32* %r4.global-to-local, align 4
  %v1_101e0 = inttoptr i32 %v0_101d0 to i8*
  %v2_101e0 = call i32 @function_13874(i8* %v1_101e0)
  %v2_101ec = call i32 @function_1405c(i32 4, i32 %v2_101e0)
  %v1_101f0 = sub nuw nsw i32 -1, %v6_101d0
  store i32 %v1_101f0, i32* %r4.global-to-local, align 4
  %v0_101f4 = load i32, i32* @r5, align 4
  %v2_101f4 = add i32 %v0_101f4, %v2_101ec
  %v3_101f4 = inttoptr i32 %v2_101f4 to i8*
  %v4_101f4 = load i8, i8* %v3_101f4, align 1
  %v6_101f4 = zext i8 %v4_101f4 to i32
  %v4_101f8 = zext i8 %tmp31 to i32
  store i32 %v4_101f8, i32* %r2.global-to-local, align 4
  %v1_10200 = sub nuw nsw i32 -82, %v6_101d0
  %v1_10204 = sub nuw nsw i32 -1, %v6_101f4
  store i32 %v1_10204, i32* %r3.global-to-local, align 4
  %v1_1020c = urem i32 %v1_10200, 256
  %v2_10210 = add nsw i32 %v1_1020c, %v1_10204
  store i32 %v2_10210, i32* %r4.global-to-local, align 4
  %v1_1021c = inttoptr i32 %v0_101f4 to i8*
  %v2_1021c = call i32 @function_13874(i8* %v1_1021c)
  %v2_10228 = call i32 @function_1405c(i32 6, i32 %v2_1021c)
  %v0_1022c = load i32, i32* @r5, align 4
  %v2_1022c = add i32 %v0_1022c, %v2_10228
  %v3_1022c = inttoptr i32 %v2_1022c to i8*
  %v4_1022c = load i8, i8* %v3_1022c, align 1
  %v6_1022c = zext i8 %v4_1022c to i32
  %v4_10230 = zext i8 %tmp27 to i32
  store i32 %v4_10230, i32* %r2.global-to-local, align 4
  %v1_10238 = sub nuw nsw i32 -1, %v6_1022c
  store i32 %v1_10238, i32* %r3.global-to-local, align 4
  %v0_10240 = load i32, i32* %r4.global-to-local, align 4
  %v1_10240 = urem i32 %v0_10240, 256
  %v2_10244 = add nsw i32 %v1_10240, %v1_10238
  store i32 %v2_10244, i32* %r4.global-to-local, align 4
  %v1_10250 = inttoptr i32 %v0_1022c to i8*
  %v2_10250 = call i32 @function_13874(i8* %v1_10250)
  %v2_1025c = call i32 @function_1405c(i32 8, i32 %v2_10250)
  %v0_10260 = load i32, i32* @r5, align 4
  %v2_10260 = add i32 %v0_10260, %v2_1025c
  %v3_10260 = inttoptr i32 %v2_10260 to i8*
  %v4_10260 = load i8, i8* %v3_10260, align 1
  %v6_10260 = zext i8 %v4_10260 to i32
  %v4_10264 = zext i8 %tmp23 to i32
  store i32 %v4_10264, i32* %r2.global-to-local, align 4
  %v1_1026c = sub nuw nsw i32 -1, %v6_10260
  store i32 %v1_1026c, i32* %r3.global-to-local, align 4
  %v0_10274 = load i32, i32* %r4.global-to-local, align 4
  %v1_10274 = urem i32 %v0_10274, 256
  %v2_10278 = add nsw i32 %v1_10274, %v1_1026c
  store i32 %v2_10278, i32* %r4.global-to-local, align 4
  %v1_10284 = inttoptr i32 %v0_10260 to i8*
  %v2_10284 = call i32 @function_13874(i8* %v1_10284)
  %v2_10290 = call i32 @function_1405c(i32 10, i32 %v2_10284)
  %v0_10294 = load i32, i32* @r5, align 4
  %v2_10294 = add i32 %v0_10294, %v2_10290
  %v3_10294 = inttoptr i32 %v2_10294 to i8*
  %v4_10294 = load i8, i8* %v3_10294, align 1
  %v6_10294 = zext i8 %v4_10294 to i32
  %v4_10298 = zext i8 %tmp19 to i32
  store i32 %v4_10298, i32* %r2.global-to-local, align 4
  %v1_102a0 = sub nuw nsw i32 -1, %v6_10294
  store i32 %v1_102a0, i32* %r3.global-to-local, align 4
  %v0_102a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_102a8 = urem i32 %v0_102a8, 256
  %v2_102ac = add nsw i32 %v1_102a8, %v1_102a0
  store i32 %v2_102ac, i32* %r4.global-to-local, align 4
  %v1_102b8 = inttoptr i32 %v0_10294 to i8*
  %v2_102b8 = call i32 @function_13874(i8* %v1_102b8)
  %v2_102c4 = call i32 @function_1405c(i32 12, i32 %v2_102b8)
  %v0_102c8 = load i32, i32* @r5, align 4
  %v2_102c8 = add i32 %v0_102c8, %v2_102c4
  %v3_102c8 = inttoptr i32 %v2_102c8 to i8*
  %v4_102c8 = load i8, i8* %v3_102c8, align 1
  %v6_102c8 = zext i8 %v4_102c8 to i32
  %v0_102cc = load i32, i32* %r4.global-to-local, align 4
  %v1_102cc = urem i32 %v0_102cc, 256
  %v1_102d0 = sub nuw nsw i32 -1, %v6_102c8
  store i32 %v1_102d0, i32* %r3.global-to-local, align 4
  %v2_102d4 = add nsw i32 %v1_102cc, %v1_102d0
  store i32 %v2_102d4, i32* %r4.global-to-local, align 4
  %fold = add i32 %v0_102cc, %v1_102d0
  %v1_102dc = urem i32 %fold, 256
  %v2_102e0 = call i32 @function_13f90(i32 %v1_102dc, i32 9)
  %v1_102e4 = load i32, i32* @r7, align 4
  %v6_102e4 = shl i32 %v2_102e0, %v1_102e4
  %v2_102ec = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_102ec, i32* %r2.global-to-local, align 4
  %v1_102f0 = and i32 %v6_102e4, 1020
  %v2_102f8 = add i32 %v1_102f0, %v2_102ec
  %v2_102fc = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_102fc, i32* @r4, align 4
  store i32 66312, i32* @lr, align 4
  %v1_10304 = add i32 %v2_102f8, -172
  %v2_10304 = inttoptr i32 %v1_10304 to i32*
  %v3_10304 = load i32, i32* %v2_10304, align 4
  call void @__pseudo_branch(i32 %v3_10304)
  %v0_10308 = load i32, i32* @r5, align 4
  %v2_10310 = inttoptr i32 %v0_10308 to i8*
  %v3_10310 = call i32 @function_13c54(i8* %v2_10310, i32 %v2_102fc)
  store i32 %v3_10310, i32* @r5, align 4
  %v2_10320 = call i32 @function_13914(i32 %v2_1010c, i32 18)
  %v2_1032c = call i32 @function_13914(i32 %v2_102fc, i32 12)
  %v0_10330 = load i32, i32* @r5, align 4
  %v1_10330 = urem i32 %v0_10330, 256
  %v2_10330 = icmp eq i32 %v1_10330, 0
  br i1 %v2_10330, label %dec_label_pc_10338, label %dec_label_pc_10450

dec_label_pc_10338:                               ; preds = %dec_label_pc_101a4, %dec_label_pc_100e8, %dec_label_pc_10450
  %v2_1033c = ptrtoint i32* %stack_var_-138 to i32
  store i32 %v2_1033c, i32* @sl, align 4
  %v0_10340 = call i32 @function_fe44()
  %v1_10344 = call i32 @function_10a9c(i32 %v0_10340)
  %v2_10350 = call i32 @function_13914(i32 %v2_1033c, i32 32)
  %v0_10354 = load i32, i32* @r8, align 4
  %v7_10354 = icmp eq i32 %v0_10354, 2
  br i1 %v7_10354, label %dec_label_pc_1045c, label %dec_label_pc_1035c

dec_label_pc_1035c:                               ; preds = %dec_label_pc_1045c, %dec_label_pc_10338, %dec_label_pc_1046c
  %v0_1035c = call i32 @function_10a44()
  %v1_10360 = mul i32 %v0_1035c, 4
  %v3_10364 = and i32 %v1_10360, 12
  %v2_1036c = ptrtoint i32* %stack_var_-170 to i32
  store i32 %v2_1036c, i32* @r5, align 4
  %v1_10370 = add nuw nsw i32 %v3_10364, 12
  store i32 %v1_10370, i32* @r4, align 4
  %v2_1037c = call i32 @function_10af8(i32 %v2_1036c, i32 %v1_10370)
  %v2_10384 = ptrtoint i32* %stack_var_-36 to i32
  %v1_10388 = load i32, i32* @r4, align 4
  %v2_10388 = add i32 %v1_10388, %v2_10384
  store i32 %v2_10388, i32* %r3.global-to-local, align 4
  %v0_1038c = load i32, i32* @r6, align 4
  %v1_1038c = inttoptr i32 %v0_1038c to i32*
  %v2_1038c = load i32, i32* %v1_1038c, align 4
  store i32 %v2_1038c, i32* @r0, align 4
  store i32 0, i32* @r6, align 4
  %v3_10394 = add i32 %v2_10388, -134
  %v4_10394 = inttoptr i32 %v3_10394 to i8*
  store i8 0, i8* %v4_10394, align 1
  %v2_1039c = inttoptr i32 %v2_1038c to i8*
  %v3_1039c = call i32 @function_1389c(i8* %v2_1039c, i32 %v2_1036c)
  %v0_103a0 = call i32 @function_10a44()
  %v2_103a8 = call i32 @function_13f90(i32 %v0_103a0, i32 6)
  %v3_103ac = mul i32 %v2_103a8, 4
  %v1_103b0 = add i32 %v3_103ac, 12
  store i32 %v1_103b0, i32* @r4, align 4
  %v2_103bc = call i32 @function_10af8(i32 %v2_1036c, i32 %v1_103b0)
  store i32 %v2_10384, i32* %r2.global-to-local, align 4
  %v1_103c8 = load i32, i32* @r4, align 4
  %v2_103c8 = add i32 %v1_103c8, %v2_10384
  store i32 %v2_103c8, i32* %r3.global-to-local, align 4
  %v0_103cc = load i32, i32* @r6, align 4
  %v1_103cc = trunc i32 %v0_103cc to i8
  %v3_103cc = add i32 %v2_103c8, -134
  %v4_103cc = inttoptr i32 %v3_103cc to i8*
  store i8 %v1_103cc, i8* %v4_103cc, align 1
  %v4_103d8 = call i32 @function_143cc(i32 15, i32 %v2_1036c, i32 %v2_10384, i32 %v2_103c8)
  %v1_103e0 = call i32 @function_12f50(i32 2)
  %v3_103ec = call i32 @function_12e6c(i32 2, i32* nonnull %stack_var_-44)
  %v3_103f0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_103f0, i32* %r2.global-to-local, align 4
  %v3_103fc = inttoptr i32 %v3_103ec to i32*
  %v4_103fc = call i32 @function_1455c(i32 1, i32* %v3_103fc, i32 %v3_103f0)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1040c = call i32 @function_1455c(i32 1, i32* nonnull @global_var_16b74.150, i32 1)
  %v1_10414 = call i32 @function_12e98(i32 2)
  %v0_10418 = call i32 @function_14260()
  %v1_1041c = load i32, i32* @r6, align 4
  %v7_10420 = icmp sgt i32 %v0_10418, %v1_1041c
  br i1 %v7_10420, label %dec_label_pc_10424, label %dec_label_pc_10494

dec_label_pc_10424:                               ; preds = %dec_label_pc_1035c
  %v2_10430 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_10430, i32* %r4.global-to-local, align 4
  store i32 %v6_10044, i32* %r5.global-to-local, align 4
  ret i32 0

dec_label_pc_10434:                               ; preds = %dec_label_pc_10044
  %v4_1043c = call i32 @function_14360(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @global_var_16b60.152, i32 0, i32 0), i32 2)
  %v3_10440 = icmp eq i32 %v4_1043c, -1
  store i32 %v4_1043c, i32* @r4, align 4
  br i1 %v3_10440, label %dec_label_pc_100e8, label %dec_label_pc_100bc

dec_label_pc_10450:                               ; preds = %dec_label_pc_101a4
  %v1_10454 = call i32 @function_14b5c(i32 5)
  br label %dec_label_pc_10338

dec_label_pc_1045c:                               ; preds = %dec_label_pc_10338
  %v0_1045c = load i32, i32* @r6, align 4
  %v1_1045c = add i32 %v0_1045c, 4
  %v2_1045c = inttoptr i32 %v1_1045c to i32*
  %v3_1045c = load i32, i32* %v2_1045c, align 4
  %v1_10460 = inttoptr i32 %v3_1045c to i8*
  %v2_10460 = call i32 @function_13874(i8* %v1_10460)
  %v8_10468 = icmp sgt i32 %v2_10460, 31
  br i1 %v8_10468, label %dec_label_pc_1035c, label %dec_label_pc_1046c

dec_label_pc_1046c:                               ; preds = %dec_label_pc_1045c
  %v0_1046c = load i32, i32* @r6, align 4
  %v1_1046c = add i32 %v0_1046c, 4
  %v2_1046c = inttoptr i32 %v1_1046c to i32*
  %v3_1046c = load i32, i32* %v2_1046c, align 4
  store i32 %v2_1033c, i32* @r0, align 4
  %v2_10474 = bitcast i32* %stack_var_-138 to i8*
  %v3_10474 = call i32 @function_1389c(i8* %v2_10474, i32 %v3_1046c)
  %v0_10478 = load i32, i32* @r6, align 4
  %v1_10478 = add i32 %v0_10478, 4
  %v2_10478 = inttoptr i32 %v1_10478 to i32*
  %v3_10478 = load i32, i32* %v2_10478, align 4
  store i32 %v3_10478, i32* %r4.global-to-local, align 4
  %v1_10480 = inttoptr i32 %v3_10478 to i8*
  %v2_10480 = call i32 @function_13874(i8* %v1_10480)
  %v2_1048c = call i32 @function_13914(i32 %v3_10478, i32 %v2_10480)
  br label %dec_label_pc_1035c

dec_label_pc_10494:                               ; preds = %dec_label_pc_1035c
  %v1_10494 = call i32 @function_14484(i32 %v0_10418)
  %v0_1049c = load i32, i32* @r6, align 4
  %v1_104a0 = call i32 @function_14234(i32 %v0_1049c)
  %v1_104a8 = call i32 @function_14234(i32 1)
  %v1_104b0 = call i32 @function_14234(i32 2)
  %v2_104b4 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_104b4, i32* @r7, align 4
  %v1_104b8 = call i32 @function_a558(i32 %v1_104b0)
  store i32 ptrtoint (i32* @global_var_1f62c.154 to i32), i32* @sb, align 4
  %v1_104c0 = call i32 @function_f694(i32 %v1_104b8)
  %v0_104c4 = call i32 @function_11500()
  %v0_104c8 = load i32, i32* @r6, align 4
  %v2_104d0 = ptrtoint i32* %stack_var_-592 to i32
  store i32 %v2_104d0, i32* @r6, align 4
  %v2_104d4 = ptrtoint i32* %stack_var_-336 to i32
  store i32 %v2_104d4, i32* @r7, align 4
  %v2_105b4 = ptrtoint i32* %stack_var_-60 to i32
  %v5_10870 = bitcast i8* %stack_var_-38 to i32*
  %v2_10798 = ptrtoint i32* %stack_var_-1616 to i32
  %v2_10888 = ptrtoint i32* %stack_var_-48 to i32
  %v2_1088c = ptrtoint i32* %stack_var_-52 to i32
  %v1_1091c = bitcast i32* %stack_var_-138 to i8*
  %v5_108f0 = bitcast i32* %stack_var_-88 to %sockaddr*
  %v1_10908 = sub i32 0, %v1_10494
  br label %dec_label_pc_104d8

dec_label_pc_104d8:                               ; preds = %dec_label_pc_104d8.backedge, %dec_label_pc_10494
  %v2_104e087 = phi i32 [ %v2_104d0, %dec_label_pc_10494 ], [ %v2_104e087.pre, %dec_label_pc_104d8.backedge ]
  %stack_var_-37.0 = phi i8 [ %tmp13, %dec_label_pc_10494 ], [ %stack_var_-37.0.be, %dec_label_pc_104d8.backedge ]
  %stack_var_-1620.0 = phi i32 [ %v0_104c8, %dec_label_pc_10494 ], [ %stack_var_-1620.0.be, %dec_label_pc_104d8.backedge ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_104e089 = inttoptr i32 %v2_104e087 to i32*
  store i32 0, i32* %v4_104e089, align 4
  %v0_104e490 = load i32, i32* %r3.global-to-local, align 4
  %v1_104e491 = add i32 %v0_104e490, 4
  store i32 %v1_104e491, i32* %r3.global-to-local, align 4
  %v7_104e892 = icmp eq i32 %v1_104e491, 128
  br i1 %v7_104e892, label %dec_label_pc_104f0, label %dec_label_pc_104e0.dec_label_pc_104e0_crit_edge

dec_label_pc_104e0.dec_label_pc_104e0_crit_edge:  ; preds = %dec_label_pc_104d8, %dec_label_pc_104e0.dec_label_pc_104e0_crit_edge
  %v1_104e493 = phi i32 [ %v1_104e4, %dec_label_pc_104e0.dec_label_pc_104e0_crit_edge ], [ %v1_104e491, %dec_label_pc_104d8 ]
  %v0_104e0.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_104e0 = load i32, i32* @r6, align 4
  %v3_104e0 = add i32 %v2_104e0, %v1_104e493
  %v4_104e0 = inttoptr i32 %v3_104e0 to i32*
  store i32 %v0_104e0.pre, i32* %v4_104e0, align 4
  %v0_104e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_104e4 = add i32 %v0_104e4, 4
  store i32 %v1_104e4, i32* %r3.global-to-local, align 4
  %v7_104e8 = icmp eq i32 %v1_104e4, 128
  br i1 %v7_104e8, label %dec_label_pc_104f0, label %dec_label_pc_104e0.dec_label_pc_104e0_crit_edge

dec_label_pc_104f0:                               ; preds = %dec_label_pc_104e0.dec_label_pc_104e0_crit_edge, %dec_label_pc_104d8
  %v0_104f0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_104f0, i32* %r3.global-to-local, align 4
  store i32 %v0_104f0, i32* @r4, align 4
  %v2_104f894 = load i32, i32* @r7, align 4
  %v3_104f895 = add i32 %v2_104f894, %v0_104f0
  %v4_104f896 = inttoptr i32 %v3_104f895 to i32*
  store i32 %v0_104f0, i32* %v4_104f896, align 4
  %v0_104fc97 = load i32, i32* %r3.global-to-local, align 4
  %v1_104fc98 = add i32 %v0_104fc97, 4
  store i32 %v1_104fc98, i32* %r3.global-to-local, align 4
  %v7_1050099 = icmp eq i32 %v1_104fc98, 128
  br i1 %v7_1050099, label %dec_label_pc_10508, label %dec_label_pc_104f8.dec_label_pc_104f8_crit_edge

dec_label_pc_104f8.dec_label_pc_104f8_crit_edge:  ; preds = %dec_label_pc_104f0, %dec_label_pc_104f8.dec_label_pc_104f8_crit_edge
  %v1_104fc100 = phi i32 [ %v1_104fc, %dec_label_pc_104f8.dec_label_pc_104f8_crit_edge ], [ %v1_104fc98, %dec_label_pc_104f0 ]
  %v0_104f8.pre = load i32, i32* @r4, align 4
  %v2_104f8 = load i32, i32* @r7, align 4
  %v3_104f8 = add i32 %v2_104f8, %v1_104fc100
  %v4_104f8 = inttoptr i32 %v3_104f8 to i32*
  store i32 %v0_104f8.pre, i32* %v4_104f8, align 4
  %v0_104fc = load i32, i32* %r3.global-to-local, align 4
  %v1_104fc = add i32 %v0_104fc, 4
  store i32 %v1_104fc, i32* %r3.global-to-local, align 4
  %v7_10500 = icmp eq i32 %v1_104fc, 128
  br i1 %v7_10500, label %dec_label_pc_10508, label %dec_label_pc_104f8.dec_label_pc_104f8_crit_edge

dec_label_pc_10508:                               ; preds = %dec_label_pc_104f8.dec_label_pc_104f8_crit_edge, %dec_label_pc_104f0
  store i32 ptrtoint (i32* @global_var_1f628.115 to i32), i32* %r3.global-to-local, align 4
  %v2_1050c = load i32, i32* @global_var_1f628.115, align 4
  %v7_10510 = icmp eq i32 %v2_1050c, -1
  br i1 %v7_10510, label %dec_label_pc_10540, label %dec_label_pc_10518

dec_label_pc_10518:                               ; preds = %dec_label_pc_10508
  %v3_10518 = udiv i32 %v2_1050c, 32
  %v3_10520 = mul nuw nsw i32 %v3_10518, 4
  %v2_10528 = add i32 %v3_10520, %v2_10384
  store i32 %v2_10528, i32* %r3.global-to-local, align 4
  %v1_1052c = add i32 %v2_10528, -556
  %v2_1052c = inttoptr i32 %v1_1052c to i32*
  %v3_1052c = load i32, i32* %v2_1052c, align 4
  %v1_10530 = urem i32 %v2_1050c, 32
  %v7_10538 = shl i32 1, %v1_10530
  %v8_10538 = or i32 %v3_1052c, %v7_10538
  store i32 %v8_10538, i32* %r2.global-to-local, align 4
  store i32 %v8_10538, i32* %v2_1052c, align 4
  br label %dec_label_pc_10540

dec_label_pc_10540:                               ; preds = %dec_label_pc_10508, %dec_label_pc_10518
  %v2_10540 = load i32, i32* @global_var_1f62c.154, align 4
  store i32 %v2_10540, i32* %r3.global-to-local, align 4
  %v7_10544 = icmp eq i32 %v2_10540, -1
  store i32 ptrtoint (i32* @global_var_1f62c.154 to i32), i32* @r8, align 4
  br i1 %v7_10544, label %dec_label_pc_107e8, label %dec_label_pc_10550

dec_label_pc_10550:                               ; preds = %dec_label_pc_107e8, %dec_label_pc_10540, %.thread
  store i32 ptrtoint (i8** @global_var_1f7c8.157 to i32), i32* %r2.global-to-local, align 4
  %v2_10554 = load i8, i8* bitcast (i8** @global_var_1f7c8.157 to i8*), align 4
  %v3_10554 = zext i8 %v2_10554 to i32
  store i32 %v3_10554, i32* %r3.global-to-local, align 4
  %v2_10558 = icmp eq i8 %v2_10554, 0
  %v2_106a8 = load i32, i32* @global_var_1f62c.154, align 4
  %v3_106b0 = udiv i32 %v2_106a8, 32
  br i1 %v2_10558, label %dec_label_pc_106a8, label %dec_label_pc_10560

dec_label_pc_10560:                               ; preds = %dec_label_pc_10550
  %v3_1056c = mul nuw nsw i32 %v3_106b0, 4
  %v2_10574 = add i32 %v3_1056c, %v2_10384
  store i32 %v2_10574, i32* %r3.global-to-local, align 4
  %v1_10578 = add i32 %v2_10574, -300
  %v2_10578 = inttoptr i32 %v1_10578 to i32*
  %v3_10578 = load i32, i32* %v2_10578, align 4
  %v1_1057c = urem i32 %v2_106a8, 32
  %v7_10584 = shl i32 1, %v1_1057c
  %v8_10584 = or i32 %v3_10578, %v7_10584
  store i32 %v8_10584, i32* %r2.global-to-local, align 4
  store i32 %v8_10584, i32* %v2_10578, align 4
  br label %dec_label_pc_1058c

dec_label_pc_1058c:                               ; preds = %dec_label_pc_106a8, %dec_label_pc_10560
  %v2_10590 = load i32, i32* @global_var_1f628.115, align 4
  %v2_10594 = load i32, i32* @global_var_1f62c.154, align 4
  store i32 %v2_10594, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v5_105a0 = icmp slt i32 %v2_10590, %v2_10594
  br i1 %v5_105a0, label %bb, label %bb84

bb:                                               ; preds = %dec_label_pc_1058c
  br label %bb84

bb84:                                             ; preds = %dec_label_pc_1058c, %bb
  %v0_105b0 = phi i32 [ %v2_10590, %dec_label_pc_1058c ], [ %v2_10594, %bb ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 10, i32* %stack_var_-60, align 4
  %v1_105b0 = add i32 %v0_105b0, 1
  store i32 %v2_104d4, i32* %r2.global-to-local, align 4
  %v5_105c8 = call i32 @function_14454(i32 %v1_105b0, i32 %v2_104d0, i32 %v2_104d4, i32 0, i32 %v2_105b4)
  %v8_105cc = icmp eq i32 %v5_105c8, -1
  store i32 %v5_105c8, i32* %r3.global-to-local, align 4
  br i1 %v8_105cc, label %dec_label_pc_104d8.backedge, label %dec_label_pc_105d8

dec_label_pc_105d8:                               ; preds = %bb84
  %v6_105c8 = trunc i32 %v5_105c8 to i8
  %v3_105d8 = icmp eq i8 %v6_105c8, 0
  br i1 %v3_105d8, label %dec_label_pc_105e0, label %dec_label_pc_10608

dec_label_pc_105e0:                               ; preds = %dec_label_pc_105d8
  store i8 0, i8* %stack_var_-38, align 1
  %v2_105f0 = call i32 @function_1405c(i32 %stack_var_-1620.0, i32 6)
  %v2_105f8 = icmp eq i32 %v2_105f0, 0
  %v1_105fc = add i32 %stack_var_-1620.0, 1
  store i32 %v1_105fc, i32* %r2.global-to-local, align 4
  br i1 %v2_105f8, label %dec_label_pc_10858, label %dec_label_pc_10608

dec_label_pc_10608:                               ; preds = %dec_label_pc_105d8, %dec_label_pc_105e0, %dec_label_pc_10858
  %stack_var_-37.1 = phi i8 [ 0, %dec_label_pc_10858 ], [ 0, %dec_label_pc_105e0 ], [ %stack_var_-37.0, %dec_label_pc_105d8 ]
  %stack_var_-1620.1 = phi i32 [ %v1_105fc, %dec_label_pc_10858 ], [ %v1_105fc, %dec_label_pc_105e0 ], [ %stack_var_-1620.0, %dec_label_pc_105d8 ]
  store i32 ptrtoint (i32* @global_var_1f628.115 to i32), i32* %r3.global-to-local, align 4
  %v2_1060c = load i32, i32* @global_var_1f628.115, align 4
  %v7_10610 = icmp eq i32 %v2_1060c, -1
  br i1 %v7_10610, label %dec_label_pc_10640, label %dec_label_pc_10618

dec_label_pc_10618:                               ; preds = %dec_label_pc_10608
  %v3_10618 = udiv i32 %v2_1060c, 32
  %v3_10620 = mul nuw nsw i32 %v3_10618, 4
  store i32 %v2_10384, i32* @ip, align 4
  %v2_10628 = add i32 %v3_10620, %v2_10384
  store i32 %v2_10628, i32* %r3.global-to-local, align 4
  %v1_1062c = add i32 %v2_10628, -556
  %v2_1062c = inttoptr i32 %v1_1062c to i32*
  %v3_1062c = load i32, i32* %v2_1062c, align 4
  %v1_10630 = urem i32 %v2_1060c, 32
  %v6_10634 = lshr i32 %v3_1062c, %v1_10630
  store i32 %v6_10634, i32* %r2.global-to-local, align 4
  %v1_10638 = urem i32 %v6_10634, 2
  %v2_10638 = icmp eq i32 %v1_10638, 0
  br i1 %v2_10638, label %dec_label_pc_10640, label %dec_label_pc_108d8

dec_label_pc_10640:                               ; preds = %dec_label_pc_10618, %dec_label_pc_10608
  store i32 ptrtoint (i8** @global_var_1f7c8.157 to i32), i32* %r3.global-to-local, align 4
  %v2_10644 = load i8, i8* bitcast (i8** @global_var_1f7c8.157 to i8*), align 4
  %v3_10644 = zext i8 %v2_10644 to i32
  store i32 %v3_10644, i32* @r4, align 4
  %v2_10648 = icmp eq i8 %v2_10644, 0
  %v2_106d8 = load i32, i32* @global_var_1f62c.154, align 4
  br i1 %v2_10648, label %dec_label_pc_106d8, label %dec_label_pc_10650

dec_label_pc_10650:                               ; preds = %dec_label_pc_10640
  %v3_10658 = udiv i32 %v2_106d8, 32
  %v3_10660 = mul nuw nsw i32 %v3_10658, 4
  %v2_10664 = add i32 %v3_10660, %v2_10384
  store i32 %v2_10664, i32* %r3.global-to-local, align 4
  %v1_10668 = add i32 %v2_10664, -300
  %v2_10668 = inttoptr i32 %v1_10668 to i32*
  %v3_10668 = load i32, i32* %v2_10668, align 4
  %v1_1066c = urem i32 %v2_106d8, 32
  %v6_10670 = lshr i32 %v3_10668, %v1_1066c
  store i32 %v6_10670, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f7c8.157 to i32), i32* %r3.global-to-local, align 4
  %v1_1067c = urem i32 %v6_10670, 2
  %v2_1067c = icmp eq i32 %v1_1067c, 0
  store i8 0, i8* bitcast (i8** @global_var_1f7c8.157 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1f62c.154 to i32), i32* @r5, align 4
  br i1 %v2_1067c, label %dec_label_pc_1068c, label %dec_label_pc_10878

dec_label_pc_1068c:                               ; preds = %dec_label_pc_10650
  store i32 67220, i32* @lr, align 4
  %v1_10690 = icmp ne i32 %v2_106d8, -1
  call void @__pseudo_cond_branch(i1 %v1_10690, i32 ptrtoint (i32* @global_var_14234.25 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_10698 = load i32, i32* @r5, align 4
  %v2_10698 = inttoptr i32 %v1_10698 to i32*
  store i32 -1, i32* %v2_10698, align 4
  %v1_106a0 = call i32 @function_15664(i32 1)
  br label %dec_label_pc_104d8.backedge

dec_label_pc_104d8.backedge:                      ; preds = %dec_label_pc_1068c, %dec_label_pc_107c4, %dec_label_pc_108b0, %dec_label_pc_10964, %dec_label_pc_1098c, %dec_label_pc_109fc, %bb84, %dec_label_pc_106d8, %dec_label_pc_106e8, %dec_label_pc_10918, %bb86, %dec_label_pc_109a8, %dec_label_pc_10978
  %stack_var_-37.0.be = phi i8 [ %stack_var_-37.0, %bb84 ], [ %stack_var_-37.1, %dec_label_pc_106d8 ], [ %stack_var_-37.1, %dec_label_pc_106e8 ], [ %stack_var_-37.3, %bb86 ], [ %stack_var_-37.2, %dec_label_pc_107c4 ], [ %stack_var_-37.1, %dec_label_pc_1098c ], [ %v3_109c0, %dec_label_pc_109a8 ], [ %v3_109c0, %dec_label_pc_109fc ], [ %stack_var_-37.1, %dec_label_pc_1068c ], [ %stack_var_-37.1, %dec_label_pc_10918 ], [ %stack_var_-37.1, %dec_label_pc_10964 ], [ %stack_var_-37.1, %dec_label_pc_108b0 ], [ %stack_var_-37.3, %dec_label_pc_10978 ]
  %stack_var_-1620.0.be = phi i32 [ %stack_var_-1620.0, %bb84 ], [ %stack_var_-1620.1, %dec_label_pc_106d8 ], [ %stack_var_-1620.1, %dec_label_pc_106e8 ], [ %stack_var_-1620.1, %bb86 ], [ %stack_var_-1620.1, %dec_label_pc_107c4 ], [ %stack_var_-1620.1, %dec_label_pc_1098c ], [ %stack_var_-1620.1, %dec_label_pc_109a8 ], [ %stack_var_-1620.1, %dec_label_pc_109fc ], [ %stack_var_-1620.1, %dec_label_pc_1068c ], [ %stack_var_-1620.1, %dec_label_pc_10918 ], [ %stack_var_-1620.1, %dec_label_pc_10964 ], [ %stack_var_-1620.1, %dec_label_pc_108b0 ], [ %stack_var_-1620.1, %dec_label_pc_10978 ]
  %v2_104e087.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_104d8

dec_label_pc_106a8:                               ; preds = %dec_label_pc_10550
  store i32 %v2_10384, i32* %r2.global-to-local, align 4
  %v3_106b8 = mul nuw nsw i32 %v3_106b0, 4
  %v2_106bc = add i32 %v3_106b8, %v2_10384
  store i32 %v2_106bc, i32* %r3.global-to-local, align 4
  %v1_106c0 = add i32 %v2_106bc, -556
  %v2_106c0 = inttoptr i32 %v1_106c0 to i32*
  %v3_106c0 = load i32, i32* %v2_106c0, align 4
  %v1_106c4 = urem i32 %v2_106a8, 32
  %v7_106cc = shl i32 1, %v1_106c4
  %v8_106cc = or i32 %v3_106c0, %v7_106cc
  store i32 %v8_106cc, i32* %r2.global-to-local, align 4
  store i32 %v8_106cc, i32* %v2_106c0, align 4
  br label %dec_label_pc_1058c

dec_label_pc_106d8:                               ; preds = %dec_label_pc_10640
  %v7_106dc = icmp eq i32 %v2_106d8, -1
  store i32 ptrtoint (i32* @global_var_1f62c.154 to i32), i32* @r5, align 4
  br i1 %v7_106dc, label %dec_label_pc_104d8.backedge, label %dec_label_pc_106e8

dec_label_pc_106e8:                               ; preds = %dec_label_pc_106d8
  %v3_106e8 = udiv i32 %v2_106d8, 32
  store i32 %v2_10384, i32* %r2.global-to-local, align 4
  %v3_106f4 = mul nuw nsw i32 %v3_106e8, 4
  %v2_106f8 = add i32 %v3_106f4, %v2_10384
  store i32 %v2_106f8, i32* %r3.global-to-local, align 4
  %v1_106fc = add i32 %v2_106f8, -556
  %v2_106fc = inttoptr i32 %v1_106fc to i32*
  %v3_106fc = load i32, i32* %v2_106fc, align 4
  %v1_10700 = urem i32 %v2_106d8, 32
  %v6_10704 = lshr i32 %v3_106fc, %v1_10700
  store i32 %v6_10704, i32* %r2.global-to-local, align 4
  %v1_10708 = urem i32 %v6_10704, 2
  %v2_10708 = icmp eq i32 %v1_10708, 0
  br i1 %v2_10708, label %dec_label_pc_104d8.backedge, label %dec_label_pc_10710

dec_label_pc_10710:                               ; preds = %dec_label_pc_106e8
  %v0_10710 = call i32 @function_14808()
  %v0_10714 = load i32, i32* @r4, align 4
  %v2_10714 = inttoptr i32 %v0_10710 to i32*
  store i32 %v0_10714, i32* %v2_10714, align 4
  store i32 %v0_10710, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_10728 = load i32, i32* @global_var_1f62c.154, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_10734 = call i32 @function_14a40(i32 %v2_10728, i32* %v5_10870, i32 2, i32 16386)
  %v7_10738 = icmp eq i32 %v5_10734, -1
  br i1 %v7_10738, label %dec_label_pc_10978, label %dec_label_pc_10740

dec_label_pc_10740:                               ; preds = %dec_label_pc_10710
  %v2_10740 = icmp eq i32 %v5_10734, 0
  br i1 %v2_10740, label %dec_label_pc_107c4, label %dec_label_pc_10748

dec_label_pc_10748:                               ; preds = %dec_label_pc_10740
  %v3_10748 = load i8, i8* %stack_var_-38, align 1
  %v4_10748 = sext i8 %v3_10748 to i32
  %v4_1074c = zext i8 %stack_var_-37.1 to i32
  store i32 %v4_1074c, i32* %r3.global-to-local, align 4
  %v4_10750 = mul nuw nsw i32 %v4_1074c, 256
  %v5_10750 = or i32 %v4_10748, %v4_10750
  store i32 %v5_10750, i32* %r2.global-to-local, align 4
  %v7_10750 = icmp eq i32 %v5_10750, 0
  br i1 %v7_10750, label %dec_label_pc_1098c, label %dec_label_pc_10758

dec_label_pc_10758:                               ; preds = %dec_label_pc_10748
  %v1_10758 = mul nsw i32 %v4_10748, 256
  %v3_1075c = and i32 %v1_10758, 65280
  %v4_10760 = udiv i32 %v5_10750, 256
  %v5_10760 = or i32 %v3_1075c, %v4_10760
  store i32 %v5_10760, i32* %r3.global-to-local, align 4
  %v3_107644 = udiv i32 %v5_10760, 256
  store i32 %v3_107644, i32* %r2.global-to-local, align 4
  %v1_1076c = trunc i32 %v3_107644 to i8
  %v6_10770 = trunc i32 %v4_10760 to i8
  store i8 %v6_10770, i8* %stack_var_-38, align 1
  %tmp103 = icmp ult i32 %v5_10760, 1025
  br i1 %tmp103, label %dec_label_pc_10788, label %dec_label_pc_10778

dec_label_pc_10778:                               ; preds = %dec_label_pc_10758
  %v2_10778 = load i32, i32* @global_var_1f62c.154, align 4
  %v1_1077c = call i32 @function_14234(i32 %v2_10778)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_10784 = load i32, i32* @r5, align 4
  %v2_10784 = inttoptr i32 %v1_10784 to i32*
  store i32 -1, i32* %v2_10784, align 4
  %v3_10790.pre = load i8, i8* %stack_var_-38, align 1
  br label %dec_label_pc_10788

dec_label_pc_10788:                               ; preds = %dec_label_pc_10758, %dec_label_pc_10778
  %v3_10790 = phi i8 [ %v6_10770, %dec_label_pc_10758 ], [ %v3_10790.pre, %dec_label_pc_10778 ]
  %v0_10788 = load i32, i32* @r4, align 4
  %v1_10788 = load i32, i32* @r8, align 4
  %v2_10788 = inttoptr i32 %v1_10788 to i32*
  store i32 %v0_10788, i32* %v2_10788, align 4
  %v4_1078c = urem i32 %v3_107644, 256
  %v4_10790 = sext i8 %v3_10790 to i32
  store i32 %v2_10798, i32* @r4, align 4
  %v4_107a0 = mul nuw nsw i32 %v4_1078c, 256
  %v5_107a0 = or i32 %v4_10790, %v4_107a0
  store i32 %v5_107a0, i32* %r2.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_107a8 = load i32, i32* @global_var_1f62c.154, align 4
  %v5_107b0 = call i32 @function_14a40(i32 %v2_107a8, i32* nonnull %stack_var_-1616, i32 %v5_107a0, i32 16386)
  %v7_107b4 = icmp eq i32 %v5_107b0, -1
  br i1 %v7_107b4, label %dec_label_pc_10978, label %dec_label_pc_107bc

dec_label_pc_107bc:                               ; preds = %dec_label_pc_10788
  %v2_107bc = icmp eq i32 %v5_107b0, 0
  br i1 %v2_107bc, label %dec_label_pc_107c4, label %dec_label_pc_109a8

dec_label_pc_107c4:                               ; preds = %bb86, %dec_label_pc_107bc, %dec_label_pc_10740
  %stack_var_-37.2 = phi i8 [ %stack_var_-37.3, %bb86 ], [ %stack_var_-37.1, %dec_label_pc_10740 ], [ %v1_1076c, %dec_label_pc_107bc ]
  %v2_107c4 = load i32, i32* @global_var_1f62c.154, align 4
  store i32 67536, i32* @lr, align 4
  %v1_107cc = icmp ne i32 %v2_107c4, -1
  call void @__pseudo_cond_branch(i1 %v1_107cc, i32 ptrtoint (i32* @global_var_14234.25 to i32))
  store i32 ptrtoint (i32* @global_var_1f62c.154 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1f62c.154, align 4
  %v1_107e0 = call i32 @function_15664(i32 1)
  br label %dec_label_pc_104d8.backedge

dec_label_pc_107e8:                               ; preds = %dec_label_pc_10540
  %v0_107f0 = load i32, i32* @r4, align 4
  store i32 %v0_107f0, i32* %r2.global-to-local, align 4
  %v3_107f4 = call i32 @function_14b30(i32 2, i32 1, i32 %v0_107f0)
  %v7_107f8 = icmp eq i32 %v3_107f4, -1
  store i32 %v3_107f4, i32* %r5.global-to-local, align 4
  %v1_10800 = load i32, i32* @r8, align 4
  %v2_10800 = inttoptr i32 %v1_10800 to i32*
  store i32 %v3_107f4, i32* %v2_10800, align 4
  br i1 %v7_107f8, label %dec_label_pc_10550, label %dec_label_pc_10808

dec_label_pc_10808:                               ; preds = %dec_label_pc_107e8
  %v0_10808 = load i32, i32* @r4, align 4
  store i32 %v0_10808, i32* @r2, align 4
  %v2_10810 = call i32 @function_14144(i32 %v3_107f4, i32 3)
  %v1_10818 = or i32 %v2_10810, 2048
  store i32 %v1_10818, i32* @r2, align 4
  %v0_1081c = load i32, i32* %r5.global-to-local, align 4
  %v2_10820 = call i32 @function_14144(i32 %v0_1081c, i32 4)
  %v2_10828 = load i32, i32* @global_var_1f630.112, align 4
  store i32 %v2_10828, i32* %r3.global-to-local, align 4
  %v2_1082c = icmp eq i32 %v2_10828, 0
  br i1 %v2_1082c, label %.thread, label %bb85

bb85:                                             ; preds = %dec_label_pc_10808
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_13b2c.159 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_10808, %bb85
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_10840 = load i32, i32* @global_var_1f62c.154, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1f7c8.157 to i8*), align 4
  %v5_10850 = call i32 @function_1498c(i32 %v2_10840, %sockaddr* bitcast (i8** @global_var_1f864.120 to %sockaddr*), i32 16)
  br label %dec_label_pc_10550

dec_label_pc_10858:                               ; preds = %dec_label_pc_105e0
  %v2_10860 = load i32, i32* @global_var_1f62c.154, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_10870 = call i32 @function_14aa0(i32 %v2_10860, i32* nonnull %v5_10870, i32 2, i32 16384)
  br label %dec_label_pc_10608

dec_label_pc_10878:                               ; preds = %dec_label_pc_10650
  store i32 4, i32* @r4, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 %v2_10888, i32* %r3.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v6_108a0 = call i32 @function_149e4(i32 %v2_106d8, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_1088c)
  %v3_108a4 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_108a4, i32* %r3.global-to-local, align 4
  %v2_108a8 = icmp eq i32 %v3_108a4, 0
  br i1 %v2_108a8, label %dec_label_pc_10918, label %dec_label_pc_108b0

dec_label_pc_108b0:                               ; preds = %dec_label_pc_10878
  %v2_108b0 = load i32, i32* @global_var_1f62c.154, align 4
  %v1_108b4 = call i32 @function_14234(i32 %v2_108b0)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_108bc = load i32, i32* @r5, align 4
  %v2_108bc = inttoptr i32 %v1_108bc to i32*
  store i32 -1, i32* %v2_108bc, align 4
  %v0_108c0 = call i32 @function_10a44()
  %v2_108c8 = call i32 @function_13f90(i32 %v0_108c0, i32 10)
  %v1_108cc = add i32 %v2_108c8, 1
  %v1_108d0 = call i32 @function_15664(i32 %v1_108cc)
  br label %dec_label_pc_104d8.backedge

dec_label_pc_108d8:                               ; preds = %dec_label_pc_10618
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_10888, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_108f0 = call i32 @function_14934(i32 %v2_1060c, %sockaddr* %v5_108f0, i32 %v2_10888, i32 16, i32 16)
  %v1_108f4 = call i32 @function_11274(i32 %v6_108f0)
  %v1_108f8 = call i32 @function_f114(i32 %v1_108f4)
  %v1_108fc = call i32 @function_a32c(i32 %v1_108f8)
  store i32 %v1_10494, i32* %r2.global-to-local, align 4
  %v2_1090c = call i32 @function_14334(i32 %v1_10908, i32 9)
  %v1_10914 = call i32 @function_155d0(i32 0)
  br label %dec_label_pc_10918

dec_label_pc_10918:                               ; preds = %dec_label_pc_10878, %dec_label_pc_108d8
  %v2_1091c = call i32 @function_13874(i8* %v1_1091c)
  %v3_1091c = trunc i32 %v2_1091c to i8
  store i8 %v3_1091c, i8* %stack_var_-38, align 1
  %v0_10924 = call i32 @function_13b2c()
  %v0_10928 = load i32, i32* @r4, align 4
  store i32 %v0_10928, i32* %r2.global-to-local, align 4
  %v1_1092c = load i32, i32* @fp, align 4
  %v2_1092c = inttoptr i32 %v1_1092c to i32*
  store i32 %v0_10924, i32* %v2_1092c, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10938 = load i32, i32* @r5, align 4
  %v1_10938 = inttoptr i32 %v0_10938 to i32*
  %v2_10938 = load i32, i32* %v1_10938, align 4
  %v5_1093c = call i32 @function_14aa0(i32 %v2_10938, i32* nonnull @global_var_16b78.161, i32 %v0_10928, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_10948 = load i32, i32* @r5, align 4
  %v1_10948 = inttoptr i32 %v0_10948 to i32*
  %v2_10948 = load i32, i32* %v1_10948, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10954 = call i32 @function_14aa0(i32 %v2_10948, i32* %v5_10870, i32 1, i32 16384)
  %v3_10958 = load i8, i8* %stack_var_-38, align 1
  %v4_10958 = sext i8 %v3_10958 to i32
  store i32 %v4_10958, i32* %r2.global-to-local, align 4
  %v2_1095c = icmp eq i8 %v3_10958, 0
  br i1 %v2_1095c, label %dec_label_pc_104d8.backedge, label %dec_label_pc_10964

dec_label_pc_10964:                               ; preds = %dec_label_pc_10918
  %v0_10964 = load i32, i32* @r5, align 4
  %v1_10964 = inttoptr i32 %v0_10964 to i32*
  %v2_10964 = load i32, i32* %v1_10964, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10970 = call i32 @function_14aa0(i32 %v2_10964, i32* nonnull %stack_var_-138, i32 %v4_10958, i32 16384)
  br label %dec_label_pc_104d8.backedge

dec_label_pc_10978:                               ; preds = %dec_label_pc_10788, %dec_label_pc_10710
  %stack_var_-37.3 = phi i8 [ %stack_var_-37.1, %dec_label_pc_10710 ], [ %v1_1076c, %dec_label_pc_10788 ]
  %v0_10978 = load i32, i32* @r8, align 4
  %v1_10978 = inttoptr i32 %v0_10978 to i32*
  %v2_10978 = load i32, i32* %v1_10978, align 4
  store i32 %v2_10978, i32* %r3.global-to-local, align 4
  %v7_1097c = icmp eq i32 %v2_10978, 4
  br i1 %v7_1097c, label %dec_label_pc_104d8.backedge, label %bb86

bb86:                                             ; preds = %dec_label_pc_10978
  %v8_10980 = icmp eq i32 %v2_10978, 11
  br i1 %v8_10980, label %dec_label_pc_104d8.backedge, label %dec_label_pc_107c4

dec_label_pc_1098c:                               ; preds = %dec_label_pc_10748
  %v2_10990 = load i32, i32* @global_var_1f62c.154, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_109a0 = call i32 @function_14a40(i32 %v2_10990, i32* nonnull %v5_10870, i32 2, i32 16384)
  br label %dec_label_pc_104d8.backedge

dec_label_pc_109a8:                               ; preds = %dec_label_pc_107bc
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_109b8 = load i32, i32* @global_var_1f62c.154, align 4
  %v5_109bc = call i32 @function_14a40(i32 %v2_109b8, i32* nonnull %v5_10870, i32 2, i32 16384)
  %v3_109c0 = load i8, i8* %stack_var_-38, align 1
  %v4_109c0 = sext i8 %v3_109c0 to i32
  %v4_109c8 = mul nsw i32 %v4_109c0, 256
  %v5_109c8 = or i32 %v4_109c8, %v4_1078c
  store i32 %v5_109c8, i32* %r2.global-to-local, align 4
  store i32 %v4_109c0, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_109dc = load i32, i32* @global_var_1f62c.154, align 4
  store i8 %v1_1076c, i8* %stack_var_-38, align 1
  %v8_109e8 = call i32 @function_14a40(i32 %v2_109dc, i32* nonnull %stack_var_-1616, i32 %v5_109c8, i32 16384)
  %v3_109ec = load i8, i8* %stack_var_-38, align 1
  %v4_109ec = sext i8 %v3_109ec to i32
  store i32 %v4_109ec, i32* %r2.global-to-local, align 4
  %v4_109f0 = zext i8 %v3_109c0 to i32
  store i32 %v4_109f0, i32* %r3.global-to-local, align 4
  %v4_109f4 = mul nuw nsw i32 %v4_109f0, 256
  %v5_109f4 = or i32 %v4_109ec, %v4_109f4
  %v7_109f4 = icmp eq i32 %v5_109f4, 0
  br i1 %v7_109f4, label %dec_label_pc_104d8.backedge, label %dec_label_pc_109fc

dec_label_pc_109fc:                               ; preds = %dec_label_pc_109a8
  %v5_10a00 = call i32 @function_a0d8(i32* nonnull %stack_var_-1616, i32 %v5_109f4, i32 %v4_109ec, i32 %v4_109f0)
  br label %dec_label_pc_104d8.backedge

; uselistorder directives
  uselistorder i32 %v4_109f0, { 1, 0, 2 }
  uselistorder i32 %v4_109ec, { 1, 0, 2 }
  uselistorder i32 %v4_109c0, { 1, 0 }
  uselistorder i8 %v3_109c0, { 2, 3, 1, 0 }
  uselistorder i8 %stack_var_-37.3, { 1, 0, 2 }
  uselistorder i32 %v3_107f4, { 3, 2, 1, 0 }
  uselistorder i32 %v5_107b0, { 1, 0 }
  uselistorder i32 %v4_1078c, { 1, 0 }
  uselistorder i8 %v1_1076c, { 0, 2, 1 }
  uselistorder i32 %v3_107644, { 0, 2, 1 }
  uselistorder i32 %v4_10760, { 1, 0 }
  uselistorder i32 %v5_10734, { 1, 0 }
  uselistorder i32 %v2_106d8, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_1060c, { 3, 2, 1, 0 }
  uselistorder i8 %stack_var_-37.1, { 9, 8, 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 %v5_105c8, { 2, 1, 0 }
  uselistorder i32 %v2_1050c, { 2, 1, 0 }
  uselistorder i32 %v1_104fc, { 1, 2, 0 }
  uselistorder i32 %v1_104e4, { 1, 2, 0 }
  uselistorder i32 %stack_var_-1620.0, { 0, 2, 1, 3 }
  uselistorder i32 %v2_10888, { 1, 0, 2 }
  uselistorder i32* %v5_10870, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v2_104d4, { 1, 0, 2 }
  uselistorder i32 %v2_104d0, { 1, 0, 2 }
  uselistorder i32 %v4_1043c, { 1, 2, 0 }
  uselistorder i32 %v2_10384, { 0, 10, 1, 11, 2, 3, 9, 4, 5, 8, 6, 12, 7 }
  uselistorder i32 %v1_102d0, { 1, 2, 0 }
  uselistorder i32 %v0_102cc, { 1, 0 }
  uselistorder i32 %v1_102a0, { 1, 0 }
  uselistorder i32 %v0_10294, { 1, 0 }
  uselistorder i32 %v1_1026c, { 1, 0 }
  uselistorder i32 %v0_10260, { 1, 0 }
  uselistorder i32 %v1_10238, { 1, 0 }
  uselistorder i32 %v0_1022c, { 1, 0 }
  uselistorder i32 %v1_10204, { 1, 0 }
  uselistorder i32 %v0_101f4, { 1, 0 }
  uselistorder i32 %v0_101d0, { 1, 0 }
  uselistorder i32 %v2_1010c, { 0, 2, 1 }
  uselistorder i32 %v4_100ac, { 1, 2, 0 }
  uselistorder i32 %v2_10054, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 0, 2, 3, 1 }
  uselistorder i32* %stack_var_-48, { 1, 2, 0, 3, 5, 4, 6 }
  uselistorder i8* %stack_var_-106, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0 }
  uselistorder i32* %stack_var_-138, { 1, 2, 0, 3 }
  uselistorder i8* %stack_var_-38, { 9, 8, 7, 6, 5, 0, 4, 3, 2, 1 }
  uselistorder i32* %stack_var_-1616, { 1, 0, 2, 3 }
  uselistorder i8 %tmp37, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 47, 48, 41, 42, 38, 45, 46, 39, 40, 43, 44, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58 }
  uselistorder i32* @global_var_1f630.112, { 1, 0 }
  uselistorder i32 16386, { 1, 0, 2, 4, 3, 5 }
  uselistorder i8* bitcast (i8** @global_var_1f7c8.157 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1f7c8.157, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1f7c8.157 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1f628.115, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32* @global_var_1f62c.154, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9, 10, 11, 13, 12, 14, 15 }
  uselistorder i32 (i8*, i32)* @function_1389c, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 66, 36, 37, 38, 39, 40, 61, 62, 63, 64, 65, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 }
  uselistorder i32 (i32, i32)* @function_10af8, { 2, 1, 0 }
  uselistorder i32 ()* @function_fe44, { 1, 0 }
  uselistorder i32 (i8*, i32)* @function_13c54, { 1, 0, 2, 3, 4 }
  uselistorder i32 ptrtoint (i8** @global_var_1f864.120 to i32), { 1, 0 }
  uselistorder [2 x i8]* @global_var_16b00.23, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_fe2c.125 to i32), { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_14bbc, { 1, 0 }
  uselistorder i32 (i8*)* @function_14530, { 1, 0 }
  uselistorder label %dec_label_pc_10918, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_10788, { 1, 0 }
  uselistorder label %dec_label_pc_104d8.backedge, { 5, 11, 4, 10, 12, 3, 9, 2, 1, 8, 7, 0, 6 }
  uselistorder label %dec_label_pc_10608, { 2, 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %dec_label_pc_10550, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10540, { 1, 0 }
  uselistorder label %dec_label_pc_104f8.dec_label_pc_104f8_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_104e0.dec_label_pc_104e0_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_1035c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10338, { 2, 0, 1 }
}

define i32 @function_10a44() local_unnamed_addr {
dec_label_pc_10a44:
  %v2_10a50 = load i32, i32* @global_var_1f7cc.163, align 4
  %v2_10a54 = load i32, i32* @global_var_1f7d8.165, align 4
  store i32 ptrtoint (i32* @global_var_1f7d0.167 to i32), i32* @lr, align 4
  %v4_10a60 = mul i32 %v2_10a50, 2048
  %v5_10a60 = xor i32 %v4_10a60, %v2_10a50
  %v4_10a64 = udiv i32 %v2_10a54, 524288
  %v5_10a64 = xor i32 %v4_10a64, %v2_10a54
  %v2_10a68 = load i32, i32* @global_var_1f7d0.167, align 4
  %v2_10a6c = load i32, i32* @global_var_1f7d4.169, align 4
  %v2_10a70 = xor i32 %v5_10a64, %v5_10a60
  %v4_10a74 = udiv i32 %v5_10a60, 256
  %v5_10a74 = xor i32 %v2_10a70, %v4_10a74
  store i32 %v2_10a68, i32* @global_var_1f7cc.163, align 4
  store i32 %v2_10a6c, i32* @global_var_1f7d0.167, align 4
  store i32 %v2_10a54, i32* @global_var_1f7d4.169, align 4
  store i32 %v5_10a74, i32* @global_var_1f7d8.165, align 4
  ret i32 %v5_10a74

; uselistorder directives
  uselistorder i32 %v2_10a54, { 2, 1, 0 }
  uselistorder i32 %v2_10a50, { 1, 0 }
}

define i32 @function_10a9c(i32 %arg1) local_unnamed_addr {
dec_label_pc_10a9c:
  %stack_var_-12 = alloca i32, align 4
  %v3_10a9c = load i32, i32* @r4, align 4
  store i32 %v3_10a9c, i32* %stack_var_-12, align 4
  %v2_10aa4 = call i32 @function_14504(i32* null)
  store i32 %v2_10aa4, i32* @global_var_1f7cc.163, align 4
  %v0_10ab0 = call i32 @function_1428c()
  store i32 %v0_10ab0, i32* @r4, align 4
  %v0_10ab8 = call i32 @function_142b8()
  %v0_10ac0 = load i32, i32* @r4, align 4
  %v2_10ac0 = xor i32 %v0_10ac0, %v0_10ab8
  store i32 %v2_10ac0, i32* @r4, align 4
  store i32 %v2_10ac0, i32* @global_var_1f7d0.167, align 4
  %v1_10ac8 = call i32 @function_14814(i32 %v0_10ab8)
  %v2_10acc = load i32, i32* @global_var_1f7d0.167, align 4
  %v2_10ad8 = xor i32 %v2_10acc, %v1_10ac8
  store i32 %v2_10ad8, i32* @global_var_1f7d8.165, align 4
  store i32 %v1_10ac8, i32* @global_var_1f7d4.169, align 4
  %v2_10ae4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10ae4, i32* @r4, align 4
  ret i32 %v1_10ac8

; uselistorder directives
  uselistorder i32 %v1_10ac8, { 1, 2, 0 }
  uselistorder i32 %v0_10ab8, { 1, 0 }
  uselistorder i32 ()* @function_142b8, { 1, 2, 0 }
}

define i32 @function_10af8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10af8:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-69 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_10af8 = load i32, i32* @r4, align 4
  store i32 %v3_10af8, i32* %stack_var_-36, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 ptrtoint ([33 x i8]* @global_var_16bb8.175 to i32), i32* @r1, align 4
  %v2_10b0c = ptrtoint i32* %stack_var_-69 to i32
  store i32 %v2_10b0c, i32* @r0, align 4
  store i32 33, i32* @r2, align 4
  %v4_10b14 = call i32 @function_14850(i32 %v2_10b0c, i32 ptrtoint ([33 x i8]* @global_var_16bb8.175 to i32), i32 33)
  store i32 %v4_10b14, i32* %r0.global-to-local, align 4
  %v0_10b18 = load i32, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_10b18 = icmp slt i32 %v0_10b18, 0
  store i1 %v1_10b18, i1* %cpsr_n.global-to-local, align 1
  %v2_10b18 = icmp eq i32 %v0_10b18, 0
  store i1 %v2_10b18, i1* %cpsr_z.global-to-local, align 1
  %tmp20 = icmp slt i32 %v0_10b18, 1
  br i1 %tmp20, label %dec_label_pc_10c04, label %dec_label_pc_10b20

dec_label_pc_10b20:                               ; preds = %dec_label_pc_10af8
  store i32 ptrtoint (i32* @global_var_1f7d8.165 to i32), i32* %fp.global-to-local, align 4
  %v2_10b2c = load i32, i32* @global_var_1f7d4.169, align 4
  store i32 %v2_10b2c, i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f7cc.163 to i32), i32* %r3.global-to-local, align 4
  %v2_10b34 = load i32, i32* @global_var_1f7d0.167, align 4
  store i32 %v2_10b34, i32* %sl.global-to-local, align 4
  %v2_10b38 = load i32, i32* @global_var_1f7d8.165, align 4
  store i32 %v2_10b38, i32* %r6.global-to-local, align 4
  %v2_10b3c = load i32, i32* @global_var_1f7cc.163, align 4
  store i32 %v2_10b3c, i32* %ip.global-to-local, align 4
  %v0_10b40 = load i32, i32* @r4, align 4
  %v1_10b40 = add i32 %v0_10b40, 1
  store i32 %v1_10b40, i32* %r7.global-to-local, align 4
  %v2_10b4c = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_10bac

dec_label_pc_10b48:                               ; preds = %dec_label_pc_10bac
  %v1_10b48 = udiv i32 %v5_10bb8, 8
  %v4_10b50 = urem i32 %v1_10b48, 32
  %v5_10b50 = add i32 %v4_10b50, %v2_10b4c
  store i32 %v5_10b50, i32* %r0.global-to-local, align 4
  %v3_10b54 = mul i32 %v5_10bb8, 65536
  store i32 %v3_10b54, i32* %r2.global-to-local, align 4
  store i32 %v2_10b4c, i32* %r3.global-to-local, align 4
  %v3_10b5c = mul i32 %v5_10bb8, 256
  store i32 %v3_10b5c, i32* %r1.global-to-local, align 4
  %tmp21 = udiv i32 %v5_10bb8, 2048
  %v4_10b60 = urem i32 %tmp21, 32
  %v5_10b60 = add i32 %v4_10b60, %v2_10b4c
  store i32 %v5_10b60, i32* %ip.global-to-local, align 4
  %tmp22 = udiv i32 %v5_10bb8, 524288
  %v4_10b64 = urem i32 %tmp22, 32
  %v5_10b64 = add i32 %v4_10b64, %v2_10b4c
  store i32 %v5_10b64, i32* @lr, align 4
  %v4_10b68 = udiv i32 %v2_10bb4, 134217728
  %v5_10b68 = add i32 %v4_10b68, %v2_10b4c
  %v1_10b6c = add i32 %v5_10b60, -33
  %v2_10b6c = inttoptr i32 %v1_10b6c to i8*
  %v3_10b6c = load i8, i8* %v2_10b6c, align 1
  %v4_10b6c = zext i8 %v3_10b6c to i32
  store i32 %v4_10b6c, i32* %r2.global-to-local, align 4
  %v1_10b70 = add i32 %v5_10b50, -33
  %v2_10b70 = inttoptr i32 %v1_10b70 to i8*
  %v3_10b70 = load i8, i8* %v2_10b70, align 1
  %v4_10b70 = zext i8 %v3_10b70 to i32
  store i32 %v4_10b70, i32* %r3.global-to-local, align 4
  %v1_10b74 = add i32 %v5_10b64, -33
  %v2_10b74 = inttoptr i32 %v1_10b74 to i8*
  %v3_10b74 = load i8, i8* %v2_10b74, align 1
  %v4_10b74 = zext i8 %v3_10b74 to i32
  store i32 %v4_10b74, i32* %r1.global-to-local, align 4
  %v1_10b78 = add i32 %v5_10b68, -33
  %v2_10b78 = inttoptr i32 %v1_10b78 to i8*
  %v3_10b78 = load i8, i8* %v2_10b78, align 1
  %v4_10b78 = zext i8 %v3_10b78 to i32
  store i32 %v4_10b78, i32* %r0.global-to-local, align 4
  %v1_10b7c = add i32 %v0_10b7c, -4
  store i32 %v1_10b7c, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_10b80 = icmp slt i32 %v1_10b7c, 0
  store i1 %v1_10b80, i1* %cpsr_n.global-to-local, align 1
  %v2_10b80 = icmp eq i32 %v1_10b7c, 0
  store i1 %v2_10b80, i1* %cpsr_z.global-to-local, align 1
  %v3_10b84 = add i32 %v2_10b84, -1
  %v4_10b84 = inttoptr i32 %v3_10b84 to i8*
  store i8 %v3_10b70, i8* %v4_10b84, align 1
  %v0_10b88 = load i32, i32* %r2.global-to-local, align 4
  %v1_10b88 = trunc i32 %v0_10b88 to i8
  %v2_10b88 = load i32, i32* %r7.global-to-local, align 4
  %v3_10b88 = inttoptr i32 %v2_10b88 to i8*
  store i8 %v1_10b88, i8* %v3_10b88, align 1
  %v0_10b8c = load i32, i32* %r1.global-to-local, align 4
  %v1_10b8c = trunc i32 %v0_10b8c to i8
  %v2_10b8c = load i32, i32* %r7.global-to-local, align 4
  %v3_10b8c = add i32 %v2_10b8c, 1
  %v4_10b8c = inttoptr i32 %v3_10b8c to i8*
  store i8 %v1_10b8c, i8* %v4_10b8c, align 1
  %v0_10b90 = load i32, i32* %r0.global-to-local, align 4
  %v1_10b90 = trunc i32 %v0_10b90 to i8
  %v2_10b90 = load i32, i32* %r7.global-to-local, align 4
  %v3_10b90 = add i32 %v2_10b90, 2
  %v4_10b90 = inttoptr i32 %v3_10b90 to i8*
  store i8 %v1_10b90, i8* %v4_10b90, align 1
  %v0_10b94 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_10b94, i32* %ip.global-to-local, align 4
  %v0_10b98 = load i32, i32* %r7.global-to-local, align 4
  %v1_10b98 = add i32 %v0_10b98, 4
  store i32 %v1_10b98, i32* %r7.global-to-local, align 4
  %v0_10b9c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_10b9c = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_10b9c = load i1, i1* %cpsr_v.global-to-local, align 1
  %v3_10b9c = xor i1 %v1_10b9c, %v2_10b9c
  %v4_10b9c = or i1 %v0_10b9c, %v3_10b9c
  br i1 %v4_10b9c, label %dec_label_pc_10be8, label %dec_label_pc_10ba0

dec_label_pc_10ba0:                               ; preds = %dec_label_pc_10bcc, %dec_label_pc_10b48
  %v2_10b846 = phi i32 [ %v1_10be0, %dec_label_pc_10bcc ], [ %v1_10b98, %dec_label_pc_10b48 ]
  %v0_10bac2 = phi i32 [ %v0_10bdc, %dec_label_pc_10bcc ], [ %v0_10b94, %dec_label_pc_10b48 ]
  %v0_10ba0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_10ba0, i32* %sl.global-to-local, align 4
  %v0_10ba4 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10ba4, i32* %sb.global-to-local, align 4
  %v0_10ba8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10ba8, i32* %r6.global-to-local, align 4
  %v0_10bbc.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_10bac

dec_label_pc_10bac:                               ; preds = %dec_label_pc_10b20, %dec_label_pc_10ba0
  %v2_10b84 = phi i32 [ %v1_10b40, %dec_label_pc_10b20 ], [ %v2_10b846, %dec_label_pc_10ba0 ]
  %v0_10b7c = phi i32 [ %v0_10b18, %dec_label_pc_10b20 ], [ %v0_10bbc.pre, %dec_label_pc_10ba0 ]
  %v0_10bb0 = phi i32 [ %v2_10b38, %dec_label_pc_10b20 ], [ %v0_10ba8, %dec_label_pc_10ba0 ]
  %v0_10bac = phi i32 [ %v2_10b3c, %dec_label_pc_10b20 ], [ %v0_10bac2, %dec_label_pc_10ba0 ]
  %v4_10bac = mul i32 %v0_10bac, 2048
  %v5_10bac = xor i32 %v4_10bac, %v0_10bac
  store i32 %v5_10bac, i32* %r3.global-to-local, align 4
  %v4_10bb0 = udiv i32 %v0_10bb0, 524288
  %v5_10bb0 = xor i32 %v4_10bb0, %v0_10bb0
  %v2_10bb4 = xor i32 %v5_10bb0, %v5_10bac
  store i32 %v2_10bb4, i32* %r2.global-to-local, align 4
  %v4_10bb8 = udiv i32 %v5_10bac, 256
  %v5_10bb8 = xor i32 %v4_10bb8, %v2_10bb4
  store i32 %v5_10bb8, i32* %r5.global-to-local, align 4
  %v1_10bbc = add i32 %v0_10b7c, -3
  %v2_10bbc = icmp ugt i32 %v0_10b7c, 2
  %v3_10bbc = sub i32 2, %v0_10b7c
  %v4_10bbc = and i32 %v3_10bbc, %v0_10b7c
  %v5_10bbc = icmp slt i32 %v4_10bbc, 0
  store i1 %v5_10bbc, i1* %cpsr_v.global-to-local, align 1
  %v6_10bbc = icmp slt i32 %v1_10bbc, 0
  store i1 %v6_10bbc, i1* %cpsr_n.global-to-local, align 1
  %v7_10bbc = icmp eq i32 %v0_10b7c, 3
  store i1 %v7_10bbc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_10bb8, i32* %r0.global-to-local, align 4
  store i32 33, i32* %r1.global-to-local, align 4
  %v2_10bc8 = xor i1 %v7_10bbc, true
  %v3_10bc8 = and i1 %v2_10bbc, %v2_10bc8
  br i1 %v3_10bc8, label %dec_label_pc_10b48, label %dec_label_pc_10bcc

dec_label_pc_10bcc:                               ; preds = %dec_label_pc_10bac
  %v2_10bcc = call i32 @function_13f90(i32 %v5_10bb8, i32 33)
  store i32 %v2_10bcc, i32* %r0.global-to-local, align 4
  %v0_10bd0 = load i32, i32* %r8.global-to-local, align 4
  %v1_10bd0 = add i32 %v0_10bd0, -1
  store i32 %v1_10bd0, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_10bd4 = icmp slt i32 %v1_10bd0, 0
  store i1 %v1_10bd4, i1* %cpsr_n.global-to-local, align 1
  %v2_10bd4 = icmp eq i32 %v1_10bd0, 0
  store i1 %v2_10bd4, i1* %cpsr_z.global-to-local, align 1
  %v1_10bd8 = trunc i32 %v2_10bcc to i8
  %v2_10bd8 = load i32, i32* %r7.global-to-local, align 4
  %v3_10bd8 = add i32 %v2_10bd8, -1
  %v4_10bd8 = inttoptr i32 %v3_10bd8 to i8*
  store i8 %v1_10bd8, i8* %v4_10bd8, align 1
  %v0_10bdc = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_10bdc, i32* %ip.global-to-local, align 4
  %v0_10be0 = load i32, i32* %r7.global-to-local, align 4
  %v1_10be0 = add i32 %v0_10be0, 1
  store i32 %v1_10be0, i32* %r7.global-to-local, align 4
  %v0_10be4 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_10be4 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_10be4 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v3_10be4 = xor i1 %v1_10be4, %v2_10be4
  %v4_10be4 = or i1 %v0_10be4, %v3_10be4
  br i1 %v4_10be4, label %dec_label_pc_10be8, label %dec_label_pc_10ba0

dec_label_pc_10be8:                               ; preds = %dec_label_pc_10bcc, %dec_label_pc_10b48
  store i32 ptrtoint (i32* @global_var_1f7d0.167 to i32), i32* %r3.global-to-local, align 4
  %v0_10bf0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10bf0, i32* @global_var_1f7d4.169, align 4
  store i32 ptrtoint (i32* @global_var_1f7cc.163 to i32), i32* %ip.global-to-local, align 4
  %v0_10bf8 = load i32, i32* %r5.global-to-local, align 4
  %v1_10bf8 = load i32, i32* %fp.global-to-local, align 4
  %v2_10bf8 = inttoptr i32 %v1_10bf8 to i32*
  store i32 %v0_10bf8, i32* %v2_10bf8, align 4
  %v0_10bfc = load i32, i32* %sb.global-to-local, align 4
  %v1_10bfc = load i32, i32* %r3.global-to-local, align 4
  %v2_10bfc = inttoptr i32 %v1_10bfc to i32*
  store i32 %v0_10bfc, i32* %v2_10bfc, align 4
  %v0_10c00 = load i32, i32* %sl.global-to-local, align 4
  %v1_10c00 = load i32, i32* %ip.global-to-local, align 4
  %v2_10c00 = inttoptr i32 %v1_10c00 to i32*
  store i32 %v0_10c00, i32* %v2_10c00, align 4
  %v2_10c08.pre = load i32, i32* %stack_var_-36, align 4
  %v29_10c08.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10c04

dec_label_pc_10c04:                               ; preds = %dec_label_pc_10af8, %dec_label_pc_10be8
  %v29_10c08 = phi i32 [ %v29_10c08.pre, %dec_label_pc_10be8 ], [ %v4_10b14, %dec_label_pc_10af8 ]
  %v2_10c08 = phi i32 [ %v2_10c08.pre, %dec_label_pc_10be8 ], [ %v3_10af8, %dec_label_pc_10af8 ]
  store i32 %v2_10c08, i32* @r4, align 4
  ret i32 %v29_10c08

; uselistorder directives
  uselistorder i32 %v1_10be0, { 1, 0 }
  uselistorder i32 %v0_10bdc, { 1, 0 }
  uselistorder i32 %v5_10bb8, { 6, 5, 7, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_10bb4, { 1, 2, 0 }
  uselistorder i32 %v0_10bac, { 1, 0 }
  uselistorder i32 %v0_10bb0, { 1, 0 }
  uselistorder i32 %v0_10b7c, { 2, 0, 5, 4, 3, 1 }
  uselistorder i32 %v2_10b4c, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_10b18, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r8.global-to-local, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4, 5, 6, 7, 8 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32* %r2.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r1.global-to-local, { 4, 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 6, 4, 1, 2, 3, 7, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1* %cpsr_v.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1* %cpsr_n.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 -33, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_10c04, { 1, 0 }
  uselistorder label %dec_label_pc_10bac, { 1, 0 }
}

define i32 @function_10c20(i8* %arg1) local_unnamed_addr {
dec_label_pc_10c20:
  %fp.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_10c20 = load i32, i32* @r4, align 4
  store i32 %v3_10c20, i32* %stack_var_-36, align 4
  %v9_10c20 = load i32, i32* @r6, align 4
  %v12_10c20 = load i32, i32* @r7, align 4
  %v15_10c20 = load i32, i32* @r8, align 4
  %v18_10c20 = load i32, i32* @sb, align 4
  %v21_10c20 = load i32, i32* @sl, align 4
  %v24_10c20 = load i32, i32* @fp, align 4
  %v0_10c24 = load i32, i32* @r1, align 4
  store i32 %v0_10c24, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %tmp20 = icmp slt i32 %v0_10c24, 1
  br i1 %tmp20, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_10c20
  store i32 %v3_10c20, i32* @r4, align 4
  ret i32 %tmp

bb21:                                             ; preds = %dec_label_pc_10c20
  store i32 ptrtoint (i32* @global_var_1f7d8.165 to i32), i32* %fp.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f7d4.169 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f7d0.167 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f7cc.163 to i32), i32* %r8.global-to-local, align 4
  %v2_10c40 = load i32, i32* @global_var_1f7d8.165, align 4
  store i32 %v2_10c40, i32* @lr, align 4
  %v2_10c44 = load i32, i32* @global_var_1f7d4.169, align 4
  store i32 %v2_10c44, i32* %r7.global-to-local, align 4
  %v2_10c48 = load i32, i32* @global_var_1f7d0.167, align 4
  store i32 %v2_10c48, i32* %r6.global-to-local, align 4
  %v2_10c4c = load i32, i32* @global_var_1f7cc.163, align 4
  br label %dec_label_pc_10c78

dec_label_pc_10c54:                               ; preds = %dec_label_pc_10ca4
  %v3_10cac = sdiv i32 %v5_10c90, 256
  %v1_10c54 = trunc i32 %v3_10cac to i8
  %v3_10c54 = add i32 %v9_10c98, 1
  %v4_10c54 = inttoptr i32 %v3_10c54 to i8*
  store i8 %v1_10c54, i8* %v4_10c54, align 1
  %v0_10c58 = load i32, i32* %r3.global-to-local, align 4
  %v1_10c58 = trunc i32 %v0_10c58 to i8
  %v2_10c58 = load i32, i32* %r5.global-to-local, align 4
  %v3_10c58 = inttoptr i32 %v2_10c58 to i8*
  store i8 %v1_10c58, i8* %v3_10c58, align 1
  %v0_10c5c = load i32, i32* %r5.global-to-local, align 4
  %v1_10c5c = add i32 %v0_10c5c, 2
  store i32 %v1_10c5c, i32* %r5.global-to-local, align 4
  %v0_10c60.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10c60

dec_label_pc_10c60:                               ; preds = %.thread, %dec_label_pc_10c54
  %v0_10c60 = phi i32 [ %v9_10c9c, %.thread ], [ %v0_10c60.pre, %dec_label_pc_10c54 ]
  %v2_10c547 = phi i32 [ %v12_10c98, %.thread ], [ %v1_10c5c, %dec_label_pc_10c54 ]
  %tmp22 = icmp slt i32 %v0_10c60, 1
  br i1 %tmp22, label %dec_label_pc_10ce0, label %dec_label_pc_10c6c

dec_label_pc_10c6c:                               ; preds = %dec_label_pc_10c60
  %v0_10c64 = load i32, i32* %r6.global-to-local, align 4
  %v0_10c6c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_10c6c, i32* %r6.global-to-local, align 4
  %v0_10c70 = load i32, i32* @lr, align 4
  store i32 %v0_10c70, i32* %r7.global-to-local, align 4
  %v0_10c74 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_10c74, i32* @lr, align 4
  br label %dec_label_pc_10c78

dec_label_pc_10c78:                               ; preds = %bb21, %dec_label_pc_10c6c
  %v0_10cc8 = phi i32 [ %v2_10c48, %bb21 ], [ %v0_10c6c, %dec_label_pc_10c6c ]
  %v9_10c98 = phi i32 [ %tmp, %bb21 ], [ %v2_10c547, %dec_label_pc_10c6c ]
  %v0_10cb0 = phi i32 [ %v0_10c24, %bb21 ], [ %v0_10c60, %dec_label_pc_10c6c ]
  %v0_10cbc = phi i32 [ %v2_10c40, %bb21 ], [ %v0_10c74, %dec_label_pc_10c6c ]
  %v0_10cb8 = phi i32 [ %v2_10c4c, %bb21 ], [ %v0_10c64, %dec_label_pc_10c6c ]
  %v4_10c78 = mul i32 %v0_10cb8, 2048
  %v5_10c78 = xor i32 %v4_10c78, %v0_10cb8
  %v4_10c7c = udiv i32 %v0_10cbc, 524288
  %v5_10c7c = xor i32 %v4_10c7c, %v0_10cbc
  %v2_10c80 = xor i32 %v5_10c7c, %v5_10c78
  %v4_10c90 = udiv i32 %v5_10c78, 256
  %v5_10c90 = xor i32 %v4_10c90, %v2_10c80
  store i32 %v5_10c90, i32* %r3.global-to-local, align 4
  %v7_10c98 = icmp sgt i32 %v0_10cb0, 3
  br i1 %v7_10c98, label %.thread, label %dec_label_pc_10ca4

.thread:                                          ; preds = %dec_label_pc_10c78
  %v10_10c98 = inttoptr i32 %v9_10c98 to i32*
  store i32 %v5_10c90, i32* %v10_10c98, align 4
  %v11_10c98 = load i32, i32* %r5.global-to-local, align 4
  %v12_10c98 = add i32 %v11_10c98, 4
  store i32 %v12_10c98, i32* %r5.global-to-local, align 4
  %v8_10c9c = load i32, i32* %r4.global-to-local, align 4
  %v9_10c9c = add i32 %v8_10c9c, -4
  store i32 %v9_10c9c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10c60

dec_label_pc_10ca4:                               ; preds = %dec_label_pc_10c78
  store i32 %v5_10c90, i32* %r3.global-to-local, align 4
  %v7_10ca8 = icmp eq i32 %v0_10cb0, 1
  %v1_10cb0 = add i32 %v0_10cb0, -2
  store i32 %v1_10cb0, i32* %r4.global-to-local, align 4
  br i1 %v7_10ca8, label %dec_label_pc_10cb8, label %dec_label_pc_10c54

dec_label_pc_10cb8:                               ; preds = %dec_label_pc_10ca4
  store i32 %v5_10c90, i32* %r3.global-to-local, align 4
  %v1_10cc8 = load i32, i32* %r8.global-to-local, align 4
  %v2_10cc8 = inttoptr i32 %v1_10cc8 to i32*
  store i32 %v0_10cc8, i32* %v2_10cc8, align 4
  %v0_10ccc = load i32, i32* %r7.global-to-local, align 4
  %v1_10ccc = load i32, i32* %sl.global-to-local, align 4
  %v2_10ccc = inttoptr i32 %v1_10ccc to i32*
  store i32 %v0_10ccc, i32* %v2_10ccc, align 4
  %v0_10cd0 = load i32, i32* @lr, align 4
  %v1_10cd0 = load i32, i32* %sb.global-to-local, align 4
  %v2_10cd0 = inttoptr i32 %v1_10cd0 to i32*
  store i32 %v0_10cd0, i32* %v2_10cd0, align 4
  %v0_10cd4 = load i32, i32* %r3.global-to-local, align 4
  %v1_10cd4 = load i32, i32* %fp.global-to-local, align 4
  %v2_10cd4 = inttoptr i32 %v1_10cd4 to i32*
  store i32 %v0_10cd4, i32* %v2_10cd4, align 4
  %v0_10cd8 = load i32, i32* %r3.global-to-local, align 4
  %v1_10cd8 = trunc i32 %v0_10cd8 to i8
  %v2_10cd8 = load i32, i32* %r5.global-to-local, align 4
  %v3_10cd8 = inttoptr i32 %v2_10cd8 to i8*
  store i8 %v1_10cd8, i8* %v3_10cd8, align 1
  %v2_10cdc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_10cdc, i32* @r4, align 4
  store i32 %v9_10c20, i32* @r6, align 4
  store i32 %v12_10c20, i32* @r7, align 4
  store i32 %v15_10c20, i32* @r8, align 4
  store i32 %v18_10c20, i32* @sb, align 4
  store i32 %v21_10c20, i32* @sl, align 4
  store i32 %v24_10c20, i32* @fp, align 4
  ret i32 %v5_10c78

dec_label_pc_10ce0:                               ; preds = %dec_label_pc_10c60
  %v0_10ce0 = load i32, i32* %r3.global-to-local, align 4
  %v1_10ce0 = load i32, i32* %fp.global-to-local, align 4
  %v2_10ce0 = inttoptr i32 %v1_10ce0 to i32*
  store i32 %v0_10ce0, i32* %v2_10ce0, align 4
  %v0_10ce4 = load i32, i32* @lr, align 4
  %v1_10ce4 = load i32, i32* %sb.global-to-local, align 4
  %v2_10ce4 = inttoptr i32 %v1_10ce4 to i32*
  store i32 %v0_10ce4, i32* %v2_10ce4, align 4
  %v0_10ce8 = load i32, i32* %r7.global-to-local, align 4
  %v1_10ce8 = load i32, i32* %sl.global-to-local, align 4
  %v2_10ce8 = inttoptr i32 %v1_10ce8 to i32*
  store i32 %v0_10ce8, i32* %v2_10ce8, align 4
  %v0_10cec = load i32, i32* %r6.global-to-local, align 4
  %v1_10cec = load i32, i32* %r8.global-to-local, align 4
  %v2_10cec = inttoptr i32 %v1_10cec to i32*
  store i32 %v0_10cec, i32* %v2_10cec, align 4
  %v2_10cf0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_10cf0, i32* @r4, align 4
  store i32 %v9_10c20, i32* @r6, align 4
  store i32 %v12_10c20, i32* @r7, align 4
  store i32 %v15_10c20, i32* @r8, align 4
  store i32 %v18_10c20, i32* @sb, align 4
  store i32 %v21_10c20, i32* @sl, align 4
  store i32 %v24_10c20, i32* @fp, align 4
  ret i32 %v5_10c78

; uselistorder directives
  uselistorder i32 %v9_10c9c, { 1, 0 }
  uselistorder i32 %v12_10c98, { 1, 0 }
  uselistorder i32 %v5_10c90, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v5_10c78, { 1, 2, 0, 3 }
  uselistorder i32 %v0_10cb8, { 1, 0 }
  uselistorder i32 %v0_10cbc, { 1, 0 }
  uselistorder i32 %v0_10c60, { 1, 0 }
  uselistorder i32 %v24_10c20, { 1, 0 }
  uselistorder i32 %v21_10c20, { 1, 0 }
  uselistorder i32 %v18_10c20, { 1, 0 }
  uselistorder i32 %v15_10c20, { 1, 0 }
  uselistorder i32 %v12_10c20, { 1, 0 }
  uselistorder i32 %v9_10c20, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 5, 0, 3, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 5, 0, 1, 2, 4, 7, 6, 3 }
  uselistorder i32* @global_var_1f7cc.163, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1f7d0.167, { 2, 3, 4, 1, 0, 5, 6 }
  uselistorder i32* @global_var_1f7d4.169, { 3, 6, 1, 4, 2, 0, 5 }
  uselistorder i32* @global_var_1f7d8.165, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_10c78, { 1, 0 }
}

define i32 @function_10d04(i32 %arg1) local_unnamed_addr {
dec_label_pc_10d04:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10d04 = load i32, i32* @r4, align 4
  store i32 %v3_10d04, i32* %stack_var_-8, align 4
  %v6_10d04 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_10d08 = icmp eq i32 %arg1, 0
  br i1 %v2_10d08, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_10d04
  store i32 %v3_10d04, i32* @r4, align 4
  ret i32 0

bb3:                                              ; preds = %dec_label_pc_10d04
  %v1_10d10 = add i32 %arg1, 4
  %v2_10d10 = inttoptr i32 %v1_10d10 to i32*
  %v3_10d10 = load i32, i32* %v2_10d10, align 4
  %v1_10d18 = icmp ne i32 %v3_10d10, 0
  call void @__pseudo_cond_branch(i1 %v1_10d18, i32 ptrtoint (i32* @global_var_14e8c.58 to i32))
  %v0_10d1c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10d1c, i32* @r0, align 4
  %v2_10d20 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10d20, i32* @r4, align 4
  store i32 %v6_10d04, i32* @lr, align 4
  %v0_10d24 = call i32 @function_14e8c()
  ret i32 %v0_10d24
}

define i32 @function_10d28(i8* %arg1) local_unnamed_addr {
dec_label_pc_10d28:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-4288 = alloca i8, align 1
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2227 = alloca i32, align 4
  %stack_var_-2240 = alloca i8, align 1
  %stack_var_-2228 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_10d28 = load i32, i32* @r4, align 4
  store i32 %v3_10d28, i32* %stack_var_-36, align 4
  %v6_10d28 = load i32, i32* @r5, align 4
  %v9_10d28 = load i32, i32* @r6, align 4
  %v12_10d28 = load i32, i32* @r7, align 4
  %v15_10d28 = load i32, i32* @r8, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_10d40 = call i32 @function_14e34(i32 1, i32 8)
  %v0_10d48 = load i32, i32* @r4, align 4
  %v1_10d48 = inttoptr i32 %v0_10d48 to i8*
  store i32 %v0_10d48, i32* %r0.global-to-local, align 4
  %v3_10d4c = call i32 @function_13874(i8* %v1_10d48)
  %v2_10d54 = ptrtoint i32* %stack_var_-2228 to i32
  store i32 %v2_10d54, i32* %fp.global-to-local, align 4
  %v2_10d58 = ptrtoint i8* %stack_var_-2240 to i32
  %v1_10d5c = add i32 %v3_10d4c, 1
  store i32 %v1_10d5c, i32* %r0.global-to-local, align 4
  %v2_10d60 = ptrtoint i32* %stack_var_-2227 to i32
  store i32 %v2_10d60, i32* %r2.global-to-local, align 4
  store i32 %v2_10d54, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_10da0162 = icmp eq i32 %v1_10d5c, 0
  store i1 %v2_10da0162, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_10da8163 = or i32 %v2_10d60, 1
  store i32 %v1_10da8163, i32* %r1.global-to-local, align 4
  %tmp124164 = icmp slt i32 %v1_10d5c, 1
  br i1 %tmp124164, label %dec_label_pc_10db0, label %dec_label_pc_10d70.lr.ph

dec_label_pc_10d70.lr.ph:                         ; preds = %dec_label_pc_10d28
  %v0_10d70.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10d70

dec_label_pc_10d70:                               ; preds = %dec_label_pc_10d70.lr.ph, %.thread12
  %v1_10d84176.off0 = phi i8 [ 0, %dec_label_pc_10d70.lr.ph ], [ %extract.t179, %.thread12 ]
  %v0_10d70 = phi i32 [ %v0_10d70.pre, %dec_label_pc_10d70.lr.ph ], [ %v1_10d94, %.thread12 ]
  %v2_10db4165 = phi i32 [ %v2_10d60, %dec_label_pc_10d70.lr.ph ], [ %v0_10d9c, %.thread12 ]
  %v1_10d70 = inttoptr i32 %v0_10d70 to i8*
  %v2_10d70 = load i8, i8* %v1_10d70, align 1
  %v3_10d70 = zext i8 %v2_10d70 to i32
  store i32 %v3_10d70, i32* %r3.global-to-local, align 4
  %v2_10d74 = icmp eq i8 %v2_10d70, 0
  store i1 %v2_10d74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10d74, label %.thread6, label %bb

bb:                                               ; preds = %dec_label_pc_10d70
  %v8_10d78 = icmp eq i8 %v2_10d70, 46
  store i1 %v8_10d78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10d78, label %.thread6, label %.thread

.thread:                                          ; preds = %bb
  %v4_10d7c = inttoptr i32 %v2_10db4165 to i8*
  store i8 %v2_10d70, i8* %v4_10d7c, align 1
  %v5_10d7c = load i32, i32* %r2.global-to-local, align 4
  %v6_10d7c = add i32 %v5_10d7c, 1
  store i32 %v6_10d7c, i32* %r2.global-to-local, align 4
  %v0_10d80.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10d80.pr.pr, label %.thread..thread6_crit_edge, label %bb122

.thread..thread6_crit_edge:                       ; preds = %.thread
  %v1_10d84.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t = trunc i32 %v1_10d84.pre to i8
  br label %.thread6

.thread6:                                         ; preds = %.thread..thread6_crit_edge, %bb, %dec_label_pc_10d70
  %v1_10d84.off0 = phi i8 [ %extract.t, %.thread..thread6_crit_edge ], [ %v1_10d84176.off0, %bb ], [ %v1_10d84176.off0, %dec_label_pc_10d70 ]
  %v3_10d84 = load i32, i32* %r5.global-to-local, align 4
  %v4_10d84 = inttoptr i32 %v3_10d84 to i8*
  store i8 %v1_10d84.off0, i8* %v4_10d84, align 1
  %v0_10d88.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10d88.pr, label %bb123, label %..thread12_crit_edge

bb122:                                            ; preds = %.thread
  store i32 %v6_10d7c, i32* %r1.global-to-local, align 4
  %v1_10d88 = load i32, i32* %ip.global-to-local, align 4
  %v2_10d88 = urem i32 %v1_10d88, 256
  store i32 %v2_10d88, i32* %lr.global-to-local, align 4
  br label %.thread12

..thread12_crit_edge:                             ; preds = %.thread6
  %v1_10d8810 = load i32, i32* %ip.global-to-local, align 4
  %v2_10d8811 = urem i32 %v1_10d8810, 256
  store i32 %v2_10d8811, i32* %lr.global-to-local, align 4
  br label %.thread12

bb123:                                            ; preds = %.thread6
  %v1_10d8c.pre = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_10d8c.pre, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb122, %..thread12_crit_edge, %bb123
  %v0_10da4.pre = phi i32 [ %v2_10d8811, %..thread12_crit_edge ], [ %v2_10d88, %bb122 ], [ 0, %bb123 ]
  %v0_10d94 = load i32, i32* @r4, align 4
  %v1_10d94 = add i32 %v0_10d94, 1
  store i32 %v1_10d94, i32* @r4, align 4
  %v0_10d98 = load i32, i32* %r0.global-to-local, align 4
  %v1_10d98 = add i32 %v0_10d98, -1
  store i32 %v1_10d98, i32* %r0.global-to-local, align 4
  %v0_10d9c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_10d9c, i32* %r2.global-to-local, align 4
  %v2_10da0 = icmp eq i32 %v1_10d98, 0
  store i1 %v2_10da0, i1* %cpsr_z.global-to-local, align 1
  %v1_10da4 = add nuw nsw i32 %v0_10da4.pre, 1
  store i32 %v1_10da4, i32* %ip.global-to-local, align 4
  %v1_10da8 = add i32 %v0_10d9c, 1
  store i32 %v1_10da8, i32* %r1.global-to-local, align 4
  %tmp124 = icmp slt i32 %v1_10d98, 1
  %extract.t179 = trunc i32 %v0_10da4.pre to i8
  br i1 %tmp124, label %dec_label_pc_10db0, label %dec_label_pc_10d70

dec_label_pc_10db0:                               ; preds = %.thread12, %dec_label_pc_10d28
  %v2_10db4.lcssa = phi i32 [ %v2_10d60, %dec_label_pc_10d28 ], [ %v0_10d9c, %.thread12 ]
  %v3_10d40 = inttoptr i32 %v2_10d40 to i8*
  store i32 0, i32* @r4, align 4
  %v3_10db4 = inttoptr i32 %v2_10db4.lcssa to i8*
  store i8 0, i8* %v3_10db4, align 1
  store i32 %v2_10d54, i32* %r0.global-to-local, align 4
  %v1_10dbc = bitcast i32* %stack_var_-2228 to i8*
  %v2_10dbc = call i32 @function_13874(i8* %v1_10dbc)
  %v2_10dc0 = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_10dc0, i32* %r1.global-to-local, align 4
  %v0_10dc4 = load i32, i32* %fp.global-to-local, align 4
  %v2_10dc4 = add i32 %v0_10dc4, %v2_10dbc
  store i32 %v2_10dc4, i32* @r5, align 4
  %v0_10dc8 = load i32, i32* @r4, align 4
  store i32 %v0_10dc8, i32* %stack_var_-64, align 4
  store i32 %v2_10d54, i32* %r0.global-to-local, align 4
  %v2_10ddc = call i32 @function_13874(i8* %v1_10dbc)
  %v1_10de0 = add i32 %v2_10ddc, 17
  store i32 %v1_10de0, i32* %r0.global-to-local, align 4
  %v0_10de8 = call i32 @function_10a44()
  store i32 %v0_10de8, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r1.global-to-local, align 4
  %v2_10df4 = call i32 @function_13f90(i32 %v0_10de8, i32 65535)
  store i32 16, i32* %r1.global-to-local, align 4
  %v6_10e00 = urem i32 %v2_10df4, 65536
  store i32 %v6_10e00, i32* %r3.global-to-local, align 4
  %v2_10e08 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_10e08, i32* %r0.global-to-local, align 4
  %v2_10e10 = call i32 @function_13914(i32 %v2_10e08, i32 16)
  %sext = mul i32 %v2_10df4, 16777216
  %v4_10e14 = sdiv i32 %sext, 16777216
  store i32 2, i32* %stack_var_-64, align 4
  store i32 %v2_10dc0, i32* %r3.global-to-local, align 4
  store i32 53, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v4_10e14, i32* %lr.global-to-local, align 4
  %v0_10e5c = load i32, i32* @r5, align 4
  %v2_10e5c = add i32 %v0_10e5c, 1
  store i32 %v2_10e5c, i32* %ip.global-to-local, align 4
  %v2_10e60 = ptrtoint i8* %stack_var_-4288 to i32
  store i32 %v2_10e60, i32* %r1.global-to-local, align 4
  %v5_10e64 = trunc i32 %v4_10e14 to i8
  store i8 %v5_10e64, i8* %stack_var_-2240, align 1
  %v0_10e7c = load i32, i32* @r4, align 4
  %v1_10e7c = trunc i32 %v0_10e7c to i8
  %v4_10e7c = inttoptr i32 %v2_10e5c to i8*
  store i8 %v1_10e7c, i8* %v4_10e7c, align 1
  %v0_10e80 = load i32, i32* @r4, align 4
  %v1_10e80 = trunc i32 %v0_10e80 to i8
  %v2_10e80 = load i32, i32* %ip.global-to-local, align 4
  %v3_10e80 = add i32 %v2_10e80, 2
  %v4_10e80 = inttoptr i32 %v3_10e80 to i8*
  store i8 %v1_10e80, i8* %v4_10e80, align 1
  %v0_10e84 = load i32, i32* %r0.global-to-local, align 4
  %v1_10e84 = trunc i32 %v0_10e84 to i8
  %v2_10e84 = load i32, i32* %ip.global-to-local, align 4
  %v3_10e84 = add i32 %v2_10e84, 3
  %v4_10e84 = inttoptr i32 %v3_10e84 to i8*
  store i8 %v1_10e84, i8* %v4_10e84, align 1
  %v0_10e88 = load i32, i32* %r0.global-to-local, align 4
  %v1_10e88 = trunc i32 %v0_10e88 to i8
  %v2_10e88 = load i32, i32* %ip.global-to-local, align 4
  %v3_10e88 = add i32 %v2_10e88, 1
  %v4_10e88 = inttoptr i32 %v3_10e88 to i8*
  store i8 %v1_10e88, i8* %v4_10e88, align 1
  %v0_10e90 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10e90, i32* %sl.global-to-local, align 4
  %v2_10e98 = ptrtoint i32* %stack_var_-192 to i32
  store i32 %v2_10e98, i32* @r6, align 4
  %v3_10ed0 = bitcast i32* %stack_var_-64 to %sockaddr*
  %v4_10eec = bitcast i8* %stack_var_-2240 to i32*
  %v2_10f3c = ptrtoint i32* %stack_var_-36 to i32
  %v2_10f68 = ptrtoint i32* %stack_var_-48 to i32
  %v6_10fc4 = bitcast i8* %stack_var_-4288 to i32*
  %v1_11040 = add i32 %v2_10e60, 12
  %v1_11048 = inttoptr i32 %v1_11040 to i8*
  %v1_1105c = add i32 %v2_10e60, 1
  %v2_1105c = inttoptr i32 %v1_1105c to i8*
  %v1_11078 = add i32 %v2_10e60, 6
  %v2_11078 = inttoptr i32 %v1_11078 to i8*
  %v1_1107c = add i32 %v2_10e60, 7
  %v2_1107c = inttoptr i32 %v1_1107c to i8*
  br label %dec_label_pc_10e9c

dec_label_pc_10e9c:                               ; preds = %dec_label_pc_10ff0, %dec_label_pc_10db0
  %v1_10ea0 = phi i32 [ %v0_10e9c.pre, %dec_label_pc_10ff0 ], [ -1, %dec_label_pc_10db0 ]
  %v7_10e9c = icmp eq i32 %v1_10ea0, -1
  store i1 %v7_10e9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e9c, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_10e9c
  store i32 %v1_10ea0, i32* %r0.global-to-local, align 4
  br label %bb126

bb126:                                            ; preds = %dec_label_pc_10e9c, %bb125
  store i32 69288, i32* @lr, align 4
  %v1_10ea4 = xor i1 %v7_10e9c, true
  call void @__pseudo_cond_branch(i1 %v1_10ea4, i32 ptrtoint (i32* @global_var_14234.25 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_10eb4 = call i32 @function_14b30(i32 2, i32 2, i32 0)
  store i32 %v3_10eb4, i32* %r0.global-to-local, align 4
  %v7_10eb8 = icmp eq i32 %v3_10eb4, -1
  store i1 %v7_10eb8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_10eb4, i32* @r7, align 4
  br i1 %v7_10eb8, label %dec_label_pc_11030, label %dec_label_pc_10ec4

dec_label_pc_10ec4:                               ; preds = %bb126
  store i32 %v2_10e08, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_10ed0 = call i32 @function_1498c(i32 %v3_10eb4, %sockaddr* %v3_10ed0, i32 16)
  store i32 %v4_10ed0, i32* %r0.global-to-local, align 4
  %v7_10ed4 = icmp eq i32 %v4_10ed0, -1
  store i1 %v7_10ed4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ed4, label %dec_label_pc_10ff8, label %dec_label_pc_10edc

dec_label_pc_10edc:                               ; preds = %dec_label_pc_10ec4
  %v0_10edc = load i32, i32* @r7, align 4
  store i32 %v0_10edc, i32* %r0.global-to-local, align 4
  store i32 %v2_10d58, i32* %r1.global-to-local, align 4
  store i32 %v1_10de0, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10eec = call i32 @function_14aa0(i32 %v0_10edc, i32* %v4_10eec, i32 %v1_10de0, i32 16384)
  store i32 %v5_10eec, i32* %r0.global-to-local, align 4
  %v7_10ef0 = icmp eq i32 %v5_10eec, -1
  store i1 %v7_10ef0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ef0, label %dec_label_pc_10ff8, label %dec_label_pc_10ef8

dec_label_pc_10ef8:                               ; preds = %dec_label_pc_10edc
  %v0_10ef8 = load i32, i32* @r7, align 4
  store i32 %v0_10ef8, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_10f04 = call i32 @function_14144(i32 3, i32 %v0_10ef8)
  store i32 0, i32* @r4, align 4
  %v1_10f0c = or i32 %v2_10f04, 2048
  store i32 %v1_10f0c, i32* @r2, align 4
  %v0_10f10 = load i32, i32* @r7, align 4
  store i32 %v0_10f10, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_10f18 = call i32 @function_14144(i32 4, i32 %v0_10f10)
  store i32 %v2_10f18, i32* %r0.global-to-local, align 4
  %v0_10f1c = load i32, i32* @r4, align 4
  store i32 %v0_10f1c, i32* %r3.global-to-local, align 4
  %v2_10f20154 = load i32, i32* @r6, align 4
  %v3_10f20155 = add i32 %v2_10f20154, %v0_10f1c
  %v4_10f20156 = inttoptr i32 %v3_10f20155 to i32*
  store i32 %v0_10f1c, i32* %v4_10f20156, align 4
  %v0_10f24157 = load i32, i32* %r3.global-to-local, align 4
  %v1_10f24158 = add i32 %v0_10f24157, 4
  store i32 %v1_10f24158, i32* %r3.global-to-local, align 4
  %v7_10f28159 = icmp eq i32 %v1_10f24158, 128
  br i1 %v7_10f28159, label %dec_label_pc_10f30, label %dec_label_pc_10f20.dec_label_pc_10f20_crit_edge

dec_label_pc_10f20.dec_label_pc_10f20_crit_edge:  ; preds = %dec_label_pc_10ef8, %dec_label_pc_10f20.dec_label_pc_10f20_crit_edge
  %v1_10f24160 = phi i32 [ %v1_10f24, %dec_label_pc_10f20.dec_label_pc_10f20_crit_edge ], [ %v1_10f24158, %dec_label_pc_10ef8 ]
  %v0_10f20.pre = load i32, i32* @r4, align 4
  %v2_10f20 = load i32, i32* @r6, align 4
  %v3_10f20 = add i32 %v2_10f20, %v1_10f24160
  %v4_10f20 = inttoptr i32 %v3_10f20 to i32*
  store i32 %v0_10f20.pre, i32* %v4_10f20, align 4
  %v0_10f24 = load i32, i32* %r3.global-to-local, align 4
  %v1_10f24 = add i32 %v0_10f24, 4
  store i32 %v1_10f24, i32* %r3.global-to-local, align 4
  %v7_10f28 = icmp eq i32 %v1_10f24, 128
  br i1 %v7_10f28, label %dec_label_pc_10f30, label %dec_label_pc_10f20.dec_label_pc_10f20_crit_edge

dec_label_pc_10f30:                               ; preds = %dec_label_pc_10f20.dec_label_pc_10f20_crit_edge, %dec_label_pc_10ef8
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_10f30 = load i32, i32* @r7, align 4
  %v3_10f30 = udiv i32 %v0_10f30, 32
  %v3_10f38 = mul nuw nsw i32 %v3_10f30, 4
  store i32 %v3_10f38, i32* %r3.global-to-local, align 4
  store i32 %v2_10f3c, i32* %r2.global-to-local, align 4
  %v2_10f40 = add i32 %v3_10f38, %v2_10f3c
  store i32 %v2_10f40, i32* @r5, align 4
  %v1_10f44 = add i32 %v2_10f40, -156
  %v2_10f44 = inttoptr i32 %v1_10f44 to i32*
  %v3_10f44 = load i32, i32* %v2_10f44, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_10f4c = urem i32 %v0_10f30, 32
  store i32 %v1_10f4c, i32* @r8, align 4
  %v7_10f50 = shl i32 1, %v1_10f4c
  %v8_10f50 = or i32 %v3_10f44, %v7_10f50
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_10f50, i32* %v2_10f44, align 4
  %v0_10f60 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_10f60, i32* %stack_var_-48, align 4
  store i32 %v2_10f68, i32* @lr, align 4
  store i32 %v2_10dc0, i32* %ip.global-to-local, align 4
  %v0_10f70 = load i32, i32* @r7, align 4
  %v1_10f70 = load i32, i32* %r3.global-to-local, align 4
  %v2_10f70 = add i32 %v1_10f70, %v0_10f70
  store i32 %v2_10f70, i32* %r0.global-to-local, align 4
  store i32 %v2_10e98, i32* %r1.global-to-local, align 4
  %v0_10f7c = load i32, i32* @r4, align 4
  store i32 %v0_10f7c, i32* %r2.global-to-local, align 4
  store i32 %v0_10f7c, i32* %r3.global-to-local, align 4
  %v5_10f88 = call i32 @function_14454(i32 %v2_10f70, i32 %v2_10e98, i32 %v0_10f7c, i32 %v0_10f7c, i32 %v2_10f68)
  store i32 %v5_10f88, i32* %r0.global-to-local, align 4
  %v7_10f8c = icmp eq i32 %v5_10f88, -1
  store i1 %v7_10f8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f8c, label %dec_label_pc_11008, label %dec_label_pc_10f94

dec_label_pc_10f94:                               ; preds = %dec_label_pc_10f30
  %v2_10f94 = icmp eq i32 %v5_10f88, 0
  store i1 %v2_10f94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10f94, label %dec_label_pc_10fe8, label %dec_label_pc_10f9c

dec_label_pc_10f9c:                               ; preds = %dec_label_pc_10f94
  %v0_10f9c = load i32, i32* @r5, align 4
  %v1_10f9c = add i32 %v0_10f9c, -156
  %v2_10f9c = inttoptr i32 %v1_10f9c to i32*
  %v3_10f9c = load i32, i32* %v2_10f9c, align 4
  %v1_10fa0 = load i32, i32* @r8, align 4
  %v6_10fa0 = ashr i32 %v3_10f9c, %v1_10fa0
  store i32 %v6_10fa0, i32* %r3.global-to-local, align 4
  %v1_10fa4 = urem i32 %v6_10fa0, 2
  %v2_10fa4 = icmp eq i32 %v1_10fa4, 0
  store i1 %v2_10fa4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10fa4, label %dec_label_pc_11008, label %dec_label_pc_10fac

dec_label_pc_10fac:                               ; preds = %dec_label_pc_10f9c
  store i32 %v2_10e60, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10fb8 = load i32, i32* @r7, align 4
  store i32 %v0_10fb8, i32* %r0.global-to-local, align 4
  %v0_10fbc = load i32, i32* @r4, align 4
  %v7_10fc4 = call i32 @function_14a6c(i32 %v0_10fb8, i32* %v6_10fc4, i32 2048, i32 16384, i32 %v0_10fbc, i32 %v0_10fbc)
  store i32 %v7_10fc4, i32* %r4.global-to-local, align 4
  %v0_10fcc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_10fcc, i32* %r0.global-to-local, align 4
  %v1_10fd0 = inttoptr i32 %v0_10fcc to i8*
  %v2_10fd0 = call i32 @function_13874(i8* %v1_10fd0)
  %v1_10fd4 = add i32 %v2_10fd0, 17
  store i32 %v1_10fd4, i32* %r0.global-to-local, align 4
  %v0_10fd8 = load i32, i32* %r4.global-to-local, align 4
  %v3_10fd8 = icmp ult i32 %v0_10fd8, %v1_10fd4
  %v9_10fd8 = icmp eq i32 %v0_10fd8, %v1_10fd4
  store i1 %v9_10fd8, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* @r4, align 4
  br i1 %v3_10fd8, label %dec_label_pc_10fe8, label %dec_label_pc_1103c

dec_label_pc_10fe8:                               ; preds = %dec_label_pc_10fac, %dec_label_pc_1103c, %dec_label_pc_11078, %dec_label_pc_10f94, %dec_label_pc_11030
  %v0_10fe8 = load i32, i32* %sl.global-to-local, align 4
  %v7_10fe8 = icmp eq i32 %v0_10fe8, 5
  store i1 %v7_10fe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10fe8, label %dec_label_pc_11008, label %dec_label_pc_10ff0

dec_label_pc_10ff0:                               ; preds = %dec_label_pc_10ff8, %dec_label_pc_10fe8
  %v0_10ff0 = phi i32 [ %v0_11000, %dec_label_pc_10ff8 ], [ %v0_10fe8, %dec_label_pc_10fe8 ]
  %v1_10ff0 = add i32 %v0_10ff0, 1
  store i32 %v1_10ff0, i32* %sl.global-to-local, align 4
  %v0_10e9c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10e9c

dec_label_pc_10ff8:                               ; preds = %dec_label_pc_10edc, %dec_label_pc_10ec4
  %v0_10ff8 = phi i32 [ %v5_10eec, %dec_label_pc_10edc ], [ %v4_10ed0, %dec_label_pc_10ec4 ]
  %v1_10ff8 = add i32 %v0_10ff8, 2
  store i32 %v1_10ff8, i32* %r0.global-to-local, align 4
  %v1_10ffc = call i32 @function_15664(i32 %v1_10ff8)
  store i32 %v1_10ffc, i32* %r0.global-to-local, align 4
  %v0_11000 = load i32, i32* %sl.global-to-local, align 4
  %v7_11000 = icmp eq i32 %v0_11000, 5
  store i1 %v7_11000, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11000, label %dec_label_pc_11008, label %dec_label_pc_10ff0

dec_label_pc_11008:                               ; preds = %dec_label_pc_10ff8, %dec_label_pc_10fe8, %dec_label_pc_10f9c, %dec_label_pc_10f30, %dec_label_pc_11088, %dec_label_pc_11094.backedge
  %v0_11008 = load i32, i32* @r7, align 4
  store i32 %v0_11008, i32* %r0.global-to-local, align 4
  %v1_1100c = call i32 @function_14234(i32 %v0_11008)
  store i32 %v1_1100c, i32* %r0.global-to-local, align 4
  store i32 %v2_10d40, i32* %r2.global-to-local, align 4
  %v2_11014 = load i8, i8* %v3_10d40, align 1
  %v3_11014 = zext i8 %v2_11014 to i32
  store i32 %v3_11014, i32* @r4, align 4
  %v2_11018 = icmp eq i8 %v2_11014, 0
  store i1 %v2_11018, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11018, label %dec_label_pc_11174, label %dec_label_pc_11020

dec_label_pc_11020:                               ; preds = %dec_label_pc_11008, %dec_label_pc_11174
  %stack_var_-4300.0 = phi i8* [ %v5_11188, %dec_label_pc_11174 ], [ %v3_10d40, %dec_label_pc_11008 ]
  %v4_11020 = ptrtoint i8* %stack_var_-4300.0 to i32
  store i32 %v4_11020, i32* %r0.global-to-local, align 4
  %v2_1102c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1102c, i32* @r4, align 4
  store i32 %v6_10d28, i32* @r5, align 4
  store i32 %v9_10d28, i32* @r6, align 4
  store i32 %v12_10d28, i32* @r7, align 4
  store i32 %v15_10d28, i32* @r8, align 4
  ret i32 %v4_11020

dec_label_pc_11030:                               ; preds = %bb126
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_11034 = call i32 @function_15664(i32 1)
  store i32 %v1_11034, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_1103c:                               ; preds = %dec_label_pc_10fac
  store i32 %v2_10e60, i32* %lr.global-to-local, align 4
  store i32 %v1_11040, i32* %fp.global-to-local, align 4
  store i32 %v1_11040, i32* %r0.global-to-local, align 4
  %v2_11048 = call i32 @function_13874(i8* %v1_11048)
  store i32 %v2_11048, i32* %r0.global-to-local, align 4
  store i32 %v2_10e60, i32* %ip.global-to-local, align 4
  store i32 %v2_10f3c, i32* %r1.global-to-local, align 4
  %v4_11058 = load i8, i8* %stack_var_-4288, align 1
  %v5_11058 = sext i8 %v4_11058 to i32
  store i32 %v5_11058, i32* %r3.global-to-local, align 4
  %v3_1105c = load i8, i8* %v2_1105c, align 1
  %v4_1105c = zext i8 %v3_1105c to i32
  store i32 %v4_1105c, i32* %r2.global-to-local, align 4
  store i32 %v4_10e14, i32* @lr, align 4
  %v4_11064 = mul nuw nsw i32 %v4_1105c, 256
  %v5_11064 = or i32 %v4_11064, %v5_11058
  store i32 %v5_11064, i32* %r3.global-to-local, align 4
  %v0_11068 = load i32, i32* %fp.global-to-local, align 4
  %v9_1106c = icmp eq i32 %v5_11064, %v4_10e14
  store i1 %v9_1106c, i1* %cpsr_z.global-to-local, align 1
  %v2_11068 = add i32 %v2_11048, 5
  %v1_11070 = add i32 %v2_11068, %v0_11068
  store i32 %v1_11070, i32* %r0.global-to-local, align 4
  br i1 %v9_1106c, label %dec_label_pc_11078, label %dec_label_pc_10fe8

dec_label_pc_11078:                               ; preds = %dec_label_pc_1103c
  %v3_11078 = load i8, i8* %v2_11078, align 1
  %v4_11078 = zext i8 %v3_11078 to i32
  store i32 %v4_11078, i32* %r2.global-to-local, align 4
  %v3_1107c = load i8, i8* %v2_1107c, align 1
  %v4_1107c = zext i8 %v3_1107c to i32
  store i32 %v4_1107c, i32* %r3.global-to-local, align 4
  %v4_11080 = mul nuw nsw i32 %v4_1107c, 256
  %v5_11080 = or i32 %v4_11080, %v4_11078
  store i32 %v5_11080, i32* %r2.global-to-local, align 4
  %v7_11080 = icmp eq i32 %v5_11080, 0
  store i1 %v7_11080, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11080, label %dec_label_pc_10fe8, label %dec_label_pc_11088

dec_label_pc_11088:                               ; preds = %dec_label_pc_11078
  %v3_1108c = mul nuw nsw i32 %v4_11078, 256
  %v5_11090 = or i32 %v4_1107c, %v3_1108c
  %v1_11148 = add i32 %v2_10e60, -49152
  %v1_11094143 = add nsw i32 %v5_11090, -1
  %v3_11098144 = mul i32 %v1_11094143, 65536
  store i32 %v3_11098144, i32* %r3.global-to-local, align 4
  %v7_1109c150 = icmp eq i32 %v3_11098144, -65536
  store i1 %v7_1109c150, i1* %cpsr_z.global-to-local, align 1
  %v3_110a0151 = urem i32 %v1_11094143, 65536
  store i32 %v3_110a0151, i32* @r6, align 4
  br i1 %v7_1109c150, label %dec_label_pc_11008, label %dec_label_pc_110a8.lr.ph

dec_label_pc_110a8.lr.ph:                         ; preds = %dec_label_pc_11088
  %v1_11224 = add i32 %v2_10d40, 4
  %v2_11224 = inttoptr i32 %v1_11224 to i32*
  br label %dec_label_pc_110a8

dec_label_pc_110a8:                               ; preds = %dec_label_pc_110a8.lr.ph, %dec_label_pc_11094.backedge
  %v3_110a0153 = phi i32 [ %v3_110a0151, %dec_label_pc_110a8.lr.ph ], [ %v3_110a0, %dec_label_pc_11094.backedge ]
  %v0_110fc152 = phi i32 [ %v1_11070, %dec_label_pc_110a8.lr.ph ], [ %storemerge, %dec_label_pc_11094.backedge ]
  store i32 %v0_110fc152, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_110b417 = inttoptr i32 %v0_110fc152 to i8*
  %v2_110b418 = load i8, i8* %v1_110b417, align 1
  %v3_110b419 = zext i8 %v2_110b418 to i32
  store i32 %v3_110b419, i32* %r2.global-to-local, align 4
  %v2_110b820 = icmp eq i8 %v2_110b418, 0
  store i1 %v2_110b820, i1* %cpsr_z.global-to-local, align 1
  %v3_110bc21 = mul nuw nsw i32 %v3_110b419, 256
  store i32 %v3_110bc21, i32* %r1.global-to-local, align 4
  br i1 %v2_110b820, label %dec_label_pc_110f4, label %dec_label_pc_110c4.preheader

dec_label_pc_110c4.preheader:                     ; preds = %dec_label_pc_110a8, %dec_label_pc_110b4.backedge
  %v1_11198 = phi i32 [ %v1_1119849, %dec_label_pc_110b4.backedge ], [ 1, %dec_label_pc_110a8 ]
  %v0_1119047 = phi i32 [ %v0_11190, %dec_label_pc_110b4.backedge ], [ 0, %dec_label_pc_110a8 ]
  %v0_110d045 = phi i32 [ %v3_110bc, %dec_label_pc_110b4.backedge ], [ %v3_110bc21, %dec_label_pc_110a8 ]
  %v0_110cc43 = phi i32 [ %v1_11194, %dec_label_pc_110b4.backedge ], [ %v0_110fc152, %dec_label_pc_110a8 ]
  %v0_110c441 = phi i32 [ %v3_110b4, %dec_label_pc_110b4.backedge ], [ %v3_110b419, %dec_label_pc_110a8 ]
  br label %dec_label_pc_110c4

dec_label_pc_110c4:                               ; preds = %dec_label_pc_110c4.preheader, %dec_label_pc_110cc
  %v0_11190 = phi i32 [ %v0_1119047, %dec_label_pc_110c4.preheader ], [ 1, %dec_label_pc_110cc ]
  %v0_110d0 = phi i32 [ %v0_110d045, %dec_label_pc_110c4.preheader ], [ %v3_110ec, %dec_label_pc_110cc ]
  %v0_11194 = phi i32 [ %v0_110cc43, %dec_label_pc_110c4.preheader ], [ %v2_110dc, %dec_label_pc_110cc ]
  %v0_110c4 = phi i32 [ %v0_110c441, %dec_label_pc_110c4.preheader ], [ %v3_110e0, %dec_label_pc_110cc ]
  %v7_110c4 = icmp eq i32 %v0_110c4, 191
  store i1 %v7_110c4, i1* %cpsr_z.global-to-local, align 1
  %tmp180 = icmp ult i32 %v0_110c4, 192
  br i1 %tmp180, label %dec_label_pc_11190, label %dec_label_pc_110cc

dec_label_pc_110cc:                               ; preds = %dec_label_pc_110c4
  %v1_110cc = add i32 %v0_11194, 1
  %v2_110cc = inttoptr i32 %v1_110cc to i8*
  %v3_110cc = load i8, i8* %v2_110cc, align 1
  %v4_110cc = zext i8 %v3_110cc to i32
  store i32 %v2_10e60, i32* %r1.global-to-local, align 4
  %v2_110d0 = add i32 %v0_110d0, %v1_11148
  %v2_110dc = add i32 %v2_110d0, %v4_110cc
  store i32 %v2_110dc, i32* %r3.global-to-local, align 4
  %v1_110e0 = inttoptr i32 %v2_110dc to i8*
  %v2_110e0 = load i8, i8* %v1_110e0, align 1
  %v3_110e0 = zext i8 %v2_110e0 to i32
  store i32 %v3_110e0, i32* %r2.global-to-local, align 4
  %v2_110e4 = icmp eq i8 %v2_110e0, 0
  store i1 %v2_110e4, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v3_110ec = mul nuw nsw i32 %v3_110e0, 256
  store i32 %v3_110ec, i32* %r1.global-to-local, align 4
  br i1 %v2_110e4, label %dec_label_pc_110f4, label %dec_label_pc_110c4

dec_label_pc_110f4:                               ; preds = %dec_label_pc_110b4.backedge, %dec_label_pc_110cc, %dec_label_pc_110a8
  %v1_110f8 = phi i32 [ 1, %dec_label_pc_110a8 ], [ %v1_11198, %dec_label_pc_110cc ], [ %v1_1119849, %dec_label_pc_110b4.backedge ]
  %v0_110f4 = phi i32 [ 0, %dec_label_pc_110a8 ], [ 1, %dec_label_pc_110cc ], [ %v0_11190, %dec_label_pc_110b4.backedge ]
  %v7_110f4 = icmp eq i32 %v0_110f4, 1
  store i1 %v7_110f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_110f4, label %bb127, label %bb128

bb127:                                            ; preds = %dec_label_pc_110f4
  %v2_110f8 = add i32 %v1_110f8, 1
  store i32 %v2_110f8, i32* %ip.global-to-local, align 4
  br label %bb128

bb128:                                            ; preds = %dec_label_pc_110f4, %bb127
  %v1_110fc = phi i32 [ %v1_110f8, %dec_label_pc_110f4 ], [ %v2_110f8, %bb127 ]
  %v2_110fc = add i32 %v1_110fc, %v0_110fc152
  store i32 %v2_110fc, i32* @r4, align 4
  %v3_11100 = inttoptr i32 %v2_110fc to i8*
  %v4_11100 = load i8, i8* %v3_11100, align 1
  %v6_11100 = zext i8 %v4_11100 to i32
  store i32 %v6_11100, i32* %r3.global-to-local, align 4
  %v1_11104 = add i32 %v2_110fc, 1
  %v2_11104 = inttoptr i32 %v1_11104 to i8*
  %v3_11104 = load i8, i8* %v2_11104, align 1
  %v4_11104 = zext i8 %v3_11104 to i32
  store i32 %v4_11104, i32* %r2.global-to-local, align 4
  %v4_11108 = mul nuw nsw i32 %v4_11104, 256
  %v5_11108 = or i32 %v4_11108, %v6_11100
  store i32 %v5_11108, i32* %r3.global-to-local, align 4
  %v7_1110c = icmp eq i32 %v5_11108, 256
  store i1 %v7_1110c, i1* %cpsr_z.global-to-local, align 1
  %v1_11110 = add i32 %v2_110fc, 10
  store i32 %v1_11110, i32* @r5, align 4
  br i1 %v7_1110c, label %dec_label_pc_111b0, label %dec_label_pc_11118

dec_label_pc_11118:                               ; preds = %dec_label_pc_111b0, %bb128
  store i32 %v1_11110, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_1112423 = inttoptr i32 %v1_11110 to i8*
  %v2_1112424 = load i8, i8* %v1_1112423, align 1
  %v3_1112425 = zext i8 %v2_1112424 to i32
  store i32 %v3_1112425, i32* %r2.global-to-local, align 4
  %v2_1112826 = icmp eq i8 %v2_1112424, 0
  store i1 %v2_1112826, i1* %cpsr_z.global-to-local, align 1
  %v3_1112c27 = mul nuw nsw i32 %v3_1112425, 256
  store i32 %v3_1112c27, i32* %r1.global-to-local, align 4
  br i1 %v2_1112826, label %dec_label_pc_11164, label %dec_label_pc_11134.preheader

dec_label_pc_11134.preheader:                     ; preds = %dec_label_pc_11118, %dec_label_pc_11124.backedge
  %v1_111a8 = phi i32 [ %v1_111a864, %dec_label_pc_11124.backedge ], [ 1, %dec_label_pc_11118 ]
  %v0_111a062 = phi i32 [ %v0_111a0, %dec_label_pc_11124.backedge ], [ 0, %dec_label_pc_11118 ]
  %v0_1114060 = phi i32 [ %v3_1112c, %dec_label_pc_11124.backedge ], [ %v3_1112c27, %dec_label_pc_11118 ]
  %v0_1113c58 = phi i32 [ %v1_111a4, %dec_label_pc_11124.backedge ], [ %v1_11110, %dec_label_pc_11118 ]
  %v0_1113456 = phi i32 [ %v3_11124, %dec_label_pc_11124.backedge ], [ %v3_1112425, %dec_label_pc_11118 ]
  br label %dec_label_pc_11134

dec_label_pc_11134:                               ; preds = %dec_label_pc_11134.preheader, %dec_label_pc_1113c
  %v0_111a0 = phi i32 [ %v0_111a062, %dec_label_pc_11134.preheader ], [ 1, %dec_label_pc_1113c ]
  %v0_11140 = phi i32 [ %v0_1114060, %dec_label_pc_11134.preheader ], [ %v3_1115c, %dec_label_pc_1113c ]
  %v0_111a4 = phi i32 [ %v0_1113c58, %dec_label_pc_11134.preheader ], [ %v2_1114c, %dec_label_pc_1113c ]
  %v0_11134 = phi i32 [ %v0_1113456, %dec_label_pc_11134.preheader ], [ %v3_11150, %dec_label_pc_1113c ]
  %v7_11134 = icmp eq i32 %v0_11134, 191
  store i1 %v7_11134, i1* %cpsr_z.global-to-local, align 1
  %tmp181 = icmp ult i32 %v0_11134, 192
  br i1 %tmp181, label %dec_label_pc_111a0, label %dec_label_pc_1113c

dec_label_pc_1113c:                               ; preds = %dec_label_pc_11134
  %v1_1113c = add i32 %v0_111a4, 1
  %v2_1113c = inttoptr i32 %v1_1113c to i8*
  %v3_1113c = load i8, i8* %v2_1113c, align 1
  %v4_1113c = zext i8 %v3_1113c to i32
  store i32 %v2_10e60, i32* %r1.global-to-local, align 4
  %v2_11140 = add i32 %v0_11140, %v1_11148
  %v2_1114c = add i32 %v2_11140, %v4_1113c
  store i32 %v2_1114c, i32* %r3.global-to-local, align 4
  %v1_11150 = inttoptr i32 %v2_1114c to i8*
  %v2_11150 = load i8, i8* %v1_11150, align 1
  %v3_11150 = zext i8 %v2_11150 to i32
  store i32 %v3_11150, i32* %r2.global-to-local, align 4
  %v2_11154 = icmp eq i8 %v2_11150, 0
  store i1 %v2_11154, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v3_1115c = mul nuw nsw i32 %v3_11150, 256
  store i32 %v3_1115c, i32* %r1.global-to-local, align 4
  br i1 %v2_11154, label %dec_label_pc_11164, label %dec_label_pc_11134

dec_label_pc_11164:                               ; preds = %dec_label_pc_11124.backedge, %dec_label_pc_1113c, %dec_label_pc_11118
  %v1_11168 = phi i32 [ 1, %dec_label_pc_11118 ], [ %v1_111a8, %dec_label_pc_1113c ], [ %v1_111a864, %dec_label_pc_11124.backedge ]
  %v0_11164 = phi i32 [ 0, %dec_label_pc_11118 ], [ 1, %dec_label_pc_1113c ], [ %v0_111a0, %dec_label_pc_11124.backedge ]
  %v7_11164 = icmp eq i32 %v0_11164, 1
  store i1 %v7_11164, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11164, label %bb129, label %bb130

bb129:                                            ; preds = %dec_label_pc_11164
  %v2_11168 = add i32 %v1_11168, 1
  store i32 %v2_11168, i32* %r0.global-to-local, align 4
  br label %bb130

bb130:                                            ; preds = %dec_label_pc_11164, %bb129
  %v1_1116c = phi i32 [ %v1_11168, %dec_label_pc_11164 ], [ %v2_11168, %bb129 ]
  %v2_1116c = add i32 %v1_1116c, %v1_11110
  br label %dec_label_pc_11094.backedge

dec_label_pc_11094.backedge:                      ; preds = %bb130, %dec_label_pc_11258
  %v0_11094.pre = phi i32 [ %v3_110a0153, %bb130 ], [ %v0_11094.pre.pre, %dec_label_pc_11258 ]
  %storemerge = phi i32 [ %v2_1116c, %bb130 ], [ %v2_1126c, %dec_label_pc_11258 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v1_11094 = add i32 %v0_11094.pre, -1
  %v3_11098 = mul i32 %v1_11094, 65536
  store i32 %v3_11098, i32* %r3.global-to-local, align 4
  %v7_1109c = icmp eq i32 %v3_11098, -65536
  store i1 %v7_1109c, i1* %cpsr_z.global-to-local, align 1
  %v3_110a0 = urem i32 %v1_11094, 65536
  store i32 %v3_110a0, i32* @r6, align 4
  br i1 %v7_1109c, label %dec_label_pc_11008, label %dec_label_pc_110a8

dec_label_pc_11174:                               ; preds = %dec_label_pc_11008
  %v1_11174 = add i32 %v2_10d40, 4
  %v2_11174 = inttoptr i32 %v1_11174 to i32*
  %v3_11174 = load i32, i32* %v2_11174, align 4
  store i32 %v3_11174, i32* %r0.global-to-local, align 4
  %v2_11178 = icmp eq i32 %v3_11174, 0
  store i1 %v2_11178, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_11180.184 to i32), i32* @lr, align 4
  %v1_1117c = xor i1 %v2_11178, true
  call void @__pseudo_cond_branch(i1 %v1_1117c, i32 ptrtoint (i32* @global_var_14e8c.58 to i32))
  store i32 %v2_10d40, i32* @r0, align 4
  %v0_11184 = call i32 @function_14e8c()
  store i32 %v0_11184, i32* %r0.global-to-local, align 4
  %v0_11188 = load i32, i32* @r4, align 4
  %v5_11188 = inttoptr i32 %v0_11188 to i8*
  br label %dec_label_pc_11020

dec_label_pc_11190:                               ; preds = %dec_label_pc_110c4
  %v2_11190 = icmp eq i32 %v0_11190, 0
  store i1 %v2_11190, i1* %cpsr_z.global-to-local, align 1
  %v1_11194 = add i32 %v0_11194, 1
  store i32 %v1_11194, i32* %r3.global-to-local, align 4
  br i1 %v2_11190, label %bb131, label %dec_label_pc_110b4.backedge

dec_label_pc_110b4.backedge:                      ; preds = %dec_label_pc_11190, %bb131
  %v1_1119849 = phi i32 [ %v1_11198, %dec_label_pc_11190 ], [ %v2_11198, %bb131 ]
  %v1_110b4 = inttoptr i32 %v1_11194 to i8*
  %v2_110b4 = load i8, i8* %v1_110b4, align 1
  %v3_110b4 = zext i8 %v2_110b4 to i32
  store i32 %v3_110b4, i32* %r2.global-to-local, align 4
  %v2_110b8 = icmp eq i8 %v2_110b4, 0
  store i1 %v2_110b8, i1* %cpsr_z.global-to-local, align 1
  %v3_110bc = mul nuw nsw i32 %v3_110b4, 256
  store i32 %v3_110bc, i32* %r1.global-to-local, align 4
  br i1 %v2_110b8, label %dec_label_pc_110f4, label %dec_label_pc_110c4.preheader

bb131:                                            ; preds = %dec_label_pc_11190
  %v2_11198 = add i32 %v1_11198, 1
  store i32 %v2_11198, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_110b4.backedge

dec_label_pc_111a0:                               ; preds = %dec_label_pc_11134
  %v2_111a0 = icmp eq i32 %v0_111a0, 0
  store i1 %v2_111a0, i1* %cpsr_z.global-to-local, align 1
  %v1_111a4 = add i32 %v0_111a4, 1
  store i32 %v1_111a4, i32* %r3.global-to-local, align 4
  br i1 %v2_111a0, label %bb132, label %dec_label_pc_11124.backedge

dec_label_pc_11124.backedge:                      ; preds = %dec_label_pc_111a0, %bb132
  %v1_111a864 = phi i32 [ %v1_111a8, %dec_label_pc_111a0 ], [ %v2_111a8, %bb132 ]
  %v1_11124 = inttoptr i32 %v1_111a4 to i8*
  %v2_11124 = load i8, i8* %v1_11124, align 1
  %v3_11124 = zext i8 %v2_11124 to i32
  store i32 %v3_11124, i32* %r2.global-to-local, align 4
  %v2_11128 = icmp eq i8 %v2_11124, 0
  store i1 %v2_11128, i1* %cpsr_z.global-to-local, align 1
  %v3_1112c = mul nuw nsw i32 %v3_11124, 256
  store i32 %v3_1112c, i32* %r1.global-to-local, align 4
  br i1 %v2_11128, label %dec_label_pc_11164, label %dec_label_pc_11134.preheader

bb132:                                            ; preds = %dec_label_pc_111a0
  %v2_111a8 = add i32 %v1_111a8, 1
  store i32 %v2_111a8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11124.backedge

dec_label_pc_111b0:                               ; preds = %bb128
  %v1_111b0 = add i32 %v2_110fc, 2
  %v2_111b0 = inttoptr i32 %v1_111b0 to i8*
  %v3_111b0 = load i8, i8* %v2_111b0, align 1
  %v4_111b0 = zext i8 %v3_111b0 to i32
  store i32 %v4_111b0, i32* %r3.global-to-local, align 4
  %v1_111b4 = add i32 %v2_110fc, 3
  %v2_111b4 = inttoptr i32 %v1_111b4 to i8*
  %v3_111b4 = load i8, i8* %v2_111b4, align 1
  %v4_111b4 = zext i8 %v3_111b4 to i32
  store i32 %v4_111b4, i32* %r2.global-to-local, align 4
  %v4_111b8 = mul nuw nsw i32 %v4_111b4, 256
  %v5_111b8 = or i32 %v4_111b8, %v4_111b0
  store i32 %v5_111b8, i32* %r3.global-to-local, align 4
  %v7_111bc = icmp eq i32 %v5_111b8, 256
  store i1 %v7_111bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_111bc, label %dec_label_pc_111c4, label %dec_label_pc_11118

dec_label_pc_111c4:                               ; preds = %dec_label_pc_111b0
  %v1_111c4 = add i32 %v2_110fc, 8
  %v2_111c4 = inttoptr i32 %v1_111c4 to i8*
  %v3_111c4 = load i8, i8* %v2_111c4, align 1
  %v4_111c4 = zext i8 %v3_111c4 to i32
  store i32 %v4_111c4, i32* %r1.global-to-local, align 4
  %v1_111c8 = add i32 %v2_110fc, 9
  %v2_111c8 = inttoptr i32 %v1_111c8 to i8*
  %v3_111c8 = load i8, i8* %v2_111c8, align 1
  %v4_111c8 = zext i8 %v3_111c8 to i32
  store i32 %v4_111c8, i32* %r0.global-to-local, align 4
  %v4_111cc = mul nuw nsw i32 %v4_111c8, 256
  %v5_111cc = or i32 %v4_111cc, %v4_111c4
  %v3_111d0 = mul i32 %v5_111cc, 65536
  store i32 %v3_111d0, i32* %r2.global-to-local, align 4
  %v3_111d4 = mul nuw nsw i32 %v4_111c4, 256
  %v5_111dc = or i32 %v4_111c8, %v3_111d4
  store i32 %v5_111dc, i32* %r3.global-to-local, align 4
  %v7_111e0 = icmp eq i32 %v5_111dc, 4
  store i1 %v7_111e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_111e0, label %dec_label_pc_111e8, label %dec_label_pc_11258

dec_label_pc_111e8:                               ; preds = %dec_label_pc_111c4
  %v2_111e8 = inttoptr i32 %v1_11110 to i8*
  %v3_111e8 = load i8, i8* %v2_111e8, align 1
  %v4_111e8 = zext i8 %v3_111e8 to i32
  store i32 %v4_111e8, i32* %r3.global-to-local, align 4
  store i32 %v2_10dc0, i32* %r2.global-to-local, align 4
  %v1_111f4 = add i32 %v2_110fc, 11
  %v2_111f4 = inttoptr i32 %v1_111f4 to i8*
  %v3_111f4 = load i8, i8* %v2_111f4, align 1
  %v4_111f4 = zext i8 %v3_111f4 to i32
  store i32 %v4_111f4, i32* %r2.global-to-local, align 4
  store i32 %v2_10dc0, i32* %r3.global-to-local, align 4
  %v1_11200 = add i32 %v2_110fc, 12
  %v2_11200 = inttoptr i32 %v1_11200 to i8*
  %v3_11200 = load i8, i8* %v2_11200, align 1
  %v4_11200 = zext i8 %v3_11200 to i32
  store i32 %v4_11200, i32* %r3.global-to-local, align 4
  store i32 %v2_10dc0, i32* %ip.global-to-local, align 4
  %v1_1120c = add i32 %v2_110fc, 13
  %v2_1120c = inttoptr i32 %v1_1120c to i8*
  %v3_1120c = load i8, i8* %v2_1120c, align 1
  %v4_1120c = zext i8 %v3_1120c to i32
  store i32 %v4_1120c, i32* %r2.global-to-local, align 4
  store i32 %v2_10d40, i32* @lr, align 4
  %v2_11218 = load i8, i8* %v3_10d40, align 1
  %v3_11218 = zext i8 %v2_11218 to i32
  %v3_1121c = mul nuw nsw i32 %v3_11218, 4
  %v1_11220 = add nuw nsw i32 %v3_1121c, 4
  store i32 %v1_11220, i32* %r1.global-to-local, align 4
  %v3_11224 = load i32, i32* %v2_11224, align 4
  store i32 %v3_11224, i32* %r0.global-to-local, align 4
  %v3_11228 = sext i8 %v3_1120c to i32
  %v5_11228 = sext i8 %v3_11200 to i32
  %v10_11228 = call i32 @function_14f7c(i32 %v3_11224, i32 %v1_11220, i32 %v3_11228, i32 %v5_11228)
  store i32 %v10_11228, i32* %r0.global-to-local, align 4
  store i32 %v2_10d40, i32* %r1.global-to-local, align 4
  store i32 %v2_10dc0, i32* %ip.global-to-local, align 4
  %v2_11234 = load i8, i8* %v3_10d40, align 1
  %v3_11234 = zext i8 %v2_11234 to i32
  store i32 %v3_11234, i32* %r2.global-to-local, align 4
  %v4_11238 = sext i8 %v3_111e8 to i32
  store i32 %v4_11238, i32* %r3.global-to-local, align 4
  store i32 %v2_10d40, i32* @lr, align 4
  %v1_11240 = add nuw nsw i32 %v3_11234, 1
  store i32 %v1_11240, i32* %r1.global-to-local, align 4
  %v5_11244 = mul nuw nsw i32 %v3_11234, 4
  %v6_11244 = add i32 %v5_11244, %v10_11228
  %v7_11244 = inttoptr i32 %v6_11244 to i32*
  store i32 %v4_11238, i32* %v7_11244, align 4
  %v1_11248 = load i32, i32* @lr, align 4
  %v2_11248 = add i32 %v1_11248, 4
  %v3_11248 = inttoptr i32 %v2_11248 to i32*
  store i32 %v10_11228, i32* %v3_11248, align 4
  %v0_1124c = load i32, i32* %r1.global-to-local, align 4
  %v1_1124c = trunc i32 %v0_1124c to i8
  %v2_1124c = load i32, i32* @lr, align 4
  %v3_1124c = inttoptr i32 %v2_1124c to i8*
  store i8 %v1_1124c, i8* %v3_1124c, align 1
  %v0_11250 = load i32, i32* @r4, align 4
  %v1_11250 = add i32 %v0_11250, 9
  %v2_11250 = inttoptr i32 %v1_11250 to i8*
  %v3_11250 = load i8, i8* %v2_11250, align 1
  %v4_11250 = zext i8 %v3_11250 to i32
  store i32 %v4_11250, i32* %r0.global-to-local, align 4
  %v1_11254 = add i32 %v0_11250, 8
  %v2_11254 = inttoptr i32 %v1_11254 to i8*
  %v3_11254 = load i8, i8* %v2_11254, align 1
  %v4_11254 = zext i8 %v3_11254 to i32
  store i32 %v4_11254, i32* %r1.global-to-local, align 4
  %v0_1126c.pre = load i32, i32* @r5, align 4
  %v0_11094.pre.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_11258

dec_label_pc_11258:                               ; preds = %dec_label_pc_111c4, %dec_label_pc_111e8
  %v0_11094.pre.pre = phi i32 [ %v3_110a0153, %dec_label_pc_111c4 ], [ %v0_11094.pre.pre.pre, %dec_label_pc_111e8 ]
  %v0_1126c = phi i32 [ %v1_11110, %dec_label_pc_111c4 ], [ %v0_1126c.pre, %dec_label_pc_111e8 ]
  %v1_11258 = phi i32 [ %v4_111c8, %dec_label_pc_111c4 ], [ %v4_11250, %dec_label_pc_111e8 ]
  %v0_11258 = phi i32 [ %v4_111c4, %dec_label_pc_111c4 ], [ %v4_11254, %dec_label_pc_111e8 ]
  %v4_11258 = mul nuw nsw i32 %v1_11258, 256
  %v5_11258 = or i32 %v4_11258, %v0_11258
  %v3_1125c = mul i32 %v5_11258, 65536
  store i32 %v3_1125c, i32* %r2.global-to-local, align 4
  %tmp133 = mul nuw nsw i32 %v0_11258, 256
  %v5_11268 = or i32 %tmp133, %v1_11258
  store i32 %v5_11268, i32* %r3.global-to-local, align 4
  %v2_1126c = add i32 %v5_11268, %v0_1126c
  br label %dec_label_pc_11094.backedge

; uselistorder directives
  uselistorder i32 %v1_11258, { 1, 0 }
  uselistorder i32 %v3_11234, { 1, 0, 2 }
  uselistorder i32 %v10_11228, { 1, 0, 2 }
  uselistorder i32 %v4_111c8, { 2, 1, 0, 3 }
  uselistorder i32 %v4_111c4, { 2, 0, 1, 3 }
  uselistorder i32 %v2_111a8, { 1, 0 }
  uselistorder i32 %v3_11124, { 0, 2, 1 }
  uselistorder i32 %v1_111a864, { 1, 0 }
  uselistorder i32 %v1_111a4, { 1, 2, 0 }
  uselistorder i32 %v2_11198, { 1, 0 }
  uselistorder i32 %v3_110b4, { 0, 2, 1 }
  uselistorder i32 %v1_1119849, { 1, 0 }
  uselistorder i32 %v1_11194, { 1, 2, 0 }
  uselistorder i1 %v7_1109c, { 1, 0 }
  uselistorder i32 %v1_11094, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v3_11150, { 0, 2, 1 }
  uselistorder i32 %v2_1114c, { 1, 2, 0 }
  uselistorder i32 %v0_111a0, { 2, 0, 1 }
  uselistorder i32 %v1_111a8, { 1, 2, 0 }
  uselistorder i32 %v3_1112c27, { 1, 0 }
  uselistorder i32 %v3_1112425, { 1, 0, 2 }
  uselistorder i32 %v1_11110, { 2, 3, 1, 0, 5, 4, 6 }
  uselistorder i32 %v2_110fc, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_110e0, { 0, 2, 1 }
  uselistorder i32 %v2_110dc, { 1, 2, 0 }
  uselistorder i32 %v0_11190, { 2, 0, 1 }
  uselistorder i32 %v1_11198, { 1, 2, 0 }
  uselistorder i32 %v3_110bc21, { 1, 0 }
  uselistorder i32 %v3_110b419, { 1, 0, 2 }
  uselistorder i32 %v0_110fc152, { 3, 0, 1, 2 }
  uselistorder i32 %v3_110a0151, { 1, 0 }
  uselistorder i1 %v7_1109c150, { 1, 0 }
  uselistorder i32 %v1_11094143, { 1, 0 }
  uselistorder i32 %v4_1107c, { 1, 0, 2 }
  uselistorder i32 %v0_11000, { 1, 0 }
  uselistorder i32 %v0_10fd8, { 1, 0 }
  uselistorder i1 %v7_10f8c, { 1, 0 }
  uselistorder i32 %v5_10f88, { 1, 0, 2 }
  uselistorder i32 %v1_10f4c, { 1, 0 }
  uselistorder i32 %v3_10f38, { 1, 0 }
  uselistorder i32 %v0_10f30, { 1, 0 }
  uselistorder i32 %v1_10f24, { 1, 2, 0 }
  uselistorder i1 %v7_10ef0, { 1, 0 }
  uselistorder i32 %v5_10eec, { 1, 0, 2 }
  uselistorder i1 %v7_10ed4, { 1, 0 }
  uselistorder i32 %v4_10ed0, { 1, 0, 2 }
  uselistorder i1 %v7_10eb8, { 1, 0 }
  uselistorder i32 %v3_10eb4, { 1, 2, 0, 3 }
  uselistorder i1 %v7_10e9c, { 2, 1, 0 }
  uselistorder i32 %v1_10ea0, { 1, 0 }
  uselistorder i32 %v1_11040, { 1, 2, 0 }
  uselistorder i32 %v2_10f3c, { 1, 0, 2 }
  uselistorder i32 %v2_10e98, { 1, 0, 2 }
  uselistorder i32 %v2_10e60, { 4, 3, 2, 5, 7, 9, 1, 0, 6, 8, 10 }
  uselistorder i32 %v4_10e14, { 3, 0, 2, 1 }
  uselistorder i32 %v1_10de0, { 1, 0, 2 }
  uselistorder i32 %v0_10d9c, { 0, 1, 3, 2 }
  uselistorder i32 %v1_10d98, { 1, 0, 2 }
  uselistorder i32 %v1_10d94, { 1, 0 }
  uselistorder i32 %v2_10d8811, { 1, 0 }
  uselistorder i32 %v2_10d88, { 1, 0 }
  uselistorder i1 %v8_10d78, { 1, 0 }
  uselistorder i32 %v2_10d60, { 0, 2, 1, 3 }
  uselistorder i32 %v0_10d48, { 1, 0 }
  uselistorder i32 %v2_10d40, { 2, 3, 4, 5, 0, 1, 6, 7 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-2240, { 0, 2, 1 }
  uselistorder i32* %stack_var_-64, { 0, 1, 3, 2 }
  uselistorder i8* %stack_var_-4288, { 2, 0, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 14, 17, 15, 16, 18, 20, 2, 21, 22, 23, 24, 25, 29, 26, 27, 28, 31, 30, 3, 32, 33, 34, 35, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 7, 8, 9, 10, 11, 12, 13, 15, 18, 14, 1, 16, 17, 0, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 2, 4, 3, 5, 6 }
  uselistorder i32* %r1.global-to-local, { 10, 11, 12, 13, 14, 15, 18, 21, 16, 17, 1, 19, 20, 0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 3, 2, 4, 6, 8, 5, 9, 7 }
  uselistorder i32* %r0.global-to-local, { 12, 16, 13, 14, 15, 21, 17, 11, 18, 19, 20, 23, 22, 26, 25, 24, 28, 27, 31, 29, 30, 32, 33, 35, 34, 37, 36, 38, 40, 39, 41, 48, 43, 42, 44, 45, 46, 47, 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32* %lr.global-to-local, { 5, 6, 0, 4, 1, 3, 2 }
  uselistorder i32* %ip.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 2, 1, 3 }
  uselistorder i32* %fp.global-to-local, { 2, 4, 3, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 10, 11, 18, 12, 23, 13, 14, 24, 15, 16, 17, 1, 19, 20, 21, 22, 0, 7, 25, 26, 27, 28, 29, 30, 31, 32, 33, 9, 34, 35, 36, 37, 6, 4, 2, 3, 5, 8 }
  uselistorder i32 (i32)* @function_15664, { 3, 2, 11, 10, 9, 8, 7, 6, 5, 4, 1, 0 }
  uselistorder label %dec_label_pc_11258, { 1, 0 }
  uselistorder label %dec_label_pc_11124.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_110b4.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_11094.backedge, { 1, 0 }
  uselistorder label %bb130, { 1, 0 }
  uselistorder label %dec_label_pc_11134, { 1, 0 }
  uselistorder label %dec_label_pc_11134.preheader, { 1, 0 }
  uselistorder label %bb128, { 1, 0 }
  uselistorder label %dec_label_pc_110c4, { 1, 0 }
  uselistorder label %dec_label_pc_110c4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_110a8, { 1, 0 }
  uselistorder label %dec_label_pc_11020, { 1, 0 }
  uselistorder label %dec_label_pc_11008, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_10fe8, { 2, 1, 4, 0, 3 }
  uselistorder label %dec_label_pc_10f20.dec_label_pc_10f20_crit_edge, { 1, 0 }
  uselistorder label %bb126, { 1, 0 }
  uselistorder label %.thread12, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10d70, { 1, 0 }
}

define i32 @function_11274(i32 %arg1) local_unnamed_addr {
dec_label_pc_11274:
  %v2_11278 = load i32, i32* @global_var_1f87c.186, align 4
  %v2_11280 = call i32 @function_14334(i32 %v2_11278, i32 9)
  %v0_11284 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11284, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_11274
  %v2_11284 = load i32, i32* @ip, align 4
  %v3_11284 = load i32, i32* @r8, align 4
  %v4_11284 = lshr i32 %v2_11284, %v3_11284
  %v5_11284 = sub i32 32, %v3_11284
  %v6_11284 = shl i32 %v2_11284, %v5_11284
  %v7_11284 = or i32 %v6_11284, %v4_11284
  %v9_11284 = and i32 %v7_11284, 9
  call void @__pseudo_branch(i32 %v9_11284)
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_11274, %bb
  ret i32 %v2_11280

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_11288() local_unnamed_addr {
dec_label_pc_11288:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11288 = load i32, i32* @r4, align 4
  store i32 %v3_11288, i32* %stack_var_-16, align 4
  %v0_1128c = load i32, i32* @r0, align 4
  store i32 %v0_1128c, i32* %r5.global-to-local, align 4
  %v1_11290 = add i32 %v0_1128c, 4
  %v2_11290 = inttoptr i32 %v1_11290 to i32*
  %v3_11290 = load i32, i32* %v2_11290, align 4
  store i32 %v3_11290, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 70324, i32* @lr, align 4
  %v1_112b0 = icmp ne i32 %v3_11290, -1
  call void @__pseudo_cond_branch(i1 %v1_112b0, i32 ptrtoint (i32* @global_var_14234.25 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_112c0 = call i32 @function_14b30(i32 2, i32 1, i32 0)
  store i32 %v3_112c0, i32* %r3.global-to-local, align 4
  %v7_112c8 = icmp eq i32 %v3_112c0, -1
  %v0_112d0 = load i32, i32* %r5.global-to-local, align 4
  %v1_112d0 = add i32 %v0_112d0, 28
  store i32 %v1_112d0, i32* %r0.global-to-local, align 4
  %v2_112d4 = add i32 %v0_112d0, 4
  %v3_112d4 = inttoptr i32 %v2_112d4 to i32*
  store i32 %v3_112c0, i32* %v3_112d4, align 4
  br i1 %v7_112c8, label %dec_label_pc_11288.dec_label_pc_11350_crit_edge, label %dec_label_pc_112dc

dec_label_pc_11288.dec_label_pc_11350_crit_edge:  ; preds = %dec_label_pc_11288
  %v14_11354.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11350

dec_label_pc_112dc:                               ; preds = %dec_label_pc_11288
  %v0_112dc = load i32, i32* %r6.global-to-local, align 4
  %v1_112dc = load i32, i32* %r5.global-to-local, align 4
  %v2_112dc = add i32 %v1_112dc, 24
  %v3_112dc = inttoptr i32 %v2_112dc to i32*
  store i32 %v0_112dc, i32* %v3_112dc, align 4
  %v0_112e0 = load i32, i32* %r0.global-to-local, align 4
  %v2_112e0 = call i32 @function_13914(i32 %v0_112e0, i32 256)
  store i32 %v2_112e0, i32* %r0.global-to-local, align 4
  %v0_112e4 = load i32, i32* %r5.global-to-local, align 4
  %v1_112e4 = add i32 %v0_112e4, 4
  %v2_112e4 = inttoptr i32 %v1_112e4 to i32*
  %v3_112e4 = load i32, i32* %v2_112e4, align 4
  store i32 %v3_112e4, i32* @r4, align 4
  %v0_112ec = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_112ec, i32* @r2, align 4
  store i32 %v3_112e4, i32* %r0.global-to-local, align 4
  %v2_112f4 = call i32 @function_14144(i32 %v3_112e4, i32 3)
  %v1_112fc = or i32 %v2_112f4, 2048
  store i32 %v1_112fc, i32* @r2, align 4
  %v0_11300 = load i32, i32* @r4, align 4
  store i32 %v0_11300, i32* %r0.global-to-local, align 4
  %v2_11304 = call i32 @function_14144(i32 %v0_11300, i32 4)
  store i32 %v2_11304, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f810.188 to i32), i32* %r3.global-to-local, align 4
  %v0_1130c = load i32, i32* %r5.global-to-local, align 4
  %v1_1130c = add i32 %v0_1130c, 20
  %v2_1130c = inttoptr i32 %v1_1130c to i32*
  %v3_1130c = load i32, i32* %v2_1130c, align 4
  store i32 %v3_1130c, i32* @r4, align 4
  %v2_11310 = load i32, i32* @global_var_1f810.188, align 4
  %v1_11314 = add i32 %v0_1130c, 16
  %v2_11314 = inttoptr i32 %v1_11314 to i32*
  %v3_11314 = load i32, i32* %v2_11314, align 4
  store i32 %v3_11314, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_1131c = add i32 %v0_1130c, 8
  %v3_1131c = inttoptr i32 %v2_1131c to i32*
  store i32 %v2_11310, i32* %v3_1131c, align 4
  %v0_11320 = load i32, i32* %r3.global-to-local, align 4
  %v1_11320 = load i32, i32* %r5.global-to-local, align 4
  %v2_11320 = add i32 %v1_11320, 12
  %v3_11320 = inttoptr i32 %v2_11320 to i32*
  store i32 %v0_11320, i32* %v3_11320, align 4
  %v0_11328 = load i32, i32* %r5.global-to-local, align 4
  %v1_11328 = add i32 %v0_11328, 4
  %v2_11328 = inttoptr i32 %v1_11328 to i32*
  %v3_11328 = load i32, i32* %v2_11328, align 4
  store i32 %v3_11328, i32* %r0.global-to-local, align 4
  %v0_1132c = load i32, i32* %r3.global-to-local, align 4
  %v2_1132c = mul i32 %v0_1132c, 2
  store i32 %v2_1132c, i32* %r3.global-to-local, align 4
  store i32 %v2_1132c, i32* %stack_var_-32, align 4
  %v3_1134c = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_1134c = call i32 @function_1498c(i32 %v3_11328, %sockaddr* %v3_1134c, i32 16)
  store i32 %v4_1134c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11350

dec_label_pc_11350:                               ; preds = %dec_label_pc_11288.dec_label_pc_11350_crit_edge, %dec_label_pc_112dc
  %v14_11354 = phi i32 [ %v14_11354.pre, %dec_label_pc_11288.dec_label_pc_11350_crit_edge ], [ %v4_1134c, %dec_label_pc_112dc ]
  %v2_11354 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_11354, i32* @r4, align 4
  ret i32 %v14_11354

; uselistorder directives
  uselistorder i32 %v2_1132c, { 1, 0 }
  uselistorder i32 %v3_112c0, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 8, 6, 5, 7, 9, 10 }
  uselistorder i32 (i32, i32)* @function_13914, { 7, 12, 16, 15, 14, 13, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_11350, { 1, 0 }
}

define i32 @function_1135c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1135c:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_1135c = load i32, i32* @r4, align 4
  %v6_1135c = load i32, i32* @r5, align 4
  %v9_1135c = load i32, i32* @r6, align 4
  %v12_1135c = load i32, i32* @r7, align 4
  %v15_1135c = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1f7dc.190 to i32), i32* @r8, align 4
  %v2_11364 = load i32, i32* @global_var_1f7dc.190, align 4
  store i32 ptrtoint (i32* @global_var_1f808.192 to i32), i32* %sb.global-to-local, align 4
  %v3_11370 = mul i32 %v2_11364, 16
  store i32 %v3_11370, i32* %r3.global-to-local, align 4
  %v3_11378 = urem i32 %arg3, 65536
  store i32 %v3_11378, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_11384 = load i32, i32* @global_var_1f808.192, align 4
  %v1_11388 = add i32 %v3_11370, 16
  store i32 %v1_11388, i32* %r1.global-to-local, align 4
  store i32 %v3_11378, i32* %stack_var_-44, align 4
  %v8_11390 = call i32 @function_14f7c(i32 %v2_11384, i32 %v1_11388, i32 %v3_11378, i32 %v3_11370)
  store i32 %v8_11390, i32* %sl.global-to-local, align 4
  %v0_11398 = load i32, i32* @r5, align 4
  %v1_1139c = load i32, i32* %sb.global-to-local, align 4
  %v2_1139c = inttoptr i32 %v1_1139c to i32*
  store i32 %v8_11390, i32* %v2_1139c, align 4
  %v2_113a0 = load i32, i32* @global_var_1f7dc.190, align 4
  store i32 %v2_113a0, i32* %fp.global-to-local, align 4
  %v1_113a4 = inttoptr i32 %v0_11398 to i8*
  %v2_113a4 = call i32 @function_13874(i8* %v1_113a4)
  %sext = mul i32 %v2_113a4, 16777216
  %v1_113a8 = sdiv i32 %sext, 16777216
  %v2_113a8 = add nsw i32 %v1_113a8, 1
  store i32 %v2_113a8, i32* @r4, align 4
  store i32 %v1_113a8, i32* @r7, align 4
  %v1_113b4 = call i32 @function_14ce0(i32 %v2_113a8)
  %v0_113b8 = load i32, i32* @r5, align 4
  store i32 %v0_113b8, i32* %r1.global-to-local, align 4
  %v0_113bc = load i32, i32* @r4, align 4
  store i32 %v0_113bc, i32* %r2.global-to-local, align 4
  store i32 %v1_113b4, i32* @r6, align 4
  %v3_113c4 = call i32 @function_138f0(i32 %v1_113b4, i32 %v0_113b8, i32 %v0_113bc)
  %v0_113c8 = load i32, i32* @r7, align 4
  %tmp21 = icmp slt i32 %v0_113c8, 1
  %extract.t6 = trunc i32 %v0_113c8 to i8
  br i1 %tmp21, label %dec_label_pc_113ec, label %dec_label_pc_113d0

dec_label_pc_113d0:                               ; preds = %dec_label_pc_1135c
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_113d4

dec_label_pc_113d4:                               ; preds = %dec_label_pc_113d4, %dec_label_pc_113d0
  %v2_113dc = phi i32 [ %v1_113e0, %dec_label_pc_113d4 ], [ 0, %dec_label_pc_113d0 ]
  %v1_113d4 = load i32, i32* @r6, align 4
  %v2_113d4 = add i32 %v1_113d4, %v2_113dc
  %v3_113d4 = inttoptr i32 %v2_113d4 to i8*
  %v4_113d4 = load i8, i8* %v3_113d4, align 1
  %v6_113d4 = zext i8 %v4_113d4 to i32
  %v1_113d8 = xor i32 %v6_113d4, 34
  store i32 %v1_113d8, i32* %r3.global-to-local, align 4
  %v1_113dc = trunc i32 %v1_113d8 to i8
  store i8 %v1_113dc, i8* %v3_113d4, align 1
  %v0_113e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_113e0 = add i32 %v0_113e0, 1
  store i32 %v1_113e0, i32* %r2.global-to-local, align 4
  %v0_113e4 = load i32, i32* @r7, align 4
  %v9_113e4 = icmp eq i32 %v0_113e4, %v1_113e0
  br i1 %v9_113e4, label %dec_label_pc_113ec.loopexit, label %dec_label_pc_113d4

dec_label_pc_113ec.loopexit:                      ; preds = %dec_label_pc_113d4
  %extract.t = trunc i32 %v1_113e0 to i8
  br label %dec_label_pc_113ec

dec_label_pc_113ec:                               ; preds = %dec_label_pc_113ec.loopexit, %dec_label_pc_1135c
  %v0_113fc.off0 = phi i8 [ %extract.t, %dec_label_pc_113ec.loopexit ], [ %extract.t6, %dec_label_pc_1135c ]
  %v2_113ec = load i32, i32* @global_var_1f7dc.190, align 4
  %v2_113f0 = load i32, i32* @global_var_1f808.192, align 4
  store i32 %v2_113f0, i32* %r2.global-to-local, align 4
  %v3_113f4 = mul i32 %v2_113ec, 16
  %v2_113f8 = add i32 %v2_113f0, %v3_113f4
  store i32 %v2_113f8, i32* %r3.global-to-local, align 4
  %v3_113fc = add i32 %v2_113f8, 12
  %v4_113fc = inttoptr i32 %v3_113fc to i8*
  store i8 %v0_113fc.off0, i8* %v4_113fc, align 1
  %v0_11400 = load i32, i32* @r6, align 4
  %v1_11400 = load i32, i32* %sl.global-to-local, align 4
  %v2_11400 = load i32, i32* %fp.global-to-local, align 4
  %v5_11400 = mul i32 %v2_11400, 16
  %v6_11400 = add i32 %v5_11400, %v1_11400
  %v7_11400 = inttoptr i32 %v6_11400 to i32*
  store i32 %v0_11400, i32* %v7_11400, align 4
  %v2_11408 = load i32, i32* @global_var_1f7dc.190, align 4
  store i32 %v2_11408, i32* @r7, align 4
  %v2_1140c = load i32, i32* @global_var_1f808.192, align 4
  store i32 %v2_1140c, i32* %sl.global-to-local, align 4
  %v1_11410 = inttoptr i32 %arg2 to i8*
  %v2_11410 = call i32 @function_13874(i8* %v1_11410)
  %sext1 = mul i32 %v2_11410, 16777216
  %v1_11414 = sdiv i32 %sext1, 16777216
  %v2_11414 = add nsw i32 %v1_11414, 1
  store i32 %v2_11414, i32* @r4, align 4
  store i32 %v1_11414, i32* @r5, align 4
  %v1_11420 = call i32 @function_14ce0(i32 %v2_11414)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_11428 = load i32, i32* @r4, align 4
  store i32 %v0_11428, i32* %r2.global-to-local, align 4
  store i32 %v1_11420, i32* %r6.global-to-local, align 4
  %v3_11430 = call i32 @function_138f0(i32 %v1_11420, i32 %arg2, i32 %v0_11428)
  %v0_11434 = load i32, i32* @r5, align 4
  %tmp22 = icmp slt i32 %v0_11434, 1
  %extract.t8 = trunc i32 %v0_11434 to i8
  br i1 %tmp22, label %dec_label_pc_11458, label %dec_label_pc_1143c

dec_label_pc_1143c:                               ; preds = %dec_label_pc_113ec
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11440

dec_label_pc_11440:                               ; preds = %dec_label_pc_11440, %dec_label_pc_1143c
  %v2_11448 = phi i32 [ %v1_1144c, %dec_label_pc_11440 ], [ 0, %dec_label_pc_1143c ]
  %v1_11440 = load i32, i32* %r6.global-to-local, align 4
  %v2_11440 = add i32 %v1_11440, %v2_11448
  %v3_11440 = inttoptr i32 %v2_11440 to i8*
  %v4_11440 = load i8, i8* %v3_11440, align 1
  %v6_11440 = zext i8 %v4_11440 to i32
  %v1_11444 = xor i32 %v6_11440, 34
  store i32 %v1_11444, i32* %r3.global-to-local, align 4
  %v1_11448 = trunc i32 %v1_11444 to i8
  store i8 %v1_11448, i8* %v3_11440, align 1
  %v0_1144c = load i32, i32* %r2.global-to-local, align 4
  %v1_1144c = add i32 %v0_1144c, 1
  store i32 %v1_1144c, i32* %r2.global-to-local, align 4
  %v0_11450 = load i32, i32* @r5, align 4
  %v9_11450 = icmp eq i32 %v0_11450, %v1_1144c
  br i1 %v9_11450, label %dec_label_pc_11458.loopexit, label %dec_label_pc_11440

dec_label_pc_11458.loopexit:                      ; preds = %dec_label_pc_11440
  %extract.t7 = trunc i32 %v1_1144c to i8
  br label %dec_label_pc_11458

dec_label_pc_11458:                               ; preds = %dec_label_pc_11458.loopexit, %dec_label_pc_113ec
  %v0_11468.off0 = phi i8 [ %extract.t7, %dec_label_pc_11458.loopexit ], [ %extract.t8, %dec_label_pc_113ec ]
  %v2_11458 = load i32, i32* @global_var_1f7dc.190, align 4
  %v2_1145c = load i32, i32* @global_var_1f808.192, align 4
  %v3_11460 = mul i32 %v2_11458, 16
  %v2_11464 = or i32 %v3_11460, 13
  %v3_11468 = add i32 %v2_11464, %v2_1145c
  %v4_11468 = inttoptr i32 %v3_11468 to i8*
  store i8 %v0_11468.off0, i8* %v4_11468, align 1
  %v2_11470 = load i32, i32* @global_var_1f7dc.190, align 4
  store i32 %v2_11470, i32* %lr.global-to-local, align 4
  %v4_11474 = load i8, i8* @global_var_1f80d.195, align 1
  %v5_11474 = zext i8 %v4_11474 to i32
  %v3_11478 = load i8, i8* bitcast (i8** @global_var_1f80c.194 to i8*), align 4
  %v4_11478 = zext i8 %v3_11478 to i32
  %v2_1147c = load i32, i32* @global_var_1f808.192, align 4
  %v4_11480 = mul nuw nsw i32 %v5_11474, 256
  %v5_11480 = or i32 %v4_11478, %v4_11480
  store i32 %v5_11480, i32* %r2.global-to-local, align 4
  %v3_11484 = mul i32 %v2_11470, 16
  %v2_11488 = add i32 %v2_1147c, %v3_11484
  store i32 %v2_11488, i32* %r1.global-to-local, align 4
  %v3_11490 = add i32 %v2_11488, 9
  %v4_11490 = inttoptr i32 %v3_11490 to i8*
  store i8 %v4_11474, i8* %v4_11490, align 1
  %v0_11494 = load i32, i32* %r2.global-to-local, align 4
  %v1_11494 = trunc i32 %v0_11494 to i8
  %v2_11494 = load i32, i32* %r1.global-to-local, align 4
  %v3_11494 = add i32 %v2_11494, 8
  %v4_11494 = inttoptr i32 %v3_11494 to i8*
  store i8 %v1_11494, i8* %v4_11494, align 1
  %v4_11498 = load i8, i8* @global_var_1f80d.195, align 1
  %v5_11498 = zext i8 %v4_11498 to i32
  %v3_1149c = load i8, i8* bitcast (i8** @global_var_1f80c.194 to i8*), align 4
  %v4_1149c = zext i8 %v3_1149c to i32
  %v4_114a0 = mul nuw nsw i32 %v5_11498, 256
  %v5_114a0 = or i32 %v4_1149c, %v4_114a0
  %v2_114a4 = load i32, i32* %stack_var_-44, align 4
  %v2_114a8 = add i32 %v5_114a0, %v2_114a4
  store i32 %v2_114a8, i32* %r3.global-to-local, align 4
  %v3_114ac9 = udiv i32 %v2_114a8, 256
  %v1_114b0 = trunc i32 %v3_114ac9 to i8
  %v2_114b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_114b0 = add i32 %v2_114b0, 11
  %v4_114b0 = inttoptr i32 %v3_114b0 to i8*
  store i8 %v1_114b0, i8* %v4_114b0, align 1
  %v0_114b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_114b4 = trunc i32 %v0_114b4 to i8
  %v2_114b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_114b4 = add i32 %v2_114b4, 10
  %v4_114b4 = inttoptr i32 %v3_114b4 to i8*
  store i8 %v1_114b4, i8* %v4_114b4, align 1
  %v4_114b8 = load i8, i8* @global_var_1f80d.195, align 1
  %v5_114b8 = zext i8 %v4_114b8 to i32
  %v3_114bc = load i8, i8* bitcast (i8** @global_var_1f80c.194 to i8*), align 4
  %v4_114bc = zext i8 %v3_114bc to i32
  %v4_114c0 = mul nuw nsw i32 %v5_114b8, 256
  %v5_114c0 = or i32 %v4_114bc, %v4_114c0
  %v2_114c4 = load i32, i32* %stack_var_-44, align 4
  %v2_114c8 = add i32 %v5_114c0, %v2_114c4
  store i32 %v2_114c8, i32* %r2.global-to-local, align 4
  %v0_114cc = load i32, i32* @r7, align 4
  %v3_114cc = mul i32 %v0_114cc, 16
  %v1_114d0 = load i32, i32* %sl.global-to-local, align 4
  %v2_114d0 = add i32 %v1_114d0, %v3_114cc
  store i32 %v2_114d0, i32* %r3.global-to-local, align 4
  %v0_114d4 = load i32, i32* %lr.global-to-local, align 4
  %v1_114d4 = add i32 %v0_114d4, 1
  store i32 %v1_114d4, i32* @lr, align 4
  %v3_114d8 = sdiv i32 %v2_114c8, 256
  store i32 %v3_114d8, i32* %r1.global-to-local, align 4
  %v0_114dc = load i32, i32* %r6.global-to-local, align 4
  %v2_114dc = add i32 %v2_114d0, 4
  %v3_114dc = inttoptr i32 %v2_114dc to i32*
  store i32 %v0_114dc, i32* %v3_114dc, align 4
  %v0_114e0 = load i32, i32* @lr, align 4
  %v1_114e0 = load i32, i32* @r8, align 4
  %v2_114e0 = inttoptr i32 %v1_114e0 to i32*
  store i32 %v0_114e0, i32* %v2_114e0, align 4
  %v0_114e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_114e4 = trunc i32 %v0_114e4 to i8
  store i8 %v1_114e4, i8* @global_var_1f80d.195, align 1
  %v0_114e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_114e8 = trunc i32 %v0_114e8 to i8
  store i8 %v1_114e8, i8* bitcast (i8** @global_var_1f80c.194 to i8*), align 4
  store i32 %v3_1135c, i32* @r4, align 4
  store i32 %v6_1135c, i32* @r5, align 4
  store i32 %v9_1135c, i32* @r6, align 4
  store i32 %v12_1135c, i32* @r7, align 4
  store i32 %v15_1135c, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1f80c.194 to i32)

; uselistorder directives
  uselistorder i32 %v1_1144c, { 0, 2, 3, 1 }
  uselistorder i32 %v1_11420, { 1, 0 }
  uselistorder i32 %v1_113e0, { 0, 2, 3, 1 }
  uselistorder i32 %v1_113b4, { 1, 0 }
  uselistorder i32 %v3_11378, { 1, 2, 0 }
  uselistorder i32 %v3_11370, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 (i8*)* @function_13874, { 28, 29, 26, 27, 3, 4, 5, 0, 1, 2, 20, 21, 22, 23, 24, 25, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 79, 80, 81, 82, 83, 84, 85, 86, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78 }
  uselistorder i32 (i32, i32, i32, i32)* @function_14f7c, { 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_11500() local_unnamed_addr {
dec_label_pc_11500:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp232 = call i32 @__decompiler_undefined_function_0()
  %tmp239 = call i32 @__decompiler_undefined_function_0()
  %tmp240 = call i8* @__decompiler_undefined_function_2()
  %tmp241 = call i32 @__decompiler_undefined_function_0()
  %tmp242 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_11500 = load i32, i32* @r4, align 4
  store i32 %v3_11500, i32* %stack_var_-36, align 4
  %v6_11500 = load i32, i32* @r5, align 4
  %v9_11500 = load i32, i32* @r6, align 4
  %v12_11500 = load i32, i32* @r7, align 4
  %v15_11500 = load i32, i32* @r8, align 4
  %v18_11500 = load i32, i32* @sb, align 4
  %v21_11500 = load i32, i32* @sl, align 4
  %v24_11500 = load i32, i32* @fp, align 4
  %v0_11508 = call i32 @function_14260()
  store i32 %v0_11508, i32* %r0.global-to-local, align 4
  %v7_1150c = icmp eq i32 %v0_11508, -1
  %. = zext i1 %v7_1150c to i32
  %tmp273 = icmp slt i32 %v0_11508, 1
  %storemerge229 = select i1 %tmp273, i32 %., i32 1
  store i32 %storemerge229, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1f87c.186 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11528 = icmp eq i32 %storemerge229, 0
  store i1 %v2_11528, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_11508, i32* @global_var_1f87c.186, align 4
  br i1 %v2_11528, label %dec_label_pc_1153c, label %dec_label_pc_11534

dec_label_pc_11534:                               ; preds = %dec_label_pc_11500
  store i32 %v3_11500, i32* @r4, align 4
  store i32 %v6_11500, i32* %r5.global-to-local, align 4
  store i32 %v9_11500, i32* @r6, align 4
  store i32 %v12_11500, i32* @r7, align 4
  store i32 %v15_11500, i32* @r8, align 4
  store i32 %v18_11500, i32* @sb, align 4
  store i32 %v21_11500, i32* @sl, align 4
  store i32 %v24_11500, i32* @fp, align 4
  ret i32 %v0_11508

dec_label_pc_1153c:                               ; preds = %dec_label_pc_11500
  %v0_1153c = call i32 @function_13b2c()
  store i32 %v0_1153c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f858.88 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_1153c, i32* @global_var_1f858.88, align 4
  %v1_11548 = call i32 @function_10a9c(i32 %v0_1153c)
  %v0_1154c = load i32, i32* @r4, align 4
  store i32 %v0_1154c, i32* %r0.global-to-local, align 4
  %v1_11550 = inttoptr i32 %v0_1154c to i32*
  %v2_11550 = call i32 @function_14504(i32* %v1_11550)
  store i32 ptrtoint (i32* @global_var_1f810.188 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_11550, i32* @global_var_1f810.188, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_11564 = call i32 @function_14e34(i32 256, i32 288)
  store i32 %v2_11564, i32* %lr.global-to-local, align 4
  %v0_11570 = load i32, i32* @r4, align 4
  store i32 %v0_11570, i32* %stack_var_-52, align 4
  store i32 %v2_11564, i32* @global_var_1f874.200, align 4
  store i32 %v0_11570, i32* %r3.global-to-local, align 4
  store i32 %v0_11570, i32* %r5.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_11570, i32* %ip.global-to-local, align 4
  %v1_11588 = add i32 %v2_11564, 4
  store i32 %v1_11588, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1158c

dec_label_pc_1158c:                               ; preds = %dec_label_pc_1158c.dec_label_pc_1158c_crit_edge, %dec_label_pc_1153c
  %v0_115a4 = phi i32 [ %v0_115a4.pre, %dec_label_pc_1158c.dec_label_pc_1158c_crit_edge ], [ %v0_11570, %dec_label_pc_1153c ]
  %v0_11594 = phi i32 [ %v0_115ac, %dec_label_pc_1158c.dec_label_pc_1158c_crit_edge ], [ %v0_11570, %dec_label_pc_1153c ]
  %v1_1159c = phi i32 [ %v1_1159c.pre, %dec_label_pc_1158c.dec_label_pc_1158c_crit_edge ], [ %v2_11564, %dec_label_pc_1153c ]
  %v3_1158c = mul i32 %v0_11594, 256
  store i32 %v3_1158c, i32* %r2.global-to-local, align 4
  %v1_11594 = add i32 %v0_11594, 1
  store i32 %v1_11594, i32* %ip.global-to-local, align 4
  %v2_11598 = mul i32 %v0_11594, 288
  %v2_1159c = add i32 %v1_1159c, 12
  %v2_115a4 = add i32 %v2_1159c, %v2_11598
  %v3_115a4 = inttoptr i32 %v2_115a4 to i32*
  store i32 %v0_115a4, i32* %v3_115a4, align 4
  %v0_115a8 = load i32, i32* %r0.global-to-local, align 4
  %v1_115a8 = load i32, i32* %r1.global-to-local, align 4
  %v2_115a8 = inttoptr i32 %v1_115a8 to i32*
  store i32 %v0_115a8, i32* %v2_115a8, align 4
  %v3_115a8 = load i32, i32* %r1.global-to-local, align 4
  %v4_115a8 = add i32 %v3_115a8, 288
  store i32 %v4_115a8, i32* %r1.global-to-local, align 4
  %v0_115ac = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_115ac, i32* %r3.global-to-local, align 4
  %v7_115b0 = icmp sgt i32 %v1_11594, 255
  br i1 %v7_115b0, label %dec_label_pc_115b4, label %dec_label_pc_1158c.dec_label_pc_1158c_crit_edge

dec_label_pc_1158c.dec_label_pc_1158c_crit_edge:  ; preds = %dec_label_pc_1158c
  %v1_1159c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_115a4.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1158c

dec_label_pc_115b4:                               ; preds = %dec_label_pc_1158c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_115ac, i32* %stack_var_-52, align 4
  %v3_115c4 = call i32 @function_14b30(i32 2, i32 3, i32 6)
  store i32 %v3_115c4, i32* %r0.global-to-local, align 4
  %v2_115cc = icmp eq i32 %v3_115c4, -1
  store i1 %v2_115cc, i1* %cpsr_c.global-to-local, align 1
  %v7_115cc = icmp eq i32 %v3_115c4, -1
  store i1 %v7_115cc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_115c4, i32* @r4, align 4
  store i32 %v3_115c4, i32* @global_var_1f878.202, align 4
  br i1 %v7_115cc, label %dec_label_pc_11f64, label %dec_label_pc_115dc

dec_label_pc_115dc:                               ; preds = %dec_label_pc_115b4
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_115e0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_115e0, i32* @r2, align 4
  %v2_115e4 = call i32 @function_14144(i32 %v3_115c4, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_115ec = or i32 %v2_115e4, 2048
  store i32 %v1_115ec, i32* @r2, align 4
  %v0_115f0 = load i32, i32* @r4, align 4
  store i32 %v0_115f0, i32* %r0.global-to-local, align 4
  %v2_115f4 = call i32 @function_14144(i32 %v0_115f0, i32 4)
  store i32 1, i32* %ip.global-to-local, align 4
  %v2_11600 = load i32, i32* @global_var_1f878.202, align 4
  store i32 %v2_11600, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_11608 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11608, i32* %r1.global-to-local, align 4
  %v2_1160c = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_1160c, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v6_1161c = call i32 @function_14b00(i32 %v2_11600, i32 %v0_11608, i32 3, i32* nonnull %stack_var_-52, i32 4)
  store i32 %v6_1161c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11620 = icmp eq i32 %v6_1161c, 0
  store i1 %v2_11620, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11620, label %dec_label_pc_11628, label %dec_label_pc_11f58

dec_label_pc_11628:                               ; preds = %dec_label_pc_115dc, %dec_label_pc_11628
  %v0_11628 = call i32 @function_10a44()
  %v3_1162c = mul i32 %v0_11628, 65536
  store i32 %v3_1162c, i32* %r0.global-to-local, align 4
  %v1_11638 = mul i32 %v0_11628, 256
  %v3_1163c = and i32 %v1_11638, 65280
  %tmp276 = udiv i32 %v0_11628, 256
  %v4_11640 = urem i32 %tmp276, 256
  %v5_11640 = or i32 %v4_11640, %v3_1163c
  store i32 %v5_11640, i32* %r3.global-to-local, align 4
  %v2_11644 = icmp ugt i32 %v5_11640, 1023
  store i1 %v2_11644, i1* %cpsr_c.global-to-local, align 1
  %v7_11644 = icmp eq i32 %v5_11640, 1024
  store i1 %v7_11644, i1* %cpsr_z.global-to-local, align 1
  %v3_11648 = icmp ult i32 %v5_11640, 1022
  br i1 %v3_11648, label %dec_label_pc_11628, label %dec_label_pc_1164c

dec_label_pc_1164c:                               ; preds = %dec_label_pc_11628
  %v5_11634.le = trunc i32 %v0_11628 to i8
  store i32 ptrtoint (i8** @global_var_1f7e0.204 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i8** @global_var_1f7e0.204 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1f7e3.205 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1f7e2.206 to i8*), align 4
  %v0_11680 = call i32 @function_10a44()
  %v1_11680 = trunc i32 %v0_11680 to i8
  store i32 %v0_11680, i32* %r0.global-to-local, align 4
  %v4_11688 = sext i8 %v5_11634.le to i32
  %v3_1168c = load i8, i8* @global_var_1f800.209, align 1
  store i32 ptrtoint (i8** @global_var_1f7e0.204 to i32), i32* %lr.global-to-local, align 4
  %v3_11694228 = udiv i32 %v4_11688, 256
  store i8 64, i8* bitcast (i32* @global_var_1f7e8.210 to i8*), align 4
  %v2_116a0 = and i32 %v0_11680, 128
  %v3_116a0 = icmp ne i32 %v2_116a0, 0
  store i1 %v3_116a0, i1* %cpsr_c.global-to-local, align 1
  %v4_116a0227 = udiv i32 %v0_11680, 256
  store i32 ptrtoint (i32* @global_var_1f7f4.208 to i32), i32* %r3.global-to-local, align 4
  %tmp = urem i8 %v3_1168c, 16
  %v1_116a8 = zext i8 %tmp to i32
  %v1_116ac = trunc i32 %v4_116a0227 to i8
  store i8 %v1_116ac, i8* bitcast (i32* @global_var_1f7e5.211 to i8*), align 4
  %v1_116b0 = or i32 %v1_116a8, 80
  store i32 %v1_116b0, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  store i32 6, i32* @r6, align 4
  %v1_116bc = trunc i32 %v1_116b0 to i8
  store i8 %v1_116bc, i8* @global_var_1f800.209, align 1
  %v1_116c0 = trunc i32 %v3_11694228 to i8
  store i8 %v1_116c0, i8* bitcast (i32* @global_var_1f7f5.212 to i8*), align 4
  store i8 23, i8* bitcast (i32* @global_var_1f7f7.213 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1f7e9.214 to i8*), align 4
  store i32 %v4_11688, i32* %ip.global-to-local, align 4
  store i8 %v1_11680, i8* bitcast (i32* @global_var_1f7e4.215 to i8*), align 4
  store i8 %v5_11634.le, i8* bitcast (i32* @global_var_1f7f4.208 to i8*), align 4
  %v0_116d8 = load i32, i32* @r5, align 4
  %v1_116d8 = trunc i32 %v0_116d8 to i8
  store i8 %v1_116d8, i8* bitcast (i32* @global_var_1f7f6.216 to i8*), align 4
  %v0_116dc = call i32 @function_10a44()
  %v1_116dc = trunc i32 %v0_116dc to i8
  store i32 ptrtoint (i32* @global_var_1f7f4.208 to i32), i32* @lr, align 4
  %v3_116e4 = load i8, i8* @global_var_1f801.217, align 1
  %v4_116e4 = zext i8 %v3_116e4 to i32
  %v2_116e8 = and i32 %v0_116dc, 128
  %v3_116e8 = icmp ne i32 %v2_116e8, 0
  store i1 %v3_116e8, i1* %cpsr_c.global-to-local, align 1
  %v4_116e8 = sdiv i32 %v0_116dc, 256
  store i32 %v4_116e8, i32* %ip.global-to-local, align 4
  %v1_116ec = or i32 %v4_116e4, 2
  store i32 %v1_116ec, i32* %r3.global-to-local, align 4
  store i32 %v0_116dc, i32* @r4, align 4
  %v1_116f4 = trunc i32 %v4_116e8 to i8
  store i8 %v1_116f4, i8* bitcast (i32* @global_var_1f803.218 to i8*), align 4
  %v1_116f8 = trunc i32 %v1_116ec to i8
  store i8 %v1_116f8, i8* @global_var_1f801.217, align 1
  store i8 %v1_116dc, i8* bitcast (i32* @global_var_1f802.219 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16d4c.223 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1170c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint (i32* @global_var_16d4c.223 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16d54.225 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_1171c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint ([6 x i8]* @global_var_16d54.225 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_1172c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32* %r1.global-to-local, align 4
  %v5_1173c = call i32 @function_1135c(i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32 7)
  %v0_11740 = load i32, i32* @r6, align 4
  store i32 %v0_11740, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16d64.229 to i32), i32* %r1.global-to-local, align 4
  %v4_1174c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint (i32* @global_var_16d64.229 to i32), i32 %v0_11740)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_16d6c.231 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_1175c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint ([8 x i8]* @global_var_16d6c.231 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_16d74.233 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_1176c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint ([8 x i8]* @global_var_16d74.233 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16d7c.235 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_1177c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint ([9 x i8]* @global_var_16d7c.235 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16d88.237 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_1178c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint (i32* @global_var_16d88.237 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16d90.239 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_1179c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint (i32* @global_var_16d90.239 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_16d98.241 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_16d98.241 to i32), i32* %r1.global-to-local, align 4
  %v5_117ac = call i32 @function_1135c(i32 ptrtoint ([8 x i8]* @global_var_16d98.241 to i32), i32 ptrtoint ([8 x i8]* @global_var_16d98.241 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16b18.243 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_117bc = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint (i32* @global_var_16b18.243 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16bdc.245 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_117cc = call i32 @function_1135c(i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32 ptrtoint ([9 x i8]* @global_var_16bdc.245 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r1.global-to-local, align 4
  %v5_117dc = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16be8.247 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_117ec = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint (i32* @global_var_16be8.247 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_16bf0.249 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16bf0.249 to i32), i32* %r1.global-to-local, align 4
  %v5_117fc = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16bf0.249 to i32), i32 ptrtoint ([5 x i8]* @global_var_16bf0.249 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16b18.243 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_1180c = call i32 @function_1135c(i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32 ptrtoint (i32* @global_var_16b18.243 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16bf8.251 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_1181c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint ([5 x i8]* @global_var_16bf8.251 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c00.253 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_1182c = call i32 @function_1135c(i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32 ptrtoint (i32* @global_var_16c00.253 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c0c.255 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_1183c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint (i32* @global_var_16c0c.255 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16c14.257 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_1184c = call i32 @function_1135c(i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32 ptrtoint ([9 x i8]* @global_var_16c14.257 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c0c.255 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_1185c = call i32 @function_1135c(i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32 ptrtoint (i32* @global_var_16c0c.255 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c20.259 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_1186c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint (i32* @global_var_16c20.259 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16bdc.245 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_1187c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint ([9 x i8]* @global_var_16bdc.245 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c28.261 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_1188c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint (i32* @global_var_16c28.261 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c30.263 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1189c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint (i32* @global_var_16c30.263 to i32), i32 1)
  store i32 ptrtoint ([14 x i8]* @global_var_16c38.265 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16c48.267 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_118ac = call i32 @function_1135c(i32 ptrtoint ([14 x i8]* @global_var_16c38.265 to i32), i32 ptrtoint ([7 x i8]* @global_var_16c48.267 to i32), i32 1)
  store i32 ptrtoint ([8 x i8]* @global_var_16c50.269 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_16c50.269 to i32), i32* %r1.global-to-local, align 4
  %v5_118bc = call i32 @function_1135c(i32 ptrtoint ([8 x i8]* @global_var_16c50.269 to i32), i32 ptrtoint ([8 x i8]* @global_var_16c50.269 to i32), i32 1)
  store i32 ptrtoint ([11 x i8]* @global_var_16c58.271 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_16c58.271 to i32), i32* %r1.global-to-local, align 4
  %v5_118cc = call i32 @function_1135c(i32 ptrtoint ([11 x i8]* @global_var_16c58.271 to i32), i32 ptrtoint ([11 x i8]* @global_var_16c58.271 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16c64.273 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16c64.273 to i32), i32* %r1.global-to-local, align 4
  %v5_118dc = call i32 @function_1135c(i32 ptrtoint ([6 x i8]* @global_var_16c64.273 to i32), i32 ptrtoint ([6 x i8]* @global_var_16c64.273 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16c64.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16be8.247 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_118ec = call i32 @function_1135c(i32 ptrtoint ([6 x i8]* @global_var_16c64.273 to i32), i32 ptrtoint (i32* @global_var_16be8.247 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16c64.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16be8.247 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_118fc = call i32 @function_1135c(i32 ptrtoint ([6 x i8]* @global_var_16c64.273 to i32), i32 ptrtoint (i32* @global_var_16be8.247 to i32), i32 1)
  store i32 ptrtoint (i32* @global_var_16c6c.275 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16bdc.245 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1190c = call i32 @function_1135c(i32 ptrtoint (i32* @global_var_16c6c.275 to i32), i32 ptrtoint ([9 x i8]* @global_var_16bdc.245 to i32), i32 1)
  store i32 ptrtoint ([14 x i8]* @global_var_16c74.277 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c28.261 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1191c = call i32 @function_1135c(i32 ptrtoint ([14 x i8]* @global_var_16c74.277 to i32), i32 ptrtoint (i32* @global_var_16c28.261 to i32), i32 1)
  store i32 ptrtoint (i32* @global_var_16c20.259 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c20.259 to i32), i32* %r1.global-to-local, align 4
  %v3_1192c = call i32 @function_1135c(i32 ptrtoint (i32* @global_var_16c20.259 to i32), i32 ptrtoint (i32* @global_var_16c20.259 to i32), i32 1)
  store i32 ptrtoint (i32* @global_var_16d64.229 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16d64.229 to i32), i32* %r1.global-to-local, align 4
  %v3_1193c = call i32 @function_1135c(i32 ptrtoint (i32* @global_var_16d64.229 to i32), i32 ptrtoint (i32* @global_var_16d64.229 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16c84.279 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16c84.279 to i32), i32* %r1.global-to-local, align 4
  %v5_1194c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16c84.279 to i32), i32 ptrtoint ([5 x i8]* @global_var_16c84.279 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c8c.281 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1195c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint (i32* @global_var_16c8c.281 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c94.283 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1196c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint (i32* @global_var_16c94.283 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c9c.285 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1197c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint (i32* @global_var_16c9c.285 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16ca4.287 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_1198c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint ([6 x i8]* @global_var_16ca4.287 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16cac.289 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_1199c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint ([5 x i8]* @global_var_16cac.289 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16cb4.291 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_119ac = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint ([6 x i8]* @global_var_16cb4.291 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16cbc.293 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_119bc = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint (i32* @global_var_16cbc.293 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16ccc.295 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_119cc = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint (i32* @global_var_16ccc.295 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16cdc.297 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_119dc = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint ([7 x i8]* @global_var_16cdc.297 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16ce4.299 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_119ec = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint ([5 x i8]* @global_var_16ce4.299 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16cec.301 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_119fc = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint ([9 x i8]* @global_var_16cec.301 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16bf0.249 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_11a0c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint ([5 x i8]* @global_var_16bf0.249 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_16cf8.303 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_11a1c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint ([8 x i8]* @global_var_16cf8.303 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16d00.305 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11a2c = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), i32 ptrtoint (i32* @global_var_16d00.305 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16d0c.307 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11a3c = call i32 @function_1135c(i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32 ptrtoint (i32* @global_var_16d0c.307 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c28.261 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11a4c = call i32 @function_1135c(i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32 ptrtoint (i32* @global_var_16c28.261 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16be8.247 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11a5c = call i32 @function_1135c(i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32 ptrtoint (i32* @global_var_16be8.247 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16d90.239 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11a6c = call i32 @function_1135c(i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32 ptrtoint (i32* @global_var_16d90.239 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16d88.237 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11a7c = call i32 @function_1135c(i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32 ptrtoint (i32* @global_var_16d88.237 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16ccc.295 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11a8c = call i32 @function_1135c(i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32 ptrtoint (i32* @global_var_16ccc.295 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16d14.309 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11a9c = call i32 @function_1135c(i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32 ptrtoint (i32* @global_var_16d14.309 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16bf8.251 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_11aac = call i32 @function_1135c(i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32 ptrtoint ([5 x i8]* @global_var_16bf8.251 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16c48.267 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_11abc = call i32 @function_1135c(i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), i32 ptrtoint ([7 x i8]* @global_var_16c48.267 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d80.311 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16d80.311 to i32), i32* %r1.global-to-local, align 4
  %v5_11acc = call i32 @function_1135c(i32 ptrtoint ([5 x i8]* @global_var_16d80.311 to i32), i32 ptrtoint ([5 x i8]* @global_var_16d80.311 to i32), i32 1)
  store i32 ptrtoint ([7 x i8]* @global_var_16d1c.313 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16d24.315 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_11adc = call i32 @function_1135c(i32 ptrtoint ([7 x i8]* @global_var_16d1c.313 to i32), i32 ptrtoint ([7 x i8]* @global_var_16d24.315 to i32), i32 1)
  %v2_11ae4 = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_11ae4, i32* %r0.global-to-local, align 4
  %v2_11ae8 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_11ae8, i32* %r1.global-to-local, align 4
  %tmp277 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_11af4

dec_label_pc_11af4:                               ; preds = %dec_label_pc_1214c, %dec_label_pc_1164c
  %stack_var_-1872.0 = phi i32 [ %tmp239, %dec_label_pc_1164c ], [ %stack_var_-1872.2, %dec_label_pc_1214c ]
  %stack_var_-1884.0 = phi i8* [ %tmp277, %dec_label_pc_1164c ], [ %stack_var_-1884.1, %dec_label_pc_1214c ]
  %v0_11e24 = phi i32 [ %v2_11ae4, %dec_label_pc_1164c ], [ %stack_var_-1880.1, %dec_label_pc_1214c ]
  %stack_var_-1876.0 = phi i8 [ %v5_11634.le, %dec_label_pc_1164c ], [ %stack_var_-1876.1, %dec_label_pc_1214c ]
  store i32 ptrtoint (i32* @global_var_1f810.188 to i32), i32* %r2.global-to-local, align 4
  store i32 %stack_var_-1872.0, i32* %r3.global-to-local, align 4
  %v2_11afc = load i32, i32* @global_var_1f810.188, align 4
  store i32 %v2_11afc, i32* @r8, align 4
  %v3_11b00 = icmp uge i32 %stack_var_-1872.0, %v2_11afc
  store i1 %v3_11b00, i1* %cpsr_c.global-to-local, align 1
  %v9_11b00 = icmp eq i32 %stack_var_-1872.0, %v2_11afc
  store i1 %v9_11b00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11b00, label %dec_label_pc_11dac, label %dec_label_pc_11b08

dec_label_pc_11b08:                               ; preds = %dec_label_pc_11af4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  %v2_11d7c = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_11b14

dec_label_pc_11b14:                               ; preds = %.thread47.dec_label_pc_11b14_crit_edge, %dec_label_pc_11b08
  %v0_11b14 = phi i32 [ %v0_11b14.pre, %.thread47.dec_label_pc_11b14_crit_edge ], [ 0, %dec_label_pc_11b08 ]
  store i32 %v0_11b14, i32* %stack_var_-92, align 4
  store i32 %v0_11b14, i32* %stack_var_-84, align 4
  %v0_11b24 = call i32 @function_10a44()
  %v1_11b24 = trunc i32 %v0_11b24 to i8
  store i32 %v0_11b24, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f858.88 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f7e0.204 to i32), i32* %r1.global-to-local, align 4
  %v2_11b30 = load i32, i32* @global_var_1f858.88, align 4
  store i32 %v2_11b30, i32* %r2.global-to-local, align 4
  %v2_11b34 = and i32 %v0_11b24, 128
  %v3_11b34 = icmp ne i32 %v2_11b34, 0
  store i1 %v3_11b34, i1* %cpsr_c.global-to-local, align 1
  %v4_11b34 = sdiv i32 %v0_11b24, 256
  store i32 %v4_11b34, i32* %r3.global-to-local, align 4
  %v1_11b38 = trunc i32 %v4_11b34 to i8
  store i8 %v1_11b38, i8* bitcast (i32* @global_var_1f7e5.211 to i8*), align 4
  store i32 %v2_11b30, i32* @global_var_1f7ec.316, align 4
  store i8 %v1_11b24, i8* bitcast (i32* @global_var_1f7e4.215 to i8*), align 4
  br label %dec_label_pc_11b44

dec_label_pc_11b44:                               ; preds = %dec_label_pc_11c18, %dec_label_pc_11b74, %dec_label_pc_11c4c, %dec_label_pc_11c40, %dec_label_pc_11c34, %dec_label_pc_11c28, %.thread32, %bb296, %bb295, %bb294, %bb293, %bb292, %dec_label_pc_11c10, %dec_label_pc_11c08, %bb288, %dec_label_pc_11bd8, %dec_label_pc_11bb4, %bb281, %dec_label_pc_11b84, %bb280, %dec_label_pc_11b6c, %bb279, %bb298, %dec_label_pc_11b14
  %v0_11b44 = call i32 @function_10a44()
  store i32 %v0_11b44, i32* %r0.global-to-local, align 4
  %v1_11b48 = urem i32 %v0_11b44, 256
  store i32 %v1_11b48, i32* %r1.global-to-local, align 4
  %v3_11b4c = udiv i32 %v0_11b44, 256
  store i32 %v3_11b4c, i32* %r3.global-to-local, align 4
  %v3_11b50 = udiv i32 %v0_11b44, 65536
  store i32 %v3_11b50, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11b54 = icmp eq i32 %v1_11b48, 0
  store i1 %v2_11b54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11b54, label %bb279, label %bb278

bb278:                                            ; preds = %dec_label_pc_11b44
  %v3_11b58 = icmp ugt i32 %v1_11b48, 126
  store i1 %v3_11b58, i1* %cpsr_c.global-to-local, align 1
  %v8_11b58 = icmp eq i32 %v1_11b48, 127
  store i1 %v8_11b58, i1* %cpsr_z.global-to-local, align 1
  br label %bb279

bb279:                                            ; preds = %dec_label_pc_11b44, %bb278
  %v0_11b68 = phi i1 [ true, %dec_label_pc_11b44 ], [ %v8_11b58, %bb278 ]
  %v1_11b5c = urem i32 %v3_11b4c, 256
  store i32 %v1_11b5c, i32* %ip.global-to-local, align 4
  %v1_11b60 = urem i32 %v3_11b50, 256
  store i32 %v1_11b60, i32* %r2.global-to-local, align 4
  %v1_11b64 = and i32 %v0_11b44, 8388608
  %v2_11b64 = icmp ne i32 %v1_11b64, 0
  store i1 %v2_11b64, i1* %cpsr_c.global-to-local, align 1
  %v3_11b64 = udiv i32 %v0_11b44, 16777216
  store i32 %v3_11b64, i32* %r0.global-to-local, align 4
  br i1 %v0_11b68, label %dec_label_pc_11b44, label %dec_label_pc_11b6c

dec_label_pc_11b6c:                               ; preds = %bb279
  %v2_11b6c = icmp ugt i32 %v1_11b48, 2
  store i1 %v2_11b6c, i1* %cpsr_c.global-to-local, align 1
  %v7_11b6c = icmp eq i32 %v1_11b48, 3
  store i1 %v7_11b6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b6c, label %dec_label_pc_11b44, label %dec_label_pc_11b74

dec_label_pc_11b74:                               ; preds = %dec_label_pc_11b6c
  %v1_11b74 = add nsw i32 %v1_11b48, -15
  store i32 %v1_11b74, i32* %r3.global-to-local, align 4
  %v2_11b78 = icmp ugt i32 %v1_11b48, 55
  store i1 %v2_11b78, i1* %cpsr_c.global-to-local, align 1
  %v7_11b78 = icmp eq i32 %v1_11b48, 56
  store i1 %v7_11b78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b78, label %dec_label_pc_11b44, label %bb280

bb280:                                            ; preds = %dec_label_pc_11b74
  %v3_11b7c = icmp ne i32 %v1_11b74, 0
  store i1 %v3_11b7c, i1* %cpsr_c.global-to-local, align 1
  %v8_11b7c = icmp eq i32 %v1_11b74, 1
  store i1 %v8_11b7c, i1* %cpsr_z.global-to-local, align 1
  %v2_11b80 = xor i1 %v3_11b7c, true
  %v3_11b80 = or i1 %v8_11b7c, %v2_11b80
  br i1 %v3_11b80, label %dec_label_pc_11b44, label %dec_label_pc_11b84

dec_label_pc_11b84:                               ; preds = %bb280
  %v2_11b84 = icmp ugt i32 %v1_11b48, 9
  store i1 %v2_11b84, i1* %cpsr_c.global-to-local, align 1
  %v7_11b84 = icmp eq i32 %v1_11b48, 10
  store i1 %v7_11b84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b84, label %dec_label_pc_11b44, label %dec_label_pc_11b8c

dec_label_pc_11b8c:                               ; preds = %dec_label_pc_11b84
  %v2_11b8c = icmp ugt i32 %v1_11b48, 191
  store i1 %v2_11b8c, i1* %cpsr_c.global-to-local, align 1
  %v7_11b8c = icmp eq i32 %v1_11b48, 192
  store i1 %v7_11b8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b8c, label %bb281, label %dec_label_pc_11b98

bb281:                                            ; preds = %dec_label_pc_11b8c
  %v3_11b90 = icmp ugt i32 %v1_11b5c, 167
  store i1 %v3_11b90, i1* %cpsr_c.global-to-local, align 1
  %v8_11b90 = icmp eq i32 %v1_11b5c, 168
  store i1 %v8_11b90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11b90, label %dec_label_pc_11b44, label %dec_label_pc_11b98

dec_label_pc_11b98:                               ; preds = %dec_label_pc_11b8c, %bb281
  %v7_11b98 = icmp eq i32 %v1_11b48, 172
  %.347 = zext i1 %v7_11b98 to i32
  store i32 %.347, i32* %r3.global-to-local, align 4
  %v2_11ba4 = icmp ugt i32 %v1_11b5c, 14
  store i1 %v2_11ba4, i1* %cpsr_c.global-to-local, align 1
  %v7_11ba4 = icmp eq i32 %v1_11b5c, 15
  store i1 %v7_11ba4, i1* %cpsr_z.global-to-local, align 1
  %v2_11ba8 = xor i1 %v2_11ba4, true
  %v3_11ba8 = or i1 %v7_11ba4, %v2_11ba8
  br i1 %v3_11ba8, label %.thread10, label %bb284

.thread10:                                        ; preds = %dec_label_pc_11b98
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11bbc

bb284:                                            ; preds = %dec_label_pc_11b98
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11bac = icmp eq i1 %v7_11b98, false
  store i1 %v2_11bac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11bac, label %dec_label_pc_11bbc, label %dec_label_pc_11bb4

dec_label_pc_11bb4:                               ; preds = %bb284
  %v2_11bb4 = icmp ugt i32 %v1_11b5c, 30
  store i1 %v2_11bb4, i1* %cpsr_c.global-to-local, align 1
  %v7_11bb4 = icmp eq i32 %v1_11b5c, 31
  store i1 %v7_11bb4, i1* %cpsr_z.global-to-local, align 1
  %v2_11bb8 = xor i1 %v2_11bb4, true
  %v3_11bb8 = or i1 %v7_11bb4, %v2_11bb8
  br i1 %v3_11bb8, label %dec_label_pc_11b44, label %dec_label_pc_11bbc

dec_label_pc_11bbc:                               ; preds = %.thread10, %dec_label_pc_11bb4, %bb284
  %v7_11bbc = icmp eq i32 %v1_11b48, 100
  %.348 = zext i1 %v7_11bbc to i32
  store i32 %.348, i32* %r3.global-to-local, align 4
  %v2_11bc8 = icmp ugt i32 %v1_11b5c, 62
  store i1 %v2_11bc8, i1* %cpsr_c.global-to-local, align 1
  %v7_11bc8 = icmp eq i32 %v1_11b5c, 63
  store i1 %v7_11bc8, i1* %cpsr_z.global-to-local, align 1
  %v2_11bcc = xor i1 %v2_11bc8, true
  %v3_11bcc = or i1 %v7_11bc8, %v2_11bcc
  br i1 %v3_11bcc, label %.thread15, label %bb287

.thread15:                                        ; preds = %dec_label_pc_11bbc
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11be0

bb287:                                            ; preds = %dec_label_pc_11bbc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11bd0 = icmp eq i1 %v7_11bbc, false
  store i1 %v2_11bd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11bd0, label %dec_label_pc_11be0, label %dec_label_pc_11bd8

dec_label_pc_11bd8:                               ; preds = %bb287
  %v2_11bd8 = icmp ugt i32 %v1_11b5c, 125
  store i1 %v2_11bd8, i1* %cpsr_c.global-to-local, align 1
  %v7_11bd8 = icmp eq i32 %v1_11b5c, 126
  store i1 %v7_11bd8, i1* %cpsr_z.global-to-local, align 1
  %v2_11bdc = xor i1 %v2_11bd8, true
  %v3_11bdc = or i1 %v7_11bd8, %v2_11bdc
  br i1 %v3_11bdc, label %dec_label_pc_11b44, label %dec_label_pc_11be0

dec_label_pc_11be0:                               ; preds = %.thread15, %dec_label_pc_11bd8, %bb287
  %v2_11be0 = icmp ugt i32 %v1_11b48, 168
  store i1 %v2_11be0, i1* %cpsr_c.global-to-local, align 1
  %v7_11be0 = icmp eq i32 %v1_11b48, 169
  store i1 %v7_11be0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11be0, label %bb288, label %dec_label_pc_11bec

bb288:                                            ; preds = %dec_label_pc_11be0
  %v3_11be4 = icmp eq i32 %v1_11b5c, 255
  store i1 %v3_11be4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_11be4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11be4, label %dec_label_pc_11b44, label %dec_label_pc_11bec

dec_label_pc_11bec:                               ; preds = %dec_label_pc_11be0, %bb288
  %v7_11bec = icmp eq i32 %v1_11b48, 198
  %.349 = zext i1 %v7_11bec to i32
  store i32 %.349, i32* %r3.global-to-local, align 4
  %v2_11bf8 = icmp ugt i32 %v1_11b5c, 16
  store i1 %v2_11bf8, i1* %cpsr_c.global-to-local, align 1
  %v7_11bf8 = icmp eq i32 %v1_11b5c, 17
  store i1 %v7_11bf8, i1* %cpsr_z.global-to-local, align 1
  %v2_11bfc = xor i1 %v2_11bf8, true
  %v3_11bfc = or i1 %v7_11bf8, %v2_11bfc
  br i1 %v3_11bfc, label %.thread21, label %bb291

.thread21:                                        ; preds = %dec_label_pc_11bec
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11c10

bb291:                                            ; preds = %dec_label_pc_11bec
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11c00 = icmp eq i1 %v7_11bec, false
  store i1 %v2_11c00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11c00, label %dec_label_pc_11c10, label %dec_label_pc_11c08

dec_label_pc_11c08:                               ; preds = %bb291
  %v2_11c08 = icmp ugt i32 %v1_11b5c, 18
  store i1 %v2_11c08, i1* %cpsr_c.global-to-local, align 1
  %v7_11c08 = icmp eq i32 %v1_11b5c, 19
  store i1 %v7_11c08, i1* %cpsr_z.global-to-local, align 1
  %v2_11c0c = xor i1 %v2_11c08, true
  %v3_11c0c = or i1 %v7_11c08, %v2_11c0c
  br i1 %v3_11c0c, label %dec_label_pc_11b44, label %dec_label_pc_11c10

dec_label_pc_11c10:                               ; preds = %.thread21, %dec_label_pc_11c08, %bb291
  %v2_11c10 = icmp ugt i32 %v1_11b48, 222
  store i1 %v2_11c10, i1* %cpsr_c.global-to-local, align 1
  %v7_11c10 = icmp eq i32 %v1_11b48, 223
  store i1 %v7_11c10, i1* %cpsr_z.global-to-local, align 1
  %v2_11c14 = xor i1 %v7_11c10, true
  %v3_11c14 = and i1 %v2_11c10, %v2_11c14
  br i1 %v3_11c14, label %dec_label_pc_11b44, label %dec_label_pc_11c18

dec_label_pc_11c18:                               ; preds = %dec_label_pc_11c10
  %v1_11c18 = add nsw i32 %v1_11b48, -6
  store i32 %v1_11c18, i32* %r3.global-to-local, align 4
  %v2_11c1c = icmp ugt i32 %v1_11b48, 10
  store i1 %v2_11c1c, i1* %cpsr_c.global-to-local, align 1
  %v7_11c1c = icmp eq i32 %v1_11b48, 11
  store i1 %v7_11c1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c1c, label %dec_label_pc_11b44, label %bb292

bb292:                                            ; preds = %dec_label_pc_11c18
  %v3_11c20 = icmp ne i32 %v1_11c18, 0
  store i1 %v3_11c20, i1* %cpsr_c.global-to-local, align 1
  %v8_11c20 = icmp eq i32 %v1_11c18, 1
  store i1 %v8_11c20, i1* %cpsr_z.global-to-local, align 1
  %v2_11c24 = xor i1 %v3_11c20, true
  %v3_11c24 = or i1 %v8_11c20, %v2_11c24
  br i1 %v3_11c24, label %dec_label_pc_11b44, label %dec_label_pc_11c28

dec_label_pc_11c28:                               ; preds = %bb292
  %v2_11c28 = icmp ugt i32 %v1_11b48, 21
  store i1 %v2_11c28, i1* %cpsr_c.global-to-local, align 1
  %v7_11c28 = icmp eq i32 %v1_11b48, 22
  store i1 %v7_11c28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c28, label %dec_label_pc_11b44, label %bb293

bb293:                                            ; preds = %dec_label_pc_11c28
  %v3_11c2c = icmp ugt i32 %v1_11b48, 20
  store i1 %v3_11c2c, i1* %cpsr_c.global-to-local, align 1
  %v8_11c2c = icmp eq i32 %v1_11b48, 21
  store i1 %v8_11c2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11c2c, label %dec_label_pc_11b44, label %dec_label_pc_11c34

dec_label_pc_11c34:                               ; preds = %bb293
  %v2_11c34 = icmp ugt i32 %v1_11b48, 27
  store i1 %v2_11c34, i1* %cpsr_c.global-to-local, align 1
  %v7_11c34 = icmp eq i32 %v1_11b48, 28
  store i1 %v7_11c34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c34, label %dec_label_pc_11b44, label %bb294

bb294:                                            ; preds = %dec_label_pc_11c34
  %v3_11c38 = icmp ugt i32 %v1_11b48, 25
  store i1 %v3_11c38, i1* %cpsr_c.global-to-local, align 1
  %v8_11c38 = icmp eq i32 %v1_11b48, 26
  store i1 %v8_11c38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11c38, label %dec_label_pc_11b44, label %dec_label_pc_11c40

dec_label_pc_11c40:                               ; preds = %bb294
  %v2_11c40 = icmp ugt i32 %v1_11b48, 29
  store i1 %v2_11c40, i1* %cpsr_c.global-to-local, align 1
  %v7_11c40 = icmp eq i32 %v1_11b48, 30
  store i1 %v7_11c40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c40, label %dec_label_pc_11b44, label %bb295

bb295:                                            ; preds = %dec_label_pc_11c40
  %v3_11c44 = icmp ugt i32 %v1_11b48, 28
  store i1 %v3_11c44, i1* %cpsr_c.global-to-local, align 1
  %v8_11c44 = icmp eq i32 %v1_11b48, 29
  store i1 %v8_11c44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11c44, label %dec_label_pc_11b44, label %dec_label_pc_11c4c

dec_label_pc_11c4c:                               ; preds = %bb295
  %v2_11c4c = icmp ugt i32 %v1_11b48, 54
  store i1 %v2_11c4c, i1* %cpsr_c.global-to-local, align 1
  %v7_11c4c = icmp eq i32 %v1_11b48, 55
  store i1 %v7_11c4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c4c, label %dec_label_pc_11b44, label %bb296

bb296:                                            ; preds = %dec_label_pc_11c4c
  %v3_11c50 = icmp ugt i32 %v1_11b48, 32
  store i1 %v3_11c50, i1* %cpsr_c.global-to-local, align 1
  %v8_11c50 = icmp eq i32 %v1_11b48, 33
  store i1 %v8_11c50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11c50, label %dec_label_pc_11b44, label %dec_label_pc_11c58

dec_label_pc_11c58:                               ; preds = %bb296
  %v2_11c58 = icmp ugt i32 %v1_11b48, 214
  store i1 %v2_11c58, i1* %cpsr_c.global-to-local, align 1
  %v7_11c58 = icmp eq i32 %v1_11b48, 215
  store i1 %v7_11c58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c58, label %.thread32, label %bb297

bb297:                                            ; preds = %dec_label_pc_11c58
  %v3_11c5c = icmp ugt i32 %v1_11b48, 213
  store i1 %v3_11c5c, i1* %cpsr_c.global-to-local, align 1
  %v8_11c5c = icmp eq i32 %v1_11b48, 214
  store i1 %v8_11c5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11c5c, label %bb298, label %dec_label_pc_11c6c

.thread32:                                        ; preds = %dec_label_pc_11c58
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b44

bb298:                                            ; preds = %bb297
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b44

dec_label_pc_11c6c:                               ; preds = %bb297
  store i32 0, i32* @r4, align 4
  %v5_11c78 = call i32 @llvm.bswap.i32(i32 %v0_11b44)
  store i32 %v5_11c78, i32* %r3.global-to-local, align 4
  %tmp299 = and i32 %v0_11b44, 65280
  %tmp300 = call i32 @llvm.bswap.i32(i32 %tmp299)
  %tmp301 = and i32 %v0_11b44, 16711680
  %tmp302 = call i32 @llvm.bswap.i32(i32 %tmp301)
  %v3_11c84 = mul nuw i32 %v3_11b64, 16777216
  %v3_11c88 = udiv i32 %tmp300, 256
  %v4_11c8c = mul nuw nsw i32 %tmp302, 256
  %tmp303 = and i32 %v0_11b44, 32768
  %v3_11c90 = icmp ne i32 %tmp303, 0
  store i1 %v3_11c90, i1* %cpsr_c.global-to-local, align 1
  %v4_11c90 = udiv i32 %v5_11c78, 16777216
  store i32 ptrtoint (i8** @global_var_1f7e0.204 to i32), i32* @r0, align 4
  %v5_11c90 = or i32 %v4_11c90, %v3_11c84
  %v5_11c8c = or i32 %v5_11c90, %v4_11c8c
  %v2_11c98 = or i32 %v5_11c8c, %v3_11c88
  store i32 %v2_11c98, i32* %r2.global-to-local, align 4
  %v5_11c9c = trunc i32 %v4_11c90 to i8
  store i8 %v5_11c9c, i8* @global_var_1f7f0.317, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1f7ea.318 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1f7eb.319 to i8*), align 4
  %v3_11cac = call i32 @function_f008(i32 ptrtoint (i8** @global_var_1f7e0.204 to i32), i32 20)
  store i32 ptrtoint (i8** @global_var_1f7e0.204 to i32), i32* %ip.global-to-local, align 4
  %sext6 = mul i32 %v3_11cac, 16777216
  %v1_11cb4 = sdiv i32 %sext6, 16777216
  store i32 %v1_11cb4, i32* %r3.global-to-local, align 4
  %v2_11cb8 = and i32 %v1_11cb4, 128
  %v3_11cb8 = icmp ne i32 %v2_11cb8, 0
  store i1 %v3_11cb8, i1* %cpsr_c.global-to-local, align 1
  %v4_11cb8 = ashr i32 %sext6, 31
  store i32 %v4_11cb8, i32* %r2.global-to-local, align 4
  %v1_11cbc = trunc i32 %v1_11cb4 to i8
  store i8 %v1_11cbc, i8* bitcast (i32* @global_var_1f7ea.318 to i8*), align 4
  %v1_11cc0 = trunc i32 %v4_11cb8 to i8
  store i8 %v1_11cc0, i8* bitcast (i32* @global_var_1f7eb.319 to i8*), align 4
  %v3_11cc4 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_11cc4, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_11ccc = call i32 @function_1405c(i32 %v3_11cc4, i32 10)
  store i32 %v2_11ccc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11cd0 = icmp eq i32 %v2_11ccc, 0
  store i1 %v2_11cd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11cd0, label %.thread198, label %bb304

.thread198:                                       ; preds = %dec_label_pc_11c6c
  store i32 ptrtoint (i32* @global_var_1f7f4.208 to i32), i32* @lr, align 4
  br label %.thread42.thread73

bb304:                                            ; preds = %dec_label_pc_11c6c
  store i32 ptrtoint (i32* @global_var_1f7f4.208 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_11ce0 = load i32, i32* @r4, align 4
  %v2_11ce0 = trunc i32 %v1_11ce0 to i8
  store i8 %v2_11ce0, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f7f4.208 to i32), i32 2) to i8*), align 2
  %v0_11ce4.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11ce4.pr.pre, label %.thread42.thread73, label %.thread39

.thread39:                                        ; preds = %bb304
  %v1_11ce4 = load i32, i32* %r3.global-to-local, align 4
  %v2_11ce4 = trunc i32 %v1_11ce4 to i8
  %v3_11ce4 = load i32, i32* %r0.global-to-local, align 4
  %v4_11ce4 = add i32 %v3_11ce4, 3
  %v5_11ce4 = inttoptr i32 %v4_11ce4 to i8*
  store i8 %v2_11ce4, i8* %v5_11ce4, align 1
  %v0_11cec.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1f7e0.204 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_11cec.pr.pr, label %.thread45, label %.thread47

.thread42.thread73:                               ; preds = %bb304, %.thread198
  store i32 ptrtoint (i8** @global_var_1f7e0.204 to i32), i32* %r0.global-to-local, align 4
  br label %.thread45

.thread45:                                        ; preds = %.thread39, %.thread42.thread73
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_11cf4 = load i32, i32* @lr, align 4
  %v4_11cf4 = add i32 %v3_11cf4, 2
  %v5_11cf4 = inttoptr i32 %v4_11cf4 to i8*
  store i8 9, i8* %v5_11cf4, align 1
  %v0_11cf8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11cf8.pr.pr, label %bb305, label %.thread47

bb305:                                            ; preds = %.thread45
  %v1_11cf8 = load i32, i32* %r2.global-to-local, align 4
  %v2_11cf8 = trunc i32 %v1_11cf8 to i8
  %v3_11cf8 = load i32, i32* @lr, align 4
  %v4_11cf8 = add i32 %v3_11cf8, 3
  %v5_11cf8 = inttoptr i32 %v4_11cf8 to i8*
  store i8 %v2_11cf8, i8* %v5_11cf8, align 1
  br label %.thread47

.thread47:                                        ; preds = %.thread39, %.thread45, %bb305
  %v4_11cfc = load i8, i8* @global_var_1f7f0.317, align 1
  %v5_11cfc = sext i8 %v4_11cfc to i32
  store i32 %v5_11cfc, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f7f4.208 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f7f4.208 to i32), i32* @r1, align 4
  store i8 %v4_11cfc, i8* @global_var_1f7f8.320, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_11d14 = load i32, i32* %sl.global-to-local, align 4
  %v1_11d14 = trunc i32 %v0_11d14 to i8
  store i8 %v1_11d14, i8* bitcast (i32* @global_var_1f804.321 to i8*), align 4
  store i8 %v1_11d14, i8* bitcast (i32* @global_var_1f805.322 to i8*), align 4
  %v5_11d1c = call i32 @function_f064(i32 ptrtoint (i8** @global_var_1f7e0.204 to i32), i32 ptrtoint (i32* @global_var_1f7f4.208 to i32), i32 5120, i32 20)
  %sext = mul i32 %v5_11d1c, 16777216
  %v1_11d24 = sdiv i32 %sext, 16777216
  %v3_11d2c = ashr i32 %sext, 31
  %v2_11d30 = load i32, i32* @global_var_1f7f4.208, align 4
  %v1_11d38 = trunc i32 %v3_11d2c to i8
  store i8 %v1_11d38, i8* bitcast (i32* @global_var_1f805.322 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_11d4c = load i8, i8* @global_var_1f7f0.317, align 1
  %v4_11d4c = sext i8 %v3_11d4c to i32
  store i32 %v4_11d4c, i32* @r4, align 4
  %v2_11d50 = load i32, i32* @global_var_1f878.202, align 4
  store i32 %v2_11d50, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f7f4.208 to i32), i32* %ip.global-to-local, align 4
  %v1_11d60 = and i32 %v2_11d30, 8388608
  %v2_11d60 = icmp ne i32 %v1_11d60, 0
  store i1 %v2_11d60, i1* %cpsr_c.global-to-local, align 1
  %v1_11d68 = trunc i32 %v1_11d24 to i8
  store i8 %v1_11d68, i8* bitcast (i32* @global_var_1f804.321 to i8*), align 4
  store i32 ptrtoint (i8** @global_var_1f7e0.204 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v2_11d7c, i32* %lr.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v8_11d90 = call i32 @function_14acc(i32 %v2_11d50, i32* bitcast (i8** @global_var_1f7e0.204 to i32*), i32 40, i32 16384, i32 %v2_11d7c, i32 16)
  store i32 %v8_11d90, i32* %r0.global-to-local, align 4
  %v3_11d94 = load i32, i32* %stack_var_-52, align 4
  %v1_11d98 = add i32 %v3_11d94, 1
  store i32 %v1_11d98, i32* %r3.global-to-local, align 4
  %v3_11d9c = icmp ugt i32 %v1_11d98, 383
  store i1 %v3_11d9c, i1* %cpsr_c.global-to-local, align 1
  %v8_11d9c = icmp eq i32 %v1_11d98, 384
  store i1 %v8_11d9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_11d98, i32* %stack_var_-52, align 4
  %v5_11da4 = icmp slt i32 %v1_11d98, 384
  br i1 %v5_11da4, label %.thread47.dec_label_pc_11b14_crit_edge, label %dec_label_pc_11da8

.thread47.dec_label_pc_11b14_crit_edge:           ; preds = %.thread47
  %v0_11b14.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_11b14

dec_label_pc_11da8:                               ; preds = %.thread47
  %v0_11da8 = load i32, i32* @r8, align 4
  br label %dec_label_pc_11dac

dec_label_pc_11dac:                               ; preds = %dec_label_pc_11af4, %dec_label_pc_11da8
  %stack_var_-1872.1 = phi i32 [ %stack_var_-1872.0, %dec_label_pc_11af4 ], [ %v0_11da8, %dec_label_pc_11da8 ]
  %v0_11dac = call i32 @function_14808()
  store i32 %v0_11dac, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v2_11dc0 = inttoptr i32 %v0_11dac to i32*
  %v6_11de8 = inttoptr i32 %v0_11e24 to i32*
  %v1_11e14 = add i32 %v0_11e24, 16
  %v2_11e14 = inttoptr i32 %v1_11e14 to i32*
  %v4_11e30 = ptrtoint i8* %stack_var_-1884.0 to i32
  %v1_11e38 = add i32 %v4_11e30, 1
  %v2_11e38 = inttoptr i32 %v1_11e38 to i8*
  %v1_11e5c = add i32 %v4_11e30, 2
  %v2_11e5c = inttoptr i32 %v1_11e5c to i8*
  %v1_11e60 = add i32 %v4_11e30, 3
  %v2_11e60 = inttoptr i32 %v1_11e60 to i8*
  %v4_11e64 = sext i8 %stack_var_-1876.0 to i32
  %v1_11f40 = bitcast i8* %stack_var_-1884.0 to i32*
  %v1_11e24 = add i32 %v0_11e24, 9
  %v2_11e24 = inttoptr i32 %v1_11e24 to i8*
  %v1_11e74 = add i32 %v4_11e30, 13
  %v2_11e74 = inttoptr i32 %v1_11e74 to i8*
  %v1_11e98 = add i32 %v4_11e30, 8
  %v2_11e98 = inttoptr i32 %v1_11e98 to i32*
  %v1_11ed8 = add i32 %v0_11e24, 12
  %v2_11ed8 = inttoptr i32 %v1_11ed8 to i32*
  br label %dec_label_pc_11db8

dec_label_pc_11db8:                               ; preds = %dec_label_pc_11e98, %dec_label_pc_11e90, %dec_label_pc_11e88, %dec_label_pc_11e58, %dec_label_pc_11e48, %dec_label_pc_11e24, %dec_label_pc_11e0c, %dec_label_pc_11e80, %dec_label_pc_11e74, %dec_label_pc_11e04, %dec_label_pc_11f38, %dec_label_pc_11dac
  store i32 0, i32* %v2_11dc0, align 4
  %v2_11dc8 = load i32, i32* @global_var_1f878.202, align 4
  store i32 %v2_11dc8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v0_11e24, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_11de8 = call i32 @function_14a6c(i32 %v2_11dc8, i32* %v6_11de8, i32 1514, i32 16384, i32 0, i32 0)
  store i32 %v7_11de8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11dec = icmp eq i32 %v7_11de8, 0
  store i1 %v2_11dec, i1* %cpsr_z.global-to-local, align 1
  %tmp306 = icmp slt i32 %v7_11de8, 1
  br i1 %tmp306, label %dec_label_pc_11f6c, label %dec_label_pc_11df4

dec_label_pc_11df4:                               ; preds = %dec_label_pc_11db8
  store i32 %v0_11dac, i32* %lr.global-to-local, align 4
  %v2_11df8 = load i32, i32* %v2_11dc0, align 4
  store i32 %v2_11df8, i32* %r3.global-to-local, align 4
  %v2_11dfc = icmp ugt i32 %v2_11df8, 10
  store i1 %v2_11dfc, i1* %cpsr_c.global-to-local, align 1
  %v7_11dfc = icmp eq i32 %v2_11df8, 11
  store i1 %v7_11dfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11dfc, label %dec_label_pc_11f6c, label %dec_label_pc_11e04

dec_label_pc_11e04:                               ; preds = %dec_label_pc_11df4
  %v2_11e04 = icmp ugt i32 %v7_11de8, 38
  store i1 %v2_11e04, i1* %cpsr_c.global-to-local, align 1
  %v7_11e04 = icmp eq i32 %v7_11de8, 39
  store i1 %v7_11e04, i1* %cpsr_z.global-to-local, align 1
  %v2_11e08 = xor i1 %v2_11e04, true
  %v3_11e08 = or i1 %v7_11e04, %v2_11e08
  br i1 %v3_11e08, label %dec_label_pc_11db8, label %dec_label_pc_11e0c

dec_label_pc_11e0c:                               ; preds = %dec_label_pc_11e04
  store i32 %v0_11e24, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f858.88 to i32), i32* %r1.global-to-local, align 4
  %v3_11e14 = load i32, i32* %v2_11e14, align 4
  store i32 %v3_11e14, i32* %r2.global-to-local, align 4
  %v2_11e18 = load i32, i32* @global_var_1f858.88, align 4
  store i32 %v2_11e18, i32* %r3.global-to-local, align 4
  %v3_11e1c = icmp uge i32 %v3_11e14, %v2_11e18
  store i1 %v3_11e1c, i1* %cpsr_c.global-to-local, align 1
  %v9_11e1c = icmp eq i32 %v3_11e14, %v2_11e18
  store i1 %v9_11e1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11e1c, label %dec_label_pc_11e24, label %dec_label_pc_11db8

dec_label_pc_11e24:                               ; preds = %dec_label_pc_11e0c
  %v3_11e24 = load i8, i8* %v2_11e24, align 1
  %v4_11e24 = zext i8 %v3_11e24 to i32
  store i32 %v4_11e24, i32* %r3.global-to-local, align 4
  %v2_11e28 = icmp ugt i8 %v3_11e24, 5
  store i1 %v2_11e28, i1* %cpsr_c.global-to-local, align 1
  %v7_11e28 = icmp eq i8 %v3_11e24, 6
  store i1 %v7_11e28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e28, label %dec_label_pc_11e30, label %dec_label_pc_11db8

dec_label_pc_11e30:                               ; preds = %dec_label_pc_11e24
  store i32 %v4_11e30, i32* %r3.global-to-local, align 4
  %v2_11e34 = load i8, i8* %stack_var_-1884.0, align 1
  %v3_11e34 = zext i8 %v2_11e34 to i32
  store i32 %v3_11e34, i32* %r2.global-to-local, align 4
  %v3_11e38 = load i8, i8* %v2_11e38, align 1
  %v4_11e38 = zext i8 %v3_11e38 to i32
  store i32 %v4_11e38, i32* %r3.global-to-local, align 4
  %v4_11e3c = mul nuw nsw i32 %v4_11e38, 256
  %v5_11e3c = or i32 %v4_11e3c, %v3_11e34
  store i32 %v5_11e3c, i32* %r2.global-to-local, align 4
  %v2_11e40 = icmp ugt i32 %v5_11e3c, 5887
  store i1 %v2_11e40, i1* %cpsr_c.global-to-local, align 1
  %v7_11e40 = icmp eq i32 %v5_11e3c, 5888
  store i1 %v7_11e40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e40, label %dec_label_pc_11e58, label %dec_label_pc_11e48

dec_label_pc_11e48:                               ; preds = %dec_label_pc_11e30
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_11e50 = icmp ugt i32 %v5_11e3c, 4872
  store i1 %v3_11e50, i1* %cpsr_c.global-to-local, align 1
  %v9_11e50 = icmp eq i32 %v5_11e3c, 4873
  store i1 %v9_11e50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11e50, label %dec_label_pc_11e58, label %dec_label_pc_11db8

dec_label_pc_11e58:                               ; preds = %dec_label_pc_11e48, %dec_label_pc_11e30
  store i32 %v4_11e30, i32* %ip.global-to-local, align 4
  %v3_11e5c = load i8, i8* %v2_11e5c, align 1
  %v4_11e5c = zext i8 %v3_11e5c to i32
  store i32 %v4_11e5c, i32* %r3.global-to-local, align 4
  %v3_11e60 = load i8, i8* %v2_11e60, align 1
  %v4_11e60 = zext i8 %v3_11e60 to i32
  store i32 %v4_11e60, i32* %r2.global-to-local, align 4
  store i32 %v4_11e64, i32* %lr.global-to-local, align 4
  %v4_11e68 = mul nuw nsw i32 %v4_11e60, 256
  %v5_11e68 = or i32 %v4_11e68, %v4_11e5c
  store i32 %v5_11e68, i32* %r3.global-to-local, align 4
  %v3_11e6c = icmp uge i32 %v5_11e68, %v4_11e64
  store i1 %v3_11e6c, i1* %cpsr_c.global-to-local, align 1
  %v9_11e6c = icmp eq i32 %v5_11e68, %v4_11e64
  store i1 %v9_11e6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11e6c, label %dec_label_pc_11e74, label %dec_label_pc_11db8

dec_label_pc_11e74:                               ; preds = %dec_label_pc_11e58
  %v3_11e74 = load i8, i8* %v2_11e74, align 1
  %v4_11e74 = zext i8 %v3_11e74 to i32
  store i32 %v4_11e74, i32* %r3.global-to-local, align 4
  %v1_11e78 = and i32 %v4_11e74, 2
  %v2_11e78 = icmp eq i32 %v1_11e78, 0
  store i1 %v2_11e78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11e78, label %dec_label_pc_11db8, label %dec_label_pc_11e80

dec_label_pc_11e80:                               ; preds = %dec_label_pc_11e74
  %v1_11e80 = and i32 %v4_11e74, 16
  %v2_11e80 = icmp eq i32 %v1_11e80, 0
  store i1 %v2_11e80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11e80, label %dec_label_pc_11db8, label %dec_label_pc_11e88

dec_label_pc_11e88:                               ; preds = %dec_label_pc_11e80
  %v1_11e88 = and i32 %v4_11e74, 4
  %v2_11e88 = icmp eq i32 %v1_11e88, 0
  store i1 %v2_11e88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11e88, label %dec_label_pc_11e90, label %dec_label_pc_11db8

dec_label_pc_11e90:                               ; preds = %dec_label_pc_11e88
  %tmp450 = urem i8 %v3_11e74, 2
  %v2_11e90 = icmp eq i8 %tmp450, 0
  store i1 %v2_11e90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11e90, label %dec_label_pc_11e98, label %dec_label_pc_11db8

dec_label_pc_11e98:                               ; preds = %dec_label_pc_11e90
  %v3_11e98 = load i32, i32* %v2_11e98, align 4
  %v2_11eb4 = call i32 @llvm.bswap.i32(i32 %v3_11e98)
  %v1_11eb8 = add i32 %v2_11eb4, -1
  %v1_11ebc = udiv i32 %v1_11eb8, 256
  %v3_11ec0 = and i32 %v1_11ebc, 65280
  %v1_11ec4 = and i32 %v1_11eb8, 65280
  store i32 %v1_11ec4, i32* %r2.global-to-local, align 4
  %v3_11ec8 = mul i32 %v1_11eb8, 16777216
  %v4_11ecc = udiv i32 %v1_11eb8, 16777216
  %v5_11ecc = or i32 %v3_11ec0, %v4_11ecc
  store i32 %v5_11ecc, i32* %r1.global-to-local, align 4
  store i32 %v0_11e24, i32* %r3.global-to-local, align 4
  %v4_11ed4 = mul nuw nsw i32 %v1_11ec4, 256
  %v5_11ed4 = or i32 %v4_11ed4, %v3_11ec8
  store i32 %v5_11ed4, i32* %r0.global-to-local, align 4
  %v3_11ed8 = load i32, i32* %v2_11ed8, align 4
  store i32 %v3_11ed8, i32* %r2.global-to-local, align 4
  %v2_11edc = call i32 @llvm.bswap.i32(i32 %v1_11eb8)
  store i32 %v2_11edc, i32* %ip.global-to-local, align 4
  %v3_11ee0 = icmp uge i32 %v2_11edc, %v3_11ed8
  store i1 %v3_11ee0, i1* %cpsr_c.global-to-local, align 1
  %v9_11ee0 = icmp eq i32 %v2_11edc, %v3_11ed8
  store i1 %v9_11ee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11ee0, label %dec_label_pc_11ee8, label %dec_label_pc_11db8

dec_label_pc_11ee8:                               ; preds = %dec_label_pc_11e98
  %v0_11ee8 = load i32, i32* @r4, align 4
  %v2_11ee8 = icmp ugt i32 %v0_11ee8, 254
  store i1 %v2_11ee8, i1* %cpsr_c.global-to-local, align 1
  %v7_11ee8 = icmp eq i32 %v0_11ee8, 255
  store i1 %v7_11ee8, i1* %cpsr_z.global-to-local, align 1
  %v8_11eec = icmp sgt i32 %v0_11ee8, 255
  br i1 %v8_11eec, label %dec_label_pc_11f6c, label %dec_label_pc_11ef0

dec_label_pc_11ef0:                               ; preds = %dec_label_pc_11ee8
  store i32 ptrtoint (i32* @global_var_1f874.200 to i32), i32* %lr.global-to-local, align 4
  %v3_11ef4 = mul i32 %v0_11ee8, 256
  store i32 %v3_11ef4, i32* %r2.global-to-local, align 4
  %v2_11ef8 = load i32, i32* @global_var_1f874.200, align 4
  store i32 %v2_11ef8, i32* %r1.global-to-local, align 4
  %v2_11f00 = mul i32 %v0_11ee8, 288
  store i32 %v2_11f00, i32* %r3.global-to-local, align 4
  %v2_11f04 = add i32 %v2_11ef8, %v2_11f00
  store i32 %v2_11f04, i32* @r0, align 4
  %v1_11f08 = add i32 %v2_11f04, 12
  %v2_11f08 = inttoptr i32 %v1_11f08 to i32*
  %v3_11f08 = load i32, i32* %v2_11f08, align 4
  store i32 %v3_11f08, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11f0c = icmp eq i32 %v3_11f08, 0
  store i1 %v2_11f0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11f0c, label %dec_label_pc_11f38, label %dec_label_pc_11f18.preheader

dec_label_pc_11f18.preheader:                     ; preds = %dec_label_pc_11ef0
  %v2_11f10 = add i32 %v2_11f04, 288
  store i32 %v2_11f10, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11f18

dec_label_pc_11f18:                               ; preds = %dec_label_pc_11f18.preheader, %dec_label_pc_11f24
  %v0_11f24 = phi i32 [ %v2_11f10, %dec_label_pc_11f18.preheader ], [ %v1_11f30, %dec_label_pc_11f24 ]
  %v0_11f18 = phi i32 [ %v0_11ee8, %dec_label_pc_11f18.preheader ], [ %v1_11f18, %dec_label_pc_11f24 ]
  %v1_11f18 = add i32 %v0_11f18, 1
  store i32 %v1_11f18, i32* @r4, align 4
  %v7_11f1c = icmp eq i32 %v1_11f18, 256
  br i1 %v7_11f1c, label %dec_label_pc_11f6c.loopexit, label %dec_label_pc_11f24

dec_label_pc_11f24:                               ; preds = %dec_label_pc_11f18
  store i32 %v0_11f24, i32* @r0, align 4
  %v1_11f28 = add i32 %v0_11f24, 12
  %v2_11f28 = inttoptr i32 %v1_11f28 to i32*
  %v3_11f28 = load i32, i32* %v2_11f28, align 4
  %v2_11f2c = icmp eq i32 %v3_11f28, 0
  %v1_11f30 = add i32 %v0_11f24, 288
  store i32 %v1_11f30, i32* %r3.global-to-local, align 4
  br i1 %v2_11f2c, label %dec_label_pc_11f38.loopexit, label %dec_label_pc_11f18

dec_label_pc_11f38.loopexit:                      ; preds = %dec_label_pc_11f24
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11f38

dec_label_pc_11f38:                               ; preds = %dec_label_pc_11f38.loopexit, %dec_label_pc_11ef0
  %v1_11f38 = phi i32 [ %v0_11f24, %dec_label_pc_11f38.loopexit ], [ %v2_11f04, %dec_label_pc_11ef0 ]
  %v2_11f38 = add i32 %v1_11f38, 16
  %v3_11f38 = inttoptr i32 %v2_11f38 to i32*
  store i32 %v3_11ed8, i32* %v3_11f38, align 4
  store i32 %v4_11e30, i32* %r1.global-to-local, align 4
  %v2_11f40 = load i32, i32* %v1_11f40, align 4
  store i32 %v2_11f40, i32* %r2.global-to-local, align 4
  %v1_11f44 = and i32 %v2_11f40, 128
  %v2_11f44 = icmp ne i32 %v1_11f44, 0
  store i1 %v2_11f44, i1* %cpsr_c.global-to-local, align 1
  %v3_11f44 = sdiv i32 %v2_11f40, 256
  store i32 %v3_11f44, i32* %r3.global-to-local, align 4
  %v1_11f48 = trunc i32 %v3_11f44 to i8
  %v2_11f48 = load i32, i32* @r0, align 4
  %v3_11f48 = add i32 %v2_11f48, 21
  %v4_11f48 = inttoptr i32 %v3_11f48 to i8*
  store i8 %v1_11f48, i8* %v4_11f48, align 1
  %v0_11f4c = load i32, i32* %r2.global-to-local, align 4
  %v1_11f4c = trunc i32 %v0_11f4c to i8
  %v2_11f4c = load i32, i32* @r0, align 4
  %v3_11f4c = add i32 %v2_11f4c, 20
  %v4_11f4c = inttoptr i32 %v3_11f4c to i8*
  store i8 %v1_11f4c, i8* %v4_11f4c, align 1
  %v0_11f50 = call i32 @function_11288()
  store i32 %v0_11f50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11db8

dec_label_pc_11f58:                               ; preds = %dec_label_pc_115dc
  store i32 ptrtoint (i32* @global_var_1f878.202 to i32), i32* %r2.global-to-local, align 4
  %v2_11f5c = load i32, i32* @global_var_1f878.202, align 4
  store i32 %v2_11f5c, i32* %r0.global-to-local, align 4
  %v1_11f60 = call i32 @function_14234(i32 %v2_11f5c)
  store i32 %v1_11f60, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11f64

dec_label_pc_11f64:                               ; preds = %dec_label_pc_115b4, %dec_label_pc_11f58
  %v0_11f64 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11f64, i32* %r0.global-to-local, align 4
  %v1_11f68 = call i32 @function_155d0(i32 %v0_11f64)
  store i32 %v1_11f68, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11f6c

dec_label_pc_11f6c.loopexit:                      ; preds = %dec_label_pc_11f18
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11f6c

dec_label_pc_11f6c:                               ; preds = %dec_label_pc_11ee8, %dec_label_pc_11df4, %dec_label_pc_11db8, %dec_label_pc_11f6c.loopexit, %dec_label_pc_11f64
  %stack_var_-1868.0 = phi i32 [ %tmp232, %dec_label_pc_11f64 ], [ %v0_11dac, %dec_label_pc_11f6c.loopexit ], [ %v0_11dac, %dec_label_pc_11db8 ], [ %v0_11dac, %dec_label_pc_11df4 ], [ %v0_11dac, %dec_label_pc_11ee8 ]
  %stack_var_-1872.2 = phi i32 [ %tmp239, %dec_label_pc_11f64 ], [ %stack_var_-1872.1, %dec_label_pc_11f6c.loopexit ], [ %stack_var_-1872.1, %dec_label_pc_11db8 ], [ %stack_var_-1872.1, %dec_label_pc_11df4 ], [ %stack_var_-1872.1, %dec_label_pc_11ee8 ]
  %stack_var_-1884.1 = phi i8* [ %tmp240, %dec_label_pc_11f64 ], [ %stack_var_-1884.0, %dec_label_pc_11f6c.loopexit ], [ %stack_var_-1884.0, %dec_label_pc_11db8 ], [ %stack_var_-1884.0, %dec_label_pc_11df4 ], [ %stack_var_-1884.0, %dec_label_pc_11ee8 ]
  %stack_var_-1880.1 = phi i32 [ %tmp241, %dec_label_pc_11f64 ], [ %v0_11e24, %dec_label_pc_11f6c.loopexit ], [ %v0_11e24, %dec_label_pc_11db8 ], [ %v0_11e24, %dec_label_pc_11df4 ], [ %v0_11e24, %dec_label_pc_11ee8 ]
  %stack_var_-1876.1 = phi i8 [ %tmp242, %dec_label_pc_11f64 ], [ %stack_var_-1876.0, %dec_label_pc_11f6c.loopexit ], [ %stack_var_-1876.0, %dec_label_pc_11db8 ], [ %stack_var_-1876.0, %dec_label_pc_11df4 ], [ %stack_var_-1876.0, %dec_label_pc_11ee8 ]
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1672, i32* %ip.global-to-local, align 4
  %v2_11f84406 = load i32, i32* @sp, align 4
  %v3_11f84407 = add i32 %v2_11f84406, 1672
  %v4_11f84408 = inttoptr i32 %v3_11f84407 to i32*
  store i32 0, i32* %v4_11f84408, align 4
  br label %dec_label_pc_11f74.dec_label_pc_11f74_crit_edge

dec_label_pc_11f74.dec_label_pc_11f74_crit_edge:  ; preds = %dec_label_pc_11f6c, %dec_label_pc_11f74.dec_label_pc_11f74_crit_edge
  %v0_11f74.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_11f84.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_11f78 = add i32 %v0_11f74.pre, 4
  store i32 %v1_11f78, i32* %r3.global-to-local, align 4
  %v1_11f7c = add i32 %v0_11f74.pre, 1672
  store i32 %v1_11f7c, i32* %ip.global-to-local, align 4
  %v7_11f80 = icmp eq i32 %v1_11f78, 128
  %v2_11f84 = load i32, i32* @sp, align 4
  %v3_11f84 = add i32 %v2_11f84, %v1_11f7c
  %v4_11f84 = inttoptr i32 %v3_11f84 to i32*
  store i32 %v0_11f84.pre, i32* %v4_11f84, align 4
  br i1 %v7_11f80, label %dec_label_pc_11f8c, label %dec_label_pc_11f74.dec_label_pc_11f74_crit_edge

dec_label_pc_11f8c:                               ; preds = %dec_label_pc_11f74.dec_label_pc_11f74_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_11f8c = load i32, i32* %r2.global-to-local, align 4
  %v1_11f94400 = add i32 %v0_11f8c, 4
  store i32 %v1_11f94400, i32* %r3.global-to-local, align 4
  %v1_11f98401 = add i32 %v0_11f8c, 1544
  store i32 %v1_11f98401, i32* %lr.global-to-local, align 4
  %v7_11f9c402 = icmp eq i32 %v1_11f94400, 128
  %v2_11fa0403 = load i32, i32* @sp, align 4
  %v3_11fa0404 = add i32 %v2_11fa0403, %v1_11f98401
  %v4_11fa0405 = inttoptr i32 %v3_11fa0404 to i32*
  store i32 %v0_11f8c, i32* %v4_11fa0405, align 4
  br i1 %v7_11f9c402, label %dec_label_pc_11fa8, label %dec_label_pc_11f90.dec_label_pc_11f90_crit_edge

dec_label_pc_11f90.dec_label_pc_11f90_crit_edge:  ; preds = %dec_label_pc_11f8c, %dec_label_pc_11f90.dec_label_pc_11f90_crit_edge
  %v0_11f90.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_11fa0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_11f94 = add i32 %v0_11f90.pre, 4
  store i32 %v1_11f94, i32* %r3.global-to-local, align 4
  %v1_11f98 = add i32 %v0_11f90.pre, 1544
  store i32 %v1_11f98, i32* %lr.global-to-local, align 4
  %v7_11f9c = icmp eq i32 %v1_11f94, 128
  %v2_11fa0 = load i32, i32* @sp, align 4
  %v3_11fa0 = add i32 %v2_11fa0, %v1_11f98
  %v4_11fa0 = inttoptr i32 %v3_11fa0 to i32*
  store i32 %v0_11fa0.pre, i32* %v4_11fa0, align 4
  br i1 %v7_11f9c, label %dec_label_pc_11fa8, label %dec_label_pc_11f90.dec_label_pc_11f90_crit_edge

dec_label_pc_11fa8:                               ; preds = %dec_label_pc_11f90.dec_label_pc_11f90_crit_edge, %dec_label_pc_11f8c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_11fa8 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_11fa8, i32* @r6, align 4
  store i32 %v0_11fa8, i32* @r5, align 4
  store i32 %v0_11fa8, i32* @r7, align 4
  store i32 %v0_11fa8, i32* %stack_var_-52, align 4
  %v2_12064 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_12020

dec_label_pc_11fbc:                               ; preds = %dec_label_pc_12048, %dec_label_pc_12020
  %storemerge222 = phi i32 [ 30, %dec_label_pc_12020 ], [ 5, %dec_label_pc_12048 ]
  store i32 %storemerge222, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f810.188 to i32), i32* %r2.global-to-local, align 4
  %v2_11fc0 = load i32, i32* @global_var_1f810.188, align 4
  store i32 %v2_11fc0, i32* %r3.global-to-local, align 4
  %v1_11fc4 = add i32 %v2_12034, 8
  %v2_11fc4 = inttoptr i32 %v1_11fc4 to i32*
  %v3_11fc4 = load i32, i32* %v2_11fc4, align 4
  store i32 %v3_11fc4, i32* %r2.global-to-local, align 4
  %v2_11fc8 = sub i32 %v2_11fc0, %v3_11fc4
  store i32 %v2_11fc8, i32* %r3.global-to-local, align 4
  %v3_11fcc = icmp uge i32 %v2_11fc8, %storemerge222
  store i1 %v3_11fcc, i1* %cpsr_c.global-to-local, align 1
  %v9_11fcc = icmp eq i32 %v2_11fc8, %storemerge222
  store i1 %v9_11fcc, i1* %cpsr_z.global-to-local, align 1
  %v2_11fd0 = xor i1 %v9_11fcc, true
  %v3_11fd0 = and i1 %v3_11fcc, %v2_11fd0
  br i1 %v3_11fd0, label %dec_label_pc_12088, label %dec_label_pc_11fd4

dec_label_pc_11fd4:                               ; preds = %dec_label_pc_11fbc
  store i1 %v2_1203c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_1203c, i1* %cpsr_z.global-to-local, align 1
  %v1_12058 = add i32 %v2_12034, 4
  %v2_12058 = inttoptr i32 %v1_12058 to i32*
  %v3_12058 = load i32, i32* %v2_12058, align 4
  br i1 %v7_1203c, label %dec_label_pc_12058, label %dec_label_pc_11fdc

dec_label_pc_11fdc:                               ; preds = %dec_label_pc_11fd4
  store i32 %v3_12058, i32* %ip.global-to-local, align 4
  %v3_11fe0 = udiv i32 %v3_12058, 32
  store i32 %v2_12064, i32* %r0.global-to-local, align 4
  %v3_11fe8 = mul nuw nsw i32 %v3_11fe0, 4
  %v2_11fec = add i32 %v3_11fe8, %v2_12064
  store i32 %v2_11fec, i32* %r3.global-to-local, align 4
  %v1_11ff0 = add i32 %v2_11fec, -184
  %v2_11ff0 = inttoptr i32 %v1_11ff0 to i32*
  %v3_11ff0 = load i32, i32* %v2_11ff0, align 4
  %v1_11ff4 = urem i32 %v3_12058, 32
  store i32 %v1_11ff4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_11ffc = shl i32 1, %v1_11ff4
  %v8_11ffc = or i32 %v3_11ff0, %v7_11ffc
  store i32 %v8_11ffc, i32* %r2.global-to-local, align 4
  store i32 %v8_11ffc, i32* %v2_11ff0, align 4
  %v0_12004 = load i32, i32* @r6, align 4
  %v1_12004 = load i32, i32* %ip.global-to-local, align 4
  %v3_12004 = icmp uge i32 %v0_12004, %v1_12004
  store i1 %v3_12004, i1* %cpsr_c.global-to-local, align 1
  %v9_12004 = icmp eq i32 %v0_12004, %v1_12004
  store i1 %v9_12004, i1* %cpsr_z.global-to-local, align 1
  %v5_12008 = icmp slt i32 %v0_12004, %v1_12004
  br i1 %v5_12008, label %bb308, label %bb309

bb308:                                            ; preds = %dec_label_pc_11fdc
  store i32 %v1_12004, i32* @r6, align 4
  br label %bb309

bb309:                                            ; preds = %dec_label_pc_12048, %dec_label_pc_12ce4, %dec_label_pc_120bc, %bb311, %dec_label_pc_11fdc, %bb308
  %v3_1200c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_1200c, i32* %r3.global-to-local, align 4
  %v1_12010 = add i32 %v3_1200c, 1
  store i32 %v1_12010, i32* %r2.global-to-local, align 4
  %v2_12014 = icmp ugt i32 %v1_12010, 254
  store i1 %v2_12014, i1* %cpsr_c.global-to-local, align 1
  %v7_12014 = icmp eq i32 %v1_12010, 255
  store i1 %v7_12014, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_12010, i32* %stack_var_-52, align 4
  %v8_1201c = icmp sgt i32 %v1_12010, 255
  br i1 %v8_1201c, label %dec_label_pc_120c8, label %dec_label_pc_12020

dec_label_pc_12020:                               ; preds = %bb309, %dec_label_pc_11fa8
  %v0_1202c = phi i32 [ %v1_12010, %bb309 ], [ %v0_11fa8, %dec_label_pc_11fa8 ]
  store i32 ptrtoint (i32* @global_var_1f874.200 to i32), i32* %r0.global-to-local, align 4
  %v3_12024 = mul i32 %v0_1202c, 256
  store i32 %v3_12024, i32* %r3.global-to-local, align 4
  %v2_12028 = load i32, i32* @global_var_1f874.200, align 4
  store i32 %v2_12028, i32* %r1.global-to-local, align 4
  %v2_12030 = mul i32 %v0_1202c, 288
  store i32 %v2_12030, i32* %r2.global-to-local, align 4
  %v2_12034 = add i32 %v2_12028, %v2_12030
  store i32 %v2_12034, i32* @r4, align 4
  %v1_12038 = add i32 %v2_12034, 12
  %v2_12038 = inttoptr i32 %v1_12038 to i32*
  %v3_12038 = load i32, i32* %v2_12038, align 4
  store i32 %v3_12038, i32* %ip.global-to-local, align 4
  %v2_1203c = icmp ne i32 %v3_12038, 0
  store i1 %v2_1203c, i1* %cpsr_c.global-to-local, align 1
  %v7_1203c = icmp eq i32 %v3_12038, 1
  store i1 %v7_1203c, i1* %cpsr_z.global-to-local, align 1
  %v2_12040 = xor i1 %v7_1203c, true
  %v3_12040 = and i1 %v2_1203c, %v2_12040
  br i1 %v3_12040, label %dec_label_pc_11fbc, label %dec_label_pc_12048

dec_label_pc_12048:                               ; preds = %dec_label_pc_12020
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12048 = icmp eq i32 %v3_12038, 0
  store i1 %v2_12048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12048, label %bb309, label %dec_label_pc_11fbc

dec_label_pc_12058:                               ; preds = %dec_label_pc_11fd4
  store i32 %v3_12058, i32* %r0.global-to-local, align 4
  %v3_1205c = udiv i32 %v3_12058, 32
  %v3_12060 = mul nuw nsw i32 %v3_1205c, 4
  store i32 %v2_12064, i32* %lr.global-to-local, align 4
  %v2_12068 = add i32 %v3_12060, %v2_12064
  store i32 %v2_12068, i32* %r3.global-to-local, align 4
  %v1_1206c = add i32 %v2_12068, -312
  %v2_1206c = inttoptr i32 %v1_1206c to i32*
  %v3_1206c = load i32, i32* %v2_1206c, align 4
  %v1_12070 = urem i32 %v3_12058, 32
  store i32 %v1_12070, i32* %r1.global-to-local, align 4
  %v7_12074 = shl i32 1, %v1_12070
  %v8_12074 = or i32 %v3_1206c, %v7_12074
  store i32 %v8_12074, i32* %r2.global-to-local, align 4
  %v0_12078 = load i32, i32* @r5, align 4
  %v3_12078 = icmp uge i32 %v0_12078, %v3_12058
  store i1 %v3_12078, i1* %cpsr_c.global-to-local, align 1
  %v9_12078 = icmp eq i32 %v0_12078, %v3_12058
  store i1 %v9_12078, i1* %cpsr_z.global-to-local, align 1
  %v5_1207c = icmp slt i32 %v0_12078, %v3_12058
  br i1 %v5_1207c, label %bb310, label %bb311

bb310:                                            ; preds = %dec_label_pc_12058
  store i32 %v3_12058, i32* @r5, align 4
  br label %bb311

bb311:                                            ; preds = %dec_label_pc_12058, %bb310
  store i32 %v8_12074, i32* %v2_1206c, align 4
  br label %bb309

dec_label_pc_12088:                               ; preds = %dec_label_pc_11fbc
  %v1_12088 = add i32 %v2_12034, 4
  %v2_12088 = inttoptr i32 %v1_12088 to i32*
  %v3_12088 = load i32, i32* %v2_12088, align 4
  store i32 %v3_12088, i32* %r0.global-to-local, align 4
  %v1_1208c = call i32 @function_14234(i32 %v3_12088)
  store i32 %v1_1208c, i32* %r0.global-to-local, align 4
  %v0_12090 = load i32, i32* @r4, align 4
  %v1_12090 = add i32 %v0_12090, 12
  %v2_12090 = inttoptr i32 %v1_12090 to i32*
  %v3_12090 = load i32, i32* %v2_12090, align 4
  store i32 %v3_12090, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_12098 = icmp ugt i32 %v3_12090, 1
  store i1 %v2_12098, i1* %cpsr_c.global-to-local, align 1
  %v7_12098 = icmp eq i32 %v3_12090, 2
  store i1 %v7_12098, i1* %cpsr_z.global-to-local, align 1
  %v2_1209c = add i32 %v0_12090, 4
  %v3_1209c = inttoptr i32 %v2_1209c to i32*
  store i32 -1, i32* %v3_1209c, align 4
  %v2_120a0 = xor i1 %v2_12098, true
  %v3_120a0 = or i1 %v7_12098, %v2_120a0
  br i1 %v3_120a0, label %dec_label_pc_12ce4, label %dec_label_pc_120a4

dec_label_pc_120a4:                               ; preds = %dec_label_pc_12088
  %v0_120a4 = load i32, i32* @r4, align 4
  %v1_120a4 = add i32 %v0_120a4, 284
  %v2_120a4 = inttoptr i32 %v1_120a4 to i8*
  %v3_120a4 = load i8, i8* %v2_120a4, align 1
  %v4_120a4 = zext i8 %v3_120a4 to i32
  %v1_120a8 = add nuw nsw i32 %v4_120a4, 1
  %v1_120ac = urem i32 %v1_120a8, 256
  store i32 %v1_120ac, i32* %r3.global-to-local, align 4
  %v2_120b0 = icmp ugt i32 %v1_120ac, 9
  store i1 %v2_120b0, i1* %cpsr_c.global-to-local, align 1
  %v7_120b0 = icmp eq i32 %v1_120ac, 10
  store i1 %v7_120b0, i1* %cpsr_z.global-to-local, align 1
  %v1_120b4 = trunc i32 %v1_120a8 to i8
  store i8 %v1_120b4, i8* %v2_120a4, align 1
  %v0_120b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_120b8, label %dec_label_pc_12ce4, label %dec_label_pc_120bc

dec_label_pc_120bc:                               ; preds = %dec_label_pc_120a4
  %v0_120bc = load i32, i32* @r4, align 4
  store i32 %v0_120bc, i32* @r0, align 4
  %v0_120c0 = call i32 @function_11288()
  store i32 %v0_120c0, i32* %r0.global-to-local, align 4
  br label %bb309

dec_label_pc_120c8:                               ; preds = %bb309
  store i32 1, i32* %stack_var_-64, align 4
  %v0_120d0 = load i32, i32* @r6, align 4
  %v1_120d0 = load i32, i32* @r5, align 4
  %v3_120d0 = icmp uge i32 %v0_120d0, %v1_120d0
  store i1 %v3_120d0, i1* %cpsr_c.global-to-local, align 1
  %v9_120d0 = icmp eq i32 %v0_120d0, %v1_120d0
  store i1 %v9_120d0, i1* %cpsr_z.global-to-local, align 1
  %v5_120d4 = icmp slt i32 %v0_120d0, %v1_120d0
  %storemerge75 = select i1 %v5_120d4, i32 %v1_120d0, i32 %v0_120d0
  %v2_120e8 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_120e8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_120f0 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_120f0, i32* %ip.global-to-local, align 4
  %v2_120f4 = ptrtoint i32* %stack_var_-220 to i32
  store i32 %v2_120f4, i32* %r1.global-to-local, align 4
  %v1_120f8 = add i32 %storemerge75, 1
  store i32 %v1_120f8, i32* %r0.global-to-local, align 4
  %v5_12104 = call i32 @function_14454(i32 %v1_120f8, i32 %v2_120f4, i32 %v2_120e8, i32 0, i32 %v2_120f0)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_1210c = call i32 @function_14504(i32* null)
  store i32 ptrtoint (i32* @global_var_1f810.188 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_1210c, i32* @global_var_1f810.188, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_122d4 = inttoptr i32 %stack_var_-1868.0 to i32*
  %v2_1237c = ptrtoint i32* %stack_var_-41 to i32
  %v2_12b68 = ptrtoint i32* %stack_var_-84 to i32
  %v2_12b70 = ptrtoint i32* %stack_var_-73 to i32
  %v2_126e4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_12798 = ptrtoint i32* %stack_var_-48 to i32
  br label %dec_label_pc_12160

dec_label_pc_12128:                               ; preds = %dec_label_pc_12184, %dec_label_pc_12cf4
  %v0_1213c = phi i32 [ %v3_12178, %dec_label_pc_12184 ], [ %v0_12128.pre, %dec_label_pc_12cf4 ]
  %v3_12128 = udiv i32 %v0_1213c, 32
  %v3_1212c = mul nuw nsw i32 %v3_12128, 4
  store i32 %v2_12064, i32* @lr, align 4
  %v2_12134 = add i32 %v3_1212c, %v2_12064
  store i32 %v2_12134, i32* %r3.global-to-local, align 4
  %v1_12138 = add i32 %v2_12134, -184
  %v2_12138 = inttoptr i32 %v1_12138 to i32*
  %v3_12138 = load i32, i32* %v2_12138, align 4
  %v1_1213c = urem i32 %v0_1213c, 32
  store i32 %v1_1213c, i32* %r1.global-to-local, align 4
  %v2_12140 = add nsw i32 %v1_1213c, -1
  %v3_12140 = shl i32 1, %v2_12140
  %v4_12140 = and i32 %v3_12140, %v3_12138
  %v5_12140 = icmp ne i32 %v4_12140, 0
  store i1 %v5_12140, i1* %cpsr_c.global-to-local, align 1
  %v6_12140 = lshr i32 %v3_12138, %v1_1213c
  store i32 %v6_12140, i32* %r2.global-to-local, align 4
  %v1_12144 = urem i32 %v6_12140, 2
  %v2_12144 = icmp eq i32 %v1_12144, 0
  store i1 %v2_12144, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12144, label %dec_label_pc_1214c, label %dec_label_pc_122b0.preheader

dec_label_pc_122b0.preheader:                     ; preds = %dec_label_pc_12128
  %v0_122b0101 = load i32, i32* @r5, align 4
  %v1_122b0102 = add i32 %v0_122b0101, 12
  %v2_122b0103 = inttoptr i32 %v1_122b0102 to i32*
  %v3_122b0104 = load i32, i32* %v2_122b0103, align 4
  store i32 %v3_122b0104, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_122b4100106 = icmp eq i32 %v3_122b0104, 0
  store i1 %v2_122b4100106, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_122b4100106, label %dec_label_pc_1214c, label %dec_label_pc_122bc.lr.ph

dec_label_pc_1214c:                               ; preds = %dec_label_pc_122b0.loopexit, %dec_label_pc_122b0.preheader, %dec_label_pc_12128, %bb346, %dec_label_pc_12c10, %dec_label_pc_12160, %dec_label_pc_12d08, %dec_label_pc_12c54
  %v3_1214c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_1214c, i32* %r3.global-to-local, align 4
  %v1_12150 = add i32 %v3_1214c, 1
  store i32 %v1_12150, i32* %r2.global-to-local, align 4
  %v2_12154 = icmp ugt i32 %v1_12150, 254
  store i1 %v2_12154, i1* %cpsr_c.global-to-local, align 1
  %v7_12154 = icmp eq i32 %v1_12150, 255
  store i1 %v7_12154, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_12150, i32* %stack_var_-52, align 4
  %v8_1215c = icmp sgt i32 %v1_12150, 255
  br i1 %v8_1215c, label %dec_label_pc_11af4, label %dec_label_pc_12160

dec_label_pc_12160:                               ; preds = %dec_label_pc_1214c, %dec_label_pc_120c8
  %v0_1216c = phi i32 [ %v1_12150, %dec_label_pc_1214c ], [ 0, %dec_label_pc_120c8 ]
  store i32 ptrtoint (i32* @global_var_1f874.200 to i32), i32* %ip.global-to-local, align 4
  %v3_12164 = mul i32 %v0_1216c, 256
  store i32 %v3_12164, i32* %r3.global-to-local, align 4
  %v2_12168 = load i32, i32* @global_var_1f874.200, align 4
  store i32 %v2_12168, i32* %r1.global-to-local, align 4
  %v2_12170 = mul i32 %v0_1216c, 288
  store i32 %v2_12170, i32* %r2.global-to-local, align 4
  %v2_12174 = add i32 %v2_12168, %v2_12170
  store i32 %v2_12174, i32* @r5, align 4
  %v1_12178 = add i32 %v2_12174, 4
  %v2_12178 = inttoptr i32 %v1_12178 to i32*
  %v3_12178 = load i32, i32* %v2_12178, align 4
  store i32 %v3_12178, i32* @r4, align 4
  %v2_1217c = icmp eq i32 %v3_12178, -1
  store i1 %v2_1217c, i1* %cpsr_c.global-to-local, align 1
  %v7_1217c = icmp eq i32 %v3_12178, -1
  store i1 %v7_1217c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1217c, label %dec_label_pc_1214c, label %dec_label_pc_12184

dec_label_pc_12184:                               ; preds = %dec_label_pc_12160
  %v3_12184 = udiv i32 %v3_12178, 32
  %v3_12188 = mul nuw nsw i32 %v3_12184, 4
  store i32 %v2_12064, i32* %lr.global-to-local, align 4
  %v2_12190 = add i32 %v3_12188, %v2_12064
  store i32 %v2_12190, i32* %r3.global-to-local, align 4
  %v1_12194 = add i32 %v2_12190, -312
  %v2_12194 = inttoptr i32 %v1_12194 to i32*
  %v3_12194 = load i32, i32* %v2_12194, align 4
  %v1_12198 = urem i32 %v3_12178, 32
  store i32 %v1_12198, i32* %r1.global-to-local, align 4
  %v2_1219c = add nsw i32 %v1_12198, -1
  %v3_1219c = shl i32 1, %v2_1219c
  %v4_1219c = and i32 %v3_12194, %v3_1219c
  %v5_1219c = icmp ne i32 %v4_1219c, 0
  store i1 %v5_1219c, i1* %cpsr_c.global-to-local, align 1
  %v6_1219c = lshr i32 %v3_12194, %v1_12198
  store i32 %v6_1219c, i32* %r2.global-to-local, align 4
  %v1_121a0 = urem i32 %v6_1219c, 2
  %v2_121a0 = icmp eq i32 %v1_121a0, 0
  store i1 %v2_121a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_121a0, label %dec_label_pc_12128, label %dec_label_pc_121a8

dec_label_pc_121a8:                               ; preds = %dec_label_pc_12184
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  store i32 %v2_12798, i32* %r3.global-to-local, align 4
  store i32 %v2_126e4, i32* %ip.global-to-local, align 4
  store i32 %v3_12178, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v6_121d8 = call i32 @function_149e4(i32 %v3_12178, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_126e4)
  %v3_121dc = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_121dc, i32* %r3.global-to-local, align 4
  %v2_121e0 = or i32 %v3_121dc, %v6_121d8
  store i32 %v2_121e0, i32* %r0.global-to-local, align 4
  %v4_121e0 = icmp eq i32 %v2_121e0, 0
  store i1 %v4_121e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_121e0, label %dec_label_pc_121e8, label %dec_label_pc_12d08

dec_label_pc_121e8:                               ; preds = %dec_label_pc_121a8
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_121ec = load i32, i32* @r5, align 4
  %v2_121ec = add i32 %v1_121ec, 12
  %v3_121ec = inttoptr i32 %v2_121ec to i32*
  store i32 2, i32* %v3_121ec, align 4
  %v0_121f0 = call i32 @function_10a44()
  store i32 %v0_121f0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f80c.194 to i32), i32* %r3.global-to-local, align 4
  %v3_121f8 = load i8, i8* @global_var_1f80d.195, align 1
  %v4_121f8 = zext i8 %v3_121f8 to i32
  store i32 %v4_121f8, i32* %r2.global-to-local, align 4
  %v2_121fc = load i8, i8* bitcast (i8** @global_var_1f80c.194 to i8*), align 4
  %v3_121fc = zext i8 %v2_121fc to i32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_12200 = mul nuw nsw i32 %v4_121f8, 256
  %v5_12200 = or i32 %v3_121fc, %v4_12200
  store i32 %v5_12200, i32* %r1.global-to-local, align 4
  %v2_12204 = call i32 @function_13f90(i32 %v0_121f0, i32 %v5_12200)
  store i32 ptrtoint (i32* @global_var_1f7dc.190 to i32), i32* %r3.global-to-local, align 4
  %v2_1220c = load i32, i32* @global_var_1f7dc.190, align 4
  store i32 %v2_1220c, i32* %lr.global-to-local, align 4
  %v1_12214 = load i32, i32* @r6, align 4
  %v9_12214 = icmp eq i32 %v2_1220c, %v1_12214
  store i1 %v9_12214, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_12218 = urem i32 %v2_12204, 65536
  store i32 %v3_12218, i32* %r0.global-to-local, align 4
  %v7_1221c = icmp sgt i32 %v2_1220c, %v1_12214
  br i1 %v7_1221c, label %dec_label_pc_12220, label %dec_label_pc_12cf0

dec_label_pc_12220:                               ; preds = %dec_label_pc_121e8
  %v2_12224 = load i32, i32* @global_var_1f808.192, align 4
  store i32 %v2_12224, i32* %r3.global-to-local, align 4
  store i32 %v1_12214, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12240

dec_label_pc_12230:                               ; preds = %dec_label_pc_12258, %dec_label_pc_12240
  %v1_12230 = add i32 %v0_12230, 1
  store i32 %v1_12230, i32* %ip.global-to-local, align 4
  %v3_12234 = icmp uge i32 %v1_12230, %v2_1220c
  store i1 %v3_12234, i1* %cpsr_c.global-to-local, align 1
  %v9_12234 = icmp eq i32 %v1_12230, %v2_1220c
  store i1 %v9_12234, i1* %cpsr_z.global-to-local, align 1
  %v1_12238 = add i32 %v0_12238, 16
  store i32 %v1_12238, i32* %r3.global-to-local, align 4
  br i1 %v9_12234, label %dec_label_pc_12cf0, label %dec_label_pc_12240

dec_label_pc_12240:                               ; preds = %dec_label_pc_12230, %dec_label_pc_12220
  %v0_12230 = phi i32 [ %v1_12230, %dec_label_pc_12230 ], [ %v1_12214, %dec_label_pc_12220 ]
  %v0_12238 = phi i32 [ %v1_12238, %dec_label_pc_12230 ], [ %v2_12224, %dec_label_pc_12220 ]
  store i32 %v0_12238, i32* %r1.global-to-local, align 4
  %v1_12244 = add i32 %v0_12238, 9
  %v2_12244 = inttoptr i32 %v1_12244 to i8*
  %v3_12244 = load i8, i8* %v2_12244, align 1
  %v4_12244 = zext i8 %v3_12244 to i32
  store i32 %v4_12244, i32* %r2.global-to-local, align 4
  %v1_12248 = add i32 %v0_12238, 8
  %v2_12248 = inttoptr i32 %v1_12248 to i8*
  %v3_12248 = load i8, i8* %v2_12248, align 1
  %v4_12248 = zext i8 %v3_12248 to i32
  %v4_1224c = mul nuw nsw i32 %v4_12244, 256
  %v5_1224c = or i32 %v4_12248, %v4_1224c
  store i32 %v5_1224c, i32* %r3.global-to-local, align 4
  %v3_12250 = icmp uge i32 %v5_1224c, %v3_12218
  store i1 %v3_12250, i1* %cpsr_c.global-to-local, align 1
  %v9_12250 = icmp eq i32 %v5_1224c, %v3_12218
  store i1 %v9_12250, i1* %cpsr_z.global-to-local, align 1
  %v2_12254 = xor i1 %v9_12250, true
  %v3_12254 = and i1 %v3_12250, %v2_12254
  br i1 %v3_12254, label %dec_label_pc_12230, label %dec_label_pc_12258

dec_label_pc_12258:                               ; preds = %dec_label_pc_12240
  %v1_12258 = add i32 %v0_12238, 10
  %v2_12258 = inttoptr i32 %v1_12258 to i8*
  %v3_12258 = load i8, i8* %v2_12258, align 1
  %v4_12258 = zext i8 %v3_12258 to i32
  store i32 %v4_12258, i32* %r3.global-to-local, align 4
  %v1_1225c = add i32 %v0_12238, 11
  %v2_1225c = inttoptr i32 %v1_1225c to i8*
  %v3_1225c = load i8, i8* %v2_1225c, align 1
  %v4_1225c = zext i8 %v3_1225c to i32
  store i32 %v4_1225c, i32* %r2.global-to-local, align 4
  %v4_12260 = mul nuw nsw i32 %v4_1225c, 256
  %v5_12260 = or i32 %v4_12260, %v4_12258
  store i32 %v5_12260, i32* %r3.global-to-local, align 4
  %v3_12264 = icmp uge i32 %v5_12260, %v3_12218
  store i1 %v3_12264, i1* %cpsr_c.global-to-local, align 1
  %v9_12264 = icmp eq i32 %v5_12260, %v3_12218
  store i1 %v9_12264, i1* %cpsr_z.global-to-local, align 1
  %v2_12268 = xor i1 %v3_12264, true
  %v3_12268 = or i1 %v9_12264, %v2_12268
  br i1 %v3_12268, label %dec_label_pc_12230, label %dec_label_pc_12cf4

dec_label_pc_12270:                               ; preds = %dec_label_pc_12480, %dec_label_pc_12454, %dec_label_pc_1249c
  store i32 %v3_12454, i32* %r1.global-to-local, align 4
  %v0_12274 = load i32, i32* @sb, align 4
  store i32 %v0_12274, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16d2c.327 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_12280 = call i32 @function_13938(i32 %v0_12274, i32 %v3_12454, i32 ptrtoint ([5 x i8]* @global_var_16d2c.327 to i32), i32 4)
  store i32 %v5_12280, i32* %r0.global-to-local, align 4
  %v3_12284 = icmp eq i32 %v5_12280, -1
  store i1 %v3_12284, i1* %cpsr_c.global-to-local, align 1
  %v8_12284 = icmp eq i32 %v5_12280, -1
  store i1 %v8_12284, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_12280, i32* @r7, align 4
  br i1 %v3_12284, label %dec_label_pc_12290, label %dec_label_pc_124a8

dec_label_pc_12290:                               ; preds = %dec_label_pc_12270
  %v0_12290 = load i32, i32* @sb, align 4
  store i32 %v0_12290, i32* %r0.global-to-local, align 4
  %v0_12294 = load i32, i32* @r5, align 4
  %v1_12294 = add i32 %v0_12294, 24
  %v2_12294 = inttoptr i32 %v1_12294 to i32*
  %v3_12294 = load i32, i32* %v2_12294, align 4
  store i32 %v3_12294, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16d34.329 to i32), i32* %r2.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v5_122a0 = call i32 @function_13938(i32 %v0_12290, i32 %v3_12294, i32 ptrtoint ([6 x i8]* @global_var_16d34.329 to i32), i32 5)
  store i32 %v5_122a0, i32* %r0.global-to-local, align 4
  %v3_122a4 = icmp eq i32 %v5_122a0, -1
  store i1 %v3_122a4, i1* %cpsr_c.global-to-local, align 1
  %v8_122a4 = icmp eq i32 %v5_122a0, -1
  store i1 %v8_122a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_122a0, i32* @r7, align 4
  br i1 %v3_122a4, label %dec_label_pc_122b0.loopexit, label %dec_label_pc_124a8

dec_label_pc_122b0.loopexit:                      ; preds = %dec_label_pc_12444, %dec_label_pc_12984, %dec_label_pc_12334, %dec_label_pc_12290, %dec_label_pc_12c60
  %v0_122b0 = load i32, i32* @r5, align 4
  %v1_122b0 = add i32 %v0_122b0, 12
  %v2_122b0 = inttoptr i32 %v1_122b0 to i32*
  %v3_122b0 = load i32, i32* %v2_122b0, align 4
  store i32 %v3_122b0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_122b4100 = icmp eq i32 %v3_122b0, 0
  store i1 %v2_122b4100, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_122b4100, label %dec_label_pc_1214c, label %dec_label_pc_122bc.lr.ph

dec_label_pc_122bc.lr.ph:                         ; preds = %dec_label_pc_122b0.preheader, %dec_label_pc_122b0.loopexit
  %v0_122bc132 = phi i32 [ %v0_122b0, %dec_label_pc_122b0.loopexit ], [ %v0_122b0101, %dec_label_pc_122b0.preheader ]
  br label %dec_label_pc_122bc

dec_label_pc_122b4thread-pre-split.thread:        ; preds = %dec_label_pc_1267c, %dec_label_pc_12730, %dec_label_pc_127e4, %dec_label_pc_12898, %dec_label_pc_12aa4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_122bc

dec_label_pc_122b4thread-pre-split:               ; preds = %dec_label_pc_126c4, %dec_label_pc_12778, %dec_label_pc_1282c, %dec_label_pc_128e0, %dec_label_pc_12aec, %dec_label_pc_12ad0, %dec_label_pc_12810, %dec_label_pc_128c4, %dec_label_pc_1275c, %dec_label_pc_126a8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_122bc

dec_label_pc_122bc:                               ; preds = %dec_label_pc_122b4thread-pre-split.thread, %dec_label_pc_122b4thread-pre-split, %dec_label_pc_122bc.lr.ph
  %v0_12cac = phi i32 [ %v0_122bc132, %dec_label_pc_122bc.lr.ph ], [ %v0_12334, %dec_label_pc_122b4thread-pre-split ], [ %v0_12334, %dec_label_pc_122b4thread-pre-split.thread ]
  %v1_122bc = add i32 %v0_12cac, 24
  %v2_122bc = inttoptr i32 %v1_122bc to i32*
  %v3_122bc = load i32, i32* %v2_122bc, align 4
  store i32 %v3_122bc, i32* %r3.global-to-local, align 4
  %v2_122c0 = icmp ugt i32 %v3_122bc, 255
  store i1 %v2_122c0, i1* %cpsr_c.global-to-local, align 1
  %v7_122c0 = icmp eq i32 %v3_122bc, 256
  store i1 %v7_122c0, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_12cac, 28
  store i32 %.pre, i32* @sb, align 4
  br i1 %v7_122c0, label %dec_label_pc_12cac, label %dec_label_pc_122cc

dec_label_pc_122cc:                               ; preds = %dec_label_pc_122bc, %dec_label_pc_12cac
  store i32 %stack_var_-1868.0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %v2_122d4, align 4
  %v0_122d8 = load i32, i32* @r5, align 4
  %v1_122d8 = add i32 %v0_122d8, 24
  %v2_122d8 = inttoptr i32 %v1_122d8 to i32*
  %v3_122d8 = load i32, i32* %v2_122d8, align 4
  store i32 %v3_122d8, i32* %r2.global-to-local, align 4
  %v0_122dc = load i32, i32* @sb, align 4
  %v2_122dc = add i32 %v0_122dc, %v3_122d8
  store i32 %v2_122dc, i32* @r4, align 4
  %v1_122e0 = add i32 %v0_122d8, 4
  %v2_122e0 = inttoptr i32 %v1_122e0 to i32*
  %v3_122e0 = load i32, i32* %v2_122e0, align 4
  store i32 %v3_122e0, i32* %r0.global-to-local, align 4
  %v1_122e4 = sub i32 256, %v3_122d8
  store i32 %v1_122e4, i32* %r2.global-to-local, align 4
  store i32 %v2_122dc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_122f0 = inttoptr i32 %v2_122dc to i32*
  %v5_122f0 = call i32 @function_14a40(i32 %v3_122e0, i32* %v4_122f0, i32 %v1_122e4, i32 16384)
  store i32 %v5_122f0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_122f4 = icmp eq i32 %v5_122f0, 0
  store i1 %v2_122f4, i1* %cpsr_z.global-to-local, align 1
  %tmp312 = icmp slt i32 %v5_122f0, 1
  br i1 %tmp312, label %dec_label_pc_12c04, label %dec_label_pc_122fc

dec_label_pc_122fc:                               ; preds = %dec_label_pc_122cc
  %v0_122fc = load i32, i32* @r6, align 4
  store i32 %v0_122fc, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12304

dec_label_pc_12304:                               ; preds = %bb314, %dec_label_pc_122fc
  %v3_1230c = phi i32 [ %v1_12310, %bb314 ], [ %v0_122fc, %dec_label_pc_122fc ]
  %v1_12304 = load i32, i32* @r4, align 4
  %v2_12304 = add i32 %v1_12304, %v3_1230c
  %v3_12304 = inttoptr i32 %v2_12304 to i8*
  %v4_12304 = load i8, i8* %v3_12304, align 1
  %v6_12304 = zext i8 %v4_12304 to i32
  store i32 %v6_12304, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12308 = icmp eq i8 %v4_12304, 0
  store i1 %v2_12308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12308, label %bb313, label %bb314

bb313:                                            ; preds = %dec_label_pc_12304
  %v1_1230c = load i32, i32* %r1.global-to-local, align 4
  %v2_1230c = trunc i32 %v1_1230c to i8
  store i8 %v2_1230c, i8* %v3_12304, align 1
  %v0_12310.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb314

bb314:                                            ; preds = %dec_label_pc_12304, %bb313
  %v0_12310 = phi i32 [ %v3_1230c, %dec_label_pc_12304 ], [ %v0_12310.pre, %bb313 ]
  %v1_12310 = add i32 %v0_12310, 1
  store i32 %v1_12310, i32* %r2.global-to-local, align 4
  %v3_12314 = icmp uge i32 %v5_122f0, %v1_12310
  store i1 %v3_12314, i1* %cpsr_c.global-to-local, align 1
  %v9_12314 = icmp eq i32 %v5_122f0, %v1_12310
  store i1 %v9_12314, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_12314, label %dec_label_pc_1231c, label %dec_label_pc_12304

dec_label_pc_1231c:                               ; preds = %bb314, %dec_label_pc_12c08
  store i32 ptrtoint (i32* @global_var_1f810.188 to i32), i32* @lr, align 4
  %v0_12320 = load i32, i32* @r5, align 4
  %v1_12320 = add i32 %v0_12320, 24
  %v2_12320 = inttoptr i32 %v1_12320 to i32*
  %v3_12320 = load i32, i32* %v2_12320, align 4
  %v2_12324 = load i32, i32* @global_var_1f810.188, align 4
  store i32 %v2_12324, i32* %r3.global-to-local, align 4
  %v2_12328 = add i32 %v3_12320, %v5_122f0
  store i32 %v2_12328, i32* %ip.global-to-local, align 4
  store i32 %v2_12328, i32* %v2_12320, align 4
  %v0_12330 = load i32, i32* %r3.global-to-local, align 4
  %v1_12330 = load i32, i32* @r5, align 4
  %v2_12330 = add i32 %v1_12330, 8
  %v3_12330 = inttoptr i32 %v2_12330 to i32*
  store i32 %v0_12330, i32* %v3_12330, align 4
  br label %dec_label_pc_12334

dec_label_pc_12334:                               ; preds = %dec_label_pc_12a80, %dec_label_pc_1231c
  %v0_12334 = load i32, i32* @r5, align 4
  %v1_12334 = add i32 %v0_12334, 12
  %v2_12334 = inttoptr i32 %v1_12334 to i32*
  %v3_12334 = load i32, i32* %v2_12334, align 4
  store i32 %v3_12334, i32* %r2.global-to-local, align 4
  %v1_12338 = add i32 %v3_12334, -2
  store i32 %v1_12338, i32* %r3.global-to-local, align 4
  %v7_1233c = icmp eq i32 %v1_12338, 8
  store i1 %v7_1233c, i1* %cpsr_z.global-to-local, align 1
  %v5_12340 = and i32 %v1_12338, 1073741824
  %v6_12340 = icmp ne i32 %v5_12340, 0
  store i1 %v6_12340, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_12334, label %dec_label_pc_122b0.loopexit [
    i32 2, label %dec_label_pc_1236c
    i32 3, label %dec_label_pc_12454
    i32 4, label %dec_label_pc_125ec
    i32 5, label %dec_label_pc_1267c
    i32 6, label %dec_label_pc_12730
    i32 7, label %dec_label_pc_12898
    i32 8, label %dec_label_pc_127e4
    i32 9, label %dec_label_pc_12aa4
    i32 10, label %dec_label_pc_1294c
  ]

dec_label_pc_1236c:                               ; preds = %dec_label_pc_12334
  %v1_12370 = add i32 %v0_12334, 24
  %v2_12370 = inttoptr i32 %v1_12370 to i32*
  %v3_12370 = load i32, i32* %v2_12370, align 4
  store i32 %v3_12370, i32* %ip.global-to-local, align 4
  %v0_12374 = load i32, i32* @sb, align 4
  store i32 %v0_12374, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  %v1_12380 = add i32 %v0_12334, 29
  store i32 %v1_12380, i32* @r4, align 4
  store i32 -3, i32* %sl.global-to-local, align 4
  store i32 -4, i32* @r8, align 4
  %v3_1238c91 = icmp eq i32 %v3_12370, 0
  store i1 %v3_1238c91, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_1238c91, i1* %cpsr_z.global-to-local, align 1
  %v6_1239098 = icmp sgt i32 %v3_12370, 0
  br i1 %v6_1239098, label %dec_label_pc_12394.preheader, label %dec_label_pc_12434

dec_label_pc_1238c.loopexit:                      ; preds = %dec_label_pc_123ac
  %v2_123b4 = add i32 %v1_123b4, 2
  store i32 %v2_123b4, i32* @r6, align 4
  %v2_123b8 = add i32 %v1_123b8, 2
  store i32 %v2_123b8, i32* @r4, align 4
  %v2_123bc = add i32 %v1_123bc, 2
  store i32 %v2_123bc, i32* @r7, align 4
  %v3_1238c = icmp uge i32 %v2_123bc, %v1_1238c
  store i1 %v3_1238c, i1* %cpsr_c.global-to-local, align 1
  %v9_1238c = icmp eq i32 %v2_123bc, %v1_1238c
  store i1 %v9_1238c, i1* %cpsr_z.global-to-local, align 1
  %v6_12390 = icmp slt i32 %v2_123bc, %v1_1238c
  br i1 %v6_12390, label %dec_label_pc_12394.preheader, label %dec_label_pc_12434

dec_label_pc_12394.preheader:                     ; preds = %dec_label_pc_1236c, %dec_label_pc_1238c.loopexit
  %v6_1243c168 = phi i32 [ %v6_1243c169, %dec_label_pc_1238c.loopexit ], [ %v0_12334, %dec_label_pc_1236c ]
  %v1_123bc157 = phi i32 [ %v2_123bc, %dec_label_pc_1238c.loopexit ], [ 0, %dec_label_pc_1236c ]
  %v1_123b4155 = phi i32 [ %v2_123b4, %dec_label_pc_1238c.loopexit ], [ %v0_12374, %dec_label_pc_1236c ]
  %v1_123a0153 = phi i32 [ %v1_1238c, %dec_label_pc_1238c.loopexit ], [ %v3_12370, %dec_label_pc_1236c ]
  %v0_12394151 = phi i32 [ %v2_123b8, %dec_label_pc_1238c.loopexit ], [ %v1_12380, %dec_label_pc_1236c ]
  br label %dec_label_pc_12394

dec_label_pc_12394:                               ; preds = %dec_label_pc_12394.preheader, %dec_label_pc_12414
  %v6_1243c169 = phi i32 [ %v6_1243c168, %dec_label_pc_12394.preheader ], [ %v0_1241c, %dec_label_pc_12414 ]
  %v1_123bc = phi i32 [ %v1_123bc157, %dec_label_pc_12394.preheader ], [ %v1_12420, %dec_label_pc_12414 ]
  %v1_123b4 = phi i32 [ %v1_123b4155, %dec_label_pc_12394.preheader ], [ %v1_12428, %dec_label_pc_12414 ]
  %v1_1238c = phi i32 [ %v1_123a0153, %dec_label_pc_12394.preheader ], [ %v3_1241c, %dec_label_pc_12414 ]
  %v1_123b8 = phi i32 [ %v0_12394151, %dec_label_pc_12394.preheader ], [ %v1_1242c, %dec_label_pc_12414 ]
  %v1_12394 = add i32 %v1_123b8, -1
  %v2_12394 = inttoptr i32 %v1_12394 to i8*
  %v3_12394 = load i8, i8* %v2_12394, align 1
  %v4_12394 = zext i8 %v3_12394 to i32
  store i32 %v4_12394, i32* %r3.global-to-local, align 4
  %v2_12398 = icmp eq i8 %v3_12394, -1
  store i1 %v2_12398, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_12398, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12398, label %dec_label_pc_123a0, label %dec_label_pc_12434

dec_label_pc_123a0:                               ; preds = %dec_label_pc_12394
  %v0_123a0 = load i32, i32* @sb, align 4
  %v2_123a0 = add i32 %v0_123a0, %v1_1238c
  store i32 %v2_123a0, i32* %r2.global-to-local, align 4
  %v3_123a4 = icmp uge i32 %v2_123a0, %v1_123b8
  store i1 %v3_123a4, i1* %cpsr_c.global-to-local, align 1
  %v9_123a4 = icmp eq i32 %v2_123a0, %v1_123b8
  store i1 %v9_123a4, i1* %cpsr_z.global-to-local, align 1
  %v2_123a8 = xor i1 %v3_123a4, true
  %v3_123a8 = or i1 %v9_123a4, %v2_123a8
  br i1 %v3_123a8, label %dec_label_pc_12434, label %dec_label_pc_123ac

dec_label_pc_123ac:                               ; preds = %dec_label_pc_123a0
  %v1_123ac = inttoptr i32 %v1_123b8 to i8*
  %v2_123ac = load i8, i8* %v1_123ac, align 1
  %v3_123ac = zext i8 %v2_123ac to i32
  store i32 %v3_123ac, i32* %r3.global-to-local, align 4
  %v2_123b0 = icmp eq i8 %v2_123ac, -1
  store i1 %v2_123b0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_123b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_123b0, label %dec_label_pc_1238c.loopexit, label %dec_label_pc_123c4

dec_label_pc_123c4:                               ; preds = %dec_label_pc_123ac
  %v2_123c4 = icmp ugt i8 %v2_123ac, -4
  store i1 %v2_123c4, i1* %cpsr_c.global-to-local, align 1
  %v7_123c4 = icmp eq i8 %v2_123ac, -3
  store i1 %v7_123c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_123c4, label %dec_label_pc_12b58, label %dec_label_pc_123cc

dec_label_pc_123cc:                               ; preds = %dec_label_pc_123c4
  %v1_123cc = add i32 %v1_123b4, 2
  store i32 %v1_123cc, i32* %r3.global-to-local, align 4
  %v3_123d0 = icmp uge i32 %v2_123a0, %v1_123cc
  store i1 %v3_123d0, i1* %cpsr_c.global-to-local, align 1
  %v9_123d0 = icmp eq i32 %v2_123a0, %v1_123cc
  store i1 %v9_123d0, i1* %cpsr_z.global-to-local, align 1
  %v2_123d4 = xor i1 %v3_123d0, true
  %v3_123d4 = or i1 %v9_123d0, %v2_123d4
  br i1 %v3_123d4, label %dec_label_pc_12434, label %dec_label_pc_123d8

dec_label_pc_123d8:                               ; preds = %bb344, %dec_label_pc_12bac, %bb343, %dec_label_pc_123cc
  %v0_123d8 = load i32, i32* @r4, align 4
  %v1_123d8 = inttoptr i32 %v0_123d8 to i8*
  %v2_123d8 = load i8, i8* %v1_123d8, align 1
  %v3_123d8 = zext i8 %v2_123d8 to i32
  store i32 %v3_123d8, i32* %r3.global-to-local, align 4
  %v2_123dc = icmp ugt i8 %v2_123d8, -4
  store i1 %v2_123dc, i1* %cpsr_c.global-to-local, align 1
  %v7_123dc = icmp eq i8 %v2_123d8, -3
  store i1 %v7_123dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_123dc, label %bb315, label %dec_label_pc_123e8

bb315:                                            ; preds = %dec_label_pc_123d8
  %v1_123e0 = load i32, i32* @r8, align 4
  %v2_123e0 = trunc i32 %v1_123e0 to i8
  store i8 %v2_123e0, i8* %v1_123d8, align 1
  %v0_123e4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_123e4.pr, label %bb317, label %.dec_label_pc_123e8_crit_edge

.dec_label_pc_123e8_crit_edge:                    ; preds = %bb315
  %v0_123e8.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_123e8

dec_label_pc_123e8:                               ; preds = %.dec_label_pc_123e8_crit_edge, %dec_label_pc_123d8
  %v0_123e8 = phi i32 [ %v0_123e8.pre, %.dec_label_pc_123e8_crit_edge ], [ %v3_123d8, %dec_label_pc_123d8 ]
  %v2_123e8 = icmp ugt i32 %v0_123e8, 250
  store i1 %v2_123e8, i1* %cpsr_c.global-to-local, align 1
  %v7_123e8 = icmp eq i32 %v0_123e8, 251
  store i1 %v7_123e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_123e8, label %bb316, label %bb317

bb316:                                            ; preds = %dec_label_pc_123e8
  %v1_123ec = load i32, i32* %sl.global-to-local, align 4
  %v2_123ec = trunc i32 %v1_123ec to i8
  %v3_123ec = load i32, i32* @r4, align 4
  %v4_123ec = inttoptr i32 %v3_123ec to i8*
  store i8 %v2_123ec, i8* %v4_123ec, align 1
  br label %bb317

bb317:                                            ; preds = %bb315, %dec_label_pc_123e8, %bb316
  %v0_123f0 = load i32, i32* @r4, align 4
  %v1_123f0 = add i32 %v0_123f0, 1
  %v2_123f0 = inttoptr i32 %v1_123f0 to i8*
  %v3_123f0 = load i8, i8* %v2_123f0, align 1
  %v4_123f0 = zext i8 %v3_123f0 to i32
  store i32 %v4_123f0, i32* %r3.global-to-local, align 4
  %v2_123f4 = icmp ugt i8 %v3_123f0, -4
  store i1 %v2_123f4, i1* %cpsr_c.global-to-local, align 1
  %v7_123f4 = icmp eq i8 %v3_123f0, -3
  store i1 %v7_123f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_123f4, label %bb318, label %dec_label_pc_12400

bb318:                                            ; preds = %bb317
  %v1_123f8 = load i32, i32* @r8, align 4
  %v2_123f8 = trunc i32 %v1_123f8 to i8
  store i8 %v2_123f8, i8* %v2_123f0, align 1
  %v0_123fc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_123fc.pr, label %bb320, label %.dec_label_pc_12400_crit_edge

.dec_label_pc_12400_crit_edge:                    ; preds = %bb318
  %v0_12400.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_12400

dec_label_pc_12400:                               ; preds = %.dec_label_pc_12400_crit_edge, %bb317
  %v0_12400 = phi i32 [ %v0_12400.pre, %.dec_label_pc_12400_crit_edge ], [ %v4_123f0, %bb317 ]
  %v2_12400 = icmp ugt i32 %v0_12400, 250
  store i1 %v2_12400, i1* %cpsr_c.global-to-local, align 1
  %v7_12400 = icmp eq i32 %v0_12400, 251
  store i1 %v7_12400, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12400, label %bb319, label %bb320

bb319:                                            ; preds = %dec_label_pc_12400
  %v1_12404 = load i32, i32* %sl.global-to-local, align 4
  %v2_12404 = trunc i32 %v1_12404 to i8
  %v3_12404 = load i32, i32* @r4, align 4
  %v4_12404 = add i32 %v3_12404, 1
  %v5_12404 = inttoptr i32 %v4_12404 to i8*
  store i8 %v2_12404, i8* %v5_12404, align 1
  br label %bb320

bb320:                                            ; preds = %bb318, %dec_label_pc_12400, %bb319
  %v0_12408 = load i32, i32* @r5, align 4
  %v1_12408 = add i32 %v0_12408, 4
  %v2_12408 = inttoptr i32 %v1_12408 to i32*
  %v3_12408 = load i32, i32* %v2_12408, align 4
  store i32 %v3_12408, i32* %r0.global-to-local, align 4
  %v0_1240c = load i32, i32* @r6, align 4
  br label %dec_label_pc_12414

dec_label_pc_12414:                               ; preds = %dec_label_pc_12c84, %bb320
  %v0_12418 = phi i32 [ %v3_12c9c, %dec_label_pc_12c84 ], [ %v3_12408, %bb320 ]
  %storemerge5 = phi i32 [ %v2_12b70, %dec_label_pc_12c84 ], [ %v0_1240c, %bb320 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_12c84 ], [ 3, %bb320 ]
  store i32 %storemerge5, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_12418 = inttoptr i32 %storemerge5 to i32*
  %v5_12418 = call i32 @function_14aa0(i32 %v0_12418, i32* %v4_12418, i32 %storemerge, i32 16384)
  store i32 %v5_12418, i32* %r0.global-to-local, align 4
  %v0_1241c = load i32, i32* @r5, align 4
  %v1_1241c = add i32 %v0_1241c, 24
  %v2_1241c = inttoptr i32 %v1_1241c to i32*
  %v3_1241c = load i32, i32* %v2_1241c, align 4
  store i32 %v3_1241c, i32* %ip.global-to-local, align 4
  %v0_12420 = load i32, i32* @r7, align 4
  %v1_12420 = add i32 %v0_12420, 3
  store i32 %v1_12420, i32* @r7, align 4
  %v3_12424 = icmp uge i32 %v1_12420, %v3_1241c
  store i1 %v3_12424, i1* %cpsr_c.global-to-local, align 1
  %v9_12424 = icmp eq i32 %v1_12420, %v3_1241c
  store i1 %v9_12424, i1* %cpsr_z.global-to-local, align 1
  %v0_12428 = load i32, i32* @r6, align 4
  %v1_12428 = add i32 %v0_12428, 3
  store i32 %v1_12428, i32* @r6, align 4
  %v0_1242c = load i32, i32* @r4, align 4
  %v1_1242c = add i32 %v0_1242c, 3
  store i32 %v1_1242c, i32* @r4, align 4
  %v5_12430 = icmp slt i32 %v1_12420, %v3_1241c
  br i1 %v5_12430, label %dec_label_pc_12394, label %dec_label_pc_12434

dec_label_pc_12434:                               ; preds = %dec_label_pc_1238c.loopexit, %dec_label_pc_12394, %dec_label_pc_12414, %dec_label_pc_123cc, %dec_label_pc_123a0, %dec_label_pc_1236c, %dec_label_pc_12b58.dec_label_pc_12434.loopexit_crit_edge
  %v6_1243c = phi i32 [ %v0_12b7c, %dec_label_pc_12b58.dec_label_pc_12434.loopexit_crit_edge ], [ %v0_12334, %dec_label_pc_1236c ], [ %v6_1243c169, %dec_label_pc_12394 ], [ %v0_1241c, %dec_label_pc_12414 ], [ %v6_1243c169, %dec_label_pc_123cc ], [ %v6_1243c169, %dec_label_pc_123a0 ], [ %v6_1243c169, %dec_label_pc_1238c.loopexit ]
  %v0_12444.pre = phi i32 [ %v0_12434.pre.pre, %dec_label_pc_12b58.dec_label_pc_12434.loopexit_crit_edge ], [ 0, %dec_label_pc_1236c ], [ %v1_123bc, %dec_label_pc_12394 ], [ %v1_12420, %dec_label_pc_12414 ], [ %v1_123bc, %dec_label_pc_123cc ], [ %v1_123bc, %dec_label_pc_123a0 ], [ %v2_123bc, %dec_label_pc_1238c.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12434 = icmp eq i32 %v0_12444.pre, 0
  store i1 %v2_12434, i1* %cpsr_z.global-to-local, align 1
  %tmp321 = icmp slt i32 %v0_12444.pre, 1
  br i1 %tmp321, label %dec_label_pc_12444, label %.thread204

.thread204:                                       ; preds = %dec_label_pc_12434
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_1243c = add i32 %v6_1243c, 12
  %v8_1243c = inttoptr i32 %v7_1243c to i32*
  store i32 3, i32* %v8_1243c, align 4
  br label %dec_label_pc_12a80

dec_label_pc_12444:                               ; preds = %dec_label_pc_12434, %dec_label_pc_12af8, %dec_label_pc_129d0, %dec_label_pc_128ec, %dec_label_pc_12838, %dec_label_pc_12784, %dec_label_pc_126d0, %dec_label_pc_12638, %dec_label_pc_124a8
  %v0_12444 = phi i32 [ %v1_12aec, %dec_label_pc_12af8 ], [ %v0_129c8, %dec_label_pc_129d0 ], [ %v1_128e0, %dec_label_pc_128ec ], [ %v1_1282c, %dec_label_pc_12838 ], [ %v1_12778, %dec_label_pc_12784 ], [ %v1_126c4, %dec_label_pc_126d0 ], [ %v0_12638, %dec_label_pc_12638 ], [ %v0_124a8, %dec_label_pc_124a8 ], [ %v0_12444.pre, %dec_label_pc_12434 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12444 = icmp eq i32 %v0_12444, 0
  store i1 %v2_12444, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12444, label %dec_label_pc_122b0.loopexit, label %dec_label_pc_1244c

dec_label_pc_1244c:                               ; preds = %dec_label_pc_12444
  %v0_1244c = load i32, i32* @r5, align 4
  %v1_1244c = add i32 %v0_1244c, 24
  %v2_1244c = inttoptr i32 %v1_1244c to i32*
  %v3_1244c = load i32, i32* %v2_1244c, align 4
  store i32 %v3_1244c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12a80

dec_label_pc_12454:                               ; preds = %dec_label_pc_12334
  %v1_12454 = add i32 %v0_12334, 24
  %v2_12454 = inttoptr i32 %v1_12454 to i32*
  %v3_12454 = load i32, i32* %v2_12454, align 4
  store i32 %v3_12454, i32* %ip.global-to-local, align 4
  %v1_12458 = add i32 %v3_12454, -1
  store i32 %v1_12458, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1245c = icmp eq i32 %v1_12458, 0
  store i1 %v2_1245c, i1* %cpsr_z.global-to-local, align 1
  %v5_12460 = icmp sgt i32 %v1_12458, 0
  br i1 %v5_12460, label %dec_label_pc_12488, label %dec_label_pc_12270

dec_label_pc_12468:                               ; preds = %bb322
  %v2_12468 = icmp ugt i8 %v3_1248c, 35
  store i1 %v2_12468, i1* %cpsr_c.global-to-local, align 1
  %v7_12468 = icmp eq i8 %v3_1248c, 36
  store i1 %v7_12468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12468, label %dec_label_pc_1249c, label %dec_label_pc_12470

dec_label_pc_12470:                               ; preds = %dec_label_pc_12468
  %v2_12470 = icmp ugt i8 %v3_1248c, 34
  store i1 %v2_12470, i1* %cpsr_c.global-to-local, align 1
  %v7_12470 = icmp eq i8 %v3_1248c, 35
  store i1 %v7_12470, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12470, label %dec_label_pc_1249c, label %dec_label_pc_12478

dec_label_pc_12478:                               ; preds = %dec_label_pc_12470
  %v2_12478 = icmp ugt i8 %v3_1248c, 36
  store i1 %v2_12478, i1* %cpsr_c.global-to-local, align 1
  %v7_12478 = icmp eq i8 %v3_1248c, 37
  store i1 %v7_12478, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12478, label %dec_label_pc_1249c, label %dec_label_pc_12480

dec_label_pc_12480:                               ; preds = %dec_label_pc_12478
  %v1_12480 = add i32 %v0_1249c, -1
  store i32 %v1_12480, i32* %r0.global-to-local, align 4
  %v2_12480 = icmp ne i32 %v0_1249c, 0
  store i1 %v2_12480, i1* %cpsr_c.global-to-local, align 1
  %v7_12480 = icmp eq i32 %v0_1249c, 1
  store i1 %v7_12480, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12480, label %dec_label_pc_12270, label %dec_label_pc_12488

dec_label_pc_12488:                               ; preds = %dec_label_pc_12454, %dec_label_pc_12480
  %v0_1249c = phi i32 [ %v1_12480, %dec_label_pc_12480 ], [ %v1_12458, %dec_label_pc_12454 ]
  %v2_12488 = add i32 %v0_1249c, %v0_12334
  store i32 %v2_12488, i32* %r3.global-to-local, align 4
  %v1_1248c = add i32 %v2_12488, 28
  %v2_1248c = inttoptr i32 %v1_1248c to i8*
  %v3_1248c = load i8, i8* %v2_1248c, align 1
  %v4_1248c = zext i8 %v3_1248c to i32
  store i32 %v4_1248c, i32* %r3.global-to-local, align 4
  %v2_12490 = icmp ugt i8 %v3_1248c, 61
  store i1 %v2_12490, i1* %cpsr_c.global-to-local, align 1
  %v7_12490 = icmp eq i8 %v3_1248c, 62
  store i1 %v7_12490, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12490, label %dec_label_pc_1249c, label %bb322

bb322:                                            ; preds = %dec_label_pc_12488
  %v3_12494 = icmp ugt i8 %v3_1248c, 57
  store i1 %v3_12494, i1* %cpsr_c.global-to-local, align 1
  %v8_12494 = icmp eq i8 %v3_1248c, 58
  store i1 %v8_12494, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_12494, label %dec_label_pc_1249c, label %dec_label_pc_12468

dec_label_pc_1249c:                               ; preds = %dec_label_pc_12488, %bb322, %dec_label_pc_12478, %dec_label_pc_12470, %dec_label_pc_12468
  %v1_1249c = add i32 %v0_1249c, 1
  store i32 %v1_1249c, i32* @r7, align 4
  %v2_124a0 = icmp eq i32 %v1_1249c, -1
  store i1 %v2_124a0, i1* %cpsr_c.global-to-local, align 1
  %v7_124a0 = icmp eq i32 %v0_1249c, -2
  store i1 %v7_124a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_124a0, label %dec_label_pc_12270, label %dec_label_pc_124a8

dec_label_pc_124a8:                               ; preds = %dec_label_pc_1249c, %dec_label_pc_12290, %dec_label_pc_12270
  %v0_124a8 = phi i32 [ %v5_122a0, %dec_label_pc_12290 ], [ %v5_12280, %dec_label_pc_12270 ], [ %v1_1249c, %dec_label_pc_1249c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_124a8 = icmp eq i32 %v0_124a8, 0
  store i1 %v2_124a8, i1* %cpsr_z.global-to-local, align 1
  %tmp323 = icmp slt i32 %v0_124a8, 1
  br i1 %tmp323, label %dec_label_pc_12444, label %dec_label_pc_124b0

dec_label_pc_124b0:                               ; preds = %dec_label_pc_124a8
  %v0_124b0 = load i32, i32* @r5, align 4
  %v1_124b0 = inttoptr i32 %v0_124b0 to i32*
  %v2_124b0 = load i32, i32* %v1_124b0, align 4
  store i32 %v2_124b0, i32* %r3.global-to-local, align 4
  %v1_124b4 = add i32 %v0_124b0, 4
  %v2_124b4 = inttoptr i32 %v1_124b4 to i32*
  %v3_124b4 = load i32, i32* %v2_124b4, align 4
  store i32 %v3_124b4, i32* %r0.global-to-local, align 4
  %v1_124b8 = add i32 %v2_124b0, 12
  %v2_124b8 = inttoptr i32 %v1_124b8 to i8*
  %v3_124b8 = load i8, i8* %v2_124b8, align 1
  %v4_124b8 = zext i8 %v3_124b8 to i32
  store i32 %v4_124b8, i32* %r2.global-to-local, align 4
  %v1_124bc = inttoptr i32 %v2_124b0 to i32*
  %v2_124bc = load i32, i32* %v1_124bc, align 4
  store i32 %v2_124bc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_124c4 = inttoptr i32 %v2_124bc to i32*
  %v5_124c4 = call i32 @function_14aa0(i32 %v3_124b4, i32* %v4_124c4, i32 %v4_124b8, i32 16384)
  store i32 %v5_124c4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_124cc = load i32, i32* @r5, align 4
  %v1_124cc = add i32 %v0_124cc, 4
  %v2_124cc = inttoptr i32 %v1_124cc to i32*
  %v3_124cc = load i32, i32* %v2_124cc, align 4
  store i32 %v3_124cc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_124d8 = call i32 @function_14aa0(i32 %v3_124cc, i32* bitcast ([3 x i8]* @global_var_16af0.33 to i32*), i32 2, i32 16384)
  store i32 %v5_124d8, i32* %r0.global-to-local, align 4
  %v0_124dc = load i32, i32* @r5, align 4
  %v1_124dc = add i32 %v0_124dc, 24
  %v2_124dc = inttoptr i32 %v1_124dc to i32*
  %v3_124dc = load i32, i32* %v2_124dc, align 4
  store i32 %v3_124dc, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_124e4 = add i32 %v0_124dc, 12
  %v3_124e4 = inttoptr i32 %v2_124e4 to i32*
  store i32 4, i32* %v3_124e4, align 4
  br label %dec_label_pc_12a80

dec_label_pc_125ec:                               ; preds = %dec_label_pc_12334
  %v1_125ec = add i32 %v0_12334, 24
  %v2_125ec = inttoptr i32 %v1_125ec to i32*
  %v3_125ec = load i32, i32* %v2_125ec, align 4
  store i32 %v3_125ec, i32* %ip.global-to-local, align 4
  %v1_125f0 = add i32 %v3_125ec, -1
  store i32 %v1_125f0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_125f4 = icmp eq i32 %v1_125f0, 0
  store i1 %v2_125f4, i1* %cpsr_z.global-to-local, align 1
  %v5_125f8 = icmp sgt i32 %v1_125f0, 0
  br i1 %v5_125f8, label %dec_label_pc_12618, label %dec_label_pc_12c60

dec_label_pc_12600:                               ; preds = %bb324
  %v2_12600 = icmp ugt i8 %v3_1261c, 35
  store i1 %v2_12600, i1* %cpsr_c.global-to-local, align 1
  %v7_12600 = icmp eq i8 %v3_1261c, 36
  store i1 %v7_12600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12600, label %dec_label_pc_1262c, label %dec_label_pc_12608

dec_label_pc_12608:                               ; preds = %dec_label_pc_12600
  %v2_12608 = icmp ugt i8 %v3_1261c, 34
  store i1 %v2_12608, i1* %cpsr_c.global-to-local, align 1
  %v7_12608 = icmp eq i8 %v3_1261c, 35
  store i1 %v7_12608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12608, label %dec_label_pc_1262c, label %dec_label_pc_12610

dec_label_pc_12610:                               ; preds = %dec_label_pc_12608
  %v1_12610 = add i32 %v0_1262c, -1
  store i32 %v1_12610, i32* %r0.global-to-local, align 4
  %v2_12610 = icmp ne i32 %v0_1262c, 0
  store i1 %v2_12610, i1* %cpsr_c.global-to-local, align 1
  %v7_12610 = icmp eq i32 %v0_1262c, 1
  store i1 %v7_12610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12610, label %dec_label_pc_12c60, label %dec_label_pc_12618

dec_label_pc_12618:                               ; preds = %dec_label_pc_125ec, %dec_label_pc_12610
  %v0_1262c = phi i32 [ %v1_12610, %dec_label_pc_12610 ], [ %v1_125f0, %dec_label_pc_125ec ]
  %v2_12618 = add i32 %v0_1262c, %v0_12334
  store i32 %v2_12618, i32* %r3.global-to-local, align 4
  %v1_1261c = add i32 %v2_12618, 28
  %v2_1261c = inttoptr i32 %v1_1261c to i8*
  %v3_1261c = load i8, i8* %v2_1261c, align 1
  %v4_1261c = zext i8 %v3_1261c to i32
  store i32 %v4_1261c, i32* %r3.global-to-local, align 4
  %v2_12620 = icmp ugt i8 %v3_1261c, 61
  store i1 %v2_12620, i1* %cpsr_c.global-to-local, align 1
  %v7_12620 = icmp eq i8 %v3_1261c, 62
  store i1 %v7_12620, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12620, label %dec_label_pc_1262c, label %bb324

bb324:                                            ; preds = %dec_label_pc_12618
  %v3_12624 = icmp ugt i8 %v3_1261c, 57
  store i1 %v3_12624, i1* %cpsr_c.global-to-local, align 1
  %v8_12624 = icmp eq i8 %v3_1261c, 58
  store i1 %v8_12624, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_12624, label %dec_label_pc_1262c, label %dec_label_pc_12600

dec_label_pc_1262c:                               ; preds = %dec_label_pc_12618, %bb324, %dec_label_pc_12608, %dec_label_pc_12600
  %v1_1262c = add i32 %v0_1262c, 1
  store i32 %v1_1262c, i32* @r7, align 4
  %v2_12630 = icmp eq i32 %v1_1262c, -1
  store i1 %v2_12630, i1* %cpsr_c.global-to-local, align 1
  %v7_12630 = icmp eq i32 %v0_1262c, -2
  store i1 %v7_12630, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12630, label %dec_label_pc_12c60, label %dec_label_pc_12638

dec_label_pc_12638:                               ; preds = %dec_label_pc_1262c, %dec_label_pc_12c60
  %v0_12638 = phi i32 [ %v5_12c70, %dec_label_pc_12c60 ], [ %v1_1262c, %dec_label_pc_1262c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12638 = icmp eq i32 %v0_12638, 0
  store i1 %v2_12638, i1* %cpsr_z.global-to-local, align 1
  %tmp325 = icmp slt i32 %v0_12638, 1
  br i1 %tmp325, label %dec_label_pc_12444, label %dec_label_pc_12640

dec_label_pc_12640:                               ; preds = %dec_label_pc_12638
  %v0_12640 = load i32, i32* @r5, align 4
  %v1_12640 = inttoptr i32 %v0_12640 to i32*
  %v2_12640 = load i32, i32* %v1_12640, align 4
  store i32 %v2_12640, i32* %r3.global-to-local, align 4
  %v1_12644 = add i32 %v0_12640, 4
  %v2_12644 = inttoptr i32 %v1_12644 to i32*
  %v3_12644 = load i32, i32* %v2_12644, align 4
  store i32 %v3_12644, i32* %r0.global-to-local, align 4
  %v1_12648 = add i32 %v2_12640, 13
  %v2_12648 = inttoptr i32 %v1_12648 to i8*
  %v3_12648 = load i8, i8* %v2_12648, align 1
  %v4_12648 = zext i8 %v3_12648 to i32
  store i32 %v4_12648, i32* %r2.global-to-local, align 4
  %v1_1264c = add i32 %v2_12640, 4
  %v2_1264c = inttoptr i32 %v1_1264c to i32*
  %v3_1264c = load i32, i32* %v2_1264c, align 4
  store i32 %v3_1264c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_12654 = inttoptr i32 %v3_1264c to i32*
  %v5_12654 = call i32 @function_14aa0(i32 %v3_12644, i32* %v4_12654, i32 %v4_12648, i32 16384)
  store i32 %v5_12654, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_1265c = load i32, i32* @r5, align 4
  %v1_1265c = add i32 %v0_1265c, 4
  %v2_1265c = inttoptr i32 %v1_1265c to i32*
  %v3_1265c = load i32, i32* %v2_1265c, align 4
  store i32 %v3_1265c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_12668 = call i32 @function_14aa0(i32 %v3_1265c, i32* bitcast ([3 x i8]* @global_var_16af0.33 to i32*), i32 2, i32 16384)
  store i32 %v5_12668, i32* %r0.global-to-local, align 4
  %v0_1266c = load i32, i32* @r5, align 4
  %v1_1266c = add i32 %v0_1266c, 24
  %v2_1266c = inttoptr i32 %v1_1266c to i32*
  %v3_1266c = load i32, i32* %v2_1266c, align 4
  store i32 %v3_1266c, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_12674 = add i32 %v0_1266c, 12
  %v3_12674 = inttoptr i32 %v2_12674 to i32*
  store i32 5, i32* %v3_12674, align 4
  br label %dec_label_pc_12a80

dec_label_pc_1267c:                               ; preds = %dec_label_pc_12334
  %v1_1267c = add i32 %v0_12334, 24
  %v2_1267c = inttoptr i32 %v1_1267c to i32*
  %v3_1267c = load i32, i32* %v2_1267c, align 4
  store i32 %v3_1267c, i32* %ip.global-to-local, align 4
  %v1_12680 = add i32 %v3_1267c, -1
  store i32 %v1_12680, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12684 = icmp eq i32 %v1_12680, 0
  store i1 %v2_12684, i1* %cpsr_z.global-to-local, align 1
  %v5_12688 = icmp sgt i32 %v1_12680, 0
  br i1 %v5_12688, label %dec_label_pc_126b0, label %dec_label_pc_122b4thread-pre-split.thread

dec_label_pc_12690:                               ; preds = %bb326
  %v2_12690 = icmp ugt i8 %v3_126b4, 35
  store i1 %v2_12690, i1* %cpsr_c.global-to-local, align 1
  %v7_12690 = icmp eq i8 %v3_126b4, 36
  store i1 %v7_12690, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12690, label %dec_label_pc_126c4, label %dec_label_pc_12698

dec_label_pc_12698:                               ; preds = %dec_label_pc_12690
  %v2_12698 = icmp ugt i8 %v3_126b4, 34
  store i1 %v2_12698, i1* %cpsr_c.global-to-local, align 1
  %v7_12698 = icmp eq i8 %v3_126b4, 35
  store i1 %v7_12698, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12698, label %dec_label_pc_126c4, label %dec_label_pc_126a0

dec_label_pc_126a0:                               ; preds = %dec_label_pc_12698
  %v2_126a0 = icmp ugt i8 %v3_126b4, 36
  store i1 %v2_126a0, i1* %cpsr_c.global-to-local, align 1
  %v7_126a0 = icmp eq i8 %v3_126b4, 37
  store i1 %v7_126a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_126a0, label %dec_label_pc_126c4, label %dec_label_pc_126a8

dec_label_pc_126a8:                               ; preds = %dec_label_pc_126a0
  %v1_126a8 = add i32 %v0_126c4, -1
  store i32 %v1_126a8, i32* %r0.global-to-local, align 4
  %v2_126a8 = icmp ne i32 %v0_126c4, 0
  store i1 %v2_126a8, i1* %cpsr_c.global-to-local, align 1
  %v7_126a8 = icmp eq i32 %v0_126c4, 1
  store i1 %v7_126a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_126a8, label %dec_label_pc_122b4thread-pre-split, label %dec_label_pc_126b0

dec_label_pc_126b0:                               ; preds = %dec_label_pc_1267c, %dec_label_pc_126a8
  %v0_126c4 = phi i32 [ %v1_126a8, %dec_label_pc_126a8 ], [ %v1_12680, %dec_label_pc_1267c ]
  %v2_126b0 = add i32 %v0_126c4, %v0_12334
  store i32 %v2_126b0, i32* %r3.global-to-local, align 4
  %v1_126b4 = add i32 %v2_126b0, 28
  %v2_126b4 = inttoptr i32 %v1_126b4 to i8*
  %v3_126b4 = load i8, i8* %v2_126b4, align 1
  %v4_126b4 = zext i8 %v3_126b4 to i32
  store i32 %v4_126b4, i32* %r3.global-to-local, align 4
  %v2_126b8 = icmp ugt i8 %v3_126b4, 61
  store i1 %v2_126b8, i1* %cpsr_c.global-to-local, align 1
  %v7_126b8 = icmp eq i8 %v3_126b4, 62
  store i1 %v7_126b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_126b8, label %dec_label_pc_126c4, label %bb326

bb326:                                            ; preds = %dec_label_pc_126b0
  %v3_126bc = icmp ugt i8 %v3_126b4, 57
  store i1 %v3_126bc, i1* %cpsr_c.global-to-local, align 1
  %v8_126bc = icmp eq i8 %v3_126b4, 58
  store i1 %v8_126bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_126bc, label %dec_label_pc_126c4, label %dec_label_pc_12690

dec_label_pc_126c4:                               ; preds = %dec_label_pc_126b0, %bb326, %dec_label_pc_126a0, %dec_label_pc_12698, %dec_label_pc_12690
  %v1_126c4 = add i32 %v0_126c4, 1
  store i32 %v1_126c4, i32* @r7, align 4
  %v2_126c8 = icmp eq i32 %v1_126c4, -1
  store i1 %v2_126c8, i1* %cpsr_c.global-to-local, align 1
  %v7_126c8 = icmp eq i32 %v0_126c4, -2
  store i1 %v7_126c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_126c8, label %dec_label_pc_122b4thread-pre-split, label %dec_label_pc_126d0

dec_label_pc_126d0:                               ; preds = %dec_label_pc_126c4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_126d0 = icmp eq i32 %v1_126c4, 0
  store i1 %v2_126d0, i1* %cpsr_z.global-to-local, align 1
  %tmp327 = icmp slt i32 %v1_126c4, 1
  br i1 %tmp327, label %dec_label_pc_12444, label %dec_label_pc_126d8

dec_label_pc_126d8:                               ; preds = %dec_label_pc_126d0
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_126dc = call i32 @function_12f50(i32 21)
  store i32 %v2_126e4, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_126ec = call i32 @function_12e6c(i32 21, i32* nonnull %stack_var_-56)
  store i32 %v3_126ec, i32* %r0.global-to-local, align 4
  %v3_126f0 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_126f0, i32* %r2.global-to-local, align 4
  store i32 %v3_126ec, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_126fc = load i32, i32* @r5, align 4
  %v1_126fc = add i32 %v0_126fc, 4
  %v2_126fc = inttoptr i32 %v1_126fc to i32*
  %v3_126fc = load i32, i32* %v2_126fc, align 4
  store i32 %v3_126fc, i32* %r0.global-to-local, align 4
  %v4_12700 = inttoptr i32 %v3_126ec to i32*
  %v5_12700 = call i32 @function_14aa0(i32 %v3_126fc, i32* %v4_12700, i32 %v3_126f0, i32 16384)
  store i32 %v5_12700, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12710 = load i32, i32* @r5, align 4
  %v1_12710 = add i32 %v0_12710, 4
  %v2_12710 = inttoptr i32 %v1_12710 to i32*
  %v3_12710 = load i32, i32* %v2_12710, align 4
  store i32 %v3_12710, i32* %r0.global-to-local, align 4
  %v5_12714 = call i32 @function_14aa0(i32 %v3_12710, i32* bitcast ([3 x i8]* @global_var_16af0.33 to i32*), i32 2, i32 16384)
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_1271c = call i32 @function_12e98(i32 21)
  store i32 %v1_1271c, i32* %r0.global-to-local, align 4
  %v0_12720 = load i32, i32* @r5, align 4
  %v1_12720 = add i32 %v0_12720, 24
  %v2_12720 = inttoptr i32 %v1_12720 to i32*
  %v3_12720 = load i32, i32* %v2_12720, align 4
  store i32 %v3_12720, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_12728 = add i32 %v0_12720, 12
  %v3_12728 = inttoptr i32 %v2_12728 to i32*
  store i32 6, i32* %v3_12728, align 4
  br label %dec_label_pc_12a80

dec_label_pc_12730:                               ; preds = %dec_label_pc_12334
  %v1_12730 = add i32 %v0_12334, 24
  %v2_12730 = inttoptr i32 %v1_12730 to i32*
  %v3_12730 = load i32, i32* %v2_12730, align 4
  store i32 %v3_12730, i32* %ip.global-to-local, align 4
  %v1_12734 = add i32 %v3_12730, -1
  store i32 %v1_12734, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12738 = icmp eq i32 %v1_12734, 0
  store i1 %v2_12738, i1* %cpsr_z.global-to-local, align 1
  %v5_1273c = icmp sgt i32 %v1_12734, 0
  br i1 %v5_1273c, label %dec_label_pc_12764, label %dec_label_pc_122b4thread-pre-split.thread

dec_label_pc_12744:                               ; preds = %bb328
  %v2_12744 = icmp ugt i8 %v3_12768, 35
  store i1 %v2_12744, i1* %cpsr_c.global-to-local, align 1
  %v7_12744 = icmp eq i8 %v3_12768, 36
  store i1 %v7_12744, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12744, label %dec_label_pc_12778, label %dec_label_pc_1274c

dec_label_pc_1274c:                               ; preds = %dec_label_pc_12744
  %v2_1274c = icmp ugt i8 %v3_12768, 34
  store i1 %v2_1274c, i1* %cpsr_c.global-to-local, align 1
  %v7_1274c = icmp eq i8 %v3_12768, 35
  store i1 %v7_1274c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1274c, label %dec_label_pc_12778, label %dec_label_pc_12754

dec_label_pc_12754:                               ; preds = %dec_label_pc_1274c
  %v2_12754 = icmp ugt i8 %v3_12768, 36
  store i1 %v2_12754, i1* %cpsr_c.global-to-local, align 1
  %v7_12754 = icmp eq i8 %v3_12768, 37
  store i1 %v7_12754, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12754, label %dec_label_pc_12778, label %dec_label_pc_1275c

dec_label_pc_1275c:                               ; preds = %dec_label_pc_12754
  %v1_1275c = add i32 %v0_12778, -1
  store i32 %v1_1275c, i32* %r0.global-to-local, align 4
  %v2_1275c = icmp ne i32 %v0_12778, 0
  store i1 %v2_1275c, i1* %cpsr_c.global-to-local, align 1
  %v7_1275c = icmp eq i32 %v0_12778, 1
  store i1 %v7_1275c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1275c, label %dec_label_pc_122b4thread-pre-split, label %dec_label_pc_12764

dec_label_pc_12764:                               ; preds = %dec_label_pc_12730, %dec_label_pc_1275c
  %v0_12778 = phi i32 [ %v1_1275c, %dec_label_pc_1275c ], [ %v1_12734, %dec_label_pc_12730 ]
  %v2_12764 = add i32 %v0_12778, %v0_12334
  store i32 %v2_12764, i32* %r3.global-to-local, align 4
  %v1_12768 = add i32 %v2_12764, 28
  %v2_12768 = inttoptr i32 %v1_12768 to i8*
  %v3_12768 = load i8, i8* %v2_12768, align 1
  %v4_12768 = zext i8 %v3_12768 to i32
  store i32 %v4_12768, i32* %r3.global-to-local, align 4
  %v2_1276c = icmp ugt i8 %v3_12768, 61
  store i1 %v2_1276c, i1* %cpsr_c.global-to-local, align 1
  %v7_1276c = icmp eq i8 %v3_12768, 62
  store i1 %v7_1276c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1276c, label %dec_label_pc_12778, label %bb328

bb328:                                            ; preds = %dec_label_pc_12764
  %v3_12770 = icmp ugt i8 %v3_12768, 57
  store i1 %v3_12770, i1* %cpsr_c.global-to-local, align 1
  %v8_12770 = icmp eq i8 %v3_12768, 58
  store i1 %v8_12770, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_12770, label %dec_label_pc_12778, label %dec_label_pc_12744

dec_label_pc_12778:                               ; preds = %dec_label_pc_12764, %bb328, %dec_label_pc_12754, %dec_label_pc_1274c, %dec_label_pc_12744
  %v1_12778 = add i32 %v0_12778, 1
  store i32 %v1_12778, i32* @r7, align 4
  %v2_1277c = icmp eq i32 %v1_12778, -1
  store i1 %v2_1277c, i1* %cpsr_c.global-to-local, align 1
  %v7_1277c = icmp eq i32 %v0_12778, -2
  store i1 %v7_1277c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1277c, label %dec_label_pc_122b4thread-pre-split, label %dec_label_pc_12784

dec_label_pc_12784:                               ; preds = %dec_label_pc_12778
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12784 = icmp eq i32 %v1_12778, 0
  store i1 %v2_12784, i1* %cpsr_z.global-to-local, align 1
  %tmp329 = icmp slt i32 %v1_12778, 1
  br i1 %tmp329, label %dec_label_pc_12444, label %dec_label_pc_1278c

dec_label_pc_1278c:                               ; preds = %dec_label_pc_12784
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_12790 = call i32 @function_12f50(i32 22)
  store i32 %v2_12798, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_127a0 = call i32 @function_12e6c(i32 22, i32* nonnull %stack_var_-48)
  store i32 %v3_127a0, i32* %r0.global-to-local, align 4
  %v3_127a4 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_127a4, i32* %r2.global-to-local, align 4
  store i32 %v3_127a0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_127b0 = load i32, i32* @r5, align 4
  %v1_127b0 = add i32 %v0_127b0, 4
  %v2_127b0 = inttoptr i32 %v1_127b0 to i32*
  %v3_127b0 = load i32, i32* %v2_127b0, align 4
  store i32 %v3_127b0, i32* %r0.global-to-local, align 4
  %v4_127b4 = inttoptr i32 %v3_127a0 to i32*
  %v5_127b4 = call i32 @function_14aa0(i32 %v3_127b0, i32* %v4_127b4, i32 %v3_127a4, i32 16384)
  store i32 %v5_127b4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_127c4 = load i32, i32* @r5, align 4
  %v1_127c4 = add i32 %v0_127c4, 4
  %v2_127c4 = inttoptr i32 %v1_127c4 to i32*
  %v3_127c4 = load i32, i32* %v2_127c4, align 4
  store i32 %v3_127c4, i32* %r0.global-to-local, align 4
  %v5_127c8 = call i32 @function_14aa0(i32 %v3_127c4, i32* bitcast ([3 x i8]* @global_var_16af0.33 to i32*), i32 2, i32 16384)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_127d0 = call i32 @function_12e98(i32 22)
  store i32 %v1_127d0, i32* %r0.global-to-local, align 4
  %v0_127d4 = load i32, i32* @r5, align 4
  %v1_127d4 = add i32 %v0_127d4, 24
  %v2_127d4 = inttoptr i32 %v1_127d4 to i32*
  %v3_127d4 = load i32, i32* %v2_127d4, align 4
  store i32 %v3_127d4, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_127dc = add i32 %v0_127d4, 12
  %v3_127dc = inttoptr i32 %v2_127dc to i32*
  store i32 7, i32* %v3_127dc, align 4
  br label %dec_label_pc_12a80

dec_label_pc_127e4:                               ; preds = %dec_label_pc_12334
  %v1_127e4 = add i32 %v0_12334, 24
  %v2_127e4 = inttoptr i32 %v1_127e4 to i32*
  %v3_127e4 = load i32, i32* %v2_127e4, align 4
  store i32 %v3_127e4, i32* %ip.global-to-local, align 4
  %v1_127e8 = add i32 %v3_127e4, -1
  store i32 %v1_127e8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_127ec = icmp eq i32 %v1_127e8, 0
  store i1 %v2_127ec, i1* %cpsr_z.global-to-local, align 1
  %v5_127f0 = icmp sgt i32 %v1_127e8, 0
  br i1 %v5_127f0, label %dec_label_pc_12818, label %dec_label_pc_122b4thread-pre-split.thread

dec_label_pc_127f8:                               ; preds = %bb330
  %v2_127f8 = icmp ugt i8 %v3_1281c, 35
  store i1 %v2_127f8, i1* %cpsr_c.global-to-local, align 1
  %v7_127f8 = icmp eq i8 %v3_1281c, 36
  store i1 %v7_127f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_127f8, label %dec_label_pc_1282c, label %dec_label_pc_12800

dec_label_pc_12800:                               ; preds = %dec_label_pc_127f8
  %v2_12800 = icmp ugt i8 %v3_1281c, 34
  store i1 %v2_12800, i1* %cpsr_c.global-to-local, align 1
  %v7_12800 = icmp eq i8 %v3_1281c, 35
  store i1 %v7_12800, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12800, label %dec_label_pc_1282c, label %dec_label_pc_12808

dec_label_pc_12808:                               ; preds = %dec_label_pc_12800
  %v2_12808 = icmp ugt i8 %v3_1281c, 36
  store i1 %v2_12808, i1* %cpsr_c.global-to-local, align 1
  %v7_12808 = icmp eq i8 %v3_1281c, 37
  store i1 %v7_12808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12808, label %dec_label_pc_1282c, label %dec_label_pc_12810

dec_label_pc_12810:                               ; preds = %dec_label_pc_12808
  %v1_12810 = add i32 %v0_1282c, -1
  store i32 %v1_12810, i32* %r0.global-to-local, align 4
  %v2_12810 = icmp ne i32 %v0_1282c, 0
  store i1 %v2_12810, i1* %cpsr_c.global-to-local, align 1
  %v7_12810 = icmp eq i32 %v0_1282c, 1
  store i1 %v7_12810, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12810, label %dec_label_pc_122b4thread-pre-split, label %dec_label_pc_12818

dec_label_pc_12818:                               ; preds = %dec_label_pc_127e4, %dec_label_pc_12810
  %v0_1282c = phi i32 [ %v1_12810, %dec_label_pc_12810 ], [ %v1_127e8, %dec_label_pc_127e4 ]
  %v2_12818 = add i32 %v0_1282c, %v0_12334
  store i32 %v2_12818, i32* %r3.global-to-local, align 4
  %v1_1281c = add i32 %v2_12818, 28
  %v2_1281c = inttoptr i32 %v1_1281c to i8*
  %v3_1281c = load i8, i8* %v2_1281c, align 1
  %v4_1281c = zext i8 %v3_1281c to i32
  store i32 %v4_1281c, i32* %r3.global-to-local, align 4
  %v2_12820 = icmp ugt i8 %v3_1281c, 61
  store i1 %v2_12820, i1* %cpsr_c.global-to-local, align 1
  %v7_12820 = icmp eq i8 %v3_1281c, 62
  store i1 %v7_12820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12820, label %dec_label_pc_1282c, label %bb330

bb330:                                            ; preds = %dec_label_pc_12818
  %v3_12824 = icmp ugt i8 %v3_1281c, 57
  store i1 %v3_12824, i1* %cpsr_c.global-to-local, align 1
  %v8_12824 = icmp eq i8 %v3_1281c, 58
  store i1 %v8_12824, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_12824, label %dec_label_pc_1282c, label %dec_label_pc_127f8

dec_label_pc_1282c:                               ; preds = %dec_label_pc_12818, %bb330, %dec_label_pc_12808, %dec_label_pc_12800, %dec_label_pc_127f8
  %v1_1282c = add i32 %v0_1282c, 1
  store i32 %v1_1282c, i32* @r7, align 4
  %v2_12830 = icmp eq i32 %v1_1282c, -1
  store i1 %v2_12830, i1* %cpsr_c.global-to-local, align 1
  %v7_12830 = icmp eq i32 %v0_1282c, -2
  store i1 %v7_12830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12830, label %dec_label_pc_122b4thread-pre-split, label %dec_label_pc_12838

dec_label_pc_12838:                               ; preds = %dec_label_pc_1282c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12838 = icmp eq i32 %v1_1282c, 0
  store i1 %v2_12838, i1* %cpsr_z.global-to-local, align 1
  %tmp331 = icmp slt i32 %v1_1282c, 1
  br i1 %tmp331, label %dec_label_pc_12444, label %dec_label_pc_12840

dec_label_pc_12840:                               ; preds = %dec_label_pc_12838
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_12844 = call i32 @function_12f50(i32 23)
  store i32 %v2_126e4, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r0.global-to-local, align 4
  %v3_12854 = call i32 @function_12e6c(i32 23, i32* nonnull %stack_var_-56)
  store i32 %v3_12854, i32* %r0.global-to-local, align 4
  %v3_12858 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_12858, i32* %r2.global-to-local, align 4
  store i32 %v3_12854, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12864 = load i32, i32* @r5, align 4
  %v1_12864 = add i32 %v0_12864, 4
  %v2_12864 = inttoptr i32 %v1_12864 to i32*
  %v3_12864 = load i32, i32* %v2_12864, align 4
  store i32 %v3_12864, i32* %r0.global-to-local, align 4
  %v4_12868 = inttoptr i32 %v3_12854 to i32*
  %v5_12868 = call i32 @function_14aa0(i32 %v3_12864, i32* %v4_12868, i32 %v3_12858, i32 16384)
  store i32 %v5_12868, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12878 = load i32, i32* @r5, align 4
  %v1_12878 = add i32 %v0_12878, 4
  %v2_12878 = inttoptr i32 %v1_12878 to i32*
  %v3_12878 = load i32, i32* %v2_12878, align 4
  store i32 %v3_12878, i32* %r0.global-to-local, align 4
  %v5_1287c = call i32 @function_14aa0(i32 %v3_12878, i32* bitcast ([3 x i8]* @global_var_16af0.33 to i32*), i32 2, i32 16384)
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_12884 = call i32 @function_12e98(i32 23)
  store i32 %v1_12884, i32* %r0.global-to-local, align 4
  %v0_12888 = load i32, i32* @r5, align 4
  %v1_12888 = add i32 %v0_12888, 24
  %v2_12888 = inttoptr i32 %v1_12888 to i32*
  %v3_12888 = load i32, i32* %v2_12888, align 4
  store i32 %v3_12888, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_12890 = add i32 %v0_12888, 12
  %v3_12890 = inttoptr i32 %v2_12890 to i32*
  store i32 9, i32* %v3_12890, align 4
  br label %dec_label_pc_12a80

dec_label_pc_12898:                               ; preds = %dec_label_pc_12334
  %v1_12898 = add i32 %v0_12334, 24
  %v2_12898 = inttoptr i32 %v1_12898 to i32*
  %v3_12898 = load i32, i32* %v2_12898, align 4
  store i32 %v3_12898, i32* %ip.global-to-local, align 4
  %v1_1289c = add i32 %v3_12898, -1
  store i32 %v1_1289c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_128a0 = icmp eq i32 %v1_1289c, 0
  store i1 %v2_128a0, i1* %cpsr_z.global-to-local, align 1
  %v5_128a4 = icmp sgt i32 %v1_1289c, 0
  br i1 %v5_128a4, label %dec_label_pc_128cc, label %dec_label_pc_122b4thread-pre-split.thread

dec_label_pc_128ac:                               ; preds = %bb332
  %v2_128ac = icmp ugt i8 %v3_128d0, 35
  store i1 %v2_128ac, i1* %cpsr_c.global-to-local, align 1
  %v7_128ac = icmp eq i8 %v3_128d0, 36
  store i1 %v7_128ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_128ac, label %dec_label_pc_128e0, label %dec_label_pc_128b4

dec_label_pc_128b4:                               ; preds = %dec_label_pc_128ac
  %v2_128b4 = icmp ugt i8 %v3_128d0, 34
  store i1 %v2_128b4, i1* %cpsr_c.global-to-local, align 1
  %v7_128b4 = icmp eq i8 %v3_128d0, 35
  store i1 %v7_128b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_128b4, label %dec_label_pc_128e0, label %dec_label_pc_128bc

dec_label_pc_128bc:                               ; preds = %dec_label_pc_128b4
  %v2_128bc = icmp ugt i8 %v3_128d0, 36
  store i1 %v2_128bc, i1* %cpsr_c.global-to-local, align 1
  %v7_128bc = icmp eq i8 %v3_128d0, 37
  store i1 %v7_128bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_128bc, label %dec_label_pc_128e0, label %dec_label_pc_128c4

dec_label_pc_128c4:                               ; preds = %dec_label_pc_128bc
  %v1_128c4 = add i32 %v0_128e0, -1
  store i32 %v1_128c4, i32* %r0.global-to-local, align 4
  %v2_128c4 = icmp ne i32 %v0_128e0, 0
  store i1 %v2_128c4, i1* %cpsr_c.global-to-local, align 1
  %v7_128c4 = icmp eq i32 %v0_128e0, 1
  store i1 %v7_128c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_128c4, label %dec_label_pc_122b4thread-pre-split, label %dec_label_pc_128cc

dec_label_pc_128cc:                               ; preds = %dec_label_pc_12898, %dec_label_pc_128c4
  %v0_128e0 = phi i32 [ %v1_128c4, %dec_label_pc_128c4 ], [ %v1_1289c, %dec_label_pc_12898 ]
  %v2_128cc = add i32 %v0_128e0, %v0_12334
  store i32 %v2_128cc, i32* %r3.global-to-local, align 4
  %v1_128d0 = add i32 %v2_128cc, 28
  %v2_128d0 = inttoptr i32 %v1_128d0 to i8*
  %v3_128d0 = load i8, i8* %v2_128d0, align 1
  %v4_128d0 = zext i8 %v3_128d0 to i32
  store i32 %v4_128d0, i32* %r3.global-to-local, align 4
  %v2_128d4 = icmp ugt i8 %v3_128d0, 61
  store i1 %v2_128d4, i1* %cpsr_c.global-to-local, align 1
  %v7_128d4 = icmp eq i8 %v3_128d0, 62
  store i1 %v7_128d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_128d4, label %dec_label_pc_128e0, label %bb332

bb332:                                            ; preds = %dec_label_pc_128cc
  %v3_128d8 = icmp ugt i8 %v3_128d0, 57
  store i1 %v3_128d8, i1* %cpsr_c.global-to-local, align 1
  %v8_128d8 = icmp eq i8 %v3_128d0, 58
  store i1 %v8_128d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_128d8, label %dec_label_pc_128e0, label %dec_label_pc_128ac

dec_label_pc_128e0:                               ; preds = %dec_label_pc_128cc, %bb332, %dec_label_pc_128bc, %dec_label_pc_128b4, %dec_label_pc_128ac
  %v1_128e0 = add i32 %v0_128e0, 1
  store i32 %v1_128e0, i32* @r7, align 4
  %v2_128e4 = icmp eq i32 %v1_128e0, -1
  store i1 %v2_128e4, i1* %cpsr_c.global-to-local, align 1
  %v7_128e4 = icmp eq i32 %v0_128e0, -2
  store i1 %v7_128e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_128e4, label %dec_label_pc_122b4thread-pre-split, label %dec_label_pc_128ec

dec_label_pc_128ec:                               ; preds = %dec_label_pc_128e0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_128ec = icmp eq i32 %v1_128e0, 0
  store i1 %v2_128ec, i1* %cpsr_z.global-to-local, align 1
  %tmp333 = icmp slt i32 %v1_128e0, 1
  br i1 %tmp333, label %dec_label_pc_12444, label %dec_label_pc_128f4

dec_label_pc_128f4:                               ; preds = %dec_label_pc_128ec
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_128f8 = call i32 @function_12f50(i32 20)
  store i32 %v2_12798, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r0.global-to-local, align 4
  %v3_12908 = call i32 @function_12e6c(i32 20, i32* nonnull %stack_var_-48)
  store i32 %v3_12908, i32* %r0.global-to-local, align 4
  %v3_1290c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_1290c, i32* %r2.global-to-local, align 4
  store i32 %v3_12908, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12918 = load i32, i32* @r5, align 4
  %v1_12918 = add i32 %v0_12918, 4
  %v2_12918 = inttoptr i32 %v1_12918 to i32*
  %v3_12918 = load i32, i32* %v2_12918, align 4
  store i32 %v3_12918, i32* %r0.global-to-local, align 4
  %v4_1291c = inttoptr i32 %v3_12908 to i32*
  %v5_1291c = call i32 @function_14aa0(i32 %v3_12918, i32* %v4_1291c, i32 %v3_1290c, i32 16384)
  store i32 %v5_1291c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1292c = load i32, i32* @r5, align 4
  %v1_1292c = add i32 %v0_1292c, 4
  %v2_1292c = inttoptr i32 %v1_1292c to i32*
  %v3_1292c = load i32, i32* %v2_1292c, align 4
  store i32 %v3_1292c, i32* %r0.global-to-local, align 4
  %v5_12930 = call i32 @function_14aa0(i32 %v3_1292c, i32* bitcast ([3 x i8]* @global_var_16af0.33 to i32*), i32 2, i32 16384)
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_12938 = call i32 @function_12e98(i32 20)
  store i32 %v1_12938, i32* %r0.global-to-local, align 4
  %v0_1293c = load i32, i32* @r5, align 4
  %v1_1293c = add i32 %v0_1293c, 24
  %v2_1293c = inttoptr i32 %v1_1293c to i32*
  %v3_1293c = load i32, i32* %v2_1293c, align 4
  store i32 %v3_1293c, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_12944 = add i32 %v0_1293c, 12
  %v3_12944 = inttoptr i32 %v2_12944 to i32*
  store i32 8, i32* %v3_12944, align 4
  br label %dec_label_pc_12a80

dec_label_pc_1294c:                               ; preds = %dec_label_pc_12334
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_12950 = call i32 @function_12f50(i32 26)
  store i32 %v2_126e4, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_12960 = call i32 @function_12e6c(i32 26, i32* nonnull %stack_var_-56)
  %v3_12964 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_12960, i32* %r2.global-to-local, align 4
  %v1_1296c = add i32 %v3_12964, -1
  store i32 %v1_1296c, i32* %r3.global-to-local, align 4
  %v0_12970 = load i32, i32* @sb, align 4
  store i32 %v0_12970, i32* %r0.global-to-local, align 4
  %v0_12974 = load i32, i32* @r5, align 4
  %v1_12974 = add i32 %v0_12974, 24
  %v2_12974 = inttoptr i32 %v1_12974 to i32*
  %v3_12974 = load i32, i32* %v2_12974, align 4
  store i32 %v3_12974, i32* %r1.global-to-local, align 4
  %v4_12978 = call i32 @function_13938(i32 %v0_12970, i32 %v3_12974, i32 %v3_12960, i32 %v1_1296c)
  %v3_1297c = icmp eq i32 %v4_12978, -1
  store i1 %v3_1297c, i1* %cpsr_c.global-to-local, align 1
  %v8_1297c = icmp eq i32 %v4_12978, -1
  store i1 %v8_1297c, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_12988 = call i32 @function_12e98(i32 26)
  br i1 %v3_1297c, label %dec_label_pc_12984, label %dec_label_pc_12bb8

dec_label_pc_12984:                               ; preds = %dec_label_pc_1294c
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_12990 = call i32 @function_12f50(i32 25)
  store i32 %v2_126e4, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_129a0 = call i32 @function_12e6c(i32 25, i32* nonnull %stack_var_-56)
  store i32 %v3_129a0, i32* %r0.global-to-local, align 4
  %v3_129a4 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_129a0, i32* %r2.global-to-local, align 4
  %v1_129ac = add i32 %v3_129a4, -1
  store i32 %v1_129ac, i32* %r3.global-to-local, align 4
  %v0_129b0 = load i32, i32* @r5, align 4
  %v1_129b0 = add i32 %v0_129b0, 24
  %v2_129b0 = inttoptr i32 %v1_129b0 to i32*
  %v3_129b0 = load i32, i32* %v2_129b0, align 4
  store i32 %v3_129b0, i32* %r1.global-to-local, align 4
  %v0_129b4 = load i32, i32* @sb, align 4
  store i32 %v0_129b4, i32* %r0.global-to-local, align 4
  %v4_129b8 = call i32 @function_13938(i32 %v0_129b4, i32 %v3_129b0, i32 %v3_129a0, i32 %v1_129ac)
  store i32 %v4_129b8, i32* @r7, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_129c4 = call i32 @function_12e98(i32 25)
  store i32 %v1_129c4, i32* %r0.global-to-local, align 4
  %v0_129c8 = load i32, i32* @r7, align 4
  %v2_129c8 = icmp eq i32 %v0_129c8, -1
  store i1 %v2_129c8, i1* %cpsr_c.global-to-local, align 1
  %v7_129c8 = icmp eq i32 %v0_129c8, -1
  store i1 %v7_129c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_129c8, label %dec_label_pc_122b0.loopexit, label %dec_label_pc_129d0

dec_label_pc_129d0:                               ; preds = %dec_label_pc_12984
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_129d0 = icmp eq i32 %v0_129c8, 0
  store i1 %v2_129d0, i1* %cpsr_z.global-to-local, align 1
  %tmp334 = icmp slt i32 %v0_129c8, 1
  br i1 %tmp334, label %dec_label_pc_12444, label %dec_label_pc_129d8

dec_label_pc_129d8:                               ; preds = %dec_label_pc_129d0
  %v0_129d8 = load i32, i32* @r5, align 4
  %v1_129d8 = add i32 %v0_129d8, 21
  %v2_129d8 = inttoptr i32 %v1_129d8 to i8*
  %v3_129d8 = load i8, i8* %v2_129d8, align 1
  %v4_129d8 = zext i8 %v3_129d8 to i32
  store i32 %v4_129d8, i32* %r3.global-to-local, align 4
  %v1_129dc = add i32 %v0_129d8, 20
  %v2_129dc = inttoptr i32 %v1_129dc to i8*
  %v3_129dc = load i8, i8* %v2_129dc, align 1
  %v4_129dc = zext i8 %v3_129dc to i32
  store i32 %v4_129dc, i32* %r2.global-to-local, align 4
  %v1_129e0 = add i32 %v0_129d8, 16
  %v2_129e0 = inttoptr i32 %v1_129e0 to i32*
  %v3_129e0 = load i32, i32* %v2_129e0, align 4
  store i32 %v3_129e0, i32* %r1.global-to-local, align 4
  %v4_129e4 = mul nuw nsw i32 %v4_129d8, 256
  %v5_129e4 = or i32 %v4_129dc, %v4_129e4
  store i32 %v5_129e4, i32* %r2.global-to-local, align 4
  %v1_129e8 = and i32 %v4_129dc, 128
  %v2_129e8 = icmp ne i32 %v1_129e8, 0
  store i1 %v2_129e8, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_129d8, i32* %r3.global-to-local, align 4
  store i32 %v3_129e0, i32* %stack_var_-48, align 4
  store i32 %v5_129e4, i32* %stack_var_-38, align 4
  %v1_129f8 = inttoptr i32 %v0_129d8 to i32*
  %v2_129f8 = load i32, i32* %v1_129f8, align 4
  store i32 %v2_129f8, i32* @fp, align 4
  %v0_129fc = call i32 @function_14260()
  store i32 %v0_129fc, i32* %r0.global-to-local, align 4
  %v7_12a00 = icmp eq i32 %v0_129fc, -1
  %.350 = zext i1 %v7_12a00 to i32
  store i32 %.350, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12a0c = icmp eq i32 %v0_129fc, 0
  store i1 %v2_12a0c, i1* %cpsr_z.global-to-local, align 1
  %tmp337 = icmp slt i32 %v0_129fc, 1
  br i1 %tmp337, label %bb338, label %.thread68

.thread68:                                        ; preds = %dec_label_pc_129d8
  store i32 1, i32* %sl.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12a64

bb338:                                            ; preds = %dec_label_pc_129d8
  store i32 %.350, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12a18 = icmp eq i1 %v7_12a00, false
  store i1 %v2_12a18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12a18, label %dec_label_pc_12a20, label %dec_label_pc_12a64

dec_label_pc_12a20:                               ; preds = %bb338
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_12a2c = call i32 @function_14b30(i32 2, i32 1, i32 0)
  store i32 %v3_12a2c, i32* %r0.global-to-local, align 4
  %v2_12a30 = icmp eq i32 %v3_12a2c, -1
  store i1 %v2_12a30, i1* %cpsr_c.global-to-local, align 1
  %v7_12a30 = icmp eq i32 %v3_12a2c, -1
  store i1 %v7_12a30, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_12a2c, i32* @r6, align 4
  br i1 %v7_12a30, label %dec_label_pc_12e64, label %dec_label_pc_12a3c

dec_label_pc_12a3c:                               ; preds = %dec_label_pc_12a20
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_12a40 = call i32 @function_12f50(i32 18)
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_12a48 = call i32 @function_12f50(i32 19)
  %v0_12a4c = load i32, i32* @sl, align 4
  store i32 %v0_12a4c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r0.global-to-local, align 4
  %v2_12a54 = inttoptr i32 %v0_12a4c to i32*
  %v3_12a54 = call i32 @function_12e6c(i32 18, i32* %v2_12a54)
  store i32 %v3_12a54, i32* %r0.global-to-local, align 4
  %v1_12a58 = inttoptr i32 %v3_12a54 to i8*
  %v2_12a58 = call i32 @function_10d28(i8* %v1_12a58)
  store i32 %v2_12a58, i32* %r0.global-to-local, align 4
  store i32 %v2_12a58, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_12a5c = icmp eq i32 %v2_12a58, 0
  store i1 %v3_12a5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12a5c, label %dec_label_pc_12a64, label %dec_label_pc_12d34

dec_label_pc_12a64:                               ; preds = %.thread68, %dec_label_pc_12a3c, %bb338
  %v0_12a64 = load i32, i32* @r5, align 4
  %v1_12a64 = add i32 %v0_12a64, 4
  %v2_12a64 = inttoptr i32 %v1_12a64 to i32*
  %v3_12a64 = load i32, i32* %v2_12a64, align 4
  store i32 %v3_12a64, i32* %r0.global-to-local, align 4
  %v1_12a68 = call i32 @function_14234(i32 %v3_12a64)
  store i32 %v1_12a68, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_12a74 = load i32, i32* @r5, align 4
  %v1_12a74 = add i32 %v0_12a74, 24
  %v2_12a74 = inttoptr i32 %v1_12a74 to i32*
  %v3_12a74 = load i32, i32* %v2_12a74, align 4
  store i32 %v3_12a74, i32* %ip.global-to-local, align 4
  %v2_12a78 = add i32 %v0_12a74, 4
  %v3_12a78 = inttoptr i32 %v2_12a78 to i32*
  store i32 -1, i32* %v3_12a78, align 4
  %v0_12a7c = load i32, i32* %r2.global-to-local, align 4
  %v1_12a7c = load i32, i32* @r5, align 4
  %v2_12a7c = add i32 %v1_12a7c, 12
  %v3_12a7c = inttoptr i32 %v2_12a7c to i32*
  store i32 %v0_12a7c, i32* %v3_12a7c, align 4
  br label %dec_label_pc_12a80

dec_label_pc_12a80:                               ; preds = %.thread204, %dec_label_pc_12b00, %dec_label_pc_12cd0, %dec_label_pc_12be8, %dec_label_pc_128f4, %dec_label_pc_12840, %dec_label_pc_1278c, %dec_label_pc_126d8, %dec_label_pc_12640, %dec_label_pc_124b0, %dec_label_pc_1244c, %dec_label_pc_12a64
  %v0_12a80 = load i32, i32* %ip.global-to-local, align 4
  %v1_12a80 = load i32, i32* @r7, align 4
  %v2_12a80 = sub i32 %v0_12a80, %v1_12a80
  %v3_12a80 = icmp uge i32 %v0_12a80, %v1_12a80
  store i1 %v3_12a80, i1* %cpsr_c.global-to-local, align 1
  %v4_12a80 = xor i32 %v1_12a80, %v0_12a80
  %v5_12a80 = xor i32 %v2_12a80, %v0_12a80
  %v6_12a80 = and i32 %v5_12a80, %v4_12a80
  %v7_12a80 = icmp slt i32 %v6_12a80, 0
  %v8_12a80 = icmp slt i32 %v2_12a80, 0
  %v9_12a80 = icmp eq i32 %v0_12a80, %v1_12a80
  store i1 %v9_12a80, i1* %cpsr_z.global-to-local, align 1
  %v2_12a84 = xor i1 %v8_12a80, %v7_12a80
  %v0_12a80.v1_12a80 = select i1 %v2_12a84, i32 %v0_12a80, i32 %v1_12a80
  store i32 %v0_12a80.v1_12a80, i32* %r1.global-to-local, align 4
  %v2_12a8c = sub i32 %v0_12a80, %v0_12a80.v1_12a80
  store i32 %v2_12a8c, i32* @r2, align 4
  %v1_12a90 = load i32, i32* @r5, align 4
  %v2_12a90 = add i32 %v1_12a90, 24
  %v3_12a90 = inttoptr i32 %v2_12a90 to i32*
  store i32 %v2_12a8c, i32* %v3_12a90, align 4
  %v0_12a94 = load i32, i32* @sb, align 4
  %v1_12a94 = load i32, i32* %r1.global-to-local, align 4
  %v2_12a94 = add i32 %v1_12a94, %v0_12a94
  store i32 %v2_12a94, i32* @r1, align 4
  store i32 %v0_12a94, i32* @r0, align 4
  %v3_12a9c = call i32 @function_14860(i32 %v0_12a94, i32 %v2_12a94, i32 %v2_12a8c)
  store i32 %v3_12a9c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12334

dec_label_pc_12aa4:                               ; preds = %dec_label_pc_12334
  %v1_12aa4 = add i32 %v0_12334, 24
  %v2_12aa4 = inttoptr i32 %v1_12aa4 to i32*
  %v3_12aa4 = load i32, i32* %v2_12aa4, align 4
  store i32 %v3_12aa4, i32* %ip.global-to-local, align 4
  %v1_12aa8 = add i32 %v3_12aa4, -1
  store i32 %v1_12aa8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12aac = icmp eq i32 %v1_12aa8, 0
  store i1 %v2_12aac, i1* %cpsr_z.global-to-local, align 1
  %v5_12ab0 = icmp sgt i32 %v1_12aa8, 0
  br i1 %v5_12ab0, label %dec_label_pc_12ad8, label %dec_label_pc_122b4thread-pre-split.thread

dec_label_pc_12ab8:                               ; preds = %bb341
  %v2_12ab8 = icmp ugt i8 %v3_12adc, 35
  store i1 %v2_12ab8, i1* %cpsr_c.global-to-local, align 1
  %v7_12ab8 = icmp eq i8 %v3_12adc, 36
  store i1 %v7_12ab8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12ab8, label %dec_label_pc_12aec, label %dec_label_pc_12ac0

dec_label_pc_12ac0:                               ; preds = %dec_label_pc_12ab8
  %v2_12ac0 = icmp ugt i8 %v3_12adc, 34
  store i1 %v2_12ac0, i1* %cpsr_c.global-to-local, align 1
  %v7_12ac0 = icmp eq i8 %v3_12adc, 35
  store i1 %v7_12ac0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12ac0, label %dec_label_pc_12aec, label %dec_label_pc_12ac8

dec_label_pc_12ac8:                               ; preds = %dec_label_pc_12ac0
  %v2_12ac8 = icmp ugt i8 %v3_12adc, 36
  store i1 %v2_12ac8, i1* %cpsr_c.global-to-local, align 1
  %v7_12ac8 = icmp eq i8 %v3_12adc, 37
  store i1 %v7_12ac8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12ac8, label %dec_label_pc_12aec, label %dec_label_pc_12ad0

dec_label_pc_12ad0:                               ; preds = %dec_label_pc_12ac8
  %v1_12ad0 = add i32 %v0_12aec, -1
  store i32 %v1_12ad0, i32* %r0.global-to-local, align 4
  %v2_12ad0 = icmp ne i32 %v0_12aec, 0
  store i1 %v2_12ad0, i1* %cpsr_c.global-to-local, align 1
  %v7_12ad0 = icmp eq i32 %v0_12aec, 1
  store i1 %v7_12ad0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12ad0, label %dec_label_pc_122b4thread-pre-split, label %dec_label_pc_12ad8

dec_label_pc_12ad8:                               ; preds = %dec_label_pc_12aa4, %dec_label_pc_12ad0
  %v0_12aec = phi i32 [ %v1_12ad0, %dec_label_pc_12ad0 ], [ %v1_12aa8, %dec_label_pc_12aa4 ]
  %v2_12ad8 = add i32 %v0_12aec, %v0_12334
  store i32 %v2_12ad8, i32* %r3.global-to-local, align 4
  %v1_12adc = add i32 %v2_12ad8, 28
  %v2_12adc = inttoptr i32 %v1_12adc to i8*
  %v3_12adc = load i8, i8* %v2_12adc, align 1
  %v4_12adc = zext i8 %v3_12adc to i32
  store i32 %v4_12adc, i32* %r3.global-to-local, align 4
  %v2_12ae0 = icmp ugt i8 %v3_12adc, 61
  store i1 %v2_12ae0, i1* %cpsr_c.global-to-local, align 1
  %v7_12ae0 = icmp eq i8 %v3_12adc, 62
  store i1 %v7_12ae0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12ae0, label %dec_label_pc_12aec, label %bb341

bb341:                                            ; preds = %dec_label_pc_12ad8
  %v3_12ae4 = icmp ugt i8 %v3_12adc, 57
  store i1 %v3_12ae4, i1* %cpsr_c.global-to-local, align 1
  %v8_12ae4 = icmp eq i8 %v3_12adc, 58
  store i1 %v8_12ae4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_12ae4, label %dec_label_pc_12aec, label %dec_label_pc_12ab8

dec_label_pc_12aec:                               ; preds = %dec_label_pc_12ad8, %bb341, %dec_label_pc_12ac8, %dec_label_pc_12ac0, %dec_label_pc_12ab8
  %v1_12aec = add i32 %v0_12aec, 1
  store i32 %v1_12aec, i32* @r7, align 4
  %v2_12af0 = icmp eq i32 %v1_12aec, -1
  store i1 %v2_12af0, i1* %cpsr_c.global-to-local, align 1
  %v7_12af0 = icmp eq i32 %v0_12aec, -2
  store i1 %v7_12af0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12af0, label %dec_label_pc_122b4thread-pre-split, label %dec_label_pc_12af8

dec_label_pc_12af8:                               ; preds = %dec_label_pc_12aec
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12af8 = icmp eq i32 %v1_12aec, 0
  store i1 %v2_12af8, i1* %cpsr_z.global-to-local, align 1
  %tmp342 = icmp slt i32 %v1_12aec, 1
  br i1 %tmp342, label %dec_label_pc_12444, label %dec_label_pc_12b00

dec_label_pc_12b00:                               ; preds = %dec_label_pc_12af8
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_12b04 = call i32 @function_12f50(i32 24)
  store i32 %v2_126e4, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_12b14 = call i32 @function_12e6c(i32 24, i32* nonnull %stack_var_-56)
  store i32 %v3_12b14, i32* %r0.global-to-local, align 4
  %v3_12b18 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_12b18, i32* %r2.global-to-local, align 4
  store i32 %v3_12b14, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12b24 = load i32, i32* @r5, align 4
  %v1_12b24 = add i32 %v0_12b24, 4
  %v2_12b24 = inttoptr i32 %v1_12b24 to i32*
  %v3_12b24 = load i32, i32* %v2_12b24, align 4
  store i32 %v3_12b24, i32* %r0.global-to-local, align 4
  %v4_12b28 = inttoptr i32 %v3_12b14 to i32*
  %v5_12b28 = call i32 @function_14aa0(i32 %v3_12b24, i32* %v4_12b28, i32 %v3_12b18, i32 16384)
  store i32 %v5_12b28, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12b38 = load i32, i32* @r5, align 4
  %v1_12b38 = add i32 %v0_12b38, 4
  %v2_12b38 = inttoptr i32 %v1_12b38 to i32*
  %v3_12b38 = load i32, i32* %v2_12b38, align 4
  store i32 %v3_12b38, i32* %r0.global-to-local, align 4
  %v5_12b3c = call i32 @function_14aa0(i32 %v3_12b38, i32* bitcast ([3 x i8]* @global_var_16af0.33 to i32*), i32 2, i32 16384)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_12b44 = call i32 @function_12e98(i32 24)
  store i32 %v1_12b44, i32* %r0.global-to-local, align 4
  %v0_12b48 = load i32, i32* @r5, align 4
  %v1_12b48 = add i32 %v0_12b48, 24
  %v2_12b48 = inttoptr i32 %v1_12b48 to i32*
  %v3_12b48 = load i32, i32* %v2_12b48, align 4
  store i32 %v3_12b48, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_12b50 = add i32 %v0_12b48, 12
  %v3_12b50 = inttoptr i32 %v2_12b50 to i32*
  store i32 10, i32* %v3_12b50, align 4
  br label %dec_label_pc_12a80

dec_label_pc_12b58:                               ; preds = %dec_label_pc_123c4
  store i32 ptrtoint (i32* @global_var_16da9.333 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_1237c, i32* @r0, align 4
  %v3_12b64 = call i32 @function_14850(i32 %v2_1237c, i32 ptrtoint (i32* @global_var_16da9.333 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_12b70, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_16da0.335 to i32), i32* @r1, align 4
  %v3_12b78 = call i32 @function_14850(i32 %v2_12b70, i32 ptrtoint (i32* @global_var_16da0.335 to i32), i32 9)
  store i32 %v3_12b78, i32* %r0.global-to-local, align 4
  %v0_12b7c = load i32, i32* @r5, align 4
  %v1_12b7c = add i32 %v0_12b7c, 24
  %v2_12b7c = inttoptr i32 %v1_12b7c to i32*
  %v3_12b7c = load i32, i32* %v2_12b7c, align 4
  store i32 %v3_12b7c, i32* %ip.global-to-local, align 4
  %v0_12b80 = load i32, i32* @r6, align 4
  %v1_12b80 = add i32 %v0_12b80, 2
  store i32 %v1_12b80, i32* %r2.global-to-local, align 4
  %v0_12b84 = load i32, i32* @sb, align 4
  %v2_12b84 = add i32 %v0_12b84, %v3_12b7c
  store i32 %v2_12b84, i32* %r3.global-to-local, align 4
  %v3_12b88 = icmp uge i32 %v2_12b84, %v1_12b80
  store i1 %v3_12b88, i1* %cpsr_c.global-to-local, align 1
  %v9_12b88 = icmp eq i32 %v2_12b84, %v1_12b80
  store i1 %v9_12b88, i1* %cpsr_z.global-to-local, align 1
  %v2_12b8c = xor i1 %v3_12b88, true
  %v3_12b8c = or i1 %v9_12b88, %v2_12b8c
  br i1 %v3_12b8c, label %dec_label_pc_12b58.dec_label_pc_12434.loopexit_crit_edge, label %dec_label_pc_12b90

dec_label_pc_12b58.dec_label_pc_12434.loopexit_crit_edge: ; preds = %dec_label_pc_12b58
  %v0_12434.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_12434

dec_label_pc_12b90:                               ; preds = %dec_label_pc_12b58
  %v0_12b90 = load i32, i32* @r4, align 4
  %v1_12b90 = add i32 %v0_12b90, 1
  %v2_12b90 = inttoptr i32 %v1_12b90 to i8*
  %v3_12b90 = load i8, i8* %v2_12b90, align 1
  %v4_12b90 = zext i8 %v3_12b90 to i32
  store i32 %v4_12b90, i32* %r3.global-to-local, align 4
  %v2_12b94 = icmp ugt i8 %v3_12b90, 30
  store i1 %v2_12b94, i1* %cpsr_c.global-to-local, align 1
  %v7_12b94 = icmp eq i8 %v3_12b90, 31
  store i1 %v7_12b94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12b94, label %dec_label_pc_12c84, label %dec_label_pc_12b9c

dec_label_pc_12b9c:                               ; preds = %dec_label_pc_12b90
  %v1_12b9c = add i32 %v0_12b90, -1
  %v2_12b9c = inttoptr i32 %v1_12b9c to i8*
  %v3_12b9c = load i8, i8* %v2_12b9c, align 1
  %v4_12b9c = zext i8 %v3_12b9c to i32
  store i32 %v4_12b9c, i32* %r3.global-to-local, align 4
  %v2_12ba0 = icmp ugt i8 %v3_12b9c, -4
  store i1 %v2_12ba0, i1* %cpsr_c.global-to-local, align 1
  %v7_12ba0 = icmp eq i8 %v3_12b9c, -3
  store i1 %v7_12ba0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12ba0, label %bb343, label %dec_label_pc_12bac

bb343:                                            ; preds = %dec_label_pc_12b9c
  %v1_12ba4 = load i32, i32* @r8, align 4
  %v2_12ba4 = trunc i32 %v1_12ba4 to i8
  store i8 %v2_12ba4, i8* %v2_12b9c, align 1
  %v0_12ba8.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_12ba8.pr, label %dec_label_pc_123d8, label %.dec_label_pc_12bac_crit_edge

.dec_label_pc_12bac_crit_edge:                    ; preds = %bb343
  %v0_12bac.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_12bac

dec_label_pc_12bac:                               ; preds = %.dec_label_pc_12bac_crit_edge, %dec_label_pc_12b9c
  %v0_12bac = phi i32 [ %v0_12bac.pre, %.dec_label_pc_12bac_crit_edge ], [ %v4_12b9c, %dec_label_pc_12b9c ]
  %v2_12bac = icmp ugt i32 %v0_12bac, 250
  store i1 %v2_12bac, i1* %cpsr_c.global-to-local, align 1
  %v7_12bac = icmp eq i32 %v0_12bac, 251
  store i1 %v7_12bac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12bac, label %bb344, label %dec_label_pc_123d8

bb344:                                            ; preds = %dec_label_pc_12bac
  %v1_12bb0 = load i32, i32* %sl.global-to-local, align 4
  %v2_12bb0 = trunc i32 %v1_12bb0 to i8
  %v3_12bb0 = load i32, i32* @r4, align 4
  %v4_12bb0 = add i32 %v3_12bb0, -1
  %v5_12bb0 = inttoptr i32 %v4_12bb0 to i8*
  store i8 %v2_12bb0, i8* %v5_12bb0, align 1
  br label %dec_label_pc_123d8

dec_label_pc_12bb8:                               ; preds = %dec_label_pc_1294c
  store i32 %v1_12988, i32* %r0.global-to-local, align 4
  %v0_12bc0 = load i32, i32* @r5, align 4
  %v1_12bc0 = add i32 %v0_12bc0, 4
  %v2_12bc0 = inttoptr i32 %v1_12bc0 to i32*
  %v3_12bc0 = load i32, i32* %v2_12bc0, align 4
  store i32 %v3_12bc0, i32* %r0.global-to-local, align 4
  %v1_12bc4 = call i32 @function_14234(i32 %v3_12bc0)
  store i32 %v1_12bc4, i32* %r0.global-to-local, align 4
  %v0_12bc8 = load i32, i32* @r5, align 4
  %v1_12bc8 = add i32 %v0_12bc8, 284
  %v2_12bc8 = inttoptr i32 %v1_12bc8 to i8*
  %v3_12bc8 = load i8, i8* %v2_12bc8, align 1
  %v4_12bc8 = zext i8 %v3_12bc8 to i32
  %v1_12bcc = add nuw nsw i32 %v4_12bc8, 1
  %v1_12bd0 = urem i32 %v1_12bcc, 256
  store i32 %v1_12bd0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_12bd8 = icmp ugt i32 %v1_12bd0, 9
  store i1 %v2_12bd8, i1* %cpsr_c.global-to-local, align 1
  %v7_12bd8 = icmp eq i32 %v1_12bd0, 10
  store i1 %v7_12bd8, i1* %cpsr_z.global-to-local, align 1
  %v2_12bdc = add i32 %v0_12bc8, 4
  %v3_12bdc = inttoptr i32 %v2_12bdc to i32*
  store i32 -1, i32* %v3_12bdc, align 4
  %v0_12be0 = load i32, i32* %r3.global-to-local, align 4
  %v1_12be0 = trunc i32 %v0_12be0 to i8
  %v2_12be0 = load i32, i32* @r5, align 4
  %v3_12be0 = add i32 %v2_12be0, 284
  %v4_12be0 = inttoptr i32 %v3_12be0 to i8*
  store i8 %v1_12be0, i8* %v4_12be0, align 1
  %v0_12be4 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_12be8 = load i32, i32* @r5, align 4
  br i1 %v0_12be4, label %dec_label_pc_12be8, label %dec_label_pc_12cd0

dec_label_pc_12be8:                               ; preds = %dec_label_pc_12bb8
  %v1_12be8 = add i32 %v0_12be8, 24
  %v2_12be8 = inttoptr i32 %v1_12be8 to i32*
  %v3_12be8 = load i32, i32* %v2_12be8, align 4
  store i32 %v3_12be8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 -1, i32* @r7, align 4
  %v3_12bf8 = add i32 %v0_12be8, 284
  %v4_12bf8 = inttoptr i32 %v3_12bf8 to i8*
  store i8 0, i8* %v4_12bf8, align 1
  %v0_12bfc = load i32, i32* %r1.global-to-local, align 4
  %v1_12bfc = load i32, i32* @r5, align 4
  %v2_12bfc = add i32 %v1_12bfc, 12
  %v3_12bfc = inttoptr i32 %v2_12bfc to i32*
  store i32 %v0_12bfc, i32* %v3_12bfc, align 4
  br label %dec_label_pc_12a80

dec_label_pc_12c04:                               ; preds = %dec_label_pc_122cc
  br i1 %v2_122f4, label %dec_label_pc_12d24, label %dec_label_pc_12c08

dec_label_pc_12c08:                               ; preds = %dec_label_pc_12c04
  %v3_12c08 = icmp eq i32 %v5_122f0, -1
  store i1 %v3_12c08, i1* %cpsr_c.global-to-local, align 1
  %v8_12c08 = icmp eq i32 %v5_122f0, -1
  store i1 %v8_12c08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12c08, label %dec_label_pc_12c10, label %dec_label_pc_1231c

dec_label_pc_12c10:                               ; preds = %dec_label_pc_12c08
  store i32 %stack_var_-1868.0, i32* %r2.global-to-local, align 4
  %v2_12c14 = load i32, i32* %v2_122d4, align 4
  store i32 %v2_12c14, i32* %r3.global-to-local, align 4
  %v2_12c18 = icmp ugt i32 %v2_12c14, 10
  store i1 %v2_12c18, i1* %cpsr_c.global-to-local, align 1
  %v7_12c18 = icmp eq i32 %v2_12c14, 11
  store i1 %v7_12c18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12c18, label %dec_label_pc_1214c, label %dec_label_pc_12c20

dec_label_pc_12c20:                               ; preds = %dec_label_pc_12c10, %dec_label_pc_12d24
  %v0_12c20 = load i32, i32* @r5, align 4
  %v1_12c20 = add i32 %v0_12c20, 4
  %v2_12c20 = inttoptr i32 %v1_12c20 to i32*
  %v3_12c20 = load i32, i32* %v2_12c20, align 4
  store i32 %v3_12c20, i32* %r0.global-to-local, align 4
  %v1_12c24 = call i32 @function_14234(i32 %v3_12c20)
  store i32 %v1_12c24, i32* %r0.global-to-local, align 4
  %v0_12c28 = load i32, i32* @r5, align 4
  %v1_12c28 = add i32 %v0_12c28, 284
  %v2_12c28 = inttoptr i32 %v1_12c28 to i8*
  %v3_12c28 = load i8, i8* %v2_12c28, align 1
  %v4_12c28 = zext i8 %v3_12c28 to i32
  %v1_12c2c = add nuw nsw i32 %v4_12c28, 1
  %v1_12c30 = urem i32 %v1_12c2c, 256
  store i32 %v1_12c30, i32* %r3.global-to-local, align 4
  %v2_12c34 = icmp ugt i32 %v1_12c30, 8
  store i1 %v2_12c34, i1* %cpsr_c.global-to-local, align 1
  %v7_12c34 = icmp eq i32 %v1_12c30, 9
  store i1 %v7_12c34, i1* %cpsr_z.global-to-local, align 1
  %v1_12c38 = trunc i32 %v1_12c2c to i8
  store i8 %v1_12c38, i8* %v2_12c28, align 1
  store i32 -1, i32* @r4, align 4
  %v0_12c40 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_12c40 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_12c40 = xor i1 %v1_12c40, true
  %v3_12c40 = and i1 %v0_12c40, %v2_12c40
  br i1 %v3_12c40, label %bb345, label %.thread217

.thread217:                                       ; preds = %dec_label_pc_12c20
  %v1_12c44213218 = load i32, i32* @r5, align 4
  %v2_12c44214219 = add i32 %v1_12c44213218, 4
  %v3_12c44215220 = inttoptr i32 %v2_12c44214219 to i32*
  store i32 -1, i32* %v3_12c44215220, align 4
  br label %bb346

bb345:                                            ; preds = %dec_label_pc_12c20
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12c44209 = load i32, i32* @r5, align 4
  %v2_12c44210 = add i32 %v1_12c44209, 4
  %v3_12c44211 = inttoptr i32 %v2_12c44210 to i32*
  store i32 -1, i32* %v3_12c44211, align 4
  %v4_12c48 = load i32, i32* %r3.global-to-local, align 4
  %v5_12c48 = load i32, i32* @r5, align 4
  %v6_12c48 = add i32 %v5_12c48, 12
  %v7_12c48 = inttoptr i32 %v6_12c48 to i32*
  store i32 %v4_12c48, i32* %v7_12c48, align 4
  %v4_12c4c = load i32, i32* %r3.global-to-local, align 4
  %v5_12c4c = trunc i32 %v4_12c4c to i8
  %v6_12c4c = load i32, i32* @r5, align 4
  %v7_12c4c = add i32 %v6_12c4c, 284
  %v8_12c4c = inttoptr i32 %v7_12c4c to i8*
  store i8 %v5_12c4c, i8* %v8_12c4c, align 1
  %v0_12c50.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_12c50.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %bb346

bb346:                                            ; preds = %.thread217, %bb345
  %v1_12c50 = phi i1 [ %v1_12c50.pre, %bb345 ], [ %v1_12c40, %.thread217 ]
  %v0_12c50 = phi i1 [ %v0_12c50.pre, %bb345 ], [ %v0_12c40, %.thread217 ]
  %v2_12c50 = xor i1 %v1_12c50, true
  %v3_12c50 = and i1 %v0_12c50, %v2_12c50
  br i1 %v3_12c50, label %dec_label_pc_1214c, label %dec_label_pc_12c54

dec_label_pc_12c54:                               ; preds = %bb346
  %v0_12c54 = load i32, i32* @r5, align 4
  store i32 %v0_12c54, i32* @r0, align 4
  %v0_12c58 = call i32 @function_11288()
  store i32 %v0_12c58, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1214c

dec_label_pc_12c60:                               ; preds = %dec_label_pc_12610, %dec_label_pc_125ec, %dec_label_pc_1262c
  store i32 %v3_125ec, i32* %r1.global-to-local, align 4
  %v0_12c64 = load i32, i32* @sb, align 4
  store i32 %v0_12c64, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_16d3c.337 to i32), i32* %r2.global-to-local, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v5_12c70 = call i32 @function_13938(i32 %v0_12c64, i32 %v3_125ec, i32 ptrtoint ([8 x i8]* @global_var_16d3c.337 to i32), i32 7)
  store i32 %v5_12c70, i32* %r0.global-to-local, align 4
  %v3_12c74 = icmp eq i32 %v5_12c70, -1
  store i1 %v3_12c74, i1* %cpsr_c.global-to-local, align 1
  %v8_12c74 = icmp eq i32 %v5_12c70, -1
  store i1 %v8_12c74, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_12c70, i32* @r7, align 4
  br i1 %v3_12c74, label %dec_label_pc_122b0.loopexit, label %dec_label_pc_12638

dec_label_pc_12c84:                               ; preds = %dec_label_pc_12b90
  store i32 %v2_1237c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_12c90 = add i32 %v0_12b7c, 4
  %v2_12c90 = inttoptr i32 %v1_12c90 to i32*
  %v3_12c90 = load i32, i32* %v2_12c90, align 4
  store i32 %v3_12c90, i32* %r0.global-to-local, align 4
  %v5_12c94 = call i32 @function_14aa0(i32 %v3_12c90, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_12c94, i32* %r0.global-to-local, align 4
  store i32 %v2_12b68, i32* %r1.global-to-local, align 4
  %v0_12c9c = load i32, i32* @r5, align 4
  %v1_12c9c = add i32 %v0_12c9c, 4
  %v2_12c9c = inttoptr i32 %v1_12c9c to i32*
  %v3_12c9c = load i32, i32* %v2_12c9c, align 4
  store i32 %v3_12c9c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12414

dec_label_pc_12cac:                               ; preds = %dec_label_pc_122bc
  store i32 %.pre, i32* @r0, align 4
  %v1_12cb4 = add i32 %v0_12cac, 92
  store i32 %v1_12cb4, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_12cbc = call i32 @function_14860(i32 %.pre, i32 %v1_12cb4, i32 192)
  store i32 %v3_12cbc, i32* %r0.global-to-local, align 4
  %v0_12cc0 = load i32, i32* @r5, align 4
  %v1_12cc0 = add i32 %v0_12cc0, 24
  %v2_12cc0 = inttoptr i32 %v1_12cc0 to i32*
  %v3_12cc0 = load i32, i32* %v2_12cc0, align 4
  store i32 %v3_12cc0, i32* %r3.global-to-local, align 4
  %v1_12cc4 = add i32 %v3_12cc0, -64
  store i32 %v1_12cc4, i32* %ip.global-to-local, align 4
  store i32 %v1_12cc4, i32* %v2_12cc0, align 4
  br label %dec_label_pc_122cc

dec_label_pc_12cd0:                               ; preds = %dec_label_pc_12bb8
  store i32 %v0_12be8, i32* @r0, align 4
  %v0_12cd4 = call i32 @function_11288()
  store i32 %v0_12cd4, i32* %r0.global-to-local, align 4
  %v0_12cd8 = load i32, i32* @r5, align 4
  %v1_12cd8 = add i32 %v0_12cd8, 24
  %v2_12cd8 = inttoptr i32 %v1_12cd8 to i32*
  %v3_12cd8 = load i32, i32* %v2_12cd8, align 4
  store i32 %v3_12cd8, i32* %ip.global-to-local, align 4
  %v0_12cdc = load i32, i32* @r4, align 4
  store i32 %v0_12cdc, i32* @r7, align 4
  br label %dec_label_pc_12a80

dec_label_pc_12ce4:                               ; preds = %dec_label_pc_120a4, %dec_label_pc_12088
  %v0_12ce4 = load i32, i32* @r7, align 4
  %v1_12ce4 = load i32, i32* @r4, align 4
  %v2_12ce4 = add i32 %v1_12ce4, 12
  %v3_12ce4 = inttoptr i32 %v2_12ce4 to i32*
  store i32 %v0_12ce4, i32* %v3_12ce4, align 4
  %v0_12ce8 = load i32, i32* @r7, align 4
  %v1_12ce8 = trunc i32 %v0_12ce8 to i8
  %v2_12ce8 = load i32, i32* @r4, align 4
  %v3_12ce8 = add i32 %v2_12ce8, 284
  %v4_12ce8 = inttoptr i32 %v3_12ce8 to i8*
  store i8 %v1_12ce8, i8* %v4_12ce8, align 1
  br label %bb309

dec_label_pc_12cf0:                               ; preds = %dec_label_pc_12230, %dec_label_pc_121e8
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12cf4

dec_label_pc_12cf4:                               ; preds = %dec_label_pc_12258, %dec_label_pc_12cf0
  %v0_12cfc = phi i32 [ 0, %dec_label_pc_12cf0 ], [ %v0_12238, %dec_label_pc_12258 ]
  %v0_12cf4 = load i32, i32* @r5, align 4
  %v1_12cf4 = add i32 %v0_12cf4, 4
  %v2_12cf4 = inttoptr i32 %v1_12cf4 to i32*
  %v3_12cf4 = load i32, i32* %v2_12cf4, align 4
  store i32 %v3_12cf4, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_12cfc = inttoptr i32 %v0_12cf4 to i32*
  store i32 %v0_12cfc, i32* %v2_12cfc, align 4
  %v0_12d00 = load i32, i32* %ip.global-to-local, align 4
  %v1_12d00 = load i32, i32* @r5, align 4
  %v2_12d00 = add i32 %v1_12d00, 24
  %v3_12d00 = inttoptr i32 %v2_12d00 to i32*
  store i32 %v0_12d00, i32* %v3_12d00, align 4
  %v0_12128.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12128

dec_label_pc_12d08:                               ; preds = %dec_label_pc_121a8
  %v0_12d08 = load i32, i32* @r5, align 4
  %v1_12d08 = add i32 %v0_12d08, 4
  %v2_12d08 = inttoptr i32 %v1_12d08 to i32*
  %v3_12d08 = load i32, i32* %v2_12d08, align 4
  store i32 %v3_12d08, i32* %r0.global-to-local, align 4
  %v1_12d0c = call i32 @function_14234(i32 %v3_12d08)
  store i32 %v1_12d0c, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_12d14 = load i32, i32* @r6, align 4
  %v1_12d14 = load i32, i32* @r5, align 4
  %v2_12d14 = add i32 %v1_12d14, 12
  %v3_12d14 = inttoptr i32 %v2_12d14 to i32*
  store i32 %v0_12d14, i32* %v3_12d14, align 4
  %v0_12d18 = load i32, i32* %r4.global-to-local, align 4
  %v1_12d18 = load i32, i32* @r5, align 4
  %v2_12d18 = add i32 %v1_12d18, 4
  %v3_12d18 = inttoptr i32 %v2_12d18 to i32*
  store i32 %v0_12d18, i32* %v3_12d18, align 4
  %v0_12d1c = load i32, i32* @r6, align 4
  %v1_12d1c = trunc i32 %v0_12d1c to i8
  %v2_12d1c = load i32, i32* @r5, align 4
  %v3_12d1c = add i32 %v2_12d1c, 284
  %v4_12d1c = inttoptr i32 %v3_12d1c to i8*
  store i8 %v1_12d1c, i8* %v4_12d1c, align 1
  br label %dec_label_pc_1214c

dec_label_pc_12d24:                               ; preds = %dec_label_pc_12c04
  store i32 %stack_var_-1868.0, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 104, i32* %v2_122d4, align 4
  br label %dec_label_pc_12c20

dec_label_pc_12d34:                               ; preds = %dec_label_pc_12a3c
  store i32 2, i32* @r5, align 4
  %v1_12d38 = add i32 %v2_12a58, 4
  %v2_12d38 = inttoptr i32 %v1_12d38 to i32*
  %v3_12d38 = load i32, i32* %v2_12d38, align 4
  store i32 %v3_12d38, i32* @r4, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v0_12d44 = call i32 @function_10a44()
  store i32 %v0_12d44, i32* %r0.global-to-local, align 4
  %v0_12d48 = load i32, i32* @r8, align 4
  %v1_12d48 = inttoptr i32 %v0_12d48 to i8*
  %v2_12d48 = load i8, i8* %v1_12d48, align 1
  %v3_12d48 = zext i8 %v2_12d48 to i32
  store i32 %v3_12d48, i32* %r1.global-to-local, align 4
  %v2_12d4c = call i32 @function_13f90(i32 %v0_12d44, i32 %v3_12d48)
  store i32 %v2_12d4c, i32* %r0.global-to-local, align 4
  %v0_12d50 = load i32, i32* @r4, align 4
  %v2_12d50 = and i32 %v2_12d4c, 1073741824
  %v3_12d50 = icmp ne i32 %v2_12d50, 0
  store i1 %v3_12d50, i1* %cpsr_c.global-to-local, align 1
  %v4_12d50 = mul i32 %v2_12d4c, 4
  %v5_12d50 = add i32 %v0_12d50, %v4_12d50
  %v6_12d50 = inttoptr i32 %v5_12d50 to i32*
  %v7_12d50 = load i32, i32* %v6_12d50, align 4
  store i32 %v7_12d50, i32* %r3.global-to-local, align 4
  %v0_12d54 = load i32, i32* @sl, align 4
  store i32 %v0_12d54, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r0.global-to-local, align 4
  %v2_12d60 = inttoptr i32 %v0_12d54 to i32*
  %v3_12d60 = call i32 @function_12e6c(i32 19, i32* %v2_12d60)
  %v4_12d60 = inttoptr i32 %v3_12d60 to i8*
  store i32 %v3_12d60, i32* %r0.global-to-local, align 4
  %v2_12d64 = add i32 %v3_12d60, 1
  %v3_12d64 = inttoptr i32 %v2_12d64 to i8*
  %v4_12d64 = load i8, i8* %v3_12d64, align 1
  %v5_12d64 = zext i8 %v4_12d64 to i32
  store i32 %v5_12d64, i32* %r2.global-to-local, align 4
  %v3_12d68 = load i8, i8* %v4_12d60, align 1
  %v4_12d68 = zext i8 %v3_12d68 to i32
  %v4_12d6c = mul nuw nsw i32 %v5_12d64, 256
  %v5_12d6c = or i32 %v4_12d68, %v4_12d6c
  store i32 %v5_12d6c, i32* %r3.global-to-local, align 4
  %v1_12d70 = and i32 %v4_12d68, 128
  %v2_12d70 = icmp ne i32 %v1_12d70, 0
  store i1 %v2_12d70, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_12d64, i32* %r1.global-to-local, align 4
  %v0_12d74 = load i32, i32* @r8, align 4
  store i32 %v0_12d74, i32* %r0.global-to-local, align 4
  %v6_12d80 = call i32 @function_10d04(i32 %v0_12d74)
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_12d88 = call i32 @function_12e98(i32 18)
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_12d90 = call i32 @function_12e98(i32 19)
  %v0_12d98 = load i32, i32* @r6, align 4
  store i32 %v0_12d98, i32* %r0.global-to-local, align 4
  %v2_12d9c = ptrtoint i32* %stack_var_-92 to i32
  store i32 %v2_12d9c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_12da4 = bitcast i32* %stack_var_-92 to %sockaddr*
  %v4_12da4 = call i32 @function_1498c(i32 %v0_12d98, %sockaddr* %v3_12da4, i32 16)
  store i32 %v4_12da4, i32* %r0.global-to-local, align 4
  %v3_12da8 = icmp eq i32 %v4_12da4, -1
  store i1 %v3_12da8, i1* %cpsr_c.global-to-local, align 1
  %v8_12da8 = icmp eq i32 %v4_12da4, -1
  store i1 %v8_12da8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12da8, label %dec_label_pc_12db0, label %dec_label_pc_12dc0

dec_label_pc_12db0:                               ; preds = %dec_label_pc_12d34
  %v0_12db0 = load i32, i32* @r6, align 4
  store i32 %v0_12db0, i32* %r0.global-to-local, align 4
  %v1_12db4 = call i32 @function_14234(i32 %v0_12db0)
  %v0_12db8 = load i32, i32* @sl, align 4
  store i32 %v0_12db8, i32* %r0.global-to-local, align 4
  %v1_12dbc = call i32 @function_155d0(i32 %v0_12db8)
  store i32 %v1_12dbc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12dc0

dec_label_pc_12dc0:                               ; preds = %dec_label_pc_12d34, %dec_label_pc_12db0
  store i32 %v2_126e4, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12dd0 = load i32, i32* @r6, align 4
  store i32 %v0_12dd0, i32* %r0.global-to-local, align 4
  %v0_12dd4 = load i32, i32* @sl, align 4
  store i32 %v0_12dd4, i32* %stack_var_-56, align 4
  %v6_12dd8 = call i32 @function_14aa0(i32 %v0_12dd0, i32* nonnull %stack_var_-56, i32 1, i32 16384)
  store i32 %v2_12798, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12dec = load i32, i32* @r6, align 4
  store i32 %v0_12dec, i32* %r0.global-to-local, align 4
  %v5_12df0 = call i32 @function_14aa0(i32 %v0_12dec, i32* nonnull %stack_var_-48, i32 4, i32 16384)
  %v0_12df8 = load i32, i32* @r5, align 4
  store i32 %v0_12df8, i32* %r2.global-to-local, align 4
  %v2_12dfc = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_12dfc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12e04 = load i32, i32* @r6, align 4
  store i32 %v0_12e04, i32* %r0.global-to-local, align 4
  %v5_12e08 = call i32 @function_14aa0(i32 %v0_12e04, i32* nonnull %stack_var_-38, i32 %v0_12df8, i32 16384)
  %v0_12e0c = load i32, i32* @fp, align 4
  %v1_12e0c = add i32 %v0_12e0c, 12
  store i32 %v1_12e0c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12e18 = load i32, i32* @r6, align 4
  store i32 %v0_12e18, i32* %r0.global-to-local, align 4
  %v4_12e1c = inttoptr i32 %v1_12e0c to i32*
  %v5_12e1c = call i32 @function_14aa0(i32 %v0_12e18, i32* %v4_12e1c, i32 1, i32 16384)
  store i32 %v5_12e1c, i32* %r0.global-to-local, align 4
  %v0_12e20 = load i32, i32* @fp, align 4
  %v1_12e20 = inttoptr i32 %v0_12e20 to i32*
  %v2_12e20 = load i32, i32* %v1_12e20, align 4
  store i32 %v2_12e20, i32* %r1.global-to-local, align 4
  %v1_12e24 = add i32 %v0_12e20, 12
  %v2_12e24 = inttoptr i32 %v1_12e24 to i8*
  %v3_12e24 = load i8, i8* %v2_12e24, align 1
  %v4_12e24 = zext i8 %v3_12e24 to i32
  store i32 %v4_12e24, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12e2c = load i32, i32* @r6, align 4
  store i32 %v0_12e2c, i32* %r0.global-to-local, align 4
  %v4_12e30 = inttoptr i32 %v2_12e20 to i32*
  %v5_12e30 = call i32 @function_14aa0(i32 %v0_12e2c, i32* %v4_12e30, i32 %v4_12e24, i32 16384)
  %v0_12e34 = load i32, i32* @fp, align 4
  %v1_12e34 = add i32 %v0_12e34, 13
  store i32 %v1_12e34, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12e40 = load i32, i32* @r6, align 4
  store i32 %v0_12e40, i32* %r0.global-to-local, align 4
  %v4_12e44 = inttoptr i32 %v1_12e34 to i32*
  %v5_12e44 = call i32 @function_14aa0(i32 %v0_12e40, i32* %v4_12e44, i32 1, i32 16384)
  %v0_12e48 = load i32, i32* @r6, align 4
  store i32 %v0_12e48, i32* %r0.global-to-local, align 4
  %v0_12e4c = load i32, i32* @fp, align 4
  %v1_12e4c = add i32 %v0_12e4c, 13
  %v2_12e4c = inttoptr i32 %v1_12e4c to i8*
  %v3_12e4c = load i8, i8* %v2_12e4c, align 1
  %v4_12e4c = zext i8 %v3_12e4c to i32
  store i32 %v4_12e4c, i32* %r2.global-to-local, align 4
  %v1_12e50 = add i32 %v0_12e4c, 4
  %v2_12e50 = inttoptr i32 %v1_12e50 to i32*
  %v3_12e50 = load i32, i32* %v2_12e50, align 4
  store i32 %v3_12e50, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_12e58 = inttoptr i32 %v3_12e50 to i32*
  %v5_12e58 = call i32 @function_14aa0(i32 %v0_12e48, i32* %v4_12e58, i32 %v4_12e4c, i32 16384)
  %v0_12e5c = load i32, i32* @r6, align 4
  store i32 %v0_12e5c, i32* %r0.global-to-local, align 4
  %v1_12e60 = call i32 @function_14234(i32 %v0_12e5c)
  store i32 %v1_12e60, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12e64

dec_label_pc_12e64:                               ; preds = %dec_label_pc_12a20, %dec_label_pc_12dc0
  %v0_12e64 = load i32, i32* @sl, align 4
  store i32 %v0_12e64, i32* %r0.global-to-local, align 4
  %v1_12e68 = call i32 @function_155d0(i32 %v0_12e64)
  store i32 %v1_12e68, i32* %r0.global-to-local, align 4
  ret i32 %v1_12e68

; uselistorder directives
  uselistorder i32 %v4_12d68, { 1, 0 }
  uselistorder i32 %v5_12d64, { 1, 0, 2 }
  uselistorder i32 %v2_12d4c, { 1, 0, 2 }
  uselistorder i32 %v3_12c9c, { 1, 0 }
  uselistorder i32 %v5_12c70, { 2, 0, 3, 4, 1 }
  uselistorder i1 %v1_12c40, { 1, 0 }
  uselistorder i32 %v1_12c30, { 2, 1, 0 }
  uselistorder i32 %v1_12c2c, { 1, 0 }
  uselistorder i32 %v0_12be8, { 1, 0, 2 }
  uselistorder i32 %v1_12bd0, { 2, 1, 0 }
  uselistorder i32 %v0_12b7c, { 1, 2, 0 }
  uselistorder i1 %v7_12af0, { 1, 0 }
  uselistorder i32 %v1_12aec, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_12ae4, { 1, 0 }
  uselistorder i8 %v3_12adc, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12aec, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_12ac8, { 1, 0 }
  uselistorder i1 %v7_12ac0, { 1, 0 }
  uselistorder i1 %v7_12ab8, { 1, 0 }
  uselistorder i32 %v0_12a94, { 1, 2, 0 }
  uselistorder i32 %v2_12a80, { 1, 0 }
  uselistorder i32 %v1_12a80, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_12a80, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i1 %v7_12a30, { 1, 0 }
  uselistorder i32 %v3_12a2c, { 1, 0, 2, 3 }
  uselistorder i1 %v2_12a18, { 1, 0 }
  uselistorder i32 %.350, { 1, 0 }
  uselistorder i1 %v7_12a00, { 1, 0 }
  uselistorder i32 %v0_129fc, { 2, 1, 0, 3 }
  uselistorder i32 %v4_129dc, { 1, 0, 2 }
  uselistorder i32 %v4_129d8, { 1, 0, 2 }
  uselistorder i1 %v7_129c8, { 1, 0 }
  uselistorder i32 %v0_129c8, { 3, 2, 0, 4, 1 }
  uselistorder i1 %v7_128e4, { 1, 0 }
  uselistorder i32 %v1_128e0, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_128d8, { 1, 0 }
  uselistorder i8 %v3_128d0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_128e0, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_128bc, { 1, 0 }
  uselistorder i1 %v7_128b4, { 1, 0 }
  uselistorder i1 %v7_128ac, { 1, 0 }
  uselistorder i1 %v7_12830, { 1, 0 }
  uselistorder i32 %v1_1282c, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_12824, { 1, 0 }
  uselistorder i8 %v3_1281c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1282c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_12808, { 1, 0 }
  uselistorder i1 %v7_12800, { 1, 0 }
  uselistorder i1 %v7_127f8, { 1, 0 }
  uselistorder i1 %v7_1277c, { 1, 0 }
  uselistorder i32 %v1_12778, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_12770, { 1, 0 }
  uselistorder i8 %v3_12768, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12778, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_12754, { 1, 0 }
  uselistorder i1 %v7_1274c, { 1, 0 }
  uselistorder i1 %v7_12744, { 1, 0 }
  uselistorder i1 %v7_126c8, { 1, 0 }
  uselistorder i32 %v1_126c4, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_126bc, { 1, 0 }
  uselistorder i8 %v3_126b4, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_126c4, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_126a0, { 1, 0 }
  uselistorder i1 %v7_12698, { 1, 0 }
  uselistorder i1 %v7_12690, { 1, 0 }
  uselistorder i32 %v0_12638, { 2, 1, 0 }
  uselistorder i1 %v7_12630, { 1, 0 }
  uselistorder i1 %v8_12624, { 1, 0 }
  uselistorder i8 %v3_1261c, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_1262c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_12608, { 1, 0 }
  uselistorder i1 %v7_12600, { 1, 0 }
  uselistorder i32 %v3_125ec, { 1, 0, 2, 3 }
  uselistorder i32 %v0_124a8, { 2, 1, 0 }
  uselistorder i1 %v7_124a0, { 1, 0 }
  uselistorder i1 %v8_12494, { 1, 0 }
  uselistorder i8 %v3_1248c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1249c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_12478, { 1, 0 }
  uselistorder i1 %v7_12470, { 1, 0 }
  uselistorder i1 %v7_12468, { 1, 0 }
  uselistorder i32 %v3_12454, { 2, 3, 0, 1 }
  uselistorder i32 %v0_12444.pre, { 0, 2, 1 }
  uselistorder i32 %v1_1242c, { 1, 0 }
  uselistorder i32 %v1_12428, { 1, 0 }
  uselistorder i32 %v1_12420, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_1241c, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_1241c, { 0, 2, 1 }
  uselistorder i1 %v7_123c4, { 1, 0 }
  uselistorder i1 %v2_123b0, { 1, 0, 2 }
  uselistorder i1 %v2_12398, { 1, 0, 2 }
  uselistorder i32 %v1_123b8, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_1238c, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_123b4, { 1, 0 }
  uselistorder i32 %v2_123bc, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_12334, { 4, 19, 5, 17, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 0, 11, 12, 20, 2, 1 }
  uselistorder i32 %v1_12310, { 1, 2, 3, 0 }
  uselistorder i32 %v3_1230c, { 1, 0 }
  uselistorder i32 %v5_122f0, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_122dc, { 1, 0, 2 }
  uselistorder i32 %v3_122d8, { 1, 0, 2 }
  uselistorder i32 %v0_12cac, { 1, 0, 2 }
  uselistorder i32 %v5_122a0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v5_12280, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_12238, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v3_12218, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_1220c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_12198, { 2, 1, 0 }
  uselistorder i32 %v3_12194, { 1, 0 }
  uselistorder i1 %v7_1217c, { 1, 0 }
  uselistorder i32 %v3_12178, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v0_1216c, { 1, 0 }
  uselistorder i32 %v1_12150, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_1213c, { 2, 1, 0 }
  uselistorder i32 %v3_12138, { 1, 0 }
  uselistorder i32 %v0_1213c, { 1, 0 }
  uselistorder i32 %v2_12798, { 0, 2, 3, 1 }
  uselistorder i32 %v2_126e4, { 4, 5, 3, 2, 6, 7, 1, 0 }
  uselistorder i32 %v2_12b70, { 1, 2, 0 }
  uselistorder i32 %v2_1237c, { 0, 2, 1 }
  uselistorder i32 %v1_120d0, { 0, 1, 3, 2 }
  uselistorder i32 %v0_120d0, { 0, 1, 3, 2 }
  uselistorder i32 %v1_120ac, { 2, 1, 0 }
  uselistorder i32 %v1_120a8, { 1, 0 }
  uselistorder i32 %v0_12078, { 0, 2, 1 }
  uselistorder i32 %v1_12070, { 1, 0 }
  uselistorder i1 %v7_1203c, { 0, 3, 1, 2 }
  uselistorder i1 %v2_1203c, { 1, 2, 0 }
  uselistorder i32 %v2_12034, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_1202c, { 1, 0 }
  uselistorder i32 %v1_12010, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_12004, { 0, 1, 3, 2 }
  uselistorder i32 %v0_12004, { 0, 2, 1 }
  uselistorder i32 %v1_11ff4, { 1, 0 }
  uselistorder i32 %v3_12058, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %storemerge222, { 1, 0, 2 }
  uselistorder i32 %v2_12064, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i32 %stack_var_-1868.0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_11f44, { 1, 0 }
  uselistorder i32 %v1_11f30, { 1, 0 }
  uselistorder i32 %v1_11f18, { 1, 2, 0 }
  uselistorder i32 %v0_11f24, { 0, 3, 2, 1 }
  uselistorder i32 %v0_11ee8, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_11edc, { 2, 1, 0 }
  uselistorder i32 %v1_11eb8, { 3, 1, 0, 4, 2 }
  uselistorder i1 %v2_11e90, { 1, 0 }
  uselistorder i32 %v4_11e30, { 2, 3, 7, 0, 1, 5, 4, 6 }
  uselistorder i32 %v1_11d98, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_11cb8, { 1, 0 }
  uselistorder i32 %v1_11cb4, { 2, 0, 1 }
  uselistorder i32 %v4_11c90, { 1, 0 }
  uselistorder i1 %v2_11c00, { 1, 0 }
  uselistorder i1 %v3_11be4, { 1, 0, 2 }
  uselistorder i1 %v2_11bd0, { 1, 0 }
  uselistorder i1 %v2_11bac, { 1, 0 }
  uselistorder i32 %v1_11b5c, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_11b48, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11b44, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v4_11b34, { 1, 0 }
  uselistorder i32 %v0_11b24, { 0, 1, 3, 2 }
  uselistorder i32 %v0_11b14, { 1, 0 }
  uselistorder i32 %v0_11e24, { 0, 1, 2, 5, 6, 7, 9, 3, 4, 8, 10 }
  uselistorder i8* %stack_var_-1884.0, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 %stack_var_-1872.0, { 0, 3, 2, 1 }
  uselistorder i32 %v4_116e8, { 1, 0 }
  uselistorder i32 %v0_116dc, { 2, 0, 1, 3 }
  uselistorder i32 %v4_11688, { 1, 0 }
  uselistorder i32 %v0_11680, { 0, 1, 3, 2 }
  uselistorder i32 %v0_11628, { 3, 2, 0, 1 }
  uselistorder i1 %v7_115cc, { 1, 0 }
  uselistorder i32 %v3_115c4, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_115ac, { 0, 2, 1 }
  uselistorder i32 %v0_11594, { 2, 1, 0 }
  uselistorder i32 %v0_11570, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge229, { 1, 0 }
  uselistorder i32 %v0_11508, { 3, 2, 1, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 0, 4, 1, 2, 3, 5 }
  uselistorder i32* %stack_var_-64, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 4, 5, 3, 6, 2, 7, 0, 8, 9 }
  uselistorder i32* %stack_var_-56, { 0, 6, 7, 3, 8, 4, 9, 5, 10, 2, 11, 1, 12, 13 }
  uselistorder i32* %stack_var_-84, { 1, 0 }
  uselistorder i32* %stack_var_-38, { 0, 2, 1 }
  uselistorder i32 %tmp239, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32* %r5.global-to-local, { 3, 1, 2, 0, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 66, 67, 44, 36, 68, 69, 70, 71, 72, 13, 14, 45, 46, 47, 48, 0, 1, 2, 3, 15, 65, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 57, 58, 59, 42, 43, 49, 50, 51, 52, 53, 54, 55, 56, 73, 74, 75, 76, 77, 78, 60, 61, 79, 80, 82, 81, 83, 84, 85, 86, 87, 89, 91, 90, 88, 92, 93, 94, 95, 101, 96, 97, 98, 99, 103, 102, 62, 105, 104, 63, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 64, 124, 125, 126, 127, 128, 129, 131, 130, 133, 132, 100, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145 }
  uselistorder i32* %r2.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 35, 31, 48, 36, 0, 1, 2, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 24, 23, 25, 27, 26, 28, 30, 29, 32, 34, 33, 40, 41, 42, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 43, 44, 56, 57, 58, 59, 60, 62, 64, 63, 45, 61, 65, 66, 67, 68, 72, 69, 70, 71, 73, 76, 75, 77, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 46, 47, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166 }
  uselistorder i32* %r1.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 47, 48, 39, 40, 36, 15, 16, 1, 2, 3, 45, 46, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 41, 42, 0, 49, 50, 51, 43, 44, 52, 53, 54, 56, 57, 55, 58, 59, 61, 60, 146, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145 }
  uselistorder i32* %r0.global-to-local, { 11, 10, 13, 12, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 26, 25, 27, 29, 28, 31, 30, 32, 33, 125, 124, 35, 126, 108, 111, 110, 100, 99, 127, 129, 128, 34, 37, 36, 38, 112, 1, 0, 2, 4, 3, 6, 5, 7, 8, 9, 115, 40, 39, 41, 43, 42, 44, 45, 47, 46, 48, 50, 49, 51, 53, 52, 54, 55, 56, 57, 58, 59, 61, 60, 63, 62, 65, 64, 66, 67, 68, 69, 71, 70, 73, 72, 75, 74, 76, 77, 78, 79, 81, 80, 83, 82, 85, 84, 86, 87, 88, 89, 91, 90, 93, 92, 95, 94, 96, 97, 98, 102, 101, 109, 103, 104, 105, 117, 116, 119, 118, 106, 107, 114, 113, 133, 130, 131, 121, 120, 122, 142, 132, 135, 134, 136, 137, 139, 138, 140, 147, 141, 143, 146, 144, 145, 148, 150, 151, 149, 241, 152, 153, 155, 154, 156, 243, 157, 123, 158, 159, 160, 162, 161, 163, 164, 166, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 229, 232, 231, 233, 237, 236, 234, 235, 238, 239, 242, 240 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %ip.global-to-local, { 23, 24, 2, 25, 3, 16, 0, 1, 20, 4, 5, 7, 6, 9, 8, 11, 10, 12, 13, 14, 19, 15, 21, 17, 18, 26, 27, 28, 29, 30, 31, 34, 32, 33, 35, 22, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i1* %cpsr_z.global-to-local, { 9, 55, 109, 110, 111, 112, 113, 10, 11, 72, 73, 74, 75, 76, 0, 1, 6, 7, 2, 3, 4, 5, 8, 91, 12, 13, 14, 108, 15, 16, 17, 18, 19, 20, 25, 26, 21, 22, 23, 24, 27, 28, 29, 34, 35, 30, 31, 32, 33, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 56, 57, 61, 62, 58, 59, 60, 63, 93, 64, 69, 70, 65, 66, 67, 68, 71, 92, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 96, 114, 115, 116, 117, 118, 119, 99, 97, 94, 95, 120, 122, 121, 123, 124, 126, 128, 127, 98, 125, 129, 130, 131, 132, 133, 134, 139, 135, 136, 137, 138, 102, 103, 100, 101, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 157, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 107, 175, 176, 177, 178, 179, 106, 180, 181, 182, 105, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 104, 196 }
  uselistorder i1* %cpsr_c.global-to-local, { 9, 10, 11, 57, 108, 109, 110, 111, 112, 12, 74, 75, 76, 77, 0, 1, 6, 7, 2, 3, 4, 5, 8, 90, 13, 14, 15, 107, 16, 17, 18, 19, 20, 21, 22, 27, 28, 23, 24, 25, 26, 29, 30, 31, 36, 37, 32, 33, 34, 35, 38, 39, 40, 45, 46, 41, 42, 43, 44, 47, 48, 49, 54, 55, 50, 51, 52, 53, 56, 58, 59, 63, 64, 60, 61, 62, 65, 92, 66, 71, 72, 67, 68, 69, 70, 73, 91, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95, 113, 114, 115, 116, 117, 118, 98, 96, 93, 94, 119, 121, 120, 122, 123, 125, 127, 126, 97, 124, 128, 129, 130, 131, 132, 137, 133, 134, 135, 136, 101, 102, 99, 138, 100, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 106, 170, 171, 172, 173, 174, 105, 175, 176, 177, 104, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 103, 195 }
  uselistorder i32 (i32)* @function_10d04, { 1, 0 }
  uselistorder i32 104, { 0, 3, 1, 4, 2, 5 }
  uselistorder i8 31, { 8, 2, 3, 0, 1, 4, 5, 9, 10, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32 (i32)* @function_12e98, { 39, 38, 40, 37, 36, 35, 34, 33, 32, 31, 41, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_12e6c, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 60, 61, 62, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 55, 56, 57, 58 }
  uselistorder i32 (i32)* @function_12f50, { 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_16af0.33 to i32*), { 4, 2, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_16af0.33, { 1, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_16af0.33 to i32), { 16, 17, 18, 19, 20, 21, 22, 12, 23, 3, 24, 15, 25, 13, 26, 14, 27, 0, 28, 1, 29, 2, 30, 4, 31, 5, 32, 6, 33, 7, 34, 8, 35, 9, 36, 10, 37, 11, 38 }
  uselistorder i8 58, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 62, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 37, { 5, 3, 4, 2, 1, 0 }
  uselistorder i8 34, { 6, 4, 5, 3, 2, 1, 0, 7, 8, 9, 10 }
  uselistorder i8 36, { 11, 12, 7, 8, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 12, 13, 8, 9, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_14aa0, { 2, 3, 4, 5, 6, 7, 8, 19, 0, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 20, 31, 23, 24, 25, 26, 27, 28, 29, 30, 32 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i8 -4, { 1, 2, 3, 0 }
  uselistorder i32 1073741824, { 2, 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_14a40, { 5, 0, 1, 2, 3, 4, 6, 9, 7, 8 }
  uselistorder i32 (i32, i32, i32, i32)* @function_13938, { 22, 24, 23, 21, 20, 19, 18, 17, 16, 5, 4, 3, 2, 1, 0, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6 }
  uselistorder i8* bitcast (i8** @global_var_1f80c.194 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1f80d.195, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1f80c.194 to i32), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @function_149e4, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_14454, { 1, 2, 3, 0 }
  uselistorder i32 284, { 3, 4, 5, 6, 0, 1, 2, 7 }
  uselistorder i32 1544, { 1, 0 }
  uselistorder i32 1672, { 2, 0, 1 }
  uselistorder i32 ()* @function_11288, { 3, 2, 1, 0 }
  uselistorder i32 254, { 9, 10, 11, 0, 1, 2, 3, 4, 12, 5, 13, 6, 14, 7, 15, 8, 16 }
  uselistorder i8 2, { 0, 2, 4, 3, 1 }
  uselistorder i32 5888, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_14a6c, { 2, 1, 3, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_14acc, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i32 16384, { 34, 56, 35, 57, 36, 58, 37, 59, 38, 60, 39, 61, 13, 62, 12, 73, 11, 54, 0, 55, 1, 63, 2, 64, 3, 65, 4, 66, 5, 67, 6, 68, 7, 69, 8, 70, 32, 71, 33, 72, 30, 75, 31, 76, 29, 74, 40, 97, 9, 98, 10, 99, 14, 84, 41, 85, 16, 77, 44, 78, 43, 79, 45, 80, 46, 81, 15, 82, 42, 83, 17, 86, 18, 87, 19, 88, 47, 48, 49, 50, 20, 89, 21, 90, 23, 91, 22, 92, 25, 93, 24, 94, 26, 95, 27, 96, 52, 100, 53, 101, 28, 102, 51, 103 }
  uselistorder i32 (i32, i32, i32, i32)* @function_f064, { 0, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_1405c, { 1, 8, 7, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32)* @function_f008, { 0, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i8* @global_var_1f7f0.317, { 2, 1, 0 }
  uselistorder i32 16711680, { 3, 0, 1, 2 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 192, { 2, 3, 4, 0, 1 }
  uselistorder i32 127, { 5, 0, 6, 3, 7, 1, 8, 2, 9, 4, 10 }
  uselistorder i32 126, { 11, 5, 0, 6, 1, 7, 2, 8, 3, 9, 4, 10 }
  uselistorder i32 ptrtoint (i32* @global_var_16ccc.295 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_16c64.273 to i32), { 0, 5, 1, 6, 2, 3, 4, 7 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_16c48.267 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_16c28.261 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_16c20.259 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_16c0c.255 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_16bf8.251 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_16bf0.249 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_16be8.247 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_16bdc.245 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_16b18.243 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_16d90.239 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_16d88.237 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_16d64.229 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_16d5c.227 to i32), { 0, 18, 1, 19, 2, 20, 3, 21, 4, 22, 5, 23, 6, 24, 7, 25, 8, 26, 9, 27, 10, 28, 11, 29, 12, 30, 13, 31, 14, 15, 16, 32, 17, 33 }
  uselistorder i32 (i32, i32, i32)* @function_1135c, { 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_16d44.221 to i32), { 0, 34, 1, 35, 2, 36, 3, 37, 4, 38, 5, 39, 6, 40, 7, 41, 8, 42, 9, 43, 10, 44, 11, 45, 12, 46, 13, 47, 14, 48, 15, 49, 16, 50, 17, 51, 18, 52, 19, 53, 20, 54, 21, 22, 23, 55, 24, 56, 25, 57, 26, 58, 27, 59, 28, 60, 29, 61, 30, 62, 31, 63, 32, 64, 33, 65 }
  uselistorder i8* @global_var_1f801.217, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1f7f4.208 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8 64, { 6, 0, 1, 7, 2, 3, 4, 5 }
  uselistorder i8* @global_var_1f800.209, { 1, 0 }
  uselistorder i8** @global_var_1f7e0.204, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1f7e0.204 to i32), { 0, 2, 1, 9, 8, 3, 7, 6, 5, 4 }
  uselistorder i32 1024, { 2, 1, 3, 4, 5, 0, 6 }
  uselistorder i32 1023, { 4, 0, 1, 2, 5, 3, 6 }
  uselistorder i32 65280, { 62, 1, 19, 0, 2, 36, 3, 37, 26, 27, 4, 38, 20, 28, 39, 40, 5, 41, 42, 6, 7, 43, 21, 8, 44, 29, 22, 23, 30, 31, 32, 45, 46, 47, 9, 48, 10, 11, 33, 34, 35, 49, 50, 51, 12, 52, 13, 14, 53, 15, 54, 55, 24, 56, 57, 16, 58, 59, 25, 60, 61, 17, 63, 18, 64 }
  uselistorder i32 ()* @function_10a44, { 76, 13, 12, 11, 10, 9, 8, 72, 75, 74, 73, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 3, 2, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 7, 6, 5, 4, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @function_14b00, { 9, 0, 1, 2, 3, 4, 5, 10, 6, 7, 8, 11 }
  uselistorder i32 2048, { 15, 14, 5, 8, 9, 0, 1, 2, 3, 7, 10, 6, 11, 4, 12, 13, 16 }
  uselistorder i32* @global_var_1f878.202, { 1, 5, 2, 3, 4, 0 }
  uselistorder i32* @global_var_1f874.200, { 1, 2, 3, 4, 0 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1f810.188, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32*)* @function_14504, { 4, 5, 6, 0, 1, 8, 9, 2, 3, 7, 10, 11 }
  uselistorder i32* @global_var_1f858.88, { 3, 4, 2, 0, 5, 1, 6, 14, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32 ()* @function_13b2c, { 0, 2, 1 }
  uselistorder i32* @global_var_1f87c.186, { 0, 2, 1 }
  uselistorder i32 ()* @function_14260, { 5, 2, 4, 3, 1, 0 }
  uselistorder i32* @fp, { 3, 4, 5, 6, 7, 58, 59, 51, 52, 53, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 1, 48, 49, 50, 54, 2, 55, 56, 57 }
  uselistorder i32* @sl, { 2, 3, 4, 5, 6, 7, 89, 90, 73, 74, 75, 8, 11, 9, 10, 1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 0, 113, 114, 115, 116 }
  uselistorder i32* @sb, { 3, 4, 7, 1, 2, 5, 6, 70, 69, 8, 9, 71, 72, 60, 61, 62, 10, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82 }
  uselistorder label %dec_label_pc_12e64, { 1, 0 }
  uselistorder label %dec_label_pc_12dc0, { 1, 0 }
  uselistorder label %dec_label_pc_12cf4, { 1, 0 }
  uselistorder label %dec_label_pc_12c60, { 2, 0, 1 }
  uselistorder label %bb346, { 1, 0 }
  uselistorder label %dec_label_pc_12c20, { 1, 0 }
  uselistorder label %dec_label_pc_12aec, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_12ad8, { 1, 0 }
  uselistorder label %dec_label_pc_12a80, { 2, 3, 1, 11, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_12a64, { 1, 2, 0 }
  uselistorder label %dec_label_pc_128e0, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_128cc, { 1, 0 }
  uselistorder label %dec_label_pc_1282c, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_12818, { 1, 0 }
  uselistorder label %dec_label_pc_12778, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_12764, { 1, 0 }
  uselistorder label %dec_label_pc_126c4, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_126b0, { 1, 0 }
  uselistorder label %dec_label_pc_12638, { 1, 0 }
  uselistorder label %dec_label_pc_1262c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_12618, { 1, 0 }
  uselistorder label %dec_label_pc_1249c, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_12488, { 1, 0 }
  uselistorder label %dec_label_pc_12444, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_12434, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %bb320, { 2, 1, 0 }
  uselistorder label %bb317, { 2, 1, 0 }
  uselistorder label %dec_label_pc_12394, { 1, 0 }
  uselistorder label %dec_label_pc_12394.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_1231c, { 1, 0 }
  uselistorder label %bb314, { 1, 0 }
  uselistorder label %dec_label_pc_122cc, { 1, 0 }
  uselistorder label %dec_label_pc_122bc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_122b4thread-pre-split, { 4, 5, 3, 7, 2, 6, 1, 8, 0, 9 }
  uselistorder label %dec_label_pc_122b4thread-pre-split.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_122bc.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_122b0.loopexit, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_12270, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1214c, { 6, 7, 3, 4, 0, 5, 1, 2 }
  uselistorder label %dec_label_pc_12128, { 1, 0 }
  uselistorder label %bb311, { 1, 0 }
  uselistorder label %bb309, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_11f90.dec_label_pc_11f90_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_11f74.dec_label_pc_11f74_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_11f6c, { 3, 4, 0, 1, 2 }
  uselistorder label %dec_label_pc_11f64, { 1, 0 }
  uselistorder label %dec_label_pc_11f18, { 1, 0 }
  uselistorder label %dec_label_pc_11db8, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_11dac, { 1, 0 }
  uselistorder label %.thread47, { 2, 1, 0 }
  uselistorder label %.thread45, { 1, 0 }
  uselistorder label %dec_label_pc_11c10, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11bec, { 1, 0 }
  uselistorder label %dec_label_pc_11be0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11bbc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11b98, { 1, 0 }
  uselistorder label %bb279, { 1, 0 }
  uselistorder label %dec_label_pc_11b44, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_11628, { 1, 0 }
}

define i32 @function_12e6c(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_12e6c:
  %v3_12e70 = mul i32 %arg1, 8
  %v2_12e74 = add i32 %v3_12e70, ptrtoint (i32* @global_var_1f884.339 to i32)
  %v2_12e78 = icmp eq i32* %arg2, null
  br i1 %v2_12e78, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_12e6c
  %v3_12e8411 = inttoptr i32 %v2_12e74 to i32*
  %v4_12e8412 = load i32, i32* %v3_12e8411, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_12e6c
  %v2_12e7c = add i32 %v3_12e70, add (i32 ptrtoint (i32* @global_var_1f884.339 to i32), i32 5)
  %v3_12e7c = inttoptr i32 %v2_12e7c to i8*
  %v4_12e7c = load i8, i8* %v3_12e7c, align 1
  %v5_12e7c = zext i8 %v4_12e7c to i32
  store i32 %v5_12e7c, i32* @r2, align 4
  %v2_12e80 = add i32 %v3_12e70, add (i32 ptrtoint (i32* @global_var_1f884.339 to i32), i32 4)
  %v3_12e80 = inttoptr i32 %v2_12e80 to i8*
  %v4_12e80 = load i8, i8* %v3_12e80, align 4
  %v5_12e80 = zext i8 %v4_12e80 to i32
  %v3_12e84 = inttoptr i32 %v2_12e74 to i32*
  %v4_12e84 = load i32, i32* %v3_12e84, align 4
  %v5_12e88 = mul nuw nsw i32 %v5_12e7c, 256
  %v6_12e88 = or i32 %v5_12e80, %v5_12e88
  store i32 %v6_12e88, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_12e84714 = phi i32 [ %v4_12e8412, %.thread ], [ %v4_12e84, %bb ]
  ret i32 %v4_12e84714

; uselistorder directives
  uselistorder i32 %v2_12e74, { 1, 0 }
  uselistorder i32 %v3_12e70, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_12e98(i32 %arg1) local_unnamed_addr {
dec_label_pc_12e98:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_12e98 = mul i32 %arg1, 8
  %v3_12e9c = load i32, i32* @r4, align 4
  store i32 %v3_12e9c, i32* %stack_var_-20, align 4
  %v3_12eac = and i32 %v3_12e98, 2040
  %v2_12eb0 = add i32 %v3_12eac, ptrtoint (i32* @global_var_1f884.339 to i32)
  store i32 %v2_12eb0, i32* @lr, align 4
  %v1_12eb8 = add i32 %v3_12eac, add (i32 ptrtoint (i32* @global_var_1f884.339 to i32), i32 4)
  store i32 %v1_12eb8, i32* %r7.global-to-local, align 4
  %v2_12ebc = load i32, i32* @global_var_1f638.342, align 4
  %v2_12ec0 = inttoptr i32 %v1_12eb8 to i8*
  %v3_12ec0 = load i8, i8* %v2_12ec0, align 4
  %v4_12ec0 = zext i8 %v3_12ec0 to i32
  store i32 %v4_12ec0, i32* @r1, align 4
  %v1_12ec4 = add i32 %v3_12eac, add (i32 ptrtoint (i32* @global_var_1f884.339 to i32), i32 5)
  %v2_12ec4 = inttoptr i32 %v1_12ec4 to i8*
  %v3_12ec4 = load i8, i8* %v2_12ec4, align 1
  %v4_12ec4 = zext i8 %v3_12ec4 to i32
  %v3_12ec8 = udiv i32 %v2_12ebc, 256
  %v4_12ecc = mul nuw nsw i32 %v4_12ec4, 256
  %v5_12ecc = or i32 %v4_12ecc, %v4_12ec0
  %v7_12ecc = icmp eq i32 %v5_12ecc, 0
  store i1 %v7_12ecc, i1* @cpsr_z, align 1
  %v3_12ed0 = udiv i32 %v2_12ebc, 65536
  %v1_12ed4 = urem i32 %v3_12ec8, 256
  store i32 %v1_12ed4, i32* %r6.global-to-local, align 4
  %v1_12ed8 = urem i32 %v3_12ed0, 256
  store i32 %v1_12ed8, i32* %r5.global-to-local, align 4
  %v3_12edc = udiv i32 %v2_12ebc, 16777216
  store i32 %v3_12edc, i32* %r4.global-to-local, align 4
  %v1_12ee0 = urem i32 %v2_12ebc, 256
  br i1 %v7_12ecc, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_12e98
  store i32 %v3_12e9c, i32* @r4, align 4
  ret i32 %v1_12ee0

bb8:                                              ; preds = %dec_label_pc_12e98
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12eec

dec_label_pc_12eec:                               ; preds = %dec_label_pc_12eec, %bb8
  %v2_12ef8 = phi i32 [ %v1_12f34, %dec_label_pc_12eec ], [ 0, %bb8 ]
  %v0_12eec = phi i32 [ %v0_12f2c, %dec_label_pc_12eec ], [ %v2_12eb0, %bb8 ]
  %v1_12eec = inttoptr i32 %v0_12eec to i32*
  %v2_12eec = load i32, i32* %v1_12eec, align 4
  %v2_12ef0 = add i32 %v2_12eec, %v2_12ef8
  %v3_12ef0 = inttoptr i32 %v2_12ef0 to i8*
  %v4_12ef0 = load i8, i8* %v3_12ef0, align 1
  %v6_12ef0 = zext i8 %v4_12ef0 to i32
  %v2_12ef4 = xor i32 %v6_12ef0, %v1_12ee0
  %v1_12ef8 = trunc i32 %v2_12ef4 to i8
  store i8 %v1_12ef8, i8* %v3_12ef0, align 1
  %v0_12efc = load i32, i32* @lr, align 4
  %v1_12efc = inttoptr i32 %v0_12efc to i32*
  %v2_12efc = load i32, i32* %v1_12efc, align 4
  %v0_12f00 = load i32, i32* %ip.global-to-local, align 4
  %v2_12f00 = add i32 %v0_12f00, %v2_12efc
  %v3_12f00 = inttoptr i32 %v2_12f00 to i8*
  %v4_12f00 = load i8, i8* %v3_12f00, align 1
  %v6_12f00 = zext i8 %v4_12f00 to i32
  %v0_12f04 = load i32, i32* %r6.global-to-local, align 4
  %v2_12f04 = xor i32 %v0_12f04, %v6_12f00
  %v1_12f08 = trunc i32 %v2_12f04 to i8
  store i8 %v1_12f08, i8* %v3_12f00, align 1
  %v0_12f0c = load i32, i32* @lr, align 4
  %v1_12f0c = inttoptr i32 %v0_12f0c to i32*
  %v2_12f0c = load i32, i32* %v1_12f0c, align 4
  %v0_12f10 = load i32, i32* %ip.global-to-local, align 4
  %v2_12f10 = add i32 %v0_12f10, %v2_12f0c
  %v3_12f10 = inttoptr i32 %v2_12f10 to i8*
  %v4_12f10 = load i8, i8* %v3_12f10, align 1
  %v6_12f10 = zext i8 %v4_12f10 to i32
  %v0_12f14 = load i32, i32* %r5.global-to-local, align 4
  %v2_12f14 = xor i32 %v0_12f14, %v6_12f10
  %v1_12f18 = trunc i32 %v2_12f14 to i8
  store i8 %v1_12f18, i8* %v3_12f10, align 1
  %v0_12f1c = load i32, i32* @lr, align 4
  %v1_12f1c = inttoptr i32 %v0_12f1c to i32*
  %v2_12f1c = load i32, i32* %v1_12f1c, align 4
  store i32 %v2_12f1c, i32* @r1, align 4
  %v0_12f20 = load i32, i32* %ip.global-to-local, align 4
  %v2_12f20 = add i32 %v0_12f20, %v2_12f1c
  %v3_12f20 = inttoptr i32 %v2_12f20 to i8*
  %v4_12f20 = load i8, i8* %v3_12f20, align 1
  %v6_12f20 = zext i8 %v4_12f20 to i32
  %v0_12f24 = load i32, i32* %r4.global-to-local, align 4
  %v2_12f24 = xor i32 %v0_12f24, %v6_12f20
  %v1_12f28 = trunc i32 %v2_12f24 to i8
  store i8 %v1_12f28, i8* %v3_12f20, align 1
  %v0_12f2c = load i32, i32* @lr, align 4
  %v1_12f2c = add i32 %v0_12f2c, 4
  %v2_12f2c = inttoptr i32 %v1_12f2c to i8*
  %v3_12f2c = load i8, i8* %v2_12f2c, align 1
  %v4_12f2c = zext i8 %v3_12f2c to i32
  %v0_12f30 = load i32, i32* %r7.global-to-local, align 4
  %v1_12f30 = add i32 %v0_12f30, 1
  %v2_12f30 = inttoptr i32 %v1_12f30 to i8*
  %v3_12f30 = load i8, i8* %v2_12f30, align 1
  %v4_12f30 = zext i8 %v3_12f30 to i32
  %v0_12f34 = load i32, i32* %ip.global-to-local, align 4
  %v1_12f34 = add i32 %v0_12f34, 1
  store i32 %v1_12f34, i32* %ip.global-to-local, align 4
  %v4_12f38 = mul nuw nsw i32 %v4_12f30, 256
  %v5_12f38 = or i32 %v4_12f38, %v4_12f2c
  %v9_12f3c = icmp eq i32 %v5_12f38, %v1_12f34
  store i1 %v9_12f3c, i1* @cpsr_z, align 1
  %v8_12f40 = icmp sgt i32 %v5_12f38, %v1_12f34
  br i1 %v8_12f40, label %dec_label_pc_12eec, label %dec_label_pc_12f44

dec_label_pc_12f44:                               ; preds = %dec_label_pc_12eec
  %v2_12f44 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12f44, i32* @r4, align 4
  ret i32 %v1_12ee0

; uselistorder directives
  uselistorder i32 %v1_12f34, { 1, 2, 3, 0 }
  uselistorder i32 %v0_12f2c, { 1, 0 }
  uselistorder i32 %v1_12ee0, { 0, 2, 1 }
  uselistorder i32 %v2_12ebc, { 3, 0, 1, 2 }
}

define i32 @function_12f50(i32 %arg1) local_unnamed_addr {
dec_label_pc_12f50:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_12f50 = mul i32 %arg1, 8
  %v3_12f54 = load i32, i32* @r4, align 4
  store i32 %v3_12f54, i32* %stack_var_-20, align 4
  %v3_12f64 = and i32 %v3_12f50, 2040
  %v2_12f68 = add i32 %v3_12f64, ptrtoint (i32* @global_var_1f884.339 to i32)
  store i32 %v2_12f68, i32* @lr, align 4
  %v1_12f70 = add i32 %v3_12f64, add (i32 ptrtoint (i32* @global_var_1f884.339 to i32), i32 4)
  store i32 %v1_12f70, i32* %r7.global-to-local, align 4
  %v2_12f74 = load i32, i32* @global_var_1f638.342, align 4
  store i32 %v2_12f74, i32* @r2, align 4
  %v2_12f78 = inttoptr i32 %v1_12f70 to i8*
  %v3_12f78 = load i8, i8* %v2_12f78, align 4
  %v4_12f78 = zext i8 %v3_12f78 to i32
  %v1_12f7c = add i32 %v3_12f64, add (i32 ptrtoint (i32* @global_var_1f884.339 to i32), i32 5)
  %v2_12f7c = inttoptr i32 %v1_12f7c to i8*
  %v3_12f7c = load i8, i8* %v2_12f7c, align 1
  %v4_12f7c = zext i8 %v3_12f7c to i32
  %v3_12f80 = udiv i32 %v2_12f74, 256
  %v4_12f84 = mul nuw nsw i32 %v4_12f7c, 256
  %v5_12f84 = or i32 %v4_12f84, %v4_12f78
  %v7_12f84 = icmp eq i32 %v5_12f84, 0
  %v3_12f88 = udiv i32 %v2_12f74, 65536
  %v1_12f8c = urem i32 %v3_12f80, 256
  store i32 %v1_12f8c, i32* %r6.global-to-local, align 4
  %v1_12f90 = urem i32 %v3_12f88, 256
  store i32 %v1_12f90, i32* %r5.global-to-local, align 4
  %v3_12f94 = udiv i32 %v2_12f74, 16777216
  store i32 %v3_12f94, i32* %r4.global-to-local, align 4
  %v1_12f98 = urem i32 %v2_12f74, 256
  br i1 %v7_12f84, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_12f50
  store i32 %v3_12f54, i32* @r4, align 4
  ret i32 %v1_12f98

bb8:                                              ; preds = %dec_label_pc_12f50
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12fa4

dec_label_pc_12fa4:                               ; preds = %dec_label_pc_12fa4, %bb8
  %v2_12fb0 = phi i32 [ %v1_12fec, %dec_label_pc_12fa4 ], [ 0, %bb8 ]
  %v0_12fa4 = phi i32 [ %v0_12fe4, %dec_label_pc_12fa4 ], [ %v2_12f68, %bb8 ]
  %v1_12fa4 = inttoptr i32 %v0_12fa4 to i32*
  %v2_12fa4 = load i32, i32* %v1_12fa4, align 4
  %v2_12fa8 = add i32 %v2_12fa4, %v2_12fb0
  %v3_12fa8 = inttoptr i32 %v2_12fa8 to i8*
  %v4_12fa8 = load i8, i8* %v3_12fa8, align 1
  %v6_12fa8 = zext i8 %v4_12fa8 to i32
  %v2_12fac = xor i32 %v6_12fa8, %v1_12f98
  %v1_12fb0 = trunc i32 %v2_12fac to i8
  store i8 %v1_12fb0, i8* %v3_12fa8, align 1
  %v0_12fb4 = load i32, i32* @lr, align 4
  %v1_12fb4 = inttoptr i32 %v0_12fb4 to i32*
  %v2_12fb4 = load i32, i32* %v1_12fb4, align 4
  %v0_12fb8 = load i32, i32* %ip.global-to-local, align 4
  %v2_12fb8 = add i32 %v0_12fb8, %v2_12fb4
  %v3_12fb8 = inttoptr i32 %v2_12fb8 to i8*
  %v4_12fb8 = load i8, i8* %v3_12fb8, align 1
  %v6_12fb8 = zext i8 %v4_12fb8 to i32
  %v0_12fbc = load i32, i32* %r6.global-to-local, align 4
  %v2_12fbc = xor i32 %v0_12fbc, %v6_12fb8
  %v1_12fc0 = trunc i32 %v2_12fbc to i8
  store i8 %v1_12fc0, i8* %v3_12fb8, align 1
  %v0_12fc4 = load i32, i32* @lr, align 4
  %v1_12fc4 = inttoptr i32 %v0_12fc4 to i32*
  %v2_12fc4 = load i32, i32* %v1_12fc4, align 4
  %v0_12fc8 = load i32, i32* %ip.global-to-local, align 4
  %v2_12fc8 = add i32 %v0_12fc8, %v2_12fc4
  %v3_12fc8 = inttoptr i32 %v2_12fc8 to i8*
  %v4_12fc8 = load i8, i8* %v3_12fc8, align 1
  %v6_12fc8 = zext i8 %v4_12fc8 to i32
  %v0_12fcc = load i32, i32* %r5.global-to-local, align 4
  %v2_12fcc = xor i32 %v0_12fcc, %v6_12fc8
  %v1_12fd0 = trunc i32 %v2_12fcc to i8
  store i8 %v1_12fd0, i8* %v3_12fc8, align 1
  %v0_12fd4 = load i32, i32* @lr, align 4
  %v1_12fd4 = inttoptr i32 %v0_12fd4 to i32*
  %v2_12fd4 = load i32, i32* %v1_12fd4, align 4
  %v0_12fd8 = load i32, i32* %ip.global-to-local, align 4
  %v2_12fd8 = add i32 %v0_12fd8, %v2_12fd4
  %v3_12fd8 = inttoptr i32 %v2_12fd8 to i8*
  %v4_12fd8 = load i8, i8* %v3_12fd8, align 1
  %v6_12fd8 = zext i8 %v4_12fd8 to i32
  %v0_12fdc = load i32, i32* %r4.global-to-local, align 4
  %v2_12fdc = xor i32 %v0_12fdc, %v6_12fd8
  %v1_12fe0 = trunc i32 %v2_12fdc to i8
  store i8 %v1_12fe0, i8* %v3_12fd8, align 1
  %v0_12fe4 = load i32, i32* @lr, align 4
  %v1_12fe4 = add i32 %v0_12fe4, 4
  %v2_12fe4 = inttoptr i32 %v1_12fe4 to i8*
  %v3_12fe4 = load i8, i8* %v2_12fe4, align 1
  %v4_12fe4 = zext i8 %v3_12fe4 to i32
  %v0_12fe8 = load i32, i32* %r7.global-to-local, align 4
  %v1_12fe8 = add i32 %v0_12fe8, 1
  %v2_12fe8 = inttoptr i32 %v1_12fe8 to i8*
  %v3_12fe8 = load i8, i8* %v2_12fe8, align 1
  %v4_12fe8 = zext i8 %v3_12fe8 to i32
  %v0_12fec = load i32, i32* %ip.global-to-local, align 4
  %v1_12fec = add i32 %v0_12fec, 1
  store i32 %v1_12fec, i32* %ip.global-to-local, align 4
  %v4_12ff0 = mul nuw nsw i32 %v4_12fe8, 256
  %v5_12ff0 = or i32 %v4_12ff0, %v4_12fe4
  store i32 %v5_12ff0, i32* @r2, align 4
  %v8_12ff8 = icmp sgt i32 %v5_12ff0, %v1_12fec
  br i1 %v8_12ff8, label %dec_label_pc_12fa4, label %dec_label_pc_12ffc

dec_label_pc_12ffc:                               ; preds = %dec_label_pc_12fa4
  %v2_12ffc = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12ffc, i32* @r4, align 4
  ret i32 %v1_12f98

; uselistorder directives
  uselistorder i32 %v1_12fec, { 1, 2, 0 }
  uselistorder i32 %v0_12fe4, { 1, 0 }
  uselistorder i32 %v1_12f98, { 0, 2, 1 }
  uselistorder i32 %v2_12f74, { 3, 0, 1, 2, 4 }
}

define i32 @function_13008() local_unnamed_addr {
dec_label_pc_13008:
  %fp.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %v1_13010 = call i32 @function_14ce0(i32 12)
  store i32 ptrtoint ([13 x i8]* @global_var_16dac.346 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f884.339 to i32), i32* @r4, align 4
  store i32 0, i32* @r6, align 4
  store i32 12, i32* %r8.global-to-local, align 4
  store i32 %v1_13010, i32* @r5, align 4
  %v4_13030 = call i32 @function_138f0(i32 %v1_13010, i32 ptrtoint ([13 x i8]* @global_var_16dac.346 to i32), i32 12)
  %v0_13038 = load i32, i32* @r5, align 4
  store i32 %v0_13038, i32* @global_var_1f89c.348, align 4
  store i8 12, i8* bitcast (i32* @global_var_1f8a0.349 to i8*), align 4
  %v0_13040 = load i32, i32* @r6, align 4
  %v1_13040 = trunc i32 %v0_13040 to i8
  store i8 %v1_13040, i8* bitcast (i32* @global_var_1f8a1.350 to i8*), align 4
  %v1_13044 = call i32 @function_14ce0(i32 2)
  store i32 2, i32* @r5, align 4
  store i32 %v1_13044, i32* @r7, align 4
  %v3_13058 = call i32 @function_138f0(i32 %v1_13044, i32 ptrtoint (i32* @global_var_16dbc.352 to i32), i32 2)
  %v0_1305c = load i32, i32* %r8.global-to-local, align 4
  %v0_13060 = load i32, i32* @r7, align 4
  store i32 %v0_13060, i32* @global_var_1f8a4.353, align 4
  %v0_13064 = load i32, i32* @r5, align 4
  %v1_13064 = trunc i32 %v0_13064 to i8
  store i8 %v1_13064, i8* bitcast (i32* @global_var_1f8a8.354 to i8*), align 4
  %v0_13068 = load i32, i32* @r6, align 4
  %v1_13068 = trunc i32 %v0_13068 to i8
  store i8 %v1_13068, i8* bitcast (i32* @global_var_1f8a9.355 to i8*), align 4
  %v1_1306c = call i32 @function_14ce0(i32 %v0_1305c)
  %v0_13070 = load i32, i32* %sl.global-to-local, align 4
  %v0_13074 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_1306c, i32* @r7, align 4
  %v4_1307c = call i32 @function_138f0(i32 %v1_1306c, i32 %v0_13070, i32 %v0_13074)
  %v0_13080 = load i32, i32* @r5, align 4
  %v0_13084 = load i32, i32* @r7, align 4
  store i32 %v0_13084, i32* @global_var_1f914.356, align 4
  %v1_13088 = trunc i32 %v0_13074 to i8
  store i8 %v1_13088, i8* bitcast (i32* @global_var_1f918.357 to i8*), align 4
  %v0_1308c = load i32, i32* @r6, align 4
  %v1_1308c = trunc i32 %v0_1308c to i8
  store i8 %v1_1308c, i8* bitcast (i32* @global_var_1f919.358 to i8*), align 4
  %v1_13090 = call i32 @function_14ce0(i32 %v0_13080)
  %v0_13094 = load i32, i32* @r5, align 4
  store i32 %v1_13090, i32* @r7, align 4
  %v3_130a0 = call i32 @function_138f0(i32 %v1_13090, i32 ptrtoint (i32* @global_var_16dc0.360 to i32), i32 %v0_13094)
  %v0_130a8 = load i32, i32* @r7, align 4
  store i32 %v0_130a8, i32* @global_var_1f91c.361, align 4
  %v0_130ac = load i32, i32* @r5, align 4
  %v1_130ac = trunc i32 %v0_130ac to i8
  store i8 %v1_130ac, i8* bitcast (i32* @global_var_1f920.362 to i8*), align 4
  %v0_130b0 = load i32, i32* @r6, align 4
  %v1_130b0 = trunc i32 %v0_130b0 to i8
  store i8 %v1_130b0, i8* bitcast (i32* @global_var_1f921.363 to i8*), align 4
  %v1_130b4 = call i32 @function_14ce0(i32 15)
  store i32 %v1_130b4, i32* @r5, align 4
  %v3_130c4 = call i32 @function_138f0(i32 %v1_130b4, i32 ptrtoint (i32* @global_var_16dc4.365 to i32), i32 15)
  store i8 15, i8* bitcast (i32* @global_var_1f898.366 to i8*), align 4
  %v0_130d4 = load i32, i32* @r5, align 4
  store i32 %v0_130d4, i32* @global_var_1f894.367, align 4
  %v0_130d8 = load i32, i32* @r6, align 4
  %v1_130d8 = trunc i32 %v0_130d8 to i8
  store i8 %v1_130d8, i8* bitcast (i32* @global_var_1f899.368 to i8*), align 4
  %v1_130dc = call i32 @function_14ce0(i32 29)
  store i32 %v1_130dc, i32* @r5, align 4
  %v3_130ec = call i32 @function_138f0(i32 %v1_130dc, i32 ptrtoint (i32* @global_var_16dd4.370 to i32), i32 29)
  store i8 29, i8* bitcast (i32* @global_var_1f8b0.371 to i8*), align 4
  %v0_130fc = load i32, i32* @r5, align 4
  store i32 %v0_130fc, i32* @global_var_1f8ac.372, align 4
  %v0_13100 = load i32, i32* @r6, align 4
  %v1_13100 = trunc i32 %v0_13100 to i8
  store i8 %v1_13100, i8* bitcast (i32* @global_var_1f8b1.373 to i8*), align 4
  %v1_13104 = call i32 @function_14ce0(i32 7)
  store i32 7, i32* @r7, align 4
  store i32 %v1_13104, i32* @r5, align 4
  %v4_13118 = call i32 @function_138f0(i32 %v1_13104, i32 ptrtoint ([8 x i8]* @global_var_16df4.375 to i32), i32 7)
  %v0_13120 = load i32, i32* @r5, align 4
  store i32 %v0_13120, i32* @global_var_1f8b4.376, align 4
  %v0_13124 = load i32, i32* @r7, align 4
  %v1_13124 = trunc i32 %v0_13124 to i8
  store i8 %v1_13124, i8* bitcast (i32* @global_var_1f8b8.377 to i8*), align 4
  %v0_13128 = load i32, i32* @r6, align 4
  %v1_13128 = trunc i32 %v0_13128 to i8
  store i8 %v1_13128, i8* bitcast (i32* @global_var_1f8b9.378 to i8*), align 4
  %v1_1312c = call i32 @function_14ce0(i32 5)
  store i32 %v1_1312c, i32* @r5, align 4
  %v4_1313c = call i32 @function_138f0(i32 %v1_1312c, i32 ptrtoint ([6 x i8]* @global_var_16dfc.380 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1f8c0.381 to i8*), align 4
  %v0_1314c = load i32, i32* @r5, align 4
  store i32 %v0_1314c, i32* @global_var_1f8bc.382, align 4
  %v0_13150 = load i32, i32* @r6, align 4
  %v1_13150 = trunc i32 %v0_13150 to i8
  store i8 %v1_13150, i8* bitcast (i32* @global_var_1f8c1.383 to i8*), align 4
  %v1_13154 = call i32 @function_14ce0(i32 11)
  store i32 %v1_13154, i32* @r5, align 4
  %v3_13164 = call i32 @function_138f0(i32 %v1_13154, i32 ptrtoint (i32* @global_var_16e04.385 to i32), i32 11)
  store i8 11, i8* bitcast (i32* @global_var_1f8c8.386 to i8*), align 4
  %v0_13174 = load i32, i32* @r5, align 4
  store i32 %v0_13174, i32* @global_var_1f8c4.387, align 4
  %v0_13178 = load i32, i32* @r6, align 4
  %v1_13178 = trunc i32 %v0_13178 to i8
  store i8 %v1_13178, i8* bitcast (i32* @global_var_1f8c9.388 to i8*), align 4
  %v1_1317c = call i32 @function_14ce0(i32 4)
  store i32 %v1_1317c, i32* @r5, align 4
  %v4_1318c = call i32 @function_138f0(i32 %v1_1317c, i32 ptrtoint ([5 x i8]* @global_var_16e10.390 to i32), i32 4)
  %v0_13194 = load i32, i32* @r7, align 4
  store i8 4, i8* bitcast (i32* @global_var_1f8d0.391 to i8*), align 4
  %v0_1319c = load i32, i32* @r5, align 4
  store i32 %v0_1319c, i32* @global_var_1f8cc.392, align 4
  %v0_131a0 = load i32, i32* @r6, align 4
  %v1_131a0 = trunc i32 %v0_131a0 to i8
  store i8 %v1_131a0, i8* bitcast (i32* @global_var_1f8d1.393 to i8*), align 4
  %v1_131a4 = call i32 @function_14ce0(i32 %v0_13194)
  %v0_131a8 = load i32, i32* @r7, align 4
  store i32 %v1_131a4, i32* @r5, align 4
  %v4_131b4 = call i32 @function_138f0(i32 %v1_131a4, i32 ptrtoint ([8 x i8]* @global_var_16e18.395 to i32), i32 %v0_131a8)
  %v0_131bc = load i32, i32* @r5, align 4
  store i32 %v0_131bc, i32* @global_var_1f8d4.396, align 4
  %v0_131c0 = load i32, i32* @r7, align 4
  %v1_131c0 = trunc i32 %v0_131c0 to i8
  store i8 %v1_131c0, i8* bitcast (i32* @global_var_1f8d8.397 to i8*), align 4
  %v0_131c4 = load i32, i32* @r6, align 4
  %v1_131c4 = trunc i32 %v0_131c4 to i8
  store i8 %v1_131c4, i8* bitcast (i32* @global_var_1f8d9.398 to i8*), align 4
  %v1_131c8 = call i32 @function_14ce0(i32 8)
  store i32 %v1_131c8, i32* @r5, align 4
  %v4_131d8 = call i32 @function_138f0(i32 %v1_131c8, i32 ptrtoint ([9 x i8]* @global_var_16e20.400 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1f8e0.401 to i8*), align 4
  %v0_131e8 = load i32, i32* @r5, align 4
  store i32 %v0_131e8, i32* @global_var_1f8dc.402, align 4
  %v0_131ec = load i32, i32* @r6, align 4
  %v1_131ec = trunc i32 %v0_131ec to i8
  store i8 %v1_131ec, i8* bitcast (i32* @global_var_1f8e1.403 to i8*), align 4
  %v1_131f0 = call i32 @function_14ce0(i32 13)
  store i32 %v1_131f0, i32* @r5, align 4
  %v3_13200 = call i32 @function_138f0(i32 %v1_131f0, i32 ptrtoint (i32* @global_var_16e2c.405 to i32), i32 13)
  store i8 13, i8* bitcast (i32* @global_var_1f8e8.406 to i8*), align 4
  %v0_13210 = load i32, i32* @r5, align 4
  store i32 %v0_13210, i32* @global_var_1f8e4.407, align 4
  %v0_13214 = load i32, i32* @r6, align 4
  %v1_13214 = trunc i32 %v0_13214 to i8
  store i8 %v1_13214, i8* bitcast (i32* @global_var_1f8e9.408 to i8*), align 4
  %v1_13218 = call i32 @function_14ce0(i32 10)
  store i32 10, i32* %sl.global-to-local, align 4
  store i32 %v1_13218, i32* @r5, align 4
  %v4_1322c = call i32 @function_138f0(i32 %v1_13218, i32 ptrtoint ([11 x i8]* @global_var_16e3c.410 to i32), i32 10)
  %v0_13234 = load i32, i32* @r5, align 4
  store i32 %v0_13234, i32* @global_var_1f8ec.411, align 4
  store i8 10, i8* bitcast (i32* @global_var_1f8f0.412 to i8*), align 4
  %v0_1323c = load i32, i32* @r6, align 4
  %v1_1323c = trunc i32 %v0_1323c to i8
  store i8 %v1_1323c, i8* bitcast (i32* @global_var_1f8f1.413 to i8*), align 4
  %v1_13240 = call i32 @function_14ce0(i32 10)
  %v0_13248 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_13240, i32* @r5, align 4
  %v4_13250 = call i32 @function_138f0(i32 %v1_13240, i32 ptrtoint ([11 x i8]* @global_var_16e48.415 to i32), i32 %v0_13248)
  %v0_13258 = load i32, i32* @r5, align 4
  store i32 %v0_13258, i32* @global_var_1f8f4.416, align 4
  %v1_1325c = trunc i32 %v0_13248 to i8
  store i8 %v1_1325c, i8* bitcast (i32* @global_var_1f8f8.417 to i8*), align 4
  %v0_13260 = load i32, i32* @r6, align 4
  %v1_13260 = trunc i32 %v0_13260 to i8
  store i8 %v1_13260, i8* bitcast (i32* @global_var_1f8f9.418 to i8*), align 4
  %v1_13264 = call i32 @function_14ce0(i32 33)
  store i32 %v1_13264, i32* @r5, align 4
  %v3_13274 = call i32 @function_138f0(i32 %v1_13264, i32 ptrtoint (i32* @global_var_16e54.420 to i32), i32 33)
  store i8 33, i8* bitcast (i32* @global_var_1f900.421 to i8*), align 4
  %v0_13284 = load i32, i32* @r5, align 4
  store i32 %v0_13284, i32* @global_var_1f8fc.422, align 4
  %v0_13288 = load i32, i32* @r6, align 4
  %v1_13288 = trunc i32 %v0_13288 to i8
  store i8 %v1_13288, i8* bitcast (i32* @global_var_1f901.423 to i8*), align 4
  %v1_1328c = call i32 @function_14ce0(i32 8)
  store i32 %v1_1328c, i32* @r5, align 4
  %v4_1329c = call i32 @function_138f0(i32 %v1_1328c, i32 ptrtoint ([9 x i8]* @global_var_16e78.425 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1f908.426 to i8*), align 4
  %v0_132ac = load i32, i32* @r5, align 4
  store i32 %v0_132ac, i32* @global_var_1f904.427, align 4
  %v0_132b0 = load i32, i32* @r6, align 4
  %v1_132b0 = trunc i32 %v0_132b0 to i8
  store i8 %v1_132b0, i8* bitcast (i32* @global_var_1f909.428 to i8*), align 4
  %v1_132b4 = call i32 @function_14ce0(i32 11)
  store i32 %v1_132b4, i32* @r5, align 4
  %v4_132c4 = call i32 @function_138f0(i32 %v1_132b4, i32 ptrtoint ([12 x i8]* @global_var_16e84.430 to i32), i32 11)
  store i8 11, i8* bitcast (i32* @global_var_1f910.431 to i8*), align 4
  %v0_132d4 = load i32, i32* @r5, align 4
  store i32 %v0_132d4, i32* @global_var_1f90c.432, align 4
  %v0_132d8 = load i32, i32* @r6, align 4
  %v1_132d8 = trunc i32 %v0_132d8 to i8
  store i8 %v1_132d8, i8* bitcast (i32* @global_var_1f911.433 to i8*), align 4
  %v1_132dc = call i32 @function_14ce0(i32 6)
  store i32 %v1_132dc, i32* @r5, align 4
  %v4_132ec = call i32 @function_138f0(i32 %v1_132dc, i32 ptrtoint ([7 x i8]* @global_var_16e90.435 to i32), i32 6)
  %v0_132f4 = load i32, i32* @r7, align 4
  store i8 6, i8* bitcast (i32* @global_var_1f928.436 to i8*), align 4
  %v0_132fc = load i32, i32* @r5, align 4
  store i32 %v0_132fc, i32* @global_var_1f924.437, align 4
  %v0_13300 = load i32, i32* @r6, align 4
  %v1_13300 = trunc i32 %v0_13300 to i8
  store i8 %v1_13300, i8* bitcast (i32* @global_var_1f929.438 to i8*), align 4
  %v1_13304 = call i32 @function_14ce0(i32 %v0_132f4)
  %v0_13308 = load i32, i32* @r7, align 4
  store i32 %v1_13304, i32* @r5, align 4
  %v4_13314 = call i32 @function_138f0(i32 %v1_13304, i32 ptrtoint ([8 x i8]* @global_var_16e98.440 to i32), i32 %v0_13308)
  %v0_13318 = load i32, i32* @r7, align 4
  %v0_1331c = load i32, i32* @r5, align 4
  store i32 %v0_1331c, i32* @global_var_1f92c.441, align 4
  %v1_13320 = trunc i32 %v0_13318 to i8
  store i8 %v1_13320, i8* bitcast (i32* @global_var_1f930.442 to i8*), align 4
  %v0_13324 = load i32, i32* @r6, align 4
  %v1_13324 = trunc i32 %v0_13324 to i8
  store i8 %v1_13324, i8* bitcast (i32* @global_var_1f931.443 to i8*), align 4
  %v1_13328 = call i32 @function_14ce0(i32 %v0_13318)
  %v0_1332c = load i32, i32* @r7, align 4
  store i32 %v1_13328, i32* @r5, align 4
  %v4_13338 = call i32 @function_138f0(i32 %v1_13328, i32 ptrtoint ([8 x i8]* @global_var_16ea0.445 to i32), i32 %v0_1332c)
  %v0_13340 = load i32, i32* @r5, align 4
  store i32 %v0_13340, i32* @global_var_1f934.446, align 4
  %v0_13344 = load i32, i32* @r7, align 4
  %v1_13344 = trunc i32 %v0_13344 to i8
  store i8 %v1_13344, i8* bitcast (i32* @global_var_1f938.447 to i8*), align 4
  %v0_13348 = load i32, i32* @r6, align 4
  %v1_13348 = trunc i32 %v0_13348 to i8
  store i8 %v1_13348, i8* bitcast (i32* @global_var_1f939.448 to i8*), align 4
  %v1_1334c = call i32 @function_14ce0(i32 3)
  store i32 %v1_1334c, i32* @r5, align 4
  %v4_1335c = call i32 @function_138f0(i32 %v1_1334c, i32 ptrtoint ([4 x i8]* @global_var_16ea8.450 to i32), i32 3)
  store i8 3, i8* bitcast (i32* @global_var_1f940.451 to i8*), align 4
  %v0_1336c = load i32, i32* @r5, align 4
  store i32 %v0_1336c, i32* @global_var_1f93c.452, align 4
  %v0_13370 = load i32, i32* @r6, align 4
  %v1_13370 = trunc i32 %v0_13370 to i8
  store i8 %v1_13370, i8* bitcast (i32* @global_var_1f941.453 to i8*), align 4
  %v1_13374 = call i32 @function_14ce0(i32 19)
  store i32 %v1_13374, i32* @r5, align 4
  store i32 19, i32* %sb.global-to-local, align 4
  %v3_13388 = call i32 @function_138f0(i32 %v1_13374, i32 ptrtoint (i32* @global_var_16eac.455 to i32), i32 19)
  %v0_13390 = load i32, i32* @r5, align 4
  store i32 %v0_13390, i32* @global_var_1f944.456, align 4
  store i8 19, i8* bitcast (i32* @global_var_1f948.457 to i8*), align 4
  %v0_13398 = load i32, i32* @r6, align 4
  %v1_13398 = trunc i32 %v0_13398 to i8
  store i8 %v1_13398, i8* bitcast (i32* @global_var_1f949.458 to i8*), align 4
  %v1_1339c = call i32 @function_14ce0(i32 24)
  store i32 %v1_1339c, i32* @r5, align 4
  %v3_133ac = call i32 @function_138f0(i32 %v1_1339c, i32 ptrtoint (i32* @global_var_16ec0.460 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1f950.461 to i8*), align 4
  %v0_133bc = load i32, i32* @r5, align 4
  store i32 %v0_133bc, i32* @global_var_1f94c.462, align 4
  %v0_133c0 = load i32, i32* @r6, align 4
  %v1_133c0 = trunc i32 %v0_133c0 to i8
  store i8 %v1_133c0, i8* bitcast (i32* @global_var_1f951.463 to i8*), align 4
  %v1_133c4 = call i32 @function_14ce0(i32 9)
  %v0_133d0 = load i32, i32* @r7, align 4
  %v1_133d0 = add i32 %v0_133d0, 2
  store i32 %v1_133d0, i32* @r7, align 4
  store i32 %v1_133c4, i32* @r5, align 4
  %v4_133d8 = call i32 @function_138f0(i32 %v1_133c4, i32 ptrtoint ([10 x i8]* @global_var_16edc.465 to i32), i32 9)
  %v0_133e0 = load i32, i32* @r5, align 4
  store i32 %v0_133e0, i32* @global_var_1f954.466, align 4
  %v0_133e4 = load i32, i32* @r7, align 4
  %v1_133e4 = trunc i32 %v0_133e4 to i8
  store i8 %v1_133e4, i8* bitcast (i32* @global_var_1f958.467 to i8*), align 4
  %v0_133e8 = load i32, i32* @r6, align 4
  %v1_133e8 = trunc i32 %v0_133e8 to i8
  store i8 %v1_133e8, i8* bitcast (i32* @global_var_1f959.468 to i8*), align 4
  %v1_133ec = call i32 @function_14ce0(i32 16)
  store i32 %v1_133ec, i32* @r5, align 4
  store i32 16, i32* %fp.global-to-local, align 4
  %v3_13400 = call i32 @function_138f0(i32 %v1_133ec, i32 ptrtoint (i32* @global_var_16ee8.470 to i32), i32 16)
  %v0_13408 = load i32, i32* @r5, align 4
  store i32 %v0_13408, i32* @global_var_1f95c.471, align 4
  store i8 16, i8* bitcast (i32* @global_var_1f960.472 to i8*), align 4
  %v0_13410 = load i32, i32* @r6, align 4
  %v1_13410 = trunc i32 %v0_13410 to i8
  store i8 %v1_13410, i8* bitcast (i32* @global_var_1f961.473 to i8*), align 4
  %v1_13414 = call i32 @function_14ce0(i32 22)
  store i32 %v1_13414, i32* @r5, align 4
  %v3_13424 = call i32 @function_138f0(i32 %v1_13414, i32 ptrtoint (i32* @global_var_16efc.475 to i32), i32 22)
  store i8 22, i8* bitcast (i32* @global_var_1f968.476 to i8*), align 4
  %v0_13434 = load i32, i32* @r5, align 4
  store i32 %v0_13434, i32* @global_var_1f964.477, align 4
  %v0_13438 = load i32, i32* @r6, align 4
  %v1_13438 = trunc i32 %v0_13438 to i8
  store i8 %v1_13438, i8* bitcast (i32* @global_var_1f969.478 to i8*), align 4
  %v1_1343c = call i32 @function_14ce0(i32 21)
  store i32 %v1_1343c, i32* @r5, align 4
  %v3_1344c = call i32 @function_138f0(i32 %v1_1343c, i32 ptrtoint (i32* @global_var_16f14.480 to i32), i32 21)
  store i8 21, i8* bitcast (i32* @global_var_1f970.481 to i8*), align 4
  %v0_1345c = load i32, i32* @r5, align 4
  store i32 %v0_1345c, i32* @global_var_1f96c.482, align 4
  %v0_13460 = load i32, i32* @r6, align 4
  %v1_13460 = trunc i32 %v0_13460 to i8
  store i8 %v1_13460, i8* bitcast (i32* @global_var_1f971.483 to i8*), align 4
  %v1_13464 = call i32 @function_14ce0(i32 17)
  store i32 %v1_13464, i32* @r5, align 4
  %v4_13474 = call i32 @function_138f0(i32 %v1_13464, i32 ptrtoint ([18 x i8]* @global_var_16f2c.485 to i32), i32 17)
  %v0_1347c = load i32, i32* %r8.global-to-local, align 4
  store i8 17, i8* bitcast (i32* @global_var_1f978.486 to i8*), align 4
  %v0_13484 = load i32, i32* @r5, align 4
  store i32 %v0_13484, i32* @global_var_1f974.487, align 4
  %v0_13488 = load i32, i32* @r6, align 4
  %v1_13488 = trunc i32 %v0_13488 to i8
  store i8 %v1_13488, i8* bitcast (i32* @global_var_1f979.488 to i8*), align 4
  %v1_1348c = call i32 @function_14ce0(i32 %v0_1347c)
  %v0_13494 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_1348c, i32* @r5, align 4
  %v3_1349c = call i32 @function_138f0(i32 %v1_1348c, i32 ptrtoint (i32* @global_var_16f40.490 to i32), i32 %v0_13494)
  %v0_134a4 = load i32, i32* @r5, align 4
  store i32 %v0_134a4, i32* @global_var_1f97c.491, align 4
  %v1_134a8 = trunc i32 %v0_13494 to i8
  store i8 %v1_134a8, i8* bitcast (i32* @global_var_1f980.492 to i8*), align 4
  %v0_134ac = load i32, i32* @r6, align 4
  %v1_134ac = trunc i32 %v0_134ac to i8
  store i8 %v1_134ac, i8* bitcast (i32* @global_var_1f981.493 to i8*), align 4
  %v1_134b0 = call i32 @function_14ce0(i32 23)
  store i32 %v1_134b0, i32* @r5, align 4
  %v3_134c0 = call i32 @function_138f0(i32 %v1_134b0, i32 ptrtoint (i32* @global_var_16f50.495 to i32), i32 23)
  store i8 23, i8* bitcast (i32* @global_var_1f988.496 to i8*), align 4
  %v0_134d0 = load i32, i32* @r5, align 4
  store i32 %v0_134d0, i32* @global_var_1f984.497, align 4
  %v0_134d4 = load i32, i32* @r6, align 4
  %v1_134d4 = trunc i32 %v0_134d4 to i8
  store i8 %v1_134d4, i8* bitcast (i32* @global_var_1f989.498 to i8*), align 4
  %v1_134d8 = call i32 @function_14ce0(i32 83)
  store i32 %v1_134d8, i32* @r5, align 4
  %v3_134e8 = call i32 @function_138f0(i32 %v1_134d8, i32 ptrtoint (i32* @global_var_16f68.500 to i32), i32 83)
  store i8 83, i8* bitcast (i32* @global_var_1f990.501 to i8*), align 4
  %v0_134f8 = load i32, i32* @r5, align 4
  store i32 %v0_134f8, i32* @global_var_1f98c.502, align 4
  %v0_134fc = load i32, i32* @r6, align 4
  %v1_134fc = trunc i32 %v0_134fc to i8
  store i8 %v1_134fc, i8* bitcast (i32* @global_var_1f991.503 to i8*), align 4
  %v1_13500 = call i32 @function_14ce0(i32 32)
  store i32 %v1_13500, i32* @r5, align 4
  %v3_13510 = call i32 @function_138f0(i32 %v1_13500, i32 ptrtoint (i32* @global_var_16fbc.505 to i32), i32 32)
  store i8 32, i8* bitcast (i32* @global_var_1f998.506 to i8*), align 4
  %v0_13520 = load i32, i32* @r5, align 4
  store i32 %v0_13520, i32* @global_var_1f994.507, align 4
  %v0_13524 = load i32, i32* @r6, align 4
  %v1_13524 = trunc i32 %v0_13524 to i8
  store i8 %v1_13524, i8* bitcast (i32* @global_var_1f999.508 to i8*), align 4
  %v1_13528 = call i32 @function_14ce0(i32 48)
  store i32 %v1_13528, i32* @r5, align 4
  %v3_13538 = call i32 @function_138f0(i32 %v1_13528, i32 ptrtoint (i32* @global_var_16fe0.510 to i32), i32 48)
  %v0_13540 = load i32, i32* %r8.global-to-local, align 4
  store i8 48, i8* bitcast (i32* @global_var_1f9a0.511 to i8*), align 4
  %v0_13548 = load i32, i32* @r5, align 4
  store i32 %v0_13548, i32* @global_var_1f99c.512, align 4
  %v0_1354c = load i32, i32* @r6, align 4
  %v1_1354c = trunc i32 %v0_1354c to i8
  store i8 %v1_1354c, i8* bitcast (i32* @global_var_1f9a1.513 to i8*), align 4
  %v1_13550 = call i32 @function_14ce0(i32 %v0_13540)
  %v0_13558 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_13550, i32* @r5, align 4
  %v3_13560 = call i32 @function_138f0(i32 %v1_13550, i32 ptrtoint (i32* @global_var_17014.515 to i32), i32 %v0_13558)
  %v0_13564 = load i32, i32* @r7, align 4
  %v0_13568 = load i32, i32* @r5, align 4
  store i32 %v0_13568, i32* @global_var_1f9a4.516, align 4
  %v1_1356c = trunc i32 %v0_13558 to i8
  store i8 %v1_1356c, i8* bitcast (i32* @global_var_1f9a8.517 to i8*), align 4
  %v0_13570 = load i32, i32* @r6, align 4
  %v1_13570 = trunc i32 %v0_13570 to i8
  store i8 %v1_13570, i8* bitcast (i32* @global_var_1f9a9.518 to i8*), align 4
  %v1_13574 = call i32 @function_14ce0(i32 %v0_13564)
  %v0_13578 = load i32, i32* @r7, align 4
  store i32 %v1_13574, i32* @r5, align 4
  %v3_13584 = call i32 @function_138f0(i32 %v1_13574, i32 ptrtoint (i32* @global_var_17024.520 to i32), i32 %v0_13578)
  %v0_13588 = load i32, i32* %sl.global-to-local, align 4
  %v0_1358c = load i32, i32* @r5, align 4
  store i32 %v0_1358c, i32* @global_var_1f9ac.521, align 4
  %v0_13590 = load i32, i32* @r7, align 4
  %v1_13590 = trunc i32 %v0_13590 to i8
  store i8 %v1_13590, i8* bitcast (i32* @global_var_1f9b0.522 to i8*), align 4
  %v0_13594 = load i32, i32* @r6, align 4
  %v1_13594 = trunc i32 %v0_13594 to i8
  store i8 %v1_13594, i8* bitcast (i32* @global_var_1f9b1.523 to i8*), align 4
  %v1_13598 = call i32 @function_14ce0(i32 %v0_13588)
  %v0_135a0 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_13598, i32* @r5, align 4
  %v3_135a8 = call i32 @function_138f0(i32 %v1_13598, i32 ptrtoint (i32* @global_var_17030.525 to i32), i32 %v0_135a0)
  %v0_135ac = load i32, i32* %r8.global-to-local, align 4
  %v0_135b0 = load i32, i32* @r5, align 4
  store i32 %v0_135b0, i32* @global_var_1f9b4.526, align 4
  %v1_135b4 = trunc i32 %v0_135a0 to i8
  store i8 %v1_135b4, i8* bitcast (i32* @global_var_1f9b8.527 to i8*), align 4
  %v0_135b8 = load i32, i32* @r6, align 4
  %v1_135b8 = trunc i32 %v0_135b8 to i8
  store i8 %v1_135b8, i8* bitcast (i32* @global_var_1f9b9.528 to i8*), align 4
  %v1_135bc = call i32 @function_14ce0(i32 %v0_135ac)
  %v0_135c4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_135bc, i32* @r5, align 4
  %v3_135cc = call i32 @function_138f0(i32 %v1_135bc, i32 ptrtoint (i32* @global_var_1703c.530 to i32), i32 %v0_135c4)
  %v0_135d0 = load i32, i32* %fp.global-to-local, align 4
  %v0_135d4 = load i32, i32* @r5, align 4
  store i32 %v0_135d4, i32* @global_var_1f9bc.531, align 4
  %v1_135d8 = trunc i32 %v0_135c4 to i8
  store i8 %v1_135d8, i8* bitcast (i32* @global_var_1f9c0.532 to i8*), align 4
  %v0_135dc = load i32, i32* @r6, align 4
  %v1_135dc = trunc i32 %v0_135dc to i8
  store i8 %v1_135dc, i8* bitcast (i32* @global_var_1f9c1.533 to i8*), align 4
  %v1_135e0 = call i32 @function_14ce0(i32 %v0_135d0)
  %v0_135e8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_135e0, i32* @r5, align 4
  %v3_135f0 = call i32 @function_138f0(i32 %v1_135e0, i32 ptrtoint (i32* @global_var_1704c.535 to i32), i32 %v0_135e8)
  %v0_135f4 = load i32, i32* %sb.global-to-local, align 4
  %v0_135f8 = load i32, i32* @r5, align 4
  store i32 %v0_135f8, i32* @global_var_1f9c4.536, align 4
  %v1_135fc = trunc i32 %v0_135e8 to i8
  store i8 %v1_135fc, i8* bitcast (i32* @global_var_1f9c8.537 to i8*), align 4
  %v0_13600 = load i32, i32* @r6, align 4
  %v1_13600 = trunc i32 %v0_13600 to i8
  store i8 %v1_13600, i8* bitcast (i32* @global_var_1f9c9.538 to i8*), align 4
  %v1_13604 = call i32 @function_14ce0(i32 %v0_135f4)
  %v0_1360c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_13604, i32* @r5, align 4
  %v3_13614 = call i32 @function_138f0(i32 %v1_13604, i32 ptrtoint (i32* @global_var_17060.540 to i32), i32 %v0_1360c)
  %v0_1361c = load i32, i32* @r5, align 4
  store i32 %v0_1361c, i32* @global_var_1f9cc.541, align 4
  %v1_13620 = trunc i32 %v0_1360c to i8
  store i8 %v1_13620, i8* bitcast (i32* @global_var_1f9d0.542 to i8*), align 4
  %v0_13624 = load i32, i32* @r6, align 4
  %v1_13624 = trunc i32 %v0_13624 to i8
  store i8 %v1_13624, i8* bitcast (i32* @global_var_1f9d1.543 to i8*), align 4
  %v1_13628 = call i32 @function_14ce0(i32 8)
  store i32 %v1_13628, i32* @r5, align 4
  %v4_13638 = call i32 @function_138f0(i32 %v1_13628, i32 ptrtoint ([9 x i8]* @global_var_17074.545 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1f9d8.546 to i8*), align 4
  %v0_13648 = load i32, i32* @r5, align 4
  store i32 %v0_13648, i32* @global_var_1f9d4.547, align 4
  %v0_1364c = load i32, i32* @r6, align 4
  %v1_1364c = trunc i32 %v0_1364c to i8
  store i8 %v1_1364c, i8* bitcast (i32* @global_var_1f9d9.548 to i8*), align 4
  %v1_13650 = call i32 @function_14ce0(i32 11)
  store i32 %v1_13650, i32* @r5, align 4
  %v3_13660 = call i32 @function_138f0(i32 %v1_13650, i32 ptrtoint (i32* @global_var_16f5c.550 to i32), i32 11)
  %v0_13668 = load i32, i32* %r8.global-to-local, align 4
  store i8 11, i8* bitcast (i32* @global_var_1f9e0.551 to i8*), align 4
  %v0_13670 = load i32, i32* @r5, align 4
  store i32 %v0_13670, i32* @global_var_1f9dc.552, align 4
  %v0_13674 = load i32, i32* @r6, align 4
  %v1_13674 = trunc i32 %v0_13674 to i8
  store i8 %v1_13674, i8* bitcast (i32* @global_var_1f9e1.553 to i8*), align 4
  %v1_13678 = call i32 @function_14ce0(i32 %v0_13668)
  %v0_13680 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_13678, i32* @r5, align 4
  %v3_13688 = call i32 @function_138f0(i32 %v1_13678, i32 ptrtoint (i32* @global_var_17080.555 to i32), i32 %v0_13680)
  %v0_13690 = load i32, i32* @r5, align 4
  store i32 %v0_13690, i32* @global_var_1f9e4.556, align 4
  %v1_13694 = trunc i32 %v0_13680 to i8
  store i8 %v1_13694, i8* bitcast (i32* @global_var_1f9e8.557 to i8*), align 4
  %v0_13698 = load i32, i32* @r6, align 4
  %v1_13698 = trunc i32 %v0_13698 to i8
  store i8 %v1_13698, i8* bitcast (i32* @global_var_1f9e9.558 to i8*), align 4
  %v1_1369c = call i32 @function_14ce0(i32 18)
  store i32 %v1_1369c, i32* @r5, align 4
  %v3_136ac = call i32 @function_138f0(i32 %v1_1369c, i32 ptrtoint (i32* @global_var_17090.560 to i32), i32 18)
  store i8 18, i8* bitcast (i32* @global_var_1f9f0.561 to i8*), align 4
  %v0_136bc = load i32, i32* @r5, align 4
  store i32 %v0_136bc, i32* @global_var_1f9ec.562, align 4
  %v0_136c0 = load i32, i32* @r6, align 4
  %v1_136c0 = trunc i32 %v0_136c0 to i8
  store i8 %v1_136c0, i8* bitcast (i32* @global_var_1f9f1.563 to i8*), align 4
  %v1_136c4 = call i32 @function_14ce0(i32 25)
  store i32 %v1_136c4, i32* @r5, align 4
  %v3_136d4 = call i32 @function_138f0(i32 %v1_136c4, i32 ptrtoint (i32* @global_var_170a4.565 to i32), i32 25)
  store i8 25, i8* bitcast (i32* @global_var_1f9f8.566 to i8*), align 4
  %v0_136e4 = load i32, i32* @r5, align 4
  store i32 %v0_136e4, i32* @global_var_1f9f4.567, align 4
  %v0_136e8 = load i32, i32* @r6, align 4
  %v1_136e8 = trunc i32 %v0_136e8 to i8
  store i8 %v1_136e8, i8* bitcast (i32* @global_var_1f9f9.568 to i8*), align 4
  %v1_136ec = call i32 @function_14ce0(i32 111)
  store i32 111, i32* @r5, align 4
  store i32 %v1_136ec, i32* @r7, align 4
  %v3_13700 = call i32 @function_138f0(i32 %v1_136ec, i32 ptrtoint (i32* @global_var_170c0.570 to i32), i32 111)
  %v0_13704 = load i32, i32* @r5, align 4
  %v0_13708 = load i32, i32* @r7, align 4
  store i32 %v0_13708, i32* @global_var_1f9fc.571, align 4
  %v1_1370c = trunc i32 %v0_13704 to i8
  store i8 %v1_1370c, i8* bitcast (i32* @global_var_1fa00.572 to i8*), align 4
  %v0_13710 = load i32, i32* @r6, align 4
  %v1_13710 = trunc i32 %v0_13710 to i8
  store i8 %v1_13710, i8* bitcast (i32* @global_var_1fa01.573 to i8*), align 4
  %v1_13714 = call i32 @function_14ce0(i32 %v0_13704)
  %v0_13718 = load i32, i32* @r5, align 4
  store i32 %v1_13714, i32* @r7, align 4
  %v3_13724 = call i32 @function_138f0(i32 %v1_13714, i32 ptrtoint (i32* @global_var_17130.575 to i32), i32 %v0_13718)
  %v0_1372c = load i32, i32* @r7, align 4
  store i32 %v0_1372c, i32* @global_var_1fa04.576, align 4
  %v0_13730 = load i32, i32* @r5, align 4
  %v1_13730 = trunc i32 %v0_13730 to i8
  store i8 %v1_13730, i8* bitcast (i32* @global_var_1fa08.577 to i8*), align 4
  %v0_13734 = load i32, i32* @r6, align 4
  %v1_13734 = trunc i32 %v0_13734 to i8
  store i8 %v1_13734, i8* bitcast (i32* @global_var_1fa09.578 to i8*), align 4
  %v1_13738 = call i32 @function_14ce0(i32 110)
  %v0_1373c = load i32, i32* @r5, align 4
  %v1_1373c = add i32 %v0_1373c, -1
  store i32 %v1_1373c, i32* @r5, align 4
  store i32 %v1_13738, i32* @r7, align 4
  %v3_1374c = call i32 @function_138f0(i32 %v1_13738, i32 ptrtoint (i32* @global_var_171a0.580 to i32), i32 %v1_1373c)
  %v0_13750 = load i32, i32* @r5, align 4
  %v0_13754 = load i32, i32* @r7, align 4
  store i32 %v0_13754, i32* @global_var_1fa0c.581, align 4
  %v1_13758 = trunc i32 %v0_13750 to i8
  store i8 %v1_13758, i8* bitcast (i32* @global_var_1fa10.582 to i8*), align 4
  %v0_1375c = load i32, i32* @r6, align 4
  %v1_1375c = trunc i32 %v0_1375c to i8
  store i8 %v1_1375c, i8* bitcast (i32* @global_var_1fa11.583 to i8*), align 4
  %v1_13760 = call i32 @function_14ce0(i32 %v0_13750)
  %v0_13764 = load i32, i32* @r5, align 4
  store i32 %v1_13760, i32* @r7, align 4
  %v3_13770 = call i32 @function_138f0(i32 %v1_13760, i32 ptrtoint (i32* @global_var_17210.585 to i32), i32 %v0_13764)
  %v0_13778 = load i32, i32* @r5, align 4
  %v1_13778 = trunc i32 %v0_13778 to i8
  store i8 %v1_13778, i8* bitcast (i32* @global_var_1fa18.586 to i8*), align 4
  %v0_1377c = load i32, i32* @r7, align 4
  store i32 %v0_1377c, i32* @global_var_1fa14.587, align 4
  %v0_13780 = load i32, i32* @r6, align 4
  %v1_13780 = trunc i32 %v0_13780 to i8
  store i8 %v1_13780, i8* bitcast (i32* @global_var_1fa19.588 to i8*), align 4
  %v1_13784 = call i32 @function_14ce0(i32 117)
  %v3_13794 = call i32 @function_138f0(i32 %v1_13784, i32 ptrtoint (i32* @global_var_17280.590 to i32), i32 117)
  %v0_1379c = load i32, i32* @r6, align 4
  %v1_1379c = trunc i32 %v0_1379c to i8
  store i8 %v1_1379c, i8* bitcast (i32* @global_var_1fa21.591 to i8*), align 4
  store i32 %v1_13784, i32* @global_var_1fa1c.592, align 4
  store i8 117, i8* bitcast (i32* @global_var_1fa20.593 to i8*), align 4
  ret i32 %v3_13794

; uselistorder directives
  uselistorder i32 %v1_13760, { 1, 0 }
  uselistorder i32 %v1_13738, { 1, 0 }
  uselistorder i32 %v1_13714, { 1, 0 }
  uselistorder i32 %v1_136ec, { 1, 0 }
  uselistorder i32 %v1_13678, { 1, 0 }
  uselistorder i32 %v1_13604, { 1, 0 }
  uselistorder i32 %v1_135e0, { 1, 0 }
  uselistorder i32 %v1_135bc, { 1, 0 }
  uselistorder i32 %v1_13598, { 1, 0 }
  uselistorder i32 %v1_13574, { 1, 0 }
  uselistorder i32 %v1_13550, { 1, 0 }
  uselistorder i32 %v1_1348c, { 1, 0 }
  uselistorder i32 %v1_133c4, { 1, 0 }
  uselistorder i32 %v1_13328, { 1, 0 }
  uselistorder i32 %v1_13304, { 1, 0 }
  uselistorder i32 %v1_13240, { 1, 0 }
  uselistorder i32 %v1_13218, { 1, 0 }
  uselistorder i32 %v1_131a4, { 1, 0 }
  uselistorder i32 %v1_13104, { 1, 0 }
  uselistorder i32 %v1_13090, { 1, 0 }
  uselistorder i32 %v1_1306c, { 1, 0 }
  uselistorder i32 %v1_13044, { 1, 0 }
  uselistorder i32 %v1_13010, { 1, 0 }
  uselistorder i32 117, { 1, 0 }
  uselistorder i32 111, { 1, 2, 0 }
  uselistorder i8 23, { 1, 0 }
  uselistorder i8 16, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i8 3, { 2, 1, 0 }
  uselistorder i8 6, { 6, 7, 4, 8, 9, 5, 10, 0, 11, 12, 1, 2, 3 }
  uselistorder i8 4, { 4, 3, 2, 0, 1 }
  uselistorder i8 11, { 3, 4, 5, 2, 0, 1 }
  uselistorder i8 5, { 13, 14, 0, 1, 11, 2, 3, 4, 5, 6, 7, 8, 9, 12, 15, 10 }
  uselistorder i32 (i32, i32, i32)* @function_138f0, { 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 2, 1, 9, 8, 7, 6, 5, 4, 3, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1f884.339 to i32), { 5, 0, 1, 2, 3, 4 }
}

define i32 @function_13874(i8* %arg1) local_unnamed_addr {
dec_label_pc_13874:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r2, align 4
  %v3_13878 = load i8, i8* %arg1, align 1
  %v4_13878 = zext i8 %v3_13878 to i32
  %v2_1387c = icmp eq i8 %v3_13878, 0
  br i1 %v2_1387c, label %dec_label_pc_13898, label %bb

dec_label_pc_13898:                               ; preds = %dec_label_pc_13888, %dec_label_pc_13874
  %merge = phi i32 [ %v4_13878, %dec_label_pc_13874 ], [ %v1_13888, %dec_label_pc_13888 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_13874
  br label %dec_label_pc_13888

dec_label_pc_13888:                               ; preds = %dec_label_pc_13888, %bb
  %v0_13888 = phi i32 [ %v1_13888, %dec_label_pc_13888 ], [ 0, %bb ]
  %v1_13888 = add i32 %v0_13888, 1
  %v2_1388c = add i32 %v1_13888, %tmp
  %v3_1388c = inttoptr i32 %v2_1388c to i8*
  %v4_1388c = load i8, i8* %v3_1388c, align 1
  %v2_13890 = icmp eq i8 %v4_1388c, 0
  br i1 %v2_13890, label %dec_label_pc_13898, label %dec_label_pc_13888

; uselistorder directives
  uselistorder i32 %v1_13888, { 1, 0, 2 }
}

define i32 @function_1389c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1389c:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_1389c = load i8, i8* %arg1, align 1
  %v3_1389c = zext i8 %v2_1389c to i32
  %v2_138a0 = icmp eq i8 %v2_1389c, 0
  br i1 %v2_138a0, label %dec_label_pc_138e4, label %dec_label_pc_138a8

dec_label_pc_138a8:                               ; preds = %dec_label_pc_1389c
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_138ac

dec_label_pc_138ac:                               ; preds = %dec_label_pc_138ac, %dec_label_pc_138a8
  %v0_138ac = phi i32 [ %v1_138ac, %dec_label_pc_138ac ], [ 0, %dec_label_pc_138a8 ]
  %v1_138ac = add i32 %v0_138ac, 1
  store i32 %v1_138ac, i32* %ip.global-to-local, align 4
  %v2_138b0 = add i32 %v1_138ac, %tmp
  %v3_138b0 = inttoptr i32 %v2_138b0 to i8*
  %v4_138b0 = load i8, i8* %v3_138b0, align 1
  %v2_138b4 = icmp eq i8 %v4_138b0, 0
  br i1 %v2_138b4, label %dec_label_pc_138bc, label %dec_label_pc_138ac

dec_label_pc_138bc:                               ; preds = %dec_label_pc_138ac
  %v7_138bc = icmp eq i32 %v0_138ac, -2
  br i1 %v7_138bc, label %dec_label_pc_138dc, label %dec_label_pc_138c8.preheader

dec_label_pc_138c8.preheader:                     ; preds = %dec_label_pc_138bc, %dec_label_pc_138e4
  %storemerge = phi i32 [ %v3_1389c, %dec_label_pc_138e4 ], [ %v1_138ac, %dec_label_pc_138bc ]
  %v2_138d4.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_138c8

dec_label_pc_138c8:                               ; preds = %dec_label_pc_138c8.dec_label_pc_138c8_crit_edge, %dec_label_pc_138c8.preheader
  %v2_138d4 = phi i32 [ %v5_138d4, %dec_label_pc_138c8.dec_label_pc_138c8_crit_edge ], [ %v2_138d4.pre, %dec_label_pc_138c8.preheader ]
  %v0_138cc = phi i32 [ %v0_138cc.pre, %dec_label_pc_138c8.dec_label_pc_138c8_crit_edge ], [ %tmp, %dec_label_pc_138c8.preheader ]
  %v0_138c8 = phi i32 [ %v0_138c8.pre, %dec_label_pc_138c8.dec_label_pc_138c8_crit_edge ], [ %storemerge, %dec_label_pc_138c8.preheader ]
  %v1_138c8 = add i32 %v0_138c8, -1
  store i32 %v1_138c8, i32* @r2, align 4
  %v1_138cc = inttoptr i32 %v0_138cc to i8*
  %v2_138cc = load i8, i8* %v1_138cc, align 1
  %v5_138cc = add i32 %v0_138cc, 1
  store i32 %v5_138cc, i32* %r1.global-to-local, align 4
  %v3_138d0 = icmp eq i32 %v0_138c8, 0
  %v3_138d4 = inttoptr i32 %v2_138d4 to i8*
  store i8 %v2_138cc, i8* %v3_138d4, align 1
  %v4_138d4 = load i32, i32* @r0, align 4
  %v5_138d4 = add i32 %v4_138d4, 1
  store i32 %v5_138d4, i32* @r0, align 4
  br i1 %v3_138d0, label %dec_label_pc_138dc.loopexit, label %dec_label_pc_138c8.dec_label_pc_138c8_crit_edge

dec_label_pc_138c8.dec_label_pc_138c8_crit_edge:  ; preds = %dec_label_pc_138c8
  %v0_138c8.pre = load i32, i32* @r2, align 4
  %v0_138cc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_138c8

dec_label_pc_138dc.loopexit:                      ; preds = %dec_label_pc_138c8
  %v0_138dc.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_138dc

dec_label_pc_138dc:                               ; preds = %dec_label_pc_138dc.loopexit, %dec_label_pc_138bc
  %v0_138dc = phi i32 [ %v0_138dc.pre, %dec_label_pc_138dc.loopexit ], [ %v1_138ac, %dec_label_pc_138bc ]
  ret i32 %v0_138dc

dec_label_pc_138e4:                               ; preds = %dec_label_pc_1389c
  store i32 %v3_1389c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_138c8.preheader

; uselistorder directives
  uselistorder i32 %v5_138d4, { 1, 0 }
  uselistorder i32 %v0_138cc, { 1, 0 }
  uselistorder i32 %v1_138ac, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_1389c, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_138c8.preheader, { 1, 0 }
}

define i32 @function_138f0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_138f0:
  %ip.global-to-local = alloca i32, align 4
  %v2_138f0 = icmp eq i32 %arg3, 0
  br i1 %v2_138f0, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_138fc, %dec_label_pc_138f0
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_138f0
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_138fc

dec_label_pc_138fc:                               ; preds = %dec_label_pc_138fc, %bb
  %v0_138fc = phi i32 [ %v1_13904, %dec_label_pc_138fc ], [ 0, %bb ]
  %v2_138fc = add i32 %v0_138fc, %arg2
  %v3_138fc = inttoptr i32 %v2_138fc to i8*
  %v4_138fc = load i8, i8* %v3_138fc, align 1
  %v4_13900 = add i32 %v0_138fc, %arg1
  %v5_13900 = inttoptr i32 %v4_13900 to i8*
  store i8 %v4_138fc, i8* %v5_13900, align 1
  %v0_13904 = load i32, i32* %ip.global-to-local, align 4
  %v1_13904 = add i32 %v0_13904, 1
  store i32 %v1_13904, i32* %ip.global-to-local, align 4
  %v9_13908 = icmp eq i32 %v1_13904, %arg3
  br i1 %v9_13908, label %.loopexit, label %dec_label_pc_138fc

; uselistorder directives
  uselistorder i32 %v1_13904, { 1, 2, 0 }
}

define i32 @function_13914(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13914:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v2_13914 = icmp eq i32 %arg2, 0
  br i1 %v2_13914, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_13924, %dec_label_pc_13914
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_13914
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13924

dec_label_pc_13924:                               ; preds = %dec_label_pc_13924.dec_label_pc_13924_crit_edge, %bb
  %v2_13924 = phi i32 [ %v1_13928, %dec_label_pc_13924.dec_label_pc_13924_crit_edge ], [ 0, %bb ]
  %v0_13924.off0 = phi i8 [ %extract.t, %dec_label_pc_13924.dec_label_pc_13924_crit_edge ], [ 0, %bb ]
  %v4_13924 = add i32 %v2_13924, %arg1
  %v5_13924 = inttoptr i32 %v4_13924 to i8*
  store i8 %v0_13924.off0, i8* %v5_13924, align 1
  %v0_13928 = load i32, i32* %r3.global-to-local, align 4
  %v1_13928 = add i32 %v0_13928, 1
  store i32 %v1_13928, i32* %r3.global-to-local, align 4
  %v9_1392c = icmp eq i32 %v1_13928, %arg2
  br i1 %v9_1392c, label %.loopexit, label %dec_label_pc_13924.dec_label_pc_13924_crit_edge

dec_label_pc_13924.dec_label_pc_13924_crit_edge:  ; preds = %dec_label_pc_13924
  %v0_13924.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_13924.pre to i8
  br label %dec_label_pc_13924

; uselistorder directives
  uselistorder i32 %v1_13928, { 1, 2, 0 }
}

define i32 @function_13938(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13938:
  store i32 %arg4, i32* @lr, align 4
  %v7_1394c = icmp sgt i32 %arg4, %arg2
  br i1 %v7_1394c, label %dec_label_pc_13950, label %dec_label_pc_13958

dec_label_pc_13950:                               ; preds = %dec_label_pc_1396c, %dec_label_pc_13938, %dec_label_pc_13958
  ret i32 -1

dec_label_pc_13958:                               ; preds = %dec_label_pc_13938
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_13950, label %dec_label_pc_13960

dec_label_pc_13960:                               ; preds = %dec_label_pc_13958
  br label %dec_label_pc_13978

dec_label_pc_1396c:                               ; preds = %dec_label_pc_13990, %dec_label_pc_13978
  %v1_1396c = add i32 %v0_13998, 1
  %v9_13970 = icmp eq i32 %v1_1396c, %arg2
  br i1 %v9_13970, label %dec_label_pc_13950, label %dec_label_pc_13978

dec_label_pc_13978:                               ; preds = %dec_label_pc_1396c, %dec_label_pc_13960
  %v0_13998 = phi i32 [ %v1_1396c, %dec_label_pc_1396c ], [ 0, %dec_label_pc_13960 ]
  %v0_13984 = phi i32 [ %v1_13984., %dec_label_pc_1396c ], [ 0, %dec_label_pc_13960 ]
  %v2_13978 = add i32 %v0_13984, %arg3
  %v3_13978 = inttoptr i32 %v2_13978 to i8*
  %v4_13978 = load i8, i8* %v3_13978, align 1
  %v2_1397c = add i32 %v0_13998, %arg1
  %v3_1397c = inttoptr i32 %v2_1397c to i8*
  %v4_1397c = load i8, i8* %v3_1397c, align 1
  %v9_13980 = icmp eq i8 %v4_1397c, %v4_13978
  %v1_13984 = add i32 %v0_13984, 1
  %v1_13984. = select i1 %v9_13980, i32 %v1_13984, i32 0
  br i1 %v9_13980, label %dec_label_pc_13990, label %dec_label_pc_1396c

dec_label_pc_13990:                               ; preds = %dec_label_pc_13978
  %v9_13990 = icmp eq i32 %v1_13984., %arg4
  br i1 %v9_13990, label %dec_label_pc_13998, label %dec_label_pc_1396c

dec_label_pc_13998:                               ; preds = %dec_label_pc_13990
  %v1_13998 = add i32 %v0_13998, 1
  ret i32 %v1_13998

; uselistorder directives
  uselistorder i1 %v9_13980, { 1, 0 }
  uselistorder i32 %v0_13984, { 1, 0 }
  uselistorder i32 %arg4, { 0, 2, 1 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_13950, { 0, 2, 1 }
}

define i32 @function_139a0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_139a0:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_139a0 = load i32, i32* @r4, align 4
  store i32 %v3_139a0, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_139ac

dec_label_pc_139ac:                               ; preds = %.thread, %dec_label_pc_139c4, %bb, %dec_label_pc_139a0
  %v0_139ac = phi i32 [ %tmp, %dec_label_pc_139a0 ], [ %v5_139ac, %bb ], [ %v5_139ac, %dec_label_pc_139c4 ], [ %v5_139ac, %.thread ]
  %v1_139ac = inttoptr i32 %v0_139ac to i8*
  %v2_139ac = load i8, i8* %v1_139ac, align 1
  %v3_139ac = zext i8 %v2_139ac to i32
  %v5_139ac = add i32 %v0_139ac, 1
  store i32 %v5_139ac, i32* %r5.global-to-local, align 4
  %v7_139b4 = icmp eq i8 %v2_139ac, 9
  br i1 %v7_139b4, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_139ac
  store i32 %v3_139ac, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_139ac

bb:                                               ; preds = %dec_label_pc_139ac
  %v8_139b8 = icmp eq i8 %v2_139ac, 32
  store i32 %v3_139ac, i32* %r4.global-to-local, align 4
  br i1 %v8_139b8, label %dec_label_pc_139ac, label %dec_label_pc_139c4

dec_label_pc_139c4:                               ; preds = %bb
  %v7_139c4 = icmp eq i8 %v2_139ac, 10
  br i1 %v7_139c4, label %dec_label_pc_139ac, label %dec_label_pc_139cc

dec_label_pc_139cc:                               ; preds = %dec_label_pc_139c4
  %v7_139cc = icmp eq i8 %v2_139ac, 45
  br i1 %v7_139cc, label %dec_label_pc_13aac, label %dec_label_pc_139d4

dec_label_pc_139d4:                               ; preds = %dec_label_pc_139cc
  %v7_139d4 = icmp eq i8 %v2_139ac, 43
  br i1 %v7_139d4, label %bb48, label %dec_label_pc_139e4

bb48:                                             ; preds = %dec_label_pc_139d4
  %v2_139d8 = inttoptr i32 %v5_139ac to i8*
  %v3_139d8 = load i8, i8* %v2_139d8, align 1
  %v4_139d8 = zext i8 %v3_139d8 to i32
  store i32 %v4_139d8, i32* %r4.global-to-local, align 4
  %v6_139d8 = add i32 %v0_139ac, 2
  store i32 %v6_139d8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_139e4

dec_label_pc_139e4:                               ; preds = %bb48, %dec_label_pc_139d4, %dec_label_pc_13aac
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_13aac ], [ 2147483647, %dec_label_pc_139d4 ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_13aac ], [ 0, %dec_label_pc_139d4 ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_139ec = call i32 @function_13f90(i32 %storemerge1, i32 %arg2)
  %v0_139f0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_139f0, i32* @r1, align 4
  store i32 %v2_139ec, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_139fc = call i32 @function_13e80()
  store i32 %v0_139fc, i32* @lr, align 4
  %v0_13a0c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13a0c

dec_label_pc_13a0c:                               ; preds = %.thread8, %dec_label_pc_139e4
  %v2_13a8811 = phi i32 [ %v1_13aa426, %.thread8 ], [ 0, %dec_label_pc_139e4 ]
  %v1_13a64 = phi i32 [ %v0_13a9824, %.thread8 ], [ 0, %dec_label_pc_139e4 ]
  %v1_13a4c = phi i32 [ %v3_13a90, %.thread8 ], [ %v0_13a0c.pre, %dec_label_pc_139e4 ]
  %v1_13a0c = urem i32 %v1_13a4c, 256
  %v1_13a10 = add nsw i32 %v1_13a0c, -48
  %v1_13a18 = add nsw i32 %v1_13a0c, -97
  %v1_13a1c = add i32 %v1_13a4c, -48
  %v1_13a20 = add nsw i32 %v1_13a0c, -65
  %tmp71 = icmp ult i32 %v1_13a10, 10
  br i1 %tmp71, label %dec_label_pc_13a50, label %dec_label_pc_13a28

dec_label_pc_13a28:                               ; preds = %dec_label_pc_13a0c
  %v2_13a28 = icmp ugt i32 %v1_13a20, 24
  %v7_13a28 = icmp eq i32 %v1_13a20, 25
  %v2_13a2c = xor i1 %v7_13a28, true
  %v3_13a2c = and i1 %v2_13a28, %v2_13a2c
  br i1 %v3_13a2c, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_13a28
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_13a28, %bb49
  %v0_13a4020 = phi i32 [ %v1_13a1c, %dec_label_pc_13a28 ], [ 0, %bb49 ]
  %v2_13a30 = xor i1 %v2_13a28, true
  %v3_13a30 = or i1 %v7_13a28, %v2_13a30
  br i1 %v3_13a30, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_13a40 = phi i32 [ %v0_13a4020, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_13a2c, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_13a38 = icmp ugt i32 %v1_13a18, 24
  %v11_13a38 = icmp eq i32 %v1_13a18, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_13a3c = phi i1 [ %v7_13a28, %bb52 ], [ %v11_13a38, %bb53 ]
  %v0_13a3c = phi i1 [ %v2_13a28, %bb52 ], [ %v6_13a38, %bb53 ]
  %v2_13a3c = xor i1 %v1_13a3c, true
  %v3_13a3c = and i1 %v0_13a3c, %v2_13a3c
  br i1 %v3_13a3c, label %dec_label_pc_13a98, label %dec_label_pc_13a40

dec_label_pc_13a40:                               ; preds = %bb54
  %v2_13a40 = icmp eq i32 %v0_13a40, 0
  %. = select i1 %v2_13a40, i32 87, i32 55
  %v2_13a4c = sub i32 %v1_13a4c, %.
  br label %dec_label_pc_13a50

dec_label_pc_13a50:                               ; preds = %dec_label_pc_13a0c, %dec_label_pc_13a40
  %v0_13a6434 = phi i32 [ %v1_13a20, %dec_label_pc_13a0c ], [ %., %dec_label_pc_13a40 ]
  %v3_13a8812 = phi i32 [ %v1_13a1c, %dec_label_pc_13a0c ], [ %v2_13a4c, %dec_label_pc_13a40 ]
  %v1_13a50 = load i32, i32* %r6.global-to-local, align 4
  %v6_13a54 = icmp slt i32 %v3_13a8812, %v1_13a50
  br i1 %v6_13a54, label %dec_label_pc_13a58, label %dec_label_pc_13a98

dec_label_pc_13a58:                               ; preds = %dec_label_pc_13a50
  %v3_13a58 = icmp uge i32 %v2_13a8811, %v0_139fc
  %v9_13a58 = icmp eq i32 %v2_13a8811, %v0_139fc
  %v2_13a5c = xor i1 %v3_13a58, true
  %v3_13a5c = or i1 %v9_13a58, %v2_13a5c
  br i1 %v3_13a5c, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_13a58
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_13a58, %bb57
  %v0_13a6433 = phi i32 [ %v0_13a6434, %dec_label_pc_13a58 ], [ 0, %bb57 ]
  %v2_13a60 = xor i1 %v9_13a58, true
  %v3_13a60 = and i1 %v3_13a58, %v2_13a60
  br i1 %v3_13a60, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_13a64 = phi i32 [ %v0_13a6433, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_13a64, 0
  %v4_13a64 = zext i1 %tmp72 to i32
  %v5_13a64 = or i32 %v0_13a64, %v4_13a64
  %v7_13a64 = icmp eq i32 %v5_13a64, 0
  br i1 %v7_13a64, label %dec_label_pc_13a70, label %.thread8

dec_label_pc_13a70:                               ; preds = %bb60
  %v1_13a7c = load i32, i32* %r8.global-to-local, align 4
  %v7_13a80 = icmp sgt i32 %v3_13a8812, %v1_13a7c
  br i1 %v7_13a80, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_13a70
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_13a70
  %v2_13a84 = icmp eq i1 %v9_13a58, false
  br i1 %v2_13a84, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_13a8813 = mul i32 %v1_13a50, %v2_13a8811
  %v5_13a8814 = add i32 %v4_13a8813, %v3_13a8812
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_13aa426 = phi i32 [ %v2_13a8811, %bb63 ], [ %v2_13a8811, %bb60 ], [ %v5_13a8814, %bb64 ]
  %v0_13a9824 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_13a90 = load i32, i32* %r5.global-to-local, align 4
  %v1_13a90 = inttoptr i32 %v0_13a90 to i8*
  %v2_13a90 = load i8, i8* %v1_13a90, align 1
  %v3_13a90 = zext i8 %v2_13a90 to i32
  store i32 %v3_13a90, i32* %r4.global-to-local, align 4
  %v5_13a90 = add i32 %v0_13a90, 1
  store i32 %v5_13a90, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13a0c

dec_label_pc_13a98:                               ; preds = %dec_label_pc_13a50, %bb54
  %v1_13a98 = icmp slt i32 %v1_13a64, 0
  %v0_13abc = load i32, i32* %sl.global-to-local, align 4
  %v2_13abc = icmp eq i32 %v0_13abc, 0
  br i1 %v1_13a98, label %dec_label_pc_13abc, label %dec_label_pc_13aa0

dec_label_pc_13aa0:                               ; preds = %dec_label_pc_13a98
  br i1 %v2_13abc, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_13aa0
  %v2_13aa4 = sub i32 0, %v2_13a8811
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_13aa0, %bb65
  %v23_13aa8 = phi i32 [ %v2_13a8811, %dec_label_pc_13aa0 ], [ %v2_13aa4, %bb65 ]
  %v2_13aa8 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_13aa8, i32* @r4, align 4
  ret i32 %v23_13aa8

dec_label_pc_13aac:                               ; preds = %dec_label_pc_139cc
  %v1_13aac = inttoptr i32 %v5_139ac to i8*
  %v2_13aac = load i8, i8* %v1_13aac, align 1
  %v3_13aac = zext i8 %v2_13aac to i32
  store i32 %v3_13aac, i32* %r4.global-to-local, align 4
  %v5_13aac = add i32 %v0_139ac, 2
  store i32 %v5_13aac, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_139e4

dec_label_pc_13abc:                               ; preds = %dec_label_pc_13a98
  %.70 = select i1 %v2_13abc, i32 2147483647, i32 -2147483648
  %v2_13ac8 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_13ac8, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_13a90, { 1, 0 }
  uselistorder i1 %v9_13a58, { 1, 0, 2 }
  uselistorder i1 %v3_13a58, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_13a28, { 1, 2, 0 }
  uselistorder i1 %v2_13a28, { 1, 0, 2 }
  uselistorder i32 %v1_13a0c, { 1, 2, 0 }
  uselistorder i32 %v1_13a4c, { 1, 2, 0 }
  uselistorder i32 %v1_13a64, { 1, 0 }
  uselistorder i32 %v2_13a8811, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_139fc, { 1, 0, 2 }
  uselistorder i32 %v5_139ac, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_139ac, { 1, 0 }
  uselistorder i32 %v0_139ac, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i8 9, { 6, 4, 0, 1, 5, 2, 3 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_13a50, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_139e4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_139ac, { 1, 2, 0, 3 }
}

define i32 @function_13acc(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13acc:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_13acc = load i32, i32* @r4, align 4
  store i32 %v3_13acc, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13ae4

dec_label_pc_13ae4:                               ; preds = %dec_label_pc_13b10.dec_label_pc_13ae4_crit_edge, %dec_label_pc_13acc
  %v0_13ae8 = phi i32 [ %v0_13ae8.pre, %dec_label_pc_13b10.dec_label_pc_13ae4_crit_edge ], [ %arg3, %dec_label_pc_13acc ]
  %v0_13ae4 = phi i32 [ %v1_13afc, %dec_label_pc_13b10.dec_label_pc_13ae4_crit_edge ], [ %tmp, %dec_label_pc_13acc ]
  %tmp12 = inttoptr i32 %v0_13ae4 to i32*
  %v5_13af0 = call i32 @function_143fc(i32 %v0_13ae8, i32* %tmp12, i32 1)
  %v7_13af4 = icmp eq i32 %v5_13af0, 1
  %v0_13af8 = load i32, i32* @r4, align 4
  %v1_13afc = add i32 %v0_13af8, 1
  store i32 %v1_13afc, i32* @r4, align 4
  %v0_13b04 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_13af4, label %dec_label_pc_13b04, label %dec_label_pc_13b1c

dec_label_pc_13b04:                               ; preds = %dec_label_pc_13ae4
  %v1_13b04 = add i32 %v0_13b04, 1
  store i32 %v1_13b04, i32* %r5.global-to-local, align 4
  %v0_13b08 = load i32, i32* %r7.global-to-local, align 4
  %v7_13b0c = icmp sgt i32 %v0_13b08, %v1_13b04
  br i1 %v7_13b0c, label %dec_label_pc_13b10, label %dec_label_pc_13b1c

dec_label_pc_13b10:                               ; preds = %dec_label_pc_13b04
  %v1_13b10 = inttoptr i32 %v0_13af8 to i8*
  %v2_13b10 = load i8, i8* %v1_13b10, align 1
  %v7_13b14 = icmp eq i8 %v2_13b10, 10
  br i1 %v7_13b14, label %dec_label_pc_13b1c, label %dec_label_pc_13b10.dec_label_pc_13ae4_crit_edge

dec_label_pc_13b10.dec_label_pc_13ae4_crit_edge:  ; preds = %dec_label_pc_13b10
  %v0_13ae8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13ae4

dec_label_pc_13b1c:                               ; preds = %dec_label_pc_13ae4, %dec_label_pc_13b10, %dec_label_pc_13b04
  %v0_13b1c = phi i32 [ %v1_13b04, %dec_label_pc_13b10 ], [ %v1_13b04, %dec_label_pc_13b04 ], [ %v0_13b04, %dec_label_pc_13ae4 ]
  %v2_13b1c = icmp eq i32 %v0_13b1c, 0
  %v1_13b20 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_13b1c, i32 0, i32 %v1_13b20
  %v2_13b28 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_13b28, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_13afc, { 1, 0 }
  uselistorder i8 10, { 8, 1, 0, 9, 7, 10, 2, 3, 4, 5, 6 }
  uselistorder i32 (i32, i32*, i32)* @function_143fc, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_13b1c, { 1, 2, 0 }
}

define i32 @function_13b2c() local_unnamed_addr {
dec_label_pc_13b2c:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_13b2c = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_13b3c = call i32 @function_14808()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_13b44 = inttoptr i32 %v0_13b3c to i32*
  store i32 0, i32* %v2_13b44, align 4
  %v0_13b50 = load i32, i32* %r6.global-to-local, align 4
  %v3_13b54 = call i32 @function_14b30(i32 2, i32 2, i32 %v0_13b50)
  %v7_13b60 = icmp eq i32 %v3_13b54, -1
  store i32 %v3_13b54, i32* %r5.global-to-local, align 4
  %v2_13b6c = load i32, i32* @r4, align 4
  br i1 %v7_13b60, label %dec_label_pc_13bbc, label %dec_label_pc_13b80

dec_label_pc_13b80:                               ; preds = %dec_label_pc_13b2c
  %v7_13b6c = shl i32 2056, %v2_13b6c
  %v8_13b6c = or i32 %v7_13b6c, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_13b9c = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_13b9c = call i32 @function_1498c(i32 %v3_13b54, %sockaddr* %v3_13b9c, i32 %v2_13b6c)
  %v2_13ba4 = ptrtoint i32* %stack_var_-24 to i32
  %v0_13ba8 = load i32, i32* %r5.global-to-local, align 4
  %v4_13bac = call i32 @function_149b8(i32 %v0_13ba8, %sockaddr* %v3_13b9c, i32 %v2_13ba4)
  %v1_13bb4 = call i32 @function_14234(i32 %v0_13ba8)
  br label %dec_label_pc_13bbc

dec_label_pc_13bbc:                               ; preds = %dec_label_pc_13b2c, %dec_label_pc_13b80
  %v0_13bbc = phi i32 [ %v0_13b50, %dec_label_pc_13b2c ], [ %v8_13b6c, %dec_label_pc_13b80 ]
  store i32 %v3_13b2c, i32* @r4, align 4
  ret i32 %v0_13bbc

; uselistorder directives
  uselistorder i32 %v3_13b54, { 2, 1, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_1498c, { 7, 0, 8, 6, 1, 2, 3, 4, 9, 5, 10 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_14b30, { 5, 22, 3, 4, 7, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 2, 1, 10, 9, 8, 6, 0 }
  uselistorder label %dec_label_pc_13bbc, { 1, 0 }
}

define i32 @function_13bc8(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13bc8:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_13bcc = load i8, i8* %tmp, align 1
  %v2_13bd0 = icmp eq i8 %v3_13bcc, 0
  br i1 %v2_13bd0, label %bb, label %dec_label_pc_13be4

bb:                                               ; preds = %dec_label_pc_13bc8
  %v4_13bcc = zext i8 %v3_13bcc to i32
  br label %dec_label_pc_13bf8

dec_label_pc_13be4:                               ; preds = %dec_label_pc_13bc8
  br label %dec_label_pc_13be8

dec_label_pc_13be8:                               ; preds = %dec_label_pc_13be8, %dec_label_pc_13be4
  %v0_13be8 = phi i32 [ %v1_13be8, %dec_label_pc_13be8 ], [ 0, %dec_label_pc_13be4 ]
  %v1_13be8 = add i32 %v0_13be8, 1
  %v2_13bec = add i32 %v1_13be8, %arg2
  %v3_13bec = inttoptr i32 %v2_13bec to i8*
  %v4_13bec = load i8, i8* %v3_13bec, align 1
  %v2_13bf0 = icmp eq i8 %v4_13bec, 0
  br i1 %v2_13bf0, label %dec_label_pc_13bf8, label %dec_label_pc_13be8

dec_label_pc_13bf8:                               ; preds = %dec_label_pc_13be8, %bb
  %v0_13c3c18 = phi i32 [ %v4_13bcc, %bb ], [ %v1_13be8, %dec_label_pc_13be8 ]
  %v0_13c001 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_13c001, 1
  br i1 %tmp27, label %dec_label_pc_13c4c, label %dec_label_pc_13c0c

dec_label_pc_13c0c:                               ; preds = %dec_label_pc_13bf8, %dec_label_pc_13c00.backedge
  %v0_13c04.in = phi i32 [ %v0_13c04, %dec_label_pc_13c00.backedge ], [ %v0_13c001, %dec_label_pc_13bf8 ]
  %v0_13c30 = phi i32 [ %v1_13c30., %dec_label_pc_13c00.backedge ], [ 0, %dec_label_pc_13bf8 ]
  %v0_13c0c = phi i32 [ %v5_13c0c, %dec_label_pc_13c00.backedge ], [ %tmp20, %dec_label_pc_13bf8 ]
  %v0_13c04 = add i32 %v0_13c04.in, -1
  %v1_13c0c = inttoptr i32 %v0_13c0c to i8*
  %v2_13c0c = load i8, i8* %v1_13c0c, align 1
  %v3_13c0c = zext i8 %v2_13c0c to i32
  store i32 %v3_13c0c, i32* @lr, align 4
  %v5_13c0c = add i32 %v0_13c0c, 1
  %v2_13c10 = add i32 %v0_13c30, %arg2
  %v3_13c10 = inttoptr i32 %v2_13c10 to i8*
  %v4_13c10 = load i8, i8* %v3_13c10, align 1
  %v6_13c10 = zext i8 %v4_13c10 to i32
  %v1_13c14 = add nsw i32 %v3_13c0c, -65
  %v1_13c18 = add nsw i32 %v6_13c10, -65
  %tmp35 = icmp ult i32 %v1_13c14, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_13c0c
  %v5_13c20 = or i32 %v3_13c0c, 96
  store i32 %v5_13c20, i32* @lr, align 4
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_13c0c, %bb28
  %v0_13c2c = phi i32 [ %v3_13c0c, %dec_label_pc_13c0c ], [ %v5_13c20, %bb28 ]
  %tmp36 = icmp ult i32 %v1_13c18, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_13c28 = or i32 %v6_13c10, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_13c2c = phi i32 [ %v6_13c10, %bb29 ], [ %v5_13c28, %bb30 ]
  %v9_13c2c = icmp eq i32 %v0_13c2c, %v1_13c2c
  %v1_13c30 = add i32 %v0_13c30, 1
  %v1_13c30. = select i1 %v9_13c2c, i32 %v1_13c30, i32 0
  br i1 %v9_13c2c, label %dec_label_pc_13c3c, label %dec_label_pc_13c00.backedge

dec_label_pc_13c00.backedge:                      ; preds = %bb31, %dec_label_pc_13c3c
  %tmp32 = icmp slt i32 %v0_13c04, 1
  br i1 %tmp32, label %dec_label_pc_13c4c, label %dec_label_pc_13c0c

dec_label_pc_13c3c:                               ; preds = %bb31
  %v9_13c3c = icmp eq i32 %v0_13c3c18, %v1_13c30.
  br i1 %v9_13c3c, label %dec_label_pc_13c44, label %dec_label_pc_13c00.backedge

dec_label_pc_13c44:                               ; preds = %dec_label_pc_13c3c
  %v2_13c44 = sub i32 %v5_13c0c, %tmp20
  ret i32 %v2_13c44

dec_label_pc_13c4c:                               ; preds = %dec_label_pc_13c00.backedge, %dec_label_pc_13bf8
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_13c30., { 1, 0 }
  uselistorder i32 %v0_13c0c, { 1, 0 }
  uselistorder i32 %v0_13c30, { 1, 0 }
  uselistorder i8 %v3_13bcc, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_13c00.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_13c0c, { 1, 0 }
}

define i32 @function_13c54(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13c54:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_13c54 = load i8, i8* %arg1, align 1
  %v2_13c58 = icmp eq i8 %v2_13c54, 0
  br i1 %v2_13c58, label %bb, label %dec_label_pc_13c64

bb:                                               ; preds = %dec_label_pc_13c54
  %v3_13c54 = zext i8 %v2_13c54 to i32
  br label %dec_label_pc_13c78

dec_label_pc_13c64:                               ; preds = %dec_label_pc_13c54
  br label %dec_label_pc_13c68

dec_label_pc_13c68:                               ; preds = %dec_label_pc_13c68, %dec_label_pc_13c64
  %v0_13c68 = phi i32 [ %v1_13c68, %dec_label_pc_13c68 ], [ 0, %dec_label_pc_13c64 ]
  %v1_13c68 = add i32 %v0_13c68, 1
  %v2_13c6c = add i32 %v1_13c68, %tmp
  %v3_13c6c = inttoptr i32 %v2_13c6c to i8*
  %v4_13c6c = load i8, i8* %v3_13c6c, align 1
  %v2_13c70 = icmp eq i8 %v4_13c6c, 0
  br i1 %v2_13c70, label %dec_label_pc_13c78, label %dec_label_pc_13c68

dec_label_pc_13c78:                               ; preds = %dec_label_pc_13c68, %bb
  %v1_13c9c = phi i32 [ %v3_13c54, %bb ], [ %v1_13c68, %dec_label_pc_13c68 ]
  %v1_13c78 = inttoptr i32 %arg2 to i8*
  %v2_13c78 = load i8, i8* %v1_13c78, align 1
  %v3_13c78 = zext i8 %v2_13c78 to i32
  %v2_13c7c = icmp eq i8 %v2_13c78, 0
  br i1 %v2_13c7c, label %bb22, label %dec_label_pc_13c88

bb22:                                             ; preds = %dec_label_pc_13c78
  store i32 %v3_13c78, i32* @r2, align 4
  br label %dec_label_pc_13c9c

dec_label_pc_13c88:                               ; preds = %dec_label_pc_13c78
  br label %dec_label_pc_13c8c

dec_label_pc_13c8c:                               ; preds = %dec_label_pc_13c8c, %dec_label_pc_13c88
  %v0_13c8c = phi i32 [ %v1_13c8c, %dec_label_pc_13c8c ], [ 0, %dec_label_pc_13c88 ]
  %v1_13c8c = add i32 %v0_13c8c, 1
  store i32 %v1_13c8c, i32* @r2, align 4
  %v2_13c90 = add i32 %v1_13c8c, %arg2
  %v3_13c90 = inttoptr i32 %v2_13c90 to i8*
  %v4_13c90 = load i8, i8* %v3_13c90, align 1
  %v2_13c94 = icmp eq i8 %v4_13c90, 0
  br i1 %v2_13c94, label %dec_label_pc_13c9c, label %dec_label_pc_13c8c

dec_label_pc_13c9c:                               ; preds = %dec_label_pc_13c8c, %bb22
  %v0_13cc84 = phi i32 [ %v3_13c78, %bb22 ], [ %v1_13c8c, %dec_label_pc_13c8c ]
  %v9_13c9c = icmp eq i32 %v0_13cc84, %v1_13c9c
  br i1 %v9_13c9c, label %dec_label_pc_13cc8.preheader, label %dec_label_pc_13ca8

dec_label_pc_13cc8.preheader:                     ; preds = %dec_label_pc_13c9c
  %v2_13cc86 = icmp eq i32 %v1_13c9c, 0
  br i1 %v2_13cc86, label %dec_label_pc_13cd0, label %dec_label_pc_13cb0

dec_label_pc_13ca8:                               ; preds = %dec_label_pc_13cb0, %dec_label_pc_13c9c
  ret i32 0

dec_label_pc_13cb0:                               ; preds = %dec_label_pc_13cc0, %dec_label_pc_13cc8.preheader
  %v0_13cc8.in = phi i32 [ %v0_13cc8, %dec_label_pc_13cc0 ], [ %v1_13c9c, %dec_label_pc_13cc8.preheader ]
  %v0_13cc4 = phi i32 [ %v1_13cc4, %dec_label_pc_13cc0 ], [ %arg2, %dec_label_pc_13cc8.preheader ]
  %v0_13cc0 = phi i32 [ %v1_13cc0, %dec_label_pc_13cc0 ], [ %tmp, %dec_label_pc_13cc8.preheader ]
  %v0_13cc8 = add i32 %v0_13cc8.in, -1
  %v1_13cb0 = inttoptr i32 %v0_13cc0 to i8*
  %v2_13cb0 = load i8, i8* %v1_13cb0, align 1
  %v3_13cb0 = zext i8 %v2_13cb0 to i32
  store i32 %v3_13cb0, i32* @r2, align 4
  %v1_13cb4 = inttoptr i32 %v0_13cc4 to i8*
  %v2_13cb4 = load i8, i8* %v1_13cb4, align 1
  %v9_13cb8 = icmp eq i8 %v2_13cb0, %v2_13cb4
  br i1 %v9_13cb8, label %dec_label_pc_13cc0, label %dec_label_pc_13ca8

dec_label_pc_13cc0:                               ; preds = %dec_label_pc_13cb0
  %v1_13cc0 = add i32 %v0_13cc0, 1
  %v1_13cc4 = add i32 %v0_13cc4, 1
  %v2_13cc8 = icmp eq i32 %v0_13cc8, 0
  br i1 %v2_13cc8, label %dec_label_pc_13cd0, label %dec_label_pc_13cb0

dec_label_pc_13cd0:                               ; preds = %dec_label_pc_13cc0, %dec_label_pc_13cc8.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_13c8c, { 0, 1, 3, 2 }
  uselistorder i8 %v2_13c54, { 1, 0 }
}

define i32 @function_13cd8(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13cd8:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_13cdc = load i8, i8* %arg1, align 1
  %v2_13ce0 = icmp eq i8 %v2_13cdc, 0
  %v0_13ce4 = load i32, i32* %r2.global-to-local, align 4
  br i1 %v2_13ce0, label %bb, label %dec_label_pc_13cf0

bb:                                               ; preds = %dec_label_pc_13cd8
  %v3_13cdc = zext i8 %v2_13cdc to i32
  br label %dec_label_pc_13d04

dec_label_pc_13cf0:                               ; preds = %dec_label_pc_13cd8
  br label %dec_label_pc_13cf4

dec_label_pc_13cf4:                               ; preds = %dec_label_pc_13cf4, %dec_label_pc_13cf0
  %v0_13cf4 = phi i32 [ %v1_13cf4, %dec_label_pc_13cf4 ], [ 0, %dec_label_pc_13cf0 ]
  %v1_13cf4 = add i32 %v0_13cf4, 1
  %v2_13cf8 = add i32 %v1_13cf4, %tmp
  %v3_13cf8 = inttoptr i32 %v2_13cf8 to i8*
  %v4_13cf8 = load i8, i8* %v3_13cf8, align 1
  %v2_13cfc = icmp eq i8 %v4_13cf8, 0
  br i1 %v2_13cfc, label %dec_label_pc_13d04, label %dec_label_pc_13cf4

dec_label_pc_13d04:                               ; preds = %dec_label_pc_13cf4, %bb
  %v9_13d2c = phi i32 [ %v3_13cdc, %bb ], [ %v1_13cf4, %dec_label_pc_13cf4 ]
  %v0_13d04 = load i32, i32* %r1.global-to-local, align 4
  %v1_13d04 = inttoptr i32 %v0_13d04 to i8*
  %v2_13d04 = load i8, i8* %v1_13d04, align 1
  %v3_13d04 = zext i8 %v2_13d04 to i32
  %v2_13d08 = icmp eq i8 %v2_13d04, 0
  br i1 %v2_13d08, label %bb26, label %dec_label_pc_13d14

bb26:                                             ; preds = %dec_label_pc_13d04
  store i32 %v3_13d04, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13d28

dec_label_pc_13d14:                               ; preds = %dec_label_pc_13d04
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13d18

dec_label_pc_13d18:                               ; preds = %dec_label_pc_13d18, %dec_label_pc_13d14
  %v0_13d18 = phi i32 [ %v1_13d18, %dec_label_pc_13d18 ], [ 0, %dec_label_pc_13d14 ]
  %v1_13d18 = add i32 %v0_13d18, 1
  store i32 %v1_13d18, i32* %r2.global-to-local, align 4
  %v2_13d1c = add i32 %v1_13d18, %v0_13d04
  %v3_13d1c = inttoptr i32 %v2_13d1c to i8*
  %v4_13d1c = load i8, i8* %v3_13d1c, align 1
  %v2_13d20 = icmp eq i8 %v4_13d1c, 0
  br i1 %v2_13d20, label %dec_label_pc_13d28, label %dec_label_pc_13d18

dec_label_pc_13d28:                               ; preds = %dec_label_pc_13d18, %bb26
  %v1_13d28 = phi i32 [ %v3_13d04, %bb26 ], [ %v1_13d18, %dec_label_pc_13d18 ]
  %v2_13d28 = sub i32 %v0_13ce4, %v1_13d28
  %v4_13d28 = xor i32 %v1_13d28, %v0_13ce4
  %v5_13d28 = xor i32 %v2_13d28, %v0_13ce4
  %v6_13d28 = and i32 %v5_13d28, %v4_13d28
  %v7_13d2c = icmp sgt i32 %v0_13ce4, %v1_13d28
  br i1 %v7_13d2c, label %bb28, label %bb27

bb27:                                             ; preds = %dec_label_pc_13d28
  %v10_13d2c = sub i32 %v0_13ce4, %v9_13d2c
  %v12_13d2c = xor i32 %v9_13d2c, %v0_13ce4
  %v13_13d2c = xor i32 %v10_13d2c, %v0_13ce4
  %v14_13d2c = and i32 %v13_13d2c, %v12_13d2c
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_13d28, %bb27
  %v2_13d30.in = phi i32 [ %v6_13d28, %dec_label_pc_13d28 ], [ %v14_13d2c, %bb27 ]
  %v1_13d30.in = phi i32 [ %v2_13d28, %dec_label_pc_13d28 ], [ %v10_13d2c, %bb27 ]
  %v1_13d28.pn = phi i32 [ %v1_13d28, %dec_label_pc_13d28 ], [ %v9_13d2c, %bb27 ]
  %v0_13d30 = icmp eq i32 %v0_13ce4, %v1_13d28.pn
  %v1_13d30 = icmp slt i32 %v1_13d30.in, 0
  %v2_13d30 = icmp slt i32 %v2_13d30.in, 0
  %v3_13d30 = xor i1 %v2_13d30, %v1_13d30
  %v4_13d30 = or i1 %v0_13d30, %v3_13d30
  br i1 %v4_13d30, label %dec_label_pc_13d40.preheader, label %dec_label_pc_13d58

dec_label_pc_13d40.preheader:                     ; preds = %bb28
  %v2_13d405 = icmp eq i32 %v0_13ce4, 0
  br i1 %v2_13d405, label %dec_label_pc_13d60, label %dec_label_pc_13d48

dec_label_pc_13d38:                               ; preds = %dec_label_pc_13d48
  %v1_13d38 = add i32 %v0_13d38, 1
  %v1_13d3c = add i32 %v0_13d3c, 1
  store i32 %v1_13d3c, i32* %r1.global-to-local, align 4
  %v2_13d40 = icmp eq i32 %v0_13d40, 0
  br i1 %v2_13d40, label %dec_label_pc_13d60, label %dec_label_pc_13d48

dec_label_pc_13d48:                               ; preds = %dec_label_pc_13d38, %dec_label_pc_13d40.preheader
  %v0_13d40.in = phi i32 [ %v0_13d40, %dec_label_pc_13d38 ], [ %v0_13ce4, %dec_label_pc_13d40.preheader ]
  %v0_13d3c = phi i32 [ %v1_13d3c, %dec_label_pc_13d38 ], [ %v0_13d04, %dec_label_pc_13d40.preheader ]
  %v0_13d38 = phi i32 [ %v1_13d38, %dec_label_pc_13d38 ], [ %tmp, %dec_label_pc_13d40.preheader ]
  %v0_13d40 = add i32 %v0_13d40.in, -1
  %v1_13d48 = inttoptr i32 %v0_13d38 to i8*
  %v2_13d48 = load i8, i8* %v1_13d48, align 1
  %v3_13d48 = zext i8 %v2_13d48 to i32
  store i32 %v3_13d48, i32* %r2.global-to-local, align 4
  %v1_13d4c = inttoptr i32 %v0_13d3c to i8*
  %v2_13d4c = load i8, i8* %v1_13d4c, align 1
  %v9_13d50 = icmp eq i8 %v2_13d48, %v2_13d4c
  br i1 %v9_13d50, label %dec_label_pc_13d38, label %dec_label_pc_13d58

dec_label_pc_13d58:                               ; preds = %dec_label_pc_13d48, %bb28
  ret i32 0

dec_label_pc_13d60:                               ; preds = %dec_label_pc_13d38, %dec_label_pc_13d40.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v0_13d38, { 1, 0 }
  uselistorder i32 %v0_13d3c, { 1, 0 }
  uselistorder i32 %v1_13d28, { 0, 3, 1, 2 }
  uselistorder i32 %v1_13d18, { 0, 1, 3, 2 }
  uselistorder i32 %v0_13ce4, { 0, 6, 1, 2, 3, 7, 9, 4, 5, 8 }
  uselistorder i8 %v2_13cdc, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 5, 4, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %bb28, { 1, 0 }
}

define i32 @function_13d68(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13d68:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* @r2, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_13d68 = load i32, i32* @r4, align 4
  store i32 %v3_13d68, i32* %stack_var_-28, align 4
  %v22_13d68 = ptrtoint i32* %stack_var_-28 to i32
  %v0_13d6c = load i32, i32* @r2, align 4
  store i32 %v0_13d6c, i32* %r8.global-to-local, align 4
  %v2_13d6c = icmp eq i32 %v0_13d6c, 0
  store i1 %v2_13d6c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_13d6c, label %dec_label_pc_13e5c, label %dec_label_pc_13d7c

dec_label_pc_13d7c:                               ; preds = %dec_label_pc_13d68
  %v3_13d7c = icmp eq i8 %arg1, 0
  store i1 %v3_13d7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13d7c, label %.thread, label %dec_label_pc_13d90

.thread:                                          ; preds = %dec_label_pc_13d7c
  %v4_13d84 = inttoptr i32 %v0_13d6c to i8*
  store i8 48, i8* %v4_13d84, align 1
  %v0_13d88.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13d88.pr.pr, label %.thread1, label %dec_label_pc_13d90

.thread1:                                         ; preds = %.thread
  %v4_13d88 = load i32, i32* %r8.global-to-local, align 4
  %v5_13d88 = add i32 %v4_13d88, 1
  %v6_13d88 = inttoptr i32 %v5_13d88 to i8*
  store i8 0, i8* %v6_13d88, align 1
  %v0_13d8c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13d8c.pr.pr, label %dec_label_pc_13e5c, label %dec_label_pc_13d90

dec_label_pc_13d90:                               ; preds = %dec_label_pc_13d7c, %.thread, %.thread1
  %v7_13d94 = icmp eq i32 %arg2, 10
  store i1 %v7_13d94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13d94, label %bb, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_13d90
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_13d90
  %tmp39 = icmp slt i8 %arg1, 0
  %phitmp = icmp eq i1 %tmp39, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_13db8

.thread4:                                         ; preds = %bb, %.thread21
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13dc8

dec_label_pc_13db8:                               ; preds = %bb
  %v2_13db8 = sub nsw i32 0, %tmp
  store i32 %v2_13db8, i32* %r4.global-to-local, align 4
  store i1 %v3_13d7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13d7c, label %dec_label_pc_13e68, label %dec_label_pc_13dc8

dec_label_pc_13dc8:                               ; preds = %dec_label_pc_13db8, %.thread4
  %v0_13dd010 = phi i32 [ %tmp, %.thread4 ], [ %v2_13db8, %dec_label_pc_13db8 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_13db8 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_13dcc = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_13dcc, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13dd0

dec_label_pc_13dd0:                               ; preds = %bb37, %dec_label_pc_13dc8
  %v0_13dd0 = phi i32 [ %v0_13df4, %bb37 ], [ %v0_13dd010, %dec_label_pc_13dc8 ]
  store i32 %v0_13dd0, i32* %r0.global-to-local, align 4
  %v0_13dd4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13dd4, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_13dd0, 16777216
  %v1_13dd8 = sdiv i32 %sext, 16777216
  %v3_13dd8 = call i32 @function_13f90(i32 %v1_13dd8, i32 %v0_13dd4)
  store i32 %v3_13dd8, i32* %r0.global-to-local, align 4
  %v7_13ddc = icmp eq i32 %v3_13dd8, 9
  store i1 %v7_13ddc, i1* %cpsr_z.global-to-local, align 1
  %v1_13de0 = add i32 %v3_13dd8, 48
  %v0_13de4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13de4, i32* @r1, align 4
  %v7_13de8 = icmp sgt i32 %v3_13dd8, 9
  %extract.t = trunc i32 %v1_13de0 to i8
  br i1 %v7_13de8, label %bb36, label %bb37

bb36:                                             ; preds = %dec_label_pc_13dd0
  %v9_13de8 = add i32 %v3_13dd8, 55
  %extract.t20 = trunc i32 %v9_13de8 to i8
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_13dd0, %bb36
  %v0_13df0.off0 = phi i8 [ %extract.t, %dec_label_pc_13dd0 ], [ %extract.t20, %bb36 ]
  %v0_13dec = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13dec, i32* @r0, align 4
  %v2_13df0 = load i32, i32* %r7.global-to-local, align 4
  %v3_13df0 = inttoptr i32 %v2_13df0 to i8*
  store i8 %v0_13df0.off0, i8* %v3_13df0, align 1
  %v4_13df0 = load i32, i32* %r7.global-to-local, align 4
  %v5_13df0 = add i32 %v4_13df0, -1
  store i32 %v5_13df0, i32* %r7.global-to-local, align 4
  %v0_13df4 = call i32 @function_13e80()
  store i32 %v0_13df4, i32* %r0.global-to-local, align 4
  store i32 %v0_13df4, i32* %r4.global-to-local, align 4
  %v2_13df8 = icmp eq i32 %v0_13df4, 0
  store i1 %v2_13df8, i1* %cpsr_z.global-to-local, align 1
  %v0_13dfc = load i32, i32* %r6.global-to-local, align 4
  %v1_13dfc = add i32 %v0_13dfc, -1
  store i32 %v1_13dfc, i32* %r6.global-to-local, align 4
  br i1 %v2_13df8, label %dec_label_pc_13e04, label %dec_label_pc_13dd0

dec_label_pc_13e04:                               ; preds = %bb37
  %v0_13e04 = load i32, i32* %sl.global-to-local, align 4
  %v2_13e04 = icmp eq i32 %v0_13e04, 0
  store i1 %v2_13e04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13e04, label %bb38, label %dec_label_pc_13e6c

bb38:                                             ; preds = %dec_label_pc_13e04
  store i32 %v0_13dfc, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13e10

dec_label_pc_13e10:                               ; preds = %bb38, %dec_label_pc_13e6c
  %v1_13e1c = phi i32 [ %v0_13dfc, %bb38 ], [ %v1_13e14.pre, %dec_label_pc_13e6c ]
  %v2_13e10 = ptrtoint i32* %stack_var_-62 to i32
  %v2_13e14 = add i32 %v1_13e1c, %v2_13e10
  %v3_13e14 = inttoptr i32 %v2_13e14 to i8*
  %v4_13e14 = load i8, i8* %v3_13e14, align 1
  %v6_13e14 = zext i8 %v4_13e14 to i32
  %v2_13e18 = icmp eq i8 %v4_13e14, 0
  store i1 %v2_13e18, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_13e14, i32* %r1.global-to-local, align 4
  br i1 %v2_13e18, label %dec_label_pc_13e40, label %dec_label_pc_13e24

dec_label_pc_13e24:                               ; preds = %dec_label_pc_13e10
  br label %dec_label_pc_13e28

dec_label_pc_13e28:                               ; preds = %dec_label_pc_13e28, %dec_label_pc_13e24
  %v0_13e28 = phi i32 [ %v1_13e28, %dec_label_pc_13e28 ], [ 0, %dec_label_pc_13e24 ]
  %v1_13e28 = add i32 %v0_13e28, 1
  store i32 %v1_13e28, i32* @r2, align 4
  %v2_13e2c = add i32 %v1_13e28, %v2_13e14
  %v3_13e2c = inttoptr i32 %v2_13e2c to i8*
  %v4_13e2c = load i8, i8* %v3_13e2c, align 1
  %v2_13e30 = icmp eq i8 %v4_13e2c, 0
  store i1 %v2_13e30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13e30, label %dec_label_pc_13e38, label %dec_label_pc_13e28

dec_label_pc_13e38:                               ; preds = %dec_label_pc_13e28
  %v7_13e38 = icmp eq i32 %v0_13e28, -2
  store i1 %v7_13e38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13e38, label %dec_label_pc_13e5c, label %dec_label_pc_13e40

dec_label_pc_13e40:                               ; preds = %dec_label_pc_13e38, %dec_label_pc_13e10
  %v0_13e4817 = phi i32 [ %v1_13e28, %dec_label_pc_13e38 ], [ %v6_13e14, %dec_label_pc_13e10 ]
  store i32 %v2_13e14, i32* %r0.global-to-local, align 4
  %v0_13e44 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_13e44, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13e48

dec_label_pc_13e48:                               ; preds = %dec_label_pc_13e48.dec_label_pc_13e48_crit_edge, %dec_label_pc_13e40
  %v2_13e54 = phi i32 [ %v5_13e54, %dec_label_pc_13e48.dec_label_pc_13e48_crit_edge ], [ %v0_13e44, %dec_label_pc_13e40 ]
  %v0_13e4c = phi i32 [ %v0_13e4c.pre, %dec_label_pc_13e48.dec_label_pc_13e48_crit_edge ], [ %v2_13e14, %dec_label_pc_13e40 ]
  %v0_13e48 = phi i32 [ %v0_13e48.pre, %dec_label_pc_13e48.dec_label_pc_13e48_crit_edge ], [ %v0_13e4817, %dec_label_pc_13e40 ]
  %v1_13e48 = add i32 %v0_13e48, -1
  store i32 %v1_13e48, i32* @r2, align 4
  %v1_13e4c = inttoptr i32 %v0_13e4c to i8*
  %v2_13e4c = load i8, i8* %v1_13e4c, align 1
  %v5_13e4c = add i32 %v0_13e4c, 1
  store i32 %v5_13e4c, i32* %r0.global-to-local, align 4
  %v3_13e50 = icmp eq i32 %v0_13e48, 0
  store i1 %v3_13e50, i1* %cpsr_z.global-to-local, align 1
  %v3_13e54 = inttoptr i32 %v2_13e54 to i8*
  store i8 %v2_13e4c, i8* %v3_13e54, align 1
  %v4_13e54 = load i32, i32* %r1.global-to-local, align 4
  %v5_13e54 = add i32 %v4_13e54, 1
  store i32 %v5_13e54, i32* %r1.global-to-local, align 4
  br i1 %v3_13e50, label %dec_label_pc_13e5c, label %dec_label_pc_13e48.dec_label_pc_13e48_crit_edge

dec_label_pc_13e48.dec_label_pc_13e48_crit_edge:  ; preds = %dec_label_pc_13e48
  %v0_13e48.pre = load i32, i32* @r2, align 4
  %v0_13e4c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13e48

dec_label_pc_13e5c:                               ; preds = %dec_label_pc_13e48, %dec_label_pc_13e38, %.thread1, %dec_label_pc_13d68
  %v0_13e5c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_13e5c, i32* %r0.global-to-local, align 4
  %v2_13e64 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_13e64, i32* @r4, align 4
  ret i32 %v0_13e5c

dec_label_pc_13e68:                               ; preds = %dec_label_pc_13db8
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13e6c

dec_label_pc_13e6c:                               ; preds = %dec_label_pc_13e04, %dec_label_pc_13e68
  %v1_13e70 = phi i32 [ %v1_13dfc, %dec_label_pc_13e04 ], [ 32, %dec_label_pc_13e68 ]
  %v2_13e70 = add i32 %v1_13e70, %v22_13d68
  %v3_13e78 = add i32 %v2_13e70, -34
  %v4_13e78 = inttoptr i32 %v3_13e78 to i8*
  store i8 45, i8* %v4_13e78, align 1
  %v1_13e14.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13e10

; uselistorder directives
  uselistorder i32 %v5_13e54, { 1, 0 }
  uselistorder i1 %v3_13e50, { 1, 0 }
  uselistorder i32 %v0_13e4c, { 1, 0 }
  uselistorder i1 %v7_13e38, { 1, 0 }
  uselistorder i32 %v1_13e28, { 0, 1, 3, 2 }
  uselistorder i32 %v2_13e14, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_13df4, { 1, 2, 3, 0 }
  uselistorder i32 %v3_13dd8, { 1, 0, 2, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_13d7c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13d6c, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 4, 5, 7, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13e6c, { 1, 0 }
  uselistorder label %dec_label_pc_13e10, { 1, 0 }
  uselistorder label %bb37, { 1, 0 }
  uselistorder label %dec_label_pc_13d90, { 2, 1, 0 }
}

define i32 @function_13e80() local_unnamed_addr {
dec_label_pc_13e80:
  %v0_13e80 = load i32, i32* @r1, align 4
  %v1_13e80 = add i32 %v0_13e80, -1
  %v7_13e80 = icmp eq i32 %v0_13e80, 1
  br i1 %v7_13e80, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_13e80
  %v2_13e84 = load i32, i32* @r0, align 4
  ret i32 %v2_13e84

bb82:                                             ; preds = %dec_label_pc_13e80
  %v2_13e80 = icmp eq i32 %v0_13e80, 0
  br i1 %v2_13e80, label %dec_label_pc_13f68, label %dec_label_pc_13e8c

dec_label_pc_13e8c:                               ; preds = %bb82
  %v0_13e8c = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_13e8c, %v0_13e80
  br i1 %tmp, label %dec_label_pc_13e94, label %dec_label_pc_13f20

dec_label_pc_13e94:                               ; preds = %dec_label_pc_13e8c
  %v2_13e94 = and i32 %v1_13e80, %v0_13e80
  %v4_13e94 = icmp eq i32 %v2_13e94, 0
  br i1 %v4_13e94, label %dec_label_pc_13f2c, label %dec_label_pc_13e9c

dec_label_pc_13e9c:                               ; preds = %dec_label_pc_13e94
  %v3_13e9c = icmp ult i32 %v0_13e80, 536870912
  br i1 %v3_13e9c, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_13e9c
  %v4_13ea0 = mul i32 %v0_13e80, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_13e9c, %.thread
  %v0_13ec0.pr36.ph = phi i32 [ %v4_13ea0, %.thread ], [ %v0_13e80, %dec_label_pc_13e9c ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_13e9c ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_13ec0.pr36 = phi i32 [ %v4_13eb4, %bb85 ], [ %v0_13ec0.pr36.ph, %.preheader.preheader ]
  %v1_13eb8 = phi i32 [ %v4_13eb8, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_13eac = icmp ugt i32 %v0_13ec0.pr36, 268435455
  br i1 %v2_13eac, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_13ec0thread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_13eb0 = icmp ult i32 %v0_13ec0.pr36, %v0_13e8c
  br i1 %v4_13eb0, label %bb84, label %dec_label_pc_13ec0thread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_13eb4 = and i32 %v0_13ec0.pr36, 268435456
  %v3_13eb4 = icmp eq i32 %v2_13eb4, 0
  %v4_13eb4 = mul i32 %v0_13ec0.pr36, 16
  br i1 %v3_13eb4, label %bb85, label %dec_label_pc_13ec0.loopexit

bb85:                                             ; preds = %bb84
  %v2_13eb8 = and i32 %v1_13eb8, 268435456
  %v3_13eb8 = icmp eq i32 %v2_13eb8, 0
  %v4_13eb8 = mul i32 %v1_13eb8, 16
  br i1 %v3_13eb8, label %.preheader, label %dec_label_pc_13ec0thread-pre-split.loopexit.loopexit

dec_label_pc_13ec0thread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_13ecc48.ph = phi i32 [ %v1_13eb8, %bb83 ], [ %v4_13eb8, %bb85 ]
  %v0_13ec0.pr38.ph = phi i32 [ %v0_13ec0.pr36, %bb83 ], [ %v4_13eb4, %bb85 ]
  br label %dec_label_pc_13ec0thread-pre-split.loopexit

dec_label_pc_13ec0thread-pre-split.loopexit:      ; preds = %dec_label_pc_13ec0thread-pre-split.loopexit.loopexit, %.thread2
  %v1_13ecc48 = phi i32 [ %v1_13eb8, %.thread2 ], [ %v1_13ecc48.ph, %dec_label_pc_13ec0thread-pre-split.loopexit.loopexit ]
  %v0_13ec0.pr38 = phi i32 [ %v0_13ec0.pr36, %.thread2 ], [ %v0_13ec0.pr38.ph, %dec_label_pc_13ec0thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_13ec0thread-pre-split

dec_label_pc_13ec0thread-pre-split:               ; preds = %dec_label_pc_13ec0thread-pre-split.loopexit, %bb87
  %v1_13ecc46 = phi i32 [ %v1_13ecc48, %dec_label_pc_13ec0thread-pre-split.loopexit ], [ %v3_13ecc, %bb87 ]
  %v0_13ec0.pr = phi i32 [ %v0_13ec0.pr38, %dec_label_pc_13ec0thread-pre-split.loopexit ], [ %v3_13ec8, %bb87 ]
  br label %dec_label_pc_13ec0

dec_label_pc_13ec0.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_13ec0

dec_label_pc_13ec0:                               ; preds = %dec_label_pc_13ec0.loopexit, %dec_label_pc_13ec0thread-pre-split
  %v1_13ecc = phi i32 [ %v1_13ecc46, %dec_label_pc_13ec0thread-pre-split ], [ %v1_13eb8, %dec_label_pc_13ec0.loopexit ]
  %v1_13ec8 = phi i32 [ %v0_13ec0.pr, %dec_label_pc_13ec0thread-pre-split ], [ %v4_13eb4, %dec_label_pc_13ec0.loopexit ]
  %v2_13ec0 = icmp slt i32 %v1_13ec8, 0
  br i1 %v2_13ec0, label %dec_label_pc_13ed4, label %bb86

bb86:                                             ; preds = %dec_label_pc_13ec0
  %v4_13ec4 = icmp ult i32 %v1_13ec8, %v0_13e8c
  br i1 %v4_13ec4, label %bb87, label %dec_label_pc_13ed4

bb87:                                             ; preds = %bb86
  %v3_13ec8 = mul i32 %v1_13ec8, 2
  %v2_13ecc = icmp slt i32 %v1_13ecc, 0
  %v3_13ecc = mul i32 %v1_13ecc, 2
  br i1 %v2_13ecc, label %dec_label_pc_13ed4, label %dec_label_pc_13ec0thread-pre-split

dec_label_pc_13ed4:                               ; preds = %bb86, %dec_label_pc_13ec0, %bb87
  %v2_13ee059 = phi i32 [ %v3_13ecc, %bb87 ], [ %v1_13ecc, %bb86 ], [ %v1_13ecc, %dec_label_pc_13ec0 ]
  %v1_13ed851 = phi i32 [ %v3_13ec8, %bb87 ], [ %v1_13ec8, %bb86 ], [ %v1_13ec8, %dec_label_pc_13ec0 ]
  br label %dec_label_pc_13ed8

dec_label_pc_13ed8:                               ; preds = %.thread11, %dec_label_pc_13ed4
  %v1_13f0c = phi i32 [ %v4_13f0c, %.thread11 ], [ %v2_13ee059, %dec_label_pc_13ed4 ]
  %v1_13ee0 = phi i32 [ %v0_13f18, %.thread11 ], [ 0, %dec_label_pc_13ed4 ]
  %v1_13f10 = phi i32 [ %v4_13f10, %.thread11 ], [ %v1_13ed851, %dec_label_pc_13ed4 ]
  %v1_13edc = phi i32 [ %v0_13f08, %.thread11 ], [ %v0_13e8c, %dec_label_pc_13ed4 ]
  %v3_13ed8 = icmp ult i32 %v1_13edc, %v1_13f10
  br i1 %v3_13ed8, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_13ed8
  %v3_13edc = sub i32 %v1_13edc, %v1_13f10
  %v3_13ee0 = or i32 %v1_13ee0, %v1_13f0c
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_13ed8, %bb88
  %v1_13ee8 = phi i32 [ %v1_13edc, %dec_label_pc_13ed8 ], [ %v3_13edc, %bb88 ]
  %v1_13eec = phi i32 [ %v1_13ee0, %dec_label_pc_13ed8 ], [ %v3_13ee0, %bb88 ]
  %v4_13ee4 = udiv i32 %v1_13f10, 2
  %v6_13ee4 = icmp ult i32 %v1_13ee8, %v4_13ee4
  br i1 %v6_13ee4, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_13ee8 = urem i32 %v1_13f10, 2
  %v4_13ee8 = icmp eq i32 %v3_13ee8, 0
  %v6_13ee8 = sub i32 %v1_13ee8, %v4_13ee4
  br i1 %v4_13ee8, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_13eec = udiv i32 %v1_13f0c, 2
  %v6_13eec = or i32 %v1_13eec, %v5_13eec
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_13ef4 = phi i32 [ %v6_13ee8, %bb89 ], [ %v1_13ee8, %.thread7 ], [ %v6_13ee8, %bb90 ]
  %v1_13ef8 = phi i32 [ %v1_13eec, %bb89 ], [ %v1_13eec, %.thread7 ], [ %v6_13eec, %bb90 ]
  %v4_13ef0 = udiv i32 %v1_13f10, 4
  %v6_13ef0 = icmp ult i32 %v1_13ef4, %v4_13ef0
  br i1 %v6_13ef0, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_13ef4 = and i32 %v1_13f10, 2
  %v4_13ef4 = icmp eq i32 %v3_13ef4, 0
  %v6_13ef4 = sub i32 %v1_13ef4, %v4_13ef0
  br i1 %v4_13ef4, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_13ef8 = udiv i32 %v1_13f0c, 4
  %v6_13ef8 = or i32 %v1_13ef8, %v5_13ef8
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_13f00 = phi i32 [ %v6_13ef4, %bb91 ], [ %v1_13ef4, %.thread8 ], [ %v6_13ef4, %bb92 ]
  %v1_13f04 = phi i32 [ %v1_13ef8, %bb91 ], [ %v1_13ef8, %.thread8 ], [ %v6_13ef8, %bb92 ]
  %v4_13efc = udiv i32 %v1_13f10, 8
  %v6_13efc = icmp ult i32 %v1_13f00, %v4_13efc
  br i1 %v6_13efc, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_13f00 = and i32 %v1_13f10, 4
  %v4_13f00 = icmp eq i32 %v3_13f00, 0
  %v6_13f00 = sub i32 %v1_13f00, %v4_13efc
  br i1 %v4_13f00, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_13f04 = udiv i32 %v1_13f0c, 8
  %v6_13f04 = or i32 %v1_13f04, %v5_13f04
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_13f18 = phi i32 [ %v1_13f04, %bb93 ], [ %v1_13f04, %.thread9 ], [ %v6_13f04, %bb94 ]
  %v0_13f08 = phi i32 [ %v6_13f00, %bb93 ], [ %v1_13f00, %.thread9 ], [ %v6_13f00, %bb94 ]
  %v2_13f08 = icmp eq i32 %v0_13f08, 0
  br i1 %v2_13f08, label %dec_label_pc_13f18, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_13f0c, 16
  br i1 %tmp142, label %dec_label_pc_13f18, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_13f0c = udiv i32 %v1_13f0c, 16
  %v4_13f10 = udiv i32 %v1_13f10, 16
  br label %dec_label_pc_13ed8

dec_label_pc_13f18:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_13f18

dec_label_pc_13f20:                               ; preds = %dec_label_pc_13e8c
  %v9_13e8c = icmp eq i32 %v0_13e8c, %v0_13e80
  %. = zext i1 %v9_13e8c to i32
  ret i32 %.

dec_label_pc_13f2c:                               ; preds = %dec_label_pc_13e94
  %v2_13f2c = icmp ugt i32 %v0_13e80, 65535
  br i1 %v2_13f2c, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_13f2c
  %v2_13f30 = and i32 %v0_13e80, 32768
  %v3_13f30 = icmp eq i32 %v2_13f30, 0
  %v4_13f30 = udiv i32 %v0_13e80, 65536
  br i1 %v3_13f30, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_13f2c
  %v0_13f3c65 = phi i32 [ %v0_13e80, %dec_label_pc_13f2c ], [ %v4_13f30, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_13f40 = phi i32 [ %v0_13f3c65, %.thread16 ], [ %v4_13f30, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  %v2_13f3c = icmp ugt i32 %v1_13f40, 255
  br i1 %v2_13f3c, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_13f40 = and i32 %v1_13f40, 128
  %v3_13f40 = icmp eq i32 %v2_13f40, 0
  %v4_13f40 = udiv i32 %v1_13f40, 256
  br i1 %v3_13f40, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_13f44 = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_13f50 = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_13f44, %bb102 ]
  %v1_13f4c = phi i32 [ %v1_13f40, %bb100 ], [ %v4_13f40, %bb101 ], [ %v4_13f40, %bb102 ]
  %v2_13f48 = icmp ugt i32 %v1_13f4c, 15
  br i1 %v2_13f48, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_13f4c = and i32 %v1_13f4c, 8
  %v3_13f4c = icmp eq i32 %v2_13f4c, 0
  %v4_13f4c = udiv i32 %v1_13f4c, 16
  br i1 %v3_13f4c, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_13f50 = add nsw i32 %v1_13f50, 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_13f58 = phi i32 [ %v1_13f50, %.thread17 ], [ %v1_13f50, %bb103 ], [ %v2_13f50, %bb104 ]
  %v5_13f5c = phi i32 [ %v1_13f4c, %.thread17 ], [ %v4_13f4c, %bb103 ], [ %v4_13f4c, %bb104 ]
  %v2_13f54 = icmp ugt i32 %v5_13f5c, 3
  %v7_13f54 = icmp eq i32 %v5_13f5c, 4
  %v2_13f58 = xor i1 %v7_13f54, true
  %v3_13f58 = and i1 %v2_13f54, %v2_13f58
  br i1 %v3_13f58, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_13f58 = add nsw i32 %v4_13f58, 3
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_13f5c = phi i32 [ %v4_13f58, %.thread18 ], [ %v5_13f58, %bb105 ]
  %v2_13f5c = xor i1 %v2_13f54, true
  %v3_13f5c = or i1 %v7_13f54, %v2_13f5c
  br i1 %v3_13f5c, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_13f5c = udiv i32 %v5_13f5c, 2
  %v9_13f5c = add i32 %v4_13f5c, %v8_13f5c
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_13f60 = phi i32 [ %v4_13f5c, %bb106 ], [ %v9_13f5c, %bb107 ]
  %v6_13f60 = lshr i32 %v0_13e8c, %v1_13f60
  ret i32 %v6_13f60

dec_label_pc_13f68:                               ; preds = %bb82
  %v0_13f68 = load i32, i32* @lr, align 4
  %v0_13f6c = call i32 @function_14140()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_13f68)
  %v9_13f78 = load i32, i32* @lr, align 4
  %v0_13f7c = call i32 @function_13e80()
  store i32 %v9_13f78, i32* @lr, align 4
  ret i32 %v0_13f7c

; uselistorder directives
  uselistorder i32 %v4_13f5c, { 1, 0 }
  uselistorder i1 %v7_13f54, { 1, 0 }
  uselistorder i32 %v4_13f4c, { 1, 0 }
  uselistorder i32 %v1_13f4c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_13f40, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_13f40, { 1, 0, 2, 3 }
  uselistorder i32 %v4_13f30, { 1, 0 }
  uselistorder i32 %v0_13f08, { 1, 0 }
  uselistorder i32 %v4_13efc, { 1, 0 }
  uselistorder i32 %v1_13f04, { 1, 2, 0 }
  uselistorder i32 %v4_13ef0, { 1, 0 }
  uselistorder i32 %v1_13ef8, { 1, 2, 0 }
  uselistorder i32 %v4_13ee4, { 1, 0 }
  uselistorder i32 %v1_13eec, { 1, 2, 0 }
  uselistorder i32 %v1_13f10, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_13ee0, { 1, 0 }
  uselistorder i32 %v1_13f0c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_13ecc, { 1, 0 }
  uselistorder i32 %v3_13ec8, { 1, 0 }
  uselistorder i32 %v1_13ec8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_13ecc, { 1, 2, 0, 3 }
  uselistorder i32 %v4_13eb8, { 1, 0 }
  uselistorder i32 %v4_13eb4, { 2, 1, 0 }
  uselistorder i32 %v1_13eb8, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_13ec0.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_13e8c, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_13e80, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 65535, { 104, 54, 55, 0, 1, 13, 56, 28, 57, 27, 58, 26, 59, 14, 15, 2, 30, 60, 29, 61, 62, 16, 63, 3, 31, 64, 32, 65, 33, 66, 67, 4, 34, 68, 69, 5, 35, 70, 71, 17, 72, 6, 39, 73, 36, 74, 37, 75, 38, 76, 77, 18, 78, 7, 79, 80, 43, 81, 42, 82, 40, 83, 41, 84, 19, 20, 8, 85, 44, 86, 45, 87, 21, 22, 9, 88, 46, 89, 47, 90, 91, 92, 23, 93, 94, 10, 50, 95, 48, 96, 49, 97, 98, 24, 99, 11, 12, 53, 100, 51, 101, 52, 102, 25, 103 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_13f18, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_13ed4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13ec0thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_13f90(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13f90:
  store i32 %arg1, i32* @r0, align 4
  %v1_13f90 = add i32 %arg2, -1
  %v2_13f90 = icmp eq i32 %arg2, 0
  br i1 %v2_13f90, label %dec_label_pc_1404c, label %dec_label_pc_13f98

dec_label_pc_13f98:                               ; preds = %dec_label_pc_13f90
  %v7_13f90 = icmp eq i32 %arg2, 1
  br i1 %v7_13f90, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_13f98
  %v1_13f98 = load i32, i32* @r0, align 4
  %v10_13f98 = icmp eq i32 %v1_13f98, %arg2
  br i1 %v10_13f98, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_13f98, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_13f98 = icmp ult i32 %v1_13f98, %arg2
  br i1 %v4_13f98, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_13fa0 = and i32 %v1_13f90, %arg2
  %v8_13fa0 = icmp eq i32 %v6_13fa0, 0
  br i1 %v8_13fa0, label %.thread67, label %dec_label_pc_13fb0.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_13fa4 = phi i32 [ %v1_13f98, %bb75 ], [ 0, %.thread65 ]
  %v3_13fa4 = and i32 %v1_13fa4, %v1_13f90
  br label %bb76

dec_label_pc_13fb0.preheader:                     ; preds = %bb75
  %v2_13fb099 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_13fb099, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_14040, %bb74, %bb89, %bb84, %dec_label_pc_14010, %.thread67
  %v5_13fa8 = phi i32 [ %v1_13f98, %bb74 ], [ %v3_13fa4, %.thread67 ], [ %v1_13fec.v6_13fec.v6_13ff4.v6_13ffc, %dec_label_pc_14010 ], [ 0, %bb84 ], [ %v1_14044, %dec_label_pc_14040 ], [ %v2_14040, %bb89 ]
  ret i32 %v5_13fa8

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_13fb0.preheader
  %v0_13fc4.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_13fb0.preheader ], [ %v4_13fb8, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_13fb0.preheader ], [ %v2_13fbc11, %.thread1.thread9 ]
  br label %dec_label_pc_13fc4thread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_13fb0.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_13fbc11, %.thread1.thread9 ], [ 0, %dec_label_pc_13fb0.preheader ]
  %v0_13fc4.pr33100 = phi i32 [ %v4_13fb8, %.thread1.thread9 ], [ %arg2, %dec_label_pc_13fb0.preheader ]
  %v4_13fb4 = icmp ult i32 %v0_13fc4.pr33100, %v1_13f98
  br i1 %v4_13fb4, label %bb78, label %dec_label_pc_13fc4thread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_13fb8 = and i32 %v0_13fc4.pr33100, 268435456
  %v3_13fb8 = icmp eq i32 %v2_13fb8, 0
  %v4_13fb8 = mul i32 %v0_13fc4.pr33100, 16
  br i1 %v3_13fb8, label %.thread1.thread9, label %dec_label_pc_13fc4.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_13fbc11 = add i32 %storemerge101, 4
  %v2_13fb0 = icmp ugt i32 %v4_13fb8, 268435455
  br i1 %v2_13fb0, label %.thread, label %bb77

dec_label_pc_13fc4thread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_13fc4thread-pre-split.loopexit

dec_label_pc_13fc4thread-pre-split.loopexit:      ; preds = %dec_label_pc_13fc4thread-pre-split.loopexit.loopexit, %.thread
  %v0_13fc4.pr3398 = phi i32 [ %v0_13fc4.pr33.lcssa, %.thread ], [ %v0_13fc4.pr33100, %dec_label_pc_13fc4thread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_13fc4thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_13fc4thread-pre-split

dec_label_pc_13fc4thread-pre-split:               ; preds = %.thread4, %dec_label_pc_13fc4thread-pre-split.loopexit
  %v1_13fd039 = phi i32 [ %storemerge95, %dec_label_pc_13fc4thread-pre-split.loopexit ], [ %v2_13fd0, %.thread4 ]
  %v0_13fc4.pr = phi i32 [ %v0_13fc4.pr3398, %dec_label_pc_13fc4thread-pre-split.loopexit ], [ %v3_13fcc, %.thread4 ]
  br label %dec_label_pc_13fc4

dec_label_pc_13fc4.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_13fc4

dec_label_pc_13fc4:                               ; preds = %dec_label_pc_13fc4.loopexit, %dec_label_pc_13fc4thread-pre-split
  %v0_13fd8.pr = phi i32 [ %v1_13fd039, %dec_label_pc_13fc4thread-pre-split ], [ %storemerge101, %dec_label_pc_13fc4.loopexit ]
  %v1_13fcc = phi i32 [ %v0_13fc4.pr, %dec_label_pc_13fc4thread-pre-split ], [ %v4_13fb8, %dec_label_pc_13fc4.loopexit ]
  %v2_13fc4 = icmp slt i32 %v1_13fcc, 0
  br i1 %v2_13fc4, label %dec_label_pc_13fd8, label %bb79

bb79:                                             ; preds = %dec_label_pc_13fc4
  %v4_13fc8 = icmp ult i32 %v1_13fcc, %v1_13f98
  br i1 %v4_13fc8, label %.thread4, label %dec_label_pc_13fd8

.thread4:                                         ; preds = %bb79
  %v3_13fcc = mul i32 %v1_13fcc, 2
  %v2_13fd0 = add i32 %v0_13fd8.pr, 1
  br label %dec_label_pc_13fc4thread-pre-split

dec_label_pc_13fd8:                               ; preds = %bb79, %dec_label_pc_13fc4
  %v2_13fd8 = add i32 %v0_13fd8.pr, -3
  %v5_13fdc = icmp slt i32 %v0_13fd8.pr, 3
  br i1 %v5_13fdc, label %dec_label_pc_1401c, label %dec_label_pc_13fe0

dec_label_pc_13fe0:                               ; preds = %dec_label_pc_13fd8, %bb83
  %v6_14008 = phi i32 [ %v0_14010, %bb83 ], [ %v2_13fd8, %dec_label_pc_13fd8 ]
  %v1_13fe4 = phi i32 [ %v1_13fec.v6_13fec.v6_13ff4.v6_13ffc, %bb83 ], [ %v1_13f98, %dec_label_pc_13fd8 ]
  %v3_1400412 = phi i32 [ %v3_14004, %bb83 ], [ %v1_13fcc, %dec_label_pc_13fd8 ]
  %v3_13fe0 = icmp ult i32 %v1_13fe4, %v3_1400412
  %v3_13fe4 = select i1 %v3_13fe0, i32 0, i32 %v3_1400412
  %v1_13fec = sub i32 %v1_13fe4, %v3_13fe4
  %v4_13fe8 = udiv i32 %v3_1400412, 2
  %v6_13fe8 = icmp ult i32 %v1_13fec, %v4_13fe8
  %v6_13fec = select i1 %v6_13fe8, i32 0, i32 %v4_13fe8
  %v1_13fec.v6_13fec = sub i32 %v1_13fec, %v6_13fec
  %.demorgan = and i1 %v3_13fe0, %v6_13fe8
  %v4_13ff0 = udiv i32 %v3_1400412, 4
  %v6_13ff0 = icmp ult i32 %v1_13fec.v6_13fec, %v4_13ff0
  %v6_13ff4 = select i1 %v6_13ff0, i32 0, i32 %v4_13ff0
  %v1_13fec.v6_13fec.v6_13ff4 = sub i32 %v1_13fec.v6_13fec, %v6_13ff4
  %.demorgan71 = and i1 %.demorgan, %v6_13ff0
  %v4_13ff8 = udiv i32 %v3_1400412, 8
  %v6_13ff8 = icmp ult i32 %v1_13fec.v6_13fec.v6_13ff4, %v4_13ff8
  %v6_13ffc = select i1 %v6_13ff8, i32 0, i32 %v4_13ff8
  %v1_13fec.v6_13fec.v6_13ff4.v6_13ffc = sub i32 %v1_13fec.v6_13fec.v6_13ff4, %v6_13ffc
  %.demorgan72 = and i1 %.demorgan71, %v6_13ff8
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_13fe0
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_13fe0, %bb80
  %v2_14000 = add i32 %v1_13fec.v6_13fec.v6_13ff4.v6_13ffc, -1
  %v4_14000 = sub i32 0, %v1_13fec.v6_13fec.v6_13ff4.v6_13ffc
  %v5_14000 = and i32 %v1_13fec.v6_13fec.v6_13ff4.v6_13ffc, %v4_14000
  %v3_14004 = udiv i32 %v3_1400412, 16
  %v5_14008 = icmp slt i32 %v1_13fec.v6_13fec.v6_13ff4.v6_13ffc, 1
  br i1 %v5_14008, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_14008 = add i32 %v6_14008, -4
  %v9_14008 = sub i32 3, %v6_14008
  %v10_14008 = and i32 %v9_14008, %v6_14008
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_14010 = phi i32 [ %v6_14008, %bb81 ], [ %v7_14008, %bb82 ]
  %v0_1400c15.in = phi i32 [ %v2_14000, %bb81 ], [ %v7_14008, %bb82 ]
  %v1_1400c14.in = phi i32 [ %v5_14000, %bb81 ], [ %v10_14008, %bb82 ]
  %v1_1400c14 = icmp slt i32 %v1_1400c14.in, 0
  %v0_1400c15 = icmp slt i32 %v0_1400c15.in, 0
  %v2_1400c = xor i1 %v0_1400c15, %v1_1400c14
  br i1 %v2_1400c, label %dec_label_pc_14010, label %dec_label_pc_13fe0

dec_label_pc_14010:                               ; preds = %bb83
  %v1_14010 = urem i32 %v0_14010, 4
  %v2_14010 = icmp eq i32 %v1_14010, 0
  br i1 %v2_14010, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_14010
  %v3_14014 = icmp eq i32 %v1_13fec.v6_13fec.v6_13ff4.v6_13ffc, 0
  br i1 %v3_14014, label %bb76, label %dec_label_pc_1401c

dec_label_pc_1401c:                               ; preds = %bb84, %dec_label_pc_13fd8
  %v0_14030 = phi i32 [ %v3_14004, %bb84 ], [ %v1_13fcc, %dec_label_pc_13fd8 ]
  %v1_1402c = phi i32 [ %v1_13fec.v6_13fec.v6_13ff4.v6_13ffc, %bb84 ], [ %v1_13f98, %dec_label_pc_13fd8 ]
  %v0_1401c = phi i32 [ %v0_14010, %bb84 ], [ %v2_13fd8, %dec_label_pc_13fd8 ]
  %v5_14020 = icmp slt i32 %v0_1401c, -2
  br i1 %v5_14020, label %dec_label_pc_14040, label %dec_label_pc_14024

dec_label_pc_14024:                               ; preds = %dec_label_pc_1401c
  %v8_1401c = icmp eq i32 %v0_1401c, -2
  br i1 %v8_1401c, label %dec_label_pc_14034, label %dec_label_pc_14028

dec_label_pc_14028:                               ; preds = %dec_label_pc_14024
  %v3_14028 = icmp ult i32 %v1_1402c, %v0_14030
  br i1 %v3_14028, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_14028
  %v2_14028 = sub i32 %v1_1402c, %v0_14030
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_14028, %bb85
  %v0_1403452 = phi i32 [ %v1_1402c, %dec_label_pc_14028 ], [ %v2_14028, %bb85 ]
  %v3_14030 = udiv i32 %v0_14030, 2
  br label %dec_label_pc_14034

dec_label_pc_14034:                               ; preds = %dec_label_pc_14024, %bb86
  %v0_1403c = phi i32 [ %v0_14030, %dec_label_pc_14024 ], [ %v3_14030, %bb86 ]
  %v1_14038 = phi i32 [ %v1_1402c, %dec_label_pc_14024 ], [ %v0_1403452, %bb86 ]
  %v3_14034 = icmp ult i32 %v1_14038, %v0_1403c
  br i1 %v3_14034, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_14034
  %v2_14034 = sub i32 %v1_14038, %v0_1403c
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_14034, %bb87
  %v0_1404055 = phi i32 [ %v1_14038, %dec_label_pc_14034 ], [ %v2_14034, %bb87 ]
  %v3_1403c = udiv i32 %v0_1403c, 2
  br label %dec_label_pc_14040

dec_label_pc_14040:                               ; preds = %dec_label_pc_1401c, %bb88
  %v2_14044 = phi i32 [ %v0_14030, %dec_label_pc_1401c ], [ %v3_1403c, %bb88 ]
  %v1_14044 = phi i32 [ %v1_1402c, %dec_label_pc_1401c ], [ %v0_1404055, %bb88 ]
  %v3_14040 = icmp ult i32 %v1_14044, %v2_14044
  br i1 %v3_14040, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_14040
  %v2_14040 = sub i32 %v1_14044, %v2_14044
  br label %bb76

dec_label_pc_1404c:                               ; preds = %dec_label_pc_13f90
  %v0_1404c = load i32, i32* @lr, align 4
  %v0_14050 = call i32 @function_14140()
  call void @__pseudo_branch(i32 %v0_1404c)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_14044, { 1, 2, 0 }
  uselistorder i32 %v0_14030, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_14010, { 1, 0, 2 }
  uselistorder i32 %v7_14008, { 1, 0 }
  uselistorder i32 %v3_14004, { 1, 0 }
  uselistorder i32 %v1_13fec.v6_13fec.v6_13ff4.v6_13ffc, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_13ff8, { 1, 0 }
  uselistorder i32 %v4_13ff0, { 1, 0 }
  uselistorder i32 %v4_13fe8, { 1, 0 }
  uselistorder i32 %v6_14008, { 3, 0, 2, 1 }
  uselistorder i32 %v2_13fd8, { 1, 0 }
  uselistorder i32 %v1_13fcc, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_13fb8, { 1, 0, 3, 2 }
  uselistorder i32 %v0_13fc4.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_13f98, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_14040, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_14034, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_13fe0, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_1405c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1405c:
  store i32 %arg1, i32* @r0, align 4
  %v2_1405c = icmp eq i32 %arg2, 0
  br i1 %v2_1405c, label %dec_label_pc_14130, label %dec_label_pc_14064

dec_label_pc_14064:                               ; preds = %dec_label_pc_1405c
  %v1_1405c = icmp slt i32 %arg2, 0
  br i1 %v1_1405c, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_14064
  %v2_14064 = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_14064, %bb
  %v4_1407c = phi i32 [ %arg2, %dec_label_pc_14064 ], [ %v2_14064, %bb ]
  %v0_14068 = load i32, i32* @r0, align 4
  %v1_14068 = icmp slt i32 %v0_14068, 0
  br i1 %v1_14068, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_1406c = sub i32 0, %v0_14068
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_14074 = phi i32 [ %v0_14068, %bb79 ], [ %v2_1406c, %bb80 ]
  %v1_14070 = add i32 %v4_1407c, -1
  %v7_14070 = icmp eq i32 %v4_1407c, 1
  br i1 %v7_14070, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_14074 = icmp eq i32 %v1_14074, %v4_1407c
  br i1 %v10_14074, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_14074 = icmp ult i32 %v1_14074, %v4_1407c
  br i1 %v4_14074, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_1407c = and i32 %v1_14070, %v4_1407c
  %v8_1407c = icmp eq i32 %v6_1407c, 0
  br i1 %v8_1407c, label %.thread72, label %dec_label_pc_1408c.preheader

dec_label_pc_1408c.preheader:                     ; preds = %bb84
  %v2_1408c109 = icmp ugt i32 %v4_1407c, 268435455
  br i1 %v2_1408c109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_1408064 = phi i32 [ %v1_14074, %bb84 ], [ 0, %.thread70 ]
  %v3_14080 = and i32 %v1_1408064, %v1_14070
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_1408c.preheader
  %v0_140a0.pr35.lcssa = phi i32 [ %v4_1407c, %dec_label_pc_1408c.preheader ], [ %v4_14094, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_1408c.preheader ], [ %v2_140989, %.thread2.thread7 ]
  br label %dec_label_pc_140a0thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_1408c.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_140989, %.thread2.thread7 ], [ 0, %dec_label_pc_1408c.preheader ]
  %v0_140a0.pr35110 = phi i32 [ %v4_14094, %.thread2.thread7 ], [ %v4_1407c, %dec_label_pc_1408c.preheader ]
  %v4_14090 = icmp ult i32 %v0_140a0.pr35110, %v1_14074
  br i1 %v4_14090, label %bb86, label %dec_label_pc_140a0thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_14094 = and i32 %v0_140a0.pr35110, 268435456
  %v3_14094 = icmp eq i32 %v2_14094, 0
  %v4_14094 = mul i32 %v0_140a0.pr35110, 16
  br i1 %v3_14094, label %.thread2.thread7, label %dec_label_pc_140a0.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_140989 = add i32 %storemerge111, 4
  %v2_1408c = icmp ugt i32 %v4_14094, 268435455
  br i1 %v2_1408c, label %.thread1, label %bb85

dec_label_pc_140a0thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_140a0thread-pre-split.loopexit

dec_label_pc_140a0thread-pre-split.loopexit:      ; preds = %dec_label_pc_140a0thread-pre-split.loopexit.loopexit, %.thread1
  %v0_140a0.pr35108 = phi i32 [ %v0_140a0.pr35.lcssa, %.thread1 ], [ %v0_140a0.pr35110, %dec_label_pc_140a0thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_140a0thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_140a0thread-pre-split

dec_label_pc_140a0thread-pre-split:               ; preds = %.thread4, %dec_label_pc_140a0thread-pre-split.loopexit
  %v1_140ac41 = phi i32 [ %storemerge105, %dec_label_pc_140a0thread-pre-split.loopexit ], [ %v2_140ac, %.thread4 ]
  %v2_140a436 = phi i32 [ %v1_14074, %dec_label_pc_140a0thread-pre-split.loopexit ], [ %v2_140a4, %.thread4 ]
  %v0_140a0.pr = phi i32 [ %v0_140a0.pr35108, %dec_label_pc_140a0thread-pre-split.loopexit ], [ %v3_140a8, %.thread4 ]
  br label %dec_label_pc_140a0

dec_label_pc_140a0.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_140a0

dec_label_pc_140a0:                               ; preds = %dec_label_pc_140a0.loopexit, %dec_label_pc_140a0thread-pre-split
  %v0_140b4.pr = phi i32 [ %v1_140ac41, %dec_label_pc_140a0thread-pre-split ], [ %storemerge111, %dec_label_pc_140a0.loopexit ]
  %v2_140a4 = phi i32 [ %v2_140a436, %dec_label_pc_140a0thread-pre-split ], [ %v1_14074, %dec_label_pc_140a0.loopexit ]
  %v1_140a8 = phi i32 [ %v0_140a0.pr, %dec_label_pc_140a0thread-pre-split ], [ %v4_14094, %dec_label_pc_140a0.loopexit ]
  %v2_140a0 = icmp slt i32 %v1_140a8, 0
  br i1 %v2_140a0, label %dec_label_pc_140b4, label %bb87

bb87:                                             ; preds = %dec_label_pc_140a0
  %v4_140a4 = icmp ult i32 %v1_140a8, %v2_140a4
  br i1 %v4_140a4, label %.thread4, label %dec_label_pc_140b4

.thread4:                                         ; preds = %bb87
  %v3_140a8 = mul i32 %v1_140a8, 2
  %v2_140ac = add i32 %v0_140b4.pr, 1
  br label %dec_label_pc_140a0thread-pre-split

dec_label_pc_140b4:                               ; preds = %bb87, %dec_label_pc_140a0
  %v2_140b4 = add i32 %v0_140b4.pr, -3
  %v5_140b8 = icmp slt i32 %v0_140b4.pr, 3
  br i1 %v5_140b8, label %dec_label_pc_140f8, label %dec_label_pc_140bc

dec_label_pc_140bc:                               ; preds = %dec_label_pc_140b4, %bb91
  %v6_140e4 = phi i32 [ %v0_140ec, %bb91 ], [ %v2_140b4, %dec_label_pc_140b4 ]
  %v1_140c0 = phi i32 [ %v1_140c8.v6_140c8.v6_140d0.v6_140d8, %bb91 ], [ %v2_140a4, %dec_label_pc_140b4 ]
  %v3_140e010 = phi i32 [ %v3_140e0, %bb91 ], [ %v1_140a8, %dec_label_pc_140b4 ]
  %v3_140bc = icmp ult i32 %v1_140c0, %v3_140e010
  %v3_140c0 = select i1 %v3_140bc, i32 0, i32 %v3_140e010
  %v1_140c8 = sub i32 %v1_140c0, %v3_140c0
  %v4_140c4 = udiv i32 %v3_140e010, 2
  %v6_140c4 = icmp ult i32 %v1_140c8, %v4_140c4
  %v6_140c8 = select i1 %v6_140c4, i32 0, i32 %v4_140c4
  %v1_140c8.v6_140c8 = sub i32 %v1_140c8, %v6_140c8
  %.demorgan = and i1 %v3_140bc, %v6_140c4
  %v4_140cc = udiv i32 %v3_140e010, 4
  %v6_140cc = icmp ult i32 %v1_140c8.v6_140c8, %v4_140cc
  %v6_140d0 = select i1 %v6_140cc, i32 0, i32 %v4_140cc
  %v1_140c8.v6_140c8.v6_140d0 = sub i32 %v1_140c8.v6_140c8, %v6_140d0
  %.demorgan76 = and i1 %.demorgan, %v6_140cc
  %v4_140d4 = udiv i32 %v3_140e010, 8
  %v6_140d4 = icmp ult i32 %v1_140c8.v6_140c8.v6_140d0, %v4_140d4
  %v6_140d8 = select i1 %v6_140d4, i32 0, i32 %v4_140d4
  %v1_140c8.v6_140c8.v6_140d0.v6_140d8 = sub i32 %v1_140c8.v6_140c8.v6_140d0, %v6_140d8
  %.demorgan77 = and i1 %.demorgan76, %v6_140d4
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_140bc
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_140bc, %bb88
  %v2_140dc = add i32 %v1_140c8.v6_140c8.v6_140d0.v6_140d8, -1
  %v4_140dc = sub i32 0, %v1_140c8.v6_140c8.v6_140d0.v6_140d8
  %v5_140dc = and i32 %v1_140c8.v6_140c8.v6_140d0.v6_140d8, %v4_140dc
  %v3_140e0 = udiv i32 %v3_140e010, 16
  %v5_140e4 = icmp slt i32 %v1_140c8.v6_140c8.v6_140d0.v6_140d8, 1
  br i1 %v5_140e4, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_140e4 = add i32 %v6_140e4, -4
  %v9_140e4 = sub i32 3, %v6_140e4
  %v10_140e4 = and i32 %v9_140e4, %v6_140e4
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_140ec = phi i32 [ %v6_140e4, %bb89 ], [ %v7_140e4, %bb90 ]
  %v0_140e813.in = phi i32 [ %v2_140dc, %bb89 ], [ %v7_140e4, %bb90 ]
  %v1_140e812.in = phi i32 [ %v5_140dc, %bb89 ], [ %v10_140e4, %bb90 ]
  %v1_140e812 = icmp slt i32 %v1_140e812.in, 0
  %v0_140e813 = icmp slt i32 %v0_140e813.in, 0
  %v2_140e8 = xor i1 %v0_140e813, %v1_140e812
  br i1 %v2_140e8, label %dec_label_pc_140ec, label %dec_label_pc_140bc

dec_label_pc_140ec:                               ; preds = %bb91
  %v1_140ec = urem i32 %v0_140ec, 4
  %v2_140ec = icmp eq i32 %v1_140ec, 0
  br i1 %v2_140ec, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_140ec
  %v3_140f0 = icmp eq i32 %v1_140c8.v6_140c8.v6_140d0.v6_140d8, 0
  br i1 %v3_140f0, label %.thread6, label %dec_label_pc_140f8

dec_label_pc_140f8:                               ; preds = %bb92, %dec_label_pc_140b4
  %v0_1410c = phi i32 [ %v3_140e0, %bb92 ], [ %v1_140a8, %dec_label_pc_140b4 ]
  %v1_14108 = phi i32 [ %v1_140c8.v6_140c8.v6_140d0.v6_140d8, %bb92 ], [ %v2_140a4, %dec_label_pc_140b4 ]
  %v0_140f8 = phi i32 [ %v0_140ec, %bb92 ], [ %v2_140b4, %dec_label_pc_140b4 ]
  %v5_140fc = icmp slt i32 %v0_140f8, -2
  br i1 %v5_140fc, label %dec_label_pc_1411c, label %dec_label_pc_14100

dec_label_pc_14100:                               ; preds = %dec_label_pc_140f8
  %v8_140f8 = icmp eq i32 %v0_140f8, -2
  br i1 %v8_140f8, label %dec_label_pc_14110, label %dec_label_pc_14104

dec_label_pc_14104:                               ; preds = %dec_label_pc_14100
  %v3_14104 = icmp ult i32 %v1_14108, %v0_1410c
  br i1 %v3_14104, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_14104
  %v2_14104 = sub i32 %v1_14108, %v0_1410c
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_14104, %bb93
  %v0_1411054 = phi i32 [ %v1_14108, %dec_label_pc_14104 ], [ %v2_14104, %bb93 ]
  %v3_1410c = udiv i32 %v0_1410c, 2
  br label %dec_label_pc_14110

dec_label_pc_14110:                               ; preds = %dec_label_pc_14100, %bb94
  %v0_14118 = phi i32 [ %v0_1410c, %dec_label_pc_14100 ], [ %v3_1410c, %bb94 ]
  %v1_14114 = phi i32 [ %v1_14108, %dec_label_pc_14100 ], [ %v0_1411054, %bb94 ]
  %v3_14110 = icmp ult i32 %v1_14114, %v0_14118
  br i1 %v3_14110, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_14110
  %v2_14110 = sub i32 %v1_14114, %v0_14118
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_14110, %bb95
  %v0_1411c57 = phi i32 [ %v1_14114, %dec_label_pc_14110 ], [ %v2_14110, %bb95 ]
  %v3_14118 = udiv i32 %v0_14118, 2
  br label %dec_label_pc_1411c

dec_label_pc_1411c:                               ; preds = %dec_label_pc_140f8, %bb96
  %v2_14120 = phi i32 [ %v0_1410c, %dec_label_pc_140f8 ], [ %v3_14118, %bb96 ]
  %v1_14120 = phi i32 [ %v1_14108, %dec_label_pc_140f8 ], [ %v0_1411c57, %bb96 ]
  %v3_1411c = icmp ult i32 %v1_14120, %v2_14120
  br i1 %v3_1411c, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_1411c
  %v2_1411c = sub i32 %v1_14120, %v2_14120
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_1411c, %bb83, %.thread72, %dec_label_pc_140ec, %bb92, %bb97
  %v1_14128 = phi i32 [ %v1_140c8.v6_140c8.v6_140d0.v6_140d8, %dec_label_pc_140ec ], [ 0, %bb92 ], [ %v1_14120, %dec_label_pc_1411c ], [ %v2_1411c, %bb97 ], [ %v3_14080, %.thread72 ], [ %v1_14074, %bb83 ]
  br i1 %v1_14068, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_14128 = sub i32 0, %v1_14128
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_1412c = phi i32 [ %v1_14128, %.thread6 ], [ %v2_14128, %bb98 ]
  ret i32 %v1_1412c

dec_label_pc_14130:                               ; preds = %dec_label_pc_1405c
  %v0_14130 = load i32, i32* @lr, align 4
  %v0_14134 = call i32 @function_14140()
  call void @__pseudo_branch(i32 %v0_14130)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_1410c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_140ec, { 1, 0, 2 }
  uselistorder i32 %v7_140e4, { 1, 0 }
  uselistorder i32 %v3_140e0, { 1, 0 }
  uselistorder i32 %v1_140c8.v6_140c8.v6_140d0.v6_140d8, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_140d4, { 1, 0 }
  uselistorder i32 %v4_140cc, { 1, 0 }
  uselistorder i32 %v4_140c4, { 1, 0 }
  uselistorder i32 %v6_140e4, { 3, 0, 2, 1 }
  uselistorder i32 %v2_140b4, { 1, 0 }
  uselistorder i32 %v1_140a8, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_140a4, { 1, 0, 3, 2 }
  uselistorder i32 %v4_14094, { 1, 0, 3, 2 }
  uselistorder i32 %v0_140a0.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_14074, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_1407c, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_14140, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_1411c, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_14110, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_140bc, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_14140() local_unnamed_addr {
dec_label_pc_14140:
  %v1_14140 = load i32, i32* @r0, align 4
  ret i32 %v1_14140
}

define i32 @function_14144(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14144:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_14144 = load i32, i32* @r2, align 4
  %v1_14154 = add i32 %arg2, -12
  store i32 %v6_14144, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_14154, 2
  br i1 %tmp, label %dec_label_pc_1417c, label %dec_label_pc_14174

dec_label_pc_14174:                               ; preds = %dec_label_pc_14144
  %v0_14174 = call i32 @function_141b8()
  br label %dec_label_pc_141a8

dec_label_pc_1417c:                               ; preds = %dec_label_pc_14144
  %v2_14184 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_14184, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_14184, -4095
  br i1 %tmp8, label %dec_label_pc_141a8, label %dec_label_pc_14194

dec_label_pc_14194:                               ; preds = %dec_label_pc_1417c
  %v0_14194 = call i32 @function_14808()
  %v0_14198 = load i32, i32* %r4.global-to-local, align 4
  %v1_14198 = sub i32 0, %v0_14198
  %v2_1419c = inttoptr i32 %v0_14194 to i32*
  store i32 %v1_14198, i32* %v2_1419c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_141a8

dec_label_pc_141a8:                               ; preds = %dec_label_pc_14194, %dec_label_pc_1417c, %dec_label_pc_14174
  %storemerge = phi i32 [ %v0_14174, %dec_label_pc_14174 ], [ %v2_14184, %dec_label_pc_1417c ], [ -1, %dec_label_pc_14194 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_14184, { 1, 0, 2 }
}

define i32 @function_141b8() local_unnamed_addr {
dec_label_pc_141b8:
  %r4.global-to-local = alloca i32, align 4
  %v0_141d8 = load i32, i32* @r0, align 4
  store i32 %v0_141d8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_141d8, -4095
  br i1 %tmp, label %dec_label_pc_141f4, label %dec_label_pc_141e4

dec_label_pc_141e4:                               ; preds = %dec_label_pc_141b8
  %v0_141e4 = call i32 @function_14808()
  %v0_141e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_141e8 = sub i32 0, %v0_141e8
  %v2_141ec = inttoptr i32 %v0_141e4 to i32*
  store i32 %v1_141e8, i32* %v2_141ec, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_141f4

dec_label_pc_141f4:                               ; preds = %dec_label_pc_141b8, %dec_label_pc_141e4
  %v0_141f4 = phi i32 [ %v0_141d8, %dec_label_pc_141b8 ], [ -1, %dec_label_pc_141e4 ]
  ret i32 %v0_141f4

; uselistorder directives
  uselistorder i32 %v0_141d8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_141f4, { 1, 0 }
}

define i32 @function_14208(i8* %arg1) local_unnamed_addr {
dec_label_pc_14208:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14208 = load i32, i32* @r4, align 4
  store i32 %v3_14208, i32* %stack_var_-8, align 4
  %v3_1420c = call i32 @chdir(i8* %arg1)
  store i32 %v3_1420c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_1420c, -4095
  br i1 %tmp, label %dec_label_pc_1422c, label %dec_label_pc_1421c

dec_label_pc_1421c:                               ; preds = %dec_label_pc_14208
  %v0_1421c = call i32 @function_14808()
  %v0_14220 = load i32, i32* %r4.global-to-local, align 4
  %v1_14220 = sub i32 0, %v0_14220
  %v2_14224 = inttoptr i32 %v0_1421c to i32*
  store i32 %v1_14220, i32* %v2_14224, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1422c

dec_label_pc_1422c:                               ; preds = %dec_label_pc_14208, %dec_label_pc_1421c
  %v0_1422c = phi i32 [ %v3_1420c, %dec_label_pc_14208 ], [ -1, %dec_label_pc_1421c ]
  %v2_14230 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14230, i32* @r4, align 4
  ret i32 %v0_1422c

; uselistorder directives
  uselistorder i32 %v3_1420c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1422c, { 1, 0 }
}

define i32 @function_14234(i32 %arg1) local_unnamed_addr {
dec_label_pc_14234:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14234 = load i32, i32* @r4, align 4
  store i32 %v3_14234, i32* %stack_var_-8, align 4
  %v1_14238 = call i32 @close(i32 %arg1)
  store i32 %v1_14238, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_14238, -4095
  br i1 %tmp, label %dec_label_pc_14258, label %dec_label_pc_14248

dec_label_pc_14248:                               ; preds = %dec_label_pc_14234
  %v0_14248 = call i32 @function_14808()
  %v0_1424c = load i32, i32* %r4.global-to-local, align 4
  %v1_1424c = sub i32 0, %v0_1424c
  %v2_14250 = inttoptr i32 %v0_14248 to i32*
  store i32 %v1_1424c, i32* %v2_14250, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14258

dec_label_pc_14258:                               ; preds = %dec_label_pc_14234, %dec_label_pc_14248
  %v0_14258 = phi i32 [ %v1_14238, %dec_label_pc_14234 ], [ -1, %dec_label_pc_14248 ]
  %v2_1425c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1425c, i32* @r4, align 4
  ret i32 %v0_14258

; uselistorder directives
  uselistorder i32 %v1_14238, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14258, { 1, 0 }
}

define i32 @function_14260() local_unnamed_addr {
dec_label_pc_14260:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14260 = load i32, i32* @r4, align 4
  store i32 %v3_14260, i32* %stack_var_-8, align 4
  %v0_14264 = call i32 @fork()
  store i32 %v0_14264, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14264, -4095
  br i1 %tmp, label %dec_label_pc_14284, label %dec_label_pc_14274

dec_label_pc_14274:                               ; preds = %dec_label_pc_14260
  %v0_14274 = call i32 @function_14808()
  %v0_14278 = load i32, i32* %r4.global-to-local, align 4
  %v1_14278 = sub i32 0, %v0_14278
  %v2_1427c = inttoptr i32 %v0_14274 to i32*
  store i32 %v1_14278, i32* %v2_1427c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14284

dec_label_pc_14284:                               ; preds = %dec_label_pc_14260, %dec_label_pc_14274
  %v0_14284 = phi i32 [ %v0_14264, %dec_label_pc_14260 ], [ -1, %dec_label_pc_14274 ]
  %v2_14288 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14288, i32* @r4, align 4
  ret i32 %v0_14284

; uselistorder directives
  uselistorder i32 %v0_14264, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14284, { 1, 0 }
}

define i32 @function_1428c() local_unnamed_addr {
dec_label_pc_1428c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1428c = load i32, i32* @r4, align 4
  store i32 %v3_1428c, i32* %stack_var_-8, align 4
  %v0_14290 = call i32 @getpid()
  store i32 %v0_14290, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14290, -4095
  br i1 %tmp, label %dec_label_pc_142b0, label %dec_label_pc_142a0

dec_label_pc_142a0:                               ; preds = %dec_label_pc_1428c
  %v0_142a0 = call i32 @function_14808()
  %v0_142a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_142a4 = sub i32 0, %v0_142a4
  %v2_142a8 = inttoptr i32 %v0_142a0 to i32*
  store i32 %v1_142a4, i32* %v2_142a8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_142b0

dec_label_pc_142b0:                               ; preds = %dec_label_pc_1428c, %dec_label_pc_142a0
  %v0_142b0 = phi i32 [ %v0_14290, %dec_label_pc_1428c ], [ -1, %dec_label_pc_142a0 ]
  %v2_142b4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_142b4, i32* @r4, align 4
  ret i32 %v0_142b0

; uselistorder directives
  uselistorder i32 %v0_14290, { 1, 0, 2 }
  uselistorder label %dec_label_pc_142b0, { 1, 0 }
}

define i32 @function_142b8() local_unnamed_addr {
dec_label_pc_142b8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_142b8 = load i32, i32* @r4, align 4
  store i32 %v3_142b8, i32* %stack_var_-8, align 4
  %v0_142bc = call i32 @getppid()
  store i32 %v0_142bc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_142bc, -4095
  br i1 %tmp, label %dec_label_pc_142dc, label %dec_label_pc_142cc

dec_label_pc_142cc:                               ; preds = %dec_label_pc_142b8
  %v0_142cc = call i32 @function_14808()
  %v0_142d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_142d0 = sub i32 0, %v0_142d0
  %v2_142d4 = inttoptr i32 %v0_142cc to i32*
  store i32 %v1_142d0, i32* %v2_142d4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_142dc

dec_label_pc_142dc:                               ; preds = %dec_label_pc_142b8, %dec_label_pc_142cc
  %v0_142dc = phi i32 [ %v0_142bc, %dec_label_pc_142b8 ], [ -1, %dec_label_pc_142cc ]
  %v2_142e0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_142e0, i32* @r4, align 4
  ret i32 %v0_142dc

; uselistorder directives
  uselistorder i32 %v0_142bc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_142dc, { 1, 0 }
}

define i32 @function_142e4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_142e4:
  %r4.global-to-local = alloca i32, align 4
  %v2_14300 = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_14300, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_14300, -4095
  br i1 %tmp, label %dec_label_pc_14320, label %dec_label_pc_14310

dec_label_pc_14310:                               ; preds = %dec_label_pc_142e4
  %v0_14310 = call i32 @function_14808()
  %v0_14314 = load i32, i32* %r4.global-to-local, align 4
  %v1_14314 = sub i32 0, %v0_14314
  %v2_14318 = inttoptr i32 %v0_14310 to i32*
  store i32 %v1_14314, i32* %v2_14318, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14320

dec_label_pc_14320:                               ; preds = %dec_label_pc_142e4, %dec_label_pc_14310
  %v0_14320 = phi i32 [ %v2_14300, %dec_label_pc_142e4 ], [ -1, %dec_label_pc_14310 ]
  ret i32 %v0_14320

; uselistorder directives
  uselistorder i32 %v2_14300, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14320, { 1, 0 }
}

define i32 @function_14334(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14334:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14334 = load i32, i32* @r4, align 4
  store i32 %v3_14334, i32* %stack_var_-8, align 4
  %v2_14338 = call i32 @kill(i32 %arg1, i32 %arg2)
  %v7_1433c = icmp eq i32 %v2_14338, -4096
  store i1 %v7_1433c, i1* @cpsr_z, align 1
  store i32 %v2_14338, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_14338, -4095
  br i1 %tmp, label %dec_label_pc_14358, label %dec_label_pc_14348

dec_label_pc_14348:                               ; preds = %dec_label_pc_14334
  %v0_14348 = call i32 @function_14808()
  %v0_1434c = load i32, i32* %r4.global-to-local, align 4
  %v1_1434c = sub i32 0, %v0_1434c
  %v2_14350 = inttoptr i32 %v0_14348 to i32*
  store i32 %v1_1434c, i32* %v2_14350, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14358

dec_label_pc_14358:                               ; preds = %dec_label_pc_14334, %dec_label_pc_14348
  %v0_14358 = phi i32 [ %v2_14338, %dec_label_pc_14334 ], [ -1, %dec_label_pc_14348 ]
  %v2_1435c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1435c, i32* @r4, align 4
  ret i32 %v0_14358

; uselistorder directives
  uselistorder i32 %v2_14338, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_14358, { 1, 0 }
}

define i32 @function_14360(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14360:
  %r4.global-to-local = alloca i32, align 4
  %v1_14370 = and i32 %arg2, 64
  %v2_14370 = icmp eq i32 %v1_14370, 0
  br i1 %v2_14370, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_14360
  %v6_14360 = load i32, i32* @r2, align 4
  %phitmp = urem i32 %v6_14360, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_14360, %bb
  %v0_14380 = phi i32 [ 0, %dec_label_pc_14360 ], [ %phitmp, %bb ]
  store i32 %v0_14380, i32* @r2, align 4
  %v4_14388 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_1438c = icmp eq i32 %v4_14388, -4096
  store i1 %v7_1438c, i1* @cpsr_z, align 1
  store i32 %v4_14388, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_14388, -4095
  br i1 %tmp, label %dec_label_pc_143a8, label %dec_label_pc_14398

dec_label_pc_14398:                               ; preds = %.thread1
  %v0_14398 = call i32 @function_14808()
  %v0_1439c = load i32, i32* %r4.global-to-local, align 4
  %v1_1439c = sub i32 0, %v0_1439c
  %v2_143a0 = inttoptr i32 %v0_14398 to i32*
  store i32 %v1_1439c, i32* %v2_143a0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_143a8

dec_label_pc_143a8:                               ; preds = %.thread1, %dec_label_pc_14398
  %v0_143a8 = phi i32 [ %v4_14388, %.thread1 ], [ -1, %dec_label_pc_14398 ]
  ret i32 %v0_143a8

; uselistorder directives
  uselistorder i32 %v4_14388, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_143a8, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_143bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_143bc:
  store i32 %arg1, i32* @r2, align 4
  %v0_143c4 = load i32, i32* @r0, align 4
  %v2_143c4 = inttoptr i32 %v0_143c4 to i8*
  %v3_143c4 = call i32 @function_14360(i8* %v2_143c4, i32 577)
  %v0_143c8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_143c8, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_143bc
  %v6_143c8 = and i32 %v3_143c4, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_143bc, %bb
  %v7_143c8 = phi i32 [ %v3_143c4, %dec_label_pc_143bc ], [ %v6_143c8, %bb ]
  ret i32 %v7_143c8

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_143cc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_143cc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_143cc = load i32, i32* @r4, align 4
  store i32 %v3_143cc, i32* %stack_var_-8, align 4
  %v4_143d4 = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 0)
  store i32 %v4_143d4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_143d4, -4095
  br i1 %tmp, label %dec_label_pc_143f4, label %dec_label_pc_143e4

dec_label_pc_143e4:                               ; preds = %dec_label_pc_143cc
  %v0_143e4 = call i32 @function_14808()
  %v0_143e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_143e8 = sub i32 0, %v0_143e8
  %v2_143ec = inttoptr i32 %v0_143e4 to i32*
  store i32 %v1_143e8, i32* %v2_143ec, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_143f4

dec_label_pc_143f4:                               ; preds = %dec_label_pc_143cc, %dec_label_pc_143e4
  %v0_143f4 = phi i32 [ %v4_143d4, %dec_label_pc_143cc ], [ -1, %dec_label_pc_143e4 ]
  %v2_143f8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_143f8, i32* @r4, align 4
  ret i32 %v0_143f4

; uselistorder directives
  uselistorder i32 %v4_143d4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_143f4, { 1, 0 }
}

define i32 @function_143fc(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_143fc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_143fc = load i32, i32* @r4, align 4
  store i32 %v3_143fc, i32* %stack_var_-8, align 4
  %v4_14400 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_14400, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_14400, -4095
  br i1 %tmp, label %dec_label_pc_14420, label %dec_label_pc_14410

dec_label_pc_14410:                               ; preds = %dec_label_pc_143fc
  %v0_14410 = call i32 @function_14808()
  %v0_14414 = load i32, i32* %r4.global-to-local, align 4
  %v1_14414 = sub i32 0, %v0_14414
  %v2_14418 = inttoptr i32 %v0_14410 to i32*
  store i32 %v1_14414, i32* %v2_14418, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14420

dec_label_pc_14420:                               ; preds = %dec_label_pc_143fc, %dec_label_pc_14410
  %v0_14420 = phi i32 [ %v4_14400, %dec_label_pc_143fc ], [ -1, %dec_label_pc_14410 ]
  %v2_14424 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14424, i32* @r4, align 4
  ret i32 %v0_14420

; uselistorder directives
  uselistorder i32 %v4_14400, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14420, { 1, 0 }
}

define i32 @function_14428(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14428:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v3_14428 = load i32, i32* @r4, align 4
  store i32 %v3_14428, i32* %stack_var_-8, align 4
  %v7_1442c = call i32 @readlink(i8* %arg1, i8* %tmp, i32 %arg3)
  store i32 %v7_1442c, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v7_1442c, -4095
  br i1 %tmp6, label %dec_label_pc_1444c, label %dec_label_pc_1443c

dec_label_pc_1443c:                               ; preds = %dec_label_pc_14428
  %v0_1443c = call i32 @function_14808()
  %v0_14440 = load i32, i32* %r4.global-to-local, align 4
  %v1_14440 = sub i32 0, %v0_14440
  %v2_14444 = inttoptr i32 %v0_1443c to i32*
  store i32 %v1_14440, i32* %v2_14444, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1444c

dec_label_pc_1444c:                               ; preds = %dec_label_pc_14428, %dec_label_pc_1443c
  %v0_1444c = phi i32 [ %v7_1442c, %dec_label_pc_14428 ], [ -1, %dec_label_pc_1443c ]
  %v2_14450 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14450, i32* @r4, align 4
  ret i32 %v0_1444c

; uselistorder directives
  uselistorder i32 %v7_1442c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1444c, { 1, 0 }
}

define i32 @function_14454(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_14454:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14454 = load i32, i32* @r4, align 4
  store i32 %v3_14454, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1447c, label %dec_label_pc_1446c

dec_label_pc_1446c:                               ; preds = %dec_label_pc_14454
  %v0_1446c = call i32 @function_14808()
  %v0_14470 = load i32, i32* %r4.global-to-local, align 4
  %v1_14470 = sub i32 0, %v0_14470
  %v2_14474 = inttoptr i32 %v0_1446c to i32*
  store i32 %v1_14470, i32* %v2_14474, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_14480.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1447c

dec_label_pc_1447c:                               ; preds = %dec_label_pc_14454, %dec_label_pc_1446c
  %v2_14480 = phi i32 [ %v3_14454, %dec_label_pc_14454 ], [ %v2_14480.pre, %dec_label_pc_1446c ]
  %v0_1447c = phi i32 [ %arg1, %dec_label_pc_14454 ], [ -1, %dec_label_pc_1446c ]
  store i32 %v2_14480, i32* @r4, align 4
  ret i32 %v0_1447c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1447c, { 1, 0 }
}

define i32 @function_14484(i32 %arg1) local_unnamed_addr {
dec_label_pc_14484:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14484 = load i32, i32* @r4, align 4
  store i32 %v3_14484, i32* %stack_var_-8, align 4
  %v0_14488 = call i32 @setsid()
  store i32 %v0_14488, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14488, -4095
  br i1 %tmp, label %dec_label_pc_144a8, label %dec_label_pc_14498

dec_label_pc_14498:                               ; preds = %dec_label_pc_14484
  %v0_14498 = call i32 @function_14808()
  %v0_1449c = load i32, i32* %r4.global-to-local, align 4
  %v1_1449c = sub i32 0, %v0_1449c
  %v2_144a0 = inttoptr i32 %v0_14498 to i32*
  store i32 %v1_1449c, i32* %v2_144a0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_144a8

dec_label_pc_144a8:                               ; preds = %dec_label_pc_14484, %dec_label_pc_14498
  %v0_144a8 = phi i32 [ %v0_14488, %dec_label_pc_14484 ], [ -1, %dec_label_pc_14498 ]
  %v2_144ac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_144ac, i32* @r4, align 4
  ret i32 %v0_144a8

; uselistorder directives
  uselistorder i32 %v0_14488, { 1, 0, 2 }
  uselistorder label %dec_label_pc_144a8, { 1, 0 }
}

define i32 @function_144b0(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_144b0:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_144b0 = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_144b0, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_144b0
  %v3_144b85 = load i32, i32* @r4, align 4
  store i32 %v3_144b85, i32* %stack_var_-8, align 4
  br label %dec_label_pc_144d8

bb:                                               ; preds = %dec_label_pc_144b0
  %v3_144b8 = load i32, i32* @r4, align 4
  store i32 %v3_144b8, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_144d8, label %dec_label_pc_144c4

dec_label_pc_144c4:                               ; preds = %bb
  %v0_144c4 = call i32 @function_14808()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_144d0 = inttoptr i32 %v0_144c4 to i32*
  store i32 22, i32* %v2_144d0, align 4
  %v0_144fc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_144fc

dec_label_pc_144d8:                               ; preds = %.thread, %bb
  %v7_144d8 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_144d8, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_144d8, -4095
  br i1 %tmp13, label %dec_label_pc_144f8, label %dec_label_pc_144e8

dec_label_pc_144e8:                               ; preds = %dec_label_pc_144d8
  %v0_144e8 = call i32 @function_14808()
  %v0_144ec = load i32, i32* %r4.global-to-local, align 4
  %v1_144ec = sub i32 0, %v0_144ec
  %v2_144f0 = inttoptr i32 %v0_144e8 to i32*
  store i32 %v1_144ec, i32* %v2_144f0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_144f8

dec_label_pc_144f8:                               ; preds = %dec_label_pc_144d8, %dec_label_pc_144e8
  %v0_144f8 = phi i32 [ %v7_144d8, %dec_label_pc_144d8 ], [ -1, %dec_label_pc_144e8 ]
  store i32 %v0_144f8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_144fc

dec_label_pc_144fc:                               ; preds = %dec_label_pc_144c4, %dec_label_pc_144f8
  %v0_144fc = phi i32 [ %v0_144fc.pre, %dec_label_pc_144c4 ], [ %v0_144f8, %dec_label_pc_144f8 ]
  %v2_14500 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14500, i32* @r4, align 4
  ret i32 %v0_144fc

; uselistorder directives
  uselistorder i32 %v7_144d8, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_144fc, { 1, 0 }
  uselistorder label %dec_label_pc_144f8, { 1, 0 }
  uselistorder label %dec_label_pc_144d8, { 1, 0 }
}

define i32 @function_14504(i32* %arg1) local_unnamed_addr {
dec_label_pc_14504:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14504 = load i32, i32* @r4, align 4
  store i32 %v3_14504, i32* %stack_var_-8, align 4
  %v2_14508 = call i32 @time(i32* %arg1)
  store i32 %v2_14508, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_14508, -4095
  br i1 %tmp, label %dec_label_pc_14528, label %dec_label_pc_14518

dec_label_pc_14518:                               ; preds = %dec_label_pc_14504
  %v0_14518 = call i32 @function_14808()
  %v0_1451c = load i32, i32* %r4.global-to-local, align 4
  %v1_1451c = sub i32 0, %v0_1451c
  %v2_14520 = inttoptr i32 %v0_14518 to i32*
  store i32 %v1_1451c, i32* %v2_14520, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14528

dec_label_pc_14528:                               ; preds = %dec_label_pc_14504, %dec_label_pc_14518
  %v0_14528 = phi i32 [ %v2_14508, %dec_label_pc_14504 ], [ -1, %dec_label_pc_14518 ]
  %v2_1452c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1452c, i32* @r4, align 4
  ret i32 %v0_14528

; uselistorder directives
  uselistorder i32 %v2_14508, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14528, { 1, 0 }
}

define i32 @function_14530(i8* %arg1) local_unnamed_addr {
dec_label_pc_14530:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14530 = load i32, i32* @r4, align 4
  store i32 %v3_14530, i32* %stack_var_-8, align 4
  %v3_14534 = call i32 @unlink(i8* %arg1)
  store i32 %v3_14534, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_14534, -4095
  br i1 %tmp, label %dec_label_pc_14554, label %dec_label_pc_14544

dec_label_pc_14544:                               ; preds = %dec_label_pc_14530
  %v0_14544 = call i32 @function_14808()
  %v0_14548 = load i32, i32* %r4.global-to-local, align 4
  %v1_14548 = sub i32 0, %v0_14548
  %v2_1454c = inttoptr i32 %v0_14544 to i32*
  store i32 %v1_14548, i32* %v2_1454c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14554

dec_label_pc_14554:                               ; preds = %dec_label_pc_14530, %dec_label_pc_14544
  %v0_14554 = phi i32 [ %v3_14534, %dec_label_pc_14530 ], [ -1, %dec_label_pc_14544 ]
  %v2_14558 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14558, i32* @r4, align 4
  ret i32 %v0_14554

; uselistorder directives
  uselistorder i32 %v3_14534, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14554, { 1, 0 }
}

define i32 @function_1455c(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1455c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1455c = load i32, i32* @r4, align 4
  store i32 %v3_1455c, i32* %stack_var_-8, align 4
  %v4_14560 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_14560, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_14560, -4095
  br i1 %tmp, label %dec_label_pc_14580, label %dec_label_pc_14570

dec_label_pc_14570:                               ; preds = %dec_label_pc_1455c
  %v0_14570 = call i32 @function_14808()
  %v0_14574 = load i32, i32* %r4.global-to-local, align 4
  %v1_14574 = sub i32 0, %v0_14574
  %v2_14578 = inttoptr i32 %v0_14570 to i32*
  store i32 %v1_14574, i32* %v2_14578, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14580

dec_label_pc_14580:                               ; preds = %dec_label_pc_1455c, %dec_label_pc_14570
  %v0_14580 = phi i32 [ %v4_14560, %dec_label_pc_1455c ], [ -1, %dec_label_pc_14570 ]
  %v2_14584 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14584, i32* @r4, align 4
  ret i32 %v0_14580

; uselistorder directives
  uselistorder i32 %v4_14560, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14580, { 1, 0 }
}

define i32 @function_14588(i32* %arg1) local_unnamed_addr {
dec_label_pc_14588:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_14588 = load i32, i32* @r4, align 4
  store i32 %v3_14588, i32* %stack_var_-20, align 4
  %v6_14588 = load i32, i32* @r5, align 4
  %v9_14588 = load i32, i32* @r6, align 4
  %v12_14588 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_14590 = load i32, i32* %arg1, align 4
  store i32 %v2_14590, i32* %r4.global-to-local, align 4
  %v2_14594 = ptrtoint i32* %stack_var_-36 to i32
  %v1_14598 = add i32 %tmp, 24
  store i32 %v1_14598, i32* @r6, align 4
  %v3_1459c = icmp eq i32 %v2_14590, -1
  store i32 %v2_14594, i32* @r7, align 4
  store i32 %v1_14598, i32* %r2.global-to-local, align 4
  store i32 %v2_14594, i32* @r0, align 4
  br i1 %v3_1459c, label %dec_label_pc_145b4, label %dec_label_pc_145c8

dec_label_pc_145b4:                               ; preds = %dec_label_pc_14588
  %v0_145b4 = call i32 @function_14808()
  %v0_145bc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_145bc, i32* %r2.global-to-local, align 4
  %v2_145c0 = inttoptr i32 %v0_145b4 to i32*
  store i32 9, i32* %v2_145c0, align 4
  %v0_14620.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14620

dec_label_pc_145c8:                               ; preds = %dec_label_pc_14588
  %v8_145d0 = call i32 @function_1587c(i32 %v2_14594, i32 ptrtoint (i32* @global_var_15874.596 to i32), i32 %v1_14598, i32 88188, i32 %v3_14588, i32 %v6_14588, i32 %v9_14588)
  %v1_145e0 = call i32 @function_15874()
  %v0_145ec = load i32, i32* @r5, align 4
  %v1_145ec = inttoptr i32 %v0_145ec to i32*
  %v2_145ec = load i32, i32* %v1_145ec, align 4
  store i32 %v2_145ec, i32* @r4, align 4
  store i32 %v2_14594, i32* @r0, align 4
  store i32 -1, i32* %v1_145ec, align 4
  store i32 ptrtoint (i32* @global_var_14604.600 to i32), i32* @lr, align 4
  %v8_14600 = call i32 @function_1587c(i32 %v2_14594, i32 1, i32 %v1_14598, i32 88188, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_14604 = load i32, i32* @r5, align 4
  %v1_14604 = add i32 %v0_14604, 12
  %v2_14604 = inttoptr i32 %v1_14604 to i32*
  %v3_14604 = load i32, i32* %v2_14604, align 4
  store i32 %v3_14604, i32* @r0, align 4
  %v0_14608 = call i32 @function_14e8c()
  %v0_1460c = load i32, i32* @r5, align 4
  store i32 %v0_1460c, i32* @r0, align 4
  %v0_14610 = call i32 @function_14e8c()
  %v0_14614 = load i32, i32* @r4, align 4
  %v1_14618 = call i32 @function_14234(i32 %v0_14614)
  store i32 %v1_14618, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14620

dec_label_pc_14620:                               ; preds = %dec_label_pc_145b4, %dec_label_pc_145c8
  %v0_14620 = phi i32 [ %v0_14620.pre, %dec_label_pc_145b4 ], [ %v1_14618, %dec_label_pc_145c8 ]
  %v2_14628 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_14628, i32* @r4, align 4
  store i32 %v6_14588, i32* @r5, align 4
  store i32 %v9_14588, i32* @r6, align 4
  store i32 %v12_14588, i32* @r7, align 4
  ret i32 %v0_14620

; uselistorder directives
  uselistorder i32 %v1_14598, { 2, 1, 0, 3 }
  uselistorder i32 %v2_14594, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_14588, { 1, 0 }
  uselistorder i32 %v6_14588, { 1, 0 }
  uselistorder label %dec_label_pc_14620, { 1, 0 }
}

define i32 @function_1463c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1463c:
  %r5.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-108 = alloca i32, align 4
  %v3_1463c = load i32, i32* @r4, align 4
  %v9_1463c = load i32, i32* @r6, align 4
  %v12_1463c = load i32, i32* @r7, align 4
  %v0_14648 = load i32, i32* @r0, align 4
  %v2_14648 = inttoptr i32 %v0_14648 to i8*
  %v3_14648 = call i32 @function_14360(i8* %v2_14648, i32 18432)
  store i32 %v3_14648, i32* @r0, align 4
  store i32 %v3_14648, i32* @r7, align 4
  %v1_1464c = icmp slt i32 %v3_14648, 0
  br i1 %v1_1464c, label %.thread1, label %dec_label_pc_14658

.thread1:                                         ; preds = %dec_label_pc_1463c
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_14728

dec_label_pc_14658:                               ; preds = %dec_label_pc_1463c
  %v2_14644 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_14644, i32* @r1, align 4
  %v0_1465c = call i32 @function_15ca0()
  %v1_14660 = icmp slt i32 %v0_1465c, 0
  br i1 %v1_14660, label %dec_label_pc_14680, label %dec_label_pc_14668

dec_label_pc_14668:                               ; preds = %dec_label_pc_14658
  %v0_14668 = load i32, i32* @r7, align 4
  store i32 1, i32* @r2, align 4
  %v2_14674 = call i32 @function_14144(i32 %v0_14668, i32 2)
  %v1_14678 = icmp slt i32 %v2_14674, 0
  br i1 %v1_14678, label %dec_label_pc_14680, label %dec_label_pc_146a0

dec_label_pc_14680:                               ; preds = %dec_label_pc_14668, %dec_label_pc_14658
  %v0_14680 = call i32 @function_14808()
  store i32 %v0_14680, i32* %r5.global-to-local, align 4
  %v0_14688 = load i32, i32* @r7, align 4
  %v1_1468c = inttoptr i32 %v0_14680 to i32*
  %v2_1468c = load i32, i32* %v1_1468c, align 4
  store i32 %v2_1468c, i32* @r4, align 4
  %v1_14690 = call i32 @function_14234(i32 %v0_14688)
  store i32 0, i32* @r6, align 4
  %v0_14698 = load i32, i32* @r4, align 4
  %v1_14698 = load i32, i32* %r5.global-to-local, align 4
  %v2_14698 = inttoptr i32 %v1_14698 to i32*
  store i32 %v0_14698, i32* %v2_14698, align 4
  br label %dec_label_pc_14728

dec_label_pc_146a0:                               ; preds = %dec_label_pc_14668
  %v1_146a4 = call i32 @function_14ce0(i32 48)
  store i32 %v1_146a4, i32* @r6, align 4
  %v2_146a8 = icmp eq i32 %v1_146a4, 0
  br i1 %v2_146a8, label %dec_label_pc_146f8, label %dec_label_pc_146b0

dec_label_pc_146b0:                               ; preds = %dec_label_pc_146a0
  store i32 0, i32* @r4, align 4
  %v2_146b4 = add i32 %v1_146a4, 16
  %v3_146b4 = inttoptr i32 %v2_146b4 to i32*
  store i32 0, i32* %v3_146b4, align 4
  %v2_146bc = icmp ugt i32 %tmp, 511
  %v1_146c0 = load i32, i32* @r6, align 4
  %v2_146c0 = add i32 %v1_146c0, 20
  %v3_146c0 = inttoptr i32 %v2_146c0 to i32*
  store i32 %tmp, i32* %v3_146c0, align 4
  br i1 %v2_146bc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_146b0
  %v2_146c8 = load i32, i32* @r6, align 4
  %v3_146c8 = add i32 %v2_146c8, 20
  %v4_146c8 = inttoptr i32 %v3_146c8 to i32*
  store i32 512, i32* %v4_146c8, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_146b0, %bb
  %v0_146cc = load i32, i32* @r7, align 4
  %v1_146cc = load i32, i32* @r6, align 4
  %v2_146cc = inttoptr i32 %v1_146cc to i32*
  store i32 %v0_146cc, i32* %v2_146cc, align 4
  %v0_146d0 = load i32, i32* @r4, align 4
  %v1_146d0 = load i32, i32* @r6, align 4
  %v2_146d0 = add i32 %v1_146d0, 8
  %v3_146d0 = inttoptr i32 %v2_146d0 to i32*
  store i32 %v0_146d0, i32* %v3_146d0, align 4
  %v0_146d4 = load i32, i32* @r4, align 4
  %v1_146d4 = load i32, i32* @r6, align 4
  %v2_146d4 = add i32 %v1_146d4, 4
  %v3_146d4 = inttoptr i32 %v2_146d4 to i32*
  store i32 %v0_146d4, i32* %v3_146d4, align 4
  %v0_146dc = load i32, i32* @r6, align 4
  %v1_146dc = add i32 %v0_146dc, 20
  %v2_146dc = inttoptr i32 %v1_146dc to i32*
  %v3_146dc = load i32, i32* %v2_146dc, align 4
  %v2_146e0 = call i32 @function_14e34(i32 1, i32 %v3_146dc)
  %v2_146e4 = icmp eq i32 %v2_146e0, 0
  %v1_146e8 = load i32, i32* @r6, align 4
  %v2_146e8 = add i32 %v1_146e8, 12
  %v3_146e8 = inttoptr i32 %v2_146e8 to i32*
  store i32 %v2_146e0, i32* %v3_146e8, align 4
  br i1 %v2_146e4, label %dec_label_pc_146f0, label %dec_label_pc_14714

dec_label_pc_146f0:                               ; preds = %.thread
  %v0_146f0 = load i32, i32* @r6, align 4
  store i32 %v0_146f0, i32* @r0, align 4
  %v0_146f4 = call i32 @function_14e8c()
  br label %dec_label_pc_146f8

dec_label_pc_146f8:                               ; preds = %dec_label_pc_146a0, %dec_label_pc_146f0
  %v0_146f8 = load i32, i32* @r7, align 4
  %v1_146fc = call i32 @function_14234(i32 %v0_146f8)
  %v0_14700 = call i32 @function_14808()
  store i32 0, i32* @r6, align 4
  %v2_1470c = inttoptr i32 %v0_14700 to i32*
  store i32 12, i32* %v2_1470c, align 4
  br label %dec_label_pc_14728

dec_label_pc_14714:                               ; preds = %.thread
  store i32 83752, i32* @lr, align 4
  %v1_14724 = call i32 @function_15874()
  br label %dec_label_pc_14728

dec_label_pc_14728:                               ; preds = %.thread1, %dec_label_pc_146f8, %dec_label_pc_14680, %dec_label_pc_14714
  %v0_14728 = load i32, i32* @r6, align 4
  store i32 %v3_1463c, i32* @r4, align 4
  store i32 %v9_1463c, i32* @r6, align 4
  store i32 %v12_1463c, i32* @r7, align 4
  ret i32 %v0_14728

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_14e34, { 42, 5, 43, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 1, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 4, 3, 2, 0 }
  uselistorder i32 512, { 0, 5, 1, 2, 8, 6, 7, 9, 3, 10, 4, 11 }
  uselistorder i32 (i32)* @function_14234, { 30, 29, 28, 13, 44, 43, 12, 11, 42, 41, 10, 9, 14, 40, 39, 38, 37, 36, 15, 35, 34, 33, 32, 31, 27, 26, 25, 24, 23, 22, 21, 5, 4, 3, 20, 19, 18, 17, 16, 8, 7, 6, 0, 2, 1 }
  uselistorder label %dec_label_pc_14728, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_146f8, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_14738(i32* %arg1) local_unnamed_addr {
dec_label_pc_14738:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_14738 = load i32, i32* @r4, align 4
  %v6_14738 = load i32, i32* @r5, align 4
  %v9_14738 = load i32, i32* @lr, align 4
  %v1_1473c = add i32 %tmp, 24
  store i32 %v1_1473c, i32* @r4, align 4
  %v2_14740 = ptrtoint i32* %stack_var_-28 to i32
  store i32 88188, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v2_14740, i32* @r0, align 4
  store i32 %v1_1473c, i32* %r2.global-to-local, align 4
  %v8_1475c = call i32 @function_1587c(i32 %v2_14740, i32 ptrtoint (i32* @global_var_15874.596 to i32), i32 %v1_1473c, i32 88188, i32 %v3_14738, i32 %v6_14738, i32 %v9_14738)
  %v0_14760 = load i32, i32* @r4, align 4
  store i32 %v0_14760, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15874.596 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14770.605 to i32), i32* @lr, align 4
  %v1_1476c = call i32 @function_15874()
  store i32 %v1_1476c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14770

dec_label_pc_14770:                               ; preds = %dec_label_pc_147a4, %dec_label_pc_14738
  %v0_14770 = load i32, i32* @r5, align 4
  %v1_14770 = add i32 %v0_14770, 4
  %v2_14770 = inttoptr i32 %v1_14770 to i32*
  %v3_14770 = load i32, i32* %v2_14770, align 4
  store i32 %v3_14770, i32* %r2.global-to-local, align 4
  %v4_14770 = add i32 %v0_14770, 8
  %v5_14770 = inttoptr i32 %v4_14770 to i32*
  %v6_14770 = load i32, i32* %v5_14770, align 4
  store i32 %v6_14770, i32* %r3.global-to-local, align 4
  %tmp8 = icmp ugt i32 %v6_14770, %v3_14770
  br i1 %tmp8, label %dec_label_pc_147a4, label %dec_label_pc_1477c

dec_label_pc_1477c:                               ; preds = %dec_label_pc_14770
  %v1_1477c = inttoptr i32 %v0_14770 to i32*
  %v2_1477c = load i32, i32* %v1_1477c, align 4
  store i32 %v2_1477c, i32* @r0, align 4
  %v1_14780 = add i32 %v0_14770, 12
  %v2_14780 = inttoptr i32 %v1_14780 to i32*
  %v3_14780 = load i32, i32* %v2_14780, align 4
  %v1_14784 = add i32 %v0_14770, 20
  %v2_14784 = inttoptr i32 %v1_14784 to i32*
  %v3_14784 = load i32, i32* %v2_14784, align 4
  store i32 %v3_14784, i32* @r2, align 4
  %v4_14788 = call i32 @function_15cf0(i32 %v2_1477c, i32 %v3_14780, i32 %v3_14784, i32 %v6_14770)
  store i32 %v4_14788, i32* %r0.global-to-local, align 4
  %tmp7 = icmp slt i32 %v4_14788, 1
  br i1 %tmp7, label %.thread, label %dec_label_pc_14798

.thread:                                          ; preds = %dec_label_pc_1477c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_147d8

dec_label_pc_14798:                               ; preds = %dec_label_pc_1477c
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_1479c = load i32, i32* @r5, align 4
  %v2_1479c = add i32 %v1_1479c, 4
  %v3_1479c = inttoptr i32 %v2_1479c to i32*
  store i32 0, i32* %v3_1479c, align 4
  %v1_147a0 = load i32, i32* @r5, align 4
  %v2_147a0 = add i32 %v1_147a0, 8
  %v3_147a0 = inttoptr i32 %v2_147a0 to i32*
  store i32 %v4_14788, i32* %v3_147a0, align 4
  %v0_147a4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_147a4

dec_label_pc_147a4:                               ; preds = %dec_label_pc_14770, %dec_label_pc_14798
  %v1_147bc = phi i32 [ %v0_14770, %dec_label_pc_14770 ], [ %v0_147a4.pre, %dec_label_pc_14798 ]
  %v1_147a4 = add i32 %v1_147bc, 4
  %v2_147a4 = inttoptr i32 %v1_147a4 to i32*
  %v3_147a4 = load i32, i32* %v2_147a4, align 4
  store i32 %v3_147a4, i32* %r2.global-to-local, align 4
  %v1_147a8 = add i32 %v1_147bc, 12
  %v2_147a8 = inttoptr i32 %v1_147a8 to i32*
  %v3_147a8 = load i32, i32* %v2_147a8, align 4
  store i32 %v3_147a8, i32* %ip.global-to-local, align 4
  %v2_147ac = add i32 %v3_147a8, %v3_147a4
  store i32 %v2_147ac, i32* @r4, align 4
  %v1_147b0 = add i32 %v2_147ac, 4
  %v2_147b0 = inttoptr i32 %v1_147b0 to i32*
  %v3_147b0 = load i32, i32* %v2_147b0, align 4
  %v1_147b4 = add i32 %v2_147ac, 8
  %v2_147b4 = inttoptr i32 %v1_147b4 to i8*
  %v3_147b4 = load i8, i8* %v2_147b4, align 1
  %v4_147b4 = zext i8 %v3_147b4 to i32
  store i32 %v4_147b4, i32* %r3.global-to-local, align 4
  %v1_147b8 = add i32 %v2_147ac, 9
  %v2_147b8 = inttoptr i32 %v1_147b8 to i8*
  %v3_147b8 = load i8, i8* %v2_147b8, align 1
  %v4_147b8 = zext i8 %v3_147b8 to i32
  store i32 %v4_147b8, i32* %r0.global-to-local, align 4
  %v2_147bc = add i32 %v1_147bc, 16
  %v3_147bc = inttoptr i32 %v2_147bc to i32*
  store i32 %v3_147b0, i32* %v3_147bc, align 4
  %v0_147c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_147c0 = load i32, i32* %ip.global-to-local, align 4
  %v2_147c0 = add i32 %v1_147c0, %v0_147c0
  %v3_147c0 = inttoptr i32 %v2_147c0 to i32*
  %v4_147c0 = load i32, i32* %v3_147c0, align 4
  %v0_147c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_147c4 = load i32, i32* %r0.global-to-local, align 4
  %v4_147c4 = mul i32 %v1_147c4, 256
  %v5_147c4 = or i32 %v4_147c4, %v0_147c4
  store i32 %v5_147c4, i32* %r3.global-to-local, align 4
  %v2_147c8 = add i32 %v5_147c4, %v0_147c0
  store i32 %v2_147c8, i32* @r2, align 4
  %v2_147cc = icmp eq i32 %v4_147c0, 0
  %v1_147d0 = load i32, i32* @r5, align 4
  %v2_147d0 = add i32 %v1_147d0, 4
  %v3_147d0 = inttoptr i32 %v2_147d0 to i32*
  store i32 %v2_147c8, i32* %v3_147d0, align 4
  br i1 %v2_147cc, label %dec_label_pc_14770, label %dec_label_pc_147d8

dec_label_pc_147d8:                               ; preds = %dec_label_pc_147a4, %.thread
  store i32 %v2_14740, i32* @r0, align 4
  store i32 88188, i32* %r3.global-to-local, align 4
  store i32 83948, i32* @lr, align 4
  %v3_147e8 = load i32, i32* @r2, align 4
  %v8_147e8 = call i32 @function_1587c(i32 %v2_14740, i32 1, i32 %v3_147e8, i32 88188, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_147ec = load i32, i32* @r4, align 4
  store i32 %v0_147ec, i32* %r0.global-to-local, align 4
  store i32 %v3_14738, i32* @r4, align 4
  store i32 %v6_14738, i32* @r5, align 4
  ret i32 %v0_147ec

; uselistorder directives
  uselistorder i32 %v1_147bc, { 0, 2, 1 }
  uselistorder i32 %v6_14770, { 1, 0, 2 }
  uselistorder i32 %v0_14770, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v2_14740, { 1, 0, 3, 2 }
  uselistorder i32 %v1_1473c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_147a4, { 1, 0 }
}

define i32 @function_14808() local_unnamed_addr {
dec_label_pc_14808:
  ret i32 ptrtoint (i32* @global_var_1f84c.608 to i32)
}

define i32 @function_14814(i32 %arg1) local_unnamed_addr {
dec_label_pc_14814:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_14820 = bitcast i32* %stack_var_-20 to %tms*
  %v2_14820 = call i32 @function_16080(%tms* %v1_14820)
  %v2_14828 = load i32, i32* %stack_var_-20, align 4
  %v2_1482c = add i32 %v2_14828, %tmp
  %v2_14834 = mul i32 %v2_1482c, 10000
  %v1_14838 = and i32 %v2_14834, 2147483632
  ret i32 %v1_14838

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_14844(i32 %arg1) local_unnamed_addr {
dec_label_pc_14844:
  %v0_14844 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14844, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_14844
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_14844, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_14850(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14850:
  %v0_14850 = call i32 @function_16490()
  ret i32 %v0_14850
}

define i32 @function_14860(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14860:
  %v0_14860 = call i32 @function_16490()
  ret i32 %v0_14860

; uselistorder directives
  uselistorder i32 ()* @function_16490, { 1, 0 }
}

define i32 @function_14870(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14870:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_14874 = load i32, i32* @r2, align 4
  %v8_14874 = icmp eq i32 %v0_14874, 8
  store i1 %v8_14874, i1* %cpsr_z.global-to-local, align 1
  %v5_14878 = icmp slt i32 %v0_14874, 8
  br i1 %v5_14878, label %dec_label_pc_148d8, label %dec_label_pc_1487c

dec_label_pc_1487c:                               ; preds = %dec_label_pc_14870
  %v4_1487c = mul i32 %arg2, 256
  %v5_1487c = or i32 %v4_1487c, %arg2
  %v4_14880 = mul i32 %v5_1487c, 65536
  %v5_14880 = or i32 %v4_14880, %v5_1487c
  store i32 %v5_14880, i32* %r1.global-to-local, align 4
  %v1_1488457 = urem i32 %tmp, 4
  %v2_1488458 = icmp eq i32 %v1_1488457, 0
  store i1 %v2_1488458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_1488458, label %dec_label_pc_14894, label %bb

bb:                                               ; preds = %dec_label_pc_1487c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_1487c ]
  %v3_1488859 = phi i32 [ %v6_14888, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_1487c ]
  %v4_14888 = inttoptr i32 %v3_1488859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_14888, align 1
  %v5_14888 = load i32, i32* %r3.global-to-local, align 4
  %v6_14888 = add i32 %v5_14888, 1
  store i32 %v6_14888, i32* %r3.global-to-local, align 4
  %v0_1488c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_14898.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_1488c.pr, label %dec_label_pc_14894, label %.thread

.thread:                                          ; preds = %bb
  %v2_1488c = add i32 %v0_14898.pr.pre, -1
  store i32 %v2_1488c, i32* @r2, align 4
  %v1_14884 = urem i32 %v6_14888, 4
  %v2_14884 = icmp eq i32 %v1_14884, 0
  store i1 %v2_14884, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14884, label %dec_label_pc_14894, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_14888.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_14888.pre to i8
  br label %bb

dec_label_pc_14894:                               ; preds = %.thread, %bb, %dec_label_pc_1487c
  %v0_148a028 = phi i32 [ %tmp, %dec_label_pc_1487c ], [ %v6_14888, %bb ], [ %v6_14888, %.thread ]
  %v0_14898.pr = phi i32 [ %v0_14874, %dec_label_pc_1487c ], [ %v0_14898.pr.pre, %bb ], [ %v2_1488c, %.thread ]
  %v0_14894 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_14894, i32* %ip.global-to-local, align 4
  %v8_1489810 = icmp eq i32 %v0_14898.pr, 8
  store i1 %v8_1489810, i1* %cpsr_z.global-to-local, align 1
  %v5_1489c11 = icmp slt i32 %v0_14898.pr, 8
  br i1 %v5_1489c11, label %dec_label_pc_148d8, label %dec_label_pc_148a0.preheader

dec_label_pc_148a0.preheader:                     ; preds = %dec_label_pc_14894
  %v1_148a046 = inttoptr i32 %v0_148a028 to i32*
  store i32 %v0_14894, i32* %v1_148a046, align 4
  %v3_148a047 = add i32 %v0_148a028, 4
  %v4_148a048 = inttoptr i32 %v3_148a047 to i32*
  %v5_148a049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_148a049, i32* %v4_148a048, align 4
  %v6_148a050 = add i32 %v0_148a028, 8
  store i32 %v6_148a050, i32* %r3.global-to-local, align 4
  %v0_148a451 = load i32, i32* @r2, align 4
  %v1_148a452 = add i32 %v0_148a451, -8
  store i32 %v1_148a452, i32* %r2.global-to-local, align 4
  %v5_148ac53 = icmp slt i32 %v1_148a452, 8
  br i1 %v5_148ac53, label %dec_label_pc_148a0.dec_label_pc_148d8.loopexit_crit_edge, label %dec_label_pc_148b0

dec_label_pc_148b0:                               ; preds = %dec_label_pc_148a0.preheader, %dec_label_pc_14898.dec_label_pc_148a0_crit_edge
  %v6_148a055 = phi i32 [ %v6_148a0, %dec_label_pc_14898.dec_label_pc_148a0_crit_edge ], [ %v6_148a050, %dec_label_pc_148a0.preheader ]
  %v0_148a054 = phi i32 [ %v12_148cc, %dec_label_pc_14898.dec_label_pc_148a0_crit_edge ], [ %v0_148a028, %dec_label_pc_148a0.preheader ]
  %v1_148b0 = inttoptr i32 %v6_148a055 to i32*
  %v2_148b0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_148b0, i32* %v1_148b0, align 4
  %v3_148b0 = add i32 %v0_148a054, 12
  %v4_148b0 = inttoptr i32 %v3_148b0 to i32*
  %v5_148b0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_148b0, i32* %v4_148b0, align 4
  %v6_148b0 = add i32 %v0_148a054, 16
  store i32 %v6_148b0, i32* %r3.global-to-local, align 4
  %v0_148b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_148b4 = add i32 %v0_148b4, -8
  store i32 %v1_148b4, i32* %r2.global-to-local, align 4
  %v5_148bc = icmp slt i32 %v1_148b4, 8
  br i1 %v5_148bc, label %dec_label_pc_148b0.dec_label_pc_148d8.loopexit_crit_edge, label %dec_label_pc_148c0

dec_label_pc_148c0:                               ; preds = %dec_label_pc_148b0
  %v1_148c0 = inttoptr i32 %v6_148b0 to i32*
  %v2_148c0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_148c0, i32* %v1_148c0, align 4
  %v3_148c0 = add i32 %v0_148a054, 20
  %v4_148c0 = inttoptr i32 %v3_148c0 to i32*
  %v5_148c0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_148c0, i32* %v4_148c0, align 4
  %v6_148c0 = add i32 %v0_148a054, 24
  store i32 %v6_148c0, i32* %r3.global-to-local, align 4
  %v0_148c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_148c4 = add i32 %v0_148c4, -8
  store i32 %v1_148c4, i32* %r2.global-to-local, align 4
  %v5_148cc = icmp slt i32 %v1_148c4, 8
  br i1 %v5_148cc, label %dec_label_pc_148c0.dec_label_pc_148d8.loopexit_crit_edge, label %dec_label_pc_14898

dec_label_pc_14898:                               ; preds = %dec_label_pc_148c0
  %v7_148cc = inttoptr i32 %v6_148c0 to i32*
  %v8_148cc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_148cc, i32* %v7_148cc, align 4
  %v9_148cc = add i32 %v0_148a054, 28
  %v10_148cc = inttoptr i32 %v9_148cc to i32*
  %v11_148cc = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_148cc, i32* %v10_148cc, align 4
  %v12_148cc = add i32 %v0_148a054, 32
  store i32 %v12_148cc, i32* %r3.global-to-local, align 4
  %v6_148d0 = load i32, i32* %r2.global-to-local, align 4
  %v7_148d0 = add i32 %v6_148d0, -8
  store i32 %v7_148d0, i32* %r2.global-to-local, align 4
  %v5_1489c = icmp slt i32 %v7_148d0, 8
  br i1 %v5_1489c, label %dec_label_pc_14898.dec_label_pc_148d8.loopexit_crit_edge, label %dec_label_pc_14898.dec_label_pc_148a0_crit_edge

dec_label_pc_14898.dec_label_pc_148a0_crit_edge:  ; preds = %dec_label_pc_14898
  %v2_148a0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_148a0 = inttoptr i32 %v12_148cc to i32*
  store i32 %v2_148a0.pre, i32* %v1_148a0, align 4
  %v3_148a0 = add i32 %v0_148a054, 36
  %v4_148a0 = inttoptr i32 %v3_148a0 to i32*
  %v5_148a0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_148a0, i32* %v4_148a0, align 4
  %v6_148a0 = add i32 %v0_148a054, 40
  store i32 %v6_148a0, i32* %r3.global-to-local, align 4
  %v0_148a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_148a4 = add i32 %v0_148a4, -8
  store i32 %v1_148a4, i32* %r2.global-to-local, align 4
  %v5_148ac = icmp slt i32 %v1_148a4, 8
  br i1 %v5_148ac, label %dec_label_pc_148a0.dec_label_pc_148d8.loopexit_crit_edge, label %dec_label_pc_148b0

dec_label_pc_148a0.dec_label_pc_148d8.loopexit_crit_edge: ; preds = %dec_label_pc_14898.dec_label_pc_148a0_crit_edge, %dec_label_pc_148a0.preheader
  %v1_148a4.lcssa = phi i32 [ %v1_148a452, %dec_label_pc_148a0.preheader ], [ %v1_148a4, %dec_label_pc_14898.dec_label_pc_148a0_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_148d8

dec_label_pc_14898.dec_label_pc_148d8.loopexit_crit_edge: ; preds = %dec_label_pc_14898
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_148d8

dec_label_pc_148b0.dec_label_pc_148d8.loopexit_crit_edge: ; preds = %dec_label_pc_148b0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_148d8

dec_label_pc_148c0.dec_label_pc_148d8.loopexit_crit_edge: ; preds = %dec_label_pc_148c0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_148d8

dec_label_pc_148d8:                               ; preds = %dec_label_pc_14894, %dec_label_pc_148a0.dec_label_pc_148d8.loopexit_crit_edge, %dec_label_pc_14898.dec_label_pc_148d8.loopexit_crit_edge, %dec_label_pc_148b0.dec_label_pc_148d8.loopexit_crit_edge, %dec_label_pc_148c0.dec_label_pc_148d8.loopexit_crit_edge, %dec_label_pc_14870
  %v0_148e0 = phi i32 [ %v0_14874, %dec_label_pc_14870 ], [ %v1_148c4, %dec_label_pc_148c0.dec_label_pc_148d8.loopexit_crit_edge ], [ %v1_148b4, %dec_label_pc_148b0.dec_label_pc_148d8.loopexit_crit_edge ], [ %v7_148d0, %dec_label_pc_14898.dec_label_pc_148d8.loopexit_crit_edge ], [ %v1_148a4.lcssa, %dec_label_pc_148a0.dec_label_pc_148d8.loopexit_crit_edge ], [ %v0_14898.pr, %dec_label_pc_14894 ]
  %v2_148d8 = icmp eq i32 %v0_148e0, 0
  store i1 %v2_148d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_148d8, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_148d8
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_148d8
  %v1_148e0 = sub i32 7, %v0_148e0
  store i32 %v1_148e0, i32* %r2.global-to-local, align 4
  %v3_148e4 = mul i32 %v1_148e0, 4
  %v4_148e4 = add i32 %v3_148e4, ptrtoint (i32* @global_var_148ec.610 to i32)
  call void @__pseudo_branch(i32 %v4_148e4)
  %v0_148ec = load i32, i32* %r1.global-to-local, align 4
  %v1_148ec = trunc i32 %v0_148ec to i8
  %v2_148ec = load i32, i32* %r3.global-to-local, align 4
  %v3_148ec = inttoptr i32 %v2_148ec to i8*
  store i8 %v1_148ec, i8* %v3_148ec, align 1
  %v4_148ec = load i32, i32* %r3.global-to-local, align 4
  %v5_148ec = add i32 %v4_148ec, 1
  store i32 %v5_148ec, i32* %r3.global-to-local, align 4
  %v0_148f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_148f0 = trunc i32 %v0_148f0 to i8
  %v3_148f0 = inttoptr i32 %v5_148ec to i8*
  store i8 %v1_148f0, i8* %v3_148f0, align 1
  %v4_148f0 = load i32, i32* %r3.global-to-local, align 4
  %v5_148f0 = add i32 %v4_148f0, 1
  store i32 %v5_148f0, i32* %r3.global-to-local, align 4
  %v0_148f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_148f4 = trunc i32 %v0_148f4 to i8
  %v3_148f4 = inttoptr i32 %v5_148f0 to i8*
  store i8 %v1_148f4, i8* %v3_148f4, align 1
  %v4_148f4 = load i32, i32* %r3.global-to-local, align 4
  %v5_148f4 = add i32 %v4_148f4, 1
  store i32 %v5_148f4, i32* %r3.global-to-local, align 4
  %v0_148f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_148f8 = trunc i32 %v0_148f8 to i8
  %v3_148f8 = inttoptr i32 %v5_148f4 to i8*
  store i8 %v1_148f8, i8* %v3_148f8, align 1
  %v4_148f8 = load i32, i32* %r3.global-to-local, align 4
  %v5_148f8 = add i32 %v4_148f8, 1
  store i32 %v5_148f8, i32* %r3.global-to-local, align 4
  %v0_148fc = load i32, i32* %r1.global-to-local, align 4
  %v1_148fc = trunc i32 %v0_148fc to i8
  %v3_148fc = inttoptr i32 %v5_148f8 to i8*
  store i8 %v1_148fc, i8* %v3_148fc, align 1
  %v4_148fc = load i32, i32* %r3.global-to-local, align 4
  %v5_148fc = add i32 %v4_148fc, 1
  store i32 %v5_148fc, i32* %r3.global-to-local, align 4
  %v0_14900 = load i32, i32* %r1.global-to-local, align 4
  %v1_14900 = trunc i32 %v0_14900 to i8
  %v3_14900 = inttoptr i32 %v5_148fc to i8*
  store i8 %v1_14900, i8* %v3_14900, align 1
  %v4_14900 = load i32, i32* %r3.global-to-local, align 4
  %v5_14900 = add i32 %v4_14900, 1
  store i32 %v5_14900, i32* %r3.global-to-local, align 4
  %v0_14904 = load i32, i32* %r1.global-to-local, align 4
  %v1_14904 = trunc i32 %v0_14904 to i8
  %v3_14904 = inttoptr i32 %v5_14900 to i8*
  store i8 %v1_14904, i8* %v3_14904, align 1
  %v4_14904 = load i32, i32* %r3.global-to-local, align 4
  %v5_14904 = add i32 %v4_14904, 1
  store i32 %v5_14904, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_148a0, { 1, 0 }
  uselistorder i32 %v12_148cc, { 1, 2, 0 }
  uselistorder i32 %v0_148a054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_14898.pr, { 0, 2, 1 }
  uselistorder i32 %v6_14888, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_1487c, { 1, 0 }
  uselistorder i32 %v0_14874, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 4, 3, 5, 2, 0, 8, 7, 1, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_148d8, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_148b0, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_14910(i32 %arg1) local_unnamed_addr {
dec_label_pc_14910:
  %stack_var_-8 = alloca i32, align 4
  %v2_14914 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_14914, i32* @r1, align 4
  %v0_1491c = call i32 @function_16920()
  %v2_14920 = icmp eq i32 %v0_1491c, 0
  br i1 %v2_14920, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_14910
  %v3_14928 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_14910, %bb
  %v5_14930 = phi i32 [ -1, %dec_label_pc_14910 ], [ %v3_14928, %bb ]
  ret i32 %v5_14930

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_14934(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_14934:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14934 = load i32, i32* @r4, align 4
  store i32 %v3_14934, i32* %stack_var_-8, align 4
  %v5_14938 = inttoptr i32 %arg3 to i32*
  %v6_14938 = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_14938)
  store i32 %v6_14938, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_14938, -4095
  br i1 %tmp, label %dec_label_pc_14958, label %dec_label_pc_14948

dec_label_pc_14948:                               ; preds = %dec_label_pc_14934
  %v0_14948 = call i32 @function_14808()
  %v0_1494c = load i32, i32* %r4.global-to-local, align 4
  %v1_1494c = sub i32 0, %v0_1494c
  %v2_14950 = inttoptr i32 %v0_14948 to i32*
  store i32 %v1_1494c, i32* %v2_14950, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14958

dec_label_pc_14958:                               ; preds = %dec_label_pc_14934, %dec_label_pc_14948
  %v0_14958 = phi i32 [ %v6_14938, %dec_label_pc_14934 ], [ -1, %dec_label_pc_14948 ]
  %v2_1495c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1495c, i32* @r4, align 4
  ret i32 %v0_14958

; uselistorder directives
  uselistorder i32 %v6_14938, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14958, { 1, 0 }
}

define i32 @function_14960(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14960:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14960 = load i32, i32* @r4, align 4
  store i32 %v3_14960, i32* %stack_var_-8, align 4
  %v5_14964 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_14964, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_14964, -4095
  br i1 %tmp, label %dec_label_pc_14984, label %dec_label_pc_14974

dec_label_pc_14974:                               ; preds = %dec_label_pc_14960
  %v0_14974 = call i32 @function_14808()
  %v0_14978 = load i32, i32* %r4.global-to-local, align 4
  %v1_14978 = sub i32 0, %v0_14978
  %v2_1497c = inttoptr i32 %v0_14974 to i32*
  store i32 %v1_14978, i32* %v2_1497c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14984

dec_label_pc_14984:                               ; preds = %dec_label_pc_14960, %dec_label_pc_14974
  %v0_14984 = phi i32 [ %v5_14964, %dec_label_pc_14960 ], [ -1, %dec_label_pc_14974 ]
  %v2_14988 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14988, i32* @r4, align 4
  ret i32 %v0_14984

; uselistorder directives
  uselistorder i32 %v5_14964, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14984, { 1, 0 }
}

define i32 @function_1498c(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1498c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1498c = load i32, i32* @r4, align 4
  store i32 %v3_1498c, i32* %stack_var_-8, align 4
  %v5_14990 = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_14990, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_14990, -4095
  br i1 %tmp, label %dec_label_pc_149b0, label %dec_label_pc_149a0

dec_label_pc_149a0:                               ; preds = %dec_label_pc_1498c
  %v0_149a0 = call i32 @function_14808()
  %v0_149a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_149a4 = sub i32 0, %v0_149a4
  %v2_149a8 = inttoptr i32 %v0_149a0 to i32*
  store i32 %v1_149a4, i32* %v2_149a8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_149b0

dec_label_pc_149b0:                               ; preds = %dec_label_pc_1498c, %dec_label_pc_149a0
  %v0_149b0 = phi i32 [ %v5_14990, %dec_label_pc_1498c ], [ -1, %dec_label_pc_149a0 ]
  %v2_149b4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_149b4, i32* @r4, align 4
  ret i32 %v0_149b0

; uselistorder directives
  uselistorder i32 %v5_14990, { 1, 0, 2 }
  uselistorder label %dec_label_pc_149b0, { 1, 0 }
}

define i32 @function_149b8(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_149b8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_149b8 = load i32, i32* @r4, align 4
  store i32 %v3_149b8, i32* %stack_var_-8, align 4
  %v5_149bc = inttoptr i32 %arg3 to i32*
  %v6_149bc = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_149bc)
  store i32 %v6_149bc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_149bc, -4095
  br i1 %tmp, label %dec_label_pc_149dc, label %dec_label_pc_149cc

dec_label_pc_149cc:                               ; preds = %dec_label_pc_149b8
  %v0_149cc = call i32 @function_14808()
  %v0_149d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_149d0 = sub i32 0, %v0_149d0
  %v2_149d4 = inttoptr i32 %v0_149cc to i32*
  store i32 %v1_149d0, i32* %v2_149d4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_149dc

dec_label_pc_149dc:                               ; preds = %dec_label_pc_149b8, %dec_label_pc_149cc
  %v0_149dc = phi i32 [ %v6_149bc, %dec_label_pc_149b8 ], [ -1, %dec_label_pc_149cc ]
  %v2_149e0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_149e0, i32* @r4, align 4
  ret i32 %v0_149dc

; uselistorder directives
  uselistorder i32 %v6_149bc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_149dc, { 1, 0 }
}

define i32 @function_149e4(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_149e4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_149e4 = load i32, i32* @r4, align 4
  store i32 %v3_149e4, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_149ec = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_149ec, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_149ec, -4095
  br i1 %tmp, label %dec_label_pc_14a0c, label %dec_label_pc_149fc

dec_label_pc_149fc:                               ; preds = %dec_label_pc_149e4
  %v0_149fc = call i32 @function_14808()
  %v0_14a00 = load i32, i32* %r4.global-to-local, align 4
  %v1_14a00 = sub i32 0, %v0_14a00
  %v2_14a04 = inttoptr i32 %v0_149fc to i32*
  store i32 %v1_14a00, i32* %v2_14a04, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14a0c

dec_label_pc_14a0c:                               ; preds = %dec_label_pc_149e4, %dec_label_pc_149fc
  %v0_14a0c = phi i32 [ %v5_149ec, %dec_label_pc_149e4 ], [ -1, %dec_label_pc_149fc ]
  %v2_14a10 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14a10, i32* @r4, align 4
  ret i32 %v0_14a0c

; uselistorder directives
  uselistorder i32 %v5_149ec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14a0c, { 1, 0 }
}

define i32 @function_14a14(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14a14:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14a14 = load i32, i32* @r4, align 4
  store i32 %v3_14a14, i32* %stack_var_-8, align 4
  %v2_14a18 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_14a18, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_14a18, -4095
  br i1 %tmp, label %dec_label_pc_14a38, label %dec_label_pc_14a28

dec_label_pc_14a28:                               ; preds = %dec_label_pc_14a14
  %v0_14a28 = call i32 @function_14808()
  %v0_14a2c = load i32, i32* %r4.global-to-local, align 4
  %v1_14a2c = sub i32 0, %v0_14a2c
  %v2_14a30 = inttoptr i32 %v0_14a28 to i32*
  store i32 %v1_14a2c, i32* %v2_14a30, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14a38

dec_label_pc_14a38:                               ; preds = %dec_label_pc_14a14, %dec_label_pc_14a28
  %v0_14a38 = phi i32 [ %v2_14a18, %dec_label_pc_14a14 ], [ -1, %dec_label_pc_14a28 ]
  %v2_14a3c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14a3c, i32* @r4, align 4
  ret i32 %v0_14a38

; uselistorder directives
  uselistorder i32 %v2_14a18, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14a38, { 1, 0 }
}

define i32 @function_14a40(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14a40:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14a40 = load i32, i32* @r4, align 4
  store i32 %v3_14a40, i32* %stack_var_-8, align 4
  %v5_14a44 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_14a44, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_14a44, -4095
  br i1 %tmp, label %dec_label_pc_14a64, label %dec_label_pc_14a54

dec_label_pc_14a54:                               ; preds = %dec_label_pc_14a40
  %v0_14a54 = call i32 @function_14808()
  %v0_14a58 = load i32, i32* %r4.global-to-local, align 4
  %v1_14a58 = sub i32 0, %v0_14a58
  %v2_14a5c = inttoptr i32 %v0_14a54 to i32*
  store i32 %v1_14a58, i32* %v2_14a5c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14a64

dec_label_pc_14a64:                               ; preds = %dec_label_pc_14a40, %dec_label_pc_14a54
  %v0_14a64 = phi i32 [ %v5_14a44, %dec_label_pc_14a40 ], [ -1, %dec_label_pc_14a54 ]
  %v2_14a68 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14a68, i32* @r4, align 4
  ret i32 %v0_14a64

; uselistorder directives
  uselistorder i32 %v5_14a44, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14a64, { 1, 0 }
}

define i32 @function_14a6c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_14a6c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_14a6c = load i32, i32* @r4, align 4
  store i32 %v3_14a6c, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_14a78 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_14a78, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_14a78, -4095
  br i1 %tmp, label %dec_label_pc_14a98, label %dec_label_pc_14a88

dec_label_pc_14a88:                               ; preds = %dec_label_pc_14a6c
  %v0_14a88 = call i32 @function_14808()
  %v0_14a8c = load i32, i32* %r4.global-to-local, align 4
  %v1_14a8c = sub i32 0, %v0_14a8c
  %v2_14a90 = inttoptr i32 %v0_14a88 to i32*
  store i32 %v1_14a8c, i32* %v2_14a90, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14a98

dec_label_pc_14a98:                               ; preds = %dec_label_pc_14a6c, %dec_label_pc_14a88
  %v0_14a98 = phi i32 [ %v5_14a78, %dec_label_pc_14a6c ], [ -1, %dec_label_pc_14a88 ]
  %v2_14a9c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14a9c, i32* @r4, align 4
  ret i32 %v0_14a98

; uselistorder directives
  uselistorder i32 %v5_14a78, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14a98, { 1, 0 }
}

define i32 @function_14aa0(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14aa0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14aa0 = load i32, i32* @r4, align 4
  store i32 %v3_14aa0, i32* %stack_var_-8, align 4
  %v5_14aa4 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_14aa4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_14aa4, -4095
  br i1 %tmp, label %dec_label_pc_14ac4, label %dec_label_pc_14ab4

dec_label_pc_14ab4:                               ; preds = %dec_label_pc_14aa0
  %v0_14ab4 = call i32 @function_14808()
  %v0_14ab8 = load i32, i32* %r4.global-to-local, align 4
  %v1_14ab8 = sub i32 0, %v0_14ab8
  %v2_14abc = inttoptr i32 %v0_14ab4 to i32*
  store i32 %v1_14ab8, i32* %v2_14abc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14ac4

dec_label_pc_14ac4:                               ; preds = %dec_label_pc_14aa0, %dec_label_pc_14ab4
  %v0_14ac4 = phi i32 [ %v5_14aa4, %dec_label_pc_14aa0 ], [ -1, %dec_label_pc_14ab4 ]
  %v2_14ac8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14ac8, i32* @r4, align 4
  ret i32 %v0_14ac4

; uselistorder directives
  uselistorder i32 %v5_14aa4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14ac4, { 1, 0 }
}

define i32 @function_14acc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_14acc:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_14ad8 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_14ad8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_14ad8, -4095
  br i1 %tmp, label %dec_label_pc_14af8, label %dec_label_pc_14ae8

dec_label_pc_14ae8:                               ; preds = %dec_label_pc_14acc
  %v0_14ae8 = call i32 @function_14808()
  %v0_14aec = load i32, i32* %r4.global-to-local, align 4
  %v1_14aec = sub i32 0, %v0_14aec
  %v2_14af0 = inttoptr i32 %v0_14ae8 to i32*
  store i32 %v1_14aec, i32* %v2_14af0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14af8

dec_label_pc_14af8:                               ; preds = %dec_label_pc_14acc, %dec_label_pc_14ae8
  %v0_14af8 = phi i32 [ %v5_14ad8, %dec_label_pc_14acc ], [ -1, %dec_label_pc_14ae8 ]
  ret i32 %v0_14af8

; uselistorder directives
  uselistorder i32 %v5_14ad8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14af8, { 1, 0 }
}

define i32 @function_14b00(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_14b00:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14b00 = load i32, i32* @r4, align 4
  store i32 %v3_14b00, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_14b08 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_14b08, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_14b08, -4095
  br i1 %tmp, label %dec_label_pc_14b28, label %dec_label_pc_14b18

dec_label_pc_14b18:                               ; preds = %dec_label_pc_14b00
  %v0_14b18 = call i32 @function_14808()
  %v0_14b1c = load i32, i32* %r4.global-to-local, align 4
  %v1_14b1c = sub i32 0, %v0_14b1c
  %v2_14b20 = inttoptr i32 %v0_14b18 to i32*
  store i32 %v1_14b1c, i32* %v2_14b20, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14b28

dec_label_pc_14b28:                               ; preds = %dec_label_pc_14b00, %dec_label_pc_14b18
  %v0_14b28 = phi i32 [ %v5_14b08, %dec_label_pc_14b00 ], [ -1, %dec_label_pc_14b18 ]
  %v2_14b2c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14b2c, i32* @r4, align 4
  ret i32 %v0_14b28

; uselistorder directives
  uselistorder i32 %v5_14b08, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14b28, { 1, 0 }
}

define i32 @function_14b30(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14b30:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14b30 = load i32, i32* @r4, align 4
  store i32 %v3_14b30, i32* %stack_var_-8, align 4
  %v3_14b34 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_14b34, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_14b34, -4095
  br i1 %tmp, label %dec_label_pc_14b54, label %dec_label_pc_14b44

dec_label_pc_14b44:                               ; preds = %dec_label_pc_14b30
  %v0_14b44 = call i32 @function_14808()
  %v0_14b48 = load i32, i32* %r4.global-to-local, align 4
  %v1_14b48 = sub i32 0, %v0_14b48
  %v2_14b4c = inttoptr i32 %v0_14b44 to i32*
  store i32 %v1_14b48, i32* %v2_14b4c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14b54

dec_label_pc_14b54:                               ; preds = %dec_label_pc_14b30, %dec_label_pc_14b44
  %v0_14b54 = phi i32 [ %v3_14b34, %dec_label_pc_14b30 ], [ -1, %dec_label_pc_14b44 ]
  %v2_14b58 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14b58, i32* @r4, align 4
  ret i32 %v0_14b54

; uselistorder directives
  uselistorder i32 %v3_14b34, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14b54, { 1, 0 }
}

define i32 @function_14b5c(i32 %arg1) local_unnamed_addr {
dec_label_pc_14b5c:
  %v3_14b5c = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_14b64 = call i32 @function_1428c()
  %v0_14b68 = load i32, i32* @r4, align 4
  store i32 %v3_14b5c, i32* @r4, align 4
  %v2_14b70 = call i32 @function_14334(i32 %v0_14b64, i32 %v0_14b68)
  ret i32 %v2_14b70

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_14334, { 14, 16, 13, 12, 11, 10, 9, 15, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @function_1428c, { 0, 1, 3, 2 }
}

define i32 @function_14b74(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14b74:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_14b90, label %dec_label_pc_14b80

dec_label_pc_14b80:                               ; preds = %dec_label_pc_14b74
  %v8_14b84 = icmp sgt i32 %arg1, 64
  br i1 %v8_14b84, label %dec_label_pc_14b90, label %dec_label_pc_14b88

dec_label_pc_14b88:                               ; preds = %dec_label_pc_14b80
  %v0_14b8c = call i32 @function_14c98()
  br label %dec_label_pc_14b90

dec_label_pc_14b90:                               ; preds = %dec_label_pc_14b80, %dec_label_pc_14b74, %dec_label_pc_14b88
  %v0_14b90 = call i32 @function_14808()
  %v2_14b98 = inttoptr i32 %v0_14b90 to i32*
  store i32 22, i32* %v2_14b98, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14b90, { 2, 0, 1 }
}

define i32 @function_14ba4(i32 %arg1) local_unnamed_addr {
dec_label_pc_14ba4:
  store i32 128, i32* @r2, align 4
  %v0_14bb0 = load i32, i32* @r0, align 4
  %v2_14bb0 = inttoptr i32 %v0_14bb0 to i8*
  %v3_14bb0 = call i32 @function_14870(i8* %v2_14bb0, i32 0)
  ret i32 0
}

define i32 @function_14bbc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14bbc:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_14bbc = load i32, i32* @r4, align 4
  store i32 %v3_14bbc, i32* %stack_var_-12, align 4
  %v6_14bbc = load i32, i32* @r5, align 4
  %v10_14bbc = ptrtoint i32* %stack_var_-12 to i32
  %v7_14bc0 = icmp eq i32 %arg2, -1
  %v0_14bcc.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_14bc0, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_14bbc
  br label %dec_label_pc_14be4

bb:                                               ; preds = %dec_label_pc_14bbc
  %v2_14bc8 = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_14bcc.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_14bcc.pre, 1
  br i1 %tmp19, label %dec_label_pc_14be4, label %dec_label_pc_14bd4

dec_label_pc_14bd4:                               ; preds = %bb
  %v7_14bd8 = icmp sgt i32 %v0_14bcc.pre, 64
  br i1 %v7_14bd8, label %dec_label_pc_14be4, label %bb20

bb20:                                             ; preds = %dec_label_pc_14bd4
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_14c0824 = add i32 %v10_14bbc, 124
  br label %dec_label_pc_14bf8

dec_label_pc_14be4:                               ; preds = %.thread, %dec_label_pc_14bd4, %bb
  %v0_14be4 = call i32 @function_14808()
  store i32 %v0_14be4, i32* %r0.global-to-local, align 4
  store i32 -1, i32* @r2, align 4
  %v2_14bf0 = inttoptr i32 %v0_14be4 to i32*
  store i32 22, i32* %v2_14bf0, align 4
  %v0_14c64.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_14c64

dec_label_pc_14bf8:                               ; preds = %bb20, %dec_label_pc_14bf8
  %v5_14c0825 = phi i32 [ %v5_14c0824, %bb20 ], [ %v5_14c08, %dec_label_pc_14bf8 ]
  %v2_14bfc = add i32 %v5_14c0825, -136
  %v3_14bfc = inttoptr i32 %v2_14bfc to i32*
  store i32 0, i32* %v3_14bfc, align 4
  %v0_14c00.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_14c00 = add i32 %v0_14c00.pre, -1
  store i32 %v1_14c00, i32* %r0.global-to-local, align 4
  %v6_14c00 = icmp slt i32 %v1_14c00, 0
  %v4_14c08 = mul i32 %v1_14c00, 4
  %v5_14c08 = add i32 %v4_14c08, %v10_14bbc
  br i1 %v6_14c00, label %dec_label_pc_14c10, label %dec_label_pc_14bf8

dec_label_pc_14c10:                               ; preds = %dec_label_pc_14bf8
  %v2_14c10 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_14c10, i32* @r5, align 4
  %v2_14c14 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_14c14, i32* @r0, align 4
  %v0_14c18 = load i32, i32* @r4, align 4
  store i32 %v0_14c18, i32* @r1, align 4
  %v0_14c1c = call i32 @function_14c98()
  store i32 %v0_14c1c, i32* %r0.global-to-local, align 4
  %v1_14c20 = icmp slt i32 %v0_14c1c, 0
  br i1 %v1_14c20, label %dec_label_pc_14c60, label %dec_label_pc_14c28

dec_label_pc_14c28:                               ; preds = %dec_label_pc_14c10
  %v0_14c28 = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1fa24.612 to i32), i32* %r0.global-to-local, align 4
  %v2_14c30 = call i32 @function_14c74(i32 ptrtoint (i32* @global_var_1fa24.612 to i32), i32 %v0_14c28)
  %v0_14c48 = load i32, i32* @r4, align 4
  store i32 %v0_14c48, i32* %r0.global-to-local, align 4
  %v4_14c50 = call i32 @function_15b60(i32 %v0_14c48, i32* nonnull %stack_var_-152, i32 %v2_14bc8)
  store i32 %v4_14c50, i32* %r0.global-to-local, align 4
  %v1_14c54 = icmp slt i32 %v4_14c50, 0
  br i1 %v1_14c54, label %dec_label_pc_14c60, label %bb23

bb23:                                             ; preds = %dec_label_pc_14c28
  %v5_14c58 = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_14c58, i32* @r2, align 4
  br label %dec_label_pc_14c64

dec_label_pc_14c60:                               ; preds = %dec_label_pc_14c28, %dec_label_pc_14c10
  store i32 -1, i32* @r2, align 4
  br label %dec_label_pc_14c64

dec_label_pc_14c64:                               ; preds = %bb23, %dec_label_pc_14be4, %dec_label_pc_14c60
  %v0_14c64 = phi i32 [ %v5_14c58, %bb23 ], [ %v0_14c64.pre, %dec_label_pc_14be4 ], [ -1, %dec_label_pc_14c60 ]
  store i32 %v0_14c64, i32* %r0.global-to-local, align 4
  %v2_14c6c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14c6c, i32* @r4, align 4
  store i32 %v6_14bbc, i32* @r5, align 4
  ret i32 %v0_14c64

; uselistorder directives
  uselistorder i32 %v0_14c64, { 1, 0 }
  uselistorder i32 %v1_14c00, { 0, 2, 1 }
  uselistorder i32 %v0_14bcc.pre, { 1, 0, 2 }
  uselistorder i32 %v10_14bbc, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_14c64, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14bf8, { 1, 0 }
  uselistorder label %dec_label_pc_14be4, { 1, 2, 0 }
}

define i32 @function_14c74(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14c74:
  %v1_14c74 = add i32 %arg2, -1
  %v3_14c78 = udiv i32 %v1_14c74, 32
  %v4_14c7c = mul nuw nsw i32 %v3_14c78, 4
  %v5_14c7c = add i32 %v4_14c7c, %arg1
  %v6_14c7c = inttoptr i32 %v5_14c7c to i32*
  %v7_14c7c = load i32, i32* %v6_14c7c, align 4
  %v1_14c80 = urem i32 %v1_14c74, 32
  %v7_14c88 = shl i32 1, %v1_14c80
  %v8_14c88 = and i32 %v7_14c7c, %v7_14c88
  %v10_14c88 = icmp ne i32 %v8_14c88, 0
  %. = zext i1 %v10_14c88 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_14c74, { 1, 0 }
}

define i32 @function_14c98() local_unnamed_addr {
dec_label_pc_14c98:
  %v0_14c98 = load i32, i32* @r1, align 4
  %v1_14c98 = add i32 %v0_14c98, -1
  %v3_14c9c = udiv i32 %v1_14c98, 32
  store i32 %v3_14c9c, i32* @ip, align 4
  %v0_14ca0 = load i32, i32* @r0, align 4
  %v4_14ca0 = mul nuw nsw i32 %v3_14c9c, 4
  %v5_14ca0 = add i32 %v0_14ca0, %v4_14ca0
  %v6_14ca0 = inttoptr i32 %v5_14ca0 to i32*
  %v7_14ca0 = load i32, i32* %v6_14ca0, align 4
  %v1_14ca4 = urem i32 %v1_14c98, 32
  %v7_14cac = shl i32 1, %v1_14ca4
  %v8_14cac = or i32 %v7_14ca0, %v7_14cac
  store i32 %v8_14cac, i32* %v6_14ca0, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_14c9c, { 1, 0 }
  uselistorder i32 %v1_14c98, { 1, 0 }
}

define i32 @function_14cbc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14cbc:
  %v1_14cbc = add i32 %arg2, -1
  %v3_14cc0 = udiv i32 %v1_14cbc, 32
  %v4_14cc4 = mul nuw nsw i32 %v3_14cc0, 4
  %v5_14cc4 = add i32 %v4_14cc4, %arg1
  %v6_14cc4 = inttoptr i32 %v5_14cc4 to i32*
  %v7_14cc4 = load i32, i32* %v6_14cc4, align 4
  %v1_14cc8 = urem i32 %v1_14cbc, 32
  %tmp = shl i32 -1, %v1_14cc8
  %v8_14cd0 = add i32 %tmp, -1
  %v9_14cd0 = and i32 %v7_14cc4, %v8_14cd0
  store i32 %v9_14cd0, i32* %v6_14cc4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_14cbc, { 1, 0 }
}

define i32 @function_14ce0(i32 %arg1) local_unnamed_addr {
dec_label_pc_14ce0:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_14ce0 = load i32, i32* @r4, align 4
  %v6_14ce0 = load i32, i32* @r5, align 4
  %v9_14ce0 = load i32, i32* @r6, align 4
  %v0_14ce4 = load i32, i32* %r0.global-to-local, align 4
  %v2_14ce4 = icmp eq i32 %v0_14ce4, 0
  %v2_14ce8 = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_14ce4, label %bb, label %dec_label_pc_14cf4

bb:                                               ; preds = %dec_label_pc_14ce0
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14cfc

dec_label_pc_14cf4:                               ; preds = %dec_label_pc_14ce0
  %tmp = icmp ugt i32 %v0_14ce4, -8
  br i1 %tmp, label %dec_label_pc_14e00, label %dec_label_pc_14cfc

dec_label_pc_14cfc:                               ; preds = %bb, %dec_label_pc_14cf4
  %v0_14cfc = phi i32 [ %v0_14ce4, %dec_label_pc_14cf4 ], [ 1, %bb ]
  %v1_14cfc = add i32 %v0_14cfc, 4
  store i32 %v1_14cfc, i32* %stack_var_-20, align 4
  store i32 %v2_14ce8, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1f814.614 to i32), i32* %r0.global-to-local, align 4
  %v1_14d14 = call i32 @function_15874()
  store i32 ptrtoint (i32** @global_var_1f63c.618 to i32), i32* %r0.global-to-local, align 4
  %v3_14d20 = call i32 @function_15094(i32* bitcast (i32** @global_var_1f63c.618 to i32*), i32 %v2_14ce8)
  store i32 %v3_14d20, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f814.614 to i32), i32* %r0.global-to-local, align 4
  store i32 85304, i32* @lr, align 4
  %v1_14d34 = call i32 @function_15874()
  store i32 %v1_14d34, i32* %r0.global-to-local, align 4
  %v2_14d38 = icmp eq i32 %v3_14d20, 0
  br i1 %v2_14d38, label %dec_label_pc_14d40, label %dec_label_pc_14df0

dec_label_pc_14d40:                               ; preds = %dec_label_pc_14cfc
  %v2_14d44 = load i32, i32* @global_var_1f83c.621, align 4
  store i32 %v2_14d44, i32* @r4, align 4
  %v2_14d48 = load i32, i32* %stack_var_-20, align 4
  %v3_14d4c = icmp ult i32 %v2_14d48, %v2_14d44
  br i1 %v3_14d4c, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_14d40
  %v3_14d50 = add i32 %v2_14d44, -1
  %v2_14d54 = add i32 %v3_14d50, %v2_14d48
  %v2_14d58 = sub i32 0, %v2_14d44
  %v3_14d5c = and i32 %v2_14d54, %v2_14d58
  store i32 %v3_14d5c, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_14d40, %bb14
  store i32 ptrtoint (i32* @global_var_1faa4.623 to i32), i32* %r0.global-to-local, align 4
  %v1_14d68 = call i32 @function_15874()
  %v0_14d6c = load i32, i32* @r4, align 4
  store i32 %v0_14d6c, i32* %r0.global-to-local, align 4
  %v1_14d70 = call i32 @function_16028(i32 %v0_14d6c)
  store i32 %v1_14d70, i32* %r0.global-to-local, align 4
  %v7_14d74 = icmp eq i32 %v1_14d70, -1
  br i1 %v7_14d74, label %bb15, label %dec_label_pc_14d80

bb15:                                             ; preds = %.thread3
  store i32 %v1_14d70, i32* @r5, align 4
  br label %dec_label_pc_14d94

dec_label_pc_14d80:                               ; preds = %.thread3
  %v1_14d80 = add i32 %v1_14d70, 3
  %v1_14d84 = and i32 %v1_14d80, -4
  store i32 %v1_14d84, i32* @r5, align 4
  %v9_14d88 = icmp eq i32 %v1_14d84, %v1_14d70
  br i1 %v9_14d88, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_14d80
  %v3_14d8c = sub i32 %v1_14d84, %v1_14d70
  store i32 %v3_14d8c, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_14d80, %bb16
  %v1_14d90 = xor i1 %v9_14d88, true
  call void @__pseudo_cond_branch(i1 %v1_14d90, i32 ptrtoint (i32* @global_var_16028.624 to i32))
  br label %dec_label_pc_14d94

dec_label_pc_14d94:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1faa4.623 to i32), i32* %r0.global-to-local, align 4
  store i32 85412, i32* @lr, align 4
  %v1_14da0 = call i32 @function_15874()
  store i32 %v1_14da0, i32* %r0.global-to-local, align 4
  %v0_14da4 = load i32, i32* @r5, align 4
  %v7_14da4 = icmp eq i32 %v0_14da4, -1
  br i1 %v7_14da4, label %dec_label_pc_14e00, label %dec_label_pc_14dac

dec_label_pc_14dac:                               ; preds = %dec_label_pc_14d94
  store i32 ptrtoint (i32* @global_var_1f814.614 to i32), i32* %r0.global-to-local, align 4
  %v1_14db8 = call i32 @function_15874()
  %v0_14dbc = load i32, i32* @r4, align 4
  %v0_14dc0 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1f63c.618 to i32), i32* %r0.global-to-local, align 4
  %v4_14dc8 = call i32 @function_151e8(i32* bitcast (i32** @global_var_1f63c.618 to i32*), i32 %v0_14dc0, i32 %v0_14dbc)
  store i32 ptrtoint (i32** @global_var_1f63c.618 to i32), i32* %r0.global-to-local, align 4
  %v3_14dd4 = call i32 @function_15094(i32* bitcast (i32** @global_var_1f63c.618 to i32*), i32 %v2_14ce8)
  store i32 %v3_14dd4, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f814.614 to i32), i32* %r0.global-to-local, align 4
  store i32 85480, i32* @lr, align 4
  %v1_14de4 = call i32 @function_15874()
  store i32 %v1_14de4, i32* %r0.global-to-local, align 4
  %v2_14de8 = icmp eq i32 %v3_14dd4, 0
  br i1 %v2_14de8, label %dec_label_pc_14e00, label %dec_label_pc_14df0

dec_label_pc_14df0:                               ; preds = %dec_label_pc_14cfc, %dec_label_pc_14dac
  %v1_14df4 = phi i32 [ %v3_14d20, %dec_label_pc_14cfc ], [ %v3_14dd4, %dec_label_pc_14dac ]
  %v2_14df0 = load i32, i32* %stack_var_-20, align 4
  %v2_14df4 = inttoptr i32 %v1_14df4 to i32*
  store i32 %v2_14df0, i32* %v2_14df4, align 4
  %v3_14df4 = load i32, i32* %r4.global-to-local, align 4
  %v4_14df4 = add i32 %v3_14df4, 4
  store i32 %v4_14df4, i32* %r4.global-to-local, align 4
  %v2_14df8 = icmp eq i32 %v4_14df4, 0
  br i1 %v2_14df8, label %dec_label_pc_14e00, label %dec_label_pc_14e10

dec_label_pc_14e00:                               ; preds = %dec_label_pc_14df0, %dec_label_pc_14dac, %dec_label_pc_14d94, %dec_label_pc_14cf4
  %v0_14e00 = call i32 @function_14808()
  store i32 %v0_14e00, i32* %r0.global-to-local, align 4
  %v2_14e08 = inttoptr i32 %v0_14e00 to i32*
  store i32 12, i32* %v2_14e08, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14e10

dec_label_pc_14e10:                               ; preds = %dec_label_pc_14df0, %dec_label_pc_14e00
  %v0_14e10 = phi i32 [ %v4_14df4, %dec_label_pc_14df0 ], [ 0, %dec_label_pc_14e00 ]
  store i32 %v0_14e10, i32* %r0.global-to-local, align 4
  store i32 %v3_14ce0, i32* @r4, align 4
  store i32 %v6_14ce0, i32* @r5, align 4
  store i32 %v9_14ce0, i32* @r6, align 4
  ret i32 %v0_14e10

; uselistorder directives
  uselistorder i32 %v0_14e10, { 1, 0 }
  uselistorder i32 %v3_14dd4, { 1, 0, 2 }
  uselistorder i32 %v1_14d84, { 1, 0, 2 }
  uselistorder i32 %v1_14d70, { 2, 0, 4, 3, 1, 5 }
  uselistorder i32 %v3_14d20, { 1, 0, 2 }
  uselistorder i32 %v0_14ce4, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 5, 7, 3, 6, 8, 9, 10, 4, 12, 11, 19, 14, 13, 2, 15, 16, 17, 18, 0, 1 }
  uselistorder label %dec_label_pc_14e10, { 1, 0 }
  uselistorder label %dec_label_pc_14df0, { 1, 0 }
  uselistorder label %dec_label_pc_14d94, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_14cfc, { 1, 0 }
}

define i32 @function_14e34(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14e34:
  %stack_var_-12 = alloca i32, align 4
  %v3_14e34 = load i32, i32* @r4, align 4
  store i32 %v3_14e34, i32* %stack_var_-12, align 4
  %v6_14e34 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_14e3c = mul i32 %arg2, %arg1
  store i32 %v2_14e3c, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_14e40 = icmp eq i32 %arg1, 0
  store i32 %v2_14e3c, i32* @r0, align 4
  br i1 %v2_14e40, label %dec_label_pc_14e6c, label %dec_label_pc_14e4c

dec_label_pc_14e4c:                               ; preds = %dec_label_pc_14e34
  %v0_14e4c = call i32 @function_13e80()
  %v0_14e50 = load i32, i32* @r5, align 4
  %v9_14e50 = icmp eq i32 %v0_14e50, %v0_14e4c
  store i32 0, i32* @r5, align 4
  br i1 %v9_14e50, label %dec_label_pc_14e4c.dec_label_pc_14e6c_crit_edge, label %dec_label_pc_14e5c

dec_label_pc_14e4c.dec_label_pc_14e6c_crit_edge:  ; preds = %dec_label_pc_14e4c
  %v0_14e6c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14e6c

dec_label_pc_14e5c:                               ; preds = %dec_label_pc_14e4c
  %v0_14e5c = call i32 @function_14808()
  %v2_14e64 = inttoptr i32 %v0_14e5c to i32*
  store i32 12, i32* %v2_14e64, align 4
  br label %dec_label_pc_14e84

dec_label_pc_14e6c:                               ; preds = %dec_label_pc_14e4c.dec_label_pc_14e6c_crit_edge, %dec_label_pc_14e34
  %v0_14e6c = phi i32 [ %v0_14e6c.pre, %dec_label_pc_14e4c.dec_label_pc_14e6c_crit_edge ], [ %v2_14e3c, %dec_label_pc_14e34 ]
  %v1_14e70 = call i32 @function_14ce0(i32 %v0_14e6c)
  store i32 %v1_14e70, i32* @r5, align 4
  store i32 85636, i32* @lr, align 4
  %v1_14e80 = icmp ne i32 %v1_14e70, 0
  call void @__pseudo_cond_branch(i1 %v1_14e80, i32 ptrtoint (i32* @global_var_14870.625 to i32))
  br label %dec_label_pc_14e84

dec_label_pc_14e84:                               ; preds = %dec_label_pc_14e5c, %dec_label_pc_14e6c
  %v0_14e84 = load i32, i32* @r5, align 4
  %v2_14e88 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14e88, i32* @r4, align 4
  store i32 %v6_14e34, i32* @r5, align 4
  ret i32 %v0_14e84

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14e84, { 1, 0 }
}

define i32 @function_14e8c() local_unnamed_addr {
dec_label_pc_14e8c:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_14e8c = load i32, i32* @r0, align 4
  %v2_14e8c = icmp eq i32 %v0_14e8c, 0
  %v3_14e90 = load i32, i32* @r4, align 4
  store i32 %v3_14e90, i32* %stack_var_-24, align 4
  %v6_14e90 = load i32, i32* @r5, align 4
  %v9_14e90 = load i32, i32* @r6, align 4
  %v15_14e90 = load i32, i32* @r8, align 4
  br i1 %v2_14e8c, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_14e8c
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_14e8c
  %v1_14e98 = add i32 %v0_14e8c, -4
  %v2_14e98 = inttoptr i32 %v1_14e98 to i32*
  %v3_14e98 = load i32, i32* %v2_14e98, align 4
  store i32 %v3_14e98, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1f63c.618 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_14e98, i32* @r4, align 4
  %v1_14eb0 = call i32 @function_15874()
  %v0_14eb4 = load i32, i32* @r4, align 4
  %v0_14eb8 = load i32, i32* @r5, align 4
  %v4_14ec0 = call i32 @function_151e8(i32* bitcast (i32** @global_var_1f63c.618 to i32*), i32 %v0_14eb4, i32 %v0_14eb8)
  %v1_14ec8 = inttoptr i32 %v4_14ec0 to i32*
  %v2_14ec8 = load i32, i32* %v1_14ec8, align 4
  store i32 %v2_14ec8, i32* %r6.global-to-local, align 4
  %v2_14ecc = load i32, i32* @global_var_1f83c.621, align 4
  %v4_14ed0 = mul i32 %v2_14ecc, 8
  %v6_14ed0 = icmp ult i32 %v2_14ec8, %v4_14ed0
  store i32 %v4_14ec0, i32* @r4, align 4
  br i1 %v6_14ed0, label %dec_label_pc_14f10, label %dec_label_pc_14edc

dec_label_pc_14edc:                               ; preds = %bb11
  %v1_14ee4 = call i32 @function_15874()
  %v1_14eec = call i32 @function_16028(i32 0)
  %v0_14ef0 = load i32, i32* @r4, align 4
  %v1_14ef0 = add i32 %v0_14ef0, 12
  store i32 %v1_14ef0, i32* @r5, align 4
  %v9_14ef4 = icmp eq i32 %v1_14ef0, %v1_14eec
  br i1 %v9_14ef4, label %dec_label_pc_14f18, label %dec_label_pc_14efc

dec_label_pc_14efc:                               ; preds = %dec_label_pc_14edc
  %v1_14f08 = call i32 @function_15874()
  br label %dec_label_pc_14f10

dec_label_pc_14f10:                               ; preds = %bb11, %dec_label_pc_14efc, %bb14
  %v2_14f10 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_14f10, i32* @r4, align 4
  store i32 %v6_14e90, i32* @r5, align 4
  store i32 %v9_14e90, i32* %r6.global-to-local, align 4
  store i32 %v15_14e90, i32* %r8.global-to-local, align 4
  %v0_14f14 = call i32 @function_15874()
  %v0_14f18.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14f18

dec_label_pc_14f18:                               ; preds = %dec_label_pc_14edc, %dec_label_pc_14f10
  %v1_14f20 = phi i32 [ %v0_14ef0, %dec_label_pc_14edc ], [ %v0_14f18.pre, %dec_label_pc_14f10 ]
  %v1_14f18 = add i32 %v1_14f20, 4
  %v2_14f18 = inttoptr i32 %v1_14f18 to i32*
  %v3_14f18 = load i32, i32* %v2_14f18, align 4
  %v2_14f1c = icmp eq i32 %v3_14f18, 0
  br i1 %v2_14f1c, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_14f18
  %v2_14f20 = add i32 %v1_14f20, 8
  %v3_14f20 = inttoptr i32 %v2_14f20 to i32*
  %v4_14f20 = load i32, i32* %v3_14f20, align 4
  %v3_14f24 = add i32 %v3_14f18, 8
  %v4_14f24 = inttoptr i32 %v3_14f24 to i32*
  store i32 %v4_14f20, i32* %v4_14f24, align 4
  %v0_14f28.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14f18, %bb12
  %v0_14f28 = phi i32 [ %v1_14f20, %dec_label_pc_14f18 ], [ %v0_14f28.pre, %bb12 ]
  %v1_14f28 = add i32 %v0_14f28, 8
  %v2_14f28 = inttoptr i32 %v1_14f28 to i32*
  %v3_14f28 = load i32, i32* %v2_14f28, align 4
  %v1_14f2c = add i32 %v0_14f28, 4
  %v2_14f2c = inttoptr i32 %v1_14f2c to i32*
  %v3_14f2c = load i32, i32* %v2_14f2c, align 4
  %v2_14f30 = icmp eq i32 %v3_14f28, 0
  br i1 %v2_14f30, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_14f34 = add i32 %v3_14f28, 4
  %v4_14f34 = inttoptr i32 %v3_14f34 to i32*
  store i32 %v3_14f2c, i32* %v4_14f34, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_14f38 = load i32, i32* %r8.global-to-local, align 4
  %v3_14f38 = inttoptr i32 %v2_14f38 to i32*
  store i32 %v3_14f2c, i32* %v3_14f38, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_14f48 = call i32 @function_15874()
  %v0_14f4c = load i32, i32* %r6.global-to-local, align 4
  %v1_14f4c = load i32, i32* @r4, align 4
  %v0_14f54 = load i32, i32* @r5, align 4
  %v2_14f4c = sub i32 12, %v0_14f4c
  %v1_14f50 = add i32 %v2_14f4c, %v1_14f4c
  %v2_14f54 = sub i32 %v1_14f50, %v0_14f54
  %v1_14f58 = call i32 @function_16028(i32 %v2_14f54)
  br label %dec_label_pc_14f10

; uselistorder directives
  uselistorder i32 %v0_14f28, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_16028, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_14f18, { 1, 0 }
  uselistorder label %dec_label_pc_14f10, { 2, 1, 0 }
}

define i32 @function_14f7c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14f7c:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_14f7c = load i32, i32* @r4, align 4
  store i32 %v3_14f7c, i32* %stack_var_-24, align 4
  %v6_14f7c = load i32, i32* @r5, align 4
  %v9_14f7c = load i32, i32* @r6, align 4
  %v12_14f7c = load i32, i32* @r7, align 4
  %v15_14f7c = load i32, i32* @r8, align 4
  %v18_14f7c = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_14f80 = icmp eq i32 %arg2, 0
  %v0_14f84 = load i32, i32* @r0, align 4
  store i32 %v0_14f84, i32* @r7, align 4
  br i1 %v2_14f80, label %dec_label_pc_14f8c, label %dec_label_pc_14f94

dec_label_pc_14f8c:                               ; preds = %dec_label_pc_14f7c
  %v0_14f8c = call i32 @function_14e8c()
  %v0_14f9c.pre = load i32, i32* @r4, align 4
  %v2_14fa0.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_14f9c

dec_label_pc_14f94:                               ; preds = %dec_label_pc_14f7c
  %v2_14f94 = icmp eq i32 %v0_14f84, 0
  br i1 %v2_14f94, label %dec_label_pc_14f9c, label %dec_label_pc_14fa8

dec_label_pc_14f9c:                               ; preds = %dec_label_pc_14f94, %dec_label_pc_14f8c
  %v2_14fa0 = phi i32 [ %v3_14f7c, %dec_label_pc_14f94 ], [ %v2_14fa0.pre, %dec_label_pc_14f8c ]
  %v0_14f9c = phi i32 [ %arg2, %dec_label_pc_14f94 ], [ %v0_14f9c.pre, %dec_label_pc_14f8c ]
  store i32 %v2_14fa0, i32* @r4, align 4
  store i32 %v6_14f7c, i32* @r5, align 4
  store i32 %v9_14f7c, i32* @r6, align 4
  store i32 %v12_14f7c, i32* @r7, align 4
  store i32 %v18_14f7c, i32* @lr, align 4
  %v1_14fa4 = call i32 @function_14ce0(i32 %v0_14f9c)
  %v0_14fa8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14fa8

dec_label_pc_14fa8:                               ; preds = %dec_label_pc_14f94, %dec_label_pc_14f9c
  %v0_14fc0 = phi i32 [ %v0_14f84, %dec_label_pc_14f94 ], [ %v1_14fa4, %dec_label_pc_14f9c ]
  %v0_14fa8 = phi i32 [ %arg2, %dec_label_pc_14f94 ], [ %v0_14fa8.pre, %dec_label_pc_14f9c ]
  %v1_14fa8 = add i32 %v0_14fa8, 7
  %v1_14fac = and i32 %v1_14fa8, -4
  store i32 %v1_14fac, i32* @r5, align 4
  %v2_14fb0 = icmp ugt i32 %v1_14fac, 10
  %v1_14fb4 = add i32 %v0_14fc0, -4
  %v2_14fb4 = inttoptr i32 %v1_14fb4 to i32*
  %v3_14fb4 = load i32, i32* %v2_14fb4, align 4
  store i32 %v3_14fb4, i32* @r6, align 4
  br i1 %v2_14fb0, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_14fa8
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_14fa8, %bb
  %v0_1503c = phi i32 [ %v1_14fac, %dec_label_pc_14fa8 ], [ 12, %bb ]
  store i32 %v1_14fb4, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_1503c, %v3_14fb4
  br i1 %tmp, label %dec_label_pc_14fc8, label %dec_label_pc_1503c

dec_label_pc_14fc8:                               ; preds = %bb14
  %v2_14fbc = sub i32 %v0_1503c, %v3_14fb4
  %v1_14fd8 = call i32 @function_15874()
  %v0_14fe0 = load i32, i32* @r8, align 4
  %v1_14fe0 = load i32, i32* @r6, align 4
  %v2_14fe0 = add i32 %v1_14fe0, %v0_14fe0
  %v4_14fe8 = call i32 @function_15128(i32* bitcast (i32** @global_var_1f63c.618 to i32*), i32 %v2_14fe0, i32 %v2_14fbc)
  store i32 %v4_14fe8, i32* @r4, align 4
  store i32 86016, i32* @lr, align 4
  %v1_14ffc = call i32 @function_15874()
  %v0_15000 = load i32, i32* @r4, align 4
  %v2_15000 = icmp eq i32 %v0_15000, 0
  br i1 %v2_15000, label %dec_label_pc_15010, label %.thread

.thread:                                          ; preds = %dec_label_pc_14fc8
  %v1_15004 = load i32, i32* @r6, align 4
  %v3_15004 = add i32 %v1_15004, %v0_15000
  %v2_15008 = load i32, i32* @r7, align 4
  %v3_15008 = add i32 %v2_15008, -4
  %v4_15008 = inttoptr i32 %v3_15008 to i32*
  store i32 %v3_15004, i32* %v4_15008, align 4
  br label %dec_label_pc_1507c

dec_label_pc_15010:                               ; preds = %dec_label_pc_14fc8
  %v0_15010 = load i32, i32* @r5, align 4
  %v1_15010 = add i32 %v0_15010, -4
  %v1_15014 = call i32 @function_14ce0(i32 %v1_15010)
  store i32 %v1_15014, i32* @r0, align 4
  store i32 %v1_15014, i32* @r4, align 4
  %v2_15018 = icmp eq i32 %v1_15014, 0
  br i1 %v2_15018, label %dec_label_pc_15034, label %dec_label_pc_15020

dec_label_pc_15020:                               ; preds = %dec_label_pc_15010
  %v0_15020 = load i32, i32* @r6, align 4
  %v1_15020 = add i32 %v0_15020, -4
  store i32 %v1_15020, i32* @r2, align 4
  %v0_15024 = load i32, i32* @r7, align 4
  store i32 %v0_15024, i32* @r1, align 4
  %v3_15028 = call i32 @function_14850(i32 %v1_15014, i32 %v0_15024, i32 %v1_15020)
  %v0_1502c = load i32, i32* @r7, align 4
  store i32 %v0_1502c, i32* @r0, align 4
  %v0_15030 = call i32 @function_14e8c()
  %v0_15034.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15034

dec_label_pc_15034:                               ; preds = %dec_label_pc_15010, %dec_label_pc_15020
  %v0_15034 = phi i32 [ 0, %dec_label_pc_15010 ], [ %v0_15034.pre, %dec_label_pc_15020 ]
  store i32 %v0_15034, i32* @r7, align 4
  br label %dec_label_pc_1507c

dec_label_pc_1503c:                               ; preds = %bb14
  %v1_1503c = add i32 %v0_1503c, 28
  %tmp15 = icmp ugt i32 %v1_1503c, %v3_14fb4
  br i1 %tmp15, label %dec_label_pc_1507c, label %dec_label_pc_15048

dec_label_pc_15048:                               ; preds = %dec_label_pc_1503c
  %v1_15054 = call i32 @function_15874()
  %v0_15058 = load i32, i32* @r8, align 4
  %v1_15058 = load i32, i32* @r5, align 4
  %v2_15058 = add i32 %v1_15058, %v0_15058
  %v1_1505c = load i32, i32* @r6, align 4
  %v2_1505c = sub i32 %v1_1505c, %v1_15058
  %v4_15064 = call i32 @function_151e8(i32* bitcast (i32** @global_var_1f63c.618 to i32*), i32 %v2_15058, i32 %v2_1505c)
  store i32 86136, i32* @lr, align 4
  %v1_15074 = call i32 @function_15874()
  %v0_15078 = load i32, i32* @r5, align 4
  %v1_15078 = load i32, i32* @r7, align 4
  %v2_15078 = add i32 %v1_15078, -4
  %v3_15078 = inttoptr i32 %v2_15078 to i32*
  store i32 %v0_15078, i32* %v3_15078, align 4
  br label %dec_label_pc_1507c

dec_label_pc_1507c:                               ; preds = %.thread, %dec_label_pc_1503c, %dec_label_pc_15034, %dec_label_pc_15048
  %v0_1507c = load i32, i32* @r7, align 4
  %v2_15080 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_15080, i32* @r4, align 4
  store i32 %v6_14f7c, i32* @r5, align 4
  store i32 %v9_14f7c, i32* @r6, align 4
  store i32 %v12_14f7c, i32* @r7, align 4
  store i32 %v15_14f7c, i32* @r8, align 4
  ret i32 %v0_1507c

; uselistorder directives
  uselistorder i32 %v1_15058, { 1, 0 }
  uselistorder i32 %v0_1503c, { 1, 2, 0 }
  uselistorder i32 %v3_14fb4, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1f63c.618, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1f63c.618 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_14ce0, { 3, 58, 0, 6, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 2, 1, 7, 5, 4 }
  uselistorder i32 ()* @function_14e8c, { 1, 0, 5, 4, 3, 2, 7, 6 }
  uselistorder i32* @r8, { 100, 101, 102, 103, 104, 113, 8, 9, 11, 10, 12, 13, 14, 105, 106, 111, 112, 107, 108, 109, 110, 15, 23, 24, 25, 26, 89, 90, 91, 16, 17, 18, 19, 20, 21, 22, 27, 28, 29, 0, 1, 2, 3, 4, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 6, 54, 55, 7, 56, 57, 58, 59, 60, 61, 62, 63, 5, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 93, 94, 95, 96, 97, 98, 99, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 179, 182, 183, 184, 185, 186, 187, 188 }
  uselistorder label %dec_label_pc_1507c, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_15034, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_14fa8, { 1, 0 }
}

define i32 @function_15094(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15094:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_15094 = inttoptr i32 %arg2 to i32*
  %v2_15094 = load i32, i32* %v1_15094, align 4
  %v3_15098 = load i32, i32* @r4, align 4
  store i32 %v3_15098, i32* %stack_var_-8, align 4
  %v1_1509c = add i32 %v2_15094, 3
  %v1_150a0 = and i32 %v1_1509c, -4
  store i32 %v1_150a0, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_150a8 = icmp ugt i32 %v1_150a0, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_150b0 = load i32, i32* %arg1, align 4
  store i32 %v2_150b0, i32* %r0.global-to-local, align 4
  br i1 %v2_150a8, label %dec_label_pc_1511c.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_15094
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1511c.preheader

dec_label_pc_1511c.preheader:                     ; preds = %dec_label_pc_15094, %bb
  %v1_150d0 = phi i32 [ %v1_150a0, %dec_label_pc_15094 ], [ 12, %bb ]
  %v2_1511c9 = icmp eq i32 %v2_150b0, 0
  br i1 %v2_1511c9, label %dec_label_pc_15124, label %dec_label_pc_150bc

dec_label_pc_150bc:                               ; preds = %dec_label_pc_1511c.preheader, %dec_label_pc_15118
  %v2_150d4 = phi i32 [ %v3_15118, %dec_label_pc_15118 ], [ %v2_150b0, %dec_label_pc_1511c.preheader ]
  %v1_150bc = inttoptr i32 %v2_150d4 to i32*
  %v2_150bc = load i32, i32* %v1_150bc, align 4
  store i32 %v2_150bc, i32* %ip.global-to-local, align 4
  %v3_150c0 = icmp ult i32 %v2_150bc, %v1_150d0
  br i1 %v3_150c0, label %dec_label_pc_15118, label %dec_label_pc_150c8

dec_label_pc_150c8:                               ; preds = %dec_label_pc_150bc
  %v1_150c8 = add i32 %v1_150d0, 44
  %v3_150cc = icmp ult i32 %v2_150bc, %v1_150c8
  br i1 %v3_150cc, label %dec_label_pc_150dc, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_150c8
  %v2_150c0.le = sub i32 %v2_150bc, %v1_150d0
  store i32 %v2_150c0.le, i32* %v1_150bc, align 4
  %v0_15108.pre = load i32, i32* %ip.global-to-local, align 4
  %v0_15110.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_150dc:                               ; preds = %dec_label_pc_150c8
  %v1_150dc = add i32 %v2_150d4, 4
  %v2_150dc = inttoptr i32 %v1_150dc to i32*
  %v3_150dc = load i32, i32* %v2_150dc, align 4
  store i32 %v3_150dc, i32* %r2.global-to-local, align 4
  %v2_150e0 = icmp eq i32 %v3_150dc, 0
  br i1 %v2_150e0, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_150dc
  %v2_150e4 = add i32 %v2_150d4, 8
  %v3_150e4 = inttoptr i32 %v2_150e4 to i32*
  %v4_150e4 = load i32, i32* %v3_150e4, align 4
  %v3_150e8 = add i32 %v3_150dc, 8
  %v4_150e8 = inttoptr i32 %v3_150e8 to i32*
  store i32 %v4_150e4, i32* %v4_150e8, align 4
  %v0_150ec.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_150dc, %bb27
  %v0_150ec = phi i32 [ %v2_150d4, %dec_label_pc_150dc ], [ %v0_150ec.pre, %bb27 ]
  %v1_150ec = add i32 %v0_150ec, 8
  %v2_150ec = inttoptr i32 %v1_150ec to i32*
  %v3_150ec = load i32, i32* %v2_150ec, align 4
  %v1_150f0 = add i32 %v0_150ec, 4
  %v2_150f0 = inttoptr i32 %v1_150f0 to i32*
  %v3_150f0 = load i32, i32* %v2_150f0, align 4
  %v2_150f4 = icmp eq i32 %v3_150ec, 0
  br i1 %v2_150f4, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_150f8 = add i32 %v3_150ec, 4
  %v4_150f8 = inttoptr i32 %v3_150f8 to i32*
  store i32 %v3_150f0, i32* %v4_150f8, align 4
  %v1_15100 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_15100, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_150fc = load i32, i32* %r1.global-to-local, align 4
  %v3_150fc = inttoptr i32 %v2_150fc to i32*
  store i32 %v3_150f0, i32* %v3_150fc, align 4
  %v1_15104.pre = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_15104.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_15110 = phi i32 [ %v0_15110.pre, %.thread._crit_edge ], [ %v1_15100, %bb28 ], [ %v1_15104.pre, %.thread5 ]
  %v0_15108 = phi i32 [ %v0_15108.pre, %.thread._crit_edge ], [ %v1_15100, %bb28 ], [ %v1_15104.pre, %.thread5 ]
  %v1_15108 = load i32, i32* %r0.global-to-local, align 4
  %v2_15108 = sub i32 %v1_15108, %v0_15108
  %v1_1510c = add i32 %v2_15108, 12
  store i32 %v1_1510c, i32* %r0.global-to-local, align 4
  %v1_15110 = load i32, i32* %r4.global-to-local, align 4
  %v2_15110 = inttoptr i32 %v1_15110 to i32*
  store i32 %v0_15110, i32* %v2_15110, align 4
  %v2_15114 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15114, i32* %r4.global-to-local, align 4
  ret i32 %v1_1510c

dec_label_pc_15118:                               ; preds = %dec_label_pc_150bc
  %v1_15118 = add i32 %v2_150d4, 4
  %v2_15118 = inttoptr i32 %v1_15118 to i32*
  %v3_15118 = load i32, i32* %v2_15118, align 4
  store i32 %v3_15118, i32* %r0.global-to-local, align 4
  %v2_1511c = icmp eq i32 %v3_15118, 0
  br i1 %v2_1511c, label %dec_label_pc_1511c.dec_label_pc_15124_crit_edge, label %dec_label_pc_150bc

dec_label_pc_1511c.dec_label_pc_15124_crit_edge:  ; preds = %dec_label_pc_15118
  br label %dec_label_pc_15124

dec_label_pc_15124:                               ; preds = %dec_label_pc_1511c.dec_label_pc_15124_crit_edge, %dec_label_pc_1511c.preheader
  store i32 %v3_15098, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_15118, { 1, 2, 0 }
  uselistorder i32 %v0_150ec, { 1, 0 }
  uselistorder i32 %v2_150bc, { 1, 0, 2, 3 }
  uselistorder i32 %v2_150d4, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_150d0, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 0, 3 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_150bc, { 1, 0 }
  uselistorder label %dec_label_pc_1511c.preheader, { 1, 0 }
}

define i32 @function_15128(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15128:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_1512c = load i32, i32* %arg1, align 4
  store i32 %v2_1512c, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_151a46 = icmp eq i32 %v2_1512c, 0
  br i1 %v2_151a46, label %dec_label_pc_151ac, label %dec_label_pc_15138

dec_label_pc_15138:                               ; preds = %dec_label_pc_15128, %dec_label_pc_151a0
  %v0_15178 = phi i32 [ %v3_151a0, %dec_label_pc_151a0 ], [ %v2_1512c, %dec_label_pc_15128 ]
  %v1_15138 = inttoptr i32 %v0_15178 to i32*
  %v2_15138 = load i32, i32* %v1_15138, align 4
  store i32 %v2_15138, i32* %r0.global-to-local, align 4
  %v2_1513c = sub i32 %v0_15178, %v2_15138
  %v1_15140 = add i32 %v2_1513c, 12
  %v3_15144 = icmp uge i32 %v1_15140, %arg2
  %v9_15144 = icmp eq i32 %v1_15140, %arg2
  %v2_15148 = xor i1 %v9_15144, true
  %v3_15148 = and i1 %v3_15144, %v2_15148
  br i1 %v3_15148, label %dec_label_pc_151a0, label %dec_label_pc_1514c

dec_label_pc_1514c:                               ; preds = %dec_label_pc_15138
  br i1 %v9_15144, label %dec_label_pc_15150, label %dec_label_pc_151ac

dec_label_pc_15150:                               ; preds = %dec_label_pc_1514c
  %v1_15150 = add i32 %arg3, 3
  %v1_15154 = and i32 %v1_15150, -4
  store i32 %v1_15154, i32* %r2.global-to-local, align 4
  %v2_15158 = sub i32 %v2_15138, %v1_15154
  %v3_15158 = icmp ult i32 %v2_15138, %v1_15154
  br i1 %v3_15158, label %dec_label_pc_151ac, label %dec_label_pc_15160

dec_label_pc_15160:                               ; preds = %dec_label_pc_15150
  %v1_15160 = add i32 %v1_15154, 44
  %v3_15164 = icmp ult i32 %v2_15138, %v1_15160
  br i1 %v3_15164, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_15160
  store i32 %v2_15158, i32* %v1_15138, align 4
  %v1_15170 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_15170, i32* %r0.global-to-local, align 4
  ret i32 %v1_15170

.thread2:                                         ; preds = %dec_label_pc_15160
  %v1_15178 = add i32 %v0_15178, 4
  %v2_15178 = inttoptr i32 %v1_15178 to i32*
  %v3_15178 = load i32, i32* %v2_15178, align 4
  store i32 %v3_15178, i32* %r2.global-to-local, align 4
  %v2_1517c = icmp eq i32 %v3_15178, 0
  br i1 %v2_1517c, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_15180 = add i32 %v0_15178, 8
  %v3_15180 = inttoptr i32 %v2_15180 to i32*
  %v4_15180 = load i32, i32* %v3_15180, align 4
  %v3_15184 = add i32 %v3_15178, 8
  %v4_15184 = inttoptr i32 %v3_15184 to i32*
  store i32 %v4_15180, i32* %v4_15184, align 4
  %v0_15188.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_15188 = phi i32 [ %v0_15178, %.thread2 ], [ %v0_15188.pre, %bb17 ]
  %v1_15188 = add i32 %v0_15188, 8
  %v2_15188 = inttoptr i32 %v1_15188 to i32*
  %v3_15188 = load i32, i32* %v2_15188, align 4
  store i32 %v3_15188, i32* %r2.global-to-local, align 4
  %v1_1518c = add i32 %v0_15188, 4
  %v2_1518c = inttoptr i32 %v1_1518c to i32*
  %v3_1518c = load i32, i32* %v2_1518c, align 4
  %v2_15190 = icmp eq i32 %v3_15188, 0
  br i1 %v2_15190, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_15194 = add i32 %v3_15188, 4
  %v4_15194 = inttoptr i32 %v3_15194 to i32*
  store i32 %v3_1518c, i32* %v4_15194, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_15198 = load i32, i32* %lr.global-to-local, align 4
  %v3_15198 = inttoptr i32 %v2_15198 to i32*
  store i32 %v3_1518c, i32* %v3_15198, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_1519c = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_1519c

dec_label_pc_151a0:                               ; preds = %dec_label_pc_15138
  %v1_151a0 = add i32 %v0_15178, 4
  %v2_151a0 = inttoptr i32 %v1_151a0 to i32*
  %v3_151a0 = load i32, i32* %v2_151a0, align 4
  store i32 %v3_151a0, i32* %ip.global-to-local, align 4
  %v2_151a4 = icmp eq i32 %v3_151a0, 0
  br i1 %v2_151a4, label %dec_label_pc_151a4.dec_label_pc_151ac.loopexit_crit_edge, label %dec_label_pc_15138

dec_label_pc_151a4.dec_label_pc_151ac.loopexit_crit_edge: ; preds = %dec_label_pc_151a0
  br label %dec_label_pc_151ac

dec_label_pc_151ac:                               ; preds = %dec_label_pc_15150, %dec_label_pc_15128, %dec_label_pc_151a4.dec_label_pc_151ac.loopexit_crit_edge, %dec_label_pc_1514c
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_151a0, { 1, 2, 0 }
  uselistorder i32 %v0_15188, { 1, 0 }
  uselistorder i32 %v1_15154, { 0, 2, 1, 3 }
  uselistorder i1 %v9_15144, { 1, 0 }
  uselistorder i32 %v2_15138, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_15178, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_151ac, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_15138, { 1, 0 }
}

define i32 @function_151b4() local_unnamed_addr {
dec_label_pc_151b4:
  %v0_151b4 = load i32, i32* @r2, align 4
  %v2_151b4 = icmp eq i32 %v0_151b4, 0
  %v0_151b8 = load i32, i32* @r3, align 4
  %v1_151b8 = load i32, i32* @r1, align 4
  %v2_151b8 = add i32 %v1_151b8, 4
  %v3_151b8 = inttoptr i32 %v2_151b8 to i32*
  store i32 %v0_151b8, i32* %v3_151b8, align 4
  %v0_151bc = load i32, i32* @r2, align 4
  %v1_151bc = load i32, i32* @r1, align 4
  %v2_151bc = add i32 %v1_151bc, 8
  %v3_151bc = inttoptr i32 %v2_151bc to i32*
  store i32 %v0_151bc, i32* %v3_151bc, align 4
  %v1_151c4 = load i32, i32* @r1, align 4
  br i1 %v2_151b4, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_151b4
  %v2_151c0 = load i32, i32* @r2, align 4
  %v3_151c0 = add i32 %v2_151c0, 4
  %v4_151c0 = inttoptr i32 %v3_151c0 to i32*
  store i32 %v1_151c4, i32* %v4_151c0, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_151b4
  %v2_151c4 = load i32, i32* @r0, align 4
  %v3_151c4 = inttoptr i32 %v2_151c4 to i32*
  store i32 %v1_151c4, i32* %v3_151c4, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_151c8 = load i32, i32* @r3, align 4
  %v2_151c8 = icmp eq i32 %v0_151c8, 0
  br i1 %v2_151c8, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_151cc = load i32, i32* @r1, align 4
  %v3_151cc = add i32 %v0_151c8, 8
  %v4_151cc = inttoptr i32 %v3_151cc to i32*
  store i32 %v1_151cc, i32* %v4_151cc, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_151d0 = load i32, i32* @r0, align 4
  ret i32 %v1_151d0

; uselistorder directives
  uselistorder i32 %v1_151c4, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_151d4() local_unnamed_addr {
dec_label_pc_151d4:
  %v0_151d4 = load i32, i32* @r2, align 4
  %v2_151d4 = icmp eq i32 %v0_151d4, 0
  %v1_151d8 = load i32, i32* @r1, align 4
  br i1 %v2_151d4, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_151d4
  %v2_151d8 = load i32, i32* @r0, align 4
  %v3_151d8 = inttoptr i32 %v2_151d8 to i32*
  store i32 %v1_151d8, i32* %v3_151d8, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_151d4
  %v3_151dc = add i32 %v0_151d4, 4
  %v4_151dc = inttoptr i32 %v3_151dc to i32*
  store i32 %v1_151d8, i32* %v4_151dc, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_151e0 = load i32, i32* @r2, align 4
  %v1_151e0 = load i32, i32* @r1, align 4
  %v2_151e0 = add i32 %v1_151e0, 8
  %v3_151e0 = inttoptr i32 %v2_151e0 to i32*
  store i32 %v0_151e0, i32* %v3_151e0, align 4
  %v1_151e4 = load i32, i32* @r0, align 4
  ret i32 %v1_151e4

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_151e8(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_151e8:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_151e8 = load i32, i32* @r4, align 4
  store i32 %v3_151e8, i32* %stack_var_-20, align 4
  %v2_151ec = load i32, i32* %arg1, align 4
  store i32 %v2_151ec, i32* %r4.global-to-local, align 4
  %v2_151f0 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_1520c2 = icmp eq i32 %v2_151ec, 0
  br i1 %v2_1520c2, label %dec_label_pc_152bc, label %dec_label_pc_151fc

dec_label_pc_151fc:                               ; preds = %dec_label_pc_151e8, %dec_label_pc_15204
  %v0_1524c = phi i32 [ %v0_15254, %dec_label_pc_15204 ], [ 0, %dec_label_pc_151e8 ]
  %v0_15254 = phi i32 [ %v3_15208, %dec_label_pc_15204 ], [ %v2_151ec, %dec_label_pc_151e8 ]
  %v1_152105.in = phi i32 [ %v3_15208, %dec_label_pc_15204 ], [ %v2_151ec, %dec_label_pc_151e8 ]
  %v1_152105 = add i32 %v1_152105.in, 12
  %v3_151fc = icmp ult i32 %v1_152105, %arg2
  br i1 %v3_151fc, label %dec_label_pc_15204, label %dec_label_pc_1521c

dec_label_pc_15204:                               ; preds = %dec_label_pc_151fc
  store i32 %v0_15254, i32* %r6.global-to-local, align 4
  %v1_15208 = add i32 %v0_15254, 4
  %v2_15208 = inttoptr i32 %v1_15208 to i32*
  %v3_15208 = load i32, i32* %v2_15208, align 4
  store i32 %v3_15208, i32* %r4.global-to-local, align 4
  %v2_1520c = icmp eq i32 %v3_15208, 0
  br i1 %v2_1520c, label %dec_label_pc_1520c.dec_label_pc_152bc.loopexit_crit_edge, label %dec_label_pc_151fc

dec_label_pc_1521c:                               ; preds = %dec_label_pc_151fc
  %v1_1521c = inttoptr i32 %v0_15254 to i32*
  %v2_1521c = load i32, i32* %v1_1521c, align 4
  %v2_15220 = sub i32 %v0_15254, %v2_1521c
  %v1_15224 = add i32 %v2_15220, 12
  %v3_15228 = icmp uge i32 %v1_15224, %v2_151f0
  %v9_15228 = icmp eq i32 %v1_15224, %v2_151f0
  %v2_1522c = xor i1 %v9_15228, true
  %v3_1522c = and i1 %v3_15228, %v2_1522c
  br i1 %v3_1522c, label %dec_label_pc_152bc, label %dec_label_pc_15230

dec_label_pc_15230:                               ; preds = %dec_label_pc_1521c
  %v2_15230 = add i32 %v2_1521c, %arg3
  store i32 %v2_15230, i32* %r7.global-to-local, align 4
  br i1 %v9_15228, label %dec_label_pc_15238, label %dec_label_pc_15264

dec_label_pc_15238:                               ; preds = %dec_label_pc_15230
  %v2_15238 = icmp eq i32 %v0_1524c, 0
  br i1 %v2_15238, label %dec_label_pc_152b0, label %dec_label_pc_15240

dec_label_pc_15240:                               ; preds = %dec_label_pc_15238
  %v1_15240 = add i32 %v0_1524c, 12
  %v9_15244 = icmp eq i32 %v1_15240, %arg2
  br i1 %v9_15244, label %dec_label_pc_1524c, label %dec_label_pc_152b0

dec_label_pc_1524c:                               ; preds = %dec_label_pc_15240
  %v1_1524c = inttoptr i32 %v0_1524c to i32*
  %v2_1524c = load i32, i32* %v1_1524c, align 4
  %v1_15250 = add i32 %v0_1524c, 8
  %v2_15250 = inttoptr i32 %v1_15250 to i32*
  %v3_15250 = load i32, i32* %v2_15250, align 4
  store i32 %v3_15250, i32* @r2, align 4
  store i32 %v0_15254, i32* @r1, align 4
  %v2_15258 = add i32 %v2_1524c, %v2_15230
  store i32 %v2_15258, i32* %r7.global-to-local, align 4
  %v0_1525c = call i32 @function_151d4()
  br label %dec_label_pc_152b0

dec_label_pc_15264:                               ; preds = %dec_label_pc_15230
  %v1_15264 = add i32 %v0_15254, 4
  %v2_15264 = inttoptr i32 %v1_15264 to i32*
  %v3_15264 = load i32, i32* %v2_15264, align 4
  store i32 %v3_15264, i32* %r5.global-to-local, align 4
  %v2_15268 = icmp eq i32 %v3_15264, 0
  br i1 %v2_15268, label %dec_label_pc_1529c, label %dec_label_pc_15270

dec_label_pc_15270:                               ; preds = %dec_label_pc_15264
  %v1_15270 = inttoptr i32 %v3_15264 to i32*
  %v2_15270 = load i32, i32* %v1_15270, align 4
  %v2_15274 = sub i32 %v3_15264, %v2_15270
  %v1_15278 = add i32 %v2_15274, 12
  %v9_1527c = icmp eq i32 %v2_151f0, %v1_15278
  br i1 %v9_1527c, label %dec_label_pc_15284, label %dec_label_pc_1529c

dec_label_pc_15284:                               ; preds = %dec_label_pc_15270
  store i32 %v0_1524c, i32* @r2, align 4
  store i32 %v3_15264, i32* @r1, align 4
  %v2_1528c = add i32 %v2_15270, %v2_15230
  store i32 %v2_1528c, i32* %r7.global-to-local, align 4
  %v0_15290 = call i32 @function_151d4()
  %v0_15294 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_15294, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_152b0

dec_label_pc_1529c:                               ; preds = %dec_label_pc_15270, %dec_label_pc_15264
  %v2_1529c = add i32 %v0_15254, %arg3
  store i32 %v2_1529c, i32* %r4.global-to-local, align 4
  store i32 %v3_15264, i32* @r3, align 4
  store i32 %v0_1524c, i32* @r2, align 4
  store i32 %v2_1529c, i32* @r1, align 4
  %v0_152ac = call i32 @function_151b4()
  br label %dec_label_pc_152b0

dec_label_pc_152b0:                               ; preds = %dec_label_pc_15240, %dec_label_pc_15238, %dec_label_pc_15284, %dec_label_pc_1524c, %dec_label_pc_1529c
  %v0_152b0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_152b0, i32* %r5.global-to-local, align 4
  %v0_152b4 = load i32, i32* %r7.global-to-local, align 4
  %v2_152b4 = inttoptr i32 %v0_152b0 to i32*
  store i32 %v0_152b4, i32* %v2_152b4, align 4
  br label %dec_label_pc_152d4

dec_label_pc_1520c.dec_label_pc_152bc.loopexit_crit_edge: ; preds = %dec_label_pc_15204
  br label %dec_label_pc_152bc

dec_label_pc_152bc:                               ; preds = %dec_label_pc_151e8, %dec_label_pc_1520c.dec_label_pc_152bc.loopexit_crit_edge, %dec_label_pc_1521c
  %v1_152bc = add i32 %v2_151f0, -12
  store i32 %v1_152bc, i32* %r5.global-to-local, align 4
  %v3_152c0 = inttoptr i32 %v1_152bc to i32*
  store i32 %arg3, i32* %v3_152c0, align 4
  %v0_152c4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_152c4, i32* @r3, align 4
  %v0_152c8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_152c8, i32* @r2, align 4
  %v0_152cc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_152cc, i32* @r1, align 4
  %v0_152d0 = call i32 @function_151b4()
  br label %dec_label_pc_152d4

dec_label_pc_152d4:                               ; preds = %dec_label_pc_152b0, %dec_label_pc_152bc
  %v0_152d4 = load i32, i32* %r5.global-to-local, align 4
  %v2_152d8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_152d8, i32* @r4, align 4
  ret i32 %v0_152d4

; uselistorder directives
  uselistorder i32 %v3_15264, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_15228, { 1, 0 }
  uselistorder i32 %v3_15208, { 2, 3, 1, 0 }
  uselistorder i32 %v0_15254, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_1524c, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_151b4, { 1, 0 }
  uselistorder i32* @r3, { 0, 3, 1, 2, 4 }
  uselistorder i32 ()* @function_151d4, { 1, 0 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_152d4, { 1, 0 }
  uselistorder label %dec_label_pc_152bc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_152b0, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_151fc, { 1, 0 }
}

define i32 @function_152dc() local_unnamed_addr {
dec_label_pc_152f8.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_152dc = ptrtoint i32* %stack_var_-268 to i32
  %v1_152ec = call i32 @function_15874()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_152f8 = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_152f8

dec_label_pc_152f8:                               ; preds = %dec_label_pc_152f8.lr.ph, %dec_label_pc_152f8
  %v1_152fc = phi i32 [ 31, %dec_label_pc_152f8.lr.ph ], [ %v1_15308, %dec_label_pc_152f8 ]
  %v4_152fc = mul i32 %v1_152fc, 4
  %v5_152fc = add i32 %v4_152fc, %v2_152f8
  %v2_15304 = add i32 %v5_152fc, -128
  %v3_15304 = inttoptr i32 %v2_15304 to i32*
  store i32 0, i32* %v3_15304, align 4
  %v0_15308 = load i32, i32* %r1.global-to-local, align 4
  %v1_15308 = add i32 %v0_15308, -1
  store i32 %v1_15308, i32* %r1.global-to-local, align 4
  %v6_15308 = icmp slt i32 %v1_15308, 0
  br i1 %v6_15308, label %dec_label_pc_15310, label %dec_label_pc_152f8

dec_label_pc_15310:                               ; preds = %dec_label_pc_152f8
  %v2_15310 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_15310, i32* @r4, align 4
  store i32 %v2_15310, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_1531c = call i32 @function_14c98()
  %v2_15320 = icmp eq i32 %v0_1531c, 0
  br i1 %v2_15320, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_15310
  store i32 %v2_15310, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_15310, %bb
  store i32 86836, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_15320, i32 ptrtoint (i32* @global_var_144b0.640 to i32))
  %v2_15338 = load i32, i32* @global_var_1f82c.642, align 4
  %v2_1533c = icmp eq i32 %v2_15338, 0
  br i1 %v2_1533c, label %dec_label_pc_15344, label %dec_label_pc_15374

dec_label_pc_15344:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1f82c.642, align 4
  br label %dec_label_pc_1534c

dec_label_pc_1534c:                               ; preds = %dec_label_pc_153c4, %dec_label_pc_15344
  %v1_15358 = call i32 @function_15874()
  %v1_15360 = call i32 @function_14b5c(i32 6)
  store i32 86900, i32* @lr, align 4
  %v1_15370 = call i32 @function_15874()
  %v2_15378.pre = load i32, i32* @global_var_1f82c.642, align 4
  br label %dec_label_pc_15374

dec_label_pc_15374:                               ; preds = %.thread1, %dec_label_pc_1534c
  %v0_153e8 = phi i32 [ %v2_15338, %.thread1 ], [ %v2_15378.pre, %dec_label_pc_1534c ]
  store i32 ptrtoint (i32* @global_var_1f82c.642 to i32), i32* %ip.global-to-local, align 4
  %v7_1537c = icmp eq i32 %v0_153e8, 1
  br i1 %v7_1537c, label %dec_label_pc_153ac.lr.ph, label %dec_label_pc_153e0

dec_label_pc_153ac.lr.ph:                         ; preds = %dec_label_pc_15374
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1f82c.642, align 4
  %v2_15398 = bitcast i32* %stack_var_-268 to i8*
  %v3_15398 = call i32 @function_14870(i8* %v2_15398, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_153ac

dec_label_pc_153ac:                               ; preds = %dec_label_pc_153ac.lr.ph, %dec_label_pc_153ac
  %v1_153b0 = phi i32 [ 31, %dec_label_pc_153ac.lr.ph ], [ %v1_153bc, %dec_label_pc_153ac ]
  %v4_153b0 = mul i32 %v1_153b0, 4
  %v5_153b0 = add i32 %v4_153b0, %v2_152f8
  %v2_153b8 = add i32 %v5_153b0, -264
  %v3_153b8 = inttoptr i32 %v2_153b8 to i32*
  store i32 -1, i32* %v3_153b8, align 4
  %v0_153bc = load i32, i32* %r1.global-to-local, align 4
  %v1_153bc = add i32 %v0_153bc, -1
  store i32 %v1_153bc, i32* %r1.global-to-local, align 4
  %v6_153bc = icmp slt i32 %v1_153bc, 0
  br i1 %v6_153bc, label %dec_label_pc_153c4, label %dec_label_pc_153ac

dec_label_pc_153c4:                               ; preds = %dec_label_pc_153ac
  store i32 %v2_152dc, i32* %r1.global-to-local, align 4
  %v4_153d8 = call i32 @function_15b60(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_1534c

dec_label_pc_153e0:                               ; preds = %dec_label_pc_15374
  %v7_153e0 = icmp eq i32 %v0_153e8, 2
  br i1 %v7_153e0, label %dec_label_pc_153e8, label %dec_label_pc_153f4

dec_label_pc_153e8:                               ; preds = %dec_label_pc_153e0
  store i32 3, i32* @global_var_1f82c.642, align 4
  %v0_153f0 = call i32 @function_152dc()
  %v2_153f4.pre = load i32, i32* @global_var_1f82c.642, align 4
  br label %dec_label_pc_153f4

dec_label_pc_153f4:                               ; preds = %dec_label_pc_153e0, %dec_label_pc_153e8
  %v1_153fc = phi i32 [ %v0_153e8, %dec_label_pc_153e0 ], [ %v2_153f4.pre, %dec_label_pc_153e8 ]
  %v7_153f8 = icmp eq i32 %v1_153fc, 3
  br i1 %v7_153f8, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_153f4
  %v2_15404 = load i32, i32* %ip.global-to-local, align 4
  %v3_15404 = inttoptr i32 %v2_15404 to i32*
  store i32 4, i32* %v3_15404, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_153f4, %bb27
  call void @__pseudo_cond_branch(i1 %v7_153f8, i32 ptrtoint (i32* @global_var_15c78.644 to i32))
  br label %dec_label_pc_1540c

dec_label_pc_1540c:                               ; preds = %dec_label_pc_1540c, %.thread3
  %v0_1540c = call i32 @function_152dc()
  br label %dec_label_pc_1540c

; uselistorder directives
  uselistorder i32 %v1_153bc, { 2, 1, 0 }
  uselistorder i32 %v1_15308, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 5, 6, 8, 7, 2 }
  uselistorder i32* @global_var_1f82c.642, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_153f4, { 1, 0 }
  uselistorder label %dec_label_pc_153ac, { 1, 0 }
  uselistorder label %dec_label_pc_15374, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_152f8, { 1, 0 }
}

define i32 @function_15424(i8* %arg1) local_unnamed_addr {
dec_label_pc_15424:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_15438 = load i32, i32* @r4, align 4
  store i32 %v3_15438, i32* %stack_var_-36, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 10, i32* %r5.global-to-local, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  %v2_1545c.pre = load i32, i32* bitcast (i32** @global_var_1f77c.647 to i32*), align 4
  br label %dec_label_pc_15454

dec_label_pc_15454:                               ; preds = %dec_label_pc_15454, %dec_label_pc_15424
  %v0_1548c = phi i32 [ %tmp, %dec_label_pc_15424 ], [ %v1_15450, %dec_label_pc_15454 ]
  store i32 %v0_1548c, i32* %r4.global-to-local, align 4
  %v1_15458 = inttoptr i32 %v0_1548c to i8*
  %v2_15458 = load i8, i8* %v1_15458, align 1
  %v3_15458 = zext i8 %v2_15458 to i32
  %v3_15460 = mul nuw nsw i32 %v3_15458, 2
  %v4_15460 = add i32 %v3_15460, %v2_1545c.pre
  %v5_15460 = inttoptr i32 %v4_15460 to i8*
  %v6_15460 = load i8, i8* %v5_15460, align 1
  %v1_15464 = and i8 %v6_15460, 32
  %v2_15464 = icmp eq i8 %v1_15464, 0
  %v1_15450 = add i32 %v0_1548c, 1
  br i1 %v2_15464, label %dec_label_pc_1546c, label %dec_label_pc_15454

dec_label_pc_1546c:                               ; preds = %dec_label_pc_15454
  %v7_1546c = icmp eq i8 %v2_15458, 43
  br i1 %v7_1546c, label %dec_label_pc_1548c, label %dec_label_pc_15474

dec_label_pc_15474:                               ; preds = %dec_label_pc_1546c
  %v7_15474 = icmp eq i8 %v2_15458, 45
  br i1 %v7_15474, label %dec_label_pc_1548c, label %bb

bb:                                               ; preds = %dec_label_pc_15474
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_154e8

dec_label_pc_1548c:                               ; preds = %dec_label_pc_1546c, %dec_label_pc_15474
  %storemerge30 = phi i32 [ 1, %dec_label_pc_15474 ], [ 0, %dec_label_pc_1546c ]
  store i32 %storemerge30, i32* %r7.global-to-local, align 4
  store i32 %v1_15450, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_154e8

dec_label_pc_154e8:                               ; preds = %bb, %dec_label_pc_1548c
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v2_154f0 = call i32 @function_13f90(i32 -1, i32 10)
  %v0_154f4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_154f4, i32* @r1, align 4
  store i32 -1, i32* @r0, align 4
  %v1_15500 = urem i32 %v2_154f0, 256
  store i32 %v1_15500, i32* %sl.global-to-local, align 4
  %v0_15504 = call i32 @function_13e80()
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v0_15504, i32* %r8.global-to-local, align 4
  %v0_15518.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15518

dec_label_pc_15514:                               ; preds = %bb48, %dec_label_pc_15574
  %v0_15514 = phi i32 [ %v1_15544, %bb48 ], [ %v0_15514.pre, %dec_label_pc_15574 ]
  store i32 %v0_15514, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15518

dec_label_pc_15518:                               ; preds = %dec_label_pc_154e8, %dec_label_pc_15514
  %v0_15544 = phi i32 [ %v0_15518.pre, %dec_label_pc_154e8 ], [ %v0_15514, %dec_label_pc_15514 ]
  %v1_15518 = inttoptr i32 %v0_15544 to i8*
  %v2_15518 = load i8, i8* %v1_15518, align 1
  %v3_15518 = zext i8 %v2_15518 to i32
  %v1_1551c = add nsw i32 %v3_15518, -48
  %v1_15520 = urem i32 %v1_1551c, 256
  %v1_15528 = or i32 %v3_15518, 32
  %tmp56 = icmp ult i32 %v1_15520, 10
  br i1 %tmp56, label %bb43, label %dec_label_pc_15530

dec_label_pc_15530:                               ; preds = %dec_label_pc_15518
  %tmp57 = icmp ugt i32 %v1_15528, 96
  br i1 %tmp57, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_15530
  %v1_15534 = add nsw i32 %v1_15528, -87
  %v5_1553c = urem i32 %v1_15534, 256
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_15518, %dec_label_pc_15530, %bb42
  %v3_1556c = phi i32 [ %v1_15520, %dec_label_pc_15518 ], [ 40, %dec_label_pc_15530 ], [ %v5_1553c, %bb42 ]
  %v1_15540 = load i32, i32* %r5.global-to-local, align 4
  %v1_15544 = add i32 %v0_15544, 1
  store i32 %v1_15544, i32* %r4.global-to-local, align 4
  %v6_15548 = icmp slt i32 %v3_1556c, %v1_15540
  br i1 %v6_15548, label %dec_label_pc_1554c, label %dec_label_pc_1558c

dec_label_pc_1554c:                               ; preds = %bb43
  %v0_1554c = load i32, i32* %ip.global-to-local, align 4
  %v1_1554c = load i32, i32* %r8.global-to-local, align 4
  %v9_1554c = icmp eq i32 %v0_1554c, %v1_1554c
  br i1 %v9_1554c, label %.thread, label %bb44

.thread:                                          ; preds = %dec_label_pc_1554c
  br label %dec_label_pc_1555c

bb44:                                             ; preds = %dec_label_pc_1554c
  %v3_1554c = icmp ult i32 %v0_1554c, %v1_1554c
  br i1 %v3_1554c, label %dec_label_pc_1555c, label %dec_label_pc_15574

dec_label_pc_1555c:                               ; preds = %bb44, %.thread
  %v4_155641727 = phi i32 [ 1, %.thread ], [ 0, %bb44 ]
  %v1_1555c = load i32, i32* %sl.global-to-local, align 4
  %v3_1555c = icmp uge i32 %v3_1556c, %v1_1555c
  %v9_1555c = icmp eq i32 %v3_1556c, %v1_1555c
  %v2_15560 = xor i1 %v3_1555c, true
  %v3_15560 = or i1 %v9_1555c, %v2_15560
  br i1 %v3_15560, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_1555c
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_1555c, %bb45
  %v4_15564 = phi i32 [ %v4_155641727, %dec_label_pc_1555c ], [ 0, %bb45 ]
  %v2_15564 = xor i1 %v9_1555c, true
  %v3_15564 = and i1 %v3_1555c, %v2_15564
  br i1 %v3_15564, label %bb47, label %thread-pre-split

bb47:                                             ; preds = %bb46
  %v5_15564 = urem i32 %v4_15564, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb46, %bb47
  %v0_15568 = phi i32 [ %v5_15564, %bb47 ], [ %v4_15564, %bb46 ]
  %v2_15568 = icmp eq i32 %v0_15568, 0
  br i1 %v2_15568, label %bb48, label %dec_label_pc_15574

bb48:                                             ; preds = %thread-pre-split
  %v4_1556c = mul i32 %v0_1554c, %v1_15540
  %v5_1556c = add i32 %v4_1556c, %v3_1556c
  store i32 %v5_1556c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_15514

dec_label_pc_15574:                               ; preds = %bb44, %thread-pre-split
  %v0_15574 = call i32 @function_14808()
  %v0_15578 = load i32, i32* %r7.global-to-local, align 4
  %v1_15578 = load i32, i32* %fp.global-to-local, align 4
  %v2_15578 = and i32 %v1_15578, %v0_15578
  store i32 %v2_15578, i32* %r7.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  %v2_15584 = inttoptr i32 %v0_15574 to i32*
  store i32 34, i32* %v2_15584, align 4
  %v0_15514.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15514

dec_label_pc_1558c:                               ; preds = %bb43
  %v0_1558c.pre = load i32, i32* %sb.global-to-local, align 4
  %v2_1558c = icmp eq i32 %v0_1558c.pre, 0
  br i1 %v2_1558c, label %bb50, label %bb49

bb49:                                             ; preds = %dec_label_pc_1558c
  %v1_15590 = load i32, i32* %r6.global-to-local, align 4
  %v3_15590 = inttoptr i32 %v0_1558c.pre to i32*
  store i32 %v1_15590, i32* %v3_15590, align 4
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_1558c, %bb49
  %v0_15594 = load i32, i32* %r7.global-to-local, align 4
  %v2_15594 = icmp eq i32 %v0_15594, 0
  %. = select i1 %v2_15594, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v0_155a0 = load i32, i32* %fp.global-to-local, align 4
  %v2_155a0 = icmp eq i32 %v0_155a0, 0
  %v0_155c4.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_155a0, label %dec_label_pc_155bc, label %bb53

bb53:                                             ; preds = %bb50
  %tmp58 = icmp ugt i32 %v0_155c4.pre.pre, %.
  br i1 %tmp58, label %dec_label_pc_155ac, label %dec_label_pc_155bc

dec_label_pc_155ac:                               ; preds = %bb53
  %v0_155ac = call i32 @function_14808()
  %v2_155b4 = inttoptr i32 %v0_155ac to i32*
  store i32 34, i32* %v2_155b4, align 4
  %v0_155b8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_155b8, i32* %ip.global-to-local, align 4
  %v0_155bc.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_155bc

dec_label_pc_155bc:                               ; preds = %bb53, %bb50, %dec_label_pc_155ac
  %v0_155c4.pre = phi i32 [ %v0_155c4.pre.pre, %bb53 ], [ %v0_155b8, %dec_label_pc_155ac ], [ %v0_155c4.pre.pre, %bb50 ]
  %v0_155bc = phi i32 [ %v0_15594, %bb53 ], [ %v0_155bc.pre, %dec_label_pc_155ac ], [ %v0_15594, %bb50 ]
  %v2_155bc = icmp eq i32 %v0_155bc, 0
  br i1 %v2_155bc, label %dec_label_pc_155bc._crit_edge, label %bb54

bb54:                                             ; preds = %dec_label_pc_155bc
  %v2_155c0 = sub i32 0, %v0_155c4.pre
  store i32 %v2_155c0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_155bc._crit_edge

dec_label_pc_155bc._crit_edge:                    ; preds = %dec_label_pc_155bc, %bb54
  %v0_155c4 = phi i32 [ %v2_155c0, %bb54 ], [ %v0_155c4.pre, %dec_label_pc_155bc ]
  %v2_155c8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_155c8, i32* @r4, align 4
  ret i32 %v0_155c4

; uselistorder directives
  uselistorder i32 %v0_155c4.pre, { 1, 0 }
  uselistorder i32 %v0_155c4.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v0_1558c.pre, { 1, 0 }
  uselistorder i32 %v4_15564, { 1, 0 }
  uselistorder i1 %v3_1555c, { 1, 0 }
  uselistorder i32 %v1_1555c, { 1, 0 }
  uselistorder i32 %v1_15544, { 1, 0 }
  uselistorder i32 %v1_15528, { 1, 0 }
  uselistorder i32 %v1_15520, { 1, 0 }
  uselistorder i32 %v0_15514, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 4, 2, 1, 3, 0, 5 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 5, 6, 0, 1, 3, 2, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 5, 2, 3, 4, 6 }
  uselistorder i32 ()* @function_13e80, { 3, 2, 4, 1, 0 }
  uselistorder i32 (i32, i32)* @function_13f90, { 7, 2, 1, 12, 3, 9, 5, 11, 10, 4, 8, 6, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder i8 32, { 0, 8, 14, 9, 10, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28 }
  uselistorder label %dec_label_pc_155bc._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_155bc, { 2, 0, 1 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_15574, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %bb43, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15518, { 1, 0 }
  uselistorder label %dec_label_pc_15514, { 1, 0 }
  uselistorder label %dec_label_pc_154e8, { 1, 0 }
  uselistorder label %dec_label_pc_1548c, { 1, 0 }
}

define i32 @function_155d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_155d0:
  %stack_var_-16 = alloca i32, align 4
  %v2_155d0 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_155d0, i32* @r0, align 4
  %v8_155ec = call i32 @function_1587c(i32 %v2_155d0, i32 ptrtoint (i32* @global_var_15874.596 to i32), i32 ptrtoint (i32* @global_var_1f75c.650 to i32), i32 88188, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_155fc = call i32 @function_15874()
  %v2_15604 = load i32, i32* @global_var_1f830.654, align 4
  %v2_15608 = icmp eq i32 %v2_15604, 0
  br i1 %v2_15608, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_155d0
  call void @__pseudo_branch(i32 %v2_15604)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_155d0, %bb
  store i32 %v2_155d0, i32* @r0, align 4
  %v8_15628 = call i32 @function_1587c(i32 %v2_155d0, i32 1, i32 ptrtoint (i32* @global_var_1f75c.650 to i32), i32 88188, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v8_15628, i32* @r0, align 4
  %v1_1562c = call i32 @function_15808(i32 %v8_15628)
  %v0_15640 = load i32, i32* @r4, align 4
  %v1_15644 = call i32 @function_15c78(i32 %v0_15640)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_155d0, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_15874, { 4, 3, 2, 1, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 21, 20, 19 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_1587c, { 1, 0, 5, 4, 3, 2 }
  uselistorder i32 88188, { 1, 0, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_15874.596 to i32), { 0, 3, 1, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_15664(i32 %arg1) local_unnamed_addr {
dec_label_pc_15664:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_15664 = load i32, i32* @r4, align 4
  store i32 %v3_15664, i32* %stack_var_-20, align 4
  %v6_15664 = load i32, i32* @r5, align 4
  %v9_15664 = load i32, i32* @r6, align 4
  %v16_15664 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* @ip, align 4
  %v2_15668 = icmp eq i32 %arg1, 0
  %v2_1566c = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_15668, label %dec_label_pc_157f0, label %dec_label_pc_15684.preheader

dec_label_pc_15684.preheader:                     ; preds = %dec_label_pc_15664
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_1568c17 = add i32 %v16_15664, 124
  br label %dec_label_pc_1567c

dec_label_pc_1567c:                               ; preds = %dec_label_pc_15684.preheader, %dec_label_pc_1567c
  %v5_1568c18 = phi i32 [ %v5_1568c17, %dec_label_pc_15684.preheader ], [ %v5_1568c, %dec_label_pc_1567c ]
  %v2_15680 = add i32 %v5_1568c18, -136
  %v3_15680 = inttoptr i32 %v2_15680 to i32*
  store i32 0, i32* %v3_15680, align 4
  %v0_15684.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_15684 = add i32 %v0_15684.pre, -1
  store i32 %v1_15684, i32* %r1.global-to-local, align 4
  %v6_15684 = icmp slt i32 %v1_15684, 0
  %v4_1568c = mul i32 %v1_15684, 4
  %v5_1568c = add i32 %v4_1568c, %v16_15664
  br i1 %v6_15684, label %dec_label_pc_15694, label %dec_label_pc_1567c

dec_label_pc_15694:                               ; preds = %dec_label_pc_1567c
  %v2_15694 = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_15694, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_156a4 = load i32, i32* @ip, align 4
  store i32 %v0_156a4, i32* %stack_var_-28, align 4
  %v0_156ac = call i32 @function_14c98()
  store i32 %v0_156ac, i32* %r0.global-to-local, align 4
  %v1_156b0 = load i32, i32* @r5, align 4
  %v5_156b4 = icmp slt i32 %v0_156ac, %v1_156b0
  br i1 %v5_156b4, label %dec_label_pc_157f8, label %dec_label_pc_156b8

dec_label_pc_156b8:                               ; preds = %dec_label_pc_15694
  %v2_156b8 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_156b8, i32* @r4, align 4
  store i32 %v1_156b0, i32* %r0.global-to-local, align 4
  store i32 %v2_15694, i32* %r1.global-to-local, align 4
  %v3_156c8 = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_156c8 = call i32 @function_144b0(i32 %v1_156b0, %_TYPEDEF_sigset_t* %v3_156c8, i32 %v2_156b8)
  store i32 %v4_156c8, i32* %r0.global-to-local, align 4
  %v1_156cc = load i32, i32* @r5, align 4
  %v9_156cc = icmp eq i32 %v4_156c8, %v1_156cc
  br i1 %v9_156cc, label %dec_label_pc_156d4, label %dec_label_pc_157f8

dec_label_pc_156d4:                               ; preds = %dec_label_pc_156b8
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_156b8, i32* %r0.global-to-local, align 4
  %v2_156dc = call i32 @function_14c74(i32 %v2_156b8, i32 17)
  store i32 %v2_156dc, i32* %r0.global-to-local, align 4
  %v1_156e0 = load i32, i32* @r5, align 4
  %v9_156e0 = icmp eq i32 %v2_156dc, %v1_156e0
  br i1 %v9_156e0, label %dec_label_pc_156f8.preheader, label %dec_label_pc_156d4.dec_label_pc_157c0_crit_edge

dec_label_pc_156d4.dec_label_pc_157c0_crit_edge:  ; preds = %dec_label_pc_156d4
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_157c0

dec_label_pc_156f8.preheader:                     ; preds = %dec_label_pc_156d4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_156f0

dec_label_pc_156f0:                               ; preds = %dec_label_pc_156f8.preheader, %dec_label_pc_156f0
  %v5_1570016 = phi i32 [ %v5_1568c17, %dec_label_pc_156f8.preheader ], [ %v5_15700, %dec_label_pc_156f0 ]
  %v2_156f4 = add i32 %v5_1570016, -136
  %v3_156f4 = inttoptr i32 %v2_156f4 to i32*
  store i32 0, i32* %v3_156f4, align 4
  %v0_156f8.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_156f8 = add i32 %v0_156f8.pre, -1
  store i32 %v1_156f8, i32* %r1.global-to-local, align 4
  %v6_156f8 = icmp slt i32 %v1_156f8, 0
  %v4_15700 = mul i32 %v1_156f8, 4
  %v5_15700 = add i32 %v4_15700, %v16_15664
  br i1 %v6_156f8, label %dec_label_pc_15708, label %dec_label_pc_156f0

dec_label_pc_15708:                               ; preds = %dec_label_pc_156f0
  store i32 %v2_15694, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_15710 = call i32 @function_14c98()
  store i32 %v0_15710, i32* %r0.global-to-local, align 4
  %v1_15714 = icmp slt i32 %v0_15710, 0
  br i1 %v1_15714, label %dec_label_pc_157f8, label %dec_label_pc_1571c

dec_label_pc_1571c:                               ; preds = %dec_label_pc_15708
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_15728 = call i32 @function_15b60(i32 17, i32* null, i32 %v2_1566c)
  store i32 %v4_15728, i32* %r0.global-to-local, align 4
  %v1_1572c = icmp slt i32 %v4_15728, 0
  br i1 %v1_1572c, label %dec_label_pc_15734, label %dec_label_pc_1575c

dec_label_pc_15734:                               ; preds = %dec_label_pc_1571c
  %v0_15734 = call i32 @function_14808()
  store i32 %v2_156b8, i32* %r1.global-to-local, align 4
  store i32 %v0_15734, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_15748 = inttoptr i32 %v0_15734 to i32*
  %v2_15748 = load i32, i32* %v1_15748, align 4
  store i32 %v2_15748, i32* @r4, align 4
  %v3_1574c = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_1574c = call i32 @function_144b0(i32 2, %_TYPEDEF_sigset_t* %v3_1574c, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_15754 = load i32, i32* @r4, align 4
  %v1_15754 = load i32, i32* %r5.global-to-local, align 4
  %v2_15754 = inttoptr i32 %v1_15754 to i32*
  store i32 %v0_15754, i32* %v2_15754, align 4
  %v17_15800.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_157fc

dec_label_pc_1575c:                               ; preds = %dec_label_pc_1571c
  %v2_1575c = load i32, i32* %stack_var_-424, align 4
  %v7_15760 = icmp eq i32 %v2_1575c, 1
  %v2_15768 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_15768, i32* @r4, align 4
  br i1 %v7_15760, label %dec_label_pc_15770, label %dec_label_pc_157a4

dec_label_pc_15770:                               ; preds = %dec_label_pc_1575c
  store i32 %v2_15768, i32* %r1.global-to-local, align 4
  store i32 %v2_15768, i32* %r0.global-to-local, align 4
  %v2_15778 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_15778 = call i32 @function_15ffc(%timespec* %v2_15778, i32 %v2_15768)
  store i32 %v3_15778, i32* %r0.global-to-local, align 4
  store i32 %v3_15778, i32* %r6.global-to-local, align 4
  %v0_15780 = call i32 @function_14808()
  store i32 %v2_156b8, i32* %r1.global-to-local, align 4
  store i32 %v0_15780, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_15794 = inttoptr i32 %v0_15780 to i32*
  %v2_15794 = load i32, i32* %v1_15794, align 4
  store i32 %v2_15794, i32* @r4, align 4
  %v3_15798 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_15798 = call i32 @function_144b0(i32 2, %_TYPEDEF_sigset_t* %v3_15798, i32 0)
  store i32 %v4_15798, i32* %r0.global-to-local, align 4
  %v0_1579c = load i32, i32* @r4, align 4
  %v1_1579c = load i32, i32* %r5.global-to-local, align 4
  %v2_1579c = inttoptr i32 %v1_1579c to i32*
  store i32 %v0_1579c, i32* %v2_1579c, align 4
  %v0_157cc.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_157cc

dec_label_pc_157a4:                               ; preds = %dec_label_pc_1575c
  store i32 %v2_156b8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_157b0 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_157b0 = call i32 @function_144b0(i32 2, %_TYPEDEF_sigset_t* %v3_157b0, i32 0)
  store i32 %v4_157b0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_157c0

dec_label_pc_157c0:                               ; preds = %dec_label_pc_156d4.dec_label_pc_157c0_crit_edge, %dec_label_pc_157a4
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_156d4.dec_label_pc_157c0_crit_edge ], [ %v2_15768, %dec_label_pc_157a4 ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_157c4 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_157c4 = call i32 @function_15ffc(%timespec* %v2_157c4, i32 %storemerge.pre-phi)
  store i32 %v3_157c4, i32* %r0.global-to-local, align 4
  store i32 %v3_157c4, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_157cc

dec_label_pc_157cc:                               ; preds = %dec_label_pc_15770, %dec_label_pc_157c0
  %v0_157cc = phi i32 [ %v0_157cc.pr, %dec_label_pc_15770 ], [ %v3_157c4, %dec_label_pc_157c0 ]
  %v2_157cc = icmp eq i32 %v0_157cc, 0
  br i1 %v2_157cc, label %dec_label_pc_157f0, label %dec_label_pc_157d4

dec_label_pc_157d4:                               ; preds = %dec_label_pc_157cc
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_157dc = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_157dc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_157fc

dec_label_pc_157f0:                               ; preds = %dec_label_pc_15664, %dec_label_pc_157cc
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_157fc

dec_label_pc_157f8:                               ; preds = %dec_label_pc_156b8, %dec_label_pc_15708, %dec_label_pc_15694
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_157fc

dec_label_pc_157fc:                               ; preds = %dec_label_pc_157d4, %dec_label_pc_157f0, %dec_label_pc_15734, %dec_label_pc_157f8
  %v17_15800 = phi i32 [ %v3_157dc, %dec_label_pc_157d4 ], [ 0, %dec_label_pc_157f0 ], [ %v17_15800.pre, %dec_label_pc_15734 ], [ -1, %dec_label_pc_157f8 ]
  %v2_15800 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_15800, i32* @r4, align 4
  store i32 %v6_15664, i32* @r5, align 4
  store i32 %v9_15664, i32* @r6, align 4
  ret i32 %v17_15800

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_15768, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_156f8, { 0, 2, 1 }
  uselistorder i32 %v2_156b8, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_156b0, { 1, 0, 2 }
  uselistorder i32 %v1_15684, { 0, 2, 1 }
  uselistorder i32 %v16_15664, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 10, 9, 0, 11, 12, 14, 13, 1 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 6, 0, 8, 7, 10, 9, 22, 11, 13, 14, 12, 16, 15, 17, 21, 18, 2, 19, 20, 1 }
  uselistorder i32 (i32, i32*, i32)* @function_15b60, { 1, 2, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @function_144b0, { 1, 2, 3, 4, 0 }
  uselistorder i32 ()* @function_14c98, { 2, 1, 0, 3, 4 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder label %dec_label_pc_157fc, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_157f8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_157f0, { 1, 0 }
  uselistorder label %dec_label_pc_157cc, { 1, 0 }
  uselistorder label %dec_label_pc_157c0, { 1, 0 }
  uselistorder label %dec_label_pc_156f0, { 1, 0 }
  uselistorder label %dec_label_pc_1567c, { 1, 0 }
}

define i32 @function_15808(i32 %arg1) local_unnamed_addr {
dec_label_pc_15834:
  %stack_var_-8 = alloca i32, align 4
  %v3_15808 = load i32, i32* @r4, align 4
  store i32 %v3_15808, i32* %stack_var_-8, align 4
  %v2_15838 = load i32, i32* @global_var_1f840.663, align 4
  %v2_1583c = icmp eq i32 %v2_15838, 0
  br i1 %v2_1583c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_15834
  call void @__pseudo_branch(i32 %v2_15838)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_15834, %bb
  %v2_1584c = load i32, i32* @global_var_1f844.665, align 4
  %v2_15850 = icmp eq i32 %v2_1584c, 0
  br i1 %v2_15850, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_15854 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_15854, i32* @r4, align 4
  %v9_15854 = load i32, i32* @r0, align 4
  ret i32 %v9_15854

bb13:                                             ; preds = %.thread
  call void @__pseudo_branch(i32 %v2_1584c)
  %v2_15860 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15860, i32* @r4, align 4
  %v8_15860 = load i32, i32* @r0, align 4
  ret i32 %v8_15860

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_15874() local_unnamed_addr {
dec_label_pc_15874:
  ret i32 0
}

define i32 @function_1587c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_1587c:
  %v1_1587c = load i32, i32* @r0, align 4
  ret i32 %v1_1587c
}

define i32 @function_15880(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_15880:
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-12 = alloca i32, align 4
  %v3_15880 = load i32, i32* @r4, align 4
  store i32 %v3_15880, i32* %stack_var_-12, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_15890 = call i32 @function_14144(i32 %arg1, i32 1)
  %v7_15894 = icmp eq i32 %v2_15890, -1
  br i1 %v7_15894, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_15880
  %v3_15898 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_15898, i32* @r4, align 4
  ret i32 %v2_15890

bb5:                                              ; preds = %dec_label_pc_15880
  %v0_1589c = load i32, i32* @r4, align 4
  %v4_158a4 = call i32 @function_14360(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_172f8.668, i32 0, i32 0), i32 %v0_1589c)
  %v1_158a8 = load i32, i32* %r5.global-to-local, align 4
  %v9_158a8 = icmp eq i32 %v4_158a4, %v1_158a8
  br i1 %v9_158a8, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  %v3_158ac = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_158ac, i32* @r4, align 4
  ret i32 %v4_158a4

bb7:                                              ; preds = %bb5
  %v0_158b0 = call i32 @function_152dc()
  %v0_158b4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_158b4, label %bb8, label %bb9

bb8:                                              ; preds = %bb7
  %v1_158b4 = load i32, i32* @r7, align 4
  %v4_158b4 = inttoptr i32 %v0_1589c to i32*
  store i32 %v1_158b4, i32* %v4_158b4, align 4
  br label %bb9

bb9:                                              ; preds = %bb7, %bb8
  ret i32 %v0_158b0

; uselistorder directives
  uselistorder i32 %v2_15890, { 1, 0 }
  uselistorder i32* @r7, { 299, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 243, 244, 36, 44, 37, 1, 35, 51, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 245, 253, 254, 246, 247, 248, 249, 250, 251, 252, 60, 61, 2, 62, 63, 64, 65, 66, 67, 68, 69, 202, 203, 204, 54, 0, 55, 56, 57, 58, 59, 70, 71, 72, 73, 3, 74, 75, 76, 77, 78, 79, 80, 81, 82, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 4, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298 }
  uselistorder i1* @cpsr_z, { 8, 0, 1, 10, 9, 5, 6, 2, 3, 4, 7 }
  uselistorder i32 ()* @function_152dc, { 0, 2, 1, 3 }
  uselistorder i32 (i8*, i32)* @function_14360, { 9, 5, 0, 1, 8, 2, 3, 4, 6, 7 }
  uselistorder i32 (i32, i32)* @function_14144, { 0, 13, 6, 5, 8, 7, 10, 9, 17, 16, 15, 14, 4, 3, 12, 11, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
}

define i32 @function_158b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_158b8:
  %v2_158bc = load i32, i32* @global_var_1f848.670, align 4
  %v2_158c0 = icmp eq i32 %v2_158bc, 0
  br i1 %v2_158c0, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_158b8
  %v6_158cc = load i32, i32* @r0, align 4
  ret i32 %v6_158cc

bb2:                                              ; preds = %dec_label_pc_158b8
  store i32 1, i32* @global_var_1f848.670, align 4
  store i32 4096, i32* @global_var_1f83c.621, align 4
  ret i32 undef
}

define i32 @function_15914(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_15914:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v4_15918 = mul i32 %arg2, 4
  %v5_15918 = add i32 %tmp, %v4_15918
  %v2_1591c = load i32, i32* %arg3, align 4
  %v2_15920 = ptrtoint i32* %stack_var_-120 to i32
  %v1_15924 = add i32 %v5_15918, 4
  %v9_15928 = icmp eq i32 %v1_15924, %v2_1591c
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1f834.675, align 4
  store i32 %v1_15924, i32* @global_var_1f838.677, align 4
  store i32 %arg6, i32* @global_var_1f844.665, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_15928, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_15914
  store i32 %v5_15918, i32* @global_var_1f838.677, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_15914, %bb
  %v2_15968 = bitcast i32* %stack_var_-120 to i8*
  %v3_15968 = call i32 @function_14870(i8* %v2_15968, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1f838.677, align 4
  br label %dec_label_pc_15978

dec_label_pc_15978:                               ; preds = %dec_label_pc_15978, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_15978, %dec_label_pc_15978 ]
  %v1_15978 = inttoptr i32 %storemerge to i32*
  %v2_15978 = load i32, i32* %v1_15978, align 4
  %v4_15978 = add i32 %storemerge, 4
  %v2_1597c = icmp eq i32 %v2_15978, 0
  br i1 %v2_1597c, label %dec_label_pc_15988, label %dec_label_pc_15978

dec_label_pc_15988:                               ; preds = %dec_label_pc_15978
  store i32 %v4_15978, i32* @r4, align 4
  %v1_159a822 = inttoptr i32 %v4_15978 to i32*
  %v2_159a823 = load i32, i32* %v1_159a822, align 4
  %v2_159ac25 = icmp eq i32 %v2_159a823, 0
  br i1 %v2_159ac25, label %dec_label_pc_159b4, label %dec_label_pc_15990

dec_label_pc_15990:                               ; preds = %dec_label_pc_15988, %dec_label_pc_159a8
  %v5_15994 = phi i32 [ %v2_159a8, %dec_label_pc_159a8 ], [ %v2_159a823, %dec_label_pc_15988 ]
  %v2_15990 = icmp ugt i32 %v5_15994, 13
  %v7_15990 = icmp eq i32 %v5_15994, 14
  %v2_15994 = xor i1 %v2_15990, true
  %v3_15994 = or i1 %v7_15990, %v2_15994
  br i1 %v3_15994, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_15990
  %v6_15994 = and i32 %v5_15994, 536870912
  %v7_15994 = icmp ne i32 %v6_15994, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_15990, %bb42
  %v1_159a0 = phi i1 [ %v2_15990, %dec_label_pc_15990 ], [ %v7_15994, %bb42 ]
  %v2_15998 = xor i1 %v1_159a0, true
  %v3_15998 = or i1 %v7_15990, %v2_15998
  br i1 %v3_15998, label %bb44, label %dec_label_pc_159a8

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_159a8

dec_label_pc_159a8:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_15998, i32 ptrtoint (i32* @global_var_14850.679 to i32))
  %v0_159a4 = load i32, i32* @r4, align 4
  %v1_159a4 = add i32 %v0_159a4, 8
  store i32 %v1_159a4, i32* @r4, align 4
  %v1_159a8 = inttoptr i32 %v1_159a4 to i32*
  %v2_159a8 = load i32, i32* %v1_159a8, align 4
  %v2_159ac = icmp eq i32 %v2_159a8, 0
  br i1 %v2_159ac, label %dec_label_pc_159b4, label %dec_label_pc_15990

dec_label_pc_159b4:                               ; preds = %dec_label_pc_159a8, %dec_label_pc_15988
  %v1_159b8 = call i32 @function_16a0c(i32 %v2_15920)
  store i32 %v1_159b8, i32* @r0, align 4
  %v1_159bc = call i32 @function_158b8(i32 %v1_159b8)
  store i32 %v1_159bc, i32* @r0, align 4
  %v2_159c8 = icmp eq i32 %tmp37, 0
  br i1 %v2_159c8, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_159b4
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_159b4, %bb45
  %v0_159d8 = phi i32 [ %tmp37, %dec_label_pc_159b4 ], [ 4096, %bb45 ]
  %v3_159d0 = icmp eq i32 %tmp36, -1
  %v8_159d0 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1f83c.621 to i32), i32* @r2, align 4
  store i32 %v0_159d8, i32* @global_var_1f83c.621, align 4
  br i1 %v3_159d0, label %dec_label_pc_159e0, label %dec_label_pc_15a08

dec_label_pc_159e0:                               ; preds = %bb46
  %v0_159e0 = call i32 @function_15f6c()
  store i32 %v0_159e0, i32* @r0, align 4
  store i32 %v0_159e0, i32* @r4, align 4
  %v0_159e8 = call i32 @function_15f14()
  %v0_159ec = load i32, i32* @r4, align 4
  %v9_159ec = icmp eq i32 %v0_159ec, %v0_159e8
  br i1 %v9_159ec, label %dec_label_pc_159f4, label %dec_label_pc_15a30

dec_label_pc_159f4:                               ; preds = %dec_label_pc_159e0
  %v1_159f4 = call i32 @function_15f40(i32 %v0_159e8)
  store i32 %v1_159f4, i32* @r0, align 4
  store i32 %v1_159f4, i32* @r4, align 4
  %v0_159fc = call i32 @function_15ee8()
  %v0_15a00 = load i32, i32* @r4, align 4
  %v9_15a00 = icmp eq i32 %v0_15a00, %v0_159fc
  br i1 %v9_15a00, label %dec_label_pc_15a08, label %dec_label_pc_15a30

dec_label_pc_15a08:                               ; preds = %dec_label_pc_159f4, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_159d0, label %dec_label_pc_15a9c, label %dec_label_pc_15a14

dec_label_pc_15a14:                               ; preds = %dec_label_pc_15a08
  %v9_15a18 = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_15a18, label %dec_label_pc_15a20, label %dec_label_pc_15a30

dec_label_pc_15a20:                               ; preds = %dec_label_pc_15a14
  br label %dec_label_pc_15a30

dec_label_pc_15a30:                               ; preds = %dec_label_pc_15a20, %dec_label_pc_15a14, %dec_label_pc_159f4, %dec_label_pc_159e0
  %v3_15a38 = call i32 @function_15880(i32 0, i32* inttoptr (i32 32768 to i32*))
  %v3_15a44 = call i32 @function_15880(i32 1, i32* inttoptr (i32 32770 to i32*))
  %v3_15a50 = call i32 @function_15880(i32 2, i32* inttoptr (i32 32770 to i32*))
  br label %dec_label_pc_15a9c

dec_label_pc_15a9c:                               ; preds = %dec_label_pc_15a30, %dec_label_pc_15a08
  %v0_15a60 = load i32, i32* %r6.global-to-local, align 4
  %v1_15a60 = inttoptr i32 %v0_15a60 to i32*
  %v2_15a60 = load i32, i32* %v1_15a60, align 4
  store i32 %v2_15a60, i32* @global_var_1f774, align 4
  store i32 %arg5, i32* @global_var_1f840.663, align 4
  %v2_15a9c = icmp eq i32 %arg4, 0
  br i1 %v2_15a9c, label %dec_label_pc_15ad8, label %bb47

bb47:                                             ; preds = %dec_label_pc_15a9c
  br label %dec_label_pc_15ad8

dec_label_pc_15ad8:                               ; preds = %dec_label_pc_15a9c, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_15ae8 = call i32 @function_14808()
  %v2_15af0 = inttoptr i32 %v1_15ae8 to i32*
  store i32 0, i32* %v2_15af0, align 4
  %v0_15b1c = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_15b28 = call i32 @function_155d0(i32 %v0_15b1c)
  ret i32 %v1_15b28

; uselistorder directives
  uselistorder i32 %v2_159a8, { 1, 0 }
  uselistorder i32 %v1_159a4, { 1, 0 }
  uselistorder i1 %v2_15990, { 1, 0 }
  uselistorder i32 %v4_15978, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_155d0, { 0, 7, 6, 4, 5, 3, 2, 1 }
  uselistorder i32 32768, { 1, 2, 0 }
  uselistorder i32* @global_var_1f83c.621, { 1, 4, 0, 2, 3 }
  uselistorder i32 4096, { 0, 1, 5, 9, 3, 4, 6, 7, 2, 8, 10, 11 }
  uselistorder i32 536870912, { 1, 0, 2 }
  uselistorder i1 true, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 50, 9, 10, 11, 12, 13, 17, 18, 19, 78, 79, 80, 81, 70, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 20, 21, 98, 99, 100, 51, 69, 15, 16, 68, 14, 101, 33, 32, 57, 63, 58, 64, 55, 62, 56, 67, 102, 22, 103, 104, 23, 24, 25, 105, 71, 72, 26, 27, 106, 73, 74, 28, 29, 107, 75, 76, 30, 31, 54, 108, 109, 65, 110, 34, 59, 35, 36, 52, 37, 53, 38, 39, 40, 111, 112, 113, 114, 60, 115, 116, 117, 118, 119, 120, 121, 122, 45, 123, 46, 47, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 44, 138, 139, 140, 141, 142, 143, 43, 144, 49, 145, 61, 66, 48, 146, 41, 42, 77, 147 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_15ad8, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_159a8, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_15990, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_15b60(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15b60:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_15b60 = load i32, i32* @r4, align 4
  %v6_15b60 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_15b64 = icmp eq i32* %arg2, null
  %v2_15b68 = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_15b64, label %dec_label_pc_15bd4, label %dec_label_pc_15b78

dec_label_pc_15b78:                               ; preds = %dec_label_pc_15b60
  %v2_15b7c = load i32, i32* %arg2, align 4
  %v4_15b7c = add i32 %tmp, 4
  store i32 %v4_15b7c, i32* @r1, align 4
  %v2_15b80 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_15b80, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_15b7c, i32* %stack_var_-156, align 4
  %v3_15b8c = call i32 @function_14850(i32 %v2_15b80, i32 %v4_15b7c, i32 128)
  store i32 %v3_15b8c, i32* %r0.global-to-local, align 4
  %v0_15b90 = load i32, i32* @r4, align 4
  %v1_15b90 = add i32 %v0_15b90, 132
  %v2_15b90 = inttoptr i32 %v1_15b90 to i32*
  %v3_15b90 = load i32, i32* %v2_15b90, align 4
  %v1_15b94 = and i32 %v3_15b90, 67108864
  %v2_15b94 = icmp eq i32 %v1_15b94, 0
  br i1 %v2_15b94, label %dec_label_pc_15ba8, label %bb

bb:                                               ; preds = %dec_label_pc_15b78
  br label %dec_label_pc_15bc4

dec_label_pc_15ba8:                               ; preds = %dec_label_pc_15b78
  %v1_15bb0 = and i32 %v3_15b90, 4
  %v2_15bb0 = icmp eq i32 %v1_15bb0, 0
  br i1 %v2_15bb0, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_15ba8
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_15ba8, %bb20
  br label %dec_label_pc_15bc4

dec_label_pc_15bc4:                               ; preds = %bb, %bb21
  %v2_15bc4 = icmp eq i32 %v0_15b90, 0
  %v3_15bc8 = ptrtoint i32* %stack_var_-156 to i32
  %.v3_15bc8 = select i1 %v2_15bc4, i32 0, i32 %v3_15bc8
  %v0_15bd4.pre = load i32, i32* @r5, align 4
  %v0_15be4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15bd4

dec_label_pc_15bd4:                               ; preds = %dec_label_pc_15bc4, %dec_label_pc_15b60
  %v0_15be4 = phi i32 [ %arg1, %dec_label_pc_15b60 ], [ %v0_15be4.pre, %dec_label_pc_15bc4 ]
  %v0_15bd4 = phi i32 [ %arg3, %dec_label_pc_15b60 ], [ %v0_15bd4.pre, %dec_label_pc_15bc4 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_15b60 ], [ %.v3_15bc8, %dec_label_pc_15bc4 ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_15bd4 = icmp eq i32 %v0_15bd4, 0
  %.v2_15b68 = select i1 %v2_15bd4, i32 0, i32 %v2_15b68
  store i32 %.v2_15b68, i32* @r2, align 4
  store i32 %v0_15be4, i32* %r0.global-to-local, align 4
  %v1_15be8 = call i32 @function_15c4c(i32 %v0_15be4)
  store i32 %v1_15be8, i32* %r0.global-to-local, align 4
  %v0_15bec = load i32, i32* @r5, align 4
  %v2_15bec = icmp eq i32 %v0_15bec, 0
  br i1 %v2_15bec, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_15bd4
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_15bd4, %bb25
  %v0_15bfc.pr = phi i32 [ 0, %dec_label_pc_15bd4 ], [ 1, %bb25 ]
  %v1_15bf4 = icmp slt i32 %v1_15be8, 0
  br i1 %v1_15bf4, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_15c30

thread-pre-split:                                 ; preds = %bb26
  %v2_15bfc = icmp eq i32 %v0_15bfc.pr, 0
  store i32 %v1_15be8, i32* @r4, align 4
  br i1 %v2_15bfc, label %dec_label_pc_15c30, label %dec_label_pc_15c08

dec_label_pc_15c08:                               ; preds = %thread-pre-split
  %v2_15c08 = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_15bec, i32* %r0.global-to-local, align 4
  %v2_15c10 = inttoptr i32 %v0_15bec to i32*
  store i32 %v2_15c08, i32* %v2_15c10, align 4
  %v3_15c10 = load i32, i32* %r0.global-to-local, align 4
  %v4_15c10 = add i32 %v3_15c10, 4
  store i32 %v4_15c10, i32* @r0, align 4
  %v2_15c14 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_15c14, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_15c1c = call i32 @function_14850(i32 %v4_15c10, i32 %v2_15c14, i32 128)
  store i32 %v3_15c1c, i32* %r0.global-to-local, align 4
  %v1_15c24 = load i32, i32* @r5, align 4
  %v2_15c24 = add i32 %v1_15c24, 136
  %v3_15c24 = inttoptr i32 %v2_15c24 to i32*
  %v1_15c2c = load i32, i32* @r5, align 4
  %v2_15c2c = add i32 %v1_15c2c, 132
  %v3_15c2c = inttoptr i32 %v2_15c2c to i32*
  %v0_15c30.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15c30

dec_label_pc_15c30:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_15c08
  %v0_15c30 = phi i32 [ %v1_15be8, %thread-pre-split ], [ %v0_15c30.pre, %dec_label_pc_15c08 ], [ %v1_15be8, %thread-pre-split.thread ]
  store i32 %v0_15c30, i32* %r0.global-to-local, align 4
  store i32 %v3_15b60, i32* @r4, align 4
  store i32 %v6_15b60, i32* @r5, align 4
  ret i32 %v0_15c30

; uselistorder directives
  uselistorder i32 %v0_15c30, { 1, 0 }
  uselistorder i32 %v0_15bec, { 1, 0, 2 }
  uselistorder i32 %v0_15be4, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 6, 4, 5, 1, 7, 2, 0 }
  uselistorder label %dec_label_pc_15c30, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_15bc4, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_15c4c(i32 %arg1) local_unnamed_addr {
dec_label_pc_15c4c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15c4c = load i32, i32* @r4, align 4
  store i32 %v3_15c4c, i32* %stack_var_-8, align 4
  %v1_15c50 = load i32, i32* @r1, align 4
  %v2_15c50 = inttoptr i32 %v1_15c50 to %sigaction*
  %v3_15c50 = load i32, i32* @r2, align 4
  %v4_15c50 = inttoptr i32 %v3_15c50 to %sigaction*
  %v5_15c50 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_15c50, %sigaction* %v4_15c50)
  store i32 %v5_15c50, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_15c50, -4095
  br i1 %tmp, label %dec_label_pc_15c70, label %dec_label_pc_15c60

dec_label_pc_15c60:                               ; preds = %dec_label_pc_15c4c
  %v0_15c60 = call i32 @function_14808()
  %v0_15c64 = load i32, i32* %r4.global-to-local, align 4
  %v1_15c64 = sub i32 0, %v0_15c64
  %v2_15c68 = inttoptr i32 %v0_15c60 to i32*
  store i32 %v1_15c64, i32* %v2_15c68, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15c70

dec_label_pc_15c70:                               ; preds = %dec_label_pc_15c4c, %dec_label_pc_15c60
  %v0_15c70 = phi i32 [ %v5_15c50, %dec_label_pc_15c4c ], [ -1, %dec_label_pc_15c60 ]
  %v2_15c74 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15c74, i32* %r4.global-to-local, align 4
  ret i32 %v0_15c70

; uselistorder directives
  uselistorder i32 %v5_15c50, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15c70, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_15c78(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_15c78:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_15ca0() local_unnamed_addr {
dec_label_pc_15ca0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %tmp4 = bitcast i32* %stack_var_-72 to %stat*
  %v0_15cb0 = load i32, i32* @r0, align 4
  %v4_15cb0 = call i32 @fstat(i32 %v0_15cb0, %stat* %tmp4)
  store i32 %v4_15cb0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_15cb0, -4095
  br i1 %tmp, label %dec_label_pc_15cd4, label %dec_label_pc_15cc0

dec_label_pc_15cc0:                               ; preds = %dec_label_pc_15ca0
  %v0_15cc0 = call i32 @function_14808()
  %v0_15cc4 = load i32, i32* %r4.global-to-local, align 4
  %v1_15cc4 = sub i32 0, %v0_15cc4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15ccc = inttoptr i32 %v0_15cc0 to i32*
  store i32 %v1_15cc4, i32* %v2_15ccc, align 4
  br label %dec_label_pc_15ce4

dec_label_pc_15cd4:                               ; preds = %dec_label_pc_15ca0
  %v2_15cd4 = icmp eq i32 %v4_15cb0, 0
  store i32 89316, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_15cd4, i32 ptrtoint (i32* @global_var_163bc.695 to i32))
  br label %dec_label_pc_15ce4

dec_label_pc_15ce4:                               ; preds = %dec_label_pc_15cc0, %dec_label_pc_15cd4
  %v0_15ce4 = load i32, i32* %r4.global-to-local, align 4
  ret i32 %v0_15ce4

; uselistorder directives
  uselistorder i32 %v4_15cb0, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 5, 16, 14, 15, 9, 10, 6, 2, 3, 4, 0, 1, 7, 8, 11, 12, 13 }
  uselistorder label %dec_label_pc_15ce4, { 1, 0 }
}

define i32 @function_15cf0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15cf0:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %v6_15cf0 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_15cf8 = call i32 @function_15d84()
  store i32 %v0_15cf8, i32* %r6.global-to-local, align 4
  %tmp8 = icmp slt i32 %v0_15cf8, 1
  br i1 %tmp8, label %dec_label_pc_15d7c, label %dec_label_pc_15d68.preheader

dec_label_pc_15d68.preheader:                     ; preds = %dec_label_pc_15cf0
  %v5_15d00 = load i32, i32* @r4, align 4
  %v7_15d00 = add i32 %v5_15d00, %v0_15cf8
  store i32 %v7_15d00, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15d68

dec_label_pc_15d0c:                               ; preds = %dec_label_pc_15d68
  %v1_15d0c = add i32 %v2_15d1c, 16
  %v2_15d0c = inttoptr i32 %v1_15d0c to i32*
  %v3_15d0c = load i32, i32* %v2_15d0c, align 4
  store i32 %v3_15d0c, i32* @lr, align 4
  %v2_15d10 = inttoptr i32 %v1_15d6c to i32*
  %v3_15d10 = load i32, i32* %v2_15d10, align 4
  store i32 %v3_15d10, i32* %r2.global-to-local, align 4
  %v1_15d14 = add i32 %v2_15d1c, 18
  %v2_15d14 = inttoptr i32 %v1_15d14 to i8*
  %v3_15d14 = load i8, i8* %v2_15d14, align 1
  %v4_15d14 = zext i8 %v3_15d14 to i32
  store i32 %v4_15d14, i32* %ip.global-to-local, align 4
  %v3_15d18 = sdiv i32 %v3_15d0c, 256
  store i32 %v3_15d18, i32* %r3.global-to-local, align 4
  %v1_15d1c = trunc i32 %v3_15d0c to i8
  %v4_15d1c = inttoptr i32 %v1_15d6c to i8*
  store i8 %v1_15d1c, i8* %v4_15d1c, align 1
  %v0_15d20 = load i32, i32* %r2.global-to-local, align 4
  %v1_15d20 = load i32, i32* @r4, align 4
  %v2_15d20 = add i32 %v1_15d20, 4
  %v3_15d20 = inttoptr i32 %v2_15d20 to i32*
  store i32 %v0_15d20, i32* %v3_15d20, align 4
  %v0_15d24 = load i32, i32* %ip.global-to-local, align 4
  %v1_15d24 = trunc i32 %v0_15d24 to i8
  %v2_15d24 = load i32, i32* @r4, align 4
  %v3_15d24 = add i32 %v2_15d24, 10
  %v4_15d24 = inttoptr i32 %v3_15d24 to i8*
  store i8 %v1_15d24, i8* %v4_15d24, align 1
  %v0_15d28 = load i32, i32* %r3.global-to-local, align 4
  %v1_15d28 = trunc i32 %v0_15d28 to i8
  %v2_15d28 = load i32, i32* @r4, align 4
  %v3_15d28 = add i32 %v2_15d28, 9
  %v4_15d28 = inttoptr i32 %v3_15d28 to i8*
  store i8 %v1_15d28, i8* %v4_15d28, align 1
  %v0_15d2c = load i32, i32* @r4, align 4
  %v1_15d2c = add i32 %v0_15d2c, 8
  %v2_15d2c = inttoptr i32 %v1_15d2c to i8*
  %v3_15d2c = load i8, i8* %v2_15d2c, align 1
  %v4_15d2c = zext i8 %v3_15d2c to i32
  store i32 %v4_15d2c, i32* %r2.global-to-local, align 4
  %v0_15d30 = load i32, i32* @r5, align 4
  %v1_15d30 = add i32 %v0_15d30, 1
  %v2_15d30 = inttoptr i32 %v1_15d30 to i8*
  %v3_15d30 = load i8, i8* %v2_15d30, align 1
  %v4_15d30 = zext i8 %v3_15d30 to i32
  store i32 %v4_15d30, i32* %r3.global-to-local, align 4
  %v4_15d34 = mul nuw nsw i32 %v4_15d30, 256
  %v5_15d34 = or i32 %v4_15d34, %v4_15d2c
  %v1_15d38 = add nsw i32 %v5_15d34, -19
  store i32 %v1_15d38, i32* @r2, align 4
  %v3_15d3c = call i32 @function_14860(i32 %v1_15d74, i32 %v1_15d70, i32 %v1_15d38)
  %v0_15d40 = load i32, i32* @r4, align 4
  %v1_15d40 = add i32 %v0_15d40, 8
  %v2_15d40 = inttoptr i32 %v1_15d40 to i8*
  %v3_15d40 = load i8, i8* %v2_15d40, align 1
  %v4_15d40 = zext i8 %v3_15d40 to i32
  store i32 %v4_15d40, i32* %r3.global-to-local, align 4
  %v0_15d44 = load i32, i32* @r5, align 4
  %v1_15d44 = add i32 %v0_15d44, 1
  %v2_15d44 = inttoptr i32 %v1_15d44 to i8*
  %v3_15d44 = load i8, i8* %v2_15d44, align 1
  %v4_15d44 = zext i8 %v3_15d44 to i32
  store i32 %v0_15d40, i32* @r0, align 4
  %v4_15d4c = mul nuw nsw i32 %v4_15d44, 256
  %v5_15d4c = or i32 %v4_15d4c, %v4_15d40
  store i32 %v5_15d4c, i32* @r2, align 4
  store i32 %v0_15d40, i32* @r1, align 4
  %v3_15d54 = call i32 @function_14860(i32 %v0_15d40, i32 %v0_15d40, i32 %v5_15d4c)
  %v0_15d58 = load i32, i32* @r4, align 4
  %v1_15d58 = add i32 %v0_15d58, 8
  %v2_15d58 = inttoptr i32 %v1_15d58 to i8*
  %v3_15d58 = load i8, i8* %v2_15d58, align 1
  %v4_15d58 = zext i8 %v3_15d58 to i32
  store i32 %v4_15d58, i32* %r3.global-to-local, align 4
  %v0_15d5c = load i32, i32* @r5, align 4
  %v1_15d5c = add i32 %v0_15d5c, 1
  %v2_15d5c = inttoptr i32 %v1_15d5c to i8*
  %v3_15d5c = load i8, i8* %v2_15d5c, align 1
  %v4_15d5c = zext i8 %v3_15d5c to i32
  store i32 %v4_15d5c, i32* @r2, align 4
  %v4_15d60 = mul nuw nsw i32 %v4_15d5c, 256
  %v5_15d60 = or i32 %v4_15d60, %v4_15d58
  store i32 %v5_15d60, i32* %r3.global-to-local, align 4
  %v2_15d64 = add i32 %v5_15d60, %v0_15d58
  store i32 %v2_15d64, i32* @r4, align 4
  %v1_15d68.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15d68

dec_label_pc_15d68:                               ; preds = %dec_label_pc_15d68.preheader, %dec_label_pc_15d0c
  %v1_15d68 = phi i32 [ %v7_15d00, %dec_label_pc_15d68.preheader ], [ %v1_15d68.pre, %dec_label_pc_15d0c ]
  %v2_15d1c = phi i32 [ %v5_15d00, %dec_label_pc_15d68.preheader ], [ %v2_15d64, %dec_label_pc_15d0c ]
  %v3_15d68 = icmp ult i32 %v2_15d1c, %v1_15d68
  %v1_15d6c = add i32 %v2_15d1c, 8
  store i32 %v1_15d6c, i32* @r5, align 4
  %v1_15d70 = add i32 %v2_15d1c, 19
  store i32 %v1_15d70, i32* @r1, align 4
  %v1_15d74 = add i32 %v2_15d1c, 11
  store i32 %v1_15d74, i32* @r0, align 4
  br i1 %v3_15d68, label %dec_label_pc_15d0c, label %dec_label_pc_15d7c.loopexit

dec_label_pc_15d7c.loopexit:                      ; preds = %dec_label_pc_15d68
  %v0_15d7c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15d7c

dec_label_pc_15d7c:                               ; preds = %dec_label_pc_15cf0, %dec_label_pc_15d7c.loopexit
  %v0_15d7c = phi i32 [ %v0_15d7c.pre, %dec_label_pc_15d7c.loopexit ], [ %v0_15cf8, %dec_label_pc_15cf0 ]
  store i32 %v6_15cf0, i32* @r5, align 4
  ret i32 %v0_15d7c

; uselistorder directives
  uselistorder i32 %v1_15d74, { 1, 0 }
  uselistorder i32 %v1_15d70, { 1, 0 }
  uselistorder i32 %v1_15d6c, { 2, 1, 0 }
  uselistorder i32 %v2_15d1c, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %v0_15d40, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v3_15d0c, { 1, 0, 2 }
  uselistorder i32 %v5_15d00, { 1, 0 }
  uselistorder i32 %v0_15cf8, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_14860, { 7, 6, 5, 8, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_15d7c, { 1, 0 }
  uselistorder label %dec_label_pc_15d68, { 1, 0 }
}

define i32 @function_15d84() local_unnamed_addr {
dec_label_pc_15d84:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_15d88 = load i32, i32* @r4, align 4
  %v9_15d88 = load i32, i32* @r6, align 4
  %v0_15d8c = load i32, i32* @r2, align 4
  %v1_15d8c = add i32 %v0_15d8c, 6
  %v2_15d94 = ptrtoint i32* %stack_var_-60 to i32
  %v1_15d98 = and i32 %v1_15d8c, -4
  store i32 %v1_15d98, i32* %r3.global-to-local, align 4
  %v2_15d9c = sub i32 %v2_15d94, %v1_15d98
  %v0_15da0 = load i32, i32* @r1, align 4
  store i32 %v0_15da0, i32* %r8.global-to-local, align 4
  store i32 %v0_15d8c, i32* %stack_var_-60, align 4
  store i32 %v2_15d9c, i32* %sl.global-to-local, align 4
  %v0_15dac = load i32, i32* @r0, align 4
  %v1_15db0 = inttoptr i32 %v2_15d9c to %linux_dirent64*
  store i32 %v2_15d9c, i32* %r1.global-to-local, align 4
  %v5_15db4 = call i32 @getdents64(i32 %v0_15dac, %linux_dirent64* %v1_15db0, i32 %v0_15d8c)
  store i32 %v5_15db4, i32* @r6, align 4
  %tmp = icmp ult i32 %v5_15db4, -4095
  br i1 %tmp, label %dec_label_pc_15dd8, label %dec_label_pc_15dc4

dec_label_pc_15dc4:                               ; preds = %dec_label_pc_15d84
  %v0_15dc4 = call i32 @function_14808()
  %v0_15dc8 = load i32, i32* @r6, align 4
  %v1_15dc8 = sub i32 0, %v0_15dc8
  store i32 %v1_15dc8, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_15dd0 = inttoptr i32 %v0_15dc4 to i32*
  store i32 %v1_15dc8, i32* %v2_15dd0, align 4
  %v0_15de0.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15de0

dec_label_pc_15dd8:                               ; preds = %dec_label_pc_15d84
  br i1 false, label %dec_label_pc_15de0, label %dec_label_pc_15de8

dec_label_pc_15de0:                               ; preds = %dec_label_pc_15dd8, %dec_label_pc_15dc4
  %v0_15de0 = phi i32 [ -1, %dec_label_pc_15dd8 ], [ %v0_15de0.pre, %dec_label_pc_15dc4 ]
  store i32 %v0_15de0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15edc

dec_label_pc_15de8:                               ; preds = %dec_label_pc_15dd8
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_15df0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_15df0, i32* @r5, align 4
  %v0_15df4 = load i32, i32* @sp, align 4
  store i32 %v0_15df4, i32* @r4, align 4
  br label %dec_label_pc_15eb8

dec_label_pc_15e04:                               ; preds = %dec_label_pc_15eb8
  %v2_15ed0 = add i32 %v3_15ebc, %v0_15ed0
  %v1_15e04 = add i32 %v0_15e08, 17
  %v2_15e04 = inttoptr i32 %v1_15e04 to i8*
  %v3_15e04 = load i8, i8* %v2_15e04, align 1
  %v4_15e04 = zext i8 %v3_15e04 to i32
  %v2_15e08 = inttoptr i32 %v1_15ec4 to i8*
  %v3_15e08 = load i8, i8* %v2_15e08, align 1
  %v4_15e08 = zext i8 %v3_15e08 to i32
  %v4_15e0c = mul nuw nsw i32 %v4_15e04, 256
  %v5_15e0c = or i32 %v4_15e08, %v4_15e0c
  %v1_15e10 = add nuw nsw i32 %v5_15e0c, 3
  %v1_15e14 = and i32 %v1_15e10, 131068
  store i32 %v1_15e14, i32* %r3.global-to-local, align 4
  %v2_15e18 = add i32 %v1_15e14, %v2_15e58
  store i32 %v2_15e18, i32* %sb.global-to-local, align 4
  %v9_15e1c = icmp eq i32 %v2_15e18, %v2_15ed0
  %v1_15e20 = and i32 %v1_15e10, 128
  %v2_15e24 = icmp eq i32 %v1_15e20, 0
  %v3_15e24 = or i1 %v9_15e1c, %v2_15e24
  br i1 %v3_15e24, label %dec_label_pc_15e58, label %dec_label_pc_15e28

dec_label_pc_15e28:                               ; preds = %dec_label_pc_15e04
  store i32 %stack_var_-52.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_15e38 = call i32 @function_15f98(i32 %v0_15dac, i32 %stack_var_-52.0, i32 %stack_var_-48.0, i32 0)
  %v0_15e3c = load i32, i32* @r5, align 4
  %v1_15e3c = load i32, i32* %r8.global-to-local, align 4
  %v9_15e3c = icmp eq i32 %v0_15e3c, %v1_15e3c
  br i1 %v9_15e3c, label %dec_label_pc_15e44, label %dec_label_pc_15ed8

dec_label_pc_15e44:                               ; preds = %dec_label_pc_15e28
  %v0_15e44 = call i32 @function_14808()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_15e50 = inttoptr i32 %v0_15e44 to i32*
  store i32 22, i32* %v2_15e50, align 4
  %v0_15edc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15edc

dec_label_pc_15e58:                               ; preds = %dec_label_pc_15e04
  %v3_15e2011 = udiv i32 %v1_15e10, 256
  %v1_15e58 = trunc i32 %v3_15e2011 to i8
  %v3_15e58 = add i32 %v2_15e58, 17
  %v4_15e58 = inttoptr i32 %v3_15e58 to i8*
  store i8 %v1_15e58, i8* %v4_15e58, align 1
  %v0_15e5c = load i32, i32* %r3.global-to-local, align 4
  %v1_15e5c = trunc i32 %v0_15e5c to i8
  %v2_15e5c = load i32, i32* @r5, align 4
  %v3_15e5c = add i32 %v2_15e5c, 16
  %v4_15e5c = inttoptr i32 %v3_15e5c to i8*
  store i8 %v1_15e5c, i8* %v4_15e5c, align 1
  %v0_15e60 = load i32, i32* @r4, align 4
  %v1_15e60 = add i32 %v0_15e60, 8
  %v1_15e64 = inttoptr i32 %v1_15e60 to i32*
  %v2_15e64 = load i32, i32* %v1_15e64, align 4
  %v3_15e64 = add i32 %v0_15e60, 12
  %v4_15e64 = inttoptr i32 %v3_15e64 to i32*
  %v5_15e64 = load i32, i32* %v4_15e64, align 4
  store i32 %v5_15e64, i32* %r3.global-to-local, align 4
  %v1_15e70 = inttoptr i32 %v0_15e60 to i32*
  %v2_15e70 = load i32, i32* %v1_15e70, align 4
  %v3_15e70 = add i32 %v0_15e60, 4
  %v4_15e70 = inttoptr i32 %v3_15e70 to i32*
  %v5_15e70 = load i32, i32* %v4_15e70, align 4
  store i32 %v5_15e70, i32* %r3.global-to-local, align 4
  %v0_15e74 = load i32, i32* @r5, align 4
  %v1_15e74 = inttoptr i32 %v0_15e74 to i32*
  store i32 %v2_15e70, i32* %v1_15e74, align 4
  %v3_15e74 = add i32 %v0_15e74, 4
  %v4_15e74 = inttoptr i32 %v3_15e74 to i32*
  %v5_15e74 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_15e74, i32* %v4_15e74, align 4
  %v0_15e78 = load i32, i32* @r4, align 4
  %v1_15e78 = add i32 %v0_15e78, 8
  %v1_15e7c = inttoptr i32 %v1_15e78 to i32*
  %v2_15e7c = load i32, i32* %v1_15e7c, align 4
  %v3_15e7c = add i32 %v0_15e78, 12
  %v4_15e7c = inttoptr i32 %v3_15e7c to i32*
  %v5_15e7c = load i32, i32* %v4_15e7c, align 4
  store i32 %v5_15e7c, i32* %r3.global-to-local, align 4
  %v1_15e80 = load i32, i32* @r5, align 4
  %v2_15e80 = add i32 %v1_15e80, 8
  %v3_15e80 = inttoptr i32 %v2_15e80 to i32*
  store i32 %v2_15e7c, i32* %v3_15e80, align 4
  %v0_15e84 = load i32, i32* %r3.global-to-local, align 4
  %v1_15e84 = load i32, i32* @r5, align 4
  %v2_15e84 = add i32 %v1_15e84, 12
  %v3_15e84 = inttoptr i32 %v2_15e84 to i32*
  store i32 %v0_15e84, i32* %v3_15e84, align 4
  %v0_15e88 = load i32, i32* @r4, align 4
  %v1_15e88 = add i32 %v0_15e88, 18
  %v2_15e88 = inttoptr i32 %v1_15e88 to i8*
  %v3_15e88 = load i8, i8* %v2_15e88, align 1
  %v4_15e88 = zext i8 %v3_15e88 to i32
  store i32 %v4_15e88, i32* %r3.global-to-local, align 4
  %v2_15e8c = load i32, i32* @r5, align 4
  %v3_15e8c = add i32 %v2_15e8c, 18
  %v4_15e8c = inttoptr i32 %v3_15e8c to i8*
  store i8 %v3_15e88, i8* %v4_15e8c, align 1
  %v0_15e90 = load i32, i32* @r4, align 4
  %v1_15e90 = add i32 %v0_15e90, 16
  %v2_15e90 = inttoptr i32 %v1_15e90 to i8*
  %v3_15e90 = load i8, i8* %v2_15e90, align 1
  %v4_15e90 = zext i8 %v3_15e90 to i32
  %v0_15e94 = load i32, i32* %r7.global-to-local, align 4
  %v1_15e94 = add i32 %v0_15e94, 1
  %v2_15e94 = inttoptr i32 %v1_15e94 to i8*
  %v3_15e94 = load i8, i8* %v2_15e94, align 1
  %v4_15e94 = zext i8 %v3_15e94 to i32
  store i32 %v4_15e94, i32* %r3.global-to-local, align 4
  %v4_15e98 = mul nuw nsw i32 %v4_15e94, 256
  %v5_15e98 = or i32 %v4_15e98, %v4_15e90
  %v1_15e9c = add nsw i32 %v5_15e98, -19
  store i32 %v1_15e9c, i32* @r2, align 4
  %v3_15ea0 = call i32 @function_14850(i32 %v1_15ec8, i32 %v1_15ecc, i32 %v1_15e9c)
  %v0_15ea4 = load i32, i32* @r4, align 4
  %v1_15ea4 = add i32 %v0_15ea4, 16
  %v2_15ea4 = inttoptr i32 %v1_15ea4 to i8*
  %v3_15ea4 = load i8, i8* %v2_15ea4, align 1
  %v4_15ea4 = zext i8 %v3_15ea4 to i32
  store i32 %v4_15ea4, i32* %r3.global-to-local, align 4
  %v0_15ea8 = load i32, i32* %r7.global-to-local, align 4
  %v1_15ea8 = add i32 %v0_15ea8, 1
  %v2_15ea8 = inttoptr i32 %v1_15ea8 to i8*
  %v3_15ea8 = load i8, i8* %v2_15ea8, align 1
  %v4_15ea8 = zext i8 %v3_15ea8 to i32
  %v4_15eac = mul nuw nsw i32 %v4_15ea8, 256
  %v5_15eac = or i32 %v4_15eac, %v4_15ea4
  store i32 %v5_15eac, i32* %r3.global-to-local, align 4
  %v2_15eb0 = add i32 %v5_15eac, %v0_15ea4
  store i32 %v2_15eb0, i32* @r4, align 4
  %v0_15eb4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_15eb4, i32* @r5, align 4
  %v1_15eb8.pre = load i32, i32* @r6, align 4
  %v0_15ed0.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_15eb8

dec_label_pc_15eb8:                               ; preds = %dec_label_pc_15de8, %dec_label_pc_15e58
  %stack_var_-52.0 = phi i32 [ -1, %dec_label_pc_15de8 ], [ %v2_15e64, %dec_label_pc_15e58 ]
  %v0_15ed0 = phi i32 [ %v0_15df0, %dec_label_pc_15de8 ], [ %v0_15ed0.pre, %dec_label_pc_15e58 ]
  %v2_15e58 = phi i32 [ %v0_15df0, %dec_label_pc_15de8 ], [ %v0_15eb4, %dec_label_pc_15e58 ]
  %v0_15e08 = phi i32 [ %v0_15df4, %dec_label_pc_15de8 ], [ %v2_15eb0, %dec_label_pc_15e58 ]
  %v1_15eb8 = phi i32 [ %v5_15db4, %dec_label_pc_15de8 ], [ %v1_15eb8.pre, %dec_label_pc_15e58 ]
  %stack_var_-48.0 = phi i32 [ -1, %dec_label_pc_15de8 ], [ %v5_15e64, %dec_label_pc_15e58 ]
  %v0_15eb8 = load i32, i32* %sl.global-to-local, align 4
  %v2_15eb8 = add i32 %v0_15eb8, %v1_15eb8
  store i32 %v2_15eb8, i32* %r3.global-to-local, align 4
  %v3_15ebc = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_15ebc, i32* @r2, align 4
  %v3_15ec0 = icmp ult i32 %v0_15e08, %v2_15eb8
  %v1_15ec4 = add i32 %v0_15e08, 16
  store i32 %v1_15ec4, i32* %r7.global-to-local, align 4
  %v1_15ec8 = add i32 %v2_15e58, 19
  store i32 %v1_15ec8, i32* @r0, align 4
  %v1_15ecc = add i32 %v0_15e08, 19
  store i32 %v1_15ecc, i32* @r1, align 4
  br i1 %v3_15ec0, label %dec_label_pc_15e04, label %dec_label_pc_15ed8

dec_label_pc_15ed8:                               ; preds = %dec_label_pc_15eb8, %dec_label_pc_15e28
  %v1_15ed8 = phi i32 [ %v0_15e3c, %dec_label_pc_15e28 ], [ %v2_15e58, %dec_label_pc_15eb8 ]
  %v0_15ed8 = phi i32 [ %v1_15e3c, %dec_label_pc_15e28 ], [ %v0_15ed0, %dec_label_pc_15eb8 ]
  %v2_15ed8 = sub i32 %v1_15ed8, %v0_15ed8
  store i32 %v2_15ed8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15edc

dec_label_pc_15edc:                               ; preds = %dec_label_pc_15e44, %dec_label_pc_15de0, %dec_label_pc_15ed8
  %v0_15edc = phi i32 [ %v0_15edc.pre, %dec_label_pc_15e44 ], [ %v0_15de0, %dec_label_pc_15de0 ], [ %v2_15ed8, %dec_label_pc_15ed8 ]
  store i32 %v3_15d88, i32* @r4, align 4
  store i32 %v9_15d88, i32* %r6.global-to-local, align 4
  ret i32 %v0_15edc

; uselistorder directives
  uselistorder i32 %v1_15ecc, { 1, 0 }
  uselistorder i32 %v1_15ec8, { 1, 0 }
  uselistorder i32 %v1_15ec4, { 1, 0 }
  uselistorder i32 %v3_15ebc, { 1, 0 }
  uselistorder i32 %v0_15e08, { 2, 1, 3, 0 }
  uselistorder i32 %v2_15e58, { 0, 3, 1, 2 }
  uselistorder i32 %v0_15e60, { 1, 0, 2, 3 }
  uselistorder i32 %v0_15df0, { 1, 0, 2 }
  uselistorder i32 %v5_15db4, { 1, 0, 2 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_14850, { 6, 1, 0, 3, 8, 7, 5, 4, 2 }
  uselistorder i32 128, { 12, 13, 37, 14, 38, 26, 17, 18, 19, 33, 2, 34, 20, 21, 22, 23, 24, 29, 3, 27, 4, 28, 5, 15, 16, 30, 31, 32, 7, 0, 1, 8, 9, 10, 35, 6, 36, 25, 11 }
  uselistorder i32* @sp, { 4, 5, 1, 6, 0, 7, 2, 8, 3 }
  uselistorder i32* @r6, { 3, 118, 119, 120, 395, 396, 355, 356, 357, 358, 359, 360, 361, 362, 382, 397, 398, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 363, 364, 79, 78, 80, 81, 82, 83, 84, 365, 366, 367, 368, 369, 370, 371, 372, 373, 379, 380, 381, 374, 375, 376, 377, 378, 4, 98, 2, 99, 100, 1, 101, 102, 315, 316, 317, 0, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 103, 104, 105, 106, 5, 107, 108, 109, 110, 111, 15, 112, 113, 114, 115, 116, 117, 139, 140, 141, 142, 14, 143, 144, 145, 6, 146, 147, 148, 7, 149, 8, 150, 9, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 383, 386, 384, 385, 387, 388, 16, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 10, 409, 410, 411, 412, 413, 414, 416, 11, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 12, 13, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463 }
  uselistorder label %dec_label_pc_15edc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15eb8, { 1, 0 }
}

define i32 @function_15ee8() local_unnamed_addr {
dec_label_pc_15ee8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15ee8 = load i32, i32* @r4, align 4
  store i32 %v3_15ee8, i32* %stack_var_-8, align 4
  %v0_15ef0 = load i32, i32* @r0, align 4
  store i32 %v0_15ef0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15ef0, -4095
  br i1 %tmp, label %dec_label_pc_15f0c, label %dec_label_pc_15efc

dec_label_pc_15efc:                               ; preds = %dec_label_pc_15ee8
  %v0_15efc = call i32 @function_14808()
  %v0_15f00 = load i32, i32* %r4.global-to-local, align 4
  %v1_15f00 = sub i32 0, %v0_15f00
  %v2_15f04 = inttoptr i32 %v0_15efc to i32*
  store i32 %v1_15f00, i32* %v2_15f04, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15f10.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15f0c

dec_label_pc_15f0c:                               ; preds = %dec_label_pc_15ee8, %dec_label_pc_15efc
  %v2_15f10 = phi i32 [ %v3_15ee8, %dec_label_pc_15ee8 ], [ %v2_15f10.pre, %dec_label_pc_15efc ]
  %v0_15f0c = phi i32 [ %v0_15ef0, %dec_label_pc_15ee8 ], [ -1, %dec_label_pc_15efc ]
  store i32 %v2_15f10, i32* @r4, align 4
  ret i32 %v0_15f0c

; uselistorder directives
  uselistorder i32 %v0_15ef0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15f0c, { 1, 0 }
}

define i32 @function_15f14() local_unnamed_addr {
dec_label_pc_15f14:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15f14 = load i32, i32* @r4, align 4
  store i32 %v3_15f14, i32* %stack_var_-8, align 4
  %v0_15f1c = load i32, i32* @r0, align 4
  store i32 %v0_15f1c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15f1c, -4095
  br i1 %tmp, label %dec_label_pc_15f38, label %dec_label_pc_15f28

dec_label_pc_15f28:                               ; preds = %dec_label_pc_15f14
  %v0_15f28 = call i32 @function_14808()
  %v0_15f2c = load i32, i32* %r4.global-to-local, align 4
  %v1_15f2c = sub i32 0, %v0_15f2c
  %v2_15f30 = inttoptr i32 %v0_15f28 to i32*
  store i32 %v1_15f2c, i32* %v2_15f30, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15f3c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15f38

dec_label_pc_15f38:                               ; preds = %dec_label_pc_15f14, %dec_label_pc_15f28
  %v2_15f3c = phi i32 [ %v3_15f14, %dec_label_pc_15f14 ], [ %v2_15f3c.pre, %dec_label_pc_15f28 ]
  %v0_15f38 = phi i32 [ %v0_15f1c, %dec_label_pc_15f14 ], [ -1, %dec_label_pc_15f28 ]
  store i32 %v2_15f3c, i32* @r4, align 4
  ret i32 %v0_15f38

; uselistorder directives
  uselistorder i32 %v0_15f1c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15f38, { 1, 0 }
}

define i32 @function_15f40(i32 %arg1) local_unnamed_addr {
dec_label_pc_15f40:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15f40 = load i32, i32* @r4, align 4
  store i32 %v3_15f40, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_15f64, label %dec_label_pc_15f54

dec_label_pc_15f54:                               ; preds = %dec_label_pc_15f40
  %v0_15f54 = call i32 @function_14808()
  %v0_15f58 = load i32, i32* %r4.global-to-local, align 4
  %v1_15f58 = sub i32 0, %v0_15f58
  %v2_15f5c = inttoptr i32 %v0_15f54 to i32*
  store i32 %v1_15f58, i32* %v2_15f5c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15f68.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15f64

dec_label_pc_15f64:                               ; preds = %dec_label_pc_15f40, %dec_label_pc_15f54
  %v2_15f68 = phi i32 [ %v3_15f40, %dec_label_pc_15f40 ], [ %v2_15f68.pre, %dec_label_pc_15f54 ]
  %v0_15f64 = phi i32 [ %arg1, %dec_label_pc_15f40 ], [ -1, %dec_label_pc_15f54 ]
  store i32 %v2_15f68, i32* %r4.global-to-local, align 4
  ret i32 %v0_15f64

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15f64, { 1, 0 }
}

define i32 @function_15f6c() local_unnamed_addr {
dec_label_pc_15f6c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15f6c = load i32, i32* @r4, align 4
  store i32 %v3_15f6c, i32* %stack_var_-8, align 4
  %v0_15f74 = load i32, i32* @r0, align 4
  store i32 %v0_15f74, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15f74, -4095
  br i1 %tmp, label %dec_label_pc_15f90, label %dec_label_pc_15f80

dec_label_pc_15f80:                               ; preds = %dec_label_pc_15f6c
  %v0_15f80 = call i32 @function_14808()
  %v0_15f84 = load i32, i32* %r4.global-to-local, align 4
  %v1_15f84 = sub i32 0, %v0_15f84
  %v2_15f88 = inttoptr i32 %v0_15f80 to i32*
  store i32 %v1_15f84, i32* %v2_15f88, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15f94.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15f90

dec_label_pc_15f90:                               ; preds = %dec_label_pc_15f6c, %dec_label_pc_15f80
  %v2_15f94 = phi i32 [ %v3_15f6c, %dec_label_pc_15f6c ], [ %v2_15f94.pre, %dec_label_pc_15f80 ]
  %v0_15f90 = phi i32 [ %v0_15f74, %dec_label_pc_15f6c ], [ -1, %dec_label_pc_15f80 ]
  store i32 %v2_15f94, i32* %r4.global-to-local, align 4
  ret i32 %v0_15f90

; uselistorder directives
  uselistorder i32 %v0_15f74, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15f90, { 1, 0 }
}

define i32 @function_15f98(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15f98:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_15fdc, label %dec_label_pc_15fc8

dec_label_pc_15fc8:                               ; preds = %dec_label_pc_15f98
  %v0_15fc8 = call i32 @function_14808()
  %v0_15fcc = load i32, i32* %r4.global-to-local, align 4
  %v1_15fcc = sub i32 0, %v0_15fcc
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15fd4 = inttoptr i32 %v0_15fc8 to i32*
  store i32 %v1_15fcc, i32* %v2_15fd4, align 4
  %v0_15fe4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15fe4

dec_label_pc_15fdc:                               ; preds = %dec_label_pc_15f98
  %v2_15fdc = icmp eq i32 %arg1, 0
  br i1 %v2_15fdc, label %dec_label_pc_15ff0, label %dec_label_pc_15fe4

dec_label_pc_15fe4:                               ; preds = %dec_label_pc_15fdc, %dec_label_pc_15fc8
  %v0_15fe4 = phi i32 [ %arg1, %dec_label_pc_15fdc ], [ %v0_15fe4.pre, %dec_label_pc_15fc8 ]
  br label %dec_label_pc_15ff4

dec_label_pc_15ff0:                               ; preds = %dec_label_pc_15fdc
  br label %dec_label_pc_15ff4

dec_label_pc_15ff4:                               ; preds = %dec_label_pc_15fe4, %dec_label_pc_15ff0
  %v14_15ff8 = phi i32 [ %v0_15fe4, %dec_label_pc_15fe4 ], [ %tmp9, %dec_label_pc_15ff0 ]
  ret i32 %v14_15ff8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_15ff4, { 1, 0 }
}

define i32 @function_15ffc(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15ffc:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_15ffc = load i32, i32* @r4, align 4
  store i32 %v3_15ffc, i32* %stack_var_-8, align 4
  %v6_16000 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_16000, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_16000, -4095
  br i1 %tmp6, label %dec_label_pc_16020, label %dec_label_pc_16010

dec_label_pc_16010:                               ; preds = %dec_label_pc_15ffc
  %v0_16010 = call i32 @function_14808()
  %v0_16014 = load i32, i32* %r4.global-to-local, align 4
  %v1_16014 = sub i32 0, %v0_16014
  %v2_16018 = inttoptr i32 %v0_16010 to i32*
  store i32 %v1_16014, i32* %v2_16018, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_16020

dec_label_pc_16020:                               ; preds = %dec_label_pc_15ffc, %dec_label_pc_16010
  %v0_16020 = phi i32 [ %v6_16000, %dec_label_pc_15ffc ], [ -1, %dec_label_pc_16010 ]
  %v2_16024 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_16024, i32* %r4.global-to-local, align 4
  ret i32 %v0_16020

; uselistorder directives
  uselistorder i32 %v6_16000, { 1, 0, 2 }
  uselistorder label %dec_label_pc_16020, { 1, 0 }
}

define i32 @function_16028(i32 %arg1) local_unnamed_addr {
dec_label_pc_16028:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_16028 = load i32, i32* @r4, align 4
  store i32 %v3_16028, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1f854.697 to i32), i32* %r4.global-to-local, align 4
  %v2_16030 = load i32, i32* @global_var_1f854.697, align 4
  %v2_16034 = icmp eq i32 %v2_16030, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_16034, label %dec_label_pc_16044, label %dec_label_pc_16050

dec_label_pc_16044:                               ; preds = %dec_label_pc_16028
  %v2_16044 = call i32 @function_16a30(i32* null)
  %v1_16048 = icmp slt i32 %v2_16044, 0
  br i1 %v1_16048, label %dec_label_pc_16070, label %dec_label_pc_16050thread-pre-split

dec_label_pc_16050thread-pre-split:               ; preds = %dec_label_pc_16044
  %v0_16054.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_16050.pre = load i32, i32* @global_var_1f854.697, align 4
  br label %dec_label_pc_16050

dec_label_pc_16050:                               ; preds = %dec_label_pc_16050thread-pre-split, %dec_label_pc_16028
  %v2_16050 = phi i32 [ %v2_16050.pre, %dec_label_pc_16050thread-pre-split ], [ %v2_16030, %dec_label_pc_16028 ]
  %v1_1605c = phi i32 [ %v0_16054.pr, %dec_label_pc_16050thread-pre-split ], [ %arg1, %dec_label_pc_16028 ]
  %v2_16054 = icmp eq i32 %v1_1605c, 0
  store i32 %v2_16050, i32* %r4.global-to-local, align 4
  br i1 %v2_16054, label %dec_label_pc_16074, label %dec_label_pc_16064

dec_label_pc_16064:                               ; preds = %dec_label_pc_16050
  %v2_1605c = add i32 %v1_1605c, %v2_16050
  %v1_16064 = inttoptr i32 %v2_1605c to i32*
  %v2_16064 = call i32 @function_16a30(i32* %v1_16064)
  %v1_16068 = icmp slt i32 %v2_16064, 0
  br i1 %v1_16068, label %dec_label_pc_16070, label %dec_label_pc_16064.dec_label_pc_16074_crit_edge

dec_label_pc_16064.dec_label_pc_16074_crit_edge:  ; preds = %dec_label_pc_16064
  %v0_16074.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_16074

dec_label_pc_16070:                               ; preds = %dec_label_pc_16064, %dec_label_pc_16044
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_16074

dec_label_pc_16074:                               ; preds = %dec_label_pc_16064.dec_label_pc_16074_crit_edge, %dec_label_pc_16050, %dec_label_pc_16070
  %v0_16074 = phi i32 [ %v0_16074.pre, %dec_label_pc_16064.dec_label_pc_16074_crit_edge ], [ %v2_16050, %dec_label_pc_16050 ], [ -1, %dec_label_pc_16070 ]
  %v2_16078 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16078, i32* @r4, align 4
  ret i32 %v0_16074

; uselistorder directives
  uselistorder i32 %v2_16050, { 1, 0, 2 }
  uselistorder i32* null, { 0, 4, 8, 41, 42, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 22, 2, 23, 3, 24, 28, 27, 26, 25, 40, 7, 29, 30, 31, 38, 32, 33, 34, 35, 36, 37, 6, 39 }
  uselistorder label %dec_label_pc_16074, { 2, 0, 1 }
}

define i32 @function_16080(%tms* %arg1) local_unnamed_addr {
dec_label_pc_16080:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_16080 = load i32, i32* @r4, align 4
  store i32 %v3_16080, i32* %stack_var_-8, align 4
  %v3_16084 = call i32 @times(%tms* %arg1)
  store i32 %v3_16084, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_16084, -4095
  br i1 %tmp, label %dec_label_pc_160a4, label %dec_label_pc_16094

dec_label_pc_16094:                               ; preds = %dec_label_pc_16080
  %v0_16094 = call i32 @function_14808()
  %v0_16098 = load i32, i32* %r4.global-to-local, align 4
  %v1_16098 = sub i32 0, %v0_16098
  %v2_1609c = inttoptr i32 %v0_16094 to i32*
  store i32 %v1_16098, i32* %v2_1609c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_160a4

dec_label_pc_160a4:                               ; preds = %dec_label_pc_16080, %dec_label_pc_16094
  %v0_160a4 = phi i32 [ %v3_16084, %dec_label_pc_16080 ], [ -1, %dec_label_pc_16094 ]
  %v2_160a8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_160a8, i32* %r4.global-to-local, align 4
  ret i32 %v0_160a4

; uselistorder directives
  uselistorder i32 %v3_16084, { 1, 0, 2 }
  uselistorder label %dec_label_pc_160a4, { 1, 0 }
}

define i32 @function_160ac(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_160ac:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 96, i32* @r2, align 4
  %v2_160c8 = inttoptr i32 %arg2 to i8*
  %v3_160c8 = call i32 @function_14870(i8* %v2_160c8, i32 0)
  %v1_160cc = add i32 %tmp, 1
  %v2_160cc = inttoptr i32 %v1_160cc to i8*
  %v3_160cc = load i8, i8* %v2_160cc, align 1
  %v4_160cc = zext i8 %v3_160cc to i32
  %v1_160d0 = add i32 %tmp, 5
  %v2_160d0 = inttoptr i32 %v1_160d0 to i8*
  %v3_160d0 = load i8, i8* %v2_160d0, align 1
  %v4_160d0 = zext i8 %v3_160d0 to i32
  %v2_160d4 = load i8, i8* %arg1, align 1
  %v3_160d4 = zext i8 %v2_160d4 to i32
  %v1_160d8 = add i32 %tmp, 4
  %v2_160d8 = inttoptr i32 %v1_160d8 to i8*
  %v3_160d8 = load i8, i8* %v2_160d8, align 1
  %v4_160d8 = zext i8 %v3_160d8 to i32
  %v1_160dc = add i32 %tmp, 2
  %v2_160dc = inttoptr i32 %v1_160dc to i8*
  %v3_160dc = load i8, i8* %v2_160dc, align 1
  %v4_160dc = zext i8 %v3_160dc to i32
  %v1_160e0 = add i32 %tmp, 6
  %v2_160e0 = inttoptr i32 %v1_160e0 to i8*
  %v3_160e0 = load i8, i8* %v2_160e0, align 1
  %v4_160e0 = zext i8 %v3_160e0 to i32
  %v1_160e4 = add i32 %tmp, 3
  %v2_160e4 = inttoptr i32 %v1_160e4 to i8*
  %v3_160e4 = load i8, i8* %v2_160e4, align 1
  %v4_160e4 = zext i8 %v3_160e4 to i32
  %v4_160e8 = mul nuw nsw i32 %v4_160cc, 256
  %v5_160e8 = or i32 %v3_160d4, %v4_160e8
  %v4_160ec = mul nuw nsw i32 %v4_160d0, 256
  %v5_160ec = or i32 %v4_160d8, %v4_160ec
  %v1_160f0 = add i32 %tmp, 7
  %v2_160f0 = inttoptr i32 %v1_160f0 to i8*
  %v3_160f0 = load i8, i8* %v2_160f0, align 1
  %v4_160f0 = zext i8 %v3_160f0 to i32
  %v4_160f4 = mul nuw nsw i32 %v4_160dc, 65536
  %v5_160f4 = or i32 %v4_160f4, %v5_160e8
  %v4_160f8 = mul nuw nsw i32 %v4_160e0, 65536
  %v5_160f8 = or i32 %v4_160f8, %v5_160ec
  %v4_160fc = mul nuw i32 %v4_160e4, 16777216
  %v5_160fc = or i32 %v4_160fc, %v5_160f4
  %v4_16100 = mul nuw i32 %v4_160f0, 16777216
  %v5_16100 = or i32 %v4_16100, %v5_160f8
  store i32 %v5_16100, i32* %r3.global-to-local, align 4
  %v0_16104 = load i32, i32* %r7.global-to-local, align 4
  %v1_16104 = inttoptr i32 %v0_16104 to i32*
  store i32 %v5_160fc, i32* %v1_16104, align 4
  %v3_16104 = add i32 %v0_16104, 4
  %v4_16104 = inttoptr i32 %v3_16104 to i32*
  %v5_16104 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_16104, i32* %v4_16104, align 4
  %v0_16108 = load i32, i32* %r4.global-to-local, align 4
  %v1_16108 = add i32 %v0_16108, 89
  %v2_16108 = inttoptr i32 %v1_16108 to i8*
  %v3_16108 = load i8, i8* %v2_16108, align 1
  %v4_16108 = zext i8 %v3_16108 to i32
  %v1_1610c = add i32 %v0_16108, 93
  %v2_1610c = inttoptr i32 %v1_1610c to i8*
  %v3_1610c = load i8, i8* %v2_1610c, align 1
  %v4_1610c = zext i8 %v3_1610c to i32
  %v1_16110 = add i32 %v0_16108, 88
  %v2_16110 = inttoptr i32 %v1_16110 to i8*
  %v3_16110 = load i8, i8* %v2_16110, align 1
  %v4_16110 = zext i8 %v3_16110 to i32
  %v1_16114 = add i32 %v0_16108, 92
  %v2_16114 = inttoptr i32 %v1_16114 to i8*
  %v3_16114 = load i8, i8* %v2_16114, align 1
  %v4_16114 = zext i8 %v3_16114 to i32
  store i32 %v4_16114, i32* %r3.global-to-local, align 4
  %v1_16118 = add i32 %v0_16108, 94
  %v2_16118 = inttoptr i32 %v1_16118 to i8*
  %v3_16118 = load i8, i8* %v2_16118, align 1
  %v4_16118 = zext i8 %v3_16118 to i32
  %v1_1611c = add i32 %v0_16108, 90
  %v2_1611c = inttoptr i32 %v1_1611c to i8*
  %v3_1611c = load i8, i8* %v2_1611c, align 1
  %v4_1611c = zext i8 %v3_1611c to i32
  %v1_16120 = add i32 %v0_16108, 91
  %v2_16120 = inttoptr i32 %v1_16120 to i8*
  %v3_16120 = load i8, i8* %v2_16120, align 1
  %v4_16120 = zext i8 %v3_16120 to i32
  %v4_16124 = mul nuw nsw i32 %v4_16108, 256
  %v5_16124 = or i32 %v4_16110, %v4_16124
  %v4_16128 = mul nuw nsw i32 %v4_1610c, 256
  %v5_16128 = or i32 %v4_16114, %v4_16128
  store i32 %v5_16128, i32* %r3.global-to-local, align 4
  %v1_1612c = add i32 %v0_16108, 95
  %v2_1612c = inttoptr i32 %v1_1612c to i8*
  %v3_1612c = load i8, i8* %v2_1612c, align 1
  %v4_1612c = zext i8 %v3_1612c to i32
  %v4_16130 = mul nuw nsw i32 %v4_16118, 65536
  %v5_16130 = or i32 %v4_16130, %v5_16128
  store i32 %v5_16130, i32* %r3.global-to-local, align 4
  %v4_16134 = mul nuw nsw i32 %v4_1611c, 65536
  %v5_16134 = or i32 %v4_16134, %v5_16124
  %v4_16138 = mul nuw i32 %v4_16120, 16777216
  %v5_16138 = or i32 %v4_16138, %v5_16134
  %v4_1613c = mul nuw i32 %v4_1612c, 16777216
  %v5_1613c = or i32 %v4_1613c, %v5_16130
  store i32 %v5_1613c, i32* %r6.global-to-local, align 4
  %v1_16140 = load i32, i32* %r7.global-to-local, align 4
  %v2_16140 = add i32 %v1_16140, 88
  %v3_16140 = inttoptr i32 %v2_16140 to i32*
  store i32 %v5_16138, i32* %v3_16140, align 4
  %v0_16144 = load i32, i32* %r6.global-to-local, align 4
  %v1_16144 = load i32, i32* %r7.global-to-local, align 4
  %v2_16144 = add i32 %v1_16144, 92
  %v3_16144 = inttoptr i32 %v2_16144 to i32*
  store i32 %v0_16144, i32* %v3_16144, align 4
  %v0_16148 = load i32, i32* %r4.global-to-local, align 4
  %v1_16148 = add i32 %v0_16148, 13
  %v2_16148 = inttoptr i32 %v1_16148 to i8*
  %v3_16148 = load i8, i8* %v2_16148, align 1
  %v4_16148 = zext i8 %v3_16148 to i32
  %v1_1614c = add i32 %v0_16148, 12
  %v2_1614c = inttoptr i32 %v1_1614c to i8*
  %v3_1614c = load i8, i8* %v2_1614c, align 1
  %v4_1614c = zext i8 %v3_1614c to i32
  store i32 %v4_1614c, i32* %r3.global-to-local, align 4
  %v1_16150 = add i32 %v0_16148, 14
  %v2_16150 = inttoptr i32 %v1_16150 to i8*
  %v3_16150 = load i8, i8* %v2_16150, align 1
  %v4_16150 = zext i8 %v3_16150 to i32
  %v4_16154 = mul nuw nsw i32 %v4_16148, 256
  %v5_16154 = or i32 %v4_1614c, %v4_16154
  store i32 %v5_16154, i32* %r3.global-to-local, align 4
  %v1_16158 = add i32 %v0_16148, 15
  %v2_16158 = inttoptr i32 %v1_16158 to i8*
  %v3_16158 = load i8, i8* %v2_16158, align 1
  %v4_16158 = zext i8 %v3_16158 to i32
  %v4_1615c = mul nuw nsw i32 %v4_16150, 65536
  %v5_1615c = or i32 %v4_1615c, %v5_16154
  %v4_16160 = mul nuw i32 %v4_16158, 16777216
  %v5_16160 = or i32 %v5_1615c, %v4_16160
  store i32 %v5_16160, i32* %r3.global-to-local, align 4
  %v1_16164 = load i32, i32* %r7.global-to-local, align 4
  %v2_16164 = add i32 %v1_16164, 12
  %v3_16164 = inttoptr i32 %v2_16164 to i32*
  store i32 %v5_16160, i32* %v3_16164, align 4
  %v0_16168 = load i32, i32* %r4.global-to-local, align 4
  %v1_16168 = add i32 %v0_16168, 17
  %v2_16168 = inttoptr i32 %v1_16168 to i8*
  %v3_16168 = load i8, i8* %v2_16168, align 1
  %v4_16168 = zext i8 %v3_16168 to i32
  %v1_1616c = add i32 %v0_16168, 16
  %v2_1616c = inttoptr i32 %v1_1616c to i8*
  %v3_1616c = load i8, i8* %v2_1616c, align 1
  %v4_1616c = zext i8 %v3_1616c to i32
  store i32 %v4_1616c, i32* %r3.global-to-local, align 4
  %v1_16170 = add i32 %v0_16168, 18
  %v2_16170 = inttoptr i32 %v1_16170 to i8*
  %v3_16170 = load i8, i8* %v2_16170, align 1
  %v4_16170 = zext i8 %v3_16170 to i32
  %v4_16174 = mul nuw nsw i32 %v4_16168, 256
  %v5_16174 = or i32 %v4_1616c, %v4_16174
  store i32 %v5_16174, i32* %r3.global-to-local, align 4
  %v1_16178 = add i32 %v0_16168, 19
  %v2_16178 = inttoptr i32 %v1_16178 to i8*
  %v3_16178 = load i8, i8* %v2_16178, align 1
  %v4_16178 = zext i8 %v3_16178 to i32
  %v4_1617c = mul nuw nsw i32 %v4_16170, 65536
  %v5_1617c = or i32 %v4_1617c, %v5_16174
  %v4_16180 = mul nuw i32 %v4_16178, 16777216
  %v5_16180 = or i32 %v5_1617c, %v4_16180
  store i32 %v5_16180, i32* %r3.global-to-local, align 4
  %v1_16184 = load i32, i32* %r7.global-to-local, align 4
  %v2_16184 = add i32 %v1_16184, 16
  %v3_16184 = inttoptr i32 %v2_16184 to i32*
  store i32 %v5_16180, i32* %v3_16184, align 4
  %v0_16188 = load i32, i32* %r4.global-to-local, align 4
  %v1_16188 = add i32 %v0_16188, 21
  %v2_16188 = inttoptr i32 %v1_16188 to i8*
  %v3_16188 = load i8, i8* %v2_16188, align 1
  %v4_16188 = zext i8 %v3_16188 to i32
  %v1_1618c = add i32 %v0_16188, 20
  %v2_1618c = inttoptr i32 %v1_1618c to i8*
  %v3_1618c = load i8, i8* %v2_1618c, align 1
  %v4_1618c = zext i8 %v3_1618c to i32
  store i32 %v4_1618c, i32* %r3.global-to-local, align 4
  %v1_16190 = add i32 %v0_16188, 22
  %v2_16190 = inttoptr i32 %v1_16190 to i8*
  %v3_16190 = load i8, i8* %v2_16190, align 1
  %v4_16190 = zext i8 %v3_16190 to i32
  %v4_16194 = mul nuw nsw i32 %v4_16188, 256
  %v5_16194 = or i32 %v4_1618c, %v4_16194
  store i32 %v5_16194, i32* %r3.global-to-local, align 4
  %v1_16198 = add i32 %v0_16188, 23
  %v2_16198 = inttoptr i32 %v1_16198 to i8*
  %v3_16198 = load i8, i8* %v2_16198, align 1
  %v4_16198 = zext i8 %v3_16198 to i32
  %v4_1619c = mul nuw nsw i32 %v4_16190, 65536
  %v5_1619c = or i32 %v4_1619c, %v5_16194
  %v4_161a0 = mul nuw i32 %v4_16198, 16777216
  %v5_161a0 = or i32 %v5_1619c, %v4_161a0
  store i32 %v5_161a0, i32* %r3.global-to-local, align 4
  %v1_161a4 = load i32, i32* %r7.global-to-local, align 4
  %v2_161a4 = add i32 %v1_161a4, 20
  %v3_161a4 = inttoptr i32 %v2_161a4 to i32*
  store i32 %v5_161a0, i32* %v3_161a4, align 4
  %v0_161a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_161a8 = add i32 %v0_161a8, 25
  %v2_161a8 = inttoptr i32 %v1_161a8 to i8*
  %v3_161a8 = load i8, i8* %v2_161a8, align 1
  %v4_161a8 = zext i8 %v3_161a8 to i32
  %v1_161ac = add i32 %v0_161a8, 24
  %v2_161ac = inttoptr i32 %v1_161ac to i8*
  %v3_161ac = load i8, i8* %v2_161ac, align 1
  %v4_161ac = zext i8 %v3_161ac to i32
  store i32 %v4_161ac, i32* %r3.global-to-local, align 4
  %v1_161b0 = add i32 %v0_161a8, 26
  %v2_161b0 = inttoptr i32 %v1_161b0 to i8*
  %v3_161b0 = load i8, i8* %v2_161b0, align 1
  %v4_161b0 = zext i8 %v3_161b0 to i32
  %v4_161b4 = mul nuw nsw i32 %v4_161a8, 256
  %v5_161b4 = or i32 %v4_161ac, %v4_161b4
  store i32 %v5_161b4, i32* %r3.global-to-local, align 4
  %v1_161b8 = add i32 %v0_161a8, 27
  %v2_161b8 = inttoptr i32 %v1_161b8 to i8*
  %v3_161b8 = load i8, i8* %v2_161b8, align 1
  %v4_161b8 = zext i8 %v3_161b8 to i32
  %v4_161bc = mul nuw nsw i32 %v4_161b0, 65536
  %v5_161bc = or i32 %v4_161bc, %v5_161b4
  %v4_161c0 = mul nuw i32 %v4_161b8, 16777216
  %v5_161c0 = or i32 %v5_161bc, %v4_161c0
  store i32 %v5_161c0, i32* %r3.global-to-local, align 4
  %v1_161c4 = load i32, i32* %r7.global-to-local, align 4
  %v2_161c4 = add i32 %v1_161c4, 24
  %v3_161c4 = inttoptr i32 %v2_161c4 to i32*
  store i32 %v5_161c0, i32* %v3_161c4, align 4
  %v0_161c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_161c8 = add i32 %v0_161c8, 29
  %v2_161c8 = inttoptr i32 %v1_161c8 to i8*
  %v3_161c8 = load i8, i8* %v2_161c8, align 1
  %v4_161c8 = zext i8 %v3_161c8 to i32
  %v1_161cc = add i32 %v0_161c8, 28
  %v2_161cc = inttoptr i32 %v1_161cc to i8*
  %v3_161cc = load i8, i8* %v2_161cc, align 1
  %v4_161cc = zext i8 %v3_161cc to i32
  store i32 %v4_161cc, i32* %r3.global-to-local, align 4
  %v1_161d0 = add i32 %v0_161c8, 30
  %v2_161d0 = inttoptr i32 %v1_161d0 to i8*
  %v3_161d0 = load i8, i8* %v2_161d0, align 1
  %v4_161d0 = zext i8 %v3_161d0 to i32
  %v4_161d4 = mul nuw nsw i32 %v4_161c8, 256
  %v5_161d4 = or i32 %v4_161cc, %v4_161d4
  store i32 %v5_161d4, i32* %r3.global-to-local, align 4
  %v1_161d8 = add i32 %v0_161c8, 31
  %v2_161d8 = inttoptr i32 %v1_161d8 to i8*
  %v3_161d8 = load i8, i8* %v2_161d8, align 1
  %v4_161d8 = zext i8 %v3_161d8 to i32
  %v4_161dc = mul nuw nsw i32 %v4_161d0, 65536
  %v5_161dc = or i32 %v4_161dc, %v5_161d4
  %v4_161e0 = mul nuw i32 %v4_161d8, 16777216
  %v5_161e0 = or i32 %v5_161dc, %v4_161e0
  store i32 %v5_161e0, i32* %r3.global-to-local, align 4
  %v1_161e4 = load i32, i32* %r7.global-to-local, align 4
  %v2_161e4 = add i32 %v1_161e4, 28
  %v3_161e4 = inttoptr i32 %v2_161e4 to i32*
  store i32 %v5_161e0, i32* %v3_161e4, align 4
  %v0_161e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_161e8 = add i32 %v0_161e8, 33
  %v2_161e8 = inttoptr i32 %v1_161e8 to i8*
  %v3_161e8 = load i8, i8* %v2_161e8, align 1
  %v4_161e8 = zext i8 %v3_161e8 to i32
  %v1_161ec = add i32 %v0_161e8, 37
  %v2_161ec = inttoptr i32 %v1_161ec to i8*
  %v3_161ec = load i8, i8* %v2_161ec, align 1
  %v4_161ec = zext i8 %v3_161ec to i32
  %v1_161f0 = add i32 %v0_161e8, 32
  %v2_161f0 = inttoptr i32 %v1_161f0 to i8*
  %v3_161f0 = load i8, i8* %v2_161f0, align 1
  %v4_161f0 = zext i8 %v3_161f0 to i32
  %v1_161f4 = add i32 %v0_161e8, 36
  %v2_161f4 = inttoptr i32 %v1_161f4 to i8*
  %v3_161f4 = load i8, i8* %v2_161f4, align 1
  %v4_161f4 = zext i8 %v3_161f4 to i32
  store i32 %v4_161f4, i32* %r3.global-to-local, align 4
  %v1_161f8 = add i32 %v0_161e8, 34
  %v2_161f8 = inttoptr i32 %v1_161f8 to i8*
  %v3_161f8 = load i8, i8* %v2_161f8, align 1
  %v4_161f8 = zext i8 %v3_161f8 to i32
  %v1_161fc = add i32 %v0_161e8, 38
  %v2_161fc = inttoptr i32 %v1_161fc to i8*
  %v3_161fc = load i8, i8* %v2_161fc, align 1
  %v4_161fc = zext i8 %v3_161fc to i32
  %v1_16200 = add i32 %v0_161e8, 35
  %v2_16200 = inttoptr i32 %v1_16200 to i8*
  %v3_16200 = load i8, i8* %v2_16200, align 1
  %v4_16200 = zext i8 %v3_16200 to i32
  %v4_16204 = mul nuw nsw i32 %v4_161e8, 256
  %v5_16204 = or i32 %v4_161f0, %v4_16204
  %v4_16208 = mul nuw nsw i32 %v4_161ec, 256
  %v5_16208 = or i32 %v4_161f4, %v4_16208
  store i32 %v5_16208, i32* %r3.global-to-local, align 4
  %v1_1620c = add i32 %v0_161e8, 39
  %v2_1620c = inttoptr i32 %v1_1620c to i8*
  %v3_1620c = load i8, i8* %v2_1620c, align 1
  %v4_1620c = zext i8 %v3_1620c to i32
  %v4_16210 = mul nuw nsw i32 %v4_161f8, 65536
  %v5_16210 = or i32 %v4_16210, %v5_16204
  %v4_16214 = mul nuw nsw i32 %v4_161fc, 65536
  %v5_16214 = or i32 %v4_16214, %v5_16208
  %v4_16218 = mul nuw i32 %v4_16200, 16777216
  %v5_16218 = or i32 %v5_16210, %v4_16218
  %v4_1621c = mul nuw i32 %v4_1620c, 16777216
  %v5_1621c = or i32 %v5_16214, %v4_1621c
  store i32 %v5_1621c, i32* %r3.global-to-local, align 4
  %v1_16230 = load i32, i32* %r7.global-to-local, align 4
  %v2_16230 = add i32 %v1_16230, 32
  %v3_16230 = inttoptr i32 %v2_16230 to i32*
  store i32 %v5_16218, i32* %v3_16230, align 4
  %v0_16234 = load i32, i32* %r3.global-to-local, align 4
  %v1_16234 = load i32, i32* %r7.global-to-local, align 4
  %v2_16234 = add i32 %v1_16234, 36
  %v3_16234 = inttoptr i32 %v2_16234 to i32*
  store i32 %v0_16234, i32* %v3_16234, align 4
  %v0_16238 = load i32, i32* %r4.global-to-local, align 4
  %v1_16238 = add i32 %v0_16238, 45
  %v2_16238 = inttoptr i32 %v1_16238 to i8*
  %v3_16238 = load i8, i8* %v2_16238, align 1
  %v4_16238 = zext i8 %v3_16238 to i32
  %v1_1623c = add i32 %v0_16238, 49
  %v2_1623c = inttoptr i32 %v1_1623c to i8*
  %v3_1623c = load i8, i8* %v2_1623c, align 1
  %v4_1623c = zext i8 %v3_1623c to i32
  %v1_16240 = add i32 %v0_16238, 44
  %v2_16240 = inttoptr i32 %v1_16240 to i8*
  %v3_16240 = load i8, i8* %v2_16240, align 1
  %v4_16240 = zext i8 %v3_16240 to i32
  %v1_16244 = add i32 %v0_16238, 48
  %v2_16244 = inttoptr i32 %v1_16244 to i8*
  %v3_16244 = load i8, i8* %v2_16244, align 1
  %v4_16244 = zext i8 %v3_16244 to i32
  store i32 %v4_16244, i32* %r3.global-to-local, align 4
  %v1_16248 = add i32 %v0_16238, 46
  %v2_16248 = inttoptr i32 %v1_16248 to i8*
  %v3_16248 = load i8, i8* %v2_16248, align 1
  %v4_16248 = zext i8 %v3_16248 to i32
  %v1_1624c = add i32 %v0_16238, 50
  %v2_1624c = inttoptr i32 %v1_1624c to i8*
  %v3_1624c = load i8, i8* %v2_1624c, align 1
  %v4_1624c = zext i8 %v3_1624c to i32
  %v1_16250 = add i32 %v0_16238, 47
  %v2_16250 = inttoptr i32 %v1_16250 to i8*
  %v3_16250 = load i8, i8* %v2_16250, align 1
  %v4_16250 = zext i8 %v3_16250 to i32
  %v4_16254 = mul nuw nsw i32 %v4_16238, 256
  %v5_16254 = or i32 %v4_16240, %v4_16254
  %v4_16258 = mul nuw nsw i32 %v4_1623c, 256
  %v5_16258 = or i32 %v4_16244, %v4_16258
  store i32 %v5_16258, i32* %r3.global-to-local, align 4
  %v1_1625c = add i32 %v0_16238, 51
  %v2_1625c = inttoptr i32 %v1_1625c to i8*
  %v3_1625c = load i8, i8* %v2_1625c, align 1
  %v4_1625c = zext i8 %v3_1625c to i32
  %v4_16260 = mul nuw nsw i32 %v4_16248, 65536
  %v5_16260 = or i32 %v4_16260, %v5_16254
  %v4_16264 = mul nuw nsw i32 %v4_1624c, 65536
  %v5_16264 = or i32 %v4_16264, %v5_16258
  %v4_16268 = mul nuw i32 %v4_16250, 16777216
  %v5_16268 = or i32 %v5_16260, %v4_16268
  %v4_1626c = mul nuw i32 %v4_1625c, 16777216
  %v5_1626c = or i32 %v5_16264, %v4_1626c
  store i32 %v5_1626c, i32* %r3.global-to-local, align 4
  %v1_16280 = load i32, i32* %r7.global-to-local, align 4
  %v2_16280 = add i32 %v1_16280, 44
  %v3_16280 = inttoptr i32 %v2_16280 to i32*
  store i32 %v5_16268, i32* %v3_16280, align 4
  %v0_16284 = load i32, i32* %r3.global-to-local, align 4
  %v1_16284 = load i32, i32* %r7.global-to-local, align 4
  %v2_16284 = add i32 %v1_16284, 48
  %v3_16284 = inttoptr i32 %v2_16284 to i32*
  store i32 %v0_16284, i32* %v3_16284, align 4
  %v0_16288 = load i32, i32* %r4.global-to-local, align 4
  %v1_16288 = add i32 %v0_16288, 53
  %v2_16288 = inttoptr i32 %v1_16288 to i8*
  %v3_16288 = load i8, i8* %v2_16288, align 1
  %v4_16288 = zext i8 %v3_16288 to i32
  %v1_1628c = add i32 %v0_16288, 52
  %v2_1628c = inttoptr i32 %v1_1628c to i8*
  %v3_1628c = load i8, i8* %v2_1628c, align 1
  %v4_1628c = zext i8 %v3_1628c to i32
  store i32 %v4_1628c, i32* %r3.global-to-local, align 4
  %v1_16290 = add i32 %v0_16288, 54
  %v2_16290 = inttoptr i32 %v1_16290 to i8*
  %v3_16290 = load i8, i8* %v2_16290, align 1
  %v4_16290 = zext i8 %v3_16290 to i32
  %v4_16294 = mul nuw nsw i32 %v4_16288, 256
  %v5_16294 = or i32 %v4_1628c, %v4_16294
  store i32 %v5_16294, i32* %r3.global-to-local, align 4
  %v1_16298 = add i32 %v0_16288, 55
  %v2_16298 = inttoptr i32 %v1_16298 to i8*
  %v3_16298 = load i8, i8* %v2_16298, align 1
  %v4_16298 = zext i8 %v3_16298 to i32
  %v4_1629c = mul nuw nsw i32 %v4_16290, 65536
  %v5_1629c = or i32 %v4_1629c, %v5_16294
  %v4_162a0 = mul nuw i32 %v4_16298, 16777216
  %v5_162a0 = or i32 %v5_1629c, %v4_162a0
  store i32 %v5_162a0, i32* %r3.global-to-local, align 4
  %v1_162a4 = load i32, i32* %r7.global-to-local, align 4
  %v2_162a4 = add i32 %v1_162a4, 52
  %v3_162a4 = inttoptr i32 %v2_162a4 to i32*
  store i32 %v5_162a0, i32* %v3_162a4, align 4
  %v0_162a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_162a8 = add i32 %v0_162a8, 57
  %v2_162a8 = inttoptr i32 %v1_162a8 to i8*
  %v3_162a8 = load i8, i8* %v2_162a8, align 1
  %v4_162a8 = zext i8 %v3_162a8 to i32
  %v1_162ac = add i32 %v0_162a8, 56
  %v2_162ac = inttoptr i32 %v1_162ac to i8*
  %v3_162ac = load i8, i8* %v2_162ac, align 1
  %v4_162ac = zext i8 %v3_162ac to i32
  %v1_162b0 = add i32 %v0_162a8, 60
  %v2_162b0 = inttoptr i32 %v1_162b0 to i8*
  %v3_162b0 = load i8, i8* %v2_162b0, align 1
  %v4_162b0 = zext i8 %v3_162b0 to i32
  store i32 %v4_162b0, i32* %r3.global-to-local, align 4
  %v1_162b4 = add i32 %v0_162a8, 61
  %v2_162b4 = inttoptr i32 %v1_162b4 to i8*
  %v3_162b4 = load i8, i8* %v2_162b4, align 1
  %v4_162b4 = zext i8 %v3_162b4 to i32
  %v1_162b8 = add i32 %v0_162a8, 58
  %v2_162b8 = inttoptr i32 %v1_162b8 to i8*
  %v3_162b8 = load i8, i8* %v2_162b8, align 1
  %v4_162b8 = zext i8 %v3_162b8 to i32
  %v1_162bc = add i32 %v0_162a8, 62
  %v2_162bc = inttoptr i32 %v1_162bc to i8*
  %v3_162bc = load i8, i8* %v2_162bc, align 1
  %v4_162bc = zext i8 %v3_162bc to i32
  %v1_162c0 = add i32 %v0_162a8, 59
  %v2_162c0 = inttoptr i32 %v1_162c0 to i8*
  %v3_162c0 = load i8, i8* %v2_162c0, align 1
  %v4_162c0 = zext i8 %v3_162c0 to i32
  %v4_162c4 = mul nuw nsw i32 %v4_162a8, 256
  %v5_162c4 = or i32 %v4_162ac, %v4_162c4
  %v4_162c8 = mul nuw nsw i32 %v4_162b4, 256
  %v5_162c8 = or i32 %v4_162c8, %v4_162b0
  store i32 %v5_162c8, i32* %r3.global-to-local, align 4
  %v1_162cc = add i32 %v0_162a8, 63
  %v2_162cc = inttoptr i32 %v1_162cc to i8*
  %v3_162cc = load i8, i8* %v2_162cc, align 1
  %v4_162cc = zext i8 %v3_162cc to i32
  %v4_162d0 = mul nuw nsw i32 %v4_162b8, 65536
  %v5_162d0 = or i32 %v4_162d0, %v5_162c4
  %v4_162d4 = mul nuw nsw i32 %v4_162bc, 65536
  %v5_162d4 = or i32 %v4_162d4, %v5_162c8
  %v4_162d8 = mul nuw i32 %v4_162cc, 16777216
  %v5_162d8 = or i32 %v5_162d4, %v4_162d8
  %v4_162dc = mul nuw i32 %v4_162c0, 16777216
  %v5_162dc = or i32 %v5_162d0, %v4_162dc
  store i32 %v5_162d8, i32* %r3.global-to-local, align 4
  %v1_162ec = load i32, i32* %r7.global-to-local, align 4
  %v2_162ec = add i32 %v1_162ec, 56
  %v3_162ec = inttoptr i32 %v2_162ec to i32*
  store i32 %v5_162dc, i32* %v3_162ec, align 4
  %v0_162f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_162f0 = load i32, i32* %r7.global-to-local, align 4
  %v2_162f0 = add i32 %v1_162f0, 60
  %v3_162f0 = inttoptr i32 %v2_162f0 to i32*
  store i32 %v0_162f0, i32* %v3_162f0, align 4
  %v0_162f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_162f4 = add i32 %v0_162f4, 65
  %v2_162f4 = inttoptr i32 %v1_162f4 to i8*
  %v3_162f4 = load i8, i8* %v2_162f4, align 1
  %v4_162f4 = zext i8 %v3_162f4 to i32
  %v1_162f8 = add i32 %v0_162f4, 64
  %v2_162f8 = inttoptr i32 %v1_162f8 to i8*
  %v3_162f8 = load i8, i8* %v2_162f8, align 1
  %v4_162f8 = zext i8 %v3_162f8 to i32
  store i32 %v4_162f8, i32* %r3.global-to-local, align 4
  %v1_162fc = add i32 %v0_162f4, 66
  %v2_162fc = inttoptr i32 %v1_162fc to i8*
  %v3_162fc = load i8, i8* %v2_162fc, align 1
  %v4_162fc = zext i8 %v3_162fc to i32
  %v4_16300 = mul nuw nsw i32 %v4_162f4, 256
  %v5_16300 = or i32 %v4_162f8, %v4_16300
  store i32 %v5_16300, i32* %r3.global-to-local, align 4
  %v1_16304 = add i32 %v0_162f4, 67
  %v2_16304 = inttoptr i32 %v1_16304 to i8*
  %v3_16304 = load i8, i8* %v2_16304, align 1
  %v4_16304 = zext i8 %v3_16304 to i32
  %v4_16308 = mul nuw nsw i32 %v4_162fc, 65536
  %v5_16308 = or i32 %v4_16308, %v5_16300
  %v4_1630c = mul nuw i32 %v4_16304, 16777216
  %v5_1630c = or i32 %v5_16308, %v4_1630c
  store i32 %v5_1630c, i32* %r3.global-to-local, align 4
  %v1_16310 = load i32, i32* %r7.global-to-local, align 4
  %v2_16310 = add i32 %v1_16310, 64
  %v3_16310 = inttoptr i32 %v2_16310 to i32*
  store i32 %v5_1630c, i32* %v3_16310, align 4
  %v0_16314 = load i32, i32* %r4.global-to-local, align 4
  %v1_16314 = add i32 %v0_16314, 73
  %v2_16314 = inttoptr i32 %v1_16314 to i8*
  %v3_16314 = load i8, i8* %v2_16314, align 1
  %v4_16314 = zext i8 %v3_16314 to i32
  %v1_16318 = add i32 %v0_16314, 72
  %v2_16318 = inttoptr i32 %v1_16318 to i8*
  %v3_16318 = load i8, i8* %v2_16318, align 1
  %v4_16318 = zext i8 %v3_16318 to i32
  store i32 %v4_16318, i32* %r3.global-to-local, align 4
  %v1_1631c = add i32 %v0_16314, 74
  %v2_1631c = inttoptr i32 %v1_1631c to i8*
  %v3_1631c = load i8, i8* %v2_1631c, align 1
  %v4_1631c = zext i8 %v3_1631c to i32
  %v4_16320 = mul nuw nsw i32 %v4_16314, 256
  %v5_16320 = or i32 %v4_16318, %v4_16320
  store i32 %v5_16320, i32* %r3.global-to-local, align 4
  %v1_16324 = add i32 %v0_16314, 75
  %v2_16324 = inttoptr i32 %v1_16324 to i8*
  %v3_16324 = load i8, i8* %v2_16324, align 1
  %v4_16324 = zext i8 %v3_16324 to i32
  %v4_16328 = mul nuw nsw i32 %v4_1631c, 65536
  %v5_16328 = or i32 %v4_16328, %v5_16320
  %v4_1632c = mul nuw i32 %v4_16324, 16777216
  %v5_1632c = or i32 %v5_16328, %v4_1632c
  store i32 %v5_1632c, i32* %r3.global-to-local, align 4
  %v1_16330 = load i32, i32* %r7.global-to-local, align 4
  %v2_16330 = add i32 %v1_16330, 72
  %v3_16330 = inttoptr i32 %v2_16330 to i32*
  store i32 %v5_1632c, i32* %v3_16330, align 4
  %v0_16334 = load i32, i32* %r4.global-to-local, align 4
  %v1_16334 = add i32 %v0_16334, 81
  %v2_16334 = inttoptr i32 %v1_16334 to i8*
  %v3_16334 = load i8, i8* %v2_16334, align 1
  %v4_16334 = zext i8 %v3_16334 to i32
  %v1_16338 = add i32 %v0_16334, 80
  %v2_16338 = inttoptr i32 %v1_16338 to i8*
  %v3_16338 = load i8, i8* %v2_16338, align 1
  %v4_16338 = zext i8 %v3_16338 to i32
  store i32 %v4_16338, i32* %r3.global-to-local, align 4
  %v1_1633c = add i32 %v0_16334, 82
  %v2_1633c = inttoptr i32 %v1_1633c to i8*
  %v3_1633c = load i8, i8* %v2_1633c, align 1
  %v4_1633c = zext i8 %v3_1633c to i32
  %v4_16340 = mul nuw nsw i32 %v4_16334, 256
  %v5_16340 = or i32 %v4_16338, %v4_16340
  store i32 %v5_16340, i32* %r3.global-to-local, align 4
  %v1_16344 = add i32 %v0_16334, 83
  %v2_16344 = inttoptr i32 %v1_16344 to i8*
  %v3_16344 = load i8, i8* %v2_16344, align 1
  %v4_16344 = zext i8 %v3_16344 to i32
  %v4_16348 = mul nuw nsw i32 %v4_1633c, 65536
  %v5_16348 = or i32 %v4_16348, %v5_16340
  %v4_1634c = mul nuw i32 %v4_16344, 16777216
  %v5_1634c = or i32 %v5_16348, %v4_1634c
  store i32 %v5_1634c, i32* %r3.global-to-local, align 4
  %v1_16350 = load i32, i32* %r7.global-to-local, align 4
  %v2_16350 = add i32 %v1_16350, 80
  %v3_16350 = inttoptr i32 %v2_16350 to i32*
  store i32 %v5_1634c, i32* %v3_16350, align 4
  %v0_16354 = load i32, i32* %r4.global-to-local, align 4
  %v1_16354 = add i32 %v0_16354, 69
  %v2_16354 = inttoptr i32 %v1_16354 to i8*
  %v3_16354 = load i8, i8* %v2_16354, align 1
  %v4_16354 = zext i8 %v3_16354 to i32
  %v1_16358 = add i32 %v0_16354, 68
  %v2_16358 = inttoptr i32 %v1_16358 to i8*
  %v3_16358 = load i8, i8* %v2_16358, align 1
  %v4_16358 = zext i8 %v3_16358 to i32
  store i32 %v4_16358, i32* %r3.global-to-local, align 4
  %v1_1635c = add i32 %v0_16354, 70
  %v2_1635c = inttoptr i32 %v1_1635c to i8*
  %v3_1635c = load i8, i8* %v2_1635c, align 1
  %v4_1635c = zext i8 %v3_1635c to i32
  %v4_16360 = mul nuw nsw i32 %v4_16354, 256
  %v5_16360 = or i32 %v4_16358, %v4_16360
  store i32 %v5_16360, i32* %r3.global-to-local, align 4
  %v1_16364 = add i32 %v0_16354, 71
  %v2_16364 = inttoptr i32 %v1_16364 to i8*
  %v3_16364 = load i8, i8* %v2_16364, align 1
  %v4_16364 = zext i8 %v3_16364 to i32
  %v4_16368 = mul nuw nsw i32 %v4_1635c, 65536
  %v5_16368 = or i32 %v4_16368, %v5_16360
  %v4_1636c = mul nuw i32 %v4_16364, 16777216
  %v5_1636c = or i32 %v5_16368, %v4_1636c
  store i32 %v5_1636c, i32* %r3.global-to-local, align 4
  %v1_16370 = load i32, i32* %r7.global-to-local, align 4
  %v2_16370 = add i32 %v1_16370, 68
  %v3_16370 = inttoptr i32 %v2_16370 to i32*
  store i32 %v5_1636c, i32* %v3_16370, align 4
  %v0_16374 = load i32, i32* %r4.global-to-local, align 4
  %v1_16374 = add i32 %v0_16374, 77
  %v2_16374 = inttoptr i32 %v1_16374 to i8*
  %v3_16374 = load i8, i8* %v2_16374, align 1
  %v4_16374 = zext i8 %v3_16374 to i32
  %v1_16378 = add i32 %v0_16374, 76
  %v2_16378 = inttoptr i32 %v1_16378 to i8*
  %v3_16378 = load i8, i8* %v2_16378, align 1
  %v4_16378 = zext i8 %v3_16378 to i32
  store i32 %v4_16378, i32* %r3.global-to-local, align 4
  %v1_1637c = add i32 %v0_16374, 78
  %v2_1637c = inttoptr i32 %v1_1637c to i8*
  %v3_1637c = load i8, i8* %v2_1637c, align 1
  %v4_1637c = zext i8 %v3_1637c to i32
  %v4_16380 = mul nuw nsw i32 %v4_16374, 256
  %v5_16380 = or i32 %v4_16378, %v4_16380
  store i32 %v5_16380, i32* %r3.global-to-local, align 4
  %v1_16384 = add i32 %v0_16374, 79
  %v2_16384 = inttoptr i32 %v1_16384 to i8*
  %v3_16384 = load i8, i8* %v2_16384, align 1
  %v4_16384 = zext i8 %v3_16384 to i32
  %v4_16388 = mul nuw nsw i32 %v4_1637c, 65536
  %v5_16388 = or i32 %v4_16388, %v5_16380
  %v4_1638c = mul nuw i32 %v4_16384, 16777216
  %v5_1638c = or i32 %v5_16388, %v4_1638c
  store i32 %v5_1638c, i32* %r3.global-to-local, align 4
  %v1_16390 = load i32, i32* %r7.global-to-local, align 4
  %v2_16390 = add i32 %v1_16390, 76
  %v3_16390 = inttoptr i32 %v2_16390 to i32*
  store i32 %v5_1638c, i32* %v3_16390, align 4
  %v0_16394 = load i32, i32* %r4.global-to-local, align 4
  %v1_16394 = add i32 %v0_16394, 85
  %v2_16394 = inttoptr i32 %v1_16394 to i8*
  %v3_16394 = load i8, i8* %v2_16394, align 1
  %v4_16394 = zext i8 %v3_16394 to i32
  %v1_16398 = add i32 %v0_16394, 84
  %v2_16398 = inttoptr i32 %v1_16398 to i8*
  %v3_16398 = load i8, i8* %v2_16398, align 1
  %v4_16398 = zext i8 %v3_16398 to i32
  store i32 %v4_16398, i32* %r3.global-to-local, align 4
  %v1_1639c = add i32 %v0_16394, 86
  %v2_1639c = inttoptr i32 %v1_1639c to i8*
  %v3_1639c = load i8, i8* %v2_1639c, align 1
  %v4_1639c = zext i8 %v3_1639c to i32
  %v4_163a0 = mul nuw nsw i32 %v4_16394, 256
  %v5_163a0 = or i32 %v4_16398, %v4_163a0
  store i32 %v5_163a0, i32* %r3.global-to-local, align 4
  %v1_163a4 = add i32 %v0_16394, 87
  %v2_163a4 = inttoptr i32 %v1_163a4 to i8*
  %v3_163a4 = load i8, i8* %v2_163a4, align 1
  %v4_163a4 = zext i8 %v3_163a4 to i32
  %v4_163a8 = mul nuw nsw i32 %v4_1639c, 65536
  %v5_163a8 = or i32 %v4_163a8, %v5_163a0
  %v4_163ac = mul nuw i32 %v4_163a4, 16777216
  %v5_163ac = or i32 %v5_163a8, %v4_163ac
  store i32 %v5_163ac, i32* %r3.global-to-local, align 4
  %v1_163b0 = load i32, i32* %r7.global-to-local, align 4
  %v2_163b0 = add i32 %v1_163b0, 84
  %v3_163b0 = inttoptr i32 %v2_163b0 to i32*
  store i32 %v5_163ac, i32* %v3_163b0, align 4
  ret i32 %v4_162b4

; uselistorder directives
  uselistorder i32 %v4_162b4, { 1, 0 }
  uselistorder i32 %v0_162a8, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_16238, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_161e8, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_16108, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %tmp, { 6, 5, 3, 4, 2, 1, 0, 7 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 69, { 1, 0 }
  uselistorder i32 83, { 2, 1, 0 }
  uselistorder i32 80, { 1, 2, 5, 3, 4, 0, 6 }
  uselistorder i32 59, { 1, 2, 0 }
  uselistorder i32 62, { 1, 0 }
  uselistorder i32 61, { 1, 0 }
  uselistorder i32 55, { 2, 4, 0, 3, 1 }
  uselistorder i32 54, { 1, 0 }
  uselistorder i32 53, { 1, 2, 0, 3 }
  uselistorder i32 51, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 47, { 4, 5, 6, 7, 0, 8, 1, 9, 2, 10, 11, 3 }
  uselistorder i32 50, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 46, { 2, 3, 0, 4, 1, 5 }
  uselistorder i32 49, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 45, { 2, 3, 0, 4, 1, 5 }
  uselistorder i32 39, { 5, 6, 0, 1, 7, 2, 8, 3, 9, 4 }
  uselistorder i32 35, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 38, { 4, 3, 5, 6, 7, 8, 0, 9, 1, 10, 2, 11 }
  uselistorder i32 34, { 5, 0, 1, 6, 7, 2, 8, 3, 9, 4, 10 }
  uselistorder i32 37, { 3, 0, 4, 1, 5, 6, 7, 8, 2, 9 }
  uselistorder i32 33, { 9, 2, 0, 12, 1, 10, 3, 11, 4, 5, 6, 13, 7, 14, 8, 15, 16 }
  uselistorder i32 30, { 5, 0, 9, 4, 1, 6, 2, 7, 3, 8, 10 }
  uselistorder i32 29, { 7, 1, 0, 8, 9, 5, 2, 3, 4, 6 }
  uselistorder i32 26, { 5, 0, 1, 2, 6, 3, 7, 4, 8, 9 }
  uselistorder i32 25, { 12, 24, 25, 3, 0, 4, 13, 5, 14, 6, 15, 11, 16, 17, 18, 1, 19, 7, 20, 2, 21, 8, 9, 22, 10, 23, 26, 27 }
  uselistorder i32 23, { 6, 1, 0, 2, 7, 3, 8, 4, 9, 11, 12, 10, 5 }
  uselistorder i32 22, { 11, 1, 16, 2, 3, 4, 5, 0, 6, 12, 7, 13, 8, 14, 17, 15, 9, 10, 18 }
  uselistorder i32 21, { 9, 4, 2, 10, 5, 11, 6, 12, 7, 13, 14, 15, 8, 0, 1, 16, 3, 17 }
  uselistorder i32 19, { 8, 13, 14, 15, 4, 9, 1, 5, 10, 6, 11, 7, 12, 0, 19, 16, 2, 17, 3, 18 }
  uselistorder i32 18, { 12, 17, 18, 19, 2, 0, 3, 13, 4, 14, 5, 15, 11, 6, 1, 16, 20, 7, 21, 8, 22, 9, 23, 10, 24 }
  uselistorder i32 17, { 12, 15, 0, 4, 33, 34, 5, 35, 36, 6, 1, 32, 13, 14, 7, 16, 8, 17, 9, 18, 10, 19, 11, 20, 21, 2, 22, 23, 24, 3, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 6, { 43, 46, 15, 16, 94, 17, 2, 18, 44, 0, 88, 19, 89, 45, 3, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 4, 31, 32, 33, 34, 35, 5, 36, 47, 48, 49, 6, 50, 51, 52, 53, 7, 54, 55, 56, 57, 8, 58, 9, 10, 59, 60, 61, 37, 62, 11, 63, 64, 65, 38, 66, 12, 67, 68, 69, 39, 70, 71, 72, 40, 73, 74, 75, 76, 77, 41, 78, 13, 79, 80, 81, 82, 83, 84, 42, 85, 14, 86, 1, 87, 90, 91, 92, 93 }
  uselistorder i32 96, { 1, 0, 2, 3 }
}

define i32 @function_163bc(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_163bc:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_163bc = load i32, i32* @r4, align 4
  store i32 %v3_163bc, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_163d4 = inttoptr i32 %arg2 to i8*
  %v3_163d4 = call i32 @function_14870(i8* %v2_163d4, i32 0)
  store i32 %v3_163d4, i32* %r0.global-to-local, align 4
  %v0_163d8 = load i32, i32* %r5.global-to-local, align 4
  %v1_163d8 = inttoptr i32 %v0_163d8 to i32*
  %v2_163d8 = load i32, i32* %v1_163d8, align 4
  store i32 %v2_163d8, i32* %r3.global-to-local, align 4
  %v1_163dc = add i32 %v0_163d8, 4
  %v2_163dc = inttoptr i32 %v1_163dc to i32*
  %v3_163dc = load i32, i32* %v2_163dc, align 4
  store i32 %v3_163dc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_163e4 = load i32, i32* %r6.global-to-local, align 4
  %v1_163e4 = inttoptr i32 %v0_163e4 to i32*
  store i32 %v2_163d8, i32* %v1_163e4, align 4
  %v3_163e4 = add i32 %v0_163e4, 4
  %v4_163e4 = inttoptr i32 %v3_163e4 to i32*
  %v5_163e4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_163e4, i32* %v4_163e4, align 4
  %v0_163e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_163e8 = load i32, i32* %r6.global-to-local, align 4
  %v2_163e8 = add i32 %v1_163e8, 12
  %v3_163e8 = inttoptr i32 %v2_163e8 to i32*
  store i32 %v0_163e8, i32* %v3_163e8, align 4
  %v0_163ec = load i32, i32* %r5.global-to-local, align 4
  %v1_163ec = add i32 %v0_163ec, 9
  %v2_163ec = inttoptr i32 %v1_163ec to i8*
  %v3_163ec = load i8, i8* %v2_163ec, align 1
  %v4_163ec = zext i8 %v3_163ec to i32
  store i32 %v4_163ec, i32* %r2.global-to-local, align 4
  %v1_163f0 = add i32 %v0_163ec, 8
  %v2_163f0 = inttoptr i32 %v1_163f0 to i8*
  %v3_163f0 = load i8, i8* %v2_163f0, align 1
  %v4_163f0 = zext i8 %v3_163f0 to i32
  %v4_163f4 = mul nuw nsw i32 %v4_163ec, 256
  %v5_163f4 = or i32 %v4_163f0, %v4_163f4
  store i32 %v5_163f4, i32* %r3.global-to-local, align 4
  %v1_163f8 = load i32, i32* %r6.global-to-local, align 4
  %v2_163f8 = add i32 %v1_163f8, 16
  %v3_163f8 = inttoptr i32 %v2_163f8 to i32*
  store i32 %v5_163f4, i32* %v3_163f8, align 4
  %v0_163fc = load i32, i32* %r5.global-to-local, align 4
  %v1_163fc = add i32 %v0_163fc, 11
  %v2_163fc = inttoptr i32 %v1_163fc to i8*
  %v3_163fc = load i8, i8* %v2_163fc, align 1
  %v4_163fc = zext i8 %v3_163fc to i32
  store i32 %v4_163fc, i32* %r2.global-to-local, align 4
  %v1_16400 = add i32 %v0_163fc, 10
  %v2_16400 = inttoptr i32 %v1_16400 to i8*
  %v3_16400 = load i8, i8* %v2_16400, align 1
  %v4_16400 = zext i8 %v3_16400 to i32
  %v4_16404 = mul nuw nsw i32 %v4_163fc, 256
  %v5_16404 = or i32 %v4_16400, %v4_16404
  store i32 %v5_16404, i32* %r3.global-to-local, align 4
  %v1_16408 = load i32, i32* %r6.global-to-local, align 4
  %v2_16408 = add i32 %v1_16408, 20
  %v3_16408 = inttoptr i32 %v2_16408 to i32*
  store i32 %v5_16404, i32* %v3_16408, align 4
  %v0_1640c = load i32, i32* %r5.global-to-local, align 4
  %v1_1640c = add i32 %v0_1640c, 13
  %v2_1640c = inttoptr i32 %v1_1640c to i8*
  %v3_1640c = load i8, i8* %v2_1640c, align 1
  %v4_1640c = zext i8 %v3_1640c to i32
  store i32 %v4_1640c, i32* %r2.global-to-local, align 4
  %v1_16410 = add i32 %v0_1640c, 12
  %v2_16410 = inttoptr i32 %v1_16410 to i8*
  %v3_16410 = load i8, i8* %v2_16410, align 1
  %v4_16410 = zext i8 %v3_16410 to i32
  %v4_16414 = mul nuw nsw i32 %v4_1640c, 256
  %v5_16414 = or i32 %v4_16410, %v4_16414
  store i32 %v5_16414, i32* %r3.global-to-local, align 4
  %v1_16418 = load i32, i32* %r6.global-to-local, align 4
  %v2_16418 = add i32 %v1_16418, 24
  %v3_16418 = inttoptr i32 %v2_16418 to i32*
  store i32 %v5_16414, i32* %v3_16418, align 4
  %v0_1641c = load i32, i32* %r5.global-to-local, align 4
  %v1_1641c = add i32 %v0_1641c, 20
  %v2_1641c = inttoptr i32 %v1_1641c to i32*
  %v3_1641c = load i32, i32* %v2_1641c, align 4
  store i32 %v3_1641c, i32* %r3.global-to-local, align 4
  %v1_16420 = add i32 %v0_1641c, 14
  %v2_16420 = inttoptr i32 %v1_16420 to i8*
  %v3_16420 = load i8, i8* %v2_16420, align 1
  %v4_16420 = zext i8 %v3_16420 to i32
  store i32 %v4_16420, i32* %r0.global-to-local, align 4
  %v1_16424 = add i32 %v0_1641c, 15
  %v2_16424 = inttoptr i32 %v1_16424 to i8*
  %v3_16424 = load i8, i8* %v2_16424, align 1
  %v4_16424 = zext i8 %v3_16424 to i32
  store i32 %v4_16424, i32* %ip.global-to-local, align 4
  %v1_16428 = add i32 %v0_1641c, 16
  %v2_16428 = inttoptr i32 %v1_16428 to i32*
  %v3_16428 = load i32, i32* %v2_16428, align 4
  store i32 %v3_16428, i32* %r1.global-to-local, align 4
  %v1_1642c = load i32, i32* %r6.global-to-local, align 4
  %v2_1642c = add i32 %v1_1642c, 44
  %v3_1642c = inttoptr i32 %v2_1642c to i32*
  store i32 %v3_1641c, i32* %v3_1642c, align 4
  %v0_16430 = load i32, i32* %r5.global-to-local, align 4
  %v1_16430 = add i32 %v0_16430, 24
  %v2_16430 = inttoptr i32 %v1_16430 to i32*
  %v3_16430 = load i32, i32* %v2_16430, align 4
  store i32 %v3_16430, i32* %r3.global-to-local, align 4
  %v1_16434 = load i32, i32* %r6.global-to-local, align 4
  %v2_16434 = add i32 %v1_16434, 48
  %v3_16434 = inttoptr i32 %v2_16434 to i32*
  store i32 %v3_16430, i32* %v3_16434, align 4
  %v0_16438 = load i32, i32* %r5.global-to-local, align 4
  %v1_16438 = add i32 %v0_16438, 28
  %v2_16438 = inttoptr i32 %v1_16438 to i32*
  %v3_16438 = load i32, i32* %v2_16438, align 4
  store i32 %v3_16438, i32* %r3.global-to-local, align 4
  %v1_1643c = load i32, i32* %r6.global-to-local, align 4
  %v2_1643c = add i32 %v1_1643c, 52
  %v3_1643c = inttoptr i32 %v2_1643c to i32*
  store i32 %v3_16438, i32* %v3_1643c, align 4
  %v0_16440 = load i32, i32* %r5.global-to-local, align 4
  %v1_16440 = add i32 %v0_16440, 32
  %v2_16440 = inttoptr i32 %v1_16440 to i32*
  %v3_16440 = load i32, i32* %v2_16440, align 4
  store i32 %v3_16440, i32* %r3.global-to-local, align 4
  %v1_16444 = load i32, i32* %r6.global-to-local, align 4
  %v2_16444 = add i32 %v1_16444, 56
  %v3_16444 = inttoptr i32 %v2_16444 to i32*
  store i32 %v3_16440, i32* %v3_16444, align 4
  %v0_16448 = load i32, i32* %r5.global-to-local, align 4
  %v1_16448 = add i32 %v0_16448, 40
  %v2_16448 = inttoptr i32 %v1_16448 to i32*
  %v3_16448 = load i32, i32* %v2_16448, align 4
  store i32 %v3_16448, i32* %r3.global-to-local, align 4
  %v1_1644c = load i32, i32* %r6.global-to-local, align 4
  %v2_1644c = add i32 %v1_1644c, 64
  %v3_1644c = inttoptr i32 %v2_1644c to i32*
  store i32 %v3_16448, i32* %v3_1644c, align 4
  %v0_16450 = load i32, i32* %r5.global-to-local, align 4
  %v1_16450 = add i32 %v0_16450, 48
  %v2_16450 = inttoptr i32 %v1_16450 to i32*
  %v3_16450 = load i32, i32* %v2_16450, align 4
  store i32 %v3_16450, i32* %r3.global-to-local, align 4
  %v1_16454 = load i32, i32* %r6.global-to-local, align 4
  %v2_16454 = add i32 %v1_16454, 72
  %v3_16454 = inttoptr i32 %v2_16454 to i32*
  store i32 %v3_16450, i32* %v3_16454, align 4
  %v0_16458 = load i32, i32* %r5.global-to-local, align 4
  %v1_16458 = add i32 %v0_16458, 36
  %v2_16458 = inttoptr i32 %v1_16458 to i32*
  %v3_16458 = load i32, i32* %v2_16458, align 4
  store i32 %v3_16458, i32* %r3.global-to-local, align 4
  %v1_1645c = load i32, i32* %r6.global-to-local, align 4
  %v2_1645c = add i32 %v1_1645c, 60
  %v3_1645c = inttoptr i32 %v2_1645c to i32*
  store i32 %v3_16458, i32* %v3_1645c, align 4
  %v0_16460 = load i32, i32* %r5.global-to-local, align 4
  %v1_16460 = add i32 %v0_16460, 44
  %v2_16460 = inttoptr i32 %v1_16460 to i32*
  %v3_16460 = load i32, i32* %v2_16460, align 4
  store i32 %v3_16460, i32* %r3.global-to-local, align 4
  %v0_16464 = load i32, i32* %r0.global-to-local, align 4
  %v1_16464 = load i32, i32* %ip.global-to-local, align 4
  %v4_16464 = mul i32 %v1_16464, 256
  %v5_16464 = or i32 %v4_16464, %v0_16464
  store i32 %v5_16464, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_1646c = load i32, i32* %r6.global-to-local, align 4
  %v2_1646c = add i32 %v1_1646c, 28
  %v3_1646c = inttoptr i32 %v2_1646c to i32*
  store i32 %v5_16464, i32* %v3_1646c, align 4
  %v0_16470 = load i32, i32* %r1.global-to-local, align 4
  %v1_16470 = load i32, i32* %r6.global-to-local, align 4
  %v2_16470 = add i32 %v1_16470, 32
  %v3_16470 = inttoptr i32 %v2_16470 to i32*
  store i32 %v0_16470, i32* %v3_16470, align 4
  %v0_16474 = load i32, i32* %r2.global-to-local, align 4
  %v1_16474 = load i32, i32* %r6.global-to-local, align 4
  %v2_16474 = add i32 %v1_16474, 36
  %v3_16474 = inttoptr i32 %v2_16474 to i32*
  store i32 %v0_16474, i32* %v3_16474, align 4
  %v0_16478 = load i32, i32* %r3.global-to-local, align 4
  %v1_16478 = load i32, i32* %r6.global-to-local, align 4
  %v2_16478 = add i32 %v1_16478, 68
  %v3_16478 = inttoptr i32 %v2_16478 to i32*
  store i32 %v0_16478, i32* %v3_16478, align 4
  %v0_1647c = load i32, i32* %r5.global-to-local, align 4
  %v1_1647c = add i32 %v0_1647c, 52
  %v2_1647c = inttoptr i32 %v1_1647c to i32*
  %v3_1647c = load i32, i32* %v2_1647c, align 4
  store i32 %v3_1647c, i32* %r3.global-to-local, align 4
  %v1_16480 = load i32, i32* %r6.global-to-local, align 4
  %v2_16480 = add i32 %v1_16480, 76
  %v3_16480 = inttoptr i32 %v2_16480 to i32*
  store i32 %v3_1647c, i32* %v3_16480, align 4
  %v2_16484 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16484, i32* %r4.global-to-local, align 4
  ret i32 %v5_16464

; uselistorder directives
  uselistorder i32 %v0_1641c, { 1, 0, 2, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder i32 76, { 2, 0, 1 }
  uselistorder i32 68, { 2, 0, 1 }
  uselistorder i32 60, { 3, 1, 2, 0, 4 }
  uselistorder i32 72, { 2, 0, 1 }
  uselistorder i32 64, { 17, 13, 14, 0, 8, 50, 9, 15, 10, 16, 18, 19, 11, 20, 21, 22, 1, 23, 24, 25, 2, 26, 27, 28, 12, 29, 30, 31, 3, 32, 33, 34, 4, 35, 36, 37, 5, 38, 39, 40, 41, 42, 6, 43, 44, 45, 46, 47, 7, 48, 49 }
  uselistorder i32 56, { 4, 2, 3, 6, 5, 0, 1 }
  uselistorder i32 52, { 2, 3, 0, 1, 4, 5, 6 }
  uselistorder i32 15, { 14, 13, 12, 3, 0, 26, 4, 5, 6, 7, 8, 9, 10, 15, 16, 11, 17, 18, 19, 20, 1, 21, 22, 23, 24, 2, 25 }
  uselistorder i32 14, { 10, 9, 22, 8, 2, 3, 4, 5, 6, 11, 12, 7, 13, 14, 15, 16, 0, 17, 18, 19, 20, 1, 21 }
  uselistorder i32 13, { 17, 13, 12, 5, 2, 14, 15, 16, 61, 0, 1, 6, 7, 8, 9, 18, 19, 20, 21, 22, 10, 23, 24, 25, 26, 27, 28, 29, 30, 11, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 3, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 4, 59, 60 }
  uselistorder i32 9, { 48, 49, 50, 12, 5, 72, 6, 7, 66, 38, 14, 42, 15, 41, 13, 3, 67, 39, 68, 2, 40, 16, 70, 71, 8, 17, 43, 44, 18, 19, 20, 45, 21, 46, 22, 47, 0, 23, 24, 25, 26, 1, 27, 9, 28, 69, 51, 52, 10, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 4, 65, 29, 30, 31, 32, 33, 34, 35, 36, 37, 73, 74, 11, 75 }
  uselistorder i32 (i8*, i32)* @function_14870, { 2, 0, 8, 7, 1, 3, 4, 5, 6 }
  uselistorder i32 88, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
}

define i32 @function_16488(i32 %arg1) local_unnamed_addr {
dec_label_pc_16488:
  ret i32 %arg1
}

define i32 @function_16490() local_unnamed_addr {
dec_label_pc_16490:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_16490 = load i32, i32* @r1, align 4
  %v1_16490 = load i32, i32* @r0, align 4
  %v2_16490 = sub i32 %v0_16490, %v1_16490
  %v3_16490 = icmp ult i32 %v0_16490, %v1_16490
  %v4_16490 = xor i32 %v1_16490, %v0_16490
  %v5_16490 = xor i32 %v2_16490, %v0_16490
  %v6_16490 = and i32 %v5_16490, %v4_16490
  %v7_16490 = icmp slt i32 %v6_16490, 0
  store i1 %v7_16490, i1* %cpsr_v.global-to-local, align 1
  %v8_16490 = icmp slt i32 %v2_16490, 0
  store i1 %v8_16490, i1* %cpsr_n.global-to-local, align 1
  %v9_16490 = icmp eq i32 %v0_16490, %v1_16490
  store i1 %v9_16490, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_16490, label %dec_label_pc_166dc, label %dec_label_pc_16498

dec_label_pc_16498:                               ; preds = %dec_label_pc_16490
  br i1 %v9_16490, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_16498
  %merge = phi i32 [ %v0_16490, %dec_label_pc_16498 ], [ %v2_16770, %bb141 ], [ %v11_1678c, %bb144 ], [ %v7_1678c, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_16498
  store i32 %v1_16490, i32* %stack_var_-8, align 4
  %v0_164a0 = load i32, i32* @r2, align 4
  %v2_164a0 = add i32 %v0_164a0, -4
  store i32 %v2_164a0, i32* %r2.global-to-local, align 4
  %v4_164a0 = sub i32 3, %v0_164a0
  %v5_164a0 = and i32 %v4_164a0, %v0_164a0
  %v6_164a0 = icmp slt i32 %v5_164a0, 0
  store i1 %v6_164a0, i1* %cpsr_v.global-to-local, align 1
  %v7_164a0 = icmp slt i32 %v2_164a0, 0
  store i1 %v7_164a0, i1* %cpsr_n.global-to-local, align 1
  %v8_164a0 = icmp eq i32 %v0_164a0, 4
  store i1 %v8_164a0, i1* %cpsr_z.global-to-local, align 1
  %v5_164a4 = icmp slt i32 %v0_164a0, 4
  br i1 %v5_164a4, label %bb131, label %dec_label_pc_164a8

dec_label_pc_164a8:                               ; preds = %bb
  %v1_164a8 = urem i32 %v1_16490, 4
  store i32 %v1_164a8, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_164a8 = icmp eq i32 %v1_164a8, 0
  store i1 %v2_164a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_164a8, label %dec_label_pc_164b0, label %dec_label_pc_16554

dec_label_pc_164b0:                               ; preds = %dec_label_pc_164a8
  %v1_164b0 = urem i32 %v0_16490, 4
  store i32 %v1_164b0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_164b0 = icmp eq i32 %v1_164b0, 0
  store i1 %v2_164b0, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_16490 to i2
  br i1 %v2_164b0, label %dec_label_pc_164b8, label %dec_label_pc_16584

dec_label_pc_164b8:                               ; preds = %dec_label_pc_164b0, %dec_label_pc_1657c
  %v0_164d092 = phi i32 [ %v1_16490, %dec_label_pc_164b0 ], [ %v0_165cc75, %dec_label_pc_1657c ]
  %v0_164cc91 = phi i32 [ %v0_16490, %dec_label_pc_164b0 ], [ %v0_1657c, %dec_label_pc_1657c ]
  %v0_164b8 = phi i32 [ %v2_164a0, %dec_label_pc_164b0 ], [ %v2_16574, %dec_label_pc_1657c ]
  %v2_164b8 = add i32 %v0_164b8, -8
  store i32 %v2_164b8, i32* %r2.global-to-local, align 4
  %v4_164b8 = sub i32 7, %v0_164b8
  %v5_164b8 = and i32 %v4_164b8, %v0_164b8
  %v6_164b8 = icmp slt i32 %v5_164b8, 0
  store i1 %v6_164b8, i1* %cpsr_v.global-to-local, align 1
  %v7_164b8 = icmp slt i32 %v2_164b8, 0
  store i1 %v7_164b8, i1* %cpsr_n.global-to-local, align 1
  %v8_164b8 = icmp eq i32 %v0_164b8, 8
  store i1 %v8_164b8, i1* %cpsr_z.global-to-local, align 1
  %v5_164bc = icmp slt i32 %v0_164b8, 8
  br i1 %v5_164bc, label %dec_label_pc_1650c, label %dec_label_pc_164c0

dec_label_pc_164c0:                               ; preds = %dec_label_pc_164b8
  %v2_164c0 = add i32 %v0_164b8, -28
  store i32 %v2_164c0, i32* %r2.global-to-local, align 4
  %v4_164c0 = sub i32 27, %v0_164b8
  %v5_164c0 = and i32 %v4_164c0, %v2_164b8
  %v6_164c0 = icmp slt i32 %v5_164c0, 0
  store i1 %v6_164c0, i1* %cpsr_v.global-to-local, align 1
  %v7_164c0 = icmp slt i32 %v2_164c0, 0
  store i1 %v7_164c0, i1* %cpsr_n.global-to-local, align 1
  %v8_164c0 = icmp eq i32 %v2_164b8, 20
  store i1 %v8_164c0, i1* %cpsr_z.global-to-local, align 1
  %v5_164c4 = icmp slt i32 %v2_164b8, 20
  br i1 %v5_164c4, label %dec_label_pc_164f8, label %dec_label_pc_164c8

dec_label_pc_164c8:                               ; preds = %dec_label_pc_164c0
  %v0_164c8 = load i32, i32* @r4, align 4
  store i32 %v0_164c8, i32* %stack_var_-12, align 4
  br label %dec_label_pc_164cc

dec_label_pc_164cc:                               ; preds = %dec_label_pc_164cc.dec_label_pc_164cc_crit_edge, %dec_label_pc_164c8
  %v0_164d0 = phi i32 [ %v12_164d8, %dec_label_pc_164cc.dec_label_pc_164cc_crit_edge ], [ %v0_164d092, %dec_label_pc_164c8 ]
  %v0_164cc = phi i32 [ %v0_164cc.pre, %dec_label_pc_164cc.dec_label_pc_164cc_crit_edge ], [ %v0_164cc91, %dec_label_pc_164c8 ]
  %v1_164cc = inttoptr i32 %v0_164cc to i32*
  %v2_164cc = load i32, i32* %v1_164cc, align 4
  store i32 %v2_164cc, i32* %r3.global-to-local, align 4
  %v3_164cc = add i32 %v0_164cc, 4
  %v4_164cc = inttoptr i32 %v3_164cc to i32*
  %v5_164cc = load i32, i32* %v4_164cc, align 4
  store i32 %v5_164cc, i32* %r4.global-to-local, align 4
  %v6_164cc = add i32 %v0_164cc, 8
  %v7_164cc = inttoptr i32 %v6_164cc to i32*
  %v8_164cc = load i32, i32* %v7_164cc, align 4
  store i32 %v8_164cc, i32* %ip.global-to-local, align 4
  %v9_164cc = add i32 %v0_164cc, 12
  %v10_164cc = inttoptr i32 %v9_164cc to i32*
  %v11_164cc = load i32, i32* %v10_164cc, align 4
  store i32 %v11_164cc, i32* %lr.global-to-local, align 4
  %v12_164cc = add i32 %v0_164cc, 16
  store i32 %v12_164cc, i32* %r1.global-to-local, align 4
  %v1_164d0 = inttoptr i32 %v0_164d0 to i32*
  store i32 %v2_164cc, i32* %v1_164d0, align 4
  %v3_164d0 = add i32 %v0_164d0, 4
  %v4_164d0 = inttoptr i32 %v3_164d0 to i32*
  %v5_164d0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_164d0, i32* %v4_164d0, align 4
  %v6_164d0 = add i32 %v0_164d0, 8
  %v7_164d0 = inttoptr i32 %v6_164d0 to i32*
  %v8_164d0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_164d0, i32* %v7_164d0, align 4
  %v9_164d0 = add i32 %v0_164d0, 12
  %v10_164d0 = inttoptr i32 %v9_164d0 to i32*
  %v11_164d0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_164d0, i32* %v10_164d0, align 4
  %v12_164d0 = add i32 %v0_164d0, 16
  store i32 %v12_164d0, i32* %r0.global-to-local, align 4
  %v0_164d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_164d4 = inttoptr i32 %v0_164d4 to i32*
  %v2_164d4 = load i32, i32* %v1_164d4, align 4
  store i32 %v2_164d4, i32* %r3.global-to-local, align 4
  %v3_164d4 = add i32 %v0_164d4, 4
  %v4_164d4 = inttoptr i32 %v3_164d4 to i32*
  %v5_164d4 = load i32, i32* %v4_164d4, align 4
  store i32 %v5_164d4, i32* %r4.global-to-local, align 4
  %v6_164d4 = add i32 %v0_164d4, 8
  %v7_164d4 = inttoptr i32 %v6_164d4 to i32*
  %v8_164d4 = load i32, i32* %v7_164d4, align 4
  store i32 %v8_164d4, i32* @ip, align 4
  %v9_164d4 = add i32 %v0_164d4, 12
  %v10_164d4 = inttoptr i32 %v9_164d4 to i32*
  %v11_164d4 = load i32, i32* %v10_164d4, align 4
  store i32 %v11_164d4, i32* @lr, align 4
  %v12_164d4 = add i32 %v0_164d4, 16
  store i32 %v12_164d4, i32* @r1, align 4
  %v1_164d8 = inttoptr i32 %v12_164d0 to i32*
  store i32 %v2_164d4, i32* %v1_164d8, align 4
  %v3_164d8 = add i32 %v0_164d0, 20
  %v4_164d8 = inttoptr i32 %v3_164d8 to i32*
  %v5_164d8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_164d8, i32* %v4_164d8, align 4
  %v6_164d8 = add i32 %v0_164d0, 24
  %v7_164d8 = inttoptr i32 %v6_164d8 to i32*
  %v8_164d8 = load i32, i32* @ip, align 4
  store i32 %v8_164d8, i32* %v7_164d8, align 4
  %v9_164d8 = add i32 %v0_164d0, 28
  %v10_164d8 = inttoptr i32 %v9_164d8 to i32*
  %v11_164d8 = load i32, i32* @lr, align 4
  store i32 %v11_164d8, i32* %v10_164d8, align 4
  %v12_164d8 = add i32 %v0_164d0, 32
  store i32 %v12_164d8, i32* @r0, align 4
  %v0_164dc = load i32, i32* %r2.global-to-local, align 4
  %v2_164dc = add i32 %v0_164dc, -32
  store i32 %v2_164dc, i32* %r2.global-to-local, align 4
  %v6_164e0 = icmp slt i32 %v0_164dc, 32
  br i1 %v6_164e0, label %dec_label_pc_164e4, label %dec_label_pc_164cc.dec_label_pc_164cc_crit_edge

dec_label_pc_164cc.dec_label_pc_164cc_crit_edge:  ; preds = %dec_label_pc_164cc
  %v0_164cc.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_164cc

dec_label_pc_164e4:                               ; preds = %dec_label_pc_164cc
  %v4_164e4 = add i32 %v0_164dc, -16
  %v6_164e4 = add i32 %v0_164dc, 2147483616
  %v7_164e4 = and i32 %v4_164e4, %v6_164e4
  %v8_164e4 = icmp slt i32 %v7_164e4, 0
  store i1 %v8_164e4, i1* %cpsr_v.global-to-local, align 1
  %v9_164e4 = icmp slt i32 %v4_164e4, 0
  store i1 %v9_164e4, i1* %cpsr_n.global-to-local, align 1
  %v10_164e4 = icmp eq i32 %v4_164e4, 0
  store i1 %v10_164e4, i1* %cpsr_z.global-to-local, align 1
  %v5_164e8 = icmp slt i32 %v2_164dc, -16
  br i1 %v5_164e8, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_164e4
  %v6_164e8 = load i32, i32* @r1, align 4
  %v7_164e8 = inttoptr i32 %v6_164e8 to i32*
  %v8_164e8 = load i32, i32* %v7_164e8, align 4
  store i32 %v8_164e8, i32* %r3.global-to-local, align 4
  %v9_164e8 = add i32 %v6_164e8, 4
  %v10_164e8 = inttoptr i32 %v9_164e8 to i32*
  %v11_164e8 = load i32, i32* %v10_164e8, align 4
  store i32 %v11_164e8, i32* %r4.global-to-local, align 4
  %v12_164e8 = add i32 %v6_164e8, 8
  %v13_164e8 = inttoptr i32 %v12_164e8 to i32*
  %v14_164e8 = load i32, i32* %v13_164e8, align 4
  store i32 %v14_164e8, i32* @ip, align 4
  %v15_164e8 = add i32 %v6_164e8, 12
  %v16_164e8 = inttoptr i32 %v15_164e8 to i32*
  %v17_164e8 = load i32, i32* %v16_164e8, align 4
  store i32 %v17_164e8, i32* @lr, align 4
  %v18_164e8 = add i32 %v6_164e8, 16
  store i32 %v18_164e8, i32* @r1, align 4
  %v7_164ec = inttoptr i32 %v12_164d8 to i32*
  store i32 %v8_164e8, i32* %v7_164ec, align 4
  %v9_164ec = add i32 %v0_164d0, 36
  %v10_164ec = inttoptr i32 %v9_164ec to i32*
  %v11_164ec = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_164ec, i32* %v10_164ec, align 4
  %v12_164ec = add i32 %v0_164d0, 40
  %v13_164ec = inttoptr i32 %v12_164ec to i32*
  %v14_164ec = load i32, i32* @ip, align 4
  store i32 %v14_164ec, i32* %v13_164ec, align 4
  %v15_164ec = add i32 %v0_164d0, 44
  %v16_164ec = inttoptr i32 %v15_164ec to i32*
  %v17_164ec = load i32, i32* @lr, align 4
  store i32 %v17_164ec, i32* %v16_164ec, align 4
  %v18_164ec = add i32 %v0_164d0, 48
  store i32 %v18_164ec, i32* @r0, align 4
  %v6_164f0 = load i32, i32* %r2.global-to-local, align 4
  %v7_164f0 = add i32 %v6_164f0, -16
  store i32 %v7_164f0, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_164e4, %bb128
  %v3_16500101 = phi i32 [ %v12_164d8, %dec_label_pc_164e4 ], [ %v18_164ec, %bb128 ]
  %v0_164f895 = phi i32 [ %v2_164dc, %dec_label_pc_164e4 ], [ %v7_164f0, %bb128 ]
  %v2_164f4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_164f4, i32* @r4, align 4
  br label %dec_label_pc_164f8

dec_label_pc_164f8:                               ; preds = %dec_label_pc_164c0, %.thread1
  %v3_16500100 = phi i32 [ %v0_164d092, %dec_label_pc_164c0 ], [ %v3_16500101, %.thread1 ]
  %v0_164f8 = phi i32 [ %v2_164c0, %dec_label_pc_164c0 ], [ %v0_164f895, %.thread1 ]
  %v1_164f8 = add i32 %v0_164f8, 20
  store i32 %v1_164f8, i32* %r2.global-to-local, align 4
  %v3_164f8 = sub i32 0, %v0_164f8
  %v4_164f8 = and i32 %v1_164f8, %v3_164f8
  %v5_164f8 = icmp slt i32 %v4_164f8, 0
  store i1 %v5_164f8, i1* %cpsr_v.global-to-local, align 1
  %v6_164f8 = icmp slt i32 %v1_164f8, 0
  store i1 %v6_164f8, i1* %cpsr_n.global-to-local, align 1
  %v7_164f8 = icmp eq i32 %v1_164f8, 0
  store i1 %v7_164f8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_164fc

dec_label_pc_164fc:                               ; preds = %.thread117, %dec_label_pc_164f8
  %v0_1650c.pre147 = phi i32 [ %v0_1650c.pre, %.thread117 ], [ %v1_164f8, %dec_label_pc_164f8 ]
  %v3_16500 = phi i32 [ %v3_1650098118, %.thread117 ], [ %v3_16500100, %dec_label_pc_164f8 ]
  %v1_16504 = phi i1 [ %v1_16508, %.thread117 ], [ %v5_164f8, %dec_label_pc_164f8 ]
  %v0_16504 = phi i1 [ %v0_16508, %.thread117 ], [ %v6_164f8, %dec_label_pc_164f8 ]
  %v2_164fc = xor i1 %v1_16504, %v0_16504
  br i1 %v2_164fc, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_164fc
  %v3_164fc = load i32, i32* @r1, align 4
  %v4_164fc = inttoptr i32 %v3_164fc to i32*
  %v5_164fc = load i32, i32* %v4_164fc, align 4
  store i32 %v5_164fc, i32* %r3.global-to-local, align 4
  %v6_164fc = add i32 %v3_164fc, 4
  %v7_164fc = inttoptr i32 %v6_164fc to i32*
  %v8_164fc = load i32, i32* %v7_164fc, align 4
  store i32 %v8_164fc, i32* @ip, align 4
  %v9_164fc = add i32 %v3_164fc, 8
  %v10_164fc = inttoptr i32 %v9_164fc to i32*
  %v11_164fc = load i32, i32* %v10_164fc, align 4
  store i32 %v11_164fc, i32* @lr, align 4
  %v12_164fc = add i32 %v3_164fc, 12
  store i32 %v12_164fc, i32* @r1, align 4
  %v4_16500 = inttoptr i32 %v3_16500 to i32*
  store i32 %v5_164fc, i32* %v4_16500, align 4
  %v6_16500 = add i32 %v3_16500, 4
  %v7_16500 = inttoptr i32 %v6_16500 to i32*
  %v8_16500 = load i32, i32* @ip, align 4
  store i32 %v8_16500, i32* %v7_16500, align 4
  %v9_16500 = add i32 %v3_16500, 8
  %v10_16500 = inttoptr i32 %v9_16500 to i32*
  %v11_16500 = load i32, i32* @lr, align 4
  store i32 %v11_16500, i32* %v10_16500, align 4
  %v12_16500 = add i32 %v3_16500, 12
  store i32 %v12_16500, i32* @r0, align 4
  %v3_16504 = load i32, i32* %r2.global-to-local, align 4
  %v4_16504 = add i32 %v3_16504, -12
  store i32 %v4_16504, i32* %r2.global-to-local, align 4
  %v6_16504 = sub i32 11, %v3_16504
  %v7_16504 = and i32 %v6_16504, %v3_16504
  %v8_16504 = icmp slt i32 %v7_16504, 0
  store i1 %v8_16504, i1* %cpsr_v.global-to-local, align 1
  %v9_16504 = icmp slt i32 %v4_16504, 0
  store i1 %v9_16504, i1* %cpsr_n.global-to-local, align 1
  %v10_16504 = icmp eq i32 %v3_16504, 12
  store i1 %v10_16504, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_164fc, %bb129
  %v0_1650c.pre = phi i32 [ %v4_16504, %bb129 ], [ %v0_1650c.pre147, %dec_label_pc_164fc ]
  %v3_1650098118 = phi i32 [ %v12_16500, %bb129 ], [ %v3_16500, %dec_label_pc_164fc ]
  %v1_16508 = phi i1 [ %v8_16504, %bb129 ], [ %v1_16504, %dec_label_pc_164fc ]
  %v0_16508 = phi i1 [ %v9_16504, %bb129 ], [ %v0_16504, %dec_label_pc_164fc ]
  %v2_16508 = xor i1 %v1_16508, %v0_16508
  br i1 %v2_16508, label %dec_label_pc_1650c, label %dec_label_pc_164fc

dec_label_pc_1650c:                               ; preds = %.thread117, %dec_label_pc_164b8
  %v7_1651c = phi i32 [ %v0_164d092, %dec_label_pc_164b8 ], [ %v3_1650098118, %.thread117 ]
  %v0_1650c = phi i32 [ %v2_164b8, %dec_label_pc_164b8 ], [ %v0_1650c.pre, %.thread117 ]
  %v2_1650c = add i32 %v0_1650c, 8
  store i32 %v2_1650c, i32* %r2.global-to-local, align 4
  %v4_1650c = sub i32 0, %v0_1650c
  %v5_1650c = and i32 %v2_1650c, %v4_1650c
  %v6_1650c = icmp slt i32 %v5_1650c, 0
  store i1 %v6_1650c, i1* %cpsr_v.global-to-local, align 1
  %v7_1650c = icmp slt i32 %v2_1650c, 0
  store i1 %v7_1650c, i1* %cpsr_n.global-to-local, align 1
  %v8_1650c = icmp eq i32 %v2_1650c, 0
  store i1 %v8_1650c, i1* %cpsr_z.global-to-local, align 1
  %v5_16510 = icmp slt i32 %v0_1650c, -8
  br i1 %v5_16510, label %bb131, label %dec_label_pc_16514

dec_label_pc_16514:                               ; preds = %dec_label_pc_1650c
  %v6_16514 = add i32 %v0_1650c, 4
  store i32 %v6_16514, i32* %r2.global-to-local, align 4
  %v8_16514 = sub i32 -5, %v0_1650c
  %v9_16514 = and i32 %v8_16514, %v2_1650c
  %v10_16514 = icmp slt i32 %v9_16514, 0
  store i1 %v10_16514, i1* %cpsr_v.global-to-local, align 1
  %v11_16514 = icmp slt i32 %v6_16514, 0
  store i1 %v11_16514, i1* %cpsr_n.global-to-local, align 1
  %v12_16514 = icmp eq i32 %v2_1650c, 4
  store i1 %v12_16514, i1* %cpsr_z.global-to-local, align 1
  %v5_16518 = icmp slt i32 %v2_1650c, 4
  %v6_16518 = load i32, i32* @r1, align 4
  %v7_16518 = inttoptr i32 %v6_16518 to i32*
  %v8_16518 = load i32, i32* %v7_16518, align 4
  store i32 %v8_16518, i32* %r3.global-to-local, align 4
  %v10_16518 = add i32 %v6_16518, 4
  br i1 %v5_16518, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_16514
  store i32 %v10_16518, i32* @r1, align 4
  %v8_1651c = inttoptr i32 %v7_1651c to i32*
  store i32 %v8_16518, i32* %v8_1651c, align 4
  %v9_1651c = load i32, i32* @r0, align 4
  %v10_1651c = add i32 %v9_1651c, 4
  store i32 %v10_1651c, i32* @r0, align 4
  %v0_1652c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_16514
  %v10_16520 = inttoptr i32 %v10_16518 to i32*
  %v11_16520 = load i32, i32* %v10_16520, align 4
  store i32 %v11_16520, i32* @ip, align 4
  %v12_16520 = add i32 %v6_16518, 8
  store i32 %v12_16520, i32* @r1, align 4
  %v7_16524 = inttoptr i32 %v7_1651c to i32*
  store i32 %v8_16518, i32* %v7_16524, align 4
  %v9_16524 = add i32 %v7_1651c, 4
  %v10_16524 = inttoptr i32 %v9_16524 to i32*
  %v11_16524 = load i32, i32* @ip, align 4
  store i32 %v11_16524, i32* %v10_16524, align 4
  %v12_16524 = add i32 %v7_1651c, 8
  store i32 %v12_16524, i32* @r0, align 4
  %v6_16528 = load i32, i32* %r2.global-to-local, align 4
  %v7_16528 = add i32 %v6_16528, -4
  store i32 %v7_16528, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_1650c, %bb, %dec_label_pc_166d4, %dec_label_pc_16668, %dec_label_pc_165fc, %bb130
  %v2_1653c = phi i32 [ %v10_1651c, %.thread5 ], [ %v0_165cc75, %.thread11 ], [ %v7_1651c, %dec_label_pc_1650c ], [ %v1_16490, %bb ], [ %v2_1653c113, %dec_label_pc_166d4 ], [ %v2_1653c112, %dec_label_pc_16668 ], [ %v2_1653c111, %dec_label_pc_165fc ], [ %v12_16524, %bb130 ]
  %v0_1652c = phi i32 [ %v0_1652c.pre, %.thread5 ], [ %v2_16574, %.thread11 ], [ %v2_1650c, %dec_label_pc_1650c ], [ %v2_164a0, %bb ], [ %v0_1652c109, %dec_label_pc_166d4 ], [ %v0_1652c108, %dec_label_pc_16668 ], [ %v0_1652c107, %dec_label_pc_165fc ], [ %v7_16528, %bb130 ]
  %v1_1652c = add i32 %v0_1652c, 4
  store i32 %v1_1652c, i32* %r2.global-to-local, align 4
  %v3_1652c = sub i32 0, %v0_1652c
  %v4_1652c = and i32 %v1_1652c, %v3_1652c
  %v5_1652c = icmp slt i32 %v4_1652c, 0
  store i1 %v5_1652c, i1* %cpsr_v.global-to-local, align 1
  %v6_1652c = icmp slt i32 %v1_1652c, 0
  store i1 %v6_1652c, i1* %cpsr_n.global-to-local, align 1
  %v7_1652c = icmp eq i32 %v1_1652c, 0
  store i1 %v7_1652c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1652c, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_16530 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_16530, i32* %r0.global-to-local, align 4
  ret i32 %v3_16530

bb133:                                            ; preds = %bb131
  %v1_16534 = add i32 %v0_1652c, 2
  %v3_16534 = sub i32 -3, %v0_1652c
  %v4_16534 = and i32 %v3_16534, %v1_1652c
  %v5_16534 = icmp slt i32 %v4_16534, 0
  store i1 %v5_16534, i1* %cpsr_v.global-to-local, align 1
  %v6_16534 = icmp slt i32 %v1_16534, 0
  store i1 %v6_16534, i1* %cpsr_n.global-to-local, align 1
  %v7_16534 = icmp eq i32 %v1_1652c, 2
  store i1 %v7_16534, i1* %cpsr_z.global-to-local, align 1
  %v0_16538 = load i32, i32* @r1, align 4
  %v1_16538 = inttoptr i32 %v0_16538 to i8*
  %v2_16538 = load i8, i8* %v1_16538, align 1
  %v3_16538 = zext i8 %v2_16538 to i32
  store i32 %v3_16538, i32* %r3.global-to-local, align 4
  %v5_16538 = add i32 %v0_16538, 1
  store i32 %v5_16538, i32* %r1.global-to-local, align 4
  %v3_1653c = inttoptr i32 %v2_1653c to i8*
  store i8 %v2_16538, i8* %v3_1653c, align 1
  %v4_1653c = load i32, i32* @r0, align 4
  %v5_1653c = add i32 %v4_1653c, 1
  store i32 %v5_1653c, i32* %r0.global-to-local, align 4
  %v0_16540 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_16540 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_16540 = xor i1 %v0_16540, %v1_16540
  br i1 %v2_16540, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_16540 = load i32, i32* %r1.global-to-local, align 4
  %v4_16540 = inttoptr i32 %v3_16540 to i8*
  %v5_16540 = load i8, i8* %v4_16540, align 1
  %v6_16540 = zext i8 %v5_16540 to i32
  store i32 %v6_16540, i32* %r3.global-to-local, align 4
  %v8_16540 = add i32 %v3_16540, 1
  store i32 %v8_16540, i32* %r1.global-to-local, align 4
  %v6_16544 = inttoptr i32 %v5_1653c to i8*
  store i8 %v5_16540, i8* %v6_16544, align 1
  %v7_16544 = load i32, i32* %r0.global-to-local, align 4
  %v8_16544 = add i32 %v7_16544, 1
  store i32 %v8_16544, i32* %r0.global-to-local, align 4
  %v1_16548.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_16548.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_1654c = phi i32 [ %v8_16544, %bb134 ], [ %v5_1653c, %bb133 ]
  %v2_1654c = phi i1 [ %v2_16548.pre, %bb134 ], [ %v1_16540, %bb133 ]
  %v1_1654c = phi i1 [ %v1_16548.pre, %bb134 ], [ %v0_16540, %bb133 ]
  %v0_16548 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_16548 = xor i1 %v2_1654c, %v1_1654c
  %v4_16548 = or i1 %v0_16548, %v3_16548
  br i1 %v4_16548, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_16548 = load i32, i32* %r1.global-to-local, align 4
  %v6_16548 = inttoptr i32 %v5_16548 to i8*
  %v7_16548 = load i8, i8* %v6_16548, align 1
  %v8_16548 = zext i8 %v7_16548 to i32
  store i32 %v8_16548, i32* %r3.global-to-local, align 4
  %v10_16548 = add i32 %v5_16548, 1
  store i32 %v10_16548, i32* %r1.global-to-local, align 4
  %v8_1654c = inttoptr i32 %v7_1654c to i8*
  store i8 %v7_16548, i8* %v8_1654c, align 1
  %v9_1654c = load i32, i32* %r0.global-to-local, align 4
  %v10_1654c = add i32 %v9_1654c, 1
  store i32 %v10_1654c, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_16550 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_16550, i32* %r0.global-to-local, align 4
  ret i32 %v2_16550

dec_label_pc_16554:                               ; preds = %dec_label_pc_164a8
  %v1_16554 = sub nsw i32 4, %v1_164a8
  store i32 %v1_16554, i32* @ip, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_16558 = icmp ult i32 %v1_16554, 2
  store i1 %v8_16558, i1* %cpsr_n.global-to-local, align 1
  %v9_16558 = icmp eq i32 %v1_16554, 2
  store i1 %v9_16558, i1* %cpsr_z.global-to-local, align 1
  %v1_1655c = inttoptr i32 %v0_16490 to i8*
  %v2_1655c = load i8, i8* %v1_1655c, align 1
  %v3_1655c = zext i8 %v2_1655c to i32
  store i32 %v3_1655c, i32* %r3.global-to-local, align 4
  %v5_1655c = add i32 %v0_16490, 1
  store i32 %v5_1655c, i32* @r1, align 4
  %v3_16560 = inttoptr i32 %v1_16490 to i8*
  store i8 %v2_1655c, i8* %v3_16560, align 1
  %v4_16560 = load i32, i32* @r0, align 4
  %v5_16560 = add i32 %v4_16560, 1
  store i32 %v5_16560, i32* @r0, align 4
  br i1 %v8_16558, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_16554
  %v6_16564 = load i32, i32* @r1, align 4
  %v7_16564 = inttoptr i32 %v6_16564 to i8*
  %v8_16564 = load i8, i8* %v7_16564, align 1
  %v9_16564 = zext i8 %v8_16564 to i32
  store i32 %v9_16564, i32* %r3.global-to-local, align 4
  %v11_16564 = add i32 %v6_16564, 1
  store i32 %v11_16564, i32* @r1, align 4
  %v9_16568 = inttoptr i32 %v5_16560 to i8*
  store i8 %v8_16564, i8* %v9_16568, align 1
  %v10_16568 = load i32, i32* @r0, align 4
  %v11_16568 = add i32 %v10_16568, 1
  store i32 %v11_16568, i32* @r0, align 4
  br i1 %v9_16558, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_1656c = load i32, i32* @r1, align 4
  %v9_1656c = inttoptr i32 %v8_1656c to i8*
  %v10_1656c = load i8, i8* %v9_1656c, align 1
  %v11_1656c = zext i8 %v10_1656c to i32
  store i32 %v11_1656c, i32* %r3.global-to-local, align 4
  %v13_1656c = add i32 %v8_1656c, 1
  store i32 %v13_1656c, i32* @r1, align 4
  %v11_16570 = inttoptr i32 %v11_16568 to i8*
  store i8 %v10_1656c, i8* %v11_16570, align 1
  %v12_16570 = load i32, i32* @r0, align 4
  %v13_16570 = add i32 %v12_16570, 1
  store i32 %v13_16570, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_16554, %bb137
  %v0_165cc75 = phi i32 [ %v11_16568, %bb136 ], [ %v5_16560, %dec_label_pc_16554 ], [ %v13_16570, %bb137 ]
  %v0_16574 = load i32, i32* %r2.global-to-local, align 4
  %v1_16574 = load i32, i32* @ip, align 4
  %v2_16574 = sub i32 %v0_16574, %v1_16574
  store i32 %v2_16574, i32* %r2.global-to-local, align 4
  %v4_16574 = xor i32 %v1_16574, %v0_16574
  %v5_16574 = xor i32 %v2_16574, %v0_16574
  %v6_16574 = and i32 %v5_16574, %v4_16574
  %v7_16574 = icmp slt i32 %v6_16574, 0
  store i1 %v7_16574, i1* %cpsr_v.global-to-local, align 1
  %v8_16574 = icmp slt i32 %v2_16574, 0
  store i1 %v8_16574, i1* %cpsr_n.global-to-local, align 1
  %v9_16574 = icmp eq i32 %v0_16574, %v1_16574
  store i1 %v9_16574, i1* %cpsr_z.global-to-local, align 1
  %v5_16578 = icmp slt i32 %v0_16574, %v1_16574
  br i1 %v5_16578, label %bb131, label %dec_label_pc_1657c

dec_label_pc_1657c:                               ; preds = %.thread11
  %v0_1657c = load i32, i32* @r1, align 4
  %v1_1657c = urem i32 %v0_1657c, 4
  store i32 %v1_1657c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1657c = icmp eq i32 %v1_1657c, 0
  store i1 %v2_1657c, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_1657c to i2
  br i1 %v2_1657c, label %dec_label_pc_164b8, label %dec_label_pc_16584

dec_label_pc_16584:                               ; preds = %dec_label_pc_164b0, %dec_label_pc_1657c
  %v0_165cc74 = phi i32 [ %v1_16490, %dec_label_pc_164b0 ], [ %v0_165cc75, %dec_label_pc_1657c ]
  %v0_16678 = phi i32 [ %v2_164a0, %dec_label_pc_164b0 ], [ %v2_16574, %dec_label_pc_1657c ]
  %v0_1658c.off0 = phi i2 [ %extract.t, %dec_label_pc_164b0 ], [ %extract.t123, %dec_label_pc_1657c ]
  %v0_16584 = phi i32 [ %v0_16490, %dec_label_pc_164b0 ], [ %v0_1657c, %dec_label_pc_1657c ]
  %v1_16584 = and i32 %v0_16584, -4
  store i32 %v1_16584, i32* %r1.global-to-local, align 4
  %v1_16588 = inttoptr i32 %v1_16584 to i32*
  %v2_16588 = load i32, i32* %v1_16588, align 4
  store i32 %v2_16588, i32* @lr, align 4
  %v4_16588 = add i32 %v1_16584, 4
  store i32 %v4_16588, i32* %r1.global-to-local, align 4
  %v2_16670 = add i32 %v0_16678, -12
  %v4_16670 = sub i32 11, %v0_16678
  %v5_16670 = and i32 %v4_16670, %v0_16678
  %v6_16670 = icmp slt i32 %v5_16670, 0
  store i1 %v6_16670, i1* %cpsr_v.global-to-local, align 1
  %v7_16670 = icmp slt i32 %v2_16670, 0
  store i1 %v7_16670, i1* %cpsr_n.global-to-local, align 1
  %v8_16670 = icmp eq i32 %v0_16678, 12
  store i1 %v8_16670, i1* %cpsr_z.global-to-local, align 1
  %v5_16674 = icmp slt i32 %v0_16678, 12
  switch i2 %v0_1658c.off0, label %dec_label_pc_16598 [
    i2 -1, label %dec_label_pc_16670
    i2 -2, label %dec_label_pc_16604
  ]

dec_label_pc_16598:                               ; preds = %dec_label_pc_16584
  br i1 %v5_16674, label %dec_label_pc_165e4, label %dec_label_pc_165a0

dec_label_pc_165a0:                               ; preds = %dec_label_pc_16598
  store i32 %v2_16670, i32* %r2.global-to-local, align 4
  %v3_165a4 = load i32, i32* @r4, align 4
  store i32 %v3_165a4, i32* %stack_var_-16, align 4
  %v6_165a4 = load i32, i32* @r5, align 4
  store i32 %v6_165a4, i32* %stack_var_-12, align 4
  br label %dec_label_pc_165a8

dec_label_pc_165a8:                               ; preds = %dec_label_pc_165a8.dec_label_pc_165a8_crit_edge, %dec_label_pc_165a0
  %v0_165cc = phi i32 [ %v12_165cc, %dec_label_pc_165a8.dec_label_pc_165a8_crit_edge ], [ %v0_165cc74, %dec_label_pc_165a0 ]
  %v0_165ac = phi i32 [ %v0_165ac.pre, %dec_label_pc_165a8.dec_label_pc_165a8_crit_edge ], [ %v4_16588, %dec_label_pc_165a0 ]
  %v0_165a8 = phi i32 [ %v0_165a8.pre, %dec_label_pc_165a8.dec_label_pc_165a8_crit_edge ], [ %v2_16588, %dec_label_pc_165a0 ]
  %v3_165a8 = udiv i32 %v0_165a8, 256
  store i32 %v3_165a8, i32* %r3.global-to-local, align 4
  %v1_165ac = inttoptr i32 %v0_165ac to i32*
  %v2_165ac = load i32, i32* %v1_165ac, align 4
  store i32 %v2_165ac, i32* %r4.global-to-local, align 4
  %v3_165ac = add i32 %v0_165ac, 4
  %v4_165ac = inttoptr i32 %v3_165ac to i32*
  %v5_165ac = load i32, i32* %v4_165ac, align 4
  store i32 %v5_165ac, i32* %r5.global-to-local, align 4
  %v6_165ac = add i32 %v0_165ac, 8
  %v7_165ac = inttoptr i32 %v6_165ac to i32*
  %v8_165ac = load i32, i32* %v7_165ac, align 4
  store i32 %v8_165ac, i32* %ip.global-to-local, align 4
  %v9_165ac = add i32 %v0_165ac, 12
  %v10_165ac = inttoptr i32 %v9_165ac to i32*
  %v11_165ac = load i32, i32* %v10_165ac, align 4
  store i32 %v11_165ac, i32* @lr, align 4
  %v12_165ac = add i32 %v0_165ac, 16
  store i32 %v12_165ac, i32* %r1.global-to-local, align 4
  %v4_165b0 = mul i32 %v2_165ac, 16777216
  %v5_165b0 = or i32 %v4_165b0, %v3_165a8
  store i32 %v5_165b0, i32* %r3.global-to-local, align 4
  %v3_165b4 = udiv i32 %v2_165ac, 256
  %v4_165b8 = mul i32 %v5_165ac, 16777216
  %v5_165b8 = or i32 %v4_165b8, %v3_165b4
  store i32 %v5_165b8, i32* %r4.global-to-local, align 4
  %v3_165bc = udiv i32 %v5_165ac, 256
  %v4_165c0 = mul i32 %v8_165ac, 16777216
  %v5_165c0 = or i32 %v4_165c0, %v3_165bc
  store i32 %v5_165c0, i32* %r5.global-to-local, align 4
  %v3_165c4 = udiv i32 %v8_165ac, 256
  %v4_165c8 = mul i32 %v11_165ac, 16777216
  %v5_165c8 = or i32 %v4_165c8, %v3_165c4
  store i32 %v5_165c8, i32* @ip, align 4
  %v1_165cc = inttoptr i32 %v0_165cc to i32*
  store i32 %v5_165b0, i32* %v1_165cc, align 4
  %v3_165cc = add i32 %v0_165cc, 4
  %v4_165cc = inttoptr i32 %v3_165cc to i32*
  %v5_165cc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_165cc, i32* %v4_165cc, align 4
  %v6_165cc = add i32 %v0_165cc, 8
  %v7_165cc = inttoptr i32 %v6_165cc to i32*
  %v8_165cc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_165cc, i32* %v7_165cc, align 4
  %v9_165cc = add i32 %v0_165cc, 12
  %v10_165cc = inttoptr i32 %v9_165cc to i32*
  %v11_165cc = load i32, i32* @ip, align 4
  store i32 %v11_165cc, i32* %v10_165cc, align 4
  %v12_165cc = add i32 %v0_165cc, 16
  store i32 %v12_165cc, i32* @r0, align 4
  %v0_165d0 = load i32, i32* %r2.global-to-local, align 4
  %v2_165d0 = add i32 %v0_165d0, -16
  store i32 %v2_165d0, i32* %r2.global-to-local, align 4
  %v6_165d4 = icmp slt i32 %v0_165d0, 16
  br i1 %v6_165d4, label %dec_label_pc_165d8, label %dec_label_pc_165a8.dec_label_pc_165a8_crit_edge

dec_label_pc_165a8.dec_label_pc_165a8_crit_edge:  ; preds = %dec_label_pc_165a8
  %v0_165a8.pre = load i32, i32* @lr, align 4
  %v0_165ac.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_165a8

dec_label_pc_165d8:                               ; preds = %dec_label_pc_165a8
  %v2_165d8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_165d8, i32* @r4, align 4
  %v5_165d8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_165d8, i32* @r5, align 4
  %v2_165dc = add i32 %v0_165d0, -4
  store i32 %v2_165dc, i32* %r2.global-to-local, align 4
  %v4_165dc = add i32 %v0_165d0, 2147483632
  %v5_165dc = and i32 %v2_165dc, %v4_165dc
  %v6_165dc = icmp slt i32 %v5_165dc, 0
  store i1 %v6_165dc, i1* %cpsr_v.global-to-local, align 1
  %v7_165dc = icmp slt i32 %v2_165dc, 0
  store i1 %v7_165dc, i1* %cpsr_n.global-to-local, align 1
  %v8_165dc = icmp eq i32 %v2_165dc, 0
  store i1 %v8_165dc, i1* %cpsr_z.global-to-local, align 1
  %v5_165e0 = icmp slt i32 %v2_165d0, -12
  br i1 %v5_165e0, label %dec_label_pc_165fc, label %dec_label_pc_165e4

dec_label_pc_165e4:                               ; preds = %dec_label_pc_165d8, %dec_label_pc_16598, %dec_label_pc_165e4
  %v1_165f0 = phi i32 [ %v4_165f0, %dec_label_pc_165e4 ], [ %v12_165cc, %dec_label_pc_165d8 ], [ %v0_165cc74, %dec_label_pc_16598 ]
  %v0_165e4 = load i32, i32* @lr, align 4
  %v3_165e4 = udiv i32 %v0_165e4, 256
  store i32 %v3_165e4, i32* %ip.global-to-local, align 4
  %v0_165e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_165e8 = inttoptr i32 %v0_165e8 to i32*
  %v2_165e8 = load i32, i32* %v1_165e8, align 4
  store i32 %v2_165e8, i32* @lr, align 4
  %v4_165e8 = add i32 %v0_165e8, 4
  store i32 %v4_165e8, i32* %r1.global-to-local, align 4
  %v4_165ec = mul i32 %v2_165e8, 16777216
  %v5_165ec = or i32 %v4_165ec, %v3_165e4
  store i32 %v5_165ec, i32* @ip, align 4
  %v2_165f0 = inttoptr i32 %v1_165f0 to i32*
  store i32 %v5_165ec, i32* %v2_165f0, align 4
  %v3_165f0 = load i32, i32* @r0, align 4
  %v4_165f0 = add i32 %v3_165f0, 4
  store i32 %v4_165f0, i32* @r0, align 4
  %v0_165f4 = load i32, i32* %r2.global-to-local, align 4
  %v2_165f4 = add i32 %v0_165f4, -4
  store i32 %v2_165f4, i32* %r2.global-to-local, align 4
  %v6_165f8 = icmp slt i32 %v0_165f4, 4
  br i1 %v6_165f8, label %dec_label_pc_165fc.loopexit, label %dec_label_pc_165e4

dec_label_pc_165fc.loopexit:                      ; preds = %dec_label_pc_165e4
  %v4_165f4 = sub i32 3, %v0_165f4
  %v5_165f4 = and i32 %v4_165f4, %v0_165f4
  %v6_165f4 = icmp slt i32 %v5_165f4, 0
  %v7_165f4 = icmp slt i32 %v2_165f4, 0
  store i1 %v6_165f4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_165f4, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_165fc

dec_label_pc_165fc:                               ; preds = %dec_label_pc_165fc.loopexit, %dec_label_pc_165d8
  %v2_1653c111 = phi i32 [ %v4_165f0, %dec_label_pc_165fc.loopexit ], [ %v12_165cc, %dec_label_pc_165d8 ]
  %v0_1652c107 = phi i32 [ %v2_165f4, %dec_label_pc_165fc.loopexit ], [ %v2_165dc, %dec_label_pc_165d8 ]
  %v0_165fc = load i32, i32* %r1.global-to-local, align 4
  %v1_165fc = add i32 %v0_165fc, -3
  store i32 %v1_165fc, i32* @r1, align 4
  br label %bb131

dec_label_pc_16604:                               ; preds = %dec_label_pc_16584
  br i1 %v5_16674, label %dec_label_pc_16650, label %dec_label_pc_1660c

dec_label_pc_1660c:                               ; preds = %dec_label_pc_16604
  store i32 %v2_16670, i32* %r2.global-to-local, align 4
  %v3_16610 = load i32, i32* @r4, align 4
  store i32 %v3_16610, i32* %stack_var_-16, align 4
  %v6_16610 = load i32, i32* @r5, align 4
  store i32 %v6_16610, i32* %stack_var_-12, align 4
  br label %dec_label_pc_16614

dec_label_pc_16614:                               ; preds = %dec_label_pc_16614.dec_label_pc_16614_crit_edge, %dec_label_pc_1660c
  %v0_16638 = phi i32 [ %v12_16638, %dec_label_pc_16614.dec_label_pc_16614_crit_edge ], [ %v0_165cc74, %dec_label_pc_1660c ]
  %v0_16618 = phi i32 [ %v0_16618.pre, %dec_label_pc_16614.dec_label_pc_16614_crit_edge ], [ %v4_16588, %dec_label_pc_1660c ]
  %v0_16614 = phi i32 [ %v0_16614.pre, %dec_label_pc_16614.dec_label_pc_16614_crit_edge ], [ %v2_16588, %dec_label_pc_1660c ]
  %v3_16614 = udiv i32 %v0_16614, 65536
  store i32 %v3_16614, i32* %r3.global-to-local, align 4
  %v1_16618 = inttoptr i32 %v0_16618 to i32*
  %v2_16618 = load i32, i32* %v1_16618, align 4
  store i32 %v2_16618, i32* %r4.global-to-local, align 4
  %v3_16618 = add i32 %v0_16618, 4
  %v4_16618 = inttoptr i32 %v3_16618 to i32*
  %v5_16618 = load i32, i32* %v4_16618, align 4
  store i32 %v5_16618, i32* %r5.global-to-local, align 4
  %v6_16618 = add i32 %v0_16618, 8
  %v7_16618 = inttoptr i32 %v6_16618 to i32*
  %v8_16618 = load i32, i32* %v7_16618, align 4
  store i32 %v8_16618, i32* %ip.global-to-local, align 4
  %v9_16618 = add i32 %v0_16618, 12
  %v10_16618 = inttoptr i32 %v9_16618 to i32*
  %v11_16618 = load i32, i32* %v10_16618, align 4
  store i32 %v11_16618, i32* @lr, align 4
  %v12_16618 = add i32 %v0_16618, 16
  store i32 %v12_16618, i32* %r1.global-to-local, align 4
  %v4_1661c = mul i32 %v2_16618, 65536
  %v5_1661c = or i32 %v4_1661c, %v3_16614
  store i32 %v5_1661c, i32* %r3.global-to-local, align 4
  %v3_16620 = udiv i32 %v2_16618, 65536
  %v4_16624 = mul i32 %v5_16618, 65536
  %v5_16624 = or i32 %v4_16624, %v3_16620
  store i32 %v5_16624, i32* %r4.global-to-local, align 4
  %v3_16628 = udiv i32 %v5_16618, 65536
  %v4_1662c = mul i32 %v8_16618, 65536
  %v5_1662c = or i32 %v4_1662c, %v3_16628
  store i32 %v5_1662c, i32* %r5.global-to-local, align 4
  %v3_16630 = udiv i32 %v8_16618, 65536
  %v4_16634 = mul i32 %v11_16618, 65536
  %v5_16634 = or i32 %v4_16634, %v3_16630
  store i32 %v5_16634, i32* @ip, align 4
  %v1_16638 = inttoptr i32 %v0_16638 to i32*
  store i32 %v5_1661c, i32* %v1_16638, align 4
  %v3_16638 = add i32 %v0_16638, 4
  %v4_16638 = inttoptr i32 %v3_16638 to i32*
  %v5_16638 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16638, i32* %v4_16638, align 4
  %v6_16638 = add i32 %v0_16638, 8
  %v7_16638 = inttoptr i32 %v6_16638 to i32*
  %v8_16638 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_16638, i32* %v7_16638, align 4
  %v9_16638 = add i32 %v0_16638, 12
  %v10_16638 = inttoptr i32 %v9_16638 to i32*
  %v11_16638 = load i32, i32* @ip, align 4
  store i32 %v11_16638, i32* %v10_16638, align 4
  %v12_16638 = add i32 %v0_16638, 16
  store i32 %v12_16638, i32* @r0, align 4
  %v0_1663c = load i32, i32* %r2.global-to-local, align 4
  %v2_1663c = add i32 %v0_1663c, -16
  store i32 %v2_1663c, i32* %r2.global-to-local, align 4
  %v6_16640 = icmp slt i32 %v0_1663c, 16
  br i1 %v6_16640, label %dec_label_pc_16644, label %dec_label_pc_16614.dec_label_pc_16614_crit_edge

dec_label_pc_16614.dec_label_pc_16614_crit_edge:  ; preds = %dec_label_pc_16614
  %v0_16614.pre = load i32, i32* @lr, align 4
  %v0_16618.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16614

dec_label_pc_16644:                               ; preds = %dec_label_pc_16614
  %v2_16644 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16644, i32* @r4, align 4
  %v5_16644 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_16644, i32* @r5, align 4
  %v2_16648 = add i32 %v0_1663c, -4
  store i32 %v2_16648, i32* %r2.global-to-local, align 4
  %v4_16648 = add i32 %v0_1663c, 2147483632
  %v5_16648 = and i32 %v2_16648, %v4_16648
  %v6_16648 = icmp slt i32 %v5_16648, 0
  store i1 %v6_16648, i1* %cpsr_v.global-to-local, align 1
  %v7_16648 = icmp slt i32 %v2_16648, 0
  store i1 %v7_16648, i1* %cpsr_n.global-to-local, align 1
  %v8_16648 = icmp eq i32 %v2_16648, 0
  store i1 %v8_16648, i1* %cpsr_z.global-to-local, align 1
  %v5_1664c = icmp slt i32 %v2_1663c, -12
  br i1 %v5_1664c, label %dec_label_pc_16668, label %dec_label_pc_16650

dec_label_pc_16650:                               ; preds = %dec_label_pc_16644, %dec_label_pc_16604, %dec_label_pc_16650
  %v1_1665c = phi i32 [ %v4_1665c, %dec_label_pc_16650 ], [ %v12_16638, %dec_label_pc_16644 ], [ %v0_165cc74, %dec_label_pc_16604 ]
  %v0_16650 = load i32, i32* @lr, align 4
  %v3_16650 = udiv i32 %v0_16650, 65536
  store i32 %v3_16650, i32* %ip.global-to-local, align 4
  %v0_16654 = load i32, i32* %r1.global-to-local, align 4
  %v1_16654 = inttoptr i32 %v0_16654 to i32*
  %v2_16654 = load i32, i32* %v1_16654, align 4
  store i32 %v2_16654, i32* @lr, align 4
  %v4_16654 = add i32 %v0_16654, 4
  store i32 %v4_16654, i32* %r1.global-to-local, align 4
  %v4_16658 = mul i32 %v2_16654, 65536
  %v5_16658 = or i32 %v4_16658, %v3_16650
  store i32 %v5_16658, i32* @ip, align 4
  %v2_1665c = inttoptr i32 %v1_1665c to i32*
  store i32 %v5_16658, i32* %v2_1665c, align 4
  %v3_1665c = load i32, i32* @r0, align 4
  %v4_1665c = add i32 %v3_1665c, 4
  store i32 %v4_1665c, i32* @r0, align 4
  %v0_16660 = load i32, i32* %r2.global-to-local, align 4
  %v2_16660 = add i32 %v0_16660, -4
  store i32 %v2_16660, i32* %r2.global-to-local, align 4
  %v6_16664 = icmp slt i32 %v0_16660, 4
  br i1 %v6_16664, label %dec_label_pc_16668.loopexit, label %dec_label_pc_16650

dec_label_pc_16668.loopexit:                      ; preds = %dec_label_pc_16650
  %v4_16660 = sub i32 3, %v0_16660
  %v5_16660 = and i32 %v4_16660, %v0_16660
  %v6_16660 = icmp slt i32 %v5_16660, 0
  %v7_16660 = icmp slt i32 %v2_16660, 0
  store i1 %v6_16660, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16660, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16668

dec_label_pc_16668:                               ; preds = %dec_label_pc_16668.loopexit, %dec_label_pc_16644
  %v2_1653c112 = phi i32 [ %v4_1665c, %dec_label_pc_16668.loopexit ], [ %v12_16638, %dec_label_pc_16644 ]
  %v0_1652c108 = phi i32 [ %v2_16660, %dec_label_pc_16668.loopexit ], [ %v2_16648, %dec_label_pc_16644 ]
  %v0_16668 = load i32, i32* %r1.global-to-local, align 4
  %v1_16668 = add i32 %v0_16668, -2
  store i32 %v1_16668, i32* @r1, align 4
  br label %bb131

dec_label_pc_16670:                               ; preds = %dec_label_pc_16584
  br i1 %v5_16674, label %dec_label_pc_166bc, label %dec_label_pc_16678

dec_label_pc_16678:                               ; preds = %dec_label_pc_16670
  store i32 %v2_16670, i32* %r2.global-to-local, align 4
  %v3_1667c = load i32, i32* @r4, align 4
  store i32 %v3_1667c, i32* %stack_var_-16, align 4
  %v6_1667c = load i32, i32* @r5, align 4
  store i32 %v6_1667c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_16680

dec_label_pc_16680:                               ; preds = %dec_label_pc_16680.dec_label_pc_16680_crit_edge, %dec_label_pc_16678
  %v0_166a4 = phi i32 [ %v12_166a4, %dec_label_pc_16680.dec_label_pc_16680_crit_edge ], [ %v0_165cc74, %dec_label_pc_16678 ]
  %v0_16684 = phi i32 [ %v0_16684.pre, %dec_label_pc_16680.dec_label_pc_16680_crit_edge ], [ %v4_16588, %dec_label_pc_16678 ]
  %v0_16680 = phi i32 [ %v0_16680.pre, %dec_label_pc_16680.dec_label_pc_16680_crit_edge ], [ %v2_16588, %dec_label_pc_16678 ]
  %v3_16680 = udiv i32 %v0_16680, 16777216
  store i32 %v3_16680, i32* %r3.global-to-local, align 4
  %v1_16684 = inttoptr i32 %v0_16684 to i32*
  %v2_16684 = load i32, i32* %v1_16684, align 4
  store i32 %v2_16684, i32* %r4.global-to-local, align 4
  %v3_16684 = add i32 %v0_16684, 4
  %v4_16684 = inttoptr i32 %v3_16684 to i32*
  %v5_16684 = load i32, i32* %v4_16684, align 4
  store i32 %v5_16684, i32* %r5.global-to-local, align 4
  %v6_16684 = add i32 %v0_16684, 8
  %v7_16684 = inttoptr i32 %v6_16684 to i32*
  %v8_16684 = load i32, i32* %v7_16684, align 4
  store i32 %v8_16684, i32* %ip.global-to-local, align 4
  %v9_16684 = add i32 %v0_16684, 12
  %v10_16684 = inttoptr i32 %v9_16684 to i32*
  %v11_16684 = load i32, i32* %v10_16684, align 4
  store i32 %v11_16684, i32* @lr, align 4
  %v12_16684 = add i32 %v0_16684, 16
  store i32 %v12_16684, i32* %r1.global-to-local, align 4
  %v4_16688 = mul i32 %v2_16684, 256
  %v5_16688 = or i32 %v4_16688, %v3_16680
  store i32 %v5_16688, i32* %r3.global-to-local, align 4
  %v3_1668c = udiv i32 %v2_16684, 16777216
  %v4_16690 = mul i32 %v5_16684, 256
  %v5_16690 = or i32 %v4_16690, %v3_1668c
  store i32 %v5_16690, i32* %r4.global-to-local, align 4
  %v3_16694 = udiv i32 %v5_16684, 16777216
  %v4_16698 = mul i32 %v8_16684, 256
  %v5_16698 = or i32 %v4_16698, %v3_16694
  store i32 %v5_16698, i32* %r5.global-to-local, align 4
  %v3_1669c = udiv i32 %v8_16684, 16777216
  %v4_166a0 = mul i32 %v11_16684, 256
  %v5_166a0 = or i32 %v4_166a0, %v3_1669c
  store i32 %v5_166a0, i32* @ip, align 4
  %v1_166a4 = inttoptr i32 %v0_166a4 to i32*
  store i32 %v5_16688, i32* %v1_166a4, align 4
  %v3_166a4 = add i32 %v0_166a4, 4
  %v4_166a4 = inttoptr i32 %v3_166a4 to i32*
  %v5_166a4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_166a4, i32* %v4_166a4, align 4
  %v6_166a4 = add i32 %v0_166a4, 8
  %v7_166a4 = inttoptr i32 %v6_166a4 to i32*
  %v8_166a4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_166a4, i32* %v7_166a4, align 4
  %v9_166a4 = add i32 %v0_166a4, 12
  %v10_166a4 = inttoptr i32 %v9_166a4 to i32*
  %v11_166a4 = load i32, i32* @ip, align 4
  store i32 %v11_166a4, i32* %v10_166a4, align 4
  %v12_166a4 = add i32 %v0_166a4, 16
  store i32 %v12_166a4, i32* @r0, align 4
  %v0_166a8 = load i32, i32* %r2.global-to-local, align 4
  %v2_166a8 = add i32 %v0_166a8, -16
  store i32 %v2_166a8, i32* %r2.global-to-local, align 4
  %v6_166ac = icmp slt i32 %v0_166a8, 16
  br i1 %v6_166ac, label %dec_label_pc_166b0, label %dec_label_pc_16680.dec_label_pc_16680_crit_edge

dec_label_pc_16680.dec_label_pc_16680_crit_edge:  ; preds = %dec_label_pc_16680
  %v0_16680.pre = load i32, i32* @lr, align 4
  %v0_16684.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16680

dec_label_pc_166b0:                               ; preds = %dec_label_pc_16680
  %v2_166b0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_166b0, i32* @r4, align 4
  %v5_166b0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_166b0, i32* @r5, align 4
  %v2_166b4 = add i32 %v0_166a8, -4
  store i32 %v2_166b4, i32* %r2.global-to-local, align 4
  %v4_166b4 = add i32 %v0_166a8, 2147483632
  %v5_166b4 = and i32 %v2_166b4, %v4_166b4
  %v6_166b4 = icmp slt i32 %v5_166b4, 0
  store i1 %v6_166b4, i1* %cpsr_v.global-to-local, align 1
  %v7_166b4 = icmp slt i32 %v2_166b4, 0
  store i1 %v7_166b4, i1* %cpsr_n.global-to-local, align 1
  %v8_166b4 = icmp eq i32 %v2_166b4, 0
  store i1 %v8_166b4, i1* %cpsr_z.global-to-local, align 1
  %v5_166b8 = icmp slt i32 %v2_166a8, -12
  br i1 %v5_166b8, label %dec_label_pc_166d4, label %dec_label_pc_166bc

dec_label_pc_166bc:                               ; preds = %dec_label_pc_166b0, %dec_label_pc_16670, %dec_label_pc_166bc
  %v1_166c8 = phi i32 [ %v4_166c8, %dec_label_pc_166bc ], [ %v12_166a4, %dec_label_pc_166b0 ], [ %v0_165cc74, %dec_label_pc_16670 ]
  %v0_166bc = load i32, i32* @lr, align 4
  %v3_166bc = udiv i32 %v0_166bc, 16777216
  store i32 %v3_166bc, i32* %ip.global-to-local, align 4
  %v0_166c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_166c0 = inttoptr i32 %v0_166c0 to i32*
  %v2_166c0 = load i32, i32* %v1_166c0, align 4
  store i32 %v2_166c0, i32* @lr, align 4
  %v4_166c0 = add i32 %v0_166c0, 4
  store i32 %v4_166c0, i32* %r1.global-to-local, align 4
  %v4_166c4 = mul i32 %v2_166c0, 256
  %v5_166c4 = or i32 %v4_166c4, %v3_166bc
  store i32 %v5_166c4, i32* @ip, align 4
  %v2_166c8 = inttoptr i32 %v1_166c8 to i32*
  store i32 %v5_166c4, i32* %v2_166c8, align 4
  %v3_166c8 = load i32, i32* @r0, align 4
  %v4_166c8 = add i32 %v3_166c8, 4
  store i32 %v4_166c8, i32* @r0, align 4
  %v0_166cc = load i32, i32* %r2.global-to-local, align 4
  %v2_166cc = add i32 %v0_166cc, -4
  store i32 %v2_166cc, i32* %r2.global-to-local, align 4
  %v6_166d0 = icmp slt i32 %v0_166cc, 4
  br i1 %v6_166d0, label %dec_label_pc_166d4.loopexit, label %dec_label_pc_166bc

dec_label_pc_166d4.loopexit:                      ; preds = %dec_label_pc_166bc
  %v4_166cc = sub i32 3, %v0_166cc
  %v5_166cc = and i32 %v4_166cc, %v0_166cc
  %v6_166cc = icmp slt i32 %v5_166cc, 0
  %v7_166cc = icmp slt i32 %v2_166cc, 0
  store i1 %v6_166cc, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_166cc, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_166d4

dec_label_pc_166d4:                               ; preds = %dec_label_pc_166d4.loopexit, %dec_label_pc_166b0
  %v2_1653c113 = phi i32 [ %v4_166c8, %dec_label_pc_166d4.loopexit ], [ %v12_166a4, %dec_label_pc_166b0 ]
  %v0_1652c109 = phi i32 [ %v2_166cc, %dec_label_pc_166d4.loopexit ], [ %v2_166b4, %dec_label_pc_166b0 ]
  %v0_166d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_166d4 = add i32 %v0_166d4, -1
  store i32 %v1_166d4, i32* @r1, align 4
  br label %bb131

dec_label_pc_166dc:                               ; preds = %dec_label_pc_16490
  %v1_166dc = load i32, i32* @r2, align 4
  %v2_166dc = add i32 %v1_166dc, %v0_16490
  store i32 %v2_166dc, i32* %r1.global-to-local, align 4
  %v2_166e0 = add i32 %v1_166dc, %v1_16490
  store i32 %v2_166e0, i32* %r0.global-to-local, align 4
  %v2_166e4 = add i32 %v1_166dc, -4
  store i32 %v2_166e4, i32* %r2.global-to-local, align 4
  %v4_166e4 = sub i32 3, %v1_166dc
  %v5_166e4 = and i32 %v4_166e4, %v1_166dc
  %v6_166e4 = icmp slt i32 %v5_166e4, 0
  store i1 %v6_166e4, i1* %cpsr_v.global-to-local, align 1
  %v7_166e4 = icmp slt i32 %v2_166e4, 0
  store i1 %v7_166e4, i1* %cpsr_n.global-to-local, align 1
  %v8_166e4 = icmp eq i32 %v1_166dc, 4
  store i1 %v8_166e4, i1* %cpsr_z.global-to-local, align 1
  %v5_166e8 = icmp slt i32 %v1_166dc, 4
  br i1 %v5_166e8, label %bb141, label %dec_label_pc_166ec

dec_label_pc_166ec:                               ; preds = %dec_label_pc_166dc
  %v1_166ec = urem i32 %v2_166e0, 4
  store i32 %v1_166ec, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_166ec = icmp eq i32 %v1_166ec, 0
  store i1 %v2_166ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_166ec, label %dec_label_pc_166f4, label %dec_label_pc_16794

dec_label_pc_166f4:                               ; preds = %dec_label_pc_166ec
  %v1_166f4 = urem i32 %v2_166dc, 4
  store i32 %v1_166f4, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_166f4 = icmp eq i32 %v1_166f4, 0
  store i1 %v2_166f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_166f4, label %dec_label_pc_166fc, label %dec_label_pc_167c0

dec_label_pc_166fc:                               ; preds = %dec_label_pc_166f4, %dec_label_pc_167b8
  %v0_1671448 = phi i32 [ %v2_166e0, %dec_label_pc_166f4 ], [ %v0_1680831, %dec_label_pc_167b8 ]
  %v0_1671047 = phi i32 [ %v2_166dc, %dec_label_pc_166f4 ], [ %v0_167b8, %dec_label_pc_167b8 ]
  %v0_166fc = phi i32 [ %v2_166e4, %dec_label_pc_166f4 ], [ %v2_167b0, %dec_label_pc_167b8 ]
  %v2_166fc = add i32 %v0_166fc, -8
  store i32 %v2_166fc, i32* %r2.global-to-local, align 4
  %v4_166fc = sub i32 7, %v0_166fc
  %v5_166fc = and i32 %v4_166fc, %v0_166fc
  %v6_166fc = icmp slt i32 %v5_166fc, 0
  store i1 %v6_166fc, i1* %cpsr_v.global-to-local, align 1
  %v7_166fc = icmp slt i32 %v2_166fc, 0
  store i1 %v7_166fc, i1* %cpsr_n.global-to-local, align 1
  %v8_166fc = icmp eq i32 %v0_166fc, 8
  store i1 %v8_166fc, i1* %cpsr_z.global-to-local, align 1
  %v5_16700 = icmp slt i32 %v0_166fc, 8
  br i1 %v5_16700, label %dec_label_pc_1674c, label %dec_label_pc_16704

dec_label_pc_16704:                               ; preds = %dec_label_pc_166fc
  %v3_16704 = load i32, i32* @r4, align 4
  store i32 %v3_16704, i32* %stack_var_-8, align 4
  %v6_16704 = load i32, i32* @lr, align 4
  %v2_16708 = add i32 %v0_166fc, -28
  store i32 %v2_16708, i32* %r2.global-to-local, align 4
  %v4_16708 = sub i32 27, %v0_166fc
  %v5_16708 = and i32 %v4_16708, %v2_166fc
  %v6_16708 = icmp slt i32 %v5_16708, 0
  store i1 %v6_16708, i1* %cpsr_v.global-to-local, align 1
  %v7_16708 = icmp slt i32 %v2_16708, 0
  store i1 %v7_16708, i1* %cpsr_n.global-to-local, align 1
  %v8_16708 = icmp eq i32 %v2_166fc, 20
  store i1 %v8_16708, i1* %cpsr_z.global-to-local, align 1
  %v5_1670c = icmp slt i32 %v2_166fc, 20
  br i1 %v5_1670c, label %dec_label_pc_16728, label %dec_label_pc_16710

dec_label_pc_16710:                               ; preds = %dec_label_pc_16704, %dec_label_pc_16710.dec_label_pc_16710_crit_edge
  %v0_16714 = phi i32 [ %v1_1671c, %dec_label_pc_16710.dec_label_pc_16710_crit_edge ], [ %v0_1671448, %dec_label_pc_16704 ]
  %v0_16710 = phi i32 [ %v0_16710.pre, %dec_label_pc_16710.dec_label_pc_16710_crit_edge ], [ %v0_1671047, %dec_label_pc_16704 ]
  %v1_16710 = add i32 %v0_16710, -4
  %v2_16710 = inttoptr i32 %v1_16710 to i32*
  %v3_16710 = load i32, i32* %v2_16710, align 4
  store i32 %v3_16710, i32* %r3.global-to-local, align 4
  %v4_16710 = add i32 %v0_16710, -8
  %v5_16710 = inttoptr i32 %v4_16710 to i32*
  %v6_16710 = load i32, i32* %v5_16710, align 4
  store i32 %v6_16710, i32* %r4.global-to-local, align 4
  %v7_16710 = add i32 %v0_16710, -12
  %v8_16710 = inttoptr i32 %v7_16710 to i32*
  %v9_16710 = load i32, i32* %v8_16710, align 4
  store i32 %v9_16710, i32* %ip.global-to-local, align 4
  %v10_16710 = add i32 %v0_16710, -16
  %v11_16710 = inttoptr i32 %v10_16710 to i32*
  %v12_16710 = load i32, i32* %v11_16710, align 4
  store i32 %v12_16710, i32* %lr.global-to-local, align 4
  store i32 %v10_16710, i32* %r1.global-to-local, align 4
  %v1_16714 = add i32 %v0_16714, -16
  %v2_16714 = inttoptr i32 %v1_16714 to i32*
  store i32 %v3_16710, i32* %v2_16714, align 4
  %v4_16714 = add i32 %v0_16714, -12
  %v5_16714 = inttoptr i32 %v4_16714 to i32*
  %v6_16714 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_16714, i32* %v5_16714, align 4
  %v7_16714 = add i32 %v0_16714, -8
  %v8_16714 = inttoptr i32 %v7_16714 to i32*
  %v9_16714 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_16714, i32* %v8_16714, align 4
  %v10_16714 = add i32 %v0_16714, -4
  %v11_16714 = inttoptr i32 %v10_16714 to i32*
  %v12_16714 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16714, i32* %v11_16714, align 4
  store i32 %v1_16714, i32* %r0.global-to-local, align 4
  %v0_16718 = load i32, i32* %r1.global-to-local, align 4
  %v1_16718 = add i32 %v0_16718, -4
  %v2_16718 = inttoptr i32 %v1_16718 to i32*
  %v3_16718 = load i32, i32* %v2_16718, align 4
  store i32 %v3_16718, i32* %r3.global-to-local, align 4
  %v4_16718 = add i32 %v0_16718, -8
  %v5_16718 = inttoptr i32 %v4_16718 to i32*
  %v6_16718 = load i32, i32* %v5_16718, align 4
  store i32 %v6_16718, i32* %r4.global-to-local, align 4
  %v7_16718 = add i32 %v0_16718, -12
  %v8_16718 = inttoptr i32 %v7_16718 to i32*
  %v9_16718 = load i32, i32* %v8_16718, align 4
  store i32 %v9_16718, i32* @ip, align 4
  %v10_16718 = add i32 %v0_16718, -16
  %v11_16718 = inttoptr i32 %v10_16718 to i32*
  %v12_16718 = load i32, i32* %v11_16718, align 4
  store i32 %v12_16718, i32* %lr.global-to-local, align 4
  store i32 %v10_16718, i32* %r1.global-to-local, align 4
  %v1_1671c = add i32 %v0_16714, -32
  %v2_1671c = inttoptr i32 %v1_1671c to i32*
  store i32 %v3_16718, i32* %v2_1671c, align 4
  %v4_1671c = add i32 %v0_16714, -28
  %v5_1671c = inttoptr i32 %v4_1671c to i32*
  %v6_1671c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_1671c, i32* %v5_1671c, align 4
  %v7_1671c = add i32 %v0_16714, -24
  %v8_1671c = inttoptr i32 %v7_1671c to i32*
  %v9_1671c = load i32, i32* @ip, align 4
  store i32 %v9_1671c, i32* %v8_1671c, align 4
  %v10_1671c = add i32 %v0_16714, -20
  %v11_1671c = inttoptr i32 %v10_1671c to i32*
  %v12_1671c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_1671c, i32* %v11_1671c, align 4
  store i32 %v1_1671c, i32* %r0.global-to-local, align 4
  %v0_16720 = load i32, i32* %r2.global-to-local, align 4
  %v2_16720 = add i32 %v0_16720, -32
  store i32 %v2_16720, i32* %r2.global-to-local, align 4
  %v6_16724 = icmp slt i32 %v0_16720, 32
  br i1 %v6_16724, label %dec_label_pc_16728.loopexit, label %dec_label_pc_16710.dec_label_pc_16710_crit_edge

dec_label_pc_16710.dec_label_pc_16710_crit_edge:  ; preds = %dec_label_pc_16710
  %v0_16710.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16710

dec_label_pc_16728.loopexit:                      ; preds = %dec_label_pc_16710
  %v4_16720 = sub i32 31, %v0_16720
  %v5_16720 = and i32 %v4_16720, %v0_16720
  %v6_16720 = icmp slt i32 %v5_16720, 0
  %v7_16720 = icmp slt i32 %v2_16720, 0
  store i1 %v6_16720, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16720, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16728

dec_label_pc_16728:                               ; preds = %dec_label_pc_16728.loopexit, %dec_label_pc_16704
  %v6_16730 = phi i32 [ %v1_1671c, %dec_label_pc_16728.loopexit ], [ %v0_1671448, %dec_label_pc_16704 ]
  %v0_16738.pr = phi i32 [ %v2_16720, %dec_label_pc_16728.loopexit ], [ %v2_16708, %dec_label_pc_16704 ]
  %v4_16728 = add i32 %v0_16738.pr, 16
  %v6_16728 = sub i32 0, %v0_16738.pr
  %v7_16728 = and i32 %v4_16728, %v6_16728
  %v8_16728 = icmp slt i32 %v7_16728, 0
  store i1 %v8_16728, i1* %cpsr_v.global-to-local, align 1
  %v9_16728 = icmp slt i32 %v4_16728, 0
  store i1 %v9_16728, i1* %cpsr_n.global-to-local, align 1
  %v10_16728 = icmp eq i32 %v4_16728, 0
  store i1 %v10_16728, i1* %cpsr_z.global-to-local, align 1
  %v5_1672c = icmp slt i32 %v0_16738.pr, -16
  br i1 %v5_1672c, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_16728
  %v6_1672c = load i32, i32* %r1.global-to-local, align 4
  %v7_1672c = add i32 %v6_1672c, -4
  %v8_1672c = inttoptr i32 %v7_1672c to i32*
  %v9_1672c = load i32, i32* %v8_1672c, align 4
  store i32 %v9_1672c, i32* %r3.global-to-local, align 4
  %v10_1672c = add i32 %v6_1672c, -8
  %v11_1672c = inttoptr i32 %v10_1672c to i32*
  %v12_1672c = load i32, i32* %v11_1672c, align 4
  store i32 %v12_1672c, i32* %r4.global-to-local, align 4
  %v13_1672c = add i32 %v6_1672c, -12
  %v14_1672c = inttoptr i32 %v13_1672c to i32*
  %v15_1672c = load i32, i32* %v14_1672c, align 4
  store i32 %v15_1672c, i32* @ip, align 4
  %v16_1672c = add i32 %v6_1672c, -16
  %v17_1672c = inttoptr i32 %v16_1672c to i32*
  %v18_1672c = load i32, i32* %v17_1672c, align 4
  store i32 %v18_1672c, i32* %lr.global-to-local, align 4
  store i32 %v16_1672c, i32* %r1.global-to-local, align 4
  %v7_16730 = add i32 %v6_16730, -16
  %v8_16730 = inttoptr i32 %v7_16730 to i32*
  store i32 %v9_1672c, i32* %v8_16730, align 4
  %v10_16730 = add i32 %v6_16730, -12
  %v11_16730 = inttoptr i32 %v10_16730 to i32*
  %v12_16730 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_16730, i32* %v11_16730, align 4
  %v13_16730 = add i32 %v6_16730, -8
  %v14_16730 = inttoptr i32 %v13_16730 to i32*
  %v15_16730 = load i32, i32* @ip, align 4
  store i32 %v15_16730, i32* %v14_16730, align 4
  %v16_16730 = add i32 %v6_16730, -4
  %v17_16730 = inttoptr i32 %v16_16730 to i32*
  %v18_16730 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_16730, i32* %v17_16730, align 4
  store i32 %v7_16730, i32* %r0.global-to-local, align 4
  %v6_16734 = load i32, i32* %r2.global-to-local, align 4
  %v7_16734 = add i32 %v6_16734, -16
  store i32 %v7_16734, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_16728, %bb138
  %v6_16740 = phi i32 [ %v7_16730, %bb138 ], [ %v6_16730, %dec_label_pc_16728 ]
  %v0_16738 = phi i32 [ %v7_16734, %bb138 ], [ %v0_16738.pr, %dec_label_pc_16728 ]
  %v4_16738 = add i32 %v0_16738, 20
  store i32 %v4_16738, i32* %r2.global-to-local, align 4
  %v6_16738 = sub i32 0, %v0_16738
  %v7_16738 = and i32 %v4_16738, %v6_16738
  %v8_16738 = icmp slt i32 %v7_16738, 0
  store i1 %v8_16738, i1* %cpsr_v.global-to-local, align 1
  %v9_16738 = icmp slt i32 %v4_16738, 0
  store i1 %v9_16738, i1* %cpsr_n.global-to-local, align 1
  %v10_16738 = icmp eq i32 %v4_16738, 0
  store i1 %v10_16738, i1* %cpsr_z.global-to-local, align 1
  %v5_1673c = icmp slt i32 %v0_16738, -20
  br i1 %v5_1673c, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_1673c = load i32, i32* %r1.global-to-local, align 4
  %v7_1673c = add i32 %v6_1673c, -4
  %v8_1673c = inttoptr i32 %v7_1673c to i32*
  %v9_1673c = load i32, i32* %v8_1673c, align 4
  store i32 %v9_1673c, i32* %r3.global-to-local, align 4
  %v10_1673c = add i32 %v6_1673c, -8
  %v11_1673c = inttoptr i32 %v10_1673c to i32*
  %v12_1673c = load i32, i32* %v11_1673c, align 4
  store i32 %v12_1673c, i32* @ip, align 4
  %v13_1673c = add i32 %v6_1673c, -12
  %v14_1673c = inttoptr i32 %v13_1673c to i32*
  %v15_1673c = load i32, i32* %v14_1673c, align 4
  store i32 %v15_1673c, i32* %lr.global-to-local, align 4
  store i32 %v13_1673c, i32* %r1.global-to-local, align 4
  %v7_16740 = add i32 %v6_16740, -12
  %v8_16740 = inttoptr i32 %v7_16740 to i32*
  store i32 %v9_1673c, i32* %v8_16740, align 4
  %v10_16740 = add i32 %v6_16740, -8
  %v11_16740 = inttoptr i32 %v10_16740 to i32*
  %v12_16740 = load i32, i32* @ip, align 4
  store i32 %v12_16740, i32* %v11_16740, align 4
  %v13_16740 = add i32 %v6_16740, -4
  %v14_16740 = inttoptr i32 %v13_16740 to i32*
  %v15_16740 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_16740, i32* %v14_16740, align 4
  store i32 %v7_16740, i32* %r0.global-to-local, align 4
  %v6_16744 = load i32, i32* %r2.global-to-local, align 4
  %v7_16744 = add i32 %v6_16744, -12
  store i32 %v7_16744, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_1676456 = phi i32 [ %v6_16740, %.thread13 ], [ %v7_16740, %bb139 ]
  %v0_1674c54 = phi i32 [ %v4_16738, %.thread13 ], [ %v7_16744, %bb139 ]
  %v2_16748 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_16748, i32* @r4, align 4
  store i32 %v6_16704, i32* @lr, align 4
  br label %dec_label_pc_1674c

dec_label_pc_1674c:                               ; preds = %dec_label_pc_166fc, %.thread15
  %v7_1675c = phi i32 [ %v0_1671448, %dec_label_pc_166fc ], [ %v6_1676456, %.thread15 ]
  %v0_1674c = phi i32 [ %v2_166fc, %dec_label_pc_166fc ], [ %v0_1674c54, %.thread15 ]
  %v2_1674c = add i32 %v0_1674c, 8
  store i32 %v2_1674c, i32* %r2.global-to-local, align 4
  %v4_1674c = sub i32 0, %v0_1674c
  %v5_1674c = and i32 %v2_1674c, %v4_1674c
  %v6_1674c = icmp slt i32 %v5_1674c, 0
  store i1 %v6_1674c, i1* %cpsr_v.global-to-local, align 1
  %v7_1674c = icmp slt i32 %v2_1674c, 0
  store i1 %v7_1674c, i1* %cpsr_n.global-to-local, align 1
  %v8_1674c = icmp eq i32 %v2_1674c, 0
  store i1 %v8_1674c, i1* %cpsr_z.global-to-local, align 1
  %v5_16750 = icmp slt i32 %v0_1674c, -8
  br i1 %v5_16750, label %bb141, label %dec_label_pc_16754

dec_label_pc_16754:                               ; preds = %dec_label_pc_1674c
  %v6_16754 = add i32 %v0_1674c, 4
  store i32 %v6_16754, i32* %r2.global-to-local, align 4
  %v8_16754 = sub i32 -5, %v0_1674c
  %v9_16754 = and i32 %v8_16754, %v2_1674c
  %v10_16754 = icmp slt i32 %v9_16754, 0
  store i1 %v10_16754, i1* %cpsr_v.global-to-local, align 1
  %v11_16754 = icmp slt i32 %v6_16754, 0
  store i1 %v11_16754, i1* %cpsr_n.global-to-local, align 1
  %v12_16754 = icmp eq i32 %v2_1674c, 4
  store i1 %v12_16754, i1* %cpsr_z.global-to-local, align 1
  %v5_16758 = icmp slt i32 %v2_1674c, 4
  %v6_16758 = load i32, i32* %r1.global-to-local, align 4
  %v7_16758 = add i32 %v6_16758, -4
  %v8_16758 = inttoptr i32 %v7_16758 to i32*
  %v9_16758 = load i32, i32* %v8_16758, align 4
  store i32 %v9_16758, i32* %r3.global-to-local, align 4
  br i1 %v5_16758, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_16754
  store i32 %v7_16758, i32* %r1.global-to-local, align 4
  %v8_1675c = add i32 %v7_1675c, -4
  %v9_1675c = inttoptr i32 %v8_1675c to i32*
  store i32 %v9_16758, i32* %v9_1675c, align 4
  %v10_1675c = load i32, i32* %r0.global-to-local, align 4
  %v11_1675c = add i32 %v10_1675c, -4
  store i32 %v11_1675c, i32* %r0.global-to-local, align 4
  %v0_1676c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_16754
  %v10_16760 = add i32 %v6_16758, -8
  %v11_16760 = inttoptr i32 %v10_16760 to i32*
  %v12_16760 = load i32, i32* %v11_16760, align 4
  store i32 %v12_16760, i32* @ip, align 4
  store i32 %v10_16760, i32* %r1.global-to-local, align 4
  %v7_16764 = add i32 %v7_1675c, -8
  %v8_16764 = inttoptr i32 %v7_16764 to i32*
  store i32 %v9_16758, i32* %v8_16764, align 4
  %v10_16764 = add i32 %v7_1675c, -4
  %v11_16764 = inttoptr i32 %v10_16764 to i32*
  %v12_16764 = load i32, i32* @ip, align 4
  store i32 %v12_16764, i32* %v11_16764, align 4
  store i32 %v7_16764, i32* %r0.global-to-local, align 4
  %v6_16768 = load i32, i32* %r2.global-to-local, align 4
  %v7_16768 = add i32 %v6_16768, -4
  store i32 %v7_16768, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_166dc, %dec_label_pc_1674c, %dec_label_pc_16910, %dec_label_pc_168a4, %dec_label_pc_16838, %bb140
  %v2_16770 = phi i32 [ %v11_1675c, %.thread19 ], [ %v0_1680831, %.thread25 ], [ %v2_166e0, %dec_label_pc_166dc ], [ %v7_1675c, %dec_label_pc_1674c ], [ %v2_1677c64, %dec_label_pc_16910 ], [ %v2_1677c63, %dec_label_pc_168a4 ], [ %v2_1677c62, %dec_label_pc_16838 ], [ %v7_16764, %bb140 ]
  %v0_1676c = phi i32 [ %v0_1676c.pre, %.thread19 ], [ %v2_167b0, %.thread25 ], [ %v2_166e4, %dec_label_pc_166dc ], [ %v2_1674c, %dec_label_pc_1674c ], [ %v0_1676c60, %dec_label_pc_16910 ], [ %v0_1676c59, %dec_label_pc_168a4 ], [ %v0_1676c58, %dec_label_pc_16838 ], [ %v7_16768, %bb140 ]
  %v1_1676c = add i32 %v0_1676c, 4
  store i32 %v1_1676c, i32* %r2.global-to-local, align 4
  %v3_1676c = sub i32 0, %v0_1676c
  %v4_1676c = and i32 %v1_1676c, %v3_1676c
  %v5_1676c = icmp slt i32 %v4_1676c, 0
  store i1 %v5_1676c, i1* %cpsr_v.global-to-local, align 1
  %v6_1676c = icmp slt i32 %v1_1676c, 0
  store i1 %v6_1676c, i1* %cpsr_n.global-to-local, align 1
  %v7_1676c = icmp eq i32 %v1_1676c, 0
  store i1 %v7_1676c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1676c, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_16774 = add i32 %v0_1676c, 2
  %v3_16774 = sub i32 -3, %v0_1676c
  %v4_16774 = and i32 %v3_16774, %v1_1676c
  %v5_16774 = icmp slt i32 %v4_16774, 0
  store i1 %v5_16774, i1* %cpsr_v.global-to-local, align 1
  %v6_16774 = icmp slt i32 %v1_16774, 0
  store i1 %v6_16774, i1* %cpsr_n.global-to-local, align 1
  %v7_16774 = icmp eq i32 %v1_1676c, 2
  store i1 %v7_16774, i1* %cpsr_z.global-to-local, align 1
  %v0_16778 = load i32, i32* %r1.global-to-local, align 4
  %v1_16778 = add i32 %v0_16778, -1
  %v2_16778 = inttoptr i32 %v1_16778 to i8*
  %v3_16778 = load i8, i8* %v2_16778, align 1
  %v4_16778 = zext i8 %v3_16778 to i32
  store i32 %v4_16778, i32* %r3.global-to-local, align 4
  store i32 %v1_16778, i32* %r1.global-to-local, align 4
  %v3_1677c = add i32 %v2_16770, -1
  %v4_1677c = inttoptr i32 %v3_1677c to i8*
  store i8 %v3_16778, i8* %v4_1677c, align 1
  %v5_1677c = load i32, i32* %r0.global-to-local, align 4
  %v6_1677c = add i32 %v5_1677c, -1
  store i32 %v6_1677c, i32* %r0.global-to-local, align 4
  %v0_16780 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_16780 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_16780 = xor i1 %v0_16780, %v1_16780
  br i1 %v2_16780, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_16780 = load i32, i32* %r1.global-to-local, align 4
  %v4_16780 = add i32 %v3_16780, -1
  %v5_16780 = inttoptr i32 %v4_16780 to i8*
  %v6_16780 = load i8, i8* %v5_16780, align 1
  %v7_16780 = zext i8 %v6_16780 to i32
  store i32 %v7_16780, i32* %r3.global-to-local, align 4
  store i32 %v4_16780, i32* %r1.global-to-local, align 4
  %v6_16784 = add i32 %v5_1677c, -2
  %v7_16784 = inttoptr i32 %v6_16784 to i8*
  store i8 %v6_16780, i8* %v7_16784, align 1
  %v8_16784 = load i32, i32* %r0.global-to-local, align 4
  %v9_16784 = add i32 %v8_16784, -1
  store i32 %v9_16784, i32* %r0.global-to-local, align 4
  %v1_16788.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_16788.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_1678c = phi i32 [ %v9_16784, %bb143 ], [ %v6_1677c, %bb142 ]
  %v2_1678c = phi i1 [ %v2_16788.pre, %bb143 ], [ %v1_16780, %bb142 ]
  %v1_1678c = phi i1 [ %v1_16788.pre, %bb143 ], [ %v0_16780, %bb142 ]
  %v0_16788 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_16788 = xor i1 %v2_1678c, %v1_1678c
  %v4_16788 = or i1 %v0_16788, %v3_16788
  br i1 %v4_16788, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_16788 = load i32, i32* %r1.global-to-local, align 4
  %v6_16788 = add i32 %v5_16788, -1
  %v7_16788 = inttoptr i32 %v6_16788 to i8*
  %v8_16788 = load i8, i8* %v7_16788, align 1
  %v9_16788 = zext i8 %v8_16788 to i32
  store i32 %v9_16788, i32* %r3.global-to-local, align 4
  store i32 %v6_16788, i32* %r1.global-to-local, align 4
  %v8_1678c = add i32 %v7_1678c, -1
  %v9_1678c = inttoptr i32 %v8_1678c to i8*
  store i8 %v8_16788, i8* %v9_1678c, align 1
  %v10_1678c = load i32, i32* %r0.global-to-local, align 4
  %v11_1678c = add i32 %v10_1678c, -1
  store i32 %v11_1678c, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_16794:                               ; preds = %dec_label_pc_166ec
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_16794 = icmp eq i32 %v1_166ec, 1
  store i1 %v8_16794, i1* %cpsr_n.global-to-local, align 1
  %v9_16794 = icmp eq i32 %v1_166ec, 2
  store i1 %v9_16794, i1* %cpsr_z.global-to-local, align 1
  %v1_16798 = add i32 %v2_166dc, -1
  %v2_16798 = inttoptr i32 %v1_16798 to i8*
  %v3_16798 = load i8, i8* %v2_16798, align 1
  %v4_16798 = zext i8 %v3_16798 to i32
  store i32 %v4_16798, i32* %r3.global-to-local, align 4
  store i32 %v1_16798, i32* %r1.global-to-local, align 4
  %v3_1679c = add i32 %v2_166e0, -1
  %v4_1679c = inttoptr i32 %v3_1679c to i8*
  store i8 %v3_16798, i8* %v4_1679c, align 1
  %v5_1679c = load i32, i32* %r0.global-to-local, align 4
  %v6_1679c = add i32 %v5_1679c, -1
  store i32 %v6_1679c, i32* %r0.global-to-local, align 4
  br i1 %v8_16794, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_16794
  %v6_167a0 = load i32, i32* %r1.global-to-local, align 4
  %v7_167a0 = add i32 %v6_167a0, -1
  %v8_167a0 = inttoptr i32 %v7_167a0 to i8*
  %v9_167a0 = load i8, i8* %v8_167a0, align 1
  %v10_167a0 = zext i8 %v9_167a0 to i32
  store i32 %v10_167a0, i32* %r3.global-to-local, align 4
  store i32 %v7_167a0, i32* %r1.global-to-local, align 4
  %v9_167a4 = add i32 %v5_1679c, -2
  %v10_167a4 = inttoptr i32 %v9_167a4 to i8*
  store i8 %v9_167a0, i8* %v10_167a4, align 1
  %v11_167a4 = load i32, i32* %r0.global-to-local, align 4
  %v12_167a4 = add i32 %v11_167a4, -1
  store i32 %v12_167a4, i32* %r0.global-to-local, align 4
  br i1 %v9_16794, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_167a8 = load i32, i32* %r1.global-to-local, align 4
  %v9_167a8 = add i32 %v8_167a8, -1
  %v10_167a8 = inttoptr i32 %v9_167a8 to i8*
  %v11_167a8 = load i8, i8* %v10_167a8, align 1
  %v12_167a8 = zext i8 %v11_167a8 to i32
  store i32 %v12_167a8, i32* %r3.global-to-local, align 4
  store i32 %v9_167a8, i32* %r1.global-to-local, align 4
  %v11_167ac = add i32 %v11_167a4, -2
  %v12_167ac = inttoptr i32 %v11_167ac to i8*
  store i8 %v11_167a8, i8* %v12_167ac, align 1
  %v13_167ac = load i32, i32* %r0.global-to-local, align 4
  %v14_167ac = add i32 %v13_167ac, -1
  store i32 %v14_167ac, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_16794, %bb146
  %v0_1680831 = phi i32 [ %v12_167a4, %bb145 ], [ %v6_1679c, %dec_label_pc_16794 ], [ %v14_167ac, %bb146 ]
  %v0_167b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_167b0 = load i32, i32* @ip, align 4
  %v2_167b0 = sub i32 %v0_167b0, %v1_167b0
  store i32 %v2_167b0, i32* %r2.global-to-local, align 4
  %v4_167b0 = xor i32 %v1_167b0, %v0_167b0
  %v5_167b0 = xor i32 %v2_167b0, %v0_167b0
  %v6_167b0 = and i32 %v5_167b0, %v4_167b0
  %v7_167b0 = icmp slt i32 %v6_167b0, 0
  store i1 %v7_167b0, i1* %cpsr_v.global-to-local, align 1
  %v8_167b0 = icmp slt i32 %v2_167b0, 0
  store i1 %v8_167b0, i1* %cpsr_n.global-to-local, align 1
  %v9_167b0 = icmp eq i32 %v0_167b0, %v1_167b0
  store i1 %v9_167b0, i1* %cpsr_z.global-to-local, align 1
  %v5_167b4 = icmp slt i32 %v0_167b0, %v1_167b0
  br i1 %v5_167b4, label %bb141, label %dec_label_pc_167b8

dec_label_pc_167b8:                               ; preds = %.thread25
  %v0_167b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_167b8 = urem i32 %v0_167b8, 4
  store i32 %v1_167b8, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_167b8 = icmp eq i32 %v1_167b8, 0
  store i1 %v2_167b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_167b8, label %dec_label_pc_166fc, label %dec_label_pc_167c0

dec_label_pc_167c0:                               ; preds = %dec_label_pc_166f4, %dec_label_pc_167b8
  %v0_1680830 = phi i32 [ %v2_166e0, %dec_label_pc_166f4 ], [ %v0_1680831, %dec_label_pc_167b8 ]
  %v0_168b4 = phi i32 [ %v2_166e4, %dec_label_pc_166f4 ], [ %v2_167b0, %dec_label_pc_167b8 ]
  %v0_167c0 = phi i32 [ %v2_166dc, %dec_label_pc_166f4 ], [ %v0_167b8, %dec_label_pc_167b8 ]
  %v0_167c8 = phi i32 [ %v1_166f4, %dec_label_pc_166f4 ], [ %v1_167b8, %dec_label_pc_167b8 ]
  %v1_167c0 = and i32 %v0_167c0, -4
  store i32 %v1_167c0, i32* %r1.global-to-local, align 4
  %v1_167c4 = inttoptr i32 %v1_167c0 to i32*
  %v2_167c4 = load i32, i32* %v1_167c4, align 4
  store i32 %v2_167c4, i32* %r3.global-to-local, align 4
  %v7_167c8 = icmp ult i32 %v0_167c8, 2
  %v2_168ac = add i32 %v0_168b4, -12
  %v4_168ac = sub i32 11, %v0_168b4
  %v5_168ac = and i32 %v4_168ac, %v0_168b4
  %v6_168ac = icmp slt i32 %v5_168ac, 0
  store i1 %v6_168ac, i1* %cpsr_v.global-to-local, align 1
  %v7_168ac = icmp slt i32 %v2_168ac, 0
  store i1 %v7_168ac, i1* %cpsr_n.global-to-local, align 1
  %v8_168ac = icmp eq i32 %v0_168b4, 12
  store i1 %v8_168ac, i1* %cpsr_z.global-to-local, align 1
  %v5_168b0 = icmp slt i32 %v0_168b4, 12
  br i1 %v7_167c8, label %dec_label_pc_168ac, label %dec_label_pc_167d0

dec_label_pc_167d0:                               ; preds = %dec_label_pc_167c0
  %v8_167c8 = icmp eq i32 %v0_167c8, 2
  br i1 %v8_167c8, label %dec_label_pc_16840, label %dec_label_pc_167d4

dec_label_pc_167d4:                               ; preds = %dec_label_pc_167d0
  br i1 %v5_168b0, label %dec_label_pc_16820, label %dec_label_pc_167dc

dec_label_pc_167dc:                               ; preds = %dec_label_pc_167d4
  store i32 %v2_168ac, i32* %r2.global-to-local, align 4
  %v3_167e0 = load i32, i32* @r4, align 4
  store i32 %v3_167e0, i32* %stack_var_-12, align 4
  %v6_167e0 = load i32, i32* @r5, align 4
  store i32 %v6_167e0, i32* %stack_var_-8, align 4
  %v9_167e0 = load i32, i32* @lr, align 4
  br label %dec_label_pc_167e4

dec_label_pc_167e4:                               ; preds = %dec_label_pc_167e4.dec_label_pc_167e4_crit_edge, %dec_label_pc_167dc
  %v0_16808 = phi i32 [ %v1_16808, %dec_label_pc_167e4.dec_label_pc_167e4_crit_edge ], [ %v0_1680830, %dec_label_pc_167dc ]
  %v0_167e8 = phi i32 [ %v0_167e8.pre, %dec_label_pc_167e4.dec_label_pc_167e4_crit_edge ], [ %v1_167c0, %dec_label_pc_167dc ]
  %v0_167e4 = phi i32 [ %v0_167e4.pre, %dec_label_pc_167e4.dec_label_pc_167e4_crit_edge ], [ %v2_167c4, %dec_label_pc_167dc ]
  %v3_167e4 = mul i32 %v0_167e4, 256
  store i32 %v3_167e4, i32* %lr.global-to-local, align 4
  %v1_167e8 = add i32 %v0_167e8, -4
  %v2_167e8 = inttoptr i32 %v1_167e8 to i32*
  %v3_167e8 = load i32, i32* %v2_167e8, align 4
  store i32 %v3_167e8, i32* %r3.global-to-local, align 4
  %v4_167e8 = add i32 %v0_167e8, -8
  %v5_167e8 = inttoptr i32 %v4_167e8 to i32*
  %v6_167e8 = load i32, i32* %v5_167e8, align 4
  store i32 %v6_167e8, i32* %r4.global-to-local, align 4
  %v7_167e8 = add i32 %v0_167e8, -12
  %v8_167e8 = inttoptr i32 %v7_167e8 to i32*
  %v9_167e8 = load i32, i32* %v8_167e8, align 4
  store i32 %v9_167e8, i32* %r5.global-to-local, align 4
  %v10_167e8 = add i32 %v0_167e8, -16
  %v11_167e8 = inttoptr i32 %v10_167e8 to i32*
  %v12_167e8 = load i32, i32* %v11_167e8, align 4
  store i32 %v10_167e8, i32* %r1.global-to-local, align 4
  %v4_167ec = udiv i32 %v12_167e8, 16777216
  %v5_167ec = or i32 %v4_167ec, %v3_167e4
  store i32 %v5_167ec, i32* %lr.global-to-local, align 4
  %v3_167f0 = mul i32 %v12_167e8, 256
  %v4_167f4 = udiv i32 %v9_167e8, 16777216
  %v5_167f4 = or i32 %v3_167f0, %v4_167f4
  store i32 %v5_167f4, i32* @ip, align 4
  %v3_167f8 = mul i32 %v9_167e8, 256
  %v4_167fc = udiv i32 %v6_167e8, 16777216
  %v5_167fc = or i32 %v3_167f8, %v4_167fc
  store i32 %v5_167fc, i32* %r5.global-to-local, align 4
  %v3_16800 = mul i32 %v6_167e8, 256
  %v4_16804 = udiv i32 %v3_167e8, 16777216
  %v5_16804 = or i32 %v3_16800, %v4_16804
  store i32 %v5_16804, i32* %r4.global-to-local, align 4
  %v1_16808 = add i32 %v0_16808, -16
  %v2_16808 = inttoptr i32 %v1_16808 to i32*
  store i32 %v5_16804, i32* %v2_16808, align 4
  %v4_16808 = add i32 %v0_16808, -12
  %v5_16808 = inttoptr i32 %v4_16808 to i32*
  %v6_16808 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16808, i32* %v5_16808, align 4
  %v7_16808 = add i32 %v0_16808, -8
  %v8_16808 = inttoptr i32 %v7_16808 to i32*
  %v9_16808 = load i32, i32* @ip, align 4
  store i32 %v9_16808, i32* %v8_16808, align 4
  %v10_16808 = add i32 %v0_16808, -4
  %v11_16808 = inttoptr i32 %v10_16808 to i32*
  %v12_16808 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16808, i32* %v11_16808, align 4
  store i32 %v1_16808, i32* %r0.global-to-local, align 4
  %v0_1680c = load i32, i32* %r2.global-to-local, align 4
  %v2_1680c = add i32 %v0_1680c, -16
  store i32 %v2_1680c, i32* %r2.global-to-local, align 4
  %v6_16810 = icmp slt i32 %v0_1680c, 16
  br i1 %v6_16810, label %dec_label_pc_16814, label %dec_label_pc_167e4.dec_label_pc_167e4_crit_edge

dec_label_pc_167e4.dec_label_pc_167e4_crit_edge:  ; preds = %dec_label_pc_167e4
  %v0_167e4.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_167e8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_167e4

dec_label_pc_16814:                               ; preds = %dec_label_pc_167e4
  %v2_16814 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16814, i32* @r4, align 4
  %v5_16814 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_16814, i32* @r5, align 4
  store i32 %v9_167e0, i32* @lr, align 4
  %v2_16818 = add i32 %v0_1680c, -4
  store i32 %v2_16818, i32* %r2.global-to-local, align 4
  %v4_16818 = add i32 %v0_1680c, 2147483632
  %v5_16818 = and i32 %v2_16818, %v4_16818
  %v6_16818 = icmp slt i32 %v5_16818, 0
  store i1 %v6_16818, i1* %cpsr_v.global-to-local, align 1
  %v7_16818 = icmp slt i32 %v2_16818, 0
  store i1 %v7_16818, i1* %cpsr_n.global-to-local, align 1
  %v8_16818 = icmp eq i32 %v2_16818, 0
  store i1 %v8_16818, i1* %cpsr_z.global-to-local, align 1
  %v5_1681c = icmp slt i32 %v2_1680c, -12
  br i1 %v5_1681c, label %dec_label_pc_16838, label %dec_label_pc_16820

dec_label_pc_16820:                               ; preds = %dec_label_pc_16814, %dec_label_pc_167d4, %dec_label_pc_16820
  %v1_1682c = phi i32 [ %v5_1682c, %dec_label_pc_16820 ], [ %v1_16808, %dec_label_pc_16814 ], [ %v0_1680830, %dec_label_pc_167d4 ]
  %v0_16820 = load i32, i32* %r3.global-to-local, align 4
  %v3_16820 = mul i32 %v0_16820, 256
  store i32 %v3_16820, i32* %ip.global-to-local, align 4
  %v0_16824 = load i32, i32* %r1.global-to-local, align 4
  %v1_16824 = add i32 %v0_16824, -4
  %v2_16824 = inttoptr i32 %v1_16824 to i32*
  %v3_16824 = load i32, i32* %v2_16824, align 4
  store i32 %v3_16824, i32* %r3.global-to-local, align 4
  store i32 %v1_16824, i32* %r1.global-to-local, align 4
  %v4_16828 = udiv i32 %v3_16824, 16777216
  %v5_16828 = or i32 %v4_16828, %v3_16820
  store i32 %v5_16828, i32* @ip, align 4
  %v2_1682c = add i32 %v1_1682c, -4
  %v3_1682c = inttoptr i32 %v2_1682c to i32*
  store i32 %v5_16828, i32* %v3_1682c, align 4
  %v4_1682c = load i32, i32* %r0.global-to-local, align 4
  %v5_1682c = add i32 %v4_1682c, -4
  store i32 %v5_1682c, i32* %r0.global-to-local, align 4
  %v0_16830 = load i32, i32* %r2.global-to-local, align 4
  %v2_16830 = add i32 %v0_16830, -4
  store i32 %v2_16830, i32* %r2.global-to-local, align 4
  %v6_16834 = icmp slt i32 %v0_16830, 4
  br i1 %v6_16834, label %dec_label_pc_16838.loopexit, label %dec_label_pc_16820

dec_label_pc_16838.loopexit:                      ; preds = %dec_label_pc_16820
  %v4_16830 = sub i32 3, %v0_16830
  %v5_16830 = and i32 %v4_16830, %v0_16830
  %v6_16830 = icmp slt i32 %v5_16830, 0
  %v7_16830 = icmp slt i32 %v2_16830, 0
  store i1 %v6_16830, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16830, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16838

dec_label_pc_16838:                               ; preds = %dec_label_pc_16838.loopexit, %dec_label_pc_16814
  %v2_1677c62 = phi i32 [ %v5_1682c, %dec_label_pc_16838.loopexit ], [ %v1_16808, %dec_label_pc_16814 ]
  %v0_1676c58 = phi i32 [ %v2_16830, %dec_label_pc_16838.loopexit ], [ %v2_16818, %dec_label_pc_16814 ]
  %v0_16838 = load i32, i32* %r1.global-to-local, align 4
  %v1_16838 = add i32 %v0_16838, 3
  store i32 %v1_16838, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_16840:                               ; preds = %dec_label_pc_167d0
  br i1 %v5_168b0, label %dec_label_pc_1688c, label %dec_label_pc_16848

dec_label_pc_16848:                               ; preds = %dec_label_pc_16840
  store i32 %v2_168ac, i32* %r2.global-to-local, align 4
  %v3_1684c = load i32, i32* @r4, align 4
  store i32 %v3_1684c, i32* %stack_var_-12, align 4
  %v6_1684c = load i32, i32* @r5, align 4
  store i32 %v6_1684c, i32* %stack_var_-8, align 4
  %v9_1684c = load i32, i32* @lr, align 4
  br label %dec_label_pc_16850

dec_label_pc_16850:                               ; preds = %dec_label_pc_16850.dec_label_pc_16850_crit_edge, %dec_label_pc_16848
  %v0_16874 = phi i32 [ %v1_16874, %dec_label_pc_16850.dec_label_pc_16850_crit_edge ], [ %v0_1680830, %dec_label_pc_16848 ]
  %v0_16854 = phi i32 [ %v0_16854.pre, %dec_label_pc_16850.dec_label_pc_16850_crit_edge ], [ %v1_167c0, %dec_label_pc_16848 ]
  %v0_16850 = phi i32 [ %v0_16850.pre, %dec_label_pc_16850.dec_label_pc_16850_crit_edge ], [ %v2_167c4, %dec_label_pc_16848 ]
  %v3_16850 = mul i32 %v0_16850, 65536
  store i32 %v3_16850, i32* %lr.global-to-local, align 4
  %v1_16854 = add i32 %v0_16854, -4
  %v2_16854 = inttoptr i32 %v1_16854 to i32*
  %v3_16854 = load i32, i32* %v2_16854, align 4
  store i32 %v3_16854, i32* %r3.global-to-local, align 4
  %v4_16854 = add i32 %v0_16854, -8
  %v5_16854 = inttoptr i32 %v4_16854 to i32*
  %v6_16854 = load i32, i32* %v5_16854, align 4
  store i32 %v6_16854, i32* %r4.global-to-local, align 4
  %v7_16854 = add i32 %v0_16854, -12
  %v8_16854 = inttoptr i32 %v7_16854 to i32*
  %v9_16854 = load i32, i32* %v8_16854, align 4
  store i32 %v9_16854, i32* %r5.global-to-local, align 4
  %v10_16854 = add i32 %v0_16854, -16
  %v11_16854 = inttoptr i32 %v10_16854 to i32*
  %v12_16854 = load i32, i32* %v11_16854, align 4
  store i32 %v10_16854, i32* %r1.global-to-local, align 4
  %v4_16858 = udiv i32 %v12_16854, 65536
  %v5_16858 = or i32 %v4_16858, %v3_16850
  store i32 %v5_16858, i32* %lr.global-to-local, align 4
  %v3_1685c = mul i32 %v12_16854, 65536
  %v4_16860 = udiv i32 %v9_16854, 65536
  %v5_16860 = or i32 %v3_1685c, %v4_16860
  store i32 %v5_16860, i32* @ip, align 4
  %v3_16864 = mul i32 %v9_16854, 65536
  %v4_16868 = udiv i32 %v6_16854, 65536
  %v5_16868 = or i32 %v3_16864, %v4_16868
  store i32 %v5_16868, i32* %r5.global-to-local, align 4
  %v3_1686c = mul i32 %v6_16854, 65536
  %v4_16870 = udiv i32 %v3_16854, 65536
  %v5_16870 = or i32 %v3_1686c, %v4_16870
  store i32 %v5_16870, i32* %r4.global-to-local, align 4
  %v1_16874 = add i32 %v0_16874, -16
  %v2_16874 = inttoptr i32 %v1_16874 to i32*
  store i32 %v5_16870, i32* %v2_16874, align 4
  %v4_16874 = add i32 %v0_16874, -12
  %v5_16874 = inttoptr i32 %v4_16874 to i32*
  %v6_16874 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16874, i32* %v5_16874, align 4
  %v7_16874 = add i32 %v0_16874, -8
  %v8_16874 = inttoptr i32 %v7_16874 to i32*
  %v9_16874 = load i32, i32* @ip, align 4
  store i32 %v9_16874, i32* %v8_16874, align 4
  %v10_16874 = add i32 %v0_16874, -4
  %v11_16874 = inttoptr i32 %v10_16874 to i32*
  %v12_16874 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16874, i32* %v11_16874, align 4
  store i32 %v1_16874, i32* %r0.global-to-local, align 4
  %v0_16878 = load i32, i32* %r2.global-to-local, align 4
  %v2_16878 = add i32 %v0_16878, -16
  store i32 %v2_16878, i32* %r2.global-to-local, align 4
  %v6_1687c = icmp slt i32 %v0_16878, 16
  br i1 %v6_1687c, label %dec_label_pc_16880, label %dec_label_pc_16850.dec_label_pc_16850_crit_edge

dec_label_pc_16850.dec_label_pc_16850_crit_edge:  ; preds = %dec_label_pc_16850
  %v0_16850.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_16854.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16850

dec_label_pc_16880:                               ; preds = %dec_label_pc_16850
  %v2_16880 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16880, i32* @r4, align 4
  %v5_16880 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_16880, i32* @r5, align 4
  store i32 %v9_1684c, i32* @lr, align 4
  %v2_16884 = add i32 %v0_16878, -4
  store i32 %v2_16884, i32* %r2.global-to-local, align 4
  %v4_16884 = add i32 %v0_16878, 2147483632
  %v5_16884 = and i32 %v2_16884, %v4_16884
  %v6_16884 = icmp slt i32 %v5_16884, 0
  store i1 %v6_16884, i1* %cpsr_v.global-to-local, align 1
  %v7_16884 = icmp slt i32 %v2_16884, 0
  store i1 %v7_16884, i1* %cpsr_n.global-to-local, align 1
  %v8_16884 = icmp eq i32 %v2_16884, 0
  store i1 %v8_16884, i1* %cpsr_z.global-to-local, align 1
  %v5_16888 = icmp slt i32 %v2_16878, -12
  br i1 %v5_16888, label %dec_label_pc_168a4, label %dec_label_pc_1688c

dec_label_pc_1688c:                               ; preds = %dec_label_pc_16880, %dec_label_pc_16840, %dec_label_pc_1688c
  %v1_16898 = phi i32 [ %v5_16898, %dec_label_pc_1688c ], [ %v1_16874, %dec_label_pc_16880 ], [ %v0_1680830, %dec_label_pc_16840 ]
  %v0_1688c = load i32, i32* %r3.global-to-local, align 4
  %v3_1688c = mul i32 %v0_1688c, 65536
  store i32 %v3_1688c, i32* %ip.global-to-local, align 4
  %v0_16890 = load i32, i32* %r1.global-to-local, align 4
  %v1_16890 = add i32 %v0_16890, -4
  %v2_16890 = inttoptr i32 %v1_16890 to i32*
  %v3_16890 = load i32, i32* %v2_16890, align 4
  store i32 %v3_16890, i32* %r3.global-to-local, align 4
  store i32 %v1_16890, i32* %r1.global-to-local, align 4
  %v4_16894 = udiv i32 %v3_16890, 65536
  %v5_16894 = or i32 %v4_16894, %v3_1688c
  store i32 %v5_16894, i32* @ip, align 4
  %v2_16898 = add i32 %v1_16898, -4
  %v3_16898 = inttoptr i32 %v2_16898 to i32*
  store i32 %v5_16894, i32* %v3_16898, align 4
  %v4_16898 = load i32, i32* %r0.global-to-local, align 4
  %v5_16898 = add i32 %v4_16898, -4
  store i32 %v5_16898, i32* %r0.global-to-local, align 4
  %v0_1689c = load i32, i32* %r2.global-to-local, align 4
  %v2_1689c = add i32 %v0_1689c, -4
  store i32 %v2_1689c, i32* %r2.global-to-local, align 4
  %v6_168a0 = icmp slt i32 %v0_1689c, 4
  br i1 %v6_168a0, label %dec_label_pc_168a4.loopexit, label %dec_label_pc_1688c

dec_label_pc_168a4.loopexit:                      ; preds = %dec_label_pc_1688c
  %v4_1689c = sub i32 3, %v0_1689c
  %v5_1689c = and i32 %v4_1689c, %v0_1689c
  %v6_1689c = icmp slt i32 %v5_1689c, 0
  %v7_1689c = icmp slt i32 %v2_1689c, 0
  store i1 %v6_1689c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_1689c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_168a4

dec_label_pc_168a4:                               ; preds = %dec_label_pc_168a4.loopexit, %dec_label_pc_16880
  %v2_1677c63 = phi i32 [ %v5_16898, %dec_label_pc_168a4.loopexit ], [ %v1_16874, %dec_label_pc_16880 ]
  %v0_1676c59 = phi i32 [ %v2_1689c, %dec_label_pc_168a4.loopexit ], [ %v2_16884, %dec_label_pc_16880 ]
  %v0_168a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_168a4 = add i32 %v0_168a4, 2
  store i32 %v1_168a4, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_168ac:                               ; preds = %dec_label_pc_167c0
  br i1 %v5_168b0, label %dec_label_pc_168f8, label %dec_label_pc_168b4

dec_label_pc_168b4:                               ; preds = %dec_label_pc_168ac
  store i32 %v2_168ac, i32* %r2.global-to-local, align 4
  %v3_168b8 = load i32, i32* @r4, align 4
  store i32 %v3_168b8, i32* %stack_var_-12, align 4
  %v6_168b8 = load i32, i32* @r5, align 4
  store i32 %v6_168b8, i32* %stack_var_-8, align 4
  %v9_168b8 = load i32, i32* @lr, align 4
  br label %dec_label_pc_168bc

dec_label_pc_168bc:                               ; preds = %dec_label_pc_168bc.dec_label_pc_168bc_crit_edge, %dec_label_pc_168b4
  %v0_168e0 = phi i32 [ %v1_168e0, %dec_label_pc_168bc.dec_label_pc_168bc_crit_edge ], [ %v0_1680830, %dec_label_pc_168b4 ]
  %v0_168c0 = phi i32 [ %v0_168c0.pre, %dec_label_pc_168bc.dec_label_pc_168bc_crit_edge ], [ %v1_167c0, %dec_label_pc_168b4 ]
  %v0_168bc = phi i32 [ %v0_168bc.pre, %dec_label_pc_168bc.dec_label_pc_168bc_crit_edge ], [ %v2_167c4, %dec_label_pc_168b4 ]
  %v3_168bc = mul i32 %v0_168bc, 16777216
  store i32 %v3_168bc, i32* %lr.global-to-local, align 4
  %v1_168c0 = add i32 %v0_168c0, -4
  %v2_168c0 = inttoptr i32 %v1_168c0 to i32*
  %v3_168c0 = load i32, i32* %v2_168c0, align 4
  store i32 %v3_168c0, i32* %r3.global-to-local, align 4
  %v4_168c0 = add i32 %v0_168c0, -8
  %v5_168c0 = inttoptr i32 %v4_168c0 to i32*
  %v6_168c0 = load i32, i32* %v5_168c0, align 4
  store i32 %v6_168c0, i32* %r4.global-to-local, align 4
  %v7_168c0 = add i32 %v0_168c0, -12
  %v8_168c0 = inttoptr i32 %v7_168c0 to i32*
  %v9_168c0 = load i32, i32* %v8_168c0, align 4
  store i32 %v9_168c0, i32* %r5.global-to-local, align 4
  %v10_168c0 = add i32 %v0_168c0, -16
  %v11_168c0 = inttoptr i32 %v10_168c0 to i32*
  %v12_168c0 = load i32, i32* %v11_168c0, align 4
  store i32 %v10_168c0, i32* %r1.global-to-local, align 4
  %v4_168c4 = udiv i32 %v12_168c0, 256
  %v5_168c4 = or i32 %v4_168c4, %v3_168bc
  store i32 %v5_168c4, i32* %lr.global-to-local, align 4
  %v3_168c8 = mul i32 %v12_168c0, 16777216
  %v4_168cc = udiv i32 %v9_168c0, 256
  %v5_168cc = or i32 %v3_168c8, %v4_168cc
  store i32 %v5_168cc, i32* @ip, align 4
  %v3_168d0 = mul i32 %v9_168c0, 16777216
  %v4_168d4 = udiv i32 %v6_168c0, 256
  %v5_168d4 = or i32 %v3_168d0, %v4_168d4
  store i32 %v5_168d4, i32* %r5.global-to-local, align 4
  %v3_168d8 = mul i32 %v6_168c0, 16777216
  %v4_168dc = udiv i32 %v3_168c0, 256
  %v5_168dc = or i32 %v3_168d8, %v4_168dc
  store i32 %v5_168dc, i32* %r4.global-to-local, align 4
  %v1_168e0 = add i32 %v0_168e0, -16
  %v2_168e0 = inttoptr i32 %v1_168e0 to i32*
  store i32 %v5_168dc, i32* %v2_168e0, align 4
  %v4_168e0 = add i32 %v0_168e0, -12
  %v5_168e0 = inttoptr i32 %v4_168e0 to i32*
  %v6_168e0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_168e0, i32* %v5_168e0, align 4
  %v7_168e0 = add i32 %v0_168e0, -8
  %v8_168e0 = inttoptr i32 %v7_168e0 to i32*
  %v9_168e0 = load i32, i32* @ip, align 4
  store i32 %v9_168e0, i32* %v8_168e0, align 4
  %v10_168e0 = add i32 %v0_168e0, -4
  %v11_168e0 = inttoptr i32 %v10_168e0 to i32*
  %v12_168e0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_168e0, i32* %v11_168e0, align 4
  store i32 %v1_168e0, i32* %r0.global-to-local, align 4
  %v0_168e4 = load i32, i32* %r2.global-to-local, align 4
  %v2_168e4 = add i32 %v0_168e4, -16
  store i32 %v2_168e4, i32* %r2.global-to-local, align 4
  %v6_168e8 = icmp slt i32 %v0_168e4, 16
  br i1 %v6_168e8, label %dec_label_pc_168ec, label %dec_label_pc_168bc.dec_label_pc_168bc_crit_edge

dec_label_pc_168bc.dec_label_pc_168bc_crit_edge:  ; preds = %dec_label_pc_168bc
  %v0_168bc.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_168c0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_168bc

dec_label_pc_168ec:                               ; preds = %dec_label_pc_168bc
  %v2_168ec = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_168ec, i32* @r4, align 4
  %v5_168ec = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_168ec, i32* @r5, align 4
  store i32 %v9_168b8, i32* @lr, align 4
  %v2_168f0 = add i32 %v0_168e4, -4
  store i32 %v2_168f0, i32* %r2.global-to-local, align 4
  %v4_168f0 = add i32 %v0_168e4, 2147483632
  %v5_168f0 = and i32 %v2_168f0, %v4_168f0
  %v6_168f0 = icmp slt i32 %v5_168f0, 0
  store i1 %v6_168f0, i1* %cpsr_v.global-to-local, align 1
  %v7_168f0 = icmp slt i32 %v2_168f0, 0
  store i1 %v7_168f0, i1* %cpsr_n.global-to-local, align 1
  %v8_168f0 = icmp eq i32 %v2_168f0, 0
  store i1 %v8_168f0, i1* %cpsr_z.global-to-local, align 1
  %v5_168f4 = icmp slt i32 %v2_168e4, -12
  br i1 %v5_168f4, label %dec_label_pc_16910, label %dec_label_pc_168f8

dec_label_pc_168f8:                               ; preds = %dec_label_pc_168ec, %dec_label_pc_168ac, %dec_label_pc_168f8
  %v1_16904 = phi i32 [ %v5_16904, %dec_label_pc_168f8 ], [ %v1_168e0, %dec_label_pc_168ec ], [ %v0_1680830, %dec_label_pc_168ac ]
  %v0_168f8 = load i32, i32* %r3.global-to-local, align 4
  %v3_168f8 = mul i32 %v0_168f8, 16777216
  store i32 %v3_168f8, i32* %ip.global-to-local, align 4
  %v0_168fc = load i32, i32* %r1.global-to-local, align 4
  %v1_168fc = add i32 %v0_168fc, -4
  %v2_168fc = inttoptr i32 %v1_168fc to i32*
  %v3_168fc = load i32, i32* %v2_168fc, align 4
  store i32 %v3_168fc, i32* %r3.global-to-local, align 4
  store i32 %v1_168fc, i32* %r1.global-to-local, align 4
  %v4_16900 = udiv i32 %v3_168fc, 256
  %v5_16900 = or i32 %v4_16900, %v3_168f8
  store i32 %v5_16900, i32* @ip, align 4
  %v2_16904 = add i32 %v1_16904, -4
  %v3_16904 = inttoptr i32 %v2_16904 to i32*
  store i32 %v5_16900, i32* %v3_16904, align 4
  %v4_16904 = load i32, i32* %r0.global-to-local, align 4
  %v5_16904 = add i32 %v4_16904, -4
  store i32 %v5_16904, i32* %r0.global-to-local, align 4
  %v0_16908 = load i32, i32* %r2.global-to-local, align 4
  %v2_16908 = add i32 %v0_16908, -4
  store i32 %v2_16908, i32* %r2.global-to-local, align 4
  %v6_1690c = icmp slt i32 %v0_16908, 4
  br i1 %v6_1690c, label %dec_label_pc_16910.loopexit, label %dec_label_pc_168f8

dec_label_pc_16910.loopexit:                      ; preds = %dec_label_pc_168f8
  %v4_16908 = sub i32 3, %v0_16908
  %v5_16908 = and i32 %v4_16908, %v0_16908
  %v6_16908 = icmp slt i32 %v5_16908, 0
  %v7_16908 = icmp slt i32 %v2_16908, 0
  store i1 %v6_16908, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16908, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16910

dec_label_pc_16910:                               ; preds = %dec_label_pc_16910.loopexit, %dec_label_pc_168ec
  %v2_1677c64 = phi i32 [ %v5_16904, %dec_label_pc_16910.loopexit ], [ %v1_168e0, %dec_label_pc_168ec ]
  %v0_1676c60 = phi i32 [ %v2_16908, %dec_label_pc_16910.loopexit ], [ %v2_168f0, %dec_label_pc_168ec ]
  %v0_16910 = load i32, i32* %r1.global-to-local, align 4
  %v1_16910 = add i32 %v0_16910, 1
  store i32 %v1_16910, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_16904, { 0, 2, 1 }
  uselistorder i32 %v3_168f8, { 1, 0 }
  uselistorder i32 %v2_168f0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_168e0, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_168c0, { 1, 0 }
  uselistorder i32 %v3_168bc, { 1, 0 }
  uselistorder i32 %v0_168c0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_168e0, { 3, 2, 1, 0 }
  uselistorder i32 %v5_16898, { 0, 2, 1 }
  uselistorder i32 %v3_1688c, { 1, 0 }
  uselistorder i32 %v2_16884, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16874, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_16854, { 1, 0 }
  uselistorder i32 %v3_16850, { 1, 0 }
  uselistorder i32 %v0_16854, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16874, { 3, 2, 1, 0 }
  uselistorder i32 %v5_1682c, { 0, 2, 1 }
  uselistorder i32 %v3_16820, { 1, 0 }
  uselistorder i32 %v2_16818, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16808, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_167e8, { 1, 0 }
  uselistorder i32 %v3_167e4, { 1, 0 }
  uselistorder i32 %v0_167e8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16808, { 3, 2, 1, 0 }
  uselistorder i1 %v5_168b0, { 2, 0, 1 }
  uselistorder i32 %v0_167c8, { 1, 0 }
  uselistorder i32 %v0_168b4, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1680830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_167b8, { 2, 1, 0 }
  uselistorder i32 %v0_167b8, { 2, 0, 1 }
  uselistorder i32 %v2_167b0, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_167b0, { 1, 2, 0, 3 }
  uselistorder i32 %v0_167b0, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1680831, { 2, 1, 0 }
  uselistorder i32 %v11_1678c, { 1, 0 }
  uselistorder i32 %v7_1678c, { 1, 0 }
  uselistorder i32 %v1_1676c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_1676c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_16770, { 1, 0 }
  uselistorder i32 %v7_16764, { 0, 2, 1 }
  uselistorder i32 %v10_16760, { 1, 0 }
  uselistorder i32 %v9_16758, { 1, 0, 2 }
  uselistorder i32 %v6_16754, { 1, 0 }
  uselistorder i32 %v2_1674c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_1674c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_1675c, { 0, 3, 2, 1 }
  uselistorder i32 %v7_16740, { 0, 2, 1 }
  uselistorder i32 %v13_1673c, { 1, 0 }
  uselistorder i32 %v4_16738, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_16738, { 2, 0, 1 }
  uselistorder i32 %v6_16740, { 0, 3, 2, 1 }
  uselistorder i32 %v7_16730, { 0, 2, 1 }
  uselistorder i32 %v16_1672c, { 1, 0 }
  uselistorder i32 %v4_16728, { 1, 2, 0 }
  uselistorder i32 %v0_16738.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_16730, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_1671c, { 0, 3, 2, 1 }
  uselistorder i32 %v10_16718, { 1, 0 }
  uselistorder i32 %v1_16714, { 1, 0 }
  uselistorder i32 %v10_16710, { 1, 0 }
  uselistorder i32 %v0_16710, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16714, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_16708, { 0, 2, 1 }
  uselistorder i32 %v2_166fc, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_166fc, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_1671448, { 1, 2, 0 }
  uselistorder i32 %v1_166f4, { 2, 1, 0 }
  uselistorder i32 %v1_166ec, { 2, 3, 1, 0 }
  uselistorder i32 %v2_166e4, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_166e0, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_166dc, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_166dc, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_166c8, { 0, 2, 1 }
  uselistorder i32 %v3_166bc, { 1, 0 }
  uselistorder i32 %v2_166b4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_166a4, { 1, 0, 3, 2 }
  uselistorder i32 %v8_16684, { 1, 0, 2 }
  uselistorder i32 %v5_16684, { 1, 0, 2 }
  uselistorder i32 %v2_16684, { 1, 0, 2 }
  uselistorder i32 %v3_16680, { 1, 0 }
  uselistorder i32 %v0_16684, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_166a4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_1665c, { 0, 2, 1 }
  uselistorder i32 %v3_16650, { 1, 0 }
  uselistorder i32 %v2_16648, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_16638, { 1, 0, 3, 2 }
  uselistorder i32 %v8_16618, { 1, 0, 2 }
  uselistorder i32 %v5_16618, { 1, 0, 2 }
  uselistorder i32 %v2_16618, { 1, 0, 2 }
  uselistorder i32 %v3_16614, { 1, 0 }
  uselistorder i32 %v0_16618, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16638, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_165f0, { 0, 2, 1 }
  uselistorder i32 %v3_165e4, { 1, 0 }
  uselistorder i32 %v2_165dc, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_165cc, { 1, 0, 3, 2 }
  uselistorder i32 %v8_165ac, { 1, 0, 2 }
  uselistorder i32 %v5_165ac, { 1, 0, 2 }
  uselistorder i32 %v2_165ac, { 1, 0, 2 }
  uselistorder i32 %v3_165a8, { 1, 0 }
  uselistorder i32 %v0_165ac, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_165cc, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_16674, { 2, 0, 1 }
  uselistorder i32 %v0_16678, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_165cc74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_1657c, { 1, 0 }
  uselistorder i32 %v0_1657c, { 3, 1, 0, 2 }
  uselistorder i32 %v2_16574, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_16574, { 1, 2, 0, 3 }
  uselistorder i32 %v0_16574, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_165cc75, { 2, 1, 0 }
  uselistorder i32 %v1_16554, { 1, 0, 2 }
  uselistorder i32 %v1_1652c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_1652c, { 1, 2, 0, 3 }
  uselistorder i32 %v8_16518, { 1, 0, 2 }
  uselistorder i32 %v6_16514, { 1, 0 }
  uselistorder i32 %v2_1650c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_1650c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_1651c, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_16504, { 0, 2, 1 }
  uselistorder i32 %v3_16504, { 3, 0, 1, 2 }
  uselistorder i1 %v0_16504, { 1, 0 }
  uselistorder i1 %v1_16504, { 1, 0 }
  uselistorder i32 %v3_16500, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_164f8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_164e4, { 1, 2, 0 }
  uselistorder i32 %v12_164d8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_164cc, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_164d0, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_164c0, { 0, 2, 1 }
  uselistorder i32 %v2_164b8, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_164b8, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_164b0, { 1, 0 }
  uselistorder i32 %v1_164a8, { 2, 1, 0 }
  uselistorder i32 %v2_164a0, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_164a0, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_16490, { 1, 0 }
  uselistorder i32 %v1_16490, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_16490, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r3.global-to-local, { 0, 9, 1, 2, 3, 10, 4, 5, 6, 11, 7, 8, 12, 13, 35, 36, 37, 38, 39, 40, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 25, 1, 2, 3, 4, 5, 26, 6, 7, 8, 9, 10, 27, 11, 12, 13, 14, 15, 28, 66, 67, 69, 68, 70, 71, 16, 17, 18, 19, 21, 20, 22, 23, 24, 29, 30, 61, 31, 32, 33, 34, 35, 62, 36, 37, 38, 39, 40, 63, 41, 42, 43, 44, 45, 64, 46, 47, 49, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 15, 2, 4, 6, 8, 5, 16, 7, 9, 11, 13, 10, 17, 12, 14, 18, 56, 19, 20, 21, 55, 58, 59, 61, 60, 62, 63, 65, 64, 66, 57, 22, 53, 23, 54, 24, 25, 26, 27, 28, 31, 29, 41, 30, 32, 35, 33, 42, 34, 36, 39, 37, 43, 38, 40, 44, 45, 46, 48, 47, 49, 50, 51, 52 }
  uselistorder i32* %r0.global-to-local, { 0, 23, 1, 2, 24, 3, 4, 25, 5, 6, 7, 8, 26, 28, 13, 29, 31, 30, 32, 33, 35, 34, 36, 27, 9, 10, 11, 12, 14, 15, 16, 18, 17, 19, 20, 21, 22 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 41, 42, 43, 44, 45, 46, 13, 14, 3, 15, 16, 17, 18, 19, 0, 20, 1, 22, 2, 23, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 36, 37, 38, 39, 40, 41, 42, 12, 13, 3, 14, 15, 16, 0, 17, 1, 19, 2, 20, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 42, 43, 44, 45, 46, 47, 48, 13, 14, 3, 15, 16, 17, 18, 19, 0, 20, 1, 22, 2, 23, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i32 31, { 21, 22, 1, 0, 10, 12, 11, 13, 2, 15, 14, 26, 16, 6, 17, 23, 18, 24, 19, 25, 20, 7, 3, 8, 4, 5, 9 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -2, { 12, 13, 11, 23, 0, 15, 1, 16, 2, 3, 10, 8, 9, 7, 6, 5, 4, 24, 25, 26, 27, 14, 22, 21, 20, 19, 18, 17 }
  uselistorder i32 65536, { 8, 7, 13, 9, 14, 10, 15, 11, 16, 12, 17, 18, 19, 23, 20, 24, 21, 25, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 60, 63, 62, 64, 65, 66, 67, 68, 69, 70, 1, 71, 0, 2, 72, 73, 74, 75, 76, 79, 77, 78, 80, 81, 82, 86, 87, 88, 89, 83, 84, 85, 90, 93, 94, 95, 91, 92, 96, 97, 98, 100, 99, 101, 3, 102, 104, 105, 103, 106, 4, 107, 109, 110, 108, 111, 112, 114, 115, 116, 113, 117, 118, 119, 120, 121, 156, 123, 122, 157, 125, 124, 126, 128, 127, 130, 129, 158, 132, 131, 159, 134, 133, 135, 137, 136, 139, 138, 140, 5, 141, 143, 144, 145, 142, 146, 6, 147, 151, 152, 153, 148, 149, 150, 155, 154 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 47, 46, 49, 48, 53, 50, 52, 51, 54, 56, 55, 58, 57, 60, 59, 61, 62, 70, 63, 71, 64, 72, 65, 73, 74, 66, 75, 67, 76, 68, 77, 69, 81, 78, 82, 79, 83, 80, 87, 84, 88, 85, 89, 86, 90, 91, 92, 97, 93, 98, 94, 99, 95, 100, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 110, 114, 111, 115, 112, 116, 117, 119, 118, 125, 120, 126, 121, 127, 122, 128, 123, 129, 124, 130, 133, 134, 131, 132, 135, 136, 140, 137, 141, 138, 139, 142, 145, 146, 143, 144, 147, 148, 152, 149, 153, 150, 151, 154, 161, 155, 162, 163, 156, 164, 159, 165, 157, 166, 167, 158, 160, 168, 169, 173, 170, 174, 175, 171, 172, 176, 177, 178, 180, 179, 183, 181, 184, 182, 185, 186, 187 }
  uselistorder i32* @r5, {}
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 6, 5 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 15, 16, 17, 20, 21, 5, 2, 6, 3, 7, 4, 51, 52, 53, 54, 55, 0, 18, 8, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 9, 32, 33, 34, 10, 35, 36, 37, 11, 38, 39, 40, 12, 41, 42, 43, 44, 45, 46, 47, 48, 49, 1, 50, 13, 56, 57, 58, 14, 59 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24 }
  uselistorder i32 48, { 0, 9, 10, 7, 8, 2, 15, 3, 1, 11, 4, 12, 5, 13, 6, 14 }
  uselistorder i32 40, { 1, 9, 2, 0, 4, 29, 30, 10, 3, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 6, 31, 7, 32, 5, 33, 8, 34 }
  uselistorder i32 36, { 1, 8, 9, 6, 7, 0, 2, 3, 10, 4, 11, 5, 12 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0 }
  uselistorder i32 -32, { 1, 0, 2, 3 }
  uselistorder i32 24, { 0, 70, 71, 40, 41, 1, 72, 73, 37, 38, 17, 16, 85, 47, 86, 48, 63, 42, 18, 43, 19, 44, 20, 45, 46, 66, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 67, 62, 68, 64, 65, 87, 88, 89, 69, 90, 2, 74, 21, 3, 75, 22, 23, 4, 76, 24, 77, 78, 25, 5, 26, 27, 6, 28, 7, 8, 9, 10, 11, 12, 29, 13, 79, 30, 80, 81, 82, 31, 32, 14, 83, 33, 84, 34, 91, 92, 93, 94, 95, 35, 96, 15, 39, 36, 97 }
  uselistorder i32* @lr, { 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 0, 138, 139, 140, 1, 141, 142, 143, 2, 144, 145, 146, 147, 148, 149, 150, 151, 25, 26, 152, 153, 70, 71, 72, 73, 89, 90, 91, 92, 27, 28, 29, 30, 31, 93, 94, 4, 5, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 74, 75, 78, 79, 3, 82, 80, 81, 76, 77, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 64, 65, 66, 67, 68, 34, 110, 6, 7, 8, 9, 10, 11, 12, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 111, 112, 113, 83, 84, 85, 86, 87, 88, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127 }
  uselistorder i32 16, { 31, 32, 33, 199, 34, 200, 201, 35, 202, 203, 36, 204, 205, 206, 207, 208, 209, 95, 96, 84, 85, 100, 97, 98, 99, 101, 26, 102, 103, 5, 6, 7, 8, 9, 25, 10, 11, 0, 12, 13, 53, 181, 54, 86, 37, 55, 87, 88, 182, 184, 185, 186, 27, 83, 14, 15, 24, 80, 16, 187, 17, 56, 183, 57, 91, 38, 92, 42, 41, 40, 89, 39, 90, 43, 58, 59, 60, 61, 62, 63, 93, 64, 94, 65, 66, 28, 104, 105, 106, 107, 67, 108, 109, 110, 111, 112, 113, 114, 68, 115, 116, 117, 45, 118, 44, 47, 119, 46, 120, 121, 70, 122, 123, 124, 125, 126, 1, 69, 127, 128, 129, 72, 130, 131, 132, 133, 134, 2, 71, 135, 73, 136, 137, 138, 18, 139, 19, 140, 81, 20, 74, 75, 141, 142, 3, 49, 143, 48, 144, 76, 145, 146, 147, 21, 148, 22, 149, 82, 23, 77, 78, 150, 151, 4, 51, 152, 50, 153, 154, 155, 156, 157, 158, 29, 159, 160, 161, 162, 164, 163, 165, 166, 167, 168, 169, 170, 171, 30, 172, 173, 174, 175, 176, 178, 177, 179, 180, 188, 189, 190, 191, 192, 79, 193, 52, 194, 195, 196, 197, 198 }
  uselistorder i32 20, { 124, 3, 125, 126, 0, 4, 127, 29, 30, 23, 24, 1, 31, 32, 33, 34, 25, 16, 26, 17, 27, 18, 28, 107, 5, 108, 6, 109, 22, 106, 35, 36, 7, 37, 38, 39, 40, 41, 42, 43, 8, 44, 45, 46, 47, 48, 49, 50, 51, 52, 9, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 10, 65, 66, 67, 68, 69, 70, 71, 72, 11, 73, 74, 75, 2, 76, 77, 78, 79, 19, 80, 81, 82, 83, 84, 85, 86, 87, 88, 20, 89, 90, 91, 92, 93, 94, 95, 96, 13, 97, 12, 98, 99, 100, 101, 15, 102, 14, 103, 104, 105, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 21, 123 }
  uselistorder i32 27, { 1, 0, 3, 2, 4 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 7, { 32, 33, 35, 71, 77, 4, 36, 5, 18, 38, 19, 37, 2, 20, 72, 39, 21, 22, 23, 24, 25, 26, 27, 28, 29, 40, 41, 42, 6, 43, 44, 45, 46, 7, 47, 48, 49, 50, 8, 51, 9, 10, 52, 11, 53, 54, 12, 55, 56, 13, 57, 58, 14, 59, 60, 61, 62, 63, 15, 64, 65, 66, 67, 68, 16, 69, 3, 70, 0, 30, 73, 1, 31, 74, 75, 34, 17, 76 }
  uselistorder i32 -8, { 16, 17, 18, 19, 20, 21, 15, 14, 7, 13, 12, 11, 10, 22, 23, 24, 25, 8, 26, 0, 29, 9, 27, 28, 6, 1, 3, 2, 4, 5 }
  uselistorder i32* @ip, { 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 6, 7, 50, 1, 2, 3, 0, 4, 5 }
  uselistorder i1 false, { 43, 44, 45, 80, 15, 42, 81, 82, 39, 40, 41, 83, 14, 84, 85, 0, 48, 47, 49, 46, 1, 3, 4, 51, 2, 12, 16, 52, 5, 6, 7, 50, 86, 87, 88, 11, 8, 9, 10, 89, 55, 90, 91, 56, 92, 21, 22, 23, 24, 57, 93, 94, 73, 95, 96, 97, 62, 98, 26, 27, 63, 99, 64, 100, 58, 59, 60, 25, 101, 61, 102, 103, 72, 104, 105, 106, 107, 108, 109, 65, 66, 110, 111, 67, 112, 68, 69, 113, 70, 114, 71, 115, 53, 54, 116, 117, 118, 119, 120, 121, 28, 29, 74, 122, 123, 75, 35, 124, 76, 18, 19, 30, 20, 31, 32, 33, 13, 34, 125, 36, 37, 77, 78, 126, 17, 79, 127, 38, 128 }
  uselistorder i32 4, { 90, 81, 82, 6, 478, 83, 479, 67, 7, 8, 84, 480, 85, 481, 482, 483, 484, 86, 485, 486, 487, 488, 87, 489, 490, 491, 492, 493, 9, 494, 495, 496, 497, 498, 88, 499, 66, 500, 501, 502, 503, 504, 505, 10, 11, 89, 506, 260, 261, 215, 216, 262, 263, 264, 507, 508, 509, 510, 511, 158, 159, 160, 68, 161, 162, 440, 442, 441, 438, 439, 396, 397, 398, 399, 443, 444, 445, 446, 428, 429, 430, 447, 448, 163, 164, 165, 166, 167, 56, 12, 13, 265, 266, 267, 268, 269, 270, 14, 15, 76, 16, 17, 77, 449, 450, 213, 18, 19, 113, 91, 451, 452, 69, 219, 114, 220, 168, 221, 400, 401, 402, 237, 238, 65, 64, 403, 222, 223, 217, 218, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 115, 240, 241, 242, 239, 78, 404, 116, 243, 92, 117, 118, 20, 405, 21, 406, 407, 22, 23, 408, 409, 58, 410, 57, 415, 119, 416, 120, 417, 121, 418, 122, 419, 123, 420, 124, 422, 125, 423, 424, 421, 411, 126, 412, 413, 414, 251, 169, 253, 24, 254, 255, 252, 25, 256, 59, 127, 257, 258, 355, 271, 244, 72, 71, 70, 245, 128, 26, 27, 28, 29, 30, 31, 246, 60, 247, 61, 248, 249, 250, 32, 33, 129, 93, 130, 131, 170, 259, 0, 132, 34, 272, 273, 171, 274, 275, 276, 172, 173, 134, 277, 133, 278, 94, 279, 280, 174, 281, 282, 175, 176, 283, 95, 284, 96, 285, 286, 177, 178, 287, 179, 288, 289, 180, 181, 135, 290, 97, 291, 98, 292, 293, 294, 295, 296, 136, 297, 99, 298, 299, 300, 301, 302, 137, 303, 100, 304, 305, 306, 182, 307, 308, 309, 310, 183, 184, 2, 311, 138, 312, 101, 313, 314, 315, 185, 316, 317, 186, 187, 3, 139, 318, 102, 319, 103, 320, 321, 188, 322, 323, 324, 325, 326, 189, 190, 327, 328, 141, 329, 4, 140, 330, 104, 331, 142, 332, 333, 191, 334, 335, 336, 337, 338, 192, 193, 339, 340, 144, 341, 5, 143, 342, 105, 343, 145, 344, 345, 346, 347, 348, 194, 349, 350, 351, 195, 196, 147, 352, 146, 106, 353, 107, 354, 356, 357, 358, 359, 360, 149, 361, 150, 362, 197, 363, 364, 365, 198, 199, 151, 366, 148, 367, 108, 368, 109, 369, 200, 370, 371, 35, 201, 372, 373, 36, 202, 374, 375, 37, 203, 376, 377, 38, 204, 378, 379, 39, 205, 79, 380, 381, 40, 382, 206, 383, 384, 41, 207, 385, 386, 42, 208, 387, 388, 43, 209, 389, 390, 44, 210, 391, 392, 45, 211, 393, 394, 46, 453, 395, 425, 426, 427, 431, 432, 433, 47, 434, 435, 1, 436, 212, 437, 454, 455, 112, 456, 457, 80, 458, 152, 459, 460, 461, 462, 110, 463, 153, 464, 465, 466, 111, 467, 154, 468, 48, 49, 50, 469, 470, 75, 74, 73, 471, 51, 52, 53, 155, 472, 156, 473, 54, 55, 474, 62, 475, 63, 157, 476, 477, 214 }
  uselistorder i32* @r2, { 80, 81, 26, 9, 27, 29, 28, 30, 31, 32, 33, 8, 82, 2, 83, 88, 89, 92, 84, 51, 55, 56, 59, 57, 58, 52, 53, 54, 45, 14, 15, 0, 16, 17, 1, 90, 3, 91, 6, 34, 35, 36, 10, 85, 86, 87, 4, 60, 61, 62, 7, 63, 64, 65, 5, 66, 67, 68, 69, 70, 46, 11, 12, 13, 49, 50, 47, 48, 21, 22, 40, 18, 19, 20, 23, 24, 25, 37, 38, 39, 41, 42, 43, 44, 71, 72, 73, 74, 75, 76, 77, 78, 79 }
  uselistorder label %dec_label_pc_168f8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1688c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16820, { 2, 0, 1 }
  uselistorder label %dec_label_pc_167c0, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 3, 2 }
  uselistorder label %dec_label_pc_1674c, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_16710, { 1, 0 }
  uselistorder label %dec_label_pc_166fc, { 1, 0 }
  uselistorder label %dec_label_pc_166bc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16650, { 2, 0, 1 }
  uselistorder label %dec_label_pc_165e4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16584, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_164f8, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_164b8, { 1, 0 }
}

define i32 @function_16918(i32 %arg1) local_unnamed_addr {
dec_label_pc_16918:
  ret i32 %arg1
}

define i32 @function_16920() local_unnamed_addr {
dec_label_pc_16920:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_16920 = load i32, i32* @r0, align 4
  %v2_16920 = icmp eq i32 %v0_16920, 0
  %v3_16924 = load i32, i32* @r4, align 4
  store i32 %v3_16924, i32* %stack_var_-20, align 4
  %v0_16928 = load i32, i32* @r1, align 4
  br i1 %v2_16920, label %dec_label_pc_16a00, label %dec_label_pc_1693c.lr.ph

dec_label_pc_1693c:                               ; preds = %dec_label_pc_1693c.lr.ph, %dec_label_pc_169c0
  %v1_169c0 = phi i32 [ 0, %dec_label_pc_1693c.lr.ph ], [ %v5_169c0, %dec_label_pc_169c0 ]
  %v0_169c4 = phi i32 [ 1, %dec_label_pc_1693c.lr.ph ], [ %v1_169c4, %dec_label_pc_169c0 ]
  %v0_16944 = phi i32 [ %v0_16920, %dec_label_pc_1693c.lr.ph ], [ %v0_1694425, %dec_label_pc_169c0 ]
  %v1_16944 = inttoptr i32 %v0_16944 to i8*
  %v2_16944 = load i8, i8* %v1_16944, align 1
  %v3_16944 = zext i8 %v2_16944 to i32
  %v3_16948 = mul nuw nsw i32 %v3_16944, 2
  %v4_16948 = add i32 %v3_16948, %v2_16940.pre
  %v5_16948 = inttoptr i32 %v4_16948 to i8*
  %v6_16948 = load i8, i8* %v5_16948, align 1
  %v1_1694c = and i8 %v6_16948, 8
  %v2_1694c = icmp eq i8 %v1_1694c, 0
  br i1 %v2_1694c, label %dec_label_pc_16a00, label %dec_label_pc_16954

dec_label_pc_16954:                               ; preds = %dec_label_pc_1693c
  br label %dec_label_pc_16974

dec_label_pc_1695c:                               ; preds = %dec_label_pc_16974
  %v3_16960 = mul i32 %v0_169c0, 10
  %v4_16960 = add i32 %v3_16974, %v3_16960
  %v1_16964 = add i32 %v4_16960, -48
  %v8_1696c = icmp sgt i32 %v1_16964, 255
  br i1 %v8_1696c, label %dec_label_pc_16a00, label %dec_label_pc_16970

dec_label_pc_16970:                               ; preds = %dec_label_pc_1695c
  %v1_16970 = add i32 %v0_169b0, 1
  store i32 %v1_16970, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16974

dec_label_pc_16974:                               ; preds = %dec_label_pc_16954, %dec_label_pc_16970
  %v0_169c0 = phi i32 [ 0, %dec_label_pc_16954 ], [ %v1_16964, %dec_label_pc_16970 ]
  %v0_169b0 = phi i32 [ %v0_16944, %dec_label_pc_16954 ], [ %v1_16970, %dec_label_pc_16970 ]
  %v1_16974 = inttoptr i32 %v0_169b0 to i8*
  %v2_16974 = load i8, i8* %v1_16974, align 1
  %v3_16974 = zext i8 %v2_16974 to i32
  %v2_16978 = mul nuw nsw i32 %v3_16974, 2
  %v2_1697c = add i32 %v2_16978, %v2_16940.pre
  %v3_16980 = inttoptr i32 %v2_1697c to i8*
  %v4_16980 = load i8, i8* %v3_16980, align 1
  %v6_16980 = zext i8 %v4_16980 to i32
  %v1_1698c = and i32 %v6_16980, 8
  %v2_1698c = icmp eq i32 %v1_1698c, 0
  br i1 %v2_1698c, label %dec_label_pc_16994, label %dec_label_pc_1695c

dec_label_pc_16994:                               ; preds = %dec_label_pc_16974
  %v8_16998 = icmp sgt i32 %v0_169c4, 3
  br i1 %v8_16998, label %dec_label_pc_169ac, label %dec_label_pc_1699c

dec_label_pc_1699c:                               ; preds = %dec_label_pc_16994
  %v7_1699c = icmp eq i8 %v2_16974, 46
  br i1 %v7_1699c, label %dec_label_pc_169a4, label %dec_label_pc_16a00

dec_label_pc_169a4:                               ; preds = %dec_label_pc_1699c
  %v1_169a4 = add i32 %v0_169b0, 1
  store i32 %v1_169a4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_169c0

dec_label_pc_169ac:                               ; preds = %dec_label_pc_16994
  %v2_169ac = icmp eq i8 %v2_16974, 0
  %v1_169b0 = add i32 %v0_169b0, 1
  store i32 %v1_169b0, i32* %r0.global-to-local, align 4
  br i1 %v2_169ac, label %dec_label_pc_169c0, label %dec_label_pc_169b8

dec_label_pc_169b8:                               ; preds = %dec_label_pc_169ac
  %v1_169b8 = and i32 %v6_16980, 32
  %v2_169b8 = icmp eq i32 %v1_169b8, 0
  br i1 %v2_169b8, label %dec_label_pc_16a00, label %dec_label_pc_169c0

dec_label_pc_169c0:                               ; preds = %dec_label_pc_169b8, %dec_label_pc_169ac, %dec_label_pc_169a4
  %v0_1694425 = phi i32 [ %v1_169b0, %dec_label_pc_169b8 ], [ %v1_169b0, %dec_label_pc_169ac ], [ %v1_169a4, %dec_label_pc_169a4 ]
  %v4_169c0 = mul i32 %v1_169c0, 256
  %v5_169c0 = or i32 %v0_169c0, %v4_169c0
  %v1_169c4 = add nuw nsw i32 %v0_169c4, 1
  %v7_169cc = icmp slt i32 %v1_169c4, 5
  br i1 %v7_169cc, label %dec_label_pc_1693c, label %dec_label_pc_169d0

dec_label_pc_1693c.lr.ph:                         ; preds = %dec_label_pc_16920
  %v2_16940.pre = load i32, i32* bitcast (i32** @global_var_1f77c.647 to i32*), align 4
  br label %dec_label_pc_1693c

dec_label_pc_169d0:                               ; preds = %dec_label_pc_169c0
  %v2_169d0 = icmp eq i32 %v0_16928, 0
  br i1 %v2_169d0, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_169d0
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_169d0
  %v3_169ec = call i32 @llvm.bswap.i32(i32 %v5_169c0)
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_169f8 = inttoptr i32 %v0_16928 to i32*
  store i32 %v3_169ec, i32* %v3_169f8, align 4
  %v2_169fc.pre = load i32, i32* %stack_var_-20, align 4
  %v17_169fc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_169fc = phi i32 [ 1, %bb ], [ %v17_169fc.pre, %bb40 ]
  %v2_169fc = phi i32 [ %v3_16924, %bb ], [ %v2_169fc.pre, %bb40 ]
  store i32 %v2_169fc, i32* @r4, align 4
  ret i32 %v17_169fc

dec_label_pc_16a00:                               ; preds = %dec_label_pc_1699c, %dec_label_pc_169b8, %dec_label_pc_1693c, %dec_label_pc_1695c, %dec_label_pc_16920
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_16924, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_16940.pre, { 1, 0 }
  uselistorder i32 %v1_169c4, { 1, 0 }
  uselistorder i32 %v0_169b0, { 0, 1, 3, 2 }
  uselistorder i32 %v3_16924, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 5, { 16, 31, 17, 6, 3, 19, 32, 4, 18, 33, 1, 20, 83, 21, 84, 22, 85, 23, 86, 24, 87, 25, 88, 0, 34, 35, 36, 26, 27, 28, 29, 37, 38, 39, 40, 7, 41, 42, 43, 44, 8, 45, 46, 47, 48, 49, 50, 51, 52, 9, 53, 54, 55, 10, 56, 57, 58, 11, 59, 60, 61, 62, 12, 63, 64, 65, 66, 13, 67, 68, 69, 70, 71, 72, 73, 14, 74, 75, 76, 77, 78, 79, 80, 15, 81, 5, 82, 89, 2, 90, 91, 30, 92 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 63, 64, 68, 71, 72, 73, 69, 70, 74, 75, 76, 77, 78, 523, 524, 79, 80, 81, 82, 83, 84, 85, 525, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 98, 99, 103, 102, 101, 104, 517, 526, 109, 105, 108, 106, 107, 513, 110, 111, 112, 113, 519, 114, 115, 116, 117, 118, 520, 119, 120, 121, 122, 123, 124, 125, 126, 128, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 155, 157, 158, 159, 163, 169, 164, 160, 165, 170, 166, 171, 167, 161, 172, 162, 173, 174, 168, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 185, 188, 191, 192, 190, 189, 193, 196, 195, 194, 203, 200, 197, 198, 204, 201, 205, 202, 206, 199, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 223, 225, 226, 227, 238, 233, 228, 239, 234, 240, 235, 241, 236, 229, 230, 231, 242, 243, 244, 245, 237, 232, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 257, 259, 260, 261, 262, 263, 264, 265, 267, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 279, 289, 285, 281, 290, 286, 282, 291, 287, 292, 288, 283, 284, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 310, 309, 317, 312, 323, 324, 318, 313, 325, 326, 319, 314, 327, 320, 328, 321, 329, 322, 330, 315, 331, 316, 332, 333, 334, 335, 336, 337, 338, 341, 342, 345, 343, 339, 346, 344, 340, 349, 348, 347, 352, 353, 350, 354, 351, 355, 359, 356, 361, 360, 357, 358, 362, 514, 521, 363, 364, 365, 366, 367, 370, 368, 369, 372, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 392, 390, 386, 393, 391, 387, 396, 395, 394, 399, 400, 397, 401, 398, 402, 406, 403, 408, 407, 404, 405, 409, 515, 522, 410, 411, 412, 413, 414, 417, 415, 416, 419, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 434, 436, 437, 439, 438, 440, 441, 442, 443, 446, 453, 447, 448, 444, 449, 450, 451, 445, 454, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 467, 469, 470, 471, 475, 482, 476, 477, 483, 478, 472, 473, 479, 474, 480, 484, 481, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 497, 499, 500, 501, 502, 504, 503, 505, 506, 507, 508, 509, 512, 527, 516, 528, 510, 511, 518 }
  uselistorder i32 32, { 76, 57, 58, 55, 71, 72, 67, 68, 70, 5, 4, 7, 6, 9, 8, 56, 54, 77, 78, 60, 59, 11, 10, 13, 12, 15, 14, 17, 16, 66, 69, 19, 18, 20, 21, 22, 24, 23, 25, 27, 26, 29, 28, 30, 31, 33, 32, 61, 73, 74, 34, 75, 35, 36, 37, 0, 38, 1, 2, 3, 39, 40, 41, 42, 43, 45, 44, 62, 79, 63, 80, 64, 81, 47, 46, 49, 48, 50, 51, 52, 53, 65 }
  uselistorder i8 46, { 0, 1, 7, 2, 3, 4, 5, 6, 8, 9, 10 }
  uselistorder i32 3, { 40, 72, 73, 193, 74, 75, 76, 77, 78, 79, 92, 102, 194, 4, 173, 188, 189, 0, 80, 23, 81, 24, 190, 87, 41, 25, 27, 93, 44, 94, 2, 95, 96, 97, 98, 42, 5, 174, 175, 176, 177, 45, 178, 46, 179, 47, 180, 48, 181, 49, 182, 50, 183, 26, 184, 51, 185, 43, 186, 52, 99, 53, 100, 101, 28, 105, 54, 55, 56, 57, 58, 1, 103, 104, 59, 106, 107, 108, 109, 110, 111, 60, 112, 61, 113, 29, 114, 115, 116, 117, 118, 7, 6, 62, 30, 119, 120, 121, 122, 123, 124, 125, 9, 8, 63, 126, 31, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 11, 10, 64, 137, 32, 138, 139, 140, 141, 142, 13, 12, 65, 143, 33, 144, 145, 146, 147, 66, 148, 15, 14, 35, 149, 34, 150, 151, 152, 153, 67, 154, 17, 16, 37, 155, 36, 156, 157, 158, 159, 160, 161, 19, 18, 68, 162, 38, 163, 164, 165, 166, 167, 168, 169, 21, 20, 69, 170, 39, 171, 22, 172, 3, 187, 191, 82, 88, 83, 89, 84, 90, 85, 91, 70, 192, 71, 86 }
  uselistorder i32 8, { 137, 176, 30, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 31, 193, 75, 76, 77, 78, 82, 79, 80, 81, 194, 162, 161, 159, 160, 138, 139, 140, 163, 164, 165, 153, 154, 155, 7, 34, 35, 32, 33, 18, 19, 27, 28, 36, 195, 83, 84, 85, 86, 8, 9, 66, 22, 10, 11, 17, 12, 54, 37, 55, 38, 56, 39, 13, 14, 15, 67, 57, 71, 29, 141, 142, 143, 144, 146, 58, 147, 148, 145, 72, 73, 59, 74, 16, 60, 87, 40, 88, 89, 90, 91, 92, 93, 94, 95, 96, 3, 97, 98, 99, 4, 100, 101, 102, 103, 104, 105, 106, 5, 107, 108, 109, 110, 111, 112, 113, 6, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 41, 125, 42, 126, 43, 127, 44, 128, 45, 129, 46, 130, 47, 131, 48, 132, 49, 133, 50, 134, 51, 135, 61, 136, 0, 1, 149, 150, 151, 152, 64, 156, 157, 62, 158, 2, 20, 23, 24, 166, 21, 25, 26, 167, 63, 68, 69, 168, 169, 171, 170, 172, 173, 52, 174, 65, 70, 53, 175 }
  uselistorder i32 255, { 2, 16, 17, 3, 19, 4, 20, 5, 21, 0, 1, 8, 22, 9, 23, 6, 24, 7, 25, 12, 26, 13, 27, 10, 28, 11, 29, 15, 18, 14, 30 }
  uselistorder i32 10, { 13, 46, 47, 0, 4, 5, 33, 34, 81, 1, 2, 14, 40, 9, 35, 42, 15, 41, 7, 74, 75, 36, 16, 76, 37, 77, 17, 79, 78, 43, 18, 19, 20, 21, 22, 23, 24, 44, 25, 45, 10, 48, 49, 3, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 26, 60, 61, 62, 27, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 8, 73, 11, 82, 80, 83, 6, 31, 38, 84, 29, 85, 32, 39, 12, 86, 28, 87, 30 }
  uselistorder i8 0, { 8, 0, 1, 31, 32, 2, 13, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 9, 44, 45, 46, 47, 48, 49, 3, 15, 14, 16, 52, 54, 51, 25, 53, 26, 55, 56, 50, 4, 57, 58, 59, 6, 7, 5, 60, 61, 62, 18, 17, 63, 64, 67, 28, 65, 66, 27, 68, 69, 70, 71, 72, 19, 10, 20, 73, 21, 22, 30, 74, 75, 76, 78, 79, 12, 82, 24, 88, 83, 84, 80, 81, 23, 29, 85, 86, 87, 11, 89, 90, 77, 91, 92, 93, 94, 95, 96, 97 }
  uselistorder i32 2, { 5, 161, 303, 304, 67, 305, 306, 56, 307, 55, 308, 54, 167, 84, 85, 288, 86, 289, 87, 290, 6, 162, 309, 61, 88, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 164, 16, 17, 18, 19, 20, 90, 91, 89, 57, 58, 168, 92, 169, 72, 95, 171, 178, 73, 170, 94, 172, 74, 173, 75, 174, 76, 175, 77, 176, 78, 177, 79, 183, 179, 180, 181, 182, 68, 96, 273, 21, 22, 274, 276, 277, 97, 279, 62, 165, 98, 281, 99, 282, 100, 283, 101, 284, 285, 93, 286, 23, 102, 275, 190, 191, 24, 103, 104, 105, 192, 193, 106, 261, 163, 166, 198, 108, 184, 111, 185, 110, 186, 107, 112, 187, 25, 26, 27, 113, 109, 114, 115, 116, 188, 189, 117, 118, 69, 120, 121, 119, 122, 194, 59, 66, 195, 196, 197, 278, 280, 199, 200, 201, 202, 203, 204, 205, 124, 206, 123, 207, 208, 209, 210, 211, 126, 125, 212, 213, 214, 215, 216, 217, 218, 128, 219, 127, 220, 221, 129, 130, 80, 131, 222, 223, 132, 133, 81, 134, 224, 225, 226, 227, 228, 229, 230, 1, 28, 29, 30, 31, 32, 33, 135, 231, 82, 232, 233, 234, 235, 236, 2, 34, 35, 36, 37, 38, 39, 137, 136, 237, 238, 40, 239, 240, 63, 241, 139, 242, 3, 41, 42, 43, 44, 45, 140, 243, 138, 244, 245, 46, 246, 247, 64, 248, 142, 249, 4, 47, 48, 49, 50, 51, 143, 250, 141, 251, 252, 253, 254, 255, 256, 257, 258, 145, 259, 144, 260, 262, 263, 264, 147, 265, 148, 266, 267, 268, 269, 149, 270, 146, 271, 70, 272, 150, 71, 287, 60, 151, 291, 292, 83, 293, 158, 294, 152, 295, 153, 154, 296, 155, 297, 156, 298, 157, 299, 65, 300, 52, 53, 301, 159, 302, 160 }
  uselistorder i32* @r1, { 47, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 1, 114, 115, 15, 16, 18, 17, 5, 6, 116, 0, 117, 54, 55, 13, 119, 56, 61, 62, 65, 63, 64, 57, 58, 59, 60, 49, 66, 118, 10, 4, 48, 19, 67, 68, 3, 69, 70, 71, 50, 7, 8, 9, 53, 44, 22, 11, 12, 14, 20, 21, 51, 52, 2, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96 }
  uselistorder label %dec_label_pc_16a00, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_16974, { 1, 0 }
}

define i32 @function_16a0c(i32 %arg1) local_unnamed_addr {
dec_label_pc_16a0c:
  %v1_16a0c = add i32 %arg1, 28
  %v2_16a0c = inttoptr i32 %v1_16a0c to i32*
  %v3_16a0c = load i32, i32* %v2_16a0c, align 4
  %v1_16a14 = add i32 %arg1, 44
  %v2_16a14 = inttoptr i32 %v1_16a14 to i32*
  %v3_16a14 = load i32, i32* %v2_16a14, align 4
  store i32 %v3_16a0c, i32* @global_var_1fabc.700, align 4
  store i32 %v3_16a14, i32* @global_var_1fac0.702, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 17, 0, 6, 7, 4, 5, 12, 13, 8, 9, 10, 11, 2, 14, 1, 15, 3, 16 }
  uselistorder i32 28, { 28, 0, 13, 14, 4, 5, 22, 1, 6, 7, 8, 9, 10, 11, 12, 2, 3, 24, 23, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27 }
}

define i32 @function_16a30(i32* %arg1) local_unnamed_addr {
dec_label_pc_16a30:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_16a38 = call i32 @brk(i32* %arg1)
  %v3_16a3c = icmp ult i32 %v2_16a38, %tmp
  store i32 %v2_16a38, i32* @global_var_1f854.697, align 4
  br i1 %v3_16a3c, label %dec_label_pc_16a50, label %dec_label_pc_16a60

dec_label_pc_16a50:                               ; preds = %dec_label_pc_16a30
  %v0_16a50 = call i32 @function_14808()
  %v2_16a58 = inttoptr i32 %v0_16a50 to i32*
  store i32 12, i32* %v2_16a58, align 4
  br label %dec_label_pc_16a60

dec_label_pc_16a60:                               ; preds = %dec_label_pc_16a30, %dec_label_pc_16a50
  %v0_16a60 = phi i32 [ 0, %dec_label_pc_16a30 ], [ -1, %dec_label_pc_16a50 ]
  ret i32 %v0_16a60

; uselistorder directives
  uselistorder i32 12, { 19, 13, 134, 135, 136, 138, 139, 140, 141, 14, 137, 142, 143, 144, 145, 146, 147, 148, 53, 54, 34, 35, 55, 20, 21, 119, 120, 121, 0, 98, 122, 9, 123, 10, 99, 4, 118, 22, 23, 7, 56, 57, 24, 58, 59, 15, 36, 25, 38, 39, 100, 101, 102, 40, 37, 41, 42, 43, 44, 45, 46, 48, 49, 47, 103, 104, 105, 11, 106, 107, 109, 110, 111, 5, 113, 108, 8, 52, 50, 51, 6, 26, 27, 28, 29, 30, 31, 112, 60, 16, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 32, 72, 73, 74, 75, 76, 33, 77, 78, 79, 80, 81, 82, 17, 83, 84, 85, 86, 87, 88, 18, 89, 90, 91, 92, 93, 94, 95, 96, 12, 97, 1, 2, 114, 115, 116, 117, 3, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133 }
  uselistorder i32 ()* @function_14808, { 28, 37, 27, 47, 12, 11, 10, 9, 46, 45, 44, 8, 62, 26, 25, 51, 50, 23, 24, 61, 60, 22, 21, 36, 20, 35, 19, 49, 18, 34, 17, 38, 59, 43, 42, 41, 58, 48, 16, 5, 4, 57, 15, 40, 39, 56, 3, 7, 55, 30, 6, 29, 14, 54, 2, 1, 33, 32, 53, 52, 31, 0, 13 }
  uselistorder i32* @global_var_1f854.697, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_16a60, { 1, 0 }
}

define i32 @function_16a6c(i32 %arg1) local_unnamed_addr {
dec_label_pc_16a6c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_16a70 = load i32, i32* @global_var_1f608.660, align 4
  %v7_16a74 = icmp eq i32 %v3_16a70, -1
  %v3_16a78 = load i32, i32* @r4, align 4
  store i32 %v3_16a78, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1f608.660 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_16a74, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_16a6c
  store i32 %v3_16a78, i32* %r4.global-to-local, align 4
  %v9_16a80 = load i32, i32* @r0, align 4
  ret i32 %v9_16a80

.preheader:                                       ; preds = %dec_label_pc_16a6c, %.preheader
  %v0_16a88 = phi i32 [ %v3_16a8c, %.preheader ], [ %v3_16a70, %dec_label_pc_16a6c ]
  call void @__pseudo_branch(i32 %v0_16a88)
  %v0_16a8c = load i32, i32* %r4.global-to-local, align 4
  %v1_16a8c = add i32 %v0_16a8c, -4
  %v2_16a8c = inttoptr i32 %v1_16a8c to i32*
  %v3_16a8c = load i32, i32* %v2_16a8c, align 4
  store i32 %v1_16a8c, i32* %r4.global-to-local, align 4
  %v3_16a90 = icmp eq i32 %v3_16a8c, -1
  br i1 %v3_16a90, label %dec_label_pc_16a98, label %.preheader

dec_label_pc_16a98:                               ; preds = %.preheader
  %v2_16a98 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_16a98, i32* %r4.global-to-local, align 4
  %v8_16a98 = load i32, i32* @r0, align 4
  ret i32 %v8_16a98

; uselistorder directives
  uselistorder i32 %v3_16a8c, { 1, 0 }
  uselistorder i32 %v3_16a70, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 54, 16, 55, 56, 57, 3, 17, 18, 19, 58, 59, 60, 4, 20, 21, 22, 61, 62, 63, 5, 23, 24, 64, 15, 14, 65, 66, 67, 13, 12, 11, 10, 25, 26, 27, 28, 29, 0, 30, 1, 31, 2, 68, 9, 32, 42, 43, 49, 44, 33, 34, 45, 46, 47, 48, 50, 8, 7, 41, 6, 35, 36, 37, 51, 38, 39, 52, 53, 40 }
  uselistorder i32 -1, { 181, 0, 107, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 182, 108, 326, 109, 336, 110, 337, 316, 111, 375, 112, 376, 113, 377, 114, 378, 161, 103, 317, 318, 115, 319, 320, 116, 379, 1, 183, 2, 117, 338, 339, 184, 185, 312, 313, 162, 186, 163, 187, 3, 4, 102, 88, 89, 188, 189, 190, 100, 300, 191, 301, 5, 6, 118, 340, 119, 341, 120, 327, 121, 342, 122, 328, 123, 343, 124, 314, 125, 344, 126, 329, 127, 345, 128, 325, 129, 302, 130, 180, 131, 192, 132, 303, 133, 315, 134, 346, 135, 382, 383, 136, 304, 137, 347, 138, 321, 139, 322, 140, 305, 141, 384, 142, 380, 143, 306, 144, 334, 145, 381, 146, 335, 147, 348, 148, 307, 149, 385, 104, 386, 193, 194, 195, 196, 197, 198, 199, 200, 7, 8, 9, 10, 11, 150, 151, 12, 201, 202, 17, 203, 330, 16, 204, 106, 105, 331, 13, 205, 294, 153, 295, 297, 298, 206, 207, 208, 152, 296, 18, 209, 96, 19, 210, 211, 20, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 299, 14, 232, 15, 233, 234, 21, 235, 236, 154, 332, 237, 22, 238, 333, 97, 23, 24, 239, 101, 25, 26, 27, 28, 29, 155, 240, 323, 241, 324, 166, 308, 30, 164, 309, 31, 32, 165, 310, 33, 34, 167, 311, 35, 36, 37, 38, 39, 242, 90, 91, 92, 93, 94, 95, 40, 41, 42, 243, 244, 245, 246, 43, 157, 158, 159, 160, 44, 45, 46, 247, 47, 48, 49, 50, 51, 98, 52, 53, 54, 55, 56, 57, 58, 248, 59, 156, 60, 61, 62, 249, 63, 64, 65, 66, 67, 250, 68, 69, 70, 251, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 252, 82, 83, 84, 253, 85, 86, 254, 255, 256, 257, 87, 99, 349, 350, 173, 351, 171, 352, 172, 353, 169, 354, 258, 259, 260, 261, 262, 174, 355, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 168, 356, 175, 357, 289, 290, 291, 292, 293, 170, 358, 176, 359, 177, 178, 179 }
  uselistorder i32* @global_var_1f608.660, { 1, 0 }
  uselistorder i32 1, { 657, 55, 384, 446, 1053, 1054, 1055, 1056, 1057, 409, 658, 312, 1244, 390, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 661, 660, 659, 342, 344, 348, 352, 347, 346, 343, 345, 349, 351, 350, 662, 128, 127, 123, 125, 124, 126, 129, 122, 849, 162, 159, 161, 160, 663, 163, 664, 102, 103, 665, 205, 264, 666, 310, 667, 72, 668, 311, 669, 313, 929, 930, 670, 321, 317, 322, 318, 319, 323, 320, 931, 932, 933, 506, 292, 293, 289, 291, 290, 671, 357, 672, 31, 0, 676, 675, 674, 673, 53, 52, 507, 677, 189, 190, 410, 508, 678, 140, 679, 1138, 684, 683, 682, 681, 680, 284, 285, 286, 287, 509, 685, 385, 916, 379, 917, 411, 686, 142, 148, 141, 145, 144, 147, 149, 143, 146, 1257, 412, 689, 688, 687, 316, 315, 690, 49, 50, 48, 51, 150, 151, 152, 153, 691, 38, 39, 37, 36, 35, 692, 693, 356, 355, 694, 413, 1139, 695, 266, 267, 510, 511, 383, 699, 698, 697, 696, 33, 391, 700, 252, 701, 34, 32, 702, 87, 703, 40, 704, 288, 705, 265, 706, 180, 707, 154, 708, 212, 709, 213, 710, 121, 711, 850, 851, 852, 853, 854, 855, 856, 1258, 194, 195, 191, 192, 193, 712, 512, 513, 713, 117, 116, 118, 115, 457, 934, 714, 77, 458, 716, 715, 29, 28, 717, 206, 718, 139, 719, 181, 720, 100, 101, 721, 54, 722, 268, 723, 75, 724, 196, 725, 30, 119, 726, 188, 47, 727, 330, 728, 329, 729, 324, 730, 257, 731, 120, 314, 41, 459, 1140, 1141, 460, 1142, 1143, 361, 1144, 1145, 1146, 1147, 380, 1148, 734, 733, 732, 130, 138, 132, 133, 135, 134, 131, 136, 137, 1, 1149, 1150, 1151, 1152, 259, 258, 2, 1153, 1154, 1155, 1156, 392, 1157, 1158, 393, 1159, 736, 735, 354, 353, 935, 936, 937, 514, 737, 178, 177, 176, 175, 1160, 414, 415, 3, 505, 1161, 738, 209, 207, 210, 211, 208, 1162, 1164, 1163, 515, 1165, 74, 73, 1125, 104, 1166, 1167, 1168, 243, 244, 1169, 256, 254, 255, 253, 1170, 1171, 739, 233, 232, 231, 230, 234, 1172, 1173, 740, 45, 44, 43, 42, 46, 516, 859, 517, 860, 461, 861, 862, 1059, 863, 877, 525, 857, 858, 526, 864, 417, 527, 528, 523, 865, 866, 524, 867, 868, 522, 869, 870, 521, 871, 872, 520, 873, 874, 519, 875, 876, 518, 878, 879, 1060, 529, 1061, 530, 1062, 1064, 1065, 1063, 1066, 531, 1067, 848, 416, 1070, 1068, 532, 1069, 1072, 533, 1073, 1074, 1079, 448, 1080, 1081, 534, 1082, 535, 1083, 536, 1084, 537, 1085, 538, 1086, 539, 1087, 540, 1088, 541, 1089, 542, 1090, 543, 1091, 544, 1092, 545, 1093, 546, 1094, 547, 1095, 548, 1096, 549, 1097, 550, 1098, 551, 1099, 552, 1100, 553, 1101, 554, 1102, 555, 1103, 556, 1104, 557, 1105, 558, 1106, 559, 1107, 560, 1108, 561, 1109, 562, 1110, 563, 1111, 564, 1112, 565, 1113, 566, 1114, 567, 1115, 568, 1116, 569, 1117, 418, 1123, 1124, 381, 570, 754, 753, 752, 751, 750, 749, 748, 747, 746, 745, 744, 743, 742, 741, 332, 335, 331, 338, 340, 339, 341, 334, 333, 336, 337, 1118, 1119, 571, 1120, 1121, 572, 1122, 755, 242, 241, 236, 240, 239, 238, 235, 237, 1071, 573, 757, 756, 326, 328, 325, 327, 886, 887, 888, 889, 890, 891, 892, 362, 374, 893, 894, 419, 363, 895, 896, 897, 898, 364, 373, 899, 900, 420, 365, 901, 574, 903, 904, 575, 905, 902, 906, 453, 907, 394, 910, 911, 908, 909, 367, 366, 368, 912, 576, 913, 764, 763, 649, 762, 761, 760, 648, 759, 758, 65, 61, 63, 70, 69, 66, 71, 68, 67, 62, 64, 765, 179, 1043, 395, 1042, 447, 766, 225, 226, 224, 223, 222, 228, 229, 221, 227, 946, 947, 948, 577, 768, 767, 275, 282, 280, 272, 274, 270, 276, 271, 269, 281, 273, 283, 277, 279, 278, 769, 466, 880, 881, 462, 882, 578, 580, 579, 581, 883, 884, 582, 583, 584, 585, 586, 587, 588, 465, 464, 463, 885, 589, 783, 782, 781, 780, 650, 779, 778, 651, 777, 776, 775, 774, 773, 652, 772, 771, 770, 155, 156, 157, 158, 914, 784, 592, 591, 590, 915, 786, 785, 593, 918, 430, 919, 429, 920, 428, 921, 427, 922, 923, 594, 437, 421, 924, 595, 925, 596, 926, 597, 927, 598, 928, 382, 599, 800, 799, 798, 797, 796, 795, 794, 793, 792, 791, 790, 789, 788, 787, 182, 184, 183, 185, 943, 5, 938, 600, 939, 4, 940, 449, 941, 386, 387, 942, 944, 450, 945, 804, 803, 802, 653, 654, 801, 1075, 467, 1076, 468, 1077, 6, 1078, 7, 8, 949, 950, 951, 952, 953, 954, 388, 389, 955, 956, 957, 958, 959, 960, 961, 962, 601, 963, 964, 602, 965, 968, 966, 967, 807, 806, 805, 89, 92, 91, 88, 97, 95, 96, 99, 98, 94, 93, 90, 969, 970, 971, 972, 973, 603, 396, 604, 809, 808, 85, 82, 78, 79, 83, 84, 86, 80, 81, 974, 975, 976, 605, 977, 978, 979, 980, 981, 982, 606, 983, 397, 607, 470, 469, 608, 984, 810, 21, 24, 25, 27, 26, 23, 22, 20, 985, 454, 370, 986, 609, 988, 987, 369, 610, 472, 471, 655, 811, 108, 107, 989, 455, 372, 990, 611, 992, 991, 371, 612, 474, 473, 656, 812, 187, 186, 993, 994, 995, 996, 997, 998, 613, 999, 398, 614, 615, 1000, 475, 1001, 813, 12, 10, 11, 16, 17, 18, 19, 14, 15, 13, 1002, 1003, 431, 1004, 1005, 1006, 616, 1007, 399, 617, 477, 476, 618, 1008, 619, 1009, 814, 58, 59, 60, 57, 56, 1010, 1011, 432, 1012, 1013, 1014, 620, 1015, 400, 621, 485, 484, 622, 1016, 483, 1017, 478, 1018, 479, 1019, 480, 1020, 481, 1021, 623, 1022, 482, 1023, 819, 818, 817, 816, 815, 217, 216, 219, 220, 214, 218, 215, 1024, 1025, 433, 1026, 1027, 1028, 624, 1029, 401, 625, 490, 489, 626, 1030, 486, 1031, 487, 1032, 488, 1033, 824, 823, 822, 821, 820, 248, 249, 251, 250, 245, 247, 246, 1034, 1035, 1036, 434, 1037, 1038, 1039, 402, 627, 493, 492, 628, 1040, 491, 1041, 825, 199, 198, 201, 202, 204, 203, 197, 200, 1044, 1045, 1046, 435, 1047, 1048, 1049, 403, 629, 496, 495, 630, 1050, 494, 1051, 830, 829, 828, 827, 826, 167, 166, 165, 171, 172, 170, 173, 164, 168, 169, 1052, 497, 631, 831, 261, 262, 263, 260, 1174, 76, 1058, 9, 832, 105, 106, 1126, 632, 1129, 633, 1130, 1131, 1127, 1128, 1132, 1133, 1134, 1135, 404, 1136, 405, 109, 112, 114, 110, 111, 113, 1137, 634, 1175, 174, 1176, 375, 638, 438, 439, 1177, 376, 636, 440, 441, 637, 1178, 422, 1179, 436, 1180, 377, 442, 641, 443, 452, 378, 639, 444, 445, 640, 1181, 423, 1182, 1183, 504, 1184, 1185, 1186, 499, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 500, 1199, 1200, 1201, 1202, 1203, 407, 1204, 642, 1205, 643, 644, 1206, 1207, 1208, 1209, 1210, 501, 1211, 1212, 1213, 424, 1214, 502, 1215, 1216, 1217, 425, 1218, 503, 1219, 1220, 1221, 426, 1222, 1223, 1224, 1225, 408, 1226, 1227, 1228, 406, 635, 498, 1229, 1231, 1233, 1232, 1230, 645, 1234, 1235, 1236, 646, 1237, 1238, 1239, 1240, 847, 456, 1241, 1242, 451, 647, 1243, 844, 843, 842, 841, 840, 839, 838, 837, 836, 835, 834, 833, 296, 295, 300, 294, 298, 309, 302, 303, 308, 299, 301, 297, 304, 306, 305, 307, 845, 846, 360, 359, 358 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_16aa0() local_unnamed_addr {
dec_label_pc_16aa0:
  %v5_16aa4 = load i32, i32* @r0, align 4
  ret i32 %v5_16aa4

; uselistorder directives
  uselistorder i32* @r0, { 3, 10, 11, 96, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 58, 59, 61, 60, 25, 202, 203, 32, 33, 34, 35, 22, 2, 20, 21, 118, 119, 26, 204, 205, 48, 207, 15, 19, 121, 6, 120, 98, 30, 99, 16, 111, 122, 206, 40, 12, 62, 63, 64, 65, 28, 18, 66, 67, 68, 69, 17, 208, 8, 14, 123, 7, 124, 9, 125, 126, 13, 127, 128, 129, 130, 0, 36, 100, 101, 37, 38, 39, 102, 104, 105, 106, 107, 110, 103, 46, 47, 83, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 27, 55, 56, 57, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 29, 82, 108, 109, 1, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 112, 113, 114, 115, 116, 131, 117, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 5, 4, 23, 24, 31 }
}

define i32 @function_16aa8() local_unnamed_addr {
entry:
  %v3_16aac = load i32, i32* @r4, align 4
  %v0_16ab4 = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_16aac)
  ret i32 %v0_16ab4

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 11, 16, 17, 13, 14, 15, 18, 8, 9, 10, 2, 3, 4, 5, 6, 7, 1, 12 }
  uselistorder i32 0, { 152, 0, 1006, 1007, 1008, 1009, 154, 153, 1010, 1480, 1481, 1482, 1483, 1484, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1485, 1486, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 43, 1505, 1506, 1507, 1508, 1509, 44, 1510, 1511, 1512, 45, 1513, 1514, 1515, 46, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1531, 1532, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 47, 1551, 1552, 1553, 1554, 1555, 48, 1556, 1557, 1558, 1559, 1560, 49, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 806, 807, 344, 808, 345, 1014, 1110, 1111, 1112, 1113, 1114, 809, 810, 1574, 1575, 1576, 1577, 346, 811, 1, 812, 813, 814, 1578, 1579, 1580, 155, 1581, 104, 1582, 102, 103, 1583, 1584, 1585, 347, 1589, 348, 1602, 1604, 655, 278, 1605, 349, 1603, 350, 351, 2, 1586, 1587, 156, 1115, 299, 1116, 354, 301, 300, 1117, 1118, 1119, 1120, 353, 1122, 1123, 352, 1124, 1588, 784, 785, 786, 787, 788, 789, 158, 121, 790, 105, 157, 159, 356, 1590, 357, 302, 1591, 1594, 1596, 1597, 355, 1127, 1129, 1130, 79, 279, 1131, 1128, 1125, 1126, 3, 1015, 1018, 1016, 1017, 280, 4, 1134, 1132, 1133, 281, 160, 1019, 1020, 1021, 1022, 1086, 1087, 358, 5, 1088, 6, 1141, 1142, 161, 1135, 1136, 1137, 1138, 1139, 1140, 7, 8, 1121, 739, 740, 741, 359, 9, 360, 1143, 1144, 649, 1023, 650, 1145, 1024, 1146, 791, 1147, 1025, 1148, 904, 742, 1011, 1606, 1607, 94, 815, 361, 816, 817, 818, 819, 362, 820, 821, 822, 823, 824, 825, 826, 743, 792, 1149, 1595, 744, 1150, 827, 845, 745, 651, 1598, 108, 1599, 1592, 746, 1102, 1593, 1103, 1151, 747, 1600, 1601, 10, 1152, 122, 1153, 1154, 275, 274, 656, 109, 110, 111, 112, 681, 657, 81, 80, 123, 1155, 1156, 1157, 1158, 1160, 1159, 11, 1161, 1162, 277, 276, 658, 113, 114, 115, 116, 682, 659, 83, 82, 78, 91, 1163, 683, 1164, 1165, 1166, 117, 1167, 1168, 1169, 1170, 1171, 162, 660, 684, 661, 662, 1172, 685, 132, 163, 1173, 1174, 118, 1175, 1176, 12, 686, 282, 14, 13, 164, 1177, 165, 687, 15, 283, 166, 167, 335, 84, 168, 363, 1026, 106, 828, 829, 1179, 1178, 1180, 1181, 50, 169, 1182, 172, 171, 170, 336, 337, 338, 174, 173, 175, 364, 1183, 1184, 176, 1089, 1090, 133, 177, 1185, 178, 711, 179, 1186, 1187, 180, 1188, 1189, 714, 663, 1027, 124, 1028, 1029, 715, 716, 712, 688, 371, 713, 735, 736, 717, 718, 181, 182, 719, 720, 721, 722, 689, 369, 723, 724, 690, 370, 725, 726, 691, 368, 727, 728, 692, 367, 729, 730, 693, 366, 731, 738, 694, 365, 732, 737, 733, 99, 85, 134, 135, 734, 654, 1030, 372, 1031, 285, 1032, 373, 1033, 1036, 1037, 184, 284, 1034, 1035, 374, 375, 1038, 1039, 303, 1040, 1041, 695, 95, 376, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 296, 295, 1050, 377, 1051, 119, 1052, 1053, 136, 1054, 680, 1055, 1056, 1057, 679, 1058, 1059, 1060, 183, 378, 379, 1061, 1064, 1065, 1066, 1067, 1068, 185, 1062, 186, 1063, 16, 187, 1042, 764, 765, 766, 101, 86, 767, 100, 87, 768, 769, 770, 771, 772, 773, 380, 774, 775, 777, 188, 776, 96, 778, 18, 17, 779, 846, 847, 850, 851, 848, 849, 852, 853, 748, 382, 750, 189, 751, 752, 753, 754, 755, 756, 757, 758, 191, 190, 759, 97, 383, 760, 749, 386, 387, 19, 761, 762, 192, 763, 76, 77, 388, 389, 384, 381, 385, 780, 781, 782, 783, 390, 339, 196, 195, 696, 340, 198, 197, 697, 341, 200, 199, 698, 342, 202, 201, 699, 700, 343, 194, 193, 287, 294, 288, 289, 290, 391, 793, 203, 204, 802, 794, 795, 796, 797, 798, 799, 800, 801, 286, 803, 804, 88, 805, 205, 206, 392, 107, 830, 831, 832, 833, 293, 834, 835, 836, 292, 837, 838, 839, 840, 127, 841, 843, 842, 125, 126, 207, 291, 394, 395, 393, 844, 306, 304, 305, 128, 208, 92, 209, 854, 140, 139, 137, 138, 855, 856, 93, 857, 858, 859, 860, 861, 210, 862, 863, 396, 864, 865, 866, 867, 214, 211, 212, 213, 868, 869, 870, 871, 397, 872, 873, 309, 874, 308, 875, 307, 876, 398, 877, 878, 879, 143, 141, 142, 20, 880, 881, 882, 883, 215, 884, 885, 311, 310, 886, 399, 887, 888, 889, 890, 891, 147, 144, 145, 146, 21, 892, 893, 894, 216, 895, 217, 896, 897, 314, 898, 313, 899, 312, 900, 400, 901, 222, 402, 220, 221, 218, 219, 902, 224, 223, 903, 403, 225, 401, 230, 405, 228, 229, 226, 227, 905, 232, 231, 906, 233, 404, 908, 909, 151, 148, 149, 150, 22, 907, 910, 911, 912, 913, 914, 915, 23, 24, 25, 26, 27, 916, 917, 406, 316, 918, 407, 919, 408, 920, 409, 921, 410, 922, 411, 923, 412, 924, 315, 925, 234, 235, 236, 927, 928, 926, 930, 931, 929, 28, 29, 30, 31, 32, 932, 237, 933, 934, 318, 935, 413, 936, 414, 937, 415, 938, 416, 939, 417, 940, 418, 941, 317, 942, 419, 943, 239, 238, 240, 945, 946, 944, 947, 948, 89, 950, 951, 952, 953, 420, 954, 33, 34, 35, 36, 37, 949, 241, 129, 955, 956, 320, 957, 319, 958, 421, 959, 243, 242, 244, 961, 962, 960, 963, 964, 90, 966, 967, 968, 969, 422, 970, 38, 39, 40, 41, 42, 965, 245, 130, 971, 972, 325, 973, 324, 974, 323, 975, 321, 976, 322, 977, 423, 978, 424, 979, 246, 249, 248, 247, 982, 983, 981, 980, 425, 985, 984, 986, 250, 987, 988, 328, 989, 327, 990, 326, 991, 426, 992, 251, 254, 253, 252, 995, 996, 994, 993, 998, 997, 999, 1000, 255, 331, 1001, 330, 1002, 329, 1003, 427, 1004, 297, 1005, 1190, 256, 1191, 1012, 257, 1013, 1069, 1070, 1071, 1072, 1073, 1074, 258, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 259, 260, 1083, 1084, 1085, 1091, 261, 1092, 1093, 1094, 262, 428, 1095, 1096, 51, 1097, 1098, 1099, 1100, 1101, 429, 1104, 263, 1192, 1105, 1106, 1107, 1108, 1193, 1194, 1109, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 430, 1208, 664, 665, 666, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 52, 1250, 1251, 1252, 264, 265, 1253, 431, 1254, 1255, 1256, 1257, 667, 701, 1258, 1259, 1260, 53, 1261, 1262, 1263, 1264, 54, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 55, 1272, 1273, 270, 1274, 1275, 1276, 1277, 1278, 1279, 56, 1280, 1281, 1282, 57, 1283, 1284, 1285, 58, 1286, 1287, 1288, 1289, 434, 1303, 1304, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 668, 702, 1299, 1300, 1301, 1302, 669, 703, 1305, 1306, 1307, 59, 1308, 1309, 435, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 670, 704, 1318, 1319, 1320, 60, 1321, 1322, 1323, 1324, 61, 1325, 671, 1326, 1327, 1330, 1331, 672, 266, 1328, 1329, 267, 268, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 673, 705, 1343, 1344, 1345, 62, 1346, 1347, 1348, 1349, 1350, 1351, 63, 1352, 131, 1353, 1354, 1355, 1356, 674, 706, 1357, 1358, 1359, 64, 1360, 269, 1361, 1362, 1363, 65, 1364, 1365, 1366, 1367, 1368, 675, 707, 1369, 1370, 1371, 66, 1372, 1373, 1374, 67, 432, 433, 1375, 1376, 1377, 1378, 1379, 676, 708, 1380, 1381, 1382, 68, 1383, 1384, 1385, 69, 1386, 1387, 1388, 70, 1389, 1390, 1391, 71, 1392, 1393, 1394, 1395, 72, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1408, 1409, 677, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 298, 1421, 1424, 1425, 1428, 1429, 1430, 73, 1426, 1427, 1422, 1423, 1431, 1432, 272, 271, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 74, 273, 1443, 1444, 1445, 75, 1446, 1447, 1448, 1449, 1451, 98, 436, 1452, 1450, 1406, 1407, 120, 652, 653, 1453, 1454, 1455, 678, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 332, 1476, 333, 1477, 334, 1478, 1479, 709, 710, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622 }
  uselistorder i32* @r4, { 45, 805, 559, 560, 561, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 165, 565, 661, 662, 663, 823, 824, 825, 826, 827, 828, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 829, 830, 4, 831, 832, 833, 834, 856, 857, 858, 859, 43, 860, 35, 851, 852, 853, 854, 855, 835, 836, 837, 664, 665, 666, 667, 668, 669, 670, 671, 838, 839, 134, 135, 850, 672, 673, 674, 566, 5, 567, 568, 569, 6, 570, 7, 571, 572, 638, 8, 9, 639, 640, 641, 642, 643, 644, 675, 10, 683, 684, 676, 677, 678, 679, 680, 681, 682, 61, 62, 63, 64, 65, 66, 842, 843, 846, 847, 685, 686, 687, 688, 689, 690, 573, 574, 691, 692, 136, 137, 693, 694, 575, 576, 695, 696, 317, 318, 67, 68, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 69, 70, 138, 139, 697, 698, 848, 849, 3, 71, 72, 699, 700, 202, 203, 228, 229, 73, 74, 840, 841, 655, 656, 844, 845, 657, 658, 701, 702, 75, 76, 703, 704, 577, 578, 579, 580, 204, 205, 206, 207, 208, 705, 706, 707, 46, 708, 709, 710, 711, 712, 713, 47, 48, 11, 581, 582, 583, 49, 584, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 585, 586, 587, 588, 589, 590, 591, 597, 598, 599, 600, 601, 602, 609, 610, 611, 612, 613, 614, 620, 1, 621, 603, 604, 605, 606, 607, 608, 592, 593, 594, 595, 596, 99, 100, 101, 102, 103, 104, 105, 106, 12, 107, 108, 109, 110, 111, 112, 113, 114, 0, 115, 116, 117, 118, 119, 120, 520, 521, 522, 523, 230, 231, 232, 233, 615, 616, 617, 618, 619, 77, 78, 79, 80, 81, 82, 83, 84, 13, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 14, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 36, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 209, 210, 211, 2, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 15, 286, 16, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 17, 335, 18, 336, 19, 337, 20, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 21, 362, 22, 363, 23, 364, 24, 365, 366, 367, 368, 369, 25, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 26, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 27, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 28, 501, 29, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 30, 525, 31, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 714, 715, 716, 562, 563, 564, 622, 623, 624, 625, 626, 627, 32, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 645, 648, 646, 647, 649, 650, 651, 652, 653, 654, 659, 660, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 37, 748, 749, 42, 750, 34, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 41, 33, 763, 764, 765, 766, 767, 768, 769, 40, 770, 771, 772, 39, 773, 774, 775, 38, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 44, 806 }
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @chdir(i8*) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
