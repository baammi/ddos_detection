source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1d00c.5 = global i32 0
@global_var_1d01c.6 = global i32* @global_var_1d00c.5
@global_var_1d17c.12 = global i32 0
@global_var_e3d8.18 = constant i32 -382906384
@global_var_1d198.23 = global i32 0
@global_var_8314.24 = constant i32 -352321546
@global_var_12a50.25 = constant i32 -481296384
@global_var_c444.31 = constant i32 -382906384
@global_var_c908.33 = constant i32 -382906384
@global_var_bad4.35 = constant i32 -382906384
@global_var_b388.37 = constant i32 -382906384
@global_var_ac14.39 = constant i32 -382906384
@global_var_a3b4.41 = constant i32 -382906384
@global_var_9154.44 = constant i32 -382906384
@global_var_89d8.46 = constant i32 -382906384
@global_var_9870.48 = constant i32 -382906384
@global_var_1d234.50 = global i32 0
@global_var_1d23c.62 = global i32 0
@global_var_14694.64 = constant i32 47
@global_var_1d19c.67 = global i32 0
@global_var_1d238.69 = global i32 0
@global_var_e25c.71 = constant i32 -382910352
@global_var_1d028.73 = global i32 71600
@global_var_1d020.75 = global i32 -1
@global_var_1d244.81 = local_unnamed_addr global i32 0
@global_var_1d243.82 = local_unnamed_addr global i32 0
@global_var_1d242.83 = local_unnamed_addr global i32 0
@global_var_1d1a0.85 = global i32 0
@global_var_e0d4.87 = constant i32 -442556408
@global_var_1d241.91 = local_unnamed_addr global i32 0
@global_var_14698.95 = constant i32 10
@global_var_1d024.97 = global i32 -1
@global_var_11dfc.101 = constant i32 -382910448
@global_var_117b0.102 = constant i32 -382910224
@global_var_1469c.105 = constant i32 16777216
@global_var_1d1a8.107 = global i32 0
@global_var_1d1b4.109 = global i32 0
@global_var_1d1ac.111 = global i32 0
@global_var_1d1b0.113 = global i32 0
@global_var_f270.126 = constant i32 -442695668
@global_var_1d258.128 = global i32 0
@global_var_1d1ec.130 = global i32 0
@global_var_1d1b8.132 = global i32 0
@global_var_1d1e4.134 = global i32 0
@global_var_1d250.142 = global i32 0
@global_var_1d254.144 = global i32 0
@global_var_1d1bf.147 = local_unnamed_addr global i32 0
@global_var_1d1be.148 = local_unnamed_addr global i32 0
@global_var_1d1d0.150 = global i32 0
@global_var_1d1c1.152 = local_unnamed_addr global i32 0
@global_var_1d1c5.153 = local_unnamed_addr global i32 0
@global_var_1d1c4.154 = local_unnamed_addr global i32 0
@global_var_1d1d3.155 = local_unnamed_addr global i32 0
@global_var_1d1d1.156 = local_unnamed_addr global i32 0
@global_var_1d1c0.157 = local_unnamed_addr global i32 0
@global_var_1d1d2.158 = local_unnamed_addr global i32 0
@global_var_1d1df.160 = local_unnamed_addr global i32 0
@global_var_1d1de.161 = local_unnamed_addr global i32 0
@global_var_14728.163 = constant [5 x i8] c"&;; \00"
@global_var_1472c.165 = constant i32 536542976
@global_var_146a4.167 = constant [5 x i8] c"5:?;\00"
@global_var_146ac.169 = constant [9 x i8] c"<!: acam\00"
@global_var_146b8.171 = constant [8 x i8] c"0125!8 \00"
@global_var_146c0.173 = constant [9 x i8] c"$5''#;&0\00"
@global_var_146cc.175 = constant [6 x i8] c"509=:\00"
@global_var_146d4.177 = constant [6 x i8] c"\22=.,\22\00"
@global_var_146dc.179 = constant [8 x i8] c"'!$$;& \00"
@global_var_146e4.181 = constant i32 423502179
@global_var_146f4.183 = constant [6 x i8] c"efg`a\00"
@global_var_146fc.185 = constant [5 x i8] c"!'1&\00"
@global_var_14704.187 = constant i32 943467547
@global_var_14710.189 = constant i32 322070023
@global_var_1471c.191 = constant [5 x i8] c"efg`\00"
@global_var_1d1c8.192 = local_unnamed_addr global i32 0
@global_var_1d1c6.194 = local_unnamed_addr global i32 0
@global_var_1d1c7.195 = local_unnamed_addr global i32 0
@global_var_1d1e0.197 = local_unnamed_addr global i32 0
@global_var_1d1e1.198 = local_unnamed_addr global i32 0
@global_var_14724.204 = constant [3 x i8] c"\0D\0A\00"
@global_var_14736.206 = constant i32 2096127
@global_var_1472d.208 = constant i32 2095871
@global_var_1d260.210 = global i32 0
@global_var_1d030.213 = global i32 -555811921
@global_var_1473c.218 = constant i32 48212
@global_var_1d268.219 = local_unnamed_addr global i32 0
@global_var_1d26c.220 = local_unnamed_addr global i32 0
@global_var_1d26d.221 = local_unnamed_addr global i32 0
@global_var_14740.223 = constant [14 x i8] c"0;'9-=$z78!6T\00"
@global_var_1d274.224 = local_unnamed_addr global i32 0
@global_var_1d270.225 = local_unnamed_addr global i32 0
@global_var_1d275.226 = local_unnamed_addr global i32 0
@global_var_14750.228 = constant [13 x i8] c"'1:$5=z'= 1T\00"
@global_var_1d27c.229 = local_unnamed_addr global i32 0
@global_var_1d278.230 = local_unnamed_addr global i32 0
@global_var_1d27d.231 = local_unnamed_addr global i32 0
@global_var_14760.233 = constant i32 28654
@global_var_1d280.234 = local_unnamed_addr global i32 0
@global_var_1d284.235 = local_unnamed_addr global i32 0
@global_var_1d285.236 = local_unnamed_addr global i32 0
@global_var_14764.238 = constant [37 x i8] c"&;; t'1:$5=t>!' t=:217 10t-;!&t'<= T\00"
@global_var_1d28c.239 = local_unnamed_addr global i32 0
@global_var_1d288.240 = local_unnamed_addr global i32 0
@global_var_1d28d.241 = local_unnamed_addr global i32 0
@global_var_1478c.243 = constant [7 x i8] c"'<188T\00"
@global_var_1d294.244 = local_unnamed_addr global i32 0
@global_var_1d290.245 = local_unnamed_addr global i32 0
@global_var_1d295.246 = local_unnamed_addr global i32 0
@global_var_14794.248 = constant [8 x i8] c"1:5681T\00"
@global_var_1d298.249 = local_unnamed_addr global i32 0
@global_var_1d29c.250 = local_unnamed_addr global i32 0
@global_var_1d29d.251 = local_unnamed_addr global i32 0
@global_var_1479c.253 = constant [8 x i8] c"'-' 19T\00"
@global_var_1d2a0.254 = local_unnamed_addr global i32 0
@global_var_1d2a4.255 = local_unnamed_addr global i32 0
@global_var_1d2a5.256 = local_unnamed_addr global i32 0
@global_var_147a4.258 = constant [4 x i8] c"'<T\00"
@global_var_1d2ac.259 = local_unnamed_addr global i32 0
@global_var_1d2a8.260 = local_unnamed_addr global i32 0
@global_var_1d2ad.261 = local_unnamed_addr global i32 0
@global_var_147a8.263 = constant i32 977090171
@global_var_1d2b0.264 = local_unnamed_addr global i32 0
@global_var_1d2b4.265 = local_unnamed_addr global i32 0
@global_var_1d2b5.266 = local_unnamed_addr global i32 0
@global_var_147bc.268 = constant i32 102440217
@global_var_1d2bc.269 = local_unnamed_addr global i32 0
@global_var_1d2b8.270 = local_unnamed_addr global i32 0
@global_var_1d2bd.271 = local_unnamed_addr global i32 0
@global_var_147d8.273 = constant [10 x i8] c":7;&&17 T\00"
@global_var_1d2c4.274 = local_unnamed_addr global i32 0
@global_var_1d2c0.275 = local_unnamed_addr global i32 0
@global_var_1d2c5.276 = local_unnamed_addr global i32 0
@global_var_147e4.278 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_1d2c8.279 = local_unnamed_addr global i32 0
@global_var_1d2cc.280 = local_unnamed_addr global i32 0
@global_var_1d2cd.281 = local_unnamed_addr global i32 0
@global_var_147f8.283 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_1d2d4.284 = local_unnamed_addr global i32 0
@global_var_1d2d0.285 = local_unnamed_addr global i32 0
@global_var_1d2d5.286 = local_unnamed_addr global i32 0
@global_var_14810.288 = constant [8 x i8] c"{$&;7{T\00"
@global_var_1d2d8.289 = local_unnamed_addr global i32 0
@global_var_1d2dc.290 = local_unnamed_addr global i32 0
@global_var_1d2dd.291 = local_unnamed_addr global i32 0
@global_var_14818.293 = constant [6 x i8] c"{1,1T\00"
@global_var_1d2e4.294 = local_unnamed_addr global i32 0
@global_var_1d2e0.295 = local_unnamed_addr global i32 0
@global_var_1d2e5.296 = local_unnamed_addr global i32 0
@global_var_14820.298 = constant [5 x i8] c"{20T\00"
@global_var_1d2ec.299 = local_unnamed_addr global i32 0
@global_var_1d2e8.300 = local_unnamed_addr global i32 0
@global_var_1d2ed.301 = local_unnamed_addr global i32 0
@global_var_14828.303 = constant [7 x i8] c"{95$'T\00"
@global_var_1d2f4.304 = local_unnamed_addr global i32 0
@global_var_1d2f0.305 = local_unnamed_addr global i32 0
@global_var_1d2f5.306 = local_unnamed_addr global i32 0
@global_var_14830.308 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_1d2f8.309 = local_unnamed_addr global i32 0
@global_var_1d2fc.310 = local_unnamed_addr global i32 0
@global_var_1d2fd.311 = local_unnamed_addr global i32 0
@global_var_14840.313 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_1d370.314 = local_unnamed_addr global i32 0
@global_var_1d374.315 = local_unnamed_addr global i32 0
@global_var_1d375.316 = local_unnamed_addr global i32 0
@global_var_1484c.318 = constant [8 x i8] c"z5:=91T\00"
@global_var_1d378.319 = local_unnamed_addr global i32 0
@global_var_1d37c.320 = local_unnamed_addr global i32 0
@global_var_1d37d.321 = local_unnamed_addr global i32 0
@global_var_14854.323 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_1d300.324 = local_unnamed_addr global i32 0
@global_var_1d304.325 = local_unnamed_addr global i32 0
@global_var_1d305.326 = local_unnamed_addr global i32 0
@global_var_14868.328 = constant [24 x i8] c"3e567`09;ga<:$f8=1d?>2T\00"
@global_var_1d308.329 = local_unnamed_addr global i32 0
@global_var_1d30c.330 = local_unnamed_addr global i32 0
@global_var_1d30d.331 = local_unnamed_addr global i32 0
@global_var_14880.333 = constant [9 x i8] c"5''#;&0T\00"
@global_var_1d310.334 = local_unnamed_addr global i32 0
@global_var_1d314.335 = local_unnamed_addr global i32 0
@global_var_1d315.336 = local_unnamed_addr global i32 0
@global_var_1488c.338 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_1d318.339 = local_unnamed_addr global i32 0
@global_var_1d31c.340 = local_unnamed_addr global i32 0
@global_var_1d31d.341 = local_unnamed_addr global i32 0
@global_var_1489c.343 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_1d320.344 = local_unnamed_addr global i32 0
@global_var_1d324.345 = local_unnamed_addr global i32 0
@global_var_1d325.346 = local_unnamed_addr global i32 0
@global_var_148b0.348 = constant [11 x i8] c"0\22&<18$1&T\00"
@global_var_1d384.349 = local_unnamed_addr global i32 0
@global_var_1d380.350 = local_unnamed_addr global i32 0
@global_var_1d385.351 = local_unnamed_addr global i32 0
@global_var_14914.353 = constant i32 557516544
@global_var_1d32c.354 = local_unnamed_addr global i32 0
@global_var_1d328.355 = local_unnamed_addr global i32 0
@global_var_1d32d.356 = local_unnamed_addr global i32 0
@global_var_148bc.358 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_1d334.359 = local_unnamed_addr global i32 0
@global_var_1d330.360 = local_unnamed_addr global i32 0
@global_var_1d335.361 = local_unnamed_addr global i32 0
@global_var_148d0.363 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_1d33c.364 = local_unnamed_addr global i32 0
@global_var_1d338.365 = local_unnamed_addr global i32 0
@global_var_1d33d.366 = local_unnamed_addr global i32 0
@global_var_1d340.367 = local_unnamed_addr global i32 0
@global_var_1d344.368 = local_unnamed_addr global i32 0
@global_var_1d345.369 = local_unnamed_addr global i32 0
@global_var_1d348.370 = local_unnamed_addr global i32 0
@global_var_1d34c.371 = local_unnamed_addr global i32 0
@global_var_1d34d.372 = local_unnamed_addr global i32 0
@global_var_148e0.374 = constant [9 x i8] c"$662*7!E\00"
@global_var_1d350.375 = local_unnamed_addr global i32 0
@global_var_1d354.376 = local_unnamed_addr global i32 0
@global_var_1d355.377 = local_unnamed_addr global i32 0
@global_var_148ec.379 = constant [6 x i8] c";3=:T\00"
@global_var_1d35c.380 = local_unnamed_addr global i32 0
@global_var_1d358.381 = local_unnamed_addr global i32 0
@global_var_1d35d.382 = local_unnamed_addr global i32 0
@global_var_148f4.384 = constant [7 x i8] c"1: 1&T\00"
@global_var_1d360.385 = local_unnamed_addr global i32 0
@global_var_1d364.386 = local_unnamed_addr global i32 0
@global_var_1d365.387 = local_unnamed_addr global i32 0
@global_var_148fc.389 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_1d36d.390 = local_unnamed_addr global i32 0
@global_var_1d368.391 = local_unnamed_addr global i32 0
@global_var_1d36c.392 = local_unnamed_addr global i32 0
@global_var_13438.395 = constant i32 -476053504
@global_var_121cc.399 = constant i32 -443219956
@global_var_12338.404 = constant i32 -376111092
@global_var_1d228.407 = global i32 0
@global_var_124ac.409 = constant i32 -456978431
@global_var_1d388.411 = global i32 0
@global_var_1d1f0.413 = global i32 0
@global_var_1d130.416 = global i32 256
@global_var_1d034.417 = global i32* @global_var_1d130.416
@global_var_1d218.420 = global i32 0
@global_var_1d408.422 = global i32 0
@global_var_13bec.423 = constant i32 -382910416
@global_var_12430.424 = constant i32 -509595648
@global_var_12ad0.431 = constant i32 -442564520
@global_var_1d13c.437 = global i32 0
@global_var_12078.439 = constant i32 -481230848
@global_var_1d208.441 = global i32 0
@global_var_1383c.443 = constant i32 -509587456
@global_var_14a38.445 = constant i32 33554944
@global_var_1d174.446 = global i32* @global_var_14a38.445
@global_var_1d154.449 = global i32 0
@global_var_1d20c.453 = local_unnamed_addr global i32 0
@global_var_131f0.455 = constant i32 -352321419
@global_var_1d000.459 = global i32 -1
@global_var_1d21c.462 = global i32 0
@global_var_1d220.464 = local_unnamed_addr global i32 0
@global_var_13424.465 = constant i32 -390234096
@global_var_1492c.467 = constant [10 x i8] c"/dev/null\00"
@global_var_1d224.469 = global i32 0
@global_var_1d210.474 = local_unnamed_addr global i32 0
@global_var_1d214.476 = global i32 0
@global_var_12410.478 = constant i32 -369096946
@global_var_1d16c = external local_unnamed_addr global i32
@global_var_123d0.488 = constant i32 -442564608
@global_var_136ec.490 = constant i32 -335544664
@global_var_13808.493 = constant i32 -275775369
@global_var_13f80.494 = constant i32 -382910352
@global_var_1d230.496 = global i32 0
@global_var_1d420.499 = global i32 0
@global_var_1d424.501 = global i32 0
@global_var_1d004.504 = global i32 0
@global_var_1d178.3 = external global i8*
@global_var_1d194.21 = external global i8*
@global_var_1d195.29 = global i8 0
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1d02c.77 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_1d240.80 = external global i8*
@global_var_1d1a4.100 = external global i8*
@global_var_1d1e8.136 = external global i8*
@global_var_1d1e9.137 = local_unnamed_addr global i8 0
@global_var_1d1bc.146 = external global i8*
@global_var_1d1dc.151 = local_unnamed_addr global i8 0
@global_var_1d1dd.159 = local_unnamed_addr global i8 0
@global_var_1d1cc.193 = local_unnamed_addr global i8 0
@global_var_1d1d4.196 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  store i32 %v0_80a0, i32* @r0, align 4
  %v1_80a4 = call i32 @function_14644(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1d178.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1d178.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1d01c.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1d01c.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1d01c.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1d01c.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1d178.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1d01c.6, { 1, 0 }
  uselistorder i8** @global_var_1d178.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32 %arg1) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8124
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8124, %bb
  %v5_812c = load i32, i32* @r0, align 4
  ret i32 %v5_812c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 118800 to i32*), align 16
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 118800

bb2:                                              ; preds = %.thread
  ret i32 118800

; uselistorder directives
  uselistorder i32 118800, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_134d8(i32 ptrtoint (i32* @global_var_e3d8.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 83584, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_12ea0()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_81cc:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_81cc = urem i32 %arg1, 256
  %v2_81d0 = icmp eq i32 %v1_81cc, 0
  %v1_81d8 = urem i32 %arg3, 256
  br i1 %v2_81d0, label %dec_label_pc_821c, label %dec_label_pc_81e4

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81cc
  %v0_81e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_81e4 = add i32 %v0_81e4, 4
  %v2_81e4 = inttoptr i32 %v1_81e4 to i8*
  %v3_81e4 = load i8, i8* %v2_81e4, align 1
  %v4_81e4 = zext i8 %v3_81e4 to i32
  %v9_81e8 = icmp eq i32 %v4_81e4, %v1_81d8
  br i1 %v9_81e8, label %dec_label_pc_8224, label %dec_label_pc_820c.preheader

dec_label_pc_820c.preheader:                      ; preds = %dec_label_pc_81e4
  br label %dec_label_pc_820c

dec_label_pc_81fc:                                ; preds = %dec_label_pc_820c
  %v1_81fc = add i32 %v0_8204.in, 12
  %v2_81fc = inttoptr i32 %v1_81fc to i8*
  %v3_81fc = load i8, i8* %v2_81fc, align 1
  %v4_81fc = zext i8 %v3_81fc to i32
  %v9_8200 = icmp eq i32 %v4_81fc, %v1_81d8
  br i1 %v9_8200, label %dec_label_pc_8224, label %dec_label_pc_820c

dec_label_pc_820c:                                ; preds = %dec_label_pc_820c.preheader, %dec_label_pc_81fc
  %v0_8204.in = phi i32 [ %v0_81e4, %dec_label_pc_820c.preheader ], [ %v0_8204, %dec_label_pc_81fc ]
  %v0_820c = phi i32 [ 0, %dec_label_pc_820c.preheader ], [ %v1_820c, %dec_label_pc_81fc ]
  %v0_8204 = add i32 %v0_8204.in, 8
  %v1_820c = add i32 %v0_820c, 1
  %v9_8210 = icmp eq i32 %v1_820c, %v1_81cc
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  br i1 %v9_8210, label %dec_label_pc_821c, label %dec_label_pc_81fc

dec_label_pc_821c:                                ; preds = %dec_label_pc_820c, %dec_label_pc_81cc
  ret i32 %arg4

dec_label_pc_8224:                                ; preds = %dec_label_pc_81fc, %dec_label_pc_81e4
  %v0_8224 = phi i32 [ %v0_81e4, %dec_label_pc_81e4 ], [ %v0_8204, %dec_label_pc_81fc ]
  %v1_8224 = inttoptr i32 %v0_8224 to i32*
  %v2_8224 = load i32, i32* %v1_8224, align 4
  ret i32 %v2_8224

; uselistorder directives
  uselistorder i32 %v1_820c, { 1, 0 }
  uselistorder i32 %v0_8204, { 1, 0, 2 }
  uselistorder i32 %v0_8204.in, { 1, 0 }
  uselistorder i32 %v0_81e4, { 1, 0, 2 }
  uselistorder i32 %v1_81d8, { 1, 0 }
  uselistorder i32 %v1_81cc, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_820c, { 1, 0 }
}

define i32 @function_8230(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_8230:
  store i32 %arg1, i32* @r6, align 4
  %v1_823c = urem i32 %arg2, 256
  store i32 %v1_823c, i32* @r7, align 4
  %v0_8248 = call i32 @function_11e28()
  %v7_824c = icmp eq i32 %v0_8248, -1
  %tmp23 = icmp slt i32 %v0_8248, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_8230
  br label %bb25

bb24:                                             ; preds = %dec_label_pc_8230
  %. = zext i1 %v7_824c to i32
  store i32 %., i32* @r5, align 4
  %v2_8264 = icmp eq i1 %v7_824c, false
  br i1 %v2_8264, label %bb26, label %bb25

bb25:                                             ; preds = %.thread2, %bb24
  ret i32 %v0_8248

bb26:                                             ; preds = %bb24
  %v0_826c = call i32 @function_11e28()
  %v7_8270 = icmp eq i32 %v0_826c, -1
  store i32 %v0_826c, i32* @r4, align 4
  br i1 %v7_8270, label %dec_label_pc_82a0, label %dec_label_pc_827c

dec_label_pc_827c:                                ; preds = %bb26
  %v2_827c = icmp eq i32 %v0_826c, 0
  br i1 %v2_827c, label %dec_label_pc_8284, label %dec_label_pc_82a8

dec_label_pc_8284:                                ; preds = %dec_label_pc_827c
  %v0_8284 = load i32, i32* @r6, align 4
  %v1_8288 = call i32 @function_13228(i32 %v0_8284)
  %v0_828c = call i32 @function_11e80()
  %v2_8294 = call i32 @function_11efc(i32 %v0_828c, i32 9)
  %v0_8298 = load i32, i32* @r4, align 4
  %v1_829c = call i32 @function_13194(i32 %v0_8298)
  br label %dec_label_pc_82a0

dec_label_pc_82a0:                                ; preds = %bb26, %dec_label_pc_8284
  %v0_82a0 = load i32, i32* @r5, align 4
  %v1_82a4 = call i32 @function_13194(i32 %v0_82a0)
  br label %dec_label_pc_82a8

dec_label_pc_82a8:                                ; preds = %dec_label_pc_827c, %dec_label_pc_82a0
  %v2_82ac = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_82ac = zext i8 %v2_82ac to i32
  %v2_82b0 = icmp eq i8 %v2_82ac, 0
  br i1 %v2_82b0, label %dec_label_pc_82f4, label %dec_label_pc_82b8

dec_label_pc_82b8:                                ; preds = %dec_label_pc_82a8
  %v2_82bc = load i32, i32* @global_var_1d198.23, align 4
  %v1_82c0 = inttoptr i32 %v2_82bc to i32*
  %v2_82c0 = load i32, i32* %v1_82c0, align 4
  store i32 %v2_82c0, i32* @ip, align 4
  %v1_82c4 = add i32 %v2_82c0, 4
  %v2_82c4 = inttoptr i32 %v1_82c4 to i8*
  %v3_82c4 = load i8, i8* %v2_82c4, align 1
  %v4_82c4 = zext i8 %v3_82c4 to i32
  %v1_82c8 = load i32, i32* @r7, align 4
  %v9_82c8 = icmp eq i32 %v4_82c4, %v1_82c8
  br i1 %v9_82c8, label %dec_label_pc_82fc, label %dec_label_pc_82e8.preheader

dec_label_pc_82e8.preheader:                      ; preds = %dec_label_pc_82b8
  %v1_82cc = load i32, i32* @r5, align 4
  br label %dec_label_pc_82e8

dec_label_pc_82d8:                                ; preds = %dec_label_pc_82e8
  %v4_82d8 = mul i32 %v1_82e8, 4
  %v5_82d8 = add i32 %v4_82d8, %v2_82bc
  %v6_82d8 = inttoptr i32 %v5_82d8 to i32*
  %v7_82d8 = load i32, i32* %v6_82d8, align 4
  store i32 %v7_82d8, i32* @ip, align 4
  %v1_82dc = add i32 %v7_82d8, 4
  %v2_82dc = inttoptr i32 %v1_82dc to i8*
  %v3_82dc = load i8, i8* %v2_82dc, align 1
  %v4_82dc = zext i8 %v3_82dc to i32
  %v9_82e0 = icmp eq i32 %v4_82dc, %v1_82c8
  br i1 %v9_82e0, label %dec_label_pc_82fc, label %dec_label_pc_82e8

dec_label_pc_82e8:                                ; preds = %dec_label_pc_82e8.preheader, %dec_label_pc_82d8
  %v0_82e8 = phi i32 [ %v1_82cc, %dec_label_pc_82e8.preheader ], [ %v1_82e8, %dec_label_pc_82d8 ]
  %v1_82e8 = add i32 %v0_82e8, 1
  %v9_82ec = icmp eq i32 %v1_82e8, %v3_82ac
  br i1 %v9_82ec, label %dec_label_pc_82f4, label %dec_label_pc_82d8

dec_label_pc_82f4:                                ; preds = %dec_label_pc_82e8, %dec_label_pc_82a8, %dec_label_pc_82fc
  %v1_82f8 = call i32 @function_13194(i32 0)
  %v0_8310.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_82fc

dec_label_pc_82fc:                                ; preds = %dec_label_pc_82d8, %dec_label_pc_82b8, %dec_label_pc_82f4
  %v0_8310 = phi i32 [ %v2_82c0, %dec_label_pc_82b8 ], [ %v0_8310.pre, %dec_label_pc_82f4 ], [ %v7_82d8, %dec_label_pc_82d8 ]
  %v1_8310 = inttoptr i32 %v0_8310 to i32*
  %v2_8310 = load i32, i32* %v1_8310, align 4
  call void @__pseudo_branch(i32 %v2_8310)
  br label %dec_label_pc_82f4

; uselistorder directives
  uselistorder i32 %v1_82e8, { 2, 0, 1 }
  uselistorder i32 %v0_826c, { 1, 2, 0 }
  uselistorder i1 %v7_824c, { 1, 0 }
  uselistorder i32 %v0_8248, { 1, 2, 0 }
  uselistorder label %dec_label_pc_82fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82f4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82e8, { 1, 0 }
  uselistorder label %dec_label_pc_82a8, { 1, 0 }
  uselistorder label %dec_label_pc_82a0, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
}

define i32 @function_8320(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8320:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_8320 = load i32, i32* @r4, align 4
  %v6_8320 = load i32, i32* @r5, align 4
  %v9_8320 = load i32, i32* @r6, align 4
  %v12_8320 = load i32, i32* @r7, align 4
  %v15_8320 = load i32, i32* @r8, align 4
  %v18_8320 = load i32, i32* @sb, align 4
  %v21_8320 = load i32, i32* @sl, align 4
  %v27_8320 = load i32, i32* @lr, align 4
  %v7_8324 = icmp eq i32 %arg2, 3
  store i1 %v7_8324, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_8330 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8330, i32* @r4, align 4
  %tmp33 = icmp ult i32 %arg2, 4
  br i1 %tmp33, label %dec_label_pc_8344, label %dec_label_pc_8338

dec_label_pc_8338:                                ; preds = %dec_label_pc_8320
  %v7_8338 = icmp eq i32 %arg2, 4
  store i1 %v7_8338, i1* %cpsr_z.global-to-local, align 1
  %v1_833c = inttoptr i32 %v0_8330 to i32*
  %v2_833c = load i32, i32* %v1_833c, align 4
  store i32 %v2_833c, i32* @sl, align 4
  br i1 %v7_8338, label %dec_label_pc_8344, label %dec_label_pc_834c

dec_label_pc_8344:                                ; preds = %dec_label_pc_8368, %.dec_label_pc_8344_crit_edge, %dec_label_pc_8338, %dec_label_pc_835c, %dec_label_pc_834c, %dec_label_pc_8320
  %v29_8348 = phi i32 [ %v29_8348.pre, %.dec_label_pc_8344_crit_edge ], [ %v0_8330, %dec_label_pc_8368 ], [ %v0_8330, %dec_label_pc_8338 ], [ %v0_8330, %dec_label_pc_835c ], [ %v0_8330, %dec_label_pc_834c ], [ %v0_8330, %dec_label_pc_8320 ]
  store i32 %v9_8320, i32* @r6, align 4
  store i32 %v12_8320, i32* @r7, align 4
  store i32 %v18_8320, i32* @sb, align 4
  store i32 %v21_8320, i32* @sl, align 4
  ret i32 %v29_8348

dec_label_pc_834c:                                ; preds = %dec_label_pc_8338
  %v7_834c = icmp eq i32 %arg2, 5
  store i1 %v7_834c, i1* %cpsr_z.global-to-local, align 1
  %v1_8350 = add i32 %v0_8330, 4
  %v2_8350 = inttoptr i32 %v1_8350 to i8*
  %v3_8350 = load i8, i8* %v2_8350, align 1
  %v4_8350 = zext i8 %v3_8350 to i32
  store i32 %v4_8350, i32* %r1.global-to-local, align 4
  br i1 %v7_834c, label %dec_label_pc_8344, label %dec_label_pc_835c

dec_label_pc_835c:                                ; preds = %dec_label_pc_834c
  %v1_835c = add i32 %v0_8330, 5
  %v2_835c = inttoptr i32 %v1_835c to i8*
  %v3_835c = load i8, i8* %v2_835c, align 1
  %v4_835c = zext i8 %v3_835c to i32
  store i32 %v4_835c, i32* @r7, align 4
  %v2_8360 = icmp eq i8 %v3_835c, 0
  store i1 %v2_8360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8360, label %dec_label_pc_8344, label %dec_label_pc_8368

dec_label_pc_8368:                                ; preds = %dec_label_pc_835c
  %v3_8368 = mul nuw nsw i32 %v4_835c, 4
  store i32 %v3_8368, i32* @sb, align 4
  %v1_836c = add i32 %arg2, -6
  store i32 %v1_836c, i32* @r6, align 4
  %v2_8370 = mul nuw nsw i32 %v4_835c, 5
  store i32 %v2_8370, i32* @r8, align 4
  %v3_8374 = icmp ult i32 %v1_836c, %v2_8370
  %v9_8374 = icmp eq i32 %v1_836c, %v2_8370
  store i1 %v9_8374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8374, label %dec_label_pc_8344, label %dec_label_pc_837c

dec_label_pc_837c:                                ; preds = %dec_label_pc_8368
  store i32 %v4_835c, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_8384 = call i32 @function_129f8(i32 %v4_835c, i32 24)
  store i32 %v2_8384, i32* %r0.global-to-local, align 4
  %v0_8388 = load i32, i32* @r7, align 4
  %v2_8388 = icmp eq i32 %v0_8388, 0
  store i1 %v2_8388, i1* %cpsr_z.global-to-local, align 1
  %v0_8390 = load i32, i32* @r4, align 4
  %v1_8390 = add i32 %v0_8390, 6
  store i32 %v1_8390, i32* %fp.global-to-local, align 4
  %tmp27 = icmp slt i32 %v0_8388, 1
  br i1 %tmp27, label %dec_label_pc_83e8thread-pre-split, label %dec_label_pc_8398

dec_label_pc_8398:                                ; preds = %dec_label_pc_837c
  store i32 %v2_8384, i32* %r1.global-to-local, align 4
  %v1_839c = load i32, i32* @r8, align 4
  %v2_839c = add i32 %v1_839c, %v0_8390
  store i32 %v2_839c, i32* %ip.global-to-local, align 4
  store i32 %v0_8390, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_83ac

dec_label_pc_83ac:                                ; preds = %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge, %dec_label_pc_8398
  %v2_83bc = phi i32 [ %v1_83d0, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v2_8384, %dec_label_pc_8398 ]
  %v1_83b8 = phi i32 [ %v1_83b8.pre, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v2_839c, %dec_label_pc_8398 ]
  %v0_83b4 = phi i32 [ %v0_83ac.pre, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v0_8390, %dec_label_pc_8398 ]
  %v1_83ac = add i32 %v0_83b4, 10
  %v2_83ac = inttoptr i32 %v1_83ac to i8*
  %v3_83ac = load i8, i8* %v2_83ac, align 1
  %v1_83b0 = add i32 %v0_83b4, 6
  %v2_83b0 = inttoptr i32 %v1_83b0 to i32*
  %v3_83b0 = load i32, i32* %v2_83b0, align 4
  store i32 %v3_83b0, i32* %r2.global-to-local, align 4
  %v1_83b4 = add i32 %v0_83b4, 5
  store i32 %v1_83b4, i32* %r0.global-to-local, align 4
  %v9_83b8 = icmp eq i32 %v1_83b4, %v1_83b8
  store i1 %v9_83b8, i1* %cpsr_z.global-to-local, align 1
  %v3_83bc = add i32 %v2_83bc, 20
  %v4_83bc = inttoptr i32 %v3_83bc to i8*
  store i8 %v3_83ac, i8* %v4_83bc, align 1
  %v0_83c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_83c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_83c0 = add i32 %v1_83c0, 4
  %v3_83c0 = inttoptr i32 %v2_83c0 to i32*
  store i32 %v0_83c0, i32* %v3_83c0, align 4
  %v0_83c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_83c4 = load i32, i32* %r1.global-to-local, align 4
  %v2_83c4 = add i32 %v1_83c4, 16
  %v3_83c4 = inttoptr i32 %v2_83c4 to i32*
  store i32 %v0_83c4, i32* %v3_83c4, align 4
  %v0_83c8 = load i32, i32* @r4, align 4
  %v1_83c8 = trunc i32 %v0_83c8 to i8
  %v2_83c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_83c8 = inttoptr i32 %v2_83c8 to i8*
  store i8 %v1_83c8, i8* %v3_83c8, align 1
  %v0_83cc = load i32, i32* @lr, align 4
  %v1_83cc = trunc i32 %v0_83cc to i8
  %v2_83cc = load i32, i32* %r1.global-to-local, align 4
  %v3_83cc = add i32 %v2_83cc, 1
  %v4_83cc = inttoptr i32 %v3_83cc to i8*
  store i8 %v1_83cc, i8* %v4_83cc, align 1
  %v0_83d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_83d0 = add i32 %v0_83d0, 24
  store i32 %v1_83d0, i32* %r1.global-to-local, align 4
  %v0_83d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83d4, label %dec_label_pc_83d8, label %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge

dec_label_pc_83ac.dec_label_pc_83ac_crit_edge:    ; preds = %dec_label_pc_83ac
  %v0_83ac.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_83b8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_83ac

dec_label_pc_83d8:                                ; preds = %dec_label_pc_83ac
  %v0_83d8 = load i32, i32* @sb, align 4
  %v1_83d8 = load i32, i32* @r7, align 4
  %v1_83dc = load i32, i32* @r5, align 4
  %sum = add i32 %v1_83d8, %v0_83d8
  %v2_83dc = sub i32 %v1_83dc, %sum
  %v0_83e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_83e0 = add i32 %v0_83e0, 6
  store i32 %v1_83e0, i32* %fp.global-to-local, align 4
  %v1_83e4 = add i32 %v2_83dc, -6
  store i32 %v1_83e4, i32* @r6, align 4
  br label %dec_label_pc_83e8

dec_label_pc_83e8thread-pre-split:                ; preds = %dec_label_pc_837c
  %v0_83e8.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_83e8

dec_label_pc_83e8:                                ; preds = %dec_label_pc_83e8thread-pre-split, %dec_label_pc_83d8
  %v0_83f4 = phi i32 [ %v1_8390, %dec_label_pc_83e8thread-pre-split ], [ %v1_83e0, %dec_label_pc_83d8 ]
  %v1_83ec = phi i32 [ %v0_83e8.pr, %dec_label_pc_83e8thread-pre-split ], [ %v1_83e4, %dec_label_pc_83d8 ]
  %v2_83e8 = icmp eq i32 %v1_83ec, 0
  store i1 %v2_83e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83e8, label %dec_label_pc_8520, label %dec_label_pc_83f4

dec_label_pc_83f4:                                ; preds = %dec_label_pc_83e8
  %v1_83f4 = inttoptr i32 %v0_83f4 to i8*
  %v2_83f4 = load i8, i8* %v1_83f4, align 1
  %v3_83f4 = zext i8 %v2_83f4 to i32
  store i32 %v3_83f4, i32* @sb, align 4
  %v2_83f8 = icmp eq i8 %v2_83f4, 0
  store i1 %v2_83f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83f8, label %dec_label_pc_84d8, label %dec_label_pc_8408

dec_label_pc_8408:                                ; preds = %dec_label_pc_83f4
  store i32 %v3_83f4, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_8410 = call i32 @function_129f8(i32 %v3_83f4, i32 8)
  store i32 %v2_8410, i32* %r0.global-to-local, align 4
  %v0_8414 = load i32, i32* @sb, align 4
  %v2_8414 = icmp eq i32 %v0_8414, 0
  store i1 %v2_8414, i1* %cpsr_z.global-to-local, align 1
  %tmp28 = icmp slt i32 %v0_8414, 1
  br i1 %tmp28, label %dec_label_pc_84d8, label %dec_label_pc_8424

dec_label_pc_8424:                                ; preds = %dec_label_pc_8408
  %v0_8424 = load i32, i32* @r6, align 4
  %v1_8424 = add i32 %v0_8424, -1
  store i32 %v1_8424, i32* %r2.global-to-local, align 4
  %v7_8424 = icmp eq i32 %v0_8424, 1
  store i1 %v7_8424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8424, label %dec_label_pc_8520, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8424
  %v0_842c = load i32, i32* %fp.global-to-local, align 4
  %v1_842c = add i32 %v0_842c, 1
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v1_8430 = add i32 %v0_8424, -2
  store i32 %v1_8430, i32* %r2.global-to-local, align 4
  %v7_8430 = icmp eq i32 %v1_8424, 1
  store i1 %v7_8430, i1* %cpsr_z.global-to-local, align 1
  %v3_8434 = add i32 %v2_8410, 4
  %v4_8434 = inttoptr i32 %v3_8434 to i8*
  store i8 %v3_842c, i8* %v4_8434, align 1
  %v0_8438 = load i32, i32* %fp.global-to-local, align 4
  %v1_8438 = add i32 %v0_8438, 1
  store i32 %v1_8438, i32* %r0.global-to-local, align 4
  %v0_843c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_843c, label %dec_label_pc_8520, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  %v1_8440 = add i32 %v0_8438, 2
  %v2_8440 = inttoptr i32 %v1_8440 to i8*
  %v3_8440 = load i8, i8* %v2_8440, align 1
  %v4_8440 = zext i8 %v3_8440 to i32
  store i32 %v4_8440, i32* @r4, align 4
  %v0_8444 = load i32, i32* %r2.global-to-local, align 4
  %v1_8444 = add i32 %v0_8444, -1
  store i32 %v1_8444, i32* @r8, align 4
  %v9_8448 = icmp eq i32 %v1_8444, %v4_8440
  store i1 %v9_8448, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8440, i32* %r0.global-to-local, align 4
  %v5_8450 = icmp slt i32 %v1_8444, %v4_8440
  br i1 %v5_8450, label %dec_label_pc_8520, label %dec_label_pc_8454

dec_label_pc_8454:                                ; preds = %dec_label_pc_8440
  store i32 %v2_8410, i32* @r5, align 4
  %v1_845c = add i32 %v2_8410, 8
  %v1_8460 = add i32 %v0_8438, 3
  store i32 %v1_8460, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_84a4

dec_label_pc_8470:                                ; preds = %dec_label_pc_84a4
  %v0_8470 = load i32, i32* @r8, align 4
  %v1_8470 = load i32, i32* @r4, align 4
  %v2_8470 = sub i32 %v0_8470, %v1_8470
  store i32 %v2_8470, i32* %r2.global-to-local, align 4
  %v9_8470 = icmp eq i32 %v0_8470, %v1_8470
  store i1 %v9_8470, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8470, label %dec_label_pc_8520, label %dec_label_pc_8478

dec_label_pc_8478:                                ; preds = %dec_label_pc_8470
  %v1_8478 = load i32, i32* @r6, align 4
  %v2_8478 = add i32 %v1_8478, %v1_8470
  %v3_8478 = inttoptr i32 %v2_8478 to i8*
  %v4_8478 = load i8, i8* %v3_8478, align 1
  store i32 %v2_8478, i32* %r0.global-to-local, align 4
  %v1_8480 = add i32 %v2_8470, -1
  store i32 %v1_8480, i32* %r2.global-to-local, align 4
  %v7_8480 = icmp eq i32 %v2_8470, 1
  store i1 %v7_8480, i1* %cpsr_z.global-to-local, align 1
  %v3_8484 = add i32 %v2_8484, 4
  %v4_8484 = inttoptr i32 %v3_8484 to i8*
  store i8 %v4_8478, i8* %v4_8484, align 1
  %v0_8488 = load i32, i32* %r0.global-to-local, align 4
  %v0_848c = load i32, i32* %r2.global-to-local, align 4
  %v1_848c = add i32 %v0_848c, -1
  store i32 %v1_848c, i32* @r8, align 4
  %v1_8490 = add i32 %v0_8488, 2
  store i32 %v1_8490, i32* @r6, align 4
  %v0_8494 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8494, label %dec_label_pc_8520, label %dec_label_pc_8498

dec_label_pc_8498:                                ; preds = %dec_label_pc_8478
  %v1_8488 = add i32 %v0_8488, 1
  %v2_8498 = inttoptr i32 %v1_8488 to i8*
  %v3_8498 = load i8, i8* %v2_8498, align 1
  %v4_8498 = zext i8 %v3_8498 to i32
  store i32 %v4_8498, i32* @r4, align 4
  %v2_849c = sub i32 %v1_848c, %v4_8498
  %tmp30 = sub i32 0, %v2_849c
  %v6_849c = and i32 %v1_848c, %tmp30
  %v7_849c = icmp slt i32 %v6_849c, 0
  %v8_849c = icmp slt i32 %v2_849c, 0
  %v9_849c = icmp eq i32 %v1_848c, %v4_8498
  store i1 %v9_849c, i1* %cpsr_z.global-to-local, align 1
  %v2_84a0 = xor i1 %v8_849c, %v7_849c
  br i1 %v2_84a0, label %dec_label_pc_8520, label %dec_label_pc_84a4

dec_label_pc_84a4:                                ; preds = %dec_label_pc_8498, %dec_label_pc_8454
  %v0_84a8 = phi i32 [ %v4_8440, %dec_label_pc_8454 ], [ %v4_8498, %dec_label_pc_8498 ]
  %v2_8484 = phi i32 [ %v1_845c, %dec_label_pc_8454 ], [ %v1_84c8, %dec_label_pc_8498 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_84a8 = add nuw nsw i32 %v0_84a8, 1
  store i32 %v1_84a8, i32* %r0.global-to-local, align 4
  %v2_84ac = call i32 @function_129f8(i32 %v1_84a8, i32 1)
  store i32 %v2_84ac, i32* %r0.global-to-local, align 4
  %v0_84b0 = load i32, i32* @r6, align 4
  store i32 %v0_84b0, i32* %r1.global-to-local, align 4
  %v1_84b4 = load i32, i32* @r5, align 4
  %v2_84b4 = inttoptr i32 %v1_84b4 to i32*
  store i32 %v2_84ac, i32* %v2_84b4, align 4
  %v0_84b8 = load i32, i32* @r4, align 4
  store i32 %v0_84b8, i32* %r2.global-to-local, align 4
  %v3_84bc = call i32 @function_11574(i32 %v2_84ac, i32 %v0_84b0, i32 %v0_84b8)
  store i32 %v3_84bc, i32* %r0.global-to-local, align 4
  store i32 %v2_8484, i32* @r5, align 4
  %v0_84c4 = load i32, i32* %fp.global-to-local, align 4
  %v1_84c4 = add i32 %v0_84c4, 1
  store i32 %v1_84c4, i32* %fp.global-to-local, align 4
  %v1_84c8 = add i32 %v2_8484, 8
  store i32 %v1_84c8, i32* %ip.global-to-local, align 4
  %v1_84cc = load i32, i32* @sb, align 4
  %v9_84cc = icmp eq i32 %v1_84c4, %v1_84cc
  store i1 %v9_84cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_84cc, label %dec_label_pc_84d8, label %dec_label_pc_8470

dec_label_pc_84d8:                                ; preds = %dec_label_pc_84a4, %dec_label_pc_8408, %dec_label_pc_83f4
  %stack_var_-48.1 = phi i32 [ %v3_83f4, %dec_label_pc_83f4 ], [ %v0_8414, %dec_label_pc_8408 ], [ %v0_8414, %dec_label_pc_84a4 ]
  %stack_var_-52.2 = phi i32 [ %v3_83f4, %dec_label_pc_83f4 ], [ %v2_8410, %dec_label_pc_8408 ], [ %v2_8410, %dec_label_pc_84a4 ]
  %v0_84d8 = call i32 @function_123d0()
  %v0_84dc = load i32, i32* @sl, align 4
  store i32 %stack_var_-48.1, i32* %ip.global-to-local, align 4
  %v3_84e8 = mul i32 %v0_84dc, 16777216
  %v1_84dc = mul i32 %v0_84dc, 256
  %v4_84ec = and i32 %v1_84dc, 16711680
  %v5_84ec = or i32 %v4_84ec, %v3_84e8
  store i32 %v5_84ec, i32* %r1.global-to-local, align 4
  %v1_84e4 = udiv i32 %v0_84dc, 256
  %v3_84f0 = and i32 %v1_84e4, 65280
  store i32 %v3_84f0, i32* %r2.global-to-local, align 4
  %v2_84f8 = inttoptr i32 %v0_84d8 to i32*
  store i32 0, i32* %v2_84f8, align 4
  %v0_84fc = load i32, i32* %r2.global-to-local, align 4
  %v1_84fc = load i32, i32* @sl, align 4
  %v4_84fc = udiv i32 %v1_84fc, 16777216
  %v5_84fc = or i32 %v4_84fc, %v0_84fc
  %v0_8500 = load i32, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-52.2, i32* @ip, align 4
  %v1_8508 = load i32, i32* %r1.global-to-local, align 4
  %v2_8508 = or i32 %v5_84fc, %v1_8508
  store i32 %v2_8508, i32* %r0.global-to-local, align 4
  store i32 %v4_8350, i32* %r1.global-to-local, align 4
  %v0_8514 = load i32, i32* @r7, align 4
  store i32 %v0_8514, i32* %r2.global-to-local, align 4
  %v6_851c = trunc i32 %v0_8500 to i8
  %v7_851c = call i32 @function_8230(i32 %v2_8508, i32 %v4_8350, i32 %v0_8514, i32 %v2_8384, i8 %v6_851c, i32 %stack_var_-52.2)
  store i32 %v7_851c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8520

dec_label_pc_8520:                                ; preds = %dec_label_pc_8498, %dec_label_pc_8478, %dec_label_pc_8470, %dec_label_pc_8440, %dec_label_pc_842c, %dec_label_pc_8424, %dec_label_pc_83e8, %dec_label_pc_84d8
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_83e8 ], [ %stack_var_-52.2, %dec_label_pc_84d8 ], [ %v2_8410, %dec_label_pc_8424 ], [ %v2_8410, %dec_label_pc_842c ], [ %v2_8410, %dec_label_pc_8440 ], [ %v2_8410, %dec_label_pc_8470 ], [ %v2_8410, %dec_label_pc_8478 ], [ %v2_8410, %dec_label_pc_8498 ]
  store i32 %v2_8384, i32* %r1.global-to-local, align 4
  %v2_8524 = icmp eq i32 %v2_8384, 0
  store i1 %v2_8524, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8524, label %bb31, label %bb

bb:                                               ; preds = %dec_label_pc_8520
  store i32 %v2_8384, i32* %r0.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_8520, %bb
  %v1_852c = xor i1 %v2_8524, true
  call void @__pseudo_cond_branch(i1 %v1_852c, i32 ptrtoint (i32* @global_var_12a50.25 to i32))
  %v2_8534 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_8534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8534, label %.dec_label_pc_8344_crit_edge, label %dec_label_pc_853c

.dec_label_pc_8344_crit_edge:                     ; preds = %bb31
  %v29_8348.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8344

dec_label_pc_853c:                                ; preds = %bb31
  %v0_853c = load i32, i32* @sb, align 4
  %v2_853c = icmp eq i32 %v0_853c, 0
  store i1 %v2_853c, i1* %cpsr_z.global-to-local, align 1
  %tmp32 = icmp slt i32 %v0_853c, 1
  br i1 %tmp32, label %dec_label_pc_8564, label %dec_label_pc_8544

dec_label_pc_8544:                                ; preds = %dec_label_pc_853c
  br label %dec_label_pc_8548

dec_label_pc_8548:                                ; preds = %dec_label_pc_8548, %dec_label_pc_8544
  %v0_8554 = phi i32 [ %v1_8554, %dec_label_pc_8548 ], [ 0, %dec_label_pc_8544 ]
  store i32 %stack_var_-52.3, i32* %ip.global-to-local, align 4
  %v4_854c = mul i32 %v0_8554, 8
  %v5_854c = add i32 %v4_854c, %stack_var_-52.3
  %v6_854c = inttoptr i32 %v5_854c to i32*
  %v7_854c = load i32, i32* %v6_854c, align 4
  store i32 %v7_854c, i32* %r0.global-to-local, align 4
  %v2_8550 = icmp eq i32 %v7_854c, 0
  store i1 %v2_8550, i1* %cpsr_z.global-to-local, align 1
  %v1_8554 = add i32 %v0_8554, 1
  %v1_8558 = xor i1 %v2_8550, true
  call void @__pseudo_cond_branch(i1 %v1_8558, i32 ptrtoint (i32* @global_var_12a50.25 to i32))
  %v0_855c = load i32, i32* @sb, align 4
  %v9_855c = icmp eq i32 %v0_855c, %v1_8554
  store i1 %v9_855c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_855c, label %dec_label_pc_8564, label %dec_label_pc_8548

dec_label_pc_8564:                                ; preds = %dec_label_pc_8548, %dec_label_pc_853c
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_8320, i32* @r4, align 4
  store i32 %v6_8320, i32* @r5, align 4
  store i32 %v9_8320, i32* @r6, align 4
  store i32 %v12_8320, i32* @r7, align 4
  store i32 %v15_8320, i32* @r8, align 4
  store i32 %v18_8320, i32* @sb, align 4
  store i32 %v21_8320, i32* @sl, align 4
  store i32 %v27_8320, i32* @lr, align 4
  %v0_8570 = call i32 @function_12a50()
  store i32 %v0_8570, i32* %r0.global-to-local, align 4
  ret i32 %v0_8570

; uselistorder directives
  uselistorder i32 %stack_var_-52.3, { 2, 0, 1, 3 }
  uselistorder i32 %v0_84dc, { 2, 0, 1 }
  uselistorder i32 %stack_var_-52.2, { 1, 0, 2 }
  uselistorder i32 %v1_84c8, { 1, 0 }
  uselistorder i32 %v2_8484, { 2, 1, 0 }
  uselistorder i32 %v2_849c, { 1, 0 }
  uselistorder i32 %v4_8498, { 0, 2, 1, 3 }
  uselistorder i32 %v1_848c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_8488, { 1, 0 }
  uselistorder i32 %v0_8424, { 0, 2, 1 }
  uselistorder i32 %v0_8414, { 0, 2, 1, 3 }
  uselistorder i32 %v2_8410, { 0, 1, 2, 8, 7, 6, 3, 5, 9, 10, 4, 11 }
  uselistorder i32 %v3_83f4, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_83d0, { 1, 0 }
  uselistorder i32 %v0_83b4, { 0, 2, 1 }
  uselistorder i32 %v0_8390, { 1, 2, 0, 3 }
  uselistorder i32 %v2_8384, { 0, 3, 4, 5, 1, 2, 6 }
  uselistorder i32 %v2_8370, { 2, 1, 0 }
  uselistorder i32 %v4_835c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v4_8350, { 1, 0, 2 }
  uselistorder i32 %v0_8330, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 6, 3, 4, 5, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 21, 4, 22, 5, 8, 12, 9, 6, 7, 10, 11, 18, 13, 14, 15, 16, 17, 20, 19, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 5, 3, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 1, 2, 3, 0, 5, 4, 6 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_8520, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_8344, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_8574(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8574:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_8574 = urem i32 %arg1, 256
  %v2_8578 = icmp eq i32 %v1_8574, 0
  %v3_857c = load i32, i32* @r4, align 4
  br i1 %v2_8578, label %dec_label_pc_85c4, label %dec_label_pc_8588

dec_label_pc_8588:                                ; preds = %dec_label_pc_8574
  %v0_8588 = load i32, i32* %r1.global-to-local, align 4
  %v1_8588 = add i32 %v0_8588, 4
  %v2_8588 = inttoptr i32 %v1_8588 to i8*
  %v3_8588 = load i8, i8* %v2_8588, align 1
  %v4_8588 = zext i8 %v3_8588 to i32
  %v1_858c = urem i32 %arg3, 256
  %v9_8590 = icmp eq i32 %v4_8588, %v1_858c
  br i1 %v9_8590, label %dec_label_pc_85cc, label %dec_label_pc_85b4.preheader

dec_label_pc_85b4.preheader:                      ; preds = %dec_label_pc_8588
  br label %dec_label_pc_85b4

dec_label_pc_85a4:                                ; preds = %dec_label_pc_85b4
  %v1_85a4 = add i32 %v0_85ac.in, 12
  %v2_85a4 = inttoptr i32 %v1_85a4 to i8*
  %v3_85a4 = load i8, i8* %v2_85a4, align 1
  %v4_85a4 = zext i8 %v3_85a4 to i32
  %v9_85a8 = icmp eq i32 %v1_858c, %v4_85a4
  br i1 %v9_85a8, label %dec_label_pc_85cc, label %dec_label_pc_85b4

dec_label_pc_85b4:                                ; preds = %dec_label_pc_85b4.preheader, %dec_label_pc_85a4
  %v0_85ac.in = phi i32 [ %v0_8588, %dec_label_pc_85b4.preheader ], [ %v0_85ac, %dec_label_pc_85a4 ]
  %v0_85b4 = phi i32 [ 0, %dec_label_pc_85b4.preheader ], [ %v1_85b4, %dec_label_pc_85a4 ]
  %v0_85ac = add i32 %v0_85ac.in, 8
  %v1_85b4 = add i32 %v0_85b4, 1
  %v9_85b8 = icmp eq i32 %v1_8574, %v1_85b4
  store i32 %v0_85ac, i32* %r1.global-to-local, align 4
  br i1 %v9_85b8, label %dec_label_pc_85c4, label %dec_label_pc_85a4

dec_label_pc_85c4:                                ; preds = %dec_label_pc_85b4, %dec_label_pc_85cc, %dec_label_pc_8574
  store i32 %v3_857c, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_85cc:                                ; preds = %dec_label_pc_85a4, %dec_label_pc_8588
  %v0_85cc = phi i32 [ %v0_8588, %dec_label_pc_8588 ], [ %v0_85ac, %dec_label_pc_85a4 ]
  %v1_85cc = inttoptr i32 %v0_85cc to i32*
  %v2_85cc = load i32, i32* %v1_85cc, align 4
  store i32 %v2_85cc, i32* @r0, align 4
  %v2_85d0 = icmp eq i32 %v2_85cc, 0
  br i1 %v2_85d0, label %dec_label_pc_85c4, label %dec_label_pc_85d8

dec_label_pc_85d8:                                ; preds = %dec_label_pc_85cc
  store i32 %v3_857c, i32* @r4, align 4
  %v1_85dc = call i32 @function_124ec(i32 %v2_85cc)
  ret i32 %v1_85dc

; uselistorder directives
  uselistorder i32 %v1_85b4, { 1, 0 }
  uselistorder i32 %v0_85ac, { 1, 0, 2 }
  uselistorder i32 %v0_85ac.in, { 1, 0 }
  uselistorder i32 %v1_858c, { 1, 0 }
  uselistorder i32 %v0_8588, { 1, 0, 2 }
  uselistorder i32 %v3_857c, { 1, 0 }
  uselistorder i32 %v1_8574, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_85c4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_85b4, { 1, 0 }
}

define i32 @function_85e0(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_85e0:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_85e0 = urem i32 %arg1, 256
  %v2_85e4 = icmp eq i32 %v1_85e0, 0
  %v3_85e8 = load i32, i32* @r4, align 4
  %v6_85e8 = load i32, i32* @lr, align 4
  br i1 %v2_85e4, label %dec_label_pc_8630, label %dec_label_pc_85f4

dec_label_pc_85f4:                                ; preds = %dec_label_pc_85e0
  %v0_85f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_85f4 = add i32 %v0_85f4, 4
  %v2_85f4 = inttoptr i32 %v1_85f4 to i8*
  %v3_85f4 = load i8, i8* %v2_85f4, align 1
  %v4_85f4 = zext i8 %v3_85f4 to i32
  %v1_85f8 = urem i32 %arg3, 256
  %v9_85fc = icmp eq i32 %v4_85f4, %v1_85f8
  br i1 %v9_85fc, label %dec_label_pc_8638, label %dec_label_pc_8620.preheader

dec_label_pc_8620.preheader:                      ; preds = %dec_label_pc_85f4
  br label %dec_label_pc_8620

dec_label_pc_8610:                                ; preds = %dec_label_pc_8620
  %v1_8610 = add i32 %v0_8618.in, 12
  %v2_8610 = inttoptr i32 %v1_8610 to i8*
  %v3_8610 = load i8, i8* %v2_8610, align 1
  %v4_8610 = zext i8 %v3_8610 to i32
  %v9_8614 = icmp eq i32 %v1_85f8, %v4_8610
  br i1 %v9_8614, label %dec_label_pc_8638, label %dec_label_pc_8620

dec_label_pc_8620:                                ; preds = %dec_label_pc_8620.preheader, %dec_label_pc_8610
  %v0_8618.in = phi i32 [ %v0_85f4, %dec_label_pc_8620.preheader ], [ %v0_8618, %dec_label_pc_8610 ]
  %v0_8620 = phi i32 [ 0, %dec_label_pc_8620.preheader ], [ %v1_8620, %dec_label_pc_8610 ]
  %v0_8618 = add i32 %v0_8618.in, 8
  %v1_8620 = add i32 %v0_8620, 1
  store i32 %v1_8620, i32* @lr, align 4
  %v9_8624 = icmp eq i32 %v1_85e0, %v1_8620
  store i32 %v0_8618, i32* %r1.global-to-local, align 4
  br i1 %v9_8624, label %dec_label_pc_8630, label %dec_label_pc_8610

dec_label_pc_8630:                                ; preds = %dec_label_pc_8620, %dec_label_pc_8638, %dec_label_pc_85e0
  store i32 %v3_85e8, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_8638:                                ; preds = %dec_label_pc_8610, %dec_label_pc_85f4
  %v0_8638 = phi i32 [ %v0_85f4, %dec_label_pc_85f4 ], [ %v0_8618, %dec_label_pc_8610 ]
  %v1_8638 = inttoptr i32 %v0_8638 to i32*
  %v2_8638 = load i32, i32* %v1_8638, align 4
  %v2_863c = icmp eq i32 %v2_8638, 0
  br i1 %v2_863c, label %dec_label_pc_8630, label %dec_label_pc_8644

dec_label_pc_8644:                                ; preds = %dec_label_pc_8638
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_85e8, i32* @r4, align 4
  store i32 %v6_85e8, i32* @lr, align 4
  %v2_864c = inttoptr i32 %v2_8638 to i8*
  %v3_864c = call i32 @function_11624(i8* %v2_864c, i32 10)
  ret i32 %v3_864c

; uselistorder directives
  uselistorder i32 %v1_8620, { 1, 2, 0 }
  uselistorder i32 %v0_8618, { 1, 0, 2 }
  uselistorder i32 %v0_8618.in, { 1, 0 }
  uselistorder i32 %v1_85f8, { 1, 0 }
  uselistorder i32 %v0_85f4, { 1, 0, 2 }
  uselistorder i32 %v3_85e8, { 1, 0 }
  uselistorder i32 %v1_85e0, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_8630, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8620, { 1, 0 }
}

define i32 @function_8650(i32 %arg1) local_unnamed_addr {
dec_label_pc_8650:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_8650 = load i32, i32* @r4, align 4
  store i32 %v3_8650, i32* %stack_var_-24, align 4
  %v6_8650 = load i32, i32* @r5, align 4
  %v9_8650 = load i32, i32* @r6, align 4
  %v12_8650 = load i32, i32* @r7, align 4
  %v15_8650 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_865c = call i32 @function_129f8(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1d194.21 to i32), i32* @r4, align 4
  %v2_8664 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_8664 = zext i8 %v2_8664 to i32
  store i32 ptrtoint (i32* @global_var_1d198.23 to i32), i32* @r6, align 4
  store i32 48568, i32* %r2.global-to-local, align 4
  store i32 %v2_865c, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_8678 = mul nuw nsw i32 %v3_8664, 4
  store i32 %v3_8678, i32* %r1.global-to-local, align 4
  %v2_867c = load i32, i32* @global_var_1d198.23, align 4
  %v2_8680 = inttoptr i32 %v2_865c to i32*
  store i32 48568, i32* %v2_8680, align 4
  %v3_8684 = load i32, i32* @r5, align 4
  %v4_8684 = add i32 %v3_8684, 4
  %v5_8684 = inttoptr i32 %v4_8684 to i8*
  store i8 0, i8* %v5_8684, align 1
  %v0_8688 = load i32, i32* %r1.global-to-local, align 4
  %v1_8688 = add i32 %v0_8688, 4
  store i32 %v1_8688, i32* %r1.global-to-local, align 4
  %v5_868c = call i32 @function_12b40(i32 %v2_867c, i32 %v1_8688, i32 48568, i32 0)
  %v2_8690 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_8690 = zext i8 %v2_8690 to i32
  store i32 %v3_8690, i32* %r3.global-to-local, align 4
  store i32 %v5_868c, i32* %ip.global-to-local, align 4
  %v0_8698 = load i32, i32* @r5, align 4
  %v5_8698 = mul nuw nsw i32 %v3_8690, 4
  %v6_8698 = add i32 %v5_8698, %v5_868c
  %v7_8698 = inttoptr i32 %v6_8698 to i32*
  store i32 %v0_8698, i32* %v7_8698, align 4
  store i32 ptrtoint (i8* @global_var_1d195.29 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_86a8 = load i32, i32* @r4, align 4
  %v4_86a8 = inttoptr i32 %v3_86a8 to i8*
  store i8 ptrtoint (i8* @global_var_1d195.29 to i8), i8* %v4_86a8, align 1
  %v0_86ac = load i32, i32* %ip.global-to-local, align 4
  %v1_86ac = load i32, i32* @r6, align 4
  %v2_86ac = inttoptr i32 %v1_86ac to i32*
  store i32 %v0_86ac, i32* %v2_86ac, align 4
  %v2_86b0 = call i32 @function_129f8(i32 1, i32 8)
  %v2_86b4 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_86b4 = zext i8 %v2_86b4 to i32
  store i32 ptrtoint (i32* @global_var_c444.31 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_86b0, i32* @r5, align 4
  %v3_86c4 = mul nuw nsw i32 %v3_86b4, 4
  store i32 %v3_86c4, i32* %r1.global-to-local, align 4
  %v2_86c8 = load i32, i32* @global_var_1d198.23, align 4
  %v2_86cc = inttoptr i32 %v2_86b0 to i32*
  store i32 ptrtoint (i32* @global_var_c444.31 to i32), i32* %v2_86cc, align 4
  %v0_86d0 = load i32, i32* @r8, align 4
  %v1_86d0 = trunc i32 %v0_86d0 to i8
  %v2_86d0 = load i32, i32* @r5, align 4
  %v3_86d0 = add i32 %v2_86d0, 4
  %v4_86d0 = inttoptr i32 %v3_86d0 to i8*
  store i8 %v1_86d0, i8* %v4_86d0, align 1
  %v0_86d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_86d4 = add i32 %v0_86d4, 4
  store i32 %v1_86d4, i32* %r1.global-to-local, align 4
  %v5_86d8 = call i32 @function_12b40(i32 %v2_86c8, i32 %v1_86d4, i32 sext (i8 ptrtoint (i8* @global_var_1d195.29 to i8) to i32), i32 ptrtoint (i32* @global_var_c444.31 to i32))
  %v2_86dc = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_86dc = zext i8 %v2_86dc to i32
  store i32 %v3_86dc, i32* %r3.global-to-local, align 4
  store i32 %v5_86d8, i32* %ip.global-to-local, align 4
  %v0_86e4 = load i32, i32* @r5, align 4
  %v5_86e4 = mul nuw nsw i32 %v3_86dc, 4
  %v6_86e4 = add i32 %v5_86e4, %v5_86d8
  %v7_86e4 = inttoptr i32 %v6_86e4 to i32*
  store i32 %v0_86e4, i32* %v7_86e4, align 4
  %v0_86e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_86e8 = load i32, i32* @r8, align 4
  %v2_86e8 = add i32 %v1_86e8, %v0_86e8
  store i32 %v2_86e8, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86f4 = load i32, i32* %ip.global-to-local, align 4
  %v1_86f4 = load i32, i32* @r6, align 4
  %v2_86f4 = inttoptr i32 %v1_86f4 to i32*
  store i32 %v0_86f4, i32* %v2_86f4, align 4
  %v0_86f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_86f8 = trunc i32 %v0_86f8 to i8
  %v2_86f8 = load i32, i32* @r4, align 4
  %v3_86f8 = inttoptr i32 %v2_86f8 to i8*
  store i8 %v1_86f8, i8* %v3_86f8, align 1
  %v2_86fc = call i32 @function_129f8(i32 %v1_86e8, i32 8)
  %v2_8700 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_8700 = zext i8 %v2_8700 to i32
  store i32 ptrtoint (i32* @global_var_c908.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86fc, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_8710 = mul nuw nsw i32 %v3_8700, 4
  store i32 %v3_8710, i32* %r1.global-to-local, align 4
  %v2_8714 = load i32, i32* @global_var_1d198.23, align 4
  %v2_8718 = inttoptr i32 %v2_86fc to i32*
  store i32 ptrtoint (i32* @global_var_c908.33 to i32), i32* %v2_8718, align 4
  %v3_871c = load i32, i32* @r5, align 4
  %v4_871c = add i32 %v3_871c, 4
  %v5_871c = inttoptr i32 %v4_871c to i8*
  store i8 2, i8* %v5_871c, align 1
  %v0_8720 = load i32, i32* %r1.global-to-local, align 4
  %v1_8720 = add i32 %v0_8720, 4
  store i32 %v1_8720, i32* %r1.global-to-local, align 4
  %v5_8724 = call i32 @function_12b40(i32 %v2_8714, i32 %v1_8720, i32 ptrtoint (i32* @global_var_c908.33 to i32), i32 2)
  %v2_8728 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_8728 = zext i8 %v2_8728 to i32
  store i32 %v3_8728, i32* %r3.global-to-local, align 4
  store i32 %v5_8724, i32* %ip.global-to-local, align 4
  %v1_8730 = load i32, i32* @r8, align 4
  %v2_8730 = add i32 %v1_8730, %v3_8728
  %v3_8730 = trunc i32 %v2_8730 to i8
  store i32 %v2_8730, i32* %r2.global-to-local, align 4
  %v0_8734 = load i32, i32* @r5, align 4
  %v5_8734 = mul nuw nsw i32 %v3_8728, 4
  %v6_8734 = add i32 %v5_8734, %v5_8724
  %v7_8734 = inttoptr i32 %v6_8734 to i32*
  store i32 %v0_8734, i32* %v7_8734, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_873c = load i32, i32* @r8, align 4
  %v3_8740 = load i32, i32* @r4, align 4
  %v4_8740 = inttoptr i32 %v3_8740 to i8*
  store i8 %v3_8730, i8* %v4_8740, align 1
  %v0_8744 = load i32, i32* %ip.global-to-local, align 4
  %v1_8744 = load i32, i32* @r6, align 4
  %v2_8744 = inttoptr i32 %v1_8744 to i32*
  store i32 %v0_8744, i32* %v2_8744, align 4
  %v2_8748 = call i32 @function_129f8(i32 %v0_873c, i32 8)
  %v2_874c = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_874c = zext i8 %v2_874c to i32
  store i32 ptrtoint (i32* @global_var_bad4.35 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_8748, i32* @r5, align 4
  %v3_875c = mul nuw nsw i32 %v3_874c, 4
  store i32 %v3_875c, i32* %r1.global-to-local, align 4
  %v2_8760 = load i32, i32* @global_var_1d198.23, align 4
  %v2_8764 = inttoptr i32 %v2_8748 to i32*
  store i32 ptrtoint (i32* @global_var_bad4.35 to i32), i32* %v2_8764, align 4
  %v0_8768 = load i32, i32* @r7, align 4
  %v1_8768 = trunc i32 %v0_8768 to i8
  %v2_8768 = load i32, i32* @r5, align 4
  %v3_8768 = add i32 %v2_8768, 4
  %v4_8768 = inttoptr i32 %v3_8768 to i8*
  store i8 %v1_8768, i8* %v4_8768, align 1
  %v0_876c = load i32, i32* %r1.global-to-local, align 4
  %v1_876c = add i32 %v0_876c, 4
  store i32 %v1_876c, i32* %r1.global-to-local, align 4
  %v5_8770 = call i32 @function_12b40(i32 %v2_8760, i32 %v1_876c, i32 %v2_8730, i32 ptrtoint (i32* @global_var_bad4.35 to i32))
  %v2_8774 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_8774 = zext i8 %v2_8774 to i32
  store i32 %v3_8774, i32* %r3.global-to-local, align 4
  store i32 %v5_8770, i32* %ip.global-to-local, align 4
  %v0_877c = load i32, i32* @r5, align 4
  %v5_877c = mul nuw nsw i32 %v3_8774, 4
  %v6_877c = add i32 %v5_877c, %v5_8770
  %v7_877c = inttoptr i32 %v6_877c to i32*
  store i32 %v0_877c, i32* %v7_877c, align 4
  %v0_8780 = load i32, i32* %r3.global-to-local, align 4
  %v1_8780 = load i32, i32* @r8, align 4
  %v2_8780 = add i32 %v1_8780, %v0_8780
  store i32 %v2_8780, i32* %r2.global-to-local, align 4
  %v0_8784 = load i32, i32* @r7, align 4
  store i32 %v0_8784, i32* %r1.global-to-local, align 4
  %v0_878c = load i32, i32* %ip.global-to-local, align 4
  %v1_878c = load i32, i32* @r6, align 4
  %v2_878c = inttoptr i32 %v1_878c to i32*
  store i32 %v0_878c, i32* %v2_878c, align 4
  %v0_8790 = load i32, i32* %r2.global-to-local, align 4
  %v1_8790 = trunc i32 %v0_8790 to i8
  %v2_8790 = load i32, i32* @r4, align 4
  %v3_8790 = inttoptr i32 %v2_8790 to i8*
  store i8 %v1_8790, i8* %v3_8790, align 1
  %v2_8794 = call i32 @function_129f8(i32 %v1_8780, i32 %v0_8784)
  %v2_8798 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_8798 = zext i8 %v2_8798 to i32
  store i32 ptrtoint (i32* @global_var_b388.37 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8794, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_87a8 = mul nuw nsw i32 %v3_8798, 4
  store i32 %v3_87a8, i32* %r1.global-to-local, align 4
  %v2_87ac = load i32, i32* @global_var_1d198.23, align 4
  %v2_87b0 = inttoptr i32 %v2_8794 to i32*
  store i32 ptrtoint (i32* @global_var_b388.37 to i32), i32* %v2_87b0, align 4
  %v3_87b4 = load i32, i32* @r5, align 4
  %v4_87b4 = add i32 %v3_87b4, 4
  %v5_87b4 = inttoptr i32 %v4_87b4 to i8*
  store i8 3, i8* %v5_87b4, align 1
  %v0_87b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_87b8 = add i32 %v0_87b8, 4
  store i32 %v1_87b8, i32* %r1.global-to-local, align 4
  %v5_87bc = call i32 @function_12b40(i32 %v2_87ac, i32 %v1_87b8, i32 ptrtoint (i32* @global_var_b388.37 to i32), i32 3)
  %v2_87c0 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_87c0 = zext i8 %v2_87c0 to i32
  store i32 %v3_87c0, i32* %r3.global-to-local, align 4
  store i32 %v5_87bc, i32* %ip.global-to-local, align 4
  %v0_87c8 = load i32, i32* @r5, align 4
  %v5_87c8 = mul nuw nsw i32 %v3_87c0, 4
  %v6_87c8 = add i32 %v5_87c8, %v5_87bc
  %v7_87c8 = inttoptr i32 %v6_87c8 to i32*
  store i32 %v0_87c8, i32* %v7_87c8, align 4
  %v0_87cc = load i32, i32* %r3.global-to-local, align 4
  %v1_87cc = load i32, i32* @r8, align 4
  %v2_87cc = add i32 %v1_87cc, %v0_87cc
  store i32 %v2_87cc, i32* %r2.global-to-local, align 4
  %v0_87d0 = load i32, i32* @r7, align 4
  store i32 %v0_87d0, i32* %r1.global-to-local, align 4
  %v0_87d8 = load i32, i32* %ip.global-to-local, align 4
  %v1_87d8 = load i32, i32* @r6, align 4
  %v2_87d8 = inttoptr i32 %v1_87d8 to i32*
  store i32 %v0_87d8, i32* %v2_87d8, align 4
  %v0_87dc = load i32, i32* %r2.global-to-local, align 4
  %v1_87dc = trunc i32 %v0_87dc to i8
  %v2_87dc = load i32, i32* @r4, align 4
  %v3_87dc = inttoptr i32 %v2_87dc to i8*
  store i8 %v1_87dc, i8* %v3_87dc, align 1
  %v2_87e0 = call i32 @function_129f8(i32 %v1_87cc, i32 %v0_87d0)
  %v2_87e4 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_87e4 = zext i8 %v2_87e4 to i32
  store i32 ptrtoint (i32* @global_var_ac14.39 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87e0, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_87f4 = mul nuw nsw i32 %v3_87e4, 4
  store i32 %v3_87f4, i32* %r1.global-to-local, align 4
  %v2_87f8 = load i32, i32* @global_var_1d198.23, align 4
  %v2_87fc = inttoptr i32 %v2_87e0 to i32*
  store i32 ptrtoint (i32* @global_var_ac14.39 to i32), i32* %v2_87fc, align 4
  %v3_8800 = load i32, i32* @r5, align 4
  %v4_8800 = add i32 %v3_8800, 4
  %v5_8800 = inttoptr i32 %v4_8800 to i8*
  store i8 4, i8* %v5_8800, align 1
  %v0_8804 = load i32, i32* %r1.global-to-local, align 4
  %v1_8804 = add i32 %v0_8804, 4
  store i32 %v1_8804, i32* %r1.global-to-local, align 4
  %v5_8808 = call i32 @function_12b40(i32 %v2_87f8, i32 %v1_8804, i32 ptrtoint (i32* @global_var_ac14.39 to i32), i32 4)
  %v2_880c = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_880c = zext i8 %v2_880c to i32
  store i32 %v3_880c, i32* %r3.global-to-local, align 4
  store i32 %v5_8808, i32* %ip.global-to-local, align 4
  %v0_8814 = load i32, i32* @r5, align 4
  %v5_8814 = mul nuw nsw i32 %v3_880c, 4
  %v6_8814 = add i32 %v5_8814, %v5_8808
  %v7_8814 = inttoptr i32 %v6_8814 to i32*
  store i32 %v0_8814, i32* %v7_8814, align 4
  %v0_8818 = load i32, i32* %r3.global-to-local, align 4
  %v1_8818 = load i32, i32* @r8, align 4
  %v2_8818 = add i32 %v1_8818, %v0_8818
  store i32 %v2_8818, i32* %r2.global-to-local, align 4
  %v0_881c = load i32, i32* @r7, align 4
  store i32 %v0_881c, i32* %r1.global-to-local, align 4
  %v0_8824 = load i32, i32* %ip.global-to-local, align 4
  %v1_8824 = load i32, i32* @r6, align 4
  %v2_8824 = inttoptr i32 %v1_8824 to i32*
  store i32 %v0_8824, i32* %v2_8824, align 4
  %v0_8828 = load i32, i32* %r2.global-to-local, align 4
  %v1_8828 = trunc i32 %v0_8828 to i8
  %v2_8828 = load i32, i32* @r4, align 4
  %v3_8828 = inttoptr i32 %v2_8828 to i8*
  store i8 %v1_8828, i8* %v3_8828, align 1
  %v2_882c = call i32 @function_129f8(i32 %v1_8818, i32 %v0_881c)
  %v2_8830 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_8830 = zext i8 %v2_8830 to i32
  store i32 ptrtoint (i32* @global_var_a3b4.41 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_882c, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_8840 = mul nuw nsw i32 %v3_8830, 4
  store i32 %v3_8840, i32* %r1.global-to-local, align 4
  %v2_8844 = load i32, i32* @global_var_1d198.23, align 4
  %v2_8848 = inttoptr i32 %v2_882c to i32*
  store i32 ptrtoint (i32* @global_var_a3b4.41 to i32), i32* %v2_8848, align 4
  %v3_884c = load i32, i32* @r5, align 4
  %v4_884c = add i32 %v3_884c, 4
  %v5_884c = inttoptr i32 %v4_884c to i8*
  store i8 5, i8* %v5_884c, align 1
  %v0_8850 = load i32, i32* %r1.global-to-local, align 4
  %v1_8850 = add i32 %v0_8850, 4
  store i32 %v1_8850, i32* %r1.global-to-local, align 4
  %v5_8854 = call i32 @function_12b40(i32 %v2_8844, i32 %v1_8850, i32 ptrtoint (i32* @global_var_a3b4.41 to i32), i32 5)
  %v2_8858 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_8858 = zext i8 %v2_8858 to i32
  store i32 %v3_8858, i32* %r3.global-to-local, align 4
  store i32 %v5_8854, i32* %ip.global-to-local, align 4
  %v0_8860 = load i32, i32* @r5, align 4
  %v5_8860 = mul nuw nsw i32 %v3_8858, 4
  %v6_8860 = add i32 %v5_8860, %v5_8854
  %v7_8860 = inttoptr i32 %v6_8860 to i32*
  store i32 %v0_8860, i32* %v7_8860, align 4
  %v0_8864 = load i32, i32* %r3.global-to-local, align 4
  %v1_8864 = load i32, i32* @r8, align 4
  %v2_8864 = add i32 %v1_8864, %v0_8864
  store i32 %v2_8864, i32* %r2.global-to-local, align 4
  %v0_8868 = load i32, i32* @r7, align 4
  store i32 %v0_8868, i32* %r1.global-to-local, align 4
  %v0_8870 = load i32, i32* %ip.global-to-local, align 4
  %v1_8870 = load i32, i32* @r6, align 4
  %v2_8870 = inttoptr i32 %v1_8870 to i32*
  store i32 %v0_8870, i32* %v2_8870, align 4
  %v0_8874 = load i32, i32* %r2.global-to-local, align 4
  %v1_8874 = trunc i32 %v0_8874 to i8
  %v2_8874 = load i32, i32* @r4, align 4
  %v3_8874 = inttoptr i32 %v2_8874 to i8*
  store i8 %v1_8874, i8* %v3_8874, align 1
  %v2_8878 = call i32 @function_129f8(i32 %v1_8864, i32 %v0_8868)
  %v2_887c = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_887c = zext i8 %v2_887c to i32
  store i32 39764, i32* %r2.global-to-local, align 4
  store i32 %v2_8878, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v3_888c = mul nuw nsw i32 %v3_887c, 4
  store i32 %v3_888c, i32* %r1.global-to-local, align 4
  %v2_8890 = load i32, i32* @global_var_1d198.23, align 4
  %v2_8894 = inttoptr i32 %v2_8878 to i32*
  store i32 39764, i32* %v2_8894, align 4
  %v3_8898 = load i32, i32* @r5, align 4
  %v4_8898 = add i32 %v3_8898, 4
  %v5_8898 = inttoptr i32 %v4_8898 to i8*
  store i8 10, i8* %v5_8898, align 1
  %v0_889c = load i32, i32* %r1.global-to-local, align 4
  %v1_889c = add i32 %v0_889c, 4
  store i32 %v1_889c, i32* %r1.global-to-local, align 4
  %v5_88a0 = call i32 @function_12b40(i32 %v2_8890, i32 %v1_889c, i32 39764, i32 10)
  %v2_88a4 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_88a4 = zext i8 %v2_88a4 to i32
  store i32 %v3_88a4, i32* %r3.global-to-local, align 4
  store i32 %v5_88a0, i32* %ip.global-to-local, align 4
  %v0_88ac = load i32, i32* @r5, align 4
  %v5_88ac = mul nuw nsw i32 %v3_88a4, 4
  %v6_88ac = add i32 %v5_88ac, %v5_88a0
  %v7_88ac = inttoptr i32 %v6_88ac to i32*
  store i32 %v0_88ac, i32* %v7_88ac, align 4
  %v0_88b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_88b0 = load i32, i32* @r8, align 4
  %v2_88b0 = add i32 %v1_88b0, %v0_88b0
  store i32 %v2_88b0, i32* %r2.global-to-local, align 4
  %v0_88b4 = load i32, i32* @r7, align 4
  store i32 %v0_88b4, i32* %r1.global-to-local, align 4
  %v0_88bc = load i32, i32* %ip.global-to-local, align 4
  %v1_88bc = load i32, i32* @r6, align 4
  %v2_88bc = inttoptr i32 %v1_88bc to i32*
  store i32 %v0_88bc, i32* %v2_88bc, align 4
  %v0_88c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_88c0 = trunc i32 %v0_88c0 to i8
  %v2_88c0 = load i32, i32* @r4, align 4
  %v3_88c0 = inttoptr i32 %v2_88c0 to i8*
  store i8 %v1_88c0, i8* %v3_88c0, align 1
  %v2_88c4 = call i32 @function_129f8(i32 %v1_88b0, i32 %v0_88b4)
  %v2_88c8 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_88c8 = zext i8 %v2_88c8 to i32
  store i32 ptrtoint (i32* @global_var_9154.44 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88c4, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_88d8 = mul nuw nsw i32 %v3_88c8, 4
  store i32 %v3_88d8, i32* %r1.global-to-local, align 4
  %v2_88dc = load i32, i32* @global_var_1d198.23, align 4
  %v2_88e0 = inttoptr i32 %v2_88c4 to i32*
  store i32 ptrtoint (i32* @global_var_9154.44 to i32), i32* %v2_88e0, align 4
  %v3_88e4 = load i32, i32* @r5, align 4
  %v4_88e4 = add i32 %v3_88e4, 4
  %v5_88e4 = inttoptr i32 %v4_88e4 to i8*
  store i8 6, i8* %v5_88e4, align 1
  %v0_88e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_88e8 = add i32 %v0_88e8, 4
  store i32 %v1_88e8, i32* %r1.global-to-local, align 4
  %v5_88ec = call i32 @function_12b40(i32 %v2_88dc, i32 %v1_88e8, i32 ptrtoint (i32* @global_var_9154.44 to i32), i32 6)
  %v2_88f0 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_88f0 = zext i8 %v2_88f0 to i32
  store i32 %v3_88f0, i32* %r3.global-to-local, align 4
  store i32 %v5_88ec, i32* %ip.global-to-local, align 4
  %v0_88f8 = load i32, i32* @r5, align 4
  %v5_88f8 = mul nuw nsw i32 %v3_88f0, 4
  %v6_88f8 = add i32 %v5_88f8, %v5_88ec
  %v7_88f8 = inttoptr i32 %v6_88f8 to i32*
  store i32 %v0_88f8, i32* %v7_88f8, align 4
  %v0_88fc = load i32, i32* %r3.global-to-local, align 4
  %v1_88fc = load i32, i32* @r8, align 4
  %v2_88fc = add i32 %v1_88fc, %v0_88fc
  store i32 %v2_88fc, i32* %r2.global-to-local, align 4
  %v0_8900 = load i32, i32* @r7, align 4
  store i32 %v0_8900, i32* %r1.global-to-local, align 4
  %v0_8908 = load i32, i32* %ip.global-to-local, align 4
  %v1_8908 = load i32, i32* @r6, align 4
  %v2_8908 = inttoptr i32 %v1_8908 to i32*
  store i32 %v0_8908, i32* %v2_8908, align 4
  %v0_890c = load i32, i32* %r2.global-to-local, align 4
  %v1_890c = trunc i32 %v0_890c to i8
  %v2_890c = load i32, i32* @r4, align 4
  %v3_890c = inttoptr i32 %v2_890c to i8*
  store i8 %v1_890c, i8* %v3_890c, align 1
  %v2_8910 = call i32 @function_129f8(i32 %v1_88fc, i32 %v0_8900)
  %v2_8914 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_8914 = zext i8 %v2_8914 to i32
  store i32 ptrtoint (i32* @global_var_89d8.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8910, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_8924 = mul nuw nsw i32 %v3_8914, 4
  store i32 %v3_8924, i32* %r1.global-to-local, align 4
  %v2_8928 = load i32, i32* @global_var_1d198.23, align 4
  %v2_892c = inttoptr i32 %v2_8910 to i32*
  store i32 ptrtoint (i32* @global_var_89d8.46 to i32), i32* %v2_892c, align 4
  %v3_8930 = load i32, i32* @r5, align 4
  %v4_8930 = add i32 %v3_8930, 4
  %v5_8930 = inttoptr i32 %v4_8930 to i8*
  store i8 7, i8* %v5_8930, align 1
  %v0_8934 = load i32, i32* %r1.global-to-local, align 4
  %v1_8934 = add i32 %v0_8934, 4
  store i32 %v1_8934, i32* %r1.global-to-local, align 4
  %v5_8938 = call i32 @function_12b40(i32 %v2_8928, i32 %v1_8934, i32 ptrtoint (i32* @global_var_89d8.46 to i32), i32 7)
  %v2_893c = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_893c = zext i8 %v2_893c to i32
  store i32 %v3_893c, i32* %r3.global-to-local, align 4
  store i32 %v5_8938, i32* %ip.global-to-local, align 4
  %v0_8944 = load i32, i32* @r5, align 4
  %v5_8944 = mul nuw nsw i32 %v3_893c, 4
  %v6_8944 = add i32 %v5_8944, %v5_8938
  %v7_8944 = inttoptr i32 %v6_8944 to i32*
  store i32 %v0_8944, i32* %v7_8944, align 4
  %v0_8948 = load i32, i32* %r3.global-to-local, align 4
  %v1_8948 = load i32, i32* @r8, align 4
  %v2_8948 = add i32 %v1_8948, %v0_8948
  store i32 %v2_8948, i32* %r2.global-to-local, align 4
  %v0_894c = load i32, i32* @r7, align 4
  store i32 %v0_894c, i32* %r1.global-to-local, align 4
  %v1_8954 = trunc i32 %v2_8948 to i8
  %v2_8954 = load i32, i32* @r4, align 4
  %v3_8954 = inttoptr i32 %v2_8954 to i8*
  store i8 %v1_8954, i8* %v3_8954, align 1
  %v0_8958 = load i32, i32* %ip.global-to-local, align 4
  %v1_8958 = load i32, i32* @r6, align 4
  %v2_8958 = inttoptr i32 %v1_8958 to i32*
  store i32 %v0_8958, i32* %v2_8958, align 4
  %v2_895c = call i32 @function_129f8(i32 %v1_8948, i32 %v0_894c)
  %v2_8960 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_8960 = zext i8 %v2_8960 to i32
  store i32 ptrtoint (i32* @global_var_9870.48 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_895c, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_8970 = mul nuw nsw i32 %v3_8960, 4
  store i32 %v3_8970, i32* %r1.global-to-local, align 4
  %v2_8974 = load i32, i32* @global_var_1d198.23, align 4
  %v2_8978 = inttoptr i32 %v2_895c to i32*
  store i32 ptrtoint (i32* @global_var_9870.48 to i32), i32* %v2_8978, align 4
  %v3_897c = load i32, i32* @r5, align 4
  %v4_897c = add i32 %v3_897c, 4
  %v5_897c = inttoptr i32 %v4_897c to i8*
  store i8 9, i8* %v5_897c, align 1
  %v0_8980 = load i32, i32* %r1.global-to-local, align 4
  %v1_8980 = add i32 %v0_8980, 4
  store i32 %v1_8980, i32* %r1.global-to-local, align 4
  %v5_8984 = call i32 @function_12b40(i32 %v2_8974, i32 %v1_8980, i32 ptrtoint (i32* @global_var_9870.48 to i32), i32 9)
  %v2_8988 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_8988 = zext i8 %v2_8988 to i32
  store i32 %v3_8988, i32* %r3.global-to-local, align 4
  %v1_898c = load i32, i32* @r6, align 4
  %v2_898c = inttoptr i32 %v1_898c to i32*
  store i32 %v5_8984, i32* %v2_898c, align 4
  %v0_8990 = load i32, i32* @r5, align 4
  %v2_8990 = load i32, i32* %r3.global-to-local, align 4
  %v5_8990 = mul i32 %v2_8990, 4
  %v6_8990 = add i32 %v5_8990, %v5_8984
  %v7_8990 = inttoptr i32 %v6_8990 to i32*
  store i32 %v0_8990, i32* %v7_8990, align 4
  %v0_8994 = load i32, i32* %r3.global-to-local, align 4
  %v1_8994 = load i32, i32* @r8, align 4
  %v2_8994 = add i32 %v1_8994, %v0_8994
  store i32 %v2_8994, i32* %r2.global-to-local, align 4
  %v1_899c = trunc i32 %v2_8994 to i8
  %v2_899c = load i32, i32* @r4, align 4
  %v3_899c = inttoptr i32 %v2_899c to i8*
  store i8 %v1_899c, i8* %v3_899c, align 1
  %v2_89a0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_89a0, i32* @r4, align 4
  store i32 %v6_8650, i32* @r5, align 4
  store i32 %v9_8650, i32* @r6, align 4
  store i32 %v12_8650, i32* @r7, align 4
  store i32 %v15_8650, i32* @r8, align 4
  ret i32 %v1_8994

; uselistorder directives
  uselistorder i32 %v1_8994, { 1, 0 }
  uselistorder i32 %v1_8948, { 1, 0 }
  uselistorder i32 %v1_88fc, { 1, 0 }
  uselistorder i32 %v1_88b0, { 1, 0 }
  uselistorder i32 %v1_8864, { 1, 0 }
  uselistorder i32 %v1_8818, { 1, 0 }
  uselistorder i32 %v1_87cc, { 1, 0 }
  uselistorder i32 %v1_8780, { 1, 0 }
  uselistorder i32 %v2_8730, { 0, 2, 1 }
  uselistorder i32 %v3_8728, { 1, 0, 2 }
  uselistorder i32 %v1_86e8, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0 }
  uselistorder i32* @global_var_1d198.23, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11 }
  uselistorder i8* bitcast (i8** @global_var_1d194.21 to i8*), { 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_89d8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_89d8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_89d8 = load i32, i32* @r4, align 4
  %v15_89d8 = load i32, i32* @r8, align 4
  %v21_89d8 = load i32, i32* @sl, align 4
  %v1_89dc = urem i32 %arg1, 256
  store i32 %v1_89dc, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_89dc, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_89f4 = urem i32 %arg3, 256
  store i32 %v1_89f4, i32* @r4, align 4
  %v2_89f8 = call i32 @function_129f8(i32 %v1_89dc, i32 4)
  %v0_89fc = load i32, i32* @r5, align 4
  store i32 %v0_89fc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8a0c = load i32, i32* @r4, align 4
  store i32 %v0_8a0c, i32* %r0.global-to-local, align 4
  %v5_8a10 = inttoptr i32 %v0_89fc to i32*
  %v6_8a10 = call i32 @function_85e0(i32 %v0_8a0c, i32* %v5_8a10, i32 2, i32 0, i32 %v2_89f8)
  %v1_8a1c = urem i32 %v6_8a10, 256
  store i32 %v1_8a1c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8a28 = load i32, i32* @r5, align 4
  store i32 %v0_8a28, i32* %r1.global-to-local, align 4
  %v0_8a2c = load i32, i32* @r4, align 4
  store i32 %v0_8a2c, i32* %r0.global-to-local, align 4
  %v5_8a30 = trunc i32 %v6_8a10 to i8
  %v6_8a34 = inttoptr i32 %v0_8a28 to i32*
  %v7_8a34 = call i32 @function_85e0(i32 %v0_8a2c, i32* %v6_8a34, i32 3, i32 65535, i32 %v6_8a10)
  %v0_8a38 = load i32, i32* @r5, align 4
  store i32 %v0_8a38, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_8a34, i32* @r7, align 4
  %v0_8a48 = load i32, i32* @r4, align 4
  store i32 %v0_8a48, i32* %r0.global-to-local, align 4
  %v5_8a4c = inttoptr i32 %v0_8a38 to i32*
  %v6_8a4c = call i32 @function_85e0(i32 %v0_8a48, i32* %v5_8a4c, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_8a54 = urem i32 %v6_8a4c, 256
  store i32 %v1_8a54, i32* %ip.global-to-local, align 4
  %v0_8a58 = load i32, i32* @r5, align 4
  store i32 %v0_8a58, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8a64 = load i32, i32* @r4, align 4
  store i32 %v0_8a64, i32* %r0.global-to-local, align 4
  %v5_8a68 = trunc i32 %v6_8a4c to i8
  %v6_8a6c = inttoptr i32 %v0_8a58 to i32*
  %v7_8a6c = call i32 @function_85e0(i32 %v0_8a64, i32* %v6_8a6c, i32 5, i32 1, i32 %v6_8a4c)
  %v1_8a78 = urem i32 %v7_8a6c, 256
  store i32 %v1_8a78, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8a84 = load i32, i32* @r5, align 4
  store i32 %v0_8a84, i32* %r1.global-to-local, align 4
  %v0_8a88 = load i32, i32* @r4, align 4
  store i32 %v0_8a88, i32* %r0.global-to-local, align 4
  %v5_8a90 = inttoptr i32 %v0_8a84 to i32*
  %v6_8a90 = call i32 @function_85e0(i32 %v0_8a88, i32* %v5_8a90, i32 6, i32 65535, i32 %v1_8a78)
  %v0_8a98 = load i32, i32* @r5, align 4
  store i32 %v0_8a98, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_8a90, i32* @sl, align 4
  %v0_8aa8 = load i32, i32* @r4, align 4
  store i32 %v0_8aa8, i32* %r0.global-to-local, align 4
  %v5_8aac = inttoptr i32 %v0_8a98 to i32*
  %v6_8aac = call i32 @function_85e0(i32 %v0_8aa8, i32* %v5_8aac, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_8ab0 = load i32, i32* @r5, align 4
  store i32 %v0_8ab0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_8aac, i32* @r8, align 4
  %v0_8ac0 = load i32, i32* @r4, align 4
  store i32 %v0_8ac0, i32* %r0.global-to-local, align 4
  %v5_8ac4 = inttoptr i32 %v0_8ab0 to i32*
  %v6_8ac4 = call i32 @function_85e0(i32 %v0_8ac0, i32* %v5_8ac4, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8ad4 = load i32, i32* @r5, align 4
  store i32 %v0_8ad4, i32* %r1.global-to-local, align 4
  %v0_8ad8 = load i32, i32* @r4, align 4
  store i32 %v0_8ad8, i32* %r0.global-to-local, align 4
  %v5_8adc = inttoptr i32 %v0_8ad4 to i32*
  %v6_8adc = call i32 @function_85e0(i32 %v0_8ad8, i32* %v5_8adc, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_8ae4 = urem i32 %v6_8adc, 256
  store i32 %v1_8ae4, i32* %ip.global-to-local, align 4
  %v0_8ae8 = load i32, i32* @r5, align 4
  store i32 %v0_8ae8, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8af4 = load i32, i32* @r4, align 4
  store i32 %v0_8af4, i32* %r0.global-to-local, align 4
  %v5_8afc = inttoptr i32 %v0_8ae8 to i32*
  %v6_8afc = call i32 @function_85e0(i32 %v0_8af4, i32* %v5_8afc, i32 19, i32 0, i32 %v1_8ae4)
  %v0_8b04 = load i32, i32* @r5, align 4
  store i32 %v0_8b04, i32* %r1.global-to-local, align 4
  %v2_8b08 = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_8b08, i32* %r3.global-to-local, align 4
  store i32 %v6_8afc, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_8b14 = load i32, i32* @r4, align 4
  store i32 %v0_8b14, i32* %r0.global-to-local, align 4
  %v5_8b18 = inttoptr i32 %v0_8b04 to i32*
  %v6_8b18 = call i32 @function_85e0(i32 %v0_8b14, i32* %v5_8b18, i32 25, i32 %v2_8b08, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_8b2c = call i32 @function_1270c(i32 2, i32 3, i32 6)
  store i32 %v3_8b2c, i32* %r0.global-to-local, align 4
  %v7_8b30 = icmp eq i32 %v3_8b2c, -1
  store i1 %v7_8b30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8b30, label %dec_label_pc_9014, label %dec_label_pc_8b3c

dec_label_pc_8b3c:                                ; preds = %dec_label_pc_89d8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_8b44 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_8b44, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_8b58 = call i32 @function_126dc(i32 %v3_8b2c, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_8b58, i32* %r0.global-to-local, align 4
  %v7_8b5c = icmp eq i32 %v6_8b58, -1
  store i1 %v7_8b5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8b5c, label %dec_label_pc_900c, label %dec_label_pc_8b64

dec_label_pc_8b64:                                ; preds = %dec_label_pc_8b3c
  %v0_8b64 = load i32, i32* @sl, align 4
  %v3_8b64 = mul i32 %v0_8b64, 65536
  store i32 %v3_8b64, i32* %sl.global-to-local, align 4
  %v0_8b68 = load i32, i32* @r8, align 4
  %v3_8b68 = mul i32 %v0_8b68, 65536
  store i32 %v3_8b68, i32* %r8.global-to-local, align 4
  %v0_8b70 = load i32, i32* @r7, align 4
  %v3_8b70 = mul i32 %v0_8b70, 65536
  %v0_8b74 = load i32, i32* @r6, align 4
  %v1_8b74 = urem i32 %v0_8b74, 256
  store i32 0, i32* %stack_var_-40, align 4
  %v3_8b7c = urem i32 %v0_8b70, 65536
  store i32 %v3_8b7c, i32* %r2.global-to-local, align 4
  %v3_8b80 = urem i32 %v0_8b64, 65536
  store i32 %v3_8b80, i32* %r3.global-to-local, align 4
  %v3_8b84 = urem i32 %v0_8b68, 65536
  store i32 %v3_8b84, i32* %r1.global-to-local, align 4
  %v0_8b88 = load i32, i32* @fp, align 4
  %v2_8b88 = icmp eq i32 %v0_8b88, 0
  store i1 %v2_8b88, i1* %cpsr_z.global-to-local, align 1
  %tmp88 = icmp slt i32 %v0_8b88, 1
  br i1 %tmp88, label %dec_label_pc_9134, label %dec_label_pc_8ba8

dec_label_pc_8ba8:                                ; preds = %dec_label_pc_8b64
  %v3_8bac = mul i32 %v6_8ac4, 65536
  %v0_8b70.not = or i32 %v0_8b70, -65536
  %v1_8bb4 = xor i32 %v0_8b70.not, 65535
  %v1_8bbc = add i32 %v3_8bac, 4325376
  %v1_8bc0 = urem i32 %v0_8b64, 256
  %v3_8bc8 = udiv i32 %v1_8bbc, 256
  %v1_8bcc = add i32 %v3_8bac, 524288
  %v1_8bd4 = add i32 %v3_8bac, 1835008
  %v1_8bd8 = urem i32 %v0_8b68, 256
  %v1_8bdc = and i32 %v3_8bc8, 65280
  store i32 %v1_8bdc, i32* %r0.global-to-local, align 4
  %v3_8be4 = udiv i32 %v1_8bd4, 256
  %tmp89 = mul nsw i32 %v1_8bb4, 256
  %v1_8bfc = and i32 %v3_8be4, 65280
  store i32 %v1_8bfc, i32* %ip.global-to-local, align 4
  %v1_8c00 = and i32 %tmp89, 65280
  store i32 %v1_8c00, i32* @lr, align 4
  %tmp91 = udiv i32 %v1_8bb4, 256
  %v4_8bec = sdiv i32 %v1_8bbc, 16777216
  %v5_8c1c = trunc i32 %tmp91 to i8
  %v3_8c28 = mul nuw nsw i32 %v1_8bc0, 256
  %v3_8c30 = ashr i32 %v1_8bbc, 31
  %v3_8c34 = mul nuw nsw i32 %v1_8bd8, 256
  store i32 %v3_8c34, i32* @r5, align 4
  %tmp92 = udiv i32 %v0_8b64, 256
  %v4_8c38 = urem i32 %tmp92, 256
  %v5_8c38 = or i32 %v4_8c38, %v3_8c28
  store i32 %v5_8c38, i32* @r7, align 4
  %v3_8c3c = udiv i32 %v1_8bcc, 256
  %tmp93 = udiv i32 %v0_8b68, 256
  %v4_8c40 = urem i32 %tmp93, 256
  %v5_8c40 = or i32 %v4_8c40, %v3_8c34
  store i32 %v5_8c40, i32* %sl.global-to-local, align 4
  %v5_8c44 = trunc i32 %v3_8c30 to i8
  %v3_8c4c = sdiv i32 %v3_8b70, 16777216
  %v7_8c4c = sdiv i32 %v1_8bd4, 16777216
  %v1_8c50 = and i32 %v3_8c3c, 65280
  store i32 %v1_8c50, i32* @r6, align 4
  %v3_8c54 = ashr i32 %v3_8b70, 31
  %v3_8c58 = ashr i32 %v1_8bd4, 31
  %v3_8c5c = udiv i32 %v1_8bb4, 65536
  %v4_8c60 = udiv i32 %v1_8bcc, 16777216
  %v5_8c60 = or i32 %v4_8c60, %v1_8c50
  store i32 %v5_8c60, i32* %r8.global-to-local, align 4
  store i32 %v1_8bc0, i32* %r1.global-to-local, align 4
  store i32 %v1_8bd8, i32* %r2.global-to-local, align 4
  %v3_8c7837 = udiv i32 %v1_8c50, 256
  store i32 %v3_8c7837, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v2_8dd8 = icmp eq i32 %v1_8b74, 0
  %sext16 = mul i32 %v0_8b64, 16777216
  %v4_8dec = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_8bcc, 256
  %v4_8e00 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_8b68, 16777216
  %v4_8e08 = sdiv i32 %sext18, 16777216
  %v1_8e10 = trunc i32 %v4_8e00 to i8
  br label %dec_label_pc_8c8c

dec_label_pc_8c8c:                                ; preds = %bb105, %dec_label_pc_8ba8
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_8c98 = call i32 @function_129f8(i32 1510, i32 4)
  store i32 %v2_8c98, i32* %r0.global-to-local, align 4
  store i32 %v2_89f8, i32* %r1.global-to-local, align 4
  %v3_8ca0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8ca0, i32* %r3.global-to-local, align 4
  %v2_8ca4 = load i32, i32* @r4, align 4
  %v5_8ca4 = mul i32 %v2_8ca4, 4
  %v6_8ca4 = add i32 %v5_8ca4, %v2_89f8
  %v7_8ca4 = inttoptr i32 %v6_8ca4 to i32*
  store i32 %v2_8c98, i32* %v7_8ca4, align 4
  %v0_8ca8 = load i32, i32* %r1.global-to-local, align 4
  %v1_8ca8 = load i32, i32* %r3.global-to-local, align 4
  %v4_8ca8 = mul i32 %v1_8ca8, 4
  %v5_8ca8 = add i32 %v4_8ca8, %v0_8ca8
  %v6_8ca8 = inttoptr i32 %v5_8ca8 to i32*
  %v7_8ca8 = load i32, i32* %v6_8ca8, align 4
  store i32 %v7_8ca8, i32* %r4.global-to-local, align 4
  %v1_8cac = inttoptr i32 %v7_8ca8 to i8*
  %v2_8cac = load i8, i8* %v1_8cac, align 1
  %tmp = urem i8 %v2_8cac, 16
  %v1_8cb0 = zext i8 %tmp to i32
  %v1_8cb4 = or i32 %v1_8cb0, 64
  store i32 %v1_8cb4, i32* %r2.global-to-local, align 4
  %v1_8cb8 = trunc i32 %v1_8cb4 to i8
  store i8 %v1_8cb8, i8* %v1_8cac, align 1
  %v0_8cbc = load i32, i32* %r4.global-to-local, align 4
  %v1_8cbc = inttoptr i32 %v0_8cbc to i8*
  %v2_8cbc = load i8, i8* %v1_8cbc, align 1
  %v1_8cc0 = and i8 %v2_8cbc, -16
  %v1_8cc4 = or i8 %v1_8cc0, 5
  store i32 %v1_8a78, i32* %r2.global-to-local, align 4
  store i8 %v1_8cc4, i8* %v1_8cbc, align 1
  %v2_8cd4 = load i32, i32* %r4.global-to-local, align 4
  %v3_8cd4 = add i32 %v2_8cd4, 1
  %v4_8cd4 = inttoptr i32 %v3_8cd4 to i8*
  store i8 %v5_8a30, i8* %v4_8cd4, align 1
  store i32 %v6_8a4c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_8ce0 = load i32, i32* %r4.global-to-local, align 4
  %v3_8ce0 = add i32 %v2_8ce0, 8
  %v4_8ce0 = inttoptr i32 %v3_8ce0 to i8*
  store i8 %v5_8a68, i8* %v4_8ce0, align 1
  %v0_8ce4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8ce4 = load i32, i32* %ip.global-to-local, align 4
  %v9_8ce4 = icmp eq i32 %v0_8ce4, %v1_8ce4
  store i1 %v9_8ce4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8c30, i32* %r3.global-to-local, align 4
  store i32 %v4_8bec, i32* %r2.global-to-local, align 4
  %v2_8cf0 = load i32, i32* %r4.global-to-local, align 4
  %v3_8cf0 = add i32 %v2_8cf0, 3
  %v4_8cf0 = inttoptr i32 %v3_8cf0 to i8*
  store i8 %v5_8c44, i8* %v4_8cf0, align 1
  %v0_8cf4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8cf4 = trunc i32 %v0_8cf4 to i8
  %v2_8cf4 = load i32, i32* %r4.global-to-local, align 4
  %v3_8cf4 = add i32 %v2_8cf4, 2
  %v4_8cf4 = inttoptr i32 %v3_8cf4 to i8*
  store i8 %v1_8cf4, i8* %v4_8cf4, align 1
  %v0_8cf8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8cf8, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_8c8c
  store i32 %v3_8c54, i32* %r2.global-to-local, align 4
  %extract.t114 = trunc i32 %v3_8c54 to i8
  br label %bb94

bb:                                               ; preds = %dec_label_pc_8c8c
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v3_8c54, i32* %r2.global-to-local, align 4
  %v3_8d00 = load i32, i32* %r4.global-to-local, align 4
  %v4_8d00 = add i32 %v3_8d00, 6
  %v5_8d00 = inttoptr i32 %v4_8d00 to i8*
  store i8 64, i8* %v5_8d00, align 1
  %v0_8d08.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t115 = trunc i32 %v0_8d08.pre to i8
  br label %bb94

bb94:                                             ; preds = %.thread, %bb
  %v3_8c54.sink.off0 = phi i8 [ %extract.t114, %.thread ], [ %extract.t115, %bb ]
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_8d08 = load i32, i32* %r4.global-to-local, align 4
  %v3_8d08 = add i32 %v2_8d08, 5
  %v4_8d08 = inttoptr i32 %v3_8d08 to i8*
  store i8 %v3_8c54.sink.off0, i8* %v4_8d08, align 1
  store i32 %v3_8c4c, i32* %r1.global-to-local, align 4
  %v0_8d10 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8d10, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_8d10 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_8d10, i32* %r2.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_8d14 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d14 = trunc i32 %v0_8d14 to i8
  %v2_8d14 = load i32, i32* %r4.global-to-local, align 4
  %v3_8d14 = add i32 %v2_8d14, 9
  %v4_8d14 = inttoptr i32 %v3_8d14 to i8*
  store i8 %v1_8d14, i8* %v4_8d14, align 1
  %v0_8d18 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8d18, label %bb98, label %bb97

bb97:                                             ; preds = %bb96
  %v1_8d18 = load i32, i32* %r2.global-to-local, align 4
  %v2_8d18 = trunc i32 %v1_8d18 to i8
  %v3_8d18 = load i32, i32* %r4.global-to-local, align 4
  %v4_8d18 = add i32 %v3_8d18, 7
  %v5_8d18 = inttoptr i32 %v4_8d18 to i8*
  store i8 %v2_8d18, i8* %v5_8d18, align 1
  br label %bb98

bb98:                                             ; preds = %bb96, %bb97
  %v3_8d1c = load i32, i32* %stack_var_-40, align 4
  %v5_8d24 = mul i32 %v3_8d1c, 24
  store i32 %v5_8d24, i32* %r3.global-to-local, align 4
  store i32 %v6_8b18, i32* %r2.global-to-local, align 4
  %v1_8d2c = load i32, i32* %r4.global-to-local, align 4
  %v2_8d2c = add i32 %v1_8d2c, 12
  %v3_8d2c = inttoptr i32 %v2_8d2c to i32*
  store i32 %v6_8b18, i32* %v3_8d2c, align 4
  %v0_8d30 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d30 = load i32, i32* @sb, align 4
  %v2_8d30 = add i32 %v1_8d30, %v0_8d30
  store i32 %v2_8d30, i32* %r3.global-to-local, align 4
  %v1_8d34 = add i32 %v2_8d30, 16
  %v2_8d34 = inttoptr i32 %v1_8d34 to i32*
  %v3_8d34 = load i32, i32* %v2_8d34, align 4
  store i32 %v3_8d34, i32* %r2.global-to-local, align 4
  %v0_8d38 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d38 = trunc i32 %v0_8d38 to i8
  %v2_8d38 = load i32, i32* %r4.global-to-local, align 4
  %v3_8d38 = add i32 %v2_8d38, 4
  %v4_8d38 = inttoptr i32 %v3_8d38 to i8*
  store i8 %v1_8d38, i8* %v4_8d38, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_8d40 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d40 = add i32 %v0_8d40, 20
  store i32 %v1_8d40, i32* %r1.global-to-local, align 4
  %v3_8d44 = add i32 %v0_8d40, 22
  %v4_8d44 = inttoptr i32 %v3_8d44 to i8*
  store i8 101, i8* %v4_8d44, align 1
  %v0_8d48 = load i32, i32* %r2.global-to-local, align 4
  %v1_8d48 = load i32, i32* %r4.global-to-local, align 4
  %v2_8d48 = add i32 %v1_8d48, 16
  %v3_8d48 = inttoptr i32 %v2_8d48 to i32*
  store i32 %v0_8d48, i32* %v3_8d48, align 4
  %v0_8d4c = load i32, i32* %r4.global-to-local, align 4
  %v1_8d4c = add i32 %v0_8d4c, 24
  store i32 %v1_8d4c, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_8d54 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d54 = add i32 %v0_8d54, -93
  store i32 %v1_8d54, i32* %r3.global-to-local, align 4
  %v2_8d58 = load i32, i32* %r1.global-to-local, align 4
  %v3_8d58 = add i32 %v2_8d58, 3
  %v4_8d58 = inttoptr i32 %v3_8d58 to i8*
  store i8 88, i8* %v4_8d58, align 1
  %v0_8d5c = load i32, i32* %r3.global-to-local, align 4
  %v1_8d5c = trunc i32 %v0_8d5c to i8
  %v2_8d5c = load i32, i32* %r0.global-to-local, align 4
  %v3_8d5c = add i32 %v2_8d5c, 12
  %v4_8d5c = inttoptr i32 %v3_8d5c to i8*
  store i8 %v1_8d5c, i8* %v4_8d5c, align 1
  %v0_8d60 = load i32, i32* %ip.global-to-local, align 4
  %v1_8d60 = trunc i32 %v0_8d60 to i8
  %v2_8d60 = load i32, i32* %r0.global-to-local, align 4
  %v3_8d60 = add i32 %v2_8d60, 13
  %v4_8d60 = inttoptr i32 %v3_8d60 to i8*
  store i8 %v1_8d60, i8* %v4_8d60, align 1
  %v0_8d64 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d64 = add i32 %v0_8d64, 38
  %v2_8d64 = inttoptr i32 %v1_8d64 to i8*
  %v3_8d64 = load i8, i8* %v2_8d64, align 1
  %tmp116 = urem i8 %v3_8d64, 16
  %v1_8d68 = zext i8 %tmp116 to i32
  %v1_8d6c = or i32 %v1_8d68, 64
  store i32 %v1_8d6c, i32* %r3.global-to-local, align 4
  %v1_8d70 = trunc i32 %v1_8d6c to i8
  store i8 %v1_8d70, i8* %v2_8d64, align 1
  %v0_8d74 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d74 = add i32 %v0_8d74, 38
  %v2_8d74 = inttoptr i32 %v1_8d74 to i8*
  %v3_8d74 = load i8, i8* %v2_8d74, align 1
  %v1_8d78 = and i8 %v3_8d74, -16
  %v1_8d7c = or i8 %v1_8d78, 5
  store i8 %v1_8d7c, i8* %v2_8d74, align 1
  %v0_8d88 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d88 = add i32 %v0_8d88, 38
  store i32 %v1_8d88, i32* @r5, align 4
  %v3_8d8c = add i32 %v0_8d88, 39
  %v4_8d8c = inttoptr i32 %v3_8d8c to i8*
  store i8 %v5_8a30, i8* %v4_8d8c, align 1
  store i32 %v7_8c4c, i32* %r1.global-to-local, align 4
  store i32 %tmp91, i32* %r3.global-to-local, align 4
  store i32 %v3_8c58, i32* %r2.global-to-local, align 4
  %v2_8d9c = load i32, i32* @r5, align 4
  %v3_8d9c = add i32 %v2_8d9c, 4
  %v4_8d9c = inttoptr i32 %v3_8d9c to i8*
  store i8 %v5_8c1c, i8* %v4_8d9c, align 1
  %v0_8da0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8da0 = trunc i32 %v0_8da0 to i8
  %v2_8da0 = load i32, i32* @r5, align 4
  %v3_8da0 = add i32 %v2_8da0, 2
  %v4_8da0 = inttoptr i32 %v3_8da0 to i8*
  store i8 %v1_8da0, i8* %v4_8da0, align 1
  %v0_8da4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8da4, label %bb100, label %bb99

bb99:                                             ; preds = %bb98
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb100

bb100:                                            ; preds = %bb98, %bb99
  store i32 %v3_8c5c, i32* %r1.global-to-local, align 4
  %v0_8dac = load i32, i32* %r2.global-to-local, align 4
  %v1_8dac = trunc i32 %v0_8dac to i8
  %v2_8dac = load i32, i32* @r5, align 4
  %v3_8dac = add i32 %v2_8dac, 3
  %v4_8dac = inttoptr i32 %v3_8dac to i8*
  store i8 %v1_8dac, i8* %v4_8dac, align 1
  store i32 %v6_8a4c, i32* %r2.global-to-local, align 4
  %v0_8db4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8db4, label %bb102, label %bb101

bb101:                                            ; preds = %bb100
  %v1_8db4 = load i32, i32* %r3.global-to-local, align 4
  %v2_8db4 = trunc i32 %v1_8db4 to i8
  %v3_8db4 = load i32, i32* @r5, align 4
  %v4_8db4 = add i32 %v3_8db4, 6
  %v5_8db4 = inttoptr i32 %v4_8db4 to i8*
  store i8 %v2_8db4, i8* %v5_8db4, align 1
  br label %bb102

bb102:                                            ; preds = %bb100, %bb101
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_8dbc = load i32, i32* %r1.global-to-local, align 4
  %v1_8dbc = trunc i32 %v0_8dbc to i8
  %v2_8dbc = load i32, i32* @r5, align 4
  %v3_8dbc = add i32 %v2_8dbc, 5
  %v4_8dbc = inttoptr i32 %v3_8dbc to i8*
  store i8 %v1_8dbc, i8* %v4_8dbc, align 1
  %v0_8dc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_8dc0 = trunc i32 %v0_8dc0 to i8
  %v2_8dc0 = load i32, i32* @r5, align 4
  %v3_8dc0 = add i32 %v2_8dc0, 8
  %v4_8dc0 = inttoptr i32 %v3_8dc0 to i8*
  store i8 %v1_8dc0, i8* %v4_8dc0, align 1
  %v0_8dc4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8dc4, label %bb104, label %bb103

bb103:                                            ; preds = %bb102
  %v1_8dc4 = load i32, i32* %ip.global-to-local, align 4
  %v2_8dc4 = trunc i32 %v1_8dc4 to i8
  %v3_8dc4 = load i32, i32* @r5, align 4
  %v4_8dc4 = add i32 %v3_8dc4, 7
  %v5_8dc4 = inttoptr i32 %v4_8dc4 to i8*
  store i8 %v2_8dc4, i8* %v5_8dc4, align 1
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v0_8dc8 = load i32, i32* %r3.global-to-local, align 4
  %v1_8dc8 = trunc i32 %v0_8dc8 to i8
  %v2_8dc8 = load i32, i32* @r5, align 4
  %v3_8dc8 = add i32 %v2_8dc8, 9
  %v4_8dc8 = inttoptr i32 %v3_8dc8 to i8*
  store i8 %v1_8dc8, i8* %v4_8dc8, align 1
  %v0_8dcc = call i32 @function_eb90()
  store i32 %v0_8dcc, i32* %r0.global-to-local, align 4
  store i32 %v1_8b74, i32* %r1.global-to-local, align 4
  store i1 %v2_8dd8, i1* %cpsr_z.global-to-local, align 1
  %v1_8ddc = sub i32 1023, %v0_8dcc
  store i32 %v1_8ddc, i32* %r3.global-to-local, align 4
  br i1 %v2_8dd8, label %.thread21, label %.thread22

.thread21:                                        ; preds = %bb104
  %v2_8de4 = load i32, i32* @r5, align 4
  %v3_8de4 = add i32 %v2_8de4, 16
  %v4_8de4 = inttoptr i32 %v3_8de4 to i32*
  store i32 %v1_8ddc, i32* %v4_8de4, align 4
  br label %bb105

.thread22:                                        ; preds = %bb104
  %v1_8de0 = load i32, i32* %r4.global-to-local, align 4
  %v2_8de0 = add i32 %v1_8de0, 16
  %v3_8de0 = inttoptr i32 %v2_8de0 to i32*
  %v4_8de0 = load i32, i32* %v3_8de0, align 4
  store i32 %v4_8de0, i32* %r3.global-to-local, align 4
  %v2_8de8 = load i32, i32* @r5, align 4
  %v3_8de8 = add i32 %v2_8de8, 16
  %v4_8de8 = inttoptr i32 %v3_8de8 to i32*
  store i32 %v4_8de0, i32* %v4_8de8, align 4
  br label %bb105

bb105:                                            ; preds = %.thread21, %.thread22
  store i32 %v4_8dec, i32* %r3.global-to-local, align 4
  %v0_8df0 = load i32, i32* %r4.global-to-local, align 4
  %v1_8df0 = add i32 %v0_8df0, 58
  store i32 %v1_8df0, i32* @r6, align 4
  %v1_8df4 = load i32, i32* @r5, align 4
  %v2_8df4 = add i32 %v1_8df4, 12
  %v3_8df4 = inttoptr i32 %v2_8df4 to i32*
  store i32 %v0_8dcc, i32* %v3_8df4, align 4
  %v0_8df8 = load i32, i32* %r3.global-to-local, align 4
  %v1_8df8 = trunc i32 %v0_8df8 to i8
  %v2_8df8 = load i32, i32* @r6, align 4
  %v3_8df8 = add i32 %v2_8df8, 1
  %v4_8df8 = inttoptr i32 %v3_8df8 to i8*
  store i8 %v1_8df8, i8* %v4_8df8, align 1
  %v3_8dfc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8dfc, i32* %r3.global-to-local, align 4
  store i32 %v4_8e00, i32* %r2.global-to-local, align 4
  %v1_8e04 = add i32 %v3_8dfc, 1
  store i32 %v1_8e04, i32* @r4, align 4
  store i32 %v4_8e08, i32* %r1.global-to-local, align 4
  %v1_8e0c = load i32, i32* @fp, align 4
  %v9_8e0c = icmp eq i32 %v1_8e04, %v1_8e0c
  store i1 %v9_8e0c, i1* %cpsr_z.global-to-local, align 1
  %v2_8e10 = load i32, i32* @r6, align 4
  %v3_8e10 = add i32 %v2_8e10, 5
  %v4_8e10 = inttoptr i32 %v3_8e10 to i8*
  store i8 %v1_8e10, i8* %v4_8e10, align 1
  %v0_8e14 = load i32, i32* @r7, align 4
  %v1_8e14 = trunc i32 %v0_8e14 to i8
  %v2_8e14 = load i32, i32* @r6, align 4
  %v3_8e14 = inttoptr i32 %v2_8e14 to i8*
  store i8 %v1_8e14, i8* %v3_8e14, align 1
  %v0_8e18 = load i32, i32* %sl.global-to-local, align 4
  %v1_8e18 = trunc i32 %v0_8e18 to i8
  %v2_8e18 = load i32, i32* @r6, align 4
  %v3_8e18 = add i32 %v2_8e18, 2
  %v4_8e18 = inttoptr i32 %v3_8e18 to i8*
  store i8 %v1_8e18, i8* %v4_8e18, align 1
  %v0_8e1c = load i32, i32* %r1.global-to-local, align 4
  %v1_8e1c = trunc i32 %v0_8e1c to i8
  %v2_8e1c = load i32, i32* @r6, align 4
  %v3_8e1c = add i32 %v2_8e1c, 3
  %v4_8e1c = inttoptr i32 %v3_8e1c to i8*
  store i8 %v1_8e1c, i8* %v4_8e1c, align 1
  %v0_8e20 = load i32, i32* %r8.global-to-local, align 4
  %v1_8e20 = trunc i32 %v0_8e20 to i8
  %v2_8e20 = load i32, i32* @r6, align 4
  %v3_8e20 = add i32 %v2_8e20, 4
  %v4_8e20 = inttoptr i32 %v3_8e20 to i8*
  store i8 %v1_8e20, i8* %v4_8e20, align 1
  %v0_8e24 = load i32, i32* @r4, align 4
  store i32 %v0_8e24, i32* %stack_var_-40, align 4
  %v5_8e28 = icmp slt i32 %v1_8e04, %v1_8e0c
  br i1 %v5_8e28, label %dec_label_pc_8c8c, label %dec_label_pc_8e2c

dec_label_pc_8e2c:                                ; preds = %bb105
  %v1_8e34 = add i32 %v6_8ac4, 8
  store i32 %v1_8e34, i32* %r2.global-to-local, align 4
  %v1_8e38 = add i32 %v6_8ac4, 66
  store i32 %v1_8e38, i32* %r3.global-to-local, align 4
  %v0_8e44.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_8e44.preheader

dec_label_pc_8e44.preheader:                      ; preds = %dec_label_pc_8e2c, %dec_label_pc_9134
  %v0_8e44.pre = phi i32 [ %v0_8e44.pre.pre, %dec_label_pc_8e2c ], [ %v0_8b88, %dec_label_pc_9134 ]
  %stack_var_-160.0.ph = phi i32 [ %v1_8e38, %dec_label_pc_8e2c ], [ %v1_9140, %dec_label_pc_9134 ]
  %stack_var_-156.0.ph = phi i32 [ %v1_8e34, %dec_label_pc_8e2c ], [ %v1_913c, %dec_label_pc_9134 ]
  %v3_9094 = icmp eq i32 %v3_8b7c, 65535
  %v2_9104 = icmp eq i32 %v1_8b74, 0
  %v2_8ee8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_8f00 = ptrtoint i32* %stack_var_-48 to i32
  %v2_8f10 = ptrtoint i32* %stack_var_-52 to i32
  %v2_8f1c = ptrtoint i32* %stack_var_-50 to i32
  %v2_8f30 = icmp eq i32 %v1_8ae4, 0
  %v2_8e8c = icmp eq i32 %v6_8b18, -1
  %v7_8e8c = icmp eq i32 %v6_8b18, -1
  br label %dec_label_pc_8e44

dec_label_pc_8e44:                                ; preds = %dec_label_pc_8f38, %dec_label_pc_8e44.preheader
  %v0_8e44 = phi i32 [ %v0_8e44.pre, %dec_label_pc_8e44.preheader ], [ %v1_8ffc, %dec_label_pc_8f38 ]
  %v2_8e44 = icmp eq i32 %v0_8e44, 0
  store i1 %v2_8e44, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp106 = icmp slt i32 %v0_8e44, 1
  br label %dec_label_pc_8e4c

dec_label_pc_8e4c:                                ; preds = %dec_label_pc_8e4c, %dec_label_pc_8e44
  br i1 %tmp106, label %dec_label_pc_8e4c, label %dec_label_pc_8e50

dec_label_pc_8e50:                                ; preds = %dec_label_pc_8e4c
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_8e5c

dec_label_pc_8e5c:                                ; preds = %dec_label_pc_8f38, %dec_label_pc_8e50
  %v1_8e70 = phi i32 [ %v1_8ff8, %dec_label_pc_8f38 ], [ 0, %dec_label_pc_8e50 ]
  %v5_8e60 = mul i32 %v1_8e70, 24
  %v1_8e64 = load i32, i32* @sb, align 4
  %v2_8e64 = add i32 %v1_8e64, %v5_8e60
  store i32 %v2_8e64, i32* %r3.global-to-local, align 4
  store i32 %v2_89f8, i32* %r1.global-to-local, align 4
  %v1_8e6c = add i32 %v2_8e64, 20
  %v2_8e6c = inttoptr i32 %v1_8e6c to i8*
  %v3_8e6c = load i8, i8* %v2_8e6c, align 1
  %v4_8e6c = zext i8 %v3_8e6c to i32
  store i32 %v4_8e6c, i32* %r2.global-to-local, align 4
  %v4_8e70 = mul i32 %v1_8e70, 4
  %v5_8e70 = add i32 %v4_8e70, %v2_89f8
  %v6_8e70 = inttoptr i32 %v5_8e70 to i32*
  %v7_8e70 = load i32, i32* %v6_8e70, align 4
  store i32 %v7_8e70, i32* @r5, align 4
  %v7_8e74 = icmp eq i8 %v3_8e6c, 31
  store i1 %v7_8e74, i1* %cpsr_z.global-to-local, align 1
  %v1_8e78 = add i32 %v7_8e70, 24
  store i32 %v1_8e78, i32* @r8, align 4
  %v1_8e7c = add i32 %v7_8e70, 38
  store i32 %v1_8e7c, i32* @r6, align 4
  %v1_8e80 = add i32 %v7_8e70, 58
  store i32 %v1_8e80, i32* @r7, align 4
  %tmp117 = icmp ult i8 %v3_8e6c, 32
  br i1 %tmp117, label %dec_label_pc_901c, label %dec_label_pc_8e88

dec_label_pc_8e88:                                ; preds = %dec_label_pc_8e5c
  store i32 %v6_8b18, i32* %r2.global-to-local, align 4
  store i1 %v7_8e8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e8c, label %dec_label_pc_9084, label %dec_label_pc_8e94

dec_label_pc_8e94:                                ; preds = %dec_label_pc_901c, %dec_label_pc_8e88
  store i32 %v3_8b7c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9094, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9094, label %dec_label_pc_90a0, label %dec_label_pc_8ea8

dec_label_pc_8ea8:                                ; preds = %dec_label_pc_9084.dec_label_pc_8ea8_crit_edge, %dec_label_pc_8e94
  %v1_8eac = phi i32 [ %v1_8eac.pre, %dec_label_pc_9084.dec_label_pc_8ea8_crit_edge ], [ 65535, %dec_label_pc_8e94 ]
  store i32 %v3_8b80, i32* %r1.global-to-local, align 4
  %v9_8eac = icmp eq i32 %v3_8b80, %v1_8eac
  store i1 %v9_8eac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8eac, label %dec_label_pc_90d8, label %dec_label_pc_8eb4

dec_label_pc_8eb4:                                ; preds = %dec_label_pc_90a0.dec_label_pc_8eb4_crit_edge, %dec_label_pc_8ea8
  %v1_8eb8 = phi i32 [ %v1_8eb8.pre, %dec_label_pc_90a0.dec_label_pc_8eb4_crit_edge ], [ %v1_8eac, %dec_label_pc_8ea8 ]
  store i32 %v3_8b84, i32* %r2.global-to-local, align 4
  %v9_8eb8 = icmp eq i32 %v3_8b84, %v1_8eb8
  store i1 %v9_8eb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8eb8, label %dec_label_pc_90f4, label %dec_label_pc_8ec0

dec_label_pc_8ec0:                                ; preds = %dec_label_pc_90d8, %dec_label_pc_8eb4
  store i32 %v1_8b74, i32* %r3.global-to-local, align 4
  store i1 %v2_9104, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9104, label %dec_label_pc_9118, label %.thread23

.thread23:                                        ; preds = %dec_label_pc_8ec0
  %v1_8ec8 = load i32, i32* @r5, align 4
  %v2_8ec8 = add i32 %v1_8ec8, 16
  %v3_8ec8 = inttoptr i32 %v2_8ec8 to i32*
  %v4_8ec8 = load i32, i32* %v3_8ec8, align 4
  store i32 %v4_8ec8, i32* %r3.global-to-local, align 4
  %v2_8ecc = load i32, i32* @r6, align 4
  %v3_8ecc = add i32 %v2_8ecc, 16
  %v4_8ecc = inttoptr i32 %v3_8ecc to i32*
  store i32 %v4_8ec8, i32* %v4_8ecc, align 4
  br label %dec_label_pc_8ed4

dec_label_pc_8ed4:                                ; preds = %bb109, %.thread23, %dec_label_pc_9118
  %v0_8ed4 = call i32 @function_eb90()
  store i32 %v0_8ed4, i32* %r0.global-to-local, align 4
  store i32 %v0_8ed4, i32* %stack_var_-44, align 4
  %v0_8edc = call i32 @function_eb90()
  store i32 %v0_8edc, i32* %r0.global-to-local, align 4
  store i32 %v0_8edc, i32* %stack_var_-48, align 4
  %v0_8ee4 = call i32 @function_eb90()
  store i32 %v2_8ee8, i32* %r1.global-to-local, align 4
  store i32 %v0_8ee4, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_8ef4 = load i32, i32* @r8, align 4
  store i32 %v0_8ef4, i32* %r0.global-to-local, align 4
  %v3_8ef8 = call i32 @function_11574(i32 %v0_8ef4, i32 %v2_8ee8, i32 4)
  %v0_8efc = load i32, i32* @r8, align 4
  %v1_8efc = add i32 %v0_8efc, 6
  store i32 %v1_8efc, i32* %r0.global-to-local, align 4
  store i32 %v2_8f00, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_8f08 = call i32 @function_11574(i32 %v1_8efc, i32 %v2_8f00, i32 4)
  %v0_8f0c = load i32, i32* @r8, align 4
  %v1_8f0c = add i32 %v0_8f0c, 4
  store i32 %v1_8f0c, i32* %r0.global-to-local, align 4
  store i32 %v2_8f10, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8f18 = call i32 @function_11574(i32 %v1_8f0c, i32 %v2_8f10, i32 2)
  store i32 %v2_8f1c, i32* %r1.global-to-local, align 4
  %v0_8f20 = load i32, i32* @r8, align 4
  %v1_8f20 = add i32 %v0_8f20, 10
  store i32 %v1_8f20, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8f28 = call i32 @function_11574(i32 %v1_8f20, i32 %v2_8f1c, i32 2)
  store i32 %v3_8f28, i32* %r0.global-to-local, align 4
  store i32 %v1_8ae4, i32* %r1.global-to-local, align 4
  store i1 %v2_8f30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f30, label %dec_label_pc_8f38, label %dec_label_pc_9124

dec_label_pc_8f38:                                ; preds = %dec_label_pc_8ed4, %dec_label_pc_9124
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8f3c = load i32, i32* @sl, align 4
  %v1_8f3c = trunc i32 %v0_8f3c to i8
  %v2_8f3c = load i32, i32* @r5, align 4
  %v3_8f3c = add i32 %v2_8f3c, 10
  %v4_8f3c = inttoptr i32 %v3_8f3c to i8*
  store i8 %v1_8f3c, i8* %v4_8f3c, align 1
  %v0_8f40 = load i32, i32* @sl, align 4
  %v1_8f40 = trunc i32 %v0_8f40 to i8
  %v2_8f40 = load i32, i32* @r5, align 4
  %v3_8f40 = add i32 %v2_8f40, 11
  %v4_8f40 = inttoptr i32 %v3_8f40 to i8*
  store i8 %v1_8f40, i8* %v4_8f40, align 1
  %v0_8f44 = load i32, i32* @r5, align 4
  store i32 %v0_8f44, i32* @r0, align 4
  %v2_8f48 = call i32 @function_d0b8(i32 %v0_8f44, i32 20)
  %v3_8f48 = trunc i32 %v2_8f48 to i8
  %v4_8f4c = sdiv i32 %v2_8f48, 256
  store i32 %v4_8f4c, i32* %r3.global-to-local, align 4
  %v1_8f50 = trunc i32 %v4_8f4c to i8
  %v2_8f50 = load i32, i32* @r5, align 4
  %v3_8f50 = add i32 %v2_8f50, 11
  %v4_8f50 = inttoptr i32 %v3_8f50 to i8*
  store i8 %v1_8f50, i8* %v4_8f50, align 1
  %v3_8f54 = load i32, i32* @r5, align 4
  %v4_8f54 = add i32 %v3_8f54, 10
  %v5_8f54 = inttoptr i32 %v4_8f54 to i8*
  store i8 %v3_8f48, i8* %v5_8f54, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8f5c = load i32, i32* @sl, align 4
  %v1_8f5c = trunc i32 %v0_8f5c to i8
  %v2_8f5c = load i32, i32* @r6, align 4
  %v3_8f5c = add i32 %v2_8f5c, 10
  %v4_8f5c = inttoptr i32 %v3_8f5c to i8*
  store i8 %v1_8f5c, i8* %v4_8f5c, align 1
  %v0_8f60 = load i32, i32* @sl, align 4
  %v1_8f60 = trunc i32 %v0_8f60 to i8
  %v2_8f60 = load i32, i32* @r6, align 4
  %v3_8f60 = add i32 %v2_8f60, 11
  %v4_8f60 = inttoptr i32 %v3_8f60 to i8*
  store i8 %v1_8f60, i8* %v4_8f60, align 1
  %v0_8f64 = load i32, i32* @r6, align 4
  store i32 %v0_8f64, i32* @r0, align 4
  %v2_8f68 = call i32 @function_d0b8(i32 %v0_8f64, i32 20)
  %v3_8f68 = trunc i32 %v2_8f68 to i8
  store i32 %v2_8f68, i32* %r0.global-to-local, align 4
  %v4_8f6c = sdiv i32 %v2_8f68, 256
  store i32 %v4_8f6c, i32* %r3.global-to-local, align 4
  %v3_8f70 = load i32, i32* @r6, align 4
  %v4_8f70 = add i32 %v3_8f70, 10
  %v5_8f70 = inttoptr i32 %v4_8f70 to i8*
  store i8 %v3_8f68, i8* %v5_8f70, align 1
  %v0_8f74 = load i32, i32* %r3.global-to-local, align 4
  %v1_8f74 = trunc i32 %v0_8f74 to i8
  %v2_8f74 = load i32, i32* @r6, align 4
  %v3_8f74 = add i32 %v2_8f74, 11
  %v4_8f74 = inttoptr i32 %v3_8f74 to i8*
  store i8 %v1_8f74, i8* %v4_8f74, align 1
  %v0_8f78 = load i32, i32* @r7, align 4
  %v1_8f78 = add i32 %v0_8f78, 4
  %v2_8f78 = inttoptr i32 %v1_8f78 to i8*
  %v3_8f78 = load i8, i8* %v2_8f78, align 1
  %v4_8f78 = zext i8 %v3_8f78 to i32
  store i32 %v4_8f78, i32* %r3.global-to-local, align 4
  %v1_8f7c = add i32 %v0_8f78, 5
  %v2_8f7c = inttoptr i32 %v1_8f7c to i8*
  %v3_8f7c = load i8, i8* %v2_8f7c, align 1
  %v4_8f7c = zext i8 %v3_8f7c to i32
  store i32 %v0_8f78, i32* @r1, align 4
  %v4_8f84 = mul nuw nsw i32 %v4_8f7c, 256
  %v5_8f84 = or i32 %v4_8f84, %v4_8f78
  store i32 %v5_8f84, i32* %r2.global-to-local, align 4
  %v0_8f88 = load i32, i32* @sl, align 4
  %v1_8f88 = trunc i32 %v0_8f88 to i8
  %v3_8f88 = add i32 %v0_8f78, 6
  %v4_8f88 = inttoptr i32 %v3_8f88 to i8*
  store i8 %v1_8f88, i8* %v4_8f88, align 1
  store i32 %stack_var_-156.0.ph, i32* %r3.global-to-local, align 4
  %v0_8f90 = load i32, i32* @sl, align 4
  %v1_8f90 = trunc i32 %v0_8f90 to i8
  %v2_8f90 = load i32, i32* @r7, align 4
  %v3_8f90 = add i32 %v2_8f90, 7
  %v4_8f90 = inttoptr i32 %v3_8f90 to i8*
  store i8 %v1_8f90, i8* %v4_8f90, align 1
  %v0_8f94 = load i32, i32* @r6, align 4
  store i32 %v0_8f94, i32* %r0.global-to-local, align 4
  %v4_8f98 = call i32 @function_d114(i32 %v0_8f94, i32 %v0_8f78, i32 %v5_8f84, i32 %stack_var_-156.0.ph)
  %v5_8f98 = trunc i32 %v4_8f98 to i8
  store i32 %v4_8f98, i32* %r0.global-to-local, align 4
  %v3_8f9c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8f9c, i32* %r3.global-to-local, align 4
  %v3_8fa0 = mul i32 %v3_8f9c, 32
  store i32 %v3_8fa0, i32* %r2.global-to-local, align 4
  %v0_8fa4 = load i32, i32* @r5, align 4
  %v1_8fa4 = add i32 %v0_8fa4, 16
  %v2_8fa4 = inttoptr i32 %v1_8fa4 to i32*
  %v3_8fa4 = load i32, i32* %v2_8fa4, align 4
  store i32 %v3_8fa4, i32* %r1.global-to-local, align 4
  %v5_8fa8 = mul i32 %v3_8f9c, 24
  store i32 %v5_8fa8, i32* %r2.global-to-local, align 4
  %v4_8fac42 = udiv i32 %v4_8f98, 256
  %v1_8fb0 = trunc i32 %v4_8fac42 to i8
  %v2_8fb0 = load i32, i32* @r7, align 4
  %v3_8fb0 = add i32 %v2_8fb0, 7
  %v4_8fb0 = inttoptr i32 %v3_8fb0 to i8*
  store i8 %v1_8fb0, i8* %v4_8fb0, align 1
  %v0_8fb4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8fb4 = load i32, i32* @sb, align 4
  %v2_8fb4 = add i32 %v1_8fb4, %v0_8fb4
  store i32 %v2_8fb4, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_8fbc = load i32, i32* @r7, align 4
  %v4_8fbc = add i32 %v3_8fbc, 6
  %v5_8fbc = inttoptr i32 %v4_8fbc to i8*
  store i8 %v5_8f98, i8* %v5_8fbc, align 1
  %v0_8fc0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8fc0 = load i32, i32* %lr.global-to-local, align 4
  %v2_8fc0 = add i32 %v1_8fc0, 4
  %v3_8fc0 = inttoptr i32 %v2_8fc0 to i32*
  store i32 %v0_8fc0, i32* %v3_8fc0, align 4
  %v0_8fc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_8fc4 = trunc i32 %v0_8fc4 to i8
  %v2_8fc4 = load i32, i32* %r2.global-to-local, align 4
  %v3_8fc4 = load i32, i32* @sb, align 4
  %v4_8fc4 = add i32 %v3_8fc4, %v2_8fc4
  %v5_8fc4 = inttoptr i32 %v4_8fc4 to i8*
  store i8 %v1_8fc4, i8* %v5_8fc4, align 1
  %v0_8fc8 = load i32, i32* @sl, align 4
  %v1_8fc8 = trunc i32 %v0_8fc8 to i8
  %v2_8fc8 = load i32, i32* %lr.global-to-local, align 4
  %v3_8fc8 = add i32 %v2_8fc8, 2
  %v4_8fc8 = inttoptr i32 %v3_8fc8 to i8*
  store i8 %v1_8fc8, i8* %v4_8fc8, align 1
  %v0_8fcc = load i32, i32* @sl, align 4
  %v1_8fcc = trunc i32 %v0_8fcc to i8
  %v2_8fcc = load i32, i32* %lr.global-to-local, align 4
  %v3_8fcc = add i32 %v2_8fcc, 1
  %v4_8fcc = inttoptr i32 %v3_8fcc to i8*
  store i8 %v1_8fcc, i8* %v4_8fcc, align 1
  %v0_8fd0 = load i32, i32* @sl, align 4
  %v1_8fd0 = trunc i32 %v0_8fd0 to i8
  %v2_8fd0 = load i32, i32* %lr.global-to-local, align 4
  %v3_8fd0 = add i32 %v2_8fd0, 3
  %v4_8fd0 = inttoptr i32 %v3_8fd0 to i8*
  store i8 %v1_8fd0, i8* %v4_8fd0, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_8fdc = load i32, i32* @r5, align 4
  store i32 %v0_8fdc, i32* %r1.global-to-local, align 4
  store i32 %v3_8b2c, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-160.0.ph, i32* %r2.global-to-local, align 4
  %v0_8fe8 = load i32, i32* %lr.global-to-local, align 4
  %v6_8ff0 = inttoptr i32 %v0_8fdc to i32*
  %v7_8ff0 = call i32 @function_126a8(i32 %v3_8b2c, i32* %v6_8ff0, i32 %stack_var_-160.0.ph, i32 16384, i32 %v0_8fe8, i32 16)
  %v3_8ff4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8ff4, i32* %r3.global-to-local, align 4
  %v1_8ff8 = add i32 %v3_8ff4, 1
  store i32 %v1_8ff8, i32* %r0.global-to-local, align 4
  %v1_8ffc = load i32, i32* @fp, align 4
  %v9_8ffc = icmp eq i32 %v1_8ff8, %v1_8ffc
  store i1 %v9_8ffc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8ff8, i32* %stack_var_-40, align 4
  %v6_9004 = icmp slt i32 %v1_8ff8, %v1_8ffc
  br i1 %v6_9004, label %dec_label_pc_8e5c, label %dec_label_pc_8e44

dec_label_pc_900c:                                ; preds = %dec_label_pc_8b3c
  store i32 %v3_8b2c, i32* %r0.global-to-local, align 4
  %v1_9010 = call i32 @function_11dfc(i32 %v3_8b2c)
  store i32 %v1_9010, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9014

dec_label_pc_9014:                                ; preds = %dec_label_pc_89d8, %dec_label_pc_900c
  %v29_9018 = phi i32 [ %v3_8b2c, %dec_label_pc_89d8 ], [ %v1_9010, %dec_label_pc_900c ]
  store i32 %v3_89d8, i32* %r4.global-to-local, align 4
  store i32 %v15_89d8, i32* %r8.global-to-local, align 4
  store i32 %v21_89d8, i32* %sl.global-to-local, align 4
  ret i32 %v29_9018

dec_label_pc_901c:                                ; preds = %dec_label_pc_8e5c
  %v1_901c = add i32 %v2_8e64, 16
  %v2_901c = inttoptr i32 %v1_901c to i32*
  %v3_901c = load i32, i32* %v2_901c, align 4
  store i32 %v3_901c, i32* %r4.global-to-local, align 4
  %v0_9020 = call i32 @function_eb90()
  store i32 %v0_9020, i32* %r0.global-to-local, align 4
  %v3_9024 = load i32, i32* %stack_var_-40, align 4
  %v5_902c = mul i32 %v3_9024, 24
  %v0_9030 = load i32, i32* %r4.global-to-local, align 4
  %v1_9034 = load i32, i32* @sb, align 4
  %v2_9034 = add i32 %v1_9034, %v5_902c
  store i32 %v2_9034, i32* %r1.global-to-local, align 4
  %v1_9038 = and i32 %v0_9030, 65280
  store i32 %v1_9038, i32* %r3.global-to-local, align 4
  %v1_9030 = udiv i32 %v0_9030, 256
  %v3_903c = and i32 %v1_9030, 65280
  store i32 %v3_903c, i32* %r2.global-to-local, align 4
  %v3_9040 = mul i32 %v0_9030, 16777216
  store i32 %v3_9040, i32* %ip.global-to-local, align 4
  %v1_9044 = add i32 %v2_9034, 20
  %v2_9044 = inttoptr i32 %v1_9044 to i8*
  %v3_9044 = load i8, i8* %v2_9044, align 1
  %v4_9044 = zext i8 %v3_9044 to i32
  store i32 %v4_9044, i32* %lr.global-to-local, align 4
  %v4_9048 = mul nuw nsw i32 %v1_9038, 256
  %v5_9048 = or i32 %v4_9048, %v3_9040
  store i32 %v5_9048, i32* %ip.global-to-local, align 4
  %v2_9050 = call i32 @llvm.bswap.i32(i32 %v0_9030)
  %v7_9054 = lshr i32 %v0_9020, %v4_9044
  %v8_9054 = add i32 %v7_9054, %v2_9050
  %v3_9060 = mul i32 %v8_9054, 16777216
  %v1_9064 = and i32 %v8_9054, 65280
  store i32 %v1_9064, i32* %r0.global-to-local, align 4
  store i32 %v6_8b18, i32* %r2.global-to-local, align 4
  %v4_9070 = mul nuw nsw i32 %v1_9064, 256
  %v5_9070 = or i32 %v4_9070, %v3_9060
  store i32 %v5_9070, i32* %r1.global-to-local, align 4
  %v2_9074 = call i32 @llvm.bswap.i32(i32 %v8_9054)
  store i32 %v2_9074, i32* %r3.global-to-local, align 4
  store i1 %v7_8e8c, i1* %cpsr_z.global-to-local, align 1
  %v1_907c = load i32, i32* @r5, align 4
  %v2_907c = add i32 %v1_907c, 16
  %v3_907c = inttoptr i32 %v2_907c to i32*
  store i32 %v2_9074, i32* %v3_907c, align 4
  br i1 %v2_8e8c, label %dec_label_pc_9084, label %dec_label_pc_8e94

dec_label_pc_9084:                                ; preds = %dec_label_pc_901c, %dec_label_pc_8e88
  %v0_9084 = call i32 @function_eb90()
  store i32 %v0_9084, i32* %r0.global-to-local, align 4
  store i32 %v3_8b7c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9094, i1* %cpsr_z.global-to-local, align 1
  %v1_9098 = load i32, i32* @r5, align 4
  %v2_9098 = add i32 %v1_9098, 12
  %v3_9098 = inttoptr i32 %v2_9098 to i32*
  store i32 %v0_9084, i32* %v3_9098, align 4
  br i1 %v3_9094, label %dec_label_pc_90a0, label %dec_label_pc_9084.dec_label_pc_8ea8_crit_edge

dec_label_pc_9084.dec_label_pc_8ea8_crit_edge:    ; preds = %dec_label_pc_9084
  %v1_8eac.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8ea8

dec_label_pc_90a0:                                ; preds = %dec_label_pc_9084, %dec_label_pc_8e94
  %v0_90a0 = call i32 @function_eb90()
  %v3_90a8 = urem i32 %v0_90a0, 65536
  store i32 %v3_90a8, i32* %r0.global-to-local, align 4
  %v1_90b0 = sub nsw i32 999, %v3_90a8
  store i32 %v1_90b0, i32* %r2.global-to-local, align 4
  %v3_90b4 = sdiv i32 %v1_90b0, 256
  store i32 %v3_90b4, i32* %r1.global-to-local, align 4
  %v3_90b839 = udiv i32 %v3_90a8, 256
  store i32 %v3_90b839, i32* %r3.global-to-local, align 4
  %v1_90bc = trunc i32 %v3_90b839 to i8
  %v2_90bc = load i32, i32* @r5, align 4
  %v3_90bc = add i32 %v2_90bc, 5
  %v4_90bc = inttoptr i32 %v3_90bc to i8*
  store i8 %v1_90bc, i8* %v4_90bc, align 1
  %v0_90c0 = load i32, i32* %r0.global-to-local, align 4
  %v1_90c0 = trunc i32 %v0_90c0 to i8
  %v2_90c0 = load i32, i32* @r5, align 4
  %v3_90c0 = add i32 %v2_90c0, 4
  %v4_90c0 = inttoptr i32 %v3_90c0 to i8*
  store i8 %v1_90c0, i8* %v4_90c0, align 1
  %v0_90c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_90c4 = trunc i32 %v0_90c4 to i8
  %v2_90c4 = load i32, i32* @r6, align 4
  %v3_90c4 = add i32 %v2_90c4, 5
  %v4_90c4 = inttoptr i32 %v3_90c4 to i8*
  store i8 %v1_90c4, i8* %v4_90c4, align 1
  store i32 %v3_8b80, i32* %r1.global-to-local, align 4
  %v1_90cc = load i32, i32* @r4, align 4
  %v9_90cc = icmp eq i32 %v3_8b80, %v1_90cc
  store i1 %v9_90cc, i1* %cpsr_z.global-to-local, align 1
  %v0_90d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_90d0 = trunc i32 %v0_90d0 to i8
  %v2_90d0 = load i32, i32* @r6, align 4
  %v3_90d0 = add i32 %v2_90d0, 4
  %v4_90d0 = inttoptr i32 %v3_90d0 to i8*
  store i8 %v1_90d0, i8* %v4_90d0, align 1
  %v0_90d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_90d4, label %dec_label_pc_90d8, label %dec_label_pc_90a0.dec_label_pc_8eb4_crit_edge

dec_label_pc_90a0.dec_label_pc_8eb4_crit_edge:    ; preds = %dec_label_pc_90a0
  %v1_8eb8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8eb4

dec_label_pc_90d8:                                ; preds = %dec_label_pc_90a0, %dec_label_pc_8ea8
  %v0_90d8 = call i32 @function_eb90()
  %v1_90d8 = trunc i32 %v0_90d8 to i8
  store i32 %v0_90d8, i32* %r0.global-to-local, align 4
  store i32 %v3_8b84, i32* %r2.global-to-local, align 4
  %v4_90e0 = sdiv i32 %v0_90d8, 256
  store i32 %v4_90e0, i32* %r3.global-to-local, align 4
  %v1_90e4 = load i32, i32* @r4, align 4
  %v9_90e4 = icmp eq i32 %v3_8b84, %v1_90e4
  store i1 %v9_90e4, i1* %cpsr_z.global-to-local, align 1
  %v3_90e8 = load i32, i32* @r5, align 4
  %v4_90e8 = add i32 %v3_90e8, 58
  %v5_90e8 = inttoptr i32 %v4_90e8 to i8*
  store i8 %v1_90d8, i8* %v5_90e8, align 1
  %v0_90ec = load i32, i32* %r3.global-to-local, align 4
  %v1_90ec = trunc i32 %v0_90ec to i8
  %v2_90ec = load i32, i32* @r7, align 4
  %v3_90ec = add i32 %v2_90ec, 1
  %v4_90ec = inttoptr i32 %v3_90ec to i8*
  store i8 %v1_90ec, i8* %v4_90ec, align 1
  %v0_90f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_90f0, label %dec_label_pc_90f4, label %dec_label_pc_8ec0

dec_label_pc_90f4:                                ; preds = %dec_label_pc_90d8, %dec_label_pc_8eb4
  %v0_90f4 = call i32 @function_eb90()
  %v1_90f4 = trunc i32 %v0_90f4 to i8
  store i32 %v0_90f4, i32* %r0.global-to-local, align 4
  %v4_90f843 = udiv i32 %v0_90f4, 256
  %v1_90fc = trunc i32 %v4_90f843 to i8
  %v2_90fc = load i32, i32* @r7, align 4
  %v3_90fc = add i32 %v2_90fc, 3
  %v4_90fc = inttoptr i32 %v3_90fc to i8*
  store i8 %v1_90fc, i8* %v4_90fc, align 1
  store i32 %v1_8b74, i32* %r3.global-to-local, align 4
  store i1 %v2_9104, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9104, label %bb108, label %bb107

bb107:                                            ; preds = %dec_label_pc_90f4
  %v1_9108 = load i32, i32* @r5, align 4
  %v2_9108 = add i32 %v1_9108, 16
  %v3_9108 = inttoptr i32 %v2_9108 to i32*
  %v4_9108 = load i32, i32* %v3_9108, align 4
  store i32 %v4_9108, i32* %r3.global-to-local, align 4
  br label %bb108

bb108:                                            ; preds = %dec_label_pc_90f4, %bb107
  %v3_910c = load i32, i32* @r7, align 4
  %v4_910c = add i32 %v3_910c, 2
  %v5_910c = inttoptr i32 %v4_910c to i8*
  store i8 %v1_90f4, i8* %v5_910c, align 1
  %v0_9110 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9110, label %dec_label_pc_9118, label %bb109

bb109:                                            ; preds = %bb108
  %v1_9110 = load i32, i32* %r3.global-to-local, align 4
  %v2_9110 = load i32, i32* @r6, align 4
  %v3_9110 = add i32 %v2_9110, 16
  %v4_9110 = inttoptr i32 %v3_9110 to i32*
  store i32 %v1_9110, i32* %v4_9110, align 4
  br label %dec_label_pc_8ed4

dec_label_pc_9118:                                ; preds = %dec_label_pc_8ec0, %bb108
  %v0_9118 = call i32 @function_eb90()
  store i32 %v0_9118, i32* %r0.global-to-local, align 4
  %v1_911c = load i32, i32* @r6, align 4
  %v2_911c = add i32 %v1_911c, 16
  %v3_911c = inttoptr i32 %v2_911c to i32*
  store i32 %v0_9118, i32* %v3_911c, align 4
  br label %dec_label_pc_8ed4

dec_label_pc_9124:                                ; preds = %dec_label_pc_8ed4
  %v0_9124 = load i32, i32* @r7, align 4
  %v1_9124 = add i32 %v0_9124, 8
  store i32 %v1_9124, i32* %r0.global-to-local, align 4
  store i32 %v6_8ac4, i32* @r1, align 4
  %v1_912c = inttoptr i32 %v1_9124 to i8*
  %v2_912c = call i32 @function_ed10(i8* %v1_912c)
  store i32 %v2_912c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8f38

dec_label_pc_9134:                                ; preds = %dec_label_pc_8b64
  %v1_913c = add i32 %v6_8ac4, 8
  store i32 %v1_913c, i32* %r1.global-to-local, align 4
  %v1_9140 = add i32 %v6_8ac4, 66
  store i32 %v1_9140, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_8e44.preheader

; uselistorder directives
  uselistorder i32 %v1_9140, { 1, 0 }
  uselistorder i32 %v1_913c, { 1, 0 }
  uselistorder i32 %v0_90f4, { 0, 2, 1 }
  uselistorder i32 %v0_90d8, { 0, 2, 1 }
  uselistorder i32 %v3_90a8, { 0, 2, 1 }
  uselistorder i32 %v2_9074, { 1, 0 }
  uselistorder i32 %v8_9054, { 1, 2, 0 }
  uselistorder i32 %v3_9040, { 1, 0 }
  uselistorder i32 %v0_9030, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8ffc, { 1, 2, 0 }
  uselistorder i32 %v1_8ff8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_8f9c, { 1, 0, 2 }
  uselistorder i32 %v4_8f98, { 0, 2, 1 }
  uselistorder i32 %v0_8f78, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_8f68, { 0, 2, 1 }
  uselistorder i32 %v4_8f4c, { 1, 0 }
  uselistorder i32 %v7_8e70, { 2, 1, 0, 3 }
  uselistorder i32 %v0_8e44, { 1, 0 }
  uselistorder i1 %v7_8e8c, { 2, 1, 0 }
  uselistorder i1 %v2_9104, { 2, 3, 1, 0 }
  uselistorder i1 %v3_9094, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8dcc, { 1, 0, 2 }
  uselistorder i32 %v3_8c54, { 1, 0, 2 }
  uselistorder i32 %v3_8c34, { 1, 0 }
  uselistorder i32 %tmp91, { 1, 0 }
  uselistorder i32 %v1_8bd8, { 1, 0 }
  uselistorder i32 %v1_8bd4, { 2, 1, 0 }
  uselistorder i32 %v1_8bc0, { 1, 0 }
  uselistorder i32 %v1_8bbc, { 2, 1, 0 }
  uselistorder i32 %v1_8bb4, { 0, 2, 1 }
  uselistorder i32 %v3_8bac, { 2, 1, 0 }
  uselistorder i32 %v0_8b88, { 1, 0, 2 }
  uselistorder i32 %v3_8b7c, { 2, 1, 3, 0 }
  uselistorder i32 %v1_8b74, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_8b70, { 1, 0 }
  uselistorder i32 %v0_8b70, { 2, 1, 0 }
  uselistorder i32 %v0_8b68, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_8b64, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_8b5c, { 1, 0 }
  uselistorder i1 %v7_8b30, { 1, 0 }
  uselistorder i32 %v3_8b2c, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_8b18, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_8ae4, { 1, 2, 3, 0 }
  uselistorder i32 %v6_8ac4, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_8a78, { 1, 2, 0 }
  uselistorder i32 %v6_8a4c, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v6_8a10, { 1, 2, 0 }
  uselistorder i32 %v2_89f8, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_89dc, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 31, 32, 34, 1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 46, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 42, 41, 43, 44, 46, 45, 48, 47, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 4, 6, 9, 10, 7, 8, 12, 11, 13, 16, 14, 15, 17, 3, 18, 19, 21, 20, 22, 23, 24, 25, 27, 26, 31, 28, 29, 30, 34, 32, 33, 2, 1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder label %dec_label_pc_9118, { 1, 0 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %dec_label_pc_9014, { 1, 0 }
  uselistorder label %dec_label_pc_8f38, { 1, 0 }
  uselistorder label %dec_label_pc_8ed4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8e44.preheader, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
}

define i32 @function_9154(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9154:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_9154 = load i32, i32* @r4, align 4
  %v15_9154 = load i32, i32* @r8, align 4
  %v1_9158 = urem i32 %arg1, 256
  store i32 %v1_9158, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_9158, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_9170 = urem i32 %arg3, 256
  store i32 %v1_9170, i32* @r4, align 4
  %v2_9174 = call i32 @function_129f8(i32 %v1_9158, i32 4)
  %v0_9178 = load i32, i32* @r5, align 4
  store i32 %v0_9178, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9188 = load i32, i32* @r4, align 4
  store i32 %v0_9188, i32* %r0.global-to-local, align 4
  %v5_918c = inttoptr i32 %v0_9178 to i32*
  %v6_918c = call i32 @function_85e0(i32 %v0_9188, i32* %v5_918c, i32 2, i32 0, i32 %v2_9174)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_91a4 = load i32, i32* @r5, align 4
  store i32 %v0_91a4, i32* %r1.global-to-local, align 4
  %v0_91a8 = load i32, i32* @r4, align 4
  store i32 %v0_91a8, i32* %r0.global-to-local, align 4
  %v5_91ac = trunc i32 %v6_918c to i8
  %v6_91b0 = inttoptr i32 %v0_91a4 to i32*
  %v7_91b0 = call i32 @function_85e0(i32 %v0_91a8, i32* %v6_91b0, i32 3, i32 65535, i32 %v6_918c)
  %v0_91b4 = load i32, i32* @r5, align 4
  store i32 %v0_91b4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_91b0, i32* @r7, align 4
  %v0_91c4 = load i32, i32* @r4, align 4
  store i32 %v0_91c4, i32* %r0.global-to-local, align 4
  %v5_91c8 = inttoptr i32 %v0_91b4 to i32*
  %v6_91c8 = call i32 @function_85e0(i32 %v0_91c4, i32* %v5_91c8, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v0_91d4 = load i32, i32* @r5, align 4
  store i32 %v0_91d4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_91e0 = load i32, i32* @r4, align 4
  store i32 %v0_91e0, i32* %r0.global-to-local, align 4
  %v5_91e4 = trunc i32 %v6_91c8 to i8
  %v6_91e8 = inttoptr i32 %v0_91d4 to i32*
  %v7_91e8 = call i32 @function_85e0(i32 %v0_91e0, i32* %v6_91e8, i32 5, i32 1, i32 %v6_91c8)
  %v1_91f4 = urem i32 %v7_91e8, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9200 = load i32, i32* @r5, align 4
  store i32 %v0_9200, i32* %r1.global-to-local, align 4
  %v0_9204 = load i32, i32* @r4, align 4
  store i32 %v0_9204, i32* %r0.global-to-local, align 4
  %v5_920c = inttoptr i32 %v0_9200 to i32*
  %v6_920c = call i32 @function_85e0(i32 %v0_9204, i32* %v5_920c, i32 6, i32 65535, i32 %v1_91f4)
  %v0_9214 = load i32, i32* @r5, align 4
  store i32 %v0_9214, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_920c, i32* @sl, align 4
  %v0_9224 = load i32, i32* @r4, align 4
  store i32 %v0_9224, i32* %r0.global-to-local, align 4
  %v5_9228 = inttoptr i32 %v0_9214 to i32*
  %v6_9228 = call i32 @function_85e0(i32 %v0_9224, i32* %v5_9228, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_922c = load i32, i32* @r5, align 4
  store i32 %v0_922c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_9228, i32* @r8, align 4
  %v0_923c = load i32, i32* @r4, align 4
  store i32 %v0_923c, i32* %r0.global-to-local, align 4
  %v5_9240 = inttoptr i32 %v0_922c to i32*
  %v6_9240 = call i32 @function_85e0(i32 %v0_923c, i32* %v5_9240, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9250 = load i32, i32* @r5, align 4
  store i32 %v0_9250, i32* %r1.global-to-local, align 4
  %v0_9254 = load i32, i32* @r4, align 4
  store i32 %v0_9254, i32* %r0.global-to-local, align 4
  %v5_9258 = inttoptr i32 %v0_9250 to i32*
  %v6_9258 = call i32 @function_85e0(i32 %v0_9254, i32* %v5_9258, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9260 = urem i32 %v6_9258, 256
  %v0_9264 = load i32, i32* @r5, align 4
  store i32 %v0_9264, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9270 = load i32, i32* @r4, align 4
  store i32 %v0_9270, i32* %r0.global-to-local, align 4
  %v5_9278 = inttoptr i32 %v0_9264 to i32*
  %v6_9278 = call i32 @function_85e0(i32 %v0_9270, i32* %v5_9278, i32 19, i32 0, i32 %v1_9260)
  %v0_9280 = load i32, i32* @r5, align 4
  store i32 %v0_9280, i32* %r1.global-to-local, align 4
  %v2_9284 = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_9284, i32* %r3.global-to-local, align 4
  store i32 %v6_9278, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9290 = load i32, i32* @r4, align 4
  store i32 %v0_9290, i32* %r0.global-to-local, align 4
  %v5_9294 = inttoptr i32 %v0_9280 to i32*
  %v6_9294 = call i32 @function_85e0(i32 %v0_9290, i32* %v5_9294, i32 25, i32 %v2_9284, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_92a8 = call i32 @function_1270c(i32 2, i32 3, i32 6)
  store i32 %v3_92a8, i32* %r0.global-to-local, align 4
  %v7_92ac = icmp eq i32 %v3_92a8, -1
  store i1 %v7_92ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_92ac, label %dec_label_pc_972c, label %dec_label_pc_92b8

dec_label_pc_92b8:                                ; preds = %dec_label_pc_9154
  store i32 1, i32* %stack_var_-40, align 4
  %v6_92c0 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_92c0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_92d4 = call i32 @function_126dc(i32 %v3_92a8, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_92d4, i32* %r0.global-to-local, align 4
  %v7_92d8 = icmp eq i32 %v6_92d4, -1
  store i1 %v7_92d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_92d8, label %dec_label_pc_9724, label %dec_label_pc_92e0

dec_label_pc_92e0:                                ; preds = %dec_label_pc_92b8
  %v0_92e0 = load i32, i32* @sl, align 4
  %v0_92ec = load i32, i32* @r8, align 4
  %v3_92ec = mul i32 %v0_92ec, 65536
  store i32 %v3_92ec, i32* %r8.global-to-local, align 4
  %v0_92f0 = load i32, i32* @r7, align 4
  %v0_92f4 = load i32, i32* @r6, align 4
  %v1_92f4 = urem i32 %v0_92f4, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_92fc = urem i32 %v0_92e0, 65536
  store i32 %v3_92fc, i32* %r2.global-to-local, align 4
  %v3_9300 = urem i32 %v0_92ec, 65536
  store i32 %v3_9300, i32* %r3.global-to-local, align 4
  %v0_9304 = load i32, i32* @fp, align 4
  %v2_9304 = icmp eq i32 %v0_9304, 0
  store i1 %v2_9304, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %v3_9314 = urem i32 %v0_92f0, 65536
  store i32 %v3_9314, i32* @sl, align 4
  %tmp84 = icmp slt i32 %v0_9304, 1
  br i1 %tmp84, label %dec_label_pc_9850, label %dec_label_pc_9324

dec_label_pc_9324:                                ; preds = %dec_label_pc_92e0
  %v3_9328 = mul i32 %v6_9240, 65536
  %v1_932c = add i32 %v3_9328, 3407872
  %v3_9334 = udiv i32 %v1_932c, 256
  %v0_92f0.not = or i32 %v0_92f0, -65536
  %v1_9344 = xor i32 %v0_92f0.not, 65535
  %v1_9348 = urem i32 %v0_92ec, 256
  %tmp85 = mul nsw i32 %v1_9344, 256
  %v1_9360 = and i32 %v3_9334, 65280
  %v1_9364 = add i32 %v3_9328, 524288
  %v4_9368 = udiv i32 %v1_932c, 16777216
  %v5_9368 = or i32 %v1_9360, %v4_9368
  store i32 %v5_9368, i32* %r0.global-to-local, align 4
  %v1_936c = add i32 %v3_9328, 1835008
  %v1_9374 = and i32 %tmp85, 65280
  store i32 %v1_9374, i32* @lr, align 4
  %tmp86 = udiv i32 %v1_9344, 256
  %tmp87 = udiv i32 %v0_92f0, 256
  %v5_9388 = trunc i32 %tmp86 to i8
  %tmp88 = udiv i32 %v0_92e0, 256
  %sext29 = mul i32 %tmp87, 16777216
  %v4_93a8 = sdiv i32 %sext29, 16777216
  %v3_93b4 = mul nuw nsw i32 %v1_9348, 256
  store i32 %v3_93b4, i32* @r5, align 4
  %v3_93b8 = udiv i32 %v1_9364, 256
  %tmp89 = udiv i32 %v0_92ec, 256
  %v4_93c0 = urem i32 %tmp89, 256
  %v5_93c0 = or i32 %v4_93c0, %v3_93b4
  store i32 %v5_93c0, i32* @r7, align 4
  %v3_93c4 = ashr i32 %sext29, 31
  %v3_93d0 = sdiv i32 %v1_936c, 16777216
  %v1_93d4 = and i32 %v3_93b8, 65280
  store i32 %v1_93d4, i32* @r6, align 4
  %sext30 = mul i32 %tmp88, 16777216
  %v4_93dc = sdiv i32 %sext30, 16777216
  %v3_93e0 = ashr i32 %v1_936c, 31
  %v3_93e4 = udiv i32 %v1_9344, 65536
  %v4_93e8 = udiv i32 %v1_9364, 16777216
  %v5_93e8 = or i32 %v1_93d4, %v4_93e8
  store i32 %v5_93e8, i32* %r8.global-to-local, align 4
  %v3_93f4 = ashr i32 %sext30, 31
  store i32 %v3_93f4, i32* %r1.global-to-local, align 4
  store i32 %v1_9348, i32* %r2.global-to-local, align 4
  %v3_93fc41 = udiv i32 %v1_93d4, 256
  store i32 %v3_93fc41, i32* %r3.global-to-local, align 4
  %v5_9404 = trunc i32 %v3_93f4 to i8
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v1_932c, 256
  %v4_9468 = sdiv i32 %sext, 16777216
  %sext16 = mul nuw i32 %v4_9368, 16777216
  %v4_9478 = sdiv i32 %sext16, 16777216
  %v2_954c = icmp eq i32 %v1_92f4, 0
  %sext20 = mul i32 %v1_9364, 256
  %v4_956c = sdiv i32 %sext20, 16777216
  %sext21 = mul i32 %v0_92ec, 16777216
  %v7_9584 = sdiv i32 %sext21, 16777216
  %v1_9474 = trunc i32 %v4_9468 to i8
  br label %dec_label_pc_9414

dec_label_pc_9414:                                ; preds = %bb96, %dec_label_pc_9324
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_9420 = call i32 @function_129f8(i32 1510, i32 4)
  store i32 %v2_9420, i32* %r0.global-to-local, align 4
  store i32 %v2_9174, i32* %r1.global-to-local, align 4
  %v3_9428 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9428, i32* %r3.global-to-local, align 4
  %v2_942c = load i32, i32* @r4, align 4
  %v5_942c = mul i32 %v2_942c, 4
  %v6_942c = add i32 %v5_942c, %v2_9174
  %v7_942c = inttoptr i32 %v6_942c to i32*
  store i32 %v2_9420, i32* %v7_942c, align 4
  %v0_9430 = load i32, i32* %r1.global-to-local, align 4
  %v1_9430 = load i32, i32* %r3.global-to-local, align 4
  %v4_9430 = mul i32 %v1_9430, 4
  %v5_9430 = add i32 %v4_9430, %v0_9430
  %v6_9430 = inttoptr i32 %v5_9430 to i32*
  %v7_9430 = load i32, i32* %v6_9430, align 4
  store i32 %v7_9430, i32* %r4.global-to-local, align 4
  %v1_9434 = inttoptr i32 %v7_9430 to i8*
  %v2_9434 = load i8, i8* %v1_9434, align 1
  %tmp = urem i8 %v2_9434, 16
  %v1_9438 = zext i8 %tmp to i32
  %v1_943c = or i32 %v1_9438, 64
  store i32 %v1_943c, i32* %r2.global-to-local, align 4
  %v1_9440 = trunc i32 %v1_943c to i8
  store i8 %v1_9440, i8* %v1_9434, align 1
  %v0_9444 = load i32, i32* %r4.global-to-local, align 4
  %v1_9444 = inttoptr i32 %v0_9444 to i8*
  %v2_9444 = load i8, i8* %v1_9444, align 1
  %v1_9448 = and i8 %v2_9444, -16
  %v1_944c = or i8 %v1_9448, 5
  store i32 %v1_91f4, i32* %r2.global-to-local, align 4
  store i8 %v1_944c, i8* %v1_9444, align 1
  %v2_945c = load i32, i32* %r4.global-to-local, align 4
  %v3_945c = add i32 %v2_945c, 1
  %v4_945c = inttoptr i32 %v3_945c to i8*
  store i8 %v5_91ac, i8* %v4_945c, align 1
  store i32 %v6_91c8, i32* %r1.global-to-local, align 4
  %v2_9464 = load i32, i32* %r4.global-to-local, align 4
  %v3_9464 = add i32 %v2_9464, 8
  %v4_9464 = inttoptr i32 %v3_9464 to i8*
  store i8 %v5_91e4, i8* %v4_9464, align 1
  store i32 %v4_9468, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_9470 = load i32, i32* %r2.global-to-local, align 4
  %v9_9470 = icmp eq i32 %v0_9470, 0
  store i1 %v9_9470, i1* %cpsr_z.global-to-local, align 1
  %v2_9474 = load i32, i32* %r4.global-to-local, align 4
  %v3_9474 = add i32 %v2_9474, 3
  %v4_9474 = inttoptr i32 %v3_9474 to i8*
  store i8 %v1_9474, i8* %v4_9474, align 1
  store i32 %v4_9478, i32* %r2.global-to-local, align 4
  %v0_947c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_947c, label %.thread23, label %.thread

.thread:                                          ; preds = %dec_label_pc_9414
  %v1_947c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_947c, i32* %r3.global-to-local, align 4
  %v2_9480 = trunc i32 %v1_947c to i8
  %v3_9480 = load i32, i32* %r4.global-to-local, align 4
  %v4_9480 = add i32 %v3_9480, 7
  %v5_9480 = inttoptr i32 %v4_9480 to i8*
  store i8 %v2_9480, i8* %v5_9480, align 1
  %v0_9484.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9484.pr.pr, label %.thread23, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_9488 = load i32, i32* %r4.global-to-local, align 4
  %v4_9488 = add i32 %v3_9488, 6
  %v5_9488 = inttoptr i32 %v4_9488 to i8*
  store i8 64, i8* %v5_9488, align 1
  br label %.thread23

.thread23:                                        ; preds = %dec_label_pc_9414, %.thread, %bb
  %v0_948c = load i32, i32* %r2.global-to-local, align 4
  %v1_948c = trunc i32 %v0_948c to i8
  %v2_948c = load i32, i32* %r4.global-to-local, align 4
  %v3_948c = add i32 %v2_948c, 2
  %v4_948c = inttoptr i32 %v3_948c to i8*
  store i8 %v1_948c, i8* %v4_948c, align 1
  store i32 %v3_93c4, i32* %r2.global-to-local, align 4
  store i32 %v4_93a8, i32* %r1.global-to-local, align 4
  %v2_949c = load i32, i32* %r4.global-to-local, align 4
  %v3_949c = add i32 %v2_949c, 9
  %v4_949c = inttoptr i32 %v3_949c to i8*
  store i8 47, i8* %v4_949c, align 1
  %v0_94a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_94a0 = trunc i32 %v0_94a0 to i8
  %v2_94a0 = load i32, i32* %r4.global-to-local, align 4
  %v3_94a0 = add i32 %v2_94a0, 5
  %v4_94a0 = inttoptr i32 %v3_94a0 to i8*
  store i8 %v1_94a0, i8* %v4_94a0, align 1
  %v3_94a4 = load i32, i32* %stack_var_-40, align 4
  %v5_94ac = mul i32 %v3_94a4, 24
  store i32 %v5_94ac, i32* %r3.global-to-local, align 4
  store i32 %v6_9294, i32* %r2.global-to-local, align 4
  %v1_94b4 = load i32, i32* %r4.global-to-local, align 4
  %v2_94b4 = add i32 %v1_94b4, 12
  %v3_94b4 = inttoptr i32 %v2_94b4 to i32*
  store i32 %v6_9294, i32* %v3_94b4, align 4
  %v0_94b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_94b8 = load i32, i32* @sb, align 4
  %v2_94b8 = add i32 %v1_94b8, %v0_94b8
  store i32 %v2_94b8, i32* %r3.global-to-local, align 4
  %v0_94bc = load i32, i32* %r1.global-to-local, align 4
  %v1_94bc = trunc i32 %v0_94bc to i8
  %v2_94bc = load i32, i32* %r4.global-to-local, align 4
  %v3_94bc = add i32 %v2_94bc, 4
  %v4_94bc = inttoptr i32 %v3_94bc to i8*
  store i8 %v1_94bc, i8* %v4_94bc, align 1
  %v0_94c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_94c0 = add i32 %v0_94c0, 16
  %v2_94c0 = inttoptr i32 %v1_94c0 to i32*
  %v3_94c0 = load i32, i32* %v2_94c0, align 4
  store i32 %v3_94c0, i32* %r2.global-to-local, align 4
  %v0_94c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_94c4 = add i32 %v0_94c4, 20
  store i32 %v1_94c4, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_94cc = load i32, i32* %r0.global-to-local, align 4
  %v1_94cc = trunc i32 %v0_94cc to i8
  %v3_94cc = add i32 %v0_94c4, 23
  %v4_94cc = inttoptr i32 %v3_94cc to i8*
  store i8 %v1_94cc, i8* %v4_94cc, align 1
  %v0_94d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_94d0 = trunc i32 %v0_94d0 to i8
  %v2_94d0 = load i32, i32* %r1.global-to-local, align 4
  %v3_94d0 = add i32 %v2_94d0, 2
  %v4_94d0 = inttoptr i32 %v3_94d0 to i8*
  store i8 %v1_94d0, i8* %v4_94d0, align 1
  %v0_94d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_94d4 = add i32 %v0_94d4, 24
  %v2_94d4 = inttoptr i32 %v1_94d4 to i8*
  %v3_94d4 = load i8, i8* %v2_94d4, align 1
  %tmp104 = urem i8 %v3_94d4, 16
  %v1_94d8 = zext i8 %tmp104 to i32
  %v1_94dc = or i32 %v1_94d8, 64
  store i32 %v1_94dc, i32* %r3.global-to-local, align 4
  %v1_94e0 = trunc i32 %v1_94dc to i8
  store i8 %v1_94e0, i8* %v2_94d4, align 1
  %v0_94e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_94e4 = load i32, i32* %r4.global-to-local, align 4
  %v2_94e4 = add i32 %v1_94e4, 16
  %v3_94e4 = inttoptr i32 %v2_94e4 to i32*
  store i32 %v0_94e4, i32* %v3_94e4, align 4
  %v0_94e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_94e8 = add i32 %v0_94e8, 24
  %v2_94e8 = inttoptr i32 %v1_94e8 to i8*
  %v3_94e8 = load i8, i8* %v2_94e8, align 1
  %v1_94ec = and i8 %v3_94e8, -16
  %v1_94f0 = or i8 %v1_94ec, 5
  store i8 %v1_94f0, i8* %v2_94e8, align 1
  %v0_94fc = load i32, i32* %r4.global-to-local, align 4
  %v1_94fc = add i32 %v0_94fc, 24
  store i32 %v1_94fc, i32* @r5, align 4
  %v3_9500 = add i32 %v0_94fc, 25
  %v4_9500 = inttoptr i32 %v3_9500 to i8*
  store i8 %v5_91ac, i8* %v4_9500, align 1
  store i32 %v3_93d0, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_93e0, i32* %r2.global-to-local, align 4
  %v2_9510 = load i32, i32* @r5, align 4
  %v3_9510 = add i32 %v2_9510, 4
  %v4_9510 = inttoptr i32 %v3_9510 to i8*
  store i8 %v5_9388, i8* %v4_9510, align 1
  %v0_9514 = load i32, i32* %r1.global-to-local, align 4
  %v1_9514 = trunc i32 %v0_9514 to i8
  %v2_9514 = load i32, i32* @r5, align 4
  %v3_9514 = add i32 %v2_9514, 2
  %v4_9514 = inttoptr i32 %v3_9514 to i8*
  store i8 %v1_9514, i8* %v4_9514, align 1
  %v0_9518 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9518, label %bb91, label %bb90

bb90:                                             ; preds = %.thread23
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb91

bb91:                                             ; preds = %.thread23, %bb90
  store i32 %v3_93e4, i32* %r1.global-to-local, align 4
  %v0_9520 = load i32, i32* %r2.global-to-local, align 4
  %v1_9520 = trunc i32 %v0_9520 to i8
  %v2_9520 = load i32, i32* @r5, align 4
  %v3_9520 = add i32 %v2_9520, 3
  %v4_9520 = inttoptr i32 %v3_9520 to i8*
  store i8 %v1_9520, i8* %v4_9520, align 1
  store i32 %v6_91c8, i32* %r2.global-to-local, align 4
  %v0_9528 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9528, label %bb93, label %bb92

bb92:                                             ; preds = %bb91
  %v1_9528 = load i32, i32* %r3.global-to-local, align 4
  %v2_9528 = trunc i32 %v1_9528 to i8
  %v3_9528 = load i32, i32* @r5, align 4
  %v4_9528 = add i32 %v3_9528, 6
  %v5_9528 = inttoptr i32 %v4_9528 to i8*
  store i8 %v2_9528, i8* %v5_9528, align 1
  br label %bb93

bb93:                                             ; preds = %bb91, %bb92
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9530 = load i32, i32* %r1.global-to-local, align 4
  %v1_9530 = trunc i32 %v0_9530 to i8
  %v2_9530 = load i32, i32* @r5, align 4
  %v3_9530 = add i32 %v2_9530, 5
  %v4_9530 = inttoptr i32 %v3_9530 to i8*
  store i8 %v1_9530, i8* %v4_9530, align 1
  %v0_9534 = load i32, i32* %r2.global-to-local, align 4
  %v1_9534 = trunc i32 %v0_9534 to i8
  %v2_9534 = load i32, i32* @r5, align 4
  %v3_9534 = add i32 %v2_9534, 8
  %v4_9534 = inttoptr i32 %v3_9534 to i8*
  store i8 %v1_9534, i8* %v4_9534, align 1
  %v0_9538 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9538, label %bb95, label %bb94

bb94:                                             ; preds = %bb93
  %v1_9538 = load i32, i32* %r0.global-to-local, align 4
  %v2_9538 = trunc i32 %v1_9538 to i8
  %v3_9538 = load i32, i32* @r5, align 4
  %v4_9538 = add i32 %v3_9538, 7
  %v5_9538 = inttoptr i32 %v4_9538 to i8*
  store i8 %v2_9538, i8* %v5_9538, align 1
  br label %bb95

bb95:                                             ; preds = %bb93, %bb94
  %v0_953c = load i32, i32* %r3.global-to-local, align 4
  %v1_953c = trunc i32 %v0_953c to i8
  %v2_953c = load i32, i32* @r5, align 4
  %v3_953c = add i32 %v2_953c, 9
  %v4_953c = inttoptr i32 %v3_953c to i8*
  store i8 %v1_953c, i8* %v4_953c, align 1
  %v0_9540 = call i32 @function_eb90()
  store i32 %v0_9540, i32* %r0.global-to-local, align 4
  store i32 %v1_92f4, i32* %r1.global-to-local, align 4
  store i1 %v2_954c, i1* %cpsr_z.global-to-local, align 1
  %v1_9550 = sub i32 1023, %v0_9540
  store i32 %v1_9550, i32* %r3.global-to-local, align 4
  br i1 %v2_954c, label %.thread24, label %.thread25

.thread24:                                        ; preds = %bb95
  %v2_9558 = load i32, i32* @r5, align 4
  %v3_9558 = add i32 %v2_9558, 16
  %v4_9558 = inttoptr i32 %v3_9558 to i32*
  store i32 %v1_9550, i32* %v4_9558, align 4
  br label %bb96

.thread25:                                        ; preds = %bb95
  %v1_9554 = load i32, i32* %r4.global-to-local, align 4
  %v2_9554 = add i32 %v1_9554, 16
  %v3_9554 = inttoptr i32 %v2_9554 to i32*
  %v4_9554 = load i32, i32* %v3_9554, align 4
  store i32 %v4_9554, i32* %r3.global-to-local, align 4
  %v2_955c = load i32, i32* @r5, align 4
  %v3_955c = add i32 %v2_955c, 16
  %v4_955c = inttoptr i32 %v3_955c to i32*
  store i32 %v4_9554, i32* %v4_955c, align 4
  br label %bb96

bb96:                                             ; preds = %.thread24, %.thread25
  store i32 %v4_93dc, i32* %r3.global-to-local, align 4
  %v0_9564 = load i32, i32* %r4.global-to-local, align 4
  %v1_9564 = add i32 %v0_9564, 44
  store i32 %v1_9564, i32* @r6, align 4
  %v1_9568 = load i32, i32* @r5, align 4
  %v2_9568 = add i32 %v1_9568, 12
  %v3_9568 = inttoptr i32 %v2_9568 to i32*
  store i32 %v0_9540, i32* %v3_9568, align 4
  store i32 %v4_956c, i32* %r2.global-to-local, align 4
  %v0_9570 = load i32, i32* %r3.global-to-local, align 4
  %v1_9570 = trunc i32 %v0_9570 to i8
  %v2_9570 = load i32, i32* @r6, align 4
  %v3_9570 = inttoptr i32 %v2_9570 to i8*
  store i8 %v1_9570, i8* %v3_9570, align 1
  %v3_9574 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9574, i32* %r3.global-to-local, align 4
  %v0_9578 = load i32, i32* %r2.global-to-local, align 4
  %v1_9578 = trunc i32 %v0_9578 to i8
  %v2_9578 = load i32, i32* @r6, align 4
  %v3_9578 = add i32 %v2_9578, 5
  %v4_9578 = inttoptr i32 %v3_9578 to i8*
  store i8 %v1_9578, i8* %v4_9578, align 1
  %v0_957c = load i32, i32* %r3.global-to-local, align 4
  %v1_957c = add i32 %v0_957c, 1
  store i32 %v1_957c, i32* @r4, align 4
  store i32 %v3_93f4, i32* %r1.global-to-local, align 4
  store i32 %v7_9584, i32* %r2.global-to-local, align 4
  %v1_9588 = load i32, i32* @fp, align 4
  %v9_9588 = icmp eq i32 %v1_957c, %v1_9588
  store i1 %v9_9588, i1* %cpsr_z.global-to-local, align 1
  %v2_958c = load i32, i32* @r6, align 4
  %v3_958c = add i32 %v2_958c, 1
  %v4_958c = inttoptr i32 %v3_958c to i8*
  store i8 %v5_9404, i8* %v4_958c, align 1
  %v0_9590 = load i32, i32* @r7, align 4
  %v1_9590 = trunc i32 %v0_9590 to i8
  %v2_9590 = load i32, i32* @r6, align 4
  %v3_9590 = add i32 %v2_9590, 2
  %v4_9590 = inttoptr i32 %v3_9590 to i8*
  store i8 %v1_9590, i8* %v4_9590, align 1
  %v0_9594 = load i32, i32* %r2.global-to-local, align 4
  %v1_9594 = trunc i32 %v0_9594 to i8
  %v2_9594 = load i32, i32* @r6, align 4
  %v3_9594 = add i32 %v2_9594, 3
  %v4_9594 = inttoptr i32 %v3_9594 to i8*
  store i8 %v1_9594, i8* %v4_9594, align 1
  %v0_9598 = load i32, i32* %r8.global-to-local, align 4
  %v1_9598 = trunc i32 %v0_9598 to i8
  %v2_9598 = load i32, i32* @r6, align 4
  %v3_9598 = add i32 %v2_9598, 4
  %v4_9598 = inttoptr i32 %v3_9598 to i8*
  store i8 %v1_9598, i8* %v4_9598, align 1
  %v0_959c = load i32, i32* @r4, align 4
  store i32 %v0_959c, i32* %stack_var_-40, align 4
  %v5_95a0 = icmp slt i32 %v1_957c, %v1_9588
  br i1 %v5_95a0, label %dec_label_pc_9414, label %dec_label_pc_95a4

dec_label_pc_95a4:                                ; preds = %bb96
  %v1_95ac = add i32 %v6_9240, 8
  store i32 %v1_95ac, i32* %r3.global-to-local, align 4
  %v1_95b0 = add i32 %v6_9240, 52
  store i32 %v1_95b0, i32* %r1.global-to-local, align 4
  %v0_95bc.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_95bc.preheader

dec_label_pc_95bc.preheader:                      ; preds = %dec_label_pc_95a4, %dec_label_pc_9850
  %v0_95bc.pre = phi i32 [ %v0_95bc.pre.pre, %dec_label_pc_95a4 ], [ %v0_9304, %dec_label_pc_9850 ]
  %stack_var_-120.0.ph = phi i32 [ %v1_95b0, %dec_label_pc_95a4 ], [ %v1_985c, %dec_label_pc_9850 ]
  %stack_var_-152.0.ph = phi i32 [ %v1_95ac, %dec_label_pc_95a4 ], [ %v1_9858, %dec_label_pc_9850 ]
  %v2_9834 = icmp eq i32 %v1_9260, 0
  %v2_9634 = icmp eq i32 %v1_92f4, 0
  %v2_9600 = icmp eq i32 %v6_9294, -1
  %v7_9600 = icmp eq i32 %v6_9294, -1
  br label %dec_label_pc_95bc

dec_label_pc_95bc:                                ; preds = %dec_label_pc_9650, %dec_label_pc_95bc.preheader
  %v0_95bc = phi i32 [ %v0_95bc.pre, %dec_label_pc_95bc.preheader ], [ %v1_9714, %dec_label_pc_9650 ]
  %v2_95bc = icmp eq i32 %v0_95bc, 0
  store i1 %v2_95bc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp97 = icmp slt i32 %v0_95bc, 1
  br label %dec_label_pc_95c4

dec_label_pc_95c4:                                ; preds = %dec_label_pc_95c4, %dec_label_pc_95bc
  br i1 %tmp97, label %dec_label_pc_95c4, label %dec_label_pc_95c8

dec_label_pc_95c8:                                ; preds = %dec_label_pc_95c4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_95d4

dec_label_pc_95d4:                                ; preds = %dec_label_pc_9650, %dec_label_pc_95c8
  %v1_95e8 = phi i32 [ %v1_9710, %dec_label_pc_9650 ], [ 0, %dec_label_pc_95c8 ]
  %v5_95d8 = mul i32 %v1_95e8, 24
  %v1_95dc = load i32, i32* @sb, align 4
  %v2_95dc = add i32 %v1_95dc, %v5_95d8
  store i32 %v2_95dc, i32* %r3.global-to-local, align 4
  store i32 %v2_9174, i32* %r1.global-to-local, align 4
  %v1_95e4 = add i32 %v2_95dc, 20
  %v2_95e4 = inttoptr i32 %v1_95e4 to i8*
  %v3_95e4 = load i8, i8* %v2_95e4, align 1
  %v4_95e4 = zext i8 %v3_95e4 to i32
  store i32 %v4_95e4, i32* %r2.global-to-local, align 4
  %v4_95e8 = mul i32 %v1_95e8, 4
  %v5_95e8 = add i32 %v4_95e8, %v2_9174
  %v6_95e8 = inttoptr i32 %v5_95e8 to i32*
  %v7_95e8 = load i32, i32* %v6_95e8, align 4
  store i32 %v7_95e8, i32* @r5, align 4
  %v7_95ec = icmp eq i8 %v3_95e4, 31
  store i1 %v7_95ec, i1* %cpsr_z.global-to-local, align 1
  %v1_95f0 = add i32 %v7_95e8, 24
  store i32 %v1_95f0, i32* @r6, align 4
  %v1_95f4 = add i32 %v7_95e8, 44
  store i32 %v1_95f4, i32* @r7, align 4
  %tmp105 = icmp ult i8 %v3_95e4, 32
  br i1 %tmp105, label %dec_label_pc_9734, label %dec_label_pc_95fc

dec_label_pc_95fc:                                ; preds = %dec_label_pc_95d4
  store i32 %v6_9294, i32* %r2.global-to-local, align 4
  store i1 %v7_9600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9600, label %dec_label_pc_979c, label %dec_label_pc_9608

dec_label_pc_9608:                                ; preds = %dec_label_pc_9734, %dec_label_pc_95fc
  store i32 65535, i32* @r4, align 4
  %v0_9610 = load i32, i32* @sl, align 4
  %v9_9610 = icmp eq i32 %v0_9610, 65535
  store i1 %v9_9610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9610, label %dec_label_pc_97b4, label %dec_label_pc_9618

dec_label_pc_9618:                                ; preds = %dec_label_pc_979c.dec_label_pc_9618_crit_edge, %dec_label_pc_9608
  %v1_961c = phi i32 [ %v1_961c.pre, %dec_label_pc_979c.dec_label_pc_9618_crit_edge ], [ 65535, %dec_label_pc_9608 ]
  store i32 %v3_92fc, i32* %r3.global-to-local, align 4
  %v9_961c = icmp eq i32 %v3_92fc, %v1_961c
  store i1 %v9_961c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_961c, label %dec_label_pc_97ec, label %dec_label_pc_9624

dec_label_pc_9624:                                ; preds = %dec_label_pc_97b4.dec_label_pc_9624_crit_edge, %dec_label_pc_9618
  %v1_9628 = phi i32 [ %v1_9628.pre, %dec_label_pc_97b4.dec_label_pc_9624_crit_edge ], [ %v1_961c, %dec_label_pc_9618 ]
  store i32 %v3_9300, i32* %r1.global-to-local, align 4
  %v9_9628 = icmp eq i32 %v3_9300, %v1_9628
  store i1 %v9_9628, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9628, label %dec_label_pc_9808, label %dec_label_pc_9630

dec_label_pc_9630:                                ; preds = %dec_label_pc_97ec, %dec_label_pc_9624
  store i32 %v1_92f4, i32* %r2.global-to-local, align 4
  store i1 %v2_9634, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9634, label %dec_label_pc_982c, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_9630
  %v1_9638 = load i32, i32* @r5, align 4
  %v2_9638 = add i32 %v1_9638, 16
  %v3_9638 = inttoptr i32 %v2_9638 to i32*
  %v4_9638 = load i32, i32* %v3_9638, align 4
  store i32 %v4_9638, i32* %r3.global-to-local, align 4
  %v2_963c = load i32, i32* @r6, align 4
  %v3_963c = add i32 %v2_963c, 16
  %v4_963c = inttoptr i32 %v3_963c to i32*
  store i32 %v4_9638, i32* %v4_963c, align 4
  br label %dec_label_pc_9644

dec_label_pc_9644:                                ; preds = %bb102, %.thread26
  store i32 %v1_9260, i32* %r3.global-to-local, align 4
  store i1 %v2_9834, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9834, label %dec_label_pc_9650, label %dec_label_pc_9840

dec_label_pc_9650:                                ; preds = %dec_label_pc_9644, %dec_label_pc_982c, %dec_label_pc_9840
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9654 = load i32, i32* @r8, align 4
  %v1_9654 = trunc i32 %v0_9654 to i8
  %v2_9654 = load i32, i32* @r5, align 4
  %v3_9654 = add i32 %v2_9654, 10
  %v4_9654 = inttoptr i32 %v3_9654 to i8*
  store i8 %v1_9654, i8* %v4_9654, align 1
  %v0_9658 = load i32, i32* @r8, align 4
  %v1_9658 = trunc i32 %v0_9658 to i8
  %v2_9658 = load i32, i32* @r5, align 4
  %v3_9658 = add i32 %v2_9658, 11
  %v4_9658 = inttoptr i32 %v3_9658 to i8*
  store i8 %v1_9658, i8* %v4_9658, align 1
  %v0_965c = load i32, i32* @r5, align 4
  store i32 %v0_965c, i32* @r0, align 4
  %v2_9660 = call i32 @function_d0b8(i32 %v0_965c, i32 20)
  %v3_9660 = trunc i32 %v2_9660 to i8
  %v4_9664 = sdiv i32 %v2_9660, 256
  store i32 %v4_9664, i32* %r3.global-to-local, align 4
  %v1_9668 = trunc i32 %v4_9664 to i8
  %v2_9668 = load i32, i32* @r5, align 4
  %v3_9668 = add i32 %v2_9668, 11
  %v4_9668 = inttoptr i32 %v3_9668 to i8*
  store i8 %v1_9668, i8* %v4_9668, align 1
  %v3_966c = load i32, i32* @r5, align 4
  %v4_966c = add i32 %v3_966c, 10
  %v5_966c = inttoptr i32 %v4_966c to i8*
  store i8 %v3_9660, i8* %v5_966c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9674 = load i32, i32* @r8, align 4
  %v1_9674 = trunc i32 %v0_9674 to i8
  %v2_9674 = load i32, i32* @r6, align 4
  %v3_9674 = add i32 %v2_9674, 10
  %v4_9674 = inttoptr i32 %v3_9674 to i8*
  store i8 %v1_9674, i8* %v4_9674, align 1
  %v0_9678 = load i32, i32* @r8, align 4
  %v1_9678 = trunc i32 %v0_9678 to i8
  %v2_9678 = load i32, i32* @r6, align 4
  %v3_9678 = add i32 %v2_9678, 11
  %v4_9678 = inttoptr i32 %v3_9678 to i8*
  store i8 %v1_9678, i8* %v4_9678, align 1
  %v0_967c = load i32, i32* @r6, align 4
  store i32 %v0_967c, i32* @r0, align 4
  %v2_9680 = call i32 @function_d0b8(i32 %v0_967c, i32 20)
  %v3_9680 = trunc i32 %v2_9680 to i8
  store i32 %v2_9680, i32* %r0.global-to-local, align 4
  %v4_9684 = sdiv i32 %v2_9680, 256
  store i32 %v4_9684, i32* %r3.global-to-local, align 4
  %v3_9688 = load i32, i32* @r6, align 4
  %v4_9688 = add i32 %v3_9688, 10
  %v5_9688 = inttoptr i32 %v4_9688 to i8*
  store i8 %v3_9680, i8* %v5_9688, align 1
  %v0_968c = load i32, i32* %r3.global-to-local, align 4
  %v1_968c = trunc i32 %v0_968c to i8
  %v2_968c = load i32, i32* @r6, align 4
  %v3_968c = add i32 %v2_968c, 11
  %v4_968c = inttoptr i32 %v3_968c to i8*
  store i8 %v1_968c, i8* %v4_968c, align 1
  %v0_9690 = load i32, i32* @r7, align 4
  %v1_9690 = add i32 %v0_9690, 4
  %v2_9690 = inttoptr i32 %v1_9690 to i8*
  %v3_9690 = load i8, i8* %v2_9690, align 1
  %v4_9690 = zext i8 %v3_9690 to i32
  store i32 %v4_9690, i32* %r3.global-to-local, align 4
  %v1_9694 = add i32 %v0_9690, 5
  %v2_9694 = inttoptr i32 %v1_9694 to i8*
  %v3_9694 = load i8, i8* %v2_9694, align 1
  %v4_9694 = zext i8 %v3_9694 to i32
  store i32 %v0_9690, i32* @r1, align 4
  %v4_969c = mul nuw nsw i32 %v4_9694, 256
  %v5_969c = or i32 %v4_969c, %v4_9690
  store i32 %v5_969c, i32* %r2.global-to-local, align 4
  %v0_96a0 = load i32, i32* @r8, align 4
  %v1_96a0 = trunc i32 %v0_96a0 to i8
  %v3_96a0 = add i32 %v0_9690, 6
  %v4_96a0 = inttoptr i32 %v3_96a0 to i8*
  store i8 %v1_96a0, i8* %v4_96a0, align 1
  store i32 %stack_var_-152.0.ph, i32* %r3.global-to-local, align 4
  %v0_96a8 = load i32, i32* @r8, align 4
  %v1_96a8 = trunc i32 %v0_96a8 to i8
  %v2_96a8 = load i32, i32* @r7, align 4
  %v3_96a8 = add i32 %v2_96a8, 7
  %v4_96a8 = inttoptr i32 %v3_96a8 to i8*
  store i8 %v1_96a8, i8* %v4_96a8, align 1
  %v0_96ac = load i32, i32* @r6, align 4
  store i32 %v0_96ac, i32* %r0.global-to-local, align 4
  %v4_96b0 = call i32 @function_d114(i32 %v0_96ac, i32 %v0_9690, i32 %v5_969c, i32 %stack_var_-152.0.ph)
  %v5_96b0 = trunc i32 %v4_96b0 to i8
  store i32 %v4_96b0, i32* %r0.global-to-local, align 4
  %v3_96b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_96b4, i32* %r3.global-to-local, align 4
  %v3_96b8 = mul i32 %v3_96b4, 32
  store i32 %v3_96b8, i32* %r2.global-to-local, align 4
  %v0_96bc = load i32, i32* @r5, align 4
  %v1_96bc = add i32 %v0_96bc, 16
  %v2_96bc = inttoptr i32 %v1_96bc to i32*
  %v3_96bc = load i32, i32* %v2_96bc, align 4
  store i32 %v3_96bc, i32* %r1.global-to-local, align 4
  %v5_96c0 = mul i32 %v3_96b4, 24
  store i32 %v5_96c0, i32* %r2.global-to-local, align 4
  %v4_96c442 = udiv i32 %v4_96b0, 256
  %v1_96c8 = trunc i32 %v4_96c442 to i8
  %v2_96c8 = load i32, i32* @r7, align 4
  %v3_96c8 = add i32 %v2_96c8, 7
  %v4_96c8 = inttoptr i32 %v3_96c8 to i8*
  store i8 %v1_96c8, i8* %v4_96c8, align 1
  %v0_96cc = load i32, i32* %r2.global-to-local, align 4
  %v1_96cc = load i32, i32* @sb, align 4
  %v2_96cc = add i32 %v1_96cc, %v0_96cc
  store i32 %v2_96cc, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_96d4 = load i32, i32* @r7, align 4
  %v4_96d4 = add i32 %v3_96d4, 6
  %v5_96d4 = inttoptr i32 %v4_96d4 to i8*
  store i8 %v5_96b0, i8* %v5_96d4, align 1
  %v0_96d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_96d8 = load i32, i32* %lr.global-to-local, align 4
  %v2_96d8 = add i32 %v1_96d8, 4
  %v3_96d8 = inttoptr i32 %v2_96d8 to i32*
  store i32 %v0_96d8, i32* %v3_96d8, align 4
  %v0_96dc = load i32, i32* %r3.global-to-local, align 4
  %v1_96dc = trunc i32 %v0_96dc to i8
  %v2_96dc = load i32, i32* %r2.global-to-local, align 4
  %v3_96dc = load i32, i32* @sb, align 4
  %v4_96dc = add i32 %v3_96dc, %v2_96dc
  %v5_96dc = inttoptr i32 %v4_96dc to i8*
  store i8 %v1_96dc, i8* %v5_96dc, align 1
  %v0_96e0 = load i32, i32* @r8, align 4
  %v1_96e0 = trunc i32 %v0_96e0 to i8
  %v2_96e0 = load i32, i32* %lr.global-to-local, align 4
  %v3_96e0 = add i32 %v2_96e0, 2
  %v4_96e0 = inttoptr i32 %v3_96e0 to i8*
  store i8 %v1_96e0, i8* %v4_96e0, align 1
  %v0_96e4 = load i32, i32* @r8, align 4
  %v1_96e4 = trunc i32 %v0_96e4 to i8
  %v2_96e4 = load i32, i32* %lr.global-to-local, align 4
  %v3_96e4 = add i32 %v2_96e4, 1
  %v4_96e4 = inttoptr i32 %v3_96e4 to i8*
  store i8 %v1_96e4, i8* %v4_96e4, align 1
  %v0_96e8 = load i32, i32* @r8, align 4
  %v1_96e8 = trunc i32 %v0_96e8 to i8
  %v2_96e8 = load i32, i32* %lr.global-to-local, align 4
  %v3_96e8 = add i32 %v2_96e8, 3
  %v4_96e8 = inttoptr i32 %v3_96e8 to i8*
  store i8 %v1_96e8, i8* %v4_96e8, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_96f4 = load i32, i32* @r5, align 4
  store i32 %v0_96f4, i32* %r1.global-to-local, align 4
  store i32 %v3_92a8, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-120.0.ph, i32* %r2.global-to-local, align 4
  %v0_9700 = load i32, i32* %lr.global-to-local, align 4
  %v6_9708 = inttoptr i32 %v0_96f4 to i32*
  %v7_9708 = call i32 @function_126a8(i32 %v3_92a8, i32* %v6_9708, i32 %stack_var_-120.0.ph, i32 16384, i32 %v0_9700, i32 16)
  %v3_970c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_970c, i32* %r3.global-to-local, align 4
  %v1_9710 = add i32 %v3_970c, 1
  store i32 %v1_9710, i32* %r0.global-to-local, align 4
  %v1_9714 = load i32, i32* @fp, align 4
  %v9_9714 = icmp eq i32 %v1_9710, %v1_9714
  store i1 %v9_9714, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9710, i32* %stack_var_-40, align 4
  %v6_971c = icmp slt i32 %v1_9710, %v1_9714
  br i1 %v6_971c, label %dec_label_pc_95d4, label %dec_label_pc_95bc

dec_label_pc_9724:                                ; preds = %dec_label_pc_92b8
  store i32 %v3_92a8, i32* %r0.global-to-local, align 4
  %v1_9728 = call i32 @function_11dfc(i32 %v3_92a8)
  store i32 %v1_9728, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_972c

dec_label_pc_972c:                                ; preds = %dec_label_pc_9154, %dec_label_pc_9724
  %v29_9730 = phi i32 [ %v3_92a8, %dec_label_pc_9154 ], [ %v1_9728, %dec_label_pc_9724 ]
  store i32 %v3_9154, i32* %r4.global-to-local, align 4
  store i32 %v15_9154, i32* %r8.global-to-local, align 4
  ret i32 %v29_9730

dec_label_pc_9734:                                ; preds = %dec_label_pc_95d4
  %v1_9734 = add i32 %v2_95dc, 16
  %v2_9734 = inttoptr i32 %v1_9734 to i32*
  %v3_9734 = load i32, i32* %v2_9734, align 4
  store i32 %v3_9734, i32* %r4.global-to-local, align 4
  %v0_9738 = call i32 @function_eb90()
  store i32 %v0_9738, i32* %r0.global-to-local, align 4
  %v3_973c = load i32, i32* %stack_var_-40, align 4
  %v5_9744 = mul i32 %v3_973c, 24
  %v0_9748 = load i32, i32* %r4.global-to-local, align 4
  %v1_974c = load i32, i32* @sb, align 4
  %v2_974c = add i32 %v1_974c, %v5_9744
  store i32 %v2_974c, i32* %r1.global-to-local, align 4
  %v1_9750 = and i32 %v0_9748, 65280
  store i32 %v1_9750, i32* %r3.global-to-local, align 4
  %v1_9748 = udiv i32 %v0_9748, 256
  %v3_9754 = and i32 %v1_9748, 65280
  store i32 %v3_9754, i32* %r2.global-to-local, align 4
  %v1_975c = add i32 %v2_974c, 20
  %v2_975c = inttoptr i32 %v1_975c to i8*
  %v3_975c = load i8, i8* %v2_975c, align 1
  %v4_975c = zext i8 %v3_975c to i32
  store i32 %v4_975c, i32* %lr.global-to-local, align 4
  %v2_9768 = call i32 @llvm.bswap.i32(i32 %v0_9748)
  %v7_976c = lshr i32 %v0_9738, %v4_975c
  %v8_976c = add i32 %v7_976c, %v2_9768
  %v3_9778 = mul i32 %v8_976c, 16777216
  %v1_977c = and i32 %v8_976c, 65280
  store i32 %v1_977c, i32* %r0.global-to-local, align 4
  store i32 %v6_9294, i32* %r2.global-to-local, align 4
  %v4_9788 = mul nuw nsw i32 %v1_977c, 256
  %v5_9788 = or i32 %v4_9788, %v3_9778
  store i32 %v5_9788, i32* %r1.global-to-local, align 4
  %v2_978c = call i32 @llvm.bswap.i32(i32 %v8_976c)
  store i32 %v2_978c, i32* %r3.global-to-local, align 4
  store i1 %v7_9600, i1* %cpsr_z.global-to-local, align 1
  %v1_9794 = load i32, i32* @r5, align 4
  %v2_9794 = add i32 %v1_9794, 16
  %v3_9794 = inttoptr i32 %v2_9794 to i32*
  store i32 %v2_978c, i32* %v3_9794, align 4
  br i1 %v2_9600, label %dec_label_pc_979c, label %dec_label_pc_9608

dec_label_pc_979c:                                ; preds = %dec_label_pc_9734, %dec_label_pc_95fc
  %v0_979c = call i32 @function_eb90()
  store i32 %v0_979c, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  %v0_97a8 = load i32, i32* @sl, align 4
  %v9_97a8 = icmp eq i32 %v0_97a8, 65535
  store i1 %v9_97a8, i1* %cpsr_z.global-to-local, align 1
  %v1_97ac = load i32, i32* @r5, align 4
  %v2_97ac = add i32 %v1_97ac, 12
  %v3_97ac = inttoptr i32 %v2_97ac to i32*
  store i32 %v0_979c, i32* %v3_97ac, align 4
  br i1 %v9_97a8, label %dec_label_pc_97b4, label %dec_label_pc_979c.dec_label_pc_9618_crit_edge

dec_label_pc_979c.dec_label_pc_9618_crit_edge:    ; preds = %dec_label_pc_979c
  %v1_961c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9618

dec_label_pc_97b4:                                ; preds = %dec_label_pc_979c, %dec_label_pc_9608
  %v0_97b4 = call i32 @function_eb90()
  %v3_97bc = urem i32 %v0_97b4, 65536
  store i32 %v3_97bc, i32* %r0.global-to-local, align 4
  %v3_97c015 = udiv i32 %v0_97b4, 256
  %v1_97c4 = trunc i32 %v3_97c015 to i8
  %v2_97c4 = load i32, i32* @r5, align 4
  %v3_97c4 = add i32 %v2_97c4, 5
  %v4_97c4 = inttoptr i32 %v3_97c4 to i8*
  store i8 %v1_97c4, i8* %v4_97c4, align 1
  %v0_97c8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v3_92fc, i32* %r3.global-to-local, align 4
  %v1_97d0 = sub i32 999, %v0_97c8
  store i32 %v1_97d0, i32* %r2.global-to-local, align 4
  %v3_97d4 = sdiv i32 %v1_97d0, 256
  store i32 %v3_97d4, i32* %r1.global-to-local, align 4
  %v1_97d8 = load i32, i32* @r4, align 4
  %v9_97d8 = icmp eq i32 %v3_92fc, %v1_97d8
  store i1 %v9_97d8, i1* %cpsr_z.global-to-local, align 1
  %v1_97dc = trunc i32 %v0_97c8 to i8
  %v2_97dc = load i32, i32* @r5, align 4
  %v3_97dc = add i32 %v2_97dc, 4
  %v4_97dc = inttoptr i32 %v3_97dc to i8*
  store i8 %v1_97dc, i8* %v4_97dc, align 1
  %v0_97e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_97e0 = trunc i32 %v0_97e0 to i8
  %v2_97e0 = load i32, i32* @r6, align 4
  %v3_97e0 = add i32 %v2_97e0, 5
  %v4_97e0 = inttoptr i32 %v3_97e0 to i8*
  store i8 %v1_97e0, i8* %v4_97e0, align 1
  %v0_97e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_97e4 = trunc i32 %v0_97e4 to i8
  %v2_97e4 = load i32, i32* @r6, align 4
  %v3_97e4 = add i32 %v2_97e4, 4
  %v4_97e4 = inttoptr i32 %v3_97e4 to i8*
  store i8 %v1_97e4, i8* %v4_97e4, align 1
  %v0_97e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_97e8, label %dec_label_pc_97ec, label %dec_label_pc_97b4.dec_label_pc_9624_crit_edge

dec_label_pc_97b4.dec_label_pc_9624_crit_edge:    ; preds = %dec_label_pc_97b4
  %v1_9628.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9624

dec_label_pc_97ec:                                ; preds = %dec_label_pc_97b4, %dec_label_pc_9618
  %v0_97ec = call i32 @function_eb90()
  %v1_97ec = trunc i32 %v0_97ec to i8
  store i32 %v0_97ec, i32* %r0.global-to-local, align 4
  store i32 %v3_9300, i32* %r1.global-to-local, align 4
  %v4_97f4 = sdiv i32 %v0_97ec, 256
  store i32 %v4_97f4, i32* %r3.global-to-local, align 4
  %v1_97f8 = load i32, i32* @r4, align 4
  %v9_97f8 = icmp eq i32 %v3_9300, %v1_97f8
  store i1 %v9_97f8, i1* %cpsr_z.global-to-local, align 1
  %v3_97fc = load i32, i32* @r5, align 4
  %v4_97fc = add i32 %v3_97fc, 44
  %v5_97fc = inttoptr i32 %v4_97fc to i8*
  store i8 %v1_97ec, i8* %v5_97fc, align 1
  %v0_9800 = load i32, i32* %r3.global-to-local, align 4
  %v1_9800 = trunc i32 %v0_9800 to i8
  %v2_9800 = load i32, i32* @r7, align 4
  %v3_9800 = add i32 %v2_9800, 1
  %v4_9800 = inttoptr i32 %v3_9800 to i8*
  store i8 %v1_9800, i8* %v4_9800, align 1
  %v0_9804 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9804, label %dec_label_pc_9808, label %dec_label_pc_9630

dec_label_pc_9808:                                ; preds = %dec_label_pc_97ec, %dec_label_pc_9624
  %v0_9808 = call i32 @function_eb90()
  %v1_9808 = trunc i32 %v0_9808 to i8
  store i32 %v0_9808, i32* %r0.global-to-local, align 4
  store i32 %v1_92f4, i32* %r2.global-to-local, align 4
  %v4_9810 = sdiv i32 %v0_9808, 256
  store i32 %v4_9810, i32* %r3.global-to-local, align 4
  store i1 %v2_9634, i1* %cpsr_z.global-to-local, align 1
  %v1_9818 = trunc i32 %v4_9810 to i8
  %v2_9818 = load i32, i32* @r7, align 4
  %v3_9818 = add i32 %v2_9818, 3
  %v4_9818 = inttoptr i32 %v3_9818 to i8*
  store i8 %v1_9818, i8* %v4_9818, align 1
  %v0_981c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_981c, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_9808
  %v1_981c = load i32, i32* @r5, align 4
  %v2_981c = add i32 %v1_981c, 16
  %v3_981c = inttoptr i32 %v2_981c to i32*
  %v4_981c = load i32, i32* %v3_981c, align 4
  store i32 %v4_981c, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_9808, %bb100
  %v3_9820 = load i32, i32* @r7, align 4
  %v4_9820 = add i32 %v3_9820, 2
  %v5_9820 = inttoptr i32 %v4_9820 to i8*
  store i8 %v1_9808, i8* %v5_9820, align 1
  %v0_9824 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9824, label %dec_label_pc_982c, label %bb102

bb102:                                            ; preds = %bb101
  %v1_9824 = load i32, i32* %r3.global-to-local, align 4
  %v2_9824 = load i32, i32* @r6, align 4
  %v3_9824 = add i32 %v2_9824, 16
  %v4_9824 = inttoptr i32 %v3_9824 to i32*
  store i32 %v1_9824, i32* %v4_9824, align 4
  br label %dec_label_pc_9644

dec_label_pc_982c:                                ; preds = %dec_label_pc_9630, %bb101
  %v0_982c = call i32 @function_eb90()
  store i32 %v0_982c, i32* %r0.global-to-local, align 4
  store i32 %v1_9260, i32* %r3.global-to-local, align 4
  store i1 %v2_9834, i1* %cpsr_z.global-to-local, align 1
  %v1_9838 = load i32, i32* @r6, align 4
  %v2_9838 = add i32 %v1_9838, 16
  %v3_9838 = inttoptr i32 %v2_9838 to i32*
  store i32 %v0_982c, i32* %v3_9838, align 4
  br i1 %v2_9834, label %dec_label_pc_9650, label %dec_label_pc_9840

dec_label_pc_9840:                                ; preds = %dec_label_pc_9644, %dec_label_pc_982c
  %v0_9840 = load i32, i32* @r7, align 4
  %v1_9840 = add i32 %v0_9840, 8
  store i32 %v1_9840, i32* %r0.global-to-local, align 4
  store i32 %v6_9240, i32* @r1, align 4
  %v1_9848 = inttoptr i32 %v1_9840 to i8*
  %v2_9848 = call i32 @function_ed10(i8* %v1_9848)
  store i32 %v2_9848, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9650

dec_label_pc_9850:                                ; preds = %dec_label_pc_92e0
  %v1_9858 = add i32 %v6_9240, 8
  store i32 %v1_9858, i32* %r2.global-to-local, align 4
  %v1_985c = add i32 %v6_9240, 52
  store i32 %v1_985c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_95bc.preheader

; uselistorder directives
  uselistorder i32 %v1_985c, { 1, 0 }
  uselistorder i32 %v1_9858, { 1, 0 }
  uselistorder i32 %v4_9810, { 1, 0 }
  uselistorder i32 %v0_9808, { 0, 2, 1 }
  uselistorder i32 %v0_97ec, { 0, 2, 1 }
  uselistorder i32 %v2_978c, { 1, 0 }
  uselistorder i32 %v8_976c, { 1, 2, 0 }
  uselistorder i32 %v0_9748, { 1, 0, 2 }
  uselistorder i32 %v1_9714, { 1, 2, 0 }
  uselistorder i32 %v1_9710, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_96b4, { 1, 0, 2 }
  uselistorder i32 %v4_96b0, { 0, 2, 1 }
  uselistorder i32 %v0_9690, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_9680, { 0, 2, 1 }
  uselistorder i32 %v4_9664, { 1, 0 }
  uselistorder i32 %v7_95e8, { 1, 0, 2 }
  uselistorder i32 %v0_95bc, { 1, 0 }
  uselistorder i1 %v7_9600, { 2, 1, 0 }
  uselistorder i1 %v2_9834, { 2, 3, 1, 0 }
  uselistorder i32 %v1_957c, { 1, 0, 2 }
  uselistorder i32 %v0_9540, { 1, 0, 2 }
  uselistorder i32 %v3_93f4, { 0, 2, 1 }
  uselistorder i32 %v3_93b4, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0 }
  uselistorder i32 %v1_936c, { 1, 0 }
  uselistorder i32 %v1_9348, { 1, 0 }
  uselistorder i32 %v1_9344, { 0, 2, 1 }
  uselistorder i32 %v3_9328, { 2, 1, 0 }
  uselistorder i32 %v0_9304, { 1, 0, 2 }
  uselistorder i32 %v1_92f4, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_92f0, { 0, 2, 1 }
  uselistorder i32 %v0_92ec, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_92d8, { 1, 0 }
  uselistorder i1 %v7_92ac, { 1, 0 }
  uselistorder i32 %v3_92a8, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_9294, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_9260, { 1, 0, 2, 3 }
  uselistorder i32 %v6_9240, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_91c8, { 2, 1, 0, 3 }
  uselistorder i32 %v2_9174, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_9158, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r8.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r4.global-to-local, { 19, 20, 21, 0, 1, 2, 3, 4, 5, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18 }
  uselistorder i32* %r3.global-to-local, { 49, 50, 52, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32* %r2.global-to-local, { 41, 42, 43, 44, 45, 46, 47, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i32* %r1.global-to-local, { 37, 38, 39, 40, 41, 42, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 30, 29, 31, 32, 34, 33, 36, 35, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 30, 31, 34, 35, 32, 33, 37, 36, 3, 1, 38, 39, 40, 5, 4, 6, 7, 12, 8, 9, 10, 11, 15, 13, 14, 16, 18, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18 }
  uselistorder label %dec_label_pc_9840, { 1, 0 }
  uselistorder label %dec_label_pc_982c, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_972c, { 1, 0 }
  uselistorder label %dec_label_pc_9650, { 2, 1, 0 }
  uselistorder label %dec_label_pc_95bc.preheader, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %.thread23, { 2, 1, 0 }
}

define i32 @function_9870(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9870:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_9870 = load i32, i32* @fp, align 4
  %v1_9874 = urem i32 %arg1, 256
  store i32 %v1_9874, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_988c = urem i32 %arg3, 256
  store i32 %v1_988c, i32* @r4, align 4
  %v2_9890 = call i32 @function_129f8(i32 %v1_9874, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_9890, i32* @sl, align 4
  %v0_989c = load i32, i32* @r7, align 4
  %v2_98a0 = call i32 @function_129f8(i32 %v0_989c, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_98ac = load i32, i32* @r6, align 4
  store i32 %v0_98ac, i32* %r1.global-to-local, align 4
  store i32 %v2_98a0, i32* @sb, align 4
  %v0_98bc = load i32, i32* @r4, align 4
  %v5_98c0 = inttoptr i32 %v0_98ac to i32*
  %v6_98c0 = call i32 @function_85e0(i32 %v0_98bc, i32* %v5_98c0, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_98c8 = urem i32 %v6_98c0, 65536
  %v0_98cc = load i32, i32* @r6, align 4
  store i32 %v0_98cc, i32* %r1.global-to-local, align 4
  %v0_98d4 = load i32, i32* @r5, align 4
  %v0_98d8 = load i32, i32* @r4, align 4
  %v5_98e0 = inttoptr i32 %v0_98cc to i32*
  %v6_98e0 = call i32 @function_85e0(i32 %v0_98d8, i32* %v5_98e0, i32 6, i32 %v0_98d4, i32 %v3_98c8)
  %v0_98e4 = load i32, i32* @r6, align 4
  store i32 %v0_98e4, i32* %r1.global-to-local, align 4
  %v3_98e8 = mul i32 %v6_98e0, 65536
  store i32 %v3_98e8, i32* %fp.global-to-local, align 4
  %v0_98f4 = load i32, i32* @r4, align 4
  %v5_98f8 = inttoptr i32 %v0_98e4 to i32*
  %v6_98f8 = call i32 @function_85e0(i32 %v0_98f4, i32* %v5_98f8, i32 0, i32 1024, i32 ptrtoint (i32* @0 to i32))
  %v0_9904 = load i32, i32* @r6, align 4
  store i32 %v0_9904, i32* %r1.global-to-local, align 4
  %v0_9908 = load i32, i32* @r4, align 4
  %v3_9910 = urem i32 %v6_98f8, 65536
  store i32 %v3_9910, i32* @r6, align 4
  %v5_9914 = inttoptr i32 %v0_9904 to i32*
  %v6_9914 = call i32 @function_85e0(i32 %v0_9908, i32* %v5_9914, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_9918 = load i32, i32* %fp.global-to-local, align 4
  %v3_9918 = udiv i32 %v0_9918, 65536
  %v1_9920 = load i32, i32* @r5, align 4
  %v9_9920 = icmp eq i32 %v3_9918, %v1_9920
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_9920, label %dec_label_pc_9948, label %bb

bb:                                               ; preds = %dec_label_pc_9870
  %v2_9934 = mul nuw nsw i32 %v3_9918, 256
  %v4_9938 = and i32 %v2_9934, 65280
  %v1_993c = urem i32 %v6_9914, 256
  store i32 %v1_993c, i32* @r8, align 4
  %v5_9940 = udiv i32 %v0_9918, 16777216
  %v6_9940 = or i32 %v4_9938, %v5_9940
  br label %dec_label_pc_9954

dec_label_pc_9948:                                ; preds = %dec_label_pc_9870
  %v1_993c7 = urem i32 %v6_9914, 256
  store i32 %v1_993c7, i32* @r8, align 4
  %v0_9948 = call i32 @function_eb90()
  %v3_9950 = urem i32 %v0_9948, 65536
  br label %dec_label_pc_9954

dec_label_pc_9954:                                ; preds = %bb, %dec_label_pc_9948
  %storemerge17 = phi i32 [ %v6_9940, %bb ], [ %v3_9950, %dec_label_pc_9948 ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_9954 = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_9954, 1
  br i1 %tmp41, label %dec_label_pc_9afc.preheader, label %dec_label_pc_995c

dec_label_pc_9afc.preheader:                      ; preds = %dec_label_pc_9a58, %dec_label_pc_9954
  %storemerge3.in12.ph = phi i32 [ %v0_9954, %dec_label_pc_9954 ], [ %v1_99b0, %dec_label_pc_9a58 ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_9ac4, label %dec_label_pc_9ac8.lr.ph

dec_label_pc_995c:                                ; preds = %dec_label_pc_9954
  store i32 %v3_98c8, i32* %r1.global-to-local, align 4
  %v3_9960 = udiv i32 %v6_98c0, 256
  %v5_996c = trunc i32 %v3_9960 to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_9984 = udiv i32 %v6_98c0, 65536
  store i32 %v3_9984, i32* @r4, align 4
  %v4_9994 = trunc i32 %v3_9984 to i8
  store i8 %v4_9994, i8* %stack_var_-80, align 1
  %v3_9aa4 = icmp eq i32 %v3_98c8, 65535
  %v2_99cc = ptrtoint i32* %stack_var_-52 to i32
  %v3_99fc = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_9a88

dec_label_pc_999c:                                ; preds = %dec_label_pc_9a88
  %v2_999c = load i8, i8* %stack_var_-80, align 1
  %v3_999c = sext i8 %v2_999c to i32
  store i32 %v3_999c, i32* %r1.global-to-local, align 4
  store i32 %v3_9960, i32* @r4, align 4
  %v2_99a0 = load i32, i32* @r5, align 4
  %v3_99a0 = add i32 %v2_99a0, 2
  %v4_99a0 = inttoptr i32 %v3_99a0 to i8*
  store i8 %v5_996c, i8* %v4_99a0, align 1
  %v0_99a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_99a4 = trunc i32 %v0_99a4 to i8
  %v2_99a4 = load i32, i32* @r5, align 4
  %v3_99a4 = add i32 %v2_99a4, 3
  %v4_99a4 = inttoptr i32 %v3_99a4 to i8*
  store i8 %v1_99a4, i8* %v4_99a4, align 1
  br label %dec_label_pc_99a8

dec_label_pc_99a8:                                ; preds = %dec_label_pc_9ab0, %dec_label_pc_999c
  %v1_99b0 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_99c0 = call i32 @function_1270c(i32 2, i32 2, i32 0)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_99c8 = icmp eq i32 %v3_99c0, -1
  store i32 %v2_99cc, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v2_99dc = load i32, i32* @sb, align 4
  %v3_99dc = add i32 %v2_99dc, %stack_var_-60.0
  %v4_99dc = inttoptr i32 %v3_99dc to i32*
  store i32 %v3_99c0, i32* %v4_99dc, align 4
  br i1 %v7_99c8, label %dec_label_pc_9b08, label %dec_label_pc_99e4

dec_label_pc_99e4:                                ; preds = %dec_label_pc_99a8
  store i32 2, i32* %stack_var_-52, align 4
  %v4_99fc = call i32 @function_1253c(i32 %v3_99c0, %sockaddr* %v3_99fc, i32 16)
  %v0_9a00 = load i32, i32* @r5, align 4
  %v1_9a00 = add i32 %v0_9a00, 20
  %v2_9a00 = inttoptr i32 %v1_9a00 to i8*
  %v3_9a00 = load i8, i8* %v2_9a00, align 1
  %tmp = icmp ugt i8 %v3_9a00, 31
  br i1 %tmp, label %dec_label_pc_9a58, label %dec_label_pc_9a0c

dec_label_pc_9a0c:                                ; preds = %dec_label_pc_99e4
  %v1_9a0c = add i32 %v0_9a00, 16
  %v2_9a0c = inttoptr i32 %v1_9a0c to i32*
  %v3_9a0c = load i32, i32* %v2_9a0c, align 4
  store i32 %v3_9a0c, i32* @r4, align 4
  %v0_9a10 = call i32 @function_eb90()
  %v0_9a14 = load i32, i32* @r4, align 4
  %v1_9a18 = and i32 %v0_9a14, 65280
  %v3_9a20 = mul i32 %v0_9a14, 16777216
  %v4_9a24 = mul nuw nsw i32 %v1_9a18, 256
  %v5_9a24 = or i32 %v4_9a24, %v3_9a20
  store i32 %v5_9a24, i32* %r1.global-to-local, align 4
  %v0_9a2c = load i32, i32* @r5, align 4
  %v1_9a2c = add i32 %v0_9a2c, 20
  %v2_9a2c = inttoptr i32 %v1_9a2c to i8*
  %v3_9a2c = load i8, i8* %v2_9a2c, align 1
  %v4_9a2c = zext i8 %v3_9a2c to i32
  %v2_9a30 = call i32 @llvm.bswap.i32(i32 %v0_9a14)
  %v7_9a34 = lshr i32 %v0_9a10, %v4_9a2c
  %v8_9a34 = add i32 %v7_9a34, %v2_9a30
  %v3_9a40 = mul i32 %v8_9a34, 16777216
  %v1_9a44 = and i32 %v8_9a34, 65280
  %v4_9a48 = mul nuw nsw i32 %v1_9a44, 256
  %v5_9a48 = or i32 %v4_9a48, %v3_9a40
  store i32 %v5_9a48, i32* %r1.global-to-local, align 4
  %v2_9a50 = call i32 @llvm.bswap.i32(i32 %v8_9a34)
  %v2_9a54 = add i32 %v0_9a2c, 4
  %v3_9a54 = inttoptr i32 %v2_9a54 to i32*
  store i32 %v2_9a50, i32* %v3_9a54, align 4
  %v0_9a64.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9a58

dec_label_pc_9a58:                                ; preds = %dec_label_pc_99e4, %dec_label_pc_9a0c
  %v0_9a64 = phi i32 [ %v0_9a00, %dec_label_pc_99e4 ], [ %v0_9a64.pre, %dec_label_pc_9a0c ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_9a60 = load i32, i32* @sb, align 4
  %v2_9a60 = add i32 %v1_9a60, %stack_var_-60.0
  %v3_9a60 = inttoptr i32 %v2_9a60 to i32*
  %v4_9a60 = load i32, i32* %v3_9a60, align 4
  store i32 %v0_9a64, i32* %r1.global-to-local, align 4
  %v3_9a68 = inttoptr i32 %v0_9a64 to %sockaddr*
  %v4_9a68 = call i32 @function_12568(i32 %v4_9a60, %sockaddr* %v3_9a68, i32 16)
  %v1_9a74 = add i32 %stack_var_-60.0, 4
  %v1_9a78 = load i32, i32* @r7, align 4
  %v9_9a78 = icmp eq i32 %v1_99b0, %v1_9a78
  %v0_9a80 = load i32, i32* @r5, align 4
  %v1_9a80 = add i32 %v0_9a80, 24
  store i32 %v1_9a80, i32* @r5, align 4
  br i1 %v9_9a78, label %dec_label_pc_9afc.preheader, label %dec_label_pc_9a88

dec_label_pc_9a88:                                ; preds = %dec_label_pc_9a58, %dec_label_pc_995c
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_995c ], [ %v1_9a74, %dec_label_pc_9a58 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_995c ], [ %v1_99b0, %dec_label_pc_9a58 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_9a94 = call i32 @function_129f8(i32 65535, i32 1)
  store i32 %v3_98c8, i32* %r1.global-to-local, align 4
  %v2_9aa8 = load i32, i32* @sl, align 4
  %v3_9aa8 = add i32 %v2_9aa8, %stack_var_-60.0
  %v4_9aa8 = inttoptr i32 %v3_9aa8 to i32*
  store i32 %v2_9a94, i32* %v4_9aa8, align 4
  br i1 %v3_9aa4, label %dec_label_pc_9ab0, label %dec_label_pc_999c

dec_label_pc_9ab0:                                ; preds = %dec_label_pc_9a88
  %v0_9ab0 = call i32 @function_eb90()
  %v1_9ab0 = trunc i32 %v0_9ab0 to i8
  %v4_9ab4 = sdiv i32 %v0_9ab0, 256
  %v1_9ab8 = trunc i32 %v4_9ab4 to i8
  %v2_9ab8 = load i32, i32* @r5, align 4
  %v3_9ab8 = add i32 %v2_9ab8, 3
  %v4_9ab8 = inttoptr i32 %v3_9ab8 to i8*
  store i8 %v1_9ab8, i8* %v4_9ab8, align 1
  %v3_9abc = load i32, i32* @r5, align 4
  %v4_9abc = add i32 %v3_9abc, 2
  %v5_9abc = inttoptr i32 %v4_9abc to i8*
  store i8 %v1_9ab0, i8* %v5_9abc, align 1
  br label %dec_label_pc_99a8

dec_label_pc_9ac4:                                ; preds = %dec_label_pc_9afc.loopexit, %dec_label_pc_9afc.preheader, %dec_label_pc_9b00.loopexit, %dec_label_pc_9ac4
  br label %dec_label_pc_9ac4

dec_label_pc_9ac8:                                ; preds = %dec_label_pc_9ac8.lr.ph, %dec_label_pc_9b00.loopexit
  %v0_9ac8 = load i32, i32* @r8, align 4
  %v2_9ac8 = icmp eq i32 %v0_9ac8, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_9ac8, label %dec_label_pc_9ad0, label %dec_label_pc_9b10

dec_label_pc_9ad0:                                ; preds = %dec_label_pc_9ac8
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_9ad8

dec_label_pc_9ad8:                                ; preds = %dec_label_pc_9ad8, %dec_label_pc_9ad0
  %v0_9ae0 = phi i32 [ %v1_9ae0, %dec_label_pc_9ad8 ], [ 0, %dec_label_pc_9ad0 ]
  %v0_9ad8 = phi i32 [ %v1_9af4, %dec_label_pc_9ad8 ], [ 0, %dec_label_pc_9ad0 ]
  %v1_9ad8 = load i32, i32* @sb, align 4
  %v2_9ad8 = add i32 %v1_9ad8, %v0_9ad8
  %v3_9ad8 = inttoptr i32 %v2_9ad8 to i32*
  %v4_9ad8 = load i32, i32* %v3_9ad8, align 4
  %v1_9adc = load i32, i32* @sl, align 4
  %v2_9adc = add i32 %v1_9adc, %v0_9ad8
  %v3_9adc = inttoptr i32 %v2_9adc to i32*
  %v4_9adc = load i32, i32* %v3_9adc, align 4
  store i32 %v4_9adc, i32* %r1.global-to-local, align 4
  %v1_9ae0 = add i32 %v0_9ae0, 1
  %v0_9ae4 = load i32, i32* @r6, align 4
  %v4_9aec = inttoptr i32 %v4_9adc to i32*
  %v5_9aec = call i32 @function_1267c(i32 %v4_9ad8, i32* %v4_9aec, i32 %v0_9ae4, i32 16384)
  %v1_9af0 = load i32, i32* @r7, align 4
  %v9_9af0 = icmp eq i32 %v1_9ae0, %v1_9af0
  %v0_9af4 = load i32, i32* @r4, align 4
  %v1_9af4 = add i32 %v0_9af4, 4
  store i32 %v1_9af4, i32* @r4, align 4
  br i1 %v9_9af0, label %dec_label_pc_9afc.loopexit, label %dec_label_pc_9ad8

dec_label_pc_9afc.loopexit:                       ; preds = %dec_label_pc_9ad8
  %tmp4247 = icmp slt i32 %v1_9ae0, 1
  br i1 %tmp4247, label %dec_label_pc_9ac4, label %dec_label_pc_9ac8.lr.ph

dec_label_pc_9ac8.lr.ph:                          ; preds = %dec_label_pc_9afc.preheader, %dec_label_pc_9afc.loopexit
  br label %dec_label_pc_9ac8

dec_label_pc_9b00.loopexit:                       ; preds = %dec_label_pc_9b18
  %tmp42 = icmp slt i32 %v0_9b40, 1
  br i1 %tmp42, label %dec_label_pc_9ac4, label %dec_label_pc_9ac8

dec_label_pc_9b08:                                ; preds = %dec_label_pc_99a8
  store i32 %v24_9870, i32* %fp.global-to-local, align 4
  ret i32 %v3_99c0

dec_label_pc_9b10:                                ; preds = %dec_label_pc_9ac8
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_9b18

dec_label_pc_9b18:                                ; preds = %dec_label_pc_9b18, %dec_label_pc_9b10
  %v0_9b18 = phi i32 [ %v1_9b44, %dec_label_pc_9b18 ], [ 0, %dec_label_pc_9b10 ]
  %v1_9b18 = load i32, i32* @sl, align 4
  %v2_9b18 = add i32 %v1_9b18, %v0_9b18
  %v3_9b18 = inttoptr i32 %v2_9b18 to i32*
  %v4_9b18 = load i32, i32* %v3_9b18, align 4
  store i32 %v4_9b18, i32* @r4, align 4
  %v0_9b1c = load i32, i32* @r6, align 4
  store i32 %v0_9b1c, i32* @r1, align 4
  %v1_9b24 = inttoptr i32 %v4_9b18 to i8*
  %v2_9b24 = call i32 @function_ed10(i8* %v1_9b24)
  %v0_9b28 = load i32, i32* @r5, align 4
  %v1_9b28 = add i32 %v0_9b28, 1
  store i32 %v1_9b28, i32* @r5, align 4
  %v0_9b2c = load i32, i32* @fp, align 4
  %v1_9b2c = load i32, i32* @sb, align 4
  %v2_9b2c = add i32 %v1_9b2c, %v0_9b2c
  %v3_9b2c = inttoptr i32 %v2_9b2c to i32*
  %v4_9b2c = load i32, i32* %v3_9b2c, align 4
  %v0_9b30 = load i32, i32* @r4, align 4
  store i32 %v0_9b30, i32* %r1.global-to-local, align 4
  %v0_9b34 = load i32, i32* @r6, align 4
  %v4_9b3c = inttoptr i32 %v0_9b30 to i32*
  %v5_9b3c = call i32 @function_1267c(i32 %v4_9b2c, i32* %v4_9b3c, i32 %v0_9b34, i32 16384)
  %v0_9b40 = load i32, i32* @r5, align 4
  %v1_9b40 = load i32, i32* @r7, align 4
  %v9_9b40 = icmp eq i32 %v0_9b40, %v1_9b40
  %v0_9b44 = load i32, i32* @fp, align 4
  %v1_9b44 = add i32 %v0_9b44, 4
  store i32 %v1_9b44, i32* @fp, align 4
  br i1 %v9_9b40, label %dec_label_pc_9b00.loopexit, label %dec_label_pc_9b18

; uselistorder directives
  uselistorder i32 %v1_9b44, { 1, 0 }
  uselistorder i32 %v0_9b40, { 1, 0 }
  uselistorder i32 %v1_9af4, { 1, 0 }
  uselistorder i32 %v1_9ae0, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_9a64, { 1, 0 }
  uselistorder i32 %v8_9a34, { 1, 2, 0 }
  uselistorder i32 %v0_9a14, { 1, 0, 2 }
  uselistorder i32 %v3_99c0, { 1, 3, 2, 0 }
  uselistorder i32 %v1_99b0, { 1, 2, 0 }
  uselistorder i32 %v3_9984, { 1, 0 }
  uselistorder i32 %v3_9960, { 1, 0 }
  uselistorder i32 %v3_98c8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_9874, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 16, 1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 14, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_9ac8.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_9ac8, { 1, 0 }
  uselistorder label %dec_label_pc_9ac4, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_9a58, { 1, 0 }
  uselistorder label %dec_label_pc_9954, { 1, 0 }
}

define i32 @function_9b54(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9b54:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_9b58 = urem i32 %arg1, 256
  store i32 %v1_9b58, i32* @fp, align 4
  store i32 %v1_9b58, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_9b70 = urem i32 %arg3, 256
  store i32 %v1_9b70, i32* @r4, align 4
  %v2_9b74 = call i32 @function_129f8(i32 %v1_9b58, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_9b80 = load i32, i32* @fp, align 4
  store i32 %v0_9b80, i32* %r0.global-to-local, align 4
  %v2_9b84 = call i32 @function_129f8(i32 %v0_9b80, i32 4)
  %v0_9b88 = load i32, i32* @r5, align 4
  store i32 %v0_9b88, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9b98 = load i32, i32* @r4, align 4
  store i32 %v0_9b98, i32* %r0.global-to-local, align 4
  %v5_9b9c = inttoptr i32 %v0_9b88 to i32*
  %v6_9b9c = call i32 @function_85e0(i32 %v0_9b98, i32* %v5_9b9c, i32 2, i32 0, i32 %v2_9b84)
  %v1_9ba8 = urem i32 %v6_9b9c, 256
  store i32 %v1_9ba8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9bb4 = load i32, i32* @r5, align 4
  store i32 %v0_9bb4, i32* %r1.global-to-local, align 4
  %v0_9bb8 = load i32, i32* @r4, align 4
  store i32 %v0_9bb8, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_9b9c, 16777216
  %v5_9bc0 = sdiv i32 %sext, 16777216
  %v6_9bc0 = inttoptr i32 %v0_9bb4 to i32*
  %v7_9bc0 = call i32 @function_85e0(i32 %v0_9bb8, i32* %v6_9bc0, i32 3, i32 65535, i32 %v5_9bc0)
  %v0_9bc4 = load i32, i32* @r5, align 4
  store i32 %v0_9bc4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9bc0, i32* @r6, align 4
  %v0_9bd4 = load i32, i32* @r4, align 4
  store i32 %v0_9bd4, i32* %r0.global-to-local, align 4
  %v5_9bd8 = inttoptr i32 %v0_9bc4 to i32*
  %v6_9bd8 = call i32 @function_85e0(i32 %v0_9bd4, i32* %v5_9bd8, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_9be0 = urem i32 %v6_9bd8, 256
  store i32 %v1_9be0, i32* %ip.global-to-local, align 4
  %v0_9be4 = load i32, i32* @r5, align 4
  store i32 %v0_9be4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9bf0 = load i32, i32* @r4, align 4
  store i32 %v0_9bf0, i32* %r0.global-to-local, align 4
  %sext6 = mul i32 %v6_9bd8, 16777216
  %v5_9bf8 = sdiv i32 %sext6, 16777216
  %v6_9bf8 = inttoptr i32 %v0_9be4 to i32*
  %v7_9bf8 = call i32 @function_85e0(i32 %v0_9bf0, i32* %v6_9bf8, i32 5, i32 1, i32 %v5_9bf8)
  %v1_9c04 = urem i32 %v7_9bf8, 256
  store i32 %v1_9c04, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9c0c = load i32, i32* @r5, align 4
  store i32 %v0_9c0c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_9c14 = load i32, i32* @r4, align 4
  store i32 %v0_9c14, i32* %r0.global-to-local, align 4
  %v5_9c1c = inttoptr i32 %v0_9c0c to i32*
  %v6_9c1c = call i32 @function_85e0(i32 %v0_9c14, i32* %v5_9c1c, i32 7, i32 65535, i32 %v1_9c04)
  %v0_9c20 = load i32, i32* @r5, align 4
  store i32 %v0_9c20, i32* %r1.global-to-local, align 4
  %v3_9c24 = mul i32 %v6_9c1c, 65536
  store i32 %v3_9c24, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9c30 = load i32, i32* @r4, align 4
  store i32 %v0_9c30, i32* %r0.global-to-local, align 4
  %v5_9c34 = inttoptr i32 %v0_9c20 to i32*
  %v6_9c34 = call i32 @function_85e0(i32 %v0_9c30, i32* %v5_9c34, i32 11, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9c3c = urem i32 %v6_9c34, 256
  store i32 %v1_9c3c, i32* %ip.global-to-local, align 4
  %v0_9c40 = load i32, i32* @r5, align 4
  store i32 %v0_9c40, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9c4c = load i32, i32* @r4, align 4
  store i32 %v0_9c4c, i32* %r0.global-to-local, align 4
  %v5_9c54 = inttoptr i32 %v0_9c40 to i32*
  %v6_9c54 = call i32 @function_85e0(i32 %v0_9c4c, i32* %v5_9c54, i32 12, i32 1, i32 %v1_9c3c)
  %v1_9c5c = urem i32 %v6_9c54, 256
  store i32 %v1_9c5c, i32* %ip.global-to-local, align 4
  %v0_9c60 = load i32, i32* @r5, align 4
  store i32 %v0_9c60, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9c6c = load i32, i32* @r4, align 4
  store i32 %v0_9c6c, i32* %r0.global-to-local, align 4
  %v5_9c74 = inttoptr i32 %v0_9c60 to i32*
  %v6_9c74 = call i32 @function_85e0(i32 %v0_9c6c, i32* %v5_9c74, i32 13, i32 1, i32 %v1_9c5c)
  %v1_9c7c = urem i32 %v6_9c74, 256
  store i32 %v1_9c7c, i32* %ip.global-to-local, align 4
  %v0_9c80 = load i32, i32* @r5, align 4
  store i32 %v0_9c80, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9c8c = load i32, i32* @r4, align 4
  store i32 %v0_9c8c, i32* %r0.global-to-local, align 4
  %v5_9c94 = inttoptr i32 %v0_9c80 to i32*
  %v6_9c94 = call i32 @function_85e0(i32 %v0_9c8c, i32* %v5_9c94, i32 14, i32 1, i32 %v1_9c7c)
  %v1_9c9c = urem i32 %v6_9c94, 256
  store i32 %v1_9c9c, i32* %ip.global-to-local, align 4
  %v0_9ca0 = load i32, i32* @r5, align 4
  store i32 %v0_9ca0, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9cac = load i32, i32* @r4, align 4
  store i32 %v0_9cac, i32* %r0.global-to-local, align 4
  %v5_9cb4 = inttoptr i32 %v0_9ca0 to i32*
  %v6_9cb4 = call i32 @function_85e0(i32 %v0_9cac, i32* %v5_9cb4, i32 15, i32 1, i32 %v1_9c9c)
  %v1_9cbc = urem i32 %v6_9cb4, 256
  store i32 %v1_9cbc, i32* %ip.global-to-local, align 4
  %v0_9cc0 = load i32, i32* @r5, align 4
  store i32 %v0_9cc0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9ccc = load i32, i32* @r4, align 4
  store i32 %v0_9ccc, i32* %r0.global-to-local, align 4
  %v5_9cd4 = inttoptr i32 %v0_9cc0 to i32*
  %v6_9cd4 = call i32 @function_85e0(i32 %v0_9ccc, i32* %v5_9cd4, i32 16, i32 1, i32 %v1_9cbc)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_9cd4, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_9ce4 = load i32, i32* @r5, align 4
  store i32 %v0_9ce4, i32* %r1.global-to-local, align 4
  %v0_9ce8 = load i32, i32* @r4, align 4
  store i32 %v0_9ce8, i32* %r0.global-to-local, align 4
  %v1_9cec = urem i32 %v6_9cd4, 256
  store i32 %v1_9cec, i32* @r8, align 4
  %v5_9cf0 = inttoptr i32 %v0_9ce4 to i32*
  %v6_9cf0 = call i32 @function_85e0(i32 %v0_9ce8, i32* %v5_9cf0, i32 0, i32 768, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9cfc = load i32, i32* @r5, align 4
  store i32 %v0_9cfc, i32* %r1.global-to-local, align 4
  store i32 %v6_9cf0, i32* @sb, align 4
  %v0_9d04 = load i32, i32* @r4, align 4
  store i32 %v0_9d04, i32* %r0.global-to-local, align 4
  %v5_9d08 = inttoptr i32 %v0_9cfc to i32*
  %v6_9d08 = call i32 @function_85e0(i32 %v0_9d04, i32* %v5_9d08, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_9d14 = urem i32 %v6_9d08, 256
  store i32 %v1_9d14, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9d24 = call i32 @function_1270c(i32 2, i32 3, i32 6)
  store i32 %v3_9d24, i32* %r0.global-to-local, align 4
  %v0_9d28 = load i32, i32* @r7, align 4
  %v3_9d28 = udiv i32 %v0_9d28, 65536
  store i32 %v3_9d28, i32* %r1.global-to-local, align 4
  %v7_9d2c = icmp eq i32 %v3_9d24, -1
  store i1 %v7_9d2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9d2c, label %dec_label_pc_9f88, label %dec_label_pc_9d3c

dec_label_pc_9d3c:                                ; preds = %dec_label_pc_9b54
  store i32 1, i32* %stack_var_-40, align 4
  %v6_9d44 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_9d44, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_9d58 = call i32 @function_126dc(i32 %v3_9d24, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_9d58, i32* %r0.global-to-local, align 4
  %v7_9d5c = icmp eq i32 %v6_9d58, -1
  store i1 %v7_9d5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9d5c, label %dec_label_pc_9f80, label %dec_label_pc_9d64

dec_label_pc_9d64:                                ; preds = %dec_label_pc_9d3c
  %v0_9d64 = load i32, i32* @fp, align 4
  %v2_9d64 = icmp eq i32 %v0_9d64, 0
  store i1 %v2_9d64, i1* %cpsr_z.global-to-local, align 1
  %v0_9d68 = load i32, i32* @r6, align 4
  %v3_9d68 = mul i32 %v0_9d68, 65536
  store i32 %v3_9d68, i32* %r0.global-to-local, align 4
  %v3_9d6c = urem i32 %v0_9d68, 65536
  store i32 %v3_9d6c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_9d64, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_9d90.preheader

.thread18:                                        ; preds = %dec_label_pc_9d64
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_a214

dec_label_pc_9d90.preheader:                      ; preds = %dec_label_pc_9d64
  %v5_9d74 = load i32, i32* @r7, align 4
  %v8_9d74 = udiv i32 %v5_9d74, 16777216
  %tmp73 = udiv i32 %v0_9d68, 256
  %v8_9d78 = urem i32 %tmp73, 256
  store i32 %v8_9d78, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_9e7c = icmp ugt i32 %v0_9d28, -65537
  %v2_9ea0 = ptrtoint i32* %stack_var_-60 to i32
  %v3_9eac = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_9edc = ptrtoint i32* %stack_var_-76 to i32
  %v2_9ee0 = ptrtoint i32* %stack_var_-44 to i32
  %v2_9ee4 = ptrtoint i32* %stack_var_-332 to i32
  %v4_9f30 = zext i8 %tmp31 to i32
  %v4_9f34 = zext i8 %tmp30 to i32
  %v4_9f40 = mul nuw nsw i32 %v4_9f34, 256
  %v4_9f50 = zext i8 %tmp to i32
  %v1_9f54 = and i32 %v4_9f50, 18
  %v2_9f58 = icmp eq i32 %v1_9f54, 18
  %v1_9e8c = mul nuw nsw i32 %v3_9d28, 256
  %v4_9e90 = and i32 %v1_9e8c, 65280
  %v5_9e90 = or i32 %v8_9d74, %v4_9e90
  %v3_9e9493 = udiv i32 %v4_9e90, 256
  %v1_9e98 = trunc i32 %v3_9e9493 to i8
  %v1_a05c = mul i32 %v0_9d68, 256
  %v4_a064 = and i32 %v1_a05c, 65280
  %v5_9f40 = or i32 %v4_9f30, %v4_9f40
  %v1_9f60 = and i32 %v4_9f50, 5
  %v2_9f60 = icmp eq i32 %v1_9f60, 0
  %v1_9e9c = trunc i32 %v8_9d74 to i8
  %v5_a064 = or i32 %v8_9d78, %v4_a064
  %v1_a084 = trunc i32 %v5_9bc0 to i8
  %v1_a164 = urem i32 %v6_9c34, 2
  %tmp94 = sub nsw i32 0, %v1_a164
  %v4_a16c = and i32 %tmp94, 32
  %v1_a17c = urem i32 %v6_9c54, 2
  %tmp95 = sub nsw i32 0, %v1_a17c
  %v4_a184 = and i32 %tmp95, 16
  %v1_a194 = urem i32 %v6_9c74, 2
  %tmp96 = sub nsw i32 0, %v1_a194
  %v4_a19c = and i32 %tmp96, 8
  %v1_a1ac = urem i32 %v6_9c94, 2
  %tmp97 = sub nsw i32 0, %v1_a1ac
  %v4_a1b4 = and i32 %tmp97, 4
  %v1_a1c4 = urem i32 %v6_9cb4, 2
  %tmp98 = sub nsw i32 0, %v1_a1c4
  %v3_a1cc = and i32 %tmp98, 2
  br label %dec_label_pc_9d90

dec_label_pc_9d90:                                ; preds = %dec_label_pc_a200, %dec_label_pc_9f68, %dec_label_pc_9d90.preheader
  store i32 %v8_9d78, i32* %r3.global-to-local, align 4
  %v0_9d9c = load i32, i32* @sb, align 4
  %v1_9d9c = add i32 %v0_9d9c, 40
  store i32 %v1_9d9c, i32* @sl, align 4
  br label %dec_label_pc_9da0

dec_label_pc_9da0:                                ; preds = %dec_label_pc_9f74, %dec_label_pc_9d90
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9dac = call i32 @function_1270c(i32 2, i32 1, i32 0)
  store i32 %v3_9dac, i32* %r0.global-to-local, align 4
  %v7_9db0 = icmp eq i32 %v3_9dac, -1
  store i1 %v7_9db0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9dac, i32* @r7, align 4
  br i1 %v7_9db0, label %dec_label_pc_a200, label %dec_label_pc_9dbc

dec_label_pc_9dbc:                                ; preds = %dec_label_pc_9da0
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_9dc4 = call i32 @function_11d38(i32 %v3_9dac, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9dcc = or i32 %v2_9dc4, 2048
  store i32 %v1_9dcc, i32* @r2, align 4
  %v0_9dd0 = load i32, i32* @r7, align 4
  store i32 %v0_9dd0, i32* %r0.global-to-local, align 4
  %v2_9dd4 = call i32 @function_11d38(i32 %v0_9dd0, i32 4)
  store i32 %v2_9dd4, i32* %r0.global-to-local, align 4
  %v3_9dd8 = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9de8 = mul i32 %v3_9dd8, 24
  store i32 %v5_9de8, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_9df8 = add i32 %v5_9de8, %arg2
  store i32 %v2_9df8, i32* %r2.global-to-local, align 4
  %v1_9dfc = add i32 %v2_9df8, 20
  %v2_9dfc = inttoptr i32 %v1_9dfc to i8*
  %v3_9dfc = load i8, i8* %v2_9dfc, align 1
  %v4_9dfc = zext i8 %v3_9dfc to i32
  store i32 %v4_9dfc, i32* %r3.global-to-local, align 4
  %v2_9e00 = icmp ugt i8 %v3_9dfc, 30
  %v7_9e00 = icmp eq i8 %v3_9dfc, 31
  store i1 %v7_9e00, i1* %cpsr_z.global-to-local, align 1
  %v2_9e04 = xor i1 %v7_9e00, true
  %v3_9e04 = and i1 %v2_9e00, %v2_9e04
  %v5_9e04 = add i32 %v2_9df8, 16
  %v6_9e04 = inttoptr i32 %v5_9e04 to i32*
  %v7_9e04 = load i32, i32* %v6_9e04, align 4
  br i1 %v3_9e04, label %dec_label_pc_9e70, label %dec_label_pc_9e10

dec_label_pc_9e10:                                ; preds = %dec_label_pc_9dbc
  store i32 %v7_9e04, i32* @r4, align 4
  %v0_9e14 = call i32 @function_eb90()
  store i32 %v0_9e14, i32* %r0.global-to-local, align 4
  %v3_9e18 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_9e24 = mul i32 %v3_9e18, 24
  %v0_9e28 = load i32, i32* @r4, align 4
  %v2_9e2c = add i32 %v5_9e24, %arg2
  store i32 %v2_9e2c, i32* %r1.global-to-local, align 4
  %v1_9e30 = and i32 %v0_9e28, 65280
  store i32 %v1_9e30, i32* %r3.global-to-local, align 4
  %v1_9e28 = udiv i32 %v0_9e28, 256
  %v3_9e34 = and i32 %v1_9e28, 65280
  store i32 %v3_9e34, i32* %r2.global-to-local, align 4
  %v3_9e38 = mul i32 %v0_9e28, 16777216
  store i32 %v3_9e38, i32* %ip.global-to-local, align 4
  %v1_9e3c = add i32 %v2_9e2c, 20
  %v2_9e3c = inttoptr i32 %v1_9e3c to i8*
  %v3_9e3c = load i8, i8* %v2_9e3c, align 1
  %v4_9e3c = zext i8 %v3_9e3c to i32
  store i32 %v4_9e3c, i32* %lr.global-to-local, align 4
  %v4_9e40 = mul nuw nsw i32 %v1_9e30, 256
  %v5_9e40 = or i32 %v4_9e40, %v3_9e38
  store i32 %v5_9e40, i32* %ip.global-to-local, align 4
  %v2_9e48 = call i32 @llvm.bswap.i32(i32 %v0_9e28)
  %v7_9e4c = lshr i32 %v0_9e14, %v4_9e3c
  %v8_9e4c = add i32 %v7_9e4c, %v2_9e48
  store i32 %v8_9e4c, i32* %r2.global-to-local, align 4
  %v3_9e58 = mul i32 %v8_9e4c, 16777216
  %v1_9e5c = and i32 %v8_9e4c, 65280
  store i32 %v1_9e5c, i32* %r0.global-to-local, align 4
  %v4_9e60 = mul nuw nsw i32 %v1_9e5c, 256
  %v5_9e60 = or i32 %v4_9e60, %v3_9e58
  store i32 %v5_9e60, i32* %r1.global-to-local, align 4
  %v2_9e68 = call i32 @llvm.bswap.i32(i32 %v8_9e4c)
  br label %dec_label_pc_9e70

dec_label_pc_9e70:                                ; preds = %dec_label_pc_9dbc, %dec_label_pc_9e10
  %storemerge25 = phi i32 [ %v2_9e68, %dec_label_pc_9e10 ], [ %v7_9e04, %dec_label_pc_9dbc ]
  store i32 %v3_9d28, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_9e7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9e7c, label %dec_label_pc_9f90, label %dec_label_pc_9e84

dec_label_pc_9e84:                                ; preds = %dec_label_pc_9e70
  store i32 %v8_9d74, i32* %ip.global-to-local, align 4
  store i32 %v5_9e90, i32* %r3.global-to-local, align 4
  store i32 %v3_9e9493, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9ea0

dec_label_pc_9ea0:                                ; preds = %dec_label_pc_9f90, %dec_label_pc_9e84
  %stack_var_-57.0 = phi i8 [ %v1_9f98, %dec_label_pc_9f90 ], [ %v1_9e98, %dec_label_pc_9e84 ]
  %storemerge = phi i8 [ %v1_9f90, %dec_label_pc_9f90 ], [ %v1_9e9c, %dec_label_pc_9e84 ]
  store i32 %v2_9ea0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9ea8 = load i32, i32* @r7, align 4
  store i32 %v0_9ea8, i32* %r0.global-to-local, align 4
  %v4_9eac = call i32 @function_12568(i32 %v0_9ea8, %sockaddr* nonnull %v3_9eac, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9eb4 = call i32 @function_120cc(i32* null)
  store i32 %v2_9eb4, i32* %r0.global-to-local, align 4
  store i32 %v2_9eb4, i32* @r4, align 4
  %v9_9f14 = icmp eq i32 %tmp32, %storemerge25
  %v4_9f38 = zext i8 %storemerge to i32
  %v4_9f3c = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_9f14 to i32
  %v9_9f28 = icmp eq i1 %v9_9f14, false
  %v4_9f44 = mul nuw nsw i32 %v4_9f3c, 256
  %v5_9f44 = or i32 %v4_9f44, %v4_9f38
  %v9_9f48 = icmp eq i32 %v5_9f44, %v5_9f40
  br label %dec_label_pc_9ed0

dec_label_pc_9ec0:                                ; preds = %.thread23, %dec_label_pc_9f30, %dec_label_pc_9f60, %bb75
  %v2_9ec0 = call i32 @function_120cc(i32* null)
  %v0_9ec4 = load i32, i32* @r4, align 4
  %v2_9ec4 = sub i32 %v2_9ec0, %v0_9ec4
  store i32 %v2_9ec4, i32* %r0.global-to-local, align 4
  %v7_9ec8 = icmp eq i32 %v2_9ec4, 10
  store i1 %v7_9ec8, i1* %cpsr_z.global-to-local, align 1
  %v8_9ecc = icmp sgt i32 %v2_9ec4, 10
  br i1 %v8_9ecc, label %dec_label_pc_9f74, label %dec_label_pc_9ed0

dec_label_pc_9ed0:                                ; preds = %dec_label_pc_9ec0, %dec_label_pc_9ea0
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_9edc, i32* %lr.global-to-local, align 4
  store i32 %v2_9ee0, i32* %ip.global-to-local, align 4
  store i32 %v2_9ee4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_9d24, i32* %r0.global-to-local, align 4
  %v7_9ef8 = call i32 @function_12648(i32 %v3_9d24, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_9edc, i32 %v2_9ee0)
  store i32 %v7_9ef8, i32* %r2.global-to-local, align 4
  %v7_9f00 = icmp eq i32 %v7_9ef8, -1
  store i1 %v7_9f00, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_9f00, label %dec_label_pc_9f88, label %dec_label_pc_9f0c

dec_label_pc_9f0c:                                ; preds = %dec_label_pc_9ed0
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_9f20 = icmp eq i32 %v7_9ef8, 40
  store i1 %v7_9f20, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_9ef8, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_9f0c
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_9ec0

bb75:                                             ; preds = %dec_label_pc_9f0c
  store i1 %v9_9f28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9f28, label %dec_label_pc_9ec0, label %dec_label_pc_9f30

dec_label_pc_9f30:                                ; preds = %bb75
  store i32 %v4_9f34, i32* %r1.global-to-local, align 4
  store i32 %v4_9f38, i32* %ip.global-to-local, align 4
  store i32 %v4_9f3c, i32* %r2.global-to-local, align 4
  store i32 %v5_9f40, i32* %r3.global-to-local, align 4
  store i32 %v5_9f44, i32* @r5, align 4
  store i1 %v9_9f48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9f48, label %dec_label_pc_9f50, label %dec_label_pc_9ec0

dec_label_pc_9f50:                                ; preds = %dec_label_pc_9f30
  store i32 %v4_9f50, i32* %r2.global-to-local, align 4
  store i32 %v1_9f54, i32* %r3.global-to-local, align 4
  store i1 %v2_9f58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9f58, label %dec_label_pc_9fa4, label %dec_label_pc_9f60

dec_label_pc_9f60:                                ; preds = %dec_label_pc_9f50
  store i1 %v2_9f60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9f60, label %dec_label_pc_9ec0, label %dec_label_pc_9f68

dec_label_pc_9f68:                                ; preds = %dec_label_pc_9f60
  %v0_9f68 = load i32, i32* @r7, align 4
  store i32 %v0_9f68, i32* %r0.global-to-local, align 4
  %v1_9f6c = call i32 @function_11dfc(i32 %v0_9f68)
  store i32 %v1_9f6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9d90

dec_label_pc_9f74:                                ; preds = %dec_label_pc_9ec0
  %v0_9f74 = load i32, i32* @r7, align 4
  store i32 %v0_9f74, i32* %r0.global-to-local, align 4
  %v1_9f78 = call i32 @function_11dfc(i32 %v0_9f74)
  store i32 %v1_9f78, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9da0

dec_label_pc_9f80:                                ; preds = %dec_label_pc_9d3c
  store i32 %v3_9d24, i32* %r0.global-to-local, align 4
  %v1_9f84 = call i32 @function_11dfc(i32 %v3_9d24)
  store i32 %v1_9f84, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f88

dec_label_pc_9f88:                                ; preds = %dec_label_pc_9ed0, %dec_label_pc_9b54, %dec_label_pc_9f80
  %v29_9f8c = phi i32 [ %v3_9d24, %dec_label_pc_9b54 ], [ %v1_9f84, %dec_label_pc_9f80 ], [ 0, %dec_label_pc_9ed0 ]
  ret i32 %v29_9f8c

dec_label_pc_9f90:                                ; preds = %dec_label_pc_9e70
  %v0_9f90 = call i32 @function_eb90()
  %v1_9f90 = trunc i32 %v0_9f90 to i8
  store i32 %v0_9f90, i32* %r0.global-to-local, align 4
  %v4_9f94 = sdiv i32 %v0_9f90, 256
  store i32 %v4_9f94, i32* %r3.global-to-local, align 4
  %v1_9f98 = trunc i32 %v4_9f94 to i8
  br label %dec_label_pc_9ea0

dec_label_pc_9fa4:                                ; preds = %dec_label_pc_9f50
  %v3_9fa4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9fa4, i32* @r4, align 4
  store i32 %v2_9b74, i32* %r2.global-to-local, align 4
  %v3_9fac = mul i32 %v3_9fa4, 16
  store i32 %v3_9fac, i32* %ip.global-to-local, align 4
  %v3_9fb0 = add i32 %v3_9fac, %v2_9b74
  %v4_9fb0 = inttoptr i32 %v3_9fb0 to i32*
  store i32 %storemerge25, i32* %v4_9fb0, align 4
  %v0_9fb4 = load i32, i32* @r6, align 4
  %v1_9fb4 = add i32 %v0_9fb4, 4
  %v2_9fb4 = inttoptr i32 %v1_9fb4 to i32*
  %v3_9fb4 = load i32, i32* %v2_9fb4, align 4
  store i32 %v3_9fb4, i32* %r0.global-to-local, align 4
  %v1_9fbc = and i32 %v3_9fb4, 65280
  store i32 %v1_9fbc, i32* %r1.global-to-local, align 4
  store i32 %v2_9b74, i32* %lr.global-to-local, align 4
  %v3_9fc4 = mul i32 %v3_9fb4, 16777216
  %v4_9fcc = mul nuw nsw i32 %v1_9fbc, 256
  %v5_9fcc = or i32 %v4_9fcc, %v3_9fc4
  store i32 %v5_9fcc, i32* %r2.global-to-local, align 4
  %v1_9fd4 = load i32, i32* %ip.global-to-local, align 4
  %v2_9fd4 = add i32 %v1_9fd4, %v2_9b74
  store i32 %v2_9fd4, i32* %ip.global-to-local, align 4
  %v2_9fd8 = call i32 @llvm.bswap.i32(i32 %v3_9fb4)
  store i32 %v2_9fd8, i32* %r3.global-to-local, align 4
  %v2_9fdc = add i32 %v2_9fd4, 4
  %v3_9fdc = inttoptr i32 %v2_9fdc to i32*
  store i32 %v2_9fd8, i32* %v3_9fdc, align 4
  %v0_9fe0 = load i32, i32* @r6, align 4
  %v1_9fe0 = add i32 %v0_9fe0, 8
  %v2_9fe0 = inttoptr i32 %v1_9fe0 to i32*
  %v3_9fe0 = load i32, i32* %v2_9fe0, align 4
  store i32 %v3_9fe0, i32* %r0.global-to-local, align 4
  %v1_9fe8 = and i32 %v3_9fe0, 65280
  store i32 %v1_9fe8, i32* %r1.global-to-local, align 4
  %v3_9fec = mul i32 %v3_9fe0, 16777216
  %v4_9ff4 = mul nuw nsw i32 %v1_9fe8, 256
  %v5_9ff4 = or i32 %v4_9ff4, %v3_9fec
  store i32 %v5_9ff4, i32* %r2.global-to-local, align 4
  %v2_9ffc = call i32 @llvm.bswap.i32(i32 %v3_9fe0)
  store i32 %v2_9ffc, i32* %r3.global-to-local, align 4
  %v1_a000 = load i32, i32* %ip.global-to-local, align 4
  %v2_a000 = add i32 %v1_a000, 8
  %v3_a000 = inttoptr i32 %v2_a000 to i32*
  store i32 %v2_9ffc, i32* %v3_a000, align 4
  %v0_a004 = load i32, i32* @r6, align 4
  %v1_a004 = inttoptr i32 %v0_a004 to i32*
  %v2_a004 = load i32, i32* %v1_a004, align 4
  %v3_a008 = udiv i32 %v2_a004, 65536
  store i32 %v3_a008, i32* %r2.global-to-local, align 4
  %v3_a00c3 = udiv i32 %v2_a004, 16777216
  store i32 %v3_a00c3, i32* %r1.global-to-local, align 4
  %v0_a010 = load i32, i32* @r5, align 4
  %v3_a010 = sdiv i32 %v0_a010, 256
  store i32 %v3_a010, i32* %r3.global-to-local, align 4
  %v1_a014 = trunc i32 %v3_a010 to i8
  %v2_a014 = load i32, i32* %ip.global-to-local, align 4
  %v3_a014 = add i32 %v2_a014, 15
  %v4_a014 = inttoptr i32 %v3_a014 to i8*
  store i8 %v1_a014, i8* %v4_a014, align 1
  %v0_a018 = load i32, i32* %r1.global-to-local, align 4
  %v1_a018 = trunc i32 %v0_a018 to i8
  %v2_a018 = load i32, i32* %ip.global-to-local, align 4
  %v3_a018 = add i32 %v2_a018, 13
  %v4_a018 = inttoptr i32 %v3_a018 to i8*
  store i8 %v1_a018, i8* %v4_a018, align 1
  %v0_a01c = load i32, i32* %r2.global-to-local, align 4
  %v1_a01c = trunc i32 %v0_a01c to i8
  %v2_a01c = load i32, i32* %ip.global-to-local, align 4
  %v3_a01c = add i32 %v2_a01c, 12
  %v4_a01c = inttoptr i32 %v3_a01c to i8*
  store i8 %v1_a01c, i8* %v4_a01c, align 1
  %v0_a020 = load i32, i32* @r5, align 4
  %v1_a020 = trunc i32 %v0_a020 to i8
  %v2_a020 = load i32, i32* %ip.global-to-local, align 4
  %v3_a020 = add i32 %v2_a020, 14
  %v4_a020 = inttoptr i32 %v3_a020 to i8*
  store i8 %v1_a020, i8* %v4_a020, align 1
  %v0_a024 = load i32, i32* @sl, align 4
  store i32 %v0_a024, i32* %r0.global-to-local, align 4
  %v1_a028 = call i32 @function_128a4(i32 %v0_a024)
  store i32 %v1_a028, i32* %r0.global-to-local, align 4
  store i32 %v2_9b84, i32* %r1.global-to-local, align 4
  %v3_a030 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a030, i32* %r2.global-to-local, align 4
  %v2_a034 = load i32, i32* @r4, align 4
  %v5_a034 = mul i32 %v2_a034, 4
  %v6_a034 = add i32 %v5_a034, %v2_9b84
  %v7_a034 = inttoptr i32 %v6_a034 to i32*
  store i32 %v1_a028, i32* %v7_a034, align 4
  %v0_a038 = load i32, i32* %r1.global-to-local, align 4
  %v1_a038 = load i32, i32* %r2.global-to-local, align 4
  %v4_a038 = mul i32 %v1_a038, 4
  %v5_a038 = add i32 %v4_a038, %v0_a038
  %v6_a038 = inttoptr i32 %v5_a038 to i32*
  %v7_a038 = load i32, i32* %v6_a038, align 4
  store i32 %v7_a038, i32* @r4, align 4
  %v1_a03c = inttoptr i32 %v7_a038 to i8*
  %v2_a03c = load i8, i8* %v1_a03c, align 1
  %tmp100 = urem i8 %v2_a03c, 16
  %v1_a040 = zext i8 %tmp100 to i32
  %v1_a044 = or i32 %v1_a040, 64
  store i32 %v1_a044, i32* %r3.global-to-local, align 4
  %v1_a048 = trunc i32 %v1_a044 to i8
  store i8 %v1_a048, i8* %v1_a03c, align 1
  %v0_a04c = load i32, i32* @r4, align 4
  %v1_a04c = inttoptr i32 %v0_a04c to i8*
  %v2_a04c = load i8, i8* %v1_a04c, align 1
  store i32 %v3_9d6c, i32* %ip.global-to-local, align 4
  %v1_a058 = and i8 %v2_a04c, -16
  %v1_a060 = or i8 %v1_a058, 5
  store i32 %v5_a064, i32* %r0.global-to-local, align 4
  %v0_a068 = load i32, i32* @sl, align 4
  %v3_a068 = mul i32 %v0_a068, 65536
  store i32 %v3_a068, i32* %r2.global-to-local, align 4
  store i32 %v1_9c04, i32* %lr.global-to-local, align 4
  store i8 %v1_a060, i8* %v1_a04c, align 1
  store i32 %v5_9bc0, i32* %r1.global-to-local, align 4
  %v0_a078 = load i32, i32* %r2.global-to-local, align 4
  %v3_a078 = udiv i32 %v0_a078, 65536
  %v1_a07c = urem i32 %v3_a078, 256
  store i32 %v1_a07c, i32* %r3.global-to-local, align 4
  %v3_a080 = udiv i32 %v0_a078, 16777216
  store i32 %v3_a080, i32* %r2.global-to-local, align 4
  %v2_a084 = load i32, i32* @r4, align 4
  %v3_a084 = add i32 %v2_a084, 1
  %v4_a084 = inttoptr i32 %v3_a084 to i8*
  store i8 %v1_a084, i8* %v4_a084, align 1
  %v0_a088 = load i32, i32* %r2.global-to-local, align 4
  %v1_a088 = load i32, i32* %r3.global-to-local, align 4
  %v4_a088 = mul i32 %v1_a088, 256
  %v5_a088 = or i32 %v4_a088, %v0_a088
  store i32 %v5_a088, i32* %r2.global-to-local, align 4
  %v1_a08c = trunc i32 %v0_a088 to i8
  %v2_a08c = load i32, i32* @r4, align 4
  %v3_a08c = add i32 %v2_a08c, 2
  %v4_a08c = inttoptr i32 %v3_a08c to i8*
  store i8 %v1_a08c, i8* %v4_a08c, align 1
  %v0_a090 = load i32, i32* %lr.global-to-local, align 4
  %v2_a090 = icmp eq i32 %v0_a090, 0
  store i1 %v2_a090, i1* %cpsr_z.global-to-local, align 1
  %v0_a094 = load i32, i32* %r2.global-to-local, align 4
  %v3_a094 = sdiv i32 %v0_a094, 256
  store i32 %v3_a094, i32* %r3.global-to-local, align 4
  store i32 %v5_9bf8, i32* %r2.global-to-local, align 4
  %v1_a09c = trunc i32 %v3_a094 to i8
  %v2_a09c = load i32, i32* @r4, align 4
  %v3_a09c = add i32 %v2_a09c, 3
  %v4_a09c = inttoptr i32 %v3_a09c to i8*
  store i8 %v1_a09c, i8* %v4_a09c, align 1
  %v0_a0a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0a0, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_9fa4
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_9fa4, %bb76
  %v0_a0a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a0a4 = trunc i32 %v0_a0a4 to i8
  %v2_a0a4 = load i32, i32* @r4, align 4
  %v3_a0a4 = add i32 %v2_a0a4, 8
  %v4_a0a4 = inttoptr i32 %v3_a0a4 to i8*
  store i8 %v1_a0a4, i8* %v4_a0a4, align 1
  %v0_a0a8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0a8, label %.thread5, label %bb78

bb78:                                             ; preds = %bb77
  %v1_a0a8 = load i32, i32* %r3.global-to-local, align 4
  %v2_a0a8 = trunc i32 %v1_a0a8 to i8
  %v3_a0a8 = load i32, i32* @r4, align 4
  %v4_a0a8 = add i32 %v3_a0a8, 6
  %v5_a0a8 = inttoptr i32 %v4_a0a8 to i8*
  store i8 %v2_a0a8, i8* %v5_a0a8, align 1
  %v0_a0ac.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0ac.pr, label %.thread5, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_a0b4 = load i32, i32* @r4, align 4
  %v3_a0b4 = add i32 %v2_a0b4, 9
  %v4_a0b4 = inttoptr i32 %v3_a0b4 to i8*
  store i8 6, i8* %v4_a0b4, align 1
  %v0_a0b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0b8, label %bb81, label %bb80

bb80:                                             ; preds = %.thread5
  %v1_a0b8 = load i32, i32* %r2.global-to-local, align 4
  %v2_a0b8 = trunc i32 %v1_a0b8 to i8
  %v3_a0b8 = load i32, i32* @r4, align 4
  %v4_a0b8 = add i32 %v3_a0b8, 7
  %v5_a0b8 = inttoptr i32 %v4_a0b8 to i8*
  store i8 %v2_a0b8, i8* %v5_a0b8, align 1
  br label %bb81

bb81:                                             ; preds = %.thread5, %bb80
  %v2_a0c0 = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_a0c0, i32* %r3.global-to-local, align 4
  %v0_a0c4 = load i32, i32* %r0.global-to-local, align 4
  %v3_a0c4 = sdiv i32 %v0_a0c4, 256
  store i32 %v3_a0c4, i32* %ip.global-to-local, align 4
  %v1_a0c8 = load i32, i32* @r4, align 4
  %v2_a0c8 = add i32 %v1_a0c8, 12
  %v3_a0c8 = inttoptr i32 %v2_a0c8 to i32*
  store i32 %v2_a0c0, i32* %v3_a0c8, align 4
  %v0_a0cc = load i32, i32* %ip.global-to-local, align 4
  %v1_a0cc = trunc i32 %v0_a0cc to i8
  %v2_a0cc = load i32, i32* @r4, align 4
  %v3_a0cc = add i32 %v2_a0cc, 5
  %v4_a0cc = inttoptr i32 %v3_a0cc to i8*
  store i8 %v1_a0cc, i8* %v4_a0cc, align 1
  %v3_a0d0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a0d0, i32* %r2.global-to-local, align 4
  store i32 %v2_9b74, i32* %ip.global-to-local, align 4
  %v4_a0d8 = mul i32 %v3_a0d0, 16
  %v5_a0d8 = add i32 %v4_a0d8, %v2_9b74
  %v6_a0d8 = inttoptr i32 %v5_a0d8 to i32*
  %v7_a0d8 = load i32, i32* %v6_a0d8, align 4
  store i32 %v7_a0d8, i32* %r3.global-to-local, align 4
  %v0_a0dc = load i32, i32* %r0.global-to-local, align 4
  %v1_a0dc = trunc i32 %v0_a0dc to i8
  %v2_a0dc = load i32, i32* @r4, align 4
  %v3_a0dc = add i32 %v2_a0dc, 4
  %v4_a0dc = inttoptr i32 %v3_a0dc to i8*
  store i8 %v1_a0dc, i8* %v4_a0dc, align 1
  %v0_a0e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a0e0 = load i32, i32* @r4, align 4
  %v2_a0e0 = add i32 %v1_a0e0, 16
  %v3_a0e0 = inttoptr i32 %v2_a0e0 to i32*
  store i32 %v0_a0e0, i32* %v3_a0e0, align 4
  %v0_a0e4 = load i32, i32* %r2.global-to-local, align 4
  %v3_a0e4 = mul i32 %v0_a0e4, 16
  %v1_a0e8 = load i32, i32* %ip.global-to-local, align 4
  %v2_a0e8 = add i32 %v1_a0e8, %v3_a0e4
  store i32 %v2_a0e8, i32* %r2.global-to-local, align 4
  %v1_a0ec = add i32 %v2_a0e8, 13
  %v2_a0ec = inttoptr i32 %v1_a0ec to i8*
  %v3_a0ec = load i8, i8* %v2_a0ec, align 1
  %v4_a0ec = zext i8 %v3_a0ec to i32
  store i32 %v4_a0ec, i32* %r1.global-to-local, align 4
  %v1_a0f0 = add i32 %v2_a0e8, 12
  %v2_a0f0 = inttoptr i32 %v1_a0f0 to i8*
  %v3_a0f0 = load i8, i8* %v2_a0f0, align 1
  %v4_a0f0 = zext i8 %v3_a0f0 to i32
  %v4_a0f4 = mul nuw nsw i32 %v4_a0ec, 256
  %v5_a0f4 = or i32 %v4_a0f0, %v4_a0f4
  store i32 %v5_a0f4, i32* %r3.global-to-local, align 4
  %v2_a0f8 = load i32, i32* @r4, align 4
  %v3_a0f8 = add i32 %v2_a0f8, 20
  %v4_a0f8 = inttoptr i32 %v3_a0f8 to i8*
  store i8 %v3_a0f0, i8* %v4_a0f8, align 1
  %v0_a0fc = load i32, i32* @r4, align 4
  %v1_a0fc = add i32 %v0_a0fc, 20
  store i32 %v1_a0fc, i32* @r6, align 4
  %v0_a100 = load i32, i32* %r3.global-to-local, align 4
  %v3_a100 = sdiv i32 %v0_a100, 256
  store i32 %v3_a100, i32* %r3.global-to-local, align 4
  %v1_a104 = trunc i32 %v3_a100 to i8
  %v3_a104 = add i32 %v0_a0fc, 21
  %v4_a104 = inttoptr i32 %v3_a104 to i8*
  store i8 %v1_a104, i8* %v4_a104, align 1
  %v0_a108 = load i32, i32* @r6, align 4
  %v1_a108 = add i32 %v0_a108, 13
  %v2_a108 = inttoptr i32 %v1_a108 to i8*
  %v3_a108 = load i8, i8* %v2_a108, align 1
  %v4_a108 = zext i8 %v3_a108 to i32
  store i32 %v4_a108, i32* %r3.global-to-local, align 4
  %v0_a10c = load i32, i32* %r2.global-to-local, align 4
  %v1_a10c = add i32 %v0_a10c, 8
  %v2_a10c = inttoptr i32 %v1_a10c to i32*
  %v3_a10c = load i32, i32* %v2_a10c, align 4
  store i32 %v3_a10c, i32* %r1.global-to-local, align 4
  %v1_a110 = or i32 %v4_a108, 1
  store i32 %v1_a110, i32* %r3.global-to-local, align 4
  %v1_a114 = add i32 %v0_a10c, 15
  %v2_a114 = inttoptr i32 %v1_a114 to i8*
  %v3_a114 = load i8, i8* %v2_a114, align 1
  %v4_a114 = zext i8 %v3_a114 to i32
  store i32 %v4_a114, i32* %ip.global-to-local, align 4
  %v1_a118 = add i32 %v0_a10c, 14
  %v2_a118 = inttoptr i32 %v1_a118 to i8*
  %v3_a118 = load i8, i8* %v2_a118, align 1
  %v4_a118 = zext i8 %v3_a118 to i32
  store i32 %v4_a118, i32* %r0.global-to-local, align 4
  %v2_a11c = add i32 %v0_a108, 4
  %v3_a11c = inttoptr i32 %v2_a11c to i32*
  store i32 %v3_a10c, i32* %v3_a11c, align 4
  %v0_a120 = load i32, i32* %r2.global-to-local, align 4
  %v1_a120 = add i32 %v0_a120, 4
  %v2_a120 = inttoptr i32 %v1_a120 to i32*
  %v3_a120 = load i32, i32* %v2_a120, align 4
  store i32 %v3_a120, i32* %lr.global-to-local, align 4
  %v0_a124 = load i32, i32* %r3.global-to-local, align 4
  %v1_a124 = trunc i32 %v0_a124 to i8
  %v2_a124 = load i32, i32* @r6, align 4
  %v3_a124 = add i32 %v2_a124, 13
  %v4_a124 = inttoptr i32 %v3_a124 to i8*
  store i8 %v1_a124, i8* %v4_a124, align 1
  %v0_a128 = load i32, i32* @r6, align 4
  %v1_a128 = add i32 %v0_a128, 12
  %v2_a128 = inttoptr i32 %v1_a128 to i8*
  %v3_a128 = load i8, i8* %v2_a128, align 1
  %v4_a128 = zext i8 %v3_a128 to i32
  store i32 %v4_a128, i32* %r2.global-to-local, align 4
  %v1_a12c = add i32 %v0_a128, 13
  %v2_a12c = inttoptr i32 %v1_a12c to i8*
  %v3_a12c = load i8, i8* %v2_a12c, align 1
  %v4_a12c = zext i8 %v3_a12c to i32
  %v0_a130 = load i32, i32* %r0.global-to-local, align 4
  %v1_a130 = load i32, i32* %ip.global-to-local, align 4
  %v4_a130 = mul i32 %v1_a130, 256
  %v5_a130 = or i32 %v4_a130, %v0_a130
  store i32 %v5_a130, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_a128, 16
  %v1_a134 = zext i8 %tmp101 to i32
  %v3_a138 = sdiv i32 %v5_a130, 256
  store i32 %v3_a138, i32* %r1.global-to-local, align 4
  %v1_a13c = or i32 %v1_a134, 128
  store i32 %v1_a13c, i32* %r2.global-to-local, align 4
  %v1_a140 = or i32 %v4_a12c, 16
  store i32 %v1_a140, i32* %r3.global-to-local, align 4
  %v1_a144 = trunc i32 %v3_a138 to i8
  %v3_a144 = add i32 %v0_a128, 3
  %v4_a144 = inttoptr i32 %v3_a144 to i8*
  store i8 %v1_a144, i8* %v4_a144, align 1
  %v0_a148 = load i32, i32* %lr.global-to-local, align 4
  %v1_a148 = load i32, i32* @r6, align 4
  %v2_a148 = add i32 %v1_a148, 8
  %v3_a148 = inttoptr i32 %v2_a148 to i32*
  store i32 %v0_a148, i32* %v3_a148, align 4
  %v0_a14c = load i32, i32* %r2.global-to-local, align 4
  %v1_a14c = trunc i32 %v0_a14c to i8
  %v2_a14c = load i32, i32* @r6, align 4
  %v3_a14c = add i32 %v2_a14c, 12
  %v4_a14c = inttoptr i32 %v3_a14c to i8*
  store i8 %v1_a14c, i8* %v4_a14c, align 1
  %v0_a150 = load i32, i32* %r3.global-to-local, align 4
  %v1_a150 = trunc i32 %v0_a150 to i8
  %v2_a150 = load i32, i32* @r6, align 4
  %v3_a150 = add i32 %v2_a150, 13
  %v4_a150 = inttoptr i32 %v3_a150 to i8*
  store i8 %v1_a150, i8* %v4_a150, align 1
  %v0_a154 = load i32, i32* %r0.global-to-local, align 4
  %v1_a154 = trunc i32 %v0_a154 to i8
  %v2_a154 = load i32, i32* @r6, align 4
  %v3_a154 = add i32 %v2_a154, 2
  %v4_a154 = inttoptr i32 %v3_a154 to i8*
  store i8 %v1_a154, i8* %v4_a154, align 1
  %v0_a158 = call i32 @function_eb90()
  %v1_a158 = trunc i32 %v0_a158 to i8
  store i32 %v0_a158, i32* %r0.global-to-local, align 4
  store i32 %v1_9c3c, i32* %lr.global-to-local, align 4
  %v0_a160 = load i32, i32* @r6, align 4
  %v1_a160 = add i32 %v0_a160, 13
  %v2_a160 = inttoptr i32 %v1_a160 to i8*
  %v3_a160 = load i8, i8* %v2_a160, align 1
  %v4_a160 = zext i8 %v3_a160 to i32
  store i32 %v1_a164, i32* %r2.global-to-local, align 4
  %v1_a168 = and i32 %v4_a160, 223
  %v5_a16c = or i32 %v1_a168, %v4_a16c
  store i32 %v5_a16c, i32* %r3.global-to-local, align 4
  %v1_a170 = trunc i32 %v5_a16c to i8
  store i8 %v1_a170, i8* %v2_a160, align 1
  store i32 %v1_9c5c, i32* %r1.global-to-local, align 4
  %v0_a178 = load i32, i32* @r6, align 4
  %v1_a178 = add i32 %v0_a178, 13
  %v2_a178 = inttoptr i32 %v1_a178 to i8*
  %v3_a178 = load i8, i8* %v2_a178, align 1
  %v4_a178 = zext i8 %v3_a178 to i32
  store i32 %v1_a17c, i32* %r3.global-to-local, align 4
  %v1_a180 = and i32 %v4_a178, 239
  %v5_a184 = or i32 %v1_a180, %v4_a184
  store i32 %v5_a184, i32* %r2.global-to-local, align 4
  %v1_a188 = trunc i32 %v5_a184 to i8
  store i8 %v1_a188, i8* %v2_a178, align 1
  store i32 %v1_9c7c, i32* %ip.global-to-local, align 4
  %v0_a190 = load i32, i32* @r6, align 4
  %v1_a190 = add i32 %v0_a190, 13
  %v2_a190 = inttoptr i32 %v1_a190 to i8*
  %v3_a190 = load i8, i8* %v2_a190, align 1
  %v4_a190 = zext i8 %v3_a190 to i32
  store i32 %v1_a194, i32* %r2.global-to-local, align 4
  %v1_a198 = and i32 %v4_a190, 247
  %v5_a19c = or i32 %v1_a198, %v4_a19c
  store i32 %v5_a19c, i32* %r3.global-to-local, align 4
  %v1_a1a0 = trunc i32 %v5_a19c to i8
  store i8 %v1_a1a0, i8* %v2_a190, align 1
  %v0_a1a8 = load i32, i32* @r6, align 4
  %v1_a1a8 = add i32 %v0_a1a8, 13
  %v2_a1a8 = inttoptr i32 %v1_a1a8 to i8*
  %v3_a1a8 = load i8, i8* %v2_a1a8, align 1
  %v4_a1a8 = zext i8 %v3_a1a8 to i32
  store i32 %v1_a1ac, i32* %r3.global-to-local, align 4
  %v1_a1b0 = and i32 %v4_a1a8, 251
  %v5_a1b4 = or i32 %v1_a1b0, %v4_a1b4
  store i32 %v5_a1b4, i32* %r2.global-to-local, align 4
  %v1_a1b8 = trunc i32 %v5_a1b4 to i8
  store i8 %v1_a1b8, i8* %v2_a1a8, align 1
  store i32 %v1_9cbc, i32* %r1.global-to-local, align 4
  %v0_a1c0 = load i32, i32* @r6, align 4
  %v1_a1c0 = add i32 %v0_a1c0, 13
  %v2_a1c0 = inttoptr i32 %v1_a1c0 to i8*
  %v3_a1c0 = load i8, i8* %v2_a1c0, align 1
  %v4_a1c0 = zext i8 %v3_a1c0 to i32
  store i32 %v1_a1c4, i32* %r2.global-to-local, align 4
  %v1_a1c8 = and i32 %v4_a1c0, 253
  %v4_a1cc = or i32 %v1_a1c8, %v3_a1cc
  store i32 %v4_a1cc, i32* %r3.global-to-local, align 4
  %v1_a1d0 = trunc i32 %v4_a1cc to i8
  store i8 %v1_a1d0, i8* %v2_a1c0, align 1
  %v0_a1d4 = load i32, i32* @r6, align 4
  %v1_a1d4 = add i32 %v0_a1d4, 13
  %v2_a1d4 = inttoptr i32 %v1_a1d4 to i8*
  %v3_a1d4 = load i8, i8* %v2_a1d4, align 1
  %v4_a1d4 = zext i8 %v3_a1d4 to i32
  %v0_a1d8 = load i32, i32* @r8, align 4
  %v1_a1d8 = urem i32 %v0_a1d8, 2
  %v1_a1dc = and i32 %v4_a1d4, 254
  store i32 %v1_a1dc, i32* %r2.global-to-local, align 4
  %v4_a1e027 = udiv i32 %v0_a158, 256
  %v2_a1e4 = or i32 %v1_a1dc, %v1_a1d8
  store i32 %v2_a1e4, i32* %r3.global-to-local, align 4
  %v1_a1e8 = trunc i32 %v4_a1e027 to i8
  %v3_a1e8 = add i32 %v0_a1d4, 15
  %v4_a1e8 = inttoptr i32 %v3_a1e8 to i8*
  store i8 %v1_a1e8, i8* %v4_a1e8, align 1
  %v3_a1ec = load i32, i32* @r6, align 4
  %v4_a1ec = add i32 %v3_a1ec, 14
  %v5_a1ec = inttoptr i32 %v4_a1ec to i8*
  store i8 %v1_a158, i8* %v5_a1ec, align 1
  %v0_a1f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a1f0 = trunc i32 %v0_a1f0 to i8
  %v2_a1f0 = load i32, i32* @r6, align 4
  %v3_a1f0 = add i32 %v2_a1f0, 13
  %v4_a1f0 = inttoptr i32 %v3_a1f0 to i8*
  store i8 %v1_a1f0, i8* %v4_a1f0, align 1
  %v0_a1f4 = load i32, i32* @r4, align 4
  %v1_a1f4 = add i32 %v0_a1f4, 40
  store i32 %v1_a1f4, i32* %r0.global-to-local, align 4
  %v0_a1f8 = load i32, i32* @sb, align 4
  store i32 %v0_a1f8, i32* @r1, align 4
  %v1_a1fc = inttoptr i32 %v1_a1f4 to i8*
  %v2_a1fc = call i32 @function_ed10(i8* %v1_a1fc)
  store i32 %v2_a1fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a200

dec_label_pc_a200:                                ; preds = %dec_label_pc_9da0, %bb81
  %v3_a200 = load i32, i32* %stack_var_-40, align 4
  %v1_a204 = add i32 %v3_a200, 1
  store i32 %v1_a204, i32* %r3.global-to-local, align 4
  %v1_a208 = load i32, i32* @fp, align 4
  %v9_a208 = icmp eq i32 %v1_a204, %v1_a208
  store i1 %v9_a208, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a204, i32* %stack_var_-40, align 4
  %v5_a210 = icmp slt i32 %v1_a204, %v1_a208
  br i1 %v5_a210, label %dec_label_pc_9d90, label %dec_label_pc_a214

dec_label_pc_a214:                                ; preds = %dec_label_pc_a200, %.thread18
  %v0_a21c12 = phi i32 [ %v0_9d64, %.thread18 ], [ %v1_a208, %dec_label_pc_a200 ]
  %v0_a214 = load i32, i32* @sb, align 4
  %v1_a214 = add i32 %v0_a214, 40
  store i32 %v1_a214, i32* @sl, align 4
  %v1_a218 = add i32 %v0_a214, 20
  store i32 %v1_a218, i32* @r7, align 4
  %v2_a268 = icmp eq i32 %v1_9d14, 0
  %v6_a248 = inttoptr i32 %v2_9b84 to i32*
  %v3_a250 = icmp eq i32 %v3_9d6c, 65535
  br label %dec_label_pc_a21c

dec_label_pc_a21c:                                ; preds = %dec_label_pc_a278, %dec_label_pc_a214
  %v0_a21c = phi i32 [ %v1_a358, %dec_label_pc_a278 ], [ %v0_a21c12, %dec_label_pc_a214 ]
  %v2_a21c = icmp eq i32 %v0_a21c, 0
  store i1 %v2_a21c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_a21c, 1
  br label %dec_label_pc_a224

dec_label_pc_a224:                                ; preds = %dec_label_pc_a224, %dec_label_pc_a21c
  br i1 %tmp82, label %dec_label_pc_a224, label %dec_label_pc_a228

dec_label_pc_a228:                                ; preds = %dec_label_pc_a224
  %v0_a228 = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_a228, 256
  %v1_a230 = and i32 %tmp83, 65280
  %tmp84 = udiv i32 %v0_a228, 256
  %v4_a234 = urem i32 %tmp84, 256
  %v5_a234 = or i32 %v4_a234, %v1_a230
  store i32 %v5_a234, i32* @r8, align 4
  store i32 %v2_9b84, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_9d6c, i32* %ip.global-to-local, align 4
  %v7_a248 = load i32, i32* %v6_a248, align 4
  store i32 %v7_a248, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_a250, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_a25c = add i32 %v7_a248, 20
  store i32 %v1_a25c, i32* @r5, align 4
  br i1 %v3_a250, label %dec_label_pc_a384, label %dec_label_pc_a264

dec_label_pc_a264:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a228
  %v0_a26c = phi i32 [ %v7_a370, %dec_label_pc_a364 ], [ %v7_a248, %dec_label_pc_a228 ]
  store i32 %v1_9d14, i32* %lr.global-to-local, align 4
  store i1 %v2_a268, i1* %cpsr_z.global-to-local, align 1
  %v1_a26c = add i32 %v0_a26c, 40
  store i32 %v1_a26c, i32* %r0.global-to-local, align 4
  %v0_a270 = load i32, i32* @sb, align 4
  store i32 %v0_a270, i32* @r1, align 4
  br i1 %v2_a268, label %dec_label_pc_a278, label %dec_label_pc_a3a8

dec_label_pc_a278:                                ; preds = %dec_label_pc_a264, %dec_label_pc_a384, %dec_label_pc_a3a8
  %v2_a278 = phi i32 [ %v0_a26c, %dec_label_pc_a264 ], [ %v0_a39c, %dec_label_pc_a384 ], [ %v2_a278.pre, %dec_label_pc_a3a8 ]
  %v0_a278 = load i32, i32* @r6, align 4
  %v1_a278 = trunc i32 %v0_a278 to i8
  %v3_a278 = add i32 %v2_a278, 10
  %v4_a278 = inttoptr i32 %v3_a278 to i8*
  store i8 %v1_a278, i8* %v4_a278, align 1
  %v0_a27c = load i32, i32* @r6, align 4
  %v1_a27c = trunc i32 %v0_a27c to i8
  %v2_a27c = load i32, i32* @r4, align 4
  %v3_a27c = add i32 %v2_a27c, 11
  %v4_a27c = inttoptr i32 %v3_a27c to i8*
  store i8 %v1_a27c, i8* %v4_a27c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a284 = load i32, i32* @r4, align 4
  store i32 %v0_a284, i32* @r0, align 4
  %v2_a288 = call i32 @function_d0b8(i32 %v0_a284, i32 20)
  %v3_a288 = trunc i32 %v2_a288 to i8
  store i32 %v2_a288, i32* %r0.global-to-local, align 4
  %v3_a28c = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_9b74, i32* %r2.global-to-local, align 4
  %v3_a294 = mul i32 %v3_a28c, 16
  %v2_a298 = add i32 %v3_a294, %v2_9b74
  store i32 %v2_a298, i32* %r1.global-to-local, align 4
  %v1_a29c = add i32 %v2_a298, 4
  %v2_a29c = inttoptr i32 %v1_a29c to i32*
  %v3_a29c = load i32, i32* %v2_a29c, align 4
  %v3_a2a0 = mul i32 %v3_a29c, 65536
  store i32 %v3_a2a0, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_a29c, 256
  %v1_a2a8 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_a29c, 256
  %v4_a2ac = urem i32 %tmp86, 256
  %v5_a2ac = or i32 %v4_a2ac, %v1_a2a8
  store i32 %v5_a2ac, i32* %r2.global-to-local, align 4
  %v1_a2b0 = add i32 %v3_a29c, 1
  store i32 %v1_a2b0, i32* %r3.global-to-local, align 4
  store i32 %v1_a2b0, i32* %v2_a29c, align 4
  %v0_a2b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a2b8 = load i32, i32* @r5, align 4
  %v2_a2b8 = add i32 %v1_a2b8, 4
  %v3_a2b8 = inttoptr i32 %v2_a2b8 to i32*
  store i32 %v0_a2b8, i32* %v3_a2b8, align 4
  %v0_a2bc = load i32, i32* %r1.global-to-local, align 4
  %v1_a2bc = add i32 %v0_a2bc, 8
  %v2_a2bc = inttoptr i32 %v1_a2bc to i32*
  %v3_a2bc = load i32, i32* %v2_a2bc, align 4
  %tmp87 = mul i32 %v3_a2bc, 256
  %v1_a2c8 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_a2bc, 256
  %v4_a2cc = urem i32 %tmp88, 256
  %v5_a2cc = or i32 %v4_a2cc, %v1_a2c8
  store i32 %v5_a2cc, i32* %r2.global-to-local, align 4
  %v4_a2d028 = udiv i32 %v2_a288, 256
  %v1_a2d4 = trunc i32 %v4_a2d028 to i8
  %v2_a2d4 = load i32, i32* @r4, align 4
  %v3_a2d4 = add i32 %v2_a2d4, 11
  %v4_a2d4 = inttoptr i32 %v3_a2d4 to i8*
  store i8 %v1_a2d4, i8* %v4_a2d4, align 1
  %v3_a2d8 = load i32, i32* @r4, align 4
  %v4_a2d8 = add i32 %v3_a2d8, 10
  %v5_a2d8 = inttoptr i32 %v4_a2d8 to i8*
  store i8 %v3_a288, i8* %v5_a2d8, align 1
  %v0_a2dc = load i32, i32* %r2.global-to-local, align 4
  %v1_a2dc = load i32, i32* @r5, align 4
  %v2_a2dc = add i32 %v1_a2dc, 8
  %v3_a2dc = inttoptr i32 %v2_a2dc to i32*
  store i32 %v0_a2dc, i32* %v3_a2dc, align 4
  %v0_a2e0 = load i32, i32* @r5, align 4
  store i32 %v0_a2e0, i32* @r1, align 4
  %v0_a2e4 = load i32, i32* @r8, align 4
  store i32 %v0_a2e4, i32* %r2.global-to-local, align 4
  %v0_a2e8 = load i32, i32* @r7, align 4
  store i32 %v0_a2e8, i32* %r3.global-to-local, align 4
  %v0_a2ec = load i32, i32* @r4, align 4
  store i32 %v0_a2ec, i32* %r0.global-to-local, align 4
  %v0_a2f0 = load i32, i32* @r6, align 4
  %v1_a2f0 = trunc i32 %v0_a2f0 to i8
  %v3_a2f0 = add i32 %v0_a2e0, 16
  %v4_a2f0 = inttoptr i32 %v3_a2f0 to i8*
  store i8 %v1_a2f0, i8* %v4_a2f0, align 1
  %v0_a2f4 = load i32, i32* @r6, align 4
  %v1_a2f4 = trunc i32 %v0_a2f4 to i8
  %v2_a2f4 = load i32, i32* @r5, align 4
  %v3_a2f4 = add i32 %v2_a2f4, 17
  %v4_a2f4 = inttoptr i32 %v3_a2f4 to i8*
  store i8 %v1_a2f4, i8* %v4_a2f4, align 1
  %v4_a2f8 = call i32 @function_d114(i32 %v0_a2ec, i32 %v0_a2e0, i32 %v0_a2e4, i32 %v0_a2e8)
  %v5_a2f8 = trunc i32 %v4_a2f8 to i8
  store i32 %v4_a2f8, i32* %r0.global-to-local, align 4
  %v4_a2fc29 = udiv i32 %v4_a2f8, 256
  %v1_a300 = trunc i32 %v4_a2fc29 to i8
  %v2_a300 = load i32, i32* @r5, align 4
  %v3_a300 = add i32 %v2_a300, 17
  %v4_a300 = inttoptr i32 %v3_a300 to i8*
  store i8 %v1_a300, i8* %v4_a300, align 1
  %v3_a304 = load i32, i32* @r5, align 4
  %v4_a304 = add i32 %v3_a304, 16
  %v5_a304 = inttoptr i32 %v4_a304 to i8*
  store i8 %v5_a2f8, i8* %v5_a304, align 1
  %v3_a308 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a308, i32* %r3.global-to-local, align 4
  %v0_a30c = load i32, i32* @r4, align 4
  %v1_a30c = add i32 %v0_a30c, 20
  %v2_a30c = inttoptr i32 %v1_a30c to i32*
  %v3_a30c = load i32, i32* %v2_a30c, align 4
  %v5_a314 = mul i32 %v3_a308, 24
  %v3_a31c = udiv i32 %v3_a30c, 65536
  store i32 %v3_a31c, i32* %r2.global-to-local, align 4
  %v2_a320 = add i32 %v5_a314, %arg2
  store i32 %v2_a320, i32* %ip.global-to-local, align 4
  %v3_a3244 = udiv i32 %v3_a30c, 16777216
  %v1_a328 = trunc i32 %v3_a3244 to i8
  %v3_a328 = add i32 %v2_a320, 3
  %v4_a328 = inttoptr i32 %v3_a328 to i8*
  store i8 %v1_a328, i8* %v4_a328, align 1
  %v0_a32c = load i32, i32* %r2.global-to-local, align 4
  %v1_a32c = trunc i32 %v0_a32c to i8
  %v2_a32c = load i32, i32* %ip.global-to-local, align 4
  %v3_a32c = add i32 %v2_a32c, 2
  %v4_a32c = inttoptr i32 %v3_a32c to i8*
  store i8 %v1_a32c, i8* %v4_a32c, align 1
  %v0_a330 = load i32, i32* @r4, align 4
  store i32 %v0_a330, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_9d24, i32* %r0.global-to-local, align 4
  %v0_a33c = load i32, i32* @sl, align 4
  store i32 %v0_a33c, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_a344 = load i32, i32* %ip.global-to-local, align 4
  %v6_a34c = inttoptr i32 %v0_a330 to i32*
  %v7_a34c = call i32 @function_126a8(i32 %v3_9d24, i32* %v6_a34c, i32 %v0_a33c, i32 16384, i32 %v0_a344, i32 16)
  %v3_a350 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a350, i32* %r3.global-to-local, align 4
  %v1_a354 = add i32 %v3_a350, 1
  store i32 %v1_a354, i32* %r0.global-to-local, align 4
  %v1_a358 = load i32, i32* @fp, align 4
  %v9_a358 = icmp eq i32 %v1_a354, %v1_a358
  store i1 %v9_a358, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a354, i32* %stack_var_-40, align 4
  %v6_a360 = icmp slt i32 %v1_a354, %v1_a358
  br i1 %v6_a360, label %dec_label_pc_a364, label %dec_label_pc_a21c

dec_label_pc_a364:                                ; preds = %dec_label_pc_a278
  store i32 %v2_9b84, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_9d6c, i32* %ip.global-to-local, align 4
  %v4_a370 = mul i32 %v1_a354, 4
  %v5_a370 = add i32 %v4_a370, %v2_9b84
  %v6_a370 = inttoptr i32 %v5_a370 to i32*
  %v7_a370 = load i32, i32* %v6_a370, align 4
  store i32 %v7_a370, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_a250, i1* %cpsr_z.global-to-local, align 1
  %v1_a37c = add i32 %v7_a370, 20
  store i32 %v1_a37c, i32* @r5, align 4
  br i1 %v3_a250, label %dec_label_pc_a384, label %dec_label_pc_a264

dec_label_pc_a384:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a228
  %v0_a384 = call i32 @function_eb90()
  %v1_a384 = trunc i32 %v0_a384 to i8
  store i32 %v1_9d14, i32* %lr.global-to-local, align 4
  %v4_a38c = sdiv i32 %v0_a384, 256
  store i32 %v4_a38c, i32* %r3.global-to-local, align 4
  store i1 %v2_a268, i1* %cpsr_z.global-to-local, align 1
  %v3_a394 = load i32, i32* @r4, align 4
  %v4_a394 = add i32 %v3_a394, 4
  %v5_a394 = inttoptr i32 %v4_a394 to i8*
  store i8 %v1_a384, i8* %v5_a394, align 1
  %v0_a398 = load i32, i32* %r3.global-to-local, align 4
  %v1_a398 = trunc i32 %v0_a398 to i8
  %v2_a398 = load i32, i32* @r4, align 4
  %v3_a398 = add i32 %v2_a398, 5
  %v4_a398 = inttoptr i32 %v3_a398 to i8*
  store i8 %v1_a398, i8* %v4_a398, align 1
  %v0_a39c = load i32, i32* @r4, align 4
  %v1_a39c = add i32 %v0_a39c, 40
  store i32 %v1_a39c, i32* %r0.global-to-local, align 4
  %v0_a3a0 = load i32, i32* @sb, align 4
  store i32 %v0_a3a0, i32* @r1, align 4
  %v0_a3a4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a3a4, label %dec_label_pc_a278, label %dec_label_pc_a3a8

dec_label_pc_a3a8:                                ; preds = %dec_label_pc_a264, %dec_label_pc_a384
  %v0_a3a8 = phi i32 [ %v1_a26c, %dec_label_pc_a264 ], [ %v1_a39c, %dec_label_pc_a384 ]
  %v1_a3a8 = inttoptr i32 %v0_a3a8 to i8*
  %v2_a3a8 = call i32 @function_ed10(i8* %v1_a3a8)
  store i32 %v2_a3a8, i32* %r0.global-to-local, align 4
  %v2_a278.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a278

; uselistorder directives
  uselistorder i32 %v0_a39c, { 1, 0 }
  uselistorder i32 %v7_a370, { 1, 2, 0 }
  uselistorder i32 %v1_a358, { 1, 2, 0 }
  uselistorder i32 %v1_a354, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_a2f8, { 0, 2, 1 }
  uselistorder i32 %v0_a2e0, { 1, 0, 2 }
  uselistorder i32 %v3_a2bc, { 1, 0 }
  uselistorder i32 %v3_a29c, { 3, 2, 0, 1 }
  uselistorder i32 %v2_a288, { 0, 2, 1 }
  uselistorder i32 %v0_a26c, { 1, 0 }
  uselistorder i32 %v0_a228, { 1, 0 }
  uselistorder i32 %v0_a21c, { 1, 0 }
  uselistorder i1 %v3_a250, { 2, 3, 1, 0 }
  uselistorder i32 %v1_a204, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a158, { 0, 2, 1 }
  uselistorder i32 %v3_a138, { 1, 0 }
  uselistorder i32 %v0_a10c, { 1, 0, 2 }
  uselistorder i32 %v3_a100, { 1, 0 }
  uselistorder i32 %v3_a094, { 1, 0 }
  uselistorder i32 %v0_a088, { 1, 0 }
  uselistorder i32 %v3_a010, { 1, 0 }
  uselistorder i32 %v2_9ffc, { 1, 0 }
  uselistorder i32 %v3_9fe0, { 1, 0, 2, 3 }
  uselistorder i32 %v2_9fd8, { 1, 0 }
  uselistorder i32 %v3_9fb4, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9fac, { 1, 0 }
  uselistorder i32 %v4_9f94, { 1, 0 }
  uselistorder i32 %v0_9f90, { 0, 2, 1 }
  uselistorder i1 %v7_9f00, { 1, 0 }
  uselistorder i32 %v7_9ef8, { 0, 2, 1, 3 }
  uselistorder i32 %v5_9f44, { 1, 0 }
  uselistorder i1 %v9_9f28, { 1, 0 }
  uselistorder i32 %v4_9f3c, { 1, 0 }
  uselistorder i32 %v4_9f38, { 1, 0 }
  uselistorder i32 %v8_9e4c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_9e38, { 1, 0 }
  uselistorder i32 %v0_9e28, { 2, 0, 1, 3 }
  uselistorder i1 %v7_9db0, { 1, 0 }
  uselistorder i32 %v3_9dac, { 2, 1, 0, 3 }
  uselistorder i32 %v1_a1c4, { 1, 0 }
  uselistorder i32 %v1_a1ac, { 1, 0 }
  uselistorder i32 %v1_a194, { 1, 0 }
  uselistorder i32 %v1_a17c, { 1, 0 }
  uselistorder i32 %v1_a164, { 1, 0 }
  uselistorder i32 %v5_9f40, { 1, 0 }
  uselistorder i32 %v3_9e9493, { 1, 0 }
  uselistorder i1 %v2_9f58, { 1, 0 }
  uselistorder i32 %v1_9f54, { 1, 0 }
  uselistorder i32 %v4_9f50, { 2, 0, 1 }
  uselistorder i32 %v4_9f34, { 1, 0 }
  uselistorder i1 %v3_9e7c, { 1, 0 }
  uselistorder i32 %v8_9d78, { 2, 1, 0 }
  uselistorder i32 %v8_9d74, { 1, 2, 0 }
  uselistorder i32 %v3_9d6c, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_9d68, { 0, 1, 3, 2 }
  uselistorder i1 %v7_9d5c, { 1, 0 }
  uselistorder i1 %v7_9d2c, { 1, 0 }
  uselistorder i32 %v3_9d28, { 2, 0, 1 }
  uselistorder i32 %v3_9d24, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_9d14, { 1, 3, 2, 0 }
  uselistorder i32 %v1_9cbc, { 1, 2, 0 }
  uselistorder i32 %v1_9c9c, { 1, 0 }
  uselistorder i32 %v1_9c7c, { 1, 2, 0 }
  uselistorder i32 %v1_9c5c, { 1, 2, 0 }
  uselistorder i32 %v1_9c3c, { 1, 2, 0 }
  uselistorder i32 %v1_9c04, { 1, 2, 0 }
  uselistorder i32 %v5_9bc0, { 0, 2, 1 }
  uselistorder i32 %v2_9b84, { 0, 4, 5, 2, 1, 3, 6 }
  uselistorder i32 %v2_9b74, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_9b58, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 44, 43, 45, 47, 46, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 5, 7, 6, 11, 8, 9, 12, 10, 20, 13, 14, 15, 16, 17, 18, 19, 24, 21, 22, 23, 25, 27, 26, 29, 28, 32, 30, 33, 34, 31, 1, 36, 35, 37, 38, 40, 39, 44, 41, 42, 43, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 13, 14, 15, 17, 26, 18, 19, 16, 20, 21, 22, 23, 24, 25 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_a3a8, { 1, 0 }
  uselistorder label %dec_label_pc_a278, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a200, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread5, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_9f88, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9ec0, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_9e70, { 1, 0 }
}

define i32 @function_a3b4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a3b4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_a3b8 = urem i32 %arg1, 256
  store i32 %v1_a3b8, i32* @fp, align 4
  store i32 %v1_a3b8, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_a3d0 = urem i32 %arg3, 256
  store i32 %v1_a3d0, i32* @r4, align 4
  %v2_a3d4 = call i32 @function_129f8(i32 %v1_a3b8, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_a3e0 = load i32, i32* @fp, align 4
  store i32 %v0_a3e0, i32* %r0.global-to-local, align 4
  %v2_a3e4 = call i32 @function_129f8(i32 %v0_a3e0, i32 4)
  %v0_a3e8 = load i32, i32* @r5, align 4
  store i32 %v0_a3e8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a3f8 = load i32, i32* @r4, align 4
  store i32 %v0_a3f8, i32* %r0.global-to-local, align 4
  %v5_a3fc = inttoptr i32 %v0_a3e8 to i32*
  %v6_a3fc = call i32 @function_85e0(i32 %v0_a3f8, i32* %v5_a3fc, i32 2, i32 0, i32 %v2_a3e4)
  %v1_a408 = urem i32 %v6_a3fc, 256
  store i32 %v1_a408, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a414 = load i32, i32* @r5, align 4
  store i32 %v0_a414, i32* %r1.global-to-local, align 4
  %v0_a418 = load i32, i32* @r4, align 4
  store i32 %v0_a418, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_a3fc, 16777216
  %v5_a420 = sdiv i32 %sext, 16777216
  %v6_a420 = inttoptr i32 %v0_a414 to i32*
  %v7_a420 = call i32 @function_85e0(i32 %v0_a418, i32* %v6_a420, i32 3, i32 65535, i32 %v5_a420)
  %v0_a424 = load i32, i32* @r5, align 4
  store i32 %v0_a424, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a420, i32* @r6, align 4
  %v0_a434 = load i32, i32* @r4, align 4
  store i32 %v0_a434, i32* %r0.global-to-local, align 4
  %v5_a438 = inttoptr i32 %v0_a424 to i32*
  %v6_a438 = call i32 @function_85e0(i32 %v0_a434, i32* %v5_a438, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_a440 = urem i32 %v6_a438, 256
  store i32 %v1_a440, i32* %ip.global-to-local, align 4
  %v0_a444 = load i32, i32* @r5, align 4
  store i32 %v0_a444, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a450 = load i32, i32* @r4, align 4
  store i32 %v0_a450, i32* %r0.global-to-local, align 4
  %sext6 = mul i32 %v6_a438, 16777216
  %v5_a458 = sdiv i32 %sext6, 16777216
  %v6_a458 = inttoptr i32 %v0_a444 to i32*
  %v7_a458 = call i32 @function_85e0(i32 %v0_a450, i32* %v6_a458, i32 5, i32 1, i32 %v5_a458)
  %v1_a464 = urem i32 %v7_a458, 256
  store i32 %v1_a464, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a46c = load i32, i32* @r5, align 4
  store i32 %v0_a46c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a474 = load i32, i32* @r4, align 4
  store i32 %v0_a474, i32* %r0.global-to-local, align 4
  %v5_a47c = inttoptr i32 %v0_a46c to i32*
  %v6_a47c = call i32 @function_85e0(i32 %v0_a474, i32* %v5_a47c, i32 7, i32 65535, i32 %v1_a464)
  %v0_a480 = load i32, i32* @r5, align 4
  store i32 %v0_a480, i32* %r1.global-to-local, align 4
  %v3_a484 = mul i32 %v6_a47c, 65536
  store i32 %v3_a484, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a490 = load i32, i32* @r4, align 4
  store i32 %v0_a490, i32* %r0.global-to-local, align 4
  %v5_a494 = inttoptr i32 %v0_a480 to i32*
  %v6_a494 = call i32 @function_85e0(i32 %v0_a490, i32* %v5_a494, i32 11, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_a49c = urem i32 %v6_a494, 256
  store i32 %v1_a49c, i32* %ip.global-to-local, align 4
  %v0_a4a0 = load i32, i32* @r5, align 4
  store i32 %v0_a4a0, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a4ac = load i32, i32* @r4, align 4
  store i32 %v0_a4ac, i32* %r0.global-to-local, align 4
  %v5_a4b4 = inttoptr i32 %v0_a4a0 to i32*
  %v6_a4b4 = call i32 @function_85e0(i32 %v0_a4ac, i32* %v5_a4b4, i32 12, i32 1, i32 %v1_a49c)
  %v1_a4bc = urem i32 %v6_a4b4, 256
  store i32 %v1_a4bc, i32* %ip.global-to-local, align 4
  %v0_a4c0 = load i32, i32* @r5, align 4
  store i32 %v0_a4c0, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a4cc = load i32, i32* @r4, align 4
  store i32 %v0_a4cc, i32* %r0.global-to-local, align 4
  %v5_a4d4 = inttoptr i32 %v0_a4c0 to i32*
  %v6_a4d4 = call i32 @function_85e0(i32 %v0_a4cc, i32* %v5_a4d4, i32 13, i32 1, i32 %v1_a4bc)
  %v1_a4dc = urem i32 %v6_a4d4, 256
  store i32 %v1_a4dc, i32* %ip.global-to-local, align 4
  %v0_a4e0 = load i32, i32* @r5, align 4
  store i32 %v0_a4e0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a4ec = load i32, i32* @r4, align 4
  store i32 %v0_a4ec, i32* %r0.global-to-local, align 4
  %v5_a4f4 = inttoptr i32 %v0_a4e0 to i32*
  %v6_a4f4 = call i32 @function_85e0(i32 %v0_a4ec, i32* %v5_a4f4, i32 14, i32 0, i32 %v1_a4dc)
  %v1_a4fc = urem i32 %v6_a4f4, 256
  store i32 %v1_a4fc, i32* %ip.global-to-local, align 4
  %v0_a500 = load i32, i32* @r5, align 4
  store i32 %v0_a500, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a50c = load i32, i32* @r4, align 4
  store i32 %v0_a50c, i32* %r0.global-to-local, align 4
  %v5_a514 = inttoptr i32 %v0_a500 to i32*
  %v6_a514 = call i32 @function_85e0(i32 %v0_a50c, i32* %v5_a514, i32 15, i32 0, i32 %v1_a4fc)
  %v1_a51c = urem i32 %v6_a514, 256
  store i32 %v1_a51c, i32* %ip.global-to-local, align 4
  %v0_a520 = load i32, i32* @r5, align 4
  store i32 %v0_a520, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a52c = load i32, i32* @r4, align 4
  store i32 %v0_a52c, i32* %r0.global-to-local, align 4
  %v5_a534 = inttoptr i32 %v0_a520 to i32*
  %v6_a534 = call i32 @function_85e0(i32 %v0_a52c, i32* %v5_a534, i32 16, i32 0, i32 %v1_a51c)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_a534, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_a544 = load i32, i32* @r5, align 4
  store i32 %v0_a544, i32* %r1.global-to-local, align 4
  %v0_a548 = load i32, i32* @r4, align 4
  store i32 %v0_a548, i32* %r0.global-to-local, align 4
  %v1_a54c = urem i32 %v6_a534, 256
  store i32 %v1_a54c, i32* @r8, align 4
  %v5_a550 = inttoptr i32 %v0_a544 to i32*
  %v6_a550 = call i32 @function_85e0(i32 %v0_a548, i32* %v5_a550, i32 0, i32 768, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a55c = load i32, i32* @r5, align 4
  store i32 %v0_a55c, i32* %r1.global-to-local, align 4
  store i32 %v6_a550, i32* @sb, align 4
  %v0_a564 = load i32, i32* @r4, align 4
  store i32 %v0_a564, i32* %r0.global-to-local, align 4
  %v5_a568 = inttoptr i32 %v0_a55c to i32*
  %v6_a568 = call i32 @function_85e0(i32 %v0_a564, i32* %v5_a568, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_a574 = urem i32 %v6_a568, 256
  store i32 %v1_a574, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a584 = call i32 @function_1270c(i32 2, i32 3, i32 6)
  store i32 %v3_a584, i32* %r0.global-to-local, align 4
  %v0_a588 = load i32, i32* @r7, align 4
  %v3_a588 = udiv i32 %v0_a588, 65536
  store i32 %v3_a588, i32* %r1.global-to-local, align 4
  %v7_a58c = icmp eq i32 %v3_a584, -1
  store i1 %v7_a58c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a58c, label %dec_label_pc_a7e8, label %dec_label_pc_a59c

dec_label_pc_a59c:                                ; preds = %dec_label_pc_a3b4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a5a4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a5a4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_a5b8 = call i32 @function_126dc(i32 %v3_a584, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_a5b8, i32* %r0.global-to-local, align 4
  %v7_a5bc = icmp eq i32 %v6_a5b8, -1
  store i1 %v7_a5bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a5bc, label %dec_label_pc_a7e0, label %dec_label_pc_a5c4

dec_label_pc_a5c4:                                ; preds = %dec_label_pc_a59c
  %v0_a5c4 = load i32, i32* @fp, align 4
  %v2_a5c4 = icmp eq i32 %v0_a5c4, 0
  store i1 %v2_a5c4, i1* %cpsr_z.global-to-local, align 1
  %v0_a5c8 = load i32, i32* @r6, align 4
  %v3_a5c8 = mul i32 %v0_a5c8, 65536
  store i32 %v3_a5c8, i32* %r0.global-to-local, align 4
  %v3_a5cc = urem i32 %v0_a5c8, 65536
  store i32 %v3_a5cc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_a5c4, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_a5f0.preheader

.thread18:                                        ; preds = %dec_label_pc_a5c4
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_aa74

dec_label_pc_a5f0.preheader:                      ; preds = %dec_label_pc_a5c4
  %v5_a5d4 = load i32, i32* @r7, align 4
  %v8_a5d4 = udiv i32 %v5_a5d4, 16777216
  %tmp73 = udiv i32 %v0_a5c8, 256
  %v8_a5d8 = urem i32 %tmp73, 256
  store i32 %v8_a5d8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_a6dc = icmp ugt i32 %v0_a588, -65537
  %v2_a700 = ptrtoint i32* %stack_var_-60 to i32
  %v3_a70c = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_a73c = ptrtoint i32* %stack_var_-76 to i32
  %v2_a740 = ptrtoint i32* %stack_var_-44 to i32
  %v2_a744 = ptrtoint i32* %stack_var_-332 to i32
  %v4_a790 = zext i8 %tmp31 to i32
  %v4_a794 = zext i8 %tmp30 to i32
  %v4_a7a0 = mul nuw nsw i32 %v4_a794, 256
  %v4_a7b0 = zext i8 %tmp to i32
  %v1_a7b4 = and i32 %v4_a7b0, 18
  %v2_a7b8 = icmp eq i32 %v1_a7b4, 18
  %v1_a6ec = mul nuw nsw i32 %v3_a588, 256
  %v4_a6f0 = and i32 %v1_a6ec, 65280
  %v5_a6f0 = or i32 %v8_a5d4, %v4_a6f0
  %v3_a6f493 = udiv i32 %v4_a6f0, 256
  %v1_a6f8 = trunc i32 %v3_a6f493 to i8
  %v1_a8bc = mul i32 %v0_a5c8, 256
  %v4_a8c4 = and i32 %v1_a8bc, 65280
  %v5_a7a0 = or i32 %v4_a790, %v4_a7a0
  %v1_a7c0 = and i32 %v4_a7b0, 5
  %v2_a7c0 = icmp eq i32 %v1_a7c0, 0
  %v1_a6fc = trunc i32 %v8_a5d4 to i8
  %v5_a8c4 = or i32 %v8_a5d8, %v4_a8c4
  %v1_a8e4 = trunc i32 %v5_a420 to i8
  %v1_a9c4 = urem i32 %v6_a494, 2
  %tmp94 = sub nsw i32 0, %v1_a9c4
  %v4_a9cc = and i32 %tmp94, 32
  %v1_a9dc = urem i32 %v6_a4b4, 2
  %tmp95 = sub nsw i32 0, %v1_a9dc
  %v4_a9e4 = and i32 %tmp95, 16
  %v1_a9f4 = urem i32 %v6_a4d4, 2
  %tmp96 = sub nsw i32 0, %v1_a9f4
  %v4_a9fc = and i32 %tmp96, 8
  %v1_aa0c = urem i32 %v6_a4f4, 2
  %tmp97 = sub nsw i32 0, %v1_aa0c
  %v4_aa14 = and i32 %tmp97, 4
  %v1_aa24 = urem i32 %v6_a514, 2
  %tmp98 = sub nsw i32 0, %v1_aa24
  %v3_aa2c = and i32 %tmp98, 2
  br label %dec_label_pc_a5f0

dec_label_pc_a5f0:                                ; preds = %dec_label_pc_aa60, %dec_label_pc_a7c8, %dec_label_pc_a5f0.preheader
  store i32 %v8_a5d8, i32* %r3.global-to-local, align 4
  %v0_a5fc = load i32, i32* @sb, align 4
  %v1_a5fc = add i32 %v0_a5fc, 40
  store i32 %v1_a5fc, i32* @sl, align 4
  br label %dec_label_pc_a600

dec_label_pc_a600:                                ; preds = %dec_label_pc_a7d4, %dec_label_pc_a5f0
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a60c = call i32 @function_1270c(i32 2, i32 1, i32 0)
  store i32 %v3_a60c, i32* %r0.global-to-local, align 4
  %v7_a610 = icmp eq i32 %v3_a60c, -1
  store i1 %v7_a610, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a60c, i32* @r7, align 4
  br i1 %v7_a610, label %dec_label_pc_aa60, label %dec_label_pc_a61c

dec_label_pc_a61c:                                ; preds = %dec_label_pc_a600
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_a624 = call i32 @function_11d38(i32 %v3_a60c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a62c = or i32 %v2_a624, 2048
  store i32 %v1_a62c, i32* @r2, align 4
  %v0_a630 = load i32, i32* @r7, align 4
  store i32 %v0_a630, i32* %r0.global-to-local, align 4
  %v2_a634 = call i32 @function_11d38(i32 %v0_a630, i32 4)
  store i32 %v2_a634, i32* %r0.global-to-local, align 4
  %v3_a638 = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_a648 = mul i32 %v3_a638, 24
  store i32 %v5_a648, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_a658 = add i32 %v5_a648, %arg2
  store i32 %v2_a658, i32* %r2.global-to-local, align 4
  %v1_a65c = add i32 %v2_a658, 20
  %v2_a65c = inttoptr i32 %v1_a65c to i8*
  %v3_a65c = load i8, i8* %v2_a65c, align 1
  %v4_a65c = zext i8 %v3_a65c to i32
  store i32 %v4_a65c, i32* %r3.global-to-local, align 4
  %v2_a660 = icmp ugt i8 %v3_a65c, 30
  %v7_a660 = icmp eq i8 %v3_a65c, 31
  store i1 %v7_a660, i1* %cpsr_z.global-to-local, align 1
  %v2_a664 = xor i1 %v7_a660, true
  %v3_a664 = and i1 %v2_a660, %v2_a664
  %v5_a664 = add i32 %v2_a658, 16
  %v6_a664 = inttoptr i32 %v5_a664 to i32*
  %v7_a664 = load i32, i32* %v6_a664, align 4
  br i1 %v3_a664, label %dec_label_pc_a6d0, label %dec_label_pc_a670

dec_label_pc_a670:                                ; preds = %dec_label_pc_a61c
  store i32 %v7_a664, i32* @r4, align 4
  %v0_a674 = call i32 @function_eb90()
  store i32 %v0_a674, i32* %r0.global-to-local, align 4
  %v3_a678 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_a684 = mul i32 %v3_a678, 24
  %v0_a688 = load i32, i32* @r4, align 4
  %v2_a68c = add i32 %v5_a684, %arg2
  store i32 %v2_a68c, i32* %r1.global-to-local, align 4
  %v1_a690 = and i32 %v0_a688, 65280
  store i32 %v1_a690, i32* %r3.global-to-local, align 4
  %v1_a688 = udiv i32 %v0_a688, 256
  %v3_a694 = and i32 %v1_a688, 65280
  store i32 %v3_a694, i32* %r2.global-to-local, align 4
  %v3_a698 = mul i32 %v0_a688, 16777216
  store i32 %v3_a698, i32* %ip.global-to-local, align 4
  %v1_a69c = add i32 %v2_a68c, 20
  %v2_a69c = inttoptr i32 %v1_a69c to i8*
  %v3_a69c = load i8, i8* %v2_a69c, align 1
  %v4_a69c = zext i8 %v3_a69c to i32
  store i32 %v4_a69c, i32* %lr.global-to-local, align 4
  %v4_a6a0 = mul nuw nsw i32 %v1_a690, 256
  %v5_a6a0 = or i32 %v4_a6a0, %v3_a698
  store i32 %v5_a6a0, i32* %ip.global-to-local, align 4
  %v2_a6a8 = call i32 @llvm.bswap.i32(i32 %v0_a688)
  %v7_a6ac = lshr i32 %v0_a674, %v4_a69c
  %v8_a6ac = add i32 %v7_a6ac, %v2_a6a8
  store i32 %v8_a6ac, i32* %r2.global-to-local, align 4
  %v3_a6b8 = mul i32 %v8_a6ac, 16777216
  %v1_a6bc = and i32 %v8_a6ac, 65280
  store i32 %v1_a6bc, i32* %r0.global-to-local, align 4
  %v4_a6c0 = mul nuw nsw i32 %v1_a6bc, 256
  %v5_a6c0 = or i32 %v4_a6c0, %v3_a6b8
  store i32 %v5_a6c0, i32* %r1.global-to-local, align 4
  %v2_a6c8 = call i32 @llvm.bswap.i32(i32 %v8_a6ac)
  br label %dec_label_pc_a6d0

dec_label_pc_a6d0:                                ; preds = %dec_label_pc_a61c, %dec_label_pc_a670
  %storemerge25 = phi i32 [ %v2_a6c8, %dec_label_pc_a670 ], [ %v7_a664, %dec_label_pc_a61c ]
  store i32 %v3_a588, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_a6dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a6dc, label %dec_label_pc_a7f0, label %dec_label_pc_a6e4

dec_label_pc_a6e4:                                ; preds = %dec_label_pc_a6d0
  store i32 %v8_a5d4, i32* %ip.global-to-local, align 4
  store i32 %v5_a6f0, i32* %r3.global-to-local, align 4
  store i32 %v3_a6f493, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_a700

dec_label_pc_a700:                                ; preds = %dec_label_pc_a7f0, %dec_label_pc_a6e4
  %stack_var_-57.0 = phi i8 [ %v1_a7f8, %dec_label_pc_a7f0 ], [ %v1_a6f8, %dec_label_pc_a6e4 ]
  %storemerge = phi i8 [ %v1_a7f0, %dec_label_pc_a7f0 ], [ %v1_a6fc, %dec_label_pc_a6e4 ]
  store i32 %v2_a700, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a708 = load i32, i32* @r7, align 4
  store i32 %v0_a708, i32* %r0.global-to-local, align 4
  %v4_a70c = call i32 @function_12568(i32 %v0_a708, %sockaddr* nonnull %v3_a70c, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_a714 = call i32 @function_120cc(i32* null)
  store i32 %v2_a714, i32* %r0.global-to-local, align 4
  store i32 %v2_a714, i32* @r4, align 4
  %v9_a774 = icmp eq i32 %tmp32, %storemerge25
  %v4_a798 = zext i8 %storemerge to i32
  %v4_a79c = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_a774 to i32
  %v9_a788 = icmp eq i1 %v9_a774, false
  %v4_a7a4 = mul nuw nsw i32 %v4_a79c, 256
  %v5_a7a4 = or i32 %v4_a7a4, %v4_a798
  %v9_a7a8 = icmp eq i32 %v5_a7a4, %v5_a7a0
  br label %dec_label_pc_a730

dec_label_pc_a720:                                ; preds = %.thread23, %dec_label_pc_a790, %dec_label_pc_a7c0, %bb75
  %v2_a720 = call i32 @function_120cc(i32* null)
  %v0_a724 = load i32, i32* @r4, align 4
  %v2_a724 = sub i32 %v2_a720, %v0_a724
  store i32 %v2_a724, i32* %r0.global-to-local, align 4
  %v7_a728 = icmp eq i32 %v2_a724, 10
  store i1 %v7_a728, i1* %cpsr_z.global-to-local, align 1
  %v8_a72c = icmp sgt i32 %v2_a724, 10
  br i1 %v8_a72c, label %dec_label_pc_a7d4, label %dec_label_pc_a730

dec_label_pc_a730:                                ; preds = %dec_label_pc_a720, %dec_label_pc_a700
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_a73c, i32* %lr.global-to-local, align 4
  store i32 %v2_a740, i32* %ip.global-to-local, align 4
  store i32 %v2_a744, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_a584, i32* %r0.global-to-local, align 4
  %v7_a758 = call i32 @function_12648(i32 %v3_a584, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_a73c, i32 %v2_a740)
  store i32 %v7_a758, i32* %r2.global-to-local, align 4
  %v7_a760 = icmp eq i32 %v7_a758, -1
  store i1 %v7_a760, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_a760, label %dec_label_pc_a7e8, label %dec_label_pc_a76c

dec_label_pc_a76c:                                ; preds = %dec_label_pc_a730
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_a780 = icmp eq i32 %v7_a758, 40
  store i1 %v7_a780, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_a758, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_a76c
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_a720

bb75:                                             ; preds = %dec_label_pc_a76c
  store i1 %v9_a788, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a788, label %dec_label_pc_a720, label %dec_label_pc_a790

dec_label_pc_a790:                                ; preds = %bb75
  store i32 %v4_a794, i32* %r1.global-to-local, align 4
  store i32 %v4_a798, i32* %ip.global-to-local, align 4
  store i32 %v4_a79c, i32* %r2.global-to-local, align 4
  store i32 %v5_a7a0, i32* %r3.global-to-local, align 4
  store i32 %v5_a7a4, i32* @r5, align 4
  store i1 %v9_a7a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a7a8, label %dec_label_pc_a7b0, label %dec_label_pc_a720

dec_label_pc_a7b0:                                ; preds = %dec_label_pc_a790
  store i32 %v4_a7b0, i32* %r2.global-to-local, align 4
  store i32 %v1_a7b4, i32* %r3.global-to-local, align 4
  store i1 %v2_a7b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a7b8, label %dec_label_pc_a804, label %dec_label_pc_a7c0

dec_label_pc_a7c0:                                ; preds = %dec_label_pc_a7b0
  store i1 %v2_a7c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a7c0, label %dec_label_pc_a720, label %dec_label_pc_a7c8

dec_label_pc_a7c8:                                ; preds = %dec_label_pc_a7c0
  %v0_a7c8 = load i32, i32* @r7, align 4
  store i32 %v0_a7c8, i32* %r0.global-to-local, align 4
  %v1_a7cc = call i32 @function_11dfc(i32 %v0_a7c8)
  store i32 %v1_a7cc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a5f0

dec_label_pc_a7d4:                                ; preds = %dec_label_pc_a720
  %v0_a7d4 = load i32, i32* @r7, align 4
  store i32 %v0_a7d4, i32* %r0.global-to-local, align 4
  %v1_a7d8 = call i32 @function_11dfc(i32 %v0_a7d4)
  store i32 %v1_a7d8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a600

dec_label_pc_a7e0:                                ; preds = %dec_label_pc_a59c
  store i32 %v3_a584, i32* %r0.global-to-local, align 4
  %v1_a7e4 = call i32 @function_11dfc(i32 %v3_a584)
  store i32 %v1_a7e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a7e8

dec_label_pc_a7e8:                                ; preds = %dec_label_pc_a730, %dec_label_pc_a3b4, %dec_label_pc_a7e0
  %v29_a7ec = phi i32 [ %v3_a584, %dec_label_pc_a3b4 ], [ %v1_a7e4, %dec_label_pc_a7e0 ], [ 0, %dec_label_pc_a730 ]
  ret i32 %v29_a7ec

dec_label_pc_a7f0:                                ; preds = %dec_label_pc_a6d0
  %v0_a7f0 = call i32 @function_eb90()
  %v1_a7f0 = trunc i32 %v0_a7f0 to i8
  store i32 %v0_a7f0, i32* %r0.global-to-local, align 4
  %v4_a7f4 = sdiv i32 %v0_a7f0, 256
  store i32 %v4_a7f4, i32* %r3.global-to-local, align 4
  %v1_a7f8 = trunc i32 %v4_a7f4 to i8
  br label %dec_label_pc_a700

dec_label_pc_a804:                                ; preds = %dec_label_pc_a7b0
  %v3_a804 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a804, i32* @r4, align 4
  store i32 %v2_a3d4, i32* %r2.global-to-local, align 4
  %v3_a80c = mul i32 %v3_a804, 16
  store i32 %v3_a80c, i32* %ip.global-to-local, align 4
  %v3_a810 = add i32 %v3_a80c, %v2_a3d4
  %v4_a810 = inttoptr i32 %v3_a810 to i32*
  store i32 %storemerge25, i32* %v4_a810, align 4
  %v0_a814 = load i32, i32* @r6, align 4
  %v1_a814 = add i32 %v0_a814, 4
  %v2_a814 = inttoptr i32 %v1_a814 to i32*
  %v3_a814 = load i32, i32* %v2_a814, align 4
  store i32 %v3_a814, i32* %r0.global-to-local, align 4
  %v1_a81c = and i32 %v3_a814, 65280
  store i32 %v1_a81c, i32* %r1.global-to-local, align 4
  store i32 %v2_a3d4, i32* %lr.global-to-local, align 4
  %v3_a824 = mul i32 %v3_a814, 16777216
  %v4_a82c = mul nuw nsw i32 %v1_a81c, 256
  %v5_a82c = or i32 %v4_a82c, %v3_a824
  store i32 %v5_a82c, i32* %r2.global-to-local, align 4
  %v1_a834 = load i32, i32* %ip.global-to-local, align 4
  %v2_a834 = add i32 %v1_a834, %v2_a3d4
  store i32 %v2_a834, i32* %ip.global-to-local, align 4
  %v2_a838 = call i32 @llvm.bswap.i32(i32 %v3_a814)
  store i32 %v2_a838, i32* %r3.global-to-local, align 4
  %v2_a83c = add i32 %v2_a834, 4
  %v3_a83c = inttoptr i32 %v2_a83c to i32*
  store i32 %v2_a838, i32* %v3_a83c, align 4
  %v0_a840 = load i32, i32* @r6, align 4
  %v1_a840 = add i32 %v0_a840, 8
  %v2_a840 = inttoptr i32 %v1_a840 to i32*
  %v3_a840 = load i32, i32* %v2_a840, align 4
  store i32 %v3_a840, i32* %r0.global-to-local, align 4
  %v1_a848 = and i32 %v3_a840, 65280
  store i32 %v1_a848, i32* %r1.global-to-local, align 4
  %v3_a84c = mul i32 %v3_a840, 16777216
  %v4_a854 = mul nuw nsw i32 %v1_a848, 256
  %v5_a854 = or i32 %v4_a854, %v3_a84c
  store i32 %v5_a854, i32* %r2.global-to-local, align 4
  %v2_a85c = call i32 @llvm.bswap.i32(i32 %v3_a840)
  store i32 %v2_a85c, i32* %r3.global-to-local, align 4
  %v1_a860 = load i32, i32* %ip.global-to-local, align 4
  %v2_a860 = add i32 %v1_a860, 8
  %v3_a860 = inttoptr i32 %v2_a860 to i32*
  store i32 %v2_a85c, i32* %v3_a860, align 4
  %v0_a864 = load i32, i32* @r6, align 4
  %v1_a864 = inttoptr i32 %v0_a864 to i32*
  %v2_a864 = load i32, i32* %v1_a864, align 4
  %v3_a868 = udiv i32 %v2_a864, 65536
  store i32 %v3_a868, i32* %r2.global-to-local, align 4
  %v3_a86c3 = udiv i32 %v2_a864, 16777216
  store i32 %v3_a86c3, i32* %r1.global-to-local, align 4
  %v0_a870 = load i32, i32* @r5, align 4
  %v3_a870 = sdiv i32 %v0_a870, 256
  store i32 %v3_a870, i32* %r3.global-to-local, align 4
  %v1_a874 = trunc i32 %v3_a870 to i8
  %v2_a874 = load i32, i32* %ip.global-to-local, align 4
  %v3_a874 = add i32 %v2_a874, 15
  %v4_a874 = inttoptr i32 %v3_a874 to i8*
  store i8 %v1_a874, i8* %v4_a874, align 1
  %v0_a878 = load i32, i32* %r1.global-to-local, align 4
  %v1_a878 = trunc i32 %v0_a878 to i8
  %v2_a878 = load i32, i32* %ip.global-to-local, align 4
  %v3_a878 = add i32 %v2_a878, 13
  %v4_a878 = inttoptr i32 %v3_a878 to i8*
  store i8 %v1_a878, i8* %v4_a878, align 1
  %v0_a87c = load i32, i32* %r2.global-to-local, align 4
  %v1_a87c = trunc i32 %v0_a87c to i8
  %v2_a87c = load i32, i32* %ip.global-to-local, align 4
  %v3_a87c = add i32 %v2_a87c, 12
  %v4_a87c = inttoptr i32 %v3_a87c to i8*
  store i8 %v1_a87c, i8* %v4_a87c, align 1
  %v0_a880 = load i32, i32* @r5, align 4
  %v1_a880 = trunc i32 %v0_a880 to i8
  %v2_a880 = load i32, i32* %ip.global-to-local, align 4
  %v3_a880 = add i32 %v2_a880, 14
  %v4_a880 = inttoptr i32 %v3_a880 to i8*
  store i8 %v1_a880, i8* %v4_a880, align 1
  %v0_a884 = load i32, i32* @sl, align 4
  store i32 %v0_a884, i32* %r0.global-to-local, align 4
  %v1_a888 = call i32 @function_128a4(i32 %v0_a884)
  store i32 %v1_a888, i32* %r0.global-to-local, align 4
  store i32 %v2_a3e4, i32* %r1.global-to-local, align 4
  %v3_a890 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a890, i32* %r2.global-to-local, align 4
  %v2_a894 = load i32, i32* @r4, align 4
  %v5_a894 = mul i32 %v2_a894, 4
  %v6_a894 = add i32 %v5_a894, %v2_a3e4
  %v7_a894 = inttoptr i32 %v6_a894 to i32*
  store i32 %v1_a888, i32* %v7_a894, align 4
  %v0_a898 = load i32, i32* %r1.global-to-local, align 4
  %v1_a898 = load i32, i32* %r2.global-to-local, align 4
  %v4_a898 = mul i32 %v1_a898, 4
  %v5_a898 = add i32 %v4_a898, %v0_a898
  %v6_a898 = inttoptr i32 %v5_a898 to i32*
  %v7_a898 = load i32, i32* %v6_a898, align 4
  store i32 %v7_a898, i32* @r4, align 4
  %v1_a89c = inttoptr i32 %v7_a898 to i8*
  %v2_a89c = load i8, i8* %v1_a89c, align 1
  %tmp100 = urem i8 %v2_a89c, 16
  %v1_a8a0 = zext i8 %tmp100 to i32
  %v1_a8a4 = or i32 %v1_a8a0, 64
  store i32 %v1_a8a4, i32* %r3.global-to-local, align 4
  %v1_a8a8 = trunc i32 %v1_a8a4 to i8
  store i8 %v1_a8a8, i8* %v1_a89c, align 1
  %v0_a8ac = load i32, i32* @r4, align 4
  %v1_a8ac = inttoptr i32 %v0_a8ac to i8*
  %v2_a8ac = load i8, i8* %v1_a8ac, align 1
  store i32 %v3_a5cc, i32* %ip.global-to-local, align 4
  %v1_a8b8 = and i8 %v2_a8ac, -16
  %v1_a8c0 = or i8 %v1_a8b8, 5
  store i32 %v5_a8c4, i32* %r0.global-to-local, align 4
  %v0_a8c8 = load i32, i32* @sl, align 4
  %v3_a8c8 = mul i32 %v0_a8c8, 65536
  store i32 %v3_a8c8, i32* %r2.global-to-local, align 4
  store i32 %v1_a464, i32* %lr.global-to-local, align 4
  store i8 %v1_a8c0, i8* %v1_a8ac, align 1
  store i32 %v5_a420, i32* %r1.global-to-local, align 4
  %v0_a8d8 = load i32, i32* %r2.global-to-local, align 4
  %v3_a8d8 = udiv i32 %v0_a8d8, 65536
  %v1_a8dc = urem i32 %v3_a8d8, 256
  store i32 %v1_a8dc, i32* %r3.global-to-local, align 4
  %v3_a8e0 = udiv i32 %v0_a8d8, 16777216
  store i32 %v3_a8e0, i32* %r2.global-to-local, align 4
  %v2_a8e4 = load i32, i32* @r4, align 4
  %v3_a8e4 = add i32 %v2_a8e4, 1
  %v4_a8e4 = inttoptr i32 %v3_a8e4 to i8*
  store i8 %v1_a8e4, i8* %v4_a8e4, align 1
  %v0_a8e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a8e8 = load i32, i32* %r3.global-to-local, align 4
  %v4_a8e8 = mul i32 %v1_a8e8, 256
  %v5_a8e8 = or i32 %v4_a8e8, %v0_a8e8
  store i32 %v5_a8e8, i32* %r2.global-to-local, align 4
  %v1_a8ec = trunc i32 %v0_a8e8 to i8
  %v2_a8ec = load i32, i32* @r4, align 4
  %v3_a8ec = add i32 %v2_a8ec, 2
  %v4_a8ec = inttoptr i32 %v3_a8ec to i8*
  store i8 %v1_a8ec, i8* %v4_a8ec, align 1
  %v0_a8f0 = load i32, i32* %lr.global-to-local, align 4
  %v2_a8f0 = icmp eq i32 %v0_a8f0, 0
  store i1 %v2_a8f0, i1* %cpsr_z.global-to-local, align 1
  %v0_a8f4 = load i32, i32* %r2.global-to-local, align 4
  %v3_a8f4 = sdiv i32 %v0_a8f4, 256
  store i32 %v3_a8f4, i32* %r3.global-to-local, align 4
  store i32 %v5_a458, i32* %r2.global-to-local, align 4
  %v1_a8fc = trunc i32 %v3_a8f4 to i8
  %v2_a8fc = load i32, i32* @r4, align 4
  %v3_a8fc = add i32 %v2_a8fc, 3
  %v4_a8fc = inttoptr i32 %v3_a8fc to i8*
  store i8 %v1_a8fc, i8* %v4_a8fc, align 1
  %v0_a900 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a900, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_a804
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_a804, %bb76
  %v0_a904 = load i32, i32* %r2.global-to-local, align 4
  %v1_a904 = trunc i32 %v0_a904 to i8
  %v2_a904 = load i32, i32* @r4, align 4
  %v3_a904 = add i32 %v2_a904, 8
  %v4_a904 = inttoptr i32 %v3_a904 to i8*
  store i8 %v1_a904, i8* %v4_a904, align 1
  %v0_a908 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a908, label %.thread5, label %bb78

bb78:                                             ; preds = %bb77
  %v1_a908 = load i32, i32* %r3.global-to-local, align 4
  %v2_a908 = trunc i32 %v1_a908 to i8
  %v3_a908 = load i32, i32* @r4, align 4
  %v4_a908 = add i32 %v3_a908, 6
  %v5_a908 = inttoptr i32 %v4_a908 to i8*
  store i8 %v2_a908, i8* %v5_a908, align 1
  %v0_a90c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a90c.pr, label %.thread5, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_a914 = load i32, i32* @r4, align 4
  %v3_a914 = add i32 %v2_a914, 9
  %v4_a914 = inttoptr i32 %v3_a914 to i8*
  store i8 6, i8* %v4_a914, align 1
  %v0_a918 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a918, label %bb81, label %bb80

bb80:                                             ; preds = %.thread5
  %v1_a918 = load i32, i32* %r2.global-to-local, align 4
  %v2_a918 = trunc i32 %v1_a918 to i8
  %v3_a918 = load i32, i32* @r4, align 4
  %v4_a918 = add i32 %v3_a918, 7
  %v5_a918 = inttoptr i32 %v4_a918 to i8*
  store i8 %v2_a918, i8* %v5_a918, align 1
  br label %bb81

bb81:                                             ; preds = %.thread5, %bb80
  %v2_a920 = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_a920, i32* %r3.global-to-local, align 4
  %v0_a924 = load i32, i32* %r0.global-to-local, align 4
  %v3_a924 = sdiv i32 %v0_a924, 256
  store i32 %v3_a924, i32* %ip.global-to-local, align 4
  %v1_a928 = load i32, i32* @r4, align 4
  %v2_a928 = add i32 %v1_a928, 12
  %v3_a928 = inttoptr i32 %v2_a928 to i32*
  store i32 %v2_a920, i32* %v3_a928, align 4
  %v0_a92c = load i32, i32* %ip.global-to-local, align 4
  %v1_a92c = trunc i32 %v0_a92c to i8
  %v2_a92c = load i32, i32* @r4, align 4
  %v3_a92c = add i32 %v2_a92c, 5
  %v4_a92c = inttoptr i32 %v3_a92c to i8*
  store i8 %v1_a92c, i8* %v4_a92c, align 1
  %v3_a930 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a930, i32* %r2.global-to-local, align 4
  store i32 %v2_a3d4, i32* %ip.global-to-local, align 4
  %v4_a938 = mul i32 %v3_a930, 16
  %v5_a938 = add i32 %v4_a938, %v2_a3d4
  %v6_a938 = inttoptr i32 %v5_a938 to i32*
  %v7_a938 = load i32, i32* %v6_a938, align 4
  store i32 %v7_a938, i32* %r3.global-to-local, align 4
  %v0_a93c = load i32, i32* %r0.global-to-local, align 4
  %v1_a93c = trunc i32 %v0_a93c to i8
  %v2_a93c = load i32, i32* @r4, align 4
  %v3_a93c = add i32 %v2_a93c, 4
  %v4_a93c = inttoptr i32 %v3_a93c to i8*
  store i8 %v1_a93c, i8* %v4_a93c, align 1
  %v0_a940 = load i32, i32* %r3.global-to-local, align 4
  %v1_a940 = load i32, i32* @r4, align 4
  %v2_a940 = add i32 %v1_a940, 16
  %v3_a940 = inttoptr i32 %v2_a940 to i32*
  store i32 %v0_a940, i32* %v3_a940, align 4
  %v0_a944 = load i32, i32* %r2.global-to-local, align 4
  %v3_a944 = mul i32 %v0_a944, 16
  %v1_a948 = load i32, i32* %ip.global-to-local, align 4
  %v2_a948 = add i32 %v1_a948, %v3_a944
  store i32 %v2_a948, i32* %r2.global-to-local, align 4
  %v1_a94c = add i32 %v2_a948, 13
  %v2_a94c = inttoptr i32 %v1_a94c to i8*
  %v3_a94c = load i8, i8* %v2_a94c, align 1
  %v4_a94c = zext i8 %v3_a94c to i32
  store i32 %v4_a94c, i32* %r1.global-to-local, align 4
  %v1_a950 = add i32 %v2_a948, 12
  %v2_a950 = inttoptr i32 %v1_a950 to i8*
  %v3_a950 = load i8, i8* %v2_a950, align 1
  %v4_a950 = zext i8 %v3_a950 to i32
  %v4_a954 = mul nuw nsw i32 %v4_a94c, 256
  %v5_a954 = or i32 %v4_a950, %v4_a954
  store i32 %v5_a954, i32* %r3.global-to-local, align 4
  %v2_a958 = load i32, i32* @r4, align 4
  %v3_a958 = add i32 %v2_a958, 20
  %v4_a958 = inttoptr i32 %v3_a958 to i8*
  store i8 %v3_a950, i8* %v4_a958, align 1
  %v0_a95c = load i32, i32* @r4, align 4
  %v1_a95c = add i32 %v0_a95c, 20
  store i32 %v1_a95c, i32* @r6, align 4
  %v0_a960 = load i32, i32* %r3.global-to-local, align 4
  %v3_a960 = sdiv i32 %v0_a960, 256
  store i32 %v3_a960, i32* %r3.global-to-local, align 4
  %v1_a964 = trunc i32 %v3_a960 to i8
  %v3_a964 = add i32 %v0_a95c, 21
  %v4_a964 = inttoptr i32 %v3_a964 to i8*
  store i8 %v1_a964, i8* %v4_a964, align 1
  %v0_a968 = load i32, i32* @r6, align 4
  %v1_a968 = add i32 %v0_a968, 13
  %v2_a968 = inttoptr i32 %v1_a968 to i8*
  %v3_a968 = load i8, i8* %v2_a968, align 1
  %v4_a968 = zext i8 %v3_a968 to i32
  store i32 %v4_a968, i32* %r3.global-to-local, align 4
  %v0_a96c = load i32, i32* %r2.global-to-local, align 4
  %v1_a96c = add i32 %v0_a96c, 8
  %v2_a96c = inttoptr i32 %v1_a96c to i32*
  %v3_a96c = load i32, i32* %v2_a96c, align 4
  store i32 %v3_a96c, i32* %r1.global-to-local, align 4
  %v1_a970 = or i32 %v4_a968, 1
  store i32 %v1_a970, i32* %r3.global-to-local, align 4
  %v1_a974 = add i32 %v0_a96c, 15
  %v2_a974 = inttoptr i32 %v1_a974 to i8*
  %v3_a974 = load i8, i8* %v2_a974, align 1
  %v4_a974 = zext i8 %v3_a974 to i32
  store i32 %v4_a974, i32* %ip.global-to-local, align 4
  %v1_a978 = add i32 %v0_a96c, 14
  %v2_a978 = inttoptr i32 %v1_a978 to i8*
  %v3_a978 = load i8, i8* %v2_a978, align 1
  %v4_a978 = zext i8 %v3_a978 to i32
  store i32 %v4_a978, i32* %r0.global-to-local, align 4
  %v2_a97c = add i32 %v0_a968, 4
  %v3_a97c = inttoptr i32 %v2_a97c to i32*
  store i32 %v3_a96c, i32* %v3_a97c, align 4
  %v0_a980 = load i32, i32* %r2.global-to-local, align 4
  %v1_a980 = add i32 %v0_a980, 4
  %v2_a980 = inttoptr i32 %v1_a980 to i32*
  %v3_a980 = load i32, i32* %v2_a980, align 4
  store i32 %v3_a980, i32* %lr.global-to-local, align 4
  %v0_a984 = load i32, i32* %r3.global-to-local, align 4
  %v1_a984 = trunc i32 %v0_a984 to i8
  %v2_a984 = load i32, i32* @r6, align 4
  %v3_a984 = add i32 %v2_a984, 13
  %v4_a984 = inttoptr i32 %v3_a984 to i8*
  store i8 %v1_a984, i8* %v4_a984, align 1
  %v0_a988 = load i32, i32* @r6, align 4
  %v1_a988 = add i32 %v0_a988, 12
  %v2_a988 = inttoptr i32 %v1_a988 to i8*
  %v3_a988 = load i8, i8* %v2_a988, align 1
  %v4_a988 = zext i8 %v3_a988 to i32
  store i32 %v4_a988, i32* %r2.global-to-local, align 4
  %v1_a98c = add i32 %v0_a988, 13
  %v2_a98c = inttoptr i32 %v1_a98c to i8*
  %v3_a98c = load i8, i8* %v2_a98c, align 1
  %v4_a98c = zext i8 %v3_a98c to i32
  %v0_a990 = load i32, i32* %r0.global-to-local, align 4
  %v1_a990 = load i32, i32* %ip.global-to-local, align 4
  %v4_a990 = mul i32 %v1_a990, 256
  %v5_a990 = or i32 %v4_a990, %v0_a990
  store i32 %v5_a990, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_a988, 16
  %v1_a994 = zext i8 %tmp101 to i32
  %v3_a998 = sdiv i32 %v5_a990, 256
  store i32 %v3_a998, i32* %r1.global-to-local, align 4
  %v1_a99c = or i32 %v1_a994, 128
  store i32 %v1_a99c, i32* %r2.global-to-local, align 4
  %v1_a9a0 = or i32 %v4_a98c, 16
  store i32 %v1_a9a0, i32* %r3.global-to-local, align 4
  %v1_a9a4 = trunc i32 %v3_a998 to i8
  %v3_a9a4 = add i32 %v0_a988, 3
  %v4_a9a4 = inttoptr i32 %v3_a9a4 to i8*
  store i8 %v1_a9a4, i8* %v4_a9a4, align 1
  %v0_a9a8 = load i32, i32* %lr.global-to-local, align 4
  %v1_a9a8 = load i32, i32* @r6, align 4
  %v2_a9a8 = add i32 %v1_a9a8, 8
  %v3_a9a8 = inttoptr i32 %v2_a9a8 to i32*
  store i32 %v0_a9a8, i32* %v3_a9a8, align 4
  %v0_a9ac = load i32, i32* %r2.global-to-local, align 4
  %v1_a9ac = trunc i32 %v0_a9ac to i8
  %v2_a9ac = load i32, i32* @r6, align 4
  %v3_a9ac = add i32 %v2_a9ac, 12
  %v4_a9ac = inttoptr i32 %v3_a9ac to i8*
  store i8 %v1_a9ac, i8* %v4_a9ac, align 1
  %v0_a9b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a9b0 = trunc i32 %v0_a9b0 to i8
  %v2_a9b0 = load i32, i32* @r6, align 4
  %v3_a9b0 = add i32 %v2_a9b0, 13
  %v4_a9b0 = inttoptr i32 %v3_a9b0 to i8*
  store i8 %v1_a9b0, i8* %v4_a9b0, align 1
  %v0_a9b4 = load i32, i32* %r0.global-to-local, align 4
  %v1_a9b4 = trunc i32 %v0_a9b4 to i8
  %v2_a9b4 = load i32, i32* @r6, align 4
  %v3_a9b4 = add i32 %v2_a9b4, 2
  %v4_a9b4 = inttoptr i32 %v3_a9b4 to i8*
  store i8 %v1_a9b4, i8* %v4_a9b4, align 1
  %v0_a9b8 = call i32 @function_eb90()
  %v1_a9b8 = trunc i32 %v0_a9b8 to i8
  store i32 %v0_a9b8, i32* %r0.global-to-local, align 4
  store i32 %v1_a49c, i32* %lr.global-to-local, align 4
  %v0_a9c0 = load i32, i32* @r6, align 4
  %v1_a9c0 = add i32 %v0_a9c0, 13
  %v2_a9c0 = inttoptr i32 %v1_a9c0 to i8*
  %v3_a9c0 = load i8, i8* %v2_a9c0, align 1
  %v4_a9c0 = zext i8 %v3_a9c0 to i32
  store i32 %v1_a9c4, i32* %r2.global-to-local, align 4
  %v1_a9c8 = and i32 %v4_a9c0, 223
  %v5_a9cc = or i32 %v1_a9c8, %v4_a9cc
  store i32 %v5_a9cc, i32* %r3.global-to-local, align 4
  %v1_a9d0 = trunc i32 %v5_a9cc to i8
  store i8 %v1_a9d0, i8* %v2_a9c0, align 1
  store i32 %v1_a4bc, i32* %r1.global-to-local, align 4
  %v0_a9d8 = load i32, i32* @r6, align 4
  %v1_a9d8 = add i32 %v0_a9d8, 13
  %v2_a9d8 = inttoptr i32 %v1_a9d8 to i8*
  %v3_a9d8 = load i8, i8* %v2_a9d8, align 1
  %v4_a9d8 = zext i8 %v3_a9d8 to i32
  store i32 %v1_a9dc, i32* %r3.global-to-local, align 4
  %v1_a9e0 = and i32 %v4_a9d8, 239
  %v5_a9e4 = or i32 %v1_a9e0, %v4_a9e4
  store i32 %v5_a9e4, i32* %r2.global-to-local, align 4
  %v1_a9e8 = trunc i32 %v5_a9e4 to i8
  store i8 %v1_a9e8, i8* %v2_a9d8, align 1
  store i32 %v1_a4dc, i32* %ip.global-to-local, align 4
  %v0_a9f0 = load i32, i32* @r6, align 4
  %v1_a9f0 = add i32 %v0_a9f0, 13
  %v2_a9f0 = inttoptr i32 %v1_a9f0 to i8*
  %v3_a9f0 = load i8, i8* %v2_a9f0, align 1
  %v4_a9f0 = zext i8 %v3_a9f0 to i32
  store i32 %v1_a9f4, i32* %r2.global-to-local, align 4
  %v1_a9f8 = and i32 %v4_a9f0, 247
  %v5_a9fc = or i32 %v1_a9f8, %v4_a9fc
  store i32 %v5_a9fc, i32* %r3.global-to-local, align 4
  %v1_aa00 = trunc i32 %v5_a9fc to i8
  store i8 %v1_aa00, i8* %v2_a9f0, align 1
  %v0_aa08 = load i32, i32* @r6, align 4
  %v1_aa08 = add i32 %v0_aa08, 13
  %v2_aa08 = inttoptr i32 %v1_aa08 to i8*
  %v3_aa08 = load i8, i8* %v2_aa08, align 1
  %v4_aa08 = zext i8 %v3_aa08 to i32
  store i32 %v1_aa0c, i32* %r3.global-to-local, align 4
  %v1_aa10 = and i32 %v4_aa08, 251
  %v5_aa14 = or i32 %v1_aa10, %v4_aa14
  store i32 %v5_aa14, i32* %r2.global-to-local, align 4
  %v1_aa18 = trunc i32 %v5_aa14 to i8
  store i8 %v1_aa18, i8* %v2_aa08, align 1
  store i32 %v1_a51c, i32* %r1.global-to-local, align 4
  %v0_aa20 = load i32, i32* @r6, align 4
  %v1_aa20 = add i32 %v0_aa20, 13
  %v2_aa20 = inttoptr i32 %v1_aa20 to i8*
  %v3_aa20 = load i8, i8* %v2_aa20, align 1
  %v4_aa20 = zext i8 %v3_aa20 to i32
  store i32 %v1_aa24, i32* %r2.global-to-local, align 4
  %v1_aa28 = and i32 %v4_aa20, 253
  %v4_aa2c = or i32 %v1_aa28, %v3_aa2c
  store i32 %v4_aa2c, i32* %r3.global-to-local, align 4
  %v1_aa30 = trunc i32 %v4_aa2c to i8
  store i8 %v1_aa30, i8* %v2_aa20, align 1
  %v0_aa34 = load i32, i32* @r6, align 4
  %v1_aa34 = add i32 %v0_aa34, 13
  %v2_aa34 = inttoptr i32 %v1_aa34 to i8*
  %v3_aa34 = load i8, i8* %v2_aa34, align 1
  %v4_aa34 = zext i8 %v3_aa34 to i32
  %v0_aa38 = load i32, i32* @r8, align 4
  %v1_aa38 = urem i32 %v0_aa38, 2
  %v1_aa3c = and i32 %v4_aa34, 254
  store i32 %v1_aa3c, i32* %r2.global-to-local, align 4
  %v4_aa4027 = udiv i32 %v0_a9b8, 256
  %v2_aa44 = or i32 %v1_aa3c, %v1_aa38
  store i32 %v2_aa44, i32* %r3.global-to-local, align 4
  %v1_aa48 = trunc i32 %v4_aa4027 to i8
  %v3_aa48 = add i32 %v0_aa34, 15
  %v4_aa48 = inttoptr i32 %v3_aa48 to i8*
  store i8 %v1_aa48, i8* %v4_aa48, align 1
  %v3_aa4c = load i32, i32* @r6, align 4
  %v4_aa4c = add i32 %v3_aa4c, 14
  %v5_aa4c = inttoptr i32 %v4_aa4c to i8*
  store i8 %v1_a9b8, i8* %v5_aa4c, align 1
  %v0_aa50 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa50 = trunc i32 %v0_aa50 to i8
  %v2_aa50 = load i32, i32* @r6, align 4
  %v3_aa50 = add i32 %v2_aa50, 13
  %v4_aa50 = inttoptr i32 %v3_aa50 to i8*
  store i8 %v1_aa50, i8* %v4_aa50, align 1
  %v0_aa54 = load i32, i32* @r4, align 4
  %v1_aa54 = add i32 %v0_aa54, 40
  store i32 %v1_aa54, i32* %r0.global-to-local, align 4
  %v0_aa58 = load i32, i32* @sb, align 4
  store i32 %v0_aa58, i32* @r1, align 4
  %v1_aa5c = inttoptr i32 %v1_aa54 to i8*
  %v2_aa5c = call i32 @function_ed10(i8* %v1_aa5c)
  store i32 %v2_aa5c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aa60

dec_label_pc_aa60:                                ; preds = %dec_label_pc_a600, %bb81
  %v3_aa60 = load i32, i32* %stack_var_-40, align 4
  %v1_aa64 = add i32 %v3_aa60, 1
  store i32 %v1_aa64, i32* %r3.global-to-local, align 4
  %v1_aa68 = load i32, i32* @fp, align 4
  %v9_aa68 = icmp eq i32 %v1_aa64, %v1_aa68
  store i1 %v9_aa68, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aa64, i32* %stack_var_-40, align 4
  %v5_aa70 = icmp slt i32 %v1_aa64, %v1_aa68
  br i1 %v5_aa70, label %dec_label_pc_a5f0, label %dec_label_pc_aa74

dec_label_pc_aa74:                                ; preds = %dec_label_pc_aa60, %.thread18
  %v0_aa7c12 = phi i32 [ %v0_a5c4, %.thread18 ], [ %v1_aa68, %dec_label_pc_aa60 ]
  %v0_aa74 = load i32, i32* @sb, align 4
  %v1_aa74 = add i32 %v0_aa74, 40
  store i32 %v1_aa74, i32* @sl, align 4
  %v1_aa78 = add i32 %v0_aa74, 20
  store i32 %v1_aa78, i32* @r7, align 4
  %v2_aac8 = icmp eq i32 %v1_a574, 0
  %v6_aaa8 = inttoptr i32 %v2_a3e4 to i32*
  %v3_aab0 = icmp eq i32 %v3_a5cc, 65535
  br label %dec_label_pc_aa7c

dec_label_pc_aa7c:                                ; preds = %dec_label_pc_aad8, %dec_label_pc_aa74
  %v0_aa7c = phi i32 [ %v1_abb8, %dec_label_pc_aad8 ], [ %v0_aa7c12, %dec_label_pc_aa74 ]
  %v2_aa7c = icmp eq i32 %v0_aa7c, 0
  store i1 %v2_aa7c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_aa7c, 1
  br label %dec_label_pc_aa84

dec_label_pc_aa84:                                ; preds = %dec_label_pc_aa84, %dec_label_pc_aa7c
  br i1 %tmp82, label %dec_label_pc_aa84, label %dec_label_pc_aa88

dec_label_pc_aa88:                                ; preds = %dec_label_pc_aa84
  %v0_aa88 = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_aa88, 256
  %v1_aa90 = and i32 %tmp83, 65280
  %tmp84 = udiv i32 %v0_aa88, 256
  %v4_aa94 = urem i32 %tmp84, 256
  %v5_aa94 = or i32 %v4_aa94, %v1_aa90
  store i32 %v5_aa94, i32* @r8, align 4
  store i32 %v2_a3e4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_a5cc, i32* %ip.global-to-local, align 4
  %v7_aaa8 = load i32, i32* %v6_aaa8, align 4
  store i32 %v7_aaa8, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_aab0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_aabc = add i32 %v7_aaa8, 20
  store i32 %v1_aabc, i32* @r5, align 4
  br i1 %v3_aab0, label %dec_label_pc_abe4, label %dec_label_pc_aac4

dec_label_pc_aac4:                                ; preds = %dec_label_pc_abc4, %dec_label_pc_aa88
  %v0_aacc = phi i32 [ %v7_abd0, %dec_label_pc_abc4 ], [ %v7_aaa8, %dec_label_pc_aa88 ]
  store i32 %v1_a574, i32* %lr.global-to-local, align 4
  store i1 %v2_aac8, i1* %cpsr_z.global-to-local, align 1
  %v1_aacc = add i32 %v0_aacc, 40
  store i32 %v1_aacc, i32* %r0.global-to-local, align 4
  %v0_aad0 = load i32, i32* @sb, align 4
  store i32 %v0_aad0, i32* @r1, align 4
  br i1 %v2_aac8, label %dec_label_pc_aad8, label %dec_label_pc_ac08

dec_label_pc_aad8:                                ; preds = %dec_label_pc_aac4, %dec_label_pc_abe4, %dec_label_pc_ac08
  %v2_aad8 = phi i32 [ %v0_aacc, %dec_label_pc_aac4 ], [ %v0_abfc, %dec_label_pc_abe4 ], [ %v2_aad8.pre, %dec_label_pc_ac08 ]
  %v0_aad8 = load i32, i32* @r6, align 4
  %v1_aad8 = trunc i32 %v0_aad8 to i8
  %v3_aad8 = add i32 %v2_aad8, 10
  %v4_aad8 = inttoptr i32 %v3_aad8 to i8*
  store i8 %v1_aad8, i8* %v4_aad8, align 1
  %v0_aadc = load i32, i32* @r6, align 4
  %v1_aadc = trunc i32 %v0_aadc to i8
  %v2_aadc = load i32, i32* @r4, align 4
  %v3_aadc = add i32 %v2_aadc, 11
  %v4_aadc = inttoptr i32 %v3_aadc to i8*
  store i8 %v1_aadc, i8* %v4_aadc, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_aae4 = load i32, i32* @r4, align 4
  store i32 %v0_aae4, i32* @r0, align 4
  %v2_aae8 = call i32 @function_d0b8(i32 %v0_aae4, i32 20)
  %v3_aae8 = trunc i32 %v2_aae8 to i8
  store i32 %v2_aae8, i32* %r0.global-to-local, align 4
  %v3_aaec = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_a3d4, i32* %r2.global-to-local, align 4
  %v3_aaf4 = mul i32 %v3_aaec, 16
  %v2_aaf8 = add i32 %v3_aaf4, %v2_a3d4
  store i32 %v2_aaf8, i32* %r1.global-to-local, align 4
  %v1_aafc = add i32 %v2_aaf8, 4
  %v2_aafc = inttoptr i32 %v1_aafc to i32*
  %v3_aafc = load i32, i32* %v2_aafc, align 4
  %v3_ab00 = mul i32 %v3_aafc, 65536
  store i32 %v3_ab00, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_aafc, 256
  %v1_ab08 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_aafc, 256
  %v4_ab0c = urem i32 %tmp86, 256
  %v5_ab0c = or i32 %v4_ab0c, %v1_ab08
  store i32 %v5_ab0c, i32* %r2.global-to-local, align 4
  %v1_ab10 = add i32 %v3_aafc, 1
  store i32 %v1_ab10, i32* %r3.global-to-local, align 4
  store i32 %v1_ab10, i32* %v2_aafc, align 4
  %v0_ab18 = load i32, i32* %r2.global-to-local, align 4
  %v1_ab18 = load i32, i32* @r5, align 4
  %v2_ab18 = add i32 %v1_ab18, 4
  %v3_ab18 = inttoptr i32 %v2_ab18 to i32*
  store i32 %v0_ab18, i32* %v3_ab18, align 4
  %v0_ab1c = load i32, i32* %r1.global-to-local, align 4
  %v1_ab1c = add i32 %v0_ab1c, 8
  %v2_ab1c = inttoptr i32 %v1_ab1c to i32*
  %v3_ab1c = load i32, i32* %v2_ab1c, align 4
  %tmp87 = mul i32 %v3_ab1c, 256
  %v1_ab28 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_ab1c, 256
  %v4_ab2c = urem i32 %tmp88, 256
  %v5_ab2c = or i32 %v4_ab2c, %v1_ab28
  store i32 %v5_ab2c, i32* %r2.global-to-local, align 4
  %v4_ab3028 = udiv i32 %v2_aae8, 256
  %v1_ab34 = trunc i32 %v4_ab3028 to i8
  %v2_ab34 = load i32, i32* @r4, align 4
  %v3_ab34 = add i32 %v2_ab34, 11
  %v4_ab34 = inttoptr i32 %v3_ab34 to i8*
  store i8 %v1_ab34, i8* %v4_ab34, align 1
  %v3_ab38 = load i32, i32* @r4, align 4
  %v4_ab38 = add i32 %v3_ab38, 10
  %v5_ab38 = inttoptr i32 %v4_ab38 to i8*
  store i8 %v3_aae8, i8* %v5_ab38, align 1
  %v0_ab3c = load i32, i32* %r2.global-to-local, align 4
  %v1_ab3c = load i32, i32* @r5, align 4
  %v2_ab3c = add i32 %v1_ab3c, 8
  %v3_ab3c = inttoptr i32 %v2_ab3c to i32*
  store i32 %v0_ab3c, i32* %v3_ab3c, align 4
  %v0_ab40 = load i32, i32* @r5, align 4
  store i32 %v0_ab40, i32* @r1, align 4
  %v0_ab44 = load i32, i32* @r8, align 4
  store i32 %v0_ab44, i32* %r2.global-to-local, align 4
  %v0_ab48 = load i32, i32* @r7, align 4
  store i32 %v0_ab48, i32* %r3.global-to-local, align 4
  %v0_ab4c = load i32, i32* @r4, align 4
  store i32 %v0_ab4c, i32* %r0.global-to-local, align 4
  %v0_ab50 = load i32, i32* @r6, align 4
  %v1_ab50 = trunc i32 %v0_ab50 to i8
  %v3_ab50 = add i32 %v0_ab40, 16
  %v4_ab50 = inttoptr i32 %v3_ab50 to i8*
  store i8 %v1_ab50, i8* %v4_ab50, align 1
  %v0_ab54 = load i32, i32* @r6, align 4
  %v1_ab54 = trunc i32 %v0_ab54 to i8
  %v2_ab54 = load i32, i32* @r5, align 4
  %v3_ab54 = add i32 %v2_ab54, 17
  %v4_ab54 = inttoptr i32 %v3_ab54 to i8*
  store i8 %v1_ab54, i8* %v4_ab54, align 1
  %v4_ab58 = call i32 @function_d114(i32 %v0_ab4c, i32 %v0_ab40, i32 %v0_ab44, i32 %v0_ab48)
  %v5_ab58 = trunc i32 %v4_ab58 to i8
  store i32 %v4_ab58, i32* %r0.global-to-local, align 4
  %v4_ab5c29 = udiv i32 %v4_ab58, 256
  %v1_ab60 = trunc i32 %v4_ab5c29 to i8
  %v2_ab60 = load i32, i32* @r5, align 4
  %v3_ab60 = add i32 %v2_ab60, 17
  %v4_ab60 = inttoptr i32 %v3_ab60 to i8*
  store i8 %v1_ab60, i8* %v4_ab60, align 1
  %v3_ab64 = load i32, i32* @r5, align 4
  %v4_ab64 = add i32 %v3_ab64, 16
  %v5_ab64 = inttoptr i32 %v4_ab64 to i8*
  store i8 %v5_ab58, i8* %v5_ab64, align 1
  %v3_ab68 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ab68, i32* %r3.global-to-local, align 4
  %v0_ab6c = load i32, i32* @r4, align 4
  %v1_ab6c = add i32 %v0_ab6c, 20
  %v2_ab6c = inttoptr i32 %v1_ab6c to i32*
  %v3_ab6c = load i32, i32* %v2_ab6c, align 4
  %v5_ab74 = mul i32 %v3_ab68, 24
  %v3_ab7c = udiv i32 %v3_ab6c, 65536
  store i32 %v3_ab7c, i32* %r2.global-to-local, align 4
  %v2_ab80 = add i32 %v5_ab74, %arg2
  store i32 %v2_ab80, i32* %ip.global-to-local, align 4
  %v3_ab844 = udiv i32 %v3_ab6c, 16777216
  %v1_ab88 = trunc i32 %v3_ab844 to i8
  %v3_ab88 = add i32 %v2_ab80, 3
  %v4_ab88 = inttoptr i32 %v3_ab88 to i8*
  store i8 %v1_ab88, i8* %v4_ab88, align 1
  %v0_ab8c = load i32, i32* %r2.global-to-local, align 4
  %v1_ab8c = trunc i32 %v0_ab8c to i8
  %v2_ab8c = load i32, i32* %ip.global-to-local, align 4
  %v3_ab8c = add i32 %v2_ab8c, 2
  %v4_ab8c = inttoptr i32 %v3_ab8c to i8*
  store i8 %v1_ab8c, i8* %v4_ab8c, align 1
  %v0_ab90 = load i32, i32* @r4, align 4
  store i32 %v0_ab90, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_a584, i32* %r0.global-to-local, align 4
  %v0_ab9c = load i32, i32* @sl, align 4
  store i32 %v0_ab9c, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_aba4 = load i32, i32* %ip.global-to-local, align 4
  %v6_abac = inttoptr i32 %v0_ab90 to i32*
  %v7_abac = call i32 @function_126a8(i32 %v3_a584, i32* %v6_abac, i32 %v0_ab9c, i32 16384, i32 %v0_aba4, i32 16)
  %v3_abb0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_abb0, i32* %r3.global-to-local, align 4
  %v1_abb4 = add i32 %v3_abb0, 1
  store i32 %v1_abb4, i32* %r0.global-to-local, align 4
  %v1_abb8 = load i32, i32* @fp, align 4
  %v9_abb8 = icmp eq i32 %v1_abb4, %v1_abb8
  store i1 %v9_abb8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_abb4, i32* %stack_var_-40, align 4
  %v6_abc0 = icmp slt i32 %v1_abb4, %v1_abb8
  br i1 %v6_abc0, label %dec_label_pc_abc4, label %dec_label_pc_aa7c

dec_label_pc_abc4:                                ; preds = %dec_label_pc_aad8
  store i32 %v2_a3e4, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_a5cc, i32* %ip.global-to-local, align 4
  %v4_abd0 = mul i32 %v1_abb4, 4
  %v5_abd0 = add i32 %v4_abd0, %v2_a3e4
  %v6_abd0 = inttoptr i32 %v5_abd0 to i32*
  %v7_abd0 = load i32, i32* %v6_abd0, align 4
  store i32 %v7_abd0, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_aab0, i1* %cpsr_z.global-to-local, align 1
  %v1_abdc = add i32 %v7_abd0, 20
  store i32 %v1_abdc, i32* @r5, align 4
  br i1 %v3_aab0, label %dec_label_pc_abe4, label %dec_label_pc_aac4

dec_label_pc_abe4:                                ; preds = %dec_label_pc_abc4, %dec_label_pc_aa88
  %v0_abe4 = call i32 @function_eb90()
  %v1_abe4 = trunc i32 %v0_abe4 to i8
  store i32 %v1_a574, i32* %lr.global-to-local, align 4
  %v4_abec = sdiv i32 %v0_abe4, 256
  store i32 %v4_abec, i32* %r3.global-to-local, align 4
  store i1 %v2_aac8, i1* %cpsr_z.global-to-local, align 1
  %v3_abf4 = load i32, i32* @r4, align 4
  %v4_abf4 = add i32 %v3_abf4, 4
  %v5_abf4 = inttoptr i32 %v4_abf4 to i8*
  store i8 %v1_abe4, i8* %v5_abf4, align 1
  %v0_abf8 = load i32, i32* %r3.global-to-local, align 4
  %v1_abf8 = trunc i32 %v0_abf8 to i8
  %v2_abf8 = load i32, i32* @r4, align 4
  %v3_abf8 = add i32 %v2_abf8, 5
  %v4_abf8 = inttoptr i32 %v3_abf8 to i8*
  store i8 %v1_abf8, i8* %v4_abf8, align 1
  %v0_abfc = load i32, i32* @r4, align 4
  %v1_abfc = add i32 %v0_abfc, 40
  store i32 %v1_abfc, i32* %r0.global-to-local, align 4
  %v0_ac00 = load i32, i32* @sb, align 4
  store i32 %v0_ac00, i32* @r1, align 4
  %v0_ac04 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac04, label %dec_label_pc_aad8, label %dec_label_pc_ac08

dec_label_pc_ac08:                                ; preds = %dec_label_pc_aac4, %dec_label_pc_abe4
  %v0_ac08 = phi i32 [ %v1_aacc, %dec_label_pc_aac4 ], [ %v1_abfc, %dec_label_pc_abe4 ]
  %v1_ac08 = inttoptr i32 %v0_ac08 to i8*
  %v2_ac08 = call i32 @function_ed10(i8* %v1_ac08)
  store i32 %v2_ac08, i32* %r0.global-to-local, align 4
  %v2_aad8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_aad8

; uselistorder directives
  uselistorder i32 %v0_abfc, { 1, 0 }
  uselistorder i32 %v7_abd0, { 1, 2, 0 }
  uselistorder i32 %v1_abb8, { 1, 2, 0 }
  uselistorder i32 %v1_abb4, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_ab58, { 0, 2, 1 }
  uselistorder i32 %v0_ab40, { 1, 0, 2 }
  uselistorder i32 %v3_ab1c, { 1, 0 }
  uselistorder i32 %v3_aafc, { 3, 2, 0, 1 }
  uselistorder i32 %v2_aae8, { 0, 2, 1 }
  uselistorder i32 %v0_aacc, { 1, 0 }
  uselistorder i32 %v0_aa88, { 1, 0 }
  uselistorder i32 %v0_aa7c, { 1, 0 }
  uselistorder i1 %v3_aab0, { 2, 3, 1, 0 }
  uselistorder i32 %v1_aa64, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a9b8, { 0, 2, 1 }
  uselistorder i32 %v3_a998, { 1, 0 }
  uselistorder i32 %v0_a96c, { 1, 0, 2 }
  uselistorder i32 %v3_a960, { 1, 0 }
  uselistorder i32 %v3_a8f4, { 1, 0 }
  uselistorder i32 %v0_a8e8, { 1, 0 }
  uselistorder i32 %v3_a870, { 1, 0 }
  uselistorder i32 %v2_a85c, { 1, 0 }
  uselistorder i32 %v3_a840, { 1, 0, 2, 3 }
  uselistorder i32 %v2_a838, { 1, 0 }
  uselistorder i32 %v3_a814, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a80c, { 1, 0 }
  uselistorder i32 %v4_a7f4, { 1, 0 }
  uselistorder i32 %v0_a7f0, { 0, 2, 1 }
  uselistorder i1 %v7_a760, { 1, 0 }
  uselistorder i32 %v7_a758, { 0, 2, 1, 3 }
  uselistorder i32 %v5_a7a4, { 1, 0 }
  uselistorder i1 %v9_a788, { 1, 0 }
  uselistorder i32 %v4_a79c, { 1, 0 }
  uselistorder i32 %v4_a798, { 1, 0 }
  uselistorder i32 %v8_a6ac, { 1, 2, 0, 3 }
  uselistorder i32 %v3_a698, { 1, 0 }
  uselistorder i32 %v0_a688, { 2, 0, 1, 3 }
  uselistorder i1 %v7_a610, { 1, 0 }
  uselistorder i32 %v3_a60c, { 2, 1, 0, 3 }
  uselistorder i32 %v1_aa24, { 1, 0 }
  uselistorder i32 %v1_aa0c, { 1, 0 }
  uselistorder i32 %v1_a9f4, { 1, 0 }
  uselistorder i32 %v1_a9dc, { 1, 0 }
  uselistorder i32 %v1_a9c4, { 1, 0 }
  uselistorder i32 %v5_a7a0, { 1, 0 }
  uselistorder i32 %v3_a6f493, { 1, 0 }
  uselistorder i1 %v2_a7b8, { 1, 0 }
  uselistorder i32 %v1_a7b4, { 1, 0 }
  uselistorder i32 %v4_a7b0, { 2, 0, 1 }
  uselistorder i32 %v4_a794, { 1, 0 }
  uselistorder i1 %v3_a6dc, { 1, 0 }
  uselistorder i32 %v8_a5d8, { 2, 1, 0 }
  uselistorder i32 %v8_a5d4, { 1, 2, 0 }
  uselistorder i32 %v3_a5cc, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_a5c8, { 0, 1, 3, 2 }
  uselistorder i1 %v7_a5bc, { 1, 0 }
  uselistorder i1 %v7_a58c, { 1, 0 }
  uselistorder i32 %v3_a588, { 2, 0, 1 }
  uselistorder i32 %v3_a584, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_a574, { 1, 3, 2, 0 }
  uselistorder i32 %v1_a51c, { 1, 2, 0 }
  uselistorder i32 %v1_a4fc, { 1, 0 }
  uselistorder i32 %v1_a4dc, { 1, 2, 0 }
  uselistorder i32 %v1_a4bc, { 1, 2, 0 }
  uselistorder i32 %v1_a49c, { 1, 2, 0 }
  uselistorder i32 %v1_a464, { 1, 2, 0 }
  uselistorder i32 %v5_a420, { 0, 2, 1 }
  uselistorder i32 %v2_a3e4, { 0, 4, 5, 2, 1, 3, 6 }
  uselistorder i32 %v2_a3d4, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_a3b8, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 44, 43, 45, 47, 46, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 19, 12, 13, 14, 15, 16, 17, 18, 23, 20, 21, 22, 24, 26, 25, 28, 27, 31, 29, 32, 33, 30, 34, 36, 35, 37, 38, 40, 39, 44, 41, 42, 43, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 13, 14, 15, 17, 26, 18, 19, 16, 20, 21, 22, 23, 24, 25 }
  uselistorder i32 768, { 0, 2, 1, 3 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_ac08, { 1, 0 }
  uselistorder label %dec_label_pc_aad8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_aa60, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread5, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_a7e8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a720, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_a6d0, { 1, 0 }
}

define i32 @function_ac14(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ac14:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_ac18 = urem i32 %arg1, 256
  store i32 %v1_ac18, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_ac30 = urem i32 %arg3, 256
  store i32 %v1_ac30, i32* @r4, align 4
  %v2_ac34 = call i32 @function_129f8(i32 %v1_ac18, i32 4)
  %v0_ac38 = load i32, i32* @r5, align 4
  store i32 %v0_ac38, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ac48 = load i32, i32* @r4, align 4
  %v5_ac4c = inttoptr i32 %v0_ac38 to i32*
  %v6_ac4c = call i32 @function_85e0(i32 %v0_ac48, i32* %v5_ac4c, i32 2, i32 0, i32 %v2_ac34)
  %v1_ac58 = urem i32 %v6_ac4c, 256
  store i32 %v1_ac58, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ac64 = load i32, i32* @r5, align 4
  store i32 %v0_ac64, i32* %r1.global-to-local, align 4
  %v0_ac68 = load i32, i32* @r4, align 4
  %v5_ac6c = trunc i32 %v6_ac4c to i8
  %v6_ac70 = inttoptr i32 %v0_ac64 to i32*
  %v7_ac70 = call i32 @function_85e0(i32 %v0_ac68, i32* %v6_ac70, i32 3, i32 65535, i32 %v6_ac4c)
  %v0_ac74 = load i32, i32* @r5, align 4
  store i32 %v0_ac74, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_ac70, i32* @r8, align 4
  %v0_ac84 = load i32, i32* @r4, align 4
  %v5_ac88 = inttoptr i32 %v0_ac74 to i32*
  %v6_ac88 = call i32 @function_85e0(i32 %v0_ac84, i32* %v5_ac88, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_ac90 = urem i32 %v6_ac88, 256
  store i32 %v1_ac90, i32* %ip.global-to-local, align 4
  %v0_ac94 = load i32, i32* @r5, align 4
  store i32 %v0_ac94, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_aca0 = load i32, i32* @r4, align 4
  %sext13 = mul i32 %v6_ac88, 16777216
  %v5_aca8 = sdiv i32 %sext13, 16777216
  %v6_aca8 = inttoptr i32 %v0_ac94 to i32*
  %v7_aca8 = call i32 @function_85e0(i32 %v0_aca0, i32* %v6_aca8, i32 5, i32 0, i32 %v5_aca8)
  %v1_acb4 = urem i32 %v7_aca8, 256
  store i32 %v1_acb4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_acc0 = load i32, i32* @r5, align 4
  store i32 %v0_acc0, i32* %r1.global-to-local, align 4
  %v0_acc4 = load i32, i32* @r4, align 4
  %v5_accc = inttoptr i32 %v0_acc0 to i32*
  %v6_accc = call i32 @function_85e0(i32 %v0_acc4, i32* %v5_accc, i32 6, i32 65535, i32 %v1_acb4)
  %v0_acd4 = load i32, i32* @r5, align 4
  store i32 %v0_acd4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_accc, i32* @r7, align 4
  %v0_ace4 = load i32, i32* @r4, align 4
  %v5_ace8 = inttoptr i32 %v0_acd4 to i32*
  %v6_ace8 = call i32 @function_85e0(i32 %v0_ace4, i32* %v5_ace8, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_acf0 = load i32, i32* @r5, align 4
  store i32 %v0_acf0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_ace8, i32* @r6, align 4
  %v0_ad00 = load i32, i32* @r4, align 4
  %v5_ad04 = inttoptr i32 %v0_acf0 to i32*
  %v6_ad04 = call i32 @function_85e0(i32 %v0_ad00, i32* %v5_ad04, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_ad10 = load i32, i32* @r5, align 4
  store i32 %v0_ad10, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_ad1c = load i32, i32* @r4, align 4
  %v5_ad20 = inttoptr i32 %v0_ad10 to i32*
  %v6_ad20 = call i32 @function_85e0(i32 %v0_ad1c, i32* %v5_ad20, i32 18, i32 65535, i32 %v6_ad04)
  %v0_ad24 = load i32, i32* @r5, align 4
  store i32 %v0_ad24, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ad34 = load i32, i32* @r4, align 4
  %v5_ad38 = inttoptr i32 %v0_ad24 to i32*
  %v6_ad38 = call i32 @function_85e0(i32 %v0_ad34, i32* %v5_ad38, i32 11, i32 0, i32 %v6_ad20)
  %v0_ad3c = load i32, i32* @r5, align 4
  store i32 %v0_ad3c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ad4c = load i32, i32* @r4, align 4
  %v5_ad50 = inttoptr i32 %v0_ad3c to i32*
  %v6_ad50 = call i32 @function_85e0(i32 %v0_ad4c, i32* %v5_ad50, i32 12, i32 1, i32 %v6_ad38)
  %v0_ad54 = load i32, i32* @r5, align 4
  store i32 %v0_ad54, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ad64 = load i32, i32* @r4, align 4
  %v5_ad68 = inttoptr i32 %v0_ad54 to i32*
  %v6_ad68 = call i32 @function_85e0(i32 %v0_ad64, i32* %v5_ad68, i32 13, i32 0, i32 %v6_ad50)
  %v0_ad6c = load i32, i32* @r5, align 4
  store i32 %v0_ad6c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ad7c = load i32, i32* @r4, align 4
  %v5_ad80 = inttoptr i32 %v0_ad6c to i32*
  %v6_ad80 = call i32 @function_85e0(i32 %v0_ad7c, i32* %v5_ad80, i32 14, i32 0, i32 %v6_ad68)
  %v0_ad84 = load i32, i32* @r5, align 4
  store i32 %v0_ad84, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ad94 = load i32, i32* @r4, align 4
  %v5_ad98 = inttoptr i32 %v0_ad84 to i32*
  %v6_ad98 = call i32 @function_85e0(i32 %v0_ad94, i32* %v5_ad98, i32 15, i32 0, i32 %v6_ad80)
  %v0_ad9c = load i32, i32* @r5, align 4
  store i32 %v0_ad9c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_adac = load i32, i32* @r4, align 4
  %v5_adb0 = inttoptr i32 %v0_ad9c to i32*
  %v6_adb0 = call i32 @function_85e0(i32 %v0_adac, i32* %v5_adb0, i32 16, i32 0, i32 %v6_ad98)
  %v0_adb4 = load i32, i32* @r5, align 4
  store i32 %v0_adb4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_adc4 = load i32, i32* @r4, align 4
  %v5_adc8 = inttoptr i32 %v0_adb4 to i32*
  %v6_adc8 = call i32 @function_85e0(i32 %v0_adc4, i32* %v5_adc8, i32 0, i32 512, i32 %v6_adb0)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_add8 = load i32, i32* @r5, align 4
  store i32 %v0_add8, i32* %r1.global-to-local, align 4
  %v0_addc = load i32, i32* @r4, align 4
  %v5_ade0 = inttoptr i32 %v0_add8 to i32*
  %v6_ade0 = call i32 @function_85e0(i32 %v0_addc, i32* %v5_ade0, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_adec = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_adec, i32* %r3.global-to-local, align 4
  %v1_adf0 = urem i32 %v6_ade0, 256
  store i32 %v1_adf0, i32* %ip.global-to-local, align 4
  %v0_adf4 = load i32, i32* @r5, align 4
  store i32 %v0_adf4, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_adfc = load i32, i32* @r4, align 4
  %v5_ae04 = inttoptr i32 %v0_adf4 to i32*
  %v6_ae04 = call i32 @function_8574(i32 %v0_adfc, i32* %v5_ae04, i32 25, i32 %v2_adec, i32 %v1_adf0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_ae18 = call i32 @function_1270c(i32 2, i32 3, i32 6)
  %v7_ae1c = icmp eq i32 %v3_ae18, -1
  store i1 %v7_ae1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ae1c, label %dec_label_pc_b254, label %dec_label_pc_ae28

dec_label_pc_ae28:                                ; preds = %dec_label_pc_ac14
  store i32 1, i32* %stack_var_-40, align 4
  %v6_ae30 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_ae30, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_ae44 = call i32 @function_126dc(i32 %v3_ae18, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_ae48 = icmp eq i32 %v6_ae44, -1
  store i1 %v7_ae48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ae48, label %dec_label_pc_b24c, label %dec_label_pc_ae50

dec_label_pc_ae50:                                ; preds = %dec_label_pc_ae28
  %v0_ae50 = load i32, i32* @r8, align 4
  %v0_ae54 = load i32, i32* @r7, align 4
  %v0_ae58 = load i32, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ae60 = urem i32 %v0_ae50, 65536
  store i32 %v3_ae60, i32* %r2.global-to-local, align 4
  %v3_ae64 = urem i32 %v0_ae54, 65536
  store i32 %v3_ae64, i32* %r3.global-to-local, align 4
  %v3_ae68 = urem i32 %v0_ae58, 65536
  store i32 %v3_ae68, i32* %ip.global-to-local, align 4
  %v0_ae6c = load i32, i32* @fp, align 4
  %v2_ae6c = icmp eq i32 %v0_ae6c, 0
  store i1 %v2_ae6c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp75 = icmp slt i32 %v0_ae6c, 1
  br i1 %tmp75, label %dec_label_pc_b36c, label %dec_label_pc_ae84

dec_label_pc_ae84:                                ; preds = %dec_label_pc_ae50
  %v1_ae8c = add i32 %v6_adc8, 40
  %tmp76 = mul i32 %v1_ae8c, 256
  %v1_aea0 = urem i32 %v0_ae54, 256
  %v1_aea4 = and i32 %tmp76, 65280
  %v3_aea8 = mul nuw nsw i32 %v1_aea0, 256
  %v1_aeb0 = urem i32 %v0_ae58, 256
  %tmp77 = udiv i32 %v0_ae58, 256
  %v3_aeb4 = urem i32 %tmp77, 256
  %tmp78 = udiv i32 %v1_ae8c, 256
  %v4_aeb8 = urem i32 %tmp78, 256
  %v5_aeb8 = or i32 %v4_aeb8, %v1_aea4
  store i32 %v5_aeb8, i32* @lr, align 4
  %tmp79 = udiv i32 %v0_ae54, 256
  %v4_aebc = urem i32 %tmp79, 256
  %v5_aebc = or i32 %v4_aebc, %v3_aea8
  store i32 %v5_aebc, i32* @sl, align 4
  %v4_aec0 = mul nuw nsw i32 %v1_aeb0, 256
  %v5_aec0 = or i32 %v4_aec0, %v3_aeb4
  store i32 %v5_aec0, i32* @r6, align 4
  %tmp80 = udiv i32 %v0_ae50, 256
  %v3_aed0 = urem i32 %tmp80, 256
  %v1_aed4 = urem i32 %v0_ae50, 256
  %tmp81 = mul i32 %v6_ad04, 256
  %v1_aedc = and i32 %tmp81, 65280
  %v1_aee0 = urem i32 %v6_ad38, 2
  %v1_aee4 = urem i32 %v6_ad50, 2
  %v1_aee8 = urem i32 %v6_ad68, 2
  %tmp82 = udiv i32 %v6_ad04, 256
  %v4_aeec = urem i32 %tmp82, 256
  %v5_aeec = or i32 %v4_aeec, %v1_aedc
  store i32 %v5_aeec, i32* @r8, align 4
  %v1_af0c = urem i32 %v6_ad80, 2
  %v1_af10 = urem i32 %v6_ad98, 2
  %v1_af14 = urem i32 %v6_adb0, 2
  %v1_af18 = urem i32 %v6_ad68, 256
  %v4_af1c = mul nuw nsw i32 %v1_aed4, 256
  %v5_af1c = or i32 %v4_af1c, %v3_aed0
  store i32 %v5_af1c, i32* @r5, align 4
  %v3_af3025 = udiv i32 %v1_aea4, 256
  store i32 %v3_af3025, i32* %r3.global-to-local, align 4
  store i32 %v1_aed4, i32* %ip.global-to-local, align 4
  store i32 %v1_aea0, i32* %r1.global-to-local, align 4
  store i32 %v1_aeb0, i32* %r2.global-to-local, align 4
  %v5_af4c = trunc i32 %v0_ae54 to i8
  store i32 0, i32* @r4, align 4
  %sext8 = mul i32 %v0_ae50, 16777216
  %v4_afb4 = sdiv i32 %sext8, 16777216
  %sext9 = mul i32 %tmp78, 16777216
  %v4_afc8 = sdiv i32 %sext9, 16777216
  %sext10 = mul i32 %v1_ae8c, 16777216
  %v4_afcc = sdiv i32 %sext10, 16777216
  %tmp = sub nsw i32 0, %v1_aee0
  %v4_b01c = and i32 %tmp, 32
  %tmp93 = sub nsw i32 0, %v1_aee4
  %v4_b030 = and i32 %tmp93, 16
  %tmp94 = sub nsw i32 0, %v1_aee8
  %v4_b044 = and i32 %tmp94, 8
  %tmp95 = sub nsw i32 0, %v1_af0c
  %v4_b058 = and i32 %tmp95, 4
  %tmp96 = sub nsw i32 0, %v1_af10
  %v3_b06c = and i32 %tmp96, 2
  %sext11 = mul i32 %v0_ae58, 16777216
  %v7_b09c = sdiv i32 %sext11, 16777216
  %v1_afb0 = trunc i32 %v5_aca8 to i8
  %extract.t = trunc i32 %v4_afb4 to i8
  %v3_b09c = sext i8 %v5_af4c to i32
  %v2_b0c0 = icmp eq i32 %v1_af18, 0
  br label %dec_label_pc_af58

dec_label_pc_af58:                                ; preds = %bb89, %dec_label_pc_ae84
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_af64 = call i32 @function_129f8(i32 1510, i32 1)
  store i32 %v2_ac34, i32* %ip.global-to-local, align 4
  %v2_af70 = load i32, i32* @r4, align 4
  %v5_af70 = mul i32 %v2_af70, 4
  %v6_af70 = add i32 %v5_af70, %v2_ac34
  %v7_af70 = inttoptr i32 %v6_af70 to i32*
  store i32 %v2_af64, i32* %v7_af70, align 4
  %v3_af74 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_af74, i32* %r3.global-to-local, align 4
  %v0_af78 = load i32, i32* %ip.global-to-local, align 4
  %v4_af78 = mul i32 %v3_af74, 4
  %v5_af78 = add i32 %v0_af78, %v4_af78
  %v6_af78 = inttoptr i32 %v5_af78 to i32*
  %v7_af78 = load i32, i32* %v6_af78, align 4
  store i32 %v7_af78, i32* @r7, align 4
  %v1_af7c = inttoptr i32 %v7_af78 to i8*
  %v2_af7c = load i8, i8* %v1_af7c, align 1
  %tmp97 = urem i8 %v2_af7c, 16
  %v1_af80 = zext i8 %tmp97 to i32
  %v1_af84 = or i32 %v1_af80, 64
  store i32 %v1_af84, i32* %r2.global-to-local, align 4
  %v1_af88 = trunc i32 %v1_af84 to i8
  store i8 %v1_af88, i8* %v1_af7c, align 1
  %v0_af8c = load i32, i32* @r7, align 4
  %v1_af8c = inttoptr i32 %v0_af8c to i8*
  %v2_af8c = load i8, i8* %v1_af8c, align 1
  %v1_af90 = and i8 %v2_af8c, -16
  %v1_af94 = or i8 %v1_af90, 5
  store i32 %v1_acb4, i32* %r1.global-to-local, align 4
  store i8 %v1_af94, i8* %v1_af8c, align 1
  %v2_afa4 = load i32, i32* @r7, align 4
  %v3_afa4 = add i32 %v2_afa4, 1
  %v4_afa4 = inttoptr i32 %v3_afa4 to i8*
  store i8 %v5_ac6c, i8* %v4_afa4, align 1
  store i32 %v5_aca8, i32* %r3.global-to-local, align 4
  %v0_afac = load i32, i32* %r1.global-to-local, align 4
  %v2_afac = icmp eq i32 %v0_afac, 0
  store i1 %v2_afac, i1* %cpsr_z.global-to-local, align 1
  %v2_afb0 = load i32, i32* @r7, align 4
  %v3_afb0 = add i32 %v2_afb0, 8
  %v4_afb0 = inttoptr i32 %v3_afb0 to i8*
  store i8 %v1_afb0, i8* %v4_afb0, align 1
  store i32 %v4_afb4, i32* %r2.global-to-local, align 4
  %v0_afb8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afb8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_af58
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_afbc = load i32, i32* @r7, align 4
  %v4_afbc = add i32 %v3_afbc, 6
  %v5_afbc = inttoptr i32 %v4_afbc to i8*
  store i8 64, i8* %v5_afbc, align 1
  %v0_afc4.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t26 = trunc i32 %v0_afc4.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_af58, %bb
  %v0_afc4.off0 = phi i8 [ %extract.t, %dec_label_pc_af58 ], [ %extract.t26, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_afc4 = load i32, i32* @r7, align 4
  %v3_afc4 = add i32 %v2_afc4, 5
  %v4_afc4 = inttoptr i32 %v3_afc4 to i8*
  store i8 %v0_afc4.off0, i8* %v4_afc4, align 1
  store i32 %v4_afc8, i32* %ip.global-to-local, align 4
  store i32 %v4_afcc, i32* %r1.global-to-local, align 4
  %v0_afd0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afd0, label %bb84, label %bb83

bb83:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %.thread, %bb83
  %v0_afd4 = load i32, i32* %r3.global-to-local, align 4
  %v1_afd4 = trunc i32 %v0_afd4 to i8
  %v2_afd4 = load i32, i32* @r7, align 4
  %v3_afd4 = add i32 %v2_afd4, 9
  %v4_afd4 = inttoptr i32 %v3_afd4 to i8*
  store i8 %v1_afd4, i8* %v4_afd4, align 1
  %v0_afd8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afd8, label %bb86, label %bb85

bb85:                                             ; preds = %bb84
  %v1_afd8 = load i32, i32* %r2.global-to-local, align 4
  %v2_afd8 = trunc i32 %v1_afd8 to i8
  %v3_afd8 = load i32, i32* @r7, align 4
  %v4_afd8 = add i32 %v3_afd8, 7
  %v5_afd8 = inttoptr i32 %v4_afd8 to i8*
  store i8 %v2_afd8, i8* %v5_afd8, align 1
  br label %bb86

bb86:                                             ; preds = %bb84, %bb85
  %v3_afdc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_afdc, i32* %r2.global-to-local, align 4
  %v0_afe0 = load i32, i32* %ip.global-to-local, align 4
  %v1_afe0 = trunc i32 %v0_afe0 to i8
  %v2_afe0 = load i32, i32* @r7, align 4
  %v3_afe0 = add i32 %v2_afe0, 2
  %v4_afe0 = inttoptr i32 %v3_afe0 to i8*
  store i8 %v1_afe0, i8* %v4_afe0, align 1
  store i32 %v6_ae04, i32* %ip.global-to-local, align 4
  %v0_afe8 = load i32, i32* %r2.global-to-local, align 4
  %v3_afe8 = mul i32 %v0_afe8, 32
  store i32 %v3_afe8, i32* %r3.global-to-local, align 4
  %v1_afec = load i32, i32* @r7, align 4
  %v2_afec = add i32 %v1_afec, 12
  %v3_afec = inttoptr i32 %v2_afec to i32*
  store i32 %v6_ae04, i32* %v3_afec, align 4
  %v0_aff0 = load i32, i32* %r3.global-to-local, align 4
  %v1_aff0 = load i32, i32* %r2.global-to-local, align 4
  %tmp98 = mul i32 %v1_aff0, -8
  %v5_aff0 = add i32 %v0_aff0, %tmp98
  %v1_aff4 = load i32, i32* @sb, align 4
  %v2_aff4 = add i32 %v1_aff4, %v5_aff0
  store i32 %v2_aff4, i32* %r3.global-to-local, align 4
  %v1_aff8 = add i32 %v2_aff4, 16
  %v2_aff8 = inttoptr i32 %v1_aff8 to i32*
  %v3_aff8 = load i32, i32* %v2_aff8, align 4
  store i32 %v3_aff8, i32* %r2.global-to-local, align 4
  %v0_affc = load i32, i32* %r1.global-to-local, align 4
  %v1_affc = trunc i32 %v0_affc to i8
  %v2_affc = load i32, i32* @r7, align 4
  %v3_affc = add i32 %v2_affc, 3
  %v4_affc = inttoptr i32 %v3_affc to i8*
  store i8 %v1_affc, i8* %v4_affc, align 1
  %v0_b000 = load i32, i32* @r5, align 4
  %v1_b000 = trunc i32 %v0_b000 to i8
  %v2_b000 = load i32, i32* @r7, align 4
  %v3_b000 = add i32 %v2_b000, 4
  %v4_b000 = inttoptr i32 %v3_b000 to i8*
  store i8 %v1_b000, i8* %v4_b000, align 1
  %v0_b004 = load i32, i32* %r2.global-to-local, align 4
  %v1_b004 = load i32, i32* @r7, align 4
  %v2_b004 = add i32 %v1_b004, 16
  %v3_b004 = inttoptr i32 %v2_b004 to i32*
  store i32 %v0_b004, i32* %v3_b004, align 4
  %v0_b008 = load i32, i32* @sl, align 4
  %v1_b008 = trunc i32 %v0_b008 to i8
  %v2_b008 = load i32, i32* @r7, align 4
  %v3_b008 = add i32 %v2_b008, 20
  %v4_b008 = inttoptr i32 %v3_b008 to i8*
  store i8 %v1_b008, i8* %v4_b008, align 1
  %v0_b00c = load i32, i32* @r7, align 4
  %v1_b00c = add i32 %v0_b00c, 20
  store i32 %v1_b00c, i32* @r4, align 4
  %v1_b010 = add i32 %v0_b00c, 33
  %v2_b010 = inttoptr i32 %v1_b010 to i8*
  %v3_b010 = load i8, i8* %v2_b010, align 1
  %v4_b010 = zext i8 %v3_b010 to i32
  store i32 %v1_aee0, i32* %r1.global-to-local, align 4
  %v1_b018 = and i32 %v4_b010, 223
  %v5_b01c = or i32 %v1_b018, %v4_b01c
  store i32 %v5_b01c, i32* %r3.global-to-local, align 4
  %v1_b020 = trunc i32 %v5_b01c to i8
  store i8 %v1_b020, i8* %v2_b010, align 1
  %v0_b024 = load i32, i32* @r4, align 4
  %v1_b024 = add i32 %v0_b024, 13
  %v2_b024 = inttoptr i32 %v1_b024 to i8*
  %v3_b024 = load i8, i8* %v2_b024, align 1
  %v4_b024 = zext i8 %v3_b024 to i32
  store i32 %v1_aee4, i32* %r3.global-to-local, align 4
  %v1_b02c = and i32 %v4_b024, 239
  %v5_b030 = or i32 %v1_b02c, %v4_b030
  store i32 %v5_b030, i32* %r2.global-to-local, align 4
  %v1_b034 = trunc i32 %v5_b030 to i8
  store i8 %v1_b034, i8* %v2_b024, align 1
  %v0_b038 = load i32, i32* @r4, align 4
  %v1_b038 = add i32 %v0_b038, 13
  %v2_b038 = inttoptr i32 %v1_b038 to i8*
  %v3_b038 = load i8, i8* %v2_b038, align 1
  %v4_b038 = zext i8 %v3_b038 to i32
  store i32 %v1_aee8, i32* %ip.global-to-local, align 4
  %v1_b040 = and i32 %v4_b038, 247
  %v5_b044 = or i32 %v1_b040, %v4_b044
  store i32 %v5_b044, i32* %r3.global-to-local, align 4
  %v1_b048 = trunc i32 %v5_b044 to i8
  store i8 %v1_b048, i8* %v2_b038, align 1
  %v0_b04c = load i32, i32* @r4, align 4
  %v1_b04c = add i32 %v0_b04c, 13
  %v2_b04c = inttoptr i32 %v1_b04c to i8*
  %v3_b04c = load i8, i8* %v2_b04c, align 1
  %v4_b04c = zext i8 %v3_b04c to i32
  store i32 %v1_af0c, i32* %r1.global-to-local, align 4
  %v1_b054 = and i32 %v4_b04c, 251
  %v5_b058 = or i32 %v1_b054, %v4_b058
  store i32 %v5_b058, i32* %r2.global-to-local, align 4
  %v1_b05c = trunc i32 %v5_b058 to i8
  store i8 %v1_b05c, i8* %v2_b04c, align 1
  %v0_b060 = load i32, i32* @r4, align 4
  %v1_b060 = add i32 %v0_b060, 13
  %v2_b060 = inttoptr i32 %v1_b060 to i8*
  %v3_b060 = load i8, i8* %v2_b060, align 1
  %v4_b060 = zext i8 %v3_b060 to i32
  store i32 %v1_af10, i32* %r2.global-to-local, align 4
  %v1_b068 = and i32 %v4_b060, 253
  %v4_b06c = or i32 %v1_b068, %v3_b06c
  store i32 %v4_b06c, i32* %r3.global-to-local, align 4
  %v1_b070 = trunc i32 %v4_b06c to i8
  store i8 %v1_b070, i8* %v2_b060, align 1
  %v0_b074 = load i32, i32* @r4, align 4
  %v1_b074 = add i32 %v0_b074, 12
  %v2_b074 = inttoptr i32 %v1_b074 to i8*
  %v3_b074 = load i8, i8* %v2_b074, align 1
  %v4_b074 = zext i8 %v3_b074 to i32
  store i32 %v4_b074, i32* %r2.global-to-local, align 4
  %v1_b078 = add i32 %v0_b074, 13
  %v2_b078 = inttoptr i32 %v1_b078 to i8*
  %v3_b078 = load i8, i8* %v2_b078, align 1
  %v4_b078 = zext i8 %v3_b078 to i32
  store i32 %v1_af14, i32* %ip.global-to-local, align 4
  %tmp99 = urem i8 %v3_b074, 16
  %v1_b080 = zext i8 %tmp99 to i32
  %v1_b084 = and i32 %v4_b078, 254
  %v2_b088 = or i32 %v1_b084, %v1_af14
  store i32 %v2_b088, i32* %r3.global-to-local, align 4
  %v1_b08c = or i32 %v1_b080, 80
  store i32 %v1_b08c, i32* %r2.global-to-local, align 4
  %v1_b090 = trunc i32 %v2_b088 to i8
  store i8 %v1_b090, i8* %v2_b078, align 1
  %v0_b094 = load i32, i32* %r2.global-to-local, align 4
  %v1_b094 = trunc i32 %v0_b094 to i8
  %v2_b094 = load i32, i32* @r4, align 4
  %v3_b094 = add i32 %v2_b094, 12
  %v4_b094 = inttoptr i32 %v3_b094 to i8*
  store i8 %v1_b094, i8* %v4_b094, align 1
  store i32 %v3_b09c, i32* %r1.global-to-local, align 4
  store i32 %v7_b09c, i32* %r2.global-to-local, align 4
  %v2_b0a0 = load i32, i32* @r4, align 4
  %v3_b0a0 = add i32 %v2_b0a0, 1
  %v4_b0a0 = inttoptr i32 %v3_b0a0 to i8*
  store i8 %v5_af4c, i8* %v4_b0a0, align 1
  %v0_b0a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b0a4 = trunc i32 %v0_b0a4 to i8
  %v2_b0a4 = load i32, i32* @r4, align 4
  %v3_b0a4 = add i32 %v2_b0a4, 3
  %v4_b0a4 = inttoptr i32 %v3_b0a4 to i8*
  store i8 %v1_b0a4, i8* %v4_b0a4, align 1
  %v0_b0a8 = load i32, i32* @r6, align 4
  %v1_b0a8 = trunc i32 %v0_b0a8 to i8
  %v2_b0a8 = load i32, i32* @r4, align 4
  %v3_b0a8 = add i32 %v2_b0a8, 2
  %v4_b0a8 = inttoptr i32 %v3_b0a8 to i8*
  store i8 %v1_b0a8, i8* %v4_b0a8, align 1
  %v0_b0ac = load i32, i32* @r8, align 4
  %v1_b0ac = load i32, i32* @r4, align 4
  %v2_b0ac = add i32 %v1_b0ac, 4
  %v3_b0ac = inttoptr i32 %v2_b0ac to i32*
  store i32 %v0_b0ac, i32* %v3_b0ac, align 4
  %v0_b0b0 = call i32 @function_eb90()
  store i32 %v1_af18, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_b0b0, 16777216
  %v1_b0b8 = sdiv i32 %sext, 16777216
  store i32 %v1_b0b8, i32* %r2.global-to-local, align 4
  %v3_b0bc = ashr i32 %sext, 31
  store i32 %v3_b0bc, i32* %r3.global-to-local, align 4
  store i1 %v2_b0c0, i1* %cpsr_z.global-to-local, align 1
  %v1_b0c4 = trunc i32 %v3_b0bc to i8
  %v2_b0c4 = load i32, i32* @r4, align 4
  %v3_b0c4 = add i32 %v2_b0c4, 15
  %v4_b0c4 = inttoptr i32 %v3_b0c4 to i8*
  store i8 %v1_b0c4, i8* %v4_b0c4, align 1
  %v0_b0c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_b0d4.pre = load i32, i32* @r4, align 4
  br i1 %v0_b0c8, label %.thread12, label %bb87

bb87:                                             ; preds = %bb86
  %v2_b0c8 = add i32 %v2_b0d4.pre, 13
  %v3_b0c8 = inttoptr i32 %v2_b0c8 to i8*
  %v4_b0c8 = load i8, i8* %v3_b0c8, align 1
  %v5_b0c8 = zext i8 %v4_b0c8 to i32
  %v2_b0cc = or i32 %v5_b0c8, 8
  store i32 %v2_b0cc, i32* %r3.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb86, %bb87
  store i32 %v6_adc8, i32* @r1, align 4
  %v0_b0d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b0d4 = trunc i32 %v0_b0d4 to i8
  %v3_b0d4 = add i32 %v2_b0d4.pre, 14
  %v4_b0d4 = inttoptr i32 %v3_b0d4 to i8*
  store i8 %v1_b0d4, i8* %v4_b0d4, align 1
  %v0_b0d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b0d8, label %bb89, label %bb88

bb88:                                             ; preds = %.thread12
  %v1_b0d8 = load i32, i32* %r3.global-to-local, align 4
  %v2_b0d8 = trunc i32 %v1_b0d8 to i8
  %v3_b0d8 = load i32, i32* @r4, align 4
  %v4_b0d8 = add i32 %v3_b0d8, 13
  %v5_b0d8 = inttoptr i32 %v4_b0d8 to i8*
  store i8 %v2_b0d8, i8* %v5_b0d8, align 1
  br label %bb89

bb89:                                             ; preds = %.thread12, %bb88
  %v0_b0dc = load i32, i32* @r7, align 4
  %v1_b0dc = add i32 %v0_b0dc, 40
  %v1_b0e0 = inttoptr i32 %v1_b0dc to i8*
  %v2_b0e0 = call i32 @function_ed10(i8* %v1_b0e0)
  %v3_b0e4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b0e4, i32* %r3.global-to-local, align 4
  %v1_b0e8 = add i32 %v3_b0e4, 1
  store i32 %v1_b0e8, i32* @r4, align 4
  %v0_b0ec = load i32, i32* @fp, align 4
  %v9_b0ec = icmp eq i32 %v0_b0ec, %v1_b0e8
  store i1 %v9_b0ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b0e8, i32* %stack_var_-40, align 4
  %v8_b0f4 = icmp sgt i32 %v0_b0ec, %v1_b0e8
  br i1 %v8_b0f4, label %dec_label_pc_af58, label %dec_label_pc_b0f8

dec_label_pc_b0f8:                                ; preds = %bb89
  store i32 %v6_adc8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_b100.preheader

dec_label_pc_b100.preheader:                      ; preds = %dec_label_pc_b0f8, %dec_label_pc_b36c
  %v0_b10017 = phi i32 [ %v0_b0ec, %dec_label_pc_b0f8 ], [ %v0_ae6c, %dec_label_pc_b36c ]
  %stack_var_-168.0.ph = phi i32 [ %v1_ae8c, %dec_label_pc_b0f8 ], [ %v1_b374, %dec_label_pc_b36c ]
  %storemerge = add i32 %v6_adc8, 20
  store i32 %storemerge, i32* @r8, align 4
  %v3_b2b8 = icmp eq i32 %v6_ae04, -1
  %v8_b2b8 = icmp eq i32 %v6_ae04, -1
  %v3_b2d4 = icmp eq i32 %v3_ae60, 65535
  %v2_b350 = icmp eq i32 %v1_adf0, 0
  br label %dec_label_pc_b100

dec_label_pc_b100:                                ; preds = %dec_label_pc_b1a8, %dec_label_pc_b100.preheader
  %v0_b100 = phi i32 [ %v0_b10017, %dec_label_pc_b100.preheader ], [ %v0_b23c, %dec_label_pc_b1a8 ]
  %v2_b100 = icmp eq i32 %v0_b100, 0
  store i1 %v2_b100, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp90 = icmp slt i32 %v0_b100, 1
  br label %dec_label_pc_b108

dec_label_pc_b108:                                ; preds = %dec_label_pc_b108, %dec_label_pc_b100
  br i1 %tmp90, label %dec_label_pc_b108, label %dec_label_pc_b10c

dec_label_pc_b10c:                                ; preds = %dec_label_pc_b108
  %v0_b10c = load i32, i32* @r8, align 4
  %v3_b10c = mul i32 %v0_b10c, 65536
  store i32 %v3_b10c, i32* %r2.global-to-local, align 4
  %tmp91 = mul i32 %v0_b10c, 256
  %v1_b114 = and i32 %tmp91, 65280
  store i32 %v1_b114, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %tmp92 = udiv i32 %v0_b10c, 256
  %v4_b120 = urem i32 %tmp92, 256
  %v5_b120 = or i32 %v4_b120, %v1_b114
  store i32 %v5_b120, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_b128

dec_label_pc_b128:                                ; preds = %dec_label_pc_b1a8, %dec_label_pc_b10c
  %v1_b13c = phi i32 [ %v1_b238, %dec_label_pc_b1a8 ], [ 0, %dec_label_pc_b10c ]
  %v5_b12c = mul i32 %v1_b13c, 24
  %v1_b130 = load i32, i32* @sb, align 4
  %v2_b130 = add i32 %v1_b130, %v5_b12c
  store i32 %v2_b130, i32* %r3.global-to-local, align 4
  store i32 %v2_ac34, i32* %ip.global-to-local, align 4
  %v1_b138 = add i32 %v2_b130, 20
  %v2_b138 = inttoptr i32 %v1_b138 to i8*
  %v3_b138 = load i8, i8* %v2_b138, align 1
  %v4_b138 = zext i8 %v3_b138 to i32
  store i32 %v4_b138, i32* %r2.global-to-local, align 4
  %v4_b13c = mul i32 %v1_b13c, 4
  %v5_b13c = add i32 %v4_b13c, %v2_ac34
  %v6_b13c = inttoptr i32 %v5_b13c to i32*
  %v7_b13c = load i32, i32* %v6_b13c, align 4
  store i32 %v7_b13c, i32* @r5, align 4
  %v7_b140 = icmp eq i8 %v3_b138, 31
  store i1 %v7_b140, i1* %cpsr_z.global-to-local, align 1
  %v1_b144 = add i32 %v7_b13c, 20
  store i32 %v1_b144, i32* @r6, align 4
  %tmp100 = icmp ult i8 %v3_b138, 32
  br i1 %tmp100, label %dec_label_pc_b25c, label %dec_label_pc_b14c

dec_label_pc_b14c:                                ; preds = %dec_label_pc_b128
  store i32 %v6_ae04, i32* %r1.global-to-local, align 4
  store i1 %v8_b2b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_b2b8, label %dec_label_pc_b2c4, label %dec_label_pc_b158

dec_label_pc_b158:                                ; preds = %dec_label_pc_b25c, %dec_label_pc_b14c
  store i32 %v3_ae60, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b2d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b2d4, label %dec_label_pc_b2e0, label %dec_label_pc_b16c

dec_label_pc_b16c:                                ; preds = %dec_label_pc_b2c4.dec_label_pc_b16c_crit_edge, %dec_label_pc_b158
  %v1_b170 = phi i32 [ %v1_b170.pre, %dec_label_pc_b2c4.dec_label_pc_b16c_crit_edge ], [ 65535, %dec_label_pc_b158 ]
  store i32 %v3_ae64, i32* %r3.global-to-local, align 4
  %v9_b170 = icmp eq i32 %v3_ae64, %v1_b170
  store i1 %v9_b170, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b170, label %dec_label_pc_b2fc, label %dec_label_pc_b178

dec_label_pc_b178:                                ; preds = %dec_label_pc_b2e0.dec_label_pc_b178_crit_edge, %dec_label_pc_b16c
  %v1_b17c = phi i32 [ %v1_b17c.pre, %dec_label_pc_b2e0.dec_label_pc_b178_crit_edge ], [ %v1_b170, %dec_label_pc_b16c ]
  store i32 %v3_ae68, i32* %ip.global-to-local, align 4
  %v9_b17c = icmp eq i32 %v3_ae68, %v1_b17c
  store i1 %v9_b17c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b17c, label %dec_label_pc_b318, label %dec_label_pc_b184

dec_label_pc_b184:                                ; preds = %dec_label_pc_b2fc.dec_label_pc_b184_crit_edge, %dec_label_pc_b178
  %v1_b188 = phi i32 [ %v1_b188.pre, %dec_label_pc_b2fc.dec_label_pc_b184_crit_edge ], [ %v1_b17c, %dec_label_pc_b178 ]
  store i32 %v6_ad04, i32* %r1.global-to-local, align 4
  %v9_b188 = icmp eq i32 %v6_ad04, %v1_b188
  store i1 %v9_b188, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b188, label %dec_label_pc_b334, label %dec_label_pc_b190

dec_label_pc_b190:                                ; preds = %dec_label_pc_b318.dec_label_pc_b190_crit_edge, %dec_label_pc_b184
  %v1_b194 = phi i32 [ %v1_b194.pre, %dec_label_pc_b318.dec_label_pc_b190_crit_edge ], [ %v1_b188, %dec_label_pc_b184 ]
  store i32 %v6_ad20, i32* %r2.global-to-local, align 4
  %v9_b194 = icmp eq i32 %v6_ad20, %v1_b194
  store i1 %v9_b194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b194, label %dec_label_pc_b348, label %dec_label_pc_b19c

dec_label_pc_b19c:                                ; preds = %dec_label_pc_b334, %dec_label_pc_b190
  store i32 %v1_adf0, i32* %r3.global-to-local, align 4
  store i1 %v2_b350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b350, label %dec_label_pc_b1a8, label %dec_label_pc_b35c

dec_label_pc_b1a8:                                ; preds = %dec_label_pc_b19c, %dec_label_pc_b348, %dec_label_pc_b35c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b1ac = load i32, i32* @r7, align 4
  %v1_b1ac = trunc i32 %v0_b1ac to i8
  %v2_b1ac = load i32, i32* @r5, align 4
  %v3_b1ac = add i32 %v2_b1ac, 10
  %v4_b1ac = inttoptr i32 %v3_b1ac to i8*
  store i8 %v1_b1ac, i8* %v4_b1ac, align 1
  %v0_b1b0 = load i32, i32* @r7, align 4
  %v1_b1b0 = trunc i32 %v0_b1b0 to i8
  %v2_b1b0 = load i32, i32* @r5, align 4
  %v3_b1b0 = add i32 %v2_b1b0, 11
  %v4_b1b0 = inttoptr i32 %v3_b1b0 to i8*
  store i8 %v1_b1b0, i8* %v4_b1b0, align 1
  %v0_b1b4 = load i32, i32* @r5, align 4
  store i32 %v0_b1b4, i32* @r0, align 4
  %v2_b1b8 = call i32 @function_d0b8(i32 %v0_b1b4, i32 20)
  %v3_b1b8 = trunc i32 %v2_b1b8 to i8
  %v4_b1bc28 = udiv i32 %v2_b1b8, 256
  %v1_b1c0 = trunc i32 %v4_b1bc28 to i8
  %v2_b1c0 = load i32, i32* @r5, align 4
  %v3_b1c0 = add i32 %v2_b1c0, 11
  %v4_b1c0 = inttoptr i32 %v3_b1c0 to i8*
  store i8 %v1_b1c0, i8* %v4_b1c0, align 1
  %v3_b1c4 = load i32, i32* @r5, align 4
  %v4_b1c4 = add i32 %v3_b1c4, 10
  %v5_b1c4 = inttoptr i32 %v4_b1c4 to i8*
  store i8 %v3_b1b8, i8* %v5_b1c4, align 1
  %v0_b1c8 = load i32, i32* @r6, align 4
  store i32 %v0_b1c8, i32* @r1, align 4
  %v0_b1cc = load i32, i32* @sl, align 4
  store i32 %v0_b1cc, i32* %r2.global-to-local, align 4
  %v0_b1d0 = load i32, i32* @r8, align 4
  store i32 %v0_b1d0, i32* %r3.global-to-local, align 4
  %v0_b1d4 = load i32, i32* @r7, align 4
  %v1_b1d4 = trunc i32 %v0_b1d4 to i8
  %v3_b1d4 = add i32 %v0_b1c8, 16
  %v4_b1d4 = inttoptr i32 %v3_b1d4 to i8*
  store i8 %v1_b1d4, i8* %v4_b1d4, align 1
  %v0_b1d8 = load i32, i32* @r7, align 4
  %v1_b1d8 = trunc i32 %v0_b1d8 to i8
  %v2_b1d8 = load i32, i32* @r6, align 4
  %v3_b1d8 = add i32 %v2_b1d8, 17
  %v4_b1d8 = inttoptr i32 %v3_b1d8 to i8*
  store i8 %v1_b1d8, i8* %v4_b1d8, align 1
  %v0_b1dc = load i32, i32* @r5, align 4
  %v4_b1e0 = call i32 @function_d114(i32 %v0_b1dc, i32 %v0_b1c8, i32 %v0_b1cc, i32 %v0_b1d0)
  %v5_b1e0 = trunc i32 %v4_b1e0 to i8
  %v4_b1e429 = udiv i32 %v4_b1e0, 256
  %v1_b1e8 = trunc i32 %v4_b1e429 to i8
  %v2_b1e8 = load i32, i32* @r6, align 4
  %v3_b1e8 = add i32 %v2_b1e8, 17
  %v4_b1e8 = inttoptr i32 %v3_b1e8 to i8*
  store i8 %v1_b1e8, i8* %v4_b1e8, align 1
  %v3_b1ec = load i32, i32* @r6, align 4
  %v4_b1ec = add i32 %v3_b1ec, 16
  %v5_b1ec = inttoptr i32 %v4_b1ec to i8*
  store i8 %v5_b1e0, i8* %v5_b1ec, align 1
  %v3_b1f0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b1f0, i32* %r3.global-to-local, align 4
  %v0_b1f4 = load i32, i32* @r5, align 4
  %v1_b1f4 = add i32 %v0_b1f4, 20
  %v2_b1f4 = inttoptr i32 %v1_b1f4 to i32*
  %v3_b1f4 = load i32, i32* %v2_b1f4, align 4
  %v3_b1fc = udiv i32 %v3_b1f4, 65536
  store i32 %v3_b1fc, i32* %r2.global-to-local, align 4
  %v5_b200 = mul i32 %v3_b1f0, 24
  %v1_b204 = load i32, i32* @sb, align 4
  %v2_b204 = add i32 %v1_b204, %v5_b200
  store i32 %v2_b204, i32* %ip.global-to-local, align 4
  %v3_b20827 = udiv i32 %v3_b1f4, 16777216
  %v1_b20c = trunc i32 %v3_b20827 to i8
  %v3_b20c = add i32 %v2_b204, 3
  %v4_b20c = inttoptr i32 %v3_b20c to i8*
  store i8 %v1_b20c, i8* %v4_b20c, align 1
  %v0_b210 = load i32, i32* %r2.global-to-local, align 4
  %v1_b210 = trunc i32 %v0_b210 to i8
  %v2_b210 = load i32, i32* %ip.global-to-local, align 4
  %v3_b210 = add i32 %v2_b210, 2
  %v4_b210 = inttoptr i32 %v3_b210 to i8*
  store i8 %v1_b210, i8* %v4_b210, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b218 = load i32, i32* @r5, align 4
  store i32 %v0_b218, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-168.0.ph, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_b228 = load i32, i32* %ip.global-to-local, align 4
  %v6_b230 = inttoptr i32 %v0_b218 to i32*
  %v7_b230 = call i32 @function_126a8(i32 %v3_ae18, i32* %v6_b230, i32 %stack_var_-168.0.ph, i32 16384, i32 %v0_b228, i32 16)
  %v3_b234 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b234, i32* %r3.global-to-local, align 4
  %v1_b238 = add i32 %v3_b234, 1
  %v0_b23c = load i32, i32* @fp, align 4
  %v9_b23c = icmp eq i32 %v0_b23c, %v1_b238
  store i1 %v9_b23c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b238, i32* %stack_var_-40, align 4
  %v7_b244 = icmp sgt i32 %v0_b23c, %v1_b238
  br i1 %v7_b244, label %dec_label_pc_b128, label %dec_label_pc_b100

dec_label_pc_b24c:                                ; preds = %dec_label_pc_ae28
  %v1_b250 = call i32 @function_11dfc(i32 %v3_ae18)
  br label %dec_label_pc_b254

dec_label_pc_b254:                                ; preds = %dec_label_pc_ac14, %dec_label_pc_b24c
  %v29_b258 = phi i32 [ %v3_ae18, %dec_label_pc_ac14 ], [ %v1_b250, %dec_label_pc_b24c ]
  ret i32 %v29_b258

dec_label_pc_b25c:                                ; preds = %dec_label_pc_b128
  %v1_b25c = add i32 %v2_b130, 16
  %v2_b25c = inttoptr i32 %v1_b25c to i32*
  %v3_b25c = load i32, i32* %v2_b25c, align 4
  %v0_b260 = call i32 @function_eb90()
  %v3_b264 = load i32, i32* %stack_var_-40, align 4
  %v5_b26c = mul i32 %v3_b264, 24
  %v1_b274 = load i32, i32* @sb, align 4
  %v2_b274 = add i32 %v1_b274, %v5_b26c
  store i32 %v2_b274, i32* %r1.global-to-local, align 4
  %v1_b278 = and i32 %v3_b25c, 65280
  store i32 %v1_b278, i32* %r3.global-to-local, align 4
  %v1_b270 = udiv i32 %v3_b25c, 256
  %v3_b27c = and i32 %v1_b270, 65280
  store i32 %v3_b27c, i32* %r2.global-to-local, align 4
  %v3_b280 = mul i32 %v3_b25c, 16777216
  store i32 %v3_b280, i32* %ip.global-to-local, align 4
  %v1_b284 = add i32 %v2_b274, 20
  %v2_b284 = inttoptr i32 %v1_b284 to i8*
  %v3_b284 = load i8, i8* %v2_b284, align 1
  %v4_b284 = zext i8 %v3_b284 to i32
  %v4_b288 = mul nuw nsw i32 %v1_b278, 256
  %v5_b288 = or i32 %v4_b288, %v3_b280
  store i32 %v5_b288, i32* %ip.global-to-local, align 4
  %v2_b290 = call i32 @llvm.bswap.i32(i32 %v3_b25c)
  %v7_b294 = lshr i32 %v0_b260, %v4_b284
  %v8_b294 = add i32 %v7_b294, %v2_b290
  store i32 %v8_b294, i32* %r2.global-to-local, align 4
  %v2_b2b0 = call i32 @llvm.bswap.i32(i32 %v8_b294)
  store i32 %v2_b2b0, i32* %r3.global-to-local, align 4
  store i32 %v6_ae04, i32* %r1.global-to-local, align 4
  store i1 %v8_b2b8, i1* %cpsr_z.global-to-local, align 1
  %v1_b2bc = load i32, i32* @r5, align 4
  %v2_b2bc = add i32 %v1_b2bc, 16
  %v3_b2bc = inttoptr i32 %v2_b2bc to i32*
  store i32 %v2_b2b0, i32* %v3_b2bc, align 4
  br i1 %v3_b2b8, label %dec_label_pc_b2c4, label %dec_label_pc_b158

dec_label_pc_b2c4:                                ; preds = %dec_label_pc_b25c, %dec_label_pc_b14c
  %v0_b2c4 = call i32 @function_eb90()
  store i32 %v3_ae60, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b2d4, i1* %cpsr_z.global-to-local, align 1
  %v1_b2d8 = load i32, i32* @r5, align 4
  %v2_b2d8 = add i32 %v1_b2d8, 12
  %v3_b2d8 = inttoptr i32 %v2_b2d8 to i32*
  store i32 %v0_b2c4, i32* %v3_b2d8, align 4
  br i1 %v3_b2d4, label %dec_label_pc_b2e0, label %dec_label_pc_b2c4.dec_label_pc_b16c_crit_edge

dec_label_pc_b2c4.dec_label_pc_b16c_crit_edge:    ; preds = %dec_label_pc_b2c4
  %v1_b170.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b16c

dec_label_pc_b2e0:                                ; preds = %dec_label_pc_b2c4, %dec_label_pc_b158
  %v0_b2e0 = call i32 @function_eb90()
  %v1_b2e0 = trunc i32 %v0_b2e0 to i8
  %v4_b2e430 = udiv i32 %v0_b2e0, 256
  %v1_b2e8 = trunc i32 %v4_b2e430 to i8
  %v2_b2e8 = load i32, i32* @r5, align 4
  %v3_b2e8 = add i32 %v2_b2e8, 5
  %v4_b2e8 = inttoptr i32 %v3_b2e8 to i8*
  store i8 %v1_b2e8, i8* %v4_b2e8, align 1
  store i32 %v3_ae64, i32* %r3.global-to-local, align 4
  %v1_b2f0 = load i32, i32* @r4, align 4
  %v9_b2f0 = icmp eq i32 %v3_ae64, %v1_b2f0
  store i1 %v9_b2f0, i1* %cpsr_z.global-to-local, align 1
  %v3_b2f4 = load i32, i32* @r5, align 4
  %v4_b2f4 = add i32 %v3_b2f4, 4
  %v5_b2f4 = inttoptr i32 %v4_b2f4 to i8*
  store i8 %v1_b2e0, i8* %v5_b2f4, align 1
  %v0_b2f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b2f8, label %dec_label_pc_b2fc, label %dec_label_pc_b2e0.dec_label_pc_b178_crit_edge

dec_label_pc_b2e0.dec_label_pc_b178_crit_edge:    ; preds = %dec_label_pc_b2e0
  %v1_b17c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b178

dec_label_pc_b2fc:                                ; preds = %dec_label_pc_b2e0, %dec_label_pc_b16c
  %v0_b2fc = call i32 @function_eb90()
  %v1_b2fc = trunc i32 %v0_b2fc to i8
  store i32 %v3_ae68, i32* %ip.global-to-local, align 4
  %v4_b304 = sdiv i32 %v0_b2fc, 256
  store i32 %v4_b304, i32* %r3.global-to-local, align 4
  %v1_b308 = load i32, i32* @r4, align 4
  %v9_b308 = icmp eq i32 %v3_ae68, %v1_b308
  store i1 %v9_b308, i1* %cpsr_z.global-to-local, align 1
  %v3_b30c = load i32, i32* @r5, align 4
  %v4_b30c = add i32 %v3_b30c, 20
  %v5_b30c = inttoptr i32 %v4_b30c to i8*
  store i8 %v1_b2fc, i8* %v5_b30c, align 1
  %v0_b310 = load i32, i32* %r3.global-to-local, align 4
  %v1_b310 = trunc i32 %v0_b310 to i8
  %v2_b310 = load i32, i32* @r6, align 4
  %v3_b310 = add i32 %v2_b310, 1
  %v4_b310 = inttoptr i32 %v3_b310 to i8*
  store i8 %v1_b310, i8* %v4_b310, align 1
  %v0_b314 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b314, label %dec_label_pc_b318, label %dec_label_pc_b2fc.dec_label_pc_b184_crit_edge

dec_label_pc_b2fc.dec_label_pc_b184_crit_edge:    ; preds = %dec_label_pc_b2fc
  %v1_b188.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b184

dec_label_pc_b318:                                ; preds = %dec_label_pc_b2fc, %dec_label_pc_b178
  %v0_b318 = call i32 @function_eb90()
  %v1_b318 = trunc i32 %v0_b318 to i8
  store i32 %v6_ad04, i32* %r1.global-to-local, align 4
  %v4_b320 = sdiv i32 %v0_b318, 256
  store i32 %v4_b320, i32* %r3.global-to-local, align 4
  %v1_b324 = load i32, i32* @r4, align 4
  %v9_b324 = icmp eq i32 %v6_ad04, %v1_b324
  store i1 %v9_b324, i1* %cpsr_z.global-to-local, align 1
  %v1_b328 = trunc i32 %v4_b320 to i8
  %v2_b328 = load i32, i32* @r6, align 4
  %v3_b328 = add i32 %v2_b328, 3
  %v4_b328 = inttoptr i32 %v3_b328 to i8*
  store i8 %v1_b328, i8* %v4_b328, align 1
  %v3_b32c = load i32, i32* @r6, align 4
  %v4_b32c = add i32 %v3_b32c, 2
  %v5_b32c = inttoptr i32 %v4_b32c to i8*
  store i8 %v1_b318, i8* %v5_b32c, align 1
  %v0_b330 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b330, label %dec_label_pc_b334, label %dec_label_pc_b318.dec_label_pc_b190_crit_edge

dec_label_pc_b318.dec_label_pc_b190_crit_edge:    ; preds = %dec_label_pc_b318
  %v1_b194.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b190

dec_label_pc_b334:                                ; preds = %dec_label_pc_b318, %dec_label_pc_b184
  %v0_b334 = call i32 @function_eb90()
  store i32 %v6_ad20, i32* %r2.global-to-local, align 4
  %v1_b33c = load i32, i32* @r4, align 4
  %v9_b33c = icmp eq i32 %v6_ad20, %v1_b33c
  store i1 %v9_b33c, i1* %cpsr_z.global-to-local, align 1
  %v1_b340 = load i32, i32* @r6, align 4
  %v2_b340 = add i32 %v1_b340, 4
  %v3_b340 = inttoptr i32 %v2_b340 to i32*
  store i32 %v0_b334, i32* %v3_b340, align 4
  br i1 %v9_b33c, label %dec_label_pc_b348, label %dec_label_pc_b19c

dec_label_pc_b348:                                ; preds = %dec_label_pc_b334, %dec_label_pc_b190
  %v0_b348 = call i32 @function_eb90()
  store i32 %v1_adf0, i32* %r3.global-to-local, align 4
  store i1 %v2_b350, i1* %cpsr_z.global-to-local, align 1
  %v1_b354 = load i32, i32* @r6, align 4
  %v2_b354 = add i32 %v1_b354, 8
  %v3_b354 = inttoptr i32 %v2_b354 to i32*
  store i32 %v0_b348, i32* %v3_b354, align 4
  br i1 %v2_b350, label %dec_label_pc_b1a8, label %dec_label_pc_b35c

dec_label_pc_b35c:                                ; preds = %dec_label_pc_b19c, %dec_label_pc_b348
  %v0_b35c = load i32, i32* @r5, align 4
  %v1_b35c = add i32 %v0_b35c, 40
  store i32 %v6_adc8, i32* @r1, align 4
  %v1_b364 = inttoptr i32 %v1_b35c to i8*
  %v2_b364 = call i32 @function_ed10(i8* %v1_b364)
  br label %dec_label_pc_b1a8

dec_label_pc_b36c:                                ; preds = %dec_label_pc_ae50
  store i32 %v6_adc8, i32* %r3.global-to-local, align 4
  %v1_b374 = add i32 %v6_adc8, 40
  store i32 %v1_b374, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b100.preheader

; uselistorder directives
  uselistorder i32 %v1_b374, { 1, 0 }
  uselistorder i32 %v4_b320, { 1, 0 }
  uselistorder i32 %v2_b2b0, { 1, 0 }
  uselistorder i32 %v3_b280, { 1, 0 }
  uselistorder i32 %v3_b25c, { 1, 3, 2, 0 }
  uselistorder i32 %v0_b23c, { 1, 2, 0 }
  uselistorder i32 %v1_b238, { 2, 0, 3, 1 }
  uselistorder i32 %v0_b1c8, { 1, 0, 2 }
  uselistorder i32 %v0_b10c, { 2, 0, 1 }
  uselistorder i32 %v0_b100, { 1, 0 }
  uselistorder i1 %v2_b350, { 2, 3, 1, 0 }
  uselistorder i1 %v3_b2d4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b0e8, { 1, 0, 2, 3 }
  uselistorder i8 %v5_af4c, { 1, 0 }
  uselistorder i32 %v1_af14, { 1, 0 }
  uselistorder i32 %v1_af10, { 1, 0 }
  uselistorder i32 %v1_af0c, { 1, 0 }
  uselistorder i32 %v1_aee8, { 1, 0 }
  uselistorder i32 %v1_aee4, { 1, 0 }
  uselistorder i32 %v1_aee0, { 1, 0 }
  uselistorder i32 %v1_aed4, { 1, 0 }
  uselistorder i32 %v1_aeb0, { 1, 0 }
  uselistorder i32 %v1_aea0, { 1, 0 }
  uselistorder i32 %v1_ae8c, { 3, 0, 2, 1 }
  uselistorder i32 %v0_ae6c, { 1, 0, 2 }
  uselistorder i32 %v3_ae60, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ae54, { 3, 0, 1, 2 }
  uselistorder i32 %v0_ae50, { 0, 2, 1, 3 }
  uselistorder i1 %v7_ae48, { 1, 0 }
  uselistorder i1 %v7_ae1c, { 1, 0 }
  uselistorder i32 %v3_ae18, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v6_ae04, { 4, 3, 0, 5, 1, 2 }
  uselistorder i32 %v1_adf0, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_adc8, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32 %v6_ad20, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_ad04, { 2, 5, 4, 3, 1, 0, 6 }
  uselistorder i32 %v1_acb4, { 1, 2, 0 }
  uselistorder i32 %v5_aca8, { 0, 2, 1 }
  uselistorder i32 %v6_ac4c, { 1, 2, 0 }
  uselistorder i32 %v2_ac34, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_ac18, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder label %dec_label_pc_b35c, { 1, 0 }
  uselistorder label %dec_label_pc_b254, { 1, 0 }
  uselistorder label %dec_label_pc_b1a8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b100.preheader, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %.thread12, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_b388(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b388:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_b388 = load i32, i32* @r4, align 4
  %v12_b388 = load i32, i32* @r7, align 4
  %v1_b38c = urem i32 %arg1, 256
  store i32 %v1_b38c, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_b38c, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b3a4 = urem i32 %arg3, 256
  store i32 %v1_b3a4, i32* @r4, align 4
  %v2_b3a8 = call i32 @function_129f8(i32 %v1_b38c, i32 4)
  %v0_b3ac = load i32, i32* @r5, align 4
  store i32 %v0_b3ac, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_b3a8, i32* %fp.global-to-local, align 4
  %v0_b3bc = load i32, i32* @r4, align 4
  store i32 %v0_b3bc, i32* %r0.global-to-local, align 4
  %v5_b3c0 = inttoptr i32 %v0_b3ac to i32*
  %v6_b3c0 = call i32 @function_85e0(i32 %v0_b3bc, i32* %v5_b3c0, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_b3cc = urem i32 %v6_b3c0, 256
  store i32 %v1_b3cc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b3d8 = load i32, i32* @r5, align 4
  store i32 %v0_b3d8, i32* %r1.global-to-local, align 4
  %v0_b3dc = load i32, i32* @r4, align 4
  store i32 %v0_b3dc, i32* %r0.global-to-local, align 4
  %v5_b3e0 = trunc i32 %v6_b3c0 to i8
  %v6_b3e4 = inttoptr i32 %v0_b3d8 to i32*
  %v7_b3e4 = call i32 @function_85e0(i32 %v0_b3dc, i32* %v6_b3e4, i32 3, i32 65535, i32 %v6_b3c0)
  %v0_b3e8 = load i32, i32* @r5, align 4
  store i32 %v0_b3e8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b3f8 = load i32, i32* @r4, align 4
  store i32 %v0_b3f8, i32* %r0.global-to-local, align 4
  %v5_b3fc = inttoptr i32 %v0_b3e8 to i32*
  %v6_b3fc = call i32 @function_85e0(i32 %v0_b3f8, i32* %v5_b3fc, i32 4, i32 64, i32 %v7_b3e4)
  %v1_b404 = urem i32 %v6_b3fc, 256
  store i32 %v1_b404, i32* %ip.global-to-local, align 4
  %v0_b408 = load i32, i32* @r5, align 4
  store i32 %v0_b408, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b414 = load i32, i32* @r4, align 4
  store i32 %v0_b414, i32* %r0.global-to-local, align 4
  %sext9 = mul i32 %v6_b3fc, 16777216
  %v5_b41c = sdiv i32 %sext9, 16777216
  %v6_b41c = inttoptr i32 %v0_b408 to i32*
  %v7_b41c = call i32 @function_85e0(i32 %v0_b414, i32* %v6_b41c, i32 5, i32 1, i32 %v5_b41c)
  %v1_b428 = urem i32 %v7_b41c, 256
  store i32 %v1_b428, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b434 = load i32, i32* @r5, align 4
  store i32 %v0_b434, i32* %r1.global-to-local, align 4
  %v0_b438 = load i32, i32* @r4, align 4
  store i32 %v0_b438, i32* %r0.global-to-local, align 4
  %v5_b440 = inttoptr i32 %v0_b434 to i32*
  %v6_b440 = call i32 @function_85e0(i32 %v0_b438, i32* %v5_b440, i32 6, i32 65535, i32 %v1_b428)
  %v0_b448 = load i32, i32* @r5, align 4
  store i32 %v0_b448, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_b440, i32* @r7, align 4
  %v0_b458 = load i32, i32* @r4, align 4
  store i32 %v0_b458, i32* %r0.global-to-local, align 4
  %v5_b45c = inttoptr i32 %v0_b448 to i32*
  %v6_b45c = call i32 @function_85e0(i32 %v0_b458, i32* %v5_b45c, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b464 = load i32, i32* @r5, align 4
  store i32 %v0_b464, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_b45c, i32* @r6, align 4
  %v0_b474 = load i32, i32* @r4, align 4
  store i32 %v0_b474, i32* %r0.global-to-local, align 4
  %v5_b478 = inttoptr i32 %v0_b464 to i32*
  %v6_b478 = call i32 @function_85e0(i32 %v0_b474, i32* %v5_b478, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b47c = load i32, i32* @r5, align 4
  store i32 %v0_b47c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b48c = load i32, i32* @r4, align 4
  store i32 %v0_b48c, i32* %r0.global-to-local, align 4
  %v5_b490 = inttoptr i32 %v0_b47c to i32*
  %v6_b490 = call i32 @function_85e0(i32 %v0_b48c, i32* %v5_b490, i32 18, i32 0, i32 %v6_b478)
  %v0_b494 = load i32, i32* @r5, align 4
  store i32 %v0_b494, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4a4 = load i32, i32* @r4, align 4
  store i32 %v0_b4a4, i32* %r0.global-to-local, align 4
  %v5_b4a8 = inttoptr i32 %v0_b494 to i32*
  %v6_b4a8 = call i32 @function_85e0(i32 %v0_b4a4, i32* %v5_b4a8, i32 11, i32 0, i32 %v6_b490)
  %v0_b4ac = load i32, i32* @r5, align 4
  store i32 %v0_b4ac, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4bc = load i32, i32* @r4, align 4
  store i32 %v0_b4bc, i32* %r0.global-to-local, align 4
  %v5_b4c0 = inttoptr i32 %v0_b4ac to i32*
  %v6_b4c0 = call i32 @function_85e0(i32 %v0_b4bc, i32* %v5_b4c0, i32 12, i32 0, i32 %v6_b4a8)
  %v0_b4c4 = load i32, i32* @r5, align 4
  store i32 %v0_b4c4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4d4 = load i32, i32* @r4, align 4
  store i32 %v0_b4d4, i32* %r0.global-to-local, align 4
  %v5_b4d8 = inttoptr i32 %v0_b4c4 to i32*
  %v6_b4d8 = call i32 @function_85e0(i32 %v0_b4d4, i32* %v5_b4d8, i32 13, i32 0, i32 %v6_b4c0)
  %v0_b4dc = load i32, i32* @r5, align 4
  store i32 %v0_b4dc, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4ec = load i32, i32* @r4, align 4
  store i32 %v0_b4ec, i32* %r0.global-to-local, align 4
  %v5_b4f0 = inttoptr i32 %v0_b4dc to i32*
  %v6_b4f0 = call i32 @function_85e0(i32 %v0_b4ec, i32* %v5_b4f0, i32 14, i32 0, i32 %v6_b4d8)
  %v0_b4f4 = load i32, i32* @r5, align 4
  store i32 %v0_b4f4, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b504 = load i32, i32* @r4, align 4
  store i32 %v0_b504, i32* %r0.global-to-local, align 4
  %v5_b508 = inttoptr i32 %v0_b4f4 to i32*
  %v6_b508 = call i32 @function_85e0(i32 %v0_b504, i32* %v5_b508, i32 15, i32 1, i32 %v6_b4f0)
  %v0_b50c = load i32, i32* @r5, align 4
  store i32 %v0_b50c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b51c = load i32, i32* @r4, align 4
  store i32 %v0_b51c, i32* %r0.global-to-local, align 4
  %v5_b520 = inttoptr i32 %v0_b50c to i32*
  %v6_b520 = call i32 @function_85e0(i32 %v0_b51c, i32* %v5_b520, i32 16, i32 0, i32 %v6_b508)
  %v2_b52c = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_b52c, i32* %r3.global-to-local, align 4
  %v0_b530 = load i32, i32* @r5, align 4
  store i32 %v0_b530, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b538 = load i32, i32* @r4, align 4
  store i32 %v0_b538, i32* %r0.global-to-local, align 4
  %v5_b53c = inttoptr i32 %v0_b530 to i32*
  %v6_b53c = call i32 @function_8574(i32 %v0_b538, i32* %v5_b53c, i32 25, i32 %v2_b52c, i32 %v6_b520)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b550 = call i32 @function_1270c(i32 2, i32 3, i32 6)
  store i32 %v3_b550, i32* %r0.global-to-local, align 4
  %v7_b554 = icmp eq i32 %v3_b550, -1
  store i1 %v7_b554, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b550, i32* %sb.global-to-local, align 4
  br i1 %v7_b554, label %dec_label_pc_bac8, label %dec_label_pc_b560

dec_label_pc_b560:                                ; preds = %dec_label_pc_b388
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b568 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b568, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b57c = call i32 @function_126dc(i32 %v3_b550, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_b57c, i32* %r0.global-to-local, align 4
  %v7_b580 = icmp eq i32 %v6_b57c, -1
  store i1 %v7_b580, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b580, label %dec_label_pc_bac0, label %dec_label_pc_b588

dec_label_pc_b588:                                ; preds = %dec_label_pc_b560
  %v3_b58c = mul i32 %v7_b3e4, 65536
  store i32 %v3_b58c, i32* %r4.global-to-local, align 4
  %v3_b590 = urem i32 %v7_b3e4, 65536
  %v0_b5a0 = load i32, i32* @r7, align 4
  %v3_b5a0 = mul i32 %v0_b5a0, 65536
  store i32 %v3_b5a0, i32* %r0.global-to-local, align 4
  %v0_b5a4 = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_b5ac = urem i32 %v0_b5a0, 65536
  store i32 %v3_b5ac, i32* %ip.global-to-local, align 4
  %v3_b5b0 = urem i32 %v0_b5a4, 65536
  store i32 %v3_b5b0, i32* %r2.global-to-local, align 4
  %v1_b5b4 = urem i32 %v6_b4a8, 256
  store i32 %v1_b5b4, i32* %r3.global-to-local, align 4
  %v0_b5b8 = load i32, i32* @sl, align 4
  %v2_b5b8 = icmp eq i32 %v0_b5b8, 0
  store i1 %v2_b5b8, i1* %cpsr_z.global-to-local, align 1
  %tmp69 = icmp slt i32 %v0_b5b8, 1
  br i1 %tmp69, label %dec_label_pc_b86c, label %dec_label_pc_b5cc

dec_label_pc_b5cc:                                ; preds = %dec_label_pc_b588
  %v3_b5d4 = mul i32 %v6_b478, 65536
  store i32 %v3_b5d4, i32* @lr, align 4
  %v1_b5e4 = urem i32 %v0_b5a4, 256
  %tmp70 = udiv i32 %v0_b5a0, 256
  %v3_b5e8 = urem i32 %tmp70, 256
  %v1_b5ec = urem i32 %v0_b5a0, 256
  %v4_b5f0 = mul nuw nsw i32 %v1_b5ec, 256
  %v5_b5f0 = or i32 %v4_b5f0, %v3_b5e8
  store i32 %v5_b5f0, i32* @r7, align 4
  %tmp71 = udiv i32 %v7_b3e4, 256
  %tmp72 = mul i32 %v6_b478, 256
  %v1_b60c = and i32 %tmp72, 65280
  %v1_b610 = urem i32 %v6_b4a8, 2
  %v3_b614 = mul nuw nsw i32 %v1_b5e4, 256
  store i32 %v3_b614, i32* %r1.global-to-local, align 4
  %v5_b618 = trunc i32 %tmp71 to i8
  %tmp73 = udiv i32 %v0_b5a4, 256
  %v4_b61c = urem i32 %tmp73, 256
  %v5_b61c = or i32 %v4_b61c, %v3_b614
  store i32 %v5_b61c, i32* @r6, align 4
  %v1_b620 = urem i32 %v6_b4c0, 2
  %v1_b624 = urem i32 %v6_b4d8, 2
  %tmp74 = udiv i32 %v6_b478, 256
  %v4_b628 = urem i32 %tmp74, 256
  %v5_b628 = or i32 %v4_b628, %v1_b60c
  store i32 %v5_b628, i32* @r5, align 4
  %v1_b648 = urem i32 %v6_b4f0, 2
  %v1_b64c = urem i32 %v6_b508, 2
  %v1_b658 = urem i32 %v6_b520, 2
  store i32 %v1_b658, i32* %r0.global-to-local, align 4
  %v3_b65c = udiv i32 %v7_b3e4, 65536
  store i32 %v3_b65c, i32* %r2.global-to-local, align 4
  store i32 %v1_b5ec, i32* %r3.global-to-local, align 4
  store i32 %v1_b5e4, i32* %ip.global-to-local, align 4
  %v5_b674 = trunc i32 %v0_b5a4 to i8
  store i32 0, i32* @r4, align 4
  %tmp = sub nsw i32 0, %v1_b610
  %v4_b738 = and i32 %tmp, 32
  %tmp77 = sub nsw i32 0, %v1_b620
  %v4_b74c = and i32 %tmp77, 16
  %tmp78 = sub nsw i32 0, %v1_b624
  %v4_b760 = and i32 %tmp78, 8
  %tmp79 = sub nsw i32 0, %v1_b648
  %v4_b774 = and i32 %tmp79, 4
  %tmp80 = sub nsw i32 0, %v1_b64c
  %v3_b788 = and i32 %tmp80, 2
  %v7_b7b8 = sext i8 %v5_b674 to i32
  %sext = mul i32 %v0_b5a0, 16777216
  %v3_b7b8 = sdiv i32 %sext, 16777216
  br label %dec_label_pc_b67c

dec_label_pc_b67c:                                ; preds = %bb76, %dec_label_pc_b5cc
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_b684 = call i32 @function_129f8(i32 128, i32 1)
  store i32 %v2_b684, i32* %r0.global-to-local, align 4
  %v3_b688 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b688, i32* %r2.global-to-local, align 4
  %v1_b68c = load i32, i32* %fp.global-to-local, align 4
  %v2_b68c = load i32, i32* @r4, align 4
  %v5_b68c = mul i32 %v2_b68c, 4
  %v6_b68c = add i32 %v5_b68c, %v1_b68c
  %v7_b68c = inttoptr i32 %v6_b68c to i32*
  store i32 %v2_b684, i32* %v7_b68c, align 4
  %v0_b690 = load i32, i32* %fp.global-to-local, align 4
  %v1_b690 = load i32, i32* %r2.global-to-local, align 4
  %v4_b690 = mul i32 %v1_b690, 4
  %v5_b690 = add i32 %v4_b690, %v0_b690
  %v6_b690 = inttoptr i32 %v5_b690 to i32*
  %v7_b690 = load i32, i32* %v6_b690, align 4
  store i32 %v7_b690, i32* %r4.global-to-local, align 4
  %v1_b694 = inttoptr i32 %v7_b690 to i8*
  %v2_b694 = load i8, i8* %v1_b694, align 1
  %tmp81 = urem i8 %v2_b694, 16
  %v1_b698 = zext i8 %tmp81 to i32
  %v1_b69c = or i32 %v1_b698, 64
  store i32 %v1_b69c, i32* %r3.global-to-local, align 4
  %v1_b6a0 = trunc i32 %v1_b69c to i8
  store i8 %v1_b6a0, i8* %v1_b694, align 1
  %v0_b6a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_b6a4 = inttoptr i32 %v0_b6a4 to i8*
  %v2_b6a4 = load i8, i8* %v1_b6a4, align 1
  %v1_b6a8 = and i8 %v2_b6a4, -16
  %v1_b6ac = or i8 %v1_b6a8, 5
  store i32 %v1_b428, i32* %r0.global-to-local, align 4
  store i8 %v1_b6ac, i8* %v1_b6a4, align 1
  %v2_b6bc = load i32, i32* %r4.global-to-local, align 4
  %v3_b6bc = add i32 %v2_b6bc, 1
  %v4_b6bc = inttoptr i32 %v3_b6bc to i8*
  store i8 %v5_b3e0, i8* %v4_b6bc, align 1
  store i32 %v5_b41c, i32* %r2.global-to-local, align 4
  %v2_b6c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6c8 = add i32 %v2_b6c8, 4
  %v4_b6c8 = inttoptr i32 %v3_b6c8 to i8*
  store i8 %v5_b618, i8* %v4_b6c8, align 1
  store i32 6, i32* %ip.global-to-local, align 4
  %v0_b6d4 = load i32, i32* %r0.global-to-local, align 4
  %v2_b6d4 = icmp eq i32 %v0_b6d4, 0
  store i1 %v2_b6d4, i1* %cpsr_z.global-to-local, align 1
  %v2_b6d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6d8 = add i32 %v2_b6d8, 3
  %v4_b6d8 = inttoptr i32 %v3_b6d8 to i8*
  store i8 60, i8* %v4_b6d8, align 1
  store i32 %v3_b65c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b6e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b6e4 = trunc i32 %v0_b6e4 to i8
  %v2_b6e4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6e4 = add i32 %v2_b6e4, 8
  %v4_b6e4 = inttoptr i32 %v3_b6e4 to i8*
  store i8 %v1_b6e4, i8* %v4_b6e4, align 1
  %v0_b6e8 = load i32, i32* %ip.global-to-local, align 4
  %v1_b6e8 = trunc i32 %v0_b6e8 to i8
  %v2_b6e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6e8 = add i32 %v2_b6e8, 9
  %v4_b6e8 = inttoptr i32 %v3_b6e8 to i8*
  store i8 %v1_b6e8, i8* %v4_b6e8, align 1
  %v0_b6ec = load i32, i32* %r3.global-to-local, align 4
  %v1_b6ec = trunc i32 %v0_b6ec to i8
  %v2_b6ec = load i32, i32* %r4.global-to-local, align 4
  %v3_b6ec = add i32 %v2_b6ec, 2
  %v4_b6ec = inttoptr i32 %v3_b6ec to i8*
  store i8 %v1_b6ec, i8* %v4_b6ec, align 1
  %v3_b6f0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b6f0, i32* %r2.global-to-local, align 4
  %v0_b6f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6f4, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_b67c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_b6f8 = load i32, i32* %r4.global-to-local, align 4
  %v4_b6f8 = add i32 %v3_b6f8, 6
  %v5_b6f8 = inttoptr i32 %v4_b6f8 to i8*
  store i8 64, i8* %v5_b6f8, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_b67c, %bb
  %v0_b6fc = load i32, i32* %r0.global-to-local, align 4
  %v1_b6fc = trunc i32 %v0_b6fc to i8
  %v2_b6fc = load i32, i32* %r4.global-to-local, align 4
  %v3_b6fc = add i32 %v2_b6fc, 5
  %v4_b6fc = inttoptr i32 %v3_b6fc to i8*
  store i8 %v1_b6fc, i8* %v4_b6fc, align 1
  %v0_b700 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b700, label %.thread8, label %bb75

.thread8:                                         ; preds = %.thread
  store i32 %v6_b53c, i32* %r0.global-to-local, align 4
  br label %bb76

bb75:                                             ; preds = %.thread
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v6_b53c, i32* %r0.global-to-local, align 4
  %v3_b708 = load i32, i32* %r4.global-to-local, align 4
  %v4_b708 = add i32 %v3_b708, 7
  %v5_b708 = inttoptr i32 %v4_b708 to i8*
  store i8 0, i8* %v5_b708, align 1
  %v0_b710.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb76

bb76:                                             ; preds = %.thread8, %bb75
  %v0_b710 = phi i32 [ %v6_b53c, %.thread8 ], [ %v0_b710.pre, %bb75 ]
  %v0_b70c = load i32, i32* %r2.global-to-local, align 4
  %v3_b70c = mul i32 %v0_b70c, 32
  store i32 %v3_b70c, i32* %r3.global-to-local, align 4
  %v1_b710 = load i32, i32* %r4.global-to-local, align 4
  %v2_b710 = add i32 %v1_b710, 12
  %v3_b710 = inttoptr i32 %v2_b710 to i32*
  store i32 %v0_b710, i32* %v3_b710, align 4
  %v0_b714 = load i32, i32* %r3.global-to-local, align 4
  %v1_b714 = load i32, i32* %r2.global-to-local, align 4
  %tmp82 = mul i32 %v1_b714, -8
  %v5_b714 = add i32 %v0_b714, %tmp82
  %v1_b718 = load i32, i32* @r8, align 4
  %v2_b718 = add i32 %v1_b718, %v5_b714
  store i32 %v2_b718, i32* %r3.global-to-local, align 4
  %v1_b71c = add i32 %v2_b718, 16
  %v2_b71c = inttoptr i32 %v1_b71c to i32*
  %v3_b71c = load i32, i32* %v2_b71c, align 4
  store i32 %v3_b71c, i32* %r2.global-to-local, align 4
  %v0_b720 = load i32, i32* @r7, align 4
  %v1_b720 = trunc i32 %v0_b720 to i8
  %v2_b720 = load i32, i32* %r4.global-to-local, align 4
  %v3_b720 = add i32 %v2_b720, 20
  %v4_b720 = inttoptr i32 %v3_b720 to i8*
  store i8 %v1_b720, i8* %v4_b720, align 1
  %v0_b724 = load i32, i32* %r2.global-to-local, align 4
  %v1_b724 = load i32, i32* %r4.global-to-local, align 4
  %v2_b724 = add i32 %v1_b724, 16
  %v3_b724 = inttoptr i32 %v2_b724 to i32*
  store i32 %v0_b724, i32* %v3_b724, align 4
  %v0_b728 = load i32, i32* %r4.global-to-local, align 4
  %v1_b728 = add i32 %v0_b728, 20
  store i32 %v1_b728, i32* %r1.global-to-local, align 4
  %v1_b72c = add i32 %v0_b728, 33
  %v2_b72c = inttoptr i32 %v1_b72c to i8*
  %v3_b72c = load i8, i8* %v2_b72c, align 1
  %v4_b72c = zext i8 %v3_b72c to i32
  store i32 %v1_b610, i32* %r2.global-to-local, align 4
  %v1_b734 = and i32 %v4_b72c, 223
  %v5_b738 = or i32 %v1_b734, %v4_b738
  store i32 %v5_b738, i32* %r3.global-to-local, align 4
  %v1_b73c = trunc i32 %v5_b738 to i8
  store i8 %v1_b73c, i8* %v2_b72c, align 1
  %v0_b740 = load i32, i32* %r1.global-to-local, align 4
  %v1_b740 = add i32 %v0_b740, 13
  %v2_b740 = inttoptr i32 %v1_b740 to i8*
  %v3_b740 = load i8, i8* %v2_b740, align 1
  %v4_b740 = zext i8 %v3_b740 to i32
  store i32 %v1_b620, i32* %r3.global-to-local, align 4
  %v1_b748 = and i32 %v4_b740, 239
  %v5_b74c = or i32 %v1_b748, %v4_b74c
  store i32 %v5_b74c, i32* %r2.global-to-local, align 4
  %v1_b750 = trunc i32 %v5_b74c to i8
  store i8 %v1_b750, i8* %v2_b740, align 1
  %v0_b754 = load i32, i32* %r1.global-to-local, align 4
  %v1_b754 = add i32 %v0_b754, 13
  %v2_b754 = inttoptr i32 %v1_b754 to i8*
  %v3_b754 = load i8, i8* %v2_b754, align 1
  %v4_b754 = zext i8 %v3_b754 to i32
  store i32 %v1_b624, i32* %ip.global-to-local, align 4
  %v1_b75c = and i32 %v4_b754, 247
  %v5_b760 = or i32 %v1_b75c, %v4_b760
  store i32 %v5_b760, i32* %r3.global-to-local, align 4
  %v1_b764 = trunc i32 %v5_b760 to i8
  store i8 %v1_b764, i8* %v2_b754, align 1
  %v0_b768 = load i32, i32* %r1.global-to-local, align 4
  %v1_b768 = add i32 %v0_b768, 13
  %v2_b768 = inttoptr i32 %v1_b768 to i8*
  %v3_b768 = load i8, i8* %v2_b768, align 1
  %v4_b768 = zext i8 %v3_b768 to i32
  store i32 %v1_b648, i32* %r0.global-to-local, align 4
  %v1_b770 = and i32 %v4_b768, 251
  %v5_b774 = or i32 %v1_b770, %v4_b774
  store i32 %v5_b774, i32* %r2.global-to-local, align 4
  %v1_b778 = trunc i32 %v5_b774 to i8
  store i8 %v1_b778, i8* %v2_b768, align 1
  %v0_b77c = load i32, i32* %r1.global-to-local, align 4
  %v1_b77c = add i32 %v0_b77c, 13
  %v2_b77c = inttoptr i32 %v1_b77c to i8*
  %v3_b77c = load i8, i8* %v2_b77c, align 1
  %v4_b77c = zext i8 %v3_b77c to i32
  store i32 %v1_b64c, i32* %r2.global-to-local, align 4
  %v1_b784 = and i32 %v4_b77c, 253
  %v4_b788 = or i32 %v1_b784, %v3_b788
  store i32 %v4_b788, i32* %r3.global-to-local, align 4
  %v1_b78c = trunc i32 %v4_b788 to i8
  store i8 %v1_b78c, i8* %v2_b77c, align 1
  %v0_b790 = load i32, i32* %r1.global-to-local, align 4
  %v1_b790 = add i32 %v0_b790, 12
  %v2_b790 = inttoptr i32 %v1_b790 to i8*
  %v3_b790 = load i8, i8* %v2_b790, align 1
  %v4_b790 = zext i8 %v3_b790 to i32
  store i32 %v4_b790, i32* %r2.global-to-local, align 4
  %v1_b794 = add i32 %v0_b790, 13
  %v2_b794 = inttoptr i32 %v1_b794 to i8*
  %v3_b794 = load i8, i8* %v2_b794, align 1
  %v4_b794 = zext i8 %v3_b794 to i32
  %tmp83 = urem i8 %v3_b790, 16
  %v1_b79c = zext i8 %tmp83 to i32
  %v1_b7a0 = and i32 %v4_b794, 254
  %v2_b7a4 = or i32 %v1_b7a0, %v1_b658
  %v1_b7a8 = or i32 %v1_b79c, 160
  store i32 %v1_b7a8, i32* %r2.global-to-local, align 4
  %v1_b7ac = trunc i32 %v2_b7a4 to i8
  store i8 %v1_b7ac, i8* %v2_b794, align 1
  %v0_b7b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b7b0 = trunc i32 %v0_b7b0 to i8
  %v2_b7b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_b7b0 = add i32 %v2_b7b0, 12
  %v4_b7b0 = inttoptr i32 %v3_b7b0 to i8*
  store i8 %v1_b7b0, i8* %v4_b7b0, align 1
  store i32 %v3_b7b8, i32* %r0.global-to-local, align 4
  store i32 %v7_b7b8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_b7c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_b7c4 = add i32 %v2_b7c4, 3
  %v4_b7c4 = inttoptr i32 %v3_b7c4 to i8*
  store i8 %v5_b674, i8* %v4_b7c4, align 1
  %v0_b7c8 = load i32, i32* %r0.global-to-local, align 4
  %v1_b7c8 = trunc i32 %v0_b7c8 to i8
  %v2_b7c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_b7c8 = add i32 %v2_b7c8, 1
  %v4_b7c8 = inttoptr i32 %v3_b7c8 to i8*
  store i8 %v1_b7c8, i8* %v4_b7c8, align 1
  %v0_b7cc = load i32, i32* @r6, align 4
  %v1_b7cc = trunc i32 %v0_b7cc to i8
  %v2_b7cc = load i32, i32* %r1.global-to-local, align 4
  %v3_b7cc = add i32 %v2_b7cc, 2
  %v4_b7cc = inttoptr i32 %v3_b7cc to i8*
  store i8 %v1_b7cc, i8* %v4_b7cc, align 1
  %v0_b7d0 = load i32, i32* @r5, align 4
  %v1_b7d0 = load i32, i32* %r1.global-to-local, align 4
  %v2_b7d0 = add i32 %v1_b7d0, 4
  %v3_b7d0 = inttoptr i32 %v2_b7d0 to i32*
  store i32 %v0_b7d0, i32* %v3_b7d0, align 4
  %v0_b7d4 = load i32, i32* %ip.global-to-local, align 4
  %v1_b7d4 = trunc i32 %v0_b7d4 to i8
  %v2_b7d4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b7d4 = add i32 %v2_b7d4, 41
  %v4_b7d4 = inttoptr i32 %v3_b7d4 to i8*
  store i8 %v1_b7d4, i8* %v4_b7d4, align 1
  %v0_b7d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b7d8 = trunc i32 %v0_b7d8 to i8
  %v2_b7d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b7d8 = add i32 %v2_b7d8, 40
  %v4_b7d8 = inttoptr i32 %v3_b7d8 to i8*
  store i8 %v1_b7d8, i8* %v4_b7d8, align 1
  %v0_b7dc = call i32 @function_eb90()
  %v1_b7e0 = mul i32 %v0_b7dc, 256
  %v1_b7e4 = and i32 %v1_b7e0, 3840
  %v1_b7e8 = or i32 %v1_b7e4, 28672
  %v3_b7f0 = add nuw nsw i32 %v1_b7e8, 2048
  %v3_b7fc7 = udiv i32 %v3_b7f0, 256
  store i32 %v3_b7fc7, i32* %r1.global-to-local, align 4
  %v0_b800 = load i32, i32* %r4.global-to-local, align 4
  %v1_b800 = add i32 %v0_b800, 42
  store i32 %v1_b800, i32* %r2.global-to-local, align 4
  %v4_b804 = inttoptr i32 %v1_b800 to i8*
  store i8 5, i8* %v4_b804, align 1
  %v0_b808 = load i32, i32* %r1.global-to-local, align 4
  %v1_b808 = trunc i32 %v0_b808 to i8
  %v2_b808 = load i32, i32* %r2.global-to-local, align 4
  %v3_b808 = add i32 %v2_b808, 1
  %v4_b808 = inttoptr i32 %v3_b808 to i8*
  store i8 %v1_b808, i8* %v4_b808, align 1
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_b814 = load i32, i32* %r4.global-to-local, align 4
  %v3_b814 = add i32 %v2_b814, 47
  %v4_b814 = inttoptr i32 %v3_b814 to i8*
  store i8 10, i8* %v4_b814, align 1
  store i32 4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b820 = load i32, i32* %r3.global-to-local, align 4
  %v1_b820 = trunc i32 %v0_b820 to i8
  %v2_b820 = load i32, i32* %r4.global-to-local, align 4
  %v3_b820 = add i32 %v2_b820, 46
  %v4_b820 = inttoptr i32 %v3_b820 to i8*
  store i8 %v1_b820, i8* %v4_b820, align 1
  %v0_b824 = load i32, i32* %r2.global-to-local, align 4
  %v1_b824 = trunc i32 %v0_b824 to i8
  %v2_b824 = load i32, i32* %r4.global-to-local, align 4
  %v3_b824 = add i32 %v2_b824, 45
  %v4_b824 = inttoptr i32 %v3_b824 to i8*
  store i8 %v1_b824, i8* %v4_b824, align 1
  %v0_b828 = load i32, i32* %r0.global-to-local, align 4
  %v1_b828 = trunc i32 %v0_b828 to i8
  %v2_b828 = load i32, i32* %r4.global-to-local, align 4
  %v3_b828 = add i32 %v2_b828, 44
  %v4_b828 = inttoptr i32 %v3_b828 to i8*
  store i8 %v1_b828, i8* %v4_b828, align 1
  %v0_b82c = call i32 @function_eb90()
  store i32 %v0_b82c, i32* %r0.global-to-local, align 4
  %v2_b834 = load i32, i32* %r4.global-to-local, align 4
  %v3_b834 = add i32 %v2_b834, 56
  %v4_b834 = inttoptr i32 %v3_b834 to i8*
  store i8 1, i8* %v4_b834, align 1
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_b844 = load i32, i32* %r4.global-to-local, align 4
  %v2_b844 = add i32 %v1_b844, 48
  %v3_b844 = inttoptr i32 %v2_b844 to i32*
  store i32 %v0_b82c, i32* %v3_b844, align 4
  %v0_b848 = load i32, i32* %r2.global-to-local, align 4
  %v1_b848 = trunc i32 %v0_b848 to i8
  %v2_b848 = load i32, i32* %r4.global-to-local, align 4
  %v3_b848 = add i32 %v2_b848, 58
  %v4_b848 = inttoptr i32 %v3_b848 to i8*
  store i8 %v1_b848, i8* %v4_b848, align 1
  %v0_b84c = load i32, i32* %r3.global-to-local, align 4
  %v1_b84c = trunc i32 %v0_b84c to i8
  %v2_b84c = load i32, i32* %r4.global-to-local, align 4
  %v3_b84c = add i32 %v2_b84c, 59
  %v4_b84c = inttoptr i32 %v3_b84c to i8*
  store i8 %v1_b84c, i8* %v4_b84c, align 1
  %v0_b850 = load i32, i32* %ip.global-to-local, align 4
  %v1_b850 = load i32, i32* %r4.global-to-local, align 4
  %v2_b850 = add i32 %v1_b850, 52
  %v3_b850 = inttoptr i32 %v2_b850 to i32*
  store i32 %v0_b850, i32* %v3_b850, align 4
  %v0_b854 = load i32, i32* %r2.global-to-local, align 4
  %v1_b854 = trunc i32 %v0_b854 to i8
  %v2_b854 = load i32, i32* %r4.global-to-local, align 4
  %v3_b854 = add i32 %v2_b854, 57
  %v4_b854 = inttoptr i32 %v3_b854 to i8*
  store i8 %v1_b854, i8* %v4_b854, align 1
  %v3_b858 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b858, i32* %r3.global-to-local, align 4
  %v1_b85c = add i32 %v3_b858, 1
  store i32 %v1_b85c, i32* @r4, align 4
  %v0_b860 = load i32, i32* @sl, align 4
  %v9_b860 = icmp eq i32 %v0_b860, %v1_b85c
  store i1 %v9_b860, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b85c, i32* %stack_var_-40, align 4
  %v8_b868 = icmp sgt i32 %v0_b860, %v1_b85c
  br i1 %v8_b868, label %dec_label_pc_b67c, label %dec_label_pc_b86c

dec_label_pc_b86c:                                ; preds = %bb76, %dec_label_pc_b588
  %v0_b86c = phi i32 [ %v0_b5b8, %dec_label_pc_b588 ], [ %v0_b860, %bb76 ]
  %v2_b86c = icmp eq i32 %v0_b86c, 0
  store i1 %v2_b86c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_ba24 = icmp eq i32 %v3_b590, 65535
  %v2_baa0 = icmp eq i32 %v1_b5b4, 0
  %v2_b8a8 = icmp eq i32 %v6_b53c, -1
  %v7_b8a8 = icmp eq i32 %v6_b53c, -1
  br label %dec_label_pc_b874.outer

dec_label_pc_b874.outer:                          ; preds = %dec_label_pc_b9a0, %dec_label_pc_b86c
  %v1_b874.ph.in = phi i32 [ %v1_b994, %dec_label_pc_b9a0 ], [ %v0_b86c, %dec_label_pc_b86c ]
  %v0_b874.ph = phi i1 [ %v2_b9a0, %dec_label_pc_b9a0 ], [ %v2_b86c, %dec_label_pc_b86c ]
  %v1_b874.ph = icmp slt i32 %v1_b874.ph.in, 0
  %v4_b874 = or i1 %v1_b874.ph, %v0_b874.ph
  br label %dec_label_pc_b874

dec_label_pc_b874:                                ; preds = %dec_label_pc_b874.outer, %dec_label_pc_b874
  br i1 %v4_b874, label %dec_label_pc_b874, label %dec_label_pc_b878

dec_label_pc_b878:                                ; preds = %dec_label_pc_b874
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_b884

dec_label_pc_b884:                                ; preds = %dec_label_pc_b900, %dec_label_pc_b878
  %v1_b894 = phi i32 [ %v1_b990, %dec_label_pc_b900 ], [ 0, %dec_label_pc_b878 ]
  %v5_b888 = mul i32 %v1_b894, 24
  %v1_b88c = load i32, i32* @r8, align 4
  %v2_b88c = add i32 %v1_b88c, %v5_b888
  store i32 %v2_b88c, i32* %r3.global-to-local, align 4
  %v1_b890 = add i32 %v2_b88c, 20
  %v2_b890 = inttoptr i32 %v1_b890 to i8*
  %v3_b890 = load i8, i8* %v2_b890, align 1
  %v4_b890 = zext i8 %v3_b890 to i32
  store i32 %v4_b890, i32* %r2.global-to-local, align 4
  %v0_b894 = load i32, i32* %fp.global-to-local, align 4
  %v4_b894 = mul i32 %v1_b894, 4
  %v5_b894 = add i32 %v0_b894, %v4_b894
  %v6_b894 = inttoptr i32 %v5_b894 to i32*
  %v7_b894 = load i32, i32* %v6_b894, align 4
  store i32 %v7_b894, i32* @r5, align 4
  %v7_b898 = icmp eq i8 %v3_b890, 31
  store i1 %v7_b898, i1* %cpsr_z.global-to-local, align 1
  %v1_b89c = add i32 %v7_b894, 20
  store i32 %v1_b89c, i32* @r6, align 4
  %tmp84 = icmp ult i8 %v3_b890, 32
  br i1 %tmp84, label %dec_label_pc_b9ac, label %dec_label_pc_b8a4

dec_label_pc_b8a4:                                ; preds = %dec_label_pc_b884
  store i32 %v6_b53c, i32* %r0.global-to-local, align 4
  store i1 %v7_b8a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b8a8, label %dec_label_pc_ba14, label %dec_label_pc_b8b0

dec_label_pc_b8b0:                                ; preds = %dec_label_pc_b9ac, %dec_label_pc_b8a4
  store i32 %v3_b590, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ba24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ba24, label %dec_label_pc_ba30, label %dec_label_pc_b8c4

dec_label_pc_b8c4:                                ; preds = %dec_label_pc_ba14.dec_label_pc_b8c4_crit_edge, %dec_label_pc_b8b0
  %v1_b8c8 = phi i32 [ %v1_b8c8.pre, %dec_label_pc_ba14.dec_label_pc_b8c4_crit_edge ], [ 65535, %dec_label_pc_b8b0 ]
  store i32 %v3_b5ac, i32* %r3.global-to-local, align 4
  %v9_b8c8 = icmp eq i32 %v3_b5ac, %v1_b8c8
  store i1 %v9_b8c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b8c8, label %dec_label_pc_ba4c, label %dec_label_pc_b8d0

dec_label_pc_b8d0:                                ; preds = %dec_label_pc_ba30.dec_label_pc_b8d0_crit_edge, %dec_label_pc_b8c4
  %v1_b8d4 = phi i32 [ %v1_b8d4.pre, %dec_label_pc_ba30.dec_label_pc_b8d0_crit_edge ], [ %v1_b8c8, %dec_label_pc_b8c4 ]
  store i32 %v3_b5b0, i32* %ip.global-to-local, align 4
  %v9_b8d4 = icmp eq i32 %v3_b5b0, %v1_b8d4
  store i1 %v9_b8d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b8d4, label %dec_label_pc_ba68, label %dec_label_pc_b8dc

dec_label_pc_b8dc:                                ; preds = %dec_label_pc_ba4c.dec_label_pc_b8dc_crit_edge, %dec_label_pc_b8d0
  %v1_b8e0 = phi i32 [ %v1_b8e0.pre, %dec_label_pc_ba4c.dec_label_pc_b8dc_crit_edge ], [ %v1_b8d4, %dec_label_pc_b8d0 ]
  store i32 %v6_b478, i32* %r0.global-to-local, align 4
  %v9_b8e0 = icmp eq i32 %v6_b478, %v1_b8e0
  store i1 %v9_b8e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b8e0, label %dec_label_pc_ba84, label %dec_label_pc_b8e8

dec_label_pc_b8e8:                                ; preds = %dec_label_pc_ba68.dec_label_pc_b8e8_crit_edge, %dec_label_pc_b8dc
  %v1_b8ec = phi i32 [ %v1_b8ec.pre, %dec_label_pc_ba68.dec_label_pc_b8e8_crit_edge ], [ %v1_b8e0, %dec_label_pc_b8dc ]
  store i32 %v6_b490, i32* %r2.global-to-local, align 4
  %v9_b8ec = icmp eq i32 %v6_b490, %v1_b8ec
  store i1 %v9_b8ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b8ec, label %dec_label_pc_ba98, label %dec_label_pc_b8f4

dec_label_pc_b8f4:                                ; preds = %dec_label_pc_ba84, %dec_label_pc_b8e8
  store i32 %v1_b5b4, i32* %r3.global-to-local, align 4
  store i1 %v2_baa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_baa0, label %dec_label_pc_b900, label %dec_label_pc_baac

dec_label_pc_b900:                                ; preds = %dec_label_pc_b8f4, %dec_label_pc_ba98, %dec_label_pc_baac
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b904 = load i32, i32* %r7.global-to-local, align 4
  %v1_b904 = trunc i32 %v0_b904 to i8
  %v2_b904 = load i32, i32* @r5, align 4
  %v3_b904 = add i32 %v2_b904, 10
  %v4_b904 = inttoptr i32 %v3_b904 to i8*
  store i8 %v1_b904, i8* %v4_b904, align 1
  %v0_b908 = load i32, i32* %r7.global-to-local, align 4
  %v1_b908 = trunc i32 %v0_b908 to i8
  %v2_b908 = load i32, i32* @r5, align 4
  %v3_b908 = add i32 %v2_b908, 11
  %v4_b908 = inttoptr i32 %v3_b908 to i8*
  store i8 %v1_b908, i8* %v4_b908, align 1
  %v0_b90c = load i32, i32* @r5, align 4
  store i32 %v0_b90c, i32* @r0, align 4
  %v2_b910 = call i32 @function_d0b8(i32 %v0_b90c, i32 20)
  %v3_b910 = trunc i32 %v2_b910 to i8
  %v4_b91427 = udiv i32 %v2_b910, 256
  %v1_b918 = trunc i32 %v4_b91427 to i8
  %v2_b918 = load i32, i32* @r5, align 4
  %v3_b918 = add i32 %v2_b918, 11
  %v4_b918 = inttoptr i32 %v3_b918 to i8*
  store i8 %v1_b918, i8* %v4_b918, align 1
  %v3_b91c = load i32, i32* @r5, align 4
  %v4_b91c = add i32 %v3_b91c, 10
  %v5_b91c = inttoptr i32 %v4_b91c to i8*
  store i8 %v3_b910, i8* %v5_b91c, align 1
  %v0_b920 = load i32, i32* @r6, align 4
  store i32 %v0_b920, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_b92c = load i32, i32* %r7.global-to-local, align 4
  %v1_b92c = trunc i32 %v0_b92c to i8
  %v3_b92c = add i32 %v0_b920, 16
  %v4_b92c = inttoptr i32 %v3_b92c to i8*
  store i8 %v1_b92c, i8* %v4_b92c, align 1
  %v0_b930 = load i32, i32* %r7.global-to-local, align 4
  %v1_b930 = trunc i32 %v0_b930 to i8
  %v2_b930 = load i32, i32* @r6, align 4
  %v3_b930 = add i32 %v2_b930, 17
  %v4_b930 = inttoptr i32 %v3_b930 to i8*
  store i8 %v1_b930, i8* %v4_b930, align 1
  %v0_b934 = load i32, i32* @r5, align 4
  store i32 %v0_b934, i32* %r0.global-to-local, align 4
  %v4_b938 = call i32 @function_d114(i32 %v0_b934, i32 %v0_b920, i32 10240, i32 40)
  %v5_b938 = trunc i32 %v4_b938 to i8
  store i32 %v4_b938, i32* %r0.global-to-local, align 4
  %v4_b93c28 = udiv i32 %v4_b938, 256
  %v1_b940 = trunc i32 %v4_b93c28 to i8
  %v2_b940 = load i32, i32* @r6, align 4
  %v3_b940 = add i32 %v2_b940, 17
  %v4_b940 = inttoptr i32 %v3_b940 to i8*
  store i8 %v1_b940, i8* %v4_b940, align 1
  %v3_b944 = load i32, i32* @r6, align 4
  %v4_b944 = add i32 %v3_b944, 16
  %v5_b944 = inttoptr i32 %v4_b944 to i8*
  store i8 %v5_b938, i8* %v5_b944, align 1
  %v3_b948 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b948, i32* %r3.global-to-local, align 4
  %v0_b94c = load i32, i32* @r5, align 4
  %v1_b94c = add i32 %v0_b94c, 20
  %v2_b94c = inttoptr i32 %v1_b94c to i32*
  %v3_b94c = load i32, i32* %v2_b94c, align 4
  %v3_b954 = udiv i32 %v3_b94c, 65536
  store i32 %v3_b954, i32* %r2.global-to-local, align 4
  %v5_b958 = mul i32 %v3_b948, 24
  %v1_b95c = load i32, i32* @r8, align 4
  %v2_b95c = add i32 %v1_b95c, %v5_b958
  store i32 %v2_b95c, i32* %ip.global-to-local, align 4
  %v3_b96026 = udiv i32 %v3_b94c, 16777216
  %v1_b964 = trunc i32 %v3_b96026 to i8
  %v3_b964 = add i32 %v2_b95c, 3
  %v4_b964 = inttoptr i32 %v3_b964 to i8*
  store i8 %v1_b964, i8* %v4_b964, align 1
  %v0_b968 = load i32, i32* %r2.global-to-local, align 4
  %v1_b968 = trunc i32 %v0_b968 to i8
  %v2_b968 = load i32, i32* %ip.global-to-local, align 4
  %v3_b968 = add i32 %v2_b968, 2
  %v4_b968 = inttoptr i32 %v3_b968 to i8*
  store i8 %v1_b968, i8* %v4_b968, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b970 = load i32, i32* @r5, align 4
  store i32 %v0_b970, i32* %r1.global-to-local, align 4
  %v0_b974 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_b974, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_b980 = load i32, i32* %ip.global-to-local, align 4
  %v6_b988 = inttoptr i32 %v0_b970 to i32*
  %v7_b988 = call i32 @function_126a8(i32 %v0_b974, i32* %v6_b988, i32 60, i32 16384, i32 %v0_b980, i32 16)
  %v3_b98c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b98c, i32* %r3.global-to-local, align 4
  %v1_b990 = add i32 %v3_b98c, 1
  store i32 %v1_b990, i32* %r0.global-to-local, align 4
  %v1_b994 = load i32, i32* @sl, align 4
  %v9_b994 = icmp eq i32 %v1_b990, %v1_b994
  store i1 %v9_b994, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b990, i32* %stack_var_-40, align 4
  %v5_b99c = icmp slt i32 %v1_b990, %v1_b994
  br i1 %v5_b99c, label %dec_label_pc_b884, label %dec_label_pc_b9a0

dec_label_pc_b9a0:                                ; preds = %dec_label_pc_b900
  %v2_b9a0 = icmp eq i32 %v1_b994, 0
  store i1 %v2_b9a0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b874.outer

dec_label_pc_b9ac:                                ; preds = %dec_label_pc_b884
  %v1_b9ac = add i32 %v2_b88c, 16
  %v2_b9ac = inttoptr i32 %v1_b9ac to i32*
  %v3_b9ac = load i32, i32* %v2_b9ac, align 4
  store i32 %v3_b9ac, i32* %r4.global-to-local, align 4
  %v0_b9b0 = call i32 @function_eb90()
  store i32 %v0_b9b0, i32* %r0.global-to-local, align 4
  %v3_b9b4 = load i32, i32* %stack_var_-40, align 4
  %v5_b9bc = mul i32 %v3_b9b4, 24
  %v0_b9c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_b9c4 = load i32, i32* @r8, align 4
  %v2_b9c4 = add i32 %v1_b9c4, %v5_b9bc
  store i32 %v2_b9c4, i32* %r1.global-to-local, align 4
  %v1_b9c8 = and i32 %v0_b9c0, 65280
  store i32 %v1_b9c8, i32* %r3.global-to-local, align 4
  %v1_b9c0 = udiv i32 %v0_b9c0, 256
  %v3_b9cc = and i32 %v1_b9c0, 65280
  store i32 %v3_b9cc, i32* %r2.global-to-local, align 4
  %v3_b9d0 = mul i32 %v0_b9c0, 16777216
  store i32 %v3_b9d0, i32* %ip.global-to-local, align 4
  %v1_b9d4 = add i32 %v2_b9c4, 20
  %v2_b9d4 = inttoptr i32 %v1_b9d4 to i8*
  %v3_b9d4 = load i8, i8* %v2_b9d4, align 1
  %v4_b9d4 = zext i8 %v3_b9d4 to i32
  %v4_b9d8 = mul nuw nsw i32 %v1_b9c8, 256
  %v5_b9d8 = or i32 %v4_b9d8, %v3_b9d0
  store i32 %v5_b9d8, i32* %ip.global-to-local, align 4
  %v2_b9e0 = call i32 @llvm.bswap.i32(i32 %v0_b9c0)
  %v7_b9e4 = lshr i32 %v0_b9b0, %v4_b9d4
  %v8_b9e4 = add i32 %v7_b9e4, %v2_b9e0
  store i32 %v8_b9e4, i32* %r2.global-to-local, align 4
  %v3_b9f0 = mul i32 %v8_b9e4, 16777216
  %v1_b9e8 = mul i32 %v8_b9e4, 256
  %v4_b9f4 = and i32 %v1_b9e8, 16711680
  %v5_b9f4 = or i32 %v4_b9f4, %v3_b9f0
  store i32 %v5_b9f4, i32* %r1.global-to-local, align 4
  store i32 %v6_b53c, i32* %r0.global-to-local, align 4
  %v2_ba04 = call i32 @llvm.bswap.i32(i32 %v8_b9e4)
  store i32 %v2_ba04, i32* %r3.global-to-local, align 4
  store i1 %v7_b8a8, i1* %cpsr_z.global-to-local, align 1
  %v1_ba0c = load i32, i32* @r5, align 4
  %v2_ba0c = add i32 %v1_ba0c, 16
  %v3_ba0c = inttoptr i32 %v2_ba0c to i32*
  store i32 %v2_ba04, i32* %v3_ba0c, align 4
  br i1 %v2_b8a8, label %dec_label_pc_ba14, label %dec_label_pc_b8b0

dec_label_pc_ba14:                                ; preds = %dec_label_pc_b9ac, %dec_label_pc_b8a4
  %v0_ba14 = call i32 @function_eb90()
  store i32 %v0_ba14, i32* %r0.global-to-local, align 4
  store i32 %v3_b590, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ba24, i1* %cpsr_z.global-to-local, align 1
  %v1_ba28 = load i32, i32* @r5, align 4
  %v2_ba28 = add i32 %v1_ba28, 12
  %v3_ba28 = inttoptr i32 %v2_ba28 to i32*
  store i32 %v0_ba14, i32* %v3_ba28, align 4
  br i1 %v3_ba24, label %dec_label_pc_ba30, label %dec_label_pc_ba14.dec_label_pc_b8c4_crit_edge

dec_label_pc_ba14.dec_label_pc_b8c4_crit_edge:    ; preds = %dec_label_pc_ba14
  %v1_b8c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b8c4

dec_label_pc_ba30:                                ; preds = %dec_label_pc_ba14, %dec_label_pc_b8b0
  %v0_ba30 = call i32 @function_eb90()
  %v1_ba30 = trunc i32 %v0_ba30 to i8
  store i32 %v0_ba30, i32* %r0.global-to-local, align 4
  %v4_ba3429 = udiv i32 %v0_ba30, 256
  %v1_ba38 = trunc i32 %v4_ba3429 to i8
  %v2_ba38 = load i32, i32* @r5, align 4
  %v3_ba38 = add i32 %v2_ba38, 5
  %v4_ba38 = inttoptr i32 %v3_ba38 to i8*
  store i8 %v1_ba38, i8* %v4_ba38, align 1
  store i32 %v3_b5ac, i32* %r3.global-to-local, align 4
  %v1_ba40 = load i32, i32* @r4, align 4
  %v9_ba40 = icmp eq i32 %v3_b5ac, %v1_ba40
  store i1 %v9_ba40, i1* %cpsr_z.global-to-local, align 1
  %v3_ba44 = load i32, i32* @r5, align 4
  %v4_ba44 = add i32 %v3_ba44, 4
  %v5_ba44 = inttoptr i32 %v4_ba44 to i8*
  store i8 %v1_ba30, i8* %v5_ba44, align 1
  %v0_ba48 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ba48, label %dec_label_pc_ba4c, label %dec_label_pc_ba30.dec_label_pc_b8d0_crit_edge

dec_label_pc_ba30.dec_label_pc_b8d0_crit_edge:    ; preds = %dec_label_pc_ba30
  %v1_b8d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b8d0

dec_label_pc_ba4c:                                ; preds = %dec_label_pc_ba30, %dec_label_pc_b8c4
  %v0_ba4c = call i32 @function_eb90()
  %v1_ba4c = trunc i32 %v0_ba4c to i8
  store i32 %v0_ba4c, i32* %r0.global-to-local, align 4
  store i32 %v3_b5b0, i32* %ip.global-to-local, align 4
  %v4_ba54 = sdiv i32 %v0_ba4c, 256
  store i32 %v4_ba54, i32* %r3.global-to-local, align 4
  %v1_ba58 = load i32, i32* @r4, align 4
  %v9_ba58 = icmp eq i32 %v3_b5b0, %v1_ba58
  store i1 %v9_ba58, i1* %cpsr_z.global-to-local, align 1
  %v3_ba5c = load i32, i32* @r5, align 4
  %v4_ba5c = add i32 %v3_ba5c, 20
  %v5_ba5c = inttoptr i32 %v4_ba5c to i8*
  store i8 %v1_ba4c, i8* %v5_ba5c, align 1
  %v0_ba60 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba60 = trunc i32 %v0_ba60 to i8
  %v2_ba60 = load i32, i32* @r6, align 4
  %v3_ba60 = add i32 %v2_ba60, 1
  %v4_ba60 = inttoptr i32 %v3_ba60 to i8*
  store i8 %v1_ba60, i8* %v4_ba60, align 1
  %v0_ba64 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ba64, label %dec_label_pc_ba68, label %dec_label_pc_ba4c.dec_label_pc_b8dc_crit_edge

dec_label_pc_ba4c.dec_label_pc_b8dc_crit_edge:    ; preds = %dec_label_pc_ba4c
  %v1_b8e0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b8dc

dec_label_pc_ba68:                                ; preds = %dec_label_pc_ba4c, %dec_label_pc_b8d0
  %v0_ba68 = call i32 @function_eb90()
  %v1_ba68 = trunc i32 %v0_ba68 to i8
  %v4_ba6c = sdiv i32 %v0_ba68, 256
  store i32 %v4_ba6c, i32* %r3.global-to-local, align 4
  %v3_ba70 = load i32, i32* @r6, align 4
  %v4_ba70 = add i32 %v3_ba70, 2
  %v5_ba70 = inttoptr i32 %v4_ba70 to i8*
  store i8 %v1_ba68, i8* %v5_ba70, align 1
  store i32 %v6_b478, i32* %r0.global-to-local, align 4
  %v1_ba78 = load i32, i32* @r4, align 4
  %v9_ba78 = icmp eq i32 %v6_b478, %v1_ba78
  store i1 %v9_ba78, i1* %cpsr_z.global-to-local, align 1
  %v0_ba7c = load i32, i32* %r3.global-to-local, align 4
  %v1_ba7c = trunc i32 %v0_ba7c to i8
  %v2_ba7c = load i32, i32* @r6, align 4
  %v3_ba7c = add i32 %v2_ba7c, 3
  %v4_ba7c = inttoptr i32 %v3_ba7c to i8*
  store i8 %v1_ba7c, i8* %v4_ba7c, align 1
  %v0_ba80 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ba80, label %dec_label_pc_ba84, label %dec_label_pc_ba68.dec_label_pc_b8e8_crit_edge

dec_label_pc_ba68.dec_label_pc_b8e8_crit_edge:    ; preds = %dec_label_pc_ba68
  %v1_b8ec.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b8e8

dec_label_pc_ba84:                                ; preds = %dec_label_pc_ba68, %dec_label_pc_b8dc
  %v0_ba84 = call i32 @function_eb90()
  store i32 %v0_ba84, i32* %r0.global-to-local, align 4
  store i32 %v6_b490, i32* %r2.global-to-local, align 4
  %v1_ba8c = load i32, i32* @r4, align 4
  %v9_ba8c = icmp eq i32 %v6_b490, %v1_ba8c
  store i1 %v9_ba8c, i1* %cpsr_z.global-to-local, align 1
  %v1_ba90 = load i32, i32* @r6, align 4
  %v2_ba90 = add i32 %v1_ba90, 4
  %v3_ba90 = inttoptr i32 %v2_ba90 to i32*
  store i32 %v0_ba84, i32* %v3_ba90, align 4
  br i1 %v9_ba8c, label %dec_label_pc_ba98, label %dec_label_pc_b8f4

dec_label_pc_ba98:                                ; preds = %dec_label_pc_ba84, %dec_label_pc_b8e8
  %v0_ba98 = call i32 @function_eb90()
  store i32 %v0_ba98, i32* %r0.global-to-local, align 4
  store i32 %v1_b5b4, i32* %r3.global-to-local, align 4
  store i1 %v2_baa0, i1* %cpsr_z.global-to-local, align 1
  %v1_baa4 = load i32, i32* @r6, align 4
  %v2_baa4 = add i32 %v1_baa4, 8
  %v3_baa4 = inttoptr i32 %v2_baa4 to i32*
  store i32 %v0_ba98, i32* %v3_baa4, align 4
  br i1 %v2_baa0, label %dec_label_pc_b900, label %dec_label_pc_baac

dec_label_pc_baac:                                ; preds = %dec_label_pc_b8f4, %dec_label_pc_ba98
  %v0_baac = call i32 @function_eb90()
  %v1_baac = trunc i32 %v0_baac to i8
  store i32 %v0_baac, i32* %r0.global-to-local, align 4
  %v4_bab0 = sdiv i32 %v0_baac, 256
  store i32 %v4_bab0, i32* %r3.global-to-local, align 4
  %v1_bab4 = trunc i32 %v4_bab0 to i8
  %v2_bab4 = load i32, i32* @r6, align 4
  %v3_bab4 = add i32 %v2_bab4, 19
  %v4_bab4 = inttoptr i32 %v3_bab4 to i8*
  store i8 %v1_bab4, i8* %v4_bab4, align 1
  %v3_bab8 = load i32, i32* @r6, align 4
  %v4_bab8 = add i32 %v3_bab8, 18
  %v5_bab8 = inttoptr i32 %v4_bab8 to i8*
  store i8 %v1_baac, i8* %v5_bab8, align 1
  br label %dec_label_pc_b900

dec_label_pc_bac0:                                ; preds = %dec_label_pc_b560
  %v0_bac0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_bac0, i32* %r0.global-to-local, align 4
  %v1_bac4 = call i32 @function_11dfc(i32 %v0_bac0)
  store i32 %v1_bac4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bac8

dec_label_pc_bac8:                                ; preds = %dec_label_pc_b388, %dec_label_pc_bac0
  %v29_bacc = phi i32 [ %v3_b550, %dec_label_pc_b388 ], [ %v1_bac4, %dec_label_pc_bac0 ]
  store i32 %v3_b388, i32* %r4.global-to-local, align 4
  store i32 %v12_b388, i32* %r7.global-to-local, align 4
  ret i32 %v29_bacc

; uselistorder directives
  uselistorder i32 %v4_bab0, { 1, 0 }
  uselistorder i32 %v0_baac, { 0, 2, 1 }
  uselistorder i32 %v0_ba4c, { 0, 2, 1 }
  uselistorder i32 %v0_ba30, { 0, 2, 1 }
  uselistorder i32 %v2_ba04, { 1, 0 }
  uselistorder i32 %v8_b9e4, { 2, 0, 1, 3 }
  uselistorder i32 %v3_b9d0, { 1, 0 }
  uselistorder i32 %v0_b9c0, { 2, 0, 1, 3 }
  uselistorder i1 %v2_b9a0, { 1, 0 }
  uselistorder i32 %v1_b994, { 1, 2, 3, 0 }
  uselistorder i32 %v1_b990, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_b938, { 0, 2, 1 }
  uselistorder i32 %v0_b920, { 1, 0, 2 }
  uselistorder i1 %v7_b8a8, { 2, 1, 0 }
  uselistorder i1 %v2_baa0, { 2, 3, 1, 0 }
  uselistorder i1 %v3_ba24, { 3, 2, 0, 1 }
  uselistorder i32 %v1_b85c, { 1, 0, 2, 3 }
  uselistorder i8 %v5_b674, { 1, 0 }
  uselistorder i32 %v3_b65c, { 1, 0 }
  uselistorder i32 %v1_b658, { 1, 0 }
  uselistorder i32 %v1_b64c, { 1, 0 }
  uselistorder i32 %v1_b648, { 1, 0 }
  uselistorder i32 %v1_b624, { 1, 0 }
  uselistorder i32 %v1_b620, { 1, 0 }
  uselistorder i32 %v3_b614, { 1, 0 }
  uselistorder i32 %v1_b610, { 1, 0 }
  uselistorder i32 %v1_b5ec, { 1, 0 }
  uselistorder i32 %v1_b5e4, { 1, 0 }
  uselistorder i32 %v1_b5b4, { 2, 1, 3, 0 }
  uselistorder i32 %v3_b5ac, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_b5a4, { 3, 0, 1, 2 }
  uselistorder i32 %v0_b5a0, { 0, 2, 1, 4, 3 }
  uselistorder i1 %v7_b580, { 1, 0 }
  uselistorder i1 %v7_b554, { 1, 0 }
  uselistorder i32 %v3_b550, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_b53c, { 6, 4, 0, 5, 1, 3, 2 }
  uselistorder i32 %v6_b490, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_b478, { 6, 5, 4, 3, 2, 0, 1, 7 }
  uselistorder i32 %v1_b428, { 1, 2, 0 }
  uselistorder i32 %v7_b3e4, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v6_b3c0, { 1, 2, 0 }
  uselistorder i32 %v1_b38c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 6, 7, 5, 8, 9, 11, 10, 13, 12, 14, 16, 15, 17, 18, 19, 22, 20, 21, 23, 24, 25, 26, 27, 1, 28, 29, 30, 31, 35, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder label %dec_label_pc_bac8, { 1, 0 }
  uselistorder label %dec_label_pc_baac, { 1, 0 }
  uselistorder label %dec_label_pc_b900, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b874, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_bad4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bad4:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_bad4 = load i32, i32* @fp, align 4
  %v1_bad8 = urem i32 %arg1, 256
  store i32 %v1_bad8, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_baf0 = urem i32 %arg3, 256
  store i32 %v1_baf0, i32* @r4, align 4
  %v2_baf4 = call i32 @function_129f8(i32 %v1_bad8, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_baf4, i32* @sl, align 4
  %v0_bb00 = load i32, i32* @r7, align 4
  %v2_bb04 = call i32 @function_129f8(i32 %v0_bb00, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_bb10 = load i32, i32* @r6, align 4
  store i32 %v0_bb10, i32* %r1.global-to-local, align 4
  store i32 %v2_bb04, i32* @sb, align 4
  %v0_bb20 = load i32, i32* @r4, align 4
  %v5_bb24 = inttoptr i32 %v0_bb10 to i32*
  %v6_bb24 = call i32 @function_85e0(i32 %v0_bb20, i32* %v5_bb24, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_bb2c = urem i32 %v6_bb24, 65536
  %v0_bb30 = load i32, i32* @r6, align 4
  store i32 %v0_bb30, i32* %r1.global-to-local, align 4
  %v0_bb38 = load i32, i32* @r5, align 4
  %v0_bb3c = load i32, i32* @r4, align 4
  %v5_bb44 = inttoptr i32 %v0_bb30 to i32*
  %v6_bb44 = call i32 @function_85e0(i32 %v0_bb3c, i32* %v5_bb44, i32 6, i32 %v0_bb38, i32 %v3_bb2c)
  %v0_bb48 = load i32, i32* @r6, align 4
  store i32 %v0_bb48, i32* %r1.global-to-local, align 4
  %v3_bb4c = mul i32 %v6_bb44, 65536
  store i32 %v3_bb4c, i32* %fp.global-to-local, align 4
  %v0_bb58 = load i32, i32* @r4, align 4
  %v5_bb5c = inttoptr i32 %v0_bb48 to i32*
  %v6_bb5c = call i32 @function_85e0(i32 %v0_bb58, i32* %v5_bb5c, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  %v0_bb68 = load i32, i32* @r6, align 4
  store i32 %v0_bb68, i32* %r1.global-to-local, align 4
  %v0_bb6c = load i32, i32* @r4, align 4
  %v3_bb74 = urem i32 %v6_bb5c, 65536
  store i32 %v3_bb74, i32* @r6, align 4
  %v5_bb78 = inttoptr i32 %v0_bb68 to i32*
  %v6_bb78 = call i32 @function_85e0(i32 %v0_bb6c, i32* %v5_bb78, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_bb7c = load i32, i32* %fp.global-to-local, align 4
  %v3_bb7c = udiv i32 %v0_bb7c, 65536
  %v1_bb84 = load i32, i32* @r5, align 4
  %v9_bb84 = icmp eq i32 %v3_bb7c, %v1_bb84
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_bb84, label %dec_label_pc_bbac, label %bb

bb:                                               ; preds = %dec_label_pc_bad4
  %v2_bb98 = mul nuw nsw i32 %v3_bb7c, 256
  %v4_bb9c = and i32 %v2_bb98, 65280
  %v1_bba0 = urem i32 %v6_bb78, 256
  store i32 %v1_bba0, i32* @r8, align 4
  %v5_bba4 = udiv i32 %v0_bb7c, 16777216
  %v6_bba4 = or i32 %v4_bb9c, %v5_bba4
  br label %dec_label_pc_bbb8

dec_label_pc_bbac:                                ; preds = %dec_label_pc_bad4
  %v1_bba07 = urem i32 %v6_bb78, 256
  store i32 %v1_bba07, i32* @r8, align 4
  %v0_bbac = call i32 @function_eb90()
  %v3_bbb4 = urem i32 %v0_bbac, 65536
  br label %dec_label_pc_bbb8

dec_label_pc_bbb8:                                ; preds = %bb, %dec_label_pc_bbac
  %storemerge17 = phi i32 [ %v6_bba4, %bb ], [ %v3_bbb4, %dec_label_pc_bbac ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_bbb8 = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_bbb8, 1
  br i1 %tmp41, label %dec_label_pc_bd60.preheader, label %dec_label_pc_bbc0

dec_label_pc_bd60.preheader:                      ; preds = %dec_label_pc_bcbc, %dec_label_pc_bbb8
  %storemerge3.in12.ph = phi i32 [ %v0_bbb8, %dec_label_pc_bbb8 ], [ %v1_bc14, %dec_label_pc_bcbc ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_bd28, label %dec_label_pc_bd2c.lr.ph

dec_label_pc_bbc0:                                ; preds = %dec_label_pc_bbb8
  store i32 %v3_bb2c, i32* %r1.global-to-local, align 4
  %v3_bbc4 = udiv i32 %v6_bb24, 256
  %v5_bbd0 = trunc i32 %v3_bbc4 to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_bbe8 = udiv i32 %v6_bb24, 65536
  store i32 %v3_bbe8, i32* @r4, align 4
  %v4_bbf8 = trunc i32 %v3_bbe8 to i8
  store i8 %v4_bbf8, i8* %stack_var_-80, align 1
  %v3_bd08 = icmp eq i32 %v3_bb2c, 65535
  %v2_bc30 = ptrtoint i32* %stack_var_-52 to i32
  %v3_bc60 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_bcec

dec_label_pc_bc00:                                ; preds = %dec_label_pc_bcec
  %v2_bc00 = load i8, i8* %stack_var_-80, align 1
  %v3_bc00 = sext i8 %v2_bc00 to i32
  store i32 %v3_bc00, i32* %r1.global-to-local, align 4
  store i32 %v3_bbc4, i32* @r4, align 4
  %v2_bc04 = load i32, i32* @r5, align 4
  %v3_bc04 = add i32 %v2_bc04, 2
  %v4_bc04 = inttoptr i32 %v3_bc04 to i8*
  store i8 %v5_bbd0, i8* %v4_bc04, align 1
  %v0_bc08 = load i32, i32* %r1.global-to-local, align 4
  %v1_bc08 = trunc i32 %v0_bc08 to i8
  %v2_bc08 = load i32, i32* @r5, align 4
  %v3_bc08 = add i32 %v2_bc08, 3
  %v4_bc08 = inttoptr i32 %v3_bc08 to i8*
  store i8 %v1_bc08, i8* %v4_bc08, align 1
  br label %dec_label_pc_bc0c

dec_label_pc_bc0c:                                ; preds = %dec_label_pc_bd14, %dec_label_pc_bc00
  %v1_bc14 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_bc24 = call i32 @function_1270c(i32 2, i32 2, i32 17)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_bc2c = icmp eq i32 %v3_bc24, -1
  store i32 %v2_bc30, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v2_bc40 = load i32, i32* @sb, align 4
  %v3_bc40 = add i32 %v2_bc40, %stack_var_-60.0
  %v4_bc40 = inttoptr i32 %v3_bc40 to i32*
  store i32 %v3_bc24, i32* %v4_bc40, align 4
  br i1 %v7_bc2c, label %dec_label_pc_bd6c, label %dec_label_pc_bc48

dec_label_pc_bc48:                                ; preds = %dec_label_pc_bc0c
  store i32 2, i32* %stack_var_-52, align 4
  %v4_bc60 = call i32 @function_1253c(i32 %v3_bc24, %sockaddr* %v3_bc60, i32 16)
  %v0_bc64 = load i32, i32* @r5, align 4
  %v1_bc64 = add i32 %v0_bc64, 20
  %v2_bc64 = inttoptr i32 %v1_bc64 to i8*
  %v3_bc64 = load i8, i8* %v2_bc64, align 1
  %tmp = icmp ugt i8 %v3_bc64, 31
  br i1 %tmp, label %dec_label_pc_bcbc, label %dec_label_pc_bc70

dec_label_pc_bc70:                                ; preds = %dec_label_pc_bc48
  %v1_bc70 = add i32 %v0_bc64, 16
  %v2_bc70 = inttoptr i32 %v1_bc70 to i32*
  %v3_bc70 = load i32, i32* %v2_bc70, align 4
  store i32 %v3_bc70, i32* @r4, align 4
  %v0_bc74 = call i32 @function_eb90()
  %v0_bc78 = load i32, i32* @r4, align 4
  %v1_bc7c = and i32 %v0_bc78, 65280
  %v3_bc84 = mul i32 %v0_bc78, 16777216
  %v4_bc88 = mul nuw nsw i32 %v1_bc7c, 256
  %v5_bc88 = or i32 %v4_bc88, %v3_bc84
  store i32 %v5_bc88, i32* %r1.global-to-local, align 4
  %v0_bc90 = load i32, i32* @r5, align 4
  %v1_bc90 = add i32 %v0_bc90, 20
  %v2_bc90 = inttoptr i32 %v1_bc90 to i8*
  %v3_bc90 = load i8, i8* %v2_bc90, align 1
  %v4_bc90 = zext i8 %v3_bc90 to i32
  %v2_bc94 = call i32 @llvm.bswap.i32(i32 %v0_bc78)
  %v7_bc98 = lshr i32 %v0_bc74, %v4_bc90
  %v8_bc98 = add i32 %v7_bc98, %v2_bc94
  %v3_bca4 = mul i32 %v8_bc98, 16777216
  %v1_bca8 = and i32 %v8_bc98, 65280
  %v4_bcac = mul nuw nsw i32 %v1_bca8, 256
  %v5_bcac = or i32 %v4_bcac, %v3_bca4
  store i32 %v5_bcac, i32* %r1.global-to-local, align 4
  %v2_bcb4 = call i32 @llvm.bswap.i32(i32 %v8_bc98)
  %v2_bcb8 = add i32 %v0_bc90, 4
  %v3_bcb8 = inttoptr i32 %v2_bcb8 to i32*
  store i32 %v2_bcb4, i32* %v3_bcb8, align 4
  %v0_bcc8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_bcbc

dec_label_pc_bcbc:                                ; preds = %dec_label_pc_bc48, %dec_label_pc_bc70
  %v0_bcc8 = phi i32 [ %v0_bc64, %dec_label_pc_bc48 ], [ %v0_bcc8.pre, %dec_label_pc_bc70 ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_bcc4 = load i32, i32* @sb, align 4
  %v2_bcc4 = add i32 %v1_bcc4, %stack_var_-60.0
  %v3_bcc4 = inttoptr i32 %v2_bcc4 to i32*
  %v4_bcc4 = load i32, i32* %v3_bcc4, align 4
  store i32 %v0_bcc8, i32* %r1.global-to-local, align 4
  %v3_bccc = inttoptr i32 %v0_bcc8 to %sockaddr*
  %v4_bccc = call i32 @function_12568(i32 %v4_bcc4, %sockaddr* %v3_bccc, i32 16)
  %v1_bcd8 = add i32 %stack_var_-60.0, 4
  %v1_bcdc = load i32, i32* @r7, align 4
  %v9_bcdc = icmp eq i32 %v1_bc14, %v1_bcdc
  %v0_bce4 = load i32, i32* @r5, align 4
  %v1_bce4 = add i32 %v0_bce4, 24
  store i32 %v1_bce4, i32* @r5, align 4
  br i1 %v9_bcdc, label %dec_label_pc_bd60.preheader, label %dec_label_pc_bcec

dec_label_pc_bcec:                                ; preds = %dec_label_pc_bcbc, %dec_label_pc_bbc0
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_bbc0 ], [ %v1_bcd8, %dec_label_pc_bcbc ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_bbc0 ], [ %v1_bc14, %dec_label_pc_bcbc ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_bcf8 = call i32 @function_129f8(i32 65535, i32 1)
  store i32 %v3_bb2c, i32* %r1.global-to-local, align 4
  %v2_bd0c = load i32, i32* @sl, align 4
  %v3_bd0c = add i32 %v2_bd0c, %stack_var_-60.0
  %v4_bd0c = inttoptr i32 %v3_bd0c to i32*
  store i32 %v2_bcf8, i32* %v4_bd0c, align 4
  br i1 %v3_bd08, label %dec_label_pc_bd14, label %dec_label_pc_bc00

dec_label_pc_bd14:                                ; preds = %dec_label_pc_bcec
  %v0_bd14 = call i32 @function_eb90()
  %v1_bd14 = trunc i32 %v0_bd14 to i8
  %v4_bd18 = sdiv i32 %v0_bd14, 256
  %v1_bd1c = trunc i32 %v4_bd18 to i8
  %v2_bd1c = load i32, i32* @r5, align 4
  %v3_bd1c = add i32 %v2_bd1c, 3
  %v4_bd1c = inttoptr i32 %v3_bd1c to i8*
  store i8 %v1_bd1c, i8* %v4_bd1c, align 1
  %v3_bd20 = load i32, i32* @r5, align 4
  %v4_bd20 = add i32 %v3_bd20, 2
  %v5_bd20 = inttoptr i32 %v4_bd20 to i8*
  store i8 %v1_bd14, i8* %v5_bd20, align 1
  br label %dec_label_pc_bc0c

dec_label_pc_bd28:                                ; preds = %dec_label_pc_bd60.loopexit, %dec_label_pc_bd60.preheader, %dec_label_pc_bd64.loopexit, %dec_label_pc_bd28
  br label %dec_label_pc_bd28

dec_label_pc_bd2c:                                ; preds = %dec_label_pc_bd2c.lr.ph, %dec_label_pc_bd64.loopexit
  %v0_bd2c = load i32, i32* @r8, align 4
  %v2_bd2c = icmp eq i32 %v0_bd2c, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_bd2c, label %dec_label_pc_bd34, label %dec_label_pc_bd74

dec_label_pc_bd34:                                ; preds = %dec_label_pc_bd2c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_bd3c

dec_label_pc_bd3c:                                ; preds = %dec_label_pc_bd3c, %dec_label_pc_bd34
  %v0_bd44 = phi i32 [ %v1_bd44, %dec_label_pc_bd3c ], [ 0, %dec_label_pc_bd34 ]
  %v0_bd3c = phi i32 [ %v1_bd58, %dec_label_pc_bd3c ], [ 0, %dec_label_pc_bd34 ]
  %v1_bd3c = load i32, i32* @sb, align 4
  %v2_bd3c = add i32 %v1_bd3c, %v0_bd3c
  %v3_bd3c = inttoptr i32 %v2_bd3c to i32*
  %v4_bd3c = load i32, i32* %v3_bd3c, align 4
  %v1_bd40 = load i32, i32* @sl, align 4
  %v2_bd40 = add i32 %v1_bd40, %v0_bd3c
  %v3_bd40 = inttoptr i32 %v2_bd40 to i32*
  %v4_bd40 = load i32, i32* %v3_bd40, align 4
  store i32 %v4_bd40, i32* %r1.global-to-local, align 4
  %v1_bd44 = add i32 %v0_bd44, 1
  %v0_bd48 = load i32, i32* @r6, align 4
  %v4_bd50 = inttoptr i32 %v4_bd40 to i32*
  %v5_bd50 = call i32 @function_1267c(i32 %v4_bd3c, i32* %v4_bd50, i32 %v0_bd48, i32 16384)
  %v1_bd54 = load i32, i32* @r7, align 4
  %v9_bd54 = icmp eq i32 %v1_bd44, %v1_bd54
  %v0_bd58 = load i32, i32* @r4, align 4
  %v1_bd58 = add i32 %v0_bd58, 4
  store i32 %v1_bd58, i32* @r4, align 4
  br i1 %v9_bd54, label %dec_label_pc_bd60.loopexit, label %dec_label_pc_bd3c

dec_label_pc_bd60.loopexit:                       ; preds = %dec_label_pc_bd3c
  %tmp4247 = icmp slt i32 %v1_bd44, 1
  br i1 %tmp4247, label %dec_label_pc_bd28, label %dec_label_pc_bd2c.lr.ph

dec_label_pc_bd2c.lr.ph:                          ; preds = %dec_label_pc_bd60.preheader, %dec_label_pc_bd60.loopexit
  br label %dec_label_pc_bd2c

dec_label_pc_bd64.loopexit:                       ; preds = %dec_label_pc_bd7c
  %tmp42 = icmp slt i32 %v0_bda4, 1
  br i1 %tmp42, label %dec_label_pc_bd28, label %dec_label_pc_bd2c

dec_label_pc_bd6c:                                ; preds = %dec_label_pc_bc0c
  store i32 %v24_bad4, i32* %fp.global-to-local, align 4
  ret i32 %v3_bc24

dec_label_pc_bd74:                                ; preds = %dec_label_pc_bd2c
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_bd7c

dec_label_pc_bd7c:                                ; preds = %dec_label_pc_bd7c, %dec_label_pc_bd74
  %v0_bd7c = phi i32 [ %v1_bda8, %dec_label_pc_bd7c ], [ 0, %dec_label_pc_bd74 ]
  %v1_bd7c = load i32, i32* @sl, align 4
  %v2_bd7c = add i32 %v1_bd7c, %v0_bd7c
  %v3_bd7c = inttoptr i32 %v2_bd7c to i32*
  %v4_bd7c = load i32, i32* %v3_bd7c, align 4
  store i32 %v4_bd7c, i32* @r4, align 4
  %v0_bd80 = load i32, i32* @r6, align 4
  store i32 %v0_bd80, i32* @r1, align 4
  %v1_bd88 = inttoptr i32 %v4_bd7c to i8*
  %v2_bd88 = call i32 @function_ed10(i8* %v1_bd88)
  %v0_bd8c = load i32, i32* @r5, align 4
  %v1_bd8c = add i32 %v0_bd8c, 1
  store i32 %v1_bd8c, i32* @r5, align 4
  %v0_bd90 = load i32, i32* @fp, align 4
  %v1_bd90 = load i32, i32* @sb, align 4
  %v2_bd90 = add i32 %v1_bd90, %v0_bd90
  %v3_bd90 = inttoptr i32 %v2_bd90 to i32*
  %v4_bd90 = load i32, i32* %v3_bd90, align 4
  %v0_bd94 = load i32, i32* @r4, align 4
  store i32 %v0_bd94, i32* %r1.global-to-local, align 4
  %v0_bd98 = load i32, i32* @r6, align 4
  %v4_bda0 = inttoptr i32 %v0_bd94 to i32*
  %v5_bda0 = call i32 @function_1267c(i32 %v4_bd90, i32* %v4_bda0, i32 %v0_bd98, i32 16384)
  %v0_bda4 = load i32, i32* @r5, align 4
  %v1_bda4 = load i32, i32* @r7, align 4
  %v9_bda4 = icmp eq i32 %v0_bda4, %v1_bda4
  %v0_bda8 = load i32, i32* @fp, align 4
  %v1_bda8 = add i32 %v0_bda8, 4
  store i32 %v1_bda8, i32* @fp, align 4
  br i1 %v9_bda4, label %dec_label_pc_bd64.loopexit, label %dec_label_pc_bd7c

; uselistorder directives
  uselistorder i32 %v1_bda8, { 1, 0 }
  uselistorder i32 %v0_bda4, { 1, 0 }
  uselistorder i32 %v1_bd58, { 1, 0 }
  uselistorder i32 %v1_bd44, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_bcc8, { 1, 0 }
  uselistorder i32 %v8_bc98, { 1, 2, 0 }
  uselistorder i32 %v0_bc78, { 1, 0, 2 }
  uselistorder i32 %v3_bc24, { 1, 3, 2, 0 }
  uselistorder i32 %v1_bc14, { 1, 2, 0 }
  uselistorder i32 %v3_bbe8, { 1, 0 }
  uselistorder i32 %v3_bbc4, { 1, 0 }
  uselistorder i32 %v3_bb2c, { 0, 3, 1, 2 }
  uselistorder i32 %v1_bad8, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_bd2c.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_bd2c, { 1, 0 }
  uselistorder label %dec_label_pc_bd28, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_bcbc, { 1, 0 }
  uselistorder label %dec_label_pc_bbb8, { 1, 0 }
}

define i32 @function_bdb8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bdb8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_bdb8 = load i32, i32* @sb, align 4
  %v24_bdb8 = load i32, i32* @fp, align 4
  %v1_bdbc = urem i32 %arg1, 256
  store i32 %v1_bdbc, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_bdbc, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_bdd4 = urem i32 %arg3, 256
  store i32 %v1_bdd4, i32* @r4, align 4
  %v2_bdd8 = call i32 @function_129f8(i32 %v1_bdbc, i32 4)
  %v0_bddc = load i32, i32* @r5, align 4
  store i32 %v0_bddc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bdec = load i32, i32* @r4, align 4
  store i32 %v0_bdec, i32* %r0.global-to-local, align 4
  %v5_bdf0 = inttoptr i32 %v0_bddc to i32*
  %v6_bdf0 = call i32 @function_85e0(i32 %v0_bdec, i32* %v5_bdf0, i32 2, i32 0, i32 %v2_bdd8)
  %v1_bdfc = urem i32 %v6_bdf0, 256
  store i32 %v1_bdfc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_be08 = load i32, i32* @r5, align 4
  store i32 %v0_be08, i32* %r1.global-to-local, align 4
  %v0_be0c = load i32, i32* @r4, align 4
  store i32 %v0_be0c, i32* %r0.global-to-local, align 4
  %v5_be10 = trunc i32 %v6_bdf0 to i8
  %v6_be14 = inttoptr i32 %v0_be08 to i32*
  %v7_be14 = call i32 @function_85e0(i32 %v0_be0c, i32* %v6_be14, i32 3, i32 65535, i32 %v6_bdf0)
  %v0_be18 = load i32, i32* @r5, align 4
  store i32 %v0_be18, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_be14, i32* %fp.global-to-local, align 4
  %v0_be28 = load i32, i32* @r4, align 4
  store i32 %v0_be28, i32* %r0.global-to-local, align 4
  %v5_be2c = inttoptr i32 %v0_be18 to i32*
  %v6_be2c = call i32 @function_85e0(i32 %v0_be28, i32* %v5_be2c, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_be34 = urem i32 %v6_be2c, 256
  store i32 %v1_be34, i32* %ip.global-to-local, align 4
  %v0_be38 = load i32, i32* @r5, align 4
  store i32 %v0_be38, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_be44 = load i32, i32* @r4, align 4
  store i32 %v0_be44, i32* %r0.global-to-local, align 4
  %v5_be48 = trunc i32 %v6_be2c to i8
  %v6_be4c = inttoptr i32 %v0_be38 to i32*
  %v7_be4c = call i32 @function_85e0(i32 %v0_be44, i32* %v6_be4c, i32 5, i32 0, i32 %v6_be2c)
  %v1_be58 = urem i32 %v7_be4c, 256
  store i32 %v1_be58, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_be64 = load i32, i32* @r5, align 4
  store i32 %v0_be64, i32* %r1.global-to-local, align 4
  %v0_be68 = load i32, i32* @r4, align 4
  store i32 %v0_be68, i32* %r0.global-to-local, align 4
  %v5_be70 = inttoptr i32 %v0_be64 to i32*
  %v6_be70 = call i32 @function_85e0(i32 %v0_be68, i32* %v5_be70, i32 6, i32 65535, i32 %v1_be58)
  %v0_be78 = load i32, i32* @r5, align 4
  store i32 %v0_be78, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_be70, i32* @r7, align 4
  %v0_be88 = load i32, i32* @r4, align 4
  store i32 %v0_be88, i32* %r0.global-to-local, align 4
  %v5_be8c = inttoptr i32 %v0_be78 to i32*
  %v6_be8c = call i32 @function_85e0(i32 %v0_be88, i32* %v5_be8c, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_be90 = load i32, i32* @r5, align 4
  store i32 %v0_be90, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_be8c, i32* %sb.global-to-local, align 4
  %v0_bea0 = load i32, i32* @r4, align 4
  store i32 %v0_bea0, i32* %r0.global-to-local, align 4
  %v5_bea4 = inttoptr i32 %v0_be90 to i32*
  %v6_bea4 = call i32 @function_85e0(i32 %v0_bea0, i32* %v5_bea4, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_beb0 = load i32, i32* @r5, align 4
  store i32 %v0_beb0, i32* %r1.global-to-local, align 4
  store i32 %v6_bea4, i32* @r6, align 4
  %v0_beb8 = load i32, i32* @r4, align 4
  store i32 %v0_beb8, i32* %r0.global-to-local, align 4
  %v5_bebc = inttoptr i32 %v0_beb0 to i32*
  %v6_bebc = call i32 @function_85e0(i32 %v0_beb8, i32* %v5_bebc, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_bec8 = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_bec8, i32* %r3.global-to-local, align 4
  %v1_becc = urem i32 %v6_bebc, 256
  store i32 %v1_becc, i32* %ip.global-to-local, align 4
  %v0_bed0 = load i32, i32* @r5, align 4
  store i32 %v0_bed0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_bed8 = load i32, i32* @r4, align 4
  store i32 %v0_bed8, i32* %r0.global-to-local, align 4
  %v5_bee0 = inttoptr i32 %v0_bed0 to i32*
  %v6_bee0 = call i32 @function_85e0(i32 %v0_bed8, i32* %v5_bee0, i32 25, i32 %v2_bec8, i32 %v1_becc)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_bef4 = call i32 @function_1270c(i32 2, i32 3, i32 17)
  store i32 %v3_bef4, i32* %r0.global-to-local, align 4
  %v7_bef8 = icmp eq i32 %v3_bef4, -1
  store i1 %v7_bef8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bef8, label %dec_label_pc_c320, label %dec_label_pc_bf04

dec_label_pc_bf04:                                ; preds = %dec_label_pc_bdb8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_bf0c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_bf0c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_bf20 = call i32 @function_126dc(i32 %v3_bef4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_bf20, i32* %r0.global-to-local, align 4
  %v7_bf24 = icmp eq i32 %v6_bf20, -1
  store i1 %v7_bf24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bf24, label %dec_label_pc_c318, label %dec_label_pc_bf2c

dec_label_pc_bf2c:                                ; preds = %dec_label_pc_bf04
  %v0_bf2c = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_bf38 = urem i32 %v0_bf2c, 65536
  store i32 %v3_bf38, i32* %r2.global-to-local, align 4
  %v3_bf3c = icmp ugt i32 %v3_bf38, 1459
  %v9_bf3c = icmp eq i32 %v3_bf38, 1460
  store i1 %v9_bf3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bf3c, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_bf2c
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_bf2c, %bb
  %v0_bf44 = phi i32 [ %v3_bf38, %dec_label_pc_bf2c ], [ 1460, %bb ]
  %v0_bf48 = load i32, i32* %fp.global-to-local, align 4
  %v3_bf48 = mul i32 %v0_bf48, 65536
  store i32 %v3_bf48, i32* %r0.global-to-local, align 4
  %v3_bf4c = urem i32 %v0_bf48, 65536
  store i32 %v3_bf4c, i32* %r2.global-to-local, align 4
  %v0_bf50 = load i32, i32* @sl, align 4
  %v2_bf50 = icmp eq i32 %v0_bf50, 0
  store i1 %v2_bf50, i1* %cpsr_z.global-to-local, align 1
  %v0_bf54 = load i32, i32* %sb.global-to-local, align 4
  %v0_bf58 = load i32, i32* @r7, align 4
  %tmp72 = icmp slt i32 %v0_bf50, 1
  br i1 %tmp72, label %bb73, label %bb74

bb73:                                             ; preds = %bb71
  store i32 %v0_bf44, i32* %r2.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  %v5_bf80 = phi i32 [ %v3_bf4c, %bb71 ], [ %v0_bf44, %bb73 ]
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_bf68 = urem i32 %v0_bf58, 65536
  store i32 %v3_bf68, i32* %r3.global-to-local, align 4
  %v3_bf6c = urem i32 %v0_bf54, 65536
  store i32 %v3_bf6c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %tmp72, label %.thread, label %dec_label_pc_bf88

.thread:                                          ; preds = %bb74
  %v6_bf7c = add nsw i32 %v5_bf80, 28
  store i32 %v6_bf7c, i32* @fp, align 4
  %v6_bf80 = add nsw i32 %v5_bf80, 8
  store i32 %v6_bf80, i32* @sb, align 4
  br label %dec_label_pc_c0fc

dec_label_pc_bf88:                                ; preds = %bb74
  %v1_bf8c = add nuw nsw i32 %v0_bf44, 28
  store i32 %v1_bf8c, i32* @fp, align 4
  %tmp75 = mul nuw nsw i32 %v1_bf8c, 256
  %v1_bf98 = and i32 %tmp75, 65280
  %tmp76 = udiv i32 %v0_bf48, 256
  %v3_bf9c = urem i32 %tmp76, 256
  %v2_bfb0 = icmp eq i32 %v1_be58, 0
  store i1 %v2_bfb0, i1* %cpsr_z.global-to-local, align 1
  %v1_bfb4 = urem i32 %v0_bf48, 256
  %v1_bfbc = add nuw nsw i32 %v0_bf44, 8
  store i32 %v1_bfbc, i32* @sb, align 4
  %v1_bfc4 = urem i32 %v0_bf58, 256
  %v1_bfc8 = urem i32 %v0_bf54, 256
  store i32 %v1_bfc8, i32* %ip.global-to-local, align 4
  store i32 %v1_bf98, i32* %r3.global-to-local, align 4
  %tmp77 = mul nuw nsw i32 %v1_bfbc, 256
  %v4_bfd4 = mul nuw nsw i32 %v1_bfb4, 256
  %v5_bfd4 = or i32 %v4_bfd4, %v3_bf9c
  store i32 %v5_bfd4, i32* %r0.global-to-local, align 4
  %v3_bfd8 = mul nuw nsw i32 %v1_bfc4, 256
  store i32 %v3_bfd8, i32* %r2.global-to-local, align 4
  %tmp78 = udiv i32 %v0_bf54, 256
  %v3_bfdc = urem i32 %tmp78, 256
  %v1_bfe0 = and i32 %tmp77, 65280
  store i32 %v1_bfe0, i32* %r1.global-to-local, align 4
  %tmp79 = udiv i32 %v1_bf8c, 256
  %v4_bfe4 = urem i32 %tmp79, 256
  %v5_bfe4 = or i32 %v4_bfe4, %v1_bf98
  store i32 %v5_bfe4, i32* @lr, align 4
  %tmp80 = udiv i32 %v0_bf58, 256
  %v4_bfe8 = urem i32 %tmp80, 256
  %v5_bfe8 = or i32 %v4_bfe8, %v3_bfd8
  store i32 %v5_bfe8, i32* @r4, align 4
  %v5_bfec = trunc i32 %tmp79 to i8
  %v5_bff0 = trunc i32 %tmp76 to i8
  %v4_bff4 = mul nuw nsw i32 %v1_bfc8, 256
  %v5_bff4 = or i32 %v4_bff4, %v3_bfdc
  store i32 %v5_bff4, i32* @r5, align 4
  %tmp81 = udiv i32 %v1_bfbc, 256
  %v4_bff8 = urem i32 %tmp81, 256
  %v5_bff8 = or i32 %v4_bff8, %v1_bfe0
  store i32 %v5_bff8, i32* @r7, align 4
  br i1 %v2_bfb0, label %dec_label_pc_c000, label %dec_label_pc_c328

dec_label_pc_c000:                                ; preds = %dec_label_pc_bf88
  %v3_c00036 = udiv i32 %v1_bf98, 256
  store i32 %v3_c00036, i32* %ip.global-to-local, align 4
  store i32 %v1_bfb4, i32* %r0.global-to-local, align 4
  store i32 %v1_bfc4, i32* %r1.global-to-local, align 4
  store i32 %v1_bfc8, i32* %r2.global-to-local, align 4
  %v3_c01037 = udiv i32 %v1_bfe0, 256
  store i32 %v3_c01037, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_c0b4 = sext i8 %v5_bff0 to i32
  %sext15 = mul i32 %v0_bf48, 16777216
  %v4_c0b8 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_bf58, 16777216
  %v4_c0d0 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_bfbc, 16777216
  %v4_c0d4 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_bf54, 16777216
  %v4_c0d8 = sdiv i32 %sext18, 16777216
  %v1_c0c0 = trunc i32 %v1_bf8c to i8
  %v1_c0e0 = trunc i32 %v4_c0d4 to i8
  br label %dec_label_pc_c02c

dec_label_pc_c02c:                                ; preds = %dec_label_pc_c02c, %dec_label_pc_c000
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_c038 = call i32 @function_129f8(i32 1510, i32 1)
  store i32 %v2_c038, i32* %r0.global-to-local, align 4
  store i32 %v2_bdd8, i32* %ip.global-to-local, align 4
  %v3_c040 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c040, i32* %r2.global-to-local, align 4
  %v2_c044 = load i32, i32* @r6, align 4
  %v5_c044 = mul i32 %v2_c044, 4
  %v6_c044 = add i32 %v5_c044, %v2_bdd8
  %v7_c044 = inttoptr i32 %v6_c044 to i32*
  store i32 %v2_c038, i32* %v7_c044, align 4
  %v0_c048 = load i32, i32* %ip.global-to-local, align 4
  %v1_c048 = load i32, i32* %r2.global-to-local, align 4
  %v4_c048 = mul i32 %v1_c048, 4
  %v5_c048 = add i32 %v4_c048, %v0_c048
  %v6_c048 = inttoptr i32 %v5_c048 to i32*
  %v7_c048 = load i32, i32* %v6_c048, align 4
  store i32 %v7_c048, i32* %r1.global-to-local, align 4
  %v1_c04c = inttoptr i32 %v7_c048 to i8*
  %v2_c04c = load i8, i8* %v1_c04c, align 1
  %tmp = urem i8 %v2_c04c, 16
  %v1_c050 = zext i8 %tmp to i32
  %v1_c054 = or i32 %v1_c050, 64
  store i32 %v1_c054, i32* %r3.global-to-local, align 4
  %v1_c058 = trunc i32 %v1_c054 to i8
  store i8 %v1_c058, i8* %v1_c04c, align 1
  %v0_c05c = load i32, i32* %r1.global-to-local, align 4
  %v1_c05c = inttoptr i32 %v0_c05c to i8*
  %v2_c05c = load i8, i8* %v1_c05c, align 1
  %v3_c05c = zext i8 %v2_c05c to i32
  %v1_c060 = and i32 %v3_c05c, 240
  %v1_c064 = or i32 %v1_c060, 5
  store i32 %v1_c064, i32* %r2.global-to-local, align 4
  %v3_c06c = add i32 %v0_c05c, 9
  %v4_c06c = inttoptr i32 %v3_c06c to i8*
  store i8 17, i8* %v4_c06c, align 1
  %v0_c070 = load i32, i32* %r2.global-to-local, align 4
  %v1_c070 = trunc i32 %v0_c070 to i8
  %v2_c070 = load i32, i32* %r1.global-to-local, align 4
  %v3_c070 = inttoptr i32 %v2_c070 to i8*
  store i8 %v1_c070, i8* %v3_c070, align 1
  store i32 %v6_bdf0, i32* %r0.global-to-local, align 4
  %v2_c078 = load i32, i32* %r1.global-to-local, align 4
  %v3_c078 = add i32 %v2_c078, 1
  %v4_c078 = inttoptr i32 %v3_c078 to i8*
  store i8 %v5_be10, i8* %v4_c078, align 1
  %v2_c080 = load i32, i32* %r1.global-to-local, align 4
  %v3_c080 = add i32 %v2_c080, 8
  %v4_c080 = inttoptr i32 %v3_c080 to i8*
  store i8 %v5_be48, i8* %v4_c080, align 1
  %v3_c084 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c084, i32* %r2.global-to-local, align 4
  store i32 %v6_bee0, i32* %ip.global-to-local, align 4
  %v3_c08c = mul i32 %v3_c084, 32
  store i32 %v3_c08c, i32* %r3.global-to-local, align 4
  %v1_c090 = load i32, i32* %r1.global-to-local, align 4
  %v2_c090 = add i32 %v1_c090, 12
  %v3_c090 = inttoptr i32 %v2_c090 to i32*
  store i32 %v6_bee0, i32* %v3_c090, align 4
  %v0_c094 = load i32, i32* %r3.global-to-local, align 4
  %v1_c094 = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_c094, -8
  %v5_c094 = add i32 %v0_c094, %tmp83
  %v1_c098 = load i32, i32* @r8, align 4
  %v2_c098 = add i32 %v5_c094, %v1_c098
  store i32 %v2_c098, i32* %r3.global-to-local, align 4
  %v1_c09c = add i32 %v2_c098, 16
  %v2_c09c = inttoptr i32 %v1_c09c to i32*
  %v3_c09c = load i32, i32* %v2_c09c, align 4
  %v1_c0a0 = load i32, i32* %r1.global-to-local, align 4
  %v2_c0a0 = add i32 %v1_c0a0, 16
  %v3_c0a0 = inttoptr i32 %v2_c0a0 to i32*
  store i32 %v3_c09c, i32* %v3_c0a0, align 4
  %v0_c0a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0a8 = add i32 %v0_c0a8, 1
  store i32 %v1_c0a8, i32* @r6, align 4
  %v2_c0ac = load i32, i32* %r1.global-to-local, align 4
  %v3_c0ac = add i32 %v2_c0ac, 2
  %v4_c0ac = inttoptr i32 %v3_c0ac to i8*
  store i8 %v5_bfec, i8* %v4_c0ac, align 1
  store i32 %v4_c0b4, i32* %ip.global-to-local, align 4
  store i32 %v4_c0b8, i32* %r0.global-to-local, align 4
  %v0_c0bc = load i32, i32* %r1.global-to-local, align 4
  %v1_c0bc = add i32 %v0_c0bc, 20
  store i32 %v1_c0bc, i32* %r3.global-to-local, align 4
  %v3_c0c0 = add i32 %v0_c0bc, 3
  %v4_c0c0 = inttoptr i32 %v3_c0c0 to i8*
  store i8 %v1_c0c0, i8* %v4_c0c0, align 1
  %v0_c0c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_c0c4 = trunc i32 %v0_c0c4 to i8
  %v2_c0c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_c0c4 = add i32 %v2_c0c4, 4
  %v4_c0c4 = inttoptr i32 %v3_c0c4 to i8*
  store i8 %v1_c0c4, i8* %v4_c0c4, align 1
  %v0_c0c8 = load i32, i32* %r0.global-to-local, align 4
  %v1_c0c8 = trunc i32 %v0_c0c8 to i8
  %v2_c0c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c0c8 = add i32 %v2_c0c8, 5
  %v4_c0c8 = inttoptr i32 %v3_c0c8 to i8*
  store i8 %v1_c0c8, i8* %v4_c0c8, align 1
  %v0_c0cc = load i32, i32* @r4, align 4
  %v1_c0cc = trunc i32 %v0_c0cc to i8
  %v2_c0cc = load i32, i32* %r1.global-to-local, align 4
  %v3_c0cc = add i32 %v2_c0cc, 20
  %v4_c0cc = inttoptr i32 %v3_c0cc to i8*
  store i8 %v1_c0cc, i8* %v4_c0cc, align 1
  store i32 %v4_c0d0, i32* %r2.global-to-local, align 4
  store i32 %v4_c0d4, i32* %r1.global-to-local, align 4
  store i32 %v4_c0d8, i32* %ip.global-to-local, align 4
  %v0_c0dc = load i32, i32* @r6, align 4
  %v1_c0dc = load i32, i32* @sl, align 4
  %v9_c0dc = icmp eq i32 %v0_c0dc, %v1_c0dc
  store i1 %v9_c0dc, i1* %cpsr_z.global-to-local, align 1
  %v2_c0e0 = load i32, i32* %r3.global-to-local, align 4
  %v3_c0e0 = add i32 %v2_c0e0, 5
  %v4_c0e0 = inttoptr i32 %v3_c0e0 to i8*
  store i8 %v1_c0e0, i8* %v4_c0e0, align 1
  %v0_c0e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0e4 = trunc i32 %v0_c0e4 to i8
  %v2_c0e4 = load i32, i32* %r3.global-to-local, align 4
  %v3_c0e4 = add i32 %v2_c0e4, 1
  %v4_c0e4 = inttoptr i32 %v3_c0e4 to i8*
  store i8 %v1_c0e4, i8* %v4_c0e4, align 1
  %v0_c0e8 = load i32, i32* @r5, align 4
  %v1_c0e8 = trunc i32 %v0_c0e8 to i8
  %v2_c0e8 = load i32, i32* %r3.global-to-local, align 4
  %v3_c0e8 = add i32 %v2_c0e8, 2
  %v4_c0e8 = inttoptr i32 %v3_c0e8 to i8*
  store i8 %v1_c0e8, i8* %v4_c0e8, align 1
  %v0_c0ec = load i32, i32* %ip.global-to-local, align 4
  %v1_c0ec = trunc i32 %v0_c0ec to i8
  %v2_c0ec = load i32, i32* %r3.global-to-local, align 4
  %v3_c0ec = add i32 %v2_c0ec, 3
  %v4_c0ec = inttoptr i32 %v3_c0ec to i8*
  store i8 %v1_c0ec, i8* %v4_c0ec, align 1
  %v0_c0f0 = load i32, i32* @r7, align 4
  %v1_c0f0 = trunc i32 %v0_c0f0 to i8
  %v2_c0f0 = load i32, i32* %r3.global-to-local, align 4
  %v3_c0f0 = add i32 %v2_c0f0, 4
  %v4_c0f0 = inttoptr i32 %v3_c0f0 to i8*
  store i8 %v1_c0f0, i8* %v4_c0f0, align 1
  %v0_c0f4 = load i32, i32* @r6, align 4
  store i32 %v0_c0f4, i32* %stack_var_-40, align 4
  %v5_c0f8 = icmp slt i32 %v0_c0dc, %v1_c0dc
  br i1 %v5_c0f8, label %dec_label_pc_c02c, label %dec_label_pc_c0fc

dec_label_pc_c0fc:                                ; preds = %dec_label_pc_c35c, %dec_label_pc_c02c, %.thread
  %v0_c0fc = load i32, i32* @sl, align 4
  %v2_c0fc = icmp eq i32 %v0_c0fc, 0
  store i1 %v2_c0fc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c2a8 = icmp eq i32 %v3_bf4c, 65535
  %v2_c174 = icmp eq i32 %v1_becc, 0
  %v2_c13c = icmp eq i32 %v6_bee0, -1
  %v7_c13c = icmp eq i32 %v6_bee0, -1
  br label %dec_label_pc_c104.outer

dec_label_pc_c104.outer:                          ; preds = %dec_label_pc_c224, %dec_label_pc_c0fc
  %v1_c104.ph.in = phi i32 [ %v1_c218, %dec_label_pc_c224 ], [ %v0_c0fc, %dec_label_pc_c0fc ]
  %v0_c104.ph = phi i1 [ %v2_c224, %dec_label_pc_c224 ], [ %v2_c0fc, %dec_label_pc_c0fc ]
  %v1_c104.ph = icmp slt i32 %v1_c104.ph.in, 0
  %v4_c104 = or i1 %v1_c104.ph, %v0_c104.ph
  br label %dec_label_pc_c104

dec_label_pc_c104:                                ; preds = %dec_label_pc_c104.outer, %dec_label_pc_c104
  br i1 %v4_c104, label %dec_label_pc_c104, label %dec_label_pc_c108

dec_label_pc_c108:                                ; preds = %dec_label_pc_c104
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c114

dec_label_pc_c114:                                ; preds = %dec_label_pc_c17c, %dec_label_pc_c108
  %v1_c128 = phi i32 [ %v1_c214, %dec_label_pc_c17c ], [ 0, %dec_label_pc_c108 ]
  %v5_c118 = mul i32 %v1_c128, 24
  %v1_c11c = load i32, i32* @r8, align 4
  %v2_c11c = add i32 %v1_c11c, %v5_c118
  store i32 %v2_c11c, i32* %r3.global-to-local, align 4
  store i32 %v2_bdd8, i32* %ip.global-to-local, align 4
  %v1_c124 = add i32 %v2_c11c, 20
  %v2_c124 = inttoptr i32 %v1_c124 to i8*
  %v3_c124 = load i8, i8* %v2_c124, align 1
  %v4_c124 = zext i8 %v3_c124 to i32
  store i32 %v4_c124, i32* %r2.global-to-local, align 4
  %v4_c128 = mul i32 %v1_c128, 4
  %v5_c128 = add i32 %v4_c128, %v2_bdd8
  %v6_c128 = inttoptr i32 %v5_c128 to i32*
  %v7_c128 = load i32, i32* %v6_c128, align 4
  store i32 %v7_c128, i32* @r5, align 4
  %v7_c12c = icmp eq i8 %v3_c124, 31
  store i1 %v7_c12c, i1* %cpsr_z.global-to-local, align 1
  %v1_c130 = add i32 %v7_c128, 20
  store i32 %v1_c130, i32* @r6, align 4
  %tmp84 = icmp ult i8 %v3_c124, 32
  br i1 %tmp84, label %dec_label_pc_c230, label %dec_label_pc_c138

dec_label_pc_c138:                                ; preds = %dec_label_pc_c114
  store i32 %v6_bee0, i32* %r0.global-to-local, align 4
  store i1 %v7_c13c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c13c, label %dec_label_pc_c298, label %dec_label_pc_c144

dec_label_pc_c144:                                ; preds = %dec_label_pc_c230, %dec_label_pc_c138
  store i32 %v3_bf4c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c2a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c2a8, label %dec_label_pc_c2b4, label %dec_label_pc_c158

dec_label_pc_c158:                                ; preds = %dec_label_pc_c298.dec_label_pc_c158_crit_edge, %dec_label_pc_c144
  %v1_c15c = phi i32 [ %v1_c15c.pre, %dec_label_pc_c298.dec_label_pc_c158_crit_edge ], [ 65535, %dec_label_pc_c144 ]
  store i32 %v3_bf68, i32* %r2.global-to-local, align 4
  %v9_c15c = icmp eq i32 %v3_bf68, %v1_c15c
  store i1 %v9_c15c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c15c, label %dec_label_pc_c2d0, label %dec_label_pc_c164

dec_label_pc_c164:                                ; preds = %dec_label_pc_c2b4.dec_label_pc_c164_crit_edge, %dec_label_pc_c158
  %v1_c168 = phi i32 [ %v1_c168.pre, %dec_label_pc_c2b4.dec_label_pc_c164_crit_edge ], [ %v1_c15c, %dec_label_pc_c158 ]
  store i32 %v3_bf6c, i32* %r3.global-to-local, align 4
  %v9_c168 = icmp eq i32 %v3_bf6c, %v1_c168
  store i1 %v9_c168, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c168, label %dec_label_pc_c2ec, label %dec_label_pc_c170

dec_label_pc_c170:                                ; preds = %dec_label_pc_c2d0, %dec_label_pc_c164
  store i32 %v1_becc, i32* %ip.global-to-local, align 4
  store i1 %v2_c174, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c174, label %dec_label_pc_c17c, label %dec_label_pc_c308

dec_label_pc_c17c:                                ; preds = %dec_label_pc_c170, %dec_label_pc_c2ec, %dec_label_pc_c308
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c180 = load i32, i32* @r7, align 4
  %v1_c180 = trunc i32 %v0_c180 to i8
  %v2_c180 = load i32, i32* @r5, align 4
  %v3_c180 = add i32 %v2_c180, 10
  %v4_c180 = inttoptr i32 %v3_c180 to i8*
  store i8 %v1_c180, i8* %v4_c180, align 1
  %v0_c184 = load i32, i32* @r7, align 4
  %v1_c184 = trunc i32 %v0_c184 to i8
  %v2_c184 = load i32, i32* @r5, align 4
  %v3_c184 = add i32 %v2_c184, 11
  %v4_c184 = inttoptr i32 %v3_c184 to i8*
  store i8 %v1_c184, i8* %v4_c184, align 1
  %v0_c188 = load i32, i32* @r5, align 4
  store i32 %v0_c188, i32* @r0, align 4
  %v2_c18c = call i32 @function_d0b8(i32 %v0_c188, i32 20)
  %v3_c18c = trunc i32 %v2_c18c to i8
  store i32 %v2_c18c, i32* %r0.global-to-local, align 4
  %v4_c190 = sdiv i32 %v2_c18c, 256
  store i32 %v4_c190, i32* %r3.global-to-local, align 4
  %v1_c194 = trunc i32 %v4_c190 to i8
  %v2_c194 = load i32, i32* @r5, align 4
  %v3_c194 = add i32 %v2_c194, 11
  %v4_c194 = inttoptr i32 %v3_c194 to i8*
  store i8 %v1_c194, i8* %v4_c194, align 1
  %v3_c198 = load i32, i32* @r5, align 4
  %v4_c198 = add i32 %v3_c198, 10
  %v5_c198 = inttoptr i32 %v4_c198 to i8*
  store i8 %v3_c18c, i8* %v5_c198, align 1
  %v0_c19c = load i32, i32* @r7, align 4
  %v1_c19c = trunc i32 %v0_c19c to i8
  %v2_c19c = load i32, i32* @r6, align 4
  %v3_c19c = add i32 %v2_c19c, 6
  %v4_c19c = inttoptr i32 %v3_c19c to i8*
  store i8 %v1_c19c, i8* %v4_c19c, align 1
  %v0_c1a0 = load i32, i32* @r7, align 4
  %v1_c1a0 = trunc i32 %v0_c1a0 to i8
  %v2_c1a0 = load i32, i32* @r6, align 4
  %v3_c1a0 = add i32 %v2_c1a0, 7
  %v4_c1a0 = inttoptr i32 %v3_c1a0 to i8*
  store i8 %v1_c1a0, i8* %v4_c1a0, align 1
  %v0_c1a4 = load i32, i32* @r5, align 4
  %v1_c1a4 = add i32 %v0_c1a4, 24
  %v2_c1a4 = inttoptr i32 %v1_c1a4 to i8*
  %v3_c1a4 = load i8, i8* %v2_c1a4, align 1
  %v4_c1a4 = zext i8 %v3_c1a4 to i32
  store i32 %v4_c1a4, i32* %r3.global-to-local, align 4
  %v1_c1a8 = add i32 %v0_c1a4, 25
  %v2_c1a8 = inttoptr i32 %v1_c1a8 to i8*
  %v3_c1a8 = load i8, i8* %v2_c1a8, align 1
  %v4_c1a8 = zext i8 %v3_c1a8 to i32
  %v0_c1ac = load i32, i32* @r6, align 4
  store i32 %v0_c1ac, i32* @r1, align 4
  %v4_c1b0 = mul nuw nsw i32 %v4_c1a8, 256
  %v5_c1b0 = or i32 %v4_c1b0, %v4_c1a4
  store i32 %v5_c1b0, i32* %r2.global-to-local, align 4
  store i32 %v0_c1a4, i32* %r0.global-to-local, align 4
  %v0_c1b8 = load i32, i32* @sb, align 4
  store i32 %v0_c1b8, i32* %r3.global-to-local, align 4
  %v4_c1bc = call i32 @function_d114(i32 %v0_c1a4, i32 %v0_c1ac, i32 %v5_c1b0, i32 %v0_c1b8)
  %v5_c1bc = trunc i32 %v4_c1bc to i8
  store i32 %v4_c1bc, i32* %r0.global-to-local, align 4
  %v4_c1c038 = udiv i32 %v4_c1bc, 256
  %v1_c1c4 = trunc i32 %v4_c1c038 to i8
  %v2_c1c4 = load i32, i32* @r6, align 4
  %v3_c1c4 = add i32 %v2_c1c4, 7
  %v4_c1c4 = inttoptr i32 %v3_c1c4 to i8*
  store i8 %v1_c1c4, i8* %v4_c1c4, align 1
  %v3_c1c8 = load i32, i32* @r6, align 4
  %v4_c1c8 = add i32 %v3_c1c8, 6
  %v5_c1c8 = inttoptr i32 %v4_c1c8 to i8*
  store i8 %v5_c1bc, i8* %v5_c1c8, align 1
  %v3_c1cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c1cc, i32* %r3.global-to-local, align 4
  %v0_c1d0 = load i32, i32* @r5, align 4
  %v1_c1d0 = add i32 %v0_c1d0, 20
  %v2_c1d0 = inttoptr i32 %v1_c1d0 to i32*
  %v3_c1d0 = load i32, i32* %v2_c1d0, align 4
  %v3_c1d8 = udiv i32 %v3_c1d0, 65536
  store i32 %v3_c1d8, i32* %r2.global-to-local, align 4
  %v5_c1dc = mul i32 %v3_c1cc, 24
  %v1_c1e0 = load i32, i32* @r8, align 4
  %v2_c1e0 = add i32 %v1_c1e0, %v5_c1dc
  store i32 %v2_c1e0, i32* %ip.global-to-local, align 4
  %v3_c1e435 = udiv i32 %v3_c1d0, 16777216
  %v1_c1e8 = trunc i32 %v3_c1e435 to i8
  %v3_c1e8 = add i32 %v2_c1e0, 3
  %v4_c1e8 = inttoptr i32 %v3_c1e8 to i8*
  store i8 %v1_c1e8, i8* %v4_c1e8, align 1
  %v0_c1ec = load i32, i32* %r2.global-to-local, align 4
  %v1_c1ec = trunc i32 %v0_c1ec to i8
  %v2_c1ec = load i32, i32* %ip.global-to-local, align 4
  %v3_c1ec = add i32 %v2_c1ec, 2
  %v4_c1ec = inttoptr i32 %v3_c1ec to i8*
  store i8 %v1_c1ec, i8* %v4_c1ec, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c1f4 = load i32, i32* @r5, align 4
  store i32 %v0_c1f4, i32* %r1.global-to-local, align 4
  store i32 %v3_bef4, i32* %r0.global-to-local, align 4
  %v0_c1fc = load i32, i32* @fp, align 4
  store i32 %v0_c1fc, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c204 = load i32, i32* %ip.global-to-local, align 4
  %v6_c20c = inttoptr i32 %v0_c1f4 to i32*
  %v7_c20c = call i32 @function_126a8(i32 %v3_bef4, i32* %v6_c20c, i32 %v0_c1fc, i32 16384, i32 %v0_c204, i32 16)
  %v3_c210 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c210, i32* %r3.global-to-local, align 4
  %v1_c214 = add i32 %v3_c210, 1
  store i32 %v1_c214, i32* %r0.global-to-local, align 4
  %v1_c218 = load i32, i32* @sl, align 4
  %v9_c218 = icmp eq i32 %v1_c214, %v1_c218
  store i1 %v9_c218, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c214, i32* %stack_var_-40, align 4
  %v5_c220 = icmp slt i32 %v1_c214, %v1_c218
  br i1 %v5_c220, label %dec_label_pc_c114, label %dec_label_pc_c224

dec_label_pc_c224:                                ; preds = %dec_label_pc_c17c
  %v2_c224 = icmp eq i32 %v1_c218, 0
  store i1 %v2_c224, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_c104.outer

dec_label_pc_c230:                                ; preds = %dec_label_pc_c114
  %v1_c230 = add i32 %v2_c11c, 16
  %v2_c230 = inttoptr i32 %v1_c230 to i32*
  %v3_c230 = load i32, i32* %v2_c230, align 4
  %v0_c234 = call i32 @function_eb90()
  store i32 %v0_c234, i32* %r0.global-to-local, align 4
  %v3_c238 = load i32, i32* %stack_var_-40, align 4
  %v5_c240 = mul i32 %v3_c238, 24
  %v1_c248 = load i32, i32* @r8, align 4
  %v2_c248 = add i32 %v1_c248, %v5_c240
  store i32 %v2_c248, i32* %r1.global-to-local, align 4
  %v1_c24c = and i32 %v3_c230, 65280
  store i32 %v1_c24c, i32* %r3.global-to-local, align 4
  %v1_c244 = udiv i32 %v3_c230, 256
  %v3_c250 = and i32 %v1_c244, 65280
  store i32 %v3_c250, i32* %r2.global-to-local, align 4
  %v3_c254 = mul i32 %v3_c230, 16777216
  store i32 %v3_c254, i32* %ip.global-to-local, align 4
  %v1_c258 = add i32 %v2_c248, 20
  %v2_c258 = inttoptr i32 %v1_c258 to i8*
  %v3_c258 = load i8, i8* %v2_c258, align 1
  %v4_c258 = zext i8 %v3_c258 to i32
  %v4_c25c = mul nuw nsw i32 %v1_c24c, 256
  %v5_c25c = or i32 %v4_c25c, %v3_c254
  store i32 %v5_c25c, i32* %ip.global-to-local, align 4
  %v2_c264 = call i32 @llvm.bswap.i32(i32 %v3_c230)
  %v7_c268 = lshr i32 %v0_c234, %v4_c258
  %v8_c268 = add i32 %v7_c268, %v2_c264
  store i32 %v8_c268, i32* %r2.global-to-local, align 4
  %v3_c274 = mul i32 %v8_c268, 16777216
  %v1_c26c = mul i32 %v8_c268, 256
  %v4_c278 = and i32 %v1_c26c, 16711680
  %v5_c278 = or i32 %v4_c278, %v3_c274
  store i32 %v5_c278, i32* %r1.global-to-local, align 4
  store i32 %v6_bee0, i32* %r0.global-to-local, align 4
  %v2_c288 = call i32 @llvm.bswap.i32(i32 %v8_c268)
  store i32 %v2_c288, i32* %r3.global-to-local, align 4
  store i1 %v7_c13c, i1* %cpsr_z.global-to-local, align 1
  %v1_c290 = load i32, i32* @r5, align 4
  %v2_c290 = add i32 %v1_c290, 16
  %v3_c290 = inttoptr i32 %v2_c290 to i32*
  store i32 %v2_c288, i32* %v3_c290, align 4
  br i1 %v2_c13c, label %dec_label_pc_c298, label %dec_label_pc_c144

dec_label_pc_c298:                                ; preds = %dec_label_pc_c230, %dec_label_pc_c138
  %v0_c298 = call i32 @function_eb90()
  store i32 %v0_c298, i32* %r0.global-to-local, align 4
  store i32 %v3_bf4c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c2a8, i1* %cpsr_z.global-to-local, align 1
  %v1_c2ac = load i32, i32* @r5, align 4
  %v2_c2ac = add i32 %v1_c2ac, 12
  %v3_c2ac = inttoptr i32 %v2_c2ac to i32*
  store i32 %v0_c298, i32* %v3_c2ac, align 4
  br i1 %v3_c2a8, label %dec_label_pc_c2b4, label %dec_label_pc_c298.dec_label_pc_c158_crit_edge

dec_label_pc_c298.dec_label_pc_c158_crit_edge:    ; preds = %dec_label_pc_c298
  %v1_c15c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c158

dec_label_pc_c2b4:                                ; preds = %dec_label_pc_c298, %dec_label_pc_c144
  %v0_c2b4 = call i32 @function_eb90()
  %v1_c2b4 = trunc i32 %v0_c2b4 to i8
  store i32 %v0_c2b4, i32* %r0.global-to-local, align 4
  store i32 %v3_bf68, i32* %r2.global-to-local, align 4
  %v4_c2bc = sdiv i32 %v0_c2b4, 256
  store i32 %v4_c2bc, i32* %r3.global-to-local, align 4
  %v1_c2c0 = load i32, i32* @r4, align 4
  %v9_c2c0 = icmp eq i32 %v3_bf68, %v1_c2c0
  store i1 %v9_c2c0, i1* %cpsr_z.global-to-local, align 1
  %v1_c2c4 = trunc i32 %v4_c2bc to i8
  %v2_c2c4 = load i32, i32* @r5, align 4
  %v3_c2c4 = add i32 %v2_c2c4, 5
  %v4_c2c4 = inttoptr i32 %v3_c2c4 to i8*
  store i8 %v1_c2c4, i8* %v4_c2c4, align 1
  %v3_c2c8 = load i32, i32* @r5, align 4
  %v4_c2c8 = add i32 %v3_c2c8, 4
  %v5_c2c8 = inttoptr i32 %v4_c2c8 to i8*
  store i8 %v1_c2b4, i8* %v5_c2c8, align 1
  %v0_c2cc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c2cc, label %dec_label_pc_c2d0, label %dec_label_pc_c2b4.dec_label_pc_c164_crit_edge

dec_label_pc_c2b4.dec_label_pc_c164_crit_edge:    ; preds = %dec_label_pc_c2b4
  %v1_c168.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c164

dec_label_pc_c2d0:                                ; preds = %dec_label_pc_c2b4, %dec_label_pc_c158
  %v0_c2d0 = call i32 @function_eb90()
  %v1_c2d0 = trunc i32 %v0_c2d0 to i8
  store i32 %v0_c2d0, i32* %r0.global-to-local, align 4
  %v4_c2d4 = sdiv i32 %v0_c2d0, 256
  store i32 %v4_c2d4, i32* %r3.global-to-local, align 4
  %v3_c2d8 = load i32, i32* @r5, align 4
  %v4_c2d8 = add i32 %v3_c2d8, 20
  %v5_c2d8 = inttoptr i32 %v4_c2d8 to i8*
  store i8 %v1_c2d0, i8* %v5_c2d8, align 1
  %v0_c2dc = load i32, i32* %r3.global-to-local, align 4
  %v1_c2dc = trunc i32 %v0_c2dc to i8
  %v2_c2dc = load i32, i32* @r6, align 4
  %v3_c2dc = add i32 %v2_c2dc, 1
  %v4_c2dc = inttoptr i32 %v3_c2dc to i8*
  store i8 %v1_c2dc, i8* %v4_c2dc, align 1
  store i32 %v3_bf6c, i32* %r3.global-to-local, align 4
  %v1_c2e4 = load i32, i32* @r4, align 4
  %v9_c2e4 = icmp eq i32 %v3_bf6c, %v1_c2e4
  store i1 %v9_c2e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c2e4, label %dec_label_pc_c2ec, label %dec_label_pc_c170

dec_label_pc_c2ec:                                ; preds = %dec_label_pc_c2d0, %dec_label_pc_c164
  %v0_c2ec = call i32 @function_eb90()
  %v1_c2ec = trunc i32 %v0_c2ec to i8
  store i32 %v0_c2ec, i32* %r0.global-to-local, align 4
  store i32 %v1_becc, i32* %ip.global-to-local, align 4
  %v4_c2f4 = sdiv i32 %v0_c2ec, 256
  store i32 %v4_c2f4, i32* %r3.global-to-local, align 4
  store i1 %v2_c174, i1* %cpsr_z.global-to-local, align 1
  %v1_c2fc = trunc i32 %v4_c2f4 to i8
  %v2_c2fc = load i32, i32* @r6, align 4
  %v3_c2fc = add i32 %v2_c2fc, 3
  %v4_c2fc = inttoptr i32 %v3_c2fc to i8*
  store i8 %v1_c2fc, i8* %v4_c2fc, align 1
  %v3_c300 = load i32, i32* @r6, align 4
  %v4_c300 = add i32 %v3_c300, 2
  %v5_c300 = inttoptr i32 %v4_c300 to i8*
  store i8 %v1_c2ec, i8* %v5_c300, align 1
  %v0_c304 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c304, label %dec_label_pc_c17c, label %dec_label_pc_c308

dec_label_pc_c308:                                ; preds = %dec_label_pc_c170, %dec_label_pc_c2ec
  %v0_c308 = load i32, i32* @r5, align 4
  %v1_c308 = add i32 %v0_c308, 28
  store i32 %v1_c308, i32* %r0.global-to-local, align 4
  store i32 %v0_bf44, i32* @r1, align 4
  %v1_c310 = inttoptr i32 %v1_c308 to i8*
  %v2_c310 = call i32 @function_ed10(i8* %v1_c310)
  store i32 %v2_c310, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c17c

dec_label_pc_c318:                                ; preds = %dec_label_pc_bf04
  store i32 %v3_bef4, i32* %r0.global-to-local, align 4
  %v1_c31c = call i32 @function_11dfc(i32 %v3_bef4)
  store i32 %v1_c31c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c320

dec_label_pc_c320:                                ; preds = %dec_label_pc_bdb8, %dec_label_pc_c318
  %v29_c324 = phi i32 [ %v3_bef4, %dec_label_pc_bdb8 ], [ %v1_c31c, %dec_label_pc_c318 ]
  store i32 %v18_bdb8, i32* %sb.global-to-local, align 4
  store i32 %v24_bdb8, i32* %fp.global-to-local, align 4
  ret i32 %v29_c324

dec_label_pc_c328:                                ; preds = %dec_label_pc_bf88
  %v3_c32c = sext i8 %v5_bfec to i32
  %v7_c32c = sext i8 %v5_bff0 to i32
  %v3_c330 = sdiv i32 %v3_c32c, 256
  store i32 %v3_c330, i32* %r0.global-to-local, align 4
  %v3_c334 = sdiv i32 %v7_c32c, 256
  store i32 %v3_c334, i32* %r1.global-to-local, align 4
  store i32 %v1_bfc4, i32* %r2.global-to-local, align 4
  store i32 %v1_bfc8, i32* %r3.global-to-local, align 4
  %v3_c34034 = udiv i32 %v1_bfe0, 256
  store i32 %v3_c34034, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %sext11 = mul i32 %v1_bfbc, 16777216
  %v4_c404 = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v0_bf58, 16777216
  %v4_c408 = sdiv i32 %sext12, 16777216
  %sext13 = mul i32 %v0_bf54, 16777216
  %v4_c424 = sdiv i32 %sext13, 16777216
  %v1_c410 = trunc i32 %v3_c334 to i8
  %v1_c42c = trunc i32 %v4_c424 to i8
  br label %dec_label_pc_c35c

dec_label_pc_c35c:                                ; preds = %dec_label_pc_c35c, %dec_label_pc_c328
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_c368 = call i32 @function_129f8(i32 1510, i32 1)
  store i32 %v2_c368, i32* %r0.global-to-local, align 4
  store i32 %v2_bdd8, i32* %r1.global-to-local, align 4
  %v3_c370 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c370, i32* %r2.global-to-local, align 4
  %v2_c374 = load i32, i32* @r6, align 4
  %v5_c374 = mul i32 %v2_c374, 4
  %v6_c374 = add i32 %v5_c374, %v2_bdd8
  %v7_c374 = inttoptr i32 %v6_c374 to i32*
  store i32 %v2_c368, i32* %v7_c374, align 4
  %v0_c378 = load i32, i32* %r1.global-to-local, align 4
  %v1_c378 = load i32, i32* %r2.global-to-local, align 4
  %v4_c378 = mul i32 %v1_c378, 4
  %v5_c378 = add i32 %v4_c378, %v0_c378
  %v6_c378 = inttoptr i32 %v5_c378 to i32*
  %v7_c378 = load i32, i32* %v6_c378, align 4
  store i32 %v7_c378, i32* %r1.global-to-local, align 4
  %v1_c37c = inttoptr i32 %v7_c378 to i8*
  %v2_c37c = load i8, i8* %v1_c37c, align 1
  %tmp85 = urem i8 %v2_c37c, 16
  %v1_c380 = zext i8 %tmp85 to i32
  %v1_c384 = or i32 %v1_c380, 64
  store i32 %v1_c384, i32* %r3.global-to-local, align 4
  %v1_c388 = trunc i32 %v1_c384 to i8
  store i8 %v1_c388, i8* %v1_c37c, align 1
  %v0_c38c = load i32, i32* %r1.global-to-local, align 4
  %v1_c38c = inttoptr i32 %v0_c38c to i8*
  %v2_c38c = load i8, i8* %v1_c38c, align 1
  %v3_c38c = zext i8 %v2_c38c to i32
  %v1_c390 = and i32 %v3_c38c, 240
  %v1_c394 = or i32 %v1_c390, 5
  store i32 %v1_c394, i32* %r2.global-to-local, align 4
  %v3_c39c = add i32 %v0_c38c, 9
  %v4_c39c = inttoptr i32 %v3_c39c to i8*
  store i8 17, i8* %v4_c39c, align 1
  %v0_c3a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c3a0 = trunc i32 %v0_c3a0 to i8
  %v2_c3a0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3a0 = inttoptr i32 %v2_c3a0 to i8*
  store i8 %v1_c3a0, i8* %v3_c3a0, align 1
  %v2_c3a8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3a8 = add i32 %v2_c3a8, 1
  %v4_c3a8 = inttoptr i32 %v3_c3a8 to i8*
  store i8 %v5_be10, i8* %v4_c3a8, align 1
  store i32 %v6_be2c, i32* %r0.global-to-local, align 4
  %v2_c3b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3b0 = add i32 %v2_c3b0, 8
  %v4_c3b0 = inttoptr i32 %v3_c3b0 to i8*
  store i8 %v5_be48, i8* %v4_c3b0, align 1
  %v3_c3b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c3b4, i32* %r2.global-to-local, align 4
  store i32 %v6_bee0, i32* %ip.global-to-local, align 4
  %v3_c3bc = mul i32 %v3_c3b4, 32
  store i32 %v3_c3bc, i32* %r3.global-to-local, align 4
  %v1_c3c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_c3c0 = add i32 %v1_c3c0, 12
  %v3_c3c0 = inttoptr i32 %v2_c3c0 to i32*
  store i32 %v6_bee0, i32* %v3_c3c0, align 4
  %v0_c3c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c3c4 = load i32, i32* %r2.global-to-local, align 4
  %tmp86 = mul i32 %v1_c3c4, -8
  %v5_c3c4 = add i32 %v0_c3c4, %tmp86
  %v1_c3c8 = load i32, i32* @r8, align 4
  %v2_c3c8 = add i32 %v5_c3c4, %v1_c3c8
  store i32 %v2_c3c8, i32* %r3.global-to-local, align 4
  %v1_c3cc = add i32 %v2_c3c8, 16
  %v2_c3cc = inttoptr i32 %v1_c3cc to i32*
  %v3_c3cc = load i32, i32* %v2_c3cc, align 4
  store i32 %v3_c3cc, i32* %ip.global-to-local, align 4
  %v1_c3d0 = add i32 %v1_c3c4, 1
  store i32 %v1_c3d0, i32* @r6, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c3dc = load i32, i32* %r1.global-to-local, align 4
  %v3_c3dc = add i32 %v2_c3dc, 6
  %v4_c3dc = inttoptr i32 %v3_c3dc to i8*
  store i8 64, i8* %v4_c3dc, align 1
  %v0_c3e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c3e0 = trunc i32 %v0_c3e0 to i8
  %v2_c3e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3e0 = add i32 %v2_c3e0, 7
  %v4_c3e0 = inttoptr i32 %v3_c3e0 to i8*
  store i8 %v1_c3e0, i8* %v4_c3e0, align 1
  %v0_c3e4 = load i32, i32* %ip.global-to-local, align 4
  %v1_c3e4 = load i32, i32* %r1.global-to-local, align 4
  %v2_c3e4 = add i32 %v1_c3e4, 16
  %v3_c3e4 = inttoptr i32 %v2_c3e4 to i32*
  store i32 %v0_c3e4, i32* %v3_c3e4, align 4
  store i32 %v3_c330, i32* %r3.global-to-local, align 4
  store i32 %v7_c32c, i32* %ip.global-to-local, align 4
  %v2_c3f4 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3f4 = add i32 %v2_c3f4, 2
  %v4_c3f4 = inttoptr i32 %v3_c3f4 to i8*
  store i8 %v5_bfec, i8* %v4_c3f4, align 1
  %v0_c3f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c3f8 = trunc i32 %v0_c3f8 to i8
  %v2_c3f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3f8 = add i32 %v2_c3f8, 3
  %v4_c3f8 = inttoptr i32 %v3_c3f8 to i8*
  store i8 %v1_c3f8, i8* %v4_c3f8, align 1
  %v0_c3fc = load i32, i32* %ip.global-to-local, align 4
  %v1_c3fc = trunc i32 %v0_c3fc to i8
  %v2_c3fc = load i32, i32* %r1.global-to-local, align 4
  %v3_c3fc = add i32 %v2_c3fc, 4
  %v4_c3fc = inttoptr i32 %v3_c3fc to i8*
  store i8 %v1_c3fc, i8* %v4_c3fc, align 1
  store i32 %v3_c334, i32* %r2.global-to-local, align 4
  store i32 %v4_c404, i32* %r3.global-to-local, align 4
  store i32 %v4_c408, i32* %ip.global-to-local, align 4
  %v0_c40c = load i32, i32* %r1.global-to-local, align 4
  %v1_c40c = add i32 %v0_c40c, 20
  store i32 %v1_c40c, i32* %r0.global-to-local, align 4
  %v3_c410 = add i32 %v0_c40c, 5
  %v4_c410 = inttoptr i32 %v3_c410 to i8*
  store i8 %v1_c410, i8* %v4_c410, align 1
  %v0_c414 = load i32, i32* @r4, align 4
  %v1_c414 = trunc i32 %v0_c414 to i8
  %v2_c414 = load i32, i32* %r1.global-to-local, align 4
  %v3_c414 = add i32 %v2_c414, 20
  %v4_c414 = inttoptr i32 %v3_c414 to i8*
  store i8 %v1_c414, i8* %v4_c414, align 1
  %v0_c418 = load i32, i32* %r3.global-to-local, align 4
  %v1_c418 = trunc i32 %v0_c418 to i8
  %v2_c418 = load i32, i32* %r0.global-to-local, align 4
  %v3_c418 = add i32 %v2_c418, 5
  %v4_c418 = inttoptr i32 %v3_c418 to i8*
  store i8 %v1_c418, i8* %v4_c418, align 1
  %v0_c41c = load i32, i32* %ip.global-to-local, align 4
  %v1_c41c = trunc i32 %v0_c41c to i8
  %v2_c41c = load i32, i32* %r0.global-to-local, align 4
  %v3_c41c = add i32 %v2_c41c, 1
  %v4_c41c = inttoptr i32 %v3_c41c to i8*
  store i8 %v1_c41c, i8* %v4_c41c, align 1
  %v0_c420 = load i32, i32* @r5, align 4
  %v1_c420 = trunc i32 %v0_c420 to i8
  %v2_c420 = load i32, i32* %r0.global-to-local, align 4
  %v3_c420 = add i32 %v2_c420, 2
  %v4_c420 = inttoptr i32 %v3_c420 to i8*
  store i8 %v1_c420, i8* %v4_c420, align 1
  store i32 %v4_c424, i32* %r1.global-to-local, align 4
  %v0_c428 = load i32, i32* @r6, align 4
  %v1_c428 = load i32, i32* @sl, align 4
  %v9_c428 = icmp eq i32 %v0_c428, %v1_c428
  store i1 %v9_c428, i1* %cpsr_z.global-to-local, align 1
  %v2_c42c = load i32, i32* %r0.global-to-local, align 4
  %v3_c42c = add i32 %v2_c42c, 3
  %v4_c42c = inttoptr i32 %v3_c42c to i8*
  store i8 %v1_c42c, i8* %v4_c42c, align 1
  %v0_c430 = load i32, i32* @r7, align 4
  %v1_c430 = trunc i32 %v0_c430 to i8
  %v2_c430 = load i32, i32* %r0.global-to-local, align 4
  %v3_c430 = add i32 %v2_c430, 4
  %v4_c430 = inttoptr i32 %v3_c430 to i8*
  store i8 %v1_c430, i8* %v4_c430, align 1
  %v0_c434 = load i32, i32* @r6, align 4
  store i32 %v0_c434, i32* %stack_var_-40, align 4
  %v5_c438 = icmp slt i32 %v0_c428, %v1_c428
  br i1 %v5_c438, label %dec_label_pc_c35c, label %dec_label_pc_c0fc

; uselistorder directives
  uselistorder i32 %v1_c3c4, { 1, 0 }
  uselistorder i32 %v3_c334, { 2, 1, 0 }
  uselistorder i32 %v3_c330, { 1, 0 }
  uselistorder i32 %v7_c32c, { 1, 0 }
  uselistorder i32 %v4_c2f4, { 1, 0 }
  uselistorder i32 %v0_c2ec, { 0, 2, 1 }
  uselistorder i32 %v0_c2d0, { 0, 2, 1 }
  uselistorder i32 %v4_c2bc, { 1, 0 }
  uselistorder i32 %v0_c2b4, { 0, 2, 1 }
  uselistorder i32 %v2_c288, { 1, 0 }
  uselistorder i32 %v8_c268, { 2, 0, 1, 3 }
  uselistorder i32 %v3_c254, { 1, 0 }
  uselistorder i32 %v3_c230, { 1, 3, 2, 0 }
  uselistorder i1 %v2_c224, { 1, 0 }
  uselistorder i32 %v1_c218, { 1, 2, 3, 0 }
  uselistorder i32 %v1_c214, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_c1bc, { 0, 2, 1 }
  uselistorder i32 %v0_c1a4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_c190, { 1, 0 }
  uselistorder i32 %v2_c18c, { 0, 2, 1 }
  uselistorder i1 %v7_c13c, { 2, 1, 0 }
  uselistorder i1 %v3_c2a8, { 1, 0, 2, 3 }
  uselistorder i8 %v5_bfec, { 0, 2, 1 }
  uselistorder i32 %v3_bfd8, { 1, 0 }
  uselistorder i32 %v1_bfc8, { 2, 3, 0, 1 }
  uselistorder i32 %v1_bfc4, { 1, 2, 0 }
  uselistorder i32 %v1_bfbc, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v1_bfb4, { 1, 0 }
  uselistorder i32 %v1_bf8c, { 2, 1, 0, 3 }
  uselistorder i32 %v3_bf6c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v3_bf4c, { 2, 1, 4, 3, 0 }
  uselistorder i32 %v0_bf48, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v0_bf44, { 3, 0, 4, 1, 2 }
  uselistorder i32 %v3_bf38, { 3, 1, 2, 0 }
  uselistorder i1 %v7_bf24, { 1, 0 }
  uselistorder i1 %v7_bef8, { 1, 0 }
  uselistorder i32 %v3_bef4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_bee0, { 2, 1, 7, 5, 0, 6, 4, 3 }
  uselistorder i32 %v1_becc, { 3, 1, 2, 4, 0 }
  uselistorder i32 %v1_be58, { 1, 2, 0 }
  uselistorder i32 %v6_be2c, { 2, 1, 3, 0 }
  uselistorder i32 %v6_bdf0, { 2, 1, 3, 0 }
  uselistorder i32 %v2_bdd8, { 0, 3, 1, 5, 2, 4, 6 }
  uselistorder i32 %v1_bdbc, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 14, 13 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 48, 47, 49, 50, 52, 51, 54, 53, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 10, 8, 9, 12, 11, 14, 13, 15, 16, 17, 19, 18, 21, 20, 22, 24, 23, 30, 25, 26, 27, 28, 29, 35, 31, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32 (i8*)* @function_ed10, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_c320, { 1, 0 }
  uselistorder label %dec_label_pc_c308, { 1, 0 }
  uselistorder label %dec_label_pc_c17c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c104, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
}

define i32 @function_c444(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c444:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_c444 = load i32, i32* @r4, align 4
  %v12_c444 = load i32, i32* @r7, align 4
  %v1_c448 = urem i32 %arg1, 256
  store i32 %v1_c448, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @sl, align 4
  %v1_c45c = urem i32 %arg3, 256
  store i32 %v1_c45c, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_c464 = call i32 @function_129f8(i32 %v1_c448, i32 4)
  %v0_c468 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c474 = load i32, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_c47c = inttoptr i32 %v0_c468 to i32*
  %v6_c47c = call i32 @function_85e0(i32 %v0_c474, i32* %v5_c47c, i32 2, i32 0, i32 %v2_c464)
  %v1_c488 = urem i32 %v6_c47c, 256
  store i32 %v1_c488, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c494 = load i32, i32* @r4, align 4
  %v0_c498 = load i32, i32* @r5, align 4
  %v5_c49c = trunc i32 %v6_c47c to i8
  %v6_c4a0 = inttoptr i32 %v0_c498 to i32*
  %v7_c4a0 = call i32 @function_85e0(i32 %v0_c494, i32* %v6_c4a0, i32 3, i32 65535, i32 %v6_c47c)
  %v0_c4a4 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_c4a0, i32* @r7, align 4
  %v0_c4b4 = load i32, i32* @r4, align 4
  %v5_c4b8 = inttoptr i32 %v0_c4a4 to i32*
  %v6_c4b8 = call i32 @function_85e0(i32 %v0_c4b4, i32* %v5_c4b8, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_c4c0 = urem i32 %v6_c4b8, 256
  store i32 %v1_c4c0, i32* %ip.global-to-local, align 4
  %v0_c4c4 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c4d0 = load i32, i32* @r4, align 4
  %v5_c4d4 = trunc i32 %v6_c4b8 to i8
  %v6_c4d8 = inttoptr i32 %v0_c4c4 to i32*
  %v7_c4d8 = call i32 @function_85e0(i32 %v0_c4d0, i32* %v6_c4d8, i32 5, i32 0, i32 %v6_c4b8)
  %v1_c4e4 = urem i32 %v7_c4d8, 256
  store i32 %v1_c4e4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c4f0 = load i32, i32* @r4, align 4
  %v0_c4f4 = load i32, i32* @r5, align 4
  %v5_c4fc = inttoptr i32 %v0_c4f4 to i32*
  %v6_c4fc = call i32 @function_85e0(i32 %v0_c4f0, i32* %v5_c4fc, i32 6, i32 65535, i32 %v1_c4e4)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c50c = load i32, i32* @r5, align 4
  store i32 %v6_c4fc, i32* @r6, align 4
  %v0_c514 = load i32, i32* @r4, align 4
  %v5_c518 = inttoptr i32 %v0_c50c to i32*
  %v6_c518 = call i32 @function_85e0(i32 %v0_c514, i32* %v5_c518, i32 7, i32 27015, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_c518, i32* @r4, align 4
  %v1_c524 = call i32 @function_10e30(i32 25)
  %v3_c530 = call i32 @function_10d4c(i32 25, i32* nonnull %stack_var_-44)
  store i32 %v3_c530, i32* %r8.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_c544 = call i32 @function_1270c(i32 2, i32 3, i32 17)
  %v7_c548 = icmp eq i32 %v3_c544, -1
  store i1 %v7_c548, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c544, i32* %fp.global-to-local, align 4
  br i1 %v7_c548, label %dec_label_pc_c8fc, label %dec_label_pc_c554

dec_label_pc_c554:                                ; preds = %dec_label_pc_c444
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c55c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c55c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c570 = call i32 @function_126dc(i32 %v3_c544, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_c574 = icmp eq i32 %v6_c570, -1
  store i1 %v7_c574, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c574, label %dec_label_pc_c8f4, label %dec_label_pc_c57c

dec_label_pc_c57c:                                ; preds = %dec_label_pc_c554
  %v0_c57c = load i32, i32* @r4, align 4
  %v3_c57c = mul i32 %v0_c57c, 65536
  store i32 %v3_c57c, i32* @lr, align 4
  %v0_c580 = load i32, i32* @r7, align 4
  %v0_c584 = load i32, i32* @r6, align 4
  %v3_c584 = mul i32 %v0_c584, 65536
  store i32 %v3_c584, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_c58c = urem i32 %v0_c580, 65536
  %v3_c590 = urem i32 %v0_c584, 65536
  store i32 %v3_c590, i32* %r2.global-to-local, align 4
  %v3_c594 = urem i32 %v0_c57c, 65536
  store i32 %v3_c594, i32* %r3.global-to-local, align 4
  %v0_c598 = load i32, i32* %sb.global-to-local, align 4
  %v2_c598 = icmp eq i32 %v0_c598, 0
  store i1 %v2_c598, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp50 = icmp slt i32 %v0_c598, 1
  br i1 %tmp50, label %dec_label_pc_c71c, label %dec_label_pc_c5b0

dec_label_pc_c5b0:                                ; preds = %dec_label_pc_c57c
  %v1_c5b4 = urem i32 %v0_c57c, 256
  %v1_c5b8 = urem i32 %v0_c584, 256
  %v1_c5bc = urem i32 %v0_c580, 256
  %v3_c5c0 = mul nuw nsw i32 %v1_c5b8, 256
  %v3_c5c4 = mul nuw nsw i32 %v1_c5b4, 256
  %tmp51 = udiv i32 %v0_c580, 256
  %v3_c5c8 = urem i32 %tmp51, 256
  %v4_c5cc = mul nuw nsw i32 %v1_c5bc, 256
  %v5_c5cc = or i32 %v4_c5cc, %v3_c5c8
  store i32 %v5_c5cc, i32* @r7, align 4
  %tmp52 = udiv i32 %v0_c57c, 256
  %v4_c5d0 = urem i32 %tmp52, 256
  %v5_c5d0 = or i32 %v4_c5d0, %v3_c5c4
  store i32 %v5_c5d0, i32* @r5, align 4
  %tmp53 = udiv i32 %v0_c584, 256
  %v4_c5d4 = urem i32 %tmp53, 256
  %v5_c5d4 = or i32 %v4_c5d4, %v3_c5c0
  store i32 %v5_c5d4, i32* @r6, align 4
  store i32 %v1_c5b8, i32* %r2.global-to-local, align 4
  store i32 %v1_c5b4, i32* %r3.global-to-local, align 4
  %v2_c650 = icmp eq i32 %v1_c4e4, 0
  %sext = mul i32 %v0_c580, 16777216
  %v4_c670 = sdiv i32 %sext, 16777216
  %sext6 = mul i32 %v0_c584, 16777216
  %v4_c6cc = sdiv i32 %sext6, 16777216
  %sext7 = mul i32 %v0_c57c, 16777216
  %v4_c6ec = sdiv i32 %sext7, 16777216
  br label %dec_label_pc_c5f0

dec_label_pc_c5f0:                                ; preds = %bb57, %dec_label_pc_c5b0
  %v2_c5f8 = call i32 @function_129f8(i32 128, i32 1)
  store i32 %v2_c464, i32* %r2.global-to-local, align 4
  %v3_c600 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c600, i32* %r3.global-to-local, align 4
  %v2_c604 = load i32, i32* @r4, align 4
  %v5_c604 = mul i32 %v2_c604, 4
  %v6_c604 = add i32 %v5_c604, %v2_c464
  %v7_c604 = inttoptr i32 %v6_c604 to i32*
  store i32 %v2_c5f8, i32* %v7_c604, align 4
  %v0_c608 = load i32, i32* %r2.global-to-local, align 4
  %v1_c608 = load i32, i32* %r3.global-to-local, align 4
  %v4_c608 = mul i32 %v1_c608, 4
  %v5_c608 = add i32 %v4_c608, %v0_c608
  %v6_c608 = inttoptr i32 %v5_c608 to i32*
  %v7_c608 = load i32, i32* %v6_c608, align 4
  store i32 %v7_c608, i32* @lr, align 4
  %v1_c60c = inttoptr i32 %v7_c608 to i8*
  %v2_c60c = load i8, i8* %v1_c60c, align 1
  %tmp = urem i8 %v2_c60c, 16
  %v1_c610 = zext i8 %tmp to i32
  %v1_c614 = or i32 %v1_c610, 64
  store i32 %v1_c614, i32* %r3.global-to-local, align 4
  %v1_c618 = trunc i32 %v1_c614 to i8
  store i8 %v1_c618, i8* %v1_c60c, align 1
  %v0_c61c = load i32, i32* @lr, align 4
  %v1_c61c = inttoptr i32 %v0_c61c to i8*
  %v2_c61c = load i8, i8* %v1_c61c, align 1
  %v1_c620 = and i8 %v2_c61c, -16
  %v1_c624 = or i8 %v1_c620, 5
  store i8 %v1_c624, i8* %v1_c61c, align 1
  %v2_c630 = load i32, i32* @lr, align 4
  %v3_c630 = add i32 %v2_c630, 1
  %v4_c630 = inttoptr i32 %v3_c630 to i8*
  store i8 %v5_c49c, i8* %v4_c630, align 1
  %v3_c634 = load i32, i32* %stack_var_-44, align 4
  %v1_c638 = add i32 %v3_c634, 32
  %tmp54 = mul i32 %v1_c638, 256
  %v1_c644 = and i32 %tmp54, 65280
  %tmp55 = udiv i32 %v1_c638, 256
  %v4_c648 = urem i32 %tmp55, 256
  %v5_c648 = or i32 %v4_c648, %v1_c644
  store i32 %v5_c648, i32* %r2.global-to-local, align 4
  store i1 %v2_c650, i1* %cpsr_z.global-to-local, align 1
  store i32 %v6_c4b8, i32* %r3.global-to-local, align 4
  %v2_c658 = load i32, i32* @lr, align 4
  %v3_c658 = add i32 %v2_c658, 8
  %v4_c658 = inttoptr i32 %v3_c658 to i8*
  store i8 %v5_c4d4, i8* %v4_c658, align 1
  %v0_c65c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c65c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c5f0
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c660 = load i32, i32* @lr, align 4
  %v4_c660 = add i32 %v3_c660, 6
  %v5_c660 = inttoptr i32 %v4_c660 to i8*
  store i8 64, i8* %v5_c660, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c5f0, %bb
  %v0_c664 = load i32, i32* %r2.global-to-local, align 4
  %v1_c664 = trunc i32 %v0_c664 to i8
  %v2_c664 = load i32, i32* @lr, align 4
  %v3_c664 = add i32 %v2_c664, 2
  %v4_c664 = inttoptr i32 %v3_c664 to i8*
  store i8 %v1_c664, i8* %v4_c664, align 1
  %v0_c668 = load i32, i32* %r2.global-to-local, align 4
  %v3_c668 = sdiv i32 %v0_c668, 256
  store i32 %v3_c668, i32* %ip.global-to-local, align 4
  store i32 %v4_c670, i32* %r2.global-to-local, align 4
  %v2_c674 = load i32, i32* @lr, align 4
  %v3_c674 = add i32 %v2_c674, 9
  %v4_c674 = inttoptr i32 %v3_c674 to i8*
  store i8 17, i8* %v4_c674, align 1
  store i32 ptrtoint (i32* @global_var_1d234.50 to i32), i32* %r3.global-to-local, align 4
  %v0_c67c = load i32, i32* %r2.global-to-local, align 4
  %v1_c67c = trunc i32 %v0_c67c to i8
  %v2_c67c = load i32, i32* @lr, align 4
  %v3_c67c = add i32 %v2_c67c, 5
  %v4_c67c = inttoptr i32 %v3_c67c to i8*
  store i8 %v1_c67c, i8* %v4_c67c, align 1
  %v0_c680 = load i32, i32* %ip.global-to-local, align 4
  %v1_c680 = trunc i32 %v0_c680 to i8
  %v2_c680 = load i32, i32* @lr, align 4
  %v3_c680 = add i32 %v2_c680, 3
  %v4_c680 = inttoptr i32 %v3_c680 to i8*
  store i8 %v1_c680, i8* %v4_c680, align 1
  %v0_c684 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c684, label %.thread8, label %bb56

.thread8:                                         ; preds = %.thread
  %v3_c6889 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c6889, i32* %ip.global-to-local, align 4
  br label %bb57

bb56:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c688 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c688, i32* %ip.global-to-local, align 4
  %v3_c68c = load i32, i32* @lr, align 4
  %v4_c68c = add i32 %v3_c68c, 7
  %v5_c68c = inttoptr i32 %v4_c68c to i8*
  store i8 0, i8* %v5_c68c, align 1
  %v0_c694.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %bb56
  %v0_c694 = phi i32 [ %v3_c6889, %.thread8 ], [ %v0_c694.pre, %bb56 ]
  %v2_c690 = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_c690, i32* %r2.global-to-local, align 4
  %v3_c694 = mul i32 %v0_c694, 32
  store i32 %v3_c694, i32* %r3.global-to-local, align 4
  %v1_c698 = load i32, i32* @lr, align 4
  %v2_c698 = add i32 %v1_c698, 12
  %v3_c698 = inttoptr i32 %v2_c698 to i32*
  store i32 %v2_c690, i32* %v3_c698, align 4
  %v0_c69c = load i32, i32* %r3.global-to-local, align 4
  %v1_c69c = load i32, i32* %ip.global-to-local, align 4
  %tmp60 = mul i32 %v1_c69c, -8
  %v5_c69c = add i32 %v0_c69c, %tmp60
  %v1_c6a0 = load i32, i32* @sl, align 4
  %v2_c6a0 = add i32 %v5_c69c, %v1_c6a0
  store i32 %v2_c6a0, i32* %r3.global-to-local, align 4
  %v1_c6a4 = add i32 %v2_c6a0, 16
  %v2_c6a4 = inttoptr i32 %v1_c6a4 to i32*
  %v3_c6a4 = load i32, i32* %v2_c6a4, align 4
  %v1_c6a8 = load i32, i32* @lr, align 4
  %v2_c6a8 = add i32 %v1_c6a8, 16
  %v3_c6a8 = inttoptr i32 %v2_c6a8 to i32*
  store i32 %v3_c6a4, i32* %v3_c6a8, align 4
  %v3_c6ac = load i32, i32* %stack_var_-44, align 4
  %v1_c6b0 = add i32 %v3_c6ac, 12
  %tmp58 = mul i32 %v1_c6b0, 256
  %v1_c6c0 = and i32 %tmp58, 65280
  %tmp59 = udiv i32 %v1_c6b0, 256
  %v4_c6c4 = urem i32 %tmp59, 256
  %v5_c6c4 = or i32 %v4_c6c4, %v1_c6c0
  store i32 %v5_c6c4, i32* %ip.global-to-local, align 4
  %v1_c6c8 = load i32, i32* @lr, align 4
  %v2_c6c8 = add i32 %v1_c6c8, 28
  %v3_c6c8 = inttoptr i32 %v2_c6c8 to i32*
  store i32 -1, i32* %v3_c6c8, align 4
  store i32 %v4_c6cc, i32* %r2.global-to-local, align 4
  %v0_c6d0 = load i32, i32* @lr, align 4
  %v1_c6d0 = add i32 %v0_c6d0, 20
  store i32 %v1_c6d0, i32* %r4.global-to-local, align 4
  %v0_c6d4 = load i32, i32* %ip.global-to-local, align 4
  %v3_c6d4 = sdiv i32 %v0_c6d4, 256
  store i32 %v3_c6d4, i32* %r3.global-to-local, align 4
  %v0_c6d8 = load i32, i32* @r7, align 4
  %v1_c6d8 = trunc i32 %v0_c6d8 to i8
  %v3_c6d8 = add i32 %v0_c6d0, 4
  %v4_c6d8 = inttoptr i32 %v3_c6d8 to i8*
  store i8 %v1_c6d8, i8* %v4_c6d8, align 1
  %v0_c6dc = load i32, i32* @r6, align 4
  %v1_c6dc = trunc i32 %v0_c6dc to i8
  %v2_c6dc = load i32, i32* @lr, align 4
  %v3_c6dc = add i32 %v2_c6dc, 20
  %v4_c6dc = inttoptr i32 %v3_c6dc to i8*
  store i8 %v1_c6dc, i8* %v4_c6dc, align 1
  %v0_c6e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c6e0 = trunc i32 %v0_c6e0 to i8
  %v2_c6e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6e0 = add i32 %v2_c6e0, 5
  %v4_c6e0 = inttoptr i32 %v3_c6e0 to i8*
  store i8 %v1_c6e0, i8* %v4_c6e0, align 1
  %v0_c6e4 = load i32, i32* @r5, align 4
  %v1_c6e4 = trunc i32 %v0_c6e4 to i8
  %v2_c6e4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6e4 = add i32 %v2_c6e4, 2
  %v4_c6e4 = inttoptr i32 %v3_c6e4 to i8*
  store i8 %v1_c6e4, i8* %v4_c6e4, align 1
  %v0_c6e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c6e8 = trunc i32 %v0_c6e8 to i8
  %v2_c6e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6e8 = add i32 %v2_c6e8, 1
  %v4_c6e8 = inttoptr i32 %v3_c6e8 to i8*
  store i8 %v1_c6e8, i8* %v4_c6e8, align 1
  store i32 %v4_c6ec, i32* %r3.global-to-local, align 4
  %v0_c6f0 = load i32, i32* %ip.global-to-local, align 4
  %v1_c6f0 = trunc i32 %v0_c6f0 to i8
  %v2_c6f0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6f0 = add i32 %v2_c6f0, 4
  %v4_c6f0 = inttoptr i32 %v3_c6f0 to i8*
  store i8 %v1_c6f0, i8* %v4_c6f0, align 1
  %v0_c6f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c6f4 = trunc i32 %v0_c6f4 to i8
  %v2_c6f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6f4 = add i32 %v2_c6f4, 3
  %v4_c6f4 = inttoptr i32 %v3_c6f4 to i8*
  store i8 %v1_c6f4, i8* %v4_c6f4, align 1
  %v0_c6f8 = load i32, i32* %r8.global-to-local, align 4
  %v0_c6fc = load i32, i32* @lr, align 4
  %v1_c6fc = add i32 %v0_c6fc, 32
  %v3_c700 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c700, i32* %r2.global-to-local, align 4
  %v3_c704 = call i32 @function_11574(i32 %v1_c6fc, i32 %v0_c6f8, i32 %v3_c700)
  %v3_c708 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c708, i32* %r3.global-to-local, align 4
  %v1_c70c = add i32 %v3_c708, 1
  store i32 %v1_c70c, i32* @r4, align 4
  %v1_c710 = load i32, i32* %sb.global-to-local, align 4
  %v9_c710 = icmp eq i32 %v1_c70c, %v1_c710
  store i1 %v9_c710, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c70c, i32* %stack_var_-40, align 4
  %v5_c718 = icmp slt i32 %v1_c70c, %v1_c710
  br i1 %v5_c718, label %dec_label_pc_c5f0, label %dec_label_pc_c71c

dec_label_pc_c71c:                                ; preds = %bb57, %dec_label_pc_c57c
  %v0_c71c = phi i32 [ %v0_c598, %dec_label_pc_c57c ], [ %v1_c710, %bb57 ]
  %v2_c71c = icmp eq i32 %v0_c71c, 0
  store i1 %v2_c71c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c764 = icmp eq i32 %v3_c58c, 65535
  br label %dec_label_pc_c724.outer

dec_label_pc_c724.outer:                          ; preds = %dec_label_pc_c834, %dec_label_pc_c71c
  %v1_c724.ph.in = phi i32 [ %v1_c828, %dec_label_pc_c834 ], [ %v0_c71c, %dec_label_pc_c71c ]
  %v0_c724.ph = phi i1 [ %v2_c834, %dec_label_pc_c834 ], [ %v2_c71c, %dec_label_pc_c71c ]
  %v1_c724.ph = icmp slt i32 %v1_c724.ph.in, 0
  %v4_c724 = or i1 %v1_c724.ph, %v0_c724.ph
  br label %dec_label_pc_c724

dec_label_pc_c724:                                ; preds = %dec_label_pc_c724.outer, %dec_label_pc_c724
  br i1 %v4_c724, label %dec_label_pc_c724, label %dec_label_pc_c728

dec_label_pc_c728:                                ; preds = %dec_label_pc_c724
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_c734

dec_label_pc_c734:                                ; preds = %dec_label_pc_c784, %dec_label_pc_c728
  %v1_c748 = phi i32 [ %v1_c824, %dec_label_pc_c784 ], [ 0, %dec_label_pc_c728 ]
  %v5_c738 = mul i32 %v1_c748, 24
  %v1_c73c = load i32, i32* @sl, align 4
  %v2_c73c = add i32 %v1_c73c, %v5_c738
  store i32 %v2_c73c, i32* %r3.global-to-local, align 4
  %v1_c744 = add i32 %v2_c73c, 20
  %v2_c744 = inttoptr i32 %v1_c744 to i8*
  %v3_c744 = load i8, i8* %v2_c744, align 1
  %v4_c744 = zext i8 %v3_c744 to i32
  store i32 %v4_c744, i32* %r2.global-to-local, align 4
  %v4_c748 = mul i32 %v1_c748, 4
  %v5_c748 = add i32 %v4_c748, %v2_c464
  %v6_c748 = inttoptr i32 %v5_c748 to i32*
  %v7_c748 = load i32, i32* %v6_c748, align 4
  store i32 %v7_c748, i32* @r5, align 4
  %v7_c750 = icmp eq i8 %v3_c744, 31
  store i1 %v7_c750, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_c758 = add i32 %v7_c748, 20
  store i32 %v1_c758, i32* @r6, align 4
  %tmp61 = icmp ult i8 %v3_c744, 32
  br i1 %tmp61, label %dec_label_pc_c840, label %dec_label_pc_c760

dec_label_pc_c760:                                ; preds = %dec_label_pc_c734
  store i32 %v3_c58c, i32* %r2.global-to-local, align 4
  store i1 %v3_c764, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c764, label %dec_label_pc_c8a8, label %dec_label_pc_c76c

dec_label_pc_c76c:                                ; preds = %dec_label_pc_c840.dec_label_pc_c76c_crit_edge, %dec_label_pc_c760
  %v1_c770 = phi i32 [ %v1_c770.pre, %dec_label_pc_c840.dec_label_pc_c76c_crit_edge ], [ 65535, %dec_label_pc_c760 ]
  store i32 %v3_c590, i32* %r3.global-to-local, align 4
  %v9_c770 = icmp eq i32 %v3_c590, %v1_c770
  store i1 %v9_c770, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c770, label %dec_label_pc_c8c4, label %dec_label_pc_c778

dec_label_pc_c778:                                ; preds = %dec_label_pc_c8a8.dec_label_pc_c778_crit_edge, %dec_label_pc_c76c
  %v1_c77c = phi i32 [ %v1_c77c.pre, %dec_label_pc_c8a8.dec_label_pc_c778_crit_edge ], [ %v1_c770, %dec_label_pc_c76c ]
  %v9_c77c = icmp eq i32 %v3_c594, %v1_c77c
  store i1 %v9_c77c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c77c, label %dec_label_pc_c8e0, label %dec_label_pc_c784

dec_label_pc_c784:                                ; preds = %dec_label_pc_c8c4, %dec_label_pc_c778, %dec_label_pc_c8e0
  %v0_c788 = load i32, i32* %r8.global-to-local, align 4
  %v1_c788 = trunc i32 %v0_c788 to i8
  %v2_c788 = load i32, i32* @r5, align 4
  %v3_c788 = add i32 %v2_c788, 10
  %v4_c788 = inttoptr i32 %v3_c788 to i8*
  store i8 %v1_c788, i8* %v4_c788, align 1
  %v0_c78c = load i32, i32* %r8.global-to-local, align 4
  %v1_c78c = trunc i32 %v0_c78c to i8
  %v2_c78c = load i32, i32* @r5, align 4
  %v3_c78c = add i32 %v2_c78c, 11
  %v4_c78c = inttoptr i32 %v3_c78c to i8*
  store i8 %v1_c78c, i8* %v4_c78c, align 1
  %v0_c790 = load i32, i32* @r5, align 4
  store i32 %v0_c790, i32* @r0, align 4
  %v2_c794 = call i32 @function_d0b8(i32 %v0_c790, i32 20)
  %v3_c794 = trunc i32 %v2_c794 to i8
  %v4_c798 = sdiv i32 %v2_c794, 256
  store i32 %v4_c798, i32* %r3.global-to-local, align 4
  %v1_c79c = trunc i32 %v4_c798 to i8
  %v2_c79c = load i32, i32* @r5, align 4
  %v3_c79c = add i32 %v2_c79c, 11
  %v4_c79c = inttoptr i32 %v3_c79c to i8*
  store i8 %v1_c79c, i8* %v4_c79c, align 1
  %v3_c7a0 = load i32, i32* @r5, align 4
  %v4_c7a0 = add i32 %v3_c7a0, 10
  %v5_c7a0 = inttoptr i32 %v4_c7a0 to i8*
  store i8 %v3_c794, i8* %v5_c7a0, align 1
  %v0_c7a4 = load i32, i32* %r8.global-to-local, align 4
  %v1_c7a4 = trunc i32 %v0_c7a4 to i8
  %v2_c7a4 = load i32, i32* @r6, align 4
  %v3_c7a4 = add i32 %v2_c7a4, 6
  %v4_c7a4 = inttoptr i32 %v3_c7a4 to i8*
  store i8 %v1_c7a4, i8* %v4_c7a4, align 1
  %v0_c7a8 = load i32, i32* %r8.global-to-local, align 4
  %v1_c7a8 = trunc i32 %v0_c7a8 to i8
  %v2_c7a8 = load i32, i32* @r6, align 4
  %v3_c7a8 = add i32 %v2_c7a8, 7
  %v4_c7a8 = inttoptr i32 %v3_c7a8 to i8*
  store i8 %v1_c7a8, i8* %v4_c7a8, align 1
  %v0_c7ac = load i32, i32* @r5, align 4
  %v1_c7ac = add i32 %v0_c7ac, 24
  %v2_c7ac = inttoptr i32 %v1_c7ac to i8*
  %v3_c7ac = load i8, i8* %v2_c7ac, align 1
  %v4_c7ac = zext i8 %v3_c7ac to i32
  store i32 %v4_c7ac, i32* %r3.global-to-local, align 4
  %v1_c7b0 = add i32 %v0_c7ac, 25
  %v2_c7b0 = inttoptr i32 %v1_c7b0 to i8*
  %v3_c7b0 = load i8, i8* %v2_c7b0, align 1
  %v4_c7b0 = zext i8 %v3_c7b0 to i32
  %v4_c7b4 = mul nuw nsw i32 %v4_c7b0, 256
  %v5_c7b4 = or i32 %v4_c7b4, %v4_c7ac
  store i32 %v5_c7b4, i32* %r2.global-to-local, align 4
  %v3_c7b8 = load i32, i32* %stack_var_-44, align 4
  %v0_c7bc = load i32, i32* @r6, align 4
  store i32 %v0_c7bc, i32* @r1, align 4
  %v1_c7c0 = add i32 %v3_c7b8, 12
  store i32 %v1_c7c0, i32* %r3.global-to-local, align 4
  %v4_c7c8 = call i32 @function_d114(i32 %v0_c7ac, i32 %v0_c7bc, i32 %v5_c7b4, i32 %v1_c7c0)
  %v5_c7c8 = trunc i32 %v4_c7c8 to i8
  %v4_c7cc24 = udiv i32 %v4_c7c8, 256
  %v1_c7d0 = trunc i32 %v4_c7cc24 to i8
  %v2_c7d0 = load i32, i32* @r6, align 4
  %v3_c7d0 = add i32 %v2_c7d0, 7
  %v4_c7d0 = inttoptr i32 %v3_c7d0 to i8*
  store i8 %v1_c7d0, i8* %v4_c7d0, align 1
  %v3_c7d4 = load i32, i32* @r6, align 4
  %v4_c7d4 = add i32 %v3_c7d4, 6
  %v5_c7d4 = inttoptr i32 %v4_c7d4 to i8*
  store i8 %v5_c7c8, i8* %v5_c7d4, align 1
  %v3_c7d8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c7d8, i32* %r3.global-to-local, align 4
  %v0_c7dc = load i32, i32* @r5, align 4
  %v1_c7dc = add i32 %v0_c7dc, 20
  %v2_c7dc = inttoptr i32 %v1_c7dc to i32*
  %v3_c7dc = load i32, i32* %v2_c7dc, align 4
  %v5_c7e4 = mul i32 %v3_c7d8, 24
  %v1_c7e8 = load i32, i32* @sl, align 4
  %v2_c7e8 = add i32 %v1_c7e8, %v5_c7e4
  store i32 %v2_c7e8, i32* %ip.global-to-local, align 4
  %v3_c7ec = udiv i32 %v3_c7dc, 65536
  store i32 %v3_c7ec, i32* %r2.global-to-local, align 4
  %v1_c7f0 = trunc i32 %v3_c7ec to i8
  %v3_c7f0 = add i32 %v2_c7e8, 2
  %v4_c7f0 = inttoptr i32 %v3_c7f0 to i8*
  store i8 %v1_c7f0, i8* %v4_c7f0, align 1
  %v0_c7f4 = load i32, i32* %r2.global-to-local, align 4
  %v3_c7f425 = udiv i32 %v0_c7f4, 256
  %v3_c7f8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c7f8, i32* %r2.global-to-local, align 4
  %v1_c7fc = trunc i32 %v3_c7f425 to i8
  %v2_c7fc = load i32, i32* %ip.global-to-local, align 4
  %v3_c7fc = add i32 %v2_c7fc, 3
  %v4_c7fc = inttoptr i32 %v3_c7fc to i8*
  store i8 %v1_c7fc, i8* %v4_c7fc, align 1
  %v0_c800 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c808 = load i32, i32* %r2.global-to-local, align 4
  %v1_c808 = add i32 %v0_c808, 32
  store i32 %v1_c808, i32* %r2.global-to-local, align 4
  %v0_c80c = load i32, i32* %fp.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c814 = load i32, i32* %ip.global-to-local, align 4
  %v6_c81c = inttoptr i32 %v0_c800 to i32*
  %v7_c81c = call i32 @function_126a8(i32 %v0_c80c, i32* %v6_c81c, i32 %v1_c808, i32 16384, i32 %v0_c814, i32 16)
  %v3_c820 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c820, i32* %r3.global-to-local, align 4
  %v1_c824 = add i32 %v3_c820, 1
  %v1_c828 = load i32, i32* %sb.global-to-local, align 4
  %v9_c828 = icmp eq i32 %v1_c824, %v1_c828
  store i1 %v9_c828, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c824, i32* %stack_var_-40, align 4
  %v5_c830 = icmp slt i32 %v1_c824, %v1_c828
  br i1 %v5_c830, label %dec_label_pc_c734, label %dec_label_pc_c834

dec_label_pc_c834:                                ; preds = %dec_label_pc_c784
  %v2_c834 = icmp eq i32 %v1_c828, 0
  store i1 %v2_c834, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_c724.outer

dec_label_pc_c840:                                ; preds = %dec_label_pc_c734
  %v1_c840 = add i32 %v2_c73c, 16
  %v2_c840 = inttoptr i32 %v1_c840 to i32*
  %v3_c840 = load i32, i32* %v2_c840, align 4
  store i32 %v3_c840, i32* @r4, align 4
  %v0_c844 = call i32 @function_eb90()
  %v3_c848 = load i32, i32* %stack_var_-40, align 4
  %v5_c850 = mul i32 %v3_c848, 24
  %v0_c854 = load i32, i32* @r4, align 4
  %v1_c858 = and i32 %v0_c854, 65280
  store i32 %v1_c858, i32* %r3.global-to-local, align 4
  %v1_c854 = udiv i32 %v0_c854, 256
  %v3_c85c = and i32 %v1_c854, 65280
  store i32 %v3_c85c, i32* %r2.global-to-local, align 4
  %v1_c860 = load i32, i32* @sl, align 4
  %v2_c860 = add i32 %v1_c860, %v5_c850
  store i32 %v2_c860, i32* %ip.global-to-local, align 4
  %v1_c86c = add i32 %v2_c860, 20
  %v2_c86c = inttoptr i32 %v1_c86c to i8*
  %v3_c86c = load i8, i8* %v2_c86c, align 1
  %v4_c86c = zext i8 %v3_c86c to i32
  %v2_c874 = call i32 @llvm.bswap.i32(i32 %v0_c854)
  %v7_c878 = lshr i32 %v0_c844, %v4_c86c
  %v8_c878 = add i32 %v7_c878, %v2_c874
  store i32 %v3_c58c, i32* %r2.global-to-local, align 4
  %v2_c898 = call i32 @llvm.bswap.i32(i32 %v8_c878)
  store i32 %v2_c898, i32* %r3.global-to-local, align 4
  %v1_c89c = load i32, i32* %r7.global-to-local, align 4
  %v9_c89c = icmp eq i32 %v3_c58c, %v1_c89c
  store i1 %v9_c89c, i1* %cpsr_z.global-to-local, align 1
  %v1_c8a0 = load i32, i32* @r5, align 4
  %v2_c8a0 = add i32 %v1_c8a0, 16
  %v3_c8a0 = inttoptr i32 %v2_c8a0 to i32*
  store i32 %v2_c898, i32* %v3_c8a0, align 4
  br i1 %v9_c89c, label %dec_label_pc_c8a8, label %dec_label_pc_c840.dec_label_pc_c76c_crit_edge

dec_label_pc_c840.dec_label_pc_c76c_crit_edge:    ; preds = %dec_label_pc_c840
  %v1_c770.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_c76c

dec_label_pc_c8a8:                                ; preds = %dec_label_pc_c840, %dec_label_pc_c760
  %v0_c8a8 = call i32 @function_eb90()
  %v1_c8a8 = trunc i32 %v0_c8a8 to i8
  %v4_c8ac26 = udiv i32 %v0_c8a8, 256
  %v1_c8b0 = trunc i32 %v4_c8ac26 to i8
  %v2_c8b0 = load i32, i32* @r5, align 4
  %v3_c8b0 = add i32 %v2_c8b0, 5
  %v4_c8b0 = inttoptr i32 %v3_c8b0 to i8*
  store i8 %v1_c8b0, i8* %v4_c8b0, align 1
  store i32 %v3_c590, i32* %r3.global-to-local, align 4
  %v1_c8b8 = load i32, i32* %r7.global-to-local, align 4
  %v9_c8b8 = icmp eq i32 %v3_c590, %v1_c8b8
  store i1 %v9_c8b8, i1* %cpsr_z.global-to-local, align 1
  %v3_c8bc = load i32, i32* @r5, align 4
  %v4_c8bc = add i32 %v3_c8bc, 4
  %v5_c8bc = inttoptr i32 %v4_c8bc to i8*
  store i8 %v1_c8a8, i8* %v5_c8bc, align 1
  %v0_c8c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c8c0, label %dec_label_pc_c8c4, label %dec_label_pc_c8a8.dec_label_pc_c778_crit_edge

dec_label_pc_c8a8.dec_label_pc_c778_crit_edge:    ; preds = %dec_label_pc_c8a8
  %v1_c77c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_c778

dec_label_pc_c8c4:                                ; preds = %dec_label_pc_c8a8, %dec_label_pc_c76c
  %v0_c8c4 = call i32 @function_eb90()
  %v1_c8c4 = trunc i32 %v0_c8c4 to i8
  %v4_c8cc = sdiv i32 %v0_c8c4, 256
  store i32 %v4_c8cc, i32* %r3.global-to-local, align 4
  %v1_c8d0 = load i32, i32* %r7.global-to-local, align 4
  %v9_c8d0 = icmp eq i32 %v3_c594, %v1_c8d0
  store i1 %v9_c8d0, i1* %cpsr_z.global-to-local, align 1
  %v3_c8d4 = load i32, i32* @r5, align 4
  %v4_c8d4 = add i32 %v3_c8d4, 20
  %v5_c8d4 = inttoptr i32 %v4_c8d4 to i8*
  store i8 %v1_c8c4, i8* %v5_c8d4, align 1
  %v0_c8d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c8d8 = trunc i32 %v0_c8d8 to i8
  %v2_c8d8 = load i32, i32* @r6, align 4
  %v3_c8d8 = add i32 %v2_c8d8, 1
  %v4_c8d8 = inttoptr i32 %v3_c8d8 to i8*
  store i8 %v1_c8d8, i8* %v4_c8d8, align 1
  %v0_c8dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c8dc, label %dec_label_pc_c8e0, label %dec_label_pc_c784

dec_label_pc_c8e0:                                ; preds = %dec_label_pc_c8c4, %dec_label_pc_c778
  %v0_c8e0 = call i32 @function_eb90()
  %v1_c8e0 = trunc i32 %v0_c8e0 to i8
  %v4_c8e4 = sdiv i32 %v0_c8e0, 256
  store i32 %v4_c8e4, i32* %r3.global-to-local, align 4
  %v1_c8e8 = trunc i32 %v4_c8e4 to i8
  %v2_c8e8 = load i32, i32* @r6, align 4
  %v3_c8e8 = add i32 %v2_c8e8, 3
  %v4_c8e8 = inttoptr i32 %v3_c8e8 to i8*
  store i8 %v1_c8e8, i8* %v4_c8e8, align 1
  %v3_c8ec = load i32, i32* @r6, align 4
  %v4_c8ec = add i32 %v3_c8ec, 2
  %v5_c8ec = inttoptr i32 %v4_c8ec to i8*
  store i8 %v1_c8e0, i8* %v5_c8ec, align 1
  br label %dec_label_pc_c784

dec_label_pc_c8f4:                                ; preds = %dec_label_pc_c554
  %v0_c8f4 = load i32, i32* %fp.global-to-local, align 4
  %v1_c8f8 = call i32 @function_11dfc(i32 %v0_c8f4)
  br label %dec_label_pc_c8fc

dec_label_pc_c8fc:                                ; preds = %dec_label_pc_c444, %dec_label_pc_c8f4
  %v29_c900 = phi i32 [ %v3_c544, %dec_label_pc_c444 ], [ %v1_c8f8, %dec_label_pc_c8f4 ]
  store i32 %v3_c444, i32* %r4.global-to-local, align 4
  store i32 %v12_c444, i32* %r7.global-to-local, align 4
  ret i32 %v29_c900

; uselistorder directives
  uselistorder i32 %v4_c8e4, { 1, 0 }
  uselistorder i32 %v2_c898, { 1, 0 }
  uselistorder i32 %v0_c854, { 1, 0, 2 }
  uselistorder i1 %v2_c834, { 1, 0 }
  uselistorder i32 %v1_c828, { 1, 2, 3, 0 }
  uselistorder i32 %v1_c824, { 2, 0, 3, 1 }
  uselistorder i32 %v3_c7ec, { 1, 0 }
  uselistorder i32 %v4_c798, { 1, 0 }
  uselistorder i1 %v3_c764, { 1, 0 }
  uselistorder i32 %v1_c70c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_c6b0, { 1, 0 }
  uselistorder i32 %v1_c638, { 1, 0 }
  uselistorder i32 %v1_c5b8, { 1, 0 }
  uselistorder i32 %v1_c5b4, { 1, 0 }
  uselistorder i32 %v0_c584, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_c57c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_c574, { 1, 0 }
  uselistorder i1 %v7_c548, { 1, 0 }
  uselistorder i32 %v3_c544, { 1, 2, 3, 0 }
  uselistorder i32 %v1_c4e4, { 1, 2, 0 }
  uselistorder i32 %v6_c4b8, { 2, 1, 3, 0 }
  uselistorder i32 %v6_c47c, { 1, 2, 0 }
  uselistorder i32 %v1_c448, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 1, 13, 12 }
  uselistorder i32* %r7.global-to-local, { 6, 2, 0, 3, 1, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 39, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 0, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %fp.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c8fc, { 1, 0 }
  uselistorder label %dec_label_pc_c784, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c724, { 1, 0 }
  uselistorder label %bb57, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c908(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c908:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_c908 = load i32, i32* @r4, align 4
  %v15_c908 = load i32, i32* @r8, align 4
  %v18_c908 = load i32, i32* @sb, align 4
  %v21_c908 = load i32, i32* @sl, align 4
  %v24_c908 = load i32, i32* @fp, align 4
  %v1_c914 = urem i32 %arg1, 256
  store i32 %v1_c914, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_c920 = urem i32 %arg3, 256
  store i32 %v1_c920, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_c92c = call i32 @function_129f8(i32 %v1_c914, i32 4)
  %v0_c930 = load i32, i32* @r5, align 4
  store i32 %v0_c930, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c93c = load i32, i32* @r4, align 4
  store i32 %v0_c93c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_c944 = inttoptr i32 %v0_c930 to i32*
  %v6_c944 = call i32 @function_85e0(i32 %v0_c93c, i32* %v5_c944, i32 2, i32 0, i32 %v2_c92c)
  %v1_c950 = urem i32 %v6_c944, 256
  store i32 %v1_c950, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c95c = load i32, i32* @r4, align 4
  store i32 %v0_c95c, i32* %r0.global-to-local, align 4
  %v0_c960 = load i32, i32* @r5, align 4
  store i32 %v0_c960, i32* %r1.global-to-local, align 4
  %v5_c964 = trunc i32 %v6_c944 to i8
  %v6_c968 = inttoptr i32 %v0_c960 to i32*
  %v7_c968 = call i32 @function_85e0(i32 %v0_c95c, i32* %v6_c968, i32 3, i32 65535, i32 %v6_c944)
  %v0_c96c = load i32, i32* @r5, align 4
  store i32 %v0_c96c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_c978 = load i32, i32* @r4, align 4
  store i32 %v0_c978, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_c980 = inttoptr i32 %v0_c96c to i32*
  %v6_c980 = call i32 @function_85e0(i32 %v0_c978, i32* %v5_c980, i32 4, i32 64, i32 %v7_c968)
  %v1_c988 = urem i32 %v6_c980, 256
  store i32 %v1_c988, i32* %ip.global-to-local, align 4
  %v0_c98c = load i32, i32* @r5, align 4
  store i32 %v0_c98c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c998 = load i32, i32* @r4, align 4
  store i32 %v0_c998, i32* %r0.global-to-local, align 4
  %sext35 = mul i32 %v6_c980, 16777216
  %v5_c9a0 = sdiv i32 %sext35, 16777216
  %v6_c9a0 = inttoptr i32 %v0_c98c to i32*
  %v7_c9a0 = call i32 @function_85e0(i32 %v0_c998, i32* %v6_c9a0, i32 5, i32 0, i32 %v5_c9a0)
  %v1_c9ac = urem i32 %v7_c9a0, 256
  store i32 %v1_c9ac, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c9b8 = load i32, i32* @r4, align 4
  store i32 %v0_c9b8, i32* %r0.global-to-local, align 4
  %v0_c9bc = load i32, i32* @r5, align 4
  store i32 %v0_c9bc, i32* %r1.global-to-local, align 4
  %v5_c9c4 = inttoptr i32 %v0_c9bc to i32*
  %v6_c9c4 = call i32 @function_85e0(i32 %v0_c9b8, i32* %v5_c9c4, i32 6, i32 65535, i32 %v1_c9ac)
  %v0_c9c8 = load i32, i32* @r5, align 4
  store i32 %v0_c9c8, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  store i32 %v6_c9c4, i32* %fp.global-to-local, align 4
  %v0_c9d8 = load i32, i32* @r4, align 4
  store i32 %v0_c9d8, i32* %r0.global-to-local, align 4
  %v5_c9dc = inttoptr i32 %v0_c9c8 to i32*
  %v6_c9dc = call i32 @function_85e0(i32 %v0_c9d8, i32* %v5_c9dc, i32 7, i32 53, i32 ptrtoint (i32* @0 to i32))
  %v0_c9e4 = load i32, i32* @r5, align 4
  store i32 %v0_c9e4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v6_c9dc, i32* %sb.global-to-local, align 4
  %v0_c9f4 = load i32, i32* @r4, align 4
  store i32 %v0_c9f4, i32* %r0.global-to-local, align 4
  %v5_c9f8 = inttoptr i32 %v0_c9e4 to i32*
  %v6_c9f8 = call i32 @function_85e0(i32 %v0_c9f4, i32* %v5_c9f8, i32 9, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_c9fc = load i32, i32* @r5, align 4
  store i32 %v0_c9fc, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 %v6_c9f8, i32* @sl, align 4
  %v0_ca0c = load i32, i32* @r4, align 4
  store i32 %v0_ca0c, i32* %r0.global-to-local, align 4
  %v5_ca10 = inttoptr i32 %v0_c9fc to i32*
  %v6_ca10 = call i32 @function_85e0(i32 %v0_ca0c, i32* %v5_ca10, i32 0, i32 12, i32 ptrtoint (i32* @0 to i32))
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ca1c = load i32, i32* @r5, align 4
  store i32 %v0_ca1c, i32* %r1.global-to-local, align 4
  store i32 %v6_ca10, i32* %r8.global-to-local, align 4
  %v0_ca24 = load i32, i32* @r4, align 4
  store i32 %v0_ca24, i32* %r0.global-to-local, align 4
  %v4_ca28 = inttoptr i32 %v0_ca1c to i32*
  %v5_ca28 = call i32 @function_81cc(i32 %v0_ca24, i32* %v4_ca28, i32 8, i32 0)
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_ca34 = call i32 @function_10e30(i32 26)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_ca40 = call i32 @function_10d4c(i32 26, i32* null)
  store i32 %v3_ca40, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_ca48 = inttoptr i32 %v3_ca40 to i8*
  %v3_ca48 = call i32 @function_11f28(i8* %v2_ca48, i32 0)
  store i32 %v3_ca48, i32* @r4, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_ca54 = call i32 @function_10d78(i32 26)
  store i32 %v1_ca54, i32* %r0.global-to-local, align 4
  %v0_ca58 = load i32, i32* @r4, align 4
  %v1_ca58 = icmp slt i32 %v0_ca58, 0
  %v2_ca58 = icmp eq i32 %v0_ca58, 0
  store i1 %v2_ca58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_ca58, label %dec_label_pc_d024, label %dec_label_pc_ca60

dec_label_pc_ca60:                                ; preds = %dec_label_pc_c908
  %v2_ca64 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_ca64, i32* @r6, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_ca64, i32* %r1.global-to-local, align 4
  store i32 %v0_ca58, i32* %r0.global-to-local, align 4
  %v4_ca74 = call i32 @function_11fc4(i32 %v0_ca58, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_ca74, i32* @r5, align 4
  %v0_ca7c = load i32, i32* @r4, align 4
  store i32 %v0_ca7c, i32* %r0.global-to-local, align 4
  %v1_ca80 = call i32 @function_11dfc(i32 %v0_ca7c)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_ca88 = call i32 @function_10e30(i32 27)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_ca94 = call i32 @function_10d4c(i32 27, i32* null)
  %v0_ca98 = load i32, i32* @r5, align 4
  store i32 %v0_ca98, i32* @r1, align 4
  store i32 %v3_ca94, i32* %r2.global-to-local, align 4
  store i32 %v2_ca64, i32* %r0.global-to-local, align 4
  %v3_caa4 = bitcast i32* %stack_var_-2120 to i8*
  %v4_caa4 = call i32 @function_1184c(i8* %v3_caa4, i32 %v0_ca98, i32 %v3_ca94)
  store i32 %v4_caa4, i32* @r4, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_cab0 = call i32 @function_10d78(i32 27)
  store i32 %v1_cab0, i32* %r0.global-to-local, align 4
  %v0_cab4 = load i32, i32* @r4, align 4
  %v7_cab4 = icmp eq i32 %v0_cab4, -1
  store i1 %v7_cab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cab4, label %dec_label_pc_d024, label %dec_label_pc_cabc

dec_label_pc_cabc:                                ; preds = %dec_label_pc_ca60
  %v0_cabc = load i32, i32* @r5, align 4
  %v9_cabc = icmp eq i32 %v0_cabc, %v0_cab4
  store i1 %v9_cabc, i1* %cpsr_z.global-to-local, align 1
  %v7_cac0 = icmp sgt i32 %v0_cabc, %v0_cab4
  br i1 %v7_cac0, label %dec_label_pc_cac4, label %dec_label_pc_d024

dec_label_pc_cac4:                                ; preds = %dec_label_pc_cabc
  store i32 %v0_cabc, i32* %r3.global-to-local, align 4
  store i32 %v0_cab4, i32* %r2.global-to-local, align 4
  %v0_cad4 = load i32, i32* @r6, align 4
  %v2_cad4 = add i32 %v0_cad4, %v0_cab4
  store i32 %v2_cad4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_cadc = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_cadc, i32* @r7, align 4
  %v1_cb0c = add i32 %v0_cabc, -1
  br label %dec_label_pc_cb04

dec_label_pc_cae8:                                ; preds = %dec_label_pc_cb2c, %bb138
  %v9_cae8 = icmp eq i32 %v0_caf4, %v1_cb0c
  store i1 %v9_cae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cae8, label %dec_label_pc_cb38, label %dec_label_pc_caf0

dec_label_pc_caf0:                                ; preds = %dec_label_pc_cb1c, %dec_label_pc_cae8, %bb
  %v0_cb2842 = phi i32 [ %v0_cb28, %dec_label_pc_cb1c ], [ %v0_cb2843, %dec_label_pc_cae8 ], [ %v0_cb28, %bb ]
  %v0_cb0838 = phi i32 [ 0, %dec_label_pc_cb1c ], [ %v0_cb0839, %dec_label_pc_cae8 ], [ 0, %bb ]
  store i32 %v0_cabc, i32* %r0.global-to-local, align 4
  %v1_caf4 = add i32 %v0_caf4, 1
  store i32 %v1_caf4, i32* %r2.global-to-local, align 4
  %v9_caf8 = icmp eq i32 %v0_cabc, %v1_caf4
  store i1 %v9_caf8, i1* %cpsr_z.global-to-local, align 1
  %v1_cafc = add i32 %v0_cafc, 1
  store i32 %v1_cafc, i32* @r7, align 4
  br i1 %v9_caf8, label %dec_label_pc_d024, label %dec_label_pc_cb04

dec_label_pc_cb04:                                ; preds = %dec_label_pc_caf0, %dec_label_pc_cac4
  %v0_cafc = phi i32 [ %v1_cafc, %dec_label_pc_caf0 ], [ %v2_cadc, %dec_label_pc_cac4 ]
  %v0_caf4 = phi i32 [ %v1_caf4, %dec_label_pc_caf0 ], [ %v0_cab4, %dec_label_pc_cac4 ]
  %v0_cb28 = phi i32 [ %v0_cb2842, %dec_label_pc_caf0 ], [ 0, %dec_label_pc_cac4 ]
  %v0_cb08 = phi i32 [ %v0_cb0838, %dec_label_pc_caf0 ], [ 0, %dec_label_pc_cac4 ]
  %v0_cb10 = phi i32 [ %v1_cb10, %dec_label_pc_caf0 ], [ %v2_cad4, %dec_label_pc_cac4 ]
  %v1_cb04 = inttoptr i32 %v0_cb10 to i8*
  %v2_cb04 = load i8, i8* %v1_cb04, align 1
  %v3_cb04 = zext i8 %v2_cb04 to i32
  store i32 %v3_cb04, i32* %r3.global-to-local, align 4
  %v2_cb08 = icmp eq i32 %v0_cb08, 0
  store i1 %v2_cb08, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cb0c, i32* %ip.global-to-local, align 4
  %v1_cb10 = add i32 %v0_cb10, 1
  store i32 %v1_cb10, i32* %r1.global-to-local, align 4
  %v1_cb14 = add nsw i32 %v3_cb04, -48
  store i32 %v1_cb14, i32* %r0.global-to-local, align 4
  br i1 %v2_cb08, label %dec_label_pc_cb1c, label %dec_label_pc_cb2c

dec_label_pc_cb1c:                                ; preds = %dec_label_pc_cb04
  %v7_cb1c = icmp eq i8 %v2_cb04, 9
  store i1 %v7_cb1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cb1c, label %dec_label_pc_caf0, label %bb

bb:                                               ; preds = %dec_label_pc_cb1c
  %v8_cb20 = icmp eq i8 %v2_cb04, 32
  store i1 %v8_cb20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_cb20, label %dec_label_pc_caf0, label %dec_label_pc_cb28

dec_label_pc_cb28:                                ; preds = %bb
  %v1_cb28 = add i32 %v0_cb28, 1
  store i32 %v1_cb28, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_cb2c

dec_label_pc_cb2c:                                ; preds = %dec_label_pc_cb04, %dec_label_pc_cb28
  %v0_cb2843 = phi i32 [ %v0_cb28, %dec_label_pc_cb04 ], [ %v1_cb28, %dec_label_pc_cb28 ]
  %v0_cb0839 = phi i32 [ %v0_cb08, %dec_label_pc_cb04 ], [ %v1_cb28, %dec_label_pc_cb28 ]
  %v7_cb2c = icmp eq i8 %v2_cb04, 46
  store i1 %v7_cb2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cb2c, label %dec_label_pc_cae8, label %bb138

bb138:                                            ; preds = %dec_label_pc_cb2c
  %v8_cb30 = icmp eq i32 %v1_cb14, 9
  store i1 %v8_cb30, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_cb14, 10
  br i1 %tmp, label %dec_label_pc_cae8, label %dec_label_pc_cb38

dec_label_pc_cb38:                                ; preds = %dec_label_pc_cae8, %bb138
  %v0_caf4.lcssa = phi i32 [ %v1_cb0c, %dec_label_pc_cae8 ], [ %v0_caf4, %bb138 ]
  %v2_cb3c = sub i32 %v0_caf4.lcssa, %v0_cab4
  store i32 %v2_cb3c, i32* %r2.global-to-local, align 4
  store i32 %v2_cad4, i32* %r1.global-to-local, align 4
  store i32 %v2_cadc, i32* %r0.global-to-local, align 4
  %v3_cb48 = call i32 @function_11574(i32 %v2_cadc, i32 %v2_cad4, i32 %v2_cb3c)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_cadc, i32* @r0, align 4
  %v2_cb58 = load i32, i32* @r7, align 4
  %v3_cb58 = inttoptr i32 %v2_cb58 to i8*
  store i8 0, i8* %v3_cb58, align 1
  %v1_cb5c = call i32 @function_124ec(i32 %v2_cadc)
  store i32 %v1_cb5c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cb64

dec_label_pc_cb6419:                              ; preds = %dec_label_pc_d024
  unreachable

dec_label_pc_cb64:                                ; preds = %dec_label_pc_d09c, %dec_label_pc_d08c, %dec_label_pc_d080, %dec_label_pc_d06c, %dec_label_pc_cb38
  %v29_d06874 = phi i32 [ %v1_d028, %dec_label_pc_d09c ], [ %v1_d028, %dec_label_pc_d08c ], [ %v1_d028, %dec_label_pc_d080 ], [ %v1_d028, %dec_label_pc_d06c ], [ %v1_cb5c, %dec_label_pc_cb38 ]
  %stack_var_-2176.0 = phi i32 [ 33686020, %dec_label_pc_d09c ], [ 104859200, %dec_label_pc_d08c ], [ 707416650, %dec_label_pc_d080 ], [ 134744072, %dec_label_pc_d06c ], [ %v1_cb5c, %dec_label_pc_cb38 ]
  store i32 %v5_ca28, i32* %ip.global-to-local, align 4
  %v2_cb68 = icmp eq i32 %v5_ca28, 0
  store i1 %v2_cb68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cb68, label %dec_label_pc_d060, label %dec_label_pc_cb70

dec_label_pc_cb70:                                ; preds = %dec_label_pc_cb64
  store i32 %v5_ca28, i32* %r0.global-to-local, align 4
  %v1_cb74 = inttoptr i32 %v5_ca28 to i8*
  %v2_cb74 = call i32 @function_114f8(i8* %v1_cb74)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_cb88 = call i32 @function_1270c(i32 2, i32 3, i32 17)
  store i32 %v3_cb88, i32* %r0.global-to-local, align 4
  %v7_cb8c = icmp eq i32 %v3_cb88, -1
  store i1 %v7_cb8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cb8c, label %dec_label_pc_d060, label %dec_label_pc_cb98

dec_label_pc_cb98:                                ; preds = %dec_label_pc_cb70
  store i32 1, i32* %stack_var_-40, align 4
  %v6_cba4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_cba4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_cbb8 = call i32 @function_126dc(i32 %v3_cb88, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_cbb8, i32* %r0.global-to-local, align 4
  %v7_cbbc = icmp eq i32 %v6_cbb8, -1
  store i1 %v7_cbbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cbbc, label %dec_label_pc_d058, label %dec_label_pc_cbc4

dec_label_pc_cbc4:                                ; preds = %dec_label_pc_cb98
  store i32 %v1_c914, i32* %r0.global-to-local, align 4
  %v3_cbcc = mul i32 %v7_c968, 65536
  store i32 %v3_cbcc, i32* %lr.global-to-local, align 4
  %v0_cbd0 = load i32, i32* @sl, align 4
  %v3_cbd0 = mul i32 %v0_cbd0, 65536
  store i32 %v3_cbd0, i32* %sl.global-to-local, align 4
  %v0_cbd4 = load i32, i32* %r8.global-to-local, align 4
  %v0_cbd8 = load i32, i32* %fp.global-to-local, align 4
  %v0_cbdc = load i32, i32* %sb.global-to-local, align 4
  %v3_cbdc = mul i32 %v0_cbdc, 65536
  store i32 %v3_cbdc, i32* %sb.global-to-local, align 4
  %v5_cbe0 = trunc i32 %v0_cbd4 to i8
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_cbe8 = urem i32 %v7_c968, 65536
  store i32 %v3_cbe8, i32* %r2.global-to-local, align 4
  %v3_cbec = urem i32 %v0_cbd8, 65536
  store i32 %v3_cbec, i32* %r3.global-to-local, align 4
  %v3_cbf0 = urem i32 %v0_cbdc, 65536
  store i32 %v3_cbf0, i32* %r4.global-to-local, align 4
  %v3_cbf4 = urem i32 %v0_cbd0, 65536
  store i32 %v3_cbf4, i32* %r8.global-to-local, align 4
  %v2_cbf8 = icmp eq i32 %v1_c914, 0
  store i1 %v2_cbf8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_cbf8, label %dec_label_pc_d048, label %dec_label_pc_cc1c

dec_label_pc_cc1c:                                ; preds = %dec_label_pc_cbc4
  %v4_cc20 = sext i8 %v5_cbe0 to i32
  %v2_cc24 = add i32 %v4_cc20, %v2_cb74
  store i32 %v2_cc24, i32* @fp, align 4
  %v3_cc28 = mul i32 %v2_cc24, 65536
  %v1_cc2c = add i32 %v3_cc28, 1769472
  store i32 %v1_cc2c, i32* @r6, align 4
  %v1_cc30 = add i32 %v3_cc28, 3080192
  %v1_cc44 = urem i32 %v0_cbd0, 256
  %v3_cc54 = udiv i32 %v1_cc2c, 256
  %v1_cc58 = urem i32 %v7_c968, 256
  %v1_cc5c = and i32 %v3_cc54, 65280
  %v1_cc60 = urem i32 %v0_cbdc, 256
  %v3_cc64 = mul nuw nsw i32 %v1_cc44, 256
  %v1_cc6c = urem i32 %v0_cbd8, 256
  %v3_cc70 = mul nuw nsw i32 %v1_cc60, 256
  %tmp139 = udiv i32 %v0_cbd0, 256
  %v4_cc74 = urem i32 %tmp139, 256
  %v5_cc74 = or i32 %v4_cc74, %v3_cc64
  store i32 %v5_cc74, i32* %r8.global-to-local, align 4
  %v4_cc78 = udiv i32 %v1_cc2c, 16777216
  %v5_cc78 = or i32 %v1_cc5c, %v4_cc78
  store i32 %v5_cc78, i32* %sl.global-to-local, align 4
  %tmp140 = udiv i32 %v0_cbd8, 256
  %v3_cc84 = urem i32 %tmp140, 256
  %v4_cc88 = sdiv i32 %v1_cc30, 16777216
  %tmp141 = udiv i32 %v7_c968, 256
  %v4_cc90 = mul nuw nsw i32 %v1_cc6c, 256
  %v5_cc90 = or i32 %v4_cc90, %v3_cc84
  store i32 %v5_cc90, i32* @r5, align 4
  %tmp142 = udiv i32 %v0_cbdc, 256
  %v4_cc94 = urem i32 %tmp142, 256
  %v5_cc94 = or i32 %v4_cc94, %v3_cc70
  store i32 %v5_cc94, i32* %sb.global-to-local, align 4
  store i32 %v1_cc58, i32* %r0.global-to-local, align 4
  %v1_cca0 = add i32 %v2_cb74, 1
  store i32 %v1_cca0, i32* @r7, align 4
  %v3_cca4 = ashr i32 %v1_cc30, 31
  store i32 %v3_cca4, i32* @lr, align 4
  store i32 %v1_cc6c, i32* %r1.global-to-local, align 4
  store i32 %v1_cc60, i32* %r2.global-to-local, align 4
  %v3_ccb075 = udiv i32 %v1_cc5c, 256
  store i32 %v3_ccb075, i32* %r3.global-to-local, align 4
  store i32 %v1_cc44, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext13 = mul i32 %tmp141, 16777216
  %v4_cd40 = sdiv i32 %sext13, 16777216
  %sext14 = mul i32 %v7_c968, 16777216
  %v4_cd44 = sdiv i32 %sext14, 16777216
  %sext15 = mul i32 %v1_cc2c, 256
  %v4_cd74 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_cbdc, 16777216
  %v4_cd78 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v0_cbd8, 16777216
  %v4_cd9c = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_cbd0, 16777216
  %v4_cda8 = sdiv i32 %sext18, 16777216
  %v1_cd24 = trunc i32 %v4_cc88 to i8
  %extract.t = trunc i32 %v3_cca4 to i8
  br label %dec_label_pc_ccd4

dec_label_pc_ccd4:                                ; preds = %dec_label_pc_ce3c, %dec_label_pc_cc1c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_ccdc = call i32 @function_129f8(i32 600, i32 1)
  store i32 %v2_ccdc, i32* %r0.global-to-local, align 4
  store i32 %v2_c92c, i32* %lr.global-to-local, align 4
  %v3_cce4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cce4, i32* %r3.global-to-local, align 4
  %v2_cce8 = load i32, i32* @r4, align 4
  %v5_cce8 = mul i32 %v2_cce8, 4
  %v6_cce8 = add i32 %v5_cce8, %v2_c92c
  %v7_cce8 = inttoptr i32 %v6_cce8 to i32*
  store i32 %v2_ccdc, i32* %v7_cce8, align 4
  %v0_ccec = load i32, i32* %lr.global-to-local, align 4
  %v1_ccec = load i32, i32* %r3.global-to-local, align 4
  %v4_ccec = mul i32 %v1_ccec, 4
  %v5_ccec = add i32 %v4_ccec, %v0_ccec
  %v6_ccec = inttoptr i32 %v5_ccec to i32*
  %v7_ccec = load i32, i32* %v6_ccec, align 4
  store i32 %v7_ccec, i32* %r1.global-to-local, align 4
  %v1_ccf0 = inttoptr i32 %v7_ccec to i8*
  %v2_ccf0 = load i8, i8* %v1_ccf0, align 1
  %tmp154 = urem i8 %v2_ccf0, 16
  %v1_ccf4 = zext i8 %tmp154 to i32
  %v1_ccf8 = or i32 %v1_ccf4, 64
  store i32 %v1_ccf8, i32* %r2.global-to-local, align 4
  %v1_ccfc = trunc i32 %v1_ccf8 to i8
  store i8 %v1_ccfc, i8* %v1_ccf0, align 1
  %v0_cd00 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd00 = inttoptr i32 %v0_cd00 to i8*
  %v2_cd00 = load i8, i8* %v1_cd00, align 1
  %v1_cd04 = and i8 %v2_cd00, -16
  %v1_cd08 = or i8 %v1_cd04, 5
  store i32 %v1_c9ac, i32* %r0.global-to-local, align 4
  store i8 %v1_cd08, i8* %v1_cd00, align 1
  store i32 %v6_c944, i32* %r2.global-to-local, align 4
  %v2_cd18 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd18 = add i32 %v2_cd18, 1
  %v4_cd18 = inttoptr i32 %v3_cd18 to i8*
  store i8 %v5_c964, i8* %v4_cd18, align 1
  store i32 %v4_cc88, i32* %r3.global-to-local, align 4
  %v0_cd20 = load i32, i32* %r0.global-to-local, align 4
  %v2_cd20 = icmp eq i32 %v0_cd20, 0
  store i1 %v2_cd20, i1* %cpsr_z.global-to-local, align 1
  %v2_cd24 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd24 = add i32 %v2_cd24, 2
  %v4_cd24 = inttoptr i32 %v3_cd24 to i8*
  store i8 %v1_cd24, i8* %v4_cd24, align 1
  store i32 %v3_cca4, i32* %r4.global-to-local, align 4
  store i32 %v5_c9a0, i32* %r0.global-to-local, align 4
  %v0_cd30 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cd30, label %.thread20, label %bb143

bb143:                                            ; preds = %dec_label_pc_ccd4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_cd34 = load i32, i32* %r1.global-to-local, align 4
  %v4_cd34 = add i32 %v3_cd34, 6
  %v5_cd34 = inttoptr i32 %v4_cd34 to i8*
  store i8 64, i8* %v5_cd34, align 1
  %v0_cd3c.pre = load i32, i32* %r4.global-to-local, align 4
  %extract.t76 = trunc i32 %v0_cd3c.pre to i8
  br label %.thread20

.thread20:                                        ; preds = %dec_label_pc_ccd4, %bb143
  %v0_cd3c.off0 = phi i8 [ %extract.t, %dec_label_pc_ccd4 ], [ %extract.t76, %bb143 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_cd3c = load i32, i32* %r1.global-to-local, align 4
  %v3_cd3c = add i32 %v2_cd3c, 3
  %v4_cd3c = inttoptr i32 %v3_cd3c to i8*
  store i8 %v0_cd3c.off0, i8* %v4_cd3c, align 1
  store i32 %v4_cd40, i32* %ip.global-to-local, align 4
  store i32 %v4_cd44, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d234.50 to i32), i32* %r4.global-to-local, align 4
  %v0_cd4c = load i32, i32* %r0.global-to-local, align 4
  %v1_cd4c = trunc i32 %v0_cd4c to i8
  %v2_cd4c = load i32, i32* %r1.global-to-local, align 4
  %v3_cd4c = add i32 %v2_cd4c, 8
  %v4_cd4c = inttoptr i32 %v3_cd4c to i8*
  store i8 %v1_cd4c, i8* %v4_cd4c, align 1
  %v0_cd50 = load i32, i32* %r3.global-to-local, align 4
  %v1_cd50 = trunc i32 %v0_cd50 to i8
  %v2_cd50 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd50 = add i32 %v2_cd50, 9
  %v4_cd50 = inttoptr i32 %v3_cd50 to i8*
  store i8 %v1_cd50, i8* %v4_cd50, align 1
  %v0_cd54 = load i32, i32* %lr.global-to-local, align 4
  %v1_cd54 = trunc i32 %v0_cd54 to i8
  %v2_cd54 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd54 = add i32 %v2_cd54, 5
  %v4_cd54 = inttoptr i32 %v3_cd54 to i8*
  store i8 %v1_cd54, i8* %v4_cd54, align 1
  %v0_cd58 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cd58, label %.thread21, label %bb144

.thread21:                                        ; preds = %.thread20
  %v2_cd5c22 = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_cd5c22, i32* %r3.global-to-local, align 4
  store i32 %v4_cc20, i32* %lr.global-to-local, align 4
  br label %bb145

bb144:                                            ; preds = %.thread20
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_cd5c = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_cd5c, i32* %r3.global-to-local, align 4
  store i32 %v4_cc20, i32* %lr.global-to-local, align 4
  %v3_cd64 = load i32, i32* %r1.global-to-local, align 4
  %v4_cd64 = add i32 %v3_cd64, 7
  %v5_cd64 = inttoptr i32 %v4_cd64 to i8*
  store i8 0, i8* %v5_cd64, align 1
  %v0_cd6c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_cd70.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb145

bb145:                                            ; preds = %.thread21, %bb144
  %v0_cd70 = phi i32 [ %v2_cd5c22, %.thread21 ], [ %v0_cd70.pre, %bb144 ]
  %v0_cd6c = phi i32 [ %v4_cc20, %.thread21 ], [ %v0_cd6c.pre, %bb144 ]
  %v0_cd68 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd68 = add i32 %v0_cd6c, 41
  %v2_cd6c = add i32 %v1_cd68, %v0_cd68
  store i32 %v2_cd6c, i32* %r4.global-to-local, align 4
  %v2_cd70 = add i32 %v0_cd68, 12
  %v3_cd70 = inttoptr i32 %v2_cd70 to i32*
  store i32 %v0_cd70, i32* %v3_cd70, align 4
  store i32 %v4_cd74, i32* %r2.global-to-local, align 4
  store i32 %v4_cd78, i32* %r3.global-to-local, align 4
  %v0_cd7c = load i32, i32* %r1.global-to-local, align 4
  %v1_cd7c = add i32 %v0_cd7c, 20
  store i32 %v1_cd7c, i32* %r0.global-to-local, align 4
  %v0_cd80 = load i32, i32* %ip.global-to-local, align 4
  %v1_cd80 = trunc i32 %v0_cd80 to i8
  %v3_cd80 = add i32 %v0_cd7c, 4
  %v4_cd80 = inttoptr i32 %v3_cd80 to i8*
  store i8 %v1_cd80, i8* %v4_cd80, align 1
  %v0_cd84 = load i32, i32* %r2.global-to-local, align 4
  %v1_cd84 = trunc i32 %v0_cd84 to i8
  %v2_cd84 = load i32, i32* %r0.global-to-local, align 4
  %v3_cd84 = add i32 %v2_cd84, 5
  %v4_cd84 = inttoptr i32 %v3_cd84 to i8*
  store i8 %v1_cd84, i8* %v4_cd84, align 1
  %v0_cd88 = load i32, i32* %r3.global-to-local, align 4
  %v1_cd88 = trunc i32 %v0_cd88 to i8
  %v2_cd88 = load i32, i32* %r0.global-to-local, align 4
  %v3_cd88 = add i32 %v2_cd88, 3
  %v4_cd88 = inttoptr i32 %v3_cd88 to i8*
  store i8 %v1_cd88, i8* %v4_cd88, align 1
  %v0_cd8c = load i32, i32* %sb.global-to-local, align 4
  %v1_cd8c = trunc i32 %v0_cd8c to i8
  %v2_cd8c = load i32, i32* %r0.global-to-local, align 4
  %v3_cd8c = add i32 %v2_cd8c, 2
  %v4_cd8c = inttoptr i32 %v3_cd8c to i8*
  store i8 %v1_cd8c, i8* %v4_cd8c, align 1
  %v0_cd90 = load i32, i32* %sl.global-to-local, align 4
  %v1_cd90 = trunc i32 %v0_cd90 to i8
  %v2_cd90 = load i32, i32* %r0.global-to-local, align 4
  %v3_cd90 = add i32 %v2_cd90, 4
  %v4_cd90 = inttoptr i32 %v3_cd90 to i8*
  store i8 %v1_cd90, i8* %v4_cd90, align 1
  %v0_cd94 = load i32, i32* @r5, align 4
  %v1_cd94 = trunc i32 %v0_cd94 to i8
  %v2_cd94 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd94 = add i32 %v2_cd94, 20
  %v4_cd94 = inttoptr i32 %v3_cd94 to i8*
  store i8 %v1_cd94, i8* %v4_cd94, align 1
  store i32 %v4_cd9c, i32* %r2.global-to-local, align 4
  %v1_cda0 = load i32, i32* %r1.global-to-local, align 4
  %v2_cda0 = add i32 %v1_cda0, 16
  %v3_cda0 = inttoptr i32 %v2_cda0 to i32*
  store i32 %stack_var_-2176.0, i32* %v3_cda0, align 4
  %v0_cda4 = load i32, i32* %r2.global-to-local, align 4
  %v1_cda4 = trunc i32 %v0_cda4 to i8
  %v2_cda4 = load i32, i32* %r0.global-to-local, align 4
  %v3_cda4 = add i32 %v2_cda4, 1
  %v4_cda4 = inttoptr i32 %v3_cda4 to i8*
  store i8 %v1_cda4, i8* %v4_cda4, align 1
  store i32 %v4_cda8, i32* %lr.global-to-local, align 4
  store i32 %v4_cc20, i32* %r0.global-to-local, align 4
  %v0_cdb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_cdb0 = add i32 %v0_cdb0, 28
  store i32 %v1_cdb0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_cdbc = load i32, i32* %r8.global-to-local, align 4
  %v1_cdbc = trunc i32 %v0_cdbc to i8
  %v4_cdbc = inttoptr i32 %v1_cdb0 to i8*
  store i8 %v1_cdbc, i8* %v4_cdbc, align 1
  %v0_cdc0 = load i32, i32* %r3.global-to-local, align 4
  %v1_cdc0 = trunc i32 %v0_cdc0 to i8
  %v2_cdc0 = load i32, i32* %ip.global-to-local, align 4
  %v3_cdc0 = add i32 %v2_cdc0, 5
  %v4_cdc0 = inttoptr i32 %v3_cdc0 to i8*
  store i8 %v1_cdc0, i8* %v4_cdc0, align 1
  %v0_cdc4 = load i32, i32* %lr.global-to-local, align 4
  %v1_cdc4 = trunc i32 %v0_cdc4 to i8
  %v2_cdc4 = load i32, i32* %ip.global-to-local, align 4
  %v3_cdc4 = add i32 %v2_cdc4, 1
  %v4_cdc4 = inttoptr i32 %v3_cdc4 to i8*
  store i8 %v1_cdc4, i8* %v4_cdc4, align 1
  %v0_cdc8 = load i32, i32* %r3.global-to-local, align 4
  %v1_cdc8 = trunc i32 %v0_cdc8 to i8
  %v2_cdc8 = load i32, i32* %ip.global-to-local, align 4
  %v3_cdc8 = add i32 %v2_cdc8, 2
  %v4_cdc8 = inttoptr i32 %v3_cdc8 to i8*
  store i8 %v1_cdc8, i8* %v4_cdc8, align 1
  %v0_cdcc = load i32, i32* @r6, align 4
  %v1_cdcc = trunc i32 %v0_cdcc to i8
  %v2_cdcc = load i32, i32* %ip.global-to-local, align 4
  %v3_cdcc = add i32 %v2_cdcc, 3
  %v4_cdcc = inttoptr i32 %v3_cdcc to i8*
  store i8 %v1_cdcc, i8* %v4_cdcc, align 1
  %v0_cdd0 = load i32, i32* @r6, align 4
  %v1_cdd0 = trunc i32 %v0_cdd0 to i8
  %v2_cdd0 = load i32, i32* %ip.global-to-local, align 4
  %v3_cdd0 = add i32 %v2_cdd0, 4
  %v4_cdd0 = inttoptr i32 %v3_cdd0 to i8*
  store i8 %v1_cdd0, i8* %v4_cdd0, align 1
  %v0_cdd4 = load i32, i32* %r0.global-to-local, align 4
  %v1_cdd4 = trunc i32 %v0_cdd4 to i8
  %v2_cdd4 = load i32, i32* %r1.global-to-local, align 4
  %v3_cdd4 = add i32 %v2_cdd4, 40
  %v4_cdd4 = inttoptr i32 %v3_cdd4 to i8*
  store i8 %v1_cdd4, i8* %v4_cdd4, align 1
  store i32 %v5_ca28, i32* %r1.global-to-local, align 4
  %v0_cddc = load i32, i32* @r7, align 4
  store i32 %v0_cddc, i32* %r2.global-to-local, align 4
  %v0_cde0 = load i32, i32* %r4.global-to-local, align 4
  %v1_cde0 = add i32 %v0_cde0, 1
  store i32 %v1_cde0, i32* %r0.global-to-local, align 4
  %v3_cde4 = call i32 @function_11574(i32 %v1_cde0, i32 %v5_ca28, i32 %v0_cddc)
  store i32 %v3_cde4, i32* %r0.global-to-local, align 4
  store i32 %v2_cb74, i32* %r1.global-to-local, align 4
  %v1_cdec = load i32, i32* @r6, align 4
  %v9_cdec = icmp eq i32 %v2_cb74, %v1_cdec
  store i1 %v9_cdec, i1* %cpsr_z.global-to-local, align 1
  %v7_cdf0 = icmp sgt i32 %v2_cb74, %v1_cdec
  store i32 %v1_cdec, i32* %lr.global-to-local, align 4
  %v0_ce00 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ce00, i32* %r2.global-to-local, align 4
  %extract.t78 = trunc i32 %v1_cdec to i8
  br i1 %v7_cdf0, label %dec_label_pc_cdfc, label %dec_label_pc_ce3c

dec_label_pc_cdfc:                                ; preds = %bb145
  store i32 %v1_cdec, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ce08

dec_label_pc_ce08:                                ; preds = %bb148, %dec_label_pc_cdfc
  %v0_ce2485151 = phi i32 [ %v0_ce2485152, %bb148 ], [ %v1_cdec, %dec_label_pc_cdfc ]
  %v1_ce1832 = phi i32 [ %v1_ce2891, %bb148 ], [ %v1_cdec, %dec_label_pc_cdfc ]
  %v1_ce14.off0 = phi i8 [ %v1_ce1456.off0, %bb148 ], [ %extract.t78, %dec_label_pc_cdfc ]
  %v0_ce1831 = phi i32 [ %v0_ce18315488, %bb148 ], [ %v0_ce00, %dec_label_pc_cdfc ]
  store i32 %v5_ca28, i32* %ip.global-to-local, align 4
  %v2_ce0c = add i32 %v1_ce1832, %v5_ca28
  %v3_ce0c = inttoptr i32 %v2_ce0c to i8*
  %v4_ce0c = load i8, i8* %v3_ce0c, align 1
  %v6_ce0c = zext i8 %v4_ce0c to i32
  store i32 %v6_ce0c, i32* %r3.global-to-local, align 4
  %v7_ce10 = icmp eq i8 %v4_ce0c, 46
  store i1 %v7_ce10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ce10, label %bb146, label %.thread30

.thread30:                                        ; preds = %dec_label_pc_ce08
  %v2_ce1833 = add i32 %v1_ce1832, %v0_ce1831
  store i32 %v2_ce1833, i32* %r0.global-to-local, align 4
  br label %.thread34

bb146:                                            ; preds = %dec_label_pc_ce08
  %v3_ce14 = load i32, i32* %r2.global-to-local, align 4
  %v4_ce14 = inttoptr i32 %v3_ce14 to i8*
  store i8 %v1_ce14.off0, i8* %v4_ce14, align 1
  %v0_ce1c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_ce18 = load i32, i32* %r4.global-to-local, align 4
  %v1_ce18 = load i32, i32* %r1.global-to-local, align 4
  %v2_ce18 = add i32 %v1_ce18, %v0_ce18
  store i32 %v2_ce18, i32* %r0.global-to-local, align 4
  br i1 %v0_ce1c.pr, label %bb147, label %bb146..thread34_crit_edge

bb146..thread34_crit_edge:                        ; preds = %bb146
  %v0_ce2485.pre = load i32, i32* %lr.global-to-local, align 4
  br label %.thread34

bb147:                                            ; preds = %bb146
  %v2_ce1c = add i32 %v2_ce18, 1
  store i32 %v2_ce1c, i32* %r2.global-to-local, align 4
  store i32 %v2_cb74, i32* %r0.global-to-local, align 4
  %v0_ce24 = load i32, i32* %lr.global-to-local, align 4
  %v1_ce24 = add i32 %v0_ce24, 1
  store i32 %v1_ce24, i32* %ip.global-to-local, align 4
  %v1_ce28 = add i32 %v1_ce18, 1
  store i32 %v1_ce28, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %bb148

.thread34:                                        ; preds = %bb146..thread34_crit_edge, %.thread30
  %v0_ce2485 = phi i32 [ %v0_ce2485.pre, %bb146..thread34_crit_edge ], [ %v0_ce2485151, %.thread30 ]
  %v0_ce28.ph = phi i32 [ %v1_ce18, %bb146..thread34_crit_edge ], [ %v1_ce1832, %.thread30 ]
  %v0_ce183154.ph = phi i32 [ %v0_ce18, %bb146..thread34_crit_edge ], [ %v0_ce1831, %.thread30 ]
  store i32 %v2_cb74, i32* %r0.global-to-local, align 4
  %v1_ce2486 = add i32 %v0_ce2485, 1
  store i32 %v1_ce2486, i32* %ip.global-to-local, align 4
  %v1_ce2887 = add i32 %v0_ce28.ph, 1
  store i32 %v1_ce2887, i32* %r1.global-to-local, align 4
  %v2_ce30 = urem i32 %v1_ce2486, 256
  store i32 %v2_ce30, i32* %lr.global-to-local, align 4
  %extract.t81 = trunc i32 %v1_ce2486 to i8
  br label %bb148

bb148:                                            ; preds = %bb147, %.thread34
  %v0_ce2485152 = phi i32 [ 0, %bb147 ], [ %v2_ce30, %.thread34 ]
  %v1_ce2891 = phi i32 [ %v1_ce28, %bb147 ], [ %v1_ce2887, %.thread34 ]
  %v0_ce18315488 = phi i32 [ %v0_ce18, %bb147 ], [ %v0_ce183154.ph, %.thread34 ]
  %v1_ce1456.off0 = phi i8 [ 0, %bb147 ], [ %extract.t81, %.thread34 ]
  %v9_ce34 = icmp eq i32 %v2_cb74, %v1_ce2891
  store i1 %v9_ce34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ce34, label %dec_label_pc_ce3c.loopexit, label %dec_label_pc_ce08

dec_label_pc_ce3c.loopexit:                       ; preds = %bb148
  %v2_ce3c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ce3c

dec_label_pc_ce3c:                                ; preds = %dec_label_pc_ce3c.loopexit, %bb145
  %v2_ce3c = phi i32 [ %v2_ce3c.pre, %dec_label_pc_ce3c.loopexit ], [ %v0_ce00, %bb145 ]
  %v0_ce3c.off0 = phi i8 [ %v1_ce1456.off0, %dec_label_pc_ce3c.loopexit ], [ %extract.t78, %bb145 ]
  %v3_ce3c = inttoptr i32 %v2_ce3c to i8*
  store i8 %v0_ce3c.off0, i8* %v3_ce3c, align 1
  %v3_ce40 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_cb74, i32* %r1.global-to-local, align 4
  %v0_ce48 = load i32, i32* %r4.global-to-local, align 4
  %v2_ce48 = add i32 %v0_ce48, %v2_cb74
  store i32 %v2_ce48, i32* %r3.global-to-local, align 4
  %v1_ce4c = add i32 %v3_ce40, 1
  store i32 %v1_ce4c, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* @lr, align 4
  %v9_ce5c = icmp eq i32 %v1_c914, %v1_ce4c
  store i1 %v9_ce5c, i1* %cpsr_z.global-to-local, align 1
  %v1_ce60 = add i32 %v2_ce48, 2
  store i32 %v1_ce60, i32* %r2.global-to-local, align 4
  %v4_ce64 = inttoptr i32 %v1_ce60 to i8*
  store i8 0, i8* %v4_ce64, align 1
  %v0_ce68 = load i32, i32* @lr, align 4
  %v1_ce68 = trunc i32 %v0_ce68 to i8
  %v2_ce68 = load i32, i32* %r2.global-to-local, align 4
  %v3_ce68 = add i32 %v2_ce68, 3
  %v4_ce68 = inttoptr i32 %v3_ce68 to i8*
  store i8 %v1_ce68, i8* %v4_ce68, align 1
  %v0_ce6c = load i32, i32* @lr, align 4
  %v1_ce6c = trunc i32 %v0_ce6c to i8
  %v2_ce6c = load i32, i32* %r2.global-to-local, align 4
  %v3_ce6c = add i32 %v2_ce6c, 1
  %v4_ce6c = inttoptr i32 %v3_ce6c to i8*
  store i8 %v1_ce6c, i8* %v4_ce6c, align 1
  %v0_ce70 = load i32, i32* %ip.global-to-local, align 4
  %v1_ce70 = trunc i32 %v0_ce70 to i8
  %v2_ce70 = load i32, i32* %r2.global-to-local, align 4
  %v3_ce70 = add i32 %v2_ce70, 2
  %v4_ce70 = inttoptr i32 %v3_ce70 to i8*
  store i8 %v1_ce70, i8* %v4_ce70, align 1
  %v0_ce74 = load i32, i32* @r4, align 4
  store i32 %v0_ce74, i32* %stack_var_-40, align 4
  %v8_ce78 = icmp sgt i32 %v1_c914, %v1_ce4c
  br i1 %v8_ce78, label %dec_label_pc_ccd4, label %dec_label_pc_ce7c

dec_label_pc_ce7c:                                ; preds = %dec_label_pc_ce3c, %dec_label_pc_d048
  %v4_ceec.pre-phi = phi i32 [ %v4_d04c, %dec_label_pc_d048 ], [ %v4_cc20, %dec_label_pc_ce3c ]
  store i32 %v1_c914, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_cbf8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ce88

dec_label_pc_ce88:                                ; preds = %dec_label_pc_ce88, %dec_label_pc_cfac, %dec_label_pc_ce7c
  br i1 %v2_cbf8, label %dec_label_pc_ce88, label %dec_label_pc_ce8c

dec_label_pc_ce8c:                                ; preds = %dec_label_pc_ce88
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r6, align 4
  %v0_ce9c = load i32, i32* @fp, align 4
  %v1_ce9c = add i32 %v0_ce9c, 27
  store i32 %v1_ce9c, i32* @sb, align 4
  %v1_cea0 = add i32 %v0_ce9c, 47
  store i32 %v1_cea0, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_cea8

dec_label_pc_cea8:                                ; preds = %dec_label_pc_cee8.dec_label_pc_cea8_crit_edge, %dec_label_pc_ce8c
  %v1_cec8 = phi i32 [ %v1_ceb4.pre, %dec_label_pc_cee8.dec_label_pc_cea8_crit_edge ], [ 65535, %dec_label_pc_ce8c ]
  %v1_ceb0 = phi i32 [ %v1_cf98, %dec_label_pc_cee8.dec_label_pc_cea8_crit_edge ], [ 0, %dec_label_pc_ce8c ]
  store i32 %v2_c92c, i32* %r3.global-to-local, align 4
  store i32 %v3_cbe8, i32* %r8.global-to-local, align 4
  %v4_ceb0 = mul i32 %v1_ceb0, 4
  %v5_ceb0 = add i32 %v4_ceb0, %v2_c92c
  %v6_ceb0 = inttoptr i32 %v5_ceb0 to i32*
  %v7_ceb0 = load i32, i32* %v6_ceb0, align 4
  store i32 %v7_ceb0, i32* @r4, align 4
  %v9_ceb4 = icmp eq i32 %v3_cbe8, %v1_cec8
  store i1 %v9_ceb4, i1* %cpsr_z.global-to-local, align 1
  %v1_ceb8 = add i32 %v7_ceb0, 20
  store i32 %v1_ceb8, i32* @r5, align 4
  %v1_cebc = add i32 %v7_ceb0, 28
  store i32 %v1_cebc, i32* @r8, align 4
  br i1 %v9_ceb4, label %dec_label_pc_cfbc, label %dec_label_pc_cec4

dec_label_pc_cec4:                                ; preds = %dec_label_pc_cea8
  store i32 %v3_cbec, i32* %ip.global-to-local, align 4
  %v9_cec8 = icmp eq i32 %v3_cbec, %v1_cec8
  store i1 %v9_cec8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cec8, label %dec_label_pc_cfd8, label %dec_label_pc_ced0

dec_label_pc_ced0:                                ; preds = %dec_label_pc_cfbc.dec_label_pc_ced0_crit_edge, %dec_label_pc_cec4
  %v1_ced4 = phi i32 [ %v1_ced4.pre, %dec_label_pc_cfbc.dec_label_pc_ced0_crit_edge ], [ %v1_cec8, %dec_label_pc_cec4 ]
  store i32 %v3_cbf0, i32* %lr.global-to-local, align 4
  %v9_ced4 = icmp eq i32 %v3_cbf0, %v1_ced4
  store i1 %v9_ced4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ced4, label %dec_label_pc_cff4, label %dec_label_pc_cedc

dec_label_pc_cedc:                                ; preds = %dec_label_pc_cfd8.dec_label_pc_cedc_crit_edge, %dec_label_pc_ced0
  %v1_cee0 = phi i32 [ %v1_cee0.pre, %dec_label_pc_cfd8.dec_label_pc_cedc_crit_edge ], [ %v1_ced4, %dec_label_pc_ced0 ]
  store i32 %v3_cbf4, i32* %r0.global-to-local, align 4
  %v9_cee0 = icmp eq i32 %v3_cbf4, %v1_cee0
  store i1 %v9_cee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cee0, label %dec_label_pc_d010, label %dec_label_pc_cee8

dec_label_pc_cee8:                                ; preds = %dec_label_pc_cff4, %dec_label_pc_cedc, %dec_label_pc_d010
  %v0_cee8 = load i32, i32* @r4, align 4
  %v1_cee8 = add i32 %v0_cee8, 41
  store i32 %v1_cee8, i32* %r0.global-to-local, align 4
  store i32 %v4_ceec.pre-phi, i32* %r1.global-to-local, align 4
  %v2_cef0 = call i32 @function_ec44(i32 %v1_cee8, i32 %v4_ceec.pre-phi)
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_cef8 = load i32, i32* @r7, align 4
  %v1_cef8 = trunc i32 %v0_cef8 to i8
  %v2_cef8 = load i32, i32* @r4, align 4
  %v3_cef8 = add i32 %v2_cef8, 10
  %v4_cef8 = inttoptr i32 %v3_cef8 to i8*
  store i8 %v1_cef8, i8* %v4_cef8, align 1
  %v0_cefc = load i32, i32* @r7, align 4
  %v1_cefc = trunc i32 %v0_cefc to i8
  %v2_cefc = load i32, i32* @r4, align 4
  %v3_cefc = add i32 %v2_cefc, 11
  %v4_cefc = inttoptr i32 %v3_cefc to i8*
  store i8 %v1_cefc, i8* %v4_cefc, align 1
  %v0_cf00 = load i32, i32* @r4, align 4
  store i32 %v0_cf00, i32* @r0, align 4
  %v2_cf04 = call i32 @function_d0b8(i32 %v0_cf00, i32 20)
  %v3_cf04 = trunc i32 %v2_cf04 to i8
  store i32 %v2_cf04, i32* %r0.global-to-local, align 4
  %v4_cf08 = sdiv i32 %v2_cf04, 256
  store i32 %v4_cf08, i32* %r3.global-to-local, align 4
  %v1_cf0c = trunc i32 %v4_cf08 to i8
  %v2_cf0c = load i32, i32* @r4, align 4
  %v3_cf0c = add i32 %v2_cf0c, 11
  %v4_cf0c = inttoptr i32 %v3_cf0c to i8*
  store i8 %v1_cf0c, i8* %v4_cf0c, align 1
  %v3_cf10 = load i32, i32* @r4, align 4
  %v4_cf10 = add i32 %v3_cf10, 10
  %v5_cf10 = inttoptr i32 %v4_cf10 to i8*
  store i8 %v3_cf04, i8* %v5_cf10, align 1
  %v0_cf14 = load i32, i32* @r7, align 4
  %v1_cf14 = trunc i32 %v0_cf14 to i8
  %v2_cf14 = load i32, i32* @r5, align 4
  %v3_cf14 = add i32 %v2_cf14, 6
  %v4_cf14 = inttoptr i32 %v3_cf14 to i8*
  store i8 %v1_cf14, i8* %v4_cf14, align 1
  %v0_cf18 = load i32, i32* @r7, align 4
  %v1_cf18 = trunc i32 %v0_cf18 to i8
  %v2_cf18 = load i32, i32* @r5, align 4
  %v3_cf18 = add i32 %v2_cf18, 7
  %v4_cf18 = inttoptr i32 %v3_cf18 to i8*
  store i8 %v1_cf18, i8* %v4_cf18, align 1
  %v0_cf1c = load i32, i32* @r4, align 4
  %v1_cf1c = add i32 %v0_cf1c, 24
  %v2_cf1c = inttoptr i32 %v1_cf1c to i8*
  %v3_cf1c = load i8, i8* %v2_cf1c, align 1
  %v4_cf1c = zext i8 %v3_cf1c to i32
  store i32 %v4_cf1c, i32* %r3.global-to-local, align 4
  %v1_cf20 = add i32 %v0_cf1c, 25
  %v2_cf20 = inttoptr i32 %v1_cf20 to i8*
  %v3_cf20 = load i8, i8* %v2_cf20, align 1
  %v4_cf20 = zext i8 %v3_cf20 to i32
  %v0_cf24 = load i32, i32* @r5, align 4
  store i32 %v0_cf24, i32* @r1, align 4
  %v4_cf28 = mul nuw nsw i32 %v4_cf20, 256
  %v5_cf28 = or i32 %v4_cf28, %v4_cf1c
  store i32 %v5_cf28, i32* %r2.global-to-local, align 4
  store i32 %v0_cf1c, i32* %r0.global-to-local, align 4
  %v0_cf30 = load i32, i32* @sb, align 4
  store i32 %v0_cf30, i32* %r3.global-to-local, align 4
  %v4_cf34 = call i32 @function_d114(i32 %v0_cf1c, i32 %v0_cf24, i32 %v5_cf28, i32 %v0_cf30)
  %v5_cf34 = trunc i32 %v4_cf34 to i8
  store i32 %v4_cf34, i32* %r0.global-to-local, align 4
  %v3_cf38 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-2176.0, i32* %r2.global-to-local, align 4
  %v5_cf48 = mul i32 %v3_cf38, 24
  %v2_cf4c = add i32 %v5_cf48, %arg2
  store i32 %v2_cf4c, i32* %lr.global-to-local, align 4
  %v4_cf50 = sdiv i32 %v4_cf34, 256
  store i32 %v4_cf50, i32* %r3.global-to-local, align 4
  %v3_cf54 = load i32, i32* @r5, align 4
  %v4_cf54 = add i32 %v3_cf54, 6
  %v5_cf54 = inttoptr i32 %v4_cf54 to i8*
  store i8 %v5_cf34, i8* %v5_cf54, align 1
  %v0_cf58 = load i32, i32* %r3.global-to-local, align 4
  %v1_cf58 = trunc i32 %v0_cf58 to i8
  %v2_cf58 = load i32, i32* @r5, align 4
  %v3_cf58 = add i32 %v2_cf58, 7
  %v4_cf58 = inttoptr i32 %v3_cf58 to i8*
  store i8 %v1_cf58, i8* %v4_cf58, align 1
  %v0_cf5c = load i32, i32* %r2.global-to-local, align 4
  %v1_cf5c = load i32, i32* %lr.global-to-local, align 4
  %v2_cf5c = add i32 %v1_cf5c, 4
  %v3_cf5c = inttoptr i32 %v2_cf5c to i32*
  store i32 %v0_cf5c, i32* %v3_cf5c, align 4
  %v0_cf60 = load i32, i32* @r4, align 4
  %v1_cf60 = add i32 %v0_cf60, 20
  %v2_cf60 = inttoptr i32 %v1_cf60 to i32*
  %v3_cf60 = load i32, i32* %v2_cf60, align 4
  %v3_cf64 = udiv i32 %v3_cf60, 65536
  store i32 %v3_cf64, i32* %r3.global-to-local, align 4
  %v3_cf6812 = udiv i32 %v3_cf60, 16777216
  %v1_cf6c = trunc i32 %v3_cf6812 to i8
  %v2_cf6c = load i32, i32* %lr.global-to-local, align 4
  %v3_cf6c = add i32 %v2_cf6c, 3
  %v4_cf6c = inttoptr i32 %v3_cf6c to i8*
  store i8 %v1_cf6c, i8* %v4_cf6c, align 1
  %v0_cf70 = load i32, i32* %r3.global-to-local, align 4
  %v1_cf70 = trunc i32 %v0_cf70 to i8
  %v2_cf70 = load i32, i32* %lr.global-to-local, align 4
  %v3_cf70 = add i32 %v2_cf70, 2
  %v4_cf70 = inttoptr i32 %v3_cf70 to i8*
  store i8 %v1_cf70, i8* %v4_cf70, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_cf7c = load i32, i32* @r4, align 4
  store i32 %v0_cf7c, i32* %r1.global-to-local, align 4
  store i32 %v3_cb88, i32* %r0.global-to-local, align 4
  %v0_cf84 = load i32, i32* @sl, align 4
  store i32 %v0_cf84, i32* %r2.global-to-local, align 4
  %v0_cf88 = load i32, i32* %lr.global-to-local, align 4
  %v6_cf90 = inttoptr i32 %v0_cf7c to i32*
  %v7_cf90 = call i32 @function_126a8(i32 %v3_cb88, i32* %v6_cf90, i32 %v0_cf84, i32 16384, i32 %v0_cf88, i32 16)
  %v3_cf94 = load i32, i32* %stack_var_-40, align 4
  %v1_cf98 = add i32 %v3_cf94, 1
  store i32 %v1_cf98, i32* %r0.global-to-local, align 4
  store i32 %v1_c914, i32* %r3.global-to-local, align 4
  %v9_cfa0 = icmp eq i32 %v1_c914, %v1_cf98
  store i1 %v9_cfa0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cf98, i32* %stack_var_-40, align 4
  %v8_cfa8 = icmp sgt i32 %v1_c914, %v1_cf98
  br i1 %v8_cfa8, label %dec_label_pc_cee8.dec_label_pc_cea8_crit_edge, label %dec_label_pc_cfac

dec_label_pc_cee8.dec_label_pc_cea8_crit_edge:    ; preds = %dec_label_pc_cee8
  %v1_ceb4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_cea8

dec_label_pc_cfac:                                ; preds = %dec_label_pc_cee8
  store i32 %v1_c914, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ce88

dec_label_pc_cfbc:                                ; preds = %dec_label_pc_cea8
  %v0_cfbc = call i32 @function_eb90()
  %v1_cfbc = trunc i32 %v0_cfbc to i8
  store i32 %v0_cfbc, i32* %r0.global-to-local, align 4
  store i32 %v3_cbec, i32* %ip.global-to-local, align 4
  %v4_cfc4 = sdiv i32 %v0_cfbc, 256
  store i32 %v4_cfc4, i32* %r3.global-to-local, align 4
  %v1_cfc8 = load i32, i32* @r6, align 4
  %v9_cfc8 = icmp eq i32 %v3_cbec, %v1_cfc8
  store i1 %v9_cfc8, i1* %cpsr_z.global-to-local, align 1
  %v1_cfcc = trunc i32 %v4_cfc4 to i8
  %v2_cfcc = load i32, i32* @r4, align 4
  %v3_cfcc = add i32 %v2_cfcc, 5
  %v4_cfcc = inttoptr i32 %v3_cfcc to i8*
  store i8 %v1_cfcc, i8* %v4_cfcc, align 1
  %v3_cfd0 = load i32, i32* @r4, align 4
  %v4_cfd0 = add i32 %v3_cfd0, 4
  %v5_cfd0 = inttoptr i32 %v4_cfd0 to i8*
  store i8 %v1_cfbc, i8* %v5_cfd0, align 1
  %v0_cfd4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cfd4, label %dec_label_pc_cfd8, label %dec_label_pc_cfbc.dec_label_pc_ced0_crit_edge

dec_label_pc_cfbc.dec_label_pc_ced0_crit_edge:    ; preds = %dec_label_pc_cfbc
  %v1_ced4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ced0

dec_label_pc_cfd8:                                ; preds = %dec_label_pc_cfbc, %dec_label_pc_cec4
  %v0_cfd8 = call i32 @function_eb90()
  %v1_cfd8 = trunc i32 %v0_cfd8 to i8
  store i32 %v0_cfd8, i32* %r0.global-to-local, align 4
  store i32 %v3_cbf0, i32* %lr.global-to-local, align 4
  %v4_cfe0 = sdiv i32 %v0_cfd8, 256
  store i32 %v4_cfe0, i32* %r3.global-to-local, align 4
  %v1_cfe4 = load i32, i32* @r6, align 4
  %v9_cfe4 = icmp eq i32 %v3_cbf0, %v1_cfe4
  store i1 %v9_cfe4, i1* %cpsr_z.global-to-local, align 1
  %v3_cfe8 = load i32, i32* @r4, align 4
  %v4_cfe8 = add i32 %v3_cfe8, 20
  %v5_cfe8 = inttoptr i32 %v4_cfe8 to i8*
  store i8 %v1_cfd8, i8* %v5_cfe8, align 1
  %v0_cfec = load i32, i32* %r3.global-to-local, align 4
  %v1_cfec = trunc i32 %v0_cfec to i8
  %v2_cfec = load i32, i32* @r5, align 4
  %v3_cfec = add i32 %v2_cfec, 1
  %v4_cfec = inttoptr i32 %v3_cfec to i8*
  store i8 %v1_cfec, i8* %v4_cfec, align 1
  %v0_cff0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cff0, label %dec_label_pc_cff4, label %dec_label_pc_cfd8.dec_label_pc_cedc_crit_edge

dec_label_pc_cfd8.dec_label_pc_cedc_crit_edge:    ; preds = %dec_label_pc_cfd8
  %v1_cee0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_cedc

dec_label_pc_cff4:                                ; preds = %dec_label_pc_cfd8, %dec_label_pc_ced0
  %v0_cff4 = call i32 @function_eb90()
  %v1_cff4 = trunc i32 %v0_cff4 to i8
  %v4_cff8 = sdiv i32 %v0_cff4, 256
  store i32 %v4_cff8, i32* %r3.global-to-local, align 4
  %v3_cffc = load i32, i32* @r5, align 4
  %v4_cffc = add i32 %v3_cffc, 2
  %v5_cffc = inttoptr i32 %v4_cffc to i8*
  store i8 %v1_cff4, i8* %v5_cffc, align 1
  store i32 %v3_cbf4, i32* %r0.global-to-local, align 4
  %v1_d004 = load i32, i32* @r6, align 4
  %v9_d004 = icmp eq i32 %v3_cbf4, %v1_d004
  store i1 %v9_d004, i1* %cpsr_z.global-to-local, align 1
  %v0_d008 = load i32, i32* %r3.global-to-local, align 4
  %v1_d008 = trunc i32 %v0_d008 to i8
  %v2_d008 = load i32, i32* @r5, align 4
  %v3_d008 = add i32 %v2_d008, 3
  %v4_d008 = inttoptr i32 %v3_d008 to i8*
  store i8 %v1_d008, i8* %v4_d008, align 1
  %v0_d00c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d00c, label %dec_label_pc_d010, label %dec_label_pc_cee8

dec_label_pc_d010:                                ; preds = %dec_label_pc_cff4, %dec_label_pc_cedc
  %v0_d010 = call i32 @function_eb90()
  %v1_d010 = trunc i32 %v0_d010 to i8
  store i32 %v0_d010, i32* %r0.global-to-local, align 4
  %v4_d014 = sdiv i32 %v0_d010, 256
  store i32 %v4_d014, i32* %r3.global-to-local, align 4
  %v3_d018 = load i32, i32* @r4, align 4
  %v4_d018 = add i32 %v3_d018, 28
  %v5_d018 = inttoptr i32 %v4_d018 to i8*
  store i8 %v1_d010, i8* %v5_d018, align 1
  %v0_d01c = load i32, i32* %r3.global-to-local, align 4
  %v1_d01c = trunc i32 %v0_d01c to i8
  %v2_d01c = load i32, i32* @r8, align 4
  %v3_d01c = add i32 %v2_d01c, 1
  %v4_d01c = inttoptr i32 %v3_d01c to i8*
  store i8 %v1_d01c, i8* %v4_d01c, align 1
  br label %dec_label_pc_cee8

dec_label_pc_d024:                                ; preds = %dec_label_pc_caf0, %dec_label_pc_cabc, %dec_label_pc_ca60, %dec_label_pc_c908
  %v0_d024 = call i32 @function_eb90()
  %v1_d028 = urem i32 %v0_d024, 4
  store i32 %v1_d028, i32* %r0.global-to-local, align 4
  %v2_d02c = icmp eq i32 %v1_d028, 3
  store i1 %v2_d02c, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_d024 to i2
  switch i2 %trunc, label %dec_label_pc_cb6419 [
    i2 0, label %dec_label_pc_d06c
    i2 1, label %dec_label_pc_d080
    i2 -2, label %dec_label_pc_d08c
    i2 -1, label %dec_label_pc_d09c
  ]

dec_label_pc_d048:                                ; preds = %dec_label_pc_cbc4
  store i32 %v2_cb74, i32* %r0.global-to-local, align 4
  %v4_d04c = sext i8 %v5_cbe0 to i32
  store i32 %v4_d04c, i32* %r1.global-to-local, align 4
  %v2_d050 = add i32 %v4_d04c, %v2_cb74
  store i32 %v2_d050, i32* @fp, align 4
  br label %dec_label_pc_ce7c

dec_label_pc_d058:                                ; preds = %dec_label_pc_cb98
  store i32 %v3_cb88, i32* %r0.global-to-local, align 4
  %v1_d05c = call i32 @function_11dfc(i32 %v3_cb88)
  store i32 %v1_d05c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d060

dec_label_pc_d060:                                ; preds = %dec_label_pc_cb70, %dec_label_pc_cb64, %dec_label_pc_d058
  %v29_d068 = phi i32 [ %v3_cb88, %dec_label_pc_cb70 ], [ %v29_d06874, %dec_label_pc_cb64 ], [ %v1_d05c, %dec_label_pc_d058 ]
  store i32 %v3_c908, i32* %r4.global-to-local, align 4
  store i32 %v15_c908, i32* %r8.global-to-local, align 4
  store i32 %v18_c908, i32* %sb.global-to-local, align 4
  store i32 %v21_c908, i32* %sl.global-to-local, align 4
  store i32 %v24_c908, i32* %fp.global-to-local, align 4
  ret i32 %v29_d068

dec_label_pc_d06c:                                ; preds = %dec_label_pc_d024
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_cb64

dec_label_pc_d080:                                ; preds = %dec_label_pc_d024
  store i32 707416650, i32* @r4, align 4
  br label %dec_label_pc_cb64

dec_label_pc_d08c:                                ; preds = %dec_label_pc_d024
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_cb64

dec_label_pc_d09c:                                ; preds = %dec_label_pc_d024
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_cb64

; uselistorder directives
  uselistorder i32 %v4_d04c, { 0, 2, 1 }
  uselistorder i32 %v1_d028, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_d024, { 1, 0 }
  uselistorder i32 %v0_d010, { 0, 2, 1 }
  uselistorder i32 %v0_cfd8, { 0, 2, 1 }
  uselistorder i32 %v4_cfc4, { 1, 0 }
  uselistorder i32 %v0_cfbc, { 0, 2, 1 }
  uselistorder i32 %v1_cf98, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_cf34, { 0, 2, 1 }
  uselistorder i32 %v0_cf1c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_cf08, { 1, 0 }
  uselistorder i32 %v2_cf04, { 0, 2, 1 }
  uselistorder i32 %v7_ceb0, { 1, 0, 2 }
  uselistorder i32 %v4_ceec.pre-phi, { 1, 0 }
  uselistorder i32 %v2_ce30, { 1, 0 }
  uselistorder i32 %v1_ce2486, { 1, 0, 2 }
  uselistorder i32 %v1_ce18, { 2, 1, 0 }
  uselistorder i32 %v0_ce18, { 1, 2, 0 }
  uselistorder i32 %v0_ce1831, { 1, 0 }
  uselistorder i32 %v1_ce1832, { 2, 0, 1 }
  uselistorder i8 %extract.t78, { 1, 0 }
  uselistorder i32 %v1_cdec, { 2, 0, 4, 1, 3, 5, 6 }
  uselistorder i32 %v0_cd68, { 1, 0 }
  uselistorder i32 %v3_cca4, { 1, 0, 2 }
  uselistorder i32 %v1_cc6c, { 1, 0 }
  uselistorder i32 %v1_cc60, { 1, 0 }
  uselistorder i32 %v1_cc44, { 1, 0 }
  uselistorder i32 %v1_cc30, { 1, 0 }
  uselistorder i32 %v3_cc28, { 1, 0 }
  uselistorder i32 %v4_cc20, { 0, 4, 2, 5, 3, 1 }
  uselistorder i8 %v5_cbe0, { 1, 0 }
  uselistorder i32 %v0_cbdc, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_cbd0, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_cbbc, { 1, 0 }
  uselistorder i1 %v7_cb8c, { 1, 0 }
  uselistorder i32 %v3_cb88, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_cb74, { 0, 11, 1, 6, 4, 3, 7, 10, 9, 8, 5, 2 }
  uselistorder i32 %stack_var_-2176.0, { 1, 0 }
  uselistorder i32 %v1_cb5c, { 1, 0, 2 }
  uselistorder i1 %v7_cb2c, { 1, 0 }
  uselistorder i32 %v1_cb28, { 1, 0, 2 }
  uselistorder i1 %v8_cb20, { 1, 0 }
  uselistorder i1 %v7_cb1c, { 1, 0 }
  uselistorder i32 %v1_cb10, { 1, 0 }
  uselistorder i8 %v2_cb04, { 2, 0, 1, 3 }
  uselistorder i32 %v0_cb08, { 1, 0 }
  uselistorder i32 %v0_cb28, { 3, 0, 2, 1 }
  uselistorder i32 %v0_caf4, { 0, 2, 1 }
  uselistorder i32 %v1_cb0c, { 0, 2, 1 }
  uselistorder i32 %v2_cadc, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v2_cad4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_cabc, { 1, 2, 0, 3, 4, 5 }
  uselistorder i1 %v7_cab4, { 1, 0 }
  uselistorder i32 %v0_cab4, { 2, 3, 1, 4, 6, 5, 0 }
  uselistorder i32 %v0_ca58, { 1, 0, 3, 2 }
  uselistorder i32 %v5_ca28, { 0, 3, 5, 4, 2, 1, 7, 6 }
  uselistorder i32 %v1_c9ac, { 1, 2, 0 }
  uselistorder i32 %v7_c968, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v6_c944, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c92c, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_c914, { 7, 4, 5, 6, 3, 8, 9, 10, 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 51, 8, 50, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 44, 43, 45, 47, 46, 49, 48, 0 }
  uselistorder i32* %r0.global-to-local, { 6, 3, 4, 5, 8, 7, 9, 11, 10, 12, 14, 13, 15, 16, 17, 18, 68, 19, 20, 2, 34, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 38, 35, 36, 37, 39, 41, 40, 42, 1, 43, 45, 44, 47, 46, 48, 49, 50, 51, 52, 54, 53, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 5, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 22, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 29, 26, 33, 34, 35 }
  uselistorder i32 41, { 2, 3, 4, 0, 1 }
  uselistorder i32 134744072, { 1, 0 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 33686020, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32)* @function_85e0, { 67, 68, 69, 70, 71, 72, 73, 74, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 89, 90, 91, 92, 93, 94, 95, 96, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106 }
  uselistorder label %dec_label_pc_d060, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cee8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ce88, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ce7c, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %bb145, { 1, 0 }
  uselistorder label %.thread20, { 1, 0 }
  uselistorder label %dec_label_pc_cb38, { 1, 0 }
  uselistorder label %dec_label_pc_cb2c, { 1, 0 }
  uselistorder label %dec_label_pc_caf0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cae8, { 1, 0 }
}

define i32 @function_d0b8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d0b8:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_d0e8, label %dec_label_pc_d0c4

dec_label_pc_d0c4:                                ; preds = %dec_label_pc_d0b8
  %v0_d0c8.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_d0c8

dec_label_pc_d0c8:                                ; preds = %dec_label_pc_d0c8, %dec_label_pc_d0c4
  %v0_d0dc = phi i32 [ %v2_d0dc, %dec_label_pc_d0c8 ], [ 0, %dec_label_pc_d0c4 ]
  %v0_d0d0 = phi i32 [ %v1_d0d0, %dec_label_pc_d0c8 ], [ %arg1, %dec_label_pc_d0c4 ]
  %v0_d0e0 = phi i32 [ %v1_d0e0, %dec_label_pc_d0c8 ], [ %v0_d0c8.pre, %dec_label_pc_d0c4 ]
  %v1_d0c8 = inttoptr i32 %v0_d0e0 to i8*
  %v2_d0c8 = load i8, i8* %v1_d0c8, align 1
  %v3_d0c8 = zext i8 %v2_d0c8 to i32
  %v1_d0cc = add i32 %v0_d0e0, 1
  %v2_d0cc = inttoptr i32 %v1_d0cc to i8*
  %v3_d0cc = load i8, i8* %v2_d0cc, align 1
  %v4_d0cc = zext i8 %v3_d0cc to i32
  %v1_d0d0 = add i32 %v0_d0d0, -2
  %v4_d0d4 = mul nuw nsw i32 %v4_d0cc, 256
  %v5_d0d4 = or i32 %v4_d0d4, %v3_d0c8
  %v2_d0dc = add i32 %v5_d0d4, %v0_d0dc
  %v1_d0e0 = add i32 %v0_d0e0, 2
  store i32 %v1_d0e0, i32* @r0, align 4
  %v1_d0d0.cmp = icmp ugt i32 %v1_d0d0, 1
  br i1 %v1_d0d0.cmp, label %dec_label_pc_d0c8, label %dec_label_pc_d0e8

dec_label_pc_d0e8:                                ; preds = %dec_label_pc_d0c8, %dec_label_pc_d0b8
  %v1_d0f0 = phi i32 [ 0, %dec_label_pc_d0b8 ], [ %v2_d0dc, %dec_label_pc_d0c8 ]
  %v0_d0e8 = phi i32 [ %arg1, %dec_label_pc_d0b8 ], [ %v1_d0d0, %dec_label_pc_d0c8 ]
  %v7_d0e8 = icmp eq i32 %v0_d0e8, 1
  br i1 %v7_d0e8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_d0e8
  %v1_d0ec = load i32, i32* @r0, align 4
  %v2_d0ec = inttoptr i32 %v1_d0ec to i8*
  %v3_d0ec = load i8, i8* %v2_d0ec, align 1
  %v4_d0ec = zext i8 %v3_d0ec to i32
  %v3_d0f0 = add i32 %v1_d0f0, %v4_d0ec
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d0e8, %bb
  %v0_d0f4 = phi i32 [ %v1_d0f0, %dec_label_pc_d0e8 ], [ %v3_d0f0, %bb ]
  %v3_d0f8 = urem i32 %v0_d0f4, 65536
  %v4_d0fc = udiv i32 %v0_d0f4, 65536
  %v5_d0fc = add nuw nsw i32 %v4_d0fc, %v3_d0f8
  %v4_d100 = udiv i32 %v5_d0fc, 65536
  %v5_d100 = add nuw nsw i32 %v4_d100, %v5_d0fc
  %v1_d104 = urem i32 %v5_d100, 65536
  %v3_d10c = xor i32 %v1_d104, 65535
  ret i32 %v3_d10c

; uselistorder directives
  uselistorder i32 %v5_d0fc, { 1, 0 }
  uselistorder i32 %v1_d0e0, { 1, 0 }
  uselistorder i32 %v1_d0d0, { 1, 0, 2 }
  uselistorder i32 %v0_d0e0, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d114(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d114:
  %v3_d124 = urem i32 %arg2, 65536
  %v1_d128 = add i32 %arg1, 12
  %v1_d12c = inttoptr i32 %v1_d128 to i32*
  %v2_d12c = load i32, i32* %v1_d12c, align 4
  %v3_d12c = add i32 %arg1, 16
  %v4_d12c = inttoptr i32 %v3_d12c to i32*
  %v5_d12c = load i32, i32* %v4_d12c, align 4
  %v7_d130 = icmp sgt i32 %arg3, 1
  br i1 %v7_d130, label %dec_label_pc_d13c.preheader, label %dec_label_pc_d15c

dec_label_pc_d13c.preheader:                      ; preds = %dec_label_pc_d114
  %v0_d13c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_d13c

dec_label_pc_d13c:                                ; preds = %dec_label_pc_d13c.preheader, %dec_label_pc_d13c
  %v0_d150 = phi i32 [ 0, %dec_label_pc_d13c.preheader ], [ %v2_d150, %dec_label_pc_d13c ]
  %v0_d144 = phi i32 [ %arg3, %dec_label_pc_d13c.preheader ], [ %v1_d144, %dec_label_pc_d13c ]
  %v0_d154 = phi i32 [ %v0_d13c.pre, %dec_label_pc_d13c.preheader ], [ %v1_d154, %dec_label_pc_d13c ]
  %v1_d13c = inttoptr i32 %v0_d154 to i8*
  %v2_d13c = load i8, i8* %v1_d13c, align 1
  %v3_d13c = zext i8 %v2_d13c to i32
  %v1_d140 = add i32 %v0_d154, 1
  %v2_d140 = inttoptr i32 %v1_d140 to i8*
  %v3_d140 = load i8, i8* %v2_d140, align 1
  %v4_d140 = zext i8 %v3_d140 to i32
  %v1_d144 = add nsw i32 %v0_d144, -2
  %v4_d148 = mul nuw nsw i32 %v4_d140, 256
  %v5_d148 = or i32 %v4_d148, %v3_d13c
  %v2_d150 = add i32 %v5_d148, %v0_d150
  %v1_d154 = add i32 %v0_d154, 2
  store i32 %v1_d154, i32* @r1, align 4
  %v8_d158 = icmp sgt i32 %v1_d144, 1
  br i1 %v8_d158, label %dec_label_pc_d13c, label %dec_label_pc_d15c

dec_label_pc_d15c:                                ; preds = %dec_label_pc_d13c, %dec_label_pc_d114
  %v1_d164 = phi i32 [ 0, %dec_label_pc_d114 ], [ %v2_d150, %dec_label_pc_d13c ]
  %v0_d15c = phi i32 [ %arg3, %dec_label_pc_d114 ], [ %v1_d144, %dec_label_pc_d13c ]
  %v7_d15c = icmp eq i32 %v0_d15c, 1
  br i1 %v7_d15c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_d15c
  %v1_d160 = load i32, i32* @r1, align 4
  %v2_d160 = inttoptr i32 %v1_d160 to i8*
  %v3_d160 = load i8, i8* %v2_d160, align 1
  %v4_d160 = zext i8 %v3_d160 to i32
  %v3_d164 = add i32 %v4_d160, %v1_d164
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d15c, %bb
  %v0_d188 = phi i32 [ %v1_d164, %dec_label_pc_d15c ], [ %v3_d164, %bb ]
  %v3_d16c = urem i32 %v2_d12c, 65536
  %v1_d174 = add i32 %arg1, 9
  %v2_d174 = inttoptr i32 %v1_d174 to i8*
  %v3_d174 = load i8, i8* %v2_d174, align 1
  %v4_d174 = zext i8 %v3_d174 to i32
  %v3_d178 = urem i32 %v5_d12c, 65536
  %v4_d17c = udiv i32 %v2_d12c, 65536
  %v3_d184 = mul nuw nsw i32 %v4_d174, 256
  %v4_d188 = udiv i32 %v5_d12c, 65536
  %v5_d188 = add i32 %v0_d188, %v4_d188
  %v2_d18c = add i32 %v5_d188, %v3_d184
  %v5_d17c = add nuw nsw i32 %v3_d16c, %v3_d124
  %v2_d180 = add nuw nsw i32 %v5_d17c, %v4_d17c
  %v2_d190 = add nuw nsw i32 %v2_d180, %v3_d178
  %v2_d194 = add i32 %v2_d18c, %v2_d190
  %tmp = icmp ult i32 %v2_d194, 65536
  br i1 %tmp, label %dec_label_pc_d1b4, label %dec_label_pc_d1a0

dec_label_pc_d1a0:                                ; preds = %.thread, %dec_label_pc_d1a0
  %v2_d1a81 = phi i32 [ %v2_d1a8, %dec_label_pc_d1a0 ], [ %v2_d194, %.thread ]
  %v3_d1ac2.in = phi i32 [ %v2_d1a8, %dec_label_pc_d1a0 ], [ %v2_d194, %.thread ]
  %v3_d1ac2 = udiv i32 %v3_d1ac2.in, 65536
  %v3_d1a4 = urem i32 %v2_d1a81, 65536
  %v2_d1a8 = add nuw nsw i32 %v3_d1a4, %v3_d1ac2
  %tmp14 = icmp ult i32 %v2_d1a8, 65536
  br i1 %tmp14, label %dec_label_pc_d1b4.loopexit, label %dec_label_pc_d1a0

dec_label_pc_d1b4.loopexit:                       ; preds = %dec_label_pc_d1a0
  br label %dec_label_pc_d1b4

dec_label_pc_d1b4:                                ; preds = %dec_label_pc_d1b4.loopexit, %.thread
  %v0_d1b4 = phi i32 [ %v2_d1a8, %dec_label_pc_d1b4.loopexit ], [ %v2_d194, %.thread ]
  %v1_d1b4 = urem i32 %v0_d1b4, 65536
  %v3_d1bc = xor i32 %v1_d1b4, 65535
  ret i32 %v3_d1bc

; uselistorder directives
  uselistorder i32 %v2_d1a8, { 2, 1, 3, 0 }
  uselistorder i32 %v2_d194, { 3, 0, 2, 1 }
  uselistorder i32 %v1_d164, { 1, 0 }
  uselistorder i32 %v1_d154, { 1, 0 }
  uselistorder i32 %v1_d144, { 0, 2, 1 }
  uselistorder i32 %v0_d154, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d1a0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_d13c, { 1, 0 }
}

define i32 @function_d1c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_d1c4:
  %v2_d1c8 = load i32, i32* @global_var_1d23c.62, align 4
  %v2_d1d0 = call i32 @function_11efc(i32 %v2_d1c8, i32 9)
  %v0_d1d4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d1d4, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_d1c4
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_d1c4, %bb
  ret i32 %v2_d1d0

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_d1d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_d1d8:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_d1d8 = load i32, i32* @r4, align 4
  store i32 %v3_d1d8, i32* %stack_var_-36, align 4
  %v6_d1d8 = load i32, i32* @r5, align 4
  %v9_d1d8 = load i32, i32* @r6, align 4
  %v12_d1d8 = load i32, i32* @r7, align 4
  %v15_d1d8 = load i32, i32* @r8, align 4
  %v18_d1d8 = load i32, i32* @sb, align 4
  %v21_d1d8 = load i32, i32* @sl, align 4
  %v24_d1d8 = load i32, i32* @fp, align 4
  %v2_d1ec = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_d1ec, i32* @sl, align 4
  %v3_d1f4 = mul i32 %arg1, 65536
  store i32 %v3_d1f4, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_d200 = ptrtoint i32* %stack_var_-8773 to i32
  %v2_d20c = bitcast i32* %stack_var_-4677 to i8*
  %v3_d20c = call i32 @function_12430(i8* %v2_d20c, i32 0)
  store i32 4096, i32* @r2, align 4
  %v2_d224 = bitcast i32* %stack_var_-8773 to i8*
  %v3_d224 = call i32 @function_12430(i8* %v2_d224, i32 0)
  %v2_d228 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_d228, i32* @r6, align 4
  store i32 513, i32* @r2, align 4
  %v3_d248 = call i32 @function_12430(i8* nonnull %stack_var_-581, i32 0)
  %v2_d24c = ptrtoint i8* %stack_var_-68 to i32
  %v1_d254 = load i32, i32* @r5, align 4
  %v4_d254 = udiv i32 %v1_d254, 16777216
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_d274 = trunc i32 %v4_d254 to i8
  %v4_d274 = call i32 @function_1195c(i8 %v3_d274, i32 16, i32 %v2_d24c)
  %v2_d27c = call i32 @function_114f8(i8* nonnull %stack_var_-68)
  %v7_d280 = icmp eq i32 %v2_d27c, 2
  br i1 %v7_d280, label %dec_label_pc_d748, label %dec_label_pc_d288

dec_label_pc_d288:                                ; preds = %dec_label_pc_d1d8, %dec_label_pc_d748
  %v1_d28c = call i32 @function_10e30(i32 15)
  %v1_d294 = call i32 @function_10e30(i32 16)
  %v1_d29c = call i32 @function_10e30(i32 17)
  %v1_d2a4 = call i32 @function_10e30(i32 19)
  %v0_d2a8 = load i32, i32* @r4, align 4
  %v2_d2b0 = inttoptr i32 %v0_d2a8 to i32*
  %v3_d2b0 = call i32 @function_10d4c(i32 19, i32* %v2_d2b0)
  %v0_d2b4 = load i32, i32* @r4, align 4
  %v2_d2b8 = inttoptr i32 %v3_d2b0 to i8*
  %v3_d2b8 = call i32 @function_11f28(i8* %v2_d2b8, i32 %v0_d2b4)
  %v7_d2bc = icmp eq i32 %v3_d2b8, -1
  store i32 %v3_d2b8, i32* @r8, align 4
  br i1 %v7_d2bc, label %dec_label_pc_d6e4, label %dec_label_pc_d2c8.preheader

dec_label_pc_d2c8.preheader:                      ; preds = %dec_label_pc_d288
  %v4_d2d458 = call i32 @function_11750(i8* nonnull %stack_var_-581, i32 512, i32 %v3_d2b8)
  %v2_d2d860 = icmp eq i32 %v4_d2d458, 0
  br i1 %v2_d2d860, label %dec_label_pc_d468.loopexit, label %dec_label_pc_d2e0.lr.ph

dec_label_pc_d2e0.lr.ph:                          ; preds = %dec_label_pc_d2c8.preheader
  %v2_d328 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_d2e0

dec_label_pc_d2e0:                                ; preds = %dec_label_pc_d2e0.lr.ph, %dec_label_pc_d2c8.backedge
  %v3_d2e4 = load i8, i8* %stack_var_-581, align 1
  %v4_d2e4 = sext i8 %v3_d2e4 to i32
  %v2_d2e8 = icmp eq i8 %v3_d2e4, 0
  br i1 %v2_d2e8, label %bb126, label %bb

bb:                                               ; preds = %dec_label_pc_d2e0
  %v8_d2ec = icmp eq i8 %v3_d2e4, 58
  br i1 %v8_d2ec, label %.thread6, label %dec_label_pc_d300

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_d318

bb126:                                            ; preds = %dec_label_pc_d2e0
  br label %dec_label_pc_d318

dec_label_pc_d300:                                ; preds = %bb
  %v1_d308.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_d304

dec_label_pc_d304:                                ; preds = %bb127, %dec_label_pc_d300
  %v0_d304 = phi i32 [ %v1_d304, %bb127 ], [ 0, %dec_label_pc_d300 ]
  %v1_d304 = add i32 %v0_d304, 1
  %v2_d308 = add i32 %v1_d304, %v1_d308.pre
  %v3_d308 = inttoptr i32 %v2_d308 to i8*
  %v4_d308 = load i8, i8* %v3_d308, align 1
  %v6_d308 = zext i8 %v4_d308 to i32
  %v2_d30c = icmp eq i8 %v4_d308, 0
  br i1 %v2_d30c, label %dec_label_pc_d318, label %bb127

bb127:                                            ; preds = %dec_label_pc_d304
  %v8_d310 = icmp eq i8 %v4_d308, 58
  br i1 %v8_d310, label %dec_label_pc_d318, label %dec_label_pc_d304

dec_label_pc_d318:                                ; preds = %dec_label_pc_d304, %bb127, %bb126, %.thread6
  %v1_d344 = phi i32 [ 0, %.thread6 ], [ 0, %bb126 ], [ %v1_d304, %bb127 ], [ %v1_d304, %dec_label_pc_d304 ]
  %v0_d318 = phi i32 [ %v4_d2e4, %.thread6 ], [ %v4_d2e4, %bb126 ], [ %v6_d308, %bb127 ], [ %v6_d308, %dec_label_pc_d304 ]
  %v2_d318 = icmp eq i32 %v0_d318, 0
  br i1 %v2_d318, label %dec_label_pc_d2c8.backedge, label %dec_label_pc_d320

dec_label_pc_d2c8.backedge:                       ; preds = %dec_label_pc_d318, %dec_label_pc_d3f0, %dec_label_pc_d43c, %dec_label_pc_d364
  %v0_d2d0 = load i32, i32* @r8, align 4
  %v4_d2d4 = call i32 @function_11750(i8* nonnull %stack_var_-581, i32 512, i32 %v0_d2d0)
  %v2_d2d8 = icmp eq i32 %v4_d2d4, 0
  br i1 %v2_d2d8, label %dec_label_pc_d468.loopexit, label %dec_label_pc_d2e0

dec_label_pc_d320:                                ; preds = %dec_label_pc_d318
  %v1_d324 = add i32 %v1_d344, 2
  %v2_d32c = add i32 %v1_d324, %v2_d328
  %v1_d330 = add i32 %v2_d32c, -545
  %v2_d330 = inttoptr i32 %v1_d330 to i8*
  %v3_d330 = load i8, i8* %v2_d330, align 1
  %v2_d334 = icmp eq i8 %v3_d330, 0
  br i1 %v2_d334, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_d320
  %v8_d338 = icmp eq i8 %v3_d330, 32
  br i1 %v8_d338, label %.thread10, label %dec_label_pc_d344

.thread10:                                        ; preds = %bb128
  store i32 %v1_d324, i32* @r5, align 4
  br label %dec_label_pc_d364

bb129:                                            ; preds = %dec_label_pc_d320
  store i32 %v1_d324, i32* @r5, align 4
  br label %dec_label_pc_d364

dec_label_pc_d344:                                ; preds = %bb128
  %v0_d344 = load i32, i32* @r6, align 4
  %v2_d344 = add i32 %v0_d344, %v1_d344
  br label %dec_label_pc_d348

dec_label_pc_d348:                                ; preds = %bb130, %dec_label_pc_d344
  %v0_d35413 = phi i32 [ %v1_d354, %bb130 ], [ %v2_d344, %dec_label_pc_d344 ]
  %v1_d348 = add i32 %v0_d35413, 3
  %v2_d348 = inttoptr i32 %v1_d348 to i8*
  %v3_d348 = load i8, i8* %v2_d348, align 1
  %v2_d34c = icmp eq i8 %v3_d348, 0
  br i1 %v2_d34c, label %.thread12, label %bb130

.thread12:                                        ; preds = %dec_label_pc_d348
  %v1_d35414 = add i32 %v0_d35413, 1
  br label %dec_label_pc_d35c

bb130:                                            ; preds = %dec_label_pc_d348
  %v8_d350 = icmp eq i8 %v3_d348, 32
  %v1_d354 = add i32 %v0_d35413, 1
  br i1 %v8_d350, label %dec_label_pc_d35c, label %dec_label_pc_d348

dec_label_pc_d35c:                                ; preds = %bb130, %.thread12
  %v1_d35415 = phi i32 [ %v1_d35414, %.thread12 ], [ %v1_d354, %bb130 ]
  %v2_d35c = sub i32 %v1_d35415, %v0_d344
  %v1_d360 = add i32 %v2_d35c, 2
  store i32 %v1_d360, i32* @r5, align 4
  br label %dec_label_pc_d364

dec_label_pc_d364:                                ; preds = %bb129, %.thread10, %dec_label_pc_d35c
  %v1_d370 = phi i32 [ %v1_d324, %.thread10 ], [ %v1_d324, %bb129 ], [ %v1_d360, %dec_label_pc_d35c ]
  %v0_d364 = load i32, i32* @r6, align 4
  %v2_d364 = add i32 %v0_d364, %v1_d324
  store i32 %v2_d364, i32* @r4, align 4
  %v2_d370 = add i32 %v1_d370, %v2_d328
  store i32 0, i32* @r7, align 4
  %v3_d37c = add i32 %v2_d370, -545
  %v4_d37c = inttoptr i32 %v3_d37c to i8*
  store i8 0, i8* %v4_d37c, align 1
  %v1_d380 = inttoptr i32 %v2_d364 to i8*
  %v2_d380 = call i32 @function_114f8(i8* %v1_d380)
  store i32 %v2_d380, i32* @r1, align 4
  %v0_d38c = load i32, i32* @r4, align 4
  %v3_d390 = inttoptr i32 %v0_d38c to i8*
  %v4_d390 = call i32 @function_1184c(i8* %v3_d390, i32 %v2_d380, i32 %v2_d24c)
  %v7_d394 = icmp eq i32 %v4_d390, -1
  br i1 %v7_d394, label %dec_label_pc_d2c8.backedge, label %dec_label_pc_d3b0.preheader

dec_label_pc_d3b0.preheader:                      ; preds = %dec_label_pc_d364
  %v1_d398 = load i32, i32* @r7, align 4
  %v1_d39c = load i32, i32* @r6, align 4
  %v2_d39c = load i32, i32* @r5, align 4
  %v3_d39c = add i32 %v2_d39c, %v1_d39c
  store i32 %v1_d398, i32* @lr, align 4
  store i32 %v1_d398, i32* @r4, align 4
  %v1_d3b050 = add i32 %v3_d39c, 2
  %v2_d3b051 = inttoptr i32 %v1_d3b050 to i8*
  %v3_d3b052 = load i8, i8* %v2_d3b051, align 1
  %v2_d3b454 = icmp eq i8 %v3_d3b052, 0
  %v1_d3b856 = add i32 %v2_d39c, 2
  br i1 %v2_d3b454, label %dec_label_pc_d3f0, label %dec_label_pc_d3c0

dec_label_pc_d3c0:                                ; preds = %dec_label_pc_d3b0.preheader, %dec_label_pc_d3b0.backedge
  %v0_d3f086 = phi i32 [ %v0_d3f085, %dec_label_pc_d3b0.backedge ], [ %v1_d398, %dec_label_pc_d3b0.preheader ]
  %v0_d3d8.pr = phi i32 [ %v0_d3d8.pr71, %dec_label_pc_d3b0.backedge ], [ %v1_d398, %dec_label_pc_d3b0.preheader ]
  %v0_d6f4 = phi i32 [ %v0_d6f474, %dec_label_pc_d3b0.backedge ], [ %v1_d398, %dec_label_pc_d3b0.preheader ]
  %v0_d3b882 = phi i32 [ %v1_d3b8, %dec_label_pc_d3b0.backedge ], [ %v1_d3b856, %dec_label_pc_d3b0.preheader ]
  %v0_d3e8 = phi i32 [ %v0_d3b0, %dec_label_pc_d3b0.backedge ], [ %v3_d39c, %dec_label_pc_d3b0.preheader ]
  %v1_d3c4.in = phi i8 [ %v3_d3b0, %dec_label_pc_d3b0.backedge ], [ %v3_d3b052, %dec_label_pc_d3b0.preheader ]
  %v7_d3c0 = icmp eq i8 %v1_d3c4.in, 9
  br i1 %v7_d3c0, label %.thread23, label %bb131

bb131:                                            ; preds = %dec_label_pc_d3c0
  %v8_d3c4 = icmp eq i8 %v1_d3c4.in, 32
  br i1 %v8_d3c4, label %.thread23.thread35, label %dec_label_pc_d3d8

.thread23.thread35:                               ; preds = %bb131
  br label %dec_label_pc_d3e4

.thread23:                                        ; preds = %dec_label_pc_d3c0
  br label %dec_label_pc_d3e4

dec_label_pc_d3d8:                                ; preds = %bb131
  %v7_d3d8 = icmp eq i32 %v0_d3d8.pr, 1
  br i1 %v7_d3d8, label %dec_label_pc_d6f4, label %dec_label_pc_d3e0

dec_label_pc_d3e0:                                ; preds = %dec_label_pc_d6f4, %dec_label_pc_d3d8
  %v0_d3e479 = phi i32 [ %v1_d6f4, %dec_label_pc_d6f4 ], [ %v0_d6f4, %dec_label_pc_d3d8 ]
  br label %dec_label_pc_d3e4

dec_label_pc_d3e4:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_d3e0
  %v0_d3e4 = phi i32 [ %v0_d6f4, %.thread23.thread35 ], [ %v0_d6f4, %.thread23 ], [ %v0_d3e479, %dec_label_pc_d3e0 ]
  %v0_d3d8.pr72 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_d3e0 ]
  %v7_d3ec = icmp sgt i32 %v0_d3e4, 6
  br i1 %v7_d3ec, label %dec_label_pc_d3f0, label %dec_label_pc_d3b0.backedge

dec_label_pc_d3f0:                                ; preds = %dec_label_pc_d3b0.backedge, %dec_label_pc_d3e4, %dec_label_pc_d3b0.preheader
  %v1_d440 = phi i32 [ %v1_d3b856, %dec_label_pc_d3b0.preheader ], [ %v1_d3b8, %dec_label_pc_d3b0.backedge ], [ %v0_d3b882, %dec_label_pc_d3e4 ]
  %v0_d3f0 = phi i32 [ %v1_d398, %dec_label_pc_d3b0.preheader ], [ %v0_d3f085, %dec_label_pc_d3b0.backedge ], [ %v0_d3f086, %dec_label_pc_d3e4 ]
  %v2_d3f0 = icmp eq i32 %v0_d3f0, 0
  br i1 %v2_d3f0, label %dec_label_pc_d2c8.backedge, label %dec_label_pc_d3fc

dec_label_pc_d3fc:                                ; preds = %dec_label_pc_d3f0
  %v2_d404 = add i32 %v1_d440, %v2_d328
  %v1_d408 = add i32 %v2_d404, -545
  %v2_d408 = inttoptr i32 %v1_d408 to i8*
  %v3_d408 = load i8, i8* %v2_d408, align 1
  %v2_d40c = icmp eq i8 %v3_d408, 0
  br i1 %v2_d40c, label %dec_label_pc_d43c, label %bb132

bb132:                                            ; preds = %dec_label_pc_d3fc
  %v8_d410 = icmp eq i8 %v3_d408, 32
  br i1 %v8_d410, label %dec_label_pc_d43c, label %dec_label_pc_d418

dec_label_pc_d418:                                ; preds = %bb132
  %v2_d418 = add i32 %v1_d440, %v1_d39c
  br label %dec_label_pc_d41c

dec_label_pc_d41c:                                ; preds = %bb133, %dec_label_pc_d418
  %v0_d42828 = phi i32 [ %v1_d428, %bb133 ], [ %v1_d440, %dec_label_pc_d418 ]
  %v0_d41c = phi i32 [ %v1_d41c, %bb133 ], [ %v2_d418, %dec_label_pc_d418 ]
  %v1_d41c = add i32 %v0_d41c, 1
  %v2_d41c = inttoptr i32 %v1_d41c to i8*
  %v3_d41c = load i8, i8* %v2_d41c, align 1
  %v2_d420 = icmp eq i8 %v3_d41c, 0
  br i1 %v2_d420, label %.thread27, label %bb133

.thread27:                                        ; preds = %dec_label_pc_d41c
  %v1_d42829 = add i32 %v0_d42828, 1
  br label %dec_label_pc_d430

bb133:                                            ; preds = %dec_label_pc_d41c
  %v8_d424 = icmp eq i8 %v3_d41c, 32
  %v1_d428 = add i32 %v0_d42828, 1
  br i1 %v8_d424, label %dec_label_pc_d430, label %dec_label_pc_d41c

dec_label_pc_d430:                                ; preds = %bb133, %.thread27
  %v1_d438 = phi i32 [ %v1_d42829, %.thread27 ], [ %v1_d428, %bb133 ]
  %v2_d438 = add i32 %v1_d438, %v2_d328
  br label %dec_label_pc_d43c

dec_label_pc_d43c:                                ; preds = %dec_label_pc_d3fc, %bb132, %dec_label_pc_d430
  %v2_d448 = phi i32 [ %v2_d404, %dec_label_pc_d3fc ], [ %v2_d404, %bb132 ], [ %v2_d438, %dec_label_pc_d430 ]
  %v2_d440 = add i32 %v1_d440, %v1_d39c
  store i32 %v2_d440, i32* @r4, align 4
  %v3_d448 = add i32 %v2_d448, -545
  %v4_d448 = inttoptr i32 %v3_d448 to i8*
  store i8 0, i8* %v4_d448, align 1
  %v1_d44c = inttoptr i32 %v2_d440 to i8*
  %v2_d44c = call i32 @function_114f8(i8* %v1_d44c)
  %v8_d454 = icmp sgt i32 %v2_d44c, 15
  br i1 %v8_d454, label %dec_label_pc_d2c8.backedge, label %dec_label_pc_d458

dec_label_pc_d458:                                ; preds = %dec_label_pc_d43c
  %v0_d45c = load i32, i32* @r4, align 4
  %v2_d460 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_d460, i32* @r0, align 4
  %v2_d464 = bitcast i32* %stack_var_-52 to i8*
  %v3_d464 = call i32 @function_11520(i8* %v2_d464, i32 %v0_d45c)
  br label %dec_label_pc_d468

dec_label_pc_d468.loopexit:                       ; preds = %dec_label_pc_d2c8.backedge, %dec_label_pc_d2c8.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre95 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_d468

dec_label_pc_d468:                                ; preds = %dec_label_pc_d468.loopexit, %dec_label_pc_d458
  %v1_d478.pre-phi = phi i8* [ %.pre95, %dec_label_pc_d468.loopexit ], [ %v2_d464, %dec_label_pc_d458 ]
  %v2_d474.pre-phi = phi i32 [ %.pre, %dec_label_pc_d468.loopexit ], [ %v2_d460, %dec_label_pc_d458 ]
  %v0_d468 = load i32, i32* @r8, align 4
  %v1_d46c = call i32 @function_11dfc(i32 %v0_d468)
  %v2_d478 = call i32 @function_114f8(i8* %v1_d478.pre-phi)
  store i32 %v2_d478, i32* @r4, align 4
  %v2_d47c = icmp eq i32 %v2_d478, 0
  br i1 %v2_d47c, label %dec_label_pc_d724, label %dec_label_pc_d484

dec_label_pc_d484:                                ; preds = %dec_label_pc_d468
  %v3_d48c = call i32 @function_10d4c(i32 15, i32* null)
  store i32 %v3_d48c, i32* @r0, align 4
  %v1_d490 = call i32 @function_12204(i32 %v3_d48c)
  store i32 %v1_d490, i32* @r8, align 4
  %v2_d494 = icmp eq i32 %v1_d490, 0
  br i1 %v2_d494, label %dec_label_pc_d6c4, label %dec_label_pc_d4a4.preheader

dec_label_pc_d4a4.preheader:                      ; preds = %dec_label_pc_d484
  store i32 0, i32* @r5, align 4
  %v1_d4a845 = inttoptr i32 %v1_d490 to i32*
  %v2_d4a846 = call i32 @function_12300(i32* %v1_d4a845)
  %v2_d4ac48 = icmp eq i32 %v2_d4a846, 0
  br i1 %v2_d4ac48, label %dec_label_pc_d6b8, label %dec_label_pc_d4b4.preheader

dec_label_pc_d4a4.loopexit:                       ; preds = %dec_label_pc_d4bc, %dec_label_pc_d4d0, %dec_label_pc_d538
  %v0_d4a4 = load i32, i32* @r8, align 4
  %v1_d4a8 = inttoptr i32 %v0_d4a4 to i32*
  %v2_d4a8 = call i32 @function_12300(i32* %v1_d4a8)
  %v2_d4ac = icmp eq i32 %v2_d4a8, 0
  br i1 %v2_d4ac, label %dec_label_pc_d6b8, label %dec_label_pc_d4b4.preheader

dec_label_pc_d4b4.preheader:                      ; preds = %dec_label_pc_d4a4.preheader, %dec_label_pc_d4a4.loopexit
  %v0_d4bc94 = phi i32 [ %v2_d4a8, %dec_label_pc_d4a4.loopexit ], [ %v2_d4a846, %dec_label_pc_d4a4.preheader ]
  br label %dec_label_pc_d4b4

dec_label_pc_d4b4:                                ; preds = %dec_label_pc_d4b4.preheader, %dec_label_pc_d6a0
  %v0_d4c8 = phi i32 [ %v0_d4bc94, %dec_label_pc_d4b4.preheader ], [ %v2_d6ac, %dec_label_pc_d6a0 ]
  %v0_d4b4 = load i32, i32* @r5, align 4
  %v2_d4b4 = icmp eq i32 %v0_d4b4, 0
  br i1 %v2_d4b4, label %dec_label_pc_d4bc, label %dec_label_pc_d6b8

dec_label_pc_d4bc:                                ; preds = %dec_label_pc_d4b4
  %v1_d4bc = add i32 %v0_d4c8, 11
  %v2_d4bc = inttoptr i32 %v1_d4bc to i8*
  %v3_d4bc = load i8, i8* %v2_d4bc, align 1
  %v4_d4bc = zext i8 %v3_d4bc to i32
  %v1_d4c0 = add nsw i32 %v4_d4bc, -48
  store i32 %v1_d4bc, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_d4c0, 9
  br i1 %tmp, label %dec_label_pc_d4a4.loopexit, label %dec_label_pc_d4d0

dec_label_pc_d4d0:                                ; preds = %dec_label_pc_d4bc
  %v3_d4d8 = call i32 @function_10d4c(i32 15, i32* null)
  store i32 %v2_d1ec, i32* @r0, align 4
  %v3_d4e4 = call i32 @function_11520(i8* %v2_d20c, i32 %v3_d4d8)
  %v2_d4ec = call i32 @function_114f8(i8* %v2_d20c)
  %v0_d4f0 = load i32, i32* @r7, align 4
  %v0_d4f4 = load i32, i32* @sl, align 4
  %v2_d4f4 = add i32 %v0_d4f4, %v2_d4ec
  store i32 %v2_d4f4, i32* @r0, align 4
  %v2_d4f8 = inttoptr i32 %v2_d4f4 to i8*
  %v3_d4f8 = call i32 @function_11520(i8* %v2_d4f8, i32 %v0_d4f0)
  %v2_d500 = call i32 @function_114f8(i8* %v2_d20c)
  %v0_d504 = load i32, i32* @r5, align 4
  store i32 %v2_d500, i32* @r4, align 4
  %v2_d510 = inttoptr i32 %v0_d504 to i32*
  %v3_d510 = call i32 @function_10d4c(i32 16, i32* %v2_d510)
  %v0_d518 = load i32, i32* @sl, align 4
  %v1_d518 = load i32, i32* @r4, align 4
  %v2_d518 = add i32 %v1_d518, %v0_d518
  store i32 %v2_d518, i32* @r0, align 4
  %v2_d51c = inttoptr i32 %v2_d518 to i8*
  %v3_d51c = call i32 @function_11520(i8* %v2_d51c, i32 %v3_d510)
  %v4_d52c = call i32 @function_11ff0(i8* %v2_d20c, i32 %v2_d200, i32 4096)
  %v7_d530 = icmp eq i32 %v4_d52c, -1
  br i1 %v7_d530, label %dec_label_pc_d4a4.loopexit, label %dec_label_pc_d538

dec_label_pc_d538:                                ; preds = %dec_label_pc_d4d0
  %v0_d538 = load i32, i32* @r5, align 4
  %v2_d540 = inttoptr i32 %v0_d538 to i32*
  %v3_d540 = call i32 @function_10d4c(i32 15, i32* %v2_d540)
  store i32 %v2_d1ec, i32* @r0, align 4
  %v3_d54c = call i32 @function_11520(i8* %v2_d20c, i32 %v3_d540)
  %v2_d554 = call i32 @function_114f8(i8* %v2_d20c)
  %v0_d558 = load i32, i32* @r7, align 4
  %v0_d55c = load i32, i32* @sl, align 4
  %v2_d55c = add i32 %v0_d55c, %v2_d554
  store i32 %v2_d55c, i32* @r0, align 4
  %v2_d560 = inttoptr i32 %v2_d55c to i8*
  %v3_d560 = call i32 @function_11520(i8* %v2_d560, i32 %v0_d558)
  %v2_d568 = call i32 @function_114f8(i8* %v2_d20c)
  %v0_d56c = load i32, i32* @r5, align 4
  store i32 %v2_d568, i32* @r4, align 4
  %v2_d578 = inttoptr i32 %v0_d56c to i32*
  %v3_d578 = call i32 @function_10d4c(i32 17, i32* %v2_d578)
  %v0_d580 = load i32, i32* @sl, align 4
  %v1_d580 = load i32, i32* @r4, align 4
  %v2_d580 = add i32 %v1_d580, %v0_d580
  store i32 %v2_d580, i32* @r0, align 4
  %v2_d584 = inttoptr i32 %v2_d580 to i8*
  %v3_d584 = call i32 @function_11520(i8* %v2_d584, i32 %v3_d578)
  store i32 %v2_d1ec, i32* @r0, align 4
  %v1_d58c = call i32 @function_12204(i32 %v2_d1ec)
  store i32 %v1_d58c, i32* @sb, align 4
  %v2_d590 = icmp eq i32 %v1_d58c, 0
  br i1 %v2_d590, label %dec_label_pc_d4a4.loopexit, label %dec_label_pc_d598.preheader

dec_label_pc_d598.preheader:                      ; preds = %dec_label_pc_d538
  %v1_d59c40 = inttoptr i32 %v1_d58c to i32*
  %v2_d59c41 = call i32 @function_12300(i32* %v1_d59c40)
  store i32 %v2_d59c41, i32* @r6, align 4
  %v2_d5a043 = icmp eq i32 %v2_d59c41, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d200, i32* @r0, align 4
  br i1 %v2_d5a043, label %dec_label_pc_d6a0, label %dec_label_pc_d5b0thread-pre-split

dec_label_pc_d598.loopexit:                       ; preds = %dec_label_pc_d5b8, %dec_label_pc_d650
  %v0_d598 = load i32, i32* @sb, align 4
  %v1_d59c = inttoptr i32 %v0_d598 to i32*
  %v2_d59c = call i32 @function_12300(i32* %v1_d59c)
  store i32 %v2_d59c, i32* @r6, align 4
  %v2_d5a0 = icmp eq i32 %v2_d59c, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d200, i32* @r0, align 4
  br i1 %v2_d5a0, label %dec_label_pc_d6a0, label %dec_label_pc_d5b0thread-pre-split

dec_label_pc_d5b0thread-pre-split:                ; preds = %dec_label_pc_d598.preheader, %dec_label_pc_d598.loopexit
  %v0_d5b0.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_d5b0

dec_label_pc_d5b0:                                ; preds = %dec_label_pc_d5b0thread-pre-split, %dec_label_pc_d678
  %v0_d5b0 = phi i32 [ %v0_d5b0.pr, %dec_label_pc_d5b0thread-pre-split ], [ 1, %dec_label_pc_d678 ]
  %v2_d5b0 = icmp eq i32 %v0_d5b0, 0
  br i1 %v2_d5b0, label %dec_label_pc_d5b8, label %dec_label_pc_d6a0

dec_label_pc_d5b8:                                ; preds = %dec_label_pc_d5b0
  %v0_d5b8 = call i32 @function_11598()
  %v0_d5bc = load i32, i32* @r5, align 4
  %v2_d5c4 = inttoptr i32 %v0_d5bc to i32*
  %v3_d5c4 = call i32 @function_10d4c(i32 15, i32* %v2_d5c4)
  store i32 %v2_d1ec, i32* @r0, align 4
  %v3_d5d0 = call i32 @function_11520(i8* %v2_d20c, i32 %v3_d5c4)
  %v2_d5d8 = call i32 @function_114f8(i8* %v2_d20c)
  %v0_d5dc = load i32, i32* @r7, align 4
  %v0_d5e0 = load i32, i32* @sl, align 4
  %v2_d5e0 = add i32 %v0_d5e0, %v2_d5d8
  store i32 %v2_d5e0, i32* @r0, align 4
  %v2_d5e4 = inttoptr i32 %v2_d5e0 to i8*
  %v3_d5e4 = call i32 @function_11520(i8* %v2_d5e4, i32 %v0_d5dc)
  %v2_d5ec = call i32 @function_114f8(i8* %v2_d20c)
  %v0_d5f0 = load i32, i32* @r5, align 4
  store i32 %v2_d5ec, i32* @r4, align 4
  %v2_d5fc = inttoptr i32 %v0_d5f0 to i32*
  %v3_d5fc = call i32 @function_10d4c(i32 17, i32* %v2_d5fc)
  %v0_d604 = load i32, i32* @sl, align 4
  %v1_d604 = load i32, i32* @r4, align 4
  %v2_d604 = add i32 %v1_d604, %v0_d604
  store i32 %v2_d604, i32* @r0, align 4
  %v2_d608 = inttoptr i32 %v2_d604 to i8*
  %v3_d608 = call i32 @function_11520(i8* %v2_d608, i32 %v3_d5fc)
  %v2_d610 = call i32 @function_114f8(i8* %v2_d20c)
  %v0_d618 = load i32, i32* @sl, align 4
  %v2_d618 = add i32 %v0_d618, %v2_d610
  store i32 %v2_d618, i32* @r0, align 4
  %v2_d61c = inttoptr i32 %v2_d618 to i8*
  %v3_d61c = call i32 @function_11520(i8* %v2_d61c, i32 ptrtoint (i32* @global_var_14694.64 to i32))
  %v2_d624 = call i32 @function_114f8(i8* %v2_d20c)
  %v0_d628 = load i32, i32* @r6, align 4
  %v1_d628 = add i32 %v0_d628, 11
  %v0_d62c = load i32, i32* @sl, align 4
  %v2_d62c = add i32 %v0_d62c, %v2_d624
  store i32 %v2_d62c, i32* @r0, align 4
  %v2_d630 = inttoptr i32 %v2_d62c to i8*
  %v3_d630 = call i32 @function_11520(i8* %v2_d630, i32 %v1_d628)
  %v4_d640 = call i32 @function_11ff0(i8* %v2_d20c, i32 %v2_d200, i32 4096)
  %v7_d644 = icmp eq i32 %v4_d640, -1
  br i1 %v7_d644, label %dec_label_pc_d598.loopexit, label %dec_label_pc_d650

dec_label_pc_d650:                                ; preds = %dec_label_pc_d5b8
  %v2_d650 = call i32 @function_114f8(i8* %v2_d224)
  store i32 %v2_d650, i32* @r1, align 4
  %v4_d664 = call i32 @function_1184c(i8* %v2_d224, i32 %v2_d650, i32 %v2_d474.pre-phi)
  %v7_d668 = icmp eq i32 %v4_d664, -1
  br i1 %v7_d668, label %dec_label_pc_d598.loopexit, label %dec_label_pc_d678

dec_label_pc_d678:                                ; preds = %dec_label_pc_d650
  %v0_d670 = load i32, i32* @r7, align 4
  %v2_d678 = inttoptr i32 %v0_d670 to i8*
  %v3_d678 = call i32 @function_11624(i8* %v2_d678, i32 10)
  %v2_d680 = call i32 @function_11efc(i32 %v3_d678, i32 9)
  %v0_d684 = load i32, i32* @sb, align 4
  %v1_d688 = inttoptr i32 %v0_d684 to i32*
  %v2_d688 = call i32 @function_12300(i32* %v1_d688)
  store i32 %v2_d688, i32* @r6, align 4
  %v2_d68c = icmp eq i32 %v2_d688, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d200, i32* @r0, align 4
  br i1 %v2_d68c, label %dec_label_pc_d6a0, label %dec_label_pc_d5b0

dec_label_pc_d6a0:                                ; preds = %dec_label_pc_d598.loopexit, %dec_label_pc_d678, %dec_label_pc_d5b0, %dec_label_pc_d598.preheader
  %v0_d6a0 = load i32, i32* @sb, align 4
  %v1_d6a4 = inttoptr i32 %v0_d6a0 to i32*
  %v2_d6a4 = call i32 @function_12150(i32* %v1_d6a4)
  %v0_d6a8 = load i32, i32* @r8, align 4
  %v1_d6ac = inttoptr i32 %v0_d6a8 to i32*
  %v2_d6ac = call i32 @function_12300(i32* %v1_d6ac)
  %v2_d6b0 = icmp eq i32 %v2_d6ac, 0
  br i1 %v2_d6b0, label %dec_label_pc_d6b8, label %dec_label_pc_d4b4

dec_label_pc_d6b8:                                ; preds = %dec_label_pc_d4a4.loopexit, %dec_label_pc_d6a0, %dec_label_pc_d4b4, %dec_label_pc_d4a4.preheader
  %v0_d6b8 = load i32, i32* @r8, align 4
  %v1_d6bc = inttoptr i32 %v0_d6b8 to i32*
  %v2_d6bc = call i32 @function_12150(i32* %v1_d6bc)
  %v0_d6c0 = load i32, i32* @r5, align 4
  %v1_d6c0 = urem i32 %v0_d6c0, 256
  br label %dec_label_pc_d6c4

dec_label_pc_d6c4:                                ; preds = %dec_label_pc_d484, %dec_label_pc_d6b8
  %storemerge = phi i32 [ %v1_d6c0, %dec_label_pc_d6b8 ], [ 0, %dec_label_pc_d484 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_d6c8 = call i32 @function_13228(i32 1)
  %v1_d6d0 = call i32 @function_10d78(i32 15)
  %v1_d6d8 = call i32 @function_10d78(i32 16)
  %v1_d6e0 = call i32 @function_10d78(i32 17)
  br label %dec_label_pc_d6e4

dec_label_pc_d6e4:                                ; preds = %dec_label_pc_d288, %dec_label_pc_d724, %dec_label_pc_d6c4
  %v0_d6e4 = load i32, i32* @r4, align 4
  %v2_d6f0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_d6f0, i32* @r4, align 4
  store i32 %v6_d1d8, i32* @r5, align 4
  store i32 %v9_d1d8, i32* @r6, align 4
  store i32 %v12_d1d8, i32* @r7, align 4
  store i32 %v15_d1d8, i32* @r8, align 4
  store i32 %v18_d1d8, i32* @sb, align 4
  store i32 %v21_d1d8, i32* @sl, align 4
  store i32 %v24_d1d8, i32* @fp, align 4
  ret i32 %v0_d6e4

dec_label_pc_d6f4:                                ; preds = %dec_label_pc_d3d8
  %v1_d6f4 = add i32 %v0_d6f4, 1
  store i32 %v1_d6f4, i32* @lr, align 4
  %v7_d6f8 = icmp eq i32 %v0_d6f4, 0
  br i1 %v7_d6f8, label %dec_label_pc_d700, label %dec_label_pc_d3e0

dec_label_pc_d700:                                ; preds = %dec_label_pc_d6f4
  %v1_d700 = add i32 %v0_d3e8, 3
  %v2_d700 = inttoptr i32 %v1_d700 to i8*
  %v3_d700 = load i8, i8* %v2_d700, align 1
  %v7_d704 = icmp eq i8 %v3_d700, 65
  br i1 %v7_d704, label %dec_label_pc_d714, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_d700
  br label %dec_label_pc_d3b0.backedge

dec_label_pc_d714:                                ; preds = %dec_label_pc_d700
  store i32 %v1_d6f4, i32* @r4, align 4
  br label %dec_label_pc_d3b0.backedge

dec_label_pc_d3b0.backedge:                       ; preds = %.thread33, %dec_label_pc_d714, %dec_label_pc_d3e4
  %v0_d3f085 = phi i32 [ %v1_d6f4, %dec_label_pc_d714 ], [ %v0_d3f086, %dec_label_pc_d3e4 ], [ %v0_d3f086, %.thread33 ]
  %v0_d6f474 = phi i32 [ %v1_d6f4, %dec_label_pc_d714 ], [ %v0_d3e4, %dec_label_pc_d3e4 ], [ %v1_d6f4, %.thread33 ]
  %v0_d3d8.pr71 = phi i32 [ 0, %dec_label_pc_d714 ], [ %v0_d3d8.pr72, %dec_label_pc_d3e4 ], [ 0, %.thread33 ]
  %v0_d3b0 = add i32 %v0_d3e8, 1
  %v1_d3b0 = add i32 %v0_d3e8, 3
  %v2_d3b0 = inttoptr i32 %v1_d3b0 to i8*
  %v3_d3b0 = load i8, i8* %v2_d3b0, align 1
  %v2_d3b4 = icmp eq i8 %v3_d3b0, 0
  %v1_d3b8 = add i32 %v0_d3b882, 1
  br i1 %v2_d3b4, label %dec_label_pc_d3f0, label %dec_label_pc_d3c0

dec_label_pc_d724:                                ; preds = %dec_label_pc_d468
  %v1_d728 = call i32 @function_10d78(i32 15)
  %v1_d730 = call i32 @function_10d78(i32 16)
  %v1_d738 = call i32 @function_10d78(i32 17)
  %v1_d740 = call i32 @function_10d78(i32 19)
  br label %dec_label_pc_d6e4

dec_label_pc_d748:                                ; preds = %dec_label_pc_d1d8
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_d288

; uselistorder directives
  uselistorder i32 %v1_d3b8, { 1, 0 }
  uselistorder i8 %v3_d3b0, { 1, 0 }
  uselistorder i32 %v0_d3f085, { 1, 0 }
  uselistorder i32 %v1_d6f4, { 4, 3, 0, 2, 5, 1 }
  uselistorder i32 %v2_d6ac, { 1, 0 }
  uselistorder i32 %v1_d41c, { 1, 0 }
  uselistorder i32 %v0_d42828, { 1, 0 }
  uselistorder i32 %v1_d440, { 0, 3, 1, 2 }
  uselistorder i32 %v0_d3e4, { 1, 0 }
  uselistorder i32 %v0_d3b882, { 1, 0 }
  uselistorder i32 %v0_d6f4, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_d3f086, { 1, 2, 0 }
  uselistorder i32 %v1_d3b856, { 1, 0 }
  uselistorder i32 %v2_d39c, { 1, 0 }
  uselistorder i32 %v1_d398, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v0_d35413, { 1, 0, 2 }
  uselistorder i32 %v0_d344, { 1, 0 }
  uselistorder i32 %v1_d324, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_d2b8, { 1, 2, 0 }
  uselistorder i32 %v2_d200, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_d1ec, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32)* @function_11624, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_11750, { 1, 0 }
  uselistorder label %dec_label_pc_d3b0.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d6e4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d6c4, { 1, 0 }
  uselistorder label %dec_label_pc_d6b8, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_d6a0, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_d5b0, { 1, 0 }
  uselistorder label %dec_label_pc_d5b0thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_d598.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_d4b4, { 1, 0 }
  uselistorder label %dec_label_pc_d4b4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_d4a4.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d43c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d3e4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d3c0, { 1, 0 }
  uselistorder label %dec_label_pc_d364, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d2c8.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_d318, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_d2e0, { 1, 0 }
  uselistorder label %dec_label_pc_d288, { 1, 0 }
}

define i32 @function_d774(i32 %arg1) local_unnamed_addr {
dec_label_pc_d774:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-8412 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-4260 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-244 = alloca i32, align 4
  %stack_var_-8436 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_d774 = load i32, i32* @r4, align 4
  store i32 %v3_d774, i32* %stack_var_-36, align 4
  %v6_d774 = load i32, i32* @r5, align 4
  %v9_d774 = load i32, i32* @r6, align 4
  %v12_d774 = load i32, i32* @r7, align 4
  %v15_d774 = load i32, i32* @r8, align 4
  %v18_d774 = load i32, i32* @sb, align 4
  %v21_d774 = load i32, i32* @sl, align 4
  %v24_d774 = load i32, i32* @fp, align 4
  %v2_d784 = call i32 @function_120cc(i32* null)
  store i32 %v2_d784, i32* @sl, align 4
  %v0_d78c = call i32 @function_11e28()
  %v7_d790 = icmp eq i32 %v0_d78c, -1
  %. = zext i1 %v7_d790 to i32
  %tmp233 = icmp slt i32 %v0_d78c, 1
  %storemerge194 = select i1 %tmp233, i32 %., i32 1
  store i32 %storemerge194, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1d23c.62 to i32), i32* %r3.global-to-local, align 4
  %v2_d7ac = icmp eq i32 %storemerge194, 0
  store i32 %v0_d78c, i32* @global_var_1d23c.62, align 4
  br i1 %v2_d7ac, label %dec_label_pc_d7c4, label %dec_label_pc_d7b8

dec_label_pc_d7b8:                                ; preds = %dec_label_pc_dad8, %dec_label_pc_d9b0, %dec_label_pc_d774
  %v29_d7c0 = phi i32 [ %v3_da68, %dec_label_pc_d9b0 ], [ %v0_d78c, %dec_label_pc_d774 ], [ 0, %dec_label_pc_dad8 ]
  %v2_d7c0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_d7c0, i32* @r4, align 4
  store i32 %v6_d774, i32* @r5, align 4
  store i32 %v9_d774, i32* @r6, align 4
  store i32 %v12_d774, i32* @r7, align 4
  store i32 %v15_d774, i32* @r8, align 4
  store i32 %v18_d774, i32* @sb, align 4
  store i32 %v21_d774, i32* @sl, align 4
  store i32 %v24_d774, i32* @fp, align 4
  ret i32 %v29_d7c0

dec_label_pc_d7c4:                                ; preds = %dec_label_pc_d774
  %v2_d7c4 = ptrtoint i32* %stack_var_-244 to i32
  store i32 %v2_d7c4, i32* %r1.global-to-local, align 4
  store i32 2, i32* @r6, align 4
  store i32 2, i32* %stack_var_-76, align 4
  %v1_d7e0 = call i32 @function_d1d8(i32 58811)
  store i32 %v2_d7c4, i32* %r3.global-to-local, align 4
  %v0_d7f8 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d800 = load i32, i32* @r5, align 4
  store i32 %v0_d800, i32* %r2.global-to-local, align 4
  %v3_d808 = call i32 @function_1270c(i32 %v0_d7f8, i32 1, i32 %v0_d800)
  %v7_d80c = icmp eq i32 %v3_d808, -1
  store i32 %v3_d808, i32* @r4, align 4
  br i1 %v7_d80c, label %dec_label_pc_d834, label %dec_label_pc_d818

dec_label_pc_d818:                                ; preds = %dec_label_pc_d7c4
  %v2_d81c = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d81c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d824 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_d824 = call i32 @function_1253c(i32 %v3_d808, %sockaddr* %v3_d824, i32 16)
  %v0_d828 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d830 = call i32 @function_125f0(i32 %v0_d828, i32 1)
  br label %dec_label_pc_d834

dec_label_pc_d834:                                ; preds = %dec_label_pc_d7c4, %dec_label_pc_d818
  %v1_d83c = call i32 @function_d1d8(i32 50951)
  store i32 %v2_d7c4, i32* %r3.global-to-local, align 4
  %v0_d854 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d85c = load i32, i32* @r5, align 4
  store i32 %v0_d85c, i32* %r2.global-to-local, align 4
  %v3_d864 = call i32 @function_1270c(i32 %v0_d854, i32 1, i32 %v0_d85c)
  %v7_d868 = icmp eq i32 %v3_d864, -1
  store i32 %v3_d864, i32* @r4, align 4
  br i1 %v7_d868, label %dec_label_pc_d890, label %dec_label_pc_d874

dec_label_pc_d874:                                ; preds = %dec_label_pc_d834
  %v2_d878 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d878, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d880 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_d880 = call i32 @function_1253c(i32 %v3_d864, %sockaddr* %v3_d880, i32 16)
  %v0_d884 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d88c = call i32 @function_125f0(i32 %v0_d884, i32 1)
  br label %dec_label_pc_d890

dec_label_pc_d890:                                ; preds = %dec_label_pc_d834, %dec_label_pc_d874
  %v0_d890 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d898 = load i32, i32* @r5, align 4
  store i32 %v0_d898, i32* %r2.global-to-local, align 4
  %v3_d89c = call i32 @function_1270c(i32 %v0_d890, i32 1, i32 %v0_d898)
  %v7_d8a0 = icmp eq i32 %v3_d89c, -1
  store i32 %v3_d89c, i32* @r4, align 4
  br i1 %v7_d8a0, label %dec_label_pc_d8c8, label %dec_label_pc_d8ac

dec_label_pc_d8ac:                                ; preds = %dec_label_pc_d890
  %v2_d8b0 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d8b0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d8b8 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_d8b8 = call i32 @function_1253c(i32 %v3_d89c, %sockaddr* %v3_d8b8, i32 16)
  %v0_d8bc = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d8c4 = call i32 @function_125f0(i32 %v0_d8bc, i32 1)
  br label %dec_label_pc_d8c8

dec_label_pc_d8c8:                                ; preds = %dec_label_pc_d890, %dec_label_pc_d8ac
  %v1_d8cc = call i32 @function_d1d8(i32 5632)
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_d8d8 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d8e0 = load i32, i32* @r5, align 4
  store i32 %v0_d8e0, i32* %r2.global-to-local, align 4
  %v3_d8ec = call i32 @function_1270c(i32 %v0_d8d8, i32 1, i32 %v0_d8e0)
  %v7_d8f0 = icmp eq i32 %v3_d8ec, -1
  store i32 %v3_d8ec, i32* @r4, align 4
  br i1 %v7_d8f0, label %dec_label_pc_d918, label %dec_label_pc_d8fc

dec_label_pc_d8fc:                                ; preds = %dec_label_pc_d8c8
  %v2_d900 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d900, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d908 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_d908 = call i32 @function_1253c(i32 %v3_d8ec, %sockaddr* %v3_d908, i32 16)
  %v0_d90c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d914 = call i32 @function_125f0(i32 %v0_d90c, i32 1)
  br label %dec_label_pc_d918

dec_label_pc_d918:                                ; preds = %dec_label_pc_d8c8, %dec_label_pc_d8fc
  %v1_d91c = call i32 @function_d1d8(i32 5888)
  store i32 5, i32* @r7, align 4
  store i32 %v2_d7c4, i32* %r3.global-to-local, align 4
  %v0_d92c = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d934 = load i32, i32* @r5, align 4
  store i32 %v0_d934, i32* %r2.global-to-local, align 4
  %v3_d940 = call i32 @function_1270c(i32 %v0_d92c, i32 1, i32 %v0_d934)
  %v7_d944 = icmp eq i32 %v3_d940, -1
  store i32 %v3_d940, i32* @r4, align 4
  br i1 %v7_d944, label %dec_label_pc_d96c, label %dec_label_pc_d950

dec_label_pc_d950:                                ; preds = %dec_label_pc_d918
  %v2_d954 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d954, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d95c = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_d95c = call i32 @function_1253c(i32 %v3_d940, %sockaddr* %v3_d95c, i32 16)
  %v0_d960 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d968 = call i32 @function_125f0(i32 %v0_d960, i32 1)
  br label %dec_label_pc_d96c

dec_label_pc_d96c:                                ; preds = %dec_label_pc_d918, %dec_label_pc_d950
  %v0_d970 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d978 = load i32, i32* @r5, align 4
  store i32 %v0_d978, i32* %r2.global-to-local, align 4
  %v3_d984 = call i32 @function_1270c(i32 %v0_d970, i32 1, i32 %v0_d978)
  %v7_d988 = icmp eq i32 %v3_d984, -1
  store i32 %v3_d984, i32* @r4, align 4
  br i1 %v7_d988, label %dec_label_pc_d9b0, label %dec_label_pc_d994

dec_label_pc_d994:                                ; preds = %dec_label_pc_d96c
  %v2_d998 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d998, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d9a0 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_d9a0 = call i32 @function_1253c(i32 %v3_d984, %sockaddr* %v3_d9a0, i32 16)
  %v0_d9a4 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d9ac = call i32 @function_125f0(i32 %v0_d9a4, i32 1)
  br label %dec_label_pc_d9b0

dec_label_pc_d9b0:                                ; preds = %dec_label_pc_d96c, %dec_label_pc_d994
  %v0_d9b0 = load i32, i32* @r7, align 4
  %v1_d9b4 = call i32 @function_13228(i32 %v0_d9b0)
  %v1_d9bc = call i32 @function_128a4(i32 4096)
  store i32 ptrtoint (i32* @global_var_1d19c.67 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d238.69 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_d9bc, i32* %r2.global-to-local, align 4
  %v0_d9cc = load i32, i32* @r5, align 4
  %v1_d9cc = trunc i32 %v0_d9cc to i8
  %v3_d9cc = inttoptr i32 %v1_d9bc to i8*
  store i8 %v1_d9cc, i8* %v3_d9cc, align 1
  %v0_d9d4 = load i32, i32* @r5, align 4
  %v1_d9d4 = load i32, i32* %r3.global-to-local, align 4
  %v2_d9d4 = inttoptr i32 %v1_d9d4 to i32*
  store i32 %v0_d9d4, i32* %v2_d9d4, align 4
  %v0_d9d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_d9d8 = load i32, i32* %r1.global-to-local, align 4
  %v2_d9d8 = inttoptr i32 %v1_d9d8 to i32*
  store i32 %v0_d9d8, i32* %v2_d9d8, align 4
  %v1_d9dc = call i32 @function_10e30(i32 15)
  %v1_d9e4 = call i32 @function_10e30(i32 16)
  %v2_d9ec = ptrtoint i32* %stack_var_-4260 to i32
  store i32 %v2_d9ec, i32* %r2.global-to-local, align 4
  %v0_d9f0 = load i32, i32* @r5, align 4
  store i32 %v0_d9f0, i32* %r1.global-to-local, align 4
  store i32 %v2_d9ec, i32* %stack_var_-8436, align 4
  %v2_d9fc = inttoptr i32 %v0_d9f0 to i32*
  %v3_d9fc = call i32 @function_10d4c(i32 15, i32* %v2_d9fc)
  %v1_da04 = add i32 %v2_d9ec, -56
  store i32 %v1_da04, i32* %r3.global-to-local, align 4
  store i32 %v3_d9fc, i32* %r1.global-to-local, align 4
  store i32 %v1_da04, i32* @r0, align 4
  store i32 %v1_da04, i32* %stack_var_-8436, align 4
  %v2_da14 = inttoptr i32 %v1_da04 to i8*
  %v3_da14 = call i32 @function_11520(i8* %v2_da14, i32 %v3_d9fc)
  %v2_da1c = add i32 %v1_da04, %v3_da14
  store i32 %v2_da1c, i32* @r4, align 4
  %v0_da20 = call i32 @function_11e54()
  %v2_da28 = ptrtoint i32* %stack_var_-92 to i32
  store i32 %v2_da28, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_da30 = trunc i32 %v0_da20 to i8
  %v4_da30 = call i32 @function_1195c(i8 %v3_da30, i32 10, i32 %v2_da28)
  store i32 %v4_da30, i32* %r1.global-to-local, align 4
  %v0_da38 = load i32, i32* @r4, align 4
  store i32 %v0_da38, i32* @r0, align 4
  %v2_da3c = inttoptr i32 %v0_da38 to i8*
  %v3_da3c = call i32 @function_11520(i8* %v2_da3c, i32 %v4_da30)
  %v0_da40 = load i32, i32* @r5, align 4
  store i32 %v0_da40, i32* %r1.global-to-local, align 4
  %v0_da44 = load i32, i32* @r4, align 4
  %v2_da44 = add i32 %v0_da44, %v3_da3c
  store i32 %v2_da44, i32* @r4, align 4
  %v2_da4c = inttoptr i32 %v0_da40 to i32*
  %v3_da4c = call i32 @function_10d4c(i32 16, i32* %v2_da4c)
  store i32 %v3_da4c, i32* %r1.global-to-local, align 4
  %v0_da54 = load i32, i32* @r4, align 4
  store i32 %v0_da54, i32* @r0, align 4
  %v2_da58 = inttoptr i32 %v0_da54 to i8*
  %v3_da58 = call i32 @function_11520(i8* %v2_da58, i32 %v3_da4c)
  %v0_da5c = load i32, i32* @r5, align 4
  store i32 %v0_da5c, i32* %r1.global-to-local, align 4
  store i32 %v3_da58, i32* @r6, align 4
  %v2_da64 = load i32, i32* %stack_var_-8436, align 4
  %v2_da68 = inttoptr i32 %v2_da64 to i8*
  %v3_da68 = call i32 @function_11f28(i8* %v2_da68, i32 %v0_da5c)
  %v7_da6c = icmp eq i32 %v3_da68, -1
  br i1 %v7_da6c, label %dec_label_pc_d7b8, label %dec_label_pc_da74

dec_label_pc_da74:                                ; preds = %dec_label_pc_d9b0
  %v1_da74 = call i32 @function_11dfc(i32 %v3_da68)
  %v1_da7c = call i32 @function_10d78(i32 15)
  %v1_da84 = call i32 @function_10d78(i32 16)
  store i32 ptrtoint (i32* @global_var_1d238.69 to i32), i32* %r3.global-to-local, align 4
  %v2_da90 = load i32, i32* @global_var_1d238.69, align 4
  store i32 %v2_da90, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_da98 = load i32, i32* %stack_var_-8436, align 4
  %v3_da9c = inttoptr i32 %v2_da98 to i8*
  %v4_da9c = call i32 @function_11ff0(i8* %v3_da9c, i32 %v2_da90, i32 4095)
  %v7_daa0 = icmp eq i32 %v4_da9c, -1
  br i1 %v7_daa0, label %.thread8, label %bb236

bb236:                                            ; preds = %dec_label_pc_da74
  %v3_daa8 = load i32, i32* @global_var_1d238.69, align 4
  store i32 %v3_daa8, i32* %r3.global-to-local, align 4
  %v1_daac = load i32, i32* @r5, align 4
  %v2_daac = trunc i32 %v1_daac to i8
  %v5_daac = add i32 %v3_daa8, %v4_da9c
  %v6_daac = inttoptr i32 %v5_daac to i8*
  store i8 %v2_daac, i8* %v6_daac, align 1
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_da74, %bb236
  %v2_dab0 = load i32, i32* %stack_var_-8436, align 4
  store i32 %v2_dab0, i32* %r2.global-to-local, align 4
  %v0_dab4 = load i32, i32* @r4, align 4
  %v1_dab4 = load i32, i32* @r6, align 4
  %v2_dab4 = sub i32 %v0_dab4, %v2_dab0
  %v2_dab8 = add i32 %v2_dab4, %v1_dab4
  store i32 %v2_dab8, i32* @r1, align 4
  store i32 %v2_dab0, i32* @r0, align 4
  %v0_dac4 = call i32 @function_11598()
  %v0_dac8 = load i32, i32* @sl, align 4
  store i32 %v0_dac8, i32* @r4, align 4
  %v0_dacc = load i32, i32* @r5, align 4
  %v2_dad0 = ptrtoint i32* %stack_var_-8412 to i32
  store i32 %v2_dad0, i32* @r8, align 4
  store i32 400, i32* @r5, align 4
  %v2_dbcc = ptrtoint i32* %stack_var_-220 to i32
  %v2_dbd0 = bitcast i32* %stack_var_-220 to i8*
  %v2_dc1c = ptrtoint i32* %stack_var_-156 to i32
  %v2_dc20 = bitcast i32* %stack_var_-156 to i8*
  %v2_dd9c = ptrtoint i32* %stack_var_-44 to i32
  %v2_ddac = ptrtoint i32* %stack_var_-48 to i32
  %v2_ddbc = ptrtoint i32* %stack_var_-52 to i32
  %v2_ddd0 = ptrtoint i32* %stack_var_-40 to i32
  %v2_dde4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_ddfc = ptrtoint i32* %stack_var_-60 to i32
  %v2_dc98 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_dad8

dec_label_pc_dad8:                                ; preds = %dec_label_pc_db90, %.thread8
  %stack_var_-8428.0 = phi i32 [ %v0_dacc, %.thread8 ], [ %stack_var_-8428.3, %dec_label_pc_db90 ]
  %v1_dadc = call i32 @function_10e30(i32 15)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dae8 = call i32 @function_10d4c(i32 15, i32* null)
  store i32 %v3_dae8, i32* @r0, align 4
  %v1_daec = call i32 @function_12204(i32 %v3_dae8)
  store i32 %v1_daec, i32* @sl, align 4
  %v2_daf0 = icmp eq i32 %v1_daec, 0
  br i1 %v2_daf0, label %dec_label_pc_d7b8, label %dec_label_pc_daf8

dec_label_pc_daf8:                                ; preds = %dec_label_pc_dad8
  %v1_dafc = call i32 @function_10d78(i32 15)
  %v0_db00131 = load i32, i32* @sl, align 4
  %v1_db04132 = inttoptr i32 %v0_db00131 to i32*
  %v2_db04133 = call i32 @function_12300(i32* %v1_db04132)
  %v2_db08135 = icmp eq i32 %v2_db04133, 0
  br i1 %v2_db08135, label %dec_label_pc_db90, label %dec_label_pc_db10.preheader

dec_label_pc_db10.preheader:                      ; preds = %dec_label_pc_daf8, %dec_label_pc_db00.backedge
  %v0_db10147 = phi i32 [ %v2_db04, %dec_label_pc_db00.backedge ], [ %v2_db04133, %dec_label_pc_daf8 ]
  %stack_var_-8428.1136 = phi i32 [ %stack_var_-8428.1.be, %dec_label_pc_db00.backedge ], [ %stack_var_-8428.0, %dec_label_pc_daf8 ]
  br label %dec_label_pc_db10

dec_label_pc_db10:                                ; preds = %dec_label_pc_db10.preheader, %dec_label_pc_db78
  %v0_db20 = phi i32 [ %v2_db84, %dec_label_pc_db78 ], [ %v0_db10147, %dec_label_pc_db10.preheader ]
  %stack_var_-8428.2 = phi i32 [ %v1_db34, %dec_label_pc_db78 ], [ %stack_var_-8428.1136, %dec_label_pc_db10.preheader ]
  %v1_db10 = add i32 %v0_db20, 11
  %v2_db10 = inttoptr i32 %v1_db10 to i8*
  %v3_db10 = load i8, i8* %v2_db10, align 1
  %v4_db10 = zext i8 %v3_db10 to i32
  %v1_db14 = add nsw i32 %v4_db10, -48
  store i32 %v1_db14, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_db14, 9
  br i1 %tmp, label %dec_label_pc_db00.backedge, label %dec_label_pc_db20

dec_label_pc_db20:                                ; preds = %dec_label_pc_db10
  store i32 %v1_db10, i32* @r6, align 4
  %v2_db28 = call i32 @function_12fe8(i8* %v2_db10)
  %v0_db30 = load i32, i32* @r5, align 4
  %v1_db34 = add i32 %stack_var_-8428.2, 1
  store i32 %v1_db34, i32* %r3.global-to-local, align 4
  store i32 %v2_db28, i32* @r7, align 4
  %v5_db40 = icmp slt i32 %v0_db30, %v2_db28
  %v2_dba0 = call i32 @function_120cc(i32* null)
  br i1 %v5_db40, label %dec_label_pc_db9c, label %dec_label_pc_db44

dec_label_pc_db44:                                ; preds = %dec_label_pc_db20
  %v0_db4c = load i32, i32* @r4, align 4
  %v2_db4c = sub i32 %v2_dba0, %v0_db4c
  %v7_db54 = icmp slt i32 %v2_db4c, 601
  br i1 %v7_db54, label %dec_label_pc_db5c, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_db44
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_db00.backedge

dec_label_pc_db5c:                                ; preds = %dec_label_pc_db44
  %v0_db5c = load i32, i32* @r7, align 4
  %v7_db60 = icmp slt i32 %v0_db5c, 401
  br i1 %v7_db60, label %dec_label_pc_db00.backedge, label %dec_label_pc_db64

dec_label_pc_db64:                                ; preds = %dec_label_pc_db5c
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_db6c = call i32 @function_11b84(i32 %v1_db34, i32 10)
  %v2_db70 = icmp eq i32 %v2_db6c, 0
  br i1 %v2_db70, label %dec_label_pc_db78, label %dec_label_pc_db00.backedge

dec_label_pc_db78:                                ; preds = %dec_label_pc_db64
  %v1_db7c = call i32 @function_13228(i32 1)
  %v0_db80 = load i32, i32* @sl, align 4
  %v1_db84 = inttoptr i32 %v0_db80 to i32*
  %v2_db84 = call i32 @function_12300(i32* %v1_db84)
  %v2_db88 = icmp eq i32 %v2_db84, 0
  br i1 %v2_db88, label %dec_label_pc_db90, label %dec_label_pc_db10

dec_label_pc_db90:                                ; preds = %dec_label_pc_db00.backedge, %dec_label_pc_db78, %dec_label_pc_daf8
  %stack_var_-8428.3 = phi i32 [ %stack_var_-8428.0, %dec_label_pc_daf8 ], [ %v1_db34, %dec_label_pc_db78 ], [ %stack_var_-8428.1.be, %dec_label_pc_db00.backedge ]
  %v0_db90 = load i32, i32* @sl, align 4
  %v1_db94 = inttoptr i32 %v0_db90 to i32*
  %v2_db94 = call i32 @function_12150(i32* %v1_db94)
  br label %dec_label_pc_dad8

dec_label_pc_db9c:                                ; preds = %dec_label_pc_db20
  %v1_dbac = call i32 @function_10e30(i32 15)
  %v1_dbb4 = call i32 @function_10e30(i32 16)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dbc0 = call i32 @function_10d4c(i32 15, i32* null)
  store i32 %v3_dbc0, i32* %r1.global-to-local, align 4
  store i32 %v2_dbcc, i32* @r0, align 4
  %v3_dbd0 = call i32 @function_11520(i8* %v2_dbd0, i32 %v3_dbc0)
  %v2_dbdc = add i32 %v3_dbd0, %v2_dbcc
  store i32 %v2_dbdc, i32* %r5.global-to-local, align 4
  %v0_dbe0 = load i32, i32* @r6, align 4
  store i32 %v0_dbe0, i32* %r1.global-to-local, align 4
  store i32 %v2_dbdc, i32* @r0, align 4
  %v2_dbe8 = inttoptr i32 %v2_dbdc to i8*
  %v3_dbe8 = call i32 @function_11520(i8* %v2_dbe8, i32 %v0_dbe0)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dbf8 = call i32 @function_10d4c(i32 16, i32* null)
  store i32 %v3_dbf8, i32* %r1.global-to-local, align 4
  %v0_dc00 = load i32, i32* %r5.global-to-local, align 4
  %v2_dc00 = add i32 %v3_dbe8, %v0_dc00
  store i32 %v2_dc00, i32* @r0, align 4
  %v2_dc04 = inttoptr i32 %v2_dc00 to i8*
  %v3_dc04 = call i32 @function_11520(i8* %v2_dc04, i32 %v3_dbf8)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dc10 = call i32 @function_10d4c(i32 15, i32* null)
  store i32 %v3_dc10, i32* %r1.global-to-local, align 4
  store i32 %v2_dc1c, i32* @r0, align 4
  %v3_dc20 = call i32 @function_11520(i8* %v2_dc20, i32 %v3_dc10)
  %v2_dc2c = add i32 %v3_dc20, %v2_dc1c
  store i32 %v2_dc2c, i32* @r5, align 4
  store i32 %v2_dc2c, i32* @r0, align 4
  %v0_dc34 = load i32, i32* @r6, align 4
  store i32 %v0_dc34, i32* %r1.global-to-local, align 4
  %v2_dc38 = inttoptr i32 %v2_dc2c to i8*
  %v3_dc38 = call i32 @function_11520(i8* %v2_dc38, i32 %v0_dc34)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_dc38, i32* @r4, align 4
  %v3_dc48 = call i32 @function_10d4c(i32 34, i32* null)
  store i32 %v3_dc48, i32* %r1.global-to-local, align 4
  %v0_dc50 = load i32, i32* @r5, align 4
  %v1_dc50 = load i32, i32* @r4, align 4
  %v2_dc50 = add i32 %v1_dc50, %v0_dc50
  store i32 %v2_dc50, i32* @r0, align 4
  %v2_dc54 = inttoptr i32 %v2_dc50 to i8*
  %v3_dc54 = call i32 @function_11520(i8* %v2_dc54, i32 %v3_dc48)
  %v1_dc5c = call i32 @function_10d78(i32 15)
  %v1_dc64 = call i32 @function_10d78(i32 16)
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_dc78 = load i32, i32* %stack_var_-8436, align 4
  store i32 %v2_dc78, i32* %r1.global-to-local, align 4
  %v4_dc7c = call i32 @function_11ff0(i8* %v2_dbd0, i32 %v2_dc78, i32 4095)
  %v7_dc84 = icmp eq i32 %v4_dc7c, -1
  store i32 %v4_dc7c, i32* @r5, align 4
  store i32 -4280, i32* @r2, align 4
  br i1 %v7_dc84, label %dec_label_pc_dd4c, label %dec_label_pc_dc94

dec_label_pc_dc94:                                ; preds = %dec_label_pc_db9c
  %v2_dc9c = add i32 %v4_dc7c, %v2_dc98
  store i32 %v2_dc9c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_dca4 = add i32 %v2_dc9c, -4280
  %v5_dca4 = inttoptr i32 %v4_dca4 to i8*
  store i8 0, i8* %v5_dca4, align 1
  %v1_dcac = call i32 @function_10e30(i32 35)
  %v0_dcb0 = load i32, i32* @r4, align 4
  store i32 %v0_dcb0, i32* %r1.global-to-local, align 4
  %v2_dcb8 = inttoptr i32 %v0_dcb0 to i32*
  %v3_dcb8 = call i32 @function_10d4c(i32 35, i32* %v2_dcb8)
  %v0_dcbc = load i32, i32* @r5, align 4
  %v1_dcbc = add i32 %v0_dcbc, -1
  store i32 %v1_dcbc, i32* @r1, align 4
  store i32 %v3_dcb8, i32* %r2.global-to-local, align 4
  %v2_dcc4 = load i32, i32* %stack_var_-8436, align 4
  %v3_dcc8 = inttoptr i32 %v2_dcc4 to i8*
  %v4_dcc8 = call i32 @function_1184c(i8* %v3_dcc8, i32 %v1_dcbc, i32 %v3_dcb8)
  %v7_dccc = icmp eq i32 %v4_dcc8, -1
  br i1 %v7_dccc, label %dec_label_pc_dce8, label %dec_label_pc_dcd4

dec_label_pc_dcd4:                                ; preds = %dec_label_pc_dc94
  %v2_dcd4 = load i32, i32* %stack_var_-8436, align 4
  %v1_dcd8 = inttoptr i32 %v2_dcd4 to i8*
  %v2_dcd8 = call i32 @function_120f8(i8* %v1_dcd8)
  %v0_dcdc = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_dce4 = call i32 @function_11efc(i32 %v0_dcdc, i32 9)
  br label %dec_label_pc_dce8

dec_label_pc_dce8:                                ; preds = %dec_label_pc_dc94, %dec_label_pc_dcd4
  %v1_dcec = call i32 @function_10d78(i32 35)
  %v0_dcf0 = call i32 @function_11e54()
  %v0_dcf4 = load i32, i32* @r7, align 4
  %v9_dcf4 = icmp eq i32 %v0_dcf4, %v0_dcf0
  br i1 %v9_dcf4, label %dec_label_pc_dd20, label %dec_label_pc_dcfc

dec_label_pc_dcfc:                                ; preds = %dec_label_pc_dce8
  %v0_dcfc = call i32 @function_11e80()
  %v0_dd00 = load i32, i32* @r7, align 4
  %v9_dd00 = icmp eq i32 %v0_dd00, %v0_dcfc
  br i1 %v9_dd00, label %dec_label_pc_dd20, label %dec_label_pc_dd08

dec_label_pc_dd08:                                ; preds = %dec_label_pc_dcfc
  store i32 ptrtoint (i32* @global_var_1d238.69 to i32), i32* %r2.global-to-local, align 4
  %v2_dd0c = load i32, i32* %stack_var_-8436, align 4
  %v2_dd10 = load i32, i32* @global_var_1d238.69, align 4
  store i32 %v2_dd10, i32* %r1.global-to-local, align 4
  %v3_dd14 = inttoptr i32 %v2_dd0c to i8*
  %v4_dd14 = call i32 @function_118d8(i8* %v3_dd14, i32 %v2_dd10, i32 ptrtoint (i32* @global_var_1d238.69 to i32))
  %v2_dd18 = icmp eq i32 %v4_dd14, 0
  br i1 %v2_dd18, label %dec_label_pc_dd2c, label %dec_label_pc_dd08.dec_label_pc_dd20_crit_edge

dec_label_pc_dd08.dec_label_pc_dd20_crit_edge:    ; preds = %dec_label_pc_dd08
  %v0_dd24.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_dd20

dec_label_pc_dd20:                                ; preds = %dec_label_pc_dd08.dec_label_pc_dd20_crit_edge, %dec_label_pc_dcfc, %dec_label_pc_dce8
  %v0_dd24 = phi i32 [ %v0_dd24.pre, %dec_label_pc_dd08.dec_label_pc_dd20_crit_edge ], [ %v0_dcfc, %dec_label_pc_dcfc ], [ %v0_dcf0, %dec_label_pc_dce8 ]
  store i32 %v2_dba0, i32* @r4, align 4
  store i32 %v0_dd24, i32* @r5, align 4
  br label %dec_label_pc_db00.backedge

dec_label_pc_db00.backedge:                       ; preds = %dec_label_pc_db64, %dec_label_pc_db5c, %dec_label_pc_db10, %dec_label_pc_dd20, %dec_label_pc_e048, %.thread9
  %stack_var_-8428.1.be = phi i32 [ %v1_db34, %dec_label_pc_e048 ], [ %v1_db34, %dec_label_pc_dd20 ], [ %v1_db34, %.thread9 ], [ %stack_var_-8428.2, %dec_label_pc_db10 ], [ %v1_db34, %dec_label_pc_db5c ], [ %v1_db34, %dec_label_pc_db64 ]
  %v0_db00 = load i32, i32* @sl, align 4
  %v1_db04 = inttoptr i32 %v0_db00 to i32*
  %v2_db04 = call i32 @function_12300(i32* %v1_db04)
  %v2_db08 = icmp eq i32 %v2_db04, 0
  br i1 %v2_db08, label %dec_label_pc_db90, label %dec_label_pc_db10.preheader

dec_label_pc_dd2c:                                ; preds = %dec_label_pc_dd08
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_dd30 = load i32, i32* %stack_var_-8436, align 4
  %v2_dd34 = inttoptr i32 %v2_dd30 to i8*
  %v3_dd34 = call i32 @function_11f28(i8* %v2_dd34, i32 0)
  %v7_dd38 = icmp eq i32 %v3_dd34, -1
  store i32 %v3_dd34, i32* @r4, align 4
  br i1 %v7_dd38, label %dec_label_pc_e07c, label %dec_label_pc_dd44

dec_label_pc_dd44:                                ; preds = %dec_label_pc_dd2c, %dec_label_pc_e07c
  %v0_dd44 = phi i32 [ %v3_dd34, %dec_label_pc_dd2c ], [ %v0_dd44.pre, %dec_label_pc_e07c ]
  %v1_dd48 = call i32 @function_11dfc(i32 %v0_dd44)
  br label %dec_label_pc_dd4c

dec_label_pc_dd4c:                                ; preds = %dec_label_pc_db9c, %dec_label_pc_dd44
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dd58 = call i32 @function_11f28(i8* %v2_dbd0, i32 0)
  %v7_dd5c = icmp eq i32 %v3_dd58, -1
  br i1 %v7_dd5c, label %dec_label_pc_e048, label %dec_label_pc_dd68

dec_label_pc_dd68:                                ; preds = %dec_label_pc_dd4c
  %v1_dd6c = call i32 @function_10e30(i32 20)
  %v1_dd74 = call i32 @function_10e30(i32 21)
  %v1_dd7c = call i32 @function_10e30(i32 22)
  %v1_dd84 = call i32 @function_10e30(i32 23)
  %v1_dd8c = call i32 @function_10e30(i32 24)
  %v1_dd94 = call i32 @function_10e30(i32 36)
  store i32 %v2_dd9c, i32* %r1.global-to-local, align 4
  %v3_dda4 = call i32 @function_10d4c(i32 20, i32* nonnull %stack_var_-44)
  store i32 %v2_ddac, i32* %r1.global-to-local, align 4
  store i32 %v3_dda4, i32* @r5, align 4
  %v3_ddb8 = call i32 @function_10d4c(i32 21, i32* nonnull %stack_var_-48)
  store i32 %v2_ddbc, i32* %r1.global-to-local, align 4
  store i32 %v3_ddb8, i32* @r6, align 4
  %v3_ddc8 = call i32 @function_10d4c(i32 22, i32* nonnull %stack_var_-52)
  store i32 %v2_ddd0, i32* %r1.global-to-local, align 4
  store i32 %v3_ddc8, i32* @sb, align 4
  %v3_dddc = call i32 @function_10d4c(i32 23, i32* nonnull %stack_var_-40)
  store i32 %v2_dde4, i32* %r1.global-to-local, align 4
  store i32 %v3_dddc, i32* @fp, align 4
  %v3_ddf0 = call i32 @function_10d4c(i32 24, i32* nonnull %stack_var_-56)
  store i32 %v2_ddfc, i32* %r1.global-to-local, align 4
  %v3_de04 = call i32 @function_10d4c(i32 36, i32* nonnull %stack_var_-60)
  store i32 %v2_dad0, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_de18128 = call i32 @function_11fc4(i32 %v3_dd58, i32* nonnull %stack_var_-8412, i32 4096)
  %tmp237 = icmp slt i32 %v4_de18128, 1
  br i1 %tmp237, label %dec_label_pc_e08c, label %dec_label_pc_de24

dec_label_pc_de24:                                ; preds = %dec_label_pc_dd68, %dec_label_pc_de0c.backedge
  %v0_dec8119 = phi i32 [ %v4_de18, %dec_label_pc_de0c.backedge ], [ %v4_de18128, %dec_label_pc_dd68 ]
  store i32 %v2_d7c4, i32* %r3.global-to-local, align 4
  %v3_de28 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_de28, i32* @r4, align 4
  %v5_de30 = icmp slt i32 %v0_dec8119, %v3_de28
  br i1 %v5_de30, label %dec_label_pc_de40, label %dec_label_pc_df08.lr.ph

dec_label_pc_df08.lr.ph:                          ; preds = %dec_label_pc_de24
  %v1_df0075 = add i32 %v0_dec8119, -1
  store i32 %v1_df0075, i32* %r1.global-to-local, align 4
  %v0_df08.pre = load i32, i32* @r5, align 4
  %v1_df0c.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_df08

dec_label_pc_de40:                                ; preds = %dec_label_pc_df00.backedge, %dec_label_pc_de24
  %v3_de44 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_de44, i32* @r4, align 4
  %v5_de4c = icmp slt i32 %v0_dec8119, %v3_de44
  br i1 %v5_de4c, label %dec_label_pc_de5c, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_de40
  %v1_df3484 = add i32 %v0_dec8119, -1
  store i32 %v1_df3484, i32* %r1.global-to-local, align 4
  %v2_df3485 = icmp eq i32 %v0_dec8119, 0
  br i1 %v2_df3485, label %dec_label_pc_de5c, label %dec_label_pc_df3c.lr.ph

dec_label_pc_df3c.lr.ph:                          ; preds = %.thread26
  %v0_df3c.pre = load i32, i32* @r6, align 4
  %v1_df40.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_df3c

dec_label_pc_de5c:                                ; preds = %dec_label_pc_df34.backedge, %.thread26, %dec_label_pc_de40
  store i32 %v2_d7c4, i32* %r1.global-to-local, align 4
  %v3_de60 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_de60, i32* @r4, align 4
  %v5_de68 = icmp slt i32 %v0_dec8119, %v3_de60
  br i1 %v5_de68, label %dec_label_pc_de78, label %.thread35

.thread35:                                        ; preds = %dec_label_pc_de5c
  %v1_df6893 = add i32 %v0_dec8119, -1
  store i32 %v1_df6893, i32* %r1.global-to-local, align 4
  %v2_df6894 = icmp eq i32 %v0_dec8119, 0
  br i1 %v2_df6894, label %dec_label_pc_de78, label %dec_label_pc_df70.lr.ph

dec_label_pc_df70.lr.ph:                          ; preds = %.thread35
  %v0_df70.pre = load i32, i32* @sb, align 4
  %v1_df74.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_df70

dec_label_pc_de78:                                ; preds = %dec_label_pc_df68.backedge, %.thread35, %dec_label_pc_de5c
  store i32 %v2_d7c4, i32* %r2.global-to-local, align 4
  %v3_de7c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_de7c, i32* @r4, align 4
  %v5_de84 = icmp slt i32 %v0_dec8119, %v3_de7c
  br i1 %v5_de84, label %dec_label_pc_de94, label %.thread44

.thread44:                                        ; preds = %dec_label_pc_de78
  %v1_df9c102 = add i32 %v0_dec8119, -1
  store i32 %v1_df9c102, i32* %r1.global-to-local, align 4
  %v2_df9c103 = icmp eq i32 %v0_dec8119, 0
  br i1 %v2_df9c103, label %dec_label_pc_de94, label %dec_label_pc_dfa4.lr.ph

dec_label_pc_dfa4.lr.ph:                          ; preds = %.thread44
  %v0_dfa4.pre = load i32, i32* @fp, align 4
  %v1_dfa8.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_dfa4

dec_label_pc_de94:                                ; preds = %dec_label_pc_df9c.backedge, %.thread44, %dec_label_pc_de78
  store i32 %v2_d7c4, i32* %r3.global-to-local, align 4
  %v3_de98 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_de98, i32* @r4, align 4
  %v5_dea0 = icmp slt i32 %v0_dec8119, %v3_de98
  br i1 %v5_dea0, label %dec_label_pc_deb0, label %.thread53

.thread53:                                        ; preds = %dec_label_pc_de94
  %v1_dfd0111 = add i32 %v0_dec8119, -1
  store i32 %v1_dfd0111, i32* %r1.global-to-local, align 4
  %v2_dfd0112 = icmp eq i32 %v0_dec8119, 0
  br i1 %v2_dfd0112, label %dec_label_pc_deb0, label %dec_label_pc_dfd8.lr.ph

dec_label_pc_dfd8.lr.ph:                          ; preds = %.thread53
  %v1_dfe0.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_dfd8

dec_label_pc_deb0:                                ; preds = %dec_label_pc_dfd0.backedge, %.thread53, %dec_label_pc_de94
  %v3_deb4 = load i32, i32* %stack_var_-60, align 4
  %v5_debc = icmp slt i32 %v0_dec8119, %v3_deb4
  br i1 %v5_debc, label %dec_label_pc_de0c.backedge, label %.thread59

dec_label_pc_de0c.backedge:                       ; preds = %dec_label_pc_deec, %.thread59, %dec_label_pc_deb0
  store i32 %v2_dad0, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_de18 = call i32 @function_11fc4(i32 %v3_dd58, i32* nonnull %stack_var_-8412, i32 4096)
  %tmp238 = icmp slt i32 %v4_de18, 1
  br i1 %tmp238, label %dec_label_pc_e08c, label %dec_label_pc_de24

.thread59:                                        ; preds = %dec_label_pc_deb0
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_dec8121 = icmp eq i32 %v0_dec8119, 0
  br i1 %v2_dec8121, label %dec_label_pc_de0c.backedge, label %dec_label_pc_ded0.lr.ph

dec_label_pc_ded0.lr.ph:                          ; preds = %.thread59
  %v1_ded8.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_ded0

dec_label_pc_ded0:                                ; preds = %dec_label_pc_deec, %dec_label_pc_ded0.lr.ph
  %v0_dec8.in = phi i32 [ %v0_dec8119, %dec_label_pc_ded0.lr.ph ], [ %v0_dec8, %dec_label_pc_deec ]
  %v0_deec = phi i32 [ 0, %dec_label_pc_ded0.lr.ph ], [ %v1_deec, %dec_label_pc_deec ]
  %v0_dee0 = phi i32 [ 0, %dec_label_pc_ded0.lr.ph ], [ %v1_dee0., %dec_label_pc_deec ]
  %v0_dec8 = add i32 %v0_dec8.in, -1
  store i32 %v3_de04, i32* %r3.global-to-local, align 4
  %v2_ded4 = add i32 %v0_dee0, %v3_de04
  %v3_ded4 = inttoptr i32 %v2_ded4 to i8*
  %v4_ded4 = load i8, i8* %v3_ded4, align 1
  %v6_ded4 = zext i8 %v4_ded4 to i32
  store i32 %v6_ded4, i32* %r2.global-to-local, align 4
  %v2_ded8 = add i32 %v0_deec, %v1_ded8.pre
  %v3_ded8 = inttoptr i32 %v2_ded8 to i8*
  %v4_ded8 = load i8, i8* %v3_ded8, align 1
  %v6_ded8 = zext i8 %v4_ded8 to i32
  store i32 %v6_ded8, i32* %r3.global-to-local, align 4
  %v9_dedc = icmp eq i8 %v4_ded8, %v4_ded4
  %v1_dee0 = add i32 %v0_dee0, 1
  %v1_dee0. = select i1 %v9_dedc, i32 %v1_dee0, i32 0
  store i32 %v1_dee0., i32* %r1.global-to-local, align 4
  br i1 %v9_dedc, label %dec_label_pc_dffc, label %dec_label_pc_deec

dec_label_pc_deec:                                ; preds = %dec_label_pc_dffc, %dec_label_pc_ded0
  %v1_deec = add i32 %v0_deec, 1
  %v2_dec8 = icmp eq i32 %v0_dec8, 0
  br i1 %v2_dec8, label %dec_label_pc_de0c.backedge, label %dec_label_pc_ded0

dec_label_pc_def4:                                ; preds = %dec_label_pc_df08
  %v9_def4 = icmp eq i32 %v3_de28, %v1_df14.
  br i1 %v9_def4, label %dec_label_pc_e004, label %dec_label_pc_df00.backedge

dec_label_pc_df00.backedge:                       ; preds = %dec_label_pc_df08, %dec_label_pc_def4
  %storemerge140 = add i32 %storemerge140.in, 1
  %v1_df00 = add i32 %v0_df00, -1
  store i32 %v1_df00, i32* %r1.global-to-local, align 4
  %v2_df00 = icmp eq i32 %v0_df00, 0
  br i1 %v2_df00, label %dec_label_pc_de40, label %dec_label_pc_df08

dec_label_pc_df08:                                ; preds = %dec_label_pc_df00.backedge, %dec_label_pc_df08.lr.ph
  %v0_df00 = phi i32 [ %v1_df0075, %dec_label_pc_df08.lr.ph ], [ %v1_df00, %dec_label_pc_df00.backedge ]
  %storemerge140.in = phi i32 [ 0, %dec_label_pc_df08.lr.ph ], [ %storemerge140, %dec_label_pc_df00.backedge ]
  %v0_df14 = phi i32 [ 0, %dec_label_pc_df08.lr.ph ], [ %v1_df14., %dec_label_pc_df00.backedge ]
  %v2_df08 = add i32 %v0_df14, %v0_df08.pre
  %v3_df08 = inttoptr i32 %v2_df08 to i8*
  %v4_df08 = load i8, i8* %v3_df08, align 1
  %v6_df08 = zext i8 %v4_df08 to i32
  store i32 %v6_df08, i32* %r2.global-to-local, align 4
  %v2_df0c = add i32 %storemerge140.in, %v1_df0c.pre
  %v3_df0c = inttoptr i32 %v2_df0c to i8*
  %v4_df0c = load i8, i8* %v3_df0c, align 1
  %v6_df0c = zext i8 %v4_df0c to i32
  store i32 %v6_df0c, i32* %r3.global-to-local, align 4
  %v9_df10 = icmp eq i8 %v4_df0c, %v4_df08
  %v1_df14 = add i32 %v0_df14, 1
  %v1_df14. = select i1 %v9_df10, i32 %v1_df14, i32 0
  br i1 %v9_df10, label %dec_label_pc_def4, label %dec_label_pc_df00.backedge

dec_label_pc_df28:                                ; preds = %dec_label_pc_df3c
  %v9_df28 = icmp eq i32 %v3_de44, %v1_df48.
  br i1 %v9_df28, label %dec_label_pc_e004, label %dec_label_pc_df34.backedge

dec_label_pc_df34.backedge:                       ; preds = %dec_label_pc_df3c, %dec_label_pc_df28
  %storemerge139 = add i32 %storemerge139.in, 1
  %v1_df34 = add i32 %v0_df34, -1
  store i32 %v1_df34, i32* %r1.global-to-local, align 4
  %v2_df34 = icmp eq i32 %v0_df34, 0
  br i1 %v2_df34, label %dec_label_pc_de5c, label %dec_label_pc_df3c

dec_label_pc_df3c:                                ; preds = %dec_label_pc_df34.backedge, %dec_label_pc_df3c.lr.ph
  %v0_df34 = phi i32 [ %v1_df3484, %dec_label_pc_df3c.lr.ph ], [ %v1_df34, %dec_label_pc_df34.backedge ]
  %storemerge139.in = phi i32 [ 0, %dec_label_pc_df3c.lr.ph ], [ %storemerge139, %dec_label_pc_df34.backedge ]
  %v0_df48 = phi i32 [ 0, %dec_label_pc_df3c.lr.ph ], [ %v1_df48., %dec_label_pc_df34.backedge ]
  %v2_df3c = add i32 %v0_df48, %v0_df3c.pre
  %v3_df3c = inttoptr i32 %v2_df3c to i8*
  %v4_df3c = load i8, i8* %v3_df3c, align 1
  %v6_df3c = zext i8 %v4_df3c to i32
  store i32 %v6_df3c, i32* %r2.global-to-local, align 4
  %v2_df40 = add i32 %storemerge139.in, %v1_df40.pre
  %v3_df40 = inttoptr i32 %v2_df40 to i8*
  %v4_df40 = load i8, i8* %v3_df40, align 1
  %v6_df40 = zext i8 %v4_df40 to i32
  store i32 %v6_df40, i32* %r3.global-to-local, align 4
  %v9_df44 = icmp eq i8 %v4_df40, %v4_df3c
  %v1_df48 = add i32 %v0_df48, 1
  %v1_df48. = select i1 %v9_df44, i32 %v1_df48, i32 0
  br i1 %v9_df44, label %dec_label_pc_df28, label %dec_label_pc_df34.backedge

dec_label_pc_df5c:                                ; preds = %dec_label_pc_df70
  %v9_df5c = icmp eq i32 %v3_de60, %v1_df7c.
  br i1 %v9_df5c, label %dec_label_pc_e004, label %dec_label_pc_df68.backedge

dec_label_pc_df68.backedge:                       ; preds = %dec_label_pc_df70, %dec_label_pc_df5c
  %storemerge138 = add i32 %storemerge138.in, 1
  %v1_df68 = add i32 %v0_df68, -1
  store i32 %v1_df68, i32* %r1.global-to-local, align 4
  %v2_df68 = icmp eq i32 %v0_df68, 0
  br i1 %v2_df68, label %dec_label_pc_de78, label %dec_label_pc_df70

dec_label_pc_df70:                                ; preds = %dec_label_pc_df68.backedge, %dec_label_pc_df70.lr.ph
  %v0_df68 = phi i32 [ %v1_df6893, %dec_label_pc_df70.lr.ph ], [ %v1_df68, %dec_label_pc_df68.backedge ]
  %storemerge138.in = phi i32 [ 0, %dec_label_pc_df70.lr.ph ], [ %storemerge138, %dec_label_pc_df68.backedge ]
  %v0_df7c = phi i32 [ 0, %dec_label_pc_df70.lr.ph ], [ %v1_df7c., %dec_label_pc_df68.backedge ]
  %v2_df70 = add i32 %v0_df7c, %v0_df70.pre
  %v3_df70 = inttoptr i32 %v2_df70 to i8*
  %v4_df70 = load i8, i8* %v3_df70, align 1
  %v6_df70 = zext i8 %v4_df70 to i32
  store i32 %v6_df70, i32* %r2.global-to-local, align 4
  %v2_df74 = add i32 %storemerge138.in, %v1_df74.pre
  %v3_df74 = inttoptr i32 %v2_df74 to i8*
  %v4_df74 = load i8, i8* %v3_df74, align 1
  %v6_df74 = zext i8 %v4_df74 to i32
  store i32 %v6_df74, i32* %r3.global-to-local, align 4
  %v9_df78 = icmp eq i8 %v4_df74, %v4_df70
  %v1_df7c = add i32 %v0_df7c, 1
  %v1_df7c. = select i1 %v9_df78, i32 %v1_df7c, i32 0
  br i1 %v9_df78, label %dec_label_pc_df5c, label %dec_label_pc_df68.backedge

dec_label_pc_df90:                                ; preds = %dec_label_pc_dfa4
  %v9_df90 = icmp eq i32 %v3_de7c, %v1_dfb0.
  br i1 %v9_df90, label %dec_label_pc_e004, label %dec_label_pc_df9c.backedge

dec_label_pc_df9c.backedge:                       ; preds = %dec_label_pc_dfa4, %dec_label_pc_df90
  %storemerge137 = add i32 %storemerge137.in, 1
  %v1_df9c = add i32 %v0_df9c, -1
  store i32 %v1_df9c, i32* %r1.global-to-local, align 4
  %v2_df9c = icmp eq i32 %v0_df9c, 0
  br i1 %v2_df9c, label %dec_label_pc_de94, label %dec_label_pc_dfa4

dec_label_pc_dfa4:                                ; preds = %dec_label_pc_df9c.backedge, %dec_label_pc_dfa4.lr.ph
  %v0_df9c = phi i32 [ %v1_df9c102, %dec_label_pc_dfa4.lr.ph ], [ %v1_df9c, %dec_label_pc_df9c.backedge ]
  %storemerge137.in = phi i32 [ 0, %dec_label_pc_dfa4.lr.ph ], [ %storemerge137, %dec_label_pc_df9c.backedge ]
  %v0_dfb0 = phi i32 [ 0, %dec_label_pc_dfa4.lr.ph ], [ %v1_dfb0., %dec_label_pc_df9c.backedge ]
  %v2_dfa4 = add i32 %v0_dfb0, %v0_dfa4.pre
  %v3_dfa4 = inttoptr i32 %v2_dfa4 to i8*
  %v4_dfa4 = load i8, i8* %v3_dfa4, align 1
  %v6_dfa4 = zext i8 %v4_dfa4 to i32
  store i32 %v6_dfa4, i32* %r2.global-to-local, align 4
  %v2_dfa8 = add i32 %storemerge137.in, %v1_dfa8.pre
  %v3_dfa8 = inttoptr i32 %v2_dfa8 to i8*
  %v4_dfa8 = load i8, i8* %v3_dfa8, align 1
  %v6_dfa8 = zext i8 %v4_dfa8 to i32
  store i32 %v6_dfa8, i32* %r3.global-to-local, align 4
  %v9_dfac = icmp eq i8 %v4_dfa8, %v4_dfa4
  %v1_dfb0 = add i32 %v0_dfb0, 1
  %v1_dfb0. = select i1 %v9_dfac, i32 %v1_dfb0, i32 0
  br i1 %v9_dfac, label %dec_label_pc_df90, label %dec_label_pc_df9c.backedge

dec_label_pc_dfc4:                                ; preds = %dec_label_pc_dfd8
  %v9_dfc4 = icmp eq i32 %v3_de98, %v1_dfe8.
  br i1 %v9_dfc4, label %dec_label_pc_e004, label %dec_label_pc_dfd0.backedge

dec_label_pc_dfd0.backedge:                       ; preds = %dec_label_pc_dfd8, %dec_label_pc_dfc4
  %storemerge = add i32 %storemerge.in, 1
  %v1_dfd0 = add i32 %v0_dfd0, -1
  store i32 %v1_dfd0, i32* %r1.global-to-local, align 4
  %v2_dfd0 = icmp eq i32 %v0_dfd0, 0
  br i1 %v2_dfd0, label %dec_label_pc_deb0, label %dec_label_pc_dfd8

dec_label_pc_dfd8:                                ; preds = %dec_label_pc_dfd0.backedge, %dec_label_pc_dfd8.lr.ph
  %v0_dfd0 = phi i32 [ %v1_dfd0111, %dec_label_pc_dfd8.lr.ph ], [ %v1_dfd0, %dec_label_pc_dfd0.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_dfd8.lr.ph ], [ %storemerge, %dec_label_pc_dfd0.backedge ]
  %v0_dfe8 = phi i32 [ 0, %dec_label_pc_dfd8.lr.ph ], [ %v1_dfe8., %dec_label_pc_dfd0.backedge ]
  store i32 %v3_ddf0, i32* %r3.global-to-local, align 4
  %v2_dfdc = add i32 %v0_dfe8, %v3_ddf0
  %v3_dfdc = inttoptr i32 %v2_dfdc to i8*
  %v4_dfdc = load i8, i8* %v3_dfdc, align 1
  %v6_dfdc = zext i8 %v4_dfdc to i32
  store i32 %v6_dfdc, i32* %r2.global-to-local, align 4
  %v2_dfe0 = add i32 %storemerge.in, %v1_dfe0.pre
  %v3_dfe0 = inttoptr i32 %v2_dfe0 to i8*
  %v4_dfe0 = load i8, i8* %v3_dfe0, align 1
  %v6_dfe0 = zext i8 %v4_dfe0 to i32
  store i32 %v6_dfe0, i32* %r3.global-to-local, align 4
  %v9_dfe4 = icmp eq i8 %v4_dfe0, %v4_dfdc
  %v1_dfe8 = add i32 %v0_dfe8, 1
  %v1_dfe8. = select i1 %v9_dfe4, i32 %v1_dfe8, i32 0
  br i1 %v9_dfe4, label %dec_label_pc_dfc4, label %dec_label_pc_dfd0.backedge

dec_label_pc_dffc:                                ; preds = %dec_label_pc_ded0
  %v9_dffc = icmp eq i32 %v3_deb4, %v1_dee0.
  br i1 %v9_dffc, label %dec_label_pc_e004, label %dec_label_pc_deec

dec_label_pc_e004:                                ; preds = %dec_label_pc_def4, %dec_label_pc_df28, %dec_label_pc_df5c, %dec_label_pc_df90, %dec_label_pc_dfc4, %dec_label_pc_dffc
  %v1_e008 = call i32 @function_10d78(i32 20)
  %v1_e010 = call i32 @function_10d78(i32 21)
  %v1_e018 = call i32 @function_10d78(i32 22)
  %v1_e020 = call i32 @function_10d78(i32 23)
  %v1_e028 = call i32 @function_10d78(i32 24)
  %v1_e030 = call i32 @function_10d78(i32 36)
  %v1_e038 = call i32 @function_11dfc(i32 %v3_dd58)
  %v0_e03c = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_e044 = call i32 @function_11efc(i32 %v0_e03c, i32 9)
  br label %dec_label_pc_e048

dec_label_pc_e048:                                ; preds = %dec_label_pc_dd4c, %dec_label_pc_e08c, %dec_label_pc_e004
  store i32 64, i32* @r1, align 4
  store i32 %v2_dbcc, i32* @r0, align 4
  %v0_e054 = call i32 @function_11598()
  store i32 %v2_dc1c, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_e064 = call i32 @function_11598()
  %v1_e06c = call i32 @function_13228(i32 1)
  store i32 %v2_dba0, i32* @r4, align 4
  %v0_e074 = load i32, i32* @r7, align 4
  store i32 %v0_e074, i32* @r5, align 4
  br label %dec_label_pc_db00.backedge

dec_label_pc_e07c:                                ; preds = %dec_label_pc_dd2c
  %v0_e07c = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_e084 = call i32 @function_11efc(i32 %v0_e07c, i32 9)
  %v0_dd44.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_dd44

dec_label_pc_e08c:                                ; preds = %dec_label_pc_de0c.backedge, %dec_label_pc_dd68
  %v1_e090 = call i32 @function_10d78(i32 20)
  %v1_e098 = call i32 @function_10d78(i32 21)
  %v1_e0a0 = call i32 @function_10d78(i32 22)
  %v1_e0a8 = call i32 @function_10d78(i32 23)
  %v1_e0b0 = call i32 @function_10d78(i32 24)
  %v1_e0b8 = call i32 @function_10d78(i32 36)
  %v1_e0c0 = call i32 @function_11dfc(i32 %v3_dd58)
  br label %dec_label_pc_e048

; uselistorder directives
  uselistorder i32 %v1_dfe8., { 1, 0 }
  uselistorder i1 %v9_dfe4, { 1, 0 }
  uselistorder i32 %v0_dfe8, { 1, 0 }
  uselistorder i32 %v1_dfb0., { 1, 0 }
  uselistorder i1 %v9_dfac, { 1, 0 }
  uselistorder i32 %v0_dfb0, { 1, 0 }
  uselistorder i32 %v1_df7c., { 1, 0 }
  uselistorder i1 %v9_df78, { 1, 0 }
  uselistorder i32 %v0_df7c, { 1, 0 }
  uselistorder i32 %v1_df48., { 1, 0 }
  uselistorder i1 %v9_df44, { 1, 0 }
  uselistorder i32 %v0_df48, { 1, 0 }
  uselistorder i32 %v1_df14., { 1, 0 }
  uselistorder i1 %v9_df10, { 1, 0 }
  uselistorder i32 %v0_df14, { 1, 0 }
  uselistorder i32 %v1_dee0., { 1, 2, 0 }
  uselistorder i1 %v9_dedc, { 1, 0 }
  uselistorder i32 %v0_dee0, { 1, 0 }
  uselistorder i32 %v0_deec, { 1, 0 }
  uselistorder i32 %v4_de18, { 1, 0 }
  uselistorder i32 %v3_dd58, { 3, 2, 4, 1, 0 }
  uselistorder i32 %v3_dd34, { 1, 2, 0 }
  uselistorder i32 %v2_db04, { 1, 0 }
  uselistorder i32 %stack_var_-8428.1.be, { 1, 0 }
  uselistorder i32 %v4_dc7c, { 1, 2, 0 }
  uselistorder i32 %v2_db84, { 1, 0 }
  uselistorder i32 %v1_db34, { 0, 1, 5, 4, 3, 2, 7, 8, 6 }
  uselistorder i32 %stack_var_-8428.0, { 1, 0 }
  uselistorder i32 %v2_dc1c, { 1, 0, 2 }
  uselistorder i32 %v2_dbcc, { 1, 0, 2 }
  uselistorder i32 %v2_dad0, { 1, 0, 2 }
  uselistorder i32 %v2_dab0, { 1, 0, 2 }
  uselistorder i32 %v4_da9c, { 1, 0 }
  uselistorder i32 %v3_da68, { 2, 0, 1 }
  uselistorder i32 %v3_d984, { 1, 2, 0 }
  uselistorder i32 %v3_d940, { 1, 2, 0 }
  uselistorder i32 %v3_d8ec, { 2, 1, 0 }
  uselistorder i32 %v3_d89c, { 1, 2, 0 }
  uselistorder i32 %v3_d864, { 1, 2, 0 }
  uselistorder i32 %v3_d808, { 1, 2, 0 }
  uselistorder i32 %storemerge194, { 1, 0 }
  uselistorder i32 %v0_d78c, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-76, { 0, 7, 1, 8, 2, 9, 3, 10, 4, 11, 5, 12, 6 }
  uselistorder i32* %stack_var_-8412, { 1, 0, 2 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-40, { 1, 0, 2 }
  uselistorder i32* %stack_var_-56, { 1, 0, 2 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r2.global-to-local, { 20, 21, 22, 23, 24, 25, 27, 26, 0, 28, 29, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* %r1.global-to-local, { 49, 50, 51, 52, 53, 54, 55, 56, 0, 58, 69, 1, 48, 57, 47, 46, 2, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 3, 4, 5, 7, 6, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i32 (i8*, i32, i32)* @function_1184c, { 3, 0, 1, 2 }
  uselistorder i32 (i32*)* @function_12300, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_12204, { 2, 1, 0 }
  uselistorder i32* @global_var_1d238.69, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_1d23c.62, { 0, 2, 1 }
  uselistorder label %dec_label_pc_e048, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e004, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_de24, { 1, 0 }
  uselistorder label %dec_label_pc_dd4c, { 1, 0 }
  uselistorder label %dec_label_pc_dd44, { 1, 0 }
  uselistorder label %dec_label_pc_db00.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_dce8, { 1, 0 }
  uselistorder label %dec_label_pc_db10, { 1, 0 }
  uselistorder label %dec_label_pc_db10.preheader, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_d9b0, { 1, 0 }
  uselistorder label %dec_label_pc_d96c, { 1, 0 }
  uselistorder label %dec_label_pc_d918, { 1, 0 }
  uselistorder label %dec_label_pc_d8c8, { 1, 0 }
  uselistorder label %dec_label_pc_d890, { 1, 0 }
  uselistorder label %dec_label_pc_d834, { 1, 0 }
}

define i32 @function_e0d4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_e0d4:
  store i32 ptrtoint (i32* @global_var_e25c.71 to i32), i32* @global_var_1d028.73, align 4
  ret i32 %arg1
}

define i32 @function_e0ec(i32 %arg1) local_unnamed_addr {
dec_label_pc_e0ec:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_e0ec = load i32, i32* @r4, align 4
  %v9_e0ec = load i32, i32* @r6, align 4
  %v12_e0ec = load i32, i32* @r7, align 4
  %v15_e0ec = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_e108 = call i32 @function_1270c(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1d020.75 to i32), i32* @r6, align 4
  %v7_e110 = icmp eq i32 %v3_e108, -1
  store i32 %v3_e108, i32* @global_var_1d020.75, align 4
  br i1 %v7_e110, label %dec_label_pc_e1d0, label %dec_label_pc_e11c

dec_label_pc_e11c:                                ; preds = %dec_label_pc_e0ec
  %v0_e120 = load i32, i32* @r4, align 4
  %v6_e130 = call i32 @function_126dc(i32 %v3_e108, i32 %v0_e120, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_e134 = load i32, i32* @global_var_1d020.75, align 4
  store i32 %v2_e134, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_e144 = call i32 @function_11d38(i32 %v2_e134, i32 3)
  %v1_e14c = or i32 %v2_e144, 2048
  store i32 %v1_e14c, i32* @r2, align 4
  %v0_e150 = load i32, i32* @r4, align 4
  %v2_e154 = call i32 @function_11d38(i32 %v0_e150, i32 4)
  store i32 ptrtoint (i8** @global_var_1d02c.77 to i32), i32* @r8, align 4
  %v2_e15c = load i8, i8* bitcast (i8** @global_var_1d02c.77 to i8*), align 4
  %v2_e160 = icmp eq i8 %v2_e15c, 0
  br i1 %v2_e160, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_e11c
  br label %bb

.thread:                                          ; preds = %dec_label_pc_e11c
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_e198 = call i32 @function_123d0()
  %v0_e19c = load i32, i32* @r5, align 4
  %v2_e19c = inttoptr i32 %v0_e198 to i32*
  store i32 %v0_e19c, i32* %v2_e19c, align 4
  %v2_e1a0 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_e1a0, i32* @r7, align 4
  store i32 %v0_e198, i32* @r4, align 4
  %v2_e1ac = load i32, i32* @global_var_1d020.75, align 4
  %v3_e1b4 = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_e1b4 = call i32 @function_1253c(i32 %v2_e1ac, %sockaddr* %v3_e1b4, i32 16)
  %v7_e1b8 = icmp eq i32 %v4_e1b4, -1
  br i1 %v7_e1b8, label %dec_label_pc_e1d8, label %dec_label_pc_e1c0

dec_label_pc_e1c0:                                ; preds = %bb
  %v2_e1c8 = load i32, i32* @global_var_1d020.75, align 4
  %v2_e1cc = call i32 @function_125f0(i32 %v2_e1c8, i32 1)
  br label %dec_label_pc_e1d0

dec_label_pc_e1d0:                                ; preds = %dec_label_pc_e0ec, %dec_label_pc_e1e4, %dec_label_pc_e1c0
  %v20_e1d4 = phi i32 [ %v3_e108, %dec_label_pc_e0ec ], [ %v1_e234, %dec_label_pc_e1e4 ], [ %v2_e1cc, %dec_label_pc_e1c0 ]
  store i32 %v3_e0ec, i32* @r4, align 4
  store i32 %v9_e0ec, i32* @r6, align 4
  store i32 %v12_e0ec, i32* @r7, align 4
  store i32 %v15_e0ec, i32* @r8, align 4
  ret i32 %v20_e1d4

dec_label_pc_e1d8:                                ; preds = %bb
  %v0_e1d8 = load i32, i32* @r4, align 4
  %v1_e1d8 = inttoptr i32 %v0_e1d8 to i32*
  %v2_e1d8 = load i32, i32* %v1_e1d8, align 4
  %v7_e1dc = icmp eq i32 %v2_e1d8, 99
  br i1 %v7_e1dc, label %dec_label_pc_e23c, label %dec_label_pc_e1e4

dec_label_pc_e1e4:                                ; preds = %dec_label_pc_e23c, %bb21, %dec_label_pc_e1d8
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_e1fc = load i32, i32* @global_var_1d020.75, align 4
  %v4_e214 = call i32 @function_12568(i32 %v2_e1fc, %sockaddr* %v3_e1b4, i32 16)
  %v1_e21c = call i32 @function_13228(i32 5)
  %v2_e220 = load i32, i32* @global_var_1d020.75, align 4
  %v1_e224 = call i32 @function_11dfc(i32 %v2_e220)
  %v1_e230 = call i32 @function_d1d8(i32 15290)
  %v1_e234 = call i32 @function_e0ec(i32 %v1_e230)
  br label %dec_label_pc_e1d0

dec_label_pc_e23c:                                ; preds = %dec_label_pc_e1d8
  %v2_e23c = load i8, i8* bitcast (i8** @global_var_1d02c.77 to i8*), align 4
  %v3_e23c = zext i8 %v2_e23c to i32
  %v1_e240 = load i32, i32* @r5, align 4
  %v9_e240 = icmp eq i32 %v3_e23c, %v1_e240
  br i1 %v9_e240, label %dec_label_pc_e1e4, label %bb21

bb21:                                             ; preds = %dec_label_pc_e23c
  %v2_e248 = trunc i32 %v1_e240 to i8
  store i8 %v2_e248, i8* bitcast (i8** @global_var_1d02c.77 to i8*), align 4
  br label %dec_label_pc_e1e4

; uselistorder directives
  uselistorder i32 %v3_e108, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_d1d8, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_125f0, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1d02c.77 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1d02c.77, { 1, 0 }
  uselistorder label %dec_label_pc_e1e4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e1d0, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_e25c() local_unnamed_addr {
dec_label_pc_e25c:
  %stack_var_-16 = alloca i32, align 4
  %v3_e25c = load i32, i32* @r4, align 4
  store i32 %v3_e25c, i32* %stack_var_-16, align 4
  %v1_e264 = call i32 @function_10e30(i32 2)
  %v3_e270 = call i32 @function_10d4c(i32 2, i32* null)
  %v1_e274 = inttoptr i32 %v3_e270 to i8*
  %v2_e274 = call i32 @function_ee18(i8* %v1_e274)
  store i32 %v2_e274, i32* @r5, align 4
  %v1_e280 = call i32 @function_10d78(i32 2)
  %v0_e284 = load i32, i32* @r5, align 4
  %v2_e284 = icmp eq i32 %v0_e284, 0
  store i32 ptrtoint (i8** @global_var_1d240.80 to i32), i32* @r6, align 4
  br i1 %v2_e284, label %bb, label %bb5

bb:                                               ; preds = %dec_label_pc_e25c
  ret i32 %v1_e280

bb5:                                              ; preds = %dec_label_pc_e25c
  %v1_e290 = add i32 %v0_e284, 4
  %v2_e290 = inttoptr i32 %v1_e290 to i32*
  %v3_e290 = load i32, i32* %v2_e290, align 4
  store i32 %v3_e290, i32* @r4, align 4
  %v0_e294 = call i32 @function_eb90()
  %v0_e298 = load i32, i32* @r5, align 4
  %v1_e298 = inttoptr i32 %v0_e298 to i8*
  %v2_e298 = load i8, i8* %v1_e298, align 1
  %v3_e298 = zext i8 %v2_e298 to i32
  %v2_e29c = call i32 @function_11b84(i32 %v0_e294, i32 %v3_e298)
  %v0_e2a0 = load i32, i32* @r4, align 4
  %v4_e2a0 = mul i32 %v2_e29c, 4
  %v5_e2a0 = add i32 %v0_e2a0, %v4_e2a0
  %v6_e2a0 = inttoptr i32 %v5_e2a0 to i32*
  %v7_e2a0 = load i32, i32* %v6_e2a0, align 4
  %v0_e2a4 = load i32, i32* @r5, align 4
  store i32 %v7_e2a0, i32* @global_var_1d244.81, align 4
  %v1_e2ac = call i32 @function_edf4(i32 %v0_e2a4)
  %v1_e2b4 = call i32 @function_10e30(i32 1)
  %v3_e2c0 = call i32 @function_10d4c(i32 1, i32* null)
  %v4_e2c0 = inttoptr i32 %v3_e2c0 to i8*
  %v2_e2c4 = add i32 %v3_e2c0, 1
  %v3_e2c4 = inttoptr i32 %v2_e2c4 to i8*
  %v4_e2c4 = load i8, i8* %v3_e2c4, align 1
  %v3_e2c8 = load i8, i8* %v4_e2c0, align 1
  store i8 %v4_e2c4, i8* bitcast (i32* @global_var_1d243.82 to i8*), align 4
  store i8 %v3_e2c8, i8* bitcast (i32* @global_var_1d242.83 to i8*), align 4
  %v2_e2e0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e2e0, i32* @r4, align 4
  %v1_e2e4 = call i32 @function_10d78(i32 1)
  %v0_e2e8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e2e8, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  br label %bb7

bb7:                                              ; preds = %bb5, %bb6
  ret i32 %v1_e2e4

; uselistorder directives
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_e2ec(i32 %arg1) local_unnamed_addr {
dec_label_pc_e2ec:
  %stack_var_-16 = alloca i32, align 4
  %v3_e2ec = load i32, i32* @r4, align 4
  %v6_e2ec = load i32, i32* @r5, align 4
  %v2_e2f0 = ptrtoint i32* %stack_var_-16 to i32
  %v0_e2f4 = call i32 @function_11e28()
  %v7_e2f8 = icmp eq i32 %v0_e2f4, -1
  %. = zext i1 %v7_e2f8 to i32
  %tmp10 = icmp slt i32 %v0_e2f4, 1
  %storemerge4 = select i1 %tmp10, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_e314 = icmp eq i32 %storemerge4, 0
  store i32 %v0_e2f4, i32* @global_var_1d1a0.85, align 4
  br i1 %v2_e314, label %dec_label_pc_e328, label %dec_label_pc_e320

dec_label_pc_e320:                                ; preds = %dec_label_pc_e2ec
  store i32 %v3_e2ec, i32* @r4, align 4
  store i32 %v6_e2ec, i32* @r5, align 4
  ret i32 %v0_e2f4

dec_label_pc_e328:                                ; preds = %dec_label_pc_e2ec
  store i32 1, i32* %stack_var_-16, align 4
  %v1_e334 = call i32 @function_10e30(i32 28)
  %v1_e33c = call i32 @function_10e30(i32 29)
  %v0_e340 = load i32, i32* @r5, align 4
  %v2_e348 = inttoptr i32 %v0_e340 to i32*
  %v3_e348 = call i32 @function_10d4c(i32 28, i32* %v2_e348)
  %v2_e350 = inttoptr i32 %v3_e348 to i8*
  %v3_e350 = call i32 @function_11f28(i8* %v2_e350, i32 2)
  %v7_e354 = icmp eq i32 %v3_e350, -1
  store i32 %v3_e350, i32* @r4, align 4
  br i1 %v7_e354, label %dec_label_pc_e39c, label %dec_label_pc_e360

dec_label_pc_e360:                                ; preds = %dec_label_pc_e39c, %dec_label_pc_e328
  %v0_e36c = phi i32 [ %v3_e3ac, %dec_label_pc_e39c ], [ %v3_e350, %dec_label_pc_e328 ]
  %v3_e374 = call i32 @function_11eac(i32 %v0_e36c, i32 -2147199228, i32 %v2_e2f0)
  br label %dec_label_pc_e378

dec_label_pc_e378:                                ; preds = %dec_label_pc_e378, %dec_label_pc_e360
  %v0_e384 = load i32, i32* @r4, align 4
  %v3_e38c = call i32 @function_11eac(i32 %v0_e384, i32 -2147199227, i32 0)
  %v1_e394 = call i32 @function_13228(i32 10)
  br label %dec_label_pc_e378

dec_label_pc_e39c:                                ; preds = %dec_label_pc_e328
  %v0_e39c = load i32, i32* @r5, align 4
  %v2_e3a4 = inttoptr i32 %v0_e39c to i32*
  %v3_e3a4 = call i32 @function_10d4c(i32 29, i32* %v2_e3a4)
  %v2_e3ac = inttoptr i32 %v3_e3a4 to i8*
  %v3_e3ac = call i32 @function_11f28(i8* %v2_e3ac, i32 2)
  %v3_e3b0 = icmp eq i32 %v3_e3ac, -1
  store i32 %v3_e3ac, i32* @r4, align 4
  br i1 %v3_e3b0, label %dec_label_pc_e3bc, label %dec_label_pc_e360

dec_label_pc_e3bc:                                ; preds = %dec_label_pc_e39c
  %v1_e3c0 = call i32 @function_10d78(i32 28)
  %v1_e3c8 = call i32 @function_10d78(i32 29)
  %v0_e3cc = load i32, i32* @r5, align 4
  %v1_e3d0 = call i32 @function_13194(i32 %v0_e3cc)
  %v0_e3d4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e3d4, label %bb13, label %bb14

bb13:                                             ; preds = %dec_label_pc_e3bc
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_e3bc, %bb13
  ret i32 %v1_e3d0

; uselistorder directives
  uselistorder i32 %v3_e3ac, { 1, 2, 0 }
  uselistorder i32 %v3_e350, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_e2f4, { 3, 1, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @function_11eac, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
}

define i32 @function_e3d8(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_e3d8:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1548 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-38 = alloca i8*, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %stack_var_-396 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e3d8 = load i32, i32* @r4, align 4
  store i32 %v3_e3d8, i32* %stack_var_-36, align 4
  %v6_e3d8 = load i32, i32* @r5, align 4
  %v9_e3d8 = load i32, i32* @r6, align 4
  %v2_e3e4 = ptrtoint i32* %stack_var_-268 to i32
  store i32 %v2_e3e4, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_e3e4, i32* @r0, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v1_e3fc = call i32 @function_12768(i32 %v2_e3e4)
  store i32 %v2_e3e4, i32* @r0, align 4
  %v2_e408 = call i32 @function_12738(i32 %v2_e3e4, i32 2)
  %v0_e40c = load i32, i32* @r5, align 4
  store i32 %v0_e40c, i32* %r2.global-to-local, align 4
  %v3_e418 = bitcast i32* %stack_var_-268 to %_TYPEDEF_sigset_t*
  %v4_e418 = call i32 @function_12078(i32 %v0_e40c, %_TYPEDEF_sigset_t* %v3_e418, i32 %v0_e40c)
  %v2_e424 = call i32 @function_12780(i32 17, i32 1)
  %v2_e430 = call i32 @function_12780(i32 5, i32 ptrtoint (i32* @global_var_e0d4.87 to i32))
  %v0_e434 = call i32 @function_117b0()
  store i32 %v0_e434, i32* @global_var_1d234.50, align 4
  store i32 1494907823, i32* %r2.global-to-local, align 4
  store i8 -24, i8* bitcast (i32* @global_var_1d243.82 to i8*), align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i8 2, i8* bitcast (i8** @global_var_1d240.80 to i8*), align 4
  store i32 1494907823, i32* @global_var_1d244.81, align 4
  %v0_e45c = load i32, i32* @r5, align 4
  %v1_e45c = trunc i32 %v0_e45c to i8
  store i8 %v1_e45c, i8* bitcast (i32* @global_var_1d242.83 to i8*), align 4
  store i8 %v1_e45c, i8* bitcast (i32* @global_var_1d241.91 to i8*), align 4
  %v6_e464 = call i32 @function_10ee8(i32 %v0_e434, i32 ptrtoint (i8** @global_var_1d240.80 to i32), i32 1494907823, i32 2)
  store i32 ptrtoint (i32* @global_var_e25c.71 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_e25c.71 to i32), i32* @global_var_1d028.73, align 4
  %v2_e478 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_e478, i32* @sb, align 4
  %v1_e47c = call i32 @function_e0ec(i32 %v6_e464)
  %v1_e480 = call i32 @function_ebe8(i32 %v1_e47c)
  store i32 %v2_e478, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_e48c = call i32 @function_11598()
  %v0_e490 = load i32, i32* @r6, align 4
  %v7_e490 = icmp eq i32 %v0_e490, 2
  br i1 %v7_e490, label %dec_label_pc_e5bc, label %dec_label_pc_e498

dec_label_pc_e498:                                ; preds = %dec_label_pc_e5bc, %dec_label_pc_e3d8, %dec_label_pc_e5cc
  %v0_e498 = call i32 @function_eb90()
  store i32 %v0_e498, i32* %r6.global-to-local, align 4
  %v0_e4a0 = load i32, i32* @r8, align 4
  %v1_e4a0 = inttoptr i32 %v0_e4a0 to i32*
  %v2_e4a0 = load i32, i32* %v1_e4a0, align 4
  %v1_e4a4 = inttoptr i32 %v2_e4a0 to i8*
  %v2_e4a4 = call i32 @function_114f8(i8* %v1_e4a4)
  %v0_e4ac = load i32, i32* @r8, align 4
  %v1_e4ac = inttoptr i32 %v0_e4ac to i32*
  %v2_e4ac = load i32, i32* %v1_e4ac, align 4
  %v1_e4b0 = inttoptr i32 %v2_e4ac to i8*
  %v2_e4b0 = call i32 @function_114f8(i8* %v1_e4b0)
  %v1_e4b4 = sub i32 20, %v2_e4a4
  store i32 %v2_e4b0, i32* @r5, align 4
  %v0_e4bc = load i32, i32* %r6.global-to-local, align 4
  %v2_e4c0 = call i32 @function_11b84(i32 %v0_e4bc, i32 %v1_e4b4)
  %v1_e4c8 = load i32, i32* @r5, align 4
  %v2_e4c8 = add i32 %v1_e4c8, %v2_e4c0
  store i32 %v2_e4c8, i32* @r4, align 4
  %v2_e4cc = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_e4cc, i32* @r6, align 4
  %v2_e4d8 = call i32 @function_ec44(i32 %v2_e4cc, i32 %v2_e4c8)
  %v2_e4dc = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_e4dc, i32* %r2.global-to-local, align 4
  %v1_e4e0 = load i32, i32* @r4, align 4
  %v2_e4e0 = add i32 %v1_e4e0, %v2_e4dc
  store i32 %v2_e4e0, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_e4ec = load i32, i32* @r8, align 4
  %v1_e4ec = inttoptr i32 %v0_e4ec to i32*
  %v2_e4ec = load i32, i32* %v1_e4ec, align 4
  store i32 %v2_e4ec, i32* @r0, align 4
  %v3_e4f0 = add i32 %v2_e4e0, -72
  %v4_e4f0 = inttoptr i32 %v3_e4f0 to i8*
  store i8 0, i8* %v4_e4f0, align 1
  %v2_e4f4 = inttoptr i32 %v2_e4ec to i8*
  %v3_e4f4 = call i32 @function_11520(i8* %v2_e4f4, i32 %v2_e4cc)
  store i32 32, i32* @r1, align 4
  store i32 %v2_e4cc, i32* @r0, align 4
  %v0_e500 = call i32 @function_11598()
  %v0_e504 = call i32 @function_eb90()
  store i32 %v0_e504, i32* @r7, align 4
  %v0_e50c = load i32, i32* @r8, align 4
  %v1_e50c = inttoptr i32 %v0_e50c to i32*
  %v2_e50c = load i32, i32* %v1_e50c, align 4
  %v1_e510 = inttoptr i32 %v2_e50c to i8*
  %v2_e510 = call i32 @function_114f8(i8* %v1_e510)
  %v0_e518 = load i32, i32* @r8, align 4
  %v1_e518 = inttoptr i32 %v0_e518 to i32*
  %v2_e518 = load i32, i32* %v1_e518, align 4
  %v1_e51c = inttoptr i32 %v2_e518 to i8*
  %v2_e51c = call i32 @function_114f8(i8* %v1_e51c)
  %v1_e520 = sub i32 20, %v2_e510
  store i32 %v2_e51c, i32* @r5, align 4
  %v0_e528 = load i32, i32* @r7, align 4
  %v2_e52c = call i32 @function_11b84(i32 %v0_e528, i32 %v1_e520)
  %v1_e530 = load i32, i32* @r5, align 4
  %v2_e530 = add i32 %v1_e530, %v2_e52c
  store i32 %v2_e530, i32* @r4, align 4
  %v2_e53c = call i32 @function_ec44(i32 %v2_e4cc, i32 %v2_e530)
  %v1_e544 = load i32, i32* @r4, align 4
  %v2_e544 = add i32 %v1_e544, %v2_e4dc
  store i32 %v2_e544, i32* @r3, align 4
  %v0_e548 = load i32, i32* @sl, align 4
  %v1_e548 = trunc i32 %v0_e548 to i8
  %v3_e548 = add i32 %v2_e544, -72
  %v4_e548 = inttoptr i32 %v3_e548 to i8*
  store i8 %v1_e548, i8* %v4_e548, align 1
  %v2_e554 = call i32 @function_11f94(i32 15, i32 %v2_e4cc)
  %v1_e55c = call i32 @function_10e30(i32 5)
  %v3_e56c = call i32 @function_10d4c(i32 5, i32* nonnull %stack_var_-44)
  %v3_e570 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_e570, i32* %r2.global-to-local, align 4
  %v3_e57c = inttoptr i32 %v3_e56c to i32*
  %v4_e57c = call i32 @function_12124(i32 1, i32* %v3_e57c, i32 %v3_e570)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e58c = call i32 @function_12124(i32 1, i32* nonnull @global_var_14698.95, i32 1)
  %v1_e594 = call i32 @function_10d78(i32 5)
  %v1_e598 = call i32 @function_8650(i32 %v1_e594)
  %v1_e59c = call i32 @function_d774(i32 %v1_e598)
  %v1_e5a0 = call i32 @function_e2ec(i32 %v1_e59c)
  %v0_e5a4 = call i32 @function_11e28()
  %v1_e5a8 = load i32, i32* @sl, align 4
  %v7_e5ac = icmp sgt i32 %v0_e5a4, %v1_e5a8
  br i1 %v7_e5ac, label %dec_label_pc_e5b0, label %dec_label_pc_e5f4

dec_label_pc_e5b0:                                ; preds = %dec_label_pc_e498
  store i32 %v6_e3d8, i32* %r5.global-to-local, align 4
  store i32 %v9_e3d8, i32* %r6.global-to-local, align 4
  ret i32 0

dec_label_pc_e5bc:                                ; preds = %dec_label_pc_e3d8
  %v0_e5bc = load i32, i32* @r8, align 4
  %v1_e5bc = add i32 %v0_e5bc, 4
  %v2_e5bc = inttoptr i32 %v1_e5bc to i32*
  %v3_e5bc = load i32, i32* %v2_e5bc, align 4
  %v1_e5c0 = inttoptr i32 %v3_e5bc to i8*
  %v2_e5c0 = call i32 @function_114f8(i8* %v1_e5c0)
  %v8_e5c8 = icmp sgt i32 %v2_e5c0, 31
  br i1 %v8_e5c8, label %dec_label_pc_e498, label %dec_label_pc_e5cc

dec_label_pc_e5cc:                                ; preds = %dec_label_pc_e5bc
  %v0_e5cc = load i32, i32* @r8, align 4
  %v1_e5cc = add i32 %v0_e5cc, 4
  %v2_e5cc = inttoptr i32 %v1_e5cc to i32*
  %v3_e5cc = load i32, i32* %v2_e5cc, align 4
  store i32 %v2_e478, i32* @r0, align 4
  %v2_e5d4 = bitcast i32* %stack_var_-140 to i8*
  %v3_e5d4 = call i32 @function_11520(i8* %v2_e5d4, i32 %v3_e5cc)
  %v0_e5d8 = load i32, i32* @r8, align 4
  %v1_e5d8 = add i32 %v0_e5d8, 4
  %v2_e5d8 = inttoptr i32 %v1_e5d8 to i32*
  %v3_e5d8 = load i32, i32* %v2_e5d8, align 4
  %v1_e5e0 = inttoptr i32 %v3_e5d8 to i8*
  %v2_e5e0 = call i32 @function_114f8(i8* %v1_e5e0)
  store i32 %v2_e5e0, i32* @r1, align 4
  store i32 %v3_e5d8, i32* @r0, align 4
  %v0_e5ec = call i32 @function_11598()
  br label %dec_label_pc_e498

dec_label_pc_e5f4:                                ; preds = %dec_label_pc_e498
  %v1_e5f4 = call i32 @function_1204c(i32 %v0_e5a4)
  %v0_e5fc = load i32, i32* @sl, align 4
  %v1_e600 = call i32 @function_11dfc(i32 %v0_e5fc)
  %v1_e608 = call i32 @function_11dfc(i32 1)
  %v1_e610 = call i32 @function_11dfc(i32 2)
  %v1_e614 = call i32 @function_8650(i32 %v1_e610)
  %v1_e618 = call i32 @function_d774(i32 %v1_e614)
  %v1_e61c = call i32 @function_e2ec(i32 %v1_e618)
  %v1_e620 = call i32 @function_f5f0(i32 %v1_e61c)
  %v2_e630 = ptrtoint i32* %stack_var_-396 to i32
  store i32 %v2_e630, i32* @r6, align 4
  %v2_e634 = ptrtoint i32* %stack_var_-524 to i32
  store i32 %v2_e634, i32* @r7, align 4
  %v2_e70c = ptrtoint i32* %stack_var_-60 to i32
  %v2_e94c = ptrtoint i32* %stack_var_-52 to i32
  %v4_e960 = bitcast i8** %stack_var_-38 to i32*
  %v2_eabc = ptrtoint i32* %stack_var_-1548 to i32
  %v2_e970 = ptrtoint i32* %stack_var_-48 to i32
  %v1_ea14 = bitcast i32* %stack_var_-140 to i8*
  %v5_e9dc = bitcast i32* %stack_var_-76 to %sockaddr*
  %v1_e9f0 = sub i32 0, %v1_e5f4
  br label %dec_label_pc_e638

dec_label_pc_e638:                                ; preds = %dec_label_pc_e638.backedge, %dec_label_pc_e5f4
  %v2_e64045 = phi i32 [ %v2_e64045.pre, %dec_label_pc_e638.backedge ], [ %v2_e630, %dec_label_pc_e5f4 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_e64047 = inttoptr i32 %v2_e64045 to i32*
  store i32 0, i32* %v4_e64047, align 4
  %v0_e64448 = load i32, i32* %r3.global-to-local, align 4
  %v1_e64449 = add i32 %v0_e64448, 4
  store i32 %v1_e64449, i32* %r3.global-to-local, align 4
  %v7_e64850 = icmp eq i32 %v1_e64449, 128
  br i1 %v7_e64850, label %dec_label_pc_e650, label %dec_label_pc_e640.dec_label_pc_e640_crit_edge

dec_label_pc_e640.dec_label_pc_e640_crit_edge:    ; preds = %dec_label_pc_e638, %dec_label_pc_e640.dec_label_pc_e640_crit_edge
  %v1_e64451 = phi i32 [ %v1_e644, %dec_label_pc_e640.dec_label_pc_e640_crit_edge ], [ %v1_e64449, %dec_label_pc_e638 ]
  %v0_e640.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_e640 = load i32, i32* @r6, align 4
  %v3_e640 = add i32 %v2_e640, %v1_e64451
  %v4_e640 = inttoptr i32 %v3_e640 to i32*
  store i32 %v0_e640.pre, i32* %v4_e640, align 4
  %v0_e644 = load i32, i32* %r3.global-to-local, align 4
  %v1_e644 = add i32 %v0_e644, 4
  store i32 %v1_e644, i32* %r3.global-to-local, align 4
  %v7_e648 = icmp eq i32 %v1_e644, 128
  br i1 %v7_e648, label %dec_label_pc_e650, label %dec_label_pc_e640.dec_label_pc_e640_crit_edge

dec_label_pc_e650:                                ; preds = %dec_label_pc_e640.dec_label_pc_e640_crit_edge, %dec_label_pc_e638
  %v0_e650 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_e650, i32* %r3.global-to-local, align 4
  store i32 %v0_e650, i32* @r4, align 4
  %v2_e65852 = load i32, i32* @r7, align 4
  %v3_e65853 = add i32 %v2_e65852, %v0_e650
  %v4_e65854 = inttoptr i32 %v3_e65853 to i32*
  store i32 %v0_e650, i32* %v4_e65854, align 4
  %v0_e65c55 = load i32, i32* %r3.global-to-local, align 4
  %v1_e65c56 = add i32 %v0_e65c55, 4
  store i32 %v1_e65c56, i32* %r3.global-to-local, align 4
  %v7_e66057 = icmp eq i32 %v1_e65c56, 128
  br i1 %v7_e66057, label %dec_label_pc_e668, label %dec_label_pc_e658.dec_label_pc_e658_crit_edge

dec_label_pc_e658.dec_label_pc_e658_crit_edge:    ; preds = %dec_label_pc_e650, %dec_label_pc_e658.dec_label_pc_e658_crit_edge
  %v1_e65c58 = phi i32 [ %v1_e65c, %dec_label_pc_e658.dec_label_pc_e658_crit_edge ], [ %v1_e65c56, %dec_label_pc_e650 ]
  %v0_e658.pre = load i32, i32* @r4, align 4
  %v2_e658 = load i32, i32* @r7, align 4
  %v3_e658 = add i32 %v2_e658, %v1_e65c58
  %v4_e658 = inttoptr i32 %v3_e658 to i32*
  store i32 %v0_e658.pre, i32* %v4_e658, align 4
  %v0_e65c = load i32, i32* %r3.global-to-local, align 4
  %v1_e65c = add i32 %v0_e65c, 4
  store i32 %v1_e65c, i32* %r3.global-to-local, align 4
  %v7_e660 = icmp eq i32 %v1_e65c, 128
  br i1 %v7_e660, label %dec_label_pc_e668, label %dec_label_pc_e658.dec_label_pc_e658_crit_edge

dec_label_pc_e668:                                ; preds = %dec_label_pc_e658.dec_label_pc_e658_crit_edge, %dec_label_pc_e650
  store i32 ptrtoint (i32* @global_var_1d020.75 to i32), i32* %r2.global-to-local, align 4
  %v2_e66c = load i32, i32* @global_var_1d020.75, align 4
  %v7_e670 = icmp eq i32 %v2_e66c, -1
  br i1 %v7_e670, label %dec_label_pc_e69c, label %dec_label_pc_e678

dec_label_pc_e678:                                ; preds = %dec_label_pc_e668
  %v3_e678 = udiv i32 %v2_e66c, 32
  %v3_e67c = mul nuw nsw i32 %v3_e678, 4
  %v2_e684 = add i32 %v3_e67c, %v2_e4dc
  store i32 %v2_e684, i32* %r3.global-to-local, align 4
  %v1_e688 = add i32 %v2_e684, -360
  %v2_e688 = inttoptr i32 %v1_e688 to i32*
  %v3_e688 = load i32, i32* %v2_e688, align 4
  %v1_e68c = urem i32 %v2_e66c, 32
  %v7_e694 = shl i32 1, %v1_e68c
  %v8_e694 = or i32 %v3_e688, %v7_e694
  store i32 %v8_e694, i32* %r2.global-to-local, align 4
  store i32 %v8_e694, i32* %v2_e688, align 4
  br label %dec_label_pc_e69c

dec_label_pc_e69c:                                ; preds = %dec_label_pc_e668, %dec_label_pc_e678
  %v2_e69c = load i32, i32* @global_var_1d024.97, align 4
  store i32 %v2_e69c, i32* %r3.global-to-local, align 4
  %v7_e6a0 = icmp eq i32 %v2_e69c, -1
  store i32 ptrtoint (i32* @global_var_1d024.97 to i32), i32* @r8, align 4
  br i1 %v7_e6a0, label %dec_label_pc_e8d8, label %dec_label_pc_e6ac

dec_label_pc_e6ac:                                ; preds = %dec_label_pc_e8d8, %dec_label_pc_e69c, %.thread
  store i32 ptrtoint (i8** @global_var_1d1a4.100 to i32), i32* %r2.global-to-local, align 4
  %v2_e6b0 = load i8, i8* bitcast (i8** @global_var_1d1a4.100 to i8*), align 4
  %v2_e6b4 = icmp eq i8 %v2_e6b0, 0
  %v2_e7f4 = load i32, i32* @global_var_1d024.97, align 4
  %v3_e7f8 = udiv i32 %v2_e7f4, 32
  store i32 %v3_e7f8, i32* %r3.global-to-local, align 4
  br i1 %v2_e6b4, label %dec_label_pc_e7f4, label %dec_label_pc_e6bc

dec_label_pc_e6bc:                                ; preds = %dec_label_pc_e6ac
  %v3_e6c4 = mul nuw nsw i32 %v3_e7f8, 4
  %v2_e6cc = add i32 %v3_e6c4, %v2_e4dc
  store i32 %v2_e6cc, i32* %r3.global-to-local, align 4
  %v1_e6d0 = add i32 %v2_e6cc, -488
  %v2_e6d0 = inttoptr i32 %v1_e6d0 to i32*
  %v3_e6d0 = load i32, i32* %v2_e6d0, align 4
  %v1_e6d4 = urem i32 %v2_e7f4, 32
  %v7_e6dc = shl i32 1, %v1_e6d4
  %v8_e6dc = or i32 %v3_e6d0, %v7_e6dc
  store i32 %v8_e6dc, i32* %r2.global-to-local, align 4
  store i32 %v8_e6dc, i32* %v2_e6d0, align 4
  br label %dec_label_pc_e6e4

dec_label_pc_e6e4:                                ; preds = %dec_label_pc_e7f4, %dec_label_pc_e6bc
  %v2_e6e8 = load i32, i32* @global_var_1d020.75, align 4
  %v2_e6ec = load i32, i32* @global_var_1d024.97, align 4
  store i32 %v2_e6ec, i32* %r3.global-to-local, align 4
  %v5_e6f8 = icmp slt i32 %v2_e6e8, %v2_e6ec
  br i1 %v5_e6f8, label %bb, label %bb42

bb:                                               ; preds = %dec_label_pc_e6e4
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_e6e4, %bb
  %v0_e710 = phi i32 [ %v2_e6e8, %dec_label_pc_e6e4 ], [ %v2_e6ec, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_e710 = add i32 %v0_e710, 1
  store i32 %v2_e634, i32* %r2.global-to-local, align 4
  %v5_e724 = call i32 @function_1201c(i32 %v1_e710, i32 %v2_e630, i32 %v2_e634, i32 0, i32 %v2_e70c)
  %v8_e728 = icmp eq i32 %v5_e724, -1
  store i32 %v5_e724, i32* %r3.global-to-local, align 4
  br i1 %v8_e728, label %dec_label_pc_e638.backedge, label %dec_label_pc_e734

dec_label_pc_e734:                                ; preds = %bb42
  %v6_e724 = trunc i32 %v5_e724 to i8
  %v3_e734 = icmp eq i8 %v6_e724, 0
  br i1 %v3_e734, label %dec_label_pc_e73c, label %dec_label_pc_e75c

dec_label_pc_e73c:                                ; preds = %dec_label_pc_e734
  %v0_e73c = load i32, i32* @sl, align 4
  %v6_e748 = inttoptr i32 %v5_e724 to i8*
  store i8* %v6_e748, i8** %stack_var_-38, align 4
  %v2_e74c = call i32 @function_11c50(i32 %v0_e73c, i32 6)
  %v2_e750 = icmp eq i32 %v2_e74c, 0
  %v0_e754 = load i32, i32* @sl, align 4
  %v1_e754 = add i32 %v0_e754, 1
  store i32 %v1_e754, i32* @sl, align 4
  br i1 %v2_e750, label %dec_label_pc_e948, label %dec_label_pc_e75c

dec_label_pc_e75c:                                ; preds = %dec_label_pc_e734, %dec_label_pc_e73c, %dec_label_pc_e948
  store i32 ptrtoint (i32* @global_var_1d020.75 to i32), i32* %r2.global-to-local, align 4
  %v2_e760 = load i32, i32* @global_var_1d020.75, align 4
  %v7_e764 = icmp eq i32 %v2_e760, -1
  br i1 %v7_e764, label %dec_label_pc_e790, label %dec_label_pc_e76c

dec_label_pc_e76c:                                ; preds = %dec_label_pc_e75c
  %v3_e76c = udiv i32 %v2_e760, 32
  %v3_e770 = mul nuw nsw i32 %v3_e76c, 4
  store i32 %v2_e4dc, i32* @ip, align 4
  %v2_e778 = add i32 %v3_e770, %v2_e4dc
  store i32 %v2_e778, i32* %r3.global-to-local, align 4
  %v1_e77c = add i32 %v2_e778, -360
  %v2_e77c = inttoptr i32 %v1_e77c to i32*
  %v3_e77c = load i32, i32* %v2_e77c, align 4
  %v1_e780 = urem i32 %v2_e760, 32
  %v6_e784 = lshr i32 %v3_e77c, %v1_e780
  store i32 %v6_e784, i32* %r2.global-to-local, align 4
  %v1_e788 = urem i32 %v6_e784, 2
  %v2_e788 = icmp eq i32 %v1_e788, 0
  br i1 %v2_e788, label %dec_label_pc_e790, label %dec_label_pc_e9c4

dec_label_pc_e790:                                ; preds = %dec_label_pc_e76c, %dec_label_pc_e75c
  store i32 ptrtoint (i8** @global_var_1d1a4.100 to i32), i32* %r3.global-to-local, align 4
  %v2_e794 = load i8, i8* bitcast (i8** @global_var_1d1a4.100 to i8*), align 4
  %v3_e794 = zext i8 %v2_e794 to i32
  store i32 %v3_e794, i32* @r4, align 4
  %v2_e798 = icmp eq i8 %v2_e794, 0
  %v2_e820 = load i32, i32* @global_var_1d024.97, align 4
  br i1 %v2_e798, label %dec_label_pc_e820, label %dec_label_pc_e7a0

dec_label_pc_e7a0:                                ; preds = %dec_label_pc_e790
  %v3_e7a4 = udiv i32 %v2_e820, 32
  %v3_e7ac = mul nuw nsw i32 %v3_e7a4, 4
  %v2_e7b0 = add i32 %v3_e7ac, %v2_e4dc
  store i32 %v2_e7b0, i32* %r3.global-to-local, align 4
  %v1_e7b4 = add i32 %v2_e7b0, -488
  %v2_e7b4 = inttoptr i32 %v1_e7b4 to i32*
  %v3_e7b4 = load i32, i32* %v2_e7b4, align 4
  %v1_e7b8 = urem i32 %v2_e820, 32
  %v6_e7bc = lshr i32 %v3_e7b4, %v1_e7b8
  store i32 %v6_e7bc, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1d1a4.100 to i32), i32* %r3.global-to-local, align 4
  %v1_e7c8 = urem i32 %v6_e7bc, 2
  %v2_e7c8 = icmp eq i32 %v1_e7c8, 0
  store i8 0, i8* bitcast (i8** @global_var_1d1a4.100 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1d024.97 to i32), i32* @r5, align 4
  br i1 %v2_e7c8, label %dec_label_pc_e7d8, label %dec_label_pc_e968

dec_label_pc_e7d8:                                ; preds = %dec_label_pc_e7a0
  store i32 59360, i32* @lr, align 4
  %v1_e7dc = icmp ne i32 %v2_e820, -1
  call void @__pseudo_cond_branch(i1 %v1_e7dc, i32 ptrtoint (i32* @global_var_11dfc.101 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e7e4 = load i32, i32* @r5, align 4
  %v2_e7e4 = inttoptr i32 %v1_e7e4 to i32*
  store i32 -1, i32* %v2_e7e4, align 4
  %v1_e7ec = call i32 @function_13228(i32 1)
  br label %dec_label_pc_e638.backedge

dec_label_pc_e638.backedge:                       ; preds = %dec_label_pc_e7d8, %dec_label_pc_e8c4, %dec_label_pc_e99c, %dec_label_pc_ea60, %dec_label_pc_ea84, %dec_label_pc_eb38, %dec_label_pc_eb44, %bb42, %dec_label_pc_e820, %dec_label_pc_e830, %dec_label_pc_ea10, %bb44, %dec_label_pc_eae4, %dec_label_pc_ea74
  %v2_e64045.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e638

dec_label_pc_e7f4:                                ; preds = %dec_label_pc_e6ac
  store i32 %v2_e4dc, i32* %r2.global-to-local, align 4
  %v3_e800 = mul nuw nsw i32 %v3_e7f8, 4
  %v2_e804 = add i32 %v3_e800, %v2_e4dc
  store i32 %v2_e804, i32* %r3.global-to-local, align 4
  %v1_e808 = add i32 %v2_e804, -360
  %v2_e808 = inttoptr i32 %v1_e808 to i32*
  %v3_e808 = load i32, i32* %v2_e808, align 4
  %v1_e80c = urem i32 %v2_e7f4, 32
  %v7_e814 = shl i32 1, %v1_e80c
  %v8_e814 = or i32 %v3_e808, %v7_e814
  store i32 %v8_e814, i32* %r2.global-to-local, align 4
  store i32 %v8_e814, i32* %v2_e808, align 4
  br label %dec_label_pc_e6e4

dec_label_pc_e820:                                ; preds = %dec_label_pc_e790
  %v7_e824 = icmp eq i32 %v2_e820, -1
  store i32 ptrtoint (i32* @global_var_1d024.97 to i32), i32* @r5, align 4
  br i1 %v7_e824, label %dec_label_pc_e638.backedge, label %dec_label_pc_e830

dec_label_pc_e830:                                ; preds = %dec_label_pc_e820
  %v3_e830 = udiv i32 %v2_e820, 32
  %v3_e834 = mul nuw nsw i32 %v3_e830, 4
  %v2_e83c = add i32 %v3_e834, %v2_e4dc
  store i32 %v2_e83c, i32* %r3.global-to-local, align 4
  %v1_e840 = add i32 %v2_e83c, -360
  %v2_e840 = inttoptr i32 %v1_e840 to i32*
  %v3_e840 = load i32, i32* %v2_e840, align 4
  %v1_e844 = urem i32 %v2_e820, 32
  %v6_e848 = lshr i32 %v3_e840, %v1_e844
  store i32 %v6_e848, i32* %r2.global-to-local, align 4
  %v1_e84c = urem i32 %v6_e848, 2
  %v2_e84c = icmp eq i32 %v1_e84c, 0
  br i1 %v2_e84c, label %dec_label_pc_e638.backedge, label %dec_label_pc_e854

dec_label_pc_e854:                                ; preds = %dec_label_pc_e830
  %v6_e854 = inttoptr i32 %v3_e794 to i8*
  store i8* %v6_e854, i8** %stack_var_-38, align 4
  %v0_e85c = call i32 @function_123d0()
  %v0_e860 = load i32, i32* @r4, align 4
  %v2_e860 = inttoptr i32 %v0_e85c to i32*
  store i32 %v0_e860, i32* %v2_e860, align 4
  store i32 %v0_e85c, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_e874 = load i32, i32* @global_var_1d024.97, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_e880 = call i32 @function_1261c(i32 %v2_e874, i32* %v4_e960, i32 2, i32 16386)
  %v7_e884 = icmp eq i32 %v5_e880, -1
  br i1 %v7_e884, label %dec_label_pc_ea74, label %dec_label_pc_e88c

dec_label_pc_e88c:                                ; preds = %dec_label_pc_e854
  %v2_e88c = icmp eq i32 %v5_e880, 0
  br i1 %v2_e88c, label %dec_label_pc_ea84, label %dec_label_pc_e894

dec_label_pc_e894:                                ; preds = %dec_label_pc_e88c
  %v3_e894 = load i8*, i8** %stack_var_-38, align 4
  %v4_e894 = ptrtoint i8* %v3_e894 to i32
  store i32 %v3_e794, i32* %r3.global-to-local, align 4
  %v4_e89c = mul nuw nsw i32 %v3_e794, 256
  %v5_e89c = or i32 %v4_e894, %v4_e89c
  store i32 %v5_e89c, i32* %r2.global-to-local, align 4
  %v7_e89c = icmp eq i32 %v5_e89c, 0
  br i1 %v7_e89c, label %dec_label_pc_eb44, label %dec_label_pc_e8a4

dec_label_pc_e8a4:                                ; preds = %dec_label_pc_e894
  %v1_e8a4 = mul i32 %v4_e894, 256
  %v3_e8a8 = and i32 %v1_e8a4, 65280
  %v4_e8ac = udiv i32 %v5_e89c, 256
  %v5_e8ac = or i32 %v3_e8a8, %v4_e8ac
  %v6_e8ac = trunc i32 %v4_e8ac to i8
  store i32 %v5_e8ac, i32* %r2.global-to-local, align 4
  %v4_e8b0 = udiv i32 %v5_e89c, 65536
  store i32 %v4_e8b0, i32* %r3.global-to-local, align 4
  %v3_e8b4 = icmp slt i8 %v6_e8ac, 0
  %v7_e8bc = inttoptr i32 %v4_e8ac to i8*
  store i8* %v7_e8bc, i8** %stack_var_-38, align 4
  br i1 %v3_e8b4, label %dec_label_pc_e8c4, label %dec_label_pc_eab4

dec_label_pc_e8c4:                                ; preds = %dec_label_pc_e8a4
  %v2_e8c4 = load i32, i32* @global_var_1d024.97, align 4
  %v1_e8c8 = call i32 @function_11dfc(i32 %v2_e8c4)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e8d0 = load i32, i32* @r5, align 4
  %v2_e8d0 = inttoptr i32 %v1_e8d0 to i32*
  store i32 -1, i32* %v2_e8d0, align 4
  br label %dec_label_pc_e638.backedge

dec_label_pc_e8d8:                                ; preds = %dec_label_pc_e69c
  %v0_e8e0 = load i32, i32* @r4, align 4
  store i32 %v0_e8e0, i32* %r2.global-to-local, align 4
  %v3_e8e4 = call i32 @function_1270c(i32 2, i32 1, i32 %v0_e8e0)
  %v7_e8e8 = icmp eq i32 %v3_e8e4, -1
  store i32 %v3_e8e4, i32* %r5.global-to-local, align 4
  %v1_e8f0 = load i32, i32* @r8, align 4
  %v2_e8f0 = inttoptr i32 %v1_e8f0 to i32*
  store i32 %v3_e8e4, i32* %v2_e8f0, align 4
  br i1 %v7_e8e8, label %dec_label_pc_e6ac, label %dec_label_pc_e8f8

dec_label_pc_e8f8:                                ; preds = %dec_label_pc_e8d8
  %v0_e8f8 = load i32, i32* @r4, align 4
  store i32 %v0_e8f8, i32* @r2, align 4
  %v2_e900 = call i32 @function_11d38(i32 %v3_e8e4, i32 3)
  %v1_e908 = or i32 %v2_e900, 2048
  store i32 %v1_e908, i32* @r2, align 4
  %v0_e90c = load i32, i32* %r5.global-to-local, align 4
  %v2_e910 = call i32 @function_11d38(i32 %v0_e90c, i32 4)
  store i32 ptrtoint (i32* @global_var_1d028.73 to i32), i32* %r2.global-to-local, align 4
  %v2_e918 = load i32, i32* @global_var_1d028.73, align 4
  store i32 %v2_e918, i32* %r3.global-to-local, align 4
  %v2_e91c = icmp eq i32 %v2_e918, 0
  br i1 %v2_e91c, label %.thread, label %bb43

bb43:                                             ; preds = %dec_label_pc_e8f8
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_117b0.102 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e8f8, %bb43
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_e930 = load i32, i32* @global_var_1d024.97, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1d1a4.100 to i8*), align 4
  %v5_e940 = call i32 @function_12568(i32 %v2_e930, %sockaddr* bitcast (i8** @global_var_1d240.80 to %sockaddr*), i32 16)
  br label %dec_label_pc_e6ac

dec_label_pc_e948:                                ; preds = %dec_label_pc_e73c
  %v2_e950 = load i32, i32* @global_var_1d024.97, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e960 = call i32 @function_1267c(i32 %v2_e950, i32* nonnull %v4_e960, i32 2, i32 16384)
  br label %dec_label_pc_e75c

dec_label_pc_e968:                                ; preds = %dec_label_pc_e7a0
  store i32 4, i32* @r4, align 4
  store i32 %v2_e970, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v6_e98c = call i32 @function_125c0(i32 %v2_e820, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_e94c)
  %v3_e990 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_e990, i32* %r3.global-to-local, align 4
  %v2_e994 = icmp eq i32 %v3_e990, 0
  br i1 %v2_e994, label %dec_label_pc_ea10, label %dec_label_pc_e99c

dec_label_pc_e99c:                                ; preds = %dec_label_pc_e968
  %v2_e99c = load i32, i32* @global_var_1d024.97, align 4
  %v1_e9a0 = call i32 @function_11dfc(i32 %v2_e99c)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e9a8 = load i32, i32* @r5, align 4
  %v2_e9a8 = inttoptr i32 %v1_e9a8 to i32*
  store i32 -1, i32* %v2_e9a8, align 4
  %v0_e9ac = call i32 @function_eb90()
  %v2_e9b4 = call i32 @function_11b84(i32 %v0_e9ac, i32 10)
  %v1_e9b8 = add i32 %v2_e9b4, 1
  %v1_e9bc = call i32 @function_13228(i32 %v1_e9b8)
  br label %dec_label_pc_e638.backedge

dec_label_pc_e9c4:                                ; preds = %dec_label_pc_e76c
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_e970, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_e9dc = call i32 @function_12510(i32 %v2_e760, %sockaddr* %v5_e9dc, i32 %v2_e970, i32 16, i32 16)
  %v1_e9e0 = call i32 @function_f364(i32 %v6_e9dc)
  %v1_e9e4 = call i32 @function_d1c4(i32 %v1_e9e0)
  store i32 %v1_e5f4, i32* %r2.global-to-local, align 4
  %v2_e9f4 = call i32 @function_11efc(i32 %v1_e9f0, i32 9)
  store i32 ptrtoint (i32* @global_var_1d1a0.85 to i32), i32* %r3.global-to-local, align 4
  %v2_e9fc = load i32, i32* @global_var_1d1a0.85, align 4
  %v2_ea00 = icmp eq i32 %v2_e9fc, 0
  br i1 %v2_ea00, label %dec_label_pc_ea08, label %dec_label_pc_eaa8

dec_label_pc_ea08:                                ; preds = %dec_label_pc_e9c4, %dec_label_pc_eaa8
  %v1_ea0c = call i32 @function_13194(i32 0)
  br label %dec_label_pc_ea10

dec_label_pc_ea10:                                ; preds = %dec_label_pc_e968, %dec_label_pc_ea08
  %v2_ea14 = call i32 @function_114f8(i8* %v1_ea14)
  %sext = mul i32 %v2_ea14, 16777216
  %v1_ea18 = sdiv i32 %sext, 16777216
  %v7_ea18 = inttoptr i32 %v1_ea18 to i8*
  store i8* %v7_ea18, i8** %stack_var_-38, align 4
  %v0_ea1c = call i32 @function_117b0()
  store i32 %v0_ea1c, i32* @global_var_1d234.50, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ea30 = load i32, i32* @r4, align 4
  store i32 %v0_ea30, i32* %r2.global-to-local, align 4
  %v0_ea34 = load i32, i32* @r5, align 4
  %v1_ea34 = inttoptr i32 %v0_ea34 to i32*
  %v2_ea34 = load i32, i32* %v1_ea34, align 4
  %v5_ea38 = call i32 @function_1267c(i32 %v2_ea34, i32* nonnull @global_var_1469c.105, i32 %v0_ea30, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_ea44 = load i32, i32* @r5, align 4
  %v1_ea44 = inttoptr i32 %v0_ea44 to i32*
  %v2_ea44 = load i32, i32* %v1_ea44, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_ea50 = call i32 @function_1267c(i32 %v2_ea44, i32* %v4_e960, i32 1, i32 16384)
  %v3_ea54 = load i8*, i8** %stack_var_-38, align 4
  %v4_ea54 = ptrtoint i8* %v3_ea54 to i32
  store i32 %v4_ea54, i32* %r2.global-to-local, align 4
  %v3_ea58 = icmp eq i8* %v3_ea54, null
  br i1 %v3_ea58, label %dec_label_pc_e638.backedge, label %dec_label_pc_ea60

dec_label_pc_ea60:                                ; preds = %dec_label_pc_ea10
  %v0_ea60 = load i32, i32* @r5, align 4
  %v1_ea60 = inttoptr i32 %v0_ea60 to i32*
  %v2_ea60 = load i32, i32* %v1_ea60, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_ea6c = call i32 @function_1267c(i32 %v2_ea60, i32* nonnull %stack_var_-140, i32 %v4_ea54, i32 16384)
  br label %dec_label_pc_e638.backedge

dec_label_pc_ea74:                                ; preds = %dec_label_pc_eab4, %dec_label_pc_e854
  %v0_ea74 = load i32, i32* @r8, align 4
  %v1_ea74 = inttoptr i32 %v0_ea74 to i32*
  %v2_ea74 = load i32, i32* %v1_ea74, align 4
  store i32 %v2_ea74, i32* %r3.global-to-local, align 4
  %v7_ea78 = icmp eq i32 %v2_ea74, 4
  br i1 %v7_ea78, label %dec_label_pc_e638.backedge, label %bb44

bb44:                                             ; preds = %dec_label_pc_ea74
  %v8_ea7c = icmp eq i32 %v2_ea74, 11
  br i1 %v8_ea7c, label %dec_label_pc_e638.backedge, label %dec_label_pc_ea84

dec_label_pc_ea84:                                ; preds = %dec_label_pc_eadc, %bb44, %dec_label_pc_e88c
  %v2_ea84 = load i32, i32* @global_var_1d024.97, align 4
  store i32 60048, i32* @lr, align 4
  %v1_ea8c = icmp ne i32 %v2_ea84, -1
  call void @__pseudo_cond_branch(i1 %v1_ea8c, i32 ptrtoint (i32* @global_var_11dfc.101 to i32))
  store i32 ptrtoint (i32* @global_var_1d024.97 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1d024.97, align 4
  %v1_eaa0 = call i32 @function_13228(i32 1)
  br label %dec_label_pc_e638.backedge

dec_label_pc_eaa8:                                ; preds = %dec_label_pc_e9c4
  %v2_eaac = call i32 @function_11efc(i32 %v2_e9fc, i32 9)
  br label %dec_label_pc_ea08

dec_label_pc_eab4:                                ; preds = %dec_label_pc_e8a4
  %v0_eab4 = load i32, i32* @r4, align 4
  %v1_eab4 = load i32, i32* @r8, align 4
  %v2_eab4 = inttoptr i32 %v1_eab4 to i32*
  store i32 %v0_eab4, i32* %v2_eab4, align 4
  store i32 %v2_eabc, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_eac8 = load i32, i32* @global_var_1d024.97, align 4
  %v9_ead0 = call i32 @function_1261c(i32 %v2_eac8, i32* nonnull %stack_var_-1548, i32 %v4_e8ac, i32 16386)
  %v7_ead4 = icmp eq i32 %v9_ead0, -1
  br i1 %v7_ead4, label %dec_label_pc_ea74, label %dec_label_pc_eadc

dec_label_pc_eadc:                                ; preds = %dec_label_pc_eab4
  %v2_eadc = icmp eq i32 %v9_ead0, 0
  br i1 %v2_eadc, label %dec_label_pc_ea84, label %dec_label_pc_eae4

dec_label_pc_eae4:                                ; preds = %dec_label_pc_eadc
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_eaf4 = load i32, i32* @global_var_1d024.97, align 4
  %v5_eaf8 = call i32 @function_1261c(i32 %v2_eaf4, i32* nonnull %v4_e960, i32 2, i32 16384)
  %v3_eafc = load i8*, i8** %stack_var_-38, align 4
  %v4_eafc = ptrtoint i8* %v3_eafc to i32
  %v4_eb00 = urem i32 %v4_e8b0, 256
  %v4_eb04 = mul i32 %v4_eafc, 256
  %v5_eb04 = or i32 %v4_eb04, %v4_eb00
  store i32 %v5_eb04, i32* %r2.global-to-local, align 4
  %v3_eb0c = sdiv i32 %v4_eb04, 256
  store i32 %v3_eb0c, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_eb18 = load i32, i32* @global_var_1d024.97, align 4
  %v6_eb20 = inttoptr i32 %v5_eb04 to i8*
  store i8* %v6_eb20, i8** %stack_var_-38, align 4
  %v8_eb24 = call i32 @function_1261c(i32 %v2_eb18, i32* nonnull %stack_var_-1548, i32 %v5_eb04, i32 16384)
  %v3_eb28 = load i8*, i8** %stack_var_-38, align 4
  %v4_eb28 = ptrtoint i8* %v3_eb28 to i32
  store i32 %v4_eb28, i32* %r2.global-to-local, align 4
  %v4_eb2c = urem i32 %v3_eb0c, 256
  store i32 %v4_eb2c, i32* %r3.global-to-local, align 4
  %v6_eb30 = mul nuw nsw i32 %v4_eb2c, 256
  %v7_eb30 = or i32 %v4_eb28, %v6_eb30
  %v9_eb30 = icmp eq i32 %v7_eb30, 0
  br i1 %v9_eb30, label %dec_label_pc_e638.backedge, label %dec_label_pc_eb38

dec_label_pc_eb38:                                ; preds = %dec_label_pc_eae4
  %v7_eb3c = call i32 @function_8320(i32* nonnull %stack_var_-1548, i32 %v7_eb30, i32 %v4_eb28, i32 %v4_eb2c)
  br label %dec_label_pc_e638.backedge

dec_label_pc_eb44:                                ; preds = %dec_label_pc_e894
  %v2_eb48 = load i32, i32* @global_var_1d024.97, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_eb58 = call i32 @function_1261c(i32 %v2_eb48, i32* nonnull %v4_e960, i32 2, i32 16384)
  br label %dec_label_pc_e638.backedge

; uselistorder directives
  uselistorder i32 %v4_eb2c, { 2, 0, 1 }
  uselistorder i32 %v4_eb28, { 1, 0, 2 }
  uselistorder i32 %v3_eb0c, { 1, 0 }
  uselistorder i32 %v5_eb04, { 1, 0, 2 }
  uselistorder i32 %v4_eb04, { 1, 0 }
  uselistorder i32 %v9_ead0, { 1, 0 }
  uselistorder i32 %v3_e8e4, { 3, 2, 1, 0 }
  uselistorder i32 %v4_e8ac, { 2, 3, 0, 1 }
  uselistorder i32 %v5_e880, { 1, 0 }
  uselistorder i32 %v2_e820, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_e760, { 3, 2, 1, 0 }
  uselistorder i32 %v5_e724, { 2, 3, 1, 0 }
  uselistorder i32 %v2_e66c, { 2, 1, 0 }
  uselistorder i32 %v1_e65c, { 1, 2, 0 }
  uselistorder i32 %v1_e644, { 1, 2, 0 }
  uselistorder i32 %v2_e970, { 1, 0, 2 }
  uselistorder i32* %v4_e960, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v2_e634, { 1, 0, 2 }
  uselistorder i32 %v2_e630, { 1, 0, 2 }
  uselistorder i32 %v2_e4dc, { 0, 1, 9, 2, 3, 8, 4, 5, 6, 7, 10 }
  uselistorder i32 %v2_e4cc, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_e3e4, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-140, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i8** %stack_var_-38, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 0, 3, 4 }
  uselistorder i32* %stack_var_-1548, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29, 28, 30, 31, 32, 33, 24, 34, 35, 36, 47, 48, 40, 41, 37, 45, 46, 38, 39, 42, 43, 44 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36 }
  uselistorder i32* @global_var_1d1a0.85, { 1, 2, 0 }
  uselistorder i32 16386, { 1, 2, 0, 3 }
  uselistorder i8* bitcast (i8** @global_var_1d1a4.100 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1d1a4.100, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1d1a4.100 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1d024.97, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 13, 12, 15, 14 }
  uselistorder i32* @global_var_1d020.75, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32 (i32)* @function_e2ec, { 1, 0 }
  uselistorder i32 (i32)* @function_d774, { 1, 0 }
  uselistorder i32 (i32)* @function_8650, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_ec44, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_e0ec, { 1, 0 }
  uselistorder i32* @global_var_1d028.73, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_e25c.71 to i32), { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_12780, { 1, 0 }
  uselistorder label %dec_label_pc_ea10, { 1, 0 }
  uselistorder label %dec_label_pc_ea08, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_e638.backedge, { 6, 5, 12, 4, 11, 13, 3, 10, 2, 1, 9, 8, 0, 7 }
  uselistorder label %dec_label_pc_e75c, { 2, 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_e6ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e69c, { 1, 0 }
  uselistorder label %dec_label_pc_e658.dec_label_pc_e658_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e640.dec_label_pc_e640_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e498, { 2, 0, 1 }
}

define i32 @function_eb90() local_unnamed_addr {
dec_label_pc_eb90:
  %v2_eb9c = load i32, i32* @global_var_1d1a8.107, align 4
  %v2_eba0 = load i32, i32* @global_var_1d1b4.109, align 4
  store i32 ptrtoint (i32* @global_var_1d1ac.111 to i32), i32* @lr, align 4
  %v4_ebac = mul i32 %v2_eb9c, 2048
  %v5_ebac = xor i32 %v4_ebac, %v2_eb9c
  %v4_ebb0 = udiv i32 %v2_eba0, 524288
  %v5_ebb0 = xor i32 %v4_ebb0, %v2_eba0
  %v2_ebb4 = load i32, i32* @global_var_1d1ac.111, align 4
  %v2_ebb8 = load i32, i32* @global_var_1d1b0.113, align 4
  %v2_ebbc = xor i32 %v5_ebb0, %v5_ebac
  %v4_ebc0 = udiv i32 %v5_ebac, 256
  %v5_ebc0 = xor i32 %v2_ebbc, %v4_ebc0
  store i32 %v2_ebb4, i32* @global_var_1d1a8.107, align 4
  store i32 %v2_ebb8, i32* @global_var_1d1ac.111, align 4
  store i32 %v2_eba0, i32* @global_var_1d1b0.113, align 4
  store i32 %v5_ebc0, i32* @global_var_1d1b4.109, align 4
  ret i32 %v5_ebc0

; uselistorder directives
  uselistorder i32 %v2_eba0, { 2, 1, 0 }
  uselistorder i32 %v2_eb9c, { 1, 0 }
}

define i32 @function_ebe8(i32 %arg1) local_unnamed_addr {
dec_label_pc_ebe8:
  %stack_var_-12 = alloca i32, align 4
  %v3_ebe8 = load i32, i32* @r4, align 4
  store i32 %v3_ebe8, i32* %stack_var_-12, align 4
  %v2_ebf0 = call i32 @function_120cc(i32* null)
  store i32 %v2_ebf0, i32* @global_var_1d1a8.107, align 4
  %v0_ebfc = call i32 @function_11e54()
  store i32 %v0_ebfc, i32* @r4, align 4
  %v0_ec04 = call i32 @function_11e80()
  %v0_ec0c = load i32, i32* @r4, align 4
  %v2_ec0c = xor i32 %v0_ec0c, %v0_ec04
  store i32 %v2_ec0c, i32* @r4, align 4
  store i32 %v2_ec0c, i32* @global_var_1d1ac.111, align 4
  %v1_ec14 = call i32 @function_123dc(i32 %v0_ec04)
  %v2_ec18 = load i32, i32* @global_var_1d1ac.111, align 4
  %v2_ec24 = xor i32 %v2_ec18, %v1_ec14
  store i32 %v2_ec24, i32* @global_var_1d1b4.109, align 4
  store i32 %v1_ec14, i32* @global_var_1d1b0.113, align 4
  %v2_ec30 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_ec30, i32* @r4, align 4
  ret i32 %v1_ec14

; uselistorder directives
  uselistorder i32 %v1_ec14, { 1, 2, 0 }
  uselistorder i32 %v0_ec04, { 1, 0 }
  uselistorder i32 ()* @function_11e80, { 2, 0, 1 }
}

define i32 @function_ec44(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ec44:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_ec44 = load i32, i32* @r4, align 4
  store i32 %v3_ec44, i32* %stack_var_-36, align 4
  %v6_ec44 = load i32, i32* @r5, align 4
  %v9_ec44 = load i32, i32* @r6, align 4
  %v12_ec44 = load i32, i32* @r7, align 4
  %v28_ec44 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg1, i32* %fp.global-to-local, align 4
  %v2_ec4c = ptrtoint i32* %stack_var_-68 to i32
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_ec58 = call i32 @function_10e30(i32 33)
  %v3_ec64 = call i32 @function_10d4c(i32 33, i32* null)
  %v2_ec70 = inttoptr i32 %v3_ec64 to i8*
  %v3_ec70 = call i32 @function_124d0(i32 %v2_ec4c, i8* %v2_ec70)
  %v2_ec74 = icmp eq i32 %arg2, 0
  br i1 %v2_ec74, label %dec_label_pc_ecf0, label %dec_label_pc_ec7c

dec_label_pc_ec7c:                                ; preds = %dec_label_pc_ec44
  store i32 ptrtoint (i32* @global_var_1d1a8.107 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d1ac.111 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d1b0.113 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1d1b4.109 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_ecc4 = bitcast i32* %stack_var_-68 to i8*
  br label %dec_label_pc_ec90

dec_label_pc_ec90:                                ; preds = %dec_label_pc_ec90.dec_label_pc_ec90_crit_edge, %dec_label_pc_ec7c
  %v1_ecb4 = phi i32 [ %v1_ecb4.pre, %dec_label_pc_ec90.dec_label_pc_ec90_crit_edge ], [ ptrtoint (i32* @global_var_1d1a8.107 to i32), %dec_label_pc_ec7c ]
  %v2_ec90 = load i32, i32* @global_var_1d1b4.109, align 4
  store i32 %v2_ec90, i32* %r2.global-to-local, align 4
  %v2_ec94 = load i32, i32* @global_var_1d1a8.107, align 4
  %v4_ec98 = udiv i32 %v2_ec90, 524288
  %v5_ec98 = xor i32 %v4_ec98, %v2_ec90
  %v4_ec9c = mul i32 %v2_ec94, 2048
  %v5_ec9c = xor i32 %v4_ec9c, %v2_ec94
  %v2_eca0 = xor i32 %v5_ec98, %v5_ec9c
  %v2_eca4 = load i32, i32* @global_var_1d1ac.111, align 4
  %v2_eca8 = load i32, i32* @global_var_1d1b0.113, align 4
  store i32 %v2_eca8, i32* %ip.global-to-local, align 4
  %v4_ecac = udiv i32 %v5_ec9c, 256
  %v5_ecac = xor i32 %v2_eca0, %v4_ecac
  store i32 %v5_ecac, i32* @r4, align 4
  %v2_ecb4 = inttoptr i32 %v1_ecb4 to i32*
  store i32 %v2_eca4, i32* %v2_ecb4, align 4
  %v0_ecb8 = load i32, i32* %ip.global-to-local, align 4
  %v1_ecb8 = load i32, i32* %r8.global-to-local, align 4
  %v2_ecb8 = inttoptr i32 %v1_ecb8 to i32*
  store i32 %v0_ecb8, i32* %v2_ecb8, align 4
  %v0_ecbc = load i32, i32* %r2.global-to-local, align 4
  %v1_ecbc = load i32, i32* @r7, align 4
  %v2_ecbc = inttoptr i32 %v1_ecbc to i32*
  store i32 %v0_ecbc, i32* %v2_ecbc, align 4
  %v0_ecc0 = load i32, i32* @r4, align 4
  %v1_ecc0 = load i32, i32* @r6, align 4
  %v2_ecc0 = inttoptr i32 %v1_ecc0 to i32*
  store i32 %v0_ecc0, i32* %v2_ecc0, align 4
  %v2_ecc4 = call i32 @function_114f8(i8* %v1_ecc4)
  %v0_eccc = load i32, i32* @r4, align 4
  %v2_ecd0 = call i32 @function_11b84(i32 %v0_eccc, i32 %v2_ecc4)
  %v2_ecd8 = add i32 %v2_ecd0, %v28_ec44
  %v1_ecdc = add i32 %v2_ecd8, -32
  %v2_ecdc = inttoptr i32 %v1_ecdc to i8*
  %v3_ecdc = load i8, i8* %v2_ecdc, align 1
  %v2_ece0 = load i32, i32* @r5, align 4
  %v3_ece0 = load i32, i32* %fp.global-to-local, align 4
  %v4_ece0 = add i32 %v3_ece0, %v2_ece0
  %v5_ece0 = inttoptr i32 %v4_ece0 to i8*
  store i8 %v3_ecdc, i8* %v5_ece0, align 1
  %v0_ece4 = load i32, i32* @r5, align 4
  %v1_ece4 = add i32 %v0_ece4, 1
  store i32 %v1_ece4, i32* @r5, align 4
  %v1_ece8 = load i32, i32* %sb.global-to-local, align 4
  %v9_ece8 = icmp eq i32 %v1_ece4, %v1_ece8
  br i1 %v9_ece8, label %dec_label_pc_ecf0, label %dec_label_pc_ec90.dec_label_pc_ec90_crit_edge

dec_label_pc_ec90.dec_label_pc_ec90_crit_edge:    ; preds = %dec_label_pc_ec90
  %v1_ecb4.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_ec90

dec_label_pc_ecf0:                                ; preds = %dec_label_pc_ec90, %dec_label_pc_ec44
  %v1_ecf4 = call i32 @function_10d78(i32 33)
  %v2_ecfc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ecfc, i32* @r4, align 4
  store i32 %v6_ec44, i32* @r5, align 4
  store i32 %v9_ec44, i32* @r6, align 4
  store i32 %v12_ec44, i32* @r7, align 4
  ret i32 %v1_ecf4

; uselistorder directives
  uselistorder i32 %v2_ec94, { 1, 0 }
  uselistorder i32 %v2_ec90, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
}

define i32 @function_ed10(i8* %arg1) local_unnamed_addr {
dec_label_pc_ed10:
  %fp.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_ed10 = load i32, i32* @r4, align 4
  store i32 %v3_ed10, i32* %stack_var_-36, align 4
  %v9_ed10 = load i32, i32* @r6, align 4
  %v12_ed10 = load i32, i32* @r7, align 4
  %v15_ed10 = load i32, i32* @r8, align 4
  %v18_ed10 = load i32, i32* @sb, align 4
  %v21_ed10 = load i32, i32* @sl, align 4
  %v24_ed10 = load i32, i32* @fp, align 4
  %v0_ed14 = load i32, i32* @r1, align 4
  store i32 %v0_ed14, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %tmp20 = icmp slt i32 %v0_ed14, 1
  br i1 %tmp20, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_ed10
  store i32 %v3_ed10, i32* @r4, align 4
  ret i32 %tmp

bb21:                                             ; preds = %dec_label_pc_ed10
  store i32 ptrtoint (i32* @global_var_1d1b4.109 to i32), i32* %fp.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d1b0.113 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d1ac.111 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d1a8.107 to i32), i32* %r8.global-to-local, align 4
  %v2_ed30 = load i32, i32* @global_var_1d1b4.109, align 4
  store i32 %v2_ed30, i32* @lr, align 4
  %v2_ed34 = load i32, i32* @global_var_1d1b0.113, align 4
  store i32 %v2_ed34, i32* %r7.global-to-local, align 4
  %v2_ed38 = load i32, i32* @global_var_1d1ac.111, align 4
  store i32 %v2_ed38, i32* %r6.global-to-local, align 4
  %v2_ed3c = load i32, i32* @global_var_1d1a8.107, align 4
  br label %dec_label_pc_ed68

dec_label_pc_ed44:                                ; preds = %dec_label_pc_ed94
  %v3_ed9c = sdiv i32 %v5_ed80, 256
  %v1_ed44 = trunc i32 %v3_ed9c to i8
  %v3_ed44 = add i32 %v9_ed88, 1
  %v4_ed44 = inttoptr i32 %v3_ed44 to i8*
  store i8 %v1_ed44, i8* %v4_ed44, align 1
  %v0_ed48 = load i32, i32* %r3.global-to-local, align 4
  %v1_ed48 = trunc i32 %v0_ed48 to i8
  %v2_ed48 = load i32, i32* %r5.global-to-local, align 4
  %v3_ed48 = inttoptr i32 %v2_ed48 to i8*
  store i8 %v1_ed48, i8* %v3_ed48, align 1
  %v0_ed4c = load i32, i32* %r5.global-to-local, align 4
  %v1_ed4c = add i32 %v0_ed4c, 2
  store i32 %v1_ed4c, i32* %r5.global-to-local, align 4
  %v0_ed50.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ed50

dec_label_pc_ed50:                                ; preds = %.thread, %dec_label_pc_ed44
  %v0_ed50 = phi i32 [ %v9_ed8c, %.thread ], [ %v0_ed50.pre, %dec_label_pc_ed44 ]
  %v2_ed447 = phi i32 [ %v12_ed88, %.thread ], [ %v1_ed4c, %dec_label_pc_ed44 ]
  %tmp22 = icmp slt i32 %v0_ed50, 1
  br i1 %tmp22, label %dec_label_pc_edd0, label %dec_label_pc_ed5c

dec_label_pc_ed5c:                                ; preds = %dec_label_pc_ed50
  %v0_ed54 = load i32, i32* %r6.global-to-local, align 4
  %v0_ed5c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_ed5c, i32* %r6.global-to-local, align 4
  %v0_ed60 = load i32, i32* @lr, align 4
  store i32 %v0_ed60, i32* %r7.global-to-local, align 4
  %v0_ed64 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_ed64, i32* @lr, align 4
  br label %dec_label_pc_ed68

dec_label_pc_ed68:                                ; preds = %bb21, %dec_label_pc_ed5c
  %v0_edb8 = phi i32 [ %v2_ed38, %bb21 ], [ %v0_ed5c, %dec_label_pc_ed5c ]
  %v9_ed88 = phi i32 [ %tmp, %bb21 ], [ %v2_ed447, %dec_label_pc_ed5c ]
  %v0_eda0 = phi i32 [ %v0_ed14, %bb21 ], [ %v0_ed50, %dec_label_pc_ed5c ]
  %v0_edac = phi i32 [ %v2_ed30, %bb21 ], [ %v0_ed64, %dec_label_pc_ed5c ]
  %v0_eda8 = phi i32 [ %v2_ed3c, %bb21 ], [ %v0_ed54, %dec_label_pc_ed5c ]
  %v4_ed68 = mul i32 %v0_eda8, 2048
  %v5_ed68 = xor i32 %v4_ed68, %v0_eda8
  %v4_ed6c = udiv i32 %v0_edac, 524288
  %v5_ed6c = xor i32 %v4_ed6c, %v0_edac
  %v2_ed70 = xor i32 %v5_ed6c, %v5_ed68
  %v4_ed80 = udiv i32 %v5_ed68, 256
  %v5_ed80 = xor i32 %v4_ed80, %v2_ed70
  store i32 %v5_ed80, i32* %r3.global-to-local, align 4
  %v7_ed88 = icmp sgt i32 %v0_eda0, 3
  br i1 %v7_ed88, label %.thread, label %dec_label_pc_ed94

.thread:                                          ; preds = %dec_label_pc_ed68
  %v10_ed88 = inttoptr i32 %v9_ed88 to i32*
  store i32 %v5_ed80, i32* %v10_ed88, align 4
  %v11_ed88 = load i32, i32* %r5.global-to-local, align 4
  %v12_ed88 = add i32 %v11_ed88, 4
  store i32 %v12_ed88, i32* %r5.global-to-local, align 4
  %v8_ed8c = load i32, i32* %r4.global-to-local, align 4
  %v9_ed8c = add i32 %v8_ed8c, -4
  store i32 %v9_ed8c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ed50

dec_label_pc_ed94:                                ; preds = %dec_label_pc_ed68
  store i32 %v5_ed80, i32* %r3.global-to-local, align 4
  %v7_ed98 = icmp eq i32 %v0_eda0, 1
  %v1_eda0 = add i32 %v0_eda0, -2
  store i32 %v1_eda0, i32* %r4.global-to-local, align 4
  br i1 %v7_ed98, label %dec_label_pc_eda8, label %dec_label_pc_ed44

dec_label_pc_eda8:                                ; preds = %dec_label_pc_ed94
  store i32 %v5_ed80, i32* %r3.global-to-local, align 4
  %v1_edb8 = load i32, i32* %r8.global-to-local, align 4
  %v2_edb8 = inttoptr i32 %v1_edb8 to i32*
  store i32 %v0_edb8, i32* %v2_edb8, align 4
  %v0_edbc = load i32, i32* %r7.global-to-local, align 4
  %v1_edbc = load i32, i32* %sl.global-to-local, align 4
  %v2_edbc = inttoptr i32 %v1_edbc to i32*
  store i32 %v0_edbc, i32* %v2_edbc, align 4
  %v0_edc0 = load i32, i32* @lr, align 4
  %v1_edc0 = load i32, i32* %sb.global-to-local, align 4
  %v2_edc0 = inttoptr i32 %v1_edc0 to i32*
  store i32 %v0_edc0, i32* %v2_edc0, align 4
  %v0_edc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_edc4 = load i32, i32* %fp.global-to-local, align 4
  %v2_edc4 = inttoptr i32 %v1_edc4 to i32*
  store i32 %v0_edc4, i32* %v2_edc4, align 4
  %v0_edc8 = load i32, i32* %r3.global-to-local, align 4
  %v1_edc8 = trunc i32 %v0_edc8 to i8
  %v2_edc8 = load i32, i32* %r5.global-to-local, align 4
  %v3_edc8 = inttoptr i32 %v2_edc8 to i8*
  store i8 %v1_edc8, i8* %v3_edc8, align 1
  %v2_edcc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_edcc, i32* @r4, align 4
  store i32 %v9_ed10, i32* @r6, align 4
  store i32 %v12_ed10, i32* @r7, align 4
  store i32 %v15_ed10, i32* @r8, align 4
  store i32 %v18_ed10, i32* @sb, align 4
  store i32 %v21_ed10, i32* @sl, align 4
  store i32 %v24_ed10, i32* @fp, align 4
  ret i32 %v5_ed68

dec_label_pc_edd0:                                ; preds = %dec_label_pc_ed50
  %v0_edd0 = load i32, i32* %r3.global-to-local, align 4
  %v1_edd0 = load i32, i32* %fp.global-to-local, align 4
  %v2_edd0 = inttoptr i32 %v1_edd0 to i32*
  store i32 %v0_edd0, i32* %v2_edd0, align 4
  %v0_edd4 = load i32, i32* @lr, align 4
  %v1_edd4 = load i32, i32* %sb.global-to-local, align 4
  %v2_edd4 = inttoptr i32 %v1_edd4 to i32*
  store i32 %v0_edd4, i32* %v2_edd4, align 4
  %v0_edd8 = load i32, i32* %r7.global-to-local, align 4
  %v1_edd8 = load i32, i32* %sl.global-to-local, align 4
  %v2_edd8 = inttoptr i32 %v1_edd8 to i32*
  store i32 %v0_edd8, i32* %v2_edd8, align 4
  %v0_eddc = load i32, i32* %r6.global-to-local, align 4
  %v1_eddc = load i32, i32* %r8.global-to-local, align 4
  %v2_eddc = inttoptr i32 %v1_eddc to i32*
  store i32 %v0_eddc, i32* %v2_eddc, align 4
  %v2_ede0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ede0, i32* @r4, align 4
  store i32 %v9_ed10, i32* @r6, align 4
  store i32 %v12_ed10, i32* @r7, align 4
  store i32 %v15_ed10, i32* @r8, align 4
  store i32 %v18_ed10, i32* @sb, align 4
  store i32 %v21_ed10, i32* @sl, align 4
  store i32 %v24_ed10, i32* @fp, align 4
  ret i32 %v5_ed68

; uselistorder directives
  uselistorder i32 %v9_ed8c, { 1, 0 }
  uselistorder i32 %v12_ed88, { 1, 0 }
  uselistorder i32 %v5_ed80, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v5_ed68, { 1, 2, 0, 3 }
  uselistorder i32 %v0_eda8, { 1, 0 }
  uselistorder i32 %v0_edac, { 1, 0 }
  uselistorder i32 %v0_ed50, { 1, 0 }
  uselistorder i32 %v24_ed10, { 1, 0 }
  uselistorder i32 %v21_ed10, { 1, 0 }
  uselistorder i32 %v18_ed10, { 1, 0 }
  uselistorder i32 %v15_ed10, { 1, 0 }
  uselistorder i32 %v12_ed10, { 1, 0 }
  uselistorder i32 %v9_ed10, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 4, 3, 0 }
  uselistorder i32* %r6.global-to-local, { 1, 3, 2, 0 }
  uselistorder i32* %r5.global-to-local, { 2, 6, 5, 1, 3, 4, 0 }
  uselistorder i32* %r4.global-to-local, { 2, 4, 3, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 5, 0, 1, 2, 4, 7, 6, 3 }
  uselistorder i32* @global_var_1d1a8.107, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1d1a8.107 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_1d1ac.111, { 2, 3, 4, 1, 0, 5, 6 }
  uselistorder i32* @global_var_1d1b0.113, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1d1b4.109, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_ed68, { 1, 0 }
}

define i32 @function_edf4(i32 %arg1) local_unnamed_addr {
dec_label_pc_edf4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_edf4 = load i32, i32* @r4, align 4
  store i32 %v3_edf4, i32* %stack_var_-8, align 4
  %v6_edf4 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_edf8 = icmp eq i32 %arg1, 0
  br i1 %v2_edf8, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_edf4
  store i32 %v3_edf4, i32* @r4, align 4
  ret i32 0

bb3:                                              ; preds = %dec_label_pc_edf4
  %v1_ee00 = add i32 %arg1, 4
  %v2_ee00 = inttoptr i32 %v1_ee00 to i32*
  %v3_ee00 = load i32, i32* %v2_ee00, align 4
  %v1_ee08 = icmp ne i32 %v3_ee00, 0
  call void @__pseudo_cond_branch(i1 %v1_ee08, i32 ptrtoint (i32* @global_var_12a50.25 to i32))
  %v0_ee0c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ee0c, i32* @r0, align 4
  %v2_ee10 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ee10, i32* @r4, align 4
  store i32 %v6_edf4, i32* @lr, align 4
  %v0_ee14 = call i32 @function_12a50()
  ret i32 %v0_ee14
}

define i32 @function_ee18(i8* %arg1) local_unnamed_addr {
dec_label_pc_ee18:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-4288 = alloca i8, align 1
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2227 = alloca i32, align 4
  %stack_var_-2240 = alloca i8, align 1
  %stack_var_-2228 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_ee18 = load i32, i32* @r4, align 4
  store i32 %v3_ee18, i32* %stack_var_-36, align 4
  %v6_ee18 = load i32, i32* @r5, align 4
  %v9_ee18 = load i32, i32* @r6, align 4
  %v12_ee18 = load i32, i32* @r7, align 4
  %v15_ee18 = load i32, i32* @r8, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_ee30 = call i32 @function_129f8(i32 1, i32 8)
  %v0_ee38 = load i32, i32* @r4, align 4
  %v1_ee38 = inttoptr i32 %v0_ee38 to i8*
  store i32 %v0_ee38, i32* %r0.global-to-local, align 4
  %v3_ee3c = call i32 @function_114f8(i8* %v1_ee38)
  %v2_ee44 = ptrtoint i32* %stack_var_-2228 to i32
  store i32 %v2_ee44, i32* %fp.global-to-local, align 4
  %v2_ee48 = ptrtoint i8* %stack_var_-2240 to i32
  %v1_ee4c = add i32 %v3_ee3c, 1
  store i32 %v1_ee4c, i32* %r0.global-to-local, align 4
  %v2_ee50 = ptrtoint i32* %stack_var_-2227 to i32
  store i32 %v2_ee50, i32* %r2.global-to-local, align 4
  store i32 %v2_ee44, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_ee90162 = icmp eq i32 %v1_ee4c, 0
  store i1 %v2_ee90162, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_ee98163 = or i32 %v2_ee50, 1
  store i32 %v1_ee98163, i32* %r1.global-to-local, align 4
  %tmp124164 = icmp slt i32 %v1_ee4c, 1
  br i1 %tmp124164, label %dec_label_pc_eea0, label %dec_label_pc_ee60.lr.ph

dec_label_pc_ee60.lr.ph:                          ; preds = %dec_label_pc_ee18
  %v0_ee60.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ee60

dec_label_pc_ee60:                                ; preds = %dec_label_pc_ee60.lr.ph, %.thread12
  %v1_ee74176.off0 = phi i8 [ 0, %dec_label_pc_ee60.lr.ph ], [ %extract.t179, %.thread12 ]
  %v0_ee60 = phi i32 [ %v0_ee60.pre, %dec_label_pc_ee60.lr.ph ], [ %v1_ee84, %.thread12 ]
  %v2_eea4165 = phi i32 [ %v2_ee50, %dec_label_pc_ee60.lr.ph ], [ %v0_ee8c, %.thread12 ]
  %v1_ee60 = inttoptr i32 %v0_ee60 to i8*
  %v2_ee60 = load i8, i8* %v1_ee60, align 1
  %v3_ee60 = zext i8 %v2_ee60 to i32
  store i32 %v3_ee60, i32* %r3.global-to-local, align 4
  %v2_ee64 = icmp eq i8 %v2_ee60, 0
  store i1 %v2_ee64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee64, label %.thread6, label %bb

bb:                                               ; preds = %dec_label_pc_ee60
  %v8_ee68 = icmp eq i8 %v2_ee60, 46
  store i1 %v8_ee68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ee68, label %.thread6, label %.thread

.thread:                                          ; preds = %bb
  %v4_ee6c = inttoptr i32 %v2_eea4165 to i8*
  store i8 %v2_ee60, i8* %v4_ee6c, align 1
  %v5_ee6c = load i32, i32* %r2.global-to-local, align 4
  %v6_ee6c = add i32 %v5_ee6c, 1
  store i32 %v6_ee6c, i32* %r2.global-to-local, align 4
  %v0_ee70.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee70.pr.pr, label %.thread..thread6_crit_edge, label %bb122

.thread..thread6_crit_edge:                       ; preds = %.thread
  %v1_ee74.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t = trunc i32 %v1_ee74.pre to i8
  br label %.thread6

.thread6:                                         ; preds = %.thread..thread6_crit_edge, %bb, %dec_label_pc_ee60
  %v1_ee74.off0 = phi i8 [ %extract.t, %.thread..thread6_crit_edge ], [ %v1_ee74176.off0, %bb ], [ %v1_ee74176.off0, %dec_label_pc_ee60 ]
  %v3_ee74 = load i32, i32* %r5.global-to-local, align 4
  %v4_ee74 = inttoptr i32 %v3_ee74 to i8*
  store i8 %v1_ee74.off0, i8* %v4_ee74, align 1
  %v0_ee78.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee78.pr, label %bb123, label %..thread12_crit_edge

bb122:                                            ; preds = %.thread
  store i32 %v6_ee6c, i32* %r1.global-to-local, align 4
  %v1_ee78 = load i32, i32* %ip.global-to-local, align 4
  %v2_ee78 = urem i32 %v1_ee78, 256
  store i32 %v2_ee78, i32* %lr.global-to-local, align 4
  br label %.thread12

..thread12_crit_edge:                             ; preds = %.thread6
  %v1_ee7810 = load i32, i32* %ip.global-to-local, align 4
  %v2_ee7811 = urem i32 %v1_ee7810, 256
  store i32 %v2_ee7811, i32* %lr.global-to-local, align 4
  br label %.thread12

bb123:                                            ; preds = %.thread6
  %v1_ee7c.pre = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_ee7c.pre, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb122, %..thread12_crit_edge, %bb123
  %v0_ee94.pre = phi i32 [ %v2_ee7811, %..thread12_crit_edge ], [ %v2_ee78, %bb122 ], [ 0, %bb123 ]
  %v0_ee84 = load i32, i32* @r4, align 4
  %v1_ee84 = add i32 %v0_ee84, 1
  store i32 %v1_ee84, i32* @r4, align 4
  %v0_ee88 = load i32, i32* %r0.global-to-local, align 4
  %v1_ee88 = add i32 %v0_ee88, -1
  store i32 %v1_ee88, i32* %r0.global-to-local, align 4
  %v0_ee8c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_ee8c, i32* %r2.global-to-local, align 4
  %v2_ee90 = icmp eq i32 %v1_ee88, 0
  store i1 %v2_ee90, i1* %cpsr_z.global-to-local, align 1
  %v1_ee94 = add nuw nsw i32 %v0_ee94.pre, 1
  store i32 %v1_ee94, i32* %ip.global-to-local, align 4
  %v1_ee98 = add i32 %v0_ee8c, 1
  store i32 %v1_ee98, i32* %r1.global-to-local, align 4
  %tmp124 = icmp slt i32 %v1_ee88, 1
  %extract.t179 = trunc i32 %v0_ee94.pre to i8
  br i1 %tmp124, label %dec_label_pc_eea0, label %dec_label_pc_ee60

dec_label_pc_eea0:                                ; preds = %.thread12, %dec_label_pc_ee18
  %v2_eea4.lcssa = phi i32 [ %v2_ee50, %dec_label_pc_ee18 ], [ %v0_ee8c, %.thread12 ]
  %v3_ee30 = inttoptr i32 %v2_ee30 to i8*
  store i32 0, i32* @r4, align 4
  %v3_eea4 = inttoptr i32 %v2_eea4.lcssa to i8*
  store i8 0, i8* %v3_eea4, align 1
  store i32 %v2_ee44, i32* %r0.global-to-local, align 4
  %v1_eeac = bitcast i32* %stack_var_-2228 to i8*
  %v2_eeac = call i32 @function_114f8(i8* %v1_eeac)
  %v2_eeb0 = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_eeb0, i32* %r1.global-to-local, align 4
  %v0_eeb4 = load i32, i32* %fp.global-to-local, align 4
  %v2_eeb4 = add i32 %v0_eeb4, %v2_eeac
  store i32 %v2_eeb4, i32* @r5, align 4
  %v0_eeb8 = load i32, i32* @r4, align 4
  store i32 %v0_eeb8, i32* %stack_var_-64, align 4
  store i32 %v2_ee44, i32* %r0.global-to-local, align 4
  %v2_eecc = call i32 @function_114f8(i8* %v1_eeac)
  %v1_eed0 = add i32 %v2_eecc, 17
  store i32 %v1_eed0, i32* %r0.global-to-local, align 4
  %v0_eed8 = call i32 @function_eb90()
  store i32 %v0_eed8, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r1.global-to-local, align 4
  %v2_eee4 = call i32 @function_11b84(i32 %v0_eed8, i32 65535)
  store i32 16, i32* @r1, align 4
  %v6_eef0 = urem i32 %v2_eee4, 65536
  store i32 %v6_eef0, i32* %r3.global-to-local, align 4
  %v2_eef8 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_eef8, i32* @r0, align 4
  %v0_ef00 = call i32 @function_11598()
  %sext = mul i32 %v2_eee4, 16777216
  %v4_ef04 = sdiv i32 %sext, 16777216
  store i32 2, i32* %stack_var_-64, align 4
  store i32 %v2_eeb0, i32* %r3.global-to-local, align 4
  store i32 53, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v4_ef04, i32* %lr.global-to-local, align 4
  %v0_ef4c = load i32, i32* @r5, align 4
  %v2_ef4c = add i32 %v0_ef4c, 1
  store i32 %v2_ef4c, i32* %ip.global-to-local, align 4
  %v2_ef50 = ptrtoint i8* %stack_var_-4288 to i32
  store i32 %v2_ef50, i32* %r1.global-to-local, align 4
  %v5_ef54 = trunc i32 %v4_ef04 to i8
  store i8 %v5_ef54, i8* %stack_var_-2240, align 1
  %v0_ef6c = load i32, i32* @r4, align 4
  %v1_ef6c = trunc i32 %v0_ef6c to i8
  %v4_ef6c = inttoptr i32 %v2_ef4c to i8*
  store i8 %v1_ef6c, i8* %v4_ef6c, align 1
  %v0_ef70 = load i32, i32* @r4, align 4
  %v1_ef70 = trunc i32 %v0_ef70 to i8
  %v2_ef70 = load i32, i32* %ip.global-to-local, align 4
  %v3_ef70 = add i32 %v2_ef70, 2
  %v4_ef70 = inttoptr i32 %v3_ef70 to i8*
  store i8 %v1_ef70, i8* %v4_ef70, align 1
  %v0_ef74 = load i32, i32* %r0.global-to-local, align 4
  %v1_ef74 = trunc i32 %v0_ef74 to i8
  %v2_ef74 = load i32, i32* %ip.global-to-local, align 4
  %v3_ef74 = add i32 %v2_ef74, 3
  %v4_ef74 = inttoptr i32 %v3_ef74 to i8*
  store i8 %v1_ef74, i8* %v4_ef74, align 1
  %v0_ef78 = load i32, i32* %r0.global-to-local, align 4
  %v1_ef78 = trunc i32 %v0_ef78 to i8
  %v2_ef78 = load i32, i32* %ip.global-to-local, align 4
  %v3_ef78 = add i32 %v2_ef78, 1
  %v4_ef78 = inttoptr i32 %v3_ef78 to i8*
  store i8 %v1_ef78, i8* %v4_ef78, align 1
  %v0_ef80 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_ef80, i32* %sl.global-to-local, align 4
  %v2_ef88 = ptrtoint i32* %stack_var_-192 to i32
  store i32 %v2_ef88, i32* @r6, align 4
  %v3_efc0 = bitcast i32* %stack_var_-64 to %sockaddr*
  %v4_efdc = bitcast i8* %stack_var_-2240 to i32*
  %v2_f02c = ptrtoint i32* %stack_var_-36 to i32
  %v2_f058 = ptrtoint i32* %stack_var_-48 to i32
  %v6_f0b4 = bitcast i8* %stack_var_-4288 to i32*
  %v1_f130 = add i32 %v2_ef50, 12
  %v1_f138 = inttoptr i32 %v1_f130 to i8*
  %v1_f14c = add i32 %v2_ef50, 1
  %v2_f14c = inttoptr i32 %v1_f14c to i8*
  %v1_f168 = add i32 %v2_ef50, 6
  %v2_f168 = inttoptr i32 %v1_f168 to i8*
  %v1_f16c = add i32 %v2_ef50, 7
  %v2_f16c = inttoptr i32 %v1_f16c to i8*
  br label %dec_label_pc_ef8c

dec_label_pc_ef8c:                                ; preds = %dec_label_pc_f0e0, %dec_label_pc_eea0
  %v1_ef90 = phi i32 [ %v0_ef8c.pre, %dec_label_pc_f0e0 ], [ -1, %dec_label_pc_eea0 ]
  %v7_ef8c = icmp eq i32 %v1_ef90, -1
  store i1 %v7_ef8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef8c, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_ef8c
  store i32 %v1_ef90, i32* %r0.global-to-local, align 4
  br label %bb126

bb126:                                            ; preds = %dec_label_pc_ef8c, %bb125
  store i32 61336, i32* @lr, align 4
  %v1_ef94 = xor i1 %v7_ef8c, true
  call void @__pseudo_cond_branch(i1 %v1_ef94, i32 ptrtoint (i32* @global_var_11dfc.101 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_efa4 = call i32 @function_1270c(i32 2, i32 2, i32 0)
  store i32 %v3_efa4, i32* %r0.global-to-local, align 4
  %v7_efa8 = icmp eq i32 %v3_efa4, -1
  store i1 %v7_efa8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_efa4, i32* @r7, align 4
  br i1 %v7_efa8, label %dec_label_pc_f120, label %dec_label_pc_efb4

dec_label_pc_efb4:                                ; preds = %bb126
  store i32 %v2_eef8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_efc0 = call i32 @function_12568(i32 %v3_efa4, %sockaddr* %v3_efc0, i32 16)
  store i32 %v4_efc0, i32* %r0.global-to-local, align 4
  %v7_efc4 = icmp eq i32 %v4_efc0, -1
  store i1 %v7_efc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efc4, label %dec_label_pc_f0e8, label %dec_label_pc_efcc

dec_label_pc_efcc:                                ; preds = %dec_label_pc_efb4
  %v0_efcc = load i32, i32* @r7, align 4
  store i32 %v0_efcc, i32* %r0.global-to-local, align 4
  store i32 %v2_ee48, i32* %r1.global-to-local, align 4
  store i32 %v1_eed0, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_efdc = call i32 @function_1267c(i32 %v0_efcc, i32* %v4_efdc, i32 %v1_eed0, i32 16384)
  store i32 %v5_efdc, i32* %r0.global-to-local, align 4
  %v7_efe0 = icmp eq i32 %v5_efdc, -1
  store i1 %v7_efe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efe0, label %dec_label_pc_f0e8, label %dec_label_pc_efe8

dec_label_pc_efe8:                                ; preds = %dec_label_pc_efcc
  %v0_efe8 = load i32, i32* @r7, align 4
  store i32 %v0_efe8, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_eff4 = call i32 @function_11d38(i32 3, i32 %v0_efe8)
  store i32 0, i32* @r4, align 4
  %v1_effc = or i32 %v2_eff4, 2048
  store i32 %v1_effc, i32* @r2, align 4
  %v0_f000 = load i32, i32* @r7, align 4
  store i32 %v0_f000, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_f008 = call i32 @function_11d38(i32 4, i32 %v0_f000)
  store i32 %v2_f008, i32* %r0.global-to-local, align 4
  %v0_f00c = load i32, i32* @r4, align 4
  store i32 %v0_f00c, i32* %r3.global-to-local, align 4
  %v2_f010154 = load i32, i32* @r6, align 4
  %v3_f010155 = add i32 %v2_f010154, %v0_f00c
  %v4_f010156 = inttoptr i32 %v3_f010155 to i32*
  store i32 %v0_f00c, i32* %v4_f010156, align 4
  %v0_f014157 = load i32, i32* %r3.global-to-local, align 4
  %v1_f014158 = add i32 %v0_f014157, 4
  store i32 %v1_f014158, i32* %r3.global-to-local, align 4
  %v7_f018159 = icmp eq i32 %v1_f014158, 128
  br i1 %v7_f018159, label %dec_label_pc_f020, label %dec_label_pc_f010.dec_label_pc_f010_crit_edge

dec_label_pc_f010.dec_label_pc_f010_crit_edge:    ; preds = %dec_label_pc_efe8, %dec_label_pc_f010.dec_label_pc_f010_crit_edge
  %v1_f014160 = phi i32 [ %v1_f014, %dec_label_pc_f010.dec_label_pc_f010_crit_edge ], [ %v1_f014158, %dec_label_pc_efe8 ]
  %v0_f010.pre = load i32, i32* @r4, align 4
  %v2_f010 = load i32, i32* @r6, align 4
  %v3_f010 = add i32 %v2_f010, %v1_f014160
  %v4_f010 = inttoptr i32 %v3_f010 to i32*
  store i32 %v0_f010.pre, i32* %v4_f010, align 4
  %v0_f014 = load i32, i32* %r3.global-to-local, align 4
  %v1_f014 = add i32 %v0_f014, 4
  store i32 %v1_f014, i32* %r3.global-to-local, align 4
  %v7_f018 = icmp eq i32 %v1_f014, 128
  br i1 %v7_f018, label %dec_label_pc_f020, label %dec_label_pc_f010.dec_label_pc_f010_crit_edge

dec_label_pc_f020:                                ; preds = %dec_label_pc_f010.dec_label_pc_f010_crit_edge, %dec_label_pc_efe8
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_f020 = load i32, i32* @r7, align 4
  %v3_f020 = udiv i32 %v0_f020, 32
  %v3_f028 = mul nuw nsw i32 %v3_f020, 4
  store i32 %v3_f028, i32* %r3.global-to-local, align 4
  store i32 %v2_f02c, i32* %r2.global-to-local, align 4
  %v2_f030 = add i32 %v3_f028, %v2_f02c
  store i32 %v2_f030, i32* @r5, align 4
  %v1_f034 = add i32 %v2_f030, -156
  %v2_f034 = inttoptr i32 %v1_f034 to i32*
  %v3_f034 = load i32, i32* %v2_f034, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_f03c = urem i32 %v0_f020, 32
  store i32 %v1_f03c, i32* @r8, align 4
  %v7_f040 = shl i32 1, %v1_f03c
  %v8_f040 = or i32 %v3_f034, %v7_f040
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_f040, i32* %v2_f034, align 4
  %v0_f050 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_f050, i32* %stack_var_-48, align 4
  store i32 %v2_f058, i32* @lr, align 4
  store i32 %v2_eeb0, i32* %ip.global-to-local, align 4
  %v0_f060 = load i32, i32* @r7, align 4
  %v1_f060 = load i32, i32* %r3.global-to-local, align 4
  %v2_f060 = add i32 %v1_f060, %v0_f060
  store i32 %v2_f060, i32* %r0.global-to-local, align 4
  store i32 %v2_ef88, i32* %r1.global-to-local, align 4
  %v0_f06c = load i32, i32* @r4, align 4
  store i32 %v0_f06c, i32* %r2.global-to-local, align 4
  store i32 %v0_f06c, i32* %r3.global-to-local, align 4
  %v5_f078 = call i32 @function_1201c(i32 %v2_f060, i32 %v2_ef88, i32 %v0_f06c, i32 %v0_f06c, i32 %v2_f058)
  store i32 %v5_f078, i32* %r0.global-to-local, align 4
  %v7_f07c = icmp eq i32 %v5_f078, -1
  store i1 %v7_f07c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f07c, label %dec_label_pc_f0f8, label %dec_label_pc_f084

dec_label_pc_f084:                                ; preds = %dec_label_pc_f020
  %v2_f084 = icmp eq i32 %v5_f078, 0
  store i1 %v2_f084, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f084, label %dec_label_pc_f0d8, label %dec_label_pc_f08c

dec_label_pc_f08c:                                ; preds = %dec_label_pc_f084
  %v0_f08c = load i32, i32* @r5, align 4
  %v1_f08c = add i32 %v0_f08c, -156
  %v2_f08c = inttoptr i32 %v1_f08c to i32*
  %v3_f08c = load i32, i32* %v2_f08c, align 4
  %v1_f090 = load i32, i32* @r8, align 4
  %v6_f090 = ashr i32 %v3_f08c, %v1_f090
  store i32 %v6_f090, i32* %r3.global-to-local, align 4
  %v1_f094 = urem i32 %v6_f090, 2
  %v2_f094 = icmp eq i32 %v1_f094, 0
  store i1 %v2_f094, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f094, label %dec_label_pc_f0f8, label %dec_label_pc_f09c

dec_label_pc_f09c:                                ; preds = %dec_label_pc_f08c
  store i32 %v2_ef50, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f0a8 = load i32, i32* @r7, align 4
  store i32 %v0_f0a8, i32* %r0.global-to-local, align 4
  %v0_f0ac = load i32, i32* @r4, align 4
  %v7_f0b4 = call i32 @function_12648(i32 %v0_f0a8, i32* %v6_f0b4, i32 2048, i32 16384, i32 %v0_f0ac, i32 %v0_f0ac)
  store i32 %v7_f0b4, i32* %r4.global-to-local, align 4
  %v0_f0bc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_f0bc, i32* %r0.global-to-local, align 4
  %v1_f0c0 = inttoptr i32 %v0_f0bc to i8*
  %v2_f0c0 = call i32 @function_114f8(i8* %v1_f0c0)
  %v1_f0c4 = add i32 %v2_f0c0, 17
  store i32 %v1_f0c4, i32* %r0.global-to-local, align 4
  %v0_f0c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_f0c8 = icmp ult i32 %v0_f0c8, %v1_f0c4
  %v9_f0c8 = icmp eq i32 %v0_f0c8, %v1_f0c4
  store i1 %v9_f0c8, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* @r4, align 4
  br i1 %v3_f0c8, label %dec_label_pc_f0d8, label %dec_label_pc_f12c

dec_label_pc_f0d8:                                ; preds = %dec_label_pc_f09c, %dec_label_pc_f12c, %dec_label_pc_f168, %dec_label_pc_f084, %dec_label_pc_f120
  %v0_f0d8 = load i32, i32* %sl.global-to-local, align 4
  %v7_f0d8 = icmp eq i32 %v0_f0d8, 5
  store i1 %v7_f0d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0d8, label %dec_label_pc_f0f8, label %dec_label_pc_f0e0

dec_label_pc_f0e0:                                ; preds = %dec_label_pc_f0e8, %dec_label_pc_f0d8
  %v0_f0e0 = phi i32 [ %v0_f0f0, %dec_label_pc_f0e8 ], [ %v0_f0d8, %dec_label_pc_f0d8 ]
  %v1_f0e0 = add i32 %v0_f0e0, 1
  store i32 %v1_f0e0, i32* %sl.global-to-local, align 4
  %v0_ef8c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_ef8c

dec_label_pc_f0e8:                                ; preds = %dec_label_pc_efcc, %dec_label_pc_efb4
  %v0_f0e8 = phi i32 [ %v5_efdc, %dec_label_pc_efcc ], [ %v4_efc0, %dec_label_pc_efb4 ]
  %v1_f0e8 = add i32 %v0_f0e8, 2
  store i32 %v1_f0e8, i32* %r0.global-to-local, align 4
  %v1_f0ec = call i32 @function_13228(i32 %v1_f0e8)
  store i32 %v1_f0ec, i32* %r0.global-to-local, align 4
  %v0_f0f0 = load i32, i32* %sl.global-to-local, align 4
  %v7_f0f0 = icmp eq i32 %v0_f0f0, 5
  store i1 %v7_f0f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0f0, label %dec_label_pc_f0f8, label %dec_label_pc_f0e0

dec_label_pc_f0f8:                                ; preds = %dec_label_pc_f0e8, %dec_label_pc_f0d8, %dec_label_pc_f08c, %dec_label_pc_f020, %dec_label_pc_f178, %dec_label_pc_f184.backedge
  %v0_f0f8 = load i32, i32* @r7, align 4
  store i32 %v0_f0f8, i32* %r0.global-to-local, align 4
  %v1_f0fc = call i32 @function_11dfc(i32 %v0_f0f8)
  store i32 %v1_f0fc, i32* %r0.global-to-local, align 4
  store i32 %v2_ee30, i32* %r2.global-to-local, align 4
  %v2_f104 = load i8, i8* %v3_ee30, align 1
  %v3_f104 = zext i8 %v2_f104 to i32
  store i32 %v3_f104, i32* @r4, align 4
  %v2_f108 = icmp eq i8 %v2_f104, 0
  store i1 %v2_f108, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f108, label %dec_label_pc_f264, label %dec_label_pc_f110

dec_label_pc_f110:                                ; preds = %dec_label_pc_f0f8, %dec_label_pc_f264
  %stack_var_-4300.0 = phi i8* [ %v5_f278, %dec_label_pc_f264 ], [ %v3_ee30, %dec_label_pc_f0f8 ]
  %v4_f110 = ptrtoint i8* %stack_var_-4300.0 to i32
  store i32 %v4_f110, i32* %r0.global-to-local, align 4
  %v2_f11c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f11c, i32* @r4, align 4
  store i32 %v6_ee18, i32* @r5, align 4
  store i32 %v9_ee18, i32* @r6, align 4
  store i32 %v12_ee18, i32* @r7, align 4
  store i32 %v15_ee18, i32* @r8, align 4
  ret i32 %v4_f110

dec_label_pc_f120:                                ; preds = %bb126
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_f124 = call i32 @function_13228(i32 1)
  store i32 %v1_f124, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f0d8

dec_label_pc_f12c:                                ; preds = %dec_label_pc_f09c
  store i32 %v2_ef50, i32* %lr.global-to-local, align 4
  store i32 %v1_f130, i32* %fp.global-to-local, align 4
  store i32 %v1_f130, i32* %r0.global-to-local, align 4
  %v2_f138 = call i32 @function_114f8(i8* %v1_f138)
  store i32 %v2_f138, i32* %r0.global-to-local, align 4
  store i32 %v2_ef50, i32* %ip.global-to-local, align 4
  store i32 %v2_f02c, i32* %r1.global-to-local, align 4
  %v4_f148 = load i8, i8* %stack_var_-4288, align 1
  %v5_f148 = sext i8 %v4_f148 to i32
  store i32 %v5_f148, i32* %r3.global-to-local, align 4
  %v3_f14c = load i8, i8* %v2_f14c, align 1
  %v4_f14c = zext i8 %v3_f14c to i32
  store i32 %v4_f14c, i32* %r2.global-to-local, align 4
  store i32 %v4_ef04, i32* @lr, align 4
  %v4_f154 = mul nuw nsw i32 %v4_f14c, 256
  %v5_f154 = or i32 %v4_f154, %v5_f148
  store i32 %v5_f154, i32* %r3.global-to-local, align 4
  %v0_f158 = load i32, i32* %fp.global-to-local, align 4
  %v9_f15c = icmp eq i32 %v5_f154, %v4_ef04
  store i1 %v9_f15c, i1* %cpsr_z.global-to-local, align 1
  %v2_f158 = add i32 %v2_f138, 5
  %v1_f160 = add i32 %v2_f158, %v0_f158
  store i32 %v1_f160, i32* %r0.global-to-local, align 4
  br i1 %v9_f15c, label %dec_label_pc_f168, label %dec_label_pc_f0d8

dec_label_pc_f168:                                ; preds = %dec_label_pc_f12c
  %v3_f168 = load i8, i8* %v2_f168, align 1
  %v4_f168 = zext i8 %v3_f168 to i32
  store i32 %v4_f168, i32* %r2.global-to-local, align 4
  %v3_f16c = load i8, i8* %v2_f16c, align 1
  %v4_f16c = zext i8 %v3_f16c to i32
  store i32 %v4_f16c, i32* %r3.global-to-local, align 4
  %v4_f170 = mul nuw nsw i32 %v4_f16c, 256
  %v5_f170 = or i32 %v4_f170, %v4_f168
  store i32 %v5_f170, i32* %r2.global-to-local, align 4
  %v7_f170 = icmp eq i32 %v5_f170, 0
  store i1 %v7_f170, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f170, label %dec_label_pc_f0d8, label %dec_label_pc_f178

dec_label_pc_f178:                                ; preds = %dec_label_pc_f168
  %v3_f17c = mul nuw nsw i32 %v4_f168, 256
  %v5_f180 = or i32 %v4_f16c, %v3_f17c
  %v1_f238 = add i32 %v2_ef50, -49152
  %v1_f184143 = add nsw i32 %v5_f180, -1
  %v3_f188144 = mul i32 %v1_f184143, 65536
  store i32 %v3_f188144, i32* %r3.global-to-local, align 4
  %v7_f18c150 = icmp eq i32 %v3_f188144, -65536
  store i1 %v7_f18c150, i1* %cpsr_z.global-to-local, align 1
  %v3_f190151 = urem i32 %v1_f184143, 65536
  store i32 %v3_f190151, i32* @r6, align 4
  br i1 %v7_f18c150, label %dec_label_pc_f0f8, label %dec_label_pc_f198.lr.ph

dec_label_pc_f198.lr.ph:                          ; preds = %dec_label_pc_f178
  %v1_f314 = add i32 %v2_ee30, 4
  %v2_f314 = inttoptr i32 %v1_f314 to i32*
  br label %dec_label_pc_f198

dec_label_pc_f198:                                ; preds = %dec_label_pc_f198.lr.ph, %dec_label_pc_f184.backedge
  %v3_f190153 = phi i32 [ %v3_f190151, %dec_label_pc_f198.lr.ph ], [ %v3_f190, %dec_label_pc_f184.backedge ]
  %v0_f1ec152 = phi i32 [ %v1_f160, %dec_label_pc_f198.lr.ph ], [ %storemerge, %dec_label_pc_f184.backedge ]
  store i32 %v0_f1ec152, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_f1a417 = inttoptr i32 %v0_f1ec152 to i8*
  %v2_f1a418 = load i8, i8* %v1_f1a417, align 1
  %v3_f1a419 = zext i8 %v2_f1a418 to i32
  store i32 %v3_f1a419, i32* %r2.global-to-local, align 4
  %v2_f1a820 = icmp eq i8 %v2_f1a418, 0
  store i1 %v2_f1a820, i1* %cpsr_z.global-to-local, align 1
  %v3_f1ac21 = mul nuw nsw i32 %v3_f1a419, 256
  store i32 %v3_f1ac21, i32* %r1.global-to-local, align 4
  br i1 %v2_f1a820, label %dec_label_pc_f1e4, label %dec_label_pc_f1b4.preheader

dec_label_pc_f1b4.preheader:                      ; preds = %dec_label_pc_f198, %dec_label_pc_f1a4.backedge
  %v1_f288 = phi i32 [ %v1_f28849, %dec_label_pc_f1a4.backedge ], [ 1, %dec_label_pc_f198 ]
  %v0_f28047 = phi i32 [ %v0_f280, %dec_label_pc_f1a4.backedge ], [ 0, %dec_label_pc_f198 ]
  %v0_f1c045 = phi i32 [ %v3_f1ac, %dec_label_pc_f1a4.backedge ], [ %v3_f1ac21, %dec_label_pc_f198 ]
  %v0_f1bc43 = phi i32 [ %v1_f284, %dec_label_pc_f1a4.backedge ], [ %v0_f1ec152, %dec_label_pc_f198 ]
  %v0_f1b441 = phi i32 [ %v3_f1a4, %dec_label_pc_f1a4.backedge ], [ %v3_f1a419, %dec_label_pc_f198 ]
  br label %dec_label_pc_f1b4

dec_label_pc_f1b4:                                ; preds = %dec_label_pc_f1b4.preheader, %dec_label_pc_f1bc
  %v0_f280 = phi i32 [ %v0_f28047, %dec_label_pc_f1b4.preheader ], [ 1, %dec_label_pc_f1bc ]
  %v0_f1c0 = phi i32 [ %v0_f1c045, %dec_label_pc_f1b4.preheader ], [ %v3_f1dc, %dec_label_pc_f1bc ]
  %v0_f284 = phi i32 [ %v0_f1bc43, %dec_label_pc_f1b4.preheader ], [ %v2_f1cc, %dec_label_pc_f1bc ]
  %v0_f1b4 = phi i32 [ %v0_f1b441, %dec_label_pc_f1b4.preheader ], [ %v3_f1d0, %dec_label_pc_f1bc ]
  %v7_f1b4 = icmp eq i32 %v0_f1b4, 191
  store i1 %v7_f1b4, i1* %cpsr_z.global-to-local, align 1
  %tmp180 = icmp ult i32 %v0_f1b4, 192
  br i1 %tmp180, label %dec_label_pc_f280, label %dec_label_pc_f1bc

dec_label_pc_f1bc:                                ; preds = %dec_label_pc_f1b4
  %v1_f1bc = add i32 %v0_f284, 1
  %v2_f1bc = inttoptr i32 %v1_f1bc to i8*
  %v3_f1bc = load i8, i8* %v2_f1bc, align 1
  %v4_f1bc = zext i8 %v3_f1bc to i32
  store i32 %v2_ef50, i32* %r1.global-to-local, align 4
  %v2_f1c0 = add i32 %v0_f1c0, %v1_f238
  %v2_f1cc = add i32 %v2_f1c0, %v4_f1bc
  store i32 %v2_f1cc, i32* %r3.global-to-local, align 4
  %v1_f1d0 = inttoptr i32 %v2_f1cc to i8*
  %v2_f1d0 = load i8, i8* %v1_f1d0, align 1
  %v3_f1d0 = zext i8 %v2_f1d0 to i32
  store i32 %v3_f1d0, i32* %r2.global-to-local, align 4
  %v2_f1d4 = icmp eq i8 %v2_f1d0, 0
  store i1 %v2_f1d4, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v3_f1dc = mul nuw nsw i32 %v3_f1d0, 256
  store i32 %v3_f1dc, i32* %r1.global-to-local, align 4
  br i1 %v2_f1d4, label %dec_label_pc_f1e4, label %dec_label_pc_f1b4

dec_label_pc_f1e4:                                ; preds = %dec_label_pc_f1a4.backedge, %dec_label_pc_f1bc, %dec_label_pc_f198
  %v1_f1e8 = phi i32 [ 1, %dec_label_pc_f198 ], [ %v1_f288, %dec_label_pc_f1bc ], [ %v1_f28849, %dec_label_pc_f1a4.backedge ]
  %v0_f1e4 = phi i32 [ 0, %dec_label_pc_f198 ], [ 1, %dec_label_pc_f1bc ], [ %v0_f280, %dec_label_pc_f1a4.backedge ]
  %v7_f1e4 = icmp eq i32 %v0_f1e4, 1
  store i1 %v7_f1e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1e4, label %bb127, label %bb128

bb127:                                            ; preds = %dec_label_pc_f1e4
  %v2_f1e8 = add i32 %v1_f1e8, 1
  store i32 %v2_f1e8, i32* %ip.global-to-local, align 4
  br label %bb128

bb128:                                            ; preds = %dec_label_pc_f1e4, %bb127
  %v1_f1ec = phi i32 [ %v1_f1e8, %dec_label_pc_f1e4 ], [ %v2_f1e8, %bb127 ]
  %v2_f1ec = add i32 %v1_f1ec, %v0_f1ec152
  store i32 %v2_f1ec, i32* @r4, align 4
  %v3_f1f0 = inttoptr i32 %v2_f1ec to i8*
  %v4_f1f0 = load i8, i8* %v3_f1f0, align 1
  %v6_f1f0 = zext i8 %v4_f1f0 to i32
  store i32 %v6_f1f0, i32* %r3.global-to-local, align 4
  %v1_f1f4 = add i32 %v2_f1ec, 1
  %v2_f1f4 = inttoptr i32 %v1_f1f4 to i8*
  %v3_f1f4 = load i8, i8* %v2_f1f4, align 1
  %v4_f1f4 = zext i8 %v3_f1f4 to i32
  store i32 %v4_f1f4, i32* %r2.global-to-local, align 4
  %v4_f1f8 = mul nuw nsw i32 %v4_f1f4, 256
  %v5_f1f8 = or i32 %v4_f1f8, %v6_f1f0
  store i32 %v5_f1f8, i32* %r3.global-to-local, align 4
  %v7_f1fc = icmp eq i32 %v5_f1f8, 256
  store i1 %v7_f1fc, i1* %cpsr_z.global-to-local, align 1
  %v1_f200 = add i32 %v2_f1ec, 10
  store i32 %v1_f200, i32* @r5, align 4
  br i1 %v7_f1fc, label %dec_label_pc_f2a0, label %dec_label_pc_f208

dec_label_pc_f208:                                ; preds = %dec_label_pc_f2a0, %bb128
  store i32 %v1_f200, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_f21423 = inttoptr i32 %v1_f200 to i8*
  %v2_f21424 = load i8, i8* %v1_f21423, align 1
  %v3_f21425 = zext i8 %v2_f21424 to i32
  store i32 %v3_f21425, i32* %r2.global-to-local, align 4
  %v2_f21826 = icmp eq i8 %v2_f21424, 0
  store i1 %v2_f21826, i1* %cpsr_z.global-to-local, align 1
  %v3_f21c27 = mul nuw nsw i32 %v3_f21425, 256
  store i32 %v3_f21c27, i32* %r1.global-to-local, align 4
  br i1 %v2_f21826, label %dec_label_pc_f254, label %dec_label_pc_f224.preheader

dec_label_pc_f224.preheader:                      ; preds = %dec_label_pc_f208, %dec_label_pc_f214.backedge
  %v1_f298 = phi i32 [ %v1_f29864, %dec_label_pc_f214.backedge ], [ 1, %dec_label_pc_f208 ]
  %v0_f29062 = phi i32 [ %v0_f290, %dec_label_pc_f214.backedge ], [ 0, %dec_label_pc_f208 ]
  %v0_f23060 = phi i32 [ %v3_f21c, %dec_label_pc_f214.backedge ], [ %v3_f21c27, %dec_label_pc_f208 ]
  %v0_f22c58 = phi i32 [ %v1_f294, %dec_label_pc_f214.backedge ], [ %v1_f200, %dec_label_pc_f208 ]
  %v0_f22456 = phi i32 [ %v3_f214, %dec_label_pc_f214.backedge ], [ %v3_f21425, %dec_label_pc_f208 ]
  br label %dec_label_pc_f224

dec_label_pc_f224:                                ; preds = %dec_label_pc_f224.preheader, %dec_label_pc_f22c
  %v0_f290 = phi i32 [ %v0_f29062, %dec_label_pc_f224.preheader ], [ 1, %dec_label_pc_f22c ]
  %v0_f230 = phi i32 [ %v0_f23060, %dec_label_pc_f224.preheader ], [ %v3_f24c, %dec_label_pc_f22c ]
  %v0_f294 = phi i32 [ %v0_f22c58, %dec_label_pc_f224.preheader ], [ %v2_f23c, %dec_label_pc_f22c ]
  %v0_f224 = phi i32 [ %v0_f22456, %dec_label_pc_f224.preheader ], [ %v3_f240, %dec_label_pc_f22c ]
  %v7_f224 = icmp eq i32 %v0_f224, 191
  store i1 %v7_f224, i1* %cpsr_z.global-to-local, align 1
  %tmp181 = icmp ult i32 %v0_f224, 192
  br i1 %tmp181, label %dec_label_pc_f290, label %dec_label_pc_f22c

dec_label_pc_f22c:                                ; preds = %dec_label_pc_f224
  %v1_f22c = add i32 %v0_f294, 1
  %v2_f22c = inttoptr i32 %v1_f22c to i8*
  %v3_f22c = load i8, i8* %v2_f22c, align 1
  %v4_f22c = zext i8 %v3_f22c to i32
  store i32 %v2_ef50, i32* %r1.global-to-local, align 4
  %v2_f230 = add i32 %v0_f230, %v1_f238
  %v2_f23c = add i32 %v2_f230, %v4_f22c
  store i32 %v2_f23c, i32* %r3.global-to-local, align 4
  %v1_f240 = inttoptr i32 %v2_f23c to i8*
  %v2_f240 = load i8, i8* %v1_f240, align 1
  %v3_f240 = zext i8 %v2_f240 to i32
  store i32 %v3_f240, i32* %r2.global-to-local, align 4
  %v2_f244 = icmp eq i8 %v2_f240, 0
  store i1 %v2_f244, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v3_f24c = mul nuw nsw i32 %v3_f240, 256
  store i32 %v3_f24c, i32* %r1.global-to-local, align 4
  br i1 %v2_f244, label %dec_label_pc_f254, label %dec_label_pc_f224

dec_label_pc_f254:                                ; preds = %dec_label_pc_f214.backedge, %dec_label_pc_f22c, %dec_label_pc_f208
  %v1_f258 = phi i32 [ 1, %dec_label_pc_f208 ], [ %v1_f298, %dec_label_pc_f22c ], [ %v1_f29864, %dec_label_pc_f214.backedge ]
  %v0_f254 = phi i32 [ 0, %dec_label_pc_f208 ], [ 1, %dec_label_pc_f22c ], [ %v0_f290, %dec_label_pc_f214.backedge ]
  %v7_f254 = icmp eq i32 %v0_f254, 1
  store i1 %v7_f254, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f254, label %bb129, label %bb130

bb129:                                            ; preds = %dec_label_pc_f254
  %v2_f258 = add i32 %v1_f258, 1
  store i32 %v2_f258, i32* %r0.global-to-local, align 4
  br label %bb130

bb130:                                            ; preds = %dec_label_pc_f254, %bb129
  %v1_f25c = phi i32 [ %v1_f258, %dec_label_pc_f254 ], [ %v2_f258, %bb129 ]
  %v2_f25c = add i32 %v1_f25c, %v1_f200
  br label %dec_label_pc_f184.backedge

dec_label_pc_f184.backedge:                       ; preds = %bb130, %dec_label_pc_f348
  %v0_f184.pre = phi i32 [ %v3_f190153, %bb130 ], [ %v0_f184.pre.pre, %dec_label_pc_f348 ]
  %storemerge = phi i32 [ %v2_f25c, %bb130 ], [ %v2_f35c, %dec_label_pc_f348 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v1_f184 = add i32 %v0_f184.pre, -1
  %v3_f188 = mul i32 %v1_f184, 65536
  store i32 %v3_f188, i32* %r3.global-to-local, align 4
  %v7_f18c = icmp eq i32 %v3_f188, -65536
  store i1 %v7_f18c, i1* %cpsr_z.global-to-local, align 1
  %v3_f190 = urem i32 %v1_f184, 65536
  store i32 %v3_f190, i32* @r6, align 4
  br i1 %v7_f18c, label %dec_label_pc_f0f8, label %dec_label_pc_f198

dec_label_pc_f264:                                ; preds = %dec_label_pc_f0f8
  %v1_f264 = add i32 %v2_ee30, 4
  %v2_f264 = inttoptr i32 %v1_f264 to i32*
  %v3_f264 = load i32, i32* %v2_f264, align 4
  store i32 %v3_f264, i32* %r0.global-to-local, align 4
  %v2_f268 = icmp eq i32 %v3_f264, 0
  store i1 %v2_f268, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_f270.126 to i32), i32* @lr, align 4
  %v1_f26c = xor i1 %v2_f268, true
  call void @__pseudo_cond_branch(i1 %v1_f26c, i32 ptrtoint (i32* @global_var_12a50.25 to i32))
  store i32 %v2_ee30, i32* @r0, align 4
  %v0_f274 = call i32 @function_12a50()
  store i32 %v0_f274, i32* %r0.global-to-local, align 4
  %v0_f278 = load i32, i32* @r4, align 4
  %v5_f278 = inttoptr i32 %v0_f278 to i8*
  br label %dec_label_pc_f110

dec_label_pc_f280:                                ; preds = %dec_label_pc_f1b4
  %v2_f280 = icmp eq i32 %v0_f280, 0
  store i1 %v2_f280, i1* %cpsr_z.global-to-local, align 1
  %v1_f284 = add i32 %v0_f284, 1
  store i32 %v1_f284, i32* %r3.global-to-local, align 4
  br i1 %v2_f280, label %bb131, label %dec_label_pc_f1a4.backedge

dec_label_pc_f1a4.backedge:                       ; preds = %dec_label_pc_f280, %bb131
  %v1_f28849 = phi i32 [ %v1_f288, %dec_label_pc_f280 ], [ %v2_f288, %bb131 ]
  %v1_f1a4 = inttoptr i32 %v1_f284 to i8*
  %v2_f1a4 = load i8, i8* %v1_f1a4, align 1
  %v3_f1a4 = zext i8 %v2_f1a4 to i32
  store i32 %v3_f1a4, i32* %r2.global-to-local, align 4
  %v2_f1a8 = icmp eq i8 %v2_f1a4, 0
  store i1 %v2_f1a8, i1* %cpsr_z.global-to-local, align 1
  %v3_f1ac = mul nuw nsw i32 %v3_f1a4, 256
  store i32 %v3_f1ac, i32* %r1.global-to-local, align 4
  br i1 %v2_f1a8, label %dec_label_pc_f1e4, label %dec_label_pc_f1b4.preheader

bb131:                                            ; preds = %dec_label_pc_f280
  %v2_f288 = add i32 %v1_f288, 1
  store i32 %v2_f288, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f1a4.backedge

dec_label_pc_f290:                                ; preds = %dec_label_pc_f224
  %v2_f290 = icmp eq i32 %v0_f290, 0
  store i1 %v2_f290, i1* %cpsr_z.global-to-local, align 1
  %v1_f294 = add i32 %v0_f294, 1
  store i32 %v1_f294, i32* %r3.global-to-local, align 4
  br i1 %v2_f290, label %bb132, label %dec_label_pc_f214.backedge

dec_label_pc_f214.backedge:                       ; preds = %dec_label_pc_f290, %bb132
  %v1_f29864 = phi i32 [ %v1_f298, %dec_label_pc_f290 ], [ %v2_f298, %bb132 ]
  %v1_f214 = inttoptr i32 %v1_f294 to i8*
  %v2_f214 = load i8, i8* %v1_f214, align 1
  %v3_f214 = zext i8 %v2_f214 to i32
  store i32 %v3_f214, i32* %r2.global-to-local, align 4
  %v2_f218 = icmp eq i8 %v2_f214, 0
  store i1 %v2_f218, i1* %cpsr_z.global-to-local, align 1
  %v3_f21c = mul nuw nsw i32 %v3_f214, 256
  store i32 %v3_f21c, i32* %r1.global-to-local, align 4
  br i1 %v2_f218, label %dec_label_pc_f254, label %dec_label_pc_f224.preheader

bb132:                                            ; preds = %dec_label_pc_f290
  %v2_f298 = add i32 %v1_f298, 1
  store i32 %v2_f298, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f214.backedge

dec_label_pc_f2a0:                                ; preds = %bb128
  %v1_f2a0 = add i32 %v2_f1ec, 2
  %v2_f2a0 = inttoptr i32 %v1_f2a0 to i8*
  %v3_f2a0 = load i8, i8* %v2_f2a0, align 1
  %v4_f2a0 = zext i8 %v3_f2a0 to i32
  store i32 %v4_f2a0, i32* %r3.global-to-local, align 4
  %v1_f2a4 = add i32 %v2_f1ec, 3
  %v2_f2a4 = inttoptr i32 %v1_f2a4 to i8*
  %v3_f2a4 = load i8, i8* %v2_f2a4, align 1
  %v4_f2a4 = zext i8 %v3_f2a4 to i32
  store i32 %v4_f2a4, i32* %r2.global-to-local, align 4
  %v4_f2a8 = mul nuw nsw i32 %v4_f2a4, 256
  %v5_f2a8 = or i32 %v4_f2a8, %v4_f2a0
  store i32 %v5_f2a8, i32* %r3.global-to-local, align 4
  %v7_f2ac = icmp eq i32 %v5_f2a8, 256
  store i1 %v7_f2ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2ac, label %dec_label_pc_f2b4, label %dec_label_pc_f208

dec_label_pc_f2b4:                                ; preds = %dec_label_pc_f2a0
  %v1_f2b4 = add i32 %v2_f1ec, 8
  %v2_f2b4 = inttoptr i32 %v1_f2b4 to i8*
  %v3_f2b4 = load i8, i8* %v2_f2b4, align 1
  %v4_f2b4 = zext i8 %v3_f2b4 to i32
  store i32 %v4_f2b4, i32* %r1.global-to-local, align 4
  %v1_f2b8 = add i32 %v2_f1ec, 9
  %v2_f2b8 = inttoptr i32 %v1_f2b8 to i8*
  %v3_f2b8 = load i8, i8* %v2_f2b8, align 1
  %v4_f2b8 = zext i8 %v3_f2b8 to i32
  store i32 %v4_f2b8, i32* %r0.global-to-local, align 4
  %v4_f2bc = mul nuw nsw i32 %v4_f2b8, 256
  %v5_f2bc = or i32 %v4_f2bc, %v4_f2b4
  %v3_f2c0 = mul i32 %v5_f2bc, 65536
  store i32 %v3_f2c0, i32* %r2.global-to-local, align 4
  %v3_f2c4 = mul nuw nsw i32 %v4_f2b4, 256
  %v5_f2cc = or i32 %v4_f2b8, %v3_f2c4
  store i32 %v5_f2cc, i32* %r3.global-to-local, align 4
  %v7_f2d0 = icmp eq i32 %v5_f2cc, 4
  store i1 %v7_f2d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2d0, label %dec_label_pc_f2d8, label %dec_label_pc_f348

dec_label_pc_f2d8:                                ; preds = %dec_label_pc_f2b4
  %v2_f2d8 = inttoptr i32 %v1_f200 to i8*
  %v3_f2d8 = load i8, i8* %v2_f2d8, align 1
  %v4_f2d8 = zext i8 %v3_f2d8 to i32
  store i32 %v4_f2d8, i32* %r3.global-to-local, align 4
  store i32 %v2_eeb0, i32* %r2.global-to-local, align 4
  %v1_f2e4 = add i32 %v2_f1ec, 11
  %v2_f2e4 = inttoptr i32 %v1_f2e4 to i8*
  %v3_f2e4 = load i8, i8* %v2_f2e4, align 1
  %v4_f2e4 = zext i8 %v3_f2e4 to i32
  store i32 %v4_f2e4, i32* %r2.global-to-local, align 4
  store i32 %v2_eeb0, i32* %r3.global-to-local, align 4
  %v1_f2f0 = add i32 %v2_f1ec, 12
  %v2_f2f0 = inttoptr i32 %v1_f2f0 to i8*
  %v3_f2f0 = load i8, i8* %v2_f2f0, align 1
  %v4_f2f0 = zext i8 %v3_f2f0 to i32
  store i32 %v4_f2f0, i32* %r3.global-to-local, align 4
  store i32 %v2_eeb0, i32* %ip.global-to-local, align 4
  %v1_f2fc = add i32 %v2_f1ec, 13
  %v2_f2fc = inttoptr i32 %v1_f2fc to i8*
  %v3_f2fc = load i8, i8* %v2_f2fc, align 1
  %v4_f2fc = zext i8 %v3_f2fc to i32
  store i32 %v4_f2fc, i32* %r2.global-to-local, align 4
  store i32 %v2_ee30, i32* @lr, align 4
  %v2_f308 = load i8, i8* %v3_ee30, align 1
  %v3_f308 = zext i8 %v2_f308 to i32
  %v3_f30c = mul nuw nsw i32 %v3_f308, 4
  %v1_f310 = add nuw nsw i32 %v3_f30c, 4
  store i32 %v1_f310, i32* %r1.global-to-local, align 4
  %v3_f314 = load i32, i32* %v2_f314, align 4
  store i32 %v3_f314, i32* %r0.global-to-local, align 4
  %v3_f318 = sext i8 %v3_f2fc to i32
  %v5_f318 = sext i8 %v3_f2f0 to i32
  %v10_f318 = call i32 @function_12b40(i32 %v3_f314, i32 %v1_f310, i32 %v3_f318, i32 %v5_f318)
  store i32 %v10_f318, i32* %r0.global-to-local, align 4
  store i32 %v2_ee30, i32* %r1.global-to-local, align 4
  store i32 %v2_eeb0, i32* %ip.global-to-local, align 4
  %v2_f324 = load i8, i8* %v3_ee30, align 1
  %v3_f324 = zext i8 %v2_f324 to i32
  store i32 %v3_f324, i32* %r2.global-to-local, align 4
  %v4_f328 = sext i8 %v3_f2d8 to i32
  store i32 %v4_f328, i32* %r3.global-to-local, align 4
  store i32 %v2_ee30, i32* @lr, align 4
  %v1_f330 = add nuw nsw i32 %v3_f324, 1
  store i32 %v1_f330, i32* %r1.global-to-local, align 4
  %v5_f334 = mul nuw nsw i32 %v3_f324, 4
  %v6_f334 = add i32 %v5_f334, %v10_f318
  %v7_f334 = inttoptr i32 %v6_f334 to i32*
  store i32 %v4_f328, i32* %v7_f334, align 4
  %v1_f338 = load i32, i32* @lr, align 4
  %v2_f338 = add i32 %v1_f338, 4
  %v3_f338 = inttoptr i32 %v2_f338 to i32*
  store i32 %v10_f318, i32* %v3_f338, align 4
  %v0_f33c = load i32, i32* %r1.global-to-local, align 4
  %v1_f33c = trunc i32 %v0_f33c to i8
  %v2_f33c = load i32, i32* @lr, align 4
  %v3_f33c = inttoptr i32 %v2_f33c to i8*
  store i8 %v1_f33c, i8* %v3_f33c, align 1
  %v0_f340 = load i32, i32* @r4, align 4
  %v1_f340 = add i32 %v0_f340, 9
  %v2_f340 = inttoptr i32 %v1_f340 to i8*
  %v3_f340 = load i8, i8* %v2_f340, align 1
  %v4_f340 = zext i8 %v3_f340 to i32
  store i32 %v4_f340, i32* %r0.global-to-local, align 4
  %v1_f344 = add i32 %v0_f340, 8
  %v2_f344 = inttoptr i32 %v1_f344 to i8*
  %v3_f344 = load i8, i8* %v2_f344, align 1
  %v4_f344 = zext i8 %v3_f344 to i32
  store i32 %v4_f344, i32* %r1.global-to-local, align 4
  %v0_f35c.pre = load i32, i32* @r5, align 4
  %v0_f184.pre.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f348

dec_label_pc_f348:                                ; preds = %dec_label_pc_f2b4, %dec_label_pc_f2d8
  %v0_f184.pre.pre = phi i32 [ %v3_f190153, %dec_label_pc_f2b4 ], [ %v0_f184.pre.pre.pre, %dec_label_pc_f2d8 ]
  %v0_f35c = phi i32 [ %v1_f200, %dec_label_pc_f2b4 ], [ %v0_f35c.pre, %dec_label_pc_f2d8 ]
  %v1_f348 = phi i32 [ %v4_f2b8, %dec_label_pc_f2b4 ], [ %v4_f340, %dec_label_pc_f2d8 ]
  %v0_f348 = phi i32 [ %v4_f2b4, %dec_label_pc_f2b4 ], [ %v4_f344, %dec_label_pc_f2d8 ]
  %v4_f348 = mul nuw nsw i32 %v1_f348, 256
  %v5_f348 = or i32 %v4_f348, %v0_f348
  %v3_f34c = mul i32 %v5_f348, 65536
  store i32 %v3_f34c, i32* %r2.global-to-local, align 4
  %tmp133 = mul nuw nsw i32 %v0_f348, 256
  %v5_f358 = or i32 %tmp133, %v1_f348
  store i32 %v5_f358, i32* %r3.global-to-local, align 4
  %v2_f35c = add i32 %v5_f358, %v0_f35c
  br label %dec_label_pc_f184.backedge

; uselistorder directives
  uselistorder i32 %v1_f348, { 1, 0 }
  uselistorder i32 %v3_f324, { 1, 0, 2 }
  uselistorder i32 %v10_f318, { 1, 0, 2 }
  uselistorder i32 %v4_f2b8, { 2, 1, 0, 3 }
  uselistorder i32 %v4_f2b4, { 2, 0, 1, 3 }
  uselistorder i32 %v2_f298, { 1, 0 }
  uselistorder i32 %v3_f214, { 0, 2, 1 }
  uselistorder i32 %v1_f29864, { 1, 0 }
  uselistorder i32 %v1_f294, { 1, 2, 0 }
  uselistorder i32 %v2_f288, { 1, 0 }
  uselistorder i32 %v3_f1a4, { 0, 2, 1 }
  uselistorder i32 %v1_f28849, { 1, 0 }
  uselistorder i32 %v1_f284, { 1, 2, 0 }
  uselistorder i1 %v7_f18c, { 1, 0 }
  uselistorder i32 %v1_f184, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v3_f240, { 0, 2, 1 }
  uselistorder i32 %v2_f23c, { 1, 2, 0 }
  uselistorder i32 %v0_f290, { 2, 0, 1 }
  uselistorder i32 %v1_f298, { 1, 2, 0 }
  uselistorder i32 %v3_f21c27, { 1, 0 }
  uselistorder i32 %v3_f21425, { 1, 0, 2 }
  uselistorder i32 %v1_f200, { 2, 3, 1, 0, 5, 4, 6 }
  uselistorder i32 %v2_f1ec, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_f1d0, { 0, 2, 1 }
  uselistorder i32 %v2_f1cc, { 1, 2, 0 }
  uselistorder i32 %v0_f280, { 2, 0, 1 }
  uselistorder i32 %v1_f288, { 1, 2, 0 }
  uselistorder i32 %v3_f1ac21, { 1, 0 }
  uselistorder i32 %v3_f1a419, { 1, 0, 2 }
  uselistorder i32 %v0_f1ec152, { 3, 0, 1, 2 }
  uselistorder i32 %v3_f190151, { 1, 0 }
  uselistorder i1 %v7_f18c150, { 1, 0 }
  uselistorder i32 %v1_f184143, { 1, 0 }
  uselistorder i32 %v4_f16c, { 1, 0, 2 }
  uselistorder i32 %v0_f0f0, { 1, 0 }
  uselistorder i32 %v0_f0c8, { 1, 0 }
  uselistorder i1 %v7_f07c, { 1, 0 }
  uselistorder i32 %v5_f078, { 1, 0, 2 }
  uselistorder i32 %v1_f03c, { 1, 0 }
  uselistorder i32 %v3_f028, { 1, 0 }
  uselistorder i32 %v0_f020, { 1, 0 }
  uselistorder i32 %v1_f014, { 1, 2, 0 }
  uselistorder i1 %v7_efe0, { 1, 0 }
  uselistorder i32 %v5_efdc, { 1, 0, 2 }
  uselistorder i1 %v7_efc4, { 1, 0 }
  uselistorder i32 %v4_efc0, { 1, 0, 2 }
  uselistorder i1 %v7_efa8, { 1, 0 }
  uselistorder i32 %v3_efa4, { 2, 1, 0, 3 }
  uselistorder i1 %v7_ef8c, { 2, 1, 0 }
  uselistorder i32 %v1_ef90, { 1, 0 }
  uselistorder i32 %v1_f130, { 1, 2, 0 }
  uselistorder i32 %v2_f02c, { 1, 0, 2 }
  uselistorder i32 %v2_ef88, { 1, 0, 2 }
  uselistorder i32 %v2_ef50, { 4, 3, 2, 5, 7, 9, 1, 0, 6, 8, 10 }
  uselistorder i32 %v4_ef04, { 3, 0, 2, 1 }
  uselistorder i32 %v1_eed0, { 1, 0, 2 }
  uselistorder i32 %v0_ee8c, { 0, 1, 3, 2 }
  uselistorder i32 %v1_ee88, { 1, 0, 2 }
  uselistorder i32 %v1_ee84, { 1, 0 }
  uselistorder i32 %v2_ee7811, { 1, 0 }
  uselistorder i32 %v2_ee78, { 1, 0 }
  uselistorder i1 %v8_ee68, { 1, 0 }
  uselistorder i32 %v2_ee50, { 0, 2, 1, 3 }
  uselistorder i32 %v0_ee38, { 1, 0 }
  uselistorder i32 %v2_ee30, { 2, 3, 4, 5, 0, 1, 6, 7 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-2240, { 0, 2, 1 }
  uselistorder i32* %stack_var_-64, { 0, 1, 3, 2 }
  uselistorder i8* %stack_var_-4288, { 2, 0, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 10, 13, 11, 12, 14, 16, 33, 17, 18, 19, 20, 21, 25, 22, 23, 24, 26, 34, 35, 27, 28, 29, 30, 31, 32 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 10, 13, 9, 1, 11, 12, 0, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 10, 13, 8, 9, 1, 11, 12, 0, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 25, 29, 27 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 10, 6, 47, 7, 8, 9, 12, 11, 15, 14, 13, 17, 16, 20, 18, 19, 21, 22, 46, 23, 25, 24, 26, 28, 27, 29, 36, 31, 30, 32, 33, 34, 35, 38, 37, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 3, 4, 11, 5, 16, 6, 7, 17, 8, 9, 10, 1, 12, 13, 14, 15, 0, 36, 18, 19, 20, 21, 22, 23, 24, 25, 26, 2, 27, 28, 29, 30, 35, 33, 31, 32, 34, 37 }
  uselistorder i32 (i32)* @function_13228, { 7, 6, 11, 10, 9, 8, 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_f348, { 1, 0 }
  uselistorder label %dec_label_pc_f214.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_f1a4.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_f184.backedge, { 1, 0 }
  uselistorder label %bb130, { 1, 0 }
  uselistorder label %dec_label_pc_f224, { 1, 0 }
  uselistorder label %dec_label_pc_f224.preheader, { 1, 0 }
  uselistorder label %bb128, { 1, 0 }
  uselistorder label %dec_label_pc_f1b4, { 1, 0 }
  uselistorder label %dec_label_pc_f1b4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f198, { 1, 0 }
  uselistorder label %dec_label_pc_f110, { 1, 0 }
  uselistorder label %dec_label_pc_f0f8, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_f0d8, { 2, 1, 4, 0, 3 }
  uselistorder label %dec_label_pc_f010.dec_label_pc_f010_crit_edge, { 1, 0 }
  uselistorder label %bb126, { 1, 0 }
  uselistorder label %.thread12, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ee60, { 1, 0 }
}

define i32 @function_f364(i32 %arg1) local_unnamed_addr {
dec_label_pc_f364:
  %v2_f368 = load i32, i32* @global_var_1d258.128, align 4
  %v2_f370 = call i32 @function_11efc(i32 %v2_f368, i32 9)
  %v0_f374 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f374, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_f364
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_f364, %bb
  ret i32 %v2_f370

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_f378() local_unnamed_addr {
dec_label_pc_f378:
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f378 = load i32, i32* @r4, align 4
  store i32 %v3_f378, i32* %stack_var_-16, align 4
  %v0_f37c = load i32, i32* @r0, align 4
  store i32 %v0_f37c, i32* %r5.global-to-local, align 4
  %v1_f380 = add i32 %v0_f37c, 4
  %v2_f380 = inttoptr i32 %v1_f380 to i32*
  %v3_f380 = load i32, i32* %v2_f380, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 62372, i32* @lr, align 4
  %v1_f3a0 = icmp ne i32 %v3_f380, -1
  call void @__pseudo_cond_branch(i1 %v1_f3a0, i32 ptrtoint (i32* @global_var_11dfc.101 to i32))
  %v3_f3b0 = call i32 @function_1270c(i32 2, i32 1, i32 0)
  store i32 %v3_f3b0, i32* %r3.global-to-local, align 4
  %v7_f3b8 = icmp eq i32 %v3_f3b0, -1
  store i32 356, i32* @r1, align 4
  %v0_f3c0 = load i32, i32* %r5.global-to-local, align 4
  %v1_f3c0 = add i32 %v0_f3c0, 28
  store i32 %v1_f3c0, i32* @r0, align 4
  %v2_f3c4 = add i32 %v0_f3c0, 4
  %v3_f3c4 = inttoptr i32 %v2_f3c4 to i32*
  store i32 %v3_f3b0, i32* %v3_f3c4, align 4
  br i1 %v7_f3b8, label %dec_label_pc_f378.dec_label_pc_f440_crit_edge, label %dec_label_pc_f3cc

dec_label_pc_f378.dec_label_pc_f440_crit_edge:    ; preds = %dec_label_pc_f378
  %v14_f444.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_f440

dec_label_pc_f3cc:                                ; preds = %dec_label_pc_f378
  %v0_f3cc = load i32, i32* %r6.global-to-local, align 4
  %v1_f3cc = load i32, i32* %r5.global-to-local, align 4
  %v2_f3cc = add i32 %v1_f3cc, 24
  %v3_f3cc = inttoptr i32 %v2_f3cc to i32*
  store i32 %v0_f3cc, i32* %v3_f3cc, align 4
  %v0_f3d0 = call i32 @function_11598()
  %v0_f3d4 = load i32, i32* %r5.global-to-local, align 4
  %v1_f3d4 = add i32 %v0_f3d4, 4
  %v2_f3d4 = inttoptr i32 %v1_f3d4 to i32*
  %v3_f3d4 = load i32, i32* %v2_f3d4, align 4
  store i32 %v3_f3d4, i32* @r4, align 4
  %v0_f3dc = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_f3dc, i32* @r2, align 4
  %v2_f3e4 = call i32 @function_11d38(i32 %v3_f3d4, i32 3)
  %v1_f3ec = or i32 %v2_f3e4, 2048
  store i32 %v1_f3ec, i32* @r2, align 4
  %v0_f3f0 = load i32, i32* @r4, align 4
  %v2_f3f4 = call i32 @function_11d38(i32 %v0_f3f0, i32 4)
  store i32 ptrtoint (i32* @global_var_1d1ec.130 to i32), i32* %r3.global-to-local, align 4
  %v0_f3fc = load i32, i32* %r5.global-to-local, align 4
  %v1_f3fc = add i32 %v0_f3fc, 20
  %v2_f3fc = inttoptr i32 %v1_f3fc to i32*
  %v3_f3fc = load i32, i32* %v2_f3fc, align 4
  store i32 %v3_f3fc, i32* @r4, align 4
  %v2_f400 = load i32, i32* @global_var_1d1ec.130, align 4
  %v1_f404 = add i32 %v0_f3fc, 16
  %v2_f404 = inttoptr i32 %v1_f404 to i32*
  %v3_f404 = load i32, i32* %v2_f404, align 4
  store i32 %v3_f404, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_f40c = add i32 %v0_f3fc, 8
  %v3_f40c = inttoptr i32 %v2_f40c to i32*
  store i32 %v2_f400, i32* %v3_f40c, align 4
  %v0_f410 = load i32, i32* %r3.global-to-local, align 4
  %v1_f410 = load i32, i32* %r5.global-to-local, align 4
  %v2_f410 = add i32 %v1_f410, 12
  %v3_f410 = inttoptr i32 %v2_f410 to i32*
  store i32 %v0_f410, i32* %v3_f410, align 4
  %v0_f418 = load i32, i32* %r5.global-to-local, align 4
  %v1_f418 = add i32 %v0_f418, 4
  %v2_f418 = inttoptr i32 %v1_f418 to i32*
  %v3_f418 = load i32, i32* %v2_f418, align 4
  %v0_f41c = load i32, i32* %r3.global-to-local, align 4
  %v2_f41c = mul i32 %v0_f41c, 2
  store i32 %v2_f41c, i32* %r3.global-to-local, align 4
  store i32 %v2_f41c, i32* %stack_var_-32, align 4
  %v3_f43c = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_f43c = call i32 @function_12568(i32 %v3_f418, %sockaddr* %v3_f43c, i32 16)
  br label %dec_label_pc_f440

dec_label_pc_f440:                                ; preds = %dec_label_pc_f378.dec_label_pc_f440_crit_edge, %dec_label_pc_f3cc
  %v14_f444 = phi i32 [ %v14_f444.pre, %dec_label_pc_f378.dec_label_pc_f440_crit_edge ], [ %v4_f43c, %dec_label_pc_f3cc ]
  %v2_f444 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f444, i32* @r4, align 4
  ret i32 %v14_f444

; uselistorder directives
  uselistorder i32 %v2_f41c, { 1, 0 }
  uselistorder i32 %v3_f3b0, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32 ()* @function_11598, { 8, 4, 7, 6, 5, 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_f440, { 1, 0 }
}

define i32 @function_f44c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_f44c:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_f44c = load i32, i32* @r4, align 4
  %v6_f44c = load i32, i32* @r5, align 4
  %v9_f44c = load i32, i32* @r6, align 4
  %v12_f44c = load i32, i32* @r7, align 4
  %v15_f44c = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1d1b8.132 to i32), i32* @r8, align 4
  %v2_f454 = load i32, i32* @global_var_1d1b8.132, align 4
  store i32 ptrtoint (i32* @global_var_1d1e4.134 to i32), i32* %sb.global-to-local, align 4
  %v3_f460 = mul i32 %v2_f454, 16
  store i32 %v3_f460, i32* %r3.global-to-local, align 4
  %v3_f468 = urem i32 %arg3, 65536
  store i32 %v3_f468, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_f474 = load i32, i32* @global_var_1d1e4.134, align 4
  %v1_f478 = add i32 %v3_f460, 16
  store i32 %v1_f478, i32* %r1.global-to-local, align 4
  store i32 %v3_f468, i32* %stack_var_-44, align 4
  %v8_f480 = call i32 @function_12b40(i32 %v2_f474, i32 %v1_f478, i32 %v3_f468, i32 %v3_f460)
  store i32 %v8_f480, i32* %sl.global-to-local, align 4
  %v0_f488 = load i32, i32* @r5, align 4
  %v1_f48c = load i32, i32* %sb.global-to-local, align 4
  %v2_f48c = inttoptr i32 %v1_f48c to i32*
  store i32 %v8_f480, i32* %v2_f48c, align 4
  %v2_f490 = load i32, i32* @global_var_1d1b8.132, align 4
  store i32 %v2_f490, i32* %fp.global-to-local, align 4
  %v1_f494 = inttoptr i32 %v0_f488 to i8*
  %v2_f494 = call i32 @function_114f8(i8* %v1_f494)
  %sext = mul i32 %v2_f494, 16777216
  %v1_f498 = sdiv i32 %sext, 16777216
  %v2_f498 = add nsw i32 %v1_f498, 1
  store i32 %v2_f498, i32* @r4, align 4
  store i32 %v1_f498, i32* @r7, align 4
  %v1_f4a4 = call i32 @function_128a4(i32 %v2_f498)
  %v0_f4a8 = load i32, i32* @r5, align 4
  store i32 %v0_f4a8, i32* %r1.global-to-local, align 4
  %v0_f4ac = load i32, i32* @r4, align 4
  store i32 %v0_f4ac, i32* %r2.global-to-local, align 4
  store i32 %v1_f4a4, i32* @r6, align 4
  %v3_f4b4 = call i32 @function_11574(i32 %v1_f4a4, i32 %v0_f4a8, i32 %v0_f4ac)
  %v0_f4b8 = load i32, i32* @r7, align 4
  %tmp21 = icmp slt i32 %v0_f4b8, 1
  %extract.t6 = trunc i32 %v0_f4b8 to i8
  br i1 %tmp21, label %dec_label_pc_f4dc, label %dec_label_pc_f4c0

dec_label_pc_f4c0:                                ; preds = %dec_label_pc_f44c
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f4c4

dec_label_pc_f4c4:                                ; preds = %dec_label_pc_f4c4, %dec_label_pc_f4c0
  %v2_f4cc = phi i32 [ %v1_f4d0, %dec_label_pc_f4c4 ], [ 0, %dec_label_pc_f4c0 ]
  %v1_f4c4 = load i32, i32* @r6, align 4
  %v2_f4c4 = add i32 %v1_f4c4, %v2_f4cc
  %v3_f4c4 = inttoptr i32 %v2_f4c4 to i8*
  %v4_f4c4 = load i8, i8* %v3_f4c4, align 1
  %v6_f4c4 = zext i8 %v4_f4c4 to i32
  %v1_f4c8 = xor i32 %v6_f4c4, 84
  store i32 %v1_f4c8, i32* %r3.global-to-local, align 4
  %v1_f4cc = trunc i32 %v1_f4c8 to i8
  store i8 %v1_f4cc, i8* %v3_f4c4, align 1
  %v0_f4d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_f4d0 = add i32 %v0_f4d0, 1
  store i32 %v1_f4d0, i32* %r2.global-to-local, align 4
  %v0_f4d4 = load i32, i32* @r7, align 4
  %v9_f4d4 = icmp eq i32 %v0_f4d4, %v1_f4d0
  br i1 %v9_f4d4, label %dec_label_pc_f4dc.loopexit, label %dec_label_pc_f4c4

dec_label_pc_f4dc.loopexit:                       ; preds = %dec_label_pc_f4c4
  %extract.t = trunc i32 %v1_f4d0 to i8
  br label %dec_label_pc_f4dc

dec_label_pc_f4dc:                                ; preds = %dec_label_pc_f4dc.loopexit, %dec_label_pc_f44c
  %v0_f4ec.off0 = phi i8 [ %extract.t, %dec_label_pc_f4dc.loopexit ], [ %extract.t6, %dec_label_pc_f44c ]
  %v2_f4dc = load i32, i32* @global_var_1d1b8.132, align 4
  %v2_f4e0 = load i32, i32* @global_var_1d1e4.134, align 4
  store i32 %v2_f4e0, i32* %r2.global-to-local, align 4
  %v3_f4e4 = mul i32 %v2_f4dc, 16
  %v2_f4e8 = add i32 %v2_f4e0, %v3_f4e4
  store i32 %v2_f4e8, i32* %r3.global-to-local, align 4
  %v3_f4ec = add i32 %v2_f4e8, 12
  %v4_f4ec = inttoptr i32 %v3_f4ec to i8*
  store i8 %v0_f4ec.off0, i8* %v4_f4ec, align 1
  %v0_f4f0 = load i32, i32* @r6, align 4
  %v1_f4f0 = load i32, i32* %sl.global-to-local, align 4
  %v2_f4f0 = load i32, i32* %fp.global-to-local, align 4
  %v5_f4f0 = mul i32 %v2_f4f0, 16
  %v6_f4f0 = add i32 %v5_f4f0, %v1_f4f0
  %v7_f4f0 = inttoptr i32 %v6_f4f0 to i32*
  store i32 %v0_f4f0, i32* %v7_f4f0, align 4
  %v2_f4f8 = load i32, i32* @global_var_1d1b8.132, align 4
  store i32 %v2_f4f8, i32* @r7, align 4
  %v2_f4fc = load i32, i32* @global_var_1d1e4.134, align 4
  store i32 %v2_f4fc, i32* %sl.global-to-local, align 4
  %v1_f500 = inttoptr i32 %arg2 to i8*
  %v2_f500 = call i32 @function_114f8(i8* %v1_f500)
  %sext1 = mul i32 %v2_f500, 16777216
  %v1_f504 = sdiv i32 %sext1, 16777216
  %v2_f504 = add nsw i32 %v1_f504, 1
  store i32 %v2_f504, i32* @r4, align 4
  store i32 %v1_f504, i32* @r5, align 4
  %v1_f510 = call i32 @function_128a4(i32 %v2_f504)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_f518 = load i32, i32* @r4, align 4
  store i32 %v0_f518, i32* %r2.global-to-local, align 4
  store i32 %v1_f510, i32* %r6.global-to-local, align 4
  %v3_f520 = call i32 @function_11574(i32 %v1_f510, i32 %arg2, i32 %v0_f518)
  %v0_f524 = load i32, i32* @r5, align 4
  %tmp22 = icmp slt i32 %v0_f524, 1
  %extract.t8 = trunc i32 %v0_f524 to i8
  br i1 %tmp22, label %dec_label_pc_f548, label %dec_label_pc_f52c

dec_label_pc_f52c:                                ; preds = %dec_label_pc_f4dc
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f530

dec_label_pc_f530:                                ; preds = %dec_label_pc_f530, %dec_label_pc_f52c
  %v2_f538 = phi i32 [ %v1_f53c, %dec_label_pc_f530 ], [ 0, %dec_label_pc_f52c ]
  %v1_f530 = load i32, i32* %r6.global-to-local, align 4
  %v2_f530 = add i32 %v1_f530, %v2_f538
  %v3_f530 = inttoptr i32 %v2_f530 to i8*
  %v4_f530 = load i8, i8* %v3_f530, align 1
  %v6_f530 = zext i8 %v4_f530 to i32
  %v1_f534 = xor i32 %v6_f530, 84
  store i32 %v1_f534, i32* %r3.global-to-local, align 4
  %v1_f538 = trunc i32 %v1_f534 to i8
  store i8 %v1_f538, i8* %v3_f530, align 1
  %v0_f53c = load i32, i32* %r2.global-to-local, align 4
  %v1_f53c = add i32 %v0_f53c, 1
  store i32 %v1_f53c, i32* %r2.global-to-local, align 4
  %v0_f540 = load i32, i32* @r5, align 4
  %v9_f540 = icmp eq i32 %v0_f540, %v1_f53c
  br i1 %v9_f540, label %dec_label_pc_f548.loopexit, label %dec_label_pc_f530

dec_label_pc_f548.loopexit:                       ; preds = %dec_label_pc_f530
  %extract.t7 = trunc i32 %v1_f53c to i8
  br label %dec_label_pc_f548

dec_label_pc_f548:                                ; preds = %dec_label_pc_f548.loopexit, %dec_label_pc_f4dc
  %v0_f558.off0 = phi i8 [ %extract.t7, %dec_label_pc_f548.loopexit ], [ %extract.t8, %dec_label_pc_f4dc ]
  %v2_f548 = load i32, i32* @global_var_1d1b8.132, align 4
  %v2_f54c = load i32, i32* @global_var_1d1e4.134, align 4
  %v3_f550 = mul i32 %v2_f548, 16
  %v2_f554 = or i32 %v3_f550, 13
  %v3_f558 = add i32 %v2_f554, %v2_f54c
  %v4_f558 = inttoptr i32 %v3_f558 to i8*
  store i8 %v0_f558.off0, i8* %v4_f558, align 1
  %v2_f560 = load i32, i32* @global_var_1d1b8.132, align 4
  store i32 %v2_f560, i32* %lr.global-to-local, align 4
  %v4_f564 = load i8, i8* @global_var_1d1e9.137, align 1
  %v5_f564 = zext i8 %v4_f564 to i32
  %v3_f568 = load i8, i8* bitcast (i8** @global_var_1d1e8.136 to i8*), align 4
  %v4_f568 = zext i8 %v3_f568 to i32
  %v2_f56c = load i32, i32* @global_var_1d1e4.134, align 4
  %v4_f570 = mul nuw nsw i32 %v5_f564, 256
  %v5_f570 = or i32 %v4_f568, %v4_f570
  store i32 %v5_f570, i32* %r2.global-to-local, align 4
  %v3_f574 = mul i32 %v2_f560, 16
  %v2_f578 = add i32 %v2_f56c, %v3_f574
  store i32 %v2_f578, i32* %r1.global-to-local, align 4
  %v3_f580 = add i32 %v2_f578, 9
  %v4_f580 = inttoptr i32 %v3_f580 to i8*
  store i8 %v4_f564, i8* %v4_f580, align 1
  %v0_f584 = load i32, i32* %r2.global-to-local, align 4
  %v1_f584 = trunc i32 %v0_f584 to i8
  %v2_f584 = load i32, i32* %r1.global-to-local, align 4
  %v3_f584 = add i32 %v2_f584, 8
  %v4_f584 = inttoptr i32 %v3_f584 to i8*
  store i8 %v1_f584, i8* %v4_f584, align 1
  %v4_f588 = load i8, i8* @global_var_1d1e9.137, align 1
  %v5_f588 = zext i8 %v4_f588 to i32
  %v3_f58c = load i8, i8* bitcast (i8** @global_var_1d1e8.136 to i8*), align 4
  %v4_f58c = zext i8 %v3_f58c to i32
  %v4_f590 = mul nuw nsw i32 %v5_f588, 256
  %v5_f590 = or i32 %v4_f58c, %v4_f590
  %v2_f594 = load i32, i32* %stack_var_-44, align 4
  %v2_f598 = add i32 %v5_f590, %v2_f594
  store i32 %v2_f598, i32* %r3.global-to-local, align 4
  %v3_f59c9 = udiv i32 %v2_f598, 256
  %v1_f5a0 = trunc i32 %v3_f59c9 to i8
  %v2_f5a0 = load i32, i32* %r1.global-to-local, align 4
  %v3_f5a0 = add i32 %v2_f5a0, 11
  %v4_f5a0 = inttoptr i32 %v3_f5a0 to i8*
  store i8 %v1_f5a0, i8* %v4_f5a0, align 1
  %v0_f5a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_f5a4 = trunc i32 %v0_f5a4 to i8
  %v2_f5a4 = load i32, i32* %r1.global-to-local, align 4
  %v3_f5a4 = add i32 %v2_f5a4, 10
  %v4_f5a4 = inttoptr i32 %v3_f5a4 to i8*
  store i8 %v1_f5a4, i8* %v4_f5a4, align 1
  %v4_f5a8 = load i8, i8* @global_var_1d1e9.137, align 1
  %v5_f5a8 = zext i8 %v4_f5a8 to i32
  %v3_f5ac = load i8, i8* bitcast (i8** @global_var_1d1e8.136 to i8*), align 4
  %v4_f5ac = zext i8 %v3_f5ac to i32
  %v4_f5b0 = mul nuw nsw i32 %v5_f5a8, 256
  %v5_f5b0 = or i32 %v4_f5ac, %v4_f5b0
  %v2_f5b4 = load i32, i32* %stack_var_-44, align 4
  %v2_f5b8 = add i32 %v5_f5b0, %v2_f5b4
  store i32 %v2_f5b8, i32* %r2.global-to-local, align 4
  %v0_f5bc = load i32, i32* @r7, align 4
  %v3_f5bc = mul i32 %v0_f5bc, 16
  %v1_f5c0 = load i32, i32* %sl.global-to-local, align 4
  %v2_f5c0 = add i32 %v1_f5c0, %v3_f5bc
  store i32 %v2_f5c0, i32* %r3.global-to-local, align 4
  %v0_f5c4 = load i32, i32* %lr.global-to-local, align 4
  %v1_f5c4 = add i32 %v0_f5c4, 1
  store i32 %v1_f5c4, i32* @lr, align 4
  %v3_f5c8 = sdiv i32 %v2_f5b8, 256
  store i32 %v3_f5c8, i32* %r1.global-to-local, align 4
  %v0_f5cc = load i32, i32* %r6.global-to-local, align 4
  %v2_f5cc = add i32 %v2_f5c0, 4
  %v3_f5cc = inttoptr i32 %v2_f5cc to i32*
  store i32 %v0_f5cc, i32* %v3_f5cc, align 4
  %v0_f5d0 = load i32, i32* @lr, align 4
  %v1_f5d0 = load i32, i32* @r8, align 4
  %v2_f5d0 = inttoptr i32 %v1_f5d0 to i32*
  store i32 %v0_f5d0, i32* %v2_f5d0, align 4
  %v0_f5d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_f5d4 = trunc i32 %v0_f5d4 to i8
  store i8 %v1_f5d4, i8* @global_var_1d1e9.137, align 1
  %v0_f5d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_f5d8 = trunc i32 %v0_f5d8 to i8
  store i8 %v1_f5d8, i8* bitcast (i8** @global_var_1d1e8.136 to i8*), align 4
  store i32 %v3_f44c, i32* @r4, align 4
  store i32 %v6_f44c, i32* @r5, align 4
  store i32 %v9_f44c, i32* @r6, align 4
  store i32 %v12_f44c, i32* @r7, align 4
  store i32 %v15_f44c, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1d1e8.136 to i32)

; uselistorder directives
  uselistorder i32 %v1_f53c, { 0, 2, 3, 1 }
  uselistorder i32 %v1_f510, { 1, 0 }
  uselistorder i32 %v1_f4d0, { 0, 2, 3, 1 }
  uselistorder i32 %v1_f4a4, { 1, 0 }
  uselistorder i32 %v3_f468, { 1, 2, 0 }
  uselistorder i32 %v3_f460, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 (i8*)* @function_114f8, { 0, 1, 9, 10, 11, 12, 13, 27, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28 }
  uselistorder i32 (i32, i32, i32, i32)* @function_12b40, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_f5f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_f5f0:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp256 = call i32 @__decompiler_undefined_function_0()
  %tmp263 = call i32 @__decompiler_undefined_function_0()
  %tmp264 = call i8* @__decompiler_undefined_function_2()
  %tmp265 = call i32 @__decompiler_undefined_function_0()
  %tmp266 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f5f0 = load i32, i32* @r4, align 4
  store i32 %v3_f5f0, i32* %stack_var_-36, align 4
  %v6_f5f0 = load i32, i32* @r5, align 4
  %v18_f5f0 = load i32, i32* @sb, align 4
  %v21_f5f0 = load i32, i32* @sl, align 4
  %v0_f5f8 = call i32 @function_11e28()
  store i32 %v0_f5f8, i32* %r0.global-to-local, align 4
  %v7_f5fc = icmp eq i32 %v0_f5f8, -1
  %. = zext i1 %v7_f5fc to i32
  %tmp297 = icmp slt i32 %v0_f5f8, 1
  %storemerge253 = select i1 %tmp297, i32 %., i32 1
  store i32 %storemerge253, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1d258.128 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f618 = icmp eq i32 %storemerge253, 0
  store i1 %v2_f618, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_f5f8, i32* @global_var_1d258.128, align 4
  br i1 %v2_f618, label %dec_label_pc_f62c, label %dec_label_pc_f624

dec_label_pc_f624:                                ; preds = %dec_label_pc_f5f0
  store i32 %v3_f5f0, i32* %r4.global-to-local, align 4
  store i32 %v6_f5f0, i32* %r5.global-to-local, align 4
  store i32 %v18_f5f0, i32* @sb, align 4
  store i32 %v21_f5f0, i32* @sl, align 4
  ret i32 %v0_f5f8

dec_label_pc_f62c:                                ; preds = %dec_label_pc_f5f0
  %v0_f62c = call i32 @function_117b0()
  store i32 %v0_f62c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d234.50 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_f62c, i32* @global_var_1d234.50, align 4
  %v1_f638 = call i32 @function_ebe8(i32 %v0_f62c)
  %v0_f63c = load i32, i32* @r4, align 4
  store i32 %v0_f63c, i32* %r0.global-to-local, align 4
  %v1_f640 = inttoptr i32 %v0_f63c to i32*
  %v2_f640 = call i32 @function_120cc(i32* %v1_f640)
  store i32 ptrtoint (i32* @global_var_1d1ec.130 to i32), i32* %r2.global-to-local, align 4
  store i32 388, i32* %r1.global-to-local, align 4
  store i32 %v2_f640, i32* @global_var_1d1ec.130, align 4
  store i32 356, i32* %r0.global-to-local, align 4
  %v2_f654 = call i32 @function_129f8(i32 356, i32 388)
  store i32 ptrtoint (i32* @global_var_1d250.142 to i32), i32* %r3.global-to-local, align 4
  %v0_f65c = load i32, i32* @r4, align 4
  store i32 %v0_f65c, i32* %r1.global-to-local, align 4
  store i32 %v2_f654, i32* @lr, align 4
  store i32 %v2_f654, i32* @global_var_1d250.142, align 4
  store i32 %v0_f65c, i32* %stack_var_-52, align 4
  store i32 %v0_f65c, i32* %r5.global-to-local, align 4
  store i32 355, i32* %r0.global-to-local, align 4
  %v1_f678 = add i32 %v0_f65c, -1
  store i32 %v1_f678, i32* @r4, align 4
  store i32 %v0_f65c, i32* %ip.global-to-local, align 4
  %v1_f680 = add i32 %v2_f654, 4
  store i32 %v1_f680, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f684

dec_label_pc_f684:                                ; preds = %dec_label_pc_f684.dec_label_pc_f684_crit_edge, %dec_label_pc_f62c
  %v0_f6a0 = phi i32 [ %v0_f6a0.pre, %dec_label_pc_f684.dec_label_pc_f684_crit_edge ], [ %v0_f65c, %dec_label_pc_f62c ]
  %v0_f690 = phi i32 [ %v0_f6a8, %dec_label_pc_f684.dec_label_pc_f684_crit_edge ], [ %v0_f65c, %dec_label_pc_f62c ]
  %v1_f69c = phi i32 [ %v1_f69c.pre, %dec_label_pc_f684.dec_label_pc_f684_crit_edge ], [ 355, %dec_label_pc_f62c ]
  %v1_f698 = phi i32 [ %v1_f698.pre, %dec_label_pc_f684.dec_label_pc_f684_crit_edge ], [ %v2_f654, %dec_label_pc_f62c ]
  %v1_f690 = add i32 %v0_f690, 1
  store i32 %v1_f690, i32* %ip.global-to-local, align 4
  %v3_f694 = mul i32 %v0_f690, 388
  %v2_f698 = add i32 %v3_f694, %v1_f698
  store i32 %v2_f698, i32* %r3.global-to-local, align 4
  %v2_f6a0 = add i32 %v2_f698, 12
  %v3_f6a0 = inttoptr i32 %v2_f6a0 to i32*
  store i32 %v0_f6a0, i32* %v3_f6a0, align 4
  %v0_f6a4 = load i32, i32* @r4, align 4
  %v1_f6a4 = load i32, i32* %r2.global-to-local, align 4
  %v2_f6a4 = inttoptr i32 %v1_f6a4 to i32*
  store i32 %v0_f6a4, i32* %v2_f6a4, align 4
  %v3_f6a4 = load i32, i32* %r2.global-to-local, align 4
  %v4_f6a4 = add i32 %v3_f6a4, 388
  store i32 %v4_f6a4, i32* %r2.global-to-local, align 4
  %v0_f6a8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_f6a8, i32* %r1.global-to-local, align 4
  %v7_f6ac = icmp sgt i32 %v1_f690, %v1_f69c
  br i1 %v7_f6ac, label %dec_label_pc_f6b0, label %dec_label_pc_f684.dec_label_pc_f684_crit_edge

dec_label_pc_f684.dec_label_pc_f684_crit_edge:    ; preds = %dec_label_pc_f684
  %v1_f698.pre = load i32, i32* @lr, align 4
  %v1_f69c.pre = load i32, i32* %r0.global-to-local, align 4
  %v0_f6a0.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_f684

dec_label_pc_f6b0:                                ; preds = %dec_label_pc_f684
  %v3_f69c = icmp uge i32 %v1_f690, %v1_f69c
  %v9_f69c = icmp eq i32 %v1_f690, %v1_f69c
  store i1 %v3_f69c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v9_f69c, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_f6a8, i32* %stack_var_-52, align 4
  %v3_f6c0 = call i32 @function_1270c(i32 2, i32 3, i32 6)
  store i32 %v3_f6c0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d254.144 to i32), i32* %ip.global-to-local, align 4
  %v2_f6c8 = icmp eq i32 %v3_f6c0, -1
  store i1 %v2_f6c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f6c8 = icmp eq i32 %v3_f6c0, -1
  store i1 %v7_f6c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f6c0, i32* @r4, align 4
  store i32 %v3_f6c0, i32* @global_var_1d254.144, align 4
  br i1 %v7_f6c8, label %dec_label_pc_feec, label %dec_label_pc_f6d8

dec_label_pc_f6d8:                                ; preds = %dec_label_pc_f6b0
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_f6dc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_f6dc, i32* @r2, align 4
  %v2_f6e0 = call i32 @function_11d38(i32 %v3_f6c0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_f6e8 = or i32 %v2_f6e0, 2048
  store i32 %v1_f6e8, i32* @r2, align 4
  %v0_f6ec = load i32, i32* @r4, align 4
  store i32 %v0_f6ec, i32* %r0.global-to-local, align 4
  %v2_f6f0 = call i32 @function_11d38(i32 %v0_f6ec, i32 4)
  store i32 1, i32* %ip.global-to-local, align 4
  %v2_f6fc = load i32, i32* @global_var_1d254.144, align 4
  store i32 %v2_f6fc, i32* %r0.global-to-local, align 4
  %v0_f700 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_f700, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_f708 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_f708, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v6_f718 = call i32 @function_126dc(i32 %v2_f6fc, i32 %v0_f700, i32 3, i32* nonnull %stack_var_-52, i32 4)
  store i32 %v6_f718, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f71c = icmp eq i32 %v6_f718, 0
  store i1 %v2_f71c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f71c, label %dec_label_pc_f724, label %dec_label_pc_fee0

dec_label_pc_f724:                                ; preds = %dec_label_pc_f6d8, %dec_label_pc_f724
  %v0_f724 = call i32 @function_eb90()
  %v3_f728 = mul i32 %v0_f724, 65536
  store i32 %v3_f728, i32* %r0.global-to-local, align 4
  %v3_f72c = urem i32 %v0_f724, 65536
  store i32 %v3_f72c, i32* %r2.global-to-local, align 4
  %v1_f730 = mul i32 %v0_f724, 256
  %v3_f734 = and i32 %v1_f730, 65280
  %tmp300 = udiv i32 %v0_f724, 256
  %v4_f738 = urem i32 %tmp300, 256
  %v5_f738 = or i32 %v4_f738, %v3_f734
  store i32 %v5_f738, i32* %r3.global-to-local, align 4
  %v2_f73c = icmp ugt i32 %v5_f738, 1023
  store i1 %v2_f73c, i1* %cpsr_c.global-to-local, align 1
  %v7_f73c = icmp eq i32 %v5_f738, 1024
  store i1 %v7_f73c, i1* %cpsr_z.global-to-local, align 1
  %v3_f744 = icmp ult i32 %v5_f738, 1022
  br i1 %v3_f744, label %dec_label_pc_f724, label %dec_label_pc_f748

dec_label_pc_f748:                                ; preds = %dec_label_pc_f724
  %v5_f740.le = trunc i32 %v0_f724 to i8
  store i32 ptrtoint (i8** @global_var_1d1bc.146 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i8** @global_var_1d1bc.146 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1d1bf.147 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1d1be.148 to i8*), align 4
  %v0_f77c = call i32 @function_eb90()
  %v1_f77c = trunc i32 %v0_f77c to i8
  store i32 %v0_f77c, i32* %r0.global-to-local, align 4
  %v3_f784 = load i8, i8* @global_var_1d1dc.151, align 1
  %v4_f78c252 = udiv i32 %v0_f77c, 256
  %v1_f790 = trunc i32 %v4_f78c252 to i8
  store i8 %v1_f790, i8* bitcast (i32* @global_var_1d1c1.152 to i8*), align 4
  %v4_f794 = sext i8 %v5_f740.le to i32
  store i8 6, i8* bitcast (i32* @global_var_1d1c5.153 to i8*), align 4
  %tmp = urem i8 %v3_f784, 16
  %v1_f7a0 = zext i8 %tmp to i32
  store i32 ptrtoint (i32* @global_var_1d1d0.150 to i32), i32* %r2.global-to-local, align 4
  %v1_f7a8 = and i32 %v4_f794, 128
  %v2_f7a8 = icmp ne i32 %v1_f7a8, 0
  store i1 %v2_f7a8, i1* %cpsr_c.global-to-local, align 1
  %v3_f7a8 = sdiv i32 %v4_f794, 256
  store i32 %v3_f7a8, i32* %ip.global-to-local, align 4
  %v1_f7ac = or i32 %v1_f7a0, 80
  store i32 %v1_f7ac, i32* %r1.global-to-local, align 4
  store i8 64, i8* bitcast (i32* @global_var_1d1c4.154 to i8*), align 4
  %v1_f7b8 = trunc i32 %v1_f7ac to i8
  store i8 %v1_f7b8, i8* @global_var_1d1dc.151, align 1
  store i8 23, i8* bitcast (i32* @global_var_1d1d3.155 to i8*), align 4
  store i32 %v4_f794, i32* %r3.global-to-local, align 4
  %v1_f7c8 = trunc i32 %v3_f7a8 to i8
  store i8 %v1_f7c8, i8* bitcast (i32* @global_var_1d1d1.156 to i8*), align 4
  store i8 %v1_f77c, i8* bitcast (i32* @global_var_1d1c0.157 to i8*), align 4
  store i8 %v5_f740.le, i8* bitcast (i32* @global_var_1d1d0.150 to i8*), align 4
  %v0_f7d4 = load i32, i32* @r5, align 4
  %v1_f7d4 = trunc i32 %v0_f7d4 to i8
  store i8 %v1_f7d4, i8* bitcast (i32* @global_var_1d1d2.158 to i8*), align 4
  %v0_f7d8 = call i32 @function_eb90()
  %v1_f7d8 = trunc i32 %v0_f7d8 to i8
  %v3_f7e0 = load i8, i8* @global_var_1d1dd.159, align 1
  %v4_f7e0 = zext i8 %v3_f7e0 to i32
  store i32 ptrtoint (i32* @global_var_1d1d0.150 to i32), i32* @lr, align 4
  %v2_f7e8 = and i32 %v0_f7d8, 128
  %v3_f7e8 = icmp ne i32 %v2_f7e8, 0
  store i1 %v3_f7e8, i1* %cpsr_c.global-to-local, align 1
  %v4_f7e8 = sdiv i32 %v0_f7d8, 256
  store i32 %v4_f7e8, i32* %ip.global-to-local, align 4
  %v1_f7ec = or i32 %v4_f7e0, 2
  store i32 %v1_f7ec, i32* %r3.global-to-local, align 4
  store i32 %v0_f7d8, i32* @r4, align 4
  %v1_f7f4 = trunc i32 %v4_f7e8 to i8
  store i8 %v1_f7f4, i8* bitcast (i32* @global_var_1d1df.160 to i8*), align 4
  %v1_f7f8 = trunc i32 %v1_f7ec to i8
  store i8 %v1_f7f8, i8* @global_var_1d1dd.159, align 1
  store i8 %v1_f7d8, i8* bitcast (i32* @global_var_1d1de.161 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14728.163 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1472c.165 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_f80c = call i32 @function_f44c(i32 ptrtoint ([5 x i8]* @global_var_14728.163 to i32), i32 ptrtoint (i32* @global_var_1472c.165 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_14728.163 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_146a4.167 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_f81c = call i32 @function_f44c(i32 ptrtoint ([5 x i8]* @global_var_14728.163 to i32), i32 ptrtoint ([5 x i8]* @global_var_146a4.167 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_14728.163 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_146ac.169 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_f82c = call i32 @function_f44c(i32 ptrtoint ([5 x i8]* @global_var_14728.163 to i32), i32 ptrtoint ([9 x i8]* @global_var_146ac.169 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_146b8.171 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1472c.165 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_f83c = call i32 @function_f44c(i32 ptrtoint ([8 x i8]* @global_var_146b8.171 to i32), i32 ptrtoint (i32* @global_var_1472c.165 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_14728.163 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_146c0.173 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_f84c = call i32 @function_f44c(i32 ptrtoint ([5 x i8]* @global_var_14728.163 to i32), i32 ptrtoint ([9 x i8]* @global_var_146c0.173 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_146cc.175 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_146cc.175 to i32), i32* %r1.global-to-local, align 4
  %v5_f85c = call i32 @function_f44c(i32 ptrtoint ([6 x i8]* @global_var_146cc.175 to i32), i32 ptrtoint ([6 x i8]* @global_var_146cc.175 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_14728.163 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_146d4.177 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f86c = call i32 @function_f44c(i32 ptrtoint ([5 x i8]* @global_var_14728.163 to i32), i32 ptrtoint ([6 x i8]* @global_var_146d4.177 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_146dc.179 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_146dc.179 to i32), i32* %r1.global-to-local, align 4
  %v5_f87c = call i32 @function_f44c(i32 ptrtoint ([8 x i8]* @global_var_146dc.179 to i32), i32 ptrtoint ([8 x i8]* @global_var_146dc.179 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_14728.163 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_146b8.171 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_f88c = call i32 @function_f44c(i32 ptrtoint ([5 x i8]* @global_var_14728.163 to i32), i32 ptrtoint ([8 x i8]* @global_var_146b8.171 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_14728.163 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_146e4.181 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_f89c = call i32 @function_f44c(i32 ptrtoint ([5 x i8]* @global_var_14728.163 to i32), i32 ptrtoint (i32* @global_var_146e4.181 to i32), i32 17)
  store i32 ptrtoint ([5 x i8]* @global_var_14728.163 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_146f4.183 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f8ac = call i32 @function_f44c(i32 ptrtoint ([5 x i8]* @global_var_14728.163 to i32), i32 ptrtoint ([6 x i8]* @global_var_146f4.183 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_146fc.185 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_146fc.185 to i32), i32* %r1.global-to-local, align 4
  %v5_f8bc = call i32 @function_f44c(i32 ptrtoint ([5 x i8]* @global_var_146fc.185 to i32), i32 ptrtoint ([5 x i8]* @global_var_146fc.185 to i32), i32 8)
  store i32 ptrtoint ([8 x i8]* @global_var_146b8.171 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14704.187 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_f8cc = call i32 @function_f44c(i32 ptrtoint ([8 x i8]* @global_var_146b8.171 to i32), i32 ptrtoint (i32* @global_var_14704.187 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_146b8.171 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14710.189 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_f8dc = call i32 @function_f44c(i32 ptrtoint ([8 x i8]* @global_var_146b8.171 to i32), i32 ptrtoint (i32* @global_var_14710.189 to i32), i32 15)
  store i32 ptrtoint ([5 x i8]* @global_var_1471c.191 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_146cc.175 to i32), i32* %r0.global-to-local, align 4
  %v5_f8ec = call i32 @function_f44c(i32 ptrtoint ([6 x i8]* @global_var_146cc.175 to i32), i32 ptrtoint ([5 x i8]* @global_var_1471c.191 to i32), i32 9)
  store i32 %v5_f8ec, i32* %r0.global-to-local, align 4
  %v2_f8f4 = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_f8f4, i32* %r1.global-to-local, align 4
  %v2_f8f8 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_f8f8, i32* %r2.global-to-local, align 4
  %tmp301 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_f904

dec_label_pc_f904:                                ; preds = %dec_label_pc_fff4, %dec_label_pc_f748
  %stack_var_-1872.0 = phi i32 [ %tmp263, %dec_label_pc_f748 ], [ %stack_var_-1872.2, %dec_label_pc_fff4 ]
  %stack_var_-1884.0 = phi i8* [ %tmp301, %dec_label_pc_f748 ], [ %stack_var_-1884.1, %dec_label_pc_fff4 ]
  %v0_fcb8 = phi i32 [ %v2_f8f4, %dec_label_pc_f748 ], [ %stack_var_-1880.1, %dec_label_pc_fff4 ]
  %stack_var_-1876.0 = phi i8 [ %v5_f740.le, %dec_label_pc_f748 ], [ %stack_var_-1876.1, %dec_label_pc_fff4 ]
  store i32 ptrtoint (i32* @global_var_1d1ec.130 to i32), i32* %r3.global-to-local, align 4
  store i32 %stack_var_-1872.0, i32* %ip.global-to-local, align 4
  %v2_f90c = load i32, i32* @global_var_1d1ec.130, align 4
  store i32 %v2_f90c, i32* @r8, align 4
  %v3_f910 = icmp uge i32 %stack_var_-1872.0, %v2_f90c
  store i1 %v3_f910, i1* %cpsr_c.global-to-local, align 1
  %v9_f910 = icmp eq i32 %stack_var_-1872.0, %v2_f90c
  store i1 %v9_f910, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f910, label %dec_label_pc_fc40, label %dec_label_pc_f918

dec_label_pc_f918:                                ; preds = %dec_label_pc_f904
  store i32 0, i32* %stack_var_-52, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  %v2_fc0c = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_f924

dec_label_pc_f924:                                ; preds = %.thread64.dec_label_pc_f924_crit_edge, %dec_label_pc_f918
  %v0_f924 = phi i32 [ %v0_f924.pre, %.thread64.dec_label_pc_f924_crit_edge ], [ 0, %dec_label_pc_f918 ]
  store i32 %v0_f924, i32* %stack_var_-92, align 4
  store i32 %v0_f924, i32* %stack_var_-84, align 4
  %v0_f934 = call i32 @function_eb90()
  %v1_f934 = trunc i32 %v0_f934 to i8
  store i32 %v0_f934, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d234.50 to i32), i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1d1bc.146 to i32), i32* %ip.global-to-local, align 4
  %v2_f940 = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_f940, i32* %r2.global-to-local, align 4
  %v2_f944 = and i32 %v0_f934, 128
  %v3_f944 = icmp ne i32 %v2_f944, 0
  store i1 %v3_f944, i1* %cpsr_c.global-to-local, align 1
  %v4_f944 = sdiv i32 %v0_f934, 256
  store i32 %v4_f944, i32* %r3.global-to-local, align 4
  %v1_f948 = trunc i32 %v4_f944 to i8
  store i8 %v1_f948, i8* bitcast (i32* @global_var_1d1c1.152 to i8*), align 4
  store i32 %v2_f940, i32* @global_var_1d1c8.192, align 4
  store i8 %v1_f934, i8* bitcast (i32* @global_var_1d1c0.157 to i8*), align 4
  br label %dec_label_pc_f954

dec_label_pc_f954:                                ; preds = %dec_label_pc_faac, %dec_label_pc_f984, %dec_label_pc_fae0, %dec_label_pc_fad4, %dec_label_pc_fac8, %dec_label_pc_fabc, %.thread49, %.thread33, %.thread29, %.thread25, %bb327, %bb326, %bb325, %bb324, %bb323, %bb322, %bb321, %bb320, %bb319, %bb318, %dec_label_pc_fa20, %dec_label_pc_fa18, %bb312, %dec_label_pc_f9e8, %dec_label_pc_f9c4, %bb305, %dec_label_pc_f994, %bb304, %dec_label_pc_f97c, %bb303, %bb329, %dec_label_pc_f924
  %v0_f954 = call i32 @function_eb90()
  store i32 %v0_f954, i32* %r0.global-to-local, align 4
  %v1_f958 = urem i32 %v0_f954, 256
  store i32 %v1_f958, i32* %r1.global-to-local, align 4
  %v3_f95c = udiv i32 %v0_f954, 256
  store i32 %v3_f95c, i32* %r3.global-to-local, align 4
  %v3_f960 = udiv i32 %v0_f954, 65536
  store i32 %v3_f960, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f964 = icmp eq i32 %v1_f958, 0
  store i1 %v2_f964, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f964, label %bb303, label %bb302

bb302:                                            ; preds = %dec_label_pc_f954
  %v3_f968 = icmp ugt i32 %v1_f958, 126
  store i1 %v3_f968, i1* %cpsr_c.global-to-local, align 1
  %v8_f968 = icmp eq i32 %v1_f958, 127
  store i1 %v8_f968, i1* %cpsr_z.global-to-local, align 1
  br label %bb303

bb303:                                            ; preds = %dec_label_pc_f954, %bb302
  %v0_f978 = phi i1 [ true, %dec_label_pc_f954 ], [ %v8_f968, %bb302 ]
  %v1_f96c = urem i32 %v3_f95c, 256
  store i32 %v1_f96c, i32* %ip.global-to-local, align 4
  %v1_f970 = urem i32 %v3_f960, 256
  store i32 %v1_f970, i32* %r2.global-to-local, align 4
  %v1_f974 = and i32 %v0_f954, 8388608
  %v2_f974 = icmp ne i32 %v1_f974, 0
  store i1 %v2_f974, i1* %cpsr_c.global-to-local, align 1
  %v3_f974 = udiv i32 %v0_f954, 16777216
  store i32 %v3_f974, i32* %r0.global-to-local, align 4
  br i1 %v0_f978, label %dec_label_pc_f954, label %dec_label_pc_f97c

dec_label_pc_f97c:                                ; preds = %bb303
  %v2_f97c = icmp ugt i32 %v1_f958, 2
  store i1 %v2_f97c, i1* %cpsr_c.global-to-local, align 1
  %v7_f97c = icmp eq i32 %v1_f958, 3
  store i1 %v7_f97c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f97c, label %dec_label_pc_f954, label %dec_label_pc_f984

dec_label_pc_f984:                                ; preds = %dec_label_pc_f97c
  %v1_f984 = add nsw i32 %v1_f958, -15
  store i32 %v1_f984, i32* %r3.global-to-local, align 4
  %v2_f988 = icmp ugt i32 %v1_f958, 55
  store i1 %v2_f988, i1* %cpsr_c.global-to-local, align 1
  %v7_f988 = icmp eq i32 %v1_f958, 56
  store i1 %v7_f988, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f988, label %dec_label_pc_f954, label %bb304

bb304:                                            ; preds = %dec_label_pc_f984
  %v3_f98c = icmp ne i32 %v1_f984, 0
  store i1 %v3_f98c, i1* %cpsr_c.global-to-local, align 1
  %v8_f98c = icmp eq i32 %v1_f984, 1
  store i1 %v8_f98c, i1* %cpsr_z.global-to-local, align 1
  %v2_f990 = xor i1 %v3_f98c, true
  %v3_f990 = or i1 %v8_f98c, %v2_f990
  br i1 %v3_f990, label %dec_label_pc_f954, label %dec_label_pc_f994

dec_label_pc_f994:                                ; preds = %bb304
  %v2_f994 = icmp ugt i32 %v1_f958, 9
  store i1 %v2_f994, i1* %cpsr_c.global-to-local, align 1
  %v7_f994 = icmp eq i32 %v1_f958, 10
  store i1 %v7_f994, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f994, label %dec_label_pc_f954, label %dec_label_pc_f99c

dec_label_pc_f99c:                                ; preds = %dec_label_pc_f994
  %v2_f99c = icmp ugt i32 %v1_f958, 191
  store i1 %v2_f99c, i1* %cpsr_c.global-to-local, align 1
  %v7_f99c = icmp eq i32 %v1_f958, 192
  store i1 %v7_f99c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f99c, label %bb305, label %dec_label_pc_f9a8

bb305:                                            ; preds = %dec_label_pc_f99c
  %v3_f9a0 = icmp ugt i32 %v1_f96c, 167
  store i1 %v3_f9a0, i1* %cpsr_c.global-to-local, align 1
  %v8_f9a0 = icmp eq i32 %v1_f96c, 168
  store i1 %v8_f9a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f9a0, label %dec_label_pc_f954, label %dec_label_pc_f9a8

dec_label_pc_f9a8:                                ; preds = %dec_label_pc_f99c, %bb305
  %v7_f9a8 = icmp eq i32 %v1_f958, 172
  %.383 = zext i1 %v7_f9a8 to i32
  store i32 %.383, i32* %r3.global-to-local, align 4
  %v2_f9b4 = icmp ugt i32 %v1_f96c, 14
  store i1 %v2_f9b4, i1* %cpsr_c.global-to-local, align 1
  %v7_f9b4 = icmp eq i32 %v1_f96c, 15
  store i1 %v7_f9b4, i1* %cpsr_z.global-to-local, align 1
  %v2_f9b8 = xor i1 %v2_f9b4, true
  %v3_f9b8 = or i1 %v7_f9b4, %v2_f9b8
  br i1 %v3_f9b8, label %.thread9, label %bb308

.thread9:                                         ; preds = %dec_label_pc_f9a8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f9cc

bb308:                                            ; preds = %dec_label_pc_f9a8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9bc = icmp eq i1 %v7_f9a8, false
  store i1 %v2_f9bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f9bc, label %dec_label_pc_f9cc, label %dec_label_pc_f9c4

dec_label_pc_f9c4:                                ; preds = %bb308
  %v2_f9c4 = icmp ugt i32 %v1_f96c, 30
  store i1 %v2_f9c4, i1* %cpsr_c.global-to-local, align 1
  %v7_f9c4 = icmp eq i32 %v1_f96c, 31
  store i1 %v7_f9c4, i1* %cpsr_z.global-to-local, align 1
  %v2_f9c8 = xor i1 %v2_f9c4, true
  %v3_f9c8 = or i1 %v7_f9c4, %v2_f9c8
  br i1 %v3_f9c8, label %dec_label_pc_f954, label %dec_label_pc_f9cc

dec_label_pc_f9cc:                                ; preds = %.thread9, %dec_label_pc_f9c4, %bb308
  %v7_f9cc = icmp eq i32 %v1_f958, 100
  %.384 = zext i1 %v7_f9cc to i32
  store i32 %.384, i32* %r3.global-to-local, align 4
  %v2_f9d8 = icmp ugt i32 %v1_f96c, 62
  store i1 %v2_f9d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f9d8 = icmp eq i32 %v1_f96c, 63
  store i1 %v7_f9d8, i1* %cpsr_z.global-to-local, align 1
  %v2_f9dc = xor i1 %v2_f9d8, true
  %v3_f9dc = or i1 %v7_f9d8, %v2_f9dc
  br i1 %v3_f9dc, label %.thread14, label %bb311

.thread14:                                        ; preds = %dec_label_pc_f9cc
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f9f0

bb311:                                            ; preds = %dec_label_pc_f9cc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9e0 = icmp eq i1 %v7_f9cc, false
  store i1 %v2_f9e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f9e0, label %dec_label_pc_f9f0, label %dec_label_pc_f9e8

dec_label_pc_f9e8:                                ; preds = %bb311
  %v2_f9e8 = icmp ugt i32 %v1_f96c, 125
  store i1 %v2_f9e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f9e8 = icmp eq i32 %v1_f96c, 126
  store i1 %v7_f9e8, i1* %cpsr_z.global-to-local, align 1
  %v2_f9ec = xor i1 %v2_f9e8, true
  %v3_f9ec = or i1 %v7_f9e8, %v2_f9ec
  br i1 %v3_f9ec, label %dec_label_pc_f954, label %dec_label_pc_f9f0

dec_label_pc_f9f0:                                ; preds = %.thread14, %dec_label_pc_f9e8, %bb311
  %v2_f9f0 = icmp ugt i32 %v1_f958, 168
  store i1 %v2_f9f0, i1* %cpsr_c.global-to-local, align 1
  %v7_f9f0 = icmp eq i32 %v1_f958, 169
  store i1 %v7_f9f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9f0, label %bb312, label %dec_label_pc_f9fc

bb312:                                            ; preds = %dec_label_pc_f9f0
  %v3_f9f4 = icmp eq i32 %v1_f96c, 255
  store i1 %v3_f9f4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f9f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f9f4, label %dec_label_pc_f954, label %dec_label_pc_f9fc

dec_label_pc_f9fc:                                ; preds = %dec_label_pc_f9f0, %bb312
  %v7_f9fc = icmp eq i32 %v1_f958, 198
  %.385 = zext i1 %v7_f9fc to i32
  store i32 %.385, i32* %r3.global-to-local, align 4
  %v2_fa08 = icmp ugt i32 %v1_f96c, 16
  store i1 %v2_fa08, i1* %cpsr_c.global-to-local, align 1
  %v7_fa08 = icmp eq i32 %v1_f96c, 17
  store i1 %v7_fa08, i1* %cpsr_z.global-to-local, align 1
  %v2_fa0c = xor i1 %v2_fa08, true
  %v3_fa0c = or i1 %v7_fa08, %v2_fa0c
  br i1 %v3_fa0c, label %.thread20, label %bb315

.thread20:                                        ; preds = %dec_label_pc_f9fc
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fa20

bb315:                                            ; preds = %dec_label_pc_f9fc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa10 = icmp eq i1 %v7_f9fc, false
  store i1 %v2_fa10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa10, label %dec_label_pc_fa20, label %dec_label_pc_fa18

dec_label_pc_fa18:                                ; preds = %bb315
  %v2_fa18 = icmp ugt i32 %v1_f96c, 18
  store i1 %v2_fa18, i1* %cpsr_c.global-to-local, align 1
  %v7_fa18 = icmp eq i32 %v1_f96c, 19
  store i1 %v7_fa18, i1* %cpsr_z.global-to-local, align 1
  %v2_fa1c = xor i1 %v2_fa18, true
  %v3_fa1c = or i1 %v7_fa18, %v2_fa1c
  br i1 %v3_fa1c, label %dec_label_pc_f954, label %dec_label_pc_fa20

dec_label_pc_fa20:                                ; preds = %.thread20, %dec_label_pc_fa18, %bb315
  %v2_fa20 = icmp ugt i32 %v1_f958, 222
  store i1 %v2_fa20, i1* %cpsr_c.global-to-local, align 1
  %v7_fa20 = icmp eq i32 %v1_f958, 223
  store i1 %v7_fa20, i1* %cpsr_z.global-to-local, align 1
  %v2_fa24 = xor i1 %v7_fa20, true
  %v3_fa24 = and i1 %v2_fa20, %v2_fa24
  br i1 %v3_fa24, label %dec_label_pc_f954, label %dec_label_pc_fa28

dec_label_pc_fa28:                                ; preds = %dec_label_pc_fa20
  %v7_fa28 = icmp eq i32 %v1_f958, 106
  %.386 = zext i1 %v7_fa28 to i32
  %v2_fa34 = icmp ugt i32 %v1_f96c, 185
  store i1 %v2_fa34, i1* %cpsr_c.global-to-local, align 1
  %v7_fa34 = icmp eq i32 %v1_f96c, 186
  store i1 %v7_fa34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa34, label %bb318, label %dec_label_pc_fa40

bb318:                                            ; preds = %dec_label_pc_fa28
  %v2_fa28 = icmp ugt i32 %v1_f958, 105
  store i1 %v2_fa28, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_fa28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa28, label %dec_label_pc_f954, label %dec_label_pc_fa40

dec_label_pc_fa40:                                ; preds = %dec_label_pc_fa28, %bb318
  %v2_fa40 = icmp ugt i32 %v1_f96c, 186
  store i1 %v2_fa40, i1* %cpsr_c.global-to-local, align 1
  %v7_fa40 = icmp eq i32 %v1_f96c, 187
  store i1 %v7_fa40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa40, label %.thread25, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_fa40
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fa54

.thread25:                                        ; preds = %dec_label_pc_fa40
  store i32 %.386, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa4c = icmp eq i1 %v7_fa28, false
  store i1 %v2_fa4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa4c, label %dec_label_pc_fa54, label %dec_label_pc_f954

dec_label_pc_fa54:                                ; preds = %.thread26, %.thread25
  %v2_fa54 = icmp ugt i32 %v1_f96c, 184
  store i1 %v2_fa54, i1* %cpsr_c.global-to-local, align 1
  %v7_fa54 = icmp eq i32 %v1_f96c, 185
  store i1 %v7_fa54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa54, label %.thread29, label %.thread30

.thread30:                                        ; preds = %dec_label_pc_fa54
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fa68

.thread29:                                        ; preds = %dec_label_pc_fa54
  store i32 %.386, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa60 = icmp eq i1 %v7_fa28, false
  store i1 %v2_fa60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa60, label %dec_label_pc_fa68, label %dec_label_pc_f954

dec_label_pc_fa68:                                ; preds = %.thread30, %.thread29
  %v2_fa68 = icmp ugt i32 %v1_f96c, 183
  store i1 %v2_fa68, i1* %cpsr_c.global-to-local, align 1
  %v7_fa68 = icmp eq i32 %v1_f96c, 184
  store i1 %v7_fa68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa68, label %.thread33, label %.thread34

.thread34:                                        ; preds = %dec_label_pc_fa68
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fa7c

.thread33:                                        ; preds = %dec_label_pc_fa68
  store i32 %.386, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa74 = icmp eq i1 %v7_fa28, false
  store i1 %v2_fa74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa74, label %dec_label_pc_fa7c, label %dec_label_pc_f954

dec_label_pc_fa7c:                                ; preds = %.thread34, %.thread33
  %v2_fa7c = icmp ugt i32 %v1_f958, 149
  store i1 %v2_fa7c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa7c = icmp eq i32 %v1_f958, 150
  store i1 %v7_fa7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa7c, label %bb319, label %dec_label_pc_fa88

bb319:                                            ; preds = %dec_label_pc_fa7c
  %v3_fa80 = icmp ugt i32 %v1_f96c, 30
  store i1 %v3_fa80, i1* %cpsr_c.global-to-local, align 1
  %v8_fa80 = icmp eq i32 %v1_f96c, 31
  store i1 %v8_fa80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fa80, label %dec_label_pc_f954, label %dec_label_pc_fa88

dec_label_pc_fa88:                                ; preds = %dec_label_pc_fa7c, %bb319
  %v2_fa88 = icmp ugt i32 %v1_f958, 48
  store i1 %v2_fa88, i1* %cpsr_c.global-to-local, align 1
  %v7_fa88 = icmp eq i32 %v1_f958, 49
  store i1 %v7_fa88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa88, label %bb320, label %dec_label_pc_fa94

bb320:                                            ; preds = %dec_label_pc_fa88
  %v3_fa8c = icmp ugt i32 %v1_f96c, 50
  store i1 %v3_fa8c, i1* %cpsr_c.global-to-local, align 1
  %v8_fa8c = icmp eq i32 %v1_f96c, 51
  store i1 %v8_fa8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fa8c, label %dec_label_pc_f954, label %dec_label_pc_fa94

dec_label_pc_fa94:                                ; preds = %dec_label_pc_fa88, %bb320
  %v2_fa94 = icmp ugt i32 %v1_f958, 177
  store i1 %v2_fa94, i1* %cpsr_c.global-to-local, align 1
  %v7_fa94 = icmp eq i32 %v1_f958, 178
  store i1 %v7_fa94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa94, label %bb321, label %dec_label_pc_faa0

bb321:                                            ; preds = %dec_label_pc_fa94
  %v3_fa98 = icmp ugt i32 %v1_f96c, 61
  store i1 %v3_fa98, i1* %cpsr_c.global-to-local, align 1
  %v8_fa98 = icmp eq i32 %v1_f96c, 62
  store i1 %v8_fa98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fa98, label %dec_label_pc_f954, label %dec_label_pc_faa0

dec_label_pc_faa0:                                ; preds = %dec_label_pc_fa94, %bb321
  %v2_faa0 = icmp ugt i32 %v1_f958, 159
  store i1 %v2_faa0, i1* %cpsr_c.global-to-local, align 1
  %v7_faa0 = icmp eq i32 %v1_f958, 160
  store i1 %v7_faa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_faa0, label %bb322, label %dec_label_pc_faac

bb322:                                            ; preds = %dec_label_pc_faa0
  %v3_faa4 = icmp ugt i32 %v1_f96c, 12
  store i1 %v3_faa4, i1* %cpsr_c.global-to-local, align 1
  %v8_faa4 = icmp eq i32 %v1_f96c, 13
  store i1 %v8_faa4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_faa4, label %dec_label_pc_f954, label %dec_label_pc_faac

dec_label_pc_faac:                                ; preds = %dec_label_pc_faa0, %bb322
  %v1_faac = add nsw i32 %v1_f958, -6
  store i32 %v1_faac, i32* %r3.global-to-local, align 4
  %v2_fab0 = icmp ugt i32 %v1_f958, 10
  store i1 %v2_fab0, i1* %cpsr_c.global-to-local, align 1
  %v7_fab0 = icmp eq i32 %v1_f958, 11
  store i1 %v7_fab0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fab0, label %dec_label_pc_f954, label %bb323

bb323:                                            ; preds = %dec_label_pc_faac
  %v3_fab4 = icmp ne i32 %v1_faac, 0
  store i1 %v3_fab4, i1* %cpsr_c.global-to-local, align 1
  %v8_fab4 = icmp eq i32 %v1_faac, 1
  store i1 %v8_fab4, i1* %cpsr_z.global-to-local, align 1
  %v2_fab8 = xor i1 %v3_fab4, true
  %v3_fab8 = or i1 %v8_fab4, %v2_fab8
  br i1 %v3_fab8, label %dec_label_pc_f954, label %dec_label_pc_fabc

dec_label_pc_fabc:                                ; preds = %bb323
  %v2_fabc = icmp ugt i32 %v1_f958, 21
  store i1 %v2_fabc, i1* %cpsr_c.global-to-local, align 1
  %v7_fabc = icmp eq i32 %v1_f958, 22
  store i1 %v7_fabc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fabc, label %dec_label_pc_f954, label %bb324

bb324:                                            ; preds = %dec_label_pc_fabc
  %v3_fac0 = icmp ugt i32 %v1_f958, 20
  store i1 %v3_fac0, i1* %cpsr_c.global-to-local, align 1
  %v8_fac0 = icmp eq i32 %v1_f958, 21
  store i1 %v8_fac0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fac0, label %dec_label_pc_f954, label %dec_label_pc_fac8

dec_label_pc_fac8:                                ; preds = %bb324
  %v2_fac8 = icmp ugt i32 %v1_f958, 27
  store i1 %v2_fac8, i1* %cpsr_c.global-to-local, align 1
  %v7_fac8 = icmp eq i32 %v1_f958, 28
  store i1 %v7_fac8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fac8, label %dec_label_pc_f954, label %bb325

bb325:                                            ; preds = %dec_label_pc_fac8
  %v3_facc = icmp ugt i32 %v1_f958, 25
  store i1 %v3_facc, i1* %cpsr_c.global-to-local, align 1
  %v8_facc = icmp eq i32 %v1_f958, 26
  store i1 %v8_facc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_facc, label %dec_label_pc_f954, label %dec_label_pc_fad4

dec_label_pc_fad4:                                ; preds = %bb325
  %v2_fad4 = icmp ugt i32 %v1_f958, 29
  store i1 %v2_fad4, i1* %cpsr_c.global-to-local, align 1
  %v7_fad4 = icmp eq i32 %v1_f958, 30
  store i1 %v7_fad4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fad4, label %dec_label_pc_f954, label %bb326

bb326:                                            ; preds = %dec_label_pc_fad4
  %v3_fad8 = icmp ugt i32 %v1_f958, 28
  store i1 %v3_fad8, i1* %cpsr_c.global-to-local, align 1
  %v8_fad8 = icmp eq i32 %v1_f958, 29
  store i1 %v8_fad8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fad8, label %dec_label_pc_f954, label %dec_label_pc_fae0

dec_label_pc_fae0:                                ; preds = %bb326
  %v2_fae0 = icmp ugt i32 %v1_f958, 54
  store i1 %v2_fae0, i1* %cpsr_c.global-to-local, align 1
  %v7_fae0 = icmp eq i32 %v1_f958, 55
  store i1 %v7_fae0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fae0, label %dec_label_pc_f954, label %bb327

bb327:                                            ; preds = %dec_label_pc_fae0
  %v3_fae4 = icmp ugt i32 %v1_f958, 32
  store i1 %v3_fae4, i1* %cpsr_c.global-to-local, align 1
  %v8_fae4 = icmp eq i32 %v1_f958, 33
  store i1 %v8_fae4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fae4, label %dec_label_pc_f954, label %dec_label_pc_faec

dec_label_pc_faec:                                ; preds = %bb327
  %v2_faec = icmp ugt i32 %v1_f958, 214
  store i1 %v2_faec, i1* %cpsr_c.global-to-local, align 1
  %v7_faec = icmp eq i32 %v1_f958, 215
  store i1 %v7_faec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_faec, label %.thread49, label %bb328

bb328:                                            ; preds = %dec_label_pc_faec
  %v3_faf0 = icmp ugt i32 %v1_f958, 213
  store i1 %v3_faf0, i1* %cpsr_c.global-to-local, align 1
  %v8_faf0 = icmp eq i32 %v1_f958, 214
  store i1 %v8_faf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_faf0, label %bb329, label %dec_label_pc_fb00

.thread49:                                        ; preds = %dec_label_pc_faec
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f954

bb329:                                            ; preds = %bb328
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f954

dec_label_pc_fb00:                                ; preds = %bb328
  store i32 0, i32* @r4, align 4
  %v5_fb0c = call i32 @llvm.bswap.i32(i32 %v0_f954)
  store i32 %v5_fb0c, i32* %r3.global-to-local, align 4
  %tmp330 = and i32 %v0_f954, 65280
  %tmp331 = call i32 @llvm.bswap.i32(i32 %tmp330)
  %tmp332 = and i32 %v0_f954, 16711680
  %tmp333 = call i32 @llvm.bswap.i32(i32 %tmp332)
  %v3_fb18 = mul nuw i32 %v3_f974, 16777216
  %v3_fb1c = udiv i32 %tmp331, 256
  %v4_fb20 = mul nuw nsw i32 %tmp333, 256
  %tmp334 = and i32 %v0_f954, 32768
  %v3_fb24 = icmp ne i32 %tmp334, 0
  store i1 %v3_fb24, i1* %cpsr_c.global-to-local, align 1
  %v4_fb24 = udiv i32 %v5_fb0c, 16777216
  store i32 ptrtoint (i8** @global_var_1d1bc.146 to i32), i32* @r0, align 4
  %v5_fb24 = or i32 %v4_fb24, %v3_fb18
  %v5_fb20 = or i32 %v5_fb24, %v4_fb20
  %v2_fb2c = or i32 %v5_fb20, %v3_fb1c
  store i32 %v2_fb2c, i32* %r2.global-to-local, align 4
  %v5_fb30 = trunc i32 %v4_fb24 to i8
  store i8 %v5_fb30, i8* @global_var_1d1cc.193, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1d1c6.194 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1d1c7.195 to i8*), align 4
  %v3_fb40 = call i32 @function_d0b8(i32 ptrtoint (i8** @global_var_1d1bc.146 to i32), i32 20)
  %v4_fb40 = trunc i32 %v3_fb40 to i8
  store i32 ptrtoint (i8** @global_var_1d1bc.146 to i32), i32* @lr, align 4
  %v2_fb48 = and i32 %v3_fb40, 128
  %v3_fb48 = icmp ne i32 %v2_fb48, 0
  store i1 %v3_fb48, i1* %cpsr_c.global-to-local, align 1
  %v4_fb48 = sdiv i32 %v3_fb40, 256
  store i32 %v4_fb48, i32* %r2.global-to-local, align 4
  store i32 %v3_fb40, i32* %r3.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v1_fb54 = trunc i32 %v4_fb48 to i8
  store i8 %v1_fb54, i8* bitcast (i32* @global_var_1d1c7.195 to i8*), align 4
  store i8 %v4_fb40, i8* bitcast (i32* @global_var_1d1c6.194 to i8*), align 4
  %v3_fb5c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_fb5c, i32* %r0.global-to-local, align 4
  %v4_fb60 = call i32 @function_11c50(i32 %v3_fb5c, i32 10)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fb64 = icmp eq i32 %v4_fb60, 0
  store i1 %v2_fb64, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1d1bc.146 to i32), i32* %r0.global-to-local, align 4
  br i1 %v2_fb64, label %bb336, label %bb335

bb335:                                            ; preds = %dec_label_pc_fb00
  store i32 ptrtoint (i32* @global_var_1d1d0.150 to i32), i32* %r2.global-to-local, align 4
  %v4_fb78 = load i8, i8* @global_var_1d1cc.193, align 1
  %v5_fb78 = sext i8 %v4_fb78 to i32
  store i32 %v5_fb78, i32* %ip.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  br label %.thread63

bb336:                                            ; preds = %dec_label_pc_fb00
  store i32 ptrtoint (i32* @global_var_1d1d0.150 to i32), i32* %r1.global-to-local, align 4
  %v4_fb7852 = load i8, i8* @global_var_1d1cc.193, align 1
  %v5_fb7853 = sext i8 %v4_fb7852 to i32
  store i32 %v5_fb7853, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i8 9, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d1d0.150 to i32), i32 2) to i8*), align 2
  %v0_fb8c.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fb8c.pr.pre, label %.thread61, label %.thread63

.thread61:                                        ; preds = %bb336
  %v1_fb8c = load i32, i32* %r2.global-to-local, align 4
  %v2_fb8c = trunc i32 %v1_fb8c to i8
  %v3_fb8c = load i32, i32* %r1.global-to-local, align 4
  %v4_fb8c = add i32 %v3_fb8c, 3
  %v5_fb8c = inttoptr i32 %v4_fb8c to i8*
  store i8 %v2_fb8c, i8* %v5_fb8c, align 1
  %v0_fb90.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fb90.pr.pr, label %.thread64, label %.thread63

.thread63:                                        ; preds = %bb335, %bb336, %.thread61
  %v1_fb90 = load i32, i32* @r4, align 4
  %v2_fb90 = trunc i32 %v1_fb90 to i8
  %v3_fb90 = load i32, i32* %r2.global-to-local, align 4
  %v4_fb90 = add i32 %v3_fb90, 2
  %v5_fb90 = inttoptr i32 %v4_fb90 to i8*
  store i8 %v2_fb90, i8* %v5_fb90, align 1
  %v0_fb94.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fb94.pr, label %.thread64, label %bb337

bb337:                                            ; preds = %.thread63
  %v1_fb94 = load i32, i32* %r3.global-to-local, align 4
  %v2_fb94 = trunc i32 %v1_fb94 to i8
  %v3_fb94 = load i32, i32* %r2.global-to-local, align 4
  %v4_fb94 = add i32 %v3_fb94, 3
  %v5_fb94 = inttoptr i32 %v4_fb94 to i8*
  store i8 %v2_fb94, i8* %v5_fb94, align 1
  br label %.thread64

.thread64:                                        ; preds = %.thread61, %.thread63, %bb337
  %v0_fb98 = load i32, i32* %ip.global-to-local, align 4
  %v4_fb98 = trunc i32 %v0_fb98 to i8
  store i8 %v4_fb98, i8* @global_var_1d1d4.196, align 4
  store i32 ptrtoint (i32* @global_var_1d1d0.150 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_fba8 = load i32, i32* %sl.global-to-local, align 4
  %v1_fba8 = trunc i32 %v0_fba8 to i8
  store i8 %v1_fba8, i8* bitcast (i32* @global_var_1d1e0.197 to i8*), align 4
  store i8 %v1_fba8, i8* bitcast (i32* @global_var_1d1e1.198 to i8*), align 4
  %v5_fbb0 = call i32 @function_d114(i32 ptrtoint (i8** @global_var_1d1bc.146 to i32), i32 ptrtoint (i32* @global_var_1d1d0.150 to i32), i32 5120, i32 20)
  %sext = mul i32 %v5_fbb0, 16777216
  %v1_fbb8 = sdiv i32 %sext, 16777216
  %v3_fbc0 = ashr i32 %sext, 31
  %v2_fbc4 = load i32, i32* @global_var_1d1d0.150, align 4
  %v1_fbcc = trunc i32 %v3_fbc0 to i8
  store i8 %v1_fbcc, i8* bitcast (i32* @global_var_1d1e1.198 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_fbe0 = load i8, i8* @global_var_1d1cc.193, align 1
  %v4_fbe0 = sext i8 %v3_fbe0 to i32
  store i32 %v4_fbe0, i32* @r4, align 4
  %v2_fbe4 = load i32, i32* @global_var_1d254.144, align 4
  store i32 %v2_fbe4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d1d0.150 to i32), i32* %ip.global-to-local, align 4
  %v1_fbf4 = and i32 %v2_fbc4, 8388608
  %v2_fbf4 = icmp ne i32 %v1_fbf4, 0
  store i1 %v2_fbf4, i1* %cpsr_c.global-to-local, align 1
  %v1_fbfc = trunc i32 %v1_fbb8 to i8
  store i8 %v1_fbfc, i8* bitcast (i32* @global_var_1d1e0.197 to i8*), align 4
  store i32 ptrtoint (i8** @global_var_1d1bc.146 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v8_fc24 = call i32 @function_126a8(i32 %v2_fbe4, i32* bitcast (i8** @global_var_1d1bc.146 to i32*), i32 40, i32 16384, i32 %v2_fc0c, i32 16)
  store i32 %v8_fc24, i32* %r0.global-to-local, align 4
  %v3_fc28 = load i32, i32* %stack_var_-52, align 4
  %v1_fc2c = add i32 %v3_fc28, 1
  store i32 %v1_fc2c, i32* %r3.global-to-local, align 4
  %v3_fc30 = icmp ugt i32 %v1_fc2c, 483
  store i1 %v3_fc30, i1* %cpsr_c.global-to-local, align 1
  %v8_fc30 = icmp eq i32 %v1_fc2c, 484
  store i1 %v8_fc30, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_fc2c, i32* %stack_var_-52, align 4
  %v5_fc38 = icmp slt i32 %v1_fc2c, 484
  br i1 %v5_fc38, label %.thread64.dec_label_pc_f924_crit_edge, label %dec_label_pc_fc3c

.thread64.dec_label_pc_f924_crit_edge:            ; preds = %.thread64
  %v0_f924.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_f924

dec_label_pc_fc3c:                                ; preds = %.thread64
  %v0_fc3c = load i32, i32* @r8, align 4
  br label %dec_label_pc_fc40

dec_label_pc_fc40:                                ; preds = %dec_label_pc_f904, %dec_label_pc_fc3c
  %stack_var_-1872.1 = phi i32 [ %stack_var_-1872.0, %dec_label_pc_f904 ], [ %v0_fc3c, %dec_label_pc_fc3c ]
  %v0_fc40 = call i32 @function_123d0()
  store i32 %v0_fc40, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v2_fc54 = inttoptr i32 %v0_fc40 to i32*
  %v6_fc7c = inttoptr i32 %v0_fcb8 to i32*
  %v1_fca8 = add i32 %v0_fcb8, 16
  %v2_fca8 = inttoptr i32 %v1_fca8 to i32*
  %v4_fcc4 = ptrtoint i8* %stack_var_-1884.0 to i32
  %v1_fccc = add i32 %v4_fcc4, 1
  %v2_fccc = inttoptr i32 %v1_fccc to i8*
  %v1_fcf0 = add i32 %v4_fcc4, 3
  %v2_fcf0 = inttoptr i32 %v1_fcf0 to i8*
  %v1_fcf4 = add i32 %v4_fcc4, 2
  %v2_fcf4 = inttoptr i32 %v1_fcf4 to i8*
  %v4_fcfc = sext i8 %stack_var_-1876.0 to i32
  %v1_fdd8 = bitcast i8* %stack_var_-1884.0 to i32*
  %v1_fcb8 = add i32 %v0_fcb8, 9
  %v2_fcb8 = inttoptr i32 %v1_fcb8 to i8*
  %v1_fd08 = add i32 %v4_fcc4, 13
  %v2_fd08 = inttoptr i32 %v1_fd08 to i8*
  %v1_fd2c = add i32 %v4_fcc4, 8
  %v2_fd2c = inttoptr i32 %v1_fd2c to i32*
  %v1_fd6c = add i32 %v0_fcb8, 12
  %v2_fd6c = inttoptr i32 %v1_fd6c to i32*
  br label %dec_label_pc_fc4c

dec_label_pc_fc4c:                                ; preds = %dec_label_pc_fd2c, %dec_label_pc_fd24, %dec_label_pc_fd1c, %dec_label_pc_fcec, %dec_label_pc_fcdc, %dec_label_pc_fcb8, %dec_label_pc_fca0, %dec_label_pc_fd14, %dec_label_pc_fd08, %dec_label_pc_fc98, %dec_label_pc_fdd0, %dec_label_pc_fc40
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %v2_fc54, align 4
  %v0_fc5c = load i32, i32* %r2.global-to-local, align 4
  %v2_fc60 = load i32, i32* @global_var_1d254.144, align 4
  store i32 %v2_fc60, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_fc68 = add i32 %v0_fc5c, 1514
  store i32 %v1_fc68, i32* %r2.global-to-local, align 4
  store i32 %v0_fcb8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_fc7c = call i32 @function_12648(i32 %v2_fc60, i32* %v6_fc7c, i32 %v1_fc68, i32 16384, i32 0, i32 0)
  store i32 %v7_fc7c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fc80 = icmp eq i32 %v7_fc7c, 0
  store i1 %v2_fc80, i1* %cpsr_z.global-to-local, align 1
  %tmp338 = icmp slt i32 %v7_fc7c, 1
  br i1 %tmp338, label %dec_label_pc_fdf0, label %dec_label_pc_fc88

dec_label_pc_fc88:                                ; preds = %dec_label_pc_fc4c
  %v2_fc8c = load i32, i32* %v2_fc54, align 4
  store i32 %v2_fc8c, i32* %r3.global-to-local, align 4
  %v2_fc90 = icmp ugt i32 %v2_fc8c, 10
  store i1 %v2_fc90, i1* %cpsr_c.global-to-local, align 1
  %v7_fc90 = icmp eq i32 %v2_fc8c, 11
  store i1 %v7_fc90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc90, label %dec_label_pc_fdf0, label %dec_label_pc_fc98

dec_label_pc_fc98:                                ; preds = %dec_label_pc_fc88
  %v2_fc98 = icmp ugt i32 %v7_fc7c, 38
  store i1 %v2_fc98, i1* %cpsr_c.global-to-local, align 1
  %v7_fc98 = icmp eq i32 %v7_fc7c, 39
  store i1 %v7_fc98, i1* %cpsr_z.global-to-local, align 1
  %v2_fc9c = xor i1 %v2_fc98, true
  %v3_fc9c = or i1 %v7_fc98, %v2_fc9c
  br i1 %v3_fc9c, label %dec_label_pc_fc4c, label %dec_label_pc_fca0

dec_label_pc_fca0:                                ; preds = %dec_label_pc_fc98
  store i32 %v0_fcb8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d234.50 to i32), i32* %ip.global-to-local, align 4
  %v3_fca8 = load i32, i32* %v2_fca8, align 4
  store i32 %v3_fca8, i32* %r2.global-to-local, align 4
  %v2_fcac = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_fcac, i32* %r3.global-to-local, align 4
  %v3_fcb0 = icmp uge i32 %v3_fca8, %v2_fcac
  store i1 %v3_fcb0, i1* %cpsr_c.global-to-local, align 1
  %v9_fcb0 = icmp eq i32 %v3_fca8, %v2_fcac
  store i1 %v9_fcb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fcb0, label %dec_label_pc_fcb8, label %dec_label_pc_fc4c

dec_label_pc_fcb8:                                ; preds = %dec_label_pc_fca0
  %v3_fcb8 = load i8, i8* %v2_fcb8, align 1
  %v4_fcb8 = zext i8 %v3_fcb8 to i32
  store i32 %v4_fcb8, i32* %r3.global-to-local, align 4
  %v2_fcbc = icmp ugt i8 %v3_fcb8, 5
  store i1 %v2_fcbc, i1* %cpsr_c.global-to-local, align 1
  %v7_fcbc = icmp eq i8 %v3_fcb8, 6
  store i1 %v7_fcbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcbc, label %dec_label_pc_fcc4, label %dec_label_pc_fc4c

dec_label_pc_fcc4:                                ; preds = %dec_label_pc_fcb8
  %v2_fcc8 = load i8, i8* %stack_var_-1884.0, align 1
  %v3_fcc8 = zext i8 %v2_fcc8 to i32
  store i32 %v3_fcc8, i32* %r2.global-to-local, align 4
  %v3_fccc = load i8, i8* %v2_fccc, align 1
  %v4_fccc = zext i8 %v3_fccc to i32
  store i32 %v4_fccc, i32* %r3.global-to-local, align 4
  %v4_fcd0 = mul nuw nsw i32 %v4_fccc, 256
  %v5_fcd0 = or i32 %v4_fcd0, %v3_fcc8
  store i32 %v5_fcd0, i32* %r2.global-to-local, align 4
  %v2_fcd4 = icmp ugt i32 %v5_fcd0, 5887
  store i1 %v2_fcd4, i1* %cpsr_c.global-to-local, align 1
  %v7_fcd4 = icmp eq i32 %v5_fcd0, 5888
  store i1 %v7_fcd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcd4, label %dec_label_pc_fcec, label %dec_label_pc_fcdc

dec_label_pc_fcdc:                                ; preds = %dec_label_pc_fcc4
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_fce4 = icmp ugt i32 %v5_fcd0, 4872
  store i1 %v3_fce4, i1* %cpsr_c.global-to-local, align 1
  %v9_fce4 = icmp eq i32 %v5_fcd0, 4873
  store i1 %v9_fce4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fce4, label %dec_label_pc_fcec, label %dec_label_pc_fc4c

dec_label_pc_fcec:                                ; preds = %dec_label_pc_fcdc, %dec_label_pc_fcc4
  store i32 %v4_fcc4, i32* %r1.global-to-local, align 4
  %v3_fcf0 = load i8, i8* %v2_fcf0, align 1
  %v4_fcf0 = zext i8 %v3_fcf0 to i32
  store i32 %v4_fcf0, i32* %r2.global-to-local, align 4
  %v3_fcf4 = load i8, i8* %v2_fcf4, align 1
  %v4_fcf4 = zext i8 %v3_fcf4 to i32
  %v4_fcf8 = mul nuw nsw i32 %v4_fcf0, 256
  %v5_fcf8 = or i32 %v4_fcf4, %v4_fcf8
  store i32 %v5_fcf8, i32* %r3.global-to-local, align 4
  store i32 %v4_fcfc, i32* %r2.global-to-local, align 4
  %v3_fd00 = icmp uge i32 %v5_fcf8, %v4_fcfc
  store i1 %v3_fd00, i1* %cpsr_c.global-to-local, align 1
  %v9_fd00 = icmp eq i32 %v5_fcf8, %v4_fcfc
  store i1 %v9_fd00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fd00, label %dec_label_pc_fd08, label %dec_label_pc_fc4c

dec_label_pc_fd08:                                ; preds = %dec_label_pc_fcec
  %v3_fd08 = load i8, i8* %v2_fd08, align 1
  %v4_fd08 = zext i8 %v3_fd08 to i32
  store i32 %v4_fd08, i32* %r3.global-to-local, align 4
  %v1_fd0c = and i32 %v4_fd08, 2
  %v2_fd0c = icmp eq i32 %v1_fd0c, 0
  store i1 %v2_fd0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fd0c, label %dec_label_pc_fc4c, label %dec_label_pc_fd14

dec_label_pc_fd14:                                ; preds = %dec_label_pc_fd08
  %v1_fd14 = and i32 %v4_fd08, 16
  %v2_fd14 = icmp eq i32 %v1_fd14, 0
  store i1 %v2_fd14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fd14, label %dec_label_pc_fc4c, label %dec_label_pc_fd1c

dec_label_pc_fd1c:                                ; preds = %dec_label_pc_fd14
  %v1_fd1c = and i32 %v4_fd08, 4
  %v2_fd1c = icmp eq i32 %v1_fd1c, 0
  store i1 %v2_fd1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fd1c, label %dec_label_pc_fd24, label %dec_label_pc_fc4c

dec_label_pc_fd24:                                ; preds = %dec_label_pc_fd1c
  %tmp495 = urem i8 %v3_fd08, 2
  %v2_fd24 = icmp eq i8 %tmp495, 0
  store i1 %v2_fd24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fd24, label %dec_label_pc_fd2c, label %dec_label_pc_fc4c

dec_label_pc_fd2c:                                ; preds = %dec_label_pc_fd24
  %v3_fd2c = load i32, i32* %v2_fd2c, align 4
  %v2_fd48 = call i32 @llvm.bswap.i32(i32 %v3_fd2c)
  %v1_fd4c = add i32 %v2_fd48, -1
  %v1_fd50 = udiv i32 %v1_fd4c, 256
  %v3_fd54 = and i32 %v1_fd50, 65280
  %v1_fd58 = and i32 %v1_fd4c, 65280
  store i32 %v1_fd58, i32* %r2.global-to-local, align 4
  %v3_fd5c = mul i32 %v1_fd4c, 16777216
  %v4_fd60 = udiv i32 %v1_fd4c, 16777216
  %v5_fd60 = or i32 %v3_fd54, %v4_fd60
  store i32 %v5_fd60, i32* %r1.global-to-local, align 4
  store i32 %v0_fcb8, i32* %r3.global-to-local, align 4
  %v4_fd68 = mul nuw nsw i32 %v1_fd58, 256
  %v5_fd68 = or i32 %v4_fd68, %v3_fd5c
  store i32 %v5_fd68, i32* %r0.global-to-local, align 4
  %v3_fd6c = load i32, i32* %v2_fd6c, align 4
  store i32 %v3_fd6c, i32* %r2.global-to-local, align 4
  %v2_fd70 = call i32 @llvm.bswap.i32(i32 %v1_fd4c)
  store i32 %v2_fd70, i32* %ip.global-to-local, align 4
  %v3_fd74 = icmp uge i32 %v2_fd70, %v3_fd6c
  store i1 %v3_fd74, i1* %cpsr_c.global-to-local, align 1
  %v9_fd74 = icmp eq i32 %v2_fd70, %v3_fd6c
  store i1 %v9_fd74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fd74, label %dec_label_pc_fd7c, label %dec_label_pc_fc4c

dec_label_pc_fd7c:                                ; preds = %dec_label_pc_fd2c
  %v0_fd7c = load i32, i32* @r4, align 4
  %v3_fd7c = icmp ugt i32 %v0_fd7c, 355
  store i1 %v3_fd7c, i1* %cpsr_c.global-to-local, align 1
  %v8_fd7c = icmp eq i32 %v0_fd7c, 356
  store i1 %v8_fd7c, i1* %cpsr_z.global-to-local, align 1
  %v6_fd80 = icmp slt i32 %v0_fd7c, 356
  br i1 %v6_fd80, label %dec_label_pc_fd84, label %dec_label_pc_fdf0

dec_label_pc_fd84:                                ; preds = %dec_label_pc_fd7c
  %v2_fd94 = load i32, i32* @global_var_1d250.142, align 4
  store i32 %v2_fd94, i32* %r1.global-to-local, align 4
  %v3_fd98 = mul i32 %v0_fd7c, 388
  store i32 %v3_fd98, i32* %r3.global-to-local, align 4
  %v2_fd9c = add i32 %v2_fd94, %v3_fd98
  store i32 %v2_fd9c, i32* @r0, align 4
  %v1_fda0 = add i32 %v2_fd9c, 12
  %v2_fda0 = inttoptr i32 %v1_fda0 to i32*
  %v3_fda0 = load i32, i32* %v2_fda0, align 4
  store i32 %v3_fda0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fda4 = icmp eq i32 %v3_fda0, 0
  store i1 %v2_fda4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fda4, label %dec_label_pc_fdd0, label %dec_label_pc_fdb0.preheader

dec_label_pc_fdb0.preheader:                      ; preds = %dec_label_pc_fd84
  %v2_fda8 = add i32 %v2_fd9c, 388
  store i32 %v2_fda8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fdb0

dec_label_pc_fdb0:                                ; preds = %dec_label_pc_fdb0.preheader, %dec_label_pc_fdbc
  %v0_fdbc = phi i32 [ %v2_fda8, %dec_label_pc_fdb0.preheader ], [ %v1_fdc8, %dec_label_pc_fdbc ]
  %v0_fdb0 = phi i32 [ %v0_fd7c, %dec_label_pc_fdb0.preheader ], [ %v1_fdb0, %dec_label_pc_fdbc ]
  %v1_fdb0 = add i32 %v0_fdb0, 1
  store i32 %v1_fdb0, i32* @r4, align 4
  %v7_fdb4 = icmp eq i32 %v1_fdb0, 356
  br i1 %v7_fdb4, label %dec_label_pc_fdf0.loopexit, label %dec_label_pc_fdbc

dec_label_pc_fdbc:                                ; preds = %dec_label_pc_fdb0
  store i32 %v0_fdbc, i32* @r0, align 4
  %v1_fdc0 = add i32 %v0_fdbc, 12
  %v2_fdc0 = inttoptr i32 %v1_fdc0 to i32*
  %v3_fdc0 = load i32, i32* %v2_fdc0, align 4
  %v2_fdc4 = icmp eq i32 %v3_fdc0, 0
  %v1_fdc8 = add i32 %v0_fdbc, 388
  store i32 %v1_fdc8, i32* %r3.global-to-local, align 4
  br i1 %v2_fdc4, label %dec_label_pc_fdd0.loopexit, label %dec_label_pc_fdb0

dec_label_pc_fdd0.loopexit:                       ; preds = %dec_label_pc_fdbc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fdd0

dec_label_pc_fdd0:                                ; preds = %dec_label_pc_fdd0.loopexit, %dec_label_pc_fd84
  %v1_fdd0 = phi i32 [ %v0_fdbc, %dec_label_pc_fdd0.loopexit ], [ %v2_fd9c, %dec_label_pc_fd84 ]
  %v2_fdd0 = add i32 %v1_fdd0, 16
  %v3_fdd0 = inttoptr i32 %v2_fdd0 to i32*
  store i32 %v3_fd6c, i32* %v3_fdd0, align 4
  store i32 %v4_fcc4, i32* %r1.global-to-local, align 4
  %v2_fdd8 = load i32, i32* %v1_fdd8, align 4
  store i32 %v2_fdd8, i32* %r2.global-to-local, align 4
  %v1_fddc = and i32 %v2_fdd8, 128
  %v2_fddc = icmp ne i32 %v1_fddc, 0
  store i1 %v2_fddc, i1* %cpsr_c.global-to-local, align 1
  %v3_fddc = sdiv i32 %v2_fdd8, 256
  store i32 %v3_fddc, i32* %r3.global-to-local, align 4
  %v1_fde0 = trunc i32 %v3_fddc to i8
  %v2_fde0 = load i32, i32* @r0, align 4
  %v3_fde0 = add i32 %v2_fde0, 21
  %v4_fde0 = inttoptr i32 %v3_fde0 to i8*
  store i8 %v1_fde0, i8* %v4_fde0, align 1
  %v0_fde4 = load i32, i32* %r2.global-to-local, align 4
  %v1_fde4 = trunc i32 %v0_fde4 to i8
  %v2_fde4 = load i32, i32* @r0, align 4
  %v3_fde4 = add i32 %v2_fde4, 20
  %v4_fde4 = inttoptr i32 %v3_fde4 to i8*
  store i8 %v1_fde4, i8* %v4_fde4, align 1
  %v0_fde8 = call i32 @function_f378()
  store i32 %v0_fde8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fc4c

dec_label_pc_fdf0.loopexit:                       ; preds = %dec_label_pc_fdb0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fdf0

dec_label_pc_fdf0:                                ; preds = %dec_label_pc_fd7c, %dec_label_pc_fc88, %dec_label_pc_fc4c, %dec_label_pc_fdf0.loopexit
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1672, i32* %ip.global-to-local, align 4
  %v2_fe08444 = load i32, i32* @sp, align 4
  %v3_fe08445 = add i32 %v2_fe08444, 1672
  %v4_fe08446 = inttoptr i32 %v3_fe08445 to i32*
  store i32 0, i32* %v4_fe08446, align 4
  br label %dec_label_pc_fdf8.dec_label_pc_fdf8_crit_edge

dec_label_pc_fdf8.dec_label_pc_fdf8_crit_edge:    ; preds = %dec_label_pc_fdf0, %dec_label_pc_fdf8.dec_label_pc_fdf8_crit_edge
  %v0_fdf8.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_fe08.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_fdfc = add i32 %v0_fdf8.pre, 4
  store i32 %v1_fdfc, i32* %r3.global-to-local, align 4
  %v1_fe00 = add i32 %v0_fdf8.pre, 1672
  store i32 %v1_fe00, i32* %ip.global-to-local, align 4
  %v7_fe04 = icmp eq i32 %v1_fdfc, 128
  %v2_fe08 = load i32, i32* @sp, align 4
  %v3_fe08 = add i32 %v2_fe08, %v1_fe00
  %v4_fe08 = inttoptr i32 %v3_fe08 to i32*
  store i32 %v0_fe08.pre, i32* %v4_fe08, align 4
  br i1 %v7_fe04, label %dec_label_pc_fe10, label %dec_label_pc_fdf8.dec_label_pc_fdf8_crit_edge

dec_label_pc_fe10:                                ; preds = %dec_label_pc_fdf8.dec_label_pc_fdf8_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_fe10 = load i32, i32* %r2.global-to-local, align 4
  %v1_fe18438 = add i32 %v0_fe10, 4
  store i32 %v1_fe18438, i32* %r3.global-to-local, align 4
  %v1_fe1c439 = add i32 %v0_fe10, 1544
  %v7_fe20440 = icmp eq i32 %v1_fe18438, 128
  %v2_fe24441 = load i32, i32* @sp, align 4
  %v3_fe24442 = add i32 %v2_fe24441, %v1_fe1c439
  %v4_fe24443 = inttoptr i32 %v3_fe24442 to i32*
  store i32 %v0_fe10, i32* %v4_fe24443, align 4
  br i1 %v7_fe20440, label %dec_label_pc_fe2c, label %dec_label_pc_fe14.dec_label_pc_fe14_crit_edge

dec_label_pc_fe14.dec_label_pc_fe14_crit_edge:    ; preds = %dec_label_pc_fe10, %dec_label_pc_fe14.dec_label_pc_fe14_crit_edge
  %v0_fe14.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_fe24.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_fe18 = add i32 %v0_fe14.pre, 4
  store i32 %v1_fe18, i32* %r3.global-to-local, align 4
  %v1_fe1c = add i32 %v0_fe14.pre, 1544
  %v7_fe20 = icmp eq i32 %v1_fe18, 128
  %v2_fe24 = load i32, i32* @sp, align 4
  %v3_fe24 = add i32 %v2_fe24, %v1_fe1c
  %v4_fe24 = inttoptr i32 %v3_fe24 to i32*
  store i32 %v0_fe24.pre, i32* %v4_fe24, align 4
  br i1 %v7_fe20, label %dec_label_pc_fe2c, label %dec_label_pc_fe14.dec_label_pc_fe14_crit_edge

dec_label_pc_fe2c:                                ; preds = %dec_label_pc_fe14.dec_label_pc_fe14_crit_edge, %dec_label_pc_fe10
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_fe2c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_fe2c, i32* @r6, align 4
  store i32 %v0_fe2c, i32* @r5, align 4
  store i32 %v0_fe2c, i32* @r7, align 4
  store i32 %v0_fe2c, i32* %stack_var_-52, align 4
  br label %dec_label_pc_fea4

dec_label_pc_fe40:                                ; preds = %dec_label_pc_fed0, %dec_label_pc_fea4
  %storemerge250 = phi i32 [ 30, %dec_label_pc_fea4 ], [ 5, %dec_label_pc_fed0 ]
  store i32 %storemerge250, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d1ec.130 to i32), i32* %r2.global-to-local, align 4
  %v2_fe44 = load i32, i32* @global_var_1d1ec.130, align 4
  store i32 %v2_fe44, i32* %r3.global-to-local, align 4
  %v1_fe48 = add i32 %v2_febc, 8
  %v2_fe48 = inttoptr i32 %v1_fe48 to i32*
  %v3_fe48 = load i32, i32* %v2_fe48, align 4
  store i32 %v3_fe48, i32* %r2.global-to-local, align 4
  %v2_fe4c = sub i32 %v2_fe44, %v3_fe48
  store i32 %v2_fe4c, i32* %r3.global-to-local, align 4
  %v3_fe50 = icmp uge i32 %v2_fe4c, %storemerge250
  store i1 %v3_fe50, i1* %cpsr_c.global-to-local, align 1
  %v9_fe50 = icmp eq i32 %v2_fe4c, %storemerge250
  store i1 %v9_fe50, i1* %cpsr_z.global-to-local, align 1
  %v2_fe54 = xor i1 %v9_fe50, true
  %v3_fe54 = and i1 %v3_fe50, %v2_fe54
  br i1 %v3_fe54, label %dec_label_pc_ff24, label %dec_label_pc_fe58

dec_label_pc_fe58:                                ; preds = %dec_label_pc_fe40
  store i1 %v2_fec4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_fec4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fec4, label %dec_label_pc_fef4, label %dec_label_pc_fe60

dec_label_pc_fe60:                                ; preds = %dec_label_pc_fe58
  %v1_fe60 = add i32 %v2_febc, 4
  %v2_fe60 = inttoptr i32 %v1_fe60 to i32*
  %v3_fe60 = load i32, i32* %v2_fe60, align 4
  store i32 %v3_fe60, i32* %ip.global-to-local, align 4
  %v3_fe64 = udiv i32 %v3_fe60, 32
  %v2_fe68 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_fe68, i32* %r1.global-to-local, align 4
  %v3_fe6c = mul nuw nsw i32 %v3_fe64, 4
  %v2_fe70 = add i32 %v3_fe6c, %v2_fe68
  store i32 %v2_fe70, i32* %r3.global-to-local, align 4
  %v1_fe74 = add i32 %v2_fe70, -184
  %v2_fe74 = inttoptr i32 %v1_fe74 to i32*
  %v3_fe74 = load i32, i32* %v2_fe74, align 4
  %v1_fe78 = urem i32 %v3_fe60, 32
  store i32 %v1_fe78, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_fe80 = shl i32 1, %v1_fe78
  %v8_fe80 = or i32 %v3_fe74, %v7_fe80
  store i32 %v8_fe80, i32* %r2.global-to-local, align 4
  store i32 %v8_fe80, i32* %v2_fe74, align 4
  %v0_fe88 = load i32, i32* @r6, align 4
  %v1_fe88 = load i32, i32* %ip.global-to-local, align 4
  %v2_fe88 = sub i32 %v0_fe88, %v1_fe88
  %v3_fe88 = icmp uge i32 %v0_fe88, %v1_fe88
  store i1 %v3_fe88, i1* %cpsr_c.global-to-local, align 1
  %v4_fe88 = xor i32 %v1_fe88, %v0_fe88
  %v5_fe88 = xor i32 %v2_fe88, %v0_fe88
  %v6_fe88 = and i32 %v5_fe88, %v4_fe88
  %v7_fe88 = icmp slt i32 %v6_fe88, 0
  %v8_fe88 = icmp slt i32 %v2_fe88, 0
  %v9_fe88 = icmp eq i32 %v0_fe88, %v1_fe88
  store i1 %v9_fe88, i1* %cpsr_z.global-to-local, align 1
  %v2_fe8c = xor i1 %v8_fe88, %v7_fe88
  br i1 %v2_fe8c, label %bb340, label %bb341

bb340:                                            ; preds = %dec_label_pc_fe60
  store i32 %v1_fe88, i32* @r6, align 4
  br label %bb341

bb341:                                            ; preds = %dec_label_pc_fed0, %dec_label_pc_ff64, %dec_label_pc_ff58, %bb343, %dec_label_pc_fe60, %bb340
  %stack_var_-1868.0 = phi i32 [ %stack_var_-1868.2, %bb343 ], [ %stack_var_-1868.1, %dec_label_pc_ff64 ], [ %stack_var_-1868.1, %dec_label_pc_ff58 ], [ %stack_var_-1868.1, %bb340 ], [ %stack_var_-1868.1, %dec_label_pc_fe60 ], [ %stack_var_-1868.1, %dec_label_pc_fed0 ]
  %stack_var_-1872.2 = phi i32 [ %stack_var_-1872.4, %bb343 ], [ %stack_var_-1872.3, %dec_label_pc_ff64 ], [ %stack_var_-1872.3, %dec_label_pc_ff58 ], [ %stack_var_-1872.3, %bb340 ], [ %stack_var_-1872.3, %dec_label_pc_fe60 ], [ %stack_var_-1872.3, %dec_label_pc_fed0 ]
  %stack_var_-1884.1 = phi i8* [ %stack_var_-1884.3, %bb343 ], [ %stack_var_-1884.2, %dec_label_pc_ff64 ], [ %stack_var_-1884.2, %dec_label_pc_ff58 ], [ %stack_var_-1884.2, %bb340 ], [ %stack_var_-1884.2, %dec_label_pc_fe60 ], [ %stack_var_-1884.2, %dec_label_pc_fed0 ]
  %stack_var_-1880.1 = phi i32 [ %stack_var_-1880.3, %bb343 ], [ %stack_var_-1880.2, %dec_label_pc_ff64 ], [ %stack_var_-1880.2, %dec_label_pc_ff58 ], [ %stack_var_-1880.2, %bb340 ], [ %stack_var_-1880.2, %dec_label_pc_fe60 ], [ %stack_var_-1880.2, %dec_label_pc_fed0 ]
  %stack_var_-1876.1 = phi i8 [ %stack_var_-1876.3, %bb343 ], [ %stack_var_-1876.2, %dec_label_pc_ff64 ], [ %stack_var_-1876.2, %dec_label_pc_ff58 ], [ %stack_var_-1876.2, %bb340 ], [ %stack_var_-1876.2, %dec_label_pc_fe60 ], [ %stack_var_-1876.2, %dec_label_pc_fed0 ]
  %v3_fe90 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_fe90, i32* %r3.global-to-local, align 4
  %v1_fe94 = add i32 %v3_fe90, 1
  store i32 %v1_fe94, i32* %r2.global-to-local, align 4
  %v3_fe98 = icmp ugt i32 %v1_fe94, 355
  store i1 %v3_fe98, i1* %cpsr_c.global-to-local, align 1
  %v8_fe98 = icmp eq i32 %v1_fe94, 356
  store i1 %v8_fe98, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_fe94, i32* %stack_var_-52, align 4
  %v6_fea0 = icmp slt i32 %v1_fe94, 356
  br i1 %v6_fea0, label %dec_label_pc_fea4, label %dec_label_pc_ff70

dec_label_pc_fea4:                                ; preds = %bb341, %dec_label_pc_fe2c
  %v1_feb0 = phi i32 [ %v1_fe94, %bb341 ], [ %v0_fe2c, %dec_label_pc_fe2c ]
  %stack_var_-1868.1 = phi i32 [ %stack_var_-1868.0, %bb341 ], [ %v0_fc40, %dec_label_pc_fe2c ]
  %stack_var_-1872.3 = phi i32 [ %stack_var_-1872.2, %bb341 ], [ %stack_var_-1872.1, %dec_label_pc_fe2c ]
  %stack_var_-1884.2 = phi i8* [ %stack_var_-1884.1, %bb341 ], [ %stack_var_-1884.0, %dec_label_pc_fe2c ]
  %stack_var_-1880.2 = phi i32 [ %stack_var_-1880.1, %bb341 ], [ %v0_fcb8, %dec_label_pc_fe2c ]
  %stack_var_-1876.2 = phi i8 [ %stack_var_-1876.1, %bb341 ], [ %stack_var_-1876.0, %dec_label_pc_fe2c ]
  store i32 ptrtoint (i32* @global_var_1d250.142 to i32), i32* %r1.global-to-local, align 4
  %v2_feb4 = load i32, i32* @global_var_1d250.142, align 4
  store i32 %v2_feb4, i32* %r2.global-to-local, align 4
  %v3_feb8 = mul i32 %v1_feb0, 388
  store i32 %v3_feb8, i32* %r3.global-to-local, align 4
  %v2_febc = add i32 %v2_feb4, %v3_feb8
  store i32 %v2_febc, i32* @r4, align 4
  %v1_fec0 = add i32 %v2_febc, 12
  %v2_fec0 = inttoptr i32 %v1_fec0 to i32*
  %v3_fec0 = load i32, i32* %v2_fec0, align 4
  store i32 %v3_fec0, i32* %ip.global-to-local, align 4
  %v2_fec4 = icmp ne i32 %v3_fec0, 0
  store i1 %v2_fec4, i1* %cpsr_c.global-to-local, align 1
  %v7_fec4 = icmp eq i32 %v3_fec0, 1
  store i1 %v7_fec4, i1* %cpsr_z.global-to-local, align 1
  %v2_fec8 = xor i1 %v7_fec4, true
  %v3_fec8 = and i1 %v2_fec4, %v2_fec8
  br i1 %v3_fec8, label %dec_label_pc_fe40, label %dec_label_pc_fed0

dec_label_pc_fed0:                                ; preds = %dec_label_pc_fea4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fed0 = icmp eq i32 %v3_fec0, 0
  store i1 %v2_fed0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fed0, label %bb341, label %dec_label_pc_fe40

dec_label_pc_fee0:                                ; preds = %dec_label_pc_f6d8
  store i32 ptrtoint (i32* @global_var_1d254.144 to i32), i32* %r1.global-to-local, align 4
  %v2_fee4 = load i32, i32* @global_var_1d254.144, align 4
  store i32 %v2_fee4, i32* %r0.global-to-local, align 4
  %v1_fee8 = call i32 @function_11dfc(i32 %v2_fee4)
  store i32 %v1_fee8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_feec

dec_label_pc_feec:                                ; preds = %dec_label_pc_f6b0, %dec_label_pc_fee0
  %v0_feec = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_feec, i32* %r0.global-to-local, align 4
  %v1_fef0 = call i32 @function_13194(i32 %v0_feec)
  store i32 %v1_fef0, i32* %r0.global-to-local, align 4
  %v0_fef4.pre = load i32, i32* @r4, align 4
  %v1_ff10.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_fef4

dec_label_pc_fef4:                                ; preds = %dec_label_pc_fe58, %dec_label_pc_feec
  %v1_ff10 = phi i32 [ %v1_ff10.pre, %dec_label_pc_feec ], [ 1, %dec_label_pc_fe58 ]
  %v0_fef4 = phi i32 [ %v0_fef4.pre, %dec_label_pc_feec ], [ %v2_febc, %dec_label_pc_fe58 ]
  %stack_var_-1868.2 = phi i32 [ %tmp256, %dec_label_pc_feec ], [ %stack_var_-1868.1, %dec_label_pc_fe58 ]
  %stack_var_-1872.4 = phi i32 [ %tmp263, %dec_label_pc_feec ], [ %stack_var_-1872.3, %dec_label_pc_fe58 ]
  %stack_var_-1884.3 = phi i8* [ %tmp264, %dec_label_pc_feec ], [ %stack_var_-1884.2, %dec_label_pc_fe58 ]
  %stack_var_-1880.3 = phi i32 [ %tmp265, %dec_label_pc_feec ], [ %stack_var_-1880.2, %dec_label_pc_fe58 ]
  %stack_var_-1876.3 = phi i8 [ %tmp266, %dec_label_pc_feec ], [ %stack_var_-1876.2, %dec_label_pc_fe58 ]
  %v1_fef4 = add i32 %v0_fef4, 4
  %v2_fef4 = inttoptr i32 %v1_fef4 to i32*
  %v3_fef4 = load i32, i32* %v2_fef4, align 4
  store i32 %v3_fef4, i32* %r0.global-to-local, align 4
  %v3_fef8 = udiv i32 %v3_fef4, 32
  %v3_fefc = mul nuw nsw i32 %v3_fef8, 4
  %v2_ff00 = ptrtoint i32* %stack_var_-36 to i32
  %v2_ff04 = add i32 %v3_fefc, %v2_ff00
  store i32 %v2_ff04, i32* %r3.global-to-local, align 4
  %v1_ff08 = add i32 %v2_ff04, -312
  %v2_ff08 = inttoptr i32 %v1_ff08 to i32*
  %v3_ff08 = load i32, i32* %v2_ff08, align 4
  %v1_ff0c = urem i32 %v3_fef4, 32
  store i32 %v1_ff0c, i32* %r1.global-to-local, align 4
  %v7_ff10 = shl i32 %v1_ff10, %v1_ff0c
  %v8_ff10 = or i32 %v3_ff08, %v7_ff10
  store i32 %v8_ff10, i32* %r2.global-to-local, align 4
  %v0_ff14 = load i32, i32* @r5, align 4
  %v2_ff14 = sub i32 %v0_ff14, %v3_fef4
  %v3_ff14 = icmp uge i32 %v0_ff14, %v3_fef4
  store i1 %v3_ff14, i1* %cpsr_c.global-to-local, align 1
  %v4_ff14 = xor i32 %v0_ff14, %v3_fef4
  %v5_ff14 = xor i32 %v2_ff14, %v0_ff14
  %v6_ff14 = and i32 %v5_ff14, %v4_ff14
  %v7_ff14 = icmp slt i32 %v6_ff14, 0
  %v8_ff14 = icmp slt i32 %v2_ff14, 0
  %v9_ff14 = icmp eq i32 %v0_ff14, %v3_fef4
  store i1 %v9_ff14, i1* %cpsr_z.global-to-local, align 1
  %v2_ff18 = xor i1 %v8_ff14, %v7_ff14
  br i1 %v2_ff18, label %bb342, label %bb343

bb342:                                            ; preds = %dec_label_pc_fef4
  store i32 %v3_fef4, i32* @r5, align 4
  br label %bb343

bb343:                                            ; preds = %dec_label_pc_fef4, %bb342
  store i32 %v8_ff10, i32* %v2_ff08, align 4
  br label %bb341

dec_label_pc_ff24:                                ; preds = %dec_label_pc_fe40
  %v1_ff24 = add i32 %v2_febc, 4
  %v2_ff24 = inttoptr i32 %v1_ff24 to i32*
  %v3_ff24 = load i32, i32* %v2_ff24, align 4
  store i32 %v3_ff24, i32* %r0.global-to-local, align 4
  %v1_ff28 = call i32 @function_11dfc(i32 %v3_ff24)
  store i32 %v1_ff28, i32* %r0.global-to-local, align 4
  %v0_ff2c = load i32, i32* @r4, align 4
  %v1_ff2c = add i32 %v0_ff2c, 12
  %v2_ff2c = inttoptr i32 %v1_ff2c to i32*
  %v3_ff2c = load i32, i32* %v2_ff2c, align 4
  store i32 %v3_ff2c, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ff34 = icmp ugt i32 %v3_ff2c, 1
  store i1 %v2_ff34, i1* %cpsr_c.global-to-local, align 1
  %v7_ff34 = icmp eq i32 %v3_ff2c, 2
  store i1 %v7_ff34, i1* %cpsr_z.global-to-local, align 1
  %v2_ff38 = add i32 %v0_ff2c, 4
  %v3_ff38 = inttoptr i32 %v2_ff38 to i32*
  store i32 -1, i32* %v3_ff38, align 4
  %v2_ff3c = xor i1 %v2_ff34, true
  %v3_ff3c = or i1 %v7_ff34, %v2_ff3c
  br i1 %v3_ff3c, label %dec_label_pc_ff64, label %dec_label_pc_ff40

dec_label_pc_ff40:                                ; preds = %dec_label_pc_ff24
  %v0_ff40 = load i32, i32* @r4, align 4
  %v1_ff40 = add i32 %v0_ff40, 384
  %v2_ff40 = inttoptr i32 %v1_ff40 to i8*
  %v3_ff40 = load i8, i8* %v2_ff40, align 1
  %v4_ff40 = zext i8 %v3_ff40 to i32
  %v1_ff44 = add nuw nsw i32 %v4_ff40, 1
  %v1_ff48 = urem i32 %v1_ff44, 256
  store i32 %v1_ff48, i32* %r3.global-to-local, align 4
  %v2_ff4c = icmp ugt i32 %v1_ff48, 9
  store i1 %v2_ff4c, i1* %cpsr_c.global-to-local, align 1
  %v7_ff4c = icmp eq i32 %v1_ff48, 10
  store i1 %v7_ff4c, i1* %cpsr_z.global-to-local, align 1
  %v1_ff50 = trunc i32 %v1_ff44 to i8
  store i8 %v1_ff50, i8* %v2_ff40, align 1
  %v0_ff54 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ff54, label %dec_label_pc_ff64, label %dec_label_pc_ff58

dec_label_pc_ff58:                                ; preds = %dec_label_pc_ff40
  %v0_ff58 = load i32, i32* @r4, align 4
  store i32 %v0_ff58, i32* @r0, align 4
  %v0_ff5c = call i32 @function_f378()
  store i32 %v0_ff5c, i32* %r0.global-to-local, align 4
  br label %bb341

dec_label_pc_ff64:                                ; preds = %dec_label_pc_ff40, %dec_label_pc_ff24
  %v0_ff64 = load i32, i32* @r7, align 4
  %v1_ff64 = load i32, i32* @r4, align 4
  %v2_ff64 = add i32 %v1_ff64, 12
  %v3_ff64 = inttoptr i32 %v2_ff64 to i32*
  store i32 %v0_ff64, i32* %v3_ff64, align 4
  %v0_ff68 = load i32, i32* @r7, align 4
  %v1_ff68 = trunc i32 %v0_ff68 to i8
  %v2_ff68 = load i32, i32* @r4, align 4
  %v3_ff68 = add i32 %v2_ff68, 384
  %v4_ff68 = inttoptr i32 %v3_ff68 to i8*
  store i8 %v1_ff68, i8* %v4_ff68, align 1
  br label %bb341

dec_label_pc_ff70:                                ; preds = %bb341
  store i32 1, i32* %stack_var_-64, align 4
  %v0_ff78 = load i32, i32* @r6, align 4
  %v1_ff78 = load i32, i32* @r5, align 4
  %v2_ff78 = sub i32 %v0_ff78, %v1_ff78
  %v3_ff78 = icmp uge i32 %v0_ff78, %v1_ff78
  store i1 %v3_ff78, i1* %cpsr_c.global-to-local, align 1
  %v4_ff78 = xor i32 %v1_ff78, %v0_ff78
  %v5_ff78 = xor i32 %v2_ff78, %v0_ff78
  %v6_ff78 = and i32 %v5_ff78, %v4_ff78
  %v7_ff78 = icmp slt i32 %v6_ff78, 0
  %v8_ff78 = icmp slt i32 %v2_ff78, 0
  %v9_ff78 = icmp eq i32 %v0_ff78, %v1_ff78
  store i1 %v9_ff78, i1* %cpsr_z.global-to-local, align 1
  %v2_ff7c = xor i1 %v8_ff78, %v7_ff78
  %v1_ff78.v0_ff78 = select i1 %v2_ff7c, i32 %v1_ff78, i32 %v0_ff78
  %v2_ff90 = ptrtoint i32* %stack_var_-220 to i32
  store i32 %v2_ff90, i32* %r1.global-to-local, align 4
  %v2_ff94 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_ff94, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ff9c = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_ff9c, i32* %ip.global-to-local, align 4
  %v1_ffa0 = add i32 %v1_ff78.v0_ff78, 1
  store i32 %v1_ffa0, i32* %r0.global-to-local, align 4
  %v5_ffac = call i32 @function_1201c(i32 %v1_ffa0, i32 %v2_ff90, i32 %v2_ff94, i32 0, i32 %v2_ff9c)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ffb4 = call i32 @function_120cc(i32* null)
  store i32 %v2_ffb4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v2_ffb4, i32* @global_var_1d1ec.130, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_10038 = ptrtoint i32* %stack_var_-36 to i32
  %v2_101e0 = inttoptr i32 %stack_var_-1868.0 to i32*
  %v2_10288 = ptrtoint i32* %stack_var_-41 to i32
  %v2_109fc = ptrtoint i32* %stack_var_-84 to i32
  %v2_10a04 = ptrtoint i32* %stack_var_-73 to i32
  %v2_10130 = ptrtoint i32* %stack_var_-56 to i32
  %v2_1062c = ptrtoint i32* %stack_var_-48 to i32
  %v2_10c6c = ptrtoint i32* %stack_var_-92 to i32
  %v3_10c74 = bitcast i32* %stack_var_-92 to %sockaddr*
  %v2_10ccc = ptrtoint i32* %stack_var_-38 to i32
  br label %dec_label_pc_10008

dec_label_pc_ffd0:                                ; preds = %dec_label_pc_10030, %dec_label_pc_10bac
  %v0_ffe4 = phi i32 [ %v3_10024, %dec_label_pc_10030 ], [ %v0_ffd0.pre, %dec_label_pc_10bac ]
  %v3_ffd0 = udiv i32 %v0_ffe4, 32
  %v3_ffd4 = mul nuw nsw i32 %v3_ffd0, 4
  store i32 %v2_10038, i32* @lr, align 4
  %v2_ffdc = add i32 %v3_ffd4, %v2_10038
  store i32 %v2_ffdc, i32* %r3.global-to-local, align 4
  %v1_ffe0 = add i32 %v2_ffdc, -184
  %v2_ffe0 = inttoptr i32 %v1_ffe0 to i32*
  %v3_ffe0 = load i32, i32* %v2_ffe0, align 4
  %v1_ffe4 = urem i32 %v0_ffe4, 32
  store i32 %v1_ffe4, i32* %r1.global-to-local, align 4
  %v2_ffe8 = add nsw i32 %v1_ffe4, -1
  %v3_ffe8 = shl i32 1, %v2_ffe8
  %v4_ffe8 = and i32 %v3_ffe8, %v3_ffe0
  %v5_ffe8 = icmp ne i32 %v4_ffe8, 0
  store i1 %v5_ffe8, i1* %cpsr_c.global-to-local, align 1
  %v6_ffe8 = lshr i32 %v3_ffe0, %v1_ffe4
  store i32 %v6_ffe8, i32* %r2.global-to-local, align 4
  %v1_ffec = urem i32 %v6_ffe8, 2
  %v2_ffec = icmp eq i32 %v1_ffec, 0
  store i1 %v2_ffec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ffec, label %dec_label_pc_fff4, label %dec_label_pc_101bc.preheader

dec_label_pc_101bc.preheader:                     ; preds = %dec_label_pc_ffd0
  %v0_101bc123 = load i32, i32* @r6, align 4
  %v1_101bc124 = add i32 %v0_101bc123, 12
  %v2_101bc125 = inttoptr i32 %v1_101bc124 to i32*
  %v3_101bc126 = load i32, i32* %v2_101bc125, align 4
  store i32 %v3_101bc126, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_101c0122128 = icmp eq i32 %v3_101bc126, 0
  store i1 %v2_101c0122128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_101c0122128, label %dec_label_pc_fff4, label %dec_label_pc_101c8.lr.ph

dec_label_pc_fff4:                                ; preds = %dec_label_pc_101bc.loopexit, %dec_label_pc_101c0.backedge, %dec_label_pc_101bc.preheader, %dec_label_pc_ffd0, %.thread241, %dec_label_pc_10af8, %dec_label_pc_10008, %dec_label_pc_10bd0, %dec_label_pc_10b3c
  %v3_fff4 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_fff4, i32* %r3.global-to-local, align 4
  %v1_fff8 = add i32 %v3_fff4, 1
  store i32 %v1_fff8, i32* %r2.global-to-local, align 4
  %v3_fffc = icmp ugt i32 %v1_fff8, 355
  store i1 %v3_fffc, i1* %cpsr_c.global-to-local, align 1
  %v8_fffc = icmp eq i32 %v1_fff8, 356
  store i1 %v8_fffc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_fff8, i32* %stack_var_-52, align 4
  %v6_10004 = icmp slt i32 %v1_fff8, 356
  br i1 %v6_10004, label %dec_label_pc_10008, label %dec_label_pc_f904

dec_label_pc_10008:                               ; preds = %dec_label_pc_fff4, %dec_label_pc_ff70
  %v1_10014 = phi i32 [ %v1_fff8, %dec_label_pc_fff4 ], [ 0, %dec_label_pc_ff70 ]
  store i32 ptrtoint (i32* @global_var_1d250.142 to i32), i32* %ip.global-to-local, align 4
  %v2_10018 = load i32, i32* @global_var_1d250.142, align 4
  store i32 %v2_10018, i32* %r2.global-to-local, align 4
  %v3_1001c = mul i32 %v1_10014, 388
  store i32 %v3_1001c, i32* %r3.global-to-local, align 4
  %v2_10020 = add i32 %v2_10018, %v3_1001c
  store i32 %v2_10020, i32* @r6, align 4
  %v1_10024 = add i32 %v2_10020, 4
  %v2_10024 = inttoptr i32 %v1_10024 to i32*
  %v3_10024 = load i32, i32* %v2_10024, align 4
  store i32 %v3_10024, i32* @r4, align 4
  %v2_10028 = icmp eq i32 %v3_10024, -1
  store i1 %v2_10028, i1* %cpsr_c.global-to-local, align 1
  %v7_10028 = icmp eq i32 %v3_10024, -1
  store i1 %v7_10028, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10028, label %dec_label_pc_fff4, label %dec_label_pc_10030

dec_label_pc_10030:                               ; preds = %dec_label_pc_10008
  %v3_10030 = udiv i32 %v3_10024, 32
  %v3_10034 = mul nuw nsw i32 %v3_10030, 4
  %v2_1003c = add i32 %v3_10034, %v2_10038
  store i32 %v2_1003c, i32* %r3.global-to-local, align 4
  %v1_10040 = add i32 %v2_1003c, -312
  %v2_10040 = inttoptr i32 %v1_10040 to i32*
  %v3_10040 = load i32, i32* %v2_10040, align 4
  %v1_10044 = urem i32 %v3_10024, 32
  store i32 %v1_10044, i32* %r1.global-to-local, align 4
  %v2_10048 = add nsw i32 %v1_10044, -1
  %v3_10048 = shl i32 1, %v2_10048
  %v4_10048 = and i32 %v3_10040, %v3_10048
  %v5_10048 = icmp ne i32 %v4_10048, 0
  store i1 %v5_10048, i1* %cpsr_c.global-to-local, align 1
  %v6_10048 = lshr i32 %v3_10040, %v1_10044
  store i32 %v6_10048, i32* %r2.global-to-local, align 4
  %v1_1004c = urem i32 %v6_10048, 2
  %v2_1004c = icmp eq i32 %v1_1004c, 0
  store i1 %v2_1004c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1004c, label %dec_label_pc_ffd0, label %dec_label_pc_10054

dec_label_pc_10054:                               ; preds = %dec_label_pc_10030
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  store i32 %v2_1062c, i32* %r3.global-to-local, align 4
  store i32 %v2_10130, i32* %ip.global-to-local, align 4
  store i32 %v3_10024, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v6_10084 = call i32 @function_125c0(i32 %v3_10024, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_10130)
  %v3_10088 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10088, i32* %r3.global-to-local, align 4
  %v2_1008c = or i32 %v3_10088, %v6_10084
  store i32 %v2_1008c, i32* %r0.global-to-local, align 4
  %v4_1008c = icmp eq i32 %v2_1008c, 0
  store i1 %v4_1008c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_1008c, label %dec_label_pc_10094, label %dec_label_pc_10bd0

dec_label_pc_10094:                               ; preds = %dec_label_pc_10054
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_10098 = load i32, i32* @r6, align 4
  %v2_10098 = add i32 %v1_10098, 12
  %v3_10098 = inttoptr i32 %v2_10098 to i32*
  store i32 2, i32* %v3_10098, align 4
  %v0_1009c = call i32 @function_eb90()
  store i32 %v0_1009c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1d1e8.136 to i32), i32* %r3.global-to-local, align 4
  %v3_100a4 = load i8, i8* @global_var_1d1e9.137, align 1
  %v4_100a4 = zext i8 %v3_100a4 to i32
  store i32 %v4_100a4, i32* %r2.global-to-local, align 4
  %v2_100a8 = load i8, i8* bitcast (i8** @global_var_1d1e8.136 to i8*), align 4
  %v3_100a8 = zext i8 %v2_100a8 to i32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_100ac = mul nuw nsw i32 %v4_100a4, 256
  %v5_100ac = or i32 %v3_100a8, %v4_100ac
  store i32 %v5_100ac, i32* %r1.global-to-local, align 4
  %v2_100b0 = call i32 @function_11b84(i32 %v0_1009c, i32 %v5_100ac)
  store i32 ptrtoint (i32* @global_var_1d1b8.132 to i32), i32* %r3.global-to-local, align 4
  %v2_100b8 = load i32, i32* @global_var_1d1b8.132, align 4
  %v1_100c0 = load i32, i32* @r5, align 4
  %v9_100c0 = icmp eq i32 %v2_100b8, %v1_100c0
  store i1 %v9_100c0, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_100c4 = urem i32 %v2_100b0, 65536
  store i32 %v3_100c4, i32* %r0.global-to-local, align 4
  %v7_100c8 = icmp sgt i32 %v2_100b8, %v1_100c0
  br i1 %v7_100c8, label %dec_label_pc_100cc, label %dec_label_pc_10ba8

dec_label_pc_100cc:                               ; preds = %dec_label_pc_10094
  %v2_100d0 = load i32, i32* @global_var_1d1e4.134, align 4
  store i32 %v2_100d0, i32* %r3.global-to-local, align 4
  store i32 %v1_100c0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_100ec

dec_label_pc_100dc:                               ; preds = %dec_label_pc_10104, %dec_label_pc_100ec
  %v1_100dc = add i32 %v0_100dc, 1
  store i32 %v1_100dc, i32* %ip.global-to-local, align 4
  %v3_100e0 = icmp uge i32 %v1_100dc, %v2_100b8
  store i1 %v3_100e0, i1* %cpsr_c.global-to-local, align 1
  %v9_100e0 = icmp eq i32 %v1_100dc, %v2_100b8
  store i1 %v9_100e0, i1* %cpsr_z.global-to-local, align 1
  %v1_100e4 = add i32 %v0_100e4, 16
  store i32 %v1_100e4, i32* %r3.global-to-local, align 4
  br i1 %v9_100e0, label %dec_label_pc_10ba8, label %dec_label_pc_100ec

dec_label_pc_100ec:                               ; preds = %dec_label_pc_100dc, %dec_label_pc_100cc
  %v0_100dc = phi i32 [ %v1_100dc, %dec_label_pc_100dc ], [ %v1_100c0, %dec_label_pc_100cc ]
  %v0_100e4 = phi i32 [ %v1_100e4, %dec_label_pc_100dc ], [ %v2_100d0, %dec_label_pc_100cc ]
  store i32 %v0_100e4, i32* %r1.global-to-local, align 4
  %v1_100f0 = add i32 %v0_100e4, 9
  %v2_100f0 = inttoptr i32 %v1_100f0 to i8*
  %v3_100f0 = load i8, i8* %v2_100f0, align 1
  %v4_100f0 = zext i8 %v3_100f0 to i32
  store i32 %v4_100f0, i32* %r2.global-to-local, align 4
  %v1_100f4 = add i32 %v0_100e4, 8
  %v2_100f4 = inttoptr i32 %v1_100f4 to i8*
  %v3_100f4 = load i8, i8* %v2_100f4, align 1
  %v4_100f4 = zext i8 %v3_100f4 to i32
  %v4_100f8 = mul nuw nsw i32 %v4_100f0, 256
  %v5_100f8 = or i32 %v4_100f4, %v4_100f8
  store i32 %v5_100f8, i32* %r3.global-to-local, align 4
  %v3_100fc = icmp uge i32 %v5_100f8, %v3_100c4
  store i1 %v3_100fc, i1* %cpsr_c.global-to-local, align 1
  %v9_100fc = icmp eq i32 %v5_100f8, %v3_100c4
  store i1 %v9_100fc, i1* %cpsr_z.global-to-local, align 1
  %v2_10100 = xor i1 %v9_100fc, true
  %v3_10100 = and i1 %v3_100fc, %v2_10100
  br i1 %v3_10100, label %dec_label_pc_100dc, label %dec_label_pc_10104

dec_label_pc_10104:                               ; preds = %dec_label_pc_100ec
  %v1_10104 = add i32 %v0_100e4, 10
  %v2_10104 = inttoptr i32 %v1_10104 to i8*
  %v3_10104 = load i8, i8* %v2_10104, align 1
  %v4_10104 = zext i8 %v3_10104 to i32
  store i32 %v4_10104, i32* %r3.global-to-local, align 4
  %v1_10108 = add i32 %v0_100e4, 11
  %v2_10108 = inttoptr i32 %v1_10108 to i8*
  %v3_10108 = load i8, i8* %v2_10108, align 1
  %v4_10108 = zext i8 %v3_10108 to i32
  store i32 %v4_10108, i32* %r2.global-to-local, align 4
  %v4_1010c = mul nuw nsw i32 %v4_10108, 256
  %v5_1010c = or i32 %v4_1010c, %v4_10104
  store i32 %v5_1010c, i32* %r3.global-to-local, align 4
  %v3_10110 = icmp uge i32 %v5_1010c, %v3_100c4
  store i1 %v3_10110, i1* %cpsr_c.global-to-local, align 1
  %v9_10110 = icmp eq i32 %v5_1010c, %v3_100c4
  store i1 %v9_10110, i1* %cpsr_z.global-to-local, align 1
  %v2_10114 = xor i1 %v3_10110, true
  %v3_10114 = or i1 %v9_10110, %v2_10114
  br i1 %v3_10114, label %dec_label_pc_100dc, label %dec_label_pc_10bac

dec_label_pc_1011c:                               ; preds = %dec_label_pc_1038c, %dec_label_pc_10360, %dec_label_pc_103a8
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_10120 = call i32 @function_10e30(i32 31)
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_10128 = call i32 @function_10e30(i32 32)
  store i32 %v2_10130, i32* %r1.global-to-local, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v3_10138 = call i32 @function_10d4c(i32 31, i32* nonnull %stack_var_-56)
  store i32 %v3_10138, i32* @r4, align 4
  store i32 %v2_10130, i32* %r1.global-to-local, align 4
  store i32 32, i32* %r0.global-to-local, align 4
  %v3_1014c = call i32 @function_10d4c(i32 32, i32* nonnull %stack_var_-56)
  %v3_10150 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_1014c, i32* @r5, align 4
  %v0_10158 = load i32, i32* @r4, align 4
  store i32 %v0_10158, i32* %r2.global-to-local, align 4
  %v1_1015c = add i32 %v3_10150, -1
  store i32 %v1_1015c, i32* %r3.global-to-local, align 4
  %v0_10160 = load i32, i32* @sb, align 4
  store i32 %v0_10160, i32* %r0.global-to-local, align 4
  %v0_10164 = load i32, i32* @r6, align 4
  %v1_10164 = add i32 %v0_10164, 24
  %v2_10164 = inttoptr i32 %v1_10164 to i32*
  %v3_10164 = load i32, i32* %v2_10164, align 4
  store i32 %v3_10164, i32* %r1.global-to-local, align 4
  %v4_10168 = call i32 @function_115bc(i32 %v0_10160, i32 %v3_10164, i32 %v0_10158, i32 %v1_1015c)
  store i32 %v4_10168, i32* %r0.global-to-local, align 4
  %v2_1016c = icmp eq i32 %v4_10168, -1
  store i1 %v2_1016c, i1* %cpsr_c.global-to-local, align 1
  %v7_1016c = icmp eq i32 %v4_10168, -1
  store i1 %v7_1016c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1016c, label %dec_label_pc_1017c, label %dec_label_pc_101a4

dec_label_pc_1017c:                               ; preds = %dec_label_pc_1011c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_1017c = load i32, i32* %stack_var_-56, align 4
  %v0_10180 = load i32, i32* @r5, align 4
  store i32 %v0_10180, i32* %r2.global-to-local, align 4
  %v1_10184 = add i32 %v3_1017c, -1
  store i32 %v1_10184, i32* %r3.global-to-local, align 4
  %v0_10188 = load i32, i32* @sb, align 4
  store i32 %v0_10188, i32* %r0.global-to-local, align 4
  %v0_1018c = load i32, i32* @r6, align 4
  %v1_1018c = add i32 %v0_1018c, 24
  %v2_1018c = inttoptr i32 %v1_1018c to i32*
  %v3_1018c = load i32, i32* %v2_1018c, align 4
  store i32 %v3_1018c, i32* %r1.global-to-local, align 4
  %v4_10190 = call i32 @function_115bc(i32 %v0_10188, i32 %v3_1018c, i32 %v0_10180, i32 %v1_10184)
  store i32 %v4_10190, i32* %r0.global-to-local, align 4
  %v2_10194 = icmp eq i32 %v4_10190, -1
  store i1 %v2_10194, i1* %cpsr_c.global-to-local, align 1
  %v7_10194 = icmp eq i32 %v4_10190, -1
  store i1 %v7_10194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10194, label %dec_label_pc_10bec, label %dec_label_pc_101a4

dec_label_pc_101a4:                               ; preds = %dec_label_pc_1017c, %dec_label_pc_1011c
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_101a8 = call i32 @function_10d78(i32 31)
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_101b0 = call i32 @function_10d78(i32 32)
  store i32 %v1_101b0, i32* %r0.global-to-local, align 4
  %v0_101b4 = load i32, i32* @r7, align 4
  %v3_101b4 = icmp eq i32 %v0_101b4, -1
  store i1 %v3_101b4, i1* %cpsr_c.global-to-local, align 1
  %v8_101b4 = icmp eq i32 %v0_101b4, -1
  store i1 %v8_101b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_101b4, label %dec_label_pc_101bc.loopexit, label %dec_label_pc_103c4

dec_label_pc_101bc.loopexit:                      ; preds = %dec_label_pc_10350, %dec_label_pc_106b0, %dec_label_pc_10240, %dec_label_pc_101a4, %dec_label_pc_10a8c
  %v0_101bc = load i32, i32* @r6, align 4
  %v1_101bc = add i32 %v0_101bc, 12
  %v2_101bc = inttoptr i32 %v1_101bc to i32*
  %v3_101bc = load i32, i32* %v2_101bc, align 4
  store i32 %v3_101bc, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_101c0122 = icmp eq i32 %v3_101bc, 0
  store i1 %v2_101c0122, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_101c0122, label %dec_label_pc_fff4, label %dec_label_pc_101c8.lr.ph

dec_label_pc_101c8.lr.ph:                         ; preds = %dec_label_pc_101bc.preheader, %dec_label_pc_101bc.loopexit
  %v0_101c8151 = phi i32 [ %v0_101bc, %dec_label_pc_101bc.loopexit ], [ %v0_101bc123, %dec_label_pc_101bc.preheader ]
  br label %dec_label_pc_101c8

dec_label_pc_101c8:                               ; preds = %dec_label_pc_101c0.backedge.thread, %dec_label_pc_101c0.backedge, %dec_label_pc_101c0.backedge.thread491, %dec_label_pc_101c8.lr.ph
  %v0_10b70 = phi i32 [ %v0_101c8151, %dec_label_pc_101c8.lr.ph ], [ %v0_101c8148, %dec_label_pc_101c0.backedge ], [ %v0_10240, %dec_label_pc_101c0.backedge.thread ], [ %v0_10240, %dec_label_pc_101c0.backedge.thread491 ]
  %v1_101c8 = add i32 %v0_10b70, 24
  %v2_101c8 = inttoptr i32 %v1_101c8 to i32*
  %v3_101c8 = load i32, i32* %v2_101c8, align 4
  store i32 %v3_101c8, i32* %r3.global-to-local, align 4
  %v2_101cc = icmp ugt i32 %v3_101c8, 355
  store i1 %v2_101cc, i1* %cpsr_c.global-to-local, align 1
  %v7_101cc = icmp eq i32 %v3_101c8, 356
  store i1 %v7_101cc, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_10b70, 28
  store i32 %.pre, i32* @sb, align 4
  br i1 %v7_101cc, label %dec_label_pc_10b70, label %dec_label_pc_101d8

dec_label_pc_101d8:                               ; preds = %dec_label_pc_101c8, %dec_label_pc_10b70
  store i32 %stack_var_-1868.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %v2_101e0, align 4
  %v0_101e4 = load i32, i32* @r6, align 4
  %v1_101e4 = add i32 %v0_101e4, 24
  %v2_101e4 = inttoptr i32 %v1_101e4 to i32*
  %v3_101e4 = load i32, i32* %v2_101e4, align 4
  store i32 %v3_101e4, i32* %r2.global-to-local, align 4
  %v0_101e8 = load i32, i32* @sb, align 4
  %v2_101e8 = add i32 %v0_101e8, %v3_101e4
  store i32 %v2_101e8, i32* @r4, align 4
  %v1_101ec = add i32 %v0_101e4, 4
  %v2_101ec = inttoptr i32 %v1_101ec to i32*
  %v3_101ec = load i32, i32* %v2_101ec, align 4
  store i32 %v3_101ec, i32* %r0.global-to-local, align 4
  %v1_101f0 = sub i32 356, %v3_101e4
  store i32 %v1_101f0, i32* %r2.global-to-local, align 4
  store i32 %v2_101e8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_101fc = inttoptr i32 %v2_101e8 to i32*
  %v5_101fc = call i32 @function_1261c(i32 %v3_101ec, i32* %v4_101fc, i32 %v1_101f0, i32 16384)
  store i32 %v5_101fc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10200 = icmp eq i32 %v5_101fc, 0
  store i1 %v2_10200, i1* %cpsr_z.global-to-local, align 1
  %tmp346 = icmp slt i32 %v5_101fc, 1
  br i1 %tmp346, label %dec_label_pc_10aec, label %dec_label_pc_10208

dec_label_pc_10208:                               ; preds = %dec_label_pc_101d8
  %v0_10208 = load i32, i32* @r5, align 4
  store i32 %v0_10208, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10210

dec_label_pc_10210:                               ; preds = %bb348, %dec_label_pc_10208
  %v3_10218 = phi i32 [ %v1_1021c, %bb348 ], [ %v0_10208, %dec_label_pc_10208 ]
  %v1_10210 = load i32, i32* @r4, align 4
  %v2_10210 = add i32 %v1_10210, %v3_10218
  %v3_10210 = inttoptr i32 %v2_10210 to i8*
  %v4_10210 = load i8, i8* %v3_10210, align 1
  %v6_10210 = zext i8 %v4_10210 to i32
  store i32 %v6_10210, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10214 = icmp eq i8 %v4_10210, 0
  store i1 %v2_10214, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10214, label %bb347, label %bb348

bb347:                                            ; preds = %dec_label_pc_10210
  %v1_10218 = load i32, i32* %r1.global-to-local, align 4
  %v2_10218 = trunc i32 %v1_10218 to i8
  store i8 %v2_10218, i8* %v3_10210, align 1
  %v0_1021c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb348

bb348:                                            ; preds = %dec_label_pc_10210, %bb347
  %v0_1021c = phi i32 [ %v3_10218, %dec_label_pc_10210 ], [ %v0_1021c.pre, %bb347 ]
  %v1_1021c = add i32 %v0_1021c, 1
  store i32 %v1_1021c, i32* %r2.global-to-local, align 4
  %v3_10220 = icmp uge i32 %v5_101fc, %v1_1021c
  store i1 %v3_10220, i1* %cpsr_c.global-to-local, align 1
  %v9_10220 = icmp eq i32 %v5_101fc, %v1_1021c
  store i1 %v9_10220, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10220, label %dec_label_pc_10228, label %dec_label_pc_10210

dec_label_pc_10228:                               ; preds = %bb348, %dec_label_pc_10af0
  store i32 ptrtoint (i32* @global_var_1d1ec.130 to i32), i32* %r1.global-to-local, align 4
  %v0_1022c = load i32, i32* @r6, align 4
  %v1_1022c = add i32 %v0_1022c, 24
  %v2_1022c = inttoptr i32 %v1_1022c to i32*
  %v3_1022c = load i32, i32* %v2_1022c, align 4
  %v2_10230 = load i32, i32* @global_var_1d1ec.130, align 4
  store i32 %v2_10230, i32* %r3.global-to-local, align 4
  %v2_10234 = add i32 %v3_1022c, %v5_101fc
  store i32 %v2_10234, i32* %ip.global-to-local, align 4
  store i32 %v2_10234, i32* %v2_1022c, align 4
  %v0_1023c = load i32, i32* %r3.global-to-local, align 4
  %v1_1023c = load i32, i32* @r6, align 4
  %v2_1023c = add i32 %v1_1023c, 8
  %v3_1023c = inttoptr i32 %v2_1023c to i32*
  store i32 %v0_1023c, i32* %v3_1023c, align 4
  br label %dec_label_pc_10240

dec_label_pc_10240:                               ; preds = %dec_label_pc_107ac, %dec_label_pc_10228
  %v0_10240 = load i32, i32* @r6, align 4
  %v1_10240 = add i32 %v0_10240, 12
  %v2_10240 = inttoptr i32 %v1_10240 to i32*
  %v3_10240 = load i32, i32* %v2_10240, align 4
  store i32 %v3_10240, i32* %r2.global-to-local, align 4
  %v1_10244 = add i32 %v3_10240, -2
  store i32 %v1_10244, i32* %r3.global-to-local, align 4
  %v7_10248 = icmp eq i32 %v1_10244, 8
  store i1 %v7_10248, i1* %cpsr_z.global-to-local, align 1
  %v5_1024c = and i32 %v1_10244, 1073741824
  %v6_1024c = icmp ne i32 %v5_1024c, 0
  store i1 %v6_1024c, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_10240, label %dec_label_pc_101bc.loopexit [
    i32 2, label %dec_label_pc_10278
    i32 3, label %dec_label_pc_10360
    i32 4, label %dec_label_pc_10408
    i32 5, label %dec_label_pc_104a0
    i32 6, label %dec_label_pc_10554
    i32 7, label %dec_label_pc_10938
    i32 8, label %dec_label_pc_107d0
    i32 9, label %dec_label_pc_10884
    i32 10, label %dec_label_pc_10678
  ]

dec_label_pc_10278:                               ; preds = %dec_label_pc_10240
  %v1_1027c = add i32 %v0_10240, 24
  %v2_1027c = inttoptr i32 %v1_1027c to i32*
  %v3_1027c = load i32, i32* %v2_1027c, align 4
  store i32 %v3_1027c, i32* %ip.global-to-local, align 4
  %v0_10280 = load i32, i32* @sb, align 4
  store i32 %v0_10280, i32* @r5, align 4
  store i32 0, i32* @r7, align 4
  %v1_1028c = add i32 %v0_10240, 29
  store i32 %v1_1028c, i32* @r4, align 4
  store i32 -3, i32* %sl.global-to-local, align 4
  store i32 -4, i32* @r8, align 4
  %v3_10298113 = icmp eq i32 %v3_1027c, 0
  store i1 %v3_10298113, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_10298113, i1* %cpsr_z.global-to-local, align 1
  %v6_1029c120 = icmp sgt i32 %v3_1027c, 0
  br i1 %v6_1029c120, label %dec_label_pc_102a0.preheader, label %dec_label_pc_10340

dec_label_pc_10298.loopexit:                      ; preds = %dec_label_pc_102b8
  %v2_102c0 = add i32 %v1_102c0, 2
  store i32 %v2_102c0, i32* @r5, align 4
  %v2_102c4 = add i32 %v1_102c4, 2
  store i32 %v2_102c4, i32* @r4, align 4
  %v2_102c8 = add i32 %v1_102c8, 2
  store i32 %v2_102c8, i32* @r7, align 4
  %v3_10298 = icmp uge i32 %v2_102c8, %v1_10298
  store i1 %v3_10298, i1* %cpsr_c.global-to-local, align 1
  %v9_10298 = icmp eq i32 %v2_102c8, %v1_10298
  store i1 %v9_10298, i1* %cpsr_z.global-to-local, align 1
  %v6_1029c = icmp slt i32 %v2_102c8, %v1_10298
  br i1 %v6_1029c, label %dec_label_pc_102a0.preheader, label %dec_label_pc_10340

dec_label_pc_102a0.preheader:                     ; preds = %dec_label_pc_10278, %dec_label_pc_10298.loopexit
  %v6_10348190 = phi i32 [ %v6_10348191, %dec_label_pc_10298.loopexit ], [ %v0_10240, %dec_label_pc_10278 ]
  %v1_102c8179 = phi i32 [ %v2_102c8, %dec_label_pc_10298.loopexit ], [ 0, %dec_label_pc_10278 ]
  %v1_102c0177 = phi i32 [ %v2_102c0, %dec_label_pc_10298.loopexit ], [ %v0_10280, %dec_label_pc_10278 ]
  %v1_102ac175 = phi i32 [ %v1_10298, %dec_label_pc_10298.loopexit ], [ %v3_1027c, %dec_label_pc_10278 ]
  %v0_102a0173 = phi i32 [ %v2_102c4, %dec_label_pc_10298.loopexit ], [ %v1_1028c, %dec_label_pc_10278 ]
  br label %dec_label_pc_102a0

dec_label_pc_102a0:                               ; preds = %dec_label_pc_102a0.preheader, %dec_label_pc_10320
  %v6_10348191 = phi i32 [ %v6_10348190, %dec_label_pc_102a0.preheader ], [ %v0_10328, %dec_label_pc_10320 ]
  %v1_102c8 = phi i32 [ %v1_102c8179, %dec_label_pc_102a0.preheader ], [ %v1_1032c, %dec_label_pc_10320 ]
  %v1_102c0 = phi i32 [ %v1_102c0177, %dec_label_pc_102a0.preheader ], [ %v1_10334, %dec_label_pc_10320 ]
  %v1_10298 = phi i32 [ %v1_102ac175, %dec_label_pc_102a0.preheader ], [ %v3_10328, %dec_label_pc_10320 ]
  %v1_102c4 = phi i32 [ %v0_102a0173, %dec_label_pc_102a0.preheader ], [ %v1_10338, %dec_label_pc_10320 ]
  %v1_102a0 = add i32 %v1_102c4, -1
  %v2_102a0 = inttoptr i32 %v1_102a0 to i8*
  %v3_102a0 = load i8, i8* %v2_102a0, align 1
  %v4_102a0 = zext i8 %v3_102a0 to i32
  store i32 %v4_102a0, i32* %r3.global-to-local, align 4
  %v2_102a4 = icmp eq i8 %v3_102a0, -1
  store i1 %v2_102a4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_102a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_102a4, label %dec_label_pc_102ac, label %dec_label_pc_10340

dec_label_pc_102ac:                               ; preds = %dec_label_pc_102a0
  %v0_102ac = load i32, i32* @sb, align 4
  %v2_102ac = add i32 %v0_102ac, %v1_10298
  store i32 %v2_102ac, i32* %r2.global-to-local, align 4
  %v3_102b0 = icmp uge i32 %v2_102ac, %v1_102c4
  store i1 %v3_102b0, i1* %cpsr_c.global-to-local, align 1
  %v9_102b0 = icmp eq i32 %v2_102ac, %v1_102c4
  store i1 %v9_102b0, i1* %cpsr_z.global-to-local, align 1
  %v2_102b4 = xor i1 %v3_102b0, true
  %v3_102b4 = or i1 %v9_102b0, %v2_102b4
  br i1 %v3_102b4, label %dec_label_pc_10340, label %dec_label_pc_102b8

dec_label_pc_102b8:                               ; preds = %dec_label_pc_102ac
  %v1_102b8 = inttoptr i32 %v1_102c4 to i8*
  %v2_102b8 = load i8, i8* %v1_102b8, align 1
  %v3_102b8 = zext i8 %v2_102b8 to i32
  store i32 %v3_102b8, i32* %r3.global-to-local, align 4
  %v2_102bc = icmp eq i8 %v2_102b8, -1
  store i1 %v2_102bc, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_102bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_102bc, label %dec_label_pc_10298.loopexit, label %dec_label_pc_102d0

dec_label_pc_102d0:                               ; preds = %dec_label_pc_102b8
  %v2_102d0 = icmp ugt i8 %v2_102b8, -4
  store i1 %v2_102d0, i1* %cpsr_c.global-to-local, align 1
  %v7_102d0 = icmp eq i8 %v2_102b8, -3
  store i1 %v7_102d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_102d0, label %dec_label_pc_109ec, label %dec_label_pc_102d8

dec_label_pc_102d8:                               ; preds = %dec_label_pc_102d0
  %v1_102d8 = add i32 %v1_102c0, 2
  store i32 %v1_102d8, i32* %r3.global-to-local, align 4
  %v3_102dc = icmp uge i32 %v2_102ac, %v1_102d8
  store i1 %v3_102dc, i1* %cpsr_c.global-to-local, align 1
  %v9_102dc = icmp eq i32 %v2_102ac, %v1_102d8
  store i1 %v9_102dc, i1* %cpsr_z.global-to-local, align 1
  %v2_102e0 = xor i1 %v3_102dc, true
  %v3_102e0 = or i1 %v9_102dc, %v2_102e0
  br i1 %v3_102e0, label %dec_label_pc_10340, label %dec_label_pc_102e4

dec_label_pc_102e4:                               ; preds = %bb378, %dec_label_pc_10a40, %bb377, %dec_label_pc_102d8
  %v0_102e4 = load i32, i32* @r4, align 4
  %v1_102e4 = inttoptr i32 %v0_102e4 to i8*
  %v2_102e4 = load i8, i8* %v1_102e4, align 1
  %v3_102e4 = zext i8 %v2_102e4 to i32
  store i32 %v3_102e4, i32* %r3.global-to-local, align 4
  %v2_102e8 = icmp ugt i8 %v2_102e4, -4
  store i1 %v2_102e8, i1* %cpsr_c.global-to-local, align 1
  %v7_102e8 = icmp eq i8 %v2_102e4, -3
  store i1 %v7_102e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_102e8, label %bb349, label %dec_label_pc_102f4

bb349:                                            ; preds = %dec_label_pc_102e4
  %v1_102ec = load i32, i32* @r8, align 4
  %v2_102ec = trunc i32 %v1_102ec to i8
  store i8 %v2_102ec, i8* %v1_102e4, align 1
  %v0_102f0.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_102f0.pr, label %bb351, label %.dec_label_pc_102f4_crit_edge

.dec_label_pc_102f4_crit_edge:                    ; preds = %bb349
  %v0_102f4.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_102f4

dec_label_pc_102f4:                               ; preds = %.dec_label_pc_102f4_crit_edge, %dec_label_pc_102e4
  %v0_102f4 = phi i32 [ %v0_102f4.pre, %.dec_label_pc_102f4_crit_edge ], [ %v3_102e4, %dec_label_pc_102e4 ]
  %v2_102f4 = icmp ugt i32 %v0_102f4, 250
  store i1 %v2_102f4, i1* %cpsr_c.global-to-local, align 1
  %v7_102f4 = icmp eq i32 %v0_102f4, 251
  store i1 %v7_102f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_102f4, label %bb350, label %bb351

bb350:                                            ; preds = %dec_label_pc_102f4
  %v1_102f8 = load i32, i32* %sl.global-to-local, align 4
  %v2_102f8 = trunc i32 %v1_102f8 to i8
  %v3_102f8 = load i32, i32* @r4, align 4
  %v4_102f8 = inttoptr i32 %v3_102f8 to i8*
  store i8 %v2_102f8, i8* %v4_102f8, align 1
  br label %bb351

bb351:                                            ; preds = %bb349, %dec_label_pc_102f4, %bb350
  %v0_102fc = load i32, i32* @r4, align 4
  %v1_102fc = add i32 %v0_102fc, 1
  %v2_102fc = inttoptr i32 %v1_102fc to i8*
  %v3_102fc = load i8, i8* %v2_102fc, align 1
  %v4_102fc = zext i8 %v3_102fc to i32
  store i32 %v4_102fc, i32* %r3.global-to-local, align 4
  %v2_10300 = icmp ugt i8 %v3_102fc, -4
  store i1 %v2_10300, i1* %cpsr_c.global-to-local, align 1
  %v7_10300 = icmp eq i8 %v3_102fc, -3
  store i1 %v7_10300, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10300, label %bb352, label %dec_label_pc_1030c

bb352:                                            ; preds = %bb351
  %v1_10304 = load i32, i32* @r8, align 4
  %v2_10304 = trunc i32 %v1_10304 to i8
  store i8 %v2_10304, i8* %v2_102fc, align 1
  %v0_10308.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10308.pr, label %bb354, label %.dec_label_pc_1030c_crit_edge

.dec_label_pc_1030c_crit_edge:                    ; preds = %bb352
  %v0_1030c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1030c

dec_label_pc_1030c:                               ; preds = %.dec_label_pc_1030c_crit_edge, %bb351
  %v0_1030c = phi i32 [ %v0_1030c.pre, %.dec_label_pc_1030c_crit_edge ], [ %v4_102fc, %bb351 ]
  %v2_1030c = icmp ugt i32 %v0_1030c, 250
  store i1 %v2_1030c, i1* %cpsr_c.global-to-local, align 1
  %v7_1030c = icmp eq i32 %v0_1030c, 251
  store i1 %v7_1030c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1030c, label %bb353, label %bb354

bb353:                                            ; preds = %dec_label_pc_1030c
  %v1_10310 = load i32, i32* %sl.global-to-local, align 4
  %v2_10310 = trunc i32 %v1_10310 to i8
  %v3_10310 = load i32, i32* @r4, align 4
  %v4_10310 = add i32 %v3_10310, 1
  %v5_10310 = inttoptr i32 %v4_10310 to i8*
  store i8 %v2_10310, i8* %v5_10310, align 1
  br label %bb354

bb354:                                            ; preds = %bb352, %dec_label_pc_1030c, %bb353
  %v0_10314 = load i32, i32* @r6, align 4
  %v1_10314 = add i32 %v0_10314, 4
  %v2_10314 = inttoptr i32 %v1_10314 to i32*
  %v3_10314 = load i32, i32* %v2_10314, align 4
  store i32 %v3_10314, i32* %r0.global-to-local, align 4
  %v0_10318 = load i32, i32* @r5, align 4
  br label %dec_label_pc_10320

dec_label_pc_10320:                               ; preds = %dec_label_pc_10b48, %bb354
  %v0_10324 = phi i32 [ %v3_10b60, %dec_label_pc_10b48 ], [ %v3_10314, %bb354 ]
  %storemerge5 = phi i32 [ %v2_10a04, %dec_label_pc_10b48 ], [ %v0_10318, %bb354 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_10b48 ], [ 3, %bb354 ]
  store i32 %storemerge5, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10324 = inttoptr i32 %storemerge5 to i32*
  %v5_10324 = call i32 @function_1267c(i32 %v0_10324, i32* %v4_10324, i32 %storemerge, i32 16384)
  store i32 %v5_10324, i32* %r0.global-to-local, align 4
  %v0_10328 = load i32, i32* @r6, align 4
  %v1_10328 = add i32 %v0_10328, 24
  %v2_10328 = inttoptr i32 %v1_10328 to i32*
  %v3_10328 = load i32, i32* %v2_10328, align 4
  store i32 %v3_10328, i32* %ip.global-to-local, align 4
  %v0_1032c = load i32, i32* @r7, align 4
  %v1_1032c = add i32 %v0_1032c, 3
  store i32 %v1_1032c, i32* @r7, align 4
  %v3_10330 = icmp uge i32 %v1_1032c, %v3_10328
  store i1 %v3_10330, i1* %cpsr_c.global-to-local, align 1
  %v9_10330 = icmp eq i32 %v1_1032c, %v3_10328
  store i1 %v9_10330, i1* %cpsr_z.global-to-local, align 1
  %v0_10334 = load i32, i32* @r5, align 4
  %v1_10334 = add i32 %v0_10334, 3
  store i32 %v1_10334, i32* @r5, align 4
  %v0_10338 = load i32, i32* @r4, align 4
  %v1_10338 = add i32 %v0_10338, 3
  store i32 %v1_10338, i32* @r4, align 4
  %v5_1033c = icmp slt i32 %v1_1032c, %v3_10328
  br i1 %v5_1033c, label %dec_label_pc_102a0, label %dec_label_pc_10340

dec_label_pc_10340:                               ; preds = %dec_label_pc_10298.loopexit, %dec_label_pc_102a0, %dec_label_pc_10320, %dec_label_pc_102d8, %dec_label_pc_102ac, %dec_label_pc_10278, %dec_label_pc_109ec.dec_label_pc_10340.loopexit_crit_edge
  %v6_10348 = phi i32 [ %v0_10a10, %dec_label_pc_109ec.dec_label_pc_10340.loopexit_crit_edge ], [ %v0_10240, %dec_label_pc_10278 ], [ %v6_10348191, %dec_label_pc_102a0 ], [ %v0_10328, %dec_label_pc_10320 ], [ %v6_10348191, %dec_label_pc_102d8 ], [ %v6_10348191, %dec_label_pc_102ac ], [ %v6_10348191, %dec_label_pc_10298.loopexit ]
  %v0_10350.pre = phi i32 [ %v0_10340.pre.pre, %dec_label_pc_109ec.dec_label_pc_10340.loopexit_crit_edge ], [ 0, %dec_label_pc_10278 ], [ %v1_102c8, %dec_label_pc_102a0 ], [ %v1_1032c, %dec_label_pc_10320 ], [ %v1_102c8, %dec_label_pc_102d8 ], [ %v1_102c8, %dec_label_pc_102ac ], [ %v2_102c8, %dec_label_pc_10298.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10340 = icmp eq i32 %v0_10350.pre, 0
  store i1 %v2_10340, i1* %cpsr_z.global-to-local, align 1
  %tmp355 = icmp slt i32 %v0_10350.pre, 1
  br i1 %tmp355, label %dec_label_pc_10350, label %.thread236

.thread236:                                       ; preds = %dec_label_pc_10340
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_10348 = add i32 %v6_10348, 12
  %v8_10348 = inttoptr i32 %v7_10348 to i32*
  store i32 3, i32* %v8_10348, align 4
  br label %dec_label_pc_107ac

dec_label_pc_10350:                               ; preds = %dec_label_pc_10340, %dec_label_pc_1098c, %dec_label_pc_108d8, %dec_label_pc_10824, %dec_label_pc_106fc, %dec_label_pc_10618, %dec_label_pc_104f4, %dec_label_pc_1045c, %dec_label_pc_103c4
  %v0_10350 = phi i32 [ %v1_10980, %dec_label_pc_1098c ], [ %v1_108cc, %dec_label_pc_108d8 ], [ %v1_10818, %dec_label_pc_10824 ], [ %v0_106f4, %dec_label_pc_106fc ], [ %v1_1060c, %dec_label_pc_10618 ], [ %v1_104e8, %dec_label_pc_104f4 ], [ %v0_1045c, %dec_label_pc_1045c ], [ %v0_103c4, %dec_label_pc_103c4 ], [ %v0_10350.pre, %dec_label_pc_10340 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10350 = icmp eq i32 %v0_10350, 0
  store i1 %v2_10350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10350, label %dec_label_pc_101bc.loopexit, label %dec_label_pc_10358

dec_label_pc_10358:                               ; preds = %dec_label_pc_10350
  %v0_10358 = load i32, i32* @r6, align 4
  %v1_10358 = add i32 %v0_10358, 24
  %v2_10358 = inttoptr i32 %v1_10358 to i32*
  %v3_10358 = load i32, i32* %v2_10358, align 4
  store i32 %v3_10358, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_107ac

dec_label_pc_10360:                               ; preds = %dec_label_pc_10240
  %v1_10360 = add i32 %v0_10240, 24
  %v2_10360 = inttoptr i32 %v1_10360 to i32*
  %v3_10360 = load i32, i32* %v2_10360, align 4
  store i32 %v3_10360, i32* %r3.global-to-local, align 4
  %v1_10364 = add i32 %v3_10360, -1
  store i32 %v1_10364, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10368 = icmp eq i32 %v1_10364, 0
  store i1 %v2_10368, i1* %cpsr_z.global-to-local, align 1
  %v5_1036c = icmp sgt i32 %v1_10364, 0
  br i1 %v5_1036c, label %dec_label_pc_10394, label %dec_label_pc_1011c

dec_label_pc_10374:                               ; preds = %bb356
  %v2_10374 = icmp ugt i8 %v3_10398, 35
  store i1 %v2_10374, i1* %cpsr_c.global-to-local, align 1
  %v7_10374 = icmp eq i8 %v3_10398, 36
  store i1 %v7_10374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10374, label %dec_label_pc_103a8, label %dec_label_pc_1037c

dec_label_pc_1037c:                               ; preds = %dec_label_pc_10374
  %v2_1037c = icmp ugt i8 %v3_10398, 34
  store i1 %v2_1037c, i1* %cpsr_c.global-to-local, align 1
  %v7_1037c = icmp eq i8 %v3_10398, 35
  store i1 %v7_1037c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1037c, label %dec_label_pc_103a8, label %dec_label_pc_10384

dec_label_pc_10384:                               ; preds = %dec_label_pc_1037c
  %v2_10384 = icmp ugt i8 %v3_10398, 36
  store i1 %v2_10384, i1* %cpsr_c.global-to-local, align 1
  %v7_10384 = icmp eq i8 %v3_10398, 37
  store i1 %v7_10384, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10384, label %dec_label_pc_103a8, label %dec_label_pc_1038c

dec_label_pc_1038c:                               ; preds = %dec_label_pc_10384
  %v1_1038c = add i32 %v0_103a8, -1
  store i32 %v1_1038c, i32* %r0.global-to-local, align 4
  %v2_1038c = icmp ne i32 %v0_103a8, 0
  store i1 %v2_1038c, i1* %cpsr_c.global-to-local, align 1
  %v7_1038c = icmp eq i32 %v0_103a8, 1
  store i1 %v7_1038c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1038c, label %dec_label_pc_1011c, label %dec_label_pc_10394

dec_label_pc_10394:                               ; preds = %dec_label_pc_10360, %dec_label_pc_1038c
  %v0_103a8 = phi i32 [ %v1_1038c, %dec_label_pc_1038c ], [ %v1_10364, %dec_label_pc_10360 ]
  %v2_10394 = add i32 %v0_103a8, %v0_10240
  store i32 %v2_10394, i32* %r3.global-to-local, align 4
  %v1_10398 = add i32 %v2_10394, 28
  %v2_10398 = inttoptr i32 %v1_10398 to i8*
  %v3_10398 = load i8, i8* %v2_10398, align 1
  %v4_10398 = zext i8 %v3_10398 to i32
  store i32 %v4_10398, i32* %r3.global-to-local, align 4
  %v2_1039c = icmp ugt i8 %v3_10398, 61
  store i1 %v2_1039c, i1* %cpsr_c.global-to-local, align 1
  %v7_1039c = icmp eq i8 %v3_10398, 62
  store i1 %v7_1039c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1039c, label %dec_label_pc_103a8, label %bb356

bb356:                                            ; preds = %dec_label_pc_10394
  %v3_103a0 = icmp ugt i8 %v3_10398, 57
  store i1 %v3_103a0, i1* %cpsr_c.global-to-local, align 1
  %v8_103a0 = icmp eq i8 %v3_10398, 58
  store i1 %v8_103a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_103a0, label %dec_label_pc_103a8, label %dec_label_pc_10374

dec_label_pc_103a8:                               ; preds = %dec_label_pc_10394, %bb356, %dec_label_pc_10384, %dec_label_pc_1037c, %dec_label_pc_10374
  %v1_103a8 = add i32 %v0_103a8, 1
  store i32 %v1_103a8, i32* @r7, align 4
  %v2_103ac = icmp eq i32 %v1_103a8, -1
  store i1 %v2_103ac, i1* %cpsr_c.global-to-local, align 1
  %v7_103ac = icmp eq i32 %v0_103a8, -2
  store i1 %v7_103ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103ac, label %dec_label_pc_1011c, label %dec_label_pc_103b4

dec_label_pc_103b4:                               ; preds = %dec_label_pc_103a8
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_103b8 = call i32 @function_10d78(i32 31)
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_103c0 = call i32 @function_10d78(i32 32)
  store i32 %v1_103c0, i32* %r0.global-to-local, align 4
  %v0_103c4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_103c4

dec_label_pc_103c4:                               ; preds = %dec_label_pc_101a4, %dec_label_pc_103b4
  %v0_103c4 = phi i32 [ %v0_101b4, %dec_label_pc_101a4 ], [ %v0_103c4.pre, %dec_label_pc_103b4 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_103c4 = icmp eq i32 %v0_103c4, 0
  store i1 %v2_103c4, i1* %cpsr_z.global-to-local, align 1
  %tmp357 = icmp slt i32 %v0_103c4, 1
  br i1 %tmp357, label %dec_label_pc_10350, label %dec_label_pc_103cc

dec_label_pc_103cc:                               ; preds = %dec_label_pc_103c4
  %v0_103cc = load i32, i32* @r6, align 4
  %v1_103cc = inttoptr i32 %v0_103cc to i32*
  %v2_103cc = load i32, i32* %v1_103cc, align 4
  store i32 %v2_103cc, i32* %r3.global-to-local, align 4
  %v1_103d0 = add i32 %v0_103cc, 4
  %v2_103d0 = inttoptr i32 %v1_103d0 to i32*
  %v3_103d0 = load i32, i32* %v2_103d0, align 4
  store i32 %v3_103d0, i32* %r0.global-to-local, align 4
  %v1_103d4 = add i32 %v2_103cc, 12
  %v2_103d4 = inttoptr i32 %v1_103d4 to i8*
  %v3_103d4 = load i8, i8* %v2_103d4, align 1
  %v4_103d4 = zext i8 %v3_103d4 to i32
  store i32 %v4_103d4, i32* %r2.global-to-local, align 4
  %v1_103d8 = inttoptr i32 %v2_103cc to i32*
  %v2_103d8 = load i32, i32* %v1_103d8, align 4
  store i32 %v2_103d8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_103e0 = inttoptr i32 %v2_103d8 to i32*
  %v5_103e0 = call i32 @function_1267c(i32 %v3_103d0, i32* %v4_103e0, i32 %v4_103d4, i32 16384)
  store i32 %v5_103e0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_103e8 = load i32, i32* @r6, align 4
  %v1_103e8 = add i32 %v0_103e8, 4
  %v2_103e8 = inttoptr i32 %v1_103e8 to i32*
  %v3_103e8 = load i32, i32* %v2_103e8, align 4
  store i32 %v3_103e8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_14724.204 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_103f4 = call i32 @function_1267c(i32 %v3_103e8, i32* bitcast ([3 x i8]* @global_var_14724.204 to i32*), i32 2, i32 16384)
  store i32 %v5_103f4, i32* %r0.global-to-local, align 4
  %v0_103f8 = load i32, i32* @r6, align 4
  %v1_103f8 = add i32 %v0_103f8, 24
  %v2_103f8 = inttoptr i32 %v1_103f8 to i32*
  %v3_103f8 = load i32, i32* %v2_103f8, align 4
  store i32 %v3_103f8, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_10400 = add i32 %v0_103f8, 12
  %v3_10400 = inttoptr i32 %v2_10400 to i32*
  store i32 4, i32* %v3_10400, align 4
  br label %dec_label_pc_107ac

dec_label_pc_10408:                               ; preds = %dec_label_pc_10240
  %v1_10408 = add i32 %v0_10240, 24
  %v2_10408 = inttoptr i32 %v1_10408 to i32*
  %v3_10408 = load i32, i32* %v2_10408, align 4
  store i32 %v3_10408, i32* %r3.global-to-local, align 4
  %v1_1040c = add i32 %v3_10408, -1
  store i32 %v1_1040c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10410 = icmp eq i32 %v1_1040c, 0
  store i1 %v2_10410, i1* %cpsr_z.global-to-local, align 1
  %v5_10414 = icmp sgt i32 %v1_1040c, 0
  br i1 %v5_10414, label %dec_label_pc_10434, label %dec_label_pc_10a4c

dec_label_pc_1041c:                               ; preds = %bb358
  %v2_1041c = icmp ugt i8 %v3_10438, 35
  store i1 %v2_1041c, i1* %cpsr_c.global-to-local, align 1
  %v7_1041c = icmp eq i8 %v3_10438, 36
  store i1 %v7_1041c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1041c, label %dec_label_pc_10448, label %dec_label_pc_10424

dec_label_pc_10424:                               ; preds = %dec_label_pc_1041c
  %v2_10424 = icmp ugt i8 %v3_10438, 34
  store i1 %v2_10424, i1* %cpsr_c.global-to-local, align 1
  %v7_10424 = icmp eq i8 %v3_10438, 35
  store i1 %v7_10424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10424, label %dec_label_pc_10448, label %dec_label_pc_1042c

dec_label_pc_1042c:                               ; preds = %dec_label_pc_10424
  %v1_1042c = add i32 %v0_10448, -1
  store i32 %v1_1042c, i32* %r0.global-to-local, align 4
  %v2_1042c = icmp ne i32 %v0_10448, 0
  store i1 %v2_1042c, i1* %cpsr_c.global-to-local, align 1
  %v7_1042c = icmp eq i32 %v0_10448, 1
  store i1 %v7_1042c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1042c, label %dec_label_pc_10a4c, label %dec_label_pc_10434

dec_label_pc_10434:                               ; preds = %dec_label_pc_10408, %dec_label_pc_1042c
  %v0_10448 = phi i32 [ %v1_1042c, %dec_label_pc_1042c ], [ %v1_1040c, %dec_label_pc_10408 ]
  %v2_10434 = add i32 %v0_10448, %v0_10240
  store i32 %v2_10434, i32* %r3.global-to-local, align 4
  %v1_10438 = add i32 %v2_10434, 28
  %v2_10438 = inttoptr i32 %v1_10438 to i8*
  %v3_10438 = load i8, i8* %v2_10438, align 1
  %v4_10438 = zext i8 %v3_10438 to i32
  store i32 %v4_10438, i32* %r3.global-to-local, align 4
  %v2_1043c = icmp ugt i8 %v3_10438, 61
  store i1 %v2_1043c, i1* %cpsr_c.global-to-local, align 1
  %v7_1043c = icmp eq i8 %v3_10438, 62
  store i1 %v7_1043c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1043c, label %dec_label_pc_10448, label %bb358

bb358:                                            ; preds = %dec_label_pc_10434
  %v3_10440 = icmp ugt i8 %v3_10438, 57
  store i1 %v3_10440, i1* %cpsr_c.global-to-local, align 1
  %v8_10440 = icmp eq i8 %v3_10438, 58
  store i1 %v8_10440, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10440, label %dec_label_pc_10448, label %dec_label_pc_1041c

dec_label_pc_10448:                               ; preds = %dec_label_pc_10434, %bb358, %dec_label_pc_10424, %dec_label_pc_1041c
  %v1_10448 = add i32 %v0_10448, 1
  store i32 %v1_10448, i32* @r7, align 4
  %v2_1044c = icmp eq i32 %v1_10448, -1
  store i1 %v2_1044c, i1* %cpsr_c.global-to-local, align 1
  %v7_1044c = icmp eq i32 %v0_10448, -2
  store i1 %v7_1044c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1044c, label %dec_label_pc_10a4c, label %dec_label_pc_10454

dec_label_pc_10454:                               ; preds = %dec_label_pc_10448
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_10458 = call i32 @function_10d78(i32 30)
  store i32 %v1_10458, i32* %r0.global-to-local, align 4
  %v0_1045c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1045c

dec_label_pc_1045c:                               ; preds = %dec_label_pc_10a8c, %dec_label_pc_10454
  %v0_1045c = phi i32 [ %v0_10a94, %dec_label_pc_10a8c ], [ %v0_1045c.pre, %dec_label_pc_10454 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1045c = icmp eq i32 %v0_1045c, 0
  store i1 %v2_1045c, i1* %cpsr_z.global-to-local, align 1
  %tmp359 = icmp slt i32 %v0_1045c, 1
  br i1 %tmp359, label %dec_label_pc_10350, label %dec_label_pc_10464

dec_label_pc_10464:                               ; preds = %dec_label_pc_1045c
  %v0_10464 = load i32, i32* @r6, align 4
  %v1_10464 = inttoptr i32 %v0_10464 to i32*
  %v2_10464 = load i32, i32* %v1_10464, align 4
  store i32 %v2_10464, i32* %r3.global-to-local, align 4
  %v1_10468 = add i32 %v0_10464, 4
  %v2_10468 = inttoptr i32 %v1_10468 to i32*
  %v3_10468 = load i32, i32* %v2_10468, align 4
  store i32 %v3_10468, i32* %r0.global-to-local, align 4
  %v1_1046c = add i32 %v2_10464, 13
  %v2_1046c = inttoptr i32 %v1_1046c to i8*
  %v3_1046c = load i8, i8* %v2_1046c, align 1
  %v4_1046c = zext i8 %v3_1046c to i32
  store i32 %v4_1046c, i32* %r2.global-to-local, align 4
  %v1_10470 = add i32 %v2_10464, 4
  %v2_10470 = inttoptr i32 %v1_10470 to i32*
  %v3_10470 = load i32, i32* %v2_10470, align 4
  store i32 %v3_10470, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10478 = inttoptr i32 %v3_10470 to i32*
  %v5_10478 = call i32 @function_1267c(i32 %v3_10468, i32* %v4_10478, i32 %v4_1046c, i32 16384)
  store i32 %v5_10478, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_10480 = load i32, i32* @r6, align 4
  %v1_10480 = add i32 %v0_10480, 4
  %v2_10480 = inttoptr i32 %v1_10480 to i32*
  %v3_10480 = load i32, i32* %v2_10480, align 4
  store i32 %v3_10480, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_14724.204 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_1048c = call i32 @function_1267c(i32 %v3_10480, i32* bitcast ([3 x i8]* @global_var_14724.204 to i32*), i32 2, i32 16384)
  store i32 %v5_1048c, i32* %r0.global-to-local, align 4
  %v0_10490 = load i32, i32* @r6, align 4
  %v1_10490 = add i32 %v0_10490, 24
  %v2_10490 = inttoptr i32 %v1_10490 to i32*
  %v3_10490 = load i32, i32* %v2_10490, align 4
  store i32 %v3_10490, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_10498 = add i32 %v0_10490, 12
  %v3_10498 = inttoptr i32 %v2_10498 to i32*
  store i32 5, i32* %v3_10498, align 4
  br label %dec_label_pc_107ac

dec_label_pc_104a0:                               ; preds = %dec_label_pc_10240
  %v1_104a0 = add i32 %v0_10240, 24
  %v2_104a0 = inttoptr i32 %v1_104a0 to i32*
  %v3_104a0 = load i32, i32* %v2_104a0, align 4
  store i32 %v3_104a0, i32* %ip.global-to-local, align 4
  %v1_104a4 = add i32 %v3_104a0, -1
  store i32 %v1_104a4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_104a8 = icmp eq i32 %v1_104a4, 0
  store i1 %v2_104a8, i1* %cpsr_z.global-to-local, align 1
  %v5_104ac = icmp sgt i32 %v1_104a4, 0
  br i1 %v5_104ac, label %dec_label_pc_104d4, label %dec_label_pc_101c0.backedge.thread

dec_label_pc_104b4:                               ; preds = %bb360
  %v2_104b4 = icmp ugt i8 %v3_104d8, 35
  store i1 %v2_104b4, i1* %cpsr_c.global-to-local, align 1
  %v7_104b4 = icmp eq i8 %v3_104d8, 36
  store i1 %v7_104b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104b4, label %dec_label_pc_104e8, label %dec_label_pc_104bc

dec_label_pc_104bc:                               ; preds = %dec_label_pc_104b4
  %v2_104bc = icmp ugt i8 %v3_104d8, 34
  store i1 %v2_104bc, i1* %cpsr_c.global-to-local, align 1
  %v7_104bc = icmp eq i8 %v3_104d8, 35
  store i1 %v7_104bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104bc, label %dec_label_pc_104e8, label %dec_label_pc_104c4

dec_label_pc_104c4:                               ; preds = %dec_label_pc_104bc
  %v2_104c4 = icmp ugt i8 %v3_104d8, 36
  store i1 %v2_104c4, i1* %cpsr_c.global-to-local, align 1
  %v7_104c4 = icmp eq i8 %v3_104d8, 37
  store i1 %v7_104c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104c4, label %dec_label_pc_104e8, label %dec_label_pc_104cc

dec_label_pc_104cc:                               ; preds = %dec_label_pc_104c4
  %v1_104cc = add i32 %v0_104e8, -1
  store i32 %v1_104cc, i32* %r0.global-to-local, align 4
  %v2_104cc = icmp ne i32 %v0_104e8, 0
  store i1 %v2_104cc, i1* %cpsr_c.global-to-local, align 1
  %v7_104cc = icmp eq i32 %v0_104e8, 1
  store i1 %v7_104cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104cc, label %dec_label_pc_101c0.backedge.thread491, label %dec_label_pc_104d4

dec_label_pc_104d4:                               ; preds = %dec_label_pc_104a0, %dec_label_pc_104cc
  %v0_104e8 = phi i32 [ %v1_104cc, %dec_label_pc_104cc ], [ %v1_104a4, %dec_label_pc_104a0 ]
  %v2_104d4 = add i32 %v0_104e8, %v0_10240
  store i32 %v2_104d4, i32* %r3.global-to-local, align 4
  %v1_104d8 = add i32 %v2_104d4, 28
  %v2_104d8 = inttoptr i32 %v1_104d8 to i8*
  %v3_104d8 = load i8, i8* %v2_104d8, align 1
  %v4_104d8 = zext i8 %v3_104d8 to i32
  store i32 %v4_104d8, i32* %r3.global-to-local, align 4
  %v2_104dc = icmp ugt i8 %v3_104d8, 61
  store i1 %v2_104dc, i1* %cpsr_c.global-to-local, align 1
  %v7_104dc = icmp eq i8 %v3_104d8, 62
  store i1 %v7_104dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104dc, label %dec_label_pc_104e8, label %bb360

bb360:                                            ; preds = %dec_label_pc_104d4
  %v3_104e0 = icmp ugt i8 %v3_104d8, 57
  store i1 %v3_104e0, i1* %cpsr_c.global-to-local, align 1
  %v8_104e0 = icmp eq i8 %v3_104d8, 58
  store i1 %v8_104e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_104e0, label %dec_label_pc_104e8, label %dec_label_pc_104b4

dec_label_pc_104e8:                               ; preds = %dec_label_pc_104d4, %bb360, %dec_label_pc_104c4, %dec_label_pc_104bc, %dec_label_pc_104b4
  %v1_104e8 = add i32 %v0_104e8, 1
  store i32 %v1_104e8, i32* @r7, align 4
  %v2_104ec = icmp eq i32 %v1_104e8, -1
  store i1 %v2_104ec, i1* %cpsr_c.global-to-local, align 1
  %v7_104ec = icmp eq i32 %v0_104e8, -2
  store i1 %v7_104ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104ec, label %dec_label_pc_101c0.backedge.thread491, label %dec_label_pc_104f4

dec_label_pc_104f4:                               ; preds = %dec_label_pc_104e8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_104f4 = icmp eq i32 %v1_104e8, 0
  store i1 %v2_104f4, i1* %cpsr_z.global-to-local, align 1
  %tmp361 = icmp slt i32 %v1_104e8, 1
  br i1 %tmp361, label %dec_label_pc_10350, label %dec_label_pc_104fc

dec_label_pc_104fc:                               ; preds = %dec_label_pc_104f4
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_10500 = call i32 @function_10e30(i32 7)
  store i32 %v2_10130, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_10510 = call i32 @function_10d4c(i32 7, i32* nonnull %stack_var_-56)
  store i32 %v3_10510, i32* %r0.global-to-local, align 4
  %v3_10514 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10514, i32* %r2.global-to-local, align 4
  store i32 %v3_10510, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10520 = load i32, i32* @r6, align 4
  %v1_10520 = add i32 %v0_10520, 4
  %v2_10520 = inttoptr i32 %v1_10520 to i32*
  %v3_10520 = load i32, i32* %v2_10520, align 4
  store i32 %v3_10520, i32* %r0.global-to-local, align 4
  %v4_10524 = inttoptr i32 %v3_10510 to i32*
  %v5_10524 = call i32 @function_1267c(i32 %v3_10520, i32* %v4_10524, i32 %v3_10514, i32 16384)
  store i32 %v5_10524, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_14724.204 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10534 = load i32, i32* @r6, align 4
  %v1_10534 = add i32 %v0_10534, 4
  %v2_10534 = inttoptr i32 %v1_10534 to i32*
  %v3_10534 = load i32, i32* %v2_10534, align 4
  store i32 %v3_10534, i32* %r0.global-to-local, align 4
  %v5_10538 = call i32 @function_1267c(i32 %v3_10534, i32* bitcast ([3 x i8]* @global_var_14724.204 to i32*), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_10540 = call i32 @function_10d78(i32 7)
  store i32 %v1_10540, i32* %r0.global-to-local, align 4
  %v0_10544 = load i32, i32* @r6, align 4
  %v1_10544 = add i32 %v0_10544, 24
  %v2_10544 = inttoptr i32 %v1_10544 to i32*
  %v3_10544 = load i32, i32* %v2_10544, align 4
  store i32 %v3_10544, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_1054c = add i32 %v0_10544, 12
  %v3_1054c = inttoptr i32 %v2_1054c to i32*
  store i32 6, i32* %v3_1054c, align 4
  br label %dec_label_pc_107ac

dec_label_pc_10554:                               ; preds = %dec_label_pc_10240
  %v1_10554 = add i32 %v0_10240, 24
  %v2_10554 = inttoptr i32 %v1_10554 to i32*
  %v3_10554 = load i32, i32* %v2_10554, align 4
  store i32 %v3_10554, i32* %ip.global-to-local, align 4
  %v1_10558 = add i32 %v3_10554, -1
  store i32 %v1_10558, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1055c = icmp eq i32 %v1_10558, 0
  store i1 %v2_1055c, i1* %cpsr_z.global-to-local, align 1
  %v5_10560 = icmp sgt i32 %v1_10558, 0
  br i1 %v5_10560, label %dec_label_pc_105f8, label %dec_label_pc_101c0.backedge.thread

dec_label_pc_105d8:                               ; preds = %bb362
  %v2_105d8 = icmp ugt i8 %v3_105fc, 35
  store i1 %v2_105d8, i1* %cpsr_c.global-to-local, align 1
  %v7_105d8 = icmp eq i8 %v3_105fc, 36
  store i1 %v7_105d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105d8, label %dec_label_pc_1060c, label %dec_label_pc_105e0

dec_label_pc_105e0:                               ; preds = %dec_label_pc_105d8
  %v2_105e0 = icmp ugt i8 %v3_105fc, 34
  store i1 %v2_105e0, i1* %cpsr_c.global-to-local, align 1
  %v7_105e0 = icmp eq i8 %v3_105fc, 35
  store i1 %v7_105e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105e0, label %dec_label_pc_1060c, label %dec_label_pc_105e8

dec_label_pc_105e8:                               ; preds = %dec_label_pc_105e0
  %v2_105e8 = icmp ugt i8 %v3_105fc, 36
  store i1 %v2_105e8, i1* %cpsr_c.global-to-local, align 1
  %v7_105e8 = icmp eq i8 %v3_105fc, 37
  store i1 %v7_105e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105e8, label %dec_label_pc_1060c, label %dec_label_pc_105f0

dec_label_pc_105f0:                               ; preds = %dec_label_pc_105e8
  %v1_105f0 = add i32 %v0_1060c, -1
  store i32 %v1_105f0, i32* %r0.global-to-local, align 4
  %v2_105f0 = icmp ne i32 %v0_1060c, 0
  store i1 %v2_105f0, i1* %cpsr_c.global-to-local, align 1
  %v7_105f0 = icmp eq i32 %v0_1060c, 1
  store i1 %v7_105f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105f0, label %dec_label_pc_101c0.backedge.thread491, label %dec_label_pc_105f8

dec_label_pc_105f8:                               ; preds = %dec_label_pc_10554, %dec_label_pc_105f0
  %v0_1060c = phi i32 [ %v1_105f0, %dec_label_pc_105f0 ], [ %v1_10558, %dec_label_pc_10554 ]
  %v2_105f8 = add i32 %v0_1060c, %v0_10240
  store i32 %v2_105f8, i32* %r3.global-to-local, align 4
  %v1_105fc = add i32 %v2_105f8, 28
  %v2_105fc = inttoptr i32 %v1_105fc to i8*
  %v3_105fc = load i8, i8* %v2_105fc, align 1
  %v4_105fc = zext i8 %v3_105fc to i32
  store i32 %v4_105fc, i32* %r3.global-to-local, align 4
  %v2_10600 = icmp ugt i8 %v3_105fc, 61
  store i1 %v2_10600, i1* %cpsr_c.global-to-local, align 1
  %v7_10600 = icmp eq i8 %v3_105fc, 62
  store i1 %v7_10600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10600, label %dec_label_pc_1060c, label %bb362

bb362:                                            ; preds = %dec_label_pc_105f8
  %v3_10604 = icmp ugt i8 %v3_105fc, 57
  store i1 %v3_10604, i1* %cpsr_c.global-to-local, align 1
  %v8_10604 = icmp eq i8 %v3_105fc, 58
  store i1 %v8_10604, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10604, label %dec_label_pc_1060c, label %dec_label_pc_105d8

dec_label_pc_1060c:                               ; preds = %dec_label_pc_105f8, %bb362, %dec_label_pc_105e8, %dec_label_pc_105e0, %dec_label_pc_105d8
  %v1_1060c = add i32 %v0_1060c, 1
  store i32 %v1_1060c, i32* @r7, align 4
  %v2_10610 = icmp eq i32 %v1_1060c, -1
  store i1 %v2_10610, i1* %cpsr_c.global-to-local, align 1
  %v7_10610 = icmp eq i32 %v0_1060c, -2
  store i1 %v7_10610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10610, label %dec_label_pc_101c0.backedge.thread491, label %dec_label_pc_10618

dec_label_pc_10618:                               ; preds = %dec_label_pc_1060c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10618 = icmp eq i32 %v1_1060c, 0
  store i1 %v2_10618, i1* %cpsr_z.global-to-local, align 1
  %tmp363 = icmp slt i32 %v1_1060c, 1
  br i1 %tmp363, label %dec_label_pc_10350, label %dec_label_pc_10620

dec_label_pc_10620:                               ; preds = %dec_label_pc_10618
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_10624 = call i32 @function_10e30(i32 8)
  store i32 %v2_1062c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_10634 = call i32 @function_10d4c(i32 8, i32* nonnull %stack_var_-48)
  store i32 %v3_10634, i32* %r0.global-to-local, align 4
  %v3_10638 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10638, i32* %r2.global-to-local, align 4
  store i32 %v3_10634, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10644 = load i32, i32* @r6, align 4
  %v1_10644 = add i32 %v0_10644, 4
  %v2_10644 = inttoptr i32 %v1_10644 to i32*
  %v3_10644 = load i32, i32* %v2_10644, align 4
  store i32 %v3_10644, i32* %r0.global-to-local, align 4
  %v4_10648 = inttoptr i32 %v3_10634 to i32*
  %v5_10648 = call i32 @function_1267c(i32 %v3_10644, i32* %v4_10648, i32 %v3_10638, i32 16384)
  store i32 %v5_10648, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_14724.204 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10658 = load i32, i32* @r6, align 4
  %v1_10658 = add i32 %v0_10658, 4
  %v2_10658 = inttoptr i32 %v1_10658 to i32*
  %v3_10658 = load i32, i32* %v2_10658, align 4
  store i32 %v3_10658, i32* %r0.global-to-local, align 4
  %v5_1065c = call i32 @function_1267c(i32 %v3_10658, i32* bitcast ([3 x i8]* @global_var_14724.204 to i32*), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_10664 = call i32 @function_10d78(i32 8)
  store i32 %v1_10664, i32* %r0.global-to-local, align 4
  %v0_10668 = load i32, i32* @r6, align 4
  %v1_10668 = add i32 %v0_10668, 24
  %v2_10668 = inttoptr i32 %v1_10668 to i32*
  %v3_10668 = load i32, i32* %v2_10668, align 4
  store i32 %v3_10668, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_10670 = add i32 %v0_10668, 12
  %v3_10670 = inttoptr i32 %v2_10670 to i32*
  store i32 7, i32* %v3_10670, align 4
  br label %dec_label_pc_107ac

dec_label_pc_10678:                               ; preds = %dec_label_pc_10240
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_1067c = call i32 @function_10e30(i32 12)
  store i32 %v2_10130, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v3_1068c = call i32 @function_10d4c(i32 12, i32* nonnull %stack_var_-56)
  %v3_10690 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_1068c, i32* %r2.global-to-local, align 4
  %v1_10698 = add i32 %v3_10690, -1
  store i32 %v1_10698, i32* %r3.global-to-local, align 4
  %v0_1069c = load i32, i32* @sb, align 4
  store i32 %v0_1069c, i32* %r0.global-to-local, align 4
  %v0_106a0 = load i32, i32* @r6, align 4
  %v1_106a0 = add i32 %v0_106a0, 24
  %v2_106a0 = inttoptr i32 %v1_106a0 to i32*
  %v3_106a0 = load i32, i32* %v2_106a0, align 4
  store i32 %v3_106a0, i32* %r1.global-to-local, align 4
  %v4_106a4 = call i32 @function_115bc(i32 %v0_1069c, i32 %v3_106a0, i32 %v3_1068c, i32 %v1_10698)
  %v3_106a8 = icmp eq i32 %v4_106a4, -1
  store i1 %v3_106a8, i1* %cpsr_c.global-to-local, align 1
  %v8_106a8 = icmp eq i32 %v4_106a4, -1
  store i1 %v8_106a8, i1* %cpsr_z.global-to-local, align 1
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_106b4 = call i32 @function_10d78(i32 12)
  br i1 %v3_106a8, label %dec_label_pc_106b0, label %dec_label_pc_10aa0

dec_label_pc_106b0:                               ; preds = %dec_label_pc_10678
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_106bc = call i32 @function_10e30(i32 11)
  store i32 %v2_10130, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v3_106cc = call i32 @function_10d4c(i32 11, i32* nonnull %stack_var_-56)
  store i32 %v3_106cc, i32* %r0.global-to-local, align 4
  %v3_106d0 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_106cc, i32* %r2.global-to-local, align 4
  %v1_106d8 = add i32 %v3_106d0, -1
  store i32 %v1_106d8, i32* %r3.global-to-local, align 4
  %v0_106dc = load i32, i32* @r6, align 4
  %v1_106dc = add i32 %v0_106dc, 24
  %v2_106dc = inttoptr i32 %v1_106dc to i32*
  %v3_106dc = load i32, i32* %v2_106dc, align 4
  store i32 %v3_106dc, i32* %r1.global-to-local, align 4
  %v0_106e0 = load i32, i32* @sb, align 4
  store i32 %v0_106e0, i32* %r0.global-to-local, align 4
  %v4_106e4 = call i32 @function_115bc(i32 %v0_106e0, i32 %v3_106dc, i32 %v3_106cc, i32 %v1_106d8)
  store i32 %v4_106e4, i32* @r7, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_106f0 = call i32 @function_10d78(i32 11)
  store i32 %v1_106f0, i32* %r0.global-to-local, align 4
  %v0_106f4 = load i32, i32* @r7, align 4
  %v2_106f4 = icmp eq i32 %v0_106f4, -1
  store i1 %v2_106f4, i1* %cpsr_c.global-to-local, align 1
  %v7_106f4 = icmp eq i32 %v0_106f4, -1
  store i1 %v7_106f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106f4, label %dec_label_pc_101bc.loopexit, label %dec_label_pc_106fc

dec_label_pc_106fc:                               ; preds = %dec_label_pc_106b0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_106fc = icmp eq i32 %v0_106f4, 0
  store i1 %v2_106fc, i1* %cpsr_z.global-to-local, align 1
  %tmp364 = icmp slt i32 %v0_106f4, 1
  br i1 %tmp364, label %dec_label_pc_10350, label %dec_label_pc_10704

dec_label_pc_10704:                               ; preds = %dec_label_pc_106fc
  %v0_10704 = load i32, i32* @r6, align 4
  %v1_10704 = add i32 %v0_10704, 21
  %v2_10704 = inttoptr i32 %v1_10704 to i8*
  %v3_10704 = load i8, i8* %v2_10704, align 1
  %v4_10704 = zext i8 %v3_10704 to i32
  store i32 %v4_10704, i32* %r3.global-to-local, align 4
  %v1_10708 = add i32 %v0_10704, 20
  %v2_10708 = inttoptr i32 %v1_10708 to i8*
  %v3_10708 = load i8, i8* %v2_10708, align 1
  %v4_10708 = zext i8 %v3_10708 to i32
  store i32 %v4_10708, i32* %r2.global-to-local, align 4
  %v1_1070c = add i32 %v0_10704, 16
  %v2_1070c = inttoptr i32 %v1_1070c to i32*
  %v3_1070c = load i32, i32* %v2_1070c, align 4
  store i32 %v3_1070c, i32* %r1.global-to-local, align 4
  %v4_10710 = mul nuw nsw i32 %v4_10704, 256
  %v5_10710 = or i32 %v4_10708, %v4_10710
  store i32 %v5_10710, i32* %r2.global-to-local, align 4
  %v1_10714 = and i32 %v4_10708, 128
  %v2_10714 = icmp ne i32 %v1_10714, 0
  store i1 %v2_10714, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_10704, i32* %r3.global-to-local, align 4
  store i32 %v3_1070c, i32* %stack_var_-48, align 4
  store i32 %v5_10710, i32* %stack_var_-38, align 4
  %v1_10724 = inttoptr i32 %v0_10704 to i32*
  %v2_10724 = load i32, i32* %v1_10724, align 4
  store i32 %v2_10724, i32* @fp, align 4
  %v0_10728 = call i32 @function_11e28()
  store i32 %v0_10728, i32* %r0.global-to-local, align 4
  %v7_1072c = icmp eq i32 %v0_10728, -1
  %.387 = zext i1 %v7_1072c to i32
  store i32 %.387, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10738 = icmp eq i32 %v0_10728, 0
  store i1 %v2_10738, i1* %cpsr_z.global-to-local, align 1
  %tmp367 = icmp slt i32 %v0_10728, 1
  br i1 %tmp367, label %bb368, label %.thread88

.thread88:                                        ; preds = %dec_label_pc_10704
  store i32 1, i32* %sl.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10790

bb368:                                            ; preds = %dec_label_pc_10704
  store i32 %.387, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10744 = icmp eq i1 %v7_1072c, false
  store i1 %v2_10744, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10744, label %dec_label_pc_1074c, label %dec_label_pc_10790

dec_label_pc_1074c:                               ; preds = %bb368
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_10758 = call i32 @function_1270c(i32 2, i32 1, i32 0)
  store i32 %v3_10758, i32* %r0.global-to-local, align 4
  %v2_1075c = icmp eq i32 %v3_10758, -1
  store i1 %v2_1075c, i1* %cpsr_c.global-to-local, align 1
  %v7_1075c = icmp eq i32 %v3_10758, -1
  store i1 %v7_1075c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_10758, i32* @r5, align 4
  br i1 %v7_1075c, label %dec_label_pc_10d34, label %dec_label_pc_10768

dec_label_pc_10768:                               ; preds = %dec_label_pc_1074c
  store i32 3, i32* %r0.global-to-local, align 4
  %v1_1076c = call i32 @function_10e30(i32 3)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_10774 = call i32 @function_10e30(i32 4)
  %v0_10778 = load i32, i32* @sl, align 4
  store i32 %v0_10778, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_10780 = inttoptr i32 %v0_10778 to i32*
  %v3_10780 = call i32 @function_10d4c(i32 3, i32* %v2_10780)
  store i32 %v3_10780, i32* %r0.global-to-local, align 4
  %v1_10784 = inttoptr i32 %v3_10780 to i8*
  %v2_10784 = call i32 @function_ee18(i8* %v1_10784)
  store i32 %v2_10784, i32* %r0.global-to-local, align 4
  store i32 %v2_10784, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_10788 = icmp eq i32 %v2_10784, 0
  store i1 %v3_10788, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10788, label %dec_label_pc_10790, label %dec_label_pc_10c04

dec_label_pc_10790:                               ; preds = %.thread88, %dec_label_pc_10768, %bb368
  %v0_10790 = load i32, i32* @r6, align 4
  %v1_10790 = add i32 %v0_10790, 4
  %v2_10790 = inttoptr i32 %v1_10790 to i32*
  %v3_10790 = load i32, i32* %v2_10790, align 4
  store i32 %v3_10790, i32* %r0.global-to-local, align 4
  %v1_10794 = call i32 @function_11dfc(i32 %v3_10790)
  store i32 %v1_10794, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_107a0 = load i32, i32* @r6, align 4
  %v1_107a0 = add i32 %v0_107a0, 24
  %v2_107a0 = inttoptr i32 %v1_107a0 to i32*
  %v3_107a0 = load i32, i32* %v2_107a0, align 4
  store i32 %v3_107a0, i32* %ip.global-to-local, align 4
  %v2_107a4 = add i32 %v0_107a0, 4
  %v3_107a4 = inttoptr i32 %v2_107a4 to i32*
  store i32 -1, i32* %v3_107a4, align 4
  %v0_107a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_107a8 = load i32, i32* @r6, align 4
  %v2_107a8 = add i32 %v1_107a8, 12
  %v3_107a8 = inttoptr i32 %v2_107a8 to i32*
  store i32 %v0_107a8, i32* %v3_107a8, align 4
  br label %dec_label_pc_107ac

dec_label_pc_107ac:                               ; preds = %.thread236, %dec_label_pc_10994, %dec_label_pc_108e0, %dec_label_pc_1082c, %dec_label_pc_10b94, %dec_label_pc_10ad0, %dec_label_pc_10620, %dec_label_pc_104fc, %dec_label_pc_10464, %dec_label_pc_103cc, %dec_label_pc_10358, %dec_label_pc_10790
  %v0_107ac = load i32, i32* %ip.global-to-local, align 4
  %v1_107ac = load i32, i32* @r7, align 4
  %v2_107ac = sub i32 %v0_107ac, %v1_107ac
  %v3_107ac = icmp uge i32 %v0_107ac, %v1_107ac
  store i1 %v3_107ac, i1* %cpsr_c.global-to-local, align 1
  %v4_107ac = xor i32 %v1_107ac, %v0_107ac
  %v5_107ac = xor i32 %v2_107ac, %v0_107ac
  %v6_107ac = and i32 %v5_107ac, %v4_107ac
  %v7_107ac = icmp slt i32 %v6_107ac, 0
  %v8_107ac = icmp slt i32 %v2_107ac, 0
  %v9_107ac = icmp eq i32 %v0_107ac, %v1_107ac
  store i1 %v9_107ac, i1* %cpsr_z.global-to-local, align 1
  %v2_107b0 = xor i1 %v8_107ac, %v7_107ac
  %v0_107ac.v1_107ac = select i1 %v2_107b0, i32 %v0_107ac, i32 %v1_107ac
  store i32 %v0_107ac.v1_107ac, i32* %r1.global-to-local, align 4
  %v2_107b8 = sub i32 %v0_107ac, %v0_107ac.v1_107ac
  store i32 %v2_107b8, i32* @r2, align 4
  %v1_107bc = load i32, i32* @r6, align 4
  %v2_107bc = add i32 %v1_107bc, 24
  %v3_107bc = inttoptr i32 %v2_107bc to i32*
  store i32 %v2_107b8, i32* %v3_107bc, align 4
  %v0_107c0 = load i32, i32* @sb, align 4
  %v1_107c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_107c0 = add i32 %v1_107c0, %v0_107c0
  store i32 %v2_107c0, i32* @r1, align 4
  store i32 %v0_107c0, i32* @r0, align 4
  %v3_107c8 = call i32 @function_12420(i32 %v0_107c0, i32 %v2_107c0, i32 %v2_107b8)
  store i32 %v3_107c8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10240

dec_label_pc_107d0:                               ; preds = %dec_label_pc_10240
  %v1_107d0 = add i32 %v0_10240, 24
  %v2_107d0 = inttoptr i32 %v1_107d0 to i32*
  %v3_107d0 = load i32, i32* %v2_107d0, align 4
  store i32 %v3_107d0, i32* %ip.global-to-local, align 4
  %v1_107d4 = add i32 %v3_107d0, -1
  store i32 %v1_107d4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_107d8 = icmp eq i32 %v1_107d4, 0
  store i1 %v2_107d8, i1* %cpsr_z.global-to-local, align 1
  %v5_107dc = icmp sgt i32 %v1_107d4, 0
  br i1 %v5_107dc, label %dec_label_pc_10804, label %dec_label_pc_101c0.backedge.thread

dec_label_pc_107e4:                               ; preds = %bb371
  %v2_107e4 = icmp ugt i8 %v3_10808, 35
  store i1 %v2_107e4, i1* %cpsr_c.global-to-local, align 1
  %v7_107e4 = icmp eq i8 %v3_10808, 36
  store i1 %v7_107e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107e4, label %dec_label_pc_10818, label %dec_label_pc_107ec

dec_label_pc_107ec:                               ; preds = %dec_label_pc_107e4
  %v2_107ec = icmp ugt i8 %v3_10808, 34
  store i1 %v2_107ec, i1* %cpsr_c.global-to-local, align 1
  %v7_107ec = icmp eq i8 %v3_10808, 35
  store i1 %v7_107ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107ec, label %dec_label_pc_10818, label %dec_label_pc_107f4

dec_label_pc_107f4:                               ; preds = %dec_label_pc_107ec
  %v2_107f4 = icmp ugt i8 %v3_10808, 36
  store i1 %v2_107f4, i1* %cpsr_c.global-to-local, align 1
  %v7_107f4 = icmp eq i8 %v3_10808, 37
  store i1 %v7_107f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107f4, label %dec_label_pc_10818, label %dec_label_pc_107fc

dec_label_pc_107fc:                               ; preds = %dec_label_pc_107f4
  %v1_107fc = add i32 %v0_10818, -1
  store i32 %v1_107fc, i32* %r0.global-to-local, align 4
  %v2_107fc = icmp ne i32 %v0_10818, 0
  store i1 %v2_107fc, i1* %cpsr_c.global-to-local, align 1
  %v7_107fc = icmp eq i32 %v0_10818, 1
  store i1 %v7_107fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107fc, label %dec_label_pc_101c0.backedge.thread491, label %dec_label_pc_10804

dec_label_pc_10804:                               ; preds = %dec_label_pc_107d0, %dec_label_pc_107fc
  %v0_10818 = phi i32 [ %v1_107fc, %dec_label_pc_107fc ], [ %v1_107d4, %dec_label_pc_107d0 ]
  %v2_10804 = add i32 %v0_10818, %v0_10240
  store i32 %v2_10804, i32* %r3.global-to-local, align 4
  %v1_10808 = add i32 %v2_10804, 28
  %v2_10808 = inttoptr i32 %v1_10808 to i8*
  %v3_10808 = load i8, i8* %v2_10808, align 1
  %v4_10808 = zext i8 %v3_10808 to i32
  store i32 %v4_10808, i32* %r3.global-to-local, align 4
  %v2_1080c = icmp ugt i8 %v3_10808, 61
  store i1 %v2_1080c, i1* %cpsr_c.global-to-local, align 1
  %v7_1080c = icmp eq i8 %v3_10808, 62
  store i1 %v7_1080c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1080c, label %dec_label_pc_10818, label %bb371

bb371:                                            ; preds = %dec_label_pc_10804
  %v3_10810 = icmp ugt i8 %v3_10808, 57
  store i1 %v3_10810, i1* %cpsr_c.global-to-local, align 1
  %v8_10810 = icmp eq i8 %v3_10808, 58
  store i1 %v8_10810, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10810, label %dec_label_pc_10818, label %dec_label_pc_107e4

dec_label_pc_10818:                               ; preds = %dec_label_pc_10804, %bb371, %dec_label_pc_107f4, %dec_label_pc_107ec, %dec_label_pc_107e4
  %v1_10818 = add i32 %v0_10818, 1
  store i32 %v1_10818, i32* @r7, align 4
  %v2_1081c = icmp eq i32 %v1_10818, -1
  store i1 %v2_1081c, i1* %cpsr_c.global-to-local, align 1
  %v7_1081c = icmp eq i32 %v0_10818, -2
  store i1 %v7_1081c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1081c, label %dec_label_pc_101c0.backedge.thread491, label %dec_label_pc_10824

dec_label_pc_10824:                               ; preds = %dec_label_pc_10818
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10824 = icmp eq i32 %v1_10818, 0
  store i1 %v2_10824, i1* %cpsr_z.global-to-local, align 1
  %tmp372 = icmp slt i32 %v1_10818, 1
  br i1 %tmp372, label %dec_label_pc_10350, label %dec_label_pc_1082c

dec_label_pc_1082c:                               ; preds = %dec_label_pc_10824
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_10830 = call i32 @function_10e30(i32 9)
  store i32 %v2_10130, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_10840 = call i32 @function_10d4c(i32 9, i32* nonnull %stack_var_-56)
  store i32 %v3_10840, i32* %r0.global-to-local, align 4
  %v3_10844 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10844, i32* %r2.global-to-local, align 4
  store i32 %v3_10840, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10850 = load i32, i32* @r6, align 4
  %v1_10850 = add i32 %v0_10850, 4
  %v2_10850 = inttoptr i32 %v1_10850 to i32*
  %v3_10850 = load i32, i32* %v2_10850, align 4
  store i32 %v3_10850, i32* %r0.global-to-local, align 4
  %v4_10854 = inttoptr i32 %v3_10840 to i32*
  %v5_10854 = call i32 @function_1267c(i32 %v3_10850, i32* %v4_10854, i32 %v3_10844, i32 16384)
  store i32 %v5_10854, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_14724.204 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10864 = load i32, i32* @r6, align 4
  %v1_10864 = add i32 %v0_10864, 4
  %v2_10864 = inttoptr i32 %v1_10864 to i32*
  %v3_10864 = load i32, i32* %v2_10864, align 4
  store i32 %v3_10864, i32* %r0.global-to-local, align 4
  %v5_10868 = call i32 @function_1267c(i32 %v3_10864, i32* bitcast ([3 x i8]* @global_var_14724.204 to i32*), i32 2, i32 16384)
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_10870 = call i32 @function_10d78(i32 9)
  store i32 %v1_10870, i32* %r0.global-to-local, align 4
  %v0_10874 = load i32, i32* @r6, align 4
  %v1_10874 = add i32 %v0_10874, 24
  %v2_10874 = inttoptr i32 %v1_10874 to i32*
  %v3_10874 = load i32, i32* %v2_10874, align 4
  store i32 %v3_10874, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_1087c = add i32 %v0_10874, 12
  %v3_1087c = inttoptr i32 %v2_1087c to i32*
  store i32 9, i32* %v3_1087c, align 4
  br label %dec_label_pc_107ac

dec_label_pc_10884:                               ; preds = %dec_label_pc_10240
  %v1_10884 = add i32 %v0_10240, 24
  %v2_10884 = inttoptr i32 %v1_10884 to i32*
  %v3_10884 = load i32, i32* %v2_10884, align 4
  store i32 %v3_10884, i32* %ip.global-to-local, align 4
  %v1_10888 = add i32 %v3_10884, -1
  store i32 %v1_10888, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1088c = icmp eq i32 %v1_10888, 0
  store i1 %v2_1088c, i1* %cpsr_z.global-to-local, align 1
  %v5_10890 = icmp sgt i32 %v1_10888, 0
  br i1 %v5_10890, label %dec_label_pc_108b8, label %dec_label_pc_101c0.backedge.thread

dec_label_pc_10898:                               ; preds = %bb373
  %v2_10898 = icmp ugt i8 %v3_108bc, 35
  store i1 %v2_10898, i1* %cpsr_c.global-to-local, align 1
  %v7_10898 = icmp eq i8 %v3_108bc, 36
  store i1 %v7_10898, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10898, label %dec_label_pc_108cc, label %dec_label_pc_108a0

dec_label_pc_108a0:                               ; preds = %dec_label_pc_10898
  %v2_108a0 = icmp ugt i8 %v3_108bc, 34
  store i1 %v2_108a0, i1* %cpsr_c.global-to-local, align 1
  %v7_108a0 = icmp eq i8 %v3_108bc, 35
  store i1 %v7_108a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108a0, label %dec_label_pc_108cc, label %dec_label_pc_108a8

dec_label_pc_108a8:                               ; preds = %dec_label_pc_108a0
  %v2_108a8 = icmp ugt i8 %v3_108bc, 36
  store i1 %v2_108a8, i1* %cpsr_c.global-to-local, align 1
  %v7_108a8 = icmp eq i8 %v3_108bc, 37
  store i1 %v7_108a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108a8, label %dec_label_pc_108cc, label %dec_label_pc_108b0

dec_label_pc_108b0:                               ; preds = %dec_label_pc_108a8
  %v1_108b0 = add i32 %v0_108cc, -1
  store i32 %v1_108b0, i32* %r0.global-to-local, align 4
  %v2_108b0 = icmp ne i32 %v0_108cc, 0
  store i1 %v2_108b0, i1* %cpsr_c.global-to-local, align 1
  %v7_108b0 = icmp eq i32 %v0_108cc, 1
  store i1 %v7_108b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108b0, label %dec_label_pc_101c0.backedge.thread491, label %dec_label_pc_108b8

dec_label_pc_108b8:                               ; preds = %dec_label_pc_10884, %dec_label_pc_108b0
  %v0_108cc = phi i32 [ %v1_108b0, %dec_label_pc_108b0 ], [ %v1_10888, %dec_label_pc_10884 ]
  %v2_108b8 = add i32 %v0_108cc, %v0_10240
  store i32 %v2_108b8, i32* %r3.global-to-local, align 4
  %v1_108bc = add i32 %v2_108b8, 28
  %v2_108bc = inttoptr i32 %v1_108bc to i8*
  %v3_108bc = load i8, i8* %v2_108bc, align 1
  %v4_108bc = zext i8 %v3_108bc to i32
  store i32 %v4_108bc, i32* %r3.global-to-local, align 4
  %v2_108c0 = icmp ugt i8 %v3_108bc, 61
  store i1 %v2_108c0, i1* %cpsr_c.global-to-local, align 1
  %v7_108c0 = icmp eq i8 %v3_108bc, 62
  store i1 %v7_108c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108c0, label %dec_label_pc_108cc, label %bb373

bb373:                                            ; preds = %dec_label_pc_108b8
  %v3_108c4 = icmp ugt i8 %v3_108bc, 57
  store i1 %v3_108c4, i1* %cpsr_c.global-to-local, align 1
  %v8_108c4 = icmp eq i8 %v3_108bc, 58
  store i1 %v8_108c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_108c4, label %dec_label_pc_108cc, label %dec_label_pc_10898

dec_label_pc_108cc:                               ; preds = %dec_label_pc_108b8, %bb373, %dec_label_pc_108a8, %dec_label_pc_108a0, %dec_label_pc_10898
  %v1_108cc = add i32 %v0_108cc, 1
  store i32 %v1_108cc, i32* @r7, align 4
  %v2_108d0 = icmp eq i32 %v1_108cc, -1
  store i1 %v2_108d0, i1* %cpsr_c.global-to-local, align 1
  %v7_108d0 = icmp eq i32 %v0_108cc, -2
  store i1 %v7_108d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108d0, label %dec_label_pc_101c0.backedge.thread491, label %dec_label_pc_108d8

dec_label_pc_108d8:                               ; preds = %dec_label_pc_108cc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_108d8 = icmp eq i32 %v1_108cc, 0
  store i1 %v2_108d8, i1* %cpsr_z.global-to-local, align 1
  %tmp374 = icmp slt i32 %v1_108cc, 1
  br i1 %tmp374, label %dec_label_pc_10350, label %dec_label_pc_108e0

dec_label_pc_108e0:                               ; preds = %dec_label_pc_108d8
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_108e4 = call i32 @function_10e30(i32 10)
  store i32 %v2_10130, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_108f4 = call i32 @function_10d4c(i32 10, i32* nonnull %stack_var_-56)
  store i32 %v3_108f4, i32* %r0.global-to-local, align 4
  %v3_108f8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_108f8, i32* %r2.global-to-local, align 4
  store i32 %v3_108f4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10904 = load i32, i32* @r6, align 4
  %v1_10904 = add i32 %v0_10904, 4
  %v2_10904 = inttoptr i32 %v1_10904 to i32*
  %v3_10904 = load i32, i32* %v2_10904, align 4
  store i32 %v3_10904, i32* %r0.global-to-local, align 4
  %v4_10908 = inttoptr i32 %v3_108f4 to i32*
  %v5_10908 = call i32 @function_1267c(i32 %v3_10904, i32* %v4_10908, i32 %v3_108f8, i32 16384)
  store i32 %v5_10908, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_14724.204 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10918 = load i32, i32* @r6, align 4
  %v1_10918 = add i32 %v0_10918, 4
  %v2_10918 = inttoptr i32 %v1_10918 to i32*
  %v3_10918 = load i32, i32* %v2_10918, align 4
  store i32 %v3_10918, i32* %r0.global-to-local, align 4
  %v5_1091c = call i32 @function_1267c(i32 %v3_10918, i32* bitcast ([3 x i8]* @global_var_14724.204 to i32*), i32 2, i32 16384)
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_10924 = call i32 @function_10d78(i32 10)
  store i32 %v1_10924, i32* %r0.global-to-local, align 4
  %v0_10928 = load i32, i32* @r6, align 4
  %v1_10928 = add i32 %v0_10928, 24
  %v2_10928 = inttoptr i32 %v1_10928 to i32*
  %v3_10928 = load i32, i32* %v2_10928, align 4
  store i32 %v3_10928, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_10930 = add i32 %v0_10928, 12
  %v3_10930 = inttoptr i32 %v2_10930 to i32*
  store i32 10, i32* %v3_10930, align 4
  br label %dec_label_pc_107ac

dec_label_pc_10938:                               ; preds = %dec_label_pc_10240
  %v1_10938 = add i32 %v0_10240, 24
  %v2_10938 = inttoptr i32 %v1_10938 to i32*
  %v3_10938 = load i32, i32* %v2_10938, align 4
  store i32 %v3_10938, i32* %ip.global-to-local, align 4
  %v1_1093c = add i32 %v3_10938, -1
  store i32 %v1_1093c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10940 = icmp eq i32 %v1_1093c, 0
  store i1 %v2_10940, i1* %cpsr_z.global-to-local, align 1
  %v5_10944 = icmp sgt i32 %v1_1093c, 0
  br i1 %v5_10944, label %dec_label_pc_1096c, label %dec_label_pc_101c0.backedge.thread

dec_label_pc_1094c:                               ; preds = %bb375
  %v2_1094c = icmp ugt i8 %v3_10970, 35
  store i1 %v2_1094c, i1* %cpsr_c.global-to-local, align 1
  %v7_1094c = icmp eq i8 %v3_10970, 36
  store i1 %v7_1094c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1094c, label %dec_label_pc_10980, label %dec_label_pc_10954

dec_label_pc_10954:                               ; preds = %dec_label_pc_1094c
  %v2_10954 = icmp ugt i8 %v3_10970, 34
  store i1 %v2_10954, i1* %cpsr_c.global-to-local, align 1
  %v7_10954 = icmp eq i8 %v3_10970, 35
  store i1 %v7_10954, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10954, label %dec_label_pc_10980, label %dec_label_pc_1095c

dec_label_pc_1095c:                               ; preds = %dec_label_pc_10954
  %v2_1095c = icmp ugt i8 %v3_10970, 36
  store i1 %v2_1095c, i1* %cpsr_c.global-to-local, align 1
  %v7_1095c = icmp eq i8 %v3_10970, 37
  store i1 %v7_1095c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1095c, label %dec_label_pc_10980, label %dec_label_pc_10964

dec_label_pc_10964:                               ; preds = %dec_label_pc_1095c
  %v1_10964 = add i32 %v0_10980, -1
  store i32 %v1_10964, i32* %r0.global-to-local, align 4
  %v2_10964 = icmp ne i32 %v0_10980, 0
  store i1 %v2_10964, i1* %cpsr_c.global-to-local, align 1
  %v7_10964 = icmp eq i32 %v0_10980, 1
  store i1 %v7_10964, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10964, label %dec_label_pc_101c0.backedge.thread491, label %dec_label_pc_1096c

dec_label_pc_1096c:                               ; preds = %dec_label_pc_10938, %dec_label_pc_10964
  %v0_10980 = phi i32 [ %v1_10964, %dec_label_pc_10964 ], [ %v1_1093c, %dec_label_pc_10938 ]
  %v2_1096c = add i32 %v0_10980, %v0_10240
  store i32 %v2_1096c, i32* %r3.global-to-local, align 4
  %v1_10970 = add i32 %v2_1096c, 28
  %v2_10970 = inttoptr i32 %v1_10970 to i8*
  %v3_10970 = load i8, i8* %v2_10970, align 1
  %v4_10970 = zext i8 %v3_10970 to i32
  store i32 %v4_10970, i32* %r3.global-to-local, align 4
  %v2_10974 = icmp ugt i8 %v3_10970, 61
  store i1 %v2_10974, i1* %cpsr_c.global-to-local, align 1
  %v7_10974 = icmp eq i8 %v3_10970, 62
  store i1 %v7_10974, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10974, label %dec_label_pc_10980, label %bb375

bb375:                                            ; preds = %dec_label_pc_1096c
  %v3_10978 = icmp ugt i8 %v3_10970, 57
  store i1 %v3_10978, i1* %cpsr_c.global-to-local, align 1
  %v8_10978 = icmp eq i8 %v3_10970, 58
  store i1 %v8_10978, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10978, label %dec_label_pc_10980, label %dec_label_pc_1094c

dec_label_pc_10980:                               ; preds = %dec_label_pc_1096c, %bb375, %dec_label_pc_1095c, %dec_label_pc_10954, %dec_label_pc_1094c
  %v1_10980 = add i32 %v0_10980, 1
  store i32 %v1_10980, i32* @r7, align 4
  %v2_10984 = icmp eq i32 %v1_10980, -1
  store i1 %v2_10984, i1* %cpsr_c.global-to-local, align 1
  %v7_10984 = icmp eq i32 %v0_10980, -2
  store i1 %v7_10984, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10984, label %dec_label_pc_101c0.backedge.thread491, label %dec_label_pc_1098c

dec_label_pc_1098c:                               ; preds = %dec_label_pc_10980
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1098c = icmp eq i32 %v1_10980, 0
  store i1 %v2_1098c, i1* %cpsr_z.global-to-local, align 1
  %tmp376 = icmp slt i32 %v1_10980, 1
  br i1 %tmp376, label %dec_label_pc_10350, label %dec_label_pc_10994

dec_label_pc_10994:                               ; preds = %dec_label_pc_1098c
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_10998 = call i32 @function_10e30(i32 6)
  store i32 %v2_1062c, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_109a8 = call i32 @function_10d4c(i32 6, i32* nonnull %stack_var_-48)
  store i32 %v3_109a8, i32* %r0.global-to-local, align 4
  %v3_109ac = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_109ac, i32* %r2.global-to-local, align 4
  store i32 %v3_109a8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_109b8 = load i32, i32* @r6, align 4
  %v1_109b8 = add i32 %v0_109b8, 4
  %v2_109b8 = inttoptr i32 %v1_109b8 to i32*
  %v3_109b8 = load i32, i32* %v2_109b8, align 4
  store i32 %v3_109b8, i32* %r0.global-to-local, align 4
  %v4_109bc = inttoptr i32 %v3_109a8 to i32*
  %v5_109bc = call i32 @function_1267c(i32 %v3_109b8, i32* %v4_109bc, i32 %v3_109ac, i32 16384)
  store i32 %v5_109bc, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_14724.204 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_109cc = load i32, i32* @r6, align 4
  %v1_109cc = add i32 %v0_109cc, 4
  %v2_109cc = inttoptr i32 %v1_109cc to i32*
  %v3_109cc = load i32, i32* %v2_109cc, align 4
  store i32 %v3_109cc, i32* %r0.global-to-local, align 4
  %v5_109d0 = call i32 @function_1267c(i32 %v3_109cc, i32* bitcast ([3 x i8]* @global_var_14724.204 to i32*), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_109d8 = call i32 @function_10d78(i32 6)
  store i32 %v1_109d8, i32* %r0.global-to-local, align 4
  %v0_109dc = load i32, i32* @r6, align 4
  %v1_109dc = add i32 %v0_109dc, 24
  %v2_109dc = inttoptr i32 %v1_109dc to i32*
  %v3_109dc = load i32, i32* %v2_109dc, align 4
  store i32 %v3_109dc, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_109e4 = add i32 %v0_109dc, 12
  %v3_109e4 = inttoptr i32 %v2_109e4 to i32*
  store i32 8, i32* %v3_109e4, align 4
  br label %dec_label_pc_107ac

dec_label_pc_109ec:                               ; preds = %dec_label_pc_102d0
  store i32 ptrtoint (i32* @global_var_14736.206 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_10288, i32* @r0, align 4
  %v3_109f8 = call i32 @function_12410(i32 %v2_10288, i32 ptrtoint (i32* @global_var_14736.206 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_10a04, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_1472d.208 to i32), i32* @r1, align 4
  %v3_10a0c = call i32 @function_12410(i32 %v2_10a04, i32 ptrtoint (i32* @global_var_1472d.208 to i32), i32 9)
  store i32 %v3_10a0c, i32* %r0.global-to-local, align 4
  %v0_10a10 = load i32, i32* @r6, align 4
  %v1_10a10 = add i32 %v0_10a10, 24
  %v2_10a10 = inttoptr i32 %v1_10a10 to i32*
  %v3_10a10 = load i32, i32* %v2_10a10, align 4
  store i32 %v3_10a10, i32* %ip.global-to-local, align 4
  %v0_10a14 = load i32, i32* @r5, align 4
  %v1_10a14 = add i32 %v0_10a14, 2
  store i32 %v1_10a14, i32* %r2.global-to-local, align 4
  %v0_10a18 = load i32, i32* @sb, align 4
  %v2_10a18 = add i32 %v0_10a18, %v3_10a10
  store i32 %v2_10a18, i32* %r3.global-to-local, align 4
  %v3_10a1c = icmp uge i32 %v2_10a18, %v1_10a14
  store i1 %v3_10a1c, i1* %cpsr_c.global-to-local, align 1
  %v9_10a1c = icmp eq i32 %v2_10a18, %v1_10a14
  store i1 %v9_10a1c, i1* %cpsr_z.global-to-local, align 1
  %v2_10a20 = xor i1 %v3_10a1c, true
  %v3_10a20 = or i1 %v9_10a1c, %v2_10a20
  br i1 %v3_10a20, label %dec_label_pc_109ec.dec_label_pc_10340.loopexit_crit_edge, label %dec_label_pc_10a24

dec_label_pc_109ec.dec_label_pc_10340.loopexit_crit_edge: ; preds = %dec_label_pc_109ec
  %v0_10340.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10340

dec_label_pc_10a24:                               ; preds = %dec_label_pc_109ec
  %v0_10a24 = load i32, i32* @r4, align 4
  %v1_10a24 = add i32 %v0_10a24, 1
  %v2_10a24 = inttoptr i32 %v1_10a24 to i8*
  %v3_10a24 = load i8, i8* %v2_10a24, align 1
  %v4_10a24 = zext i8 %v3_10a24 to i32
  store i32 %v4_10a24, i32* %r3.global-to-local, align 4
  %v2_10a28 = icmp ugt i8 %v3_10a24, 30
  store i1 %v2_10a28, i1* %cpsr_c.global-to-local, align 1
  %v7_10a28 = icmp eq i8 %v3_10a24, 31
  store i1 %v7_10a28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a28, label %dec_label_pc_10b48, label %dec_label_pc_10a30

dec_label_pc_10a30:                               ; preds = %dec_label_pc_10a24
  %v1_10a30 = add i32 %v0_10a24, -1
  %v2_10a30 = inttoptr i32 %v1_10a30 to i8*
  %v3_10a30 = load i8, i8* %v2_10a30, align 1
  %v4_10a30 = zext i8 %v3_10a30 to i32
  store i32 %v4_10a30, i32* %r3.global-to-local, align 4
  %v2_10a34 = icmp ugt i8 %v3_10a30, -4
  store i1 %v2_10a34, i1* %cpsr_c.global-to-local, align 1
  %v7_10a34 = icmp eq i8 %v3_10a30, -3
  store i1 %v7_10a34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a34, label %bb377, label %dec_label_pc_10a40

bb377:                                            ; preds = %dec_label_pc_10a30
  %v1_10a38 = load i32, i32* @r8, align 4
  %v2_10a38 = trunc i32 %v1_10a38 to i8
  store i8 %v2_10a38, i8* %v2_10a30, align 1
  %v0_10a3c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10a3c.pr, label %dec_label_pc_102e4, label %.dec_label_pc_10a40_crit_edge

.dec_label_pc_10a40_crit_edge:                    ; preds = %bb377
  %v0_10a40.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10a40

dec_label_pc_10a40:                               ; preds = %.dec_label_pc_10a40_crit_edge, %dec_label_pc_10a30
  %v0_10a40 = phi i32 [ %v0_10a40.pre, %.dec_label_pc_10a40_crit_edge ], [ %v4_10a30, %dec_label_pc_10a30 ]
  %v2_10a40 = icmp ugt i32 %v0_10a40, 250
  store i1 %v2_10a40, i1* %cpsr_c.global-to-local, align 1
  %v7_10a40 = icmp eq i32 %v0_10a40, 251
  store i1 %v7_10a40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a40, label %bb378, label %dec_label_pc_102e4

bb378:                                            ; preds = %dec_label_pc_10a40
  %v1_10a44 = load i32, i32* %sl.global-to-local, align 4
  %v2_10a44 = trunc i32 %v1_10a44 to i8
  %v3_10a44 = load i32, i32* @r4, align 4
  %v4_10a44 = add i32 %v3_10a44, -1
  %v5_10a44 = inttoptr i32 %v4_10a44 to i8*
  store i8 %v2_10a44, i8* %v5_10a44, align 1
  br label %dec_label_pc_102e4

dec_label_pc_10a4c:                               ; preds = %dec_label_pc_1042c, %dec_label_pc_10408, %dec_label_pc_10448
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_10a50 = call i32 @function_10e30(i32 30)
  store i32 %v2_10130, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_10a60 = call i32 @function_10d4c(i32 30, i32* nonnull %stack_var_-56)
  %v3_10a64 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10a60, i32* %r2.global-to-local, align 4
  %v1_10a6c = add i32 %v3_10a64, -1
  store i32 %v1_10a6c, i32* %r3.global-to-local, align 4
  %v0_10a70 = load i32, i32* @sb, align 4
  store i32 %v0_10a70, i32* %r0.global-to-local, align 4
  %v0_10a74 = load i32, i32* @r6, align 4
  %v1_10a74 = add i32 %v0_10a74, 24
  %v2_10a74 = inttoptr i32 %v1_10a74 to i32*
  %v3_10a74 = load i32, i32* %v2_10a74, align 4
  store i32 %v3_10a74, i32* %r1.global-to-local, align 4
  %v4_10a78 = call i32 @function_115bc(i32 %v0_10a70, i32 %v3_10a74, i32 %v3_10a60, i32 %v1_10a6c)
  store i32 %v4_10a78, i32* %r0.global-to-local, align 4
  %v1_10a7c = add i32 %v4_10a78, 1
  store i32 %v1_10a7c, i32* @r7, align 4
  %v2_10a7c = icmp eq i32 %v4_10a78, -1
  store i1 %v2_10a7c, i1* %cpsr_c.global-to-local, align 1
  %v7_10a7c = icmp eq i32 %v1_10a7c, 0
  store i1 %v7_10a7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a7c, label %thread-pre-split95, label %bb379

bb379:                                            ; preds = %dec_label_pc_10a4c
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split95

thread-pre-split95:                               ; preds = %dec_label_pc_10a4c, %bb379
  %v0_10a84 = phi i1 [ false, %bb379 ], [ true, %dec_label_pc_10a4c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_10a84, i1* %cpsr_z.global-to-local, align 1
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_10bc4 = call i32 @function_10d78(i32 30)
  store i32 %v1_10bc4, i32* %r0.global-to-local, align 4
  br i1 %v0_10a84, label %dec_label_pc_10bc0, label %dec_label_pc_10a8c

dec_label_pc_10a8c:                               ; preds = %thread-pre-split95
  %v0_10a94 = load i32, i32* @r7, align 4
  %v3_10a94 = icmp eq i32 %v0_10a94, -1
  store i1 %v3_10a94, i1* %cpsr_c.global-to-local, align 1
  %v8_10a94 = icmp eq i32 %v0_10a94, -1
  store i1 %v8_10a94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10a94, label %dec_label_pc_101bc.loopexit, label %dec_label_pc_1045c

dec_label_pc_10aa0:                               ; preds = %dec_label_pc_10678
  store i32 %v1_106b4, i32* %r0.global-to-local, align 4
  %v0_10aa8 = load i32, i32* @r6, align 4
  %v1_10aa8 = add i32 %v0_10aa8, 4
  %v2_10aa8 = inttoptr i32 %v1_10aa8 to i32*
  %v3_10aa8 = load i32, i32* %v2_10aa8, align 4
  store i32 %v3_10aa8, i32* %r0.global-to-local, align 4
  %v1_10aac = call i32 @function_11dfc(i32 %v3_10aa8)
  store i32 %v1_10aac, i32* %r0.global-to-local, align 4
  %v0_10ab0 = load i32, i32* @r6, align 4
  %v1_10ab0 = add i32 %v0_10ab0, 384
  %v2_10ab0 = inttoptr i32 %v1_10ab0 to i8*
  %v3_10ab0 = load i8, i8* %v2_10ab0, align 1
  %v4_10ab0 = zext i8 %v3_10ab0 to i32
  %v1_10ab4 = add nuw nsw i32 %v4_10ab0, 1
  %v1_10ab8 = urem i32 %v1_10ab4, 256
  store i32 %v1_10ab8, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_10ac0 = icmp ugt i32 %v1_10ab8, 9
  store i1 %v2_10ac0, i1* %cpsr_c.global-to-local, align 1
  %v7_10ac0 = icmp eq i32 %v1_10ab8, 10
  store i1 %v7_10ac0, i1* %cpsr_z.global-to-local, align 1
  %v2_10ac4 = add i32 %v0_10ab0, 4
  %v3_10ac4 = inttoptr i32 %v2_10ac4 to i32*
  store i32 -1, i32* %v3_10ac4, align 4
  %v0_10ac8 = load i32, i32* %r3.global-to-local, align 4
  %v1_10ac8 = trunc i32 %v0_10ac8 to i8
  %v2_10ac8 = load i32, i32* @r6, align 4
  %v3_10ac8 = add i32 %v2_10ac8, 384
  %v4_10ac8 = inttoptr i32 %v3_10ac8 to i8*
  store i8 %v1_10ac8, i8* %v4_10ac8, align 1
  %v0_10acc = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_10ad0 = load i32, i32* @r6, align 4
  br i1 %v0_10acc, label %dec_label_pc_10ad0, label %dec_label_pc_10b94

dec_label_pc_10ad0:                               ; preds = %dec_label_pc_10aa0
  %v1_10ad0 = add i32 %v0_10ad0, 24
  %v2_10ad0 = inttoptr i32 %v1_10ad0 to i32*
  %v3_10ad0 = load i32, i32* %v2_10ad0, align 4
  store i32 %v3_10ad0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r7, align 4
  %v3_10ae0 = add i32 %v0_10ad0, 384
  %v4_10ae0 = inttoptr i32 %v3_10ae0 to i8*
  store i8 0, i8* %v4_10ae0, align 1
  %v0_10ae4 = load i32, i32* %r3.global-to-local, align 4
  %v1_10ae4 = load i32, i32* @r6, align 4
  %v2_10ae4 = add i32 %v1_10ae4, 12
  %v3_10ae4 = inttoptr i32 %v2_10ae4 to i32*
  store i32 %v0_10ae4, i32* %v3_10ae4, align 4
  br label %dec_label_pc_107ac

dec_label_pc_10aec:                               ; preds = %dec_label_pc_101d8
  br i1 %v2_10200, label %dec_label_pc_10d3c, label %dec_label_pc_10af0

dec_label_pc_10af0:                               ; preds = %dec_label_pc_10aec
  %v3_10af0 = icmp eq i32 %v5_101fc, -1
  store i1 %v3_10af0, i1* %cpsr_c.global-to-local, align 1
  %v8_10af0 = icmp eq i32 %v5_101fc, -1
  store i1 %v8_10af0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10af0, label %dec_label_pc_10af8, label %dec_label_pc_10228

dec_label_pc_10af8:                               ; preds = %dec_label_pc_10af0
  store i32 %stack_var_-1868.0, i32* %ip.global-to-local, align 4
  %v2_10afc = load i32, i32* %v2_101e0, align 4
  store i32 %v2_10afc, i32* %r3.global-to-local, align 4
  %v2_10b00 = icmp ugt i32 %v2_10afc, 10
  store i1 %v2_10b00, i1* %cpsr_c.global-to-local, align 1
  %v7_10b00 = icmp eq i32 %v2_10afc, 11
  store i1 %v7_10b00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b00, label %dec_label_pc_fff4, label %dec_label_pc_10b08

dec_label_pc_10b08:                               ; preds = %dec_label_pc_10af8, %dec_label_pc_10d3c
  %v0_10b08 = load i32, i32* @r6, align 4
  %v1_10b08 = add i32 %v0_10b08, 4
  %v2_10b08 = inttoptr i32 %v1_10b08 to i32*
  %v3_10b08 = load i32, i32* %v2_10b08, align 4
  store i32 %v3_10b08, i32* %r0.global-to-local, align 4
  %v1_10b0c = call i32 @function_11dfc(i32 %v3_10b08)
  store i32 %v1_10b0c, i32* %r0.global-to-local, align 4
  %v0_10b10 = load i32, i32* @r6, align 4
  %v1_10b10 = add i32 %v0_10b10, 384
  %v2_10b10 = inttoptr i32 %v1_10b10 to i8*
  %v3_10b10 = load i8, i8* %v2_10b10, align 1
  %v4_10b10 = zext i8 %v3_10b10 to i32
  %v1_10b14 = add nuw nsw i32 %v4_10b10, 1
  %v1_10b18 = urem i32 %v1_10b14, 256
  store i32 %v1_10b18, i32* %r3.global-to-local, align 4
  %v2_10b1c = icmp ugt i32 %v1_10b18, 8
  store i1 %v2_10b1c, i1* %cpsr_c.global-to-local, align 1
  %v7_10b1c = icmp eq i32 %v1_10b18, 9
  store i1 %v7_10b1c, i1* %cpsr_z.global-to-local, align 1
  %v2_10b20 = xor i1 %v7_10b1c, true
  %v3_10b20 = and i1 %v2_10b1c, %v2_10b20
  br i1 %v3_10b20, label %bb380, label %bb381

bb380:                                            ; preds = %dec_label_pc_10b08
  store i32 0, i32* @lr, align 4
  br label %bb381

bb381:                                            ; preds = %dec_label_pc_10b08, %bb380
  store i32 -1, i32* @r4, align 4
  %v1_10b28 = trunc i32 %v1_10b14 to i8
  store i8 %v1_10b28, i8* %v2_10b10, align 1
  %v0_10b2c = load i32, i32* @r4, align 4
  %v1_10b2c = load i32, i32* @r6, align 4
  %v2_10b2c = add i32 %v1_10b2c, 4
  %v3_10b2c = inttoptr i32 %v2_10b2c to i32*
  store i32 %v0_10b2c, i32* %v3_10b2c, align 4
  %v0_10b30 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_10b30 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_10b30 = xor i1 %v1_10b30, true
  %v3_10b30 = and i1 %v0_10b30, %v2_10b30
  br i1 %v3_10b30, label %bb382, label %.thread241

bb382:                                            ; preds = %bb381
  %v4_10b30 = load i32, i32* @lr, align 4
  %v5_10b30 = load i32, i32* @r6, align 4
  %v6_10b30 = add i32 %v5_10b30, 12
  %v7_10b30 = inttoptr i32 %v6_10b30 to i32*
  store i32 %v4_10b30, i32* %v7_10b30, align 4
  %v4_10b34 = load i32, i32* @lr, align 4
  %v5_10b34 = trunc i32 %v4_10b34 to i8
  %v6_10b34 = load i32, i32* @r6, align 4
  %v7_10b34 = add i32 %v6_10b34, 384
  %v8_10b34 = inttoptr i32 %v7_10b34 to i8*
  store i8 %v5_10b34, i8* %v8_10b34, align 1
  %v0_10b38.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_10b38.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread241

.thread241:                                       ; preds = %bb381, %bb382
  %v1_10b38 = phi i1 [ %v1_10b38.pre, %bb382 ], [ %v1_10b30, %bb381 ]
  %v0_10b38 = phi i1 [ %v0_10b38.pre, %bb382 ], [ %v0_10b30, %bb381 ]
  %v2_10b38 = xor i1 %v1_10b38, true
  %v3_10b38 = and i1 %v0_10b38, %v2_10b38
  br i1 %v3_10b38, label %dec_label_pc_fff4, label %dec_label_pc_10b3c

dec_label_pc_10b3c:                               ; preds = %.thread241
  %v0_10b3c = load i32, i32* @r6, align 4
  store i32 %v0_10b3c, i32* @r0, align 4
  %v0_10b40 = call i32 @function_f378()
  store i32 %v0_10b40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fff4

dec_label_pc_10b48:                               ; preds = %dec_label_pc_10a24
  store i32 %v2_10288, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_10b54 = add i32 %v0_10a10, 4
  %v2_10b54 = inttoptr i32 %v1_10b54 to i32*
  %v3_10b54 = load i32, i32* %v2_10b54, align 4
  store i32 %v3_10b54, i32* %r0.global-to-local, align 4
  %v5_10b58 = call i32 @function_1267c(i32 %v3_10b54, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_10b58, i32* %r0.global-to-local, align 4
  store i32 %v2_109fc, i32* %r1.global-to-local, align 4
  %v0_10b60 = load i32, i32* @r6, align 4
  %v1_10b60 = add i32 %v0_10b60, 4
  %v2_10b60 = inttoptr i32 %v1_10b60 to i32*
  %v3_10b60 = load i32, i32* %v2_10b60, align 4
  store i32 %v3_10b60, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10320

dec_label_pc_10b70:                               ; preds = %dec_label_pc_101c8
  store i32 %.pre, i32* @r0, align 4
  %v1_10b78 = add i32 %v0_10b70, 92
  store i32 %v1_10b78, i32* @r1, align 4
  store i32 292, i32* @r2, align 4
  %v3_10b80 = call i32 @function_12420(i32 %.pre, i32 %v1_10b78, i32 292)
  store i32 %v3_10b80, i32* %r0.global-to-local, align 4
  %v0_10b84 = load i32, i32* @r6, align 4
  %v1_10b84 = add i32 %v0_10b84, 24
  %v2_10b84 = inttoptr i32 %v1_10b84 to i32*
  %v3_10b84 = load i32, i32* %v2_10b84, align 4
  store i32 %v3_10b84, i32* %r3.global-to-local, align 4
  %v1_10b88 = add i32 %v3_10b84, -64
  store i32 %v1_10b88, i32* %ip.global-to-local, align 4
  store i32 %v1_10b88, i32* %v2_10b84, align 4
  br label %dec_label_pc_101d8

dec_label_pc_10b94:                               ; preds = %dec_label_pc_10aa0
  store i32 %v0_10ad0, i32* @r0, align 4
  %v0_10b98 = call i32 @function_f378()
  store i32 %v0_10b98, i32* %r0.global-to-local, align 4
  %v0_10b9c = load i32, i32* @r6, align 4
  %v1_10b9c = add i32 %v0_10b9c, 24
  %v2_10b9c = inttoptr i32 %v1_10b9c to i32*
  %v3_10b9c = load i32, i32* %v2_10b9c, align 4
  store i32 %v3_10b9c, i32* %ip.global-to-local, align 4
  %v0_10ba0 = load i32, i32* @r4, align 4
  store i32 %v0_10ba0, i32* @r7, align 4
  br label %dec_label_pc_107ac

dec_label_pc_10ba8:                               ; preds = %dec_label_pc_100dc, %dec_label_pc_10094
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10bac

dec_label_pc_10bac:                               ; preds = %dec_label_pc_10104, %dec_label_pc_10ba8
  %v0_10bb4 = phi i32 [ 0, %dec_label_pc_10ba8 ], [ %v0_100e4, %dec_label_pc_10104 ]
  %v0_10bac = load i32, i32* @r6, align 4
  %v1_10bac = add i32 %v0_10bac, 4
  %v2_10bac = inttoptr i32 %v1_10bac to i32*
  %v3_10bac = load i32, i32* %v2_10bac, align 4
  store i32 %v3_10bac, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_10bb4 = inttoptr i32 %v0_10bac to i32*
  store i32 %v0_10bb4, i32* %v2_10bb4, align 4
  %v0_10bb8 = load i32, i32* %ip.global-to-local, align 4
  %v1_10bb8 = load i32, i32* @r6, align 4
  %v2_10bb8 = add i32 %v1_10bb8, 24
  %v3_10bb8 = inttoptr i32 %v2_10bb8 to i32*
  store i32 %v0_10bb8, i32* %v3_10bb8, align 4
  %v0_ffd0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ffd0

dec_label_pc_10bc0:                               ; preds = %thread-pre-split95
  %v0_10bc8 = load i32, i32* @r6, align 4
  %v1_10bc8 = add i32 %v0_10bc8, 12
  %v2_10bc8 = inttoptr i32 %v1_10bc8 to i32*
  %v3_10bc8 = load i32, i32* %v2_10bc8, align 4
  br label %dec_label_pc_101c0.backedge

dec_label_pc_10bd0:                               ; preds = %dec_label_pc_10054
  %v0_10bd0 = load i32, i32* @r6, align 4
  %v1_10bd0 = add i32 %v0_10bd0, 4
  %v2_10bd0 = inttoptr i32 %v1_10bd0 to i32*
  %v3_10bd0 = load i32, i32* %v2_10bd0, align 4
  store i32 %v3_10bd0, i32* %r0.global-to-local, align 4
  %v1_10bd4 = call i32 @function_11dfc(i32 %v3_10bd0)
  store i32 %v1_10bd4, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_10bdc = load i32, i32* @r5, align 4
  %v1_10bdc = load i32, i32* @r6, align 4
  %v2_10bdc = add i32 %v1_10bdc, 12
  %v3_10bdc = inttoptr i32 %v2_10bdc to i32*
  store i32 %v0_10bdc, i32* %v3_10bdc, align 4
  %v0_10be0 = load i32, i32* %r4.global-to-local, align 4
  %v1_10be0 = load i32, i32* @r6, align 4
  %v2_10be0 = add i32 %v1_10be0, 4
  %v3_10be0 = inttoptr i32 %v2_10be0 to i32*
  store i32 %v0_10be0, i32* %v3_10be0, align 4
  %v0_10be4 = load i32, i32* @r5, align 4
  %v1_10be4 = trunc i32 %v0_10be4 to i8
  %v2_10be4 = load i32, i32* @r6, align 4
  %v3_10be4 = add i32 %v2_10be4, 384
  %v4_10be4 = inttoptr i32 %v3_10be4 to i8*
  store i8 %v1_10be4, i8* %v4_10be4, align 1
  br label %dec_label_pc_fff4

dec_label_pc_10bec:                               ; preds = %dec_label_pc_1017c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_10bf0 = call i32 @function_10d78(i32 31)
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_10bf8 = call i32 @function_10d78(i32 32)
  store i32 %v1_10bf8, i32* %r0.global-to-local, align 4
  %v0_10bfc = load i32, i32* @r6, align 4
  %v1_10bfc = add i32 %v0_10bfc, 12
  %v2_10bfc = inttoptr i32 %v1_10bfc to i32*
  %v3_10bfc = load i32, i32* %v2_10bfc, align 4
  br label %dec_label_pc_101c0.backedge

dec_label_pc_101c0.backedge.thread:               ; preds = %dec_label_pc_104a0, %dec_label_pc_10554, %dec_label_pc_107d0, %dec_label_pc_10884, %dec_label_pc_10938
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_101c8

dec_label_pc_101c0.backedge.thread491:            ; preds = %dec_label_pc_104cc, %dec_label_pc_105f0, %dec_label_pc_10964, %dec_label_pc_107fc, %dec_label_pc_108b0, %dec_label_pc_104e8, %dec_label_pc_1060c, %dec_label_pc_10818, %dec_label_pc_108cc, %dec_label_pc_10980
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_101c8

dec_label_pc_101c0.backedge:                      ; preds = %dec_label_pc_10bec, %dec_label_pc_10bc0
  %storemerge494 = phi i32 [ %v3_10bc8, %dec_label_pc_10bc0 ], [ %v3_10bfc, %dec_label_pc_10bec ]
  %v0_101c0.be = phi i32 [ %v3_10bc8, %dec_label_pc_10bc0 ], [ %v3_10bfc, %dec_label_pc_10bec ]
  %v0_101c8148 = phi i32 [ %v0_10bc8, %dec_label_pc_10bc0 ], [ %v0_10bfc, %dec_label_pc_10bec ]
  store i32 %storemerge494, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_101c0 = icmp eq i32 %v0_101c0.be, 0
  store i1 %v2_101c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_101c0, label %dec_label_pc_fff4, label %dec_label_pc_101c8

dec_label_pc_10c04:                               ; preds = %dec_label_pc_10768
  store i32 2, i32* @r6, align 4
  %v1_10c08 = add i32 %v2_10784, 4
  %v2_10c08 = inttoptr i32 %v1_10c08 to i32*
  %v3_10c08 = load i32, i32* %v2_10c08, align 4
  store i32 %v3_10c08, i32* @r4, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v0_10c14 = call i32 @function_eb90()
  store i32 %v0_10c14, i32* %r0.global-to-local, align 4
  %v0_10c18 = load i32, i32* @r8, align 4
  %v1_10c18 = inttoptr i32 %v0_10c18 to i8*
  %v2_10c18 = load i8, i8* %v1_10c18, align 1
  %v3_10c18 = zext i8 %v2_10c18 to i32
  store i32 %v3_10c18, i32* %r1.global-to-local, align 4
  %v2_10c1c = call i32 @function_11b84(i32 %v0_10c14, i32 %v3_10c18)
  store i32 %v2_10c1c, i32* %r0.global-to-local, align 4
  %v0_10c20 = load i32, i32* @r4, align 4
  %v2_10c20 = and i32 %v2_10c1c, 1073741824
  %v3_10c20 = icmp ne i32 %v2_10c20, 0
  store i1 %v3_10c20, i1* %cpsr_c.global-to-local, align 1
  %v4_10c20 = mul i32 %v2_10c1c, 4
  %v5_10c20 = add i32 %v0_10c20, %v4_10c20
  %v6_10c20 = inttoptr i32 %v5_10c20 to i32*
  %v7_10c20 = load i32, i32* %v6_10c20, align 4
  store i32 %v7_10c20, i32* %r3.global-to-local, align 4
  %v0_10c24 = load i32, i32* @sl, align 4
  store i32 %v0_10c24, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_10c30 = inttoptr i32 %v0_10c24 to i32*
  %v3_10c30 = call i32 @function_10d4c(i32 4, i32* %v2_10c30)
  %v4_10c30 = inttoptr i32 %v3_10c30 to i8*
  store i32 %v3_10c30, i32* %r0.global-to-local, align 4
  %v2_10c34 = add i32 %v3_10c30, 1
  %v3_10c34 = inttoptr i32 %v2_10c34 to i8*
  %v4_10c34 = load i8, i8* %v3_10c34, align 1
  %v5_10c34 = zext i8 %v4_10c34 to i32
  store i32 %v5_10c34, i32* %r2.global-to-local, align 4
  %v3_10c38 = load i8, i8* %v4_10c30, align 1
  %v4_10c38 = zext i8 %v3_10c38 to i32
  %v4_10c3c = mul nuw nsw i32 %v5_10c34, 256
  %v5_10c3c = or i32 %v4_10c38, %v4_10c3c
  store i32 %v5_10c3c, i32* %r3.global-to-local, align 4
  %v1_10c40 = and i32 %v4_10c38, 128
  %v2_10c40 = icmp ne i32 %v1_10c40, 0
  store i1 %v2_10c40, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_10c34, i32* %r1.global-to-local, align 4
  %v0_10c44 = load i32, i32* @r8, align 4
  store i32 %v0_10c44, i32* %r0.global-to-local, align 4
  %v6_10c50 = call i32 @function_edf4(i32 %v0_10c44)
  store i32 3, i32* %r0.global-to-local, align 4
  %v1_10c58 = call i32 @function_10d78(i32 3)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_10c60 = call i32 @function_10d78(i32 4)
  %v0_10c68 = load i32, i32* @r5, align 4
  store i32 %v0_10c68, i32* %r0.global-to-local, align 4
  store i32 %v2_10c6c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_10c74 = call i32 @function_12568(i32 %v0_10c68, %sockaddr* %v3_10c74, i32 16)
  store i32 %v4_10c74, i32* %r0.global-to-local, align 4
  %v3_10c78 = icmp eq i32 %v4_10c74, -1
  store i1 %v3_10c78, i1* %cpsr_c.global-to-local, align 1
  %v8_10c78 = icmp eq i32 %v4_10c74, -1
  store i1 %v8_10c78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10c78, label %dec_label_pc_10c80, label %dec_label_pc_10c90

dec_label_pc_10c80:                               ; preds = %dec_label_pc_10c04
  %v0_10c80 = load i32, i32* @r5, align 4
  store i32 %v0_10c80, i32* %r0.global-to-local, align 4
  %v1_10c84 = call i32 @function_11dfc(i32 %v0_10c80)
  %v0_10c88 = load i32, i32* @sl, align 4
  store i32 %v0_10c88, i32* %r0.global-to-local, align 4
  %v1_10c8c = call i32 @function_13194(i32 %v0_10c88)
  store i32 %v1_10c8c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10c90

dec_label_pc_10c90:                               ; preds = %dec_label_pc_10c04, %dec_label_pc_10c80
  store i32 %v2_10130, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10ca0 = load i32, i32* @r5, align 4
  store i32 %v0_10ca0, i32* %r0.global-to-local, align 4
  %v0_10ca4 = load i32, i32* @sl, align 4
  store i32 %v0_10ca4, i32* %stack_var_-56, align 4
  %v6_10ca8 = call i32 @function_1267c(i32 %v0_10ca0, i32* nonnull %stack_var_-56, i32 1, i32 16384)
  store i32 %v2_1062c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10cbc = load i32, i32* @r5, align 4
  store i32 %v0_10cbc, i32* %r0.global-to-local, align 4
  %v5_10cc0 = call i32 @function_1267c(i32 %v0_10cbc, i32* nonnull %stack_var_-48, i32 4, i32 16384)
  %v0_10cc8 = load i32, i32* @r6, align 4
  store i32 %v0_10cc8, i32* %r2.global-to-local, align 4
  store i32 %v2_10ccc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10cd4 = load i32, i32* @r5, align 4
  store i32 %v0_10cd4, i32* %r0.global-to-local, align 4
  %v5_10cd8 = call i32 @function_1267c(i32 %v0_10cd4, i32* nonnull %stack_var_-38, i32 %v0_10cc8, i32 16384)
  %v0_10cdc = load i32, i32* @fp, align 4
  %v1_10cdc = add i32 %v0_10cdc, 12
  store i32 %v1_10cdc, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10ce8 = load i32, i32* @r5, align 4
  store i32 %v0_10ce8, i32* %r0.global-to-local, align 4
  %v4_10cec = inttoptr i32 %v1_10cdc to i32*
  %v5_10cec = call i32 @function_1267c(i32 %v0_10ce8, i32* %v4_10cec, i32 1, i32 16384)
  store i32 %v5_10cec, i32* %r0.global-to-local, align 4
  %v0_10cf0 = load i32, i32* @fp, align 4
  %v1_10cf0 = inttoptr i32 %v0_10cf0 to i32*
  %v2_10cf0 = load i32, i32* %v1_10cf0, align 4
  store i32 %v2_10cf0, i32* %r1.global-to-local, align 4
  %v1_10cf4 = add i32 %v0_10cf0, 12
  %v2_10cf4 = inttoptr i32 %v1_10cf4 to i8*
  %v3_10cf4 = load i8, i8* %v2_10cf4, align 1
  %v4_10cf4 = zext i8 %v3_10cf4 to i32
  store i32 %v4_10cf4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10cfc = load i32, i32* @r5, align 4
  store i32 %v0_10cfc, i32* %r0.global-to-local, align 4
  %v4_10d00 = inttoptr i32 %v2_10cf0 to i32*
  %v5_10d00 = call i32 @function_1267c(i32 %v0_10cfc, i32* %v4_10d00, i32 %v4_10cf4, i32 16384)
  %v0_10d04 = load i32, i32* @fp, align 4
  %v1_10d04 = add i32 %v0_10d04, 13
  store i32 %v1_10d04, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10d10 = load i32, i32* @r5, align 4
  store i32 %v0_10d10, i32* %r0.global-to-local, align 4
  %v4_10d14 = inttoptr i32 %v1_10d04 to i32*
  %v5_10d14 = call i32 @function_1267c(i32 %v0_10d10, i32* %v4_10d14, i32 1, i32 16384)
  %v0_10d18 = load i32, i32* @r5, align 4
  store i32 %v0_10d18, i32* %r0.global-to-local, align 4
  %v0_10d1c = load i32, i32* @fp, align 4
  %v1_10d1c = add i32 %v0_10d1c, 13
  %v2_10d1c = inttoptr i32 %v1_10d1c to i8*
  %v3_10d1c = load i8, i8* %v2_10d1c, align 1
  %v4_10d1c = zext i8 %v3_10d1c to i32
  store i32 %v4_10d1c, i32* %r2.global-to-local, align 4
  %v1_10d20 = add i32 %v0_10d1c, 4
  %v2_10d20 = inttoptr i32 %v1_10d20 to i32*
  %v3_10d20 = load i32, i32* %v2_10d20, align 4
  store i32 %v3_10d20, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10d28 = inttoptr i32 %v3_10d20 to i32*
  %v5_10d28 = call i32 @function_1267c(i32 %v0_10d18, i32* %v4_10d28, i32 %v4_10d1c, i32 16384)
  %v0_10d2c = load i32, i32* @r5, align 4
  store i32 %v0_10d2c, i32* %r0.global-to-local, align 4
  %v1_10d30 = call i32 @function_11dfc(i32 %v0_10d2c)
  store i32 %v1_10d30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10d34

dec_label_pc_10d34:                               ; preds = %dec_label_pc_1074c, %dec_label_pc_10c90
  %v0_10d34 = load i32, i32* @sl, align 4
  store i32 %v0_10d34, i32* %r0.global-to-local, align 4
  %v1_10d38 = call i32 @function_13194(i32 %v0_10d34)
  store i32 %v1_10d38, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10d3c

dec_label_pc_10d3c:                               ; preds = %dec_label_pc_10aec, %dec_label_pc_10d34
  store i32 %stack_var_-1868.0, i32* %r2.global-to-local, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 104, i32* %v2_101e0, align 4
  br label %dec_label_pc_10b08

; uselistorder directives
  uselistorder i32 %v4_10c38, { 1, 0 }
  uselistorder i32 %v5_10c34, { 1, 0, 2 }
  uselistorder i32 %v2_10c1c, { 1, 0, 2 }
  uselistorder i32 %v3_10bfc, { 1, 0 }
  uselistorder i32 %v3_10bc8, { 1, 0 }
  uselistorder i32 %v3_10b60, { 1, 0 }
  uselistorder i1 %v1_10b30, { 1, 0 }
  uselistorder i32 %v1_10b18, { 2, 1, 0 }
  uselistorder i32 %v1_10b14, { 1, 0 }
  uselistorder i32 %v0_10ad0, { 1, 0, 2 }
  uselistorder i32 %v1_10ab8, { 2, 1, 0 }
  uselistorder i32 %v0_10a94, { 0, 2, 1 }
  uselistorder i1 %v0_10a84, { 1, 0 }
  uselistorder i32 %v4_10a78, { 1, 0, 2 }
  uselistorder i32 %v0_10a10, { 1, 2, 0 }
  uselistorder i1 %v7_10984, { 1, 0 }
  uselistorder i32 %v1_10980, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10978, { 1, 0 }
  uselistorder i8 %v3_10970, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10980, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_1095c, { 1, 0 }
  uselistorder i1 %v7_10954, { 1, 0 }
  uselistorder i1 %v7_1094c, { 1, 0 }
  uselistorder i1 %v7_108d0, { 1, 0 }
  uselistorder i32 %v1_108cc, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_108c4, { 1, 0 }
  uselistorder i8 %v3_108bc, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_108cc, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_108a8, { 1, 0 }
  uselistorder i1 %v7_108a0, { 1, 0 }
  uselistorder i1 %v7_10898, { 1, 0 }
  uselistorder i1 %v7_1081c, { 1, 0 }
  uselistorder i32 %v1_10818, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10810, { 1, 0 }
  uselistorder i8 %v3_10808, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10818, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_107f4, { 1, 0 }
  uselistorder i1 %v7_107ec, { 1, 0 }
  uselistorder i1 %v7_107e4, { 1, 0 }
  uselistorder i32 %v0_107c0, { 1, 2, 0 }
  uselistorder i32 %v2_107ac, { 1, 0 }
  uselistorder i32 %v1_107ac, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_107ac, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i1 %v7_1075c, { 1, 0 }
  uselistorder i32 %v3_10758, { 1, 0, 2, 3 }
  uselistorder i1 %v2_10744, { 1, 0 }
  uselistorder i32 %.387, { 1, 0 }
  uselistorder i1 %v7_1072c, { 1, 0 }
  uselistorder i32 %v0_10728, { 2, 1, 0, 3 }
  uselistorder i32 %v4_10708, { 1, 0, 2 }
  uselistorder i32 %v4_10704, { 1, 0, 2 }
  uselistorder i1 %v7_106f4, { 1, 0 }
  uselistorder i32 %v0_106f4, { 3, 2, 0, 4, 1 }
  uselistorder i1 %v7_10610, { 1, 0 }
  uselistorder i32 %v1_1060c, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10604, { 1, 0 }
  uselistorder i8 %v3_105fc, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1060c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_105e8, { 1, 0 }
  uselistorder i1 %v7_105e0, { 1, 0 }
  uselistorder i1 %v7_105d8, { 1, 0 }
  uselistorder i1 %v7_104ec, { 1, 0 }
  uselistorder i32 %v1_104e8, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_104e0, { 1, 0 }
  uselistorder i8 %v3_104d8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_104e8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_104c4, { 1, 0 }
  uselistorder i1 %v7_104bc, { 1, 0 }
  uselistorder i1 %v7_104b4, { 1, 0 }
  uselistorder i32 %v0_1045c, { 2, 1, 0 }
  uselistorder i1 %v7_1044c, { 1, 0 }
  uselistorder i1 %v8_10440, { 1, 0 }
  uselistorder i8 %v3_10438, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_10448, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10424, { 1, 0 }
  uselistorder i1 %v7_1041c, { 1, 0 }
  uselistorder i32 %v0_103c4, { 2, 1, 0 }
  uselistorder i1 %v7_103ac, { 1, 0 }
  uselistorder i1 %v8_103a0, { 1, 0 }
  uselistorder i8 %v3_10398, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_103a8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10384, { 1, 0 }
  uselistorder i1 %v7_1037c, { 1, 0 }
  uselistorder i1 %v7_10374, { 1, 0 }
  uselistorder i32 %v0_10350.pre, { 0, 2, 1 }
  uselistorder i32 %v1_10338, { 1, 0 }
  uselistorder i32 %v1_10334, { 1, 0 }
  uselistorder i32 %v1_1032c, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_10328, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_10328, { 0, 2, 1 }
  uselistorder i1 %v7_102d0, { 1, 0 }
  uselistorder i1 %v2_102bc, { 1, 0, 2 }
  uselistorder i1 %v2_102a4, { 1, 0, 2 }
  uselistorder i32 %v1_102c4, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_10298, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_102c0, { 1, 0 }
  uselistorder i32 %v2_102c8, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_10240, { 4, 17, 5, 19, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 2, 11, 12, 20, 1, 0 }
  uselistorder i32 %v1_1021c, { 1, 2, 3, 0 }
  uselistorder i32 %v3_10218, { 1, 0 }
  uselistorder i32 %v5_101fc, { 0, 4, 1, 2, 3, 5, 6, 7 }
  uselistorder i32 %v2_101e8, { 1, 0, 2 }
  uselistorder i32 %v3_101e4, { 1, 0, 2 }
  uselistorder i32 %v0_10b70, { 1, 0, 2 }
  uselistorder i32 %v0_101b4, { 1, 0, 2 }
  uselistorder i1 %v7_10194, { 1, 0 }
  uselistorder i1 %v7_1016c, { 1, 0 }
  uselistorder i32 %v0_100e4, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v3_100c4, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_100b8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10044, { 2, 1, 0 }
  uselistorder i32 %v3_10040, { 1, 0 }
  uselistorder i1 %v7_10028, { 1, 0 }
  uselistorder i32 %v3_10024, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v1_fff8, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_ffe4, { 2, 1, 0 }
  uselistorder i32 %v3_ffe0, { 1, 0 }
  uselistorder i32 %v0_ffe4, { 1, 0 }
  uselistorder i32 %v2_1062c, { 1, 2, 3, 0 }
  uselistorder i32 %v2_10130, { 4, 8, 5, 6, 3, 2, 7, 9, 10, 1, 0 }
  uselistorder i32 %v2_10a04, { 1, 2, 0 }
  uselistorder i32 %v2_10288, { 0, 2, 1 }
  uselistorder i32* %v2_101e0, { 1, 0, 2 }
  uselistorder i32 %v2_ff78, { 1, 0 }
  uselistorder i32 %v1_ff78, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_ff78, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v1_ff48, { 2, 1, 0 }
  uselistorder i32 %v1_ff44, { 1, 0 }
  uselistorder i32 %v2_ff14, { 1, 0 }
  uselistorder i32 %v0_ff14, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_ff0c, { 1, 0 }
  uselistorder i32 %v3_fef4, { 3, 5, 2, 6, 4, 1, 0, 7 }
  uselistorder i1 %v7_fec4, { 0, 3, 1, 2 }
  uselistorder i1 %v2_fec4, { 1, 2, 0 }
  uselistorder i32 %v2_febc, { 0, 3, 4, 5, 2, 1 }
  uselistorder i8 %stack_var_-1876.2, { 3, 5, 4, 2, 1, 0 }
  uselistorder i32 %stack_var_-1880.2, { 3, 5, 4, 2, 1, 0 }
  uselistorder i8* %stack_var_-1884.2, { 3, 5, 4, 2, 1, 0 }
  uselistorder i32 %stack_var_-1872.3, { 3, 5, 4, 2, 1, 0 }
  uselistorder i32 %stack_var_-1868.1, { 3, 5, 4, 2, 1, 0 }
  uselistorder i32 %v1_fe94, { 0, 2, 1, 3, 4, 5 }
  uselistorder i8 %stack_var_-1876.1, { 1, 0 }
  uselistorder i32 %stack_var_-1880.1, { 1, 0 }
  uselistorder i8* %stack_var_-1884.1, { 1, 0 }
  uselistorder i32 %stack_var_-1872.2, { 1, 0 }
  uselistorder i32 %stack_var_-1868.0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_fe88, { 1, 0 }
  uselistorder i32 %v1_fe88, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_fe88, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_fe78, { 1, 0 }
  uselistorder i32 %v3_fe60, { 1, 0, 2 }
  uselistorder i32 %storemerge250, { 1, 0, 2 }
  uselistorder i32 %v3_fddc, { 1, 0 }
  uselistorder i32 %v1_fdc8, { 1, 0 }
  uselistorder i32 %v1_fdb0, { 1, 2, 0 }
  uselistorder i32 %v0_fdbc, { 0, 3, 2, 1 }
  uselistorder i32 %v0_fd7c, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v2_fd70, { 2, 1, 0 }
  uselistorder i32 %v1_fd4c, { 3, 1, 0, 4, 2 }
  uselistorder i1 %v2_fd24, { 1, 0 }
  uselistorder i32 %v4_fcc4, { 2, 3, 0, 1, 5, 4, 6 }
  uselistorder i32 %v1_fc2c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_fb48, { 1, 0 }
  uselistorder i32 %v3_fb40, { 2, 0, 1, 3 }
  uselistorder i32 %v4_fb24, { 1, 0 }
  uselistorder i1 %v2_fa74, { 1, 0 }
  uselistorder i1 %v2_fa60, { 1, 0 }
  uselistorder i1 %v2_fa4c, { 1, 0 }
  uselistorder i32 %.386, { 2, 1, 0 }
  uselistorder i1 %v7_fa28, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_fa10, { 1, 0 }
  uselistorder i1 %v3_f9f4, { 1, 0, 2 }
  uselistorder i1 %v2_f9e0, { 1, 0 }
  uselistorder i1 %v2_f9bc, { 1, 0 }
  uselistorder i32 %v1_f96c, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f958, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 29, 28, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f954, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v4_f944, { 1, 0 }
  uselistorder i32 %v0_f934, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f924, { 1, 0 }
  uselistorder i8 %stack_var_-1876.0, { 1, 0 }
  uselistorder i32 %v0_fcb8, { 5, 2, 3, 6, 0, 1, 4, 7 }
  uselistorder i8* %stack_var_-1884.0, { 3, 2, 0, 1 }
  uselistorder i32 %stack_var_-1872.0, { 0, 3, 2, 1 }
  uselistorder i32 %v4_f7e8, { 1, 0 }
  uselistorder i32 %v0_f7d8, { 2, 0, 1, 3 }
  uselistorder i32 %v3_f7a8, { 1, 0 }
  uselistorder i32 %v4_f794, { 2, 0, 1 }
  uselistorder i32 %v0_f77c, { 0, 2, 1 }
  uselistorder i32 %v0_f724, { 4, 2, 0, 3, 1 }
  uselistorder i1 %v7_f6c8, { 1, 0 }
  uselistorder i32 %v3_f6c0, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_f6a8, { 0, 2, 1 }
  uselistorder i32 %v1_f69c, { 1, 0, 2 }
  uselistorder i32 %v0_f690, { 1, 0 }
  uselistorder i32 %v0_f65c, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %storemerge253, { 1, 0 }
  uselistorder i32 %v0_f5f8, { 3, 1, 2, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 1, 0, 4, 2, 3, 5 }
  uselistorder i32* %stack_var_-64, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 4, 3, 5, 6, 2, 7, 0, 8, 9 }
  uselistorder i32* %stack_var_-56, { 0, 9, 10, 3, 11, 6, 12, 5, 13, 7, 14, 8, 15, 4, 16, 17, 1, 2, 18, 19 }
  uselistorder i32* %stack_var_-84, { 1, 0 }
  uselistorder i32 %tmp263, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32* %r5.global-to-local, { 3, 1, 2, 0, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r3.global-to-local, { 66, 12, 13, 14, 15, 16, 17, 18, 19, 20, 67, 48, 68, 69, 21, 22, 23, 24, 38, 49, 50, 51, 52, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 25, 98, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 61, 62, 63, 45, 46, 47, 53, 54, 55, 56, 57, 58, 59, 60, 70, 71, 72, 73, 74, 75, 64, 65, 76, 77, 79, 78, 80, 81, 82, 83, 84, 86, 88, 87, 85, 89, 91, 92, 93, 99, 94, 95, 96, 97, 100, 147, 148, 101, 149, 150, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 131, 134, 133, 90, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146 }
  uselistorder i32* %r2.global-to-local, { 47, 9, 10, 11, 12, 13, 14, 15, 16, 17, 24, 37, 18, 33, 38, 0, 1, 2, 3, 5, 4, 6, 8, 7, 19, 20, 21, 22, 23, 25, 26, 27, 29, 28, 30, 31, 32, 34, 36, 35, 42, 44, 43, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 45, 46, 55, 56, 57, 58, 59, 61, 63, 62, 129, 60, 64, 65, 66, 67, 71, 68, 69, 70, 72, 75, 73, 76, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128 }
  uselistorder i32* %r1.global-to-local, { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 46, 38, 39, 34, 35, 1, 2, 3, 4, 5, 6, 7, 8, 9, 63, 64, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 40, 41, 0, 47, 48, 49, 50, 51, 42, 43, 44, 45, 52, 53, 54, 56, 55, 57, 58, 59, 60, 65, 61, 62, 77, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 101, 103, 104 }
  uselistorder i32* %r0.global-to-local, { 31, 30, 33, 32, 34, 35, 36, 38, 37, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 51, 50, 52, 53, 123, 124, 125, 142, 141, 54, 143, 117, 119, 118, 144, 146, 145, 56, 55, 57, 99, 98, 101, 100, 102, 103, 120, 1, 0, 2, 4, 3, 6, 5, 7, 8, 9, 10, 12, 11, 14, 13, 16, 15, 17, 18, 19, 20, 22, 21, 24, 23, 26, 25, 27, 28, 29, 126, 59, 58, 60, 62, 61, 63, 64, 66, 65, 67, 69, 68, 70, 72, 71, 73, 74, 75, 76, 77, 78, 80, 79, 82, 81, 84, 83, 85, 86, 87, 89, 88, 90, 92, 91, 94, 93, 95, 96, 97, 105, 104, 107, 106, 111, 108, 109, 110, 128, 127, 130, 129, 113, 112, 114, 115, 116, 122, 121, 149, 147, 132, 131, 133, 135, 134, 137, 136, 138, 139, 140, 156, 148, 151, 150, 152, 153, 155, 154, 157, 160, 158, 159, 161, 163, 165, 162, 164, 167, 166, 169, 168, 170, 172, 171, 173, 174, 175, 176, 177, 179, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 194, 197, 196, 198, 202, 199, 200, 201, 203, 204, 205, 206 }
  uselistorder i32* %ip.global-to-local, { 20, 21, 6, 22, 23, 7, 14, 0, 2, 1, 4, 3, 5, 18, 8, 9, 10, 11, 12, 13, 17, 19, 15, 16, 24, 25, 26, 27, 28, 29, 48, 32, 30, 31, 33, 53, 35, 36, 37, 38, 39, 34, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52 }
  uselistorder i1* %cpsr_z.global-to-local, { 27, 112, 221, 222, 98, 102, 103, 104, 105, 106, 28, 29, 56, 57, 58, 75, 76, 77, 78, 79, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 94, 30, 31, 32, 220, 34, 35, 36, 37, 38, 39, 44, 45, 40, 41, 42, 43, 46, 47, 48, 53, 54, 49, 50, 51, 52, 55, 59, 60, 64, 65, 61, 62, 63, 66, 96, 67, 72, 73, 68, 69, 70, 71, 74, 95, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 212, 107, 108, 109, 110, 111, 213, 97, 33, 99, 100, 101, 113, 115, 114, 116, 117, 119, 121, 120, 214, 118, 122, 123, 124, 125, 126, 127, 132, 128, 129, 130, 131, 215, 216, 217, 218, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 156, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 138, 180, 181, 137, 182, 183, 136, 184, 185, 186, 187, 188, 189, 135, 190, 191, 192, 193, 194, 134, 195, 196, 197, 133, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 219, 211 }
  uselistorder i1* %cpsr_c.global-to-local, { 27, 28, 29, 110, 220, 221, 96, 100, 101, 102, 103, 104, 30, 57, 58, 59, 76, 77, 78, 79, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 92, 31, 32, 33, 219, 34, 35, 36, 37, 38, 39, 40, 45, 46, 41, 42, 43, 44, 47, 48, 49, 54, 55, 50, 51, 52, 53, 56, 60, 61, 65, 66, 62, 63, 64, 67, 94, 68, 73, 74, 69, 70, 71, 72, 75, 93, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 210, 105, 106, 107, 108, 109, 211, 95, 218, 97, 98, 99, 111, 113, 112, 114, 115, 117, 119, 118, 212, 116, 120, 121, 122, 123, 124, 129, 125, 126, 127, 128, 213, 214, 215, 135, 216, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 134, 173, 174, 133, 175, 176, 132, 177, 178, 179, 180, 181, 182, 131, 183, 184, 185, 186, 187, 130, 188, 189, 190, 203, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 217, 209 }
  uselistorder i32 (i32)* @function_edf4, { 1, 0 }
  uselistorder i8 31, { 8, 2, 3, 0, 4, 5, 9, 10, 1, 6, 7 }
  uselistorder i32* @fp, { 3, 4, 5, 6, 7, 49, 50, 51, 0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 1, 46, 47, 48, 52, 2, 53, 54, 55 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_14724.204 to i32*), { 2, 4, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_14724.204, { 1, 0 }
  uselistorder i8 58, { 4, 6, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 62, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 37, { 3, 5, 4, 2, 1, 0 }
  uselistorder i8 34, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 35, { 8, 9, 12, 13, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_1267c, { 6, 7, 8, 9, 10, 11, 12, 19, 0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 21, 22, 20, 27, 23, 24, 25, 26, 28, 29, 31, 30 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i8 -4, { 1, 2, 3, 0 }
  uselistorder i32 1073741824, { 1, 0 }
  uselistorder i32 (i32)* @function_10d78, { 45, 44, 35, 34, 39, 48, 47, 46, 43, 42, 41, 40, 38, 37, 36, 33, 32, 9, 31, 30, 29, 49, 28, 27, 26, 25, 24, 23, 22, 6, 5, 4, 3, 2, 1, 0, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 8, 7 }
  uselistorder i32 (i32, i32, i32, i32)* @function_115bc, { 2, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_10d4c, { 3, 9, 0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 32, 12, 13, 14, 15, 16, 36, 37, 38, 39, 40, 41, 42, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 33 }
  uselistorder i32 (i32)* @function_10e30, { 27, 36, 35, 34, 33, 32, 31, 30, 29, 28, 26, 25, 9, 24, 23, 22, 21, 20, 5, 4, 3, 2, 1, 0, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 7, 6, 8 }
  uselistorder i8* bitcast (i8** @global_var_1d1e8.136 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1d1e9.137, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1d1e8.136 to i32), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_1201c, { 2, 0, 1 }
  uselistorder i32 384, { 3, 4, 5, 0, 1, 2, 6, 7 }
  uselistorder i32 1544, { 1, 0 }
  uselistorder i32 1672, { 2, 0, 1 }
  uselistorder i32 ()* @function_f378, { 3, 2, 1, 0 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i32 5888, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_126a8, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8 }
  uselistorder i32 16384, { 33, 56, 34, 57, 35, 58, 36, 59, 37, 60, 38, 61, 13, 62, 12, 69, 0, 50, 1, 51, 2, 52, 3, 53, 4, 54, 5, 55, 6, 63, 7, 64, 8, 65, 9, 66, 31, 67, 32, 68, 29, 71, 30, 72, 28, 70, 39, 73, 10, 74, 11, 75, 14, 83, 40, 84, 42, 76, 16, 77, 43, 78, 44, 79, 45, 80, 15, 81, 41, 82, 17, 85, 18, 86, 19, 87, 46, 47, 20, 88, 21, 89, 23, 90, 22, 91, 25, 92, 24, 93, 48, 49, 26, 94, 27, 95 }
  uselistorder i32 (i32, i32, i32, i32)* @function_d114, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_11c50, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_d0b8, { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* @global_var_1d1cc.193, { 3, 0, 2, 1 }
  uselistorder i32 16711680, { 3, 0, 1, 2 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 192, { 2, 0, 1 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_146cc.175 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_146b8.171 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32)* @function_f44c, { 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1472c.165 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_14728.163 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i8* @global_var_1d1dd.159, { 1, 0 }
  uselistorder i8 64, { 6, 0, 1, 7, 2, 3, 4, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_1d1d0.150 to i32), { 2, 1, 3, 0, 5, 4, 6, 7 }
  uselistorder i8* @global_var_1d1dc.151, { 1, 0 }
  uselistorder i8** @global_var_1d1bc.146, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1d1bc.146 to i32), { 0, 1, 7, 6, 2, 5, 4, 3 }
  uselistorder i32 1024, { 1, 0 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 65280, { 35, 1, 18, 0, 2, 36, 3, 37, 25, 26, 4, 38, 19, 27, 39, 40, 5, 6, 41, 20, 7, 42, 28, 21, 22, 29, 30, 31, 43, 44, 45, 8, 46, 9, 10, 32, 33, 34, 47, 48, 49, 11, 50, 12, 13, 51, 52, 14, 53, 15, 54, 55, 23, 56, 57, 16, 58, 59, 24, 60, 61, 17 }
  uselistorder i32 ()* @function_eb90, { 74, 73, 72, 71, 70, 69, 68, 64, 67, 66, 65, 63, 62, 61, 60, 59, 58, 20, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 19, 18, 17, 5, 4, 3, 2, 1, 0, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6 }
  uselistorder i32 2048, { 7, 6, 4, 9, 10, 0, 1, 2, 8, 11, 5, 12, 3, 13, 14 }
  uselistorder i32* @global_var_1d254.144, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 355, { 2, 3, 4, 5, 0, 1 }
  uselistorder i32* @global_var_1d250.142, { 1, 2, 3, 0, 4 }
  uselistorder i32 356, { 4, 5, 0, 6, 1, 7, 9, 2, 10, 3, 11, 8 }
  uselistorder i32 388, { 2, 1, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1d1ec.130, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32)* @function_ebe8, { 1, 0 }
  uselistorder i32* @global_var_1d234.50, { 4, 5, 1, 2, 3, 6, 0, 7, 15, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32 ()* @function_117b0, { 2, 1, 0 }
  uselistorder i32* @global_var_1d258.128, { 0, 2, 1 }
  uselistorder i32 ()* @function_11e28, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @sl, { 1, 2, 3, 4, 5, 6, 7, 8, 88, 89, 90, 9, 10, 11, 12, 13, 14, 15, 18, 16, 17, 0, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 35, 36, 37, 38, 39, 40 }
  uselistorder i32* @sb, { 3, 4, 7, 1, 2, 5, 6, 11, 10, 8, 9, 12, 13, 74, 75, 76, 14, 0, 15, 16, 17, 18, 19, 20, 21, 22, 23, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder label %dec_label_pc_10d3c, { 1, 0 }
  uselistorder label %dec_label_pc_10d34, { 1, 0 }
  uselistorder label %dec_label_pc_10c90, { 1, 0 }
  uselistorder label %dec_label_pc_101c0.backedge.thread491, { 9, 2, 8, 4, 7, 3, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_101c0.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10bac, { 1, 0 }
  uselistorder label %.thread241, { 1, 0 }
  uselistorder label %bb381, { 1, 0 }
  uselistorder label %dec_label_pc_10b08, { 1, 0 }
  uselistorder label %thread-pre-split95, { 1, 0 }
  uselistorder label %dec_label_pc_10a4c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10980, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_1096c, { 1, 0 }
  uselistorder label %dec_label_pc_108cc, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_108b8, { 1, 0 }
  uselistorder label %dec_label_pc_10818, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10804, { 1, 0 }
  uselistorder label %dec_label_pc_107ac, { 4, 5, 1, 2, 3, 11, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_10790, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1060c, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_105f8, { 1, 0 }
  uselistorder label %dec_label_pc_104e8, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_104d4, { 1, 0 }
  uselistorder label %dec_label_pc_10448, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_10434, { 1, 0 }
  uselistorder label %dec_label_pc_103c4, { 1, 0 }
  uselistorder label %dec_label_pc_103a8, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10394, { 1, 0 }
  uselistorder label %dec_label_pc_10350, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_10340, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %bb354, { 2, 1, 0 }
  uselistorder label %bb351, { 2, 1, 0 }
  uselistorder label %dec_label_pc_102a0, { 1, 0 }
  uselistorder label %dec_label_pc_102a0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_10228, { 1, 0 }
  uselistorder label %bb348, { 1, 0 }
  uselistorder label %dec_label_pc_101d8, { 1, 0 }
  uselistorder label %dec_label_pc_101c8, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_101c8.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_101bc.loopexit, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_1011c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fff4, { 1, 7, 8, 4, 5, 0, 6, 2, 3 }
  uselistorder label %dec_label_pc_ffd0, { 1, 0 }
  uselistorder label %bb343, { 1, 0 }
  uselistorder label %dec_label_pc_fef4, { 1, 0 }
  uselistorder label %dec_label_pc_feec, { 1, 0 }
  uselistorder label %bb341, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_fe14.dec_label_pc_fe14_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_fdf8.dec_label_pc_fdf8_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_fdf0, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_fdb0, { 1, 0 }
  uselistorder label %dec_label_pc_fc4c, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_fc40, { 1, 0 }
  uselistorder label %.thread64, { 2, 1, 0 }
  uselistorder label %.thread63, { 2, 1, 0 }
  uselistorder label %dec_label_pc_faac, { 1, 0 }
  uselistorder label %dec_label_pc_faa0, { 1, 0 }
  uselistorder label %dec_label_pc_fa94, { 1, 0 }
  uselistorder label %dec_label_pc_fa88, { 1, 0 }
  uselistorder label %dec_label_pc_fa7c, { 1, 0 }
  uselistorder label %dec_label_pc_fa68, { 1, 0 }
  uselistorder label %dec_label_pc_fa54, { 1, 0 }
  uselistorder label %dec_label_pc_fa40, { 1, 0 }
  uselistorder label %dec_label_pc_fa20, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f9fc, { 1, 0 }
  uselistorder label %dec_label_pc_f9f0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f9cc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f9a8, { 1, 0 }
  uselistorder label %bb303, { 1, 0 }
  uselistorder label %dec_label_pc_f954, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_f724, { 1, 0 }
}

define i32 @function_10d4c(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10d4c:
  %v3_10d50 = mul i32 %arg1, 8
  %v2_10d54 = add i32 %v3_10d50, ptrtoint (i32* @global_var_1d260.210 to i32)
  %v2_10d58 = icmp eq i32* %arg2, null
  br i1 %v2_10d58, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10d4c
  %v3_10d6411 = inttoptr i32 %v2_10d54 to i32*
  %v4_10d6412 = load i32, i32* %v3_10d6411, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_10d4c
  %v2_10d5c = add i32 %v3_10d50, add (i32 ptrtoint (i32* @global_var_1d260.210 to i32), i32 5)
  %v3_10d5c = inttoptr i32 %v2_10d5c to i8*
  %v4_10d5c = load i8, i8* %v3_10d5c, align 1
  %v5_10d5c = zext i8 %v4_10d5c to i32
  store i32 %v5_10d5c, i32* @r2, align 4
  %v2_10d60 = add i32 %v3_10d50, add (i32 ptrtoint (i32* @global_var_1d260.210 to i32), i32 4)
  %v3_10d60 = inttoptr i32 %v2_10d60 to i8*
  %v4_10d60 = load i8, i8* %v3_10d60, align 4
  %v5_10d60 = zext i8 %v4_10d60 to i32
  %v3_10d64 = inttoptr i32 %v2_10d54 to i32*
  %v4_10d64 = load i32, i32* %v3_10d64, align 4
  %v5_10d68 = mul nuw nsw i32 %v5_10d5c, 256
  %v6_10d68 = or i32 %v5_10d60, %v5_10d68
  store i32 %v6_10d68, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_10d64714 = phi i32 [ %v4_10d6412, %.thread ], [ %v4_10d64, %bb ]
  ret i32 %v4_10d64714

; uselistorder directives
  uselistorder i32 %v2_10d54, { 1, 0 }
  uselistorder i32 %v3_10d50, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_10d78(i32 %arg1) local_unnamed_addr {
dec_label_pc_10d78:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_10d78 = mul i32 %arg1, 8
  %v3_10d7c = load i32, i32* @r4, align 4
  store i32 %v3_10d7c, i32* %stack_var_-20, align 4
  %v3_10d8c = and i32 %v3_10d78, 2040
  %v2_10d90 = add i32 %v3_10d8c, ptrtoint (i32* @global_var_1d260.210 to i32)
  store i32 %v2_10d90, i32* @lr, align 4
  %v1_10d98 = add i32 %v3_10d8c, add (i32 ptrtoint (i32* @global_var_1d260.210 to i32), i32 4)
  store i32 %v1_10d98, i32* %r7.global-to-local, align 4
  %v2_10d9c = load i32, i32* @global_var_1d030.213, align 4
  store i32 %v2_10d9c, i32* @r2, align 4
  %v2_10da0 = inttoptr i32 %v1_10d98 to i8*
  %v3_10da0 = load i8, i8* %v2_10da0, align 4
  %v4_10da0 = zext i8 %v3_10da0 to i32
  %v1_10da4 = add i32 %v3_10d8c, add (i32 ptrtoint (i32* @global_var_1d260.210 to i32), i32 5)
  %v2_10da4 = inttoptr i32 %v1_10da4 to i8*
  %v3_10da4 = load i8, i8* %v2_10da4, align 1
  %v4_10da4 = zext i8 %v3_10da4 to i32
  %v3_10da8 = udiv i32 %v2_10d9c, 256
  %v4_10dac = mul nuw nsw i32 %v4_10da4, 256
  %v5_10dac = or i32 %v4_10dac, %v4_10da0
  %v7_10dac = icmp eq i32 %v5_10dac, 0
  store i1 %v7_10dac, i1* @cpsr_z, align 1
  %v3_10db0 = udiv i32 %v2_10d9c, 65536
  %v1_10db4 = urem i32 %v3_10da8, 256
  store i32 %v1_10db4, i32* %r6.global-to-local, align 4
  %v1_10db8 = urem i32 %v3_10db0, 256
  store i32 %v1_10db8, i32* %r5.global-to-local, align 4
  %v3_10dbc = udiv i32 %v2_10d9c, 16777216
  store i32 %v3_10dbc, i32* %r4.global-to-local, align 4
  %v1_10dc0 = urem i32 %v2_10d9c, 256
  br i1 %v7_10dac, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_10d78
  store i32 %v3_10d7c, i32* @r4, align 4
  ret i32 %v1_10dc0

bb8:                                              ; preds = %dec_label_pc_10d78
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10dcc

dec_label_pc_10dcc:                               ; preds = %dec_label_pc_10dcc, %bb8
  %v2_10dd8 = phi i32 [ %v1_10e14, %dec_label_pc_10dcc ], [ 0, %bb8 ]
  %v0_10dcc = phi i32 [ %v0_10e0c, %dec_label_pc_10dcc ], [ %v2_10d90, %bb8 ]
  %v1_10dcc = inttoptr i32 %v0_10dcc to i32*
  %v2_10dcc = load i32, i32* %v1_10dcc, align 4
  %v2_10dd0 = add i32 %v2_10dcc, %v2_10dd8
  %v3_10dd0 = inttoptr i32 %v2_10dd0 to i8*
  %v4_10dd0 = load i8, i8* %v3_10dd0, align 1
  %v6_10dd0 = zext i8 %v4_10dd0 to i32
  %v2_10dd4 = xor i32 %v6_10dd0, %v1_10dc0
  %v1_10dd8 = trunc i32 %v2_10dd4 to i8
  store i8 %v1_10dd8, i8* %v3_10dd0, align 1
  %v0_10ddc = load i32, i32* @lr, align 4
  %v1_10ddc = inttoptr i32 %v0_10ddc to i32*
  %v2_10ddc = load i32, i32* %v1_10ddc, align 4
  %v0_10de0 = load i32, i32* %ip.global-to-local, align 4
  %v2_10de0 = add i32 %v0_10de0, %v2_10ddc
  %v3_10de0 = inttoptr i32 %v2_10de0 to i8*
  %v4_10de0 = load i8, i8* %v3_10de0, align 1
  %v6_10de0 = zext i8 %v4_10de0 to i32
  %v0_10de4 = load i32, i32* %r6.global-to-local, align 4
  %v2_10de4 = xor i32 %v0_10de4, %v6_10de0
  %v1_10de8 = trunc i32 %v2_10de4 to i8
  store i8 %v1_10de8, i8* %v3_10de0, align 1
  %v0_10dec = load i32, i32* @lr, align 4
  %v1_10dec = inttoptr i32 %v0_10dec to i32*
  %v2_10dec = load i32, i32* %v1_10dec, align 4
  %v0_10df0 = load i32, i32* %ip.global-to-local, align 4
  %v2_10df0 = add i32 %v0_10df0, %v2_10dec
  %v3_10df0 = inttoptr i32 %v2_10df0 to i8*
  %v4_10df0 = load i8, i8* %v3_10df0, align 1
  %v6_10df0 = zext i8 %v4_10df0 to i32
  %v0_10df4 = load i32, i32* %r5.global-to-local, align 4
  %v2_10df4 = xor i32 %v0_10df4, %v6_10df0
  %v1_10df8 = trunc i32 %v2_10df4 to i8
  store i8 %v1_10df8, i8* %v3_10df0, align 1
  %v0_10dfc = load i32, i32* @lr, align 4
  %v1_10dfc = inttoptr i32 %v0_10dfc to i32*
  %v2_10dfc = load i32, i32* %v1_10dfc, align 4
  %v0_10e00 = load i32, i32* %ip.global-to-local, align 4
  %v2_10e00 = add i32 %v0_10e00, %v2_10dfc
  %v3_10e00 = inttoptr i32 %v2_10e00 to i8*
  %v4_10e00 = load i8, i8* %v3_10e00, align 1
  %v6_10e00 = zext i8 %v4_10e00 to i32
  %v0_10e04 = load i32, i32* %r4.global-to-local, align 4
  %v2_10e04 = xor i32 %v0_10e04, %v6_10e00
  %v1_10e08 = trunc i32 %v2_10e04 to i8
  store i8 %v1_10e08, i8* %v3_10e00, align 1
  %v0_10e0c = load i32, i32* @lr, align 4
  %v1_10e0c = add i32 %v0_10e0c, 4
  %v2_10e0c = inttoptr i32 %v1_10e0c to i8*
  %v3_10e0c = load i8, i8* %v2_10e0c, align 1
  %v4_10e0c = zext i8 %v3_10e0c to i32
  %v0_10e10 = load i32, i32* %r7.global-to-local, align 4
  %v1_10e10 = add i32 %v0_10e10, 1
  %v2_10e10 = inttoptr i32 %v1_10e10 to i8*
  %v3_10e10 = load i8, i8* %v2_10e10, align 1
  %v4_10e10 = zext i8 %v3_10e10 to i32
  %v0_10e14 = load i32, i32* %ip.global-to-local, align 4
  %v1_10e14 = add i32 %v0_10e14, 1
  store i32 %v1_10e14, i32* %ip.global-to-local, align 4
  %v4_10e18 = mul nuw nsw i32 %v4_10e10, 256
  %v5_10e18 = or i32 %v4_10e18, %v4_10e0c
  store i32 %v5_10e18, i32* @r2, align 4
  %v9_10e1c = icmp eq i32 %v5_10e18, %v1_10e14
  store i1 %v9_10e1c, i1* @cpsr_z, align 1
  %v8_10e20 = icmp sgt i32 %v5_10e18, %v1_10e14
  br i1 %v8_10e20, label %dec_label_pc_10dcc, label %dec_label_pc_10e24

dec_label_pc_10e24:                               ; preds = %dec_label_pc_10dcc
  %v2_10e24 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_10e24, i32* @r4, align 4
  ret i32 %v1_10dc0

; uselistorder directives
  uselistorder i32 %v1_10e14, { 1, 2, 3, 0 }
  uselistorder i32 %v0_10e0c, { 1, 0 }
  uselistorder i32 %v1_10dc0, { 0, 2, 1 }
  uselistorder i32 %v2_10d9c, { 3, 0, 1, 2, 4 }
}

define i32 @function_10e30(i32 %arg1) local_unnamed_addr {
dec_label_pc_10e30:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_10e30 = mul i32 %arg1, 8
  %v3_10e34 = load i32, i32* @r4, align 4
  store i32 %v3_10e34, i32* %stack_var_-20, align 4
  %v3_10e44 = and i32 %v3_10e30, 2040
  %v2_10e48 = add i32 %v3_10e44, ptrtoint (i32* @global_var_1d260.210 to i32)
  store i32 %v2_10e48, i32* @lr, align 4
  %v1_10e50 = add i32 %v3_10e44, add (i32 ptrtoint (i32* @global_var_1d260.210 to i32), i32 4)
  store i32 %v1_10e50, i32* %r7.global-to-local, align 4
  %v2_10e54 = load i32, i32* @global_var_1d030.213, align 4
  store i32 %v2_10e54, i32* @r2, align 4
  %v2_10e58 = inttoptr i32 %v1_10e50 to i8*
  %v3_10e58 = load i8, i8* %v2_10e58, align 4
  %v4_10e58 = zext i8 %v3_10e58 to i32
  %v1_10e5c = add i32 %v3_10e44, add (i32 ptrtoint (i32* @global_var_1d260.210 to i32), i32 5)
  %v2_10e5c = inttoptr i32 %v1_10e5c to i8*
  %v3_10e5c = load i8, i8* %v2_10e5c, align 1
  %v4_10e5c = zext i8 %v3_10e5c to i32
  %v3_10e60 = udiv i32 %v2_10e54, 256
  %v4_10e64 = mul nuw nsw i32 %v4_10e5c, 256
  %v5_10e64 = or i32 %v4_10e64, %v4_10e58
  %v7_10e64 = icmp eq i32 %v5_10e64, 0
  %v3_10e68 = udiv i32 %v2_10e54, 65536
  %v1_10e6c = urem i32 %v3_10e60, 256
  store i32 %v1_10e6c, i32* %r6.global-to-local, align 4
  %v1_10e70 = urem i32 %v3_10e68, 256
  store i32 %v1_10e70, i32* %r5.global-to-local, align 4
  %v3_10e74 = udiv i32 %v2_10e54, 16777216
  store i32 %v3_10e74, i32* %r4.global-to-local, align 4
  %v1_10e78 = urem i32 %v2_10e54, 256
  br i1 %v7_10e64, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_10e30
  store i32 %v3_10e34, i32* @r4, align 4
  ret i32 %v1_10e78

bb8:                                              ; preds = %dec_label_pc_10e30
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10e84

dec_label_pc_10e84:                               ; preds = %dec_label_pc_10e84, %bb8
  %v2_10e90 = phi i32 [ %v1_10ecc, %dec_label_pc_10e84 ], [ 0, %bb8 ]
  %v0_10e84 = phi i32 [ %v0_10ec4, %dec_label_pc_10e84 ], [ %v2_10e48, %bb8 ]
  %v1_10e84 = inttoptr i32 %v0_10e84 to i32*
  %v2_10e84 = load i32, i32* %v1_10e84, align 4
  %v2_10e88 = add i32 %v2_10e84, %v2_10e90
  %v3_10e88 = inttoptr i32 %v2_10e88 to i8*
  %v4_10e88 = load i8, i8* %v3_10e88, align 1
  %v6_10e88 = zext i8 %v4_10e88 to i32
  %v2_10e8c = xor i32 %v6_10e88, %v1_10e78
  %v1_10e90 = trunc i32 %v2_10e8c to i8
  store i8 %v1_10e90, i8* %v3_10e88, align 1
  %v0_10e94 = load i32, i32* @lr, align 4
  %v1_10e94 = inttoptr i32 %v0_10e94 to i32*
  %v2_10e94 = load i32, i32* %v1_10e94, align 4
  %v0_10e98 = load i32, i32* %ip.global-to-local, align 4
  %v2_10e98 = add i32 %v0_10e98, %v2_10e94
  %v3_10e98 = inttoptr i32 %v2_10e98 to i8*
  %v4_10e98 = load i8, i8* %v3_10e98, align 1
  %v6_10e98 = zext i8 %v4_10e98 to i32
  %v0_10e9c = load i32, i32* %r6.global-to-local, align 4
  %v2_10e9c = xor i32 %v0_10e9c, %v6_10e98
  %v1_10ea0 = trunc i32 %v2_10e9c to i8
  store i8 %v1_10ea0, i8* %v3_10e98, align 1
  %v0_10ea4 = load i32, i32* @lr, align 4
  %v1_10ea4 = inttoptr i32 %v0_10ea4 to i32*
  %v2_10ea4 = load i32, i32* %v1_10ea4, align 4
  %v0_10ea8 = load i32, i32* %ip.global-to-local, align 4
  %v2_10ea8 = add i32 %v0_10ea8, %v2_10ea4
  %v3_10ea8 = inttoptr i32 %v2_10ea8 to i8*
  %v4_10ea8 = load i8, i8* %v3_10ea8, align 1
  %v6_10ea8 = zext i8 %v4_10ea8 to i32
  %v0_10eac = load i32, i32* %r5.global-to-local, align 4
  %v2_10eac = xor i32 %v0_10eac, %v6_10ea8
  %v1_10eb0 = trunc i32 %v2_10eac to i8
  store i8 %v1_10eb0, i8* %v3_10ea8, align 1
  %v0_10eb4 = load i32, i32* @lr, align 4
  %v1_10eb4 = inttoptr i32 %v0_10eb4 to i32*
  %v2_10eb4 = load i32, i32* %v1_10eb4, align 4
  %v0_10eb8 = load i32, i32* %ip.global-to-local, align 4
  %v2_10eb8 = add i32 %v0_10eb8, %v2_10eb4
  %v3_10eb8 = inttoptr i32 %v2_10eb8 to i8*
  %v4_10eb8 = load i8, i8* %v3_10eb8, align 1
  %v6_10eb8 = zext i8 %v4_10eb8 to i32
  %v0_10ebc = load i32, i32* %r4.global-to-local, align 4
  %v2_10ebc = xor i32 %v0_10ebc, %v6_10eb8
  %v1_10ec0 = trunc i32 %v2_10ebc to i8
  store i8 %v1_10ec0, i8* %v3_10eb8, align 1
  %v0_10ec4 = load i32, i32* @lr, align 4
  %v1_10ec4 = add i32 %v0_10ec4, 4
  %v2_10ec4 = inttoptr i32 %v1_10ec4 to i8*
  %v3_10ec4 = load i8, i8* %v2_10ec4, align 1
  %v4_10ec4 = zext i8 %v3_10ec4 to i32
  %v0_10ec8 = load i32, i32* %r7.global-to-local, align 4
  %v1_10ec8 = add i32 %v0_10ec8, 1
  %v2_10ec8 = inttoptr i32 %v1_10ec8 to i8*
  %v3_10ec8 = load i8, i8* %v2_10ec8, align 1
  %v4_10ec8 = zext i8 %v3_10ec8 to i32
  %v0_10ecc = load i32, i32* %ip.global-to-local, align 4
  %v1_10ecc = add i32 %v0_10ecc, 1
  store i32 %v1_10ecc, i32* %ip.global-to-local, align 4
  %v4_10ed0 = mul nuw nsw i32 %v4_10ec8, 256
  %v5_10ed0 = or i32 %v4_10ed0, %v4_10ec4
  store i32 %v5_10ed0, i32* @r2, align 4
  %v8_10ed8 = icmp sgt i32 %v5_10ed0, %v1_10ecc
  br i1 %v8_10ed8, label %dec_label_pc_10e84, label %dec_label_pc_10edc

dec_label_pc_10edc:                               ; preds = %dec_label_pc_10e84
  %v2_10edc = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_10edc, i32* @r4, align 4
  ret i32 %v1_10e78

; uselistorder directives
  uselistorder i32 %v1_10ecc, { 1, 2, 0 }
  uselistorder i32 %v0_10ec4, { 1, 0 }
  uselistorder i32 %v1_10e78, { 0, 2, 1 }
  uselistorder i32 %v2_10e54, { 3, 0, 1, 2, 4 }
}

define i32 @function_10ee8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10ee8:
  %fp.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_10ee8 = load i32, i32* @r4, align 4
  store i32 %v3_10ee8, i32* %stack_var_-36, align 4
  %v6_10ee8 = load i32, i32* @r5, align 4
  %v9_10ee8 = load i32, i32* @r6, align 4
  %v12_10ee8 = load i32, i32* @r7, align 4
  %v1_10ef0 = call i32 @function_128a4(i32 2)
  store i32 ptrtoint (i32* @global_var_1d260.210 to i32), i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 2, i32* @r7, align 4
  store i32 %v1_10ef0, i32* @r6, align 4
  %v3_10f0c = call i32 @function_11574(i32 %v1_10ef0, i32 ptrtoint (i32* @global_var_1473c.218 to i32), i32 2)
  %v0_10f14 = load i32, i32* @r6, align 4
  store i32 %v0_10f14, i32* @global_var_1d268.219, align 4
  %v0_10f18 = load i32, i32* @r7, align 4
  %v1_10f18 = trunc i32 %v0_10f18 to i8
  store i8 %v1_10f18, i8* bitcast (i32* @global_var_1d26c.220 to i8*), align 4
  %v0_10f1c = load i32, i32* @r5, align 4
  %v1_10f1c = trunc i32 %v0_10f1c to i8
  store i8 %v1_10f1c, i8* bitcast (i32* @global_var_1d26d.221 to i8*), align 4
  %v1_10f20 = call i32 @function_128a4(i32 13)
  store i32 %v1_10f20, i32* @r6, align 4
  %v4_10f30 = call i32 @function_11574(i32 %v1_10f20, i32 ptrtoint ([14 x i8]* @global_var_14740.223 to i32), i32 13)
  store i8 13, i8* bitcast (i32* @global_var_1d274.224 to i8*), align 4
  %v0_10f40 = load i32, i32* @r6, align 4
  store i32 %v0_10f40, i32* @global_var_1d270.225, align 4
  %v0_10f44 = load i32, i32* @r5, align 4
  %v1_10f44 = trunc i32 %v0_10f44 to i8
  store i8 %v1_10f44, i8* bitcast (i32* @global_var_1d275.226 to i8*), align 4
  %v1_10f48 = call i32 @function_128a4(i32 12)
  store i32 %v1_10f48, i32* @r6, align 4
  %v4_10f58 = call i32 @function_11574(i32 %v1_10f48, i32 ptrtoint ([13 x i8]* @global_var_14750.228 to i32), i32 12)
  %v0_10f60 = load i32, i32* @r7, align 4
  store i8 12, i8* bitcast (i32* @global_var_1d27c.229 to i8*), align 4
  %v0_10f68 = load i32, i32* @r6, align 4
  store i32 %v0_10f68, i32* @global_var_1d278.230, align 4
  %v0_10f6c = load i32, i32* @r5, align 4
  %v1_10f6c = trunc i32 %v0_10f6c to i8
  store i8 %v1_10f6c, i8* bitcast (i32* @global_var_1d27d.231 to i8*), align 4
  %v1_10f70 = call i32 @function_128a4(i32 %v0_10f60)
  %v0_10f74 = load i32, i32* @r7, align 4
  store i32 %v1_10f70, i32* @r6, align 4
  %v3_10f80 = call i32 @function_11574(i32 %v1_10f70, i32 ptrtoint (i32* @global_var_14760.233 to i32), i32 %v0_10f74)
  %v0_10f88 = load i32, i32* @r6, align 4
  store i32 %v0_10f88, i32* @global_var_1d280.234, align 4
  %v0_10f8c = load i32, i32* @r7, align 4
  %v1_10f8c = trunc i32 %v0_10f8c to i8
  store i8 %v1_10f8c, i8* bitcast (i32* @global_var_1d284.235 to i8*), align 4
  %v0_10f90 = load i32, i32* @r5, align 4
  %v1_10f90 = trunc i32 %v0_10f90 to i8
  store i8 %v1_10f90, i8* bitcast (i32* @global_var_1d285.236 to i8*), align 4
  %v1_10f94 = call i32 @function_128a4(i32 36)
  store i32 %v1_10f94, i32* @r6, align 4
  %v4_10fa4 = call i32 @function_11574(i32 %v1_10f94, i32 ptrtoint ([37 x i8]* @global_var_14764.238 to i32), i32 36)
  store i8 36, i8* bitcast (i32* @global_var_1d28c.239 to i8*), align 4
  %v0_10fb4 = load i32, i32* @r6, align 4
  store i32 %v0_10fb4, i32* @global_var_1d288.240, align 4
  %v0_10fb8 = load i32, i32* @r5, align 4
  %v1_10fb8 = trunc i32 %v0_10fb8 to i8
  store i8 %v1_10fb8, i8* bitcast (i32* @global_var_1d28d.241 to i8*), align 4
  %v1_10fbc = call i32 @function_128a4(i32 6)
  store i32 %v1_10fbc, i32* @r6, align 4
  %v4_10fcc = call i32 @function_11574(i32 %v1_10fbc, i32 ptrtoint ([7 x i8]* @global_var_1478c.243 to i32), i32 6)
  store i8 6, i8* bitcast (i32* @global_var_1d294.244 to i8*), align 4
  %v0_10fdc = load i32, i32* @r6, align 4
  store i32 %v0_10fdc, i32* @global_var_1d290.245, align 4
  %v0_10fe0 = load i32, i32* @r5, align 4
  %v1_10fe0 = trunc i32 %v0_10fe0 to i8
  store i8 %v1_10fe0, i8* bitcast (i32* @global_var_1d295.246 to i8*), align 4
  %v1_10fe4 = call i32 @function_128a4(i32 7)
  %v0_10fe8 = load i32, i32* @r7, align 4
  %v1_10fe8 = add i32 %v0_10fe8, 5
  store i32 %v1_10fe8, i32* @r7, align 4
  store i32 %v1_10fe4, i32* @r6, align 4
  %v4_10ff8 = call i32 @function_11574(i32 %v1_10fe4, i32 ptrtoint ([8 x i8]* @global_var_14794.248 to i32), i32 %v1_10fe8)
  %v0_10ffc = load i32, i32* @r7, align 4
  %v0_11000 = load i32, i32* @r6, align 4
  store i32 %v0_11000, i32* @global_var_1d298.249, align 4
  %v1_11004 = trunc i32 %v0_10ffc to i8
  store i8 %v1_11004, i8* bitcast (i32* @global_var_1d29c.250 to i8*), align 4
  %v0_11008 = load i32, i32* @r5, align 4
  %v1_11008 = trunc i32 %v0_11008 to i8
  store i8 %v1_11008, i8* bitcast (i32* @global_var_1d29d.251 to i8*), align 4
  %v1_1100c = call i32 @function_128a4(i32 %v0_10ffc)
  %v0_11010 = load i32, i32* @r7, align 4
  store i32 %v1_1100c, i32* @r6, align 4
  %v4_1101c = call i32 @function_11574(i32 %v1_1100c, i32 ptrtoint ([8 x i8]* @global_var_1479c.253 to i32), i32 %v0_11010)
  %v0_11024 = load i32, i32* @r6, align 4
  store i32 %v0_11024, i32* @global_var_1d2a0.254, align 4
  %v0_11028 = load i32, i32* @r7, align 4
  %v1_11028 = trunc i32 %v0_11028 to i8
  store i8 %v1_11028, i8* bitcast (i32* @global_var_1d2a4.255 to i8*), align 4
  %v0_1102c = load i32, i32* @r5, align 4
  %v1_1102c = trunc i32 %v0_1102c to i8
  store i8 %v1_1102c, i8* bitcast (i32* @global_var_1d2a5.256 to i8*), align 4
  %v1_11030 = call i32 @function_128a4(i32 3)
  store i32 %v1_11030, i32* @r6, align 4
  %v4_11040 = call i32 @function_11574(i32 %v1_11030, i32 ptrtoint ([4 x i8]* @global_var_147a4.258 to i32), i32 3)
  store i8 3, i8* bitcast (i32* @global_var_1d2ac.259 to i8*), align 4
  %v0_11050 = load i32, i32* @r6, align 4
  store i32 %v0_11050, i32* @global_var_1d2a8.260, align 4
  %v0_11054 = load i32, i32* @r5, align 4
  %v1_11054 = trunc i32 %v0_11054 to i8
  store i8 %v1_11054, i8* bitcast (i32* @global_var_1d2ad.261 to i8*), align 4
  %v1_11058 = call i32 @function_128a4(i32 19)
  store i32 19, i32* %fp.global-to-local, align 4
  store i32 %v1_11058, i32* @r6, align 4
  %v3_1106c = call i32 @function_11574(i32 %v1_11058, i32 ptrtoint (i32* @global_var_147a8.263 to i32), i32 19)
  %v0_11074 = load i32, i32* @r6, align 4
  store i32 %v0_11074, i32* @global_var_1d2b0.264, align 4
  store i8 19, i8* bitcast (i32* @global_var_1d2b4.265 to i8*), align 4
  %v0_1107c = load i32, i32* @r5, align 4
  %v1_1107c = trunc i32 %v0_1107c to i8
  store i8 %v1_1107c, i8* bitcast (i32* @global_var_1d2b5.266 to i8*), align 4
  %v1_11080 = call i32 @function_128a4(i32 24)
  store i32 %v1_11080, i32* @r6, align 4
  %v3_11090 = call i32 @function_11574(i32 %v1_11080, i32 ptrtoint (i32* @global_var_147bc.268 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1d2bc.269 to i8*), align 4
  %v0_110a0 = load i32, i32* @r6, align 4
  store i32 %v0_110a0, i32* @global_var_1d2b8.270, align 4
  %v0_110a4 = load i32, i32* @r5, align 4
  %v1_110a4 = trunc i32 %v0_110a4 to i8
  store i8 %v1_110a4, i8* bitcast (i32* @global_var_1d2bd.271 to i8*), align 4
  %v1_110a8 = call i32 @function_128a4(i32 9)
  store i32 %v1_110a8, i32* @r6, align 4
  %v4_110b8 = call i32 @function_11574(i32 %v1_110a8, i32 ptrtoint ([10 x i8]* @global_var_147d8.273 to i32), i32 9)
  store i8 9, i8* bitcast (i32* @global_var_1d2c4.274 to i8*), align 4
  %v0_110c8 = load i32, i32* @r6, align 4
  store i32 %v0_110c8, i32* @global_var_1d2c0.275, align 4
  %v0_110cc = load i32, i32* @r5, align 4
  %v1_110cc = trunc i32 %v0_110cc to i8
  store i8 %v1_110cc, i8* bitcast (i32* @global_var_1d2c5.276 to i8*), align 4
  %v1_110d0 = call i32 @function_128a4(i32 16)
  store i32 16, i32* %sb.global-to-local, align 4
  store i32 %v1_110d0, i32* @r6, align 4
  %v4_110e4 = call i32 @function_11574(i32 %v1_110d0, i32 ptrtoint ([17 x i8]* @global_var_147e4.278 to i32), i32 16)
  %v0_110ec = load i32, i32* @r6, align 4
  store i32 %v0_110ec, i32* @global_var_1d2c8.279, align 4
  store i8 16, i8* bitcast (i32* @global_var_1d2cc.280 to i8*), align 4
  %v0_110f4 = load i32, i32* @r5, align 4
  %v1_110f4 = trunc i32 %v0_110f4 to i8
  store i8 %v1_110f4, i8* bitcast (i32* @global_var_1d2cd.281 to i8*), align 4
  %v1_110f8 = call i32 @function_128a4(i32 22)
  store i32 %v1_110f8, i32* @r6, align 4
  %v4_11108 = call i32 @function_11574(i32 %v1_110f8, i32 ptrtoint ([23 x i8]* @global_var_147f8.283 to i32), i32 22)
  %v0_11110 = load i32, i32* @r7, align 4
  store i8 22, i8* bitcast (i32* @global_var_1d2d4.284 to i8*), align 4
  %v0_11118 = load i32, i32* @r6, align 4
  store i32 %v0_11118, i32* @global_var_1d2d0.285, align 4
  %v0_1111c = load i32, i32* @r5, align 4
  %v1_1111c = trunc i32 %v0_1111c to i8
  store i8 %v1_1111c, i8* bitcast (i32* @global_var_1d2d5.286 to i8*), align 4
  %v1_11120 = call i32 @function_128a4(i32 %v0_11110)
  %v0_11124 = load i32, i32* @r7, align 4
  store i32 %v1_11120, i32* @r6, align 4
  %v4_11130 = call i32 @function_11574(i32 %v1_11120, i32 ptrtoint ([8 x i8]* @global_var_14810.288 to i32), i32 %v0_11124)
  %v0_11138 = load i32, i32* @r6, align 4
  store i32 %v0_11138, i32* @global_var_1d2d8.289, align 4
  %v0_1113c = load i32, i32* @r7, align 4
  %v1_1113c = trunc i32 %v0_1113c to i8
  store i8 %v1_1113c, i8* bitcast (i32* @global_var_1d2dc.290 to i8*), align 4
  %v0_11140 = load i32, i32* @r5, align 4
  %v1_11140 = trunc i32 %v0_11140 to i8
  store i8 %v1_11140, i8* bitcast (i32* @global_var_1d2dd.291 to i8*), align 4
  %v1_11144 = call i32 @function_128a4(i32 5)
  store i32 %v1_11144, i32* @r6, align 4
  %v4_11154 = call i32 @function_11574(i32 %v1_11144, i32 ptrtoint ([6 x i8]* @global_var_14818.293 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1d2e4.294 to i8*), align 4
  %v0_11164 = load i32, i32* @r6, align 4
  store i32 %v0_11164, i32* @global_var_1d2e0.295, align 4
  %v0_11168 = load i32, i32* @r5, align 4
  %v1_11168 = trunc i32 %v0_11168 to i8
  store i8 %v1_11168, i8* bitcast (i32* @global_var_1d2e5.296 to i8*), align 4
  %v1_1116c = call i32 @function_128a4(i32 4)
  store i32 %v1_1116c, i32* @r6, align 4
  %v4_1117c = call i32 @function_11574(i32 %v1_1116c, i32 ptrtoint ([5 x i8]* @global_var_14820.298 to i32), i32 4)
  store i8 4, i8* bitcast (i32* @global_var_1d2ec.299 to i8*), align 4
  %v0_1118c = load i32, i32* @r6, align 4
  store i32 %v0_1118c, i32* @global_var_1d2e8.300, align 4
  %v0_11190 = load i32, i32* @r5, align 4
  %v1_11190 = trunc i32 %v0_11190 to i8
  store i8 %v1_11190, i8* bitcast (i32* @global_var_1d2ed.301 to i8*), align 4
  %v1_11194 = call i32 @function_128a4(i32 6)
  store i32 %v1_11194, i32* @r6, align 4
  %v4_111a4 = call i32 @function_11574(i32 %v1_11194, i32 ptrtoint ([7 x i8]* @global_var_14828.303 to i32), i32 6)
  store i8 6, i8* bitcast (i32* @global_var_1d2f4.304 to i8*), align 4
  %v0_111b4 = load i32, i32* @r6, align 4
  store i32 %v0_111b4, i32* @global_var_1d2f0.305, align 4
  %v0_111b8 = load i32, i32* @r5, align 4
  %v1_111b8 = trunc i32 %v0_111b8 to i8
  store i8 %v1_111b8, i8* bitcast (i32* @global_var_1d2f5.306 to i8*), align 4
  %v1_111bc = call i32 @function_128a4(i32 14)
  store i32 14, i32* %r8.global-to-local, align 4
  store i32 %v1_111bc, i32* @r6, align 4
  %v4_111d0 = call i32 @function_11574(i32 %v1_111bc, i32 ptrtoint ([15 x i8]* @global_var_14830.308 to i32), i32 14)
  %v0_111d8 = load i32, i32* @r6, align 4
  store i32 %v0_111d8, i32* @global_var_1d2f8.309, align 4
  store i8 14, i8* bitcast (i32* @global_var_1d2fc.310 to i8*), align 4
  %v0_111e0 = load i32, i32* @r5, align 4
  %v1_111e0 = trunc i32 %v0_111e0 to i8
  store i8 %v1_111e0, i8* bitcast (i32* @global_var_1d2fd.311 to i8*), align 4
  %v1_111e4 = call i32 @function_128a4(i32 8)
  store i32 8, i32* %sl.global-to-local, align 4
  store i32 %v1_111e4, i32* @r6, align 4
  %v4_111f8 = call i32 @function_11574(i32 %v1_111e4, i32 ptrtoint ([9 x i8]* @global_var_14840.313 to i32), i32 8)
  %v0_111fc = load i32, i32* @r7, align 4
  %v0_11200 = load i32, i32* @r6, align 4
  store i32 %v0_11200, i32* @global_var_1d370.314, align 4
  store i8 8, i8* bitcast (i32* @global_var_1d374.315 to i8*), align 4
  %v0_11208 = load i32, i32* @r5, align 4
  %v1_11208 = trunc i32 %v0_11208 to i8
  store i8 %v1_11208, i8* bitcast (i32* @global_var_1d375.316 to i8*), align 4
  %v1_1120c = call i32 @function_128a4(i32 %v0_111fc)
  %v0_11210 = load i32, i32* @r7, align 4
  store i32 %v1_1120c, i32* @r6, align 4
  %v4_1121c = call i32 @function_11574(i32 %v1_1120c, i32 ptrtoint ([8 x i8]* @global_var_1484c.318 to i32), i32 %v0_11210)
  %v0_11220 = load i32, i32* %sb.global-to-local, align 4
  %v0_11224 = load i32, i32* @r6, align 4
  store i32 %v0_11224, i32* @global_var_1d378.319, align 4
  %v0_11228 = load i32, i32* @r7, align 4
  %v1_11228 = trunc i32 %v0_11228 to i8
  store i8 %v1_11228, i8* bitcast (i32* @global_var_1d37c.320 to i8*), align 4
  %v0_1122c = load i32, i32* @r5, align 4
  %v1_1122c = trunc i32 %v0_1122c to i8
  store i8 %v1_1122c, i8* bitcast (i32* @global_var_1d37d.321 to i8*), align 4
  %v1_11230 = call i32 @function_128a4(i32 %v0_11220)
  %v0_11234 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_11230, i32* @r6, align 4
  %v4_11240 = call i32 @function_11574(i32 %v1_11230, i32 ptrtoint ([17 x i8]* @global_var_14854.323 to i32), i32 %v0_11234)
  %v0_11248 = load i32, i32* @r6, align 4
  store i32 %v0_11248, i32* @global_var_1d300.324, align 4
  %v1_1124c = trunc i32 %v0_11234 to i8
  store i8 %v1_1124c, i8* bitcast (i32* @global_var_1d304.325 to i8*), align 4
  %v0_11250 = load i32, i32* @r5, align 4
  %v1_11250 = trunc i32 %v0_11250 to i8
  store i8 %v1_11250, i8* bitcast (i32* @global_var_1d305.326 to i8*), align 4
  %v1_11254 = call i32 @function_128a4(i32 23)
  %v0_11260 = load i32, i32* @r7, align 4
  %v1_11260 = load i32, i32* %sb.global-to-local, align 4
  %v2_11260 = add i32 %v1_11260, %v0_11260
  store i32 %v2_11260, i32* @r7, align 4
  store i32 %v1_11254, i32* @r6, align 4
  %v4_11268 = call i32 @function_11574(i32 %v1_11254, i32 ptrtoint ([24 x i8]* @global_var_14868.328 to i32), i32 23)
  %v0_1126c = load i32, i32* %sl.global-to-local, align 4
  %v0_11270 = load i32, i32* @r6, align 4
  store i32 %v0_11270, i32* @global_var_1d308.329, align 4
  %v0_11274 = load i32, i32* @r7, align 4
  %v1_11274 = trunc i32 %v0_11274 to i8
  store i8 %v1_11274, i8* bitcast (i32* @global_var_1d30c.330 to i8*), align 4
  %v0_11278 = load i32, i32* @r5, align 4
  %v1_11278 = trunc i32 %v0_11278 to i8
  store i8 %v1_11278, i8* bitcast (i32* @global_var_1d30d.331 to i8*), align 4
  %v1_1127c = call i32 @function_128a4(i32 %v0_1126c)
  %v0_11284 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_1127c, i32* @r6, align 4
  %v4_1128c = call i32 @function_11574(i32 %v1_1127c, i32 ptrtoint ([9 x i8]* @global_var_14880.333 to i32), i32 %v0_11284)
  %v0_11290 = load i32, i32* %r8.global-to-local, align 4
  %v0_11294 = load i32, i32* @r6, align 4
  store i32 %v0_11294, i32* @global_var_1d310.334, align 4
  %v1_11298 = trunc i32 %v0_11284 to i8
  store i8 %v1_11298, i8* bitcast (i32* @global_var_1d314.335 to i8*), align 4
  %v0_1129c = load i32, i32* @r5, align 4
  %v1_1129c = trunc i32 %v0_1129c to i8
  store i8 %v1_1129c, i8* bitcast (i32* @global_var_1d315.336 to i8*), align 4
  %v1_112a0 = call i32 @function_128a4(i32 %v0_11290)
  %v0_112a8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_112a0, i32* @r6, align 4
  %v4_112b0 = call i32 @function_11574(i32 %v1_112a0, i32 ptrtoint ([15 x i8]* @global_var_1488c.338 to i32), i32 %v0_112a8)
  %v0_112b4 = load i32, i32* %fp.global-to-local, align 4
  %v0_112b8 = load i32, i32* @r6, align 4
  store i32 %v0_112b8, i32* @global_var_1d318.339, align 4
  %v1_112bc = trunc i32 %v0_112a8 to i8
  store i8 %v1_112bc, i8* bitcast (i32* @global_var_1d31c.340 to i8*), align 4
  %v0_112c0 = load i32, i32* @r5, align 4
  %v1_112c0 = trunc i32 %v0_112c0 to i8
  store i8 %v1_112c0, i8* bitcast (i32* @global_var_1d31d.341 to i8*), align 4
  %v1_112c4 = call i32 @function_128a4(i32 %v0_112b4)
  store i32 ptrtoint ([20 x i8]* @global_var_1489c.343 to i32), i32* %sb.global-to-local, align 4
  %v0_112cc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_112c4, i32* @r6, align 4
  %v4_112d8 = call i32 @function_11574(i32 %v1_112c4, i32 ptrtoint ([20 x i8]* @global_var_1489c.343 to i32), i32 %v0_112cc)
  %v0_112e0 = load i32, i32* @r6, align 4
  store i32 %v0_112e0, i32* @global_var_1d320.344, align 4
  %v1_112e4 = trunc i32 %v0_112cc to i8
  store i8 %v1_112e4, i8* bitcast (i32* @global_var_1d324.345 to i8*), align 4
  %v0_112e8 = load i32, i32* @r5, align 4
  %v1_112e8 = trunc i32 %v0_112e8 to i8
  store i8 %v1_112e8, i8* bitcast (i32* @global_var_1d325.346 to i8*), align 4
  %v1_112ec = call i32 @function_128a4(i32 10)
  store i32 %v1_112ec, i32* @r6, align 4
  %v4_112fc = call i32 @function_11574(i32 %v1_112ec, i32 ptrtoint ([11 x i8]* @global_var_148b0.348 to i32), i32 10)
  store i8 10, i8* bitcast (i32* @global_var_1d384.349 to i8*), align 4
  %v0_1130c = load i32, i32* @r6, align 4
  store i32 %v0_1130c, i32* @global_var_1d380.350, align 4
  %v0_11310 = load i32, i32* @r5, align 4
  %v1_11310 = trunc i32 %v0_11310 to i8
  store i8 %v1_11310, i8* bitcast (i32* @global_var_1d385.351 to i8*), align 4
  %v1_11314 = call i32 @function_128a4(i32 21)
  store i32 %v1_11314, i32* @r6, align 4
  %v3_11324 = call i32 @function_11574(i32 %v1_11314, i32 ptrtoint (i32* @global_var_14914.353 to i32), i32 21)
  store i8 21, i8* bitcast (i32* @global_var_1d32c.354 to i8*), align 4
  %v0_11334 = load i32, i32* @r6, align 4
  store i32 %v0_11334, i32* @global_var_1d328.355, align 4
  %v0_11338 = load i32, i32* @r5, align 4
  %v1_11338 = trunc i32 %v0_11338 to i8
  store i8 %v1_11338, i8* bitcast (i32* @global_var_1d32d.356 to i8*), align 4
  %v1_1133c = call i32 @function_128a4(i32 17)
  store i32 %v1_1133c, i32* @r6, align 4
  %v4_1134c = call i32 @function_11574(i32 %v1_1133c, i32 ptrtoint ([18 x i8]* @global_var_148bc.358 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1d334.359 to i8*), align 4
  %v0_1135c = load i32, i32* @r6, align 4
  store i32 %v0_1135c, i32* @global_var_1d330.360, align 4
  %v0_11360 = load i32, i32* @r5, align 4
  %v1_11360 = trunc i32 %v0_11360 to i8
  store i8 %v1_11360, i8* bitcast (i32* @global_var_1d335.361 to i8*), align 4
  %v1_11364 = call i32 @function_128a4(i32 12)
  store i32 %v1_11364, i32* @r6, align 4
  %v4_11374 = call i32 @function_11574(i32 %v1_11364, i32 ptrtoint ([13 x i8]* @global_var_148d0.363 to i32), i32 12)
  %v0_1137c = load i32, i32* %r8.global-to-local, align 4
  store i8 12, i8* bitcast (i32* @global_var_1d33c.364 to i8*), align 4
  %v0_11384 = load i32, i32* @r6, align 4
  store i32 %v0_11384, i32* @global_var_1d338.365, align 4
  %v0_11388 = load i32, i32* @r5, align 4
  %v1_11388 = trunc i32 %v0_11388 to i8
  store i8 %v1_11388, i8* bitcast (i32* @global_var_1d33d.366 to i8*), align 4
  %v1_1138c = call i32 @function_128a4(i32 %v0_1137c)
  %v0_11394 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_1138c, i32* @r6, align 4
  %v4_1139c = call i32 @function_11574(i32 %v1_1138c, i32 ptrtoint ([15 x i8]* @global_var_1488c.338 to i32), i32 %v0_11394)
  %v0_113a0 = load i32, i32* %fp.global-to-local, align 4
  %v0_113a4 = load i32, i32* @r6, align 4
  store i32 %v0_113a4, i32* @global_var_1d340.367, align 4
  %v1_113a8 = trunc i32 %v0_11394 to i8
  store i8 %v1_113a8, i8* bitcast (i32* @global_var_1d344.368 to i8*), align 4
  %v0_113ac = load i32, i32* @r5, align 4
  %v1_113ac = trunc i32 %v0_113ac to i8
  store i8 %v1_113ac, i8* bitcast (i32* @global_var_1d345.369 to i8*), align 4
  %v1_113b0 = call i32 @function_128a4(i32 %v0_113a0)
  %v0_113b4 = load i32, i32* %sb.global-to-local, align 4
  %v0_113b8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_113b0, i32* @r6, align 4
  %v4_113c0 = call i32 @function_11574(i32 %v1_113b0, i32 %v0_113b4, i32 %v0_113b8)
  %v0_113c4 = load i32, i32* %sl.global-to-local, align 4
  %v0_113c8 = load i32, i32* @r6, align 4
  store i32 %v0_113c8, i32* @global_var_1d348.370, align 4
  %v1_113cc = trunc i32 %v0_113b8 to i8
  store i8 %v1_113cc, i8* bitcast (i32* @global_var_1d34c.371 to i8*), align 4
  %v0_113d0 = load i32, i32* @r5, align 4
  %v1_113d0 = trunc i32 %v0_113d0 to i8
  store i8 %v1_113d0, i8* bitcast (i32* @global_var_1d34d.372 to i8*), align 4
  %v1_113d4 = call i32 @function_128a4(i32 %v0_113c4)
  %v0_113dc = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_113d4, i32* @r6, align 4
  %v4_113e4 = call i32 @function_11574(i32 %v1_113d4, i32 ptrtoint ([9 x i8]* @global_var_148e0.374 to i32), i32 %v0_113dc)
  %v0_113ec = load i32, i32* @r6, align 4
  store i32 %v0_113ec, i32* @global_var_1d350.375, align 4
  %v1_113f0 = trunc i32 %v0_113dc to i8
  store i8 %v1_113f0, i8* bitcast (i32* @global_var_1d354.376 to i8*), align 4
  %v0_113f4 = load i32, i32* @r5, align 4
  %v1_113f4 = trunc i32 %v0_113f4 to i8
  store i8 %v1_113f4, i8* bitcast (i32* @global_var_1d355.377 to i8*), align 4
  %v1_113f8 = call i32 @function_128a4(i32 5)
  store i32 %v1_113f8, i32* @r6, align 4
  %v4_11408 = call i32 @function_11574(i32 %v1_113f8, i32 ptrtoint ([6 x i8]* @global_var_148ec.379 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1d35c.380 to i8*), align 4
  %v0_11418 = load i32, i32* @r6, align 4
  store i32 %v0_11418, i32* @global_var_1d358.381, align 4
  %v0_1141c = load i32, i32* @r5, align 4
  %v1_1141c = trunc i32 %v0_1141c to i8
  store i8 %v1_1141c, i8* bitcast (i32* @global_var_1d35d.382 to i8*), align 4
  %v1_11420 = call i32 @function_128a4(i32 6)
  store i32 %v1_11420, i32* @r6, align 4
  %v4_11430 = call i32 @function_11574(i32 %v1_11420, i32 ptrtoint ([7 x i8]* @global_var_148f4.384 to i32), i32 6)
  %v0_11438 = load i32, i32* @r7, align 4
  %v0_1143c = load i32, i32* @r6, align 4
  store i32 %v0_1143c, i32* @global_var_1d360.385, align 4
  store i8 6, i8* bitcast (i32* @global_var_1d364.386 to i8*), align 4
  %v0_11444 = load i32, i32* @r5, align 4
  %v1_11444 = trunc i32 %v0_11444 to i8
  store i8 %v1_11444, i8* bitcast (i32* @global_var_1d365.387 to i8*), align 4
  %v1_11448 = call i32 @function_128a4(i32 %v0_11438)
  %v0_11450 = load i32, i32* @r7, align 4
  %v4_11458 = call i32 @function_11574(i32 %v1_11448, i32 ptrtoint ([24 x i8]* @global_var_148fc.389 to i32), i32 %v0_11450)
  %v0_1145c = load i32, i32* @r5, align 4
  %v1_1145c = trunc i32 %v0_1145c to i8
  store i8 %v1_1145c, i8* bitcast (i32* @global_var_1d36d.390 to i8*), align 4
  store i32 %v1_11448, i32* @global_var_1d368.391, align 4
  %v0_11464 = load i32, i32* @r7, align 4
  %v1_11464 = trunc i32 %v0_11464 to i8
  store i8 %v1_11464, i8* bitcast (i32* @global_var_1d36c.392 to i8*), align 4
  %v2_11468 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_11468, i32* @r4, align 4
  store i32 %v6_10ee8, i32* @r5, align 4
  store i32 %v9_10ee8, i32* @r6, align 4
  store i32 %v12_10ee8, i32* @r7, align 4
  ret i32 %v4_11458

; uselistorder directives
  uselistorder i32 %v1_113d4, { 1, 0 }
  uselistorder i32 %v1_113b0, { 1, 0 }
  uselistorder i32 %v1_1138c, { 1, 0 }
  uselistorder i32 %v1_112c4, { 1, 0 }
  uselistorder i32 %v1_112a0, { 1, 0 }
  uselistorder i32 %v1_1127c, { 1, 0 }
  uselistorder i32 %v1_11254, { 1, 0 }
  uselistorder i32 %v1_11230, { 1, 0 }
  uselistorder i32 %v1_1120c, { 1, 0 }
  uselistorder i32 %v1_111e4, { 1, 0 }
  uselistorder i32 %v1_111bc, { 1, 0 }
  uselistorder i32 %v1_11120, { 1, 0 }
  uselistorder i32 %v1_110d0, { 1, 0 }
  uselistorder i32 %v1_11058, { 1, 0 }
  uselistorder i32 %v1_1100c, { 1, 0 }
  uselistorder i32 %v1_10fe4, { 1, 0 }
  uselistorder i32 %v1_10f70, { 1, 0 }
  uselistorder i32 %v1_10ef0, { 1, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i8 5, { 12, 13, 14, 0, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9, 11 }
  uselistorder i8 16, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i8 6, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i8 36, { 13, 7, 8, 11, 12, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i32 (i32, i32, i32)* @function_11574, { 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1d260.210 to i32), { 5, 0, 1, 2, 3, 4 }
}

define i32 @function_114f8(i8* %arg1) local_unnamed_addr {
dec_label_pc_114f8:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r2, align 4
  %v3_114fc = load i8, i8* %arg1, align 1
  %v4_114fc = zext i8 %v3_114fc to i32
  %v2_11500 = icmp eq i8 %v3_114fc, 0
  br i1 %v2_11500, label %dec_label_pc_1151c, label %bb

dec_label_pc_1151c:                               ; preds = %dec_label_pc_1150c, %dec_label_pc_114f8
  %merge = phi i32 [ %v4_114fc, %dec_label_pc_114f8 ], [ %v1_1150c, %dec_label_pc_1150c ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_114f8
  br label %dec_label_pc_1150c

dec_label_pc_1150c:                               ; preds = %dec_label_pc_1150c, %bb
  %v0_1150c = phi i32 [ %v1_1150c, %dec_label_pc_1150c ], [ 0, %bb ]
  %v1_1150c = add i32 %v0_1150c, 1
  %v2_11510 = add i32 %v1_1150c, %tmp
  %v3_11510 = inttoptr i32 %v2_11510 to i8*
  %v4_11510 = load i8, i8* %v3_11510, align 1
  %v2_11514 = icmp eq i8 %v4_11510, 0
  br i1 %v2_11514, label %dec_label_pc_1151c, label %dec_label_pc_1150c

; uselistorder directives
  uselistorder i32 %v1_1150c, { 1, 0, 2 }
}

define i32 @function_11520(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11520:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_11520 = load i8, i8* %arg1, align 1
  %v3_11520 = zext i8 %v2_11520 to i32
  %v2_11524 = icmp eq i8 %v2_11520, 0
  br i1 %v2_11524, label %dec_label_pc_11568, label %dec_label_pc_1152c

dec_label_pc_1152c:                               ; preds = %dec_label_pc_11520
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11530

dec_label_pc_11530:                               ; preds = %dec_label_pc_11530, %dec_label_pc_1152c
  %v0_11530 = phi i32 [ %v1_11530, %dec_label_pc_11530 ], [ 0, %dec_label_pc_1152c ]
  %v1_11530 = add i32 %v0_11530, 1
  store i32 %v1_11530, i32* %ip.global-to-local, align 4
  %v2_11534 = add i32 %v1_11530, %tmp
  %v3_11534 = inttoptr i32 %v2_11534 to i8*
  %v4_11534 = load i8, i8* %v3_11534, align 1
  %v2_11538 = icmp eq i8 %v4_11534, 0
  br i1 %v2_11538, label %dec_label_pc_11540, label %dec_label_pc_11530

dec_label_pc_11540:                               ; preds = %dec_label_pc_11530
  %v7_11540 = icmp eq i32 %v0_11530, -2
  br i1 %v7_11540, label %dec_label_pc_11560, label %dec_label_pc_1154c.preheader

dec_label_pc_1154c.preheader:                     ; preds = %dec_label_pc_11540, %dec_label_pc_11568
  %storemerge = phi i32 [ %v3_11520, %dec_label_pc_11568 ], [ %v1_11530, %dec_label_pc_11540 ]
  %v2_11558.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1154c

dec_label_pc_1154c:                               ; preds = %dec_label_pc_1154c.dec_label_pc_1154c_crit_edge, %dec_label_pc_1154c.preheader
  %v2_11558 = phi i32 [ %v5_11558, %dec_label_pc_1154c.dec_label_pc_1154c_crit_edge ], [ %v2_11558.pre, %dec_label_pc_1154c.preheader ]
  %v0_11550 = phi i32 [ %v0_11550.pre, %dec_label_pc_1154c.dec_label_pc_1154c_crit_edge ], [ %tmp, %dec_label_pc_1154c.preheader ]
  %v0_1154c = phi i32 [ %v0_1154c.pre, %dec_label_pc_1154c.dec_label_pc_1154c_crit_edge ], [ %storemerge, %dec_label_pc_1154c.preheader ]
  %v1_1154c = add i32 %v0_1154c, -1
  store i32 %v1_1154c, i32* @r2, align 4
  %v1_11550 = inttoptr i32 %v0_11550 to i8*
  %v2_11550 = load i8, i8* %v1_11550, align 1
  %v5_11550 = add i32 %v0_11550, 1
  store i32 %v5_11550, i32* %r1.global-to-local, align 4
  %v3_11554 = icmp eq i32 %v0_1154c, 0
  %v3_11558 = inttoptr i32 %v2_11558 to i8*
  store i8 %v2_11550, i8* %v3_11558, align 1
  %v4_11558 = load i32, i32* @r0, align 4
  %v5_11558 = add i32 %v4_11558, 1
  store i32 %v5_11558, i32* @r0, align 4
  br i1 %v3_11554, label %dec_label_pc_11560.loopexit, label %dec_label_pc_1154c.dec_label_pc_1154c_crit_edge

dec_label_pc_1154c.dec_label_pc_1154c_crit_edge:  ; preds = %dec_label_pc_1154c
  %v0_1154c.pre = load i32, i32* @r2, align 4
  %v0_11550.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1154c

dec_label_pc_11560.loopexit:                      ; preds = %dec_label_pc_1154c
  %v0_11560.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11560

dec_label_pc_11560:                               ; preds = %dec_label_pc_11560.loopexit, %dec_label_pc_11540
  %v0_11560 = phi i32 [ %v0_11560.pre, %dec_label_pc_11560.loopexit ], [ %v1_11530, %dec_label_pc_11540 ]
  ret i32 %v0_11560

dec_label_pc_11568:                               ; preds = %dec_label_pc_11520
  store i32 %v3_11520, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1154c.preheader

; uselistorder directives
  uselistorder i32 %v5_11558, { 1, 0 }
  uselistorder i32 %v0_11550, { 1, 0 }
  uselistorder i32 %v1_11530, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_11520, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1154c.preheader, { 1, 0 }
}

define i32 @function_11574(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11574:
  %ip.global-to-local = alloca i32, align 4
  %v2_11574 = icmp eq i32 %arg3, 0
  br i1 %v2_11574, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_11580, %dec_label_pc_11574
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_11574
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11580

dec_label_pc_11580:                               ; preds = %dec_label_pc_11580, %bb
  %v0_11580 = phi i32 [ %v1_11588, %dec_label_pc_11580 ], [ 0, %bb ]
  %v2_11580 = add i32 %v0_11580, %arg2
  %v3_11580 = inttoptr i32 %v2_11580 to i8*
  %v4_11580 = load i8, i8* %v3_11580, align 1
  %v4_11584 = add i32 %v0_11580, %arg1
  %v5_11584 = inttoptr i32 %v4_11584 to i8*
  store i8 %v4_11580, i8* %v5_11584, align 1
  %v0_11588 = load i32, i32* %ip.global-to-local, align 4
  %v1_11588 = add i32 %v0_11588, 1
  store i32 %v1_11588, i32* %ip.global-to-local, align 4
  %v9_1158c = icmp eq i32 %v1_11588, %arg3
  br i1 %v9_1158c, label %.loopexit, label %dec_label_pc_11580

; uselistorder directives
  uselistorder i32 %v1_11588, { 1, 2, 0 }
}

define i32 @function_11598() local_unnamed_addr {
dec_label_pc_11598:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v0_11598 = load i32, i32* @r1, align 4
  %v2_11598 = icmp eq i32 %v0_11598, 0
  br i1 %v2_11598, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_11598
  %v2_1159c = load i32, i32* @r0, align 4
  ret i32 %v2_1159c

bb3:                                              ; preds = %dec_label_pc_11598
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_115a8

dec_label_pc_115a8:                               ; preds = %dec_label_pc_115a8.dec_label_pc_115a8_crit_edge, %bb3
  %v2_115a8 = phi i32 [ %v1_115ac, %dec_label_pc_115a8.dec_label_pc_115a8_crit_edge ], [ 0, %bb3 ]
  %v0_115a8.off0 = phi i8 [ %extract.t, %dec_label_pc_115a8.dec_label_pc_115a8_crit_edge ], [ 0, %bb3 ]
  %v3_115a8 = load i32, i32* @r0, align 4
  %v4_115a8 = add i32 %v3_115a8, %v2_115a8
  %v5_115a8 = inttoptr i32 %v4_115a8 to i8*
  store i8 %v0_115a8.off0, i8* %v5_115a8, align 1
  %v0_115ac = load i32, i32* %r3.global-to-local, align 4
  %v1_115ac = add i32 %v0_115ac, 1
  store i32 %v1_115ac, i32* %r3.global-to-local, align 4
  %v1_115b0 = load i32, i32* @r1, align 4
  %v9_115b0 = icmp eq i32 %v1_115ac, %v1_115b0
  br i1 %v9_115b0, label %dec_label_pc_115b8, label %dec_label_pc_115a8.dec_label_pc_115a8_crit_edge

dec_label_pc_115a8.dec_label_pc_115a8_crit_edge:  ; preds = %dec_label_pc_115a8
  %v0_115a8.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_115a8.pre to i8
  br label %dec_label_pc_115a8

dec_label_pc_115b8:                               ; preds = %dec_label_pc_115a8
  %v1_115b8 = load i32, i32* @r0, align 4
  ret i32 %v1_115b8

; uselistorder directives
  uselistorder i32 %v1_115ac, { 1, 2, 0 }
}

define i32 @function_115bc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_115bc:
  %v7_115d0 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_115d0, label %dec_label_pc_115d4, label %dec_label_pc_115dc

dec_label_pc_115d4:                               ; preds = %dec_label_pc_115f0, %dec_label_pc_115bc, %dec_label_pc_115dc
  ret i32 -1

dec_label_pc_115dc:                               ; preds = %dec_label_pc_115bc
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_115d4, label %dec_label_pc_115e4

dec_label_pc_115e4:                               ; preds = %dec_label_pc_115dc
  br label %dec_label_pc_115fc

dec_label_pc_115f0:                               ; preds = %dec_label_pc_11614, %dec_label_pc_115fc
  %v1_115f0 = add i32 %v0_1161c, 1
  %v9_115f4 = icmp eq i32 %v1_115f0, %arg2
  br i1 %v9_115f4, label %dec_label_pc_115d4, label %dec_label_pc_115fc

dec_label_pc_115fc:                               ; preds = %dec_label_pc_115f0, %dec_label_pc_115e4
  %v0_1161c = phi i32 [ %v1_115f0, %dec_label_pc_115f0 ], [ 0, %dec_label_pc_115e4 ]
  %v0_11608 = phi i32 [ %v1_11608., %dec_label_pc_115f0 ], [ 0, %dec_label_pc_115e4 ]
  %v2_115fc = add i32 %v0_11608, %arg3
  %v3_115fc = inttoptr i32 %v2_115fc to i8*
  %v4_115fc = load i8, i8* %v3_115fc, align 1
  %v2_11600 = add i32 %v0_1161c, %arg1
  %v3_11600 = inttoptr i32 %v2_11600 to i8*
  %v4_11600 = load i8, i8* %v3_11600, align 1
  %v9_11604 = icmp eq i8 %v4_11600, %v4_115fc
  %v1_11608 = add i32 %v0_11608, 1
  %v1_11608. = select i1 %v9_11604, i32 %v1_11608, i32 0
  br i1 %v9_11604, label %dec_label_pc_11614, label %dec_label_pc_115f0

dec_label_pc_11614:                               ; preds = %dec_label_pc_115fc
  %v9_11614 = icmp eq i32 %v1_11608., %arg4
  br i1 %v9_11614, label %dec_label_pc_1161c, label %dec_label_pc_115f0

dec_label_pc_1161c:                               ; preds = %dec_label_pc_11614
  %v1_1161c = add i32 %v0_1161c, 1
  ret i32 %v1_1161c

; uselistorder directives
  uselistorder i1 %v9_11604, { 1, 0 }
  uselistorder i32 %v0_11608, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_115d4, { 0, 2, 1 }
}

define i32 @function_11624(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11624:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_11624 = load i32, i32* @r4, align 4
  store i32 %v3_11624, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11630

dec_label_pc_11630:                               ; preds = %.thread, %dec_label_pc_11648, %bb, %dec_label_pc_11624
  %v0_11630 = phi i32 [ %tmp, %dec_label_pc_11624 ], [ %v5_11630, %bb ], [ %v5_11630, %dec_label_pc_11648 ], [ %v5_11630, %.thread ]
  %v1_11630 = inttoptr i32 %v0_11630 to i8*
  %v2_11630 = load i8, i8* %v1_11630, align 1
  %v3_11630 = zext i8 %v2_11630 to i32
  %v5_11630 = add i32 %v0_11630, 1
  store i32 %v5_11630, i32* %r5.global-to-local, align 4
  %v7_11638 = icmp eq i8 %v2_11630, 9
  br i1 %v7_11638, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_11630
  store i32 %v3_11630, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11630

bb:                                               ; preds = %dec_label_pc_11630
  %v8_1163c = icmp eq i8 %v2_11630, 32
  store i32 %v3_11630, i32* %r4.global-to-local, align 4
  br i1 %v8_1163c, label %dec_label_pc_11630, label %dec_label_pc_11648

dec_label_pc_11648:                               ; preds = %bb
  %v7_11648 = icmp eq i8 %v2_11630, 10
  br i1 %v7_11648, label %dec_label_pc_11630, label %dec_label_pc_11650

dec_label_pc_11650:                               ; preds = %dec_label_pc_11648
  %v7_11650 = icmp eq i8 %v2_11630, 45
  br i1 %v7_11650, label %dec_label_pc_11730, label %dec_label_pc_11658

dec_label_pc_11658:                               ; preds = %dec_label_pc_11650
  %v7_11658 = icmp eq i8 %v2_11630, 43
  br i1 %v7_11658, label %bb48, label %dec_label_pc_11668

bb48:                                             ; preds = %dec_label_pc_11658
  %v2_1165c = inttoptr i32 %v5_11630 to i8*
  %v3_1165c = load i8, i8* %v2_1165c, align 1
  %v4_1165c = zext i8 %v3_1165c to i32
  store i32 %v4_1165c, i32* %r4.global-to-local, align 4
  %v6_1165c = add i32 %v0_11630, 2
  store i32 %v6_1165c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11668

dec_label_pc_11668:                               ; preds = %bb48, %dec_label_pc_11658, %dec_label_pc_11730
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_11730 ], [ 2147483647, %dec_label_pc_11658 ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_11730 ], [ 0, %dec_label_pc_11658 ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_11670 = call i32 @function_11b84(i32 %storemerge1, i32 %arg2)
  %v0_11674 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_11674, i32* @r1, align 4
  store i32 %v2_11670, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_11680 = call i32 @function_11a74()
  store i32 %v0_11680, i32* @lr, align 4
  %v0_11690.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11690

dec_label_pc_11690:                               ; preds = %.thread8, %dec_label_pc_11668
  %v2_1170c11 = phi i32 [ %v1_1172826, %.thread8 ], [ 0, %dec_label_pc_11668 ]
  %v1_116e8 = phi i32 [ %v0_1171c24, %.thread8 ], [ 0, %dec_label_pc_11668 ]
  %v1_116d0 = phi i32 [ %v3_11714, %.thread8 ], [ %v0_11690.pre, %dec_label_pc_11668 ]
  %v1_11690 = urem i32 %v1_116d0, 256
  %v1_11694 = add nsw i32 %v1_11690, -48
  %v1_1169c = add nsw i32 %v1_11690, -97
  %v1_116a0 = add i32 %v1_116d0, -48
  %v1_116a4 = add nsw i32 %v1_11690, -65
  %tmp71 = icmp ult i32 %v1_11694, 10
  br i1 %tmp71, label %dec_label_pc_116d4, label %dec_label_pc_116ac

dec_label_pc_116ac:                               ; preds = %dec_label_pc_11690
  %v2_116ac = icmp ugt i32 %v1_116a4, 24
  %v7_116ac = icmp eq i32 %v1_116a4, 25
  %v2_116b0 = xor i1 %v7_116ac, true
  %v3_116b0 = and i1 %v2_116ac, %v2_116b0
  br i1 %v3_116b0, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_116ac
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_116ac, %bb49
  %v0_116c420 = phi i32 [ %v1_116a0, %dec_label_pc_116ac ], [ 0, %bb49 ]
  %v2_116b4 = xor i1 %v2_116ac, true
  %v3_116b4 = or i1 %v7_116ac, %v2_116b4
  br i1 %v3_116b4, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_116c4 = phi i32 [ %v0_116c420, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_116b0, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_116bc = icmp ugt i32 %v1_1169c, 24
  %v11_116bc = icmp eq i32 %v1_1169c, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_116c0 = phi i1 [ %v7_116ac, %bb52 ], [ %v11_116bc, %bb53 ]
  %v0_116c0 = phi i1 [ %v2_116ac, %bb52 ], [ %v6_116bc, %bb53 ]
  %v2_116c0 = xor i1 %v1_116c0, true
  %v3_116c0 = and i1 %v0_116c0, %v2_116c0
  br i1 %v3_116c0, label %dec_label_pc_1171c, label %dec_label_pc_116c4

dec_label_pc_116c4:                               ; preds = %bb54
  %v2_116c4 = icmp eq i32 %v0_116c4, 0
  %. = select i1 %v2_116c4, i32 87, i32 55
  %v2_116d0 = sub i32 %v1_116d0, %.
  br label %dec_label_pc_116d4

dec_label_pc_116d4:                               ; preds = %dec_label_pc_11690, %dec_label_pc_116c4
  %v0_116e834 = phi i32 [ %v1_116a4, %dec_label_pc_11690 ], [ %., %dec_label_pc_116c4 ]
  %v3_1170c12 = phi i32 [ %v1_116a0, %dec_label_pc_11690 ], [ %v2_116d0, %dec_label_pc_116c4 ]
  %v1_116d4 = load i32, i32* %r6.global-to-local, align 4
  %v6_116d8 = icmp slt i32 %v3_1170c12, %v1_116d4
  br i1 %v6_116d8, label %dec_label_pc_116dc, label %dec_label_pc_1171c

dec_label_pc_116dc:                               ; preds = %dec_label_pc_116d4
  %v3_116dc = icmp uge i32 %v2_1170c11, %v0_11680
  %v9_116dc = icmp eq i32 %v2_1170c11, %v0_11680
  %v2_116e0 = xor i1 %v3_116dc, true
  %v3_116e0 = or i1 %v9_116dc, %v2_116e0
  br i1 %v3_116e0, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_116dc
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_116dc, %bb57
  %v0_116e833 = phi i32 [ %v0_116e834, %dec_label_pc_116dc ], [ 0, %bb57 ]
  %v2_116e4 = xor i1 %v9_116dc, true
  %v3_116e4 = and i1 %v3_116dc, %v2_116e4
  br i1 %v3_116e4, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_116e8 = phi i32 [ %v0_116e833, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_116e8, 0
  %v4_116e8 = zext i1 %tmp72 to i32
  %v5_116e8 = or i32 %v0_116e8, %v4_116e8
  %v7_116e8 = icmp eq i32 %v5_116e8, 0
  br i1 %v7_116e8, label %dec_label_pc_116f4, label %.thread8

dec_label_pc_116f4:                               ; preds = %bb60
  %v1_11700 = load i32, i32* %r8.global-to-local, align 4
  %v7_11704 = icmp sgt i32 %v3_1170c12, %v1_11700
  br i1 %v7_11704, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_116f4
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_116f4
  %v2_11708 = icmp eq i1 %v9_116dc, false
  br i1 %v2_11708, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_1170c13 = mul i32 %v1_116d4, %v2_1170c11
  %v5_1170c14 = add i32 %v4_1170c13, %v3_1170c12
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_1172826 = phi i32 [ %v2_1170c11, %bb63 ], [ %v2_1170c11, %bb60 ], [ %v5_1170c14, %bb64 ]
  %v0_1171c24 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_11714 = load i32, i32* %r5.global-to-local, align 4
  %v1_11714 = inttoptr i32 %v0_11714 to i8*
  %v2_11714 = load i8, i8* %v1_11714, align 1
  %v3_11714 = zext i8 %v2_11714 to i32
  store i32 %v3_11714, i32* %r4.global-to-local, align 4
  %v5_11714 = add i32 %v0_11714, 1
  store i32 %v5_11714, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11690

dec_label_pc_1171c:                               ; preds = %dec_label_pc_116d4, %bb54
  %v1_1171c = icmp slt i32 %v1_116e8, 0
  %v0_11740 = load i32, i32* %sl.global-to-local, align 4
  %v2_11740 = icmp eq i32 %v0_11740, 0
  br i1 %v1_1171c, label %dec_label_pc_11740, label %dec_label_pc_11724

dec_label_pc_11724:                               ; preds = %dec_label_pc_1171c
  br i1 %v2_11740, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_11724
  %v2_11728 = sub i32 0, %v2_1170c11
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_11724, %bb65
  %v23_1172c = phi i32 [ %v2_1170c11, %dec_label_pc_11724 ], [ %v2_11728, %bb65 ]
  %v2_1172c = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_1172c, i32* @r4, align 4
  ret i32 %v23_1172c

dec_label_pc_11730:                               ; preds = %dec_label_pc_11650
  %v1_11730 = inttoptr i32 %v5_11630 to i8*
  %v2_11730 = load i8, i8* %v1_11730, align 1
  %v3_11730 = zext i8 %v2_11730 to i32
  store i32 %v3_11730, i32* %r4.global-to-local, align 4
  %v5_11730 = add i32 %v0_11630, 2
  store i32 %v5_11730, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11668

dec_label_pc_11740:                               ; preds = %dec_label_pc_1171c
  %.70 = select i1 %v2_11740, i32 2147483647, i32 -2147483648
  %v2_1174c = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_1174c, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_11714, { 1, 0 }
  uselistorder i1 %v9_116dc, { 1, 0, 2 }
  uselistorder i1 %v3_116dc, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_116ac, { 1, 2, 0 }
  uselistorder i1 %v2_116ac, { 1, 0, 2 }
  uselistorder i32 %v1_11690, { 1, 2, 0 }
  uselistorder i32 %v1_116d0, { 1, 2, 0 }
  uselistorder i32 %v1_116e8, { 1, 0 }
  uselistorder i32 %v2_1170c11, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_11680, { 1, 0, 2 }
  uselistorder i32 %v5_11630, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_11630, { 1, 0 }
  uselistorder i32 %v0_11630, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i8 9, { 4, 5, 1, 0, 2, 3 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_116d4, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_11668, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11630, { 1, 2, 0, 3 }
}

define i32 @function_11750(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11750:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_11750 = load i32, i32* @r4, align 4
  store i32 %v3_11750, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11768

dec_label_pc_11768:                               ; preds = %dec_label_pc_11794.dec_label_pc_11768_crit_edge, %dec_label_pc_11750
  %v0_1176c = phi i32 [ %v0_1176c.pre, %dec_label_pc_11794.dec_label_pc_11768_crit_edge ], [ %arg3, %dec_label_pc_11750 ]
  %v0_11768 = phi i32 [ %v1_11780, %dec_label_pc_11794.dec_label_pc_11768_crit_edge ], [ %tmp, %dec_label_pc_11750 ]
  %tmp12 = inttoptr i32 %v0_11768 to i32*
  %v5_11774 = call i32 @function_11fc4(i32 %v0_1176c, i32* %tmp12, i32 1)
  %v7_11778 = icmp eq i32 %v5_11774, 1
  %v0_1177c = load i32, i32* @r4, align 4
  %v1_11780 = add i32 %v0_1177c, 1
  store i32 %v1_11780, i32* @r4, align 4
  %v0_11788 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_11778, label %dec_label_pc_11788, label %dec_label_pc_117a0

dec_label_pc_11788:                               ; preds = %dec_label_pc_11768
  %v1_11788 = add i32 %v0_11788, 1
  store i32 %v1_11788, i32* %r5.global-to-local, align 4
  %v0_1178c = load i32, i32* %r7.global-to-local, align 4
  %v7_11790 = icmp sgt i32 %v0_1178c, %v1_11788
  br i1 %v7_11790, label %dec_label_pc_11794, label %dec_label_pc_117a0

dec_label_pc_11794:                               ; preds = %dec_label_pc_11788
  %v1_11794 = inttoptr i32 %v0_1177c to i8*
  %v2_11794 = load i8, i8* %v1_11794, align 1
  %v7_11798 = icmp eq i8 %v2_11794, 10
  br i1 %v7_11798, label %dec_label_pc_117a0, label %dec_label_pc_11794.dec_label_pc_11768_crit_edge

dec_label_pc_11794.dec_label_pc_11768_crit_edge:  ; preds = %dec_label_pc_11794
  %v0_1176c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11768

dec_label_pc_117a0:                               ; preds = %dec_label_pc_11768, %dec_label_pc_11794, %dec_label_pc_11788
  %v0_117a0 = phi i32 [ %v1_11788, %dec_label_pc_11794 ], [ %v1_11788, %dec_label_pc_11788 ], [ %v0_11788, %dec_label_pc_11768 ]
  %v2_117a0 = icmp eq i32 %v0_117a0, 0
  %v1_117a4 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_117a0, i32 0, i32 %v1_117a4
  %v2_117ac = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_117ac, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_11780, { 1, 0 }
  uselistorder i8 10, { 2, 0, 3, 4, 1 }
  uselistorder i32 (i32, i32*, i32)* @function_11fc4, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_117a0, { 1, 2, 0 }
}

define i32 @function_117b0() local_unnamed_addr {
dec_label_pc_117b0:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_117b0 = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_117c0 = call i32 @function_123d0()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_117c8 = inttoptr i32 %v0_117c0 to i32*
  store i32 0, i32* %v2_117c8, align 4
  %v0_117d4 = load i32, i32* %r6.global-to-local, align 4
  %v3_117d8 = call i32 @function_1270c(i32 2, i32 2, i32 %v0_117d4)
  %v7_117e4 = icmp eq i32 %v3_117d8, -1
  store i32 %v3_117d8, i32* %r5.global-to-local, align 4
  %v2_117f0 = load i32, i32* @r4, align 4
  br i1 %v7_117e4, label %dec_label_pc_11840, label %dec_label_pc_11804

dec_label_pc_11804:                               ; preds = %dec_label_pc_117b0
  %v7_117f0 = shl i32 2056, %v2_117f0
  %v8_117f0 = or i32 %v7_117f0, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_11820 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_11820 = call i32 @function_12568(i32 %v3_117d8, %sockaddr* %v3_11820, i32 %v2_117f0)
  %v2_11828 = ptrtoint i32* %stack_var_-24 to i32
  %v0_1182c = load i32, i32* %r5.global-to-local, align 4
  %v4_11830 = call i32 @function_12594(i32 %v0_1182c, %sockaddr* %v3_11820, i32 %v2_11828)
  %v1_11838 = call i32 @function_11dfc(i32 %v0_1182c)
  br label %dec_label_pc_11840

dec_label_pc_11840:                               ; preds = %dec_label_pc_117b0, %dec_label_pc_11804
  %v0_11840 = phi i32 [ %v0_117d4, %dec_label_pc_117b0 ], [ %v8_117f0, %dec_label_pc_11804 ]
  store i32 %v3_117b0, i32* @r4, align 4
  ret i32 %v0_11840

; uselistorder directives
  uselistorder i32 %v3_117d8, { 1, 2, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_12568, { 1, 0, 2, 4, 3, 5, 6, 7, 8, 9 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_1270c, { 24, 25, 22, 23, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_11840, { 1, 0 }
}

define i32 @function_1184c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1184c:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_11850 = load i8, i8* %tmp, align 1
  %v2_11854 = icmp eq i8 %v3_11850, 0
  br i1 %v2_11854, label %bb, label %dec_label_pc_11868

bb:                                               ; preds = %dec_label_pc_1184c
  %v4_11850 = zext i8 %v3_11850 to i32
  br label %dec_label_pc_1187c

dec_label_pc_11868:                               ; preds = %dec_label_pc_1184c
  br label %dec_label_pc_1186c

dec_label_pc_1186c:                               ; preds = %dec_label_pc_1186c, %dec_label_pc_11868
  %v0_1186c = phi i32 [ %v1_1186c, %dec_label_pc_1186c ], [ 0, %dec_label_pc_11868 ]
  %v1_1186c = add i32 %v0_1186c, 1
  %v2_11870 = add i32 %v1_1186c, %arg2
  %v3_11870 = inttoptr i32 %v2_11870 to i8*
  %v4_11870 = load i8, i8* %v3_11870, align 1
  %v2_11874 = icmp eq i8 %v4_11870, 0
  br i1 %v2_11874, label %dec_label_pc_1187c, label %dec_label_pc_1186c

dec_label_pc_1187c:                               ; preds = %dec_label_pc_1186c, %bb
  %v0_118c018 = phi i32 [ %v4_11850, %bb ], [ %v1_1186c, %dec_label_pc_1186c ]
  %v0_118841 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_118841, 1
  br i1 %tmp27, label %dec_label_pc_118d0, label %dec_label_pc_11890

dec_label_pc_11890:                               ; preds = %dec_label_pc_1187c, %dec_label_pc_11884.backedge
  %v0_11888.in = phi i32 [ %v0_11888, %dec_label_pc_11884.backedge ], [ %v0_118841, %dec_label_pc_1187c ]
  %v0_118b4 = phi i32 [ %v1_118b4., %dec_label_pc_11884.backedge ], [ 0, %dec_label_pc_1187c ]
  %v0_11890 = phi i32 [ %v5_11890, %dec_label_pc_11884.backedge ], [ %tmp20, %dec_label_pc_1187c ]
  %v0_11888 = add i32 %v0_11888.in, -1
  %v1_11890 = inttoptr i32 %v0_11890 to i8*
  %v2_11890 = load i8, i8* %v1_11890, align 1
  %v3_11890 = zext i8 %v2_11890 to i32
  store i32 %v3_11890, i32* @lr, align 4
  %v5_11890 = add i32 %v0_11890, 1
  %v2_11894 = add i32 %v0_118b4, %arg2
  %v3_11894 = inttoptr i32 %v2_11894 to i8*
  %v4_11894 = load i8, i8* %v3_11894, align 1
  %v6_11894 = zext i8 %v4_11894 to i32
  %v1_11898 = add nsw i32 %v3_11890, -65
  %v1_1189c = add nsw i32 %v6_11894, -65
  %tmp35 = icmp ult i32 %v1_11898, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_11890
  %v5_118a4 = or i32 %v3_11890, 96
  store i32 %v5_118a4, i32* @lr, align 4
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_11890, %bb28
  %v0_118b0 = phi i32 [ %v3_11890, %dec_label_pc_11890 ], [ %v5_118a4, %bb28 ]
  %tmp36 = icmp ult i32 %v1_1189c, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_118ac = or i32 %v6_11894, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_118b0 = phi i32 [ %v6_11894, %bb29 ], [ %v5_118ac, %bb30 ]
  %v9_118b0 = icmp eq i32 %v0_118b0, %v1_118b0
  %v1_118b4 = add i32 %v0_118b4, 1
  %v1_118b4. = select i1 %v9_118b0, i32 %v1_118b4, i32 0
  br i1 %v9_118b0, label %dec_label_pc_118c0, label %dec_label_pc_11884.backedge

dec_label_pc_11884.backedge:                      ; preds = %bb31, %dec_label_pc_118c0
  %tmp32 = icmp slt i32 %v0_11888, 1
  br i1 %tmp32, label %dec_label_pc_118d0, label %dec_label_pc_11890

dec_label_pc_118c0:                               ; preds = %bb31
  %v9_118c0 = icmp eq i32 %v0_118c018, %v1_118b4.
  br i1 %v9_118c0, label %dec_label_pc_118c8, label %dec_label_pc_11884.backedge

dec_label_pc_118c8:                               ; preds = %dec_label_pc_118c0
  %v2_118c8 = sub i32 %v5_11890, %tmp20
  ret i32 %v2_118c8

dec_label_pc_118d0:                               ; preds = %dec_label_pc_11884.backedge, %dec_label_pc_1187c
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_118b4., { 1, 0 }
  uselistorder i32 %v0_11890, { 1, 0 }
  uselistorder i32 %v0_118b4, { 1, 0 }
  uselistorder i8 %v3_11850, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_11884.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_11890, { 1, 0 }
}

define i32 @function_118d8(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_118d8:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_118d8 = load i8, i8* %arg1, align 1
  %v2_118dc = icmp eq i8 %v2_118d8, 0
  br i1 %v2_118dc, label %bb, label %dec_label_pc_118e8

bb:                                               ; preds = %dec_label_pc_118d8
  %v3_118d8 = zext i8 %v2_118d8 to i32
  br label %dec_label_pc_118fc

dec_label_pc_118e8:                               ; preds = %dec_label_pc_118d8
  br label %dec_label_pc_118ec

dec_label_pc_118ec:                               ; preds = %dec_label_pc_118ec, %dec_label_pc_118e8
  %v0_118ec = phi i32 [ %v1_118ec, %dec_label_pc_118ec ], [ 0, %dec_label_pc_118e8 ]
  %v1_118ec = add i32 %v0_118ec, 1
  %v2_118f0 = add i32 %v1_118ec, %tmp
  %v3_118f0 = inttoptr i32 %v2_118f0 to i8*
  %v4_118f0 = load i8, i8* %v3_118f0, align 1
  %v2_118f4 = icmp eq i8 %v4_118f0, 0
  br i1 %v2_118f4, label %dec_label_pc_118fc, label %dec_label_pc_118ec

dec_label_pc_118fc:                               ; preds = %dec_label_pc_118ec, %bb
  %v0_11920 = phi i32 [ %v3_118d8, %bb ], [ %v1_118ec, %dec_label_pc_118ec ]
  %v1_118fc = inttoptr i32 %arg2 to i8*
  %v2_118fc = load i8, i8* %v1_118fc, align 1
  %v3_118fc = zext i8 %v2_118fc to i32
  %v2_11900 = icmp eq i8 %v2_118fc, 0
  br i1 %v2_11900, label %bb22, label %dec_label_pc_1190c

bb22:                                             ; preds = %dec_label_pc_118fc
  store i32 %v3_118fc, i32* @r2, align 4
  br label %dec_label_pc_11920

dec_label_pc_1190c:                               ; preds = %dec_label_pc_118fc
  br label %dec_label_pc_11910

dec_label_pc_11910:                               ; preds = %dec_label_pc_11910, %dec_label_pc_1190c
  %v0_11910 = phi i32 [ %v1_11910, %dec_label_pc_11910 ], [ 0, %dec_label_pc_1190c ]
  %v1_11910 = add i32 %v0_11910, 1
  store i32 %v1_11910, i32* @r2, align 4
  %v2_11914 = add i32 %v1_11910, %arg2
  %v3_11914 = inttoptr i32 %v2_11914 to i8*
  %v4_11914 = load i8, i8* %v3_11914, align 1
  %v2_11918 = icmp eq i8 %v4_11914, 0
  br i1 %v2_11918, label %dec_label_pc_11920, label %dec_label_pc_11910

dec_label_pc_11920:                               ; preds = %dec_label_pc_11910, %bb22
  %v0_1194c4 = phi i32 [ %v3_118fc, %bb22 ], [ %v1_11910, %dec_label_pc_11910 ]
  %v9_11920 = icmp eq i32 %v0_11920, %v0_1194c4
  br i1 %v9_11920, label %dec_label_pc_1194c.preheader, label %dec_label_pc_1192c

dec_label_pc_1194c.preheader:                     ; preds = %dec_label_pc_11920
  %v2_1194c6 = icmp eq i32 %v0_11920, 0
  br i1 %v2_1194c6, label %dec_label_pc_11954, label %dec_label_pc_11934

dec_label_pc_1192c:                               ; preds = %dec_label_pc_11934, %dec_label_pc_11920
  ret i32 0

dec_label_pc_11934:                               ; preds = %dec_label_pc_11944, %dec_label_pc_1194c.preheader
  %v0_1194c.in = phi i32 [ %v0_1194c, %dec_label_pc_11944 ], [ %v0_11920, %dec_label_pc_1194c.preheader ]
  %v0_11948 = phi i32 [ %v1_11948, %dec_label_pc_11944 ], [ %arg2, %dec_label_pc_1194c.preheader ]
  %v0_11944 = phi i32 [ %v1_11944, %dec_label_pc_11944 ], [ %tmp, %dec_label_pc_1194c.preheader ]
  %v0_1194c = add i32 %v0_1194c.in, -1
  %v1_11934 = inttoptr i32 %v0_11944 to i8*
  %v2_11934 = load i8, i8* %v1_11934, align 1
  %v3_11934 = zext i8 %v2_11934 to i32
  store i32 %v3_11934, i32* @r2, align 4
  %v1_11938 = inttoptr i32 %v0_11948 to i8*
  %v2_11938 = load i8, i8* %v1_11938, align 1
  %v9_1193c = icmp eq i8 %v2_11934, %v2_11938
  br i1 %v9_1193c, label %dec_label_pc_11944, label %dec_label_pc_1192c

dec_label_pc_11944:                               ; preds = %dec_label_pc_11934
  %v1_11944 = add i32 %v0_11944, 1
  %v1_11948 = add i32 %v0_11948, 1
  %v2_1194c = icmp eq i32 %v0_1194c, 0
  br i1 %v2_1194c, label %dec_label_pc_11954, label %dec_label_pc_11934

dec_label_pc_11954:                               ; preds = %dec_label_pc_11944, %dec_label_pc_1194c.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_11910, { 0, 1, 3, 2 }
  uselistorder i8 %v2_118d8, { 1, 0 }
}

define i32 @function_1195c(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1195c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* @r2, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_1195c = load i32, i32* @r4, align 4
  store i32 %v3_1195c, i32* %stack_var_-28, align 4
  %v22_1195c = ptrtoint i32* %stack_var_-28 to i32
  %v0_11960 = load i32, i32* @r2, align 4
  store i32 %v0_11960, i32* %r8.global-to-local, align 4
  %v2_11960 = icmp eq i32 %v0_11960, 0
  store i1 %v2_11960, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_11960, label %dec_label_pc_11a50, label %dec_label_pc_11970

dec_label_pc_11970:                               ; preds = %dec_label_pc_1195c
  %v3_11970 = icmp eq i8 %arg1, 0
  store i1 %v3_11970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11970, label %.thread, label %dec_label_pc_11984

.thread:                                          ; preds = %dec_label_pc_11970
  %v4_11978 = inttoptr i32 %v0_11960 to i8*
  store i8 48, i8* %v4_11978, align 1
  %v0_1197c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1197c.pr.pr, label %.thread1, label %dec_label_pc_11984

.thread1:                                         ; preds = %.thread
  %v4_1197c = load i32, i32* %r8.global-to-local, align 4
  %v5_1197c = add i32 %v4_1197c, 1
  %v6_1197c = inttoptr i32 %v5_1197c to i8*
  store i8 0, i8* %v6_1197c, align 1
  %v0_11980.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11980.pr.pr, label %dec_label_pc_11a50, label %dec_label_pc_11984

dec_label_pc_11984:                               ; preds = %dec_label_pc_11970, %.thread, %.thread1
  %v7_11988 = icmp eq i32 %arg2, 10
  store i1 %v7_11988, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11988, label %bb, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_11984
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_11984
  %tmp39 = icmp slt i8 %arg1, 0
  %phitmp = icmp eq i1 %tmp39, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_119ac

.thread4:                                         ; preds = %bb, %.thread21
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_119bc

dec_label_pc_119ac:                               ; preds = %bb
  %v2_119ac = sub nsw i32 0, %tmp
  store i32 %v2_119ac, i32* %r4.global-to-local, align 4
  store i1 %v3_11970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11970, label %dec_label_pc_11a5c, label %dec_label_pc_119bc

dec_label_pc_119bc:                               ; preds = %dec_label_pc_119ac, %.thread4
  %v0_119c410 = phi i32 [ %tmp, %.thread4 ], [ %v2_119ac, %dec_label_pc_119ac ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_119ac ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_119c0 = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_119c0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_119c4

dec_label_pc_119c4:                               ; preds = %bb37, %dec_label_pc_119bc
  %v0_119c4 = phi i32 [ %v0_119e8, %bb37 ], [ %v0_119c410, %dec_label_pc_119bc ]
  store i32 %v0_119c4, i32* %r0.global-to-local, align 4
  %v0_119c8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_119c8, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_119c4, 16777216
  %v1_119cc = sdiv i32 %sext, 16777216
  %v3_119cc = call i32 @function_11b84(i32 %v1_119cc, i32 %v0_119c8)
  store i32 %v3_119cc, i32* %r0.global-to-local, align 4
  %v7_119d0 = icmp eq i32 %v3_119cc, 9
  store i1 %v7_119d0, i1* %cpsr_z.global-to-local, align 1
  %v1_119d4 = add i32 %v3_119cc, 48
  %v0_119d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_119d8, i32* @r1, align 4
  %v7_119dc = icmp sgt i32 %v3_119cc, 9
  %extract.t = trunc i32 %v1_119d4 to i8
  br i1 %v7_119dc, label %bb36, label %bb37

bb36:                                             ; preds = %dec_label_pc_119c4
  %v9_119dc = add i32 %v3_119cc, 55
  %extract.t20 = trunc i32 %v9_119dc to i8
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_119c4, %bb36
  %v0_119e4.off0 = phi i8 [ %extract.t, %dec_label_pc_119c4 ], [ %extract.t20, %bb36 ]
  %v0_119e0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_119e0, i32* @r0, align 4
  %v2_119e4 = load i32, i32* %r7.global-to-local, align 4
  %v3_119e4 = inttoptr i32 %v2_119e4 to i8*
  store i8 %v0_119e4.off0, i8* %v3_119e4, align 1
  %v4_119e4 = load i32, i32* %r7.global-to-local, align 4
  %v5_119e4 = add i32 %v4_119e4, -1
  store i32 %v5_119e4, i32* %r7.global-to-local, align 4
  %v0_119e8 = call i32 @function_11a74()
  store i32 %v0_119e8, i32* %r0.global-to-local, align 4
  store i32 %v0_119e8, i32* %r4.global-to-local, align 4
  %v2_119ec = icmp eq i32 %v0_119e8, 0
  store i1 %v2_119ec, i1* %cpsr_z.global-to-local, align 1
  %v0_119f0 = load i32, i32* %r6.global-to-local, align 4
  %v1_119f0 = add i32 %v0_119f0, -1
  store i32 %v1_119f0, i32* %r6.global-to-local, align 4
  br i1 %v2_119ec, label %dec_label_pc_119f8, label %dec_label_pc_119c4

dec_label_pc_119f8:                               ; preds = %bb37
  %v0_119f8 = load i32, i32* %sl.global-to-local, align 4
  %v2_119f8 = icmp eq i32 %v0_119f8, 0
  store i1 %v2_119f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_119f8, label %bb38, label %dec_label_pc_11a60

bb38:                                             ; preds = %dec_label_pc_119f8
  store i32 %v0_119f0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11a04

dec_label_pc_11a04:                               ; preds = %bb38, %dec_label_pc_11a60
  %v1_11a10 = phi i32 [ %v0_119f0, %bb38 ], [ %v1_11a08.pre, %dec_label_pc_11a60 ]
  %v2_11a04 = ptrtoint i32* %stack_var_-62 to i32
  %v2_11a08 = add i32 %v1_11a10, %v2_11a04
  %v3_11a08 = inttoptr i32 %v2_11a08 to i8*
  %v4_11a08 = load i8, i8* %v3_11a08, align 1
  %v6_11a08 = zext i8 %v4_11a08 to i32
  %v2_11a0c = icmp eq i8 %v4_11a08, 0
  store i1 %v2_11a0c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_11a08, i32* %r1.global-to-local, align 4
  br i1 %v2_11a0c, label %dec_label_pc_11a34, label %dec_label_pc_11a18

dec_label_pc_11a18:                               ; preds = %dec_label_pc_11a04
  br label %dec_label_pc_11a1c

dec_label_pc_11a1c:                               ; preds = %dec_label_pc_11a1c, %dec_label_pc_11a18
  %v0_11a1c = phi i32 [ %v1_11a1c, %dec_label_pc_11a1c ], [ 0, %dec_label_pc_11a18 ]
  %v1_11a1c = add i32 %v0_11a1c, 1
  store i32 %v1_11a1c, i32* @r2, align 4
  %v2_11a20 = add i32 %v1_11a1c, %v2_11a08
  %v3_11a20 = inttoptr i32 %v2_11a20 to i8*
  %v4_11a20 = load i8, i8* %v3_11a20, align 1
  %v2_11a24 = icmp eq i8 %v4_11a20, 0
  store i1 %v2_11a24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11a24, label %dec_label_pc_11a2c, label %dec_label_pc_11a1c

dec_label_pc_11a2c:                               ; preds = %dec_label_pc_11a1c
  %v7_11a2c = icmp eq i32 %v0_11a1c, -2
  store i1 %v7_11a2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a2c, label %dec_label_pc_11a50, label %dec_label_pc_11a34

dec_label_pc_11a34:                               ; preds = %dec_label_pc_11a2c, %dec_label_pc_11a04
  %v0_11a3c17 = phi i32 [ %v1_11a1c, %dec_label_pc_11a2c ], [ %v6_11a08, %dec_label_pc_11a04 ]
  store i32 %v2_11a08, i32* %r0.global-to-local, align 4
  %v0_11a38 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11a38, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11a3c

dec_label_pc_11a3c:                               ; preds = %dec_label_pc_11a3c.dec_label_pc_11a3c_crit_edge, %dec_label_pc_11a34
  %v2_11a48 = phi i32 [ %v5_11a48, %dec_label_pc_11a3c.dec_label_pc_11a3c_crit_edge ], [ %v0_11a38, %dec_label_pc_11a34 ]
  %v0_11a40 = phi i32 [ %v0_11a40.pre, %dec_label_pc_11a3c.dec_label_pc_11a3c_crit_edge ], [ %v2_11a08, %dec_label_pc_11a34 ]
  %v0_11a3c = phi i32 [ %v0_11a3c.pre, %dec_label_pc_11a3c.dec_label_pc_11a3c_crit_edge ], [ %v0_11a3c17, %dec_label_pc_11a34 ]
  %v1_11a3c = add i32 %v0_11a3c, -1
  store i32 %v1_11a3c, i32* @r2, align 4
  %v1_11a40 = inttoptr i32 %v0_11a40 to i8*
  %v2_11a40 = load i8, i8* %v1_11a40, align 1
  %v5_11a40 = add i32 %v0_11a40, 1
  store i32 %v5_11a40, i32* %r0.global-to-local, align 4
  %v3_11a44 = icmp eq i32 %v0_11a3c, 0
  store i1 %v3_11a44, i1* %cpsr_z.global-to-local, align 1
  %v3_11a48 = inttoptr i32 %v2_11a48 to i8*
  store i8 %v2_11a40, i8* %v3_11a48, align 1
  %v4_11a48 = load i32, i32* %r1.global-to-local, align 4
  %v5_11a48 = add i32 %v4_11a48, 1
  store i32 %v5_11a48, i32* %r1.global-to-local, align 4
  br i1 %v3_11a44, label %dec_label_pc_11a50, label %dec_label_pc_11a3c.dec_label_pc_11a3c_crit_edge

dec_label_pc_11a3c.dec_label_pc_11a3c_crit_edge:  ; preds = %dec_label_pc_11a3c
  %v0_11a3c.pre = load i32, i32* @r2, align 4
  %v0_11a40.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11a3c

dec_label_pc_11a50:                               ; preds = %dec_label_pc_11a3c, %dec_label_pc_11a2c, %.thread1, %dec_label_pc_1195c
  %v0_11a50 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11a50, i32* %r0.global-to-local, align 4
  %v2_11a58 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_11a58, i32* @r4, align 4
  ret i32 %v0_11a50

dec_label_pc_11a5c:                               ; preds = %dec_label_pc_119ac
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11a60

dec_label_pc_11a60:                               ; preds = %dec_label_pc_119f8, %dec_label_pc_11a5c
  %v1_11a64 = phi i32 [ %v1_119f0, %dec_label_pc_119f8 ], [ 32, %dec_label_pc_11a5c ]
  %v2_11a64 = add i32 %v1_11a64, %v22_1195c
  %v3_11a6c = add i32 %v2_11a64, -34
  %v4_11a6c = inttoptr i32 %v3_11a6c to i8*
  store i8 45, i8* %v4_11a6c, align 1
  %v1_11a08.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11a04

; uselistorder directives
  uselistorder i32 %v5_11a48, { 1, 0 }
  uselistorder i1 %v3_11a44, { 1, 0 }
  uselistorder i32 %v0_11a40, { 1, 0 }
  uselistorder i1 %v7_11a2c, { 1, 0 }
  uselistorder i32 %v1_11a1c, { 0, 1, 3, 2 }
  uselistorder i32 %v2_11a08, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_119e8, { 1, 2, 3, 0 }
  uselistorder i32 %v3_119cc, { 1, 0, 2, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_11970, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11960, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 9, 11, 10, 12, 13 }
  uselistorder label %dec_label_pc_11a60, { 1, 0 }
  uselistorder label %dec_label_pc_11a04, { 1, 0 }
  uselistorder label %bb37, { 1, 0 }
  uselistorder label %dec_label_pc_11984, { 2, 1, 0 }
}

define i32 @function_11a74() local_unnamed_addr {
dec_label_pc_11a74:
  %v0_11a74 = load i32, i32* @r1, align 4
  %v1_11a74 = add i32 %v0_11a74, -1
  %v7_11a74 = icmp eq i32 %v0_11a74, 1
  br i1 %v7_11a74, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_11a74
  %v2_11a78 = load i32, i32* @r0, align 4
  ret i32 %v2_11a78

bb82:                                             ; preds = %dec_label_pc_11a74
  %v2_11a74 = icmp eq i32 %v0_11a74, 0
  br i1 %v2_11a74, label %dec_label_pc_11b5c, label %dec_label_pc_11a80

dec_label_pc_11a80:                               ; preds = %bb82
  %v0_11a80 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_11a80, %v0_11a74
  br i1 %tmp, label %dec_label_pc_11a88, label %dec_label_pc_11b14

dec_label_pc_11a88:                               ; preds = %dec_label_pc_11a80
  %v2_11a88 = and i32 %v1_11a74, %v0_11a74
  %v4_11a88 = icmp eq i32 %v2_11a88, 0
  br i1 %v4_11a88, label %dec_label_pc_11b20, label %dec_label_pc_11a90

dec_label_pc_11a90:                               ; preds = %dec_label_pc_11a88
  %v3_11a90 = icmp ult i32 %v0_11a74, 536870912
  br i1 %v3_11a90, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_11a90
  %v4_11a94 = mul i32 %v0_11a74, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_11a90, %.thread
  %v0_11ab4.pr36.ph = phi i32 [ %v4_11a94, %.thread ], [ %v0_11a74, %dec_label_pc_11a90 ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_11a90 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_11ab4.pr36 = phi i32 [ %v4_11aa8, %bb85 ], [ %v0_11ab4.pr36.ph, %.preheader.preheader ]
  %v1_11aac = phi i32 [ %v4_11aac, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_11aa0 = icmp ugt i32 %v0_11ab4.pr36, 268435455
  br i1 %v2_11aa0, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_11ab4thread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_11aa4 = icmp ult i32 %v0_11ab4.pr36, %v0_11a80
  br i1 %v4_11aa4, label %bb84, label %dec_label_pc_11ab4thread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_11aa8 = and i32 %v0_11ab4.pr36, 268435456
  %v3_11aa8 = icmp eq i32 %v2_11aa8, 0
  %v4_11aa8 = mul i32 %v0_11ab4.pr36, 16
  br i1 %v3_11aa8, label %bb85, label %dec_label_pc_11ab4.loopexit

bb85:                                             ; preds = %bb84
  %v2_11aac = and i32 %v1_11aac, 268435456
  %v3_11aac = icmp eq i32 %v2_11aac, 0
  %v4_11aac = mul i32 %v1_11aac, 16
  br i1 %v3_11aac, label %.preheader, label %dec_label_pc_11ab4thread-pre-split.loopexit.loopexit

dec_label_pc_11ab4thread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_11ac048.ph = phi i32 [ %v1_11aac, %bb83 ], [ %v4_11aac, %bb85 ]
  %v0_11ab4.pr38.ph = phi i32 [ %v0_11ab4.pr36, %bb83 ], [ %v4_11aa8, %bb85 ]
  br label %dec_label_pc_11ab4thread-pre-split.loopexit

dec_label_pc_11ab4thread-pre-split.loopexit:      ; preds = %dec_label_pc_11ab4thread-pre-split.loopexit.loopexit, %.thread2
  %v1_11ac048 = phi i32 [ %v1_11aac, %.thread2 ], [ %v1_11ac048.ph, %dec_label_pc_11ab4thread-pre-split.loopexit.loopexit ]
  %v0_11ab4.pr38 = phi i32 [ %v0_11ab4.pr36, %.thread2 ], [ %v0_11ab4.pr38.ph, %dec_label_pc_11ab4thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11ab4thread-pre-split

dec_label_pc_11ab4thread-pre-split:               ; preds = %dec_label_pc_11ab4thread-pre-split.loopexit, %bb87
  %v1_11ac046 = phi i32 [ %v1_11ac048, %dec_label_pc_11ab4thread-pre-split.loopexit ], [ %v3_11ac0, %bb87 ]
  %v0_11ab4.pr = phi i32 [ %v0_11ab4.pr38, %dec_label_pc_11ab4thread-pre-split.loopexit ], [ %v3_11abc, %bb87 ]
  br label %dec_label_pc_11ab4

dec_label_pc_11ab4.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_11ab4

dec_label_pc_11ab4:                               ; preds = %dec_label_pc_11ab4.loopexit, %dec_label_pc_11ab4thread-pre-split
  %v1_11ac0 = phi i32 [ %v1_11ac046, %dec_label_pc_11ab4thread-pre-split ], [ %v1_11aac, %dec_label_pc_11ab4.loopexit ]
  %v1_11abc = phi i32 [ %v0_11ab4.pr, %dec_label_pc_11ab4thread-pre-split ], [ %v4_11aa8, %dec_label_pc_11ab4.loopexit ]
  %v2_11ab4 = icmp slt i32 %v1_11abc, 0
  br i1 %v2_11ab4, label %dec_label_pc_11ac8, label %bb86

bb86:                                             ; preds = %dec_label_pc_11ab4
  %v4_11ab8 = icmp ult i32 %v1_11abc, %v0_11a80
  br i1 %v4_11ab8, label %bb87, label %dec_label_pc_11ac8

bb87:                                             ; preds = %bb86
  %v3_11abc = mul i32 %v1_11abc, 2
  %v2_11ac0 = icmp slt i32 %v1_11ac0, 0
  %v3_11ac0 = mul i32 %v1_11ac0, 2
  br i1 %v2_11ac0, label %dec_label_pc_11ac8, label %dec_label_pc_11ab4thread-pre-split

dec_label_pc_11ac8:                               ; preds = %bb86, %dec_label_pc_11ab4, %bb87
  %v2_11ad459 = phi i32 [ %v3_11ac0, %bb87 ], [ %v1_11ac0, %bb86 ], [ %v1_11ac0, %dec_label_pc_11ab4 ]
  %v1_11acc51 = phi i32 [ %v3_11abc, %bb87 ], [ %v1_11abc, %bb86 ], [ %v1_11abc, %dec_label_pc_11ab4 ]
  br label %dec_label_pc_11acc

dec_label_pc_11acc:                               ; preds = %.thread11, %dec_label_pc_11ac8
  %v1_11b00 = phi i32 [ %v4_11b00, %.thread11 ], [ %v2_11ad459, %dec_label_pc_11ac8 ]
  %v1_11ad4 = phi i32 [ %v0_11b0c, %.thread11 ], [ 0, %dec_label_pc_11ac8 ]
  %v1_11b04 = phi i32 [ %v4_11b04, %.thread11 ], [ %v1_11acc51, %dec_label_pc_11ac8 ]
  %v1_11ad0 = phi i32 [ %v0_11afc, %.thread11 ], [ %v0_11a80, %dec_label_pc_11ac8 ]
  %v3_11acc = icmp ult i32 %v1_11ad0, %v1_11b04
  br i1 %v3_11acc, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_11acc
  %v3_11ad0 = sub i32 %v1_11ad0, %v1_11b04
  %v3_11ad4 = or i32 %v1_11ad4, %v1_11b00
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_11acc, %bb88
  %v1_11adc = phi i32 [ %v1_11ad0, %dec_label_pc_11acc ], [ %v3_11ad0, %bb88 ]
  %v1_11ae0 = phi i32 [ %v1_11ad4, %dec_label_pc_11acc ], [ %v3_11ad4, %bb88 ]
  %v4_11ad8 = udiv i32 %v1_11b04, 2
  %v6_11ad8 = icmp ult i32 %v1_11adc, %v4_11ad8
  br i1 %v6_11ad8, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_11adc = urem i32 %v1_11b04, 2
  %v4_11adc = icmp eq i32 %v3_11adc, 0
  %v6_11adc = sub i32 %v1_11adc, %v4_11ad8
  br i1 %v4_11adc, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_11ae0 = udiv i32 %v1_11b00, 2
  %v6_11ae0 = or i32 %v1_11ae0, %v5_11ae0
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_11ae8 = phi i32 [ %v6_11adc, %bb89 ], [ %v1_11adc, %.thread7 ], [ %v6_11adc, %bb90 ]
  %v1_11aec = phi i32 [ %v1_11ae0, %bb89 ], [ %v1_11ae0, %.thread7 ], [ %v6_11ae0, %bb90 ]
  %v4_11ae4 = udiv i32 %v1_11b04, 4
  %v6_11ae4 = icmp ult i32 %v1_11ae8, %v4_11ae4
  br i1 %v6_11ae4, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_11ae8 = and i32 %v1_11b04, 2
  %v4_11ae8 = icmp eq i32 %v3_11ae8, 0
  %v6_11ae8 = sub i32 %v1_11ae8, %v4_11ae4
  br i1 %v4_11ae8, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_11aec = udiv i32 %v1_11b00, 4
  %v6_11aec = or i32 %v1_11aec, %v5_11aec
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_11af4 = phi i32 [ %v6_11ae8, %bb91 ], [ %v1_11ae8, %.thread8 ], [ %v6_11ae8, %bb92 ]
  %v1_11af8 = phi i32 [ %v1_11aec, %bb91 ], [ %v1_11aec, %.thread8 ], [ %v6_11aec, %bb92 ]
  %v4_11af0 = udiv i32 %v1_11b04, 8
  %v6_11af0 = icmp ult i32 %v1_11af4, %v4_11af0
  br i1 %v6_11af0, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_11af4 = and i32 %v1_11b04, 4
  %v4_11af4 = icmp eq i32 %v3_11af4, 0
  %v6_11af4 = sub i32 %v1_11af4, %v4_11af0
  br i1 %v4_11af4, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_11af8 = udiv i32 %v1_11b00, 8
  %v6_11af8 = or i32 %v1_11af8, %v5_11af8
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_11b0c = phi i32 [ %v1_11af8, %bb93 ], [ %v1_11af8, %.thread9 ], [ %v6_11af8, %bb94 ]
  %v0_11afc = phi i32 [ %v6_11af4, %bb93 ], [ %v1_11af4, %.thread9 ], [ %v6_11af4, %bb94 ]
  %v2_11afc = icmp eq i32 %v0_11afc, 0
  br i1 %v2_11afc, label %dec_label_pc_11b0c, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_11b00, 16
  br i1 %tmp142, label %dec_label_pc_11b0c, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_11b00 = udiv i32 %v1_11b00, 16
  %v4_11b04 = udiv i32 %v1_11b04, 16
  br label %dec_label_pc_11acc

dec_label_pc_11b0c:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_11b0c

dec_label_pc_11b14:                               ; preds = %dec_label_pc_11a80
  %v9_11a80 = icmp eq i32 %v0_11a80, %v0_11a74
  %. = zext i1 %v9_11a80 to i32
  ret i32 %.

dec_label_pc_11b20:                               ; preds = %dec_label_pc_11a88
  %v2_11b20 = icmp ugt i32 %v0_11a74, 65535
  br i1 %v2_11b20, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_11b20
  %v2_11b24 = and i32 %v0_11a74, 32768
  %v3_11b24 = icmp eq i32 %v2_11b24, 0
  %v4_11b24 = udiv i32 %v0_11a74, 65536
  br i1 %v3_11b24, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_11b20
  %v0_11b3065 = phi i32 [ %v0_11a74, %dec_label_pc_11b20 ], [ %v4_11b24, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_11b34 = phi i32 [ %v0_11b3065, %.thread16 ], [ %v4_11b24, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  %v2_11b30 = icmp ugt i32 %v1_11b34, 255
  br i1 %v2_11b30, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_11b34 = and i32 %v1_11b34, 128
  %v3_11b34 = icmp eq i32 %v2_11b34, 0
  %v4_11b34 = udiv i32 %v1_11b34, 256
  br i1 %v3_11b34, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_11b38 = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_11b44 = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_11b38, %bb102 ]
  %v1_11b40 = phi i32 [ %v1_11b34, %bb100 ], [ %v4_11b34, %bb101 ], [ %v4_11b34, %bb102 ]
  %v2_11b3c = icmp ugt i32 %v1_11b40, 15
  br i1 %v2_11b3c, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_11b40 = and i32 %v1_11b40, 8
  %v3_11b40 = icmp eq i32 %v2_11b40, 0
  %v4_11b40 = udiv i32 %v1_11b40, 16
  br i1 %v3_11b40, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_11b44 = add nsw i32 %v1_11b44, 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_11b4c = phi i32 [ %v1_11b44, %.thread17 ], [ %v1_11b44, %bb103 ], [ %v2_11b44, %bb104 ]
  %v5_11b50 = phi i32 [ %v1_11b40, %.thread17 ], [ %v4_11b40, %bb103 ], [ %v4_11b40, %bb104 ]
  %v2_11b48 = icmp ugt i32 %v5_11b50, 3
  %v7_11b48 = icmp eq i32 %v5_11b50, 4
  %v2_11b4c = xor i1 %v7_11b48, true
  %v3_11b4c = and i1 %v2_11b48, %v2_11b4c
  br i1 %v3_11b4c, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_11b4c = add nsw i32 %v4_11b4c, 3
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_11b50 = phi i32 [ %v4_11b4c, %.thread18 ], [ %v5_11b4c, %bb105 ]
  %v2_11b50 = xor i1 %v2_11b48, true
  %v3_11b50 = or i1 %v7_11b48, %v2_11b50
  br i1 %v3_11b50, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_11b50 = udiv i32 %v5_11b50, 2
  %v9_11b50 = add i32 %v4_11b50, %v8_11b50
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_11b54 = phi i32 [ %v4_11b50, %bb106 ], [ %v9_11b50, %bb107 ]
  %v6_11b54 = lshr i32 %v0_11a80, %v1_11b54
  ret i32 %v6_11b54

dec_label_pc_11b5c:                               ; preds = %bb82
  %v0_11b5c = load i32, i32* @lr, align 4
  %v0_11b60 = call i32 @function_11d34()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_11b5c)
  %v9_11b6c = load i32, i32* @lr, align 4
  %v0_11b70 = call i32 @function_11a74()
  store i32 %v9_11b6c, i32* @lr, align 4
  ret i32 %v0_11b70

; uselistorder directives
  uselistorder i32 %v4_11b50, { 1, 0 }
  uselistorder i1 %v7_11b48, { 1, 0 }
  uselistorder i32 %v4_11b40, { 1, 0 }
  uselistorder i32 %v1_11b40, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11b34, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_11b34, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11b24, { 1, 0 }
  uselistorder i32 %v0_11afc, { 1, 0 }
  uselistorder i32 %v4_11af0, { 1, 0 }
  uselistorder i32 %v1_11af8, { 1, 2, 0 }
  uselistorder i32 %v4_11ae4, { 1, 0 }
  uselistorder i32 %v1_11aec, { 1, 2, 0 }
  uselistorder i32 %v4_11ad8, { 1, 0 }
  uselistorder i32 %v1_11ae0, { 1, 2, 0 }
  uselistorder i32 %v1_11b04, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_11ad4, { 1, 0 }
  uselistorder i32 %v1_11b00, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_11ac0, { 1, 0 }
  uselistorder i32 %v3_11abc, { 1, 0 }
  uselistorder i32 %v1_11abc, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_11ac0, { 1, 2, 0, 3 }
  uselistorder i32 %v4_11aac, { 1, 0 }
  uselistorder i32 %v4_11aa8, { 2, 1, 0 }
  uselistorder i32 %v1_11aac, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_11ab4.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_11a80, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_11a74, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 65535, { 102, 53, 54, 0, 1, 12, 55, 27, 56, 26, 57, 25, 58, 13, 14, 2, 29, 59, 28, 60, 61, 15, 62, 3, 30, 63, 31, 64, 32, 65, 66, 4, 33, 67, 68, 16, 69, 24, 37, 70, 34, 71, 35, 72, 36, 73, 74, 17, 75, 5, 76, 77, 41, 78, 40, 79, 38, 80, 39, 81, 18, 19, 6, 82, 42, 83, 43, 84, 20, 21, 7, 85, 44, 86, 45, 87, 88, 8, 46, 89, 90, 91, 22, 92, 93, 9, 49, 94, 47, 95, 48, 96, 97, 23, 98, 10, 11, 52, 99, 50, 100, 51, 101 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_11b0c, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_11ac8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11ab4thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_11b84(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11b84:
  store i32 %arg1, i32* @r0, align 4
  %v1_11b84 = add i32 %arg2, -1
  %v2_11b84 = icmp eq i32 %arg2, 0
  br i1 %v2_11b84, label %dec_label_pc_11c40, label %dec_label_pc_11b8c

dec_label_pc_11b8c:                               ; preds = %dec_label_pc_11b84
  %v7_11b84 = icmp eq i32 %arg2, 1
  br i1 %v7_11b84, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_11b8c
  %v1_11b8c = load i32, i32* @r0, align 4
  %v10_11b8c = icmp eq i32 %v1_11b8c, %arg2
  br i1 %v10_11b8c, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_11b8c, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_11b8c = icmp ult i32 %v1_11b8c, %arg2
  br i1 %v4_11b8c, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_11b94 = and i32 %v1_11b84, %arg2
  %v8_11b94 = icmp eq i32 %v6_11b94, 0
  br i1 %v8_11b94, label %.thread67, label %dec_label_pc_11ba4.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_11b98 = phi i32 [ %v1_11b8c, %bb75 ], [ 0, %.thread65 ]
  %v3_11b98 = and i32 %v1_11b98, %v1_11b84
  br label %bb76

dec_label_pc_11ba4.preheader:                     ; preds = %bb75
  %v2_11ba499 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_11ba499, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_11c34, %bb74, %bb89, %bb84, %dec_label_pc_11c04, %.thread67
  %v5_11b9c = phi i32 [ %v1_11b8c, %bb74 ], [ %v3_11b98, %.thread67 ], [ %v1_11be0.v6_11be0.v6_11be8.v6_11bf0, %dec_label_pc_11c04 ], [ 0, %bb84 ], [ %v1_11c38, %dec_label_pc_11c34 ], [ %v2_11c34, %bb89 ]
  ret i32 %v5_11b9c

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_11ba4.preheader
  %v0_11bb8.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_11ba4.preheader ], [ %v4_11bac, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_11ba4.preheader ], [ %v2_11bb011, %.thread1.thread9 ]
  br label %dec_label_pc_11bb8thread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_11ba4.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_11bb011, %.thread1.thread9 ], [ 0, %dec_label_pc_11ba4.preheader ]
  %v0_11bb8.pr33100 = phi i32 [ %v4_11bac, %.thread1.thread9 ], [ %arg2, %dec_label_pc_11ba4.preheader ]
  %v4_11ba8 = icmp ult i32 %v0_11bb8.pr33100, %v1_11b8c
  br i1 %v4_11ba8, label %bb78, label %dec_label_pc_11bb8thread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_11bac = and i32 %v0_11bb8.pr33100, 268435456
  %v3_11bac = icmp eq i32 %v2_11bac, 0
  %v4_11bac = mul i32 %v0_11bb8.pr33100, 16
  br i1 %v3_11bac, label %.thread1.thread9, label %dec_label_pc_11bb8.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_11bb011 = add i32 %storemerge101, 4
  %v2_11ba4 = icmp ugt i32 %v4_11bac, 268435455
  br i1 %v2_11ba4, label %.thread, label %bb77

dec_label_pc_11bb8thread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_11bb8thread-pre-split.loopexit

dec_label_pc_11bb8thread-pre-split.loopexit:      ; preds = %dec_label_pc_11bb8thread-pre-split.loopexit.loopexit, %.thread
  %v0_11bb8.pr3398 = phi i32 [ %v0_11bb8.pr33.lcssa, %.thread ], [ %v0_11bb8.pr33100, %dec_label_pc_11bb8thread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_11bb8thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11bb8thread-pre-split

dec_label_pc_11bb8thread-pre-split:               ; preds = %.thread4, %dec_label_pc_11bb8thread-pre-split.loopexit
  %v1_11bc439 = phi i32 [ %storemerge95, %dec_label_pc_11bb8thread-pre-split.loopexit ], [ %v2_11bc4, %.thread4 ]
  %v0_11bb8.pr = phi i32 [ %v0_11bb8.pr3398, %dec_label_pc_11bb8thread-pre-split.loopexit ], [ %v3_11bc0, %.thread4 ]
  br label %dec_label_pc_11bb8

dec_label_pc_11bb8.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_11bb8

dec_label_pc_11bb8:                               ; preds = %dec_label_pc_11bb8.loopexit, %dec_label_pc_11bb8thread-pre-split
  %v0_11bcc.pr = phi i32 [ %v1_11bc439, %dec_label_pc_11bb8thread-pre-split ], [ %storemerge101, %dec_label_pc_11bb8.loopexit ]
  %v1_11bc0 = phi i32 [ %v0_11bb8.pr, %dec_label_pc_11bb8thread-pre-split ], [ %v4_11bac, %dec_label_pc_11bb8.loopexit ]
  %v2_11bb8 = icmp slt i32 %v1_11bc0, 0
  br i1 %v2_11bb8, label %dec_label_pc_11bcc, label %bb79

bb79:                                             ; preds = %dec_label_pc_11bb8
  %v4_11bbc = icmp ult i32 %v1_11bc0, %v1_11b8c
  br i1 %v4_11bbc, label %.thread4, label %dec_label_pc_11bcc

.thread4:                                         ; preds = %bb79
  %v3_11bc0 = mul i32 %v1_11bc0, 2
  %v2_11bc4 = add i32 %v0_11bcc.pr, 1
  br label %dec_label_pc_11bb8thread-pre-split

dec_label_pc_11bcc:                               ; preds = %bb79, %dec_label_pc_11bb8
  %v2_11bcc = add i32 %v0_11bcc.pr, -3
  %v5_11bd0 = icmp slt i32 %v0_11bcc.pr, 3
  br i1 %v5_11bd0, label %dec_label_pc_11c10, label %dec_label_pc_11bd4

dec_label_pc_11bd4:                               ; preds = %dec_label_pc_11bcc, %bb83
  %v6_11bfc = phi i32 [ %v0_11c04, %bb83 ], [ %v2_11bcc, %dec_label_pc_11bcc ]
  %v1_11bd8 = phi i32 [ %v1_11be0.v6_11be0.v6_11be8.v6_11bf0, %bb83 ], [ %v1_11b8c, %dec_label_pc_11bcc ]
  %v3_11bf812 = phi i32 [ %v3_11bf8, %bb83 ], [ %v1_11bc0, %dec_label_pc_11bcc ]
  %v3_11bd4 = icmp ult i32 %v1_11bd8, %v3_11bf812
  %v3_11bd8 = select i1 %v3_11bd4, i32 0, i32 %v3_11bf812
  %v1_11be0 = sub i32 %v1_11bd8, %v3_11bd8
  %v4_11bdc = udiv i32 %v3_11bf812, 2
  %v6_11bdc = icmp ult i32 %v1_11be0, %v4_11bdc
  %v6_11be0 = select i1 %v6_11bdc, i32 0, i32 %v4_11bdc
  %v1_11be0.v6_11be0 = sub i32 %v1_11be0, %v6_11be0
  %.demorgan = and i1 %v3_11bd4, %v6_11bdc
  %v4_11be4 = udiv i32 %v3_11bf812, 4
  %v6_11be4 = icmp ult i32 %v1_11be0.v6_11be0, %v4_11be4
  %v6_11be8 = select i1 %v6_11be4, i32 0, i32 %v4_11be4
  %v1_11be0.v6_11be0.v6_11be8 = sub i32 %v1_11be0.v6_11be0, %v6_11be8
  %.demorgan71 = and i1 %.demorgan, %v6_11be4
  %v4_11bec = udiv i32 %v3_11bf812, 8
  %v6_11bec = icmp ult i32 %v1_11be0.v6_11be0.v6_11be8, %v4_11bec
  %v6_11bf0 = select i1 %v6_11bec, i32 0, i32 %v4_11bec
  %v1_11be0.v6_11be0.v6_11be8.v6_11bf0 = sub i32 %v1_11be0.v6_11be0.v6_11be8, %v6_11bf0
  %.demorgan72 = and i1 %.demorgan71, %v6_11bec
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_11bd4
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_11bd4, %bb80
  %v2_11bf4 = add i32 %v1_11be0.v6_11be0.v6_11be8.v6_11bf0, -1
  %v4_11bf4 = sub i32 0, %v1_11be0.v6_11be0.v6_11be8.v6_11bf0
  %v5_11bf4 = and i32 %v1_11be0.v6_11be0.v6_11be8.v6_11bf0, %v4_11bf4
  %v3_11bf8 = udiv i32 %v3_11bf812, 16
  %v5_11bfc = icmp slt i32 %v1_11be0.v6_11be0.v6_11be8.v6_11bf0, 1
  br i1 %v5_11bfc, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_11bfc = add i32 %v6_11bfc, -4
  %v9_11bfc = sub i32 3, %v6_11bfc
  %v10_11bfc = and i32 %v9_11bfc, %v6_11bfc
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_11c04 = phi i32 [ %v6_11bfc, %bb81 ], [ %v7_11bfc, %bb82 ]
  %v0_11c0015.in = phi i32 [ %v2_11bf4, %bb81 ], [ %v7_11bfc, %bb82 ]
  %v1_11c0014.in = phi i32 [ %v5_11bf4, %bb81 ], [ %v10_11bfc, %bb82 ]
  %v1_11c0014 = icmp slt i32 %v1_11c0014.in, 0
  %v0_11c0015 = icmp slt i32 %v0_11c0015.in, 0
  %v2_11c00 = xor i1 %v0_11c0015, %v1_11c0014
  br i1 %v2_11c00, label %dec_label_pc_11c04, label %dec_label_pc_11bd4

dec_label_pc_11c04:                               ; preds = %bb83
  %v1_11c04 = urem i32 %v0_11c04, 4
  %v2_11c04 = icmp eq i32 %v1_11c04, 0
  br i1 %v2_11c04, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_11c04
  %v3_11c08 = icmp eq i32 %v1_11be0.v6_11be0.v6_11be8.v6_11bf0, 0
  br i1 %v3_11c08, label %bb76, label %dec_label_pc_11c10

dec_label_pc_11c10:                               ; preds = %bb84, %dec_label_pc_11bcc
  %v0_11c24 = phi i32 [ %v3_11bf8, %bb84 ], [ %v1_11bc0, %dec_label_pc_11bcc ]
  %v1_11c20 = phi i32 [ %v1_11be0.v6_11be0.v6_11be8.v6_11bf0, %bb84 ], [ %v1_11b8c, %dec_label_pc_11bcc ]
  %v0_11c10 = phi i32 [ %v0_11c04, %bb84 ], [ %v2_11bcc, %dec_label_pc_11bcc ]
  %v5_11c14 = icmp slt i32 %v0_11c10, -2
  br i1 %v5_11c14, label %dec_label_pc_11c34, label %dec_label_pc_11c18

dec_label_pc_11c18:                               ; preds = %dec_label_pc_11c10
  %v8_11c10 = icmp eq i32 %v0_11c10, -2
  br i1 %v8_11c10, label %dec_label_pc_11c28, label %dec_label_pc_11c1c

dec_label_pc_11c1c:                               ; preds = %dec_label_pc_11c18
  %v3_11c1c = icmp ult i32 %v1_11c20, %v0_11c24
  br i1 %v3_11c1c, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_11c1c
  %v2_11c1c = sub i32 %v1_11c20, %v0_11c24
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_11c1c, %bb85
  %v0_11c2852 = phi i32 [ %v1_11c20, %dec_label_pc_11c1c ], [ %v2_11c1c, %bb85 ]
  %v3_11c24 = udiv i32 %v0_11c24, 2
  br label %dec_label_pc_11c28

dec_label_pc_11c28:                               ; preds = %dec_label_pc_11c18, %bb86
  %v0_11c30 = phi i32 [ %v0_11c24, %dec_label_pc_11c18 ], [ %v3_11c24, %bb86 ]
  %v1_11c2c = phi i32 [ %v1_11c20, %dec_label_pc_11c18 ], [ %v0_11c2852, %bb86 ]
  %v3_11c28 = icmp ult i32 %v1_11c2c, %v0_11c30
  br i1 %v3_11c28, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_11c28
  %v2_11c28 = sub i32 %v1_11c2c, %v0_11c30
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_11c28, %bb87
  %v0_11c3455 = phi i32 [ %v1_11c2c, %dec_label_pc_11c28 ], [ %v2_11c28, %bb87 ]
  %v3_11c30 = udiv i32 %v0_11c30, 2
  br label %dec_label_pc_11c34

dec_label_pc_11c34:                               ; preds = %dec_label_pc_11c10, %bb88
  %v2_11c38 = phi i32 [ %v0_11c24, %dec_label_pc_11c10 ], [ %v3_11c30, %bb88 ]
  %v1_11c38 = phi i32 [ %v1_11c20, %dec_label_pc_11c10 ], [ %v0_11c3455, %bb88 ]
  %v3_11c34 = icmp ult i32 %v1_11c38, %v2_11c38
  br i1 %v3_11c34, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_11c34
  %v2_11c34 = sub i32 %v1_11c38, %v2_11c38
  br label %bb76

dec_label_pc_11c40:                               ; preds = %dec_label_pc_11b84
  %v0_11c40 = load i32, i32* @lr, align 4
  %v0_11c44 = call i32 @function_11d34()
  call void @__pseudo_branch(i32 %v0_11c40)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11c38, { 1, 2, 0 }
  uselistorder i32 %v0_11c24, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11c04, { 1, 0, 2 }
  uselistorder i32 %v7_11bfc, { 1, 0 }
  uselistorder i32 %v3_11bf8, { 1, 0 }
  uselistorder i32 %v1_11be0.v6_11be0.v6_11be8.v6_11bf0, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_11bec, { 1, 0 }
  uselistorder i32 %v4_11be4, { 1, 0 }
  uselistorder i32 %v4_11bdc, { 1, 0 }
  uselistorder i32 %v6_11bfc, { 3, 0, 2, 1 }
  uselistorder i32 %v2_11bcc, { 1, 0 }
  uselistorder i32 %v1_11bc0, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_11bac, { 1, 0, 3, 2 }
  uselistorder i32 %v0_11bb8.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11b8c, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_11c34, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_11c28, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_11bd4, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_11c50(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11c50:
  store i32 %arg1, i32* @r0, align 4
  %v2_11c50 = icmp eq i32 %arg2, 0
  br i1 %v2_11c50, label %dec_label_pc_11d24, label %dec_label_pc_11c58

dec_label_pc_11c58:                               ; preds = %dec_label_pc_11c50
  %v1_11c50 = icmp slt i32 %arg2, 0
  br i1 %v1_11c50, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_11c58
  %v2_11c58 = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_11c58, %bb
  %v4_11c70 = phi i32 [ %arg2, %dec_label_pc_11c58 ], [ %v2_11c58, %bb ]
  %v0_11c5c = load i32, i32* @r0, align 4
  %v1_11c5c = icmp slt i32 %v0_11c5c, 0
  br i1 %v1_11c5c, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_11c60 = sub i32 0, %v0_11c5c
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_11c68 = phi i32 [ %v0_11c5c, %bb79 ], [ %v2_11c60, %bb80 ]
  %v1_11c64 = add i32 %v4_11c70, -1
  %v7_11c64 = icmp eq i32 %v4_11c70, 1
  br i1 %v7_11c64, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_11c68 = icmp eq i32 %v1_11c68, %v4_11c70
  br i1 %v10_11c68, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_11c68 = icmp ult i32 %v1_11c68, %v4_11c70
  br i1 %v4_11c68, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_11c70 = and i32 %v1_11c64, %v4_11c70
  %v8_11c70 = icmp eq i32 %v6_11c70, 0
  br i1 %v8_11c70, label %.thread72, label %dec_label_pc_11c80.preheader

dec_label_pc_11c80.preheader:                     ; preds = %bb84
  %v2_11c80109 = icmp ugt i32 %v4_11c70, 268435455
  br i1 %v2_11c80109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_11c7464 = phi i32 [ %v1_11c68, %bb84 ], [ 0, %.thread70 ]
  %v3_11c74 = and i32 %v1_11c7464, %v1_11c64
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_11c80.preheader
  %v0_11c94.pr35.lcssa = phi i32 [ %v4_11c70, %dec_label_pc_11c80.preheader ], [ %v4_11c88, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_11c80.preheader ], [ %v2_11c8c9, %.thread2.thread7 ]
  br label %dec_label_pc_11c94thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_11c80.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_11c8c9, %.thread2.thread7 ], [ 0, %dec_label_pc_11c80.preheader ]
  %v0_11c94.pr35110 = phi i32 [ %v4_11c88, %.thread2.thread7 ], [ %v4_11c70, %dec_label_pc_11c80.preheader ]
  %v4_11c84 = icmp ult i32 %v0_11c94.pr35110, %v1_11c68
  br i1 %v4_11c84, label %bb86, label %dec_label_pc_11c94thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_11c88 = and i32 %v0_11c94.pr35110, 268435456
  %v3_11c88 = icmp eq i32 %v2_11c88, 0
  %v4_11c88 = mul i32 %v0_11c94.pr35110, 16
  br i1 %v3_11c88, label %.thread2.thread7, label %dec_label_pc_11c94.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_11c8c9 = add i32 %storemerge111, 4
  %v2_11c80 = icmp ugt i32 %v4_11c88, 268435455
  br i1 %v2_11c80, label %.thread1, label %bb85

dec_label_pc_11c94thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_11c94thread-pre-split.loopexit

dec_label_pc_11c94thread-pre-split.loopexit:      ; preds = %dec_label_pc_11c94thread-pre-split.loopexit.loopexit, %.thread1
  %v0_11c94.pr35108 = phi i32 [ %v0_11c94.pr35.lcssa, %.thread1 ], [ %v0_11c94.pr35110, %dec_label_pc_11c94thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_11c94thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11c94thread-pre-split

dec_label_pc_11c94thread-pre-split:               ; preds = %.thread4, %dec_label_pc_11c94thread-pre-split.loopexit
  %v1_11ca041 = phi i32 [ %storemerge105, %dec_label_pc_11c94thread-pre-split.loopexit ], [ %v2_11ca0, %.thread4 ]
  %v2_11c9836 = phi i32 [ %v1_11c68, %dec_label_pc_11c94thread-pre-split.loopexit ], [ %v2_11c98, %.thread4 ]
  %v0_11c94.pr = phi i32 [ %v0_11c94.pr35108, %dec_label_pc_11c94thread-pre-split.loopexit ], [ %v3_11c9c, %.thread4 ]
  br label %dec_label_pc_11c94

dec_label_pc_11c94.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_11c94

dec_label_pc_11c94:                               ; preds = %dec_label_pc_11c94.loopexit, %dec_label_pc_11c94thread-pre-split
  %v0_11ca8.pr = phi i32 [ %v1_11ca041, %dec_label_pc_11c94thread-pre-split ], [ %storemerge111, %dec_label_pc_11c94.loopexit ]
  %v2_11c98 = phi i32 [ %v2_11c9836, %dec_label_pc_11c94thread-pre-split ], [ %v1_11c68, %dec_label_pc_11c94.loopexit ]
  %v1_11c9c = phi i32 [ %v0_11c94.pr, %dec_label_pc_11c94thread-pre-split ], [ %v4_11c88, %dec_label_pc_11c94.loopexit ]
  %v2_11c94 = icmp slt i32 %v1_11c9c, 0
  br i1 %v2_11c94, label %dec_label_pc_11ca8, label %bb87

bb87:                                             ; preds = %dec_label_pc_11c94
  %v4_11c98 = icmp ult i32 %v1_11c9c, %v2_11c98
  br i1 %v4_11c98, label %.thread4, label %dec_label_pc_11ca8

.thread4:                                         ; preds = %bb87
  %v3_11c9c = mul i32 %v1_11c9c, 2
  %v2_11ca0 = add i32 %v0_11ca8.pr, 1
  br label %dec_label_pc_11c94thread-pre-split

dec_label_pc_11ca8:                               ; preds = %bb87, %dec_label_pc_11c94
  %v2_11ca8 = add i32 %v0_11ca8.pr, -3
  %v5_11cac = icmp slt i32 %v0_11ca8.pr, 3
  br i1 %v5_11cac, label %dec_label_pc_11cec, label %dec_label_pc_11cb0

dec_label_pc_11cb0:                               ; preds = %dec_label_pc_11ca8, %bb91
  %v6_11cd8 = phi i32 [ %v0_11ce0, %bb91 ], [ %v2_11ca8, %dec_label_pc_11ca8 ]
  %v1_11cb4 = phi i32 [ %v1_11cbc.v6_11cbc.v6_11cc4.v6_11ccc, %bb91 ], [ %v2_11c98, %dec_label_pc_11ca8 ]
  %v3_11cd410 = phi i32 [ %v3_11cd4, %bb91 ], [ %v1_11c9c, %dec_label_pc_11ca8 ]
  %v3_11cb0 = icmp ult i32 %v1_11cb4, %v3_11cd410
  %v3_11cb4 = select i1 %v3_11cb0, i32 0, i32 %v3_11cd410
  %v1_11cbc = sub i32 %v1_11cb4, %v3_11cb4
  %v4_11cb8 = udiv i32 %v3_11cd410, 2
  %v6_11cb8 = icmp ult i32 %v1_11cbc, %v4_11cb8
  %v6_11cbc = select i1 %v6_11cb8, i32 0, i32 %v4_11cb8
  %v1_11cbc.v6_11cbc = sub i32 %v1_11cbc, %v6_11cbc
  %.demorgan = and i1 %v3_11cb0, %v6_11cb8
  %v4_11cc0 = udiv i32 %v3_11cd410, 4
  %v6_11cc0 = icmp ult i32 %v1_11cbc.v6_11cbc, %v4_11cc0
  %v6_11cc4 = select i1 %v6_11cc0, i32 0, i32 %v4_11cc0
  %v1_11cbc.v6_11cbc.v6_11cc4 = sub i32 %v1_11cbc.v6_11cbc, %v6_11cc4
  %.demorgan76 = and i1 %.demorgan, %v6_11cc0
  %v4_11cc8 = udiv i32 %v3_11cd410, 8
  %v6_11cc8 = icmp ult i32 %v1_11cbc.v6_11cbc.v6_11cc4, %v4_11cc8
  %v6_11ccc = select i1 %v6_11cc8, i32 0, i32 %v4_11cc8
  %v1_11cbc.v6_11cbc.v6_11cc4.v6_11ccc = sub i32 %v1_11cbc.v6_11cbc.v6_11cc4, %v6_11ccc
  %.demorgan77 = and i1 %.demorgan76, %v6_11cc8
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_11cb0
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_11cb0, %bb88
  %v2_11cd0 = add i32 %v1_11cbc.v6_11cbc.v6_11cc4.v6_11ccc, -1
  %v4_11cd0 = sub i32 0, %v1_11cbc.v6_11cbc.v6_11cc4.v6_11ccc
  %v5_11cd0 = and i32 %v1_11cbc.v6_11cbc.v6_11cc4.v6_11ccc, %v4_11cd0
  %v3_11cd4 = udiv i32 %v3_11cd410, 16
  %v5_11cd8 = icmp slt i32 %v1_11cbc.v6_11cbc.v6_11cc4.v6_11ccc, 1
  br i1 %v5_11cd8, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_11cd8 = add i32 %v6_11cd8, -4
  %v9_11cd8 = sub i32 3, %v6_11cd8
  %v10_11cd8 = and i32 %v9_11cd8, %v6_11cd8
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_11ce0 = phi i32 [ %v6_11cd8, %bb89 ], [ %v7_11cd8, %bb90 ]
  %v0_11cdc13.in = phi i32 [ %v2_11cd0, %bb89 ], [ %v7_11cd8, %bb90 ]
  %v1_11cdc12.in = phi i32 [ %v5_11cd0, %bb89 ], [ %v10_11cd8, %bb90 ]
  %v1_11cdc12 = icmp slt i32 %v1_11cdc12.in, 0
  %v0_11cdc13 = icmp slt i32 %v0_11cdc13.in, 0
  %v2_11cdc = xor i1 %v0_11cdc13, %v1_11cdc12
  br i1 %v2_11cdc, label %dec_label_pc_11ce0, label %dec_label_pc_11cb0

dec_label_pc_11ce0:                               ; preds = %bb91
  %v1_11ce0 = urem i32 %v0_11ce0, 4
  %v2_11ce0 = icmp eq i32 %v1_11ce0, 0
  br i1 %v2_11ce0, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_11ce0
  %v3_11ce4 = icmp eq i32 %v1_11cbc.v6_11cbc.v6_11cc4.v6_11ccc, 0
  br i1 %v3_11ce4, label %.thread6, label %dec_label_pc_11cec

dec_label_pc_11cec:                               ; preds = %bb92, %dec_label_pc_11ca8
  %v0_11d00 = phi i32 [ %v3_11cd4, %bb92 ], [ %v1_11c9c, %dec_label_pc_11ca8 ]
  %v1_11cfc = phi i32 [ %v1_11cbc.v6_11cbc.v6_11cc4.v6_11ccc, %bb92 ], [ %v2_11c98, %dec_label_pc_11ca8 ]
  %v0_11cec = phi i32 [ %v0_11ce0, %bb92 ], [ %v2_11ca8, %dec_label_pc_11ca8 ]
  %v5_11cf0 = icmp slt i32 %v0_11cec, -2
  br i1 %v5_11cf0, label %dec_label_pc_11d10, label %dec_label_pc_11cf4

dec_label_pc_11cf4:                               ; preds = %dec_label_pc_11cec
  %v8_11cec = icmp eq i32 %v0_11cec, -2
  br i1 %v8_11cec, label %dec_label_pc_11d04, label %dec_label_pc_11cf8

dec_label_pc_11cf8:                               ; preds = %dec_label_pc_11cf4
  %v3_11cf8 = icmp ult i32 %v1_11cfc, %v0_11d00
  br i1 %v3_11cf8, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_11cf8
  %v2_11cf8 = sub i32 %v1_11cfc, %v0_11d00
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_11cf8, %bb93
  %v0_11d0454 = phi i32 [ %v1_11cfc, %dec_label_pc_11cf8 ], [ %v2_11cf8, %bb93 ]
  %v3_11d00 = udiv i32 %v0_11d00, 2
  br label %dec_label_pc_11d04

dec_label_pc_11d04:                               ; preds = %dec_label_pc_11cf4, %bb94
  %v0_11d0c = phi i32 [ %v0_11d00, %dec_label_pc_11cf4 ], [ %v3_11d00, %bb94 ]
  %v1_11d08 = phi i32 [ %v1_11cfc, %dec_label_pc_11cf4 ], [ %v0_11d0454, %bb94 ]
  %v3_11d04 = icmp ult i32 %v1_11d08, %v0_11d0c
  br i1 %v3_11d04, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_11d04
  %v2_11d04 = sub i32 %v1_11d08, %v0_11d0c
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_11d04, %bb95
  %v0_11d1057 = phi i32 [ %v1_11d08, %dec_label_pc_11d04 ], [ %v2_11d04, %bb95 ]
  %v3_11d0c = udiv i32 %v0_11d0c, 2
  br label %dec_label_pc_11d10

dec_label_pc_11d10:                               ; preds = %dec_label_pc_11cec, %bb96
  %v2_11d14 = phi i32 [ %v0_11d00, %dec_label_pc_11cec ], [ %v3_11d0c, %bb96 ]
  %v1_11d14 = phi i32 [ %v1_11cfc, %dec_label_pc_11cec ], [ %v0_11d1057, %bb96 ]
  %v3_11d10 = icmp ult i32 %v1_11d14, %v2_11d14
  br i1 %v3_11d10, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_11d10
  %v2_11d10 = sub i32 %v1_11d14, %v2_11d14
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_11d10, %bb83, %.thread72, %dec_label_pc_11ce0, %bb92, %bb97
  %v1_11d1c = phi i32 [ %v1_11cbc.v6_11cbc.v6_11cc4.v6_11ccc, %dec_label_pc_11ce0 ], [ 0, %bb92 ], [ %v1_11d14, %dec_label_pc_11d10 ], [ %v2_11d10, %bb97 ], [ %v3_11c74, %.thread72 ], [ %v1_11c68, %bb83 ]
  br i1 %v1_11c5c, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_11d1c = sub i32 0, %v1_11d1c
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_11d20 = phi i32 [ %v1_11d1c, %.thread6 ], [ %v2_11d1c, %bb98 ]
  ret i32 %v1_11d20

dec_label_pc_11d24:                               ; preds = %dec_label_pc_11c50
  %v0_11d24 = load i32, i32* @lr, align 4
  %v0_11d28 = call i32 @function_11d34()
  call void @__pseudo_branch(i32 %v0_11d24)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_11d00, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11ce0, { 1, 0, 2 }
  uselistorder i32 %v7_11cd8, { 1, 0 }
  uselistorder i32 %v3_11cd4, { 1, 0 }
  uselistorder i32 %v1_11cbc.v6_11cbc.v6_11cc4.v6_11ccc, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_11cc8, { 1, 0 }
  uselistorder i32 %v4_11cc0, { 1, 0 }
  uselistorder i32 %v4_11cb8, { 1, 0 }
  uselistorder i32 %v6_11cd8, { 3, 0, 2, 1 }
  uselistorder i32 %v2_11ca8, { 1, 0 }
  uselistorder i32 %v1_11c9c, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_11c98, { 1, 0, 3, 2 }
  uselistorder i32 %v4_11c88, { 1, 0, 3, 2 }
  uselistorder i32 %v0_11c94.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11c68, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_11c70, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_11d34, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_11d10, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_11d04, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_11cb0, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_11d34() local_unnamed_addr {
dec_label_pc_11d34:
  %v1_11d34 = load i32, i32* @r0, align 4
  ret i32 %v1_11d34
}

define i32 @function_11d38(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11d38:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_11d38 = load i32, i32* @r2, align 4
  %v1_11d48 = add i32 %arg2, -12
  store i32 %v6_11d38, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_11d48, 2
  br i1 %tmp, label %dec_label_pc_11d70, label %dec_label_pc_11d68

dec_label_pc_11d68:                               ; preds = %dec_label_pc_11d38
  %v0_11d68 = call i32 @function_11dac()
  br label %dec_label_pc_11d9c

dec_label_pc_11d70:                               ; preds = %dec_label_pc_11d38
  %v2_11d78 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_11d78, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_11d78, -4095
  br i1 %tmp8, label %dec_label_pc_11d9c, label %dec_label_pc_11d88

dec_label_pc_11d88:                               ; preds = %dec_label_pc_11d70
  %v0_11d88 = call i32 @function_123d0()
  %v0_11d8c = load i32, i32* %r4.global-to-local, align 4
  %v1_11d8c = sub i32 0, %v0_11d8c
  %v2_11d90 = inttoptr i32 %v0_11d88 to i32*
  store i32 %v1_11d8c, i32* %v2_11d90, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11d9c

dec_label_pc_11d9c:                               ; preds = %dec_label_pc_11d88, %dec_label_pc_11d70, %dec_label_pc_11d68
  %storemerge = phi i32 [ %v0_11d68, %dec_label_pc_11d68 ], [ %v2_11d78, %dec_label_pc_11d70 ], [ -1, %dec_label_pc_11d88 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_11d78, { 1, 0, 2 }
}

define i32 @function_11dac() local_unnamed_addr {
dec_label_pc_11dac:
  %r4.global-to-local = alloca i32, align 4
  %v0_11dcc = load i32, i32* @r0, align 4
  store i32 %v0_11dcc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11dcc, -4095
  br i1 %tmp, label %dec_label_pc_11de8, label %dec_label_pc_11dd8

dec_label_pc_11dd8:                               ; preds = %dec_label_pc_11dac
  %v0_11dd8 = call i32 @function_123d0()
  %v0_11ddc = load i32, i32* %r4.global-to-local, align 4
  %v1_11ddc = sub i32 0, %v0_11ddc
  %v2_11de0 = inttoptr i32 %v0_11dd8 to i32*
  store i32 %v1_11ddc, i32* %v2_11de0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11de8

dec_label_pc_11de8:                               ; preds = %dec_label_pc_11dac, %dec_label_pc_11dd8
  %v0_11de8 = phi i32 [ %v0_11dcc, %dec_label_pc_11dac ], [ -1, %dec_label_pc_11dd8 ]
  ret i32 %v0_11de8

; uselistorder directives
  uselistorder i32 %v0_11dcc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11de8, { 1, 0 }
}

define i32 @function_11dfc(i32 %arg1) local_unnamed_addr {
dec_label_pc_11dfc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11dfc = load i32, i32* @r4, align 4
  store i32 %v3_11dfc, i32* %stack_var_-8, align 4
  %v1_11e00 = call i32 @close(i32 %arg1)
  store i32 %v1_11e00, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_11e00, -4095
  br i1 %tmp, label %dec_label_pc_11e20, label %dec_label_pc_11e10

dec_label_pc_11e10:                               ; preds = %dec_label_pc_11dfc
  %v0_11e10 = call i32 @function_123d0()
  %v0_11e14 = load i32, i32* %r4.global-to-local, align 4
  %v1_11e14 = sub i32 0, %v0_11e14
  %v2_11e18 = inttoptr i32 %v0_11e10 to i32*
  store i32 %v1_11e14, i32* %v2_11e18, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11e20

dec_label_pc_11e20:                               ; preds = %dec_label_pc_11dfc, %dec_label_pc_11e10
  %v0_11e20 = phi i32 [ %v1_11e00, %dec_label_pc_11dfc ], [ -1, %dec_label_pc_11e10 ]
  %v2_11e24 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11e24, i32* @r4, align 4
  ret i32 %v0_11e20

; uselistorder directives
  uselistorder i32 %v1_11e00, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11e20, { 1, 0 }
}

define i32 @function_11e28() local_unnamed_addr {
dec_label_pc_11e28:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11e28 = load i32, i32* @r4, align 4
  store i32 %v3_11e28, i32* %stack_var_-8, align 4
  %v0_11e2c = call i32 @fork()
  store i32 %v0_11e2c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11e2c, -4095
  br i1 %tmp, label %dec_label_pc_11e4c, label %dec_label_pc_11e3c

dec_label_pc_11e3c:                               ; preds = %dec_label_pc_11e28
  %v0_11e3c = call i32 @function_123d0()
  %v0_11e40 = load i32, i32* %r4.global-to-local, align 4
  %v1_11e40 = sub i32 0, %v0_11e40
  %v2_11e44 = inttoptr i32 %v0_11e3c to i32*
  store i32 %v1_11e40, i32* %v2_11e44, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11e4c

dec_label_pc_11e4c:                               ; preds = %dec_label_pc_11e28, %dec_label_pc_11e3c
  %v0_11e4c = phi i32 [ %v0_11e2c, %dec_label_pc_11e28 ], [ -1, %dec_label_pc_11e3c ]
  %v2_11e50 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11e50, i32* @r4, align 4
  ret i32 %v0_11e4c

; uselistorder directives
  uselistorder i32 %v0_11e2c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11e4c, { 1, 0 }
}

define i32 @function_11e54() local_unnamed_addr {
dec_label_pc_11e54:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11e54 = load i32, i32* @r4, align 4
  store i32 %v3_11e54, i32* %stack_var_-8, align 4
  %v0_11e58 = call i32 @getpid()
  store i32 %v0_11e58, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11e58, -4095
  br i1 %tmp, label %dec_label_pc_11e78, label %dec_label_pc_11e68

dec_label_pc_11e68:                               ; preds = %dec_label_pc_11e54
  %v0_11e68 = call i32 @function_123d0()
  %v0_11e6c = load i32, i32* %r4.global-to-local, align 4
  %v1_11e6c = sub i32 0, %v0_11e6c
  %v2_11e70 = inttoptr i32 %v0_11e68 to i32*
  store i32 %v1_11e6c, i32* %v2_11e70, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11e78

dec_label_pc_11e78:                               ; preds = %dec_label_pc_11e54, %dec_label_pc_11e68
  %v0_11e78 = phi i32 [ %v0_11e58, %dec_label_pc_11e54 ], [ -1, %dec_label_pc_11e68 ]
  %v2_11e7c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11e7c, i32* @r4, align 4
  ret i32 %v0_11e78

; uselistorder directives
  uselistorder i32 %v0_11e58, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11e78, { 1, 0 }
}

define i32 @function_11e80() local_unnamed_addr {
dec_label_pc_11e80:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11e80 = load i32, i32* @r4, align 4
  store i32 %v3_11e80, i32* %stack_var_-8, align 4
  %v0_11e84 = call i32 @getppid()
  store i32 %v0_11e84, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11e84, -4095
  br i1 %tmp, label %dec_label_pc_11ea4, label %dec_label_pc_11e94

dec_label_pc_11e94:                               ; preds = %dec_label_pc_11e80
  %v0_11e94 = call i32 @function_123d0()
  %v0_11e98 = load i32, i32* %r4.global-to-local, align 4
  %v1_11e98 = sub i32 0, %v0_11e98
  %v2_11e9c = inttoptr i32 %v0_11e94 to i32*
  store i32 %v1_11e98, i32* %v2_11e9c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11ea4

dec_label_pc_11ea4:                               ; preds = %dec_label_pc_11e80, %dec_label_pc_11e94
  %v0_11ea4 = phi i32 [ %v0_11e84, %dec_label_pc_11e80 ], [ -1, %dec_label_pc_11e94 ]
  %v2_11ea8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11ea8, i32* @r4, align 4
  ret i32 %v0_11ea4

; uselistorder directives
  uselistorder i32 %v0_11e84, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11ea4, { 1, 0 }
}

define i32 @function_11eac(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11eac:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_11eac = load i32, i32* @r3, align 4
  store i32 %v9_11eac, i32* %stack_var_-4, align 4
  %v2_11eb8 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_11eb8, i32* @r3, align 4
  %v2_11ec8 = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_11ec8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_11ec8, -4095
  br i1 %tmp, label %dec_label_pc_11ee8, label %dec_label_pc_11ed8

dec_label_pc_11ed8:                               ; preds = %dec_label_pc_11eac
  %v0_11ed8 = call i32 @function_123d0()
  %v0_11edc = load i32, i32* %r4.global-to-local, align 4
  %v1_11edc = sub i32 0, %v0_11edc
  store i32 %v1_11edc, i32* @r3, align 4
  %v2_11ee0 = inttoptr i32 %v0_11ed8 to i32*
  store i32 %v1_11edc, i32* %v2_11ee0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11ee8

dec_label_pc_11ee8:                               ; preds = %dec_label_pc_11eac, %dec_label_pc_11ed8
  %v0_11ee8 = phi i32 [ %v2_11ec8, %dec_label_pc_11eac ], [ -1, %dec_label_pc_11ed8 ]
  ret i32 %v0_11ee8

; uselistorder directives
  uselistorder i32 %v2_11ec8, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_11ee8, { 1, 0 }
}

define i32 @function_11efc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11efc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11efc = load i32, i32* @r4, align 4
  store i32 %v3_11efc, i32* %stack_var_-8, align 4
  %v2_11f00 = call i32 @kill(i32 %arg1, i32 %arg2)
  %v7_11f04 = icmp eq i32 %v2_11f00, -4096
  store i1 %v7_11f04, i1* @cpsr_z, align 1
  store i32 %v2_11f00, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_11f00, -4095
  br i1 %tmp, label %dec_label_pc_11f20, label %dec_label_pc_11f10

dec_label_pc_11f10:                               ; preds = %dec_label_pc_11efc
  %v0_11f10 = call i32 @function_123d0()
  %v0_11f14 = load i32, i32* %r4.global-to-local, align 4
  %v1_11f14 = sub i32 0, %v0_11f14
  %v2_11f18 = inttoptr i32 %v0_11f10 to i32*
  store i32 %v1_11f14, i32* %v2_11f18, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11f20

dec_label_pc_11f20:                               ; preds = %dec_label_pc_11efc, %dec_label_pc_11f10
  %v0_11f20 = phi i32 [ %v2_11f00, %dec_label_pc_11efc ], [ -1, %dec_label_pc_11f10 ]
  %v2_11f24 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11f24, i32* @r4, align 4
  ret i32 %v0_11f20

; uselistorder directives
  uselistorder i32 %v2_11f00, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_11f20, { 1, 0 }
}

define i32 @function_11f28(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11f28:
  %r4.global-to-local = alloca i32, align 4
  %v6_11f28 = load i32, i32* @r2, align 4
  %v1_11f38 = and i32 %arg2, 64
  store i32 %v1_11f38, i32* @r3, align 4
  %v2_11f38 = icmp eq i32 %v1_11f38, 0
  br i1 %v2_11f38, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_11f28
  store i32 %v6_11f28, i32* @r3, align 4
  %phitmp = urem i32 %v6_11f28, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_11f28, %bb
  %v0_11f48 = phi i32 [ 0, %dec_label_pc_11f28 ], [ %phitmp, %bb ]
  store i32 %v0_11f48, i32* @r2, align 4
  %v4_11f50 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_11f54 = icmp eq i32 %v4_11f50, -4096
  store i1 %v7_11f54, i1* @cpsr_z, align 1
  store i32 %v4_11f50, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_11f50, -4095
  br i1 %tmp, label %dec_label_pc_11f70, label %dec_label_pc_11f60

dec_label_pc_11f60:                               ; preds = %.thread1
  %v0_11f60 = call i32 @function_123d0()
  %v0_11f64 = load i32, i32* %r4.global-to-local, align 4
  %v1_11f64 = sub i32 0, %v0_11f64
  store i32 %v1_11f64, i32* @r3, align 4
  %v2_11f68 = inttoptr i32 %v0_11f60 to i32*
  store i32 %v1_11f64, i32* %v2_11f68, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11f70

dec_label_pc_11f70:                               ; preds = %.thread1, %dec_label_pc_11f60
  %v0_11f70 = phi i32 [ %v4_11f50, %.thread1 ], [ -1, %dec_label_pc_11f60 ]
  ret i32 %v0_11f70

; uselistorder directives
  uselistorder i32 %v4_11f50, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_11f70, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_11f84(i32 %arg1) local_unnamed_addr {
dec_label_pc_11f84:
  store i32 %arg1, i32* @r2, align 4
  %v0_11f8c = load i32, i32* @r0, align 4
  %v2_11f8c = inttoptr i32 %v0_11f8c to i8*
  %v3_11f8c = call i32 @function_11f28(i8* %v2_11f8c, i32 577)
  %v0_11f90 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11f90, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_11f84
  %v6_11f90 = and i32 %v3_11f8c, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_11f84, %bb
  %v7_11f90 = phi i32 [ %v3_11f8c, %dec_label_pc_11f84 ], [ %v6_11f90, %bb ]
  ret i32 %v7_11f90

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_11f94(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11f94:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11f94 = load i32, i32* @r4, align 4
  store i32 %v3_11f94, i32* %stack_var_-8, align 4
  %v2_11f9c = load i32, i32* @r2, align 4
  %v3_11f9c = load i32, i32* @r3, align 4
  %v4_11f9c = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %v2_11f9c, i32 %v3_11f9c, i32 0)
  store i32 %v4_11f9c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_11f9c, -4095
  br i1 %tmp, label %dec_label_pc_11fbc, label %dec_label_pc_11fac

dec_label_pc_11fac:                               ; preds = %dec_label_pc_11f94
  %v0_11fac = call i32 @function_123d0()
  %v0_11fb0 = load i32, i32* %r4.global-to-local, align 4
  %v1_11fb0 = sub i32 0, %v0_11fb0
  %v2_11fb4 = inttoptr i32 %v0_11fac to i32*
  store i32 %v1_11fb0, i32* %v2_11fb4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11fbc

dec_label_pc_11fbc:                               ; preds = %dec_label_pc_11f94, %dec_label_pc_11fac
  %v0_11fbc = phi i32 [ %v4_11f9c, %dec_label_pc_11f94 ], [ -1, %dec_label_pc_11fac ]
  %v2_11fc0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11fc0, i32* @r4, align 4
  ret i32 %v0_11fbc

; uselistorder directives
  uselistorder i32 %v4_11f9c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11fbc, { 1, 0 }
}

define i32 @function_11fc4(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11fc4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11fc4 = load i32, i32* @r4, align 4
  store i32 %v3_11fc4, i32* %stack_var_-8, align 4
  %v4_11fc8 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_11fc8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_11fc8, -4095
  br i1 %tmp, label %dec_label_pc_11fe8, label %dec_label_pc_11fd8

dec_label_pc_11fd8:                               ; preds = %dec_label_pc_11fc4
  %v0_11fd8 = call i32 @function_123d0()
  %v0_11fdc = load i32, i32* %r4.global-to-local, align 4
  %v1_11fdc = sub i32 0, %v0_11fdc
  %v2_11fe0 = inttoptr i32 %v0_11fd8 to i32*
  store i32 %v1_11fdc, i32* %v2_11fe0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11fe8

dec_label_pc_11fe8:                               ; preds = %dec_label_pc_11fc4, %dec_label_pc_11fd8
  %v0_11fe8 = phi i32 [ %v4_11fc8, %dec_label_pc_11fc4 ], [ -1, %dec_label_pc_11fd8 ]
  %v2_11fec = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11fec, i32* @r4, align 4
  ret i32 %v0_11fe8

; uselistorder directives
  uselistorder i32 %v4_11fc8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11fe8, { 1, 0 }
}

define i32 @function_11ff0(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11ff0:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v3_11ff0 = load i32, i32* @r4, align 4
  store i32 %v3_11ff0, i32* %stack_var_-8, align 4
  %v7_11ff4 = call i32 @readlink(i8* %arg1, i8* %tmp, i32 %arg3)
  store i32 %v7_11ff4, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v7_11ff4, -4095
  br i1 %tmp6, label %dec_label_pc_12014, label %dec_label_pc_12004

dec_label_pc_12004:                               ; preds = %dec_label_pc_11ff0
  %v0_12004 = call i32 @function_123d0()
  %v0_12008 = load i32, i32* %r4.global-to-local, align 4
  %v1_12008 = sub i32 0, %v0_12008
  %v2_1200c = inttoptr i32 %v0_12004 to i32*
  store i32 %v1_12008, i32* %v2_1200c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12014

dec_label_pc_12014:                               ; preds = %dec_label_pc_11ff0, %dec_label_pc_12004
  %v0_12014 = phi i32 [ %v7_11ff4, %dec_label_pc_11ff0 ], [ -1, %dec_label_pc_12004 ]
  %v2_12018 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12018, i32* @r4, align 4
  ret i32 %v0_12014

; uselistorder directives
  uselistorder i32 %v7_11ff4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12014, { 1, 0 }
}

define i32 @function_1201c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_1201c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1201c = load i32, i32* @r4, align 4
  store i32 %v3_1201c, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12044, label %dec_label_pc_12034

dec_label_pc_12034:                               ; preds = %dec_label_pc_1201c
  %v0_12034 = call i32 @function_123d0()
  %v0_12038 = load i32, i32* %r4.global-to-local, align 4
  %v1_12038 = sub i32 0, %v0_12038
  %v2_1203c = inttoptr i32 %v0_12034 to i32*
  store i32 %v1_12038, i32* %v2_1203c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12048.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12044

dec_label_pc_12044:                               ; preds = %dec_label_pc_1201c, %dec_label_pc_12034
  %v2_12048 = phi i32 [ %v3_1201c, %dec_label_pc_1201c ], [ %v2_12048.pre, %dec_label_pc_12034 ]
  %v0_12044 = phi i32 [ %arg1, %dec_label_pc_1201c ], [ -1, %dec_label_pc_12034 ]
  store i32 %v2_12048, i32* @r4, align 4
  ret i32 %v0_12044

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12044, { 1, 0 }
}

define i32 @function_1204c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1204c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1204c = load i32, i32* @r4, align 4
  store i32 %v3_1204c, i32* %stack_var_-8, align 4
  %v0_12050 = call i32 @setsid()
  store i32 %v0_12050, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12050, -4095
  br i1 %tmp, label %dec_label_pc_12070, label %dec_label_pc_12060

dec_label_pc_12060:                               ; preds = %dec_label_pc_1204c
  %v0_12060 = call i32 @function_123d0()
  %v0_12064 = load i32, i32* %r4.global-to-local, align 4
  %v1_12064 = sub i32 0, %v0_12064
  %v2_12068 = inttoptr i32 %v0_12060 to i32*
  store i32 %v1_12064, i32* %v2_12068, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12070

dec_label_pc_12070:                               ; preds = %dec_label_pc_1204c, %dec_label_pc_12060
  %v0_12070 = phi i32 [ %v0_12050, %dec_label_pc_1204c ], [ -1, %dec_label_pc_12060 ]
  %v2_12074 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12074, i32* @r4, align 4
  ret i32 %v0_12070

; uselistorder directives
  uselistorder i32 %v0_12050, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12070, { 1, 0 }
}

define i32 @function_12078(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12078:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12078 = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_12078, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_12078
  %v3_120805 = load i32, i32* @r4, align 4
  store i32 %v3_120805, i32* %stack_var_-8, align 4
  br label %dec_label_pc_120a0

bb:                                               ; preds = %dec_label_pc_12078
  %v3_12080 = load i32, i32* @r4, align 4
  store i32 %v3_12080, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_120a0, label %dec_label_pc_1208c

dec_label_pc_1208c:                               ; preds = %bb
  %v0_1208c = call i32 @function_123d0()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_12098 = inttoptr i32 %v0_1208c to i32*
  store i32 22, i32* %v2_12098, align 4
  %v0_120c4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_120c4

dec_label_pc_120a0:                               ; preds = %.thread, %bb
  %v7_120a0 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_120a0, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_120a0, -4095
  br i1 %tmp13, label %dec_label_pc_120c0, label %dec_label_pc_120b0

dec_label_pc_120b0:                               ; preds = %dec_label_pc_120a0
  %v0_120b0 = call i32 @function_123d0()
  %v0_120b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_120b4 = sub i32 0, %v0_120b4
  %v2_120b8 = inttoptr i32 %v0_120b0 to i32*
  store i32 %v1_120b4, i32* %v2_120b8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_120c0

dec_label_pc_120c0:                               ; preds = %dec_label_pc_120a0, %dec_label_pc_120b0
  %v0_120c0 = phi i32 [ %v7_120a0, %dec_label_pc_120a0 ], [ -1, %dec_label_pc_120b0 ]
  store i32 %v0_120c0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_120c4

dec_label_pc_120c4:                               ; preds = %dec_label_pc_1208c, %dec_label_pc_120c0
  %v0_120c4 = phi i32 [ %v0_120c4.pre, %dec_label_pc_1208c ], [ %v0_120c0, %dec_label_pc_120c0 ]
  %v2_120c8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_120c8, i32* @r4, align 4
  ret i32 %v0_120c4

; uselistorder directives
  uselistorder i32 %v7_120a0, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_120c4, { 1, 0 }
  uselistorder label %dec_label_pc_120c0, { 1, 0 }
  uselistorder label %dec_label_pc_120a0, { 1, 0 }
}

define i32 @function_120cc(i32* %arg1) local_unnamed_addr {
dec_label_pc_120cc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_120cc = load i32, i32* @r4, align 4
  store i32 %v3_120cc, i32* %stack_var_-8, align 4
  %v2_120d0 = call i32 @time(i32* %arg1)
  store i32 %v2_120d0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_120d0, -4095
  br i1 %tmp, label %dec_label_pc_120f0, label %dec_label_pc_120e0

dec_label_pc_120e0:                               ; preds = %dec_label_pc_120cc
  %v0_120e0 = call i32 @function_123d0()
  %v0_120e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_120e4 = sub i32 0, %v0_120e4
  %v2_120e8 = inttoptr i32 %v0_120e0 to i32*
  store i32 %v1_120e4, i32* %v2_120e8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_120f0

dec_label_pc_120f0:                               ; preds = %dec_label_pc_120cc, %dec_label_pc_120e0
  %v0_120f0 = phi i32 [ %v2_120d0, %dec_label_pc_120cc ], [ -1, %dec_label_pc_120e0 ]
  %v2_120f4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_120f4, i32* @r4, align 4
  ret i32 %v0_120f0

; uselistorder directives
  uselistorder i32 %v2_120d0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_120f0, { 1, 0 }
}

define i32 @function_120f8(i8* %arg1) local_unnamed_addr {
dec_label_pc_120f8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_120f8 = load i32, i32* @r4, align 4
  store i32 %v3_120f8, i32* %stack_var_-8, align 4
  %v3_120fc = call i32 @unlink(i8* %arg1)
  store i32 %v3_120fc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_120fc, -4095
  br i1 %tmp, label %dec_label_pc_1211c, label %dec_label_pc_1210c

dec_label_pc_1210c:                               ; preds = %dec_label_pc_120f8
  %v0_1210c = call i32 @function_123d0()
  %v0_12110 = load i32, i32* %r4.global-to-local, align 4
  %v1_12110 = sub i32 0, %v0_12110
  %v2_12114 = inttoptr i32 %v0_1210c to i32*
  store i32 %v1_12110, i32* %v2_12114, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1211c

dec_label_pc_1211c:                               ; preds = %dec_label_pc_120f8, %dec_label_pc_1210c
  %v0_1211c = phi i32 [ %v3_120fc, %dec_label_pc_120f8 ], [ -1, %dec_label_pc_1210c ]
  %v2_12120 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12120, i32* @r4, align 4
  ret i32 %v0_1211c

; uselistorder directives
  uselistorder i32 %v3_120fc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1211c, { 1, 0 }
}

define i32 @function_12124(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12124:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12124 = load i32, i32* @r4, align 4
  store i32 %v3_12124, i32* %stack_var_-8, align 4
  %v4_12128 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_12128, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_12128, -4095
  br i1 %tmp, label %dec_label_pc_12148, label %dec_label_pc_12138

dec_label_pc_12138:                               ; preds = %dec_label_pc_12124
  %v0_12138 = call i32 @function_123d0()
  %v0_1213c = load i32, i32* %r4.global-to-local, align 4
  %v1_1213c = sub i32 0, %v0_1213c
  %v2_12140 = inttoptr i32 %v0_12138 to i32*
  store i32 %v1_1213c, i32* %v2_12140, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12148

dec_label_pc_12148:                               ; preds = %dec_label_pc_12124, %dec_label_pc_12138
  %v0_12148 = phi i32 [ %v4_12128, %dec_label_pc_12124 ], [ -1, %dec_label_pc_12138 ]
  %v2_1214c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1214c, i32* @r4, align 4
  ret i32 %v0_12148

; uselistorder directives
  uselistorder i32 %v4_12128, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12148, { 1, 0 }
}

define i32 @function_12150(i32* %arg1) local_unnamed_addr {
dec_label_pc_12150:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_12150 = load i32, i32* @r4, align 4
  store i32 %v3_12150, i32* %stack_var_-20, align 4
  %v6_12150 = load i32, i32* @r5, align 4
  %v9_12150 = load i32, i32* @r6, align 4
  %v12_12150 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_12158 = load i32, i32* %arg1, align 4
  store i32 %v2_12158, i32* %r4.global-to-local, align 4
  %v2_1215c = ptrtoint i32* %stack_var_-36 to i32
  %v1_12160 = add i32 %tmp, 24
  store i32 %v1_12160, i32* @r6, align 4
  %v3_12164 = icmp eq i32 %v2_12158, -1
  store i32 %v2_1215c, i32* @r7, align 4
  store i32 %v1_12160, i32* %r2.global-to-local, align 4
  store i32 %v2_1215c, i32* @r0, align 4
  br i1 %v3_12164, label %dec_label_pc_1217c, label %dec_label_pc_12190

dec_label_pc_1217c:                               ; preds = %dec_label_pc_12150
  %v0_1217c = call i32 @function_123d0()
  %v0_12184 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12184, i32* %r2.global-to-local, align 4
  %v2_12188 = inttoptr i32 %v0_1217c to i32*
  store i32 9, i32* %v2_12188, align 4
  %v0_121e8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_121e8

dec_label_pc_12190:                               ; preds = %dec_label_pc_12150
  %v8_12198 = call i32 @function_13440(i32 %v2_1215c, i32 ptrtoint (i32* @global_var_13438.395 to i32), i32 %v1_12160, i32 78912, i32 %v3_12150, i32 %v6_12150, i32 %v9_12150)
  %v1_121a8 = call i32 @function_13438()
  %v0_121b4 = load i32, i32* @r5, align 4
  %v1_121b4 = inttoptr i32 %v0_121b4 to i32*
  %v2_121b4 = load i32, i32* %v1_121b4, align 4
  store i32 %v2_121b4, i32* @r4, align 4
  store i32 %v2_1215c, i32* @r0, align 4
  store i32 -1, i32* %v1_121b4, align 4
  store i32 ptrtoint (i32* @global_var_121cc.399 to i32), i32* @lr, align 4
  %v8_121c8 = call i32 @function_13440(i32 %v2_1215c, i32 1, i32 %v1_12160, i32 78912, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_121cc = load i32, i32* @r5, align 4
  %v1_121cc = add i32 %v0_121cc, 12
  %v2_121cc = inttoptr i32 %v1_121cc to i32*
  %v3_121cc = load i32, i32* %v2_121cc, align 4
  store i32 %v3_121cc, i32* @r0, align 4
  %v0_121d0 = call i32 @function_12a50()
  %v0_121d4 = load i32, i32* @r5, align 4
  store i32 %v0_121d4, i32* @r0, align 4
  %v0_121d8 = call i32 @function_12a50()
  %v0_121dc = load i32, i32* @r4, align 4
  %v1_121e0 = call i32 @function_11dfc(i32 %v0_121dc)
  store i32 %v1_121e0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_121e8

dec_label_pc_121e8:                               ; preds = %dec_label_pc_1217c, %dec_label_pc_12190
  %v0_121e8 = phi i32 [ %v0_121e8.pre, %dec_label_pc_1217c ], [ %v1_121e0, %dec_label_pc_12190 ]
  %v2_121f0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_121f0, i32* @r4, align 4
  store i32 %v6_12150, i32* @r5, align 4
  store i32 %v9_12150, i32* @r6, align 4
  store i32 %v12_12150, i32* @r7, align 4
  ret i32 %v0_121e8

; uselistorder directives
  uselistorder i32 %v1_12160, { 2, 1, 0, 3 }
  uselistorder i32 %v2_1215c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_12150, { 1, 0 }
  uselistorder i32 %v6_12150, { 1, 0 }
  uselistorder label %dec_label_pc_121e8, { 1, 0 }
}

define i32 @function_12204(i32 %arg1) local_unnamed_addr {
dec_label_pc_12204:
  %r5.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-108 = alloca i32, align 4
  %v3_12204 = load i32, i32* @r4, align 4
  %v9_12204 = load i32, i32* @r6, align 4
  %v12_12204 = load i32, i32* @r7, align 4
  %v0_12210 = load i32, i32* @r0, align 4
  %v2_12210 = inttoptr i32 %v0_12210 to i8*
  %v3_12210 = call i32 @function_11f28(i8* %v2_12210, i32 18432)
  store i32 %v3_12210, i32* @r0, align 4
  store i32 %v3_12210, i32* @r7, align 4
  %v1_12214 = icmp slt i32 %v3_12210, 0
  br i1 %v1_12214, label %.thread1, label %dec_label_pc_12220

.thread1:                                         ; preds = %dec_label_pc_12204
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_122f0

dec_label_pc_12220:                               ; preds = %dec_label_pc_12204
  %v2_1220c = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_1220c, i32* @r1, align 4
  %v0_12224 = call i32 @function_13864()
  %v1_12228 = icmp slt i32 %v0_12224, 0
  br i1 %v1_12228, label %dec_label_pc_12248, label %dec_label_pc_12230

dec_label_pc_12230:                               ; preds = %dec_label_pc_12220
  %v0_12230 = load i32, i32* @r7, align 4
  store i32 1, i32* @r2, align 4
  %v2_1223c = call i32 @function_11d38(i32 %v0_12230, i32 2)
  %v1_12240 = icmp slt i32 %v2_1223c, 0
  br i1 %v1_12240, label %dec_label_pc_12248, label %dec_label_pc_12268

dec_label_pc_12248:                               ; preds = %dec_label_pc_12230, %dec_label_pc_12220
  %v0_12248 = call i32 @function_123d0()
  store i32 %v0_12248, i32* %r5.global-to-local, align 4
  %v0_12250 = load i32, i32* @r7, align 4
  %v1_12254 = inttoptr i32 %v0_12248 to i32*
  %v2_12254 = load i32, i32* %v1_12254, align 4
  store i32 %v2_12254, i32* @r4, align 4
  %v1_12258 = call i32 @function_11dfc(i32 %v0_12250)
  store i32 0, i32* @r6, align 4
  %v0_12260 = load i32, i32* @r4, align 4
  %v1_12260 = load i32, i32* %r5.global-to-local, align 4
  %v2_12260 = inttoptr i32 %v1_12260 to i32*
  store i32 %v0_12260, i32* %v2_12260, align 4
  br label %dec_label_pc_122f0

dec_label_pc_12268:                               ; preds = %dec_label_pc_12230
  %v1_1226c = call i32 @function_128a4(i32 48)
  store i32 %v1_1226c, i32* @r6, align 4
  %v2_12270 = icmp eq i32 %v1_1226c, 0
  br i1 %v2_12270, label %dec_label_pc_122c0, label %dec_label_pc_12278

dec_label_pc_12278:                               ; preds = %dec_label_pc_12268
  store i32 0, i32* @r4, align 4
  %v2_1227c = add i32 %v1_1226c, 16
  %v3_1227c = inttoptr i32 %v2_1227c to i32*
  store i32 0, i32* %v3_1227c, align 4
  %v2_12284 = icmp ugt i32 %tmp, 511
  %v1_12288 = load i32, i32* @r6, align 4
  %v2_12288 = add i32 %v1_12288, 20
  %v3_12288 = inttoptr i32 %v2_12288 to i32*
  store i32 %tmp, i32* %v3_12288, align 4
  br i1 %v2_12284, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_12278
  %v2_12290 = load i32, i32* @r6, align 4
  %v3_12290 = add i32 %v2_12290, 20
  %v4_12290 = inttoptr i32 %v3_12290 to i32*
  store i32 512, i32* %v4_12290, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12278, %bb
  %v0_12294 = load i32, i32* @r7, align 4
  %v1_12294 = load i32, i32* @r6, align 4
  %v2_12294 = inttoptr i32 %v1_12294 to i32*
  store i32 %v0_12294, i32* %v2_12294, align 4
  %v0_12298 = load i32, i32* @r4, align 4
  %v1_12298 = load i32, i32* @r6, align 4
  %v2_12298 = add i32 %v1_12298, 8
  %v3_12298 = inttoptr i32 %v2_12298 to i32*
  store i32 %v0_12298, i32* %v3_12298, align 4
  %v0_1229c = load i32, i32* @r4, align 4
  %v1_1229c = load i32, i32* @r6, align 4
  %v2_1229c = add i32 %v1_1229c, 4
  %v3_1229c = inttoptr i32 %v2_1229c to i32*
  store i32 %v0_1229c, i32* %v3_1229c, align 4
  %v0_122a4 = load i32, i32* @r6, align 4
  %v1_122a4 = add i32 %v0_122a4, 20
  %v2_122a4 = inttoptr i32 %v1_122a4 to i32*
  %v3_122a4 = load i32, i32* %v2_122a4, align 4
  %v2_122a8 = call i32 @function_129f8(i32 1, i32 %v3_122a4)
  %v2_122ac = icmp eq i32 %v2_122a8, 0
  %v1_122b0 = load i32, i32* @r6, align 4
  %v2_122b0 = add i32 %v1_122b0, 12
  %v3_122b0 = inttoptr i32 %v2_122b0 to i32*
  store i32 %v2_122a8, i32* %v3_122b0, align 4
  br i1 %v2_122ac, label %dec_label_pc_122b8, label %dec_label_pc_122dc

dec_label_pc_122b8:                               ; preds = %.thread
  %v0_122b8 = load i32, i32* @r6, align 4
  store i32 %v0_122b8, i32* @r0, align 4
  %v0_122bc = call i32 @function_12a50()
  br label %dec_label_pc_122c0

dec_label_pc_122c0:                               ; preds = %dec_label_pc_12268, %dec_label_pc_122b8
  %v0_122c0 = load i32, i32* @r7, align 4
  %v1_122c4 = call i32 @function_11dfc(i32 %v0_122c0)
  %v0_122c8 = call i32 @function_123d0()
  store i32 0, i32* @r6, align 4
  %v2_122d4 = inttoptr i32 %v0_122c8 to i32*
  store i32 12, i32* %v2_122d4, align 4
  br label %dec_label_pc_122f0

dec_label_pc_122dc:                               ; preds = %.thread
  store i32 74480, i32* @lr, align 4
  %v1_122ec = call i32 @function_13438()
  br label %dec_label_pc_122f0

dec_label_pc_122f0:                               ; preds = %.thread1, %dec_label_pc_122c0, %dec_label_pc_12248, %dec_label_pc_122dc
  %v0_122f0 = load i32, i32* @r6, align 4
  store i32 %v3_12204, i32* @r4, align 4
  store i32 %v9_12204, i32* @r6, align 4
  store i32 %v12_12204, i32* @r7, align 4
  ret i32 %v0_122f0

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_129f8, { 39, 41, 40, 35, 20, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 5, 4, 19, 1, 0, 18, 17, 3, 2, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 38, 37, 36 }
  uselistorder i32 512, { 0, 5, 1, 2, 8, 6, 7, 9, 3, 10, 4, 11 }
  uselistorder i32 (i32)* @function_11dfc, { 19, 18, 17, 33, 37, 36, 32, 31, 35, 34, 30, 29, 23, 28, 27, 26, 25, 24, 22, 21, 3, 2, 20, 16, 15, 5, 4, 14, 13, 12, 11, 10, 9, 8, 7, 6, 0, 1 }
  uselistorder label %dec_label_pc_122f0, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_122c0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_12300(i32* %arg1) local_unnamed_addr {
dec_label_pc_12300:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_12300 = load i32, i32* @r4, align 4
  %v6_12300 = load i32, i32* @r5, align 4
  %v9_12300 = load i32, i32* @lr, align 4
  %v1_12304 = add i32 %tmp, 24
  store i32 %v1_12304, i32* @r4, align 4
  %v2_12308 = ptrtoint i32* %stack_var_-28 to i32
  store i32 78912, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v2_12308, i32* @r0, align 4
  store i32 %v1_12304, i32* %r2.global-to-local, align 4
  %v8_12324 = call i32 @function_13440(i32 %v2_12308, i32 ptrtoint (i32* @global_var_13438.395 to i32), i32 %v1_12304, i32 78912, i32 %v3_12300, i32 %v6_12300, i32 %v9_12300)
  %v0_12328 = load i32, i32* @r4, align 4
  store i32 %v0_12328, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13438.395 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12338.404 to i32), i32* @lr, align 4
  %v1_12334 = call i32 @function_13438()
  store i32 %v1_12334, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12338

dec_label_pc_12338:                               ; preds = %dec_label_pc_1236c, %dec_label_pc_12300
  %v0_12338 = load i32, i32* @r5, align 4
  %v1_12338 = add i32 %v0_12338, 4
  %v2_12338 = inttoptr i32 %v1_12338 to i32*
  %v3_12338 = load i32, i32* %v2_12338, align 4
  store i32 %v3_12338, i32* %r2.global-to-local, align 4
  %v4_12338 = add i32 %v0_12338, 8
  %v5_12338 = inttoptr i32 %v4_12338 to i32*
  %v6_12338 = load i32, i32* %v5_12338, align 4
  store i32 %v6_12338, i32* %r3.global-to-local, align 4
  %tmp8 = icmp ugt i32 %v6_12338, %v3_12338
  br i1 %tmp8, label %dec_label_pc_1236c, label %dec_label_pc_12344

dec_label_pc_12344:                               ; preds = %dec_label_pc_12338
  %v1_12344 = inttoptr i32 %v0_12338 to i32*
  %v2_12344 = load i32, i32* %v1_12344, align 4
  store i32 %v2_12344, i32* @r0, align 4
  %v1_12348 = add i32 %v0_12338, 12
  %v2_12348 = inttoptr i32 %v1_12348 to i32*
  %v3_12348 = load i32, i32* %v2_12348, align 4
  %v1_1234c = add i32 %v0_12338, 20
  %v2_1234c = inttoptr i32 %v1_1234c to i32*
  %v3_1234c = load i32, i32* %v2_1234c, align 4
  store i32 %v3_1234c, i32* @r2, align 4
  %v4_12350 = call i32 @function_138b4(i32 %v2_12344, i32 %v3_12348, i32 %v3_1234c, i32 %v6_12338)
  store i32 %v4_12350, i32* %r0.global-to-local, align 4
  %tmp7 = icmp slt i32 %v4_12350, 1
  br i1 %tmp7, label %.thread, label %dec_label_pc_12360

.thread:                                          ; preds = %dec_label_pc_12344
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_123a0

dec_label_pc_12360:                               ; preds = %dec_label_pc_12344
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12364 = load i32, i32* @r5, align 4
  %v2_12364 = add i32 %v1_12364, 4
  %v3_12364 = inttoptr i32 %v2_12364 to i32*
  store i32 0, i32* %v3_12364, align 4
  %v1_12368 = load i32, i32* @r5, align 4
  %v2_12368 = add i32 %v1_12368, 8
  %v3_12368 = inttoptr i32 %v2_12368 to i32*
  store i32 %v4_12350, i32* %v3_12368, align 4
  %v0_1236c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1236c

dec_label_pc_1236c:                               ; preds = %dec_label_pc_12338, %dec_label_pc_12360
  %v1_12384 = phi i32 [ %v0_12338, %dec_label_pc_12338 ], [ %v0_1236c.pre, %dec_label_pc_12360 ]
  %v1_1236c = add i32 %v1_12384, 4
  %v2_1236c = inttoptr i32 %v1_1236c to i32*
  %v3_1236c = load i32, i32* %v2_1236c, align 4
  store i32 %v3_1236c, i32* %r2.global-to-local, align 4
  %v1_12370 = add i32 %v1_12384, 12
  %v2_12370 = inttoptr i32 %v1_12370 to i32*
  %v3_12370 = load i32, i32* %v2_12370, align 4
  store i32 %v3_12370, i32* %ip.global-to-local, align 4
  %v2_12374 = add i32 %v3_12370, %v3_1236c
  store i32 %v2_12374, i32* @r4, align 4
  %v1_12378 = add i32 %v2_12374, 4
  %v2_12378 = inttoptr i32 %v1_12378 to i32*
  %v3_12378 = load i32, i32* %v2_12378, align 4
  %v1_1237c = add i32 %v2_12374, 8
  %v2_1237c = inttoptr i32 %v1_1237c to i8*
  %v3_1237c = load i8, i8* %v2_1237c, align 1
  %v4_1237c = zext i8 %v3_1237c to i32
  store i32 %v4_1237c, i32* %r3.global-to-local, align 4
  %v1_12380 = add i32 %v2_12374, 9
  %v2_12380 = inttoptr i32 %v1_12380 to i8*
  %v3_12380 = load i8, i8* %v2_12380, align 1
  %v4_12380 = zext i8 %v3_12380 to i32
  store i32 %v4_12380, i32* %r0.global-to-local, align 4
  %v2_12384 = add i32 %v1_12384, 16
  %v3_12384 = inttoptr i32 %v2_12384 to i32*
  store i32 %v3_12378, i32* %v3_12384, align 4
  %v0_12388 = load i32, i32* %r2.global-to-local, align 4
  %v1_12388 = load i32, i32* %ip.global-to-local, align 4
  %v2_12388 = add i32 %v1_12388, %v0_12388
  %v3_12388 = inttoptr i32 %v2_12388 to i32*
  %v4_12388 = load i32, i32* %v3_12388, align 4
  %v0_1238c = load i32, i32* %r3.global-to-local, align 4
  %v1_1238c = load i32, i32* %r0.global-to-local, align 4
  %v4_1238c = mul i32 %v1_1238c, 256
  %v5_1238c = or i32 %v4_1238c, %v0_1238c
  store i32 %v5_1238c, i32* %r3.global-to-local, align 4
  %v2_12390 = add i32 %v5_1238c, %v0_12388
  store i32 %v2_12390, i32* @r2, align 4
  %v2_12394 = icmp eq i32 %v4_12388, 0
  %v1_12398 = load i32, i32* @r5, align 4
  %v2_12398 = add i32 %v1_12398, 4
  %v3_12398 = inttoptr i32 %v2_12398 to i32*
  store i32 %v2_12390, i32* %v3_12398, align 4
  br i1 %v2_12394, label %dec_label_pc_12338, label %dec_label_pc_123a0

dec_label_pc_123a0:                               ; preds = %dec_label_pc_1236c, %.thread
  store i32 %v2_12308, i32* @r0, align 4
  store i32 78912, i32* %r3.global-to-local, align 4
  store i32 74676, i32* @lr, align 4
  %v3_123b0 = load i32, i32* @r2, align 4
  %v8_123b0 = call i32 @function_13440(i32 %v2_12308, i32 1, i32 %v3_123b0, i32 78912, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_123b4 = load i32, i32* @r4, align 4
  store i32 %v0_123b4, i32* %r0.global-to-local, align 4
  store i32 %v3_12300, i32* @r4, align 4
  store i32 %v6_12300, i32* @r5, align 4
  ret i32 %v0_123b4

; uselistorder directives
  uselistorder i32 %v1_12384, { 0, 2, 1 }
  uselistorder i32 %v6_12338, { 1, 0, 2 }
  uselistorder i32 %v0_12338, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v2_12308, { 1, 0, 3, 2 }
  uselistorder i32 %v1_12304, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 6, 4, 5, 0 }
  uselistorder label %dec_label_pc_1236c, { 1, 0 }
}

define i32 @function_123d0() local_unnamed_addr {
dec_label_pc_123d0:
  ret i32 ptrtoint (i32* @global_var_1d228.407 to i32)
}

define i32 @function_123dc(i32 %arg1) local_unnamed_addr {
dec_label_pc_123dc:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_123e8 = bitcast i32* %stack_var_-20 to %tms*
  %v2_123e8 = call i32 @function_13c44(%tms* %v1_123e8)
  %v2_123f0 = load i32, i32* %stack_var_-20, align 4
  %v2_123f4 = add i32 %v2_123f0, %tmp
  %v2_123fc = mul i32 %v2_123f4, 10000
  %v1_12400 = and i32 %v2_123fc, 2147483632
  ret i32 %v1_12400

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_12410(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12410:
  %v0_12410 = call i32 @function_14050()
  ret i32 %v0_12410
}

define i32 @function_12420(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12420:
  %v0_12420 = call i32 @function_14050()
  ret i32 %v0_12420

; uselistorder directives
  uselistorder i32 ()* @function_14050, { 1, 0 }
}

define i32 @function_12430(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12430:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_12434 = load i32, i32* @r2, align 4
  %v8_12434 = icmp eq i32 %v0_12434, 8
  store i1 %v8_12434, i1* %cpsr_z.global-to-local, align 1
  %v5_12438 = icmp slt i32 %v0_12434, 8
  br i1 %v5_12438, label %dec_label_pc_12498, label %dec_label_pc_1243c

dec_label_pc_1243c:                               ; preds = %dec_label_pc_12430
  %v4_1243c = mul i32 %arg2, 256
  %v5_1243c = or i32 %v4_1243c, %arg2
  %v4_12440 = mul i32 %v5_1243c, 65536
  %v5_12440 = or i32 %v4_12440, %v5_1243c
  store i32 %v5_12440, i32* %r1.global-to-local, align 4
  %v1_1244457 = urem i32 %tmp, 4
  %v2_1244458 = icmp eq i32 %v1_1244457, 0
  store i1 %v2_1244458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_1244458, label %dec_label_pc_12454, label %bb

bb:                                               ; preds = %dec_label_pc_1243c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_1243c ]
  %v3_1244859 = phi i32 [ %v6_12448, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_1243c ]
  %v4_12448 = inttoptr i32 %v3_1244859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_12448, align 1
  %v5_12448 = load i32, i32* %r3.global-to-local, align 4
  %v6_12448 = add i32 %v5_12448, 1
  store i32 %v6_12448, i32* %r3.global-to-local, align 4
  %v0_1244c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_12458.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_1244c.pr, label %dec_label_pc_12454, label %.thread

.thread:                                          ; preds = %bb
  %v2_1244c = add i32 %v0_12458.pr.pre, -1
  store i32 %v2_1244c, i32* @r2, align 4
  %v1_12444 = urem i32 %v6_12448, 4
  %v2_12444 = icmp eq i32 %v1_12444, 0
  store i1 %v2_12444, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12444, label %dec_label_pc_12454, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_12448.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_12448.pre to i8
  br label %bb

dec_label_pc_12454:                               ; preds = %.thread, %bb, %dec_label_pc_1243c
  %v0_1246028 = phi i32 [ %tmp, %dec_label_pc_1243c ], [ %v6_12448, %bb ], [ %v6_12448, %.thread ]
  %v0_12458.pr = phi i32 [ %v0_12434, %dec_label_pc_1243c ], [ %v0_12458.pr.pre, %bb ], [ %v2_1244c, %.thread ]
  %v0_12454 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12454, i32* %ip.global-to-local, align 4
  %v8_1245810 = icmp eq i32 %v0_12458.pr, 8
  store i1 %v8_1245810, i1* %cpsr_z.global-to-local, align 1
  %v5_1245c11 = icmp slt i32 %v0_12458.pr, 8
  br i1 %v5_1245c11, label %dec_label_pc_12498, label %dec_label_pc_12460.preheader

dec_label_pc_12460.preheader:                     ; preds = %dec_label_pc_12454
  %v1_1246046 = inttoptr i32 %v0_1246028 to i32*
  store i32 %v0_12454, i32* %v1_1246046, align 4
  %v3_1246047 = add i32 %v0_1246028, 4
  %v4_1246048 = inttoptr i32 %v3_1246047 to i32*
  %v5_1246049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_1246049, i32* %v4_1246048, align 4
  %v6_1246050 = add i32 %v0_1246028, 8
  store i32 %v6_1246050, i32* %r3.global-to-local, align 4
  %v0_1246451 = load i32, i32* @r2, align 4
  %v1_1246452 = add i32 %v0_1246451, -8
  store i32 %v1_1246452, i32* %r2.global-to-local, align 4
  %v5_1246c53 = icmp slt i32 %v1_1246452, 8
  br i1 %v5_1246c53, label %dec_label_pc_12460.dec_label_pc_12498.loopexit_crit_edge, label %dec_label_pc_12470

dec_label_pc_12470:                               ; preds = %dec_label_pc_12460.preheader, %dec_label_pc_12458.dec_label_pc_12460_crit_edge
  %v6_1246055 = phi i32 [ %v6_12460, %dec_label_pc_12458.dec_label_pc_12460_crit_edge ], [ %v6_1246050, %dec_label_pc_12460.preheader ]
  %v0_1246054 = phi i32 [ %v12_1248c, %dec_label_pc_12458.dec_label_pc_12460_crit_edge ], [ %v0_1246028, %dec_label_pc_12460.preheader ]
  %v1_12470 = inttoptr i32 %v6_1246055 to i32*
  %v2_12470 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_12470, i32* %v1_12470, align 4
  %v3_12470 = add i32 %v0_1246054, 12
  %v4_12470 = inttoptr i32 %v3_12470 to i32*
  %v5_12470 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_12470, i32* %v4_12470, align 4
  %v6_12470 = add i32 %v0_1246054, 16
  store i32 %v6_12470, i32* %r3.global-to-local, align 4
  %v0_12474 = load i32, i32* %r2.global-to-local, align 4
  %v1_12474 = add i32 %v0_12474, -8
  store i32 %v1_12474, i32* %r2.global-to-local, align 4
  %v5_1247c = icmp slt i32 %v1_12474, 8
  br i1 %v5_1247c, label %dec_label_pc_12470.dec_label_pc_12498.loopexit_crit_edge, label %dec_label_pc_12480

dec_label_pc_12480:                               ; preds = %dec_label_pc_12470
  %v1_12480 = inttoptr i32 %v6_12470 to i32*
  %v2_12480 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_12480, i32* %v1_12480, align 4
  %v3_12480 = add i32 %v0_1246054, 20
  %v4_12480 = inttoptr i32 %v3_12480 to i32*
  %v5_12480 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_12480, i32* %v4_12480, align 4
  %v6_12480 = add i32 %v0_1246054, 24
  store i32 %v6_12480, i32* %r3.global-to-local, align 4
  %v0_12484 = load i32, i32* %r2.global-to-local, align 4
  %v1_12484 = add i32 %v0_12484, -8
  store i32 %v1_12484, i32* %r2.global-to-local, align 4
  %v5_1248c = icmp slt i32 %v1_12484, 8
  br i1 %v5_1248c, label %dec_label_pc_12480.dec_label_pc_12498.loopexit_crit_edge, label %dec_label_pc_12458

dec_label_pc_12458:                               ; preds = %dec_label_pc_12480
  %v7_1248c = inttoptr i32 %v6_12480 to i32*
  %v8_1248c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_1248c, i32* %v7_1248c, align 4
  %v9_1248c = add i32 %v0_1246054, 28
  %v10_1248c = inttoptr i32 %v9_1248c to i32*
  %v11_1248c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_1248c, i32* %v10_1248c, align 4
  %v12_1248c = add i32 %v0_1246054, 32
  store i32 %v12_1248c, i32* %r3.global-to-local, align 4
  %v6_12490 = load i32, i32* %r2.global-to-local, align 4
  %v7_12490 = add i32 %v6_12490, -8
  store i32 %v7_12490, i32* %r2.global-to-local, align 4
  %v5_1245c = icmp slt i32 %v7_12490, 8
  br i1 %v5_1245c, label %dec_label_pc_12458.dec_label_pc_12498.loopexit_crit_edge, label %dec_label_pc_12458.dec_label_pc_12460_crit_edge

dec_label_pc_12458.dec_label_pc_12460_crit_edge:  ; preds = %dec_label_pc_12458
  %v2_12460.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12460 = inttoptr i32 %v12_1248c to i32*
  store i32 %v2_12460.pre, i32* %v1_12460, align 4
  %v3_12460 = add i32 %v0_1246054, 36
  %v4_12460 = inttoptr i32 %v3_12460 to i32*
  %v5_12460 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_12460, i32* %v4_12460, align 4
  %v6_12460 = add i32 %v0_1246054, 40
  store i32 %v6_12460, i32* %r3.global-to-local, align 4
  %v0_12464 = load i32, i32* %r2.global-to-local, align 4
  %v1_12464 = add i32 %v0_12464, -8
  store i32 %v1_12464, i32* %r2.global-to-local, align 4
  %v5_1246c = icmp slt i32 %v1_12464, 8
  br i1 %v5_1246c, label %dec_label_pc_12460.dec_label_pc_12498.loopexit_crit_edge, label %dec_label_pc_12470

dec_label_pc_12460.dec_label_pc_12498.loopexit_crit_edge: ; preds = %dec_label_pc_12458.dec_label_pc_12460_crit_edge, %dec_label_pc_12460.preheader
  %v1_12464.lcssa = phi i32 [ %v1_1246452, %dec_label_pc_12460.preheader ], [ %v1_12464, %dec_label_pc_12458.dec_label_pc_12460_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12498

dec_label_pc_12458.dec_label_pc_12498.loopexit_crit_edge: ; preds = %dec_label_pc_12458
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12498

dec_label_pc_12470.dec_label_pc_12498.loopexit_crit_edge: ; preds = %dec_label_pc_12470
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12498

dec_label_pc_12480.dec_label_pc_12498.loopexit_crit_edge: ; preds = %dec_label_pc_12480
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12498

dec_label_pc_12498:                               ; preds = %dec_label_pc_12454, %dec_label_pc_12460.dec_label_pc_12498.loopexit_crit_edge, %dec_label_pc_12458.dec_label_pc_12498.loopexit_crit_edge, %dec_label_pc_12470.dec_label_pc_12498.loopexit_crit_edge, %dec_label_pc_12480.dec_label_pc_12498.loopexit_crit_edge, %dec_label_pc_12430
  %v0_124a0 = phi i32 [ %v0_12434, %dec_label_pc_12430 ], [ %v1_12484, %dec_label_pc_12480.dec_label_pc_12498.loopexit_crit_edge ], [ %v1_12474, %dec_label_pc_12470.dec_label_pc_12498.loopexit_crit_edge ], [ %v7_12490, %dec_label_pc_12458.dec_label_pc_12498.loopexit_crit_edge ], [ %v1_12464.lcssa, %dec_label_pc_12460.dec_label_pc_12498.loopexit_crit_edge ], [ %v0_12458.pr, %dec_label_pc_12454 ]
  %v2_12498 = icmp eq i32 %v0_124a0, 0
  store i1 %v2_12498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12498, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_12498
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_12498
  %v1_124a0 = sub i32 7, %v0_124a0
  store i32 %v1_124a0, i32* %r2.global-to-local, align 4
  %v3_124a4 = mul i32 %v1_124a0, 4
  %v4_124a4 = add i32 %v3_124a4, ptrtoint (i32* @global_var_124ac.409 to i32)
  call void @__pseudo_branch(i32 %v4_124a4)
  %v0_124ac = load i32, i32* %r1.global-to-local, align 4
  %v1_124ac = trunc i32 %v0_124ac to i8
  %v2_124ac = load i32, i32* %r3.global-to-local, align 4
  %v3_124ac = inttoptr i32 %v2_124ac to i8*
  store i8 %v1_124ac, i8* %v3_124ac, align 1
  %v4_124ac = load i32, i32* %r3.global-to-local, align 4
  %v5_124ac = add i32 %v4_124ac, 1
  store i32 %v5_124ac, i32* %r3.global-to-local, align 4
  %v0_124b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_124b0 = trunc i32 %v0_124b0 to i8
  %v3_124b0 = inttoptr i32 %v5_124ac to i8*
  store i8 %v1_124b0, i8* %v3_124b0, align 1
  %v4_124b0 = load i32, i32* %r3.global-to-local, align 4
  %v5_124b0 = add i32 %v4_124b0, 1
  store i32 %v5_124b0, i32* %r3.global-to-local, align 4
  %v0_124b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_124b4 = trunc i32 %v0_124b4 to i8
  %v3_124b4 = inttoptr i32 %v5_124b0 to i8*
  store i8 %v1_124b4, i8* %v3_124b4, align 1
  %v4_124b4 = load i32, i32* %r3.global-to-local, align 4
  %v5_124b4 = add i32 %v4_124b4, 1
  store i32 %v5_124b4, i32* %r3.global-to-local, align 4
  %v0_124b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_124b8 = trunc i32 %v0_124b8 to i8
  %v3_124b8 = inttoptr i32 %v5_124b4 to i8*
  store i8 %v1_124b8, i8* %v3_124b8, align 1
  %v4_124b8 = load i32, i32* %r3.global-to-local, align 4
  %v5_124b8 = add i32 %v4_124b8, 1
  store i32 %v5_124b8, i32* %r3.global-to-local, align 4
  %v0_124bc = load i32, i32* %r1.global-to-local, align 4
  %v1_124bc = trunc i32 %v0_124bc to i8
  %v3_124bc = inttoptr i32 %v5_124b8 to i8*
  store i8 %v1_124bc, i8* %v3_124bc, align 1
  %v4_124bc = load i32, i32* %r3.global-to-local, align 4
  %v5_124bc = add i32 %v4_124bc, 1
  store i32 %v5_124bc, i32* %r3.global-to-local, align 4
  %v0_124c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_124c0 = trunc i32 %v0_124c0 to i8
  %v3_124c0 = inttoptr i32 %v5_124bc to i8*
  store i8 %v1_124c0, i8* %v3_124c0, align 1
  %v4_124c0 = load i32, i32* %r3.global-to-local, align 4
  %v5_124c0 = add i32 %v4_124c0, 1
  store i32 %v5_124c0, i32* %r3.global-to-local, align 4
  %v0_124c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_124c4 = trunc i32 %v0_124c4 to i8
  %v3_124c4 = inttoptr i32 %v5_124c0 to i8*
  store i8 %v1_124c4, i8* %v3_124c4, align 1
  %v4_124c4 = load i32, i32* %r3.global-to-local, align 4
  %v5_124c4 = add i32 %v4_124c4, 1
  store i32 %v5_124c4, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_12460, { 1, 0 }
  uselistorder i32 %v12_1248c, { 1, 2, 0 }
  uselistorder i32 %v0_1246054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_12458.pr, { 0, 2, 1 }
  uselistorder i32 %v6_12448, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_1243c, { 1, 0 }
  uselistorder i32 %v0_12434, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 1, 10, 11, 12, 13, 9, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 4, 1, 0, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_12498, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_12470, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_124d0(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_124d0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_124d0 = sub i32 %arg1, %tmp
  %v1_124d4 = add i32 %v2_124d0, -1
  store i32 %v1_124d4, i32* %r2.global-to-local, align 4
  %v2_124d84 = load i8, i8* %arg2, align 1
  %v5_124d86 = add i32 %tmp, 1
  store i32 %v5_124d86, i32* %r1.global-to-local, align 4
  %v2_124dc7 = icmp eq i8 %v2_124d84, 0
  store i1 %v2_124dc7, i1* %cpsr_z.global-to-local, align 1
  %v5_124e08 = inttoptr i32 %arg1 to i8*
  store i8 %v2_124d84, i8* %v5_124e08, align 1
  %v0_124e49 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_124e49, label %dec_label_pc_124e8, label %dec_label_pc_124d8.dec_label_pc_124d8_crit_edge

dec_label_pc_124d8.dec_label_pc_124d8_crit_edge:  ; preds = %dec_label_pc_124d0, %dec_label_pc_124d8.dec_label_pc_124d8_crit_edge
  %v0_124d8.pre = load i32, i32* %r1.global-to-local, align 4
  %v3_124e0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_124d8 = inttoptr i32 %v0_124d8.pre to i8*
  %v2_124d8 = load i8, i8* %v1_124d8, align 1
  %v5_124d8 = add i32 %v0_124d8.pre, 1
  store i32 %v5_124d8, i32* %r1.global-to-local, align 4
  %v2_124dc = icmp eq i8 %v2_124d8, 0
  store i1 %v2_124dc, i1* %cpsr_z.global-to-local, align 1
  %v4_124e0 = add i32 %v5_124d8, %v3_124e0.pre
  %v5_124e0 = inttoptr i32 %v4_124e0 to i8*
  store i8 %v2_124d8, i8* %v5_124e0, align 1
  %v0_124e4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_124e4, label %dec_label_pc_124e8, label %dec_label_pc_124d8.dec_label_pc_124d8_crit_edge

dec_label_pc_124e8:                               ; preds = %dec_label_pc_124d8.dec_label_pc_124d8_crit_edge, %dec_label_pc_124d0
  ret i32 %arg1

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_124d8.dec_label_pc_124d8_crit_edge, { 1, 0 }
}

define i32 @function_124ec(i32 %arg1) local_unnamed_addr {
dec_label_pc_124ec:
  %stack_var_-8 = alloca i32, align 4
  %v2_124f0 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_124f0, i32* @r1, align 4
  %v0_124f8 = call i32 @function_144e0()
  %v2_124fc = icmp eq i32 %v0_124f8, 0
  br i1 %v2_124fc, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_124ec
  %v3_12504 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_124ec, %bb
  %v5_1250c = phi i32 [ -1, %dec_label_pc_124ec ], [ %v3_12504, %bb ]
  ret i32 %v5_1250c

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_12510(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_12510:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12510 = load i32, i32* @r4, align 4
  store i32 %v3_12510, i32* %stack_var_-8, align 4
  %v5_12514 = inttoptr i32 %arg3 to i32*
  %v6_12514 = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_12514)
  store i32 %v6_12514, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_12514, -4095
  br i1 %tmp, label %dec_label_pc_12534, label %dec_label_pc_12524

dec_label_pc_12524:                               ; preds = %dec_label_pc_12510
  %v0_12524 = call i32 @function_123d0()
  %v0_12528 = load i32, i32* %r4.global-to-local, align 4
  %v1_12528 = sub i32 0, %v0_12528
  %v2_1252c = inttoptr i32 %v0_12524 to i32*
  store i32 %v1_12528, i32* %v2_1252c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12534

dec_label_pc_12534:                               ; preds = %dec_label_pc_12510, %dec_label_pc_12524
  %v0_12534 = phi i32 [ %v6_12514, %dec_label_pc_12510 ], [ -1, %dec_label_pc_12524 ]
  %v2_12538 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12538, i32* @r4, align 4
  ret i32 %v0_12534

; uselistorder directives
  uselistorder i32 %v6_12514, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12534, { 1, 0 }
}

define i32 @function_1253c(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1253c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1253c = load i32, i32* @r4, align 4
  store i32 %v3_1253c, i32* %stack_var_-8, align 4
  %v5_12540 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_12540, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12540, -4095
  br i1 %tmp, label %dec_label_pc_12560, label %dec_label_pc_12550

dec_label_pc_12550:                               ; preds = %dec_label_pc_1253c
  %v0_12550 = call i32 @function_123d0()
  %v0_12554 = load i32, i32* %r4.global-to-local, align 4
  %v1_12554 = sub i32 0, %v0_12554
  %v2_12558 = inttoptr i32 %v0_12550 to i32*
  store i32 %v1_12554, i32* %v2_12558, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12560

dec_label_pc_12560:                               ; preds = %dec_label_pc_1253c, %dec_label_pc_12550
  %v0_12560 = phi i32 [ %v5_12540, %dec_label_pc_1253c ], [ -1, %dec_label_pc_12550 ]
  %v2_12564 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12564, i32* @r4, align 4
  ret i32 %v0_12560

; uselistorder directives
  uselistorder i32 %v5_12540, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12560, { 1, 0 }
}

define i32 @function_12568(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12568:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12568 = load i32, i32* @r4, align 4
  store i32 %v3_12568, i32* %stack_var_-8, align 4
  %v5_1256c = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_1256c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_1256c, -4095
  br i1 %tmp, label %dec_label_pc_1258c, label %dec_label_pc_1257c

dec_label_pc_1257c:                               ; preds = %dec_label_pc_12568
  %v0_1257c = call i32 @function_123d0()
  %v0_12580 = load i32, i32* %r4.global-to-local, align 4
  %v1_12580 = sub i32 0, %v0_12580
  %v2_12584 = inttoptr i32 %v0_1257c to i32*
  store i32 %v1_12580, i32* %v2_12584, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1258c

dec_label_pc_1258c:                               ; preds = %dec_label_pc_12568, %dec_label_pc_1257c
  %v0_1258c = phi i32 [ %v5_1256c, %dec_label_pc_12568 ], [ -1, %dec_label_pc_1257c ]
  %v2_12590 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12590, i32* @r4, align 4
  ret i32 %v0_1258c

; uselistorder directives
  uselistorder i32 %v5_1256c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1258c, { 1, 0 }
}

define i32 @function_12594(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12594:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12594 = load i32, i32* @r4, align 4
  store i32 %v3_12594, i32* %stack_var_-8, align 4
  %v5_12598 = inttoptr i32 %arg3 to i32*
  %v6_12598 = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_12598)
  store i32 %v6_12598, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_12598, -4095
  br i1 %tmp, label %dec_label_pc_125b8, label %dec_label_pc_125a8

dec_label_pc_125a8:                               ; preds = %dec_label_pc_12594
  %v0_125a8 = call i32 @function_123d0()
  %v0_125ac = load i32, i32* %r4.global-to-local, align 4
  %v1_125ac = sub i32 0, %v0_125ac
  %v2_125b0 = inttoptr i32 %v0_125a8 to i32*
  store i32 %v1_125ac, i32* %v2_125b0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_125b8

dec_label_pc_125b8:                               ; preds = %dec_label_pc_12594, %dec_label_pc_125a8
  %v0_125b8 = phi i32 [ %v6_12598, %dec_label_pc_12594 ], [ -1, %dec_label_pc_125a8 ]
  %v2_125bc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_125bc, i32* @r4, align 4
  ret i32 %v0_125b8

; uselistorder directives
  uselistorder i32 %v6_12598, { 1, 0, 2 }
  uselistorder label %dec_label_pc_125b8, { 1, 0 }
}

define i32 @function_125c0(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_125c0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_125c0 = load i32, i32* @r4, align 4
  store i32 %v3_125c0, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_125c8 = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_125c8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_125c8, -4095
  br i1 %tmp, label %dec_label_pc_125e8, label %dec_label_pc_125d8

dec_label_pc_125d8:                               ; preds = %dec_label_pc_125c0
  %v0_125d8 = call i32 @function_123d0()
  %v0_125dc = load i32, i32* %r4.global-to-local, align 4
  %v1_125dc = sub i32 0, %v0_125dc
  %v2_125e0 = inttoptr i32 %v0_125d8 to i32*
  store i32 %v1_125dc, i32* %v2_125e0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_125e8

dec_label_pc_125e8:                               ; preds = %dec_label_pc_125c0, %dec_label_pc_125d8
  %v0_125e8 = phi i32 [ %v5_125c8, %dec_label_pc_125c0 ], [ -1, %dec_label_pc_125d8 ]
  %v2_125ec = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_125ec, i32* @r4, align 4
  ret i32 %v0_125e8

; uselistorder directives
  uselistorder i32 %v5_125c8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_125e8, { 1, 0 }
}

define i32 @function_125f0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_125f0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_125f0 = load i32, i32* @r4, align 4
  store i32 %v3_125f0, i32* %stack_var_-8, align 4
  %v2_125f4 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_125f4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_125f4, -4095
  br i1 %tmp, label %dec_label_pc_12614, label %dec_label_pc_12604

dec_label_pc_12604:                               ; preds = %dec_label_pc_125f0
  %v0_12604 = call i32 @function_123d0()
  %v0_12608 = load i32, i32* %r4.global-to-local, align 4
  %v1_12608 = sub i32 0, %v0_12608
  %v2_1260c = inttoptr i32 %v0_12604 to i32*
  store i32 %v1_12608, i32* %v2_1260c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12614

dec_label_pc_12614:                               ; preds = %dec_label_pc_125f0, %dec_label_pc_12604
  %v0_12614 = phi i32 [ %v2_125f4, %dec_label_pc_125f0 ], [ -1, %dec_label_pc_12604 ]
  %v2_12618 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12618, i32* @r4, align 4
  ret i32 %v0_12614

; uselistorder directives
  uselistorder i32 %v2_125f4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12614, { 1, 0 }
}

define i32 @function_1261c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1261c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1261c = load i32, i32* @r4, align 4
  store i32 %v3_1261c, i32* %stack_var_-8, align 4
  %v5_12620 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_12620, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12620, -4095
  br i1 %tmp, label %dec_label_pc_12640, label %dec_label_pc_12630

dec_label_pc_12630:                               ; preds = %dec_label_pc_1261c
  %v0_12630 = call i32 @function_123d0()
  %v0_12634 = load i32, i32* %r4.global-to-local, align 4
  %v1_12634 = sub i32 0, %v0_12634
  %v2_12638 = inttoptr i32 %v0_12630 to i32*
  store i32 %v1_12634, i32* %v2_12638, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12640

dec_label_pc_12640:                               ; preds = %dec_label_pc_1261c, %dec_label_pc_12630
  %v0_12640 = phi i32 [ %v5_12620, %dec_label_pc_1261c ], [ -1, %dec_label_pc_12630 ]
  %v2_12644 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12644, i32* @r4, align 4
  ret i32 %v0_12640

; uselistorder directives
  uselistorder i32 %v5_12620, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12640, { 1, 0 }
}

define i32 @function_12648(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_12648:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_12648 = load i32, i32* @r4, align 4
  store i32 %v3_12648, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_12654 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_12654, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12654, -4095
  br i1 %tmp, label %dec_label_pc_12674, label %dec_label_pc_12664

dec_label_pc_12664:                               ; preds = %dec_label_pc_12648
  %v0_12664 = call i32 @function_123d0()
  %v0_12668 = load i32, i32* %r4.global-to-local, align 4
  %v1_12668 = sub i32 0, %v0_12668
  %v2_1266c = inttoptr i32 %v0_12664 to i32*
  store i32 %v1_12668, i32* %v2_1266c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12674

dec_label_pc_12674:                               ; preds = %dec_label_pc_12648, %dec_label_pc_12664
  %v0_12674 = phi i32 [ %v5_12654, %dec_label_pc_12648 ], [ -1, %dec_label_pc_12664 ]
  %v2_12678 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12678, i32* @r4, align 4
  ret i32 %v0_12674

; uselistorder directives
  uselistorder i32 %v5_12654, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12674, { 1, 0 }
}

define i32 @function_1267c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1267c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1267c = load i32, i32* @r4, align 4
  store i32 %v3_1267c, i32* %stack_var_-8, align 4
  %v5_12680 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_12680, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12680, -4095
  br i1 %tmp, label %dec_label_pc_126a0, label %dec_label_pc_12690

dec_label_pc_12690:                               ; preds = %dec_label_pc_1267c
  %v0_12690 = call i32 @function_123d0()
  %v0_12694 = load i32, i32* %r4.global-to-local, align 4
  %v1_12694 = sub i32 0, %v0_12694
  %v2_12698 = inttoptr i32 %v0_12690 to i32*
  store i32 %v1_12694, i32* %v2_12698, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_126a0

dec_label_pc_126a0:                               ; preds = %dec_label_pc_1267c, %dec_label_pc_12690
  %v0_126a0 = phi i32 [ %v5_12680, %dec_label_pc_1267c ], [ -1, %dec_label_pc_12690 ]
  %v2_126a4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_126a4, i32* @r4, align 4
  ret i32 %v0_126a0

; uselistorder directives
  uselistorder i32 %v5_12680, { 1, 0, 2 }
  uselistorder label %dec_label_pc_126a0, { 1, 0 }
}

define i32 @function_126a8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_126a8:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_126b4 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_126b4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_126b4, -4095
  br i1 %tmp, label %dec_label_pc_126d4, label %dec_label_pc_126c4

dec_label_pc_126c4:                               ; preds = %dec_label_pc_126a8
  %v0_126c4 = call i32 @function_123d0()
  %v0_126c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_126c8 = sub i32 0, %v0_126c8
  %v2_126cc = inttoptr i32 %v0_126c4 to i32*
  store i32 %v1_126c8, i32* %v2_126cc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_126d4

dec_label_pc_126d4:                               ; preds = %dec_label_pc_126a8, %dec_label_pc_126c4
  %v0_126d4 = phi i32 [ %v5_126b4, %dec_label_pc_126a8 ], [ -1, %dec_label_pc_126c4 ]
  ret i32 %v0_126d4

; uselistorder directives
  uselistorder i32 %v5_126b4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_126d4, { 1, 0 }
}

define i32 @function_126dc(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_126dc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_126dc = load i32, i32* @r4, align 4
  store i32 %v3_126dc, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_126e4 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_126e4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_126e4, -4095
  br i1 %tmp, label %dec_label_pc_12704, label %dec_label_pc_126f4

dec_label_pc_126f4:                               ; preds = %dec_label_pc_126dc
  %v0_126f4 = call i32 @function_123d0()
  %v0_126f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_126f8 = sub i32 0, %v0_126f8
  %v2_126fc = inttoptr i32 %v0_126f4 to i32*
  store i32 %v1_126f8, i32* %v2_126fc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12704

dec_label_pc_12704:                               ; preds = %dec_label_pc_126dc, %dec_label_pc_126f4
  %v0_12704 = phi i32 [ %v5_126e4, %dec_label_pc_126dc ], [ -1, %dec_label_pc_126f4 ]
  %v2_12708 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12708, i32* @r4, align 4
  ret i32 %v0_12704

; uselistorder directives
  uselistorder i32 %v5_126e4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12704, { 1, 0 }
}

define i32 @function_1270c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1270c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1270c = load i32, i32* @r4, align 4
  store i32 %v3_1270c, i32* %stack_var_-8, align 4
  %v3_12710 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_12710, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_12710, -4095
  br i1 %tmp, label %dec_label_pc_12730, label %dec_label_pc_12720

dec_label_pc_12720:                               ; preds = %dec_label_pc_1270c
  %v0_12720 = call i32 @function_123d0()
  %v0_12724 = load i32, i32* %r4.global-to-local, align 4
  %v1_12724 = sub i32 0, %v0_12724
  %v2_12728 = inttoptr i32 %v0_12720 to i32*
  store i32 %v1_12724, i32* %v2_12728, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12730

dec_label_pc_12730:                               ; preds = %dec_label_pc_1270c, %dec_label_pc_12720
  %v0_12730 = phi i32 [ %v3_12710, %dec_label_pc_1270c ], [ -1, %dec_label_pc_12720 ]
  %v2_12734 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12734, i32* @r4, align 4
  ret i32 %v0_12730

; uselistorder directives
  uselistorder i32 %v3_12710, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12730, { 1, 0 }
}

define i32 @function_12738(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12738:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_12754, label %dec_label_pc_12744

dec_label_pc_12744:                               ; preds = %dec_label_pc_12738
  %v8_12748 = icmp sgt i32 %arg1, 64
  br i1 %v8_12748, label %dec_label_pc_12754, label %dec_label_pc_1274c

dec_label_pc_1274c:                               ; preds = %dec_label_pc_12744
  %v0_12750 = call i32 @function_1285c()
  br label %dec_label_pc_12754

dec_label_pc_12754:                               ; preds = %dec_label_pc_12744, %dec_label_pc_12738, %dec_label_pc_1274c
  %v0_12754 = call i32 @function_123d0()
  %v2_1275c = inttoptr i32 %v0_12754 to i32*
  store i32 22, i32* %v2_1275c, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12754, { 2, 0, 1 }
}

define i32 @function_12768(i32 %arg1) local_unnamed_addr {
dec_label_pc_12768:
  store i32 128, i32* @r2, align 4
  %v0_12774 = load i32, i32* @r0, align 4
  %v2_12774 = inttoptr i32 %v0_12774 to i8*
  %v3_12774 = call i32 @function_12430(i8* %v2_12774, i32 0)
  ret i32 0
}

define i32 @function_12780(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12780:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_12780 = load i32, i32* @r4, align 4
  store i32 %v3_12780, i32* %stack_var_-12, align 4
  %v6_12780 = load i32, i32* @r5, align 4
  %v10_12780 = ptrtoint i32* %stack_var_-12 to i32
  %v7_12784 = icmp eq i32 %arg2, -1
  %v0_12790.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_12784, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_12780
  br label %dec_label_pc_127a8

bb:                                               ; preds = %dec_label_pc_12780
  %v2_1278c = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_12790.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_12790.pre, 1
  br i1 %tmp19, label %dec_label_pc_127a8, label %dec_label_pc_12798

dec_label_pc_12798:                               ; preds = %bb
  %v7_1279c = icmp sgt i32 %v0_12790.pre, 64
  br i1 %v7_1279c, label %dec_label_pc_127a8, label %bb20

bb20:                                             ; preds = %dec_label_pc_12798
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_127cc24 = add i32 %v10_12780, 124
  store i32 %v5_127cc24, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_127bc

dec_label_pc_127a8:                               ; preds = %.thread, %dec_label_pc_12798, %bb
  %v0_127a8 = call i32 @function_123d0()
  store i32 %v0_127a8, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_127b4 = inttoptr i32 %v0_127a8 to i32*
  store i32 22, i32* %v2_127b4, align 4
  %v0_12828.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12828

dec_label_pc_127bc:                               ; preds = %bb20, %dec_label_pc_127bc
  %v5_127cc25 = phi i32 [ %v5_127cc24, %bb20 ], [ %v5_127cc, %dec_label_pc_127bc ]
  %v2_127c0 = add i32 %v5_127cc25, -136
  %v3_127c0 = inttoptr i32 %v2_127c0 to i32*
  store i32 0, i32* %v3_127c0, align 4
  %v0_127c4.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_127c4 = add i32 %v0_127c4.pre, -1
  store i32 %v1_127c4, i32* %r0.global-to-local, align 4
  %v6_127c4 = icmp slt i32 %v1_127c4, 0
  %v4_127cc = mul i32 %v1_127c4, 4
  %v5_127cc = add i32 %v4_127cc, %v10_12780
  store i32 %v5_127cc, i32* %r2.global-to-local, align 4
  br i1 %v6_127c4, label %dec_label_pc_127d4, label %dec_label_pc_127bc

dec_label_pc_127d4:                               ; preds = %dec_label_pc_127bc
  %v2_127d4 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_127d4, i32* @r5, align 4
  %v2_127d8 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_127d8, i32* @r0, align 4
  %v0_127dc = load i32, i32* @r4, align 4
  store i32 %v0_127dc, i32* @r1, align 4
  %v0_127e0 = call i32 @function_1285c()
  store i32 %v0_127e0, i32* %r0.global-to-local, align 4
  %v1_127e4 = icmp slt i32 %v0_127e0, 0
  br i1 %v1_127e4, label %dec_label_pc_12824, label %dec_label_pc_127ec

dec_label_pc_127ec:                               ; preds = %dec_label_pc_127d4
  %v0_127ec = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1d388.411 to i32), i32* %r0.global-to-local, align 4
  %v2_127f4 = call i32 @function_12838(i32 ptrtoint (i32* @global_var_1d388.411 to i32), i32 %v0_127ec)
  store i32 %v2_1278c, i32* %r2.global-to-local, align 4
  %v0_1280c = load i32, i32* @r4, align 4
  store i32 %v0_1280c, i32* %r0.global-to-local, align 4
  %v4_12814 = call i32 @function_13724(i32 %v0_1280c, i32* nonnull %stack_var_-152, i32 %v2_1278c)
  store i32 %v4_12814, i32* %r0.global-to-local, align 4
  %v1_12818 = icmp slt i32 %v4_12814, 0
  br i1 %v1_12818, label %dec_label_pc_12824, label %bb23

bb23:                                             ; preds = %dec_label_pc_127ec
  %v5_1281c = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_1281c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12828

dec_label_pc_12824:                               ; preds = %dec_label_pc_127ec, %dec_label_pc_127d4
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12828

dec_label_pc_12828:                               ; preds = %bb23, %dec_label_pc_127a8, %dec_label_pc_12824
  %v0_12828 = phi i32 [ %v5_1281c, %bb23 ], [ %v0_12828.pre, %dec_label_pc_127a8 ], [ -1, %dec_label_pc_12824 ]
  store i32 %v0_12828, i32* %r0.global-to-local, align 4
  %v2_12830 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12830, i32* @r4, align 4
  store i32 %v6_12780, i32* @r5, align 4
  ret i32 %v0_12828

; uselistorder directives
  uselistorder i32 %v0_12828, { 1, 0 }
  uselistorder i32 %v5_127cc, { 1, 0 }
  uselistorder i32 %v1_127c4, { 0, 2, 1 }
  uselistorder i32 %v2_1278c, { 1, 0 }
  uselistorder i32 %v0_12790.pre, { 1, 0, 2 }
  uselistorder i32 %v10_12780, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_12828, { 2, 0, 1 }
  uselistorder label %dec_label_pc_127bc, { 1, 0 }
  uselistorder label %dec_label_pc_127a8, { 1, 2, 0 }
}

define i32 @function_12838(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12838:
  %v1_12838 = add i32 %arg2, -1
  %v3_1283c = udiv i32 %v1_12838, 32
  %v4_12840 = mul nuw nsw i32 %v3_1283c, 4
  %v5_12840 = add i32 %v4_12840, %arg1
  %v6_12840 = inttoptr i32 %v5_12840 to i32*
  %v7_12840 = load i32, i32* %v6_12840, align 4
  %v1_12844 = urem i32 %v1_12838, 32
  %v7_1284c = shl i32 1, %v1_12844
  %v8_1284c = and i32 %v7_12840, %v7_1284c
  %v10_1284c = icmp ne i32 %v8_1284c, 0
  %. = zext i1 %v10_1284c to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_12838, { 1, 0 }
}

define i32 @function_1285c() local_unnamed_addr {
dec_label_pc_1285c:
  %v0_1285c = load i32, i32* @r1, align 4
  %v1_1285c = add i32 %v0_1285c, -1
  %v3_12860 = udiv i32 %v1_1285c, 32
  store i32 %v3_12860, i32* @ip, align 4
  %v0_12864 = load i32, i32* @r0, align 4
  %v4_12864 = mul nuw nsw i32 %v3_12860, 4
  %v5_12864 = add i32 %v0_12864, %v4_12864
  %v6_12864 = inttoptr i32 %v5_12864 to i32*
  %v7_12864 = load i32, i32* %v6_12864, align 4
  %v1_12868 = urem i32 %v1_1285c, 32
  %v7_12870 = shl i32 1, %v1_12868
  %v8_12870 = or i32 %v7_12864, %v7_12870
  store i32 %v8_12870, i32* %v6_12864, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_12860, { 1, 0 }
  uselistorder i32 %v1_1285c, { 1, 0 }
}

define i32 @function_12880(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12880:
  %v1_12880 = add i32 %arg2, -1
  %v3_12884 = udiv i32 %v1_12880, 32
  %v4_12888 = mul nuw nsw i32 %v3_12884, 4
  %v5_12888 = add i32 %v4_12888, %arg1
  %v6_12888 = inttoptr i32 %v5_12888 to i32*
  %v7_12888 = load i32, i32* %v6_12888, align 4
  %v1_1288c = urem i32 %v1_12880, 32
  %tmp = shl i32 -1, %v1_1288c
  %v8_12894 = add i32 %tmp, -1
  %v9_12894 = and i32 %v7_12888, %v8_12894
  store i32 %v9_12894, i32* %v6_12888, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_12880, { 1, 0 }
}

define i32 @function_128a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_128a4:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_128a4 = load i32, i32* @r4, align 4
  %v6_128a4 = load i32, i32* @r5, align 4
  %v9_128a4 = load i32, i32* @r6, align 4
  %v0_128a8 = load i32, i32* %r0.global-to-local, align 4
  %v2_128a8 = icmp eq i32 %v0_128a8, 0
  %v2_128ac = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_128a8, label %bb, label %dec_label_pc_128b8

bb:                                               ; preds = %dec_label_pc_128a4
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_128c0

dec_label_pc_128b8:                               ; preds = %dec_label_pc_128a4
  %tmp = icmp ugt i32 %v0_128a8, -8
  br i1 %tmp, label %dec_label_pc_129c4, label %dec_label_pc_128c0

dec_label_pc_128c0:                               ; preds = %bb, %dec_label_pc_128b8
  %v0_128c0 = phi i32 [ %v0_128a8, %dec_label_pc_128b8 ], [ 1, %bb ]
  %v1_128c0 = add i32 %v0_128c0, 4
  store i32 %v1_128c0, i32* %stack_var_-20, align 4
  store i32 %v2_128ac, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1d1f0.413 to i32), i32* %r0.global-to-local, align 4
  %v1_128d8 = call i32 @function_13438()
  store i32 ptrtoint (i32** @global_var_1d034.417 to i32), i32* %r0.global-to-local, align 4
  %v3_128e4 = call i32 @function_12c58(i32* bitcast (i32** @global_var_1d034.417 to i32*), i32 %v2_128ac)
  store i32 %v3_128e4, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d1f0.413 to i32), i32* %r0.global-to-local, align 4
  store i32 76028, i32* @lr, align 4
  %v1_128f8 = call i32 @function_13438()
  store i32 %v1_128f8, i32* %r0.global-to-local, align 4
  %v2_128fc = icmp eq i32 %v3_128e4, 0
  br i1 %v2_128fc, label %dec_label_pc_12904, label %dec_label_pc_129b4

dec_label_pc_12904:                               ; preds = %dec_label_pc_128c0
  %v2_12908 = load i32, i32* @global_var_1d218.420, align 4
  store i32 %v2_12908, i32* @r4, align 4
  %v2_1290c = load i32, i32* %stack_var_-20, align 4
  %v3_12910 = icmp ult i32 %v2_1290c, %v2_12908
  br i1 %v3_12910, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_12904
  %v3_12914 = add i32 %v2_12908, -1
  %v2_12918 = add i32 %v3_12914, %v2_1290c
  %v2_1291c = sub i32 0, %v2_12908
  %v3_12920 = and i32 %v2_12918, %v2_1291c
  store i32 %v3_12920, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_12904, %bb14
  store i32 ptrtoint (i32* @global_var_1d408.422 to i32), i32* %r0.global-to-local, align 4
  %v1_1292c = call i32 @function_13438()
  %v0_12930 = load i32, i32* @r4, align 4
  store i32 %v0_12930, i32* %r0.global-to-local, align 4
  %v1_12934 = call i32 @function_13bec(i32 %v0_12930)
  store i32 %v1_12934, i32* %r0.global-to-local, align 4
  %v7_12938 = icmp eq i32 %v1_12934, -1
  br i1 %v7_12938, label %bb15, label %dec_label_pc_12944

bb15:                                             ; preds = %.thread3
  store i32 %v1_12934, i32* @r5, align 4
  br label %dec_label_pc_12958

dec_label_pc_12944:                               ; preds = %.thread3
  %v1_12944 = add i32 %v1_12934, 3
  %v1_12948 = and i32 %v1_12944, -4
  store i32 %v1_12948, i32* @r5, align 4
  %v9_1294c = icmp eq i32 %v1_12948, %v1_12934
  br i1 %v9_1294c, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_12944
  %v3_12950 = sub i32 %v1_12948, %v1_12934
  store i32 %v3_12950, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_12944, %bb16
  %v1_12954 = xor i1 %v9_1294c, true
  call void @__pseudo_cond_branch(i1 %v1_12954, i32 ptrtoint (i32* @global_var_13bec.423 to i32))
  br label %dec_label_pc_12958

dec_label_pc_12958:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1d408.422 to i32), i32* %r0.global-to-local, align 4
  store i32 76136, i32* @lr, align 4
  %v1_12964 = call i32 @function_13438()
  store i32 %v1_12964, i32* %r0.global-to-local, align 4
  %v0_12968 = load i32, i32* @r5, align 4
  %v7_12968 = icmp eq i32 %v0_12968, -1
  br i1 %v7_12968, label %dec_label_pc_129c4, label %dec_label_pc_12970

dec_label_pc_12970:                               ; preds = %dec_label_pc_12958
  store i32 ptrtoint (i32* @global_var_1d1f0.413 to i32), i32* %r0.global-to-local, align 4
  %v1_1297c = call i32 @function_13438()
  %v0_12980 = load i32, i32* @r4, align 4
  %v0_12984 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1d034.417 to i32), i32* %r0.global-to-local, align 4
  %v4_1298c = call i32 @function_12dac(i32* bitcast (i32** @global_var_1d034.417 to i32*), i32 %v0_12984, i32 %v0_12980)
  store i32 ptrtoint (i32** @global_var_1d034.417 to i32), i32* %r0.global-to-local, align 4
  %v3_12998 = call i32 @function_12c58(i32* bitcast (i32** @global_var_1d034.417 to i32*), i32 %v2_128ac)
  store i32 %v3_12998, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d1f0.413 to i32), i32* %r0.global-to-local, align 4
  store i32 76204, i32* @lr, align 4
  %v1_129a8 = call i32 @function_13438()
  store i32 %v1_129a8, i32* %r0.global-to-local, align 4
  %v2_129ac = icmp eq i32 %v3_12998, 0
  br i1 %v2_129ac, label %dec_label_pc_129c4, label %dec_label_pc_129b4

dec_label_pc_129b4:                               ; preds = %dec_label_pc_128c0, %dec_label_pc_12970
  %v1_129b8 = phi i32 [ %v3_128e4, %dec_label_pc_128c0 ], [ %v3_12998, %dec_label_pc_12970 ]
  %v2_129b4 = load i32, i32* %stack_var_-20, align 4
  %v2_129b8 = inttoptr i32 %v1_129b8 to i32*
  store i32 %v2_129b4, i32* %v2_129b8, align 4
  %v3_129b8 = load i32, i32* %r4.global-to-local, align 4
  %v4_129b8 = add i32 %v3_129b8, 4
  store i32 %v4_129b8, i32* %r4.global-to-local, align 4
  %v2_129bc = icmp eq i32 %v4_129b8, 0
  br i1 %v2_129bc, label %dec_label_pc_129c4, label %dec_label_pc_129d4

dec_label_pc_129c4:                               ; preds = %dec_label_pc_129b4, %dec_label_pc_12970, %dec_label_pc_12958, %dec_label_pc_128b8
  %v0_129c4 = call i32 @function_123d0()
  store i32 %v0_129c4, i32* %r0.global-to-local, align 4
  %v2_129cc = inttoptr i32 %v0_129c4 to i32*
  store i32 12, i32* %v2_129cc, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_129d4

dec_label_pc_129d4:                               ; preds = %dec_label_pc_129b4, %dec_label_pc_129c4
  %v0_129d4 = phi i32 [ %v4_129b8, %dec_label_pc_129b4 ], [ 0, %dec_label_pc_129c4 ]
  store i32 %v0_129d4, i32* %r0.global-to-local, align 4
  store i32 %v3_128a4, i32* @r4, align 4
  store i32 %v6_128a4, i32* @r5, align 4
  store i32 %v9_128a4, i32* @r6, align 4
  ret i32 %v0_129d4

; uselistorder directives
  uselistorder i32 %v0_129d4, { 1, 0 }
  uselistorder i32 %v3_12998, { 1, 0, 2 }
  uselistorder i32 %v1_12948, { 1, 0, 2 }
  uselistorder i32 %v1_12934, { 3, 0, 2, 4, 1, 5 }
  uselistorder i32 %v3_128e4, { 1, 0, 2 }
  uselistorder i32 %v0_128a8, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 3, 6, 4, 5, 7, 8, 9, 10, 12, 11, 2, 14, 13, 15, 16, 17, 18, 19, 0, 1 }
  uselistorder label %dec_label_pc_129d4, { 1, 0 }
  uselistorder label %dec_label_pc_129b4, { 1, 0 }
  uselistorder label %dec_label_pc_12958, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_128c0, { 1, 0 }
}

define i32 @function_129f8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_129f8:
  %stack_var_-12 = alloca i32, align 4
  %v3_129f8 = load i32, i32* @r4, align 4
  store i32 %v3_129f8, i32* %stack_var_-12, align 4
  %v6_129f8 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_12a00 = mul i32 %arg2, %arg1
  store i32 %v2_12a00, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_12a04 = icmp eq i32 %arg1, 0
  store i32 %v2_12a00, i32* @r0, align 4
  br i1 %v2_12a04, label %dec_label_pc_12a30, label %dec_label_pc_12a10

dec_label_pc_12a10:                               ; preds = %dec_label_pc_129f8
  %v0_12a10 = call i32 @function_11a74()
  %v0_12a14 = load i32, i32* @r5, align 4
  %v9_12a14 = icmp eq i32 %v0_12a14, %v0_12a10
  store i32 0, i32* @r5, align 4
  br i1 %v9_12a14, label %dec_label_pc_12a10.dec_label_pc_12a30_crit_edge, label %dec_label_pc_12a20

dec_label_pc_12a10.dec_label_pc_12a30_crit_edge:  ; preds = %dec_label_pc_12a10
  %v0_12a30.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12a30

dec_label_pc_12a20:                               ; preds = %dec_label_pc_12a10
  %v0_12a20 = call i32 @function_123d0()
  %v2_12a28 = inttoptr i32 %v0_12a20 to i32*
  store i32 12, i32* %v2_12a28, align 4
  br label %dec_label_pc_12a48

dec_label_pc_12a30:                               ; preds = %dec_label_pc_12a10.dec_label_pc_12a30_crit_edge, %dec_label_pc_129f8
  %v0_12a30 = phi i32 [ %v0_12a30.pre, %dec_label_pc_12a10.dec_label_pc_12a30_crit_edge ], [ %v2_12a00, %dec_label_pc_129f8 ]
  %v1_12a34 = call i32 @function_128a4(i32 %v0_12a30)
  store i32 %v1_12a34, i32* @r5, align 4
  store i32 76360, i32* @lr, align 4
  %v1_12a44 = icmp ne i32 %v1_12a34, 0
  call void @__pseudo_cond_branch(i1 %v1_12a44, i32 ptrtoint (i32* @global_var_12430.424 to i32))
  br label %dec_label_pc_12a48

dec_label_pc_12a48:                               ; preds = %dec_label_pc_12a20, %dec_label_pc_12a30
  %v0_12a48 = load i32, i32* @r5, align 4
  %v2_12a4c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12a4c, i32* @r4, align 4
  store i32 %v6_129f8, i32* @r5, align 4
  ret i32 %v0_12a48

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_12a48, { 1, 0 }
}

define i32 @function_12a50() local_unnamed_addr {
dec_label_pc_12a50:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_12a50 = load i32, i32* @r0, align 4
  %v2_12a50 = icmp eq i32 %v0_12a50, 0
  %v3_12a54 = load i32, i32* @r4, align 4
  store i32 %v3_12a54, i32* %stack_var_-24, align 4
  %v6_12a54 = load i32, i32* @r5, align 4
  %v9_12a54 = load i32, i32* @r6, align 4
  %v15_12a54 = load i32, i32* @r8, align 4
  br i1 %v2_12a50, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_12a50
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_12a50
  %v1_12a5c = add i32 %v0_12a50, -4
  %v2_12a5c = inttoptr i32 %v1_12a5c to i32*
  %v3_12a5c = load i32, i32* %v2_12a5c, align 4
  store i32 %v3_12a5c, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1d034.417 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_12a5c, i32* @r4, align 4
  %v1_12a74 = call i32 @function_13438()
  %v0_12a78 = load i32, i32* @r4, align 4
  %v0_12a7c = load i32, i32* @r5, align 4
  %v4_12a84 = call i32 @function_12dac(i32* bitcast (i32** @global_var_1d034.417 to i32*), i32 %v0_12a78, i32 %v0_12a7c)
  %v1_12a8c = inttoptr i32 %v4_12a84 to i32*
  %v2_12a8c = load i32, i32* %v1_12a8c, align 4
  store i32 %v2_12a8c, i32* %r6.global-to-local, align 4
  %v2_12a90 = load i32, i32* @global_var_1d218.420, align 4
  %v4_12a94 = mul i32 %v2_12a90, 8
  %v6_12a94 = icmp ult i32 %v2_12a8c, %v4_12a94
  store i32 %v4_12a84, i32* @r4, align 4
  br i1 %v6_12a94, label %dec_label_pc_12ad4, label %dec_label_pc_12aa0

dec_label_pc_12aa0:                               ; preds = %bb11
  %v1_12aa8 = call i32 @function_13438()
  %v1_12ab0 = call i32 @function_13bec(i32 0)
  %v0_12ab4 = load i32, i32* @r4, align 4
  %v1_12ab4 = add i32 %v0_12ab4, 12
  store i32 %v1_12ab4, i32* @r5, align 4
  %v9_12ab8 = icmp eq i32 %v1_12ab4, %v1_12ab0
  br i1 %v9_12ab8, label %dec_label_pc_12adc, label %dec_label_pc_12ac0

dec_label_pc_12ac0:                               ; preds = %dec_label_pc_12aa0
  %v1_12acc = call i32 @function_13438()
  br label %dec_label_pc_12ad4

dec_label_pc_12ad4:                               ; preds = %bb11, %dec_label_pc_12ac0, %bb14
  %v2_12ad4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12ad4, i32* @r4, align 4
  store i32 %v6_12a54, i32* @r5, align 4
  store i32 %v9_12a54, i32* %r6.global-to-local, align 4
  store i32 %v15_12a54, i32* %r8.global-to-local, align 4
  %v0_12ad8 = call i32 @function_13438()
  %v0_12adc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12adc

dec_label_pc_12adc:                               ; preds = %dec_label_pc_12aa0, %dec_label_pc_12ad4
  %v1_12ae4 = phi i32 [ %v0_12ab4, %dec_label_pc_12aa0 ], [ %v0_12adc.pre, %dec_label_pc_12ad4 ]
  %v1_12adc = add i32 %v1_12ae4, 4
  %v2_12adc = inttoptr i32 %v1_12adc to i32*
  %v3_12adc = load i32, i32* %v2_12adc, align 4
  %v2_12ae0 = icmp eq i32 %v3_12adc, 0
  br i1 %v2_12ae0, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_12adc
  %v2_12ae4 = add i32 %v1_12ae4, 8
  %v3_12ae4 = inttoptr i32 %v2_12ae4 to i32*
  %v4_12ae4 = load i32, i32* %v3_12ae4, align 4
  %v3_12ae8 = add i32 %v3_12adc, 8
  %v4_12ae8 = inttoptr i32 %v3_12ae8 to i32*
  store i32 %v4_12ae4, i32* %v4_12ae8, align 4
  %v0_12aec.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12adc, %bb12
  %v0_12aec = phi i32 [ %v1_12ae4, %dec_label_pc_12adc ], [ %v0_12aec.pre, %bb12 ]
  %v1_12aec = add i32 %v0_12aec, 8
  %v2_12aec = inttoptr i32 %v1_12aec to i32*
  %v3_12aec = load i32, i32* %v2_12aec, align 4
  %v1_12af0 = add i32 %v0_12aec, 4
  %v2_12af0 = inttoptr i32 %v1_12af0 to i32*
  %v3_12af0 = load i32, i32* %v2_12af0, align 4
  %v2_12af4 = icmp eq i32 %v3_12aec, 0
  br i1 %v2_12af4, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_12af8 = add i32 %v3_12aec, 4
  %v4_12af8 = inttoptr i32 %v3_12af8 to i32*
  store i32 %v3_12af0, i32* %v4_12af8, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_12afc = load i32, i32* %r8.global-to-local, align 4
  %v3_12afc = inttoptr i32 %v2_12afc to i32*
  store i32 %v3_12af0, i32* %v3_12afc, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_12b0c = call i32 @function_13438()
  %v0_12b10 = load i32, i32* %r6.global-to-local, align 4
  %v1_12b10 = load i32, i32* @r4, align 4
  %v0_12b18 = load i32, i32* @r5, align 4
  %v2_12b10 = sub i32 12, %v0_12b10
  %v1_12b14 = add i32 %v2_12b10, %v1_12b10
  %v2_12b18 = sub i32 %v1_12b14, %v0_12b18
  %v1_12b1c = call i32 @function_13bec(i32 %v2_12b18)
  br label %dec_label_pc_12ad4

; uselistorder directives
  uselistorder i32 %v0_12aec, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_13bec, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_12adc, { 1, 0 }
  uselistorder label %dec_label_pc_12ad4, { 2, 1, 0 }
}

define i32 @function_12b40(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12b40:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_12b40 = load i32, i32* @r4, align 4
  store i32 %v3_12b40, i32* %stack_var_-24, align 4
  %v6_12b40 = load i32, i32* @r5, align 4
  %v9_12b40 = load i32, i32* @r6, align 4
  %v12_12b40 = load i32, i32* @r7, align 4
  %v15_12b40 = load i32, i32* @r8, align 4
  %v18_12b40 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_12b44 = icmp eq i32 %arg2, 0
  %v0_12b48 = load i32, i32* @r0, align 4
  store i32 %v0_12b48, i32* @r7, align 4
  br i1 %v2_12b44, label %dec_label_pc_12b50, label %dec_label_pc_12b58

dec_label_pc_12b50:                               ; preds = %dec_label_pc_12b40
  %v0_12b50 = call i32 @function_12a50()
  %v0_12b60.pre = load i32, i32* @r4, align 4
  %v2_12b64.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_12b60

dec_label_pc_12b58:                               ; preds = %dec_label_pc_12b40
  %v2_12b58 = icmp eq i32 %v0_12b48, 0
  br i1 %v2_12b58, label %dec_label_pc_12b60, label %dec_label_pc_12b6c

dec_label_pc_12b60:                               ; preds = %dec_label_pc_12b58, %dec_label_pc_12b50
  %v2_12b64 = phi i32 [ %v3_12b40, %dec_label_pc_12b58 ], [ %v2_12b64.pre, %dec_label_pc_12b50 ]
  %v0_12b60 = phi i32 [ %arg2, %dec_label_pc_12b58 ], [ %v0_12b60.pre, %dec_label_pc_12b50 ]
  store i32 %v2_12b64, i32* @r4, align 4
  store i32 %v6_12b40, i32* @r5, align 4
  store i32 %v9_12b40, i32* @r6, align 4
  store i32 %v12_12b40, i32* @r7, align 4
  store i32 %v18_12b40, i32* @lr, align 4
  %v1_12b68 = call i32 @function_128a4(i32 %v0_12b60)
  %v0_12b6c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12b6c

dec_label_pc_12b6c:                               ; preds = %dec_label_pc_12b58, %dec_label_pc_12b60
  %v0_12b84 = phi i32 [ %v0_12b48, %dec_label_pc_12b58 ], [ %v1_12b68, %dec_label_pc_12b60 ]
  %v0_12b6c = phi i32 [ %arg2, %dec_label_pc_12b58 ], [ %v0_12b6c.pre, %dec_label_pc_12b60 ]
  %v1_12b6c = add i32 %v0_12b6c, 7
  %v1_12b70 = and i32 %v1_12b6c, -4
  store i32 %v1_12b70, i32* @r5, align 4
  %v2_12b74 = icmp ugt i32 %v1_12b70, 10
  %v1_12b78 = add i32 %v0_12b84, -4
  %v2_12b78 = inttoptr i32 %v1_12b78 to i32*
  %v3_12b78 = load i32, i32* %v2_12b78, align 4
  store i32 %v3_12b78, i32* @r6, align 4
  br i1 %v2_12b74, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_12b6c
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_12b6c, %bb
  %v0_12c00 = phi i32 [ %v1_12b70, %dec_label_pc_12b6c ], [ 12, %bb ]
  store i32 %v1_12b78, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_12c00, %v3_12b78
  br i1 %tmp, label %dec_label_pc_12b8c, label %dec_label_pc_12c00

dec_label_pc_12b8c:                               ; preds = %bb14
  %v2_12b80 = sub i32 %v0_12c00, %v3_12b78
  %v1_12b9c = call i32 @function_13438()
  %v0_12ba4 = load i32, i32* @r8, align 4
  %v1_12ba4 = load i32, i32* @r6, align 4
  %v2_12ba4 = add i32 %v1_12ba4, %v0_12ba4
  %v4_12bac = call i32 @function_12cec(i32* bitcast (i32** @global_var_1d034.417 to i32*), i32 %v2_12ba4, i32 %v2_12b80)
  store i32 %v4_12bac, i32* @r4, align 4
  store i32 76740, i32* @lr, align 4
  %v1_12bc0 = call i32 @function_13438()
  %v0_12bc4 = load i32, i32* @r4, align 4
  %v2_12bc4 = icmp eq i32 %v0_12bc4, 0
  br i1 %v2_12bc4, label %dec_label_pc_12bd4, label %.thread

.thread:                                          ; preds = %dec_label_pc_12b8c
  %v1_12bc8 = load i32, i32* @r6, align 4
  %v3_12bc8 = add i32 %v1_12bc8, %v0_12bc4
  %v2_12bcc = load i32, i32* @r7, align 4
  %v3_12bcc = add i32 %v2_12bcc, -4
  %v4_12bcc = inttoptr i32 %v3_12bcc to i32*
  store i32 %v3_12bc8, i32* %v4_12bcc, align 4
  br label %dec_label_pc_12c40

dec_label_pc_12bd4:                               ; preds = %dec_label_pc_12b8c
  %v0_12bd4 = load i32, i32* @r5, align 4
  %v1_12bd4 = add i32 %v0_12bd4, -4
  %v1_12bd8 = call i32 @function_128a4(i32 %v1_12bd4)
  store i32 %v1_12bd8, i32* @r0, align 4
  store i32 %v1_12bd8, i32* @r4, align 4
  %v2_12bdc = icmp eq i32 %v1_12bd8, 0
  br i1 %v2_12bdc, label %dec_label_pc_12bf8, label %dec_label_pc_12be4

dec_label_pc_12be4:                               ; preds = %dec_label_pc_12bd4
  %v0_12be4 = load i32, i32* @r6, align 4
  %v1_12be4 = add i32 %v0_12be4, -4
  store i32 %v1_12be4, i32* @r2, align 4
  %v0_12be8 = load i32, i32* @r7, align 4
  store i32 %v0_12be8, i32* @r1, align 4
  %v3_12bec = call i32 @function_12410(i32 %v1_12bd8, i32 %v0_12be8, i32 %v1_12be4)
  %v0_12bf0 = load i32, i32* @r7, align 4
  store i32 %v0_12bf0, i32* @r0, align 4
  %v0_12bf4 = call i32 @function_12a50()
  %v0_12bf8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12bf8

dec_label_pc_12bf8:                               ; preds = %dec_label_pc_12bd4, %dec_label_pc_12be4
  %v0_12bf8 = phi i32 [ 0, %dec_label_pc_12bd4 ], [ %v0_12bf8.pre, %dec_label_pc_12be4 ]
  store i32 %v0_12bf8, i32* @r7, align 4
  br label %dec_label_pc_12c40

dec_label_pc_12c00:                               ; preds = %bb14
  %v1_12c00 = add i32 %v0_12c00, 28
  %tmp15 = icmp ugt i32 %v1_12c00, %v3_12b78
  br i1 %tmp15, label %dec_label_pc_12c40, label %dec_label_pc_12c0c

dec_label_pc_12c0c:                               ; preds = %dec_label_pc_12c00
  %v1_12c18 = call i32 @function_13438()
  %v0_12c1c = load i32, i32* @r8, align 4
  %v1_12c1c = load i32, i32* @r5, align 4
  %v2_12c1c = add i32 %v1_12c1c, %v0_12c1c
  %v1_12c20 = load i32, i32* @r6, align 4
  %v2_12c20 = sub i32 %v1_12c20, %v1_12c1c
  %v4_12c28 = call i32 @function_12dac(i32* bitcast (i32** @global_var_1d034.417 to i32*), i32 %v2_12c1c, i32 %v2_12c20)
  store i32 76860, i32* @lr, align 4
  %v1_12c38 = call i32 @function_13438()
  %v0_12c3c = load i32, i32* @r5, align 4
  %v1_12c3c = load i32, i32* @r7, align 4
  %v2_12c3c = add i32 %v1_12c3c, -4
  %v3_12c3c = inttoptr i32 %v2_12c3c to i32*
  store i32 %v0_12c3c, i32* %v3_12c3c, align 4
  br label %dec_label_pc_12c40

dec_label_pc_12c40:                               ; preds = %.thread, %dec_label_pc_12c00, %dec_label_pc_12bf8, %dec_label_pc_12c0c
  %v0_12c40 = load i32, i32* @r7, align 4
  %v2_12c44 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12c44, i32* @r4, align 4
  store i32 %v6_12b40, i32* @r5, align 4
  store i32 %v9_12b40, i32* @r6, align 4
  store i32 %v12_12b40, i32* @r7, align 4
  store i32 %v15_12b40, i32* @r8, align 4
  ret i32 %v0_12c40

; uselistorder directives
  uselistorder i32 %v1_12c1c, { 1, 0 }
  uselistorder i32 %v0_12c00, { 1, 2, 0 }
  uselistorder i32 %v3_12b78, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1d034.417, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1d034.417 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_128a4, { 1, 44, 0, 4, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 2 }
  uselistorder i32 ()* @function_12a50, { 1, 0, 4, 3, 2, 5, 7, 6 }
  uselistorder i32* @r8, { 107, 108, 109, 110, 112, 111, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 36, 37, 38, 39, 128, 129, 130, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 0, 1, 2, 3, 4, 5, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 7, 72, 73, 74, 75, 76, 77, 78, 79, 6, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 8, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 131, 132, 133, 134, 135, 136, 137, 138, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 55, 56, 57, 58, 59, 60, 61 }
  uselistorder i32* @r7, { 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 10, 11, 16, 17, 18, 2, 7, 8, 9, 25, 12, 13, 14, 15, 4, 19, 3, 20, 21, 22, 23, 24, 26, 1, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 5, 67, 68, 69, 70, 71, 72, 73, 74, 243, 244, 245, 118, 119, 120, 121, 61, 0, 62, 63, 64, 75, 76, 77, 78, 79, 80, 6, 81, 82, 83, 84, 85, 86, 87, 88, 89, 100, 101, 102, 103, 104, 105, 106, 107, 108, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 109, 110, 111, 112, 113, 114, 115, 116, 117 }
  uselistorder label %dec_label_pc_12c40, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_12bf8, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_12b6c, { 1, 0 }
}

define i32 @function_12c58(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12c58:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_12c58 = inttoptr i32 %arg2 to i32*
  %v2_12c58 = load i32, i32* %v1_12c58, align 4
  %v3_12c5c = load i32, i32* @r4, align 4
  store i32 %v3_12c5c, i32* %stack_var_-8, align 4
  %v1_12c60 = add i32 %v2_12c58, 3
  %v1_12c64 = and i32 %v1_12c60, -4
  store i32 %v1_12c64, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_12c6c = icmp ugt i32 %v1_12c64, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_12c74 = load i32, i32* %arg1, align 4
  store i32 %v2_12c74, i32* %r0.global-to-local, align 4
  br i1 %v2_12c6c, label %dec_label_pc_12ce0.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_12c58
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12ce0.preheader

dec_label_pc_12ce0.preheader:                     ; preds = %dec_label_pc_12c58, %bb
  %v1_12c94 = phi i32 [ %v1_12c64, %dec_label_pc_12c58 ], [ 12, %bb ]
  %v2_12ce09 = icmp eq i32 %v2_12c74, 0
  br i1 %v2_12ce09, label %dec_label_pc_12ce8, label %dec_label_pc_12c80

dec_label_pc_12c80:                               ; preds = %dec_label_pc_12ce0.preheader, %dec_label_pc_12cdc
  %v2_12c98 = phi i32 [ %v3_12cdc, %dec_label_pc_12cdc ], [ %v2_12c74, %dec_label_pc_12ce0.preheader ]
  %v1_12c80 = inttoptr i32 %v2_12c98 to i32*
  %v2_12c80 = load i32, i32* %v1_12c80, align 4
  store i32 %v2_12c80, i32* %ip.global-to-local, align 4
  %v3_12c84 = icmp ult i32 %v2_12c80, %v1_12c94
  br i1 %v3_12c84, label %dec_label_pc_12cdc, label %dec_label_pc_12c8c

dec_label_pc_12c8c:                               ; preds = %dec_label_pc_12c80
  %v1_12c8c = add i32 %v1_12c94, 44
  %v3_12c90 = icmp ult i32 %v2_12c80, %v1_12c8c
  br i1 %v3_12c90, label %dec_label_pc_12ca0, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_12c8c
  %v2_12c84.le = sub i32 %v2_12c80, %v1_12c94
  store i32 %v2_12c84.le, i32* %v1_12c80, align 4
  %v0_12ccc.pre = load i32, i32* %ip.global-to-local, align 4
  %v0_12cd4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_12ca0:                               ; preds = %dec_label_pc_12c8c
  %v1_12ca0 = add i32 %v2_12c98, 4
  %v2_12ca0 = inttoptr i32 %v1_12ca0 to i32*
  %v3_12ca0 = load i32, i32* %v2_12ca0, align 4
  store i32 %v3_12ca0, i32* %r2.global-to-local, align 4
  %v2_12ca4 = icmp eq i32 %v3_12ca0, 0
  br i1 %v2_12ca4, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_12ca0
  %v2_12ca8 = add i32 %v2_12c98, 8
  %v3_12ca8 = inttoptr i32 %v2_12ca8 to i32*
  %v4_12ca8 = load i32, i32* %v3_12ca8, align 4
  %v3_12cac = add i32 %v3_12ca0, 8
  %v4_12cac = inttoptr i32 %v3_12cac to i32*
  store i32 %v4_12ca8, i32* %v4_12cac, align 4
  %v0_12cb0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12ca0, %bb27
  %v0_12cb0 = phi i32 [ %v2_12c98, %dec_label_pc_12ca0 ], [ %v0_12cb0.pre, %bb27 ]
  %v1_12cb0 = add i32 %v0_12cb0, 8
  %v2_12cb0 = inttoptr i32 %v1_12cb0 to i32*
  %v3_12cb0 = load i32, i32* %v2_12cb0, align 4
  %v1_12cb4 = add i32 %v0_12cb0, 4
  %v2_12cb4 = inttoptr i32 %v1_12cb4 to i32*
  %v3_12cb4 = load i32, i32* %v2_12cb4, align 4
  %v2_12cb8 = icmp eq i32 %v3_12cb0, 0
  br i1 %v2_12cb8, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_12cbc = add i32 %v3_12cb0, 4
  %v4_12cbc = inttoptr i32 %v3_12cbc to i32*
  store i32 %v3_12cb4, i32* %v4_12cbc, align 4
  %v1_12cc4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_12cc4, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_12cc0 = load i32, i32* %r1.global-to-local, align 4
  %v3_12cc0 = inttoptr i32 %v2_12cc0 to i32*
  store i32 %v3_12cb4, i32* %v3_12cc0, align 4
  %v1_12cc8.pre = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_12cc8.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_12cd4 = phi i32 [ %v0_12cd4.pre, %.thread._crit_edge ], [ %v1_12cc4, %bb28 ], [ %v1_12cc8.pre, %.thread5 ]
  %v0_12ccc = phi i32 [ %v0_12ccc.pre, %.thread._crit_edge ], [ %v1_12cc4, %bb28 ], [ %v1_12cc8.pre, %.thread5 ]
  %v1_12ccc = load i32, i32* %r0.global-to-local, align 4
  %v2_12ccc = sub i32 %v1_12ccc, %v0_12ccc
  %v1_12cd0 = add i32 %v2_12ccc, 12
  store i32 %v1_12cd0, i32* %r0.global-to-local, align 4
  %v1_12cd4 = load i32, i32* %r4.global-to-local, align 4
  %v2_12cd4 = inttoptr i32 %v1_12cd4 to i32*
  store i32 %v0_12cd4, i32* %v2_12cd4, align 4
  %v2_12cd8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12cd8, i32* %r4.global-to-local, align 4
  ret i32 %v1_12cd0

dec_label_pc_12cdc:                               ; preds = %dec_label_pc_12c80
  %v1_12cdc = add i32 %v2_12c98, 4
  %v2_12cdc = inttoptr i32 %v1_12cdc to i32*
  %v3_12cdc = load i32, i32* %v2_12cdc, align 4
  store i32 %v3_12cdc, i32* %r0.global-to-local, align 4
  %v2_12ce0 = icmp eq i32 %v3_12cdc, 0
  br i1 %v2_12ce0, label %dec_label_pc_12ce0.dec_label_pc_12ce8_crit_edge, label %dec_label_pc_12c80

dec_label_pc_12ce0.dec_label_pc_12ce8_crit_edge:  ; preds = %dec_label_pc_12cdc
  br label %dec_label_pc_12ce8

dec_label_pc_12ce8:                               ; preds = %dec_label_pc_12ce0.dec_label_pc_12ce8_crit_edge, %dec_label_pc_12ce0.preheader
  store i32 %v3_12c5c, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_12cdc, { 1, 2, 0 }
  uselistorder i32 %v0_12cb0, { 1, 0 }
  uselistorder i32 %v2_12c80, { 1, 0, 2, 3 }
  uselistorder i32 %v2_12c98, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_12c94, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i32* %ip.global-to-local, { 2, 1, 0, 3 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_12c80, { 1, 0 }
  uselistorder label %dec_label_pc_12ce0.preheader, { 1, 0 }
}

define i32 @function_12cec(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12cec:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_12cf0 = load i32, i32* %arg1, align 4
  store i32 %v2_12cf0, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_12d686 = icmp eq i32 %v2_12cf0, 0
  br i1 %v2_12d686, label %dec_label_pc_12d70, label %dec_label_pc_12cfc

dec_label_pc_12cfc:                               ; preds = %dec_label_pc_12cec, %dec_label_pc_12d64
  %v0_12d3c = phi i32 [ %v3_12d64, %dec_label_pc_12d64 ], [ %v2_12cf0, %dec_label_pc_12cec ]
  %v1_12cfc = inttoptr i32 %v0_12d3c to i32*
  %v2_12cfc = load i32, i32* %v1_12cfc, align 4
  store i32 %v2_12cfc, i32* %r0.global-to-local, align 4
  %v2_12d00 = sub i32 %v0_12d3c, %v2_12cfc
  %v1_12d04 = add i32 %v2_12d00, 12
  %v3_12d08 = icmp uge i32 %v1_12d04, %arg2
  %v9_12d08 = icmp eq i32 %v1_12d04, %arg2
  %v2_12d0c = xor i1 %v9_12d08, true
  %v3_12d0c = and i1 %v3_12d08, %v2_12d0c
  br i1 %v3_12d0c, label %dec_label_pc_12d64, label %dec_label_pc_12d10

dec_label_pc_12d10:                               ; preds = %dec_label_pc_12cfc
  br i1 %v9_12d08, label %dec_label_pc_12d14, label %dec_label_pc_12d70

dec_label_pc_12d14:                               ; preds = %dec_label_pc_12d10
  %v1_12d14 = add i32 %arg3, 3
  %v1_12d18 = and i32 %v1_12d14, -4
  store i32 %v1_12d18, i32* %r2.global-to-local, align 4
  %v2_12d1c = sub i32 %v2_12cfc, %v1_12d18
  %v3_12d1c = icmp ult i32 %v2_12cfc, %v1_12d18
  br i1 %v3_12d1c, label %dec_label_pc_12d70, label %dec_label_pc_12d24

dec_label_pc_12d24:                               ; preds = %dec_label_pc_12d14
  %v1_12d24 = add i32 %v1_12d18, 44
  %v3_12d28 = icmp ult i32 %v2_12cfc, %v1_12d24
  br i1 %v3_12d28, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_12d24
  store i32 %v2_12d1c, i32* %v1_12cfc, align 4
  %v1_12d34 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_12d34, i32* %r0.global-to-local, align 4
  ret i32 %v1_12d34

.thread2:                                         ; preds = %dec_label_pc_12d24
  %v1_12d3c = add i32 %v0_12d3c, 4
  %v2_12d3c = inttoptr i32 %v1_12d3c to i32*
  %v3_12d3c = load i32, i32* %v2_12d3c, align 4
  store i32 %v3_12d3c, i32* %r2.global-to-local, align 4
  %v2_12d40 = icmp eq i32 %v3_12d3c, 0
  br i1 %v2_12d40, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_12d44 = add i32 %v0_12d3c, 8
  %v3_12d44 = inttoptr i32 %v2_12d44 to i32*
  %v4_12d44 = load i32, i32* %v3_12d44, align 4
  %v3_12d48 = add i32 %v3_12d3c, 8
  %v4_12d48 = inttoptr i32 %v3_12d48 to i32*
  store i32 %v4_12d44, i32* %v4_12d48, align 4
  %v0_12d4c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_12d4c = phi i32 [ %v0_12d3c, %.thread2 ], [ %v0_12d4c.pre, %bb17 ]
  %v1_12d4c = add i32 %v0_12d4c, 8
  %v2_12d4c = inttoptr i32 %v1_12d4c to i32*
  %v3_12d4c = load i32, i32* %v2_12d4c, align 4
  store i32 %v3_12d4c, i32* %r2.global-to-local, align 4
  %v1_12d50 = add i32 %v0_12d4c, 4
  %v2_12d50 = inttoptr i32 %v1_12d50 to i32*
  %v3_12d50 = load i32, i32* %v2_12d50, align 4
  %v2_12d54 = icmp eq i32 %v3_12d4c, 0
  br i1 %v2_12d54, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_12d58 = add i32 %v3_12d4c, 4
  %v4_12d58 = inttoptr i32 %v3_12d58 to i32*
  store i32 %v3_12d50, i32* %v4_12d58, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_12d5c = load i32, i32* %lr.global-to-local, align 4
  %v3_12d5c = inttoptr i32 %v2_12d5c to i32*
  store i32 %v3_12d50, i32* %v3_12d5c, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_12d60 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_12d60

dec_label_pc_12d64:                               ; preds = %dec_label_pc_12cfc
  %v1_12d64 = add i32 %v0_12d3c, 4
  %v2_12d64 = inttoptr i32 %v1_12d64 to i32*
  %v3_12d64 = load i32, i32* %v2_12d64, align 4
  store i32 %v3_12d64, i32* %ip.global-to-local, align 4
  %v2_12d68 = icmp eq i32 %v3_12d64, 0
  br i1 %v2_12d68, label %dec_label_pc_12d68.dec_label_pc_12d70.loopexit_crit_edge, label %dec_label_pc_12cfc

dec_label_pc_12d68.dec_label_pc_12d70.loopexit_crit_edge: ; preds = %dec_label_pc_12d64
  br label %dec_label_pc_12d70

dec_label_pc_12d70:                               ; preds = %dec_label_pc_12d14, %dec_label_pc_12cec, %dec_label_pc_12d68.dec_label_pc_12d70.loopexit_crit_edge, %dec_label_pc_12d10
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_12d64, { 1, 2, 0 }
  uselistorder i32 %v0_12d4c, { 1, 0 }
  uselistorder i32 %v1_12d18, { 0, 2, 1, 3 }
  uselistorder i1 %v9_12d08, { 1, 0 }
  uselistorder i32 %v2_12cfc, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_12d3c, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_12d70, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_12cfc, { 1, 0 }
}

define i32 @function_12d78() local_unnamed_addr {
dec_label_pc_12d78:
  %v0_12d78 = load i32, i32* @r2, align 4
  %v2_12d78 = icmp eq i32 %v0_12d78, 0
  %v0_12d7c = load i32, i32* @r3, align 4
  %v1_12d7c = load i32, i32* @r1, align 4
  %v2_12d7c = add i32 %v1_12d7c, 4
  %v3_12d7c = inttoptr i32 %v2_12d7c to i32*
  store i32 %v0_12d7c, i32* %v3_12d7c, align 4
  %v0_12d80 = load i32, i32* @r2, align 4
  %v1_12d80 = load i32, i32* @r1, align 4
  %v2_12d80 = add i32 %v1_12d80, 8
  %v3_12d80 = inttoptr i32 %v2_12d80 to i32*
  store i32 %v0_12d80, i32* %v3_12d80, align 4
  %v1_12d88 = load i32, i32* @r1, align 4
  br i1 %v2_12d78, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_12d78
  %v2_12d84 = load i32, i32* @r2, align 4
  %v3_12d84 = add i32 %v2_12d84, 4
  %v4_12d84 = inttoptr i32 %v3_12d84 to i32*
  store i32 %v1_12d88, i32* %v4_12d84, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_12d78
  %v2_12d88 = load i32, i32* @r0, align 4
  %v3_12d88 = inttoptr i32 %v2_12d88 to i32*
  store i32 %v1_12d88, i32* %v3_12d88, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_12d8c = load i32, i32* @r3, align 4
  %v2_12d8c = icmp eq i32 %v0_12d8c, 0
  br i1 %v2_12d8c, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_12d90 = load i32, i32* @r1, align 4
  %v3_12d90 = add i32 %v0_12d8c, 8
  %v4_12d90 = inttoptr i32 %v3_12d90 to i32*
  store i32 %v1_12d90, i32* %v4_12d90, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_12d94 = load i32, i32* @r0, align 4
  ret i32 %v1_12d94

; uselistorder directives
  uselistorder i32 %v1_12d88, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_12d98() local_unnamed_addr {
dec_label_pc_12d98:
  %v0_12d98 = load i32, i32* @r2, align 4
  %v2_12d98 = icmp eq i32 %v0_12d98, 0
  %v1_12d9c = load i32, i32* @r1, align 4
  br i1 %v2_12d98, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_12d98
  %v2_12d9c = load i32, i32* @r0, align 4
  %v3_12d9c = inttoptr i32 %v2_12d9c to i32*
  store i32 %v1_12d9c, i32* %v3_12d9c, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_12d98
  %v3_12da0 = add i32 %v0_12d98, 4
  %v4_12da0 = inttoptr i32 %v3_12da0 to i32*
  store i32 %v1_12d9c, i32* %v4_12da0, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_12da4 = load i32, i32* @r2, align 4
  %v1_12da4 = load i32, i32* @r1, align 4
  %v2_12da4 = add i32 %v1_12da4, 8
  %v3_12da4 = inttoptr i32 %v2_12da4 to i32*
  store i32 %v0_12da4, i32* %v3_12da4, align 4
  %v1_12da8 = load i32, i32* @r0, align 4
  ret i32 %v1_12da8

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_12dac(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12dac:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_12dac = load i32, i32* @r4, align 4
  store i32 %v3_12dac, i32* %stack_var_-20, align 4
  %v2_12db0 = load i32, i32* %arg1, align 4
  store i32 %v2_12db0, i32* %r4.global-to-local, align 4
  %v2_12db4 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_12dd02 = icmp eq i32 %v2_12db0, 0
  br i1 %v2_12dd02, label %dec_label_pc_12e80, label %dec_label_pc_12dc0

dec_label_pc_12dc0:                               ; preds = %dec_label_pc_12dac, %dec_label_pc_12dc8
  %v0_12e10 = phi i32 [ %v0_12e18, %dec_label_pc_12dc8 ], [ 0, %dec_label_pc_12dac ]
  %v0_12e18 = phi i32 [ %v3_12dcc, %dec_label_pc_12dc8 ], [ %v2_12db0, %dec_label_pc_12dac ]
  %v1_12dd45.in = phi i32 [ %v3_12dcc, %dec_label_pc_12dc8 ], [ %v2_12db0, %dec_label_pc_12dac ]
  %v1_12dd45 = add i32 %v1_12dd45.in, 12
  %v3_12dc0 = icmp ult i32 %v1_12dd45, %arg2
  br i1 %v3_12dc0, label %dec_label_pc_12dc8, label %dec_label_pc_12de0

dec_label_pc_12dc8:                               ; preds = %dec_label_pc_12dc0
  store i32 %v0_12e18, i32* %r6.global-to-local, align 4
  %v1_12dcc = add i32 %v0_12e18, 4
  %v2_12dcc = inttoptr i32 %v1_12dcc to i32*
  %v3_12dcc = load i32, i32* %v2_12dcc, align 4
  store i32 %v3_12dcc, i32* %r4.global-to-local, align 4
  %v2_12dd0 = icmp eq i32 %v3_12dcc, 0
  br i1 %v2_12dd0, label %dec_label_pc_12dd0.dec_label_pc_12e80.loopexit_crit_edge, label %dec_label_pc_12dc0

dec_label_pc_12de0:                               ; preds = %dec_label_pc_12dc0
  %v1_12de0 = inttoptr i32 %v0_12e18 to i32*
  %v2_12de0 = load i32, i32* %v1_12de0, align 4
  %v2_12de4 = sub i32 %v0_12e18, %v2_12de0
  %v1_12de8 = add i32 %v2_12de4, 12
  %v3_12dec = icmp uge i32 %v1_12de8, %v2_12db4
  %v9_12dec = icmp eq i32 %v1_12de8, %v2_12db4
  %v2_12df0 = xor i1 %v9_12dec, true
  %v3_12df0 = and i1 %v3_12dec, %v2_12df0
  br i1 %v3_12df0, label %dec_label_pc_12e80, label %dec_label_pc_12df4

dec_label_pc_12df4:                               ; preds = %dec_label_pc_12de0
  %v2_12df4 = add i32 %v2_12de0, %arg3
  store i32 %v2_12df4, i32* %r7.global-to-local, align 4
  br i1 %v9_12dec, label %dec_label_pc_12dfc, label %dec_label_pc_12e28

dec_label_pc_12dfc:                               ; preds = %dec_label_pc_12df4
  %v2_12dfc = icmp eq i32 %v0_12e10, 0
  br i1 %v2_12dfc, label %dec_label_pc_12e74, label %dec_label_pc_12e04

dec_label_pc_12e04:                               ; preds = %dec_label_pc_12dfc
  %v1_12e04 = add i32 %v0_12e10, 12
  %v9_12e08 = icmp eq i32 %v1_12e04, %arg2
  br i1 %v9_12e08, label %dec_label_pc_12e10, label %dec_label_pc_12e74

dec_label_pc_12e10:                               ; preds = %dec_label_pc_12e04
  %v1_12e10 = inttoptr i32 %v0_12e10 to i32*
  %v2_12e10 = load i32, i32* %v1_12e10, align 4
  %v1_12e14 = add i32 %v0_12e10, 8
  %v2_12e14 = inttoptr i32 %v1_12e14 to i32*
  %v3_12e14 = load i32, i32* %v2_12e14, align 4
  store i32 %v3_12e14, i32* @r2, align 4
  store i32 %v0_12e18, i32* @r1, align 4
  %v2_12e1c = add i32 %v2_12e10, %v2_12df4
  store i32 %v2_12e1c, i32* %r7.global-to-local, align 4
  %v0_12e20 = call i32 @function_12d98()
  br label %dec_label_pc_12e74

dec_label_pc_12e28:                               ; preds = %dec_label_pc_12df4
  %v1_12e28 = add i32 %v0_12e18, 4
  %v2_12e28 = inttoptr i32 %v1_12e28 to i32*
  %v3_12e28 = load i32, i32* %v2_12e28, align 4
  store i32 %v3_12e28, i32* %r5.global-to-local, align 4
  %v2_12e2c = icmp eq i32 %v3_12e28, 0
  br i1 %v2_12e2c, label %dec_label_pc_12e60, label %dec_label_pc_12e34

dec_label_pc_12e34:                               ; preds = %dec_label_pc_12e28
  %v1_12e34 = inttoptr i32 %v3_12e28 to i32*
  %v2_12e34 = load i32, i32* %v1_12e34, align 4
  %v2_12e38 = sub i32 %v3_12e28, %v2_12e34
  %v1_12e3c = add i32 %v2_12e38, 12
  %v9_12e40 = icmp eq i32 %v2_12db4, %v1_12e3c
  br i1 %v9_12e40, label %dec_label_pc_12e48, label %dec_label_pc_12e60

dec_label_pc_12e48:                               ; preds = %dec_label_pc_12e34
  store i32 %v0_12e10, i32* @r2, align 4
  store i32 %v3_12e28, i32* @r1, align 4
  %v2_12e50 = add i32 %v2_12e34, %v2_12df4
  store i32 %v2_12e50, i32* %r7.global-to-local, align 4
  %v0_12e54 = call i32 @function_12d98()
  %v0_12e58 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12e58, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12e74

dec_label_pc_12e60:                               ; preds = %dec_label_pc_12e34, %dec_label_pc_12e28
  %v2_12e60 = add i32 %v0_12e18, %arg3
  store i32 %v2_12e60, i32* %r4.global-to-local, align 4
  store i32 %v3_12e28, i32* @r3, align 4
  store i32 %v0_12e10, i32* @r2, align 4
  store i32 %v2_12e60, i32* @r1, align 4
  %v0_12e70 = call i32 @function_12d78()
  br label %dec_label_pc_12e74

dec_label_pc_12e74:                               ; preds = %dec_label_pc_12e04, %dec_label_pc_12dfc, %dec_label_pc_12e48, %dec_label_pc_12e10, %dec_label_pc_12e60
  %v0_12e74 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12e74, i32* %r5.global-to-local, align 4
  %v0_12e78 = load i32, i32* %r7.global-to-local, align 4
  %v2_12e78 = inttoptr i32 %v0_12e74 to i32*
  store i32 %v0_12e78, i32* %v2_12e78, align 4
  br label %dec_label_pc_12e98

dec_label_pc_12dd0.dec_label_pc_12e80.loopexit_crit_edge: ; preds = %dec_label_pc_12dc8
  br label %dec_label_pc_12e80

dec_label_pc_12e80:                               ; preds = %dec_label_pc_12dac, %dec_label_pc_12dd0.dec_label_pc_12e80.loopexit_crit_edge, %dec_label_pc_12de0
  %v1_12e80 = add i32 %v2_12db4, -12
  store i32 %v1_12e80, i32* %r5.global-to-local, align 4
  %v3_12e84 = inttoptr i32 %v1_12e80 to i32*
  store i32 %arg3, i32* %v3_12e84, align 4
  %v0_12e88 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12e88, i32* @r3, align 4
  %v0_12e8c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_12e8c, i32* @r2, align 4
  %v0_12e90 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12e90, i32* @r1, align 4
  %v0_12e94 = call i32 @function_12d78()
  br label %dec_label_pc_12e98

dec_label_pc_12e98:                               ; preds = %dec_label_pc_12e74, %dec_label_pc_12e80
  %v0_12e98 = load i32, i32* %r5.global-to-local, align 4
  %v2_12e9c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12e9c, i32* @r4, align 4
  ret i32 %v0_12e98

; uselistorder directives
  uselistorder i32 %v3_12e28, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_12dec, { 1, 0 }
  uselistorder i32 %v3_12dcc, { 2, 3, 1, 0 }
  uselistorder i32 %v0_12e18, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_12e10, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_12d78, { 1, 0 }
  uselistorder i32* @r3, { 5, 8, 6, 7, 0, 9, 10, 11, 1, 2, 3, 12, 4 }
  uselistorder i32 ()* @function_12d98, { 1, 0 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12e98, { 1, 0 }
  uselistorder label %dec_label_pc_12e80, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12e74, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_12dc0, { 1, 0 }
}

define i32 @function_12ea0() local_unnamed_addr {
dec_label_pc_12ebc.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_12ea0 = ptrtoint i32* %stack_var_-268 to i32
  %v1_12eb0 = call i32 @function_13438()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_12ebc = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_12ebc

dec_label_pc_12ebc:                               ; preds = %dec_label_pc_12ebc.lr.ph, %dec_label_pc_12ebc
  %v1_12ec0 = phi i32 [ 31, %dec_label_pc_12ebc.lr.ph ], [ %v1_12ecc, %dec_label_pc_12ebc ]
  %v4_12ec0 = mul i32 %v1_12ec0, 4
  %v5_12ec0 = add i32 %v4_12ec0, %v2_12ebc
  %v2_12ec8 = add i32 %v5_12ec0, -128
  %v3_12ec8 = inttoptr i32 %v2_12ec8 to i32*
  store i32 0, i32* %v3_12ec8, align 4
  %v0_12ecc = load i32, i32* %r1.global-to-local, align 4
  %v1_12ecc = add i32 %v0_12ecc, -1
  store i32 %v1_12ecc, i32* %r1.global-to-local, align 4
  %v6_12ecc = icmp slt i32 %v1_12ecc, 0
  br i1 %v6_12ecc, label %dec_label_pc_12ed4, label %dec_label_pc_12ebc

dec_label_pc_12ed4:                               ; preds = %dec_label_pc_12ebc
  %v2_12ed4 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_12ed4, i32* @r4, align 4
  store i32 %v2_12ed4, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_12ee0 = call i32 @function_1285c()
  %v2_12ee4 = icmp eq i32 %v0_12ee0, 0
  br i1 %v2_12ee4, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_12ed4
  store i32 %v2_12ed4, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12ed4, %bb
  store i32 77560, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_12ee4, i32 ptrtoint (i32* @global_var_12078.439 to i32))
  %v2_12efc = load i32, i32* @global_var_1d208.441, align 4
  %v2_12f00 = icmp eq i32 %v2_12efc, 0
  br i1 %v2_12f00, label %dec_label_pc_12f08, label %dec_label_pc_12f38

dec_label_pc_12f08:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1d208.441, align 4
  br label %dec_label_pc_12f10

dec_label_pc_12f10:                               ; preds = %dec_label_pc_12f88, %dec_label_pc_12f08
  %v1_12f1c = call i32 @function_13438()
  %v1_12f24 = call i32 @function_145cc(i32 6)
  store i32 77624, i32* @lr, align 4
  %v1_12f34 = call i32 @function_13438()
  %v2_12f3c.pre = load i32, i32* @global_var_1d208.441, align 4
  br label %dec_label_pc_12f38

dec_label_pc_12f38:                               ; preds = %.thread1, %dec_label_pc_12f10
  %v0_12fac = phi i32 [ %v2_12efc, %.thread1 ], [ %v2_12f3c.pre, %dec_label_pc_12f10 ]
  store i32 ptrtoint (i32* @global_var_1d208.441 to i32), i32* %ip.global-to-local, align 4
  %v7_12f40 = icmp eq i32 %v0_12fac, 1
  br i1 %v7_12f40, label %dec_label_pc_12f70.lr.ph, label %dec_label_pc_12fa4

dec_label_pc_12f70.lr.ph:                         ; preds = %dec_label_pc_12f38
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1d208.441, align 4
  %v2_12f5c = bitcast i32* %stack_var_-268 to i8*
  %v3_12f5c = call i32 @function_12430(i8* %v2_12f5c, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12f70

dec_label_pc_12f70:                               ; preds = %dec_label_pc_12f70.lr.ph, %dec_label_pc_12f70
  %v1_12f74 = phi i32 [ 31, %dec_label_pc_12f70.lr.ph ], [ %v1_12f80, %dec_label_pc_12f70 ]
  %v4_12f74 = mul i32 %v1_12f74, 4
  %v5_12f74 = add i32 %v4_12f74, %v2_12ebc
  %v2_12f7c = add i32 %v5_12f74, -264
  %v3_12f7c = inttoptr i32 %v2_12f7c to i32*
  store i32 -1, i32* %v3_12f7c, align 4
  %v0_12f80 = load i32, i32* %r1.global-to-local, align 4
  %v1_12f80 = add i32 %v0_12f80, -1
  store i32 %v1_12f80, i32* %r1.global-to-local, align 4
  %v6_12f80 = icmp slt i32 %v1_12f80, 0
  br i1 %v6_12f80, label %dec_label_pc_12f88, label %dec_label_pc_12f70

dec_label_pc_12f88:                               ; preds = %dec_label_pc_12f70
  store i32 %v2_12ea0, i32* %r1.global-to-local, align 4
  %v4_12f9c = call i32 @function_13724(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_12f10

dec_label_pc_12fa4:                               ; preds = %dec_label_pc_12f38
  %v7_12fa4 = icmp eq i32 %v0_12fac, 2
  br i1 %v7_12fa4, label %dec_label_pc_12fac, label %dec_label_pc_12fb8

dec_label_pc_12fac:                               ; preds = %dec_label_pc_12fa4
  store i32 3, i32* @global_var_1d208.441, align 4
  %v0_12fb4 = call i32 @function_12ea0()
  %v2_12fb8.pre = load i32, i32* @global_var_1d208.441, align 4
  br label %dec_label_pc_12fb8

dec_label_pc_12fb8:                               ; preds = %dec_label_pc_12fa4, %dec_label_pc_12fac
  %v1_12fc0 = phi i32 [ %v0_12fac, %dec_label_pc_12fa4 ], [ %v2_12fb8.pre, %dec_label_pc_12fac ]
  %v7_12fbc = icmp eq i32 %v1_12fc0, 3
  br i1 %v7_12fbc, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_12fb8
  %v2_12fc8 = load i32, i32* %ip.global-to-local, align 4
  %v3_12fc8 = inttoptr i32 %v2_12fc8 to i32*
  store i32 4, i32* %v3_12fc8, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_12fb8, %bb27
  call void @__pseudo_cond_branch(i1 %v7_12fbc, i32 ptrtoint (i32* @global_var_1383c.443 to i32))
  br label %dec_label_pc_12fd0

dec_label_pc_12fd0:                               ; preds = %dec_label_pc_12fd0, %.thread3
  %v0_12fd0 = call i32 @function_12ea0()
  br label %dec_label_pc_12fd0

; uselistorder directives
  uselistorder i32 %v1_12f80, { 2, 1, 0 }
  uselistorder i32 %v1_12ecc, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 5, 6, 8, 7, 2 }
  uselistorder i32* @global_var_1d208.441, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_12fb8, { 1, 0 }
  uselistorder label %dec_label_pc_12f70, { 1, 0 }
  uselistorder label %dec_label_pc_12f38, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_12ebc, { 1, 0 }
}

define i32 @function_12fe8(i8* %arg1) local_unnamed_addr {
dec_label_pc_12fe8:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_12ffc = load i32, i32* @r4, align 4
  store i32 %v3_12ffc, i32* %stack_var_-36, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 10, i32* %r5.global-to-local, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  %v2_13020.pre = load i32, i32* bitcast (i32** @global_var_1d174.446 to i32*), align 4
  br label %dec_label_pc_13018

dec_label_pc_13018:                               ; preds = %dec_label_pc_13018, %dec_label_pc_12fe8
  %v0_13050 = phi i32 [ %tmp, %dec_label_pc_12fe8 ], [ %v1_13014, %dec_label_pc_13018 ]
  store i32 %v0_13050, i32* %r4.global-to-local, align 4
  %v1_1301c = inttoptr i32 %v0_13050 to i8*
  %v2_1301c = load i8, i8* %v1_1301c, align 1
  %v3_1301c = zext i8 %v2_1301c to i32
  %v3_13024 = mul nuw nsw i32 %v3_1301c, 2
  %v4_13024 = add i32 %v3_13024, %v2_13020.pre
  %v5_13024 = inttoptr i32 %v4_13024 to i8*
  %v6_13024 = load i8, i8* %v5_13024, align 1
  %v1_13028 = and i8 %v6_13024, 32
  %v2_13028 = icmp eq i8 %v1_13028, 0
  %v1_13014 = add i32 %v0_13050, 1
  br i1 %v2_13028, label %dec_label_pc_13030, label %dec_label_pc_13018

dec_label_pc_13030:                               ; preds = %dec_label_pc_13018
  %v7_13030 = icmp eq i8 %v2_1301c, 43
  br i1 %v7_13030, label %dec_label_pc_13050, label %dec_label_pc_13038

dec_label_pc_13038:                               ; preds = %dec_label_pc_13030
  %v7_13038 = icmp eq i8 %v2_1301c, 45
  br i1 %v7_13038, label %dec_label_pc_13050, label %bb

bb:                                               ; preds = %dec_label_pc_13038
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_130ac

dec_label_pc_13050:                               ; preds = %dec_label_pc_13030, %dec_label_pc_13038
  %storemerge30 = phi i32 [ 1, %dec_label_pc_13038 ], [ 0, %dec_label_pc_13030 ]
  store i32 %storemerge30, i32* %r7.global-to-local, align 4
  store i32 %v1_13014, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_130ac

dec_label_pc_130ac:                               ; preds = %bb, %dec_label_pc_13050
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v2_130b4 = call i32 @function_11b84(i32 -1, i32 10)
  %v0_130b8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_130b8, i32* @r1, align 4
  store i32 -1, i32* @r0, align 4
  %v1_130c4 = urem i32 %v2_130b4, 256
  store i32 %v1_130c4, i32* %sl.global-to-local, align 4
  %v0_130c8 = call i32 @function_11a74()
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v0_130c8, i32* %r8.global-to-local, align 4
  %v0_130dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_130dc

dec_label_pc_130d8:                               ; preds = %bb48, %dec_label_pc_13138
  %v0_130d8 = phi i32 [ %v1_13108, %bb48 ], [ %v0_130d8.pre, %dec_label_pc_13138 ]
  store i32 %v0_130d8, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_130dc

dec_label_pc_130dc:                               ; preds = %dec_label_pc_130ac, %dec_label_pc_130d8
  %v0_13108 = phi i32 [ %v0_130dc.pre, %dec_label_pc_130ac ], [ %v0_130d8, %dec_label_pc_130d8 ]
  %v1_130dc = inttoptr i32 %v0_13108 to i8*
  %v2_130dc = load i8, i8* %v1_130dc, align 1
  %v3_130dc = zext i8 %v2_130dc to i32
  %v1_130e0 = add nsw i32 %v3_130dc, -48
  %v1_130e4 = urem i32 %v1_130e0, 256
  %v1_130ec = or i32 %v3_130dc, 32
  %tmp56 = icmp ult i32 %v1_130e4, 10
  br i1 %tmp56, label %bb43, label %dec_label_pc_130f4

dec_label_pc_130f4:                               ; preds = %dec_label_pc_130dc
  %tmp57 = icmp ugt i32 %v1_130ec, 96
  br i1 %tmp57, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_130f4
  %v1_130f8 = add nsw i32 %v1_130ec, -87
  %v5_13100 = urem i32 %v1_130f8, 256
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_130dc, %dec_label_pc_130f4, %bb42
  %v3_13130 = phi i32 [ %v1_130e4, %dec_label_pc_130dc ], [ 40, %dec_label_pc_130f4 ], [ %v5_13100, %bb42 ]
  %v1_13104 = load i32, i32* %r5.global-to-local, align 4
  %v1_13108 = add i32 %v0_13108, 1
  store i32 %v1_13108, i32* %r4.global-to-local, align 4
  %v6_1310c = icmp slt i32 %v3_13130, %v1_13104
  br i1 %v6_1310c, label %dec_label_pc_13110, label %dec_label_pc_13150

dec_label_pc_13110:                               ; preds = %bb43
  %v0_13110 = load i32, i32* %ip.global-to-local, align 4
  %v1_13110 = load i32, i32* %r8.global-to-local, align 4
  %v9_13110 = icmp eq i32 %v0_13110, %v1_13110
  br i1 %v9_13110, label %.thread, label %bb44

.thread:                                          ; preds = %dec_label_pc_13110
  br label %dec_label_pc_13120

bb44:                                             ; preds = %dec_label_pc_13110
  %v3_13110 = icmp ult i32 %v0_13110, %v1_13110
  br i1 %v3_13110, label %dec_label_pc_13120, label %dec_label_pc_13138

dec_label_pc_13120:                               ; preds = %bb44, %.thread
  %v4_131281727 = phi i32 [ 1, %.thread ], [ 0, %bb44 ]
  %v1_13120 = load i32, i32* %sl.global-to-local, align 4
  %v3_13120 = icmp uge i32 %v3_13130, %v1_13120
  %v9_13120 = icmp eq i32 %v3_13130, %v1_13120
  %v2_13124 = xor i1 %v3_13120, true
  %v3_13124 = or i1 %v9_13120, %v2_13124
  br i1 %v3_13124, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_13120
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_13120, %bb45
  %v4_13128 = phi i32 [ %v4_131281727, %dec_label_pc_13120 ], [ 0, %bb45 ]
  %v2_13128 = xor i1 %v9_13120, true
  %v3_13128 = and i1 %v3_13120, %v2_13128
  br i1 %v3_13128, label %bb47, label %thread-pre-split

bb47:                                             ; preds = %bb46
  %v5_13128 = urem i32 %v4_13128, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb46, %bb47
  %v0_1312c = phi i32 [ %v5_13128, %bb47 ], [ %v4_13128, %bb46 ]
  %v2_1312c = icmp eq i32 %v0_1312c, 0
  br i1 %v2_1312c, label %bb48, label %dec_label_pc_13138

bb48:                                             ; preds = %thread-pre-split
  %v4_13130 = mul i32 %v0_13110, %v1_13104
  %v5_13130 = add i32 %v4_13130, %v3_13130
  store i32 %v5_13130, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_130d8

dec_label_pc_13138:                               ; preds = %bb44, %thread-pre-split
  %v0_13138 = call i32 @function_123d0()
  %v0_1313c = load i32, i32* %r7.global-to-local, align 4
  %v1_1313c = load i32, i32* %fp.global-to-local, align 4
  %v2_1313c = and i32 %v1_1313c, %v0_1313c
  store i32 %v2_1313c, i32* %r7.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  %v2_13148 = inttoptr i32 %v0_13138 to i32*
  store i32 34, i32* %v2_13148, align 4
  %v0_130d8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_130d8

dec_label_pc_13150:                               ; preds = %bb43
  %v0_13150.pre = load i32, i32* %sb.global-to-local, align 4
  %v2_13150 = icmp eq i32 %v0_13150.pre, 0
  br i1 %v2_13150, label %bb50, label %bb49

bb49:                                             ; preds = %dec_label_pc_13150
  %v1_13154 = load i32, i32* %r6.global-to-local, align 4
  %v3_13154 = inttoptr i32 %v0_13150.pre to i32*
  store i32 %v1_13154, i32* %v3_13154, align 4
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_13150, %bb49
  %v0_13158 = load i32, i32* %r7.global-to-local, align 4
  %v2_13158 = icmp eq i32 %v0_13158, 0
  %. = select i1 %v2_13158, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v0_13164 = load i32, i32* %fp.global-to-local, align 4
  %v2_13164 = icmp eq i32 %v0_13164, 0
  %v0_13188.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_13164, label %dec_label_pc_13180, label %bb53

bb53:                                             ; preds = %bb50
  %tmp58 = icmp ugt i32 %v0_13188.pre.pre, %.
  br i1 %tmp58, label %dec_label_pc_13170, label %dec_label_pc_13180

dec_label_pc_13170:                               ; preds = %bb53
  %v0_13170 = call i32 @function_123d0()
  %v2_13178 = inttoptr i32 %v0_13170 to i32*
  store i32 34, i32* %v2_13178, align 4
  %v0_1317c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1317c, i32* %ip.global-to-local, align 4
  %v0_13180.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13180

dec_label_pc_13180:                               ; preds = %bb53, %bb50, %dec_label_pc_13170
  %v0_13188.pre = phi i32 [ %v0_13188.pre.pre, %bb53 ], [ %v0_1317c, %dec_label_pc_13170 ], [ %v0_13188.pre.pre, %bb50 ]
  %v0_13180 = phi i32 [ %v0_13158, %bb53 ], [ %v0_13180.pre, %dec_label_pc_13170 ], [ %v0_13158, %bb50 ]
  %v2_13180 = icmp eq i32 %v0_13180, 0
  br i1 %v2_13180, label %dec_label_pc_13180._crit_edge, label %bb54

bb54:                                             ; preds = %dec_label_pc_13180
  %v2_13184 = sub i32 0, %v0_13188.pre
  store i32 %v2_13184, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13180._crit_edge

dec_label_pc_13180._crit_edge:                    ; preds = %dec_label_pc_13180, %bb54
  %v0_13188 = phi i32 [ %v2_13184, %bb54 ], [ %v0_13188.pre, %dec_label_pc_13180 ]
  %v2_1318c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1318c, i32* @r4, align 4
  ret i32 %v0_13188

; uselistorder directives
  uselistorder i32 %v0_13188.pre, { 1, 0 }
  uselistorder i32 %v0_13188.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v0_13150.pre, { 1, 0 }
  uselistorder i32 %v4_13128, { 1, 0 }
  uselistorder i1 %v3_13120, { 1, 0 }
  uselistorder i32 %v1_13120, { 1, 0 }
  uselistorder i32 %v1_13108, { 1, 0 }
  uselistorder i32 %v1_130ec, { 1, 0 }
  uselistorder i32 %v1_130e4, { 1, 0 }
  uselistorder i32 %v0_130d8, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 4, 2, 1, 3, 0, 5 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 5, 6, 0, 1, 3, 2, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 5, 2, 3, 4, 6 }
  uselistorder i32 ()* @function_11a74, { 3, 1, 4, 2, 0 }
  uselistorder i32 (i32, i32)* @function_11b84, { 4, 2, 0, 11, 10, 6, 1, 9, 8, 7, 5, 3 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder i8 32, { 0, 8, 9, 10, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7 }
  uselistorder label %dec_label_pc_13180._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_13180, { 2, 0, 1 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_13138, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %bb43, { 2, 1, 0 }
  uselistorder label %dec_label_pc_130dc, { 1, 0 }
  uselistorder label %dec_label_pc_130d8, { 1, 0 }
  uselistorder label %dec_label_pc_130ac, { 1, 0 }
  uselistorder label %dec_label_pc_13050, { 1, 0 }
}

define i32 @function_13194(i32 %arg1) local_unnamed_addr {
dec_label_pc_13194:
  %stack_var_-16 = alloca i32, align 4
  %v2_13194 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_13194, i32* @r0, align 4
  %v8_131b0 = call i32 @function_13440(i32 %v2_13194, i32 ptrtoint (i32* @global_var_13438.395 to i32), i32 ptrtoint (i32* @global_var_1d154.449 to i32), i32 78912, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_131c0 = call i32 @function_13438()
  %v2_131c8 = load i32, i32* @global_var_1d20c.453, align 4
  %v2_131cc = icmp eq i32 %v2_131c8, 0
  br i1 %v2_131cc, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_13194
  call void @__pseudo_branch(i32 %v2_131c8)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_13194, %bb
  store i32 %v2_13194, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_131f0.455 to i32), i32* @lr, align 4
  %v8_131ec = call i32 @function_13440(i32 %v2_13194, i32 1, i32 ptrtoint (i32* @global_var_1d154.449 to i32), i32 78912, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v8_131ec, i32* @r0, align 4
  %v1_131f0 = call i32 @function_133cc(i32 %v8_131ec)
  store i1 true, i1* @cpsr_z, align 1
  %v0_13204 = load i32, i32* @r4, align 4
  %v1_13208 = call i32 @function_1383c(i32 %v0_13204)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_13194, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_13438, { 4, 3, 2, 1, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 21, 20, 19 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_13440, { 1, 0, 5, 4, 3, 2 }
  uselistorder i32 78912, { 1, 0, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1d154.449 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_13438.395 to i32), { 0, 3, 1, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_13228(i32 %arg1) local_unnamed_addr {
dec_label_pc_13228:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_13228 = load i32, i32* @r4, align 4
  store i32 %v3_13228, i32* %stack_var_-20, align 4
  %v6_13228 = load i32, i32* @r5, align 4
  %v9_13228 = load i32, i32* @r6, align 4
  %v16_13228 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* @ip, align 4
  %v2_1322c = icmp eq i32 %arg1, 0
  %v2_13230 = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_1322c, label %dec_label_pc_133b4, label %dec_label_pc_13248.preheader

dec_label_pc_13248.preheader:                     ; preds = %dec_label_pc_13228
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_1325017 = add i32 %v16_13228, 124
  br label %dec_label_pc_13240

dec_label_pc_13240:                               ; preds = %dec_label_pc_13248.preheader, %dec_label_pc_13240
  %v5_1325018 = phi i32 [ %v5_1325017, %dec_label_pc_13248.preheader ], [ %v5_13250, %dec_label_pc_13240 ]
  %v2_13244 = add i32 %v5_1325018, -136
  %v3_13244 = inttoptr i32 %v2_13244 to i32*
  store i32 0, i32* %v3_13244, align 4
  %v0_13248.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_13248 = add i32 %v0_13248.pre, -1
  store i32 %v1_13248, i32* %r1.global-to-local, align 4
  %v6_13248 = icmp slt i32 %v1_13248, 0
  %v4_13250 = mul i32 %v1_13248, 4
  %v5_13250 = add i32 %v4_13250, %v16_13228
  br i1 %v6_13248, label %dec_label_pc_13258, label %dec_label_pc_13240

dec_label_pc_13258:                               ; preds = %dec_label_pc_13240
  %v2_13258 = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_13258, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_13268 = load i32, i32* @ip, align 4
  store i32 %v0_13268, i32* %stack_var_-28, align 4
  %v0_13270 = call i32 @function_1285c()
  store i32 %v0_13270, i32* %r0.global-to-local, align 4
  %v1_13274 = load i32, i32* @r5, align 4
  %v5_13278 = icmp slt i32 %v0_13270, %v1_13274
  br i1 %v5_13278, label %dec_label_pc_133bc, label %dec_label_pc_1327c

dec_label_pc_1327c:                               ; preds = %dec_label_pc_13258
  %v2_1327c = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_1327c, i32* @r4, align 4
  store i32 %v1_13274, i32* %r0.global-to-local, align 4
  store i32 %v2_13258, i32* %r1.global-to-local, align 4
  %v3_1328c = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_1328c = call i32 @function_12078(i32 %v1_13274, %_TYPEDEF_sigset_t* %v3_1328c, i32 %v2_1327c)
  store i32 %v4_1328c, i32* %r0.global-to-local, align 4
  %v1_13290 = load i32, i32* @r5, align 4
  %v9_13290 = icmp eq i32 %v4_1328c, %v1_13290
  br i1 %v9_13290, label %dec_label_pc_13298, label %dec_label_pc_133bc

dec_label_pc_13298:                               ; preds = %dec_label_pc_1327c
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_1327c, i32* %r0.global-to-local, align 4
  %v2_132a0 = call i32 @function_12838(i32 %v2_1327c, i32 17)
  store i32 %v2_132a0, i32* %r0.global-to-local, align 4
  %v1_132a4 = load i32, i32* @r5, align 4
  %v9_132a4 = icmp eq i32 %v2_132a0, %v1_132a4
  br i1 %v9_132a4, label %dec_label_pc_132bc.preheader, label %dec_label_pc_13298.dec_label_pc_13384_crit_edge

dec_label_pc_13298.dec_label_pc_13384_crit_edge:  ; preds = %dec_label_pc_13298
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_13384

dec_label_pc_132bc.preheader:                     ; preds = %dec_label_pc_13298
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_132b4

dec_label_pc_132b4:                               ; preds = %dec_label_pc_132bc.preheader, %dec_label_pc_132b4
  %v5_132c416 = phi i32 [ %v5_1325017, %dec_label_pc_132bc.preheader ], [ %v5_132c4, %dec_label_pc_132b4 ]
  %v2_132b8 = add i32 %v5_132c416, -136
  %v3_132b8 = inttoptr i32 %v2_132b8 to i32*
  store i32 0, i32* %v3_132b8, align 4
  %v0_132bc.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_132bc = add i32 %v0_132bc.pre, -1
  store i32 %v1_132bc, i32* %r1.global-to-local, align 4
  %v6_132bc = icmp slt i32 %v1_132bc, 0
  %v4_132c4 = mul i32 %v1_132bc, 4
  %v5_132c4 = add i32 %v4_132c4, %v16_13228
  br i1 %v6_132bc, label %dec_label_pc_132cc, label %dec_label_pc_132b4

dec_label_pc_132cc:                               ; preds = %dec_label_pc_132b4
  store i32 %v2_13258, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_132d4 = call i32 @function_1285c()
  store i32 %v0_132d4, i32* %r0.global-to-local, align 4
  %v1_132d8 = icmp slt i32 %v0_132d4, 0
  br i1 %v1_132d8, label %dec_label_pc_133bc, label %dec_label_pc_132e0

dec_label_pc_132e0:                               ; preds = %dec_label_pc_132cc
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_132ec = call i32 @function_13724(i32 17, i32* null, i32 %v2_13230)
  store i32 %v4_132ec, i32* %r0.global-to-local, align 4
  %v1_132f0 = icmp slt i32 %v4_132ec, 0
  br i1 %v1_132f0, label %dec_label_pc_132f8, label %dec_label_pc_13320

dec_label_pc_132f8:                               ; preds = %dec_label_pc_132e0
  %v0_132f8 = call i32 @function_123d0()
  store i32 %v2_1327c, i32* %r1.global-to-local, align 4
  store i32 %v0_132f8, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_1330c = inttoptr i32 %v0_132f8 to i32*
  %v2_1330c = load i32, i32* %v1_1330c, align 4
  store i32 %v2_1330c, i32* @r4, align 4
  %v3_13310 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_13310 = call i32 @function_12078(i32 2, %_TYPEDEF_sigset_t* %v3_13310, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_13318 = load i32, i32* @r4, align 4
  %v1_13318 = load i32, i32* %r5.global-to-local, align 4
  %v2_13318 = inttoptr i32 %v1_13318 to i32*
  store i32 %v0_13318, i32* %v2_13318, align 4
  %v17_133c4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_133c0

dec_label_pc_13320:                               ; preds = %dec_label_pc_132e0
  %v2_13320 = load i32, i32* %stack_var_-424, align 4
  %v7_13324 = icmp eq i32 %v2_13320, 1
  %v2_1332c = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_1332c, i32* @r4, align 4
  br i1 %v7_13324, label %dec_label_pc_13334, label %dec_label_pc_13368

dec_label_pc_13334:                               ; preds = %dec_label_pc_13320
  store i32 %v2_1332c, i32* %r1.global-to-local, align 4
  store i32 %v2_1332c, i32* %r0.global-to-local, align 4
  %v2_1333c = bitcast i32* %stack_var_-28 to %timespec*
  %v3_1333c = call i32 @function_13bc0(%timespec* %v2_1333c, i32 %v2_1332c)
  store i32 %v3_1333c, i32* %r0.global-to-local, align 4
  store i32 %v3_1333c, i32* %r6.global-to-local, align 4
  %v0_13344 = call i32 @function_123d0()
  store i32 %v2_1327c, i32* %r1.global-to-local, align 4
  store i32 %v0_13344, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_13358 = inttoptr i32 %v0_13344 to i32*
  %v2_13358 = load i32, i32* %v1_13358, align 4
  store i32 %v2_13358, i32* @r4, align 4
  %v3_1335c = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_1335c = call i32 @function_12078(i32 2, %_TYPEDEF_sigset_t* %v3_1335c, i32 0)
  store i32 %v4_1335c, i32* %r0.global-to-local, align 4
  %v0_13360 = load i32, i32* @r4, align 4
  %v1_13360 = load i32, i32* %r5.global-to-local, align 4
  %v2_13360 = inttoptr i32 %v1_13360 to i32*
  store i32 %v0_13360, i32* %v2_13360, align 4
  %v0_13390.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13390

dec_label_pc_13368:                               ; preds = %dec_label_pc_13320
  store i32 %v2_1327c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_13374 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_13374 = call i32 @function_12078(i32 2, %_TYPEDEF_sigset_t* %v3_13374, i32 0)
  store i32 %v4_13374, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13384

dec_label_pc_13384:                               ; preds = %dec_label_pc_13298.dec_label_pc_13384_crit_edge, %dec_label_pc_13368
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_13298.dec_label_pc_13384_crit_edge ], [ %v2_1332c, %dec_label_pc_13368 ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_13388 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_13388 = call i32 @function_13bc0(%timespec* %v2_13388, i32 %storemerge.pre-phi)
  store i32 %v3_13388, i32* %r0.global-to-local, align 4
  store i32 %v3_13388, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13390

dec_label_pc_13390:                               ; preds = %dec_label_pc_13334, %dec_label_pc_13384
  %v0_13390 = phi i32 [ %v0_13390.pr, %dec_label_pc_13334 ], [ %v3_13388, %dec_label_pc_13384 ]
  %v2_13390 = icmp eq i32 %v0_13390, 0
  br i1 %v2_13390, label %dec_label_pc_133b4, label %dec_label_pc_13398

dec_label_pc_13398:                               ; preds = %dec_label_pc_13390
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_133a0 = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_133a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_133c0

dec_label_pc_133b4:                               ; preds = %dec_label_pc_13228, %dec_label_pc_13390
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_133c0

dec_label_pc_133bc:                               ; preds = %dec_label_pc_1327c, %dec_label_pc_132cc, %dec_label_pc_13258
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_133c0

dec_label_pc_133c0:                               ; preds = %dec_label_pc_13398, %dec_label_pc_133b4, %dec_label_pc_132f8, %dec_label_pc_133bc
  %v17_133c4 = phi i32 [ %v3_133a0, %dec_label_pc_13398 ], [ 0, %dec_label_pc_133b4 ], [ %v17_133c4.pre, %dec_label_pc_132f8 ], [ -1, %dec_label_pc_133bc ]
  %v2_133c4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_133c4, i32* @r4, align 4
  store i32 %v6_13228, i32* @r5, align 4
  store i32 %v9_13228, i32* @r6, align 4
  ret i32 %v17_133c4

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_1332c, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_132bc, { 0, 2, 1 }
  uselistorder i32 %v2_1327c, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_13274, { 1, 0, 2 }
  uselistorder i32 %v1_13248, { 0, 2, 1 }
  uselistorder i32 %v16_13228, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 8, 9, 10, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 1, 7, 6, 9, 8, 21, 10, 12, 13, 11, 15, 14, 16, 20, 17, 22, 18, 19, 0 }
  uselistorder i32 (i32, i32*, i32)* @function_13724, { 1, 2, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @function_12078, { 1, 2, 3, 4, 0 }
  uselistorder i32 ()* @function_1285c, { 2, 1, 0, 3, 4 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder label %dec_label_pc_133c0, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_133bc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_133b4, { 1, 0 }
  uselistorder label %dec_label_pc_13390, { 1, 0 }
  uselistorder label %dec_label_pc_13384, { 1, 0 }
  uselistorder label %dec_label_pc_132b4, { 1, 0 }
  uselistorder label %dec_label_pc_13240, { 1, 0 }
}

define i32 @function_133cc(i32 %arg1) local_unnamed_addr {
dec_label_pc_133f8:
  %stack_var_-8 = alloca i32, align 4
  %v3_133cc = load i32, i32* @r4, align 4
  store i32 %v3_133cc, i32* %stack_var_-8, align 4
  %v2_133fc = load i32, i32* @global_var_1d21c.462, align 4
  %v2_13400 = icmp eq i32 %v2_133fc, 0
  br i1 %v2_13400, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_133f8
  store i32 78860, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_133fc)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_133f8, %bb
  %v2_13410 = load i32, i32* @global_var_1d220.464, align 4
  %v2_13414 = icmp eq i32 %v2_13410, 0
  br i1 %v2_13414, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_13418 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_13418, i32* @r4, align 4
  %v9_13418 = load i32, i32* @r0, align 4
  ret i32 %v9_13418

bb13:                                             ; preds = %.thread
  store i32 ptrtoint (i32* @global_var_13424.465 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_13410)
  %v2_13424 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13424, i32* @r4, align 4
  %v8_13424 = load i32, i32* @r0, align 4
  ret i32 %v8_13424

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13438() local_unnamed_addr {
dec_label_pc_13438:
  ret i32 0
}

define i32 @function_13440(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_13440:
  %v1_13440 = load i32, i32* @r0, align 4
  ret i32 %v1_13440
}

define i32 @function_13444(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13444:
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13444 = load i32, i32* @r4, align 4
  store i32 %v3_13444, i32* %stack_var_-12, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_13454 = call i32 @function_11d38(i32 %arg1, i32 1)
  %v7_13458 = icmp eq i32 %v2_13454, -1
  br i1 %v7_13458, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_13444
  %v3_1345c = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_1345c, i32* @r4, align 4
  ret i32 %v2_13454

bb4:                                              ; preds = %dec_label_pc_13444
  %v0_13460 = load i32, i32* @r4, align 4
  %v4_13468 = call i32 @function_11f28(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_1492c.467, i32 0, i32 0), i32 %v0_13460)
  %v1_1346c = load i32, i32* %r5.global-to-local, align 4
  %v9_1346c = icmp eq i32 %v4_13468, %v1_1346c
  br i1 %v9_1346c, label %bb5, label %bb6

bb5:                                              ; preds = %bb4
  %v3_13470 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_13470, i32* @r4, align 4
  ret i32 %v4_13468

bb6:                                              ; preds = %bb4
  %v0_13474 = call i32 @function_12ea0()
  %v0_13478 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13478, label %bb7, label %bb8

bb7:                                              ; preds = %bb6
  %v2_13478 = load i32, i32* @ip, align 4
  %v5_13478 = udiv i32 %v2_13478, 262144
  %v6_13478 = and i32 %v5_13478, %v0_13460
  store i32 %v6_13478, i32* @r4, align 4
  br label %bb8

bb8:                                              ; preds = %bb6, %bb7
  ret i32 %v0_13474

; uselistorder directives
  uselistorder i32 %v2_13454, { 1, 0 }
  uselistorder i1* @cpsr_z, { 10, 9, 0, 11, 8, 5, 6, 1, 2, 3, 4, 7 }
  uselistorder i32 ()* @function_12ea0, { 0, 2, 1, 3 }
  uselistorder i32 (i8*, i32)* @function_11f28, { 9, 4, 0, 1, 2, 7, 8, 3, 5, 6 }
  uselistorder i32 (i32, i32)* @function_11d38, { 0, 5, 13, 12, 15, 14, 9, 8, 11, 10, 7, 6, 4, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @function_1347c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1347c:
  %v2_13480 = load i32, i32* @global_var_1d224.469, align 4
  %v2_13484 = icmp eq i32 %v2_13480, 0
  br i1 %v2_13484, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_1347c
  %v6_13490 = load i32, i32* @r0, align 4
  ret i32 %v6_13490

bb2:                                              ; preds = %dec_label_pc_1347c
  store i32 1, i32* @global_var_1d224.469, align 4
  store i32 4096, i32* @global_var_1d218.420, align 4
  ret i32 undef
}

define i32 @function_134d8(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_134d8:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v4_134dc = mul i32 %arg2, 4
  %v5_134dc = add i32 %tmp, %v4_134dc
  %v2_134e0 = load i32, i32* %arg3, align 4
  %v2_134e4 = ptrtoint i32* %stack_var_-120 to i32
  %v1_134e8 = add i32 %v5_134dc, 4
  %v9_134ec = icmp eq i32 %v1_134e8, %v2_134e0
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1d210.474, align 4
  store i32 %v1_134e8, i32* @global_var_1d214.476, align 4
  store i32 %arg6, i32* @global_var_1d220.464, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_134ec, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_134d8
  store i32 %v5_134dc, i32* @global_var_1d214.476, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_134d8, %bb
  %v2_1352c = bitcast i32* %stack_var_-120 to i8*
  %v3_1352c = call i32 @function_12430(i8* %v2_1352c, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1d214.476, align 4
  br label %dec_label_pc_1353c

dec_label_pc_1353c:                               ; preds = %dec_label_pc_1353c, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_1353c, %dec_label_pc_1353c ]
  %v1_1353c = inttoptr i32 %storemerge to i32*
  %v2_1353c = load i32, i32* %v1_1353c, align 4
  %v4_1353c = add i32 %storemerge, 4
  %v2_13540 = icmp eq i32 %v2_1353c, 0
  br i1 %v2_13540, label %dec_label_pc_1354c, label %dec_label_pc_1353c

dec_label_pc_1354c:                               ; preds = %dec_label_pc_1353c
  store i32 %v4_1353c, i32* @r4, align 4
  %v1_1356c22 = inttoptr i32 %v4_1353c to i32*
  %v2_1356c23 = load i32, i32* %v1_1356c22, align 4
  %v2_1357025 = icmp eq i32 %v2_1356c23, 0
  br i1 %v2_1357025, label %dec_label_pc_13578, label %dec_label_pc_13554

dec_label_pc_13554:                               ; preds = %dec_label_pc_1354c, %dec_label_pc_1356c
  %v5_13558 = phi i32 [ %v2_1356c, %dec_label_pc_1356c ], [ %v2_1356c23, %dec_label_pc_1354c ]
  %v2_13554 = icmp ugt i32 %v5_13558, 13
  %v7_13554 = icmp eq i32 %v5_13558, 14
  %v2_13558 = xor i1 %v2_13554, true
  %v3_13558 = or i1 %v7_13554, %v2_13558
  br i1 %v3_13558, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_13554
  %v6_13558 = and i32 %v5_13558, 536870912
  %v7_13558 = icmp ne i32 %v6_13558, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_13554, %bb42
  %v1_13564 = phi i1 [ %v2_13554, %dec_label_pc_13554 ], [ %v7_13558, %bb42 ]
  %v2_1355c = xor i1 %v1_13564, true
  %v3_1355c = or i1 %v7_13554, %v2_1355c
  br i1 %v3_1355c, label %bb44, label %dec_label_pc_1356c

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_1356c

dec_label_pc_1356c:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_1355c, i32 ptrtoint (i32* @global_var_12410.478 to i32))
  %v0_13568 = load i32, i32* @r4, align 4
  %v1_13568 = add i32 %v0_13568, 8
  store i32 %v1_13568, i32* @r4, align 4
  %v1_1356c = inttoptr i32 %v1_13568 to i32*
  %v2_1356c = load i32, i32* %v1_1356c, align 4
  %v2_13570 = icmp eq i32 %v2_1356c, 0
  br i1 %v2_13570, label %dec_label_pc_13578, label %dec_label_pc_13554

dec_label_pc_13578:                               ; preds = %dec_label_pc_1356c, %dec_label_pc_1354c
  %v1_1357c = call i32 @function_145e4(i32 %v2_134e4)
  store i32 %v1_1357c, i32* @r0, align 4
  %v1_13580 = call i32 @function_1347c(i32 %v1_1357c)
  store i32 %v1_13580, i32* @r0, align 4
  %v2_1358c = icmp eq i32 %tmp37, 0
  br i1 %v2_1358c, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_13578
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_13578, %bb45
  %v0_1359c = phi i32 [ %tmp37, %dec_label_pc_13578 ], [ 4096, %bb45 ]
  %v3_13594 = icmp eq i32 %tmp36, -1
  %v8_13594 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1d218.420 to i32), i32* @r2, align 4
  store i32 %v0_1359c, i32* @global_var_1d218.420, align 4
  br i1 %v3_13594, label %dec_label_pc_135a4, label %dec_label_pc_135cc

dec_label_pc_135a4:                               ; preds = %bb46
  %v0_135a4 = call i32 @function_13b30()
  store i32 %v0_135a4, i32* @r0, align 4
  store i32 %v0_135a4, i32* @r4, align 4
  %v0_135ac = call i32 @function_13ad8()
  %v0_135b0 = load i32, i32* @r4, align 4
  %v9_135b0 = icmp eq i32 %v0_135b0, %v0_135ac
  br i1 %v9_135b0, label %dec_label_pc_135b8, label %dec_label_pc_135f4

dec_label_pc_135b8:                               ; preds = %dec_label_pc_135a4
  %v1_135b8 = call i32 @function_13b04(i32 %v0_135ac)
  store i32 %v1_135b8, i32* @r0, align 4
  store i32 %v1_135b8, i32* @r4, align 4
  %v0_135c0 = call i32 @function_13aac()
  %v0_135c4 = load i32, i32* @r4, align 4
  %v9_135c4 = icmp eq i32 %v0_135c4, %v0_135c0
  br i1 %v9_135c4, label %dec_label_pc_135cc, label %dec_label_pc_135f4

dec_label_pc_135cc:                               ; preds = %dec_label_pc_135b8, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_13594, label %dec_label_pc_13660, label %dec_label_pc_135d8

dec_label_pc_135d8:                               ; preds = %dec_label_pc_135cc
  %v9_135dc = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_135dc, label %dec_label_pc_135e4, label %dec_label_pc_135f4

dec_label_pc_135e4:                               ; preds = %dec_label_pc_135d8
  br label %dec_label_pc_135f4

dec_label_pc_135f4:                               ; preds = %dec_label_pc_135e4, %dec_label_pc_135d8, %dec_label_pc_135b8, %dec_label_pc_135a4
  %v2_135fc = call i32 @function_13444(i32 0, i32 32768)
  %v2_13608 = call i32 @function_13444(i32 1, i32 32770)
  %v2_13614 = call i32 @function_13444(i32 2, i32 32770)
  br label %dec_label_pc_13660

dec_label_pc_13660:                               ; preds = %dec_label_pc_135f4, %dec_label_pc_135cc
  %v0_13624 = load i32, i32* %r6.global-to-local, align 4
  %v1_13624 = inttoptr i32 %v0_13624 to i32*
  %v2_13624 = load i32, i32* %v1_13624, align 4
  store i32 %v2_13624, i32* @global_var_1d16c, align 4
  store i32 %arg5, i32* @global_var_1d21c.462, align 4
  %v2_13660 = icmp eq i32 %arg4, 0
  br i1 %v2_13660, label %dec_label_pc_1369c, label %bb47

bb47:                                             ; preds = %dec_label_pc_13660
  br label %dec_label_pc_1369c

dec_label_pc_1369c:                               ; preds = %dec_label_pc_13660, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_136ac = call i32 @function_123d0()
  %v2_136b4 = inttoptr i32 %v1_136ac to i32*
  store i32 0, i32* %v2_136b4, align 4
  %v0_136e0 = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_136ec = call i32 @function_13194(i32 %v0_136e0)
  ret i32 %v1_136ec

; uselistorder directives
  uselistorder i32 %v2_1356c, { 1, 0 }
  uselistorder i32 %v1_13568, { 1, 0 }
  uselistorder i1 %v2_13554, { 1, 0 }
  uselistorder i32 %v4_1353c, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_13194, { 0, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_13444, { 2, 1, 0 }
  uselistorder i32 32768, { 1, 2, 0 }
  uselistorder i32* @global_var_1d218.420, { 1, 4, 0, 2, 3 }
  uselistorder i32 4096, { 0, 1, 5, 9, 2, 3, 6, 10, 7, 11, 4, 8, 12, 13 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i1 true, { 0, 1, 75, 2, 3, 4, 5, 6, 7, 8, 43, 9, 10, 11, 12, 13, 99, 41, 44, 53, 100, 19, 20, 21, 76, 45, 16, 77, 78, 79, 80, 81, 82, 83, 84, 62, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 17, 18, 97, 98, 61, 42, 54, 101, 14, 15, 60, 22, 102, 24, 23, 49, 57, 50, 58, 51, 56, 52, 59, 103, 25, 104, 105, 26, 106, 63, 64, 107, 65, 66, 108, 67, 68, 27, 28, 109, 69, 70, 29, 30, 110, 71, 72, 31, 32, 111, 73, 74, 33, 34, 48, 112, 113, 114, 35, 55, 36, 46, 37, 47, 38, 39, 40 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_1369c, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_1356c, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_13554, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_13724(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13724:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_13724 = load i32, i32* @r4, align 4
  %v6_13724 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_13728 = icmp eq i32* %arg2, null
  %v2_1372c = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_13728, label %dec_label_pc_13798, label %dec_label_pc_1373c

dec_label_pc_1373c:                               ; preds = %dec_label_pc_13724
  %v2_13740 = load i32, i32* %arg2, align 4
  %v4_13740 = add i32 %tmp, 4
  store i32 %v4_13740, i32* @r1, align 4
  %v2_13744 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_13744, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_13740, i32* %stack_var_-156, align 4
  %v3_13750 = call i32 @function_12410(i32 %v2_13744, i32 %v4_13740, i32 128)
  store i32 %v3_13750, i32* %r0.global-to-local, align 4
  %v0_13754 = load i32, i32* @r4, align 4
  %v1_13754 = add i32 %v0_13754, 132
  %v2_13754 = inttoptr i32 %v1_13754 to i32*
  %v3_13754 = load i32, i32* %v2_13754, align 4
  %v1_13758 = and i32 %v3_13754, 67108864
  %v2_13758 = icmp eq i32 %v1_13758, 0
  br i1 %v2_13758, label %dec_label_pc_1376c, label %bb

bb:                                               ; preds = %dec_label_pc_1373c
  br label %dec_label_pc_13788

dec_label_pc_1376c:                               ; preds = %dec_label_pc_1373c
  %v1_13774 = and i32 %v3_13754, 4
  %v2_13774 = icmp eq i32 %v1_13774, 0
  br i1 %v2_13774, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_1376c
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_1376c, %bb20
  br label %dec_label_pc_13788

dec_label_pc_13788:                               ; preds = %bb, %bb21
  %v2_13788 = icmp eq i32 %v0_13754, 0
  %v3_1378c = ptrtoint i32* %stack_var_-156 to i32
  %.v3_1378c = select i1 %v2_13788, i32 0, i32 %v3_1378c
  %v0_13798.pre = load i32, i32* @r5, align 4
  %v0_137a8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13798

dec_label_pc_13798:                               ; preds = %dec_label_pc_13788, %dec_label_pc_13724
  %v0_137a8 = phi i32 [ %arg1, %dec_label_pc_13724 ], [ %v0_137a8.pre, %dec_label_pc_13788 ]
  %v0_13798 = phi i32 [ %arg3, %dec_label_pc_13724 ], [ %v0_13798.pre, %dec_label_pc_13788 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_13724 ], [ %.v3_1378c, %dec_label_pc_13788 ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_13798 = icmp eq i32 %v0_13798, 0
  %.v2_1372c = select i1 %v2_13798, i32 0, i32 %v2_1372c
  store i32 %.v2_1372c, i32* @r2, align 4
  store i32 %v0_137a8, i32* %r0.global-to-local, align 4
  %v1_137ac = call i32 @function_13810(i32 %v0_137a8)
  store i32 %v1_137ac, i32* %r0.global-to-local, align 4
  %v0_137b0 = load i32, i32* @r5, align 4
  %v2_137b0 = icmp eq i32 %v0_137b0, 0
  br i1 %v2_137b0, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_13798
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_13798, %bb25
  %v0_137c0.pr = phi i32 [ 0, %dec_label_pc_13798 ], [ 1, %bb25 ]
  %v1_137b8 = icmp slt i32 %v1_137ac, 0
  br i1 %v1_137b8, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_137f4

thread-pre-split:                                 ; preds = %bb26
  %v2_137c0 = icmp eq i32 %v0_137c0.pr, 0
  store i32 %v1_137ac, i32* @r4, align 4
  br i1 %v2_137c0, label %dec_label_pc_137f4, label %dec_label_pc_137cc

dec_label_pc_137cc:                               ; preds = %thread-pre-split
  %v2_137cc = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_137b0, i32* %r0.global-to-local, align 4
  %v2_137d4 = inttoptr i32 %v0_137b0 to i32*
  store i32 %v2_137cc, i32* %v2_137d4, align 4
  %v3_137d4 = load i32, i32* %r0.global-to-local, align 4
  %v4_137d4 = add i32 %v3_137d4, 4
  store i32 %v4_137d4, i32* @r0, align 4
  %v2_137d8 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_137d8, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_137e0 = call i32 @function_12410(i32 %v4_137d4, i32 %v2_137d8, i32 128)
  store i32 %v3_137e0, i32* %r0.global-to-local, align 4
  %v1_137e8 = load i32, i32* @r5, align 4
  %v2_137e8 = add i32 %v1_137e8, 136
  %v3_137e8 = inttoptr i32 %v2_137e8 to i32*
  %v1_137f0 = load i32, i32* @r5, align 4
  %v2_137f0 = add i32 %v1_137f0, 132
  %v3_137f0 = inttoptr i32 %v2_137f0 to i32*
  %v0_137f4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_137f4

dec_label_pc_137f4:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_137cc
  %v0_137f4 = phi i32 [ %v1_137ac, %thread-pre-split ], [ %v0_137f4.pre, %dec_label_pc_137cc ], [ %v1_137ac, %thread-pre-split.thread ]
  store i32 %v0_137f4, i32* %r0.global-to-local, align 4
  store i32 %v3_13724, i32* @r4, align 4
  store i32 %v6_13724, i32* @r5, align 4
  ret i32 %v0_137f4

; uselistorder directives
  uselistorder i32 %v0_137f4, { 1, 0 }
  uselistorder i32 %v0_137b0, { 1, 0, 2 }
  uselistorder i32 %v0_137a8, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 6, 4, 5, 1, 7, 2, 0 }
  uselistorder label %dec_label_pc_137f4, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_13788, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_13810(i32 %arg1) local_unnamed_addr {
dec_label_pc_13810:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13810 = load i32, i32* @r4, align 4
  store i32 %v3_13810, i32* %stack_var_-8, align 4
  %v1_13814 = load i32, i32* @r1, align 4
  %v2_13814 = inttoptr i32 %v1_13814 to %sigaction*
  %v3_13814 = load i32, i32* @r2, align 4
  %v4_13814 = inttoptr i32 %v3_13814 to %sigaction*
  %v5_13814 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_13814, %sigaction* %v4_13814)
  store i32 %v5_13814, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13814, -4095
  br i1 %tmp, label %dec_label_pc_13834, label %dec_label_pc_13824

dec_label_pc_13824:                               ; preds = %dec_label_pc_13810
  %v0_13824 = call i32 @function_123d0()
  %v0_13828 = load i32, i32* %r4.global-to-local, align 4
  %v1_13828 = sub i32 0, %v0_13828
  %v2_1382c = inttoptr i32 %v0_13824 to i32*
  store i32 %v1_13828, i32* %v2_1382c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13834

dec_label_pc_13834:                               ; preds = %dec_label_pc_13810, %dec_label_pc_13824
  %v0_13834 = phi i32 [ %v5_13814, %dec_label_pc_13810 ], [ -1, %dec_label_pc_13824 ]
  %v2_13838 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13838, i32* %r4.global-to-local, align 4
  ret i32 %v0_13834

; uselistorder directives
  uselistorder i32 %v5_13814, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13834, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_1383c(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_1383c:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_13864() local_unnamed_addr {
dec_label_pc_13864:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %tmp4 = bitcast i32* %stack_var_-72 to %stat*
  %v0_13874 = load i32, i32* @r0, align 4
  %v4_13874 = call i32 @fstat(i32 %v0_13874, %stat* %tmp4)
  store i32 %v4_13874, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_13874, -4095
  br i1 %tmp, label %dec_label_pc_13898, label %dec_label_pc_13884

dec_label_pc_13884:                               ; preds = %dec_label_pc_13864
  %v0_13884 = call i32 @function_123d0()
  %v0_13888 = load i32, i32* %r4.global-to-local, align 4
  %v1_13888 = sub i32 0, %v0_13888
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13890 = inttoptr i32 %v0_13884 to i32*
  store i32 %v1_13888, i32* %v2_13890, align 4
  br label %dec_label_pc_138a8

dec_label_pc_13898:                               ; preds = %dec_label_pc_13864
  %v2_13898 = icmp eq i32 %v4_13874, 0
  store i32 80040, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_13898, i32 ptrtoint (i32* @global_var_13f80.494 to i32))
  br label %dec_label_pc_138a8

dec_label_pc_138a8:                               ; preds = %dec_label_pc_13884, %dec_label_pc_13898
  %v0_138a8 = load i32, i32* %r4.global-to-local, align 4
  ret i32 %v0_138a8

; uselistorder directives
  uselistorder i32 %v4_13874, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 6, 13, 11, 12, 9, 10, 0, 3, 4, 5, 1, 2, 7, 8 }
  uselistorder label %dec_label_pc_138a8, { 1, 0 }
}

define i32 @function_138b4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_138b4:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %v6_138b4 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_138bc = call i32 @function_13948()
  store i32 %v0_138bc, i32* %r6.global-to-local, align 4
  %tmp8 = icmp slt i32 %v0_138bc, 1
  br i1 %tmp8, label %dec_label_pc_13940, label %dec_label_pc_1392c.preheader

dec_label_pc_1392c.preheader:                     ; preds = %dec_label_pc_138b4
  %v5_138c4 = load i32, i32* @r4, align 4
  %v7_138c4 = add i32 %v5_138c4, %v0_138bc
  store i32 %v7_138c4, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1392c

dec_label_pc_138d0:                               ; preds = %dec_label_pc_1392c
  %v1_138d0 = add i32 %v2_138e0, 16
  %v2_138d0 = inttoptr i32 %v1_138d0 to i32*
  %v3_138d0 = load i32, i32* %v2_138d0, align 4
  store i32 %v3_138d0, i32* @lr, align 4
  %v2_138d4 = inttoptr i32 %v1_13930 to i32*
  %v3_138d4 = load i32, i32* %v2_138d4, align 4
  store i32 %v3_138d4, i32* %r2.global-to-local, align 4
  %v1_138d8 = add i32 %v2_138e0, 18
  %v2_138d8 = inttoptr i32 %v1_138d8 to i8*
  %v3_138d8 = load i8, i8* %v2_138d8, align 1
  %v4_138d8 = zext i8 %v3_138d8 to i32
  store i32 %v4_138d8, i32* %ip.global-to-local, align 4
  %v3_138dc = sdiv i32 %v3_138d0, 256
  store i32 %v3_138dc, i32* %r3.global-to-local, align 4
  %v1_138e0 = trunc i32 %v3_138d0 to i8
  %v4_138e0 = inttoptr i32 %v1_13930 to i8*
  store i8 %v1_138e0, i8* %v4_138e0, align 1
  %v0_138e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_138e4 = load i32, i32* @r4, align 4
  %v2_138e4 = add i32 %v1_138e4, 4
  %v3_138e4 = inttoptr i32 %v2_138e4 to i32*
  store i32 %v0_138e4, i32* %v3_138e4, align 4
  %v0_138e8 = load i32, i32* %ip.global-to-local, align 4
  %v1_138e8 = trunc i32 %v0_138e8 to i8
  %v2_138e8 = load i32, i32* @r4, align 4
  %v3_138e8 = add i32 %v2_138e8, 10
  %v4_138e8 = inttoptr i32 %v3_138e8 to i8*
  store i8 %v1_138e8, i8* %v4_138e8, align 1
  %v0_138ec = load i32, i32* %r3.global-to-local, align 4
  %v1_138ec = trunc i32 %v0_138ec to i8
  %v2_138ec = load i32, i32* @r4, align 4
  %v3_138ec = add i32 %v2_138ec, 9
  %v4_138ec = inttoptr i32 %v3_138ec to i8*
  store i8 %v1_138ec, i8* %v4_138ec, align 1
  %v0_138f0 = load i32, i32* @r4, align 4
  %v1_138f0 = add i32 %v0_138f0, 8
  %v2_138f0 = inttoptr i32 %v1_138f0 to i8*
  %v3_138f0 = load i8, i8* %v2_138f0, align 1
  %v4_138f0 = zext i8 %v3_138f0 to i32
  store i32 %v4_138f0, i32* %r2.global-to-local, align 4
  %v0_138f4 = load i32, i32* @r5, align 4
  %v1_138f4 = add i32 %v0_138f4, 1
  %v2_138f4 = inttoptr i32 %v1_138f4 to i8*
  %v3_138f4 = load i8, i8* %v2_138f4, align 1
  %v4_138f4 = zext i8 %v3_138f4 to i32
  store i32 %v4_138f4, i32* %r3.global-to-local, align 4
  %v4_138f8 = mul nuw nsw i32 %v4_138f4, 256
  %v5_138f8 = or i32 %v4_138f8, %v4_138f0
  %v1_138fc = add nsw i32 %v5_138f8, -19
  store i32 %v1_138fc, i32* @r2, align 4
  %v3_13900 = call i32 @function_12420(i32 %v1_13938, i32 %v1_13934, i32 %v1_138fc)
  %v0_13904 = load i32, i32* @r4, align 4
  %v1_13904 = add i32 %v0_13904, 8
  %v2_13904 = inttoptr i32 %v1_13904 to i8*
  %v3_13904 = load i8, i8* %v2_13904, align 1
  %v4_13904 = zext i8 %v3_13904 to i32
  store i32 %v4_13904, i32* %r3.global-to-local, align 4
  %v0_13908 = load i32, i32* @r5, align 4
  %v1_13908 = add i32 %v0_13908, 1
  %v2_13908 = inttoptr i32 %v1_13908 to i8*
  %v3_13908 = load i8, i8* %v2_13908, align 1
  %v4_13908 = zext i8 %v3_13908 to i32
  store i32 %v0_13904, i32* @r0, align 4
  %v4_13910 = mul nuw nsw i32 %v4_13908, 256
  %v5_13910 = or i32 %v4_13910, %v4_13904
  store i32 %v5_13910, i32* @r2, align 4
  store i32 %v0_13904, i32* @r1, align 4
  %v3_13918 = call i32 @function_12420(i32 %v0_13904, i32 %v0_13904, i32 %v5_13910)
  %v0_1391c = load i32, i32* @r4, align 4
  %v1_1391c = add i32 %v0_1391c, 8
  %v2_1391c = inttoptr i32 %v1_1391c to i8*
  %v3_1391c = load i8, i8* %v2_1391c, align 1
  %v4_1391c = zext i8 %v3_1391c to i32
  store i32 %v4_1391c, i32* %r3.global-to-local, align 4
  %v0_13920 = load i32, i32* @r5, align 4
  %v1_13920 = add i32 %v0_13920, 1
  %v2_13920 = inttoptr i32 %v1_13920 to i8*
  %v3_13920 = load i8, i8* %v2_13920, align 1
  %v4_13920 = zext i8 %v3_13920 to i32
  store i32 %v4_13920, i32* @r2, align 4
  %v4_13924 = mul nuw nsw i32 %v4_13920, 256
  %v5_13924 = or i32 %v4_13924, %v4_1391c
  store i32 %v5_13924, i32* %r3.global-to-local, align 4
  %v2_13928 = add i32 %v5_13924, %v0_1391c
  store i32 %v2_13928, i32* @r4, align 4
  %v1_1392c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1392c

dec_label_pc_1392c:                               ; preds = %dec_label_pc_1392c.preheader, %dec_label_pc_138d0
  %v1_1392c = phi i32 [ %v7_138c4, %dec_label_pc_1392c.preheader ], [ %v1_1392c.pre, %dec_label_pc_138d0 ]
  %v2_138e0 = phi i32 [ %v5_138c4, %dec_label_pc_1392c.preheader ], [ %v2_13928, %dec_label_pc_138d0 ]
  %v3_1392c = icmp ult i32 %v2_138e0, %v1_1392c
  %v1_13930 = add i32 %v2_138e0, 8
  store i32 %v1_13930, i32* @r5, align 4
  %v1_13934 = add i32 %v2_138e0, 19
  store i32 %v1_13934, i32* @r1, align 4
  %v1_13938 = add i32 %v2_138e0, 11
  store i32 %v1_13938, i32* @r0, align 4
  br i1 %v3_1392c, label %dec_label_pc_138d0, label %dec_label_pc_13940.loopexit

dec_label_pc_13940.loopexit:                      ; preds = %dec_label_pc_1392c
  %v0_13940.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13940

dec_label_pc_13940:                               ; preds = %dec_label_pc_138b4, %dec_label_pc_13940.loopexit
  %v0_13940 = phi i32 [ %v0_13940.pre, %dec_label_pc_13940.loopexit ], [ %v0_138bc, %dec_label_pc_138b4 ]
  store i32 %v6_138b4, i32* @r5, align 4
  ret i32 %v0_13940

; uselistorder directives
  uselistorder i32 %v1_13938, { 1, 0 }
  uselistorder i32 %v1_13934, { 1, 0 }
  uselistorder i32 %v1_13930, { 2, 1, 0 }
  uselistorder i32 %v2_138e0, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %v0_13904, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v3_138d0, { 1, 0, 2 }
  uselistorder i32 %v5_138c4, { 1, 0 }
  uselistorder i32 %v0_138bc, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_12420, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_13940, { 1, 0 }
  uselistorder label %dec_label_pc_1392c, { 1, 0 }
}

define i32 @function_13948() local_unnamed_addr {
dec_label_pc_13948:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_1394c = load i32, i32* @r4, align 4
  %v9_1394c = load i32, i32* @r6, align 4
  %v0_13950 = load i32, i32* @r2, align 4
  %v1_13950 = add i32 %v0_13950, 6
  %v2_13958 = ptrtoint i32* %stack_var_-60 to i32
  %v1_1395c = and i32 %v1_13950, -4
  store i32 %v1_1395c, i32* %r3.global-to-local, align 4
  %v2_13960 = sub i32 %v2_13958, %v1_1395c
  %v0_13964 = load i32, i32* @r1, align 4
  store i32 %v0_13964, i32* %r8.global-to-local, align 4
  store i32 %v0_13950, i32* %stack_var_-60, align 4
  store i32 %v2_13960, i32* %sl.global-to-local, align 4
  %v0_13970 = load i32, i32* @r0, align 4
  %v1_13974 = inttoptr i32 %v2_13960 to %linux_dirent64*
  store i32 %v2_13960, i32* %r1.global-to-local, align 4
  %v5_13978 = call i32 @getdents64(i32 %v0_13970, %linux_dirent64* %v1_13974, i32 %v0_13950)
  store i32 %v5_13978, i32* @r6, align 4
  %tmp = icmp ult i32 %v5_13978, -4095
  br i1 %tmp, label %dec_label_pc_1399c, label %dec_label_pc_13988

dec_label_pc_13988:                               ; preds = %dec_label_pc_13948
  %v0_13988 = call i32 @function_123d0()
  %v0_1398c = load i32, i32* @r6, align 4
  %v1_1398c = sub i32 0, %v0_1398c
  store i32 %v1_1398c, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_13994 = inttoptr i32 %v0_13988 to i32*
  store i32 %v1_1398c, i32* %v2_13994, align 4
  %v0_139a4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_139a4

dec_label_pc_1399c:                               ; preds = %dec_label_pc_13948
  br i1 false, label %dec_label_pc_139a4, label %dec_label_pc_139ac

dec_label_pc_139a4:                               ; preds = %dec_label_pc_1399c, %dec_label_pc_13988
  %v0_139a4 = phi i32 [ -1, %dec_label_pc_1399c ], [ %v0_139a4.pre, %dec_label_pc_13988 ]
  store i32 %v0_139a4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13aa0

dec_label_pc_139ac:                               ; preds = %dec_label_pc_1399c
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_139b4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_139b4, i32* @r5, align 4
  %v0_139b8 = load i32, i32* @sp, align 4
  store i32 %v0_139b8, i32* @r4, align 4
  br label %dec_label_pc_13a7c

dec_label_pc_139c8:                               ; preds = %dec_label_pc_13a7c
  %v2_13a94 = add i32 %v3_13a80, %v0_13a94
  %v1_139c8 = add i32 %v0_139cc, 17
  %v2_139c8 = inttoptr i32 %v1_139c8 to i8*
  %v3_139c8 = load i8, i8* %v2_139c8, align 1
  %v4_139c8 = zext i8 %v3_139c8 to i32
  %v2_139cc = inttoptr i32 %v1_13a88 to i8*
  %v3_139cc = load i8, i8* %v2_139cc, align 1
  %v4_139cc = zext i8 %v3_139cc to i32
  %v4_139d0 = mul nuw nsw i32 %v4_139c8, 256
  %v5_139d0 = or i32 %v4_139cc, %v4_139d0
  %v1_139d4 = add nuw nsw i32 %v5_139d0, 3
  %v1_139d8 = and i32 %v1_139d4, 131068
  store i32 %v1_139d8, i32* %r3.global-to-local, align 4
  %v2_139dc = add i32 %v1_139d8, %v2_13a1c
  store i32 %v2_139dc, i32* %sb.global-to-local, align 4
  %v9_139e0 = icmp eq i32 %v2_139dc, %v2_13a94
  %v1_139e4 = and i32 %v1_139d4, 128
  %v2_139e8 = icmp eq i32 %v1_139e4, 0
  %v3_139e8 = or i1 %v9_139e0, %v2_139e8
  br i1 %v3_139e8, label %dec_label_pc_13a1c, label %dec_label_pc_139ec

dec_label_pc_139ec:                               ; preds = %dec_label_pc_139c8
  store i32 %stack_var_-52.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_139fc = call i32 @function_13b5c(i32 %v0_13970, i32 %stack_var_-52.0, i32 %stack_var_-48.0, i32 0)
  %v0_13a00 = load i32, i32* @r5, align 4
  %v1_13a00 = load i32, i32* %r8.global-to-local, align 4
  %v9_13a00 = icmp eq i32 %v0_13a00, %v1_13a00
  br i1 %v9_13a00, label %dec_label_pc_13a08, label %dec_label_pc_13a9c

dec_label_pc_13a08:                               ; preds = %dec_label_pc_139ec
  %v0_13a08 = call i32 @function_123d0()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_13a14 = inttoptr i32 %v0_13a08 to i32*
  store i32 22, i32* %v2_13a14, align 4
  %v0_13aa0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13aa0

dec_label_pc_13a1c:                               ; preds = %dec_label_pc_139c8
  %v3_139e411 = udiv i32 %v1_139d4, 256
  %v1_13a1c = trunc i32 %v3_139e411 to i8
  %v3_13a1c = add i32 %v2_13a1c, 17
  %v4_13a1c = inttoptr i32 %v3_13a1c to i8*
  store i8 %v1_13a1c, i8* %v4_13a1c, align 1
  %v0_13a20 = load i32, i32* %r3.global-to-local, align 4
  %v1_13a20 = trunc i32 %v0_13a20 to i8
  %v2_13a20 = load i32, i32* @r5, align 4
  %v3_13a20 = add i32 %v2_13a20, 16
  %v4_13a20 = inttoptr i32 %v3_13a20 to i8*
  store i8 %v1_13a20, i8* %v4_13a20, align 1
  %v0_13a24 = load i32, i32* @r4, align 4
  %v1_13a24 = add i32 %v0_13a24, 8
  %v1_13a28 = inttoptr i32 %v1_13a24 to i32*
  %v2_13a28 = load i32, i32* %v1_13a28, align 4
  %v3_13a28 = add i32 %v0_13a24, 12
  %v4_13a28 = inttoptr i32 %v3_13a28 to i32*
  %v5_13a28 = load i32, i32* %v4_13a28, align 4
  store i32 %v5_13a28, i32* %r3.global-to-local, align 4
  %v1_13a34 = inttoptr i32 %v0_13a24 to i32*
  %v2_13a34 = load i32, i32* %v1_13a34, align 4
  %v3_13a34 = add i32 %v0_13a24, 4
  %v4_13a34 = inttoptr i32 %v3_13a34 to i32*
  %v5_13a34 = load i32, i32* %v4_13a34, align 4
  store i32 %v5_13a34, i32* %r3.global-to-local, align 4
  %v0_13a38 = load i32, i32* @r5, align 4
  %v1_13a38 = inttoptr i32 %v0_13a38 to i32*
  store i32 %v2_13a34, i32* %v1_13a38, align 4
  %v3_13a38 = add i32 %v0_13a38, 4
  %v4_13a38 = inttoptr i32 %v3_13a38 to i32*
  %v5_13a38 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_13a38, i32* %v4_13a38, align 4
  %v0_13a3c = load i32, i32* @r4, align 4
  %v1_13a3c = add i32 %v0_13a3c, 8
  %v1_13a40 = inttoptr i32 %v1_13a3c to i32*
  %v2_13a40 = load i32, i32* %v1_13a40, align 4
  %v3_13a40 = add i32 %v0_13a3c, 12
  %v4_13a40 = inttoptr i32 %v3_13a40 to i32*
  %v5_13a40 = load i32, i32* %v4_13a40, align 4
  store i32 %v5_13a40, i32* %r3.global-to-local, align 4
  %v1_13a44 = load i32, i32* @r5, align 4
  %v2_13a44 = add i32 %v1_13a44, 8
  %v3_13a44 = inttoptr i32 %v2_13a44 to i32*
  store i32 %v2_13a40, i32* %v3_13a44, align 4
  %v0_13a48 = load i32, i32* %r3.global-to-local, align 4
  %v1_13a48 = load i32, i32* @r5, align 4
  %v2_13a48 = add i32 %v1_13a48, 12
  %v3_13a48 = inttoptr i32 %v2_13a48 to i32*
  store i32 %v0_13a48, i32* %v3_13a48, align 4
  %v0_13a4c = load i32, i32* @r4, align 4
  %v1_13a4c = add i32 %v0_13a4c, 18
  %v2_13a4c = inttoptr i32 %v1_13a4c to i8*
  %v3_13a4c = load i8, i8* %v2_13a4c, align 1
  %v4_13a4c = zext i8 %v3_13a4c to i32
  store i32 %v4_13a4c, i32* %r3.global-to-local, align 4
  %v2_13a50 = load i32, i32* @r5, align 4
  %v3_13a50 = add i32 %v2_13a50, 18
  %v4_13a50 = inttoptr i32 %v3_13a50 to i8*
  store i8 %v3_13a4c, i8* %v4_13a50, align 1
  %v0_13a54 = load i32, i32* @r4, align 4
  %v1_13a54 = add i32 %v0_13a54, 16
  %v2_13a54 = inttoptr i32 %v1_13a54 to i8*
  %v3_13a54 = load i8, i8* %v2_13a54, align 1
  %v4_13a54 = zext i8 %v3_13a54 to i32
  %v0_13a58 = load i32, i32* %r7.global-to-local, align 4
  %v1_13a58 = add i32 %v0_13a58, 1
  %v2_13a58 = inttoptr i32 %v1_13a58 to i8*
  %v3_13a58 = load i8, i8* %v2_13a58, align 1
  %v4_13a58 = zext i8 %v3_13a58 to i32
  store i32 %v4_13a58, i32* %r3.global-to-local, align 4
  %v4_13a5c = mul nuw nsw i32 %v4_13a58, 256
  %v5_13a5c = or i32 %v4_13a5c, %v4_13a54
  %v1_13a60 = add nsw i32 %v5_13a5c, -19
  store i32 %v1_13a60, i32* @r2, align 4
  %v3_13a64 = call i32 @function_12410(i32 %v1_13a8c, i32 %v1_13a90, i32 %v1_13a60)
  %v0_13a68 = load i32, i32* @r4, align 4
  %v1_13a68 = add i32 %v0_13a68, 16
  %v2_13a68 = inttoptr i32 %v1_13a68 to i8*
  %v3_13a68 = load i8, i8* %v2_13a68, align 1
  %v4_13a68 = zext i8 %v3_13a68 to i32
  store i32 %v4_13a68, i32* %r3.global-to-local, align 4
  %v0_13a6c = load i32, i32* %r7.global-to-local, align 4
  %v1_13a6c = add i32 %v0_13a6c, 1
  %v2_13a6c = inttoptr i32 %v1_13a6c to i8*
  %v3_13a6c = load i8, i8* %v2_13a6c, align 1
  %v4_13a6c = zext i8 %v3_13a6c to i32
  %v4_13a70 = mul nuw nsw i32 %v4_13a6c, 256
  %v5_13a70 = or i32 %v4_13a70, %v4_13a68
  store i32 %v5_13a70, i32* %r3.global-to-local, align 4
  %v2_13a74 = add i32 %v5_13a70, %v0_13a68
  store i32 %v2_13a74, i32* @r4, align 4
  %v0_13a78 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_13a78, i32* @r5, align 4
  %v1_13a7c.pre = load i32, i32* @r6, align 4
  %v0_13a94.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_13a7c

dec_label_pc_13a7c:                               ; preds = %dec_label_pc_139ac, %dec_label_pc_13a1c
  %stack_var_-52.0 = phi i32 [ -1, %dec_label_pc_139ac ], [ %v2_13a28, %dec_label_pc_13a1c ]
  %v0_13a94 = phi i32 [ %v0_139b4, %dec_label_pc_139ac ], [ %v0_13a94.pre, %dec_label_pc_13a1c ]
  %v2_13a1c = phi i32 [ %v0_139b4, %dec_label_pc_139ac ], [ %v0_13a78, %dec_label_pc_13a1c ]
  %v0_139cc = phi i32 [ %v0_139b8, %dec_label_pc_139ac ], [ %v2_13a74, %dec_label_pc_13a1c ]
  %v1_13a7c = phi i32 [ %v5_13978, %dec_label_pc_139ac ], [ %v1_13a7c.pre, %dec_label_pc_13a1c ]
  %stack_var_-48.0 = phi i32 [ -1, %dec_label_pc_139ac ], [ %v5_13a28, %dec_label_pc_13a1c ]
  %v0_13a7c = load i32, i32* %sl.global-to-local, align 4
  %v2_13a7c = add i32 %v0_13a7c, %v1_13a7c
  store i32 %v2_13a7c, i32* %r3.global-to-local, align 4
  %v3_13a80 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_13a80, i32* @r2, align 4
  %v3_13a84 = icmp ult i32 %v0_139cc, %v2_13a7c
  %v1_13a88 = add i32 %v0_139cc, 16
  store i32 %v1_13a88, i32* %r7.global-to-local, align 4
  %v1_13a8c = add i32 %v2_13a1c, 19
  store i32 %v1_13a8c, i32* @r0, align 4
  %v1_13a90 = add i32 %v0_139cc, 19
  store i32 %v1_13a90, i32* @r1, align 4
  br i1 %v3_13a84, label %dec_label_pc_139c8, label %dec_label_pc_13a9c

dec_label_pc_13a9c:                               ; preds = %dec_label_pc_13a7c, %dec_label_pc_139ec
  %v1_13a9c = phi i32 [ %v0_13a00, %dec_label_pc_139ec ], [ %v2_13a1c, %dec_label_pc_13a7c ]
  %v0_13a9c = phi i32 [ %v1_13a00, %dec_label_pc_139ec ], [ %v0_13a94, %dec_label_pc_13a7c ]
  %v2_13a9c = sub i32 %v1_13a9c, %v0_13a9c
  store i32 %v2_13a9c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13aa0

dec_label_pc_13aa0:                               ; preds = %dec_label_pc_13a08, %dec_label_pc_139a4, %dec_label_pc_13a9c
  %v0_13aa0 = phi i32 [ %v0_13aa0.pre, %dec_label_pc_13a08 ], [ %v0_139a4, %dec_label_pc_139a4 ], [ %v2_13a9c, %dec_label_pc_13a9c ]
  store i32 %v3_1394c, i32* @r4, align 4
  store i32 %v9_1394c, i32* %r6.global-to-local, align 4
  ret i32 %v0_13aa0

; uselistorder directives
  uselistorder i32 %v1_13a90, { 1, 0 }
  uselistorder i32 %v1_13a8c, { 1, 0 }
  uselistorder i32 %v1_13a88, { 1, 0 }
  uselistorder i32 %v3_13a80, { 1, 0 }
  uselistorder i32 %v0_139cc, { 2, 1, 3, 0 }
  uselistorder i32 %v2_13a1c, { 0, 3, 1, 2 }
  uselistorder i32 %v0_13a24, { 1, 0, 2, 3 }
  uselistorder i32 %v0_139b4, { 1, 0, 2 }
  uselistorder i32 %v5_13978, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_12410, { 3, 1, 0, 2, 5, 4 }
  uselistorder i32 128, { 4, 5, 26, 6, 27, 17, 9, 10, 11, 18, 0, 19, 12, 13, 14, 15, 16, 22, 1, 20, 2, 21, 3, 7, 8, 23, 24, 25 }
  uselistorder i32* @sp, { 4, 2, 1, 3, 0 }
  uselistorder i32* @r6, { 3, 190, 191, 192, 230, 231, 405, 406, 407, 408, 409, 410, 411, 413, 412, 428, 429, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 22, 23, 51, 131, 132, 133, 134, 42, 135, 136, 24, 137, 47, 138, 139, 140, 141, 142, 143, 25, 26, 27, 28, 29, 43, 48, 13, 14, 15, 16, 17, 18, 19, 20, 21, 52, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 53, 54, 55, 56, 49, 50, 144, 145, 146, 147, 148, 57, 58, 149, 150, 10, 151, 152, 153, 154, 155, 156, 157, 158, 159, 4, 166, 2, 167, 168, 1, 169, 170, 430, 431, 432, 234, 235, 236, 237, 0, 160, 161, 162, 163, 164, 165, 171, 172, 173, 174, 5, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 211, 212, 213, 214, 11, 215, 216, 217, 6, 218, 219, 238, 7, 239, 8, 240, 9, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 220, 223, 221, 222, 224, 225, 12, 226, 227, 228, 229, 232, 233 }
  uselistorder label %dec_label_pc_13aa0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13a7c, { 1, 0 }
}

define i32 @function_13aac() local_unnamed_addr {
dec_label_pc_13aac:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13aac = load i32, i32* @r4, align 4
  store i32 %v3_13aac, i32* %stack_var_-8, align 4
  %v0_13ab4 = load i32, i32* @r0, align 4
  store i32 %v0_13ab4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13ab4, -4095
  br i1 %tmp, label %dec_label_pc_13ad0, label %dec_label_pc_13ac0

dec_label_pc_13ac0:                               ; preds = %dec_label_pc_13aac
  %v0_13ac0 = call i32 @function_123d0()
  %v0_13ac4 = load i32, i32* %r4.global-to-local, align 4
  %v1_13ac4 = sub i32 0, %v0_13ac4
  %v2_13ac8 = inttoptr i32 %v0_13ac0 to i32*
  store i32 %v1_13ac4, i32* %v2_13ac8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13ad4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13ad0

dec_label_pc_13ad0:                               ; preds = %dec_label_pc_13aac, %dec_label_pc_13ac0
  %v2_13ad4 = phi i32 [ %v3_13aac, %dec_label_pc_13aac ], [ %v2_13ad4.pre, %dec_label_pc_13ac0 ]
  %v0_13ad0 = phi i32 [ %v0_13ab4, %dec_label_pc_13aac ], [ -1, %dec_label_pc_13ac0 ]
  store i32 %v2_13ad4, i32* @r4, align 4
  ret i32 %v0_13ad0

; uselistorder directives
  uselistorder i32 %v0_13ab4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13ad0, { 1, 0 }
}

define i32 @function_13ad8() local_unnamed_addr {
dec_label_pc_13ad8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13ad8 = load i32, i32* @r4, align 4
  store i32 %v3_13ad8, i32* %stack_var_-8, align 4
  %v0_13ae0 = load i32, i32* @r0, align 4
  store i32 %v0_13ae0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13ae0, -4095
  br i1 %tmp, label %dec_label_pc_13afc, label %dec_label_pc_13aec

dec_label_pc_13aec:                               ; preds = %dec_label_pc_13ad8
  %v0_13aec = call i32 @function_123d0()
  %v0_13af0 = load i32, i32* %r4.global-to-local, align 4
  %v1_13af0 = sub i32 0, %v0_13af0
  %v2_13af4 = inttoptr i32 %v0_13aec to i32*
  store i32 %v1_13af0, i32* %v2_13af4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13b00.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13afc

dec_label_pc_13afc:                               ; preds = %dec_label_pc_13ad8, %dec_label_pc_13aec
  %v2_13b00 = phi i32 [ %v3_13ad8, %dec_label_pc_13ad8 ], [ %v2_13b00.pre, %dec_label_pc_13aec ]
  %v0_13afc = phi i32 [ %v0_13ae0, %dec_label_pc_13ad8 ], [ -1, %dec_label_pc_13aec ]
  store i32 %v2_13b00, i32* @r4, align 4
  ret i32 %v0_13afc

; uselistorder directives
  uselistorder i32 %v0_13ae0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13afc, { 1, 0 }
}

define i32 @function_13b04(i32 %arg1) local_unnamed_addr {
dec_label_pc_13b04:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13b04 = load i32, i32* @r4, align 4
  store i32 %v3_13b04, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13b28, label %dec_label_pc_13b18

dec_label_pc_13b18:                               ; preds = %dec_label_pc_13b04
  %v0_13b18 = call i32 @function_123d0()
  %v0_13b1c = load i32, i32* %r4.global-to-local, align 4
  %v1_13b1c = sub i32 0, %v0_13b1c
  %v2_13b20 = inttoptr i32 %v0_13b18 to i32*
  store i32 %v1_13b1c, i32* %v2_13b20, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13b2c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13b28

dec_label_pc_13b28:                               ; preds = %dec_label_pc_13b04, %dec_label_pc_13b18
  %v2_13b2c = phi i32 [ %v3_13b04, %dec_label_pc_13b04 ], [ %v2_13b2c.pre, %dec_label_pc_13b18 ]
  %v0_13b28 = phi i32 [ %arg1, %dec_label_pc_13b04 ], [ -1, %dec_label_pc_13b18 ]
  store i32 %v2_13b2c, i32* %r4.global-to-local, align 4
  ret i32 %v0_13b28

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13b28, { 1, 0 }
}

define i32 @function_13b30() local_unnamed_addr {
dec_label_pc_13b30:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13b30 = load i32, i32* @r4, align 4
  store i32 %v3_13b30, i32* %stack_var_-8, align 4
  %v0_13b38 = load i32, i32* @r0, align 4
  store i32 %v0_13b38, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13b38, -4095
  br i1 %tmp, label %dec_label_pc_13b54, label %dec_label_pc_13b44

dec_label_pc_13b44:                               ; preds = %dec_label_pc_13b30
  %v0_13b44 = call i32 @function_123d0()
  %v0_13b48 = load i32, i32* %r4.global-to-local, align 4
  %v1_13b48 = sub i32 0, %v0_13b48
  %v2_13b4c = inttoptr i32 %v0_13b44 to i32*
  store i32 %v1_13b48, i32* %v2_13b4c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13b58.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13b54

dec_label_pc_13b54:                               ; preds = %dec_label_pc_13b30, %dec_label_pc_13b44
  %v2_13b58 = phi i32 [ %v3_13b30, %dec_label_pc_13b30 ], [ %v2_13b58.pre, %dec_label_pc_13b44 ]
  %v0_13b54 = phi i32 [ %v0_13b38, %dec_label_pc_13b30 ], [ -1, %dec_label_pc_13b44 ]
  store i32 %v2_13b58, i32* %r4.global-to-local, align 4
  ret i32 %v0_13b54

; uselistorder directives
  uselistorder i32 %v0_13b38, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13b54, { 1, 0 }
}

define i32 @function_13b5c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13b5c:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13ba0, label %dec_label_pc_13b8c

dec_label_pc_13b8c:                               ; preds = %dec_label_pc_13b5c
  %v0_13b8c = call i32 @function_123d0()
  %v0_13b90 = load i32, i32* %r4.global-to-local, align 4
  %v1_13b90 = sub i32 0, %v0_13b90
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13b98 = inttoptr i32 %v0_13b8c to i32*
  store i32 %v1_13b90, i32* %v2_13b98, align 4
  %v0_13ba8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13ba8

dec_label_pc_13ba0:                               ; preds = %dec_label_pc_13b5c
  %v2_13ba0 = icmp eq i32 %arg1, 0
  br i1 %v2_13ba0, label %dec_label_pc_13bb4, label %dec_label_pc_13ba8

dec_label_pc_13ba8:                               ; preds = %dec_label_pc_13ba0, %dec_label_pc_13b8c
  %v0_13ba8 = phi i32 [ %arg1, %dec_label_pc_13ba0 ], [ %v0_13ba8.pre, %dec_label_pc_13b8c ]
  br label %dec_label_pc_13bb8

dec_label_pc_13bb4:                               ; preds = %dec_label_pc_13ba0
  br label %dec_label_pc_13bb8

dec_label_pc_13bb8:                               ; preds = %dec_label_pc_13ba8, %dec_label_pc_13bb4
  %v14_13bbc = phi i32 [ %v0_13ba8, %dec_label_pc_13ba8 ], [ %tmp9, %dec_label_pc_13bb4 ]
  ret i32 %v14_13bbc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_13bb8, { 1, 0 }
}

define i32 @function_13bc0(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13bc0:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_13bc0 = load i32, i32* @r4, align 4
  store i32 %v3_13bc0, i32* %stack_var_-8, align 4
  %v6_13bc4 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_13bc4, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_13bc4, -4095
  br i1 %tmp6, label %dec_label_pc_13be4, label %dec_label_pc_13bd4

dec_label_pc_13bd4:                               ; preds = %dec_label_pc_13bc0
  %v0_13bd4 = call i32 @function_123d0()
  %v0_13bd8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13bd8 = sub i32 0, %v0_13bd8
  %v2_13bdc = inttoptr i32 %v0_13bd4 to i32*
  store i32 %v1_13bd8, i32* %v2_13bdc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13be4

dec_label_pc_13be4:                               ; preds = %dec_label_pc_13bc0, %dec_label_pc_13bd4
  %v0_13be4 = phi i32 [ %v6_13bc4, %dec_label_pc_13bc0 ], [ -1, %dec_label_pc_13bd4 ]
  %v2_13be8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13be8, i32* %r4.global-to-local, align 4
  ret i32 %v0_13be4

; uselistorder directives
  uselistorder i32 %v6_13bc4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13be4, { 1, 0 }
}

define i32 @function_13bec(i32 %arg1) local_unnamed_addr {
dec_label_pc_13bec:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13bec = load i32, i32* @r4, align 4
  store i32 %v3_13bec, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1d230.496 to i32), i32* %r4.global-to-local, align 4
  %v2_13bf4 = load i32, i32* @global_var_1d230.496, align 4
  %v2_13bf8 = icmp eq i32 %v2_13bf4, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_13bf8, label %dec_label_pc_13c08, label %dec_label_pc_13c14

dec_label_pc_13c08:                               ; preds = %dec_label_pc_13bec
  %v2_13c08 = call i32 @function_14608(i32* null)
  %v1_13c0c = icmp slt i32 %v2_13c08, 0
  br i1 %v1_13c0c, label %dec_label_pc_13c34, label %dec_label_pc_13c14thread-pre-split

dec_label_pc_13c14thread-pre-split:               ; preds = %dec_label_pc_13c08
  %v0_13c18.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_13c14.pre = load i32, i32* @global_var_1d230.496, align 4
  br label %dec_label_pc_13c14

dec_label_pc_13c14:                               ; preds = %dec_label_pc_13c14thread-pre-split, %dec_label_pc_13bec
  %v2_13c14 = phi i32 [ %v2_13c14.pre, %dec_label_pc_13c14thread-pre-split ], [ %v2_13bf4, %dec_label_pc_13bec ]
  %v1_13c20 = phi i32 [ %v0_13c18.pr, %dec_label_pc_13c14thread-pre-split ], [ %arg1, %dec_label_pc_13bec ]
  %v2_13c18 = icmp eq i32 %v1_13c20, 0
  store i32 %v2_13c14, i32* %r4.global-to-local, align 4
  br i1 %v2_13c18, label %dec_label_pc_13c38, label %dec_label_pc_13c28

dec_label_pc_13c28:                               ; preds = %dec_label_pc_13c14
  %v2_13c20 = add i32 %v1_13c20, %v2_13c14
  %v1_13c28 = inttoptr i32 %v2_13c20 to i32*
  %v2_13c28 = call i32 @function_14608(i32* %v1_13c28)
  %v1_13c2c = icmp slt i32 %v2_13c28, 0
  br i1 %v1_13c2c, label %dec_label_pc_13c34, label %dec_label_pc_13c28.dec_label_pc_13c38_crit_edge

dec_label_pc_13c28.dec_label_pc_13c38_crit_edge:  ; preds = %dec_label_pc_13c28
  %v0_13c38.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13c38

dec_label_pc_13c34:                               ; preds = %dec_label_pc_13c28, %dec_label_pc_13c08
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13c38

dec_label_pc_13c38:                               ; preds = %dec_label_pc_13c28.dec_label_pc_13c38_crit_edge, %dec_label_pc_13c14, %dec_label_pc_13c34
  %v0_13c38 = phi i32 [ %v0_13c38.pre, %dec_label_pc_13c28.dec_label_pc_13c38_crit_edge ], [ %v2_13c14, %dec_label_pc_13c14 ], [ -1, %dec_label_pc_13c34 ]
  %v2_13c3c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13c3c, i32* @r4, align 4
  ret i32 %v0_13c38

; uselistorder directives
  uselistorder i32 %v2_13c14, { 1, 0, 2 }
  uselistorder i32* null, { 0, 4, 6, 24, 25, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 19, 20, 21, 2, 22, 3, 23 }
  uselistorder label %dec_label_pc_13c38, { 2, 0, 1 }
}

define i32 @function_13c44(%tms* %arg1) local_unnamed_addr {
dec_label_pc_13c44:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13c44 = load i32, i32* @r4, align 4
  store i32 %v3_13c44, i32* %stack_var_-8, align 4
  %v3_13c48 = call i32 @times(%tms* %arg1)
  store i32 %v3_13c48, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_13c48, -4095
  br i1 %tmp, label %dec_label_pc_13c68, label %dec_label_pc_13c58

dec_label_pc_13c58:                               ; preds = %dec_label_pc_13c44
  %v0_13c58 = call i32 @function_123d0()
  %v0_13c5c = load i32, i32* %r4.global-to-local, align 4
  %v1_13c5c = sub i32 0, %v0_13c5c
  %v2_13c60 = inttoptr i32 %v0_13c58 to i32*
  store i32 %v1_13c5c, i32* %v2_13c60, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13c68

dec_label_pc_13c68:                               ; preds = %dec_label_pc_13c44, %dec_label_pc_13c58
  %v0_13c68 = phi i32 [ %v3_13c48, %dec_label_pc_13c44 ], [ -1, %dec_label_pc_13c58 ]
  %v2_13c6c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13c6c, i32* %r4.global-to-local, align 4
  ret i32 %v0_13c68

; uselistorder directives
  uselistorder i32 %v3_13c48, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13c68, { 1, 0 }
}

define i32 @function_13c70(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13c70:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 96, i32* @r2, align 4
  %v2_13c8c = inttoptr i32 %arg2 to i8*
  %v3_13c8c = call i32 @function_12430(i8* %v2_13c8c, i32 0)
  %v1_13c90 = add i32 %tmp, 1
  %v2_13c90 = inttoptr i32 %v1_13c90 to i8*
  %v3_13c90 = load i8, i8* %v2_13c90, align 1
  %v4_13c90 = zext i8 %v3_13c90 to i32
  %v1_13c94 = add i32 %tmp, 5
  %v2_13c94 = inttoptr i32 %v1_13c94 to i8*
  %v3_13c94 = load i8, i8* %v2_13c94, align 1
  %v4_13c94 = zext i8 %v3_13c94 to i32
  %v2_13c98 = load i8, i8* %arg1, align 1
  %v3_13c98 = zext i8 %v2_13c98 to i32
  %v1_13c9c = add i32 %tmp, 4
  %v2_13c9c = inttoptr i32 %v1_13c9c to i8*
  %v3_13c9c = load i8, i8* %v2_13c9c, align 1
  %v4_13c9c = zext i8 %v3_13c9c to i32
  %v1_13ca0 = add i32 %tmp, 2
  %v2_13ca0 = inttoptr i32 %v1_13ca0 to i8*
  %v3_13ca0 = load i8, i8* %v2_13ca0, align 1
  %v4_13ca0 = zext i8 %v3_13ca0 to i32
  %v1_13ca4 = add i32 %tmp, 6
  %v2_13ca4 = inttoptr i32 %v1_13ca4 to i8*
  %v3_13ca4 = load i8, i8* %v2_13ca4, align 1
  %v4_13ca4 = zext i8 %v3_13ca4 to i32
  %v1_13ca8 = add i32 %tmp, 3
  %v2_13ca8 = inttoptr i32 %v1_13ca8 to i8*
  %v3_13ca8 = load i8, i8* %v2_13ca8, align 1
  %v4_13ca8 = zext i8 %v3_13ca8 to i32
  %v4_13cac = mul nuw nsw i32 %v4_13c90, 256
  %v5_13cac = or i32 %v3_13c98, %v4_13cac
  %v4_13cb0 = mul nuw nsw i32 %v4_13c94, 256
  %v5_13cb0 = or i32 %v4_13c9c, %v4_13cb0
  %v1_13cb4 = add i32 %tmp, 7
  %v2_13cb4 = inttoptr i32 %v1_13cb4 to i8*
  %v3_13cb4 = load i8, i8* %v2_13cb4, align 1
  %v4_13cb4 = zext i8 %v3_13cb4 to i32
  %v4_13cb8 = mul nuw nsw i32 %v4_13ca0, 65536
  %v5_13cb8 = or i32 %v4_13cb8, %v5_13cac
  %v4_13cbc = mul nuw nsw i32 %v4_13ca4, 65536
  %v5_13cbc = or i32 %v4_13cbc, %v5_13cb0
  %v4_13cc0 = mul nuw i32 %v4_13ca8, 16777216
  %v5_13cc0 = or i32 %v4_13cc0, %v5_13cb8
  %v4_13cc4 = mul nuw i32 %v4_13cb4, 16777216
  %v5_13cc4 = or i32 %v4_13cc4, %v5_13cbc
  store i32 %v5_13cc4, i32* %r3.global-to-local, align 4
  %v0_13cc8 = load i32, i32* %r7.global-to-local, align 4
  %v1_13cc8 = inttoptr i32 %v0_13cc8 to i32*
  store i32 %v5_13cc0, i32* %v1_13cc8, align 4
  %v3_13cc8 = add i32 %v0_13cc8, 4
  %v4_13cc8 = inttoptr i32 %v3_13cc8 to i32*
  %v5_13cc8 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_13cc8, i32* %v4_13cc8, align 4
  %v0_13ccc = load i32, i32* %r4.global-to-local, align 4
  %v1_13ccc = add i32 %v0_13ccc, 89
  %v2_13ccc = inttoptr i32 %v1_13ccc to i8*
  %v3_13ccc = load i8, i8* %v2_13ccc, align 1
  %v4_13ccc = zext i8 %v3_13ccc to i32
  %v1_13cd0 = add i32 %v0_13ccc, 93
  %v2_13cd0 = inttoptr i32 %v1_13cd0 to i8*
  %v3_13cd0 = load i8, i8* %v2_13cd0, align 1
  %v4_13cd0 = zext i8 %v3_13cd0 to i32
  %v1_13cd4 = add i32 %v0_13ccc, 88
  %v2_13cd4 = inttoptr i32 %v1_13cd4 to i8*
  %v3_13cd4 = load i8, i8* %v2_13cd4, align 1
  %v4_13cd4 = zext i8 %v3_13cd4 to i32
  %v1_13cd8 = add i32 %v0_13ccc, 92
  %v2_13cd8 = inttoptr i32 %v1_13cd8 to i8*
  %v3_13cd8 = load i8, i8* %v2_13cd8, align 1
  %v4_13cd8 = zext i8 %v3_13cd8 to i32
  store i32 %v4_13cd8, i32* %r3.global-to-local, align 4
  %v1_13cdc = add i32 %v0_13ccc, 94
  %v2_13cdc = inttoptr i32 %v1_13cdc to i8*
  %v3_13cdc = load i8, i8* %v2_13cdc, align 1
  %v4_13cdc = zext i8 %v3_13cdc to i32
  %v1_13ce0 = add i32 %v0_13ccc, 90
  %v2_13ce0 = inttoptr i32 %v1_13ce0 to i8*
  %v3_13ce0 = load i8, i8* %v2_13ce0, align 1
  %v4_13ce0 = zext i8 %v3_13ce0 to i32
  %v1_13ce4 = add i32 %v0_13ccc, 91
  %v2_13ce4 = inttoptr i32 %v1_13ce4 to i8*
  %v3_13ce4 = load i8, i8* %v2_13ce4, align 1
  %v4_13ce4 = zext i8 %v3_13ce4 to i32
  %v4_13ce8 = mul nuw nsw i32 %v4_13ccc, 256
  %v5_13ce8 = or i32 %v4_13cd4, %v4_13ce8
  %v4_13cec = mul nuw nsw i32 %v4_13cd0, 256
  %v5_13cec = or i32 %v4_13cd8, %v4_13cec
  store i32 %v5_13cec, i32* %r3.global-to-local, align 4
  %v1_13cf0 = add i32 %v0_13ccc, 95
  %v2_13cf0 = inttoptr i32 %v1_13cf0 to i8*
  %v3_13cf0 = load i8, i8* %v2_13cf0, align 1
  %v4_13cf0 = zext i8 %v3_13cf0 to i32
  %v4_13cf4 = mul nuw nsw i32 %v4_13cdc, 65536
  %v5_13cf4 = or i32 %v4_13cf4, %v5_13cec
  store i32 %v5_13cf4, i32* %r3.global-to-local, align 4
  %v4_13cf8 = mul nuw nsw i32 %v4_13ce0, 65536
  %v5_13cf8 = or i32 %v4_13cf8, %v5_13ce8
  %v4_13cfc = mul nuw i32 %v4_13ce4, 16777216
  %v5_13cfc = or i32 %v4_13cfc, %v5_13cf8
  %v4_13d00 = mul nuw i32 %v4_13cf0, 16777216
  %v5_13d00 = or i32 %v4_13d00, %v5_13cf4
  store i32 %v5_13d00, i32* %r6.global-to-local, align 4
  %v1_13d04 = load i32, i32* %r7.global-to-local, align 4
  %v2_13d04 = add i32 %v1_13d04, 88
  %v3_13d04 = inttoptr i32 %v2_13d04 to i32*
  store i32 %v5_13cfc, i32* %v3_13d04, align 4
  %v0_13d08 = load i32, i32* %r6.global-to-local, align 4
  %v1_13d08 = load i32, i32* %r7.global-to-local, align 4
  %v2_13d08 = add i32 %v1_13d08, 92
  %v3_13d08 = inttoptr i32 %v2_13d08 to i32*
  store i32 %v0_13d08, i32* %v3_13d08, align 4
  %v0_13d0c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d0c = add i32 %v0_13d0c, 13
  %v2_13d0c = inttoptr i32 %v1_13d0c to i8*
  %v3_13d0c = load i8, i8* %v2_13d0c, align 1
  %v4_13d0c = zext i8 %v3_13d0c to i32
  %v1_13d10 = add i32 %v0_13d0c, 12
  %v2_13d10 = inttoptr i32 %v1_13d10 to i8*
  %v3_13d10 = load i8, i8* %v2_13d10, align 1
  %v4_13d10 = zext i8 %v3_13d10 to i32
  store i32 %v4_13d10, i32* %r3.global-to-local, align 4
  %v1_13d14 = add i32 %v0_13d0c, 14
  %v2_13d14 = inttoptr i32 %v1_13d14 to i8*
  %v3_13d14 = load i8, i8* %v2_13d14, align 1
  %v4_13d14 = zext i8 %v3_13d14 to i32
  %v4_13d18 = mul nuw nsw i32 %v4_13d0c, 256
  %v5_13d18 = or i32 %v4_13d10, %v4_13d18
  store i32 %v5_13d18, i32* %r3.global-to-local, align 4
  %v1_13d1c = add i32 %v0_13d0c, 15
  %v2_13d1c = inttoptr i32 %v1_13d1c to i8*
  %v3_13d1c = load i8, i8* %v2_13d1c, align 1
  %v4_13d1c = zext i8 %v3_13d1c to i32
  %v4_13d20 = mul nuw nsw i32 %v4_13d14, 65536
  %v5_13d20 = or i32 %v4_13d20, %v5_13d18
  %v4_13d24 = mul nuw i32 %v4_13d1c, 16777216
  %v5_13d24 = or i32 %v5_13d20, %v4_13d24
  store i32 %v5_13d24, i32* %r3.global-to-local, align 4
  %v1_13d28 = load i32, i32* %r7.global-to-local, align 4
  %v2_13d28 = add i32 %v1_13d28, 12
  %v3_13d28 = inttoptr i32 %v2_13d28 to i32*
  store i32 %v5_13d24, i32* %v3_13d28, align 4
  %v0_13d2c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d2c = add i32 %v0_13d2c, 17
  %v2_13d2c = inttoptr i32 %v1_13d2c to i8*
  %v3_13d2c = load i8, i8* %v2_13d2c, align 1
  %v4_13d2c = zext i8 %v3_13d2c to i32
  %v1_13d30 = add i32 %v0_13d2c, 16
  %v2_13d30 = inttoptr i32 %v1_13d30 to i8*
  %v3_13d30 = load i8, i8* %v2_13d30, align 1
  %v4_13d30 = zext i8 %v3_13d30 to i32
  store i32 %v4_13d30, i32* %r3.global-to-local, align 4
  %v1_13d34 = add i32 %v0_13d2c, 18
  %v2_13d34 = inttoptr i32 %v1_13d34 to i8*
  %v3_13d34 = load i8, i8* %v2_13d34, align 1
  %v4_13d34 = zext i8 %v3_13d34 to i32
  %v4_13d38 = mul nuw nsw i32 %v4_13d2c, 256
  %v5_13d38 = or i32 %v4_13d30, %v4_13d38
  store i32 %v5_13d38, i32* %r3.global-to-local, align 4
  %v1_13d3c = add i32 %v0_13d2c, 19
  %v2_13d3c = inttoptr i32 %v1_13d3c to i8*
  %v3_13d3c = load i8, i8* %v2_13d3c, align 1
  %v4_13d3c = zext i8 %v3_13d3c to i32
  %v4_13d40 = mul nuw nsw i32 %v4_13d34, 65536
  %v5_13d40 = or i32 %v4_13d40, %v5_13d38
  %v4_13d44 = mul nuw i32 %v4_13d3c, 16777216
  %v5_13d44 = or i32 %v5_13d40, %v4_13d44
  store i32 %v5_13d44, i32* %r3.global-to-local, align 4
  %v1_13d48 = load i32, i32* %r7.global-to-local, align 4
  %v2_13d48 = add i32 %v1_13d48, 16
  %v3_13d48 = inttoptr i32 %v2_13d48 to i32*
  store i32 %v5_13d44, i32* %v3_13d48, align 4
  %v0_13d4c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d4c = add i32 %v0_13d4c, 21
  %v2_13d4c = inttoptr i32 %v1_13d4c to i8*
  %v3_13d4c = load i8, i8* %v2_13d4c, align 1
  %v4_13d4c = zext i8 %v3_13d4c to i32
  %v1_13d50 = add i32 %v0_13d4c, 20
  %v2_13d50 = inttoptr i32 %v1_13d50 to i8*
  %v3_13d50 = load i8, i8* %v2_13d50, align 1
  %v4_13d50 = zext i8 %v3_13d50 to i32
  store i32 %v4_13d50, i32* %r3.global-to-local, align 4
  %v1_13d54 = add i32 %v0_13d4c, 22
  %v2_13d54 = inttoptr i32 %v1_13d54 to i8*
  %v3_13d54 = load i8, i8* %v2_13d54, align 1
  %v4_13d54 = zext i8 %v3_13d54 to i32
  %v4_13d58 = mul nuw nsw i32 %v4_13d4c, 256
  %v5_13d58 = or i32 %v4_13d50, %v4_13d58
  store i32 %v5_13d58, i32* %r3.global-to-local, align 4
  %v1_13d5c = add i32 %v0_13d4c, 23
  %v2_13d5c = inttoptr i32 %v1_13d5c to i8*
  %v3_13d5c = load i8, i8* %v2_13d5c, align 1
  %v4_13d5c = zext i8 %v3_13d5c to i32
  %v4_13d60 = mul nuw nsw i32 %v4_13d54, 65536
  %v5_13d60 = or i32 %v4_13d60, %v5_13d58
  %v4_13d64 = mul nuw i32 %v4_13d5c, 16777216
  %v5_13d64 = or i32 %v5_13d60, %v4_13d64
  store i32 %v5_13d64, i32* %r3.global-to-local, align 4
  %v1_13d68 = load i32, i32* %r7.global-to-local, align 4
  %v2_13d68 = add i32 %v1_13d68, 20
  %v3_13d68 = inttoptr i32 %v2_13d68 to i32*
  store i32 %v5_13d64, i32* %v3_13d68, align 4
  %v0_13d6c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d6c = add i32 %v0_13d6c, 25
  %v2_13d6c = inttoptr i32 %v1_13d6c to i8*
  %v3_13d6c = load i8, i8* %v2_13d6c, align 1
  %v4_13d6c = zext i8 %v3_13d6c to i32
  %v1_13d70 = add i32 %v0_13d6c, 24
  %v2_13d70 = inttoptr i32 %v1_13d70 to i8*
  %v3_13d70 = load i8, i8* %v2_13d70, align 1
  %v4_13d70 = zext i8 %v3_13d70 to i32
  store i32 %v4_13d70, i32* %r3.global-to-local, align 4
  %v1_13d74 = add i32 %v0_13d6c, 26
  %v2_13d74 = inttoptr i32 %v1_13d74 to i8*
  %v3_13d74 = load i8, i8* %v2_13d74, align 1
  %v4_13d74 = zext i8 %v3_13d74 to i32
  %v4_13d78 = mul nuw nsw i32 %v4_13d6c, 256
  %v5_13d78 = or i32 %v4_13d70, %v4_13d78
  store i32 %v5_13d78, i32* %r3.global-to-local, align 4
  %v1_13d7c = add i32 %v0_13d6c, 27
  %v2_13d7c = inttoptr i32 %v1_13d7c to i8*
  %v3_13d7c = load i8, i8* %v2_13d7c, align 1
  %v4_13d7c = zext i8 %v3_13d7c to i32
  %v4_13d80 = mul nuw nsw i32 %v4_13d74, 65536
  %v5_13d80 = or i32 %v4_13d80, %v5_13d78
  %v4_13d84 = mul nuw i32 %v4_13d7c, 16777216
  %v5_13d84 = or i32 %v5_13d80, %v4_13d84
  store i32 %v5_13d84, i32* %r3.global-to-local, align 4
  %v1_13d88 = load i32, i32* %r7.global-to-local, align 4
  %v2_13d88 = add i32 %v1_13d88, 24
  %v3_13d88 = inttoptr i32 %v2_13d88 to i32*
  store i32 %v5_13d84, i32* %v3_13d88, align 4
  %v0_13d8c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d8c = add i32 %v0_13d8c, 29
  %v2_13d8c = inttoptr i32 %v1_13d8c to i8*
  %v3_13d8c = load i8, i8* %v2_13d8c, align 1
  %v4_13d8c = zext i8 %v3_13d8c to i32
  %v1_13d90 = add i32 %v0_13d8c, 28
  %v2_13d90 = inttoptr i32 %v1_13d90 to i8*
  %v3_13d90 = load i8, i8* %v2_13d90, align 1
  %v4_13d90 = zext i8 %v3_13d90 to i32
  store i32 %v4_13d90, i32* %r3.global-to-local, align 4
  %v1_13d94 = add i32 %v0_13d8c, 30
  %v2_13d94 = inttoptr i32 %v1_13d94 to i8*
  %v3_13d94 = load i8, i8* %v2_13d94, align 1
  %v4_13d94 = zext i8 %v3_13d94 to i32
  %v4_13d98 = mul nuw nsw i32 %v4_13d8c, 256
  %v5_13d98 = or i32 %v4_13d90, %v4_13d98
  store i32 %v5_13d98, i32* %r3.global-to-local, align 4
  %v1_13d9c = add i32 %v0_13d8c, 31
  %v2_13d9c = inttoptr i32 %v1_13d9c to i8*
  %v3_13d9c = load i8, i8* %v2_13d9c, align 1
  %v4_13d9c = zext i8 %v3_13d9c to i32
  %v4_13da0 = mul nuw nsw i32 %v4_13d94, 65536
  %v5_13da0 = or i32 %v4_13da0, %v5_13d98
  %v4_13da4 = mul nuw i32 %v4_13d9c, 16777216
  %v5_13da4 = or i32 %v5_13da0, %v4_13da4
  store i32 %v5_13da4, i32* %r3.global-to-local, align 4
  %v1_13da8 = load i32, i32* %r7.global-to-local, align 4
  %v2_13da8 = add i32 %v1_13da8, 28
  %v3_13da8 = inttoptr i32 %v2_13da8 to i32*
  store i32 %v5_13da4, i32* %v3_13da8, align 4
  %v0_13dac = load i32, i32* %r4.global-to-local, align 4
  %v1_13dac = add i32 %v0_13dac, 33
  %v2_13dac = inttoptr i32 %v1_13dac to i8*
  %v3_13dac = load i8, i8* %v2_13dac, align 1
  %v4_13dac = zext i8 %v3_13dac to i32
  %v1_13db0 = add i32 %v0_13dac, 37
  %v2_13db0 = inttoptr i32 %v1_13db0 to i8*
  %v3_13db0 = load i8, i8* %v2_13db0, align 1
  %v4_13db0 = zext i8 %v3_13db0 to i32
  %v1_13db4 = add i32 %v0_13dac, 32
  %v2_13db4 = inttoptr i32 %v1_13db4 to i8*
  %v3_13db4 = load i8, i8* %v2_13db4, align 1
  %v4_13db4 = zext i8 %v3_13db4 to i32
  %v1_13db8 = add i32 %v0_13dac, 36
  %v2_13db8 = inttoptr i32 %v1_13db8 to i8*
  %v3_13db8 = load i8, i8* %v2_13db8, align 1
  %v4_13db8 = zext i8 %v3_13db8 to i32
  store i32 %v4_13db8, i32* %r3.global-to-local, align 4
  %v1_13dbc = add i32 %v0_13dac, 34
  %v2_13dbc = inttoptr i32 %v1_13dbc to i8*
  %v3_13dbc = load i8, i8* %v2_13dbc, align 1
  %v4_13dbc = zext i8 %v3_13dbc to i32
  %v1_13dc0 = add i32 %v0_13dac, 38
  %v2_13dc0 = inttoptr i32 %v1_13dc0 to i8*
  %v3_13dc0 = load i8, i8* %v2_13dc0, align 1
  %v4_13dc0 = zext i8 %v3_13dc0 to i32
  %v1_13dc4 = add i32 %v0_13dac, 35
  %v2_13dc4 = inttoptr i32 %v1_13dc4 to i8*
  %v3_13dc4 = load i8, i8* %v2_13dc4, align 1
  %v4_13dc4 = zext i8 %v3_13dc4 to i32
  %v4_13dc8 = mul nuw nsw i32 %v4_13dac, 256
  %v5_13dc8 = or i32 %v4_13db4, %v4_13dc8
  %v4_13dcc = mul nuw nsw i32 %v4_13db0, 256
  %v5_13dcc = or i32 %v4_13db8, %v4_13dcc
  store i32 %v5_13dcc, i32* %r3.global-to-local, align 4
  %v1_13dd0 = add i32 %v0_13dac, 39
  %v2_13dd0 = inttoptr i32 %v1_13dd0 to i8*
  %v3_13dd0 = load i8, i8* %v2_13dd0, align 1
  %v4_13dd0 = zext i8 %v3_13dd0 to i32
  %v4_13dd4 = mul nuw nsw i32 %v4_13dbc, 65536
  %v5_13dd4 = or i32 %v4_13dd4, %v5_13dc8
  %v4_13dd8 = mul nuw nsw i32 %v4_13dc0, 65536
  %v5_13dd8 = or i32 %v4_13dd8, %v5_13dcc
  %v4_13ddc = mul nuw i32 %v4_13dc4, 16777216
  %v5_13ddc = or i32 %v5_13dd4, %v4_13ddc
  %v4_13de0 = mul nuw i32 %v4_13dd0, 16777216
  %v5_13de0 = or i32 %v5_13dd8, %v4_13de0
  store i32 %v5_13de0, i32* %r3.global-to-local, align 4
  %v1_13df4 = load i32, i32* %r7.global-to-local, align 4
  %v2_13df4 = add i32 %v1_13df4, 32
  %v3_13df4 = inttoptr i32 %v2_13df4 to i32*
  store i32 %v5_13ddc, i32* %v3_13df4, align 4
  %v0_13df8 = load i32, i32* %r3.global-to-local, align 4
  %v1_13df8 = load i32, i32* %r7.global-to-local, align 4
  %v2_13df8 = add i32 %v1_13df8, 36
  %v3_13df8 = inttoptr i32 %v2_13df8 to i32*
  store i32 %v0_13df8, i32* %v3_13df8, align 4
  %v0_13dfc = load i32, i32* %r4.global-to-local, align 4
  %v1_13dfc = add i32 %v0_13dfc, 45
  %v2_13dfc = inttoptr i32 %v1_13dfc to i8*
  %v3_13dfc = load i8, i8* %v2_13dfc, align 1
  %v4_13dfc = zext i8 %v3_13dfc to i32
  %v1_13e00 = add i32 %v0_13dfc, 49
  %v2_13e00 = inttoptr i32 %v1_13e00 to i8*
  %v3_13e00 = load i8, i8* %v2_13e00, align 1
  %v4_13e00 = zext i8 %v3_13e00 to i32
  %v1_13e04 = add i32 %v0_13dfc, 44
  %v2_13e04 = inttoptr i32 %v1_13e04 to i8*
  %v3_13e04 = load i8, i8* %v2_13e04, align 1
  %v4_13e04 = zext i8 %v3_13e04 to i32
  %v1_13e08 = add i32 %v0_13dfc, 48
  %v2_13e08 = inttoptr i32 %v1_13e08 to i8*
  %v3_13e08 = load i8, i8* %v2_13e08, align 1
  %v4_13e08 = zext i8 %v3_13e08 to i32
  store i32 %v4_13e08, i32* %r3.global-to-local, align 4
  %v1_13e0c = add i32 %v0_13dfc, 46
  %v2_13e0c = inttoptr i32 %v1_13e0c to i8*
  %v3_13e0c = load i8, i8* %v2_13e0c, align 1
  %v4_13e0c = zext i8 %v3_13e0c to i32
  %v1_13e10 = add i32 %v0_13dfc, 50
  %v2_13e10 = inttoptr i32 %v1_13e10 to i8*
  %v3_13e10 = load i8, i8* %v2_13e10, align 1
  %v4_13e10 = zext i8 %v3_13e10 to i32
  %v1_13e14 = add i32 %v0_13dfc, 47
  %v2_13e14 = inttoptr i32 %v1_13e14 to i8*
  %v3_13e14 = load i8, i8* %v2_13e14, align 1
  %v4_13e14 = zext i8 %v3_13e14 to i32
  %v4_13e18 = mul nuw nsw i32 %v4_13dfc, 256
  %v5_13e18 = or i32 %v4_13e04, %v4_13e18
  %v4_13e1c = mul nuw nsw i32 %v4_13e00, 256
  %v5_13e1c = or i32 %v4_13e08, %v4_13e1c
  store i32 %v5_13e1c, i32* %r3.global-to-local, align 4
  %v1_13e20 = add i32 %v0_13dfc, 51
  %v2_13e20 = inttoptr i32 %v1_13e20 to i8*
  %v3_13e20 = load i8, i8* %v2_13e20, align 1
  %v4_13e20 = zext i8 %v3_13e20 to i32
  %v4_13e24 = mul nuw nsw i32 %v4_13e0c, 65536
  %v5_13e24 = or i32 %v4_13e24, %v5_13e18
  %v4_13e28 = mul nuw nsw i32 %v4_13e10, 65536
  %v5_13e28 = or i32 %v4_13e28, %v5_13e1c
  %v4_13e2c = mul nuw i32 %v4_13e14, 16777216
  %v5_13e2c = or i32 %v5_13e24, %v4_13e2c
  %v4_13e30 = mul nuw i32 %v4_13e20, 16777216
  %v5_13e30 = or i32 %v5_13e28, %v4_13e30
  store i32 %v5_13e30, i32* %r3.global-to-local, align 4
  %v1_13e44 = load i32, i32* %r7.global-to-local, align 4
  %v2_13e44 = add i32 %v1_13e44, 44
  %v3_13e44 = inttoptr i32 %v2_13e44 to i32*
  store i32 %v5_13e2c, i32* %v3_13e44, align 4
  %v0_13e48 = load i32, i32* %r3.global-to-local, align 4
  %v1_13e48 = load i32, i32* %r7.global-to-local, align 4
  %v2_13e48 = add i32 %v1_13e48, 48
  %v3_13e48 = inttoptr i32 %v2_13e48 to i32*
  store i32 %v0_13e48, i32* %v3_13e48, align 4
  %v0_13e4c = load i32, i32* %r4.global-to-local, align 4
  %v1_13e4c = add i32 %v0_13e4c, 53
  %v2_13e4c = inttoptr i32 %v1_13e4c to i8*
  %v3_13e4c = load i8, i8* %v2_13e4c, align 1
  %v4_13e4c = zext i8 %v3_13e4c to i32
  %v1_13e50 = add i32 %v0_13e4c, 52
  %v2_13e50 = inttoptr i32 %v1_13e50 to i8*
  %v3_13e50 = load i8, i8* %v2_13e50, align 1
  %v4_13e50 = zext i8 %v3_13e50 to i32
  store i32 %v4_13e50, i32* %r3.global-to-local, align 4
  %v1_13e54 = add i32 %v0_13e4c, 54
  %v2_13e54 = inttoptr i32 %v1_13e54 to i8*
  %v3_13e54 = load i8, i8* %v2_13e54, align 1
  %v4_13e54 = zext i8 %v3_13e54 to i32
  %v4_13e58 = mul nuw nsw i32 %v4_13e4c, 256
  %v5_13e58 = or i32 %v4_13e50, %v4_13e58
  store i32 %v5_13e58, i32* %r3.global-to-local, align 4
  %v1_13e5c = add i32 %v0_13e4c, 55
  %v2_13e5c = inttoptr i32 %v1_13e5c to i8*
  %v3_13e5c = load i8, i8* %v2_13e5c, align 1
  %v4_13e5c = zext i8 %v3_13e5c to i32
  %v4_13e60 = mul nuw nsw i32 %v4_13e54, 65536
  %v5_13e60 = or i32 %v4_13e60, %v5_13e58
  %v4_13e64 = mul nuw i32 %v4_13e5c, 16777216
  %v5_13e64 = or i32 %v5_13e60, %v4_13e64
  store i32 %v5_13e64, i32* %r3.global-to-local, align 4
  %v1_13e68 = load i32, i32* %r7.global-to-local, align 4
  %v2_13e68 = add i32 %v1_13e68, 52
  %v3_13e68 = inttoptr i32 %v2_13e68 to i32*
  store i32 %v5_13e64, i32* %v3_13e68, align 4
  %v0_13e6c = load i32, i32* %r4.global-to-local, align 4
  %v1_13e6c = add i32 %v0_13e6c, 57
  %v2_13e6c = inttoptr i32 %v1_13e6c to i8*
  %v3_13e6c = load i8, i8* %v2_13e6c, align 1
  %v4_13e6c = zext i8 %v3_13e6c to i32
  %v1_13e70 = add i32 %v0_13e6c, 56
  %v2_13e70 = inttoptr i32 %v1_13e70 to i8*
  %v3_13e70 = load i8, i8* %v2_13e70, align 1
  %v4_13e70 = zext i8 %v3_13e70 to i32
  %v1_13e74 = add i32 %v0_13e6c, 60
  %v2_13e74 = inttoptr i32 %v1_13e74 to i8*
  %v3_13e74 = load i8, i8* %v2_13e74, align 1
  %v4_13e74 = zext i8 %v3_13e74 to i32
  store i32 %v4_13e74, i32* %r3.global-to-local, align 4
  %v1_13e78 = add i32 %v0_13e6c, 61
  %v2_13e78 = inttoptr i32 %v1_13e78 to i8*
  %v3_13e78 = load i8, i8* %v2_13e78, align 1
  %v4_13e78 = zext i8 %v3_13e78 to i32
  %v1_13e7c = add i32 %v0_13e6c, 58
  %v2_13e7c = inttoptr i32 %v1_13e7c to i8*
  %v3_13e7c = load i8, i8* %v2_13e7c, align 1
  %v4_13e7c = zext i8 %v3_13e7c to i32
  %v1_13e80 = add i32 %v0_13e6c, 62
  %v2_13e80 = inttoptr i32 %v1_13e80 to i8*
  %v3_13e80 = load i8, i8* %v2_13e80, align 1
  %v4_13e80 = zext i8 %v3_13e80 to i32
  %v1_13e84 = add i32 %v0_13e6c, 59
  %v2_13e84 = inttoptr i32 %v1_13e84 to i8*
  %v3_13e84 = load i8, i8* %v2_13e84, align 1
  %v4_13e84 = zext i8 %v3_13e84 to i32
  %v4_13e88 = mul nuw nsw i32 %v4_13e6c, 256
  %v5_13e88 = or i32 %v4_13e70, %v4_13e88
  %v4_13e8c = mul nuw nsw i32 %v4_13e78, 256
  %v5_13e8c = or i32 %v4_13e8c, %v4_13e74
  store i32 %v5_13e8c, i32* %r3.global-to-local, align 4
  %v1_13e90 = add i32 %v0_13e6c, 63
  %v2_13e90 = inttoptr i32 %v1_13e90 to i8*
  %v3_13e90 = load i8, i8* %v2_13e90, align 1
  %v4_13e90 = zext i8 %v3_13e90 to i32
  %v4_13e94 = mul nuw nsw i32 %v4_13e7c, 65536
  %v5_13e94 = or i32 %v4_13e94, %v5_13e88
  %v4_13e98 = mul nuw nsw i32 %v4_13e80, 65536
  %v5_13e98 = or i32 %v4_13e98, %v5_13e8c
  %v4_13e9c = mul nuw i32 %v4_13e90, 16777216
  %v5_13e9c = or i32 %v5_13e98, %v4_13e9c
  %v4_13ea0 = mul nuw i32 %v4_13e84, 16777216
  %v5_13ea0 = or i32 %v5_13e94, %v4_13ea0
  store i32 %v5_13e9c, i32* %r3.global-to-local, align 4
  %v1_13eb0 = load i32, i32* %r7.global-to-local, align 4
  %v2_13eb0 = add i32 %v1_13eb0, 56
  %v3_13eb0 = inttoptr i32 %v2_13eb0 to i32*
  store i32 %v5_13ea0, i32* %v3_13eb0, align 4
  %v0_13eb4 = load i32, i32* %r3.global-to-local, align 4
  %v1_13eb4 = load i32, i32* %r7.global-to-local, align 4
  %v2_13eb4 = add i32 %v1_13eb4, 60
  %v3_13eb4 = inttoptr i32 %v2_13eb4 to i32*
  store i32 %v0_13eb4, i32* %v3_13eb4, align 4
  %v0_13eb8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13eb8 = add i32 %v0_13eb8, 65
  %v2_13eb8 = inttoptr i32 %v1_13eb8 to i8*
  %v3_13eb8 = load i8, i8* %v2_13eb8, align 1
  %v4_13eb8 = zext i8 %v3_13eb8 to i32
  %v1_13ebc = add i32 %v0_13eb8, 64
  %v2_13ebc = inttoptr i32 %v1_13ebc to i8*
  %v3_13ebc = load i8, i8* %v2_13ebc, align 1
  %v4_13ebc = zext i8 %v3_13ebc to i32
  store i32 %v4_13ebc, i32* %r3.global-to-local, align 4
  %v1_13ec0 = add i32 %v0_13eb8, 66
  %v2_13ec0 = inttoptr i32 %v1_13ec0 to i8*
  %v3_13ec0 = load i8, i8* %v2_13ec0, align 1
  %v4_13ec0 = zext i8 %v3_13ec0 to i32
  %v4_13ec4 = mul nuw nsw i32 %v4_13eb8, 256
  %v5_13ec4 = or i32 %v4_13ebc, %v4_13ec4
  store i32 %v5_13ec4, i32* %r3.global-to-local, align 4
  %v1_13ec8 = add i32 %v0_13eb8, 67
  %v2_13ec8 = inttoptr i32 %v1_13ec8 to i8*
  %v3_13ec8 = load i8, i8* %v2_13ec8, align 1
  %v4_13ec8 = zext i8 %v3_13ec8 to i32
  %v4_13ecc = mul nuw nsw i32 %v4_13ec0, 65536
  %v5_13ecc = or i32 %v4_13ecc, %v5_13ec4
  %v4_13ed0 = mul nuw i32 %v4_13ec8, 16777216
  %v5_13ed0 = or i32 %v5_13ecc, %v4_13ed0
  store i32 %v5_13ed0, i32* %r3.global-to-local, align 4
  %v1_13ed4 = load i32, i32* %r7.global-to-local, align 4
  %v2_13ed4 = add i32 %v1_13ed4, 64
  %v3_13ed4 = inttoptr i32 %v2_13ed4 to i32*
  store i32 %v5_13ed0, i32* %v3_13ed4, align 4
  %v0_13ed8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13ed8 = add i32 %v0_13ed8, 73
  %v2_13ed8 = inttoptr i32 %v1_13ed8 to i8*
  %v3_13ed8 = load i8, i8* %v2_13ed8, align 1
  %v4_13ed8 = zext i8 %v3_13ed8 to i32
  %v1_13edc = add i32 %v0_13ed8, 72
  %v2_13edc = inttoptr i32 %v1_13edc to i8*
  %v3_13edc = load i8, i8* %v2_13edc, align 1
  %v4_13edc = zext i8 %v3_13edc to i32
  store i32 %v4_13edc, i32* %r3.global-to-local, align 4
  %v1_13ee0 = add i32 %v0_13ed8, 74
  %v2_13ee0 = inttoptr i32 %v1_13ee0 to i8*
  %v3_13ee0 = load i8, i8* %v2_13ee0, align 1
  %v4_13ee0 = zext i8 %v3_13ee0 to i32
  %v4_13ee4 = mul nuw nsw i32 %v4_13ed8, 256
  %v5_13ee4 = or i32 %v4_13edc, %v4_13ee4
  store i32 %v5_13ee4, i32* %r3.global-to-local, align 4
  %v1_13ee8 = add i32 %v0_13ed8, 75
  %v2_13ee8 = inttoptr i32 %v1_13ee8 to i8*
  %v3_13ee8 = load i8, i8* %v2_13ee8, align 1
  %v4_13ee8 = zext i8 %v3_13ee8 to i32
  %v4_13eec = mul nuw nsw i32 %v4_13ee0, 65536
  %v5_13eec = or i32 %v4_13eec, %v5_13ee4
  %v4_13ef0 = mul nuw i32 %v4_13ee8, 16777216
  %v5_13ef0 = or i32 %v5_13eec, %v4_13ef0
  store i32 %v5_13ef0, i32* %r3.global-to-local, align 4
  %v1_13ef4 = load i32, i32* %r7.global-to-local, align 4
  %v2_13ef4 = add i32 %v1_13ef4, 72
  %v3_13ef4 = inttoptr i32 %v2_13ef4 to i32*
  store i32 %v5_13ef0, i32* %v3_13ef4, align 4
  %v0_13ef8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13ef8 = add i32 %v0_13ef8, 81
  %v2_13ef8 = inttoptr i32 %v1_13ef8 to i8*
  %v3_13ef8 = load i8, i8* %v2_13ef8, align 1
  %v4_13ef8 = zext i8 %v3_13ef8 to i32
  %v1_13efc = add i32 %v0_13ef8, 80
  %v2_13efc = inttoptr i32 %v1_13efc to i8*
  %v3_13efc = load i8, i8* %v2_13efc, align 1
  %v4_13efc = zext i8 %v3_13efc to i32
  store i32 %v4_13efc, i32* %r3.global-to-local, align 4
  %v1_13f00 = add i32 %v0_13ef8, 82
  %v2_13f00 = inttoptr i32 %v1_13f00 to i8*
  %v3_13f00 = load i8, i8* %v2_13f00, align 1
  %v4_13f00 = zext i8 %v3_13f00 to i32
  %v4_13f04 = mul nuw nsw i32 %v4_13ef8, 256
  %v5_13f04 = or i32 %v4_13efc, %v4_13f04
  store i32 %v5_13f04, i32* %r3.global-to-local, align 4
  %v1_13f08 = add i32 %v0_13ef8, 83
  %v2_13f08 = inttoptr i32 %v1_13f08 to i8*
  %v3_13f08 = load i8, i8* %v2_13f08, align 1
  %v4_13f08 = zext i8 %v3_13f08 to i32
  %v4_13f0c = mul nuw nsw i32 %v4_13f00, 65536
  %v5_13f0c = or i32 %v4_13f0c, %v5_13f04
  %v4_13f10 = mul nuw i32 %v4_13f08, 16777216
  %v5_13f10 = or i32 %v5_13f0c, %v4_13f10
  store i32 %v5_13f10, i32* %r3.global-to-local, align 4
  %v1_13f14 = load i32, i32* %r7.global-to-local, align 4
  %v2_13f14 = add i32 %v1_13f14, 80
  %v3_13f14 = inttoptr i32 %v2_13f14 to i32*
  store i32 %v5_13f10, i32* %v3_13f14, align 4
  %v0_13f18 = load i32, i32* %r4.global-to-local, align 4
  %v1_13f18 = add i32 %v0_13f18, 69
  %v2_13f18 = inttoptr i32 %v1_13f18 to i8*
  %v3_13f18 = load i8, i8* %v2_13f18, align 1
  %v4_13f18 = zext i8 %v3_13f18 to i32
  %v1_13f1c = add i32 %v0_13f18, 68
  %v2_13f1c = inttoptr i32 %v1_13f1c to i8*
  %v3_13f1c = load i8, i8* %v2_13f1c, align 1
  %v4_13f1c = zext i8 %v3_13f1c to i32
  store i32 %v4_13f1c, i32* %r3.global-to-local, align 4
  %v1_13f20 = add i32 %v0_13f18, 70
  %v2_13f20 = inttoptr i32 %v1_13f20 to i8*
  %v3_13f20 = load i8, i8* %v2_13f20, align 1
  %v4_13f20 = zext i8 %v3_13f20 to i32
  %v4_13f24 = mul nuw nsw i32 %v4_13f18, 256
  %v5_13f24 = or i32 %v4_13f1c, %v4_13f24
  store i32 %v5_13f24, i32* %r3.global-to-local, align 4
  %v1_13f28 = add i32 %v0_13f18, 71
  %v2_13f28 = inttoptr i32 %v1_13f28 to i8*
  %v3_13f28 = load i8, i8* %v2_13f28, align 1
  %v4_13f28 = zext i8 %v3_13f28 to i32
  %v4_13f2c = mul nuw nsw i32 %v4_13f20, 65536
  %v5_13f2c = or i32 %v4_13f2c, %v5_13f24
  %v4_13f30 = mul nuw i32 %v4_13f28, 16777216
  %v5_13f30 = or i32 %v5_13f2c, %v4_13f30
  store i32 %v5_13f30, i32* %r3.global-to-local, align 4
  %v1_13f34 = load i32, i32* %r7.global-to-local, align 4
  %v2_13f34 = add i32 %v1_13f34, 68
  %v3_13f34 = inttoptr i32 %v2_13f34 to i32*
  store i32 %v5_13f30, i32* %v3_13f34, align 4
  %v0_13f38 = load i32, i32* %r4.global-to-local, align 4
  %v1_13f38 = add i32 %v0_13f38, 77
  %v2_13f38 = inttoptr i32 %v1_13f38 to i8*
  %v3_13f38 = load i8, i8* %v2_13f38, align 1
  %v4_13f38 = zext i8 %v3_13f38 to i32
  %v1_13f3c = add i32 %v0_13f38, 76
  %v2_13f3c = inttoptr i32 %v1_13f3c to i8*
  %v3_13f3c = load i8, i8* %v2_13f3c, align 1
  %v4_13f3c = zext i8 %v3_13f3c to i32
  store i32 %v4_13f3c, i32* %r3.global-to-local, align 4
  %v1_13f40 = add i32 %v0_13f38, 78
  %v2_13f40 = inttoptr i32 %v1_13f40 to i8*
  %v3_13f40 = load i8, i8* %v2_13f40, align 1
  %v4_13f40 = zext i8 %v3_13f40 to i32
  %v4_13f44 = mul nuw nsw i32 %v4_13f38, 256
  %v5_13f44 = or i32 %v4_13f3c, %v4_13f44
  store i32 %v5_13f44, i32* %r3.global-to-local, align 4
  %v1_13f48 = add i32 %v0_13f38, 79
  %v2_13f48 = inttoptr i32 %v1_13f48 to i8*
  %v3_13f48 = load i8, i8* %v2_13f48, align 1
  %v4_13f48 = zext i8 %v3_13f48 to i32
  %v4_13f4c = mul nuw nsw i32 %v4_13f40, 65536
  %v5_13f4c = or i32 %v4_13f4c, %v5_13f44
  %v4_13f50 = mul nuw i32 %v4_13f48, 16777216
  %v5_13f50 = or i32 %v5_13f4c, %v4_13f50
  store i32 %v5_13f50, i32* %r3.global-to-local, align 4
  %v1_13f54 = load i32, i32* %r7.global-to-local, align 4
  %v2_13f54 = add i32 %v1_13f54, 76
  %v3_13f54 = inttoptr i32 %v2_13f54 to i32*
  store i32 %v5_13f50, i32* %v3_13f54, align 4
  %v0_13f58 = load i32, i32* %r4.global-to-local, align 4
  %v1_13f58 = add i32 %v0_13f58, 85
  %v2_13f58 = inttoptr i32 %v1_13f58 to i8*
  %v3_13f58 = load i8, i8* %v2_13f58, align 1
  %v4_13f58 = zext i8 %v3_13f58 to i32
  %v1_13f5c = add i32 %v0_13f58, 84
  %v2_13f5c = inttoptr i32 %v1_13f5c to i8*
  %v3_13f5c = load i8, i8* %v2_13f5c, align 1
  %v4_13f5c = zext i8 %v3_13f5c to i32
  store i32 %v4_13f5c, i32* %r3.global-to-local, align 4
  %v1_13f60 = add i32 %v0_13f58, 86
  %v2_13f60 = inttoptr i32 %v1_13f60 to i8*
  %v3_13f60 = load i8, i8* %v2_13f60, align 1
  %v4_13f60 = zext i8 %v3_13f60 to i32
  %v4_13f64 = mul nuw nsw i32 %v4_13f58, 256
  %v5_13f64 = or i32 %v4_13f5c, %v4_13f64
  store i32 %v5_13f64, i32* %r3.global-to-local, align 4
  %v1_13f68 = add i32 %v0_13f58, 87
  %v2_13f68 = inttoptr i32 %v1_13f68 to i8*
  %v3_13f68 = load i8, i8* %v2_13f68, align 1
  %v4_13f68 = zext i8 %v3_13f68 to i32
  %v4_13f6c = mul nuw nsw i32 %v4_13f60, 65536
  %v5_13f6c = or i32 %v4_13f6c, %v5_13f64
  %v4_13f70 = mul nuw i32 %v4_13f68, 16777216
  %v5_13f70 = or i32 %v5_13f6c, %v4_13f70
  store i32 %v5_13f70, i32* %r3.global-to-local, align 4
  %v1_13f74 = load i32, i32* %r7.global-to-local, align 4
  %v2_13f74 = add i32 %v1_13f74, 84
  %v3_13f74 = inttoptr i32 %v2_13f74 to i32*
  store i32 %v5_13f70, i32* %v3_13f74, align 4
  ret i32 %v4_13e78

; uselistorder directives
  uselistorder i32 %v4_13e78, { 1, 0 }
  uselistorder i32 %v0_13e6c, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_13dfc, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_13dac, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_13ccc, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %tmp, { 6, 5, 3, 4, 2, 1, 0, 7 }
  uselistorder i32* %r7.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 1, 2, 21 }
  uselistorder i32* %r4.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 16 }
  uselistorder i32* %r3.global-to-local, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 69, { 1, 0 }
  uselistorder i32 62, { 1, 2, 0 }
  uselistorder i32 61, { 1, 0 }
  uselistorder i32 55, { 2, 4, 0, 3, 1 }
  uselistorder i32 54, { 1, 0 }
  uselistorder i32 53, { 1, 2, 0, 3 }
  uselistorder i32 47, { 1, 2, 3, 4, 0 }
  uselistorder i32 50, { 1, 0 }
  uselistorder i32 39, { 1, 2, 0 }
  uselistorder i32 35, { 3, 0, 1, 2 }
  uselistorder i32 38, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 34, { 3, 0, 1, 2 }
  uselistorder i32 33, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32 30, { 7, 2, 8, 3, 9, 4, 10, 1, 11, 0, 12, 5, 6 }
  uselistorder i32 29, { 4, 5, 6, 3, 0, 1, 2 }
  uselistorder i32 26, { 5, 0, 1, 6, 2, 7, 3, 8, 4, 9 }
  uselistorder i32 25, { 9, 17, 18, 8, 10, 11, 2, 3, 12, 0, 13, 4, 14, 1, 15, 5, 6, 16, 7, 19 }
  uselistorder i32 23, { 7, 0, 1, 8, 2, 3, 4, 5, 6 }
  uselistorder i32 22, { 11, 1, 14, 2, 3, 4, 5, 0, 12, 6, 7, 8, 9, 13, 10 }
  uselistorder i32 21, { 9, 3, 2, 10, 11, 12, 8, 4, 5, 6, 7, 0, 1 }
  uselistorder i32 19, { 7, 11, 12, 13, 3, 8, 0, 9, 10, 4, 5, 6, 14, 1, 15, 2, 16 }
  uselistorder i32 18, { 5, 6, 7, 8, 4, 9, 0, 10, 1, 11, 2, 12, 3, 13 }
  uselistorder i32 17, { 18, 23, 0, 4, 24, 25, 5, 26, 27, 6, 1, 19, 7, 20, 21, 22, 8, 9, 10, 11, 12, 13, 28, 14, 29, 15, 30, 16, 31, 17, 32, 33, 2, 34, 35, 36, 3, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i32 6, { 32, 39, 16, 17, 84, 18, 2, 19, 3, 20, 4, 22, 33, 23, 34, 24, 35, 21, 36, 0, 25, 37, 38, 5, 6, 43, 44, 45, 7, 46, 47, 48, 49, 8, 50, 51, 52, 53, 9, 54, 10, 55, 56, 57, 26, 58, 11, 59, 60, 61, 27, 62, 12, 63, 64, 65, 28, 66, 67, 68, 29, 69, 13, 70, 71, 72, 73, 30, 74, 14, 75, 77, 78, 79, 80, 81, 31, 82, 15, 83, 1, 76, 40, 41, 42 }
  uselistorder i32 96, { 1, 0, 2, 3 }
}

define i32 @function_13f80(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13f80:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13f80 = load i32, i32* @r4, align 4
  store i32 %v3_13f80, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_13f98 = inttoptr i32 %arg2 to i8*
  %v3_13f98 = call i32 @function_12430(i8* %v2_13f98, i32 0)
  store i32 %v3_13f98, i32* %r0.global-to-local, align 4
  %v0_13f9c = load i32, i32* %r5.global-to-local, align 4
  %v1_13f9c = inttoptr i32 %v0_13f9c to i32*
  %v2_13f9c = load i32, i32* %v1_13f9c, align 4
  store i32 %v2_13f9c, i32* %r3.global-to-local, align 4
  %v1_13fa0 = add i32 %v0_13f9c, 4
  %v2_13fa0 = inttoptr i32 %v1_13fa0 to i32*
  %v3_13fa0 = load i32, i32* %v2_13fa0, align 4
  store i32 %v3_13fa0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_13fa8 = load i32, i32* %r6.global-to-local, align 4
  %v1_13fa8 = inttoptr i32 %v0_13fa8 to i32*
  store i32 %v2_13f9c, i32* %v1_13fa8, align 4
  %v3_13fa8 = add i32 %v0_13fa8, 4
  %v4_13fa8 = inttoptr i32 %v3_13fa8 to i32*
  %v5_13fa8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13fa8, i32* %v4_13fa8, align 4
  %v0_13fac = load i32, i32* %r2.global-to-local, align 4
  %v1_13fac = load i32, i32* %r6.global-to-local, align 4
  %v2_13fac = add i32 %v1_13fac, 12
  %v3_13fac = inttoptr i32 %v2_13fac to i32*
  store i32 %v0_13fac, i32* %v3_13fac, align 4
  %v0_13fb0 = load i32, i32* %r5.global-to-local, align 4
  %v1_13fb0 = add i32 %v0_13fb0, 9
  %v2_13fb0 = inttoptr i32 %v1_13fb0 to i8*
  %v3_13fb0 = load i8, i8* %v2_13fb0, align 1
  %v4_13fb0 = zext i8 %v3_13fb0 to i32
  store i32 %v4_13fb0, i32* %r2.global-to-local, align 4
  %v1_13fb4 = add i32 %v0_13fb0, 8
  %v2_13fb4 = inttoptr i32 %v1_13fb4 to i8*
  %v3_13fb4 = load i8, i8* %v2_13fb4, align 1
  %v4_13fb4 = zext i8 %v3_13fb4 to i32
  %v4_13fb8 = mul nuw nsw i32 %v4_13fb0, 256
  %v5_13fb8 = or i32 %v4_13fb4, %v4_13fb8
  store i32 %v5_13fb8, i32* %r3.global-to-local, align 4
  %v1_13fbc = load i32, i32* %r6.global-to-local, align 4
  %v2_13fbc = add i32 %v1_13fbc, 16
  %v3_13fbc = inttoptr i32 %v2_13fbc to i32*
  store i32 %v5_13fb8, i32* %v3_13fbc, align 4
  %v0_13fc0 = load i32, i32* %r5.global-to-local, align 4
  %v1_13fc0 = add i32 %v0_13fc0, 11
  %v2_13fc0 = inttoptr i32 %v1_13fc0 to i8*
  %v3_13fc0 = load i8, i8* %v2_13fc0, align 1
  %v4_13fc0 = zext i8 %v3_13fc0 to i32
  store i32 %v4_13fc0, i32* %r2.global-to-local, align 4
  %v1_13fc4 = add i32 %v0_13fc0, 10
  %v2_13fc4 = inttoptr i32 %v1_13fc4 to i8*
  %v3_13fc4 = load i8, i8* %v2_13fc4, align 1
  %v4_13fc4 = zext i8 %v3_13fc4 to i32
  %v4_13fc8 = mul nuw nsw i32 %v4_13fc0, 256
  %v5_13fc8 = or i32 %v4_13fc4, %v4_13fc8
  store i32 %v5_13fc8, i32* %r3.global-to-local, align 4
  %v1_13fcc = load i32, i32* %r6.global-to-local, align 4
  %v2_13fcc = add i32 %v1_13fcc, 20
  %v3_13fcc = inttoptr i32 %v2_13fcc to i32*
  store i32 %v5_13fc8, i32* %v3_13fcc, align 4
  %v0_13fd0 = load i32, i32* %r5.global-to-local, align 4
  %v1_13fd0 = add i32 %v0_13fd0, 13
  %v2_13fd0 = inttoptr i32 %v1_13fd0 to i8*
  %v3_13fd0 = load i8, i8* %v2_13fd0, align 1
  %v4_13fd0 = zext i8 %v3_13fd0 to i32
  store i32 %v4_13fd0, i32* %r2.global-to-local, align 4
  %v1_13fd4 = add i32 %v0_13fd0, 12
  %v2_13fd4 = inttoptr i32 %v1_13fd4 to i8*
  %v3_13fd4 = load i8, i8* %v2_13fd4, align 1
  %v4_13fd4 = zext i8 %v3_13fd4 to i32
  %v4_13fd8 = mul nuw nsw i32 %v4_13fd0, 256
  %v5_13fd8 = or i32 %v4_13fd4, %v4_13fd8
  store i32 %v5_13fd8, i32* %r3.global-to-local, align 4
  %v1_13fdc = load i32, i32* %r6.global-to-local, align 4
  %v2_13fdc = add i32 %v1_13fdc, 24
  %v3_13fdc = inttoptr i32 %v2_13fdc to i32*
  store i32 %v5_13fd8, i32* %v3_13fdc, align 4
  %v0_13fe0 = load i32, i32* %r5.global-to-local, align 4
  %v1_13fe0 = add i32 %v0_13fe0, 20
  %v2_13fe0 = inttoptr i32 %v1_13fe0 to i32*
  %v3_13fe0 = load i32, i32* %v2_13fe0, align 4
  store i32 %v3_13fe0, i32* %r3.global-to-local, align 4
  %v1_13fe4 = add i32 %v0_13fe0, 14
  %v2_13fe4 = inttoptr i32 %v1_13fe4 to i8*
  %v3_13fe4 = load i8, i8* %v2_13fe4, align 1
  %v4_13fe4 = zext i8 %v3_13fe4 to i32
  store i32 %v4_13fe4, i32* %r0.global-to-local, align 4
  %v1_13fe8 = add i32 %v0_13fe0, 15
  %v2_13fe8 = inttoptr i32 %v1_13fe8 to i8*
  %v3_13fe8 = load i8, i8* %v2_13fe8, align 1
  %v4_13fe8 = zext i8 %v3_13fe8 to i32
  store i32 %v4_13fe8, i32* %ip.global-to-local, align 4
  %v1_13fec = add i32 %v0_13fe0, 16
  %v2_13fec = inttoptr i32 %v1_13fec to i32*
  %v3_13fec = load i32, i32* %v2_13fec, align 4
  store i32 %v3_13fec, i32* %r1.global-to-local, align 4
  %v1_13ff0 = load i32, i32* %r6.global-to-local, align 4
  %v2_13ff0 = add i32 %v1_13ff0, 44
  %v3_13ff0 = inttoptr i32 %v2_13ff0 to i32*
  store i32 %v3_13fe0, i32* %v3_13ff0, align 4
  %v0_13ff4 = load i32, i32* %r5.global-to-local, align 4
  %v1_13ff4 = add i32 %v0_13ff4, 24
  %v2_13ff4 = inttoptr i32 %v1_13ff4 to i32*
  %v3_13ff4 = load i32, i32* %v2_13ff4, align 4
  store i32 %v3_13ff4, i32* %r3.global-to-local, align 4
  %v1_13ff8 = load i32, i32* %r6.global-to-local, align 4
  %v2_13ff8 = add i32 %v1_13ff8, 48
  %v3_13ff8 = inttoptr i32 %v2_13ff8 to i32*
  store i32 %v3_13ff4, i32* %v3_13ff8, align 4
  %v0_13ffc = load i32, i32* %r5.global-to-local, align 4
  %v1_13ffc = add i32 %v0_13ffc, 28
  %v2_13ffc = inttoptr i32 %v1_13ffc to i32*
  %v3_13ffc = load i32, i32* %v2_13ffc, align 4
  store i32 %v3_13ffc, i32* %r3.global-to-local, align 4
  %v1_14000 = load i32, i32* %r6.global-to-local, align 4
  %v2_14000 = add i32 %v1_14000, 52
  %v3_14000 = inttoptr i32 %v2_14000 to i32*
  store i32 %v3_13ffc, i32* %v3_14000, align 4
  %v0_14004 = load i32, i32* %r5.global-to-local, align 4
  %v1_14004 = add i32 %v0_14004, 32
  %v2_14004 = inttoptr i32 %v1_14004 to i32*
  %v3_14004 = load i32, i32* %v2_14004, align 4
  store i32 %v3_14004, i32* %r3.global-to-local, align 4
  %v1_14008 = load i32, i32* %r6.global-to-local, align 4
  %v2_14008 = add i32 %v1_14008, 56
  %v3_14008 = inttoptr i32 %v2_14008 to i32*
  store i32 %v3_14004, i32* %v3_14008, align 4
  %v0_1400c = load i32, i32* %r5.global-to-local, align 4
  %v1_1400c = add i32 %v0_1400c, 40
  %v2_1400c = inttoptr i32 %v1_1400c to i32*
  %v3_1400c = load i32, i32* %v2_1400c, align 4
  store i32 %v3_1400c, i32* %r3.global-to-local, align 4
  %v1_14010 = load i32, i32* %r6.global-to-local, align 4
  %v2_14010 = add i32 %v1_14010, 64
  %v3_14010 = inttoptr i32 %v2_14010 to i32*
  store i32 %v3_1400c, i32* %v3_14010, align 4
  %v0_14014 = load i32, i32* %r5.global-to-local, align 4
  %v1_14014 = add i32 %v0_14014, 48
  %v2_14014 = inttoptr i32 %v1_14014 to i32*
  %v3_14014 = load i32, i32* %v2_14014, align 4
  store i32 %v3_14014, i32* %r3.global-to-local, align 4
  %v1_14018 = load i32, i32* %r6.global-to-local, align 4
  %v2_14018 = add i32 %v1_14018, 72
  %v3_14018 = inttoptr i32 %v2_14018 to i32*
  store i32 %v3_14014, i32* %v3_14018, align 4
  %v0_1401c = load i32, i32* %r5.global-to-local, align 4
  %v1_1401c = add i32 %v0_1401c, 36
  %v2_1401c = inttoptr i32 %v1_1401c to i32*
  %v3_1401c = load i32, i32* %v2_1401c, align 4
  store i32 %v3_1401c, i32* %r3.global-to-local, align 4
  %v1_14020 = load i32, i32* %r6.global-to-local, align 4
  %v2_14020 = add i32 %v1_14020, 60
  %v3_14020 = inttoptr i32 %v2_14020 to i32*
  store i32 %v3_1401c, i32* %v3_14020, align 4
  %v0_14024 = load i32, i32* %r5.global-to-local, align 4
  %v1_14024 = add i32 %v0_14024, 44
  %v2_14024 = inttoptr i32 %v1_14024 to i32*
  %v3_14024 = load i32, i32* %v2_14024, align 4
  store i32 %v3_14024, i32* %r3.global-to-local, align 4
  %v0_14028 = load i32, i32* %r0.global-to-local, align 4
  %v1_14028 = load i32, i32* %ip.global-to-local, align 4
  %v4_14028 = mul i32 %v1_14028, 256
  %v5_14028 = or i32 %v4_14028, %v0_14028
  store i32 %v5_14028, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_14030 = load i32, i32* %r6.global-to-local, align 4
  %v2_14030 = add i32 %v1_14030, 28
  %v3_14030 = inttoptr i32 %v2_14030 to i32*
  store i32 %v5_14028, i32* %v3_14030, align 4
  %v0_14034 = load i32, i32* %r1.global-to-local, align 4
  %v1_14034 = load i32, i32* %r6.global-to-local, align 4
  %v2_14034 = add i32 %v1_14034, 32
  %v3_14034 = inttoptr i32 %v2_14034 to i32*
  store i32 %v0_14034, i32* %v3_14034, align 4
  %v0_14038 = load i32, i32* %r2.global-to-local, align 4
  %v1_14038 = load i32, i32* %r6.global-to-local, align 4
  %v2_14038 = add i32 %v1_14038, 36
  %v3_14038 = inttoptr i32 %v2_14038 to i32*
  store i32 %v0_14038, i32* %v3_14038, align 4
  %v0_1403c = load i32, i32* %r3.global-to-local, align 4
  %v1_1403c = load i32, i32* %r6.global-to-local, align 4
  %v2_1403c = add i32 %v1_1403c, 68
  %v3_1403c = inttoptr i32 %v2_1403c to i32*
  store i32 %v0_1403c, i32* %v3_1403c, align 4
  %v0_14040 = load i32, i32* %r5.global-to-local, align 4
  %v1_14040 = add i32 %v0_14040, 52
  %v2_14040 = inttoptr i32 %v1_14040 to i32*
  %v3_14040 = load i32, i32* %v2_14040, align 4
  store i32 %v3_14040, i32* %r3.global-to-local, align 4
  %v1_14044 = load i32, i32* %r6.global-to-local, align 4
  %v2_14044 = add i32 %v1_14044, 76
  %v3_14044 = inttoptr i32 %v2_14044 to i32*
  store i32 %v3_14040, i32* %v3_14044, align 4
  %v2_14048 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14048, i32* %r4.global-to-local, align 4
  ret i32 %v5_14028

; uselistorder directives
  uselistorder i32 %v0_13fe0, { 1, 0, 2, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder i32 76, { 2, 0, 1 }
  uselistorder i32 68, { 2, 0, 1 }
  uselistorder i32 60, { 3, 1, 2, 0, 4 }
  uselistorder i32 72, { 2, 0, 1 }
  uselistorder i32 64, { 15, 11, 12, 0, 8, 47, 13, 14, 16, 17, 9, 18, 19, 20, 1, 21, 22, 23, 2, 24, 25, 26, 10, 27, 28, 29, 3, 30, 31, 32, 4, 33, 34, 35, 5, 36, 37, 38, 39, 40, 6, 41, 42, 43, 44, 45, 7, 46 }
  uselistorder i32 56, { 3, 0, 1, 2, 4 }
  uselistorder i32 52, { 2, 3, 0, 1, 4, 5, 6 }
  uselistorder i32 15, { 30, 26, 25, 27, 3, 28, 4, 29, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 15, 16, 17, 18, 19, 20, 21, 22, 23, 31, 32, 24, 33, 34, 35, 36, 1, 37, 38, 39, 40, 2, 41 }
  uselistorder i32 14, { 11, 8, 23, 0, 9, 1, 7, 4, 10, 5, 12, 13, 6, 14, 15, 16, 17, 2, 18, 19, 20, 21, 3, 22 }
  uselistorder i32 13, { 15, 9, 8, 5, 2, 10, 11, 12, 13, 14, 0, 1, 16, 17, 18, 19, 20, 6, 21, 22, 23, 24, 25, 26, 27, 28, 7, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 3, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 4, 57, 58 }
  uselistorder i32 9, { 48, 49, 50, 7, 4, 51, 8, 5, 35, 27, 10, 34, 11, 30, 12, 31, 13, 32, 14, 33, 9, 2, 36, 28, 37, 38, 29, 15, 39, 16, 40, 17, 41, 42, 18, 43, 44, 19, 20, 21, 45, 22, 46, 23, 47, 0, 24, 1, 25, 65, 52, 53, 6, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 3, 64, 26 }
  uselistorder i32 (i8*, i32)* @function_12430, { 2, 0, 7, 6, 1, 3, 4, 5 }
  uselistorder i32 88, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
}

define i32 @function_14050() local_unnamed_addr {
dec_label_pc_14050:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_14050 = load i32, i32* @r1, align 4
  %v1_14050 = load i32, i32* @r0, align 4
  %v2_14050 = sub i32 %v0_14050, %v1_14050
  %v3_14050 = icmp ult i32 %v0_14050, %v1_14050
  %v4_14050 = xor i32 %v1_14050, %v0_14050
  %v5_14050 = xor i32 %v2_14050, %v0_14050
  %v6_14050 = and i32 %v5_14050, %v4_14050
  %v7_14050 = icmp slt i32 %v6_14050, 0
  store i1 %v7_14050, i1* %cpsr_v.global-to-local, align 1
  %v8_14050 = icmp slt i32 %v2_14050, 0
  store i1 %v8_14050, i1* %cpsr_n.global-to-local, align 1
  %v9_14050 = icmp eq i32 %v0_14050, %v1_14050
  store i1 %v9_14050, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14050, label %dec_label_pc_1429c, label %dec_label_pc_14058

dec_label_pc_14058:                               ; preds = %dec_label_pc_14050
  br i1 %v9_14050, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_14058
  %merge = phi i32 [ %v0_14050, %dec_label_pc_14058 ], [ %v2_14330, %bb141 ], [ %v11_1434c, %bb144 ], [ %v7_1434c, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_14058
  store i32 %v1_14050, i32* %stack_var_-8, align 4
  %v0_14060 = load i32, i32* @r2, align 4
  %v2_14060 = add i32 %v0_14060, -4
  store i32 %v2_14060, i32* %r2.global-to-local, align 4
  %v4_14060 = sub i32 3, %v0_14060
  %v5_14060 = and i32 %v4_14060, %v0_14060
  %v6_14060 = icmp slt i32 %v5_14060, 0
  store i1 %v6_14060, i1* %cpsr_v.global-to-local, align 1
  %v7_14060 = icmp slt i32 %v2_14060, 0
  store i1 %v7_14060, i1* %cpsr_n.global-to-local, align 1
  %v8_14060 = icmp eq i32 %v0_14060, 4
  store i1 %v8_14060, i1* %cpsr_z.global-to-local, align 1
  %v5_14064 = icmp slt i32 %v0_14060, 4
  br i1 %v5_14064, label %bb131, label %dec_label_pc_14068

dec_label_pc_14068:                               ; preds = %bb
  %v1_14068 = urem i32 %v1_14050, 4
  store i32 %v1_14068, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14068 = icmp eq i32 %v1_14068, 0
  store i1 %v2_14068, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14068, label %dec_label_pc_14070, label %dec_label_pc_14114

dec_label_pc_14070:                               ; preds = %dec_label_pc_14068
  %v1_14070 = urem i32 %v0_14050, 4
  store i32 %v1_14070, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14070 = icmp eq i32 %v1_14070, 0
  store i1 %v2_14070, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_14050 to i2
  br i1 %v2_14070, label %dec_label_pc_14078, label %dec_label_pc_14144

dec_label_pc_14078:                               ; preds = %dec_label_pc_14070, %dec_label_pc_1413c
  %v0_1409092 = phi i32 [ %v1_14050, %dec_label_pc_14070 ], [ %v0_1418c75, %dec_label_pc_1413c ]
  %v0_1408c91 = phi i32 [ %v0_14050, %dec_label_pc_14070 ], [ %v0_1413c, %dec_label_pc_1413c ]
  %v0_14078 = phi i32 [ %v2_14060, %dec_label_pc_14070 ], [ %v2_14134, %dec_label_pc_1413c ]
  %v2_14078 = add i32 %v0_14078, -8
  store i32 %v2_14078, i32* %r2.global-to-local, align 4
  %v4_14078 = sub i32 7, %v0_14078
  %v5_14078 = and i32 %v4_14078, %v0_14078
  %v6_14078 = icmp slt i32 %v5_14078, 0
  store i1 %v6_14078, i1* %cpsr_v.global-to-local, align 1
  %v7_14078 = icmp slt i32 %v2_14078, 0
  store i1 %v7_14078, i1* %cpsr_n.global-to-local, align 1
  %v8_14078 = icmp eq i32 %v0_14078, 8
  store i1 %v8_14078, i1* %cpsr_z.global-to-local, align 1
  %v5_1407c = icmp slt i32 %v0_14078, 8
  br i1 %v5_1407c, label %dec_label_pc_140cc, label %dec_label_pc_14080

dec_label_pc_14080:                               ; preds = %dec_label_pc_14078
  %v2_14080 = add i32 %v0_14078, -28
  store i32 %v2_14080, i32* %r2.global-to-local, align 4
  %v4_14080 = sub i32 27, %v0_14078
  %v5_14080 = and i32 %v4_14080, %v2_14078
  %v6_14080 = icmp slt i32 %v5_14080, 0
  store i1 %v6_14080, i1* %cpsr_v.global-to-local, align 1
  %v7_14080 = icmp slt i32 %v2_14080, 0
  store i1 %v7_14080, i1* %cpsr_n.global-to-local, align 1
  %v8_14080 = icmp eq i32 %v2_14078, 20
  store i1 %v8_14080, i1* %cpsr_z.global-to-local, align 1
  %v5_14084 = icmp slt i32 %v2_14078, 20
  br i1 %v5_14084, label %dec_label_pc_140b8, label %dec_label_pc_14088

dec_label_pc_14088:                               ; preds = %dec_label_pc_14080
  %v0_14088 = load i32, i32* @r4, align 4
  store i32 %v0_14088, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1408c

dec_label_pc_1408c:                               ; preds = %dec_label_pc_1408c.dec_label_pc_1408c_crit_edge, %dec_label_pc_14088
  %v0_14090 = phi i32 [ %v12_14098, %dec_label_pc_1408c.dec_label_pc_1408c_crit_edge ], [ %v0_1409092, %dec_label_pc_14088 ]
  %v0_1408c = phi i32 [ %v0_1408c.pre, %dec_label_pc_1408c.dec_label_pc_1408c_crit_edge ], [ %v0_1408c91, %dec_label_pc_14088 ]
  %v1_1408c = inttoptr i32 %v0_1408c to i32*
  %v2_1408c = load i32, i32* %v1_1408c, align 4
  store i32 %v2_1408c, i32* %r3.global-to-local, align 4
  %v3_1408c = add i32 %v0_1408c, 4
  %v4_1408c = inttoptr i32 %v3_1408c to i32*
  %v5_1408c = load i32, i32* %v4_1408c, align 4
  store i32 %v5_1408c, i32* %r4.global-to-local, align 4
  %v6_1408c = add i32 %v0_1408c, 8
  %v7_1408c = inttoptr i32 %v6_1408c to i32*
  %v8_1408c = load i32, i32* %v7_1408c, align 4
  store i32 %v8_1408c, i32* %ip.global-to-local, align 4
  %v9_1408c = add i32 %v0_1408c, 12
  %v10_1408c = inttoptr i32 %v9_1408c to i32*
  %v11_1408c = load i32, i32* %v10_1408c, align 4
  store i32 %v11_1408c, i32* %lr.global-to-local, align 4
  %v12_1408c = add i32 %v0_1408c, 16
  store i32 %v12_1408c, i32* %r1.global-to-local, align 4
  %v1_14090 = inttoptr i32 %v0_14090 to i32*
  store i32 %v2_1408c, i32* %v1_14090, align 4
  %v3_14090 = add i32 %v0_14090, 4
  %v4_14090 = inttoptr i32 %v3_14090 to i32*
  %v5_14090 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14090, i32* %v4_14090, align 4
  %v6_14090 = add i32 %v0_14090, 8
  %v7_14090 = inttoptr i32 %v6_14090 to i32*
  %v8_14090 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_14090, i32* %v7_14090, align 4
  %v9_14090 = add i32 %v0_14090, 12
  %v10_14090 = inttoptr i32 %v9_14090 to i32*
  %v11_14090 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_14090, i32* %v10_14090, align 4
  %v12_14090 = add i32 %v0_14090, 16
  store i32 %v12_14090, i32* %r0.global-to-local, align 4
  %v0_14094 = load i32, i32* %r1.global-to-local, align 4
  %v1_14094 = inttoptr i32 %v0_14094 to i32*
  %v2_14094 = load i32, i32* %v1_14094, align 4
  store i32 %v2_14094, i32* %r3.global-to-local, align 4
  %v3_14094 = add i32 %v0_14094, 4
  %v4_14094 = inttoptr i32 %v3_14094 to i32*
  %v5_14094 = load i32, i32* %v4_14094, align 4
  store i32 %v5_14094, i32* %r4.global-to-local, align 4
  %v6_14094 = add i32 %v0_14094, 8
  %v7_14094 = inttoptr i32 %v6_14094 to i32*
  %v8_14094 = load i32, i32* %v7_14094, align 4
  store i32 %v8_14094, i32* @ip, align 4
  %v9_14094 = add i32 %v0_14094, 12
  %v10_14094 = inttoptr i32 %v9_14094 to i32*
  %v11_14094 = load i32, i32* %v10_14094, align 4
  store i32 %v11_14094, i32* @lr, align 4
  %v12_14094 = add i32 %v0_14094, 16
  store i32 %v12_14094, i32* @r1, align 4
  %v1_14098 = inttoptr i32 %v12_14090 to i32*
  store i32 %v2_14094, i32* %v1_14098, align 4
  %v3_14098 = add i32 %v0_14090, 20
  %v4_14098 = inttoptr i32 %v3_14098 to i32*
  %v5_14098 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14098, i32* %v4_14098, align 4
  %v6_14098 = add i32 %v0_14090, 24
  %v7_14098 = inttoptr i32 %v6_14098 to i32*
  %v8_14098 = load i32, i32* @ip, align 4
  store i32 %v8_14098, i32* %v7_14098, align 4
  %v9_14098 = add i32 %v0_14090, 28
  %v10_14098 = inttoptr i32 %v9_14098 to i32*
  %v11_14098 = load i32, i32* @lr, align 4
  store i32 %v11_14098, i32* %v10_14098, align 4
  %v12_14098 = add i32 %v0_14090, 32
  store i32 %v12_14098, i32* @r0, align 4
  %v0_1409c = load i32, i32* %r2.global-to-local, align 4
  %v2_1409c = add i32 %v0_1409c, -32
  store i32 %v2_1409c, i32* %r2.global-to-local, align 4
  %v6_140a0 = icmp slt i32 %v0_1409c, 32
  br i1 %v6_140a0, label %dec_label_pc_140a4, label %dec_label_pc_1408c.dec_label_pc_1408c_crit_edge

dec_label_pc_1408c.dec_label_pc_1408c_crit_edge:  ; preds = %dec_label_pc_1408c
  %v0_1408c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_1408c

dec_label_pc_140a4:                               ; preds = %dec_label_pc_1408c
  %v4_140a4 = add i32 %v0_1409c, -16
  %v6_140a4 = add i32 %v0_1409c, 2147483616
  %v7_140a4 = and i32 %v4_140a4, %v6_140a4
  %v8_140a4 = icmp slt i32 %v7_140a4, 0
  store i1 %v8_140a4, i1* %cpsr_v.global-to-local, align 1
  %v9_140a4 = icmp slt i32 %v4_140a4, 0
  store i1 %v9_140a4, i1* %cpsr_n.global-to-local, align 1
  %v10_140a4 = icmp eq i32 %v4_140a4, 0
  store i1 %v10_140a4, i1* %cpsr_z.global-to-local, align 1
  %v5_140a8 = icmp slt i32 %v2_1409c, -16
  br i1 %v5_140a8, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_140a4
  %v6_140a8 = load i32, i32* @r1, align 4
  %v7_140a8 = inttoptr i32 %v6_140a8 to i32*
  %v8_140a8 = load i32, i32* %v7_140a8, align 4
  store i32 %v8_140a8, i32* %r3.global-to-local, align 4
  %v9_140a8 = add i32 %v6_140a8, 4
  %v10_140a8 = inttoptr i32 %v9_140a8 to i32*
  %v11_140a8 = load i32, i32* %v10_140a8, align 4
  store i32 %v11_140a8, i32* %r4.global-to-local, align 4
  %v12_140a8 = add i32 %v6_140a8, 8
  %v13_140a8 = inttoptr i32 %v12_140a8 to i32*
  %v14_140a8 = load i32, i32* %v13_140a8, align 4
  store i32 %v14_140a8, i32* @ip, align 4
  %v15_140a8 = add i32 %v6_140a8, 12
  %v16_140a8 = inttoptr i32 %v15_140a8 to i32*
  %v17_140a8 = load i32, i32* %v16_140a8, align 4
  store i32 %v17_140a8, i32* @lr, align 4
  %v18_140a8 = add i32 %v6_140a8, 16
  store i32 %v18_140a8, i32* @r1, align 4
  %v7_140ac = inttoptr i32 %v12_14098 to i32*
  store i32 %v8_140a8, i32* %v7_140ac, align 4
  %v9_140ac = add i32 %v0_14090, 36
  %v10_140ac = inttoptr i32 %v9_140ac to i32*
  %v11_140ac = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_140ac, i32* %v10_140ac, align 4
  %v12_140ac = add i32 %v0_14090, 40
  %v13_140ac = inttoptr i32 %v12_140ac to i32*
  %v14_140ac = load i32, i32* @ip, align 4
  store i32 %v14_140ac, i32* %v13_140ac, align 4
  %v15_140ac = add i32 %v0_14090, 44
  %v16_140ac = inttoptr i32 %v15_140ac to i32*
  %v17_140ac = load i32, i32* @lr, align 4
  store i32 %v17_140ac, i32* %v16_140ac, align 4
  %v18_140ac = add i32 %v0_14090, 48
  store i32 %v18_140ac, i32* @r0, align 4
  %v6_140b0 = load i32, i32* %r2.global-to-local, align 4
  %v7_140b0 = add i32 %v6_140b0, -16
  store i32 %v7_140b0, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_140a4, %bb128
  %v3_140c0101 = phi i32 [ %v12_14098, %dec_label_pc_140a4 ], [ %v18_140ac, %bb128 ]
  %v0_140b895 = phi i32 [ %v2_1409c, %dec_label_pc_140a4 ], [ %v7_140b0, %bb128 ]
  %v2_140b4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_140b4, i32* @r4, align 4
  br label %dec_label_pc_140b8

dec_label_pc_140b8:                               ; preds = %dec_label_pc_14080, %.thread1
  %v3_140c0100 = phi i32 [ %v0_1409092, %dec_label_pc_14080 ], [ %v3_140c0101, %.thread1 ]
  %v0_140b8 = phi i32 [ %v2_14080, %dec_label_pc_14080 ], [ %v0_140b895, %.thread1 ]
  %v1_140b8 = add i32 %v0_140b8, 20
  store i32 %v1_140b8, i32* %r2.global-to-local, align 4
  %v3_140b8 = sub i32 0, %v0_140b8
  %v4_140b8 = and i32 %v1_140b8, %v3_140b8
  %v5_140b8 = icmp slt i32 %v4_140b8, 0
  store i1 %v5_140b8, i1* %cpsr_v.global-to-local, align 1
  %v6_140b8 = icmp slt i32 %v1_140b8, 0
  store i1 %v6_140b8, i1* %cpsr_n.global-to-local, align 1
  %v7_140b8 = icmp eq i32 %v1_140b8, 0
  store i1 %v7_140b8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_140bc

dec_label_pc_140bc:                               ; preds = %.thread117, %dec_label_pc_140b8
  %v0_140cc.pre147 = phi i32 [ %v0_140cc.pre, %.thread117 ], [ %v1_140b8, %dec_label_pc_140b8 ]
  %v3_140c0 = phi i32 [ %v3_140c098118, %.thread117 ], [ %v3_140c0100, %dec_label_pc_140b8 ]
  %v1_140c4 = phi i1 [ %v1_140c8, %.thread117 ], [ %v5_140b8, %dec_label_pc_140b8 ]
  %v0_140c4 = phi i1 [ %v0_140c8, %.thread117 ], [ %v6_140b8, %dec_label_pc_140b8 ]
  %v2_140bc = xor i1 %v1_140c4, %v0_140c4
  br i1 %v2_140bc, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_140bc
  %v3_140bc = load i32, i32* @r1, align 4
  %v4_140bc = inttoptr i32 %v3_140bc to i32*
  %v5_140bc = load i32, i32* %v4_140bc, align 4
  store i32 %v5_140bc, i32* %r3.global-to-local, align 4
  %v6_140bc = add i32 %v3_140bc, 4
  %v7_140bc = inttoptr i32 %v6_140bc to i32*
  %v8_140bc = load i32, i32* %v7_140bc, align 4
  store i32 %v8_140bc, i32* @ip, align 4
  %v9_140bc = add i32 %v3_140bc, 8
  %v10_140bc = inttoptr i32 %v9_140bc to i32*
  %v11_140bc = load i32, i32* %v10_140bc, align 4
  store i32 %v11_140bc, i32* @lr, align 4
  %v12_140bc = add i32 %v3_140bc, 12
  store i32 %v12_140bc, i32* @r1, align 4
  %v4_140c0 = inttoptr i32 %v3_140c0 to i32*
  store i32 %v5_140bc, i32* %v4_140c0, align 4
  %v6_140c0 = add i32 %v3_140c0, 4
  %v7_140c0 = inttoptr i32 %v6_140c0 to i32*
  %v8_140c0 = load i32, i32* @ip, align 4
  store i32 %v8_140c0, i32* %v7_140c0, align 4
  %v9_140c0 = add i32 %v3_140c0, 8
  %v10_140c0 = inttoptr i32 %v9_140c0 to i32*
  %v11_140c0 = load i32, i32* @lr, align 4
  store i32 %v11_140c0, i32* %v10_140c0, align 4
  %v12_140c0 = add i32 %v3_140c0, 12
  store i32 %v12_140c0, i32* @r0, align 4
  %v3_140c4 = load i32, i32* %r2.global-to-local, align 4
  %v4_140c4 = add i32 %v3_140c4, -12
  store i32 %v4_140c4, i32* %r2.global-to-local, align 4
  %v6_140c4 = sub i32 11, %v3_140c4
  %v7_140c4 = and i32 %v6_140c4, %v3_140c4
  %v8_140c4 = icmp slt i32 %v7_140c4, 0
  store i1 %v8_140c4, i1* %cpsr_v.global-to-local, align 1
  %v9_140c4 = icmp slt i32 %v4_140c4, 0
  store i1 %v9_140c4, i1* %cpsr_n.global-to-local, align 1
  %v10_140c4 = icmp eq i32 %v3_140c4, 12
  store i1 %v10_140c4, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_140bc, %bb129
  %v0_140cc.pre = phi i32 [ %v4_140c4, %bb129 ], [ %v0_140cc.pre147, %dec_label_pc_140bc ]
  %v3_140c098118 = phi i32 [ %v12_140c0, %bb129 ], [ %v3_140c0, %dec_label_pc_140bc ]
  %v1_140c8 = phi i1 [ %v8_140c4, %bb129 ], [ %v1_140c4, %dec_label_pc_140bc ]
  %v0_140c8 = phi i1 [ %v9_140c4, %bb129 ], [ %v0_140c4, %dec_label_pc_140bc ]
  %v2_140c8 = xor i1 %v1_140c8, %v0_140c8
  br i1 %v2_140c8, label %dec_label_pc_140cc, label %dec_label_pc_140bc

dec_label_pc_140cc:                               ; preds = %.thread117, %dec_label_pc_14078
  %v7_140dc = phi i32 [ %v0_1409092, %dec_label_pc_14078 ], [ %v3_140c098118, %.thread117 ]
  %v0_140cc = phi i32 [ %v2_14078, %dec_label_pc_14078 ], [ %v0_140cc.pre, %.thread117 ]
  %v2_140cc = add i32 %v0_140cc, 8
  store i32 %v2_140cc, i32* %r2.global-to-local, align 4
  %v4_140cc = sub i32 0, %v0_140cc
  %v5_140cc = and i32 %v2_140cc, %v4_140cc
  %v6_140cc = icmp slt i32 %v5_140cc, 0
  store i1 %v6_140cc, i1* %cpsr_v.global-to-local, align 1
  %v7_140cc = icmp slt i32 %v2_140cc, 0
  store i1 %v7_140cc, i1* %cpsr_n.global-to-local, align 1
  %v8_140cc = icmp eq i32 %v2_140cc, 0
  store i1 %v8_140cc, i1* %cpsr_z.global-to-local, align 1
  %v5_140d0 = icmp slt i32 %v0_140cc, -8
  br i1 %v5_140d0, label %bb131, label %dec_label_pc_140d4

dec_label_pc_140d4:                               ; preds = %dec_label_pc_140cc
  %v6_140d4 = add i32 %v0_140cc, 4
  store i32 %v6_140d4, i32* %r2.global-to-local, align 4
  %v8_140d4 = sub i32 -5, %v0_140cc
  %v9_140d4 = and i32 %v8_140d4, %v2_140cc
  %v10_140d4 = icmp slt i32 %v9_140d4, 0
  store i1 %v10_140d4, i1* %cpsr_v.global-to-local, align 1
  %v11_140d4 = icmp slt i32 %v6_140d4, 0
  store i1 %v11_140d4, i1* %cpsr_n.global-to-local, align 1
  %v12_140d4 = icmp eq i32 %v2_140cc, 4
  store i1 %v12_140d4, i1* %cpsr_z.global-to-local, align 1
  %v5_140d8 = icmp slt i32 %v2_140cc, 4
  %v6_140d8 = load i32, i32* @r1, align 4
  %v7_140d8 = inttoptr i32 %v6_140d8 to i32*
  %v8_140d8 = load i32, i32* %v7_140d8, align 4
  store i32 %v8_140d8, i32* %r3.global-to-local, align 4
  %v10_140d8 = add i32 %v6_140d8, 4
  br i1 %v5_140d8, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_140d4
  store i32 %v10_140d8, i32* @r1, align 4
  %v8_140dc = inttoptr i32 %v7_140dc to i32*
  store i32 %v8_140d8, i32* %v8_140dc, align 4
  %v9_140dc = load i32, i32* @r0, align 4
  %v10_140dc = add i32 %v9_140dc, 4
  store i32 %v10_140dc, i32* @r0, align 4
  %v0_140ec.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_140d4
  %v10_140e0 = inttoptr i32 %v10_140d8 to i32*
  %v11_140e0 = load i32, i32* %v10_140e0, align 4
  store i32 %v11_140e0, i32* @ip, align 4
  %v12_140e0 = add i32 %v6_140d8, 8
  store i32 %v12_140e0, i32* @r1, align 4
  %v7_140e4 = inttoptr i32 %v7_140dc to i32*
  store i32 %v8_140d8, i32* %v7_140e4, align 4
  %v9_140e4 = add i32 %v7_140dc, 4
  %v10_140e4 = inttoptr i32 %v9_140e4 to i32*
  %v11_140e4 = load i32, i32* @ip, align 4
  store i32 %v11_140e4, i32* %v10_140e4, align 4
  %v12_140e4 = add i32 %v7_140dc, 8
  store i32 %v12_140e4, i32* @r0, align 4
  %v6_140e8 = load i32, i32* %r2.global-to-local, align 4
  %v7_140e8 = add i32 %v6_140e8, -4
  store i32 %v7_140e8, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_140cc, %bb, %dec_label_pc_14294, %dec_label_pc_14228, %dec_label_pc_141bc, %bb130
  %v2_140fc = phi i32 [ %v10_140dc, %.thread5 ], [ %v0_1418c75, %.thread11 ], [ %v7_140dc, %dec_label_pc_140cc ], [ %v1_14050, %bb ], [ %v2_140fc113, %dec_label_pc_14294 ], [ %v2_140fc112, %dec_label_pc_14228 ], [ %v2_140fc111, %dec_label_pc_141bc ], [ %v12_140e4, %bb130 ]
  %v0_140ec = phi i32 [ %v0_140ec.pre, %.thread5 ], [ %v2_14134, %.thread11 ], [ %v2_140cc, %dec_label_pc_140cc ], [ %v2_14060, %bb ], [ %v0_140ec109, %dec_label_pc_14294 ], [ %v0_140ec108, %dec_label_pc_14228 ], [ %v0_140ec107, %dec_label_pc_141bc ], [ %v7_140e8, %bb130 ]
  %v1_140ec = add i32 %v0_140ec, 4
  store i32 %v1_140ec, i32* %r2.global-to-local, align 4
  %v3_140ec = sub i32 0, %v0_140ec
  %v4_140ec = and i32 %v1_140ec, %v3_140ec
  %v5_140ec = icmp slt i32 %v4_140ec, 0
  store i1 %v5_140ec, i1* %cpsr_v.global-to-local, align 1
  %v6_140ec = icmp slt i32 %v1_140ec, 0
  store i1 %v6_140ec, i1* %cpsr_n.global-to-local, align 1
  %v7_140ec = icmp eq i32 %v1_140ec, 0
  store i1 %v7_140ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_140ec, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_140f0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_140f0, i32* %r0.global-to-local, align 4
  ret i32 %v3_140f0

bb133:                                            ; preds = %bb131
  %v1_140f4 = add i32 %v0_140ec, 2
  %v3_140f4 = sub i32 -3, %v0_140ec
  %v4_140f4 = and i32 %v3_140f4, %v1_140ec
  %v5_140f4 = icmp slt i32 %v4_140f4, 0
  store i1 %v5_140f4, i1* %cpsr_v.global-to-local, align 1
  %v6_140f4 = icmp slt i32 %v1_140f4, 0
  store i1 %v6_140f4, i1* %cpsr_n.global-to-local, align 1
  %v7_140f4 = icmp eq i32 %v1_140ec, 2
  store i1 %v7_140f4, i1* %cpsr_z.global-to-local, align 1
  %v0_140f8 = load i32, i32* @r1, align 4
  %v1_140f8 = inttoptr i32 %v0_140f8 to i8*
  %v2_140f8 = load i8, i8* %v1_140f8, align 1
  %v3_140f8 = zext i8 %v2_140f8 to i32
  store i32 %v3_140f8, i32* %r3.global-to-local, align 4
  %v5_140f8 = add i32 %v0_140f8, 1
  store i32 %v5_140f8, i32* %r1.global-to-local, align 4
  %v3_140fc = inttoptr i32 %v2_140fc to i8*
  store i8 %v2_140f8, i8* %v3_140fc, align 1
  %v4_140fc = load i32, i32* @r0, align 4
  %v5_140fc = add i32 %v4_140fc, 1
  store i32 %v5_140fc, i32* %r0.global-to-local, align 4
  %v0_14100 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_14100 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_14100 = xor i1 %v0_14100, %v1_14100
  br i1 %v2_14100, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_14100 = load i32, i32* %r1.global-to-local, align 4
  %v4_14100 = inttoptr i32 %v3_14100 to i8*
  %v5_14100 = load i8, i8* %v4_14100, align 1
  %v6_14100 = zext i8 %v5_14100 to i32
  store i32 %v6_14100, i32* %r3.global-to-local, align 4
  %v8_14100 = add i32 %v3_14100, 1
  store i32 %v8_14100, i32* %r1.global-to-local, align 4
  %v6_14104 = inttoptr i32 %v5_140fc to i8*
  store i8 %v5_14100, i8* %v6_14104, align 1
  %v7_14104 = load i32, i32* %r0.global-to-local, align 4
  %v8_14104 = add i32 %v7_14104, 1
  store i32 %v8_14104, i32* %r0.global-to-local, align 4
  %v1_14108.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_14108.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_1410c = phi i32 [ %v8_14104, %bb134 ], [ %v5_140fc, %bb133 ]
  %v2_1410c = phi i1 [ %v2_14108.pre, %bb134 ], [ %v1_14100, %bb133 ]
  %v1_1410c = phi i1 [ %v1_14108.pre, %bb134 ], [ %v0_14100, %bb133 ]
  %v0_14108 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_14108 = xor i1 %v2_1410c, %v1_1410c
  %v4_14108 = or i1 %v0_14108, %v3_14108
  br i1 %v4_14108, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_14108 = load i32, i32* %r1.global-to-local, align 4
  %v6_14108 = inttoptr i32 %v5_14108 to i8*
  %v7_14108 = load i8, i8* %v6_14108, align 1
  %v8_14108 = zext i8 %v7_14108 to i32
  store i32 %v8_14108, i32* %r3.global-to-local, align 4
  %v10_14108 = add i32 %v5_14108, 1
  store i32 %v10_14108, i32* %r1.global-to-local, align 4
  %v8_1410c = inttoptr i32 %v7_1410c to i8*
  store i8 %v7_14108, i8* %v8_1410c, align 1
  %v9_1410c = load i32, i32* %r0.global-to-local, align 4
  %v10_1410c = add i32 %v9_1410c, 1
  store i32 %v10_1410c, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_14110 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14110, i32* %r0.global-to-local, align 4
  ret i32 %v2_14110

dec_label_pc_14114:                               ; preds = %dec_label_pc_14068
  %v1_14114 = sub nsw i32 4, %v1_14068
  store i32 %v1_14114, i32* @ip, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_14118 = icmp ult i32 %v1_14114, 2
  store i1 %v8_14118, i1* %cpsr_n.global-to-local, align 1
  %v9_14118 = icmp eq i32 %v1_14114, 2
  store i1 %v9_14118, i1* %cpsr_z.global-to-local, align 1
  %v1_1411c = inttoptr i32 %v0_14050 to i8*
  %v2_1411c = load i8, i8* %v1_1411c, align 1
  %v3_1411c = zext i8 %v2_1411c to i32
  store i32 %v3_1411c, i32* %r3.global-to-local, align 4
  %v5_1411c = add i32 %v0_14050, 1
  store i32 %v5_1411c, i32* @r1, align 4
  %v3_14120 = inttoptr i32 %v1_14050 to i8*
  store i8 %v2_1411c, i8* %v3_14120, align 1
  %v4_14120 = load i32, i32* @r0, align 4
  %v5_14120 = add i32 %v4_14120, 1
  store i32 %v5_14120, i32* @r0, align 4
  br i1 %v8_14118, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_14114
  %v6_14124 = load i32, i32* @r1, align 4
  %v7_14124 = inttoptr i32 %v6_14124 to i8*
  %v8_14124 = load i8, i8* %v7_14124, align 1
  %v9_14124 = zext i8 %v8_14124 to i32
  store i32 %v9_14124, i32* %r3.global-to-local, align 4
  %v11_14124 = add i32 %v6_14124, 1
  store i32 %v11_14124, i32* @r1, align 4
  %v9_14128 = inttoptr i32 %v5_14120 to i8*
  store i8 %v8_14124, i8* %v9_14128, align 1
  %v10_14128 = load i32, i32* @r0, align 4
  %v11_14128 = add i32 %v10_14128, 1
  store i32 %v11_14128, i32* @r0, align 4
  br i1 %v9_14118, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_1412c = load i32, i32* @r1, align 4
  %v9_1412c = inttoptr i32 %v8_1412c to i8*
  %v10_1412c = load i8, i8* %v9_1412c, align 1
  %v11_1412c = zext i8 %v10_1412c to i32
  store i32 %v11_1412c, i32* %r3.global-to-local, align 4
  %v13_1412c = add i32 %v8_1412c, 1
  store i32 %v13_1412c, i32* @r1, align 4
  %v11_14130 = inttoptr i32 %v11_14128 to i8*
  store i8 %v10_1412c, i8* %v11_14130, align 1
  %v12_14130 = load i32, i32* @r0, align 4
  %v13_14130 = add i32 %v12_14130, 1
  store i32 %v13_14130, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_14114, %bb137
  %v0_1418c75 = phi i32 [ %v11_14128, %bb136 ], [ %v5_14120, %dec_label_pc_14114 ], [ %v13_14130, %bb137 ]
  %v0_14134 = load i32, i32* %r2.global-to-local, align 4
  %v1_14134 = load i32, i32* @ip, align 4
  %v2_14134 = sub i32 %v0_14134, %v1_14134
  store i32 %v2_14134, i32* %r2.global-to-local, align 4
  %v4_14134 = xor i32 %v1_14134, %v0_14134
  %v5_14134 = xor i32 %v2_14134, %v0_14134
  %v6_14134 = and i32 %v5_14134, %v4_14134
  %v7_14134 = icmp slt i32 %v6_14134, 0
  store i1 %v7_14134, i1* %cpsr_v.global-to-local, align 1
  %v8_14134 = icmp slt i32 %v2_14134, 0
  store i1 %v8_14134, i1* %cpsr_n.global-to-local, align 1
  %v9_14134 = icmp eq i32 %v0_14134, %v1_14134
  store i1 %v9_14134, i1* %cpsr_z.global-to-local, align 1
  %v5_14138 = icmp slt i32 %v0_14134, %v1_14134
  br i1 %v5_14138, label %bb131, label %dec_label_pc_1413c

dec_label_pc_1413c:                               ; preds = %.thread11
  %v0_1413c = load i32, i32* @r1, align 4
  %v1_1413c = urem i32 %v0_1413c, 4
  store i32 %v1_1413c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1413c = icmp eq i32 %v1_1413c, 0
  store i1 %v2_1413c, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_1413c to i2
  br i1 %v2_1413c, label %dec_label_pc_14078, label %dec_label_pc_14144

dec_label_pc_14144:                               ; preds = %dec_label_pc_14070, %dec_label_pc_1413c
  %v0_1418c74 = phi i32 [ %v1_14050, %dec_label_pc_14070 ], [ %v0_1418c75, %dec_label_pc_1413c ]
  %v0_14238 = phi i32 [ %v2_14060, %dec_label_pc_14070 ], [ %v2_14134, %dec_label_pc_1413c ]
  %v0_1414c.off0 = phi i2 [ %extract.t, %dec_label_pc_14070 ], [ %extract.t123, %dec_label_pc_1413c ]
  %v0_14144 = phi i32 [ %v0_14050, %dec_label_pc_14070 ], [ %v0_1413c, %dec_label_pc_1413c ]
  %v1_14144 = and i32 %v0_14144, -4
  store i32 %v1_14144, i32* %r1.global-to-local, align 4
  %v1_14148 = inttoptr i32 %v1_14144 to i32*
  %v2_14148 = load i32, i32* %v1_14148, align 4
  store i32 %v2_14148, i32* @lr, align 4
  %v4_14148 = add i32 %v1_14144, 4
  store i32 %v4_14148, i32* %r1.global-to-local, align 4
  %v2_14230 = add i32 %v0_14238, -12
  %v4_14230 = sub i32 11, %v0_14238
  %v5_14230 = and i32 %v4_14230, %v0_14238
  %v6_14230 = icmp slt i32 %v5_14230, 0
  store i1 %v6_14230, i1* %cpsr_v.global-to-local, align 1
  %v7_14230 = icmp slt i32 %v2_14230, 0
  store i1 %v7_14230, i1* %cpsr_n.global-to-local, align 1
  %v8_14230 = icmp eq i32 %v0_14238, 12
  store i1 %v8_14230, i1* %cpsr_z.global-to-local, align 1
  %v5_14234 = icmp slt i32 %v0_14238, 12
  switch i2 %v0_1414c.off0, label %dec_label_pc_14158 [
    i2 -1, label %dec_label_pc_14230
    i2 -2, label %dec_label_pc_141c4
  ]

dec_label_pc_14158:                               ; preds = %dec_label_pc_14144
  br i1 %v5_14234, label %dec_label_pc_141a4, label %dec_label_pc_14160

dec_label_pc_14160:                               ; preds = %dec_label_pc_14158
  store i32 %v2_14230, i32* %r2.global-to-local, align 4
  %v3_14164 = load i32, i32* @r4, align 4
  store i32 %v3_14164, i32* %stack_var_-16, align 4
  %v6_14164 = load i32, i32* @r5, align 4
  store i32 %v6_14164, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14168

dec_label_pc_14168:                               ; preds = %dec_label_pc_14168.dec_label_pc_14168_crit_edge, %dec_label_pc_14160
  %v0_1418c = phi i32 [ %v12_1418c, %dec_label_pc_14168.dec_label_pc_14168_crit_edge ], [ %v0_1418c74, %dec_label_pc_14160 ]
  %v0_1416c = phi i32 [ %v0_1416c.pre, %dec_label_pc_14168.dec_label_pc_14168_crit_edge ], [ %v4_14148, %dec_label_pc_14160 ]
  %v0_14168 = phi i32 [ %v0_14168.pre, %dec_label_pc_14168.dec_label_pc_14168_crit_edge ], [ %v2_14148, %dec_label_pc_14160 ]
  %v3_14168 = udiv i32 %v0_14168, 256
  store i32 %v3_14168, i32* %r3.global-to-local, align 4
  %v1_1416c = inttoptr i32 %v0_1416c to i32*
  %v2_1416c = load i32, i32* %v1_1416c, align 4
  store i32 %v2_1416c, i32* %r4.global-to-local, align 4
  %v3_1416c = add i32 %v0_1416c, 4
  %v4_1416c = inttoptr i32 %v3_1416c to i32*
  %v5_1416c = load i32, i32* %v4_1416c, align 4
  store i32 %v5_1416c, i32* %r5.global-to-local, align 4
  %v6_1416c = add i32 %v0_1416c, 8
  %v7_1416c = inttoptr i32 %v6_1416c to i32*
  %v8_1416c = load i32, i32* %v7_1416c, align 4
  store i32 %v8_1416c, i32* %ip.global-to-local, align 4
  %v9_1416c = add i32 %v0_1416c, 12
  %v10_1416c = inttoptr i32 %v9_1416c to i32*
  %v11_1416c = load i32, i32* %v10_1416c, align 4
  store i32 %v11_1416c, i32* @lr, align 4
  %v12_1416c = add i32 %v0_1416c, 16
  store i32 %v12_1416c, i32* %r1.global-to-local, align 4
  %v4_14170 = mul i32 %v2_1416c, 16777216
  %v5_14170 = or i32 %v4_14170, %v3_14168
  store i32 %v5_14170, i32* %r3.global-to-local, align 4
  %v3_14174 = udiv i32 %v2_1416c, 256
  %v4_14178 = mul i32 %v5_1416c, 16777216
  %v5_14178 = or i32 %v4_14178, %v3_14174
  store i32 %v5_14178, i32* %r4.global-to-local, align 4
  %v3_1417c = udiv i32 %v5_1416c, 256
  %v4_14180 = mul i32 %v8_1416c, 16777216
  %v5_14180 = or i32 %v4_14180, %v3_1417c
  store i32 %v5_14180, i32* %r5.global-to-local, align 4
  %v3_14184 = udiv i32 %v8_1416c, 256
  %v4_14188 = mul i32 %v11_1416c, 16777216
  %v5_14188 = or i32 %v4_14188, %v3_14184
  store i32 %v5_14188, i32* @ip, align 4
  %v1_1418c = inttoptr i32 %v0_1418c to i32*
  store i32 %v5_14170, i32* %v1_1418c, align 4
  %v3_1418c = add i32 %v0_1418c, 4
  %v4_1418c = inttoptr i32 %v3_1418c to i32*
  %v5_1418c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1418c, i32* %v4_1418c, align 4
  %v6_1418c = add i32 %v0_1418c, 8
  %v7_1418c = inttoptr i32 %v6_1418c to i32*
  %v8_1418c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_1418c, i32* %v7_1418c, align 4
  %v9_1418c = add i32 %v0_1418c, 12
  %v10_1418c = inttoptr i32 %v9_1418c to i32*
  %v11_1418c = load i32, i32* @ip, align 4
  store i32 %v11_1418c, i32* %v10_1418c, align 4
  %v12_1418c = add i32 %v0_1418c, 16
  store i32 %v12_1418c, i32* @r0, align 4
  %v0_14190 = load i32, i32* %r2.global-to-local, align 4
  %v2_14190 = add i32 %v0_14190, -16
  store i32 %v2_14190, i32* %r2.global-to-local, align 4
  %v6_14194 = icmp slt i32 %v0_14190, 16
  br i1 %v6_14194, label %dec_label_pc_14198, label %dec_label_pc_14168.dec_label_pc_14168_crit_edge

dec_label_pc_14168.dec_label_pc_14168_crit_edge:  ; preds = %dec_label_pc_14168
  %v0_14168.pre = load i32, i32* @lr, align 4
  %v0_1416c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14168

dec_label_pc_14198:                               ; preds = %dec_label_pc_14168
  %v2_14198 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14198, i32* @r4, align 4
  %v5_14198 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_14198, i32* @r5, align 4
  %v2_1419c = add i32 %v0_14190, -4
  store i32 %v2_1419c, i32* %r2.global-to-local, align 4
  %v4_1419c = add i32 %v0_14190, 2147483632
  %v5_1419c = and i32 %v2_1419c, %v4_1419c
  %v6_1419c = icmp slt i32 %v5_1419c, 0
  store i1 %v6_1419c, i1* %cpsr_v.global-to-local, align 1
  %v7_1419c = icmp slt i32 %v2_1419c, 0
  store i1 %v7_1419c, i1* %cpsr_n.global-to-local, align 1
  %v8_1419c = icmp eq i32 %v2_1419c, 0
  store i1 %v8_1419c, i1* %cpsr_z.global-to-local, align 1
  %v5_141a0 = icmp slt i32 %v2_14190, -12
  br i1 %v5_141a0, label %dec_label_pc_141bc, label %dec_label_pc_141a4

dec_label_pc_141a4:                               ; preds = %dec_label_pc_14198, %dec_label_pc_14158, %dec_label_pc_141a4
  %v1_141b0 = phi i32 [ %v4_141b0, %dec_label_pc_141a4 ], [ %v12_1418c, %dec_label_pc_14198 ], [ %v0_1418c74, %dec_label_pc_14158 ]
  %v0_141a4 = load i32, i32* @lr, align 4
  %v3_141a4 = udiv i32 %v0_141a4, 256
  store i32 %v3_141a4, i32* %ip.global-to-local, align 4
  %v0_141a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_141a8 = inttoptr i32 %v0_141a8 to i32*
  %v2_141a8 = load i32, i32* %v1_141a8, align 4
  store i32 %v2_141a8, i32* @lr, align 4
  %v4_141a8 = add i32 %v0_141a8, 4
  store i32 %v4_141a8, i32* %r1.global-to-local, align 4
  %v4_141ac = mul i32 %v2_141a8, 16777216
  %v5_141ac = or i32 %v4_141ac, %v3_141a4
  store i32 %v5_141ac, i32* @ip, align 4
  %v2_141b0 = inttoptr i32 %v1_141b0 to i32*
  store i32 %v5_141ac, i32* %v2_141b0, align 4
  %v3_141b0 = load i32, i32* @r0, align 4
  %v4_141b0 = add i32 %v3_141b0, 4
  store i32 %v4_141b0, i32* @r0, align 4
  %v0_141b4 = load i32, i32* %r2.global-to-local, align 4
  %v2_141b4 = add i32 %v0_141b4, -4
  store i32 %v2_141b4, i32* %r2.global-to-local, align 4
  %v6_141b8 = icmp slt i32 %v0_141b4, 4
  br i1 %v6_141b8, label %dec_label_pc_141bc.loopexit, label %dec_label_pc_141a4

dec_label_pc_141bc.loopexit:                      ; preds = %dec_label_pc_141a4
  %v4_141b4 = sub i32 3, %v0_141b4
  %v5_141b4 = and i32 %v4_141b4, %v0_141b4
  %v6_141b4 = icmp slt i32 %v5_141b4, 0
  %v7_141b4 = icmp slt i32 %v2_141b4, 0
  store i1 %v6_141b4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_141b4, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_141bc

dec_label_pc_141bc:                               ; preds = %dec_label_pc_141bc.loopexit, %dec_label_pc_14198
  %v2_140fc111 = phi i32 [ %v4_141b0, %dec_label_pc_141bc.loopexit ], [ %v12_1418c, %dec_label_pc_14198 ]
  %v0_140ec107 = phi i32 [ %v2_141b4, %dec_label_pc_141bc.loopexit ], [ %v2_1419c, %dec_label_pc_14198 ]
  %v0_141bc = load i32, i32* %r1.global-to-local, align 4
  %v1_141bc = add i32 %v0_141bc, -3
  store i32 %v1_141bc, i32* @r1, align 4
  br label %bb131

dec_label_pc_141c4:                               ; preds = %dec_label_pc_14144
  br i1 %v5_14234, label %dec_label_pc_14210, label %dec_label_pc_141cc

dec_label_pc_141cc:                               ; preds = %dec_label_pc_141c4
  store i32 %v2_14230, i32* %r2.global-to-local, align 4
  %v3_141d0 = load i32, i32* @r4, align 4
  store i32 %v3_141d0, i32* %stack_var_-16, align 4
  %v6_141d0 = load i32, i32* @r5, align 4
  store i32 %v6_141d0, i32* %stack_var_-12, align 4
  br label %dec_label_pc_141d4

dec_label_pc_141d4:                               ; preds = %dec_label_pc_141d4.dec_label_pc_141d4_crit_edge, %dec_label_pc_141cc
  %v0_141f8 = phi i32 [ %v12_141f8, %dec_label_pc_141d4.dec_label_pc_141d4_crit_edge ], [ %v0_1418c74, %dec_label_pc_141cc ]
  %v0_141d8 = phi i32 [ %v0_141d8.pre, %dec_label_pc_141d4.dec_label_pc_141d4_crit_edge ], [ %v4_14148, %dec_label_pc_141cc ]
  %v0_141d4 = phi i32 [ %v0_141d4.pre, %dec_label_pc_141d4.dec_label_pc_141d4_crit_edge ], [ %v2_14148, %dec_label_pc_141cc ]
  %v3_141d4 = udiv i32 %v0_141d4, 65536
  store i32 %v3_141d4, i32* %r3.global-to-local, align 4
  %v1_141d8 = inttoptr i32 %v0_141d8 to i32*
  %v2_141d8 = load i32, i32* %v1_141d8, align 4
  store i32 %v2_141d8, i32* %r4.global-to-local, align 4
  %v3_141d8 = add i32 %v0_141d8, 4
  %v4_141d8 = inttoptr i32 %v3_141d8 to i32*
  %v5_141d8 = load i32, i32* %v4_141d8, align 4
  store i32 %v5_141d8, i32* %r5.global-to-local, align 4
  %v6_141d8 = add i32 %v0_141d8, 8
  %v7_141d8 = inttoptr i32 %v6_141d8 to i32*
  %v8_141d8 = load i32, i32* %v7_141d8, align 4
  store i32 %v8_141d8, i32* %ip.global-to-local, align 4
  %v9_141d8 = add i32 %v0_141d8, 12
  %v10_141d8 = inttoptr i32 %v9_141d8 to i32*
  %v11_141d8 = load i32, i32* %v10_141d8, align 4
  store i32 %v11_141d8, i32* @lr, align 4
  %v12_141d8 = add i32 %v0_141d8, 16
  store i32 %v12_141d8, i32* %r1.global-to-local, align 4
  %v4_141dc = mul i32 %v2_141d8, 65536
  %v5_141dc = or i32 %v4_141dc, %v3_141d4
  store i32 %v5_141dc, i32* %r3.global-to-local, align 4
  %v3_141e0 = udiv i32 %v2_141d8, 65536
  %v4_141e4 = mul i32 %v5_141d8, 65536
  %v5_141e4 = or i32 %v4_141e4, %v3_141e0
  store i32 %v5_141e4, i32* %r4.global-to-local, align 4
  %v3_141e8 = udiv i32 %v5_141d8, 65536
  %v4_141ec = mul i32 %v8_141d8, 65536
  %v5_141ec = or i32 %v4_141ec, %v3_141e8
  store i32 %v5_141ec, i32* %r5.global-to-local, align 4
  %v3_141f0 = udiv i32 %v8_141d8, 65536
  %v4_141f4 = mul i32 %v11_141d8, 65536
  %v5_141f4 = or i32 %v4_141f4, %v3_141f0
  store i32 %v5_141f4, i32* @ip, align 4
  %v1_141f8 = inttoptr i32 %v0_141f8 to i32*
  store i32 %v5_141dc, i32* %v1_141f8, align 4
  %v3_141f8 = add i32 %v0_141f8, 4
  %v4_141f8 = inttoptr i32 %v3_141f8 to i32*
  %v5_141f8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_141f8, i32* %v4_141f8, align 4
  %v6_141f8 = add i32 %v0_141f8, 8
  %v7_141f8 = inttoptr i32 %v6_141f8 to i32*
  %v8_141f8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_141f8, i32* %v7_141f8, align 4
  %v9_141f8 = add i32 %v0_141f8, 12
  %v10_141f8 = inttoptr i32 %v9_141f8 to i32*
  %v11_141f8 = load i32, i32* @ip, align 4
  store i32 %v11_141f8, i32* %v10_141f8, align 4
  %v12_141f8 = add i32 %v0_141f8, 16
  store i32 %v12_141f8, i32* @r0, align 4
  %v0_141fc = load i32, i32* %r2.global-to-local, align 4
  %v2_141fc = add i32 %v0_141fc, -16
  store i32 %v2_141fc, i32* %r2.global-to-local, align 4
  %v6_14200 = icmp slt i32 %v0_141fc, 16
  br i1 %v6_14200, label %dec_label_pc_14204, label %dec_label_pc_141d4.dec_label_pc_141d4_crit_edge

dec_label_pc_141d4.dec_label_pc_141d4_crit_edge:  ; preds = %dec_label_pc_141d4
  %v0_141d4.pre = load i32, i32* @lr, align 4
  %v0_141d8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_141d4

dec_label_pc_14204:                               ; preds = %dec_label_pc_141d4
  %v2_14204 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14204, i32* @r4, align 4
  %v5_14204 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_14204, i32* @r5, align 4
  %v2_14208 = add i32 %v0_141fc, -4
  store i32 %v2_14208, i32* %r2.global-to-local, align 4
  %v4_14208 = add i32 %v0_141fc, 2147483632
  %v5_14208 = and i32 %v2_14208, %v4_14208
  %v6_14208 = icmp slt i32 %v5_14208, 0
  store i1 %v6_14208, i1* %cpsr_v.global-to-local, align 1
  %v7_14208 = icmp slt i32 %v2_14208, 0
  store i1 %v7_14208, i1* %cpsr_n.global-to-local, align 1
  %v8_14208 = icmp eq i32 %v2_14208, 0
  store i1 %v8_14208, i1* %cpsr_z.global-to-local, align 1
  %v5_1420c = icmp slt i32 %v2_141fc, -12
  br i1 %v5_1420c, label %dec_label_pc_14228, label %dec_label_pc_14210

dec_label_pc_14210:                               ; preds = %dec_label_pc_14204, %dec_label_pc_141c4, %dec_label_pc_14210
  %v1_1421c = phi i32 [ %v4_1421c, %dec_label_pc_14210 ], [ %v12_141f8, %dec_label_pc_14204 ], [ %v0_1418c74, %dec_label_pc_141c4 ]
  %v0_14210 = load i32, i32* @lr, align 4
  %v3_14210 = udiv i32 %v0_14210, 65536
  store i32 %v3_14210, i32* %ip.global-to-local, align 4
  %v0_14214 = load i32, i32* %r1.global-to-local, align 4
  %v1_14214 = inttoptr i32 %v0_14214 to i32*
  %v2_14214 = load i32, i32* %v1_14214, align 4
  store i32 %v2_14214, i32* @lr, align 4
  %v4_14214 = add i32 %v0_14214, 4
  store i32 %v4_14214, i32* %r1.global-to-local, align 4
  %v4_14218 = mul i32 %v2_14214, 65536
  %v5_14218 = or i32 %v4_14218, %v3_14210
  store i32 %v5_14218, i32* @ip, align 4
  %v2_1421c = inttoptr i32 %v1_1421c to i32*
  store i32 %v5_14218, i32* %v2_1421c, align 4
  %v3_1421c = load i32, i32* @r0, align 4
  %v4_1421c = add i32 %v3_1421c, 4
  store i32 %v4_1421c, i32* @r0, align 4
  %v0_14220 = load i32, i32* %r2.global-to-local, align 4
  %v2_14220 = add i32 %v0_14220, -4
  store i32 %v2_14220, i32* %r2.global-to-local, align 4
  %v6_14224 = icmp slt i32 %v0_14220, 4
  br i1 %v6_14224, label %dec_label_pc_14228.loopexit, label %dec_label_pc_14210

dec_label_pc_14228.loopexit:                      ; preds = %dec_label_pc_14210
  %v4_14220 = sub i32 3, %v0_14220
  %v5_14220 = and i32 %v4_14220, %v0_14220
  %v6_14220 = icmp slt i32 %v5_14220, 0
  %v7_14220 = icmp slt i32 %v2_14220, 0
  store i1 %v6_14220, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14220, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14228

dec_label_pc_14228:                               ; preds = %dec_label_pc_14228.loopexit, %dec_label_pc_14204
  %v2_140fc112 = phi i32 [ %v4_1421c, %dec_label_pc_14228.loopexit ], [ %v12_141f8, %dec_label_pc_14204 ]
  %v0_140ec108 = phi i32 [ %v2_14220, %dec_label_pc_14228.loopexit ], [ %v2_14208, %dec_label_pc_14204 ]
  %v0_14228 = load i32, i32* %r1.global-to-local, align 4
  %v1_14228 = add i32 %v0_14228, -2
  store i32 %v1_14228, i32* @r1, align 4
  br label %bb131

dec_label_pc_14230:                               ; preds = %dec_label_pc_14144
  br i1 %v5_14234, label %dec_label_pc_1427c, label %dec_label_pc_14238

dec_label_pc_14238:                               ; preds = %dec_label_pc_14230
  store i32 %v2_14230, i32* %r2.global-to-local, align 4
  %v3_1423c = load i32, i32* @r4, align 4
  store i32 %v3_1423c, i32* %stack_var_-16, align 4
  %v6_1423c = load i32, i32* @r5, align 4
  store i32 %v6_1423c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14240

dec_label_pc_14240:                               ; preds = %dec_label_pc_14240.dec_label_pc_14240_crit_edge, %dec_label_pc_14238
  %v0_14264 = phi i32 [ %v12_14264, %dec_label_pc_14240.dec_label_pc_14240_crit_edge ], [ %v0_1418c74, %dec_label_pc_14238 ]
  %v0_14244 = phi i32 [ %v0_14244.pre, %dec_label_pc_14240.dec_label_pc_14240_crit_edge ], [ %v4_14148, %dec_label_pc_14238 ]
  %v0_14240 = phi i32 [ %v0_14240.pre, %dec_label_pc_14240.dec_label_pc_14240_crit_edge ], [ %v2_14148, %dec_label_pc_14238 ]
  %v3_14240 = udiv i32 %v0_14240, 16777216
  store i32 %v3_14240, i32* %r3.global-to-local, align 4
  %v1_14244 = inttoptr i32 %v0_14244 to i32*
  %v2_14244 = load i32, i32* %v1_14244, align 4
  store i32 %v2_14244, i32* %r4.global-to-local, align 4
  %v3_14244 = add i32 %v0_14244, 4
  %v4_14244 = inttoptr i32 %v3_14244 to i32*
  %v5_14244 = load i32, i32* %v4_14244, align 4
  store i32 %v5_14244, i32* %r5.global-to-local, align 4
  %v6_14244 = add i32 %v0_14244, 8
  %v7_14244 = inttoptr i32 %v6_14244 to i32*
  %v8_14244 = load i32, i32* %v7_14244, align 4
  store i32 %v8_14244, i32* %ip.global-to-local, align 4
  %v9_14244 = add i32 %v0_14244, 12
  %v10_14244 = inttoptr i32 %v9_14244 to i32*
  %v11_14244 = load i32, i32* %v10_14244, align 4
  store i32 %v11_14244, i32* @lr, align 4
  %v12_14244 = add i32 %v0_14244, 16
  store i32 %v12_14244, i32* %r1.global-to-local, align 4
  %v4_14248 = mul i32 %v2_14244, 256
  %v5_14248 = or i32 %v4_14248, %v3_14240
  store i32 %v5_14248, i32* %r3.global-to-local, align 4
  %v3_1424c = udiv i32 %v2_14244, 16777216
  %v4_14250 = mul i32 %v5_14244, 256
  %v5_14250 = or i32 %v4_14250, %v3_1424c
  store i32 %v5_14250, i32* %r4.global-to-local, align 4
  %v3_14254 = udiv i32 %v5_14244, 16777216
  %v4_14258 = mul i32 %v8_14244, 256
  %v5_14258 = or i32 %v4_14258, %v3_14254
  store i32 %v5_14258, i32* %r5.global-to-local, align 4
  %v3_1425c = udiv i32 %v8_14244, 16777216
  %v4_14260 = mul i32 %v11_14244, 256
  %v5_14260 = or i32 %v4_14260, %v3_1425c
  store i32 %v5_14260, i32* @ip, align 4
  %v1_14264 = inttoptr i32 %v0_14264 to i32*
  store i32 %v5_14248, i32* %v1_14264, align 4
  %v3_14264 = add i32 %v0_14264, 4
  %v4_14264 = inttoptr i32 %v3_14264 to i32*
  %v5_14264 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14264, i32* %v4_14264, align 4
  %v6_14264 = add i32 %v0_14264, 8
  %v7_14264 = inttoptr i32 %v6_14264 to i32*
  %v8_14264 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_14264, i32* %v7_14264, align 4
  %v9_14264 = add i32 %v0_14264, 12
  %v10_14264 = inttoptr i32 %v9_14264 to i32*
  %v11_14264 = load i32, i32* @ip, align 4
  store i32 %v11_14264, i32* %v10_14264, align 4
  %v12_14264 = add i32 %v0_14264, 16
  store i32 %v12_14264, i32* @r0, align 4
  %v0_14268 = load i32, i32* %r2.global-to-local, align 4
  %v2_14268 = add i32 %v0_14268, -16
  store i32 %v2_14268, i32* %r2.global-to-local, align 4
  %v6_1426c = icmp slt i32 %v0_14268, 16
  br i1 %v6_1426c, label %dec_label_pc_14270, label %dec_label_pc_14240.dec_label_pc_14240_crit_edge

dec_label_pc_14240.dec_label_pc_14240_crit_edge:  ; preds = %dec_label_pc_14240
  %v0_14240.pre = load i32, i32* @lr, align 4
  %v0_14244.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14240

dec_label_pc_14270:                               ; preds = %dec_label_pc_14240
  %v2_14270 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14270, i32* @r4, align 4
  %v5_14270 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_14270, i32* @r5, align 4
  %v2_14274 = add i32 %v0_14268, -4
  store i32 %v2_14274, i32* %r2.global-to-local, align 4
  %v4_14274 = add i32 %v0_14268, 2147483632
  %v5_14274 = and i32 %v2_14274, %v4_14274
  %v6_14274 = icmp slt i32 %v5_14274, 0
  store i1 %v6_14274, i1* %cpsr_v.global-to-local, align 1
  %v7_14274 = icmp slt i32 %v2_14274, 0
  store i1 %v7_14274, i1* %cpsr_n.global-to-local, align 1
  %v8_14274 = icmp eq i32 %v2_14274, 0
  store i1 %v8_14274, i1* %cpsr_z.global-to-local, align 1
  %v5_14278 = icmp slt i32 %v2_14268, -12
  br i1 %v5_14278, label %dec_label_pc_14294, label %dec_label_pc_1427c

dec_label_pc_1427c:                               ; preds = %dec_label_pc_14270, %dec_label_pc_14230, %dec_label_pc_1427c
  %v1_14288 = phi i32 [ %v4_14288, %dec_label_pc_1427c ], [ %v12_14264, %dec_label_pc_14270 ], [ %v0_1418c74, %dec_label_pc_14230 ]
  %v0_1427c = load i32, i32* @lr, align 4
  %v3_1427c = udiv i32 %v0_1427c, 16777216
  store i32 %v3_1427c, i32* %ip.global-to-local, align 4
  %v0_14280 = load i32, i32* %r1.global-to-local, align 4
  %v1_14280 = inttoptr i32 %v0_14280 to i32*
  %v2_14280 = load i32, i32* %v1_14280, align 4
  store i32 %v2_14280, i32* @lr, align 4
  %v4_14280 = add i32 %v0_14280, 4
  store i32 %v4_14280, i32* %r1.global-to-local, align 4
  %v4_14284 = mul i32 %v2_14280, 256
  %v5_14284 = or i32 %v4_14284, %v3_1427c
  store i32 %v5_14284, i32* @ip, align 4
  %v2_14288 = inttoptr i32 %v1_14288 to i32*
  store i32 %v5_14284, i32* %v2_14288, align 4
  %v3_14288 = load i32, i32* @r0, align 4
  %v4_14288 = add i32 %v3_14288, 4
  store i32 %v4_14288, i32* @r0, align 4
  %v0_1428c = load i32, i32* %r2.global-to-local, align 4
  %v2_1428c = add i32 %v0_1428c, -4
  store i32 %v2_1428c, i32* %r2.global-to-local, align 4
  %v6_14290 = icmp slt i32 %v0_1428c, 4
  br i1 %v6_14290, label %dec_label_pc_14294.loopexit, label %dec_label_pc_1427c

dec_label_pc_14294.loopexit:                      ; preds = %dec_label_pc_1427c
  %v4_1428c = sub i32 3, %v0_1428c
  %v5_1428c = and i32 %v4_1428c, %v0_1428c
  %v6_1428c = icmp slt i32 %v5_1428c, 0
  %v7_1428c = icmp slt i32 %v2_1428c, 0
  store i1 %v6_1428c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_1428c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14294

dec_label_pc_14294:                               ; preds = %dec_label_pc_14294.loopexit, %dec_label_pc_14270
  %v2_140fc113 = phi i32 [ %v4_14288, %dec_label_pc_14294.loopexit ], [ %v12_14264, %dec_label_pc_14270 ]
  %v0_140ec109 = phi i32 [ %v2_1428c, %dec_label_pc_14294.loopexit ], [ %v2_14274, %dec_label_pc_14270 ]
  %v0_14294 = load i32, i32* %r1.global-to-local, align 4
  %v1_14294 = add i32 %v0_14294, -1
  store i32 %v1_14294, i32* @r1, align 4
  br label %bb131

dec_label_pc_1429c:                               ; preds = %dec_label_pc_14050
  %v1_1429c = load i32, i32* @r2, align 4
  %v2_1429c = add i32 %v1_1429c, %v0_14050
  store i32 %v2_1429c, i32* %r1.global-to-local, align 4
  %v2_142a0 = add i32 %v1_1429c, %v1_14050
  store i32 %v2_142a0, i32* %r0.global-to-local, align 4
  %v2_142a4 = add i32 %v1_1429c, -4
  store i32 %v2_142a4, i32* %r2.global-to-local, align 4
  %v4_142a4 = sub i32 3, %v1_1429c
  %v5_142a4 = and i32 %v4_142a4, %v1_1429c
  %v6_142a4 = icmp slt i32 %v5_142a4, 0
  store i1 %v6_142a4, i1* %cpsr_v.global-to-local, align 1
  %v7_142a4 = icmp slt i32 %v2_142a4, 0
  store i1 %v7_142a4, i1* %cpsr_n.global-to-local, align 1
  %v8_142a4 = icmp eq i32 %v1_1429c, 4
  store i1 %v8_142a4, i1* %cpsr_z.global-to-local, align 1
  %v5_142a8 = icmp slt i32 %v1_1429c, 4
  br i1 %v5_142a8, label %bb141, label %dec_label_pc_142ac

dec_label_pc_142ac:                               ; preds = %dec_label_pc_1429c
  %v1_142ac = urem i32 %v2_142a0, 4
  store i32 %v1_142ac, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_142ac = icmp eq i32 %v1_142ac, 0
  store i1 %v2_142ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_142ac, label %dec_label_pc_142b4, label %dec_label_pc_14354

dec_label_pc_142b4:                               ; preds = %dec_label_pc_142ac
  %v1_142b4 = urem i32 %v2_1429c, 4
  store i32 %v1_142b4, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_142b4 = icmp eq i32 %v1_142b4, 0
  store i1 %v2_142b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_142b4, label %dec_label_pc_142bc, label %dec_label_pc_14380

dec_label_pc_142bc:                               ; preds = %dec_label_pc_142b4, %dec_label_pc_14378
  %v0_142d448 = phi i32 [ %v2_142a0, %dec_label_pc_142b4 ], [ %v0_143c831, %dec_label_pc_14378 ]
  %v0_142d047 = phi i32 [ %v2_1429c, %dec_label_pc_142b4 ], [ %v0_14378, %dec_label_pc_14378 ]
  %v0_142bc = phi i32 [ %v2_142a4, %dec_label_pc_142b4 ], [ %v2_14370, %dec_label_pc_14378 ]
  %v2_142bc = add i32 %v0_142bc, -8
  store i32 %v2_142bc, i32* %r2.global-to-local, align 4
  %v4_142bc = sub i32 7, %v0_142bc
  %v5_142bc = and i32 %v4_142bc, %v0_142bc
  %v6_142bc = icmp slt i32 %v5_142bc, 0
  store i1 %v6_142bc, i1* %cpsr_v.global-to-local, align 1
  %v7_142bc = icmp slt i32 %v2_142bc, 0
  store i1 %v7_142bc, i1* %cpsr_n.global-to-local, align 1
  %v8_142bc = icmp eq i32 %v0_142bc, 8
  store i1 %v8_142bc, i1* %cpsr_z.global-to-local, align 1
  %v5_142c0 = icmp slt i32 %v0_142bc, 8
  br i1 %v5_142c0, label %dec_label_pc_1430c, label %dec_label_pc_142c4

dec_label_pc_142c4:                               ; preds = %dec_label_pc_142bc
  %v3_142c4 = load i32, i32* @r4, align 4
  store i32 %v3_142c4, i32* %stack_var_-8, align 4
  %v6_142c4 = load i32, i32* @lr, align 4
  %v2_142c8 = add i32 %v0_142bc, -28
  store i32 %v2_142c8, i32* %r2.global-to-local, align 4
  %v4_142c8 = sub i32 27, %v0_142bc
  %v5_142c8 = and i32 %v4_142c8, %v2_142bc
  %v6_142c8 = icmp slt i32 %v5_142c8, 0
  store i1 %v6_142c8, i1* %cpsr_v.global-to-local, align 1
  %v7_142c8 = icmp slt i32 %v2_142c8, 0
  store i1 %v7_142c8, i1* %cpsr_n.global-to-local, align 1
  %v8_142c8 = icmp eq i32 %v2_142bc, 20
  store i1 %v8_142c8, i1* %cpsr_z.global-to-local, align 1
  %v5_142cc = icmp slt i32 %v2_142bc, 20
  br i1 %v5_142cc, label %dec_label_pc_142e8, label %dec_label_pc_142d0

dec_label_pc_142d0:                               ; preds = %dec_label_pc_142c4, %dec_label_pc_142d0.dec_label_pc_142d0_crit_edge
  %v0_142d4 = phi i32 [ %v1_142dc, %dec_label_pc_142d0.dec_label_pc_142d0_crit_edge ], [ %v0_142d448, %dec_label_pc_142c4 ]
  %v0_142d0 = phi i32 [ %v0_142d0.pre, %dec_label_pc_142d0.dec_label_pc_142d0_crit_edge ], [ %v0_142d047, %dec_label_pc_142c4 ]
  %v1_142d0 = add i32 %v0_142d0, -4
  %v2_142d0 = inttoptr i32 %v1_142d0 to i32*
  %v3_142d0 = load i32, i32* %v2_142d0, align 4
  store i32 %v3_142d0, i32* %r3.global-to-local, align 4
  %v4_142d0 = add i32 %v0_142d0, -8
  %v5_142d0 = inttoptr i32 %v4_142d0 to i32*
  %v6_142d0 = load i32, i32* %v5_142d0, align 4
  store i32 %v6_142d0, i32* %r4.global-to-local, align 4
  %v7_142d0 = add i32 %v0_142d0, -12
  %v8_142d0 = inttoptr i32 %v7_142d0 to i32*
  %v9_142d0 = load i32, i32* %v8_142d0, align 4
  store i32 %v9_142d0, i32* %ip.global-to-local, align 4
  %v10_142d0 = add i32 %v0_142d0, -16
  %v11_142d0 = inttoptr i32 %v10_142d0 to i32*
  %v12_142d0 = load i32, i32* %v11_142d0, align 4
  store i32 %v12_142d0, i32* %lr.global-to-local, align 4
  store i32 %v10_142d0, i32* %r1.global-to-local, align 4
  %v1_142d4 = add i32 %v0_142d4, -16
  %v2_142d4 = inttoptr i32 %v1_142d4 to i32*
  store i32 %v3_142d0, i32* %v2_142d4, align 4
  %v4_142d4 = add i32 %v0_142d4, -12
  %v5_142d4 = inttoptr i32 %v4_142d4 to i32*
  %v6_142d4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_142d4, i32* %v5_142d4, align 4
  %v7_142d4 = add i32 %v0_142d4, -8
  %v8_142d4 = inttoptr i32 %v7_142d4 to i32*
  %v9_142d4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_142d4, i32* %v8_142d4, align 4
  %v10_142d4 = add i32 %v0_142d4, -4
  %v11_142d4 = inttoptr i32 %v10_142d4 to i32*
  %v12_142d4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_142d4, i32* %v11_142d4, align 4
  store i32 %v1_142d4, i32* %r0.global-to-local, align 4
  %v0_142d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_142d8 = add i32 %v0_142d8, -4
  %v2_142d8 = inttoptr i32 %v1_142d8 to i32*
  %v3_142d8 = load i32, i32* %v2_142d8, align 4
  store i32 %v3_142d8, i32* %r3.global-to-local, align 4
  %v4_142d8 = add i32 %v0_142d8, -8
  %v5_142d8 = inttoptr i32 %v4_142d8 to i32*
  %v6_142d8 = load i32, i32* %v5_142d8, align 4
  store i32 %v6_142d8, i32* %r4.global-to-local, align 4
  %v7_142d8 = add i32 %v0_142d8, -12
  %v8_142d8 = inttoptr i32 %v7_142d8 to i32*
  %v9_142d8 = load i32, i32* %v8_142d8, align 4
  store i32 %v9_142d8, i32* @ip, align 4
  %v10_142d8 = add i32 %v0_142d8, -16
  %v11_142d8 = inttoptr i32 %v10_142d8 to i32*
  %v12_142d8 = load i32, i32* %v11_142d8, align 4
  store i32 %v12_142d8, i32* %lr.global-to-local, align 4
  store i32 %v10_142d8, i32* %r1.global-to-local, align 4
  %v1_142dc = add i32 %v0_142d4, -32
  %v2_142dc = inttoptr i32 %v1_142dc to i32*
  store i32 %v3_142d8, i32* %v2_142dc, align 4
  %v4_142dc = add i32 %v0_142d4, -28
  %v5_142dc = inttoptr i32 %v4_142dc to i32*
  %v6_142dc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_142dc, i32* %v5_142dc, align 4
  %v7_142dc = add i32 %v0_142d4, -24
  %v8_142dc = inttoptr i32 %v7_142dc to i32*
  %v9_142dc = load i32, i32* @ip, align 4
  store i32 %v9_142dc, i32* %v8_142dc, align 4
  %v10_142dc = add i32 %v0_142d4, -20
  %v11_142dc = inttoptr i32 %v10_142dc to i32*
  %v12_142dc = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_142dc, i32* %v11_142dc, align 4
  store i32 %v1_142dc, i32* %r0.global-to-local, align 4
  %v0_142e0 = load i32, i32* %r2.global-to-local, align 4
  %v2_142e0 = add i32 %v0_142e0, -32
  store i32 %v2_142e0, i32* %r2.global-to-local, align 4
  %v6_142e4 = icmp slt i32 %v0_142e0, 32
  br i1 %v6_142e4, label %dec_label_pc_142e8.loopexit, label %dec_label_pc_142d0.dec_label_pc_142d0_crit_edge

dec_label_pc_142d0.dec_label_pc_142d0_crit_edge:  ; preds = %dec_label_pc_142d0
  %v0_142d0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_142d0

dec_label_pc_142e8.loopexit:                      ; preds = %dec_label_pc_142d0
  %v4_142e0 = sub i32 31, %v0_142e0
  %v5_142e0 = and i32 %v4_142e0, %v0_142e0
  %v6_142e0 = icmp slt i32 %v5_142e0, 0
  %v7_142e0 = icmp slt i32 %v2_142e0, 0
  store i1 %v6_142e0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_142e0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_142e8

dec_label_pc_142e8:                               ; preds = %dec_label_pc_142e8.loopexit, %dec_label_pc_142c4
  %v6_142f0 = phi i32 [ %v1_142dc, %dec_label_pc_142e8.loopexit ], [ %v0_142d448, %dec_label_pc_142c4 ]
  %v0_142f8.pr = phi i32 [ %v2_142e0, %dec_label_pc_142e8.loopexit ], [ %v2_142c8, %dec_label_pc_142c4 ]
  %v4_142e8 = add i32 %v0_142f8.pr, 16
  %v6_142e8 = sub i32 0, %v0_142f8.pr
  %v7_142e8 = and i32 %v4_142e8, %v6_142e8
  %v8_142e8 = icmp slt i32 %v7_142e8, 0
  store i1 %v8_142e8, i1* %cpsr_v.global-to-local, align 1
  %v9_142e8 = icmp slt i32 %v4_142e8, 0
  store i1 %v9_142e8, i1* %cpsr_n.global-to-local, align 1
  %v10_142e8 = icmp eq i32 %v4_142e8, 0
  store i1 %v10_142e8, i1* %cpsr_z.global-to-local, align 1
  %v5_142ec = icmp slt i32 %v0_142f8.pr, -16
  br i1 %v5_142ec, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_142e8
  %v6_142ec = load i32, i32* %r1.global-to-local, align 4
  %v7_142ec = add i32 %v6_142ec, -4
  %v8_142ec = inttoptr i32 %v7_142ec to i32*
  %v9_142ec = load i32, i32* %v8_142ec, align 4
  store i32 %v9_142ec, i32* %r3.global-to-local, align 4
  %v10_142ec = add i32 %v6_142ec, -8
  %v11_142ec = inttoptr i32 %v10_142ec to i32*
  %v12_142ec = load i32, i32* %v11_142ec, align 4
  store i32 %v12_142ec, i32* %r4.global-to-local, align 4
  %v13_142ec = add i32 %v6_142ec, -12
  %v14_142ec = inttoptr i32 %v13_142ec to i32*
  %v15_142ec = load i32, i32* %v14_142ec, align 4
  store i32 %v15_142ec, i32* @ip, align 4
  %v16_142ec = add i32 %v6_142ec, -16
  %v17_142ec = inttoptr i32 %v16_142ec to i32*
  %v18_142ec = load i32, i32* %v17_142ec, align 4
  store i32 %v18_142ec, i32* %lr.global-to-local, align 4
  store i32 %v16_142ec, i32* %r1.global-to-local, align 4
  %v7_142f0 = add i32 %v6_142f0, -16
  %v8_142f0 = inttoptr i32 %v7_142f0 to i32*
  store i32 %v9_142ec, i32* %v8_142f0, align 4
  %v10_142f0 = add i32 %v6_142f0, -12
  %v11_142f0 = inttoptr i32 %v10_142f0 to i32*
  %v12_142f0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_142f0, i32* %v11_142f0, align 4
  %v13_142f0 = add i32 %v6_142f0, -8
  %v14_142f0 = inttoptr i32 %v13_142f0 to i32*
  %v15_142f0 = load i32, i32* @ip, align 4
  store i32 %v15_142f0, i32* %v14_142f0, align 4
  %v16_142f0 = add i32 %v6_142f0, -4
  %v17_142f0 = inttoptr i32 %v16_142f0 to i32*
  %v18_142f0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_142f0, i32* %v17_142f0, align 4
  store i32 %v7_142f0, i32* %r0.global-to-local, align 4
  %v6_142f4 = load i32, i32* %r2.global-to-local, align 4
  %v7_142f4 = add i32 %v6_142f4, -16
  store i32 %v7_142f4, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_142e8, %bb138
  %v6_14300 = phi i32 [ %v7_142f0, %bb138 ], [ %v6_142f0, %dec_label_pc_142e8 ]
  %v0_142f8 = phi i32 [ %v7_142f4, %bb138 ], [ %v0_142f8.pr, %dec_label_pc_142e8 ]
  %v4_142f8 = add i32 %v0_142f8, 20
  store i32 %v4_142f8, i32* %r2.global-to-local, align 4
  %v6_142f8 = sub i32 0, %v0_142f8
  %v7_142f8 = and i32 %v4_142f8, %v6_142f8
  %v8_142f8 = icmp slt i32 %v7_142f8, 0
  store i1 %v8_142f8, i1* %cpsr_v.global-to-local, align 1
  %v9_142f8 = icmp slt i32 %v4_142f8, 0
  store i1 %v9_142f8, i1* %cpsr_n.global-to-local, align 1
  %v10_142f8 = icmp eq i32 %v4_142f8, 0
  store i1 %v10_142f8, i1* %cpsr_z.global-to-local, align 1
  %v5_142fc = icmp slt i32 %v0_142f8, -20
  br i1 %v5_142fc, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_142fc = load i32, i32* %r1.global-to-local, align 4
  %v7_142fc = add i32 %v6_142fc, -4
  %v8_142fc = inttoptr i32 %v7_142fc to i32*
  %v9_142fc = load i32, i32* %v8_142fc, align 4
  store i32 %v9_142fc, i32* %r3.global-to-local, align 4
  %v10_142fc = add i32 %v6_142fc, -8
  %v11_142fc = inttoptr i32 %v10_142fc to i32*
  %v12_142fc = load i32, i32* %v11_142fc, align 4
  store i32 %v12_142fc, i32* @ip, align 4
  %v13_142fc = add i32 %v6_142fc, -12
  %v14_142fc = inttoptr i32 %v13_142fc to i32*
  %v15_142fc = load i32, i32* %v14_142fc, align 4
  store i32 %v15_142fc, i32* %lr.global-to-local, align 4
  store i32 %v13_142fc, i32* %r1.global-to-local, align 4
  %v7_14300 = add i32 %v6_14300, -12
  %v8_14300 = inttoptr i32 %v7_14300 to i32*
  store i32 %v9_142fc, i32* %v8_14300, align 4
  %v10_14300 = add i32 %v6_14300, -8
  %v11_14300 = inttoptr i32 %v10_14300 to i32*
  %v12_14300 = load i32, i32* @ip, align 4
  store i32 %v12_14300, i32* %v11_14300, align 4
  %v13_14300 = add i32 %v6_14300, -4
  %v14_14300 = inttoptr i32 %v13_14300 to i32*
  %v15_14300 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_14300, i32* %v14_14300, align 4
  store i32 %v7_14300, i32* %r0.global-to-local, align 4
  %v6_14304 = load i32, i32* %r2.global-to-local, align 4
  %v7_14304 = add i32 %v6_14304, -12
  store i32 %v7_14304, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_1432456 = phi i32 [ %v6_14300, %.thread13 ], [ %v7_14300, %bb139 ]
  %v0_1430c54 = phi i32 [ %v4_142f8, %.thread13 ], [ %v7_14304, %bb139 ]
  %v2_14308 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14308, i32* @r4, align 4
  store i32 %v6_142c4, i32* @lr, align 4
  br label %dec_label_pc_1430c

dec_label_pc_1430c:                               ; preds = %dec_label_pc_142bc, %.thread15
  %v7_1431c = phi i32 [ %v0_142d448, %dec_label_pc_142bc ], [ %v6_1432456, %.thread15 ]
  %v0_1430c = phi i32 [ %v2_142bc, %dec_label_pc_142bc ], [ %v0_1430c54, %.thread15 ]
  %v2_1430c = add i32 %v0_1430c, 8
  store i32 %v2_1430c, i32* %r2.global-to-local, align 4
  %v4_1430c = sub i32 0, %v0_1430c
  %v5_1430c = and i32 %v2_1430c, %v4_1430c
  %v6_1430c = icmp slt i32 %v5_1430c, 0
  store i1 %v6_1430c, i1* %cpsr_v.global-to-local, align 1
  %v7_1430c = icmp slt i32 %v2_1430c, 0
  store i1 %v7_1430c, i1* %cpsr_n.global-to-local, align 1
  %v8_1430c = icmp eq i32 %v2_1430c, 0
  store i1 %v8_1430c, i1* %cpsr_z.global-to-local, align 1
  %v5_14310 = icmp slt i32 %v0_1430c, -8
  br i1 %v5_14310, label %bb141, label %dec_label_pc_14314

dec_label_pc_14314:                               ; preds = %dec_label_pc_1430c
  %v6_14314 = add i32 %v0_1430c, 4
  store i32 %v6_14314, i32* %r2.global-to-local, align 4
  %v8_14314 = sub i32 -5, %v0_1430c
  %v9_14314 = and i32 %v8_14314, %v2_1430c
  %v10_14314 = icmp slt i32 %v9_14314, 0
  store i1 %v10_14314, i1* %cpsr_v.global-to-local, align 1
  %v11_14314 = icmp slt i32 %v6_14314, 0
  store i1 %v11_14314, i1* %cpsr_n.global-to-local, align 1
  %v12_14314 = icmp eq i32 %v2_1430c, 4
  store i1 %v12_14314, i1* %cpsr_z.global-to-local, align 1
  %v5_14318 = icmp slt i32 %v2_1430c, 4
  %v6_14318 = load i32, i32* %r1.global-to-local, align 4
  %v7_14318 = add i32 %v6_14318, -4
  %v8_14318 = inttoptr i32 %v7_14318 to i32*
  %v9_14318 = load i32, i32* %v8_14318, align 4
  store i32 %v9_14318, i32* %r3.global-to-local, align 4
  br i1 %v5_14318, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_14314
  store i32 %v7_14318, i32* %r1.global-to-local, align 4
  %v8_1431c = add i32 %v7_1431c, -4
  %v9_1431c = inttoptr i32 %v8_1431c to i32*
  store i32 %v9_14318, i32* %v9_1431c, align 4
  %v10_1431c = load i32, i32* %r0.global-to-local, align 4
  %v11_1431c = add i32 %v10_1431c, -4
  store i32 %v11_1431c, i32* %r0.global-to-local, align 4
  %v0_1432c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_14314
  %v10_14320 = add i32 %v6_14318, -8
  %v11_14320 = inttoptr i32 %v10_14320 to i32*
  %v12_14320 = load i32, i32* %v11_14320, align 4
  store i32 %v12_14320, i32* @ip, align 4
  store i32 %v10_14320, i32* %r1.global-to-local, align 4
  %v7_14324 = add i32 %v7_1431c, -8
  %v8_14324 = inttoptr i32 %v7_14324 to i32*
  store i32 %v9_14318, i32* %v8_14324, align 4
  %v10_14324 = add i32 %v7_1431c, -4
  %v11_14324 = inttoptr i32 %v10_14324 to i32*
  %v12_14324 = load i32, i32* @ip, align 4
  store i32 %v12_14324, i32* %v11_14324, align 4
  store i32 %v7_14324, i32* %r0.global-to-local, align 4
  %v6_14328 = load i32, i32* %r2.global-to-local, align 4
  %v7_14328 = add i32 %v6_14328, -4
  store i32 %v7_14328, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_1430c, %dec_label_pc_1429c, %dec_label_pc_144d0, %dec_label_pc_14464, %dec_label_pc_143f8, %bb140
  %v2_14330 = phi i32 [ %v11_1431c, %.thread19 ], [ %v0_143c831, %.thread25 ], [ %v7_1431c, %dec_label_pc_1430c ], [ %v2_142a0, %dec_label_pc_1429c ], [ %v2_1433c64, %dec_label_pc_144d0 ], [ %v2_1433c63, %dec_label_pc_14464 ], [ %v2_1433c62, %dec_label_pc_143f8 ], [ %v7_14324, %bb140 ]
  %v0_1432c = phi i32 [ %v0_1432c.pre, %.thread19 ], [ %v2_14370, %.thread25 ], [ %v2_1430c, %dec_label_pc_1430c ], [ %v2_142a4, %dec_label_pc_1429c ], [ %v0_1432c60, %dec_label_pc_144d0 ], [ %v0_1432c59, %dec_label_pc_14464 ], [ %v0_1432c58, %dec_label_pc_143f8 ], [ %v7_14328, %bb140 ]
  %v1_1432c = add i32 %v0_1432c, 4
  store i32 %v1_1432c, i32* %r2.global-to-local, align 4
  %v3_1432c = sub i32 0, %v0_1432c
  %v4_1432c = and i32 %v1_1432c, %v3_1432c
  %v5_1432c = icmp slt i32 %v4_1432c, 0
  store i1 %v5_1432c, i1* %cpsr_v.global-to-local, align 1
  %v6_1432c = icmp slt i32 %v1_1432c, 0
  store i1 %v6_1432c, i1* %cpsr_n.global-to-local, align 1
  %v7_1432c = icmp eq i32 %v1_1432c, 0
  store i1 %v7_1432c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1432c, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_14334 = add i32 %v0_1432c, 2
  %v3_14334 = sub i32 -3, %v0_1432c
  %v4_14334 = and i32 %v3_14334, %v1_1432c
  %v5_14334 = icmp slt i32 %v4_14334, 0
  store i1 %v5_14334, i1* %cpsr_v.global-to-local, align 1
  %v6_14334 = icmp slt i32 %v1_14334, 0
  store i1 %v6_14334, i1* %cpsr_n.global-to-local, align 1
  %v7_14334 = icmp eq i32 %v1_1432c, 2
  store i1 %v7_14334, i1* %cpsr_z.global-to-local, align 1
  %v0_14338 = load i32, i32* %r1.global-to-local, align 4
  %v1_14338 = add i32 %v0_14338, -1
  %v2_14338 = inttoptr i32 %v1_14338 to i8*
  %v3_14338 = load i8, i8* %v2_14338, align 1
  %v4_14338 = zext i8 %v3_14338 to i32
  store i32 %v4_14338, i32* %r3.global-to-local, align 4
  store i32 %v1_14338, i32* %r1.global-to-local, align 4
  %v3_1433c = add i32 %v2_14330, -1
  %v4_1433c = inttoptr i32 %v3_1433c to i8*
  store i8 %v3_14338, i8* %v4_1433c, align 1
  %v5_1433c = load i32, i32* %r0.global-to-local, align 4
  %v6_1433c = add i32 %v5_1433c, -1
  store i32 %v6_1433c, i32* %r0.global-to-local, align 4
  %v0_14340 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_14340 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_14340 = xor i1 %v0_14340, %v1_14340
  br i1 %v2_14340, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_14340 = load i32, i32* %r1.global-to-local, align 4
  %v4_14340 = add i32 %v3_14340, -1
  %v5_14340 = inttoptr i32 %v4_14340 to i8*
  %v6_14340 = load i8, i8* %v5_14340, align 1
  %v7_14340 = zext i8 %v6_14340 to i32
  store i32 %v7_14340, i32* %r3.global-to-local, align 4
  store i32 %v4_14340, i32* %r1.global-to-local, align 4
  %v6_14344 = add i32 %v5_1433c, -2
  %v7_14344 = inttoptr i32 %v6_14344 to i8*
  store i8 %v6_14340, i8* %v7_14344, align 1
  %v8_14344 = load i32, i32* %r0.global-to-local, align 4
  %v9_14344 = add i32 %v8_14344, -1
  store i32 %v9_14344, i32* %r0.global-to-local, align 4
  %v1_14348.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_14348.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_1434c = phi i32 [ %v9_14344, %bb143 ], [ %v6_1433c, %bb142 ]
  %v2_1434c = phi i1 [ %v2_14348.pre, %bb143 ], [ %v1_14340, %bb142 ]
  %v1_1434c = phi i1 [ %v1_14348.pre, %bb143 ], [ %v0_14340, %bb142 ]
  %v0_14348 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_14348 = xor i1 %v2_1434c, %v1_1434c
  %v4_14348 = or i1 %v0_14348, %v3_14348
  br i1 %v4_14348, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_14348 = load i32, i32* %r1.global-to-local, align 4
  %v6_14348 = add i32 %v5_14348, -1
  %v7_14348 = inttoptr i32 %v6_14348 to i8*
  %v8_14348 = load i8, i8* %v7_14348, align 1
  %v9_14348 = zext i8 %v8_14348 to i32
  store i32 %v9_14348, i32* %r3.global-to-local, align 4
  store i32 %v6_14348, i32* %r1.global-to-local, align 4
  %v8_1434c = add i32 %v7_1434c, -1
  %v9_1434c = inttoptr i32 %v8_1434c to i8*
  store i8 %v8_14348, i8* %v9_1434c, align 1
  %v10_1434c = load i32, i32* %r0.global-to-local, align 4
  %v11_1434c = add i32 %v10_1434c, -1
  store i32 %v11_1434c, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_14354:                               ; preds = %dec_label_pc_142ac
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_14354 = icmp eq i32 %v1_142ac, 1
  store i1 %v8_14354, i1* %cpsr_n.global-to-local, align 1
  %v9_14354 = icmp eq i32 %v1_142ac, 2
  store i1 %v9_14354, i1* %cpsr_z.global-to-local, align 1
  %v1_14358 = add i32 %v2_1429c, -1
  %v2_14358 = inttoptr i32 %v1_14358 to i8*
  %v3_14358 = load i8, i8* %v2_14358, align 1
  %v4_14358 = zext i8 %v3_14358 to i32
  store i32 %v4_14358, i32* %r3.global-to-local, align 4
  store i32 %v1_14358, i32* %r1.global-to-local, align 4
  %v3_1435c = add i32 %v2_142a0, -1
  %v4_1435c = inttoptr i32 %v3_1435c to i8*
  store i8 %v3_14358, i8* %v4_1435c, align 1
  %v5_1435c = load i32, i32* %r0.global-to-local, align 4
  %v6_1435c = add i32 %v5_1435c, -1
  store i32 %v6_1435c, i32* %r0.global-to-local, align 4
  br i1 %v8_14354, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_14354
  %v6_14360 = load i32, i32* %r1.global-to-local, align 4
  %v7_14360 = add i32 %v6_14360, -1
  %v8_14360 = inttoptr i32 %v7_14360 to i8*
  %v9_14360 = load i8, i8* %v8_14360, align 1
  %v10_14360 = zext i8 %v9_14360 to i32
  store i32 %v10_14360, i32* %r3.global-to-local, align 4
  store i32 %v7_14360, i32* %r1.global-to-local, align 4
  %v9_14364 = add i32 %v5_1435c, -2
  %v10_14364 = inttoptr i32 %v9_14364 to i8*
  store i8 %v9_14360, i8* %v10_14364, align 1
  %v11_14364 = load i32, i32* %r0.global-to-local, align 4
  %v12_14364 = add i32 %v11_14364, -1
  store i32 %v12_14364, i32* %r0.global-to-local, align 4
  br i1 %v9_14354, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_14368 = load i32, i32* %r1.global-to-local, align 4
  %v9_14368 = add i32 %v8_14368, -1
  %v10_14368 = inttoptr i32 %v9_14368 to i8*
  %v11_14368 = load i8, i8* %v10_14368, align 1
  %v12_14368 = zext i8 %v11_14368 to i32
  store i32 %v12_14368, i32* %r3.global-to-local, align 4
  store i32 %v9_14368, i32* %r1.global-to-local, align 4
  %v11_1436c = add i32 %v11_14364, -2
  %v12_1436c = inttoptr i32 %v11_1436c to i8*
  store i8 %v11_14368, i8* %v12_1436c, align 1
  %v13_1436c = load i32, i32* %r0.global-to-local, align 4
  %v14_1436c = add i32 %v13_1436c, -1
  store i32 %v14_1436c, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_14354, %bb146
  %v0_143c831 = phi i32 [ %v12_14364, %bb145 ], [ %v6_1435c, %dec_label_pc_14354 ], [ %v14_1436c, %bb146 ]
  %v0_14370 = load i32, i32* %r2.global-to-local, align 4
  %v1_14370 = load i32, i32* @ip, align 4
  %v2_14370 = sub i32 %v0_14370, %v1_14370
  store i32 %v2_14370, i32* %r2.global-to-local, align 4
  %v4_14370 = xor i32 %v1_14370, %v0_14370
  %v5_14370 = xor i32 %v2_14370, %v0_14370
  %v6_14370 = and i32 %v5_14370, %v4_14370
  %v7_14370 = icmp slt i32 %v6_14370, 0
  store i1 %v7_14370, i1* %cpsr_v.global-to-local, align 1
  %v8_14370 = icmp slt i32 %v2_14370, 0
  store i1 %v8_14370, i1* %cpsr_n.global-to-local, align 1
  %v9_14370 = icmp eq i32 %v0_14370, %v1_14370
  store i1 %v9_14370, i1* %cpsr_z.global-to-local, align 1
  %v5_14374 = icmp slt i32 %v0_14370, %v1_14370
  br i1 %v5_14374, label %bb141, label %dec_label_pc_14378

dec_label_pc_14378:                               ; preds = %.thread25
  %v0_14378 = load i32, i32* %r1.global-to-local, align 4
  %v1_14378 = urem i32 %v0_14378, 4
  store i32 %v1_14378, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14378 = icmp eq i32 %v1_14378, 0
  store i1 %v2_14378, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14378, label %dec_label_pc_142bc, label %dec_label_pc_14380

dec_label_pc_14380:                               ; preds = %dec_label_pc_142b4, %dec_label_pc_14378
  %v0_143c830 = phi i32 [ %v2_142a0, %dec_label_pc_142b4 ], [ %v0_143c831, %dec_label_pc_14378 ]
  %v0_14474 = phi i32 [ %v2_142a4, %dec_label_pc_142b4 ], [ %v2_14370, %dec_label_pc_14378 ]
  %v0_14380 = phi i32 [ %v2_1429c, %dec_label_pc_142b4 ], [ %v0_14378, %dec_label_pc_14378 ]
  %v0_14388 = phi i32 [ %v1_142b4, %dec_label_pc_142b4 ], [ %v1_14378, %dec_label_pc_14378 ]
  %v1_14380 = and i32 %v0_14380, -4
  store i32 %v1_14380, i32* %r1.global-to-local, align 4
  %v1_14384 = inttoptr i32 %v1_14380 to i32*
  %v2_14384 = load i32, i32* %v1_14384, align 4
  store i32 %v2_14384, i32* %r3.global-to-local, align 4
  %v7_14388 = icmp ult i32 %v0_14388, 2
  %v2_1446c = add i32 %v0_14474, -12
  %v4_1446c = sub i32 11, %v0_14474
  %v5_1446c = and i32 %v4_1446c, %v0_14474
  %v6_1446c = icmp slt i32 %v5_1446c, 0
  store i1 %v6_1446c, i1* %cpsr_v.global-to-local, align 1
  %v7_1446c = icmp slt i32 %v2_1446c, 0
  store i1 %v7_1446c, i1* %cpsr_n.global-to-local, align 1
  %v8_1446c = icmp eq i32 %v0_14474, 12
  store i1 %v8_1446c, i1* %cpsr_z.global-to-local, align 1
  %v5_14470 = icmp slt i32 %v0_14474, 12
  br i1 %v7_14388, label %dec_label_pc_1446c, label %dec_label_pc_14390

dec_label_pc_14390:                               ; preds = %dec_label_pc_14380
  %v8_14388 = icmp eq i32 %v0_14388, 2
  br i1 %v8_14388, label %dec_label_pc_14400, label %dec_label_pc_14394

dec_label_pc_14394:                               ; preds = %dec_label_pc_14390
  br i1 %v5_14470, label %dec_label_pc_143e0, label %dec_label_pc_1439c

dec_label_pc_1439c:                               ; preds = %dec_label_pc_14394
  store i32 %v2_1446c, i32* %r2.global-to-local, align 4
  %v3_143a0 = load i32, i32* @r4, align 4
  store i32 %v3_143a0, i32* %stack_var_-12, align 4
  %v6_143a0 = load i32, i32* @r5, align 4
  store i32 %v6_143a0, i32* %stack_var_-8, align 4
  %v9_143a0 = load i32, i32* @lr, align 4
  br label %dec_label_pc_143a4

dec_label_pc_143a4:                               ; preds = %dec_label_pc_143a4.dec_label_pc_143a4_crit_edge, %dec_label_pc_1439c
  %v0_143c8 = phi i32 [ %v1_143c8, %dec_label_pc_143a4.dec_label_pc_143a4_crit_edge ], [ %v0_143c830, %dec_label_pc_1439c ]
  %v0_143a8 = phi i32 [ %v0_143a8.pre, %dec_label_pc_143a4.dec_label_pc_143a4_crit_edge ], [ %v1_14380, %dec_label_pc_1439c ]
  %v0_143a4 = phi i32 [ %v0_143a4.pre, %dec_label_pc_143a4.dec_label_pc_143a4_crit_edge ], [ %v2_14384, %dec_label_pc_1439c ]
  %v3_143a4 = mul i32 %v0_143a4, 256
  store i32 %v3_143a4, i32* %lr.global-to-local, align 4
  %v1_143a8 = add i32 %v0_143a8, -4
  %v2_143a8 = inttoptr i32 %v1_143a8 to i32*
  %v3_143a8 = load i32, i32* %v2_143a8, align 4
  store i32 %v3_143a8, i32* %r3.global-to-local, align 4
  %v4_143a8 = add i32 %v0_143a8, -8
  %v5_143a8 = inttoptr i32 %v4_143a8 to i32*
  %v6_143a8 = load i32, i32* %v5_143a8, align 4
  store i32 %v6_143a8, i32* %r4.global-to-local, align 4
  %v7_143a8 = add i32 %v0_143a8, -12
  %v8_143a8 = inttoptr i32 %v7_143a8 to i32*
  %v9_143a8 = load i32, i32* %v8_143a8, align 4
  store i32 %v9_143a8, i32* %r5.global-to-local, align 4
  %v10_143a8 = add i32 %v0_143a8, -16
  %v11_143a8 = inttoptr i32 %v10_143a8 to i32*
  %v12_143a8 = load i32, i32* %v11_143a8, align 4
  store i32 %v10_143a8, i32* %r1.global-to-local, align 4
  %v4_143ac = udiv i32 %v12_143a8, 16777216
  %v5_143ac = or i32 %v4_143ac, %v3_143a4
  store i32 %v5_143ac, i32* %lr.global-to-local, align 4
  %v3_143b0 = mul i32 %v12_143a8, 256
  %v4_143b4 = udiv i32 %v9_143a8, 16777216
  %v5_143b4 = or i32 %v3_143b0, %v4_143b4
  store i32 %v5_143b4, i32* @ip, align 4
  %v3_143b8 = mul i32 %v9_143a8, 256
  %v4_143bc = udiv i32 %v6_143a8, 16777216
  %v5_143bc = or i32 %v3_143b8, %v4_143bc
  store i32 %v5_143bc, i32* %r5.global-to-local, align 4
  %v3_143c0 = mul i32 %v6_143a8, 256
  %v4_143c4 = udiv i32 %v3_143a8, 16777216
  %v5_143c4 = or i32 %v3_143c0, %v4_143c4
  store i32 %v5_143c4, i32* %r4.global-to-local, align 4
  %v1_143c8 = add i32 %v0_143c8, -16
  %v2_143c8 = inttoptr i32 %v1_143c8 to i32*
  store i32 %v5_143c4, i32* %v2_143c8, align 4
  %v4_143c8 = add i32 %v0_143c8, -12
  %v5_143c8 = inttoptr i32 %v4_143c8 to i32*
  %v6_143c8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_143c8, i32* %v5_143c8, align 4
  %v7_143c8 = add i32 %v0_143c8, -8
  %v8_143c8 = inttoptr i32 %v7_143c8 to i32*
  %v9_143c8 = load i32, i32* @ip, align 4
  store i32 %v9_143c8, i32* %v8_143c8, align 4
  %v10_143c8 = add i32 %v0_143c8, -4
  %v11_143c8 = inttoptr i32 %v10_143c8 to i32*
  %v12_143c8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_143c8, i32* %v11_143c8, align 4
  store i32 %v1_143c8, i32* %r0.global-to-local, align 4
  %v0_143cc = load i32, i32* %r2.global-to-local, align 4
  %v2_143cc = add i32 %v0_143cc, -16
  store i32 %v2_143cc, i32* %r2.global-to-local, align 4
  %v6_143d0 = icmp slt i32 %v0_143cc, 16
  br i1 %v6_143d0, label %dec_label_pc_143d4, label %dec_label_pc_143a4.dec_label_pc_143a4_crit_edge

dec_label_pc_143a4.dec_label_pc_143a4_crit_edge:  ; preds = %dec_label_pc_143a4
  %v0_143a4.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_143a8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_143a4

dec_label_pc_143d4:                               ; preds = %dec_label_pc_143a4
  %v2_143d4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_143d4, i32* @r4, align 4
  %v5_143d4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_143d4, i32* @r5, align 4
  store i32 %v9_143a0, i32* @lr, align 4
  %v2_143d8 = add i32 %v0_143cc, -4
  store i32 %v2_143d8, i32* %r2.global-to-local, align 4
  %v4_143d8 = add i32 %v0_143cc, 2147483632
  %v5_143d8 = and i32 %v2_143d8, %v4_143d8
  %v6_143d8 = icmp slt i32 %v5_143d8, 0
  store i1 %v6_143d8, i1* %cpsr_v.global-to-local, align 1
  %v7_143d8 = icmp slt i32 %v2_143d8, 0
  store i1 %v7_143d8, i1* %cpsr_n.global-to-local, align 1
  %v8_143d8 = icmp eq i32 %v2_143d8, 0
  store i1 %v8_143d8, i1* %cpsr_z.global-to-local, align 1
  %v5_143dc = icmp slt i32 %v2_143cc, -12
  br i1 %v5_143dc, label %dec_label_pc_143f8, label %dec_label_pc_143e0

dec_label_pc_143e0:                               ; preds = %dec_label_pc_143d4, %dec_label_pc_14394, %dec_label_pc_143e0
  %v1_143ec = phi i32 [ %v5_143ec, %dec_label_pc_143e0 ], [ %v1_143c8, %dec_label_pc_143d4 ], [ %v0_143c830, %dec_label_pc_14394 ]
  %v0_143e0 = load i32, i32* %r3.global-to-local, align 4
  %v3_143e0 = mul i32 %v0_143e0, 256
  store i32 %v3_143e0, i32* %ip.global-to-local, align 4
  %v0_143e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_143e4 = add i32 %v0_143e4, -4
  %v2_143e4 = inttoptr i32 %v1_143e4 to i32*
  %v3_143e4 = load i32, i32* %v2_143e4, align 4
  store i32 %v3_143e4, i32* %r3.global-to-local, align 4
  store i32 %v1_143e4, i32* %r1.global-to-local, align 4
  %v4_143e8 = udiv i32 %v3_143e4, 16777216
  %v5_143e8 = or i32 %v4_143e8, %v3_143e0
  store i32 %v5_143e8, i32* @ip, align 4
  %v2_143ec = add i32 %v1_143ec, -4
  %v3_143ec = inttoptr i32 %v2_143ec to i32*
  store i32 %v5_143e8, i32* %v3_143ec, align 4
  %v4_143ec = load i32, i32* %r0.global-to-local, align 4
  %v5_143ec = add i32 %v4_143ec, -4
  store i32 %v5_143ec, i32* %r0.global-to-local, align 4
  %v0_143f0 = load i32, i32* %r2.global-to-local, align 4
  %v2_143f0 = add i32 %v0_143f0, -4
  store i32 %v2_143f0, i32* %r2.global-to-local, align 4
  %v6_143f4 = icmp slt i32 %v0_143f0, 4
  br i1 %v6_143f4, label %dec_label_pc_143f8.loopexit, label %dec_label_pc_143e0

dec_label_pc_143f8.loopexit:                      ; preds = %dec_label_pc_143e0
  %v4_143f0 = sub i32 3, %v0_143f0
  %v5_143f0 = and i32 %v4_143f0, %v0_143f0
  %v6_143f0 = icmp slt i32 %v5_143f0, 0
  %v7_143f0 = icmp slt i32 %v2_143f0, 0
  store i1 %v6_143f0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_143f0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_143f8

dec_label_pc_143f8:                               ; preds = %dec_label_pc_143f8.loopexit, %dec_label_pc_143d4
  %v2_1433c62 = phi i32 [ %v5_143ec, %dec_label_pc_143f8.loopexit ], [ %v1_143c8, %dec_label_pc_143d4 ]
  %v0_1432c58 = phi i32 [ %v2_143f0, %dec_label_pc_143f8.loopexit ], [ %v2_143d8, %dec_label_pc_143d4 ]
  %v0_143f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_143f8 = add i32 %v0_143f8, 3
  store i32 %v1_143f8, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_14400:                               ; preds = %dec_label_pc_14390
  br i1 %v5_14470, label %dec_label_pc_1444c, label %dec_label_pc_14408

dec_label_pc_14408:                               ; preds = %dec_label_pc_14400
  store i32 %v2_1446c, i32* %r2.global-to-local, align 4
  %v3_1440c = load i32, i32* @r4, align 4
  store i32 %v3_1440c, i32* %stack_var_-12, align 4
  %v6_1440c = load i32, i32* @r5, align 4
  store i32 %v6_1440c, i32* %stack_var_-8, align 4
  %v9_1440c = load i32, i32* @lr, align 4
  br label %dec_label_pc_14410

dec_label_pc_14410:                               ; preds = %dec_label_pc_14410.dec_label_pc_14410_crit_edge, %dec_label_pc_14408
  %v0_14434 = phi i32 [ %v1_14434, %dec_label_pc_14410.dec_label_pc_14410_crit_edge ], [ %v0_143c830, %dec_label_pc_14408 ]
  %v0_14414 = phi i32 [ %v0_14414.pre, %dec_label_pc_14410.dec_label_pc_14410_crit_edge ], [ %v1_14380, %dec_label_pc_14408 ]
  %v0_14410 = phi i32 [ %v0_14410.pre, %dec_label_pc_14410.dec_label_pc_14410_crit_edge ], [ %v2_14384, %dec_label_pc_14408 ]
  %v3_14410 = mul i32 %v0_14410, 65536
  store i32 %v3_14410, i32* %lr.global-to-local, align 4
  %v1_14414 = add i32 %v0_14414, -4
  %v2_14414 = inttoptr i32 %v1_14414 to i32*
  %v3_14414 = load i32, i32* %v2_14414, align 4
  store i32 %v3_14414, i32* %r3.global-to-local, align 4
  %v4_14414 = add i32 %v0_14414, -8
  %v5_14414 = inttoptr i32 %v4_14414 to i32*
  %v6_14414 = load i32, i32* %v5_14414, align 4
  store i32 %v6_14414, i32* %r4.global-to-local, align 4
  %v7_14414 = add i32 %v0_14414, -12
  %v8_14414 = inttoptr i32 %v7_14414 to i32*
  %v9_14414 = load i32, i32* %v8_14414, align 4
  store i32 %v9_14414, i32* %r5.global-to-local, align 4
  %v10_14414 = add i32 %v0_14414, -16
  %v11_14414 = inttoptr i32 %v10_14414 to i32*
  %v12_14414 = load i32, i32* %v11_14414, align 4
  store i32 %v10_14414, i32* %r1.global-to-local, align 4
  %v4_14418 = udiv i32 %v12_14414, 65536
  %v5_14418 = or i32 %v4_14418, %v3_14410
  store i32 %v5_14418, i32* %lr.global-to-local, align 4
  %v3_1441c = mul i32 %v12_14414, 65536
  %v4_14420 = udiv i32 %v9_14414, 65536
  %v5_14420 = or i32 %v3_1441c, %v4_14420
  store i32 %v5_14420, i32* @ip, align 4
  %v3_14424 = mul i32 %v9_14414, 65536
  %v4_14428 = udiv i32 %v6_14414, 65536
  %v5_14428 = or i32 %v3_14424, %v4_14428
  store i32 %v5_14428, i32* %r5.global-to-local, align 4
  %v3_1442c = mul i32 %v6_14414, 65536
  %v4_14430 = udiv i32 %v3_14414, 65536
  %v5_14430 = or i32 %v3_1442c, %v4_14430
  store i32 %v5_14430, i32* %r4.global-to-local, align 4
  %v1_14434 = add i32 %v0_14434, -16
  %v2_14434 = inttoptr i32 %v1_14434 to i32*
  store i32 %v5_14430, i32* %v2_14434, align 4
  %v4_14434 = add i32 %v0_14434, -12
  %v5_14434 = inttoptr i32 %v4_14434 to i32*
  %v6_14434 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_14434, i32* %v5_14434, align 4
  %v7_14434 = add i32 %v0_14434, -8
  %v8_14434 = inttoptr i32 %v7_14434 to i32*
  %v9_14434 = load i32, i32* @ip, align 4
  store i32 %v9_14434, i32* %v8_14434, align 4
  %v10_14434 = add i32 %v0_14434, -4
  %v11_14434 = inttoptr i32 %v10_14434 to i32*
  %v12_14434 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14434, i32* %v11_14434, align 4
  store i32 %v1_14434, i32* %r0.global-to-local, align 4
  %v0_14438 = load i32, i32* %r2.global-to-local, align 4
  %v2_14438 = add i32 %v0_14438, -16
  store i32 %v2_14438, i32* %r2.global-to-local, align 4
  %v6_1443c = icmp slt i32 %v0_14438, 16
  br i1 %v6_1443c, label %dec_label_pc_14440, label %dec_label_pc_14410.dec_label_pc_14410_crit_edge

dec_label_pc_14410.dec_label_pc_14410_crit_edge:  ; preds = %dec_label_pc_14410
  %v0_14410.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_14414.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14410

dec_label_pc_14440:                               ; preds = %dec_label_pc_14410
  %v2_14440 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14440, i32* @r4, align 4
  %v5_14440 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_14440, i32* @r5, align 4
  store i32 %v9_1440c, i32* @lr, align 4
  %v2_14444 = add i32 %v0_14438, -4
  store i32 %v2_14444, i32* %r2.global-to-local, align 4
  %v4_14444 = add i32 %v0_14438, 2147483632
  %v5_14444 = and i32 %v2_14444, %v4_14444
  %v6_14444 = icmp slt i32 %v5_14444, 0
  store i1 %v6_14444, i1* %cpsr_v.global-to-local, align 1
  %v7_14444 = icmp slt i32 %v2_14444, 0
  store i1 %v7_14444, i1* %cpsr_n.global-to-local, align 1
  %v8_14444 = icmp eq i32 %v2_14444, 0
  store i1 %v8_14444, i1* %cpsr_z.global-to-local, align 1
  %v5_14448 = icmp slt i32 %v2_14438, -12
  br i1 %v5_14448, label %dec_label_pc_14464, label %dec_label_pc_1444c

dec_label_pc_1444c:                               ; preds = %dec_label_pc_14440, %dec_label_pc_14400, %dec_label_pc_1444c
  %v1_14458 = phi i32 [ %v5_14458, %dec_label_pc_1444c ], [ %v1_14434, %dec_label_pc_14440 ], [ %v0_143c830, %dec_label_pc_14400 ]
  %v0_1444c = load i32, i32* %r3.global-to-local, align 4
  %v3_1444c = mul i32 %v0_1444c, 65536
  store i32 %v3_1444c, i32* %ip.global-to-local, align 4
  %v0_14450 = load i32, i32* %r1.global-to-local, align 4
  %v1_14450 = add i32 %v0_14450, -4
  %v2_14450 = inttoptr i32 %v1_14450 to i32*
  %v3_14450 = load i32, i32* %v2_14450, align 4
  store i32 %v3_14450, i32* %r3.global-to-local, align 4
  store i32 %v1_14450, i32* %r1.global-to-local, align 4
  %v4_14454 = udiv i32 %v3_14450, 65536
  %v5_14454 = or i32 %v4_14454, %v3_1444c
  store i32 %v5_14454, i32* @ip, align 4
  %v2_14458 = add i32 %v1_14458, -4
  %v3_14458 = inttoptr i32 %v2_14458 to i32*
  store i32 %v5_14454, i32* %v3_14458, align 4
  %v4_14458 = load i32, i32* %r0.global-to-local, align 4
  %v5_14458 = add i32 %v4_14458, -4
  store i32 %v5_14458, i32* %r0.global-to-local, align 4
  %v0_1445c = load i32, i32* %r2.global-to-local, align 4
  %v2_1445c = add i32 %v0_1445c, -4
  store i32 %v2_1445c, i32* %r2.global-to-local, align 4
  %v6_14460 = icmp slt i32 %v0_1445c, 4
  br i1 %v6_14460, label %dec_label_pc_14464.loopexit, label %dec_label_pc_1444c

dec_label_pc_14464.loopexit:                      ; preds = %dec_label_pc_1444c
  %v4_1445c = sub i32 3, %v0_1445c
  %v5_1445c = and i32 %v4_1445c, %v0_1445c
  %v6_1445c = icmp slt i32 %v5_1445c, 0
  %v7_1445c = icmp slt i32 %v2_1445c, 0
  store i1 %v6_1445c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_1445c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14464

dec_label_pc_14464:                               ; preds = %dec_label_pc_14464.loopexit, %dec_label_pc_14440
  %v2_1433c63 = phi i32 [ %v5_14458, %dec_label_pc_14464.loopexit ], [ %v1_14434, %dec_label_pc_14440 ]
  %v0_1432c59 = phi i32 [ %v2_1445c, %dec_label_pc_14464.loopexit ], [ %v2_14444, %dec_label_pc_14440 ]
  %v0_14464 = load i32, i32* %r1.global-to-local, align 4
  %v1_14464 = add i32 %v0_14464, 2
  store i32 %v1_14464, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_1446c:                               ; preds = %dec_label_pc_14380
  br i1 %v5_14470, label %dec_label_pc_144b8, label %dec_label_pc_14474

dec_label_pc_14474:                               ; preds = %dec_label_pc_1446c
  store i32 %v2_1446c, i32* %r2.global-to-local, align 4
  %v3_14478 = load i32, i32* @r4, align 4
  store i32 %v3_14478, i32* %stack_var_-12, align 4
  %v6_14478 = load i32, i32* @r5, align 4
  store i32 %v6_14478, i32* %stack_var_-8, align 4
  %v9_14478 = load i32, i32* @lr, align 4
  br label %dec_label_pc_1447c

dec_label_pc_1447c:                               ; preds = %dec_label_pc_1447c.dec_label_pc_1447c_crit_edge, %dec_label_pc_14474
  %v0_144a0 = phi i32 [ %v1_144a0, %dec_label_pc_1447c.dec_label_pc_1447c_crit_edge ], [ %v0_143c830, %dec_label_pc_14474 ]
  %v0_14480 = phi i32 [ %v0_14480.pre, %dec_label_pc_1447c.dec_label_pc_1447c_crit_edge ], [ %v1_14380, %dec_label_pc_14474 ]
  %v0_1447c = phi i32 [ %v0_1447c.pre, %dec_label_pc_1447c.dec_label_pc_1447c_crit_edge ], [ %v2_14384, %dec_label_pc_14474 ]
  %v3_1447c = mul i32 %v0_1447c, 16777216
  store i32 %v3_1447c, i32* %lr.global-to-local, align 4
  %v1_14480 = add i32 %v0_14480, -4
  %v2_14480 = inttoptr i32 %v1_14480 to i32*
  %v3_14480 = load i32, i32* %v2_14480, align 4
  store i32 %v3_14480, i32* %r3.global-to-local, align 4
  %v4_14480 = add i32 %v0_14480, -8
  %v5_14480 = inttoptr i32 %v4_14480 to i32*
  %v6_14480 = load i32, i32* %v5_14480, align 4
  store i32 %v6_14480, i32* %r4.global-to-local, align 4
  %v7_14480 = add i32 %v0_14480, -12
  %v8_14480 = inttoptr i32 %v7_14480 to i32*
  %v9_14480 = load i32, i32* %v8_14480, align 4
  store i32 %v9_14480, i32* %r5.global-to-local, align 4
  %v10_14480 = add i32 %v0_14480, -16
  %v11_14480 = inttoptr i32 %v10_14480 to i32*
  %v12_14480 = load i32, i32* %v11_14480, align 4
  store i32 %v10_14480, i32* %r1.global-to-local, align 4
  %v4_14484 = udiv i32 %v12_14480, 256
  %v5_14484 = or i32 %v4_14484, %v3_1447c
  store i32 %v5_14484, i32* %lr.global-to-local, align 4
  %v3_14488 = mul i32 %v12_14480, 16777216
  %v4_1448c = udiv i32 %v9_14480, 256
  %v5_1448c = or i32 %v3_14488, %v4_1448c
  store i32 %v5_1448c, i32* @ip, align 4
  %v3_14490 = mul i32 %v9_14480, 16777216
  %v4_14494 = udiv i32 %v6_14480, 256
  %v5_14494 = or i32 %v3_14490, %v4_14494
  store i32 %v5_14494, i32* %r5.global-to-local, align 4
  %v3_14498 = mul i32 %v6_14480, 16777216
  %v4_1449c = udiv i32 %v3_14480, 256
  %v5_1449c = or i32 %v3_14498, %v4_1449c
  store i32 %v5_1449c, i32* %r4.global-to-local, align 4
  %v1_144a0 = add i32 %v0_144a0, -16
  %v2_144a0 = inttoptr i32 %v1_144a0 to i32*
  store i32 %v5_1449c, i32* %v2_144a0, align 4
  %v4_144a0 = add i32 %v0_144a0, -12
  %v5_144a0 = inttoptr i32 %v4_144a0 to i32*
  %v6_144a0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_144a0, i32* %v5_144a0, align 4
  %v7_144a0 = add i32 %v0_144a0, -8
  %v8_144a0 = inttoptr i32 %v7_144a0 to i32*
  %v9_144a0 = load i32, i32* @ip, align 4
  store i32 %v9_144a0, i32* %v8_144a0, align 4
  %v10_144a0 = add i32 %v0_144a0, -4
  %v11_144a0 = inttoptr i32 %v10_144a0 to i32*
  %v12_144a0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_144a0, i32* %v11_144a0, align 4
  store i32 %v1_144a0, i32* %r0.global-to-local, align 4
  %v0_144a4 = load i32, i32* %r2.global-to-local, align 4
  %v2_144a4 = add i32 %v0_144a4, -16
  store i32 %v2_144a4, i32* %r2.global-to-local, align 4
  %v6_144a8 = icmp slt i32 %v0_144a4, 16
  br i1 %v6_144a8, label %dec_label_pc_144ac, label %dec_label_pc_1447c.dec_label_pc_1447c_crit_edge

dec_label_pc_1447c.dec_label_pc_1447c_crit_edge:  ; preds = %dec_label_pc_1447c
  %v0_1447c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_14480.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1447c

dec_label_pc_144ac:                               ; preds = %dec_label_pc_1447c
  %v2_144ac = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_144ac, i32* @r4, align 4
  %v5_144ac = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_144ac, i32* @r5, align 4
  store i32 %v9_14478, i32* @lr, align 4
  %v2_144b0 = add i32 %v0_144a4, -4
  store i32 %v2_144b0, i32* %r2.global-to-local, align 4
  %v4_144b0 = add i32 %v0_144a4, 2147483632
  %v5_144b0 = and i32 %v2_144b0, %v4_144b0
  %v6_144b0 = icmp slt i32 %v5_144b0, 0
  store i1 %v6_144b0, i1* %cpsr_v.global-to-local, align 1
  %v7_144b0 = icmp slt i32 %v2_144b0, 0
  store i1 %v7_144b0, i1* %cpsr_n.global-to-local, align 1
  %v8_144b0 = icmp eq i32 %v2_144b0, 0
  store i1 %v8_144b0, i1* %cpsr_z.global-to-local, align 1
  %v5_144b4 = icmp slt i32 %v2_144a4, -12
  br i1 %v5_144b4, label %dec_label_pc_144d0, label %dec_label_pc_144b8

dec_label_pc_144b8:                               ; preds = %dec_label_pc_144ac, %dec_label_pc_1446c, %dec_label_pc_144b8
  %v1_144c4 = phi i32 [ %v5_144c4, %dec_label_pc_144b8 ], [ %v1_144a0, %dec_label_pc_144ac ], [ %v0_143c830, %dec_label_pc_1446c ]
  %v0_144b8 = load i32, i32* %r3.global-to-local, align 4
  %v3_144b8 = mul i32 %v0_144b8, 16777216
  store i32 %v3_144b8, i32* %ip.global-to-local, align 4
  %v0_144bc = load i32, i32* %r1.global-to-local, align 4
  %v1_144bc = add i32 %v0_144bc, -4
  %v2_144bc = inttoptr i32 %v1_144bc to i32*
  %v3_144bc = load i32, i32* %v2_144bc, align 4
  store i32 %v3_144bc, i32* %r3.global-to-local, align 4
  store i32 %v1_144bc, i32* %r1.global-to-local, align 4
  %v4_144c0 = udiv i32 %v3_144bc, 256
  %v5_144c0 = or i32 %v4_144c0, %v3_144b8
  store i32 %v5_144c0, i32* @ip, align 4
  %v2_144c4 = add i32 %v1_144c4, -4
  %v3_144c4 = inttoptr i32 %v2_144c4 to i32*
  store i32 %v5_144c0, i32* %v3_144c4, align 4
  %v4_144c4 = load i32, i32* %r0.global-to-local, align 4
  %v5_144c4 = add i32 %v4_144c4, -4
  store i32 %v5_144c4, i32* %r0.global-to-local, align 4
  %v0_144c8 = load i32, i32* %r2.global-to-local, align 4
  %v2_144c8 = add i32 %v0_144c8, -4
  store i32 %v2_144c8, i32* %r2.global-to-local, align 4
  %v6_144cc = icmp slt i32 %v0_144c8, 4
  br i1 %v6_144cc, label %dec_label_pc_144d0.loopexit, label %dec_label_pc_144b8

dec_label_pc_144d0.loopexit:                      ; preds = %dec_label_pc_144b8
  %v4_144c8 = sub i32 3, %v0_144c8
  %v5_144c8 = and i32 %v4_144c8, %v0_144c8
  %v6_144c8 = icmp slt i32 %v5_144c8, 0
  %v7_144c8 = icmp slt i32 %v2_144c8, 0
  store i1 %v6_144c8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_144c8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_144d0

dec_label_pc_144d0:                               ; preds = %dec_label_pc_144d0.loopexit, %dec_label_pc_144ac
  %v2_1433c64 = phi i32 [ %v5_144c4, %dec_label_pc_144d0.loopexit ], [ %v1_144a0, %dec_label_pc_144ac ]
  %v0_1432c60 = phi i32 [ %v2_144c8, %dec_label_pc_144d0.loopexit ], [ %v2_144b0, %dec_label_pc_144ac ]
  %v0_144d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_144d0 = add i32 %v0_144d0, 1
  store i32 %v1_144d0, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_144c4, { 0, 2, 1 }
  uselistorder i32 %v3_144b8, { 1, 0 }
  uselistorder i32 %v2_144b0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_144a0, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14480, { 1, 0 }
  uselistorder i32 %v3_1447c, { 1, 0 }
  uselistorder i32 %v0_14480, { 3, 2, 1, 0 }
  uselistorder i32 %v0_144a0, { 3, 2, 1, 0 }
  uselistorder i32 %v5_14458, { 0, 2, 1 }
  uselistorder i32 %v3_1444c, { 1, 0 }
  uselistorder i32 %v2_14444, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14434, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14414, { 1, 0 }
  uselistorder i32 %v3_14410, { 1, 0 }
  uselistorder i32 %v0_14414, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14434, { 3, 2, 1, 0 }
  uselistorder i32 %v5_143ec, { 0, 2, 1 }
  uselistorder i32 %v3_143e0, { 1, 0 }
  uselistorder i32 %v2_143d8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_143c8, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_143a8, { 1, 0 }
  uselistorder i32 %v3_143a4, { 1, 0 }
  uselistorder i32 %v0_143a8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_143c8, { 3, 2, 1, 0 }
  uselistorder i1 %v5_14470, { 2, 0, 1 }
  uselistorder i32 %v0_14388, { 1, 0 }
  uselistorder i32 %v0_14474, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_143c830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_14378, { 2, 1, 0 }
  uselistorder i32 %v0_14378, { 2, 0, 1 }
  uselistorder i32 %v2_14370, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_14370, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14370, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_143c831, { 2, 1, 0 }
  uselistorder i32 %v11_1434c, { 1, 0 }
  uselistorder i32 %v7_1434c, { 1, 0 }
  uselistorder i32 %v1_1432c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_1432c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_14330, { 1, 0 }
  uselistorder i32 %v7_14324, { 0, 2, 1 }
  uselistorder i32 %v10_14320, { 1, 0 }
  uselistorder i32 %v9_14318, { 1, 0, 2 }
  uselistorder i32 %v6_14314, { 1, 0 }
  uselistorder i32 %v2_1430c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_1430c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_1431c, { 0, 3, 2, 1 }
  uselistorder i32 %v7_14300, { 0, 2, 1 }
  uselistorder i32 %v13_142fc, { 1, 0 }
  uselistorder i32 %v4_142f8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_142f8, { 2, 0, 1 }
  uselistorder i32 %v6_14300, { 0, 3, 2, 1 }
  uselistorder i32 %v7_142f0, { 0, 2, 1 }
  uselistorder i32 %v16_142ec, { 1, 0 }
  uselistorder i32 %v4_142e8, { 1, 2, 0 }
  uselistorder i32 %v0_142f8.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_142f0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_142dc, { 0, 3, 2, 1 }
  uselistorder i32 %v10_142d8, { 1, 0 }
  uselistorder i32 %v1_142d4, { 1, 0 }
  uselistorder i32 %v10_142d0, { 1, 0 }
  uselistorder i32 %v0_142d0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_142d4, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_142c8, { 0, 2, 1 }
  uselistorder i32 %v2_142bc, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_142bc, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_142d448, { 1, 2, 0 }
  uselistorder i32 %v1_142b4, { 2, 1, 0 }
  uselistorder i32 %v1_142ac, { 2, 3, 1, 0 }
  uselistorder i32 %v2_142a4, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_142a0, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_1429c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_1429c, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_14288, { 0, 2, 1 }
  uselistorder i32 %v3_1427c, { 1, 0 }
  uselistorder i32 %v2_14274, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_14264, { 1, 0, 3, 2 }
  uselistorder i32 %v8_14244, { 1, 0, 2 }
  uselistorder i32 %v5_14244, { 1, 0, 2 }
  uselistorder i32 %v2_14244, { 1, 0, 2 }
  uselistorder i32 %v3_14240, { 1, 0 }
  uselistorder i32 %v0_14244, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14264, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_1421c, { 0, 2, 1 }
  uselistorder i32 %v3_14210, { 1, 0 }
  uselistorder i32 %v2_14208, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_141f8, { 1, 0, 3, 2 }
  uselistorder i32 %v8_141d8, { 1, 0, 2 }
  uselistorder i32 %v5_141d8, { 1, 0, 2 }
  uselistorder i32 %v2_141d8, { 1, 0, 2 }
  uselistorder i32 %v3_141d4, { 1, 0 }
  uselistorder i32 %v0_141d8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_141f8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_141b0, { 0, 2, 1 }
  uselistorder i32 %v3_141a4, { 1, 0 }
  uselistorder i32 %v2_1419c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_1418c, { 1, 0, 3, 2 }
  uselistorder i32 %v8_1416c, { 1, 0, 2 }
  uselistorder i32 %v5_1416c, { 1, 0, 2 }
  uselistorder i32 %v2_1416c, { 1, 0, 2 }
  uselistorder i32 %v3_14168, { 1, 0 }
  uselistorder i32 %v0_1416c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1418c, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_14234, { 2, 0, 1 }
  uselistorder i32 %v0_14238, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1418c74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_1413c, { 1, 0 }
  uselistorder i32 %v0_1413c, { 3, 1, 0, 2 }
  uselistorder i32 %v2_14134, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_14134, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14134, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1418c75, { 2, 1, 0 }
  uselistorder i32 %v1_14114, { 1, 0, 2 }
  uselistorder i32 %v1_140ec, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_140ec, { 1, 2, 0, 3 }
  uselistorder i32 %v8_140d8, { 1, 0, 2 }
  uselistorder i32 %v6_140d4, { 1, 0 }
  uselistorder i32 %v2_140cc, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_140cc, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_140dc, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_140c4, { 0, 2, 1 }
  uselistorder i32 %v3_140c4, { 3, 0, 1, 2 }
  uselistorder i1 %v0_140c4, { 1, 0 }
  uselistorder i1 %v1_140c4, { 1, 0 }
  uselistorder i32 %v3_140c0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_140b8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_140a4, { 1, 2, 0 }
  uselistorder i32 %v12_14098, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1408c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14090, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_14080, { 0, 2, 1 }
  uselistorder i32 %v2_14078, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_14078, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_14070, { 1, 0 }
  uselistorder i32 %v1_14068, { 2, 1, 0 }
  uselistorder i32 %v2_14060, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_14060, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_14050, { 1, 0 }
  uselistorder i32 %v1_14050, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_14050, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 25, 26, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r3.global-to-local, { 0, 37, 1, 2, 3, 38, 4, 5, 6, 39, 35, 36, 40, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 27, 1, 2, 3, 4, 5, 28, 6, 7, 8, 9, 10, 67, 68, 69, 70, 71, 11, 29, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 30, 31, 62, 32, 33, 34, 35, 36, 63, 37, 38, 39, 40, 41, 64, 42, 43, 44, 45, 46, 65, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 12, 2, 4, 6, 7, 5, 13, 8, 9, 11, 65, 10, 64, 63, 66, 14, 19, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 34, 26, 27, 35, 28, 36, 29, 37, 30, 31, 32, 33, 38, 40, 39, 51, 41, 42, 45, 43, 52, 44, 46, 49, 47, 53, 48, 50, 54, 55, 56, 58, 57, 59, 60, 61, 62 }
  uselistorder i32* %r0.global-to-local, { 0, 21, 1, 2, 22, 3, 4, 34, 36, 5, 6, 7, 8, 9, 23, 10, 12, 11, 13, 14, 35, 15, 16, 24, 17, 18, 19, 20, 25, 26, 27, 29, 28, 30, 31, 32, 33 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 16, 17, 18, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 45, 8, 46, 10, 11, 12, 13, 14, 15, 16, 17, 18, 3, 19, 20, 21, 22, 23, 0, 24, 1, 26, 2, 27, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 42, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 0, 23, 1, 25, 2, 26, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 47, 8, 48, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 0, 25, 1, 27, 2, 28, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i32 31, { 22, 23, 1, 0, 10, 12, 11, 13, 2, 15, 25, 14, 24, 16, 26, 17, 27, 18, 28, 19, 29, 30, 20, 6, 21, 7, 3, 8, 4, 5, 9 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -2, { 12, 13, 11, 17, 0, 15, 1, 16, 2, 3, 8, 10, 9, 7, 6, 5, 4, 18, 19, 20, 21, 14 }
  uselistorder i32 65536, { 10, 9, 15, 11, 16, 12, 17, 13, 18, 14, 19, 20, 21, 25, 22, 26, 23, 27, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 58, 60, 61, 62, 64, 63, 66, 65, 67, 1, 68, 69, 2, 70, 0, 3, 71, 72, 73, 74, 75, 78, 76, 77, 79, 80, 81, 85, 86, 87, 88, 82, 83, 84, 89, 92, 93, 94, 90, 91, 95, 96, 97, 99, 98, 100, 4, 101, 103, 104, 102, 105, 106, 5, 107, 110, 111, 108, 112, 109, 113, 114, 115, 116, 117, 155, 119, 118, 156, 121, 120, 122, 124, 123, 126, 125, 157, 128, 127, 158, 130, 129, 131, 133, 132, 135, 134, 6, 136, 138, 139, 137, 140, 141, 7, 142, 144, 145, 146, 143, 147, 8, 148, 152, 153, 154, 149, 150, 151 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 47, 46, 49, 48, 51, 50, 52, 54, 53, 56, 55, 58, 57, 60, 59, 61, 62, 69, 63, 70, 64, 71, 65, 72, 73, 66, 74, 67, 75, 68, 77, 76, 81, 78, 82, 79, 83, 80, 87, 84, 88, 85, 89, 86, 90, 91, 92, 97, 93, 98, 94, 99, 95, 100, 96, 101, 102, 103, 104, 105, 106, 108, 107, 110, 109, 111, 112, 114, 113, 119, 115, 120, 116, 121, 117, 122, 118, 124, 123, 125, 128, 129, 126, 127, 130, 131, 132, 135, 133, 136, 134, 137, 140, 141, 138, 139, 142, 143, 144, 147, 145, 148, 146, 149, 150, 151, 152, 159, 153, 160, 161, 154, 162, 157, 163, 155, 164, 165, 156, 158, 166, 167, 171, 168, 172, 173, 169, 170, 174, 175, 176, 178, 177, 179 }
  uselistorder i32* @r5, { 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 161, 162, 163, 165, 592, 593, 594, 595, 596, 0, 597, 598, 202, 203, 204, 205, 206, 207, 479, 480, 481, 482, 483, 484, 485, 492, 486, 487, 488, 489, 490, 491, 528, 529, 530, 537, 538, 539, 540, 531, 532, 533, 534, 535, 536, 29, 30, 31, 166, 167, 3, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 71, 72, 21, 20, 22, 23, 24, 25, 26, 73, 74, 27, 28, 75, 76, 77, 78, 79, 80, 89, 90, 91, 81, 82, 83, 84, 85, 86, 87, 88, 4, 113, 114, 115, 116, 117, 118, 119, 211, 212, 213, 214, 215, 216, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 1, 112, 120, 121, 122, 123, 124, 125, 126, 127, 5, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 2, 151, 179, 180, 181, 182, 183, 8, 184, 185, 186, 187, 188, 189, 190, 191, 9, 192, 193, 194, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 6, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 7, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 195, 196, 197, 198, 199, 200, 201, 208, 209, 210 }
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 9, 10, 11, 23, 24, 15, 1, 12, 2, 13, 3, 14, 16, 17, 18, 4, 19, 20, 0, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 5, 35, 36, 37, 6, 38, 39, 40, 7, 41, 42, 43, 8, 44, 45, 46, 47, 48, 49, 50, 51, 52 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24 }
  uselistorder i32 48, { 0, 5, 6, 3, 4, 1, 7, 2, 8 }
  uselistorder i32 40, { 1, 7, 2, 0, 4, 5, 6, 8, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 36, { 1, 11, 12, 9, 10, 0, 2, 4, 3, 5, 6, 7, 8 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0 }
  uselistorder i32 -32, { 1, 0, 2, 3 }
  uselistorder i32 24, { 0, 73, 74, 38, 39, 1, 75, 76, 36, 37, 16, 15, 67, 46, 68, 47, 55, 59, 40, 41, 42, 43, 44, 45, 62, 48, 49, 50, 51, 52, 53, 54, 56, 57, 63, 58, 64, 60, 61, 69, 70, 71, 65, 66, 72, 17, 18, 19, 20, 2, 79, 21, 3, 80, 22, 23, 4, 81, 24, 82, 25, 5, 26, 27, 6, 28, 7, 8, 9, 10, 11, 12, 83, 29, 13, 84, 30, 85, 86, 87, 31, 32, 14, 88, 33, 89, 34, 77, 35, 78 }
  uselistorder i32* @lr, { 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 0, 117, 118, 119, 1, 120, 121, 122, 2, 123, 124, 125, 126, 127, 128, 129, 130, 34, 35, 131, 132, 133, 134, 135, 86, 87, 88, 89, 90, 91, 92, 93, 36, 37, 38, 39, 40, 6, 94, 4, 5, 95, 47, 48, 96, 58, 59, 60, 61, 62, 49, 50, 51, 52, 53, 7, 8, 9, 10, 13, 16, 3, 17, 14, 15, 11, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 97, 98, 99, 100, 101, 102, 18, 19, 20, 21, 41, 42, 54, 55, 56, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 103, 104, 105, 106, 43, 44, 45, 46 }
  uselistorder i32 16, { 31, 32, 33, 200, 34, 201, 202, 35, 203, 204, 36, 205, 206, 207, 208, 209, 210, 113, 114, 91, 92, 118, 115, 116, 117, 119, 26, 120, 121, 5, 6, 7, 8, 9, 25, 10, 11, 0, 12, 13, 52, 95, 37, 96, 38, 53, 93, 94, 97, 99, 100, 101, 27, 90, 14, 15, 24, 87, 16, 102, 17, 54, 98, 55, 105, 106, 41, 40, 39, 103, 42, 104, 43, 56, 57, 58, 59, 60, 61, 62, 63, 107, 64, 108, 65, 109, 66, 110, 67, 111, 68, 112, 70, 71, 72, 73, 69, 74, 28, 123, 124, 125, 126, 75, 127, 128, 129, 130, 131, 132, 133, 76, 134, 135, 136, 45, 137, 44, 138, 139, 78, 140, 141, 142, 143, 144, 1, 77, 145, 146, 147, 80, 148, 149, 150, 151, 152, 2, 79, 153, 81, 154, 155, 156, 18, 157, 19, 158, 88, 20, 82, 83, 159, 160, 3, 47, 161, 46, 162, 84, 163, 164, 165, 21, 166, 22, 167, 89, 23, 85, 86, 168, 169, 4, 49, 170, 48, 171, 51, 172, 50, 173, 174, 175, 176, 177, 29, 178, 179, 180, 181, 183, 182, 184, 185, 186, 187, 188, 189, 190, 30, 191, 192, 193, 194, 195, 197, 196, 198, 199, 122 }
  uselistorder i32 20, { 110, 3, 111, 112, 0, 4, 113, 32, 33, 23, 24, 1, 34, 35, 36, 37, 25, 27, 5, 28, 6, 29, 22, 26, 30, 31, 16, 17, 18, 19, 39, 40, 7, 41, 42, 43, 44, 45, 46, 47, 8, 48, 49, 50, 51, 52, 53, 54, 55, 56, 9, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 10, 67, 68, 69, 70, 71, 72, 73, 74, 11, 75, 76, 77, 2, 78, 79, 80, 81, 20, 82, 83, 84, 85, 86, 87, 88, 89, 90, 21, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 13, 101, 12, 102, 103, 104, 105, 15, 106, 14, 107, 108, 109, 38 }
  uselistorder i32 27, { 1, 0, 6, 5, 7, 2, 8, 3, 9, 4, 10 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 7, { 19, 20, 21, 53, 60, 2, 17, 22, 14, 23, 15, 24, 16, 25, 0, 18, 26, 27, 28, 29, 30, 3, 31, 32, 33, 34, 4, 35, 36, 37, 38, 5, 39, 6, 40, 7, 41, 42, 8, 43, 44, 9, 45, 46, 10, 47, 11, 48, 49, 50, 51, 12, 52, 55, 56, 57, 58, 13, 59, 1, 54 }
  uselistorder i32 -8, { 16, 17, 18, 19, 20, 21, 15, 14, 7, 13, 12, 11, 10, 22, 23, 24, 25, 8, 26, 0, 29, 9, 27, 28, 6, 1, 3, 2, 4, 5 }
  uselistorder i32* @ip, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 3, 4, 50, 1, 2, 0, 5, 6 }
  uselistorder i1 false, { 25, 26, 27, 34, 19, 24, 35, 36, 21, 22, 23, 37, 18, 38, 39, 0, 30, 29, 31, 28, 1, 3, 2, 16, 17, 4, 32, 15, 20, 33, 7, 6, 5, 8, 9, 10, 14, 11, 12, 13, 40 }
  uselistorder i32 4, { 71, 62, 63, 6, 414, 64, 415, 52, 7, 8, 65, 416, 66, 417, 418, 419, 420, 67, 421, 422, 423, 424, 68, 425, 426, 427, 428, 429, 9, 430, 431, 432, 433, 434, 69, 435, 51, 436, 437, 438, 439, 440, 441, 10, 11, 70, 442, 250, 251, 180, 181, 252, 253, 254, 443, 444, 445, 446, 447, 124, 125, 126, 53, 127, 128, 387, 389, 388, 385, 386, 355, 356, 357, 358, 390, 391, 392, 393, 359, 360, 361, 394, 395, 129, 130, 131, 132, 133, 45, 12, 13, 255, 256, 257, 258, 259, 260, 14, 15, 58, 16, 17, 59, 396, 397, 178, 18, 19, 90, 72, 278, 268, 54, 188, 91, 189, 93, 190, 94, 191, 134, 192, 211, 212, 213, 205, 206, 214, 215, 193, 194, 182, 183, 184, 185, 186, 187, 195, 196, 95, 197, 198, 199, 200, 201, 202, 203, 204, 92, 208, 209, 210, 207, 60, 216, 73, 96, 97, 20, 217, 21, 218, 219, 22, 220, 23, 221, 222, 47, 223, 46, 228, 98, 230, 99, 231, 100, 232, 233, 229, 224, 101, 225, 226, 227, 241, 135, 243, 24, 244, 245, 242, 25, 246, 48, 102, 247, 248, 398, 234, 57, 56, 55, 235, 103, 26, 27, 28, 29, 30, 31, 236, 49, 237, 50, 238, 239, 240, 136, 249, 0, 104, 32, 269, 270, 137, 271, 272, 273, 138, 139, 106, 274, 105, 276, 74, 277, 279, 140, 280, 281, 141, 142, 282, 75, 283, 76, 284, 285, 143, 144, 286, 145, 287, 288, 146, 147, 107, 289, 77, 290, 78, 291, 292, 293, 294, 295, 108, 296, 79, 297, 298, 299, 148, 300, 301, 302, 303, 149, 150, 2, 304, 109, 305, 80, 306, 307, 308, 151, 309, 310, 152, 153, 3, 110, 311, 81, 313, 82, 314, 315, 154, 316, 317, 318, 319, 320, 155, 156, 321, 322, 112, 323, 4, 111, 324, 83, 325, 113, 326, 327, 157, 328, 329, 330, 331, 332, 158, 159, 333, 334, 115, 335, 5, 114, 336, 84, 337, 116, 338, 339, 340, 341, 342, 117, 343, 85, 344, 345, 346, 347, 348, 160, 349, 350, 351, 161, 162, 119, 352, 118, 86, 353, 87, 354, 399, 400, 401, 402, 403, 121, 404, 122, 405, 163, 406, 407, 408, 164, 165, 123, 409, 120, 410, 88, 411, 89, 413, 166, 362, 363, 33, 167, 364, 365, 34, 168, 366, 367, 35, 169, 368, 369, 36, 170, 370, 371, 37, 171, 61, 372, 373, 38, 374, 172, 375, 376, 39, 173, 377, 378, 40, 174, 379, 380, 41, 175, 381, 382, 42, 176, 383, 384, 43, 412, 312, 261, 262, 263, 44, 264, 265, 1, 266, 177, 267, 275, 179 }
  uselistorder i32* @r2, { 68, 69, 30, 9, 31, 33, 32, 34, 35, 36, 37, 7, 70, 1, 71, 76, 77, 80, 72, 59, 63, 64, 67, 65, 66, 60, 61, 62, 58, 14, 0, 78, 2, 79, 5, 38, 39, 40, 8, 10, 73, 74, 75, 3, 41, 42, 43, 6, 26, 27, 28, 4, 44, 48, 51, 52, 49, 50, 53, 15, 11, 12, 13, 18, 19, 16, 17, 22, 23, 20, 21, 24, 25, 29, 45, 46, 47, 54, 55, 56, 57 }
  uselistorder label %dec_label_pc_144b8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1444c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_143e0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14380, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_1430c, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_142d0, { 1, 0 }
  uselistorder label %dec_label_pc_142bc, { 1, 0 }
  uselistorder label %dec_label_pc_1427c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14210, { 2, 0, 1 }
  uselistorder label %dec_label_pc_141a4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14144, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_140b8, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_14078, { 1, 0 }
}

define i32 @function_144d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_144d8:
  ret i32 %arg1
}

define i32 @function_144e0() local_unnamed_addr {
dec_label_pc_144e0:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_144e0 = load i32, i32* @r0, align 4
  %v2_144e0 = icmp eq i32 %v0_144e0, 0
  %v3_144e4 = load i32, i32* @r4, align 4
  store i32 %v3_144e4, i32* %stack_var_-20, align 4
  %v0_144e8 = load i32, i32* @r1, align 4
  br i1 %v2_144e0, label %dec_label_pc_145c0, label %dec_label_pc_144fc.lr.ph

dec_label_pc_144fc:                               ; preds = %dec_label_pc_144fc.lr.ph, %dec_label_pc_14580
  %v1_14580 = phi i32 [ 0, %dec_label_pc_144fc.lr.ph ], [ %v5_14580, %dec_label_pc_14580 ]
  %v0_14584 = phi i32 [ 1, %dec_label_pc_144fc.lr.ph ], [ %v1_14584, %dec_label_pc_14580 ]
  %v0_14504 = phi i32 [ %v0_144e0, %dec_label_pc_144fc.lr.ph ], [ %v0_1450425, %dec_label_pc_14580 ]
  %v1_14504 = inttoptr i32 %v0_14504 to i8*
  %v2_14504 = load i8, i8* %v1_14504, align 1
  %v3_14504 = zext i8 %v2_14504 to i32
  %v3_14508 = mul nuw nsw i32 %v3_14504, 2
  %v4_14508 = add i32 %v3_14508, %v2_14500.pre
  %v5_14508 = inttoptr i32 %v4_14508 to i8*
  %v6_14508 = load i8, i8* %v5_14508, align 1
  %v1_1450c = and i8 %v6_14508, 8
  %v2_1450c = icmp eq i8 %v1_1450c, 0
  br i1 %v2_1450c, label %dec_label_pc_145c0, label %dec_label_pc_14514

dec_label_pc_14514:                               ; preds = %dec_label_pc_144fc
  br label %dec_label_pc_14534

dec_label_pc_1451c:                               ; preds = %dec_label_pc_14534
  %v3_14520 = mul i32 %v0_14580, 10
  %v4_14520 = add i32 %v3_14534, %v3_14520
  %v1_14524 = add i32 %v4_14520, -48
  %v8_1452c = icmp sgt i32 %v1_14524, 255
  br i1 %v8_1452c, label %dec_label_pc_145c0, label %dec_label_pc_14530

dec_label_pc_14530:                               ; preds = %dec_label_pc_1451c
  %v1_14530 = add i32 %v0_14570, 1
  store i32 %v1_14530, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14534

dec_label_pc_14534:                               ; preds = %dec_label_pc_14514, %dec_label_pc_14530
  %v0_14580 = phi i32 [ 0, %dec_label_pc_14514 ], [ %v1_14524, %dec_label_pc_14530 ]
  %v0_14570 = phi i32 [ %v0_14504, %dec_label_pc_14514 ], [ %v1_14530, %dec_label_pc_14530 ]
  %v1_14534 = inttoptr i32 %v0_14570 to i8*
  %v2_14534 = load i8, i8* %v1_14534, align 1
  %v3_14534 = zext i8 %v2_14534 to i32
  %v2_14538 = mul nuw nsw i32 %v3_14534, 2
  %v2_1453c = add i32 %v2_14538, %v2_14500.pre
  %v3_14540 = inttoptr i32 %v2_1453c to i8*
  %v4_14540 = load i8, i8* %v3_14540, align 1
  %v6_14540 = zext i8 %v4_14540 to i32
  %v1_1454c = and i32 %v6_14540, 8
  %v2_1454c = icmp eq i32 %v1_1454c, 0
  br i1 %v2_1454c, label %dec_label_pc_14554, label %dec_label_pc_1451c

dec_label_pc_14554:                               ; preds = %dec_label_pc_14534
  %v8_14558 = icmp sgt i32 %v0_14584, 3
  br i1 %v8_14558, label %dec_label_pc_1456c, label %dec_label_pc_1455c

dec_label_pc_1455c:                               ; preds = %dec_label_pc_14554
  %v7_1455c = icmp eq i8 %v2_14534, 46
  br i1 %v7_1455c, label %dec_label_pc_14564, label %dec_label_pc_145c0

dec_label_pc_14564:                               ; preds = %dec_label_pc_1455c
  %v1_14564 = add i32 %v0_14570, 1
  store i32 %v1_14564, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14580

dec_label_pc_1456c:                               ; preds = %dec_label_pc_14554
  %v2_1456c = icmp eq i8 %v2_14534, 0
  %v1_14570 = add i32 %v0_14570, 1
  store i32 %v1_14570, i32* %r0.global-to-local, align 4
  br i1 %v2_1456c, label %dec_label_pc_14580, label %dec_label_pc_14578

dec_label_pc_14578:                               ; preds = %dec_label_pc_1456c
  %v1_14578 = and i32 %v6_14540, 32
  %v2_14578 = icmp eq i32 %v1_14578, 0
  br i1 %v2_14578, label %dec_label_pc_145c0, label %dec_label_pc_14580

dec_label_pc_14580:                               ; preds = %dec_label_pc_14578, %dec_label_pc_1456c, %dec_label_pc_14564
  %v0_1450425 = phi i32 [ %v1_14570, %dec_label_pc_14578 ], [ %v1_14570, %dec_label_pc_1456c ], [ %v1_14564, %dec_label_pc_14564 ]
  %v4_14580 = mul i32 %v1_14580, 256
  %v5_14580 = or i32 %v0_14580, %v4_14580
  %v1_14584 = add nuw nsw i32 %v0_14584, 1
  %v7_1458c = icmp slt i32 %v1_14584, 5
  br i1 %v7_1458c, label %dec_label_pc_144fc, label %dec_label_pc_14590

dec_label_pc_144fc.lr.ph:                         ; preds = %dec_label_pc_144e0
  %v2_14500.pre = load i32, i32* bitcast (i32** @global_var_1d174.446 to i32*), align 4
  br label %dec_label_pc_144fc

dec_label_pc_14590:                               ; preds = %dec_label_pc_14580
  %v2_14590 = icmp eq i32 %v0_144e8, 0
  br i1 %v2_14590, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_14590
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_14590
  %v3_145ac = call i32 @llvm.bswap.i32(i32 %v5_14580)
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_145b8 = inttoptr i32 %v0_144e8 to i32*
  store i32 %v3_145ac, i32* %v3_145b8, align 4
  %v2_145bc.pre = load i32, i32* %stack_var_-20, align 4
  %v17_145bc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_145bc = phi i32 [ 1, %bb ], [ %v17_145bc.pre, %bb40 ]
  %v2_145bc = phi i32 [ %v3_144e4, %bb ], [ %v2_145bc.pre, %bb40 ]
  store i32 %v2_145bc, i32* @r4, align 4
  ret i32 %v17_145bc

dec_label_pc_145c0:                               ; preds = %dec_label_pc_1455c, %dec_label_pc_14578, %dec_label_pc_144fc, %dec_label_pc_1451c, %dec_label_pc_144e0
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_144e4, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_14500.pre, { 1, 0 }
  uselistorder i32 %v1_14584, { 1, 0 }
  uselistorder i32 %v0_14570, { 0, 1, 3, 2 }
  uselistorder i32 %v3_144e4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 5, { 17, 26, 18, 6, 19, 7, 28, 3, 20, 27, 4, 1, 0, 29, 30, 31, 21, 22, 23, 24, 25, 32, 36, 37, 38, 39, 8, 40, 41, 42, 43, 9, 44, 45, 46, 47, 48, 49, 50, 51, 10, 52, 53, 54, 11, 55, 56, 57, 12, 58, 59, 60, 61, 13, 62, 63, 64, 65, 14, 66, 67, 68, 69, 70, 71, 72, 15, 73, 75, 76, 77, 78, 79, 80, 16, 81, 5, 74, 33, 2, 34, 35 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 63, 64, 68, 71, 72, 73, 69, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 88, 89, 91, 92, 93, 94, 95, 97, 98, 96, 101, 100, 99, 106, 102, 105, 103, 104, 107, 108, 109, 110, 491, 111, 112, 113, 114, 115, 492, 116, 117, 118, 119, 120, 121, 122, 123, 125, 124, 126, 127, 128, 131, 130, 129, 132, 134, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 144, 146, 147, 148, 152, 158, 153, 149, 154, 159, 155, 160, 156, 150, 161, 151, 162, 163, 157, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 174, 177, 180, 181, 179, 178, 182, 185, 184, 183, 192, 189, 193, 190, 186, 194, 191, 187, 188, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 212, 214, 215, 216, 227, 222, 217, 228, 223, 229, 224, 230, 225, 218, 219, 220, 231, 232, 233, 234, 226, 221, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 259, 268, 264, 269, 265, 261, 262, 266, 263, 270, 271, 267, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 287, 286, 294, 289, 300, 301, 295, 290, 302, 303, 296, 291, 304, 297, 305, 298, 306, 299, 307, 292, 308, 293, 309, 310, 311, 312, 313, 314, 315, 318, 319, 322, 320, 316, 323, 321, 317, 326, 325, 324, 329, 330, 327, 331, 328, 332, 336, 333, 338, 337, 334, 335, 339, 488, 493, 340, 341, 342, 343, 344, 347, 345, 346, 349, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 369, 367, 363, 370, 368, 364, 373, 372, 371, 376, 377, 374, 378, 375, 379, 383, 380, 385, 384, 381, 382, 386, 489, 494, 387, 388, 389, 390, 391, 394, 392, 393, 396, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 414, 416, 417, 418, 419, 421, 420, 422, 423, 425, 424, 426, 427, 428, 429, 432, 439, 433, 434, 430, 435, 436, 437, 431, 440, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 453, 455, 456, 457, 461, 468, 462, 463, 469, 464, 458, 459, 465, 460, 466, 470, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 483, 485, 486, 487, 490 }
  uselistorder i32 32, { 66, 41, 42, 39, 59, 60, 49, 50, 58, 5, 4, 7, 6, 9, 8, 40, 38, 61, 62, 44, 52, 43, 51, 45, 53, 46, 54, 47, 55, 11, 10, 13, 12, 15, 14, 17, 16, 48, 19, 18, 21, 20, 22, 24, 23, 26, 25, 27, 28, 30, 29, 56, 57, 63, 64, 31, 65, 32, 33, 34, 0, 35, 1, 2, 3, 36, 37 }
  uselistorder i8 46, { 0, 1, 3, 2 }
  uselistorder i32 3, { 40, 64, 65, 170, 66, 67, 68, 69, 70, 71, 75, 95, 171, 4, 157, 159, 160, 0, 72, 23, 73, 24, 161, 74, 41, 25, 45, 76, 27, 79, 44, 80, 46, 77, 47, 78, 2, 81, 82, 83, 84, 42, 5, 85, 86, 87, 88, 26, 89, 48, 90, 43, 91, 49, 92, 50, 93, 94, 28, 51, 52, 1, 96, 97, 53, 99, 100, 101, 102, 103, 104, 54, 105, 55, 106, 29, 107, 108, 109, 110, 111, 7, 6, 56, 30, 112, 113, 114, 115, 116, 117, 118, 9, 8, 57, 119, 31, 120, 121, 122, 123, 124, 125, 126, 127, 11, 10, 58, 128, 32, 129, 130, 131, 132, 133, 13, 12, 59, 134, 33, 135, 136, 137, 138, 60, 139, 15, 14, 35, 140, 34, 141, 142, 143, 144, 61, 145, 17, 16, 37, 146, 36, 147, 148, 149, 150, 151, 152, 153, 154, 19, 18, 62, 155, 38, 156, 162, 163, 164, 165, 166, 167, 21, 20, 63, 168, 39, 169, 22, 158, 3, 98 }
  uselistorder i32 8, { 90, 137, 23, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 24, 154, 65, 66, 67, 68, 72, 69, 70, 71, 155, 128, 127, 125, 126, 114, 115, 116, 129, 130, 131, 117, 118, 119, 7, 27, 28, 25, 26, 17, 18, 20, 21, 29, 156, 73, 74, 75, 76, 8, 9, 46, 19, 10, 11, 16, 12, 30, 52, 31, 13, 14, 15, 47, 39, 48, 36, 49, 37, 50, 38, 51, 22, 53, 54, 55, 56, 58, 40, 59, 41, 60, 61, 57, 62, 63, 42, 64, 80, 32, 81, 82, 83, 84, 85, 86, 87, 88, 89, 3, 91, 92, 93, 4, 94, 95, 96, 97, 98, 99, 100, 5, 101, 102, 103, 104, 105, 106, 107, 6, 108, 109, 110, 111, 112, 113, 132, 133, 134, 135, 136, 120, 33, 121, 34, 122, 35, 123, 43, 124, 0, 1, 45, 77, 78, 44, 79, 2 }
  uselistorder i32 255, { 1, 2, 0 }
  uselistorder i32 10, { 11, 45, 46, 0, 3, 4, 26, 27, 47, 1, 12, 8, 28, 35, 13, 31, 14, 32, 15, 33, 16, 34, 6, 36, 37, 29, 17, 38, 30, 39, 18, 40, 41, 42, 19, 5, 20, 21, 43, 22, 44, 9, 49, 50, 2, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 23, 61, 62, 63, 24, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 7, 69, 10, 75, 48, 25 }
  uselistorder i8 0, { 6, 0, 1, 23, 5, 24, 25, 2, 9, 26, 27, 28, 29, 30, 31, 32, 7, 33, 34, 35, 36, 37, 38, 3, 11, 10, 12, 41, 43, 40, 17, 42, 18, 44, 45, 39, 4, 46, 47, 48, 49, 50, 20, 51, 52, 55, 21, 53, 54, 19, 56, 57, 58, 59, 60, 13, 8, 14, 61, 15, 16, 22, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71 }
  uselistorder i32 2, { 5, 144, 264, 265, 63, 266, 267, 55, 268, 54, 269, 53, 148, 80, 81, 185, 82, 186, 83, 187, 6, 145, 270, 59, 84, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 146, 16, 17, 18, 19, 20, 86, 87, 85, 56, 57, 69, 163, 88, 91, 152, 157, 70, 149, 71, 150, 72, 151, 90, 153, 73, 154, 74, 155, 75, 156, 76, 162, 158, 159, 160, 161, 64, 92, 164, 21, 22, 165, 166, 167, 93, 168, 52, 147, 169, 89, 170, 23, 94, 176, 177, 24, 95, 96, 97, 178, 179, 98, 251, 102, 171, 100, 172, 101, 173, 99, 103, 174, 25, 26, 27, 104, 175, 65, 105, 106, 107, 108, 109, 110, 111, 66, 113, 114, 112, 115, 180, 58, 62, 181, 182, 183, 252, 253, 188, 189, 190, 191, 192, 193, 194, 117, 195, 116, 196, 197, 198, 199, 200, 119, 118, 201, 202, 203, 204, 205, 206, 207, 121, 208, 120, 209, 210, 122, 123, 77, 124, 211, 212, 213, 214, 215, 216, 217, 1, 28, 29, 30, 31, 32, 33, 125, 218, 78, 219, 220, 221, 222, 223, 2, 34, 35, 36, 37, 38, 39, 127, 126, 224, 225, 40, 226, 227, 60, 228, 129, 229, 3, 41, 42, 43, 44, 45, 130, 230, 128, 231, 232, 46, 233, 234, 61, 235, 132, 236, 4, 47, 48, 49, 50, 51, 133, 237, 131, 238, 239, 134, 135, 79, 136, 240, 241, 242, 243, 244, 245, 246, 247, 138, 248, 137, 249, 254, 255, 256, 140, 257, 141, 258, 259, 260, 261, 142, 262, 139, 263, 67, 250, 143, 68, 184 }
  uselistorder i32* @r1, { 45, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 1, 97, 98, 24, 25, 27, 26, 6, 7, 99, 0, 100, 36, 37, 19, 102, 62, 67, 68, 71, 69, 70, 63, 64, 65, 66, 61, 72, 101, 11, 5, 46, 28, 73, 29, 3, 74, 30, 31, 12, 8, 9, 10, 14, 13, 18, 75, 15, 16, 17, 20, 21, 22, 23, 32, 33, 34, 4, 35, 76, 77, 2, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 78, 79 }
  uselistorder label %dec_label_pc_145c0, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_14534, { 1, 0 }
}

define i32 @function_145cc(i32 %arg1) local_unnamed_addr {
dec_label_pc_145cc:
  %v3_145cc = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_145d4 = call i32 @function_11e54()
  %v0_145d8 = load i32, i32* @r4, align 4
  store i32 %v3_145cc, i32* @r4, align 4
  %v2_145e0 = call i32 @function_11efc(i32 %v0_145d4, i32 %v0_145d8)
  ret i32 %v2_145e0

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_11efc, { 7, 9, 6, 5, 2, 1, 0, 4, 8, 3 }
  uselistorder i32 ()* @function_11e54, { 0, 3, 1, 2 }
}

define i32 @function_145e4(i32 %arg1) local_unnamed_addr {
dec_label_pc_145e4:
  %v1_145e4 = add i32 %arg1, 28
  %v2_145e4 = inttoptr i32 %v1_145e4 to i32*
  %v3_145e4 = load i32, i32* %v2_145e4, align 4
  %v1_145ec = add i32 %arg1, 44
  %v2_145ec = inttoptr i32 %v1_145ec to i32*
  %v3_145ec = load i32, i32* %v2_145ec, align 4
  store i32 %v3_145e4, i32* @global_var_1d420.499, align 4
  store i32 %v3_145ec, i32* @global_var_1d424.501, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 11, 0, 3, 4, 1, 2, 9, 10, 5, 6, 7, 8 }
  uselistorder i32 28, { 28, 0, 18, 19, 7, 8, 27, 1, 9, 10, 11, 12, 13, 14, 15, 2, 6, 17, 16, 3, 4, 5, 20, 21, 22, 23, 24, 25, 26 }
}

define i32 @function_14608(i32* %arg1) local_unnamed_addr {
dec_label_pc_14608:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_14610 = call i32 @brk(i32* %arg1)
  %v3_14614 = icmp ult i32 %v2_14610, %tmp
  store i32 %v2_14610, i32* @global_var_1d230.496, align 4
  br i1 %v3_14614, label %dec_label_pc_14628, label %dec_label_pc_14638

dec_label_pc_14628:                               ; preds = %dec_label_pc_14608
  %v0_14628 = call i32 @function_123d0()
  %v2_14630 = inttoptr i32 %v0_14628 to i32*
  store i32 12, i32* %v2_14630, align 4
  br label %dec_label_pc_14638

dec_label_pc_14638:                               ; preds = %dec_label_pc_14608, %dec_label_pc_14628
  %v0_14638 = phi i32 [ 0, %dec_label_pc_14608 ], [ -1, %dec_label_pc_14628 ]
  ret i32 %v0_14638

; uselistorder directives
  uselistorder i32 12, { 17, 10, 123, 124, 125, 127, 128, 129, 130, 11, 126, 131, 132, 133, 134, 135, 136, 137, 70, 71, 33, 34, 72, 18, 19, 113, 114, 115, 0, 110, 116, 7, 117, 8, 111, 4, 112, 20, 21, 5, 73, 74, 22, 75, 76, 23, 12, 24, 13, 38, 39, 50, 53, 47, 54, 40, 35, 36, 37, 41, 25, 42, 26, 43, 27, 44, 45, 46, 48, 51, 52, 49, 55, 56, 57, 9, 58, 59, 60, 62, 63, 64, 32, 28, 65, 29, 66, 68, 67, 61, 6, 69, 118, 77, 14, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 30, 89, 90, 91, 92, 93, 31, 94, 95, 96, 97, 98, 99, 15, 100, 101, 102, 103, 104, 105, 16, 106, 107, 108, 109, 119, 120, 121, 122, 1, 2, 3 }
  uselistorder i32 ()* @function_123d0, { 21, 58, 29, 38, 9, 8, 7, 6, 37, 36, 35, 5, 59, 28, 27, 42, 41, 19, 20, 57, 56, 18, 17, 16, 14, 23, 55, 40, 54, 53, 13, 12, 52, 34, 33, 32, 51, 39, 22, 4, 3, 50, 44, 31, 24, 49, 2, 11, 48, 26, 10, 25, 15, 1, 0, 47, 46, 45, 43, 30 }
  uselistorder i32* @global_var_1d230.496, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_14638, { 1, 0 }
}

define i32 @function_14644(i32 %arg1) local_unnamed_addr {
dec_label_pc_14644:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14648 = load i32, i32* @global_var_1d000.459, align 4
  %v7_1464c = icmp eq i32 %v3_14648, -1
  %v3_14650 = load i32, i32* @r4, align 4
  store i32 %v3_14650, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1d000.459 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_1464c, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_14644
  store i32 %v3_14650, i32* %r4.global-to-local, align 4
  %v9_14658 = load i32, i32* @r0, align 4
  ret i32 %v9_14658

.preheader:                                       ; preds = %dec_label_pc_14644, %.preheader
  %v0_14660 = phi i32 [ %v3_14664, %.preheader ], [ %v3_14648, %dec_label_pc_14644 ]
  call void @__pseudo_branch(i32 %v0_14660)
  %v0_14664 = load i32, i32* %r4.global-to-local, align 4
  %v1_14664 = add i32 %v0_14664, -4
  %v2_14664 = inttoptr i32 %v1_14664 to i32*
  %v3_14664 = load i32, i32* %v2_14664, align 4
  store i32 %v1_14664, i32* %r4.global-to-local, align 4
  %v3_14668 = icmp eq i32 %v3_14664, -1
  br i1 %v3_14668, label %dec_label_pc_14670, label %.preheader

dec_label_pc_14670:                               ; preds = %.preheader
  %v2_14670 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14670, i32* %r4.global-to-local, align 4
  %v8_14670 = load i32, i32* @r0, align 4
  ret i32 %v8_14670

; uselistorder directives
  uselistorder i32 %v3_14664, { 1, 0 }
  uselistorder i32 %v3_14648, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 45, 16, 46, 47, 48, 3, 17, 18, 19, 49, 50, 51, 4, 20, 21, 22, 52, 53, 54, 5, 23, 24, 55, 15, 14, 56, 57, 58, 13, 12, 11, 10, 25, 26, 27, 28, 29, 0, 30, 1, 31, 2, 59, 9, 32, 36, 37, 43, 38, 33, 34, 39, 40, 41, 42, 44, 8, 7, 35, 6 }
  uselistorder i32 -1, {}
  uselistorder i32* @global_var_1d000.459, { 1, 0 }
  uselistorder i32 1, { 559, 69, 354, 400, 961, 962, 963, 964, 965, 376, 560, 310, 1034, 360, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 563, 562, 561, 315, 316, 319, 318, 314, 313, 317, 311, 320, 312, 321, 564, 18, 17, 13, 15, 14, 16, 19, 12, 738, 87, 85, 86, 88, 565, 89, 566, 146, 147, 567, 279, 210, 568, 302, 569, 282, 570, 325, 571, 324, 863, 864, 572, 307, 303, 308, 304, 305, 309, 306, 865, 866, 867, 448, 103, 104, 100, 102, 101, 573, 286, 574, 83, 0, 578, 577, 576, 575, 232, 231, 449, 579, 130, 131, 377, 450, 580, 230, 581, 899, 586, 585, 584, 583, 582, 61, 62, 63, 64, 451, 587, 355, 837, 347, 838, 378, 588, 30, 36, 29, 33, 32, 35, 37, 31, 34, 1047, 379, 591, 590, 589, 323, 322, 592, 39, 40, 38, 41, 42, 43, 44, 45, 593, 73, 74, 72, 71, 70, 594, 595, 285, 284, 596, 380, 1012, 597, 105, 106, 452, 453, 352, 601, 600, 599, 598, 48, 47, 361, 602, 164, 603, 107, 243, 604, 46, 605, 167, 606, 163, 607, 166, 608, 155, 609, 26, 610, 157, 611, 108, 612, 158, 613, 901, 338, 159, 160, 161, 739, 740, 741, 742, 743, 744, 745, 1048, 153, 154, 150, 151, 152, 614, 454, 455, 615, 246, 245, 247, 244, 408, 868, 616, 165, 409, 618, 617, 277, 276, 619, 255, 620, 256, 621, 267, 622, 132, 133, 623, 99, 624, 84, 625, 128, 626, 129, 627, 199, 113, 628, 60, 629, 229, 630, 297, 631, 301, 632, 300, 633, 217, 283, 198, 410, 774, 775, 411, 1013, 1014, 332, 1015, 869, 870, 871, 348, 872, 636, 635, 634, 121, 119, 115, 116, 118, 117, 114, 120, 122, 1, 839, 840, 841, 842, 362, 902, 903, 363, 904, 638, 637, 299, 298, 873, 874, 875, 456, 639, 112, 111, 110, 109, 1016, 381, 382, 2, 447, 1017, 640, 125, 123, 126, 127, 124, 771, 773, 772, 457, 876, 296, 295, 1018, 216, 877, 878, 879, 27, 28, 905, 641, 65, 67, 66, 68, 930, 931, 642, 214, 213, 212, 211, 215, 906, 907, 643, 93, 92, 91, 90, 94, 458, 752, 459, 753, 412, 754, 755, 776, 756, 762, 763, 768, 465, 746, 747, 467, 748, 749, 466, 750, 751, 468, 757, 384, 469, 470, 464, 758, 759, 463, 760, 761, 462, 764, 765, 461, 766, 767, 460, 769, 770, 777, 471, 353, 778, 472, 779, 781, 782, 780, 783, 473, 784, 737, 383, 787, 785, 474, 786, 789, 475, 790, 791, 792, 402, 793, 794, 385, 800, 801, 349, 476, 657, 656, 655, 654, 653, 652, 651, 650, 649, 648, 647, 646, 645, 644, 257, 259, 260, 263, 262, 258, 261, 264, 266, 265, 795, 796, 477, 797, 798, 478, 799, 658, 294, 293, 288, 292, 291, 290, 287, 289, 788, 479, 660, 659, 327, 328, 326, 807, 808, 809, 810, 811, 812, 813, 333, 346, 814, 815, 386, 334, 816, 817, 818, 819, 335, 345, 820, 821, 387, 336, 822, 480, 824, 825, 481, 826, 823, 827, 405, 828, 364, 831, 832, 829, 830, 339, 337, 340, 833, 482, 834, 667, 666, 553, 665, 664, 663, 552, 662, 661, 50, 52, 49, 55, 53, 58, 59, 51, 57, 54, 56, 668, 188, 1020, 365, 1019, 401, 669, 180, 181, 179, 183, 184, 186, 185, 187, 182, 908, 671, 670, 171, 172, 170, 169, 168, 173, 672, 485, 413, 802, 803, 414, 804, 483, 484, 486, 805, 806, 487, 488, 489, 490, 491, 492, 493, 494, 684, 683, 682, 681, 680, 679, 678, 677, 676, 558, 675, 674, 673, 9, 8, 11, 10, 495, 350, 496, 685, 415, 835, 497, 498, 686, 501, 500, 499, 836, 688, 687, 502, 843, 393, 844, 392, 845, 391, 846, 390, 847, 389, 848, 849, 503, 399, 388, 850, 504, 851, 505, 852, 506, 853, 507, 854, 508, 855, 509, 856, 510, 857, 511, 858, 512, 859, 513, 860, 514, 861, 515, 862, 351, 516, 703, 702, 701, 700, 699, 698, 697, 696, 695, 694, 693, 692, 691, 690, 689, 218, 219, 220, 221, 885, 4, 880, 517, 881, 3, 882, 403, 883, 356, 357, 884, 886, 404, 887, 707, 706, 705, 554, 555, 704, 1021, 416, 1022, 417, 1023, 5, 1024, 6, 7, 909, 910, 911, 912, 913, 914, 358, 359, 915, 916, 917, 918, 919, 920, 921, 922, 518, 923, 924, 519, 925, 928, 926, 927, 710, 709, 708, 135, 139, 138, 134, 141, 142, 145, 143, 136, 144, 140, 137, 932, 933, 934, 935, 936, 520, 366, 521, 712, 711, 194, 191, 195, 196, 197, 193, 192, 189, 190, 937, 938, 939, 522, 940, 941, 942, 943, 944, 945, 523, 946, 367, 524, 419, 418, 525, 947, 713, 76, 79, 80, 82, 81, 78, 77, 75, 948, 406, 342, 949, 526, 951, 950, 341, 527, 421, 420, 556, 714, 149, 148, 952, 953, 954, 955, 956, 957, 528, 958, 368, 529, 530, 959, 422, 960, 715, 235, 233, 234, 239, 240, 242, 241, 237, 238, 236, 966, 967, 394, 968, 969, 970, 531, 971, 369, 532, 424, 423, 533, 973, 534, 974, 716, 176, 177, 178, 175, 174, 975, 976, 395, 977, 978, 979, 535, 980, 370, 536, 429, 428, 537, 981, 425, 982, 426, 983, 427, 984, 721, 720, 719, 718, 717, 224, 225, 227, 226, 222, 223, 228, 985, 986, 396, 987, 988, 989, 538, 990, 371, 539, 437, 436, 540, 991, 435, 992, 430, 993, 431, 994, 432, 995, 433, 996, 541, 997, 434, 998, 726, 725, 724, 723, 722, 250, 251, 253, 252, 248, 249, 254, 999, 407, 344, 1000, 542, 1002, 1001, 343, 543, 439, 438, 557, 727, 281, 280, 1003, 1004, 1005, 397, 1006, 1007, 1008, 372, 544, 442, 441, 545, 1009, 440, 1010, 728, 268, 269, 274, 271, 273, 272, 275, 270, 1025, 1026, 1027, 398, 1028, 1029, 1030, 373, 546, 445, 444, 547, 1031, 443, 1032, 733, 732, 731, 730, 729, 203, 202, 201, 206, 207, 209, 208, 200, 205, 204, 1011, 446, 548, 734, 96, 97, 98, 95, 1033, 278, 972, 156, 888, 549, 891, 550, 892, 893, 889, 890, 894, 895, 896, 897, 374, 898, 375, 20, 23, 25, 21, 22, 24, 900, 551, 929, 162, 735, 736, 331, 330, 329 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_14678() local_unnamed_addr {
dec_label_pc_14678:
  %v5_1467c = load i32, i32* @r0, align 4
  ret i32 %v5_1467c

; uselistorder directives
  uselistorder i32* @r0, { 5, 16, 17, 118, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 79, 80, 82, 81, 29, 165, 166, 36, 37, 38, 39, 15, 4, 19, 20, 111, 112, 30, 167, 168, 66, 170, 26, 25, 129, 13, 128, 125, 34, 127, 21, 126, 130, 169, 44, 22, 83, 84, 85, 86, 32, 12, 87, 88, 89, 90, 11, 171, 7, 24, 45, 18, 131, 23, 132, 133, 14, 91, 134, 9, 92, 10, 93, 94, 0, 40, 46, 47, 41, 42, 43, 48, 51, 52, 53, 54, 55, 1, 49, 50, 63, 64, 65, 56, 57, 58, 59, 60, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 31, 75, 76, 77, 78, 95, 96, 97, 98, 99, 100, 101, 3, 102, 103, 104, 105, 106, 107, 108, 33, 109, 135, 136, 2, 113, 114, 115, 116, 117, 119, 121, 122, 123, 124, 137, 138, 120, 110, 8, 6, 27, 28, 35 }
}

define i32 @function_14680() local_unnamed_addr {
entry:
  %v3_14684 = load i32, i32* @r4, align 4
  %v0_1468c = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_14684)
  ret i32 %v0_1468c

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 7, 12, 13, 9, 10, 11, 14, 2, 5, 6, 3, 4, 1, 8 }
  uselistorder i32 0, { 120, 0, 890, 891, 892, 893, 122, 121, 894, 1046, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1051, 1052, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 40, 1071, 1072, 1073, 1074, 1075, 41, 1076, 1077, 1078, 42, 1079, 1080, 1081, 43, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1097, 1098, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 44, 1117, 1118, 1119, 1120, 1121, 45, 1122, 1123, 1124, 1125, 1126, 46, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 742, 743, 296, 744, 297, 607, 984, 985, 986, 987, 799, 745, 746, 1140, 1141, 1142, 1143, 298, 747, 1, 748, 749, 750, 1144, 1145, 1146, 123, 1147, 74, 1148, 72, 73, 1149, 1150, 1151, 299, 1155, 300, 1166, 1168, 546, 231, 1169, 301, 1167, 302, 303, 2, 1152, 1153, 124, 800, 252, 801, 306, 254, 253, 802, 803, 804, 805, 305, 807, 808, 304, 809, 1154, 720, 721, 722, 723, 724, 725, 126, 90, 726, 75, 125, 127, 308, 1156, 309, 255, 1157, 1158, 1160, 1161, 307, 990, 992, 993, 50, 232, 994, 991, 988, 989, 3, 972, 975, 973, 974, 233, 4, 997, 995, 996, 234, 128, 976, 977, 978, 982, 979, 980, 310, 5, 981, 6, 1004, 1005, 129, 998, 999, 1000, 1001, 1002, 1003, 7, 8, 806, 608, 609, 610, 311, 9, 312, 1006, 1007, 542, 1008, 543, 954, 936, 611, 727, 612, 613, 955, 956, 614, 895, 1170, 1171, 65, 751, 313, 752, 753, 754, 755, 314, 756, 757, 758, 759, 760, 761, 762, 615, 728, 937, 1159, 616, 699, 763, 813, 617, 544, 1162, 78, 1163, 1044, 618, 810, 1045, 811, 1009, 1164, 1165, 10, 619, 91, 620, 621, 228, 227, 547, 79, 80, 81, 82, 557, 548, 52, 51, 92, 622, 623, 624, 625, 627, 626, 11, 1010, 1011, 230, 229, 549, 83, 84, 85, 86, 558, 550, 54, 53, 49, 62, 1012, 559, 1013, 1014, 1015, 87, 1016, 1017, 1018, 1019, 1020, 130, 551, 560, 552, 553, 1021, 561, 100, 131, 764, 765, 88, 766, 767, 562, 12, 235, 132, 133, 286, 55, 134, 315, 628, 76, 768, 769, 1023, 1022, 1024, 1025, 47, 135, 1026, 138, 137, 136, 287, 288, 289, 140, 139, 141, 316, 770, 771, 142, 1027, 1028, 101, 143, 772, 144, 629, 145, 843, 844, 146, 814, 815, 585, 554, 635, 630, 93, 631, 632, 586, 587, 597, 579, 563, 321, 580, 581, 564, 323, 582, 583, 565, 322, 584, 603, 604, 588, 589, 147, 148, 590, 591, 592, 593, 566, 320, 594, 595, 567, 319, 596, 598, 568, 318, 599, 606, 569, 317, 600, 605, 601, 69, 56, 102, 103, 602, 545, 633, 324, 634, 237, 636, 325, 637, 640, 641, 150, 236, 638, 639, 326, 327, 642, 643, 256, 644, 645, 646, 647, 648, 649, 570, 650, 651, 66, 328, 653, 654, 655, 656, 657, 658, 659, 249, 248, 660, 329, 661, 662, 89, 663, 664, 104, 665, 556, 666, 667, 668, 669, 670, 671, 555, 672, 673, 674, 149, 330, 331, 677, 678, 679, 680, 681, 151, 675, 152, 676, 13, 153, 652, 700, 701, 702, 71, 57, 703, 70, 58, 704, 705, 706, 707, 708, 709, 332, 710, 711, 713, 154, 712, 67, 714, 15, 14, 715, 816, 817, 682, 683, 333, 684, 686, 155, 687, 688, 689, 690, 691, 692, 693, 257, 334, 694, 68, 335, 695, 685, 16, 696, 250, 697, 336, 698, 716, 717, 718, 719, 337, 290, 159, 158, 571, 291, 161, 160, 572, 292, 163, 162, 573, 293, 165, 164, 574, 294, 167, 166, 575, 576, 295, 157, 156, 239, 247, 240, 241, 242, 243, 338, 729, 168, 169, 738, 730, 731, 732, 733, 734, 735, 736, 737, 238, 739, 740, 59, 741, 170, 171, 339, 77, 773, 774, 775, 776, 246, 777, 778, 779, 245, 780, 781, 782, 783, 96, 784, 786, 785, 94, 95, 172, 244, 340, 787, 260, 258, 259, 97, 173, 63, 174, 818, 108, 107, 105, 106, 819, 820, 64, 821, 822, 823, 824, 825, 175, 826, 827, 341, 828, 829, 830, 831, 179, 176, 177, 178, 832, 833, 834, 835, 342, 836, 837, 263, 839, 262, 840, 261, 841, 343, 842, 845, 846, 111, 109, 110, 17, 847, 848, 849, 850, 180, 851, 852, 265, 264, 853, 344, 854, 855, 856, 857, 858, 115, 112, 113, 114, 18, 859, 860, 861, 181, 862, 182, 863, 864, 268, 865, 267, 866, 266, 867, 345, 868, 187, 347, 185, 186, 183, 184, 869, 189, 188, 870, 190, 346, 872, 873, 119, 116, 117, 118, 19, 871, 874, 875, 876, 877, 878, 879, 20, 21, 22, 23, 24, 880, 881, 191, 270, 882, 348, 883, 349, 884, 350, 885, 351, 886, 352, 887, 353, 888, 269, 889, 192, 193, 194, 897, 898, 896, 900, 901, 899, 25, 26, 27, 28, 29, 902, 195, 903, 904, 272, 905, 354, 908, 355, 909, 356, 910, 357, 911, 358, 912, 359, 913, 271, 914, 360, 915, 197, 196, 198, 917, 918, 916, 919, 920, 60, 922, 923, 924, 925, 361, 926, 30, 31, 32, 33, 34, 921, 199, 98, 927, 928, 277, 929, 276, 930, 275, 931, 273, 932, 274, 933, 362, 934, 363, 935, 201, 200, 202, 939, 940, 938, 941, 942, 61, 944, 945, 946, 947, 364, 948, 35, 36, 37, 38, 39, 943, 203, 99, 949, 950, 279, 951, 278, 952, 365, 953, 208, 367, 206, 207, 204, 205, 957, 210, 209, 958, 368, 211, 366, 212, 215, 214, 213, 961, 962, 960, 959, 369, 964, 963, 965, 216, 966, 967, 282, 968, 281, 969, 280, 970, 370, 971, 217, 220, 219, 218, 1031, 1032, 1030, 1029, 1034, 1033, 1035, 1036, 221, 285, 1037, 284, 1038, 283, 1039, 371, 1042, 251, 983, 1040, 222, 1041, 906, 223, 907, 788, 224, 789, 790, 791, 225, 372, 792, 793, 48, 794, 795, 796, 797, 798, 373, 812, 226, 838, 1043, 577, 578, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186 }
  uselistorder i32* @r4, {}
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
